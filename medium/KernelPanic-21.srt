1
00:00:00,000 --> 00:00:03,000
欢迎收听 ipin podcast 网络旗下的

2
00:00:03,000 --> 00:00:04,000
id 技术主题节目

3
00:00:04,000 --> 00:00:06,000
技术主题娱乐节目

4
00:00:06,000 --> 00:00:07,000
内核恐慌

5
00:00:07,000 --> 00:00:08,000
我们号称 Hardcore

6
00:00:08,000 --> 00:00:09,000
但是没有干货

7
00:00:09,000 --> 00:00:10,000
想听人听

8
00:00:10,000 --> 00:00:11,000
不想听人就别听

9
00:00:11,000 --> 00:00:14,000
内核恐慌的网址是 ipin.li

10
00:00:14,000 --> 00:00:15,000
slash kernelpanic

11
00:00:15,000 --> 00:00:17,000
我们推荐大家使用 podcast 客户端

12
00:00:17,000 --> 00:00:18,000
订阅我们的节目

13
00:00:18,000 --> 00:00:21,000
如果您不知道该用哪一个客户端

14
00:00:21,000 --> 00:00:22,000
欢迎访问 ipin.li

15
00:00:22,000 --> 00:00:24,000
slash faq

16
00:00:24,000 --> 00:00:26,000
同样欢迎你为我们的节目捐款

17
00:00:26,000 --> 00:00:27,000
捐款地址是 ipin.li

18
00:00:27,000 --> 00:00:28,000
slash kernelpanic

19
00:00:28,000 --> 00:00:29,000
slash donate

20
00:00:30,000 --> 00:00:31,000
捐款结合随意

21
00:00:31,000 --> 00:00:34,000
只要是能够归 8 正处的正流数的客户

22
00:00:34,000 --> 00:00:35,000
捐款不会为你带来什么

23
00:00:35,000 --> 00:00:37,000
不捐也不会让你失去什么

24
00:00:37,000 --> 00:00:39,000
我们的口号是 No Hard Feelings

25
00:00:42,000 --> 00:00:43,000
好了

26
00:00:44,000 --> 00:00:46,000
今天是第 21 期节目

27
00:00:47,000 --> 00:00:49,000
您嗓子怎么样

28
00:00:49,000 --> 00:00:51,000
还凑合现在

29
00:00:51,000 --> 00:00:52,000
你怎么样

30
00:00:56,000 --> 00:00:58,000
这倒不是故意加的吧

31
00:00:58,000 --> 00:00:59,000
这段千万要抹掉

32
00:00:59,000 --> 00:01:03,000
我在女朋友的悉心照料之下

33
00:01:03,000 --> 00:01:04,000
现在已经好了九成

34
00:01:04,000 --> 00:01:08,000
但是剩下的一成总是一直困扰着我

35
00:01:08,000 --> 00:01:09,000
就是说句话还是会咳嗽一下

36
00:01:09,000 --> 00:01:11,000
然后就会产生那种

37
00:01:12,000 --> 00:01:15,000
第一句话前面说的比较平缓

38
00:01:15,000 --> 00:01:16,000
后面越说越急

39
00:01:16,000 --> 00:01:17,000
说之后开始咳了

40
00:01:17,000 --> 00:01:18,000
没气是吧

41
00:01:18,000 --> 00:01:20,000
对我发现这个状况

42
00:01:20,000 --> 00:01:23,000
这上次感冒的好像是这次就叫什么来的

43
00:01:23,000 --> 00:01:24,000
窒息管炎对吧

44
00:01:24,000 --> 00:01:26,000
对其实就是烟炎转化

45
00:01:26,000 --> 00:01:28,000
转化成窒息管炎

46
00:01:28,000 --> 00:01:29,000
这怎么算

47
00:01:29,000 --> 00:01:30,000
同病相怜

48
00:01:31,000 --> 00:01:33,000
还是说什么隔空传染

49
00:01:36,000 --> 00:01:38,000
对这病毒现在已经可以电子化了

50
00:01:38,000 --> 00:01:40,000
然后数据 digitalize

51
00:01:40,000 --> 00:01:41,000
然后传到你那边

52
00:01:41,000 --> 00:01:42,000
或者是你传给

53
00:01:42,000 --> 00:01:45,000
Real Virus Spread Across Cybernet

54
00:01:49,000 --> 00:01:54,000
那生物能不能真的有一天以数字化的形式存在

55
00:01:54,000 --> 00:01:55,000
理论上可以吧

56
00:01:55,000 --> 00:01:57,000
就是那边探测一下 DNA

57
00:01:57,000 --> 00:01:59,000
然后这边合成一下

58
00:01:59,000 --> 00:02:00,000
不是出来了吗

59
00:02:00,000 --> 00:02:01,000
Maker Movement

60
00:02:01,000 --> 00:02:01,000
对吧

61
00:02:01,000 --> 00:02:03,000
搞个 3 D 打印机

62
00:02:03,000 --> 00:02:04,000
直接打印病毒出来

63
00:02:04,000 --> 00:02:06,000
你说的是传输生命

64
00:02:06,000 --> 00:02:11,000
我想的是能不能就让生命就这么生存在网络上

65
00:02:11,000 --> 00:02:14,000
就不用再转化为一个实体

66
00:02:14,000 --> 00:02:14,000
有没有

67
00:02:16,000 --> 00:02:19,000
就那天我们还在那个 IG 功能里面聊这个事情

68
00:02:19,000 --> 00:02:21,000
说要实现这一点

69
00:02:21,000 --> 00:02:23,000
我们现在要解决一些哲学上的问题

70
00:02:23,000 --> 00:02:25,000
什么叫生存是不是

71
00:02:26,000 --> 00:02:26,000
对吧

72
00:02:26,000 --> 00:02:27,000
嗯

73
00:02:27,000 --> 00:02:28,000
什么叫意识

74
00:02:28,000 --> 00:02:28,000
对不对

75
00:02:29,000 --> 00:02:31,000
现在其实这个问题有答案了吗

76
00:02:31,000 --> 00:02:34,000
我现在还没有看到有一个什么确切的靠谱的解吧

77
00:02:35,000 --> 00:02:35,000
不知道

78
00:02:35,000 --> 00:02:39,000
我觉得下次你们可以请脑科学博士

79
00:02:39,000 --> 00:02:41,000
照成上一次你们的节目

80
00:02:43,000 --> 00:02:43,000
OK

81
00:02:44,000 --> 00:02:45,000
好吧

82
00:02:45,000 --> 00:02:47,000
那我们先

83
00:02:50,000 --> 00:02:51,000
讲一下上一期的反馈

84
00:02:51,000 --> 00:02:52,000
好

85
00:02:52,000 --> 00:02:54,000
我有一个反馈

86
00:02:54,000 --> 00:02:59,000
有一位叫做 Ben Mark 的朋友在微博上给我们留了个言

87
00:02:59,000 --> 00:03:01,000
他这个消息这么说的

88
00:03:01,000 --> 00:03:02,000
有个问题想问 Rail

89
00:03:02,000 --> 00:03:04,000
在看不到原码的情况下

90
00:03:04,000 --> 00:03:10,000
如何知道 One Password 不是一个密码专业盗窃器呢

91
00:03:10,000 --> 00:03:12,000
以上期测试的语言来说

92
00:03:12,000 --> 00:03:14,000
我们只能把程序当做一个黑箱

93
00:03:14,000 --> 00:03:16,000
给一些输入来观察输出

94
00:03:16,000 --> 00:03:19,000
但是我们并不能证明答应号

95
00:03:19,000 --> 00:03:21,000
它是可信的

96
00:03:21,000 --> 00:03:21,000
也就是说

97
00:03:22,000 --> 00:03:24,000
实质上是我们选择相信 One Password

98
00:03:24,000 --> 00:03:27,000
想请问 Rail 是一句

99
00:03:27,000 --> 00:03:30,000
哪些因素认为 One Password 可信的呢

100
00:03:30,000 --> 00:03:33,000
然后他的第二个问题是说

101
00:03:33,000 --> 00:03:38,000
是否 Rail 只在 One Password 存储安全等级较低的密码

102
00:03:38,000 --> 00:03:43,000
那我能问一下安全等级较高的信息

103
00:03:43,000 --> 00:03:46,000
比如财务相关的 Rail 会数字化吗

104
00:03:46,000 --> 00:03:47,000
如果会的话

105
00:03:47,000 --> 00:03:49,000
Rail 的方案是什么

106
00:03:49,000 --> 00:03:50,000
这里集中解答一下

107
00:03:50,000 --> 00:03:52,000
就是

108
00:03:52,000 --> 00:03:52,000
首先

109
00:03:52,000 --> 00:03:55,000
我已经不用 One Password 了

110
00:03:55,000 --> 00:03:57,000
其实我也没怎么用过

111
00:03:57,000 --> 00:03:59,000
它就是当时就有买

112
00:03:59,000 --> 00:04:01,000
还是很久以前了吧

113
00:04:01,000 --> 00:04:05,000
对还是它的 2.0 还是 2.0 几的版本我买过

114
00:04:05,000 --> 00:04:07,000
然后用了一下

115
00:04:07,000 --> 00:04:07,000
觉得

116
00:04:08,000 --> 00:04:09,000
还凑合吧

117
00:04:09,000 --> 00:04:14,000
然后后来那个那个苹果的 Ktrain 不是出了那个 iCloudKtrain 吗

118
00:04:14,000 --> 00:04:17,000
就是可以跟那个 iCloud 通过

119
00:04:17,000 --> 00:04:21,000
同步到你的其他的 iOS 设备或者是 Mac 上面吧

120
00:04:21,000 --> 00:04:24,000
然后选择全部都存在那个 Ktrain 里面

121
00:04:24,000 --> 00:04:26,000
然后呢

122
00:04:26,000 --> 00:04:28,000
绝大部分信息都是数字化的

123
00:04:28,000 --> 00:04:30,000
然后比较一些比较机密的什么银行卡

124
00:04:30,000 --> 00:04:33,000
账号密码之类的也是存在那个 Ktrain 里面的

125
00:04:33,000 --> 00:04:35,000
所以刚才那个问题是说

126
00:04:35,000 --> 00:04:36,000
如果没有源码的话

127
00:04:36,000 --> 00:04:41,000
你怎么去选择相信这个 One Password 或者是 Ktrain 的安全性呢

128
00:04:41,000 --> 00:04:44,000
正确答案是你没法确信

129
00:04:44,000 --> 00:04:46,000
因为你没有源代码

130
00:04:46,000 --> 00:04:46,000
对吧

131
00:04:46,000 --> 00:04:48,000
也也不不戒然吧

132
00:04:48,000 --> 00:04:49,000
你可以

133
00:04:49,000 --> 00:04:51,000
你可以自己弄一个中间人攻击啊

134
00:04:51,000 --> 00:04:53,000
你可以把自己的路由器

135
00:04:53,000 --> 00:04:55,000
你可以秀探自己路由器

136
00:04:55,000 --> 00:04:58,000
然后看他到底在和哪些网站联络吗

137
00:04:58,000 --> 00:04:59,000
通信对吧

138
00:04:59,000 --> 00:05:02,000
对对还是当作黑盒来处理去观察他的输出

139
00:05:02,000 --> 00:05:05,000
或者说你做的再彻底一点

140
00:05:05,000 --> 00:05:08,000
你去反编译他的那个那个可信可知性文件

141
00:05:08,000 --> 00:05:11,000
看他有在哪哪些地方调用网络

142
00:05:11,000 --> 00:05:12,000
然后你足够牛逼的话

143
00:05:12,000 --> 00:05:14,000
应该能反解出来说他在哪些地方的时候

144
00:05:14,000 --> 00:05:16,000
哪些时候传输了

145
00:05:16,000 --> 00:05:18,000
他这个传输之前做了些什么东西

146
00:05:18,000 --> 00:05:23,000
但是我相信绝大部分理智的正常人是不会去做这件事情的

147
00:05:23,000 --> 00:05:24,000
如果你足够多疑的话

148
00:05:24,000 --> 00:05:27,000
那就是如果你 Pyranaut 到这个程度的话

149
00:05:27,000 --> 00:05:31,000
那基本上你肯定不会使用任何密码管理软件了

150
00:05:31,000 --> 00:05:31,000
比如我

151
00:05:33,000 --> 00:05:37,000
应该是说如果你需要这个层级的这个确信的话

152
00:05:37,000 --> 00:05:39,000
要么你就学那个 Richard Storman

153
00:05:39,000 --> 00:05:42,000
就是你用的所有软件

154
00:05:42,000 --> 00:05:44,000
我说的是所有软件

155
00:05:44,000 --> 00:05:47,000
包括像那个硬件的 BIOS 啊

156
00:05:47,000 --> 00:05:50,000
那个就是那个什么其他都中间都不说了

157
00:05:50,000 --> 00:05:51,000
什么操作系统啊

158
00:05:51,000 --> 00:05:52,000
应用程序啊

159
00:05:52,000 --> 00:05:54,000
都必须要是开源的

160
00:05:54,000 --> 00:05:56,000
你才能够去确保每个东西

161
00:05:56,000 --> 00:05:58,000
然后然后你对硬件的要求也是有高优权

162
00:05:58,000 --> 00:06:01,000
你必须用那种所谓的就是 Open hardware

163
00:06:01,000 --> 00:06:04,000
就是不要有那种常有私有代码的那种硬件

164
00:06:04,000 --> 00:06:06,000
就包括某一个

165
00:06:06,000 --> 00:06:09,000
比如说现在很多这个用硬盘或者 SSD

166
00:06:09,000 --> 00:06:10,000
上面不会有很多芯片吗

167
00:06:10,000 --> 00:06:12,000
对吧

168
00:06:12,000 --> 00:06:15,000
那些芯片的要求也是要求他们能开源的

169
00:06:15,000 --> 00:06:17,000
能知道你他在里面在做什么

170
00:06:17,000 --> 00:06:19,000
你这个时候你才可以

171
00:06:19,000 --> 00:06:21,000
就是你在有所有的源码的基础下

172
00:06:21,000 --> 00:06:24,000
你才可以确信的说这个这个机器没有做你

173
00:06:24,000 --> 00:06:26,000
你不想让他做的事情

174
00:06:26,000 --> 00:06:30,000
但是 Richard Storman 是用 Happy hacking keyboard 的吧

175
00:06:30,000 --> 00:06:32,000
对他接一个

176
00:06:32,000 --> 00:06:37,000
对如果是的话 Happy hacking keyboard 的 controller 是必然的

177
00:06:37,000 --> 00:06:38,000
是吗

178
00:06:38,000 --> 00:06:38,000
是啊

179
00:06:38,000 --> 00:06:39,000
OK

180
00:06:39,000 --> 00:06:41,000
所以这又存在一个漏洞了对吧

181
00:06:41,000 --> 00:06:44,000
你不确定他那个那个那个键盘里面有没有那个 keylog

182
00:06:44,000 --> 00:06:47,000
就是键盘记录器对吧

183
00:06:47,000 --> 00:06:48,000
对啊这又是一个不确定的意思

184
00:06:48,000 --> 00:06:51,000
所以其实你看在现代这种情况下

185
00:06:51,000 --> 00:06:54,000
你要求说每个步骤都是可以被 audited

186
00:06:54,000 --> 00:06:57,000
就是可审计的基本是不现实的

187
00:06:57,000 --> 00:06:59,000
对是非常非常难的一件事情

188
00:06:59,000 --> 00:07:01,000
对所以这个时候怎么办呢

189
00:07:01,000 --> 00:07:05,000
那你只能选择相信一些人或者是一个人了

190
00:07:05,000 --> 00:07:08,000
这个时候就可以你可以选择说说你相信苹果呢

191
00:07:08,000 --> 00:07:10,000
还是相信 One Password 呢

192
00:07:10,000 --> 00:07:12,000
当然你选择相信 One Password

193
00:07:12,000 --> 00:07:14,000
你刚刚跑的就是 Mac 系统的话

194
00:07:14,000 --> 00:07:16,000
你这种还是得选择相信苹果对吧

195
00:07:16,000 --> 00:07:17,000
所以我的策略就比较简单了

196
00:07:17,000 --> 00:07:19,000
那我就相信苹果好了

197
00:07:19,000 --> 00:07:21,000
with a leap of faith

198
00:07:21,000 --> 00:07:23,000
就像信上帝一样的

199
00:07:23,000 --> 00:07:27,000
没错苹果叫嘛那个拜一拜

200
00:07:27,000 --> 00:07:30,000
就是这个时候你就只能选择相信

201
00:07:30,000 --> 00:07:32,000
然后为什么我选择相信苹果呢

202
00:07:32,000 --> 00:07:33,000
这个理由也很简单

203
00:07:33,000 --> 00:07:34,000
因为这个什么

204
00:07:34,000 --> 00:07:36,000
他已经把那个牛逼吹出去了嘛对吧

205
00:07:36,000 --> 00:07:40,000
就是我们不不不销售这个用户影视一个隐私信息

206
00:07:40,000 --> 00:07:41,000
我们也不出着后门

207
00:07:41,000 --> 00:07:44,000
我们也不做一些什么对用户有害的事情

208
00:07:44,000 --> 00:07:46,000
因为我比较缺席的点是

209
00:07:46,000 --> 00:07:50,000
如果被人爆出来说苹果有意在那个 Kitch

210
00:07:50,000 --> 00:07:52,000
里面或者其他 Mac 里面做了什么手脚

211
00:07:52,000 --> 00:07:55,000
最后被人发现的话

212
00:07:55,000 --> 00:07:57,000
他对他的这个叫做商域啊

213
00:07:57,000 --> 00:08:02,000
就要说我们这个在这个在会计上是有这么一个概念

214
00:08:02,000 --> 00:08:04,000
叫做商域叫 Goodwill

215
00:08:04,000 --> 00:08:05,000
就是公司的品牌啊

216
00:08:05,000 --> 00:08:07,000
这个东西的这些东西的价值

217
00:08:07,000 --> 00:08:10,000
我如果苹果被发现他故意

218
00:08:10,000 --> 00:08:12,000
比如说因为 NSA 给他下了什么

219
00:08:12,000 --> 00:08:14,000
给他什么秘密法令

220
00:08:14,000 --> 00:08:16,000
他就在店外面做什么手脚

221
00:08:16,000 --> 00:08:18,000
如果他真的这么做了

222
00:08:18,000 --> 00:08:20,000
我相信对他商业是非常非常大的损失

223
00:08:20,000 --> 00:08:22,000
他这个损失通常是以多少

224
00:08:22,000 --> 00:08:25,000
billion dollars 就是十亿美元为单位的

225
00:08:25,000 --> 00:08:31,000
所以这个时候我相信在如此大的这个

226
00:08:31,000 --> 00:08:32,000
压力下

227
00:08:32,000 --> 00:08:37,000
以及从他们这么多年坚持下的道德观念来看

228
00:08:37,000 --> 00:08:40,000
我觉得我相信他们是可以的

229
00:08:40,000 --> 00:08:42,000
但至于说你信不信

230
00:08:42,000 --> 00:08:45,000
请你自己做自己的选择和判断

231
00:08:45,000 --> 00:08:45,000
对

232
00:08:45,000 --> 00:08:47,000
比如说我就选择不信

233
00:08:47,000 --> 00:08:50,000
因为这世界上没有什么东西是可信的

234
00:08:51,000 --> 00:08:53,000
我不是故意跟你探晚掉

235
00:08:53,000 --> 00:08:54,000
但是

236
00:08:54,000 --> 00:08:57,000
Richard Fox-Stormen 你好

237
00:08:57,000 --> 00:08:58,000
你们来我也是

238
00:09:00,000 --> 00:09:01,000
对

239
00:09:01,000 --> 00:09:03,000
我反正我也顺便说说自己的选择吧

240
00:09:03,000 --> 00:09:07,000
就我我是不用任何密码关注人家的

241
00:09:08,000 --> 00:09:10,000
所以你的密码是靠一套机制来实现的

242
00:09:10,000 --> 00:09:11,000
对

243
00:09:11,000 --> 00:09:13,000
我有一套比较详尽的密码

244
00:09:13,000 --> 00:09:15,000
存储和管理机制

245
00:09:15,000 --> 00:09:18,000
然后大脑自带密码生成器

246
00:09:18,000 --> 00:09:19,000
对

247
00:09:19,000 --> 00:09:20,000
我曾经在支付上写了一个答案

248
00:09:20,000 --> 00:09:23,000
反正简单的来说就是密码要分三层

249
00:09:25,000 --> 00:09:27,000
最基本的密码是一个

250
00:09:27,000 --> 00:09:29,000
大概一两年换一次密码

251
00:09:31,000 --> 00:09:34,000
然后这个密码可以是在所有这些网站上都一样的

252
00:09:34,000 --> 00:09:35,000
比如说什么

253
00:09:38,000 --> 00:09:41,000
你想要下载一个 Circle Developer

254
00:09:41,000 --> 00:09:43,000
从 Oracle 网站上下一个 Circle Developer

255
00:09:43,000 --> 00:09:46,000
它强迫你注册

256
00:09:46,000 --> 00:09:51,000
然后此时你可以选择去下一个 Bug me not 之类的

257
00:09:51,000 --> 00:09:52,000
流量器插件

258
00:09:52,000 --> 00:09:57,000
它自动帮你填一个已经有人注册过的弱密码

259
00:09:58,000 --> 00:10:00,000
另外一个选择就是你自己维护一个非常弱的密码

260
00:10:00,000 --> 00:10:04,000
然后基本上最低级的这一层密码

261
00:10:04,000 --> 00:10:07,000
我就是一直用一个最一样的

262
00:10:08,000 --> 00:10:11,000
第二层密码是每个网站不一样

263
00:10:12,000 --> 00:10:16,000
而且但是有一部分是一样的

264
00:10:16,000 --> 00:10:20,000
这个是比如一些比较重要的网站

265
00:10:20,000 --> 00:10:24,000
比如像什么知乎呀或者是微博之类的

266
00:10:24,000 --> 00:10:26,000
这种跟你的 identity 相关的东西

267
00:10:28,000 --> 00:10:30,000
然后这些密码有一套生成机制

268
00:10:30,000 --> 00:10:32,000
就是我看到它的网址

269
00:10:32,000 --> 00:10:34,000
或者是一般是看到网址的时候

270
00:10:34,000 --> 00:10:36,000
会想到这个密码应该是怎么构建的

271
00:10:37,000 --> 00:10:40,000
然后第三层密码就是什么网银的密码

272
00:10:40,000 --> 00:10:46,000
信用卡的密码或者是什么报税的税务局密码之类的

273
00:10:46,000 --> 00:10:48,000
这个密码是每个网站都不一样

274
00:10:48,000 --> 00:10:51,000
而且跟网站本身没有关系

275
00:10:51,000 --> 00:10:55,000
而且我自己有时候必须去看一个 reminder 才能看出来

276
00:10:55,000 --> 00:10:56,000
才能想起来

277
00:10:57,000 --> 00:11:00,000
所以你还是记录了密码在某一个地方对吧

278
00:11:00,000 --> 00:11:03,000
但我只记录了这个密码的 soul

279
00:11:03,000 --> 00:11:04,000
你可以理解

280
00:11:04,000 --> 00:11:06,000
Hint 吧

281
00:11:07,000 --> 00:11:12,000
Soul 就是看到这一串东西

282
00:11:12,000 --> 00:11:15,000
我才能够重新构建出那个密码

283
00:11:15,000 --> 00:11:15,000
这么一个

284
00:11:15,000 --> 00:11:16,000
对

285
00:11:16,000 --> 00:11:17,000
对

286
00:11:17,000 --> 00:11:20,000
Soul 是你已经有一个密码

287
00:11:20,000 --> 00:11:24,000
然后你通过加 soul 的盐变成一个新密码去输入的

288
00:11:25,000 --> 00:11:25,000
是吧

289
00:11:25,000 --> 00:11:26,000
你是这么一个过程

290
00:11:27,000 --> 00:11:28,000
OK 你说对

291
00:11:28,000 --> 00:11:33,000
因为我在纸上写了 soul 的词

292
00:11:33,000 --> 00:11:34,000
所以我一直叫 soul

293
00:11:34,000 --> 00:11:35,000
你说的没错

294
00:11:35,000 --> 00:11:36,000
是只能说是一个

295
00:11:36,000 --> 00:11:37,000
是个 hint

296
00:11:37,000 --> 00:11:38,000
对是个提示

297
00:11:38,000 --> 00:11:40,000
让你想起来密码是什么

298
00:11:40,000 --> 00:11:40,000
对

299
00:11:40,000 --> 00:11:41,000
然后最重要的是

300
00:11:41,000 --> 00:11:44,000
比如说什么飞溜直下三千尺是不是

301
00:11:45,000 --> 00:11:46,000
没有那么弱

302
00:11:46,000 --> 00:11:49,000
或者说我文学素颜没有那么高

303
00:11:51,000 --> 00:11:56,000
但最重要的是就是第二层和第三层密码要比第一层密码换得更勤快一些

304
00:11:56,000 --> 00:11:59,000
就是一号密码可能两个月就要换一次

305
00:11:59,000 --> 00:11:59,000
OK

306
00:11:59,000 --> 00:12:01,000
这是比较重要的

307
00:12:01,000 --> 00:12:04,000
但这是一个 paranoid 的人才会需要做的事情

308
00:12:06,000 --> 00:12:13,000
另外就是所有能够采用两步验证的网站

309
00:12:13,000 --> 00:12:14,000
一定要使用两步验证

310
00:12:15,000 --> 00:12:17,000
两步验证是手机上做的是吧

311
00:12:17,000 --> 00:12:19,000
用那个什么 Google syndicator 还是用什么

312
00:12:21,000 --> 00:12:22,000
对我是用 Google syndicator

313
00:12:22,000 --> 00:12:24,000
然后 Battlenet 有一个

314
00:12:24,000 --> 00:12:25,000
然后

315
00:12:26,000 --> 00:12:28,000
然后部分德国银行会给你一个卡

316
00:12:28,000 --> 00:12:29,000
这卡上可以按那个

317
00:12:30,000 --> 00:12:31,000
那个是

318
00:12:31,000 --> 00:12:32,000
蛮爽

319
00:12:32,000 --> 00:12:33,000
叫做密码器

320
00:12:34,000 --> 00:12:36,000
中国有很多银行也有了

321
00:12:36,000 --> 00:12:39,000
我觉得那个其实是比较安全的一个选择

322
00:12:41,000 --> 00:12:42,000
我的密码管理方法上

323
00:12:42,000 --> 00:12:45,000
我在同一个支付问题下我也有打好

324
00:12:45,000 --> 00:12:46,000
我们都有在那里

325
00:12:46,000 --> 00:12:47,000
到时候把那个链接贴出来

326
00:12:48,000 --> 00:12:48,000
我的就是

327
00:12:49,000 --> 00:12:50,000
我的比你更机器化

328
00:12:50,000 --> 00:12:52,000
然后更做得更绝

329
00:12:52,000 --> 00:12:53,000
就是所有的策略都是一样的

330
00:12:54,000 --> 00:12:55,000
每个网上都是随机生成的密码

331
00:12:55,000 --> 00:12:56,000
我自己都不知道

332
00:12:56,000 --> 00:12:57,000
必须用密码管理器看

333
00:12:59,000 --> 00:13:01,000
但此时就是

334
00:13:01,000 --> 00:13:03,000
你可能会选择在省

335
00:13:03,000 --> 00:13:05,000
你必须在省心和

336
00:13:08,000 --> 00:13:10,000
有安全感之间找到一个

337
00:13:10,000 --> 00:13:11,000
找到一个平衡

338
00:13:11,000 --> 00:13:14,000
就我的方法肯定不适合任何人

339
00:13:14,000 --> 00:13:14,000
对

340
00:13:15,000 --> 00:13:16,000
我的也肯定不适合任何人

341
00:13:16,000 --> 00:13:19,000
因为太麻烦了

342
00:13:20,000 --> 00:13:21,000
但是我是不介意麻烦的

343
00:13:21,000 --> 00:13:22,000
然后

344
00:13:24,000 --> 00:13:25,000
然后你刚才说是

345
00:13:25,000 --> 00:13:28,000
你有些网站是共享一个密码的吗

346
00:13:28,000 --> 00:13:28,000
对

347
00:13:29,000 --> 00:13:30,000
我都是每个都是不同的密码的

348
00:13:31,000 --> 00:13:32,000
对从这个角度讲

349
00:13:32,000 --> 00:13:33,000
你不要

350
00:13:33,000 --> 00:13:34,000
你要不要完全写单

351
00:13:34,000 --> 00:13:35,000
没错

352
00:13:35,000 --> 00:13:37,000
而且我连每个的邮箱账号都是不一样的

353
00:13:37,000 --> 00:13:39,000
就是每个注册账号的邮箱都是不一样

354
00:13:39,000 --> 00:13:40,000
对

355
00:13:40,000 --> 00:13:42,000
我觉得这个是最变态的一点

356
00:13:42,000 --> 00:13:45,000
他有一个自己的 Google Apps

357
00:13:46,000 --> 00:13:46,000
是吧

358
00:13:46,000 --> 00:13:47,000
对

359
00:13:47,000 --> 00:13:49,000
然后他给每一个网站

360
00:13:49,000 --> 00:13:51,000
都有一个自己不同的用户名

361
00:13:51,000 --> 00:13:52,000
然后导致有时候我会

362
00:13:52,000 --> 00:13:55,000
想要在这网站上给他分享一个什么东西

363
00:13:55,000 --> 00:13:57,000
然后他得先问我是哪个账号

364
00:13:57,000 --> 00:13:59,000
那个网站用户名是另外一个

365
00:13:59,000 --> 00:14:00,000
然后我就分

366
00:14:00,000 --> 00:14:01,000
对

367
00:14:01,000 --> 00:14:02,000
因为为什么要这么做

368
00:14:02,000 --> 00:14:04,000
其实除了在一个安全上

369
00:14:04,000 --> 00:14:06,000
还有一个就是一个匿名性的问题

370
00:14:07,000 --> 00:14:08,000
就是现在很多网站

371
00:14:08,000 --> 00:14:12,000
它是可以通过你使用同一个账号判断出

372
00:14:12,000 --> 00:14:15,000
你在那个网站用了另外一个什么服务

373
00:14:15,000 --> 00:14:15,000
对吧

374
00:14:15,000 --> 00:14:19,000
就不希望这样被他们通过交叉比对账号的

375
00:14:19,000 --> 00:14:20,000
通过 tracking 的

376
00:14:20,000 --> 00:14:22,000
因为有很多这个

377
00:14:22,000 --> 00:14:24,000
其实我们可以讲一下之前很多人

378
00:14:24,000 --> 00:14:27,000
账号被泄露出去的原因也比较简单

379
00:14:27,000 --> 00:14:29,000
就是很多人都是用同样一个账号

380
00:14:29,000 --> 00:14:31,000
比如说你某一个固定的邮箱地址

381
00:14:31,000 --> 00:14:33,000
或者是你的手机号码

382
00:14:33,000 --> 00:14:35,000
或者是某个人固定一个 ID 对吧

383
00:14:35,000 --> 00:14:38,000
然后一套固定的密码注册多个账号

384
00:14:38,000 --> 00:14:39,000
就像你说的那个第一层

385
00:14:39,000 --> 00:14:41,000
那种不怎么安全的东西

386
00:14:41,000 --> 00:14:45,000
然后其中某一个服务被人脱裤了

387
00:14:45,000 --> 00:14:48,000
就是所谓他的那个密码用户

388
00:14:48,000 --> 00:14:50,000
账号的那个数据库

389
00:14:50,000 --> 00:14:52,000
那张表被人爆出来

390
00:14:52,000 --> 00:14:53,000
这样的话

391
00:14:53,000 --> 00:14:55,000
别人拿到这个信息之后他可以挨个去试

392
00:14:55,000 --> 00:14:58,000
常见的网站上你注意同一个账号同一个密码

393
00:14:58,000 --> 00:15:00,000
有没有注册其他同类的服务对吧

394
00:15:00,000 --> 00:15:03,000
就可以依次连带贡献你的好多这种东西

395
00:15:03,000 --> 00:15:06,000
所以我这个就可以从根源上阻断这一点

396
00:15:06,000 --> 00:15:10,000
第一个你没办法把我的不同的网站的账号

397
00:15:10,000 --> 00:15:11,000
能够串起来

398
00:15:11,000 --> 00:15:14,000
第二个就算你发现我的这个账号是

399
00:15:14,000 --> 00:15:16,000
这个人用的这个账号

400
00:15:16,000 --> 00:15:18,000
是等于那个人在那个账号上面去

401
00:15:18,000 --> 00:15:20,000
你从用同一个密码去试也是不行的

402
00:15:20,000 --> 00:15:21,000
因为每个密码都是不一样的

403
00:15:22,000 --> 00:15:25,000
然后我跟你有一点不一样

404
00:15:25,000 --> 00:15:27,000
就是我不怎么去更换密码

405
00:15:29,000 --> 00:15:32,000
就是我不会说隔三岔我去换他一轮

406
00:15:32,000 --> 00:15:34,000
就是比较不频繁也换

407
00:15:34,000 --> 00:15:35,000
但是不是非常频繁

408
00:15:35,000 --> 00:15:37,000
因为我的理念是这样子的

409
00:15:37,000 --> 00:15:41,000
就是按照我这种用法和注意事项的结果

410
00:15:41,000 --> 00:15:43,000
如果这样密码被泄漏

411
00:15:43,000 --> 00:15:45,000
一般是因为对方网站被脱库了

412
00:15:45,000 --> 00:15:47,000
这个时候你换不换密码是没有任何区别的

413
00:15:52,000 --> 00:15:54,000
因为我的确是有道理

414
00:15:54,000 --> 00:15:55,000
对

415
00:15:55,000 --> 00:15:57,000
然后就我已经很麻烦了

416
00:15:57,000 --> 00:15:59,000
我就不想再给自己添更多的麻烦

417
00:15:59,000 --> 00:16:02,000
然后关于两部验证

418
00:16:02,000 --> 00:16:04,000
我也是基本上就是重要的服务

419
00:16:04,000 --> 00:16:07,000
其实提供两部验证的基本上是重要的服务

420
00:16:07,000 --> 00:16:08,000
对

421
00:16:08,000 --> 00:16:11,000
然后就基本上有两部验证的我都开了

422
00:16:11,000 --> 00:16:16,000
然后我在 iOS 上装了一个叫做 Authy 的一个应用

423
00:16:17,000 --> 00:16:19,000
之前也用那个 Google Authenticator

424
00:16:19,000 --> 00:16:20,000
我发现它不太好使

425
00:16:20,000 --> 00:16:22,000
就是那个界面也比较糟糕

426
00:16:23,000 --> 00:16:26,000
然后 Authy 会稍微好一点点

427
00:16:26,000 --> 00:16:30,000
其实当年最主要的原因是 Authy 有一个 Mac

428
00:16:30,000 --> 00:16:32,000
就是 OS X 的一个应用

429
00:16:32,000 --> 00:16:37,000
它理论上是可以通过蓝牙和你手机上 Authy 连接

430
00:16:37,000 --> 00:16:40,000
这样的话你就不用打开手机

431
00:16:40,000 --> 00:16:43,000
就能通过电脑上 Authy 的插件

432
00:16:43,000 --> 00:16:47,000
直接把一般是一个 6 位数的数字

433
00:16:48,000 --> 00:16:48,000
读出来

434
00:16:49,000 --> 00:16:50,000
后来我发现其实不行的

435
00:16:51,000 --> 00:16:55,000
就是那个是要求手机上 Authy 是在工作状态才可以的

436
00:16:55,000 --> 00:17:00,000
所以最终你还是得开一个手机上 Authy

437
00:17:00,000 --> 00:17:02,000
然后再开电脑上 Authy 去跟它蓝牙共享

438
00:17:03,000 --> 00:17:03,000
这样比较麻烦

439
00:17:04,000 --> 00:17:06,000
最后还是就直接在手机上翻

440
00:17:06,000 --> 00:17:08,000
6 位数也不是特别麻烦

441
00:17:08,000 --> 00:17:08,000
对吧

442
00:17:08,000 --> 00:17:10,000
就是可以数一下还可以

443
00:17:11,000 --> 00:17:14,000
然后后来那个 iOS 8 还是 7

444
00:17:14,000 --> 00:17:17,000
不是有了那个叫做 Notification Center 吗

445
00:17:17,000 --> 00:17:22,000
不是有的那个 today extension 还是叫什么

446
00:17:23,000 --> 00:17:24,000
就是从顶上

447
00:17:24,000 --> 00:17:25,000
对 today view

448
00:17:25,000 --> 00:17:26,000
对从顶上拉下来

449
00:17:26,000 --> 00:17:28,000
然后 Authy 它加了证明功能

450
00:17:28,000 --> 00:17:30,000
就是它可以直接在里面加个快捷访问

451
00:17:31,000 --> 00:17:32,000
就可以直接拉下来

452
00:17:32,000 --> 00:17:34,000
翻到 Authy 的那一栏

453
00:17:34,000 --> 00:17:35,000
然后点击某一个账号进去

454
00:17:35,000 --> 00:17:38,000
再数一下密码或者验一下指纹

455
00:17:38,000 --> 00:17:41,000
就可以直接取到 6 位数的验证码了

456
00:17:41,000 --> 00:17:41,000
对吧

457
00:17:42,000 --> 00:17:44,000
这样的话还是比较方便

458
00:17:46,000 --> 00:17:49,000
然后还有一种方式

459
00:17:49,000 --> 00:17:51,000
就是用一个硬件的 USB 设备

460
00:17:53,000 --> 00:17:56,000
这个国内大家都很熟叫做 U-Done

461
00:17:56,000 --> 00:17:57,000
对

462
00:17:57,000 --> 00:17:59,000
那个银行的弄

463
00:17:59,000 --> 00:18:00,000
它其实还有好几种形式

464
00:18:01,000 --> 00:18:02,000
不光是有 USB 的

465
00:18:03,000 --> 00:18:04,000
就 USB 的都有好几种

466
00:18:04,000 --> 00:18:05,000
第一种是最传统的那个

467
00:18:05,000 --> 00:18:08,000
我记得当年是工行吧

468
00:18:08,000 --> 00:18:09,000
我办了第一个 U-Done

469
00:18:09,000 --> 00:18:10,000
就插上去

470
00:18:10,000 --> 00:18:12,000
它里面其实就是内置一个

471
00:18:13,000 --> 00:18:13,000
司钥

472
00:18:14,000 --> 00:18:15,000
不是它是一个司钥

473
00:18:15,000 --> 00:18:16,000
司钥生成器

474
00:18:17,000 --> 00:18:18,000
这就是一个内置的司钥

475
00:18:19,000 --> 00:18:20,000
没有密码生成器

476
00:18:20,000 --> 00:18:21,000
没有密码生成器

477
00:18:21,000 --> 00:18:22,000
它是验证那个系统用的

478
00:18:22,000 --> 00:18:24,000
如果我们理解没错

479
00:18:24,000 --> 00:18:24,000
应该是这样

480
00:18:24,000 --> 00:18:26,000
它就是给签名用的

481
00:18:27,000 --> 00:18:27,000
那个司钥

482
00:18:27,000 --> 00:18:29,000
它是一个叫做 HSM

483
00:18:29,000 --> 00:18:33,000
Hardware Security Module

484
00:18:33,000 --> 00:18:34,000
应该是叫这个名字

485
00:18:36,000 --> 00:18:39,000
因为我们当时有一个同学在研究

486
00:18:39,000 --> 00:18:40,000
他说里面是一个

487
00:18:41,000 --> 00:18:43,000
或者他的意思是每次给出来司钥

488
00:18:43,000 --> 00:18:44,000
只是

489
00:18:45,000 --> 00:18:47,000
所有可能司钥之中一种

490
00:18:47,000 --> 00:18:48,000
这么高级

491
00:18:48,000 --> 00:18:49,000
对

492
00:18:49,000 --> 00:18:49,000
OK

493
00:18:50,000 --> 00:18:51,000
反正

494
00:18:51,000 --> 00:18:51,000
Anyway

495
00:18:51,000 --> 00:18:52,000
就逻辑上应该这样

496
00:18:52,000 --> 00:18:53,000
就是它里面是一个

497
00:18:53,000 --> 00:18:54,000
只有那个硬件

498
00:18:55,000 --> 00:18:57,000
本身才知道的一个秘密

499
00:18:57,000 --> 00:18:59,000
好像秘密是不能通过 USB 这口读取的

500
00:18:59,000 --> 00:19:00,000
它只能说

501
00:19:00,000 --> 00:19:01,000
你提供一个东西

502
00:19:01,000 --> 00:19:02,000
给它帮你验证

503
00:19:02,000 --> 00:19:03,000
帮你做一个签名

504
00:19:04,000 --> 00:19:05,000
然后这个签名再返回到你电脑里面

505
00:19:05,000 --> 00:19:07,000
再传输给对方网站

506
00:19:07,000 --> 00:19:08,000
然后那个

507
00:19:09,000 --> 00:19:09,000
应该是

508
00:19:09,000 --> 00:19:10,000
对

509
00:19:10,000 --> 00:19:12,000
然后那边可以通过签名验证

510
00:19:12,000 --> 00:19:14,000
确实是经过司钥

511
00:19:15,000 --> 00:19:16,000
签名过的东西

512
00:19:16,000 --> 00:19:17,000
大概这么一个过程

513
00:19:17,000 --> 00:19:18,000
对

514
00:19:18,000 --> 00:19:19,000
然后

515
00:19:19,000 --> 00:19:22,000
还有一种是 USB 的

516
00:19:22,000 --> 00:19:23,000
不是 USB

517
00:19:23,000 --> 00:19:25,000
就是刚刚你说的密码器

518
00:19:25,000 --> 00:19:25,000
就是一个

519
00:19:25,000 --> 00:19:28,000
它不需要通过 USB 接口来插的

520
00:19:29,000 --> 00:19:30,000
它就是一个

521
00:19:30,000 --> 00:19:32,000
叫 RCA

522
00:19:32,000 --> 00:19:33,000
美国那间公司

523
00:19:33,000 --> 00:19:35,000
它有一个小的一个

524
00:19:35,000 --> 00:19:36,000
挂钥匙穿上一个小东西

525
00:19:36,000 --> 00:19:37,000
有个小屏幕

526
00:19:37,000 --> 00:19:38,000
它就是

527
00:19:38,000 --> 00:19:40,000
就是那个 RCA 的硬件版本

528
00:19:41,000 --> 00:19:42,000
它每隔可能 15 秒 30 秒

529
00:19:42,000 --> 00:19:44,000
它会换一个数字

530
00:19:44,000 --> 00:19:45,000
然后这个数字

531
00:19:45,000 --> 00:19:46,000
它那个顺序

532
00:19:46,000 --> 00:19:47,000
这个 sequence

533
00:19:47,000 --> 00:19:50,000
就是那串数字的顺序是既定的

534
00:19:50,000 --> 00:19:53,000
然后这可以通过当前的时间来判定

535
00:19:54,000 --> 00:19:56,000
就可以对方服务器上也知道说

536
00:19:56,000 --> 00:19:57,000
这个时候是不是这个数字

537
00:19:58,000 --> 00:19:58,000
就这个 sequence

538
00:19:59,000 --> 00:19:59,000
就可以通过这个

539
00:19:59,000 --> 00:20:00,000
就是一个随机输电

540
00:20:01,000 --> 00:20:01,000
对

541
00:20:01,000 --> 00:20:02,000
其实我刚刚想说

542
00:20:02,000 --> 00:20:04,000
就是另外一种形式

543
00:20:04,000 --> 00:20:06,000
就是要求你一定要插入电脑里面

544
00:20:06,000 --> 00:20:07,000
而不是一个

545
00:20:07,000 --> 00:20:08,000
就 USB 的那个

546
00:20:08,000 --> 00:20:08,000
就是

547
00:20:08,000 --> 00:20:08,000
对

548
00:20:08,000 --> 00:20:11,000
就是要求你一定要插入电脑里面

549
00:20:11,000 --> 00:20:11,000
对

550
00:20:11,000 --> 00:20:12,000
那这有个问题

551
00:20:12,000 --> 00:20:13,000
就是现在不是很多这个

552
00:20:14,000 --> 00:20:15,000
手机了吗

553
00:20:15,000 --> 00:20:16,000
没有 USB 接口怎么办

554
00:20:17,000 --> 00:20:18,000
后来上次我看他们有一种

555
00:20:18,000 --> 00:20:20,000
另外的一些方案就是

556
00:20:20,000 --> 00:20:22,000
那个是可以插 USB 口

557
00:20:22,000 --> 00:20:23,000
也可以通过一个

558
00:20:24,000 --> 00:20:25,000
音频的接口

559
00:20:25,000 --> 00:20:26,000
就是那个耳机线

560
00:20:26,000 --> 00:20:27,000
耳机插线

561
00:20:27,000 --> 00:20:28,000
然后插在手机上

562
00:20:28,000 --> 00:20:30,000
然后它那个银行软件

563
00:20:30,000 --> 00:20:31,000
做了一个什么特殊的协议

564
00:20:31,000 --> 00:20:34,000
通过这个播放一个声音

565
00:20:34,000 --> 00:20:35,000
就是就猫就猫嘛

566
00:20:35,000 --> 00:20:37,000
那个知道他记得以前

567
00:20:37,000 --> 00:20:38,000
播放上的猫

568
00:20:38,000 --> 00:20:39,000
嘶嘶嘶嘶那个声音吗

569
00:20:39,000 --> 00:20:40,000
对

570
00:20:40,000 --> 00:20:42,000
他就是通过那个东西来

571
00:20:42,000 --> 00:20:43,000
通过那个

572
00:20:43,000 --> 00:20:46,000
语音来编码一串那个数字信息

573
00:20:47,000 --> 00:20:48,000
他这个就是用了一样的原理

574
00:20:48,000 --> 00:20:51,000
就通过那个手机的耳机那个接口

575
00:20:51,000 --> 00:20:53,000
去输出一段声音

576
00:20:53,000 --> 00:20:56,000
然后那个声音是包含一些特殊的编码过的

577
00:20:56,000 --> 00:20:58,000
这个私钥的那些认证的信息的

578
00:20:58,000 --> 00:20:59,000
嗯

579
00:20:59,000 --> 00:21:00,000
然后德国还有种方法

580
00:21:00,000 --> 00:21:03,000
就是它会在屏幕上不停的闪烁一组

581
00:21:03,000 --> 00:21:05,000
二进制文亚

582
00:21:06,000 --> 00:21:09,000
然后你用它的那个密码生成器

583
00:21:09,000 --> 00:21:11,000
背后有一个类似摄像头

584
00:21:11,000 --> 00:21:12,000
或者说应该不是

585
00:21:12,000 --> 00:21:13,000
就是一个感光元件

586
00:21:13,000 --> 00:21:16,000
然后你把那个感光元件

587
00:21:16,000 --> 00:21:17,000
hold 在屏幕的上方

588
00:21:18,000 --> 00:21:19,000
然后等一会之后

589
00:21:19,000 --> 00:21:20,000
这个这个密码

590
00:21:20,000 --> 00:21:22,000
就被识别出来了吗

591
00:21:22,000 --> 00:21:22,000
识别出来

592
00:21:22,000 --> 00:21:23,000
然后生成一个密码

593
00:21:24,000 --> 00:21:26,000
what 这个好可惜

594
00:21:26,000 --> 00:21:27,000
好吧

595
00:21:27,000 --> 00:21:28,000
但这样不是很费电吗

596
00:21:28,000 --> 00:21:29,000
那个密码器

597
00:21:29,000 --> 00:21:30,000
密码器就像我说的

598
00:21:30,000 --> 00:21:33,000
它只是一个感光元件而已

599
00:21:33,000 --> 00:21:36,000
就是它要求密码需要有供电才可以识别

600
00:21:36,000 --> 00:21:38,000
对密码器是装电池的

601
00:21:38,000 --> 00:21:38,000
对啊

602
00:21:38,000 --> 00:21:39,000
这样电池不就费得很快

603
00:21:39,000 --> 00:21:40,000
还好吧

604
00:21:40,000 --> 00:21:44,000
我前四年前申请的一个

605
00:21:45,000 --> 00:21:46,000
scanner 现在还能用

606
00:21:46,000 --> 00:21:49,000
而且这个 scanner 要求你当时要把银行卡插进去

607
00:21:49,000 --> 00:21:50,000
哈哈

608
00:21:50,000 --> 00:21:51,000
对吧

609
00:21:51,000 --> 00:21:52,000
好吧

610
00:21:52,000 --> 00:21:54,000
那个 RSA 那个密码器

611
00:21:54,000 --> 00:21:55,000
也是就是一个小电池

612
00:21:55,000 --> 00:21:56,000
可以用好几年了这样

613
00:21:56,000 --> 00:21:57,000
嗯

614
00:21:57,000 --> 00:21:58,000
但是过了几年它就会

615
00:21:58,000 --> 00:21:59,000
它有一个有效期嘛

616
00:21:59,000 --> 00:22:01,000
expire 就是过了

617
00:22:01,000 --> 00:22:02,000
就跟那个什么

618
00:22:02,000 --> 00:22:03,000
SSL 证书一样

619
00:22:03,000 --> 00:22:05,000
有个有效期过了就作废了

620
00:22:06,000 --> 00:22:08,000
瑞士银行发的密码生存器

621
00:22:08,000 --> 00:22:09,000
也是就是一张信用卡

622
00:22:09,000 --> 00:22:12,000
然后信用卡里面肯定有一块电池

623
00:22:12,000 --> 00:22:13,000
然后因为它上面可以显示一个数字

624
00:22:13,000 --> 00:22:17,000
然后我估计那个电池可以一直用到这个卡作废为止

625
00:22:17,000 --> 00:22:18,000
对啊

626
00:22:18,000 --> 00:22:20,000
一般就是什么三五年这样子

627
00:22:20,000 --> 00:22:20,000
嗯

628
00:22:21,000 --> 00:22:24,000
上次那个就是 RSA 这间公司不是被黑了吗

629
00:22:24,000 --> 00:22:25,000
就是好多

630
00:22:25,000 --> 00:22:27,000
那个国内的企业

631
00:22:27,000 --> 00:22:28,000
也因为那个要全部换一轮

632
00:22:28,000 --> 00:22:29,000
那个那个

633
00:22:30,000 --> 00:22:31,000
发出去的生存器嘛

634
00:22:31,000 --> 00:22:32,000
我记得好像有这么一个事

635
00:22:33,000 --> 00:22:36,000
所以安全还是挺难的一件事情

636
00:22:36,000 --> 00:22:38,000
对一会新闻环节里面

637
00:22:38,000 --> 00:22:42,000
我们也要聊一聊最近的那个 hacking team 被

638
00:22:42,000 --> 00:22:43,000
其实

639
00:22:43,000 --> 00:22:45,000
对其实那个说到这个顺便聊一下就是

640
00:22:46,000 --> 00:22:48,000
就你用那个登录服务器

641
00:22:48,000 --> 00:22:49,000
SSH 登录服务器

642
00:22:49,000 --> 00:22:51,000
你是用密码还是用那个证书

643
00:22:52,000 --> 00:22:52,000
用证书呀

644
00:22:52,000 --> 00:22:54,000
用不是证书 key

645
00:22:54,000 --> 00:22:55,000
就是你就是用 private key 嘛

646
00:22:55,000 --> 00:22:56,000
对对对

647
00:22:56,000 --> 00:22:58,000
然后我基本上我的那些服务器的话

648
00:22:58,000 --> 00:23:00,000
都是禁掉密码登录

649
00:23:00,000 --> 00:23:01,000
然后用 key 的

650
00:23:01,000 --> 00:23:03,000
我只有 root 是这样的

651
00:23:03,000 --> 00:23:04,000
其实我觉得只有 root 是这样的

652
00:23:04,000 --> 00:23:05,000
好吧

653
00:23:05,000 --> 00:23:06,000
你还有其他账户吗

654
00:23:06,000 --> 00:23:09,000
有我你难道平时有 root 账户登录吗

655
00:23:09,000 --> 00:23:09,000
不是不是

656
00:23:09,000 --> 00:23:11,000
就你其他账户只可以用密码登录吗

657
00:23:11,000 --> 00:23:13,000
我其他账户可以用密码登录

658
00:23:13,000 --> 00:23:14,000
因为有时候比如说

659
00:23:14,000 --> 00:23:16,000
临时抓一个 ipad 的

660
00:23:16,000 --> 00:23:19,000
必须 sshssh 连上去怎么办

661
00:23:20,000 --> 00:23:22,000
那个那其他账户可以 sudo 吗

662
00:23:23,000 --> 00:23:24,000
可以

663
00:23:24,000 --> 00:23:27,000
那你跟 root 没有有什么区别呢

664
00:23:27,000 --> 00:23:28,000
说也是

665
00:23:28,000 --> 00:23:29,000
对吧

666
00:23:29,000 --> 00:23:32,000
你说那个 ipad 那个方案可以在

667
00:23:32,000 --> 00:23:34,000
其实正确的用 key 的

668
00:23:34,000 --> 00:23:35,000
就是密钥的认证的方法

669
00:23:35,000 --> 00:23:39,000
是每一个设备有自己的一个私钥公钥

670
00:23:39,000 --> 00:23:39,000
一套

671
00:23:39,000 --> 00:23:41,000
但有时候是拿不到这样一个设备

672
00:23:41,000 --> 00:23:42,000
你怎么办

673
00:23:43,000 --> 00:23:46,000
也是还是给现实给跪了是吧

674
00:23:46,000 --> 00:23:47,000
对

675
00:23:48,000 --> 00:23:52,000
其实我觉得私钥公钥这套方法是挺方便的

676
00:23:52,000 --> 00:23:56,000
因为用私钥解决了密码和认证两个问题

677
00:23:56,000 --> 00:23:59,000
就是身份证证和密码登录两个问题

678
00:23:59,000 --> 00:24:03,000
就是你现在你去一个开一个

679
00:24:04,000 --> 00:24:06,000
一个普通的网络服注册一个账号

680
00:24:06,000 --> 00:24:08,000
他让你输账号还得输密码对吧

681
00:24:08,000 --> 00:24:09,000
多麻烦

682
00:24:09,000 --> 00:24:11,000
你用那个私钥直接给他公钥就好了

683
00:24:11,000 --> 00:24:12,000
而且他永远不知道你的私钥是什么

684
00:24:13,000 --> 00:24:13,000
没错

685
00:24:14,000 --> 00:24:17,000
所以之前有很多尝试

686
00:24:17,000 --> 00:24:20,000
像那个什么最近一次应该是 mozilla 搞那个叫什么

687
00:24:21,000 --> 00:24:24,000
secure id 还是什么之类的东西

688
00:24:24,000 --> 00:24:25,000
还是 persona

689
00:24:26,000 --> 00:24:26,000
我忘了

690
00:24:27,000 --> 00:24:28,000
忘了名字了

691
00:24:28,000 --> 00:24:32,000
反正就是想把这类类的比较方便

692
00:24:33,000 --> 00:24:35,000
和安全的系统去替换掉密码

693
00:24:35,000 --> 00:24:38,000
但是我觉得可能对大多数来讲

694
00:24:38,000 --> 00:24:41,000
理解起私钥公钥加密这么一个过程

695
00:24:41,000 --> 00:24:43,000
或者说任何一套其他非密码的

696
00:24:43,000 --> 00:24:45,000
这么一个替代方案可能还是有点成本的

697
00:24:45,000 --> 00:24:48,000
所以并没有大规模推动起来

698
00:24:49,000 --> 00:24:53,000
不过倒是在一些什么程序员的一些社区里面

699
00:24:53,000 --> 00:24:56,000
其中也不多很少用

700
00:24:56,000 --> 00:24:57,000
我觉得最显著的是那个

701
00:24:58,000 --> 00:25:00,000
你知道有一家专门生成给人生成免费

702
00:25:00,000 --> 00:25:04,000
那个 SSL 证书的网站叫 startssl 吗

703
00:25:04,000 --> 00:25:06,000
好像听过吧

704
00:25:06,000 --> 00:25:09,000
它的那个就是它是要登录账号

705
00:25:09,000 --> 00:25:10,000
才能有一个账号系统的

706
00:25:11,000 --> 00:25:15,000
它那个就是通过客户端的证书来实现

707
00:25:15,000 --> 00:25:17,000
它没有一个账号密码的这么一个概念

708
00:25:19,000 --> 00:25:21,000
这是我用的唯一一家

709
00:25:21,000 --> 00:25:24,000
通过这种客户流量器证书的方式来实现登录

710
00:25:26,000 --> 00:25:28,000
其实我只说我觉得

711
00:25:28,000 --> 00:25:33,000
一定要一个人接受抢口令和验证码这件事情

712
00:25:33,000 --> 00:25:34,000
有时候已经很难了

713
00:25:34,000 --> 00:25:35,000
我不知道

714
00:25:35,000 --> 00:25:38,000
因为咱们接受的人可能平时都比较 taxary

715
00:25:38,000 --> 00:25:43,000
但其实很多用户都不知道验证码到底是来干什么用的

716
00:25:44,000 --> 00:25:46,000
你说哪个验证码

717
00:25:47,000 --> 00:25:49,000
就是那个防止就是图灵测试验证码

718
00:25:50,000 --> 00:25:50,000
人机测试

719
00:25:50,000 --> 00:25:51,000
对

720
00:25:51,000 --> 00:25:52,000
在这种情况下

721
00:25:52,000 --> 00:25:54,000
你要向他解释什么是供药私药

722
00:25:54,000 --> 00:25:55,000
以及他为什么更安全

723
00:25:55,000 --> 00:25:56,000
其实是对吧

724
00:25:56,000 --> 00:25:59,000
所以还是一个教育的问题

725
00:25:59,000 --> 00:25:59,000
对

726
00:25:59,000 --> 00:26:02,000
也许我觉得可能过两三代的人会觉得

727
00:26:02,000 --> 00:26:04,000
供药私药是一个非常天经意义的概念

728
00:26:04,000 --> 00:26:05,000
就好像要什么锁一样

729
00:26:05,000 --> 00:26:07,000
就非常容易理解

730
00:26:07,000 --> 00:26:08,000
你既然这么乐观

731
00:26:08,000 --> 00:26:10,000
过两三代的人就可以了

732
00:26:10,000 --> 00:26:11,000
两三代还不够

733
00:26:11,000 --> 00:26:14,000
不要高估群众的智商

734
00:26:16,000 --> 00:26:18,000
你这句话太精英主义了

735
00:26:18,000 --> 00:26:20,000
要不要抹掉

736
00:26:21,000 --> 00:26:21,000
不要

737
00:26:21,000 --> 00:26:22,000
让他们来批我吧

738
00:26:23,000 --> 00:26:23,000
好吧

739
00:26:24,000 --> 00:26:25,000
好

740
00:26:25,000 --> 00:26:27,000
那么接下来就进入新闻环节

741
00:26:29,000 --> 00:26:32,000
不如接着刚才的话头说

742
00:26:32,000 --> 00:26:36,000
最近这一次比较严重的一个安全事件

743
00:26:37,000 --> 00:26:39,000
这个事件严重到严重的程度

744
00:26:39,000 --> 00:26:42,000
就是关乎你我

745
00:26:42,000 --> 00:26:45,000
怎么说呢

746
00:26:45,000 --> 00:26:47,000
先介绍一下怎么回事

747
00:26:47,000 --> 00:26:47,000
对

748
00:26:48,000 --> 00:26:49,000
有一个安全公司

749
00:26:49,000 --> 00:26:52,000
他这个公司的名字叫做 Hacking Team

750
00:26:53,000 --> 00:26:55,000
什么黑客小分队

751
00:26:55,000 --> 00:26:55,000
对

752
00:26:55,000 --> 00:26:56,000
有家客栈

753
00:26:56,000 --> 00:26:59,000
他的名字叫做有间客栈一样

754
00:27:00,000 --> 00:27:01,000
然后安全公司

755
00:27:01,000 --> 00:27:03,000
这个 Hacking Team 就叫做 Hacking Team

756
00:27:04,000 --> 00:27:06,000
然后 Hacking Team 这家公司被黑了

757
00:27:07,000 --> 00:27:07,000
多谱

758
00:27:08,000 --> 00:27:10,000
他不叫 Hacking Team 吗

759
00:27:10,000 --> 00:27:10,000
叫 Hacked Team

760
00:27:11,000 --> 00:27:12,000
对

761
00:27:12,000 --> 00:27:13,000
然后 Hacking Team is hacked

762
00:27:14,000 --> 00:27:17,000
然后首先这家公司是以什么为生物呢

763
00:27:17,000 --> 00:27:20,000
他们其实就是专门搞破解

764
00:27:21,000 --> 00:27:22,000
但是

765
00:27:23,000 --> 00:27:27,000
他搞破解之后不会告诉那些被破解了的

766
00:27:27,000 --> 00:27:29,000
或者是被黑了的网站或者是公司

767
00:27:29,000 --> 00:27:30,000
说你们的产品有问题

768
00:27:30,000 --> 00:27:33,000
而是把这些漏洞藏起来

769
00:27:34,000 --> 00:27:35,000
捆起来卖的

770
00:27:35,000 --> 00:27:36,000
对

771
00:27:36,000 --> 00:27:37,000
放在货架上

772
00:27:37,000 --> 00:27:39,000
然后包起来卖给这些

773
00:27:39,000 --> 00:27:41,000
比如说 NSA 或者是

774
00:27:42,000 --> 00:27:43,000
也是中国人

775
00:27:43,000 --> 00:27:44,000
也有他们的客户

776
00:27:44,000 --> 00:27:46,000
或者是一些商业间谍

777
00:27:46,000 --> 00:27:47,000
会说

778
00:27:48,000 --> 00:27:51,000
世界各国政府和这种大机构

779
00:27:51,000 --> 00:27:52,000
对

780
00:27:53,000 --> 00:27:55,000
他们不是直接卖这些破解

781
00:27:55,000 --> 00:27:57,000
他是卖打包的服务好像是

782
00:27:57,000 --> 00:27:58,000
对

783
00:27:58,000 --> 00:28:01,000
他部分漏洞是会卖出去

784
00:28:01,000 --> 00:28:03,000
如果你只买服务的话

785
00:28:03,000 --> 00:28:05,000
你会需要你付的钱少一点

786
00:28:05,000 --> 00:28:06,000
但是如果你要把整个

787
00:28:06,000 --> 00:28:09,000
总是知识产权加以后买药花

788
00:28:09,000 --> 00:28:09,000
对

789
00:28:09,000 --> 00:28:11,000
那是要花很大很大一笔钱

790
00:28:12,000 --> 00:28:13,000
然后他们

791
00:28:14,000 --> 00:28:15,000
靠这个赚钱

792
00:28:15,000 --> 00:28:18,000
攒了 400 GB 的数据

793
00:28:18,000 --> 00:28:20,000
当然后来有消息说

794
00:28:20,000 --> 00:28:21,000
这个 400 GB 里面

795
00:28:21,000 --> 00:28:22,000
很多都是 E-mail

796
00:28:22,000 --> 00:28:23,000
就没什么用

797
00:28:23,000 --> 00:28:25,000
没有 E-mail 很有用的

798
00:28:26,000 --> 00:28:27,000
好吧

799
00:28:27,000 --> 00:28:29,000
就是各种机密都在 E-mail 里面暴露

800
00:28:29,000 --> 00:28:31,000
在数据方面

801
00:28:31,000 --> 00:28:34,000
在 400 GB 里面有很多只是数据

802
00:28:34,000 --> 00:28:36,000
而真正和方法相关的部分

803
00:28:36,000 --> 00:28:38,000
可能只有几百兆

804
00:28:38,000 --> 00:28:39,000
但是无论如何这里面

805
00:28:39,000 --> 00:28:41,000
全都是非常机密的信息

806
00:28:42,000 --> 00:28:45,000
然后这一些数据全都被黑了

807
00:28:45,000 --> 00:28:46,000
然后被放在了网上

808
00:28:46,000 --> 00:28:49,000
就现在你我他都可以去搞下来

809
00:28:51,000 --> 00:28:53,000
所以你下载了吗

810
00:28:53,000 --> 00:28:54,000
没有

811
00:28:55,000 --> 00:28:55,000
何必呢

812
00:28:55,000 --> 00:28:58,000
400 GB 我硬盘都装不下了

813
00:28:58,000 --> 00:29:00,000
400 GB 现在随便一个小硬盘都能可以

814
00:29:01,000 --> 00:29:03,000
除非你全部是 SSD

815
00:29:03,000 --> 00:29:05,000
我的 SSD 是装不下

816
00:29:05,000 --> 00:29:06,000
我的 SSD 就 512

817
00:29:06,000 --> 00:29:08,000
然后还装了一堆邮寄

818
00:29:08,000 --> 00:29:08,000
所以

819
00:29:08,000 --> 00:29:09,000
买个那个什么

820
00:29:09,000 --> 00:29:11,000
那个外置硬盘

821
00:29:11,000 --> 00:29:12,000
有啊

822
00:29:12,000 --> 00:29:12,000
但

823
00:29:12,000 --> 00:29:14,000
何必装都没用的东西是不是

824
00:29:15,000 --> 00:29:17,000
装很多觉得自己会看

825
00:29:17,000 --> 00:29:18,000
但其实根本不会看的东西

826
00:29:20,000 --> 00:29:20,000
不要想歪了

827
00:29:20,000 --> 00:29:21,000
我是说电子树

828
00:29:27,000 --> 00:29:30,000
然后在所有这些已经被破解

829
00:29:30,000 --> 00:29:32,000
被爆出来的工具里面

830
00:29:32,000 --> 00:29:34,000
有一个比较严重的漏洞

831
00:29:34,000 --> 00:29:35,000
是在 Flash 上面

832
00:29:35,000 --> 00:29:38,000
就是臭名昭著的 Flash

833
00:29:38,000 --> 00:29:39,000
竟然只有一个

834
00:29:39,000 --> 00:29:40,000
我也很吃惊

835
00:29:40,000 --> 00:29:42,000
或者说目前被发现的只有一个

836
00:29:42,000 --> 00:29:43,000
是一个

837
00:29:43,000 --> 00:29:44,000
非常严重的 Flash

838
00:29:44,000 --> 00:29:45,000
Zero Day

839
00:29:45,000 --> 00:29:46,000
然后它

840
00:29:46,000 --> 00:29:47,000
最大的问题是

841
00:29:47,000 --> 00:29:48,000
它可以让任何网站

842
00:29:48,000 --> 00:29:49,000
这个网站上没有 Flash

843
00:29:51,000 --> 00:29:51,000
的话

844
00:29:51,000 --> 00:29:53,000
可以让你在

845
00:29:53,000 --> 00:29:54,000
访问这个网站

846
00:29:54,000 --> 00:29:56,000
并且运行这个 Flash 的时候

847
00:29:56,000 --> 00:29:58,000
在你的机器上

848
00:29:58,000 --> 00:29:59,000
以管理员权限

849
00:29:59,000 --> 00:30:01,000
执行任何他想要执行的代码

850
00:30:02,000 --> 00:30:03,000
是一件

851
00:30:04,000 --> 00:30:05,000
你可能听起来没有什么

852
00:30:05,000 --> 00:30:06,000
但

853
00:30:06,000 --> 00:30:08,000
你硬款上所有的

854
00:30:09,000 --> 00:30:10,000
短信

855
00:30:10,000 --> 00:30:11,000
邮件

856
00:30:11,000 --> 00:30:13,000
验照

857
00:30:13,000 --> 00:30:14,000
总之你就裸分了

858
00:30:14,000 --> 00:30:15,000
对

859
00:30:15,000 --> 00:30:16,000
全都跟

860
00:30:16,000 --> 00:30:16,000
把

861
00:30:16,000 --> 00:30:18,000
就全都跟那个

862
00:30:19,000 --> 00:30:20,000
就像陈奎熙

863
00:30:21,000 --> 00:30:22,000
无辜的把他的电脑

864
00:30:22,000 --> 00:30:24,000
交给修理电脑的人一样

865
00:30:24,000 --> 00:30:26,000
暴露在这个网站下面

866
00:30:28,000 --> 00:30:29,000
然后当然紧急的

867
00:30:29,000 --> 00:30:30,000
紧急的

868
00:30:30,000 --> 00:30:32,000
Patch 已经出来了

869
00:30:32,000 --> 00:30:33,000
但是

870
00:30:33,000 --> 00:30:35,000
我相信很多人还是没有装

871
00:30:35,000 --> 00:30:36,000
所以如果你听到这里的话

872
00:30:36,000 --> 00:30:37,000
最好赶紧去装一下

873
00:30:38,000 --> 00:30:40,000
真的是为了自己好

874
00:30:44,000 --> 00:30:46,000
所以这件事情怎么说

875
00:30:46,000 --> 00:30:47,000
就是说

876
00:30:48,000 --> 00:30:49,000
之前大家都知道

877
00:30:49,000 --> 00:30:50,000
说这些安全漏洞

878
00:30:50,000 --> 00:30:52,000
是可以私下买卖交易

879
00:30:52,000 --> 00:30:54,000
然后可以用来去

880
00:30:54,000 --> 00:30:55,000
黑进别人电脑

881
00:30:55,000 --> 00:30:56,000
当然

882
00:30:56,000 --> 00:30:57,000
可能大家都抱着一个

883
00:30:57,000 --> 00:30:58,000
缴信心的觉得

884
00:30:58,000 --> 00:30:59,000
没事

885
00:30:59,000 --> 00:31:00,000
谁来搞我

886
00:31:00,000 --> 00:31:01,000
我又不是什么重要人物

887
00:31:01,000 --> 00:31:02,000
是吧

888
00:31:02,000 --> 00:31:02,000
对

889
00:31:02,000 --> 00:31:04,000
但我觉得这次暴露

890
00:31:05,000 --> 00:31:06,000
让我吃惊的是

891
00:31:06,000 --> 00:31:08,000
原来可以有这么

892
00:31:09,000 --> 00:31:11,000
这么多这么惊人的

893
00:31:13,000 --> 00:31:14,000
海量的

894
00:31:14,000 --> 00:31:16,000
数据可以供人购买

895
00:31:16,000 --> 00:31:17,000
我以前总觉得

896
00:31:18,000 --> 00:31:18,000
对吧

897
00:31:18,000 --> 00:31:20,000
所以大家都以前觉得

898
00:31:20,000 --> 00:31:21,000
只看那个冰山一角是吧

899
00:31:21,000 --> 00:31:22,000
现在看到

900
00:31:22,000 --> 00:31:23,000
看到冰山的半截

901
00:31:24,000 --> 00:31:25,000
其实上面还有

902
00:31:25,000 --> 00:31:26,000
还有更庞大的生态链

903
00:31:26,000 --> 00:31:27,000
我们是看不到的

904
00:31:27,000 --> 00:31:29,000
不小心扔了一个深水渣袋

905
00:31:29,000 --> 00:31:31,000
然后居然浮上来这么多

906
00:31:31,000 --> 00:31:32,000
特色的冰

907
00:31:34,000 --> 00:31:37,000
但是有什么问题呢

908
00:31:37,000 --> 00:31:38,000
就是

909
00:31:39,000 --> 00:31:41,000
这些还是有公开用的

910
00:31:41,000 --> 00:31:44,000
就在他做成商业化的产品

911
00:31:45,000 --> 00:31:47,000
之前已经有很多人受害了

912
00:31:47,000 --> 00:31:47,000
其实你不知道而已

913
00:31:48,000 --> 00:31:48,000
我们也有

914
00:31:48,000 --> 00:31:50,000
我可能这个时候

915
00:31:50,000 --> 00:31:51,000
我们在录音对吧

916
00:31:51,000 --> 00:31:52,000
说不出是谁在监控我们

917
00:31:52,000 --> 00:31:54,000
也很难讲

918
00:31:54,000 --> 00:31:54,000
对

919
00:31:54,000 --> 00:31:56,000
在报出来的数据里面

920
00:31:56,000 --> 00:31:58,000
报出来的资料里面有

921
00:31:58,000 --> 00:32:00,000
据称铁人

922
00:32:00,000 --> 00:32:01,000
有在所有的

923
00:32:01,000 --> 00:32:03,000
几乎所有的文章客户端上

924
00:32:03,000 --> 00:32:04,000
安装远程桌面的方法

925
00:32:05,000 --> 00:32:06,000
包括 Windows Phone

926
00:32:07,000 --> 00:32:08,000
你在用手机

927
00:32:08,000 --> 00:32:10,000
你手机上显示什么

928
00:32:10,000 --> 00:32:12,000
可能已经有人可以去看了

929
00:32:12,000 --> 00:32:14,000
只不过他从来没有看过而已

930
00:32:15,000 --> 00:32:16,000
还没让他去看是吧

931
00:32:16,000 --> 00:32:16,000
对

932
00:32:16,000 --> 00:32:18,000
前一阵子

933
00:32:19,000 --> 00:32:20,000
VikiLinks 报出来

934
00:32:20,000 --> 00:32:22,000
从施洛德到梅克尔

935
00:32:22,000 --> 00:32:23,000
每一任德国总理

936
00:32:23,000 --> 00:32:25,000
全都被 NNC 窃听了

937
00:32:25,000 --> 00:32:27,000
政府要人肯定是吵不掉的

938
00:32:27,000 --> 00:32:29,000
这点什么都不由想

939
00:32:29,000 --> 00:32:31,000
只是说我们现在关注

940
00:32:31,000 --> 00:32:33,000
我们这种什么小老百姓对吧

941
00:32:33,000 --> 00:32:36,000
对然后其实里面可能也有一部分的

942
00:32:36,000 --> 00:32:39,000
手段就来自于这次被报出来的

943
00:32:39,000 --> 00:32:41,000
Hacking Team 所所所开发的技术

944
00:32:41,000 --> 00:32:43,000
对这都是综合性的工程

945
00:32:43,000 --> 00:32:44,000
就是他就是

946
00:32:44,000 --> 00:32:46,000
可能 Hacking Team 他掌握了

947
00:32:46,000 --> 00:32:47,000
一部分的这么一些漏洞

948
00:32:47,000 --> 00:32:48,000
对吧

949
00:32:48,000 --> 00:32:49,000
还有一些其他的

950
00:32:49,000 --> 00:32:51,000
更什么资深或藏的更好的

951
00:32:52,000 --> 00:32:55,000
这种这种组织或者个人

952
00:32:55,000 --> 00:32:56,000
比如说 NNC 对吧

953
00:32:56,000 --> 00:32:58,000
他们自己有一套手上的

954
00:32:58,000 --> 00:32:59,000
所有的什么核武器

955
00:32:59,000 --> 00:33:01,000
甚至是这种东西

956
00:33:01,000 --> 00:33:03,000
然后这次这些东西报出来的危害

957
00:33:03,000 --> 00:33:04,000
在哪里呢

958
00:33:04,000 --> 00:33:06,000
就好像怎么说呢

959
00:33:06,000 --> 00:33:08,000
川友也能告诉你说

960
00:33:08,000 --> 00:33:10,000
就大家过去都不知道

961
00:33:10,000 --> 00:33:11,000
这个原子弹怎么造对吧

962
00:33:11,000 --> 00:33:12,000
嗯

963
00:33:12,000 --> 00:33:12,000
然后现在他哎

964
00:33:12,000 --> 00:33:14,000
我告诉你原子弹是这么这么这么造

965
00:33:15,000 --> 00:33:16,000
而且造这个原子弹

966
00:33:16,000 --> 00:33:17,000
不怎么麻烦

967
00:33:17,000 --> 00:33:19,000
不怎么费钱行吗

968
00:33:19,000 --> 00:33:21,000
你只有有了图纸就可以就可以上了

969
00:33:21,000 --> 00:33:23,000
不像说你真的造一个原子弹

970
00:33:23,000 --> 00:33:23,000
你有了图纸

971
00:33:23,000 --> 00:33:25,000
你可能不一定有那个什么离心机

972
00:33:25,000 --> 00:33:27,000
你可能还还提炼不出来

973
00:33:27,000 --> 00:33:29,000
那么高纯度的什么放置性物质对吧

974
00:33:30,000 --> 00:33:30,000
嗯

975
00:33:30,000 --> 00:33:32,000
像这种软件的原子弹

976
00:33:32,000 --> 00:33:34,000
那核武器拿了就可以用了

977
00:33:34,000 --> 00:33:35,000
没错

978
00:33:35,000 --> 00:33:36,000
所以

979
00:33:37,000 --> 00:33:39,000
反正就是大家就追 info 这段时间

980
00:33:39,000 --> 00:33:41,000
就只好自求多福了

981
00:33:41,000 --> 00:33:42,000
因为爆出来之后

982
00:33:42,000 --> 00:33:44,000
公开了这些东西之后

983
00:33:45,000 --> 00:33:45,000
嗯

984
00:33:46,000 --> 00:33:47,000
好人坏人都会用它的

985
00:33:47,000 --> 00:33:48,000
然后你也不知道

986
00:33:48,000 --> 00:33:49,000
谁会对你有利

987
00:33:49,000 --> 00:33:50,000
谁会对你不利对不对

988
00:33:51,000 --> 00:33:51,000
没错

989
00:33:51,000 --> 00:33:52,000
其实我觉得这次

990
00:33:53,000 --> 00:33:54,000
出来的最

991
00:33:55,000 --> 00:33:56,000
我最关心的一件问题就是

992
00:33:57,000 --> 00:33:58,000
比如说我用苹果这个系统对吧

993
00:33:58,000 --> 00:33:59,000
我就关心

994
00:33:59,000 --> 00:34:02,000
Apple 它会不会专门派一个什么

995
00:34:02,000 --> 00:34:03,000
专门搞一个小组的人

996
00:34:04,000 --> 00:34:06,000
去研究在那边爆出来这些公开的漏洞

997
00:34:06,000 --> 00:34:08,000
马上把它跟他相关的先修好啊

998
00:34:09,000 --> 00:34:11,000
这也是一个 lipple face

999
00:34:11,000 --> 00:34:12,000
永远不知道

1000
00:34:12,000 --> 00:34:12,000
不

1001
00:34:12,000 --> 00:34:14,000
就是我觉得作为一家

1002
00:34:14,000 --> 00:34:16,000
正常的商业不是

1003
00:34:16,000 --> 00:34:19,000
他应该做的就是把这个事情

1004
00:34:19,000 --> 00:34:21,000
作为他的一个

1005
00:34:21,000 --> 00:34:21,000
叫什么

1006
00:34:21,000 --> 00:34:23,000
那个核心药物吧

1007
00:34:23,000 --> 00:34:24,000
提倡马上去

1008
00:34:24,000 --> 00:34:25,000
你意思是他们会重视起来

1009
00:34:25,000 --> 00:34:26,000
那肯定会对对

1010
00:34:27,000 --> 00:34:28,000
但不确定啊

1011
00:34:28,000 --> 00:34:28,000
你现在他不知道

1012
00:34:28,000 --> 00:34:29,000
他没有他没有知深啊

1013
00:34:29,000 --> 00:34:30,000
对吧

1014
00:34:30,000 --> 00:34:31,000
这是我的 lipple face

1015
00:34:31,000 --> 00:34:31,000
对

1016
00:34:31,000 --> 00:34:33,000
我是 I hope

1017
00:34:33,000 --> 00:34:34,000
no do that

1018
00:34:34,000 --> 00:34:35,000
但是

1019
00:34:35,000 --> 00:34:37,000
但是不一定嘛

1020
00:34:37,000 --> 00:34:38,000
所以就看

1021
00:34:38,000 --> 00:34:39,000
说最近这个

1022
00:34:39,000 --> 00:34:40,000
你而且他们修那个

1023
00:34:40,000 --> 00:34:42,000
就他们去分析一个这个漏洞

1024
00:34:42,000 --> 00:34:45,000
然后去修 WD 还要测试

1025
00:34:45,000 --> 00:34:46,000
再放给大众

1026
00:34:46,000 --> 00:34:47,000
中间还要这么一长

1027
00:34:47,000 --> 00:34:48,000
至少可能有这么

1028
00:34:48,000 --> 00:34:50,000
一两周或者一两个月的那种过程吧

1029
00:34:50,000 --> 00:34:50,000
对吧

1030
00:34:51,000 --> 00:34:52,000
所以在这段时间内

1031
00:34:52,000 --> 00:34:53,000
大家还是都处于在

1032
00:34:54,000 --> 00:34:55,000
裸奔的状态

1033
00:34:55,000 --> 00:34:56,000
对对

1034
00:34:56,000 --> 00:34:56,000
所以

1035
00:34:57,000 --> 00:34:58,000
真的是

1036
00:34:58,000 --> 00:35:00,000
安全是很难很难的

1037
00:35:00,000 --> 00:35:02,000
就从某种意义上来说

1038
00:35:03,000 --> 00:35:03,000
以后的这个

1039
00:35:03,000 --> 00:35:05,000
所谓的真正意义上的安全

1040
00:35:05,000 --> 00:35:06,000
就只能是少部分

1041
00:35:07,000 --> 00:35:07,000
什么

1042
00:35:07,000 --> 00:35:09,000
特权阶级或者特别有钱人

1043
00:35:09,000 --> 00:35:10,000
能够享受的服务了

1044
00:35:11,000 --> 00:35:13,000
因为你看有这么多人花钱来搞你

1045
00:35:13,000 --> 00:35:13,000
对吧

1046
00:35:13,000 --> 00:35:14,000
那怎么办

1047
00:35:14,000 --> 00:35:15,000
你怎么花钱

1048
00:35:15,000 --> 00:35:15,000
你得有钱

1049
00:35:15,000 --> 00:35:17,000
顾得起私人兵才

1050
00:35:17,000 --> 00:35:18,000
私人雇佣军才可以

1051
00:35:19,000 --> 00:35:19,000
对对对

1052
00:35:19,000 --> 00:35:20,000
不是上次那个谁

1053
00:35:21,000 --> 00:35:22,000
是希拉里克伦顿

1054
00:35:22,000 --> 00:35:24,000
他不是在军衔美国总统吗

1055
00:35:24,000 --> 00:35:24,000
嗯

1056
00:35:25,000 --> 00:35:26,000
然后他后来就有

1057
00:35:26,000 --> 00:35:27,000
就很多报道去去去

1058
00:35:27,000 --> 00:35:29,000
把他的那过去吗

1059
00:35:29,000 --> 00:35:30,000
说他在当那个

1060
00:35:30,000 --> 00:35:32,000
哎他当国务卿还是什么来的

1061
00:35:33,000 --> 00:35:34,000
反正是 secretary state

1062
00:35:34,000 --> 00:35:35,000
他应该是国务卿吧

1063
00:35:35,000 --> 00:35:36,000
国务卿对

1064
00:35:36,000 --> 00:35:37,000
对

1065
00:35:37,000 --> 00:35:38,000
然后期间

1066
00:35:39,000 --> 00:35:41,000
他竟然在自己家里

1067
00:35:41,000 --> 00:35:43,000
地下室搞了一个

1068
00:35:43,000 --> 00:35:45,000
mail server 邮件服务器

1069
00:35:45,000 --> 00:35:46,000
去跑他自己的私人邮件

1070
00:35:47,000 --> 00:35:49,000
然后他的目的也比较简单

1071
00:35:49,000 --> 00:35:49,000
就是逼看

1072
00:35:49,000 --> 00:35:51,000
因为如果他用那个政府

1073
00:35:51,000 --> 00:35:52,000
就是白宫的邮件

1074
00:35:52,000 --> 00:35:53,000
服务器的话

1075
00:35:53,000 --> 00:35:54,000
哦进出的邮件服务器

1076
00:35:54,000 --> 00:35:55,000
不是

1077
00:35:55,000 --> 00:35:56,000
那个被审查是肯定的

1078
00:35:56,000 --> 00:35:57,000
像会被 archive

1079
00:35:57,000 --> 00:35:58,000
会被存档

1080
00:35:58,000 --> 00:35:59,000
然后以后可能会被翻出来

1081
00:35:59,000 --> 00:36:01,000
做出一些对他不利的东西吧

1082
00:36:01,000 --> 00:36:04,000
所以他就搞了一个自己的私服

1083
00:36:04,000 --> 00:36:05,000
然后自己的一些

1084
00:36:05,000 --> 00:36:06,000
在上面套传信息

1085
00:36:06,000 --> 00:36:07,000
哈哈哈哈

1086
00:36:07,000 --> 00:36:09,000
自己在邮件上面玩

1087
00:36:09,000 --> 00:36:10,000
然后一些东西

1088
00:36:10,000 --> 00:36:11,000
然后后来就说

1089
00:36:11,000 --> 00:36:12,000
卧槽那还得了

1090
00:36:12,000 --> 00:36:12,000
你想

1091
00:36:13,000 --> 00:36:14,000
白宫的那些邮件服务器

1092
00:36:14,000 --> 00:36:15,000
得怎么 NSA

1093
00:36:15,000 --> 00:36:17,000
得专门派一小队人在那里

1094
00:36:17,000 --> 00:36:18,000
帮他盯着吗

1095
00:36:18,000 --> 00:36:19,000
好歹还好一点

1096
00:36:20,000 --> 00:36:22,000
他放自己家里谁给他盯着

1097
00:36:23,000 --> 00:36:23,000
嗯

1098
00:36:23,000 --> 00:36:25,000
啊所以我还是蛮震惊的

1099
00:36:25,000 --> 00:36:26,000
然后竟然还有这种玩法

1100
00:36:28,000 --> 00:36:28,000
嗯

1101
00:36:28,000 --> 00:36:29,000
不过还好

1102
00:36:29,000 --> 00:36:30,000
一般通过邮件交流的

1103
00:36:30,000 --> 00:36:31,000
也不是什么

1104
00:36:31,000 --> 00:36:34,000
特别要紧的国家机密

1105
00:36:34,000 --> 00:36:35,000
那种会用专门专线吗

1106
00:36:35,000 --> 00:36:36,000
所谓的

1107
00:36:36,000 --> 00:36:37,000
还还凑合

1108
00:36:37,000 --> 00:36:38,000
但是

1109
00:36:38,000 --> 00:36:40,000
这种这种消息还是挺

1110
00:36:40,000 --> 00:36:41,000
挺不容易的

1111
00:36:41,000 --> 00:36:42,000
这就回到了那个什么

1112
00:36:43,000 --> 00:36:44,000
刚才我们开场

1113
00:36:44,000 --> 00:36:46,000
我提到那个你到底相信谁是吧

1114
00:36:46,000 --> 00:36:46,000
对

1115
00:36:46,000 --> 00:36:49,000
其实正确答案是 trust no one

1116
00:36:49,000 --> 00:36:49,000
哈哈

1117
00:36:50,000 --> 00:36:51,000
但是做不到嘛

1118
00:36:52,000 --> 00:36:55,000
这是 X 档里面那个

1119
00:36:55,000 --> 00:36:56,000
主角叫什么

1120
00:36:56,000 --> 00:36:56,000
Ted Fox

1121
00:36:57,000 --> 00:36:57,000
Fox Ted

1122
00:36:58,000 --> 00:36:58,000
那

1123
00:36:58,000 --> 00:36:59,000
啊

1124
00:36:59,000 --> 00:37:00,000
他叫什么

1125
00:37:00,000 --> 00:37:01,000
Murder

1126
00:37:02,000 --> 00:37:05,000
Murder 他的开机密码就是 Trust no one

1127
00:37:05,000 --> 00:37:06,000
哈哈

1128
00:37:06,000 --> 00:37:07,000
你现在知道了啊

1129
00:37:08,000 --> 00:37:11,000
就是你正确的方法是 Trust no one

1130
00:37:11,000 --> 00:37:12,000
但是其实做不到

1131
00:37:12,000 --> 00:37:13,000
我相信这个信息上

1132
00:37:13,000 --> 00:37:17,000
99.9999999999%的人都做不到

1133
00:37:17,000 --> 00:37:19,000
因为你要 Trust no one 的话

1134
00:37:19,000 --> 00:37:20,000
就像刚才我说的

1135
00:37:20,000 --> 00:37:22,000
从硬件底层开始

1136
00:37:22,000 --> 00:37:25,000
每一个步骤都要经过你自己的验证

1137
00:37:25,000 --> 00:37:25,000
对吧

1138
00:37:26,000 --> 00:37:26,000
对

1139
00:37:26,000 --> 00:37:28,000
其实是不现实的

1140
00:37:28,000 --> 00:37:30,000
所以只能选择

1141
00:37:30,000 --> 00:37:31,000
相信一帮人了

1142
00:37:31,000 --> 00:37:33,000
然后至于说

1143
00:37:33,000 --> 00:37:36,000
你想选择相信他之后会发生什么

1144
00:37:37,000 --> 00:37:38,000
那就只能

1145
00:37:38,000 --> 00:37:39,000
天知道了

1146
00:37:40,000 --> 00:37:40,000
对

1147
00:37:40,000 --> 00:37:44,000
当然我觉得也不用特别过分的去怀疑

1148
00:37:44,000 --> 00:37:45,000
嗯

1149
00:37:45,000 --> 00:37:46,000
怀疑

1150
00:37:47,000 --> 00:37:47,000
怀疑这些人

1151
00:37:47,000 --> 00:37:49,000
或者怀疑一平公司

1152
00:37:49,000 --> 00:37:50,000
或者说怀疑我太后是哪个人

1153
00:37:50,000 --> 00:37:51,000
因为你

1154
00:37:51,000 --> 00:37:53,000
你活在现在社会里面

1155
00:37:53,000 --> 00:37:54,000
完全不相信任何人

1156
00:37:54,000 --> 00:37:57,000
其实只是一个美好的愿景和假象

1157
00:37:57,000 --> 00:37:58,000
你是做不到

1158
00:37:58,000 --> 00:37:59,000
我觉得

1159
00:38:00,000 --> 00:38:01,000
我觉得这是这样子的

1160
00:38:01,000 --> 00:38:02,000
就是

1161
00:38:03,000 --> 00:38:06,000
现在这些系统已经太复杂了

1162
00:38:07,000 --> 00:38:09,000
你没有可能从一个

1163
00:38:10,000 --> 00:38:12,000
比较高的可行度的情况下

1164
00:38:12,000 --> 00:38:14,000
确保这个体系不出任何问题

1165
00:38:14,000 --> 00:38:15,000
这就是不现实的

1166
00:38:15,000 --> 00:38:16,000
就好像你说指望

1167
00:38:16,000 --> 00:38:17,000
我要这个软件没有 bug

1168
00:38:19,000 --> 00:38:20,000
不太现实

1169
00:38:22,000 --> 00:38:23,000
这个时候怎么办呢

1170
00:38:23,000 --> 00:38:24,000
你只能说

1171
00:38:24,000 --> 00:38:25,000
就觉得相信了

1172
00:38:26,000 --> 00:38:26,000
对

1173
00:38:26,000 --> 00:38:28,000
我觉得复杂度固然是一方面

1174
00:38:28,000 --> 00:38:29,000
另一方面是

1175
00:38:29,000 --> 00:38:31,000
你在生活中已经

1176
00:38:31,000 --> 00:38:33,000
你在现在社会里面已经选择相信很多人了

1177
00:38:33,000 --> 00:38:34,000
对吧

1178
00:38:34,000 --> 00:38:36,000
或者说无条件的去信很多人

1179
00:38:36,000 --> 00:38:37,000
甚至很多人你根本就不认识

1180
00:38:37,000 --> 00:38:38,000
根本就不知道他叫什么

1181
00:38:38,000 --> 00:38:38,000
比如说

1182
00:38:39,000 --> 00:38:40,000
你上公车

1183
00:38:40,000 --> 00:38:41,000
你搭上飞机的时候

1184
00:38:41,000 --> 00:38:44,000
你就把生命交给了机长手里

1185
00:38:44,000 --> 00:38:44,000
不是吗

1186
00:38:44,000 --> 00:38:47,000
然后你在银行存钱的时候

1187
00:38:47,000 --> 00:38:47,000
不光是机长

1188
00:38:47,000 --> 00:38:49,000
还有什么各种航空公司

1189
00:38:49,000 --> 00:38:50,000
对地勤人员

1190
00:38:50,000 --> 00:38:51,000
飞机制造舱

1191
00:38:51,000 --> 00:38:53,000
然后雷达天气

1192
00:38:53,000 --> 00:38:55,000
还有什么上帝

1193
00:38:55,000 --> 00:38:57,000
不会砸个鸟过来撞死你

1194
00:38:57,000 --> 00:38:57,000
是不是

1195
00:38:57,000 --> 00:38:58,000
对

1196
00:38:58,000 --> 00:38:58,000
这之类的

1197
00:38:58,000 --> 00:38:59,000
对

1198
00:38:59,000 --> 00:39:00,000
所以活着就要

1199
00:39:00,000 --> 00:39:03,000
有时候就是被迫要盲目相信一些人

1200
00:39:03,000 --> 00:39:05,000
Life is risky

1201
00:39:05,000 --> 00:39:05,000
Yeah

1202
00:39:09,000 --> 00:39:10,000
为什么忽然觉得好沉重

1203
00:39:10,000 --> 00:39:11,000
没有啊

1204
00:39:11,000 --> 00:39:12,000
就是大家都知道嘛

1205
00:39:12,000 --> 00:39:14,000
就是这个人生就是有风险

1206
00:39:14,000 --> 00:39:15,000
你做家里还指不定

1207
00:39:15,000 --> 00:39:16,000
天下掉个东西什么

1208
00:39:16,000 --> 00:39:17,000
把你房子砸垮了

1209
00:39:17,000 --> 00:39:18,000
顺便把你砸死对吧

1210
00:39:19,000 --> 00:39:20,000
就好像今天

1211
00:39:20,000 --> 00:39:22,000
刚刚我今天中午吃饭的时候

1212
00:39:23,000 --> 00:39:24,000
Apple Watch 忽然震了一下

1213
00:39:24,000 --> 00:39:27,000
然后他就手挖了一看说

1214
00:39:28,000 --> 00:39:30,000
我住的这个地方叫 Franklin

1215
00:39:30,000 --> 00:39:32,000
说 Franklin 地区有一个

1216
00:39:32,000 --> 00:39:32,000
有一个枪

1217
00:39:32,000 --> 00:39:34,000
发生了枪击案

1218
00:39:34,000 --> 00:39:35,000
What

1219
00:39:35,000 --> 00:39:36,000
我说 What

1220
00:39:37,000 --> 00:39:38,000
然后赶紧进去看

1221
00:39:38,000 --> 00:39:39,000
看戏子

1222
00:39:39,000 --> 00:39:40,000
就在离我 50 公里的地方

1223
00:39:41,000 --> 00:39:42,000
有一个

1224
00:39:42,000 --> 00:39:43,000
有一个人

1225
00:39:43,000 --> 00:39:46,000
他开着一辆银色的

1226
00:39:46,000 --> 00:39:47,000
Mercedes 的

1227
00:39:48,000 --> 00:39:49,000
Cabrio

1228
00:39:49,000 --> 00:39:50,000
场萌跑车

1229
00:39:51,000 --> 00:39:52,000
在路边停下

1230
00:39:52,000 --> 00:39:54,000
问路边一个老太太

1231
00:39:54,000 --> 00:39:56,000
82 岁老太太一些事

1232
00:39:56,000 --> 00:39:57,000
问完之后

1233
00:39:57,000 --> 00:39:58,000
老太太往回走的过程中

1234
00:39:58,000 --> 00:40:00,000
他掏出枪来把老太太打死了

1235
00:40:00,000 --> 00:40:01,000
What

1236
00:40:01,000 --> 00:40:02,000
神经病啊这是

1237
00:40:02,000 --> 00:40:03,000
我不知道啊

1238
00:40:03,000 --> 00:40:07,000
然后他开了大概 10 公里左右

1239
00:40:07,000 --> 00:40:10,000
又杀死了一个在路边骑自行车的人

1240
00:40:10,000 --> 00:40:12,000
所以他是什么反社会人格是吧

1241
00:40:12,000 --> 00:40:13,000
我不知道这是今天才发生的事情

1242
00:40:13,000 --> 00:40:15,000
所以我可能一会儿看一下新闻

1243
00:40:15,000 --> 00:40:16,000
才知道具体发生了什么

1244
00:40:16,000 --> 00:40:17,000
但这么说呢

1245
00:40:17,000 --> 00:40:18,000
就是飞来横祸不是吗

1246
00:40:18,000 --> 00:40:20,000
而且离你这么近

1247
00:40:20,000 --> 00:40:21,000
就离我这么近

1248
00:40:21,000 --> 00:40:22,000
50 公里之外

1249
00:40:22,000 --> 00:40:23,000
我只有我每天

1250
00:40:23,000 --> 00:40:24,000
不是每天

1251
00:40:24,000 --> 00:40:25,000
但以前

1252
00:40:25,000 --> 00:40:28,000
狼反于某地和某地之间

1253
00:40:28,000 --> 00:40:28,000
每天会

1254
00:40:28,000 --> 00:40:29,000
好

1255
00:40:29,000 --> 00:40:30,000
为什么总要说每天

1256
00:40:31,000 --> 00:40:32,000
经常会经过这么一个地方

1257
00:40:32,000 --> 00:40:33,000
就是

1258
00:40:33,000 --> 00:40:35,000
看着高速公路上的牌子

1259
00:40:35,000 --> 00:40:35,000
记着这个名字

1260
00:40:35,000 --> 00:40:37,000
然后忽然今天

1261
00:40:37,000 --> 00:40:38,000
那儿发生了一次枪尖

1262
00:40:38,000 --> 00:40:39,000
就是这种感觉

1263
00:40:40,000 --> 00:40:41,000
所以就是你可能什么

1264
00:40:41,000 --> 00:40:43,000
出门被车撞死

1265
00:40:43,000 --> 00:40:44,000
然后遇到个疯子把你给崩了

1266
00:40:45,000 --> 00:40:47,000
然后喝水也可能被淹死

1267
00:40:47,000 --> 00:40:48,000
就是呛死这类的

1268
00:40:50,000 --> 00:40:51,000
反正你知道做任何事情

1269
00:40:51,000 --> 00:40:53,000
就不管你做还是不做任何事情

1270
00:40:53,000 --> 00:40:54,000
你总是会有机会

1271
00:40:54,000 --> 00:40:56,000
遇到这种小概率事件的

1272
00:40:56,000 --> 00:40:57,000
对

1273
00:40:57,000 --> 00:40:59,000
所以其实信息安全方面的风险

1274
00:40:59,000 --> 00:41:01,000
还是必须要承担一点

1275
00:41:01,000 --> 00:41:02,000
对

1276
00:41:02,000 --> 00:41:03,000
没有不是不办

1277
00:41:03,000 --> 00:41:04,000
你这么想一下

1278
00:41:04,000 --> 00:41:05,000
你可能觉得你就安心了

1279
00:41:05,000 --> 00:41:06,000
释然一点

1280
00:41:06,000 --> 00:41:07,000
对

1281
00:41:08,000 --> 00:41:08,000
没错

1282
00:41:09,000 --> 00:41:09,000
OK

1283
00:41:09,000 --> 00:41:11,000
那么过渡到下一条新闻

1284
00:41:12,000 --> 00:41:13,000
这条新闻比较振奋

1285
00:41:14,000 --> 00:41:15,000
就是老文了吧

1286
00:41:15,000 --> 00:41:18,000
已经上两周前的了

1287
00:41:18,000 --> 00:41:19,000
对

1288
00:41:19,000 --> 00:41:19,000
对

1289
00:41:19,000 --> 00:41:21,000
开发了

1290
00:41:22,000 --> 00:41:24,000
满大马算起手 7 年

1291
00:41:24,000 --> 00:41:28,000
但是去年 2 月 26 日才 Public Beta 的

1292
00:41:28,000 --> 00:41:32,000
这个来自于 Github 的 Atom 编辑器

1293
00:41:32,000 --> 00:41:34,000
金什么金铁

1294
00:41:35,000 --> 00:41:37,000
6 月 25 日终于发布了 1.0 版

1295
00:41:38,000 --> 00:41:39,000
这也是个什么

1296
00:41:39,000 --> 00:41:41,000
1.0 就是一个里程碑了

1297
00:41:41,000 --> 00:41:42,000
对

1298
00:41:42,000 --> 00:41:45,000
当然这是 Github 这种比较负责的公司

1299
00:41:46,000 --> 00:41:49,000
会把 1.0 版这么及时的试出来

1300
00:41:49,000 --> 00:41:52,000
你像当初 Google Mail Beta 的多久

1301
00:41:54,000 --> 00:41:55,000
好多好多好多年

1302
00:41:56,000 --> 00:41:56,000
对

1303
00:41:56,000 --> 00:41:57,000
10 年有没有

1304
00:41:58,000 --> 00:41:59,000
差不多吧

1305
00:42:00,000 --> 00:42:01,000
难以相信

1306
00:42:01,000 --> 00:42:01,000
对

1307
00:42:01,000 --> 00:42:03,000
所以 1.0 版有什么特别的

1308
00:42:04,000 --> 00:42:06,000
其实也没有什么特别

1309
00:42:06,000 --> 00:42:06,000
我仔细看了一下

1310
00:42:06,000 --> 00:42:12,000
就是他们从 Public Release

1311
00:42:12,000 --> 00:42:15,000
一直到现在历经了 155 次 Release

1312
00:42:15,000 --> 00:42:17,000
就是过去的这一年多一点

1313
00:42:17,000 --> 00:42:18,000
里面有 155 次 Release

1314
00:42:18,000 --> 00:42:20,000
每一次都有 Change List

1315
00:42:20,000 --> 00:42:25,000
然后现在就是他们整个编辑器的

1316
00:42:25,000 --> 00:42:27,000
核心可以扩展的那部分

1317
00:42:27,000 --> 00:42:30,000
就是 API 那部分已经被正式确认下来了

1318
00:42:30,000 --> 00:42:33,000
这也是他发布 1.0 版的主要原因

1319
00:42:33,000 --> 00:42:35,000
然后其实我想说的是

1320
00:42:35,000 --> 00:42:36,000
就是他有一个视频很有意思

1321
00:42:36,000 --> 00:42:38,000
他用一台

1322
00:42:39,000 --> 00:42:40,000
用那种 60 年的手法

1323
00:42:40,000 --> 00:42:42,000
就是如果你看过一个视频叫做

1324
00:42:43,000 --> 00:42:48,000
Prediction of Home Computers 之类的

1325
00:42:48,000 --> 00:42:49,000
这么一个 60 年代做的

1326
00:42:51,000 --> 00:42:54,000
关于未来夹用电脑展望视频的话

1327
00:42:54,000 --> 00:42:57,000
这个视频跟那个视频是相呼应的那种感觉

1328
00:42:57,000 --> 00:42:59,000
对

1329
00:42:59,000 --> 00:43:01,000
那个 60 年的视频里面说

1330
00:43:01,000 --> 00:43:03,000
已经假想了将来的人们回家

1331
00:43:03,000 --> 00:43:04,000
一回家就会开在脑

1332
00:43:04,000 --> 00:43:08,000
然后可以再多个显示器上处理表格

1333
00:43:08,000 --> 00:43:12,000
然后可以通过一个巨大的电视屏幕一样的东西

1334
00:43:12,000 --> 00:43:13,000
和一个滚轮

1335
00:43:15,000 --> 00:43:16,000
滚球应该说

1336
00:43:17,000 --> 00:43:17,000
之类的

1337
00:43:17,000 --> 00:43:20,000
会以旋钮之类的东西来在线购物

1338
00:43:20,000 --> 00:43:23,000
那个时候已经全都想到了这些

1339
00:43:23,000 --> 00:43:26,000
然后 Atom 1.0 的生产视频

1340
00:43:26,000 --> 00:43:27,000
就是

1341
00:43:27,000 --> 00:43:28,000
拍了的也不算

1342
00:43:28,000 --> 00:43:31,000
就是用那种风格拍了一个

1343
00:43:32,000 --> 00:43:34,000
一家人围绕着这么一个专用的

1344
00:43:34,000 --> 00:43:36,000
Atom 控制台上面写的过程

1345
00:43:37,000 --> 00:43:38,000
还蛮值得一看的

1346
00:43:39,000 --> 00:43:41,000
这个什么程序员的恶趣味

1347
00:43:41,000 --> 00:43:42,000
没错

1348
00:43:43,000 --> 00:43:44,000
然后可以顺便提一下

1349
00:43:44,000 --> 00:43:46,000
就是那个 V-ROM Studio Code

1350
00:43:46,000 --> 00:43:48,000
也发布了 0.500

1351
00:43:49,000 --> 00:43:51,000
其实这几个我一直搞不清楚

1352
00:43:51,000 --> 00:43:54,000
就是 Facebook 之前不是也搞了一个叫

1353
00:43:55,000 --> 00:43:56,000
NUCLEUS 对吧

1354
00:43:58,000 --> 00:44:01,000
NUCLEUS 也是基于 ELECTRON 了吗

1355
00:44:01,000 --> 00:44:02,000
不是吗

1356
00:44:03,000 --> 00:44:04,000
对

1357
00:44:04,000 --> 00:44:07,000
就是基于那个电子

1358
00:44:07,000 --> 00:44:08,000
对

1359
00:44:08,000 --> 00:44:09,000
就是对

1360
00:44:09,000 --> 00:44:10,000
一套东西

1361
00:44:10,000 --> 00:44:13,000
反正就是基于 Web 技术做了三款浏览器了

1362
00:44:13,000 --> 00:44:16,000
Atom 是一个什么算是第一个正统吧

1363
00:44:17,000 --> 00:44:17,000
对

1364
00:44:17,000 --> 00:44:18,000
有 NUCLEUS

1365
00:44:18,000 --> 00:44:21,000
然后有 Virtual Studio Code

1366
00:44:21,000 --> 00:44:21,000
对

1367
00:44:21,000 --> 00:44:23,000
最近也是今年出的

1368
00:44:23,000 --> 00:44:24,000
还有什么 Slack

1369
00:44:25,000 --> 00:44:26,000
嗯

1370
00:44:27,000 --> 00:44:30,000
Slack 是那个什么协同软件吗

1371
00:44:31,000 --> 00:44:32,000
啊

1372
00:44:32,000 --> 00:44:34,000
他也是基于那个和谐的吗

1373
00:44:35,000 --> 00:44:35,000
对

1374
00:44:35,000 --> 00:44:40,000
也是怎么说他自己好像叫自己 Messaging App

1375
00:44:40,000 --> 00:44:42,000
就是一个团队协作软件

1376
00:44:42,000 --> 00:44:44,000
但实际上他也是从那个 ELECTRON 改的

1377
00:44:44,000 --> 00:44:47,000
我记得 Lawrence 还给咱俩发过

1378
00:44:47,000 --> 00:44:48,000
Invitation 箱

1379
00:44:48,000 --> 00:44:50,000
我有装

1380
00:44:50,000 --> 00:44:50,000
我有装

1381
00:44:50,000 --> 00:44:51,000
OK

1382
00:44:51,000 --> 00:44:51,000
我没装

1383
00:44:51,000 --> 00:44:52,000
用了一下

1384
00:44:52,000 --> 00:44:53,000
其实你一看就知道

1385
00:44:54,000 --> 00:44:57,000
这其实是一个 WebView 封装起来的

1386
00:44:57,000 --> 00:44:58,000
壳子

1387
00:44:58,000 --> 00:45:01,000
比过去 WebView 可能做的要稍微原生一点

1388
00:45:01,000 --> 00:45:02,000
但是

1389
00:45:02,000 --> 00:45:05,000
毕竟还是不改它那个本质

1390
00:45:05,000 --> 00:45:05,000
对

1391
00:45:05,000 --> 00:45:07,000
因为当然这些本质是什么呢

1392
00:45:07,000 --> 00:45:08,000
比如说

1393
00:45:08,000 --> 00:45:09,000
我先问一下

1394
00:45:09,000 --> 00:45:12,000
Atom 1.0 能打开一个 20 兆的文件吗

1395
00:45:12,000 --> 00:45:14,000
不知道我还没装

1396
00:45:14,000 --> 00:45:14,000
其实

1397
00:45:15,000 --> 00:45:17,000
似乎还是不行是吧

1398
00:45:17,000 --> 00:45:17,000
OK

1399
00:45:17,000 --> 00:45:21,000
虽然也不太肯定有 20 兆的一个程序的代码

1400
00:45:21,000 --> 00:45:21,000
但是

1401
00:45:22,000 --> 00:45:23,000
嗯

1402
00:45:23,000 --> 00:45:25,000
毕竟还是有这么一个限制的

1403
00:45:25,000 --> 00:45:26,000
嗯

1404
00:45:27,000 --> 00:45:31,000
然后这些东西都有一个问题

1405
00:45:31,000 --> 00:45:32,000
就是比较臃肿

1406
00:45:33,000 --> 00:45:33,000
对

1407
00:45:33,000 --> 00:45:34,000
就比较占资源了

1408
00:45:34,000 --> 00:45:35,000
应该说

1409
00:45:35,000 --> 00:45:35,000
对

1410
00:45:35,000 --> 00:45:39,000
虽然说现在什么硬件资源比较丰富

1411
00:45:39,000 --> 00:45:40,000
但是我总觉得

1412
00:45:41,000 --> 00:45:44,000
就这么浪费好像也不是一个特别好的事

1413
00:45:44,000 --> 00:45:45,000
嗯

1414
00:45:45,000 --> 00:45:48,000
但做一个编辑器竟然要

1415
00:45:48,000 --> 00:45:49,000
无外照

1416
00:45:50,000 --> 00:45:51,000
的那层才能跑起来

1417
00:45:52,000 --> 00:45:53,000
觉得就有点过了

1418
00:45:54,000 --> 00:45:54,000
是

1419
00:45:55,000 --> 00:45:58,000
这就是为什么一些古老的

1420
00:45:59,000 --> 00:46:02,000
用 C 线编辑器可以一直活到今天

1421
00:46:02,000 --> 00:46:04,000
什么 VI 啊

1422
00:46:04,000 --> 00:46:05,000
Emax

1423
00:46:06,000 --> 00:46:06,000
还挺好的

1424
00:46:07,000 --> 00:46:07,000
哎

1425
00:46:07,000 --> 00:46:10,000
所以其实你看好这一类的东西吗

1426
00:46:10,000 --> 00:46:12,000
就是把那种 web 的技术跑在客户端

1427
00:46:12,000 --> 00:46:15,000
跑在那个原生的皮里面

1428
00:46:15,000 --> 00:46:17,000
然后假装自己是原生英英

1429
00:46:18,000 --> 00:46:19,000
嗯

1430
00:46:19,000 --> 00:46:22,000
其实 Laurenz 前上一期节目里面说什么

1431
00:46:22,000 --> 00:46:24,000
web app is for animals 的时候我就想

1432
00:46:25,000 --> 00:46:28,000
把 web app 封装成一个

1433
00:46:28,000 --> 00:46:31,000
原生 app 的这种东西有应该怎么讲

1434
00:46:32,000 --> 00:46:34,000
不这个我觉得跟 web app 可能还

1435
00:46:34,000 --> 00:46:37,000
就我们传统意义认为的 web app 可能还不太一样

1436
00:46:37,000 --> 00:46:40,000
就是传统意义上 web app 可能还是在浏览器里面

1437
00:46:40,000 --> 00:46:40,000
然后

1438
00:46:41,000 --> 00:46:41,000
呃

1439
00:46:41,000 --> 00:46:44,000
他的其实我觉得这个界限主要在哪里

1440
00:46:44,000 --> 00:46:47,000
就是在他的那个在离线状态下的行为

1441
00:46:47,000 --> 00:46:50,000
就起码这些几个应用都是说他的本

1442
00:46:50,000 --> 00:46:51,000
本初是为

1443
00:46:52,000 --> 00:46:55,000
单机或者离线状态自己运行的

1444
00:46:55,000 --> 00:46:55,000
呃

1445
00:46:56,000 --> 00:46:56,000
这种情况设计的

1446
00:46:56,000 --> 00:46:58,000
他不牵涉到说

1447
00:46:58,000 --> 00:47:00,000
很多 web app 他没有做这个

1448
00:47:00,000 --> 00:47:01,000
叫做 app cache

1449
00:47:02,000 --> 00:47:04,000
和这个 offline mode 的情况下

1450
00:47:04,000 --> 00:47:05,000
那完全没法用的那种情况

1451
00:47:05,000 --> 00:47:07,000
就是这个我觉得还是有很大区别

1452
00:47:08,000 --> 00:47:09,000
好吧

1453
00:47:09,000 --> 00:47:12,000
我觉得最大区别还是在于那个 chrome

1454
00:47:12,000 --> 00:47:15,000
就是在于那个外边那个框架什么

1455
00:47:15,000 --> 00:47:16,000
你在用 web app 的时候你会

1456
00:47:16,000 --> 00:47:17,000
有一个明确的

1457
00:47:18,000 --> 00:47:20,000
心理预期说我

1458
00:47:20,000 --> 00:47:22,000
正在浏览器里面使用一个东西

1459
00:47:22,000 --> 00:47:23,000
这个东西不是 native 的

1460
00:47:23,000 --> 00:47:24,000
不是 native 的

1461
00:47:24,000 --> 00:47:25,000
不是 native 的

1462
00:47:25,000 --> 00:47:28,000
因为我觉得至少我会有这样一种

1463
00:47:28,000 --> 00:47:29,000
默默的心理暗示

1464
00:47:29,000 --> 00:47:30,000
但是我觉得这也就是为什么

1465
00:47:30,000 --> 00:47:32,000
Google 要把那个

1466
00:47:33,000 --> 00:47:35,000
chrome apps

1467
00:47:35,000 --> 00:47:38,000
单独拎出来放成一个

1468
00:47:39,000 --> 00:47:41,000
独立于浏览器之外的窗口

1469
00:47:41,000 --> 00:47:44,000
放在一个独立于浏览器之外的窗口里面

1470
00:47:44,000 --> 00:47:45,000
让用户来用

1471
00:47:46,000 --> 00:47:48,000
我觉得他就是试图打破这种 chrome

1472
00:47:48,000 --> 00:47:49,000
但是

1473
00:47:50,000 --> 00:47:51,000
先拖枷锁吗

1474
00:47:51,000 --> 00:47:53,000
对效果还是不适合

1475
00:47:53,000 --> 00:47:56,000
所以你看到像那个 Atom 这种

1476
00:47:56,000 --> 00:47:57,000
编辑器的时候你用的时候

1477
00:47:57,000 --> 00:48:00,000
你会觉得它是一个非原生的东西吗

1478
00:48:00,000 --> 00:48:02,000
我觉得这种感觉已经非常淡化

1479
00:48:02,000 --> 00:48:03,000
就

1480
00:48:03,000 --> 00:48:03,000
对

1481
00:48:03,000 --> 00:48:06,000
因为我为了准备这一期的节目

1482
00:48:06,000 --> 00:48:07,000
又打开那个

1483
00:48:07,000 --> 00:48:09,000
创的最新版的 virtual studio code

1484
00:48:09,000 --> 00:48:10,000
然后用一下

1485
00:48:10,000 --> 00:48:11,000
所以感觉还是

1486
00:48:12,000 --> 00:48:13,000
就是你感觉不到它

1487
00:48:13,000 --> 00:48:15,000
除了在那个 UI 风格上

1488
00:48:16,000 --> 00:48:18,000
跟你的系统格格不入之外

1489
00:48:19,000 --> 00:48:21,000
你感觉不到它是一个网页应用

1490
00:48:21,000 --> 00:48:22,000
对不对

1491
00:48:23,000 --> 00:48:23,000
也

1492
00:48:24,000 --> 00:48:26,000
格格不入也没有吧

1493
00:48:26,000 --> 00:48:26,000
我必须说

1494
00:48:27,000 --> 00:48:28,000
它风格很不一样

1495
00:48:31,000 --> 00:48:33,000
或者说我在用 virtual studio 的时候

1496
00:48:33,000 --> 00:48:36,000
心里面就带着这样一个预期

1497
00:48:36,000 --> 00:48:37,000
我就说这是 virtual 做的东西

1498
00:48:37,000 --> 00:48:39,000
它风格本来就不一样

1499
00:48:39,000 --> 00:48:40,000
对

1500
00:48:40,000 --> 00:48:40,000
它不可能一样

1501
00:48:41,000 --> 00:48:41,000
OK

1502
00:48:41,000 --> 00:48:43,000
但当然你说的有道理

1503
00:48:43,000 --> 00:48:48,000
但话说回来风格跟原生的不一样的

1504
00:48:48,000 --> 00:48:49,000
原生 App

1505
00:48:49,000 --> 00:48:50,000
风格跟

1506
00:48:51,000 --> 00:48:53,000
默认的苹果风格不一样的原生 App

1507
00:48:53,000 --> 00:48:54,000
其实也很多

1508
00:48:54,000 --> 00:48:54,000
对嘛

1509
00:48:54,000 --> 00:48:56,000
所以其实说到底就是说

1510
00:48:57,000 --> 00:48:57,000
Web

1511
00:48:58,000 --> 00:48:59,000
叫什么来着

1512
00:48:59,000 --> 00:49:01,000
WebApp

1513
00:49:01,000 --> 00:49:06,000
本身并不代表一个比较糟糕的体验

1514
00:49:06,000 --> 00:49:07,000
是这意思吗

1515
00:49:07,000 --> 00:49:08,000
就是它有的一些技术

1516
00:49:08,000 --> 00:49:09,000
我是这么觉得

1517
00:49:09,000 --> 00:49:12,000
是可以实现出一个比较原生的体验的

1518
00:49:12,000 --> 00:49:13,000
当然说我们资源占用上

1519
00:49:13,000 --> 00:49:14,000
这个事情先不讲

1520
00:49:14,000 --> 00:49:16,000
就是说在交互上

1521
00:49:16,000 --> 00:49:17,000
还有包括给人的感觉上

1522
00:49:17,000 --> 00:49:18,000
是可以做到比较好的

1523
00:49:19,000 --> 00:49:22,000
就之前说 WebApp 不好用

1524
00:49:22,000 --> 00:49:23,000
纯粹是因为他们做得不够好

1525
00:49:24,000 --> 00:49:25,000
OK

1526
00:49:25,000 --> 00:49:30,000
那我们可以暂时把这个浏览器的新闻放在一边

1527
00:49:30,000 --> 00:49:33,000
将来如果 WebRoll Studio code 也出了 1.0 的话

1528
00:49:33,000 --> 00:49:35,000
我们再来后续报

1529
00:49:39,000 --> 00:49:39,000
好吧

1530
00:49:39,000 --> 00:49:41,000
那下一条新闻

1531
00:49:41,000 --> 00:49:42,000
这是你写的吗

1532
00:49:43,000 --> 00:49:43,000
对

1533
00:49:43,000 --> 00:49:46,000
这个事情还挺有意思的

1534
00:49:46,000 --> 00:49:48,000
就是之前我们讲那个

1535
00:49:48,000 --> 00:49:52,000
在阿迪功诺里面经常讲的那个叫 Oculus Rift

1536
00:49:52,000 --> 00:49:55,000
那个 3 D 的虚拟现实眼镜

1537
00:49:56,000 --> 00:49:59,000
它那个开发者叫做 John Carmich

1538
00:49:59,000 --> 00:50:01,000
这个大家都应该比较熟悉了

1539
00:50:02,000 --> 00:50:05,000
他在应该是上周还是前周

1540
00:50:05,000 --> 00:50:06,000
也是差不多

1541
00:50:06,000 --> 00:50:08,000
也是上黑二十几号的时候

1542
00:50:08,000 --> 00:50:12,000
在 Google 讨论组里面发了这么一条信息

1543
00:50:12,000 --> 00:50:15,000
就是他在琢磨着用 Racket

1544
00:50:15,000 --> 00:50:20,000
Racket 是一个 Skym 语言的一个实现

1545
00:50:20,000 --> 00:50:22,000
Skym 是一种 Lisp

1546
00:50:23,000 --> 00:50:24,000
它是 Lisp One

1547
00:50:24,000 --> 00:50:24,000
对

1548
00:50:25,000 --> 00:50:28,000
然后他决定用 Racket 或者 Skym 这个语言

1549
00:50:28,000 --> 00:50:31,000
给 VR 环境里面做一个

1550
00:50:31,000 --> 00:50:32,000
怎么说呢

1551
00:50:32,000 --> 00:50:34,000
叫做教学语言

1552
00:50:34,000 --> 00:50:35,000
可以怎么讲

1553
00:50:35,000 --> 00:50:36,000
教学环境

1554
00:50:36,000 --> 00:50:37,000
也是

1555
00:50:37,000 --> 00:50:39,000
他叫做 Scripting Environment

1556
00:50:39,000 --> 00:50:40,000
就是脚本环境

1557
00:50:40,000 --> 00:50:41,000
啥意思

1558
00:50:41,000 --> 00:50:45,000
就是你可以在通过写 Skym 代码

1559
00:50:45,000 --> 00:50:48,000
在虚拟世界里面构建出一些组件出来

1560
00:50:48,000 --> 00:50:49,000
比如说可以看到什么

1561
00:50:49,000 --> 00:50:51,000
就像大积木一样做一些事情

1562
00:50:52,000 --> 00:50:56,000
然后他发了一篇非常长的文章去讲

1563
00:50:56,000 --> 00:50:59,000
他就为什么会选择 Skym

1564
00:50:59,000 --> 00:51:04,000
还有一些什么其他关于搭建环境的一些事情

1565
00:51:04,000 --> 00:51:05,000
我把连接放到许诺词里面

1566
00:51:06,000 --> 00:51:07,000
但我觉得这个事情大家还挺好

1567
00:51:08,000 --> 00:51:09,000
挺有意思的大家可以去看一下

1568
00:51:09,000 --> 00:51:11,000
具体那种东西我现在不剧透了

1569
00:51:11,000 --> 00:51:12,000
对

1570
00:51:13,000 --> 00:51:15,000
我不知道你怎么想这件事

1571
00:51:16,000 --> 00:51:18,000
其实我脑子里面第一想到的是

1572
00:51:18,000 --> 00:51:22,000
当初我在电视上面用

1573
00:51:23,000 --> 00:51:26,000
Apple II 和 Logo 语言

1574
00:51:26,000 --> 00:51:28,000
操纵海归的时候

1575
00:51:28,000 --> 00:51:29,000
那个场景

1576
00:51:30,000 --> 00:51:32,000
对差不多他想的应该是类似的应用

1577
00:51:32,000 --> 00:51:35,000
只不过是做到 VR 虚拟现实的环境里面去

1578
00:51:36,000 --> 00:51:37,000
对然后我想就是

1579
00:51:37,000 --> 00:51:40,000
因为 Logo 本身也是一个比较有意思的

1580
00:51:40,000 --> 00:51:41,000
functional program language

1581
00:51:41,000 --> 00:51:42,000
然后

1582
00:51:43,000 --> 00:51:47,000
也许将来的孩子们可以带着 VR 眼镜

1583
00:51:47,000 --> 00:51:51,000
然后用一种类似于 Logo 的教学式的

1584
00:51:52,000 --> 00:51:55,000
scripting language 在一个 3 D 的世界里面操纵

1585
00:51:55,000 --> 00:51:57,000
3 D 的海归或者说

1586
00:51:58,000 --> 00:52:00,000
海归 metaphor 这么一个东西

1587
00:52:00,000 --> 00:52:03,000
然后去画一些比如说 3 D 的分形图形

1588
00:52:03,000 --> 00:52:06,000
或者说对话 whatever 什么东西

1589
00:52:07,000 --> 00:52:09,000
感觉很 exciting

1590
00:52:12,000 --> 00:52:17,000
所以你用 Skym 在虚拟环境里面

1591
00:52:17,000 --> 00:52:19,000
画这种物件你觉得会怎么样

1592
00:52:21,000 --> 00:52:22,000
应该蛮酸爽的吧

1593
00:52:24,000 --> 00:52:26,000
你记不记得上次我给你发过一个

1594
00:52:26,000 --> 00:52:27,000
应该有两个连接吧

1595
00:52:27,000 --> 00:52:28,000
是 YouTube 的视频

1596
00:52:28,000 --> 00:52:31,000
就是有人在那个 VR 眼镜里面

1597
00:52:31,000 --> 00:52:33,000
就 VR 那个虚拟世界里面

1598
00:52:33,000 --> 00:52:36,000
实时的通过编辑应该是 JavaScript

1599
00:52:37,000 --> 00:52:38,000
的代码

1600
00:52:38,000 --> 00:52:42,000
来去操纵里面的物件的那些虚拟的物件的

1601
00:52:42,000 --> 00:52:43,000
改变周遭环境

1602
00:52:44,000 --> 00:52:46,000
对对对你还记得那个视频吗

1603
00:52:46,000 --> 00:52:49,000
而且这个应该这个过程还是蛮有意思的

1604
00:52:49,000 --> 00:52:51,000
他那个不太好的一点就是他要

1605
00:52:52,000 --> 00:52:54,000
他要就如果他要改变这块

1606
00:52:54,000 --> 00:52:56,000
他得 reload 那个他就得刷新那个脚本

1607
00:52:56,000 --> 00:52:59,000
然后整个重汇一遍整个环境

1608
00:53:00,000 --> 00:53:01,000
然后我知道用 Skym 的话

1609
00:53:01,000 --> 00:53:03,000
他可以做到一个增量的一个修改

1610
00:53:03,000 --> 00:53:04,000
因为在之前那个

1611
00:53:04,000 --> 00:53:07,000
你知道 Lisp 他当时说的那个最牛逼的功能

1612
00:53:07,000 --> 00:53:10,000
就是可以在他运行中动态修改代码

1613
00:53:10,000 --> 00:53:13,000
然后在部分的执行对吧

1614
00:53:13,000 --> 00:53:15,000
对数据和代码部分这样的

1615
00:53:16,000 --> 00:53:16,000
没错没错

1616
00:53:16,000 --> 00:53:19,000
所以这个还是蛮值得期待的

1617
00:53:20,000 --> 00:53:20,000
嗯

1618
00:53:24,000 --> 00:53:26,000
对其实这里可以顺便说一下

1619
00:53:26,000 --> 00:53:28,000
就是我今天在

1620
00:53:29,000 --> 00:53:30,000
The Verge 还是什么上面

1621
00:53:31,000 --> 00:53:31,000
不对

1622
00:53:31,000 --> 00:53:33,000
啊 Sexnica 上面看到了一个

1623
00:53:34,000 --> 00:53:37,000
微软最新的关于 HoloLens 的视频

1624
00:53:37,000 --> 00:53:38,000
然后里面就

1625
00:53:39,000 --> 00:53:42,000
有那个一个怎么说类似于 DNC 视角的

1626
00:53:43,000 --> 00:53:44,000
告诉你说

1627
00:53:44,000 --> 00:53:48,000
你戴上 HoloLens 之后能看到的这么一个区域

1628
00:53:48,000 --> 00:53:49,000
然后

1629
00:53:50,000 --> 00:53:53,000
对然后我就感受到了 Lawrence 的

1630
00:53:53,000 --> 00:53:55,000
戴了 HoloLens 之后那种失落感

1631
00:53:55,000 --> 00:53:56,000
就

1632
00:53:57,000 --> 00:53:58,000
真的差挺多的

1633
00:53:58,000 --> 00:54:00,000
就是之前我不知道你

1634
00:54:00,000 --> 00:54:01,000
可是要窄的吗

1635
00:54:01,000 --> 00:54:04,000
对我脑补的这个 HoloLens 是戴上之后

1636
00:54:04,000 --> 00:54:06,000
你可以全市场看到的

1637
00:54:06,000 --> 00:54:08,000
然后当人们

1638
00:54:08,000 --> 00:54:10,000
对当人们告诉我说这个市场其实很窄的时候

1639
00:54:10,000 --> 00:54:11,000
我没有一个主观印象

1640
00:54:11,000 --> 00:54:12,000
它到底有多窄

1641
00:54:13,000 --> 00:54:15,000
但只有知道看了那个视频之后

1642
00:54:15,000 --> 00:54:17,000
我才意识到原来这么窄

1643
00:54:18,000 --> 00:54:19,000
这个差别就是

1644
00:54:20,000 --> 00:54:21,000
我之前想象的是一个

1645
00:54:21,000 --> 00:54:24,000
一个显示器大的

1646
00:54:24,000 --> 00:54:25,000
我把你包起来

1647
00:54:25,000 --> 00:54:28,000
你坐在一个属于你自己的微型

1648
00:54:28,000 --> 00:54:29,000
天文球里面这种感觉

1649
00:54:29,000 --> 00:54:33,000
但实际上它只不过是把一台显示器摆到你面前

1650
00:54:33,000 --> 00:54:34,000
就是在你眼镜前面

1651
00:54:35,000 --> 00:54:36,000
就大概那么大的地方

1652
00:54:36,000 --> 00:54:38,000
这实在是差别太大了

1653
00:54:40,000 --> 00:54:40,000
视频上说

1654
00:54:40,000 --> 00:54:42,000
再也不能说这个什么

1655
00:54:42,000 --> 00:54:43,000
取消显示器

1656
00:54:43,000 --> 00:54:45,000
然后整屏都是这个

1657
00:54:45,000 --> 00:54:47,000
边界级窗口的这么一个愉快的想法了

1658
00:54:47,000 --> 00:54:48,000
对

1659
00:54:48,000 --> 00:54:49,000
对

1660
00:54:49,000 --> 00:54:52,000
所以我必须收回自己说 Lawrence

1661
00:54:52,000 --> 00:54:53,000
那个什么期待太高了

1662
00:54:53,000 --> 00:54:57,000
这个实际的实验效果连我都受不了

1663
00:54:57,000 --> 00:54:57,000
好吗

1664
00:55:00,000 --> 00:55:03,000
所以他有说是因为什么原因实现不了

1665
00:55:03,000 --> 00:55:05,000
是因为这个光学元件的物理限制

1666
00:55:06,000 --> 00:55:08,000
还是说这是因为为了降低

1667
00:55:08,000 --> 00:55:12,000
因为它那个是带在头上是整体基本没有一个单独

1668
00:55:12,000 --> 00:55:13,000
插线的外接的设备

1669
00:55:14,000 --> 00:55:16,000
所以他要考虑这个什么供电啊

1670
00:55:16,000 --> 00:55:17,000
续航的问题吧

1671
00:55:18,000 --> 00:55:18,000
对

1672
00:55:18,000 --> 00:55:20,000
我觉得其实就是技术还不成熟

1673
00:55:20,000 --> 00:55:24,000
但是那个视频主要是宣传那个 Hololens 在一个医院里面

1674
00:55:24,000 --> 00:55:25,000
的一些用意的

1675
00:55:25,000 --> 00:55:29,000
比如说医生可以拿 Hololens 直接看骨头断裂的情况

1676
00:55:30,000 --> 00:55:30,000
就可以

1677
00:55:30,000 --> 00:55:32,000
你可以看到那个

1678
00:55:33,000 --> 00:55:34,000
屋子中间有一个心脏

1679
00:55:34,000 --> 00:55:35,000
然后心脏在跳

1680
00:55:35,000 --> 00:55:38,000
然后你可以转着看着心脏跳动的状况之类的

1681
00:55:38,000 --> 00:55:40,000
所以他没有解释说市场为什么这么窄

1682
00:55:40,000 --> 00:55:42,000
他只是怎么说呢

1683
00:55:42,000 --> 00:55:44,000
可能觉得自己之前吹的有点猛

1684
00:55:44,000 --> 00:55:48,000
所以用这个视频让大家明白一下

1685
00:55:48,000 --> 00:55:50,000
其实看到的效果只不过是这样

1686
00:55:50,000 --> 00:55:51,000
你们不要那个

1687
00:55:52,000 --> 00:55:53,000
就是期待太高的感觉

1688
00:55:53,000 --> 00:55:54,000
有一点点

1689
00:55:55,000 --> 00:56:00,000
Expectation Control Management 的一个感觉

1690
00:56:02,000 --> 00:56:04,000
威远现在来做这个又有什么用呢

1691
00:56:05,000 --> 00:56:08,000
他之前自己把那个东西吹的那么好

1692
00:56:08,000 --> 00:56:11,000
当时第一次出那个视频的时候

1693
00:56:11,000 --> 00:56:12,000
就是他发布了两次

1694
00:56:12,000 --> 00:56:13,000
其实

1695
00:56:13,000 --> 00:56:16,000
就说感觉这个比例要吹破了

1696
00:56:17,000 --> 00:56:18,000
这个比例话太大

1697
00:56:18,000 --> 00:56:18,000
对吧

1698
00:56:19,000 --> 00:56:21,000
现在看果然话太大了

1699
00:56:21,000 --> 00:56:22,000
不过还是好总比没有强

1700
00:56:23,000 --> 00:56:24,000
毕竟是第一代产品

1701
00:56:24,000 --> 00:56:26,000
所以让他们迭代两年再说

1702
00:56:28,000 --> 00:56:30,000
黑微软的话

1703
00:56:30,000 --> 00:56:31,000
你们留到 IT 工作里面说

1704
00:56:31,000 --> 00:56:32,000
没有我没黑

1705
00:56:32,000 --> 00:56:33,000
经常有人说我黑

1706
00:56:34,000 --> 00:56:35,000
经常有人说我黑软

1707
00:56:35,000 --> 00:56:37,000
其实我给他们还是蛮高兴心

1708
00:56:37,000 --> 00:56:38,000
我觉得你刚才的话

1709
00:56:38,000 --> 00:56:41,000
你刚才的话在软狗耳朵听起来

1710
00:56:41,000 --> 00:56:42,000
就已经是非常不舒服

1711
00:56:42,000 --> 00:56:43,000
就是黑他们是吧

1712
00:56:43,000 --> 00:56:43,000
对

1713
00:56:44,000 --> 00:56:44,000
好吧

1714
00:56:44,000 --> 00:56:48,000
那你倒是拿出一个让我们经验的东西来看

1715
00:56:48,000 --> 00:56:50,000
他们会说

1716
00:56:51,000 --> 00:56:53,000
blah blah 黑科技 blah blah

1717
00:56:53,000 --> 00:56:55,000
微软做的事怎能叫 blah blah

1718
00:56:55,000 --> 00:56:58,000
从来都停留在什么 Microsoft Research 里面

1719
00:56:58,000 --> 00:56:59,000
不会拿出来的

1720
00:56:59,000 --> 00:57:00,000
那有什么用呢

1721
00:57:02,000 --> 00:57:04,000
不过其实从那个完成

1722
00:57:04,000 --> 00:57:05,000
从那个完成度来讲

1723
00:57:05,000 --> 00:57:06,000
我觉得其实

1724
00:57:07,000 --> 00:57:08,000
这已经蛮高的了

1725
00:57:08,000 --> 00:57:09,000
就是 HoloLens 一代

1726
00:57:11,000 --> 00:57:14,000
所以其实我还是挺乐观的

1727
00:57:14,000 --> 00:57:14,000
就是

1728
00:57:15,000 --> 00:57:16,000
到他们在

1729
00:57:16,000 --> 00:57:17,000
就希望他们能够保持

1730
00:57:18,000 --> 00:57:20,000
这个速度往前去迭代

1731
00:57:20,000 --> 00:57:21,000
OK

1732
00:57:21,000 --> 00:57:22,000
那我们接下来可以进入正题了

1733
00:57:23,000 --> 00:57:25,000
今天的话题是 Debug

1734
00:57:26,000 --> 00:57:28,000
用中文说就是除错于调试

1735
00:57:31,000 --> 00:57:34,000
我不知道 Rail 你经常 Debug 吗

1736
00:57:34,000 --> 00:57:36,000
或者说你觉得 Debug

1737
00:57:36,000 --> 00:57:39,000
你觉得你写代码的时间号里面是 Debug 时间多

1738
00:57:39,000 --> 00:57:42,000
还是真正写代码的时间多

1739
00:57:46,000 --> 00:57:46,000
还好吧

1740
00:57:46,000 --> 00:57:48,000
我 Debug 时间不算多

1741
00:57:48,000 --> 00:57:49,000
对

1742
00:57:49,000 --> 00:57:51,000
可能是两三成的样子

1743
00:57:53,000 --> 00:57:54,000
两三成

1744
00:57:54,000 --> 00:57:57,000
主要是因为我写的东西也不是特别复杂

1745
00:57:57,000 --> 00:57:58,000
就还凑合

1746
00:57:59,000 --> 00:57:59,000
你太谴虚了

1747
00:57:59,000 --> 00:58:02,000
你可以直接说你写的东西是 bug-free

1748
00:58:03,000 --> 00:58:04,000
就是什么

1749
00:58:06,000 --> 00:58:06,000
就

1750
00:58:07,000 --> 00:58:08,000
前两天我在

1751
00:58:10,000 --> 00:58:11,000
一个网站

1752
00:58:11,000 --> 00:58:12,000
讲什么

1753
00:58:13,000 --> 00:58:13,000
讲什么呢

1754
00:58:13,000 --> 00:58:15,000
就讲白板编程

1755
00:58:15,000 --> 00:58:16,000
讲面试

1756
00:58:16,000 --> 00:58:18,000
他讲说

1757
00:58:18,000 --> 00:58:19,000
应该怎样去做白板面试

1758
00:58:19,000 --> 00:58:21,000
我们回头会把这个链接放在

1759
00:58:21,000 --> 00:58:22,000
Show Notes 里面

1760
00:58:22,000 --> 00:58:23,000
但是

1761
00:58:23,000 --> 00:58:25,000
我印象里面比较深的一句话就是

1762
00:58:25,000 --> 00:58:28,000
他里面说程序员可以分为两种

1763
00:58:28,000 --> 00:58:31,000
一种是会先确认前条件

1764
00:58:32,000 --> 00:58:33,000
中置条件

1765
00:58:33,000 --> 00:58:34,000
边界条件

1766
00:58:35,000 --> 00:58:36,000
以及不变的那一部分

1767
00:58:36,000 --> 00:58:37,000
然后写入正确的代码

1768
00:58:39,000 --> 00:58:41,000
另外一种是先编写代码

1769
00:58:41,000 --> 00:58:44,000
然后通过各种用力调试

1770
00:58:44,000 --> 00:58:46,000
测试对程序进行调整

1771
00:58:46,000 --> 00:58:48,000
最后得到似乎正确的代码

1772
00:58:49,000 --> 00:58:49,000
就是可以分开

1773
00:58:49,000 --> 00:58:50,000
不是 TDD 吗

1774
00:58:53,000 --> 00:58:54,000
TDD 是哪一种

1775
00:58:54,000 --> 00:58:55,000
第一种还是第二种

1776
00:58:55,000 --> 00:58:56,000
就是后者

1777
00:58:57,000 --> 00:58:59,000
第二种他说先编写代码

1778
00:58:59,000 --> 00:59:01,000
然后通过用力

1779
00:59:02,000 --> 00:59:03,000
TDD 应该是第一种

1780
00:59:04,000 --> 00:59:06,000
TDD 应该是一个一个确立

1781
00:59:09,000 --> 00:59:10,000
然后他里面说

1782
00:59:10,000 --> 00:59:12,000
他个人估计

1783
00:59:13,000 --> 00:59:14,000
保守估计

1784
00:59:14,000 --> 00:59:16,000
前者开发效率至少是后者的 10 倍

1785
00:59:16,000 --> 00:59:19,000
因为前者不需要浪费大量时间在编码

1786
00:59:19,000 --> 00:59:20,000
调试编码

1787
00:59:21,000 --> 00:59:23,000
极其耗时的循环上

1788
00:59:23,000 --> 00:59:24,000
我觉得说有用到

1789
00:59:24,000 --> 00:59:25,000
写代码之间

1790
00:59:25,000 --> 00:59:27,000
敲键盘之间先动脑子响

1791
00:59:27,000 --> 00:59:28,000
是不是

1792
00:59:29,000 --> 00:59:29,000
对

1793
00:59:30,000 --> 00:59:34,000
包括在一些刚学成的人身上

1794
00:59:34,000 --> 00:59:35,000
也会发现一个问题

1795
00:59:35,000 --> 00:59:36,000
就是发现一种现象

1796
00:59:36,000 --> 00:59:37,000
就是他认为

1797
00:59:38,000 --> 00:59:41,000
写代码的速度跟敲键盘的速度相关

1798
00:59:41,000 --> 00:59:42,000
其实并不是这样

1799
00:59:44,000 --> 00:59:45,000
我可以举两个例子

1800
00:59:45,000 --> 00:59:47,000
一个是我前

1801
00:59:49,000 --> 00:59:51,000
上上加工资里面的一个

1802
00:59:51,000 --> 00:59:53,000
60 多岁的程序员

1803
00:59:54,000 --> 00:59:56,000
他可能是从 cowboy 时代就

1804
00:59:57,000 --> 00:59:58,000
写程序

1805
00:59:58,000 --> 01:00:00,000
然后到 60 多岁还在做那个

1806
01:00:01,000 --> 01:00:02,000
高级顾问

1807
01:00:02,000 --> 01:00:03,000
众所周知

1808
01:00:03,000 --> 01:00:04,000
德国的退休年龄是 67 岁

1809
01:00:04,000 --> 01:00:06,000
所以以 60 岁的高龄还在

1810
01:00:07,000 --> 01:00:07,000
写程序

1811
01:00:08,000 --> 01:00:08,000
然后他

1812
01:00:09,000 --> 01:00:10,000
很多德国人一样

1813
01:00:11,000 --> 01:00:12,000
只会用两个纸头敲键盘

1814
01:00:13,000 --> 01:00:14,000
你很难想象吧

1815
01:00:14,000 --> 01:00:16,000
一个写了 30 年程序的人

1816
01:00:16,000 --> 01:00:17,000
只会用两个纸头敲键盘

1817
01:00:18,000 --> 01:00:20,000
但他的效率不比任何人慢

1818
01:00:20,000 --> 01:00:23,000
或者说他写出来的编码的

1819
01:00:23,000 --> 01:00:24,000
他写出来的程序的

1820
01:00:25,000 --> 01:00:27,000
可靠性和效率并不比任何人差

1821
01:00:28,000 --> 01:00:29,000
然后反过来

1822
01:00:29,000 --> 01:00:30,000
另外一个例子就是

1823
01:00:30,000 --> 01:00:32,000
我上一家公司里面有一个

1824
01:00:32,000 --> 01:00:33,000
呃

1825
01:00:34,000 --> 01:00:37,000
不透露他的肤色了吧

1826
01:00:38,000 --> 01:00:39,000
有这么一个朋友

1827
01:00:39,000 --> 01:00:41,000
他经常会说

1828
01:00:42,000 --> 01:00:42,000
每天开会的时候

1829
01:00:42,000 --> 01:00:43,000
他会说

1830
01:00:43,000 --> 01:00:44,000
我还有一点点就完了

1831
01:00:45,000 --> 01:00:46,000
我 80%已经写完了

1832
01:00:46,000 --> 01:00:47,000
只剩下 20%

1833
01:00:47,000 --> 01:00:48,000
只是一些

1834
01:00:49,000 --> 01:00:51,000
细节需要调整一下

1835
01:00:51,000 --> 01:00:53,000
但是如果你仔细去看他这个

1836
01:00:53,000 --> 01:00:54,000
细节的调整

1837
01:00:54,000 --> 01:00:55,000
到底是在干嘛的时候

1838
01:00:55,000 --> 01:00:58,000
他其实在大量的改变自己的代码

1839
01:00:58,000 --> 01:00:59,000
因为他里面很多东西

1840
01:00:59,000 --> 01:01:00,000
虽然写得很快

1841
01:01:00,000 --> 01:01:02,000
但根本就是写错了好吧

1842
01:01:02,000 --> 01:01:04,000
所以这所谓的 20%

1843
01:01:04,000 --> 01:01:05,000
其实占用他

1844
01:01:06,000 --> 01:01:07,000
整个开发的 80%的时间

1845
01:01:07,000 --> 01:01:09,000
他总觉得自己可能明天就会写完

1846
01:01:09,000 --> 01:01:10,000
但其实明天会发现

1847
01:01:10,000 --> 01:01:12,000
我靠还是要后点和大后点

1848
01:01:14,000 --> 01:01:14,000
呃

1849
01:01:15,000 --> 01:01:15,000
对

1850
01:01:15,000 --> 01:01:17,000
所以我觉得 Ryo 其实你刚才暗示了

1851
01:01:17,000 --> 01:01:18,000
你是第一种

1852
01:01:21,000 --> 01:01:21,000
好吧

1853
01:01:21,000 --> 01:01:24,000
我其实我是

1854
01:01:24,000 --> 01:01:25,000
就希望我希望是第一种

1855
01:01:25,000 --> 01:01:28,000
不知道这是不是真实的尽量呗

1856
01:01:28,000 --> 01:01:29,000
就有这么一个

1857
01:01:30,000 --> 01:01:32,000
就刚刚我说写代码这些

1858
01:01:32,000 --> 01:01:32,000
先弄脑子

1859
01:01:32,000 --> 01:01:34,000
但这个不是说来玩玩

1860
01:01:34,000 --> 01:01:34,000
就是

1861
01:01:35,000 --> 01:01:38,000
就我看到有很多人写代码的时候

1862
01:01:38,000 --> 01:01:40,000
先翻成先敲几行再说

1863
01:01:40,000 --> 01:01:42,000
再来想怎么弄着怎么改

1864
01:01:43,000 --> 01:01:45,000
其实我看到很多这种所谓

1865
01:01:45,000 --> 01:01:46,000
大神级程序员

1866
01:01:46,000 --> 01:01:47,000
其实他是要先

1867
01:01:48,000 --> 01:01:48,000
先写代码

1868
01:01:48,000 --> 01:01:52,000
他是要想好久好久在脑子里面构建一个大框架

1869
01:01:52,000 --> 01:01:53,000
然后步骤怎么样

1870
01:01:53,000 --> 01:01:53,000
有些什么样

1871
01:01:53,000 --> 01:01:54,000
至少要注意的点

1872
01:01:54,000 --> 01:01:56,000
他会想的比较清楚

1873
01:01:56,000 --> 01:01:57,000
然后才会动笔

1874
01:01:57,000 --> 01:01:59,000
再动笔动笔动键盘

1875
01:01:59,000 --> 01:02:01,000
慢慢慢慢的去敲

1876
01:02:02,000 --> 01:02:02,000
对

1877
01:02:02,000 --> 01:02:05,000
其实这跟写作文写文章差不多

1878
01:02:05,000 --> 01:02:05,000
就是

1879
01:02:06,000 --> 01:02:08,000
并不是说你要写东西

1880
01:02:08,000 --> 01:02:10,000
就是你要一定要坐在书桌前面

1881
01:02:10,000 --> 01:02:11,000
然后打开稿纸

1882
01:02:13,000 --> 01:02:14,000
就像你要写程序

1883
01:02:14,000 --> 01:02:16,000
并不是一定要先赶紧打开你的 ID

1884
01:02:16,000 --> 01:02:17,000
然后新建一个项目

1885
01:02:17,000 --> 01:02:18,000
然后

1886
01:02:18,000 --> 01:02:19,000
写个

1887
01:02:20,000 --> 01:02:21,000
写个 Made 函数出来

1888
01:02:21,000 --> 01:02:22,000
然后盯着他发呆

1889
01:02:22,000 --> 01:02:23,000
你要想写什么东西

1890
01:02:23,000 --> 01:02:24,000
你写

1891
01:02:24,000 --> 01:02:26,000
在各种各样的时候去想

1892
01:02:26,000 --> 01:02:27,000
你要写什么东西

1893
01:02:27,000 --> 01:02:28,000
在洗澡的时候

1894
01:02:28,000 --> 01:02:28,000
刷牙的时候

1895
01:02:28,000 --> 01:02:29,000
走路的时候

1896
01:02:30,000 --> 01:02:31,000
跟女朋友聊天的时候

1897
01:02:31,000 --> 01:02:34,000
当然最后这种是非常不推荐的

1898
01:02:34,000 --> 01:02:35,000
我吃过苦好了

1899
01:02:37,000 --> 01:02:37,000
在这个时候

1900
01:02:37,000 --> 01:02:40,000
你已经可以再构想你要写什么

1901
01:02:40,000 --> 01:02:42,000
然后等到你真正有一定把握的时候

1902
01:02:42,000 --> 01:02:43,000
再出来写

1903
01:02:43,000 --> 01:02:44,000
这样要比你直接上来就劈哩啪啦

1904
01:02:44,000 --> 01:02:46,000
敲键盘其实效率要高

1905
01:02:46,000 --> 01:02:47,000
我觉得

1906
01:02:47,000 --> 01:02:48,000
没错

1907
01:02:48,000 --> 01:02:49,000
所以以后

1908
01:02:50,000 --> 01:02:51,000
如果比如说

1909
01:02:51,000 --> 01:02:53,000
我开一间软件公司

1910
01:02:53,000 --> 01:02:53,000
是吧

1911
01:02:54,000 --> 01:02:55,000
要在什么

1912
01:02:55,000 --> 01:02:57,000
除了标配那些什么办公桌

1913
01:02:57,000 --> 01:02:58,000
什么椅子之外

1914
01:02:58,000 --> 01:03:00,000
还得做一个冥想室

1915
01:03:03,000 --> 01:03:04,000
就像那个 CC 城

1916
01:03:04,000 --> 01:03:06,000
曾经晒过他们公司有 powernav

1917
01:03:07,000 --> 01:03:08,000
椅子你可以躺着

1918
01:03:08,000 --> 01:03:09,000
睡觉了

1919
01:03:10,000 --> 01:03:12,000
睡觉的时候你可以想程序吗

1920
01:03:13,000 --> 01:03:13,000
不能啊

1921
01:03:13,000 --> 01:03:14,000
睡着睡着了

1922
01:03:14,000 --> 01:03:16,000
得冥想在那打坐

1923
01:03:16,000 --> 01:03:17,000
那个残忠的那种

1924
01:03:18,000 --> 01:03:18,000
OK

1925
01:03:19,000 --> 01:03:20,000
我相信

1926
01:03:21,000 --> 01:03:22,000
但我是觉得

1927
01:03:22,000 --> 01:03:25,000
至少我写课程序的时候

1928
01:03:25,000 --> 01:03:26,000
基本上都是在动的时候

1929
01:03:26,000 --> 01:03:28,000
就是身体一定要在做什么事情

1930
01:03:28,000 --> 01:03:30,000
比如说开车或者是骑自行车

1931
01:03:30,000 --> 01:03:31,000
或者是

1932
01:03:32,000 --> 01:03:33,000
走路之类的

1933
01:03:33,000 --> 01:03:35,000
就躺在一地方静静的待着

1934
01:03:35,000 --> 01:03:36,000
我是

1935
01:03:37,000 --> 01:03:38,000
想不好事情

1936
01:03:40,000 --> 01:03:41,000
所以其实从这个角度来讲

1937
01:03:41,000 --> 01:03:42,000
我觉得那个什么

1938
01:03:43,000 --> 01:03:44,000
literate programming

1939
01:03:44,000 --> 01:03:46,000
这东西叫做文化变成又来了

1940
01:03:48,000 --> 01:03:48,000
挺好的

1941
01:03:48,000 --> 01:03:52,000
就是它可以强迫你在写第一行代码之前

1942
01:03:52,000 --> 01:03:53,000
先把这个什么前因后果

1943
01:03:53,000 --> 01:03:54,000
先把你的思路写出来

1944
01:03:54,000 --> 01:03:55,000
背景

1945
01:03:55,000 --> 01:03:55,000
对

1946
01:03:55,000 --> 01:03:57,000
先把这个整体思路写出来

1947
01:03:57,000 --> 01:03:58,000
然后你再

1948
01:03:58,000 --> 01:04:01,000
顺着一个思路写一行代码

1949
01:04:01,000 --> 01:04:01,000
这样

1950
01:04:02,000 --> 01:04:02,000
对

1951
01:04:04,000 --> 01:04:05,000
但是

1952
01:04:05,000 --> 01:04:06,000
不管怎么说

1953
01:04:06,000 --> 01:04:09,000
或者说不管多强悍的程序员

1954
01:04:09,000 --> 01:04:11,000
他写出来程序

1955
01:04:11,000 --> 01:04:12,000
终究是没有办法避免

1956
01:04:13,000 --> 01:04:14,000
会有 bug

1957
01:04:14,000 --> 01:04:15,000
所以这时候就需要 debug

1958
01:04:16,000 --> 01:04:17,000
我们不妨先来解释一下

1959
01:04:17,000 --> 01:04:19,000
debug 这个词是怎么来的

1960
01:04:20,000 --> 01:04:23,000
即使有一个美丽的都市传说

1961
01:04:23,000 --> 01:04:25,000
我相信可能大部分听众

1962
01:04:25,000 --> 01:04:26,000
此时也都会

1963
01:04:27,000 --> 01:04:28,000
说出来说

1964
01:04:28,000 --> 01:04:29,000
debug 是曾经

1965
01:04:30,000 --> 01:04:32,000
有这么一位女程序员

1966
01:04:32,000 --> 01:04:35,000
她的名字叫做 Grace Hopper

1967
01:04:35,000 --> 01:04:37,000
格力斯霍普这么一位

1968
01:04:38,000 --> 01:04:40,000
美国海军准将

1969
01:04:41,000 --> 01:04:43,000
准将程序员

1970
01:04:43,000 --> 01:04:44,000
她曾经在

1971
01:04:45,000 --> 01:04:48,000
1950 年代的时候开发

1972
01:04:50,000 --> 01:04:52,000
应该是哈佛的一个

1973
01:04:53,000 --> 01:04:55,000
大型计算机项目的时候

1974
01:04:55,000 --> 01:04:57,000
去检测一个计算机的故障

1975
01:04:57,000 --> 01:05:00,000
然后她发现故障的原因是

1976
01:05:01,000 --> 01:05:02,000
一个蛾子

1977
01:05:02,000 --> 01:05:03,000
一只蛾子

1978
01:05:03,000 --> 01:05:05,000
卡在一个积电器上面

1979
01:05:06,000 --> 01:05:08,000
然后这个积电器没有办法正确的

1980
01:05:08,000 --> 01:05:09,000
被放下来

1981
01:05:09,000 --> 01:05:11,000
就是接受不了了

1982
01:05:11,000 --> 01:05:14,000
因此导致了整个计算机不工作

1983
01:05:15,000 --> 01:05:16,000
然后她把这个蛾子取出来

1984
01:05:16,000 --> 01:05:17,000
然后把这个蛾子

1985
01:05:17,000 --> 01:05:20,000
粘在了那一天的这个故障记录上

1986
01:05:20,000 --> 01:05:21,000
然后写说这只 MOS

1987
01:05:21,000 --> 01:05:24,000
导致了整个机器故障

1988
01:05:24,000 --> 01:05:26,000
然后我 Literally 把它 debug 了

1989
01:05:27,000 --> 01:05:28,000
这是 debug 这个词的由来

1990
01:05:29,000 --> 01:05:29,000
但

1991
01:05:29,000 --> 01:05:31,000
就真正的除虫

1992
01:05:32,000 --> 01:05:32,000
对

1993
01:05:33,000 --> 01:05:34,000
但实际上虽然

1994
01:05:35,000 --> 01:05:38,000
Grace Hopper 使用了 debug 这个词

1995
01:05:38,000 --> 01:05:40,000
debug 这个词作为

1996
01:05:41,000 --> 01:05:45,000
作为排除故障的指代早在 1940 年代左右

1997
01:05:45,000 --> 01:05:46,000
就已经在

1998
01:05:46,000 --> 01:05:47,000
其他领域

1999
01:05:47,000 --> 01:05:49,000
就是尤其是电子和机械领域

2000
01:05:49,000 --> 01:05:51,000
就已经其实已经被人使用了

2001
01:05:51,000 --> 01:05:51,000
所以

2002
01:05:52,000 --> 01:05:54,000
debug 这个词其实并不是

2003
01:05:55,000 --> 01:05:57,000
Grace Hopper 的发明

2004
01:05:57,000 --> 01:06:00,000
然后 debug 这个词真正成为一个

2005
01:06:01,000 --> 01:06:04,000
排除错误的一个统一词

2006
01:06:04,000 --> 01:06:06,000
也是一直要到 1960 年代左右

2007
01:06:06,000 --> 01:06:09,000
才真正的在计算机械推广开来

2008
01:06:09,000 --> 01:06:11,000
就是我记得好像是

2009
01:06:11,000 --> 01:06:13,000
Vicky Villain 的文章说

2010
01:06:13,000 --> 01:06:15,000
一直到 65 年还是哪一年

2011
01:06:15,000 --> 01:06:19,000
才有一篇论文的第一页

2012
01:06:19,000 --> 01:06:20,000
直接使用了 debug 这个词

2013
01:06:20,000 --> 01:06:21,000
而且没有注视说

2014
01:06:21,000 --> 01:06:23,000
这个没有加引号

2015
01:06:23,000 --> 01:06:25,000
也没有注视这个词到底是什么意思

2016
01:06:25,000 --> 01:06:26,000
所以直到这个时候

2017
01:06:26,000 --> 01:06:28,000
debug 才真正的进入了计算机械的主流

2018
01:06:31,000 --> 01:06:33,000
我们又考了一下古

2019
01:06:34,000 --> 01:06:34,000
对

2020
01:06:36,000 --> 01:06:39,000
不如说一说你遇到过来比较有意思的吧

2021
01:06:39,000 --> 01:06:44,000
或者说你遇到过什么比较困扰你

2022
01:06:44,000 --> 01:06:46,000
或者比较有意思吧

2023
01:06:47,000 --> 01:06:48,000
就上次我们那个串台

2024
01:06:49,000 --> 01:06:51,000
对

2025
01:06:51,000 --> 01:06:53,000
IPN 串台 bug 也是一个比较有意思的吧

2026
01:06:54,000 --> 01:06:56,000
我记得很多人猜测过

2027
01:06:56,000 --> 01:06:58,000
为什么我们要换很多

2028
01:06:59,000 --> 01:07:00,000
换了很多次

2029
01:07:01,000 --> 01:07:02,000
podcast server

2030
01:07:02,000 --> 01:07:04,000
然后为什么要折腾来折腾去

2031
01:07:04,000 --> 01:07:06,000
有时候支持 podcast 勾端

2032
01:07:06,000 --> 01:07:08,000
有时候不支持 podcast 勾端

2033
01:07:08,000 --> 01:07:11,000
其实都是我们在这时候解决这个 bug

2034
01:07:12,000 --> 01:07:14,000
不明白为什么被串台

2035
01:07:14,000 --> 01:07:15,000
对

2036
01:07:15,000 --> 01:07:17,000
然后为什么不能解决这个 bug

2037
01:07:17,000 --> 01:07:19,000
主要是因为我们没有办法重现它

2038
01:07:20,000 --> 01:07:21,000
这个是一个很重要的事情

2039
01:07:21,000 --> 01:07:22,000
就是说

2040
01:07:22,000 --> 01:07:24,000
你要去除一只虫

2041
01:07:24,000 --> 01:07:26,000
首先你得看到这只虫

2042
01:07:26,000 --> 01:07:26,000
对吧

2043
01:07:26,000 --> 01:07:28,000
你得找到这个虫在哪

2044
01:07:28,000 --> 01:07:29,000
是怎么发生的

2045
01:07:29,000 --> 01:07:31,000
一个生存的机制是怎么样子

2046
01:07:31,000 --> 01:07:33,000
什么条件下会触发它

2047
01:07:33,000 --> 01:07:33,000
对吧

2048
01:07:34,000 --> 01:07:36,000
然后凡是那些

2049
01:07:36,000 --> 01:07:38,000
你想找找不着

2050
01:07:38,000 --> 01:07:39,000
不知道怎么触发

2051
01:07:39,000 --> 01:07:40,000
不知道什么时候出现

2052
01:07:40,000 --> 01:07:42,000
你没办法重现那样的东西

2053
01:07:42,000 --> 01:07:43,000
我们经常叫做 phantom bug

2054
01:07:43,000 --> 01:07:43,000
对吧

2055
01:07:43,000 --> 01:07:45,000
就是蚁虫

2056
01:07:45,000 --> 01:07:46,000
蚁虫

2057
01:07:46,000 --> 01:07:48,000
上次串台的 bug

2058
01:07:48,000 --> 01:07:50,000
之所以那么久都没有找到原因

2059
01:07:51,000 --> 01:07:54,000
一个最主要的问题就是我们两个

2060
01:07:54,000 --> 01:07:55,000
都没有办法重

2061
01:07:55,000 --> 01:07:57,000
应该是我们三都没办法重现它

2062
01:07:59,000 --> 01:08:03,000
因为这个东西是要在特定的运营商的网络里面

2063
01:08:03,000 --> 01:08:06,000
就是长程宽带

2064
01:08:06,000 --> 01:08:07,000
才会出现

2065
01:08:07,000 --> 01:08:09,000
然后偶尔在某些

2066
01:08:12,000 --> 01:08:15,000
移动电信的运营商里面偶尔也会出现

2067
01:08:15,000 --> 01:08:19,000
但是好像这就是跟电信或者他们的网络

2068
01:08:19,000 --> 01:08:20,000
的结构有点关系的

2069
01:08:20,000 --> 01:08:23,000
因为它似乎不是一个全国统一的

2070
01:08:24,000 --> 01:08:25,000
一个结构

2071
01:08:25,000 --> 01:08:26,000
所以就比较麻烦了

2072
01:08:27,000 --> 01:08:28,000
没错

2073
01:08:29,000 --> 01:08:32,000
有人定义过说 deby 的过程其实就是

2074
01:08:33,000 --> 01:08:38,000
是一个证明你相信的很多东西是真实的过程

2075
01:08:38,000 --> 01:08:41,000
到你找到一个真实的不真实的

2076
01:08:41,000 --> 01:08:43,000
我们首先有两个障碍

2077
01:08:43,000 --> 01:08:44,000
第一个是我们

2078
01:08:46,000 --> 01:08:49,000
我们相信真实的实在是太多了

2079
01:08:50,000 --> 01:08:55,000
第二个就是我们没有办法通过一次

2080
01:08:55,000 --> 01:08:59,000
势力就决定说这个东西肯定是真实的

2081
01:08:59,000 --> 01:09:02,000
我们自己都下载过了无数次的 podcast

2082
01:09:02,000 --> 01:09:06,000
但是没有一次是可以重现这个网络

2083
01:09:06,000 --> 01:09:08,000
因为而且对

2084
01:09:08,000 --> 01:09:10,000
而且即便你是用长程宽带

2085
01:09:10,000 --> 01:09:12,000
你也不是每次都会遇到这个网络

2086
01:09:12,000 --> 01:09:13,000
这是最让人头疼的一个问题

2087
01:09:14,000 --> 01:09:15,000
没错

2088
01:09:18,000 --> 01:09:22,000
我来说我遇到过一个比较痛苦的 bug 了

2089
01:09:22,000 --> 01:09:27,000
而且很遗憾的是这个 bug 直到今天我都没有解决它

2090
01:09:28,000 --> 01:09:29,000
我就离职了

2091
01:09:31,000 --> 01:09:32,000
来说一下

2092
01:09:32,000 --> 01:09:35,000
这是我心里的一个痛

2093
01:09:37,000 --> 01:09:39,000
我的上一家公司是做博彩的

2094
01:09:40,000 --> 01:09:44,000
不用说这么高雅

2095
01:09:44,000 --> 01:09:45,000
就是赌球

2096
01:09:45,000 --> 01:09:47,000
对是赌球的

2097
01:09:47,000 --> 01:09:49,000
然后赌球的公司比较重视

2098
01:09:49,000 --> 01:09:52,000
你的一件事情就是客户的

2099
01:09:53,000 --> 01:09:54,000
怎么说呢

2100
01:09:54,000 --> 01:09:56,000
就是客户会把钱存在我们公司网站上

2101
01:09:56,000 --> 01:09:57,000
给你们意见

2102
01:09:59,000 --> 01:10:06,000
但是有时候有一些使用 iOS 设备的 chrome 用户

2103
01:10:07,000 --> 01:10:11,000
如果一个用户使用 iOS 上面的 chrome 访问我们公司网站

2104
01:10:11,000 --> 01:10:13,000
然后登录我们公司的服务器

2105
01:10:14,000 --> 01:10:20,000
大概有万分之一到十万分之一的概率

2106
01:10:20,000 --> 01:10:22,000
他会看到另外一个人的账户

2107
01:10:24,000 --> 01:10:27,000
这是非常非常非常非常恐怖的一件事情

2108
01:10:27,000 --> 01:10:27,000
不是吗

2109
01:10:28,000 --> 01:10:30,000
你登录了你自己的账号

2110
01:10:30,000 --> 01:10:32,000
结果看到另外一个人的账号

2111
01:10:32,000 --> 01:10:35,000
此时难道你心里不会产生一次恐慌

2112
01:10:36,000 --> 01:10:38,000
我的账户不是也被别人用了吗

2113
01:10:39,000 --> 01:10:40,000
然后对

2114
01:10:40,000 --> 01:10:41,000
还没有钱

2115
01:10:42,000 --> 01:10:42,000
对

2116
01:10:42,000 --> 01:10:43,000
而且里面有钱

2117
01:10:43,000 --> 01:10:45,000
而且感觉突然你登录

2118
01:10:45,000 --> 01:10:47,000
哪天换了人家银行

2119
01:10:47,000 --> 01:10:48,000
这个银行也经常出现

2120
01:10:49,000 --> 01:10:51,000
说什么去 ATM 机取钱

2121
01:10:51,000 --> 01:10:51,000
一看

2122
01:10:51,000 --> 01:10:54,000
擦进去看存款后面有 8 个零

2123
01:10:55,000 --> 01:10:55,000
对

2124
01:10:55,000 --> 01:10:56,000
赶紧全都存出来

2125
01:10:56,000 --> 01:10:56,000
对吧

2126
01:10:56,000 --> 01:10:57,000
赶紧全都取出来

2127
01:10:58,000 --> 01:11:00,000
但这是非常恐怖的一个

2128
01:11:00,000 --> 01:11:01,000
然后

2129
01:11:02,000 --> 01:11:05,000
但是我其实遇到跟 IPM 创产问题一样的

2130
01:11:06,000 --> 01:11:07,000
一样的困境

2131
01:11:07,000 --> 01:11:09,000
就是我自己没有办法重新来这个

2132
01:11:09,000 --> 01:11:09,000
只是有

2133
01:11:10,000 --> 01:11:11,000
大概

2134
01:11:12,000 --> 01:11:15,000
4 到 5 个比较有良知的用户

2135
01:11:16,000 --> 01:11:16,000
遇到这种情况

2136
01:11:16,000 --> 01:11:17,000
立刻截了图

2137
01:11:17,000 --> 01:11:19,000
然后退出那个账户

2138
01:11:19,000 --> 01:11:20,000
然后把截图发给我们

2139
01:11:20,000 --> 01:11:21,000
说有这么一个

2140
01:11:21,000 --> 01:11:23,000
有这么一个 Excellent 在

2141
01:11:23,000 --> 01:11:25,000
然后第一件事情出现的时候

2142
01:11:26,000 --> 01:11:28,000
基本上就已经鸡飞狗跳了

2143
01:11:28,000 --> 01:11:29,000
然后后面又出现了三次

2144
01:11:30,000 --> 01:11:31,000
然后

2145
01:11:32,000 --> 01:11:33,000
大概有那么 4、5 个人

2146
01:11:33,000 --> 01:11:37,000
连续不断的去尝试重现这个 Bug 没有做到

2147
01:11:37,000 --> 01:11:40,000
然后又开始尝试着

2148
01:11:40,000 --> 01:11:41,000
分析这些人的账户

2149
01:11:42,000 --> 01:11:45,000
他们的登录过程有什么异常之处也找不到

2150
01:11:45,000 --> 01:11:46,000
而且

2151
01:11:47,000 --> 01:11:49,000
而且比较悲惨的是这些人一旦

2152
01:11:49,000 --> 01:11:51,000
把这个 Bug 报进来

2153
01:11:51,000 --> 01:11:55,000
我们就必须立刻先把他的账户给封了

2154
01:11:55,000 --> 01:11:55,000
因为

2155
01:11:56,000 --> 01:11:57,000
有安全的方法吗

2156
01:11:57,000 --> 01:11:58,000
对

2157
01:11:58,000 --> 01:12:00,000
就请问他又再一次登录到同一账户

2158
01:12:01,000 --> 01:12:01,000
然后

2159
01:12:02,000 --> 01:12:04,000
一个可能的猜测是

2160
01:12:04,000 --> 01:12:08,000
这个 Bug 是由我们的 Session Replication Server 引起的

2161
01:12:08,000 --> 01:12:08,000
因为

2162
01:12:08,000 --> 01:12:10,000
服务器是一个集群嘛

2163
01:12:12,000 --> 01:12:13,000
你要在这个服务器上登录

2164
01:12:13,000 --> 01:12:14,000
然后你的 Session

2165
01:12:15,000 --> 01:12:17,000
信息需要被复制到另外一个服务器上的话

2166
01:12:18,000 --> 01:12:22,000
需要一个专门的 Dedicated Session Replication Service

2167
01:12:22,000 --> 01:12:25,000
然后这个 Service 使用了一个比较老旧的

2168
01:12:27,000 --> 01:12:27,000
那个酷叫什么

2169
01:12:28,000 --> 01:12:30,000
一时想起来的

2170
01:12:30,000 --> 01:12:32,000
是一个 Java 的 Session Replication

2171
01:12:32,000 --> 01:12:34,000
一个 Java 的 In-Memory Database 的酷

2172
01:12:34,000 --> 01:12:36,000
然后我们怀疑是这个酷有问题

2173
01:12:36,000 --> 01:12:38,000
然后专门请了这个酷的

2174
01:12:38,000 --> 01:12:39,000
德国的

2175
01:12:40,000 --> 01:12:42,000
这个酷的公司德国分部的人来排查

2176
01:12:42,000 --> 01:12:43,000
也没弄出来

2177
01:12:44,000 --> 01:12:45,000
然后又把

2178
01:12:45,000 --> 01:12:46,000
然后又在一个

2179
01:12:48,000 --> 01:12:50,000
用户报这个 Bug 的时候

2180
01:12:50,000 --> 01:12:52,000
把整个 Server 的那个 HitDump 弄下来

2181
01:12:52,000 --> 01:12:54,000
然后开始分析

2182
01:12:54,000 --> 01:12:55,000
也没分析出来

2183
01:12:55,000 --> 01:12:58,000
最后实在没有办法

2184
01:12:58,000 --> 01:12:59,000
我出了一个 Soul 主意

2185
01:12:59,000 --> 01:12:59,000
就是

2186
01:13:01,000 --> 01:13:04,000
秀探那个用户的浏览器 Agent

2187
01:13:04,000 --> 01:13:07,000
如果发现他是在 iOS 上使用 Chrome

2188
01:13:07,000 --> 01:13:09,000
就不让用户的网站说

2189
01:13:09,000 --> 01:13:10,000
请你使用 Safari

2190
01:13:10,000 --> 01:13:12,000
因为 Safari 没有这个问题

2191
01:13:13,000 --> 01:13:15,000
所以 Safari 用户没有出现过这个问题

2192
01:13:15,000 --> 01:13:16,000
只有 iOS

2193
01:13:16,000 --> 01:13:19,000
就是 Chrome 和 iOS 有这么一个问题

2194
01:13:20,000 --> 01:13:21,000
对 Chrome 上的

2195
01:13:21,000 --> 01:13:23,000
iOS 上的 Chrome 有这个问题

2196
01:13:23,000 --> 01:13:25,000
所以问题也有可能出现在 Chrome 上面

2197
01:13:25,000 --> 01:13:25,000
对吧

2198
01:13:26,000 --> 01:13:26,000
但

2199
01:13:28,000 --> 01:13:30,000
但你不知道你没法

2200
01:13:30,000 --> 01:13:31,000
我没有办法解释

2201
01:13:31,000 --> 01:13:31,000
对

2202
01:13:32,000 --> 01:13:35,000
就是一直困扰到我今天的一个 Bug

2203
01:13:35,000 --> 01:13:38,000
这不是连接层的问题吗

2204
01:13:38,000 --> 01:13:39,000
我不知道

2205
01:13:41,000 --> 01:13:44,000
对这个是没有办法去确切的回答的

2206
01:13:44,000 --> 01:13:44,000
我不知道

2207
01:13:44,000 --> 01:13:45,000
对

2208
01:13:45,000 --> 01:13:46,000
而且怎么说

2209
01:13:46,000 --> 01:13:49,000
其实大部分 Bug 都是你搜一搜就可以搜到的

2210
01:13:49,000 --> 01:13:50,000
对吧

2211
01:13:50,000 --> 01:13:52,000
就再怎么隐秘的 Bug

2212
01:13:52,000 --> 01:13:52,000
你

2213
01:13:53,000 --> 01:13:56,000
你很少有可能你是第一个碰到它的人

2214
01:13:56,000 --> 01:13:58,000
但是我搜一下

2215
01:13:58,000 --> 01:14:01,000
从没有看到过任何一个人有类似的这么一个问题

2216
01:14:02,000 --> 01:14:02,000
就

2217
01:14:03,000 --> 01:14:06,000
这实在是太非常伤感的人感觉

2218
01:14:07,000 --> 01:14:09,000
所以到现在为止你也没有解决它

2219
01:14:09,000 --> 01:14:10,000
也不知道为什么

2220
01:14:10,000 --> 01:14:11,000
没有解决

2221
01:14:11,000 --> 01:14:12,000
不知道为什么

2222
01:14:12,000 --> 01:14:13,000
然后到现在为止这个网站

2223
01:14:13,000 --> 01:14:16,000
这个公司网站还是不允许使用 Chrome

2224
01:14:16,000 --> 01:14:19,000
iOS 上的 Chrome 登录

2225
01:14:20,000 --> 01:14:21,000
我觉得时间一久

2226
01:14:21,000 --> 01:14:22,000
可能过上三五年

2227
01:14:23,000 --> 01:14:24,000
如果没有人去看文档的话

2228
01:14:24,000 --> 01:14:28,000
没有人会知道为什么要这样做

2229
01:14:28,000 --> 01:14:32,000
为什么单单要把 iOS 上的 Chrome block 掉

2230
01:14:35,000 --> 01:14:35,000
好吧

2231
01:14:36,000 --> 01:14:37,000
哇

2232
01:14:37,000 --> 01:14:38,000
The greatest mysteries

2233
01:14:39,000 --> 01:14:41,000
这是我人生最悲伤的一个吧

2234
01:14:44,000 --> 01:14:46,000
然后这个链条太长了

2235
01:14:46,000 --> 01:14:48,000
你确实很难去

2236
01:14:48,000 --> 01:14:49,000
而且样板又不多

2237
01:14:49,000 --> 01:14:50,000
只有三粒是吧

2238
01:14:51,000 --> 01:14:51,000
对

2239
01:14:52,000 --> 01:14:54,000
就三到四个用户受到影响了

2240
01:14:55,000 --> 01:14:55,000
对

2241
01:14:55,000 --> 01:14:57,000
你这个是我们知道的只有四个

2242
01:14:58,000 --> 01:15:00,000
也很有可能什么一个雨

2243
01:15:00,000 --> 01:15:02,000
就是先打到你们那个服务器上

2244
01:15:02,000 --> 01:15:04,000
翻转了一个内存里面的一个比特位

2245
01:15:04,000 --> 01:15:05,000
然后导致这个

2246
01:15:05,000 --> 01:15:08,000
Session 复制的过程中出现了错误

2247
01:15:08,000 --> 01:15:09,000
你也很难说的

2248
01:15:10,000 --> 01:15:11,000
是

2249
01:15:11,000 --> 01:15:12,000
也许对

2250
01:15:12,000 --> 01:15:14,000
最后发现 bug 出在太阳黑子上面

2251
01:15:14,000 --> 01:15:16,000
我能把它抢掉

2252
01:15:18,000 --> 01:15:19,000
好吧

2253
01:15:20,000 --> 01:15:21,000
然后我在准备这期节目的时候

2254
01:15:21,000 --> 01:15:22,000
专门去搜一下

2255
01:15:23,000 --> 01:15:24,000
有哪些

2256
01:15:24,000 --> 01:15:26,000
最奇怪或者最有趣的 bug

2257
01:15:27,000 --> 01:15:28,000
Kura 上面有这样一个问题

2258
01:15:28,000 --> 01:15:31,000
就是 What's the hottest bug you have ever debugged

2259
01:15:32,000 --> 01:15:34,000
然后排名第一的答案是

2260
01:15:34,000 --> 01:15:38,000
一个给第一代索尼开发游戏的一个人

2261
01:15:38,000 --> 01:15:40,000
他遇到了这么一个 bug

2262
01:15:40,000 --> 01:15:40,000
就是

2263
01:15:42,000 --> 01:15:43,000
这个游戏

2264
01:15:43,000 --> 01:15:46,000
在你储存的时候

2265
01:15:46,000 --> 01:15:50,000
有非常小的几率会让你

2266
01:15:51,000 --> 01:15:55,000
PS 的存储卡上面的数据

2267
01:15:56,000 --> 01:15:57,000
被损坏

2268
01:15:58,000 --> 01:16:00,000
你存这个游戏的盘的时候

2269
01:16:00,000 --> 01:16:04,000
有非常小的概率会导致你 Memory stick

2270
01:16:04,000 --> 01:16:06,000
上面所有的存储资料都消失了

2271
01:16:07,000 --> 01:16:07,000
对

2272
01:16:09,000 --> 01:16:11,000
那个年纪比较小

2273
01:16:11,000 --> 01:16:13,000
听众们可能不知道我在说什么

2274
01:16:13,000 --> 01:16:14,000
就是

2275
01:16:14,000 --> 01:16:17,000
早期的 PlayStation 上面是有这么一个小小的

2276
01:16:18,000 --> 01:16:19,000
像 USB 插盘

2277
01:16:19,000 --> 01:16:21,000
USB 盘的这么一个东西

2278
01:16:22,000 --> 01:16:24,000
叫做 Memory stick

2279
01:16:24,000 --> 01:16:26,000
你把它插进 PS

2280
01:16:26,000 --> 01:16:28,000
索尼自家的 U 盘接口

2281
01:16:28,000 --> 01:16:28,000
不是 U 盘

2282
01:16:28,000 --> 01:16:31,000
是 SD 卡的型号的接口

2283
01:16:32,000 --> 01:16:32,000
对

2284
01:16:32,000 --> 01:16:35,000
然后你把它插到你的 PlayStation 上面

2285
01:16:35,000 --> 01:16:37,000
才可以把你的游戏存盘

2286
01:16:37,000 --> 01:16:41,000
然后存盘文件是你可以自己带在身上

2287
01:16:41,000 --> 01:16:43,000
然后这个游戏有可能把这个存盘

2288
01:16:43,000 --> 01:16:44,000
整个盘给毁掉

2289
01:16:44,000 --> 01:16:46,000
也就意味着你不管玩什么游戏

2290
01:16:46,000 --> 01:16:48,000
你所有存盘文件都不见

2291
01:16:48,000 --> 01:16:49,000
这是很恐怖的一件事

2292
01:16:49,000 --> 01:16:51,000
然后他们的

2293
01:16:53,000 --> 01:16:56,000
随着这个 Deadline 逐步逼近

2294
01:16:56,000 --> 01:16:58,000
他们的程序员非常恐慌

2295
01:16:58,000 --> 01:17:00,000
因为那个时候的 PlayStation 是没有

2296
01:17:00,000 --> 01:17:01,000
PlayStation Network 是什么东西的

2297
01:17:01,000 --> 01:17:03,000
就是你最终压了盘

2298
01:17:03,000 --> 01:17:04,000
然后这个盘出去

2299
01:17:04,000 --> 01:17:05,000
所有人玩如果有 bug

2300
01:17:05,000 --> 01:17:10,000
那是没有办法通过在线升级来解决这个 bug

2301
01:17:10,000 --> 01:17:12,000
然后他们非常恐慌

2302
01:17:12,000 --> 01:17:14,000
然后就开始一点点排出错误

2303
01:17:14,000 --> 01:17:16,000
最后他们把游戏精简到了

2304
01:17:16,000 --> 01:17:18,000
就是几乎什么都不干

2305
01:17:18,000 --> 01:17:22,000
就是唯一的功能就是登录游戏

2306
01:17:23,000 --> 01:17:24,000
然后存盘

2307
01:17:25,000 --> 01:17:26,000
即便在这种情况之下

2308
01:17:26,000 --> 01:17:31,000
还是有一定几率会可能损坏掉记忆卡

2309
01:17:31,000 --> 01:17:32,000
然后他们就疯了

2310
01:17:35,000 --> 01:17:37,000
直到有一天

2311
01:17:38,000 --> 01:17:40,000
他发现一个人

2312
01:17:40,000 --> 01:17:41,000
就是他们的一个美工

2313
01:17:42,000 --> 01:17:43,000
在

2314
01:17:45,000 --> 01:17:46,000
他当时比较生气

2315
01:17:46,000 --> 01:17:48,000
然后他可能训斥了那个美工

2316
01:17:48,000 --> 01:17:50,000
然后那个美工比较 Nervous 的

2317
01:17:50,000 --> 01:17:52,000
去摆弄手柄的时候

2318
01:17:53,000 --> 01:17:54,000
游戏正在存盘

2319
01:17:54,000 --> 01:17:57,000
然后此时记忆卡被 Crop 掉了

2320
01:17:57,000 --> 01:17:58,000
然后他说什么

2321
01:17:58,000 --> 01:18:00,000
你 Do it again

2322
01:18:00,000 --> 01:18:03,000
然后他们发现如果你在存盘的时候

2323
01:18:03,000 --> 01:18:06,000
下意识的或者无意识的摆弄了那个手柄

2324
01:18:07,000 --> 01:18:10,000
你的记忆卡就会被抹除掉

2325
01:18:11,000 --> 01:18:15,000
最后他们发现这个故障是来自于

2326
01:18:17,000 --> 01:18:17,000
怎么说呢

2327
01:18:17,000 --> 01:18:24,000
就是他们的游戏在运行的时候

2328
01:18:24,000 --> 01:18:30,000
会把 PS 主机上面的一个硬件的精震

2329
01:18:30,000 --> 01:18:32,000
设成比较高的一个频率

2330
01:18:33,000 --> 01:18:35,000
然后在这个特定频率之下

2331
01:18:35,000 --> 01:18:39,000
有可能这个精震会干扰到主机上面的

2332
01:18:39,000 --> 01:18:46,000
另外一个和手柄传输波导率相关的一个芯片

2333
01:18:46,000 --> 01:18:49,000
然后使得芯片产生一个特定的 Bug

2334
01:18:49,000 --> 01:18:51,000
然后这个 Bug 会导致记忆卡损毁

2335
01:18:52,000 --> 01:18:56,000
这是看起来非常曲折

2336
01:18:56,000 --> 01:18:58,000
然后让人家捏里挖憾的一个故事

2337
01:18:58,000 --> 01:18:59,000
推荐大家去读一点

2338
01:19:00,000 --> 01:19:03,000
你说我们现代程序

2339
01:19:03,000 --> 01:19:05,000
还要遇到这种级别的 Bug 怎么办

2340
01:19:06,000 --> 01:19:07,000
我觉得真的就

2341
01:19:08,000 --> 01:19:09,000
一头撞死算了

2342
01:19:09,000 --> 01:19:12,000
就好像类似的 Bug

2343
01:19:12,000 --> 01:19:16,000
其实在游戏开发者论坛里面

2344
01:19:17,000 --> 01:19:18,000
也经常可以看到

2345
01:19:18,000 --> 01:19:20,000
比如说曾经有过一个 Bug 是

2346
01:19:24,000 --> 01:19:25,000
在第一个场景里面

2347
01:19:27,000 --> 01:19:34,000
如果你用手柄把相机视角转到角色的身后

2348
01:19:34,000 --> 01:19:36,000
整个游戏就会 Crush

2349
01:19:36,000 --> 01:19:40,000
然后他们顶着 Deadline 的压力

2350
01:19:40,000 --> 01:19:42,000
测试了一个月都没有测出来

2351
01:19:42,000 --> 01:19:43,000
到底是为什么

2352
01:19:43,000 --> 01:19:44,000
最后他们的解决方法就是

2353
01:19:45,000 --> 01:19:46,000
在第一个场景里面

2354
01:19:46,000 --> 01:19:51,000
编程强制说相机只能保持在侧边的角度

2355
01:19:51,000 --> 01:19:53,000
然后一直到跑到安全的地方

2356
01:19:53,000 --> 01:19:56,000
才让用户可以把视角转到背后

2357
01:19:57,000 --> 01:19:58,000
你像这种 Bug

2358
01:19:58,000 --> 01:19:59,000
你没有办法解决的时候

2359
01:19:59,000 --> 01:20:01,000
你都真的只能让开它

2360
01:20:01,000 --> 01:20:02,000
如果你有压力的话

2361
01:20:03,000 --> 01:20:04,000
你之前也不在干了

2362
01:20:04,000 --> 01:20:07,000
你直接进了 Krump iOS 一样的

2363
01:20:09,000 --> 01:20:11,000
这是一些比较 Drama 的 Bug

2364
01:20:11,000 --> 01:20:13,000
但大部分时候我们遇到的 Bug

2365
01:20:13,000 --> 01:20:15,000
其实没有那么复杂

2366
01:20:16,000 --> 01:20:17,000
真的是因为自己蠢了

2367
01:20:17,000 --> 01:20:18,000
不能怪别人

2368
01:20:19,000 --> 01:20:20,000
不能怪社会

2369
01:20:21,000 --> 01:20:21,000
没错

2370
01:20:23,000 --> 01:20:27,000
其实大部分 Bug 都可以通过一些比较

2371
01:20:27,000 --> 01:20:28,000
基本的手段被发现

2372
01:20:29,000 --> 01:20:31,000
其实最基本的一个就是 Readed Code

2373
01:20:31,000 --> 01:20:34,000
就是把你刚刚写下的东西仔细读一遍

2374
01:20:35,000 --> 01:20:38,000
很多时候就已经可以发现 Bug 到底合杂了

2375
01:20:39,000 --> 01:20:39,000
其实不一定

2376
01:20:39,000 --> 01:20:42,000
因为像会形成思维定式

2377
01:20:42,000 --> 01:20:44,000
让你反而一直你反复读

2378
01:20:44,000 --> 01:20:45,000
也看不出问题在哪里

2379
01:20:45,000 --> 01:20:47,000
比较经典就是那个

2380
01:20:49,000 --> 01:20:51,000
像 C,C++这种

2381
01:20:51,000 --> 01:20:55,000
它不是说进是无影响的吗

2382
01:20:55,000 --> 01:20:56,000
对

2383
01:20:56,000 --> 01:20:57,000
你写了一个 if

2384
01:20:57,000 --> 01:20:58,000
忘了打花和号

2385
01:20:58,000 --> 01:21:00,000
让你觉得你缩进了后面一排

2386
01:21:01,000 --> 01:21:02,000
一个 block 代码

2387
01:21:02,000 --> 01:21:03,000
应该说这个应该是这个 if

2388
01:21:03,000 --> 01:21:05,000
这里面结果一看没花花号

2389
01:21:05,000 --> 01:21:07,000
只有地上被指向

2390
01:21:07,000 --> 01:21:08,000
没错

2391
01:21:08,000 --> 01:21:12,000
我其实在研究生当助教的时候

2392
01:21:13,000 --> 01:21:15,000
遇到过一模一样的一个案例

2393
01:21:15,000 --> 01:21:18,000
就是我当时在写那个

2394
01:21:19,000 --> 01:21:20,000
反正写我项目

2395
01:21:20,000 --> 01:21:23,000
然后我写不写的项目的地方是

2396
01:21:23,000 --> 01:21:25,000
学校一个技能计实验室

2397
01:21:25,000 --> 01:21:27,000
然后有两个德国小孩在那

2398
01:21:28,000 --> 01:21:28,000
不是小孩

2399
01:21:28,000 --> 01:21:31,000
就两个德国本科生在那边写程序

2400
01:21:31,000 --> 01:21:32,000
别人都走了

2401
01:21:32,000 --> 01:21:34,000
他们两个还坐在那搞

2402
01:21:34,000 --> 01:21:36,000
然后最后他们终于忍不住了

2403
01:21:36,000 --> 01:21:38,000
问我说你能过来看一看

2404
01:21:38,000 --> 01:21:40,000
我们程序到底什么问题吗

2405
01:21:40,000 --> 01:21:41,000
然后看了一下

2406
01:21:41,000 --> 01:21:44,000
看了大概三分钟就说

2407
01:21:44,000 --> 01:21:45,000
这里缺一个花花号

2408
01:21:45,000 --> 01:21:48,000
然后他们两个疯了说

2409
01:21:48,000 --> 01:21:50,000
我们在这坐了四个小时

2410
01:21:50,000 --> 01:21:51,000
就是因为这个花花号

2411
01:21:51,000 --> 01:21:57,000
所以遇到这种情况

2412
01:21:57,000 --> 01:21:57,000
就是说

2413
01:21:58,000 --> 01:22:00,000
先不说缩进敏感

2414
01:22:00,000 --> 01:22:01,000
是不是一件好事

2415
01:22:02,000 --> 01:22:03,000
至少像勾语言

2416
01:22:03,000 --> 01:22:05,000
它不是有个自带勾 format

2417
01:22:05,000 --> 01:22:06,000
那工具吗

2418
01:22:06,000 --> 01:22:07,000
可以帮你说

2419
01:22:07,000 --> 01:22:10,000
就是把代码重排成一个标准样式

2420
01:22:10,000 --> 01:22:12,000
但可以一眼看出这种比较愚蠢

2421
01:22:12,000 --> 01:22:13,000
低级的错误

2422
01:22:13,000 --> 01:22:15,000
就上次你知道

2423
01:22:15,000 --> 01:22:17,000
那个 heart bleed

2424
01:22:17,000 --> 01:22:20,000
就是 OpenSSL 大 bug 出现了

2425
01:22:20,000 --> 01:22:22,000
其实也是因为类似的原因

2426
01:22:22,000 --> 01:22:22,000
还有个什么

2427
01:22:22,000 --> 01:22:23,000
好像是一个 double return

2428
01:22:23,000 --> 01:22:24,000
好像是

2429
01:22:26,000 --> 01:22:27,000
然后没有看到

2430
01:22:27,000 --> 01:22:28,000
就发现那个检查

2431
01:22:28,000 --> 01:22:29,000
都根本就没有

2432
01:22:29,000 --> 01:22:31,000
从来这么多年过去了

2433
01:22:31,000 --> 01:22:32,000
从来没有执行过

2434
01:22:32,000 --> 01:22:33,000
那个安全性的检查

2435
01:22:33,000 --> 01:22:34,000
白搞了

2436
01:22:34,000 --> 01:22:36,000
其实也是可以

2437
01:22:36,000 --> 01:22:39,000
就是如果你自己看那个代码的

2438
01:22:40,000 --> 01:22:41,000
原始的形状

2439
01:22:41,000 --> 01:22:43,000
你不仔细去想

2440
01:22:43,000 --> 01:22:44,000
就我不告诉你

2441
01:22:44,000 --> 01:22:45,000
这里有个明显的问题的话

2442
01:22:45,000 --> 01:22:46,000
你怎么又想不到

2443
01:22:46,000 --> 01:22:47,000
那里会有这么一个状况

2444
01:22:47,000 --> 01:22:47,000
对不对

2445
01:22:48,000 --> 01:22:50,000
这个代码在公开

2446
01:22:51,000 --> 01:22:51,000
它是开源的

2447
01:22:52,000 --> 01:22:53,000
光天化日存在了那么多年

2448
01:22:53,000 --> 01:22:54,000
都没有人发现

2449
01:22:54,000 --> 01:22:55,000
所以我觉得

2450
01:22:55,000 --> 01:22:57,000
REDCODE 是最低效率的

2451
01:22:57,000 --> 01:22:58,000
储存的手段

2452
01:22:59,000 --> 01:23:02,000
但是我觉得这个点可能是说

2453
01:23:02,000 --> 01:23:06,000
如果你有一个比较好的

2454
01:23:06,000 --> 01:23:07,000
协议小段

2455
01:23:07,000 --> 01:23:09,000
就回去 review 一下的习惯的话

2456
01:23:09,000 --> 01:23:13,000
其实是对于杜绝这样的 bug 出现

2457
01:23:13,000 --> 01:23:14,000
是比较有意义的

2458
01:23:15,000 --> 01:23:16,000
但是不是每个人都有这个习惯

2459
01:23:17,000 --> 01:23:20,000
可能这就是为什么一些比较好的

2460
01:23:20,000 --> 01:23:24,000
IDE 会动用静态分析器

2461
01:23:24,000 --> 01:23:26,000
或者 Static Analyzer 这种东西来

2462
01:23:26,000 --> 01:23:27,000
就是说在某种意义上

2463
01:23:27,000 --> 01:23:30,000
是它帮你读你刚刚写下的代码

2464
01:23:31,000 --> 01:23:35,000
就判断一些模式或者行为之类的

2465
01:23:35,000 --> 01:23:36,000
没错

2466
01:23:38,000 --> 01:23:39,000
把那些基本的问题解决

2467
01:23:40,000 --> 01:23:41,000
大家喜欢 IDE 的原因之一

2468
01:23:41,000 --> 01:23:45,000
也就是它会除了语法高粱之外

2469
01:23:45,000 --> 01:23:45,000
会告诉你说

2470
01:23:45,000 --> 01:23:48,000
这个地方看起来好像是不对的

2471
01:23:51,000 --> 01:23:54,000
比如说 Xcode 的 Playground

2472
01:23:54,000 --> 01:23:57,000
其实就是在不停的静态分析你的代码

2473
01:23:57,000 --> 01:23:58,000
然后甚至动态的运行

2474
01:23:58,000 --> 01:24:02,000
然后可以帮你及时发现自己写的代码

2475
01:24:02,000 --> 01:24:05,000
然后我们说这个

2476
01:24:05,000 --> 01:24:07,000
其实蛮常用的一个

2477
01:24:08,000 --> 01:24:10,000
储存的手段就是

2478
01:24:10,000 --> 01:24:11,000
打印储存法

2479
01:24:13,000 --> 01:24:13,000
对

2480
01:24:14,000 --> 01:24:15,000
The good old printf

2481
01:24:17,000 --> 01:24:21,000
printf 是一个系统标准函数

2482
01:24:21,000 --> 01:24:22,000
C 面标准函数

2483
01:24:22,000 --> 01:24:23,000
打一个字符串对吧

2484
01:24:24,000 --> 01:24:25,000
一般做法怎么样子

2485
01:24:25,000 --> 01:24:27,000
就是你在

2486
01:24:27,000 --> 01:24:31,000
你觉得可能会出问题的区间

2487
01:24:31,000 --> 01:24:33,000
打印一个

2488
01:24:33,000 --> 01:24:36,000
你认为它应该是某一个数值

2489
01:24:36,000 --> 01:24:38,000
或者是一个变量

2490
01:24:38,000 --> 01:24:39,000
然后看它是不是

2491
01:24:40,000 --> 01:24:43,000
在那个时候确实是如你所到的数字

2492
01:24:43,000 --> 01:24:45,000
然后你可以一次插多个打印点

2493
01:24:45,000 --> 01:24:48,000
或者是打印多个变量

2494
01:24:48,000 --> 01:24:50,000
或者是什么结构体之类的

2495
01:24:50,000 --> 01:24:52,000
然后看是否如你预期

2496
01:24:52,000 --> 01:24:54,000
其实刚刚忘了说了

2497
01:24:54,000 --> 01:24:56,000
整个过程就是说

2498
01:24:56,000 --> 01:24:57,000
你形成一个假设

2499
01:24:57,000 --> 01:24:59,000
假设代码在这里出了问题

2500
01:24:59,000 --> 01:25:00,000
然后你验证那个假设是否成立

2501
01:25:00,000 --> 01:25:02,000
然后逐一排查的过程

2502
01:25:02,000 --> 01:25:04,000
然后打印储存法

2503
01:25:04,000 --> 01:25:07,000
就是做了一个最原始的方法

2504
01:25:07,000 --> 01:25:08,000
就是这么一个过程

2505
01:25:09,000 --> 01:25:09,000
对

2506
01:25:10,000 --> 01:25:12,000
打印储存法第一步是测试

2507
01:25:12,000 --> 01:25:13,000
打印储存法

2508
01:25:13,000 --> 01:25:15,000
我是一个打印储存法的大师

2509
01:25:17,000 --> 01:25:19,000
打印储存法的第一层境界是

2510
01:25:20,000 --> 01:25:24,000
检测代码分支会不会被运行到

2511
01:25:24,000 --> 01:25:27,000
比如说我经常会在 JavaScript 里面

2512
01:25:27,000 --> 01:25:28,000
写 Consul Log 1

2513
01:25:28,000 --> 01:25:30,000
然后下面一个分支写 Consul Log 2

2514
01:25:30,000 --> 01:25:32,000
然后再下面一个 Consul Log 3

2515
01:25:32,000 --> 01:25:33,000
然后运行

2516
01:25:33,000 --> 01:25:35,000
然后去 Consul 里面看说

2517
01:25:35,000 --> 01:25:36,000
123 是不是都打出来

2518
01:25:36,000 --> 01:25:37,000
如果没打出来

2519
01:25:37,000 --> 01:25:39,000
这段代码根本就没有运行

2520
01:25:39,000 --> 01:25:40,000
就是最基本的叫做

2521
01:25:40,000 --> 01:25:42,000
怎么 Control Flow

2522
01:25:42,000 --> 01:25:43,000
控制流的检验

2523
01:25:43,000 --> 01:25:43,000
对

2524
01:25:43,000 --> 01:25:44,000
Retro Ability

2525
01:25:45,000 --> 01:25:47,000
然后第二层境界才是

2526
01:25:47,000 --> 01:25:49,000
打印一个代码的值

2527
01:25:49,000 --> 01:25:51,000
打印一个变量的值

2528
01:25:51,000 --> 01:25:54,000
写 PHP 或者什么 WireDump 值

2529
01:25:54,000 --> 01:25:56,000
数值储存法的

2530
01:25:56,000 --> 01:25:57,000
打印数值储存法

2531
01:25:58,000 --> 01:25:59,000
对 没错

2532
01:25:59,000 --> 01:26:02,000
然后第三层境界可能就是

2533
01:26:02,000 --> 01:26:03,000
在 printf 的时候

2534
01:26:03,000 --> 01:26:05,000
第三层境界就是

2535
01:26:05,000 --> 01:26:06,000
代 Debug 的 printf

2536
01:26:06,000 --> 01:26:09,000
就是在代码里面

2537
01:26:09,000 --> 01:26:11,000
定一个红 Debug

2538
01:26:11,000 --> 01:26:13,000
IfDebug then printf

2539
01:26:13,000 --> 01:26:14,000
然后这个东西

2540
01:26:14,000 --> 01:26:17,000
printf 就此成为了

2541
01:26:17,000 --> 01:26:18,000
最终代码的一部分

2542
01:26:20,000 --> 01:26:22,000
你知道打印储存法的

2543
01:26:22,000 --> 01:26:24,000
抓狂状态是怎么样的吗

2544
01:26:24,000 --> 01:26:25,000
就是 printf 扩号开

2545
01:26:26,000 --> 01:26:27,000
引号开

2546
01:26:27,000 --> 01:26:28,000
What the fuck

2547
01:26:28,000 --> 01:26:30,000
Why did this run here

2548
01:26:32,000 --> 01:26:33,000
然后问号

2549
01:26:33,000 --> 01:26:34,000
五个感染号

2550
01:26:34,000 --> 01:26:37,000
然后关引号关扩号

2551
01:26:38,000 --> 01:26:39,000
还忘了个分号打上去

2552
01:26:40,000 --> 01:26:43,000
比如说早期 Windows NT

2553
01:26:43,000 --> 01:26:44,000
还是 95 的原代码爆出来之后

2554
01:26:44,000 --> 01:26:47,000
发现里面有很多的 printf 的段落

2555
01:26:47,000 --> 01:26:49,000
都是在诅咒编译器

2556
01:26:49,000 --> 01:26:50,000
说傻逼编译器

2557
01:26:50,000 --> 01:26:51,000
这又弄错了

2558
01:26:51,000 --> 01:26:53,000
需要我受控来做什么

2559
01:26:54,000 --> 01:26:56,000
但其实打印储存法的

2560
01:26:56,000 --> 01:26:58,000
最麻烦的一点就是

2561
01:26:58,000 --> 01:26:59,000
它需要你重新

2562
01:27:00,000 --> 01:27:01,000
如果是静态语言

2563
01:27:02,000 --> 01:27:03,000
它需要你重新编译一遍

2564
01:27:04,000 --> 01:27:05,000
编译重新

2565
01:27:06,000 --> 01:27:07,000
你插入一个

2566
01:27:07,000 --> 01:27:08,000
打印语句之后

2567
01:27:08,000 --> 01:27:09,000
你得保存

2568
01:27:10,000 --> 01:27:11,000
然后编译

2569
01:27:11,000 --> 01:27:12,000
然后再执行

2570
01:27:12,000 --> 01:27:13,000
就每次要重新跑一遍

2571
01:27:13,000 --> 01:27:14,000
就比较

2572
01:27:14,000 --> 01:27:18,000
如果你工程项目比较大

2573
01:27:18,000 --> 01:27:20,000
然后编译时间比较长的话

2574
01:27:20,000 --> 01:27:21,000
你就哭死吧

2575
01:27:22,000 --> 01:27:22,000
没错

2576
01:27:23,000 --> 01:27:25,000
其实刚才说的三层境界

2577
01:27:25,000 --> 01:27:27,000
都是非常不推荐的

2578
01:27:27,000 --> 01:27:28,000
尤其是第三层境界

2579
01:27:30,000 --> 01:27:33,000
如果你真的需要检测 printf

2580
01:27:33,000 --> 01:27:34,000
或者是检测一个程序的输出

2581
01:27:34,000 --> 01:27:36,000
来验证它是否有证据的话

2582
01:27:38,000 --> 01:27:39,000
比较

2583
01:27:40,000 --> 01:27:41,000
methodology 的方法是

2584
01:27:42,000 --> 01:27:45,000
用一个比如说 log 4 j 这样的库

2585
01:27:45,000 --> 01:27:49,000
来输出比较正统的

2586
01:27:51,000 --> 01:27:51,000
记录资料

2587
01:27:52,000 --> 01:27:53,000
然后你可以

2588
01:27:53,000 --> 01:27:55,000
使用一些相关来说

2589
01:27:55,000 --> 01:27:56,000
比较高端的功能

2590
01:27:56,000 --> 01:27:59,000
比如说区分 log 的等级

2591
01:27:59,000 --> 01:28:01,000
是 warning 是 info 还是 debug

2592
01:28:01,000 --> 01:28:04,000
还是 error

2593
01:28:04,000 --> 01:28:06,000
然后可以记录下时间

2594
01:28:06,000 --> 01:28:08,000
然后可以有选择性的记录

2595
01:28:08,000 --> 01:28:09,000
比如说

2596
01:28:11,000 --> 01:28:13,000
当时的站立的情况

2597
01:28:13,000 --> 01:28:15,000
或者是堆的情况

2598
01:28:15,000 --> 01:28:17,000
或者是乃至于一个变量的值

2599
01:28:17,000 --> 01:28:21,000
可千万不要简单那种 ifdebug

2600
01:28:21,000 --> 01:28:23,000
然后 printf 这种比较愚蠢的方式

2601
01:28:29,000 --> 01:28:32,000
所以比较高级的方式是什么

2602
01:28:34,000 --> 01:28:37,000
我们可以一项一项来总结

2603
01:28:38,000 --> 01:28:39,000
最简单的就是

2604
01:28:40,000 --> 01:28:45,000
最具有早期黑客精神的

2605
01:28:45,000 --> 01:28:47,000
除错工具就是

2606
01:28:49,000 --> 01:28:50,000
其实叫 db

2607
01:28:51,000 --> 01:28:52,000
debug

2608
01:28:52,000 --> 01:28:53,000
db 这么一个小工具

2609
01:28:55,000 --> 01:29:00,000
有点类似于 dots 时代的 debug.com

2610
01:29:01,000 --> 01:29:03,000
还是 debug.com

2611
01:29:04,000 --> 01:29:06,000
debug.exe 程序

2612
01:29:07,000 --> 01:29:09,000
早期 dots 下面有一个

2613
01:29:09,000 --> 01:29:11,000
可以让你直接输入汇编来写程序

2614
01:29:11,000 --> 01:29:13,000
乃至于调试其他程序的小程序

2615
01:29:13,000 --> 01:29:14,000
叫 debug.com

2616
01:29:15,000 --> 01:29:17,000
我不知道你有没有印象

2617
01:29:17,000 --> 01:29:18,000
你没有用过

2618
01:29:20,000 --> 01:29:23,000
dots 上面真的没有什么编程的经历

2619
01:29:25,000 --> 01:29:28,000
比这个 debug.com 的笔组

2620
01:29:28,000 --> 01:29:31,000
其实就是早期 unix 下面的一个工具

2621
01:29:31,000 --> 01:29:32,000
工具叫做 db

2622
01:29:32,000 --> 01:29:34,000
也就是 debug 的缩节

2623
01:29:34,000 --> 01:29:37,000
后来 GNU 出了一个 GNUDB

2624
01:29:37,000 --> 01:29:40,000
也就是现在最广为使用的 GDB

2625
01:29:41,000 --> 01:29:44,000
GDB 简单来说就是这么一个程序

2626
01:29:44,000 --> 01:29:47,000
你可以让这个程序替你运行你的程序

2627
01:29:47,000 --> 01:29:48,000
然后

2628
01:29:49,000 --> 01:29:50,000
这个程序在运行的时候

2629
01:29:50,000 --> 01:29:52,000
一上来会暂停

2630
01:29:52,000 --> 01:29:55,000
或者说根据你调用它的方式不同

2631
01:29:56,000 --> 01:29:58,000
你可以让它一上来就暂停

2632
01:29:58,000 --> 01:29:59,000
然后告诉它说

2633
01:29:59,000 --> 01:30:02,000
这个程序运行到某一个特定行的时候

2634
01:30:02,000 --> 01:30:02,000
请你停下来

2635
01:30:03,000 --> 01:30:05,000
然后我要看一看这个程序现在的状况是什么样

2636
01:30:07,000 --> 01:30:10,000
然后 GDB 也是在命令行下运行

2637
01:30:10,000 --> 01:30:12,000
运行的方法就是

2638
01:30:12,000 --> 01:30:14,000
你先写 GDB

2639
01:30:14,000 --> 01:30:15,000
然后后面跟你

2640
01:30:15,000 --> 01:30:17,000
比如说你刚刚编译好的一个 C 程序

2641
01:30:17,000 --> 01:30:20,000
然后 C 程序的原版和 C 程序的那个

2642
01:30:20,000 --> 01:30:22,000
中间的调试信息也全都在

2643
01:30:22,000 --> 01:30:24,000
存在当前目录之下

2644
01:30:24,000 --> 01:30:26,000
然后你用 GDB 调用你

2645
01:30:27,000 --> 01:30:27,000
写好程序

2646
01:30:27,000 --> 01:30:29,000
然后告诉 GDB 你要在哪断点

2647
01:30:29,000 --> 01:30:30,000
然后在哪调试

2648
01:30:31,000 --> 01:30:32,000
所有的指令都是通过键盘输入的

2649
01:30:32,000 --> 01:30:34,000
然后你比如说你停

2650
01:30:34,000 --> 01:30:36,000
你要设断点

2651
01:30:36,000 --> 01:30:37,000
你要说 break

2652
01:30:37,000 --> 01:30:40,000
at line 31 比如说

2653
01:30:40,000 --> 01:30:41,000
然后为了简化

2654
01:30:41,000 --> 01:30:44,000
你可以把整个没有意义的

2655
01:30:45,000 --> 01:30:47,000
没有奇异的指令

2656
01:30:47,000 --> 01:30:48,000
简化为一个字母

2657
01:30:48,000 --> 01:30:49,000
比如说 B 31

2658
01:30:49,000 --> 01:30:51,000
就是说在 31 这个地方放一段

2659
01:30:51,000 --> 01:30:53,000
然后它运行到 31 的时候

2660
01:30:53,000 --> 01:30:55,000
会告诉你说 31 有了什么

2661
01:30:55,000 --> 01:30:57,000
我已经运行了 31 了

2662
01:30:57,000 --> 01:30:57,000
接下来要干什么

2663
01:30:57,000 --> 01:30:58,000
比如说你可以说

2664
01:31:01,000 --> 01:31:03,000
打印出某一个计算器的纸

2665
01:31:04,000 --> 01:31:06,000
整个过程有点像玩骂

2666
01:31:08,000 --> 01:31:09,000
我应该反过来说

2667
01:31:09,000 --> 01:31:11,000
玩骂的过程就有点像

2668
01:31:12,000 --> 01:31:15,000
使用一个命令行的这种编辑

2669
01:31:15,000 --> 01:31:17,000
你输入一个指令

2670
01:31:17,000 --> 01:31:18,000
可以看到你周围有什么

2671
01:31:18,000 --> 01:31:19,000
然后你再输入一个指令

2672
01:31:19,000 --> 01:31:20,000
可以决定说你要做什么

2673
01:31:22,000 --> 01:31:23,000
所以我觉得用这个方法

2674
01:31:23,000 --> 01:31:26,000
比什么打印储存法最大

2675
01:31:26,000 --> 01:31:27,000
最大的优点就在于

2676
01:31:27,000 --> 01:31:29,000
它不用每次去重新编译

2677
01:31:29,000 --> 01:31:32,000
对你的程序去加一个打印

2678
01:31:32,000 --> 01:31:33,000
去然后又重新编译

2679
01:31:33,000 --> 01:31:35,000
跑一段进度出错的

2680
01:31:36,000 --> 01:31:37,000
环节 section

2681
01:31:38,000 --> 01:31:39,000
再判断

2682
01:31:39,000 --> 01:31:40,000
它这个是可以在

2683
01:31:41,000 --> 01:31:42,000
等于是在程序运行过程中

2684
01:31:42,000 --> 01:31:43,000
动态的去查看

2685
01:31:44,000 --> 01:31:44,000
它运行的环境

2686
01:31:44,000 --> 01:31:46,000
然后是否符合你的假设

2687
01:31:46,000 --> 01:31:47,000
对吧

2688
01:31:47,000 --> 01:31:48,000
没错

2689
01:31:48,000 --> 01:31:50,000
所以有了这样的工具

2690
01:31:50,000 --> 01:31:51,000
我们就实现了一个

2691
01:31:51,000 --> 01:31:54,000
非常重要的软件开发的原则

2692
01:31:54,000 --> 01:31:55,000
Separation of Consumption

2693
01:31:56,000 --> 01:31:57,000
你写下来的代码

2694
01:31:57,000 --> 01:32:00,000
应该只是用于实现你真正想要

2695
01:32:00,000 --> 01:32:02,000
实现的那些东西的

2696
01:32:02,000 --> 01:32:04,000
而不是其中有部分的功能

2697
01:32:04,000 --> 01:32:06,000
是用来让你

2698
01:32:06,000 --> 01:32:07,000
检测这个程序

2699
01:32:07,000 --> 01:32:08,000
是不是在正确运行

2700
01:32:10,000 --> 01:32:13,000
这就是一个调试工具的意义

2701
01:32:13,000 --> 01:32:17,000
然后 GDP 其实直到今天都还有人用

2702
01:32:17,000 --> 01:32:19,000
而且在其他所有的语言里面

2703
01:32:19,000 --> 01:32:21,000
几乎几乎所有语言

2704
01:32:21,000 --> 01:32:21,000
这样有没有

2705
01:32:22,000 --> 01:32:24,000
在语言里面都有这么一个

2706
01:32:24,000 --> 01:32:26,000
命令行下面调试的工具

2707
01:32:26,000 --> 01:32:30,000
比如说 Python DB 叫做 PDB

2708
01:32:30,000 --> 01:32:31,000
然后还有

2709
01:32:33,000 --> 01:32:35,000
IPython 也有这么一个专门

2710
01:32:35,000 --> 01:32:38,000
让人用来做交互式的命令行下的

2711
01:32:38,000 --> 01:32:42,000
Debug 工作的一个酷叫做 IPDB

2712
01:32:42,000 --> 01:32:43,000
这些都是相当好的工具

2713
01:32:45,000 --> 01:32:45,000
Real 你用过吗

2714
01:32:46,000 --> 01:32:49,000
你写 Python 会用 Debug

2715
01:32:50,000 --> 01:32:51,000
偶尔用那个

2716
01:32:51,000 --> 01:32:53,000
只有 20%的时间里面

2717
01:32:54,000 --> 01:32:55,000
对偶尔会用 PDP

2718
01:32:55,000 --> 01:32:57,000
但你觉得它好用吗

2719
01:32:59,000 --> 01:33:00,000
看情况

2720
01:33:00,000 --> 01:33:01,000
它有些情况是用不了的

2721
01:33:01,000 --> 01:33:03,000
我印象中就是

2722
01:33:03,000 --> 01:33:05,000
它得插入一个

2723
01:33:06,000 --> 01:33:07,000
PDB 它在启动的时候

2724
01:33:07,000 --> 01:33:10,000
它在某一个地方插入一个断点

2725
01:33:10,000 --> 01:33:10,000
引入 PDB

2726
01:33:10,000 --> 01:33:14,000
然后进入 PDB 环境那个点

2727
01:33:15,000 --> 01:33:17,000
完了之后你就回到正常运行了

2728
01:33:17,000 --> 01:33:20,000
然后你要如何就不能比较灵活的

2729
01:33:20,000 --> 01:33:22,000
换到其他的断点里面

2730
01:33:22,000 --> 01:33:23,000
去检测另外一堆的状态

2731
01:33:26,000 --> 01:33:28,000
我觉得其实对我来说

2732
01:33:29,000 --> 01:33:30,000
命令行调试工具

2733
01:33:30,000 --> 01:33:32,000
包括不管是 PDB 也好 GDB 也好

2734
01:33:34,000 --> 01:33:35,000
最大的问题是

2735
01:33:36,000 --> 01:33:37,000
都太难记了

2736
01:33:37,000 --> 01:33:38,000
因为

2737
01:33:39,000 --> 01:33:39,000
太什么

2738
01:33:40,000 --> 01:33:41,000
太难记

2739
01:33:41,000 --> 01:33:43,000
就是所有的指令都太难记住了

2740
01:33:43,000 --> 01:33:45,000
而且每次用的时候都要

2741
01:33:45,000 --> 01:33:47,000
打开一个 Manual 在那边查

2742
01:33:47,000 --> 01:33:48,000
说接下来我要干嘛

2743
01:33:48,000 --> 01:33:50,000
显然是因为你用的还不够多

2744
01:33:51,000 --> 01:33:53,000
我可能跟你差不多

2745
01:33:53,000 --> 01:33:55,000
最多有 20%的时间在 Debug

2746
01:33:55,000 --> 01:33:56,000
然后在 Debug 的时候

2747
01:33:58,000 --> 01:34:00,000
可能大学的时候稍微好一点

2748
01:34:00,000 --> 01:34:02,000
大学的时候还能记住一部分指令

2749
01:34:02,000 --> 01:34:04,000
但是到现在真是

2750
01:34:05,000 --> 01:34:07,000
尤其是在用一门

2751
01:34:07,000 --> 01:34:09,000
已经很长时间没有用过语言的时候

2752
01:34:09,000 --> 01:34:12,000
然后要去用一个命令行向的 Debug

2753
01:34:12,000 --> 01:34:14,000
真的是要我亲命

2754
01:34:15,000 --> 01:34:17,000
所以这个时候你知道你需要什么吗

2755
01:34:19,000 --> 01:34:20,000
这个时候你需要 cheat sheet

2756
01:34:21,000 --> 01:34:22,000
OK

2757
01:34:23,000 --> 01:34:24,000
作弊纸

2758
01:34:24,000 --> 01:34:27,000
你得打一张那个常用快捷键的东西

2759
01:34:27,000 --> 01:34:28,000
贴墙上

2760
01:34:28,000 --> 01:34:31,000
不贴那个屏幕周围

2761
01:34:31,000 --> 01:34:32,000
能够一眼看得见

2762
01:34:32,000 --> 01:34:34,000
什么时候该按哪个指令

2763
01:34:35,000 --> 01:34:37,000
我以前其实桌子上专门有一个文件盒

2764
01:34:37,000 --> 01:34:40,000
是专门拿来放各种 cheat sheet

2765
01:34:40,000 --> 01:34:42,000
什么 SQL cheat sheet

2766
01:34:43,000 --> 01:34:45,000
Regular expression cheat sheet

2767
01:34:45,000 --> 01:34:46,000
Win cheat sheet

2768
01:34:47,000 --> 01:34:48,000
然后还有

2769
01:34:48,000 --> 01:34:48,000
对

2770
01:34:48,000 --> 01:34:50,000
各种各样 ID 的 cheat sheet

2771
01:34:51,000 --> 01:34:53,000
现在这所有这些纸应该都已经发黄了吧

2772
01:34:54,000 --> 01:34:56,000
效果并不是非常理想

2773
01:34:56,000 --> 01:34:57,000
对

2774
01:34:58,000 --> 01:34:59,000
我是有一个

2775
01:35:00,000 --> 01:35:01,000
在桌面的一个快捷方式

2776
01:35:01,000 --> 01:35:03,000
一个文件夹叫 cheat sheet

2777
01:35:03,000 --> 01:35:04,000
然后里面各种各样的

2778
01:35:04,000 --> 01:35:05,000
常用的一些

2779
01:35:06,000 --> 01:35:08,000
工具的一些 cheat sheet

2780
01:35:08,000 --> 01:35:10,000
包括什么编辑器的快捷键

2781
01:35:10,000 --> 01:35:13,000
GDP 这个什么 Status Code

2782
01:35:13,000 --> 01:35:15,000
这个文件夹我一直都有

2783
01:35:17,000 --> 01:35:18,000
而且这个文件夹被我

2784
01:35:19,000 --> 01:35:22,000
这个文件夹被我命名为 Flight Manual

2785
01:35:24,000 --> 01:35:25,000
飞行手册

2786
01:35:28,000 --> 01:35:30,000
这个不错

2787
01:35:31,000 --> 01:35:31,000
对

2788
01:35:31,000 --> 01:35:33,000
但是怎么说呢

2789
01:35:34,000 --> 01:35:35,000
并没有什么乱

2790
01:35:38,000 --> 01:35:39,000
最终我还是转向了

2791
01:35:39,000 --> 01:35:40,000
至少在 Debug 这件事情上

2792
01:35:41,000 --> 01:35:44,000
我还是转向了图形界面的 Debug

2793
01:35:45,000 --> 01:35:46,000
OK

2794
01:35:46,000 --> 01:35:49,000
然后有什么高级的介绍一下

2795
01:35:49,000 --> 01:35:50,000
也不算高级吧

2796
01:35:50,000 --> 01:35:51,000
就是至少

2797
01:35:51,000 --> 01:35:52,000
比如说我们刚才介绍到这个

2798
01:35:52,000 --> 01:35:53,000
笔组级的 GDP

2799
01:35:53,000 --> 01:35:55,000
其实它有一个

2800
01:35:56,000 --> 01:35:58,000
图形化界面叫做 DDD

2801
01:36:00,000 --> 01:36:00,000
DDD

2802
01:36:00,000 --> 01:36:01,000
对

2803
01:36:01,000 --> 01:36:06,000
是一个 X 1 Node 的 GDP 的前端

2804
01:36:07,000 --> 01:36:09,000
然后

2805
01:36:10,000 --> 01:36:11,000
我上次用 DDD

2806
01:36:11,000 --> 01:36:14,000
DDD 可能也是在上一读研究生的时候

2807
01:36:14,000 --> 01:36:16,000
因为研究生毕业就再也没有写过 C 上去

2808
01:36:17,000 --> 01:36:19,000
当时觉得 DDD 最大的一个卖点

2809
01:36:19,000 --> 01:36:23,000
就是它可以把一些比较常用的数据结构

2810
01:36:24,000 --> 01:36:25,000
用图形化的方式表现出来

2811
01:36:25,000 --> 01:36:27,000
比如说你写了一个单向链表

2812
01:36:29,000 --> 01:36:30,000
它分析了之后

2813
01:36:30,000 --> 01:36:31,000
可以把你的链表

2814
01:36:31,000 --> 01:36:33,000
用一个一个的方框画出来

2815
01:36:34,000 --> 01:36:35,000
然后告诉你说

2816
01:36:35,000 --> 01:36:38,000
这个链表的指针指向了那一个

2817
01:36:39,000 --> 01:36:41,000
这个链表上的节点的指针

2818
01:36:41,000 --> 01:36:42,000
指向了另外一个节点

2819
01:36:42,000 --> 01:36:43,000
然后注入思维

2820
01:36:44,000 --> 01:36:46,000
当然大部分时候它还是被拿来用

2821
01:36:48,000 --> 01:36:50,000
做 Dbug

2822
01:36:50,000 --> 01:36:53,000
至少 DDD 上面你可以用鼠标点

2823
01:36:53,000 --> 01:36:56,000
你说我想在这一行设一个段点

2824
01:36:56,000 --> 01:36:56,000
你点那一行

2825
01:36:56,000 --> 01:36:58,000
然后点一下设的设断点就可以了

2826
01:36:59,000 --> 01:37:02,000
终于可以不用去记那些单个指令的这些

2827
01:37:02,000 --> 01:37:04,000
Dbug 命令

2828
01:37:05,000 --> 01:37:06,000
这是 DDD 最大的一个卖点

2829
01:37:07,000 --> 01:37:09,000
所以其实你看到这些情况下

2830
01:37:09,000 --> 01:37:13,000
就用的没有像编辑器那么勤快的功能

2831
01:37:14,000 --> 01:37:16,000
有一个图形的方式去

2832
01:37:16,000 --> 01:37:18,000
让你不用记住快捷键还是挺好的

2833
01:37:19,000 --> 01:37:22,000
对我觉得其实一个独立的

2834
01:37:22,000 --> 01:37:26,000
有图形界面的 Dbug 配合一个专一的

2835
01:37:27,000 --> 01:37:31,000
用来写程序的编辑器是一个挺好的组合

2836
01:37:32,000 --> 01:37:37,000
就 Linux 的哲学之一不都是

2837
01:37:38,000 --> 01:37:39,000
做一件事情

2838
01:37:39,000 --> 01:37:41,000
把这件事情做好了

2839
01:37:41,000 --> 01:37:44,000
我用一个编辑器专门来写程序

2840
01:37:44,000 --> 01:37:47,000
然后用另外一个 Dbug 专门来 Dbug 其实也挺好

2841
01:37:49,000 --> 01:37:52,000
包括很多人会说

2842
01:37:52,000 --> 01:37:55,000
我想要把我的 Wim 打造成一个 ID

2843
01:37:55,000 --> 01:37:59,000
但这其实在某种程度上就背离了 Wim

2844
01:37:59,000 --> 01:38:01,000
当初被开发出来的一个应用场景

2845
01:38:02,000 --> 01:38:05,000
你不如就好好地把它当做

2846
01:38:06,000 --> 01:38:07,000
编辑器来用

2847
01:38:07,000 --> 01:38:09,000
然后等你真正需要去调试的时候

2848
01:38:09,000 --> 01:38:11,000
你跳到另外一个图形里面去调试就好了

2849
01:38:11,000 --> 01:38:15,000
因为在 Wim 里面你跟命令行的距离

2850
01:38:15,000 --> 01:38:17,000
其实就只有一个 Ctrl 加 Z 而已

2851
01:38:17,000 --> 01:38:17,000
不是吗

2852
01:38:19,000 --> 01:38:19,000
对

2853
01:38:20,000 --> 01:38:24,000
说到 Wim 我最近做了一个比较疯狂的事情

2854
01:38:25,000 --> 01:38:25,000
说来听听

2855
01:38:26,000 --> 01:38:28,000
我已经系好安全带了说来听听

2856
01:38:29,000 --> 01:38:34,000
我把那个就之前不是很多就是代码颜色高亮吗

2857
01:38:36,000 --> 01:38:38,000
我把它调到最基本的模式了

2858
01:38:38,000 --> 01:38:44,000
就只会标出注视用的鞋帖

2859
01:38:44,000 --> 01:38:47,000
然后那个叫字符串

2860
01:38:47,000 --> 01:38:51,000
用的是一个另外的颜色

2861
01:38:51,000 --> 01:38:51,000
对

2862
01:38:52,000 --> 01:38:54,000
然后其他的那些高亮的颜色都关掉了

2863
01:38:55,000 --> 01:38:56,000
哈靠呀

2864
01:38:58,000 --> 01:39:03,000
Wim 里面是不是有一个默认的 Sim 叫做 Green

2865
01:39:04,000 --> 01:39:05,000
还是叫 Green

2866
01:39:05,000 --> 01:39:10,000
就是它用不同灰度的绿色来显示关键字

2867
01:39:11,000 --> 01:39:14,000
我想问一个 Wim 默认的主题叫什么

2868
01:39:14,000 --> 01:39:15,000
就叫 Default 吗

2869
01:39:16,000 --> 01:39:17,000
对就叫 Default

2870
01:39:18,000 --> 01:39:18,000
OK

2871
01:39:20,000 --> 01:39:24,000
我记得早期学到的比较重要的一个 Trick

2872
01:39:24,000 --> 01:39:28,000
就是在某些情况下

2873
01:39:28,000 --> 01:39:32,000
你可能 SSH 到另外一台主机上面的时候

2874
01:39:32,000 --> 01:39:37,000
发现那台主机和你的中段模拟器的配色不匹配

2875
01:39:37,000 --> 01:39:38,000
然后你中段模拟器里面

2876
01:39:38,000 --> 01:39:40,000
可能紫色特别特别的暗

2877
01:39:40,000 --> 01:39:43,000
或者是蓝色特别特别的暗

2878
01:39:43,000 --> 01:39:43,000
根本看不清楚

2879
01:39:43,000 --> 01:39:47,000
那个远端服务器上这个代码到底是什么的时候

2880
01:39:47,000 --> 01:39:54,000
就在 Wim 里面打 Set ColorSim F-Lord

2881
01:39:54,000 --> 01:39:59,000
就是精灵领主这个字

2882
01:40:00,000 --> 01:40:02,000
然后在 99%的情况之下

2883
01:40:02,000 --> 01:40:04,000
才会使得你能够看清楚

2884
01:40:06,000 --> 01:40:09,000
在 Default 的 Sim 之下看不清楚的代码

2885
01:40:09,000 --> 01:40:09,000
这是一个 Trick

2886
01:40:09,000 --> 01:40:10,000
这什么原理

2887
01:40:11,000 --> 01:40:12,000
没有什么原理

2888
01:40:12,000 --> 01:40:12,000
就是

2889
01:40:13,000 --> 01:40:14,000
配色怎么读的

2890
01:40:14,000 --> 01:40:18,000
F-Lord 的 Sim 的所有的颜色都比较鲜艳

2891
01:40:19,000 --> 01:40:20,000
可能是这个原因

2892
01:40:22,000 --> 01:40:25,000
然后没有那些就是 Dark Blue 之类的一种颜色

2893
01:40:25,000 --> 01:40:28,000
会使得你的中段模拟器

2894
01:40:28,000 --> 01:40:30,000
如果色彩模式没有调对的话

2895
01:40:30,000 --> 01:40:35,000
会把远程服务器上的蓝色显示的特别暗

2896
01:40:37,000 --> 01:40:39,000
我到现在为止还没找到单色的

2897
01:40:39,000 --> 01:40:43,000
不过反正我现在就是基于一个叫做 E-Ink 的

2898
01:40:43,000 --> 01:40:46,000
这个色 ColorSkim 改的

2899
01:40:46,000 --> 01:40:50,000
就是这个代码注释会是一个灰色的

2900
01:40:50,000 --> 01:40:51,000
就是浅一点的颜色

2901
01:40:51,000 --> 01:40:52,000
浅灰色

2902
01:40:53,000 --> 01:40:54,000
然后是血体的

2903
01:40:54,000 --> 01:40:57,000
然后字符串会是血体的

2904
01:40:57,000 --> 01:40:59,000
其他都是一个默认的黑色的字

2905
01:40:59,000 --> 01:41:01,000
没有其他颜色

2906
01:41:02,000 --> 01:41:03,000
Hot Core

2907
01:41:05,000 --> 01:41:06,000
那它叫 E-Ink 吗

2908
01:41:06,000 --> 01:41:07,000
还是有原因的

2909
01:41:09,000 --> 01:41:10,000
就有电子模式的效果

2910
01:41:11,000 --> 01:41:13,000
说到这里你用了什么配色

2911
01:41:15,000 --> 01:41:21,000
我配色是一个经过改动的 Monokai

2912
01:41:22,000 --> 01:41:24,000
Monokai 是不是很鲜艳那个版本

2913
01:41:25,000 --> 01:41:27,000
还好吧

2914
01:41:28,000 --> 01:41:32,000
我其实不是很清楚这个编辑配色鲜艳的标准是什么

2915
01:41:32,000 --> 01:41:35,000
但我反正现在用的是一个自己改过的 Monokai

2916
01:41:37,000 --> 01:41:37,000
OK

2917
01:41:37,000 --> 01:41:41,000
然后 Monokai 是一个暗色背景的是吧

2918
01:41:41,000 --> 01:41:42,000
是按照作为

2919
01:41:42,000 --> 01:41:43,000
我以前一直在用 Solarize

2920
01:41:44,000 --> 01:41:44,000
就是那个

2921
01:41:45,000 --> 01:41:47,000
号称科学配色法

2922
01:41:48,000 --> 01:41:49,000
科学配色的 Solarize

2923
01:41:49,000 --> 01:41:52,000
但是怎么说呢

2924
01:41:52,000 --> 01:41:53,000
就用过一段时间之后

2925
01:41:53,000 --> 01:41:56,000
我发现在强在

2926
01:41:58,000 --> 01:42:00,000
侧面色我光线比较强的情况下

2927
01:42:00,000 --> 01:42:02,000
会很容易看不清楚

2928
01:42:03,000 --> 01:42:04,000
它的那个 contrast

2929
01:42:04,000 --> 01:42:06,000
就是对比度是不高的

2930
01:42:06,000 --> 01:42:08,000
对比度比较低的

2931
01:42:08,000 --> 01:42:10,000
我觉得太注重美感了

2932
01:42:10,000 --> 01:42:11,000
因为

2933
01:42:11,000 --> 01:42:12,000
漂亮是漂亮

2934
01:42:12,000 --> 01:42:15,000
但是用多了是感觉不是很好

2935
01:42:16,000 --> 01:42:17,000
然后 Solarize 还有一个问题

2936
01:42:17,000 --> 01:42:20,000
就是它在 256 色的情况之下

2937
01:42:22,000 --> 01:42:23,000
表现不是非常好

2938
01:42:24,000 --> 01:42:25,000
我试过很多很多种方法

2939
01:42:25,000 --> 01:42:27,000
试图让 Wim 在

2940
01:42:29,000 --> 01:42:32,000
Terminal 模式之下使用比较正确的

2941
01:42:32,000 --> 01:42:35,000
或者比较养眼的 Solarize 的配色

2942
01:42:35,000 --> 01:42:36,000
然后

2943
01:42:36,000 --> 01:42:38,000
发现要改很多很多东西

2944
01:42:38,000 --> 01:42:41,000
首先你的 Terminal 的那个

2945
01:42:42,000 --> 01:42:44,000
Term 这个字符要改

2946
01:42:44,000 --> 01:42:46,000
这个场环境背景要改

2947
01:42:46,000 --> 01:42:47,000
然后

2948
01:42:48,000 --> 01:42:51,000
Wim 里面的 Color Sim 要改

2949
01:42:52,000 --> 01:42:53,000
然后有可能你还要在

2950
01:42:53,000 --> 01:42:54,000
Bash 一上来的时候

2951
01:42:54,000 --> 01:42:57,000
运行一个脚本来设定某些

2952
01:42:57,000 --> 01:42:58,000
我不是

2953
01:42:58,000 --> 01:43:01,000
非常清楚它到底干了什么那些

2954
01:43:01,000 --> 01:43:02,000
一些 tricks

2955
01:43:03,000 --> 01:43:05,000
才可以把颜色设定的比较正确

2956
01:43:06,000 --> 01:43:06,000
这挺痛苦的

2957
01:43:06,000 --> 01:43:08,000
Monocat 没这个问题

2958
01:43:10,000 --> 01:43:12,000
Solarize 它那个的主要问题是

2959
01:43:12,000 --> 01:43:14,000
它默认的那个

2960
01:43:14,000 --> 01:43:15,000
就是 Terminal

2961
01:43:15,000 --> 01:43:16,000
那个 Counsole 的色弹

2962
01:43:16,000 --> 01:43:18,000
会跟其他的非常不一样

2963
01:43:18,000 --> 01:43:20,000
对它会逼着你去改那个色弹

2964
01:43:20,000 --> 01:43:23,000
你会把前 16 色改成

2965
01:43:23,000 --> 01:43:25,000
完全另外一种场景

2966
01:43:25,000 --> 01:43:26,000
然后改了之后会有个问题

2967
01:43:26,000 --> 01:43:28,000
就是兼容别的那种

2968
01:43:28,000 --> 01:43:30,000
非 Solarize 的色盘的话

2969
01:43:30,000 --> 01:43:32,000
就会有点问题

2970
01:43:32,000 --> 01:43:34,000
经常我们看那个字就看不见

2971
01:43:34,000 --> 01:43:35,000
没错

2972
01:43:35,000 --> 01:43:36,000
就比如说你装

2973
01:43:36,000 --> 01:43:39,000
如果你用 Solarize 的官方解决方案

2974
01:43:39,000 --> 01:43:40,000
把你的那个

2975
01:43:40,000 --> 01:43:44,000
iTerm 2 的调色盘改了

2976
01:43:44,000 --> 01:43:46,000
此时你在用比如说 Brew

2977
01:43:47,000 --> 01:43:48,000
Brew 有时候会用不同颜色

2978
01:43:48,000 --> 01:43:49,000
来告诉你说

2979
01:43:49,000 --> 01:43:51,000
这个 package 是下载完了

2980
01:43:51,000 --> 01:43:53,000
还是出错之类的

2981
01:43:53,000 --> 01:43:54,000
此时你会发现

2982
01:43:54,000 --> 01:43:55,000
所有这些颜色都变了

2983
01:43:55,000 --> 01:43:57,000
就可能本来是一个绿色的对钩

2984
01:43:57,000 --> 01:43:58,000
现在变成了白色

2985
01:43:59,000 --> 01:44:00,000
对

2986
01:44:00,000 --> 01:44:00,000
对

2987
01:44:00,000 --> 01:44:01,000
非常不舒服

2988
01:44:04,000 --> 01:44:06,000
所以其实说到这里要

2989
01:44:06,000 --> 01:44:07,000
刚才问那个

2990
01:44:07,000 --> 01:44:08,000
你用暗色背景的话

2991
01:44:08,000 --> 01:44:11,000
你在文档和嘴边之间切换的时候

2992
01:44:11,000 --> 01:44:12,000
眼睛不会觉得

2993
01:44:12,000 --> 01:44:14,000
突然一明一暗了

2994
01:44:14,000 --> 01:44:16,000
只有在用里会有这个问题

2995
01:44:16,000 --> 01:44:19,000
就是在深夜里面写代码的时候

2996
01:44:19,000 --> 01:44:19,000
会有这个问题

2997
01:44:20,000 --> 01:44:20,000
不对啊

2998
01:44:20,000 --> 01:44:22,000
白天其实这个问题更严重

2999
01:44:22,000 --> 01:44:25,000
因为其实你看白天

3000
01:44:25,000 --> 01:44:26,000
这个环境都是亮的

3001
01:44:27,000 --> 01:44:28,000
我觉得夜里比较

3002
01:44:29,000 --> 01:44:32,000
夜里这种切换的场景的时候

3003
01:44:32,000 --> 01:44:33,000
你眼睛会疼

3004
01:44:33,000 --> 01:44:34,000
但是白天就还好

3005
01:44:34,000 --> 01:44:36,000
如果你背景足够亮的话

3006
01:44:36,000 --> 01:44:38,000
白天这个问题就没有那么突出

3007
01:44:38,000 --> 01:44:39,000
我觉得

3008
01:44:39,000 --> 01:44:39,000
对

3009
01:44:39,000 --> 01:44:41,000
但是你如果背景比较亮的话

3010
01:44:41,000 --> 01:44:43,000
你那个叫什么

3011
01:44:43,000 --> 01:44:46,000
你看那个黑色代码区就很成问题了

3012
01:44:46,000 --> 01:44:47,000
因为你这个时候

3013
01:44:47,000 --> 01:44:49,000
就是要放大你的瞳孔去 focus 到

3014
01:44:50,000 --> 01:44:51,000
那个

3015
01:44:51,000 --> 01:44:53,000
因为暗色底的话

3016
01:44:53,000 --> 01:44:55,000
它字是白的嘛

3017
01:44:55,000 --> 01:44:56,000
字是亮色的

3018
01:44:57,000 --> 01:44:59,000
它的光线是比较少的

3019
01:44:59,000 --> 01:45:00,000
这个时候你要放大瞳孔

3020
01:45:00,000 --> 01:45:02,000
才能够接受到足够的光去辨识它

3021
01:45:03,000 --> 01:45:04,000
但与此同时呢

3022
01:45:04,000 --> 01:45:07,000
你的这个环境的光照是很高的

3023
01:45:07,000 --> 01:45:09,000
这个是有很多这种周围的环境

3024
01:45:09,000 --> 01:45:11,000
你一个射到你的瞳孔里面去

3025
01:45:11,000 --> 01:45:12,000
其实对这个是挺

3026
01:45:12,000 --> 01:45:14,000
眼睛是挺伤的

3027
01:45:14,000 --> 01:45:16,000
对会引发眼目屁了

3028
01:45:16,000 --> 01:45:17,000
我同意你的观点

3029
01:45:17,000 --> 01:45:18,000
不过

3030
01:45:18,000 --> 01:45:20,000
我可能另外一个原因就是

3031
01:45:20,000 --> 01:45:22,000
我对这个事情不是特别敏感的

3032
01:45:22,000 --> 01:45:24,000
就是我有两个显示器

3033
01:45:24,000 --> 01:45:27,000
然后那个文档放在一个显示器上

3034
01:45:27,000 --> 01:45:28,000
编辑在另外一小时

3035
01:45:28,000 --> 01:45:29,000
编辑有点黑的

3036
01:45:31,000 --> 01:45:31,000
OK

3037
01:45:31,000 --> 01:45:33,000
就还好吧

3038
01:45:35,000 --> 01:45:35,000
所以其实这一点

3039
01:45:35,000 --> 01:45:37,000
那个 solarize 的一个好处

3040
01:45:37,000 --> 01:45:40,000
就是它是有暗色和亮色两个版本的

3041
01:45:40,000 --> 01:45:40,000
对

3042
01:45:40,000 --> 01:45:42,000
我的当时的方案就是说

3043
01:45:43,000 --> 01:45:44,000
你会接受到

3044
01:45:44,000 --> 01:45:45,000
我的方案就是

3045
01:45:46,000 --> 01:45:48,000
我当时想到就是说如果环境很暗

3046
01:45:48,000 --> 01:45:49,000
我就用那个暗色版本的

3047
01:45:50,000 --> 01:45:50,000
环境很亮

3048
01:45:50,000 --> 01:45:51,000
我就用亮色版本

3049
01:45:51,000 --> 01:45:53,000
后来发现基本上都是很亮的环境

3050
01:45:53,000 --> 01:45:55,000
所以就一直是用那个亮色版本

3051
01:45:55,000 --> 01:45:57,000
就 light 那个版本

3052
01:45:57,000 --> 01:46:00,000
我也在 Wim 里面绑了一个快捷键

3053
01:46:00,000 --> 01:46:01,000
就是按一下快捷键

3054
01:46:01,000 --> 01:46:03,000
按个 F 9 吧

3055
01:46:03,000 --> 01:46:03,000
我记得还是什么

3056
01:46:03,000 --> 01:46:04,000
对

3057
01:46:04,000 --> 01:46:07,000
可以在亮色模式和暗色模式之间切换

3058
01:46:08,000 --> 01:46:10,000
但后来觉得还是觉得淡淡的

3059
01:46:10,000 --> 01:46:11,000
就算了

3060
01:46:12,000 --> 01:46:12,000
呵呵呵

3061
01:46:13,000 --> 01:46:14,000
OK

3062
01:46:15,000 --> 01:46:17,000
所以还有刚才就是那个吐槽

3063
01:46:17,000 --> 01:46:18,000
那个颜色的问题

3064
01:46:19,000 --> 01:46:19,000
也不

3065
01:46:20,000 --> 01:46:22,000
其实你不觉得现在那种 terminal

3066
01:46:22,000 --> 01:46:23,000
或者 console 这种东西

3067
01:46:24,000 --> 01:46:25,000
它处理这个

3068
01:46:26,000 --> 01:46:28,000
色彩那些方式都非常

3069
01:46:30,000 --> 01:46:31,000
ancient 非常原始

3070
01:46:31,000 --> 01:46:33,000
都是历史遗留问题

3071
01:46:33,000 --> 01:46:34,000
我觉得

3072
01:46:34,000 --> 01:46:37,000
就我们今天还在使用 terminal simulation

3073
01:46:37,000 --> 01:46:41,000
这件事情其实仔细想想就很不可思议了

3074
01:46:41,000 --> 01:46:42,000
对

3075
01:46:42,000 --> 01:46:43,000
就是

3076
01:46:43,000 --> 01:46:44,000
对

3077
01:46:44,000 --> 01:46:46,000
每个人都知道 comment line 非常重要

3078
01:46:47,000 --> 01:46:49,000
或是至少在目前 comment line 的

3079
01:46:50,000 --> 01:46:52,000
还是没有被人扔到历史垃圾堆里

3080
01:46:52,000 --> 01:46:54,000
但从来没有一个人能够

3081
01:46:54,000 --> 01:46:56,000
成功的重新翻译一遍文字

3082
01:46:56,000 --> 01:46:59,000
然后把把 CLI 做得好一点

3083
01:47:00,000 --> 01:47:01,000
对

3084
01:47:01,000 --> 01:47:02,000
就那个命令行本身

3085
01:47:02,000 --> 01:47:03,000
我觉得是问题不大

3086
01:47:03,000 --> 01:47:05,000
但是就是说我们现在那个实现方式

3087
01:47:05,000 --> 01:47:06,000
真是太古老了

3088
01:47:06,000 --> 01:47:08,000
比如说刚才你说要实现那个文字

3089
01:47:08,000 --> 01:47:11,000
要通过那个输出字符来各种转译

3090
01:47:11,000 --> 01:47:13,000
然后甚至连最底层的

3091
01:47:13,000 --> 01:47:14,000
你在那个

3092
01:47:15,000 --> 01:47:18,000
在 linux 上面去做一个这个 console 接口

3093
01:47:18,000 --> 01:47:20,000
这样一个什么虚拟的 tty 设备

3094
01:47:20,000 --> 01:47:21,000
哇真是

3095
01:47:22,000 --> 01:47:24,000
对其实我指的就是那件事情

3096
01:47:24,000 --> 01:47:26,000
就是我们居然还在使用这么古老的

3097
01:47:26,000 --> 01:47:28,000
可以追溯到 1970 年代的

3098
01:47:29,000 --> 01:47:30,000
terminal simulator

3099
01:47:31,000 --> 01:47:32,000
就

3100
01:47:33,000 --> 01:47:35,000
我可能这个地方还是可以

3101
01:47:35,000 --> 01:47:38,000
给这个对历史不是特别大

3102
01:47:38,000 --> 01:47:39,000
我也不是属于的

3103
01:47:39,000 --> 01:47:40,000
听众们介绍一下

3104
01:47:40,000 --> 01:47:42,000
就是我们现在使用的

3105
01:47:43,000 --> 01:47:44,000
那个黑黑的

3106
01:47:44,000 --> 01:47:46,000
可以敲文字进去的

3107
01:47:46,000 --> 01:47:48,000
学编程莫名其妙

3108
01:47:48,000 --> 01:47:50,000
一定都要用到这个 terminal

3109
01:47:51,000 --> 01:47:55,000
其实是在模拟 70 年代的电传打字机

3110
01:47:55,000 --> 01:47:57,000
如果你一定要追溯到就是源头

3111
01:47:58,000 --> 01:48:02,000
在就是说在显示器这个东西出现之前

3112
01:48:02,000 --> 01:48:05,000
计算机是通过打印机

3113
01:48:05,000 --> 01:48:06,000
就直接连在一个打印机上

3114
01:48:06,000 --> 01:48:08,000
往纸上输出东西

3115
01:48:08,000 --> 01:48:10,000
然后这个东西

3116
01:48:10,000 --> 01:48:11,000
这个东西的

3117
01:48:12,000 --> 01:48:13,000
最基本的运作机里

3118
01:48:13,000 --> 01:48:16,000
比如说 ASCII 码之类的这种东西

3119
01:48:16,000 --> 01:48:19,000
一直都原封不动的被继承到了今天

3120
01:48:20,000 --> 01:48:22,000
然后当显示器出现了之后

3121
01:48:22,000 --> 01:48:25,000
一开始也是只能像电传打字机一样一次

3122
01:48:25,000 --> 01:48:27,000
编辑一行的内容

3123
01:48:27,000 --> 01:48:29,000
然后这一行的内容编辑完了

3124
01:48:29,000 --> 01:48:30,000
你按下回车

3125
01:48:31,000 --> 01:48:33,000
才会把这一行的内容出现

3126
01:48:33,000 --> 01:48:35,000
输出在显示器上

3127
01:48:35,000 --> 01:48:38,000
直到就是我们现在习惯的这种 WIM

3128
01:48:38,000 --> 01:48:39,000
你打开 WIM 之后

3129
01:48:39,000 --> 01:48:40,000
光标从

3130
01:48:42,000 --> 01:48:42,000
Wait a second

3131
01:48:42,000 --> 01:48:44,000
光标还是在左上

3132
01:48:44,000 --> 01:48:44,000
对

3133
01:48:45,000 --> 01:48:47,000
光标从你当前好像跳到左上

3134
01:48:47,000 --> 01:48:49,000
并且你可以跳到任意一行

3135
01:48:49,000 --> 01:48:50,000
这样你多按几次回车

3136
01:48:50,000 --> 01:48:51,000
你就可以跳到任意一行

3137
01:48:51,000 --> 01:48:53,000
然后再跳出来这种特性

3138
01:48:53,000 --> 01:48:55,000
都已经是非常高端的特性了

3139
01:48:55,000 --> 01:48:59,000
在单侧显示器的时代

3140
01:49:00,000 --> 01:49:03,000
你可以想象说早期单侧显示器的时代

3141
01:49:03,000 --> 01:49:05,000
那些电脑键盘上是没有方向键的

3142
01:49:06,000 --> 01:49:07,000
为什么呢

3143
01:49:07,000 --> 01:49:09,000
因为你按下方向键没有什么软用

3144
01:49:09,000 --> 01:49:12,000
你根本不可能把光标跳到上面一行

3145
01:49:12,000 --> 01:49:13,000
或者下面一行

3146
01:49:13,000 --> 01:49:16,000
因为你的电脑就只理解当前行的内容

3147
01:49:18,000 --> 01:49:20,000
而我们现在使用了这样一个小的

3148
01:49:20,000 --> 01:49:22,000
Terminal Simulator 这么一个 App

3149
01:49:22,000 --> 01:49:25,000
其实是在原分不动的模拟这些 70 年的技术

3150
01:49:26,000 --> 01:49:29,000
而我们对此都是司空见惯的

3151
01:49:29,000 --> 01:49:31,000
就从来没有人想过要把它

3152
01:49:31,000 --> 01:49:32,000
当然好吧

3153
01:49:32,000 --> 01:49:35,000
我必须承认说 Plan 9 其实是

3154
01:49:35,000 --> 01:49:37,000
已经解决了这个问题了

3155
01:49:37,000 --> 01:49:39,000
但是就像我们知道的 Plan 9

3156
01:49:39,000 --> 01:49:40,000
因为它太好了

3157
01:49:40,000 --> 01:49:41,000
所以它不可能流行起来

3158
01:49:42,000 --> 01:49:43,000
我们就

3159
01:49:44,000 --> 01:49:45,000
这是一个悲伤的根据

3160
01:49:45,000 --> 01:49:48,000
DOOMed to live in this ancient world

3161
01:49:52,000 --> 01:49:53,000
涂了好多草

3162
01:49:54,000 --> 01:49:55,000
这个绕得有点远

3163
01:49:55,000 --> 01:49:57,000
对还是一把圈子兜回来

3164
01:49:58,000 --> 01:50:00,000
接着讲 Debugging 的事情

3165
01:50:00,000 --> 01:50:03,000
这个我们之后有时间再来探讨这个问题

3166
01:50:03,000 --> 01:50:06,000
其实还有挺多有意思的事情可以去讨论

3167
01:50:08,000 --> 01:50:10,000
可能从另一个方面讲说

3168
01:50:10,000 --> 01:50:14,000
为什么 Terminal Simulator 这么多年以来一直没有进展

3169
01:50:15,000 --> 01:50:17,000
一个原因也就是 Windows

3170
01:50:17,000 --> 01:50:21,000
或者说图形化界面实在是发展的太快了

3171
01:50:21,000 --> 01:50:24,000
人们没有时间停下来回过头去

3172
01:50:25,000 --> 01:50:31,000
好好地把命令行界面的承载容器改变一下

3173
01:50:31,000 --> 01:50:33,000
因为如果你要去问

3174
01:50:33,000 --> 01:50:36,000
这个世界上到底是使用 ID 1 的写程序的人多

3175
01:50:37,000 --> 01:50:38,000
还是使用命令行界程序的人多

3176
01:50:38,000 --> 01:50:39,000
我觉得

3177
01:50:41,000 --> 01:50:46,000
一个比较合理的推断是肯定是用 ID 1 的写程序的人多

3178
01:50:46,000 --> 01:50:47,000
就是使用一个

3179
01:50:47,000 --> 01:50:48,000
压倒性多数

3180
01:50:49,000 --> 01:50:53,000
压倒性 99%以上的人是在用 ID 1 写程序

3181
01:50:53,000 --> 01:50:54,000
想要反驳这件事情的人

3182
01:50:54,000 --> 01:50:58,000
首先要想到有很多人他不是专业的程序员

3183
01:50:58,000 --> 01:51:02,000
但他仍旧必须通过某种工具来编程序

3184
01:51:02,000 --> 01:51:04,000
你让他们去使用命令行是非常不忍道的

3185
01:51:04,000 --> 01:51:11,000
比如说刚才节目一开始提到研究脑科学的赵晨博士

3186
01:51:11,000 --> 01:51:15,000
他为什么要逼他去用命令行写程序

3187
01:51:15,000 --> 01:51:15,000
对吧

3188
01:51:16,000 --> 01:51:24,000
或者是一些乃至广义上写 Office 里面的 VB script 的人

3189
01:51:24,000 --> 01:51:27,000
都可以在一种对使用比较

3190
01:51:28,000 --> 01:51:32,000
他所使用的工具都可以当做一种广义上的 ID 1

3191
01:51:32,000 --> 01:51:33,000
来看待

3192
01:51:33,000 --> 01:51:33,000
对

3193
01:51:34,000 --> 01:51:34,000
对

3194
01:51:37,000 --> 01:51:38,000
什么是 ID 1 呢

3195
01:51:38,000 --> 01:51:41,000
有一个解法就是 integrate debug environment

3196
01:51:41,000 --> 01:51:44,000
也就是 ID 1 这个工具

3197
01:51:44,000 --> 01:51:47,000
最重要的功能之一就是帮助你 debug

3198
01:51:48,000 --> 01:51:50,000
ID 1 把

3199
01:51:50,000 --> 01:51:51,000
对

3200
01:51:51,000 --> 01:51:57,000
他把你的 editor 和项目管理工具和版本控制工具

3201
01:51:57,000 --> 01:52:02,000
以及最重要的一个 debug 工具集成在一起

3202
01:52:03,000 --> 01:52:07,000
才孕育出了这么一个非常好用的 ID 1 环节

3203
01:52:10,000 --> 01:52:17,000
所以 Rail 你是即便现在也是会在公司里面也不用 ID 1 的吗

3204
01:52:18,000 --> 01:52:20,000
这个问题有点绕

3205
01:52:20,000 --> 01:52:23,000
就是你现在仍旧哪怕是在工作的时候也不用 ID 1 吗

3206
01:52:24,000 --> 01:52:26,000
我自己是不用 ID 的

3207
01:52:26,000 --> 01:52:31,000
但我看有些其他的人他们会用一些东西去写

3208
01:52:32,000 --> 01:52:34,000
现在因为现在没有写 App 是显学

3209
01:52:35,000 --> 01:52:36,000
各种应用显学

3210
01:52:37,000 --> 01:52:39,000
这时候你就不得不用比如说 Xcode

3211
01:52:40,000 --> 01:52:41,000
你逃不掉

3212
01:52:41,000 --> 01:52:41,000
对

3213
01:52:42,000 --> 01:52:42,000
然后

3214
01:52:42,000 --> 01:52:45,000
Xcode 当然是一个比较极端的例子

3215
01:52:45,000 --> 01:52:47,000
就是他逼迫你用这个

3216
01:52:48,000 --> 01:52:50,000
对但其他你也没得太多选

3217
01:52:50,000 --> 01:52:52,000
比如说你写 Java 应用

3218
01:52:53,000 --> 01:52:55,000
你跑不掉 Eclipse 或是 Jetbrains 之类的

3219
01:52:56,000 --> 01:52:58,000
我觉得 Java 的可选 ID 还是蛮多的

3220
01:52:58,000 --> 01:52:59,000
NetBeans 什么的

3221
01:52:59,000 --> 01:53:01,000
但是可选的 ID 是很多

3222
01:53:01,000 --> 01:53:03,000
但是他们都是用 ID 写的

3223
01:53:03,000 --> 01:53:07,000
很少见用 Wim 写 Java 的人

3224
01:53:07,000 --> 01:53:10,000
OK 用 Wim 写 Emax 的人

3225
01:53:11,000 --> 01:53:12,000
是比较好

3226
01:53:13,000 --> 01:53:13,000
对

3227
01:53:14,000 --> 01:53:17,000
然后还有就是 Visual Studio 这个系列的

3228
01:53:17,000 --> 01:53:21,000
基本上也是比较少用纯编辑器写的

3229
01:53:22,000 --> 01:53:25,000
对我在直播上看到过一个说法

3230
01:53:25,000 --> 01:53:26,000
就是说

3231
01:53:27,000 --> 01:53:31,000
C-Sharp 和 Java 之类的都是叫什么

3232
01:53:31,000 --> 01:53:33,000
面向 ID 的变成语言

3233
01:53:33,000 --> 01:53:37,000
他们从设计之初就是考虑到这个语言

3234
01:53:37,000 --> 01:53:38,000
一定要在 ID 里面被写

3235
01:53:39,000 --> 01:53:41,000
才比较正常

3236
01:53:41,000 --> 01:53:43,000
所以他们才不会去考虑什么

3237
01:53:46,000 --> 01:53:48,000
那个方法名称太长

3238
01:53:48,000 --> 01:53:50,000
或者是关键字太长之类的问题

3239
01:53:50,000 --> 01:53:51,000
反正有自动补齐

3240
01:53:52,000 --> 01:53:55,000
没错比如说 Integer 一定要写成 Integer

3241
01:53:55,000 --> 01:53:58,000
不像 C 里面你写个 int

3242
01:53:58,000 --> 01:53:59,000
或者是

3243
01:54:00,000 --> 01:54:03,000
比如一开始说到 printf

3244
01:54:04,000 --> 01:54:07,000
刚学变成的时候你想过 f 代表什么

3245
01:54:10,000 --> 01:54:14,000
你刚才说的时候你说这个函数是系统的一个函数

3246
01:54:14,000 --> 01:54:16,000
它可以输出一个字幕串

3247
01:54:16,000 --> 01:54:18,000
当时其实我想就让你说不对

3248
01:54:18,000 --> 01:54:20,000
输出字幕串是 puts

3249
01:54:20,000 --> 01:54:22,000
s 代表 straight

3250
01:54:22,000 --> 01:54:26,000
而 printf 的 f 代表的是 format

3251
01:54:26,000 --> 01:54:31,000
就是 printf 这个函数最大的功能是让你输出一些内容

3252
01:54:31,000 --> 01:54:35,000
然后这个内容是有一个特定的 format

3253
01:54:35,000 --> 01:54:37,000
所以才叫 printf

3254
01:54:37,000 --> 01:54:42,000
但是如果是一个面向 ID 的变成语言的话

3255
01:54:42,000 --> 01:54:47,000
那它此处一定会不吝字符数的

3256
01:54:47,000 --> 01:54:54,000
把这个方法命名为 output string with format

3257
01:54:54,000 --> 01:54:55,000
对

3258
01:54:58,000 --> 01:55:01,000
与此类似的比如说还有什么 sprintf

3259
01:55:01,000 --> 01:55:02,000
第一个 s 代表什么呢

3260
01:55:02,000 --> 01:55:03,000
代表 straight

3261
01:55:03,000 --> 01:55:08,000
就是把 format 的内容输出到另外一个字幕串

3262
01:55:08,000 --> 01:55:13,000
其实这些早期的黑客们为了节省时间

3263
01:55:13,000 --> 01:55:18,000
以及没有 ID 的状况

3264
01:55:18,000 --> 01:55:23,000
导致他们开发了这么一套非常简略的语言

3265
01:55:23,000 --> 01:55:27,000
也对早期学编程的人造成了一定的障碍

3266
01:55:27,000 --> 01:55:33,000
就是有些人他可能不是不习惯那种一上来说

3267
01:55:33,000 --> 01:55:34,000
我给你个例子

3268
01:55:34,000 --> 01:55:36,000
你先别管 3721

3269
01:55:36,000 --> 01:55:37,000
你把它敲出来

3270
01:55:37,000 --> 01:55:38,000
然后做别的

3271
01:55:38,000 --> 01:55:41,000
一步一步学下去再说

3272
01:55:41,000 --> 01:55:43,000
他可能一上来就会想要明白

3273
01:55:43,000 --> 01:55:44,000
这个 main 到底是干什么

3274
01:55:44,000 --> 01:55:46,000
这个 int 到底是干什么

3275
01:55:46,000 --> 01:55:48,000
然后 printf 到底代表什么

3276
01:55:48,000 --> 01:55:52,000
如果他在一上来学的时候

3277
01:55:52,000 --> 01:55:56,000
这些在他看来非常基本的细节都找不到答案的话

3278
01:55:56,000 --> 01:55:58,000
他很快就没有兴趣了

3279
01:55:58,000 --> 01:55:59,000
我觉得我早期就是这样

3280
01:56:01,000 --> 01:56:04,000
有点看起来有点 cryptic 代码

3281
01:56:04,000 --> 01:56:05,000
对

3282
01:56:06,000 --> 01:56:07,000
密密文

3283
01:56:07,000 --> 01:56:08,000
刚有点漏数了

3284
01:56:08,000 --> 01:56:10,000
就是那些命名这么短

3285
01:56:10,000 --> 01:56:13,000
除了没有 ID 的自动补习的功能以外

3286
01:56:13,000 --> 01:56:14,000
还有一个更重要的

3287
01:56:14,000 --> 01:56:17,000
你看看我们讲的扯了那堆 terminal 关系

3288
01:56:17,000 --> 01:56:20,000
就是早期的那些 counsel 宽度比较有限

3289
01:56:20,000 --> 01:56:22,000
只有 80 个字符

3290
01:56:22,000 --> 01:56:24,000
或是 60 个字符这样

3291
01:56:24,000 --> 01:56:27,000
他如果方法名特别长的话

3292
01:56:27,000 --> 01:56:29,000
他那一行就悲剧了

3293
01:56:29,000 --> 01:56:32,000
这一行可能就写一个函数还写不完

3294
01:56:32,000 --> 01:56:34,000
就这么一个考虑在里面

3295
01:56:34,000 --> 01:56:38,000
后来有了 ID 都是在图形界面情况下

3296
01:56:38,000 --> 01:56:40,000
那个宽度就可以比较有限

3297
01:56:40,000 --> 01:56:42,000
就有富余了

3298
01:56:42,000 --> 01:56:46,000
而且像现在用的开发用的屏幕

3299
01:56:46,000 --> 01:56:49,000
动则什么 1920 宽甚至更多

3300
01:56:49,000 --> 01:56:50,000
所以这个完全不是问题

3301
01:56:51,000 --> 01:56:52,000
没错

3302
01:56:52,000 --> 01:56:55,000
另外一个原因就是早期的电传

3303
01:56:55,000 --> 01:56:57,000
不是电传

3304
01:56:57,000 --> 01:56:59,000
早期的中端是一个

3305
01:56:59,000 --> 01:57:03,000
等于是只有一个键盘和一个显示器

3306
01:57:03,000 --> 01:57:04,000
然后你按一个键

3307
01:57:05,000 --> 01:57:09,000
这个键按下去的电讯号先传到服务器上

3308
01:57:09,000 --> 01:57:10,000
然后再传回来

3309
01:57:10,000 --> 01:57:12,000
才会在你的中央显示器上

3310
01:57:12,000 --> 01:57:14,000
显示一个字符出来

3311
01:57:14,000 --> 01:57:15,000
这个过程是比较慢的

3312
01:57:15,000 --> 01:57:19,000
如果你把一个函数设计的太长的话

3313
01:57:19,000 --> 01:57:22,000
你可能敲到一半发现自己敲错了一个字符

3314
01:57:22,000 --> 01:57:26,000
然后要数着自己按回车的次数

3315
01:57:26,000 --> 01:57:29,000
然后算自己按到哪个

3316
01:57:29,000 --> 01:57:31,000
自己应该删到哪个字符停下来

3317
01:57:31,000 --> 01:57:32,000
这个过程是非常缓慢

3318
01:57:33,000 --> 01:57:36,000
所以这个其实在现代也能体会到

3319
01:57:36,000 --> 01:57:37,000
就这个过程

3320
01:57:37,000 --> 01:57:38,000
对

3321
01:57:38,000 --> 01:57:40,000
有时候你在使用中那些

3322
01:57:41,000 --> 01:57:42,000
你就那个 SSH 的时候

3323
01:57:43,000 --> 01:57:43,000
你就连一个

3324
01:57:43,000 --> 01:57:45,000
比如说你现在在德国

3325
01:57:45,000 --> 01:57:48,000
你连一个假设

3326
01:57:48,000 --> 01:57:49,000
新西兰的服务器

3327
01:57:49,000 --> 01:57:50,000
我有一段时间

3328
01:57:50,000 --> 01:57:52,000
那个服务器在日本

3329
01:57:52,000 --> 01:57:54,000
就这个状况非常不错

3330
01:57:56,000 --> 01:57:57,000
就发现打一个字

3331
01:57:57,000 --> 01:58:00,000
等一秒才出现

3332
01:58:00,000 --> 01:58:01,000
再打一个字又等一秒才出现

3333
01:58:01,000 --> 01:58:04,000
也是因为这个 SSH 这种工具

3334
01:58:05,000 --> 01:58:06,000
还是就刚刚讲

3335
01:58:06,000 --> 01:58:09,000
是来自历史这种交互方式

3336
01:58:09,000 --> 01:58:11,000
就是你想就按我们正常一个想法

3337
01:58:11,000 --> 01:58:13,000
你在本地打个字

3338
01:58:13,000 --> 01:58:14,000
为什么会要等到服务器传过来

3339
01:58:14,000 --> 01:58:16,000
确认才会把它显示出来呢

3340
01:58:16,000 --> 01:58:17,000
对不对

3341
01:58:17,000 --> 01:58:18,000
就是很奇怪

3342
01:58:18,000 --> 01:58:21,000
这就是来自那些 Legacy 的东西

3343
01:58:21,000 --> 01:58:23,000
对早期的一些智能终端

3344
01:58:23,000 --> 01:58:25,000
也就有了这么一个

3345
01:58:26,000 --> 01:58:29,000
所谓的 Local Echo 的这么一个功能

3346
01:58:29,000 --> 01:58:30,000
就是你按了一个键

3347
01:58:30,000 --> 01:58:33,000
它现在本地帮你把它显示在显示器上

3348
01:58:34,000 --> 01:58:36,000
然后等到服务端

3349
01:58:36,000 --> 01:58:38,000
传回来确认字符的时候

3350
01:58:38,000 --> 01:58:40,000
你这边已经看到结果了

3351
01:58:41,000 --> 01:58:42,000
这已经是早期的一个

3352
01:58:42,000 --> 01:58:44,000
中间默契的卖家

3353
01:58:45,000 --> 01:58:46,000
对说到这里

3354
01:58:46,000 --> 01:58:48,000
就这里安立一个挺好用的工具

3355
01:58:48,000 --> 01:58:49,000
就是 MOSH

3356
01:58:49,000 --> 01:58:51,000
M-O-S-S-H

3357
01:58:51,000 --> 01:58:52,000
M-O-S-S-H

3358
01:58:52,000 --> 01:58:54,000
就是它能够解决刚才说的那些问题

3359
01:58:55,000 --> 01:58:55,000
对

3360
01:58:55,000 --> 01:58:57,000
它是通过一个叫什么来的

3361
01:58:57,000 --> 01:58:58,000
M-I-T 做的吧

3362
01:58:58,000 --> 01:59:00,000
对 M-I-T 的一个学生做的

3363
01:59:01,000 --> 01:59:03,000
然后它这个工具就比较好

3364
01:59:03,000 --> 01:59:06,000
就解决一种在高延迟连接情况下

3365
01:59:06,000 --> 01:59:09,000
你用 SS 去打一个字

3366
01:59:09,000 --> 01:59:10,000
等半天才会出现的那个问题

3367
01:59:10,000 --> 01:59:13,000
它是通过一些本地的

3368
01:59:13,000 --> 01:59:14,000
Predictive 的算法

3369
01:59:14,000 --> 01:59:15,000
就是预测性的算法

3370
01:59:15,000 --> 01:59:16,000
先把那些字给打出来

3371
01:59:17,000 --> 01:59:18,000
然后等服务器的响应

3372
01:59:18,000 --> 01:59:20,000
服务器如果响应出来没错

3373
01:59:20,000 --> 01:59:20,000
它就按那个

3374
01:59:20,000 --> 01:59:21,000
就不用改对吧

3375
01:59:22,000 --> 01:59:23,000
如果不响应出来有问题

3376
01:59:23,000 --> 01:59:25,000
它可能再更新成服务器那个东西

3377
01:59:26,000 --> 01:59:27,000
所以有时候你会觉得会跳

3378
01:59:27,000 --> 01:59:29,000
但是说你至少能够保证你在

3379
01:59:30,000 --> 01:59:32,000
输入命令的过程中是比较

3380
01:59:32,000 --> 01:59:33,000
流畅的一个体验

3381
01:59:34,000 --> 01:59:34,000
对

3382
01:59:34,000 --> 01:59:37,000
而且还很屌的一点就是

3383
01:59:37,000 --> 01:59:38,000
你用 Laptop 办公

3384
01:59:38,000 --> 01:59:40,000
然后你打到一半

3385
01:59:40,000 --> 01:59:42,000
把 Laptop 的盖子合上了

3386
01:59:42,000 --> 01:59:43,000
然后再打开

3387
01:59:44,000 --> 01:59:45,000
比如说你在咖啡馆你要弄个座位

3388
01:59:45,000 --> 01:59:48,000
然后如果你用普通的 S-H 的话

3389
01:59:48,000 --> 01:59:50,000
此时你就已经断掉了对吧

3390
01:59:50,000 --> 01:59:51,000
但如果你用貌似的话

3391
01:59:51,000 --> 01:59:52,000
PCP 连接已经没有了

3392
01:59:53,000 --> 01:59:53,000
对

3393
01:59:53,000 --> 01:59:54,000
如果你用貌似的话

3394
01:59:54,000 --> 01:59:56,000
它会自动帮你重新连起来

3395
01:59:56,000 --> 01:59:58,000
是非常爽的一点

3396
01:59:59,000 --> 01:59:59,000
对

3397
01:59:59,000 --> 02:00:01,000
因为它底层是用 UDP 来实现

3398
02:00:01,000 --> 02:00:04,000
它是一个无连接的通讯协议

3399
02:00:04,000 --> 02:00:05,000
这样的话就可以让你

3400
02:00:05,000 --> 02:00:07,000
就 Roaming 所有的漫游

3401
02:00:07,000 --> 02:00:08,000
就可以换 IP

3402
02:00:08,000 --> 02:00:10,000
换那些都可以实现的

3403
02:00:10,000 --> 02:00:11,000
然后就整个

3404
02:00:11,000 --> 02:00:13,000
特别是在现在这个什么

3405
02:00:13,000 --> 02:00:15,000
有些人在外面用 4 G 办公

3406
02:00:15,000 --> 02:00:16,000
就可能会遇到这种状况

3407
02:00:16,000 --> 02:00:19,000
就在 4 G 和 WiFi 之间切换的时候

3408
02:00:19,000 --> 02:00:21,000
会遇到这种情况比较久

3409
02:00:22,000 --> 02:00:22,000
对

3410
02:00:23,000 --> 02:00:25,000
所以 In case you haven't

3411
02:00:25,000 --> 02:00:26,000
一定要用它

3412
02:00:27,000 --> 02:00:28,000
一定要去

3413
02:00:28,000 --> 02:00:30,000
这跟大家强烈安利

3414
02:00:34,000 --> 02:00:37,000
所以你的同事们有在用 IDE 吗

3415
02:00:38,000 --> 02:00:40,000
除了 XPo 之外

3416
02:00:41,000 --> 02:00:43,000
那等等你现在写什么 Python 吗

3417
02:00:44,000 --> 02:00:46,000
我现在写 Go

3418
02:00:46,000 --> 02:00:48,000
写 Go 的话一般还是用编辑器的

3419
02:00:48,000 --> 02:00:49,000
多少头用那个

3420
02:00:50,000 --> 02:00:51,000
IDE 的还是比较少

3421
02:00:52,000 --> 02:00:54,000
所以 Go 语言现在是没有一个

3422
02:00:55,000 --> 02:00:56,000
亲定的

3423
02:00:56,000 --> 02:00:58,000
官方亲定的

3424
02:00:58,000 --> 02:00:59,000
没有

3425
02:01:00,000 --> 02:01:01,000
有那个叫

3426
02:01:01,000 --> 02:01:04,000
那个 RolePak 自己那个编辑器叫 Acme

3427
02:01:05,000 --> 02:01:06,000
Acme 我们介绍过

3428
02:01:06,000 --> 02:01:07,000
也是 Plan 9 的一部分

3429
02:01:08,000 --> 02:01:09,000
对

3430
02:01:09,000 --> 02:01:10,000
这个算是

3431
02:01:11,000 --> 02:01:12,000
就是算亲儿子了

3432
02:01:12,000 --> 02:01:13,000
但是其实

3433
02:01:14,000 --> 02:01:16,000
除了他和以前 Plan 9

3434
02:01:16,000 --> 02:01:17,000
那个就贝尔选手那几个人

3435
02:01:18,000 --> 02:01:19,000
在用这个之外

3436
02:01:19,000 --> 02:01:20,000
好像外面的人用的比较少

3437
02:01:21,000 --> 02:01:22,000
因为他那个确实比较贵

3438
02:01:23,000 --> 02:01:24,000
比较 HotCore

3439
02:01:24,000 --> 02:01:25,000
对

3440
02:01:25,000 --> 02:01:27,000
就看我讲的他是首先没有这个余法高量

3441
02:01:28,000 --> 02:01:30,000
然后他是一个 Proportional Fund

3442
02:01:30,000 --> 02:01:31,000
就是等

3443
02:01:31,000 --> 02:01:34,000
就是非等宽字体的一个环境

3444
02:01:34,000 --> 02:01:35,000
就是上次我们也讨论过这个问题

3445
02:01:35,000 --> 02:01:37,000
是比较奇怪的

3446
02:01:37,000 --> 02:01:39,000
然后还要记住左键右键中键

3447
02:01:39,000 --> 02:01:41,000
点起来是什么感觉

3448
02:01:41,000 --> 02:01:42,000
对

3449
02:01:42,000 --> 02:01:43,000
没错

3450
02:01:43,000 --> 02:01:45,000
之前我在知乎的时候

3451
02:01:45,000 --> 02:01:47,000
因为知乎之前很多是用那个 Python 写的

3452
02:01:48,000 --> 02:01:52,000
我发现有几个同事是用那个叫做 PyCharm

3453
02:01:53,000 --> 02:01:53,000
对

3454
02:01:54,000 --> 02:01:58,000
这算是一个 Python 的精神开发环境吧

3455
02:01:58,000 --> 02:01:59,000
就是 ID 了

3456
02:01:59,000 --> 02:02:00,000
他是 JetBrains

3457
02:02:01,000 --> 02:02:03,000
他就对那些什么

3458
02:02:03,000 --> 02:02:05,000
Debugging 的时候好像做的还可以

3459
02:02:06,000 --> 02:02:06,000
没错

3460
02:02:06,000 --> 02:02:09,000
PyCharm 最好用的地方就是 Debugging

3461
02:02:09,000 --> 02:02:09,000
应该说

3462
02:02:10,000 --> 02:02:11,000
在 PyCharm 出现之前

3463
02:02:12,000 --> 02:02:15,000
Python 的官方

3464
02:02:15,000 --> 02:02:18,000
和 Python 的 Defecto 的

3465
02:02:19,000 --> 02:02:20,000
最好的 ID 是什么

3466
02:02:21,000 --> 02:02:21,000
有吗

3467
02:02:23,000 --> 02:02:25,000
有吗

3468
02:02:25,000 --> 02:02:25,000
没有吧

3469
02:02:26,000 --> 02:02:27,000
Cyp

3470
02:02:28,000 --> 02:02:30,000
Cyp 也只是一个编辑器而已

3471
02:02:31,000 --> 02:02:31,000
对

3472
02:02:31,000 --> 02:02:33,000
它不算 ID

3473
02:02:33,000 --> 02:02:37,000
动态语言基本上用 ID 的会比较少

3474
02:02:38,000 --> 02:02:39,000
对

3475
02:02:39,000 --> 02:02:40,000
感觉那个时候

3476
02:02:40,000 --> 02:02:42,000
大家好像都只是在用某种

3477
02:02:43,000 --> 02:02:47,000
能够组织一系列文件的

3478
02:02:47,000 --> 02:02:49,000
比如是像那个

3479
02:02:50,000 --> 02:02:51,000
一时想不起来名字

3480
02:02:51,000 --> 02:02:53,000
就在那个 Sublime 出现之前

3481
02:02:53,000 --> 02:02:54,000
大家都喜欢用

3482
02:02:54,000 --> 02:02:55,000
TaxMate

3483
02:02:56,000 --> 02:02:56,000
对

3484
02:02:57,000 --> 02:03:01,000
还有那个 Mac 上很老的那个 BB Edit

3485
02:03:01,000 --> 02:03:02,000
OK

3486
02:03:02,000 --> 02:03:03,000
你说了

3487
02:03:03,000 --> 02:03:04,000
那个我从来没有用过

3488
02:03:05,000 --> 02:03:06,000
OK

3489
02:03:06,000 --> 02:03:08,000
我其实刚学

3490
02:03:08,000 --> 02:03:11,000
我刚学 Python 的时候用的是 Edit Plus

3491
02:03:11,000 --> 02:03:13,000
就是我曾经给你说过的

3492
02:03:13,000 --> 02:03:15,000
一个小红记事本的一个

3493
02:03:16,000 --> 02:03:18,000
Icon 的 Windows 上的编辑器

3494
02:03:18,000 --> 02:03:19,000
不知道现在还在不在

3495
02:03:20,000 --> 02:03:20,000
OK

3496
02:03:21,000 --> 02:03:21,000
对

3497
02:03:24,000 --> 02:03:24,000
然后

3498
02:03:25,000 --> 02:03:26,000
其实你看

3499
02:03:26,000 --> 02:03:28,000
比如说现在你用写 JavaScript 的话

3500
02:03:28,000 --> 02:03:29,000
好像没什么 ID 可以用

3501
02:03:31,000 --> 02:03:32,000
JavaScript

3502
02:03:33,000 --> 02:03:36,000
Visual Studio Code 其实就是一个很少的

3503
02:03:36,000 --> 02:03:38,000
很好的 JavaScript ID

3504
02:03:38,000 --> 02:03:40,000
但它算 ID 吗

3505
02:03:40,000 --> 02:03:42,000
还是算一个编辑器

3506
02:03:42,000 --> 02:03:43,000
好吧

3507
02:03:44,000 --> 02:03:45,000
Xcode

3508
02:03:45,000 --> 02:03:49,000
我觉得其实 Visual Studio Code 是一个介于

3509
02:03:50,000 --> 02:03:52,000
ID 和编辑器之间的东西

3510
02:03:52,000 --> 02:03:53,000
因为

3511
02:03:53,000 --> 02:03:54,000
ID 能做的事情

3512
02:03:54,000 --> 02:03:55,000
它基本上都能做

3513
02:03:55,000 --> 02:03:56,000
比如组织一堆文件

3514
02:03:57,000 --> 02:03:59,000
然后设定一个

3515
02:04:00,000 --> 02:04:03,000
项目被执行时候的各种参数

3516
02:04:04,000 --> 02:04:05,000
以及 DiBa

3517
02:04:06,000 --> 02:04:07,000
对

3518
02:04:07,000 --> 02:04:08,000
其实现在你现在

3519
02:04:08,000 --> 02:04:11,000
它出了一些很多比较新型的编辑器

3520
02:04:11,000 --> 02:04:14,000
其实都有或多或少带有一定的 ID 的属性了

3521
02:04:15,000 --> 02:04:16,000
没错

3522
02:04:16,000 --> 02:04:18,000
就是这种强化的编辑器

3523
02:04:18,000 --> 02:04:19,000
它是某种

3524
02:04:19,000 --> 02:04:22,000
介于纯粹的文本文件器和 ID 之间的状态

3525
02:04:22,000 --> 02:04:23,000
我觉得这挺好

3526
02:04:23,000 --> 02:04:26,000
就轻量级的工具挺好

3527
02:04:27,000 --> 02:04:27,000
没错

3528
02:04:28,000 --> 02:04:29,000
对

3529
02:04:29,000 --> 02:04:29,000
不是

3530
02:04:29,000 --> 02:04:30,000
怎么

3531
02:04:30,000 --> 02:04:33,000
怎么我没有揣到 ID 上去了

3532
02:04:33,000 --> 02:04:35,000
因为 ID 是一个很重要的 Debug 工具

3533
02:04:36,000 --> 02:04:37,000
OK

3534
02:04:38,000 --> 02:04:38,000
对

3535
02:04:38,000 --> 02:04:40,000
然后

3536
02:04:40,000 --> 02:04:41,000
刚才说到 JavaScript

3537
02:04:41,000 --> 02:04:43,000
其实大部分时候

3538
02:04:43,000 --> 02:04:46,000
给 JavaScriptDebug 的最好的工具

3539
02:04:46,000 --> 02:04:47,000
就是浏览器本身

3540
02:04:48,000 --> 02:04:49,000
那个

3541
02:04:50,000 --> 02:04:51,000
开发者工具栏

3542
02:04:52,000 --> 02:04:52,000
没错

3543
02:04:52,000 --> 02:04:53,000
就在

3544
02:04:53,000 --> 02:04:55,000
在 IE 里面 F 12

3545
02:04:56,000 --> 02:04:57,000
没错

3546
02:04:57,000 --> 02:04:58,000
在 IE

3547
02:04:58,000 --> 02:05:01,000
IE 是从 9 代才有 F 12 的

3548
02:05:01,000 --> 02:05:02,000
在

3549
02:05:03,000 --> 02:05:05,000
在 9 代出现之前

3550
02:05:05,000 --> 02:05:06,000
我们都指认 F 5

3551
02:05:06,000 --> 02:05:07,000
对吧

3552
02:05:10,000 --> 02:05:10,000
算等一下

3553
02:05:11,000 --> 02:05:14,000
那个 F 5 算是网页版的打印

3554
02:05:15,000 --> 02:05:16,000
出送方法吧

3555
02:05:16,000 --> 02:05:17,000
没错

3556
02:05:17,000 --> 02:05:18,000
F 5 其实就是一个

3557
02:05:18,000 --> 02:05:19,000
叫什么

3558
02:05:19,000 --> 02:05:19,000
刷新件

3559
02:05:19,000 --> 02:05:20,000
乌炮

3560
02:05:20,000 --> 02:05:20,000
对

3561
02:05:22,000 --> 02:05:23,000
Reload

3562
02:05:24,000 --> 02:05:24,000
对

3563
02:05:25,000 --> 02:05:28,000
就跟那个什么加入打印语句之后

3564
02:05:28,000 --> 02:05:28,000
重新 Reload 一下

3565
02:05:28,000 --> 02:05:30,000
看那个地方到底会不会出现那个东西吗

3566
02:05:31,000 --> 02:05:32,000
没错

3567
02:05:32,000 --> 02:05:34,000
然后这个网页里面就是

3568
02:05:35,000 --> 02:05:37,000
把那个 JavaScript 或者是 CSS

3569
02:05:37,000 --> 02:05:38,000
轻轻地改一下

3570
02:05:38,000 --> 02:05:38,000
看一下

3571
02:05:38,000 --> 02:05:39,000
是不是在那个长

3572
02:05:39,000 --> 02:05:42,000
如意料之内长出现一个位置

3573
02:05:42,000 --> 02:05:44,000
然后打了那个东西出来

3574
02:05:44,000 --> 02:05:45,000
对

3575
02:05:45,000 --> 02:05:47,000
乃至于像什么 LiveGuard 的这种

3576
02:05:48,000 --> 02:05:49,000
帮你按 F 5 的工具

3577
02:05:49,000 --> 02:05:50,000
就是你只要存了盘

3578
02:05:50,000 --> 02:05:52,000
它就帮你按下 F 5

3579
02:05:53,000 --> 02:05:54,000
这个还叫什么

3580
02:05:54,000 --> 02:05:55,000
这个还挺高级的一个工具

3581
02:05:55,000 --> 02:05:57,000
叫什么 Auto Refresh

3582
02:05:58,000 --> 02:05:58,000
对

3583
02:05:58,000 --> 02:06:01,000
其实这个就是来自 Fragment 的一种形式

3584
02:06:02,000 --> 02:06:03,000
对

3585
02:06:03,000 --> 02:06:04,000
我上次忘了说那个什么是

3586
02:06:04,000 --> 02:06:07,000
Angular 还是 React

3587
02:06:07,000 --> 02:06:09,000
还是什么一个

3588
02:06:09,000 --> 02:06:11,000
反正现在一个前端工具的框架

3589
02:06:11,000 --> 02:06:12,000
它既然还

3590
02:06:12,000 --> 02:06:15,000
就是现在就流行说自带一个叫做

3591
02:06:15,000 --> 02:06:17,000
Auto Reload Server

3592
02:06:17,000 --> 02:06:18,000
就是 Node.js 写的一个

3593
02:06:19,000 --> 02:06:20,000
一个

3594
02:06:20,000 --> 02:06:21,000
Server

3595
02:06:21,000 --> 02:06:22,000
然后它会插

3596
02:06:22,000 --> 02:06:23,000
往你那个网页里面代码

3597
02:06:23,000 --> 02:06:26,000
插了一些一段特别的 JavaScript 代码

3598
02:06:26,000 --> 02:06:28,000
然后它会维持一个

3599
02:06:29,000 --> 02:06:29,000
叫什么来的

3600
02:06:30,000 --> 02:06:33,000
WebSocket 或者是 HGP 的传连接

3601
02:06:34,000 --> 02:06:35,000
然后探测到你那边

3602
02:06:35,000 --> 02:06:36,000
保持到那个东西之后

3603
02:06:36,000 --> 02:06:38,000
它会通过传连接通知服务器

3604
02:06:38,000 --> 02:06:40,000
通知你的浏览器

3605
02:06:41,000 --> 02:06:42,000
自动刷新那个代码

3606
02:06:42,000 --> 02:06:43,000
我这个方法要看一下

3607
02:06:43,000 --> 02:06:44,000
我要是最了

3608
02:06:44,000 --> 02:06:45,000
Brakit 吧

3609
02:06:45,000 --> 02:06:47,000
就是你说的 Brakit 吗

3610
02:06:47,000 --> 02:06:48,000
就是那个写前端的

3611
02:06:48,000 --> 02:06:50,000
很多有好几个都是这种

3612
02:06:50,000 --> 02:06:53,000
都是这个框架的

3613
02:06:53,000 --> 02:06:55,000
一些帮助的工具

3614
02:06:55,000 --> 02:06:56,000
都是从不同方式来实现的

3615
02:06:57,000 --> 02:06:58,000
Espresso 也是这样的

3616
02:06:58,000 --> 02:06:58,000
我记得

3617
02:07:01,000 --> 02:07:02,000
对 没错

3618
02:07:03,000 --> 02:07:05,000
我想还装了一个叫什么 CodeKit

3619
02:07:05,000 --> 02:07:06,000
我已经好久没有打开过了

3620
02:07:08,000 --> 02:07:08,000
然后后来是什么

3621
02:07:08,000 --> 02:07:10,000
那个 Chrome 还是

3622
02:07:12,000 --> 02:07:14,000
横空出示带了一个叫做

3623
02:07:14,000 --> 02:07:14,000
Counsole 吧

3624
02:07:14,000 --> 02:07:15,000
对这个工具

3625
02:07:15,000 --> 02:07:18,000
对 其实是 Brakit 的一个工具

3626
02:07:18,000 --> 02:07:19,000
对 叫做 Inspector 吧

3627
02:07:19,000 --> 02:07:20,000
最早的那个东西

3628
02:07:21,000 --> 02:07:21,000
对

3629
02:07:21,000 --> 02:07:22,000
然后就可以什么

3630
02:07:22,000 --> 02:07:25,000
就像那个 Debug 那样

3631
02:07:25,000 --> 02:07:26,000
可以动态修改

3632
02:07:26,000 --> 02:07:28,000
网页中的某个结构

3633
02:07:28,000 --> 02:07:31,000
对 而且可以让你停在某一行代码上

3634
02:07:31,000 --> 02:07:32,000
没错

3635
02:07:32,000 --> 02:07:33,000
而且不用认真

3636
02:07:33,000 --> 02:07:35,000
可以下断点实在是太人性了

3637
02:07:38,000 --> 02:07:39,000
没错

3638
02:07:39,000 --> 02:07:39,000
对 我觉得

3639
02:07:40,000 --> 02:07:42,000
我记得当初切换到 Chrome

3640
02:07:42,000 --> 02:07:45,000
可能也就是因为 Inspector 的功能

3641
02:07:45,000 --> 02:07:46,000
实在是要比

3642
02:07:47,000 --> 02:07:48,000
Firebug 强太多

3643
02:07:49,000 --> 02:07:49,000
然后

3644
02:07:49,000 --> 02:07:51,000
就现在也是吧

3645
02:07:51,000 --> 02:07:53,000
现在 Chrome 的开发者工具

3646
02:07:53,000 --> 02:07:54,000
就是 Inspector

3647
02:07:54,000 --> 02:07:56,000
应该是在目前为止是在

3648
02:07:56,000 --> 02:07:57,000
像是 Safari

3649
02:07:58,000 --> 02:07:58,000
还有 Firefox

3650
02:07:58,000 --> 02:08:01,000
你们之间最强大的一个吧

3651
02:08:02,000 --> 02:08:03,000
嗯 我觉得是这样

3652
02:08:03,000 --> 02:08:05,000
但是肯定有听众觉得不是这样的

3653
02:08:05,000 --> 02:08:05,000
但

3654
02:08:06,000 --> 02:08:08,000
但我反正最近也没有什么用

3655
02:08:08,000 --> 02:08:10,000
肯定是 Firefox

3656
02:08:10,000 --> 02:08:13,000
是 Firebug 的死忠

3657
02:08:14,000 --> 02:08:14,000
不

3658
02:08:14,000 --> 02:08:18,000
现在 Firefox 其实自带一个 Debug 工具

3659
02:08:18,000 --> 02:08:19,000
就不在

3660
02:08:19,000 --> 02:08:22,000
就是它就是把 Firebug 整合进去了

3661
02:08:23,000 --> 02:08:24,000
OK

3662
02:08:24,000 --> 02:08:25,000
是这么来的

3663
02:08:25,000 --> 02:08:25,000
我记得

3664
02:08:25,000 --> 02:08:27,000
对 是这样的

3665
02:08:27,000 --> 02:08:27,000
我没记错

3666
02:08:27,000 --> 02:08:29,000
因为当时就是说

3667
02:08:29,000 --> 02:08:31,000
开发者都不愿意

3668
02:08:32,000 --> 02:08:33,000
用 Firefox

3669
02:08:33,000 --> 02:08:35,000
就是因为 Chrome 的开发者

3670
02:08:35,000 --> 02:08:37,000
Inspector 工具实在太好用了

3671
02:08:37,000 --> 02:08:39,000
然后他们就说我自己就感觉到危机了

3672
02:08:40,000 --> 02:08:41,000
赶快把那个

3673
02:08:41,000 --> 02:08:42,000
因为之前 Firefox

3674
02:08:42,000 --> 02:08:44,000
以前都是一个非官方第三方的插件

3675
02:08:44,000 --> 02:08:45,000
对吧

3676
02:08:45,000 --> 02:08:46,000
对

3677
02:08:46,000 --> 02:08:48,000
这毕竟不是亲儿子

3678
02:08:48,000 --> 02:08:49,000
做起来还是没有那么顺手

3679
02:08:49,000 --> 02:08:50,000
然后后来

3680
02:08:50,000 --> 02:08:51,000
不行

3681
02:08:51,000 --> 02:08:52,000
看不下去了

3682
02:08:52,000 --> 02:08:53,000
还是整合进来吧

3683
02:08:53,000 --> 02:08:54,000
然后

3684
02:08:54,000 --> 02:08:56,000
然并暖

3685
02:08:56,000 --> 02:08:57,000
对 为师以马

3686
02:08:57,000 --> 02:08:58,000
现在应该是

3687
02:08:58,000 --> 02:09:01,000
webkit

3688
02:09:02,000 --> 02:09:04,000
以 webkit 为基础的

3689
02:09:04,000 --> 02:09:07,000
Browser 施展率强过改口

3690
02:09:08,000 --> 02:09:09,000
对

3691
02:09:09,000 --> 02:09:10,000
现在不是还有

3692
02:09:10,000 --> 02:09:13,000
你看上次我们前几条

3693
02:09:13,000 --> 02:09:14,000
那个 React Native

3694
02:09:14,000 --> 02:09:16,000
这种逆天的玩意儿

3695
02:09:16,000 --> 02:09:19,000
它竟然能够在 Chrome 的 Inspector 里面

3696
02:09:20,000 --> 02:09:22,000
去实时修改

3697
02:09:22,000 --> 02:09:24,000
跑在 iOS 上面的应用

3698
02:09:24,000 --> 02:09:25,000
你感性吗

3699
02:09:25,000 --> 02:09:27,000
对 实在是太

3700
02:09:28,000 --> 02:09:28,000
Awesomeness

3701
02:09:28,000 --> 02:09:29,000
Full of awesome

3702
02:09:29,000 --> 02:09:30,000
对

3703
02:09:30,000 --> 02:09:33,000
因为以前 iOS 还要重新 reload

3704
02:09:33,000 --> 02:09:34,000
还要再传一下

3705
02:09:34,000 --> 02:09:35,000
传到那个

3706
02:09:35,000 --> 02:09:37,000
真机里面才可以重试

3707
02:09:37,000 --> 02:09:38,000
对吧

3708
02:09:38,000 --> 02:09:40,000
它就可以通过远程的方法

3709
02:09:40,000 --> 02:09:41,000
直接修改

3710
02:09:41,000 --> 02:09:42,000
Chrome 的里面一个状态

3711
02:09:42,000 --> 02:09:44,000
然后能够瞬间

3712
02:09:44,000 --> 02:09:46,000
同步到

3713
02:09:46,000 --> 02:09:46,000
不叫瞬间同步

3714
02:09:46,000 --> 02:09:47,000
它就是直接是

3715
02:09:49,000 --> 02:09:50,000
什么理解呢

3716
02:09:50,000 --> 02:09:53,000
就是 iOS 上面那个应用渲染的结构

3717
02:09:53,000 --> 02:09:54,000
是来自于 Chrome 里面

3718
02:09:54,000 --> 02:09:55,000
Inspector 的结构

3719
02:09:56,000 --> 02:09:56,000
对

3720
02:09:57,000 --> 02:09:58,000
反正挺黑科技的

3721
02:09:59,000 --> 02:10:00,000
没错

3722
02:10:00,000 --> 02:10:02,000
总之前端开发者实在是太幸福了

3723
02:10:02,000 --> 02:10:03,000
相比之下

3724
02:10:03,000 --> 02:10:04,000
你看这些

3725
02:10:05,000 --> 02:10:06,000
做服务端的人

3726
02:10:06,000 --> 02:10:07,000
就 debug 的

3727
02:10:07,000 --> 02:10:09,000
是实在是没有这么

3728
02:10:09,000 --> 02:10:10,000
称手的

3729
02:10:10,000 --> 02:10:11,000
debug 的工具

3730
02:10:13,000 --> 02:10:15,000
当然也跟问题的领域有关

3731
02:10:15,000 --> 02:10:16,000
因为前端的东西

3732
02:10:16,000 --> 02:10:18,000
是比较容易所见其所得的

3733
02:10:18,000 --> 02:10:19,000
而后端的东西

3734
02:10:19,000 --> 02:10:20,000
很多时候是

3735
02:10:21,000 --> 02:10:23,000
没有什么东西是可以直观可见的

3736
02:10:23,000 --> 02:10:23,000
不是吧

3737
02:10:24,000 --> 02:10:26,000
没有意义啊

3738
02:10:26,000 --> 02:10:27,000
对 你做了一个

3739
02:10:30,000 --> 02:10:31,000
高并发

3740
02:10:31,000 --> 02:10:35,000
可以及时适应

3741
02:10:35,000 --> 02:10:37,000
用户暴涨的这么一个服务

3742
02:10:37,000 --> 02:10:39,000
你怎么把它所见其所得

3743
02:10:39,000 --> 02:10:41,000
就是整个

3744
02:10:41,000 --> 02:10:42,000
测试过程是没有办法

3745
02:10:42,000 --> 02:10:44,000
整个 debug 排查的过程

3746
02:10:44,000 --> 02:10:45,000
是没有办法用一个

3747
02:10:46,000 --> 02:10:47,000
只需要按一个键

3748
02:10:47,000 --> 02:10:49,000
就可以完成的工具来实现

3749
02:10:50,000 --> 02:10:52,000
对 而且现在很多这种

3750
02:10:52,000 --> 02:10:53,000
大的这种应用

3751
02:10:53,000 --> 02:10:54,000
它都是跨系统的

3752
02:10:54,000 --> 02:10:56,000
这不是一个单一进程的东西

3753
02:10:56,000 --> 02:10:57,000
就像什么

3754
02:10:57,000 --> 02:11:00,000
来自 Google App Engine

3755
02:11:00,000 --> 02:11:00,000
你知道吗

3756
02:11:01,000 --> 02:11:02,000
跑到云服那个平台吗

3757
02:11:02,000 --> 02:11:03,000
对

3758
02:11:03,000 --> 02:11:04,000
当时不是最

3759
02:11:04,000 --> 02:11:05,000
今年出了一个什么

3760
02:11:06,000 --> 02:11:07,000
叫做

3761
02:11:07,000 --> 02:11:09,000
好像是叫做 Cloud Debugging

3762
02:11:09,000 --> 02:11:10,000
叫做云除虫

3763
02:11:11,000 --> 02:11:12,000
其实就是说

3764
02:11:12,000 --> 02:11:14,000
当你的应用程序跑在

3765
02:11:14,000 --> 02:11:15,000
不止一台机器

3766
02:11:15,000 --> 02:11:17,000
甚至不止一个数据中心的情况下

3767
02:11:17,000 --> 02:11:18,000
你怎么去统筹

3768
02:11:19,000 --> 02:11:21,000
多个进程多台机器

3769
02:11:22,000 --> 02:11:24,000
协作才能产生的一个 bug

3770
02:11:24,000 --> 02:11:25,000
其实想想还是挺担疼的

3771
02:11:26,000 --> 02:11:27,000
嗯 非常真的

3772
02:11:28,000 --> 02:11:28,000
而且

3773
02:11:31,000 --> 02:11:32,000
有时候

3774
02:11:32,000 --> 02:11:34,000
一个程序崩溃了

3775
02:11:34,000 --> 02:11:36,000
前端只需要简单的

3776
02:11:36,000 --> 02:11:38,000
把程序再跑一遍就可以了

3777
02:11:38,000 --> 02:11:39,000
可是后端

3778
02:11:39,000 --> 02:11:40,000
你可能唯一能拿到的东西

3779
02:11:40,000 --> 02:11:42,000
就是一个 Dump

3780
02:11:43,000 --> 02:11:44,000
也就是这个程序

3781
02:11:44,000 --> 02:11:46,000
它挂掉的时候的车后现场

3782
02:11:46,000 --> 02:11:48,000
然后你要像一个

3783
02:11:48,000 --> 02:11:50,000
像一个法警一样

3784
02:11:51,000 --> 02:11:52,000
法医

3785
02:11:52,000 --> 02:11:53,000
法院真相

3786
02:11:53,000 --> 02:11:53,000
对

3787
02:11:54,000 --> 02:11:56,000
就试图通过现场的一点点

3788
02:11:56,000 --> 02:11:57,000
蛛丝马迹

3789
02:11:57,000 --> 02:12:00,000
还原出这个案情是怎么发生的

3790
02:12:00,000 --> 02:12:01,000
然后

3791
02:12:01,000 --> 02:12:04,000
只能做一个数据叫什么 post mode

3792
02:12:05,000 --> 02:12:07,000
就是死后的这样一个试检

3793
02:12:07,000 --> 02:12:10,000
你没有办法让整个车祸再发生一遍

3794
02:12:10,000 --> 02:12:11,000
这也是非常痛苦的

3795
02:12:11,000 --> 02:12:13,000
而且耗时的一件事

3796
02:12:13,000 --> 02:12:14,000
因为 CoreDump

3797
02:12:15,000 --> 02:12:16,000
不管是 CoreDump 还是 HipDump

3798
02:12:16,000 --> 02:12:19,000
还是整个环境的 MemoryDump

3799
02:12:19,000 --> 02:12:20,000
都是非常巨大

3800
02:12:20,000 --> 02:12:20,000
而且

3801
02:12:21,000 --> 02:12:22,000
需要非常

3802
02:12:24,000 --> 02:12:26,000
敏锐的观察力和精力

3803
02:12:26,000 --> 02:12:27,000
才能搞定这些事情

3804
02:12:28,000 --> 02:12:28,000
没错

3805
02:12:29,000 --> 02:12:30,000
而且你遇到那种就是

3806
02:12:30,000 --> 02:12:32,000
你还不能用什么打印

3807
02:12:32,000 --> 02:12:33,000
出重法

3808
02:12:33,000 --> 02:12:33,000
因为

3809
02:12:34,000 --> 02:12:36,000
第一个你没法打印到某个具体的地方去

3810
02:12:36,000 --> 02:12:38,000
你可能就是用 Cislog 要汇总

3811
02:12:38,000 --> 02:12:40,000
那顺序都是错的

3812
02:12:40,000 --> 02:12:41,000
然后

3813
02:12:41,000 --> 02:12:42,000
那各个机上面时间

3814
02:12:42,000 --> 02:12:44,000
它也不一定是完全同步的

3815
02:12:44,000 --> 02:12:44,000
对吧

3816
02:12:44,000 --> 02:12:45,000
对

3817
02:12:46,000 --> 02:12:47,000
根本就没有什么卵可以打

3818
02:12:49,000 --> 02:12:50,000
再然后就是

3819
02:12:50,000 --> 02:12:52,000
如果你重启一个服务

3820
02:12:52,000 --> 02:12:53,000
可能它那个

3821
02:12:54,000 --> 02:12:56,000
如果你是一个小就是 Micro Service

3822
02:12:56,000 --> 02:12:57,000
留意服务的价格可能还行

3823
02:12:57,000 --> 02:12:59,000
重启一个服务问题不是很大

3824
02:12:59,000 --> 02:13:01,000
你要上现在很多什么写那个

3825
02:13:02,000 --> 02:13:03,000
游戏的那种

3826
02:13:03,000 --> 02:13:05,000
Server 就是游戏的服务器

3827
02:13:05,000 --> 02:13:07,000
它好像光预热

3828
02:13:07,000 --> 02:13:10,000
这个数据集可能只要好几分钟重启一次

3829
02:13:10,000 --> 02:13:11,000
对

3830
02:13:12,000 --> 02:13:13,000
那就哭吧

3831
02:13:13,000 --> 02:13:14,000
没错

3832
02:13:15,000 --> 02:13:17,000
或者那些搞大数据分析的人

3833
02:13:17,000 --> 02:13:19,000
你说他们怎么才能测试自己

3834
02:13:19,000 --> 02:13:20,000
写的这个东西对不对

3835
02:13:20,000 --> 02:13:22,000
这个算法可能有一些

3836
02:13:22,000 --> 02:13:23,000
非常难以

3837
02:13:24,000 --> 02:13:25,000
解决的问题

3838
02:13:25,000 --> 02:13:26,000
他们可能要等上

3839
02:13:26,000 --> 02:13:27,000
几个小时

3840
02:13:27,000 --> 02:13:28,000
那是几天的时间

3841
02:13:28,000 --> 02:13:29,000
把整个数据再跑一遍

3842
02:13:29,000 --> 02:13:30,000
就这是唯一的方法

3843
02:13:30,000 --> 02:13:32,000
就没有别的

3844
02:13:32,000 --> 02:13:33,000
可以动态去

3845
02:13:34,000 --> 02:13:35,000
挑事的方法

3846
02:13:36,000 --> 02:13:38,000
所以其实最理想的那个状态

3847
02:13:38,000 --> 02:13:40,000
是那个什么 RLAN 的那一套东西

3848
02:13:41,000 --> 02:13:43,000
RLAN 里面它那些每个

3849
02:13:43,000 --> 02:13:46,000
它的小的紫禁程式可以

3850
02:13:46,000 --> 02:13:47,000
独立重启的

3851
02:13:47,000 --> 02:13:48,000
然后

3852
02:13:48,000 --> 02:13:52,000
它可以动态登录到程序运行态里面去

3853
02:13:52,000 --> 02:13:53,000
动态修改局部代码

3854
02:13:53,000 --> 02:13:55,000
然后局部重启

3855
02:13:55,000 --> 02:13:56,000
就是不用

3856
02:13:56,000 --> 02:13:58,000
不用重启整个程序

3857
02:13:58,000 --> 02:14:00,000
你局部可能更新一个函数

3858
02:14:00,000 --> 02:14:03,000
更新一个紫禁程

3859
02:14:03,000 --> 02:14:04,000
然后再抛起来

3860
02:14:05,000 --> 02:14:06,000
非常方便

3861
02:14:06,000 --> 02:14:06,000
非常牛逼的

3862
02:14:07,000 --> 02:14:07,000
OK

3863
02:14:08,000 --> 02:14:09,000
听起来还不错

3864
02:14:10,000 --> 02:14:12,000
所以我是对 RLAN 没有任何了解

3865
02:14:12,000 --> 02:14:15,000
而且不知道为什么也没有任何兴趣

3866
02:14:18,000 --> 02:14:19,000
因为它其实运营

3867
02:14:19,000 --> 02:14:22,000
那个是就说到运营商级别的一个环境

3868
02:14:23,000 --> 02:14:24,000
就是它运营商

3869
02:14:24,000 --> 02:14:25,000
比如说你不可能说

3870
02:14:25,000 --> 02:14:28,000
我这个电话交换系统坏了

3871
02:14:28,000 --> 02:14:29,000
我得把整个停机

3872
02:14:29,000 --> 02:14:31,000
然后来检修

3873
02:14:31,000 --> 02:14:32,000
然后重启

3874
02:14:32,000 --> 02:14:34,000
尝试看有没有出错

3875
02:14:34,000 --> 02:14:34,000
不可能

3876
02:14:34,000 --> 02:14:36,000
因为你电话停机了

3877
02:14:36,000 --> 02:14:37,000
那就是什么

3878
02:14:37,000 --> 02:14:40,000
会造成重大社会危机的

3879
02:14:41,000 --> 02:14:41,000
没错

3880
02:14:41,000 --> 02:14:41,000
对吧

3881
02:14:42,000 --> 02:14:43,000
RLAN 是谁找出来的

3882
02:14:43,000 --> 02:14:44,000
Elysian

3883
02:14:44,000 --> 02:14:45,000
Elysian

3884
02:14:45,000 --> 02:14:45,000
对

3885
02:14:45,000 --> 02:14:46,000
Arx language

3886
02:14:50,000 --> 02:14:53,000
这个也是应该是最好的一个

3887
02:14:54,000 --> 02:14:55,000
可以除重的环境

3888
02:14:56,000 --> 02:14:59,000
这其实像大部分的其他的

3889
02:15:00,000 --> 02:15:02,000
语言写的代码都是不可以

3890
02:15:03,000 --> 02:15:04,000
那种局部除重的

3891
02:15:05,000 --> 02:15:06,000
所以在统一进程里面

3892
02:15:06,000 --> 02:15:07,000
我也都不可以的

3893
02:15:08,000 --> 02:15:11,000
Lisp 好像有部分是可以

3894
02:15:12,000 --> 02:15:14,000
至少最早的那个 Lisp 是可以登录进去

3895
02:15:14,000 --> 02:15:15,000
可以改动态修改

3896
02:15:15,000 --> 02:15:17,000
就这个时候要求它是一个动态语言

3897
02:15:17,000 --> 02:15:18,000
对这是必须的

3898
02:15:18,000 --> 02:15:18,000
进太

3899
02:15:19,000 --> 02:15:20,000
就编译型语言就基本没戏了

3900
02:15:20,000 --> 02:15:22,000
就已经被排除在门槛之外

3901
02:15:22,000 --> 02:15:22,000
就不用再下了

3902
02:15:22,000 --> 02:15:25,000
原理上就不支持这一点

3903
02:15:25,000 --> 02:15:25,000
是吧

3904
02:15:26,000 --> 02:15:27,000
动态语言其实也就比较少

3905
02:15:28,000 --> 02:15:29,000
主要是一些函数式的语言

3906
02:15:29,000 --> 02:15:31,000
有望支持这一点

3907
02:15:32,000 --> 02:15:33,000
对

3908
02:15:35,000 --> 02:15:38,000
然后做后端的人

3909
02:15:38,000 --> 02:15:40,000
或者说做独立 APP 的人

3910
02:15:40,000 --> 02:15:42,000
或者做一个比较需要

3911
02:15:43,000 --> 02:15:45,000
在一段时间里面查看

3912
02:15:45,000 --> 02:15:47,000
这个程序跑起来没有问题的人

3913
02:15:47,000 --> 02:15:51,000
可能还会用到一个 Debug 的一个变种

3914
02:15:51,000 --> 02:15:53,000
就叫做 Profiler

3915
02:15:53,000 --> 02:15:54,000
或者是 Profiling Tool

3916
02:15:55,000 --> 02:15:56,000
就这个东西可以

3917
02:15:57,000 --> 02:16:00,000
把一个程序包落在一个

3918
02:16:01,000 --> 02:16:03,000
受到监控的运行环境里面

3919
02:16:03,000 --> 02:16:06,000
然后看这个程序的运行的过程中

3920
02:16:06,000 --> 02:16:08,000
会不会有一些比如说

3921
02:16:09,000 --> 02:16:12,000
响应太慢或者是内存泄漏之类的问题

3922
02:16:13,000 --> 02:16:15,000
这些东西也可以是一个广义上的

3923
02:16:16,000 --> 02:16:17,000
Debug 的 Tool

3924
02:16:18,000 --> 02:16:20,000
比如说命令行下面有

3925
02:16:20,000 --> 02:16:21,000
叫 Vagrant

3926
02:16:22,000 --> 02:16:23,000
是一个

3927
02:16:24,000 --> 02:16:25,000
其实是虚拟机吧

3928
02:16:25,000 --> 02:16:27,000
就是它会把一个 C 程序

3929
02:16:27,000 --> 02:16:28,000
在这个虚拟机里面运行

3930
02:16:28,000 --> 02:16:29,000
然后

3931
02:16:29,000 --> 02:16:31,000
每运行一步就告诉你说

3932
02:16:31,000 --> 02:16:34,000
这个程序运行的运行到这儿

3933
02:16:34,000 --> 02:16:36,000
是不是已经扔出了一个

3934
02:16:37,000 --> 02:16:38,000
比如说

3935
02:16:39,000 --> 02:16:41,000
已经没有办法被

3936
02:16:41,000 --> 02:16:43,000
找到的一个内存区域

3937
02:16:44,000 --> 02:16:47,000
又比如说 S Code 里面有专门的 Profiling Tool

3938
02:16:47,000 --> 02:16:49,000
然后你可以让一个 APP

3939
02:16:49,000 --> 02:16:50,000
在一段时间内运行

3940
02:16:50,000 --> 02:16:51,000
然后它会

3941
02:16:52,000 --> 02:16:54,000
甚至是用图形化的方式会告诉你说

3942
02:16:54,000 --> 02:16:56,000
这里又漏了一笔 KB 数据

3943
02:16:56,000 --> 02:16:58,000
这里又漏了几笔 KB 数据

3944
02:16:58,000 --> 02:16:58,000
然后一些

3945
02:16:59,000 --> 02:16:59,000
可能你

3946
02:17:00,000 --> 02:17:01,000
跑上

3947
02:17:02,000 --> 02:17:03,000
一两分钟没问题的 APP

3948
02:17:03,000 --> 02:17:05,000
跑上一个小时之后就会

3949
02:17:05,000 --> 02:17:06,000
Crash

3950
02:17:06,000 --> 02:17:06,000
你不知道为什么

3951
02:17:06,000 --> 02:17:08,000
然后你用 Profile 一看

3952
02:17:08,000 --> 02:17:08,000
哦

3953
02:17:08,000 --> 02:17:10,000
它原来一直在泄漏内存

3954
02:17:10,000 --> 02:17:12,000
然后泄漏了一个小时之后

3955
02:17:12,000 --> 02:17:14,000
你的 iPad 终于没有内存了

3956
02:17:14,000 --> 02:17:15,000
所以

3957
02:17:15,000 --> 02:17:16,000
它就 Crash

3958
02:17:17,000 --> 02:17:17,000
对

3959
02:17:17,000 --> 02:17:18,000
没错

3960
02:17:19,000 --> 02:17:20,000
然后有时候就是

3961
02:17:21,000 --> 02:17:23,000
如果你写 iOS App 的时候

3962
02:17:23,000 --> 02:17:24,000
有时候

3963
02:17:24,000 --> 02:17:25,000
你在调试过程中它有

3964
02:17:26,000 --> 02:17:28,000
框框给你跳了一大堆会编代码

3965
02:17:28,000 --> 02:17:30,000
你说你这个时候应该怎么办

3966
02:17:31,000 --> 02:17:31,000
啊是吗

3967
02:17:32,000 --> 02:17:32,000
会吗

3968
02:17:32,000 --> 02:17:33,000
就是

3969
02:17:33,000 --> 02:17:34,000
对啊就是

3970
02:17:34,000 --> 02:17:35,000
太惨了死了死了

3971
02:17:36,000 --> 02:17:38,000
所以我是不会

3972
02:17:38,000 --> 02:17:39,000
我是不会会编的

3973
02:17:41,000 --> 02:17:42,000
我也不能说会会编吧

3974
02:17:42,000 --> 02:17:43,000
但是

3975
02:17:43,000 --> 02:17:44,000
呃

3976
02:17:44,000 --> 02:17:45,000
在这种情况之下

3977
02:17:45,000 --> 02:17:46,000
基本上你都知道

3978
02:17:46,000 --> 02:17:48,000
你其实只要一步一步跳下去

3979
02:17:48,000 --> 02:17:49,000
或者说

3980
02:17:49,000 --> 02:17:50,000
你只要

3981
02:17:50,000 --> 02:17:52,000
把断点设在一个比较

3982
02:17:54,000 --> 02:17:55,000
比较正常的地方

3983
02:17:55,000 --> 02:17:56,000
然后一步一步跳

3984
02:17:56,000 --> 02:17:57,000
你找到自己

3985
02:17:57,000 --> 02:17:59,000
要跳进会编之前那一步

3986
02:17:59,000 --> 02:18:01,000
就知道问题出在哪了

3987
02:18:01,000 --> 02:18:02,000
倒不是特别的严重

3988
02:18:02,000 --> 02:18:03,000
其实我只是想说

3989
02:18:04,000 --> 02:18:06,000
有些 Debugger 会

3990
02:18:06,000 --> 02:18:07,000
把你引领到这个地方

3991
02:18:07,000 --> 02:18:09,000
就是刚才还是

3992
02:18:09,000 --> 02:18:10,000
高等语言

3993
02:18:10,000 --> 02:18:11,000
突然一下子

3994
02:18:11,000 --> 02:18:12,000
跳到了这个会班里

3995
02:18:12,000 --> 02:18:13,000
会编里面

3996
02:18:13,000 --> 02:18:14,000
你应该怎么办

3997
02:18:15,000 --> 02:18:16,000
对

3998
02:18:16,000 --> 02:18:17,000
这种情况下其实

3999
02:18:18,000 --> 02:18:19,000
我觉得还是有必要

4000
02:18:19,000 --> 02:18:20,000
稍微学一点

4001
02:18:21,000 --> 02:18:21,000
会编

4002
02:18:21,000 --> 02:18:23,000
就至少你不用知道

4003
02:18:23,000 --> 02:18:24,000
你不用把所有指令背下来

4004
02:18:24,000 --> 02:18:27,000
你也不用有能力

4005
02:18:27,000 --> 02:18:28,000
去

4006
02:18:29,000 --> 02:18:29,000
呃

4007
02:18:30,000 --> 02:18:32,000
逆向工程或者是

4008
02:18:32,000 --> 02:18:34,000
纯用的会编来写一个

4009
02:18:34,000 --> 02:18:36,000
3 D 加速程序之类的

4010
02:18:36,000 --> 02:18:37,000
这些功能技巧

4011
02:18:38,000 --> 02:18:39,000
你至少要了解一些

4012
02:18:39,000 --> 02:18:41,000
比如说 Call in Convention

4013
02:18:41,000 --> 02:18:42,000
是什么

4014
02:18:43,000 --> 02:18:43,000
就

4015
02:18:44,000 --> 02:18:45,000
Costec 是什么

4016
02:18:45,000 --> 02:18:46,000
然后这些东西你可以

4017
02:18:47,000 --> 02:18:48,000
了解一些

4018
02:18:48,000 --> 02:18:49,000
最基本的会编的概念

4019
02:18:49,000 --> 02:18:49,000
那

4020
02:18:50,000 --> 02:18:52,000
对于 Debugger 其实有帮助

4021
02:18:53,000 --> 02:18:55,000
所以今天大概把

4022
02:18:55,000 --> 02:18:57,000
调试这一块

4023
02:18:57,000 --> 02:18:58,000
总结一下吧

4024
02:18:58,000 --> 02:18:59,000
纵了一下

4025
02:18:59,000 --> 02:19:00,000
那

4026
02:19:00,000 --> 02:19:01,000
我觉得

4027
02:19:01,000 --> 02:19:03,000
调试技术不管再怎么

4028
02:19:04,000 --> 02:19:06,000
重要还是

4029
02:19:06,000 --> 02:19:07,000
没有办法抵过

4030
02:19:07,000 --> 02:19:10,000
养成一个良好的编程习惯

4031
02:19:10,000 --> 02:19:11,000
来的更重要一点

4032
02:19:12,000 --> 02:19:13,000
就比如说我们前面也提到啊

4033
02:19:13,000 --> 02:19:13,000
就

4034
02:19:14,000 --> 02:19:15,000
呃可以

4035
02:19:15,000 --> 02:19:16,000
程序可以成为两种

4036
02:19:16,000 --> 02:19:18,000
一种是先确定边界条件

4037
02:19:18,000 --> 02:19:19,000
然后写代码

4038
02:19:19,000 --> 02:19:20,000
另外一种是先写代码

4039
02:19:20,000 --> 02:19:21,000
然后去找这个

4040
02:19:21,000 --> 02:19:24,000
让这个代码能够正确工作的

4041
02:19:24,000 --> 02:19:25,000
边界条件是什么

4042
02:19:25,000 --> 02:19:27,000
是两种竟然不同态度

4043
02:19:27,000 --> 02:19:27,000
那

4044
02:19:28,000 --> 02:19:29,000
也许后一种态度会让你

4045
02:19:29,000 --> 02:19:31,000
对于所有的

4046
02:19:31,000 --> 02:19:33,000
Debug 工具都撩出指掌

4047
02:19:33,000 --> 02:19:33,000
但

4048
02:19:34,000 --> 02:19:35,000
从严格意义上来说

4049
02:19:35,000 --> 02:19:37,000
还是有前一种

4050
02:19:37,000 --> 02:19:40,000
习惯对你的帮助更大

4051
02:19:40,000 --> 02:19:41,000
行吧

4052
02:19:41,000 --> 02:19:42,000
那

4053
02:19:42,000 --> 02:19:46,000
这一期录了也有两个多小时

4054
02:19:46,000 --> 02:19:48,000
可能最终剪出来没有那么多

4055
02:19:48,000 --> 02:19:48,000
因为

4056
02:19:49,000 --> 02:19:51,000
我们中途也遇到了若干技术故障

4057
02:19:51,000 --> 02:19:51,000
但

4058
02:19:52,000 --> 02:19:54,000
这一期总算也是达到了长度

4059
02:19:55,000 --> 02:19:57,000
我上一期发现你们的 IT 功能

4060
02:19:57,000 --> 02:19:57,000
也在

4061
02:19:57,000 --> 02:19:58,000
也在更

4062
02:19:58,000 --> 02:19:59,000
也在拼长度啊

4063
02:19:59,000 --> 02:20:00,000
这样对吗

4064
02:20:01,000 --> 02:20:02,000
根本停不下来

4065
02:20:04,000 --> 02:20:04,000
呃

4066
02:20:04,000 --> 02:20:05,000
到底发生了什么

4067
02:20:05,000 --> 02:20:06,000
我在听的时候

4068
02:20:06,000 --> 02:20:07,000
我其实一开始的时候我就说

4069
02:20:07,000 --> 02:20:09,000
我靠这一期怎么看起来这么长

4070
02:20:09,000 --> 02:20:10,000
结果听出

4071
02:20:10,000 --> 02:20:10,000
听了之后

4072
02:20:10,000 --> 02:20:12,000
我发现真的这么长

4073
02:20:12,000 --> 02:20:12,000
而且你们

4074
02:20:14,000 --> 02:20:14,000
好吧

4075
02:20:14,000 --> 02:20:15,000
很不习惯

4076
02:20:15,000 --> 02:20:16,000
是不是

4077
02:20:16,000 --> 02:20:17,000
yeah

4078
02:20:18,000 --> 02:20:18,000
好了

4079
02:20:18,000 --> 02:20:19,000
那

4080
02:20:20,000 --> 02:20:22,000
您刚刚收听到的是

4081
02:20:22,000 --> 02:20:23,000
IPN Podcast 的网络旗下的

4082
02:20:23,000 --> 02:20:24,000
IT 技术节目

4083
02:20:24,000 --> 02:20:25,000
内阔恐慌

4084
02:20:26,000 --> 02:20:29,000
IPN 旗下的其他六档 Podcast

4085
02:20:29,000 --> 02:20:29,000
包括

4086
02:20:29,000 --> 02:20:31,000
Softcore 技术主题节目

4087
02:20:31,000 --> 02:20:32,000
IT 公论

4088
02:20:32,000 --> 02:20:33,000
意料主题节目

4089
02:20:33,000 --> 02:20:34,000
太一来了

4090
02:20:34,000 --> 02:20:34,000
美食主题节目

4091
02:20:34,000 --> 02:20:35,000
为指导

4092
02:20:35,000 --> 02:20:36,000
艺术主题节目

4093
02:20:36,000 --> 02:20:36,000
流行通信

4094
02:20:36,000 --> 02:20:37,000
无主题节目

4095
02:20:37,000 --> 02:20:38,000
无资源

4096
02:20:38,000 --> 02:20:39,000
故事主题节目

4097
02:20:39,000 --> 02:20:40,000
High Story

4098
02:20:40,000 --> 02:20:41,000
以及

4099
02:20:42,000 --> 02:20:43,000
影像主题节目

4100
02:20:43,000 --> 02:20:43,000
印象

4101
02:20:43,000 --> 02:20:45,000
同样欢迎收听

4102
02:20:47,000 --> 02:20:48,000
欢迎你为我们的节目捐款

4103
02:20:48,000 --> 02:20:49,000
捐款地址是

4104
02:20:49,000 --> 02:20:50,000
ipn.ly slash

4105
02:20:50,000 --> 02:20:51,000
kernelpanic slash

4106
02:20:51,000 --> 02:20:52,000
donate

4107
02:20:52,000 --> 02:20:53,000
捐款金额随意

4108
02:20:53,000 --> 02:20:56,000
只要是能够被 8 整除的正数就可以

4109
02:20:57,000 --> 02:20:58,000
上一次我们的

4110
02:20:58,000 --> 02:20:59,000
上一次我

4111
02:21:00,000 --> 02:21:01,000
嗓子毁了之后

4112
02:21:02,000 --> 02:21:03,000
恳求各位捐款

4113
02:21:03,000 --> 02:21:05,000
然后好像

4114
02:21:05,000 --> 02:21:06,000
的确有几笔捐进来

4115
02:21:06,000 --> 02:21:07,000
但每一笔都是 8 美元

4116
02:21:08,000 --> 02:21:08,000
嗯

4117
02:21:09,000 --> 02:21:10,000
非常感谢各位

4118
02:21:11,000 --> 02:21:13,000
虽然捐款不会

4119
02:21:13,000 --> 02:21:14,000
不会为你带来什么不倔

4120
02:21:14,000 --> 02:21:15,000
也不会让你试试什么

4121
02:21:15,000 --> 02:21:16,000
我们的口号是

4122
02:21:16,000 --> 02:21:17,000
nohawkfellings

4123
02:21:17,000 --> 02:21:19,000
感谢你收听本期节目

4124
02:21:19,000 --> 02:21:20,000
下期再会

4125
02:21:20,000 --> 02:21:21,000
拜拜

