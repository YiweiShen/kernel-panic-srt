1
00:00:00,000 --> 00:00:06,000
您正在收听内核恐慌一档大致以计算机科技为主题的娱乐 podcast

2
00:00:06,000 --> 00:00:08,000
我们号称硬核但是也没有什么干货

3
00:00:08,000 --> 00:00:10,000
想听人听不想听人就别听

4
00:00:10,000 --> 00:00:12,000
我们的网址是 pan.icu

5
00:00:12,000 --> 00:00:15,000
您可以在网站上找到订阅我们节目的方法

6
00:00:15,000 --> 00:00:17,000
以及联络我们方式

7
00:00:17,000 --> 00:00:18,000
我是武涛

8
00:00:18,000 --> 00:00:19,000
我是 Rail

9
00:00:19,000 --> 00:00:23,000
今天节目开始前我们做一个简单的 follow up

10
00:00:23,000 --> 00:00:24,000
好久没有做 follow up 了

11
00:00:25,000 --> 00:00:31,000
针对上一期这个叫银尸的光猫那提到的几个问题

12
00:00:31,000 --> 00:00:33,000
我随便说下后续

13
00:00:33,000 --> 00:00:35,000
第一个就是说那个银尸光猫案

14
00:00:35,000 --> 00:00:38,000
算是告破一半

15
00:00:38,000 --> 00:00:39,000
怎么个一半案法

16
00:00:39,000 --> 00:00:41,000
就是我发出去之后

17
00:00:41,000 --> 00:00:45,000
有这个我的那个光猫的生产厂家的朋友

18
00:00:45,000 --> 00:00:47,000
找过来跟我确认过

19
00:00:47,000 --> 00:00:52,000
那个手势确实是他们光猫里面的设备发出来的

20
00:00:52,000 --> 00:00:53,000
不是外面的设备

21
00:00:53,000 --> 00:00:55,000
也不是我的局网里面其他设备发出来

22
00:00:55,000 --> 00:00:59,000
他们在他们的测试环境里面也复现了这个东西

23
00:00:59,000 --> 00:01:03,000
然后产生那个尸的选项也找到了

24
00:01:03,000 --> 00:01:04,000
就是那个环路检测

25
00:01:04,000 --> 00:01:05,000
所以我猜对了

26
00:01:05,000 --> 00:01:06,000
对你猜对了

27
00:01:06,000 --> 00:01:08,000
他不是每十秒发一个包吗

28
00:01:08,000 --> 00:01:11,000
那就用于环路检测了

29
00:01:11,000 --> 00:01:12,000
但是呢

30
00:01:12,000 --> 00:01:14,000
就是没有找到这个东西是谁写的

31
00:01:14,000 --> 00:01:17,000
也不知道为什么是这种尸

32
00:01:17,000 --> 00:01:19,000
我说过的光猫型号是上海 Bare

33
00:01:19,000 --> 00:01:21,000
阿尔卡特生产制造的嘛

34
00:01:22,000 --> 00:01:24,000
所以目前也不知道是 Bare 的工作室干的

35
00:01:24,000 --> 00:01:25,000
还是阿卡特的工作室干的

36
00:01:25,000 --> 00:01:28,000
还是说上海 Bare 阿卡特后来的工作室干的

37
00:01:28,000 --> 00:01:29,000
目前找不到人

38
00:01:29,000 --> 00:01:31,000
因为也不知道这个 former 到底谁写的

39
00:01:31,000 --> 00:01:32,000
可能也比较久远

40
00:01:32,000 --> 00:01:35,000
暴露他们没有 version control 是吧

41
00:01:35,000 --> 00:01:37,000
或者说就是找我那个朋友

42
00:01:37,000 --> 00:01:39,000
他不是做内块开发的嘛

43
00:01:39,000 --> 00:01:40,000
所以他也不清楚

44
00:01:40,000 --> 00:01:42,000
但没有这个权限去查看那个

45
00:01:42,000 --> 00:01:44,000
到底这个是谁扛并进去了

46
00:01:44,000 --> 00:01:44,000
我也不知道他们有没有

47
00:01:44,000 --> 00:01:45,000
有可能是没有的对吧

48
00:01:45,000 --> 00:01:46,000
这个我就不清楚了

49
00:01:46,000 --> 00:01:48,000
他们内部的问题

50
00:01:48,000 --> 00:01:50,000
但就说至少我说这个算是告破了一半

51
00:01:50,000 --> 00:01:52,000
就是说找到了这个源头

52
00:01:52,000 --> 00:01:54,000
找到了他这个是干嘛用的

53
00:01:54,000 --> 00:01:55,000
但是不知道是谁写进去的

54
00:01:55,000 --> 00:01:57,000
以及为什么是这首诗对吧

55
00:01:57,000 --> 00:01:58,000
OK

56
00:01:58,000 --> 00:01:59,000
这是第一个 follower

57
00:01:59,000 --> 00:02:02,000
这个 flap 上次我们不是花了很长时间在讨论

58
00:02:02,000 --> 00:02:05,000
到底能不能够用已有房子里面

59
00:02:05,000 --> 00:02:07,000
用于接电视的那个同轴电缆

60
00:02:07,000 --> 00:02:11,000
来延伸这个 WiFi 的信号的那个距离嘛

61
00:02:11,000 --> 00:02:12,000
对吧

62
00:02:12,000 --> 00:02:14,000
目前来看呢

63
00:02:14,000 --> 00:02:15,000
有两种观点

64
00:02:15,000 --> 00:02:17,000
我们到时候也把把这两个连接

65
00:02:17,000 --> 00:02:20,000
是一个 superuser 上面的这个回答放进去

66
00:02:20,000 --> 00:02:22,000
就是说正常你直接接

67
00:02:22,000 --> 00:02:23,000
就是上次我说那个方法

68
00:02:23,000 --> 00:02:25,000
你直接把那根那根同轴电缆

69
00:02:25,000 --> 00:02:27,000
就墙里面的同轴电缆

70
00:02:27,000 --> 00:02:28,000
给电视用的

71
00:02:28,000 --> 00:02:31,000
当成 WiFi 天线来延长是不行的

72
00:02:31,000 --> 00:02:32,000
因为它的电阻不对

73
00:02:32,000 --> 00:02:34,000
那个这个同轴电缆的电阻

74
00:02:34,000 --> 00:02:36,000
电阻好像说是

75
00:02:36,000 --> 00:02:37,000
你等我确认一下

76
00:02:37,000 --> 00:02:40,000
好像是 75 欧姆吧应该是

77
00:02:40,000 --> 00:02:41,000
对 75 欧的电阻

78
00:02:41,000 --> 00:02:44,000
但是 WiFi 天线的那个

79
00:02:44,000 --> 00:02:46,000
就是那个叫这个专业名词

80
00:02:46,000 --> 00:02:48,000
我找到了叫做溃线

81
00:02:48,000 --> 00:02:52,000
就是这个就是延长 WiFi 的天线

82
00:02:52,000 --> 00:02:57,000
那个那个那个导线的电阻是 50 欧

83
00:02:57,000 --> 00:02:58,000
所以正常你直接接上去

84
00:02:58,000 --> 00:02:59,000
肯定是不行的

85
00:02:59,000 --> 00:03:00,000
因为信号很快就衰减了嘛

86
00:03:00,000 --> 00:03:02,000
但是呢

87
00:03:02,000 --> 00:03:05,000
有一种设备是可以转化一下

88
00:03:05,000 --> 00:03:07,000
就是它在那个同轴电缆两端

89
00:03:07,000 --> 00:03:09,000
都接上一个类似转接器样的东西

90
00:03:09,000 --> 00:03:12,000
可以把一个 WiFi 的信号

91
00:03:12,000 --> 00:03:15,000
转成那个同轴电缆适合

92
00:03:15,000 --> 00:03:16,000
类似你可以想象它是一个放大

93
00:03:16,000 --> 00:03:17,000
或者怎么样

94
00:03:17,000 --> 00:03:19,000
然后把它传达到另外一端

95
00:03:19,000 --> 00:03:20,000
最后再解码出来

96
00:03:20,000 --> 00:03:22,000
然后再重新转回 WiFi 能用的

97
00:03:22,000 --> 00:03:23,000
就这种东西是有的

98
00:03:23,000 --> 00:03:24,000
但这个设备有点贵

99
00:03:24,000 --> 00:03:26,000
而且国内我在淘宝

100
00:03:26,000 --> 00:03:28,000
在天猫在京东上都没有找到

101
00:03:28,000 --> 00:03:31,000
但是在亚马逊上好像是有的

102
00:03:31,000 --> 00:03:33,000
那个东西叫做 Moca M O C

103
00:03:33,000 --> 00:03:36,000
我不知道这个这个这个是什么

104
00:03:36,000 --> 00:03:37,000
那个缩写

105
00:03:37,000 --> 00:03:39,000
然后我还发现一个特别好玩的东西

106
00:03:39,000 --> 00:03:41,000
叫做 WiFi over coax

107
00:03:41,000 --> 00:03:44,000
就是专门干这件事情的

108
00:03:44,000 --> 00:03:47,000
就是专门在用那个同轴电缆

109
00:03:47,000 --> 00:03:49,000
延长 WiFi 信号的一个解决方案

110
00:03:49,000 --> 00:03:52,000
刚刚刚说就是要用的刚才那些东西嘛

111
00:03:52,000 --> 00:03:55,000
所以就解决这个电阻不匹配的问题

112
00:03:55,000 --> 00:03:57,000
大家如果生活在国外

113
00:03:57,000 --> 00:04:00,000
然后你这个房子里面没有走网线

114
00:04:00,000 --> 00:04:01,000
只有这个同轴电缆

115
00:04:01,000 --> 00:04:03,000
你如果想解决这个信号的问题的话

116
00:04:03,000 --> 00:04:04,000
你可以去亚马逊上搜一下

117
00:04:04,000 --> 00:04:06,000
这个 Moca M O C A

118
00:04:06,000 --> 00:04:08,000
那个 M C A 都大写

119
00:04:08,000 --> 00:04:09,000
O 是小写

120
00:04:09,000 --> 00:04:10,000
这么一个设备

121
00:04:10,000 --> 00:04:12,000
它可以完成这个特性

122
00:04:12,000 --> 00:04:15,000
然后我们也在我们的听众群里面

123
00:04:15,000 --> 00:04:17,000
就是 Telegram 那个听众群里面

124
00:04:17,000 --> 00:04:18,000
有在海外的听众朋友

125
00:04:18,000 --> 00:04:19,000
他确实也买了用过这个东西

126
00:04:19,000 --> 00:04:20,000
好像效果还不错

127
00:04:20,000 --> 00:04:21,000
能够达到千兆吧

128
00:04:21,000 --> 00:04:23,000
他应该说是

129
00:04:23,000 --> 00:04:26,000
如果你不是一定要延长这个 WiFi 信号的话

130
00:04:26,000 --> 00:04:29,000
可以直接把网线转到同轴电缆上

131
00:04:29,000 --> 00:04:30,000
就那个转接头非常简陋

132
00:04:30,000 --> 00:04:33,000
但是这 Just works 也是可以的

133
00:04:33,000 --> 00:04:34,000
对就这种方案也是可行的

134
00:04:34,000 --> 00:04:35,000
但是具体怎么操作

135
00:04:35,000 --> 00:04:37,000
大家可能要去自己研究一下

136
00:04:37,000 --> 00:04:39,000
因为我房子里面有有同轴电缆

137
00:04:39,000 --> 00:04:41,000
但我实在是不想搞它

138
00:04:42,000 --> 00:04:43,000
OK

139
00:04:43,000 --> 00:04:44,000
好 OK

140
00:04:44,000 --> 00:04:45,000
就是 Follow up

141
00:04:45,000 --> 00:04:47,000
那今天我们开始今天的正题

142
00:04:47,000 --> 00:04:48,000
今天有点特别

143
00:04:48,000 --> 00:04:51,000
我们好久好久没有邀请过嘉宾了

144
00:04:51,000 --> 00:04:54,000
今天我们邀请到一位重磅嘉宾

145
00:04:54,000 --> 00:04:56,000
就是我们的老朋友

146
00:04:56,000 --> 00:04:58,000
这期我们又是跪着录了可以说

147
00:05:00,000 --> 00:05:02,000
这期我邀请到我的一个好朋友

148
00:05:02,000 --> 00:05:04,000
是大家很多人都用过

149
00:05:04,000 --> 00:05:08,000
这个网络开发调试工具 Search 的作者

150
00:05:08,000 --> 00:05:09,000
刘亚诚

151
00:05:09,000 --> 00:05:10,000
刘亚诚你好

152
00:05:11,000 --> 00:05:12,000
两位老师好

153
00:05:13,000 --> 00:05:16,000
要不亚诚你稍微简单介绍一下自己

154
00:05:16,000 --> 00:05:19,000
我觉得可能我自己的软件的收中

155
00:05:19,000 --> 00:05:21,000
和你们的听众

156
00:05:21,000 --> 00:05:22,000
其实应该覆盖篇挺大的

157
00:05:23,000 --> 00:05:25,000
所以还需要再介绍一下吗

158
00:05:25,000 --> 00:05:27,000
我也不知道该怎么样去介绍

159
00:05:28,000 --> 00:05:29,000
东西应该是不用介绍了

160
00:05:29,000 --> 00:05:31,000
但是大家应该对你这个人还是不太熟悉

161
00:05:31,000 --> 00:05:33,000
就是我认你有什么可以给听众朋友们分享

162
00:05:33,000 --> 00:05:35,000
就是介绍一下自己的

163
00:05:35,000 --> 00:05:38,000
对然后有什么我们想知道的

164
00:05:38,000 --> 00:05:42,000
我们会接着再代替听众来提问的

165
00:05:42,000 --> 00:05:44,000
行那我就简单的说一下

166
00:05:44,000 --> 00:05:46,000
把剩下的靠你们提问吧

167
00:05:46,000 --> 00:05:47,000
我现在的身份的话

168
00:05:47,000 --> 00:05:50,000
就是专职的 IOS 的独立开发者

169
00:05:50,000 --> 00:05:52,000
然后之前的话

170
00:05:52,000 --> 00:05:55,000
可能主要是创业者的一个身份

171
00:05:55,000 --> 00:05:56,000
干过很多一些

172
00:05:56,000 --> 00:05:59,000
很标准的一些创业的事情

173
00:05:59,000 --> 00:06:02,000
甚至还做过一些像技术猎头这样的一些

174
00:06:02,000 --> 00:06:05,000
和技术都快越来越没相关的一些事情

175
00:06:05,000 --> 00:06:07,000
然后反正从 15 年开始

176
00:06:07,000 --> 00:06:10,000
然后变成了一个专职的独立开发者

177
00:06:10,000 --> 00:06:12,000
现在的话主要的产品是

178
00:06:12,000 --> 00:06:15,000
SRG 和 Lpass 两款

179
00:06:15,000 --> 00:06:16,000
然后同时的话

180
00:06:16,000 --> 00:06:17,000
还有一些客户的项目

181
00:06:17,000 --> 00:06:18,000
作为技术顾问去参与

182
00:06:18,000 --> 00:06:20,000
大概就这些

183
00:06:20,000 --> 00:06:22,000
Lpass 这个可能很多人不知道

184
00:06:22,000 --> 00:06:23,000
是一个密码管理器

185
00:06:23,000 --> 00:06:27,000
应该是比那个 One Password 要好用的

186
00:06:27,000 --> 00:06:28,000
好谢谢

187
00:06:28,000 --> 00:06:29,000
但这个相当来说比较小众

188
00:06:29,000 --> 00:06:30,000
但密码管理器

189
00:06:30,000 --> 00:06:32,000
我记得我们之前节目里面

190
00:06:32,000 --> 00:06:33,000
还有单独讲过一起

191
00:06:33,000 --> 00:06:34,000
不过那个时候你还没有写嘛

192
00:06:34,000 --> 00:06:37,000
所以我们如果下次再聊的时候

193
00:06:37,000 --> 00:06:39,000
可以到时候再专门介绍一下

194
00:06:39,000 --> 00:06:41,000
但虽然今天我们邀请了亚成

195
00:06:41,000 --> 00:06:43,000
但是我们今天不聊 SRG

196
00:06:43,000 --> 00:06:44,000
也不聊 Lpass

197
00:06:44,000 --> 00:06:46,000
甚至也不聊

198
00:06:46,000 --> 00:06:48,000
可以最后有一点相关

199
00:06:48,000 --> 00:06:50,000
但是甚至也不主要聊独立开发

200
00:06:50,000 --> 00:06:52,000
今天我们其实是要聊苹果

201
00:06:52,000 --> 00:06:52,000
对不对

202
00:06:52,000 --> 00:06:54,000
其实这个事也比较简单

203
00:06:54,000 --> 00:06:56,000
是因为目前我们三个里面

204
00:06:56,000 --> 00:06:56,000
只有亚成

205
00:06:56,000 --> 00:07:00,000
现在你是买了 M 1 芯片的 Maple Pro 对吧

206
00:07:00,000 --> 00:07:01,000
对是的

207
00:07:01,000 --> 00:07:03,000
好像是我就比较急

208
00:07:03,000 --> 00:07:05,000
所以你是在发布的那一天

209
00:07:05,000 --> 00:07:06,000
就是可以订的时候

210
00:07:06,000 --> 00:07:07,000
第一时间订的吧

211
00:07:07,000 --> 00:07:07,000
对

212
00:07:07,000 --> 00:07:09,000
而且我当时第一时间订了之后

213
00:07:09,000 --> 00:07:12,000
由于它标准配置是 8 G 内存

214
00:07:12,000 --> 00:07:14,000
要定制版才能是 16 G 内存

215
00:07:14,000 --> 00:07:17,000
定制了之后会使得发货周期延迟到

216
00:07:17,000 --> 00:07:19,000
我印象中正常发货时间

217
00:07:19,000 --> 00:07:21,000
应该是 20 号还是 19 号左右

218
00:07:21,000 --> 00:07:23,000
我特别急得又等不了

219
00:07:23,000 --> 00:07:25,000
然后托了一个 Apple 的朋友

220
00:07:25,000 --> 00:07:26,000
让他帮我查了一下

221
00:07:26,000 --> 00:07:28,000
现在实体店的库存

222
00:07:28,000 --> 00:07:29,000
发现离我家比较近的一家店

223
00:07:29,000 --> 00:07:31,000
还有 16 G 的一个高配版

224
00:07:31,000 --> 00:07:33,000
我就立刻跑到店里去

225
00:07:33,000 --> 00:07:34,000
现场拿了它回来

226
00:07:34,000 --> 00:07:36,000
然后把原来的订单给取消了

227
00:07:36,000 --> 00:07:37,000
这里有个小知识

228
00:07:37,000 --> 00:07:39,000
就是说我们通常认为

229
00:07:39,000 --> 00:07:42,000
苹果店里面只有那种所谓的标配版

230
00:07:42,000 --> 00:07:42,000
对吧

231
00:07:42,000 --> 00:07:44,000
比如说通常它苹果

232
00:07:44,000 --> 00:07:44,000
它在网站上

233
00:07:44,000 --> 00:07:45,000
它给一个 Mac 的配

234
00:07:45,000 --> 00:07:47,000
它会给一个低配和一个高配

235
00:07:47,000 --> 00:07:48,000
这两个都是标准配置

236
00:07:48,000 --> 00:07:50,000
你不用去定制

237
00:07:50,000 --> 00:07:52,000
就可以直接在店里买到的

238
00:07:52,000 --> 00:07:52,000
对吧

239
00:07:52,000 --> 00:07:53,000
但是这次好像有点不一样

240
00:07:53,000 --> 00:07:53,000
对不对

241
00:07:53,000 --> 00:07:55,000
就是因为它的两个标准配置

242
00:07:55,000 --> 00:07:56,000
都只有 8 G 内存

243
00:07:56,000 --> 00:07:58,000
然后 16 G 理论上

244
00:07:58,000 --> 00:07:59,000
按照官网的逻辑

245
00:07:59,000 --> 00:08:01,000
你是需要定制才可以选的

246
00:08:01,000 --> 00:08:02,000
对是的

247
00:08:02,000 --> 00:08:04,000
但是其实我和朋友聊了一下

248
00:08:04,000 --> 00:08:05,000
他说一般的话

249
00:08:05,000 --> 00:08:08,000
店里面会被大概 5 台左右的顶配机器

250
00:08:08,000 --> 00:08:11,000
就是每家店都会有这么一个储备

251
00:08:11,000 --> 00:08:11,000
所以说的话

252
00:08:11,000 --> 00:08:13,000
如果就是不确定的话

253
00:08:13,000 --> 00:08:15,000
可以提前去他们官网上找到一个店的

254
00:08:15,000 --> 00:08:16,000
一个店的直接的

255
00:08:16,000 --> 00:08:17,000
不打他们的店的电话

256
00:08:17,000 --> 00:08:18,000
然后打电话去问一下

257
00:08:18,000 --> 00:08:20,000
他们现在有没有高配这个库存

258
00:08:20,000 --> 00:08:21,000
然后再过去

259
00:08:21,000 --> 00:08:22,000
直接就可以购买

260
00:08:22,000 --> 00:08:24,000
所以他们应对的这个场景

261
00:08:24,000 --> 00:08:25,000
就是一个土豪走进苹果店说

262
00:08:25,000 --> 00:08:27,000
我要你们店里最好的电脑

263
00:08:27,000 --> 00:08:28,000
你给我拿一台出来

264
00:08:28,000 --> 00:08:31,000
对我感觉应该是这个意思吧

265
00:08:31,000 --> 00:08:32,000
他比如说你去买顶配

266
00:08:32,000 --> 00:08:36,000
我记得就是这一次的 M 1 的 MacBook

267
00:08:36,000 --> 00:08:39,000
他能选的只有是内存是可以变质

268
00:08:39,000 --> 00:08:41,000
就是标配的 8 G 和高配的 16 G

269
00:08:41,000 --> 00:08:43,000
然后唯一能选的就是那个 SSD 的配置了

270
00:08:43,000 --> 00:08:44,000
对吧

271
00:08:44,000 --> 00:08:44,000
那这个 SSD 的

272
00:08:44,000 --> 00:08:47,000
他的高配的能最多是配到哪里

273
00:08:47,000 --> 00:08:48,000
他店里面那台

274
00:08:48,000 --> 00:08:51,000
店里的机器我记得都是 1 TB 的

275
00:08:51,000 --> 00:08:53,000
就是这次三个选项

276
00:08:53,000 --> 00:08:54,000
512 1 T 和 2 T

277
00:08:54,000 --> 00:08:56,000
我印象中全是 1 T

278
00:08:56,000 --> 00:08:58,000
没有 2 T 的那个机器

279
00:08:58,000 --> 00:09:00,000
所以其实也没有真的到最顶那个

280
00:09:00,000 --> 00:09:03,000
就是所有的加到最大最贵的那款

281
00:09:03,000 --> 00:09:04,000
他还是没有的

282
00:09:05,000 --> 00:09:05,000
对

283
00:09:05,000 --> 00:09:06,000
而且颜色也只有深空灰

284
00:09:06,000 --> 00:09:09,000
就深空灰的 16 G 的 1 TB 机器

285
00:09:09,000 --> 00:09:12,000
这个机器好像是有个 30 台左右

286
00:09:12,000 --> 00:09:13,000
你颜色也没得选

287
00:09:13,000 --> 00:09:15,000
如果你拿这台 16 G 的配置的话

288
00:09:15,000 --> 00:09:16,000
对是的

289
00:09:16,000 --> 00:09:16,000
没错

290
00:09:16,000 --> 00:09:17,000
所以

291
00:09:17,000 --> 00:09:18,000
但是本来我就是要选的话

292
00:09:18,000 --> 00:09:19,000
就选深空灰

293
00:09:19,000 --> 00:09:20,000
所以说这个倒是无所谓

294
00:09:20,000 --> 00:09:20,000
就刚好是吧

295
00:09:20,000 --> 00:09:22,000
就他们其实还是有一些大数据

296
00:09:22,000 --> 00:09:23,000
去支撑这个决策说

297
00:09:23,000 --> 00:09:25,000
一般买这种配置的人

298
00:09:25,000 --> 00:09:28,000
他不会选那种比较骚气的颜色

299
00:09:28,000 --> 00:09:29,000
而且这次其实那个颜色

300
00:09:29,000 --> 00:09:31,000
只有深空灰和银色

301
00:09:31,000 --> 00:09:33,000
都是两个比较保守和传统的颜色

302
00:09:33,000 --> 00:09:34,000
也没过太大的区别

303
00:09:35,000 --> 00:09:37,000
SKO 数量是要比较简单的是吧

304
00:09:38,000 --> 00:09:39,000
对是的

305
00:09:40,000 --> 00:09:41,000
所以其实

306
00:09:41,000 --> 00:09:43,000
对土豪还是没有那么的友好

307
00:09:43,000 --> 00:09:43,000
对吧

308
00:09:43,000 --> 00:09:45,000
不能说我想买啥买啥

309
00:09:45,000 --> 00:09:47,000
你给我最顶的那个

310
00:09:47,000 --> 00:09:47,000
不带付钱

311
00:09:47,000 --> 00:09:49,000
Money is not issue 的时候

312
00:09:49,000 --> 00:09:50,000
也没有买

313
00:09:50,000 --> 00:09:51,000
你还是得去网上定制

314
00:09:52,000 --> 00:09:53,000
我觉得要是真土豪的话

315
00:09:53,000 --> 00:09:56,000
可能不会在意是 M 1 还是什么

316
00:09:56,000 --> 00:09:57,000
直接来一个 Mac Pro

317
00:09:57,000 --> 00:09:59,000
就直接带走了是吧

318
00:09:59,000 --> 00:10:01,000
这好像是个误见

319
00:10:02,000 --> 00:10:04,000
土豪 stereotype

320
00:10:05,000 --> 00:10:06,000
所以目前你看

321
00:10:06,000 --> 00:10:07,000
就是我们往下看了一些

322
00:10:08,000 --> 00:10:11,000
各种媒体网站的测评

323
00:10:11,000 --> 00:10:12,000
但是我们聊一聊

324
00:10:12,000 --> 00:10:14,000
你实际使用下来的感受

325
00:10:14,000 --> 00:10:15,000
就是跟他们测评的

326
00:10:15,000 --> 00:10:17,000
你觉得有多大差异吗

327
00:10:17,000 --> 00:10:18,000
这个其实我作为

328
00:10:19,000 --> 00:10:20,000
最早就参与到

329
00:10:21,000 --> 00:10:22,000
ARM 芯片版本的

330
00:10:22,000 --> 00:10:24,000
Apple 开发的开发者来说

331
00:10:24,000 --> 00:10:25,000
因为 DTK 我早拿到了

332
00:10:26,000 --> 00:10:27,000
对你是有 DTK 的

333
00:10:28,000 --> 00:10:28,000
对是的

334
00:10:28,000 --> 00:10:29,000
但是 DTP 的话

335
00:10:29,000 --> 00:10:30,000
由于受协议限制

336
00:10:31,000 --> 00:10:32,000
我也没有还没有仔细去看

337
00:10:32,000 --> 00:10:33,000
在现在这个状态下

338
00:10:33,000 --> 00:10:36,000
我还能不能给他公开的发表

339
00:10:36,000 --> 00:10:37,000
一些 review 一些意见

340
00:10:39,000 --> 00:10:40,000
我想一想

341
00:10:40,000 --> 00:10:42,000
我觉得应该没什么太大的问题吧

342
00:10:43,000 --> 00:10:45,000
所以这个是有 NDA 的是吧

343
00:10:45,000 --> 00:10:46,000
DTK 是有 NDA 的

344
00:10:46,000 --> 00:10:47,000
对这是有 NDA 的

345
00:10:47,000 --> 00:10:48,000
它官方提的是

346
00:10:48,000 --> 00:10:50,000
我不可以在 public 的常数

347
00:10:50,000 --> 00:10:52,000
去进行 review

348
00:10:53,000 --> 00:10:54,000
但是好像我没有仔细看

349
00:10:54,000 --> 00:10:55,000
它有没有一个期限

350
00:10:55,000 --> 00:10:56,000
就到什么时间解禁

351
00:10:56,000 --> 00:10:57,000
好像是没有的

352
00:10:58,000 --> 00:11:01,000
那我为了避免踩到这坑里

353
00:11:01,000 --> 00:11:02,000
我还是尽量就不提它吧

354
00:11:02,000 --> 00:11:04,000
OK 我们就假装它不存在

355
00:11:04,000 --> 00:11:05,000
对我们讨论它

356
00:11:05,000 --> 00:11:06,000
但这并不是一个 review

357
00:11:06,000 --> 00:11:09,000
明白我就是在想打这个擦边球

358
00:11:10,000 --> 00:11:12,000
之前通过用 DTK 的时候

359
00:11:12,000 --> 00:11:13,000
我就能感受到

360
00:11:14,000 --> 00:11:16,000
苹果的 ARM 芯片

361
00:11:16,000 --> 00:11:17,000
这个 A 系列芯片的话

362
00:11:17,000 --> 00:11:19,000
很有可能它之后出来的

363
00:11:19,000 --> 00:11:21,000
正式产品会更牛逼

364
00:11:21,000 --> 00:11:22,000
就是原来已经

365
00:11:22,000 --> 00:11:24,000
其实很牛逼了

366
00:11:24,000 --> 00:11:26,000
但是等到一个

367
00:11:26,000 --> 00:11:28,000
但是那块芯片的话是 ARM-Z

368
00:11:28,000 --> 00:11:30,000
是那个 iPad 之前用的芯片

369
00:11:30,000 --> 00:11:31,000
所以的话那么

370
00:11:31,000 --> 00:11:33,000
如果它本身就是为移动设备

371
00:11:33,000 --> 00:11:35,000
为低功耗设备设计的

372
00:11:35,000 --> 00:11:37,000
那如果是在这种基础上

373
00:11:37,000 --> 00:11:38,000
在为 MacBook

374
00:11:38,000 --> 00:11:40,000
或者 MacBook Pro 的话

375
00:11:40,000 --> 00:11:43,000
然后去更优化的就是一块芯片

376
00:11:43,000 --> 00:11:45,000
那它出来的效果应该是非常劲爆的

377
00:11:45,000 --> 00:11:47,000
然后确实的话

378
00:11:47,000 --> 00:11:48,000
从这几天的一个

379
00:11:48,000 --> 00:11:50,000
不管是测试还是使用来说

380
00:11:50,000 --> 00:11:53,000
都非常的让我感觉很兴奋

381
00:11:53,000 --> 00:11:54,000
这确实是一个

382
00:11:54,000 --> 00:11:56,000
可能有化石贷意义的产品的

383
00:11:56,000 --> 00:11:57,000
这么一个进步

384
00:11:57,000 --> 00:11:59,000
就按我们这个行业里面的话说

385
00:11:59,000 --> 00:12:00,000
就是一屁股挤爆了

386
00:12:00,000 --> 00:12:02,000
这个英特尔的牙膏对吧

387
00:12:02,000 --> 00:12:04,000
对我自己的话说是

388
00:12:04,000 --> 00:12:05,000
不是把英特尔按在地板上摩擦

389
00:12:05,000 --> 00:12:08,000
这地板已经看快按穿了

390
00:12:08,000 --> 00:12:09,000
已经按出了一个棺材来了

391
00:12:09,000 --> 00:12:12,000
可以把英特尔盖棺定论了已经

392
00:12:12,000 --> 00:12:14,000
我们看到网上的测评

393
00:12:14,000 --> 00:12:15,000
看性能基本上都说是这种

394
00:12:15,000 --> 00:12:18,000
我们能看墙上的定语

395
00:12:18,000 --> 00:12:20,000
都是什么 Massive Improvement

396
00:12:20,000 --> 00:12:22,000
都非常通常是吊打的

397
00:12:22,000 --> 00:12:23,000
至少我们看到那个数字

398
00:12:23,000 --> 00:12:25,000
跑分的跑分有很多指标

399
00:12:25,000 --> 00:12:27,000
我们看最常见的几个什么

400
00:12:27,000 --> 00:12:29,000
Kickbench 什么什么

401
00:12:29,000 --> 00:12:30,000
叫什么 Spec 那些

402
00:12:30,000 --> 00:12:32,000
对都是可能提高了

403
00:12:32,000 --> 00:12:33,000
百分之七八十这种

404
00:12:33,000 --> 00:12:35,000
这种级别的性能的提升

405
00:12:35,000 --> 00:12:38,000
很多网站论述就是

406
00:12:38,000 --> 00:12:39,000
一开始我们是怀疑的

407
00:12:39,000 --> 00:12:42,000
一开始我们是非常抵触的

408
00:12:42,000 --> 00:12:43,000
不愿意相信这个结果的

409
00:12:43,000 --> 00:12:45,000
但是实际上手之后

410
00:12:45,000 --> 00:12:46,000
原来真的这么香

411
00:12:46,000 --> 00:12:47,000
对关键是就是说

412
00:12:47,000 --> 00:12:50,000
它在这种提供这种性能

413
00:12:50,000 --> 00:12:53,000
这么大幅度性能提升的情况下

414
00:12:53,000 --> 00:12:54,000
是基于什么呢

415
00:12:54,000 --> 00:12:55,000
是不发烫对吧

416
00:12:55,000 --> 00:12:57,000
按我看他们测评的方法

417
00:12:57,000 --> 00:12:59,000
评论的原理也说是

418
00:12:59,000 --> 00:13:02,000
风扇基本不怎么转或者听不到

419
00:13:02,000 --> 00:13:04,000
然后特别是像 MacBook Air 这一款

420
00:13:04,000 --> 00:13:05,000
它根本就没有风扇

421
00:13:05,000 --> 00:13:08,000
而且续航能力还非常的恐怖

422
00:13:08,000 --> 00:13:08,000
就相关的

423
00:13:08,000 --> 00:13:11,000
如果说你在风扇又不转

424
00:13:11,000 --> 00:13:12,000
又不怎么发热的情况下

425
00:13:12,000 --> 00:13:14,000
说明能耗是低的

426
00:13:14,000 --> 00:13:15,000
电池不变的情况

427
00:13:15,000 --> 00:13:15,000
能耗变低

428
00:13:15,000 --> 00:13:17,000
你续航就显然变长了

429
00:13:17,000 --> 00:13:18,000
但是我没有想到会有那么长

430
00:13:18,000 --> 00:13:18,000
对吧

431
00:13:18,000 --> 00:13:20,000
对我其实都还有一个疑问

432
00:13:21,000 --> 00:13:22,000
Mac Pro 多的风扇

433
00:13:22,000 --> 00:13:23,000
拿来干嘛的

434
00:13:23,000 --> 00:13:25,000
我现在就没有能让它转起来过

435
00:13:26,000 --> 00:13:27,000
但它在转吗

436
00:13:27,000 --> 00:13:29,000
就是你确定它是一直在转

437
00:13:29,000 --> 00:13:32,000
还是说需要才转

438
00:13:32,000 --> 00:13:34,000
我贴上去感受的时候

439
00:13:34,000 --> 00:13:36,000
应该是以非常低的频率在转的

440
00:13:36,000 --> 00:13:40,000
就是你基本上是完全感受不到它在转

441
00:13:40,000 --> 00:13:41,000
但实际上它确实在转

442
00:13:41,000 --> 00:13:43,000
它转的意义可能就是为了

443
00:13:43,000 --> 00:13:44,000
提供一个压力

444
00:13:44,000 --> 00:13:46,000
让灰尘不要进去

445
00:13:46,000 --> 00:13:48,000
不是为了散热

446
00:13:48,000 --> 00:13:49,000
可能真的是

447
00:13:49,000 --> 00:13:51,000
或者就它为了一个

448
00:13:51,000 --> 00:13:52,000
因为这样它这个

449
00:13:52,000 --> 00:13:53,000
就叫什么来着

450
00:13:53,000 --> 00:13:55,000
就是热功臣是吧

451
00:13:55,000 --> 00:13:56,000
还是热力学怎么办

452
00:13:56,000 --> 00:13:58,000
就是它得维持一个平衡

453
00:13:58,000 --> 00:14:00,000
就是热动力学你想说

454
00:14:00,000 --> 00:14:01,000
Cermodynamics

455
00:14:01,000 --> 00:14:02,000
我只知道以前

456
00:14:03,000 --> 00:14:07,000
校那些去清华读热功臣的

457
00:14:07,000 --> 00:14:08,000
热动力什么

458
00:14:08,000 --> 00:14:09,000
热能学的这些行业

459
00:14:09,000 --> 00:14:10,000
他们都是烧锅炉

460
00:14:10,000 --> 00:14:11,000
对吧

461
00:14:11,000 --> 00:14:14,000
其实但其实这个东西是可以用到很多场景的

462
00:14:14,000 --> 00:14:17,000
烧锅炉只是一个比较大型的使用场景

463
00:14:17,000 --> 00:14:17,000
对吧

464
00:14:17,000 --> 00:14:19,000
包括你现在做芯片也好

465
00:14:19,000 --> 00:14:20,000
烧锅炉很难的

466
00:14:20,000 --> 00:14:21,000
COME ON

467
00:14:22,000 --> 00:14:24,000
它可能是以这么低的一个转速的话

468
00:14:24,000 --> 00:14:26,000
就已经能够把它维持很好了

469
00:14:26,000 --> 00:14:27,000
平衡了

470
00:14:27,000 --> 00:14:28,000
对是的

471
00:14:28,000 --> 00:14:29,000
因为那个

472
00:14:29,000 --> 00:14:32,000
同样是这个 M 1 芯片的那个 MacBook Air

473
00:14:32,000 --> 00:14:33,000
它是完全被动

474
00:14:33,000 --> 00:14:34,000
然后我们看到

475
00:14:34,000 --> 00:14:35,000
因为昨天那个 iFixit

476
00:14:35,000 --> 00:14:37,000
出那个拆解图了

477
00:14:37,000 --> 00:14:38,000
就他把那个打开看了一下

478
00:14:38,000 --> 00:14:40,000
那个 MacBook Air 里面

479
00:14:40,000 --> 00:14:43,000
它其实就是有一块比较大的那个散热片

480
00:14:43,000 --> 00:14:44,000
对吧

481
00:14:44,000 --> 00:14:45,000
但是完全没有

482
00:14:45,000 --> 00:14:46,000
没有那个风扇

483
00:14:46,000 --> 00:14:48,000
它也可以完成这么一个

484
00:14:48,000 --> 00:14:50,000
就是不是那种高负载

485
00:14:50,000 --> 00:14:53,000
不是那种持续高负载状况下的散热

486
00:14:53,000 --> 00:14:54,000
那照理说

487
00:14:54,000 --> 00:14:56,000
这个 MacBook Pro 有一个小风扇

488
00:14:56,000 --> 00:14:58,000
它能够低速的运转

489
00:14:58,000 --> 00:15:02,000
也能够很快的实现这个热的平衡

490
00:15:02,000 --> 00:15:02,000
对

491
00:15:02,000 --> 00:15:05,000
而且这个和英特尔机器比起来真的是天壤之别

492
00:15:05,000 --> 00:15:08,000
我第二轮测试的时候是测试去编译代码

493
00:15:08,000 --> 00:15:10,000
然后看他们的性能怎么样

494
00:15:10,000 --> 00:15:12,000
我两台英特尔的机器

495
00:15:12,000 --> 00:15:14,000
一台是 MacBook Pro

496
00:15:14,000 --> 00:15:15,000
一台是 MacBook Air

497
00:15:15,000 --> 00:15:17,000
都是才开始编译第一轮到一半的时候

498
00:15:17,000 --> 00:15:19,000
风扇就已经基本上到满转了

499
00:15:19,000 --> 00:15:21,000
就已经进入很吵的状态了

500
00:15:21,000 --> 00:15:23,000
就是战斗机来袭的感觉

501
00:15:23,000 --> 00:15:24,000
对是的

502
00:15:24,000 --> 00:15:27,000
然后 M 1 的那台 MacBook Pro 的话

503
00:15:27,000 --> 00:15:28,000
三次测完了之后

504
00:15:28,000 --> 00:15:31,000
我摸它就感觉温度几乎没有提升

505
00:15:31,000 --> 00:15:34,000
就还是那种室温的状态

506
00:15:35,000 --> 00:15:35,000
对是的

507
00:15:35,000 --> 00:15:39,000
就当成感觉这已经是黑科技一样的一个存在了

508
00:15:39,000 --> 00:15:42,000
因为我们在 MacBook 是前几代的时候

509
00:15:42,000 --> 00:15:43,000
换过一个更薄的外壳

510
00:15:43,000 --> 00:15:44,000
以前是

511
00:15:44,000 --> 00:15:46,000
就是以前不是那个 Type-C 接口对吧

512
00:15:46,000 --> 00:15:47,000
以前是那个

513
00:15:47,000 --> 00:15:48,000
就是在 Type-A 接口的时候

514
00:15:48,000 --> 00:15:51,000
他那个时候大家都会抱怨说

515
00:15:51,000 --> 00:15:52,000
有时候如果用的 Type-R

516
00:15:52,000 --> 00:15:54,000
他那个底部会比较烫

517
00:15:54,000 --> 00:15:56,000
Type-C MacBook Pro 那个有独立显卡

518
00:15:56,000 --> 00:15:59,000
和这个 CPU 的两个热源

519
00:15:59,000 --> 00:16:02,000
后来他换到了现在就是这个外形的

520
00:16:02,000 --> 00:16:03,000
就是薄薄的

521
00:16:03,000 --> 00:16:05,000
然后变相是 Type-C 接口的时候

522
00:16:05,000 --> 00:16:06,000
就更烫了

523
00:16:06,000 --> 00:16:07,000
就是英特尔的时候对吧

524
00:16:07,000 --> 00:16:07,000
我们到

525
00:16:07,000 --> 00:16:09,000
如果你放在膝盖上的话

526
00:16:09,000 --> 00:16:10,000
它是有这个

527
00:16:10,000 --> 00:16:11,000
他们那个说法叫什么来着

528
00:16:11,000 --> 00:16:12,000
火腿长肩担对不对

529
00:16:16,000 --> 00:16:17,000
而且我还听过一个说法

530
00:16:17,000 --> 00:16:18,000
就是

531
00:16:18,000 --> 00:16:21,000
对于现在的四口的 MacBook Pro

532
00:16:21,000 --> 00:16:22,000
你要给它充电的话

533
00:16:22,000 --> 00:16:24,000
是应该要固定插右边

534
00:16:24,000 --> 00:16:25,000
还是固定插左边

535
00:16:25,000 --> 00:16:27,000
这样去减少它那一侧的发热

536
00:16:27,000 --> 00:16:28,000
才能平衡

537
00:16:28,000 --> 00:16:31,000
对我们上一期好像结尾的时候

538
00:16:31,000 --> 00:16:31,000
谈到这个了

539
00:16:31,000 --> 00:16:33,000
就是你要是从一边插的话

540
00:16:33,000 --> 00:16:34,000
它会特别烫

541
00:16:34,000 --> 00:16:36,000
因为它有一个叫什么来个电压管理模块

542
00:16:36,000 --> 00:16:38,000
是在某一边

543
00:16:38,000 --> 00:16:39,000
然后会导致升温

544
00:16:39,000 --> 00:16:40,000
然后升温就会降频

545
00:16:40,000 --> 00:16:41,000
然后性能也会受影响

546
00:16:41,000 --> 00:16:43,000
现在 Apple 把这个锅

547
00:16:43,000 --> 00:16:44,000
就完全的丢给了英特尔

548
00:16:44,000 --> 00:16:45,000
告诉大家

549
00:16:45,000 --> 00:16:46,000
好不是我们做的

550
00:16:47,000 --> 00:16:49,000
对所以就这件事情证明了之前

551
00:16:49,000 --> 00:16:51,000
有几个问题

552
00:16:51,000 --> 00:16:52,000
就是苹果我们不是老是说

553
00:16:52,000 --> 00:16:53,000
它最近 Mac 这几代

554
00:16:53,000 --> 00:16:55,000
就迭代都非常的慢

555
00:16:55,000 --> 00:16:56,000
然后就是非常的

556
00:16:56,000 --> 00:16:57,000
就不让人满意

557
00:16:57,000 --> 00:16:58,000
但最后我们的锅现在

558
00:16:58,000 --> 00:17:00,000
你可以明确的说是英特尔的锅

559
00:17:00,000 --> 00:17:01,000
对不对

560
00:17:01,000 --> 00:17:02,000
真相大白

561
00:17:02,000 --> 00:17:05,000
亚成我记得你也有买垃圾桶

562
00:17:05,000 --> 00:17:06,000
的 Mac Pro 是不是

563
00:17:06,000 --> 00:17:08,000
就是第一代的 MacBook Pro

564
00:17:08,000 --> 00:17:11,000
对那是 13 年的那个型号了

565
00:17:11,000 --> 00:17:12,000
垃圾桶的话

566
00:17:12,000 --> 00:17:14,000
对垃圾桶总共就一代

567
00:17:14,000 --> 00:17:15,000
没有之后也没有

568
00:17:15,000 --> 00:17:17,000
前无古人后来者

569
00:17:17,000 --> 00:17:18,000
他更新过一次 CPU 好像

570
00:17:18,000 --> 00:17:21,000
我记得好像只是小型号的

571
00:17:21,000 --> 00:17:22,000
就是可能是加了几个选项

572
00:17:22,000 --> 00:17:24,000
反正都是 13 年的那一款

573
00:17:24,000 --> 00:17:26,000
对没有大改过

574
00:17:26,000 --> 00:17:29,000
对在汽车的书里面叫 Facelift

575
00:17:29,000 --> 00:17:29,000
小改款

576
00:17:29,000 --> 00:17:31,000
小改的不是大改

577
00:17:31,000 --> 00:17:33,000
然后就是当时它不是那个

578
00:17:33,000 --> 00:17:36,000
那个垃圾桶它出来的时候说是

579
00:17:36,000 --> 00:17:38,000
最后他们的不是要做了一个媒体

580
00:17:38,000 --> 00:17:40,000
邀请那些就是 Mac 的那种专业媒体

581
00:17:40,000 --> 00:17:42,000
去开了一个小会说

582
00:17:42,000 --> 00:17:45,000
他们之前那个设计是

583
00:17:45,000 --> 00:17:45,000
叫什么

584
00:17:45,000 --> 00:17:47,000
遇到了这个 thermal constraint

585
00:17:47,000 --> 00:17:49,000
就是遇到了热能的限制

586
00:17:49,000 --> 00:17:50,000
其实这个锅也是英特尔的对吧

587
00:17:50,000 --> 00:17:53,000
因为或者说是加上这个 AMD 的

588
00:17:53,000 --> 00:17:54,000
因为那个显卡也是个散热大户

589
00:17:54,000 --> 00:17:55,000
就是他没有想到

590
00:17:55,000 --> 00:17:57,000
就是说你们竟然

591
00:17:57,000 --> 00:18:00,000
不能够按照我们预期的这个

592
00:18:00,000 --> 00:18:02,000
提升这个能那个功耗

593
00:18:02,000 --> 00:18:05,000
就是叫做每单位功耗的性能

594
00:18:05,000 --> 00:18:08,000
导致我们不能在这么小的空间里面

595
00:18:08,000 --> 00:18:09,000
用一个单一的风扇

596
00:18:09,000 --> 00:18:12,000
完成整个设备的散热

597
00:18:12,000 --> 00:18:13,000
所以导致我们产品的这个

598
00:18:13,000 --> 00:18:15,000
风 factor 这个外观外形

599
00:18:15,000 --> 00:18:17,000
和整体的这个形态

600
00:18:17,000 --> 00:18:18,000
没有办法支撑你

601
00:18:18,000 --> 00:18:20,000
不断的后续的迭代

602
00:18:20,000 --> 00:18:22,000
这口锅已经毫无疑问的坐实的

603
00:18:22,000 --> 00:18:24,000
落到了英特尔和 AMD 头上了

604
00:18:24,000 --> 00:18:26,000
英特尔是显卡

605
00:18:26,000 --> 00:18:28,000
是是是是 SAPO

606
00:18:28,000 --> 00:18:30,000
然后 AMD 是因为显卡嘛对吧

607
00:18:30,000 --> 00:18:31,000
反正都是你们

608
00:18:31,000 --> 00:18:33,000
对我们现在看到确实也是

609
00:18:33,000 --> 00:18:33,000
现在你说

610
00:18:33,000 --> 00:18:34,000
因为我

611
00:18:34,000 --> 00:18:35,000
雅成你好像我看到你买了

612
00:18:35,000 --> 00:18:37,000
最近那个什么新出的几台显卡

613
00:18:37,000 --> 00:18:39,000
你看那个显卡都是一颗大卡

614
00:18:39,000 --> 00:18:41,000
然后上面三个风扇对吧

615
00:18:41,000 --> 00:18:43,000
然后一转起来也是非常响的

616
00:18:43,000 --> 00:18:44,000
对电磁炉是

617
00:18:46,000 --> 00:18:48,000
然后我们看到这次就是 M 1 芯片

618
00:18:48,000 --> 00:18:50,000
不光是这个 CPU 的那个性能

619
00:18:50,000 --> 00:18:51,000
爆表

620
00:18:51,000 --> 00:18:52,000
GPU 的性能也是把

621
00:18:52,000 --> 00:18:54,000
它是集成显卡

622
00:18:54,000 --> 00:18:56,000
它的集成显卡的这个性能

623
00:18:56,000 --> 00:18:57,000
也是把英特尔的那个叫

624
00:18:57,000 --> 00:19:00,000
时代的那个就是 ARES 吧

625
00:19:00,000 --> 00:19:02,000
也是按在地板上磨穿对吧

626
00:19:02,000 --> 00:19:04,000
它提升的好像还不止

627
00:19:04,000 --> 00:19:06,000
不是说百分之几十这种提升

628
00:19:06,000 --> 00:19:07,000
它是提高了

629
00:19:07,000 --> 00:19:09,000
两三倍吧

630
00:19:09,000 --> 00:19:10,000
我记得那个大概数字是

631
00:19:10,000 --> 00:19:11,000
对那个图形性能

632
00:19:11,000 --> 00:19:13,000
我倒是没有仔细测试了

633
00:19:13,000 --> 00:19:16,000
因为那个确实不是我了解的东西

634
00:19:16,000 --> 00:19:17,000
然后我看了的话

635
00:19:17,000 --> 00:19:18,000
别人的评测的话

636
00:19:18,000 --> 00:19:20,000
很多是视频博主学评测

637
00:19:20,000 --> 00:19:23,000
他去进行视频编辑的时候的一个性能

638
00:19:23,000 --> 00:19:24,000
只不过由于那个 M 1

639
00:19:24,000 --> 00:19:27,000
它自己有那个 H 265 的那个硬解码吧

640
00:19:27,000 --> 00:19:30,000
所以说这个好像这个评测有点不太公平

641
00:19:30,000 --> 00:19:32,000
这个事情要吐槽一下

642
00:19:32,000 --> 00:19:32,000
包括这个

643
00:19:32,000 --> 00:19:35,000
我记得最开始爆出这件事情

644
00:19:35,000 --> 00:19:37,000
做的一个显示的对比是那个叫做

645
00:19:38,000 --> 00:19:39,000
Jonathan Morris

646
00:19:39,000 --> 00:19:40,000
他在 Youtube 上做了一个

647
00:19:40,000 --> 00:19:43,000
还是两三分钟的短屏吧

648
00:19:43,000 --> 00:19:48,000
他屏的是输出一段这个 H 265 的这个视频

649
00:19:48,000 --> 00:19:51,000
就是他是做那个视频博主嘛

650
00:19:51,000 --> 00:19:51,000
对吧

651
00:19:51,000 --> 00:19:53,000
他说我有一个原始视频

652
00:19:53,000 --> 00:19:53,000
我编辑好了

653
00:19:53,000 --> 00:19:55,000
我要输出成这个叫成片

654
00:19:55,000 --> 00:19:57,000
要流出来成一个 H 265 这种

655
00:19:57,000 --> 00:19:59,000
可以给大家播放的一个文件

656
00:19:59,000 --> 00:20:00,000
他现在那个他的

657
00:20:00,000 --> 00:20:02,000
好像他的 iMac Pro 吧

658
00:20:02,000 --> 00:20:03,000
上面开始点

659
00:20:03,000 --> 00:20:06,000
然后那边就已经开始在转码输出了

660
00:20:06,000 --> 00:20:06,000
对吧

661
00:20:06,000 --> 00:20:07,000
然后

662
00:20:07,000 --> 00:20:10,000
然后他说这个时候他拿出他刚买的

663
00:20:10,000 --> 00:20:11,000
这个 iPhone 12 的这个 mini

664
00:20:11,000 --> 00:20:13,000
然后说怎么这个在跟你默契半天说

665
00:20:13,000 --> 00:20:18,000
现在我们开始在这个 iPhonemini 上面去做同样的事情

666
00:20:18,000 --> 00:20:20,000
结果那个时候已经那个 iMac 上已经跑了

667
00:20:20,000 --> 00:20:21,000
可能一两分钟了

668
00:20:21,000 --> 00:20:22,000
对吧

669
00:20:22,000 --> 00:20:23,000
然后这个他在看后面点

670
00:20:23,000 --> 00:20:28,000
然后这个时候 iPhonemini 还是比他那个 iMac 先完成这个转码工作

671
00:20:28,000 --> 00:20:31,000
但看起来是很 impressive 对不对

672
00:20:31,000 --> 00:20:32,000
但是这个事情刚才就说亚成讲的

673
00:20:32,000 --> 00:20:33,000
他不是太公平

674
00:20:33,000 --> 00:20:35,000
原因是在于说

675
00:20:35,000 --> 00:20:38,000
一个是用专用硬件去做输出

676
00:20:38,000 --> 00:20:39,000
另外一个是用哪个 CPU 去压

677
00:20:39,000 --> 00:20:41,000
那肯定是不能比的

678
00:20:41,000 --> 00:20:41,000
对

679
00:20:41,000 --> 00:20:44,000
只不过说到不公平这事的话

680
00:20:44,000 --> 00:20:47,000
我们之前大家就比 CPU 性能的时候

681
00:20:47,000 --> 00:20:49,000
其实现在拿来和 M 1 比的东西

682
00:20:49,000 --> 00:20:51,000
都是拿 iMac Pro

683
00:20:51,000 --> 00:20:54,000
这种顶级的桌面端的 CPU 去比了

684
00:20:54,000 --> 00:20:57,000
移动团的根本就早就已经不知道甩到哪里去了

685
00:20:58,000 --> 00:20:59,000
就是如果有功耗限制的

686
00:20:59,000 --> 00:21:01,000
肯定都是比不过的对吧

687
00:21:01,000 --> 00:21:03,000
但只有找那种不太受功耗限制的

688
00:21:03,000 --> 00:21:05,000
因为像那个 iMac Pro

689
00:21:05,000 --> 00:21:06,000
就桌面级 CPU

690
00:21:06,000 --> 00:21:08,000
它都是功耗都是可能几十上百瓦的这种

691
00:21:08,000 --> 00:21:09,000
对

692
00:21:09,000 --> 00:21:10,000
因为我自己对比的时候

693
00:21:10,000 --> 00:21:11,000
我是测的是我的 iMac Pro

694
00:21:11,000 --> 00:21:14,000
和我的之前的 19 款的 iMac

695
00:21:14,000 --> 00:21:15,000
iMac MacBook Air

696
00:21:15,000 --> 00:21:17,000
iMac MacBook Air 的话

697
00:21:17,000 --> 00:21:18,000
它那个 CPU 是比较弱了

698
00:21:18,000 --> 00:21:19,000
是两核的

699
00:21:19,000 --> 00:21:22,000
但是相比现在的 iMac MacBook Air 的话

700
00:21:22,000 --> 00:21:25,000
301 是一个一年前的完全同价格的一个产品

701
00:21:25,000 --> 00:21:26,000
拿来比较

702
00:21:26,000 --> 00:21:28,000
然后我记得测试结果的话

703
00:21:28,000 --> 00:21:31,000
在 M 1 上面的编译时间大概是 40 秒

704
00:21:31,000 --> 00:21:33,000
到了 MacBook Air 上面的话

705
00:21:33,000 --> 00:21:35,000
是大概接近 260 秒

706
00:21:35,000 --> 00:21:38,000
是这么一个翻这么多倍的差距

707
00:21:38,000 --> 00:21:40,000
就是 6 倍对吧

708
00:21:41,000 --> 00:21:41,000
对没错

709
00:21:41,000 --> 00:21:44,000
就是我在做这个测试的时候

710
00:21:44,000 --> 00:21:46,000
到后面我真的都不想等 MacBook Air

711
00:21:46,000 --> 00:21:47,000
测三次的结果了

712
00:21:47,000 --> 00:21:47,000
太漫长了

713
00:21:49,000 --> 00:21:50,000
那个 Air 还是有风扇的对吧

714
00:21:50,000 --> 00:21:51,000
我记得它有一个小风扇

715
00:21:51,000 --> 00:21:52,000
对是的

716
00:21:52,000 --> 00:21:55,000
而且风扇已经转到最响了

717
00:21:55,000 --> 00:21:56,000
但你这个也是有风扇

718
00:21:56,000 --> 00:21:59,000
但是如果说你是拿这个 M 1 的 Air 比

719
00:21:59,000 --> 00:22:01,000
我相信这个结果也不会差得太远

720
00:22:01,000 --> 00:22:03,000
因为我们看它的那个测评结果

721
00:22:03,000 --> 00:22:05,000
一般好像说是 8 分钟以上

722
00:22:05,000 --> 00:22:08,000
才会那个 throttle 就是降频限速

723
00:22:08,000 --> 00:22:09,000
没错

724
00:22:09,000 --> 00:22:10,000
所以来这次的话

725
00:22:10,000 --> 00:22:12,000
这次这个 Air 和 Pro 的其实是一个

726
00:22:12,000 --> 00:22:14,000
定位还挺奇怪的两个产品

727
00:22:14,000 --> 00:22:17,000
就是感觉好像到底该买 Pro 还是买 Air 的话

728
00:22:17,000 --> 00:22:18,000
很难选

729
00:22:18,000 --> 00:22:19,000
就你可以解释一下

730
00:22:19,000 --> 00:22:21,000
你为什么选择买 Pro 不买 Air 吗

731
00:22:21,000 --> 00:22:23,000
因为就从参数上来说

732
00:22:23,000 --> 00:22:24,000
好像差的并不多

733
00:22:24,000 --> 00:22:27,000
它的屏幕首先是差不多的是吧

734
00:22:27,000 --> 00:22:28,000
我印象中好像没有区别

735
00:22:28,000 --> 00:22:30,000
所有的技术都是一样的

736
00:22:30,000 --> 00:22:32,000
对而且这次不一样

737
00:22:32,000 --> 00:22:33,000
以前他们那个

738
00:22:33,000 --> 00:22:35,000
就上一代就是英特尔芯片的 Air

739
00:22:35,000 --> 00:22:37,000
它那个屏幕不是所谓的 P 3

740
00:22:37,000 --> 00:22:39,000
那个广色域的 Pool 吗

741
00:22:39,000 --> 00:22:41,000
但这次它连这个也升上来了

742
00:22:41,000 --> 00:22:43,000
对我记得我购买之前

743
00:22:43,000 --> 00:22:45,000
看过那个晶晶学习功课的时候

744
00:22:45,000 --> 00:22:47,000
发现好像没有什么

745
00:22:47,000 --> 00:22:50,000
屏幕上有人提到过会有区别

746
00:22:50,000 --> 00:22:52,000
我自己买 Pro 的话

747
00:22:52,000 --> 00:22:54,000
是想再给 Touch Bar 一个机会

748
00:22:54,000 --> 00:22:58,000
因为我在这台 Air 之前的那台的话

749
00:22:58,000 --> 00:22:59,000
也是一台 MacBook Pro

750
00:22:59,000 --> 00:23:01,000
但 Touch Bar 用的我非常早醒

751
00:23:01,000 --> 00:23:03,000
就是经常都会

752
00:23:03,000 --> 00:23:04,000
想要一个功能键的时候

753
00:23:04,000 --> 00:23:05,000
要么摸不到它在哪里

754
00:23:05,000 --> 00:23:07,000
特别是 Escape 键

755
00:23:07,000 --> 00:23:09,000
或者是它直接死机掉

756
00:23:09,000 --> 00:23:10,000
所以说就非常的难受

757
00:23:10,000 --> 00:23:12,000
所以这次想着

758
00:23:12,000 --> 00:23:13,000
既然要换的话

759
00:23:13,000 --> 00:23:14,000
那我就再给你

760
00:23:14,000 --> 00:23:16,000
顺便给 Pro 一个机会

761
00:23:16,000 --> 00:23:18,000
你的上一代那个 Pro 的是没有

762
00:23:18,000 --> 00:23:20,000
独立的物理的那个 Escape 键的

763
00:23:20,000 --> 00:23:21,000
那个那款对吧

764
00:23:21,000 --> 00:23:21,000
对是的

765
00:23:21,000 --> 00:23:24,000
那是最早发布的那一款的 Touch Bar

766
00:23:24,000 --> 00:23:25,000
嗯

767
00:23:25,000 --> 00:23:26,000
它后来是出过一款

768
00:23:26,000 --> 00:23:28,000
有单独的这个 Escape 键

769
00:23:28,000 --> 00:23:30,000
同时有 Touch Bar 的 MacBook Pro

770
00:23:30,000 --> 00:23:31,000
我记得对不对

771
00:23:31,000 --> 00:23:31,000
对就是上一款

772
00:23:31,000 --> 00:23:33,000
就是 19 年更新那一代

773
00:23:33,000 --> 00:23:34,000
是 19 还是哪一年

774
00:23:34,000 --> 00:23:34,000
我记得的方案

775
00:23:34,000 --> 00:23:35,000
就这一代和上一代

776
00:23:35,000 --> 00:23:37,000
在这个方面是一模一样

777
00:23:37,000 --> 00:23:40,000
就是今年年初那一代应该是

778
00:23:40,000 --> 00:23:41,000
哦

779
00:23:41,000 --> 00:23:42,000
就今年的

780
00:23:42,000 --> 00:23:42,000
就是只要

781
00:23:42,000 --> 00:23:44,000
如果你现在去苹果店买

782
00:23:44,000 --> 00:23:45,000
然后你说你要这个

783
00:23:45,000 --> 00:23:47,000
英特尔芯片的 MacBook Pro

784
00:23:47,000 --> 00:23:50,000
它都是同时有物理的 Escape 键

785
00:23:50,000 --> 00:23:51,000
和 Touch Bar

786
00:23:52,000 --> 00:23:55,000
所以你是我 Vlog 的第一个

787
00:23:55,000 --> 00:23:57,000
好像还不太反感 Touch Bar 的人

788
00:23:57,000 --> 00:23:58,000
但是你刚才说

789
00:23:58,000 --> 00:23:59,000
其实体验也不是很好

790
00:23:59,000 --> 00:24:01,000
我其实是很反感的

791
00:24:01,000 --> 00:24:02,000
对我刚才想说

792
00:24:02,000 --> 00:24:04,000
就是你用第一代 Touch Bar

793
00:24:04,000 --> 00:24:05,000
你觉得很不爽

794
00:24:05,000 --> 00:24:08,000
然后你说想要再给第二代 Touch Bar

795
00:24:08,000 --> 00:24:09,000
一个机会

796
00:24:09,000 --> 00:24:10,000
对

797
00:24:10,000 --> 00:24:11,000
这个思路就比较

798
00:24:12,000 --> 00:24:13,000
那就比较奇怪是吧

799
00:24:13,000 --> 00:24:14,000
Pro 啊

800
00:24:14,000 --> 00:24:16,000
这就是真的自身果粉吧

801
00:24:17,000 --> 00:24:18,000
而且可能可以算吧

802
00:24:18,000 --> 00:24:20,000
就是因为既然要换电脑了

803
00:24:20,000 --> 00:24:21,000
那就多带来一点变化

804
00:24:21,000 --> 00:24:24,000
多带点不一样的去体验呗是吧

805
00:24:24,000 --> 00:24:25,000
这个我觉得也可以理解

806
00:24:25,000 --> 00:24:27,000
因为有一个很显著的区别

807
00:24:27,000 --> 00:24:29,000
就是说英特尔的

808
00:24:29,000 --> 00:24:32,000
就是英特尔芯片的 MapPro Pro 的

809
00:24:32,000 --> 00:24:35,000
Touch Bar 是用 T 2 芯片来驱动的

810
00:24:35,000 --> 00:24:38,000
它有一个单独的 Bridge OS 来驱动它

811
00:24:38,000 --> 00:24:38,000
对吧

812
00:24:38,000 --> 00:24:41,000
就导致各种各样的通讯的问题

813
00:24:41,000 --> 00:24:42,000
我们都看到

814
00:24:42,000 --> 00:24:43,000
都已经看到各种什么死机

815
00:24:44,000 --> 00:24:45,000
什么没反应

816
00:24:45,000 --> 00:24:47,000
都已经很多吐槽了

817
00:24:47,000 --> 00:24:51,000
但这次 M 1 的 Touch Bar 照我的理解

818
00:24:51,000 --> 00:24:54,000
首先 M 1 已经把 T 2 的所有功能

819
00:24:54,000 --> 00:24:55,000
整合在 M 1 里面

820
00:24:55,000 --> 00:24:56,000
没有单独的一个 T 2 芯片了

821
00:24:56,000 --> 00:24:58,000
那我的理解应该也不存在

822
00:24:58,000 --> 00:25:00,000
所谓的 Bridge OS 了

823
00:25:00,000 --> 00:25:00,000
对吧

824
00:25:00,000 --> 00:25:02,000
它应该就是在 M 芯片里面

825
00:25:02,000 --> 00:25:03,000
单独自己在内核里面跑的

826
00:25:04,000 --> 00:25:06,000
所以有可能说

827
00:25:06,000 --> 00:25:08,000
这样就可以解决

828
00:25:08,000 --> 00:25:09,000
Touch Bar 之间各种

829
00:25:09,000 --> 00:25:10,000
什么响应失灵

830
00:25:10,000 --> 00:25:11,000
什么死机的问题

831
00:25:11,000 --> 00:25:11,000
对不对

832
00:25:11,000 --> 00:25:12,000
对

833
00:25:12,000 --> 00:25:13,000
因为这件事情之前和这些

834
00:25:13,000 --> 00:25:15,000
我们私下聊过

835
00:25:15,000 --> 00:25:17,000
就是从我自己观察的话

836
00:25:17,000 --> 00:25:18,000
就在旧版的设备上

837
00:25:18,000 --> 00:25:20,000
T 2 的芯片用的是 USB 总线

838
00:25:20,000 --> 00:25:23,000
和整个 CPU 去进行通信

839
00:25:23,000 --> 00:25:26,000
按照我们自己之前的经验来说的话

840
00:25:26,000 --> 00:25:28,000
USB 的总线的可靠性

841
00:25:28,000 --> 00:25:30,000
一般来说可能是没那么高的

842
00:25:30,000 --> 00:25:32,000
它还是会在某种情况下就闪断了

843
00:25:32,000 --> 00:25:35,000
然后说会不会是因为这样的一个原因

844
00:25:35,000 --> 00:25:36,000
导致 Touch Bar

845
00:25:36,000 --> 00:25:37,000
有的时候就突然就死机了

846
00:25:37,000 --> 00:25:39,000
或者是它怎么就不灵了

847
00:25:39,000 --> 00:25:41,000
所以说我也是在想试一下

848
00:25:41,000 --> 00:25:43,000
所以你想再给它一个机会看一下

849
00:25:43,000 --> 00:25:43,000
对

850
00:25:43,000 --> 00:25:44,000
是的

851
00:25:44,000 --> 00:25:44,000
对

852
00:25:44,000 --> 00:25:46,000
看它是不是也是硬的

853
00:25:46,000 --> 00:25:50,000
如果说我们旁开不稳定性

854
00:25:50,000 --> 00:25:52,000
和死机这种因素来看

855
00:25:52,000 --> 00:25:53,000
Touch Bar 本身你觉得

856
00:25:53,000 --> 00:25:56,000
它的使用性还是可以的

857
00:25:56,000 --> 00:25:58,000
我觉得也不太好说

858
00:25:58,000 --> 00:26:01,000
就是它虽然说看上去直观上来说

859
00:26:01,000 --> 00:26:03,000
它把很多操作放在键盘上

860
00:26:03,000 --> 00:26:05,000
这样我能够直接站着操作的话

861
00:26:05,000 --> 00:26:06,000
是一个提升

862
00:26:06,000 --> 00:26:08,000
但它有一个扣分项就是

863
00:26:08,000 --> 00:26:09,000
假如说我本身

864
00:26:09,000 --> 00:26:11,000
我自己会订了很多 FN 的功能键

865
00:26:11,000 --> 00:26:12,000
有特定的作用

866
00:26:12,000 --> 00:26:13,000
我如果是键盘的话

867
00:26:13,000 --> 00:26:14,000
我能摸到那个键在哪里

868
00:26:14,000 --> 00:26:15,000
我好

869
00:26:15,000 --> 00:26:16,000
我很多时候可以盲打

870
00:26:16,000 --> 00:26:17,000
操作就直接对

871
00:26:17,000 --> 00:26:17,000
按上去了

872
00:26:17,000 --> 00:26:18,000
但是如果是 Touch Bar

873
00:26:18,000 --> 00:26:19,000
我完全按不到

874
00:26:19,000 --> 00:26:20,000
我必须得低头去看

875
00:26:20,000 --> 00:26:21,000
到底在哪按上去

876
00:26:21,000 --> 00:26:22,000
对

877
00:26:22,000 --> 00:26:23,000
这个问题我觉得是没有办法

878
00:26:23,000 --> 00:26:25,000
通过任何软件和这个

879
00:26:25,000 --> 00:26:26,000
就是什么优化来实现

880
00:26:26,000 --> 00:26:27,000
因为它就是一个很物理的东西

881
00:26:27,000 --> 00:26:28,000
对吧

882
00:26:28,000 --> 00:26:29,000
你能不能通过触感

883
00:26:29,000 --> 00:26:30,000
对

884
00:26:30,000 --> 00:26:30,000
是的

885
00:26:30,000 --> 00:26:31,000
来摸到那个东西

886
00:26:31,000 --> 00:26:32,000
因为 Touch Bar 最核心的

887
00:26:32,000 --> 00:26:35,000
就是说它把 FN 那排键的功能

888
00:26:35,000 --> 00:26:37,000
变成了一个随时可以定义

889
00:26:37,000 --> 00:26:39,000
它叫 Context Aware

890
00:26:39,000 --> 00:26:41,000
就是说根据使用环境

891
00:26:41,000 --> 00:26:43,000
比如说你切了某一个 APP

892
00:26:43,000 --> 00:26:44,000
到前台

893
00:26:44,000 --> 00:26:46,000
它 Touch Bar 的功能就不一样

894
00:26:46,000 --> 00:26:46,000
对不对

895
00:26:46,000 --> 00:26:47,000
但这个就导致

896
00:26:47,000 --> 00:26:49,000
你没办法说此时

897
00:26:49,000 --> 00:26:51,000
你不看 Touch Bar 的时候

898
00:26:51,000 --> 00:26:51,000
它会怎么样

899
00:26:51,000 --> 00:26:52,000
你是不知道的

900
00:26:52,000 --> 00:26:53,000
对

901
00:26:53,000 --> 00:26:54,000
而且还带来的另外一个问题

902
00:26:54,000 --> 00:26:55,000
就是误触

903
00:26:55,000 --> 00:26:56,000
就是我可能会不注意

904
00:26:56,000 --> 00:26:57,000
就碰到它了

905
00:26:57,000 --> 00:26:59,000
就把什么词就调不对了

906
00:26:59,000 --> 00:27:01,000
我记得 Touch Bar 刚出来的时候

907
00:27:01,000 --> 00:27:02,000
我发过一条推

908
00:27:02,000 --> 00:27:03,000
就说

909
00:27:03,000 --> 00:27:05,000
我花 20 年的时间学习

910
00:27:05,000 --> 00:27:08,000
怎样不看键盘来打字

911
00:27:08,000 --> 00:27:09,000
Touch Bar 出来之后

912
00:27:09,000 --> 00:27:11,000
我又反过来需要看键盘了

913
00:27:11,000 --> 00:27:14,000
这个就让人感觉很逆历史潮流

914
00:27:14,000 --> 00:27:14,000
你懂吗

915
00:27:14,000 --> 00:27:16,000
所以我觉得 Touch Bar 这个东西

916
00:27:16,000 --> 00:27:17,000
真的是有点像苹果

917
00:27:17,000 --> 00:27:19,000
就是为了做的不一样

918
00:27:19,000 --> 00:27:21,000
强行做出来一个不一样的东西

919
00:27:21,000 --> 00:27:23,000
然后感觉说不定

920
00:27:23,000 --> 00:27:26,000
之后希望它能改邪归正吧

921
00:27:26,000 --> 00:27:28,000
但是你还是用金钱支持了它

922
00:27:28,000 --> 00:27:29,000
你用脚投票说

923
00:27:29,000 --> 00:27:32,000
你们还记得我在这条鞋路上越走越远吧

924
00:27:32,000 --> 00:27:33,000
对

925
00:27:33,000 --> 00:27:34,000
好像是你这样说的话

926
00:27:34,000 --> 00:27:38,000
我还是怀着一个比较果粉的心态

927
00:27:38,000 --> 00:27:39,000
希望再给它一次机会

928
00:27:39,000 --> 00:27:40,000
是我自己的问题

929
00:27:40,000 --> 00:27:41,000
不是它的问题吧

930
00:27:41,000 --> 00:27:43,000
但现在这两天用下来

931
00:27:43,000 --> 00:27:45,000
感觉好像不是我问题

932
00:27:45,000 --> 00:27:46,000
OK

933
00:27:46,000 --> 00:27:47,000
好

934
00:27:47,000 --> 00:27:48,000
那我们到时候再观测一下

935
00:27:48,000 --> 00:27:52,000
就是这次 M 1 的 Mapper Pro 普及开后

936
00:27:52,000 --> 00:27:54,000
首先我们看确实是不是说

937
00:27:54,000 --> 00:27:56,000
Touch Bar 的各种不稳定问题

938
00:27:56,000 --> 00:28:01,000
可以丢过于 Bridge OS 和 USB 的不稳定性

939
00:28:01,000 --> 00:28:02,000
如果这个问题解决之后

940
00:28:02,000 --> 00:28:03,000
我们再来看

941
00:28:03,000 --> 00:28:06,000
刨除到这种导致

942
00:28:06,000 --> 00:28:08,000
就是极大扣分的负面因素之后

943
00:28:08,000 --> 00:28:10,000
Touch Bar 本身它能不能够打动消费者

944
00:28:10,000 --> 00:28:12,000
除了 Touch Bar 之外

945
00:28:12,000 --> 00:28:16,000
这回的 M 1 芯片的 Mapper Pro 和 Mapper Air

946
00:28:16,000 --> 00:28:17,000
它唯一的区别

947
00:28:17,000 --> 00:28:19,000
就只有在外形和重量上了

948
00:28:19,000 --> 00:28:19,000
好像是

949
00:28:19,000 --> 00:28:21,000
因为那个不管是就是

950
00:28:21,000 --> 00:28:22,000
接口也是一样的

951
00:28:22,000 --> 00:28:23,000
屏幕是一样的

952
00:28:23,000 --> 00:28:25,000
甚至连 WiFi 天线的数量

953
00:28:25,000 --> 00:28:26,000
两根都是一样的

954
00:28:26,000 --> 00:28:26,000
对吧

955
00:28:26,000 --> 00:28:28,000
SSD 也是一样的

956
00:28:28,000 --> 00:28:30,000
触摸板都是一样的

957
00:28:30,000 --> 00:28:30,000
对

958
00:28:30,000 --> 00:28:32,000
这件事情给人感觉

959
00:28:32,000 --> 00:28:35,000
就是 Apple 应该是直接把原来的英特尔的版本

960
00:28:35,000 --> 00:28:35,000
就拿过来

961
00:28:35,000 --> 00:28:36,000
换了个新

962
00:28:36,000 --> 00:28:37,000
换了个主板

963
00:28:37,000 --> 00:28:39,000
大概其他的没有什么大的改进

964
00:28:39,000 --> 00:28:40,000
就直接拿出来

965
00:28:40,000 --> 00:28:44,000
好像在 mini 上这件事情会更显著一些

966
00:28:44,000 --> 00:28:47,000
就至少我们看那个 iMac F 6 昨天的拆解图

967
00:28:47,000 --> 00:28:48,000
它打开来看

968
00:28:48,000 --> 00:28:52,000
我们来对比跟上一代英特尔的芯片的 Mapper Pro

969
00:28:52,000 --> 00:28:53,000
它确实是一模一样的

970
00:28:53,000 --> 00:28:58,000
连 CPU 风扇的型号都是一模一样的

971
00:28:58,000 --> 00:28:59,000
没错

972
00:28:59,000 --> 00:29:03,000
而且 mini 的话好像据说会额外空出来很多空间

973
00:29:03,000 --> 00:29:05,000
就是明明可以做的更小的

974
00:29:05,000 --> 00:29:07,000
更精简的一个设备

975
00:29:07,000 --> 00:29:07,000
对

976
00:29:07,000 --> 00:29:10,000
它其实里面就是半空了已经

977
00:29:10,000 --> 00:29:10,000
对

978
00:29:10,000 --> 00:29:12,000
当时 Rail 问我要不要买 mini

979
00:29:12,000 --> 00:29:14,000
我觉得这肯定不能买

980
00:29:14,000 --> 00:29:16,000
这明明可以做的更小

981
00:29:16,000 --> 00:29:18,000
然后一定要塞在既有的壳子里面

982
00:29:18,000 --> 00:29:21,000
我宁可等更小的下一代好了

983
00:29:21,000 --> 00:29:23,000
下一代也不一定变得更小

984
00:29:23,000 --> 00:29:24,000
可能变得更 powerful 了

985
00:29:24,000 --> 00:29:27,000
就是上次给你一个 Mac mini Pro 之类的这种

986
00:29:27,000 --> 00:29:28,000
对

987
00:29:28,000 --> 00:29:30,000
不管怎么说这一代显然没有下载好

988
00:29:30,000 --> 00:29:31,000
对

989
00:29:31,000 --> 00:29:32,000
这句话永远是对的

990
00:29:32,000 --> 00:29:36,000
但是早买早享受也是这也是有道理

991
00:29:36,000 --> 00:29:37,000
我印象特别深刻

992
00:29:37,000 --> 00:29:38,000
因为我当时是买的

993
00:29:38,000 --> 00:29:42,000
你们记不记得苹果是在 12 年发布的第一款

994
00:29:42,000 --> 00:29:44,000
Retina 的 Mapper Pro 15 寸的那一款

995
00:29:44,000 --> 00:29:47,000
它当时还是搭载的独立显卡

996
00:29:47,000 --> 00:29:49,000
还是 NVIDIA 的应该是多少来的

997
00:29:49,000 --> 00:29:51,000
什么 GD 00 M 好像是

998
00:29:51,000 --> 00:29:52,000
对

999
00:29:52,000 --> 00:29:54,000
那一代我应该也是买了的

1000
00:29:55,000 --> 00:29:57,000
我都是第一个去吃第一代螃蟹的人

1001
00:29:57,000 --> 00:29:57,000
对

1002
00:29:57,000 --> 00:30:00,000
那你遇到质量问题了吗

1003
00:30:00,000 --> 00:30:02,000
我好像不记得有遇到什么问题

1004
00:30:02,000 --> 00:30:05,000
我记得我对那台 Macbook 当时还各方面挺满意的

1005
00:30:05,000 --> 00:30:08,000
说回来这个 MV

1006
00:30:08,000 --> 00:30:09,000
因为你没有买 mini

1007
00:30:09,000 --> 00:30:11,000
然后因为你有 DTK

1008
00:30:11,000 --> 00:30:12,000
所以我们目前

1009
00:30:12,000 --> 00:30:15,000
苹果目前还没有公布道理说

1010
00:30:15,000 --> 00:30:16,000
DTK 它是租给你们用

1011
00:30:16,000 --> 00:30:17,000
对吧

1012
00:30:17,000 --> 00:30:17,000
当时也说得很明确

1013
00:30:17,000 --> 00:30:19,000
那个东西产权不是属于你的

1014
00:30:19,000 --> 00:30:20,000
到时候你还得退回去

1015
00:30:20,000 --> 00:30:21,000
对

1016
00:30:21,000 --> 00:30:22,000
但是不知道退回去之后

1017
00:30:22,000 --> 00:30:23,000
然后呢

1018
00:30:23,000 --> 00:30:24,000
因为你是为付了钱的

1019
00:30:24,000 --> 00:30:25,000
对吧

1020
00:30:25,000 --> 00:30:25,000
对

1021
00:30:25,000 --> 00:30:26,000
当然那个钱的话

1022
00:30:26,000 --> 00:30:28,000
它说的是一个 Program Fee

1023
00:30:28,000 --> 00:30:30,000
是加入这个计划的钱

1024
00:30:30,000 --> 00:30:32,000
它和买这个设备根本就没有任何的关系

1025
00:30:32,000 --> 00:30:35,000
所以说它即使要求你收回去

1026
00:30:35,000 --> 00:30:36,000
然后什么也不说

1027
00:30:36,000 --> 00:30:40,000
你也是没有办法说去抱怨这件事情

1028
00:30:40,000 --> 00:30:41,000
但是好像据说

1029
00:30:41,000 --> 00:30:43,000
按照当年 PowerPC

1030
00:30:43,000 --> 00:30:46,000
这个迁移的那个时候的事情的话

1031
00:30:46,000 --> 00:30:47,000
苹果之后你还回去的时候

1032
00:30:47,000 --> 00:30:48,000
是会还给你

1033
00:30:48,000 --> 00:30:50,000
是会再换给你一个

1034
00:30:50,000 --> 00:30:52,000
市售的一个正式版的一个产品的

1035
00:30:52,000 --> 00:30:53,000
现在开发者

1036
00:30:53,000 --> 00:30:55,000
大家都还挺期待这件事情

1037
00:30:55,000 --> 00:30:57,000
当时它是给了一个

1038
00:30:57,000 --> 00:30:59,000
行星英特尔版本的 iMac

1039
00:30:59,000 --> 00:31:00,000
给你给那些就是

1040
00:31:00,000 --> 00:31:01,000
常识的开发者

1041
00:31:01,000 --> 00:31:03,000
但是可能这件事情不太好比

1042
00:31:03,000 --> 00:31:04,000
因为当时苹果开发者的数量

1043
00:31:04,000 --> 00:31:05,000
还是非常少的

1044
00:31:05,000 --> 00:31:05,000
对吧

1045
00:31:05,000 --> 00:31:07,000
至少跟现在不是一个数量级

1046
00:31:07,000 --> 00:31:08,000
可能差两个数量级

1047
00:31:08,000 --> 00:31:09,000
我估计

1048
00:31:09,000 --> 00:31:11,000
现在就是说有这么多人的情况下

1049
00:31:12,000 --> 00:31:14,000
估计不能送 iMac 了吧

1050
00:31:14,000 --> 00:31:15,000
有点贵

1051
00:31:15,000 --> 00:31:17,000
能送一个 Mac mini 回来就已经不错了

1052
00:31:17,000 --> 00:31:18,000
对

1053
00:31:18,000 --> 00:31:20,000
我觉得可能送一个 M 1 的 Mini

1054
00:31:20,000 --> 00:31:20,000
应该算一下

1055
00:31:20,000 --> 00:31:22,000
价值上应该是差不多的

1056
00:31:22,000 --> 00:31:24,000
因为现在 M 1 的 Mac mini

1057
00:31:24,000 --> 00:31:25,000
它标配是多少钱

1058
00:31:25,000 --> 00:31:27,000
好像就是 600 刀差不多是吧

1059
00:31:27,000 --> 00:31:29,000
599 还是 699 来的

1060
00:31:29,000 --> 00:31:30,000
好像差不多

1061
00:31:30,000 --> 00:31:31,000
反正是这个价位上

1062
00:31:32,000 --> 00:31:34,000
但要是这样比的话

1063
00:31:34,000 --> 00:31:35,000
现在开发者

1064
00:31:35,000 --> 00:31:36,000
虽然说可能比原来多了很多

1065
00:31:36,000 --> 00:31:37,000
比如说多 10 倍

1066
00:31:37,000 --> 00:31:39,000
苹果的市值也翻 10 倍了是吧

1067
00:31:39,000 --> 00:31:40,000
那也可以

1068
00:31:42,000 --> 00:31:44,000
但他也不能赔钱给你

1069
00:31:44,000 --> 00:31:44,000
我的意思就是说

1070
00:31:44,000 --> 00:31:46,000
他可能就是让点力

1071
00:31:46,000 --> 00:31:47,000
比如说我这个不怎么赚钱

1072
00:31:47,000 --> 00:31:48,000
你算吧

1073
00:31:48,000 --> 00:31:49,000
如果说我们查一下

1074
00:31:49,000 --> 00:31:53,000
现在 Mac mini 的官方售价是多少钱

1075
00:31:53,000 --> 00:31:53,000
对吧

1076
00:31:53,000 --> 00:31:54,000
M 1 的刚好 699

1077
00:31:54,000 --> 00:31:56,000
你交的开发者费用

1078
00:31:56,000 --> 00:31:58,000
差不多是 500 刀对吧

1079
00:31:58,000 --> 00:31:59,000
我们知道苹果大概是

1080
00:31:59,000 --> 00:32:01,000
通常来说是 30%的

1081
00:32:04,000 --> 00:32:04,000
利润率

1082
00:32:05,000 --> 00:32:06,000
差不多 Mini 的成本

1083
00:32:06,000 --> 00:32:08,000
也就是 300 400 刀的样子

1084
00:32:09,000 --> 00:32:10,000
减掉物流成本

1085
00:32:10,000 --> 00:32:11,000
估计能打得住我估计

1086
00:32:11,000 --> 00:32:12,000
实在不行

1087
00:32:13,000 --> 00:32:15,000
我觉得给开发者一个折扣券什么的

1088
00:32:15,000 --> 00:32:16,000
能够抵消一下

1089
00:32:16,000 --> 00:32:18,000
你自己去买的时候的债格

1090
00:32:18,000 --> 00:32:20,000
我觉得其实也已经很不错了

1091
00:32:20,000 --> 00:32:22,000
抵 5 年 Apple Developer 年费

1092
00:32:23,000 --> 00:32:24,000
也可以

1093
00:32:25,000 --> 00:32:26,000
也可以也是个方案

1094
00:32:28,000 --> 00:32:31,000
或者给 App Store 的 Gift Card

1095
00:32:31,000 --> 00:32:32,000
你可以去店里买东西也行

1096
00:32:33,000 --> 00:32:34,000
对

1097
00:32:34,000 --> 00:32:36,000
那就和其实就和底钱差不多一个意思

1098
00:32:36,000 --> 00:32:36,000
对

1099
00:32:36,000 --> 00:32:37,000
但就你自由一点

1100
00:32:37,000 --> 00:32:38,000
你不一定说一定

1101
00:32:38,000 --> 00:32:39,000
假设你不想要 Mini

1102
00:32:39,000 --> 00:32:41,000
然后你只要要个 Air 对吧

1103
00:32:41,000 --> 00:32:43,000
他给你选择就多一些

1104
00:32:43,000 --> 00:32:43,000
是的

1105
00:32:43,000 --> 00:32:46,000
这个还挺期待到时候会怎么样

1106
00:32:46,000 --> 00:32:48,000
但如果说到时候真的换回来一个 Mini

1107
00:32:48,000 --> 00:32:49,000
你可以拿它来做

1108
00:32:49,000 --> 00:32:51,000
这个什么编译主机用对吧

1109
00:32:52,000 --> 00:32:53,000
对可以

1110
00:32:53,000 --> 00:32:54,000
到时是没问题的

1111
00:32:54,000 --> 00:32:57,000
毕竟比你 iMac Pro 的编译性能要好

1112
00:32:58,000 --> 00:32:59,000
对我现在都在犹豫

1113
00:32:59,000 --> 00:33:01,000
我要不要干脆拿个 Mini

1114
00:33:01,000 --> 00:33:03,000
来把我这个 iMac Pro 给替代算了

1115
00:33:04,000 --> 00:33:05,000
就把那个 iMac Pro 给出了

1116
00:33:05,000 --> 00:33:06,000
然后换一个那个什么

1117
00:33:07,000 --> 00:33:11,000
Pro XDR Display 回来接上那个 Mac Mini

1118
00:33:11,000 --> 00:33:11,000
对

1119
00:33:11,000 --> 00:33:14,000
但是那个显示器的价格又变成了一个阻碍

1120
00:33:15,000 --> 00:33:16,000
等一下他们说是怎么来的

1121
00:33:16,000 --> 00:33:20,000
就是那个显示器的支架的价钱

1122
00:33:20,000 --> 00:33:21,000
是要比那个 Mini 贵的

1123
00:33:22,000 --> 00:33:24,000
对是那个支架的比 Mini 还贵

1124
00:33:25,000 --> 00:33:27,000
对我所以我去店里买的时候

1125
00:33:27,000 --> 00:33:30,000
我又仔细的端详了一下那个支架

1126
00:33:30,000 --> 00:33:32,000
它做的确实是很优雅的

1127
00:33:32,000 --> 00:33:37,000
很 Fancy 的有一种这种跑车的感觉

1128
00:33:37,000 --> 00:33:37,000
是不是

1129
00:33:38,000 --> 00:33:39,000
对是的

1130
00:33:40,000 --> 00:33:41,000
那你要买吗

1131
00:33:41,000 --> 00:33:42,000
我觉得还是值那个钱

1132
00:33:43,000 --> 00:33:45,000
我觉得想来想冷静一下

1133
00:33:45,000 --> 00:33:49,000
还是等着它二代出现 M 2 这样的芯片的时候

1134
00:33:49,000 --> 00:33:49,000
再签一把

1135
00:33:49,000 --> 00:33:51,000
确实现在在 M 1 上要做

1136
00:33:51,000 --> 00:33:54,000
完全拿来作为一个工作开发环境的话

1137
00:33:54,000 --> 00:33:56,000
可能还会稍微有一点障碍

1138
00:33:56,000 --> 00:33:58,000
这种情况下的话就没有必要这样

1139
00:33:58,000 --> 00:34:00,000
非要强行换过去了

1140
00:34:00,000 --> 00:34:02,000
那刚好那我们就刚才聊完它的硬件好了

1141
00:34:02,000 --> 00:34:04,000
我们就过渡到说这个软件的问题

1142
00:34:04,000 --> 00:34:06,000
就是目前你用下来

1143
00:34:06,000 --> 00:34:07,000
在日常生活中

1144
00:34:07,000 --> 00:34:08,000
我们分两类吧

1145
00:34:08,000 --> 00:34:09,000
就是首先说

1146
00:34:09,000 --> 00:34:12,000
你的工作上如果用它会遇到什么样的障碍

1147
00:34:12,000 --> 00:34:13,000
然后说是如果你日常

1148
00:34:14,000 --> 00:34:16,000
就是日常消遣也用它也会遇到什么样的问题

1149
00:34:16,000 --> 00:34:17,000
我们先做工作这块吧

1150
00:34:17,000 --> 00:34:19,000
就是说你说还是有一些工具店

1151
00:34:19,000 --> 00:34:21,000
不够那么完善的对吧

1152
00:34:21,000 --> 00:34:22,000
就主要是哪些呢

1153
00:34:23,000 --> 00:34:25,000
是的就是如果是苹果自己相关的

1154
00:34:25,000 --> 00:34:27,000
Xcode 相关的这些东西的话

1155
00:34:27,000 --> 00:34:28,000
几乎都毫无问题

1156
00:34:28,000 --> 00:34:30,000
所有东西都他都把你已经想好了

1157
00:34:30,000 --> 00:34:33,000
你就顶多是调点参数改些参数就行了

1158
00:34:33,000 --> 00:34:36,000
然后的话最多的话就是 Brow

1159
00:34:36,000 --> 00:34:38,000
就是那些命令行下面的话一些工具

1160
00:34:39,000 --> 00:34:42,000
本身的话这次做的这个监中层是非常完美的

1161
00:34:42,000 --> 00:34:45,000
就是英特尔的 Argentin 在机器上执行

1162
00:34:45,000 --> 00:34:46,000
不会有任何的问题

1163
00:34:46,000 --> 00:34:50,000
但是一旦遇到像 BatchScript 这样的脚本的时候

1164
00:34:50,000 --> 00:34:51,000
就可能会出问题了

1165
00:34:51,000 --> 00:34:53,000
然后特别是当他需要去编译

1166
00:34:53,000 --> 00:34:56,000
本地编译一些那个代码出来

1167
00:34:56,000 --> 00:34:58,000
然后去运行的时候就会出问题

1168
00:34:58,000 --> 00:35:01,000
但其实这个事情有一个很简单的解决方法

1169
00:35:01,000 --> 00:35:02,000
你把你整个 Terminal

1170
00:35:02,000 --> 00:35:04,000
就是 iterm 或者是官方的 Terminal

1171
00:35:04,000 --> 00:35:08,000
用那个特定的一个指令去执行了之后

1172
00:35:08,000 --> 00:35:11,000
让他直接让整个 Terminal 运行英特尔的框架之下

1173
00:35:11,000 --> 00:35:15,000
这样的话他去执行的下面的子进层 Batch

1174
00:35:15,000 --> 00:35:16,000
然后和 Script 的话

1175
00:35:16,000 --> 00:35:19,000
都会延续着这个他的母进程的这么

1176
00:35:19,000 --> 00:35:21,000
副进程的这么一个设置

1177
00:35:21,000 --> 00:35:24,000
所以说就是以虚拟的方式去运行

1178
00:35:24,000 --> 00:35:26,000
所以说可以消灭掉很多很多的问题

1179
00:35:26,000 --> 00:35:27,000
这里可能要解释一下

1180
00:35:27,000 --> 00:35:29,000
就是说首先默认情况下

1181
00:35:29,000 --> 00:35:32,000
在 M 1 的 Mac 上面

1182
00:35:32,000 --> 00:35:34,000
你开的任何程序

1183
00:35:34,000 --> 00:35:35,000
他有两种程序

1184
00:35:35,000 --> 00:35:36,000
一种是原生的 Arm

1185
00:35:36,000 --> 00:35:40,000
就是 Arm 指令集的这种程序

1186
00:35:40,000 --> 00:35:41,000
然后就是这种叫 Native

1187
00:35:41,000 --> 00:35:43,000
我们叫原生对吧

1188
00:35:43,000 --> 00:35:45,000
还有一种就是用英特尔的指令

1189
00:35:45,000 --> 00:35:49,000
但是是通过 Rosetta 2 的模拟层来实现的

1190
00:35:49,000 --> 00:35:49,000
对吧

1191
00:35:49,000 --> 00:35:53,000
它 Emulation 就是用在一个 Arm 的芯片上

1192
00:35:53,000 --> 00:35:54,000
模拟运行 x 86 的指令

1193
00:35:54,000 --> 00:35:59,000
然后来跑原来那些旧的英特尔的那些

1194
00:35:59,000 --> 00:35:59,000
指令集的程序

1195
00:35:59,000 --> 00:36:00,000
不做任何修改

1196
00:36:00,000 --> 00:36:01,000
对是的

1197
00:36:01,000 --> 00:36:03,000
然后你的目前的状况是说

1198
00:36:03,000 --> 00:36:06,000
如果你用那些原生的

1199
00:36:06,000 --> 00:36:08,000
有的话是没有任何问题的

1200
00:36:08,000 --> 00:36:10,000
但是如果说原生它

1201
00:36:10,000 --> 00:36:12,000
就它原来是英特尔的这个指令集的程序

1202
00:36:12,000 --> 00:36:14,000
你最好还是用 Rosetta 2 的方式

1203
00:36:14,000 --> 00:36:17,000
来驱动它会比较好一些

1204
00:36:17,000 --> 00:36:20,000
就是它如果本身是二进制的分发

1205
00:36:20,000 --> 00:36:21,000
然后是英特尔的代码

1206
00:36:21,000 --> 00:36:24,000
你就直接当它就是一个原生程序

1207
00:36:24,000 --> 00:36:25,000
用起来没有任何的问题

1208
00:36:25,000 --> 00:36:27,000
这个兼用程序做得非常好

1209
00:36:27,000 --> 00:36:30,000
但这个时候它还是通过模拟的方式来执行的

1210
00:36:30,000 --> 00:36:30,000
对吧

1211
00:36:30,000 --> 00:36:32,000
因为它不是原生的一个 Arm 程序

1212
00:36:32,000 --> 00:36:35,000
对它只是以 CPU 性能上会有损耗

1213
00:36:35,000 --> 00:36:36,000
另外我观察的话

1214
00:36:36,000 --> 00:36:37,000
它的内存占用上

1215
00:36:37,000 --> 00:36:40,000
几乎是它在英特尔设备上的两倍

1216
00:36:40,000 --> 00:36:42,000
可能是要涉及到虚拟的方式的话

1217
00:36:42,000 --> 00:36:44,000
它有一些特定的一些损耗

1218
00:36:44,000 --> 00:36:46,000
可能要翻译一些指令

1219
00:36:46,000 --> 00:36:46,000
要缓存起来

1220
00:36:46,000 --> 00:36:47,000
可能

1221
00:36:47,000 --> 00:36:47,000
对是的

1222
00:36:47,000 --> 00:36:51,000
所以的话就是一个内存和 CPU 的问题

1223
00:36:51,000 --> 00:36:52,000
但是不会影响你工作

1224
00:36:52,000 --> 00:36:53,000
所以但是的话

1225
00:36:53,000 --> 00:36:55,000
就是会直接跑不起来的程序的话

1226
00:36:55,000 --> 00:36:57,000
主要都是一些特别复杂的

1227
00:36:57,000 --> 00:36:59,000
然后脚本类型的

1228
00:36:59,000 --> 00:37:00,000
因为脚本类型的话

1229
00:37:00,000 --> 00:37:02,000
它会导致你这个翻译的机制

1230
00:37:02,000 --> 00:37:04,000
你不知道你现在该去工作

1231
00:37:04,000 --> 00:37:08,000
你该对脚本进行一些特定的一些建筑性的事情

1232
00:37:08,000 --> 00:37:10,000
所以它就整个就 Break 掉了

1233
00:37:10,000 --> 00:37:12,000
你的意思就是说脚本

1234
00:37:12,000 --> 00:37:13,000
就是它是以 Arm 的方式来运行的

1235
00:37:13,000 --> 00:37:16,000
但是开发者是在 X 86 的整理器上实现

1236
00:37:16,000 --> 00:37:19,000
所以导致这里面有点冲突的地方

1237
00:37:19,000 --> 00:37:19,000
对是的

1238
00:37:19,000 --> 00:37:20,000
没错

1239
00:37:20,000 --> 00:37:21,000
就比如说你是那个脚

1240
00:37:21,000 --> 00:37:24,000
它直接靠一个脚本去编译出一段代码

1241
00:37:24,000 --> 00:37:26,000
编译的那些各种参数和命令的话

1242
00:37:26,000 --> 00:37:28,000
都是为 X 86 环境设计的

1243
00:37:28,000 --> 00:37:30,000
然后这个时候你去执行的话

1244
00:37:30,000 --> 00:37:32,000
那个整个 Bash 整个 Terminal 这个环境

1245
00:37:32,000 --> 00:37:33,000
全都是在 Arm 状态下

1246
00:37:33,000 --> 00:37:34,000
它运到脚本

1247
00:37:34,000 --> 00:37:37,000
脚本里面自然各种命令就和它出问题了

1248
00:37:37,000 --> 00:37:38,000
它就没办法进行下去了

1249
00:37:38,000 --> 00:37:41,000
就可能连参数都不支持了

1250
00:37:41,000 --> 00:37:42,000
并且也是 X 86 特有的参数

1251
00:37:42,000 --> 00:37:43,000
对是的

1252
00:37:43,000 --> 00:37:46,000
但是如果你把整个 Terminal 都是使用

1253
00:37:46,000 --> 00:37:47,000
Arch 指令上

1254
00:37:47,000 --> 00:37:50,000
它以虚拟环境的话去执行的话

1255
00:37:51,000 --> 00:37:53,000
后面的整个动机一套它就全部都堆上了

1256
00:37:53,000 --> 00:37:54,000
所以说它又能用起来了

1257
00:37:54,000 --> 00:37:57,000
就是连整个 Terminal 都运行在 Rosetta 2 的

1258
00:37:57,000 --> 00:37:58,000
这个 X 86 的环境

1259
00:37:58,000 --> 00:38:01,000
所以它下面启动的所有的脚本

1260
00:38:01,000 --> 00:38:03,000
它也认为它是还是在一个 X 86 的

1261
00:38:03,000 --> 00:38:04,000
这个芯片上运行

1262
00:38:04,000 --> 00:38:05,000
所以就不会出任何问题

1263
00:38:05,000 --> 00:38:09,000
然后因为 Rosetta 2 的模拟层又做得特别好

1264
00:38:09,000 --> 00:38:09,000
所以目前来看

1265
00:38:09,000 --> 00:38:11,000
兼容性上是可以得到保证的

1266
00:38:11,000 --> 00:38:12,000
对是的

1267
00:38:12,000 --> 00:38:13,000
OK 那你有没有留意到

1268
00:38:13,000 --> 00:38:17,000
它用 Rosetta 2 来模拟运行 X 86 的这些

1269
00:38:17,000 --> 00:38:18,000
不管是脚本也好

1270
00:38:18,000 --> 00:38:19,000
还是一些就是比如说像 Dropbox

1271
00:38:19,000 --> 00:38:20,000
它还没有改对吧

1272
00:38:20,000 --> 00:38:21,000
这种原原本的程序

1273
00:38:21,000 --> 00:38:25,000
除了刚才你提到内存佔用比较大的问题之外

1274
00:38:25,000 --> 00:38:26,000
它性能损耗大概有多少

1275
00:38:26,000 --> 00:38:27,000
你能感受得到吗

1276
00:38:27,000 --> 00:38:28,000
UI 程序的话

1277
00:38:28,000 --> 00:38:30,000
几乎感受不到

1278
00:38:30,000 --> 00:38:32,000
就是你可能感觉点开的时候

1279
00:38:32,000 --> 00:38:33,000
稍微它慢了一点

1280
00:38:33,000 --> 00:38:36,000
就是可能慢了那么一秒不到的一个时间吧

1281
00:38:36,000 --> 00:38:37,000
但是我不确定这是心理作用

1282
00:38:37,000 --> 00:38:40,000
还是那个它真的是慢的一个作用

1283
00:38:40,000 --> 00:38:42,000
也有可能是今天我们要说到的

1284
00:38:42,000 --> 00:38:44,000
后面那个问题导致的对吧

1285
00:38:44,000 --> 00:38:45,000
是的

1286
00:38:45,000 --> 00:38:49,000
然后根据别人的评测结果来看的话

1287
00:38:49,000 --> 00:38:51,000
即使是在虚拟程序上运行的速度的话

1288
00:38:51,000 --> 00:38:53,000
都比在原来的英特尔的机器上

1289
00:38:53,000 --> 00:38:54,000
原生运行还快

1290
00:38:54,000 --> 00:38:57,000
这个实在是太可怕了

1291
00:38:57,000 --> 00:38:57,000
对

1292
00:38:57,000 --> 00:39:00,000
这个是我觉得最让我们吃惊的一个地方

1293
00:39:00,000 --> 00:39:05,000
它在一个 M 1 芯片上模拟运行 X 86 的指令

1294
00:39:05,000 --> 00:39:10,000
还比在 X 86 的原生的机器上去运行还要快

1295
00:39:10,000 --> 00:39:13,000
因为 MCC 的性能提升足够大

1296
00:39:13,000 --> 00:39:13,000
对吧

1297
00:39:13,000 --> 00:39:14,000
然后它模拟所要

1298
00:39:14,000 --> 00:39:18,000
比如说 M 1 比上一代 X 86 的性能提高了 70%

1299
00:39:18,000 --> 00:39:20,000
然后模拟损耗可能只有 20%或者是 30%

1300
00:39:20,000 --> 00:39:21,000
你再这样算下来

1301
00:39:21,000 --> 00:39:23,000
我还是有 40%的提高

1302
00:39:23,000 --> 00:39:24,000
对不对

1303
00:39:24,000 --> 00:39:28,000
这个真的是把英特尔模拼完

1304
00:39:28,000 --> 00:39:29,000
是的

1305
00:39:29,000 --> 00:39:32,000
这个这段感觉就都怀疑人生了

1306
00:39:32,000 --> 00:39:33,000
英特尔到底这么多年

1307
00:39:33,000 --> 00:39:35,000
最近在干什么

1308
00:39:35,000 --> 00:39:36,000
真的是没有对比就没有伤害

1309
00:39:36,000 --> 00:39:40,000
你在 Apple 搞出一个东西之前

1310
00:39:40,000 --> 00:39:44,000
你是不知道英特尔是已经老态龙中道了

1311
00:39:44,000 --> 00:39:44,000
一个什么地步

1312
00:39:44,000 --> 00:39:45,000
是的

1313
00:39:45,000 --> 00:39:47,000
虽然我们经常会调侃牙膏厂

1314
00:39:47,000 --> 00:39:50,000
但是我们可能心里面总会有一个想法说

1315
00:39:50,000 --> 00:39:54,000
可能现在芯片发展的确是到了就是到了这个瓶颈

1316
00:39:54,000 --> 00:39:56,000
老实说这个摩尔定力到头了

1317
00:39:56,000 --> 00:39:57,000
对不对

1318
00:39:57,000 --> 00:40:00,000
然后苹果说来看我调达你一下

1319
00:40:00,000 --> 00:40:01,000
对

1320
00:40:01,000 --> 00:40:03,000
只不过在新的 M 1 上面的话

1321
00:40:03,000 --> 00:40:05,000
还是能发现一些不一样的东西

1322
00:40:05,000 --> 00:40:08,000
有一些可能是在本来在 X 86 结构上

1323
00:40:08,000 --> 00:40:10,000
我们已经熟悉了十几年

1324
00:40:10,000 --> 00:40:11,000
几十年的一些东西

1325
00:40:11,000 --> 00:40:14,000
它现在在苹果这里必须被颠覆了

1326
00:40:14,000 --> 00:40:16,000
比如说我发现的话可能有这几个

1327
00:40:16,000 --> 00:40:20,000
一个是根据最新的拆解结果看的话

1328
00:40:20,000 --> 00:40:23,000
新的 WiFi 和蓝牙芯片已经不再是一个

1329
00:40:23,000 --> 00:40:25,000
高通的一个独立的一个设备了

1330
00:40:25,000 --> 00:40:26,000
在原来的 iMac 上的话

1331
00:40:26,000 --> 00:40:27,000
我理解的话

1332
00:40:27,000 --> 00:40:30,000
它应该还是在 PCIe 总体上的一个设备吧

1333
00:40:30,000 --> 00:40:33,000
它老的那个苹果的 Mac 方案的 WiFi 方案

1334
00:40:33,000 --> 00:40:35,000
一般都是接那个博通的方案

1335
00:40:35,000 --> 00:40:36,000
博通的单独给它做一块卡

1336
00:40:36,000 --> 00:40:37,000
对

1337
00:40:37,000 --> 00:40:39,000
但是这个事情好像也不是苹果先发明的

1338
00:40:39,000 --> 00:40:41,000
因为我记得如果没记错的话

1339
00:40:41,000 --> 00:40:44,000
英特尔是就是最近两年做了一个技术吧

1340
00:40:44,000 --> 00:40:48,000
就是它把 WiFi 的主要也就是这个

1341
00:40:48,000 --> 00:40:49,000
一 WiFi 它分两个一个是叫做

1342
00:40:49,000 --> 00:40:51,000
就是 Physical layer 就是物理层

1343
00:40:51,000 --> 00:40:55,000
就包括什么无线信号的调制解调

1344
00:40:55,000 --> 00:40:55,000
那一套东西

1345
00:40:55,000 --> 00:40:56,000
它单独还有一个东西

1346
00:40:56,000 --> 00:40:58,000
但是它的那个逻辑就是什么协议

1347
00:40:58,000 --> 00:41:00,000
控制那一层

1348
00:41:00,000 --> 00:41:02,000
它就已经做到了英特尔的芯片里面去

1349
00:41:02,000 --> 00:41:04,000
所以你现在去买一些比较最新的

1350
00:41:04,000 --> 00:41:06,000
最新的英特尔的移动笔记本

1351
00:41:06,000 --> 00:41:09,000
你会发现它那个也是在芯片组里面

1352
00:41:09,000 --> 00:41:11,000
就是在英特尔的芯片里面完成的

1353
00:41:11,000 --> 00:41:12,000
就这个事情也是一样的

1354
00:41:12,000 --> 00:41:14,000
明白

1355
00:41:14,000 --> 00:41:17,000
以后都是变成那种独立的

1356
00:41:17,000 --> 00:41:20,000
因为我们以前还搞那个就拆那个叫做拆卡

1357
00:41:20,000 --> 00:41:22,000
比如说我们给一个老的 Mac 换

1358
00:41:22,000 --> 00:41:26,000
上比如 WiFi 6 的这个 WiFi 卡也是可行的

1359
00:41:26,000 --> 00:41:27,000
但以后就越来越不可行了

1360
00:41:27,000 --> 00:41:29,000
就是因为它是集成在 CPU 里面的了

1361
00:41:29,000 --> 00:41:32,000
对有一个更其他的更直观的

1362
00:41:32,000 --> 00:41:34,000
就是那个 Facetime 的摄像头

1363
00:41:34,000 --> 00:41:36,000
原来的话 Facetime 摄像头

1364
00:41:36,000 --> 00:41:37,000
也是靠 USB 总线接入的

1365
00:41:37,000 --> 00:41:39,000
现在在新的 ME 设备上

1366
00:41:39,000 --> 00:41:41,000
我在系统信息里面看

1367
00:41:41,000 --> 00:41:43,000
USB 总线上默认上是干干净净的

1368
00:41:43,000 --> 00:41:44,000
什么设备都没有

1369
00:41:44,000 --> 00:41:46,000
所以这些内置的这些设备的话

1370
00:41:46,000 --> 00:41:49,000
很有可能现在都是苹果自己的一些

1371
00:41:49,000 --> 00:41:53,000
特殊的一些实现去直接就和主芯片去通讯了

1372
00:41:53,000 --> 00:41:56,000
而不是一些标准的像我们是熟悉的这些方式

1373
00:41:56,000 --> 00:41:58,000
它叫 SLC 嘛对吧 System Check

1374
00:41:58,000 --> 00:42:01,000
整合度是非常令人吃惊的

1375
00:42:01,000 --> 00:42:04,000
另外还有一个比较有趣的事情就是

1376
00:42:04,000 --> 00:42:07,000
当你的 ME 设备如果它真的整个系统坏了之后

1377
00:42:07,000 --> 00:42:09,000
你怎么样去让它恢复这个事情

1378
00:42:09,000 --> 00:42:12,000
变得也有点稍微有点奇怪

1379
00:42:12,000 --> 00:42:14,000
就原来的话我们的电脑

1380
00:42:14,000 --> 00:42:15,000
不管是台式机也好

1381
00:42:15,000 --> 00:42:17,000
笔记本也好坏了的话

1382
00:42:17,000 --> 00:42:21,000
像 Mac 的话是进入恢复模式从网上通信一下嘛

1383
00:42:21,000 --> 00:42:23,000
然后像是或者的话

1384
00:42:23,000 --> 00:42:25,000
更传统的方式就是拿 U 盘

1385
00:42:25,000 --> 00:42:26,000
或者是光驱光盘

1386
00:42:26,000 --> 00:42:28,000
重新去装整个操作系统

1387
00:42:28,000 --> 00:42:30,000
现在在新的 ME 设备上

1388
00:42:30,000 --> 00:42:33,000
当如果你出现了真正彻底死掉的设备

1389
00:42:33,000 --> 00:42:34,000
彻底死掉开不开的时候

1390
00:42:34,000 --> 00:42:37,000
你要做的事情是再找一台 Mac

1391
00:42:37,000 --> 00:42:38,000
把它两个连起来

1392
00:42:38,000 --> 00:42:41,000
然后把那台 Mac 按照特定的开机方式

1393
00:42:41,000 --> 00:42:42,000
让它进 DFU 模式

1394
00:42:42,000 --> 00:42:44,000
然后在这边的 Mac 上去刷它

1395
00:42:44,000 --> 00:42:46,000
就像刷一个 iPhone 一样

1396
00:42:46,000 --> 00:42:48,000
它不能自举了

1397
00:42:48,000 --> 00:42:49,000
对我还没有试过

1398
00:42:49,000 --> 00:42:52,000
但是不知道是否拿一个可启动的 U 盘上去之后

1399
00:42:52,000 --> 00:42:55,000
能够通过 U 盘去启动

1400
00:42:55,000 --> 00:42:57,000
根据之前 DTK 的一些经验的话

1401
00:42:57,000 --> 00:42:59,000
就是是那个时候是不行的

1402
00:42:59,000 --> 00:43:02,000
唯一的恢复方法就是我再拿一台 Mac

1403
00:43:02,000 --> 00:43:05,000
然后把它接上来当成一个设备

1404
00:43:05,000 --> 00:43:06,000
然后把它刷一遍系统

1405
00:43:06,000 --> 00:43:08,000
所以听到这里其实我们已经猜出了

1406
00:43:08,000 --> 00:43:10,000
DTK 你是遇到了什么问题

1407
00:43:10,000 --> 00:43:11,000
才需要做这种操作

1408
00:43:12,000 --> 00:43:13,000
虽然我们不能识论它

1409
00:43:13,000 --> 00:43:16,000
但是我们推测出来应该是这么一个结构

1410
00:43:16,000 --> 00:43:18,000
对我没有对它进行评表

1411
00:43:22,000 --> 00:43:23,000
刚才说到了这个软件

1412
00:43:23,000 --> 00:43:26,000
你的工具软件没什么遇到问题

1413
00:43:26,000 --> 00:43:28,000
就是你日常需要用的一些软件

1414
00:43:28,000 --> 00:43:29,000
上面有遇到什么问题吗

1415
00:43:29,000 --> 00:43:32,000
就是不管是原生运行的还是需要模拟运行的

1416
00:43:32,000 --> 00:43:33,000
应该是完全没遇到

1417
00:43:33,000 --> 00:43:35,000
首先是因为我用的软件的话

1418
00:43:35,000 --> 00:43:38,000
大家这些开发者的话都更新速度非常快

1419
00:43:38,000 --> 00:43:41,000
基本上日常用到的像 Bear

1420
00:43:41,000 --> 00:43:43,000
Syncios 这些的话都已经专门适配

1421
00:43:43,000 --> 00:43:46,000
已经是原生代码的那个版本都已经出来了

1422
00:43:46,000 --> 00:43:47,000
所以说没有任何问题

1423
00:43:47,000 --> 00:43:50,000
然后有一些稍微的旧一点的程序

1424
00:43:50,000 --> 00:43:51,000
你像 Jobbox

1425
00:43:51,000 --> 00:43:54,000
Spotify 这些的话就靠金融程序

1426
00:43:54,000 --> 00:43:56,000
你需要虚拟化的运行也没有任何问题

1427
00:43:56,000 --> 00:43:59,000
而且我相信这些他们也会比较快的

1428
00:43:59,000 --> 00:44:01,000
把那个 M 1 版本的就是做出来

1429
00:44:01,000 --> 00:44:04,000
因为他们还是要做这个原生的

1430
00:44:04,000 --> 00:44:05,000
比较在乎用户体验的这些公司

1431
00:44:06,000 --> 00:44:06,000
是的

1432
00:44:06,000 --> 00:44:08,000
而且其实整个迁移过程的话

1433
00:44:08,000 --> 00:44:10,000
其实工作量并不大

1434
00:44:10,000 --> 00:44:11,000
都是比较繁

1435
00:44:11,000 --> 00:44:13,000
主要是各种参数的一些金融性的

1436
00:44:13,000 --> 00:44:14,000
一些小修小调的一些问题

1437
00:44:14,000 --> 00:44:16,000
没有什么需要你彻底去

1438
00:44:16,000 --> 00:44:19,000
颠覆原来架构重构这样的一些事情

1439
00:44:19,000 --> 00:44:21,000
对因为你自己也有几个程序是

1440
00:44:21,000 --> 00:44:24,000
很快就 port 到了这个 M 1 上面去

1441
00:44:24,000 --> 00:44:25,000
好像这过程中

1442
00:44:25,000 --> 00:44:26,000
我理解应该也是比较平滑的

1443
00:44:26,000 --> 00:44:28,000
没有遇到什么太大的问题

1444
00:44:28,000 --> 00:44:28,000
是的

1445
00:44:28,000 --> 00:44:31,000
就基本上就是几个依赖库

1446
00:44:31,000 --> 00:44:32,000
然后把它拿来之后

1447
00:44:32,000 --> 00:44:34,000
调整一下它的一些编译参数

1448
00:44:34,000 --> 00:44:35,000
在阿姆上当编译出来

1449
00:44:35,000 --> 00:44:37,000
然后至于我自己的代码的话

1450
00:44:37,000 --> 00:44:38,000
主要是依赖 xcode

1451
00:44:38,000 --> 00:44:41,000
xcode 这些的话就基本上是

1452
00:44:41,000 --> 00:44:42,000
点两下搞定

1453
00:44:43,000 --> 00:44:46,000
这就一直在这个苹果生态体系里面

1454
00:44:46,000 --> 00:44:47,000
对它是比较舒服的对吧

1455
00:44:47,000 --> 00:44:49,000
它已经帮你把所有的问题都解决了

1456
00:44:49,000 --> 00:44:51,000
然后你只用点点就好了

1457
00:44:52,000 --> 00:44:54,000
对一方面是他帮解决了吧

1458
00:44:54,000 --> 00:44:56,000
但另外一方面就是本身的话

1459
00:44:56,000 --> 00:44:59,000
这个 Mac 和 iOS 的开发者生态是就是

1460
00:44:59,000 --> 00:44:59,000
打通的

1461
00:44:59,000 --> 00:45:01,000
大家基本上写的代码的话出来一些

1462
00:45:01,000 --> 00:45:03,000
因为用的一些专用户不一样

1463
00:45:03,000 --> 00:45:03,000
它不兼容

1464
00:45:03,000 --> 00:45:06,000
实际上本身大部分你在 Mac 上的代码

1465
00:45:06,000 --> 00:45:08,000
在 iOS 上也是能用的

1466
00:45:08,000 --> 00:45:11,000
所以说这个它就自己就本身就不存在

1467
00:45:11,000 --> 00:45:12,000
就这个牵引的这么一个障碍

1468
00:45:12,000 --> 00:45:15,000
所以就是那你在实际的就是

1469
00:45:15,000 --> 00:45:16,000
就是说我们现在你做了两款

1470
00:45:16,000 --> 00:45:17,000
Serge 的

1471
00:45:18,000 --> 00:45:19,000
就是 iOS 版

1472
00:45:19,000 --> 00:45:21,000
和 Lpass 的 iOS 版现在都可以

1473
00:45:21,000 --> 00:45:23,000
就是理论上你就可以在

1474
00:45:23,000 --> 00:45:25,000
Mac 上去下这个 iOS 版来用

1475
00:45:25,000 --> 00:45:27,000
只是说它的界面可能没有为这个 Mac

1476
00:45:27,000 --> 00:45:28,000
单独优化

1477
00:45:28,000 --> 00:45:30,000
对然后碰巧刚好这两个软件都是有

1478
00:45:30,000 --> 00:45:31,000
单独的

1479
00:45:31,000 --> 00:45:32,000
为 Mac 优化

1480
00:45:32,000 --> 00:45:34,000
甚至功能上也有比较比较大的

1481
00:45:34,000 --> 00:45:36,000
不一样的这个 Mac 版本

1482
00:45:36,000 --> 00:45:37,000
所以好像也没有什么必要

1483
00:45:38,000 --> 00:45:39,000
是的

1484
00:45:39,000 --> 00:45:41,000
但而且让人感觉 Apple 这件事情做的

1485
00:45:41,000 --> 00:45:42,000
还挺细心的

1486
00:45:42,000 --> 00:45:45,000
就是本来以为它大概是做了这么样

1487
00:45:45,000 --> 00:45:47,000
你之后你起起来就像原来我们的

1488
00:45:47,000 --> 00:45:48,000
虚拟机一样

1489
00:45:48,000 --> 00:45:50,000
然后你可以在里面用上大部分的 UI

1490
00:45:50,000 --> 00:45:53,000
功能就已经还是一个不错的一个情况了

1491
00:45:53,000 --> 00:45:55,000
呃比如说我先我自己开发 Serge 的时候

1492
00:45:55,000 --> 00:45:58,000
虚拟机里面的 Serge 是肯定没有办法

1493
00:45:58,000 --> 00:46:01,000
启动 Network Extension 这个网络扩展去接管

1494
00:46:01,000 --> 00:46:03,000
Mac 的那个网络的

1495
00:46:03,000 --> 00:46:06,000
但是现在我发现神奇的是就是在 Apple

1496
00:46:06,000 --> 00:46:08,000
上面你下了 Serge 之后你用 Serge 的 iOS 版

1497
00:46:09,000 --> 00:46:11,000
它在 iOS 的这么一个模拟器

1498
00:46:11,000 --> 00:46:13,000
这么一个虚拟环境下你启动了之后

1499
00:46:13,000 --> 00:46:16,000
它能够对接上系统 Mac 系统上的 N 1

1500
00:46:16,000 --> 00:46:18,000
扩展这一套的所有的逻辑

1501
00:46:18,000 --> 00:46:21,000
然后把整个系统的维纤给接管了

1502
00:46:21,000 --> 00:46:24,000
这个是让我也是很惊艳的一件事情

1503
00:46:25,000 --> 00:46:27,000
也就是说不用怎么改

1504
00:46:27,000 --> 00:46:30,000
iOS 的这个版本也可以去操作 Mac 一些

1505
00:46:30,000 --> 00:46:32,000
底层的一些系统扩展

1506
00:46:32,000 --> 00:46:34,000
没错因为它这些扩展的话

1507
00:46:35,000 --> 00:46:37,000
它的 extension 的话它在 Mac 上和 iOS 上

1508
00:46:37,000 --> 00:46:39,000
它的接口是完全一样的

1509
00:46:39,000 --> 00:46:41,000
有很多扩展的接口都是完全一样的

1510
00:46:41,000 --> 00:46:41,000
像

1511
00:46:42,000 --> 00:46:45,000
就像我看那个 Net Extension Filter Data Provider

1512
00:46:45,000 --> 00:46:48,000
就是当时跟那个我们接下来聊的话题

1513
00:46:48,000 --> 00:46:50,000
比较相关的那个新闻里面的时候

1514
00:46:50,000 --> 00:46:51,000
我注意到它的

1515
00:46:52,000 --> 00:46:54,000
availability 是比如说它写会

1516
00:46:54,000 --> 00:46:56,000
它会写说 iOS 9.0

1517
00:46:56,000 --> 00:46:58,000
MacOS 10.15

1518
00:46:58,000 --> 00:47:01,000
然后加上 Mac Catalyst 13 以上

1519
00:47:01,000 --> 00:47:04,000
就是它会说这个 class 的这个

1520
00:47:04,000 --> 00:47:07,000
或者这个 API 的整个接口在这三个版本里面

1521
00:47:07,000 --> 00:47:08,000
是一本是完全一样的

1522
00:47:09,000 --> 00:47:11,000
所以它迁移成本应该是蛮小的

1523
00:47:11,000 --> 00:47:12,000
没错

1524
00:47:12,000 --> 00:47:16,000
但是就是让人感觉它也既然去花了这个心去

1525
00:47:16,000 --> 00:47:18,000
还是要花这个心去做这个事情

1526
00:47:18,000 --> 00:47:19,000
也是挺不容易的

1527
00:47:19,000 --> 00:47:23,000
它可以不接然后就导致这种用不了

1528
00:47:23,000 --> 00:47:24,000
对它也可以完全不接

1529
00:47:24,000 --> 00:47:27,000
其实一般来说用户不会太在意过一件事情

1530
00:47:28,000 --> 00:47:29,000
它也要求你改写

1531
00:47:29,000 --> 00:47:29,000
像

1532
00:47:30,000 --> 00:47:31,000
Microsoft 就直接会

1533
00:47:31,000 --> 00:47:33,000
Windows 就会要求你

1534
00:47:33,000 --> 00:47:35,000
你再写一遍了

1535
00:47:35,000 --> 00:47:36,000
对他们来看

1536
00:47:38,000 --> 00:47:39,000
这个时候反倒是说

1537
00:47:39,000 --> 00:47:42,000
苹果对这个跨平台兼容性做得还蛮好的

1538
00:47:42,000 --> 00:47:42,000
是吧

1539
00:47:42,000 --> 00:47:45,000
但它都是自己的这个控制的底层系统

1540
00:47:45,000 --> 00:47:46,000
没错

1541
00:47:46,000 --> 00:47:49,000
就是我看起来它还挺用力的会去推这件事情的

1542
00:47:49,000 --> 00:47:50,000
因为我一开始以为的话

1543
00:47:50,000 --> 00:47:53,000
就是可能我在 iOS 的 App 里面

1544
00:47:53,000 --> 00:47:54,000
它如果在 Mac 虚拟环境下

1545
00:47:54,000 --> 00:47:56,000
我一些获取系统配置

1546
00:47:56,000 --> 00:47:58,000
系统参数的一些函数

1547
00:47:58,000 --> 00:48:00,000
应该是能拿到的是 Mac 的一些参数

1548
00:48:00,000 --> 00:48:01,000
这才是比较合理的

1549
00:48:01,000 --> 00:48:04,000
结果我发现其实 Apple 对这个进行了一个造假

1550
00:48:05,000 --> 00:48:08,000
我在一个 Mac 设备上面

1551
00:48:08,000 --> 00:48:10,000
如果是 iOS 这么一种运行的方式的话

1552
00:48:10,000 --> 00:48:13,000
我拿到的设备信息是 iPad 14

1553
00:48:14,000 --> 00:48:15,000
对 14 多少 1

1554
00:48:16,000 --> 00:48:17,000
它会欺骗你是吧

1555
00:48:17,000 --> 00:48:17,000
对

1556
00:48:17,000 --> 00:48:20,000
就是说那你以为它是在一个 iPad 上运行的

1557
00:48:21,000 --> 00:48:22,000
对没错

1558
00:48:22,000 --> 00:48:25,000
操作系统版本是 14.1 还是 14.0

1559
00:48:25,000 --> 00:48:27,000
就是它完全的去虚拟化

1560
00:48:27,000 --> 00:48:28,000
造假出了一套 iOS 环境

1561
00:48:28,000 --> 00:48:31,000
让你整个应用相信你真的是在一个 iOS 上面去运行

1562
00:48:32,000 --> 00:48:35,000
对这里其实就我们就很自然的说到这件事情了

1563
00:48:35,000 --> 00:48:38,000
就是说当时大家都在担心

1564
00:48:38,000 --> 00:48:43,000
就是说换成 ARM 指令集后的 M 1

1565
00:48:44,000 --> 00:48:47,000
上面很多原生的 X 86 的软件不就运行不了了吗

1566
00:48:47,000 --> 00:48:48,000
那怎么办

1567
00:48:48,000 --> 00:48:50,000
不会面临这个软件荒吗

1568
00:48:50,000 --> 00:48:52,000
那其实我们看目前它的 TU 中两个解决方

1569
00:48:52,000 --> 00:48:55,000
一个就是说通过那里 Rosetta 2 来模拟运行 X 86

1570
00:48:55,000 --> 00:48:57,000
目前来看这个质量还是非常好的

1571
00:48:57,000 --> 00:49:00,000
基本上没有什么大的问题

1572
00:49:00,000 --> 00:49:04,000
然后就是说你还可以拿 iOS 上面的软件库

1573
00:49:04,000 --> 00:49:06,000
直接在 Mac 上不做

1574
00:49:06,000 --> 00:49:07,000
基本上不做什么修改

1575
00:49:07,000 --> 00:49:09,000
就在 Mac 上面去运行

1576
00:49:09,000 --> 00:49:11,000
这个就是说又提供了一个

1577
00:49:11,000 --> 00:49:14,000
就是说它是提供了一个单从功能性来讲

1578
00:49:14,000 --> 00:49:15,000
它其实提供了一个超级对吧

1579
00:49:15,000 --> 00:49:18,000
它除了能运行 Mac 本身的那些历史的软件

1580
00:49:19,000 --> 00:49:25,000
能运行专门为 M 1 芯片优化过的 Native 的 Mac 的软件

1581
00:49:25,000 --> 00:49:28,000
还可以运行本来在 iOS 上面运行

1582
00:49:28,000 --> 00:49:31,000
没有想到过会在 Mac 上跑的这种软件

1583
00:49:31,000 --> 00:49:33,000
它其实集了三个平台的好处

1584
00:49:33,000 --> 00:49:34,000
对 是的

1585
00:49:35,000 --> 00:49:36,000
Trinity 三维一体

1586
00:49:37,000 --> 00:49:38,000
这个回答

1587
00:49:39,000 --> 00:49:40,000
那有一个问题

1588
00:49:40,000 --> 00:49:42,000
就说可能打岔问一下

1589
00:49:42,000 --> 00:49:46,000
就是说因为你自己也是 iOS 程序的开发者

1590
00:49:46,000 --> 00:49:50,000
它这样的话会不会导致你的产品的布局

1591
00:49:50,000 --> 00:49:53,000
和包括定价策略会有一些影响

1592
00:49:53,000 --> 00:49:54,000
对 是的

1593
00:49:54,000 --> 00:49:56,000
我也在思考这个问题

1594
00:49:56,000 --> 00:50:01,000
然后现在暂时还没有一个比较明确的结论

1595
00:50:01,000 --> 00:50:04,000
但是确实是未来会需要更多去考虑的一个事情

1596
00:50:05,000 --> 00:50:06,000
Surge 这种比较特殊

1597
00:50:06,000 --> 00:50:08,000
就可能还相当于说比较清晰一点

1598
00:50:08,000 --> 00:50:10,000
因为至少我们看到 Surge 的 iOS 版

1599
00:50:10,000 --> 00:50:12,000
和 Surge 的 Mac 版

1600
00:50:12,000 --> 00:50:14,000
它在功能上有比较显著的区别

1601
00:50:14,000 --> 00:50:16,000
比如说路由模式

1602
00:50:16,000 --> 00:50:18,000
这个是只有 Mac 版才有的

1603
00:50:18,000 --> 00:50:18,000
对吧

1604
00:50:18,000 --> 00:50:21,000
iOS 版目前是基于因为平台限制是没法提供的

1605
00:50:21,000 --> 00:50:21,000
是的

1606
00:50:22,000 --> 00:50:25,000
但是如果你是直接把 iOS 版在 Mac 上运行

1607
00:50:25,000 --> 00:50:26,000
因为你根本就没有这个代码

1608
00:50:26,000 --> 00:50:30,000
所以它也是没有路由模式这种增强性的功能的

1609
00:50:30,000 --> 00:50:30,000
对不对

1610
00:50:30,000 --> 00:50:32,000
所以这个相当于说有这种差异性的地方

1611
00:50:32,000 --> 00:50:35,000
但是对于 Lpass 来说就比较尴尬

1612
00:50:35,000 --> 00:50:36,000
因为它的功能其实是差不多的

1613
00:50:36,000 --> 00:50:39,000
也没有说有平台这种排他性

1614
00:50:39,000 --> 00:50:41,000
但 Lpass 可能不太合适来比

1615
00:50:41,000 --> 00:50:47,000
因为 Lpass 本来它不是靠卖本身的授权来盈利的

1616
00:50:47,000 --> 00:50:47,000
对不对

1617
00:50:47,000 --> 00:50:48,000
它是靠订阅

1618
00:50:49,000 --> 00:50:49,000
对是的

1619
00:50:49,000 --> 00:50:52,000
对于现在主流是订阅制的话

1620
00:50:52,000 --> 00:50:53,000
其实就不存在这个问题

1621
00:50:53,000 --> 00:50:55,000
本来用户就是买一份订阅

1622
00:50:55,000 --> 00:50:56,000
然后在所有平台上就可以用

1623
00:50:56,000 --> 00:50:59,000
所以说你非要拿 iOS 版本在 Mac 上用的话

1624
00:50:59,000 --> 00:51:00,000
那作者其实

1625
00:51:00,000 --> 00:51:01,000
它也不拦你对吧

1626
00:51:01,000 --> 00:51:02,000
你爱怎么用怎么用

1627
00:51:02,000 --> 00:51:03,000
不会拦你

1628
00:51:03,000 --> 00:51:04,000
爱怎么样怎么样吧

1629
00:51:04,000 --> 00:51:06,000
但你比如说像 Syncios 这样的话

1630
00:51:06,000 --> 00:51:08,000
是按单平台独立去购买的话

1631
00:51:08,000 --> 00:51:10,000
就会有点尴尬这个事情

1632
00:51:11,000 --> 00:51:13,000
Mac 版的原生应用的用户体验

1633
00:51:13,000 --> 00:51:16,000
比起 iOS 版来说还是差距非常大的

1634
00:51:16,000 --> 00:51:19,000
毕竟是个模拟器是吧

1635
00:51:19,000 --> 00:51:21,000
你所有的操作都是在那么一个

1636
00:51:21,000 --> 00:51:23,000
虚拟化的这么一个小窗口里面干的

1637
00:51:23,000 --> 00:51:25,000
和你在 Mac 上面的话各种丰富的

1638
00:51:25,000 --> 00:51:27,000
交互还是差别很大

1639
00:51:27,000 --> 00:51:28,000
对差别还是很大的

1640
00:51:28,000 --> 00:51:30,000
所以说我觉得对开发者来说

1641
00:51:30,000 --> 00:51:33,000
应该是不会太 care 的一件事情

1642
00:51:33,000 --> 00:51:35,000
就不会说因为你能在我上面用了之后

1643
00:51:35,000 --> 00:51:38,000
我就收入减少了

1644
00:51:38,000 --> 00:51:39,000
或者是我就很担心啊怎么样的

1645
00:51:39,000 --> 00:51:41,000
我觉得到时候不会太成问题

1646
00:51:42,000 --> 00:51:44,000
对我觉得可能主要还是像避免

1647
00:51:44,000 --> 00:51:45,000
或者说如何

1648
00:51:45,000 --> 00:51:47,000
苹果如何才能避免就是 iPad

1649
00:51:47,000 --> 00:51:49,000
这种比较尴尬的一个状态

1650
00:51:49,000 --> 00:51:50,000
比如说我们现在看到

1651
00:51:50,000 --> 00:51:53,000
就是说很多这个国内的软件也好

1652
00:51:53,000 --> 00:51:55,000
甚至国外的软件其实也相对好一点

1653
00:51:55,000 --> 00:51:56,000
但是其实也有这个问题

1654
00:51:56,000 --> 00:51:59,000
就是说他要么就是没有这个 iPad 版

1655
00:51:59,000 --> 00:52:01,000
因为我记得好像是这个

1656
00:52:01,000 --> 00:52:03,000
Instagram 到现在还是没有 iPad 版对吧

1657
00:52:04,000 --> 00:52:05,000
没有肯定没有

1658
00:52:05,000 --> 00:52:08,000
对他就是你要强行在 iPad 上运行

1659
00:52:08,000 --> 00:52:09,000
iPhone 版也行对吧

1660
00:52:09,000 --> 00:52:10,000
就是变成一个很小的窗口

1661
00:52:10,000 --> 00:52:13,000
或者你有两倍的方式把它扩大嘛

1662
00:52:13,000 --> 00:52:15,000
然后像国内的有些软件的就是说

1663
00:52:15,000 --> 00:52:17,000
他有这个 iPad 版

1664
00:52:17,000 --> 00:52:18,000
那 iPad 版明显你看就是

1665
00:52:18,000 --> 00:52:20,000
基本上没有怎么用心去做

1666
00:52:20,000 --> 00:52:23,000
就随便重新放大了一下

1667
00:52:23,000 --> 00:52:25,000
就是就很粗暴

1668
00:52:25,000 --> 00:52:27,000
比如说我记得印象最深刻的

1669
00:52:27,000 --> 00:52:28,000
像那个京东对吧

1670
00:52:28,000 --> 00:52:30,000
京东这个我用的比较多

1671
00:52:30,000 --> 00:52:31,000
有时候买东西看什么

1672
00:52:31,000 --> 00:52:32,000
有时候 iPad 上在手边

1673
00:52:32,000 --> 00:52:33,000
我就直接在 iPad 上用

1674
00:52:33,000 --> 00:52:36,000
他连那个就是横屏转过来都不支持

1675
00:52:36,000 --> 00:52:38,000
就只能在 iPad 上竖屏

1676
00:52:38,000 --> 00:52:40,000
我刚好就是有那个外接键盘

1677
00:52:40,000 --> 00:52:42,000
我的 iPad 大部分都是横屏的状态

1678
00:52:42,000 --> 00:52:42,000
就很尴尬

1679
00:52:42,000 --> 00:52:44,000
我每次用的时候还得把脑袋斜过

1680
00:52:44,000 --> 00:52:46,000
斜个 90 多去看它

1681
00:52:46,000 --> 00:52:48,000
我已经放弃了

1682
00:52:48,000 --> 00:52:50,000
我直接就用 NASAFR 的浏览器里面用

1683
00:52:51,000 --> 00:52:53,000
对然后我就在想

1684
00:52:53,000 --> 00:52:57,000
就是说这种 iOS app 可以在 Mac 上运行

1685
00:52:57,000 --> 00:52:58,000
是可以的

1686
00:52:58,000 --> 00:53:01,000
但会不会有开发者单独为这件事情去优化

1687
00:53:01,000 --> 00:53:04,000
我觉得还是一个非常存疑的事情

1688
00:53:04,000 --> 00:53:05,000
就是如果不解决这个

1689
00:53:06,000 --> 00:53:08,000
付费的或者用户数量的问题

1690
00:53:08,000 --> 00:53:10,000
可能还是比较难

1691
00:53:10,000 --> 00:53:12,000
你说 iPad 绝对用户数

1692
00:53:12,000 --> 00:53:14,000
肯定还是比 Mac 绝对用户数要多一些的

1693
00:53:14,000 --> 00:53:15,000
但即便如此

1694
00:53:15,000 --> 00:53:17,000
常常还是觉得 iPad 好像没有那么重要

1695
00:53:17,000 --> 00:53:18,000
就不管

1696
00:53:18,000 --> 00:53:20,000
那 Mac 上面就更不用想了

1697
00:53:20,000 --> 00:53:22,000
对它其实得从另外一个角度

1698
00:53:22,000 --> 00:53:24,000
可以从另外一个角度来看这件事情的话

1699
00:53:24,000 --> 00:53:25,000
就是对于我们这种开发者

1700
00:53:25,000 --> 00:53:28,000
是本身就有多平台的软件存在的

1701
00:53:28,000 --> 00:53:30,000
所以说会出现互相平台之间

1702
00:53:30,000 --> 00:53:32,000
抢占那么的一个问题

1703
00:53:32,000 --> 00:53:34,000
但是对于更多的可能开发者来说

1704
00:53:34,000 --> 00:53:36,000
它根本就没有 Mac 版本

1705
00:53:36,000 --> 00:53:38,000
所以说它是凭空的话

1706
00:53:38,000 --> 00:53:40,000
多了一部分市场和用户

1707
00:53:40,000 --> 00:53:42,000
对于他来说这绝对是一个好消息

1708
00:53:42,000 --> 00:53:45,000
或者说他再做一点点简单的适配调整

1709
00:53:45,000 --> 00:53:49,000
能够比较低成本的去支持 Mac

1710
00:53:49,000 --> 00:53:50,000
它其实也还可以的

1711
00:53:50,000 --> 00:53:54,000
只要不让它完全再为 Mac 单独定制一套

1712
00:53:54,000 --> 00:53:55,000
那就很麻烦了

1713
00:53:56,000 --> 00:53:57,000
对是的没错

1714
00:53:57,000 --> 00:53:59,000
对因为这里就不得不吐槽一下

1715
00:53:59,000 --> 00:54:02,000
我们日常用的 Twitter 的官方客户端

1716
00:54:02,000 --> 00:54:03,000
在 Mac 上面

1717
00:54:03,000 --> 00:54:04,000
它本质上也是一个 iOS 版

1718
00:54:04,000 --> 00:54:08,000
通过叫什么 Catalyst 的方法来运行

1719
00:54:08,000 --> 00:54:10,000
我觉得就是 Catalyst

1720
00:54:10,000 --> 00:54:13,000
对所以说可能 Catalyst 稍微简单解释一下

1721
00:54:13,000 --> 00:54:14,000
就如果有朋友不太熟悉

1722
00:54:14,000 --> 00:54:22,000
Catalyst 是一套在 X 86 的芯片上的 Mac 上面

1723
00:54:22,000 --> 00:54:25,000
需要开发者做一些处理

1724
00:54:25,000 --> 00:54:28,000
才能够把一个 iOS 软件变成

1725
00:54:28,000 --> 00:54:30,000
Mac 上可以运行的这么一套方案对吧

1726
00:54:30,000 --> 00:54:30,000
对是的

1727
00:54:30,000 --> 00:54:32,000
和这个对比起来

1728
00:54:32,000 --> 00:54:34,000
那显然是在 M 1 芯片的

1729
00:54:34,000 --> 00:54:36,000
是 Rosetta 2 的差别

1730
00:54:36,000 --> 00:54:40,000
没有 Rosetta 它是在 M 1 上

1731
00:54:40,000 --> 00:54:43,000
运行 X 86 的 Mac 程序对吧

1732
00:54:43,000 --> 00:54:48,000
Catalyst 是在 X 86 的 Mac 上运行 iOS 的程序对吧

1733
00:54:48,000 --> 00:54:49,000
然后现在就是说你可以

1734
00:54:49,000 --> 00:54:51,000
就那个时候还是要

1735
00:54:51,000 --> 00:54:52,000
这两个事情都是要

1736
00:54:52,000 --> 00:54:54,000
就是 Rosetta 是不需要开发者介入的

1737
00:54:54,000 --> 00:54:56,000
然后 Catalyst 是需要开发者做一些操作的

1738
00:54:56,000 --> 00:54:59,000
然后还有一个不需要开发者做

1739
00:54:59,000 --> 00:55:01,000
一个默认操作的就是说

1740
00:55:01,000 --> 00:55:05,000
直接在 M 1 芯片的 Mac 上面去运行 iOS 的程序

1741
00:55:05,000 --> 00:55:07,000
那我觉得像比如说像 Twitter 这种客户端

1742
00:55:07,000 --> 00:55:09,000
这种做的这种调性

1743
00:55:09,000 --> 00:55:11,000
那你还不如不要那个 Catalyst

1744
00:55:11,000 --> 00:55:14,000
你直接在 M 1 上去运行一个 iOS 版本

1745
00:55:14,000 --> 00:55:15,000
可能效果还好一点

1746
00:55:15,000 --> 00:55:16,000
Wait a second

1747
00:55:16,000 --> 00:55:18,000
Twitter 的客户端你在用吗

1748
00:55:18,000 --> 00:55:19,000
我有在用啊

1749
00:55:19,000 --> 00:55:21,000
非常难用啊

1750
00:55:21,000 --> 00:55:23,000
我都已经完全忘记这件事情了

1751
00:55:23,000 --> 00:55:24,000
对我就忘用网页了

1752
00:55:24,000 --> 00:55:26,000
因为在 Mac 上面刷推的时间

1753
00:55:26,000 --> 00:55:27,000
可能也没有那么多吧

1754
00:55:28,000 --> 00:55:30,000
就可能发推的时间要比刷推时间多

1755
00:55:30,000 --> 00:55:32,000
对发推会比较多一些

1756
00:55:32,000 --> 00:55:34,000
它毕竟还是有那个系统级别的整合

1757
00:55:34,000 --> 00:55:36,000
比如说你在一个网页上

1758
00:55:36,000 --> 00:55:37,000
你要 share 到 Twitter 的话

1759
00:55:37,000 --> 00:55:38,000
你有两个方案

1760
00:55:38,000 --> 00:55:40,000
因为就是说你手工编辑

1761
00:55:40,000 --> 00:55:42,000
复制你那个叫什么

1762
00:55:42,000 --> 00:55:45,000
URL 到 Twitter 里面去发也可以

1763
00:55:45,000 --> 00:55:47,000
但是如果它有那个

1764
00:55:47,000 --> 00:55:49,000
虽然说是一个 Catalyst 改的一个 APP

1765
00:55:49,000 --> 00:55:51,000
但好歹它会提供在 share sheet 里面

1766
00:55:51,000 --> 00:55:53,000
分享那个菜单里面

1767
00:55:53,000 --> 00:55:54,000
提供说分享到 Twitter

1768
00:55:54,000 --> 00:55:56,000
你可以做一些相对的操作

1769
00:55:56,000 --> 00:55:57,000
就我还是比较

1770
00:55:57,000 --> 00:55:59,000
buying 这一套便利性的

1771
00:55:59,000 --> 00:56:01,000
我从来没有用过这功能

1772
00:56:01,000 --> 00:56:03,000
就 share to Twitter 这样

1773
00:56:04,000 --> 00:56:06,000
我还是在继续用 Twitter Bot

1774
00:56:06,000 --> 00:56:07,000
但 Twitter Bot 的话

1775
00:56:07,000 --> 00:56:09,000
现在受那个 API 影响比较大了

1776
00:56:09,000 --> 00:56:12,000
就是它那边 Twitter 没有给很多数据回来

1777
00:56:12,000 --> 00:56:14,000
很多的那些别人的回复啊什么的

1778
00:56:14,000 --> 00:56:15,000
还在你拿 Twitter Bot

1779
00:56:15,000 --> 00:56:17,000
中第三方客户端根本看不见

1780
00:56:17,000 --> 00:56:19,000
所以说 Twitter Bot 也就刷刷 Time Line

1781
00:56:19,000 --> 00:56:21,000
对因为最近那个

1782
00:56:21,000 --> 00:56:22,000
这两年 Twitter 的那个

1783
00:56:22,000 --> 00:56:25,000
就是产品本身的改动还是比较大的

1784
00:56:25,000 --> 00:56:26,000
你看它最近就出了一个新的

1785
00:56:26,000 --> 00:56:28,000
新的叫 fleets 什么功能

1786
00:56:28,000 --> 00:56:29,000
越发操蛋了吗

1787
00:56:30,000 --> 00:56:33,000
说白一点就是越发操蛋了

1788
00:56:34,000 --> 00:56:35,000
就是它这些新功能

1789
00:56:35,000 --> 00:56:37,000
都还没有在 API 的层面上

1790
00:56:37,000 --> 00:56:40,000
体现给第三方开发者去接入

1791
00:56:40,000 --> 00:56:42,000
所以你要去跟原生客户端

1792
00:56:42,000 --> 00:56:44,000
去竞争这个 feature rich

1793
00:56:44,000 --> 00:56:45,000
那肯定是比不上的

1794
00:56:45,000 --> 00:56:47,000
就是这里你做用户

1795
00:56:47,000 --> 00:56:48,000
你就必须得想说

1796
00:56:48,000 --> 00:56:49,000
那你怎么办的

1797
00:56:49,000 --> 00:56:50,000
那我就属于

1798
00:56:51,000 --> 00:56:52,000
尽量用原生还是原生吧

1799
00:56:52,000 --> 00:56:54,000
反正捏着鼻子用呗

1800
00:56:54,000 --> 00:56:55,000
对

1801
00:56:56,000 --> 00:56:58,000
现在差不多就是 M 1 的

1802
00:56:58,000 --> 00:57:00,000
这个 Mac 的问题就聊到这里

1803
00:57:00,000 --> 00:57:02,000
因为也是你是刚拿到

1804
00:57:02,000 --> 00:57:03,000
差不多还没有一个星期

1805
00:57:03,000 --> 00:57:03,000
有一个星期了吗

1806
00:57:04,000 --> 00:57:05,000
没有一个星期吧

1807
00:57:05,000 --> 00:57:08,000
应该就三天四天左右的样子

1808
00:57:08,000 --> 00:57:09,000
对就可能接下来

1809
00:57:09,000 --> 00:57:12,000
看我们目前看性能是没有问题的

1810
00:57:12,000 --> 00:57:13,000
然后不管是原生性能

1811
00:57:13,000 --> 00:57:14,000
就是爆表

1812
00:57:14,000 --> 00:57:15,000
然后模拟性能还是超越原来

1813
00:57:16,000 --> 00:57:18,000
建容性目前来看都还好

1814
00:57:18,000 --> 00:57:19,000
但是可能还是有些小小的

1815
00:57:19,000 --> 00:57:21,000
这种不尽人力的地方

1816
00:57:21,000 --> 00:57:23,000
但是我相信过个半年一年

1817
00:57:23,000 --> 00:57:26,000
等到他明年出第二代的这个

1818
00:57:26,000 --> 00:57:28,000
这个 Mac 的这个处理就是

1819
00:57:28,000 --> 00:57:29,000
就是可能 M 2

1820
00:57:29,000 --> 00:57:31,000
比如说去个利萨的时候

1821
00:57:31,000 --> 00:57:32,000
大家再去买

1822
00:57:32,000 --> 00:57:34,000
可能到时候一个是有新的这种

1823
00:57:34,000 --> 00:57:36,000
外形的机器了

1824
00:57:36,000 --> 00:57:37,000
另外就是说这些建容性的问题

1825
00:57:37,000 --> 00:57:39,000
基本上也都解决了

1826
00:57:39,000 --> 00:57:40,000
该转原生的都转原生的

1827
00:57:40,000 --> 00:57:42,000
然后该模拟的

1828
00:57:42,000 --> 00:57:43,000
如果还有问题的

1829
00:57:43,000 --> 00:57:44,000
可能也都修掉了对吧

1830
00:57:44,000 --> 00:57:46,000
然后那个时候大家再去

1831
00:57:46,000 --> 00:57:47,000
换一个问题就不是很大了

1832
00:57:48,000 --> 00:57:49,000
我这里还想问一下两位

1833
00:57:49,000 --> 00:57:51,000
你们用你们现在的

1834
00:57:51,000 --> 00:57:52,000
英特尔的 MacBook

1835
00:57:52,000 --> 00:57:55,000
有觉得在就是电池状态下

1836
00:57:55,000 --> 00:57:57,000
开盖之后到解锁这个过程

1837
00:57:57,000 --> 00:57:58,000
非常的痛苦吗

1838
00:57:59,000 --> 00:58:01,000
首先我现在没有用 Mac

1839
00:58:01,000 --> 00:58:03,000
我现在是用他 Mini X 86

1840
00:58:03,000 --> 00:58:05,000
所以我只能告诉你说

1841
00:58:05,000 --> 00:58:06,000
换洗那个那一个过程

1842
00:58:06,000 --> 00:58:07,000
肯定不是非常的快

1843
00:58:07,000 --> 00:58:08,000
他还是要等一下下

1844
00:58:09,000 --> 00:58:12,000
我好像基本上不怎么关盖

1845
00:58:13,000 --> 00:58:14,000
好的

1846
00:58:14,000 --> 00:58:16,000
我换洗的过程就是按一下

1847
00:58:16,000 --> 00:58:18,000
随便按一下键盘什么键

1848
00:58:18,000 --> 00:58:19,000
或者敲一下书标证

1849
00:58:19,000 --> 00:58:20,000
好明白了

1850
00:58:20,000 --> 00:58:22,000
就是我最近几年的

1851
00:58:22,000 --> 00:58:24,000
这个感受上来说的话

1852
00:58:24,000 --> 00:58:25,000
我的话 MacBook

1853
00:58:25,000 --> 00:58:26,000
我每次每次打开

1854
00:58:26,000 --> 00:58:28,000
他的盖子的时候

1855
00:58:28,000 --> 00:58:29,000
都感觉非常的痛苦

1856
00:58:29,000 --> 00:58:32,000
黑屏可能就会黑个

1857
00:58:32,000 --> 00:58:33,000
一到两秒

1858
00:58:33,000 --> 00:58:34,000
甚至有的时候不知道为什么

1859
00:58:34,000 --> 00:58:36,000
卡个五六秒也是经常常见的事情

1860
00:58:36,000 --> 00:58:37,000
然后亮了之后

1861
00:58:37,000 --> 00:58:38,000
整个 UI 也是卡住的

1862
00:58:38,000 --> 00:58:40,000
然后数密码也是没有反应

1863
00:58:40,000 --> 00:58:42,000
然后进了桌面之后

1864
00:58:42,000 --> 00:58:43,000
可能也还得再卡一段时间

1865
00:58:43,000 --> 00:58:44,000
才能恢复正常

1866
00:58:44,000 --> 00:58:46,000
我在后面我在推特上

1867
00:58:46,000 --> 00:58:47,000
也大概问了一下

1868
00:58:47,000 --> 00:58:49,000
好像有很大部分用户

1869
00:58:49,000 --> 00:58:50,000
也是有同样的问题

1870
00:58:50,000 --> 00:58:52,000
但是好像有另外一部分用户

1871
00:58:52,000 --> 00:58:53,000
好像又没有遇到这样的问题

1872
00:58:53,000 --> 00:58:54,000
我还挺奇怪

1873
00:58:54,000 --> 00:58:56,000
这个问题到底是怎么造成的

1874
00:58:57,000 --> 00:58:58,000
我好像没有遇到

1875
00:58:58,000 --> 00:59:00,000
就是在我觉悟仅有了几次

1876
00:59:01,000 --> 00:59:02,000
把他带着到处走的过程中

1877
00:59:02,000 --> 00:59:03,000
就是可能一天

1878
00:59:03,000 --> 00:59:04,000
比如说要开个会

1879
00:59:04,000 --> 00:59:07,000
然后频繁关合十来次

1880
00:59:07,000 --> 00:59:09,000
好像没有发生过这样的事情

1881
00:59:10,000 --> 00:59:11,000
但是你刚才说你的话

1882
00:59:11,000 --> 00:59:12,000
你要数密码

1883
00:59:12,000 --> 00:59:15,000
就是我知道是有些人用手表

1884
00:59:15,000 --> 00:59:15,000
解锁的话

1885
00:59:15,000 --> 00:59:17,000
就是他那个免密码解锁了

1886
00:59:17,000 --> 00:59:18,000
的时候会遇到这样的情况

1887
00:59:18,000 --> 00:59:21,000
但是我好像没有遇到过

1888
00:59:21,000 --> 00:59:24,000
因为这里面有一个机制的问题

1889
00:59:24,000 --> 00:59:24,000
是这样

1890
00:59:24,000 --> 00:59:25,000
就是说

1891
00:59:25,000 --> 00:59:26,000
首先你取决于他是

1892
00:59:27,000 --> 00:59:29,000
就是我们讲系统休眠和系统睡眠

1893
00:59:29,000 --> 00:59:30,000
它不是一个概念

1894
00:59:30,000 --> 00:59:32,000
我们好像之前某些节目里面提到过

1895
00:59:32,000 --> 00:59:34,000
所谓这个 sleep

1896
00:59:34,000 --> 00:59:37,000
就是说就是他的内存是不断电的

1897
00:59:37,000 --> 00:59:39,000
就是你整个内存还是在

1898
00:59:39,000 --> 00:59:41,000
那个不就整个系统的镜像还是在

1899
00:59:42,000 --> 00:59:42,000
内存里面

1900
00:59:42,000 --> 00:59:43,000
你只要打开

1901
00:59:43,000 --> 00:59:45,000
他可能比较快的去跟得上

1902
00:59:45,000 --> 00:59:46,000
但如果你是休眠

1903
00:59:46,000 --> 00:59:47,000
他就存在这里面

1904
00:59:47,000 --> 00:59:50,000
有一个所谓的深度休眠和这个浅度

1905
00:59:50,000 --> 00:59:51,000
休眠问题

1906
00:59:51,000 --> 00:59:52,000
就是你真的这个 hyper

1907
00:59:52,000 --> 00:59:53,000
休眠的时候

1908
00:59:53,000 --> 00:59:57,000
他的那个内存的镜像是写到磁盘的

1909
00:59:58,000 --> 00:59:58,000
这个时候

1910
00:59:59,000 --> 01:00:01,000
就是说哪怕你整个系统没电

1911
01:00:01,000 --> 01:00:03,000
或者是你电池没有用光了

1912
01:00:03,000 --> 01:00:06,000
他在唤醒的时候还是能够把那个

1913
01:00:06,000 --> 01:00:07,000
之前的状态给唤醒回来

1914
01:00:07,000 --> 01:00:10,000
但是取决于你电脑有没有插电

1915
01:00:10,000 --> 01:00:12,000
以及你电池的剩余状态

1916
01:00:13,000 --> 01:00:15,000
他内存是有可能会掉电的

1917
01:00:15,000 --> 01:00:15,000
这个时候

1918
01:00:15,000 --> 01:00:18,000
如果你再再打开唤醒的话

1919
01:00:18,000 --> 01:00:23,000
他等于要从先从 SSD 上把内存里面的

1920
01:00:23,000 --> 01:00:25,000
一个原来的那个镜像读回来

1921
01:00:25,000 --> 01:00:27,000
就是你看我现在内存都是 16 个 G

1922
01:00:27,000 --> 01:00:27,000
对吧

1923
01:00:27,000 --> 01:00:29,000
可能至少 8 G 以上吧

1924
01:00:29,000 --> 01:00:31,000
开到 16 个 G 可能是标配

1925
01:00:31,000 --> 01:00:32,000
如果你是那个叫什么来的

1926
01:00:32,000 --> 01:00:35,000
那个台式机可能是

1927
01:00:35,000 --> 01:00:36,000
但台式机不会拔电应该问题

1928
01:00:36,000 --> 01:00:38,000
没有这个不存在这个问题

1929
01:00:38,000 --> 01:00:39,000
就是说如果是笔记本的话

1930
01:00:39,000 --> 01:00:39,000
就是说

1931
01:00:40,000 --> 01:00:42,000
假设我们就以 16 个 G 的这个

1932
01:00:42,000 --> 01:00:44,000
内存镜像要都读回来的话

1933
01:00:44,000 --> 01:00:47,000
那其实你算一下他的那个就是存储

1934
01:00:47,000 --> 01:00:49,000
到那时候带宽本来就要读 16 个 G

1935
01:00:49,000 --> 01:00:50,000
就要那么长时间嘛

1936
01:00:50,000 --> 01:00:53,000
然后再上电再自检

1937
01:00:53,000 --> 01:00:55,000
再引导起来系统

1938
01:00:55,000 --> 01:00:57,000
就不是说从新开始 boot

1939
01:00:57,000 --> 01:00:58,000
就是说恢复之前那个状态

1940
01:00:58,000 --> 01:00:59,000
他肯定是需要一个时间的

1941
01:01:00,000 --> 01:01:01,000
但是其实我们讨论这个

1942
01:01:01,000 --> 01:01:04,000
我之前写了一篇文章和解释

1943
01:01:04,000 --> 01:01:05,000
就是和这个其实真的没有关系

1944
01:01:05,000 --> 01:01:05,000
OK

1945
01:01:05,000 --> 01:01:08,000
因为的话现在在最新的 MacBook 里面

1946
01:01:08,000 --> 01:01:09,000
它的机制是

1947
01:01:09,000 --> 01:01:11,000
一旦盒盖修明了之后

1948
01:01:11,000 --> 01:01:14,000
它就先把内存

1949
01:01:14,000 --> 01:01:17,000
dump 一份到固态存储上

1950
01:01:17,000 --> 01:01:19,000
保证断电之后的问题

1951
01:01:19,000 --> 01:01:22,000
然后除非电池彻底耗尽一点电都没有了

1952
01:01:22,000 --> 01:01:24,000
你都是从标准的

1953
01:01:24,000 --> 01:01:26,000
从 RAM 上直接换新的这种模式

1954
01:01:26,000 --> 01:01:27,000
而不会去走休眠的那种模式

1955
01:01:27,000 --> 01:01:28,000
就只要是电池有电

1956
01:01:28,000 --> 01:01:30,000
它的内存是不会掉电的

1957
01:01:30,000 --> 01:01:31,000
对是的

1958
01:01:31,000 --> 01:01:32,000
要不是换

1959
01:01:32,000 --> 01:01:34,000
因为现在 16 G 那么大读回来

1960
01:01:34,000 --> 01:01:36,000
你很明显你能看到一个进度条

1961
01:01:36,000 --> 01:01:37,000
在那走进度条的

1962
01:01:37,000 --> 01:01:39,000
那个速度是太慢了

1963
01:01:39,000 --> 01:01:40,000
对对

1964
01:01:40,000 --> 01:01:41,000
你说只是说

1965
01:01:41,000 --> 01:01:43,000
哪怕是内存没有掉的情况下

1966
01:01:43,000 --> 01:01:44,000
它的换新也是非常慢的

1967
01:01:44,000 --> 01:01:45,000
对吧

1968
01:01:45,000 --> 01:01:46,000
对是的

1969
01:01:46,000 --> 01:01:48,000
这个我自己做了一个猜想

1970
01:01:48,000 --> 01:01:50,000
就是不确定这个猜想是对的

1971
01:01:50,000 --> 01:01:51,000
就是在如果

1972
01:01:52,000 --> 01:01:53,000
我就有一个习惯

1973
01:01:53,000 --> 01:01:55,000
就是因为我的 MacBook 不是主力的公众机

1974
01:01:55,000 --> 01:01:57,000
所以说我可能把它放在那盖个一两天

1975
01:01:57,000 --> 01:01:58,000
我都可能不会用一次

1976
01:01:58,000 --> 01:02:00,000
然后这时候才打开

1977
01:02:00,000 --> 01:02:02,000
然后如果是在英特尔的设备上的话

1978
01:02:02,000 --> 01:02:04,000
你在休眠的一个状态下的话

1979
01:02:04,000 --> 01:02:06,000
整个 CPU 是彻底不活跃的

1980
01:02:06,000 --> 01:02:08,000
所以说你在打开那一瞬间

1981
01:02:08,000 --> 01:02:09,000
有很多的 APP

1982
01:02:09,000 --> 01:02:10,000
它的代码的话

1983
01:02:10,000 --> 01:02:11,000
它有很多的 timer

1984
01:02:11,000 --> 01:02:13,000
计时器要触发一些各种各样的事情

1985
01:02:14,000 --> 01:02:14,000
这个时候你

1986
01:02:15,000 --> 01:02:16,000
这个盖盒的越久关

1987
01:02:16,000 --> 01:02:18,000
不用的时间越长

1988
01:02:18,000 --> 01:02:19,000
这个各种的 timer 就堆得越多

1989
01:02:19,000 --> 01:02:20,000
所以说这一瞬间

1990
01:02:20,000 --> 01:02:22,000
堆机的任务在处理对吧

1991
01:02:22,000 --> 01:02:22,000
对

1992
01:02:23,000 --> 01:02:24,000
全部都出来了

1993
01:02:24,000 --> 01:02:24,000
然后就要去处理

1994
01:02:24,000 --> 01:02:27,000
然后就会导致这一个时间是非常卡的

1995
01:02:27,000 --> 01:02:29,000
然后现在我再我测试了一下

1996
01:02:29,000 --> 01:02:30,000
新的那个 M 1 的 MacBook 的话

1997
01:02:30,000 --> 01:02:33,000
它整个 CPU 的盒在后台是

1998
01:02:33,000 --> 01:02:37,000
一直会有间断的去唤醒整个系统

1999
01:02:37,000 --> 01:02:37,000
然后去工作的

2000
01:02:37,000 --> 01:02:39,000
就和你的 iPhone 一样

2001
01:02:39,000 --> 01:02:40,000
就是它不是完全的一个

2002
01:02:40,000 --> 01:02:41,000
彻底修复的一个状态

2003
01:02:42,000 --> 01:02:43,000
就是它所有的后台任务

2004
01:02:43,000 --> 01:02:44,000
都是在一直运行的

2005
01:02:45,000 --> 01:02:45,000
对

2006
01:02:45,000 --> 01:02:47,000
所以你就不会在那个

2007
01:02:47,000 --> 01:02:49,000
任一时刻会有这么大量的一个任务量

2008
01:02:49,000 --> 01:02:49,000
堆过来

2009
01:02:49,000 --> 01:02:51,000
然后非要在那一刻全部解决掉

2010
01:02:52,000 --> 01:02:53,000
你说这个我想起一个事

2011
01:02:53,000 --> 01:02:57,000
就是你在那个 M 1 的 MacBook Pro 上面

2012
01:02:57,000 --> 01:03:00,000
你去它的叫 System Preferences

2013
01:03:00,000 --> 01:03:03,000
就是系统设置里面找到那个能源

2014
01:03:03,000 --> 01:03:04,000
就是 Energy Saver

2015
01:03:04,000 --> 01:03:05,000
就是节能那个选项之后

2016
01:03:05,000 --> 01:03:07,000
它还会有那个选项叫做 Power Nap

2017
01:03:07,000 --> 01:03:08,000
那个选项给你吗

2018
01:03:08,000 --> 01:03:09,000
没有了

2019
01:03:09,000 --> 01:03:10,000
我看过

2020
01:03:10,000 --> 01:03:11,000
它那个选项已经取消了

2021
01:03:11,000 --> 01:03:13,000
可能就这个问题导致的 Power Nap

2022
01:03:13,000 --> 01:03:14,000
我现在是 10 点几

2023
01:03:15,000 --> 01:03:16,000
引进的一个新特性

2024
01:03:16,000 --> 01:03:18,000
就是说它可以让你

2025
01:03:19,000 --> 01:03:21,000
那个 Mac 在待机或者休眠状态下

2026
01:03:21,000 --> 01:03:23,000
它还是隔三岔五的

2027
01:03:23,000 --> 01:03:24,000
唤醒一下

2028
01:03:24,000 --> 01:03:25,000
然后来处理一下

2029
01:03:25,000 --> 01:03:27,000
比如说是做这个 Time Machine 的备份

2030
01:03:28,000 --> 01:03:29,000
它说是检查邮件

2031
01:03:29,000 --> 01:03:31,000
或者是 iCloud 一些推送处理

2032
01:03:31,000 --> 01:03:31,000
对吧

2033
01:03:31,000 --> 01:03:32,000
但是这个是仅限于

2034
01:03:32,000 --> 01:03:33,000
我的理解好

2035
01:03:33,000 --> 01:03:35,000
仅限于苹果的第一方的这些应用

2036
01:03:35,000 --> 01:03:36,000
它当时要求一个东西

2037
01:03:36,000 --> 01:03:39,000
就是那些应用必须得支持叫做

2038
01:03:39,000 --> 01:03:40,000
Timer

2039
01:03:40,000 --> 01:03:41,000
就是合并吧

2040
01:03:41,000 --> 01:03:43,000
因为我们知道它的那些

2041
01:03:43,000 --> 01:03:44,000
Timer 是就是各自

2042
01:03:44,000 --> 01:03:45,000
各自 App

2043
01:03:45,000 --> 01:03:47,000
各自的 Timer 的节奏

2044
01:03:47,000 --> 01:03:48,000
它可能不一定在一起

2045
01:03:48,000 --> 01:03:50,000
它当时为了支持 Power Nap

2046
01:03:50,000 --> 01:03:51,000
那些应用

2047
01:03:51,000 --> 01:03:54,000
如果你想要在 Power Nap 期间

2048
01:03:54,000 --> 01:03:55,000
就是用户合盖期间

2049
01:03:55,000 --> 01:03:57,000
还能做一些后台更新的话

2050
01:03:57,000 --> 01:03:58,000
你必须满足一些前提条件

2051
01:03:58,000 --> 01:04:00,000
其中还有一个就是说你必须能够

2052
01:04:00,000 --> 01:04:02,000
支持把你的 Timer 能够合并

2053
01:04:02,000 --> 01:04:03,000
比如说你本来是定时

2054
01:04:03,000 --> 01:04:05,000
定的是比如说三分五十秒后

2055
01:04:05,000 --> 01:04:08,000
唤醒一个事件你要去运行

2056
01:04:08,000 --> 01:04:09,000
但是因为

2057
01:04:09,000 --> 01:04:11,000
如果你要在 Power Nap

2058
01:04:11,000 --> 01:04:14,000
就是说你必须牺牲掉这个

2059
01:04:14,000 --> 01:04:14,000
准确性

2060
01:04:14,000 --> 01:04:16,000
它系统有可能说我在三分二十秒

2061
01:04:16,000 --> 01:04:17,000
的时候就把你唤醒

2062
01:04:17,000 --> 01:04:20,000
或者是在四分十秒的时候

2063
01:04:20,000 --> 01:04:20,000
才把你唤醒

2064
01:04:20,000 --> 01:04:23,000
因为我要考虑把尽可能多的

2065
01:04:23,000 --> 01:04:26,000
Timer 时间合并到一个 Nap 的周期

2066
01:04:26,000 --> 01:04:27,000
我就只用唤醒一次

2067
01:04:27,000 --> 01:04:29,000
因为每次唤醒都要比较大的能耗

2068
01:04:31,000 --> 01:04:34,000
所以在 M 1 的系列上

2069
01:04:34,000 --> 01:04:35,000
不存在这个问题

2070
01:04:35,000 --> 01:04:37,000
因为它没有 Power Nap 功能

2071
01:04:37,000 --> 01:04:38,000
因为它的后台

2072
01:04:38,000 --> 01:04:39,000
它不是有什么四个小的

2073
01:04:41,000 --> 01:04:42,000
小核心

2074
01:04:42,000 --> 01:04:43,000
就是 Efficiency Core

2075
01:04:43,000 --> 01:04:44,000
高效率的核对吧

2076
01:04:44,000 --> 01:04:46,000
所以它会一直在后台运行

2077
01:04:46,000 --> 01:04:48,000
所以不需要 Nap

2078
01:04:48,000 --> 01:04:49,000
就跟你的手机

2079
01:04:49,000 --> 01:04:51,000
跟你的 iPhone 跟 iPad 一样

2080
01:04:51,000 --> 01:04:52,000
它其实是一直在后面

2081
01:04:52,000 --> 01:04:53,000
有待机状态在运行的

2082
01:04:54,000 --> 01:04:56,000
就不存在说我需要合并 Timer

2083
01:04:56,000 --> 01:04:56,000
这个问题

2084
01:04:56,000 --> 01:04:59,000
那你只要你不过分的去使用

2085
01:04:59,000 --> 01:05:02,000
它还是会让你去完成

2086
01:05:02,000 --> 01:05:03,000
这些 Timer 的功能

2087
01:05:03,000 --> 01:05:05,000
也就不会导致你说开盖以后

2088
01:05:05,000 --> 01:05:07,000
导致可能上一个 Nap 周期

2089
01:05:07,000 --> 01:05:08,000
累积的那些 Timer 时间

2090
01:05:08,000 --> 01:05:09,000
一下都冒出来

2091
01:05:09,000 --> 01:05:10,000
我又马上要处理了

2092
01:05:10,000 --> 01:05:11,000
对吧

2093
01:05:11,000 --> 01:05:12,000
对

2094
01:05:12,000 --> 01:05:13,000
而且那个 Power Nap 选项的话

2095
01:05:13,000 --> 01:05:15,000
我记得默认设置情况下

2096
01:05:15,000 --> 01:05:18,000
在电池的那个情况下是关掉的

2097
01:05:18,000 --> 01:05:20,000
就是你得自己去电源设置里面

2098
01:05:20,000 --> 01:05:21,000
去允许它在电池的情况下

2099
01:05:21,000 --> 01:05:22,000
执行 Power Nap

2100
01:05:23,000 --> 01:05:23,000
对

2101
01:05:23,000 --> 01:05:25,000
就是如果你是一个电池设置

2102
01:05:25,000 --> 01:05:26,000
就是比如说你是一个笔记本

2103
01:05:26,000 --> 01:05:27,000
你是带电池的

2104
01:05:27,000 --> 01:05:30,000
它在那个节能选项里面会有两个 Tab

2105
01:05:30,000 --> 01:05:31,000
一个是电池模式

2106
01:05:31,000 --> 01:05:32,000
一个是就是供电

2107
01:05:32,000 --> 01:05:34,000
插电源线的模式

2108
01:05:34,000 --> 01:05:36,000
插电源线的模式里面那个 Power Nap

2109
01:05:36,000 --> 01:05:37,000
默认是开的

2110
01:05:37,000 --> 01:05:38,000
然后插那个电池模式

2111
01:05:38,000 --> 01:05:39,000
它默认是关了

2112
01:05:39,000 --> 01:05:40,000
你得手机手中打开才能完成

2113
01:05:40,000 --> 01:05:41,000
因为它还是要废电嘛

2114
01:05:41,000 --> 01:05:42,000
对吧

2115
01:05:42,000 --> 01:05:44,000
但是它现在如果是 M 1 的话

2116
01:05:44,000 --> 01:05:45,000
就完全不给这个选项了

2117
01:05:45,000 --> 01:05:46,000
我就足够

2118
01:05:46,000 --> 01:05:47,000
我就有那么自信

2119
01:05:47,000 --> 01:05:48,000
即便是这样

2120
01:05:48,000 --> 01:05:48,000
还是不会废电

2121
01:05:48,000 --> 01:05:49,000
对不对

2122
01:05:49,000 --> 01:05:50,000
没错

2123
01:05:50,000 --> 01:05:51,000
对

2124
01:05:51,000 --> 01:05:53,000
所以现在如果有 Intel 的 MacBook 的用户

2125
01:05:53,000 --> 01:05:54,000
可以尝试一下

2126
01:05:54,000 --> 01:05:55,000
把那个选项勾上之后

2127
01:05:55,000 --> 01:05:57,000
能不能缓解那个

2128
01:05:57,000 --> 01:05:59,000
就是缓醒了之后会卡顿的问题

2129
01:05:59,000 --> 01:06:01,000
就至少它通过那个

2130
01:06:01,000 --> 01:06:03,000
牺牲一些电量的方式来

2131
01:06:03,000 --> 01:06:05,000
减缓最后

2132
01:06:05,000 --> 01:06:05,000
对

2133
01:06:05,000 --> 01:06:07,000
同意打开换新

2134
01:06:07,000 --> 01:06:08,000
然后全部

2135
01:06:08,000 --> 01:06:09,000
Timer 时间都跑出来

2136
01:06:09,000 --> 01:06:11,000
要要挨个处理的问题对吧

2137
01:06:11,000 --> 01:06:11,000
对

2138
01:06:12,000 --> 01:06:13,000
但有另外一个问题就是

2139
01:06:13,000 --> 01:06:15,000
我曾经遇到过原来的 MacBook

2140
01:06:15,000 --> 01:06:17,000
就是我明明是休眠

2141
01:06:17,000 --> 01:06:18,000
就盖上盖

2142
01:06:18,000 --> 01:06:19,000
然后就带着出去旅行

2143
01:06:19,000 --> 01:06:20,000
或者怎么样了

2144
01:06:20,000 --> 01:06:21,000
然后当目的一打开

2145
01:06:21,000 --> 01:06:23,000
整个电池就 0%

2146
01:06:23,000 --> 01:06:24,000
完全耗尽的这种情况的

2147
01:06:24,000 --> 01:06:25,000
对

2148
01:06:25,000 --> 01:06:25,000
没电了

2149
01:06:25,000 --> 01:06:27,000
我有遇到过这种情况的

2150
01:06:27,000 --> 01:06:30,000
这个好像他们说过一个原因

2151
01:06:30,000 --> 01:06:30,000
就是我不知道

2152
01:06:30,000 --> 01:06:31,000
是不是这个情况

2153
01:06:31,000 --> 01:06:34,000
就是因为你在背包里面的那个

2154
01:06:35,000 --> 01:06:36,000
盒盖的话

2155
01:06:36,000 --> 01:06:37,000
它是竖直的

2156
01:06:37,000 --> 01:06:39,000
如果说你没有夹紧的话

2157
01:06:39,000 --> 01:06:41,000
比如说你书包比较空

2158
01:06:41,000 --> 01:06:42,000
然后你抖一抖

2159
01:06:42,000 --> 01:06:43,000
它是有可能在那个过程

2160
01:06:43,000 --> 01:06:44,000
就把那个盖打开了

2161
01:06:44,000 --> 01:06:46,000
就不断打开不断关上

2162
01:06:46,000 --> 01:06:47,000
盖子变成打开状态

2163
01:06:47,000 --> 01:06:49,000
对就它又变成又在运行

2164
01:06:49,000 --> 01:06:50,000
我这里不太可能

2165
01:06:50,000 --> 01:06:51,000
因为我背的是一个

2166
01:06:51,000 --> 01:06:54,000
就是那种带专门夹层的包

2167
01:06:54,000 --> 01:06:56,000
它会把整个 MacBook

2168
01:06:56,000 --> 01:06:58,000
就整非常紧的包过去

2169
01:06:58,000 --> 01:06:59,000
但我还是遇到过这种问题

2170
01:06:59,000 --> 01:07:03,000
就是下班的时候把电脑放进去

2171
01:07:03,000 --> 01:07:03,000
然后去健身

2172
01:07:03,000 --> 01:07:05,000
然后回到家里面再打开

2173
01:07:06,000 --> 01:07:07,000
电脑已经没电了

2174
01:07:07,000 --> 01:07:09,000
这样可能是后台有什么程序

2175
01:07:09,000 --> 01:07:11,000
阻止了强行阻止了休眠

2176
01:07:11,000 --> 01:07:12,000
这样的一个事情

2177
01:07:12,000 --> 01:07:13,000
然后它实际是运行的

2178
01:07:13,000 --> 01:07:14,000
有可能对

2179
01:07:14,000 --> 01:07:15,000
或者是出现了一个 bug

2180
01:07:15,000 --> 01:07:17,000
根本就没有进到休眠状态

2181
01:07:17,000 --> 01:07:19,000
然后一直都是在那个尝试进入休眠

2182
01:07:19,000 --> 01:07:22,000
然后不断的去这个耗能的一个状态

2183
01:07:22,000 --> 01:07:23,000
也有可能对吧

2184
01:07:24,000 --> 01:07:26,000
但是我们目前都知道

2185
01:07:26,000 --> 01:07:27,000
这个锅可以甩给英特尔了

2186
01:07:28,000 --> 01:07:30,000
是的这个也一说算了吧

2187
01:07:30,000 --> 01:07:32,000
因为 F 1 没有这个问题

2188
01:07:32,000 --> 01:07:33,000
对没这个问题了

2189
01:07:33,000 --> 01:07:34,000
我什么时候都来跑

2190
01:07:34,000 --> 01:07:36,000
我只是变得跑得慢了一点而已

2191
01:07:36,000 --> 01:07:37,000
对

2192
01:07:37,000 --> 01:07:38,000
不过你刚才说到这个

2193
01:07:38,000 --> 01:07:39,000
这个 timer 的问题

2194
01:07:39,000 --> 01:07:40,000
如果我在想

2195
01:07:40,000 --> 01:07:41,000
假设苹果

2196
01:07:41,000 --> 01:07:43,000
假设如果确实问题是如你所说

2197
01:07:43,000 --> 01:07:45,000
那么一个的导致的

2198
01:07:45,000 --> 01:07:47,000
它开机的时候会比较

2199
01:07:47,000 --> 01:07:49,000
就英特尔的 MacBook 开机会比较

2200
01:07:49,000 --> 01:07:51,000
就是接开盖会比较慢的话

2201
01:07:51,000 --> 01:07:53,000
它其实可以等一下

2202
01:07:53,000 --> 01:07:55,000
再启动那些 timer 事件的处理

2203
01:07:55,000 --> 01:07:56,000
也还是可以解决这个问题吧

2204
01:07:57,000 --> 01:07:59,000
好像从架构上来说会比较难

2205
01:07:59,000 --> 01:08:01,000
因为那已经是那个

2206
01:08:01,000 --> 01:08:03,000
那个程序自己的一个代码的

2207
01:08:03,000 --> 01:08:03,000
一部分的逻辑了

2208
01:08:03,000 --> 01:08:06,000
你这个时候你要是强行的把那

2209
01:08:06,000 --> 01:08:08,000
那部分程序全部给 sleep 做

2210
01:08:08,000 --> 01:08:10,000
然后就只只把 kernel 唤醒

2211
01:08:10,000 --> 01:08:13,000
只把那个 UI 的精神和这种事情唤醒的话

2212
01:08:13,000 --> 01:08:14,000
好像想起来

2213
01:08:14,000 --> 01:08:16,000
想想还是一个很复杂的事情

2214
01:08:17,000 --> 01:08:17,000
就会导致比如说

2215
01:08:17,000 --> 01:08:19,000
你打开之后那个程序没有响应

2216
01:08:19,000 --> 01:08:22,000
虽然说它不不不影响你其他系统的性能

2217
01:08:22,000 --> 01:08:24,000
但是那个程序本身没响应

2218
01:08:24,000 --> 01:08:26,000
会导致你说你这个东西是不是挂掉了

2219
01:08:26,000 --> 01:08:26,000
对

2220
01:08:26,000 --> 01:08:28,000
而且系统很有可能系统的某些东西

2221
01:08:28,000 --> 01:08:31,000
要非得依靠某个程序的某个结果

2222
01:08:31,000 --> 01:08:31,000
怎么样的东西

2223
01:08:31,000 --> 01:08:32,000
你把它 sleep 住了

2224
01:08:32,000 --> 01:08:33,000
那系统也卡住了

2225
01:08:33,000 --> 01:08:35,000
然后大家就互相锁死

2226
01:08:35,000 --> 01:08:35,000
对

2227
01:08:36,000 --> 01:08:39,000
我们把这个 serge 给 sleep 住

2228
01:08:39,000 --> 01:08:40,000
然后打开

2229
01:08:40,000 --> 01:08:40,000
没网了

2230
01:08:42,000 --> 01:08:43,000
就完蛋了

2231
01:08:44,000 --> 01:08:45,000
对对对

2232
01:08:45,000 --> 01:08:47,000
然后那边要检查 ocsp 的信息

2233
01:08:47,000 --> 01:08:49,000
然后就互相就死云关的卡住了

2234
01:08:50,000 --> 01:08:51,000
所以看起来也不太可信

2235
01:08:51,000 --> 01:08:53,000
就这个集合大能问题很难解决啊

2236
01:08:54,000 --> 01:08:54,000
对

2237
01:08:54,000 --> 01:08:55,000
说到这个开机

2238
01:08:55,000 --> 01:08:59,000
你用那个手表解锁了 m 1 的 MacBook Pro 吗

2239
01:09:00,000 --> 01:09:00,000
我没有

2240
01:09:00,000 --> 01:09:02,000
因为我的手表的话

2241
01:09:02,000 --> 01:09:03,000
只是健身的时候在

2242
01:09:03,000 --> 01:09:05,000
所以一日常的话我都没有戴手表

2243
01:09:05,000 --> 01:09:06,000
平时你不戴是吧

2244
01:09:06,000 --> 01:09:06,000
对

2245
01:09:06,000 --> 01:09:08,000
而且 m 1 的话有指纹

2246
01:09:08,000 --> 01:09:09,000
所以说我也不戴

2247
01:09:09,000 --> 01:09:10,000
可能亚臣和我一样

2248
01:09:10,000 --> 01:09:12,000
我基本上很少戴 apple watch

2249
01:09:12,000 --> 01:09:13,000
现在不去健身了

2250
01:09:13,000 --> 01:09:15,000
连这个机会都没有了

2251
01:09:15,000 --> 01:09:16,000
就放在那吃灰

2252
01:09:16,000 --> 01:09:16,000
ok

2253
01:09:16,000 --> 01:09:18,000
因为我平时还是戴的

2254
01:09:18,000 --> 01:09:21,000
但是因为戴一段时间就会他背后那个圈

2255
01:09:21,000 --> 01:09:22,000
会压在手上压上一个印子

2256
01:09:22,000 --> 01:09:25,000
那部分皮肤会非常的这个

2257
01:09:25,000 --> 01:09:25,000
痒

2258
01:09:25,000 --> 01:09:26,000
就是难受嘛

2259
01:09:26,000 --> 01:09:26,000
痒

2260
01:09:26,000 --> 01:09:28,000
然后就又摘掉了

2261
01:09:28,000 --> 01:09:29,000
就是也是去出门

2262
01:09:29,000 --> 01:09:32,000
就是我需要走步的时候才戴上它

2263
01:09:33,000 --> 01:09:34,000
就这个问题还是比较难解决

2264
01:09:34,000 --> 01:09:36,000
那其实也是去健身房

2265
01:09:36,000 --> 01:09:36,000
对

2266
01:09:36,000 --> 01:09:37,000
之前遇到的问题就是说

2267
01:09:37,000 --> 01:09:39,000
那个我老是经常

2268
01:09:39,000 --> 01:09:41,000
经常性的解锁不了这个 apple watch

2269
01:09:41,000 --> 01:09:43,000
就是他你看到他在尝试解锁

2270
01:09:43,000 --> 01:09:44,000
对吧

2271
01:09:44,000 --> 01:09:45,000
那我是 Mac mini

2272
01:09:45,000 --> 01:09:47,000
然后他过了几秒

2273
01:09:47,000 --> 01:09:48,000
我说

2274
01:09:49,000 --> 01:09:51,000
这几秒时间我已经足够我输入密码

2275
01:09:51,000 --> 01:09:52,000
完成登录的过程了

2276
01:09:52,000 --> 01:09:52,000
对吧

2277
01:09:52,000 --> 01:09:53,000
但是他还没有结束

2278
01:09:53,000 --> 01:09:55,000
最后他还告诉我失败了

2279
01:09:55,000 --> 01:09:56,000
我还是得出一遍密码

2280
01:09:56,000 --> 01:09:58,000
就这个可靠性非常低

2281
01:09:58,000 --> 01:10:00,000
对这个对于苹果来说

2282
01:10:00,000 --> 01:10:01,000
简直太常见的一件事情了是吧

2283
01:10:01,000 --> 01:10:02,000
各种的这种

2284
01:10:02,000 --> 01:10:04,000
只要涉及到两个设备

2285
01:10:04,000 --> 01:10:05,000
不在一个一起的这种

2286
01:10:05,000 --> 01:10:08,000
感觉这个 bug 的发生率有 50%的

2287
01:10:08,000 --> 01:10:08,000
这么高

2288
01:10:09,000 --> 01:10:11,000
我是 10 次有 7 次可能都解不开

2289
01:10:11,000 --> 01:10:13,000
可能碰运气能解解锁开

2290
01:10:13,000 --> 01:10:14,000
可能两三次这种

2291
01:10:15,000 --> 01:10:17,000
你的是第几代的那个我去

2292
01:10:17,000 --> 01:10:18,000
就 5 代啊

2293
01:10:18,000 --> 01:10:19,000
不是最新这个

2294
01:10:19,000 --> 01:10:21,000
但是也是比较新的嘛

2295
01:10:21,000 --> 01:10:21,000
对

2296
01:10:21,000 --> 01:10:23,000
那是去年那那个应该是没问题的

2297
01:10:23,000 --> 01:10:25,000
因为原来一二代的时候

2298
01:10:25,000 --> 01:10:27,000
确实是好像实现方式

2299
01:10:27,000 --> 01:10:27,000
整个都是不一样的

2300
01:10:27,000 --> 01:10:29,000
那个成功率就是非常低

2301
01:10:29,000 --> 01:10:30,000
我就是一代的

2302
01:10:30,000 --> 01:10:32,000
可能就是太老了

2303
01:10:32,000 --> 01:10:33,000
无他就是太老了

2304
01:10:33,000 --> 01:10:35,000
对我当时是开发 air pass 的时候

2305
01:10:35,000 --> 01:10:37,000
我专门开始失败了握曲

2306
01:10:37,000 --> 01:10:38,000
然后用让握曲可以解锁

2307
01:10:38,000 --> 01:10:40,000
然后就发现我那个原来的最早的

2308
01:10:40,000 --> 01:10:42,000
那一代应该是零代了 s 0

2309
01:10:42,000 --> 01:10:44,000
那个成对那个那个真的不行

2310
01:10:44,000 --> 01:10:47,000
那个成功率就低到可能 5%不到的

2311
01:10:47,000 --> 01:10:49,000
这么一个这么低的一个成功率

2312
01:10:49,000 --> 01:10:50,000
直接直接放弃了

2313
01:10:50,000 --> 01:10:52,000
那代那代机器真的非常非常慢

2314
01:10:52,000 --> 01:10:54,000
就是那个滴滴是很好机嘛

2315
01:10:54,000 --> 01:10:56,000
然后那个处理器也不行

2316
01:10:56,000 --> 01:10:57,000
续航也不行

2317
01:10:57,000 --> 01:10:59,000
然后哎挺坑的

2318
01:11:00,000 --> 01:11:01,000
是的然后换到 5 代了之后

2319
01:11:01,000 --> 01:11:03,000
就发现成功率在测试的时候

2320
01:11:03,000 --> 01:11:06,000
是达到了 99%左右

2321
01:11:06,000 --> 01:11:07,000
但是在日常的使用中

2322
01:11:07,000 --> 01:11:09,000
确实很多时候也会出现

2323
01:11:09,000 --> 01:11:11,000
就不知道怎么他就不工作了

2324
01:11:11,000 --> 01:11:15,000
可能依赖于蓝牙的那个 2.4 G 环境

2325
01:11:15,000 --> 01:11:16,000
可能还是有些讲究

2326
01:11:16,000 --> 01:11:17,000
因为现在 2.4 G 环境确实

2327
01:11:17,000 --> 01:11:19,000
这就是特别是在城市里面是比较糟糕的

2328
01:11:19,000 --> 01:11:22,000
然后说不管你再怎么努力

2329
01:11:22,000 --> 01:11:25,000
你解决不了这个无线这个射频的问题的话

2330
01:11:25,000 --> 01:11:27,000
他可能还是没有办法实现

2331
01:11:27,000 --> 01:11:29,000
就是说稳定可靠的解锁

2332
01:11:29,000 --> 01:11:31,000
对但这个锅好像也有一个

2333
01:11:31,000 --> 01:11:33,000
可以甩给英特尔的可能

2334
01:11:33,000 --> 01:11:37,000
就是我之前做过一些蓝牙的一些开发

2335
01:11:37,000 --> 01:11:39,000
然后你会发现就是其实整个

2336
01:11:39,000 --> 01:11:42,000
BuckOS 和 iOS 的那个蓝牙协议站

2337
01:11:42,000 --> 01:11:44,000
还是经常会出现问题整个协议站崩掉的

2338
01:11:45,000 --> 01:11:47,000
所以是不是也是 Mac 上面的和

2339
01:11:47,000 --> 01:11:50,000
原来在老架构上面和蓝牙的通讯

2340
01:11:50,000 --> 01:11:51,000
不是那么顺畅

2341
01:11:51,000 --> 01:11:53,000
然后他出问题了

2342
01:11:53,000 --> 01:11:56,000
然后在 M 1 的芯片上面也把这个问题修好了

2343
01:11:56,000 --> 01:11:58,000
也是有可能的一种理论

2344
01:11:58,000 --> 01:11:59,000
也有可能

2345
01:11:59,000 --> 01:12:00,000
就是以前他是用那个

2346
01:12:00,000 --> 01:12:02,000
他的之前蓝牙和 WiFi 应该都是

2347
01:12:02,000 --> 01:12:04,000
博通的方案嘛就是在 Mac 上面

2348
01:12:04,000 --> 01:12:04,000
对是的

2349
01:12:04,000 --> 01:12:06,000
那这次他改用自己的方案

2350
01:12:06,000 --> 01:12:08,000
说不定也有可能

2351
01:12:09,000 --> 01:12:10,000
你可以关注一下

2352
01:12:10,000 --> 01:12:12,000
就是你之后试着解锁几次看一下

2353
01:12:12,000 --> 01:12:14,000
行好没问题

2354
01:12:14,000 --> 01:12:16,000
但我觉得最终要解决这个问题

2355
01:12:16,000 --> 01:12:17,000
可能还是得靠

2356
01:12:17,000 --> 01:12:19,000
不管是从安全性还是可靠性上

2357
01:12:19,000 --> 01:12:21,000
还是得看那个就是

2358
01:12:21,000 --> 01:12:23,000
诶是从 iPhone 11 吧

2359
01:12:23,000 --> 01:12:26,000
开始搭载了那个 U 1 的那个 Ultra

2360
01:12:27,000 --> 01:12:28,000
Wideband 的那个东西

2361
01:12:28,000 --> 01:12:29,000
看能不能解决

2362
01:12:29,000 --> 01:12:30,000
因为那个一个是可以解决

2363
01:12:30,000 --> 01:12:31,000
这个通讯可靠性

2364
01:12:31,000 --> 01:12:32,000
因为他是那个超宽态

2365
01:12:32,000 --> 01:12:35,000
他是可以同时在多个频段上发几个消息

2366
01:12:35,000 --> 01:12:39,000
就不用在等蓝牙的一个跳屏 2.4 G 那么弄

2367
01:12:39,000 --> 01:12:40,000
而且他有那个距离嘛

2368
01:12:40,000 --> 01:12:43,000
就是说他可以更加安全可靠的判断

2369
01:12:43,000 --> 01:12:46,000
诶是不是你这个表刚好在这个 MacBook 的旁边

2370
01:12:46,000 --> 01:12:50,000
我就可以有更大的这个信任空间

2371
01:12:50,000 --> 01:12:53,000
说那肯定是你本人在解锁这个东西

2372
01:12:53,000 --> 01:12:54,000
而不是说通过这种

2373
01:12:54,000 --> 01:12:57,000
叫做什么 RELAY 攻击的方式来来做的嘛

2374
01:12:57,000 --> 01:12:58,000
对没错

2375
01:12:58,000 --> 01:13:00,000
但是这个好像还是一个遥远的现实

2376
01:13:00,000 --> 01:13:03,000
这个只在 iPhone 上目前装载了

2377
01:13:03,000 --> 01:13:05,000
Watch 和 Mac 上都还没有

2378
01:13:05,000 --> 01:13:07,000
Watch 上面看主要是空间的限制吧

2379
01:13:07,000 --> 01:13:10,000
怎么能够实现说把那个再威缩一下

2380
01:13:10,000 --> 01:13:12,000
或者直接整表上呢

2381
01:13:12,000 --> 01:13:13,000
他还不是 SOP

2382
01:13:13,000 --> 01:13:16,000
他是叫做 SOP System Unpackaged

2383
01:13:16,000 --> 01:13:20,000
就是他整个那个系统都封装在一个

2384
01:13:20,000 --> 01:13:21,000
package 里面去了

2385
01:13:21,000 --> 01:13:24,000
然后就是他整合都是比那个 M 1 还要高的

2386
01:13:24,000 --> 01:13:26,000
所以说到时候如果他把 U 1 整合进去

2387
01:13:26,000 --> 01:13:28,000
我觉得应该也是有可能性的

2388
01:13:28,000 --> 01:13:31,000
但只是说功耗啊这些天线怎么弄我不太清楚

2389
01:13:31,000 --> 01:13:34,000
但是我希望是能够实现的

2390
01:13:34,000 --> 01:13:37,000
然后 U 1 应该上 Mac 上都还没有对吧

2391
01:13:37,000 --> 01:13:39,000
哪怕是这个 M 1 的 Mac 上面是没有的

2392
01:13:39,000 --> 01:13:40,000
对都没有

2393
01:13:40,000 --> 01:13:42,000
说不定这个 M 2 可能就有了

2394
01:13:42,000 --> 01:13:44,000
应该是按时间的话

2395
01:13:44,000 --> 01:13:45,000
应该是到了一个该模具

2396
01:13:45,000 --> 01:13:47,000
该进行大升级的那么一个时间了

2397
01:13:47,000 --> 01:13:50,000
对啊对啊而且他这个他要整合在芯片里面

2398
01:13:50,000 --> 01:13:52,000
他也比较好做嘛

2399
01:13:52,000 --> 01:13:53,000
都是在自己的这个

2400
01:13:53,000 --> 01:13:55,000
不管是安全性上还是说这个

2401
01:13:55,000 --> 01:13:58,000
这个空间上面想都比较好弄对吧

2402
01:13:58,000 --> 01:14:00,000
我觉得而且这个场景很合适啊对吧

2403
01:14:00,000 --> 01:14:01,000
用这个表或者手机

2404
01:14:02,000 --> 01:14:04,000
靠近一个你的 Mac 就就解锁了

2405
01:14:04,000 --> 01:14:05,000
那其实还是很方便的嘛

2406
01:14:05,000 --> 01:14:07,000
就是不用做什么操作

2407
01:14:07,000 --> 01:14:08,000
对我今天才从你这学习了

2408
01:14:08,000 --> 01:14:11,000
原来 U 1 是可以拿来传输数据的

2409
01:14:11,000 --> 01:14:12,000
我原来的理解的话

2410
01:14:12,000 --> 01:14:14,000
以为他只能去标定一个方向

2411
01:14:14,000 --> 01:14:16,000
标定方向是他的那个物理特性导致的嘛

2412
01:14:16,000 --> 01:14:17,000
传输数据他只要能够传输信号

2413
01:14:17,000 --> 01:14:18,000
他都是可以传输数据的

2414
01:14:18,000 --> 01:14:20,000
而且我理解他那个带宽还比较高

2415
01:14:20,000 --> 01:14:22,000
因为他可用的那个

2416
01:14:22,000 --> 01:14:23,000
就那个无线的频段会比较宽嘛

2417
01:14:23,000 --> 01:14:24,000
所以我觉得

2418
01:14:25,000 --> 01:14:27,000
U 1 如果内置到 iPad

2419
01:14:27,000 --> 01:14:28,000
甚至是这个

2420
01:14:29,000 --> 01:14:30,000
这个 Mac 里面他甚至

2421
01:14:30,000 --> 01:14:32,000
你知道我们现在用那个叫什么

2422
01:14:32,000 --> 01:14:34,000
Sidecar 对吧就是通过

2423
01:14:34,000 --> 01:14:35,000
是通过 Wi-Fi 来实现的嘛

2424
01:14:35,000 --> 01:14:37,000
他是通过 5 G 的一个 Wi-Fi 来实现的对吧

2425
01:14:37,000 --> 01:14:38,000
对应该是 Wi-Fi

2426
01:14:39,000 --> 01:14:40,000
对如果他用 U 1 的话

2427
01:14:40,000 --> 01:14:42,000
还可以把那个 Wi-Fi 的带宽解放出来

2428
01:14:42,000 --> 01:14:44,000
其实还是更好的一个方案呢

2429
01:14:44,000 --> 01:14:45,000
对是的是

2430
01:14:45,000 --> 01:14:46,000
一开始我们希望的未来

2431
01:14:47,000 --> 01:14:48,000
对对对

2432
01:14:48,000 --> 01:14:49,000
anyway 这个就是

2433
01:14:49,000 --> 01:14:50,000
M 就是未来的这个

2434
01:14:51,000 --> 01:14:52,000
苹果的这个 Mac

2435
01:14:52,000 --> 01:14:53,000
几代设备还是非常值得期待的

2436
01:14:53,000 --> 01:14:56,000
那大家可以去买一点这个苹果目标啊

2437
01:14:56,000 --> 01:14:56,000
反正

2438
01:14:57,000 --> 01:14:59,000
我是买的你们说你也买的

2439
01:14:59,000 --> 01:15:00,000
我先先卖为净

2440
01:15:00,000 --> 01:15:01,000
先卖为净

2441
01:15:02,000 --> 01:15:02,000
对

2442
01:15:03,000 --> 01:15:05,000
ok 今天我们前半部分叫

2443
01:15:05,000 --> 01:15:06,000
我们叫什么玉翼先扬对吧

2444
01:15:06,000 --> 01:15:09,000
先表扬了一顿这个苹果的这个

2445
01:15:09,000 --> 01:15:09,000
这个

2446
01:15:10,000 --> 01:15:11,000
这个意见

2447
01:15:11,000 --> 01:15:12,000
现在我们开始吐槽模式

2448
01:15:12,000 --> 01:15:13,000
很着在后面

2449
01:15:13,000 --> 01:15:15,000
就是在聊的第二个话题

2450
01:15:15,000 --> 01:15:16,000
其实是跟

2451
01:15:16,000 --> 01:15:18,000
其实是相对来说一个比较糟糕的一个

2452
01:15:18,000 --> 01:15:20,000
一个或者是比更加难解决的一个事情吧

2453
01:15:22,000 --> 01:15:23,000
这个叫什么

2454
01:15:23,000 --> 01:15:24,000
我不知道这个中文名叫什么

2455
01:15:24,000 --> 01:15:25,000
我就是就是这个

2456
01:15:26,000 --> 01:15:27,000
这个缩写叫做 OCSP

2457
01:15:28,000 --> 01:15:29,000
它的全名叫做

2458
01:15:30,000 --> 01:15:32,000
Online Certificate Status Protocol

2459
01:15:32,000 --> 01:15:33,000
叫什么

2460
01:15:33,000 --> 01:15:35,000
在线证书状态协议

2461
01:15:35,000 --> 01:15:37,000
大概这么翻译一下吧

2462
01:15:37,000 --> 01:15:39,000
要不要请你给我们先解释一下

2463
01:15:39,000 --> 01:15:40,000
因为这个你这个是一个开发者

2464
01:15:40,000 --> 01:15:41,000
专门用的东西

2465
01:15:41,000 --> 01:15:43,000
你给我们解释这个东西是干嘛用的

2466
01:15:43,000 --> 01:15:45,000
为什么它会这次变成一个很大的问题

2467
01:15:46,000 --> 01:15:49,000
行然后其实这个 OCSP 这个东西的话

2468
01:15:49,000 --> 01:15:51,000
本身的话和应用的话

2469
01:15:51,000 --> 01:15:52,000
它只是正好被套用在这了

2470
01:15:52,000 --> 01:15:56,000
它本身不是为了解决应用安全性的一个问题

2471
01:15:56,000 --> 01:15:58,000
它是解决它解决问题是什么呢

2472
01:15:58,000 --> 01:16:01,000
是就是在原来的传统的证书体系下

2473
01:16:01,000 --> 01:16:04,000
证书可能更常见的场景是 HTPS 网站

2474
01:16:04,000 --> 01:16:05,000
我们当我们访赞一个网站的时候

2475
01:16:05,000 --> 01:16:07,000
网站要通过各种的加密手段

2476
01:16:07,000 --> 01:16:10,000
给我们出示一个合理和有效的证书

2477
01:16:10,000 --> 01:16:11,000
我们留言期才知道

2478
01:16:11,000 --> 01:16:13,000
我们连接到了一个这个网站是真实的

2479
01:16:13,000 --> 01:16:15,000
不是别人造假的

2480
01:16:15,000 --> 01:16:16,000
然后这么一个情况

2481
01:16:16,000 --> 01:16:19,000
但是这个情况就会出现我的那个运营商也好

2482
01:16:19,000 --> 01:16:22,000
或者其他 whatever 什么样的情况都行

2483
01:16:22,000 --> 01:16:24,000
导致我把证书表已经泄露出去了

2484
01:16:24,000 --> 01:16:26,000
那我需要有一个措施能够补救

2485
01:16:26,000 --> 01:16:28,000
然后能够把我泄露出去

2486
01:16:28,000 --> 01:16:30,000
这个证书给它注销掉

2487
01:16:30,000 --> 01:16:33,000
所以说就有各种各样的方式去进行

2488
01:16:33,000 --> 01:16:34,000
叫做证书吊销

2489
01:16:35,000 --> 01:16:38,000
就这个 OCSP 就是用来吊销证书用的对吧

2490
01:16:38,000 --> 01:16:38,000
对是的

2491
01:16:38,000 --> 01:16:40,000
OCSP 就是来吊销证书的一种方式

2492
01:16:40,000 --> 01:16:44,000
最早的时候应该是用的叫 CRL 的一种方式去吊销

2493
01:16:44,000 --> 01:16:46,000
CRL 就是定期的系统去

2494
01:16:46,000 --> 01:16:48,000
或者是留言区去查一个地方

2495
01:16:48,000 --> 01:16:50,000
然后给你返回一大个列表

2496
01:16:50,000 --> 01:16:52,000
哪个证书是被吊销了的

2497
01:16:52,000 --> 01:16:54,000
你记得你不要再相信它了

2498
01:16:54,000 --> 01:16:57,000
但这个东西就是越堆越大越堆越大越堆越大

2499
01:16:57,000 --> 01:16:59,000
现在大家这么多网站这么东西

2500
01:16:59,000 --> 01:17:01,000
它指针不减嘛因为

2501
01:17:01,000 --> 01:17:01,000
对是的

2502
01:17:01,000 --> 01:17:04,000
然后就搞的这个事情就会感觉看起来很不优雅

2503
01:17:05,000 --> 01:17:07,000
然后 OCSP 的话其实也挺简单的

2504
01:17:07,000 --> 01:17:08,000
就是每次访问的时候

2505
01:17:08,000 --> 01:17:12,000
我再去找一个测定的我相信的服务区去问一下

2506
01:17:12,000 --> 01:17:14,000
然后说这个证书

2507
01:17:14,000 --> 01:17:15,000
还有没有被吊销掉

2508
01:17:15,000 --> 01:17:16,000
对他也没被吊销掉

2509
01:17:16,000 --> 01:17:18,000
然后夫妻说 ok 没问题

2510
01:17:18,000 --> 01:17:20,000
然后我就我本地就放心就可以了

2511
01:17:20,000 --> 01:17:22,000
然后可能会再加上一些缓存机制

2512
01:17:22,000 --> 01:17:25,000
就是比如说只有几天才会访问一下

2513
01:17:26,000 --> 01:17:28,000
这个可能有点我们做个

2514
01:17:28,000 --> 01:17:29,000
就刚刚那个很技术的一个描述

2515
01:17:29,000 --> 01:17:31,000
但我们做一个比较形象的一个比喻

2516
01:17:31,000 --> 01:17:34,000
就好像我们现在说是你去拿一个美国签证

2517
01:17:34,000 --> 01:17:36,000
他虽然发给你的一个签证

2518
01:17:36,000 --> 01:17:38,000
你拿到了那个所谓的 visa 那张纸

2519
01:17:38,000 --> 01:17:39,000
贴到你的铺头上了对吧

2520
01:17:40,000 --> 01:17:42,000
但是你实际上要去美国之前

2521
01:17:42,000 --> 01:17:45,000
还是得在一个美国官方指定的一个网站上

2522
01:17:45,000 --> 01:17:47,000
去注册一下说哎我要来美国了

2523
01:17:48,000 --> 01:17:49,000
虽然你之前给我发过这个签证

2524
01:17:49,000 --> 01:17:52,000
但是你现在我再确认一下我能不能来

2525
01:17:52,000 --> 01:17:52,000
这次对吧

2526
01:17:52,000 --> 01:17:55,000
差不多这个 OCSP 就是说这个确认这个过程

2527
01:17:55,000 --> 01:17:56,000
可以这样解释

2528
01:17:56,000 --> 01:18:00,000
我觉得 OCSP 更像那种就是比如说你买了一瓶酒

2529
01:18:00,000 --> 01:18:02,000
然后酒上有一个什么防伪标签

2530
01:18:02,000 --> 01:18:05,000
然后说你打电话到某某地方查这个标签

2531
01:18:05,000 --> 01:18:06,000
是不是真的

2532
01:18:06,000 --> 01:18:07,000
类似于这样一个

2533
01:18:07,000 --> 01:18:09,000
哎对这个解释好像非常的合适

2534
01:18:09,000 --> 01:18:11,000
几乎是一模一样的一个机制

2535
01:18:11,000 --> 01:18:14,000
因为就是 OCSP 的他那个验证的那个网址

2536
01:18:14,000 --> 01:18:15,000
实际上是在证书内部

2537
01:18:15,000 --> 01:18:17,000
就是他翻译证书的时候就告诉你

2538
01:18:17,000 --> 01:18:18,000
你要是想查这个证书的真位

2539
01:18:18,000 --> 01:18:20,000
你要去哪哪查

2540
01:18:20,000 --> 01:18:20,000
对

2541
01:18:21,000 --> 01:18:25,000
所以他这次我们就苹果这次遇到的一个问题

2542
01:18:25,000 --> 01:18:29,000
是说因为这个新发的这个 mac os

2543
01:18:29,000 --> 01:18:32,000
bixxer 这个 1111 的这个新系统

2544
01:18:32,000 --> 01:18:37,000
大规模的人去通过 OCSP 的方式去查

2545
01:18:37,000 --> 01:18:38,000
这个应用证书

2546
01:18:38,000 --> 01:18:40,000
因为你你从你换了新系统吧

2547
01:18:40,000 --> 01:18:42,000
然后你都要去去你开每个程序的时候

2548
01:18:42,000 --> 01:18:44,000
都要先检查一遍这个东西

2549
01:18:44,000 --> 01:18:48,000
导致苹果的这个 OCSP 服务器被等于是等于是

2550
01:18:48,000 --> 01:18:49,000
他自己被自己递多死了吗

2551
01:18:49,000 --> 01:18:50,000
拒绝服务攻击了

2552
01:18:51,000 --> 01:18:52,000
导致他缓慢

2553
01:18:52,000 --> 01:18:55,000
然后导致所有人所有的这个 mac 程序都启动不了

2554
01:18:55,000 --> 01:18:57,000
就是都在等这个查询的结果

2555
01:18:57,000 --> 01:19:00,000
那就这里面可能有个挑跃的地方就在于

2556
01:19:00,000 --> 01:19:02,000
每为什么每次启动 mac 程序之前

2557
01:19:02,000 --> 01:19:04,000
需要去检查一下这个证书

2558
01:19:04,000 --> 01:19:06,000
就苹果做这个东西的目的是什么

2559
01:19:06,000 --> 01:19:10,000
这个的话最早的时候其实是就是一种安全的机制

2560
01:19:10,000 --> 01:19:13,000
就是这个类似的机制的话就是

2561
01:19:13,000 --> 01:19:15,000
在可能公众理一般理解起来

2562
01:19:15,000 --> 01:19:17,000
更简单的一个说法叫数字签名

2563
01:19:17,000 --> 01:19:18,000
在 windows 上也有

2564
01:19:18,000 --> 01:19:21,000
呃可能背后逻辑是这样的

2565
01:19:21,000 --> 01:19:22,000
就是因为有了一软件嘛

2566
01:19:23,000 --> 01:19:25,000
那么我就要求你们每个人分发软件的时候

2567
01:19:25,000 --> 01:19:27,000
必须都给这个软件加上一个签名

2568
01:19:27,000 --> 01:19:29,000
就是这个所谓的证书对吧

2569
01:19:29,000 --> 01:19:31,000
就你签完名得到一个证书

2570
01:19:31,000 --> 01:19:34,000
对我才能认为这个软件是一个相对安全的软件

2571
01:19:34,000 --> 01:19:36,000
我才允许你打开

2572
01:19:36,000 --> 01:19:39,000
然后背后对新的逻辑就是这个证书的获取

2573
01:19:39,000 --> 01:19:41,000
是有一定的门槛和难度的

2574
01:19:41,000 --> 01:19:43,000
对于 mac 来说的话就是你的证书

2575
01:19:43,000 --> 01:19:46,000
是就是你的苹果开发者账号证书

2576
01:19:46,000 --> 01:19:48,000
首先你要付钱才能买到要 99 刀

2577
01:19:48,000 --> 01:19:51,000
呃你对于 99 刀这么一个成本上来说的话

2578
01:19:51,000 --> 01:19:53,000
假如说你要非常大的广泛的去撒网

2579
01:19:53,000 --> 01:19:56,000
然后你想每一个分发都用不同的证书

2580
01:19:56,000 --> 01:19:58,000
几乎是不可能接受的一个身份

2581
01:19:58,000 --> 01:20:01,000
另外就是你在你在注册账号的时候

2582
01:20:01,000 --> 01:20:02,000
是需要提问信息的

2583
01:20:02,000 --> 01:20:05,000
支付的时候也是需要暴露你的支付的信息的

2584
01:20:05,000 --> 01:20:08,000
假如说真的是之后需要跟你秋后算账

2585
01:20:08,000 --> 01:20:09,000
你是个恶意软件

2586
01:20:09,000 --> 01:20:11,000
那么是有证据可以去追寻的

2587
01:20:11,000 --> 01:20:13,000
就抓到你本人对吧对

2588
01:20:13,000 --> 01:20:16,000
是说 4 G 我们是可以找得到苹果是找到你在哪的

2589
01:20:16,000 --> 01:20:17,000
对吧对

2590
01:20:17,000 --> 01:20:18,000
是你在哪里注册啊

2591
01:20:18,000 --> 01:20:20,000
你的这个法律主体是什么都能找得到

2592
01:20:20,000 --> 01:20:22,000
就这个证书里面是包含着这些信息

2593
01:20:23,000 --> 01:20:23,000
对是的

2594
01:20:23,000 --> 01:20:26,000
除非从苹果给你认证过

2595
01:20:26,000 --> 01:20:29,000
你是不可能自己伪造一个默认情况下

2596
01:20:29,000 --> 01:20:31,000
被苹果设备信任的证书的

2597
01:20:31,000 --> 01:20:33,000
对这个是算法层面决定的

2598
01:20:33,000 --> 01:20:35,000
但这个你应该比我懂得多

2599
01:20:35,000 --> 01:20:36,000
你可以给自己给大家克服

2600
01:20:37,000 --> 01:20:39,000
这个我们我们下次再解释

2601
01:20:39,000 --> 01:20:42,000
但是我们从从实用性的解释的时候就说

2602
01:20:42,000 --> 01:20:43,000
你是不可能伪造一个

2603
01:20:44,000 --> 01:20:46,000
苹果发给签发给你的证书的

2604
01:20:46,000 --> 01:20:48,000
这个是这点安全性是可以保证的

2605
01:20:48,000 --> 01:20:50,000
那么对在这个证书技术上

2606
01:20:50,000 --> 01:20:53,000
在做 ocsp 的原因是

2607
01:20:53,000 --> 01:20:56,000
我猜想是不是说苹果认为

2608
01:20:56,000 --> 01:20:59,000
我即使发给你一个可信的证书

2609
01:20:59,000 --> 01:21:01,000
但是你作为一个开发者

2610
01:21:01,000 --> 01:21:03,000
也有可能拿这个证书来分发恶意软件

2611
01:21:03,000 --> 01:21:03,000
对不对

2612
01:21:03,000 --> 01:21:04,000
对是的

2613
01:21:04,000 --> 01:21:06,000
或者说你先翻发了一个正常软件

2614
01:21:06,000 --> 01:21:08,000
但是你可能潜伏一段时间

2615
01:21:08,000 --> 01:21:11,000
才启用你软件里面的恶意的功能

2616
01:21:11,000 --> 01:21:13,000
这个时候苹果需要一个手段说

2617
01:21:14,000 --> 01:21:16,000
即便我签发了一个可信的证书

2618
01:21:16,000 --> 01:21:19,000
给这个软件的开发者

2619
01:21:19,000 --> 01:21:21,000
然后他用这个证书给他的程序签了名

2620
01:21:21,000 --> 01:21:23,000
我也要有一个所谓的 kill switch

2621
01:21:23,000 --> 01:21:24,000
对吧

2622
01:21:24,000 --> 01:21:25,000
就是 Kook

2623
01:21:25,000 --> 01:21:27,000
你给他 Tim Cook 可以按个键

2624
01:21:27,000 --> 01:21:29,000
老板键说禁止这个软件

2625
01:21:29,000 --> 01:21:30,000
在苹果

2626
01:21:30,000 --> 01:21:31,000
苹果设备上运行

2627
01:21:31,000 --> 01:21:33,000
因为它现在是一个恶意软件

2628
01:21:33,000 --> 01:21:34,000
它有一些隐藏的功能

2629
01:21:34,000 --> 01:21:35,000
我们当时是不知道的

2630
01:21:36,000 --> 01:21:36,000
没错是的

2631
01:21:36,000 --> 01:21:37,000
这是一种可能

2632
01:21:37,000 --> 01:21:38,000
还有另外一种可能是

2633
01:21:38,000 --> 01:21:40,000
比如说开发者他不小心把它证书泄露了

2634
01:21:41,000 --> 01:21:42,000
然后被公众所知道

2635
01:21:42,000 --> 01:21:43,000
这个时候大家谁都可以用了

2636
01:21:43,000 --> 01:21:45,000
那这也是需要把它注销掉

2637
01:21:45,000 --> 01:21:46,000
你把钥匙丢了

2638
01:21:46,000 --> 01:21:48,000
需要整个导致整个楼都要换锁

2639
01:21:49,000 --> 01:21:50,000
是的

2640
01:21:50,000 --> 01:21:52,000
这个 OCSP 其实是为了

2641
01:21:52,000 --> 01:21:53,000
从本质来讲

2642
01:21:53,000 --> 01:21:56,000
它还是为了保障用户的安全性

2643
01:21:56,000 --> 01:21:56,000
考虑

2644
01:21:56,000 --> 01:22:00,000
所以说在每次一个应用程序启动之前

2645
01:22:00,000 --> 01:22:01,000
都去检查一下

2646
01:22:01,000 --> 01:22:03,000
这个应用程序签名的证书是否

2647
01:22:04,000 --> 01:22:05,000
被吊烧过了

2648
01:22:05,000 --> 01:22:05,000
如果它被吊烧过的话

2649
01:22:05,000 --> 01:22:07,000
这个程序就不能启动对吧

2650
01:22:07,000 --> 01:22:09,000
其实还有一点偏差

2651
01:22:09,000 --> 01:22:11,000
就是它也不是每次系统都会检查

2652
01:22:11,000 --> 01:22:13,000
一般它还是有一个时间的缓存

2653
01:22:13,000 --> 01:22:15,000
隔一段时间可能一两天

2654
01:22:15,000 --> 01:22:17,000
我倒是没有具体测了

2655
01:22:17,000 --> 01:22:18,000
可能是几天

2656
01:22:18,000 --> 01:22:19,000
可能是几个小时这么一个时间吧

2657
01:22:19,000 --> 01:22:22,000
然后它就会需要重新去检查一下

2658
01:22:22,000 --> 01:22:22,000
而且

2659
01:22:23,000 --> 01:22:24,000
甚至有可能

2660
01:22:24,000 --> 01:22:26,000
当然这个也是推测不能确定

2661
01:22:26,000 --> 01:22:28,000
苹果亚根没有考虑 OCSP

2662
01:22:28,000 --> 01:22:31,000
在软件在 App 包的验证上这件事情

2663
01:22:31,000 --> 01:22:34,000
因为整个系统关于证书数字签名的

2664
01:22:34,000 --> 01:22:37,000
验证的东西都用的是一同一套公优体系

2665
01:22:37,000 --> 01:22:38,000
然后

2666
01:22:39,000 --> 01:22:41,000
在开发者上面的话应该是 security framework

2667
01:22:42,000 --> 01:22:43,000
然后这套体系的话

2668
01:22:43,000 --> 01:22:45,000
既会拿来验证 HTPS

2669
01:22:45,000 --> 01:22:47,000
你房的网站是否是合理法的

2670
01:22:47,000 --> 01:22:49,000
也会来验证开发者

2671
01:22:49,000 --> 01:22:52,000
那个开发者签名你的应用包是否是合法的

2672
01:22:52,000 --> 01:22:54,000
所以说它可能也根本没有想那么多细节

2673
01:22:54,000 --> 01:22:56,000
就直接把那个东西搬过来再用了

2674
01:22:56,000 --> 01:22:57,000
OK

2675
01:22:57,000 --> 01:23:00,000
如果你电脑是在没联网的状态下

2676
01:23:01,000 --> 01:23:03,000
这个 OCSP 它是可以直接就直接失败

2677
01:23:03,000 --> 01:23:05,000
其实是不影响你启动的对不对

2678
01:23:05,000 --> 01:23:08,000
对这其实是 OCSP 协议本身设计的时候

2679
01:23:08,000 --> 01:23:08,000
我们就有问题

2680
01:23:08,000 --> 01:23:10,000
但这个问题好像从理论上

2681
01:23:10,000 --> 01:23:12,000
我印象中之间讨论是不可能解决的

2682
01:23:12,000 --> 01:23:14,000
就是假如说黑客恶意的

2683
01:23:14,000 --> 01:23:16,000
它能够控制你的链路

2684
01:23:16,000 --> 01:23:17,000
它能阻止你的查询

2685
01:23:17,000 --> 01:23:18,000
那怎么办

2686
01:23:18,000 --> 01:23:20,000
就不准你去检查 OCSP 对吧

2687
01:23:20,000 --> 01:23:24,000
对你因为不太能够说

2688
01:23:24,000 --> 01:23:25,000
你这个 OCSP 访问失败

2689
01:23:25,000 --> 01:23:27,000
我就不允许继续

2690
01:23:27,000 --> 01:23:28,000
因为访问失败这件事情

2691
01:23:28,000 --> 01:23:30,000
太多因素了对吗

2692
01:23:30,000 --> 01:23:31,000
对太多因素了

2693
01:23:31,000 --> 01:23:33,000
在网络上各种方面还是都还是可能的

2694
01:23:33,000 --> 01:23:36,000
我自己观察的话是系统会重视 5 次

2695
01:23:36,000 --> 01:23:38,000
你如果这个连接失败的话

2696
01:23:38,000 --> 01:23:39,000
它会在后台自动重视 5 次

2697
01:23:39,000 --> 01:23:42,000
如果 5 次之后都还是无法访问的话

2698
01:23:42,000 --> 01:23:43,000
它就不管了

2699
01:23:43,000 --> 01:23:43,000
它就继续运行

2700
01:23:43,000 --> 01:23:46,000
所以这里面有个非常简单直白的问题

2701
01:23:46,000 --> 01:23:48,000
就是说如果他 OCSP 检查

2702
01:23:48,000 --> 01:23:50,000
默认就说如果网络不通的情况

2703
01:23:50,000 --> 01:23:53,000
他也能够就放过不检查

2704
01:23:53,000 --> 01:23:55,000
然后就让这次先启动以后再说

2705
01:23:55,000 --> 01:23:56,000
它是不会影响用户使用的

2706
01:23:56,000 --> 01:23:59,000
那为什么这次会导致这么大规模的

2707
01:23:59,000 --> 01:24:00,000
又那个不能启动呢

2708
01:24:00,000 --> 01:24:03,000
它的问题在于他没有服务器直接说

2709
01:24:03,000 --> 01:24:03,000
我不行了

2710
01:24:03,000 --> 01:24:06,000
而是服务器被 DDoS 没有响应

2711
01:24:06,000 --> 01:24:08,000
所以说在等着他服务器说话

2712
01:24:08,000 --> 01:24:10,000
OK 这个代码就非常傻

2713
01:24:10,000 --> 01:24:12,000
如果说你正常加个什么加个 Timer

2714
01:24:12,000 --> 01:24:13,000
比如说一个 Timer

2715
01:24:13,000 --> 01:24:15,000
比如说 5 秒之后还没有成功

2716
01:24:15,000 --> 01:24:16,000
你就直接放弃了

2717
01:24:16,000 --> 01:24:18,000
就是其实也不会导致这么多的问题

2718
01:24:18,000 --> 01:24:18,000
对吧

2719
01:24:18,000 --> 01:24:21,000
但实际上等待 5 秒也是相当长的一件事情

2720
01:24:21,000 --> 01:24:22,000
Timer 应该是有的

2721
01:24:22,000 --> 01:24:23,000
我觉得应该不止 5 秒

2722
01:24:23,000 --> 01:24:25,000
可能这个那个 Timer

2723
01:24:25,000 --> 01:24:26,000
我没有实际遇到那个

2724
01:24:26,000 --> 01:24:28,000
他真正当机的那个时间那个事情了

2725
01:24:28,000 --> 01:24:30,000
就是我没有观测到他的到底是多少秒

2726
01:24:30,000 --> 01:24:32,000
但是应该不止 5 秒

2727
01:24:32,000 --> 01:24:34,000
而且我觉得可能是真的是一个

2728
01:24:34,000 --> 01:24:36,000
第一世界没有考虑到的问题吧

2729
01:24:36,000 --> 01:24:37,000
对于苹果的工程师

2730
01:24:37,000 --> 01:24:39,000
做在苹果的网络里面

2731
01:24:39,000 --> 01:24:41,000
从来都不会觉得执行一个网络

2732
01:24:42,000 --> 01:24:44,000
那个赌色的执行一个网络请求会

2733
01:24:44,000 --> 01:24:45,000
还能失败

2734
01:24:45,000 --> 01:24:46,000
对还能失败还能卡住

2735
01:24:46,000 --> 01:24:48,000
这不就几毫秒的事情吧

2736
01:24:48,000 --> 01:24:49,000
有什么关系呢

2737
01:24:49,000 --> 01:24:52,000
关键是说如果他是直接失败反而对了

2738
01:24:52,000 --> 01:24:53,000
反而如果是直接失败

2739
01:24:53,000 --> 01:24:54,000
就是网络不通动的情况下

2740
01:24:54,000 --> 01:24:56,000
他反而也也不会出什么大大问题

2741
01:24:56,000 --> 01:24:56,000
他属于这种

2742
01:24:57,000 --> 01:24:57,000
对

2743
01:24:57,000 --> 01:24:59,000
直接 502 之内就就可以了对

2744
01:24:59,000 --> 01:25:02,000
对但这次属于那种就是他那边

2745
01:25:02,000 --> 01:25:03,000
那边服务器响应非常非常慢

2746
01:25:03,000 --> 01:25:05,000
大家说我还真正在努力中

2747
01:25:05,000 --> 01:25:08,000
对吧你不要你不要放弃这种感觉就很

2748
01:25:09,000 --> 01:25:10,000
但即便是这样

2749
01:25:10,000 --> 01:25:12,000
即便是这种失败场景

2750
01:25:12,000 --> 01:25:14,000
他如果说他是就是这个 ocsp

2751
01:25:14,000 --> 01:25:16,000
他是一个我们说什么的叫做一部的

2752
01:25:16,000 --> 01:25:18,000
就是说他他检查 ocsp 和

2753
01:25:19,000 --> 01:25:21,000
和这个让你启动 app

2754
01:25:21,000 --> 01:25:24,000
他是两个不需要一前后有依赖关系的

2755
01:25:24,000 --> 01:25:26,000
这个逻辑步骤

2756
01:25:26,000 --> 01:25:27,000
他其实也不会导致这种问题对吧

2757
01:25:27,000 --> 01:25:28,000
就是说你你启动是启动了

2758
01:25:28,000 --> 01:25:31,000
你检查检查你可以下次再

2759
01:25:31,000 --> 01:25:33,000
告诉我这个结果或者说你

2760
01:25:33,000 --> 01:25:35,000
你检查好了之后你弹个小窗出来说

2761
01:25:35,000 --> 01:25:36,000
这个程序刚才我检查失败了

2762
01:25:36,000 --> 01:25:37,000
但是你已经把它打开了

2763
01:25:37,000 --> 01:25:39,000
我先警告你说这个已经被掉下了

2764
01:25:39,000 --> 01:25:40,000
可能有问题赶紧退出来对吧

2765
01:25:40,000 --> 01:25:41,000
也是可以的吗

2766
01:25:41,000 --> 01:25:43,000
对但是他连这个也没有做

2767
01:25:44,000 --> 01:25:46,000
对而且这个问题的话

2768
01:25:46,000 --> 01:25:49,000
可能导致了在国内绝大部分用户

2769
01:25:49,000 --> 01:25:51,000
他觉得卖可缓慢的一个很大的问题

2770
01:25:51,000 --> 01:25:53,000
就有的时候我们会打开我们的卖

2771
01:25:53,000 --> 01:25:54,000
可能然后点开个 app

2772
01:25:54,000 --> 01:25:56,000
或者看着图标在那谈谈谈谈谈

2773
01:25:56,000 --> 01:25:58,000
谈个 10 秒其实一直在跳对吧

2774
01:25:58,000 --> 01:26:01,000
对不是一个很常常很那个很罕见的

2775
01:26:01,000 --> 01:26:03,000
事情就是在检查这个证书

2776
01:26:03,000 --> 01:26:04,000
他访问不长不是网络不长

2777
01:26:05,000 --> 01:26:06,000
对所以就说这本质上是一个

2778
01:26:06,000 --> 01:26:08,000
软件架构设计的失误

2779
01:26:08,000 --> 01:26:11,000
再加上这个网络这个基础设施

2780
01:26:11,000 --> 01:26:13,000
因为一些外部或者是不可预测的因素

2781
01:26:13,000 --> 01:26:15,000
导致变得缓慢

2782
01:26:15,000 --> 01:26:16,000
而不是完全不可用的情况下

2783
01:26:16,000 --> 01:26:19,000
双重压力导致的一个

2784
01:26:19,000 --> 01:26:21,000
用户使用体验的重大的问题

2785
01:26:21,000 --> 01:26:22,000
对是的

2786
01:26:22,000 --> 01:26:24,000
所以就是还是要把这个苹果的这个架构的

2787
01:26:24,000 --> 01:26:27,000
就是负责这块架构的人拖出来打板子才行

2788
01:26:27,000 --> 01:26:29,000
对我觉得很可能就是

2789
01:26:29,000 --> 01:26:30,000
之前没有想过这件事情

2790
01:26:30,000 --> 01:26:32,000
在他们那儿从来没有遇到过这件事情

2791
01:26:32,000 --> 01:26:34,000
那这个坑埋在那儿就一直没人管

2792
01:26:34,000 --> 01:26:37,000
其实这个坑应该埋了相当长的时间了

2793
01:26:37,000 --> 01:26:41,000
很大很多年以前就已经是这么一个工作方式

2794
01:26:41,000 --> 01:26:43,000
引入 ocsp 我记得应该是至少

2795
01:26:43,000 --> 01:26:45,000
可能是三到五个版本以前了吧

2796
01:26:45,000 --> 01:26:46,000
对吧大版本以前了

2797
01:26:46,000 --> 01:26:49,000
对我作为开发者我自己观察后台请求

2798
01:26:49,000 --> 01:26:51,000
我早就是看到后台不断的

2799
01:26:51,000 --> 01:26:52,000
就是 ocsp 的请求会在

2800
01:26:52,000 --> 01:26:54,000
就会有在一直在那个进行的

2801
01:26:54,000 --> 01:26:57,000
ocsp 请求是会直接发到开发者那里去的吗

2802
01:26:57,000 --> 01:26:58,000
不是会发到开发者

2803
01:26:58,000 --> 01:27:02,000
他发的应该是证书的那个颁发者那里去查

2804
01:27:02,000 --> 01:27:02,000
应该是

2805
01:27:02,000 --> 01:27:04,000
我从设置上面看网络流量

2806
01:27:04,000 --> 01:27:05,000
我是能看到他的评词的

2807
01:27:05,000 --> 01:27:07,000
你是从中间眼的角度去看他

2808
01:27:07,000 --> 01:27:08,000
对是的我能看到他的请求

2809
01:27:08,000 --> 01:27:11,000
然后因为他那个请求本身是 htp 是明文的

2810
01:27:11,000 --> 01:27:12,000
所以说你能看到他明信息

2811
01:27:12,000 --> 01:27:14,000
所以这也是导致这一次

2812
01:27:14,000 --> 01:27:16,000
大家对他在隐私方面的一个

2813
01:27:16,000 --> 01:27:17,000
泄露上的一个批评的一个原因

2814
01:27:18,000 --> 01:27:19,000
对刚才我们说的就是说他是导致不可用

2815
01:27:19,000 --> 01:27:22,000
这个还是说是一个用户体验的问题

2816
01:27:22,000 --> 01:27:26,000
可能相对来说如果他把这个架构改一下

2817
01:27:26,000 --> 01:27:27,000
到比如说他做成一部的对吧

2818
01:27:27,000 --> 01:27:30,000
不需要跟那个启动这个

2819
01:27:30,000 --> 01:27:32,000
一个启动应用程序之间产生一个绑定关系

2820
01:27:33,000 --> 01:27:33,000
那可能也还好

2821
01:27:34,000 --> 01:27:36,000
但可能这更要紧的是

2822
01:27:36,000 --> 01:27:38,000
就是说他在 ocsp 检查过程中

2823
01:27:39,000 --> 01:27:42,000
暴露出来的一些更侵犯隐私的事情

2824
01:27:42,000 --> 01:27:43,000
比如说他说我们

2825
01:27:43,000 --> 01:27:45,000
我现在不太清楚是不是这么一回事

2826
01:27:45,000 --> 01:27:47,000
我看到的这个说法是说

2827
01:27:47,000 --> 01:27:51,000
他在 ocsp 请求是通过 http 明文发送的

2828
01:27:51,000 --> 01:27:52,000
没有走 https

2829
01:27:52,000 --> 01:27:54,000
这个供我们目前主流的

2830
01:27:55,000 --> 01:27:57,000
只要是通过这个互联网传输的信息

2831
01:27:57,000 --> 01:27:59,000
都尽可能加密的方式来做

2832
01:27:59,000 --> 01:28:01,000
这种做法是违背的嘛

2833
01:28:01,000 --> 01:28:02,000
就是其一

2834
01:28:02,000 --> 01:28:04,000
对第二就是说他在这个明文的

2835
01:28:05,000 --> 01:28:08,000
这个 ocsp 的请求里面还附带了

2836
01:28:08,000 --> 01:28:11,000
你就是他要检查那个 app 的一个哈希

2837
01:28:11,000 --> 01:28:13,000
这个所有的哈希就是说

2838
01:28:13,000 --> 01:28:16,000
可以唯一判定说你是否在

2839
01:28:16,000 --> 01:28:18,000
不是哈希是 sn 是那个证书的 sn

2840
01:28:18,000 --> 01:28:20,000
证书的 sn 是证书的序列号对吧

2841
01:28:20,000 --> 01:28:21,000
对是的

2842
01:28:21,000 --> 01:28:23,000
但是这个序列号是证书唯一的

2843
01:28:24,000 --> 01:28:24,000
对

2844
01:28:24,000 --> 01:28:27,000
假设我有一个证书和 app 之间的彩虹表的话

2845
01:28:27,000 --> 01:28:29,000
我是可以反查出来这是哪个 app 的

2846
01:28:29,000 --> 01:28:30,000
都是公开信息对吧

2847
01:28:30,000 --> 01:28:31,000
比如说 surge

2848
01:28:31,000 --> 01:28:32,000
对他会有一个 sn 对吧

2849
01:28:32,000 --> 01:28:33,000
他发了这个 sn 过去

2850
01:28:34,000 --> 01:28:35,000
但如果我只要假设

2851
01:28:35,000 --> 01:28:36,000
假设我是这个 sp

2852
01:28:36,000 --> 01:28:37,000
或者任何一个中间人

2853
01:28:37,000 --> 01:28:38,000
网络中间人

2854
01:28:38,000 --> 01:28:41,000
我观察到了这个明文的 htps 的流量

2855
01:28:41,000 --> 01:28:44,000
然后我看到的是一个 ip 地址

2856
01:28:44,000 --> 01:28:45,000
就是这个原 ip 地址

2857
01:28:45,000 --> 01:28:47,000
他发向了苹果的 ocsp 的服务器

2858
01:28:47,000 --> 01:28:49,000
有一个明文的这个包

2859
01:28:49,000 --> 01:28:51,000
包里面含有这个 sn

2860
01:28:51,000 --> 01:28:53,000
那我可以百分之百精确的都是结论说

2861
01:28:53,000 --> 01:28:55,000
这个 ip 的人在用 surge

2862
01:28:55,000 --> 01:28:57,000
开发者证书签发的东西

2863
01:28:57,000 --> 01:28:58,000
对但是 surge 开发者证书

2864
01:28:58,000 --> 01:28:59,000
因为他只签发两个东西

2865
01:28:59,000 --> 01:29:01,000
就是 surge 和这个 lpass

2866
01:29:01,000 --> 01:29:02,000
这两个 app

2867
01:29:02,000 --> 01:29:04,000
那他肯定是在用其中这两个之一对吧

2868
01:29:04,000 --> 01:29:05,000
对没错

2869
01:29:05,000 --> 01:29:08,000
然后由于绝大部分的

2870
01:29:08,000 --> 01:29:10,000
这个我们不抛开什么微软

2871
01:29:10,000 --> 01:29:11,000
那些什么大公司

2872
01:29:11,000 --> 01:29:13,000
就正常一些从小开发者

2873
01:29:13,000 --> 01:29:13,000
他可能一个人

2874
01:29:13,000 --> 01:29:15,000
就说就只开发一个 app

2875
01:29:15,000 --> 01:29:16,000
其实我们可以基本上

2876
01:29:16,000 --> 01:29:17,000
可以精确的定位到

2877
01:29:17,000 --> 01:29:18,000
这个人是不是在用 surge

2878
01:29:18,000 --> 01:29:19,000
或者这个人是不是在用

2879
01:29:19,000 --> 01:29:21,000
某某某什么软件对吧

2880
01:29:21,000 --> 01:29:22,000
有些比较稍微敏感一点

2881
01:29:22,000 --> 01:29:23,000
敏感一点的软件

2882
01:29:23,000 --> 01:29:25,000
就是我们是可以明确的知道这件事情的

2883
01:29:26,000 --> 01:29:26,000
对是的

2884
01:29:26,000 --> 01:29:28,000
所以从这个角度上来讲

2885
01:29:28,000 --> 01:29:30,000
这个明文的 ocsp 的请求

2886
01:29:30,000 --> 01:29:32,000
他的确是泄露了用户的隐私

2887
01:29:32,000 --> 01:29:33,000
这个说法是没错的对吧

2888
01:29:33,000 --> 01:29:35,000
对这个说法是没错的

2889
01:29:35,000 --> 01:29:36,000
我们也看到就是

2890
01:29:36,000 --> 01:29:38,000
这个单则是一篇

2891
01:29:39,000 --> 01:29:41,000
这个是一篇这个博客里面

2892
01:29:41,000 --> 01:29:42,000
他有专门去解释

2893
01:29:42,000 --> 01:29:44,000
这个整个整个这个

2894
01:29:44,000 --> 01:29:45,000
底层原理怎么回事

2895
01:29:45,000 --> 01:29:47,000
我会把这个这期的 show notes 里面

2896
01:29:47,000 --> 01:29:48,000
会贴出这篇

2897
01:29:48,000 --> 01:29:49,000
这篇文章的这个连接

2898
01:29:49,000 --> 01:29:50,000
大家可以去

2899
01:29:50,000 --> 01:29:51,000
如果感兴趣这个技术细节

2900
01:29:51,000 --> 01:29:52,000
可以去点去来看

2901
01:29:52,000 --> 01:29:54,000
但我们也看到就是隔了

2902
01:29:54,000 --> 01:29:54,000
可能几天之后

2903
01:29:54,000 --> 01:29:56,000
苹果出了一个官方的

2904
01:29:56,000 --> 01:29:57,000
算是一个回应吧

2905
01:29:57,000 --> 01:29:58,000
他在他的这个

2906
01:29:58,000 --> 01:29:59,000
他的这个 support 的

2907
01:29:59,000 --> 01:30:00,000
赔金里面叫做

2908
01:30:00,000 --> 01:30:02,000
safely open apps on your mac

2909
01:30:02,000 --> 01:30:03,000
就是说在你的

2910
01:30:04,000 --> 01:30:05,000
mac 上安全的打

2911
01:30:05,000 --> 01:30:06,000
开启应用程序里面

2912
01:30:06,000 --> 01:30:09,000
最下面加了一个 section 叫做

2913
01:30:09,000 --> 01:30:10,000
叫做这个

2914
01:30:11,000 --> 01:30:12,000
piracy protection 隐私保护

2915
01:30:12,000 --> 01:30:13,000
他他说

2916
01:30:13,000 --> 01:30:14,000
他最后加了一段话

2917
01:30:14,000 --> 01:30:15,000
他给了三个方法

2918
01:30:15,000 --> 01:30:16,000
他说在

2919
01:30:16,000 --> 01:30:19,000
明年我们会增加几个变化

2920
01:30:19,000 --> 01:30:20,000
一个是说

2921
01:30:20,000 --> 01:30:22,000
通过加密的协议去传输

2922
01:30:22,000 --> 01:30:24,000
这个这个 ocsp 的请求

2923
01:30:24,000 --> 01:30:24,000
对吧

2924
01:30:24,000 --> 01:30:25,000
这是其一

2925
01:30:25,000 --> 01:30:27,000
第二就是说他有更强的

2926
01:30:27,000 --> 01:30:29,000
保护措施去解决

2927
01:30:29,000 --> 01:30:30,000
刚才我们讲的就是说

2928
01:30:30,000 --> 01:30:31,000
如果服务端不可用

2929
01:30:31,000 --> 01:30:33,000
不就是各种失败的原因

2930
01:30:34,000 --> 01:30:36,000
出现就尽量并尽量避免

2931
01:30:37,000 --> 01:30:39,000
由于服务器或者网络不可用

2932
01:30:39,000 --> 01:30:40,000
而导致不法启动

2933
01:30:40,000 --> 01:30:41,000
这个应用的情况

2934
01:30:41,000 --> 01:30:42,000
对吧

2935
01:30:42,000 --> 01:30:43,000
然后就是说

2936
01:30:43,000 --> 01:30:44,000
还给用户一个选项

2937
01:30:44,000 --> 01:30:46,000
说说用户可以 optout

2938
01:30:46,000 --> 01:30:46,000
就是可以

2939
01:30:46,000 --> 01:30:48,000
不要这些安全保护措施

2940
01:30:48,000 --> 01:30:50,000
就彻底的保护这个隐私

2941
01:30:50,000 --> 01:30:50,000
对吧

2942
01:30:50,000 --> 01:30:51,000
我就是要罗门

2943
01:30:51,000 --> 01:30:53,000
我就是要像要像 Windows 一样

2944
01:30:53,000 --> 01:30:55,000
对我就不想检查的问题

2945
01:30:55,000 --> 01:30:57,000
我就不想给你苹果知道

2946
01:30:57,000 --> 01:30:58,000
我在运行什么样的程序

2947
01:30:58,000 --> 01:30:59,000
所以说这个说法

2948
01:30:59,000 --> 01:31:01,000
我觉得有点奇怪

2949
01:31:01,000 --> 01:31:03,000
就是说你都在用苹果的

2950
01:31:03,000 --> 01:31:04,000
软件硬件系统了

2951
01:31:04,000 --> 01:31:05,000
你不想让苹果知道

2952
01:31:05,000 --> 01:31:06,000
这个是不可能的

2953
01:31:06,000 --> 01:31:06,000
对吧

2954
01:31:07,000 --> 01:31:08,000
苹果苹果如果要想知道

2955
01:31:08,000 --> 01:31:09,000
它总有各种的方法知道

2956
01:31:10,000 --> 01:31:12,000
你跟它你在这里做文章

2957
01:31:12,000 --> 01:31:12,000
是没有用的

2958
01:31:12,000 --> 01:31:13,000
但是我们来看

2959
01:31:14,000 --> 01:31:15,000
就是虽然苹果还没有公布

2960
01:31:15,000 --> 01:31:17,000
它说它具体的解决方案是什么

2961
01:31:17,000 --> 01:31:19,000
但我们我们就是一个

2962
01:31:19,000 --> 01:31:20,000
毕竟是个技术节目

2963
01:31:20,000 --> 01:31:21,000
我们来想想

2964
01:31:21,000 --> 01:31:23,000
有哪些方法可以避免这个问题

2965
01:31:23,000 --> 01:31:23,000
那首先来看

2966
01:31:23,000 --> 01:31:25,000
我们先说刚才也提到了

2967
01:31:25,000 --> 01:31:27,000
就是说把这个 ocsp 检查

2968
01:31:27,000 --> 01:31:29,000
和 app 其中的这个两个过程

2969
01:31:30,000 --> 01:31:32,000
独立开来不要做成是

2970
01:31:32,000 --> 01:31:34,000
像如果因为 ocsp 检查失败

2971
01:31:34,000 --> 01:31:36,000
就是没有结果

2972
01:31:36,000 --> 01:31:37,000
或者它在进行中

2973
01:31:37,000 --> 01:31:38,000
就要等它结果才能起到 app

2974
01:31:38,000 --> 01:31:40,000
这个明显是不合理的对吧

2975
01:31:40,000 --> 01:31:40,000
对

2976
01:31:41,000 --> 01:31:42,000
所以就是要它

2977
01:31:42,000 --> 01:31:43,000
ocsp 它是一个

2978
01:31:43,000 --> 01:31:44,000
应该是一个异步

2979
01:31:45,000 --> 01:31:47,000
在背景后台去运行的一个东西

2980
01:31:47,000 --> 01:31:49,000
然后前台应用在

2981
01:31:49,000 --> 01:31:50,000
还是正常执行

2982
01:31:50,000 --> 01:31:52,000
不用等待任何网络请求

2983
01:31:52,000 --> 01:31:54,000
然后后来如果你 ocsp 检查结果

2984
01:31:54,000 --> 01:31:55,000
你告诉我说

2985
01:31:55,000 --> 01:31:56,000
要么就下次不能用

2986
01:31:56,000 --> 01:31:57,000
或者是你这次不能用

2987
01:31:57,000 --> 01:31:58,000
你直接弹个窗

2988
01:31:58,000 --> 01:31:59,000
或者是给个什么提示

2989
01:31:59,000 --> 01:32:01,000
然后把那个那个那个 app

2990
01:32:01,000 --> 01:32:02,000
freeze 住也可以对吧

2991
01:32:02,000 --> 01:32:04,000
或者是强行杀掉它退出

2992
01:32:04,000 --> 01:32:05,000
给个提示也行

2993
01:32:05,000 --> 01:32:07,000
这种方法就比较简单

2994
01:32:07,000 --> 01:32:09,000
那其实我更关心的就是说

2995
01:32:09,000 --> 01:32:11,000
那是否或者说如何通过一个

2996
01:32:12,000 --> 01:32:15,000
加密的协议来传输这个 ocsp 的检查

2997
01:32:15,000 --> 01:32:17,000
或者说从技术上有没有可能就是说

2998
01:32:18,000 --> 01:32:19,000
就是哪怕是我用名闻传输

2999
01:32:19,000 --> 01:32:22,000
但是不会泄露用户的

3000
01:32:22,000 --> 01:32:24,000
再用哪个证书的

3001
01:32:24,000 --> 01:32:25,000
或者说再用哪个 app 的

3002
01:32:26,000 --> 01:32:27,000
这么一个信息

3003
01:32:27,000 --> 01:32:29,000
其实这个问题它之所以

3004
01:32:29,000 --> 01:32:31,000
就是 ocsp 有这个问题

3005
01:32:31,000 --> 01:32:33,000
就是因为 ocsp 本是最早就是为

3006
01:32:33,000 --> 01:32:36,000
htps 这个请求来设计的

3007
01:32:36,000 --> 01:32:39,000
因为我当我去访问 htps 的时候

3008
01:32:39,000 --> 01:32:40,000
这是一个加密连接

3009
01:32:40,000 --> 01:32:42,000
我要去验证这个证处是否有效

3010
01:32:42,000 --> 01:32:45,000
然后我要去执行 ocsp 请求

3011
01:32:45,000 --> 01:32:48,000
如果这个 ocsp 请求也是 htps 的话

3012
01:32:48,000 --> 01:32:50,000
那那他这个请求又该谁来检查呢

3013
01:32:50,000 --> 01:32:51,000
集合弹的问题

3014
01:32:52,000 --> 01:32:53,000
这个说法当我觉得逻辑上是可以理解

3015
01:32:53,000 --> 01:32:56,000
但我觉得如果我们不去追求

3016
01:32:56,000 --> 01:32:57,000
那么的百分之百完美的话

3017
01:32:57,000 --> 01:32:59,000
这个我觉得也不是不可以接受

3018
01:32:59,000 --> 01:33:01,000
就是如果说 ocsp 的请求

3019
01:33:01,000 --> 01:33:03,000
他不是每次都要检查的话

3020
01:33:03,000 --> 01:33:05,000
就是如果他可以像就是网页的

3021
01:33:05,000 --> 01:33:07,000
htps 的检查也可以一步的话

3022
01:33:07,000 --> 01:33:09,000
他完全可以就说我检查 ocsp 的

3023
01:33:09,000 --> 01:33:12,000
那个 htps 请求的 ocsp

3024
01:33:12,000 --> 01:33:13,000
我可以不做嘛

3025
01:33:13,000 --> 01:33:15,000
或者说是我等下次嘛

3026
01:33:15,000 --> 01:33:16,000
或者说等这个

3027
01:33:17,000 --> 01:33:18,000
或者一步来做也可以嘛

3028
01:33:18,000 --> 01:33:20,000
至少让我保证这一次的 ocsp

3029
01:33:20,000 --> 01:33:21,000
请求是可以完成的

3030
01:33:21,000 --> 01:33:23,000
然后我们再来看你那个 ocsp

3031
01:33:23,000 --> 01:33:26,000
就是这个就是他是两个英国的 ocsp

3032
01:33:26,000 --> 01:33:29,000
请求他他不需要一定是同时完成吧

3033
01:33:29,000 --> 01:33:31,000
对这个从我的理解上来说的话

3034
01:33:31,000 --> 01:33:33,000
是当时是在 1999 年吧

3035
01:33:33,000 --> 01:33:35,000
那个时候对隐私的保护的重要性

3036
01:33:35,000 --> 01:33:37,000
没有现在这么强

3037
01:33:37,000 --> 01:33:40,000
然后本身的话你通过访问 htps 的话

3038
01:33:40,000 --> 01:33:42,000
你通过在链路上已经 sni

3039
01:33:42,000 --> 01:33:44,000
已经泄露出你的那个访问的域名了

3040
01:33:44,000 --> 01:33:46,000
所以说这个事情你访问哪个网站

3041
01:33:46,000 --> 01:33:47,000
这些已经暴露了

3042
01:33:47,000 --> 01:33:49,000
对加不加密好像走不走的

3043
01:33:49,000 --> 01:33:52,000
htps 的关于在 ocsp 请求上的话

3044
01:33:52,000 --> 01:33:53,000
是涉及安全性的问题

3045
01:33:53,000 --> 01:33:55,000
不涉及隐私性的问题

3046
01:33:55,000 --> 01:33:57,000
安全性的问题的话在响应结果上

3047
01:33:57,000 --> 01:33:59,000
本身就已经被证书的那个数字签名给解决了

3048
01:33:59,000 --> 01:34:02,000
所以说你加 htps 是解决隐私问题

3049
01:34:02,000 --> 01:34:04,000
在 1999 年那个时候估计大家

3050
01:34:04,000 --> 01:34:08,000
一是他本身在 tls 的 sni 上就已经泄露过一次了

3051
01:34:08,000 --> 01:34:11,000
然后二是也没有这么特别的去关注

3052
01:34:11,000 --> 01:34:13,000
这个隐私上要这么保护的一个事情

3053
01:34:13,000 --> 01:34:14,000
所以说就没有考虑一件事

3054
01:34:14,000 --> 01:34:15,000
这是我的理解

3055
01:34:16,000 --> 01:34:17,000
因为他毕竟他是一个 online 的事情

3056
01:34:17,000 --> 01:34:18,000
就是说你一定要联网

3057
01:34:18,000 --> 01:34:20,000
然后你本来就要发动东西

3058
01:34:20,000 --> 01:34:24,000
哪怕我不通过 ocsp 的看我直接看你连去了

3059
01:34:24,000 --> 01:34:25,000
假如我是个中间人

3060
01:34:25,000 --> 01:34:27,000
我直接看你连去了哪个目标的 ip

3061
01:34:27,000 --> 01:34:29,000
我也知道你去访问了什么网站对吧

3062
01:34:29,000 --> 01:34:31,000
这个场景跟这个 app 上面其中

3063
01:34:31,000 --> 01:34:33,000
因为你有些 app 你可以是不用联网的

3064
01:34:33,000 --> 01:34:34,000
你就是本地启动一个

3065
01:34:34,000 --> 01:34:37,000
比如说我前面一个随便某某某 app

3066
01:34:37,000 --> 01:34:38,000
但他本来也不需要联网对吧

3067
01:34:38,000 --> 01:34:40,000
他就我只是在本地启动

3068
01:34:40,000 --> 01:34:42,000
但是却通过 ocsp 这个东西

3069
01:34:42,000 --> 01:34:44,000
泄露出我在开什么程序

3070
01:34:44,000 --> 01:34:45,000
这就很奇怪了对不对

3071
01:34:45,000 --> 01:34:48,000
对所以就是我的关键核心观点就是

3072
01:34:48,000 --> 01:34:48,000
苹果偷懒了

3073
01:34:48,000 --> 01:34:51,000
他没想那么多就把那边现成那个东西

3074
01:34:51,000 --> 01:34:52,000
就拿过来就用了

3075
01:34:52,000 --> 01:34:54,000
没有根本没有考虑过这些事情

3076
01:34:54,000 --> 01:34:57,000
你完全可以把整个 ocsp 验证这套搞到本地

3077
01:34:57,000 --> 01:35:02,000
之前定期在这个 microsoft os 里面更新一套

3078
01:35:02,000 --> 01:35:04,000
苹果从 root certificate 到

3079
01:35:05,000 --> 01:35:09,000
具体到每一个 app 的证书的这么一套验证

3080
01:35:09,000 --> 01:35:09,000
链

3081
01:35:09,000 --> 01:35:11,000
然后你把这个整个验证过程放在本地

3082
01:35:11,000 --> 01:35:12,000
完成就可以

3083
01:35:12,000 --> 01:35:15,000
这其实就是原来传统的 CRL

3084
01:35:15,000 --> 01:35:17,000
就是提前我把哪些哪些被吊销了东西

3085
01:35:17,000 --> 01:35:18,000
先全部下滑再等着

3086
01:35:18,000 --> 01:35:20,000
然后我只用更新这个就行了

3087
01:35:20,000 --> 01:35:23,000
这个面临的最主要的一个限制

3088
01:35:23,000 --> 01:35:24,000
就是说这个列表到底有多大

3089
01:35:24,000 --> 01:35:25,000
我是不知道的

3090
01:35:25,000 --> 01:35:29,000
但如果想来这种在 app 上面被吊销

3091
01:35:29,000 --> 01:35:30,000
证书的情况应该还是比较少的吧

3092
01:35:30,000 --> 01:35:31,000
也不像 web

3093
01:35:31,000 --> 01:35:33,000
它是一个完全开放的状态

3094
01:35:33,000 --> 01:35:34,000
在 mac 上

3095
01:35:34,000 --> 01:35:37,000
几乎没有听说过有哪个知名的软件

3096
01:35:37,000 --> 01:35:38,000
或者没有见过哪个软件

3097
01:35:38,000 --> 01:35:40,000
就是或者是安全的什么东西

3098
01:35:40,000 --> 01:35:42,000
被出现过吊销证书的情况

3099
01:35:42,000 --> 01:35:43,000
其实在 ios 上会很常见

3100
01:35:44,000 --> 01:35:46,000
就是 ios 的话有很多一些

3101
01:35:46,000 --> 01:35:48,000
黑色产业什么的滥用企业分发

3102
01:35:48,000 --> 01:35:50,000
那个然后去分发了很多的应用

3103
01:35:50,000 --> 01:35:53,000
然后他们一旦苹果把他们的那个企业

3104
01:35:53,000 --> 01:35:54,000
证书吊销了之后就会靠 ocsp

3105
01:35:54,000 --> 01:35:55,000
把证书给注销了

3106
01:35:55,000 --> 01:35:57,000
这样的话用户的设备上那个应用就直接

3107
01:35:57,000 --> 01:35:58,000
打开了

3108
01:35:59,000 --> 01:36:01,000
核心就是苹果之前没有仔细想过

3109
01:36:01,000 --> 01:36:04,000
这件事没有过没有去仔细考虑

3110
01:36:04,000 --> 01:36:06,000
把证书体系用在应用包检查上面

3111
01:36:06,000 --> 01:36:07,000
这些细节上会不会找到问题

3112
01:36:07,000 --> 01:36:10,000
但是如果就是他好好的想了

3113
01:36:10,000 --> 01:36:12,000
我该怎么样去做这套逻辑

3114
01:36:12,000 --> 01:36:12,000
做这个流程的话

3115
01:36:12,000 --> 01:36:14,000
应该是有非常多的方案

3116
01:36:14,000 --> 01:36:16,000
能够做出一套既保证隐私又安全

3117
01:36:16,000 --> 01:36:18,000
又稳定的一个一个结果的

3118
01:36:19,000 --> 01:36:22,000
在目前他不用他做任何就是额外的工作

3119
01:36:22,000 --> 01:36:25,000
就是简单的把这个 ossp 就是 h

3120
01:36:25,000 --> 01:36:27,000
呃 ocsp.apple.com 这个网站

3121
01:36:28,000 --> 01:36:30,000
强制通过这个 htps 去访问

3122
01:36:30,000 --> 01:36:31,000
也可以解决这个隐私保护

3123
01:36:31,000 --> 01:36:33,000
和不泄露的问题

3124
01:36:33,000 --> 01:36:34,000
你只有苹果知道吗

3125
01:36:34,000 --> 01:36:35,000
中间人是不知道的吗

3126
01:36:35,000 --> 01:36:37,000
对理论上应该没问题

3127
01:36:37,000 --> 01:36:39,000
但是从开发者的角度的话

3128
01:36:39,000 --> 01:36:40,000
系统架构上

3129
01:36:40,000 --> 01:36:42,000
我觉得可能会有问题

3130
01:36:42,000 --> 01:36:44,000
因为他本身就把这些东西的功能性

3131
01:36:44,000 --> 01:36:46,000
已经发挥化分成块了

3132
01:36:46,000 --> 01:36:47,000
那么就是那个进程

3133
01:36:47,000 --> 01:36:50,000
可能本身就没办法去再执行 htps 了

3134
01:36:50,000 --> 01:36:52,000
不然他就会产生一个循环了

3135
01:36:52,000 --> 01:36:54,000
所以我觉得最后结果肯定就是他整个机制

3136
01:36:54,000 --> 01:36:56,000
可能都完全给颠覆掉

3137
01:36:56,000 --> 01:36:57,000
然后重新重新一套

3138
01:36:57,000 --> 01:36:59,000
专门为检查 app 证书的那一套体系

3139
01:36:59,000 --> 01:37:02,000
就是既不依赖现有的这个 htps 的

3140
01:37:02,000 --> 01:37:03,000
这个证书体系

3141
01:37:03,000 --> 01:37:05,000
但又可以同时保证安全

3142
01:37:05,000 --> 01:37:08,000
对应该是就是我觉得就是就是可以值得

3143
01:37:08,000 --> 01:37:11,000
就是专门花精力就好好的重新做一套

3144
01:37:11,000 --> 01:37:12,000
而不是就是偷个懒

3145
01:37:12,000 --> 01:37:15,000
然后把 htps 里边的东西拿过来就直接用了

3146
01:37:15,000 --> 01:37:16,000
那他其实如果

3147
01:37:16,000 --> 01:37:19,000
因为我们知道他苹果那个都是有自带这个证书

3148
01:37:19,000 --> 01:37:23,000
他其实用那个 root 证书给所有的设备签发一个

3149
01:37:23,000 --> 01:37:24,000
苹果专用的证书

3150
01:37:24,000 --> 01:37:26,000
然后用这个证书去签名

3151
01:37:26,000 --> 01:37:29,000
这个 htps 那个 ocsp 的请求

3152
01:37:29,000 --> 01:37:31,000
然后再发给加密的时候再发给苹果也是可以的

3153
01:37:31,000 --> 01:37:33,000
就这个还是比较简单的

3154
01:37:33,000 --> 01:37:34,000
对是的

3155
01:37:34,000 --> 01:37:36,000
就是这样这种改动其实很简单

3156
01:37:36,000 --> 01:37:37,000
就是改两下就是改好了

3157
01:37:37,000 --> 01:37:38,000
但是如果要改的话

3158
01:37:38,000 --> 01:37:40,000
那干脆从头再来什么

3159
01:37:40,000 --> 01:37:43,000
就把所有这些事情都考虑清楚吗

3160
01:37:43,000 --> 01:37:45,000
因为现在的话我们可能有隐私问题

3161
01:37:45,000 --> 01:37:47,000
还有就是堵塞问题

3162
01:37:47,000 --> 01:37:49,000
那个隐私问题倒是其实确实混淆一下

3163
01:37:49,000 --> 01:37:51,000
怎么样一下的话就能够解决了

3164
01:37:51,000 --> 01:37:53,000
那堵塞问题要解决的话

3165
01:37:53,000 --> 01:37:53,000
就异步嘛

3166
01:37:54,000 --> 01:37:56,000
对异步我在考虑异步的话

3167
01:37:56,000 --> 01:37:57,000
可能没那么简单

3168
01:37:57,000 --> 01:37:59,000
那异步第一次启动的话必须得是同步的

3169
01:37:59,000 --> 01:38:01,000
要不是画一个恶意短见

3170
01:38:01,000 --> 01:38:02,000
他已经起来了

3171
01:38:02,000 --> 01:38:03,000
他该干的坏事都干完了

3172
01:38:03,000 --> 01:38:05,000
你现在异步结果来了

3173
01:38:05,000 --> 01:38:06,000
再把它吊销

3174
01:38:06,000 --> 01:38:06,000
你这个赶不上

3175
01:38:06,000 --> 01:38:08,000
已经赶不上这个时间了

3176
01:38:08,000 --> 01:38:08,000
这个是一个问题

3177
01:38:08,000 --> 01:38:10,000
就是你要不要阻止

3178
01:38:10,000 --> 01:38:12,000
或者说你要多大程度上去阻止

3179
01:38:12,000 --> 01:38:14,000
第一个那个那个程序

3180
01:38:14,000 --> 01:38:15,000
或者说其实你想

3181
01:38:15,000 --> 01:38:18,000
本来这个 OCSP 就是一个滞后的解决方案

3182
01:38:18,000 --> 01:38:19,000
不管是你说你

3183
01:38:19,000 --> 01:38:20,000
你及时去查询

3184
01:38:20,000 --> 01:38:21,000
它也是一个滞后的方案

3185
01:38:21,000 --> 01:38:23,000
因为你始终是要等到你发现

3186
01:38:23,000 --> 01:38:25,000
这个程序它是恶意软件之后

3187
01:38:25,000 --> 01:38:27,000
你再才能够去吊销这个它的证书

3188
01:38:27,000 --> 01:38:29,000
然后再通过 OCSP 发不出去这个东西

3189
01:38:30,000 --> 01:38:31,000
所以我觉得你去这个时候

3190
01:38:31,000 --> 01:38:33,000
你去追求所谓的这个及时性

3191
01:38:33,000 --> 01:38:34,000
其实好像意义不是特别大

3192
01:38:34,000 --> 01:38:36,000
对没错是的

3193
01:38:36,000 --> 01:38:38,000
而且现在其实在失恋 15

3194
01:38:38,000 --> 01:38:39,000
还是失恋 14 开始

3195
01:38:39,000 --> 01:38:41,000
已经又加了新的一层那个

3196
01:38:41,000 --> 01:38:43,000
Norin 9 ation 那个公正的一个机制

3197
01:38:44,000 --> 01:38:46,000
那个和这个证书又是独立的

3198
01:38:46,000 --> 01:38:48,000
这个机制跟 OCSP 还不一样吗

3199
01:38:48,000 --> 01:38:49,000
你这个我一直没有搞明白

3200
01:38:49,000 --> 01:38:51,000
这顺便可以解释一下

3201
01:38:51,000 --> 01:38:52,000
这个证书的这个机制的话

3202
01:38:52,000 --> 01:38:54,000
是持续存在的

3203
01:38:54,000 --> 01:38:57,000
就是这个每次用那个超雄启动

3204
01:38:57,000 --> 01:38:58,000
那个程序的话

3205
01:38:58,000 --> 01:38:59,000
就很像或者是隔一段时间

3206
01:38:59,000 --> 01:39:01,000
都会要去检查证书是不是有效

3207
01:39:01,000 --> 01:39:02,000
然后从此出发 OCSP

3208
01:39:02,000 --> 01:39:03,000
可以动态去吊销

3209
01:39:03,000 --> 01:39:05,000
那个的话只在入口检查

3210
01:39:05,000 --> 01:39:08,000
而且那个是针对每一个应用包

3211
01:39:08,000 --> 01:39:10,000
就是我每一次开发者发布一个包

3212
01:39:10,000 --> 01:39:13,000
都需要把那个包丢到苹果的服务区

3213
01:39:13,000 --> 01:39:14,000
上去先做一次

3214
01:39:14,000 --> 01:39:16,000
Hash 和各种安全性的检查

3215
01:39:16,000 --> 01:39:18,000
然后它生成一个有效的一个签名

3216
01:39:18,000 --> 01:39:19,000
可以叫做 Ticket

3217
01:39:19,000 --> 01:39:22,000
然后拿给我附在应用包里面

3218
01:39:22,000 --> 01:39:23,000
然后下发给用户

3219
01:39:23,000 --> 01:39:25,000
然后用户打开这个应用包的时候

3220
01:39:25,000 --> 01:39:27,000
会检查这个 Ticket 是否是有效的

3221
01:39:27,000 --> 01:39:30,000
一种是本地的金牌检查

3222
01:39:30,000 --> 01:39:31,000
同时也向服务器会检查

3223
01:39:31,000 --> 01:39:33,000
这个 Ticket 是否是有效的

3224
01:39:33,000 --> 01:39:34,000
然后如果是有效的话

3225
01:39:34,000 --> 01:39:35,000
才允许允许

3226
01:39:35,000 --> 01:39:37,000
对你说的那个就是这个 Notarization

3227
01:39:37,000 --> 01:39:38,000
那个服务对吧

3228
01:39:38,000 --> 01:39:39,000
就它这个过程是做这件事情

3229
01:39:39,000 --> 01:39:40,000
对

3230
01:39:40,000 --> 01:39:41,000
就是它其实两个层面东西

3231
01:39:41,000 --> 01:39:43,000
也就是说 OCSP 检查的是证书

3232
01:39:43,000 --> 01:39:45,000
但是这个证书是签发给

3233
01:39:45,000 --> 01:39:46,000
某一个开发者账号的

3234
01:39:46,000 --> 01:39:47,000
然后这个开发者账号

3235
01:39:47,000 --> 01:39:48,000
可以开发很多个 APP 出来

3236
01:39:48,000 --> 01:39:50,000
然后它所有的检查

3237
01:39:50,000 --> 01:39:52,000
都是检查这个证书会怎么怎么样

3238
01:39:52,000 --> 01:39:54,000
但是 Notarization 是针对于

3239
01:39:55,000 --> 01:39:58,000
这个开发者开发的单个应用程序而言的

3240
01:39:58,000 --> 01:39:59,000
单个二进制

3241
01:39:59,000 --> 01:40:01,000
每个二进制都需要单独的取出音线

3242
01:40:01,000 --> 01:40:03,000
我也在思考这两种方式

3243
01:40:03,000 --> 01:40:05,000
它到底是为什么要搞这么一种

3244
01:40:05,000 --> 01:40:07,000
而来搞这么新的这么一厂

3245
01:40:07,000 --> 01:40:09,000
它涉及这两个机制的用意

3246
01:40:09,000 --> 01:40:11,000
或者 Notarization 主要解决什么样的问题

3247
01:40:11,000 --> 01:40:14,000
它说是检查这个恶意软件

3248
01:40:14,000 --> 01:40:14,000
对吧

3249
01:40:14,000 --> 01:40:16,000
我想的话可能有这么几个优势吧

3250
01:40:16,000 --> 01:40:17,000
一是这样的话

3251
01:40:17,000 --> 01:40:18,000
你每次提交的时候

3252
01:40:18,000 --> 01:40:20,000
它其实实现的是有个要求的

3253
01:40:20,000 --> 01:40:21,000
就是你要求

3254
01:40:21,000 --> 01:40:23,000
你要满足以下的一些新的

3255
01:40:23,000 --> 01:40:24,000
一些系统的安全特性

3256
01:40:24,000 --> 01:40:25,000
这个安全特性的话

3257
01:40:25,000 --> 01:40:26,000
随着时间的推进

3258
01:40:26,000 --> 01:40:28,000
它的要求会变得越来越严格

3259
01:40:28,000 --> 01:40:30,000
然后比如说像现在的一些

3260
01:40:30,000 --> 01:40:33,000
harden 的一些 Runtime 的一些各种限制

3261
01:40:33,000 --> 01:40:36,000
你必须得启动了这些安全保护之后

3262
01:40:36,000 --> 01:40:39,000
它才给你通过这么一个公认

3263
01:40:39,000 --> 01:40:43,000
然后所以说它会能够主动的去控制

3264
01:40:43,000 --> 01:40:44,000
去鞭策开发者

3265
01:40:44,000 --> 01:40:46,000
你赶快把这些新的安全特性都给我做上

3266
01:40:46,000 --> 01:40:47,000
要不是的话

3267
01:40:47,000 --> 01:40:50,000
你就别大家就用起来会很麻烦

3268
01:40:50,000 --> 01:40:51,000
然后另外一方面的话

3269
01:40:51,000 --> 01:40:53,000
就是可能会考虑到

3270
01:40:53,000 --> 01:40:55,000
有些开发者他偶然发了一个版本

3271
01:40:55,000 --> 01:40:57,000
那个版本是带有恶意软件的

3272
01:40:57,000 --> 01:40:59,000
或者是他有什么样严重漏洞的

3273
01:41:00,000 --> 01:41:01,000
不用把赠述的杀掉

3274
01:41:01,000 --> 01:41:02,000
只能干掉那个版本就可以了

3275
01:41:03,000 --> 01:41:04,000
你把赠述一杀掉

3276
01:41:04,000 --> 01:41:06,000
这个可能影响的效果

3277
01:41:06,000 --> 01:41:07,000
那个就可能是威力太大了

3278
01:41:07,000 --> 01:41:08,000
比如说 Google

3279
01:41:08,000 --> 01:41:11,000
假如说 Core 的某个版本带来不小心带来个恶意包

3280
01:41:11,000 --> 01:41:12,000
你这把 Google 的赠述一杀

3281
01:41:12,000 --> 01:41:14,000
这个感觉这个互联网可能都会炸了

3282
01:41:14,000 --> 01:41:17,000
公正是解决就是说是那种

3283
01:41:17,000 --> 01:41:19,000
不是这些开发者主观故意

3284
01:41:19,000 --> 01:41:20,000
而是因为疏忽

3285
01:41:20,000 --> 01:41:22,000
或者是因为一些什么原因

3286
01:41:22,000 --> 01:41:23,000
别的原因导致说

3287
01:41:23,000 --> 01:41:25,000
他某一个版本的 APP 有问题

3288
01:41:25,000 --> 01:41:28,000
但是整个开发者赠述还是安全的

3289
01:41:28,000 --> 01:41:31,000
对我觉得应该这个应该是这样

3290
01:41:31,000 --> 01:41:32,000
我理解就是说 Notarising

3291
01:41:32,000 --> 01:41:34,000
还有一个作用就是说

3292
01:41:34,000 --> 01:41:35,000
因为我们知道

3293
01:41:36,000 --> 01:41:38,000
并不是所有的这个 Mac 上面的用程序

3294
01:41:38,000 --> 01:41:40,000
都是通过这个 Mac App Store 翻发

3295
01:41:40,000 --> 01:41:42,000
其实我们用的大部分第三方的软件

3296
01:41:42,000 --> 01:41:46,000
都不是通过这个 Mac App Store 发布的

3297
01:41:46,000 --> 01:41:50,000
所以苹果是不知道你的这个 APP 到底有

3298
01:41:50,000 --> 01:41:52,000
它没有机会知道

3299
01:41:52,000 --> 01:41:53,000
你下载的这个第三方 APP

3300
01:41:53,000 --> 01:41:54,000
到底有没有包含恶意程序

3301
01:41:54,000 --> 01:41:56,000
就是哪怕他知道他也没法去对比

3302
01:41:56,000 --> 01:41:57,000
因为他不知道你电脑装了什么东西

3303
01:41:58,000 --> 01:42:01,000
那么通过这个 Notarising 公正的机制

3304
01:42:01,000 --> 01:42:05,000
他其实是强迫开发者必须上传一份到他那去留档

3305
01:42:06,000 --> 01:42:08,000
然后他发现这个恶意版本之后

3306
01:42:08,000 --> 01:42:10,000
他可以直接跟从他的库里面去比对说

3307
01:42:11,000 --> 01:42:13,000
这个版本是否在我这里公正过

3308
01:42:13,000 --> 01:42:14,000
如果被公正过

3309
01:42:14,000 --> 01:42:16,000
他就有可能被分发到其他地方去

3310
01:42:16,000 --> 01:42:18,000
那我可以通过公正书后的那个时候

3311
01:42:18,000 --> 01:42:19,000
那个时候 Ticket 对吧

3312
01:42:19,000 --> 01:42:22,000
来查到说他在哪些这个 Mac 上用过

3313
01:42:22,000 --> 01:42:26,000
我可以去估算这个安全问题的影响范围

3314
01:42:26,000 --> 01:42:27,000
没错

3315
01:42:27,000 --> 01:42:29,000
甚至我也可以直接去拿到这一份之后

3316
01:42:29,000 --> 01:42:31,000
我好去分析他的代码

3317
01:42:31,000 --> 01:42:34,000
他到底是干了什么样的一些坏事

3318
01:42:34,000 --> 01:42:37,000
所以是通过这个机制解决了 Mac App Store

3319
01:42:37,000 --> 01:42:39,000
就是应商店提供的一种安全特性

3320
01:42:39,000 --> 01:42:40,000
但是又不需要强制

3321
01:42:40,000 --> 01:42:43,000
大家都必须通过应商店去开发程序

3322
01:42:44,000 --> 01:42:45,000
对没错

3323
01:42:45,000 --> 01:42:48,000
目前这两重机制上一个是在用户

3324
01:42:48,000 --> 01:42:49,000
开发者账号这个层面

3325
01:42:49,000 --> 01:42:51,000
一个是在每个单个应用层面

3326
01:42:51,000 --> 01:42:52,000
双重保护机制

3327
01:42:52,000 --> 01:42:53,000
这个都是属于这个叫什么

3328
01:42:53,000 --> 01:42:55,000
Gatekeeper 那个要管的事情

3329
01:42:56,000 --> 01:42:59,000
就这个来看目前 Mac 上面的整个安全性还是

3330
01:42:59,000 --> 01:43:01,000
还是比较有保障的对吧

3331
01:43:01,000 --> 01:43:03,000
因为这个事情我印象特别深刻

3332
01:43:03,000 --> 01:43:04,000
你知道就是在那个

3333
01:43:04,000 --> 01:43:07,000
你知道在中国你要用那个网银

3334
01:43:07,000 --> 01:43:08,000
其实现在做消费的端

3335
01:43:08,000 --> 01:43:09,000
基本上都是用手机银行

3336
01:43:09,000 --> 01:43:10,000
没有太大的一个问题

3337
01:43:10,000 --> 01:43:12,000
都会通过这个 App Store 那个

3338
01:43:12,000 --> 01:43:13,000
你只要不做阅誉

3339
01:43:13,000 --> 01:43:15,000
不做几个什么这个事情

3340
01:43:15,000 --> 01:43:17,000
都还是能够保证你的安全的

3341
01:43:17,000 --> 01:43:19,000
但是在那个企业银行

3342
01:43:19,000 --> 01:43:22,000
你还是要用那个所谓 Windows 的那个

3343
01:43:22,000 --> 01:43:22,000
那个程序

3344
01:43:22,000 --> 01:43:25,000
然后去下那个银行的那个客户端吧

3345
01:43:26,000 --> 01:43:27,000
然后非常搞笑的就是

3346
01:43:27,000 --> 01:43:28,000
那些客户端的安装程序

3347
01:43:29,000 --> 01:43:29,000
我看了一下

3348
01:43:29,000 --> 01:43:33,000
十有八九是通过 HGDP 名闻去传输的

3349
01:43:33,000 --> 01:43:34,000
而且他下回来那个东西

3350
01:43:34,000 --> 01:43:37,000
他 Windows 上也是有签名的这个机制的

3351
01:43:37,000 --> 01:43:37,000
对吧

3352
01:43:37,000 --> 01:43:39,000
但是你看他都是未知开发者

3353
01:43:40,000 --> 01:43:43,000
就感觉这些安全数量还是有一个

3354
01:43:43,000 --> 01:43:45,000
需要极大的提高的各个方面

3355
01:43:45,000 --> 01:43:48,000
安全数量实际上是需要厂商来倒逼的

3356
01:43:48,000 --> 01:43:52,000
我觉得在倒逼开发者做到比较安全

3357
01:43:52,000 --> 01:43:54,000
这一点上苹果实际上是业界先锋

3358
01:43:55,000 --> 01:43:57,000
没错苹果特别能逼开发者

3359
01:43:57,000 --> 01:43:58,000
我感觉不可能说

3360
01:43:58,000 --> 01:44:01,000
因为我们下一个 Windows 10 的什么某一个版本更新

3361
01:44:02,000 --> 01:44:03,000
然后强行加一个安全选项

3362
01:44:03,000 --> 01:44:07,000
默认你如果是未知开发者就没有通过签名的

3363
01:44:07,000 --> 01:44:08,000
我根本就不给你运行

3364
01:44:08,000 --> 01:44:10,000
他根本就不敢加这种选项

3365
01:44:10,000 --> 01:44:10,000
对不对

3366
01:44:11,000 --> 01:44:11,000
地球就炸了

3367
01:44:11,000 --> 01:44:14,000
这种事业只有苹果现在能够推得动

3368
01:44:14,000 --> 01:44:16,000
其他人好像不敢

3369
01:44:16,000 --> 01:44:18,000
对就说这个安全性我觉得还是

3370
01:44:18,000 --> 01:44:20,000
还是有比较好的保障的

3371
01:44:20,000 --> 01:44:21,000
只是说在实现细节上

3372
01:44:21,000 --> 01:44:22,000
我觉得确实还有很多

3373
01:44:23,000 --> 01:44:24,000
刚才我们讨论了很多比较

3374
01:44:25,000 --> 01:44:27,000
简单的就可以改进的空间

3375
01:44:27,000 --> 01:44:30,000
那其实还是可以更好的避免出现

3376
01:44:30,000 --> 01:44:32,000
我们今天讨论的各种各样的问题

3377
01:44:32,000 --> 01:44:36,000
对但其实讨论的话有两个方面

3378
01:44:36,000 --> 01:44:38,000
一个方面的话就刚刚我们说的隐私问题

3379
01:44:38,000 --> 01:44:41,000
另外一个方面他们大家会有一种感觉就是

3380
01:44:41,000 --> 01:44:43,000
就是像你最早一篇文章的标题

3381
01:44:43,000 --> 01:44:45,000
Your computer isn't yours

3382
01:44:45,000 --> 01:44:47,000
你的电脑不是你的

3383
01:44:47,000 --> 01:44:50,000
那我是否是我这个用户上伺了

3384
01:44:50,000 --> 01:44:52,000
我对我的设备的完全的控制权这么一件事情

3385
01:44:52,000 --> 01:44:54,000
技术经营这个圈子里面说我说你

3386
01:44:54,000 --> 01:44:56,000
或者说我们说说你懂安全这个东西

3387
01:44:56,000 --> 01:44:58,000
你知道怎么回事你会觉得

3388
01:44:58,000 --> 01:45:01,000
我不应该把这些信息都泄露给苹果

3389
01:45:01,000 --> 01:45:04,000
但是其实从我觉得其实从普通人的角度来讲

3390
01:45:04,000 --> 01:45:06,000
普通人是没有这个能力去分辨这些细节的

3391
01:45:06,000 --> 01:45:09,000
必须要有一个了解这个事情的厂商

3392
01:45:09,000 --> 01:45:11,000
他信得过的这个厂商去完成这个事情

3393
01:45:12,000 --> 01:45:13,000
如果这个世界上还有什么大企业

3394
01:45:13,000 --> 01:45:15,000
可以让你相信的话

3395
01:45:15,000 --> 01:45:19,000
可能苹果上面属于屈指可数的几个之一

3396
01:45:19,000 --> 01:45:19,000
应该是

3397
01:45:20,000 --> 01:45:22,000
这句话是非常深刻的一个果粉

3398
01:45:22,000 --> 01:45:25,000
只有最古字里的果粉才会说出来

3399
01:45:27,000 --> 01:45:31,000
其实就是从普通人心里也可能还是能理解的

3400
01:45:31,000 --> 01:45:32,000
就是我买了台电脑

3401
01:45:32,000 --> 01:45:32,000
这是我的电脑

3402
01:45:32,000 --> 01:45:33,000
我想运行什么程序

3403
01:45:33,000 --> 01:45:35,000
你苹果凭什么有权限插手说

3404
01:45:35,000 --> 01:45:36,000
你不让我运行它

3405
01:45:36,000 --> 01:45:38,000
只是可以理解这种心理

3406
01:45:38,000 --> 01:45:40,000
当然我不认同这样的说法

3407
01:45:40,000 --> 01:45:43,000
但是我从一个魔鬼带来人的角度来说

3408
01:45:43,000 --> 01:45:44,000
我要反驳的话

3409
01:45:44,000 --> 01:45:46,000
我说那你实际上你开的车也是一样的

3410
01:45:46,000 --> 01:45:49,000
虽然你的车不能左右你

3411
01:45:49,000 --> 01:45:51,000
能去哪不能去哪

3412
01:45:51,000 --> 01:45:53,000
但实际上你的车买回来之后

3413
01:45:53,000 --> 01:45:54,000
你自己也是修不了的

3414
01:45:54,000 --> 01:45:58,000
就别说你可能能换一些换一些内饰

3415
01:45:58,000 --> 01:45:59,000
但 that's it

3416
01:45:59,000 --> 01:46:02,000
就是现在包括很多 4 s 电

3417
01:46:02,000 --> 01:46:03,000
都是修不了你的车的

3418
01:46:04,000 --> 01:46:05,000
改车是违法的

3419
01:46:05,000 --> 01:46:06,000
中国是不能上路的

3420
01:46:07,000 --> 01:46:08,000
对是的

3421
01:46:08,000 --> 01:46:11,000
这个法规的倒在其次

3422
01:46:11,000 --> 01:46:11,000
就很多 4 s 电

3423
01:46:11,000 --> 01:46:13,000
也实际上也是修不了你的车的

3424
01:46:13,000 --> 01:46:16,000
你比如说现在奥迪或者是宝马之类的车

3425
01:46:16,000 --> 01:46:17,000
你到 4 s 电

3426
01:46:17,000 --> 01:46:18,000
你说我的车有什么问题

3427
01:46:18,000 --> 01:46:19,000
他帮你测一下

3428
01:46:19,000 --> 01:46:22,000
他能做的就是把你换那个零件寄回去

3429
01:46:22,000 --> 01:46:23,000
然后换一个新的过来

3430
01:46:23,000 --> 01:46:23,000
that's it

3431
01:46:24,000 --> 01:46:29,000
他已经失去了能够帮你维修车辆的这样一个作用了

3432
01:46:29,000 --> 01:46:34,000
我觉得这本质上是一个权力和责任的一个分摊的问题

3433
01:46:34,000 --> 01:46:35,000
就是说没错

3434
01:46:35,000 --> 01:46:37,000
如果从绝对的说我要有自主权的情况下

3435
01:46:37,000 --> 01:46:41,000
美国不在意也得讲什么叫做 right to repair

3436
01:46:41,000 --> 01:46:43,000
就好像是那些美国农民都比较强势

3437
01:46:43,000 --> 01:46:45,000
他要买什么高级的拖拉机

3438
01:46:45,000 --> 01:46:46,000
他坏了他要修对吧

3439
01:46:46,000 --> 01:46:51,000
他说他拖拉机要送去 John Deere 原厂再修再给他发回来

3440
01:46:51,000 --> 01:46:53,000
那这个作物就烂在地里了

3441
01:46:53,000 --> 01:46:54,000
这明显是不可以接受的

3442
01:46:54,000 --> 01:46:54,000
对吧

3443
01:46:55,000 --> 01:46:56,000
我觉得完全是可以理解的

3444
01:46:56,000 --> 01:46:58,000
但是其实像你说像那种对于普通来说

3445
01:46:58,000 --> 01:47:02,000
你说一个电脑或者说一个手机对吧

3446
01:47:02,000 --> 01:47:04,000
你就如果突然不能用的话

3447
01:47:04,000 --> 01:47:07,000
你对你来说好像也没有那么大的一个一个损失

3448
01:47:07,000 --> 01:47:08,000
但是更主要的就是说

3449
01:47:08,000 --> 01:47:11,000
如果厂商说允许开放很多接口

3450
01:47:11,000 --> 01:47:12,000
让你去做一些底层的修改

3451
01:47:12,000 --> 01:47:14,000
或者马上像苹果这次

3452
01:47:14,000 --> 01:47:16,000
他说给到一个选项可以让你 opt out

3453
01:47:16,000 --> 01:47:18,000
可以放弃这些安全保护

3454
01:47:18,000 --> 01:47:19,000
但最终你被黑了

3455
01:47:19,000 --> 01:47:21,000
你的资产被盗了

3456
01:47:21,000 --> 01:47:23,000
或者说假设你前面有一千个比太币

3457
01:47:23,000 --> 01:47:24,000
假设备确认

3458
01:47:24,000 --> 01:47:26,000
然后你就把这个安全桥关掉

3459
01:47:26,000 --> 01:47:28,000
然后你说你别别别偷偷你怪谁呢

3460
01:47:28,000 --> 01:47:30,000
你还是会去怪苹果对不对

3461
01:47:30,000 --> 01:47:32,000
你说你这个安全做的怎么这么早

3462
01:47:32,000 --> 01:47:33,000
那这个时候就就你就明显就是说

3463
01:47:33,000 --> 01:47:35,000
你的权利和责任是没有对等的

3464
01:47:35,000 --> 01:47:38,000
对于绝大多数这种不是那么懂技术的

3465
01:47:38,000 --> 01:47:42,000
也不知道那些安全措施应该如何去日常进行的

3466
01:47:42,000 --> 01:47:44,000
哪怕是说对于我们这种懂行的人

3467
01:47:44,000 --> 01:47:46,000
你每天要去想各种各样的安全措施

3468
01:47:46,000 --> 01:47:48,000
各种各样的牺牲各种各样的便利

3469
01:47:48,000 --> 01:47:49,000
你也很心累

3470
01:47:49,000 --> 01:47:51,000
就是我觉得从日常水来讲

3471
01:47:51,000 --> 01:47:53,000
你还是我愿意放弃一些

3472
01:47:54,000 --> 01:47:56,000
所谓的我自己的一些权利去换取

3473
01:47:56,000 --> 01:47:58,000
说有人去帮我 take care

3474
01:47:58,000 --> 01:47:59,000
有人把这个事情给我搞定

3475
01:47:59,000 --> 01:48:03,000
我甚至愿意为此付出更高的价格

3476
01:48:03,000 --> 01:48:05,000
这就是这个溢价的地方在这里

3477
01:48:05,000 --> 01:48:06,000
那为什么我现在不想去用安卓

3478
01:48:06,000 --> 01:48:08,000
不想用 windows

3479
01:48:08,000 --> 01:48:09,000
你说安卓不好用吗

3480
01:48:09,000 --> 01:48:10,000
其实也不是

3481
01:48:10,000 --> 01:48:11,000
安卓都做得挺好的对不对

3482
01:48:11,000 --> 01:48:13,000
windows 也跑得很流畅

3483
01:48:13,000 --> 01:48:13,000
都没有问题

3484
01:48:13,000 --> 01:48:15,000
但我还是不想用

3485
01:48:15,000 --> 01:48:18,000
就是因为我觉得没有人去帮我盯这一块

3486
01:48:18,000 --> 01:48:20,000
对所以我觉得还是要一些成年人的想法

3487
01:48:20,000 --> 01:48:23,000
就是说你的权利和责任始终是最等的

3488
01:48:23,000 --> 01:48:24,000
对是的

3489
01:48:24,000 --> 01:48:25,000
而且我觉得还有个底线

3490
01:48:25,000 --> 01:48:27,000
就是如果你真的觉得你要是你的

3491
01:48:27,000 --> 01:48:30,000
其实你现在也是有办法的

3492
01:48:30,000 --> 01:48:32,000
虽然麻烦一点进恢复模式把 SIP 关了

3493
01:48:32,000 --> 01:48:33,000
把各种东西改了

3494
01:48:33,000 --> 01:48:35,000
也能够绕过这个限制

3495
01:48:35,000 --> 01:48:36,000
裸奔去的

3496
01:48:36,000 --> 01:48:38,000
对你也是能够

3497
01:48:38,000 --> 01:48:39,000
甚至不行你把 macOS 删了是吧

3498
01:48:39,000 --> 01:48:40,000
你装个 windows

3499
01:48:40,000 --> 01:48:42,000
那也是你的 macbook 也能用

3500
01:48:42,000 --> 01:48:44,000
就不要买 mac 吧

3501
01:48:44,000 --> 01:48:45,000
装个零碳就是买个 PC

3502
01:48:45,000 --> 01:48:47,000
多好又便宜又好用

3503
01:48:47,000 --> 01:48:49,000
对对对那篇文章的一个论点就是

3504
01:48:49,000 --> 01:48:52,000
你在 M 1 Mac 出来之前

3505
01:48:52,000 --> 01:48:53,000
你是可以选择

3506
01:48:53,000 --> 01:48:54,000
比如说我装个 Linux

3507
01:48:54,000 --> 01:48:55,000
我装 wubuntu 都是可以的对吧

3508
01:48:55,000 --> 01:48:57,000
这个硬件上面我装什么操作器

3509
01:48:57,000 --> 01:48:58,000
我是完全 OK 的

3510
01:48:58,000 --> 01:49:00,000
但是从 M 1 Mac 之后

3511
01:49:00,000 --> 01:49:01,000
你除了装 macOS 之外

3512
01:49:01,000 --> 01:49:02,000
没有办法装别的了

3513
01:49:02,000 --> 01:49:03,000
但你可以不用买 mac

3514
01:49:03,000 --> 01:49:05,000
没有人逼着你买 mac

3515
01:49:05,000 --> 01:49:05,000
对不对

3516
01:49:05,000 --> 01:49:06,000
所以这个也很扯

3517
01:49:06,000 --> 01:49:09,000
对是而且现在好像据说

3518
01:49:09,000 --> 01:49:12,000
苹果也在考虑正在和搞开放出来

3519
01:49:12,000 --> 01:49:14,000
M 1 的设备也能装起来操作系统

3520
01:49:14,000 --> 01:49:16,000
但是这可能就是一个比较大的工程

3521
01:49:16,000 --> 01:49:18,000
问题是谁谁会去适配微软

3522
01:49:18,000 --> 01:49:21,000
无论做一个把 Windows ARM 移植过来

3523
01:49:21,000 --> 01:49:24,000
我觉得 Linux 一定会出一个

3524
01:49:24,000 --> 01:49:26,000
M 1 或者说 Apple Silicon 的版本

3525
01:49:26,000 --> 01:49:28,000
我觉得无缘也不是没有可能

3526
01:49:28,000 --> 01:49:31,000
现在无缘不是苹果的最佳合作伙伴开发者

3527
01:49:33,000 --> 01:49:34,000
无缘它现在是它的 ARM

3528
01:49:34,000 --> 01:49:36,000
生态是依赖高通

3529
01:49:36,000 --> 01:49:37,000
高通不是出了

3530
01:49:37,000 --> 01:49:38,000
它最近是发了一个什么来的

3531
01:49:38,000 --> 01:49:40,000
X 吧还是 Pro X

3532
01:49:40,000 --> 01:49:42,000
就是 SurfaceBook 还是 Surface

3533
01:49:42,000 --> 01:49:43,000
就叫 Surface

3534
01:49:43,000 --> 01:49:45,000
就是也是一个那个

3535
01:49:45,000 --> 01:49:48,000
就它露眼自己那套那个就是两用的那个

3536
01:49:48,000 --> 01:49:49,000
那个变形变形电脑

3537
01:49:49,000 --> 01:49:51,000
它就好像用的是高通的那个处理器

3538
01:49:52,000 --> 01:49:54,000
但是你看现在苹果如果能够把其他厂商

3539
01:49:54,000 --> 01:49:56,000
打成这样的话

3540
01:49:56,000 --> 01:49:59,000
那微软之后会不会也觉得就那干脆硬件上

3541
01:49:59,000 --> 01:50:02,000
我觉得应该也把我也来加足苹果的这个 ARM

3542
01:50:02,000 --> 01:50:03,000
生态

3543
01:50:03,000 --> 01:50:05,000
对反正我又不卖我又不靠卖硬件赚钱对吧

3544
01:50:05,000 --> 01:50:08,000
我就卖卖软件然后不过我能够在

3545
01:50:08,000 --> 01:50:11,000
这个 M 1 的 Mac 跑那何乐而不为呢

3546
01:50:11,000 --> 01:50:12,000
对啊是也是有可能的

3547
01:50:13,000 --> 01:50:15,000
这个世界太 crazy 了

3548
01:50:15,000 --> 01:50:17,000
你 10 年前都不敢想象说

3549
01:50:18,000 --> 01:50:21,000
啊这个还要去给苹果

3550
01:50:21,000 --> 01:50:22,000
试配一下系统

3551
01:50:22,000 --> 01:50:23,000
这什么情况呢

3552
01:50:23,000 --> 01:50:26,000
说到 10 年前 10 年前那个 Windows guy

3553
01:50:26,000 --> 01:50:27,000
这次又出来了

3554
01:50:27,000 --> 01:50:30,000
在苹果发布会上啊对对

3555
01:50:30,000 --> 01:50:34,000
是那个 PC vs Mac 的广告里面那个 PC 吗

3556
01:50:34,000 --> 01:50:36,000
对稍微有点发胖

3557
01:50:36,000 --> 01:50:40,000
但是还是风采不仅当年我有读过一个报道

3558
01:50:40,000 --> 01:50:41,000
就说这个广告里面两个人

3559
01:50:41,000 --> 01:50:44,000
就是这个这个 Windows guy 实际上是一个

3560
01:50:44,000 --> 01:50:46,000
呃是一个 Mac 的铁粉

3561
01:50:47,000 --> 01:50:50,000
而那个 Mac guy 实际上对电脑一窍不通

3562
01:50:51,000 --> 01:50:52,000
可能是个 Windows 用户对吧

3563
01:50:52,000 --> 01:50:55,000
哈哈哈哈对对

3564
01:50:55,000 --> 01:50:56,000
这个才是真的果粉啊

3565
01:50:56,000 --> 01:50:59,000
为了愿意这个支持这个

3566
01:50:59,000 --> 01:51:02,000
然后牺牲自己来来出演这个幻影

3567
01:51:02,000 --> 01:51:03,000
牺牲自己的形象啊

3568
01:51:03,000 --> 01:51:05,000
那好了换取苹果的高达

3569
01:51:05,000 --> 01:51:07,000
那也换取了一些美元我觉得

3570
01:51:07,000 --> 01:51:09,000
主要是美元比较像

3571
01:51:09,000 --> 01:51:10,000
那是肯定的

3572
01:51:12,000 --> 01:51:13,000
OK

3573
01:51:13,000 --> 01:51:14,000
那好啊

3574
01:51:14,000 --> 01:51:16,000
那今天我们就这个

3575
01:51:16,000 --> 01:51:19,000
对苹果的 M 1 芯片和这个 LCSP 的问题

3576
01:51:19,000 --> 01:51:21,000
展开了这个生日完毕后的讨论

3577
01:51:21,000 --> 01:51:24,000
哈哈那也非常感谢

3578
01:51:24,000 --> 01:51:26,000
雅成来我们这个节目做客啊

3579
01:51:26,000 --> 01:51:27,000
感谢两位的邀请

3580
01:51:27,000 --> 01:51:28,000
我们这还有机会的话

3581
01:51:28,000 --> 01:51:30,000
雅成也可以常来我们节目

3582
01:51:30,000 --> 01:51:32,000
再聊聊其他的一些事情

3583
01:51:32,000 --> 01:51:34,000
我们可以比如说聊聊主题开发者呀

3584
01:51:34,000 --> 01:51:36,000
来聊 serge 啊之类的事情

3585
01:51:36,000 --> 01:51:39,000
行好的还是感觉有很多蛋可以扯的

3586
01:51:39,000 --> 01:51:40,000
对对对

3587
01:51:40,000 --> 01:51:43,000
那好我们今天的节目就先到这里了

3588
01:52:10,000 --> 01:52:12,000
文明崔耕从你做起

3589
01:52:12,000 --> 01:52:13,000
如果您觉得意犹未尽

3590
01:52:13,000 --> 01:52:15,000
也欢迎您去收听

3591
01:52:15,000 --> 01:52:16,000
Rail 和黄菡姐主持的节目

3592
01:52:16,000 --> 01:52:17,000
风头圈

3593
01:52:17,000 --> 01:52:19,000
Rail 和任宁主持的节目

3594
01:52:19,000 --> 01:52:21,000
提前怀旧以及基本不由物条主持人

3595
01:52:21,000 --> 01:52:22,000
自谈自唱

3596
01:52:22,000 --> 01:52:23,000
拜拜

3597
01:52:23,000 --> 01:52:24,000
拜拜

