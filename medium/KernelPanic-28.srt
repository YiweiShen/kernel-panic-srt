1
00:00:00,000 --> 00:00:03,000
欢迎收听 ipnpodcast 网络写下的 IT 技术主题娱乐节目

2
00:00:03,000 --> 00:00:04,000
内核恐慌

3
00:00:04,000 --> 00:00:05,000
我们号称 hardcore

4
00:00:05,000 --> 00:00:06,000
但是也没有干货

5
00:00:06,000 --> 00:00:07,000
想听的人听

6
00:00:07,000 --> 00:00:08,000
不想听的人就别听

7
00:00:08,000 --> 00:00:11,000
本节目的网址是 kernelpanic.fm

8
00:00:11,000 --> 00:00:13,000
我们推荐大家使用 podcast 客户端订阅我们的节目

9
00:00:13,000 --> 00:00:17,000
详情请访问 ipn.li.faq

10
00:00:17,000 --> 00:00:18,000
欢迎你为本节目捐款

11
00:00:18,000 --> 00:00:22,000
捐款地址是 kernelpanic.fm.donate

12
00:00:22,000 --> 00:00:23,000
捐款金额随意

13
00:00:23,000 --> 00:00:25,000
只要是 8 的正常数倍就可以

14
00:00:25,000 --> 00:00:27,000
捐款不会为你带来什么

15
00:00:27,000 --> 00:00:28,000
不捐也不会为你失去什么

16
00:00:29,000 --> 00:00:31,000
这句话三号好像成了个密码

17
00:00:31,000 --> 00:00:34,000
你们上去 IT 公众里面为什么又插出一句话

18
00:00:34,000 --> 00:00:35,000
非常突兀我觉得

19
00:00:37,000 --> 00:00:38,000
anyway

20
00:00:38,000 --> 00:00:40,000
我们的口号是

21
00:00:40,000 --> 00:00:44,000
It's easier to port a shell than a shell script

22
00:00:44,000 --> 00:00:45,000
from level one

23
00:00:48,000 --> 00:00:50,000
所以我们这一期又有主题了

24
00:00:51,000 --> 00:00:52,000
不过在进入主题之前

25
00:00:52,000 --> 00:00:56,000
我们先来做一下上一期的听众反馈

26
00:00:56,000 --> 00:00:58,000
首先是我们的热心听众

27
00:00:59,000 --> 00:01:00,000
Chad Law 先生

28
00:01:00,000 --> 00:01:05,000
远在澳大利亚为我们写来的听众反馈

29
00:01:05,000 --> 00:01:05,000
说

30
00:01:06,000 --> 00:01:07,000
二位前辈好

31
00:01:07,000 --> 00:01:09,000
第 27 期提到的用 QQ 发来码的问题

32
00:01:10,000 --> 00:01:12,000
二位似乎在疑惑什么场景需要这么做

33
00:01:12,000 --> 00:01:15,000
一个典型的例子就是 group assignment

34
00:01:15,000 --> 00:01:16,000
虽然我本科不在国内

35
00:01:16,000 --> 00:01:18,000
不了解国内院校的细节

36
00:01:18,000 --> 00:01:19,000
不过如果不用 git

37
00:01:19,000 --> 00:01:20,000
而且没有退而求其次

38
00:01:20,000 --> 00:01:23,000
使用丢丢盒等同步盘的话

39
00:01:24,000 --> 00:01:25,000
组员共享

40
00:01:25,000 --> 00:01:26,000
这是什么东西

41
00:01:28,000 --> 00:01:32,000
这是婉营教会我使用的 job box 的泥尘

42
00:01:32,000 --> 00:01:33,000
丢丢

43
00:01:36,000 --> 00:01:40,000
组员共享代码就只有使用 QQ 这种门槛叫 b 的方式

44
00:01:40,000 --> 00:01:44,000
然而即使在国外效果情况也不能说理想

45
00:01:44,000 --> 00:01:46,000
我校虽然有顶级大牛

46
00:01:46,000 --> 00:01:52,000
本科毕设就是给 GHC 添加 LMVM 扣端

47
00:01:52,000 --> 00:01:54,000
也还是有人不会用 git

48
00:01:54,000 --> 00:01:56,000
做 group assignment 的时候

49
00:01:56,000 --> 00:02:01,000
把代码从自己的 Eclipse 拷贝到 bitbucket 的网页编辑器

50
00:02:01,000 --> 00:02:04,000
不经意间就三番五次覆盖掉别人的成果

51
00:02:05,000 --> 00:02:06,000
以我一介本科生的潜见

52
00:02:06,000 --> 00:02:08,000
这大概与计算机课程覆盖面太广

53
00:02:08,000 --> 00:02:10,000
与其他学科相比

54
00:02:11,000 --> 00:02:13,000
烧线系统性也有关系

55
00:02:13,000 --> 00:02:15,000
如果以理工划分

56
00:02:15,000 --> 00:02:17,000
计算机是既有理又有功

57
00:02:17,000 --> 00:02:22,000
除了计算理论 PLT 等非常形式化理论

58
00:02:22,000 --> 00:02:23,000
理论化的东西

59
00:02:23,000 --> 00:02:25,000
也有例如 git 这样乍一看非常的脏

60
00:02:25,000 --> 00:02:29,000
但是考虑了很多因素的 best practice

61
00:02:30,000 --> 00:02:32,000
当然指望学校覆盖这么多内容也不现实

62
00:02:32,000 --> 00:02:34,000
毕竟这是一个非常依赖个人修行的行业

63
00:02:35,000 --> 00:02:37,000
主要笨结误是没有

64
00:02:37,000 --> 00:02:40,000
所以就让我想起今天我们后面要提到一个小插曲

65
00:02:41,000 --> 00:02:49,000
为什么说马农不能把马农称为软件工程师的一个原因

66
00:02:49,000 --> 00:02:52,000
programmers stop calling yourself engineers

67
00:02:52,000 --> 00:02:57,000
如果说你对这些工具流程都没有一个很

68
00:02:57,000 --> 00:02:59,000
或者说其实这怎么说

69
00:02:59,000 --> 00:03:00,000
可能要反过来讲

70
00:03:00,000 --> 00:03:04,000
像那种叫 computer science 的学校

71
00:03:04,000 --> 00:03:06,000
他可能很多人会觉得这种工具层面的东西

72
00:03:06,000 --> 00:03:09,000
跟 science 其实并没有什么太多的关系对吧

73
00:03:10,000 --> 00:03:12,000
然后他会觉得或多或少的

74
00:03:12,000 --> 00:03:14,000
会在这个层面上轻视这个东西

75
00:03:14,000 --> 00:03:17,000
因为觉得都是脏所

76
00:03:18,000 --> 00:03:20,000
他不是就是非核心的东西吗

77
00:03:20,000 --> 00:03:22,000
而且就是属于叫什么来的

78
00:03:23,000 --> 00:03:26,000
技校教的东西不应该是大学教的东西

79
00:03:26,000 --> 00:03:29,000
其实我觉得这个就不太对

80
00:03:29,000 --> 00:03:31,000
如果说你真的是想做工程的话

81
00:03:31,000 --> 00:03:34,000
你真的要做 software engineer 的话

82
00:03:34,000 --> 00:03:37,000
你很大想像一个什么传统建筑行业的

83
00:03:37,000 --> 00:03:39,000
或者建筑工程师

84
00:03:39,000 --> 00:03:43,000
因为他说他不会用那些什么那些工具

85
00:03:43,000 --> 00:03:44,000
比如说什么仪器还有量

86
00:03:45,000 --> 00:03:47,000
那种架子策汇用的那些东西对吧

87
00:03:47,000 --> 00:03:49,000
你肯定是要学这些基本的操作的

88
00:03:49,000 --> 00:03:52,000
我还记得像哪怕是学物理的话

89
00:03:52,000 --> 00:03:55,000
你才要学会用各种各样的叫什么来的

90
00:03:56,000 --> 00:03:59,000
游标卡尺或者是更高级的一些工具

91
00:03:59,000 --> 00:03:59,000
对吧

92
00:03:59,000 --> 00:04:01,000
那是高中物理

93
00:04:01,000 --> 00:04:04,000
我觉得其实物理学的分野已经很明显了

94
00:04:04,000 --> 00:04:06,000
有些理论物理学家真的是完全不做实验的

95
00:04:06,000 --> 00:04:08,000
你看那个 TBBT 里面

96
00:04:08,000 --> 00:04:10,000
Shalom 不是也一直在嘲笑 Lennard

97
00:04:10,000 --> 00:04:11,000
动手做实验

98
00:04:11,000 --> 00:04:12,000
对

99
00:04:12,000 --> 00:04:19,000
我觉得其实有理论和实践的分野的学科

100
00:04:19,000 --> 00:04:21,000
可能都会有这种多多少少的

101
00:04:21,000 --> 00:04:25,000
就是做纯理论的人会轻视需要动手做实践的人

102
00:04:25,000 --> 00:04:27,000
因为有理论就够了

103
00:04:27,000 --> 00:04:34,000
但你刚才说的那个建筑又是完全一个比较不一样的东西

104
00:04:34,000 --> 00:04:36,000
因为建筑本身就是从实践而来的

105
00:04:37,000 --> 00:04:39,000
建筑没有什么纯理论的东西

106
00:04:39,000 --> 00:04:39,000
或者说有

107
00:04:39,000 --> 00:04:42,000
但没有那么脱离现实的纯理论

108
00:04:42,000 --> 00:04:46,000
他不会研究真空中的纯球形建筑对吧

109
00:04:49,000 --> 00:04:52,000
以后我们造那个 space ship 的时候就需要考虑这个问题

110
00:04:52,000 --> 00:04:53,000
真空中的球形建筑

111
00:04:54,000 --> 00:04:54,000
不就是水滴吗

112
00:04:54,000 --> 00:04:55,000
不不是水滴

113
00:04:55,000 --> 00:04:56,000
是

114
00:04:56,000 --> 00:04:58,000
那个 Dance Star

115
00:04:58,000 --> 00:05:01,000
死星和一切人要赛

116
00:05:03,000 --> 00:05:04,000
对

117
00:05:04,000 --> 00:05:06,000
所以我的观点其实很简单

118
00:05:06,000 --> 00:05:08,000
现在也很多学校也在分这个东西

119
00:05:08,000 --> 00:05:11,000
它分计算机科学系和计算机工程系

120
00:05:11,000 --> 00:05:13,000
或者说就是软件工程系

121
00:05:13,000 --> 00:05:17,000
所以如果你们里面带有工程

122
00:05:17,000 --> 00:05:21,000
但是又不去对学生进行系统化的这种

123
00:05:21,000 --> 00:05:23,000
像这种代码管理工具的培训员

124
00:05:23,000 --> 00:05:24,000
编辑器的培训员

125
00:05:24,000 --> 00:05:26,000
IDE 的使用培训员

126
00:05:26,000 --> 00:05:28,000
你不去教这些 best practices

127
00:05:28,000 --> 00:05:31,000
我觉得你是不配去教自己是一个工程系的

128
00:05:31,000 --> 00:05:31,000
对

129
00:05:31,000 --> 00:05:32,000
这是肯定的

130
00:05:33,000 --> 00:05:34,000
但是如果你做纯理论的话

131
00:05:34,000 --> 00:05:40,000
又会觉得说学那些系统而为的工具的时间

132
00:05:40,000 --> 00:05:41,000
还是挺

133
00:05:42,000 --> 00:05:43,000
好像有点浪费

134
00:05:43,000 --> 00:05:45,000
我觉得我三号有这种印象

135
00:05:45,000 --> 00:05:47,000
就是有些学计算机的人

136
00:05:47,000 --> 00:05:48,000
他之后也不懂那些具体的工具

137
00:05:48,000 --> 00:05:50,000
乃至于学计算机科学的人

138
00:05:50,000 --> 00:05:51,000
不会修计算机

139
00:05:51,000 --> 00:05:52,000
也是因为

140
00:05:52,000 --> 00:05:53,000
就是

141
00:05:54,000 --> 00:05:55,000
他是工具吗

142
00:05:55,000 --> 00:05:58,000
太耗时间了主要是

143
00:05:59,000 --> 00:05:59,000
对

144
00:05:59,000 --> 00:06:01,000
所以我觉得就说纯理论的

145
00:06:01,000 --> 00:06:03,000
也 theoretical 的研究也好

146
00:06:03,000 --> 00:06:05,000
培训要 research

147
00:06:05,000 --> 00:06:06,000
这点完全没有问题

148
00:06:06,000 --> 00:06:08,000
但是如果说你还是指望你的毕业生

149
00:06:09,000 --> 00:06:10,000
有能够在就业市场上

150
00:06:10,000 --> 00:06:11,000
起码本科

151
00:06:11,000 --> 00:06:12,000
你说博士研究生

152
00:06:12,000 --> 00:06:15,000
你说你不去管他们的就业

153
00:06:15,000 --> 00:06:19,000
不在职场就是做满龙这个方向的就业

154
00:06:20,000 --> 00:06:21,000
其实我觉得情有可原

155
00:06:21,000 --> 00:06:26,000
但是如果说你是一个本科的教学目标

156
00:06:26,000 --> 00:06:29,000
然后你说把这些完全就踢掉不看

157
00:06:29,000 --> 00:06:30,000
我觉得其实是有问题的

158
00:06:30,000 --> 00:06:32,000
就从务实的角度来讲

159
00:06:32,000 --> 00:06:37,000
还是从对这些人的未来的就业的情态来讲

160
00:06:37,000 --> 00:06:39,000
我觉得这个是有欠考虑的

161
00:06:40,000 --> 00:06:42,000
然后如果你真的这么干了

162
00:06:42,000 --> 00:06:46,000
就不要叫自己的毕业生是 software engineer

163
00:06:46,000 --> 00:06:47,000
这种这种 title

164
00:06:47,000 --> 00:06:47,000
对

165
00:06:50,000 --> 00:06:52,000
下一则听众反馈

166
00:06:54,000 --> 00:06:55,000
他先揪了我们一个错

167
00:06:56,000 --> 00:06:59,000
上期我们提到的叫做 Let's Encrypt

168
00:07:00,000 --> 00:07:02,000
一个叫 SSL 的这么一个服务

169
00:07:03,000 --> 00:07:05,000
他的 FounderG 的 University of Michigan

170
00:07:05,000 --> 00:07:06,000
是密歇根大学

171
00:07:06,000 --> 00:07:08,000
不是密歇根州立大学

172
00:07:08,000 --> 00:07:10,000
应该是我说错了

173
00:07:10,000 --> 00:07:11,000
一是最快

174
00:07:11,000 --> 00:07:14,000
所以就美国这个学校也是挺有意思的

175
00:07:14,000 --> 00:07:15,000
它会有 Michigan State

176
00:07:15,000 --> 00:07:17,000
或者 University of Michigan

177
00:07:17,000 --> 00:07:20,000
这样两种比较坑的

178
00:07:20,000 --> 00:07:23,000
你看武汉大学和湖北大学

179
00:07:23,000 --> 00:07:25,000
就是两所大学对吧

180
00:07:25,000 --> 00:07:25,000
没有人搞混

181
00:07:25,000 --> 00:07:29,000
但是为什么密歇根

182
00:07:29,000 --> 00:07:29,000
这个是

183
00:07:30,000 --> 00:07:30,000
不是这个是

184
00:07:31,000 --> 00:07:33,000
如果可以比较应该是湖北大学

185
00:07:33,000 --> 00:07:35,000
和湖北省立大学的区别

186
00:07:37,000 --> 00:07:38,000
OK

187
00:07:40,000 --> 00:07:40,000
对

188
00:07:40,000 --> 00:07:42,000
因为没有一个城市叫做密歇根

189
00:07:42,000 --> 00:07:42,000
对

190
00:07:43,000 --> 00:07:45,000
接着念这则听众反馈

191
00:07:46,000 --> 00:07:49,000
本来只想随手回复一下小小的口误

192
00:07:50,000 --> 00:07:51,000
反正也要发邮件

193
00:07:51,000 --> 00:07:53,000
不如多说几句感想

194
00:07:53,000 --> 00:07:54,000
库哈废话

195
00:07:54,000 --> 00:07:58,000
内核恐慌我是从第一期开始听的

196
00:07:58,000 --> 00:08:01,000
追的热情不亚于追番和美剧

197
00:08:01,000 --> 00:08:02,000
这么高的评价

198
00:08:02,000 --> 00:08:04,000
真是不胜黄昆

199
00:08:05,000 --> 00:08:06,000
早晨上班

200
00:08:06,000 --> 00:08:09,000
单位和工业之间 commute 很久

201
00:08:09,000 --> 00:08:11,000
经常在路上消化各种 podcast 节目

202
00:08:12,000 --> 00:08:14,000
RT 公论和内核恐慌真是一级不落

203
00:08:14,000 --> 00:08:16,000
哎练对了

204
00:08:18,000 --> 00:08:19,000
有时候听到有意思的片段

205
00:08:19,000 --> 00:08:22,000
都是一个人戴着耳机坐在车上傻笑

206
00:08:23,000 --> 00:08:24,000
哎呀这种随身辩协

207
00:08:24,000 --> 00:08:26,000
还只能独享的愉悦

208
00:08:26,000 --> 00:08:28,000
真是弥样自豪呢

209
00:08:28,000 --> 00:08:29,000
这位同学

210
00:08:29,000 --> 00:08:32,000
你这个中毒男生的

211
00:08:32,000 --> 00:08:33,000
真的不用怀疑

212
00:08:33,000 --> 00:08:35,000
不用考虑一下临坐的感受吗

213
00:08:37,000 --> 00:08:38,000
ok 这段天

214
00:08:38,000 --> 00:08:41,000
我是从事交互交互设计行业的

215
00:08:41,000 --> 00:08:45,000
所以对设计产品 MVP 相关的话题更感兴趣

216
00:08:46,000 --> 00:08:48,000
其他片开发的内容也能接受

217
00:08:48,000 --> 00:08:51,000
之前是从 CS 转行过来的

218
00:08:51,000 --> 00:08:55,000
心里多少有点没能继续坚持走马的

219
00:08:55,000 --> 00:08:58,000
阳光大道不动摇的遗憾

220
00:08:58,000 --> 00:08:59,000
不对啊

221
00:08:59,000 --> 00:09:00,000
你这选对方向了我觉得

222
00:09:03,000 --> 00:09:05,000
于是靠听播客了解大家在干嘛

223
00:09:05,000 --> 00:09:06,000
讨论什么

224
00:09:07,000 --> 00:09:10,000
微信你看我还是很积极关注技术的安全感

225
00:09:11,000 --> 00:09:13,000
特别喜欢邀请了嘉宾的几期

226
00:09:13,000 --> 00:09:14,000
萧吉姐木姚老师

227
00:09:14,000 --> 00:09:16,000
WILLOW 还有最近的 ELDA

228
00:09:17,000 --> 00:09:19,000
感谢各位爹

229
00:09:19,000 --> 00:09:23,000
然后提供向我们学生客户的那段小说

230
00:09:24,000 --> 00:09:25,000
虽是不一样的领域

231
00:09:25,000 --> 00:09:27,000
但都会对自己思考问题

232
00:09:27,000 --> 00:09:29,000
解决问题的方式有启发

233
00:09:29,000 --> 00:09:31,000
对我来说已经很可贵了

234
00:09:31,000 --> 00:09:33,000
这个我还是蛮蛮蛮欣慰的

235
00:09:34,000 --> 00:09:35,000
接着念

236
00:09:36,000 --> 00:09:37,000
李如意这个文青

237
00:09:37,000 --> 00:09:40,000
有时候会把 i 7 公论的气氛弄成辩论会

238
00:09:41,000 --> 00:09:44,000
我隔着 WiFi 都觉得这是要剑拔弩张的

239
00:09:44,000 --> 00:09:46,000
可能是我多虑了

240
00:09:47,000 --> 00:09:48,000
这我要插话确实是多虑了

241
00:09:50,000 --> 00:09:50,000
相较而言

242
00:09:50,000 --> 00:09:53,000
内核恐慌就和谐得多

243
00:09:53,000 --> 00:09:56,000
果然程序员是天底下最可爱无害的神般存在

244
00:09:57,000 --> 00:10:00,000
有进有退有分寸还特自然

245
00:10:00,000 --> 00:10:02,000
不管怎样我还是爱你们所有人

246
00:10:02,000 --> 00:10:04,000
包括很有逼格

247
00:10:04,000 --> 00:10:06,000
括号就是褒义的

248
00:10:06,000 --> 00:10:06,000
李如意

249
00:10:07,000 --> 00:10:11,000
最后我其实我本来想说要是有靠谱湾区

250
00:10:11,000 --> 00:10:12,000
南马农

251
00:10:12,000 --> 00:10:16,000
愿意每周末出来泡个咖啡店

252
00:10:16,000 --> 00:10:19,000
图书馆做做自己想做的 side project

253
00:10:19,000 --> 00:10:22,000
觉得有个设计师一起也不赖

254
00:10:22,000 --> 00:10:23,000
请联系我

255
00:10:23,000 --> 00:10:27,000
不过我觉得这样被误解成 HR 的概率太大

256
00:10:27,000 --> 00:10:29,000
而且听上去总有

257
00:10:29,000 --> 00:10:32,000
总是不像好人有种无耻的猥琐感

258
00:10:32,000 --> 00:10:33,000
于是算了吧

259
00:10:33,000 --> 00:10:34,000
这挺好的

260
00:10:34,000 --> 00:10:34,000
我觉得挺好的

261
00:10:34,000 --> 00:10:36,000
你们自己组合

262
00:10:36,000 --> 00:10:38,000
他强调湾区南马农

263
00:10:38,000 --> 00:10:40,000
所以这应该是个魅力

264
00:10:40,000 --> 00:10:41,000
为什么一定要一定是南马农

265
00:10:41,000 --> 00:10:42,000
是不是女生

266
00:10:42,000 --> 00:10:42,000
可能

267
00:10:46,000 --> 00:10:46,000
好吧

268
00:10:47,000 --> 00:10:48,000
还是说

269
00:10:48,000 --> 00:10:50,000
诸内核恐慌

270
00:10:50,000 --> 00:10:51,000
越做越棒

271
00:10:51,000 --> 00:10:53,000
达到新闻联播的境界

272
00:10:54,000 --> 00:10:55,000
是指风雨

273
00:10:56,000 --> 00:10:59,000
当然是指风雨无阻的任性和权威性

274
00:11:00,000 --> 00:11:03,000
右眉骨你们写固定排比具模板报喜不报忧

275
00:11:06,000 --> 00:11:07,000
我这样蛮开心的

276
00:11:07,000 --> 00:11:11,000
其实这个节目能够给大家带来

277
00:11:11,000 --> 00:11:13,000
一点点快乐的时光

278
00:11:14,000 --> 00:11:15,000
然后觉得还有所启发

279
00:11:15,000 --> 00:11:17,000
其实对我个人觉得是个挺高的评价

280
00:11:18,000 --> 00:11:20,000
听起来好激动

281
00:11:20,000 --> 00:11:21,000
对

282
00:11:21,000 --> 00:11:23,000
然后我还是

283
00:11:23,000 --> 00:11:24,000
这个叫什么

284
00:11:24,000 --> 00:11:26,000
很纠结为什么只限南马农

285
00:11:27,000 --> 00:11:28,000
就没有女马农吗

286
00:11:28,000 --> 00:11:29,000
你们这是要玩

287
00:11:29,000 --> 00:11:31,000
前两天昨天我女朋友说

288
00:11:32,000 --> 00:11:34,000
维密里有一模特

289
00:11:34,000 --> 00:11:37,000
申了纽约大学去学编程了

290
00:11:37,000 --> 00:11:39,000
然后他还成立了一个基金会

291
00:11:39,000 --> 00:11:44,000
是那个黑人女孩子吗

292
00:11:44,000 --> 00:11:45,000
我没有看

293
00:11:45,000 --> 00:11:46,000
说什么长得超正

294
00:11:46,000 --> 00:11:49,000
然后一展解约去学编程

295
00:11:49,000 --> 00:11:53,000
还要每年支持 N 个女生去学编程之类的一个

296
00:11:53,000 --> 00:11:54,000
我知道

297
00:11:54,000 --> 00:11:55,000
就是那个

298
00:11:55,000 --> 00:11:56,000
他是哪个学校

299
00:11:56,000 --> 00:11:58,000
他是做 LS 开发的

300
00:11:58,000 --> 00:12:04,000
然后业余做一下维多米亚的秘密的模特身材

301
00:12:04,000 --> 00:12:06,000
超赞

302
00:12:06,000 --> 00:12:07,000
然后就是

303
00:12:07,000 --> 00:12:08,000
哇

304
00:12:08,000 --> 00:12:08,000
今天就是

305
00:12:08,000 --> 00:12:09,000
录完节目去看一下

306
00:12:09,000 --> 00:12:11,000
马农女神好不好

307
00:12:11,000 --> 00:12:12,000
这个是

308
00:12:13,000 --> 00:12:15,000
之前那个什么直播上也有一个

309
00:12:15,000 --> 00:12:17,000
也有一个模特女孩子

310
00:12:17,000 --> 00:12:18,000
好像是学排放了吧

311
00:12:18,000 --> 00:12:19,000
我记得

312
00:12:19,000 --> 00:12:21,000
然后还搞了一个创业项目

313
00:12:21,000 --> 00:12:25,000
是做一个什么订阅器来的

314
00:12:25,000 --> 00:12:26,000
我忘了

315
00:12:26,000 --> 00:12:27,000
OK

316
00:12:27,000 --> 00:12:30,000
找到那个链接加到收脑子里

317
00:12:31,000 --> 00:12:35,000
就我们只有这两期

318
00:12:35,000 --> 00:12:36,000
只有这两封反馈

319
00:12:36,000 --> 00:12:37,000
应该是

320
00:12:38,000 --> 00:12:39,000
对

321
00:12:39,000 --> 00:12:41,000
其实还有一个比较简短的

322
00:12:41,000 --> 00:12:43,000
就是有位听众给我们写信来说

323
00:12:43,000 --> 00:12:44,000
推荐一篇文章

324
00:12:44,000 --> 00:12:48,000
叫做 Programmers should stop call themselves engineers

325
00:12:48,000 --> 00:12:51,000
是来自于那个 Telegram

326
00:12:51,000 --> 00:12:52,000
The Atlantic

327
00:12:54,000 --> 00:12:56,000
报纸网站上的一篇文章

328
00:12:56,000 --> 00:12:59,000
这篇文章其实我前两周也看过了

329
00:12:59,000 --> 00:13:00,000
就是

330
00:13:00,000 --> 00:13:02,000
因为它曾经在 Hacker News 上出现

331
00:13:03,000 --> 00:13:05,000
其大意就是说

332
00:13:05,000 --> 00:13:06,000
这个

333
00:13:06,000 --> 00:13:11,000
工程师是一个非常高大上的 title

334
00:13:11,000 --> 00:13:11,000
其实

335
00:13:11,000 --> 00:13:12,000
他

336
00:13:12,000 --> 00:13:15,000
按照这篇文章的调子来说

337
00:13:15,000 --> 00:13:17,000
工程师是一个非常庄严

338
00:13:18,000 --> 00:13:22,000
一个让人可以信赖

339
00:13:22,000 --> 00:13:24,000
然后门槛非常高的这么一个 title

340
00:13:24,000 --> 00:13:28,000
而这些 tech industry

341
00:13:28,000 --> 00:13:30,000
就是我们这些搞电脑这帮人

342
00:13:30,000 --> 00:13:31,000
总是会

343
00:13:31,000 --> 00:13:33,000
总是希望把自己

344
00:13:33,000 --> 00:13:34,000
总是会使用什么

345
00:13:34,000 --> 00:13:36,000
software engineer 这种 title

346
00:13:37,000 --> 00:13:38,000
然后这样的 title

347
00:13:38,000 --> 00:13:39,000
实际上是在给 engineer 抹黑

348
00:13:39,000 --> 00:13:42,000
因为很多 software 是非常不可靠的

349
00:13:42,000 --> 00:13:43,000
就

350
00:13:43,000 --> 00:13:44,000
他原则里面有句话

351
00:13:44,000 --> 00:13:45,000
我记得就是

352
00:13:46,000 --> 00:13:48,000
许多软件服务在今天

353
00:13:48,000 --> 00:13:49,000
其实已经成了 infrastructure

354
00:13:50,000 --> 00:13:50,000
但是

355
00:13:50,000 --> 00:13:53,000
他们却远远不如传统的 infrastructure 可靠

356
00:13:53,000 --> 00:13:54,000
比如说

357
00:13:55,000 --> 00:13:56,000
对

358
00:13:56,000 --> 00:13:57,000
我其实我可以理解这种

359
00:13:57,000 --> 00:13:58,000
像他的这种说法

360
00:13:58,000 --> 00:13:59,000
比如说 Facebook

361
00:13:59,000 --> 00:14:00,000
对于很多人来说 Facebook

362
00:14:01,000 --> 00:14:02,000
或者 iMessage

363
00:14:02,000 --> 00:14:04,000
已经全都是非常

364
00:14:04,000 --> 00:14:05,000
每天离不开的东西

365
00:14:05,000 --> 00:14:05,000
但是

366
00:14:06,000 --> 00:14:07,000
就今天

367
00:14:07,000 --> 00:14:08,000
明天什么时候

368
00:14:08,000 --> 00:14:11,000
莫名其妙 Facebook 就要 outrage 一下

369
00:14:12,000 --> 00:14:13,000
什么 outrage

370
00:14:13,000 --> 00:14:14,000
outage 一下

371
00:14:14,000 --> 00:14:15,000
Twitter 也是对吧

372
00:14:16,000 --> 00:14:19,000
你很难想象在一个

373
00:14:19,000 --> 00:14:21,000
泛滥国家会一天到晚停电

374
00:14:21,000 --> 00:14:22,000
但

375
00:14:22,000 --> 00:14:25,000
早就至少 Twitter 也有一阶段就是这样

376
00:14:25,000 --> 00:14:27,000
但现在的像 Facebook

377
00:14:27,000 --> 00:14:29,000
Google 这些的 outage 基本上很少了

378
00:14:30,000 --> 00:14:30,000
对

379
00:14:30,000 --> 00:14:32,000
是相对来说是比较少

380
00:14:32,000 --> 00:14:33,000
它也不是大面积的

381
00:14:34,000 --> 00:14:34,000
对

382
00:14:35,000 --> 00:14:36,000
但我的意思就是

383
00:14:36,000 --> 00:14:38,000
从统计学的角度来看

384
00:14:38,000 --> 00:14:39,000
他们还是要比

385
00:14:39,000 --> 00:14:42,000
传统的 infrastructure 要

386
00:14:43,000 --> 00:14:45,000
要来的那么频繁一点

387
00:14:46,000 --> 00:14:46,000
那倒不一定

388
00:14:46,000 --> 00:14:47,000
我觉得

389
00:14:47,000 --> 00:14:48,000
这个看你怎么去

390
00:14:48,000 --> 00:14:49,000
你要考虑一个

391
00:14:49,000 --> 00:14:50,000
叫什么

392
00:14:50,000 --> 00:14:51,000
量级的问题

393
00:14:51,000 --> 00:14:52,000
比如说

394
00:14:52,000 --> 00:14:54,000
你见过哪一栋楼

395
00:14:55,000 --> 00:14:57,000
每天有 11 人在同时使用它

396
00:14:58,000 --> 00:14:59,000
没有吧

397
00:14:59,000 --> 00:14:59,000
好吧

398
00:15:01,000 --> 00:15:01,000
对

399
00:15:01,000 --> 00:15:03,000
所以我觉得

400
00:15:03,000 --> 00:15:05,000
你如果要考虑可靠性的话

401
00:15:05,000 --> 00:15:07,000
得考虑它的使用频次

402
00:15:07,000 --> 00:15:08,000
还有那些问题

403
00:15:09,000 --> 00:15:10,000
还有像那些

404
00:15:10,000 --> 00:15:11,000
就

405
00:15:11,000 --> 00:15:14,000
建筑的豆腐渣工程也不好

406
00:15:14,000 --> 00:15:15,000
那些也不是工程师干出来的

407
00:15:15,000 --> 00:15:16,000
对吧

408
00:15:16,000 --> 00:15:17,000
说得也是

409
00:15:17,000 --> 00:15:18,000
所以也不尽然

410
00:15:19,000 --> 00:15:19,000
好吧

411
00:15:19,000 --> 00:15:20,000
反正是一个论调

412
00:15:20,000 --> 00:15:22,000
然后大家可以去看一看这篇文章

413
00:15:22,000 --> 00:15:23,000
我觉得还行

414
00:15:23,000 --> 00:15:24,000
对

415
00:15:24,000 --> 00:15:25,000
呵呵呵呵

416
00:15:25,000 --> 00:15:25,000
OK

417
00:15:25,000 --> 00:15:28,000
现在进入我们这个新闻环节

418
00:15:28,000 --> 00:15:29,000
对

419
00:15:29,000 --> 00:15:30,000
其实就两条新闻

420
00:15:31,000 --> 00:15:31,000
对

421
00:15:31,000 --> 00:15:34,000
因为我们两个最近都没有怎么看新闻

422
00:15:34,000 --> 00:15:35,000
你忙什么

423
00:15:35,000 --> 00:15:37,000
我反正是在忙着打 Fox

424
00:15:38,000 --> 00:15:39,000
你打什么

425
00:15:40,000 --> 00:15:42,000
福社 4 刚出来的

426
00:15:42,000 --> 00:15:42,000
好吧

427
00:15:43,000 --> 00:15:44,000
那个是一个什么

428
00:15:44,000 --> 00:15:45,000
射击游戏吗

429
00:15:46,000 --> 00:15:47,000
呵呵呵呵

430
00:15:47,000 --> 00:15:48,000
射击游戏

431
00:15:48,000 --> 00:15:50,000
是个

432
00:15:51,000 --> 00:15:53,000
反乌托邦的

433
00:15:53,000 --> 00:15:55,000
这大灾难之后的

434
00:15:55,000 --> 00:15:56,000
RPG

435
00:15:56,000 --> 00:15:57,000
RPG

436
00:15:57,000 --> 00:15:58,000
史诗般的

437
00:15:58,000 --> 00:15:59,000
史诗般的游戏

438
00:15:59,000 --> 00:16:00,000
就出到 4 了

439
00:16:00,000 --> 00:16:02,000
应该差不多是这样的

440
00:16:02,000 --> 00:16:03,000
不是史诗

441
00:16:03,000 --> 00:16:04,000
应该不会出到 4

442
00:16:05,000 --> 00:16:05,000
对

443
00:16:06,000 --> 00:16:07,000
对

444
00:16:07,000 --> 00:16:09,000
所以我就是只看了两则新闻

445
00:16:09,000 --> 00:16:09,000
等一下

446
00:16:09,000 --> 00:16:10,000
你只打 Fox 还是 Fox

447
00:16:10,000 --> 00:16:15,000
你没有打 Legacy of the Void

448
00:16:16,000 --> 00:16:18,000
他们是从头前出来的

449
00:16:18,000 --> 00:16:19,000
但是迄今为止

450
00:16:19,000 --> 00:16:21,000
我刚刚只把 Legacy of the Void

451
00:16:22,000 --> 00:16:24,000
第一关玩了大概两分钟

452
00:16:24,000 --> 00:16:27,000
然后就一直在打 Fox

453
00:16:27,000 --> 00:16:28,000
好吧

454
00:16:28,000 --> 00:16:29,000
你这个叛徒

455
00:16:30,000 --> 00:16:31,000
Sorry

456
00:16:32,000 --> 00:16:32,000
你有玩吗

457
00:16:32,000 --> 00:16:33,000
我还没买

458
00:16:35,000 --> 00:16:35,000
因为最近比较忙

459
00:16:35,000 --> 00:16:37,000
然后也没空去玩游戏

460
00:16:38,000 --> 00:16:39,000
OK 讲新闻

461
00:16:39,000 --> 00:16:40,000
第一则是什么

462
00:16:40,000 --> 00:16:41,000
其实这个是旧闻了

463
00:16:42,000 --> 00:16:44,000
这是两周之前的事情

464
00:16:45,000 --> 00:16:46,000
一周多之前的事情

465
00:16:46,000 --> 00:16:47,000
不止我

466
00:16:47,000 --> 00:16:48,000
我觉得这个东西我好像

467
00:16:48,000 --> 00:16:50,000
好几个月前就已经看到过了

468
00:16:51,000 --> 00:16:52,000
What

469
00:16:53,000 --> 00:16:54,000
I think

470
00:16:54,000 --> 00:16:54,000
难道

471
00:16:54,000 --> 00:16:56,000
那 anyway

472
00:16:56,000 --> 00:16:58,000
反正这个东西也许是两周之前

473
00:16:58,000 --> 00:16:59,000
才正式有了自己的网站

474
00:16:59,000 --> 00:17:01,000
然后有了 FAQ 什么的

475
00:17:01,000 --> 00:17:02,000
OK

476
00:17:02,000 --> 00:17:03,000
对

477
00:17:03,000 --> 00:17:07,000
总之它是一个来自于 Google 的移动

478
00:17:07,000 --> 00:17:09,000
编程框架

479
00:17:10,000 --> 00:17:11,000
名字叫做 Flutter

480
00:17:11,000 --> 00:17:14,000
FLUTTER

481
00:17:15,000 --> 00:17:17,000
最大的特点

482
00:17:17,000 --> 00:17:19,000
大概就是使用 Dart language 来写

483
00:17:19,000 --> 00:17:22,000
可以支持你用 Dart language 来写

484
00:17:22,000 --> 00:17:23,000
这个

485
00:17:23,000 --> 00:17:24,000
移动短缘

486
00:17:24,000 --> 00:17:25,000
所以这样做有什么好处呢

487
00:17:30,000 --> 00:17:31,000
如果你开发安装的话

488
00:17:31,000 --> 00:17:32,000
以后也许不用写 China 了

489
00:17:32,000 --> 00:17:34,000
但是 Dart 比 Java 好吗

490
00:17:36,000 --> 00:17:37,000
我觉得还是好一些的

491
00:17:38,000 --> 00:17:39,000
因为

492
00:17:40,000 --> 00:17:42,000
有什么语言能比 Java 还长

493
00:17:43,000 --> 00:17:44,000
C++

494
00:17:44,000 --> 00:17:44,000
PHB

495
00:17:45,000 --> 00:17:46,000
PH

496
00:17:46,000 --> 00:17:47,000
Java script

497
00:17:49,000 --> 00:17:49,000
对

498
00:17:49,000 --> 00:17:52,000
但 Dart 跟 Java script

499
00:17:52,000 --> 00:17:52,000
可能

500
00:17:53,000 --> 00:17:55,000
Dart 可以 compile into JavaScript

501
00:17:55,000 --> 00:17:55,000
但

502
00:17:56,000 --> 00:17:57,000
语言不是我们的重点

503
00:17:57,000 --> 00:17:59,000
但我的意思是

504
00:18:00,000 --> 00:18:03,000
它最大的卖点就是可以使用 Java 之外的语言来写

505
00:18:03,000 --> 00:18:04,000
Android

506
00:18:04,000 --> 00:18:05,000
而且它

507
00:18:06,000 --> 00:18:10,000
它其实本质上是一个跨平台的框架

508
00:18:10,000 --> 00:18:11,000
它可以把

509
00:18:12,000 --> 00:18:16,000
写出来的程序编译成 iOS 的程序

510
00:18:17,000 --> 00:18:18,000
然后也可以

511
00:18:18,000 --> 00:18:20,000
在安卓上跑

512
00:18:20,000 --> 00:18:22,000
Windows Phone 我目前还没有印象的

513
00:18:22,000 --> 00:18:24,000
应该将来可能也会支持

514
00:18:25,000 --> 00:18:27,000
其实说到 Android

515
00:18:27,000 --> 00:18:30,000
其实用 Scala 也可以写开发这个 Android 应用

516
00:18:33,000 --> 00:18:34,000
理论上是可以的

517
00:18:34,000 --> 00:18:35,000
而且好像是有框架的

518
00:18:35,000 --> 00:18:36,000
对

519
00:18:36,000 --> 00:18:36,000
只是说

520
00:18:36,000 --> 00:18:39,000
反正你不管主规更不管周期

521
00:18:39,000 --> 00:18:40,000
不是太流行好像

522
00:18:41,000 --> 00:18:42,000
对

523
00:18:42,000 --> 00:18:47,000
然后 Flutter 也采用了一些类似于 Facebook 的

524
00:18:49,000 --> 00:18:51,000
叫什么来着 Reactive 的

525
00:18:52,000 --> 00:18:54,000
相似的设计模式

526
00:18:54,000 --> 00:18:56,000
然后可以支持你比较

527
00:18:56,000 --> 00:18:59,000
使用这种类似 Functional Reactive 的方式

528
00:18:59,000 --> 00:19:01,000
来写它的界面

529
00:19:02,000 --> 00:19:04,000
所以 Flutter 算什么

530
00:19:04,000 --> 00:19:06,000
算是 Google 的亲儿子了

531
00:19:08,000 --> 00:19:08,000
应该是吧

532
00:19:08,000 --> 00:19:09,000
看这个意思

533
00:19:09,000 --> 00:19:11,000
但是 Dart 其实一直搞不懂

534
00:19:11,000 --> 00:19:14,000
他们是到底要主推这个还是怎么样

535
00:19:14,000 --> 00:19:18,000
因为之前说是要把 Dart 做进 Chrome 里面

536
00:19:18,000 --> 00:19:20,000
就直接支持这个语言了

537
00:19:20,000 --> 00:19:22,000
但后来好像这个计划就取消了

538
00:19:22,000 --> 00:19:26,000
所以给外界的信心好像不是很足的样子

539
00:19:27,000 --> 00:19:27,000
对

540
00:19:27,000 --> 00:19:29,000
我觉得 Google 可能

541
00:19:30,000 --> 00:19:35,000
如果 GoLanguage 是亲定的后段语言的话

542
00:19:35,000 --> 00:19:37,000
前端

543
00:19:37,000 --> 00:19:41,000
或者是更比较没那么工业级别的使用的

544
00:19:41,000 --> 00:19:43,000
这种类似于脚本的更快乐

545
00:19:43,000 --> 00:19:45,000
更易于执行的语言

546
00:19:45,000 --> 00:19:45,000
应该是 Dart

547
00:19:46,000 --> 00:19:49,000
但总觉得背后的推力不够

548
00:19:49,000 --> 00:19:52,000
他没有在努力的去 PR 这件事情

549
00:19:53,000 --> 00:19:53,000
对

550
00:19:53,000 --> 00:19:54,000
所以我觉得很可能

551
00:19:54,000 --> 00:19:56,000
因为 Google 经常出这种

552
00:19:56,000 --> 00:19:57,000
觉得听起来还不错

553
00:19:57,000 --> 00:19:59,000
挺酷的一个项目

554
00:19:59,000 --> 00:20:01,000
然后它过一段时间就不推

555
00:20:01,000 --> 00:20:04,000
然后这个项目就又死翘翘了这种

556
00:20:04,000 --> 00:20:05,000
这也不是第一次了

557
00:20:05,000 --> 00:20:07,000
我觉得在 Google 这边有一个魔咒

558
00:20:07,000 --> 00:20:09,000
就是他们努力推的东西一般都不会成功

559
00:20:09,000 --> 00:20:11,000
比如 Google Plus

560
00:20:12,000 --> 00:20:13,000
或者是

561
00:20:14,000 --> 00:20:14,000
对

562
00:20:14,000 --> 00:20:15,000
或者是什么

563
00:20:15,000 --> 00:20:18,000
从之前《胎死腹中》的那个一出来

564
00:20:18,000 --> 00:20:18,000
哇哦

565
00:20:18,000 --> 00:20:19,000
所有人都惊呆了

566
00:20:19,000 --> 00:20:21,000
然后最后死掉的那个叫什么

567
00:20:22,000 --> 00:20:22,000
干嘛用的

568
00:20:23,000 --> 00:20:26,000
号称要代替电子邮件的那个东西

569
00:20:26,000 --> 00:20:26,000
Google Wave

570
00:20:28,000 --> 00:20:30,000
Google Wave 也是一顿狂推

571
00:20:30,000 --> 00:20:31,000
然后就完蛋了

572
00:20:31,000 --> 00:20:34,000
所以他们可能也学会了闷声发大财的这个

573
00:20:34,000 --> 00:20:34,000
不行

574
00:20:34,000 --> 00:20:37,000
我觉得最近这个节目里面那个哈梗太多了

575
00:20:37,000 --> 00:20:38,000
应该借一下

576
00:20:39,000 --> 00:20:39,000
然后

577
00:20:40,000 --> 00:20:41,000
然后

578
00:20:42,000 --> 00:20:44,000
不推的东西反而会慢慢活起来

579
00:20:44,000 --> 00:20:45,000
所以你看好这个吗

580
00:20:45,000 --> 00:20:46,000
这个 Flutter

581
00:20:49,000 --> 00:20:50,000
我也不查

582
00:20:50,000 --> 00:20:53,000
我现在已经没有再写过移动端的东西了

583
00:20:53,000 --> 00:20:53,000
所以

584
00:20:54,000 --> 00:20:56,000
你已经放弃做移动开发者了吗

585
00:20:57,000 --> 00:20:58,000
没有

586
00:20:58,000 --> 00:21:00,000
我还是在看 Swift 相关的东西

587
00:21:00,000 --> 00:21:02,000
你放弃安卓开发者了

588
00:21:03,000 --> 00:21:03,000
对

589
00:21:03,000 --> 00:21:04,000
好吧

590
00:21:04,000 --> 00:21:05,000
阵营不同嘛

591
00:21:05,000 --> 00:21:06,000
屁股绝对脑袋

592
00:21:06,000 --> 00:21:08,000
所以我对他没有意见

593
00:21:08,000 --> 00:21:10,000
只是让大家知道一下

594
00:21:10,000 --> 00:21:11,000
有这么一个东西是吧

595
00:21:11,000 --> 00:21:11,000
然后

596
00:21:12,000 --> 00:21:13,000
是不是坑

597
00:21:13,000 --> 00:21:14,000
明年再说

598
00:21:14,000 --> 00:21:16,000
你们可以先跳进去试试

599
00:21:16,000 --> 00:21:17,000
是不是坑你跳了告诉我

600
00:21:19,000 --> 00:21:20,000
OK 这个不错

601
00:21:21,000 --> 00:21:21,000
对

602
00:21:22,000 --> 00:21:24,000
然后这条新闻就是

603
00:21:25,000 --> 00:21:26,000
比较有意思的

604
00:21:26,000 --> 00:21:27,000
一个网站

605
00:21:28,000 --> 00:21:32,000
数字 0.3

606
00:21:32,000 --> 00:21:34,000
然后 15 个数字 0

607
00:21:34,000 --> 00:21:35,000
0.4

608
00:21:35,000 --> 00:21:37,000
对

609
00:21:37,000 --> 00:21:38,000
这个理论上

610
00:21:40,000 --> 00:21:42,000
就是你看名字其实也大概猜到了吧

611
00:21:42,000 --> 00:21:43,000
这个是讲一个 Floating point

612
00:21:43,000 --> 00:21:45,000
浮点数的一个网站

613
00:21:45,000 --> 00:21:45,000
对

614
00:21:45,000 --> 00:21:47,000
如果你遇到这个问题的话

615
00:21:47,000 --> 00:21:48,000
你一定会立刻明白

616
00:21:48,000 --> 00:21:49,000
这到底是一个什么梗

617
00:21:49,000 --> 00:21:50,000
但如果不知道的话

618
00:21:50,000 --> 00:21:51,000
欢迎你

619
00:21:52,000 --> 00:21:54,000
就是如果你旁边有手边有电脑的话

620
00:21:54,000 --> 00:21:56,000
不妨去看一看

621
00:21:56,000 --> 00:21:59,000
它是一个讲解浮点运算的网站

622
00:21:59,000 --> 00:22:00,000
就是

623
00:22:00,000 --> 00:22:02,000
在有些语言里面

624
00:22:02,000 --> 00:22:04,000
有些非常坑爹的语言里面

625
00:22:05,000 --> 00:22:09,000
如果你去计算 0.1 加 0.2 的话

626
00:22:09,000 --> 00:22:11,000
结果将会是 0.3

627
00:22:11,000 --> 00:22:13,000
跟着 15 个 0 然后 4

628
00:22:13,000 --> 00:22:14,000
对

629
00:22:14,000 --> 00:22:15,000
就是不是一个

630
00:22:16,000 --> 00:22:17,000
理想中的

631
00:22:18,000 --> 00:22:19,000
然后究其原因是为什么

632
00:22:19,000 --> 00:22:22,000
就是这篇这个网站想要告诉你的

633
00:22:22,000 --> 00:22:23,000
它来自于一个

634
00:22:24,000 --> 00:22:26,000
对

635
00:22:26,000 --> 00:22:28,000
这是他们工程界的错误

636
00:22:28,000 --> 00:22:30,000
他们工程界定了这么一个

637
00:22:30,000 --> 00:22:32,000
IEE 754 标准

638
00:22:32,000 --> 00:22:33,000
然后这个标准里面

639
00:22:33,000 --> 00:22:35,000
规定了计算机应该怎样

640
00:22:35,000 --> 00:22:37,000
二进制来表达浮点数

641
00:22:38,000 --> 00:22:40,000
表达带小数点数的非整数

642
00:22:40,000 --> 00:22:42,000
然后这个标准

643
00:22:42,000 --> 00:22:44,000
如果你严格去按照它实施的话

644
00:22:44,000 --> 00:22:46,000
你最终就会得出 0.3

645
00:22:46,000 --> 00:22:47,000
15 个 0

646
00:22:47,000 --> 00:22:48,000
然后一个 4 这种

647
00:22:48,000 --> 00:22:50,000
诡异的 0.1 加 0.2 的答案

648
00:22:50,000 --> 00:22:51,000
这是一个

649
00:22:51,000 --> 00:22:55,000
0.3 的近 4 值而非确切值

650
00:22:55,000 --> 00:22:56,000
因为你又没有办法

651
00:22:57,000 --> 00:22:59,000
在二进制的里面表示

652
00:22:59,000 --> 00:23:02,000
没办法在二进制里面精确表示 0.3

653
00:23:03,000 --> 00:23:03,000
对

654
00:23:03,000 --> 00:23:04,000
在二进制里面

655
00:23:04,000 --> 00:23:06,000
其实这是一个真的有问题

656
00:23:06,000 --> 00:23:08,000
就是你采用什么样的数字

657
00:23:08,000 --> 00:23:09,000
就会产生什么样的问题

658
00:23:09,000 --> 00:23:10,000
比如说

659
00:23:10,000 --> 00:23:12,000
如果我们采用 11 进制的话

660
00:23:12,000 --> 00:23:12,000
那

661
00:23:13,000 --> 00:23:16,000
11 分之 1 就是一个可以被表达出来的

662
00:23:16,000 --> 00:23:16,000
等一下

663
00:23:16,000 --> 00:23:18,000
如果你采用 11 进制

664
00:23:18,000 --> 00:23:20,000
只能表达 11 分之 1

665
00:23:20,000 --> 00:23:20,000
精确的吧

666
00:23:22,000 --> 00:23:22,000
对

667
00:23:22,000 --> 00:23:24,000
如果你用 11 进制的话

668
00:23:24,000 --> 00:23:25,000
你就可以表达 11 分之 1

669
00:23:25,000 --> 00:23:26,000
11 分之 2 之类的这种数字

670
00:23:26,000 --> 00:23:27,000
非常精确的吧

671
00:23:27,000 --> 00:23:28,000
0.102

672
00:23:29,000 --> 00:23:30,000
但如果你用 10 进制的话

673
00:23:30,000 --> 00:23:31,000
11 分之 1 和 11 分之 2

674
00:23:31,000 --> 00:23:33,000
就是一个无限循环小数

675
00:23:33,000 --> 00:23:33,000
对吧

676
00:23:34,000 --> 00:23:36,000
你连 11 分之 2 你也没法表达

677
00:23:37,000 --> 00:23:38,000
为什么不能

678
00:23:38,000 --> 00:23:39,000
0.2 不就是 11 分之 2 吗

679
00:23:40,000 --> 00:23:42,000
0.1 是 10 进制的

680
00:23:42,000 --> 00:23:42,000
对

681
00:23:42,000 --> 00:23:44,000
10 进制的 0.1 是 10 分之 1

682
00:23:46,000 --> 00:23:48,000
我明白你的意思

683
00:23:48,000 --> 00:23:50,000
11 进制下的 0.1

684
00:23:50,000 --> 00:23:53,000
不就是 10 进制下面的 11 分之 1 吗

685
00:23:55,000 --> 00:23:55,000
对

686
00:23:55,000 --> 00:23:56,000
没错

687
00:23:56,000 --> 00:23:56,000
不对吗

688
00:23:56,000 --> 00:23:57,000
理解了

689
00:23:57,000 --> 00:23:58,000
你说是这个意思

690
00:23:58,000 --> 00:23:58,000
OK

691
00:23:59,000 --> 00:24:00,000
没错

692
00:24:00,000 --> 00:24:01,000
然后对

693
00:24:01,000 --> 00:24:02,000
所以在 2 进制下面

694
00:24:02,000 --> 00:24:03,000
就有很多 10 进制的数字

695
00:24:03,000 --> 00:24:05,000
是没办法表达为一个

696
00:24:05,000 --> 00:24:08,000
2 进制下面的整数的

697
00:24:09,000 --> 00:24:11,000
就整的分数

698
00:24:12,000 --> 00:24:13,000
听着有点绕

699
00:24:13,000 --> 00:24:14,000
但又得到分数

700
00:24:14,000 --> 00:24:16,000
就 0.1 可以表达 0.5

701
00:24:16,000 --> 00:24:18,000
但是 0.6 就没办法表达了

702
00:24:18,000 --> 00:24:19,000
就大概这个意思

703
00:24:22,000 --> 00:24:24,000
所以在实际的一些编程语言里面

704
00:24:24,000 --> 00:24:25,000
怎么处理

705
00:24:25,000 --> 00:24:27,000
然后网页上就给了一个

706
00:24:28,000 --> 00:24:29,000
相对来说比较详细的

707
00:24:29,000 --> 00:24:31,000
代表会出现什么样的状况

708
00:24:32,000 --> 00:24:32,000
对

709
00:24:33,000 --> 00:24:35,000
然后就你可以使用什么样的

710
00:24:35,000 --> 00:24:38,000
你在遇到什么样的语言的时候

711
00:24:38,000 --> 00:24:39,000
可能会得到什么样的结果

712
00:24:39,000 --> 00:24:41,000
以及你怎样解决这些问题

713
00:24:41,000 --> 00:24:43,000
比如说有些语言里面

714
00:24:43,000 --> 00:24:44,000
像 c-sharp 之类的

715
00:24:44,000 --> 00:24:45,000
都有什么 decimal cool

716
00:24:45,000 --> 00:24:47,000
就是专门用来解决

717
00:24:47,000 --> 00:24:50,000
任意精度的实际数的问题

718
00:24:50,000 --> 00:24:52,000
你可能会问为什么

719
00:24:52,000 --> 00:24:56,000
不把任意实际精度的数字

720
00:24:57,000 --> 00:24:59,000
做成一个默认的数字的实现

721
00:24:59,000 --> 00:25:00,000
有些语言是这样的

722
00:25:00,000 --> 00:25:01,000
但另外一些语言不是这样的

723
00:25:01,000 --> 00:25:03,000
因为根据使用场景

724
00:25:03,000 --> 00:25:05,000
这个酷可能会非常的慢

725
00:25:05,000 --> 00:25:07,000
而有些时候你是不需要这个功能

726
00:25:07,000 --> 00:25:09,000
就一般是这样

727
00:25:09,000 --> 00:25:12,000
金融的系统里面要算设计的钱

728
00:25:12,000 --> 00:25:15,000
都会有那种任意精度的实际制

729
00:25:16,000 --> 00:25:18,000
任意精度的实际制的一个包

730
00:25:18,000 --> 00:25:20,000
去处理这些钱的数目

731
00:25:20,000 --> 00:25:20,000
对吧

732
00:25:21,000 --> 00:25:22,000
没错

733
00:25:22,000 --> 00:25:24,000
然后其他的一些就为了追求效率

734
00:25:24,000 --> 00:25:28,000
就是用这个浮点型来表示

735
00:25:28,000 --> 00:25:30,000
然后浮点型在现在的机场

736
00:25:30,000 --> 00:25:31,000
一般有两种长度

737
00:25:31,000 --> 00:25:33,000
一种是叫做 float

738
00:25:33,000 --> 00:25:34,000
是 32 位长的

739
00:25:35,000 --> 00:25:36,000
然后另外一种是叫做 double

740
00:25:36,000 --> 00:25:37,000
是 64 位长的

741
00:25:37,000 --> 00:25:39,000
精度的话

742
00:25:39,000 --> 00:25:41,000
double 应该有 53 位的精度

743
00:25:41,000 --> 00:25:42,000
53 个 bit 的精度

744
00:25:44,000 --> 00:25:44,000
对

745
00:25:44,000 --> 00:25:49,000
53 个 digit 的精度

746
00:25:49,000 --> 00:25:50,000
应该是

747
00:25:52,000 --> 00:25:53,000
你是说小数点是后面的

748
00:25:53,000 --> 00:25:54,000
不管是小数点钱

749
00:25:54,000 --> 00:25:55,000
因为那个浮点数

750
00:25:55,000 --> 00:25:57,000
那个小数点是可以浮动的

751
00:25:57,000 --> 00:25:59,000
精度只是代表它有效数字那一部分

752
00:25:59,000 --> 00:26:00,000
对

753
00:26:00,000 --> 00:26:00,000
对

754
00:26:00,000 --> 00:26:01,000
没错

755
00:26:01,000 --> 00:26:01,000
是这样

756
00:26:01,000 --> 00:26:03,000
然后 float 的话

757
00:26:03,000 --> 00:26:04,000
应该只有

758
00:26:04,000 --> 00:26:05,000
好像只有多少

759
00:26:05,000 --> 00:26:06,000
28

760
00:26:07,000 --> 00:26:07,000
7

761
00:26:07,000 --> 00:26:08,000
28 位

762
00:26:08,000 --> 00:26:09,000
27

763
00:26:10,000 --> 00:26:12,000
我想一位的符号

764
00:26:12,000 --> 00:26:14,000
它有 27 个 bit

765
00:26:14,000 --> 00:26:15,000
但是它实际的表示成

766
00:26:16,000 --> 00:26:17,000
叫做

767
00:26:17,000 --> 00:26:17,000
对

768
00:26:17,000 --> 00:26:18,000
你说说 range

769
00:26:18,000 --> 00:26:18,000
对

770
00:26:18,000 --> 00:26:22,000
它表达出了有效的数字

771
00:26:22,000 --> 00:26:24,000
好像只有 8 位还是 9 位

772
00:26:24,000 --> 00:26:25,000
就 8 个有效数字

773
00:26:25,000 --> 00:26:25,000
还有 9 个有效数字

774
00:26:25,000 --> 00:26:26,000
很小的一个数

775
00:26:26,000 --> 00:26:27,000
反正

776
00:26:27,000 --> 00:26:28,000
对

777
00:26:28,000 --> 00:26:30,000
然后在实际语言之中就会

778
00:26:30,000 --> 00:26:32,000
就这个跟编程其实会有点关系

779
00:26:32,000 --> 00:26:34,000
就是说如果你要做一个

780
00:26:34,000 --> 00:26:37,000
浮点数的加减乘除的话

781
00:26:37,000 --> 00:26:38,000
你要特别小心这一点

782
00:26:38,000 --> 00:26:39,000
特别是你用 float

783
00:26:39,000 --> 00:26:41,000
这种 32 位的精度的时候

784
00:26:41,000 --> 00:26:44,000
32 位这种窄的浮点数的时候

785
00:26:44,000 --> 00:26:46,000
很容易用的用就是发现

786
00:26:46,000 --> 00:26:48,000
你比如说你做一个累加对吧

787
00:26:48,000 --> 00:26:49,000
你加完之后发现

788
00:26:49,000 --> 00:26:51,000
这个跟你预想的出入怎么那么大

789
00:26:51,000 --> 00:26:52,000
就是因为浮点数

790
00:26:52,000 --> 00:26:54,000
这个精度在作怪

791
00:26:54,000 --> 00:26:55,000
就是你设想一下

792
00:26:55,000 --> 00:26:57,000
你加一个特别大的一个数字

793
00:26:57,000 --> 00:26:59,000
加了一个特别小的一个数字

794
00:26:59,000 --> 00:26:59,000
两加起来

795
00:26:59,000 --> 00:27:00,000
因为精度的问题

796
00:27:00,000 --> 00:27:02,000
可能直接就无效了

797
00:27:02,000 --> 00:27:03,000
但是如果说你有很多

798
00:27:03,000 --> 00:27:06,000
很多特别小的数字累加起来

799
00:27:06,000 --> 00:27:07,000
然后你再加了一个特别大的数字

800
00:27:07,000 --> 00:27:08,000
那边去

801
00:27:08,000 --> 00:27:09,000
你这个这个物

802
00:27:09,000 --> 00:27:12,000
这个这个精度的牺牲导致的误差

803
00:27:12,000 --> 00:27:14,000
会它是会逐渐累积的吗

804
00:27:15,000 --> 00:27:15,000
对

805
00:27:15,000 --> 00:27:18,000
所以这个面试有很多坑爹的事情

806
00:27:18,000 --> 00:27:19,000
对

807
00:27:19,000 --> 00:27:20,000
所以有一个 rule of thumb

808
00:27:20,000 --> 00:27:23,000
就是如果能够不使用是浮点数的话

809
00:27:23,000 --> 00:27:24,000
尽量不要使用浮点数

810
00:27:24,000 --> 00:27:26,000
这是在早期

811
00:27:26,000 --> 00:27:27,000
早期学根程的时候

812
00:27:27,000 --> 00:27:28,000
应该学到的一点

813
00:27:28,000 --> 00:27:30,000
刚才说除了解决方案

814
00:27:30,000 --> 00:27:32,000
除了说用一个叫做 decimal

815
00:27:32,000 --> 00:27:34,000
就是实际性质的无限

816
00:27:34,000 --> 00:27:38,000
就是无限精度的一个库去表达

817
00:27:38,000 --> 00:27:40,000
就是一个任意精度的数字

818
00:27:40,000 --> 00:27:42,000
还有一个方法就是用一个叫做 rational

819
00:27:42,000 --> 00:27:43,000
就是分数的形式

820
00:27:43,000 --> 00:27:44,000
或者 fraction

821
00:27:44,000 --> 00:27:46,000
它这个原理就比较简单了

822
00:27:46,000 --> 00:27:47,000
它说我们没有办法

823
00:27:48,000 --> 00:27:50,000
通过这个

824
00:27:50,000 --> 00:27:51,000
我们没有办法除尽

825
00:27:51,000 --> 00:27:52,000
那我干脆不除好了

826
00:27:52,000 --> 00:27:53,000
直接就按分子分母

827
00:27:53,000 --> 00:27:55,000
大家还记得小学学那个吗

828
00:27:55,000 --> 00:27:58,000
怎么去两个分数相乘的时候那个方法

829
00:27:58,000 --> 00:28:00,000
就是在程序上实现同样的原理

830
00:28:00,000 --> 00:28:02,000
最终得出来的结果还是一个分数

831
00:28:02,000 --> 00:28:04,000
就是几分之多少分之多少

832
00:28:04,000 --> 00:28:07,000
当然那个多少分子分母都可能会比较大

833
00:28:07,000 --> 00:28:12,000
但你可以通过削减什么公约数的方法

834
00:28:12,000 --> 00:28:14,000
去把它尽量缩成一个最大公约

835
00:28:14,000 --> 00:28:17,000
我已经至少两次一听到

836
00:28:17,000 --> 00:28:19,000
你在 IT 工里面是说什么最大公约数

837
00:28:20,000 --> 00:28:22,000
我每次都记不住到底是哪个

838
00:28:24,000 --> 00:28:28,000
应该是最大公约数和最小公倍数

839
00:28:28,000 --> 00:28:29,000
最小公倍数

840
00:28:29,000 --> 00:28:30,000
对差不多这意思

841
00:28:30,000 --> 00:28:32,000
然后具体是哪个我也忘了

842
00:28:32,000 --> 00:28:33,000
这些想法

843
00:28:34,000 --> 00:28:35,000
比较有意思的是

844
00:28:35,000 --> 00:28:37,000
在有些我们常见的语言里面

845
00:28:37,000 --> 00:28:39,000
它实现还有点奇怪

846
00:28:39,000 --> 00:28:39,000
比如说

847
00:28:43,000 --> 00:28:44,000
C 可能还比较简单

848
00:28:44,000 --> 00:28:48,000
为什么 PHP 里面 0.1 加 0.2 出来是 0.3 呢

849
00:28:49,000 --> 00:28:52,000
然后发现 PHP 这门世界上最强大的语言

850
00:28:52,000 --> 00:28:56,000
他偷偷的把 0.315 个 04

851
00:28:57,000 --> 00:29:01,000
这么一个辅点数转化成了一个字符串

852
00:29:01,000 --> 00:29:03,000
然后把它变为 0.3

853
00:29:05,000 --> 00:29:06,000
太强大了

854
00:29:06,000 --> 00:29:07,000
然后我不知道

855
00:29:08,000 --> 00:29:09,000
MySQL 里面这个是怎么做的

856
00:29:09,000 --> 00:29:10,000
它这个原理是什么

857
00:29:10,000 --> 00:29:12,000
应该还是用的这种折中的办法

858
00:29:13,000 --> 00:29:15,000
就是四手五入的方法

859
00:29:16,000 --> 00:29:18,000
要看 SQL 是怎么实现的

860
00:29:18,000 --> 00:29:19,000
因为 SQL

861
00:29:20,000 --> 00:29:23,000
SQL 规范肯定是没有定义的

862
00:29:23,000 --> 00:29:24,000
SQL 规范没有说

863
00:29:24,000 --> 00:29:26,000
但是 MySQL 实现了 0.3

864
00:29:27,000 --> 00:29:28,000
对

865
00:29:28,000 --> 00:29:29,000
是个好问题

866
00:29:29,000 --> 00:29:33,000
然后在 Python 里面有点意思

867
00:29:33,000 --> 00:29:34,000
Python 里面是

868
00:29:34,000 --> 00:29:35,000
如果你把它打印出来

869
00:29:35,000 --> 00:29:37,000
它是一个 0.3

870
00:29:37,000 --> 00:29:38,000
对吧

871
00:29:38,000 --> 00:29:40,000
但是实际上数值

872
00:29:40,000 --> 00:29:42,000
应该还是 0.3000004 的

873
00:29:42,000 --> 00:29:45,000
所以会有一个算法去告诉说

874
00:29:45,000 --> 00:29:47,000
你要打印的这个值

875
00:29:47,000 --> 00:29:50,000
它是一个某一个更短的

876
00:29:51,000 --> 00:29:53,000
小数的定式值

877
00:29:53,000 --> 00:29:55,000
然后它会默认去把它定式值

878
00:29:55,000 --> 00:29:57,000
这个 Python 的方法也是用

879
00:29:57,000 --> 00:29:58,000
跟 PHP 一样的

880
00:29:58,000 --> 00:30:00,000
就是通过转换成字符串的形式

881
00:30:00,000 --> 00:30:01,000
去做这个事儿

882
00:30:02,000 --> 00:30:04,000
然后在 Python 3 里面这一点被

883
00:30:05,000 --> 00:30:06,000
这一点被纠正

884
00:30:06,000 --> 00:30:09,000
就是不要做这些莫名其妙的优化

885
00:30:09,000 --> 00:30:11,000
因为其实如果一个用户看到的值

886
00:30:11,000 --> 00:30:13,000
和他的实际的值不一样

887
00:30:13,000 --> 00:30:14,000
只是有可能出麻烦

888
00:30:14,000 --> 00:30:14,000
对

889
00:30:14,000 --> 00:30:16,000
所以在实际使用中

890
00:30:16,000 --> 00:30:17,000
比如说你们做一些什么

891
00:30:19,000 --> 00:30:19,000
简单例子

892
00:30:19,000 --> 00:30:21,000
你要做一个工业的一个什么测量

893
00:30:21,000 --> 00:30:23,000
它读出来的数值

894
00:30:23,000 --> 00:30:24,000
它可能是一个

895
00:30:26,000 --> 00:30:27,000
浮点数的时候

896
00:30:27,000 --> 00:30:29,000
他们是怎么去判断

897
00:30:29,000 --> 00:30:31,000
比如说你要判断这个值是否是

898
00:30:31,000 --> 00:30:34,000
是否是大于或者小于某个值的时候

899
00:30:34,000 --> 00:30:35,000
是要算上一个

900
00:30:35,000 --> 00:30:37,000
在合适的进度范围内吗

901
00:30:37,000 --> 00:30:37,000
还是怎么样

902
00:30:39,000 --> 00:30:41,000
工业上面一般会有一个指定的

903
00:30:42,000 --> 00:30:43,000
精确范围

904
00:30:43,000 --> 00:30:45,000
但不同工业不一样

905
00:30:46,000 --> 00:30:48,000
不过大部分都是小数点之后三位

906
00:30:48,000 --> 00:30:49,000
应该

907
00:30:50,000 --> 00:30:51,000
就是说你在编程的时候

908
00:30:51,000 --> 00:30:54,000
你要判断两个浮点数的大小的时候

909
00:30:54,000 --> 00:30:55,000
你怎么办

910
00:30:55,000 --> 00:30:59,000
是你说要判断两个浮点数的

911
00:30:59,000 --> 00:31:00,000
相等与否

912
00:31:00,000 --> 00:31:02,000
还是大小不是很好判断

913
00:31:03,000 --> 00:31:06,000
其实我觉得用判断两个浮点数

914
00:31:06,000 --> 00:31:08,000
是否相等这件事情本身

915
00:31:08,000 --> 00:31:09,000
就是跟你的初衷是有

916
00:31:09,000 --> 00:31:11,000
这个常识是有相悖的

917
00:31:11,000 --> 00:31:12,000
除非你特别理解

918
00:31:12,000 --> 00:31:14,000
I 1754 到底怎么一回事

919
00:31:14,000 --> 00:31:14,000
对

920
00:31:16,000 --> 00:31:17,000
在资讯机的世界里面

921
00:31:17,000 --> 00:31:19,000
浮点数是非常棘手的一个东西

922
00:31:19,000 --> 00:31:20,000
反正

923
00:31:20,000 --> 00:31:20,000
对

924
00:31:20,000 --> 00:31:22,000
所以一般的话应该是两个数 A

925
00:31:22,000 --> 00:31:24,000
要判断两个数是否相近

926
00:31:24,000 --> 00:31:26,000
应该是用 A 减 B

927
00:31:26,000 --> 00:31:27,000
然后算它的差值

928
00:31:27,000 --> 00:31:28,000
是不是在某一个余区

929
00:31:28,000 --> 00:31:28,000
对

930
00:31:28,000 --> 00:31:30,000
然后看其差值是不是在一个

931
00:31:30,000 --> 00:31:31,000
对

932
00:31:31,000 --> 00:31:34,000
这有点像工业里面造两零件

933
00:31:34,000 --> 00:31:36,000
然后看两零件是不是合乎要求

934
00:31:36,000 --> 00:31:38,000
就要看它的偏差是不是

935
00:31:38,000 --> 00:31:41,000
在一个可接受范围内

936
00:31:41,000 --> 00:31:42,000
范围内的

937
00:31:42,000 --> 00:31:43,000
对

938
00:31:43,000 --> 00:31:44,000
这个还是蛮坑的反正

939
00:31:44,000 --> 00:31:45,000
没错

940
00:31:45,000 --> 00:31:46,000
万万的浮点数

941
00:31:46,000 --> 00:31:49,000
你看这就是机器科学和机器工程全都差

942
00:31:49,000 --> 00:31:50,000
工程的区

943
00:31:52,000 --> 00:31:53,000
OK

944
00:31:53,000 --> 00:31:55,000
In theory there is no difference

945
00:31:55,000 --> 00:31:56,000
in practical

946
00:31:56,000 --> 00:31:58,000
好像那句话怎么说

947
00:31:58,000 --> 00:32:01,000
In theory there is no difference between theory and practical

948
00:32:01,000 --> 00:32:03,000
in practical there is

949
00:32:04,000 --> 00:32:04,000
不是

950
00:32:04,000 --> 00:32:08,000
叫做 in theory there is no difference between theory and practice

951
00:32:08,000 --> 00:32:09,000
practice

952
00:32:09,000 --> 00:32:09,000
OK

953
00:32:09,000 --> 00:32:10,000
in practice there is

954
00:32:12,000 --> 00:32:12,000
那

955
00:32:13,000 --> 00:32:18,000
今天的主题就是比较 in practice 的一个东西

956
00:32:18,000 --> 00:32:22,000
主题是命令行

957
00:32:23,000 --> 00:32:23,000
对

958
00:32:23,000 --> 00:32:24,000
这也是

959
00:32:24,000 --> 00:32:25,000
这是我们上期提到的吗

960
00:32:25,000 --> 00:32:27,000
还是上上期提到的一个主题

961
00:32:27,000 --> 00:32:29,000
反正某一期你承诺过

962
00:32:29,000 --> 00:32:29,000
对

963
00:32:29,000 --> 00:32:30,000
你就要讲

964
00:32:30,000 --> 00:32:31,000
对

965
00:32:31,000 --> 00:32:35,000
然后其实这个主题也的确是挺值得说的

966
00:32:35,000 --> 00:32:36,000
因为

967
00:32:36,000 --> 00:32:38,000
尤其是对于出学者来说

968
00:32:38,000 --> 00:32:44,000
或者是对于正在朝这条路上越走越远的人来说

969
00:32:44,000 --> 00:32:46,000
命令行是一个

970
00:32:48,000 --> 00:32:49,000
是一个绕不开的话题

971
00:32:49,000 --> 00:32:50,000
就基本上

972
00:32:50,000 --> 00:32:54,000
其实我觉得这个我要先问一个问题

973
00:32:54,000 --> 00:32:58,000
现在很多这种新人们

974
00:32:58,000 --> 00:33:00,000
好像他们学电脑都不用

975
00:33:00,000 --> 00:33:01,000
都直接开过命令行了

976
00:33:01,000 --> 00:33:04,000
或者很多用 Windows 的人都基本不用命令行

977
00:33:04,000 --> 00:33:06,000
但是我觉得将来还是会

978
00:33:06,000 --> 00:33:07,000
早晚有一天你会撞上

979
00:33:08,000 --> 00:33:11,000
所以你觉得他们还是会把这课给补上是吧

980
00:33:11,000 --> 00:33:12,000
对

981
00:33:12,000 --> 00:33:15,000
其实这也是一个值得讨论的话题

982
00:33:15,000 --> 00:33:18,000
就是在我们小时候

983
00:33:18,000 --> 00:33:23,000
大家就至少在 Windows 或者是 DOS

984
00:33:23,000 --> 00:33:28,000
微软的操作性用户的早期的童年记忆里面

985
00:33:28,000 --> 00:33:32,000
计算机开机是不会自动记住图形界面的同学们

986
00:33:32,000 --> 00:33:33,000
就是像你们这些

987
00:33:34,000 --> 00:33:37,000
饱受溺爱的麦克用户

988
00:33:37,000 --> 00:33:40,000
一开机就可以看到一个闪闪发光的大苹果

989
00:33:40,000 --> 00:33:41,000
然后一进去就有鼠标用

990
00:33:41,000 --> 00:33:46,000
这种事情在至少 90 年的中国是不可想象的

991
00:33:47,000 --> 00:33:48,000
对吧

992
00:33:48,000 --> 00:33:51,000
开机先显一个 BIOS Spring 对吧

993
00:33:51,000 --> 00:33:51,000
对

994
00:33:51,000 --> 00:33:53,000
然后进到 C-DOS 里面

995
00:33:53,000 --> 00:33:55,000
你还可以听到熟悉的磁盘自解的声音

996
00:33:55,000 --> 00:33:55,000
对

997
00:33:55,000 --> 00:33:57,000
我们应该把磁盘自解的声音

998
00:33:57,000 --> 00:33:59,000
拿来当我们的开头曲用的

999
00:33:59,000 --> 00:34:00,000
我就像那个

1000
00:34:00,000 --> 00:34:03,000
怎么形成一个开头曲

1001
00:34:03,000 --> 00:34:07,000
就像 ATP 一样

1002
00:34:07,000 --> 00:34:09,000
他们用调制了一条气的声音

1003
00:34:09,000 --> 00:34:13,000
我们可以用磁盘自解的声音

1004
00:34:13,000 --> 00:34:13,000
来当开头曲

1005
00:34:13,000 --> 00:34:14,000
好吧

1006
00:34:15,000 --> 00:34:18,000
终于找到一个符合本节目主旨的

1007
00:34:18,000 --> 00:34:22,000
这么一个声音的特质了

1008
00:34:22,000 --> 00:34:23,000
我是在辐射室里面

1009
00:34:23,000 --> 00:34:26,000
因为辐射室里面你经常需要去黑一些 Terminal

1010
00:34:26,000 --> 00:34:28,000
然后 Terminal 有个特别的声音

1011
00:34:28,000 --> 00:34:30,000
我是听那个声音的时候想到

1012
00:34:31,000 --> 00:34:31,000
OK

1013
00:34:31,000 --> 00:34:35,000
然后我们在 90 年代的时候

1014
00:34:35,000 --> 00:34:39,000
需要开机看到一个 BIOS 自解

1015
00:34:39,000 --> 00:34:41,000
然后屏幕清零

1016
00:34:41,000 --> 00:34:44,000
左上角出现一个闪烁的 C 帽号

1017
00:34:44,000 --> 00:34:46,000
反斜杠大于号

1018
00:34:46,000 --> 00:34:47,000
然后你闪动的功能

1019
00:34:47,000 --> 00:34:49,000
90 年代你就看到 C 了吗

1020
00:34:49,000 --> 00:34:50,000
应该是 A 还是 B 吧

1021
00:34:52,000 --> 00:34:55,000
对 A 帽号反斜杠大于号

1022
00:34:56,000 --> 00:34:56,000
没错

1023
00:34:58,000 --> 00:34:59,000
C 啊

1024
00:34:59,000 --> 00:35:01,000
我没有那么 HardCode

1025
00:35:01,000 --> 00:35:04,000
我觉得我小时候就在我的那个

1026
00:35:05,000 --> 00:35:06,000
你一来就有磁盘

1027
00:35:06,000 --> 00:35:06,000
就有硬盘

1028
00:35:06,000 --> 00:35:09,000
中华学习机之后的电脑

1029
00:35:09,000 --> 00:35:11,000
其实我遇到的已经大部分都是带磁盘的了

1030
00:35:12,000 --> 00:35:13,000
想想

1031
00:35:14,000 --> 00:35:14,000
对

1032
00:35:14,000 --> 00:35:17,000
你没用过那种叫做叫做无盘工作站吗

1033
00:35:19,000 --> 00:35:21,000
无盘工作站是

1034
00:35:22,000 --> 00:35:23,000
就那个时候磁盘很贵吗

1035
00:35:23,000 --> 00:35:25,000
联网之后才有的

1036
00:35:26,000 --> 00:35:26,000
我知道

1037
00:35:26,000 --> 00:35:28,000
就是有些那种

1038
00:35:28,000 --> 00:35:29,000
以前那种叫做什么来的

1039
00:35:30,000 --> 00:35:31,000
这叫机房吧

1040
00:35:31,000 --> 00:35:32,000
对

1041
00:35:32,000 --> 00:35:34,000
它不是每台电脑都有磁盘的

1042
00:35:34,000 --> 00:35:35,000
我知道

1043
00:35:35,000 --> 00:35:37,000
但我的意思是我第一次接触计算机

1044
00:35:37,000 --> 00:35:40,000
就接触 IBMPC 兼容机

1045
00:35:40,000 --> 00:35:42,000
应该是在我爸单位的

1046
00:35:42,000 --> 00:35:46,000
一个秘书室类似的这么一个地方

1047
00:35:46,000 --> 00:35:49,000
然后那个电脑不仅有磁盘

1048
00:35:49,000 --> 00:35:50,000
还有游戏在上面

1049
00:35:50,000 --> 00:35:53,000
所以我第一次接触到 C 帽号反斜杠大于号

1050
00:35:53,000 --> 00:35:54,000
应该是那样

1051
00:35:55,000 --> 00:35:57,000
那你运气还是蛮好的

1052
00:35:57,000 --> 00:35:57,000
对

1053
00:35:57,000 --> 00:35:58,000
在此之前

1054
00:35:58,000 --> 00:36:01,000
我只能在中华学习机上用一个录音带

1055
00:36:01,000 --> 00:36:03,000
读取的东西

1056
00:36:03,000 --> 00:36:04,000
但是中华学习反正没有

1057
00:36:04,000 --> 00:36:06,000
就是 Apple II

1058
00:36:06,000 --> 00:36:07,000
反正没有磁盘的概念

1059
00:36:07,000 --> 00:36:09,000
就没有盘服的概念

1060
00:36:10,000 --> 00:36:10,000
OK

1061
00:36:11,000 --> 00:36:13,000
所以进到 C 之后

1062
00:36:13,000 --> 00:36:14,000
要怎么进图形系

1063
00:36:14,000 --> 00:36:15,000
还差个 Win

1064
00:36:15,000 --> 00:36:16,000
对

1065
00:36:16,000 --> 00:36:17,000
你要打 Win 回车

1066
00:36:17,000 --> 00:36:18,000
然后才可以进 Windows

1067
00:36:19,000 --> 00:36:19,000
是什么

1068
00:36:19,000 --> 00:36:21,000
Windows 3.1

1069
00:36:21,000 --> 00:36:22,000
Windows 3.2

1070
00:36:23,000 --> 00:36:25,000
Windows 3.2 是简体周的吗

1071
00:36:26,000 --> 00:36:27,000
Windows 3.1 只有

1072
00:36:27,000 --> 00:36:29,000
在世界其他版本特别短密

1073
00:36:31,000 --> 00:36:33,000
Windows 3.1 或者 Windows 3.2 是

1074
00:36:33,000 --> 00:36:35,000
Windows 95 之前

1075
00:36:35,000 --> 00:36:37,000
世界上最流行的 Windows 版本

1076
00:36:39,000 --> 00:36:41,000
施法星格演过一部电影

1077
00:36:41,000 --> 00:36:42,000
叫什么来着

1078
00:36:42,000 --> 00:36:43,000
谎言语

1079
00:36:44,000 --> 00:36:45,000
真实谎言

1080
00:36:45,000 --> 00:36:46,000
真实的谎言里面

1081
00:36:48,000 --> 00:36:49,000
它潜入一个

1082
00:36:49,000 --> 00:36:52,000
反正是阿拉伯语的这么一个机构里面

1083
00:36:52,000 --> 00:36:55,000
然后 Windows 3.2 的上面

1084
00:36:55,000 --> 00:36:57,000
显示的是阿拉伯的 Windows

1085
00:36:57,000 --> 00:36:59,000
所以挺惊讶的

1086
00:36:59,000 --> 00:37:00,000
对印象很深刻

1087
00:37:00,000 --> 00:37:01,000
所以在那个时代

1088
00:37:01,000 --> 00:37:04,000
是开机不默认进图形界面的

1089
00:37:04,000 --> 00:37:04,000
I don't know

1090
00:37:04,000 --> 00:37:06,000
所以那是一个非常

1091
00:37:06,000 --> 00:37:08,000
那个我还记得有一个

1092
00:37:09,000 --> 00:37:11,000
当时图形界面

1093
00:37:11,000 --> 00:37:13,000
还没有完全普及

1094
00:37:13,000 --> 00:37:14,000
或者说有些机器太古老

1095
00:37:14,000 --> 00:37:16,000
它跑图形界面会比较慢

1096
00:37:16,000 --> 00:37:19,000
但是还用那个叫做命令行的

1097
00:37:19,000 --> 00:37:22,000
文件管理软件叫什么来着

1098
00:37:22,000 --> 00:37:23,000
什么 Commander

1099
00:37:23,000 --> 00:37:24,000
Total Commander

1100
00:37:24,000 --> 00:37:25,000
Total Commander

1101
00:37:25,000 --> 00:37:26,000
对 PC Tools

1102
00:37:26,000 --> 00:37:27,000
Total Commander

1103
00:37:27,000 --> 00:37:28,000
还有好多东西

1104
00:37:28,000 --> 00:37:31,000
都是命令行下面的一个命令行界面

1105
00:37:31,000 --> 00:37:32,000
就是命令叫什么

1106
00:37:32,000 --> 00:37:34,000
有一个专门名字来形容这种东西

1107
00:37:35,000 --> 00:37:37,000
CUI 就是 Command Line User Interface

1108
00:37:37,000 --> 00:37:39,000
就是它虽然不是图形界面的

1109
00:37:39,000 --> 00:37:41,000
但是它是用各种各样的符号

1110
00:37:41,000 --> 00:37:43,000
来组成一个可以点的窗口

1111
00:37:44,000 --> 00:37:44,000
对

1112
00:37:44,000 --> 00:37:46,000
有鼠标可以用

1113
00:37:46,000 --> 00:37:46,000
对

1114
00:37:47,000 --> 00:37:49,000
鼠标就是一个

1115
00:37:49,000 --> 00:37:50,000
一大块字符

1116
00:37:50,000 --> 00:37:51,000
一个字符

1117
00:37:51,000 --> 00:37:52,000
就是那个

1118
00:37:52,000 --> 00:37:52,000
就

1119
00:37:53,000 --> 00:37:56,000
它一个是一个 80 x 24 个字符的一个窗口

1120
00:37:56,000 --> 00:37:57,000
对

1121
00:37:57,000 --> 00:37:59,000
然后鼠标就刚好占一格

1122
00:37:59,000 --> 00:38:00,000
一个字符的位置

1123
00:38:00,000 --> 00:38:00,000
对

1124
00:38:00,000 --> 00:38:02,000
然后挪动鼠标的时候

1125
00:38:02,000 --> 00:38:03,000
屏幕上就有一个大黑块的

1126
00:38:05,000 --> 00:38:08,000
其实在好多 Linux 安装界面里面

1127
00:38:08,000 --> 00:38:09,000
还是可以看到这个东西

1128
00:38:10,000 --> 00:38:11,000
Appetitues

1129
00:38:13,000 --> 00:38:17,000
然后其实 Linux 下面的这种工具

1130
00:38:17,000 --> 00:38:20,000
一般很多是基于那个叫 N-Curse

1131
00:38:20,000 --> 00:38:21,000
N-Curse

1132
00:38:21,000 --> 00:38:21,000
对

1133
00:38:22,000 --> 00:38:23,000
N-Curse 这个包来写的

1134
00:38:23,000 --> 00:38:24,000
然后还挺长

1135
00:38:24,000 --> 00:38:25,000
就

1136
00:38:25,000 --> 00:38:26,000
还算常用吧

1137
00:38:26,000 --> 00:38:26,000
至少

1138
00:38:26,000 --> 00:38:27,000
嗯

1139
00:38:27,000 --> 00:38:28,000
现在我们在节目

1140
00:38:29,000 --> 00:38:31,000
最后会介绍一些类似这种工具

1141
00:38:31,000 --> 00:38:33,000
这里就先放一放

1142
00:38:33,000 --> 00:38:33,000
对

1143
00:38:33,000 --> 00:38:34,000
扯软了

1144
00:38:34,000 --> 00:38:35,000
反正在那个时候

1145
00:38:35,000 --> 00:38:36,000
你可能

1146
00:38:36,000 --> 00:38:37,000
你打开电脑会

1147
00:38:37,000 --> 00:38:39,000
会你有一个明确的想法

1148
00:38:39,000 --> 00:38:40,000
说今天我要干什么

1149
00:38:40,000 --> 00:38:41,000
然后根据你要干什么

1150
00:38:41,000 --> 00:38:43,000
你要决定说

1151
00:38:43,000 --> 00:38:47,000
是在 DOS 的命令提示服务下面

1152
00:38:47,000 --> 00:38:48,000
打如

1153
00:38:48,000 --> 00:38:49,000
打比如说

1154
00:38:50,000 --> 00:38:50,000
PAL

1155
00:38:51,000 --> 00:38:52,000
或者是

1156
00:38:53,000 --> 00:38:54,000
CNC

1157
00:38:54,000 --> 00:38:56,000
还是打 Win

1158
00:38:56,000 --> 00:38:57,000
因为如果你要玩游戏的话

1159
00:38:57,000 --> 00:38:59,000
你可能不需要图形界面的操作

1160
00:38:59,000 --> 00:39:02,000
你只需要打入游戏的名字

1161
00:39:02,000 --> 00:39:03,000
然后游戏就会独占整台计算机

1162
00:39:03,000 --> 00:39:04,000
然后

1163
00:39:04,000 --> 00:39:08,000
大富翁的提供名是不是 Rich

1164
00:39:08,000 --> 00:39:08,000
对

1165
00:39:08,000 --> 00:39:09,000
没错

1166
00:39:09,000 --> 00:39:10,000
还有

1167
00:39:10,000 --> 00:39:12,000
还有三国

1168
00:39:12,000 --> 00:39:14,000
那个什么战国群英传之类的

1169
00:39:14,000 --> 00:39:17,000
你都需要在

1170
00:39:17,000 --> 00:39:18,000
盘浮下面输入

1171
00:39:18,000 --> 00:39:20,000
金庸群侠传好像也是这样吧

1172
00:39:21,000 --> 00:39:22,000
对金庸群侠传也是

1173
00:39:23,000 --> 00:39:25,000
就在那个时候很多人都记

1174
00:39:25,000 --> 00:39:26,000
先见不要忘了

1175
00:39:26,000 --> 00:39:27,000
我刚刚说完

1176
00:39:29,000 --> 00:39:30,000
然后那个

1177
00:39:30,000 --> 00:39:31,000
PAL 是什么

1178
00:39:31,000 --> 00:39:32,000
PALALIN

1179
00:39:32,000 --> 00:39:34,000
就是那个

1180
00:39:34,000 --> 00:39:36,000
这个游戏的英文名很奇怪的

1181
00:39:36,000 --> 00:39:38,000
叫做 PALALIN 之类的

1182
00:39:38,000 --> 00:39:39,000
就是十字军的那个词

1183
00:39:40,000 --> 00:39:41,000
我记错了

1184
00:39:41,000 --> 00:39:42,000
为什么会这样

1185
00:39:42,000 --> 00:39:43,000
对我也不知道

1186
00:39:43,000 --> 00:39:44,000
我觉得很奇怪

1187
00:39:44,000 --> 00:39:46,000
然后反正在那个时候

1188
00:39:46,000 --> 00:39:47,000
很多人不学电脑

1189
00:39:47,000 --> 00:39:49,000
或者说没有那么的

1190
00:39:49,000 --> 00:39:50,000
TX-AV 来自于很多小孩子

1191
00:39:50,000 --> 00:39:52,000
可能打开电脑

1192
00:39:52,000 --> 00:39:53,000
唯一会做的一件事情

1193
00:39:53,000 --> 00:39:54,000
就是在那个命令

1194
00:39:54,000 --> 00:39:56,000
后面输入这个游戏的名字

1195
00:39:56,000 --> 00:39:57,000
然后按回车

1196
00:39:57,000 --> 00:39:58,000
这就已经算是

1197
00:39:59,000 --> 00:40:00,000
懂电脑的表象了

1198
00:40:00,000 --> 00:40:03,000
对这大概就是相当于在 Windows 下面

1199
00:40:03,000 --> 00:40:04,000
你会按开始菜单

1200
00:40:04,000 --> 00:40:04,000
就是这种感觉

1201
00:40:07,000 --> 00:40:07,000
对

1202
00:40:08,000 --> 00:40:09,000
后来 1995 年

1203
00:40:09,000 --> 00:40:10,000
有了 Windows 95

1204
00:40:10,000 --> 00:40:13,000
整个世界才进入一个

1205
00:40:13,000 --> 00:40:14,000
就是开机默认

1206
00:40:14,000 --> 00:40:16,000
进图形界面的时代

1207
00:40:16,000 --> 00:40:17,000
当然苹果用户例外

1208
00:40:17,000 --> 00:40:17,000
但

1209
00:40:18,000 --> 00:40:21,000
我们至少我们小时候都不是苹果

1210
00:40:23,000 --> 00:40:24,000
你是吧

1211
00:40:24,000 --> 00:40:26,000
你不是从苹果机开始起家

1212
00:40:26,000 --> 00:40:27,000
但是

1213
00:40:27,000 --> 00:40:27,000
Apple II

1214
00:40:27,000 --> 00:40:28,000
但是 Apple II

1215
00:40:28,000 --> 00:40:31,000
开机也不是进图形界面来的

1216
00:40:31,000 --> 00:40:32,000
对 Apple II 还是

1217
00:40:32,000 --> 00:40:32,000
就除非

1218
00:40:32,000 --> 00:40:33,000
我意思是

1219
00:40:33,000 --> 00:40:34,000
除非你是 Macintosh

1220
00:40:34,000 --> 00:40:36,000
或者你是 Apple Lisa 的用户

1221
00:40:36,000 --> 00:40:37,000
你小时候是 Apple Lisa 的用户

1222
00:40:38,000 --> 00:40:39,000
那你

1223
00:40:39,000 --> 00:40:41,000
那你肯定不会跟我们是同一个阶级的人

1224
00:40:41,000 --> 00:40:41,000
好吗

1225
00:40:41,000 --> 00:40:42,000
所以

1226
00:40:43,000 --> 00:40:44,000
我意思就是

1227
00:40:44,000 --> 00:40:44,000
对

1228
00:40:45,000 --> 00:40:47,000
在普通人的童年里面

1229
00:40:47,000 --> 00:40:48,000
在中国普通人的童年里面

1230
00:40:48,000 --> 00:40:50,000
很少有人会接触到

1231
00:40:50,000 --> 00:40:52,000
以及开机进入图形界面的电脑

1232
00:40:53,000 --> 00:40:55,000
当然这是我们那个时代

1233
00:40:55,000 --> 00:40:57,000
现在很多人可能你

1234
00:40:57,000 --> 00:40:58,000
我相信我们的听众里面

1235
00:40:58,000 --> 00:41:01,000
很多人已经在 Windows 95 发布会之后出生的了

1236
00:41:01,000 --> 00:41:01,000
所以

1237
00:41:06,000 --> 00:41:06,000
OK

1238
00:41:06,000 --> 00:41:07,000
来

1239
00:41:07,000 --> 00:41:07,000
来吧

1240
00:41:07,000 --> 00:41:08,000
走啊

1241
00:41:08,000 --> 00:41:10,000
The Hard Code Truth

1242
00:41:13,000 --> 00:41:14,000
那接着讲历史吧

1243
00:41:14,000 --> 00:41:16,000
这个命令行的历史要追根溯源

1244
00:41:16,000 --> 00:41:18,000
其实还蛮久远的

1245
00:41:18,000 --> 00:41:18,000
对

1246
00:41:18,000 --> 00:41:21,000
其实这是一个非常自然的事情

1247
00:41:21,000 --> 00:41:23,000
就是在早期

1248
00:41:24,000 --> 00:41:24,000
早到什么时候

1249
00:41:24,000 --> 00:41:25,000
就是在 50 年代

1250
00:41:25,000 --> 00:41:26,000
60 年代

1251
00:41:26,000 --> 00:41:29,000
世界上根本没有人想过要在

1252
00:41:29,000 --> 00:41:33,000
要能够实时的在屏幕上画出一个图形

1253
00:41:33,000 --> 00:41:35,000
然后你去操作它这种事情

1254
00:41:35,000 --> 00:41:37,000
虽然那个时候电视已经问世了

1255
00:41:39,000 --> 00:41:40,000
等等

1256
00:41:40,000 --> 00:41:41,000
电视是什么时候问世的

1257
00:41:41,000 --> 00:41:43,000
195 几年

1258
00:41:43,000 --> 00:41:44,000
问世

1259
00:41:44,000 --> 00:41:44,000
对

1260
00:41:45,000 --> 00:41:46,000
然后

1261
00:41:46,000 --> 00:41:48,000
或者 195 年开始普及了

1262
00:41:48,000 --> 00:41:50,000
但是 195 几年的集团机

1263
00:41:50,000 --> 00:41:52,000
却没有采用电视来做

1264
00:41:52,000 --> 00:41:53,000
他们的显示终端

1265
00:41:54,000 --> 00:41:56,000
而是采用一种叫做 TeleType 的东西

1266
00:41:56,000 --> 00:41:59,000
我们现在一般翻译成电传打字机

1267
00:42:00,000 --> 00:42:01,000
嗯

1268
00:42:02,000 --> 00:42:02,000
它

1269
00:42:03,000 --> 00:42:03,000
顾名思义

1270
00:42:03,000 --> 00:42:06,000
就是可以用电

1271
00:42:06,000 --> 00:42:10,000
可以远程传输数据的打字机

1272
00:42:10,000 --> 00:42:12,000
打字机的意思就是你按一个键

1273
00:42:12,000 --> 00:42:14,000
然后你前面有一个纸

1274
00:42:14,000 --> 00:42:14,000
纸管

1275
00:42:14,000 --> 00:42:15,000
然后这个纸管

1276
00:42:15,000 --> 00:42:18,000
这个滚动的纸纸卷上面

1277
00:42:18,000 --> 00:42:19,000
会显示说你打字符

1278
00:42:19,000 --> 00:42:21,000
然后这个电传打字机是

1279
00:42:21,000 --> 00:42:22,000
TeleType

1280
00:42:22,000 --> 00:42:25,000
就是由 TeleType 公司所制造的

1281
00:42:25,000 --> 00:42:27,000
然后 TeleType 公司所制造的这些机器

1282
00:42:27,000 --> 00:42:28,000
在 50 年代末

1283
00:42:28,000 --> 00:42:29,000
60 年代初的时候

1284
00:42:29,000 --> 00:42:31,000
是基本上是遍布整个

1285
00:42:32,000 --> 00:42:33,000
西方世界

1286
00:42:33,000 --> 00:42:35,000
就是尤其是美国

1287
00:42:35,000 --> 00:42:36,000
基本上每一个

1288
00:42:37,000 --> 00:42:38,000
每个大学

1289
00:42:38,000 --> 00:42:40,000
每一个机构都会有

1290
00:42:40,000 --> 00:42:42,000
因为这个东西真的是非常

1291
00:42:42,000 --> 00:42:43,000
非常的

1292
00:42:44,000 --> 00:42:45,000
在那个时候就像一个

1293
00:42:46,000 --> 00:42:47,000
像什么

1294
00:42:47,000 --> 00:42:48,000
像有点可以类比

1295
00:42:48,000 --> 00:42:49,000
为今天的什么东西呢

1296
00:42:51,000 --> 00:42:52,000
点嘴键

1297
00:42:52,000 --> 00:42:55,000
其实就是有点像今天的笔记本电脑

1298
00:42:55,000 --> 00:42:56,000
吧

1299
00:42:56,000 --> 00:42:57,000
就是基本上

1300
00:42:58,000 --> 00:42:59,000
可以用到的地方非常多

1301
00:42:59,000 --> 00:43:00,000
然后

1302
00:43:00,000 --> 00:43:01,000
嗯

1303
00:43:02,000 --> 00:43:04,000
有点稍微有点尊严的地方

1304
00:43:04,000 --> 00:43:05,000
都会弄上来

1305
00:43:06,000 --> 00:43:09,000
其实你有用过电传打字机这种实体吗

1306
00:43:09,000 --> 00:43:10,000
我还没有老到这个地步

1307
00:43:10,000 --> 00:43:12,000
我只在得意志博物馆里面见过

1308
00:43:12,000 --> 00:43:13,000
你用过

1309
00:43:14,000 --> 00:43:16,000
我也只是在电影或者是博物馆里面见过

1310
00:43:16,000 --> 00:43:18,000
其实并没有用过这个东西

1311
00:43:18,000 --> 00:43:18,000
对

1312
00:43:18,000 --> 00:43:21,000
然后我印象最深刻的应该是用这个

1313
00:43:21,000 --> 00:43:24,000
就是那个传那个叫做 stop tick

1314
00:43:24,000 --> 00:43:25,000
就是股票的

1315
00:43:25,000 --> 00:43:28,000
因为这以前的那种股票交易所

1316
00:43:28,000 --> 00:43:30,000
他可能是用这种电传打字机

1317
00:43:30,000 --> 00:43:31,000
然后一个很长的纸带

1318
00:43:31,000 --> 00:43:33,000
打出来股票的价钱

1319
00:43:34,000 --> 00:43:34,000
实时报价

1320
00:43:36,000 --> 00:43:37,000
只见过这种用力

1321
00:43:38,000 --> 00:43:40,000
其他用力还真的蛮少见

1322
00:43:40,000 --> 00:43:40,000
嗯

1323
00:43:40,000 --> 00:43:43,000
然后在我记得我是在以前读一篇

1324
00:43:43,000 --> 00:43:45,000
就是讲操作系统的

1325
00:43:46,000 --> 00:43:48,000
历史文章里面说

1326
00:43:48,000 --> 00:43:51,000
那个作者当时他还是一个中学生

1327
00:43:51,000 --> 00:43:53,000
然后他们学编程方法是

1328
00:43:53,000 --> 00:43:54,000
呃

1329
00:43:54,000 --> 00:43:57,000
先在一张纸上仔细写下自己想要写的程序

1330
00:43:57,000 --> 00:43:59,000
好像是 fortran 还是 pascal 的程序

1331
00:44:00,000 --> 00:44:02,000
然后第二天拿这张纸去

1332
00:44:02,000 --> 00:44:05,000
呃学校的图书馆的一间房子里面

1333
00:44:06,000 --> 00:44:09,000
然后把自己的这个程序输入到一个

1334
00:44:10,000 --> 00:44:11,000
打孔机上

1335
00:44:11,000 --> 00:44:13,000
打孔机会

1336
00:44:13,000 --> 00:44:13,000
呃

1337
00:44:13,000 --> 00:44:15,000
根据你按下的键来

1338
00:44:15,000 --> 00:44:17,000
把一个打孔纸带

1339
00:44:17,000 --> 00:44:18,000
打上孔

1340
00:44:18,000 --> 00:44:20,000
然后把这些打孔

1341
00:44:20,000 --> 00:44:21,000
打好孔的卡片放到一个

1342
00:44:22,000 --> 00:44:22,000
呃

1343
00:44:22,000 --> 00:44:24,000
电传打字机的输入槽里面

1344
00:44:25,000 --> 00:44:27,000
然后这电传打字机可以把

1345
00:44:27,000 --> 00:44:29,000
可以把这些打孔的

1346
00:44:29,000 --> 00:44:30,000
嗯

1347
00:44:30,000 --> 00:44:31,000
卡

1348
00:44:31,000 --> 00:44:32,000
这些打了孔的卡片

1349
00:44:33,000 --> 00:44:36,000
利用这个电传打字机的调制解调器

1350
00:44:37,000 --> 00:44:38,000
连上电话

1351
00:44:38,000 --> 00:44:40,000
然后输入到远端的一台计算机上

1352
00:44:40,000 --> 00:44:42,000
然后再接着帮你输入

1353
00:44:42,000 --> 00:44:43,000
执行你的程序

1354
00:44:43,000 --> 00:44:44,000
然后再把这个结果传回来

1355
00:44:46,000 --> 00:44:46,000
呃

1356
00:44:46,000 --> 00:44:48,000
对整个过程我还是觉得

1357
00:44:48,000 --> 00:44:50,000
读的就是觉得非常的惊悚

1358
00:44:50,000 --> 00:44:52,000
因为你会很难想象说我靠

1359
00:44:52,000 --> 00:44:53,000
写这么一个程序

1360
00:44:53,000 --> 00:44:54,000
不是 print hello work

1361
00:44:54,000 --> 00:44:57,000
在那个时候可能是需要两天的这一件事情

1362
00:44:59,000 --> 00:44:59,000
对

1363
00:44:59,000 --> 00:45:01,000
而且刚才提到一个细节就是

1364
00:45:01,000 --> 00:45:03,000
它一个电传打字机会需要

1365
00:45:03,000 --> 00:45:06,000
跟远端的一台电脑联络对吧

1366
00:45:06,000 --> 00:45:07,000
呃

1367
00:45:07,000 --> 00:45:08,000
但是只有一个问题

1368
00:45:08,000 --> 00:45:09,000
就是

1369
00:45:09,000 --> 00:45:10,000
在

1370
00:45:11,000 --> 00:45:13,000
在贝尔实验室

1371
00:45:13,000 --> 00:45:14,000
嗯

1372
00:45:14,000 --> 00:45:15,000
不是贝尔实验室

1373
00:45:15,000 --> 00:45:17,000
就电话是由贝尔公司发明的

1374
00:45:17,000 --> 00:45:18,000
是由贝尔发明的

1375
00:45:18,000 --> 00:45:19,000
对吧

1376
00:45:19,000 --> 00:45:21,000
但是有些人会说他是爱迪生发明的

1377
00:45:21,000 --> 00:45:22,000
但是是

1378
00:45:22,000 --> 00:45:25,000
就如果你没有被这个中学课文骗过

1379
00:45:25,000 --> 00:45:26,000
骗到了的话

1380
00:45:26,000 --> 00:45:28,000
那电脑电话其实是贝尔发明的

1381
00:45:28,000 --> 00:45:30,000
然后贝尔成立了贝尔公司

1382
00:45:31,000 --> 00:45:31,000
呃

1383
00:45:31,000 --> 00:45:35,000
贝尔公司到 1981 年还是哪一年为止

1384
00:45:35,000 --> 00:45:36,000
一直都是美国一个

1385
00:45:36,000 --> 00:45:39,000
独占垄断的这么一个电话公司

1386
00:45:39,000 --> 00:45:41,000
就是如果你在美国使用电话的话

1387
00:45:41,000 --> 00:45:42,000
那你使用的一定是贝尔公司服务

1388
00:45:43,000 --> 00:45:45,000
然后就是 90 年代的中国电信

1389
00:45:45,000 --> 00:45:46,000
没错就是那种感觉

1390
00:45:46,000 --> 00:45:49,000
所以我们通过读入历史就知道

1391
00:45:49,000 --> 00:45:51,000
这个电信公司永远是邪恶的

1392
00:45:52,000 --> 00:45:53,000
因为在 60 年代的时候

1393
00:45:53,000 --> 00:45:55,000
贝尔公司有这么一条

1394
00:45:55,000 --> 00:45:55,000
呃

1395
00:45:55,000 --> 00:45:59,000
规定就是我的电话线路只能用来打电话

1396
00:45:59,000 --> 00:46:01,000
你不能在上面传输其他电信号

1397
00:46:02,000 --> 00:46:02,000
呃

1398
00:46:02,000 --> 00:46:04,000
这就意味着你不能说我把电话拆了

1399
00:46:04,000 --> 00:46:06,000
然后把它连到电传打字机上

1400
00:46:06,000 --> 00:46:09,000
然后让这台电传打字机和另外一台电传打字机

1401
00:46:09,000 --> 00:46:10,000
联络

1402
00:46:10,000 --> 00:46:11,000
那怎么办呢

1403
00:46:11,000 --> 00:46:11,000
呃

1404
00:46:11,000 --> 00:46:14,000
人们有这么一个方法就是用一个

1405
00:46:14,000 --> 00:46:15,000
呃

1406
00:46:15,000 --> 00:46:16,000
用一个小盒子

1407
00:46:16,000 --> 00:46:19,000
然后这小盒子上面有两个圆形的

1408
00:46:20,000 --> 00:46:20,000
用这个

1409
00:46:21,000 --> 00:46:21,000
呃

1410
00:46:22,000 --> 00:46:22,000
皮呃

1411
00:46:22,000 --> 00:46:25,000
人造格包起来的这么一个两个机座

1412
00:46:25,000 --> 00:46:28,000
然后你是把电话拿起来拨一个号

1413
00:46:28,000 --> 00:46:30,000
然后把这个电话放在这个机座上

1414
00:46:30,000 --> 00:46:32,000
这样电话的两个听筒

1415
00:46:32,000 --> 00:46:32,000
呃

1416
00:46:33,000 --> 00:46:34,000
一边对着一个麦克风

1417
00:46:34,000 --> 00:46:37,000
就是听筒对着麦克风

1418
00:46:37,000 --> 00:46:39,000
然后电话的听筒呢

1419
00:46:39,000 --> 00:46:41,000
则对着那个小盒子上面的扬声器

1420
00:46:41,000 --> 00:46:43,000
这样小盒子可以把

1421
00:46:44,000 --> 00:46:47,000
电传打字机的电信号转化为声音信号

1422
00:46:47,000 --> 00:46:48,000
就是如果你用过波号上网

1423
00:46:48,000 --> 00:46:51,000
它就是那种滴滴滴滴滴滴滴滴滴滴

1424
00:46:51,000 --> 00:46:52,000
那种那种那种声音

1425
00:46:52,000 --> 00:46:55,000
然后这个信号被电话用声音

1426
00:46:55,000 --> 00:46:57,000
用模拟声音信号传到远端

1427
00:46:57,000 --> 00:47:01,000
然后远端再把它转化为二进制信号

1428
00:47:01,000 --> 00:47:02,000
这么一个过程

1429
00:47:02,000 --> 00:47:05,000
这这这也是一个非常有意思的东西

1430
00:47:06,000 --> 00:47:07,000
然后这个东西一直使用到

1431
00:47:07,000 --> 00:47:08,000
呃

1432
00:47:08,000 --> 00:47:10,000
其实呢出吧

1433
00:47:11,000 --> 00:47:11,000
呃

1434
00:47:11,000 --> 00:47:15,000
这个贝尔公司减就是去除了这个限制

1435
00:47:15,000 --> 00:47:19,000
人们才渐渐的可以就不再用这种非常原始古老的

1436
00:47:19,000 --> 00:47:20,000
呃

1437
00:47:20,000 --> 00:47:23,000
用声音来传递二进制发二进制信息的

1438
00:47:23,000 --> 00:47:24,000
呃

1439
00:47:24,000 --> 00:47:25,000
这这种叫什么

1440
00:47:27,000 --> 00:47:27,000
呃

1441
00:47:27,000 --> 00:47:28,000
acoustic coupler

1442
00:47:28,000 --> 00:47:29,000
对

1443
00:47:29,000 --> 00:47:30,000
acoustic coupler

1444
00:47:30,000 --> 00:47:30,000
呃

1445
00:47:30,000 --> 00:47:32,000
声音 acoustic

1446
00:47:32,000 --> 00:47:33,000
acoustic coupler

1447
00:47:33,000 --> 00:47:34,000
那叫什么呢

1448
00:47:35,000 --> 00:47:36,000
呃

1449
00:47:37,000 --> 00:47:38,000
声音连接器

1450
00:47:38,000 --> 00:47:39,000
对

1451
00:47:39,000 --> 00:47:40,000
声音连接器

1452
00:47:40,000 --> 00:47:40,000
对

1453
00:47:40,000 --> 00:47:43,000
其实这个这个其实现在讲的还是蛮酷的

1454
00:47:43,000 --> 00:47:44,000
就感觉

1455
00:47:44,000 --> 00:47:46,000
刚好今天我看到一则

1456
00:47:46,000 --> 00:47:47,000
呃

1457
00:47:47,000 --> 00:47:48,000
一则新闻啊

1458
00:47:48,000 --> 00:47:50,000
就是说现在有些这个

1459
00:47:50,000 --> 00:47:52,000
因为广告做那个追踪嘛

1460
00:47:52,000 --> 00:47:53,000
adtracking 嘛

1461
00:47:53,000 --> 00:47:53,000
嗯

1462
00:47:53,000 --> 00:47:56,000
他就说现在有一种很很暗黑的科技

1463
00:47:56,000 --> 00:47:57,000
就是电视的广告里面

1464
00:47:57,000 --> 00:47:59,000
它会指出一种高频的声波

1465
00:47:59,000 --> 00:48:01,000
就是这个人耳是听不见的

1466
00:48:01,000 --> 00:48:03,000
然后这个这个这个高频的声波

1467
00:48:03,000 --> 00:48:06,000
是可以被手机的麦克风捕捉到

1468
00:48:06,000 --> 00:48:07,000
然后他上面手机上会跑一个应用

1469
00:48:07,000 --> 00:48:08,000
去监听麦克风

1470
00:48:08,000 --> 00:48:09,000
听到这个声音

1471
00:48:09,000 --> 00:48:12,000
他从而知道你是否在看哪个电视

1472
00:48:12,000 --> 00:48:13,000
节目

1473
00:48:13,000 --> 00:48:14,000
天哪

1474
00:48:14,000 --> 00:48:16,000
简直是 1984

1475
00:48:16,000 --> 00:48:17,000
哈哈

1476
00:48:17,000 --> 00:48:19,000
但是你想这个这个这个原理

1477
00:48:19,000 --> 00:48:22,000
其实就跟刚才讲的一个 acoustic coupler

1478
00:48:22,000 --> 00:48:22,000
其实是差不多

1479
00:48:22,000 --> 00:48:24,000
就是叫声学连接嘛

1480
00:48:24,000 --> 00:48:27,000
就是我们现在有 wifi 通过无线电的信号

1481
00:48:27,000 --> 00:48:29,000
去传传输这个信息的嘛

1482
00:48:29,000 --> 00:48:31,000
他这个玩意是用一个声波的信号

1483
00:48:31,000 --> 00:48:32,000
去传输这个信息的

1484
00:48:32,000 --> 00:48:34,000
然后只是说因为为了

1485
00:48:35,000 --> 00:48:36,000
这个传输的效果好

1486
00:48:36,000 --> 00:48:38,000
他把这个扬声就是收发

1487
00:48:38,000 --> 00:48:40,000
就是收发端嘛简单来讲

1488
00:48:40,000 --> 00:48:41,000
就麦克风是一个收端

1489
00:48:41,000 --> 00:48:44,000
然后这个扬声器是一个发送端嘛

1490
00:48:44,000 --> 00:48:45,000
然后他是他是

1491
00:48:45,000 --> 00:48:47,000
因为你这个电话机是有麦克风扬声器

1492
00:48:47,000 --> 00:48:49,000
他可以发可以收嘛

1493
00:48:49,000 --> 00:48:51,000
那你那个 acoustic coupler

1494
00:48:51,000 --> 00:48:53,000
也是有这个扬声器和麦克风

1495
00:48:53,000 --> 00:48:54,000
也是收和发嘛

1496
00:48:54,000 --> 00:48:55,000
两个反转对接

1497
00:48:55,000 --> 00:48:56,000
不就刚好成成了一个

1498
00:48:56,000 --> 00:48:57,000
连通的回路了吗

1499
00:48:57,000 --> 00:48:58,000
没错

1500
00:48:59,000 --> 00:49:00,000
就听起来是蛮帅的

1501
00:49:00,000 --> 00:49:00,000
没错

1502
00:49:00,000 --> 00:49:01,000
太帅了

1503
00:49:01,000 --> 00:49:06,000
然后后来就说那可以直接接电了

1504
00:49:06,000 --> 00:49:09,000
就意思是说从无线变有线了呗

1505
00:49:09,000 --> 00:49:12,000
直接插管子插线

1506
00:49:12,000 --> 00:49:14,000
对后来的这个调整了

1507
00:49:14,000 --> 00:49:16,000
然后其实就可以自己去进行拨号

1508
00:49:16,000 --> 00:49:18,000
然后直接把音频信号转号

1509
00:49:18,000 --> 00:49:21,000
直接把电信号转号

1510
00:49:21,000 --> 00:49:22,000
然后再

1511
00:49:22,000 --> 00:49:24,000
所以其实这个 acoustic coupler

1512
00:49:24,000 --> 00:49:26,000
和这个我们理解的 modern

1513
00:49:26,000 --> 00:49:28,000
其实本质上是一

1514
00:49:28,000 --> 00:49:29,000
做同样的事情的对吧

1515
00:49:29,000 --> 00:49:31,000
只是说他们接入方式不一样

1516
00:49:31,000 --> 00:49:33,000
acoustic coupler 应该是 modern 的一个部件

1517
00:49:33,000 --> 00:49:34,000
就是

1518
00:49:34,000 --> 00:49:37,000
对就是代替导线的部件了

1519
00:49:37,000 --> 00:49:37,000
对

1520
00:49:38,000 --> 00:49:40,000
后来的 modern 可以直接通过一个分线头

1521
00:49:40,000 --> 00:49:41,000
插在电话线上

1522
00:49:41,000 --> 00:49:43,000
就是 modern 其实本身就是电话的

1523
00:49:43,000 --> 00:49:44,000
线路的一个

1524
00:49:44,000 --> 00:49:46,000
RJ 32 这个标准

1525
00:49:46,000 --> 00:49:47,000
RJ 多少

1526
00:49:47,000 --> 00:49:48,000
RJ 450 是网线的

1527
00:49:48,000 --> 00:49:50,000
对 RJ 450 是网线

1528
00:49:50,000 --> 00:49:52,000
RJ 32 应该是 32

1529
00:49:52,000 --> 00:49:52,000
是电话线

1530
00:49:52,000 --> 00:49:54,000
小的那个电话接头

1531
00:49:54,000 --> 00:49:55,000
这叫什么

1532
00:49:55,000 --> 00:49:56,000
来查一下

1533
00:49:56,000 --> 00:49:57,000
你查吧

1534
00:49:57,000 --> 00:49:59,000
Heliphone line

1535
00:49:59,000 --> 00:50:00,000
水晶头

1536
00:50:02,000 --> 00:50:07,000
RJ 是叫做 register jack

1537
00:50:08,000 --> 00:50:10,000
然后 RJ 10

1538
00:50:11,000 --> 00:50:12,000
RJ 11

1539
00:50:12,000 --> 00:50:13,000
对

1540
00:50:13,000 --> 00:50:14,000
RJ 11

1541
00:50:14,000 --> 00:50:14,000
OK

1542
00:50:14,000 --> 00:50:15,000
对

1543
00:50:15,000 --> 00:50:16,000
这个是我们就

1544
00:50:16,000 --> 00:50:17,000
那 RJ 32 有这个东西吗

1545
00:50:18,000 --> 00:50:19,000
可能没有记错了

1546
00:50:20,000 --> 00:50:22,000
有 RJ 11

1547
00:50:22,000 --> 00:50:23,000
RJ 14

1548
00:50:23,000 --> 00:50:24,000
RJ 25

1549
00:50:25,000 --> 00:50:27,000
然后对就这么一些

1550
00:50:27,000 --> 00:50:30,000
然后 RJ 45 就是我们常说的双脚线

1551
00:50:30,000 --> 00:50:31,000
就是网线的标准头了

1552
00:50:32,000 --> 00:50:33,000
它会宽一些

1553
00:50:33,000 --> 00:50:35,000
应该是有多少针来的

1554
00:50:35,000 --> 00:50:36,000
里面 4 个

1555
00:50:36,000 --> 00:50:37,000
4 个

1556
00:50:37,000 --> 00:50:38,000
网线是 8 个针

1557
00:50:38,000 --> 00:50:38,000
对

1558
00:50:38,000 --> 00:50:39,000
4 对

1559
00:50:39,000 --> 00:50:39,000
对

1560
00:50:40,000 --> 00:50:42,000
然后这个应该是 4 个针

1561
00:50:42,000 --> 00:50:43,000
RJ 11

1562
00:50:44,000 --> 00:50:45,000
具体也不太懂

1563
00:50:46,000 --> 00:50:47,000
其实现在我看也有很多

1564
00:50:49,000 --> 00:50:50,000
RJ 45 因为它线头多

1565
00:50:51,000 --> 00:50:52,000
它就是可以当电话线用的

1566
00:50:52,000 --> 00:50:55,000
然后还可以留几个来做一个摆照的头

1567
00:50:55,000 --> 00:50:57,000
所以很多这种写字楼

1568
00:50:57,000 --> 00:50:59,000
或者是家里装修的时候

1569
00:50:59,000 --> 00:51:00,000
它就说为了方便

1570
00:51:00,000 --> 00:51:02,000
就不单独布电话线的槽

1571
00:51:02,000 --> 00:51:04,000
而就直接走一个网线就好了

1572
00:51:04,000 --> 00:51:04,000
对

1573
00:51:04,000 --> 00:51:06,000
但是如果你现在要装修房子

1574
00:51:06,000 --> 00:51:08,000
我强烈不建议这么干

1575
00:51:08,000 --> 00:51:08,000
首先第一个

1576
00:51:08,000 --> 00:51:10,000
你不需要真的需要电话机了

1577
00:51:10,000 --> 00:51:10,000
对吧

1578
00:51:10,000 --> 00:51:12,000
现在都是用手机

1579
00:51:12,000 --> 00:51:13,000
第二个就是如果你那么干了之后

1580
00:51:13,000 --> 00:51:14,000
你那个网线

1581
00:51:14,000 --> 00:51:16,000
哪怕是你用什么超无赖的线

1582
00:51:16,000 --> 00:51:20,000
最终也只能跑摆照的速度了

1583
00:51:20,000 --> 00:51:21,000
我现在租房子就是

1584
00:51:21,000 --> 00:51:23,000
我现在和女朋友租房子就是有

1585
00:51:24,000 --> 00:51:28,000
每一间房子里面都有两个网线的借口

1586
00:51:29,000 --> 00:51:29,000
好激烈

1587
00:51:30,000 --> 00:51:31,000
就一个是电话

1588
00:51:31,000 --> 00:51:32,000
一个是走网

1589
00:51:32,000 --> 00:51:33,000
没有两个都是蓝

1590
00:51:34,000 --> 00:51:38,000
就有一个在储藏室里面有一个装电话线的槽

1591
00:51:38,000 --> 00:51:40,000
然后那个槽上面有一个

1592
00:51:40,000 --> 00:51:42,000
等于房间有自己的一个号

1593
00:51:43,000 --> 00:51:46,000
这个号分了八根线

1594
00:51:46,000 --> 00:51:48,000
到每一个屋子里面有两根

1595
00:51:49,000 --> 00:51:50,000
所以其实并没有什么用

1596
00:51:50,000 --> 00:51:51,000
就是说你还是用了 WiFi 是吧

1597
00:51:51,000 --> 00:51:52,000
对没错

1598
00:51:54,000 --> 00:51:55,000
淘汰掉技术

1599
00:51:55,000 --> 00:51:57,000
其实我们现在在装修办公室

1600
00:51:58,000 --> 00:52:01,000
然后一个新的办公室

1601
00:52:01,000 --> 00:52:03,000
也是要不限那些

1602
00:52:03,000 --> 00:52:06,000
其实都准备完全不走网线了

1603
00:52:06,000 --> 00:52:07,000
都是走路线

1604
00:52:07,000 --> 00:52:07,000
对

1605
00:52:07,000 --> 00:52:08,000
纯 WiFi 网络

1606
00:52:10,000 --> 00:52:10,000
扯远了

1607
00:52:10,000 --> 00:52:11,000
就这种说历史

1608
00:52:11,000 --> 00:52:12,000
回到电传打字机

1609
00:52:12,000 --> 00:52:15,000
我们一下子越过了 50 年的历史

1610
00:52:15,000 --> 00:52:16,000
好跳

1611
00:52:17,000 --> 00:52:17,000
对

1612
00:52:17,000 --> 00:52:20,000
总之电传打字机的模样

1613
00:52:20,000 --> 00:52:21,000
非常的无限

1614
00:52:21,000 --> 00:52:24,000
就是欢迎各位听众去点开

1615
00:52:24,000 --> 00:52:26,000
这个 Show Notes 里面的链接

1616
00:52:26,000 --> 00:52:27,000
看一看电传打字机

1617
00:52:27,000 --> 00:52:29,000
看到一个什么样的样子

1618
00:52:29,000 --> 00:52:30,000
但是最大

1619
00:52:30,000 --> 00:52:33,000
我们跟这期节目有关的重点

1620
00:52:33,000 --> 00:52:34,000
就是这个电传打字机

1621
00:52:34,000 --> 00:52:36,000
通常只会在一行上面工作

1622
00:52:36,000 --> 00:52:38,000
就是不管你输入还是输出

1623
00:52:38,000 --> 00:52:40,000
你得到的结果一般都只有一行

1624
00:52:40,000 --> 00:52:42,000
但是输出有可能有很多行

1625
00:52:42,000 --> 00:52:43,000
输入一般人就是一行

1626
00:52:44,000 --> 00:52:46,000
一行是什么意思

1627
00:52:46,000 --> 00:52:49,000
一行就是这个电传打字机上面

1628
00:52:49,000 --> 00:52:52,000
你最长只能输入固定子服

1629
00:52:52,000 --> 00:52:53,000
一般是 80 个

1630
00:52:53,000 --> 00:52:53,000
对

1631
00:52:54,000 --> 00:52:57,000
然后如果你输到这儿

1632
00:52:57,000 --> 00:52:57,000
还没完的话

1633
00:52:57,000 --> 00:52:59,000
你要么要告诉电传打字机

1634
00:53:00,000 --> 00:53:02,000
我还要再输入一行

1635
00:53:02,000 --> 00:53:04,000
然后你要输入一个特别的符号

1636
00:53:05,000 --> 00:53:07,000
所以这个时候你要按一个什么

1637
00:53:07,000 --> 00:53:10,000
按一个就相当于 Backslash 的键

1638
00:53:10,000 --> 00:53:12,000
但是反正是上面一个实体键

1639
00:53:13,000 --> 00:53:14,000
要不然你就得按回车了

1640
00:53:14,000 --> 00:53:16,000
就是回车就是把这一行

1641
00:53:16,000 --> 00:53:18,000
当前行的东西输出出去

1642
00:53:19,000 --> 00:53:21,000
但这个时候你是告诉的是电传打字机

1643
00:53:21,000 --> 00:53:23,000
是我要输入多入一行的

1644
00:53:23,000 --> 00:53:25,000
还是说告诉那个远端

1645
00:53:25,000 --> 00:53:26,000
你要输入多于一行

1646
00:53:26,000 --> 00:53:28,000
而是告诉电传打字机

1647
00:53:28,000 --> 00:53:30,000
就是电传打字机会把你当前

1648
00:53:30,000 --> 00:53:32,000
整个行就是它有一个 buffer

1649
00:53:32,000 --> 00:53:33,000
你可以理解吗

1650
00:53:33,000 --> 00:53:36,000
它把当前行 buffer 里面的东西

1651
00:53:36,000 --> 00:53:37,000
传输出去

1652
00:53:38,000 --> 00:53:39,000
但是这个 buffer 有多长

1653
00:53:39,000 --> 00:53:42,000
是 buffer 应该是要比一行的长度长的

1654
00:53:42,000 --> 00:53:43,000
但是不管怎么说

1655
00:53:43,000 --> 00:53:45,000
它具体表现就是

1656
00:53:45,000 --> 00:53:47,000
通常大部分情况下

1657
00:53:47,000 --> 00:53:48,000
你只会输入一行

1658
00:53:49,000 --> 00:53:51,000
你想想那个场景还是蛮搞笑的

1659
00:53:51,000 --> 00:53:53,000
你打打打一个 mini 超越

1660
00:53:53,000 --> 00:53:54,000
你还说

1661
00:53:54,000 --> 00:53:54,000
等等

1662
00:53:54,000 --> 00:53:56,000
那我再打一下

1663
00:53:58,000 --> 00:53:59,000
没错就是这种感觉

1664
00:54:00,000 --> 00:54:01,000
然后

1665
00:54:02,000 --> 00:54:07,000
这个特征也就造就了我们接下来

1666
00:54:07,000 --> 00:54:11,000
60 年的计算机历史里面

1667
00:54:11,000 --> 00:54:12,000
几乎所有人

1668
00:54:13,000 --> 00:54:15,000
至少所有需要学写程序的人

1669
00:54:15,000 --> 00:54:17,000
都会面临一个问题

1670
00:54:17,000 --> 00:54:20,000
就是什么是命令行

1671
00:54:20,000 --> 00:54:21,000
就是 comment line

1672
00:54:21,000 --> 00:54:23,000
line 这个东西就来自于此

1673
00:54:23,000 --> 00:54:24,000
因为早死一点

1674
00:54:24,000 --> 00:54:26,000
打的机场就只允许你

1675
00:54:27,000 --> 00:54:28,000
针对当前行来操作

1676
00:54:28,000 --> 00:54:29,000
就是

1677
00:54:29,000 --> 00:54:30,000
所以不是命令行

1678
00:54:30,000 --> 00:54:31,000
是命令一行

1679
00:54:31,000 --> 00:54:31,000
对

1680
00:54:31,000 --> 00:54:33,000
就是一个命令行

1681
00:54:33,000 --> 00:54:34,000
有时候你会好奇说

1682
00:54:34,000 --> 00:54:36,000
为什么写程序

1683
00:54:36,000 --> 00:54:39,000
不能是从屏幕上的任何地方开始

1684
00:54:40,000 --> 00:54:41,000
为什么一定要是在左上角

1685
00:54:41,000 --> 00:54:42,000
或者左下角

1686
00:54:42,000 --> 00:54:44,000
或者然后输入一行命令

1687
00:54:44,000 --> 00:54:45,000
然后按回车

1688
00:54:45,000 --> 00:54:48,000
乃至于回车键到底是怎么来的

1689
00:54:48,000 --> 00:54:49,000
为什么会回车键

1690
00:54:49,000 --> 00:54:50,000
而不是一个

1691
00:54:50,000 --> 00:54:52,000
这种东西

1692
00:54:52,000 --> 00:54:53,000
而不是一个什么

1693
00:54:53,000 --> 00:54:54,000
比如说开始输入

1694
00:54:54,000 --> 00:54:56,000
或者开始执行这样的简

1695
00:54:57,000 --> 00:54:58,000
其实也是从这儿来的

1696
00:55:00,000 --> 00:55:00,000
对

1697
00:55:01,000 --> 00:55:02,000
然后

1698
00:55:03,000 --> 00:55:04,000
teletype 这个词

1699
00:55:04,000 --> 00:55:06,000
对于我们一直延续到今天的影响

1700
00:55:06,000 --> 00:55:08,000
还有一个就是 tty

1701
00:55:08,000 --> 00:55:09,000
我不知道你

1702
00:55:09,000 --> 00:55:12,000
但是我在开始接触 Linux 的时候

1703
00:55:12,000 --> 00:55:13,000
经常会好奇说

1704
00:55:13,000 --> 00:55:15,000
tty 到底是一个什么东西的缩写

1705
00:55:15,000 --> 00:55:16,000
这很难猜出来

1706
00:55:16,000 --> 00:55:17,000
对吧

1707
00:55:17,000 --> 00:55:19,000
其实 teletype 的缩写

1708
00:55:19,000 --> 00:55:20,000
一直延续到今天

1709
00:55:20,000 --> 00:55:24,000
包括你面对的这台 Mac 电脑

1710
00:55:24,000 --> 00:55:26,000
或者是你手上的 Android

1711
00:55:26,000 --> 00:55:28,000
或者是你的 iPhone

1712
00:55:28,000 --> 00:55:29,000
其实都有 tty 这个东西

1713
00:55:29,000 --> 00:55:29,000
对吧

1714
00:55:29,000 --> 00:55:33,000
就是在 device slash tty

1715
00:55:33,000 --> 00:55:35,000
哪怕你打开你的 iterm

1716
00:55:36,000 --> 00:55:37,000
上面就会显示说

1717
00:55:37,000 --> 00:55:40,000
last login 11 月 11 号

1718
00:55:40,000 --> 00:55:41,000
18 点 46 分

1719
00:55:41,000 --> 00:55:43,000
然后 on tty s 000

1720
00:55:45,000 --> 00:55:46,000
所以其实你要解释一下

1721
00:55:46,000 --> 00:55:48,000
这个我们现在骚扰中里面

1722
00:55:48,000 --> 00:55:49,000
这个 device tty

1723
00:55:49,000 --> 00:55:51,000
到底是它的一个作用是什么

1724
00:55:52,000 --> 00:55:54,000
slash tty

1725
00:55:54,000 --> 00:55:56,000
其实是一个

1726
00:55:57,000 --> 00:55:59,000
用软件模拟出来的一个

1727
00:55:59,000 --> 00:56:00,000
电传打字机的中段

1728
00:56:00,000 --> 00:56:01,000
就是你可以

1729
00:56:01,000 --> 00:56:03,000
它应该叫 ptty

1730
00:56:03,000 --> 00:56:03,000
对吧

1731
00:56:03,000 --> 00:56:06,000
pseudo tty

1732
00:56:06,000 --> 00:56:06,000
对

1733
00:56:06,000 --> 00:56:07,000
就是一个伪中段

1734
00:56:07,000 --> 00:56:09,000
就是它不是一个真正的

1735
00:56:09,000 --> 00:56:10,000
电传打字机的实体

1736
00:56:10,000 --> 00:56:12,000
而是你的计算机

1737
00:56:12,000 --> 00:56:14,000
想象出来的

1738
00:56:15,000 --> 00:56:15,000
它的

1739
00:56:15,000 --> 00:56:17,000
它可以支配的

1740
00:56:17,000 --> 00:56:19,000
诸多电传打字机之一

1741
00:56:20,000 --> 00:56:21,000
但它的作用是

1742
00:56:21,000 --> 00:56:22,000
它的实际作用是什么

1743
00:56:22,000 --> 00:56:24,000
它的作用就是输入和输出

1744
00:56:27,000 --> 00:56:29,000
就是说你打的键盘

1745
00:56:29,000 --> 00:56:31,000
是通过 tty 这个设备

1746
00:56:31,000 --> 00:56:32,000
进入到 kernel 的

1747
00:56:32,000 --> 00:56:34,000
然后 kernel 可以 print 回来的东西

1748
00:56:34,000 --> 00:56:36,000
也是通过这 tty 设备传回来的

1749
00:56:36,000 --> 00:56:36,000
是

1750
00:56:36,000 --> 00:56:38,000
就是你可以这么理解

1751
00:56:38,000 --> 00:56:39,000
比如说我是一台 mainframe

1752
00:56:39,000 --> 00:56:41,000
然后我有输入

1753
00:56:41,000 --> 00:56:42,000
standout out 和 standout error

1754
00:56:42,000 --> 00:56:44,000
和 standout input

1755
00:56:44,000 --> 00:56:45,000
然后同时

1756
00:56:45,000 --> 00:56:45,000
与此同时

1757
00:56:45,000 --> 00:56:46,000
我有很多个 tty

1758
00:56:47,000 --> 00:56:50,000
我连接了很多个实体的机械的电子

1759
00:56:50,000 --> 00:56:51,000
电传打字机

1760
00:56:51,000 --> 00:56:52,000
然后我现在说好

1761
00:56:52,000 --> 00:56:54,000
我要把我的 standout input

1762
00:56:54,000 --> 00:56:57,000
standout input 连接到 tty 1 上

1763
00:56:57,000 --> 00:56:58,000
那么此时

1764
00:56:59,000 --> 00:57:00,000
tty 1 上输入什么

1765
00:57:00,000 --> 00:57:03,000
我就会把它接到我的 standout input

1766
00:57:03,000 --> 00:57:05,000
然后我说我的 standout output

1767
00:57:05,000 --> 00:57:07,000
需要输入到 tty 4 上面

1768
00:57:09,000 --> 00:57:11,000
我比如说 tty 1

1769
00:57:11,000 --> 00:57:13,000
刚才说的 tty 1

1770
00:57:13,000 --> 00:57:14,000
告诉我说 print hello world

1771
00:57:15,000 --> 00:57:17,000
然后我说 standout output 在 tty 4 上

1772
00:57:17,000 --> 00:57:20,000
那么 tty 4 这些电传打字机上

1773
00:57:20,000 --> 00:57:21,000
就会输出 hello world

1774
00:57:23,000 --> 00:57:23,000
对

1775
00:57:23,000 --> 00:57:26,000
它就相当于一个

1776
00:57:26,000 --> 00:57:28,000
标准的输入输出设备

1777
00:57:28,000 --> 00:57:30,000
然后只不过是用软件来模拟

1778
00:57:31,000 --> 00:57:33,000
然后键盘的

1779
00:57:33,000 --> 00:57:34,000
这个世界被操作系统的一个驱动

1780
00:57:34,000 --> 00:57:35,000
不得道也是

1781
00:57:35,000 --> 00:57:38,000
转化到 tty 的一个输入上面去

1782
00:57:38,000 --> 00:57:39,000
再传给内核

1783
00:57:39,000 --> 00:57:40,000
对

1784
00:57:40,000 --> 00:57:41,000
如果你要使用

1785
00:57:43,000 --> 00:57:45,000
terminal simulate

1786
00:57:45,000 --> 00:57:46,000
emulate

1787
00:57:46,000 --> 00:57:49,000
就是说你使用中断模拟器的话

1788
00:57:49,000 --> 00:57:49,000
那就是这样

1789
00:57:50,000 --> 00:57:52,000
但是其他的一些东西里面不是这样

1790
00:57:52,000 --> 00:57:53,000
比如说游戏肯定不是这样

1791
00:57:53,000 --> 00:57:54,000
游戏就是

1792
00:57:54,000 --> 00:57:56,000
直接扫描那个

1793
00:57:57,000 --> 00:57:59,000
硬件盘产生的中断或者是

1794
00:57:59,000 --> 00:58:00,000
whatever that works

1795
00:58:00,000 --> 00:58:02,000
但是跟 tty 没有关系

1796
00:58:03,000 --> 00:58:03,000
OK

1797
00:58:03,000 --> 00:58:04,000
对

1798
00:58:05,000 --> 00:58:09,000
然后到 1980 几年的时候

1799
00:58:09,000 --> 00:58:10,000
DEC

1800
00:58:11,000 --> 00:58:12,000
DEC 全名叫什么

1801
00:58:12,000 --> 00:58:15,000
Digital Equipment Corporation

1802
00:58:15,000 --> 00:58:16,000
对

1803
00:58:16,000 --> 00:58:17,000
数字设备公司

1804
00:58:19,000 --> 00:58:21,000
研发出的这种就是

1805
00:58:22,000 --> 00:58:23,000
用 2 D 的

1806
00:58:23,000 --> 00:58:25,000
用音级设计显示管

1807
00:58:26,000 --> 00:58:27,000
做成了这个所谓的

1808
00:58:27,000 --> 00:58:29,000
单色显示器

1809
00:58:30,000 --> 00:58:31,000
的 terminal

1810
00:58:31,000 --> 00:58:32,000
我们才渐渐淘汰了

1811
00:58:32,000 --> 00:58:34,000
人类才渐渐淘汰了

1812
00:58:35,000 --> 00:58:36,000
tty 这种东西

1813
00:58:36,000 --> 00:58:37,000
但是

1814
00:58:37,000 --> 00:58:40,000
就是砸到纸带上的那种 tty

1815
00:58:40,000 --> 00:58:42,000
终于你有了一个

1816
00:58:42,000 --> 00:58:44,000
就相当于玻璃做的

1817
00:58:44,000 --> 00:58:45,000
这么一个电传达的机

1818
00:58:45,000 --> 00:58:46,000
然后上面

1819
00:58:46,000 --> 00:58:47,000
所以其实他们之前

1820
00:58:47,000 --> 00:58:49,000
那个还是挺废纸的

1821
00:58:49,000 --> 00:58:49,000
是吧

1822
00:58:49,000 --> 00:58:50,000
对相当废纸

1823
00:58:52,000 --> 00:58:53,000
宅男废纸

1824
00:58:54,000 --> 00:58:55,000
你为什么也想到了这个

1825
00:58:55,000 --> 00:58:57,000
我刚才也想说宅男废纸

1826
00:58:58,000 --> 00:58:59,000
那个时代已经过去了

1827
00:58:59,000 --> 00:59:00,000
对

1828
00:59:02,000 --> 00:59:03,000
然后这个

1829
00:59:04,000 --> 00:59:07,000
这个玻璃的 tty 其实就

1830
00:59:07,000 --> 00:59:08,000
简单来说

1831
00:59:08,000 --> 00:59:09,000
替代了一个打印机的作用

1832
00:59:09,000 --> 00:59:10,000
对吧

1833
00:59:11,000 --> 00:59:12,000
替代了

1834
00:59:12,000 --> 00:59:14,000
打印带的输出

1835
00:59:14,000 --> 00:59:15,000
然后输入的话

1836
00:59:16,000 --> 00:59:17,000
最大的优点就是

1837
00:59:17,000 --> 00:59:19,000
你终于可以改自己的输入

1838
00:59:20,000 --> 00:59:21,000
早期的电传达的机

1839
00:59:21,000 --> 00:59:22,000
你要打错了一个字符

1840
00:59:22,000 --> 00:59:23,000
你是改不了的

1841
00:59:24,000 --> 00:59:25,000
输错了怎么办

1842
00:59:25,000 --> 00:59:26,000
这也是一个我的问题

1843
00:59:27,000 --> 00:59:28,000
我也不知道那个时候

1844
00:59:28,000 --> 00:59:29,000
输错了到底是怎么办

1845
00:59:29,000 --> 00:59:30,000
你也许有一个键允许

1846
00:59:30,000 --> 00:59:32,000
你说这行废料

1847
00:59:32,000 --> 00:59:33,000
你回退到某一个地方

1848
00:59:33,000 --> 00:59:34,000
然后

1849
00:59:34,000 --> 00:59:35,000
你再重新

1850
00:59:35,000 --> 00:59:36,000
就是那 ctrl k 吗

1851
00:59:38,000 --> 00:59:38,000
对

1852
00:59:38,000 --> 00:59:39,000
就是

1853
00:59:41,000 --> 00:59:43,000
我相信电传达的机上

1854
00:59:43,000 --> 00:59:44,000
应该还是有 backspace

1855
00:59:45,000 --> 00:59:46,000
backspace 按下去的话

1856
00:59:46,000 --> 00:59:47,000
到底会具体做什么

1857
00:59:47,000 --> 00:59:49,000
它不可能抹掉一个

1858
00:59:49,000 --> 00:59:50,000
已经打好的字符对吧

1859
00:59:51,000 --> 00:59:52,000
我觉得应该是把那行

1860
00:59:53,000 --> 00:59:54,000
kill 掉

1861
00:59:54,000 --> 00:59:56,000
然后在其行新的重新来过

1862
00:59:58,000 --> 00:59:58,000
嗯

1863
00:59:58,000 --> 00:59:59,000
那是

1864
00:59:59,000 --> 01:00:00,000
这是唯一合理的方式

1865
01:00:00,000 --> 01:00:01,000
对

1866
01:00:01,000 --> 01:00:03,000
anyway 这也不是重点

1867
01:00:03,000 --> 01:00:05,000
但最大的

1868
01:00:05,000 --> 01:00:08,000
最大的一个要点就是

1869
01:00:08,000 --> 01:00:09,000
这个玻璃的 terminal

1870
01:00:11,000 --> 01:00:12,000
虽然表面上看

1871
01:00:12,000 --> 01:00:13,000
它是可以改的

1872
01:00:13,000 --> 01:00:15,000
然后可以多行显示

1873
01:00:15,000 --> 01:00:16,000
但它本质上在

1874
01:00:16,000 --> 01:00:19,000
它最底端它还是在模拟

1875
01:00:19,000 --> 01:00:21,000
电传达的机和主机

1876
01:00:21,000 --> 01:00:23,000
交互信息的方式

1877
01:00:24,000 --> 01:00:25,000
也就是说电传达的机

1878
01:00:26,000 --> 01:00:27,000
连接到的主机

1879
01:00:27,000 --> 01:00:29,000
并不知道它自己连接到的是一个

1880
01:00:29,000 --> 01:00:31,000
屏幕还是一个电传达

1881
01:00:32,000 --> 01:00:32,000
对

1882
01:00:33,000 --> 01:00:34,000
然后最广为流行的

1883
01:00:34,000 --> 01:00:36,000
电传达的机的型号

1884
01:00:36,000 --> 01:00:39,000
就是 teletype model 33

1885
01:00:39,000 --> 01:00:42,000
teletype model 33 ASR

1886
01:00:42,000 --> 01:00:44,000
然后我们熟知

1887
01:00:44,000 --> 01:00:45,000
并且爱家的

1888
01:00:45,000 --> 01:00:47,000
帐单大门先生

1889
01:00:50,000 --> 01:00:52,000
就是在这台电脑上

1890
01:00:52,000 --> 01:00:55,000
开始了他的第一次编程之旅

1891
01:00:57,000 --> 01:00:57,000
对

1892
01:00:59,000 --> 01:01:02,000
然后第一台电传达的机的

1893
01:01:02,000 --> 01:01:03,000
所使用的

1894
01:01:03,000 --> 01:01:03,000
我们刚才提到

1895
01:01:03,000 --> 01:01:07,000
这个 Aucoustic coupler 的速率是 300

1896
01:01:08,000 --> 01:01:09,000
bits per second

1897
01:01:10,000 --> 01:01:12,000
各位可以想象一下这个速度

1898
01:01:12,000 --> 01:01:14,000
300 bits 除以 8

1899
01:01:14,000 --> 01:01:15,000
我想象

1900
01:01:15,000 --> 01:01:16,000
等一下

1901
01:01:16,000 --> 01:01:19,000
bits 除以 8 得到 byte

1902
01:01:20,000 --> 01:01:21,000
有两

1903
01:01:22,000 --> 01:01:24,000
38240

1904
01:01:24,000 --> 01:01:25,000
3

1905
01:01:26,000 --> 01:01:26,000
算一下

1906
01:01:27,000 --> 01:01:28,000
300 除以 8

1907
01:01:28,000 --> 01:01:30,000
37.5 byte per second

1908
01:01:30,000 --> 01:01:32,000
每秒钟可以打

1909
01:01:33,000 --> 01:01:33,000
30

1910
01:01:34,000 --> 01:01:37,000
加差不多 38 的自缚的速率

1911
01:01:37,000 --> 01:01:40,000
我们今天的 show note

1912
01:01:40,000 --> 01:01:43,000
如果用 300 bps 的

1913
01:01:44,000 --> 01:01:46,000
modem 来传输的话

1914
01:01:46,000 --> 01:01:48,000
大概一两小时

1915
01:01:48,000 --> 01:01:48,000
没错

1916
01:01:49,000 --> 01:01:50,000
太不可思议了

1917
01:01:52,000 --> 01:01:54,000
对这种感觉就像在辐射里面

1918
01:01:54,000 --> 01:01:56,000
看 terminal 上一行一行

1919
01:01:56,000 --> 01:01:58,000
会蹦字的感觉

1920
01:01:59,000 --> 01:02:01,000
对这个也是一个

1921
01:02:01,000 --> 01:02:03,000
科幻片常用的一个梗

1922
01:02:04,000 --> 01:02:05,000
那个字是一行一行

1923
01:02:05,000 --> 01:02:07,000
就是一个一个字出现的

1924
01:02:08,000 --> 01:02:10,000
这个一定是从当年他们电传达之间

1925
01:02:10,000 --> 01:02:11,000
有获得灵感

1926
01:02:11,000 --> 01:02:13,000
看着那个字一个一个梦境冒出来

1927
01:02:13,000 --> 01:02:15,000
觉得很有一种科技感

1928
01:02:15,000 --> 01:02:15,000
是吧

1929
01:02:15,000 --> 01:02:16,000
其实

1930
01:02:16,000 --> 01:02:17,000
其实根本就是技术线

1931
01:02:17,000 --> 01:02:19,000
对

1932
01:02:20,000 --> 01:02:22,000
就下次求这种什么

1933
01:02:23,000 --> 01:02:25,000
科幻片再也不要用这种特效了

1934
01:02:25,000 --> 01:02:26,000
真的实在是太 low 了

1935
01:02:27,000 --> 01:02:31,000
我的第一只猫是 28.8 k 的

1936
01:02:32,000 --> 01:02:33,000
24.4 k

1937
01:02:33,000 --> 01:02:34,000
28.8 k

1938
01:02:34,000 --> 01:02:34,000
k

1939
01:02:34,000 --> 01:02:35,000
k

1940
01:02:35,000 --> 01:02:39,000
然后这一台猫是 0.3 k

1941
01:02:39,000 --> 01:02:42,000
就这样

1942
01:02:44,000 --> 01:02:44,000
对

1943
01:02:47,000 --> 01:02:49,000
上 BBS 都显卡

1944
01:02:49,000 --> 01:02:50,000
上 BBS

1945
01:02:50,000 --> 01:02:53,000
那个时候真的是 BBS 没有什么

1946
01:02:54,000 --> 01:02:56,000
我相信那个时候的 BBS 根本不存在

1947
01:02:56,000 --> 01:02:56,000
还没网络

1948
01:02:58,000 --> 01:02:59,000
还没网络

1949
01:02:59,000 --> 01:03:01,000
早期的 BBS 根本就是转信站

1950
01:03:02,000 --> 01:03:04,000
你在离线状态下写好信

1951
01:03:04,000 --> 01:03:05,000
读好信

1952
01:03:05,000 --> 01:03:06,000
然后连线

1953
01:03:06,000 --> 01:03:08,000
把所有需要收和发的信

1954
01:03:09,000 --> 01:03:10,000
一次性收和发

1955
01:03:10,000 --> 01:03:11,000
然后再离线

1956
01:03:11,000 --> 01:03:13,000
再读你刚才收到的什么

1957
01:03:13,000 --> 01:03:14,000
然后写你要写的

1958
01:03:15,000 --> 01:03:17,000
这其实是离散那种状态

1959
01:03:17,000 --> 01:03:18,000
像现在这种

1960
01:03:19,000 --> 01:03:20,000
instant messenger

1961
01:03:20,000 --> 01:03:22,000
真是不可想象的东西

1962
01:03:24,000 --> 01:03:25,000
对

1963
01:03:25,000 --> 01:03:27,000
然后时光光阴人染

1964
01:03:27,000 --> 01:03:29,000
我们来到了 UNIX 时代

1965
01:03:30,000 --> 01:03:31,000
在贝尔实验室

1966
01:03:32,000 --> 01:03:33,000
和 MIT

1967
01:03:33,000 --> 01:03:36,000
和这个通用电器里面的

1968
01:03:36,000 --> 01:03:37,000
通用电器的实验室里面

1969
01:03:37,000 --> 01:03:38,000
出现了一种操作系统

1970
01:03:38,000 --> 01:03:40,000
叫做 MultiX

1971
01:03:41,000 --> 01:03:44,000
那是 Multiple Time

1972
01:03:44,000 --> 01:03:46,000
就什么多用户分时系统

1973
01:03:46,000 --> 01:03:47,000
这么一个东西

1974
01:03:48,000 --> 01:03:49,000
然后它的后

1975
01:03:49,000 --> 01:03:52,000
在那个时代还是使用电池卡子机的

1976
01:03:52,000 --> 01:03:54,000
但是到了 UNIX 时代

1977
01:03:54,000 --> 01:03:56,000
基本上已经全都切换到了这个

1978
01:03:57,000 --> 01:03:59,000
就是带显示器的 Terminal

1979
01:04:00,000 --> 01:04:02,000
然后在 Terminal 时代

1980
01:04:03,000 --> 01:04:05,000
Terminal 出现的时代

1981
01:04:05,000 --> 01:04:08,000
人们延续了 MultiX 里面的一个概念

1982
01:04:08,000 --> 01:04:10,000
就是 Shale 的概念

1983
01:04:11,000 --> 01:04:11,000
然后

1984
01:04:13,000 --> 01:04:14,000
要不你来解释一下什么是 Shale

1985
01:04:14,000 --> 01:04:16,000
Shale 跟 Kernel 的关系

1986
01:04:16,000 --> 01:04:18,000
我们节目叫做 Kernel Panic

1987
01:04:18,000 --> 01:04:20,000
但是我们今天这一期在讲 Shale

1988
01:04:20,000 --> 01:04:21,000
然后了解关系

1989
01:04:21,000 --> 01:04:22,000
壳

1990
01:04:22,000 --> 01:04:22,000
对

1991
01:04:23,000 --> 01:04:24,000
因为现在有内壳

1992
01:04:24,000 --> 01:04:26,000
有壳的话就会有一个壳吧

1993
01:04:26,000 --> 01:04:28,000
壳是执行那些实际的

1994
01:04:29,000 --> 01:04:30,000
程序的

1995
01:04:30,000 --> 01:04:31,000
可以这么说了

1996
01:04:31,000 --> 01:04:33,000
然后 Shale 其实就是给用户

1997
01:04:34,000 --> 01:04:38,000
用于用户和内壳交互的一个工具

1998
01:04:38,000 --> 01:04:38,000
对吧

1999
01:04:38,000 --> 01:04:38,000
对

2000
01:04:39,000 --> 01:04:39,000
这有点

2001
01:04:39,000 --> 01:04:40,000
然后 Shale 的

2002
01:04:41,000 --> 01:04:41,000
你说

2003
01:04:43,000 --> 01:04:45,000
然后 Shale 的主要的功能就是什么

2004
01:04:45,000 --> 01:04:47,000
就是让用户输入命令

2005
01:04:47,000 --> 01:04:50,000
然后传给 Kernel 去执行

2006
01:04:50,000 --> 01:04:53,000
然后再把执行的结果

2007
01:04:53,000 --> 01:04:55,000
再展示给用户

2008
01:04:55,000 --> 01:04:56,000
就通过这个 TTY

2009
01:04:57,000 --> 01:04:58,000
电传达字机接口

2010
01:04:58,000 --> 01:04:59,000
对

2011
01:05:02,000 --> 01:05:03,000
我觉得 Shale 这个名字

2012
01:05:03,000 --> 01:05:04,000
其实最开始的时候

2013
01:05:04,000 --> 01:05:06,000
我接触会觉得它有点迷惑性

2014
01:05:06,000 --> 01:05:07,000
因为

2015
01:05:08,000 --> 01:05:10,000
Shale 在它的

2016
01:05:10,000 --> 01:05:11,000
索指上面

2017
01:05:11,000 --> 01:05:13,000
其实是专门指这个

2018
01:05:13,000 --> 01:05:15,000
跟用户输入输出

2019
01:05:15,000 --> 01:05:18,000
那是执行脚本的这么一个小工具

2020
01:05:18,000 --> 01:05:20,000
然后这个工具它跑起来的时候

2021
01:05:20,000 --> 01:05:23,000
会让你可以通过命令行来

2022
01:05:23,000 --> 01:05:24,000
跟内壳打交道

2023
01:05:24,000 --> 01:05:25,000
但实际上

2024
01:05:27,000 --> 01:05:30,000
如果你去专门追究它这个名字的话

2025
01:05:30,000 --> 01:05:32,000
那 Kernel 跑在核心层

2026
01:05:33,000 --> 01:05:35,000
但并不是所有跑在外层的

2027
01:05:35,000 --> 01:05:36,000
都是 Shale

2028
01:05:36,000 --> 01:05:36,000
对吧

2029
01:05:37,000 --> 01:05:38,000
对

2030
01:05:38,000 --> 01:05:39,000
因为还有那个 User space 的程序

2031
01:05:39,000 --> 01:05:40,000
还有其他一些程序

2032
01:05:40,000 --> 01:05:42,000
这些程序可能不会直接跟你打交道

2033
01:05:42,000 --> 01:05:44,000
也可能会跟你打交道

2034
01:05:44,000 --> 01:05:45,000
但是他们在跟你打交道的时候

2035
01:05:45,000 --> 01:05:48,000
并不会被称为 Shale

2036
01:05:49,000 --> 01:05:51,000
如果早期比较迷惑这件事情

2037
01:05:52,000 --> 01:05:53,000
但是

2038
01:05:53,000 --> 01:05:55,000
所以 Shale 类比于图形层的话

2039
01:05:55,000 --> 01:05:56,000
应该是属于哪一层

2040
01:05:56,000 --> 01:06:00,000
应该是属于 Gui 的那些

2041
01:06:00,000 --> 01:06:03,000
那些这些组件那层应该是

2042
01:06:03,000 --> 01:06:04,000
对

2043
01:06:04,000 --> 01:06:05,000
应该可以理解

2044
01:06:05,000 --> 01:06:07,000
大致可以这么对应起来

2045
01:06:07,000 --> 01:06:11,000
但是当然 Gui 的层级

2046
01:06:11,000 --> 01:06:12,000
乃至于抽象的复杂程度

2047
01:06:12,000 --> 01:06:15,000
都要比 Shale 要高得多

2048
01:06:16,000 --> 01:06:17,000
对

2049
01:06:17,000 --> 01:06:20,000
然后早期的 Shale 也是面向行的

2050
01:06:20,000 --> 01:06:20,000
因为

2051
01:06:21,000 --> 01:06:22,000
Shale 的一个功用

2052
01:06:22,000 --> 01:06:24,000
就是让你在 Terminal 上

2053
01:06:24,000 --> 01:06:26,000
可以跟远程机交互

2054
01:06:26,000 --> 01:06:28,000
而所有的交互都

2055
01:06:29,000 --> 01:06:30,000
因为早期电池档的影响

2056
01:06:30,000 --> 01:06:32,000
被限制为一行一行

2057
01:06:32,000 --> 01:06:33,000
所以在早期的 Shale 里面

2058
01:06:33,000 --> 01:06:34,000
你也是大部分时候

2059
01:06:34,000 --> 01:06:36,000
你从一行来输入命令

2060
01:06:37,000 --> 01:06:38,000
Unix 早期作者之一

2061
01:06:38,000 --> 01:06:40,000
就是我们上一期提到

2062
01:06:40,000 --> 01:06:42,000
大名鼎鼎的 Ken Tomperson

2063
01:06:43,000 --> 01:06:45,000
他在写 Unix 的时候

2064
01:06:46,000 --> 01:06:47,000
也沿用了 Shale 的称谱

2065
01:06:48,000 --> 01:06:50,000
但是 Ken Tomperson 所写的 Shale

2066
01:06:52,000 --> 01:06:54,000
要比 Multiple 的 Shale 多很多特征

2067
01:06:54,000 --> 01:06:55,000
比如说一个最早期的

2068
01:06:55,000 --> 01:06:57,000
最重要的特征之一

2069
01:06:57,000 --> 01:06:59,000
就是所谓的

2070
01:07:01,000 --> 01:07:02,000
输入输出重新项

2071
01:07:02,000 --> 01:07:05,000
我们不管是 DOS 用户

2072
01:07:05,000 --> 01:07:06,000
还是另一个次用户

2073
01:07:06,000 --> 01:07:07,000
一定都很熟悉

2074
01:07:07,000 --> 01:07:09,000
就如果你用命令行的话

2075
01:07:09,000 --> 01:07:10,000
你一定会知道

2076
01:07:10,000 --> 01:07:11,000
你可以把一个文件的内容

2077
01:07:12,000 --> 01:07:14,000
当做某一个命令的输入

2078
01:07:14,000 --> 01:07:15,000
传给这个命令

2079
01:07:15,000 --> 01:07:17,000
或者把这个命令的输出

2080
01:07:17,000 --> 01:07:18,000
转化为一个文件

2081
01:07:18,000 --> 01:07:18,000
对吧

2082
01:07:19,000 --> 01:07:20,000
然后这个特征是通过

2083
01:07:20,000 --> 01:07:21,000
大语号小语号的实现

2084
01:07:21,000 --> 01:07:23,000
然后这个功能

2085
01:07:23,000 --> 01:07:24,000
在最开始的时候

2086
01:07:24,000 --> 01:07:25,000
就是 Ken Tomperson 所写的

2087
01:07:25,000 --> 01:07:26,000
第一代的

2088
01:07:27,000 --> 01:07:28,000
Unix 的 Shale 的一个功能

2089
01:07:28,000 --> 01:07:29,000
这是 1971 年的事情

2090
01:07:29,000 --> 01:07:30,000
看到

2091
01:07:30,000 --> 01:07:32,000
所以你每次在做输入

2092
01:07:32,000 --> 01:07:33,000
输出重新项的时候

2093
01:07:33,000 --> 01:07:34,000
你就在使用一个

2094
01:07:34,000 --> 01:07:37,000
1971 年就有的一个功能

2095
01:07:37,000 --> 01:07:39,000
想想还是挺特别的

2096
01:07:42,000 --> 01:07:44,000
然后后期 Ken Tomperson 的 Shale

2097
01:07:44,000 --> 01:07:47,000
也多了就是 Type 这支功能

2098
01:07:47,000 --> 01:07:50,000
就是我们今天会管道服

2099
01:07:50,000 --> 01:07:51,000
会经常说

2100
01:07:51,000 --> 01:07:53,000
命令行最强大的功能之一

2101
01:07:53,000 --> 01:07:54,000
就是管道服

2102
01:07:54,000 --> 01:07:54,000
对吧

2103
01:07:54,000 --> 01:07:55,000
你可以把一个功能

2104
01:07:55,000 --> 01:07:57,000
你可以把一个命令的输出

2105
01:07:57,000 --> 01:07:58,000
重领

2106
01:07:59,000 --> 01:07:59,000
也是重领项

2107
01:07:59,000 --> 01:08:00,000
对

2108
01:08:00,000 --> 01:08:03,000
通过管道服重领项到

2109
01:08:03,000 --> 01:08:04,000
另外一个程序的输入

2110
01:08:05,000 --> 01:08:07,000
然后这个特征也是在 Ken Tomperson

2111
01:08:07,000 --> 01:08:09,000
所写的 Shale 里面

2112
01:08:09,000 --> 01:08:10,000
就已经出现了

2113
01:08:11,000 --> 01:08:13,000
然后 1979 年的时候

2114
01:08:13,000 --> 01:08:16,000
Uniqs 的 Version 7

2115
01:08:16,000 --> 01:08:18,000
简称 V 7 发布了

2116
01:08:18,000 --> 01:08:21,000
然后再随着 V 7 一同搭载的

2117
01:08:21,000 --> 01:08:24,000
这个 Shale 叫做 Born Shell

2118
01:08:25,000 --> 01:08:28,000
作者是应该是 Alga 原的作者之一

2119
01:08:29,000 --> 01:08:31,000
叫做 Stefan Born

2120
01:08:32,000 --> 01:08:33,000
为什么这个 Shale

2121
01:08:33,000 --> 01:08:35,000
没有被叫做 B Shell

2122
01:08:35,000 --> 01:08:35,000
就是

2123
01:08:37,000 --> 01:08:39,000
他直接就延续了 Ken Tomperson

2124
01:08:39,000 --> 01:08:42,000
所写的这个 Shale 的名字叫做 SH

2125
01:08:43,000 --> 01:08:44,000
然后

2126
01:08:44,000 --> 01:08:46,000
因为他是向后兼容的

2127
01:08:47,000 --> 01:08:49,000
Bash 也是向后兼容的

2128
01:08:49,000 --> 01:08:50,000
但可能在这个时候

2129
01:08:50,000 --> 01:08:52,000
这个给 Shale 重领名的风气

2130
01:08:52,000 --> 01:08:53,000
还没有流行起来

2131
01:08:53,000 --> 01:08:54,000
我觉得

2132
01:08:56,000 --> 01:08:57,000
所以直到今天

2133
01:08:57,000 --> 01:09:00,000
这个 Born Shell 一直也是世界上

2134
01:09:00,000 --> 01:09:02,000
最为广泛使用的 Shale 之一

2135
01:09:03,000 --> 01:09:04,000
因为

2136
01:09:04,000 --> 01:09:06,000
Assistant V 7 是一个非常成功的

2137
01:09:06,000 --> 01:09:06,000
Uniqs 版本

2138
01:09:06,000 --> 01:09:08,000
很多后世的 Uniqs 变种

2139
01:09:08,000 --> 01:09:10,000
也都是以 Assistant V 7 为原兰本

2140
01:09:11,000 --> 01:09:13,000
直到今天包括你的

2141
01:09:14,000 --> 01:09:16,000
包括你手上的 Mac

2142
01:09:16,000 --> 01:09:18,000
你面前的 Mac

2143
01:09:18,000 --> 01:09:19,000
你手上的

2144
01:09:19,000 --> 01:09:20,000
iPhone

2145
01:09:20,000 --> 01:09:21,000
还有你的 Android

2146
01:09:21,000 --> 01:09:22,000
全都有

2147
01:09:22,000 --> 01:09:23,000
slashbin

2148
01:09:23,000 --> 01:09:24,000
slashsh 这个东西

2149
01:09:24,000 --> 01:09:26,000
这个东西是从 1979 年开始

2150
01:09:26,000 --> 01:09:27,000
就已经存在于

2151
01:09:28,000 --> 01:09:29,000
很多很多的聚散器系统里

2152
01:09:31,000 --> 01:09:32,000
对

2153
01:09:32,000 --> 01:09:33,000
然后

2154
01:09:35,000 --> 01:09:37,000
从 Assistant V 7 开始

2155
01:09:38,000 --> 01:09:40,000
我们有了 Posix

2156
01:09:40,000 --> 01:09:41,000
标准

2157
01:09:41,000 --> 01:09:44,000
然后 Posix 标准也定义说

2158
01:09:44,000 --> 01:09:46,000
Shale 必须存在于 slashbin

2159
01:09:46,000 --> 01:09:47,000
slashsh 下面

2160
01:09:47,000 --> 01:09:49,000
然后所有符合这个标准的 Shale

2161
01:09:49,000 --> 01:09:51,000
也会被叫做 sh

2162
01:09:52,000 --> 01:09:52,000
所以也就是说

2163
01:09:52,000 --> 01:09:54,000
当某人说这个

2164
01:09:54,000 --> 01:09:56,000
这个 Shale 是 sh compatible 的时候

2165
01:09:56,000 --> 01:09:57,000
他会

2166
01:09:57,000 --> 01:09:59,000
他所指的意思实际上就是

2167
01:09:59,000 --> 01:10:02,000
只跟我们刚才提到的这三种 Shale

2168
01:10:02,000 --> 01:10:03,000
是互相介绍的

2169
01:10:03,000 --> 01:10:05,000
但如果你一定要非常精确的说

2170
01:10:05,000 --> 01:10:06,000
一个 Shale 是

2171
01:10:07,000 --> 01:10:10,000
符合 Posix 的所有标准的话

2172
01:10:10,000 --> 01:10:13,000
你应该说它是 PosixShale

2173
01:10:15,000 --> 01:10:18,000
然后在 1978 年的时候

2174
01:10:18,000 --> 01:10:21,000
又开始了另外一个 Shale 的研发工作

2175
01:10:22,000 --> 01:10:25,000
这个作者是另外一位

2176
01:10:26,000 --> 01:10:28,000
我们之前也提到过的 Billy Joy

2177
01:10:28,000 --> 01:10:30,000
然后他 Billy Joy 写过什么呢

2178
01:10:30,000 --> 01:10:31,000
快速问答

2179
01:10:31,000 --> 01:10:32,000
Billy Joy 写过什么

2180
01:10:34,000 --> 01:10:35,000
写的是什么

2181
01:10:35,000 --> 01:10:36,000
VI

2182
01:10:36,000 --> 01:10:37,000
不是 VIM

2183
01:10:37,000 --> 01:10:38,000
是 VI

2184
01:10:38,000 --> 01:10:40,000
就是最早期的那个 V

2185
01:10:40,000 --> 01:10:44,000
编辑器

2186
01:10:44,000 --> 01:10:47,000
他还写了一个 Shale 叫做 C-Shale

2187
01:10:47,000 --> 01:10:49,000
然后 C-Shale 的一个卖点就是

2188
01:10:50,000 --> 01:10:52,000
Shale 这个东西就是

2189
01:10:52,000 --> 01:10:53,000
我们

2190
01:10:53,000 --> 01:10:55,000
如果你不用 C-Shale 的话

2191
01:10:55,000 --> 01:10:59,000
你会感觉到 Shale 的语法跟 C 离得很远

2192
01:10:59,000 --> 01:11:01,000
但是在 C-Shale 诞生的那个年代

2193
01:11:01,000 --> 01:11:04,000
Unix 基本上全都是用 C 来写的

2194
01:11:04,000 --> 01:11:06,000
Unix 不管是用户程序

2195
01:11:06,000 --> 01:11:08,000
还是 Unix 本身都是用 C 来写的

2196
01:11:08,000 --> 01:11:11,000
所以 C-Shale 的一个设计理念

2197
01:11:11,000 --> 01:11:12,000
就是希望能够让

2198
01:11:14,000 --> 01:11:16,000
Shale 的语法尽量接近于 C 的语法

2199
01:11:17,000 --> 01:11:18,000
当然我们在今天来看

2200
01:11:18,000 --> 01:11:21,000
可能 C-Shale 的语法并不那么接近 C

2201
01:11:22,000 --> 01:11:24,000
但是在 80 年代你会觉得

2202
01:11:24,000 --> 01:11:27,000
我靠这个东西真的是跟写 C 语言太接近了

2203
01:11:29,000 --> 01:11:29,000
但是我

2204
01:11:29,000 --> 01:11:30,000
Which is a good

2205
01:11:30,000 --> 01:11:32,000
Which was a good thing

2206
01:11:32,000 --> 01:11:34,000
但是今天我会觉得说

2207
01:11:34,000 --> 01:11:35,000
我靠为什么一个语言

2208
01:11:35,000 --> 01:11:36,000
一个 Shale script

2209
01:11:36,000 --> 01:11:38,000
是要写的跟 C 一样

2210
01:11:38,000 --> 01:11:39,000
这不是自寻烦恼

2211
01:11:39,000 --> 01:11:40,000
但是那个时代

2212
01:11:40,000 --> 01:11:42,000
如果你在电脑上只有 C

2213
01:11:42,000 --> 01:11:43,000
你也只会

2214
01:11:43,000 --> 01:11:44,000
你也只学过 C 的话

2215
01:11:44,000 --> 01:11:45,000
你会觉得

2216
01:11:45,000 --> 01:11:48,000
可以用像写 C 语言一样来写 Shale script

2217
01:11:48,000 --> 01:11:49,000
是很爽的一件事情

2218
01:11:50,000 --> 01:11:53,000
然后 C-Shale 的有很多非常多的创新

2219
01:11:53,000 --> 01:11:55,000
比如说 History

2220
01:11:56,000 --> 01:11:59,000
你现在在命令行下面打 History

2221
01:11:59,000 --> 01:12:02,000
你会看到自己输入过的所有命令

2222
01:12:02,000 --> 01:12:04,000
以及你比如说你打

2223
01:12:04,000 --> 01:12:05,000
Dollar

2224
01:12:09,000 --> 01:12:12,000
改单号你会重复前一条命令

2225
01:12:12,000 --> 01:12:13,000
那至于你打

2226
01:12:13,000 --> 01:12:15,000
比如说 Dollar 下滑线

2227
01:12:15,000 --> 01:12:22,000
会把刚才上一条命令的最后一个参数重新用过来

2228
01:12:23,000 --> 01:12:25,000
这一切都是源自于 C-Shale

2229
01:12:25,000 --> 01:12:28,000
是 C-Shale 创造了 History 这个东西

2230
01:12:28,000 --> 01:12:30,000
然后也是从 C-Shale 开始

2231
01:12:30,000 --> 01:12:31,000
人们有 drop control

2232
01:12:32,000 --> 01:12:36,000
你在 Dots 下面可能没有遇到过什么东西

2233
01:12:36,000 --> 01:12:36,000
就是

2234
01:12:37,000 --> 01:12:39,000
Dots 早期不是多任务的吧

2235
01:12:40,000 --> 01:12:41,000
你不可能在 Dots 上面

2236
01:12:41,000 --> 01:12:41,000
不是

2237
01:12:41,000 --> 01:12:43,000
整个可以把他 suspend

2238
01:12:44,000 --> 01:12:46,000
但是在 units 下面

2239
01:12:46,000 --> 01:12:48,000
你从很早很早的时候就可以开始

2240
01:12:48,000 --> 01:12:49,000
比如说你正在

2241
01:12:50,000 --> 01:12:51,000
解压缩的什么东西

2242
01:12:51,000 --> 01:12:53,000
然后它需要一段时间

2243
01:12:53,000 --> 01:12:55,000
你可以按 Ctrl 加 Z 让他进入后台

2244
01:12:55,000 --> 01:12:56,000
然后用 BG

2245
01:12:56,000 --> 01:12:57,000
让他在后台继续执行

2246
01:12:57,000 --> 01:12:59,000
然后你应该在前台做一些别的什么东西

2247
01:13:00,000 --> 01:13:02,000
然后你应该同时进行很多这样的工作

2248
01:13:02,000 --> 01:13:05,000
比如说我现在用 Wim 习惯

2249
01:13:06,000 --> 01:13:07,000
写到一半然后 Ctrl 加 Z

2250
01:13:07,000 --> 01:13:08,000
然后去干点别的

2251
01:13:08,000 --> 01:13:11,000
然后再 FG 把 Wim 弄回来

2252
01:13:11,000 --> 01:13:16,000
然后这个功能也是在 C-Shale 里面被

2253
01:13:16,000 --> 01:13:18,000
威力作为实现的

2254
01:13:18,000 --> 01:13:20,000
我就是有点好奇刚才那个场景

2255
01:13:21,000 --> 01:13:24,000
我一般是说再开一个新的窗口

2256
01:13:24,000 --> 01:13:25,000
或者 Tab 来实现

2257
01:13:26,000 --> 01:13:28,000
就是用放入后台

2258
01:13:28,000 --> 01:13:30,000
这个我还真的挺少用

2259
01:13:30,000 --> 01:13:30,000
OK

2260
01:13:30,000 --> 01:13:31,000
我还蛮常用的

2261
01:13:31,000 --> 01:13:32,000
但如果说你的

2262
01:13:32,000 --> 01:13:34,000
你这个系统是一个单

2263
01:13:35,000 --> 01:13:36,000
如果你是一个远程系统

2264
01:13:36,000 --> 01:13:37,000
比如说

2265
01:13:37,000 --> 01:13:38,000
然后你只能

2266
01:13:38,000 --> 01:13:40,000
你再开一个窗口也可以

2267
01:13:40,000 --> 01:13:42,000
但你再开一个 SSH 连接

2268
01:13:42,000 --> 01:13:43,000
可能要等一下

2269
01:13:43,000 --> 01:13:45,000
对这个问题的解法其实就是三种

2270
01:13:45,000 --> 01:13:47,000
一多任务

2271
01:13:47,000 --> 01:13:48,000
二 T-MAC

2272
01:13:48,000 --> 01:13:50,000
就是所谓的 Terminal Multiplexing

2273
01:13:50,000 --> 01:13:52,000
就是中端奉用

2274
01:13:52,000 --> 01:13:53,000
可以在一个中端里面

2275
01:13:53,000 --> 01:13:55,000
开很多小中端的窗口

2276
01:13:55,000 --> 01:13:58,000
这也是一个比较重要的奇迹引巧

2277
01:13:58,000 --> 01:13:58,000
就一定要学起来

2278
01:13:58,000 --> 01:14:00,000
然后再第三个方式

2279
01:14:00,000 --> 01:14:02,000
就是你再建立一个连接好

2280
01:14:03,000 --> 01:14:05,000
然后对个人是比较轻松

2281
01:14:05,000 --> 01:14:06,000
第一种

2282
01:14:06,000 --> 01:14:08,000
因为一个事先只做一件事情

2283
01:14:08,000 --> 01:14:11,000
就会比较好一些

2284
01:14:11,000 --> 01:14:12,000
OK

2285
01:14:12,000 --> 01:14:13,000
这看我养成这个习惯

2286
01:14:13,000 --> 01:14:15,000
会比较顺畅一些

2287
01:14:15,000 --> 01:14:18,000
而且其实就是早期有很多

2288
01:14:18,000 --> 01:14:21,000
我也曾经试图把 Wim 配置成一个 IEE

2289
01:14:21,000 --> 01:14:22,000
因为你比如在 Wim 里面

2290
01:14:22,000 --> 01:14:24,000
就直接执行程序

2291
01:14:24,000 --> 01:14:25,000
或者是什么

2292
01:14:25,000 --> 01:14:26,000
其实是图佬

2293
01:14:26,000 --> 01:14:26,000
对

2294
01:14:26,000 --> 01:14:30,000
但你为什么不直接干脆把 Wim 挂起来

2295
01:14:30,000 --> 01:14:32,000
然后在命令行下面做你该做的事情

2296
01:14:32,000 --> 01:14:33,000
然后该回去的时候回去了

2297
01:14:33,000 --> 01:14:33,000
对吧

2298
01:14:36,000 --> 01:14:36,000
哎呀

2299
01:14:36,000 --> 01:14:37,000
又这样

2300
01:14:37,000 --> 01:14:38,000
然后回到我们的历史课

2301
01:14:38,000 --> 01:14:40,000
这次的历史真的要讲好久

2302
01:14:42,000 --> 01:14:43,000
刚才说 C-Share

2303
01:14:43,000 --> 01:14:46,000
C-Share 还有一些别的一些新的创新

2304
01:14:46,000 --> 01:14:48,000
比如说 Tool Notation

2305
01:14:48,000 --> 01:14:48,000
就是

2306
01:14:49,000 --> 01:14:52,000
你在你的 Home

2307
01:14:52,000 --> 01:14:53,000
进入加目录

2308
01:14:53,000 --> 01:14:54,000
比如说你的 Home

2309
01:14:54,000 --> 01:14:58,000
你的目录是 slash home slash Taw

2310
01:14:58,000 --> 01:15:01,000
然后我可以用一个不按号来代替这个目录

2311
01:15:02,000 --> 01:15:03,000
诸如此类的

2312
01:15:03,000 --> 01:15:04,000
还有什么 joining

2313
01:15:04,000 --> 01:15:08,000
就是比如说你要在同一行上面运行两个程序

2314
01:15:08,000 --> 01:15:10,000
你可以用一个分号把它们分开来

2315
01:15:10,000 --> 01:15:12,000
说运行第一个再运行第二个

2316
01:15:12,000 --> 01:15:14,000
或者你可以用两个 ampersand 把它们连起来

2317
01:15:14,000 --> 01:15:18,000
就是说如果第一个成功了才运行第二个

2318
01:15:18,000 --> 01:15:19,000
或者你可以用两个

2319
01:15:19,000 --> 01:15:21,000
用一个 pipe

2320
01:15:22,000 --> 01:15:25,000
比如说只有第一个失败了才会运行第二个之类的

2321
01:15:25,000 --> 01:15:26,000
这些

2322
01:15:26,000 --> 01:15:27,000
代表 or

2323
01:15:27,000 --> 01:15:31,000
这些都是在 C-Share 里面的发明

2324
01:15:31,000 --> 01:15:33,000
这个跟 C 很像

2325
01:15:33,000 --> 01:15:33,000
对吧

2326
01:15:33,000 --> 01:15:35,000
ampersand 和 pipe

2327
01:15:35,000 --> 01:15:36,000
都是在原来 C 的

2328
01:15:38,000 --> 01:15:39,000
然后到 1980 年的时候

2329
01:15:39,000 --> 01:15:41,000
我们有了 K-Shale

2330
01:15:41,000 --> 01:15:42,000
Corn-Shale

2331
01:15:42,000 --> 01:15:44,000
是在

2332
01:15:45,000 --> 01:15:46,000
这个时候应该是

2333
01:15:46,000 --> 01:15:49,000
贝尔实验室专门为 unix 发行

2334
01:15:49,000 --> 01:15:51,000
然后这个时候恰逢

2335
01:15:52,000 --> 01:15:55,000
所谓的 unix great war

2336
01:15:55,000 --> 01:15:58,000
是在 unix 的历史上曾出现过一系列的

2337
01:15:58,000 --> 01:15:59,000
因为

2338
01:15:59,000 --> 01:16:03,000
版权法和商业化

2339
01:16:03,000 --> 01:16:07,000
引发一系列诉讼和口水账

2340
01:16:08,000 --> 01:16:10,000
因此

2341
01:16:10,000 --> 01:16:10,000
也是因此

2342
01:16:10,000 --> 01:16:12,000
这个形式片大好

2343
01:16:12,000 --> 01:16:13,000
unix 分裂了

2344
01:16:13,000 --> 01:16:14,000
给了这些什么

2345
01:16:14,000 --> 01:16:18,000
微软这种公司的可乘之机

2346
01:16:19,000 --> 01:16:21,000
在这个时代出现了 K-Shale

2347
01:16:22,000 --> 01:16:23,000
就是 Corn-Shale

2348
01:16:23,000 --> 01:16:24,000
它的作者叫做

2349
01:16:24,000 --> 01:16:26,000
作者叫什么 Corn

2350
01:16:27,000 --> 01:16:29,000
他是以 Devichore

2351
01:16:29,000 --> 01:16:31,000
以 Corn 来命名

2352
01:16:31,000 --> 01:16:33,000
然后 Corn 也有一些新的

2353
01:16:33,000 --> 01:16:35,000
也有一些创新

2354
01:16:35,000 --> 01:16:36,000
但是没有 C-Shale 那么多

2355
01:16:39,000 --> 01:16:41,000
而且 K-Shale 从来没有流行起来

2356
01:16:41,000 --> 01:16:42,000
只有这个

2357
01:16:43,000 --> 01:16:45,000
unix 的一些官方版本还在用

2358
01:16:45,000 --> 01:16:48,000
就是那个时候 BSD 就专门避免使用它

2359
01:16:48,000 --> 01:16:50,000
因为这个 K-Shale 原码

2360
01:16:50,000 --> 01:16:52,000
当时是没有自然发放的

2361
01:16:53,000 --> 01:16:54,000
然后当 Linux 兴起的时候

2362
01:16:54,000 --> 01:16:56,000
K-Shale 更是没有人理

2363
01:16:56,000 --> 01:16:59,000
他们直接就用了这个 Gin with Bash

2364
01:17:01,000 --> 01:17:01,000
对

2365
01:17:01,000 --> 01:17:03,000
然后当 Linux 兴起的时候

2366
01:17:03,000 --> 01:17:05,000
自由人的基金会业专门把

2367
01:17:06,000 --> 01:17:08,000
essage 重新开发了一遍

2368
01:17:08,000 --> 01:17:09,000
可以理解

2369
01:17:09,000 --> 01:17:12,000
然后把它命名为 Born against Shell

2370
01:17:12,000 --> 01:17:14,000
就专门的凑 Bash 这个词

2371
01:17:15,000 --> 01:17:17,000
Bash 在英语里面是

2372
01:17:19,000 --> 01:17:20,000
撕打

2373
01:17:20,000 --> 01:17:20,000
还是

2374
01:17:21,000 --> 01:17:23,000
之类的一个词

2375
01:17:23,000 --> 01:17:23,000
我是

2376
01:17:24,000 --> 01:17:26,000
也是在接受 Bash 很久之后

2377
01:17:26,000 --> 01:17:28,000
才意识到它居然是一个英语名词

2378
01:17:28,000 --> 01:17:29,000
而不是一个

2379
01:17:30,000 --> 01:17:32,000
一个命令之类的

2380
01:17:34,000 --> 01:17:36,000
我们来看一下它的官方试试什么

2381
01:17:37,000 --> 01:17:38,000
Bash

2382
01:17:38,000 --> 01:17:41,000
Strike hard and violently

2383
01:17:41,000 --> 01:17:42,000
凶狠的撕打

2384
01:17:43,000 --> 01:17:44,000
凶狠的击打

2385
01:17:44,000 --> 01:17:46,000
就是有两个字叫暴揍

2386
01:17:46,000 --> 01:17:47,000
暴揍

2387
01:17:47,000 --> 01:17:48,000
OK

2388
01:17:49,000 --> 01:17:50,000
各位使用这个

2389
01:17:50,000 --> 01:17:51,000
暴揍

2390
01:17:53,000 --> 01:17:56,000
暴揍外壳

2391
01:17:57,000 --> 01:17:59,000
暴揍外壳是我们目前

2392
01:17:59,000 --> 01:18:02,000
计算机世界里面最常见的一个外壳

2393
01:18:02,000 --> 01:18:04,000
就是如果你是用

2394
01:18:05,000 --> 01:18:06,000
OS 10 的话

2395
01:18:06,000 --> 01:18:07,000
或者是你使用一个 Linux 的话

2396
01:18:07,000 --> 01:18:09,000
那你很有可能是

2397
01:18:09,000 --> 01:18:10,000
你是在用 Bash

2398
01:18:10,000 --> 01:18:10,000
当然不一定

2399
01:18:11,000 --> 01:18:12,000
因为 Ubuntu 在前一阵子

2400
01:18:14,000 --> 01:18:17,000
它的默认是要改成了 Dash

2401
01:18:17,000 --> 01:18:18,000
Wait a second

2402
01:18:18,000 --> 01:18:19,000
又改回来了吧

2403
01:18:19,000 --> 01:18:19,000
没有

2404
01:18:19,000 --> 01:18:20,000
是这样的

2405
01:18:20,000 --> 01:18:20,000
不是 Ubuntu

2406
01:18:20,000 --> 01:18:21,000
是 Debian

2407
01:18:21,000 --> 01:18:21,000
对

2408
01:18:21,000 --> 01:18:26,000
Debian 把脚本执行的 Shell 转化成了 Dash

2409
01:18:26,000 --> 01:18:27,000
但是用户所使用的

2410
01:18:27,000 --> 01:18:29,000
就是那个 slashbin slash shell 的

2411
01:18:29,000 --> 01:18:30,000
实际是 Dash 提供的

2412
01:18:30,000 --> 01:18:31,000
然后对

2413
01:18:31,000 --> 01:18:34,000
但是用户所使用的 Login shell 还是 Bash

2414
01:18:35,000 --> 01:18:35,000
应该是这样

2415
01:18:36,000 --> 01:18:36,000
对

2416
01:18:37,000 --> 01:18:39,000
Bash 集中的

2417
01:18:41,000 --> 01:18:43,000
原有的 B shell

2418
01:18:43,000 --> 01:18:45,000
然后 C shell 和 K shell 的优点

2419
01:18:45,000 --> 01:18:47,000
这就是为什么我们刚才提到的

2420
01:18:47,000 --> 01:18:48,000
要提各家之所长

2421
01:18:48,000 --> 01:18:50,000
这就是为什么我们刚才提到的大部分功能

2422
01:18:50,000 --> 01:18:52,000
你会说我的 shell 里面也有

2423
01:18:53,000 --> 01:18:55,000
你不需要使用 C shell 才有 drop control

2424
01:18:55,000 --> 01:18:55,000
为什么

2425
01:18:55,000 --> 01:19:00,000
就是因为 Bash 把 drop control 也移植过来了

2426
01:19:02,000 --> 01:19:04,000
但是大部分这些 shell 在

2427
01:19:04,000 --> 01:19:06,000
如果一个脚本

2428
01:19:06,000 --> 01:19:07,000
你写一个 shell 脚本

2429
01:19:07,000 --> 01:19:09,000
然后在最下面写说

2430
01:19:10,000 --> 01:19:13,000
hashbound slashbin slashessence 的话

2431
01:19:14,000 --> 01:19:17,000
他们还是会默认去伪装

2432
01:19:17,000 --> 01:19:18,000
把自己伪装成一个 shell

2433
01:19:19,000 --> 01:19:20,000
然后只提供 shell

2434
01:19:20,000 --> 01:19:21,000
能够提供的功能

2435
01:19:22,000 --> 01:19:24,000
基本功能就不提供一些

2436
01:19:24,000 --> 01:19:26,000
比如说 Bash 的一些特定的语法这样

2437
01:19:26,000 --> 01:19:27,000
对

2438
01:19:27,000 --> 01:19:31,000
然后在 System 5 release 4

2439
01:19:31,000 --> 01:19:36,000
也是 UNIX 的历史上一个非常重要的版本

2440
01:19:36,000 --> 01:19:39,000
里面又出现了一个叫做 armquist shell

2441
01:19:39,000 --> 01:19:42,000
然后它的缩写就是 ash

2442
01:19:42,000 --> 01:19:44,000
然后它的设计理念是说

2443
01:19:44,000 --> 01:19:46,000
要把 shell 做得尽量精巧

2444
01:19:46,000 --> 01:19:47,000
简单

2445
01:19:48,000 --> 01:19:57,000
后来 armquist shell 也被进一步改进

2446
01:19:57,000 --> 01:19:59,000
就形成了 Dash

2447
01:19:59,000 --> 01:20:00,000
我们刚才提到的 Dash 这个东西

2448
01:20:00,000 --> 01:20:02,000
它是一个比较经验版的 shell

2449
01:20:02,000 --> 01:20:06,000
专门拿来运行脚本程序

2450
01:20:07,000 --> 01:20:09,000
Dash 的 D 是 debian 吗

2451
01:20:09,000 --> 01:20:11,000
Debian and ash 应该是这么来的

2452
01:20:11,000 --> 01:20:11,000
对

2453
01:20:13,000 --> 01:20:13,000
对

2454
01:20:13,000 --> 01:20:14,000
我记得应该是这样的

2455
01:20:14,000 --> 01:20:16,000
就是前面有 ash

2456
01:20:16,000 --> 01:20:20,000
然后是 Dash 的 debian

2457
01:20:20,000 --> 01:20:22,000
debian armquist shell

2458
01:20:24,000 --> 01:20:27,000
它也是为了凑 Dash

2459
01:20:27,000 --> 01:20:29,000
Dash 是一个就是什么

2460
01:20:29,000 --> 01:20:30,000
冲快速前冲

2461
01:20:30,000 --> 01:20:31,000
小跑

2462
01:20:32,000 --> 01:20:32,000
对

2463
01:20:33,000 --> 01:20:34,000
小跑外壳

2464
01:20:34,000 --> 01:20:35,000
刚才我们介绍了猛鸡外壳

2465
01:20:35,000 --> 01:20:37,000
然后有小跑外壳

2466
01:20:37,000 --> 01:20:40,000
抱走外壳

2467
01:20:40,000 --> 01:20:43,000
小跑外壳

2468
01:20:44,000 --> 01:20:44,000
OK

2469
01:20:45,000 --> 01:20:48,000
其实还有一些比较不常见

2470
01:20:48,000 --> 01:20:49,000
比较诡异的 shell

2471
01:20:49,000 --> 01:20:51,000
还是要提一下可能

2472
01:20:51,000 --> 01:20:53,000
比如说 psh pearl shell

2473
01:20:53,000 --> 01:20:57,000
就是你可以在 shell 里面使用 pearl 这种

2474
01:20:57,000 --> 01:20:59,000
奇怪的语言

2475
01:20:59,000 --> 01:21:02,000
来完成一些普通 sh 做不到的

2476
01:21:02,000 --> 01:21:05,000
或者是 yash

2477
01:21:06,000 --> 01:21:08,000
跟 yaml 一样

2478
01:21:08,000 --> 01:21:09,000
yet another shell

2479
01:21:09,000 --> 01:21:12,000
It's a posic component command line shell

2480
01:21:12,000 --> 01:21:15,000
written by Watanabe Yuki

2481
01:21:15,000 --> 01:21:15,000
一个日本人

2482
01:21:16,000 --> 01:21:18,000
他的实现的初衷是

2483
01:21:18,000 --> 01:21:21,000
教大家用 C 语言来写一个 shell

2484
01:21:21,000 --> 01:21:23,000
本来是一个教学项目

2485
01:21:23,000 --> 01:21:24,000
但是后来又被

2486
01:21:25,000 --> 01:21:26,000
后来又重新改写了

2487
01:21:27,000 --> 01:21:30,000
目的是要成为最 posic 兼容的一个 shell

2488
01:21:31,000 --> 01:21:32,000
世界上最 posic

2489
01:21:32,000 --> 01:21:35,000
compliant shell in the world

2490
01:21:36,000 --> 01:21:38,000
都不知道这到底是好事还是坏事

2491
01:21:38,000 --> 01:21:39,000
What's the point

2492
01:21:39,000 --> 01:21:42,000
所以这就是为什么没有人用 yash 的原因

2493
01:21:44,000 --> 01:21:49,000
刚才提到一个重要概念就是 sh compatible

2494
01:21:50,000 --> 01:21:52,000
你会说兼容 shell

2495
01:21:52,000 --> 01:21:54,000
你会说就是这个 shell 是特指

2496
01:21:54,000 --> 01:21:56,000
不是一范子的一个 shell

2497
01:21:56,000 --> 01:21:57,000
是特指最开始的那个

2498
01:21:58,000 --> 01:21:59,000
最早版本的一个 shell

2499
01:21:59,000 --> 01:22:00,000
没错

2500
01:22:01,000 --> 01:22:02,000
兼容那个是什么意思

2501
01:22:02,000 --> 01:22:04,000
这也是我们推荐

2502
01:22:05,000 --> 01:22:07,000
在这里我们要推荐 stack exchange

2503
01:22:07,000 --> 01:22:10,000
的 unix 的板块上面的一个答案

2504
01:22:10,000 --> 01:22:10,000
写得非常好

2505
01:22:11,000 --> 01:22:12,000
然后这个答案里面还顺带的介绍了

2506
01:22:12,000 --> 01:22:14,000
在不同系统里面

2507
01:22:14,000 --> 01:22:17,000
这个 bin sh 所指向的东西是什么

2508
01:22:17,000 --> 01:22:18,000
比如他说在

2509
01:22:19,000 --> 01:22:20,000
solidus 的 10 里面

2510
01:22:21,000 --> 01:22:23,000
可能 bin sh 就是默认的

2511
01:22:23,000 --> 01:22:25,000
original born shell

2512
01:22:26,000 --> 01:22:31,000
然后你可能在 Linux 里面

2513
01:22:31,000 --> 01:22:33,000
可能会是 ginu bash

2514
01:22:34,000 --> 01:22:35,000
然后你在 openbs 里面

2515
01:22:35,000 --> 01:22:39,000
可能会所使用的是一个 ksh 93

2516
01:22:39,000 --> 01:22:42,000
with pausing extensions

2517
01:22:42,000 --> 01:22:43,000
whatever it means 的

2518
01:22:44,000 --> 01:22:46,000
答案也是推荐大家读一读

2519
01:22:49,000 --> 01:22:51,000
好了大概历史就讲到这

2520
01:22:51,000 --> 01:22:52,000
然后

2521
01:22:53,000 --> 01:22:55,000
我们讲现状了吗

2522
01:22:55,000 --> 01:23:00,000
时光期且快进到 2010 年

2523
01:23:00,000 --> 01:23:03,000
或者说 21 世纪的

2524
01:23:03,000 --> 01:23:04,000
第一个时期已经过去了

2525
01:23:04,000 --> 01:23:06,000
我们还是在使用 shel

2526
01:23:06,000 --> 01:23:07,000
不过今天

2527
01:23:09,000 --> 01:23:11,000
我不知道 Rail 你

2528
01:23:11,000 --> 01:23:12,000
但是我所使用的 shel

2529
01:23:12,000 --> 01:23:14,000
是一个叫做 zshel 的东西

2530
01:23:16,000 --> 01:23:16,000
我也是

2531
01:23:16,000 --> 01:23:18,000
我这里可能要说一下

2532
01:23:18,000 --> 01:23:21,000
刚才提了各种各样的乱七八糟的

2533
01:23:21,000 --> 01:23:22,000
shel 有好几种

2534
01:23:22,000 --> 01:23:24,000
但其实经过这么多年

2535
01:23:24,000 --> 01:23:26,000
这个系统大浪淘沙

2536
01:23:26,000 --> 01:23:26,000
对

2537
01:23:27,000 --> 01:23:29,000
现在剩下来的也就那么几个了

2538
01:23:29,000 --> 01:23:31,000
一个是

2539
01:23:31,000 --> 01:23:33,000
绝大多数的 Linux 发行板

2540
01:23:34,000 --> 01:23:37,000
和像 Ost 也是默认使用的 Bash

2541
01:23:37,000 --> 01:23:40,000
然后有一小撮

2542
01:23:40,000 --> 01:23:45,000
需要死忠粉在坚持用的一个 zsh

2543
01:23:48,000 --> 01:23:50,000
还有在一些精简系统上

2544
01:23:50,000 --> 01:23:51,000
或者是嵌入式系统上

2545
01:23:51,000 --> 01:23:55,000
像 BZbox 里面自带的

2546
01:23:56,000 --> 01:23:57,000
那个应该是 ash

2547
01:23:57,000 --> 01:23:58,000
对那个是 ash

2548
01:23:58,000 --> 01:24:01,000
就是在比较简简普通的

2549
01:24:01,000 --> 01:24:02,000
或者说功能比较低价的

2550
01:24:03,000 --> 01:24:05,000
不需要经常交互的操作程度里面

2551
01:24:05,000 --> 01:24:07,000
基本上就提供一个 ash to go

2552
01:24:07,000 --> 01:24:07,000
对

2553
01:24:07,000 --> 01:24:08,000
就复杂度比较

2554
01:24:09,000 --> 01:24:10,000
那个的复杂度也比较低

2555
01:24:10,000 --> 01:24:13,000
适合在那种资源比较有限的系统上实施

2556
01:24:13,000 --> 01:24:13,000
对

2557
01:24:15,000 --> 01:24:16,000
先说 Western

2558
01:24:16,000 --> 01:24:18,000
因为我们常用的主机都是这个

2559
01:24:18,000 --> 01:24:20,000
Western 现在版本里面

2560
01:24:20,000 --> 01:24:22,000
起码是自带两个 shel 的

2561
01:24:23,000 --> 01:24:23,000
一个是 Bash

2562
01:24:23,000 --> 01:24:25,000
一个是 zsh

2563
01:24:26,000 --> 01:24:27,000
有一个什么问题

2564
01:24:27,000 --> 01:24:30,000
因为 Bash 从 4.0 开始

2565
01:24:30,000 --> 01:24:31,000
对

2566
01:24:31,000 --> 01:24:33,000
那 Western 自带的版本

2567
01:24:33,000 --> 01:24:34,000
Bash 的版本特别老

2568
01:24:34,000 --> 01:24:36,000
原因是因为 Bash 4.0 开始

2569
01:24:36,000 --> 01:24:38,000
他们切换到 GPLV 3

2570
01:24:38,000 --> 01:24:39,000
应该是

2571
01:24:39,000 --> 01:24:42,000
的授权协议

2572
01:24:42,000 --> 01:24:44,000
然后跟 Western 商业

2573
01:24:45,000 --> 01:24:47,000
不开源产品是有冲突的

2574
01:24:47,000 --> 01:24:50,000
所以他们就是 Western 搭载的 Bash

2575
01:24:50,000 --> 01:24:52,000
可能永远只能停留在 3.

2576
01:24:52,000 --> 01:24:55,000
就是大版本号是 3 的这个版本系列

2577
01:24:55,000 --> 01:24:59,000
没有办法再进步到 4 了

2578
01:24:59,000 --> 01:25:00,000
但是

2579
01:25:01,000 --> 01:25:03,000
Western 还自带了一个 zsh

2580
01:25:03,000 --> 01:25:04,000
zsh 应该是 BSD 协议

2581
01:25:05,000 --> 01:25:07,000
Zsh 是 BSD 协议

2582
01:25:07,000 --> 01:25:08,000
确认一下

2583
01:25:09,000 --> 01:25:10,000
确认一下

2584
01:25:10,000 --> 01:25:11,000
我记得是 BSD 协议

2585
01:25:14,000 --> 01:25:15,000
对

2586
01:25:15,000 --> 01:25:18,000
不是 zsh 是 MIT 协议

2587
01:25:18,000 --> 01:25:20,000
而且 LayMIT 协议的

2588
01:25:20,000 --> 01:25:22,000
它更灵活一些

2589
01:25:23,000 --> 01:25:25,000
所以 Western 还是可以

2590
01:25:26,000 --> 01:25:28,000
继续搭载它最新版本

2591
01:25:28,000 --> 01:25:30,000
基本上 SendZsh 的最新版本都

2592
01:25:32,000 --> 01:25:34,000
大杂的版本离最新版本基本上就只

2593
01:25:34,000 --> 01:25:36,000
差一两个小版本号

2594
01:25:36,000 --> 01:25:39,000
而且 zsh 也更新不是那么轻

2595
01:25:40,000 --> 01:25:41,000
所以还好

2596
01:25:41,000 --> 01:25:43,000
对最新一版的 zsh 是 5.1

2597
01:25:43,000 --> 01:25:45,000
2015 年 8 月 30

2598
01:25:46,000 --> 01:25:47,000
两个月前了

2599
01:25:47,000 --> 01:25:48,000
所以就还好

2600
01:25:48,000 --> 01:25:50,000
然后如果你还是坚持要用 Bash 的话

2601
01:25:51,000 --> 01:25:51,000
基本上

2602
01:25:51,000 --> 01:25:53,000
非常推荐你的一点是

2603
01:25:53,000 --> 01:25:54,000
可以 Homebrew 再装

2604
01:25:54,000 --> 01:25:56,000
赶紧用 Homebrew 装一个新版的 Bash

2605
01:25:57,000 --> 01:25:58,000
如果你是一个初学者的话

2606
01:25:58,000 --> 01:26:00,000
然后你可能暂时说

2607
01:26:00,000 --> 01:26:01,000
我要保守一点

2608
01:26:01,000 --> 01:26:05,000
先从一个原流比较古早的东西

2609
01:26:05,000 --> 01:26:06,000
开入手的话

2610
01:26:07,000 --> 01:26:10,000
因为我相信大部分的 Linux 的教程上

2611
01:26:10,000 --> 01:26:13,000
也会用 Bash 作为主要的教学工具

2612
01:26:13,000 --> 01:26:14,000
你可以

2613
01:26:15,000 --> 01:26:15,000
对

2614
01:26:15,000 --> 01:26:16,000
因为默认是那个

2615
01:26:16,000 --> 01:26:18,000
所以最好是先生起

2616
01:26:18,000 --> 01:26:20,000
Zsh 的来历是怎么样子

2617
01:26:21,000 --> 01:26:24,000
Zsh 是 1990 年的时候

2618
01:26:25,000 --> 01:26:28,000
一个叫做 Paul Foster

2619
01:26:31,000 --> 01:26:32,000
Foster 是那个

2620
01:26:33,000 --> 01:26:34,000
你为什么要下

2621
01:26:34,000 --> 01:26:35,000
Hero of the Storm 里面

2622
01:26:35,000 --> 01:26:37,000
一个骑尸旧的哥们

2623
01:26:37,000 --> 01:26:38,000
他是

2624
01:26:38,000 --> 01:26:41,000
他在摩世线里面应该是在

2625
01:26:41,000 --> 01:26:42,000
Hinterland

2626
01:26:42,000 --> 01:26:44,000
新特兰的那个

2627
01:26:44,000 --> 01:26:47,000
尸旧城邦里面的主管

2628
01:26:47,000 --> 01:26:48,000
叫做 Foster

2629
01:26:49,000 --> 01:26:50,000
Paul Foster 写了

2630
01:26:51,000 --> 01:26:53,000
脑中浮现出了一个矮人

2631
01:26:53,000 --> 01:26:55,000
骑在尸旧上打电脑的场景

2632
01:26:57,000 --> 01:26:58,000
然后他在 1990 年的时候

2633
01:26:58,000 --> 01:26:59,000
读普林斯顿

2634
01:27:00,000 --> 01:27:02,000
他是一个学生

2635
01:27:02,000 --> 01:27:05,000
然后他的导师叫做邵中

2636
01:27:06,000 --> 01:27:08,000
一个华人是个好

2637
01:27:08,000 --> 01:27:08,000
是个华人

2638
01:27:09,000 --> 01:27:14,000
然后邵中的登陆名叫做 Zsh

2639
01:27:14,000 --> 01:27:15,000
中邵嘛对吧

2640
01:27:16,000 --> 01:27:18,000
先名后姓

2641
01:27:18,000 --> 01:27:20,000
然后他觉得这个名字很屌

2642
01:27:20,000 --> 01:27:24,000
就用 Zsh 来当做自己写的这个 Shel

2643
01:27:24,000 --> 01:27:25,000
名字

2644
01:27:25,000 --> 01:27:27,000
Zsh 来当自己写这个 Shel 的名字

2645
01:27:27,000 --> 01:27:30,000
然后那但是 Zsh 和 Csh 也是押韵的

2646
01:27:30,000 --> 01:27:31,000
对吧

2647
01:27:32,000 --> 01:27:33,000
对

2648
01:27:33,000 --> 01:27:34,000
是这么来的

2649
01:27:34,000 --> 01:27:37,000
然后他出于某种原因

2650
01:27:37,000 --> 01:27:40,000
把它做得非常的复杂又强大

2651
01:27:40,000 --> 01:27:41,000
我觉得肯定是

2652
01:27:41,000 --> 01:27:43,000
就觉得已经到了 90 年代的吧

2653
01:27:43,000 --> 01:27:44,000
我们应该给这个

2654
01:27:44,000 --> 01:27:45,000
古老啊

2655
01:27:45,000 --> 01:27:46,000
与时据进展

2656
01:27:46,000 --> 01:27:47,000
时据进展

2657
01:27:48,000 --> 01:27:48,000
做

2658
01:27:48,000 --> 01:27:49,000
所以做了非常非常多的优化

2659
01:27:49,000 --> 01:27:50,000
比如说

2660
01:27:50,000 --> 01:27:52,000
他提供了

2661
01:27:53,000 --> 01:27:55,000
extensive 的这个

2662
01:27:56,000 --> 01:27:58,000
输入提示

2663
01:27:58,000 --> 01:28:00,000
就是你在输入命令的话

2664
01:28:00,000 --> 01:28:02,000
你在 bash 下面按 tab

2665
01:28:02,000 --> 01:28:03,000
你可能只会得到

2666
01:28:03,000 --> 01:28:07,000
tab 的

2667
01:28:07,000 --> 01:28:07,000
OK

2668
01:28:08,000 --> 01:28:09,000
在 bash 下面

2669
01:28:09,000 --> 01:28:11,000
输入一个命令一半按 tab

2670
01:28:11,000 --> 01:28:12,000
它会补全到

2671
01:28:13,000 --> 01:28:14,000
什么地方位置

2672
01:28:14,000 --> 01:28:16,000
补全到它能够

2673
01:28:17,000 --> 01:28:18,000
第一个字符吧

2674
01:28:18,000 --> 01:28:20,000
就是有奇异的第一个字符

2675
01:28:20,000 --> 01:28:22,000
会补全到第一个奇异位置

2676
01:28:22,000 --> 01:28:26,000
然后 Z shell 则会列出所有可能命令

2677
01:28:26,000 --> 01:28:28,000
在你当前行下面

2678
01:28:28,000 --> 01:28:30,000
列出所有可能命令

2679
01:28:30,000 --> 01:28:33,000
然后 Z shell 还会

2680
01:28:33,000 --> 01:28:35,000
就像 Google 一样会问你说

2681
01:28:36,000 --> 01:28:37,000
如果你输送一个命令的话

2682
01:28:37,000 --> 01:28:37,000
他会问你说

2683
01:28:37,000 --> 01:28:39,000
你是不是想要执行另外一个命令

2684
01:28:39,000 --> 01:28:41,000
但有时候这个挺讨厌的

2685
01:28:41,000 --> 01:28:42,000
它是

2686
01:28:42,000 --> 01:28:44,000
就还带那个 auto correction

2687
01:28:44,000 --> 01:28:45,000
Dialing correction 功能

2688
01:28:45,000 --> 01:28:46,000
当然我们现在都用 fuck 了

2689
01:28:48,000 --> 01:28:50,000
如果我们待会提到 fuck 这个东西

2690
01:28:51,000 --> 01:28:54,000
然后它还可以做一些比较神的事情

2691
01:28:54,000 --> 01:28:55,000
比如说

2692
01:28:55,000 --> 01:28:58,000
你要 sql 到一个远端的服务器上

2693
01:28:59,000 --> 01:29:01,000
在 bash 里面

2694
01:29:01,000 --> 01:29:03,000
你必须记住远端的服务器的命令

2695
01:29:03,000 --> 01:29:05,000
那个路径是什么

2696
01:29:05,000 --> 01:29:05,000
路径

2697
01:29:05,000 --> 01:29:06,000
但是在 Z shell 里面

2698
01:29:06,000 --> 01:29:07,000
你只要不停的按 tab

2699
01:29:07,000 --> 01:29:11,000
它会帮你补全远程服务器上的路径

2700
01:29:11,000 --> 01:29:12,000
这也是很屌

2701
01:29:12,000 --> 01:29:13,000
很实用又很屌

2702
01:29:13,000 --> 01:29:15,000
非常的黑猫吧

2703
01:29:15,000 --> 01:29:18,000
另外就是我个人最喜欢的一点

2704
01:29:18,000 --> 01:29:19,000
就是它可以在

2705
01:29:19,000 --> 01:29:22,000
屏幕的右侧显示一个 promote

2706
01:29:23,000 --> 01:29:24,000
在右侧有个提示符

2707
01:29:25,000 --> 01:29:25,000
这个还

2708
01:29:26,000 --> 01:29:26,000
对

2709
01:29:26,000 --> 01:29:28,000
标准段段下一般都只有在左侧提示

2710
01:29:28,000 --> 01:29:31,000
因为字符串的

2711
01:29:33,000 --> 01:29:34,000
补齐的方式是这样子

2712
01:29:34,000 --> 01:29:35,000
然后如果你在右端

2713
01:29:35,000 --> 01:29:37,000
你要做一些额外的事情

2714
01:29:37,000 --> 01:29:38,000
要 redraw 之类的

2715
01:29:38,000 --> 01:29:38,000
对吧

2716
01:29:38,000 --> 01:29:39,000
对

2717
01:29:39,000 --> 01:29:40,000
这个还

2718
01:29:40,000 --> 01:29:43,000
就有时候有那些不那么重要的信息

2719
01:29:43,000 --> 01:29:45,000
你放在右边还是比较好

2720
01:29:45,000 --> 01:29:46,000
比如说我现在在右边放

2721
01:29:46,000 --> 01:29:48,000
当前的时间

2722
01:29:48,000 --> 01:29:49,000
用户名主机

2723
01:29:49,000 --> 01:29:52,000
然后是 Python Virtual Environment

2724
01:29:53,000 --> 01:29:54,000
的名称

2725
01:29:55,000 --> 01:29:58,000
然后左边就只放目录和

2726
01:29:59,000 --> 01:30:00,000
大跃号提示符

2727
01:30:00,000 --> 01:30:02,000
我觉得还蛮方便

2728
01:30:04,000 --> 01:30:05,000
所以这里其实要说一点

2729
01:30:05,000 --> 01:30:07,000
就是说刚才讲的 Zshell

2730
01:30:07,000 --> 01:30:08,000
大部分这种高级特性

2731
01:30:09,000 --> 01:30:10,000
其实在后来的

2732
01:30:11,000 --> 01:30:13,000
新版本的 Bash 里面

2733
01:30:13,000 --> 01:30:15,000
也通过各种各样的方式

2734
01:30:15,000 --> 01:30:16,000
能够逐渐实现了

2735
01:30:16,000 --> 01:30:19,000
所以在就是 feature

2736
01:30:19,000 --> 01:30:19,000
就是什么呢

2737
01:30:20,000 --> 01:30:22,000
就是在特性的完成度上

2738
01:30:22,000 --> 01:30:24,000
现代版本的 Zshell 和现代版本的 Bash

2739
01:30:24,000 --> 01:30:25,000
是相差不大的

2740
01:30:26,000 --> 01:30:27,000
但是在 90 年代

2741
01:30:27,000 --> 01:30:30,000
Zshell 的很多特性是现在的

2742
01:30:31,000 --> 01:30:32,000
是那个时候的 Bash 用户

2743
01:30:32,000 --> 01:30:33,000
不能不可想象

2744
01:30:37,000 --> 01:30:38,000
这就是为什么

2745
01:30:38,000 --> 01:30:38,000
从 90 年代开始

2746
01:30:38,000 --> 01:30:41,000
有了一大堆 Zshell 拥吨

2747
01:30:41,000 --> 01:30:42,000
然后一直到今天

2748
01:30:42,000 --> 01:30:46,000
大概在 2010 年前后

2749
01:30:46,000 --> 01:30:49,000
出现了一个叫做 OmaiZshell 的项目

2750
01:30:51,000 --> 01:30:53,000
这是一个由社区维护的 Zshell 的

2751
01:30:53,000 --> 01:30:56,000
配置和插件的一个集合

2752
01:30:56,000 --> 01:30:58,000
就是如果你去装一个 OmaiZshell 的话

2753
01:30:58,000 --> 01:31:00,000
你可以很多东西

2754
01:31:00,000 --> 01:31:02,000
就只需要改一个小小的配置文件

2755
01:31:02,000 --> 01:31:04,000
里面的一行就可以用到

2756
01:31:05,000 --> 01:31:07,000
你就可以有一个很帅

2757
01:31:07,000 --> 01:31:08,000
很酷的这么一个

2758
01:31:08,000 --> 01:31:10,000
就是命令行的提示符

2759
01:31:10,000 --> 01:31:13,000
比如说它里面提供了几百种主题

2760
01:31:13,000 --> 01:31:15,000
你随便改一改

2761
01:31:15,000 --> 01:31:15,000
你会觉得

2762
01:31:15,000 --> 01:31:18,000
你就会让不明就里人看到

2763
01:31:18,000 --> 01:31:19,000
我刚才搞什么

2764
01:31:19,000 --> 01:31:20,000
这是什么东西

2765
01:31:20,000 --> 01:31:21,000
看起来好复习

2766
01:31:23,000 --> 01:31:23,000
当然

2767
01:31:24,000 --> 01:31:25,000
所以我有一个问题问你

2768
01:31:25,000 --> 01:31:28,000
就是为什么你要从 Bash 切换到 Zshell

2769
01:31:28,000 --> 01:31:30,000
其实我

2770
01:31:30,000 --> 01:31:31,000
其实我犹豫过很久

2771
01:31:31,000 --> 01:31:33,000
就是我这个

2772
01:31:34,000 --> 01:31:37,000
在两者之间反复跳跃了很多次

2773
01:31:39,000 --> 01:31:43,000
但是你最终要去做这个选择的原因是什么

2774
01:31:43,000 --> 01:31:46,000
最终选择的原因

2775
01:31:46,000 --> 01:31:48,000
还是因为它的心特性太多了

2776
01:31:48,000 --> 01:31:49,000
或者说对于我来说

2777
01:31:49,000 --> 01:31:53,000
它的 killer feature 就是右边的 promote

2778
01:31:55,000 --> 01:31:56,000
这个好像在 Bash 里面

2779
01:31:56,000 --> 01:31:58,000
现在为止都还比较难实现

2780
01:31:58,000 --> 01:31:59,000
在 Bash 里面也不可能做到这个样子

2781
01:32:02,000 --> 01:32:04,000
其他的其实也没什么

2782
01:32:04,000 --> 01:32:06,000
因为我现在的状况

2783
01:32:06,000 --> 01:32:09,000
其实是我在办公室会用 Bash

2784
01:32:09,000 --> 01:32:10,000
在公司是会用 Bash

2785
01:32:10,000 --> 01:32:11,000
然后回家用 ZShell

2786
01:32:13,000 --> 01:32:17,000
其实这两个的语法在大部分情况下是坚持的

2787
01:32:17,000 --> 01:32:20,000
在 99%情况下你是感觉不到差别的

2788
01:32:20,000 --> 01:32:22,000
只是有时候你在 Zshell 下面会觉得非常方便

2789
01:32:22,000 --> 01:32:24,000
比如说刚才提到命令的问题

2790
01:32:24,000 --> 01:32:26,000
你在 Bash 下面你可能要 type 很多次

2791
01:32:26,000 --> 01:32:29,000
然后才能找到自己需要找的那个

2792
01:32:29,000 --> 01:32:31,000
但是在 Zshell 下面你可能要 type 一次

2793
01:32:31,000 --> 01:32:33,000
然后看一看你就知道你要要什么

2794
01:32:34,000 --> 01:32:36,000
但是除此之外

2795
01:32:36,000 --> 01:32:39,000
其实 Zshell 带来的改进并没有太多

2796
01:32:40,000 --> 01:32:42,000
因为正是在公司里面我基本不会

2797
01:32:43,000 --> 01:32:46,000
觉得这里如果我是在用 ZShell 就好了

2798
01:32:47,000 --> 01:32:51,000
这就是为什么后来我曾经很多次切换回 Bash

2799
01:32:51,000 --> 01:32:53,000
就在自己的电脑上面

2800
01:32:53,000 --> 01:32:55,000
因为总觉得 ZShell 是一个

2801
01:32:57,000 --> 01:32:58,000
no standard 的东西

2802
01:32:59,000 --> 01:33:00,000
就叫做加引号

2803
01:33:00,000 --> 01:33:02,000
ZShell 当然也非常常见

2804
01:33:02,000 --> 01:33:07,000
但是没有像 Bash 那么到处都有

2805
01:33:07,000 --> 01:33:07,000
对吧

2806
01:33:07,000 --> 01:33:10,000
那我为什么要依赖于这种

2807
01:33:11,000 --> 01:33:13,000
其实没有那么多便利的东西

2808
01:33:13,000 --> 01:33:15,000
但后来还是觉得能方便一点

2809
01:33:15,000 --> 01:33:16,000
方便一点何必呢

2810
01:33:18,000 --> 01:33:22,000
我从 Bash 切换到 ZShell 的原因比较简单

2811
01:33:22,000 --> 01:33:25,000
就是我当时做了一个 Bash 的 promote

2812
01:33:25,000 --> 01:33:28,000
一个小小脚本

2813
01:33:28,000 --> 01:33:33,000
就是制定自己定制化 Bash 的提示符

2814
01:33:34,000 --> 01:33:35,000
你要实现什么

2815
01:33:35,000 --> 01:33:38,000
发现 Bash 的 Bash Powerline

2816
01:33:38,000 --> 01:33:40,000
我在 GitHub 上应该是被新标的

2817
01:33:40,000 --> 01:33:42,000
最多的一个 repostory

2818
01:33:43,000 --> 01:33:44,000
就可以实现比如说

2819
01:33:44,000 --> 01:33:48,000
以一种看起来还挺帅的方式

2820
01:33:48,000 --> 01:33:51,000
显示比如说你如果你这个目录是有 Git 的话

2821
01:33:51,000 --> 01:33:54,000
它会显示 Git 的这个 Branch 的名字

2822
01:33:54,000 --> 01:33:57,000
它会显示说你有多少个 commit

2823
01:33:57,000 --> 01:34:00,000
你多少个 commit 就是 ahead 或者是 behind

2824
01:34:00,000 --> 01:34:01,000
远端

2825
01:34:01,000 --> 01:34:03,000
然后它可以显示

2826
01:34:03,000 --> 01:34:07,000
根据你上一条命令的执行的结果是正常还是异常

2827
01:34:07,000 --> 01:34:10,000
它会显示是绿色或者是红色这样一些

2828
01:34:10,000 --> 01:34:13,000
比较花巧的功能版

2829
01:34:14,000 --> 01:34:16,000
然后在做的过程中就发现

2830
01:34:16,000 --> 01:34:18,000
其实 Bash 的那些语法是比较坑爹的

2831
01:34:18,000 --> 01:34:22,000
就不是太一致

2832
01:34:22,000 --> 01:34:23,000
然后也不太好记

2833
01:34:23,000 --> 01:34:25,000
每次都要去折腾半天

2834
01:34:25,000 --> 01:34:26,000
到底怎么去写

2835
01:34:26,000 --> 01:34:27,000
去查半天到底怎么去写

2836
01:34:27,000 --> 01:34:30,000
就是它语法比较 inconsistent

2837
01:34:30,000 --> 01:34:33,000
然后 ZShell 的就会好很多

2838
01:34:33,000 --> 01:34:36,000
所以我最后就签到 ZShell 上面

2839
01:34:36,000 --> 01:34:37,000
但还有一个很重要的原因

2840
01:34:37,000 --> 01:34:41,000
就是刚才讲的 OS 10 自带的这些版本比较稀罕

2841
01:34:41,000 --> 01:34:43,000
然后我又是我现在遵循的一个哲学

2842
01:34:43,000 --> 01:34:46,000
就是能不折腾就折腾

2843
01:34:46,000 --> 01:34:49,000
我不想在 homebrew 再装一遍 Bash 的

2844
01:34:49,000 --> 01:34:50,000
然后再 T 掉这样

2845
01:34:50,000 --> 01:34:51,000
对没错

2846
01:34:51,000 --> 01:34:54,000
对其实我刚才想说的一点也是就是 ZShell 有很多

2847
01:34:54,000 --> 01:35:00,000
它设立之初想要达成的目的之一就是

2848
01:35:00,000 --> 01:35:04,000
用 ZShell 写的 Salescript

2849
01:35:05,000 --> 01:35:08,000
或者说用使用了 ZShell 的扩展

2850
01:35:09,000 --> 01:35:12,000
而不是纯粹的 Shell

2851
01:35:12,000 --> 01:35:15,000
SH compatible 的 Salescript

2852
01:35:15,000 --> 01:35:20,000
应该要比 Bash 写的更一读更一写

2853
01:35:20,000 --> 01:35:23,000
而且更优雅一点

2854
01:35:23,000 --> 01:35:26,000
应该可以应该应该应该使用优雅这个词在这

2855
01:35:26,000 --> 01:35:28,000
但是很遗憾这一点并没有铺开来

2856
01:35:28,000 --> 01:35:30,000
就是这世界上大部分的 Salescript

2857
01:35:30,000 --> 01:35:32,000
还是要么是 Shell

2858
01:35:32,000 --> 01:35:33,000
要么是 Bash

2859
01:35:34,000 --> 01:35:37,000
还是很正好有人在用写 ZShell

2860
01:35:37,000 --> 01:35:39,000
ZShell 的 Salescript

2861
01:35:39,000 --> 01:35:40,000
可能要比 Sysh

2862
01:35:40,000 --> 01:35:42,000
其实如果写 script 的话

2863
01:35:42,000 --> 01:35:46,000
其实还是用最精简的 Shell 的语法

2864
01:35:46,000 --> 01:35:48,000
会通用性会强一点

2865
01:35:48,000 --> 01:35:50,000
但是很多人会觉得说

2866
01:35:50,000 --> 01:35:52,000
比如说 Bash 的一些扩展

2867
01:35:52,000 --> 01:35:56,000
比如说双方扩号

2868
01:35:56,000 --> 01:36:02,000
要比单扩号要能够表达语意实现的功能多一些

2869
01:36:02,000 --> 01:36:02,000
对吧

2870
01:36:02,000 --> 01:36:06,000
所以很多人会选择用 Bash 来写 Salescript

2871
01:36:06,000 --> 01:36:10,000
但是这个数目还是要远远远远多于

2872
01:36:11,000 --> 01:36:13,000
用 ZShell 来写

2873
01:36:13,000 --> 01:36:14,000
这一点还是挺遗憾的

2874
01:36:15,000 --> 01:36:16,000
那倒是

2875
01:36:18,000 --> 01:36:21,000
其实除了这些比较正统的 Shell 之外

2876
01:36:21,000 --> 01:36:24,000
也有一些比较新的尝试最近几年出现的

2877
01:36:24,000 --> 01:36:27,000
就是说为什么有那么多的历史包袱

2878
01:36:27,000 --> 01:36:29,000
假设我们不考虑向后兼容性

2879
01:36:29,000 --> 01:36:31,000
如果抛开 Possibly SH compatibility

2880
01:36:31,000 --> 01:36:32,000
这个历史包袱的话

2881
01:36:32,000 --> 01:36:35,000
那今天的 Shell 真是可以各种各样

2882
01:36:37,000 --> 01:36:39,000
其中比较著名的就是这叫做 Fish 的

2883
01:36:39,000 --> 01:36:41,000
这个鱼壳

2884
01:36:41,000 --> 01:36:48,000
算是用了最多的一个 Shell 不介入我们 Shell 了

2885
01:36:50,000 --> 01:36:52,000
所以你有日常在用吗

2886
01:36:53,000 --> 01:36:57,000
我有一段时间还把它用当做主力 Shell 来用

2887
01:36:57,000 --> 01:36:58,000
它确实挺方便的

2888
01:36:58,000 --> 01:37:03,000
它很多新的特性

2889
01:37:03,000 --> 01:37:06,000
比如说有语法高亮的命令行

2890
01:37:06,000 --> 01:37:07,000
对你会去输入的行

2891
01:37:07,000 --> 01:37:08,000
有时候你会产生一种

2892
01:37:08,000 --> 01:37:10,000
我在用一个 IDE 的想象错觉

2893
01:37:10,000 --> 01:37:12,000
就是比如说你打一个

2894
01:37:12,000 --> 01:37:14,000
你打个 SLS

2895
01:37:14,000 --> 01:37:18,000
然后它会把 SLS 所能使用所有参数

2896
01:37:18,000 --> 01:37:20,000
显示在你当前行的下来

2897
01:37:22,000 --> 01:37:25,000
然后它还有一些像自动补齐的下拉列表

2898
01:37:26,000 --> 01:37:28,000
还有各种各样的一些很好的特性

2899
01:37:28,000 --> 01:37:29,000
甚至还有一个

2900
01:37:30,000 --> 01:37:32,000
它好像是一个网页版本的什么东西来的

2901
01:37:32,000 --> 01:37:35,000
它的主题是可以通过 CSS

2902
01:37:35,000 --> 01:37:39,000
还是什么的一个东西来配置

2903
01:37:39,000 --> 01:37:41,000
它的配色也是很夸张

2904
01:37:41,000 --> 01:37:42,000
说到配色要讲

2905
01:37:42,000 --> 01:37:44,000
要讲 256 色那些

2906
01:37:44,000 --> 01:37:47,000
其实在 Shell 里面打出有颜色的字

2907
01:37:47,000 --> 01:37:49,000
这件事来说还是挺麻烦的

2908
01:37:49,000 --> 01:37:51,000
有时候你可能会觉得说

2909
01:37:51,000 --> 01:37:52,000
我现在已经 60 年过去了

2910
01:37:52,000 --> 01:37:56,000
我居然还是不能在中端之下

2911
01:37:57,000 --> 01:37:59,000
方便地搞出颜色

2912
01:37:59,000 --> 01:38:00,000
让用户看到

2913
01:38:00,000 --> 01:38:02,000
我希望他看到的颜色就这么难

2914
01:38:05,000 --> 01:38:06,000
就是也要吐槽这件事

2915
01:38:06,000 --> 01:38:07,000
对

2916
01:38:07,000 --> 01:38:08,000
就如果你使用 ITEM

2917
01:38:08,000 --> 01:38:11,000
然后你要想让 ITEM 看起来漂亮一点的话

2918
01:38:11,000 --> 01:38:14,000
你一定会折腾过这个配色方案这个东西

2919
01:38:14,000 --> 01:38:15,000
但是如果你折腾的话

2920
01:38:15,000 --> 01:38:17,000
你会觉得这真是一个巨大的坑

2921
01:38:17,000 --> 01:38:18,000
就是

2922
01:38:18,000 --> 01:38:21,000
Uniqs 的

2923
01:38:21,000 --> 01:38:23,000
这个话题我们估计这里不能展开

2924
01:38:23,000 --> 01:38:24,000
没办法展开

2925
01:38:24,000 --> 01:38:26,000
你会觉得我靠为什么

2926
01:38:26,000 --> 01:38:28,000
历史的枷锁一直到 60 年代

2927
01:38:28,000 --> 01:38:30,000
好像还套在我的头上

2928
01:38:30,000 --> 01:38:34,000
我为什么要去在意什么 16 色

2929
01:38:34,000 --> 01:38:36,000
256 色之类的东西

2930
01:38:36,000 --> 01:38:40,000
那在 Fish 这边就没有这个问题了

2931
01:38:40,000 --> 01:38:41,000
你想用什么颜色就用什么颜色

2932
01:38:41,000 --> 01:38:43,000
因为它不需要去做尖端性

2933
01:38:45,000 --> 01:38:45,000
对

2934
01:38:46,000 --> 01:38:46,000
当然了

2935
01:38:46,000 --> 01:38:47,000
除开我们刚刚

2936
01:38:47,000 --> 01:38:49,000
就刚才讲的以上所有 Shell

2937
01:38:49,000 --> 01:38:52,000
都是一个叫做 Lay Unix 系统的

2938
01:38:52,000 --> 01:38:53,000
上面使用的 Shell

2939
01:38:53,000 --> 01:38:53,000
对

2940
01:38:54,000 --> 01:38:57,000
但其实还有一些大家比较常见的 Shell

2941
01:38:57,000 --> 01:38:58,000
但更没有提

2942
01:38:59,000 --> 01:39:00,000
DOS Promote

2943
01:39:00,000 --> 01:39:01,000
其实我们刚才说过

2944
01:39:01,000 --> 01:39:03,000
但是这个东西

2945
01:39:03,000 --> 01:39:05,000
首先 DOS Promote 从来不会把自己叫做

2946
01:39:05,000 --> 01:39:08,000
一个把自己称为一个 Shell

2947
01:39:08,000 --> 01:39:09,000
叫做 Shell

2948
01:39:09,000 --> 01:39:10,000
它叫 Promote

2949
01:39:10,000 --> 01:39:12,000
然后这个东西怎么进行

2950
01:39:12,000 --> 01:39:13,000
在现在的 Windows 里面

2951
01:39:13,000 --> 01:39:14,000
你打开这个开始菜单

2952
01:39:14,000 --> 01:39:16,000
搜索 CMD

2953
01:39:16,000 --> 01:39:19,000
它也会出来一个命令号

2954
01:39:19,000 --> 01:39:20,000
它中文叫什么来着

2955
01:39:21,000 --> 01:39:21,000
这叫 DOS Promote

2956
01:39:21,000 --> 01:39:22,000
这叫命令号

2957
01:39:22,000 --> 01:39:23,000
窗口吧

2958
01:39:23,000 --> 01:39:24,000
就中文版的

2959
01:39:24,000 --> 01:39:25,000
中文版的叫 DOS Promote

2960
01:39:26,000 --> 01:39:27,000
是吗

2961
01:39:27,000 --> 01:39:27,000
OK

2962
01:39:28,000 --> 01:39:28,000
然后你打开

2963
01:39:28,000 --> 01:39:30,000
就会出现一个黑不拉几的窗口

2964
01:39:30,000 --> 01:39:32,000
然后今天可能里面

2965
01:39:32,000 --> 01:39:33,000
最多人跑的两条命令

2966
01:39:33,000 --> 01:39:36,000
一个是叫做 IP Config

2967
01:39:37,000 --> 01:39:39,000
看自己的这个 IP 地址

2968
01:39:39,000 --> 01:39:41,000
然后第二就是 Ping

2969
01:39:41,000 --> 01:39:43,000
然后第三可能还是就是那个了

2970
01:39:43,000 --> 01:39:44,000
就是 NS Lookup

2971
01:39:44,000 --> 01:39:45,000
查 DNS 运作

2972
01:39:46,000 --> 01:39:47,000
这些比较常用

2973
01:39:47,000 --> 01:39:49,000
DIR 列表的一些作用

2974
01:39:51,000 --> 01:39:54,000
这个可能现在用的越来越少

2975
01:39:54,000 --> 01:39:55,000
想象还挺讽刺的

2976
01:39:55,000 --> 01:39:56,000
你在这样一个时代

2977
01:39:56,000 --> 01:39:59,000
检测自己能不能

2978
01:39:59,000 --> 01:40:01,000
连接到另外一台

2979
01:40:01,000 --> 01:40:03,000
计算机的最常见的方法

2980
01:40:03,000 --> 01:40:04,000
居然还是

2981
01:40:04,000 --> 01:40:05,000
就是

2982
01:40:05,000 --> 01:40:06,000
又能使用

2983
01:40:07,000 --> 01:40:09,000
使用一个源自于电传打字机时代的

2984
01:40:10,000 --> 01:40:11,000
一个特征

2985
01:40:11,000 --> 01:40:12,000
一个命令行

2986
01:40:12,000 --> 01:40:14,000
窗口来输入一台

2987
01:40:14,000 --> 01:40:15,000
输入一个

2988
01:40:16,000 --> 01:40:18,000
70 年代的工具的名字

2989
01:40:19,000 --> 01:40:21,000
历史的包袱还是很纯重

2990
01:40:22,000 --> 01:40:23,000
在过去的四五十年里面

2991
01:40:23,000 --> 01:40:25,000
居然没有一个方法能够替代

2992
01:40:28,000 --> 01:40:29,000
但也有一些

2993
01:40:29,000 --> 01:40:30,000
像 Windows 上也有一些比较

2994
01:40:31,000 --> 01:40:33,000
晚进的新鲜的东西

2995
01:40:33,000 --> 01:40:34,000
这个叫做 PowerShell

2996
01:40:34,000 --> 01:40:36,000
PowerShell 应该是在 Windows

2997
01:40:36,000 --> 01:40:38,000
Windows 7 吧

2998
01:40:38,000 --> 01:40:39,000
还是 Vista 的时候才有

2999
01:40:39,000 --> 01:40:40,000
你怎么觉得 NT 时代

3000
01:40:40,000 --> 01:40:41,000
就已经开始研发了

3001
01:40:41,000 --> 01:40:41,000
N

3002
01:40:41,000 --> 01:40:42,000
N 的原因

3003
01:40:43,000 --> 01:40:44,000
我没有用 NT

3004
01:40:44,000 --> 01:40:44,000
我的印象中

3005
01:40:44,000 --> 01:40:47,000
只有在 Vista 或者 Windows 7 里面见过他

3006
01:40:47,000 --> 01:40:49,000
然后 PowerShell 是个什么东西呢

3007
01:40:49,000 --> 01:40:50,000
就是一个

3008
01:40:52,000 --> 01:40:53,000
Windows 在早期会觉得说

3009
01:40:53,000 --> 01:40:54,000
我靠这个

3010
01:40:55,000 --> 01:40:57,000
故意难道不是一统天下的东西吗

3011
01:40:57,000 --> 01:40:58,000
我为什么要去搞命令行这一套

3012
01:40:59,000 --> 01:41:01,000
但是后来他们意识到命令行

3013
01:41:01,000 --> 01:41:02,000
其实生命

3014
01:41:02,000 --> 01:41:03,000
命令行就像野草一样

3015
01:41:03,000 --> 01:41:04,000
或者就像

3016
01:41:05,000 --> 01:41:06,000
像底层的

3017
01:41:06,000 --> 01:41:08,000
命令行还是非常有用的

3018
01:41:08,000 --> 01:41:08,000
这些为什么有用

3019
01:41:08,000 --> 01:41:10,000
像细菌一样会永远活着对吧

3020
01:41:11,000 --> 01:41:12,000
他们发现没办法

3021
01:41:12,000 --> 01:41:13,000
我们也得搞一个

3022
01:41:13,000 --> 01:41:14,000
程序员能用的命令行

3023
01:41:15,000 --> 01:41:16,000
对我想讲

3024
01:41:16,000 --> 01:41:18,000
这个是 Windows NT 的服务器的

3025
01:41:18,000 --> 01:41:19,000
那些衍生过来

3026
01:41:19,000 --> 01:41:21,000
因为当时好像他们提了一个口号是说

3027
01:41:21,000 --> 01:41:23,000
所有能够在

3028
01:41:23,000 --> 01:41:25,000
就所有通过图形界面能做的

3029
01:41:26,000 --> 01:41:28,000
对于 Windows NT 的操作

3030
01:41:28,000 --> 01:41:30,000
都可以通过命令行的方式来执行

3031
01:41:30,000 --> 01:41:31,000
然后这个命令行就是 PowerShell

3032
01:41:33,000 --> 01:41:34,000
然后他们就搞出 PowerShell

3033
01:41:34,000 --> 01:41:37,000
这个东西当然跟 SH 是不兼容的

3034
01:41:37,000 --> 01:41:38,000
就是

3035
01:41:38,000 --> 01:41:39,000
好无聊

3036
01:41:40,000 --> 01:41:40,000
怎么可能

3037
01:41:41,000 --> 01:41:44,000
但是这个东西的语法是非常

3038
01:41:45,000 --> 01:41:48,000
就学习曲线是比较陡峭

3039
01:41:48,000 --> 01:41:50,000
首先它区分大小写

3040
01:41:51,000 --> 01:41:53,000
你把它做成微小 basic 多好

3041
01:41:53,000 --> 01:41:54,000
对不对

3042
01:41:54,000 --> 01:41:55,000
不区分大小写

3043
01:41:55,000 --> 01:41:56,000
首先区分大小写

3044
01:41:56,000 --> 01:41:59,000
其次它的很多参数和

3045
01:41:59,000 --> 01:42:01,000
做许多事情的这个

3046
01:42:02,000 --> 01:42:04,000
方法都非常的啰嗦

3047
01:42:04,000 --> 01:42:04,000
它可能

3048
01:42:05,000 --> 01:42:08,000
它希望把很多事情做得很正统

3049
01:42:08,000 --> 01:42:10,000
或者说很有条理

3050
01:42:10,000 --> 01:42:12,000
但其结果就是

3051
01:42:12,000 --> 01:42:14,000
如果你有

3052
01:42:15,000 --> 01:42:18,000
这个 Uniq Shell 的背景的话

3053
01:42:18,000 --> 01:42:19,000
你会觉得这套东西

3054
01:42:19,000 --> 01:42:21,000
就是啰嗦到一个境界

3055
01:42:21,000 --> 01:42:23,000
但是我不知道

3056
01:42:23,000 --> 01:42:24,000
纯粹的微小程序员会怎么想

3057
01:42:24,000 --> 01:42:26,000
可能会感觉会不一样

3058
01:42:27,000 --> 01:42:28,000
不过它这有一个好处

3059
01:42:28,000 --> 01:42:29,000
就刚刚我说了

3060
01:42:29,000 --> 01:42:31,000
因为它的设计原则是说

3061
01:42:31,000 --> 01:42:33,000
所有图形界面能做的事情它都能做

3062
01:42:34,000 --> 01:42:34,000
所以它的

3063
01:42:36,000 --> 01:42:37,000
feature completeness

3064
01:42:37,000 --> 01:42:39,000
就是这个功能的完整性

3065
01:42:39,000 --> 01:42:42,000
是所有目前所有 Shell 里面最强大的

3066
01:42:42,000 --> 01:42:42,000
就是

3067
01:42:43,000 --> 01:42:45,000
就是你可以完全抛弃图形界面

3068
01:42:45,000 --> 01:42:45,000
然后通过

3069
01:42:47,000 --> 01:42:49,000
Shell 的方式去改变

3070
01:42:49,000 --> 01:42:53,000
一个 Windows NT 的服务器的任何一个部分

3071
01:42:53,000 --> 01:42:53,000
对吧

3072
01:42:53,000 --> 01:42:55,000
因为在 Uniqs 里面它就有一个哲学

3073
01:42:55,000 --> 01:42:56,000
就是纯文本

3074
01:42:57,000 --> 01:42:58,000
纯文本至上

3075
01:42:58,000 --> 01:42:59,000
在 Uniqs 里面

3076
01:43:00,000 --> 01:43:03,000
在不同命令之间流淌的纯文本流

3077
01:43:03,000 --> 01:43:05,000
可能是你唯一能够依赖的东西

3078
01:43:05,000 --> 01:43:07,000
但是在 Windows 的 power shell 里面

3079
01:43:08,000 --> 01:43:10,000
很多东西它已经不再是纯文本的东西了

3080
01:43:10,000 --> 01:43:12,000
它是基于对象的

3081
01:43:12,000 --> 01:43:13,000
它是一个 structured

3082
01:43:13,000 --> 01:43:17,000
你可以在两个命令之间传递一个 object

3083
01:43:18,000 --> 01:43:20,000
这在 Links 里面是不可想象的

3084
01:43:21,000 --> 01:43:22,000
也因此

3085
01:43:22,000 --> 01:43:24,000
就结构化的数据传输

3086
01:43:24,000 --> 01:43:27,000
而不是基于文本的数据传输

3087
01:43:27,000 --> 01:43:28,000
对

3088
01:43:29,000 --> 01:43:31,000
这在 Links 里面你即便能做到

3089
01:43:31,000 --> 01:43:33,000
也是要通过一大堆什么 TR

3090
01:43:33,000 --> 01:43:37,000
什么 AUK 之类的来实现

3091
01:43:37,000 --> 01:43:38,000
就可靠性很差

3092
01:43:38,000 --> 01:43:39,000
简单来讲

3093
01:43:39,000 --> 01:43:40,000
就是灵活性很强

3094
01:43:40,000 --> 01:43:41,000
但可靠性很差

3095
01:43:41,000 --> 01:43:44,000
判断各种 edge case 比较麻烦

3096
01:43:44,000 --> 01:43:46,000
power shell 就完全没有这个问题

3097
01:43:46,000 --> 01:43:49,000
因为它可以传输一个结构化的对象

3098
01:43:49,000 --> 01:43:53,000
保证不需要经过反序列化造成的种种问题

3099
01:43:53,000 --> 01:43:58,000
可以直接去 access 某一个 property

3100
01:43:58,000 --> 01:44:03,000
而且因为它是被自上而下设计出来的这么一个 shell

3101
01:44:03,000 --> 01:44:05,000
它的语法虽然说你可能觉得啰嗦

3102
01:44:05,000 --> 01:44:07,000
但是它好像是比较规整

3103
01:44:07,000 --> 01:44:08,000
就是 regular

3104
01:44:08,000 --> 01:44:09,000
可以举一反三

3105
01:44:09,000 --> 01:44:11,000
不像 Links

3106
01:44:11,000 --> 01:44:12,000
像德语一样

3107
01:44:13,000 --> 01:44:13,000
不像英语

3108
01:44:13,000 --> 01:44:16,000
你必须不停的去 RTFM

3109
01:44:16,000 --> 01:44:17,000
你必须不停的去看音标

3110
01:44:17,000 --> 01:44:18,000
对吧

3111
01:44:18,000 --> 01:44:21,000
对你去记住各种特例

3112
01:44:21,000 --> 01:44:22,000
到底怎么一回事

3113
01:44:22,000 --> 01:44:23,000
会比较痛苦一些

3114
01:44:25,000 --> 01:44:26,000
对

3115
01:44:26,000 --> 01:44:30,000
刚才讲了那么多 shell 的来龙去脉的种种好吃

3116
01:44:30,000 --> 01:44:32,000
其实我们有一个核心的要探讨的问题

3117
01:44:32,000 --> 01:44:33,000
就是为什么要用 shell

3118
01:44:33,000 --> 01:44:34,000
为什么要用命令行

3119
01:44:34,000 --> 01:44:36,000
其实这才是本期的重点

3120
01:44:36,000 --> 01:44:39,000
不过你对 shell 的重点估计只有 5 分钟

3121
01:44:40,000 --> 01:44:42,000
来龙去脉如果你已经了如指掌

3122
01:44:42,000 --> 01:44:46,000
前面的部分真的是可以自己去看书可能会比较快一点

3123
01:44:46,000 --> 01:44:49,000
但是我们做了这么多历史的铺垫

3124
01:44:50,000 --> 01:44:52,000
介绍了这么多杂七杂八的东西

3125
01:44:52,000 --> 01:44:57,000
只想要强调说命令行的生命利益在今天还是非常旺盛

3126
01:44:59,000 --> 01:45:00,000
所以为什么要用命令行

3127
01:45:02,000 --> 01:45:03,000
因为它在哪

3128
01:45:03,000 --> 01:45:06,000
它在哪

3129
01:45:06,000 --> 01:45:07,000
不一定你要用

3130
01:45:07,000 --> 01:45:08,000
它的魅力在哪里

3131
01:45:08,000 --> 01:45:09,000
为什么

3132
01:45:09,000 --> 01:45:13,000
首先我觉得命令行是非常简单的一件事情

3133
01:45:14,000 --> 01:45:17,000
你在 define 简单

3134
01:45:17,000 --> 01:45:23,000
你在使用一个 60 年代开始就应该被使用的技术

3135
01:45:23,000 --> 01:45:25,000
但是非常的易于理解

3136
01:45:27,000 --> 01:45:28,000
简单的一个特征

3137
01:45:28,000 --> 01:45:29,000
比如说你

3138
01:45:30,000 --> 01:45:34,000
在单一时间只能在屏幕的单一地方输入一个字符

3139
01:45:34,000 --> 01:45:35,000
对吧

3140
01:45:36,000 --> 01:45:36,000
不像

3141
01:45:36,000 --> 01:45:38,000
天生单人物系统

3142
01:45:38,000 --> 01:45:42,000
不像你在使用一个图形界面的时候

3143
01:45:42,000 --> 01:45:43,000
你有鼠标

3144
01:45:43,000 --> 01:45:45,000
你会想要说

3145
01:45:45,000 --> 01:45:46,000
你要找一个按钮

3146
01:45:46,000 --> 01:45:48,000
但是你的目光

3147
01:45:48,000 --> 01:45:49,000
你在搜索这个按钮的时候

3148
01:45:49,000 --> 01:45:50,000
你会看到很多其他东西

3149
01:45:50,000 --> 01:45:52,000
命令行不是

3150
01:45:52,000 --> 01:45:54,000
命令行就空档档的一个东西在那摆上

3151
01:45:54,000 --> 01:45:55,000
然后你要是想不起来的话

3152
01:45:55,000 --> 01:45:56,000
你就想不起来

3153
01:45:56,000 --> 01:45:57,000
然后你要去找的话

3154
01:45:58,000 --> 01:45:58,000
很有可能

3155
01:45:58,000 --> 01:45:59,000
你要么找

3156
01:45:59,000 --> 01:46:00,000
你可以直接找

3157
01:46:00,000 --> 01:46:01,000
你要找的东西

3158
01:46:01,000 --> 01:46:03,000
要么你就完全找不到

3159
01:46:03,000 --> 01:46:04,000
对吧

3160
01:46:05,000 --> 01:46:06,000
所以这个是缺点

3161
01:46:06,000 --> 01:46:08,000
就是它的可发现性比较差

3162
01:46:11,000 --> 01:46:12,000
任何事情都是双人间

3163
01:46:13,000 --> 01:46:15,000
使用图形界面的时候

3164
01:46:15,000 --> 01:46:16,000
我经常会觉得

3165
01:46:17,000 --> 01:46:18,000
distract

3166
01:46:20,000 --> 01:46:23,000
因为屏幕上太多这种 bling bling 的小广告

3167
01:46:23,000 --> 01:46:25,000
屏幕上会显示着很多

3168
01:46:25,000 --> 01:46:26,000
你此时用不到

3169
01:46:26,000 --> 01:46:28,000
但是你很有可能

3170
01:46:28,000 --> 01:46:29,000
在下一秒就要用到东西

3171
01:46:31,000 --> 01:46:32,000
但你又不可能

3172
01:46:32,000 --> 01:46:34,000
或者说目前还没有一个软件

3173
01:46:34,000 --> 01:46:40,000
会把所有的菜单和工具条全都做成

3174
01:46:42,000 --> 01:46:43,000
隐藏式的或者浮动式

3175
01:46:43,000 --> 01:46:45,000
因为这个如果那样的话

3176
01:46:45,000 --> 01:46:47,000
你又需要去动一下鼠标

3177
01:46:47,000 --> 01:46:48,000
他们才会弹出来

3178
01:46:49,000 --> 01:46:51,000
或者是需要去按一个什么东西

3179
01:46:51,000 --> 01:46:51,000
反正总

3180
01:46:51,000 --> 01:46:54,000
所有这些都会让你觉得命令行

3181
01:46:54,000 --> 01:46:55,000
就是这个图形界面

3182
01:46:55,000 --> 01:46:57,000
固然方便

3183
01:46:57,000 --> 01:47:00,000
但是有时候也特别的啰嗦

3184
01:47:00,000 --> 01:47:01,000
命令行就不一样

3185
01:47:01,000 --> 01:47:03,000
你可能你所要做的两件事情

3186
01:47:03,000 --> 01:47:05,000
就是敲命令和按回车

3187
01:47:07,000 --> 01:47:08,000
或者说你所要做的两件事情

3188
01:47:08,000 --> 01:47:09,000
就是输入和输出

3189
01:47:09,000 --> 01:47:11,000
然后所有这些东西

3190
01:47:11,000 --> 01:47:13,000
都是在一个特定的地方完成的

3191
01:47:13,000 --> 01:47:15,000
然后你需要关注的点

3192
01:47:15,000 --> 01:47:16,000
也就只有那么一点而已

3193
01:47:19,000 --> 01:47:20,000
再就是我觉得

3194
01:47:20,000 --> 01:47:22,000
其实命令行下面的工具

3195
01:47:22,000 --> 01:47:25,000
要更切中要害一点

3196
01:47:25,000 --> 01:47:26,000
比如说

3197
01:47:26,000 --> 01:47:27,000
比如说 Git

3198
01:47:27,000 --> 01:47:29,000
你要看 Git 的这个 revision history

3199
01:47:29,000 --> 01:47:31,000
我基本上只会用 Tig

3200
01:47:31,000 --> 01:47:32,000
就我不是没有用过其他的

3201
01:47:32,000 --> 01:47:34,000
什么 SourceTray 或者是

3202
01:47:36,000 --> 01:47:37,000
Atlasin 出的那个

3203
01:47:37,000 --> 01:47:39,000
网页版的工具叫什么来着

3204
01:47:39,000 --> 01:47:40,000
我不记得

3205
01:47:40,000 --> 01:47:43,000
但是所有这些看 Git revision 的工具

3206
01:47:43,000 --> 01:47:45,000
感觉都没有 Tig 方便

3207
01:47:46,000 --> 01:47:49,000
而打开 Tig 的

3208
01:47:50,000 --> 01:47:51,000
步骤

3209
01:47:51,000 --> 01:47:52,000
也就是输入 Tig 按回车而已

3210
01:47:52,000 --> 01:47:53,000
没有什么

3211
01:47:54,000 --> 01:47:55,000
就一步之遥

3212
01:47:55,000 --> 01:47:57,000
然后你离开也只有一步之遥

3213
01:47:57,000 --> 01:47:58,000
不需要去点一个工具

3214
01:47:58,000 --> 01:47:59,000
点一个图标

3215
01:47:59,000 --> 01:48:00,000
然后看它运行

3216
01:48:00,000 --> 01:48:04,000
然后选入选那个 repoxy 之类的

3217
01:48:04,000 --> 01:48:04,000
对吧

3218
01:48:06,000 --> 01:48:07,000
我觉得命令行下面

3219
01:48:07,000 --> 01:48:08,000
很多工具都比较短小

3220
01:48:08,000 --> 01:48:09,000
然后切中要害

3221
01:48:10,000 --> 01:48:10,000
这是一个

3222
01:48:11,000 --> 01:48:13,000
所以其实这句话

3223
01:48:13,000 --> 01:48:14,000
你刚才讲的中文

3224
01:48:14,000 --> 01:48:15,000
翻译成英文

3225
01:48:15,000 --> 01:48:16,000
其实在 Unix 的这个

3226
01:48:16,000 --> 01:48:18,000
因为 Unix 大部分是一个命令行

3227
01:48:18,000 --> 01:48:20,000
驱动的工具

3228
01:48:20,000 --> 01:48:21,000
就是 Snap 系统的对吧

3229
01:48:21,000 --> 01:48:23,000
他们追求的这么一个

3230
01:48:23,000 --> 01:48:24,000
设计这些叫做

3231
01:48:24,000 --> 01:48:26,000
Do one thing and do it well

3232
01:48:26,000 --> 01:48:27,000
对就是这样

3233
01:48:27,000 --> 01:48:29,000
有一个工具

3234
01:48:29,000 --> 01:48:30,000
只做一件事

3235
01:48:30,000 --> 01:48:32,000
并且把这件事做到极致

3236
01:48:32,000 --> 01:48:34,000
然后比如说刚才讲的 Tig

3237
01:48:34,000 --> 01:48:36,000
它可以去浏览

3238
01:48:37,000 --> 01:48:39,000
Git repository 的情况

3239
01:48:39,000 --> 01:48:41,000
还有其他各种各样的小工具

3240
01:48:42,000 --> 01:48:43,000
它可以去

3241
01:48:43,000 --> 01:48:44,000
比如说可以去

3242
01:48:44,000 --> 01:48:46,000
列表一个目录的内容

3243
01:48:46,000 --> 01:48:48,000
或者是插在一个文件里面

3244
01:48:48,000 --> 01:48:48,000
插着东西

3245
01:48:48,000 --> 01:48:50,000
它都是些很小的一个步骤

3246
01:48:51,000 --> 01:48:54,000
然后因为有余命令行的管道

3247
01:48:54,000 --> 01:48:55,000
的功能

3248
01:48:55,000 --> 01:48:56,000
它可以使得

3249
01:48:57,000 --> 01:48:59,000
两个程序之间配合

3250
01:48:59,000 --> 01:49:01,000
比如说上一个程序的输出

3251
01:49:01,000 --> 01:49:03,000
变成下一个程序的输入

3252
01:49:03,000 --> 01:49:05,000
然后这个链条是可以

3253
01:49:05,000 --> 01:49:06,000
扩的无限长的

3254
01:49:06,000 --> 01:49:09,000
他们之间存在一个叫做可组合性

3255
01:49:09,000 --> 01:49:09,000
就是说

3256
01:49:10,000 --> 01:49:12,000
如果你是一个工具箱里面

3257
01:49:12,000 --> 01:49:14,000
有锤子有钉子

3258
01:49:14,000 --> 01:49:15,000
还有锤子有扳手

3259
01:49:15,000 --> 01:49:17,000
这些东西之外

3260
01:49:17,000 --> 01:49:18,000
它还能组合成一些

3261
01:49:19,000 --> 01:49:21,000
一套完整的工具链

3262
01:49:21,000 --> 01:49:23,000
使得你可以完成各种各样

3263
01:49:23,000 --> 01:49:24,000
比较复杂

3264
01:49:24,000 --> 01:49:26,000
或者更加灵活地

3265
01:49:26,000 --> 01:49:27,000
去应对工作场景

3266
01:49:27,000 --> 01:49:30,000
所以工具的完善性

3267
01:49:30,000 --> 01:49:33,000
每一个工具的小巧可靠

3268
01:49:33,000 --> 01:49:34,000
以及他们之间的相互组合性

3269
01:49:34,000 --> 01:49:36,000
我觉得这个是命令行

3270
01:49:37,000 --> 01:49:39,000
生态最大的魅力所在

3271
01:49:39,000 --> 01:49:40,000
没错

3272
01:49:40,000 --> 01:49:43,000
而反过来在图形界面之下

3273
01:49:43,000 --> 01:49:45,000
你就没有这样的概念存在

3274
01:49:45,000 --> 01:49:46,000
就是你

3275
01:49:47,000 --> 01:49:49,000
你怎么那样才能把一个图形界面的

3276
01:49:49,000 --> 01:49:50,000
工具的输出

3277
01:49:50,000 --> 01:49:52,000
转入到另外一个图形界面的

3278
01:49:52,000 --> 01:49:52,000
工具的输入里面

3279
01:49:53,000 --> 01:49:55,000
copy and paste 也有

3280
01:49:55,000 --> 01:49:56,000
对 copy and paste

3281
01:49:56,000 --> 01:49:57,000
或者叫做 drag and drop

3282
01:49:57,000 --> 01:49:59,000
或者是拖拉

3283
01:49:59,000 --> 01:50:00,000
但这些是自动化的

3284
01:50:01,000 --> 01:50:03,000
没有办法同时说

3285
01:50:03,000 --> 01:50:04,000
我永远要把

3286
01:50:04,000 --> 01:50:06,000
自动化这些倒不是一个问题

3287
01:50:06,000 --> 01:50:07,000
我觉得最主要的问题就是说

3288
01:50:07,000 --> 01:50:12,000
他们因为图形化的内容的传递

3289
01:50:12,000 --> 01:50:15,000
之间不存在一个叫做

3290
01:50:15,000 --> 01:50:16,000
universal interface

3291
01:50:16,000 --> 01:50:17,000
universal interface

3292
01:50:17,000 --> 01:50:19,000
就同一个接口就是文本 text

3293
01:50:19,000 --> 01:50:21,000
就图形化的界面

3294
01:50:21,000 --> 01:50:23,000
它不存在这么一个

3295
01:50:23,000 --> 01:50:25,000
通用的一个接口

3296
01:50:25,000 --> 01:50:27,000
使得并不是任意两个程序之间的

3297
01:50:27,000 --> 01:50:30,000
这个输出都是可以直接 drag and drop

3298
01:50:30,000 --> 01:50:32,000
来组合的

3299
01:50:32,000 --> 01:50:33,000
所以必须说

3300
01:50:34,000 --> 01:50:34,000
你开发了

3301
01:50:34,000 --> 01:50:37,000
假设你在 footshop 里面编辑了一个图片

3302
01:50:37,000 --> 01:50:39,000
然后你要导入到另外一个工具里面

3303
01:50:39,000 --> 01:50:41,000
去做一个进一步的处理

3304
01:50:41,000 --> 01:50:44,000
你得把它变成一个文件

3305
01:50:44,000 --> 01:50:46,000
然后在 hopefully

3306
01:50:46,000 --> 01:50:49,000
你的下一个环节的工具

3307
01:50:49,000 --> 01:50:50,000
能够打开上一个环节

3308
01:50:51,000 --> 01:50:52,000
这个工具生成的图片

3309
01:50:52,000 --> 01:50:54,000
然后导入到自己的里面

3310
01:50:54,000 --> 01:50:56,000
然后再做进一步的操作对吧

3311
01:50:56,000 --> 01:50:56,000
对

3312
01:50:56,000 --> 01:50:57,000
所以

3313
01:50:58,000 --> 01:51:00,000
这里就有一个

3314
01:51:02,000 --> 01:51:03,000
composability

3315
01:51:03,000 --> 01:51:04,000
这个合成性的问题

3316
01:51:04,000 --> 01:51:06,000
会比稍微差一些

3317
01:51:06,000 --> 01:51:08,000
但这只是一个我们理解通常状况

3318
01:51:08,000 --> 01:51:09,000
但也有很好的

3319
01:51:10,000 --> 01:51:11,000
合成性

3320
01:51:11,000 --> 01:51:13,000
相对还不错的这么一个环境

3321
01:51:13,000 --> 01:51:14,000
比如说在

3322
01:51:14,000 --> 01:51:15,000
就像现在的 iOS 上面

3323
01:51:15,000 --> 01:51:16,000
就有

3324
01:51:16,000 --> 01:51:18,000
就因为它没有文件系统暴露出来

3325
01:51:18,000 --> 01:51:20,000
也没有命令行暴露出来给你用

3326
01:51:20,000 --> 01:51:23,000
所以上下游的配合

3327
01:51:23,000 --> 01:51:25,000
是你必须要考

3328
01:51:25,000 --> 01:51:26,000
作为系统的设计者

3329
01:51:26,000 --> 01:51:27,000
你必须要考虑的一个问题

3330
01:51:28,000 --> 01:51:30,000
现在就是说你可以分享到

3331
01:51:30,000 --> 01:51:31,000
某一个应用里面去对吧

3332
01:51:32,000 --> 01:51:33,000
你如果那个应用

3333
01:51:33,000 --> 01:51:36,000
它刚好能够接受这么一个图片格式

3334
01:51:36,000 --> 01:51:36,000
或者文件格式也好

3335
01:51:36,000 --> 01:51:38,000
它是其实能够

3336
01:51:38,000 --> 01:51:39,000
把这个链条传下去的

3337
01:51:39,000 --> 01:51:40,000
只是说

3338
01:51:41,000 --> 01:51:42,000
由于

3339
01:51:42,000 --> 01:51:43,000
还是那个问题

3340
01:51:43,000 --> 01:51:43,000
就不存在

3341
01:51:44,000 --> 01:51:45,000
Tax as a universal interface

3342
01:51:45,000 --> 01:51:48,000
同时也不存在一个强硬的机构

3343
01:51:48,000 --> 01:51:49,000
来要求所有的程序

3344
01:51:49,000 --> 01:51:51,000
都必须实现一套

3345
01:51:51,000 --> 01:51:51,000
这个

3346
01:51:52,000 --> 01:51:54,000
跟其他这个程序交互的接口

3347
01:51:54,000 --> 01:51:55,000
所以

3348
01:51:55,000 --> 01:51:55,000
对

3349
01:51:55,000 --> 01:51:57,000
所以这个整个还是也相对来说

3350
01:51:57,000 --> 01:51:58,000
比较难一点

3351
01:51:58,000 --> 01:52:00,000
然后我觉得可能命令行

3352
01:52:00,000 --> 01:52:01,000
对我来说

3353
01:52:01,000 --> 01:52:02,000
另外一个好处就是

3354
01:52:02,000 --> 01:52:03,000
它可以表述一些

3355
01:52:04,000 --> 01:52:05,000
比较复杂的一个概念

3356
01:52:05,000 --> 01:52:07,000
比如说因为有这个

3357
01:52:07,000 --> 01:52:08,000
有这个

3358
01:52:09,000 --> 01:52:10,000
语法的存在

3359
01:52:10,000 --> 01:52:11,000
它其实是一个

3360
01:52:12,000 --> 01:52:14,000
它是一个叫做 Turing complete language

3361
01:52:14,000 --> 01:52:16,000
它是一个完整的编程语言对吧

3362
01:52:16,000 --> 01:52:18,000
所以其实里面可以做一些相对来说

3363
01:52:18,000 --> 01:52:19,000
很复杂的

3364
01:52:19,000 --> 01:52:21,000
或者更加抽象的一些操作

3365
01:52:21,000 --> 01:52:22,000
而这些操作

3366
01:52:22,000 --> 01:52:24,000
通过点点鼠标这种图形化的方式

3367
01:52:24,000 --> 01:52:25,000
是比较难办到的

3368
01:52:25,000 --> 01:52:26,000
比如说

3369
01:52:26,000 --> 01:52:28,000
很多人都遇到过这个难题

3370
01:52:29,000 --> 01:52:30,000
你一个目录里面

3371
01:52:30,000 --> 01:52:32,000
就假设考虑文件的情况下

3372
01:52:32,000 --> 01:52:35,000
你要批量改一堆文件的文件名

3373
01:52:35,000 --> 01:52:36,000
比如说前面加一个前缀

3374
01:52:36,000 --> 01:52:38,000
或者去掉一个后缀这种事情

3375
01:52:38,000 --> 01:52:40,000
你不借助一些特殊的工具

3376
01:52:40,000 --> 01:52:41,000
在这个

3377
01:52:42,000 --> 01:52:44,000
图形界面里面是很难实现这一点的

3378
01:52:44,000 --> 01:52:46,000
不可能一个点鼠标去改对吧

3379
01:52:46,000 --> 01:52:47,000
但是在命令行下面

3380
01:52:47,000 --> 01:52:49,000
你其实因为有语法的

3381
01:52:49,000 --> 01:52:51,000
一个编程语言的存在

3382
01:52:51,000 --> 01:52:54,000
你其实可以对这些文本做一些

3383
01:52:55,000 --> 01:52:56,000
很高级的操作

3384
01:52:56,000 --> 01:52:58,000
然后把这些操作变成一个

3385
01:52:58,000 --> 01:52:59,000
实际可以执行的代码

3386
01:52:59,000 --> 01:53:01,000
然后这个代码可能就调用一个

3387
01:53:01,000 --> 01:53:03,000
比如说 Move 修改文件名的

3388
01:53:03,000 --> 01:53:05,000
这么一个命令去执行它

3389
01:53:05,000 --> 01:53:08,000
所以这面也是一个很重要的问题

3390
01:53:08,000 --> 01:53:09,000
但可能现在

3391
01:53:09,000 --> 01:53:11,000
图形界面里面最接近这个的

3392
01:53:11,000 --> 01:53:13,000
应该是像 OS X 自带的

3393
01:53:13,000 --> 01:53:14,000
那个叫做 Automater

3394
01:53:14,000 --> 01:53:17,000
就自动化的一个工具

3395
01:53:17,000 --> 01:53:19,000
那个图标是一个机器人

3396
01:53:19,000 --> 01:53:20,000
白色机器人

3397
01:53:20,000 --> 01:53:21,000
拿着一个黑色的枪

3398
01:53:21,000 --> 01:53:21,000
还是什么的

3399
01:53:21,000 --> 01:53:23,000
你把这个管子

3400
01:53:23,000 --> 01:53:24,000
不是枪

3401
01:53:24,000 --> 01:53:25,000
管子对

3402
01:53:25,000 --> 01:53:26,000
黑色的管子对

3403
01:53:26,000 --> 01:53:27,000
pipe

3404
01:53:27,000 --> 01:53:29,000
然后你可以做一些组合

3405
01:53:29,000 --> 01:53:30,000
但是

3406
01:53:30,000 --> 01:53:31,000
一万个卖手机的

3407
01:53:31,000 --> 01:53:33,000
没有一个人会用这个就行

3408
01:53:33,000 --> 01:53:34,000
就是高

3409
01:53:34,000 --> 01:53:36,000
高阶 OS X 的用法

3410
01:53:36,000 --> 01:53:38,000
这用户才会去理解

3411
01:53:38,000 --> 01:53:40,000
或者使用到的这么一个场景

3412
01:53:40,000 --> 01:53:41,000
我偶尔也会用到

3413
01:53:41,000 --> 01:53:42,000
然后他们也做了一些功能

3414
01:53:42,000 --> 01:53:43,000
其实也蛮强大的

3415
01:53:43,000 --> 01:53:44,000
比如说它可以

3416
01:53:44,000 --> 01:53:45,000
批量的从一个

3417
01:53:47,000 --> 01:53:47,000
假设好

3418
01:53:47,000 --> 01:53:49,000
一个 PDF 文件里面

3419
01:53:49,000 --> 01:53:50,000
抽取出多少页

3420
01:53:50,000 --> 01:53:51,000
然后再把这些页批量的

3421
01:53:51,000 --> 01:53:53,000
转化成一个图片文件

3422
01:53:53,000 --> 01:53:55,000
然后再单独出现在某个地方

3423
01:53:55,000 --> 01:53:56,000
对吧

3424
01:53:56,000 --> 01:53:57,000
或者是批量的

3425
01:53:57,000 --> 01:53:59,000
去修改一些文件

3426
01:53:59,000 --> 01:54:00,000
图片文件

3427
01:54:00,000 --> 01:54:01,000
比如说转换格式

3428
01:54:01,000 --> 01:54:02,000
改变文件大小

3429
01:54:03,000 --> 01:54:03,000
再压缩这种

3430
01:54:03,000 --> 01:54:05,000
或者它也可以有

3431
01:54:05,000 --> 01:54:06,000
但是它的学习曲线

3432
01:54:06,000 --> 01:54:08,000
还是比较陡峭的

3433
01:54:08,000 --> 01:54:09,000
没错

3434
01:54:10,000 --> 01:54:12,000
当然命令行也有它自己的缺点了

3435
01:54:12,000 --> 01:54:12,000
比如刚才讲的

3436
01:54:14,000 --> 01:54:15,000
发现性比较差

3437
01:54:15,000 --> 01:54:16,000
就是如果你不知道

3438
01:54:17,000 --> 01:54:17,000
有一个功能

3439
01:54:17,000 --> 01:54:18,000
可以用什么方式来实现

3440
01:54:18,000 --> 01:54:19,000
你就是不知道怎么用

3441
01:54:19,000 --> 01:54:20,000
没有人会告诉你

3442
01:54:20,000 --> 01:54:21,000
不像在图形节目里

3443
01:54:21,000 --> 01:54:22,000
你必须去点

3444
01:54:22,000 --> 01:54:24,000
到处点到处试对吧

3445
01:54:24,000 --> 01:54:25,000
对

3446
01:54:25,000 --> 01:54:27,000
你可以大概找得到它在哪里

3447
01:54:27,000 --> 01:54:28,000
如果命令行里面你找不到

3448
01:54:28,000 --> 01:54:29,000
你不知道它在哪

3449
01:54:29,000 --> 01:54:30,000
你真的是

3450
01:54:30,000 --> 01:54:31,000
你不知道它是什么

3451
01:54:31,000 --> 01:54:32,000
你真的就不知道去哪里找

3452
01:54:32,000 --> 01:54:33,000
当然一个笨办法

3453
01:54:33,000 --> 01:54:34,000
就是一个一个去读

3454
01:54:34,000 --> 01:54:36,000
这个 menu 读手册

3455
01:54:37,000 --> 01:54:41,000
但是有些 cash 是有些点子

3456
01:54:41,000 --> 01:54:43,000
其实如果你没有人告诉你

3457
01:54:43,000 --> 01:54:44,000
的话你就是不知道的

3458
01:54:44,000 --> 01:54:44,000
对吧

3459
01:54:44,000 --> 01:54:44,000
比如说

3460
01:54:45,000 --> 01:54:46,000
需要需要实践

3461
01:54:46,000 --> 01:54:47,000
需要去累积吗

3462
01:54:47,000 --> 01:54:48,000
对

3463
01:54:48,000 --> 01:54:49,000
就你会需要

3464
01:54:49,000 --> 01:54:50,000
真的有一个传承

3465
01:54:50,000 --> 01:54:51,000
有一个师傅去告诉你

3466
01:54:51,000 --> 01:54:52,000
这个东西就是这样

3467
01:54:52,000 --> 01:54:53,000
你得你得这么用

3468
01:54:53,000 --> 01:54:54,000
不然就是不行

3469
01:54:54,000 --> 01:54:54,000
比如说

3470
01:54:55,000 --> 01:55:01,000
从 DOS 命令行到 Linux 转换的过程中

3471
01:55:01,000 --> 01:55:02,000
你可能会遇到一个问题

3472
01:55:02,000 --> 01:55:04,000
就是怎么样改名一个文件

3473
01:55:04,000 --> 01:55:04,000
对吧

3474
01:55:05,000 --> 01:55:07,000
你会发现 Linux 没有 rename 这个功能

3475
01:55:07,000 --> 01:55:08,000
你会说我说我靠

3476
01:55:08,000 --> 01:55:10,000
怎么会改文件

3477
01:55:10,000 --> 01:55:11,000
这种东西是做不到的

3478
01:55:11,000 --> 01:55:12,000
这不可能

3479
01:55:12,000 --> 01:55:14,000
但是直到有人告诉你说你要 move

3480
01:55:15,000 --> 01:55:17,000
你要移动一个文件

3481
01:55:17,000 --> 01:55:22,000
把一个东西从 A 移动到 B 的工具

3482
01:55:22,000 --> 01:55:23,000
也可以完成

3483
01:55:23,000 --> 01:55:25,000
把一个东西从 A 命名为 B

3484
01:55:25,000 --> 01:55:28,000
这是需要有人告诉你这件事情

3485
01:55:28,000 --> 01:55:28,000
对吧

3486
01:55:30,000 --> 01:55:31,000
类似的例子还有什么

3487
01:55:31,000 --> 01:55:33,000
比如说你在 DOS 下面

3488
01:55:33,000 --> 01:55:35,000
你我觉得什么 copy

3489
01:55:35,000 --> 01:55:39,000
新点

3490
01:55:39,000 --> 01:55:42,000
txt 空格新点 exe

3491
01:55:42,000 --> 01:55:44,000
你可以批量的把所有的

3492
01:55:45,000 --> 01:55:47,000
纯文本文件转换为 exe 文件

3493
01:55:48,000 --> 01:55:49,000
但在 Linux 下面这是做不到的

3494
01:55:49,000 --> 01:55:49,000
对吧

3495
01:55:49,000 --> 01:55:51,000
你会说我靠为什么

3496
01:55:51,000 --> 01:55:53,000
就得有一个人跟你解释

3497
01:55:53,000 --> 01:55:55,000
Linux 下面的所谓

3498
01:55:57,000 --> 01:55:59,000
shall extension

3499
01:56:00,000 --> 01:56:01,000
这个叫什么来着

3500
01:56:02,000 --> 01:56:04,000
interpolation

3501
01:56:04,000 --> 01:56:04,000
对

3502
01:56:04,000 --> 01:56:07,000
命令行扩展跟 DOS 下面的机制是不一样的

3503
01:56:07,000 --> 01:56:08,000
对吧

3504
01:56:08,000 --> 01:56:10,000
这很多东西你都要自己弄明白

3505
01:56:13,000 --> 01:56:13,000
这也是

3506
01:56:13,000 --> 01:56:16,000
所以现在其实有网络也好

3507
01:56:16,000 --> 01:56:20,000
因为如果之前我们当时用命令行的时候

3508
01:56:20,000 --> 01:56:22,000
只能看杂志上面一个小 tips 的区域

3509
01:56:22,000 --> 01:56:23,000
对吧

3510
01:56:23,000 --> 01:56:24,000
就非常有限的

3511
01:56:24,000 --> 01:56:25,000
也没办法搜索

3512
01:56:25,000 --> 01:56:26,000
对

3513
01:56:26,000 --> 01:56:27,000
现在就是有很多这种网站

3514
01:56:27,000 --> 01:56:31,000
它会有那种叫做小摘要的形式

3515
01:56:31,000 --> 01:56:33,000
去告诉你说有这么一个功能

3516
01:56:33,000 --> 01:56:34,000
你可以用怎么方

3517
01:56:34,000 --> 01:56:36,000
拿这个命令组合可以实现这么一个功能

3518
01:56:36,000 --> 01:56:37,000
比如说像什么

3519
01:56:37,000 --> 01:56:40,000
这种叫做 Compound Life 的这么一个网站

3520
01:56:40,000 --> 01:56:41,000
就可以做类似的事

3521
01:56:41,000 --> 01:56:44,000
我觉得那个时候学 Linux 真的是用生命在学

3522
01:56:44,000 --> 01:56:50,000
可要把自己的心爱的游戏分区搞丢的危险

3523
01:56:50,000 --> 01:56:51,000
装一个 Linux

3524
01:56:51,000 --> 01:56:57,000
然后要买要要从书店里面买 Linux 的教程

3525
01:56:57,000 --> 01:57:00,000
然后要看着杂志上面的文章一点点学

3526
01:57:00,000 --> 01:57:02,000
不像现在我可开个虚拟机

3527
01:57:02,000 --> 01:57:03,000
然后另外开个浏览器

3528
01:57:03,000 --> 01:57:04,000
简直是

3529
01:57:04,000 --> 01:57:07,000
飞扬的一日前你可以学会

3530
01:57:07,000 --> 01:57:09,000
我们那个时候需要一个月才能学会的东西

3531
01:57:11,000 --> 01:57:12,000
对

3532
01:57:13,000 --> 01:57:16,000
这个节目最后我们介绍一些

3533
01:57:16,000 --> 01:57:19,000
我们觉得还挺有用的这种迷恋小工具

3534
01:57:19,000 --> 01:57:20,000
可能很多人

3535
01:57:20,000 --> 01:57:22,000
有些可能知道

3536
01:57:22,000 --> 01:57:24,000
但不一定每个你都知道对吧

3537
01:57:24,000 --> 01:57:26,000
所以讲一下大概有什么好玩的

3538
01:57:26,000 --> 01:57:28,000
先说

3539
01:57:28,000 --> 01:57:30,000
那个就是这个我们之前提到过

3540
01:57:30,000 --> 01:57:32,000
讲在讲包管理器的时候

3541
01:57:32,000 --> 01:57:34,000
提到过在 OS 3 上有一个叫做 Homebrew 的东西

3542
01:57:34,000 --> 01:57:35,000
可以帮你解决

3543
01:57:35,000 --> 01:57:39,000
怎么去新增这种迷恋小工具的一个困惑

3544
01:57:39,000 --> 01:57:40,000
这个是要闭装的

3545
01:57:40,000 --> 01:57:41,000
Meta command line tool

3546
01:57:42,000 --> 01:57:42,000
对

3547
01:57:43,000 --> 01:57:44,000
但这个不属于迷恋小工具本身

3548
01:57:44,000 --> 01:57:46,000
我们就先略过

3549
01:57:46,000 --> 01:57:48,000
下面开始我们一个人介绍一个

3550
01:57:48,000 --> 01:57:49,000
好我先来一个

3551
01:57:49,000 --> 01:57:51,000
LL cat

3552
01:57:52,000 --> 01:57:53,000
这是干嘛的

3553
01:57:53,000 --> 01:57:56,000
Linux 上面有 cat 对吧

3554
01:57:56,000 --> 01:57:57,000
就是没有 dog

3555
01:57:57,000 --> 01:57:58,000
但是有 cat

3556
01:57:58,000 --> 01:57:59,000
cat 是

3557
01:57:59,000 --> 01:58:00,000
猫是干嘛用的

3558
01:58:00,000 --> 01:58:02,000
猫是输出用的

3559
01:58:02,000 --> 01:58:03,000
其实

3560
01:58:04,000 --> 01:58:05,000
猫的作用是说

3561
01:58:05,000 --> 01:58:06,000
它

3562
01:58:07,000 --> 01:58:08,000
从它的

3563
01:58:08,000 --> 01:58:10,000
把它的输入打到输出里

3564
01:58:10,000 --> 01:58:12,000
你可以把一个文件的内容

3565
01:58:12,000 --> 01:58:15,000
输出到 standout out 上

3566
01:58:15,000 --> 01:58:17,000
然后那么 LL cat 是什么

3567
01:58:17,000 --> 01:58:19,000
是一个可以

3568
01:58:20,000 --> 01:58:21,000
把你的输出

3569
01:58:21,000 --> 01:58:24,000
用彩虹的颜色

3570
01:58:24,000 --> 01:58:25,000
输出到

3571
01:58:26,000 --> 01:58:28,000
把你的输入用彩虹颜色

3572
01:58:28,000 --> 01:58:29,000
输出到 standout out 上

3573
01:58:30,000 --> 01:58:30,000
就是

3574
01:58:31,000 --> 01:58:32,000
在一个支持多彩的

3575
01:58:32,000 --> 01:58:33,000
这个 shell 里面

3576
01:58:34,000 --> 01:58:36,000
shell emulates 里面

3577
01:58:36,000 --> 01:58:36,000
它可以把

3578
01:58:37,000 --> 01:58:39,000
字符按照这个

3579
01:58:39,000 --> 01:58:41,000
固定的色谱

3580
01:58:43,000 --> 01:58:44,000
用这个红尘黄绿青棉子

3581
01:58:44,000 --> 01:58:46,000
这所有颜色输出出来

3582
01:58:46,000 --> 01:58:47,000
也就是说你

3583
01:58:47,000 --> 01:58:47,000
你的

3584
01:58:47,000 --> 01:58:49,000
你可能你不用

3585
01:58:49,000 --> 01:58:50,000
你用普通的 cat 的话

3586
01:58:50,000 --> 01:58:51,000
你只会输一个

3587
01:58:52,000 --> 01:58:52,000
单色的东西

3588
01:58:52,000 --> 01:58:54,000
但你用 LL cat 的话

3589
01:58:54,000 --> 01:58:57,000
你的整个输出都会显得

3590
01:58:57,000 --> 01:58:58,000
多彩

3591
01:58:59,000 --> 01:59:02,000
所以这是一个有趣而无用的

3592
01:59:02,000 --> 01:59:03,000
迷你行工具对吧

3593
01:59:03,000 --> 01:59:04,000
类似我还有很多

3594
01:59:04,000 --> 01:59:06,000
比如说

3595
01:59:06,000 --> 01:59:07,000
SL

3596
01:59:07,000 --> 01:59:09,000
如果你把 LS 打成

3597
01:59:09,000 --> 01:59:10,000
SL 的话

3598
01:59:10,000 --> 01:59:11,000
它会出一个

3599
01:59:11,000 --> 01:59:12,000
出一辆火车还是什么东西

3600
01:59:13,000 --> 01:59:14,000
就是说你又打错了

3601
01:59:14,000 --> 01:59:15,000
这种感觉

3602
01:59:17,000 --> 01:59:17,000
对

3603
01:59:18,000 --> 01:59:19,000
刚才也提到一个

3604
01:59:19,000 --> 01:59:21,000
这个叫做 Tig 的工具

3605
01:59:21,000 --> 01:59:21,000
就 Git

3606
01:59:21,000 --> 01:59:22,000
大家都知道是一个

3607
01:59:22,000 --> 01:59:24,000
终于做原代码管理的

3608
01:59:24,000 --> 01:59:25,000
一个迷你行工具

3609
01:59:25,000 --> 01:59:27,000
然后 Tig 就是把 Git 反过来写

3610
01:59:27,000 --> 01:59:29,000
的话它是一个

3611
01:59:29,000 --> 01:59:31,000
基于 Ncurse 的一个

3612
01:59:31,000 --> 01:59:32,000
显示 Revision

3613
01:59:32,000 --> 01:59:34,000
Revision history 的

3614
01:59:34,000 --> 01:59:35,000
图形界面

3615
01:59:35,000 --> 01:59:35,000
对

3616
01:59:35,000 --> 01:59:35,000
非常有用

3617
01:59:35,000 --> 01:59:36,000
这不止 Revision history

3618
01:59:36,000 --> 01:59:38,000
它可以显示很多东西

3619
01:59:38,000 --> 01:59:39,000
其实在里面还可以做一些比较

3620
01:59:40,000 --> 01:59:41,000
常用的操作

3621
01:59:41,000 --> 01:59:42,000
比如说

3622
01:59:42,000 --> 01:59:42,000
就

3623
01:59:42,000 --> 01:59:43,000
Git 的大部分功能

3624
01:59:43,000 --> 01:59:45,000
都可以在 Tig 里面实现

3625
01:59:45,000 --> 01:59:45,000
对

3626
01:59:46,000 --> 01:59:46,000
对

3627
01:59:46,000 --> 01:59:48,000
所以这是一个挺好用的工具

3628
01:59:48,000 --> 01:59:49,000
有很多人说

3629
01:59:50,000 --> 01:59:52,000
可能从 SVN 签过来

3630
01:59:52,000 --> 01:59:53,000
特别是 Windows 下面程序

3631
01:59:53,000 --> 01:59:54,000
他可能觉得

3632
01:59:54,000 --> 01:59:56,000
这个 Git 没有很好的

3633
01:59:56,000 --> 01:59:58,000
这个图形化工具

3634
01:59:58,000 --> 01:59:58,000
对

3635
01:59:58,000 --> 01:59:58,000
怎么办

3636
01:59:58,000 --> 01:59:59,000
其实是有的

3637
01:59:59,000 --> 02:00:01,000
像 SourceTree 刚才提到过了

3638
02:00:01,000 --> 02:00:03,000
但是像我们这种死忠的粉

3639
02:00:03,000 --> 02:00:05,000
还是习惯于说用这种基于

3640
02:00:05,000 --> 02:00:05,000
命令行的

3641
02:00:06,000 --> 02:00:08,000
基于文本窗口的那种工具

3642
02:00:08,000 --> 02:00:10,000
然后 Tig 是一个很好的选择

3643
02:00:10,000 --> 02:00:11,000
我觉得 Git 也是一个

3644
02:00:11,000 --> 02:00:12,000
奇葩到没有办法做出一个

3645
02:00:12,000 --> 02:00:15,000
好用的命令图形界面的工具

3646
02:00:18,000 --> 02:00:19,000
很多人还是用得挺好的

3647
02:00:19,000 --> 02:00:20,000
只是说

3648
02:00:20,000 --> 02:00:21,000
很多高级功能

3649
02:00:21,000 --> 02:00:24,000
就好像我说的一样

3650
02:00:24,000 --> 02:00:26,000
刚才为什么选择命令行的

3651
02:00:26,000 --> 02:00:27,000
原因是一样的

3652
02:00:27,000 --> 02:00:28,000
Git 有很多高级功能

3653
02:00:28,000 --> 02:00:30,000
只可能在通过文本

3654
02:00:30,000 --> 02:00:32,000
就是命令行的方式表述出来

3655
02:00:32,000 --> 02:00:34,000
因为用图形方式表述实在是太复杂

3656
02:00:34,000 --> 02:00:36,000
我觉得用图形界面表述出来

3657
02:00:36,000 --> 02:00:38,000
就是操作 Git 数的话

3658
02:00:38,000 --> 02:00:40,000
我其实能够想到最符合直觉的

3659
02:00:40,000 --> 02:00:42,000
一种方法就是

3660
02:00:42,000 --> 02:00:43,000
你可以直接去拖拽

3661
02:00:45,000 --> 02:00:46,000
Branch 里面的节点

3662
02:00:46,000 --> 02:00:49,000
然后让它在你想要去的那个地方

3663
02:00:49,000 --> 02:00:50,000
停留下来

3664
02:00:50,000 --> 02:00:50,000
然后松手

3665
02:00:51,000 --> 02:00:52,000
然后图形界面的工具

3666
02:00:52,000 --> 02:00:54,000
就自动帮你完成

3667
02:00:54,000 --> 02:00:55,000
对应的 Git 操作

3668
02:00:55,000 --> 02:00:57,000
这个才是最符合直觉化的

3669
02:00:57,000 --> 02:00:58,000
一个实现

3670
02:00:58,000 --> 02:01:01,000
现有的大部分的图形工具

3671
02:01:01,000 --> 02:01:03,000
只不过是把那些命令行的命令

3672
02:01:03,000 --> 02:01:05,000
封装成一个一个按钮而已

3673
02:01:05,000 --> 02:01:06,000
你还是没有办法直接

3674
02:01:06,000 --> 02:01:09,000
看到执行这些命令之后

3675
02:01:09,000 --> 02:01:10,000
那个 Source Tree 会变成什么样子

3676
02:01:10,000 --> 02:01:11,000
对吧

3677
02:01:12,000 --> 02:01:14,000
还有就是可组合性

3678
02:01:14,000 --> 02:01:17,000
和表达到抽象层级的问题

3679
02:01:17,000 --> 02:01:19,000
你始终那种可视化的

3680
02:01:19,000 --> 02:01:22,000
抽象层级是要相比语言描述的

3681
02:01:22,000 --> 02:01:24,000
还是要低很多的

3682
02:01:24,000 --> 02:01:25,000
所以

3683
02:01:27,000 --> 02:01:28,000
第一个 Order

3684
02:01:29,000 --> 02:01:30,000
OK

3685
02:01:30,000 --> 02:01:32,000
下一个你有什么介绍的

3686
02:01:33,000 --> 02:01:35,000
我可以介绍 ColSe

3687
02:01:36,000 --> 02:01:38,000
又是一个有趣

3688
02:01:38,000 --> 02:01:39,000
没有什么用

3689
02:01:40,000 --> 02:01:42,000
ColSe 有一个变种

3690
02:01:42,000 --> 02:01:43,000
叫做 ColThink

3691
02:01:43,000 --> 02:01:46,000
你不如 Install ColSe 之后

3692
02:01:46,000 --> 02:01:47,000
你会得到两个命令

3693
02:01:47,000 --> 02:01:47,000
一个叫 ColSe

3694
02:01:47,000 --> 02:01:48,000
一个叫 ColThink

3695
02:01:49,000 --> 02:01:50,000
然后结果就是

3696
02:01:50,000 --> 02:01:51,000
它会把你的输出

3697
02:01:52,000 --> 02:01:54,000
包裹到一个漫画的那种

3698
02:01:54,000 --> 02:01:54,000
输入

3699
02:01:55,000 --> 02:01:56,000
就是把你的输入

3700
02:01:56,000 --> 02:01:58,000
包裹到一个漫画的那种

3701
02:01:58,000 --> 02:02:00,000
响或者是说的

3702
02:02:00,000 --> 02:02:01,000
气泡框里面

3703
02:02:01,000 --> 02:02:01,000
对

3704
02:02:01,000 --> 02:02:03,000
然后下面画一头牛

3705
02:02:04,000 --> 02:02:05,000
这就是这个用途

3706
02:02:05,000 --> 02:02:06,000
就是牛说

3707
02:02:06,000 --> 02:02:07,000
对

3708
02:02:07,000 --> 02:02:09,000
然后另外有一个工具叫做 Fortune

3709
02:02:09,000 --> 02:02:10,000
就是跟你说一句

3710
02:02:11,000 --> 02:02:13,000
其实就是那种中餐馆里面的

3711
02:02:13,000 --> 02:02:15,000
那个小 Cookie 里面

3712
02:02:15,000 --> 02:02:16,000
Fortune Cookie

3713
02:02:16,000 --> 02:02:17,000
一个小纸条

3714
02:02:17,000 --> 02:02:18,000
大概是那个意思

3715
02:02:18,000 --> 02:02:20,000
然后它会跟你说很多名人名言

3716
02:02:20,000 --> 02:02:23,000
然后你把 Fortune 重新向 ColSe

3717
02:02:23,000 --> 02:02:25,000
它就会把名人名言

3718
02:02:25,000 --> 02:02:27,000
包裹到一个包包里面

3719
02:02:27,000 --> 02:02:28,000
然后让牛说出来

3720
02:02:29,000 --> 02:02:31,000
就是那个中餐馆的小 Cookie

3721
02:02:31,000 --> 02:02:32,000
这个事情

3722
02:02:32,000 --> 02:02:33,000
应该是只有在国外的人

3723
02:02:33,000 --> 02:02:34,000
才会知道这个根本

3724
02:02:34,000 --> 02:02:36,000
就是在国外的中餐馆

3725
02:02:36,000 --> 02:02:37,000
Sam Hossonway

3726
02:02:37,000 --> 02:02:40,000
会提供一种非常特别的

3727
02:02:41,000 --> 02:02:42,000
在你结账的时候

3728
02:02:42,000 --> 02:02:43,000
会给你一个小 Cookie

3729
02:02:43,000 --> 02:02:44,000
然后 Cookie 其实是

3730
02:02:44,000 --> 02:02:46,000
非常难吃的一种饼干

3731
02:02:46,000 --> 02:02:47,000
只不过这个 Cookie

3732
02:02:47,000 --> 02:02:48,000
我觉得还挺好吃的

3733
02:02:48,000 --> 02:02:49,000
What

3734
02:02:49,000 --> 02:02:52,000
我头一次遇到喜欢吃 Fortune Cookie 的人

3735
02:02:53,000 --> 02:02:54,000
脆脆的嘛

3736
02:02:54,000 --> 02:02:55,000
挺好吃的

3737
02:02:55,000 --> 02:02:56,000
然后这个 Fortune Cookie

3738
02:02:56,000 --> 02:02:57,000
它是空心的

3739
02:02:57,000 --> 02:02:58,000
对吧

3740
02:02:58,000 --> 02:02:58,000
空心的

3741
02:02:58,000 --> 02:02:59,000
然后你把它打开

3742
02:02:59,000 --> 02:03:01,000
里面有一个小纸条

3743
02:03:01,000 --> 02:03:02,000
上面有句话

3744
02:03:03,000 --> 02:03:03,000
对

3745
02:03:03,000 --> 02:03:05,000
有时候是中英文的

3746
02:03:05,000 --> 02:03:06,000
这制来的德国

3747
02:03:06,000 --> 02:03:07,000
绝大部分都是中英文的

3748
02:03:07,000 --> 02:03:08,000
英德文的

3749
02:03:08,000 --> 02:03:10,000
就是一边是英文一边是德文

3750
02:03:10,000 --> 02:03:11,000
对

3751
02:03:11,000 --> 02:03:12,000
在北美就是中英文的

3752
02:03:12,000 --> 02:03:13,000
对

3753
02:03:13,000 --> 02:03:15,000
会给你一句小格言

3754
02:03:15,000 --> 02:03:16,000
比如什么

3755
02:03:16,000 --> 02:03:17,000
你举个例子

3756
02:03:17,000 --> 02:03:19,000
一时想不起来什么

3757
02:03:19,000 --> 02:03:20,000
我一时想不起来

3758
02:03:21,000 --> 02:03:24,000
反正就是有一种

3759
02:03:24,000 --> 02:03:26,000
这种云烟的感觉在里面

3760
02:03:26,000 --> 02:03:27,000
不是明言

3761
02:03:27,000 --> 02:03:27,000
是真言

3762
02:03:27,000 --> 02:03:28,000
那个叫什么

3763
02:03:29,000 --> 02:03:31,000
他会讲一个看似很有道理的一句话

3764
02:03:31,000 --> 02:03:32,000
但是实在是没有什么办法

3765
02:03:32,000 --> 02:03:35,000
会讲一个有趣而无用的话

3766
02:03:35,000 --> 02:03:35,000
对

3767
02:03:35,000 --> 02:03:36,000
差不多这个意思

3768
02:03:38,000 --> 02:03:39,000
Fortune 这个软件

3769
02:03:39,000 --> 02:03:40,000
差不多就干类似的事情

3770
02:03:40,000 --> 02:03:41,000
没错

3771
02:03:43,000 --> 02:03:44,000
下面一个

3772
02:03:44,000 --> 02:03:47,000
挺有用的一个命令行工具

3773
02:03:47,000 --> 02:03:48,000
叫 MTR

3774
02:03:49,000 --> 02:03:50,000
这个是干嘛

3775
02:03:50,000 --> 02:03:51,000
这可能做网络

3776
02:03:51,000 --> 02:03:54,000
或者是你对网络状况比

3777
02:03:54,000 --> 02:03:56,000
要有研究

3778
02:03:56,000 --> 02:03:58,000
就是互联网接上去网络

3779
02:03:58,000 --> 02:03:59,000
有研究的人会经常用到

3780
02:03:59,000 --> 02:04:00,000
有两个工具

3781
02:04:00,000 --> 02:04:01,000
一个叫 TraceRoute

3782
02:04:01,000 --> 02:04:02,000
一个叫 Pin

3783
02:04:03,000 --> 02:04:04,000
Pin 是测延迟

3784
02:04:04,000 --> 02:04:07,000
然后 TraceRoute 是测你跳转的

3785
02:04:07,000 --> 02:04:11,000
你从你的电脑到另外一个服务器之间

3786
02:04:11,000 --> 02:04:13,000
要经过哪些这种中间的路由

3787
02:04:13,000 --> 02:04:15,000
或者是网关

3788
02:04:15,000 --> 02:04:15,000
对吧

3789
02:04:16,000 --> 02:04:19,000
然后 MTR 是把这两个工具的功能

3790
02:04:19,000 --> 02:04:20,000
合二为一

3791
02:04:20,000 --> 02:04:23,000
并且一种更加有善和有用的方式

3792
02:04:23,000 --> 02:04:25,000
汇报出来的一个网络

3793
02:04:26,000 --> 02:04:28,000
诊断工具集合

3794
02:04:29,000 --> 02:04:29,000
对

3795
02:04:29,000 --> 02:04:32,000
它都名叫 MATS TraceRoute

3796
02:04:32,000 --> 02:04:32,000
对

3797
02:04:32,000 --> 02:04:34,000
MATS 的 TraceRoute

3798
02:04:34,000 --> 02:04:36,000
对那个叫 MATS 作者

3799
02:04:36,000 --> 02:04:37,000
对

3800
02:04:38,000 --> 02:04:40,000
你接下来叫做 Prey

3801
02:04:40,000 --> 02:04:41,000
你介绍一下是什么

3802
02:04:43,000 --> 02:04:44,000
Prey 和 iPython

3803
02:04:44,000 --> 02:04:45,000
我想放在一起介绍

3804
02:04:45,000 --> 02:04:48,000
就是 Python 的用户

3805
02:04:48,000 --> 02:04:49,000
一定要使用 iPython 这个东西

3806
02:04:49,000 --> 02:04:51,000
而不是使用 Python

3807
02:04:51,000 --> 02:04:54,000
默认给你装那个老尖牙的 IDLE

3808
02:04:54,000 --> 02:04:56,000
iPython 是一个

3809
02:04:57,000 --> 02:04:59,000
既可以在命令行下面跑

3810
02:04:59,000 --> 02:05:02,000
也可以有一个专属的网页版本

3811
02:05:02,000 --> 02:05:03,000
或者乃至一个

3812
02:05:04,000 --> 02:05:06,000
基于 QT 的图形界面的一个

3813
02:05:06,000 --> 02:05:08,000
全功能 Python 笔记本

3814
02:05:09,000 --> 02:05:11,000
你可以在里面运行 Python 的程序

3815
02:05:12,000 --> 02:05:14,000
你可以在里面尝试 Python 的各种新功能

3816
02:05:15,000 --> 02:05:16,000
而且你的每一次输入

3817
02:05:16,000 --> 02:05:19,000
每一次输出都会被记在

3818
02:05:19,000 --> 02:05:20,000
in 和 out 两个 area 里面

3819
02:05:20,000 --> 02:05:22,000
你可以随时去查询

3820
02:05:22,000 --> 02:05:23,000
然后还内置了很多

3821
02:05:24,000 --> 02:05:24,000
其他的功能

3822
02:05:24,000 --> 02:05:25,000
比如说什么语法高亮

3823
02:05:28,000 --> 02:05:30,000
那个 TraceRoute

3824
02:05:30,000 --> 02:05:33,000
Costac 的 BackTrace

3825
02:05:33,000 --> 02:05:34,000
BackTrace

3826
02:05:34,000 --> 02:05:35,000
BackTrace

3827
02:05:35,000 --> 02:05:36,000
BackTrace

3828
02:05:37,000 --> 02:05:39,000
然后 Prey 就是

3829
02:05:40,000 --> 02:05:41,000
Ruby 的 iPython

3830
02:05:43,000 --> 02:05:44,000
两个也是非常有用

3831
02:05:45,000 --> 02:05:46,000
刚才讲到那个 iPython

3832
02:05:46,000 --> 02:05:47,000
我还推荐一个叫做 Bpython

3833
02:05:47,000 --> 02:05:49,000
就是 AB 的 B

3834
02:05:49,000 --> 02:05:49,000
Bpython

3835
02:05:50,000 --> 02:05:51,000
iPython 它也是一个

3836
02:05:53,000 --> 02:05:54,000
Python 的一个叫做 Raple

3837
02:05:54,000 --> 02:05:55,000
Read

3838
02:05:55,000 --> 02:05:56,000
Evaluate

3839
02:05:56,000 --> 02:05:56,000
Print

3840
02:05:56,000 --> 02:05:58,000
Loop 这么一个工具

3841
02:05:58,000 --> 02:06:00,000
Bpython 是一个替代的一个 Raple

3842
02:06:00,000 --> 02:06:01,000
然后它的好处是什么呢

3843
02:06:03,000 --> 02:06:04,000
首先它有语法高亮

3844
02:06:04,000 --> 02:06:05,000
就对 Python 语法

3845
02:06:05,000 --> 02:06:06,000
它是你敲的每一行

3846
02:06:06,000 --> 02:06:07,000
它是语法高亮的

3847
02:06:08,000 --> 02:06:09,000
然后它的多行模式

3848
02:06:09,000 --> 02:06:11,000
也比较支持比 iPython 要好

3849
02:06:11,000 --> 02:06:12,000
然后它最有用的功能

3850
02:06:12,000 --> 02:06:15,000
它会对你打的标准库里面的函数

3851
02:06:15,000 --> 02:06:16,000
它是有这个

3852
02:06:17,000 --> 02:06:18,000
就是那个叫什么

3853
02:06:18,000 --> 02:06:19,000
类似于一个 ID

3854
02:06:19,000 --> 02:06:21,000
它是有提示那个函数的一个签名

3855
02:06:21,000 --> 02:06:22,000
以及每个参数是干什么用的

3856
02:06:23,000 --> 02:06:23,000
OK

3857
02:06:24,000 --> 02:06:25,000
就非常好用

3858
02:06:25,000 --> 02:06:26,000
而且它的那个

3859
02:06:26,000 --> 02:06:28,000
没有 iPython 那么功能丰富

3860
02:06:28,000 --> 02:06:29,000
它是一个更加

3861
02:06:30,000 --> 02:06:32,000
轻量级的这么一个 Raple

3862
02:06:32,000 --> 02:06:33,000
对

3863
02:06:33,000 --> 02:06:34,000
iPython 我相信

3864
02:06:34,000 --> 02:06:36,000
如果你是要做一些什么科学计算

3865
02:06:36,000 --> 02:06:37,000
或者是

3866
02:06:38,000 --> 02:06:40,000
生物信息学之类的

3867
02:06:40,000 --> 02:06:41,000
做科研

3868
02:06:41,000 --> 02:06:42,000
基本上是

3869
02:06:42,000 --> 02:06:42,000
对

3870
02:06:43,000 --> 02:06:44,000
人手必装的一个东西

3871
02:06:44,000 --> 02:06:45,000
对

3872
02:06:46,000 --> 02:06:49,000
我在介绍一个叫做 iPerf 3

3873
02:06:49,000 --> 02:06:51,000
这也是一个做网络性能的

3874
02:06:51,000 --> 02:06:52,000
测试的一个工具

3875
02:06:52,000 --> 02:06:53,000
就是说假设

3876
02:06:53,000 --> 02:06:54,000
你想测

3877
02:06:54,000 --> 02:06:55,000
比如说你家刚装修房子

3878
02:06:55,000 --> 02:06:56,000
你想测

3879
02:06:56,000 --> 02:06:58,000
这个装修师傅可以装到网线

3880
02:06:58,000 --> 02:07:00,000
师傅达到千兆的一个

3881
02:07:01,000 --> 02:07:03,000
一个速度对吧

3882
02:07:03,000 --> 02:07:03,000
你怎么办

3883
02:07:03,000 --> 02:07:06,000
你找两台电脑都插上网线对吧

3884
02:07:06,000 --> 02:07:07,000
然后在一头运行

3885
02:07:07,000 --> 02:07:09,000
一个 iPython 3 的一个 server

3886
02:07:09,000 --> 02:07:10,000
然后在另外一头运行

3887
02:07:10,000 --> 02:07:12,000
iPython 3 的一个客户端

3888
02:07:12,000 --> 02:07:13,000
一个 client

3889
02:07:13,000 --> 02:07:15,000
然后把这个 client 指向那个 server

3890
02:07:15,000 --> 02:07:16,000
他就会在这两端

3891
02:07:16,000 --> 02:07:19,000
发起一个连接

3892
02:07:19,000 --> 02:07:20,000
然后测试这个连接

3893
02:07:20,000 --> 02:07:24,000
能最大以多快的速度传输

3894
02:07:24,000 --> 02:07:24,000
对吧

3895
02:07:25,000 --> 02:07:25,000
OK

3896
02:07:25,000 --> 02:07:27,000
它是一个测试网络连通速度的

3897
02:07:27,000 --> 02:07:28,000
这么一个小工具

3898
02:07:29,000 --> 02:07:30,000
3 是一个最新的版本

3899
02:07:30,000 --> 02:07:32,000
还有一个 iPython 3

3900
02:07:32,000 --> 02:07:33,000
没有数字

3901
02:07:33,000 --> 02:07:34,000
就是默认是 2 这个版本

3902
02:07:34,000 --> 02:07:35,000
相对老一点

3903
02:07:35,000 --> 02:07:37,000
就看你的发行版的区别

3904
02:07:38,000 --> 02:07:38,000
OK

3905
02:07:39,000 --> 02:07:41,000
接下来我来介绍一个 T-Mux

3906
02:07:41,000 --> 02:07:42,000
刚才已经提到

3907
02:07:42,000 --> 02:07:44,000
是一个中端附用器

3908
02:07:44,000 --> 02:07:46,000
就是你可能连接到一个远程计算机上

3909
02:07:46,000 --> 02:07:47,000
或者说你在本地

3910
02:07:47,000 --> 02:07:50,000
然后你开了一个 Terminal 窗口

3911
02:07:50,000 --> 02:07:50,000
你会觉得说

3912
02:07:50,000 --> 02:07:51,000
我靠

3913
02:07:51,000 --> 02:07:52,000
我还想做另外一件事情

3914
02:07:52,000 --> 02:07:53,000
怎么办

3915
02:07:53,000 --> 02:07:55,000
一个选择是再开一个窗口

3916
02:07:55,000 --> 02:07:56,000
或者再建立一个连接

3917
02:07:56,000 --> 02:07:59,000
而比较好的一个方法

3918
02:07:59,000 --> 02:08:02,000
就是附用你当前已经建立的连接

3919
02:08:03,000 --> 02:08:05,000
可以装 T-Mux 这个东西

3920
02:08:05,000 --> 02:08:08,000
它可以通过一些组合件

3921
02:08:08,000 --> 02:08:11,000
让你在一个 Terminal 的窗口里面

3922
02:08:11,000 --> 02:08:13,000
开很多个其他 Terminal 的窗口

3923
02:08:14,000 --> 02:08:15,000
可能描述比较抽象

3924
02:08:15,000 --> 02:08:18,000
但如果你去 T-Mux 的网站上看一下

3925
02:08:18,000 --> 02:08:20,000
你会明白这什么意思

3926
02:08:20,000 --> 02:08:21,000
其实这个有个最大的好处

3927
02:08:21,000 --> 02:08:22,000
你知道是什么吗

3928
02:08:23,000 --> 02:08:25,000
它可以保持你的一个登录状态

3929
02:08:26,000 --> 02:08:26,000
对

3930
02:08:26,000 --> 02:08:28,000
就是你保持程序的一级状态

3931
02:08:28,000 --> 02:08:28,000
对

3932
02:08:28,000 --> 02:08:30,000
你可以在亿赛机器上用 T-Mux

3933
02:08:30,000 --> 02:08:31,000
来执行一个命令

3934
02:08:31,000 --> 02:08:34,000
然后 detach from the T-Mux

3935
02:08:34,000 --> 02:08:35,000
然后就可以直接关掉

3936
02:08:36,000 --> 02:08:38,000
和机器的连接

3937
02:08:38,000 --> 02:08:38,000
对

3938
02:08:38,000 --> 02:08:39,000
然后但是这个时候

3939
02:08:39,000 --> 02:08:42,000
在你刚刚起到进程

3940
02:08:42,000 --> 02:08:44,000
它是不会退出的

3941
02:08:44,000 --> 02:08:45,000
因为正常情况下

3942
02:08:45,000 --> 02:08:46,000
你断掉一个连接之后

3943
02:08:46,000 --> 02:08:47,000
那个进程就退出了

3944
02:08:47,000 --> 02:08:48,000
但 T-Mux 特殊的处理

3945
02:08:48,000 --> 02:08:49,000
除非你之前什么

3946
02:08:49,000 --> 02:08:51,000
因为很复杂操作

3947
02:08:51,000 --> 02:08:52,000
disown

3948
02:08:52,000 --> 02:08:53,000
现在 background

3949
02:08:53,000 --> 02:08:54,000
然后 disown

3950
02:08:55,000 --> 02:08:56,000
然后你才不会

3951
02:08:57,000 --> 02:08:59,000
在你退出的时候终于是一个程序

3952
02:08:59,000 --> 02:09:00,000
但一般人不会那么干

3953
02:09:01,000 --> 02:09:01,000
对

3954
02:09:01,000 --> 02:09:02,000
除非你事后想到

3955
02:09:02,000 --> 02:09:03,000
对

3956
02:09:03,000 --> 02:09:04,000
对

3957
02:09:05,000 --> 02:09:06,000
所以你用 T-Mux 的话

3958
02:09:06,000 --> 02:09:07,000
它是你退出的时候

3959
02:09:07,000 --> 02:09:08,000
它是直接断掉

3960
02:09:08,000 --> 02:09:12,000
和 T-Mux master 进程的连接

3961
02:09:12,000 --> 02:09:13,000
然后它还会继续接管

3962
02:09:13,000 --> 02:09:16,000
你在里面 launch 的那些子进程

3963
02:09:16,000 --> 02:09:17,000
然后等你回家再连上

3964
02:09:17,000 --> 02:09:18,000
这个时候

3965
02:09:18,000 --> 02:09:20,000
你可以用 T-Mux 控制 A

3966
02:09:20,000 --> 02:09:22,000
也就是 attach 这个参数

3967
02:09:22,000 --> 02:09:24,000
重新连回之前的

3968
02:09:24,000 --> 02:09:26,000
T-Mux 的 master 进程

3969
02:09:26,000 --> 02:09:27,000
那这个时候你会看到

3970
02:09:27,000 --> 02:09:29,000
和你断开之前一模一样的

3971
02:09:29,000 --> 02:09:30,000
这么远端

3972
02:09:30,000 --> 02:09:31,000
等等的这一块

3973
02:09:31,000 --> 02:09:33,000
而你之前在执行的

3974
02:09:33,000 --> 02:09:34,000
那个可能程序

3975
02:09:34,000 --> 02:09:36,000
可能执行时间比较长的话

3976
02:09:36,000 --> 02:09:38,000
它是不会受任何影响的

3977
02:09:38,000 --> 02:09:39,000
对

3978
02:09:39,000 --> 02:09:40,000
然后另外一个用意

3979
02:09:40,000 --> 02:09:41,000
就是比如说

3980
02:09:41,000 --> 02:09:43,000
你是一个实验室的学生

3981
02:09:43,000 --> 02:09:44,000
然后你实验室里面有台电脑

3982
02:09:44,000 --> 02:09:46,000
然后你的办公室里面有台电脑

3983
02:09:46,000 --> 02:09:49,000
你需要在实验室里面观测一些数据

3984
02:09:49,000 --> 02:09:50,000
然后输入到电脑上

3985
02:09:50,000 --> 02:09:53,000
然后你要么用远程周边

3986
02:09:53,000 --> 02:09:53,000
对吧

3987
02:09:53,000 --> 02:09:54,000
要么就用 T-Mux

3988
02:09:54,000 --> 02:09:57,000
然后在实验室的电脑上

3989
02:09:57,000 --> 02:09:58,000
看到的东西

3990
02:09:58,000 --> 02:10:00,000
会实时显示在你办公室的电脑上

3991
02:10:00,000 --> 02:10:01,000
也挺好

3992
02:10:02,000 --> 02:10:02,000
对

3993
02:10:03,000 --> 02:10:06,000
当然 T-Mux 还有一个兄弟

3994
02:10:06,000 --> 02:10:07,000
叫做 screen

3995
02:10:07,000 --> 02:10:08,000
就是屏幕那个词的

3996
02:10:08,000 --> 02:10:12,000
早期的一个中端服用

3997
02:10:12,000 --> 02:10:12,000
对

3998
02:10:12,000 --> 02:10:15,000
screen 的特性没有 T-Mux 的那么强大好用

3999
02:10:15,000 --> 02:10:19,000
现在基本上都推荐大家用 T-Mux 会好一些了

4000
02:10:19,000 --> 02:10:20,000
screen 它古老了主要是

4001
02:10:20,000 --> 02:10:24,000
而且 screen 好像不能分 tab

4002
02:10:25,000 --> 02:10:26,000
可以分 tab

4003
02:10:26,000 --> 02:10:29,000
它最早的版本是不能分左右分屏

4004
02:10:30,000 --> 02:10:30,000
对

4005
02:10:30,000 --> 02:10:32,000
我就是不能 split view

4006
02:10:32,000 --> 02:10:34,000
但现在新版本是可以的了

4007
02:10:35,000 --> 02:10:35,000
OK

4008
02:10:35,000 --> 02:10:37,000
但只是因为搭载 screen

4009
02:10:37,000 --> 02:10:38,000
一般都是比较老旧的版本

4010
02:10:38,000 --> 02:10:39,000
所以这个就很难保证

4011
02:10:39,000 --> 02:10:42,000
就 T-Mux 的特性大概会好一些

4012
02:10:42,000 --> 02:10:43,000
没错

4013
02:10:44,000 --> 02:10:45,000
我在

4014
02:10:45,000 --> 02:10:45,000
对

4015
02:10:45,000 --> 02:10:47,000
T-Mux 还有一个很高级的功能

4016
02:10:47,000 --> 02:10:47,000
一直没有说

4017
02:10:47,000 --> 02:10:48,000
screen 也有这个功能

4018
02:10:48,000 --> 02:10:52,000
就是可以做 pair programming

4019
02:10:53,000 --> 02:10:53,000
对

4020
02:10:53,000 --> 02:10:54,000
没错

4021
02:10:54,000 --> 02:10:56,000
可以两个人连到同一个人

4022
02:10:56,000 --> 02:10:56,000
在输入

4023
02:10:56,000 --> 02:10:56,000
对

4024
02:10:57,000 --> 02:10:57,000
对

4025
02:10:57,000 --> 02:11:00,000
你可以两个人分别从自己的机器里面

4026
02:11:00,000 --> 02:11:01,000
连到同一台服务器

4027
02:11:01,000 --> 02:11:04,000
然后调用一个 T-Mux 的一个中端

4028
02:11:04,000 --> 02:11:06,000
互相可以看见对方在那个里面打什么

4029
02:11:06,000 --> 02:11:07,000
也可以

4030
02:11:08,000 --> 02:11:09,000
进行一对一的这么一种

4031
02:11:09,000 --> 02:11:11,000
辅导式的教学

4032
02:11:12,000 --> 02:11:13,000
只不过容易打架

4033
02:11:13,000 --> 02:11:13,000
就是

4034
02:11:13,000 --> 02:11:15,000
这个就是你要自己约定好

4035
02:11:15,000 --> 02:11:16,000
到底是谁教谁学

4036
02:11:16,000 --> 02:11:17,000
对吧

4037
02:11:17,000 --> 02:11:17,000
对

4038
02:11:17,000 --> 02:11:18,000
最好能协同一下

4039
02:11:19,000 --> 02:11:19,000
对

4040
02:11:19,000 --> 02:11:21,000
就是两个做这种 pair

4041
02:11:21,000 --> 02:11:22,000
结对编程

4042
02:11:22,000 --> 02:11:22,000
对吧

4043
02:11:22,000 --> 02:11:23,000
pair programming 的时候

4044
02:11:23,000 --> 02:11:25,000
比较有用的一个工具

4045
02:11:25,000 --> 02:11:26,000
没错

4046
02:11:26,000 --> 02:11:28,000
我再介绍一个叫做 tree

4047
02:11:28,000 --> 02:11:30,000
就是树那个工具

4048
02:11:30,000 --> 02:11:31,000
这个是干嘛用的呢

4049
02:11:31,000 --> 02:11:32,000
就是说

4050
02:11:33,000 --> 02:11:34,000
你在命令行里面

4051
02:11:34,000 --> 02:11:35,000
你要去

4052
02:11:35,000 --> 02:11:36,000
你要去

4053
02:11:36,000 --> 02:11:37,000
就说 navigate file system

4054
02:11:37,000 --> 02:11:39,000
就是你要在文件系统里面

4055
02:11:39,000 --> 02:11:40,000
去看来看东西

4056
02:11:40,000 --> 02:11:41,000
到底哪个文件在哪

4057
02:11:41,000 --> 02:11:42,000
你在哪个结构里面

4058
02:11:42,000 --> 02:11:43,000
对吧

4059
02:11:43,000 --> 02:11:44,000
经常常用的是 list

4060
02:11:45,000 --> 02:11:45,000
或者

4061
02:11:47,000 --> 02:11:47,000
就是 list

4062
02:11:48,000 --> 02:11:50,000
列表一个目录里面的文件

4063
02:11:50,000 --> 02:11:52,000
但是 list 一般只能列一层

4064
02:11:53,000 --> 02:11:54,000
你只能看当前

4065
02:11:54,000 --> 02:11:56,000
或者某个指定目录下面的文件列表

4066
02:11:56,000 --> 02:11:58,000
但是你是看不到整个

4067
02:11:58,000 --> 02:11:59,000
因为文件系统是一个

4068
02:11:59,000 --> 02:12:00,000
整个是一个树状结构

4069
02:12:01,000 --> 02:12:02,000
你是不能用 list

4070
02:12:02,000 --> 02:12:04,000
看到整个一个树状结构怎么样子的

4071
02:12:04,000 --> 02:12:06,000
然后 tree 这个小工具

4072
02:12:06,000 --> 02:12:08,000
就可以做这个事儿

4073
02:12:08,000 --> 02:12:10,000
它会把这个文件系统

4074
02:12:10,000 --> 02:12:12,000
从你指定的层开始

4075
02:12:12,000 --> 02:12:14,000
以一个树的形式把它打印到

4076
02:12:15,000 --> 02:12:17,000
中端窗口上面去

4077
02:12:17,000 --> 02:12:19,000
那你可以比较直观的看到

4078
02:12:19,000 --> 02:12:20,000
你在这个

4079
02:12:20,000 --> 02:12:21,000
比如整个

4080
02:12:22,000 --> 02:12:23,000
代码的工程目录里面的

4081
02:12:23,000 --> 02:12:25,000
文件结构是怎么样子的

4082
02:12:25,000 --> 02:12:26,000
就还比较有用

4083
02:12:28,000 --> 02:12:29,000
我也来顺便推荐一个

4084
02:12:29,000 --> 02:12:31,000
midnight commander

4085
02:12:31,000 --> 02:12:31,000
就是

4086
02:12:33,000 --> 02:12:35,000
因为这也是从 tree 想到的

4087
02:12:35,000 --> 02:12:38,000
就是 total commander 是 DOS 时代

4088
02:12:38,000 --> 02:12:39,000
乃至 Windows 时代

4089
02:12:39,000 --> 02:12:41,000
非常受欢迎的一个文件管理工具

4090
02:12:41,000 --> 02:12:43,000
后来有好事者

4091
02:12:43,000 --> 02:12:45,000
把它移植成了一个

4092
02:12:46,000 --> 02:12:48,000
companiton interface 的这么一个东西

4093
02:12:48,000 --> 02:12:50,000
就是你输入 MC

4094
02:12:50,000 --> 02:12:51,000
就会出现一个

4095
02:12:51,000 --> 02:12:55,000
类似于 total commander 的一个

4096
02:12:55,000 --> 02:12:56,000
全屏的工具

4097
02:12:56,000 --> 02:12:57,000
也是 NCURSE

4098
02:12:57,000 --> 02:12:58,000
然后里面也有什么

4099
02:12:58,000 --> 02:13:00,000
比如说列出当前命令数

4100
02:13:01,000 --> 02:13:03,000
批量拷贝

4101
02:13:03,000 --> 02:13:04,000
批量重新名样之类的工具

4102
02:13:05,000 --> 02:13:07,000
然后如果你是一个熟练的

4103
02:13:08,000 --> 02:13:09,000
total commander 用户的话

4104
02:13:09,000 --> 02:13:12,000
你会发现里面很多很多的操作

4105
02:13:12,000 --> 02:13:12,000
是一模一样

4106
02:13:14,000 --> 02:13:16,000
而且这个东西最大的一个特征

4107
02:13:16,000 --> 02:13:17,000
它是跨平台的

4108
02:13:17,000 --> 02:13:21,000
就是它在 Linux 和 DOS 上面都有

4109
02:13:22,000 --> 02:13:22,000
OK

4110
02:13:22,000 --> 02:13:23,000
还蛮特别的

4111
02:13:23,000 --> 02:13:24,000
还挺帅的

4112
02:13:25,000 --> 02:13:27,000
我推荐你另外一个系统管理

4113
02:13:27,000 --> 02:13:29,000
用的工具叫做 HTOP

4114
02:13:30,000 --> 02:13:32,000
很多这个 unix 里面都有一个

4115
02:13:32,000 --> 02:13:34,000
内建的命令叫 TOP

4116
02:13:34,000 --> 02:13:37,000
然后它会以一个 NCURSE 的方式列出

4117
02:13:38,000 --> 02:13:41,000
当前系统里面正在活跃的进程

4118
02:13:41,000 --> 02:13:42,000
以及一些系统的状态

4119
02:13:42,000 --> 02:13:44,000
比如说 CPU 的占用

4120
02:13:44,000 --> 02:13:47,000
各个用户

4121
02:13:47,000 --> 02:13:49,000
内核各占有多少比例

4122
02:13:49,000 --> 02:13:50,000
内存的使用状况

4123
02:13:51,000 --> 02:13:53,000
活跃的一些进程的使用资源的情况

4124
02:13:53,000 --> 02:13:54,000
这些

4125
02:13:54,000 --> 02:13:55,000
但是 TOP 的一个主要问题

4126
02:13:55,000 --> 02:13:57,000
就是它展示的是一个单色

4127
02:13:57,000 --> 02:13:59,000
而且就不方便

4128
02:13:59,000 --> 02:14:00,000
操作不方便的一个建议

4129
02:14:00,000 --> 02:14:01,000
不过我好看

4130
02:14:01,000 --> 02:14:02,000
不好看也不好用

4131
02:14:02,000 --> 02:14:03,000
对

4132
02:14:03,000 --> 02:14:07,000
HTOP 就是一个 TOP 的改良版

4133
02:14:07,000 --> 02:14:09,000
它可以以一种更加直观一种的方式

4134
02:14:09,000 --> 02:14:12,000
展现出 TOP 展现的所有内容

4135
02:14:12,000 --> 02:14:14,000
并且比如说它会展示在

4136
02:14:14,000 --> 02:14:15,000
就某种情况下

4137
02:14:15,000 --> 02:14:16,000
它会展示 CPU

4138
02:14:16,000 --> 02:14:18,000
它会有一种进度调的方式

4139
02:14:19,000 --> 02:14:22,000
去表示 CPU 的实际占用比例

4140
02:14:22,000 --> 02:14:25,000
以及内存的占用情况

4141
02:14:25,000 --> 02:14:28,000
而且在下面的进程列表

4142
02:14:28,000 --> 02:14:30,000
它会也有各种各样的高级功能

4143
02:14:30,000 --> 02:14:32,000
比如说它可以以一个树状的结构

4144
02:14:32,000 --> 02:14:33,000
展示进程列表

4145
02:14:33,000 --> 02:14:35,000
而不是一个单纯的

4146
02:14:35,000 --> 02:14:36,000
对

4147
02:14:37,000 --> 02:14:37,000
非常介意

4148
02:14:37,000 --> 02:14:38,000
大家都

4149
02:14:38,000 --> 02:14:40,000
这是我每次装新系统的时候

4150
02:14:40,000 --> 02:14:42,000
都必装的一个软件

4151
02:14:43,000 --> 02:14:44,000
大致的作用

4152
02:14:44,000 --> 02:14:46,000
跟大家看到那个叫 Activity Monitor

4153
02:14:46,000 --> 02:14:47,000
在 Weston 这个功能是差不多的

4154
02:14:48,000 --> 02:14:50,000
只不过是在命令行下面

4155
02:14:50,000 --> 02:14:51,000
没错

4156
02:14:52,000 --> 02:14:53,000
然后很多人做他们的

4157
02:14:55,000 --> 02:14:57,000
当前命令行的截图的话

4158
02:14:57,000 --> 02:14:59,000
专门找一个窗口开这个

4159
02:14:59,000 --> 02:15:03,000
也算是一个现象级的软件

4160
02:15:03,000 --> 02:15:04,000
对

4161
02:15:05,000 --> 02:15:05,000
OK

4162
02:15:08,000 --> 02:15:10,000
那我来推荐一个

4163
02:15:11,000 --> 02:15:12,000
我来推荐一个命令

4164
02:15:12,000 --> 02:15:13,000
叫做 Open

4165
02:15:13,000 --> 02:15:14,000
或者是

4166
02:15:15,000 --> 02:15:17,000
或者说我来推荐一组

4167
02:15:17,000 --> 02:15:20,000
这个在 OS X 上面

4168
02:15:20,000 --> 02:15:24,000
在命令行下面工作的时候

4169
02:15:24,000 --> 02:15:26,000
你可能会出现一些

4170
02:15:26,000 --> 02:15:27,000
比如说你要把命令

4171
02:15:27,000 --> 02:15:28,000
某一个文件的内容

4172
02:15:28,000 --> 02:15:29,000
或者是某些输出

4173
02:15:31,000 --> 02:15:33,000
弄到系统剪贴板上的

4174
02:15:34,000 --> 02:15:34,000
场景

4175
02:15:34,000 --> 02:15:35,000
或者你需要把系统的

4176
02:15:35,000 --> 02:15:37,000
剪贴板的内容输入

4177
02:15:37,000 --> 02:15:39,000
到某一个命令的

4178
02:15:39,000 --> 02:15:40,000
输入里面

4179
02:15:41,000 --> 02:15:44,000
或者你需要利用系统级的一个工具

4180
02:15:44,000 --> 02:15:45,000
比如说你要打开一个 PDF

4181
02:15:47,000 --> 02:15:48,000
怎么办呢

4182
02:15:48,000 --> 02:15:48,000
你可以用

4183
02:15:49,000 --> 02:15:50,000
首先

4184
02:15:51,000 --> 02:15:52,000
剪贴板的话

4185
02:15:52,000 --> 02:15:54,000
你可以用 PB copy 和 PB paste

4186
02:15:54,000 --> 02:15:55,000
两个功能

4187
02:15:55,000 --> 02:15:56,000
两个命令

4188
02:15:56,000 --> 02:15:58,000
分别可以把

4189
02:15:58,000 --> 02:16:00,000
剪贴板里面的东西

4190
02:16:00,000 --> 02:16:02,000
拷贝或者是粘贴出来

4191
02:16:02,000 --> 02:16:04,000
而如果你想打开某一个文件的话

4192
02:16:04,000 --> 02:16:05,000
你可以用 Open 这个命令

4193
02:16:05,000 --> 02:16:06,000
比如说

4194
02:16:07,000 --> 02:16:10,000
你想要在 Finder 里面观察当前的目录

4195
02:16:11,000 --> 02:16:12,000
你可以 Open 空格点

4196
02:16:12,000 --> 02:16:13,000
就可以打开

4197
02:16:13,000 --> 02:16:16,000
就可以在 Finder 里面打开当前目录

4198
02:16:16,000 --> 02:16:17,000
如果你想要打开当前目录

4199
02:16:17,000 --> 02:16:19,000
下面所有的 PDF 文件

4200
02:16:20,000 --> 02:16:22,000
你可以打 Open 新点 PDF

4201
02:16:24,000 --> 02:16:25,000
系统会自动调用 preview

4202
02:16:25,000 --> 02:16:27,000
或者是 Alobi

4203
02:16:27,000 --> 02:16:28,000
Radar 取决于你

4204
02:16:28,000 --> 02:16:30,000
选择的默认程序是什么

4205
02:16:31,000 --> 02:16:32,000
来打开所有 PDF

4206
02:16:33,000 --> 02:16:34,000
算是一个小 tip

4207
02:16:37,000 --> 02:16:39,000
PB copy 和 PB paste 用法

4208
02:16:39,000 --> 02:16:40,000
可能还要再解释一下

4209
02:16:43,000 --> 02:16:46,000
PB copy 这个命令的

4210
02:16:46,000 --> 02:16:47,000
输入

4211
02:16:47,000 --> 02:16:50,000
你需要把你的程序的输出

4212
02:16:50,000 --> 02:16:52,000
重定向给 PB copy

4213
02:16:52,000 --> 02:16:53,000
对

4214
02:16:53,000 --> 02:16:55,000
他是指

4215
02:16:56,000 --> 02:16:57,000
从他的输

4216
02:16:57,000 --> 02:16:59,000
把他的输入复制到系统解决版里面

4217
02:17:00,000 --> 02:17:01,000
然后 PB paste 就刚好反过来

4218
02:17:01,000 --> 02:17:03,000
他是把他的系统解决版内容

4219
02:17:03,000 --> 02:17:05,000
导到他的输出里面去

4220
02:17:05,000 --> 02:17:07,000
所以用法肯定就是说是

4221
02:17:07,000 --> 02:17:09,000
从 PB 导入

4222
02:17:09,000 --> 02:17:10,000
就是内容导到 PB copy 里面去

4223
02:17:10,000 --> 02:17:12,000
然后从 PB paste 里面导出

4224
02:17:12,000 --> 02:17:13,000
这么一个管道的用法

4225
02:17:13,000 --> 02:17:16,000
比如说你在网页上选中了一段话

4226
02:17:16,000 --> 02:17:18,000
然后你要把这段话排序

4227
02:17:18,000 --> 02:17:21,000
你可以先选中这个话

4228
02:17:21,000 --> 02:17:22,000
按 command C

4229
02:17:22,000 --> 02:17:24,000
然后在命令行下面

4230
02:17:24,000 --> 02:17:26,000
打 PB paste pipe

4231
02:17:26,000 --> 02:17:28,000
sort pipe Pb copy

4232
02:17:29,000 --> 02:17:30,000
然后你就把这个

4233
02:17:31,000 --> 02:17:33,000
检听版里面的内容排序

4234
02:17:33,000 --> 02:17:33,000
对

4235
02:17:33,000 --> 02:17:34,000
大概是这么一个命令

4236
02:17:34,000 --> 02:17:34,000
对

4237
02:17:35,000 --> 02:17:35,000
行

4238
02:17:35,000 --> 02:17:37,000
那这个命令就介绍到这里

4239
02:17:37,000 --> 02:17:39,000
因为以上介绍的所有命令

4240
02:17:39,000 --> 02:17:41,000
都除了刚才讲的

4241
02:17:41,000 --> 02:17:43,000
那个 OS 10 原生的 PB copy

4242
02:17:43,000 --> 02:17:45,000
PB paste open 之外

4243
02:17:45,000 --> 02:17:46,000
都需要你额外装

4244
02:17:46,000 --> 02:17:48,000
都不是系统自带的

4245
02:17:48,000 --> 02:17:49,000
你就需要通过

4246
02:17:49,000 --> 02:17:52,000
这个比如说 Homebrew 的方式去自己装

4247
02:17:52,000 --> 02:17:54,000
如果你是其他类有点系统的话

4248
02:17:54,000 --> 02:17:56,000
你可以用你自己的包管理器

4249
02:17:56,000 --> 02:17:57,000
去装这个工具

4250
02:17:57,000 --> 02:17:59,000
对

4251
02:17:59,000 --> 02:18:02,000
那我们今天的这个节目就到此为止了

4252
02:18:03,000 --> 02:18:03,000
好

4253
02:18:03,000 --> 02:18:05,000
真的说了好多

4254
02:18:05,000 --> 02:18:08,000
因为这真是可以拆成两期的节目

4255
02:18:08,000 --> 02:18:09,000
嗯

4256
02:18:10,000 --> 02:18:10,000
好吧

4257
02:18:10,000 --> 02:18:13,000
反正关于这个命令行的

4258
02:18:13,000 --> 02:18:15,000
这个所谓 common line full

4259
02:18:15,000 --> 02:18:17,000
common line 空付的这个一个东西

4260
02:18:17,000 --> 02:18:19,000
真是说之不尽啊

4261
02:18:19,000 --> 02:18:21,000
不妨推荐大家去

4262
02:18:21,000 --> 02:18:24,000
这个 commonlinefull.com

4263
02:18:24,000 --> 02:18:25,000
这个名是怎么来的

4264
02:18:25,000 --> 02:18:28,000
就是因为外国人不明白空付

4265
02:18:28,000 --> 02:18:29,000
这个词是什么意思

4266
02:18:29,000 --> 02:18:31,000
他们会把某些东西的技巧

4267
02:18:31,000 --> 02:18:32,000
叫做什么什么

4268
02:18:32,000 --> 02:18:34,000
比如说搜搜 Google 的技巧

4269
02:18:34,000 --> 02:18:35,000
叫做 Google full

4270
02:18:35,000 --> 02:18:38,000
然后 commonline 的技巧叫做 commonlinefull

4271
02:18:38,000 --> 02:18:41,000
然后 commonlinefu.com

4272
02:18:41,000 --> 02:18:43,000
然后你可以在这里面找到很多很多实用的

4273
02:18:43,000 --> 02:18:46,000
这个命令行的 tips

4274
02:18:46,000 --> 02:18:47,000
好吧

4275
02:18:47,000 --> 02:18:49,000
感谢收听 IPN podcast 网络旗下

4276
02:18:50,000 --> 02:18:51,000
IT 技术主题娱乐节目

4277
02:18:51,000 --> 02:18:53,000
我们号称我们叫内核恐慌

4278
02:18:54,000 --> 02:18:55,000
我们号称 Hardcore

4279
02:18:55,000 --> 02:18:56,000
但是也没有干货

4280
02:18:56,000 --> 02:18:58,000
想听人听不想听人别听

4281
02:18:58,000 --> 02:19:00,000
你可以为本节目捐款

4282
02:19:00,000 --> 02:19:02,000
捐款地址是 kernelpanic.fem

4283
02:19:02,000 --> 02:19:03,000
slashdonate

4284
02:19:03,000 --> 02:19:04,000
捐款结合随意

4285
02:19:04,000 --> 02:19:05,000
至少是 8 个正如贝就可以了

4286
02:19:06,000 --> 02:19:07,000
捐款不会为你带来什么

4287
02:19:07,000 --> 02:19:08,000
不捐也不会让你失去什么

4288
02:19:08,000 --> 02:19:11,000
我们的口号是 no hard feelings

4289
02:19:11,000 --> 02:19:12,000
如果你有任何反馈

4290
02:19:12,000 --> 02:19:16,000
欢迎发邮件到 kernelpanicatipn.li

4291
02:19:16,000 --> 02:19:19,000
同时也欢迎收听 IPN 旗下集团节目

4292
02:19:19,000 --> 02:19:20,000
爱听公论

4293
02:19:20,000 --> 02:19:21,000
伪知道太一来了

4294
02:19:21,000 --> 02:19:22,000
流行通讯

4295
02:19:22,000 --> 02:19:23,000
Hi story

4296
02:19:23,000 --> 02:19:24,000
硬影像

4297
02:19:24,000 --> 02:19:24,000
无词源

4298
02:19:24,000 --> 02:19:25,000
不物质

4299
02:19:25,000 --> 02:19:26,000
选美

4300
02:19:26,000 --> 02:19:28,000
我们下期节目再会

