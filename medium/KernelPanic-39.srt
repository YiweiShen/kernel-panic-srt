1
00:00:00,000 --> 00:00:16,000
最高指示 串台是很好的事 串得越赢的越好

2
00:00:31,000 --> 00:00:32,000
没错

3
00:00:32,000 --> 00:00:38,000
当时一本书的话第一页应该是要写最高指示

4
00:00:38,000 --> 00:00:42,000
所以在串台的开场的时候首先要念一下最高指示

5
00:00:43,000 --> 00:00:45,000
这期节目是不是要被打上分级标签

6
00:00:45,000 --> 00:00:47,000
还没有 我们没有说张字

7
00:00:48,000 --> 00:00:51,000
没关系 不过大家还是要说一下

8
00:00:51,000 --> 00:00:54,000
如果不想收听体验北英歌的话

9
00:00:54,000 --> 00:00:59,000
还是推荐大家使用泛用型博客客户端收听我们的节目

10
00:01:00,000 --> 00:01:01,000
对

11
00:01:01,000 --> 00:01:03,000
好了 我们终于开始录了

12
00:01:30,000 --> 00:01:33,000
同时也是内核恐慌的第 39 期 我好猪啊

13
00:01:35,000 --> 00:01:39,000
自谈自唱 是全球首家用华语制作的自题排行主题博客节目

14
00:01:39,000 --> 00:01:42,000
我是主播 文川西版动音剧 Eric

15
00:01:42,000 --> 00:01:45,000
我是主播 黄浦江边 清真语 钱真语

16
00:01:45,000 --> 00:01:50,000
内核恐慌是 IPN Podcast 网络旗下的 IT 技术主题娱乐节目

17
00:01:50,000 --> 00:01:52,000
我们号称 Hardcore 但是并没有干货

18
00:01:52,000 --> 00:01:55,000
想听人听 不想听人就别听 我是吴涛

19
00:01:55,000 --> 00:01:56,000
我是 Rail

20
00:01:56,000 --> 00:01:58,000
哎呀 惨了 我们在气势上已经输了

21
00:01:58,000 --> 00:02:00,000
他们的开头好华丽啊

22
00:02:01,000 --> 00:02:03,000
对啊 他们还有开头配乐啊

23
00:02:04,000 --> 00:02:09,000
他们有那个 他们有自己的封号 你知道吗

24
00:02:10,000 --> 00:02:12,000
对对对 那你们也可以来起一个呀

25
00:02:13,000 --> 00:02:14,000
怎么办呢

26
00:02:14,000 --> 00:02:17,000
而且我们两个封号还是对账加押运的

27
00:02:17,000 --> 00:02:21,000
对啊 这个气势已经输了怎么办

28
00:02:21,000 --> 00:02:23,000
没错没错 咱们俩赶紧想一个

29
00:02:23,000 --> 00:02:25,000
我是来阴河探

30
00:02:27,000 --> 00:02:29,000
反了克服

31
00:02:30,000 --> 00:02:32,000
你看他们俩一个西一个江

32
00:02:32,000 --> 00:02:34,000
咱俩肯定要一个河一个海了

33
00:02:35,000 --> 00:02:36,000
或者一个河一个湖

34
00:02:36,000 --> 00:02:40,000
什么大西洋岸 什么太平洋边

35
00:02:42,000 --> 00:02:44,000
算了算了 咱还是不要去存那个能的

36
00:02:46,000 --> 00:02:48,000
咱们俩还是 Keep Humble 吧

37
00:02:48,000 --> 00:02:50,000
对对对 今天是一期挺特别的节目

38
00:02:50,000 --> 00:02:55,000
是我们这个自谈自唱和内后恐慌第一次合作

39
00:02:57,000 --> 00:02:58,000
估计我们要做一系列吧

40
00:02:58,000 --> 00:03:02,000
所以我们今天的那个这个系列特别系列

41
00:03:02,000 --> 00:03:06,000
我们几个起了个单独的名字叫做 Curning Panic

42
00:03:07,000 --> 00:03:09,000
对 你没有听错 Curning Panic

43
00:03:10,000 --> 00:03:13,000
而且中文名字叫自谈自串

44
00:03:13,000 --> 00:03:15,000
不是自谈自唱 是自谈自串

45
00:03:15,000 --> 00:03:17,000
对 因为首先我们是

46
00:03:18,000 --> 00:03:20,000
首先我们是串联了一下

47
00:03:20,000 --> 00:03:25,000
然后这个这个字串也是 string 的一个翻译

48
00:03:25,000 --> 00:03:27,000
其实 Curning Panic 我已经想到了一种症状

49
00:03:27,000 --> 00:03:30,000
就是你在街上看到这个一个

50
00:03:30,000 --> 00:03:35,000
一个用西文排 拉丁字母排出来的招牌

51
00:03:35,000 --> 00:03:37,000
然后它的 Curning 非常的死

52
00:03:37,000 --> 00:03:38,000
奇怪

53
00:03:38,000 --> 00:03:39,000
就会产生对

54
00:03:39,000 --> 00:03:41,000
就会产生这个 Curning Panic 这种心理

55
00:03:42,000 --> 00:03:45,000
欢迎你来到中国任何一个大城市的商场

56
00:03:45,000 --> 00:03:47,000
都可以看到 Curning Panic 的状况

57
00:03:47,000 --> 00:03:49,000
都可以引发你产生 Curning Panic

58
00:03:49,000 --> 00:03:51,000
我们在中国坐地铁天天都

59
00:03:51,000 --> 00:03:54,000
所以我每天都是恐慌的状态是吗

60
00:03:54,000 --> 00:03:55,000
惶惶不可终日

61
00:03:55,000 --> 00:03:57,000
我并没有 我觉得还好

62
00:04:01,000 --> 00:04:06,000
这是 Type is Beautiful 和 IPN 之间的合作

63
00:04:06,000 --> 00:04:09,000
从更深的这个主办方的角度来说

64
00:04:10,000 --> 00:04:11,000
好吧

65
00:04:11,000 --> 00:04:12,000
好吧 那不是三比一吗

66
00:04:12,000 --> 00:04:15,000
TIB 虽然和 IPN 是有台合作关系

67
00:04:15,000 --> 00:04:17,000
但是吴涛还是我们的

68
00:04:17,000 --> 00:04:19,000
不是你们的

69
00:04:21,000 --> 00:04:22,000
吴涛你怎么还在这里

70
00:04:26,000 --> 00:04:27,000
当然重要了

71
00:04:27,000 --> 00:04:29,000
上次我跟博物制串台的时候

72
00:04:29,000 --> 00:04:31,000
婉妮就特别强调这点

73
00:04:31,000 --> 00:04:33,000
到底吴涛是你们的还是我们的问题

74
00:04:33,000 --> 00:04:35,000
但是归根到底肯定还是我们的

75
00:04:35,000 --> 00:04:37,000
吴涛是我们 TIB 的 DO

76
00:04:40,000 --> 00:04:42,000
归根结底还是你们的

77
00:04:44,000 --> 00:04:48,000
所以为什么吴涛没有出现在 Type Chat 里面

78
00:04:48,000 --> 00:04:49,000
因为怎么说呢

79
00:04:49,000 --> 00:04:52,000
就是这个 CTO 实际上是一个

80
00:04:54,000 --> 00:04:55,000
玩笑的头像

81
00:04:55,000 --> 00:04:56,000
因为我在 TIB

82
00:04:56,000 --> 00:05:01,000
我最开始接触到 Type is Beautiful 的时候

83
00:05:03,000 --> 00:05:07,000
Type is Beautiful 基本上是一个两个人运作的 blog

84
00:05:07,000 --> 00:05:13,000
然后当时也是现在我们伟大的战长 Rex

85
00:05:14,000 --> 00:05:17,000
在找一个程序员

86
00:05:17,000 --> 00:05:19,000
我有一个伟大的构想

87
00:05:19,000 --> 00:05:21,000
现在就缺一个程序员了

88
00:05:21,000 --> 00:05:27,000
然后我自告奋勇的寄了简历给他

89
00:05:27,000 --> 00:05:28,000
正儿八经的寄了简历

90
00:05:28,000 --> 00:05:29,000
寄了简历给他

91
00:05:29,000 --> 00:05:32,000
然后他审了一下说不错

92
00:05:32,000 --> 00:05:35,000
你来做我们的技术知识

93
00:05:35,000 --> 00:05:39,000
然后我就帮 Type is Beautiful 改了一部分东西

94
00:05:39,000 --> 00:05:43,000
主要是布局

95
00:05:43,000 --> 00:05:45,000
然后一些新功能之类的

96
00:05:47,000 --> 00:05:50,000
其实一直到我相信一直到现在我在网站上的

97
00:05:50,000 --> 00:05:52,000
title 都是技术支持

98
00:05:52,000 --> 00:05:56,000
所以我完全就是一个

99
00:05:57,000 --> 00:05:58,000
打杂的那种感觉

100
00:05:58,000 --> 00:06:00,000
并不是一个 CTO

101
00:06:00,000 --> 00:06:01,000
然后

102
00:06:01,000 --> 00:06:06,000
我也只是在 Type is Beautiful 上写过一些主要是翻译的一些作品

103
00:06:06,000 --> 00:06:08,000
就是比如说那个

104
00:06:09,000 --> 00:06:11,000
好吧也有自己原创了

105
00:06:11,000 --> 00:06:14,000
但是主要还是翻译翻译过那个

106
00:06:14,000 --> 00:06:19,000
Din 字体的原体的发明过程什么的

107
00:06:19,000 --> 00:06:24,000
所以本质上我不是一个内容输出的这么一个角色

108
00:06:24,000 --> 00:06:29,000
所以参加 Type chat 其实是有点肯定的

109
00:06:29,000 --> 00:06:31,000
肯定会进入那种无话可说的状态

110
00:06:31,000 --> 00:06:34,000
因为很多东西我只是可能对技术上有所了解

111
00:06:34,000 --> 00:06:38,000
但是不管是审美还是历史渊源上就完全没有概念

112
00:06:38,000 --> 00:06:41,000
所以我参加 Type chat 肯定会冷场

113
00:06:41,000 --> 00:06:43,000
别谦虚啊

114
00:06:43,000 --> 00:06:44,000
没事没事

115
00:06:44,000 --> 00:06:45,000
但当然我要表个态

116
00:06:45,000 --> 00:06:47,000
我的确是 Type is Beautiful 的人

117
00:06:49,000 --> 00:06:51,000
关键时刻还是站队了

118
00:06:52,000 --> 00:06:53,000
那是

119
00:06:53,000 --> 00:06:55,000
现在是一个站队的时代

120
00:06:55,000 --> 00:06:56,000
其实

121
00:06:58,000 --> 00:07:02,000
Wudow Type is Beautiful 里面的好多文章其实我也很受启发的

122
00:07:02,000 --> 00:07:04,000
因为在德国嘛

123
00:07:04,000 --> 00:07:08,000
德国的印刷排印的历史也是非常悠久的

124
00:07:08,000 --> 00:07:13,000
像我那时候读那个什么关于长 S 那些文章

125
00:07:13,000 --> 00:07:15,000
还有什么关于字体定的那些文章

126
00:07:15,000 --> 00:07:16,000
都是非常受启发的

127
00:07:16,000 --> 00:07:20,000
而且咱们俩还翻译过很多东西吧

128
00:07:20,000 --> 00:07:21,000
对吧

129
00:07:21,000 --> 00:07:24,000
那个信息堂的那个活字字体讲座

130
00:07:24,000 --> 00:07:26,000
当时就是咱们俩分工翻译的嘛

131
00:07:26,000 --> 00:07:28,000
你翻译的汉字那一部分吧

132
00:07:28,000 --> 00:07:30,000
这是一个漫长的过程

133
00:07:30,000 --> 00:07:32,000
就以我这个日语的水平

134
00:07:32,000 --> 00:07:34,000
我日语只是哑巴日语用的

135
00:07:34,000 --> 00:07:36,000
有些假名我到现在都是不会念的

136
00:07:36,000 --> 00:07:40,000
但是我用这种日语的水平翻译了两篇文章

137
00:07:40,000 --> 00:07:42,000
我自作全能非常神奇

138
00:07:44,000 --> 00:07:46,000
我们多财多益的 Wudow 同学

139
00:07:46,000 --> 00:07:48,000
咱们俩还翻过一本书不是

140
00:07:48,000 --> 00:07:50,000
对啊那个字体故事

141
00:07:50,000 --> 00:07:51,000
我居然翻译过一本书

142
00:07:51,000 --> 00:07:53,000
这是什么样的黑历史啊

143
00:07:54,000 --> 00:07:56,000
差点没有坚持下来那本书

144
00:07:57,000 --> 00:08:00,000
没有当年其实我觉得那是放在东西文库里面的嘛

145
00:08:00,000 --> 00:08:02,000
然后我就觉得特别好

146
00:08:02,000 --> 00:08:04,000
因为你是在德国我在日本

147
00:08:04,000 --> 00:08:06,000
但是咱们俩都不在国内嘛

148
00:08:06,000 --> 00:08:09,000
然后就翻了一个放到东西文库里面去

149
00:08:09,000 --> 00:08:11,000
也算是名副其实了呀

150
00:08:11,000 --> 00:08:13,000
没错这是一个非常

151
00:08:13,000 --> 00:08:14,000
一东一西

152
00:08:14,000 --> 00:08:17,000
对一个非常快活化的一个 project

153
00:08:17,000 --> 00:08:18,000
而且我们两个

154
00:08:18,000 --> 00:08:21,000
我和 Eric 其实从来没有见过面

155
00:08:21,000 --> 00:08:23,000
然后那个协同我们编

156
00:08:23,000 --> 00:08:25,000
你一定要爆这个料吗

157
00:08:26,000 --> 00:08:27,000
很快很快

158
00:08:27,000 --> 00:08:31,000
然后那个协同我们编辑也从来没有见过我们俩

159
00:08:31,000 --> 00:08:32,000
你们两个后来见过吗

160
00:08:33,000 --> 00:08:34,000
我见过周南

161
00:08:34,000 --> 00:08:35,000
OK

162
00:08:35,000 --> 00:08:38,000
总之他们这个编辑部现在也在做一些非常有意思的事情

163
00:08:38,000 --> 00:08:40,000
不妨帮他们打个广告

164
00:08:40,000 --> 00:08:42,000
他们在做一本叫做离线的杂志

165
00:08:42,000 --> 00:08:44,000
可能我们的听众之间

166
00:08:44,000 --> 00:08:46,000
听众中间已经有很多朋友听说过了

167
00:08:46,000 --> 00:08:49,000
他们是在一个如今在这样一个

168
00:08:49,000 --> 00:08:51,000
数字出版泛滥的时代

169
00:08:51,000 --> 00:08:53,000
坚持做线下杂志的团队

170
00:08:53,000 --> 00:08:56,000
然后他们做杂志也是

171
00:08:56,000 --> 00:08:58,000
主要是主题吧

172
00:08:58,000 --> 00:09:00,000
什么游戏啊

173
00:09:00,000 --> 00:09:03,000
未来啊科幻啊之类的

174
00:09:03,000 --> 00:09:04,000
就感兴趣的朋友可以看一下

175
00:09:04,000 --> 00:09:06,000
他们虽然号称离线

176
00:09:06,000 --> 00:09:08,000
但现在还是有网站的

177
00:09:08,000 --> 00:09:09,000
然后

178
00:09:11,000 --> 00:09:12,000
喜欢的话可以入会

179
00:09:12,000 --> 00:09:13,000
我好喜欢这个剧型啊

180
00:09:13,000 --> 00:09:14,000
虽然不是什么

181
00:09:14,000 --> 00:09:16,000
但是他们号称什么

182
00:09:16,000 --> 00:09:17,000
你好喜欢这个剧型

183
00:09:17,000 --> 00:09:20,000
我觉得我可能太久

184
00:09:20,000 --> 00:09:21,000
中文说的太少了

185
00:09:21,000 --> 00:09:23,000
很容易陷入一种就是

186
00:09:23,000 --> 00:09:26,000
使用一个套用一个固定剧型的模式

187
00:09:26,000 --> 00:09:27,000
我自己也发现了

188
00:09:29,000 --> 00:09:30,000
挺好挺好

189
00:09:30,000 --> 00:09:31,000
没事没事

190
00:09:31,000 --> 00:09:33,000
我们这个节目可以锻炼你的中文水平

191
00:09:34,000 --> 00:09:35,000
非常感谢

192
00:09:36,000 --> 00:09:37,000
芮回国以后是不是觉得

193
00:09:37,000 --> 00:09:39,000
自己中文的母语水平马上就回来了

194
00:09:40,000 --> 00:09:41,000
就我比较一个

195
00:09:41,000 --> 00:09:42,000
你在黑唱吗

196
00:09:44,000 --> 00:09:46,000
比较明显的感受是这个

197
00:09:46,000 --> 00:09:48,000
就以前节目里面老是念错字嘛

198
00:09:48,000 --> 00:09:50,000
现在好像出现这种概率的

199
00:09:50,000 --> 00:09:51,000
要稍微好一点

200
00:09:51,000 --> 00:09:53,000
会有帮助吗

201
00:09:54,000 --> 00:09:56,000
我觉得国内也是蛮有逆人的状态

202
00:09:56,000 --> 00:09:59,000
出现这种概率要稍微好一点的

203
00:09:59,000 --> 00:10:00,000
这本身就是个病剧

204
00:10:03,000 --> 00:10:05,000
口语面无所谓的

205
00:10:05,000 --> 00:10:07,000
反正我到现在普通话也不好

206
00:10:07,000 --> 00:10:10,000
我们应该说一下这次节目主题是什么

207
00:10:10,000 --> 00:10:11,000
对对对

208
00:10:11,000 --> 00:10:12,000
我们的节目

209
00:10:13,000 --> 00:10:14,000
我们节目呢

210
00:10:14,000 --> 00:10:15,000
英文名字叫 Curling Panic

211
00:10:15,000 --> 00:10:17,000
中文名字叫字弹字串

212
00:10:17,000 --> 00:10:19,000
这个串台节目呢

213
00:10:19,000 --> 00:10:24,000
是我们 TIB 和 IPN 网络旗下的内核恐慌的合作节目

214
00:10:24,000 --> 00:10:25,000
那这次作为第一期

215
00:10:25,000 --> 00:10:26,000
我们就应该讲一下

216
00:10:26,000 --> 00:10:28,000
从应该有个主题

217
00:10:28,000 --> 00:10:32,000
从用户敲击键盘开始到最终的答应输出

218
00:10:32,000 --> 00:10:34,000
这个过程到底发生了什么

219
00:10:36,000 --> 00:10:37,000
这是一个好长的过程

220
00:10:38,000 --> 00:10:40,000
我已经在想到那个程序站

221
00:10:41,000 --> 00:10:42,000
对

222
00:10:42,000 --> 00:10:44,000
看到这个主题的第一反应是

223
00:10:45,000 --> 00:10:46,000
这一期讲的吧

224
00:10:46,000 --> 00:10:49,000
这是为了感谢听众们的不杀之恩

225
00:10:49,000 --> 00:10:52,000
一定要讲一千零一的节奏

226
00:10:53,000 --> 00:10:54,000
好吧

227
00:10:54,000 --> 00:10:55,000
我看到这个主题第一反应是

228
00:10:55,000 --> 00:10:57,000
陈璇该怎么找女朋友

229
00:10:59,000 --> 00:11:02,000
没有上次就是因为 Rail 不在

230
00:11:02,000 --> 00:11:05,000
然后吴涛自己一个很怨恨的

231
00:11:05,000 --> 00:11:07,000
就录了一期叫编码

232
00:11:07,000 --> 00:11:08,000
对吧

233
00:11:08,000 --> 00:11:10,000
然后就是我一期就是

234
00:11:10,000 --> 00:11:12,000
和字比较有关系的一期节目

235
00:11:12,000 --> 00:11:15,000
但是就自己一个人录得很不爽

236
00:11:15,000 --> 00:11:16,000
看出来

237
00:11:16,000 --> 00:11:18,000
其实我们之前讲过编成字体的

238
00:11:18,000 --> 00:11:20,000
那一期算是非常

239
00:11:20,000 --> 00:11:23,000
和 Type of Love 有点关系的主题

240
00:11:23,000 --> 00:11:25,000
不过那个时候还没有你们

241
00:11:26,000 --> 00:11:28,000
所以就是说还

242
00:11:28,000 --> 00:11:29,000
程序员也要关心字体的

243
00:11:29,000 --> 00:11:32,000
那做字的也要知道程序应该怎么运行

244
00:11:32,000 --> 00:11:35,000
所以我觉得咱们的串台是非常有意义的

245
00:11:36,000 --> 00:11:37,000
的确

246
00:11:37,000 --> 00:11:39,000
那就串起来咯

247
00:11:42,000 --> 00:11:43,000
基本上今天咱们第一次串嘛

248
00:11:43,000 --> 00:11:46,000
那咱们就从头到尾先简略的

249
00:11:46,000 --> 00:11:48,000
都把一个过程先说完

250
00:11:48,000 --> 00:11:49,000
然后呢

251
00:11:49,000 --> 00:11:51,000
留下无数大坑坑就挖

252
00:11:52,000 --> 00:11:53,000
以后慢慢填呗

253
00:11:54,000 --> 00:11:55,000
好吧

254
00:11:55,000 --> 00:11:57,000
免得以后没有主题

255
00:11:58,000 --> 00:12:00,000
解决了 B 节目最大的问题

256
00:12:02,000 --> 00:12:04,000
我们现在是选题过剩的怎么办

257
00:12:04,000 --> 00:12:05,000
换不寡

258
00:12:05,000 --> 00:12:07,000
不换寡换不均嘛

259
00:12:09,000 --> 00:12:12,000
你们把那个和技术有关的主题

260
00:12:12,000 --> 00:12:13,000
给我圆一半好了

261
00:12:16,000 --> 00:12:18,000
那你们的努力多说一点

262
00:12:19,000 --> 00:12:21,000
或者可以这样把 Rail 给你们

263
00:12:21,000 --> 00:12:22,000
然后把 ZhengYi 给我们

264
00:12:23,000 --> 00:12:24,000
我们两个我们两个可以

265
00:12:27,000 --> 00:12:28,000
怎么一回事

266
00:12:28,000 --> 00:12:29,000
为什么会这样

267
00:12:29,000 --> 00:12:31,000
试习误交换是吧

268
00:12:31,000 --> 00:12:32,000
换搭档俱乐部

269
00:12:32,000 --> 00:12:33,000
换搭档俱乐部可能

270
00:12:33,000 --> 00:12:34,000
人人交换

271
00:12:36,000 --> 00:12:37,000
贵权争乱

272
00:12:37,000 --> 00:12:38,000
Partner exchange

273
00:12:38,000 --> 00:12:39,000
听起来毫无违口

274
00:12:42,000 --> 00:12:43,000
更乱了

275
00:12:46,000 --> 00:12:48,000
我们少一点下三路吧

276
00:12:50,000 --> 00:12:52,000
好像是我一直在下三路

277
00:12:52,000 --> 00:12:53,000
Anyway

278
00:12:53,000 --> 00:12:55,000
我们来一点先来一点底层的东西

279
00:12:56,000 --> 00:12:58,000
因为大家一开始就打开电脑是打字嘛

280
00:12:58,000 --> 00:13:01,000
这个字打到电脑里面去

281
00:13:01,000 --> 00:13:03,000
其实是什么样的过程对吧

282
00:13:04,000 --> 00:13:06,000
对我们可以从

283
00:13:07,000 --> 00:13:09,000
我觉得可以先讲一下历史渊源

284
00:13:10,000 --> 00:13:13,000
世界上为什么有这么多种键盘布局

285
00:13:14,000 --> 00:13:16,000
为什么可能在中国待久了

286
00:13:16,000 --> 00:13:17,000
你会觉得

287
00:13:17,000 --> 00:13:18,000
你会有一种

288
00:13:19,000 --> 00:13:21,000
想象就是可能全世界的键盘长

289
00:13:21,000 --> 00:13:22,000
长得都这个样子

290
00:13:23,000 --> 00:13:24,000
但实际上不是

291
00:13:26,000 --> 00:13:29,000
尤其是在日本的朋友们可能会觉得

292
00:13:29,000 --> 00:13:31,000
我靠日本键盘实在是太复杂了

293
00:13:31,000 --> 00:13:33,000
我第一次见到日本键盘真的有点震惊了

294
00:13:34,000 --> 00:13:37,000
你能讲一下日本键盘上有一个键叫做

295
00:13:38,000 --> 00:13:39,000
转换非转换是干嘛的吗

296
00:13:40,000 --> 00:13:41,000
对我到现在也不懂

297
00:13:44,000 --> 00:13:46,000
因为我一般都不去用那个键

298
00:13:46,000 --> 00:13:49,000
而且是 Windows 的标准是那样的

299
00:13:49,000 --> 00:13:50,000
然后 Mac 是不用的

300
00:13:51,000 --> 00:13:52,000
Mac 上没有转换非转换这个键

301
00:13:53,000 --> 00:13:54,000
对

302
00:13:55,000 --> 00:13:57,000
而且就是因为他们日本的键盘

303
00:13:57,000 --> 00:13:59,000
它还有那个假名输入的键位

304
00:14:00,000 --> 00:14:02,000
所以它一个键帽上面会有时候

305
00:14:03,000 --> 00:14:05,000
会多达四五个字

306
00:14:05,000 --> 00:14:07,000
它一个键帽上要印四五个字

307
00:14:07,000 --> 00:14:09,000
所以那个日本的键面特别特别花

308
00:14:10,000 --> 00:14:11,000
然后键位又不一样

309
00:14:12,000 --> 00:14:14,000
还好在日本买 Mac 的话它是有选择

310
00:14:15,000 --> 00:14:16,000
我在日本买我都会选择

311
00:14:17,000 --> 00:14:18,000
选择那个美国的键盘

312
00:14:19,000 --> 00:14:20,000
要不然的话我都疯掉了

313
00:14:21,000 --> 00:14:22,000
对

314
00:14:22,000 --> 00:14:25,000
因为我之前在德国也提到

315
00:14:25,000 --> 00:14:28,000
我们之前在那个那个口号也提到过这一期嘛

316
00:14:28,000 --> 00:14:30,000
就在德国的时候那个德国的键盘也是挺奇怪的

317
00:14:31,000 --> 00:14:32,000
不是那种标准的美国键位

318
00:14:33,000 --> 00:14:34,000
就国内用那种

319
00:14:34,000 --> 00:14:36,000
然后当时我也是在德国待的时候

320
00:14:37,000 --> 00:14:38,000
为了买那个美国键位的

321
00:14:39,000 --> 00:14:42,000
还专门需要订就是要特殊订单

322
00:14:42,000 --> 00:14:43,000
然后等它送过来

323
00:14:43,000 --> 00:14:44,000
然后在日本的话

324
00:14:44,000 --> 00:14:45,000
因为现在海淘也比较方便

325
00:14:46,000 --> 00:14:47,000
很多人也去日本买这个电脑啊

326
00:14:48,000 --> 00:14:49,000
笔记本啊之类的

327
00:14:49,000 --> 00:14:50,000
好像也经常我看到

328
00:14:50,000 --> 00:14:53,000
有人买到一个那种日文键盘的笔记本回来

329
00:14:53,000 --> 00:14:55,000
用起来挺不方便的

330
00:14:56,000 --> 00:14:57,000
对的

331
00:14:58,000 --> 00:15:00,000
其实我们刚才强调的这三种布局

332
00:15:00,000 --> 00:15:03,000
就是世界上最主流的三种布局

333
00:15:03,000 --> 00:15:05,000
一种是国内的所谓

334
00:15:06,000 --> 00:15:09,000
其实就国内这个键盘布局是以北美为主的

335
00:15:10,000 --> 00:15:12,000
一个布局叫做

336
00:15:13,000 --> 00:15:14,000
Ansi NC 布局

337
00:15:15,000 --> 00:15:20,000
然后它最大的特点其实就是那个 return 键是一个扁平的长条

338
00:15:20,000 --> 00:15:23,000
它只是比别的键宽一点

339
00:15:24,000 --> 00:15:28,000
然后在德国也有提到这种键盘是所谓 ISO 键盘

340
00:15:28,000 --> 00:15:32,000
就是国际标准化组织规定的键盘

341
00:15:32,000 --> 00:15:34,000
比如说不一定只有德语用

342
00:15:35,000 --> 00:15:40,000
法语包括英国其实也在用这种 ISO 制式的键盘

343
00:15:40,000 --> 00:15:42,000
它好像要比 Ansi 多出一个键来

344
00:15:43,000 --> 00:15:47,000
然后它最大的特征是那个回车键是一个 DALL 型

345
00:15:47,000 --> 00:15:50,000
然后日本的这个标准当然这个

346
00:15:50,000 --> 00:15:53,000
然后应该是 JIS 标准嘛

347
00:15:53,000 --> 00:15:55,000
就是 Japanese Industrial Standard 标准

348
00:15:55,000 --> 00:15:59,000
然后它也是一个好像也是一个 DALL 的键盘

349
00:15:59,000 --> 00:16:02,000
但是它的键还要比 ISO 多出一个

350
00:16:02,000 --> 00:16:04,000
如果没有记错的话

351
00:16:04,000 --> 00:16:06,000
还要多对对还要多

352
00:16:07,000 --> 00:16:09,000
所以在日本的话

353
00:16:09,000 --> 00:16:13,000
就是普通的日本人他们是用什么用那个日文键盘吗应该

354
00:16:13,000 --> 00:16:16,000
就是键位是差不多的

355
00:16:16,000 --> 00:16:20,000
日本键盘和美国键盘他们就是也试用这个 Corti 嘛

356
00:16:21,000 --> 00:16:26,000
就是在英文字符的键位是和美国键位是一样的

357
00:16:26,000 --> 00:16:31,000
然后就是什么后面那些块虎案那些那个位置的安排是不一样的

358
00:16:31,000 --> 00:16:36,000
然后绝大多数的日本人现在都使用他们罗马字拼音进行输入

359
00:16:36,000 --> 00:16:42,000
虽然日本键位也也支持就是他们直接的那个叫假名输入法

360
00:16:42,000 --> 00:16:46,000
就是按一个键就可以输入一个假名有这样的输入

361
00:16:46,000 --> 00:16:50,000
但是我见过的就是活人

362
00:16:50,000 --> 00:16:52,000
我见过这么多日本人

363
00:16:52,000 --> 00:16:56,000
尤其只有一个人是用这样的假名直接输入的

364
00:16:56,000 --> 00:16:59,000
因为他要去背那个假名放在在哪个键位嘛

365
00:17:00,000 --> 00:17:04,000
所以原来日本人现在已经不用假名输入了

366
00:17:04,000 --> 00:17:06,000
就跟那个输 5 笔差不多吗

367
00:17:06,000 --> 00:17:08,000
应该说跟注音符号差不多

368
00:17:08,000 --> 00:17:13,000
用假名输入的人跟台湾用注音符号输入的人差不多

369
00:17:13,000 --> 00:17:18,000
但是对他们就是把这每个假名分配到那个键位上面去

370
00:17:18,000 --> 00:17:21,000
对那不够分吧对啊

371
00:17:21,000 --> 00:17:23,000
够的他把输入用到会有重复嘛

372
00:17:23,000 --> 00:17:25,000
假名有多少个啊

373
00:17:25,000 --> 00:17:31,000
5050 音图有 50 个实际上常用的不到 50 个

374
00:17:31,000 --> 00:17:33,000
40 多个嘛那也不够啊

375
00:17:33,000 --> 00:17:35,000
他还有平假名还有骗假名

376
00:17:35,000 --> 00:17:38,000
他们用着音之类的组合

377
00:17:38,000 --> 00:17:44,000
普通键盘上你加上英文 26 个加 10 个数字也才 36

378
00:17:44,000 --> 00:17:46,000
再加一堆符号不到 50 啊

379
00:17:48,000 --> 00:17:51,000
40 多个嘛他就有组合

380
00:17:51,000 --> 00:17:54,000
他把什么帽号啊

381
00:17:54,000 --> 00:17:55,000
右库号啊

382
00:17:55,000 --> 00:17:58,000
豆号啊大号小号全都炸了

383
00:17:58,000 --> 00:18:01,000
这里有 10 个那刚好

384
00:18:02,000 --> 00:18:06,000
所以特别花大家如果去看那个日文的 GIS 键盘标准的话

385
00:18:06,000 --> 00:18:08,000
就他那个键帽上面特别花写满了字

386
00:18:08,000 --> 00:18:10,000
然后我记好有些还是写在侧面的

387
00:18:10,000 --> 00:18:14,000
就那个如果键帽是比较那种高的不是那种巧克力键盘

388
00:18:14,000 --> 00:18:16,000
真的吗那是 HHKB 吗

389
00:18:16,000 --> 00:18:19,000
没有那个是法法语键盘嘛法文键盘就是

390
00:18:19,000 --> 00:18:24,000
法文键盘他们数字的话默认的话他们是输入符号

391
00:18:24,000 --> 00:18:28,000
声调的符号然后要按 shift 键才能打出数字嘛

392
00:18:28,000 --> 00:18:31,000
然后有的时候还要必须按左 out 还是什么

393
00:18:31,000 --> 00:18:34,000
右边的要对对就不一样

394
00:18:34,000 --> 00:18:37,000
右边叫 out graphic

395
00:18:37,000 --> 00:18:40,000
就是你要打出一些图像符号的时候

396
00:18:40,000 --> 00:18:44,000
所以才会扭曲的出现那种 20 进制的技术原则吗

397
00:18:47,000 --> 00:18:49,000
不要再黑法语的数字

398
00:18:50,000 --> 00:18:51,000
好吧

399
00:18:51,000 --> 00:18:56,000
那所以其实在日本工作的程序员他们用这个日文键盘

400
00:18:56,000 --> 00:19:00,000
输入的话会有就是比如说编程的话会有障碍吗

401
00:19:01,000 --> 00:19:04,000
会因为就像我到现在为止有时候还会找不到键位

402
00:19:04,000 --> 00:19:08,000
而且像在美就是尤其是那些符号类的

403
00:19:09,000 --> 00:19:12,000
然后像扩合的话在美国扩合

404
00:19:12,000 --> 00:19:14,000
美国键盘上面扩合都是左右对称的

405
00:19:14,000 --> 00:19:15,000
对 9 和 0

406
00:19:15,000 --> 00:19:18,000
一对一对的嘛但是在日文键盘的话

407
00:19:18,000 --> 00:19:20,000
它那个中扩号它是上下的

408
00:19:20,000 --> 00:19:22,000
就不是左右相邻着的

409
00:19:22,000 --> 00:19:25,000
所以有时候就就按的会比较麻烦

410
00:19:25,000 --> 00:19:27,000
然后还有一些很坑爹的就是

411
00:19:27,000 --> 00:19:31,000
他当年早期把 ASCII 转过来的时候

412
00:19:31,000 --> 00:19:36,000
他把那个日元符号和他把反鞋杆的那个马位

413
00:19:36,000 --> 00:19:38,000
换上了日元符号

414
00:19:38,000 --> 00:19:42,000
天哪这是一个啊对明白了

415
00:19:43,000 --> 00:19:45,000
但你不觉得这解决了一个童年的疑惑吗

416
00:19:45,000 --> 00:19:48,000
就是有时候你有你小时候玩日文游戏的时候

417
00:19:48,000 --> 00:19:51,000
它的那个路径分割符是一个印的符号

418
00:19:51,000 --> 00:19:55,000
对在 Windows 他们的那个路径默认是用反鞋杆嘛

419
00:19:55,000 --> 00:20:00,000
对所以在当年早期的那个 Windows 的日本版的时候

420
00:20:00,000 --> 00:20:02,000
他们路径就是一大堆的日元符号

421
00:20:02,000 --> 00:20:03,000
好多钱

422
00:20:05,000 --> 00:20:06,000
不过日元也不值钱的

423
00:20:06,000 --> 00:20:08,000
它其实是公用了一个什么编码

424
00:20:08,000 --> 00:20:09,000
是这样子的

425
00:20:09,000 --> 00:20:13,000
就是他当时把 ASCII 拿过来的时候

426
00:20:13,000 --> 00:20:16,000
把 ASCII 的那个反鞋杆的那个马

427
00:20:16,000 --> 00:20:19,000
给它换成那个日元符号了

428
00:20:19,000 --> 00:20:21,000
那应该是编码没有编正确

429
00:20:21,000 --> 00:20:22,000
这不是一个正确的问题

430
00:20:22,000 --> 00:20:27,000
就是你那个时候日文只支持假名和 26 文字母

431
00:20:27,000 --> 00:20:32,000
所以如果你要把 256 个字符用上的话

432
00:20:32,000 --> 00:20:34,000
其实是完全够的

433
00:20:34,000 --> 00:20:36,000
日语在当时不支持汉字

434
00:20:36,000 --> 00:20:40,000
但是支持所有的平假名和偏假名

435
00:20:40,000 --> 00:20:43,000
然后可以全都压缩到 256 个字符里面

436
00:20:43,000 --> 00:20:45,000
那也是八位了

437
00:20:45,000 --> 00:20:46,000
它不是七位吧

438
00:20:46,000 --> 00:20:47,000
ASCII 是七位

439
00:20:47,000 --> 00:20:49,000
对 ASCII 是七位

440
00:20:49,000 --> 00:20:53,000
然后它就相当于这是那个日本的西欧扩展

441
00:20:53,000 --> 00:20:56,000
西欧扩展就是在西欧的东西扩展

442
00:20:56,000 --> 00:20:57,000
就是把第八位用上

443
00:20:57,000 --> 00:21:04,000
然后日语日本当时决定使用一个最不常见的符号来替换掉

444
00:21:04,000 --> 00:21:05,000
替换成 IN 的符号

445
00:21:05,000 --> 00:21:07,000
就把反鞋杆给替换掉

446
00:21:07,000 --> 00:21:11,000
因为反鞋杆实际上在日常生活中是非常非常少见的

447
00:21:11,000 --> 00:21:13,000
除了编程需要接触到

448
00:21:13,000 --> 00:21:17,000
基本上日常生活里面没有一个地方用到反鞋杆

449
00:21:17,000 --> 00:21:18,000
没有啊

450
00:21:18,000 --> 00:21:20,000
编程在反鞋杆里面

451
00:21:20,000 --> 00:21:23,000
就是哪个语言里面讲的去用反鞋杆的

452
00:21:23,000 --> 00:21:25,000
反鞋杆不是转移符吗

453
00:21:27,000 --> 00:21:28,000
对啊

454
00:21:28,000 --> 00:21:30,000
但这个不算常用吧

455
00:21:30,000 --> 00:21:32,000
就写转移符的时候

456
00:21:32,000 --> 00:21:34,000
反鞋杆是转移符

457
00:21:34,000 --> 00:21:36,000
反鞋杆是转移符

458
00:21:37,000 --> 00:21:38,000
对啊

459
00:21:38,000 --> 00:21:40,000
不算常用吧

460
00:21:40,000 --> 00:21:41,000
就写转移符的时候

461
00:21:41,000 --> 00:21:42,000
转移符不常用吗

462
00:21:42,000 --> 00:21:43,000
我觉得还蛮常用

463
00:21:45,000 --> 00:21:47,000
然后就是 Windows 的路径了吗

464
00:21:47,000 --> 00:21:48,000
对那应该是这样

465
00:21:50,000 --> 00:21:51,000
然后我那时候就开玩笑嘛

466
00:21:51,000 --> 00:21:53,000
我在校上海地铁

467
00:21:53,000 --> 00:21:55,000
他们公共标志的时候

468
00:21:55,000 --> 00:21:56,000
比如几号线到货的几号线

469
00:21:56,000 --> 00:21:58,000
他们用的是反鞋杆吗

470
00:21:59,000 --> 00:22:01,000
就对上海的那个地铁

471
00:22:01,000 --> 00:22:04,000
比如说此处转 2 号线或 3 号线 2 杠 3 的时候

472
00:22:04,000 --> 00:22:05,000
他用的是反鞋杆

473
00:22:05,000 --> 00:22:08,000
整个上海全上海的地铁线路

474
00:22:08,000 --> 00:22:10,000
他们的指示系统都是这样用的

475
00:22:10,000 --> 00:22:12,000
所以我那时候我就笑嘛

476
00:22:12,000 --> 00:22:13,000
我那时候贴出去的时候

477
00:22:13,000 --> 00:22:15,000
我把这张照片给日本人看

478
00:22:15,000 --> 00:22:19,000
然后我说这是我在现实生活中

479
00:22:19,000 --> 00:22:21,000
第一次看到反鞋杆如此大量的实用

480
00:22:21,000 --> 00:22:23,000
然后日本人就笑得不行了

481
00:22:23,000 --> 00:22:26,000
真的这好像绝无仅有的

482
00:22:26,000 --> 00:22:27,000
对啊

483
00:22:27,000 --> 00:22:29,000
他可能是个左撇子

484
00:22:34,000 --> 00:22:38,000
但是中国的左撇子好像小时候会很惨

485
00:22:38,000 --> 00:22:39,000
会逼着用右手写字

486
00:22:39,000 --> 00:22:41,000
会被作为另类吗

487
00:22:41,000 --> 00:22:44,000
前程是左撇子

488
00:22:44,000 --> 00:22:47,000
我应该是

489
00:22:47,000 --> 00:22:50,000
但是我很小就被很多的调整过了

490
00:22:50,000 --> 00:22:52,000
所以我也搞不清楚

491
00:22:52,000 --> 00:22:55,000
究竟是左右都行还是纯左

492
00:22:55,000 --> 00:22:57,000
你现在是双朝首是吧

493
00:22:57,000 --> 00:22:58,000
没有

494
00:22:58,000 --> 00:23:00,000
就右边稍微顺一点

495
00:23:00,000 --> 00:23:03,000
左边还是能干很多比较需要力量的事情

496
00:23:03,000 --> 00:23:06,000
你居然能训练成右手比左手

497
00:23:06,000 --> 00:23:08,000
这个实在是

498
00:23:08,000 --> 00:23:09,000
天哪

499
00:23:09,000 --> 00:23:11,000
这不是压抑人性吗

500
00:23:11,000 --> 00:23:14,000
好嘛

501
00:23:14,000 --> 00:23:16,000
还刚才说到左右的键位的问题

502
00:23:16,000 --> 00:23:20,000
像韩文韩语他们在分配键位的时候

503
00:23:20,000 --> 00:23:22,000
他们就是左右搭配的

504
00:23:22,000 --> 00:23:25,000
他们把俯音全部分配在左手

505
00:23:25,000 --> 00:23:27,000
然后原音全部分配在右手

506
00:23:27,000 --> 00:23:29,000
所以他们在打韩文音节的时候

507
00:23:29,000 --> 00:23:31,000
他就俯音原音互相搭配

508
00:23:31,000 --> 00:23:33,000
肯定是左右这样搭配的

509
00:23:33,000 --> 00:23:35,000
效率很高

510
00:23:35,000 --> 00:23:37,000
左右左右左右左右

511
00:23:37,000 --> 00:23:39,000
差不多

512
00:23:39,000 --> 00:23:41,000
所以其实这个键位映射的时候

513
00:23:41,000 --> 00:23:44,000
是分配还是很需要一些技术的

514
00:23:44,000 --> 00:23:46,000
要不然的话到时候打字就很痛苦

515
00:23:46,000 --> 00:23:49,000
中文无比分配的时候有什么讲究吗

516
00:23:49,000 --> 00:23:51,000
好像也忘了

517
00:23:51,000 --> 00:23:54,000
没有中文无比就是从那些字根

518
00:23:54,000 --> 00:23:57,000
从 QWRTY 这么的分

519
00:23:57,000 --> 00:24:00,000
就没有什么讲究左右分布的这种问题

520
00:24:00,000 --> 00:24:02,000
没有他就直接

521
00:24:02,000 --> 00:24:04,000
好像还是有一些的

522
00:24:04,000 --> 00:24:07,000
我记得好像是中间区域是比较常用的一些

523
00:24:07,000 --> 00:24:10,000
就是还是离那个 Home Road

524
00:24:10,000 --> 00:24:13,000
最近的是最高频的

525
00:24:13,000 --> 00:24:15,000
然后还有一个通配服是 Z

526
00:24:15,000 --> 00:24:17,000
Z 什么都没有

527
00:24:17,000 --> 00:24:20,000
有个通配服

528
00:24:20,000 --> 00:24:22,000
行咱们是不是要整理一下

529
00:24:22,000 --> 00:24:24,000
就是说从键盘

530
00:24:24,000 --> 00:24:25,000
然后键位

531
00:24:25,000 --> 00:24:27,000
然后键位的映射

532
00:24:27,000 --> 00:24:29,000
这三个不同的东西

533
00:24:29,000 --> 00:24:32,000
大家都应该在先整理清楚才对

534
00:24:32,000 --> 00:24:33,000
OK

535
00:24:33,000 --> 00:24:35,000
首先键位

536
00:24:35,000 --> 00:24:37,000
先说布局

537
00:24:37,000 --> 00:24:40,000
我们接收的键盘有实体布局

538
00:24:40,000 --> 00:24:43,000
所谓实体布局就是你看到的键

539
00:24:43,000 --> 00:24:45,000
上面印着什么样的字母

540
00:24:45,000 --> 00:24:48,000
以及每个键的位置和形状是什么样的

541
00:24:48,000 --> 00:24:50,000
这个基本上是

542
00:24:50,000 --> 00:24:53,000
各个国家民族文化传统的一部分

543
00:24:53,000 --> 00:24:56,000
当他们西方国家出现打字机的时候

544
00:24:56,000 --> 00:24:59,000
每个国家的打字机的键位都是不一样的

545
00:24:59,000 --> 00:25:02,000
然后这个传统基本上就延续到了电脑时代

546
00:25:02,000 --> 00:25:04,000
当然有些国家因此就被坑了

547
00:25:04,000 --> 00:25:05,000
比如说

548
00:25:05,000 --> 00:25:10,000
我记得好像是波兰的键盘分为两种

549
00:25:10,000 --> 00:25:12,000
一种是

550
00:25:12,000 --> 00:25:13,000
对

551
00:25:13,000 --> 00:25:14,000
一种是

552
00:25:14,000 --> 00:25:17,000
北美传过来的 IBM 尖松机时代的键盘

553
00:25:17,000 --> 00:25:19,000
另一种是他们自己的波兰语键盘

554
00:25:19,000 --> 00:25:21,000
然后波兰语键盘就非常非常坑爹

555
00:25:21,000 --> 00:25:24,000
所有的程序员都选择了使用

556
00:25:24,000 --> 00:25:26,000
这个英语布局的键盘

557
00:25:26,000 --> 00:25:28,000
然后

558
00:25:28,000 --> 00:25:30,000
除了实体布局之外

559
00:25:30,000 --> 00:25:32,000
还有所谓的功能布局

560
00:25:32,000 --> 00:25:33,000
functional layout

561
00:25:33,000 --> 00:25:36,000
然后这一层布局是大部分时候

562
00:25:36,000 --> 00:25:38,000
对于这个世界上 99%的人来说

563
00:25:38,000 --> 00:25:40,000
如果你不是程序员

564
00:25:40,000 --> 00:25:43,000
然后你也对英语键盘没有特别的偏爱的话

565
00:25:43,000 --> 00:25:45,000
基本上

566
00:25:45,000 --> 00:25:47,000
功能布局就是你的实体布局

567
00:25:47,000 --> 00:25:51,000
就是你按下键盘上写的反斜杠键

568
00:25:51,000 --> 00:25:54,000
反斜杠键可能在你屏幕上就应该出现反斜杠

569
00:25:54,000 --> 00:25:56,000
但是就是对等的

570
00:25:56,000 --> 00:26:00,000
对但是在其实在几乎每个操作系统里面

571
00:26:00,000 --> 00:26:02,000
他都支持把你的

572
00:26:02,000 --> 00:26:05,000
实体布局映射到另外一个别的功能布局

573
00:26:05,000 --> 00:26:07,000
也就是你

574
00:26:07,000 --> 00:26:09,000
对于中文用户来说就是

575
00:26:09,000 --> 00:26:12,000
你在中英输入法和英文输入法之间切换的时候

576
00:26:12,000 --> 00:26:15,000
其实理论上是切换了一个功能布局的

577
00:26:15,000 --> 00:26:17,000
只不过对于拼输输入法来说

578
00:26:17,000 --> 00:26:19,000
除了功能布局之外

579
00:26:19,000 --> 00:26:21,000
上面还有一层输入法

580
00:26:21,000 --> 00:26:24,000
然后但是对于其他语言的人来说

581
00:26:24,000 --> 00:26:27,000
比如说当我在一个德语键盘上编程的时候

582
00:26:27,000 --> 00:26:31,000
如果我觉得这个布局实在是太坑爹了

583
00:26:31,000 --> 00:26:35,000
那我可以选择说让操作系统把功能布局设定为英文

584
00:26:35,000 --> 00:26:38,000
这样当我在按比如说德语的那个

585
00:26:38,000 --> 00:26:40,000
O 上的加量调

586
00:26:40,000 --> 00:26:43,000
这个键的时候它会变成分号

587
00:26:43,000 --> 00:26:46,000
这个会省一部分事

588
00:26:46,000 --> 00:26:48,000
但是有些键的位置还是不一样

589
00:26:48,000 --> 00:26:51,000
比如说那个反斜杠在英文布局上应该是在

590
00:26:51,000 --> 00:26:52,000
Enter 键的上面

591
00:26:52,000 --> 00:26:56,000
但是在德语键盘上反斜杠还是在左边的 shift 的右边

592
00:26:56,000 --> 00:26:59,000
然后就是你可以改功能布局

593
00:26:59,000 --> 00:27:03,000
但是实体布局还是会限制这个功能布局

594
00:27:03,000 --> 00:27:05,000
到底能改成一个什么情况

595
00:27:05,000 --> 00:27:09,000
因为实体布局和你的物理上面你看到的键帽上面

596
00:27:09,000 --> 00:27:10,000
印的那个字是一样的

597
00:27:10,000 --> 00:27:12,000
所以还好一点

598
00:27:12,000 --> 00:27:14,000
但是当你改完功能布局的时候

599
00:27:14,000 --> 00:27:19,000
你实际上按的那个键和键帽上面那个字是不一样的

600
00:27:19,000 --> 00:27:21,000
因为你功能布局改掉了

601
00:27:21,000 --> 00:27:23,000
所以我突然理解一件事

602
00:27:23,000 --> 00:27:27,000
那个 HCKB 从日本出来是有道理的

603
00:27:27,000 --> 00:27:33,000
无刻印键盘其实在 HCKB 之前就有

604
00:27:33,000 --> 00:27:36,000
但那个好像也是一个

605
00:27:36,000 --> 00:27:39,000
应该也是个 NC 的键盘

606
00:27:40,000 --> 00:27:45,000
但 HCKB 的确是无刻印键盘里面最知名的一个

607
00:27:45,000 --> 00:27:48,000
就你那款是无刻印的吧?

608
00:27:48,000 --> 00:27:49,000
那当然了

609
00:27:49,000 --> 00:27:51,000
这样我就不用发愁了

610
00:27:51,000 --> 00:27:53,000
到底是德语还是英语

611
00:27:53,000 --> 00:27:57,000
只要键帽上没有刻字之后

612
00:27:57,000 --> 00:28:01,000
你就可以随意的去调整你的那个键位印设

613
00:28:01,000 --> 00:28:04,000
这样你就可以忽略掉这个

614
00:28:04,000 --> 00:28:09,000
这个就是什么实体键位和系统里面键位的差异了吗?

615
00:28:09,000 --> 00:28:13,000
但换句话说做一个强迫症你会活得稍微舒服一点

616
00:28:13,000 --> 00:28:15,000
你还要打个岔一个事

617
00:28:15,000 --> 00:28:18,000
你可以把他的键帽拔下来交换一下位置

618
00:28:18,000 --> 00:28:20,000
我就这么干的

619
00:28:20,000 --> 00:28:23,000
我再用一款带刻印的 HCKB

620
00:28:23,000 --> 00:28:26,000
我把那个 ESC 键盒最右边的那个

621
00:28:26,000 --> 00:28:27,000
那个叫什么键

622
00:28:27,000 --> 00:28:28,000
那个一个点

623
00:28:28,000 --> 00:28:30,000
对

624
00:28:30,000 --> 00:28:33,000
就把那两个位置换一下

625
00:28:33,000 --> 00:28:34,000
天

626
00:28:34,000 --> 00:28:36,000
纯手工

627
00:28:36,000 --> 00:28:38,000
我不知道你们实际上

628
00:28:38,000 --> 00:28:41,000
实际有没有遇到过就不用这个 QWERTY 布局的

629
00:28:41,000 --> 00:28:44,000
用过什么德沃夏克那个布局的那个

630
00:28:44,000 --> 00:28:45,000
我没有

631
00:28:45,000 --> 00:28:47,000
我有一个我的同事在用

632
00:28:47,000 --> 00:28:52,000
或者说我在直属 Team Leader 在用德沃夏克的布局

633
00:28:54,000 --> 00:28:57,000
我觉得他们就是特别特别惨

634
00:28:57,000 --> 00:28:58,000
会吗?就是每次

635
00:28:58,000 --> 00:29:00,000
他自己用他自己的设备的话好

636
00:29:00,000 --> 00:29:02,000
要是他要用别人设备他每次都得换

637
00:29:02,000 --> 00:29:03,000
还是干什么

638
00:29:03,000 --> 00:29:04,000
他还是得强迫的去

639
00:29:04,000 --> 00:29:07,000
因为这个世界上毕竟 QWERTY 比较多吗

640
00:29:07,000 --> 00:29:10,000
我觉得德沃夏克并没有快到哪去

641
00:29:10,000 --> 00:29:12,000
我觉得也是

642
00:29:12,000 --> 00:29:14,000
这个习惯问题估计是

643
00:29:14,000 --> 00:29:16,000
如果说你你你

644
00:29:16,000 --> 00:29:21,000
我们认同那个说高频件要离 Home 肉比较近的话

645
00:29:21,000 --> 00:29:25,000
其实应该就是德沃夏克他的一个逻辑就是这样

646
00:29:25,000 --> 00:29:26,000
他的高频件比较好

647
00:29:26,000 --> 00:29:30,000
就是他分布从从那个盖统计盖了下来讲

648
00:29:30,000 --> 00:29:33,000
比较高频率的集中在那个 Home 肉附近嘛

649
00:29:34,000 --> 00:29:38,000
然后这个高频件是跟和语言相关的

650
00:29:38,000 --> 00:29:39,000
没错

651
00:29:39,000 --> 00:29:42,000
和语言相关和你的这个打的文本相关的

652
00:29:42,000 --> 00:29:44,000
所以理论上应该是用一个无刻印的键盘

653
00:29:44,000 --> 00:29:47,000
然后分析你打过的所有的那个这个就是

654
00:29:47,000 --> 00:29:48,000
基建历史

655
00:29:48,000 --> 00:29:50,000
然后重新统计一下这个频率

656
00:29:50,000 --> 00:29:53,000
然后再来排一个适合你的这个 Layout

657
00:29:54,000 --> 00:29:56,000
你的你的专属 Layout 好吧

658
00:29:56,000 --> 00:30:00,000
从你的专属从你的专属字体到你的专属输入法

659
00:30:00,000 --> 00:30:03,000
然后现在就是每个人都有自己的键位

660
00:30:03,000 --> 00:30:04,000
这个就傻掉了

661
00:30:04,000 --> 00:30:05,000
没法通用

662
00:30:08,000 --> 00:30:12,000
如果大家对这个功能布局是不大熟悉的话

663
00:30:12,000 --> 00:30:15,000
如果大家可以其实到操作系统上看一下

664
00:30:15,000 --> 00:30:18,000
在键盘的那个属性上面

665
00:30:18,000 --> 00:30:19,000
它有各种文字

666
00:30:19,000 --> 00:30:20,000
然后呢

667
00:30:20,000 --> 00:30:21,000
它有各种各样的那个

668
00:30:21,000 --> 00:30:24,000
可能如果不注意这个功能的朋友

669
00:30:24,000 --> 00:30:26,000
他们从来就没有见过其他布局

670
00:30:26,000 --> 00:30:27,000
所以呢去看一下

671
00:30:27,000 --> 00:30:29,000
看那个设置下就可以知道

672
00:30:29,000 --> 00:30:30,000
非常有意思

673
00:30:30,000 --> 00:30:31,000
Windows 有吗

674
00:30:31,000 --> 00:30:32,000
也有

675
00:30:32,000 --> 00:30:33,000
也有

676
00:30:33,000 --> 00:30:34,000
有的

677
00:30:34,000 --> 00:30:35,000
反正你在

678
00:30:35,000 --> 00:30:39,000
如果你在 OS X 里面那个改变那个输入员的名称的时候

679
00:30:39,000 --> 00:30:41,000
它会给你一个

680
00:30:41,000 --> 00:30:44,000
那个这个输入员看起来键盘的布局大概是什么样子

681
00:30:45,000 --> 00:30:48,000
对它直接会把那个那个键盘的显示出来

682
00:30:48,000 --> 00:30:49,000
对吧

683
00:30:49,000 --> 00:30:50,000
连那个键位都会显示出来

684
00:30:50,000 --> 00:30:52,000
它好像 Windows 有吗

685
00:30:53,000 --> 00:30:55,000
Windows 在那个输入法里面也可以调

686
00:30:55,000 --> 00:30:57,000
但是挺麻烦的

687
00:30:57,000 --> 00:30:59,000
但是它会不会显示这个键位就知道了

688
00:30:59,000 --> 00:31:00,000
但是好像没有键位预览吧

689
00:31:00,000 --> 00:31:02,000
这个没有了

690
00:31:02,000 --> 00:31:06,000
对键位预览应该是只限于系统自带的那些输入法

691
00:31:06,000 --> 00:31:07,000
不是

692
00:31:07,000 --> 00:31:08,000
就是在 OS X

693
00:31:08,000 --> 00:31:13,000
键位预览首先你得先和你的那个键盘的那个形状要保持一致嘛

694
00:31:13,000 --> 00:31:15,000
Windows 那么多奇形怪状的键盘

695
00:31:15,000 --> 00:31:17,000
它可能没法做预览吧

696
00:31:18,000 --> 00:31:19,000
好吧

697
00:31:19,000 --> 00:31:20,000
原来坑在这

698
00:31:20,000 --> 00:31:23,000
主要你看那个 OS X 里面的那个键位预览

699
00:31:23,000 --> 00:31:25,000
它其实画的是一个标准的这个

700
00:31:25,000 --> 00:31:28,000
就 Mac 蓝牙键盘的那种那种那种结构嘛

701
00:31:29,000 --> 00:31:32,000
就以你现在使用的那个这个

702
00:31:32,000 --> 00:31:34,000
我现在用 MacBook

703
00:31:34,000 --> 00:31:35,000
MacBook Pro

704
00:31:35,000 --> 00:31:38,000
我现在的这个键位为基础的映射

705
00:31:38,000 --> 00:31:39,000
吴涛你要可能看一下

706
00:31:39,000 --> 00:31:40,000
你看一下你

707
00:31:40,000 --> 00:31:42,000
你是买了一块那个叫什么

708
00:31:42,000 --> 00:31:44,000
最新的那个蓝牙键盘是不是

709
00:31:44,000 --> 00:31:46,000
我买了这块键盘是英语布局

710
00:31:46,000 --> 00:31:48,000
不不不但是就是是最新的

711
00:31:48,000 --> 00:31:51,000
不是那个插电池的是自带电池的那个对吧

712
00:31:51,000 --> 00:31:52,000
对没错

713
00:31:52,000 --> 00:31:54,000
然后你看一下那个键位预览里面

714
00:31:54,000 --> 00:31:56,000
它的那个方向键是什么形式

715
00:31:56,000 --> 00:31:58,000
倒梯子形吗还是怎么样

716
00:31:58,000 --> 00:32:01,000
没错是两个被缩小的键

717
00:32:01,000 --> 00:32:04,000
所以它就是使用我当前那个键盘的确

718
00:32:04,000 --> 00:32:05,000
OK

719
00:32:05,000 --> 00:32:07,000
然后就它只要是自己

720
00:32:07,000 --> 00:32:09,000
自己的东西的话都是那样的没错

721
00:32:09,000 --> 00:32:11,000
等一下好像有个不一样

722
00:32:11,000 --> 00:32:13,000
现在最新的那个自带电池的

723
00:32:13,000 --> 00:32:18,000
就是内置电池那个苹果蓝牙键盘的那个方向键的左右是全高的了

724
00:32:18,000 --> 00:32:19,000
不是半高的了

725
00:32:19,000 --> 00:32:20,000
是全高了是全高了

726
00:32:20,000 --> 00:32:24,000
我在这个键盘搜索图上看到也是全高的

727
00:32:24,000 --> 00:32:27,000
对但我看到的我以为我是那个是上一代的吗

728
00:32:27,000 --> 00:32:29,000
我看是半高的左右键

729
00:32:29,000 --> 00:32:33,000
当前设备的样子画出来

730
00:32:33,000 --> 00:32:38,000
我没有发现那个细节这个可以给果粉果粉们去吹一下

731
00:32:38,000 --> 00:32:39,000
可以发给那个什么

732
00:32:39,000 --> 00:32:40,000
你说

733
00:32:40,000 --> 00:32:43,000
Tiny little little details 什么那个网站叫什么来的

734
00:32:43,000 --> 00:32:49,000
不知道有个网站专门去去搜集这种设计上的小新色

735
00:32:49,000 --> 00:32:51,000
OK

736
00:32:51,000 --> 00:32:56,000
所以就是苹果它能做预览就是因为它知道你接有的是哪个设备

737
00:32:56,000 --> 00:32:59,000
然后它知道那个设备的这个键位的实际的布局

738
00:32:59,000 --> 00:33:02,000
然后再给你叠上去你会觉得没有什么意外吗

739
00:33:02,000 --> 00:33:04,000
对

740
00:33:04,000 --> 00:33:07,000
所以这个时候想起那些就是现在不是有一些游戏键盘上面

741
00:33:07,000 --> 00:33:09,000
它是那个那个键帽它没有刻字

742
00:33:09,000 --> 00:33:12,000
它是一个它是一个小的 LED 屏幕嘛

743
00:33:12,000 --> 00:33:15,000
哦之前叫什么

744
00:33:15,000 --> 00:33:19,000
叫一个很高大上的名字什么 Prime Optimus 之类的

745
00:33:19,000 --> 00:33:24,000
反正就这类就它每个等于是每个按键的就是一个小屏幕

746
00:33:24,000 --> 00:33:27,000
它可以你可以根据编程的方式改变它上面显示的内容

747
00:33:27,000 --> 00:33:30,000
这样就解决了刻印没法变换

748
00:33:30,000 --> 00:33:33,000
但是没有刻印有时候又看一下不方便难题

749
00:33:34,000 --> 00:33:36,000
对而且那个键盘是彩色的

750
00:33:36,000 --> 00:33:39,000
然后可以比如说你在用 photoshop 的时候

751
00:33:39,000 --> 00:33:43,000
直接在那个键上显示这对应于 photoshop 的那个功能

752
00:33:43,000 --> 00:33:47,000
对对对没错或者是一个缩略图之类的挺帅气的

753
00:33:47,000 --> 00:33:50,000
对但后来我记那个键盘只是量产的

754
00:33:50,000 --> 00:33:54,000
其实限量版的就大概出了一千两千富这样

755
00:33:54,000 --> 00:33:57,000
太贵了吧你每个键盘都要做一个小屏幕

756
00:33:57,000 --> 00:34:00,000
每个键每个按键都做小屏幕其实挺麻烦的

757
00:34:00,000 --> 00:34:04,000
我觉得我们有点朝这个键盘恐慌的

758
00:34:04,000 --> 00:34:08,000
这个是一个文字书的基础

759
00:34:08,000 --> 00:34:11,000
刚才说了一些我们都是讲的实际的键盘怎么样

760
00:34:11,000 --> 00:34:15,000
那你没有想过在那个现在触屏上那个软键盘是不是就没有这个问题

761
00:34:15,000 --> 00:34:20,000
其实对软件盘其实要比实际键盘简单很多

762
00:34:20,000 --> 00:34:21,000
它只是一个

763
00:34:21,000 --> 00:34:24,000
在或者在实现原理上要简单很多

764
00:34:24,000 --> 00:34:28,000
它不存在那个键盘的什么叫做扫描码是不是

765
00:34:28,000 --> 00:34:32,000
我一直没有理解这个概念到底怎么一回事

766
00:34:32,000 --> 00:34:36,000
对啊您把扫描码这个东西跟大家解释解释

767
00:34:36,000 --> 00:34:40,000
好吧其实键盘本身是一个非常复杂的数模转换系统

768
00:34:40,000 --> 00:34:45,000
就是你把魔术转换系统应该叫对

769
00:34:45,000 --> 00:34:48,000
其实每个键盘都是一台非常小的计算机

770
00:34:48,000 --> 00:34:52,000
因为每一个键盘在尤其是 USB 键盘

771
00:34:52,000 --> 00:34:55,000
在这个按下键之后把会需要一个芯片

772
00:34:55,000 --> 00:35:01,000
把按下的键的电讯号转化成计算机能懂的一个码

773
00:35:01,000 --> 00:35:02,000
然后这个码就叫扫描码

774
00:35:02,000 --> 00:35:03,000
它为什么叫扫描码

775
00:35:03,000 --> 00:35:07,000
就是因为在键盘里面的这颗芯片

776
00:35:07,000 --> 00:35:11,000
它所做的事情就是去扫描一个

777
00:35:11,000 --> 00:35:15,000
是八成多少的网格

778
00:35:15,000 --> 00:35:18,000
然后所谓扫描的

779
00:35:18,000 --> 00:35:19,000
它的确就是网格吧

780
00:35:19,000 --> 00:35:21,000
横纵多少列的对吧

781
00:35:21,000 --> 00:35:22,000
就是那一个网格

782
00:35:22,000 --> 00:35:23,000
对我忘了具体的数字

783
00:35:23,000 --> 00:35:28,000
但是基本上就是先看第一排

784
00:35:28,000 --> 00:35:30,000
然后第一排把每一列扫一遍

785
00:35:30,000 --> 00:35:32,000
然后看第二排再把每一列扫一遍

786
00:35:32,000 --> 00:35:34,000
然后这个扫描的速度非常快的

787
00:35:34,000 --> 00:35:35,000
像电视一样

788
00:35:35,000 --> 00:35:39,000
你以为自己同时按下了两个键

789
00:35:39,000 --> 00:35:41,000
然后计算机上也说好吧

790
00:35:41,000 --> 00:35:42,000
你同时按下两个键

791
00:35:42,000 --> 00:35:44,000
但实际上这个过程是

792
00:35:44,000 --> 00:35:48,000
它先看第一排的第六列

793
00:35:48,000 --> 00:35:49,000
然后被按下来

794
00:35:49,000 --> 00:35:52,000
然后它扫描到第二排的第七列

795
00:35:52,000 --> 00:35:53,000
发现也被按下了

796
00:35:53,000 --> 00:35:54,000
然后它会说好

797
00:35:54,000 --> 00:35:56,000
这个用户同时按了两个键

798
00:35:56,000 --> 00:35:58,000
那实际上这一切都是顺序发生的

799
00:35:58,000 --> 00:36:01,000
然后这个过程就叫做扫描

800
00:36:01,000 --> 00:36:03,000
然后这个过程扫下来的一个位置

801
00:36:03,000 --> 00:36:06,000
会被转化成一个操作系统可以懂

802
00:36:06,000 --> 00:36:07,000
不是操作系统可以懂

803
00:36:07,000 --> 00:36:10,000
主板可以懂的电讯号

804
00:36:10,000 --> 00:36:13,000
然后这个电讯号本身就叫做扫描

805
00:36:13,000 --> 00:36:17,000
而且很关键就是在这个步骤的时候

806
00:36:17,000 --> 00:36:18,000
还不知道是什么字

807
00:36:18,000 --> 00:36:22,000
只是这个位置的那个点阵位置的那个键

808
00:36:22,000 --> 00:36:25,000
被按下去这个信号被传过去了对吧

809
00:36:25,000 --> 00:36:28,000
然后是由计算机操作系统来决定

810
00:36:28,000 --> 00:36:31,000
按下去的这个这个码

811
00:36:31,000 --> 00:36:32,000
到底代表什么字符的

812
00:36:32,000 --> 00:36:34,000
这已经是一层硬设了

813
00:36:34,000 --> 00:36:37,000
对于绝大多数键盘来说

814
00:36:37,000 --> 00:36:39,000
这是有一个标准的

815
00:36:39,000 --> 00:36:40,000
尤其是在 PS 2 时代

816
00:36:40,000 --> 00:36:45,000
我们的年龄小的听众可能没有见过 PS 2 是什么样的

817
00:36:45,000 --> 00:36:48,000
PS 2 是一个看起来很奇怪的接口

818
00:36:48,000 --> 00:36:50,000
然后这个接口有意义

819
00:36:50,000 --> 00:36:54,000
我当时应该是支持三套不同的扫描码

820
00:36:54,000 --> 00:36:57,000
就是根据主板和操作系统的要求

821
00:36:57,000 --> 00:37:01,000
它可以送三种不同的扫描码来

822
00:37:01,000 --> 00:37:04,000
但是基本上后来就归一成一种了

823
00:37:04,000 --> 00:37:06,000
然后在这个扫描码里面我记得

824
00:37:06,000 --> 00:37:11,000
之前不是有什么 Ctrl 改 Caps Lock

825
00:37:11,000 --> 00:37:13,000
你要把 Caps Lock 改成 Ctrl 键的话

826
00:37:13,000 --> 00:37:15,000
你要去在操作系统层面

827
00:37:15,000 --> 00:37:18,000
尤其是在 Windows 里面你要把两个扫描码兑换

828
00:37:18,000 --> 00:37:22,000
比如说 3 A 代表 Ctrl,1 D

829
00:37:22,000 --> 00:37:24,000
这都是有禁止的数字

830
00:37:24,000 --> 00:37:26,000
代表 Caps Lock

831
00:37:26,000 --> 00:37:28,000
然后你把这两个扫描码换一下

832
00:37:28,000 --> 00:37:32,000
你就会发现你按下去的 Caps Lock 变成了 Ctrl

833
00:37:32,000 --> 00:37:33,000
其实就是这么来的

834
00:37:33,000 --> 00:37:36,000
但是后来到了 USB 时代

835
00:37:36,000 --> 00:37:42,000
绝大部分的 USB 键盘都支持所谓 human

836
00:37:42,000 --> 00:37:45,000
Interface Device Protocol

837
00:37:45,000 --> 00:37:47,000
然后在这个 Protocol 里面就规定了说

838
00:37:47,000 --> 00:37:50,000
在 USB 上传来一个什么样的信号

839
00:37:50,000 --> 00:37:53,000
对应于一个什么样的按键

840
00:37:53,000 --> 00:37:56,000
或者对应一个什么样的扫描码

841
00:37:56,000 --> 00:38:00,000
这套扫描码跟 PS 2 时代是不兼容的

842
00:38:00,000 --> 00:38:08,000
但是蓝牙键盘则直接就是把 USB 的这一套 HID 的编码套用过去了

843
00:38:08,000 --> 00:38:12,000
所以在某种程度上你的蓝牙键盘其实是一个 USB 键盘

844
00:38:12,000 --> 00:38:18,000
在解码这一块是完全按照一个 USB 的 human interface device 来解码

845
00:38:18,000 --> 00:38:21,000
大概就是扫描码的概念

846
00:38:21,000 --> 00:38:26,000
所以它的码位最后就是传到主板以后

847
00:38:26,000 --> 00:38:31,000
然后再根据刚才说的键盘 Mapping

848
00:38:31,000 --> 00:38:35,000
然后再来让操作系统知道它打下去是什么字

849
00:38:35,000 --> 00:38:40,000
其实操作系统决定说你按了这个键对应了一个什么样的字符

850
00:38:40,000 --> 00:38:42,000
对 由操作系统来定

851
00:38:45,000 --> 00:38:48,000
好了 我们终于可以把这个信息传到操作系统

852
00:38:48,000 --> 00:38:51,000
操作系统接下来做什么事情

853
00:38:52,000 --> 00:38:56,000
操作系统接下来要做的一件事情实际上是

854
00:38:56,000 --> 00:39:01,000
跟键盘扫码码没有太多的关联

855
00:39:01,000 --> 00:39:03,000
我应该这么说吧

856
00:39:06,000 --> 00:39:11,000
我们刚才介绍了说从键盘传一个字符到操作系统

857
00:39:11,000 --> 00:39:13,000
然后现在操作系统其实面临一个问题

858
00:39:13,000 --> 00:39:15,000
就是操作系统要把这个字符显示出来

859
00:39:15,000 --> 00:39:18,000
或者说要把它存在内存里面

860
00:39:18,000 --> 00:39:22,000
这又涉及到另外一套编码的问题

861
00:39:22,000 --> 00:39:29,000
就是你以一个什么样的规则来告诉一块内存的区域

862
00:39:29,000 --> 00:39:33,000
或者是一个硬盘上的一个小区域说

863
00:39:33,000 --> 00:39:35,000
我要把这个 A 存下来

864
00:39:35,000 --> 00:39:38,000
这个时候其实是涉及到文字编码

865
00:39:38,000 --> 00:39:42,000
但是文字编码跟键盘扫描码其实完全不相干

866
00:39:44,000 --> 00:39:47,000
键盘扫描码就是为了键盘对吧

867
00:39:47,000 --> 00:39:53,000
对 键盘扫描码是为了计算机知道用户按下了什么字符

868
00:39:53,000 --> 00:39:56,000
但是接下来讨论文件编码

869
00:39:56,000 --> 00:40:04,000
这是要让计算机决定在存储某一个字符的时候

870
00:40:04,000 --> 00:40:08,000
应该把它存成什么样的形式

871
00:40:08,000 --> 00:40:13,000
或者说用哪个数字来代表这个字符

872
00:40:13,000 --> 00:40:17,000
然后在早期也是有很多种字符存在

873
00:40:17,000 --> 00:40:21,000
比如说 IBM 有一种自己的字符

874
00:40:21,000 --> 00:40:24,000
自己的字符叫什么

875
00:40:24,000 --> 00:40:26,000
Q 什么编码

876
00:40:26,000 --> 00:40:33,000
但是基本上现在最通用的一个或者最基本的一个编码就是 ASCII 编码

877
00:40:33,000 --> 00:40:39,000
我相信可能很多朋友在学编程的时候都背过这个码表

878
00:40:39,000 --> 00:40:42,000
包括我也背过但是我现在已经忘光了

879
00:40:42,000 --> 00:40:44,000
97 是什么

880
00:40:44,000 --> 00:40:46,000
97 好耳熟啊

881
00:40:46,000 --> 00:40:48,000
应该是字母 B 吧

882
00:40:48,000 --> 00:40:51,000
是吗不是 A 吗

883
00:40:51,000 --> 00:40:53,000
97 减 A 吗

884
00:40:53,000 --> 00:40:57,000
但是也是背了好几个最常字的

885
00:40:57,000 --> 00:40:59,000
我只记得 65 是 A

886
00:40:59,000 --> 00:41:02,000
但是 65 加大小写

887
00:41:02,000 --> 00:41:04,000
大小写吗

888
00:41:04,000 --> 00:41:05,000
对 65 是大写的 A

889
00:41:05,000 --> 00:41:09,000
但是 97 减 65 好像不是

890
00:41:09,000 --> 00:41:13,000
对大写和小写之间还有一堆特殊符号

891
00:41:13,000 --> 00:41:15,000
有所以不一样

892
00:41:15,000 --> 00:41:16,000
97 减 65 是 32

893
00:41:16,000 --> 00:41:18,000
所以应该的确是小写

894
00:41:18,000 --> 00:41:23,000
因为 ASCII 的码 ASCII 表其实也挺巧妙的

895
00:41:23,000 --> 00:41:26,000
如果你遇到一个键盘

896
00:41:26,000 --> 00:41:27,000
如果你遇到一个码的话

897
00:41:27,000 --> 00:41:30,000
你把第五位如果是零你把它变成一

898
00:41:30,000 --> 00:41:34,000
就可以让它变成小写字母

899
00:41:34,000 --> 00:41:36,000
在当初的这个

900
00:41:36,000 --> 00:41:40,000
很多人还在操作比特时代的时候

901
00:41:40,000 --> 00:41:42,000
这是一个非常重要的 feature

902
00:41:43,000 --> 00:41:47,000
所以实境制 97 是 ASCII 的小写字母 A

903
00:41:47,000 --> 00:41:49,000
没错我查了

904
00:41:49,000 --> 00:41:52,000
还好我说对了

905
00:41:52,000 --> 00:41:54,000
好紧张

906
00:41:54,000 --> 00:41:56,000
好紧张

907
00:41:56,000 --> 00:41:58,000
你们紧张是吗

908
00:41:58,000 --> 00:42:02,000
其实计算机里面有非常多这种

909
00:42:02,000 --> 00:42:05,000
背下来很屌

910
00:42:05,000 --> 00:42:07,000
但是好像平时没有什么用处的知识

911
00:42:07,000 --> 00:42:09,000
对其实没有什么卵用

912
00:42:09,000 --> 00:42:11,000
还是有点用的

913
00:42:11,000 --> 00:42:17,000
你看你现在做很多这种网络协议的解析的时候

914
00:42:17,000 --> 00:42:23,000
你看到那个 16 进制 hex 的方式表达的数据包的时候

915
00:42:23,000 --> 00:42:25,000
你看到 97

916
00:42:25,000 --> 00:42:26,000
马上要出那个

917
00:42:26,000 --> 00:42:29,000
你就知道后面可能是一个 printable characters

918
00:42:29,000 --> 00:42:31,000
就是有东西要写出来

919
00:42:31,000 --> 00:42:33,000
97 是 10 进制

920
00:42:33,000 --> 00:42:36,000
你要先把他的 16 进制背下来才对

921
00:42:36,000 --> 00:42:37,000
对

922
00:42:37,000 --> 00:42:38,000
对

923
00:42:38,000 --> 00:42:40,000
16 进制是 61

924
00:42:43,000 --> 00:42:44,000
好了

925
00:42:44,000 --> 00:42:46,000
我们不要这么 punctual 了

926
00:42:48,000 --> 00:42:50,000
但 ASCII 当然也知道

927
00:42:50,000 --> 00:42:51,000
肉眼解析了吗

928
00:42:51,000 --> 00:42:53,000
有一个 8 位和 7 位的问题

929
00:42:53,000 --> 00:42:58,000
就是我们一个 byte 是 256 个可能性

930
00:42:58,000 --> 00:43:00,000
就 8 个位的 bit

931
00:43:00,000 --> 00:43:03,000
但 ASCII 只用了其中的 7 个位

932
00:43:03,000 --> 00:43:06,000
就还顶上那个高位其实还有点讲究的

933
00:43:06,000 --> 00:43:07,000
对

934
00:43:07,000 --> 00:43:10,000
就因为还多出来这一位

935
00:43:10,000 --> 00:43:13,000
这一位最开始是为了扩展准备的

936
00:43:13,000 --> 00:43:14,000
对

937
00:43:14,000 --> 00:43:18,000
就有很多拉丁文字都可以通过这一位的方法

938
00:43:18,000 --> 00:43:23,000
来把他们的一些就是字母表的大部分表达出来

939
00:43:23,000 --> 00:43:25,000
比如德文就是这样的方式来实现对吧

940
00:43:25,000 --> 00:43:26,000
对

941
00:43:26,000 --> 00:43:29,000
其实西欧所有语言都可以用这种方式来实现

942
00:43:30,000 --> 00:43:31,000
就只要他

943
00:43:31,000 --> 00:43:32,000
就只要他

944
00:43:32,000 --> 00:43:33,000
就只要他

945
00:43:33,000 --> 00:43:34,000
对

946
00:43:34,000 --> 00:43:36,000
基本上所有语言都

947
00:43:38,000 --> 00:43:40,000
所以他的原理就是

948
00:43:40,000 --> 00:43:42,000
那一位是空着的

949
00:43:42,000 --> 00:43:44,000
如果那一位空着的就是普通

950
00:43:44,000 --> 00:43:48,000
就落回到普通的 ASCII 这个原来的一个码表

951
00:43:48,000 --> 00:43:49,000
对吧

952
00:43:49,000 --> 00:43:51,000
然后那位一空上去以后

953
00:43:51,000 --> 00:43:53,000
然后就可以扩展成其他各种

954
00:43:53,000 --> 00:43:56,000
因为当年是各个国家还不一样嘛

955
00:43:56,000 --> 00:43:57,000
所以各种各样

956
00:43:57,000 --> 00:43:58,000
刚才也说了嘛

957
00:43:58,000 --> 00:44:03,000
所以日本的话他就是把这个扩展为他当年的半角片假名

958
00:44:04,000 --> 00:44:05,000
对

959
00:44:05,000 --> 00:44:07,000
只有片假名

960
00:44:07,000 --> 00:44:09,000
只有片假名

961
00:44:09,000 --> 00:44:12,000
因为他只多出了 128 个位子嘛

962
00:44:12,000 --> 00:44:14,000
你也放不了多少字符进去

963
00:44:17,000 --> 00:44:18,000
好吧

964
00:44:18,000 --> 00:44:22,000
但是好像五十英图片假名全假名

965
00:44:22,000 --> 00:44:25,000
片假名平假名这一套的话也差不多了

966
00:44:29,000 --> 00:44:30,000
所以那个

967
00:44:30,000 --> 00:44:33,000
因为片假名应该没有什么半角的需求吧

968
00:44:34,000 --> 00:44:35,000
是吧

969
00:44:35,000 --> 00:44:39,000
在实验中应该经常用这个标准半角显示的

970
00:44:39,000 --> 00:44:41,000
只有片假名会比较多一点

971
00:44:42,000 --> 00:44:45,000
我觉得可能也是因为那个时候只用外来语

972
00:44:46,000 --> 00:44:48,000
写的情况也比较多

973
00:44:49,000 --> 00:44:50,000
就是当年

974
00:44:50,000 --> 00:44:51,000
跟排版方式

975
00:44:51,000 --> 00:44:53,000
就像写电报的时候吧

976
00:44:53,000 --> 00:44:54,000
写电报的时候

977
00:44:54,000 --> 00:44:56,000
日本传统的电报就全是都用片假名的

978
00:44:56,000 --> 00:44:58,000
而且比如说他有着音点嘛

979
00:44:58,000 --> 00:45:00,000
加个着音点就变成 Ga 嘛

980
00:45:00,000 --> 00:45:01,000
着音点呢

981
00:45:01,000 --> 00:45:04,000
他就是着音点是另外一个字符

982
00:45:05,000 --> 00:45:07,000
所以他是两个字就变成

983
00:45:08,000 --> 00:45:09,000
所以这里有一个问题

984
00:45:09,000 --> 00:45:12,000
就是像日文这种情况比较特殊吧

985
00:45:12,000 --> 00:45:14,000
就是他同样一个意思

986
00:45:14,000 --> 00:45:16,000
他可以用几套不同的方式来表达对吧

987
00:45:18,000 --> 00:45:20,000
就是比如说有各种不同的

988
00:45:20,000 --> 00:45:21,000
有用汉字写的话

989
00:45:21,000 --> 00:45:24,000
你也可以用什么各种假名的方式来写的

990
00:45:24,000 --> 00:45:26,000
天皇诏书不是只用片假名写吗

991
00:45:27,000 --> 00:45:29,000
天皇诏书没有

992
00:45:29,000 --> 00:45:31,000
就是当时就是用汉文

993
00:45:32,000 --> 00:45:33,000
汉字

994
00:45:33,000 --> 00:45:35,000
就日本汉字加片假名

995
00:45:36,000 --> 00:45:37,000
这样写

996
00:45:38,000 --> 00:45:40,000
所以最开始那个就是电脑或者说

997
00:45:40,000 --> 00:45:41,000
打字机传入日本的时候

998
00:45:41,000 --> 00:45:44,000
因为汉字的一些毕竟表达起来没有那么方便

999
00:45:44,000 --> 00:45:48,000
他们就说是不是选择更加容易表达的这种假名的方式来写

1000
00:45:50,000 --> 00:45:52,000
因为假名是比较英文字嘛

1001
00:45:52,000 --> 00:45:55,000
所以在最早就是有电报的时候还之类的

1002
00:45:55,000 --> 00:45:57,000
至少要先把这个声音传过去嘛

1003
00:45:57,000 --> 00:45:58,000
就内容要传过去嘛

1004
00:45:59,000 --> 00:46:01,000
那正确的表记法那是

1005
00:46:01,000 --> 00:46:02,000
其次的问题嘛

1006
00:46:02,000 --> 00:46:04,000
所以呢就是他们就先

1007
00:46:04,000 --> 00:46:05,000
先把假名给放上去

1008
00:46:06,000 --> 00:46:08,000
那有一个问题这样就是说如果说

1009
00:46:09,000 --> 00:46:12,000
假设日本所有的日本汉字都可以用假名的方式来写

1010
00:46:13,000 --> 00:46:16,000
那还有什么必要再接着写那些更复杂的方式呢

1011
00:46:18,000 --> 00:46:20,000
这个好像用拼音写中文

1012
00:46:20,000 --> 00:46:21,000
有奇异的

1013
00:46:21,000 --> 00:46:22,000
很难读

1014
00:46:22,000 --> 00:46:24,000
就很难读有时候会有奇异

1015
00:46:27,000 --> 00:46:29,000
但是问题主要是

1016
00:46:29,000 --> 00:46:30,000
Ryo 这个问题是

1017
00:46:30,000 --> 00:46:32,000
汉字一开始就是一个外来语言

1018
00:46:32,000 --> 00:46:33,000
对于日本人来说

1019
00:46:34,000 --> 00:46:36,000
就在没有假名的时代

1020
00:46:36,000 --> 00:46:38,000
或者假名这个词怎么来呢

1021
00:46:38,000 --> 00:46:41,000
就是因为日本人用汉字来代表他们

1022
00:46:41,000 --> 00:46:42,000
固有语言的读音嘛

1023
00:46:42,000 --> 00:46:46,000
那所以反过来你可以说如果当初没有中国的话

1024
00:46:46,000 --> 00:46:49,000
那日本也可能今天是在用拉丁字母来表现

1025
00:46:49,000 --> 00:46:51,000
他们来表现其固有语言的读音

1026
00:46:51,000 --> 00:46:52,000
或者像韩语那样

1027
00:46:52,000 --> 00:46:54,000
日本人说不是必须的

1028
00:46:54,000 --> 00:46:55,000
明白明白

1029
00:46:55,000 --> 00:46:56,000
对

1030
00:46:56,000 --> 00:46:58,000
但韩语走的是另外一条路

1031
00:46:58,000 --> 00:46:59,000
韩语是

1032
00:46:59,000 --> 00:47:00,000
他自己发了一套

1033
00:47:01,000 --> 00:47:02,000
对是名正音来

1034
00:47:04,000 --> 00:47:07,000
来去表达其固有语言的读音

1035
00:47:07,000 --> 00:47:10,000
但问题韩语和日语最大的问题就是

1036
00:47:10,000 --> 00:47:12,000
他们有太多中文介词了

1037
00:47:12,000 --> 00:47:16,000
然后这个中文介词有可能是没有固有读音的

1038
00:47:16,000 --> 00:47:17,000
就没有迅读的

1039
00:47:17,000 --> 00:47:20,000
但你全靠印度的话就有可能产生

1040
00:47:20,000 --> 00:47:23,000
没有汉字就一定会产生奇异的问题

1041
00:47:24,000 --> 00:47:25,000
对

1042
00:47:25,000 --> 00:47:27,000
这个介是

1043
00:47:27,000 --> 00:47:28,000
介东西的介

1044
00:47:28,000 --> 00:47:30,000
不是那个 proposition 那个

1045
00:47:30,000 --> 00:47:31,000
那个介词

1046
00:47:32,000 --> 00:47:33,000
是假介的介

1047
00:47:34,000 --> 00:47:35,000
而且呢就

1048
00:47:35,000 --> 00:47:38,000
日本的他的那个原因太简单了

1049
00:47:38,000 --> 00:47:39,000
UFO 这五个原因

1050
00:47:39,000 --> 00:47:41,000
所以呢他的音系越简单

1051
00:47:41,000 --> 00:47:42,000
他的同音词就越多

1052
00:47:42,000 --> 00:47:44,000
这比 P 音还要严重吗

1053
00:47:44,000 --> 00:47:45,000
还多

1054
00:47:45,000 --> 00:47:46,000
还多

1055
00:47:46,000 --> 00:47:49,000
所以他们没有办法废除汉字

1056
00:47:49,000 --> 00:47:51,000
因为同音词实在是太多了

1057
00:47:51,000 --> 00:47:54,000
韩文呢还稍微好一点点

1058
00:47:54,000 --> 00:47:58,000
所以呢现在就是朝鲜和韩国他们就尽量是不写汉字

1059
00:47:59,000 --> 00:48:01,000
虽然他们的词都是汉字词

1060
00:48:01,000 --> 00:48:03,000
但是他们可以尽量不写汉字

1061
00:48:03,000 --> 00:48:05,000
只有在会发生奇异的时候

1062
00:48:05,000 --> 00:48:06,000
还要写人民地名的时候

1063
00:48:06,000 --> 00:48:09,000
他们会把那个原来的那个汉字写出来

1064
00:48:10,000 --> 00:48:12,000
这就是为什么很多韩国人的人民一开始

1065
00:48:12,000 --> 00:48:14,000
没出名之前和出名之后是不一样的

1066
00:48:14,000 --> 00:48:16,000
就是因为出名之后韩国人会站出来说

1067
00:48:16,000 --> 00:48:19,000
这个人的名字其实汉字写作什么什么

1068
00:48:20,000 --> 00:48:22,000
显得很有文化

1069
00:48:22,000 --> 00:48:23,000
还考了一下

1070
00:48:23,000 --> 00:48:25,000
日语好像也有这样的问题

1071
00:48:25,000 --> 00:48:28,000
就是有些人的名字没有汉字

1072
00:48:28,000 --> 00:48:29,000
只有假名

1073
00:48:29,000 --> 00:48:30,000
以前有什么

1074
00:48:31,000 --> 00:48:32,000
对

1075
00:48:32,000 --> 00:48:34,000
泽康汇礼乡

1076
00:48:34,000 --> 00:48:35,000
对

1077
00:48:35,000 --> 00:48:36,000
我记得有这么一个人

1078
00:48:36,000 --> 00:48:37,000
泽康汇礼乡

1079
00:48:37,000 --> 00:48:38,000
对

1080
00:48:39,000 --> 00:48:40,000
对

1081
00:48:40,000 --> 00:48:41,000
首先他的姓比较有意思

1082
00:48:41,000 --> 00:48:43,000
但是他的姓其实是汉字

1083
00:48:43,000 --> 00:48:45,000
就是日语里面就写着泽康两个字

1084
00:48:45,000 --> 00:48:48,000
然后汇礼乡是他刚出名的时候

1085
00:48:48,000 --> 00:48:49,000
中国人给他翻的

1086
00:48:49,000 --> 00:48:51,000
后来他专门进入中文市场了

1087
00:48:51,000 --> 00:48:55,000
他的那个经纪人才出来证明说

1088
00:48:55,000 --> 00:49:00,000
这个人的这个日本的汉字应该是泽康英龙华

1089
00:49:02,000 --> 00:49:06,000
英龙华是他专门为中国市场起的一个汉字

1090
00:49:06,000 --> 00:49:08,000
他之前的这个名只有假名

1091
00:49:09,000 --> 00:49:11,000
只有音没有字

1092
00:49:11,000 --> 00:49:13,000
所以要用什么字

1093
00:49:15,000 --> 00:49:16,000
这个我们越扯越远了

1094
00:49:16,000 --> 00:49:17,000
赶快说回来

1095
00:49:17,000 --> 00:49:19,000
我们刚才说的是编码的问题

1096
00:49:21,000 --> 00:49:23,000
所以 ASCII 有一个码

1097
00:49:23,000 --> 00:49:26,000
上面有一个位它是可以扩展的

1098
00:49:26,000 --> 00:49:27,000
说到这边

1099
00:49:27,000 --> 00:49:28,000
对

1100
00:49:28,000 --> 00:49:29,000
Ryo 继续

1101
00:49:29,000 --> 00:49:30,000
好有意思

1102
00:49:32,000 --> 00:49:33,000
讲到哪里了

1103
00:49:33,000 --> 00:49:34,000
对

1104
00:49:36,000 --> 00:49:37,000
编码问题

1105
00:49:37,000 --> 00:49:38,000
刚才我们讲的 ASCII

1106
00:49:38,000 --> 00:49:39,000
然后和它的扩展拉丁一

1107
00:49:39,000 --> 00:49:43,000
就解决了一些拉丁语系的国家的常见的编码问题

1108
00:49:43,000 --> 00:49:45,000
但是遇到像不管是中日韩

1109
00:49:45,000 --> 00:49:50,000
还有一些可能其他的大字大字符籍的这种语言的时候

1110
00:49:50,000 --> 00:49:51,000
就搞不定了

1111
00:49:51,000 --> 00:49:54,000
所以在那个 UNICODE

1112
00:49:54,000 --> 00:49:57,000
就上次你单独单口的时候讲过那个事情

1113
00:49:57,000 --> 00:50:00,000
之前各个国家和地区还是有自己不同的标准的

1114
00:50:00,000 --> 00:50:03,000
比如说中国所谓的 GP 国标系

1115
00:50:03,000 --> 00:50:05,000
还有日本 JS 多少号我忘了

1116
00:50:06,000 --> 00:50:10,000
还有好像韩语一个什么 KOR 什么什么标准的

1117
00:50:10,000 --> 00:50:11,000
KS

1118
00:50:11,000 --> 00:50:12,000
OK

1119
00:50:12,000 --> 00:50:15,000
就是这一套都是解决的

1120
00:50:15,000 --> 00:50:16,000
同样一个问题就是说

1121
00:50:16,000 --> 00:50:22,000
把一个国家的一些他们比较标准的一套字符籍

1122
00:50:22,000 --> 00:50:23,000
映射成为一个数字

1123
00:50:23,000 --> 00:50:26,000
然后再把这个数字通过某一种方式

1124
00:50:26,000 --> 00:50:27,000
因为这个数字是抽象的一个数字

1125
00:50:27,000 --> 00:50:29,000
就是 123456

1126
00:50:29,000 --> 00:50:32,000
然后再把这个数字编码成计算机能够识别的一个

1127
00:50:32,000 --> 00:50:34,000
Beat Pattern

1128
00:50:34,000 --> 00:50:36,000
二斤制的一个表达

1129
00:50:38,000 --> 00:50:39,000
OK

1130
00:50:39,000 --> 00:50:42,000
所以这也是一个编码的过程

1131
00:50:42,000 --> 00:50:43,000
没错

1132
00:50:43,000 --> 00:50:44,000
所以还是从

1133
00:50:44,000 --> 00:50:45,000
而且就是当年

1134
00:50:45,000 --> 00:50:47,000
当年就是各个国家不一样嘛

1135
00:50:47,000 --> 00:50:50,000
所以就编的号都不一样嘛

1136
00:50:50,000 --> 00:50:51,000
就当我们现在

1137
00:50:51,000 --> 00:50:53,000
其实现在在 Windows 上还是有这个问题对吧

1138
00:50:53,000 --> 00:50:54,000
现在大家经常说

1139
00:50:54,000 --> 00:50:56,000
那个你用 Mac 的话

1140
00:50:56,000 --> 00:50:58,000
Windows 上面能传给你一个什么文本文件

1141
00:50:58,000 --> 00:50:59,000
打开怎么全是半码

1142
00:51:00,000 --> 00:51:01,000
就是因为

1143
00:51:01,000 --> 00:51:06,000
就是你用 Mac 内置的那个 ZIP 来解压一些

1144
00:51:06,000 --> 00:51:08,000
那个 Windows 上面压出来的 ZIP 的时候

1145
00:51:08,000 --> 00:51:10,000
你会发现解出来的都是落码

1146
00:51:10,000 --> 00:51:11,000
对

1147
00:51:11,000 --> 00:51:13,000
就是因为当时他们在原始的时候

1148
00:51:13,000 --> 00:51:16,000
是可能是用的 GB 或者 GBK

1149
00:51:16,000 --> 00:51:18,000
GB 2312 还有 GB 18030

1150
00:51:18,000 --> 00:51:20,000
这几个国标的方法来编

1151
00:51:20,000 --> 00:51:22,000
还有就是像港台

1152
00:51:22,000 --> 00:51:23,000
台湾吧

1153
00:51:23,000 --> 00:51:24,000
台湾是 Big 5 嘛

1154
00:51:24,000 --> 00:51:26,000
香港当初用什么

1155
00:51:26,000 --> 00:51:27,000
我现在不记得了

1156
00:51:27,000 --> 00:51:29,000
我记得那个时候

1157
00:51:29,000 --> 00:51:32,000
就是为了看一些繁体字的文本

1158
00:51:32,000 --> 00:51:35,000
好像要手动在网页上选取编码的时代

1159
00:51:37,000 --> 00:51:40,000
香港和台湾用的那个编码还不一样

1160
00:51:40,000 --> 00:51:42,000
台湾是 Big 5 吗

1161
00:51:42,000 --> 00:51:43,000
台湾肯定是

1162
00:51:43,000 --> 00:51:44,000
台湾肯定用 Big 5 嘛

1163
00:51:44,000 --> 00:51:45,000
香港用什么

1164
00:51:45,000 --> 00:51:47,000
大 5 嘛

1165
00:51:47,000 --> 00:51:48,000
看看啊

1166
00:51:48,000 --> 00:51:49,000
香港在那

1167
00:51:49,000 --> 00:51:52,000
然后我只记得香港有个什么大 5 的

1168
00:51:52,000 --> 00:51:54,000
Hong Kong SCS 嘛

1169
00:51:54,000 --> 00:51:56,000
就是他们自己扩张

1170
00:51:56,000 --> 00:51:58,000
对好像是叫这个名字

1171
00:51:58,000 --> 00:52:00,000
SCS 是一个字符集

1172
00:52:00,000 --> 00:52:03,000
但是编码应该还是用的 Big 5

1173
00:52:03,000 --> 00:52:04,000
对没错

1174
00:52:04,000 --> 00:52:06,000
就是他在 Big 5 的基础上

1175
00:52:06,000 --> 00:52:08,000
然后就加了一些他们就是香港

1176
00:52:08,000 --> 00:52:10,000
对应该港澳台

1177
00:52:10,000 --> 00:52:13,000
基本都还就是曾经都是用 Big 5

1178
00:52:13,000 --> 00:52:15,000
但是他们字符集各自有一套

1179
00:52:15,000 --> 00:52:17,000
像其实像那个澳门

1180
00:52:17,000 --> 00:52:20,000
也有自己的一个 MAC

1181
00:52:20,000 --> 00:52:22,000
MACAL 那个什么

1182
00:52:22,000 --> 00:52:24,000
Information System Character Set

1183
00:52:24,000 --> 00:52:27,000
这个是相当混乱的一个状态嘛

1184
00:52:27,000 --> 00:52:30,000
然后大陆刚刚也有讲自己那套国标的体系

1185
00:52:30,000 --> 00:52:32,000
后来是有一个所谓的

1186
00:52:32,000 --> 00:52:34,000
Unicode CJK 统一的一个过程

1187
00:52:34,000 --> 00:52:35,000
统一的过程嘛

1188
00:52:35,000 --> 00:52:38,000
就是 High Unification 对不对

1189
00:52:38,000 --> 00:52:42,000
像比如说在那个 GB

1190
00:52:42,000 --> 00:52:44,000
我们自己国内是用 GB 嘛

1191
00:52:44,000 --> 00:52:49,000
比如当年我们是分低水准和

1192
00:52:49,000 --> 00:52:51,000
常用的第一级和第二级嘛

1193
00:52:51,000 --> 00:52:52,000
一级汉字

1194
00:52:52,000 --> 00:52:53,000
一级汉字二级汉字

1195
00:52:53,000 --> 00:52:54,000
一级汉字三千多个

1196
00:52:54,000 --> 00:52:56,000
一级汉字用音对用音叙排的

1197
00:52:56,000 --> 00:52:58,000
二级汉字用那个

1198
00:52:58,000 --> 00:52:59,000
笔画 布手排的嘛

1199
00:52:59,000 --> 00:53:00,000
对

1200
00:53:00,000 --> 00:53:02,000
所以肯定是从 R 字开始排嘛

1201
00:53:02,000 --> 00:53:05,000
像阿姨的 R 这个字在 GB 里面

1202
00:53:05,000 --> 00:53:08,000
在 GB 里面就是很前面嘛

1203
00:53:08,000 --> 00:53:10,000
就是汉字区位的最前面

1204
00:53:10,000 --> 00:53:11,000
对

1205
00:53:12,000 --> 00:53:15,000
在什么 B 0 A 1 还是 A 2

1206
00:53:15,000 --> 00:53:16,000
就是从那个区位开始排的

1207
00:53:16,000 --> 00:53:17,000
A 4

1208
00:53:17,000 --> 00:53:18,000
但是呢

1209
00:53:18,000 --> 00:53:19,000
是啊

1210
00:53:19,000 --> 00:53:20,000
所以这个区

1211
00:53:20,000 --> 00:53:22,000
就当年就还有区位

1212
00:53:22,000 --> 00:53:24,000
区位码的输入法嘛

1213
00:53:24,000 --> 00:53:27,000
就你直接记那个字库里面的字号

1214
00:53:27,000 --> 00:53:28,000
对

1215
00:53:28,000 --> 00:53:30,000
哇 这个谁会记这个呀

1216
00:53:30,000 --> 00:53:37,000
区位码其实跟什么四角号码输入法之类的有一拼

1217
00:53:37,000 --> 00:53:39,000
你要是一个熟练的排字工人的话

1218
00:53:39,000 --> 00:53:43,000
可能常用字的数码

1219
00:53:43,000 --> 00:53:46,000
在你脑子里面是可以建立起一对应的标准

1220
00:53:46,000 --> 00:53:49,000
区位码当年发电报的时候不是用了这个方法

1221
00:53:49,000 --> 00:53:51,000
没有没有电报码是另外一个电报码

1222
00:53:51,000 --> 00:53:55,000
区位码是完全就是按照 GB 的这个区位来算的

1223
00:53:55,000 --> 00:53:57,000
那个不知查证肯定没有办法

1224
00:53:57,000 --> 00:54:00,000
因为本来这个编码就是编给计算机用的呀

1225
00:54:00,000 --> 00:54:01,000
不是给人看的呀

1226
00:54:01,000 --> 00:54:02,000
电报码是电报码

1227
00:54:02,000 --> 00:54:03,000
发电报

1228
00:54:03,000 --> 00:54:05,000
当时邮局系统用那个电报的是电报码

1229
00:54:05,000 --> 00:54:09,000
然后四角号码的话是根据汉字的

1230
00:54:09,000 --> 00:54:12,000
三下左右那四个角的那个笔画

1231
00:54:12,000 --> 00:54:14,000
所以那个是直观的可以看的

1232
00:54:14,000 --> 00:54:16,000
四角号码多少 make sense

1233
00:54:16,000 --> 00:54:19,000
你可以猜但是区位码是你以后没见过你就不知道的

1234
00:54:19,000 --> 00:54:22,000
就必须要一个表来查

1235
00:54:22,000 --> 00:54:24,000
本来就编的号是给电脑去看的呀

1236
00:54:24,000 --> 00:54:27,000
不是给人看的呀这个区位码

1237
00:54:27,000 --> 00:54:30,000
然后所以就同样的汉字的话

1238
00:54:30,000 --> 00:54:33,000
比如说它可能在中国是常用的字

1239
00:54:33,000 --> 00:54:35,000
所以中国给它在这个表里面

1240
00:54:35,000 --> 00:54:37,000
在 GB 的表编了这样一个号

1241
00:54:37,000 --> 00:54:40,000
但是在日本的话就编成另外一个号

1242
00:54:40,000 --> 00:54:42,000
虽然是同样的汉字

1243
00:54:42,000 --> 00:54:45,000
比如说笔画一的一一横这个一嘛

1244
00:54:45,000 --> 00:54:48,000
所以后来在做 unicode 的时候说全球大统一

1245
00:54:48,000 --> 00:54:50,000
大家都是大家庭嘛

1246
00:54:50,000 --> 00:54:52,000
那汉字本来就这么多

1247
00:54:52,000 --> 00:54:56,000
为了节省码位干脆就能统一了就统一了

1248
00:54:56,000 --> 00:54:58,000
所以呢在统一码 unicode 的时候呢

1249
00:54:58,000 --> 00:55:02,000
对于这个他们叫 CJK Ideograph

1250
00:55:02,000 --> 00:55:03,000
对吧

1251
00:55:03,000 --> 00:55:06,000
CJK 表意汉字

1252
00:55:06,000 --> 00:55:08,000
表意符号这个区的话呢

1253
00:55:08,000 --> 00:55:10,000
就尽量的就当年就把

1254
00:55:10,000 --> 00:55:15,000
这几个东亚系统的汉字统一起来了

1255
00:55:15,000 --> 00:55:18,000
但是呢管这个叫包

1256
00:55:18,000 --> 00:55:21,000
这个有一个术语叫包容还是包舍

1257
00:55:21,000 --> 00:55:22,000
就是同样的汉字

1258
00:55:22,000 --> 00:55:23,000
认同原则吧

1259
00:55:23,000 --> 00:55:25,000
是认同原则吗

1260
00:55:25,000 --> 00:55:30,000
就是如果你国认为你国的这个字和我国的这个字是同一个字呢

1261
00:55:30,000 --> 00:55:32,000
这两个字就可以合在一起

1262
00:55:32,000 --> 00:55:34,000
对对对

1263
00:55:34,000 --> 00:55:35,000
但是呢问题就是如果

1264
00:55:35,000 --> 00:55:37,000
比如说像一体字东西嘛

1265
00:55:37,000 --> 00:55:40,000
你国的这个是分开来的话

1266
00:55:40,000 --> 00:55:42,000
那我说到 unicode 也必须得分开嘛

1267
00:55:42,000 --> 00:55:45,000
要不然就会有一个向后兼容不行的问题嘛

1268
00:55:45,000 --> 00:55:47,000
对是这样

1269
00:55:47,000 --> 00:55:52,000
所以就当年好像就在那个基本文

1270
00:55:52,000 --> 00:55:54,000
基本文平面

1271
00:55:54,000 --> 00:56:01,000
基本多语言平面的这个 D 级的 CJK 统一表意符号里面的这个东西呢就是

1272
00:56:01,000 --> 00:56:03,000
基本上差不多统起来了

1273
00:56:03,000 --> 00:56:06,000
但是问题就是统的那个规则呀就特别的不明确

1274
00:56:06,000 --> 00:56:09,000
有的该统的不同有的该分的不分就是这样子

1275
00:56:12,000 --> 00:56:16,000
所以那现在比如说国内可能还是在用 GBData 比较多

1276
00:56:16,000 --> 00:56:18,000
特别是在 Windows 上面的平台上面

1277
00:56:18,000 --> 00:56:20,000
就在日本和韩国的话

1278
00:56:20,000 --> 00:56:23,000
现在用 unicode 编码的是一个常态吗

1279
00:56:23,000 --> 00:56:27,000
还是说还是在沿用自己老的那个什么 JS 那套标准

1280
00:56:27,000 --> 00:56:29,000
Windows 还是用 G 4 呀

1281
00:56:29,000 --> 00:56:30,000
还是这样子

1282
00:56:30,000 --> 00:56:33,000
就只有在 Mac 上面是用的 unicode

1283
00:56:34,000 --> 00:56:36,000
首先 OS X 的话

1284
00:56:36,000 --> 00:56:38,000
从最开始 OS X 一开始

1285
00:56:38,000 --> 00:56:40,000
诞生之后就是 unicode 内核对吧

1286
00:56:40,000 --> 00:56:42,000
那这有两码事

1287
00:56:42,000 --> 00:56:44,000
第一个就是说 Windows 上面其实也是 unicode 内核的

1288
00:56:44,000 --> 00:56:48,000
他只是说在习惯保存文件的时候

1289
00:56:48,000 --> 00:56:49,000
他有一个编码的过程嘛

1290
00:56:49,000 --> 00:56:50,000
这样的话

1291
00:56:50,000 --> 00:56:53,000
在那个起码在中文的 Windows 上面

1292
00:56:53,000 --> 00:56:56,000
现在默认的应该还是用的那个国标那套标准 GBK 吧

1293
00:56:56,000 --> 00:57:00,000
然后你可以选择手工存成 UTF 8

1294
00:57:00,000 --> 00:57:02,000
然后他会有一个那个 BOM 在前面

1295
00:57:02,000 --> 00:57:04,000
标识这个东西嘛

1296
00:57:04,000 --> 00:57:06,000
但是我不知道在日本的话

1297
00:57:06,000 --> 00:57:08,000
目前大家用的常用的操作系统

1298
00:57:08,000 --> 00:57:11,000
里面是怎么一个做法

1299
00:57:12,000 --> 00:57:15,000
如果我虽然也不怎么用 Windows

1300
00:57:15,000 --> 00:57:17,000
但是据我印象的话好像也是

1301
00:57:17,000 --> 00:57:20,000
就是在他们也是默认 G 4

1302
00:57:20,000 --> 00:57:25,000
还是在 unicode unification 之前的做法保留下来了吗

1303
00:57:26,000 --> 00:57:27,000
对的

1304
00:57:27,000 --> 00:57:32,000
其实这就是为什么你在 Windows 上面要选择一个所谓 code 配置嘛

1305
00:57:32,000 --> 00:57:33,000
你就要在

1306
00:57:33,000 --> 00:57:34,000
对,码业

1307
00:57:34,000 --> 00:57:36,000
你要在

1308
00:57:36,000 --> 00:57:38,000
当你想要玩日文游戏的时候

1309
00:57:38,000 --> 00:57:40,000
你可以把 code 配置选成日文

1310
00:57:40,000 --> 00:57:43,000
然后这样日文游戏至少

1311
00:57:43,000 --> 00:57:45,000
这种选择是正常的

1312
00:57:45,000 --> 00:57:48,000
但是操作系统的其他部分就全毁了

1313
00:57:50,000 --> 00:57:53,000
对,其实就是 unWindows 那个比较典型的

1314
00:57:53,000 --> 00:57:55,000
它那个记事本的那个软件

1315
00:57:55,000 --> 00:57:57,000
就那成人编辑器

1316
00:57:57,000 --> 00:58:00,000
它有一个编码叫 AnSIM

1317
00:58:00,000 --> 00:58:03,000
就是 American National,就是国家标准

1318
00:58:03,000 --> 00:58:06,000
但其实它除了 ASCII 之外

1319
00:58:06,000 --> 00:58:07,000
那个应该念怎么念

1320
00:58:07,000 --> 00:58:08,000
ASCII

1321
00:58:08,000 --> 00:58:09,000
除了 ASCII 之外

1322
00:58:09,000 --> 00:58:13,000
其他的其实它都是一个根据你这个操作系统原地

1323
00:58:13,000 --> 00:58:15,000
是来帮你自动选一个 code 配置

1324
00:58:15,000 --> 00:58:16,000
应该是这样的

1325
00:58:16,000 --> 00:58:18,000
所以那个特别坑嘛

1326
00:58:18,000 --> 00:58:19,000
那个特别坑嘛

1327
00:58:19,000 --> 00:58:20,000
对,所以其实

1328
00:58:20,000 --> 00:58:22,000
对,其实 Windows 的记事本还挺坑的

1329
00:58:22,000 --> 00:58:24,000
对啊,那就是各种那种

1330
00:58:24,000 --> 00:58:27,000
大家都说打不开是乱码的一个根源问题

1331
00:58:28,000 --> 00:58:30,000
还有那种换航服的问题吗

1332
00:58:30,000 --> 00:58:31,000
对对对

1333
00:58:31,000 --> 00:58:34,000
回车服和换航服

1334
00:58:34,000 --> 00:58:37,000
Windows 记事本是不能区分这个

1335
00:58:37,000 --> 00:58:43,000
单一一个 Return 和 Windows 所谓开 Return New Line

1336
00:58:43,000 --> 00:58:46,000
对,换航和回车是不一样的嘛

1337
00:58:46,000 --> 00:58:47,000
Return 和 Enter 嘛

1338
00:58:47,000 --> 00:58:50,000
对,它那个 BOM 也挺烦的其实

1339
00:58:52,000 --> 00:58:54,000
到了,嗯,我没说到 Unicode 了是吧

1340
00:58:54,000 --> 00:58:56,000
对,对,我们已经说到 Unicode 了

1341
00:58:56,000 --> 00:58:58,000
然后当年就是有

1342
00:58:58,000 --> 00:59:00,000
因为汉字的那个

1343
00:59:00,000 --> 00:59:02,000
有很多一体字

1344
00:59:02,000 --> 00:59:06,000
那当年在做这个 CJK 统一汉字的时候呢

1345
00:59:06,000 --> 00:59:09,000
就因为各个国家的这个标准不一样

1346
00:59:09,000 --> 00:59:11,000
又为了向后兼容导致

1347
00:59:11,000 --> 00:59:13,000
当年在做那个标准的时候呢

1348
00:59:13,000 --> 00:59:15,000
这个收和不收,统一

1349
00:59:15,000 --> 00:59:17,000
有没有统起来是非常混乱嘛

1350
00:59:17,000 --> 00:59:18,000
所以到后面

1351
00:59:18,000 --> 00:59:20,000
现在已经到 E 区了是吧

1352
00:59:20,000 --> 00:59:21,000
好像是了

1353
00:59:21,000 --> 00:59:25,000
我最近没有怎么去追 Unicode 这个 Consultium 的新闻

1354
00:59:25,000 --> 00:59:27,000
但他们一直在搞大型的

1355
00:59:27,000 --> 00:59:28,000
对

1356
00:59:28,000 --> 00:59:30,000
台湾是翻译成什么

1357
00:59:30,000 --> 00:59:32,000
甲乙丙丁物嘛

1358
00:59:32,000 --> 00:59:33,000
扩展

1359
00:59:33,000 --> 00:59:35,000
嗯,说法不一样而已

1360
00:59:35,000 --> 00:59:37,000
然后就是后面就一直都在补

1361
00:59:37,000 --> 00:59:39,000
而且他们要不停的补

1362
00:59:39,000 --> 00:59:41,000
要保有一个统一汉字

1363
00:59:41,000 --> 00:59:42,000
然后呢

1364
00:59:42,000 --> 00:59:43,000
然后呢

1365
00:59:43,000 --> 00:59:44,000
然后呢

1366
00:59:44,000 --> 00:59:45,000
然后呢

1367
00:59:45,000 --> 00:59:47,000
而且他们要不停的补

1368
00:59:47,000 --> 00:59:51,000
又要保证向前面的那个兼容性的问题嘛

1369
00:59:51,000 --> 00:59:53,000
所以后面就不断的叠加

1370
00:59:53,000 --> 00:59:54,000
所以在日本

1371
00:59:54,000 --> 00:59:55,000
在 Unicode 里面

1372
00:59:55,000 --> 00:59:57,000
现在就搞的这个一体字的处理

1373
00:59:57,000 --> 00:59:59,000
非常非常的复杂

1374
01:00:01,000 --> 01:00:03,000
有没有,有没有发生

1375
01:00:03,000 --> 01:00:05,000
现在有没有发生了一个字

1376
01:00:05,000 --> 01:00:08,000
在 Unicode 里面有多个码点的状态

1377
01:00:08,000 --> 01:00:09,000
的情况

1378
01:00:10,000 --> 01:00:12,000
首先说什么叫一个字

1379
01:00:12,000 --> 01:00:13,000
因为

1380
01:00:13,000 --> 01:00:14,000
因为

1381
01:00:14,000 --> 01:00:15,000
同一个字的不同意题

1382
01:00:15,000 --> 01:00:16,000
比如说

1383
01:00:16,000 --> 01:00:17,000
对

1384
01:00:18,000 --> 01:00:19,000
像比如

1385
01:00:19,000 --> 01:00:21,000
这会发生很乱的事情

1386
01:00:21,000 --> 01:00:24,000
比如说像那个强调的强

1387
01:00:25,000 --> 01:00:26,000
就是

1388
01:00:26,000 --> 01:00:29,000
右边是,虽然的虽,右上面是个口嘛

1389
01:00:29,000 --> 01:00:30,000
对吧

1390
01:00:30,000 --> 01:00:34,000
然后日本的这边标准的字型呢

1391
01:00:34,000 --> 01:00:37,000
是写成那个吧,撇折点

1392
01:00:37,000 --> 01:00:38,000
OK

1393
01:00:38,000 --> 01:00:39,000
对

1394
01:00:39,000 --> 01:00:40,000
啊

1395
01:00:40,000 --> 01:00:41,000
但是

1396
01:00:41,000 --> 01:00:42,000
这两个关系

1397
01:00:42,000 --> 01:00:45,000
在中国是正体字和一体字的关系

1398
01:00:45,000 --> 01:00:46,000
然后我们不用撇折点

1399
01:00:46,000 --> 01:00:48,000
我们是写成口嘛

1400
01:00:48,000 --> 01:00:49,000
对

1401
01:00:50,000 --> 01:00:51,000
但是日本呢

1402
01:00:51,000 --> 01:00:52,000
它是

1403
01:00:52,000 --> 01:00:53,000
撇折点的那个字型

1404
01:00:53,000 --> 01:00:55,000
它是常用汉字的标准字型

1405
01:00:56,000 --> 01:00:57,000
然后写成口呢

1406
01:00:57,000 --> 01:01:00,000
日本就完全没有写成口这种编题吗

1407
01:01:00,000 --> 01:01:03,000
写成口呢是他们的一体字

1408
01:01:05,000 --> 01:01:07,000
然后还好就是

1409
01:01:07,000 --> 01:01:08,000
那怎么办呢

1410
01:01:08,000 --> 01:01:09,000
那还好的是

1411
01:01:09,000 --> 01:01:11,000
那还好,因为在 unicode 里面

1412
01:01:11,000 --> 01:01:13,000
这两个字分别有码位

1413
01:01:13,000 --> 01:01:15,000
对,这其实就是两个码位

1414
01:01:15,000 --> 01:01:16,000
所以呢

1415
01:01:17,000 --> 01:01:19,000
对于这一对字的处理的话是还好

1416
01:01:19,000 --> 01:01:21,000
是因为有不同的码位

1417
01:01:21,000 --> 01:01:24,000
那我是只要给它分成不同的编码

1418
01:01:24,000 --> 01:01:25,000
给它编了不同的编码了

1419
01:01:25,000 --> 01:01:28,000
所以呢我只要正确的输入这个码的话

1420
01:01:28,000 --> 01:01:31,000
你就会显示这样的字

1421
01:01:31,000 --> 01:01:32,000
这个是

1422
01:01:32,000 --> 01:01:35,000
我们要说到后面就是那个字体公司

1423
01:01:35,000 --> 01:01:36,000
它在映射的时候

1424
01:01:36,000 --> 01:01:38,000
映射对的时候就会这样

1425
01:01:39,000 --> 01:01:40,000
OK

1426
01:01:40,000 --> 01:01:42,000
如果映射不对的话

1427
01:01:42,000 --> 01:01:45,000
字体公司它有时候它映射错了

1428
01:01:45,000 --> 01:01:46,000
就中文字体

1429
01:01:46,000 --> 01:01:49,000
因为中文字体优先是那个口字盘的那个字型

1430
01:01:49,000 --> 01:01:52,000
日本字体会优先那个撇点

1431
01:01:52,000 --> 01:01:54,000
撇折点的那个字型

1432
01:01:54,000 --> 01:01:57,000
如果他们在这个码位上弄错了的话

1433
01:01:57,000 --> 01:01:59,000
在换字体的时候也会出问题

1434
01:01:59,000 --> 01:02:01,000
不过这种概率还蛮小的

1435
01:02:01,000 --> 01:02:04,000
比较大的问题主要是出在输入法

1436
01:02:04,000 --> 01:02:06,000
给你优先推荐的那个字上

1437
01:02:07,000 --> 01:02:08,000
对,你看起来是一样

1438
01:02:08,000 --> 01:02:10,000
其实你做那个比较的话

1439
01:02:10,000 --> 01:02:11,000
它两个不同的字

1440
01:02:11,000 --> 01:02:13,000
不同的 character

1441
01:02:14,000 --> 01:02:16,000
所以就刚才说到

1442
01:02:16,000 --> 01:02:17,000
这又是一个不同的层次了

1443
01:02:17,000 --> 01:02:19,000
首先我们是要输入法

1444
01:02:19,000 --> 01:02:23,000
我们从键盘里面打进去的那个键位以后

1445
01:02:23,000 --> 01:02:25,000
要经过输入法的转换

1446
01:02:25,000 --> 01:02:26,000
换成这个文字的编码

1447
01:02:26,000 --> 01:02:28,000
这时候换的时候有没有换对

1448
01:02:28,000 --> 01:02:30,000
有的时候输入

1449
01:02:30,000 --> 01:02:31,000
因为输入法特别空

1450
01:02:31,000 --> 01:02:33,000
有时候它换根本就给它换错掉了

1451
01:02:34,000 --> 01:02:38,000
然后操作系统收到这个编码以后

1452
01:02:38,000 --> 01:02:40,000
它再去拿那个 font 文件

1453
01:02:40,000 --> 01:02:42,000
拿字体文件去调用

1454
01:02:42,000 --> 01:02:43,000
来显示那个

1455
01:02:43,000 --> 01:02:44,000
最后要显示那个图形

1456
01:02:44,000 --> 01:02:45,000
那个字形

1457
01:02:45,000 --> 01:02:48,000
那那个 font 的那个 mapping

1458
01:02:48,000 --> 01:02:49,000
如果又错了的话

1459
01:02:49,000 --> 01:02:50,000
它显示又是一个错的东西

1460
01:02:50,000 --> 01:02:52,000
所以这个有好多层次的

1461
01:02:53,000 --> 01:02:55,000
好多可能果然是

1462
01:02:56,000 --> 01:02:59,000
所以我们要把从头到尾再说一遍

1463
01:02:59,000 --> 01:03:01,000
所以现在就好不容易是

1464
01:03:01,000 --> 01:03:02,000
对啊,我们刚才跳过了

1465
01:03:02,000 --> 01:03:04,000
那输入法应该说一下呀

1466
01:03:06,000 --> 01:03:09,000
输入法这个层面其实跟

1467
01:03:10,000 --> 01:03:13,000
编码没有太多的关联

1468
01:03:13,000 --> 01:03:18,000
输入法本身是一个把你输入的字符

1469
01:03:18,000 --> 01:03:21,000
按照某种规则转化为汉字的过程

1470
01:03:21,000 --> 01:03:23,000
就我们假设在讨论的是汉字输入法

1471
01:03:23,000 --> 01:03:26,000
当然日语其实也有输入法这个概念

1472
01:03:26,000 --> 01:03:27,000
但是

1473
01:03:29,000 --> 01:03:31,000
全都讨论的话其实比较复杂的

1474
01:03:31,000 --> 01:03:33,000
输入法本身其实是一个

1475
01:03:36,000 --> 01:03:39,000
和编码没有太多的关联的过程

1476
01:03:40,000 --> 01:03:42,000
它做的唯一的事情就是把你输入的

1477
01:03:43,000 --> 01:03:47,000
甚至很多时候输入法工作的层面是在

1478
01:03:47,000 --> 01:03:49,000
已经输入的字符的层面

1479
01:03:49,000 --> 01:03:51,000
而是和那个下面的按键是无关的

1480
01:03:51,000 --> 01:03:52,000
当然在

1481
01:03:53,000 --> 01:03:56,000
linux 上面你是可以说这个输入法

1482
01:03:56,000 --> 01:04:00,000
就有些输入法是工作在那个扫文法层面上的

1483
01:04:00,000 --> 01:04:02,000
你可以说这个输入法直接去

1484
01:04:05,000 --> 01:04:06,000
管理键盘上面

1485
01:04:07,000 --> 01:04:09,000
给过来的扫描码

1486
01:04:09,000 --> 01:04:11,000
而不是先等待操作系统把

1487
01:04:12,000 --> 01:04:13,000
扫描码已经转换为汉字

1488
01:04:13,000 --> 01:04:15,000
转换为字符然后去处理字符

1489
01:04:16,000 --> 01:04:19,000
然后扫码其实是一个巨大的规则库

1490
01:04:19,000 --> 01:04:21,000
就比如说这规则库最常见

1491
01:04:21,000 --> 01:04:22,000
最常用的就是拼音规则库

1492
01:04:22,000 --> 01:04:25,000
然后你输入某些特定的拼音

1493
01:04:25,000 --> 01:04:27,000
就会得到一个汉字

1494
01:04:30,000 --> 01:04:31,000
输入法这个坑要开

1495
01:04:31,000 --> 01:04:33,000
我们可以介绍各种各样的输入法

1496
01:04:33,000 --> 01:04:34,000
什么音景码

1497
01:04:34,000 --> 01:04:35,000
双拼

1498
01:04:37,000 --> 01:04:39,000
包括刚才说的无比字形

1499
01:04:39,000 --> 01:04:41,000
其实我觉得从广义上来说

1500
01:04:41,000 --> 01:04:44,000
输入法也可以试做一套编码系统

1501
01:04:44,000 --> 01:04:46,000
但是它跟我们所谓的这个

1502
01:04:46,000 --> 01:04:49,000
计算机字符编码这个狭义的编码

1503
01:04:49,000 --> 01:04:50,000
不是一回事

1504
01:04:52,000 --> 01:04:54,000
字符编码又不一样

1505
01:04:54,000 --> 01:04:56,000
对输入法其实目前最大问题就是

1506
01:04:56,000 --> 01:04:59,000
拼音数法很有可能是一个动态的编码系统

1507
01:04:59,000 --> 01:05:02,000
就是你每次按键的字

1508
01:05:02,000 --> 01:05:04,000
完全一样的按键次序

1509
01:05:04,000 --> 01:05:07,000
输入得出来的这个字可能是不一样的

1510
01:05:07,000 --> 01:05:10,000
或者说它是一套解锁系统

1511
01:05:10,000 --> 01:05:12,000
它能帮你更快的找到你想要的那个字

1512
01:05:13,000 --> 01:05:14,000
没错

1513
01:05:14,000 --> 01:05:15,000
它是一个对

1514
01:05:15,000 --> 01:05:16,000
增长搜索

1515
01:05:16,000 --> 01:05:17,000
编码和键对

1516
01:05:17,000 --> 01:05:20,000
当然有些人就因此特别喜欢什么

1517
01:05:20,000 --> 01:05:21,000
我都问过这种人

1518
01:05:21,000 --> 01:05:22,000
比如智能 ABC 数法

1519
01:05:22,000 --> 01:05:25,000
就是你不管打多少次

1520
01:05:25,000 --> 01:05:26,000
它没有高频线这个功能

1521
01:05:26,000 --> 01:05:29,000
就是你打什么知道的知

1522
01:05:29,000 --> 01:05:32,000
我以前就是在第二页

1523
01:05:32,000 --> 01:05:33,000
它永远永远在那个位置

1524
01:05:33,000 --> 01:05:35,000
你每次输入一模一样的

1525
01:05:37,000 --> 01:05:40,000
这个是一个叫磁频调整吗

1526
01:05:40,000 --> 01:05:41,000
就是会根据你输入的

1527
01:05:41,000 --> 01:05:42,000
磁频调整可以关掉

1528
01:05:42,000 --> 01:05:44,000
很多法都可以关掉的

1529
01:05:45,000 --> 01:05:46,000
可以关掉

1530
01:05:46,000 --> 01:05:48,000
所以它永远都在那个位置上

1531
01:05:48,000 --> 01:05:49,000
其实挺好的

1532
01:05:49,000 --> 01:05:51,000
像有些同学他的名字

1533
01:05:51,000 --> 01:05:52,000
因为是很复杂

1534
01:05:52,000 --> 01:05:54,000
然后就经常在后面

1535
01:05:54,000 --> 01:05:55,000
告诉你

1536
01:05:55,000 --> 01:05:56,000
第二排第五个

1537
01:05:56,000 --> 01:05:57,000
你就翻

1538
01:05:57,000 --> 01:06:00,000
对你按五页的第六个选项

1539
01:06:00,000 --> 01:06:01,000
就是什么什么

1540
01:06:02,000 --> 01:06:03,000
这样体验也蛮好

1541
01:06:03,000 --> 01:06:07,000
但那个基本上是在连击时代之前

1542
01:06:07,000 --> 01:06:08,000
出现的这种情况

1543
01:06:08,000 --> 01:06:09,000
现在的话

1544
01:06:09,000 --> 01:06:11,000
我看市面上的大部分输入法

1545
01:06:11,000 --> 01:06:14,000
它除了有磁频调整这个选项之外

1546
01:06:14,000 --> 01:06:16,000
它还有一个所谓的磁汇库的问题

1547
01:06:16,000 --> 01:06:18,000
而且它不是一个单击的

1548
01:06:18,000 --> 01:06:19,000
它是一个连击的

1549
01:06:19,000 --> 01:06:21,000
比如说像我甚至留意到现在

1550
01:06:21,000 --> 01:06:22,000
留意到现在那个苹果

1551
01:06:22,000 --> 01:06:24,000
自带那个拼音行都有这个东西

1552
01:06:24,000 --> 01:06:25,000
就是你打一遍

1553
01:06:25,000 --> 01:06:27,000
你觉得一些流行词汇

1554
01:06:27,000 --> 01:06:29,000
它会自动的会定期更新出来

1555
01:06:29,000 --> 01:06:31,000
还有像什么缩苟输入法这种

1556
01:06:31,000 --> 01:06:32,000
云磁库

1557
01:06:32,000 --> 01:06:33,000
对这种缩苟

1558
01:06:33,000 --> 01:06:34,000
云磁库就是它可以

1559
01:06:34,000 --> 01:06:36,000
甚至说实时的告诉你说

1560
01:06:36,000 --> 01:06:37,000
你本来打这个

1561
01:06:37,000 --> 01:06:40,000
比如说 ABCD 你组合出来的一个拼音的字

1562
01:06:40,000 --> 01:06:41,000
之前可能都没有

1563
01:06:41,000 --> 01:06:42,000
可能过了一天

1564
01:06:42,000 --> 01:06:44,000
发现怎么有人说这个东西

1565
01:06:44,000 --> 01:06:46,000
因为是有大量的人打 ABCD

1566
01:06:46,000 --> 01:06:49,000
然后指向了某一个特定的一个词组

1567
01:06:50,000 --> 01:06:51,000
红红火火

1568
01:06:51,000 --> 01:06:52,000
恍恍惚惚

1569
01:06:55,000 --> 01:06:57,000
这算是因为输入法

1570
01:06:57,000 --> 01:06:59,000
而被创造出来的词汇

1571
01:07:00,000 --> 01:07:01,000
对的

1572
01:07:01,000 --> 01:07:02,000
兰州少女

1573
01:07:02,000 --> 01:07:03,000
反过来的

1574
01:07:03,000 --> 01:07:04,000
兰州少女

1575
01:07:04,000 --> 01:07:05,000
兰州少女

1576
01:07:07,000 --> 01:07:08,000
这是什么梗

1577
01:07:08,000 --> 01:07:09,000
你不知道这个梗吗

1578
01:07:09,000 --> 01:07:10,000
就是楼主

1579
01:07:10,000 --> 01:07:13,000
在论坛时代

1580
01:07:15,000 --> 01:07:18,000
你打 LZ SV

1581
01:07:18,000 --> 01:07:20,000
如果你不切换输入法的话

1582
01:07:20,000 --> 01:07:22,000
出来的就是兰州烧饼四个字

1583
01:07:24,000 --> 01:07:25,000
兰州有烧饼吗

1584
01:07:26,000 --> 01:07:27,000
有啊

1585
01:07:29,000 --> 01:07:31,000
还蛮好吃的说实话

1586
01:07:33,000 --> 01:07:34,000
对

1587
01:07:34,000 --> 01:07:36,000
吴涛对兰州很熟

1588
01:07:36,000 --> 01:07:37,000
我在兰州

1589
01:07:37,000 --> 01:07:39,000
我和 Rex 都是兰州人

1590
01:07:39,000 --> 01:07:41,000
我们都是在兰州出生

1591
01:07:44,000 --> 01:07:47,000
现在兰州除了拉面还有烧饼

1592
01:07:47,000 --> 01:07:49,000
刚讲了那个字符

1593
01:07:49,000 --> 01:07:50,000
Unicode 问题

1594
01:07:50,000 --> 01:07:53,000
可能这里不得不稍微连带提一下

1595
01:07:53,000 --> 01:07:55,000
但是先不展开讲

1596
01:07:55,000 --> 01:07:56,000
后面会展开讲

1597
01:07:56,000 --> 01:07:57,000
就是那个 emoji

1598
01:07:57,000 --> 01:07:58,000
言文字的问题

1599
01:08:00,000 --> 01:08:01,000
又是一个大

1600
01:08:01,000 --> 01:08:03,000
探多拉盒子

1601
01:08:04,000 --> 01:08:06,000
所以我一直想知道

1602
01:08:06,000 --> 01:08:08,000
这个词在英文世界

1603
01:08:08,000 --> 01:08:10,000
最通用的念法是怎么念

1604
01:08:10,000 --> 01:08:11,000
是那 emoji 吧

1605
01:08:12,000 --> 01:08:13,000
对

1606
01:08:13,000 --> 01:08:14,000
但我知道它在英文世界

1607
01:08:14,000 --> 01:08:15,000
其实应该是关于

1608
01:08:15,000 --> 01:08:16,000
这是日语对吧

1609
01:08:16,000 --> 01:08:18,000
反正日语叫 emoji

1610
01:08:19,000 --> 01:08:20,000
对啊

1611
01:08:20,000 --> 01:08:22,000
有很多人念成 emoji

1612
01:08:22,000 --> 01:08:24,000
这个是可以肯定的

1613
01:08:24,000 --> 01:08:25,000
emoji

1614
01:08:25,000 --> 01:08:26,000
emoji 就是会文字

1615
01:08:26,000 --> 01:08:28,000
它写成中文就写成会文字

1616
01:08:28,000 --> 01:08:30,000
会就是画的意思

1617
01:08:30,000 --> 01:08:33,000
现在汉字叫会文字

1618
01:08:33,000 --> 01:08:35,000
对 moji 就是文字这两个字

1619
01:08:36,000 --> 01:08:37,000
moji 就是会

1620
01:08:37,000 --> 01:08:39,000
就是画的意思

1621
01:08:40,000 --> 01:08:41,000
会

1622
01:08:42,000 --> 01:08:43,000
会画的会

1623
01:08:43,000 --> 01:08:44,000
画

1624
01:08:44,000 --> 01:08:46,000
所以它其实是一个画

1625
01:08:46,000 --> 01:08:48,000
所以会文字说半天就是象形文字吗

1626
01:08:49,000 --> 01:08:51,000
不对在日语里面有两个词

1627
01:08:51,000 --> 01:08:52,000
一个叫 emoji

1628
01:08:52,000 --> 01:08:53,000
一个叫 kaomoji

1629
01:08:54,000 --> 01:08:56,000
kao 是言文字

1630
01:08:57,000 --> 01:08:59,000
就是用字符来画出一个人的脸

1631
01:08:59,000 --> 01:09:00,000
对

1632
01:09:00,000 --> 01:09:02,000
就是那个什么给人跪了那种

1633
01:09:02,000 --> 01:09:04,000
这个应该叫 emoji

1634
01:09:04,000 --> 01:09:05,000
对比如说 orz

1635
01:09:06,000 --> 01:09:07,000
所以有两个嘛

1636
01:09:07,000 --> 01:09:08,000
反正在日语里面

1637
01:09:08,000 --> 01:09:09,000
emoji 它是一个 a

1638
01:09:09,000 --> 01:09:10,000
它是一个画

1639
01:09:11,000 --> 01:09:12,000
会文字是一个画

1640
01:09:12,000 --> 01:09:14,000
但是 kaomoji 它是一个文字

1641
01:09:14,000 --> 01:09:17,000
它是用字符组成的一个图形

1642
01:09:18,000 --> 01:09:20,000
它是用文字来表达一个表情

1643
01:09:21,000 --> 01:09:22,000
对

1644
01:09:22,000 --> 01:09:23,000
但是这个东西的话

1645
01:09:23,000 --> 01:09:26,000
其实最早的是从英文世界过来的

1646
01:09:26,000 --> 01:09:27,000
就 aski-ad

1647
01:09:27,000 --> 01:09:29,000
对 aski-ad

1648
01:09:29,000 --> 01:09:32,000
一个帽号一个又跨壶

1649
01:09:32,000 --> 01:09:34,000
就是一个横过来的笑脸

1650
01:09:34,000 --> 01:09:36,000
对吧这个是最早最早的一个

1651
01:09:36,000 --> 01:09:38,000
然后这个在日语的是叫 kaomoji

1652
01:09:39,000 --> 01:09:41,000
然后西方的他们那个都是横过来的

1653
01:09:41,000 --> 01:09:43,000
东亚的这个言文字

1654
01:09:43,000 --> 01:09:46,000
就是我们看的就是正常位置

1655
01:09:46,000 --> 01:09:49,000
比如说打两个那个

1656
01:09:49,000 --> 01:09:50,000
上肩

1657
01:09:50,000 --> 01:09:51,000
那个符号

1658
01:09:52,000 --> 01:09:53,000
那个叫什么呀

1659
01:09:53,000 --> 01:09:54,000
就叫 kao

1660
01:09:54,000 --> 01:09:55,000
上肩

1661
01:09:55,000 --> 01:09:57,000
对两个上肩的话就是两个笑脸

1662
01:09:58,000 --> 01:10:00,000
好像叫 circle flex

1663
01:10:01,000 --> 01:10:02,000
对那个是言文字

1664
01:10:03,000 --> 01:10:05,000
那言文字其实它在对计算系统

1665
01:10:05,000 --> 01:10:06,000
它本来就是字符

1666
01:10:06,000 --> 01:10:08,000
就是这种 aski-ad

1667
01:10:08,000 --> 01:10:10,000
所以这个就不用编码

1668
01:10:10,000 --> 01:10:12,000
它就可以显示出来的

1669
01:10:12,000 --> 01:10:14,000
但是 emmoji 的话它是一个画

1670
01:10:14,000 --> 01:10:17,000
所以就必须要通过编码去编一下

1671
01:10:17,000 --> 01:10:20,000
然后再让电脑就调出这个东西出来

1672
01:10:20,000 --> 01:10:22,000
所以就 emmoji 就有两个问题

1673
01:10:22,000 --> 01:10:24,000
第一个就是它会在那个

1674
01:10:24,000 --> 01:10:27,000
就码表里面空出一些特定的东西

1675
01:10:27,000 --> 01:10:29,000
给这些这些图片

1676
01:10:29,000 --> 01:10:31,000
这些小图片什么救护车啊

1677
01:10:31,000 --> 01:10:33,000
火箭啊西瓜飞机之类的这种

1678
01:10:33,000 --> 01:10:36,000
它会留一个这个这个一个点位

1679
01:10:36,000 --> 01:10:38,000
然后再说这个点位是什么意思

1680
01:10:38,000 --> 01:10:40,000
然后你再说对应的这个

1681
01:10:40,000 --> 01:10:41,000
是

1682
01:10:41,000 --> 01:10:43,000
emmoji 是用字体来实现的吗

1683
01:10:43,000 --> 01:10:44,000
好像不是字体来实现的

1684
01:10:44,000 --> 01:10:45,000
是的呀

1685
01:10:45,000 --> 01:10:46,000
是

1686
01:10:47,000 --> 01:10:48,000
是的

1687
01:10:48,000 --> 01:10:53,000
而且这是一个像 apple color emoji 那个字体

1688
01:10:53,000 --> 01:10:55,000
它是彩色的字体

1689
01:10:55,000 --> 01:10:59,000
当然就是这也是一个字体技术的一个很重要一点

1690
01:10:59,000 --> 01:11:01,000
就是因为大家默认的话那个字体就是黑白的嘛

1691
01:11:01,000 --> 01:11:04,000
就是一个它混的是一个轮廓 outline

1692
01:11:04,000 --> 01:11:07,000
传统上字体是一套轮廓集合的

1693
01:11:08,000 --> 01:11:09,000
对

1694
01:11:09,000 --> 01:11:13,000
而且是黑白的就不几乎就不带这个颜色信息的

1695
01:11:13,000 --> 01:11:16,000
但是呢这个 emmoji color emoji

1696
01:11:16,000 --> 01:11:18,000
color emoji 它就是第一款就是

1697
01:11:18,000 --> 01:11:20,000
有带颜色信息的这个字体

1698
01:11:20,000 --> 01:11:22,000
诶那它是点阵的还是向亮的

1699
01:11:22,000 --> 01:11:24,000
是位图

1700
01:11:24,000 --> 01:11:25,000
但它存很多

1701
01:11:25,000 --> 01:11:26,000
对

1702
01:11:26,000 --> 01:11:29,000
实现上是位图但是

1703
01:11:29,000 --> 01:11:33,000
它实现上是位图但是它理论上是可以支持

1704
01:11:33,000 --> 01:11:36,000
你说支持彩色的实样子

1705
01:11:36,000 --> 01:11:39,000
我没理解错的话就是它这套字体

1706
01:11:39,000 --> 01:11:41,000
它只是存了一套位图的实现

1707
01:11:41,000 --> 01:11:45,000
但是它本身是可以使用彩色 sbg 的

1708
01:11:45,000 --> 01:11:51,000
而且好像微软类似的技术本身就一上来就直接是彩色的十两图

1709
01:11:51,000 --> 01:11:54,000
啊那可能是私有技术吧

1710
01:11:54,000 --> 01:11:55,000
ok

1711
01:11:55,000 --> 01:11:59,000
反正 apple 的 apple 的这个 color emoji 这套那个 font 的话

1712
01:11:59,000 --> 01:12:01,000
它其实里面是位图嘛

1713
01:12:01,000 --> 01:12:03,000
然后你所以它你仔细看它并不是

1714
01:12:03,000 --> 01:12:05,000
不是你如果你只要放大的话

1715
01:12:05,000 --> 01:12:07,000
它并不是无级放大的

1716
01:12:07,000 --> 01:12:09,000
它不是无级放大的

1717
01:12:09,000 --> 01:12:10,000
明白了

1718
01:12:10,000 --> 01:12:11,000
它不是无级的

1719
01:12:11,000 --> 01:12:15,000
比如说你 12 point 14 point 16 point 的其实是不大一样的

1720
01:12:15,000 --> 01:12:18,000
其实这里要解释一下那个字体的概念啊

1721
01:12:18,000 --> 01:12:21,000
因为刚才讲了是一个点位和一个东西的对应

1722
01:12:21,000 --> 01:12:22,000
那个东西是什么

1723
01:12:22,000 --> 01:12:25,000
就可能有两种方式一种是刚才所谓的点阵

1724
01:12:25,000 --> 01:12:29,000
就是一个多少几成几的一个方块里面哪些点是什么颜色

1725
01:12:29,000 --> 01:12:31,000
这么一个一个马赛克

1726
01:12:31,000 --> 01:12:32,000
马赛克吗

1727
01:12:32,000 --> 01:12:37,000
对然后另外就是所谓的向亮的字体就是它存的是一堆这个

1728
01:12:37,000 --> 01:12:39,000
这个一些一些 point

1729
01:12:39,000 --> 01:12:43,000
这些 point 就它会通过某种方式组合成一个一个区域

1730
01:12:43,000 --> 01:12:47,000
然后汇上颜色之后就变成一个黑白的字

1731
01:12:47,000 --> 01:12:50,000
啊这个字还是一个轮廓轮廓

1732
01:12:50,000 --> 01:12:53,000
就这个怎么把一个形状表达出来

1733
01:12:53,000 --> 01:12:58,000
这个是字体文件要干的或者叫字库文件要干的事情对吧

1734
01:12:58,000 --> 01:12:59,000
对

1735
01:12:59,000 --> 01:13:02,000
这就是我们平时大家在电脑里面看的 font

1736
01:13:02,000 --> 01:13:05,000
这个 font 文件里面到底是什么东西

1737
01:13:05,000 --> 01:13:10,000
对关于那个一个 glif 它本身的这个图像形式

1738
01:13:10,000 --> 01:13:13,000
我觉得按照 Ryo 刚才说了我们其实应该可以分成三种

1739
01:13:13,000 --> 01:13:16,000
一种是那种黑白的点阵

1740
01:13:16,000 --> 01:13:19,000
然后另一种是更常见的这个矢亮字体

1741
01:13:19,000 --> 01:13:21,000
它是一个矢亮的轮廓

1742
01:13:21,000 --> 01:13:24,000
当然这个矢亮轮廓可能有很多种描述方式

1743
01:13:24,000 --> 01:13:26,000
但它统一上都是一个矢亮的轮廓

1744
01:13:26,000 --> 01:13:31,000
还有一种是那个 emoji 常用的这种图片一个彩色的位图

1745
01:13:31,000 --> 01:13:37,000
对它比那种点阵的我们最早看到那种点阵的那个位图要高端的很多

1746
01:13:37,000 --> 01:13:39,000
就是说我们可以大致上这样理解

1747
01:13:39,000 --> 01:13:41,000
就是他们不是同一种技术

1748
01:13:41,000 --> 01:13:42,000
对对对

1749
01:13:42,000 --> 01:13:46,000
所以最常见的可能最古老的是那种点阵字库

1750
01:13:46,000 --> 01:13:49,000
大家应该还在因为 DOS 时代还挺明确的吧

1751
01:13:49,000 --> 01:13:53,000
那个什么 16 乘以 16 个像素的那个叫什么字体来的

1752
01:13:53,000 --> 01:13:57,000
就是当时用 WPSDOS 版的时候还有的

1753
01:13:57,000 --> 01:13:58,000
Fixes

1754
01:13:58,000 --> 01:14:00,000
哇是 Fixes

1755
01:14:00,000 --> 01:14:02,000
这个是英文的吗还有中文的吗

1756
01:14:02,000 --> 01:14:03,000
有个有个国标的

1757
01:14:03,000 --> 01:14:05,000
有的

1758
01:14:05,000 --> 01:14:06,000
点阵字库

1759
01:14:06,000 --> 01:14:08,000
包括后来

1760
01:14:08,000 --> 01:14:09,000
对啊

1761
01:14:09,000 --> 01:14:12,000
点阵的送体在 Windows 应该是 7 之前吧

1762
01:14:12,000 --> 01:14:15,000
是什么中意中标送体吗

1763
01:14:15,000 --> 01:14:16,000
好像就是那个

1764
01:14:16,000 --> 01:14:23,000
现在包括很多的那个现在很多中国的 LED 的那个显示屏上还会还会使用这种

1765
01:14:23,000 --> 01:14:24,000
没错没错

1766
01:14:24,000 --> 01:14:29,000
热烈欢迎领导力临访问之类的那个就是这些

1767
01:14:29,000 --> 01:14:33,000
那个红色的 LED 灯题目是吧

1768
01:14:33,000 --> 01:14:37,000
大家坐地铁的都地铁上面都是嘛就是那些显示的

1769
01:14:37,000 --> 01:14:38,000
对啊

1770
01:14:38,000 --> 01:14:41,000
就是那种小型的那个 LED 都是那样的

1771
01:14:41,000 --> 01:14:47,000
就那个那个中意那个送体应该是有 9 像素到 16 个像素的

1772
01:14:47,000 --> 01:14:50,000
就是每一个就 90111213

1773
01:14:50,000 --> 01:14:52,000
我记得对小是 11 吧

1774
01:14:52,000 --> 01:14:56,000
是 9 像素是那个 9 像素只有那个

1775
01:14:56,000 --> 01:14:59,000
台湾那套字体叫什么

1776
01:14:59,000 --> 01:15:00,000
嗯

1777
01:15:00,000 --> 01:15:04,000
名流体可以支持到 9 像素

1778
01:15:04,000 --> 01:15:06,000
就是中意是从 11 像素开始

1779
01:15:06,000 --> 01:15:07,000
11 个像素是吧

1780
01:15:07,000 --> 01:15:09,000
反正 11 到 16 应该是齐的我记得

1781
01:15:09,000 --> 01:15:10,000
对

1782
01:15:11,000 --> 01:15:14,000
比 11 小的话有些字就卡起来了

1783
01:15:14,000 --> 01:15:17,000
但是好像完全一团糊了嘛

1784
01:15:17,000 --> 01:15:21,000
因为最早时候最早时候我们在做那个网页的时候

1785
01:15:21,000 --> 01:15:25,000
就大家手工指定说这个最小是 11 个 pixel 应该是 10.5

1786
01:15:25,000 --> 01:15:27,000
等一下我我想纠正一个细节

1787
01:15:27,000 --> 01:15:29,000
就是那个不叫名流体吧是吧

1788
01:15:29,000 --> 01:15:32,000
那个叫名利然后有一个 U

1789
01:15:32,000 --> 01:15:33,000
对

1790
01:15:35,000 --> 01:15:36,000
名利 U

1791
01:15:36,000 --> 01:15:37,000
U 对

1792
01:15:37,000 --> 01:15:38,000
对

1793
01:15:39,000 --> 01:15:42,000
我一忘记是什么了但是它是一个特殊的

1794
01:15:42,000 --> 01:15:43,000
那个 U 代表什么

1795
01:15:43,000 --> 01:15:47,000
它那个 U 是 UI 的意思吗还是什么

1796
01:15:47,000 --> 01:15:50,000
就因为当时 Windows 好像对文件名的长度有个限制

1797
01:15:50,000 --> 01:15:53,000
所以它没法完整写完这个字体名称

1798
01:15:53,000 --> 01:15:55,000
原来是这样啊

1799
01:15:56,000 --> 01:15:59,000
怪不得那个小时候觉得那个 U 要大些

1800
01:15:59,000 --> 01:16:01,000
可能是 UI 还是什么

1801
01:16:01,000 --> 01:16:03,000
U 1 后面的不知道是什么了

1802
01:16:04,000 --> 01:16:09,000
后来我记得 Windows 那个中意送应该是到 Windows 7 还是 8 的时候

1803
01:16:09,000 --> 01:16:14,000
它把那个小字号的那个字体默认用那个雅黑了嘛

1804
01:16:14,000 --> 01:16:17,000
就是中文的那个字体

1805
01:16:17,000 --> 01:16:19,000
用雅黑来显示了

1806
01:16:19,000 --> 01:16:20,000
然后那个中意

1807
01:16:20,000 --> 01:16:23,000
改雅黑是从 WindowsVista 开始的

1808
01:16:23,000 --> 01:16:26,000
Vista 也是用小字号也是用雅黑了嘛

1809
01:16:26,000 --> 01:16:28,000
有雅黑和小字号用雅黑是两个概念

1810
01:16:28,000 --> 01:16:31,000
应该说 Vista 的时候中文的

1811
01:16:31,000 --> 01:16:36,000
怎么说简体中文这边的 UI 字体还是中意送体

1812
01:16:36,000 --> 01:16:40,000
但是雅黑已经已经随系统搭载了

1813
01:16:40,000 --> 01:16:42,000
还是随 Office 搭载我不太记得清

1814
01:16:42,000 --> 01:16:43,000
有了吗

1815
01:16:43,000 --> 01:16:47,000
雅黑应该是随 Windows 7 和 Vista 发布的

1816
01:16:47,000 --> 01:16:49,000
然后它有一套那个 C 字头的字体

1817
01:16:49,000 --> 01:16:51,000
Caliberia Consolas

1818
01:16:51,000 --> 01:16:55,000
那套是随那个对那个是 Windows 7

1819
01:16:55,000 --> 01:16:57,000
那是 ClearView

1820
01:16:57,000 --> 01:16:59,000
对那是随 ClearView 技术

1821
01:16:59,000 --> 01:17:00,000
对对对

1822
01:17:00,000 --> 01:17:02,000
所发布的

1823
01:17:02,000 --> 01:17:04,000
然后但是当然也有一个具体原因

1824
01:17:04,000 --> 01:17:06,000
就是因为当时就是 Windows

1825
01:17:06,000 --> 01:17:08,000
用 Windows 的那些 PC

1826
01:17:08,000 --> 01:17:11,000
很多还是那种低分辨率的屏幕

1827
01:17:11,000 --> 01:17:15,000
就可能是就不太适合用那种小字的

1828
01:17:15,000 --> 01:17:20,000
这个显示非点证字库的中文字体了

1829
01:17:20,000 --> 01:17:22,000
但后来因为现在这个屏幕分辨率也高些了嘛

1830
01:17:22,000 --> 01:17:26,000
有很多这个 Windows 那个笔记本特别是

1831
01:17:26,000 --> 01:17:28,000
是什么就是高分评

1832
01:17:28,000 --> 01:17:29,000
虽然不是 Retina 那么高

1833
01:17:29,000 --> 01:17:30,000
但是也有很多事了

1834
01:17:30,000 --> 01:17:33,000
这个时候在显示这个雅黑小字号

1835
01:17:33,000 --> 01:17:35,000
就问题不是那么大

1836
01:17:37,000 --> 01:17:40,000
所以我一直想和大家澄清一点就是说

1837
01:17:40,000 --> 01:17:44,000
虽然我们说字体文件里面有我们有点证字

1838
01:17:44,000 --> 01:17:46,000
我们有实量有轮廓字

1839
01:17:46,000 --> 01:17:50,000
但并不是说就是这个 Font 肯定就是点证字

1840
01:17:50,000 --> 01:17:55,000
有的它是像刚才说的 Windows 它默认的 SIM Song

1841
01:17:55,000 --> 01:17:56,000
就是中意送体

1842
01:17:56,000 --> 01:17:58,000
它两套它其实那个 Font 文件里面

1843
01:17:58,000 --> 01:18:02,000
它两种的字体数据都有的

1844
01:18:02,000 --> 01:18:05,000
然后由系统来调用

1845
01:18:05,000 --> 01:18:06,000
当在小字号的时候

1846
01:18:06,000 --> 01:18:10,000
它就把那些点证的数据拿出来显示

1847
01:18:10,000 --> 01:18:11,000
在大字号的话

1848
01:18:11,000 --> 01:18:14,000
它把那个轮廓数据拿出来显示

1849
01:18:14,000 --> 01:18:16,000
在那个 Font 里面

1850
01:18:16,000 --> 01:18:18,000
它里面既有点证的数据

1851
01:18:18,000 --> 01:18:20,000
又有轮廓的数据

1852
01:18:20,000 --> 01:18:23,000
或者说因为那个轮廓数据

1853
01:18:23,000 --> 01:18:25,000
它有个叫做 Hinting 的一个概念

1854
01:18:25,000 --> 01:18:27,000
就是说告诉你说这个时候

1855
01:18:27,000 --> 01:18:30,000
如果你遇到一些疑难的时候你怎么去弄

1856
01:18:30,000 --> 01:18:32,000
因为毕竟你把那个轮廓画在一个

1857
01:18:32,000 --> 01:18:33,000
就是平面的一个矩阵里面

1858
01:18:33,000 --> 01:18:37,000
它有些时候那个因为轮廓的那个曲线是一个

1859
01:18:37,000 --> 01:18:39,000
数学上是无限大小的

1860
01:18:39,000 --> 01:18:40,000
就没有那个粗细的

1861
01:18:40,000 --> 01:18:43,000
但是你画到那个点证的时候

1862
01:18:43,000 --> 01:18:45,000
还是会有一些左右站哪一格的问题

1863
01:18:45,000 --> 01:18:47,000
这会有一些叫做 Hinting 的机制

1864
01:18:47,000 --> 01:18:49,000
就告诉你说这个时候你应该放到左边

1865
01:18:49,000 --> 01:18:50,000
还是右边上面还是下面

1866
01:18:50,000 --> 01:18:52,000
如果从这个角度来讲

1867
01:18:52,000 --> 01:18:53,000
点证字库的话

1868
01:18:53,000 --> 01:18:56,000
可以说是一课比较极端的 Hinting 的例子吧

1869
01:18:57,000 --> 01:18:59,000
这里说到 Hinting 的话

1870
01:18:59,000 --> 01:19:02,000
我们干脆给它翻译成叫渲染提示吧

1871
01:19:02,000 --> 01:19:05,000
这样大家会比较清楚一些

1872
01:19:05,000 --> 01:19:11,000
就是说我即便你在那个 Font 里面

1873
01:19:11,000 --> 01:19:14,000
你存储的是数学的矢量的轮廓

1874
01:19:14,000 --> 01:19:17,000
但是你最后显示到这个屏幕上

1875
01:19:17,000 --> 01:19:21,000
屏幕毕竟它是一个三格化的一个东西

1876
01:19:21,000 --> 01:19:24,000
所以那个念三格我一直念乍

1877
01:19:24,000 --> 01:19:25,000
乍

1878
01:19:25,000 --> 01:19:27,000
到底是三格还是乍

1879
01:19:27,000 --> 01:19:29,000
我跟真语研究过这个东西

1880
01:19:29,000 --> 01:19:31,000
结论是什么

1881
01:19:31,000 --> 01:19:35,000
结论是这个字的读音是一个坑

1882
01:19:35,000 --> 01:19:38,000
这个字的正音规则是一个坑

1883
01:19:38,000 --> 01:19:40,000
还是念三格乍来的

1884
01:19:40,000 --> 01:19:41,000
因为我给它翻牌了

1885
01:19:41,000 --> 01:19:42,000
我还大使那

1886
01:19:42,000 --> 01:19:46,000
因为我觉得严格来说乍才是它的标准音

1887
01:19:46,000 --> 01:19:49,000
但是它在很多地方都被误读成山

1888
01:19:49,000 --> 01:19:52,000
所以渐渐的好像字典的正音规则

1889
01:19:52,000 --> 01:19:55,000
开始倾向于将一些经常被念成山的数语

1890
01:19:55,000 --> 01:19:58,000
直接标成是山这个意思

1891
01:19:58,000 --> 01:20:00,000
那三格化是吗

1892
01:20:00,000 --> 01:20:01,000
我现在是这么逻辑

1893
01:20:01,000 --> 01:20:04,000
如果但凡涉及到电脑相关的就是山

1894
01:20:04,000 --> 01:20:07,000
然后但凡涉及到实体的那个泥巴

1895
01:20:07,000 --> 01:20:08,000
乍来

1896
01:20:08,000 --> 01:20:09,000
就是乍来

1897
01:20:09,000 --> 01:20:10,000
好吧

1898
01:20:10,000 --> 01:20:12,000
简单分一下用场景

1899
01:20:12,000 --> 01:20:14,000
那叫什么 restoration 是吗

1900
01:20:14,000 --> 01:20:15,000
那英文怎么念来的

1901
01:20:15,000 --> 01:20:16,000
Resterization

1902
01:20:17,000 --> 01:20:18,000
Resterize

1903
01:20:18,000 --> 01:20:19,000
Resterize

1904
01:20:19,000 --> 01:20:20,000
对就是要

1905
01:20:20,000 --> 01:20:25,000
因为就涉及到从轮廓信息怎么样给它套到那个

1906
01:20:25,000 --> 01:20:26,000
像素矩阵上面

1907
01:20:26,000 --> 01:20:27,000
这个网格上去

1908
01:20:27,000 --> 01:20:28,000
矩阵上去

1909
01:20:28,000 --> 01:20:31,000
所以它不可能是套的正正好的

1910
01:20:31,000 --> 01:20:35,000
那刚好就套在那个矩阁半点

1911
01:20:35,000 --> 01:20:37,000
那我是往上挪呢还是往下挪呢

1912
01:20:37,000 --> 01:20:41,000
这这这这有时候就是就是要渲染引擎来做这个事情

1913
01:20:41,000 --> 01:20:46,000
那 hinting 这个渲染提示呢就是来来进行这样一个工作

1914
01:20:46,000 --> 01:20:48,000
渲染提示有两种实现方式

1915
01:20:48,000 --> 01:20:49,000
一种是叫做 auto hinting

1916
01:20:49,000 --> 01:20:50,000
就是在那个渲染引擎里面

1917
01:20:50,000 --> 01:20:55,000
它提供了一个通用的一个 hinting 的一个一个算法

1918
01:20:55,000 --> 01:20:57,000
然后还有就是直接嵌入到自体内部的

1919
01:20:57,000 --> 01:21:01,000
就是说告诉你说渲染引擎你虽然得出的是那个结论

1920
01:21:01,000 --> 01:21:03,000
但是我这个自体设计师我告诉你

1921
01:21:03,000 --> 01:21:05,000
你我此处应该是这样

1922
01:21:06,000 --> 01:21:08,000
我觉得那个我来我来再补充一点

1923
01:21:08,000 --> 01:21:11,000
跟那个刚才说的这个渲染提示有关的东西

1924
01:21:11,000 --> 01:21:13,000
就首先我觉得这里有一个问题

1925
01:21:13,000 --> 01:21:16,000
就是说一个矢量的轮廓

1926
01:21:16,000 --> 01:21:20,000
它经过了这样一个三格化的过程中

1927
01:21:20,000 --> 01:21:22,000
它肯定不可能是精确的显示

1928
01:21:22,000 --> 01:21:24,000
它会有一种失真吗

1929
01:21:24,000 --> 01:21:26,000
那么这其实是一个下采样的过程

1930
01:21:26,000 --> 01:21:28,000
如果说用计算机的数据来说

1931
01:21:28,000 --> 01:21:33,000
所以它这里有一个有一个信号处理的这个数语叫做混叠

1932
01:21:33,000 --> 01:21:37,000
就是说当你从一个模拟的信号

1933
01:21:37,000 --> 01:21:39,000
或者说一个非常高频的信号

1934
01:21:39,000 --> 01:21:41,000
把它采样成一个低频的信号的时候

1935
01:21:41,000 --> 01:21:42,000
这个信号就会发生一个混叠

1936
01:21:42,000 --> 01:21:44,000
所以我们有一个数语叫反混叠

1937
01:21:44,000 --> 01:21:47,000
但是这个数语在那个自体的这个处理中

1938
01:21:47,000 --> 01:21:50,000
经常被翻译成叫什么抗锯齿

1939
01:21:50,000 --> 01:21:52,000
就是 antialias

1940
01:21:52,000 --> 01:21:55,000
但其实 antialias 这个词里面没有锯齿这个字

1941
01:21:55,000 --> 01:21:59,000
它的标准翻译应该翻译成抗混叠或者是反混叠

1942
01:21:59,000 --> 01:22:01,000
比如说抗锯齿有点像一个意义

1943
01:22:01,000 --> 01:22:04,000
就是他解释了这个东西最终是干嘛

1944
01:22:04,000 --> 01:22:06,000
对但是所以实际上我们就知道

1945
01:22:06,000 --> 01:22:09,000
我觉得翻译成抗锯齿有点误导

1946
01:22:09,000 --> 01:22:13,000
因为很多时候 antialias 做的并不是一件抗锯齿的事情

1947
01:22:13,000 --> 01:22:15,000
它可能跟锯齿这个事情完全没有关系

1948
01:22:15,000 --> 01:22:20,000
有的时候抗锯齿系统会有一套自己固有的方式来绘制这个曲线

1949
01:22:20,000 --> 01:22:23,000
比如说是什么灰度层面的抗锯齿之类的

1950
01:22:23,000 --> 01:22:27,000
但是它并不是完全解决这个抗混叠的这件事情

1951
01:22:27,000 --> 01:22:30,000
那么微软想出来的这个 hinting 的技术

1952
01:22:30,000 --> 01:22:35,000
它是在这个通用的抗锯齿的这种思路上再加了一层

1953
01:22:35,000 --> 01:22:40,000
比如说它将某一些曲线的形状进行了一些变异

1954
01:22:40,000 --> 01:22:43,000
这个变异很可能是不规则的变异

1955
01:22:43,000 --> 01:22:45,000
是需要人工去指导的这个变异

1956
01:22:45,000 --> 01:22:47,000
所以它给它加了一个 hinting 的信息

1957
01:22:47,000 --> 01:22:51,000
就是一个引导或者说一个什么提示的信息

1958
01:22:51,000 --> 01:22:55,000
来告诉这个操作系统怎样去改变这个轮廓的形状

1959
01:22:55,000 --> 01:22:58,000
使得它能显示得更加的完美一点

1960
01:22:58,000 --> 01:23:00,000
就大致上是这样的一个过程

1961
01:23:00,000 --> 01:23:02,000
但这也引入了一个哲学的问题

1962
01:23:02,000 --> 01:23:04,000
就是一个设计哲学的问题

1963
01:23:04,000 --> 01:23:08,000
就是说在 Windows 上它因为最开始的时候长期来看

1964
01:23:08,000 --> 01:23:10,000
是相当长的一段时间

1965
01:23:10,000 --> 01:23:12,000
我们在用那种作为低分辨率的显示设备

1966
01:23:12,000 --> 01:23:16,000
就是可能只有我记得我最早的一个图形显示器

1967
01:23:16,000 --> 01:23:18,000
是个 640 x 480 的一个 CRT

1968
01:23:18,000 --> 01:23:20,000
对吧

1969
01:23:20,000 --> 01:23:21,000
然后后来大家

1970
01:23:21,000 --> 01:23:23,000
你最早的显示器难道不应该是台电视吗

1971
01:23:23,000 --> 01:23:24,000
对啊就是 CRT

1972
01:23:24,000 --> 01:23:26,000
80 x 40 的制服

1973
01:23:26,000 --> 01:23:28,000
小棒玩齐了无穷啊

1974
01:23:28,000 --> 01:23:32,000
就说有故意的时候

1975
01:23:32,000 --> 01:23:36,000
后来是升级成一个什么 800 x 600 像素的

1976
01:23:36,000 --> 01:23:41,000
一个什么索尼的什么特富龙还是什么什么龙的一个屏幕

1977
01:23:41,000 --> 01:23:43,000
我忘了一个名字了

1978
01:23:43,000 --> 01:23:46,000
然后再后来有了那个 LCD

1979
01:23:46,000 --> 01:23:49,000
我记得当时标喷是 1024 x 768 的嘛

1980
01:23:49,000 --> 01:23:54,000
然后已经是非常晚进了才出现所谓的这个 15440

1981
01:23:54,000 --> 01:23:58,000
当时自己叫做高分屏的一种宽屏幕了嘛

1982
01:23:58,000 --> 01:24:00,000
但其实现在

1983
01:24:00,000 --> 01:24:05,000
在那个时候他选择了说我们在这个有限的物理基础上

1984
01:24:05,000 --> 01:24:07,000
尽量显示清楚嘛

1985
01:24:07,000 --> 01:24:09,000
所谓清楚就是说笔画分明

1986
01:24:09,000 --> 01:24:11,000
不要出现模模糊糊的那种效果

1987
01:24:11,000 --> 01:24:13,000
所以导致刚刚我们一个是说

1988
01:24:13,000 --> 01:24:15,000
这个中意送全部是点证

1989
01:24:15,000 --> 01:24:17,000
小字号的说全部是点证智库

1990
01:24:17,000 --> 01:24:23,000
还有像那个像那个微软自带那个字体的 Ariel 和 Verdana

1991
01:24:23,000 --> 01:24:26,000
当时是在网页排排上用的比较多显示文字的嘛

1992
01:24:26,000 --> 01:24:28,000
还有那个叫做 Georgia

1993
01:24:28,000 --> 01:24:32,000
他们都在非就没有开抗拒扯情况下

1994
01:24:32,000 --> 01:24:34,000
显示的还是一种就是你可以看得出明显

1995
01:24:34,000 --> 01:24:39,000
他是一颗一颗小酵素构成的这么一个一个字符

1996
01:24:39,000 --> 01:24:41,000
然后来但是你对比一下在那个 Mac 上面

1997
01:24:41,000 --> 01:24:45,000
他说这个只是就是显示气分辨率低

1998
01:24:45,000 --> 01:24:47,000
这是一个暂时的物理限制

1999
01:24:47,000 --> 01:24:48,000
时间长他会解决的嘛

2000
01:24:48,000 --> 01:24:50,000
那如果我们从长远的角度来看

2001
01:24:50,000 --> 01:24:54,000
我们不要去做那么太多的叫做什么来的局部细节优化吧

2002
01:24:54,000 --> 01:24:56,000
局部优化就 Local Optimization

2003
01:24:56,000 --> 01:24:58,000
但是就是用一种通用的方法去显示

2004
01:24:58,000 --> 01:25:00,000
但虽然看起来就是有点模模糊糊灰的

2005
01:25:00,000 --> 01:25:04,000
但现在看来这个因为屏幕分辨率上上去了嘛

2006
01:25:04,000 --> 01:25:09,000
反而是我们觉得 Mac 上面显示的那套字的比较漂亮

2007
01:25:09,000 --> 01:25:14,000
因为他更加终于反映出那个自己本身的设计师的一个一个形状嘛

2008
01:25:14,000 --> 01:25:21,000
这是一个非常重要的一个哲学设计哲学的不同取向问题

2009
01:25:21,000 --> 01:25:32,000
一个是在设计字如何保持保持字体的设计和如何保持那个清晰的显示这样两个两个取向中

2010
01:25:32,000 --> 01:25:37,000
Windows 他取向的是尽量让他显示的清晰

2011
01:25:37,000 --> 01:25:41,000
所以他不惜牺牲改改去牺牲设计

2012
01:25:41,000 --> 01:25:45,000
他把那个字改掉他会把这个显示的像素给挪来挪去

2013
01:25:45,000 --> 01:25:49,000
他特别看重 Hinting 特别看重他的渲染提示

2014
01:25:49,000 --> 01:25:51,000
然后用那个渲染然后去挪来挪去

2015
01:25:51,000 --> 01:25:58,000
把这个字挪去匹配他的显示的像素达到像素的字的显示的清晰度

2016
01:25:58,000 --> 01:26:00,000
但是牺牲了文字的设计形状

2017
01:26:00,000 --> 01:26:05,000
而 Mac 他是为了保证这个字体原来的形状

2018
01:26:05,000 --> 01:26:09,000
他可能有时候牺牲字体的清晰度

2019
01:26:09,000 --> 01:26:16,000
但是在老的屏幕上他可能显示会比较模糊

2020
01:26:16,000 --> 01:26:20,000
但是随着硬件的现在的逐步的发展

2021
01:26:20,000 --> 01:26:25,000
依然能保持他的字体设计他原来的一个造型和形状

2022
01:26:25,000 --> 01:26:29,000
现在我们用的那些智能手机都是高分屏

2023
01:26:29,000 --> 01:26:32,000
基本上就不存在这个问题

2024
01:26:32,000 --> 01:26:37,000
所以 Windows 还是工程师做出来的

2025
01:26:38,000 --> 01:26:40,000
做 Mac 的都是艺术家

2026
01:26:40,000 --> 01:26:45,000
你要是作为一个字体设计师怎么搞的

2027
01:26:45,000 --> 01:26:49,000
你能把我的字全部都改掉都不是我的字了

2028
01:26:52,000 --> 01:26:55,000
也不能完全这么说

2029
01:26:55,000 --> 01:27:01,000
因为其实早期在 20 世纪 30 40 年代的时候

2030
01:27:01,000 --> 01:27:05,000
不是也有什么 Grade-based typography

2031
01:27:05,000 --> 01:27:09,000
本身就是在一个矩阵格上设计的字体

2032
01:27:09,000 --> 01:27:13,000
然后微软早期请来的自己设计师其实也是

2033
01:27:13,000 --> 01:27:17,000
一上来就明确的知道自己需要设计一套

2034
01:27:17,000 --> 01:27:24,000
在当时的高分屏现在的低分屏上面能够清晰显示的字体

2035
01:27:24,000 --> 01:27:26,000
所以这其实也是他们自己的选择

2036
01:27:27,000 --> 01:27:32,000
就是在当时的设计的制约上尽量去做好的设计

2037
01:27:32,000 --> 01:27:37,000
因为其实每个时代都有他们自己的字体设计的制约

2038
01:27:37,000 --> 01:27:41,000
以前在千字时代其实也有其实多多少少也有些制约的

2039
01:27:41,000 --> 01:27:44,000
比如说早期喇叭口什么的这种东西

2040
01:27:44,000 --> 01:27:47,000
都是在千字时代才出现那种

2041
01:27:47,000 --> 01:27:51,000
为了对抗技术上的缺陷出现的一些特征

2042
01:27:51,000 --> 01:27:55,000
有磨到那个叫什么就是进到别的地方去的问题

2043
01:27:55,000 --> 01:27:57,000
可是你还有合体字

2044
01:27:58,000 --> 01:28:02,000
喇叭口一开始是为了抗磨损

2045
01:28:02,000 --> 01:28:08,000
应该是在照牌时代防止折角的地方过于圆润

2046
01:28:09,000 --> 01:28:13,000
照牌是将一个小底片进行缩放这样的过程

2047
01:28:15,000 --> 01:28:20,000
然后拉丁语的衬衫其实最开始也是因为在雕刻的时候

2048
01:28:20,000 --> 01:28:23,000
把那个字母雕得比较

2049
01:28:23,000 --> 01:28:26,000
适合那种刀的硬方式

2050
01:28:26,000 --> 01:28:30,000
结构上比较 OK 然后刻起来又不是太麻烦的话

2051
01:28:30,000 --> 01:28:35,000
衬衫其实一开始就是刀的那个雕刻刀的走口

2052
01:28:35,000 --> 01:28:37,000
最锋利那一部分

2053
01:28:37,000 --> 01:28:42,000
最开始的希腊语的希腊语传统上是没有衬衫体的

2054
01:28:42,000 --> 01:28:46,000
即便现在希腊语在正式场合也是只有黑体的

2055
01:28:46,000 --> 01:28:49,000
你不能因此说衬衫体就是古典

2056
01:28:49,000 --> 01:28:52,000
因为比它更古典的东西是黑体

2057
01:28:53,000 --> 01:28:58,000
所以我觉得没时代的技术都对字体有影响

2058
01:28:58,000 --> 01:29:04,000
然后我十年前还是偏爱点阵字体的

2059
01:29:04,000 --> 01:29:06,000
我不觉得 Mac 那一套比较好看

2060
01:29:06,000 --> 01:29:10,000
说实话可能跟我是个程序员有关

2061
01:29:10,000 --> 01:29:11,000
现在是无所谓的

2062
01:29:11,000 --> 01:29:15,000
不过是一个实用主义者

2063
01:29:15,000 --> 01:29:20,000
我觉得其实 Windows 那一套在希文字体上的表现并不算差

2064
01:29:20,000 --> 01:29:22,000
从最开始直到现在

2065
01:29:22,000 --> 01:29:25,000
而且它那套系统是一直在改进的

2066
01:29:25,000 --> 01:29:28,000
但是我觉得 Windows 犯了比较致命的错误

2067
01:29:28,000 --> 01:29:33,000
是在汉字的 Hinting 技术上面走了一些歪路

2068
01:29:34,000 --> 01:29:36,000
走上了不归路我觉得

2069
01:29:36,000 --> 01:29:39,000
一方面汉字的 Hinting 并不像希文的 Hinting 那么容易

2070
01:29:39,000 --> 01:29:45,000
另一方面实际上在操作汉字 Hinting 的那一波工程师和设计师团队

2071
01:29:45,000 --> 01:29:48,000
可能对汉字并不是那么的熟悉

2072
01:29:48,000 --> 01:29:51,000
包括在审美上和一些字形的细节上

2073
01:29:51,000 --> 01:29:57,000
所以导致了他们现在汉字的渲染效果就不是那么的理想

2074
01:29:57,000 --> 01:29:59,000
其实相当长一段时间内

2075
01:29:59,000 --> 01:30:07,000
就是字体渲染引擎这套东西还是在拉丁语系的工程师的指导下开发的吧

2076
01:30:07,000 --> 01:30:10,000
嗯,感觉上是

2077
01:30:10,000 --> 01:30:16,000
有些选择看在母语的人士看还是挺奇怪

2078
01:30:16,000 --> 01:30:17,000
但是也没办法

2079
01:30:17,000 --> 01:30:20,000
当时条件有限嘛,没有那么多人才去弄

2080
01:30:20,000 --> 01:30:22,000
那现在情况就不一样了

2081
01:30:22,000 --> 01:30:24,000
大家别的不说

2082
01:30:24,000 --> 01:30:27,000
我看现在各个手续厂都在搞自定义字体了

2083
01:30:27,000 --> 01:30:28,000
还挺厉害的

2084
01:30:28,000 --> 01:30:30,000
对,现在已经有很多

2085
01:30:30,000 --> 01:30:32,000
从老罗开始吧

2086
01:30:32,000 --> 01:30:36,000
就是从发布一个新系统的时候会把字体拿出来说

2087
01:30:36,000 --> 01:30:38,000
这是我们的一个特征

2088
01:30:38,000 --> 01:30:40,000
对,这个挺好

2089
01:30:40,000 --> 01:30:42,000
但是还是那个问题

2090
01:30:42,000 --> 01:30:45,000
就是这不同的哲学还是有不同的结论的

2091
01:30:45,000 --> 01:30:47,000
包括现在刚才吴涛提到一个就是说

2092
01:30:47,000 --> 01:30:49,000
在不同的就是做字体设计的时候

2093
01:30:49,000 --> 01:30:52,000
你也有这种不同的用场景的考虑嘛

2094
01:30:52,000 --> 01:30:55,000
过去会说是一个什么显示字体和这个打印字体

2095
01:30:55,000 --> 01:30:57,000
这两种情况也不一样对吧

2096
01:30:57,000 --> 01:31:00,000
打印的话你用什么方式打印

2097
01:31:00,000 --> 01:31:03,000
其实我觉得本质上还是说一个分辨率的问题吧

2098
01:31:03,000 --> 01:31:04,000
就是说

2099
01:31:04,000 --> 01:31:05,000
因为打印的话

2100
01:31:05,000 --> 01:31:08,000
不管你用当时这种激光还是喷墨

2101
01:31:08,000 --> 01:31:11,000
它的那个就是所谓的就是分辨率

2102
01:31:11,000 --> 01:31:13,000
DPI 或者是平面上 PPI

2103
01:31:13,000 --> 01:31:15,000
还是有一个数量级的差异

2104
01:31:15,000 --> 01:31:16,000
只是说现在

2105
01:31:16,000 --> 01:31:17,000
几千的对吧

2106
01:31:17,000 --> 01:31:19,000
DPI 都几千几千

2107
01:31:19,000 --> 01:31:22,000
DPI 一般是最低的也有 300 嘛

2108
01:31:22,000 --> 01:31:24,000
就是有 300 个 DOT

2109
01:31:24,000 --> 01:31:25,000
但是它那个算法不太一样

2110
01:31:25,000 --> 01:31:26,000
因为它是

2111
01:31:26,000 --> 01:31:29,000
比如说它喷墨的话就打黑白的情况

2112
01:31:29,000 --> 01:31:30,000
喷墨的墨点不一样

2113
01:31:30,000 --> 01:31:32,000
喷墨的墨点超小

2114
01:31:32,000 --> 01:31:33,000
因为它有个这个问题

2115
01:31:33,000 --> 01:31:35,000
就是它没有办法调浓度

2116
01:31:35,000 --> 01:31:38,000
就是它不可能说这个墨水有浓度的深浅

2117
01:31:38,000 --> 01:31:39,000
它只有一种浓度的墨

2118
01:31:39,000 --> 01:31:43,000
但是怎么实现这个所谓的这个灰度呢

2119
01:31:43,000 --> 01:31:46,000
就是说靠那个把那个小墨点分配的

2120
01:31:46,000 --> 01:31:51,000
这个在单位那个面积上分达的多点还是少点的问题嘛

2121
01:31:51,000 --> 01:31:55,000
那么这个时候 DPI 就和 PPI 有一个最本质的区别

2122
01:31:55,000 --> 01:31:56,000
就是一个像素点

2123
01:31:56,000 --> 01:31:58,000
它其实理论上可以显示

2124
01:31:58,000 --> 01:32:00,000
就是只考虑这个

2125
01:32:00,000 --> 01:32:03,000
就是灰阶的话也有 256 种灰度嘛

2126
01:32:03,000 --> 01:32:06,000
就从最黑到最白嘛

2127
01:32:06,000 --> 01:32:11,000
但是你在一个同样的小方块面上面打印这个墨点的话

2128
01:32:11,000 --> 01:32:16,000
它其实只能说喷 10 个墨点和 1000 个墨点这种区别

2129
01:32:16,000 --> 01:32:20,000
所以这个时候 DPI 并不能完全和 PPI 的计量方式等同

2130
01:32:20,000 --> 01:32:24,000
但是单看数字的话确实通常是要高一个数量级了

2131
01:32:24,000 --> 01:32:28,000
像 1200 啊,1800 啊这些都还比较常见的嘛

2132
01:32:28,000 --> 01:32:31,000
打印机的那个点都是几千几千

2133
01:32:31,000 --> 01:32:33,000
对啊,3600 那种高级

2134
01:32:33,000 --> 01:32:35,000
就是专业打印机 3000 多以上也是很正常的

2135
01:32:35,000 --> 01:32:39,000
所以,但现在我现在看有些这个 Retina 的这种屏幕

2136
01:32:39,000 --> 01:32:41,000
现在比如说你看那个 iPhone 6 加

2137
01:32:41,000 --> 01:32:45,000
就是那个大号那个它不是说是一个三倍的的吗

2138
01:32:45,000 --> 01:32:48,000
三倍的话你再算上它的一个亚像素

2139
01:32:48,000 --> 01:32:52,000
就是每个像素点它是红,蓝,绿三个颜色嘛

2140
01:32:52,000 --> 01:32:55,000
对,然后你再把亚像素也算进去的话

2141
01:32:55,000 --> 01:33:00,000
它的那个实际的 PPI 其实是可以在很多程度上和那个 DPI

2142
01:33:00,000 --> 01:33:03,000
有,就在数量级上是可以相提并论的

2143
01:33:03,000 --> 01:33:04,000
接近已经刷屏了对

2144
01:33:04,000 --> 01:33:08,000
对,这个时候就很多人就不是老是说这个那个什么 iPad 的那个高级

2145
01:33:08,000 --> 01:33:10,000
就是 Retina iPad 出来之后大家说

2146
01:33:10,000 --> 01:33:13,000
哇,这个就是什么就是就是

2147
01:33:13,000 --> 01:33:19,000
打高精度印刷的那种彩色杂志封面的那种显示质量

2148
01:33:19,000 --> 01:33:23,000
就是因为这个分辨率达到了一个新的量级之后产生的一个质别嘛

2149
01:33:24,000 --> 01:33:27,000
就终于感觉是硬在屏幕上的东西

2150
01:33:27,000 --> 01:33:30,000
没错没错,所以我觉得可能现在越往后走

2151
01:33:30,000 --> 01:33:35,000
而且现在还有一个新的趋势就是那个我们讲那个 VR AR 那个眼镜嘛

2152
01:33:35,000 --> 01:33:39,000
它为了实现那个没有没有网格的那种颗粒感

2153
01:33:39,000 --> 01:33:41,000
它也要不断去提高那个像素嘛

2154
01:33:41,000 --> 01:33:46,000
就是以后还就是 PPI 还会往上涨可能以两个数量级

2155
01:33:46,000 --> 01:33:48,000
这个时候我们再来看就不存在

2156
01:33:48,000 --> 01:33:52,000
可能是说以后的屏幕的质量肯定是要高于这个纸张了

2157
01:33:52,000 --> 01:33:54,000
因为纸张它还是不是不够完美嘛

2158
01:33:54,000 --> 01:33:56,000
它的那个精度来讲

2159
01:33:56,000 --> 01:33:58,000
因为你从我的墨汁去控制也好

2160
01:33:58,000 --> 01:34:01,000
还有那个墨水的浸染的一个问题也好

2161
01:34:01,000 --> 01:34:04,000
它可能还不如以后的那些超高分辨率的屏幕嘛

2162
01:34:04,000 --> 01:34:08,000
所以我对未来的这种显示技术还是挺看好的

2163
01:34:09,000 --> 01:34:15,000
但是我们追逐了这么多年终于好不容易才赶上这个纸质的那个经验

2164
01:34:17,000 --> 01:34:18,000
我们现在才赶上

2165
01:34:18,000 --> 01:34:23,000
我想问一下你们最早用的 OS X 最早的版本是 10 点几

2166
01:34:23,000 --> 01:34:27,000
我应该是 10 点 5 的时候开始用的

2167
01:34:27,000 --> 01:34:29,000
10 点 5 10 点 6 的时候

2168
01:34:29,000 --> 01:34:34,000
你们还记得就是早年就是 OS X 他们在抓屏的时候

2169
01:34:34,000 --> 01:34:35,000
在 screen capture 的时候

2170
01:34:35,000 --> 01:34:39,000
所以现在是默认是 PNG 格式是吧

2171
01:34:39,000 --> 01:34:41,000
不 它还是那个 TIFF

2172
01:34:42,000 --> 01:34:43,000
What? PNG 吧

2173
01:34:43,000 --> 01:34:48,000
反正我用 Ctrl Shift 4 的时候会出来 PNG

2174
01:34:48,000 --> 01:34:52,000
不 那个你存一下它保存下来默认是 TIFF

2175
01:34:52,000 --> 01:34:55,000
你要在你要手工选一下它才会转成 PNG 的

2176
01:34:55,000 --> 01:34:58,000
不是不是 默认的是 PNG

2177
01:34:58,000 --> 01:34:59,000
What? 哪里选?

2178
01:34:59,000 --> 01:35:00,000
默认是 PNG

2179
01:35:00,000 --> 01:35:02,000
你开那个 Grab 嘛

2180
01:35:02,000 --> 01:35:07,000
你开 Grab 你抓屏的时候它就是 GDAB 那个程序嘛

2181
01:35:07,000 --> 01:35:12,000
你拍完之后的话它保存的时候我应该默认的时候应该是这个时候是不能选 PNG

2182
01:35:12,000 --> 01:35:13,000
那个可以选

2183
01:35:13,000 --> 01:35:14,000
那个可以选

2184
01:35:14,000 --> 01:35:15,000
不能选 PNG

2185
01:35:15,000 --> 01:35:16,000
但是

2186
01:35:17,000 --> 01:35:20,000
你可以试一下 我比较确定这一个

2187
01:35:23,000 --> 01:35:27,000
What? 你说用 Grab 程序截图的时候是

2188
01:35:27,000 --> 01:35:31,000
对 但你用那个快捷键就是用 Grab 嘛

2189
01:35:31,000 --> 01:35:32,000
对

2190
01:35:32,000 --> 01:35:34,000
然后它这个时候是 TIFF 是不能改的

2191
01:35:34,000 --> 01:35:37,000
你得存完之后再用那个 preview 打开

2192
01:35:37,000 --> 01:35:40,000
然后再另存为 PNG 格式

2193
01:35:40,000 --> 01:35:41,000
对对对

2194
01:35:41,000 --> 01:35:46,000
OK OK 这个就是我最脑火的一个事情

2195
01:35:46,000 --> 01:35:49,000
所以后来我的解决方案就更简单 就绕过这一条了

2196
01:35:49,000 --> 01:35:51,000
因为 Grab 它有两种应用方式

2197
01:35:51,000 --> 01:35:53,000
一个是保存成文件

2198
01:35:53,000 --> 01:35:55,000
另外一个是保存的内存里面

2199
01:35:55,000 --> 01:35:57,000
保存内存里面之后呢

2200
01:35:57,000 --> 01:35:59,000
就是温度是剪贴版吗

2201
01:35:59,000 --> 01:36:03,000
对 没错 然后这个时候你再开一个空白的 preview

2202
01:36:03,000 --> 01:36:04,000
然后再按粘贴的话

2203
01:36:04,000 --> 01:36:08,000
它会自动把那个粘成一个到 preview 里面去 那个截图

2204
01:36:08,000 --> 01:36:12,000
就是说你在这个时候点保存就有 PNG 可以选

2205
01:36:12,000 --> 01:36:14,000
就可以绕过一次先存为 TIFF

2206
01:36:14,000 --> 01:36:17,000
然后再转成 PNG 这么一个尴尬的状况

2207
01:36:17,000 --> 01:36:23,000
所以你在 MAC 上面截图方法和 Windows 上面人的截图方法是一样的

2208
01:36:23,000 --> 01:36:24,000
没错

2209
01:36:24,000 --> 01:36:26,000
没错

2210
01:36:26,000 --> 01:36:31,000
我为什么问这个是因为就在普通的那个规定里面

2211
01:36:31,000 --> 01:36:35,000
就大家是默认它是自动会出 Ping 就是 PNG 本件

2212
01:36:35,000 --> 01:36:39,000
然后在早期的那个 OS X 里面

2213
01:36:39,000 --> 01:36:42,000
它默认保存是一个 PDF 文件

2214
01:36:42,000 --> 01:36:43,000
对

2215
01:36:43,000 --> 01:36:46,000
PDF 这个事情也要讲一下

2216
01:36:46,000 --> 01:36:47,000
如果我没记错的话

2217
01:36:47,000 --> 01:36:52,000
因为当时整个那个就是 MAC 的 OS X 的那个 GUI

2218
01:36:52,000 --> 01:36:55,000
最开始是基于 PDF 同一条技术来做的

2219
01:36:55,000 --> 01:36:56,000
对

2220
01:36:56,000 --> 01:36:57,000
它就等于

2221
01:36:57,000 --> 01:36:58,000
我是想说这一点

2222
01:36:58,000 --> 01:37:00,000
就是说从 OS X 开始做了

2223
01:37:00,000 --> 01:37:06,000
它就等于是想把这个所有的这个 GUI

2224
01:37:06,000 --> 01:37:08,000
印刷在屏幕上

2225
01:37:08,000 --> 01:37:09,000
没错

2226
01:37:09,000 --> 01:37:11,000
它是用一套用于

2227
01:37:11,000 --> 01:37:12,000
描述打印机的方式

2228
01:37:12,000 --> 01:37:15,000
来做屏幕显示

2229
01:37:15,000 --> 01:37:17,000
来做屏幕显示的

2230
01:37:17,000 --> 01:37:18,000
所以呢

2231
01:37:18,000 --> 01:37:19,000
它整个引擎

2232
01:37:19,000 --> 01:37:20,000
当然它

2233
01:37:20,000 --> 01:37:22,000
我们应该说 MAC 的那个文字引擎

2234
01:37:22,000 --> 01:37:24,000
它是用什么 CoreText

2235
01:37:24,000 --> 01:37:25,000
Text 是吧

2236
01:37:25,000 --> 01:37:26,000
CoreText

2237
01:37:26,000 --> 01:37:27,000
对

2238
01:37:27,000 --> 01:37:28,000
Text 对吧

2239
01:37:28,000 --> 01:37:29,000
CoreText

2240
01:37:29,000 --> 01:37:31,000
但是从 OS X 最早开始

2241
01:37:31,000 --> 01:37:33,000
它的这个渲染的一个思想

2242
01:37:33,000 --> 01:37:37,000
就是要把整个 UI 印刷在屏幕上

2243
01:37:37,000 --> 01:37:38,000
对

2244
01:37:38,000 --> 01:37:41,000
这个有个挺好的一个结果

2245
01:37:41,000 --> 01:37:46,000
就是 PDF 这个格式在 OS X 上支持的相当好

2246
01:37:46,000 --> 01:37:47,000
它是原生支持

2247
01:37:47,000 --> 01:37:48,000
对

2248
01:37:48,000 --> 01:37:49,000
不像 Windows

2249
01:37:49,000 --> 01:37:50,000
大家开个 PDF

2250
01:37:50,000 --> 01:37:51,000
现在好像 Windows 10 有

2251
01:37:51,000 --> 01:37:53,000
终于有那个原生的

2252
01:37:53,000 --> 01:37:56,000
显示那个 PDF 文件的一个支持了

2253
01:37:56,000 --> 01:37:57,000
我记得之前的版本

2254
01:37:57,000 --> 01:38:00,000
你还得装一个那个叫什么

2255
01:38:00,000 --> 01:38:01,000
Aquabat Reader

2256
01:38:01,000 --> 01:38:02,000
Aquabat

2257
01:38:02,000 --> 01:38:04,000
或者是大家国内用的那个叫

2258
01:38:04,000 --> 01:38:05,000
福星你知道吗

2259
01:38:05,000 --> 01:38:06,000
Foxit

2260
01:38:06,000 --> 01:38:07,000
啊

2261
01:38:07,000 --> 01:38:11,000
那个一个 PDF

2262
01:38:11,000 --> 01:38:12,000
很多人用

2263
01:38:12,000 --> 01:38:13,000
因为那个比较轻量级

2264
01:38:13,000 --> 01:38:15,000
Aquabat Reader 非常重

2265
01:38:15,000 --> 01:38:19,000
不像在 OS X 上那个 preview 这个程序

2266
01:38:19,000 --> 01:38:21,000
就看图看 PDF

2267
01:38:21,000 --> 01:38:23,000
还有那个叫 EPS

2268
01:38:23,000 --> 01:38:24,000
EPS

2269
01:38:24,000 --> 01:38:25,000
还有 PS

2270
01:38:25,000 --> 01:38:28,000
这几个都是同源的一个技术

2271
01:38:28,000 --> 01:38:29,000
都可以直接显示

2272
01:38:29,000 --> 01:38:30,000
对啊

2273
01:38:30,000 --> 01:38:31,000
非常方便

2274
01:38:31,000 --> 01:38:32,000
其实都是 PS

2275
01:38:32,000 --> 01:38:33,000
Postscript 的曲线

2276
01:38:33,000 --> 01:38:34,000
对对对

2277
01:38:34,000 --> 01:38:35,000
对

2278
01:38:35,000 --> 01:38:38,000
那一套叫做 Display Postscript

2279
01:38:38,000 --> 01:38:39,000
对

2280
01:38:39,000 --> 01:38:42,000
这也就扯到之前那个字库文件的问题了

2281
01:38:42,000 --> 01:38:44,000
就字体文件的问题了

2282
01:38:44,000 --> 01:38:46,000
终于扯回来了

2283
01:38:46,000 --> 01:38:49,000
我好不容易把你们拽回来了

2284
01:38:49,000 --> 01:38:50,000
对

2285
01:38:50,000 --> 01:38:52,000
因为就是所谓的那种向量字库的话

2286
01:38:52,000 --> 01:38:55,000
它有两种通用的比较常用的格式

2287
01:38:55,000 --> 01:38:57,000
一种是叫做 True Type

2288
01:38:57,000 --> 01:38:59,000
还有一种叫做 Open Type

2289
01:38:59,000 --> 01:39:00,000
对吧

2290
01:39:00,000 --> 01:39:03,000
然后如果我没记错的话

2291
01:39:03,000 --> 01:39:07,000
Open Type 是 Adobe 和苹果当时搞的

2292
01:39:07,000 --> 01:39:10,000
True Type 是

2293
01:39:10,000 --> 01:39:11,000
苹果

2294
01:39:11,000 --> 01:39:12,000
等一下是

2295
01:39:12,000 --> 01:39:14,000
微软和苹果搞的

2296
01:39:14,000 --> 01:39:15,000
Open Type 是

2297
01:39:15,000 --> 01:39:16,000
Adobe 搞的

2298
01:39:16,000 --> 01:39:18,000
微软和 Adobe 搞的

2299
01:39:18,000 --> 01:39:20,000
Open Type 当年就苹果没参加

2300
01:39:20,000 --> 01:39:21,000
对对对

2301
01:39:21,000 --> 01:39:22,000
应该没有苹果什么事

2302
01:39:22,000 --> 01:39:23,000
对对对

2303
01:39:23,000 --> 01:39:25,000
Open Type 和苹果没参加

2304
01:39:25,000 --> 01:39:28,000
其实本质上我觉得大头都是在 Adobe 那一边

2305
01:39:28,000 --> 01:39:30,000
他是出版界的老大

2306
01:39:30,000 --> 01:39:31,000
他说什么才是

2307
01:39:31,000 --> 01:39:32,000
才都算

2308
01:39:32,000 --> 01:39:35,000
没有最早就是在很久很久以前

2309
01:39:35,000 --> 01:39:37,000
都是 Adobe 来做

2310
01:39:37,000 --> 01:39:39,000
然后为了对抗 Adobe

2311
01:39:39,000 --> 01:39:42,000
苹果和微软这两家居然结合起来

2312
01:39:42,000 --> 01:39:46,000
一起做出了一个 True Type 去对抗 Adobe

2313
01:39:46,000 --> 01:39:48,000
所以这是第一次字体大战

2314
01:39:48,000 --> 01:39:51,000
那那个 True Type Open Type 的本质区别是什么

2315
01:39:51,000 --> 01:39:52,000
我一直没太搞明白

2316
01:39:52,000 --> 01:39:55,000
Open Type 是 True Type 的一个扩展没记错

2317
01:39:55,000 --> 01:39:58,000
Open Type 本质上其实就是 True Type

2318
01:39:58,000 --> 01:40:01,000
主播有多一些其他的支持

2319
01:40:01,000 --> 01:40:03,000
就是 Open Type

2320
01:40:03,000 --> 01:40:05,000
我们说 Open Type 有两种意思

2321
01:40:05,000 --> 01:40:08,000
就是那个字体的封装格式和

2322
01:40:08,000 --> 01:40:11,000
一个封装的东西还是说它那个轮廓

2323
01:40:11,000 --> 01:40:12,000
就是里面的内容

2324
01:40:12,000 --> 01:40:13,000
Open Type

2325
01:40:13,000 --> 01:40:14,000
如果从狭义的讲的话

2326
01:40:14,000 --> 01:40:17,000
True Type 的曲线是那个

2327
01:40:17,000 --> 01:40:20,000
它是二次 Bass 二曲线

2328
01:40:20,000 --> 01:40:21,000
二次 Bass 二

2329
01:40:21,000 --> 01:40:23,000
然后那个 Open Type

2330
01:40:23,000 --> 01:40:25,000
就是以前的 PS 曲线

2331
01:40:25,000 --> 01:40:27,000
就是三次 Bass 二曲线

2332
01:40:27,000 --> 01:40:29,000
曲线它本身数学的描述方式是不一样的

2333
01:40:29,000 --> 01:40:31,000
这两种有什么优劣之分吗

2334
01:40:31,000 --> 01:40:33,000
二次和三次 Bass 二曲线

2335
01:40:33,000 --> 01:40:34,000
有的

2336
01:40:34,000 --> 01:40:37,000
因为二次的曲线的话

2337
01:40:37,000 --> 01:40:39,000
它是一段曲线

2338
01:40:39,000 --> 01:40:41,000
它起点和终点

2339
01:40:41,000 --> 01:40:43,000
然后中间有个控制点来控制

2340
01:40:43,000 --> 01:40:45,000
你中间控制的完左点或者完右点

2341
01:40:45,000 --> 01:40:48,000
然后左点或者完右点那个曲线形状发生变化

2342
01:40:48,000 --> 01:40:50,000
这是 True Type 的二次

2343
01:40:50,000 --> 01:40:53,000
那 PS 的那个它是三次

2344
01:40:53,000 --> 01:40:54,000
它三次就是说

2345
01:40:54,000 --> 01:40:56,000
除了起点终点以外

2346
01:40:56,000 --> 01:40:58,000
它有两个控制点来

2347
01:40:58,000 --> 01:41:00,000
手柄来调那个曲线

2348
01:41:01,000 --> 01:41:03,000
所以三次的话它那个点要更多

2349
01:41:03,000 --> 01:41:05,000
这是优势还是劣势

2350
01:41:05,000 --> 01:41:07,000
三次的精度不一定更好吗

2351
01:41:07,000 --> 01:41:09,000
三次精度应该更好

2352
01:41:10,000 --> 01:41:11,000
所以就经常会有

2353
01:41:11,000 --> 01:41:13,000
比如说三次曲线转二次曲线

2354
01:41:13,000 --> 01:41:15,000
和二次曲线转三次曲线的问题吗

2355
01:41:15,000 --> 01:41:19,000
三次曲线的点会有损

2356
01:41:19,000 --> 01:41:23,000
就说三次转二次的时候会有损

2357
01:41:23,000 --> 01:41:25,000
因为三次它本来它用的点更多

2358
01:41:25,000 --> 01:41:28,000
二次只用三点更少

2359
01:41:28,000 --> 01:41:30,000
反过来二次转三次的时候

2360
01:41:30,000 --> 01:41:32,000
这个损失就会更少一点

2361
01:41:32,000 --> 01:41:33,000
应该没有损失

2362
01:41:33,000 --> 01:41:35,000
你把中间两个控制点

2363
01:41:35,000 --> 01:41:36,000
放到同一个位置

2364
01:41:36,000 --> 01:41:38,000
就是等于是三次的曲线

2365
01:41:38,000 --> 01:41:40,000
但是表示二次的曲线的那个

2366
01:41:40,000 --> 01:41:44,000
同样的一个曲线吗

2367
01:41:45,000 --> 01:41:48,000
这是单纯从曲线的数量来说

2368
01:41:48,000 --> 01:41:50,000
当然如果你还有其他的

2369
01:41:50,000 --> 01:41:52,000
参数也会影响到

2370
01:41:52,000 --> 01:41:55,000
转的这个压缩的问题

2371
01:41:55,000 --> 01:41:57,000
所以现在常用的

2372
01:41:57,000 --> 01:41:59,000
还是就 TrueType 的比较多一点吗

2373
01:41:59,000 --> 01:42:00,000
就是 TTF 界位

2374
01:42:00,000 --> 01:42:02,000
Windows 一般都用

2375
01:42:02,000 --> 01:42:04,000
Windows 一般用 TrueType 比较多

2376
01:42:04,000 --> 01:42:06,000
而且 Windows 它的 TrueType 字体里面

2377
01:42:06,000 --> 01:42:08,000
很多很多大量的那个

2378
01:42:08,000 --> 01:42:10,000
渲染提示

2379
01:42:10,000 --> 01:42:12,000
Hinting 信息

2380
01:42:12,000 --> 01:42:14,000
而 OpenType 它只是一个比较

2381
01:42:14,000 --> 01:42:16,000
宽泛的 Hinting

2382
01:42:16,000 --> 01:42:18,000
大概就是这样子

2383
01:42:18,000 --> 01:42:20,000
它是非常宽泛的一个信息

2384
01:42:20,000 --> 01:42:22,000
跟应用场景不一样吗

2385
01:42:22,000 --> 01:42:24,000
TrueType 一般是用于显示的

2386
01:42:24,000 --> 01:42:26,000
OpenType 它一般

2387
01:42:26,000 --> 01:42:28,000
就 Adobe 一般是做打印的东西的吗

2388
01:42:30,000 --> 01:42:32,000
这倒也没有吧

2389
01:42:32,000 --> 01:42:34,000
基本上在 OpenType 之前

2390
01:42:34,000 --> 01:42:36,000
Mac 上面的字体几乎也都是 TrueType

2391
01:42:36,000 --> 01:42:38,000
你拿来

2392
01:42:38,000 --> 01:42:40,000
就是 Type 的

2393
01:42:40,000 --> 01:42:42,000
如果你是一个设计平台设计师

2394
01:42:42,000 --> 01:42:44,000
你买的字体

2395
01:42:44,000 --> 01:42:46,000
基本上也都出的

2396
01:42:46,000 --> 01:42:48,000
Adobe 它出的那些

2397
01:42:48,000 --> 01:42:50,000
OpenType 字体它没有很多 Hinting 信息

2398
01:42:50,000 --> 01:42:52,000
是因为它没有必要做

2399
01:42:52,000 --> 01:42:54,000
大家买它那个字体一般是用来

2400
01:42:54,000 --> 01:42:56,000
专业用打印的吗

2401
01:42:56,000 --> 01:42:58,000
不是用来显示

2402
01:42:58,000 --> 01:43:00,000
这是有一个历史问题

2403
01:43:00,000 --> 01:43:02,000
首先是这样子

2404
01:43:02,000 --> 01:43:04,000
这是 Adobe 的 Positive Script

2405
01:43:04,000 --> 01:43:06,000
这是它的专利技术

2406
01:43:06,000 --> 01:43:08,000
它在这个专利技术上开发了一种字体格式

2407
01:43:08,000 --> 01:43:10,000
叫 Type One

2408
01:43:10,000 --> 01:43:12,000
这是 Adobe

2409
01:43:12,000 --> 01:43:14,000
最经典的 Positive Script 技术

2410
01:43:14,000 --> 01:43:16,000
而且也是沿用到现在的

2411
01:43:16,000 --> 01:43:18,000
一个最好的

2412
01:43:18,000 --> 01:43:20,000
包括像 OpenType 里面用的曲线信息

2413
01:43:20,000 --> 01:43:22,000
也是 Type One 为基础

2414
01:43:22,000 --> 01:43:24,000
大家拉的

2415
01:43:24,000 --> 01:43:26,000
三次的 Base 二曲线都是这个

2416
01:43:26,000 --> 01:43:28,000
Type One 它是 Adobe 的

2417
01:43:28,000 --> 01:43:30,000
私有专利

2418
01:43:30,000 --> 01:43:32,000
如果你要用 Type One 技术

2419
01:43:32,000 --> 01:43:34,000
你得给 Adobe 支付非常高昂的专利费

2420
01:43:34,000 --> 01:43:36,000
所以当时

2421
01:43:36,000 --> 01:43:38,000
无论是微软还是 Apple 都不想支付这笔钱

2422
01:43:38,000 --> 01:43:40,000
于是他们合作搞了一个

2423
01:43:40,000 --> 01:43:42,000
TrueType

2424
01:43:42,000 --> 01:43:44,000
想来就是

2425
01:43:44,000 --> 01:43:46,000
以不支付专利的方式同时使用

2426
01:43:46,000 --> 01:43:48,000
一个类似于 Adobe 的技术

2427
01:43:48,000 --> 01:43:50,000
为什么要这么搞呢是因为

2428
01:43:50,000 --> 01:43:52,000
其实当时 Adobe 还发布了

2429
01:43:52,000 --> 01:43:54,000
应该是 Type 3 吧我记不太清了

2430
01:43:54,000 --> 01:43:56,000
是 Type 3 还是 Type 4

2431
01:43:56,000 --> 01:43:58,000
它是一个

2432
01:43:58,000 --> 01:44:00,000
Adobe 的专利技术同时它是一个

2433
01:44:00,000 --> 01:44:02,000
好像可以免费使用的

2434
01:44:02,000 --> 01:44:04,000
但是这个东西在屏幕上

2435
01:44:04,000 --> 01:44:06,000
用来做这个

2436
01:44:06,000 --> 01:44:08,000
三格化的效果好像就不好

2437
01:44:08,000 --> 01:44:10,000
具体原因我不是很清楚

2438
01:44:10,000 --> 01:44:12,000
而且据说它的那个三格化

2439
01:44:12,000 --> 01:44:14,000
的效率很低所以

2440
01:44:14,000 --> 01:44:16,000
Apple 和 Windows 才没有

2441
01:44:16,000 --> 01:44:18,000
用这一套免费的技术

2442
01:44:18,000 --> 01:44:20,000
去搞自己的东西

2443
01:44:20,000 --> 01:44:22,000
那么后来 Windows 上留下了这么多的

2444
01:44:22,000 --> 01:44:24,000
这个 TrueType

2445
01:44:24,000 --> 01:44:26,000
字体都是因为他们最初

2446
01:44:26,000 --> 01:44:28,000
使用了这样一套技术

2447
01:44:28,000 --> 01:44:30,000
同时又设计了很多为

2448
01:44:30,000 --> 01:44:32,000
TrueType 优化过的这个

2449
01:44:32,000 --> 01:44:34,000
字体

2450
01:44:34,000 --> 01:44:36,000
这个就要回到最初

2451
01:44:36,000 --> 01:44:38,000
你们在讨论的那个问题就是说

2452
01:44:38,000 --> 01:44:40,000
究竟是二次曲线好还是三次曲线好

2453
01:44:40,000 --> 01:44:42,000
的问题我个人觉得

2454
01:44:42,000 --> 01:44:44,000
两种其实是没有差别的

2455
01:44:44,000 --> 01:44:46,000
因为如果说你给设计师的这个工具

2456
01:44:46,000 --> 01:44:48,000
就是二次曲线的话他就是没用

2457
01:44:48,000 --> 01:44:50,000
这个工具画出一个完美

2458
01:44:50,000 --> 01:44:52,000
在他看来完美的一条曲线

2459
01:44:52,000 --> 01:44:54,000
但是如果你给他一个三次曲线

2460
01:44:54,000 --> 01:44:56,000
那么他画出来的是三次曲线的完美的曲线

2461
01:44:56,000 --> 01:44:58,000
但是这两种曲线在

2462
01:44:58,000 --> 01:45:00,000
互相转换的时候如果这个转换程式

2463
01:45:00,000 --> 01:45:02,000
不那么的好的话就有可能

2464
01:45:02,000 --> 01:45:04,000
会出一些问题

2465
01:45:04,000 --> 01:45:06,000
但通常来说这个数学问题并不难解决

2466
01:45:06,000 --> 01:45:08,000
所以我们市面上看到的一些

2467
01:45:08,000 --> 01:45:10,000
TrueType 字体的

2468
01:45:10,000 --> 01:45:12,000
这个曲线质量不好

2469
01:45:12,000 --> 01:45:14,000
多半是由于字体厂商故意

2470
01:45:14,000 --> 01:45:16,000
将他们转得不怎么好

2471
01:45:16,000 --> 01:45:18,000
有可能是故意转得不好

2472
01:45:18,000 --> 01:45:20,000
比如有人就说

2473
01:45:20,000 --> 01:45:22,000
国内某字体大厂是故意

2474
01:45:22,000 --> 01:45:24,000
出了一套低质量的 TrueType 字体

2475
01:45:24,000 --> 01:45:26,000
以便他的 OpenType

2476
01:45:26,000 --> 01:45:28,000
字体可以卖出一个

2477
01:45:28,000 --> 01:45:30,000
比较好的价格

2478
01:45:30,000 --> 01:45:32,000
可以卖专业字体和这种

2479
01:45:32,000 --> 01:45:34,000
就非专业字体的区别定价

2480
01:45:34,000 --> 01:45:36,000
对

2481
01:45:36,000 --> 01:45:38,000
太鸡贼了这个

2482
01:45:42,000 --> 01:45:44,000
OpenType 我们还说他还有一个封装的格式

2483
01:45:44,000 --> 01:45:46,000
他其实就是

2484
01:45:46,000 --> 01:45:48,000
一个盒子那里面他可以把

2485
01:45:48,000 --> 01:45:50,000
TrueType 曲线的东西装在

2486
01:45:50,000 --> 01:45:52,000
盒子里面最后包装出来也是

2487
01:45:52,000 --> 01:45:54,000
OpenType 字体

2488
01:45:54,000 --> 01:45:56,000
这跟和那个视频文件

2489
01:45:56,000 --> 01:45:58,000
一样的

2490
01:45:58,000 --> 01:46:00,000
MKV 里面可以装各种各样的视频

2491
01:46:00,000 --> 01:46:02,000
音频流

2492
01:46:02,000 --> 01:46:04,000
所以曲线的描述方式

2493
01:46:04,000 --> 01:46:06,000
和最后那个封装

2494
01:46:06,000 --> 01:46:08,000
格式是两个层次的东西

2495
01:46:08,000 --> 01:46:10,000
都可能是 OpenType

2496
01:46:10,000 --> 01:46:12,000
所以这一点有点复杂

2497
01:46:12,000 --> 01:46:14,000
但是现在好像那些

2498
01:46:14,000 --> 01:46:16,000
我看就是

2499
01:46:16,000 --> 01:46:18,000
Adobe 现在也有在卖那些所谓的专业字体

2500
01:46:18,000 --> 01:46:20,000
基本上还是以 OpenType

2501
01:46:20,000 --> 01:46:22,000
封装为主

2502
01:46:22,000 --> 01:46:24,000
因为 OpenType 这些比较高阶的特性

2503
01:46:24,000 --> 01:46:26,000
Optical 那些乱七八糟的

2504
01:46:26,000 --> 01:46:28,000
高级特性

2505
01:46:28,000 --> 01:46:30,000
对他有很多 feature

2506
01:46:30,000 --> 01:46:32,000
有很多特征功能

2507
01:46:32,000 --> 01:46:34,000
这个好像 TrueType 好像就暂时

2508
01:46:34,000 --> 01:46:36,000
好像支持不了

2509
01:46:36,000 --> 01:46:38,000
对因为 TrueType 的规范里面没有那些

2510
01:46:38,000 --> 01:46:40,000
数据就其实他们都是一张张表

2511
01:46:40,000 --> 01:46:42,000
表叫 table

2512
01:46:42,000 --> 01:46:44,000
所以现在整个

2513
01:46:44,000 --> 01:46:46,000
字体格式的

2514
01:46:46,000 --> 01:46:48,000
格式大取向就是大家都是玩

2515
01:46:48,000 --> 01:46:50,000
OpenType 主要

2516
01:46:50,000 --> 01:46:52,000
而且刚才也说 OpenType 它本来就是一个大盒子

2517
01:46:52,000 --> 01:46:54,000
那你原来

2518
01:46:54,000 --> 01:46:56,000
TrueType 轮廓曲线

2519
01:46:56,000 --> 01:46:58,000
也可以装进去那很多现在就是

2520
01:46:58,000 --> 01:47:00,000
把曲线的轮廓先装进来

2521
01:47:00,000 --> 01:47:02,000
然后再加上 OpenType 特有的

2522
01:47:02,000 --> 01:47:04,000
那些 feature 封装成 OpenType

2523
01:47:04,000 --> 01:47:06,000
的一个字库

2524
01:47:06,000 --> 01:47:08,000
但我们必须要再重复

2525
01:47:08,000 --> 01:47:10,000
说一下就是说

2526
01:47:10,000 --> 01:47:12,000
通常说这个 Hinting 技术

2527
01:47:12,000 --> 01:47:14,000
就是专指 Windows 的那一套

2528
01:47:14,000 --> 01:47:16,000
Hinting 技术它是只对 TrueType

2529
01:47:16,000 --> 01:47:18,000
有效的

2530
01:47:18,000 --> 01:47:20,000
而我们说的在 Postscript 上

2531
01:47:20,000 --> 01:47:22,000
做的这个 Hint

2532
01:47:22,000 --> 01:47:24,000
跟 TrueType 的 Hinting

2533
01:47:24,000 --> 01:47:26,000
完全不是一回事

2534
01:47:26,000 --> 01:47:28,000
就虽然他们的名字都叫

2535
01:47:28,000 --> 01:47:30,000
Hinting 但是对但是

2536
01:47:30,000 --> 01:47:32,000
Postscript 的 Hinting 是一个

2537
01:47:32,000 --> 01:47:34,000
比 TrueType Hinting 要

2538
01:47:34,000 --> 01:47:36,000
微弱的多的而且通常可能

2539
01:47:36,000 --> 01:47:38,000
是在打印设备上才

2540
01:47:38,000 --> 01:47:40,000
有效的我不是很清楚

2541
01:47:40,000 --> 01:47:42,000
总之他们完全不是一个量级的

2542
01:47:42,000 --> 01:47:44,000
效果

2543
01:47:46,000 --> 01:47:48,000
这里要可能不得不

2544
01:47:48,000 --> 01:47:50,000
提一下不同的操作系统

2545
01:47:50,000 --> 01:47:52,000
的它怎么去

2546
01:47:52,000 --> 01:47:54,000
就是它那个叫做渲染引擎的区别

2547
01:47:54,000 --> 01:47:56,000
这个好像很古老

2548
01:47:56,000 --> 01:47:58,000
很古老以前我们还在

2549
01:47:58,000 --> 01:48:00,000
Apple for us 的时候有尝试过

2550
01:48:00,000 --> 01:48:02,000
写这么一篇系列但是

2551
01:48:02,000 --> 01:48:04,000
后来没有做成因为实在是

2552
01:48:04,000 --> 01:48:06,000
太多技术就是要弄了太

2553
01:48:06,000 --> 01:48:08,000
坑了巨大的

2554
01:48:08,000 --> 01:48:10,000
Windows 和 Mac 不一样

2555
01:48:10,000 --> 01:48:12,000
然后各个浏览器不一样

2556
01:48:12,000 --> 01:48:14,000
同样浏览器在不同的

2557
01:48:14,000 --> 01:48:16,000
系统上

2558
01:48:16,000 --> 01:48:18,000
不同版本还不一样

2559
01:48:18,000 --> 01:48:20,000
而且这个东西也在不同的

2560
01:48:20,000 --> 01:48:22,000
还在变化中比如说

2561
01:48:22,000 --> 01:48:24,000
像微软的那套

2562
01:48:24,000 --> 01:48:26,000
他们叫做 ClearType 的技术

2563
01:48:26,000 --> 01:48:28,000
也在不断的每一个版本的 Windows

2564
01:48:28,000 --> 01:48:30,000
不断的优化去发的更新

2565
01:48:30,000 --> 01:48:32,000
的版本还有像

2566
01:48:32,000 --> 01:48:34,000
苹果的那个 Cortex 那套

2567
01:48:34,000 --> 01:48:36,000
也是在不断的变化

2568
01:48:36,000 --> 01:48:38,000
它那个叫什么 AAT 吧

2569
01:48:38,000 --> 01:48:40,000
Apple Advanced Topography

2570
01:48:40,000 --> 01:48:42,000
那个宣言器

2571
01:48:42,000 --> 01:48:44,000
那个比较老的

2572
01:48:44,000 --> 01:48:46,000
对那个最开始是 OS 身上搭载的那个

2573
01:48:46,000 --> 01:48:48,000
后来像什么 Cortex

2574
01:48:48,000 --> 01:48:50,000
又开始变了

2575
01:48:50,000 --> 01:48:52,000
也不是一个静态的东西就很难

2576
01:48:52,000 --> 01:48:54,000
去讨论它

2577
01:48:54,000 --> 01:48:56,000
我不知道那个

2578
01:48:56,000 --> 01:48:58,000
安卓和 Alison 是怎么弄的

2579
01:48:58,000 --> 01:49:00,000
从来没有没见人讲过

2580
01:49:00,000 --> 01:49:02,000
但是基本上

2581
01:49:02,000 --> 01:49:04,000
IOS 就是

2582
01:49:04,000 --> 01:49:06,000
继承

2583
01:49:06,000 --> 01:49:08,000
Cortex 那套

2584
01:49:08,000 --> 01:49:10,000
安卓怎么样

2585
01:49:10,000 --> 01:49:12,000
我不知道

2586
01:49:12,000 --> 01:49:14,000
安卓就很奇怪

2587
01:49:14,000 --> 01:49:16,000
因为安卓它不是基于

2588
01:49:16,000 --> 01:49:18,000
这两个 Windows 和 Alison

2589
01:49:18,000 --> 01:49:20,000
它应该是 Linux

2590
01:49:20,000 --> 01:49:22,000
来的一套什么技术改的

2591
01:49:22,000 --> 01:49:24,000
我不太清楚

2592
01:49:24,000 --> 01:49:26,000
其实 Linux 下面的屏幕

2593
01:49:26,000 --> 01:49:28,000
显示可以调的部分

2594
01:49:28,000 --> 01:49:30,000
更多吧

2595
01:49:30,000 --> 01:49:32,000
在 ClearType 出现之前

2596
01:49:32,000 --> 01:49:34,000
就有好几种

2597
01:49:34,000 --> 01:49:36,000
基本的四种

2598
01:49:36,000 --> 01:49:38,000
一种是完全不要 Hint

2599
01:49:38,000 --> 01:49:40,000
一种是

2600
01:49:40,000 --> 01:49:42,000
什么用简单的 Hint

2601
01:49:42,000 --> 01:49:44,000
轻微重度和全

2602
01:49:44,000 --> 01:49:46,000
Full Hint

2603
01:49:46,000 --> 01:49:48,000
对我相信对

2604
01:49:48,000 --> 01:49:50,000
这套其实应该也是一个比较

2605
01:49:50,000 --> 01:49:52,000
值得研究一下的话题

2606
01:49:52,000 --> 01:49:54,000
只不过我们在做

2607
01:49:54,000 --> 01:49:56,000
Linux 上面那个常用的那个宣言器

2608
01:49:56,000 --> 01:49:58,000
叫什么来的名字我都忘掉

2609
01:49:58,000 --> 01:50:00,000
以前用那个 Hubuntu 做桌面的时候

2610
01:50:00,000 --> 01:50:02,000
还研究过一段时间

2611
01:50:02,000 --> 01:50:04,000
这个最重要的是它跟那个

2612
01:50:04,000 --> 01:50:06,000
发行板

2613
01:50:06,000 --> 01:50:08,000
是相关的

2614
01:50:08,000 --> 01:50:10,000
你要用一些那个

2615
01:50:12,000 --> 01:50:14,000
非 Gnome 的

2616
01:50:14,000 --> 01:50:16,000
对

2617
01:50:16,000 --> 01:50:18,000
这跟 Gnome 有关

2618
01:50:18,000 --> 01:50:20,000
你用 QT 的话 QT 字就有一套

2619
01:50:20,000 --> 01:50:22,000
然后用 Gnome 的话 Gnome 有一套

2620
01:50:22,000 --> 01:50:24,000
然后他们全都是

2621
01:50:24,000 --> 01:50:26,000
就相当于

2622
01:50:26,000 --> 01:50:28,000
Linux 的显示

2623
01:50:28,000 --> 01:50:30,000
显示是一个非常巨大的可能

2624
01:50:30,000 --> 01:50:32,000
首先你可能底层有一个 X Windows

2625
01:50:32,000 --> 01:50:34,000
然后 X Windows 完全不去

2626
01:50:34,000 --> 01:50:36,000
理会 Hint 或者是

2627
01:50:36,000 --> 01:50:38,000
什么

2628
01:50:38,000 --> 01:50:40,000
轮廓

2629
01:50:40,000 --> 01:50:42,000
表述这一套的然后你在 X Windows 上

2630
01:50:42,000 --> 01:50:44,000
基础上有很多人做出不同的

2631
01:50:44,000 --> 01:50:46,000
这个渲染引擎来然后每个渲染

2632
01:50:46,000 --> 01:50:48,000
引擎有自己的策略

2633
01:50:48,000 --> 01:50:50,000
所以这个是在 Linux 这边是不能以

2634
01:50:50,000 --> 01:50:52,000
操作性化而论的而是要以发行板

2635
01:50:52,000 --> 01:50:54,000
和那个

2636
01:50:54,000 --> 01:50:56,000
窗户管理器

2637
01:50:56,000 --> 01:50:58,000
距离直攻直递逃

2638
01:50:58,000 --> 01:51:00,000
天哪

2639
01:51:00,000 --> 01:51:02,000
对对对这是巨大的

2640
01:51:02,000 --> 01:51:04,000
果然是一辆

2641
01:51:04,000 --> 01:51:06,000
好坦克

2642
01:51:06,000 --> 01:51:08,000
好了现在我们键盘上

2643
01:51:08,000 --> 01:51:10,000
打了几个字然后呢

2644
01:51:10,000 --> 01:51:12,000
通过我们键位

2645
01:51:12,000 --> 01:51:14,000
输入法转出来

2646
01:51:14,000 --> 01:51:16,000
现在在通过

2647
01:51:16,000 --> 01:51:18,000
调用我们的字库文件

2648
01:51:18,000 --> 01:51:20,000
终于已经

2649
01:51:20,000 --> 01:51:22,000
转跳过了终于显示在屏幕上

2650
01:51:24,000 --> 01:51:26,000
对其实

2651
01:51:26,000 --> 01:51:28,000
这个过程还是忽略了很多东西

2652
01:51:28,000 --> 01:51:30,000
比如说那个

2653
01:51:30,000 --> 01:51:32,000
呃

2654
01:51:32,000 --> 01:51:34,000
比如说那个

2655
01:51:34,000 --> 01:51:36,000
一以上加一撇的发育字母

2656
01:51:36,000 --> 01:51:38,000
它可能有好几种

2657
01:51:38,000 --> 01:51:40,000
组合的问题可能有好几种组合方式

2658
01:51:40,000 --> 01:51:42,000
对没有没有

2659
01:51:42,000 --> 01:51:44,000
这还涉及到那个 Uni-Code 的事情

2660
01:51:44,000 --> 01:51:46,000
还有那个组合

2661
01:51:46,000 --> 01:51:48,000
先不是排排运行的问题

2662
01:51:48,000 --> 01:51:50,000
而是一个就是你怎么把

2663
01:51:50,000 --> 01:51:52,000
不同的字符组合在一起的

2664
01:51:52,000 --> 01:51:54,000
问题然后还有一个数数的问题

2665
01:51:54,000 --> 01:51:56,000
就是

2666
01:51:56,000 --> 01:51:58,000
你要说 E

2667
01:51:58,000 --> 01:52:00,000
如果这个字符是一个

2668
01:52:00,000 --> 01:52:02,000
E 加一撇合成的 E 呢

2669
01:52:02,000 --> 01:52:04,000
还是

2670
01:52:04,000 --> 01:52:06,000
它比如说是拉丁 1 里面的

2671
01:52:06,000 --> 01:52:08,000
那个高位

2672
01:52:08,000 --> 01:52:10,000
区的那个独立的一个字符

2673
01:52:10,000 --> 01:52:12,000
E 这两个字符你可能

2674
01:52:12,000 --> 01:52:14,000
在不同的操作系统里面

2675
01:52:14,000 --> 01:52:16,000
数出来的结果是不一样的

2676
01:52:16,000 --> 01:52:18,000
有些操作系统里面

2677
01:52:18,000 --> 01:52:20,000
有些编程语言说

2678
01:52:20,000 --> 01:52:22,000
这是两个 byte

2679
01:52:22,000 --> 01:52:24,000
然后有些人

2680
01:52:24,000 --> 01:52:26,000
有些操作系统都会告诉你说

2681
01:52:26,000 --> 01:52:28,000
这是一个字符

2682
01:52:28,000 --> 01:52:30,000
这个日语里面也有

2683
01:52:30,000 --> 01:52:32,000
就像刚才日本讲明那个

2684
01:52:32,000 --> 01:52:34,000
着音点它其实也可以通过

2685
01:52:34,000 --> 01:52:36,000
组合形式来实现的

2686
01:52:36,000 --> 01:52:38,000
所以那也是那看起来

2687
01:52:38,000 --> 01:52:40,000
是一个字那其实它是一个

2688
01:52:40,000 --> 01:52:42,000
马位的字就是

2689
01:52:42,000 --> 01:52:44,000
低区位的一个马位的字还是

2690
01:52:44,000 --> 01:52:46,000
两个组合起来两个字

2691
01:52:46,000 --> 01:52:48,000
对日本里面也是有这个问题的

2692
01:52:48,000 --> 01:52:50,000
所以我我觉得这还是一个

2693
01:52:50,000 --> 01:52:52,000
排版引擎的问题吧

2694
01:52:52,000 --> 01:52:54,000
因为这取决于这个排版引擎

2695
01:52:54,000 --> 01:52:56,000
是否采用了 unicode 标准

2696
01:52:56,000 --> 01:52:58,000
下的一些肢体技术

2697
01:52:58,000 --> 01:53:00,000
那如果他用了一些传统的

2698
01:53:00,000 --> 01:53:02,000
在 unicode 还没有诞生的

2699
01:53:02,000 --> 01:53:04,000
那个时代里面

2700
01:53:04,000 --> 01:53:06,000
那他也有自己的一些方式

2701
01:53:06,000 --> 01:53:08,000
来显示这些字符

2702
01:53:08,000 --> 01:53:10,000
可以这样理解吗

2703
01:53:10,000 --> 01:53:12,000
这跟排版引擎也不一定

2704
01:53:12,000 --> 01:53:14,000
其实主要还是一个

2705
01:53:14,000 --> 01:53:16,000
你在一个什么样的

2706
01:53:16,000 --> 01:53:20,000
国际层面上去区分字符的问题

2707
01:53:20,000 --> 01:53:22,000
你要把它归约化的话就是

2708
01:53:22,000 --> 01:53:24,000
好吧所有的字符

2709
01:53:24,000 --> 01:53:26,000
其实归根结底都是 0 和 1

2710
01:53:26,000 --> 01:53:28,000
在电脑里在计算机里

2711
01:53:28,000 --> 01:53:30,000
但是有些

2712
01:53:30,000 --> 01:53:32,000
那按照某些编程语言

2713
01:53:32,000 --> 01:53:34,000
或者是操作系统的计算方法

2714
01:53:34,000 --> 01:53:36,000
每 8 个

2715
01:53:36,000 --> 01:53:38,000
bit 就一定

2716
01:53:38,000 --> 01:53:40,000
无论如何是一个字

2717
01:53:40,000 --> 01:53:42,000
那在这些操作系统或者编程语言

2718
01:53:42,000 --> 01:53:44,000
里面可能意义上的加撇

2719
01:53:44,000 --> 01:53:46,000
就有可能是 1 或者 3 个字

2720
01:53:46,000 --> 01:53:48,000
但是对于某些

2721
01:53:48,000 --> 01:53:50,000
更高级的或者说就是花分层面

2722
01:53:50,000 --> 01:53:52,000
抽象层面更高级的语言

2723
01:53:52,000 --> 01:53:54,000
比如说 swift

2724
01:53:54,000 --> 01:53:56,000
swift 里面它一定会把

2725
01:53:56,000 --> 01:53:58,000
那个字符串

2726
01:53:58,000 --> 01:54:00,000
里面

2727
01:54:00,000 --> 01:54:02,000
能够独立成促的

2728
01:54:02,000 --> 01:54:04,000
什么什么 cluster

2729
01:54:04,000 --> 01:54:06,000
它单独算成一个字符

2730
01:54:06,000 --> 01:54:08,000
所以这个实际长度

2731
01:54:08,000 --> 01:54:10,000
可能跟最终的那个 byte 长度

2732
01:54:10,000 --> 01:54:12,000
是不一样的而且两个

2733
01:54:12,000 --> 01:54:14,000
两个 byte 长度不同的 string

2734
01:54:14,000 --> 01:54:16,000
在 swift 里面可能会

2735
01:54:16,000 --> 01:54:18,000
最终算出来的长度是一样的

2736
01:54:20,000 --> 01:54:22,000
反正也是一个很大的可能

2737
01:54:24,000 --> 01:54:26,000
因为你如果单说是

2738
01:54:26,000 --> 01:54:28,000
排版引擎的话

2739
01:54:28,000 --> 01:54:30,000
你事先给排版引擎什么东西

2740
01:54:30,000 --> 01:54:32,000
对吧

2741
01:54:32,000 --> 01:54:34,000
你事先给它不同的东西

2742
01:54:34,000 --> 01:54:36,000
到排版引擎它拿到手头上

2743
01:54:36,000 --> 01:54:38,000
只有这个零部镜它只能拿去这样显示

2744
01:54:38,000 --> 01:54:40,000
还有就是

2745
01:54:40,000 --> 01:54:42,000
我想说的就是

2746
01:54:42,000 --> 01:54:44,000
在这个年头到现在为止

2747
01:54:44,000 --> 01:54:46,000
大家还是有很多人说

2748
01:54:46,000 --> 01:54:48,000
半角全角的问题

2749
01:54:48,000 --> 01:54:50,000
就是说什么

2750
01:54:50,000 --> 01:54:52,000
西文 140 个字的话

2751
01:54:52,000 --> 01:54:54,000
对应中文应该是 70 个字

2752
01:54:54,000 --> 01:54:56,000
到现在还有人

2753
01:54:56,000 --> 01:54:58,000
有这样的感觉

2754
01:54:58,000 --> 01:55:00,000
全角

2755
01:55:00,000 --> 01:55:02,000
半角这两个字

2756
01:55:02,000 --> 01:55:04,000
最开始原

2757
01:55:04,000 --> 01:55:06,000
原应应该是在

2758
01:55:06,000 --> 01:55:08,000
签字时代吧

2759
01:55:08,000 --> 01:55:10,000
对

2760
01:55:10,000 --> 01:55:12,000
有些签字是

2761
01:55:12,000 --> 01:55:14,000
占另外一些签字的

2762
01:55:14,000 --> 01:55:16,000
一半的宽度

2763
01:55:16,000 --> 01:55:18,000
然后这些字符就叫

2764
01:55:18,000 --> 01:55:20,000
被叫做半角字符

2765
01:55:20,000 --> 01:55:22,000
其实就是一个宽度的问题

2766
01:55:22,000 --> 01:55:24,000
就全身半身

2767
01:55:24,000 --> 01:55:26,000
全角半角或者叫全形

2768
01:55:26,000 --> 01:55:28,000
半形 em

2769
01:55:28,000 --> 01:55:30,000
和 en

2770
01:55:30,000 --> 01:55:32,000
应该是日本人搞出来的概念吧

2771
01:55:32,000 --> 01:55:34,000
但是

2772
01:55:34,000 --> 01:55:36,000
在原来的西文排版里面

2773
01:55:36,000 --> 01:55:38,000
就是有 em 和 en

2774
01:55:38,000 --> 01:55:40,000
对但是全角半角

2775
01:55:40,000 --> 01:55:42,000
这个术语应该是日本人搞出来

2776
01:55:42,000 --> 01:55:44,000
我们叫成全角半角

2777
01:55:44,000 --> 01:55:46,000
对是日本汉字

2778
01:55:46,000 --> 01:55:48,000
反映出来的

2779
01:55:48,000 --> 01:55:50,000
全角半角最开始的差异

2780
01:55:50,000 --> 01:55:52,000
应该是在片甲鸣和

2781
01:55:52,000 --> 01:55:54,000
就是

2782
01:55:54,000 --> 01:55:56,000
在片甲鸣出现之前

2783
01:55:56,000 --> 01:55:58,000
在全角汉字出现之前

2784
01:55:58,000 --> 01:56:00,000
日语里面

2785
01:56:00,000 --> 01:56:02,000
JS 里面只有半角的假名

2786
01:56:02,000 --> 01:56:04,000
然后等到全角汉字

2787
01:56:04,000 --> 01:56:06,000
出来之后他们又出现了全角的假名

2788
01:56:06,000 --> 01:56:08,000
和全角汉字

2789
01:56:08,000 --> 01:56:10,000
所以这个时候就需要区别说

2790
01:56:10,000 --> 01:56:12,000
这个假名是究竟只占

2791
01:56:12,000 --> 01:56:14,000
显示一半呢

2792
01:56:14,000 --> 01:56:16,000
还是宽的版本

2793
01:56:16,000 --> 01:56:18,000
所以这个时候全形半形的概念

2794
01:56:18,000 --> 01:56:20,000
就被从印刷时代

2795
01:56:20,000 --> 01:56:22,000
拓展过来

2796
01:56:22,000 --> 01:56:24,000
但是在编码上

2797
01:56:24,000 --> 01:56:26,000
其实是单字节和双字节的问题

2798
01:56:26,000 --> 01:56:28,000
对

2799
01:56:28,000 --> 01:56:30,000
很多人把全角半角和

2800
01:56:30,000 --> 01:56:32,000
单字节双字节混在一起

2801
01:56:32,000 --> 01:56:34,000
比如说

2802
01:56:34,000 --> 01:56:36,000
到现在为止

2803
01:56:36,000 --> 01:56:38,000
我们大家都已经用 unicode 了

2804
01:56:38,000 --> 01:56:40,000
无论你是半角的字还是全角的字

2805
01:56:40,000 --> 01:56:42,000
在 unicode 上它其实都是一个码位

2806
01:56:42,000 --> 01:56:44,000
对

2807
01:56:44,000 --> 01:56:46,000
这个码位有可能用 1 到 4 个字符来显示

2808
01:56:46,000 --> 01:56:48,000
1 到 4 个 byte

2809
01:56:48,000 --> 01:56:50,000
1 到 4

2810
01:56:50,000 --> 01:56:52,000
对目前是 1 到 4 个

2811
01:56:52,000 --> 01:56:54,000
对它是个变长的

2812
01:56:54,000 --> 01:56:56,000
目前是 1 到 4 个 byte 来决定

2813
01:56:56,000 --> 01:56:58,000
所以半角和全角差别在这里已经不明显

2814
01:57:00,000 --> 01:57:02,000
现在我们实际看到的

2815
01:57:02,000 --> 01:57:04,000
半角和全角

2816
01:57:04,000 --> 01:57:06,000
其实是字体产生为了保留大家的习惯

2817
01:57:06,000 --> 01:57:08,000
它化成半角和化成全角而已

2818
01:57:08,000 --> 01:57:10,000
你去调用那个码

2819
01:57:10,000 --> 01:57:12,000
其实就是一个 unicode 的码而已

2820
01:57:12,000 --> 01:57:14,000
对

2821
01:57:14,000 --> 01:57:16,000
中文字体里面现在的半角

2822
01:57:16,000 --> 01:57:18,000
和全角的一个字符的

2823
01:57:18,000 --> 01:57:20,000
应用规则是怎么样子

2824
01:57:20,000 --> 01:57:22,000
我记得好像就是要全部

2825
01:57:22,000 --> 01:57:24,000
半角

2826
01:57:24,000 --> 01:57:26,000
就废除这两个概念是最好的方式

2827
01:57:30,000 --> 01:57:32,000
在 gb 里面

2828
01:57:32,000 --> 01:57:34,000
其实它有很多

2829
01:57:34,000 --> 01:57:36,000
像俄文的希里尔字母

2830
01:57:36,000 --> 01:57:38,000
它其实在里面化的

2831
01:57:38,000 --> 01:57:40,000
当年它放到 gb 里面

2832
01:57:40,000 --> 01:57:42,000
它意思就是全角字

2833
01:57:42,000 --> 01:57:44,000
当年是那个意思

2834
01:57:44,000 --> 01:57:46,000
然后它的确是

2835
01:57:46,000 --> 01:57:48,000
化那些

2836
01:57:48,000 --> 01:57:50,000
国产的那些字体的确是化成全角字了

2837
01:57:50,000 --> 01:57:52,000
然后有人就用那个

2838
01:57:52,000 --> 01:57:54,000
然后它就在排俄文

2839
01:57:54,000 --> 01:57:56,000
然后看出来真的是惨不忍睹

2840
01:57:56,000 --> 01:57:58,000
每个字符都间距很大吗

2841
01:57:58,000 --> 01:58:00,000
豆瓣上一旦出现俄文书

2842
01:58:00,000 --> 01:58:02,000
简直是惨不忍睹

2843
01:58:04,000 --> 01:58:06,000
这其实都是一些历史遗留的产物

2844
01:58:06,000 --> 01:58:08,000
当时因为这个

2845
01:58:08,000 --> 01:58:10,000
编码还没有统一到

2846
01:58:10,000 --> 01:58:12,000
没有完全统一到 unicode 的那套编码系统上面

2847
01:58:12,000 --> 01:58:14,000
所以

2848
01:58:14,000 --> 01:58:16,000
导致了中国以前的

2849
01:58:16,000 --> 01:58:18,000
中国国标

2850
01:58:18,000 --> 01:58:20,000
以前想编码一些西文字符的时候

2851
01:58:20,000 --> 01:58:22,000
它会搞一套自己的规则在里面

2852
01:58:22,000 --> 01:58:24,000
然后又跟 unicode 那套并不是完全成合

2853
01:58:26,000 --> 01:58:28,000
问题是现在大家

2854
01:58:28,000 --> 01:58:30,000
已经是 unicode 了

2855
01:58:30,000 --> 01:58:32,000
但是还要为了保持那个习惯

2856
01:58:32,000 --> 01:58:34,000
所以

2857
01:58:34,000 --> 01:58:36,000
而且的确大家能看出来

2858
01:58:36,000 --> 01:58:38,000
这是半角的字

2859
01:58:38,000 --> 01:58:40,000
实际上它里面的码位

2860
01:58:40,000 --> 01:58:42,000
已经是

2861
01:58:42,000 --> 01:58:44,000
跟双字节单字节已经没有关系了

2862
01:58:44,000 --> 01:58:46,000
一个 unicode 码位了都已经是

2863
01:58:46,000 --> 01:58:48,000
实际上它那宽度

2864
01:58:48,000 --> 01:58:50,000
可能是通过字体

2865
01:58:50,000 --> 01:58:52,000
设计师来去定义的

2866
01:58:52,000 --> 01:58:54,000
它的宽度

2867
01:58:54,000 --> 01:58:56,000
是排完引擎来决定

2868
01:58:56,000 --> 01:58:58,000
和字体提供的一些信息

2869
01:58:58,000 --> 01:59:00,000
来决定

2870
01:59:00,000 --> 01:59:02,000
所以我一直在想

2871
01:59:02,000 --> 01:59:04,000
现在我们这个什么计算机也好

2872
01:59:04,000 --> 01:59:06,000
手机也好 系统这么复杂

2873
01:59:06,000 --> 01:59:08,000
也就是我们这些

2874
01:59:08,000 --> 01:59:10,000
人为弄出来的因素

2875
01:59:10,000 --> 01:59:12,000
光打一个字显示到

2876
01:59:12,000 --> 01:59:14,000
屏幕上就要经过这么大一堆

2877
01:59:14,000 --> 01:59:16,000
的问题

2878
01:59:16,000 --> 01:59:18,000
可能出现错误

2879
01:59:18,000 --> 01:59:20,000
或者是什么系统崩溃

2880
01:59:20,000 --> 01:59:22,000
真的很正常

2881
01:59:22,000 --> 01:59:24,000
动不动就乱嘛 动不动就崩溃了

2882
01:59:24,000 --> 01:59:26,000
真的那个

2883
01:59:26,000 --> 01:59:28,000
因为这个 unicode 这个事情

2884
01:59:28,000 --> 01:59:30,000
导致很多安全漏洞嘛

2885
01:59:30,000 --> 01:59:32,000
也不出奇啊

2886
01:59:32,000 --> 01:59:34,000
我记得有一年你们记不记得

2887
01:59:34,000 --> 01:59:36,000
是有一段那种文字

2888
01:59:36,000 --> 01:59:38,000
叠加在一起然后 iphone 一打开

2889
01:59:38,000 --> 01:59:40,000
就会自动死机

2890
01:59:42,000 --> 01:59:44,000
然后那个 safari 的那段

2891
01:59:44,000 --> 01:59:46,000
然后那一台就自动崩溃嘛

2892
01:59:48,000 --> 01:59:50,000
就是因为坑爹的事情

2893
01:59:50,000 --> 01:59:52,000
而且因为像

2894
01:59:52,000 --> 01:59:54,000
尤其是文字编码这个东西的话

2895
01:59:54,000 --> 01:59:56,000
它必须要向后兼容嘛

2896
01:59:56,000 --> 01:59:58,000
后面的编码的话

2897
01:59:58,000 --> 02:00:00,000
尽量要跟前面兼容嘛

2898
02:00:00,000 --> 02:00:02,000
要不然特别麻烦把字会变掉嘛

2899
02:00:02,000 --> 02:00:04,000
所以它越是要向后兼容

2900
02:00:04,000 --> 02:00:06,000
它的那个

2901
02:00:06,000 --> 02:00:08,000
负面的那些债务就越来越多

2902
02:00:08,000 --> 02:00:10,000
所以它就越容易出 bug

2903
02:00:10,000 --> 02:00:12,000
现在实际上

2904
02:00:12,000 --> 02:00:14,000
绝大多数人类的复杂系统

2905
02:00:14,000 --> 02:00:16,000
其复杂性都是历史性

2906
02:00:16,000 --> 02:00:18,000
所有复杂的程度大部分都是历史原因

2907
02:00:18,000 --> 02:00:20,000
如果你从头开始

2908
02:00:20,000 --> 02:00:22,000
文明毁灭了

2909
02:00:22,000 --> 02:00:24,000
重新设计这些东西肯定不会设计成当初那个样子

2910
02:00:24,000 --> 02:00:26,000
大家都搞一个非常简单的一种

2911
02:00:26,000 --> 02:00:28,000
路径一带嘛

2912
02:00:32,000 --> 02:00:34,000
我们说了两个小时

2913
02:00:34,000 --> 02:00:36,000
终于把一个字显示到屏幕上去了

2914
02:00:36,000 --> 02:00:38,000
但是我们如果要把它打印出来怎么办

2915
02:00:38,000 --> 02:00:40,000
要再说两个小时吗

2916
02:00:42,000 --> 02:00:44,000
其实也没有这么复杂

2917
02:00:44,000 --> 02:00:46,000
打印出来

2918
02:00:46,000 --> 02:00:48,000
你把你的

2919
02:00:48,000 --> 02:00:50,000
文字的内容发给打印机

2920
02:00:50,000 --> 02:00:52,000
然后打印机内部其实也有一套

2921
02:00:52,000 --> 02:00:54,000
显示系统

2922
02:00:54,000 --> 02:00:56,000
然后这个显示系统只不过它最终

2923
02:00:56,000 --> 02:00:58,000
形成的

2924
02:00:58,000 --> 02:01:00,000
结果是一个

2925
02:01:00,000 --> 02:01:02,000
实体可见的一张纸

2926
02:01:02,000 --> 02:01:04,000
或者是

2927
02:01:04,000 --> 02:01:06,000
包括色彩的一张纸

2928
02:01:06,000 --> 02:01:08,000
或者是

2929
02:01:08,000 --> 02:01:10,000
包括三连打印机

2930
02:01:10,000 --> 02:01:12,000
多多少少都是一套把这个

2931
02:01:12,000 --> 02:01:14,000
字体编码

2932
02:01:14,000 --> 02:01:16,000
把一套编码和其

2933
02:01:16,000 --> 02:01:18,000
对应的形状连

2934
02:01:18,000 --> 02:01:20,000
连起来然后控制

2935
02:01:20,000 --> 02:01:22,000
一个

2936
02:01:22,000 --> 02:01:24,000
喷头也好或者是

2937
02:01:24,000 --> 02:01:26,000
膝骨也好把这个最终形状

2938
02:01:26,000 --> 02:01:28,000
显示出来

2939
02:01:28,000 --> 02:01:30,000
现在打印机应该不需要再内嵌

2940
02:01:30,000 --> 02:01:32,000
字体了吧它都是通过解析

2941
02:01:32,000 --> 02:01:34,000
PS 的

2942
02:01:34,000 --> 02:01:36,000
就是 PS 的一个

2943
02:01:36,000 --> 02:01:38,000
标准来做的

2944
02:01:38,000 --> 02:01:40,000
以前我记得

2945
02:01:40,000 --> 02:01:42,000
确实出现过

2946
02:01:42,000 --> 02:01:44,000
真式打印机

2947
02:01:44,000 --> 02:01:46,000
就是打印机内部

2948
02:01:46,000 --> 02:01:48,000
它是需要内嵌一个字库才可以打中文吗

2949
02:01:48,000 --> 02:01:50,000
最早的时候到后面都也是

2950
02:01:50,000 --> 02:01:52,000
很多 PS 打印机

2951
02:01:52,000 --> 02:01:54,000
也要安装的

2952
02:01:54,000 --> 02:01:56,000
我们中老年程式员

2953
02:01:56,000 --> 02:01:58,000
再继续告这小朋友

2954
02:01:58,000 --> 02:02:00,000
当年

2955
02:02:00,000 --> 02:02:02,000
打印机是要有打印字体的

2956
02:02:02,000 --> 02:02:04,000
不然他打不出字来

2957
02:02:04,000 --> 02:02:06,000
而且在

2958
02:02:06,000 --> 02:02:08,000
现在如果你遇到一些比较

2959
02:02:08,000 --> 02:02:10,000
极端的例子的话

2960
02:02:10,000 --> 02:02:12,000
有些人还是会选择把

2961
02:02:12,000 --> 02:02:14,000
PDF 你们的字体

2962
02:02:14,000 --> 02:02:16,000
转回来曲线

2963
02:02:16,000 --> 02:02:18,000
最终给打印机

2964
02:02:18,000 --> 02:02:20,000
当过一幅画来打不然有些字

2965
02:02:20,000 --> 02:02:22,000
是飘的

2966
02:02:22,000 --> 02:02:24,000
对

2967
02:02:24,000 --> 02:02:26,000
在日本的话经常会出这个问题

2968
02:02:26,000 --> 02:02:28,000
因为就是

2969
02:02:28,000 --> 02:02:30,000
比如说我做的排版

2970
02:02:30,000 --> 02:02:32,000
然后到输出方那边

2971
02:02:32,000 --> 02:02:34,000
它没有同样的字体文件

2972
02:02:34,000 --> 02:02:36,000
那它可能就会

2973
02:02:36,000 --> 02:02:38,000
字会变掉没有关系

2974
02:02:38,000 --> 02:02:40,000
因为设置的问题整个排版就会崩掉

2975
02:02:40,000 --> 02:02:42,000
不光是这个

2976
02:02:42,000 --> 02:02:44,000
现在 PDF 也有这个问题

2977
02:02:44,000 --> 02:02:46,000
很多在 Windows

2978
02:02:46,000 --> 02:02:48,000
上制作的 PDF

2979
02:02:48,000 --> 02:02:50,000
它没有选择内嵌

2980
02:02:50,000 --> 02:02:52,000
或者说把字形

2981
02:02:52,000 --> 02:02:54,000
轮廓作为一个 subset

2982
02:02:54,000 --> 02:02:56,000
的方式放进去的话

2983
02:02:56,000 --> 02:02:58,000
在没有字体文件

2984
02:02:58,000 --> 02:03:00,000
比如说 Mac

2985
02:03:00,000 --> 02:03:02,000
它就显示是一个方框

2986
02:03:02,000 --> 02:03:04,000
没有那个字

2987
02:03:04,000 --> 02:03:06,000
所以你看要说的话还是有很多要求

2988
02:03:06,000 --> 02:03:08,000
像什么

2989
02:03:08,000 --> 02:03:10,000
字体字及内嵌这个

2990
02:03:10,000 --> 02:03:12,000
事情的话其实还是有很多事情

2991
02:03:12,000 --> 02:03:14,000
要做 PDF 在这个

2992
02:03:14,000 --> 02:03:16,000
技术

2993
02:03:16,000 --> 02:03:18,000
对东亚的这些文本

2994
02:03:18,000 --> 02:03:20,000
显示的话是发挥了很大的作用

2995
02:03:20,000 --> 02:03:22,000
subsetting

2996
02:03:22,000 --> 02:03:24,000
要不然的话它没有办法

2997
02:03:24,000 --> 02:03:26,000
要么 PDF 它文件

2998
02:03:26,000 --> 02:03:28,000
要会越来越大

2999
02:03:28,000 --> 02:03:30,000
每个都是几十兆一个哪怕只有两页的字

3000
02:03:32,000 --> 02:03:34,000
当年的话就是为什么 TrueType

3001
02:03:34,000 --> 02:03:36,000
微软和苹果

3002
02:03:36,000 --> 02:03:38,000
联手起来发 TrueType

3003
02:03:38,000 --> 02:03:40,000
就是这一点它要打败 Adubi

3004
02:03:40,000 --> 02:03:42,000
Adubi 它那时候

3005
02:03:42,000 --> 02:03:44,000
它就是有一个 ATM

3006
02:03:44,000 --> 02:03:46,000
Adubi Type Management

3007
02:03:46,000 --> 02:03:48,000
它就是要来控制

3008
02:03:48,000 --> 02:03:50,000
就是显示字体和

3009
02:03:50,000 --> 02:03:52,000
打印机的字体给打印机的

3010
02:03:52,000 --> 02:03:54,000
是就是很

3011
02:03:54,000 --> 02:03:56,000
轻度的 PS

3012
02:03:56,000 --> 02:03:58,000
PS 直线的字体

3013
02:03:58,000 --> 02:04:00,000
而给显示的话

3014
02:04:00,000 --> 02:04:02,000
那就是低端的点阵字体

3015
02:04:02,000 --> 02:04:04,000
所以它需要一个

3016
02:04:04,000 --> 02:04:06,000
ATM 这样一个软件来进行

3017
02:04:06,000 --> 02:04:08,000
来调配

3018
02:04:08,000 --> 02:04:10,000
然后下载以后

3019
02:04:10,000 --> 02:04:12,000
一起下载然后交给这个输出端

3020
02:04:12,000 --> 02:04:14,000
去给打印机才能打印出

3021
02:04:14,000 --> 02:04:16,000
东西来

3022
02:04:16,000 --> 02:04:18,000
后来就是微软和 Apple 它就

3023
02:04:18,000 --> 02:04:20,000
联合出了 TrueType 以后

3024
02:04:20,000 --> 02:04:22,000
它就可以动态的下载

3025
02:04:22,000 --> 02:04:24,000
这个字体的取信信息

3026
02:04:24,000 --> 02:04:26,000
直接就传给了打印机

3027
02:04:26,000 --> 02:04:28,000
所以以后就

3028
02:04:28,000 --> 02:04:30,000
逐渐的就不用打印端

3029
02:04:30,000 --> 02:04:32,000
的输出端的

3030
02:04:32,000 --> 02:04:34,000
打印字体

3031
02:04:34,000 --> 02:04:36,000
所以当年的这样的一个

3032
02:04:36,000 --> 02:04:38,000
工作流程的话对这个整个

3033
02:04:38,000 --> 02:04:40,000
就是 DTP

3034
02:04:40,000 --> 02:04:42,000
就是桌面排版的流程是一个非常大的

3035
02:04:42,000 --> 02:04:44,000
一个影响

3036
02:04:44,000 --> 02:04:46,000
天哪这个

3037
02:04:46,000 --> 02:04:48,000
都很难想象

3038
02:04:48,000 --> 02:04:50,000
你现在如果要自己搞一套

3039
02:04:50,000 --> 02:04:52,000
新的超级系统你要从头把这些都做一遍的话

3040
02:04:52,000 --> 02:04:54,000
不要做到后年马月去

3041
02:04:54,000 --> 02:04:56,000
对呀

3042
02:04:56,000 --> 02:04:58,000
现在我们随便说不要点两下

3043
02:04:58,000 --> 02:05:00,000
那就印出来了

3044
02:05:00,000 --> 02:05:02,000
所以现在终于知道那么

3045
02:05:02,000 --> 02:05:04,000
多 CPU 的

3046
02:05:04,000 --> 02:05:06,000
性能的提升都跑哪里去了

3047
02:05:06,000 --> 02:05:08,000
对呀

3048
02:05:08,000 --> 02:05:10,000
这个计算机它在辛苦的

3049
02:05:10,000 --> 02:05:12,000
演算它在算什么东西

3050
02:05:12,000 --> 02:05:14,000
对呀

3051
02:05:14,000 --> 02:05:16,000
其实这跟生物也有

3052
02:05:16,000 --> 02:05:18,000
有点巧合吧

3053
02:05:18,000 --> 02:05:20,000
就是人类为什么

3054
02:05:20,000 --> 02:05:22,000
眼睛要长在脸上

3055
02:05:22,000 --> 02:05:24,000
听起来很奇怪

3056
02:05:24,000 --> 02:05:26,000
就是因为

3057
02:05:26,000 --> 02:05:28,000
眼睛要

3058
02:05:28,000 --> 02:05:30,000
眼睛要尽量接

3059
02:05:30,000 --> 02:05:32,000
要尽量靠近大脑

3060
02:05:32,000 --> 02:05:34,000
不然你眼睛比如说你眼睛长在手指上

3061
02:05:34,000 --> 02:05:36,000
其实更灵活

3062
02:05:36,000 --> 02:05:38,000
但是长在脸上

3063
02:05:38,000 --> 02:05:40,000
神经连续就更长

3064
02:05:40,000 --> 02:05:42,000
神经连续短

3065
02:05:42,000 --> 02:05:44,000
带宽比较高

3066
02:05:44,000 --> 02:05:46,000
然后大脑里面其实

3067
02:05:46,000 --> 02:05:48,000
和视觉相关的那一块也是特别特别发达

3068
02:05:52,000 --> 02:05:54,000
为什么我扯到这里

3069
02:05:58,000 --> 02:06:00,000
好吧既然我们的字终于从

3070
02:06:00,000 --> 02:06:02,000
打印出来了我们这一期节目先谈到这里

3071
02:06:02,000 --> 02:06:04,000
好

3072
02:06:04,000 --> 02:06:06,000
其实还是

3073
02:06:06,000 --> 02:06:08,000
一路开了多少盒子

3074
02:06:08,000 --> 02:06:10,000
但是都没有

3075
02:06:10,000 --> 02:06:12,000
盖上

3076
02:06:12,000 --> 02:06:14,000
比如说其实刚才我在想

3077
02:06:14,000 --> 02:06:16,000
我们遗漏的最大

3078
02:06:16,000 --> 02:06:18,000
的一个点其实是

3079
02:06:18,000 --> 02:06:20,000
流感器里面的字

3080
02:06:20,000 --> 02:06:22,000
这具体的选择

3081
02:06:22,000 --> 02:06:24,000
过程就比如说有些人

3082
02:06:24,000 --> 02:06:26,000
会有疑惑说为什么

3083
02:06:26,000 --> 02:06:28,000
我在 word

3084
02:06:28,000 --> 02:06:30,000
里面可以把中文字体

3085
02:06:30,000 --> 02:06:32,000
设置成那么多种什么

3086
02:06:32,000 --> 02:06:34,000
诵体凯体隶书对吧

3087
02:06:34,000 --> 02:06:36,000
但是流感器里面就不行

3088
02:06:36,000 --> 02:06:38,000
这我们可以专讲一期

3089
02:06:38,000 --> 02:06:40,000
对啊

3090
02:06:40,000 --> 02:06:42,000
web phone 啊什么的

3091
02:06:42,000 --> 02:06:44,000
包括那个

3092
02:06:44,000 --> 02:06:46,000
包括 emoji 在那个网页上

3093
02:06:46,000 --> 02:06:48,000
显示和它在这个

3094
02:06:48,000 --> 02:06:50,000
传统的 c code 数据库

3095
02:06:50,000 --> 02:06:52,000
里面的一些坑吧

3096
02:06:52,000 --> 02:06:54,000
你们说的你们都得记着

3097
02:06:54,000 --> 02:06:56,000
自己说的坑自己填

3098
02:06:56,000 --> 02:06:58,000
不能只敢挖

3099
02:06:58,000 --> 02:07:00,000
不管埋啊

3100
02:07:00,000 --> 02:07:02,000
自谈自串债务表

3101
02:07:04,000 --> 02:07:06,000
刘克宁表示很高兴

3102
02:07:06,000 --> 02:07:08,000
刘克宁

3103
02:07:08,000 --> 02:07:10,000
好了

3104
02:07:10,000 --> 02:07:12,000
那今天的节目就到这里

3105
02:07:12,000 --> 02:07:14,000
我们还是欢迎大家

3106
02:07:14,000 --> 02:07:16,000
继续写邮件给我们反馈

3107
02:07:16,000 --> 02:07:18,000
自谈自串的联系

3108
02:07:18,000 --> 02:07:20,000
邮件地址是 podcast

3109
02:07:20,000 --> 02:07:22,000
podcast

3110
02:07:22,000 --> 02:07:24,000
podcast 的评写是 pod

3111
02:07:24,000 --> 02:07:26,000
type 的评写是

3112
02:07:26,000 --> 02:07:28,000
type 的评写是 type

3113
02:07:28,000 --> 02:07:30,000
我们的联系地址是 podcast

3114
02:07:30,000 --> 02:07:32,000
podcast.com

3115
02:07:32,000 --> 02:07:34,000
OK

3116
02:07:34,000 --> 02:07:36,000
感谢收听 ipn podcast

3117
02:07:36,000 --> 02:07:38,000
在 podcast 的网络旗下

3118
02:07:38,000 --> 02:07:40,000
it 技术的娱乐节目内很火

3119
02:07:40,000 --> 02:07:42,000
我们号称 hardcore 但谁没有干货

3120
02:07:42,000 --> 02:07:44,000
想听人听不想听人就别听

3121
02:07:44,000 --> 02:07:46,000
您可以为本节目捐款

3122
02:07:46,000 --> 02:07:48,000
捐款地址是 kernelpanic.fm.donate

3123
02:07:48,000 --> 02:07:50,000
捐款金顺利只要是 8 的正数倍

3124
02:07:50,000 --> 02:07:52,000
捐款不会给您带来什么

3125
02:07:52,000 --> 02:07:54,000
不捐也不会让您失去什么

3126
02:07:54,000 --> 02:07:56,000
我们的口号是 no hard feelings

3127
02:07:56,000 --> 02:07:58,000
如果您有任何反馈

3128
02:07:58,000 --> 02:08:00,000
可以发邮件到 kernelpanic.fm.donate

3129
02:08:00,000 --> 02:08:02,000
同时也欢迎你

3130
02:08:02,000 --> 02:08:04,000
收听 rail 主持的

3131
02:08:04,000 --> 02:08:06,000
风头圈以及 ipn 旗下的其他几档节目

3132
02:08:06,000 --> 02:08:08,000
未知到太一来了

3133
02:08:08,000 --> 02:08:10,000
流行通信

3134
02:08:10,000 --> 02:08:12,000
硬影像无次元博物制选美

3135
02:08:12,000 --> 02:08:14,000
必下观一天世界

3136
02:08:14,000 --> 02:08:16,000
我们下期节目再会

3137
02:08:16,000 --> 02:08:18,000
拜拜

3138
02:08:34,000 --> 02:08:36,000
这也是一项重要的记呢

3139
02:08:36,000 --> 02:08:38,000
德国药品广告

3140
02:08:38,000 --> 02:08:40,000
播完之后无论药品广告

3141
02:08:40,000 --> 02:08:42,000
多么的轻松温馨

3142
02:08:42,000 --> 02:08:44,000
最后一定要来一个说的特别快的什么

3143
02:08:44,000 --> 02:08:46,000
请问医主之类的

3144
02:08:48,000 --> 02:08:50,000
请自询您的医师或您的药剂师

3145
02:08:50,000 --> 02:08:52,000
因为这个是广告法规定的

3146
02:08:52,000 --> 02:08:54,000
必须要讲

3147
02:08:54,000 --> 02:08:56,000
没错必须要说

3148
02:08:56,000 --> 02:08:58,000
吴涛你不能偷懒

3149
02:08:58,000 --> 02:09:00,000
以后录我们自弹自串的话

3150
02:09:00,000 --> 02:09:02,000
你要每期要有个新口号

3151
02:09:02,000 --> 02:09:04,000
说也是

3152
02:09:04,000 --> 02:09:06,000
这一期没有新口号

3153
02:09:06,000 --> 02:09:08,000
但是我之前试图找一个

3154
02:09:08,000 --> 02:09:10,000
跟字体稍微有点关系

3155
02:09:10,000 --> 02:09:12,000
好吧本期我们的口号是

3156
02:09:12,000 --> 02:09:14,000
没有口号

3157
02:09:14,000 --> 02:09:16,000
本期我们的口号是

3158
02:09:16,000 --> 02:09:18,000
Blish

3159
02:09:18,000 --> 02:09:20,000
这个点出于

3160
02:09:20,000 --> 02:09:22,000
点出于那个

3161
02:09:22,000 --> 02:09:24,000
Cnut 高德纳

3162
02:09:24,000 --> 02:09:26,000
在排印他的第一版

3163
02:09:26,000 --> 02:09:28,000
TALCP

3164
02:09:28,000 --> 02:09:30,000
The art and

3165
02:09:30,000 --> 02:09:32,000
The art of computer program

3166
02:09:32,000 --> 02:09:34,000
The art of computer program

3167
02:09:34,000 --> 02:09:36,000
就是计算机的编程艺术

3168
02:09:36,000 --> 02:09:38,000
这本书的时候

3169
02:09:38,000 --> 02:09:40,000
他看到了自己的出稿的

3170
02:09:40,000 --> 02:09:42,000
一个小样

3171
02:09:42,000 --> 02:09:44,000
然后他当时说 Blish

3172
02:09:44,000 --> 02:09:46,000
所以他写了 Tax

3173
02:09:46,000 --> 02:09:48,000
这排的是啥呀

3174
02:09:48,000 --> 02:09:50,000
然后

3175
02:09:50,000 --> 02:09:52,000
他就专门

3176
02:09:52,000 --> 02:09:54,000
他就专门搞了一套叫做

3177
02:09:54,000 --> 02:09:56,000
先是搞了 Metaphones

3178
02:09:56,000 --> 02:09:58,000
然后再搞了一套

3179
02:09:58,000 --> 02:10:00,000
然后再搞了 Latech

3180
02:10:00,000 --> 02:10:02,000
然后用来排自己的版

3181
02:10:02,000 --> 02:10:04,000
这算是一个

3182
02:10:04,000 --> 02:10:06,000
比较应景的口号

3183
02:10:06,000 --> 02:10:08,000
本期我们的口号就是

3184
02:10:08,000 --> 02:10:10,000
Blish

3185
02:10:10,000 --> 02:10:12,000
好难念

3186
02:10:12,000 --> 02:10:14,000
我不知道他具体识识到怎么样

3187
02:10:14,000 --> 02:10:16,000
因为 Cnut 毕竟是个美国人

3188
02:10:16,000 --> 02:10:18,000
他也认识念的是

3189
02:10:18,000 --> 02:10:20,000
Meh

3190
02:10:22,000 --> 02:10:24,000
对其实我们还可以讲讲

3191
02:10:24,000 --> 02:10:26,000
找机会讲讲 Metaphones

3192
02:10:26,000 --> 02:10:28,000
他的一些设计哲学

3193
02:10:28,000 --> 02:10:30,000
还是有一点意思

3194
02:10:30,000 --> 02:10:32,000
而且

3195
02:10:32,000 --> 02:10:34,000
有机会我还是想讲 Tach

3196
02:10:34,000 --> 02:10:36,000
好吧

3197
02:10:36,000 --> 02:10:38,000
那个完全不懂

3198
02:10:40,000 --> 02:10:42,000
确实是

3199
02:10:42,000 --> 02:10:44,000
坑越来越深了

3200
02:10:44,000 --> 02:10:46,000
已经挖到地球内面去了

