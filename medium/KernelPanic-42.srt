1
00:00:00,000 --> 00:00:02,000
3 2 1 开始

2
00:00:03,000 --> 00:00:22,000
【音乐】

3
00:00:22,000 --> 00:00:23,000
大家好

4
00:00:23,000 --> 00:00:27,000
今天是 7 月 26 号自弹自畅的第 26 期

5
00:00:27,000 --> 00:00:31,000
同时也是内核恐慌应该是第 42 期

6
00:00:31,000 --> 00:00:33,000
我希望是第 42 期

7
00:00:33,000 --> 00:00:35,000
或者是 41 期

8
00:00:35,000 --> 00:00:37,000
为什么?不可能吧?

9
00:00:37,000 --> 00:00:39,000
不一定嘛

10
00:00:39,000 --> 00:00:45,000
同时也是内核恐慌第 41 和 42 的纠缠态那一期

11
00:00:45,000 --> 00:00:50,000
OK,大家听到的时候才可以 review 这到底是哪一期

12
00:00:51,000 --> 00:00:59,000
【自弹自畅】

13
00:00:59,000 --> 00:01:02,000
【黄浦江边】

14
00:01:02,000 --> 00:01:18,000
【音乐】

15
00:01:18,000 --> 00:01:34,000
【音乐】

16
00:01:34,000 --> 00:01:46,000
【音乐】

17
00:01:46,000 --> 00:02:06,000
【音乐】

18
00:02:06,000 --> 00:02:29,000
【音乐】

19
00:02:29,000 --> 00:02:35,000
【音乐】

20
00:02:35,000 --> 00:02:41,000
【音乐】

21
00:02:41,000 --> 00:02:43,000
【音乐】

22
00:02:44,000 --> 00:03:06,000
【音乐】

23
00:03:06,000 --> 00:03:08,000
所以刚你又念错了是曲线嘛

24
00:03:08,000 --> 00:03:10,000
九曲十八弯

25
00:03:11,000 --> 00:03:13,000
我念的是九曲十八弯

26
00:03:13,000 --> 00:03:16,000
你是变成那个曲吗?勾曲那个曲

27
00:03:17,000 --> 00:03:24,000
这个字本意是指什么?这个字本来指的是弯曲还是歌曲呢?

28
00:03:24,000 --> 00:03:26,000
本意应该是弯曲

29
00:03:27,000 --> 00:03:29,000
然后歌曲是隐身意

30
00:03:29,000 --> 00:03:36,000
指示字一开始是指一个弯折了的事物

31
00:03:37,000 --> 00:03:42,000
对啊,所以还是弯曲是它的词源本意

32
00:03:42,000 --> 00:03:45,000
OK,所以音乐是隐身意

33
00:03:45,000 --> 00:03:49,000
所以它还有一个意思就是我们都有用过的嘛

34
00:03:49,000 --> 00:03:52,000
就是你们再猜一下这个用途是念哪个音啊

35
00:03:52,000 --> 00:03:55,000
就是用那个发酵做酒的那个东西

36
00:03:55,000 --> 00:03:56,000
曲吧

37
00:03:56,000 --> 00:03:57,000
那是另一个字

38
00:03:57,000 --> 00:04:00,000
那是另外一个词讲话来的吧

39
00:04:00,000 --> 00:04:02,000
对,但那是另一个字

40
00:04:02,000 --> 00:04:04,000
反体它是有个麦字的旁的嘛

41
00:04:04,000 --> 00:04:06,000
对,那其实是另一个词

42
00:04:06,000 --> 00:04:08,000
那个其实是念曲,医生

43
00:04:10,000 --> 00:04:11,000
第一声

44
00:04:11,000 --> 00:04:12,000
对,第一声曲

45
00:04:12,000 --> 00:04:16,000
对,九曲,杨河大曲,广告

46
00:04:18,000 --> 00:04:19,000
没说清楚

47
00:04:19,000 --> 00:04:20,000
一会得逼掉

48
00:04:21,000 --> 00:04:24,000
然后还有一个曲

49
00:04:24,000 --> 00:04:29,000
是另外一个字,是麦字旁一个菊花的菊不要那个草字头

50
00:04:30,000 --> 00:04:34,000
啊,那也是那个就是窖母嘛

51
00:04:34,000 --> 00:04:39,000
对,就这个是这个是这个曲就九曲这个曲的一体字吧

52
00:04:39,000 --> 00:04:40,000
好像是

53
00:04:41,000 --> 00:04:44,000
没有,所以你现在说的就是说其实原来反体字是三个字

54
00:04:44,000 --> 00:04:47,000
然后简化就变成一个字而已

55
00:04:47,000 --> 00:04:51,000
不,那个是用九曲的那个曲是简化成了这个东西

56
00:04:51,000 --> 00:04:55,000
但是前面那个弯曲和这个小犬

57
00:04:55,000 --> 00:04:58,000
它们好像原始就这样吧

58
00:04:58,000 --> 00:05:00,000
对,它们原来是两个字嘛

59
00:05:00,000 --> 00:05:03,000
就是现在被那个简并成了一个字

60
00:05:03,000 --> 00:05:05,000
这个还可以是一个信

61
00:05:06,000 --> 00:05:07,000
好,那考你们了

62
00:05:07,000 --> 00:05:09,000
用作信的时候念几声

63
00:05:09,000 --> 00:05:12,000
吃,对,吃,应该是念医生吧

64
00:05:12,000 --> 00:05:18,000
吃羊嘛,就是我记得那个下午江湖里面某派掌门人是不是就姓吃

65
00:05:18,000 --> 00:05:20,000
对,用作信是念医生的

66
00:05:21,000 --> 00:05:23,000
好吧,这个中文真是坑爹啊

67
00:05:23,000 --> 00:05:25,000
哎,我问你们一个事

68
00:05:25,000 --> 00:05:27,000
那天我想到的

69
00:05:27,000 --> 00:05:30,000
手机和掌机有什么区别

70
00:05:32,000 --> 00:05:34,000
掌机是 Handheld 的游戏机

71
00:05:34,000 --> 00:05:36,000
掌上游戏机的

72
00:05:36,000 --> 00:05:38,000
对,但是手机呢

73
00:05:39,000 --> 00:05:43,000
手机是指手上电话机

74
00:05:43,000 --> 00:05:44,000
手持电话机

75
00:05:44,000 --> 00:05:50,000
然后我问你这是一个没有这个 context 基础的外国人来学中文

76
00:05:50,000 --> 00:05:52,000
你说他怎么区分这两个东西呢

77
00:05:53,000 --> 00:05:56,000
但是英文里面有 handset 这个词吧

78
00:05:56,000 --> 00:05:58,000
德语里面手机是 handy 嘛对吧

79
00:05:59,000 --> 00:06:03,000
对,然后那个最早的那个 PDA 是 palm 对吧

80
00:06:04,000 --> 00:06:06,000
palm 就是掌吗

81
00:06:06,000 --> 00:06:08,000
掌机

82
00:06:08,000 --> 00:06:09,000
什么时候变成游戏机了

83
00:06:09,000 --> 00:06:10,000
掌上游戏机啊

84
00:06:10,000 --> 00:06:11,000
对吧对吧

85
00:06:11,000 --> 00:06:13,000
不是变了,这是个缩写嘛

86
00:06:13,000 --> 00:06:14,000
这是个简称嘛

87
00:06:14,000 --> 00:06:15,000
那手机呢

88
00:06:15,000 --> 00:06:17,000
手持电话机

89
00:06:17,000 --> 00:06:18,000
我刚才不是说了

90
00:06:18,000 --> 00:06:19,000
原来是这么来的

91
00:06:19,000 --> 00:06:21,000
那手持和掌持有什么区别

92
00:06:21,000 --> 00:06:23,000
掌上和手持

93
00:06:23,000 --> 00:06:26,000
我就说没有,就是手持和掌上有什么区别

94
00:06:26,000 --> 00:06:29,000
其实没有太大的区别

95
00:06:29,000 --> 00:06:31,000
因为这只是一个语用的习惯吧

96
00:06:31,000 --> 00:06:33,000
至少在我看完

97
00:06:33,000 --> 00:06:35,000
就是嘛,所以说我所以很坑嘛

98
00:06:35,000 --> 00:06:36,000
就是没有任何理由

99
00:06:36,000 --> 00:06:40,000
因为他你说手上拿个电话和手上拿个游戏机有本质区别吗

100
00:06:40,000 --> 00:06:42,000
掌上电话这个说法好像

101
00:06:42,000 --> 00:06:46,000
对啊对啊,但其实这个问题在英文里也会出现

102
00:06:46,000 --> 00:06:48,000
比如给你一个手字母缩写的词

103
00:06:48,000 --> 00:06:50,000
它有可能代表了多个词

104
00:06:50,000 --> 00:06:52,000
必须有一个语境才可以去解读它

105
00:06:52,000 --> 00:06:54,000
对对对,我就是说这个

106
00:06:54,000 --> 00:06:57,000
就是中文有时候就是得靠这种 context 去积累

107
00:06:57,000 --> 00:06:58,000
没有什么

108
00:06:58,000 --> 00:07:01,000
任何语言都一样

109
00:07:01,000 --> 00:07:03,000
给你一个 cell

110
00:07:03,000 --> 00:07:06,000
你没有删下来你怎么知道它指的是求是还是

111
00:07:06,000 --> 00:07:08,000
细胞

112
00:07:08,000 --> 00:07:09,000
还是那个

113
00:07:09,000 --> 00:07:11,000
不是,通讯的那个

114
00:07:11,000 --> 00:07:12,000
通讯

115
00:07:12,000 --> 00:07:13,000
对吧

116
00:07:13,000 --> 00:07:15,000
但这两个是同一样的呀

117
00:07:15,000 --> 00:07:17,000
而且在我们今天的这个话题下

118
00:07:17,000 --> 00:07:21,000
cell 好像在中文里还被翻译成位是吧

119
00:07:21,000 --> 00:07:24,000
比如那个吃胃马的位其实指的就是 cell

120
00:07:24,000 --> 00:07:26,000
是这样的吗

121
00:07:26,000 --> 00:07:28,000
吃胃马就是 row cell 的意思

122
00:07:28,000 --> 00:07:29,000
好啊

123
00:07:29,000 --> 00:07:30,000
OK

124
00:07:30,000 --> 00:07:32,000
哦,good enough

125
00:07:36,000 --> 00:07:40,000
第二个是在 tib 的这个帖子下面给我们留言

126
00:07:40,000 --> 00:07:41,000
其实有两位给我们留言

127
00:07:41,000 --> 00:07:43,000
一位说有关

128
00:07:43,000 --> 00:07:46,000
这位的署名叫 Johnny Yoon

129
00:07:46,000 --> 00:07:49,000
他应该是一位韩国人

130
00:07:49,000 --> 00:07:51,000
这也是我们听众吧

131
00:07:51,000 --> 00:07:54,000
对,但看他这个姓的写法有点像韩国人

132
00:07:54,000 --> 00:07:55,000
是吧

133
00:07:55,000 --> 00:07:56,000
你们这么国际化

134
00:07:56,000 --> 00:07:58,000
姓,姓尹

135
00:07:58,000 --> 00:08:03,000
他说有关键盘键位和键位的映射的

136
00:08:03,000 --> 00:08:06,000
移动设备貌似又是一般风景了吧

137
00:08:06,000 --> 00:08:09,000
各国的酒键布局之类的

138
00:08:09,000 --> 00:08:17,000
他的意思就是说我们那期说到键盘和键位映射的时候没有提到这个酒键布局的键盘

139
00:08:17,000 --> 00:08:19,000
酒键是那个九宫阁那种吧

140
00:08:19,000 --> 00:08:20,000
对,应该是吧

141
00:08:20,000 --> 00:08:22,000
就 10 key 吗是那个叫什么

142
00:08:22,000 --> 00:08:24,000
在英文里面叫 10 key 吧

143
00:08:24,000 --> 00:08:25,000
是叫 10 key 吗

144
00:08:25,000 --> 00:08:26,000
对,10 键

145
00:08:26,000 --> 00:08:28,000
日语叫 10 key

146
00:08:28,000 --> 00:08:30,000
为什么是 10 key 呢

147
00:08:30,000 --> 00:08:31,000
因为 1234567890

148
00:08:31,000 --> 00:08:32,000
就是十个键吧

149
00:08:32,000 --> 00:08:34,000
里面有 0 为什么叫九宫阁

150
00:08:35,000 --> 00:08:40,000
他是一个一般来说是一个 3 x 4 的矩阵嘛

151
00:08:40,000 --> 00:08:41,000
但是

152
00:08:41,000 --> 00:08:43,000
对啊,应该是 12 个键吧

153
00:08:43,000 --> 00:08:48,000
在那个英文版的那个 iOS 里面你加那个九宫阁键盘

154
00:08:48,000 --> 00:08:49,000
他英文也是叫拼音

155
00:08:49,000 --> 00:08:51,000
然后 10 就是 10 key

156
00:08:51,000 --> 00:08:52,000
10 个十键这个

157
00:08:54,000 --> 00:08:55,000
make sense

158
00:08:55,000 --> 00:08:57,000
所以其实这里有一个问题是这样的

159
00:08:57,000 --> 00:09:01,000
我一直很不确定这种触屏的这种屏幕上的输入法

160
00:09:01,000 --> 00:09:04,000
它有那个就是扣叫什么

161
00:09:04,000 --> 00:09:06,000
那个 keycode 的概念吗

162
00:09:06,000 --> 00:09:07,000
应该没有了吧

163
00:09:07,000 --> 00:09:08,000
触屏上面应该没有吧

164
00:09:08,000 --> 00:09:11,000
但是以前就是电话机上是什么怎么实现的

165
00:09:11,000 --> 00:09:13,000
电话机是模拟信号

166
00:09:13,000 --> 00:09:16,000
电话机以前是靠声音长短实现

167
00:09:16,000 --> 00:09:17,000
对对对

168
00:09:17,000 --> 00:09:19,000
做了一个 modem 那种方式

169
00:09:19,000 --> 00:09:20,000
对

170
00:09:20,000 --> 00:09:24,000
所以其实我们可以认为这个九键布局的这个键盘

171
00:09:24,000 --> 00:09:27,000
它相当于是含了一层这个输入法嘛

172
00:09:27,000 --> 00:09:29,000
如果它不只是输入数字的话

173
00:09:29,000 --> 00:09:30,000
可以这么理解

174
00:09:30,000 --> 00:09:31,000
对

175
00:09:31,000 --> 00:09:32,000
而且那个还挺复杂的

176
00:09:32,000 --> 00:09:36,000
它比如说那个 10 key 上面不是每个键它有三个字母吗

177
00:09:36,000 --> 00:09:37,000
ABC

178
00:09:37,000 --> 00:09:38,000
RDF

179
00:09:38,000 --> 00:09:41,000
然后就是就是在欧美生活的人很多都知道

180
00:09:41,000 --> 00:09:43,000
就是他们会那个电话号码

181
00:09:43,000 --> 00:09:46,000
他不会写中国都是号的 8888

182
00:09:46,000 --> 00:09:48,000
这种比较好记的数字

183
00:09:48,000 --> 00:09:53,000
但他们会很取巧的直接把那个转写成他需要的那个字母的组合

184
00:09:54,000 --> 00:09:57,000
比如说那个苹果的那个那个 800 电话

185
00:09:57,000 --> 00:10:00,000
他写的是 800 然后 A Apple 对吧

186
00:10:01,000 --> 00:10:03,000
然后你就照着那个 10 key 上面

187
00:10:03,000 --> 00:10:06,000
比如你拿出你的那个手机嘛

188
00:10:06,000 --> 00:10:08,000
然后你找那个拨号那个键盘

189
00:10:08,000 --> 00:10:09,000
你看他每个键

190
00:10:09,000 --> 00:10:10,000
就是 A 是 R 嘛

191
00:10:10,000 --> 00:10:11,000
对你这样 A 嘛

192
00:10:11,000 --> 00:10:12,000
然后就是 R 对吧

193
00:10:12,000 --> 00:10:13,000
P 是 7 嘛

194
00:10:13,000 --> 00:10:14,000
按两下

195
00:10:14,000 --> 00:10:17,000
就 27753

196
00:10:17,000 --> 00:10:18,000
对对对

197
00:10:18,000 --> 00:10:21,000
这就是打到是比如说就是苹果的一个客服电话

198
00:10:21,000 --> 00:10:24,000
就很多厂商啊就会去做这么一种转化嘛

199
00:10:24,000 --> 00:10:26,000
但是好像我中国从来没有见过人这么用过

200
00:10:28,000 --> 00:10:31,000
毕竟不是一个拉丁字母为基础的国家

201
00:10:31,000 --> 00:10:34,000
但这个其实我觉得这个还挺挺有用的

202
00:10:34,000 --> 00:10:35,000
就比较好记

203
00:10:35,000 --> 00:10:38,000
就是你看如果像中国记个电话号码

204
00:10:38,000 --> 00:10:40,000
就只能只能死记一辈号码

205
00:10:40,000 --> 00:10:42,000
或者是用这个协音嘛

206
00:10:42,000 --> 00:10:44,000
所以各种连号啊

207
00:10:44,000 --> 00:10:46,000
86 啊 0 啊什么的

208
00:10:46,000 --> 00:10:47,000
就大家特别喜好

209
00:10:47,000 --> 00:10:48,000
我觉得一个问题

210
00:10:48,000 --> 00:10:50,000
一个很大的问题就是中文的那个

211
00:10:50,000 --> 00:10:51,000
中文中

212
00:10:51,000 --> 00:10:54,000
中文中汉语记数字太方便了

213
00:10:54,000 --> 00:10:55,000
记数字太对

214
00:10:55,000 --> 00:10:57,000
就全部都是单音节字的

215
00:10:57,000 --> 00:10:59,000
对而且就是我在

216
00:10:59,000 --> 00:11:01,000
因为你在欧洲一般都会隔写嘛

217
00:11:01,000 --> 00:11:03,000
法国会两位两位隔写

218
00:11:03,000 --> 00:11:05,000
我又想到要开始发了

219
00:11:05,000 --> 00:11:06,000
要更反了

220
00:11:08,000 --> 00:11:11,000
但是德语里面也是各位数先念的是吧

221
00:11:11,000 --> 00:11:12,000
如果是几十几

222
00:11:12,000 --> 00:11:16,000
我一定念念电话一般不会那么复杂

223
00:11:16,000 --> 00:11:18,000
就电话看情况嘛

224
00:11:18,000 --> 00:11:20,000
但是当然有些人也是两位两位的

225
00:11:20,000 --> 00:11:21,000
记数的话

226
00:11:21,000 --> 00:11:24,000
就德语跟英文是比较相近的吧

227
00:11:24,000 --> 00:11:27,000
就除了最末两位比较坑爹之外

228
00:11:27,000 --> 00:11:28,000
其他还好

229
00:11:28,000 --> 00:11:30,000
德文里面就是最末两位

230
00:11:30,000 --> 00:11:33,000
就是他要先念各位数再念十位数是吧

231
00:11:33,000 --> 00:11:35,000
英文也是一样的吧

232
00:11:35,000 --> 00:11:38,000
英文是 64 比如说 64 嘛

233
00:11:38,000 --> 00:11:39,000
64 嘛

234
00:11:39,000 --> 00:11:42,000
但是德文是倒过来的吧

235
00:11:42,000 --> 00:11:44,000
德文是 4 和 60

236
00:11:44,000 --> 00:11:45,000
对啊德文是倒过来的

237
00:11:45,000 --> 00:11:46,000
460

238
00:11:46,000 --> 00:11:47,000
你说这个意思

239
00:11:47,000 --> 00:11:48,000
对

240
00:11:48,000 --> 00:11:49,000
德文是倒过来的

241
00:11:49,000 --> 00:11:51,000
就只有最后两位不一样的

242
00:11:51,000 --> 00:11:54,000
但其实就是有个念法的问题

243
00:11:54,000 --> 00:11:57,000
比如说中文里面会说 3 个 5

244
00:11:57,000 --> 00:11:59,000
然后英文里面会说 triple 5

245
00:11:59,000 --> 00:12:02,000
然后说两个 8 你会说 triple 8

246
00:12:02,000 --> 00:12:04,000
然后如果比较长的数字的话

247
00:12:04,000 --> 00:12:06,000
其实一般都是一组一组念的

248
00:12:06,000 --> 00:12:07,000
就是两位数两位数的念嘛

249
00:12:07,000 --> 00:12:08,000
英文里面

250
00:12:08,000 --> 00:12:11,000
法国人要数 4 个 20 加 8

251
00:12:11,000 --> 00:12:13,000
然后脑子里面全乱了

252
00:12:13,000 --> 00:12:15,000
一团降乎

253
00:12:15,000 --> 00:12:17,000
还得先把那个电话号码拆成一个数

254
00:12:17,000 --> 00:12:18,000
然后这个叫什么来的

255
00:12:18,000 --> 00:12:20,000
那个数论叫什么来的

256
00:12:20,000 --> 00:12:24,000
就是每一个自然数可以拆成怎么几个数

257
00:12:24,000 --> 00:12:27,000
就是那个质数的那种什么 power 的组合嘛

258
00:12:27,000 --> 00:12:29,000
啊啊啊

259
00:12:29,000 --> 00:12:33,000
叫 fundamental theorem of arithmetic

260
00:12:33,000 --> 00:12:37,000
中文叫算数基本定理

261
00:12:37,000 --> 00:12:39,000
算数基本定理

262
00:12:39,000 --> 00:12:40,000
算数基本定理

263
00:12:40,000 --> 00:12:44,000
他就说每个大运一的自然数均可以写为质数的 g

264
00:12:44,000 --> 00:12:45,000
对

265
00:12:46,000 --> 00:12:48,000
他有一个唯一的表述

266
00:12:48,000 --> 00:12:50,000
大小排列之后只有一种表示

267
00:12:50,000 --> 00:12:52,000
这跟后面那个我们要讲的那个

268
00:12:52,000 --> 00:12:54,000
这不就是质因数分解吗

269
00:12:54,000 --> 00:12:56,000
还不一样

270
00:12:56,000 --> 00:12:58,000
他讲的是另外一个

271
00:12:58,000 --> 00:13:00,000
其实这个跟我们后面要讲的那个

272
00:13:00,000 --> 00:13:02,000
unicode normalization 有点关系

273
00:13:02,000 --> 00:13:04,000
有点异曲同工的意思

274
00:13:04,000 --> 00:13:06,000
OK

275
00:13:06,000 --> 00:13:07,000
所以你要先

276
00:13:07,000 --> 00:13:09,000
首先是就是正整数嘛

277
00:13:09,000 --> 00:13:12,000
而且你要先断定什么是质数嘛

278
00:13:12,000 --> 00:13:14,000
然后他有一种唯一的分解法

279
00:13:14,000 --> 00:13:16,000
嗯嗯对

280
00:13:16,000 --> 00:13:18,000
然后这个就是算数基本定理

281
00:13:18,000 --> 00:13:21,000
我们为什么从键盘扯到这边

282
00:13:21,000 --> 00:13:22,000
对为什么扯到这边

283
00:13:22,000 --> 00:13:24,000
说法国人拆那个数

284
00:13:24,000 --> 00:13:27,000
好吧 OK

285
00:13:27,000 --> 00:13:31,000
各国念这个电话号码的习惯应该是

286
00:13:31,000 --> 00:13:33,000
有一定的规律的

287
00:13:33,000 --> 00:13:37,000
我记得 wikipedia 还有一个页面是专门汇总各国的这个习惯

288
00:13:37,000 --> 00:13:38,000
所以也是

289
00:13:38,000 --> 00:13:41,000
你们念中国的手机号是先念就是

290
00:13:41,000 --> 00:13:43,000
比如说

291
00:13:43,000 --> 00:13:45,000
一般是 344 这样的规则

292
00:13:45,000 --> 00:13:46,000
不不看那个吧

293
00:13:46,000 --> 00:13:47,000
有很多人是 335 是吧

294
00:13:47,000 --> 00:13:49,000
看那个就是叫什么

295
00:13:49,000 --> 00:13:51,000
就区号的区分嘛

296
00:13:51,000 --> 00:13:53,000
比如说中国的手机号码都是同一

297
00:13:53,000 --> 00:13:54,000
都是 11 位嘛

298
00:13:54,000 --> 00:13:56,000
都是 344 嘛

299
00:13:56,000 --> 00:13:58,000
然后那个座机号码就不一定了

300
00:13:58,000 --> 00:13:59,000
因为有些地区是

301
00:13:59,000 --> 00:14:00,000
最开始是

302
00:14:00,000 --> 00:14:03,000
这还有历史有 5 位 6 位 7 位 8 位的嘛

303
00:14:03,000 --> 00:14:05,000
对现在基本都是 8 位 8 位

304
00:14:05,000 --> 00:14:07,000
8 位就是 44

305
00:14:07,000 --> 00:14:08,000
44 吗

306
00:14:08,000 --> 00:14:09,000
而且主要是

307
00:14:09,000 --> 00:14:12,000
还有他有那个就是长途电话的区号嘛

308
00:14:12,000 --> 00:14:15,000
区号理论上讲就是 3 位或者 4 位

309
00:14:15,000 --> 00:14:16,000
中国是 3 位或者 4 位的

310
00:14:16,000 --> 00:14:19,000
对日本是有 2 位的

311
00:14:19,000 --> 00:14:20,000
因为小

312
00:14:20,000 --> 00:14:23,000
区号其实是那个 2 位或 3 位

313
00:14:23,000 --> 00:14:24,000
然后补一个 0

314
00:14:24,000 --> 00:14:26,000
就国内拨是补 0 吗

315
00:14:26,000 --> 00:14:27,000
对对对

316
00:14:27,000 --> 00:14:29,000
要跟那个国际长途分开吗

317
00:14:29,000 --> 00:14:30,000
对

318
00:14:30,000 --> 00:14:32,000
哎这个很多人不知道这个事情

319
00:14:32,000 --> 00:14:34,000
就是怎么拨那个国际长途

320
00:14:34,000 --> 00:14:36,000
为什么是区号都是 0

321
00:14:36,000 --> 00:14:37,000
然后一个什么

322
00:14:37,000 --> 00:14:39,000
要要要对要省掉那个 0 对吧

323
00:14:39,000 --> 00:14:41,000
不是是有些国家是不省的

324
00:14:41,000 --> 00:14:44,000
不是不是中国对省不省是看那个电话规则

325
00:14:44,000 --> 00:14:45,000
不是这样的

326
00:14:45,000 --> 00:14:46,000
中国是这样的

327
00:14:46,000 --> 00:14:48,000
就说如果中国你拨 0

328
00:14:48,000 --> 00:14:50,000
然后你再加一个数字的话

329
00:14:50,000 --> 00:14:53,000
首先如果你拨本地 local number

330
00:14:53,000 --> 00:14:54,000
就不需要拨区号的话

331
00:14:54,000 --> 00:14:57,000
肯定不会不会是 0 开头的对不对

332
00:14:57,000 --> 00:14:59,000
然后如果你要拨另外一个区的话

333
00:14:59,000 --> 00:15:01,000
你可能是 0 加一个非 0 数字开头的

334
00:15:01,000 --> 00:15:03,000
这他就让你在拨区号了对不对

335
00:15:03,000 --> 00:15:05,000
但是你拨 00 的话

336
00:15:05,000 --> 00:15:08,000
其实就是变成那个所谓的那个加号

337
00:15:08,000 --> 00:15:11,000
对这个就是国际的那个 prefix

338
00:15:11,000 --> 00:15:13,000
就他是这么来区分的吗

339
00:15:13,000 --> 00:15:16,000
然后这个时候就牵涉到一个表表达的问题

340
00:15:16,000 --> 00:15:18,000
比如说我们中国会写

341
00:15:18,000 --> 00:15:22,000
假设比如说深圳是 0755

342
00:15:22,000 --> 00:15:25,000
但是如果说你从外国打到深圳的话

343
00:15:25,000 --> 00:15:27,000
你是拨 0086

344
00:15:27,000 --> 00:15:29,000
86 是中国的那个国际区号代码

345
00:15:29,000 --> 00:15:31,000
然后这个时候你就不会拨 075

346
00:15:31,000 --> 00:15:33,000
然后 075 你只会拨 755

347
00:15:33,000 --> 00:15:36,000
因为前面 86 已经确定了你是这个中国

348
00:15:36,000 --> 00:15:39,000
然后你要在下面就跟着要拨区了嘛

349
00:15:39,000 --> 00:15:40,000
对吧

350
00:15:40,000 --> 00:15:42,000
所以你看很多人写的名片上的表达

351
00:15:42,000 --> 00:15:44,000
他会写加号 86

352
00:15:44,000 --> 00:15:47,000
然后 0 扩号表示 optional 是可选的嘛

353
00:15:47,000 --> 00:15:49,000
然后是 755

354
00:15:49,000 --> 00:15:50,000
后面再跟一个分子

355
00:15:50,000 --> 00:15:52,000
你确定这个 0 是可选的吗

356
00:15:52,000 --> 00:15:55,000
就是我的理解是不是每个国家打这个

357
00:15:55,000 --> 00:15:57,000
就是不是从每个国家打外国的电话的时候

358
00:15:57,000 --> 00:15:58,000
这个 0 都是可以省略的

359
00:15:58,000 --> 00:16:00,000
中国是可选的吗

360
00:16:00,000 --> 00:16:01,000
没有

361
00:16:01,000 --> 00:16:02,000
绝大多数都是的

362
00:16:02,000 --> 00:16:03,000
就我的经验来讲的话

363
00:16:03,000 --> 00:16:04,000
只有意大利不行

364
00:16:04,000 --> 00:16:07,000
因为就是意大利他们本身那个号就是有一个 0

365
00:16:07,000 --> 00:16:09,000
所以那个 0 就不用省

366
00:16:09,000 --> 00:16:10,000
就是他的开头是 0

367
00:16:10,000 --> 00:16:12,000
有 0 开头的这个

368
00:16:12,000 --> 00:16:13,000
对

369
00:16:13,000 --> 00:16:14,000
就是意大利这样

370
00:16:14,000 --> 00:16:16,000
这其实是有一份国际标准的

371
00:16:16,000 --> 00:16:19,000
就是国际有个叫 ITO 的

372
00:16:19,000 --> 00:16:21,000
跟通信有关的组织

373
00:16:21,000 --> 00:16:24,000
他对这个电话号码的注记格式

374
00:16:24,000 --> 00:16:25,000
他对这个电话号码的注记格式

375
00:16:25,000 --> 00:16:27,000
包括有些 0 是不是可以放在扩号里

376
00:16:27,000 --> 00:16:29,000
就是可选的这个格式

377
00:16:29,000 --> 00:16:31,000
首先他的书写是有一个规范的

378
00:16:31,000 --> 00:16:33,000
其次就这个书写对应的规范

379
00:16:33,000 --> 00:16:38,000
其实是跟各国的这个电话制式的有关的

380
00:16:38,000 --> 00:16:40,000
其实这个电话号码要不要加 0

381
00:16:40,000 --> 00:16:42,000
这个 0 可不可以省略

382
00:16:42,000 --> 00:16:44,000
以及他是不是可选的

383
00:16:44,000 --> 00:16:47,000
其实是跟那个模拟时代的这个通信的原理有关

384
00:16:47,000 --> 00:16:49,000
就那个叫什么承控机的那个东西是吧

385
00:16:49,000 --> 00:16:51,000
这应该是可以查证的

386
00:16:51,000 --> 00:16:54,000
只是我以前学的一些东西

387
00:16:54,000 --> 00:16:56,000
有点记得不太清楚

388
00:16:56,000 --> 00:16:58,000
这个时候要透露那个你的底牌了吗

389
00:16:58,000 --> 00:17:00,000
没有没有

390
00:17:00,000 --> 00:17:02,000
我们真语的专业

391
00:17:02,000 --> 00:17:04,000
其实是

392
00:17:04,000 --> 00:17:06,000
好吧

393
00:17:06,000 --> 00:17:08,000
其实那个这个跟通信比较相关

394
00:17:08,000 --> 00:17:11,000
但我的专业虽然有一些跟通信相关的东西

395
00:17:11,000 --> 00:17:13,000
但还离得有一点远

396
00:17:13,000 --> 00:17:16,000
只是会顺带的学到一次

397
00:17:16,000 --> 00:17:18,000
听众朋友们我郑重的告诉你们一个惊人的事实

398
00:17:18,000 --> 00:17:20,000
在座的四位主持里面竟然

399
00:17:20,000 --> 00:17:23,000
全部都是具有理工科背景的

400
00:17:23,000 --> 00:17:25,000
这很惊人吗

401
00:17:25,000 --> 00:17:27,000
这很正常吗

402
00:17:27,000 --> 00:17:29,000
我一直以为你们两个是文科生

403
00:17:29,000 --> 00:17:31,000
我靠你太看不起他们了

404
00:17:31,000 --> 00:17:34,000
你不能因为他们两个是自残自畅了就看不起他们吧

405
00:17:36,000 --> 00:17:38,000
你要看不起文科生

406
00:17:38,000 --> 00:17:41,000
不是这不是这个是一个这个是一个什么来着

407
00:17:41,000 --> 00:17:43,000
所谓这个什么物以类聚人以群分

408
00:17:43,000 --> 00:17:46,000
所以我们要搞这个什么大串联嘛

409
00:17:46,000 --> 00:17:48,000
结果发现串来串去还是一伙人

410
00:17:48,000 --> 00:17:51,000
你对文科生有什么幻想

411
00:17:51,000 --> 00:17:53,000
因为觉得特别文艺嘛

412
00:17:53,000 --> 00:17:55,000
就这个挺好的就缺这个东西

413
00:17:55,000 --> 00:17:57,000
自男自畅不文艺

414
00:17:57,000 --> 00:17:59,000
Rex 是学什么的

415
00:17:59,000 --> 00:18:01,000
之前念了一个博士

416
00:18:01,000 --> 00:18:04,000
那个哲学的博士

417
00:18:04,000 --> 00:18:07,000
现在 Rex 应该是我们这里比较偏

418
00:18:07,000 --> 00:18:09,000
社科类的吧

419
00:18:09,000 --> 00:18:13,000
Rex 是念哲学硕士

420
00:18:13,000 --> 00:18:16,000
之前他是本科学的学经济的好像

421
00:18:16,000 --> 00:18:17,000
还好还好还好

422
00:18:17,000 --> 00:18:20,000
终于终于有一个非理工背景的人

423
00:18:21,000 --> 00:18:25,000
可是 Rex 不愿意上咱们的节目

424
00:18:25,000 --> 00:18:28,000
Rex 好像都没有出现过怎么一回事

425
00:18:28,000 --> 00:18:29,000
对

426
00:18:29,000 --> 00:18:31,000
他连自男自畅都没有上

427
00:18:31,000 --> 00:18:33,000
没错太不给面子了

428
00:18:33,000 --> 00:18:36,000
没关系主编大人出场的话

429
00:18:36,000 --> 00:18:37,000
要有一个隆重的仪式

430
00:18:37,000 --> 00:18:39,000
我已经给他安排好话题了

431
00:18:39,000 --> 00:18:41,000
请大家期待

432
00:18:41,000 --> 00:18:42,000
非常好

433
00:18:44,000 --> 00:18:47,000
好我们推进到最后一个听众反馈

434
00:18:47,000 --> 00:18:51,000
最后一个也是在 TIB 上给我们的留言

435
00:18:51,000 --> 00:18:53,000
他的 ID 是 link 0

436
00:18:53,000 --> 00:18:55,000
然后他说收到反斜杠

437
00:18:55,000 --> 00:18:57,000
我首先想到的是 Tach

438
00:18:57,000 --> 00:18:59,000
我们上期其实提了一下 Tach

439
00:18:59,000 --> 00:19:01,000
但没有细讲了

440
00:19:01,000 --> 00:19:04,000
Tach 在反斜杠里就是作为转移符吗

441
00:19:04,000 --> 00:19:05,000
还是什么

442
00:19:05,000 --> 00:19:07,000
反斜杠在 Tach 里作为转移符

443
00:19:07,000 --> 00:19:08,000
对没错

444
00:19:08,000 --> 00:19:11,000
就是以反斜杠开头的一个标志符

445
00:19:11,000 --> 00:19:15,000
然后后面可以可选用花光号方光号的一个

446
00:19:15,000 --> 00:19:18,000
在 Tach 里面还有一些什么希腊文字母也都是用

447
00:19:18,000 --> 00:19:21,000
都是像转移符一样都用反斜杠开始用

448
00:19:21,000 --> 00:19:22,000
对

449
00:19:22,000 --> 00:19:23,000
说到这个反斜杠

450
00:19:23,000 --> 00:19:26,000
我上次终于见到有真人在我现实生活中的一个朋友

451
00:19:26,000 --> 00:19:28,000
他用反斜杠表示

452
00:19:28,000 --> 00:19:30,000
或者就是 A 或者 B

453
00:19:30,000 --> 00:19:31,000
上海很多

454
00:19:32,000 --> 00:19:33,000
不是

455
00:19:33,000 --> 00:19:35,000
在现实生活中

456
00:19:35,000 --> 00:19:37,000
不是在魔幻都市里

457
00:19:39,000 --> 00:19:40,000
是在

458
00:19:40,000 --> 00:19:44,000
上海人就这样被你被你抛离了现实生活

459
00:19:47,000 --> 00:19:48,000
对

460
00:19:48,000 --> 00:19:50,000
反正我还当时看着还是蛮吃惊的

461
00:19:50,000 --> 00:19:53,000
我都很想问说为什么要用这个

462
00:19:53,000 --> 00:19:57,000
你还没有说清楚他在什么样的情况下用这个

463
00:19:57,000 --> 00:19:58,000
就是他写两个选项

464
00:19:58,000 --> 00:20:00,000
我们说比如说

465
00:20:00,000 --> 00:20:03,000
就中文里面你会写 A 或者 B 的时候

466
00:20:03,000 --> 00:20:06,000
你会把他那个斜杠把它表示

467
00:20:06,000 --> 00:20:09,000
他是在手写还是在打字的时候

468
00:20:09,000 --> 00:20:11,000
是那个打字

469
00:20:11,000 --> 00:20:12,000
对打字的时候

470
00:20:12,000 --> 00:20:14,000
而且他两种混用关键是你知道吗

471
00:20:14,000 --> 00:20:17,000
所以在他看来左滑右滑其实是一样的

472
00:20:17,000 --> 00:20:19,000
就是逼死处女座

473
00:20:19,000 --> 00:20:21,000
但其实想一下好像也没什么区别

474
00:20:21,000 --> 00:20:22,000
就是左滑和右滑有什么区别

475
00:20:22,000 --> 00:20:23,000
确实没什么区别

476
00:20:23,000 --> 00:20:24,000
在座有处女座吗

477
00:20:24,000 --> 00:20:25,000
没有

478
00:20:25,000 --> 00:20:27,000
但是我不能弄人家这样

479
00:20:27,000 --> 00:20:30,000
尤其是在一篇文章里面就混用这个东西

480
00:20:30,000 --> 00:20:31,000
对

481
00:20:31,000 --> 00:20:32,000
所以你会用这个

482
00:20:33,000 --> 00:20:36,000
尤其是在一篇文章里面就混用这个东西

483
00:20:36,000 --> 00:20:37,000
对

484
00:20:37,000 --> 00:20:39,000
它其实是个约定了

485
00:20:39,000 --> 00:20:41,000
就是你单纯从这个作用上来说

486
00:20:41,000 --> 00:20:42,000
你用左

487
00:20:42,000 --> 00:20:45,000
左斜和右斜都是能起到同样的作用

488
00:20:45,000 --> 00:20:46,000
那我问一个问题

489
00:20:46,000 --> 00:20:49,000
你说在那种阿拉伯文

490
00:20:49,000 --> 00:20:52,000
这种从右向左写文字里面他用什么

491
00:20:52,000 --> 00:20:55,000
阿拉伯文的逗号都是往右逗的

492
00:20:55,000 --> 00:20:56,000
你知道吗

493
00:20:56,000 --> 00:20:57,000
刚好做了个近面对称

494
00:20:57,000 --> 00:20:58,000
对

495
00:20:58,000 --> 00:21:01,000
还有阿拉伯文的问号也是近面对称的

496
00:21:01,000 --> 00:21:03,000
不妨你解释一下你们德国

497
00:21:03,000 --> 00:21:05,000
为什么前面那个引号要放在下面

498
00:21:05,000 --> 00:21:07,000
这就是德意志的传统

499
00:21:08,000 --> 00:21:11,000
就从那个歌特体的时代

500
00:21:11,000 --> 00:21:12,000
Black letter 的时代

501
00:21:12,000 --> 00:21:14,000
那个引号就一直是在那

502
00:21:15,000 --> 00:21:16,000
就是左下右上对吧

503
00:21:16,000 --> 00:21:17,000
应该是

504
00:21:17,000 --> 00:21:19,000
对就一开始是在左下

505
00:21:19,000 --> 00:21:21,000
而且那个引号引的方向也是反的

506
00:21:21,000 --> 00:21:25,000
然后中文的那个方扩号是左上右下对吧

507
00:21:25,000 --> 00:21:26,000
这个比较 make sense

508
00:21:26,000 --> 00:21:28,000
中文数排的时候

509
00:21:28,000 --> 00:21:32,000
一个符号也是应该从左上角开始写

510
00:21:32,000 --> 00:21:35,000
所以写符号也应该在左上角

511
00:21:35,000 --> 00:21:36,000
数排是右上左下

512
00:21:36,000 --> 00:21:38,000
对数排是右上左下

513
00:21:38,000 --> 00:21:39,000
对

514
00:21:40,000 --> 00:21:41,000
为什么呢

515
00:21:41,000 --> 00:21:44,000
数排右上左下的话符合就是笔顺

516
00:21:44,000 --> 00:21:47,000
如果你是左上的话就变成要运笔的话

517
00:21:47,000 --> 00:21:49,000
要写两笔是吧

518
00:21:49,000 --> 00:21:50,000
对

519
00:21:50,000 --> 00:21:53,000
你右上左下的话就符合书写的笔顺

520
00:21:53,000 --> 00:21:54,000
就是横折嘛

521
00:21:54,000 --> 00:21:56,000
就是横折和数折

522
00:21:56,000 --> 00:21:57,000
make sense

523
00:21:57,000 --> 00:21:59,000
这也是假设是右利手的情况

524
00:21:59,000 --> 00:22:01,000
但是中文默认都是这样的

525
00:22:01,000 --> 00:22:06,000
左利手你也不可能从左下开始写一个条

526
00:22:06,000 --> 00:22:08,000
然后右折嘛

527
00:22:08,000 --> 00:22:09,000
这很怪嘛

528
00:22:09,000 --> 00:22:13,000
中文的基本笔画顺序叫从左往右从上到下

529
00:22:13,000 --> 00:22:15,000
那比如说阿拉伯那些是默认是左利手

530
00:22:15,000 --> 00:22:16,000
也不是

531
00:22:16,000 --> 00:22:18,000
因为他们的运笔的话要从右往左画嘛

532
00:22:18,000 --> 00:22:20,000
就是横要往右往左画横

533
00:22:20,000 --> 00:22:23,000
但阿拉伯人大部分也是右利手

534
00:22:23,000 --> 00:22:26,000
但我只是说文字

535
00:22:26,000 --> 00:22:28,000
从文字上下

536
00:22:28,000 --> 00:22:31,000
所以还是一个习惯问题

537
00:22:33,000 --> 00:22:34,000
这没有什么不能改的

538
00:22:34,000 --> 00:22:36,000
这可能有一定的偶然因素

539
00:22:36,000 --> 00:22:40,000
所以汉字的运笔的话默认是从左往右

540
00:22:40,000 --> 00:22:41,000
比如说你写一个口

541
00:22:41,000 --> 00:22:43,000
口的最后一笔的话你不可能

542
00:22:43,000 --> 00:22:47,000
顺便第二笔画画画画回来

543
00:22:47,000 --> 00:22:49,000
从右往左就连成一笔

544
00:22:49,000 --> 00:22:50,000
不能这样的

545
00:22:50,000 --> 00:22:52,000
你要另外起第三笔从左往右写

546
00:22:53,000 --> 00:22:54,000
他是在画圈

547
00:22:54,000 --> 00:22:56,000
就是中文默认只能从左往右嘛

548
00:22:56,000 --> 00:22:58,000
他没有从右往左的笔画中文

549
00:23:00,000 --> 00:23:01,000
OK 明白

550
00:23:02,000 --> 00:23:05,000
好吧这样我们终于花了半个小时的时间

551
00:23:05,000 --> 00:23:06,000
把反馈说完了

552
00:23:06,000 --> 00:23:08,000
那我们现在终于可以进入正题了

553
00:23:08,000 --> 00:23:09,000
OK

554
00:23:12,000 --> 00:23:13,000
我们上次第一期节目

555
00:23:13,000 --> 00:23:16,000
把从头到尾大概过了一遍

556
00:23:16,000 --> 00:23:18,000
我们敲一下一个键盘

557
00:23:18,000 --> 00:23:20,000
然后让一个字显示在屏幕

558
00:23:20,000 --> 00:23:22,000
最后打印出来终于发生了什么

559
00:23:22,000 --> 00:23:25,000
那我们现在终于可以开始拆开来

560
00:23:25,000 --> 00:23:26,000
一步一步讲了

561
00:23:29,000 --> 00:23:31,000
但今天讲的好像也不是键盘吧

562
00:23:31,000 --> 00:23:32,000
今天我们讲什么

563
00:23:32,000 --> 00:23:33,000
讲乱码是吗

564
00:23:34,000 --> 00:23:35,000
对

565
00:23:35,000 --> 00:23:38,000
这个有点像从显示开始了

566
00:23:38,000 --> 00:23:42,000
先从显示的这一层面来讲

567
00:23:42,000 --> 00:23:44,000
为什么有时候会看到我们不想看的东西

568
00:23:44,000 --> 00:23:47,000
或者我们想看的东西显出来是错误的

569
00:23:47,000 --> 00:23:49,000
其实首先这个概念

570
00:23:49,000 --> 00:23:52,000
就是从用户来讲的话

571
00:23:52,000 --> 00:23:53,000
它显示不正常

572
00:23:53,000 --> 00:23:54,000
它就觉得是乱码

573
00:23:54,000 --> 00:23:58,000
其实这个乱码背后有很多不一样的道理

574
00:23:58,000 --> 00:23:59,000
对吧就是

575
00:23:59,000 --> 00:24:02,000
因为如果你一直从那个字面上来讲

576
00:24:02,000 --> 00:24:04,000
乱码就是首先你有个码

577
00:24:04,000 --> 00:24:05,000
然后那个码不对了

578
00:24:05,000 --> 00:24:06,000
就变成乱码

579
00:24:06,000 --> 00:24:10,000
可是实际上并不一定完全都是码的问题

580
00:24:10,000 --> 00:24:13,000
有时候还有字库显示的问题

581
00:24:13,000 --> 00:24:14,000
或者其他问题对吧

582
00:24:15,000 --> 00:24:17,000
英语里面乱码叫什么

583
00:24:17,000 --> 00:24:18,000
不知道

584
00:24:18,000 --> 00:24:20,000
英语里面会有乱码吗

585
00:24:20,000 --> 00:24:22,000
对因为英文里面只有 ASUKI

586
00:24:22,000 --> 00:24:23,000
所以他们不存在乱码

587
00:24:23,000 --> 00:24:27,000
而且就是说乱码也就是我们双字节开始的

588
00:24:27,000 --> 00:24:28,000
所以在日本来讲

589
00:24:28,000 --> 00:24:29,000
日本他们说

590
00:24:29,000 --> 00:24:32,000
在英文世界里他们都把乱码叫成 MOJIBA-K

591
00:24:32,000 --> 00:24:33,000
是我们日语传过去的

592
00:24:34,000 --> 00:24:35,000
叫什么

593
00:24:36,000 --> 00:24:38,000
因为日语叫 MOJIBA-K

594
00:24:38,000 --> 00:24:40,000
就是文字

595
00:24:40,000 --> 00:24:42,000
MOJI 是文字

596
00:24:42,000 --> 00:24:43,000
MOJI 是文字

597
00:24:43,000 --> 00:24:44,000
然后 BA-K 就是变化

598
00:24:44,000 --> 00:24:46,000
就是文字变掉了

599
00:24:48,000 --> 00:24:52,000
德语里面叫 FUHAUSALA

600
00:24:54,000 --> 00:24:58,000
就好像沙拉一样被拌在一起了

601
00:24:59,000 --> 00:25:00,000
那英文叫什么

602
00:25:00,000 --> 00:25:02,000
Including Error

603
00:25:02,000 --> 00:25:04,000
编码错误

604
00:25:06,000 --> 00:25:07,000
就是因为

605
00:25:07,000 --> 00:25:10,000
就感觉这个事情在英文里面挺难出现的

606
00:25:10,000 --> 00:25:11,000
你想象一下

607
00:25:11,000 --> 00:25:12,000
他们都是 ASUKI

608
00:25:12,000 --> 00:25:13,000
大部分都

609
00:25:13,000 --> 00:25:17,000
基本上所有的编码方式都兼容他们

610
00:25:17,000 --> 00:25:18,000
即便如此

611
00:25:18,000 --> 00:25:19,000
比如说他们看到一个

612
00:25:19,000 --> 00:25:22,000
比如说俄语的编码

613
00:25:22,000 --> 00:25:23,000
然后用什么

614
00:25:25,000 --> 00:25:28,000
用 ISO 8859 来显示的时候

615
00:25:28,000 --> 00:25:30,000
同样是没有任何意义的文字

616
00:25:30,000 --> 00:25:35,000
他们对这个东西总得有个称呼吧

617
00:25:36,000 --> 00:25:37,000
反正在维基上面有一个

618
00:25:37,000 --> 00:25:41,000
下面有一个这样相关的页面叫 MOJI-BA-K

619
00:25:41,000 --> 00:25:43,000
就是日文的那个音

620
00:25:45,000 --> 00:25:47,000
就英译的日语

621
00:25:47,000 --> 00:25:49,000
Garbled Text

622
00:25:50,000 --> 00:25:52,000
德语就是菜性沙拉

623
00:25:52,000 --> 00:25:53,000
对应的

624
00:25:55,000 --> 00:25:56,000
对啊

625
00:25:56,000 --> 00:25:57,000
德文的菜性沙拉这个 Page

626
00:25:57,000 --> 00:25:59,000
这个就翻译成乱码

627
00:25:59,000 --> 00:26:02,000
英文界面就是 MOJI-BA-K

628
00:26:03,000 --> 00:26:05,000
所以英文其实它是那个直译了

629
00:26:05,000 --> 00:26:06,000
它直译了

630
00:26:06,000 --> 00:26:08,000
所以英语没有一个原生的

631
00:26:08,000 --> 00:26:10,000
这个就像是 Emoji

632
00:26:10,000 --> 00:26:13,000
就是日文对现代

633
00:26:13,000 --> 00:26:16,000
这个字符编码的一些贡献

634
00:26:17,000 --> 00:26:20,000
对这其实是一个比较本地化的一个说法

635
00:26:20,000 --> 00:26:25,000
就是这种事情可能只是在东亚地区最先出现

636
00:26:25,000 --> 00:26:30,000
然后日本又是一个最早在这个 CJK 领域确定了字符

637
00:26:30,000 --> 00:26:32,000
比较标准字符籍的这样一个国家

638
00:26:32,000 --> 00:26:34,000
所以他们可能最早遇到这个问题

639
00:26:34,000 --> 00:26:36,000
他们就创了一个术语这样

640
00:26:36,000 --> 00:26:39,000
所以我们要从字符籍和编码开始说

641
00:26:40,000 --> 00:26:41,000
可以

642
00:26:42,000 --> 00:26:43,000
那先讲中文吧

643
00:26:43,000 --> 00:26:46,000
中文的 GB 编码是不能不说的

644
00:26:47,000 --> 00:26:51,000
好吧是不是应该先讲汉字整个的这个

645
00:26:51,000 --> 00:26:58,000
因为实际上那个东亚地区以 CJK 为核心的这个字符籍的标准

646
00:26:58,000 --> 00:26:59,000
最早是日本人做的

647
00:26:59,000 --> 00:27:01,000
就是 JIS

648
00:27:02,000 --> 00:27:08,000
对日本在那个时代有比较强烈的支持日本的需求

649
00:27:08,000 --> 00:27:14,000
因为日本是东亚第一个开始电子化的国家

650
00:27:15,000 --> 00:27:23,000
对或者我觉得一部分原因也是因为他们最早能够在计算机上勉强的使用一些本地的文字

651
00:27:23,000 --> 00:27:27,000
比如他们将那个片甲铭用 ASCII 的扩展实现了

652
00:27:28,000 --> 00:27:33,000
日本最早的一个这个文字编码应该是 JIS 的 0201

653
00:27:33,000 --> 00:27:35,000
它是个单字节的

654
00:27:35,000 --> 00:27:43,000
很关键它把这个 7 位 ASCII 给扩展上面放入了他们的半角的片甲铭

655
00:27:43,000 --> 00:27:48,000
而且他们在里面和 ASCII 相比还有两个字都不一样

656
00:27:49,000 --> 00:27:53,000
他们在那个 92 那一号原来是反斜杠

657
00:27:53,000 --> 00:27:56,000
然后在这个 JIS 里面它给它换成了日元符号

658
00:27:56,000 --> 00:28:00,000
然后在 126 号里面原来是一个波浪

659
00:28:00,000 --> 00:28:05,000
但是在这个 JIS 里面给它换成了这个叫什么上化线

660
00:28:05,000 --> 00:28:09,000
不是下化线也不是中化线的莲子符而是一个上化线

661
00:28:09,000 --> 00:28:12,000
所以这个比较古老了

662
00:28:12,000 --> 00:28:16,000
因为已经是 1969 年 6 月 1 号制定的

663
00:28:16,000 --> 00:28:20,000
这个可是日本最老最旧的一个文字系统

664
00:28:20,000 --> 00:28:22,000
就是文字编码

665
00:28:23,000 --> 00:28:28,000
这是第一次他们在计算机上面实现的日文

666
00:28:29,000 --> 00:28:32,000
为什么那个时候要选片甲铭不选屏兰铭

667
00:28:33,000 --> 00:28:36,000
就是传音嘛就是打电报嘛

668
00:28:36,000 --> 00:28:39,000
因为这主要是为了通信的方便

669
00:28:41,000 --> 00:28:51,000
其实通常来说在技术领域是将日本的书写系统对应到四种文字上

670
00:28:51,000 --> 00:28:55,000
也就是在详写系统下面它用了四种的文字

671
00:28:55,000 --> 00:28:58,000
一种是所谓的罗马字

672
00:28:58,000 --> 00:29:00,000
也就是拉丁文

673
00:29:00,000 --> 00:29:01,000
另一种就是片甲铭

674
00:29:01,000 --> 00:29:02,000
还有一种屏甲铭

675
00:29:02,000 --> 00:29:04,000
最后才是汉字

676
00:29:06,000 --> 00:29:07,000
打个 X 问个问题

677
00:29:07,000 --> 00:29:13,000
日本有没有想过有没有过要把汉字整个废大的思潮只用甲铭

678
00:29:13,000 --> 00:29:14,000
有

679
00:29:14,000 --> 00:29:15,000
应该有吧

680
00:29:15,000 --> 00:29:16,000
有

681
00:29:17,000 --> 00:29:20,000
然后因为朝鲜就是有这样的字

682
00:29:20,000 --> 00:29:22,000
而且朝鲜的确就是朝鲜半岛

683
00:29:22,000 --> 00:29:24,000
朝鲜已经成功了吗

684
00:29:24,000 --> 00:29:26,000
朝鲜的话它已经几乎就都不用了

685
00:29:26,000 --> 00:29:29,000
韩国的话就是偶尔还用

686
00:29:29,000 --> 00:29:31,000
但是现在也是尽量都是用那个

687
00:29:31,000 --> 00:29:32,000
燕文

688
00:29:32,000 --> 00:29:35,000
对中文习惯叫燕文

689
00:29:35,000 --> 00:29:38,000
但是他们不喜欢燕文这个词

690
00:29:38,000 --> 00:29:42,000
他们觉得燕文这个词是有歧视

691
00:29:42,000 --> 00:29:44,000
所以他们更喜欢用韩国这个词

692
00:29:45,000 --> 00:29:48,000
所以汉国和燕文其实还有两个词

693
00:29:48,000 --> 00:29:49,000
对

694
00:29:49,000 --> 00:29:52,000
因为燕文燕所谓的燕是燕语的燕

695
00:29:52,000 --> 00:29:54,000
就是俗字的

696
00:29:54,000 --> 00:29:56,000
俗字的意思

697
00:29:56,000 --> 00:29:59,000
但是日本人倒是很乖的用甲铭

698
00:29:59,000 --> 00:30:01,000
因为甲铭的对应的是真名

699
00:30:01,000 --> 00:30:03,000
所谓的真名就是汉字

700
00:30:03,000 --> 00:30:05,000
日本人还怪怪的

701
00:30:05,000 --> 00:30:06,000
甲不是戒的意思吗

702
00:30:06,000 --> 00:30:07,000
就是甲戒

703
00:30:07,000 --> 00:30:08,000
对

704
00:30:08,000 --> 00:30:11,000
所以甲铭的还有它的反应词是真名

705
00:30:11,000 --> 00:30:12,000
所谓的真名就是汉字

706
00:30:12,000 --> 00:30:17,000
所以后来 G 死后面就是再用骗甲

707
00:30:17,000 --> 00:30:21,000
加入叛甲骗甲名词

708
00:30:21,000 --> 00:30:22,000
进行了

709
00:30:22,000 --> 00:30:24,000
从 78 年开始

710
00:30:24,000 --> 00:30:27,000
他们后来 83 年 90 年 97 年改了好多次

711
00:30:27,000 --> 00:30:29,000
然后后面就逐渐的就是

712
00:30:29,000 --> 00:30:33,000
相当于就是在趣味码里面把所有的字都加进去了

713
00:30:33,000 --> 00:30:34,000
够用吗

714
00:30:34,000 --> 00:30:36,000
就是那个码数

715
00:30:36,000 --> 00:30:37,000
也是不停不停的加

716
00:30:37,000 --> 00:30:40,000
所以没改一次的话就是字数越来越多

717
00:30:40,000 --> 00:30:41,000
字数越来越多

718
00:30:41,000 --> 00:30:43,000
因为你用那个 ASCII

719
00:30:43,000 --> 00:30:45,000
你把高位字上之后也只有 128 个码点

720
00:30:45,000 --> 00:30:48,000
ASCII 只用来实现那个半甲甲铭

721
00:30:49,000 --> 00:30:50,000
对

722
00:30:50,000 --> 00:30:52,000
ASCII 的扩展就是 ASCII 扩展

723
00:30:52,000 --> 00:30:57,000
它当然有一个 G 死的 Romand 就是一个对 ASCII 的一个

724
00:30:57,000 --> 00:31:00,000
可以说是一个 ASCII 的一个 variation

725
00:31:00,000 --> 00:31:02,000
你说半甲甲铭还有全甲甲铭

726
00:31:02,000 --> 00:31:03,000
对

727
00:31:03,000 --> 00:31:04,000
一开始只有半甲甲铭吗

728
00:31:04,000 --> 00:31:06,000
这个概念其实有点乱了

729
00:31:06,000 --> 00:31:08,000
我们是不是可以趁机来整理一下

730
00:31:08,000 --> 00:31:10,000
就是所谓的这个半甲甲铭

731
00:31:10,000 --> 00:31:15,000
它一方面指的是这个甲铭的宽度是那个全宽汉字的一半

732
00:31:15,000 --> 00:31:19,000
然后同时另一方面它也同意地指向了说

733
00:31:19,000 --> 00:31:23,000
这个字符只使用了一个字节这样子的一个意思

734
00:31:23,000 --> 00:31:27,000
所以在上次节目我也说过就是所谓的单字节

735
00:31:27,000 --> 00:31:31,000
双字节和半甲全甲原来是两个概念

736
00:31:31,000 --> 00:31:36,000
但是呢就是说在字体排音里面是所谓的半甲全甲

737
00:31:36,000 --> 00:31:38,000
它只是一个宽度的概念而已

738
00:31:38,000 --> 00:31:42,000
对半甲全甲其实应该局限于描述视觉上的一个效果

739
00:31:42,000 --> 00:31:45,000
对它是实际物理上面的一个宽度问题

740
00:31:45,000 --> 00:31:50,000
然后呢单字节双字节这就是编码的问题嘛

741
00:31:50,000 --> 00:31:56,000
而在很久以前的确半甲的就是单字节

742
00:31:56,000 --> 00:31:59,000
然后全甲的就是双字节

743
00:31:59,000 --> 00:32:01,000
所以呢就有人开始混用了

744
00:32:02,000 --> 00:32:06,000
对而且这个混用其实是带有一定的主动性的

745
00:32:06,000 --> 00:32:09,000
就是说他们并不是错误的用了它

746
00:32:09,000 --> 00:32:13,000
而是希望以这种方式帮助别人理解和记忆

747
00:32:13,000 --> 00:32:14,000
是两个吗

748
00:32:14,000 --> 00:32:16,000
到了现在混在一起了呀

749
00:32:17,000 --> 00:32:20,000
所以那个甲名到底是就是说

750
00:32:20,000 --> 00:32:24,000
个数一共能不能装到 128 个码点里面去

751
00:32:24,000 --> 00:32:26,000
实际上呢就是在最早的时候呢

752
00:32:26,000 --> 00:32:30,000
然后呢它就是 G 4 X 的 0208 的话

753
00:32:30,000 --> 00:32:31,000
它只装了 94 个字嘛

754
00:32:31,000 --> 00:32:34,000
就是就只装了那个半甲片甲名

755
00:32:34,000 --> 00:32:35,000
就差不多用完了嘛

756
00:32:35,000 --> 00:32:37,000
128 个点你用了 90 几个

757
00:32:37,000 --> 00:32:38,000
94 个

758
00:32:38,000 --> 00:32:40,000
那全甲的跟这个半甲的有什么区别

759
00:32:40,000 --> 00:32:42,000
全甲的都用两个字符了嘛

760
00:32:42,000 --> 00:32:44,000
就用两个字节来表示了

761
00:32:44,000 --> 00:32:47,000
但是它表达的它就说一个半甲的甲名一个全甲的甲名

762
00:32:47,000 --> 00:32:48,000
它表示的是同一个东西吗

763
00:32:48,000 --> 00:32:49,000
是同一个东西

764
00:32:49,000 --> 00:32:51,000
所以现在就变成做两套了

765
00:32:53,000 --> 00:32:54,000
为什么要做两套

766
00:32:54,000 --> 00:32:58,000
因为那个半甲甲名显示的时候有一个

767
00:32:58,000 --> 00:33:03,000
就是一开始 G 4 的甲名的片甲名在显示的时候

768
00:33:03,000 --> 00:33:05,000
它的宽度和英文字母是一样的

769
00:33:06,000 --> 00:33:07,000
对

770
00:33:07,000 --> 00:33:12,000
然后为了就是所以后来有了那个全宽度的焊字的时候

771
00:33:12,000 --> 00:33:17,000
你在全宽度的焊字里面加杂着显示半宽度的片甲名就很丑

772
00:33:17,000 --> 00:33:21,000
所以就做一套全宽度的全甲甲名

773
00:33:22,000 --> 00:33:23,000
就是这么来

774
00:33:23,000 --> 00:33:25,000
所以我理解一下就是说

775
00:33:25,000 --> 00:33:27,000
因为是为了对齐的需求

776
00:33:27,000 --> 00:33:30,000
因为那个时候是都是那种就是就是 column display 嘛

777
00:33:30,000 --> 00:33:32,000
就是正列的显示器嘛

778
00:33:33,000 --> 00:33:35,000
就为了满足那个跟英文对齐的需求

779
00:33:35,000 --> 00:33:41,000
所以我们强制就是牺牲了这个美观程度把那个甲名压缩成半宽的

780
00:33:41,000 --> 00:33:42,000
对

781
00:33:42,000 --> 00:33:47,000
然后后来因为有因为因为就变成那种图形 Graphic 就界面的时候

782
00:33:47,000 --> 00:33:51,000
就是为了好看其实它应该是甲名是应该和焊字等宽的嘛

783
00:33:51,000 --> 00:33:56,000
没有到 Graphic 时代就是在那个显示器可以设置为双字结宽的时代就开始了

784
00:33:57,000 --> 00:33:59,000
对就跟焊字一样嘛

785
00:33:59,000 --> 00:34:01,000
这个需求就是因为是为了好看

786
00:34:01,000 --> 00:34:02,000
就是为了好看

787
00:34:02,000 --> 00:34:06,000
你再如果你两个焊字中间加着一个半宽度的甲名就很丑嘛

788
00:34:06,000 --> 00:34:10,000
而且制表啊什么的全都非常难

789
00:34:10,000 --> 00:34:15,000
就还是为了对齐只是说以前是因为了半宽是为了和英文字母对齐

790
00:34:15,000 --> 00:34:17,000
是为了和焊字对齐

791
00:34:18,000 --> 00:34:24,000
但是呢就是比如说在日本的比如说当年就 Imo 的手机时代

792
00:34:24,000 --> 00:34:25,000
日本的手机时代

793
00:34:25,000 --> 00:34:27,000
因为片甲名它是表英文字嘛

794
00:34:27,000 --> 00:34:31,000
所以片甲名的外来语往往都写得很长

795
00:34:31,000 --> 00:34:36,000
所以它故意用半角片甲名是为了省空间

796
00:34:36,000 --> 00:34:39,000
啊 OK 免得出现得与那种情况

797
00:34:39,000 --> 00:34:40,000
有这么做的

798
00:34:40,000 --> 00:34:41,000
为什么要会德语

799
00:34:41,000 --> 00:34:44,000
对德文的单词那么长

800
00:34:44,000 --> 00:34:48,000
德语你那个每个词都不写都那么长又没有空格

801
00:34:48,000 --> 00:34:51,000
需要大量使用减写和缩写

802
00:34:51,000 --> 00:34:54,000
所以在在从字体排印的传统上来讲

803
00:34:54,000 --> 00:34:59,000
德文是大量使用和字 Ligature 和窄体字 Condensed

804
00:34:59,000 --> 00:35:03,000
对是这样尤其在高速公路的牌上

805
00:35:03,000 --> 00:35:05,000
半宽的甲名看起来会不会很别扭

806
00:35:05,000 --> 00:35:06,000
因为那么窄

807
00:35:06,000 --> 00:35:09,000
会有一点了确实会有一点

808
00:35:09,000 --> 00:35:11,000
反正我觉得很丑

809
00:35:11,000 --> 00:35:13,000
对它是一种妥协

810
00:35:15,000 --> 00:35:17,000
OK 那所以于是下一个问题就来了

811
00:35:17,000 --> 00:35:21,000
就是说那半宽的甲名对应的那个那个码点和全宽

812
00:35:21,000 --> 00:35:23,000
就是双字节的对应的码点

813
00:35:23,000 --> 00:35:26,000
它它它有这个就是是一样的吗

814
00:35:28,000 --> 00:35:29,000
或者这么问吧

815
00:35:29,000 --> 00:35:31,000
就说如果现在在现代的这个来处理的话

816
00:35:31,000 --> 00:35:33,000
它是两个字符

817
00:35:33,000 --> 00:35:35,000
是是是是是不一样的

818
00:35:36,000 --> 00:35:37,000
OK

819
00:35:37,000 --> 00:35:40,000
那个在 Unicode 里面的那个 CodePoint 它是一样的吗

820
00:35:40,000 --> 00:35:41,000
好像也不一样吧

821
00:35:41,000 --> 00:35:42,000
不一样

822
00:35:42,000 --> 00:35:44,000
Unicode 它为了向后兼容

823
00:35:44,000 --> 00:35:46,000
所以它也不一样

824
00:35:46,000 --> 00:35:47,000
对

825
00:35:48,000 --> 00:35:50,000
那如果说我们现在重新来设计这么一件事

826
00:35:50,000 --> 00:35:52,000
其实它应该是从同一个 CodePoint

827
00:35:52,000 --> 00:35:55,000
但是在那个就是 Render 渲染的时候

828
00:35:55,000 --> 00:35:58,000
应该选择不同的宽度以适应那个对齐就可以了

829
00:35:58,000 --> 00:36:01,000
对从理想角度的话确实是可以这样子的

830
00:36:01,000 --> 00:36:02,000
是没错

831
00:36:02,000 --> 00:36:03,000
但对

832
00:36:03,000 --> 00:36:05,000
但这是一个向后兼容的

833
00:36:05,000 --> 00:36:07,000
人类史就要重写了

834
00:36:07,000 --> 00:36:08,000
对吧

835
00:36:10,000 --> 00:36:12,000
对这其实是一个无法避免的问题

836
00:36:12,000 --> 00:36:15,000
因为就是这个编码的发展就是向后兼容

837
00:36:15,000 --> 00:36:16,000
有这个需求

838
00:36:16,000 --> 00:36:18,000
所以它一定会保留两套

839
00:36:19,000 --> 00:36:22,000
对以前是做了很多莫名其妙的事情

840
00:36:22,000 --> 00:36:26,000
然后后面来的新方案就不停不停的要为前面的擦屁股

841
00:36:27,000 --> 00:36:28,000
擦屁股

842
00:36:30,000 --> 00:36:31,000
好帅

843
00:36:31,000 --> 00:36:33,000
然后后面我们就终于有了双字节了对吧

844
00:36:34,000 --> 00:36:36,000
有了双字节就有了区位

845
00:36:36,000 --> 00:36:38,000
就所谓的以前的区位码吗

846
00:36:38,000 --> 00:36:40,000
对日本好像叫区点是吧

847
00:36:40,000 --> 00:36:41,000
对日本叫区点

848
00:36:41,000 --> 00:36:44,000
那英文区就是区是 row 嘛

849
00:36:44,000 --> 00:36:45,000
就第几排嘛

850
00:36:45,000 --> 00:36:48,000
row 然后那个点就是刚才说的 sale

851
00:36:50,000 --> 00:36:52,000
就是举这么一行和列吧

852
00:36:53,000 --> 00:36:56,000
所以它是真的是有一个表

853
00:36:56,000 --> 00:37:00,000
然后一行是多几行几列是什么字会有这么一个表出来对吧

854
00:37:02,000 --> 00:37:07,000
然后后来咱们中国的 GP 的设计就是完全沿随

855
00:37:07,000 --> 00:37:09,000
沿随了这个 GIS 的整个设计系统

856
00:37:10,000 --> 00:37:11,000
而且

857
00:37:11,000 --> 00:37:14,000
所以双字节和区位码都是日本人发的

858
00:37:14,000 --> 00:37:15,000
最早是日本的是 GIS

859
00:37:16,000 --> 00:37:19,000
而且咱们就和也是学习日本的

860
00:37:19,000 --> 00:37:23,000
就是把汉字根据使用频率分成了两个等级

861
00:37:23,000 --> 00:37:25,000
就是常用字和自常用字

862
00:37:27,000 --> 00:37:30,000
然后日本他们叫第一水准汉字和第二水准汉字嘛

863
00:37:31,000 --> 00:37:33,000
怎么一种一流和二流的感觉

864
00:37:33,000 --> 00:37:36,000
就是根据那个使用的频率

865
00:37:37,000 --> 00:37:39,000
那咱们的 GP 的 2312 也是嘛

866
00:37:40,000 --> 00:37:44,000
而且咱们就是常用字的话是按照音叙排列的

867
00:37:44,000 --> 00:37:46,000
那自常用字就是按照

868
00:37:46,000 --> 00:37:47,000
笔画

869
00:37:47,000 --> 00:37:48,000
是笔画

870
00:37:48,000 --> 00:37:49,000
不守

871
00:37:49,000 --> 00:37:50,000
按照不守

872
00:37:51,000 --> 00:37:52,000
按不守排列的对

873
00:37:52,000 --> 00:37:58,000
就这个表就是有这个按两个音叙和不守排列的这个表

874
00:37:58,000 --> 00:38:02,000
是后来所有做这个就是的书法

875
00:38:02,000 --> 00:38:04,000
然后转换到汉字那个基础嘛

876
00:38:04,000 --> 00:38:08,000
对啊内核恐慌就是吴涛单独做一期就是做了编码那一期嘛

877
00:38:08,000 --> 00:38:10,000
他开始一开始就说了一个问题

878
00:38:10,000 --> 00:38:11,000
首先是个 encoding

879
00:38:11,000 --> 00:38:13,000
就是编码和解码的过程对吧

880
00:38:13,000 --> 00:38:17,000
所以 GP 比如说 GP 2312 他到底规定了什么东西

881
00:38:17,000 --> 00:38:21,000
他不仅是规定了那个字汇就是我要收这么多汉字

882
00:38:21,000 --> 00:38:25,000
而且呢他还规定了就是要怎么来编这个码

883
00:38:26,000 --> 00:38:31,000
就是说那个这个就是 GP 2312 那个那个书里面应该是有一个很很长的一个列表

884
00:38:31,000 --> 00:38:34,000
把那个区每个区位的那个汉字都写那

885
00:38:35,000 --> 00:38:38,000
然后再规定一个方法去怎么去锁印到那个汉字

886
00:38:38,000 --> 00:38:44,000
因为 GP 2312 他的正式名字叫信息交换用汉字编码字符集

887
00:38:45,000 --> 00:38:47,000
首先他是要信息交换的

888
00:38:47,000 --> 00:38:50,000
然后呢他是给汉字进行编码的

889
00:38:50,000 --> 00:38:55,000
然后呢是一个字符然后有个字符集 character set 这样一个东西

890
00:38:56,000 --> 00:39:01,000
他是 94 个区嘛 94 个区 94 个位嘛

891
00:39:02,000 --> 00:39:09,000
然后就有这么多这个码位然后把 6763 个汉字给放进去

892
00:39:09,000 --> 00:39:13,000
当然除了汉字以外还有那些什么图形符号啊什么的

893
00:39:14,000 --> 00:39:20,000
等一下你说 94 个区 94 个码是说有这个这个举 94 成 94 对 94 成 94

894
00:39:20,000 --> 00:39:21,000
对一个格子对吧

895
00:39:21,000 --> 00:39:24,000
这个跟祭祀是一样的

896
00:39:25,000 --> 00:39:28,000
那你那个刚才说常用和不常用从哪里体现出来呢

897
00:39:29,000 --> 00:39:34,000
常用和不常用是两个集合嘛就是就是就是常用不常用是人为规定的两个集合

898
00:39:34,000 --> 00:39:38,000
然后他们以先后次序就是如果在那个表格里面

899
00:39:38,000 --> 00:39:41,000
他他因为你刚才讲有两种方式来排序嘛

900
00:39:41,000 --> 00:39:43,000
一种是按这个读音排一个是按手排

901
00:39:43,000 --> 00:39:46,000
其实不是这样其实有点混

902
00:39:46,000 --> 00:39:50,000
就是说首先将他们分成了常用和不常用两个区块吧

903
00:39:50,000 --> 00:39:53,000
你可以理解成然后有对两个两类字

904
00:39:53,000 --> 00:39:56,000
两类字你先把那个字对对对

905
00:39:56,000 --> 00:39:59,000
然后把这个字我们一般叫 class 我们一般叫 class

906
00:39:59,000 --> 00:40:03,000
就一个 class 叫常用或者说叫一级汉字

907
00:40:03,000 --> 00:40:05,000
另一个 class 是不常用叫二级汉字

908
00:40:05,000 --> 00:40:09,000
那么在一级汉字这个 class 内部他的排序是按音式的

909
00:40:09,000 --> 00:40:12,000
而在二级汉字内部他的排序是按部首的

910
00:40:13,000 --> 00:40:16,000
那跟这个 94 成 94 这个格子有什么啊

911
00:40:16,000 --> 00:40:21,000
94 成 94 只是他排布这个区位表的一种方式

912
00:40:21,000 --> 00:40:25,000
对号入座就是 94 是座位

913
00:40:25,000 --> 00:40:29,000
而那些那些字呢就是把把他安到这个座位上去

914
00:40:30,000 --> 00:40:32,000
那所以我可以这么理解吗

915
00:40:32,000 --> 00:40:35,000
就是在这个 94 成 94 一个方格子里面

916
00:40:35,000 --> 00:40:39,000
前半部分是常用的汉字然后是按音序排的

917
00:40:39,000 --> 00:40:41,000
后半部分是不常用的汉字

918
00:40:41,000 --> 00:40:45,000
就是什么第 16 到 55 区是一级汉字

919
00:40:45,000 --> 00:40:48,000
然后以所有一级汉字放在这里面

920
00:40:48,000 --> 00:40:50,000
就是从第 16 区到第 55 区

921
00:40:50,000 --> 00:40:54,000
就是相当于一级汉字按拼音次序排列

922
00:40:54,000 --> 00:40:57,000
一共 3755 个

923
00:40:57,000 --> 00:41:01,000
然后从第 56 区开始一直到第 87 区是二级汉字

924
00:41:01,000 --> 00:41:04,000
然后排了 3008 了

925
00:41:04,000 --> 00:41:07,000
然后前面还有什么特殊符号之类的

926
00:41:08,000 --> 00:41:12,000
对那个 R 字嘛就是音序里面第一个字嘛

927
00:41:12,000 --> 00:41:16,000
区位码是 1601 就是他 16 区的第一个

928
00:41:16,000 --> 00:41:19,000
所以大家如果去翻这个 GB 的话

929
00:41:19,000 --> 00:41:23,000
他就每个汉字他只是给每个汉字安排一个座位

930
00:41:25,000 --> 00:41:28,000
所以呢比如说 R 字是 1601 嘛

931
00:41:30,000 --> 00:41:32,000
但问题是后面呢我们就好

932
00:41:32,000 --> 00:41:35,000
我们这个 1601 就怎么编成码

933
00:41:35,000 --> 00:41:37,000
这是编这是另外一个编码的事情

934
00:41:38,000 --> 00:41:41,000
对我们刚刚讲的都是一些字符集的事情

935
00:41:41,000 --> 00:41:45,000
对所以呢不仅是有字然后还要有个编码的过程

936
00:41:45,000 --> 00:41:47,000
我们先有我们先找到那么多字

937
00:41:47,000 --> 00:41:49,000
然后呢再给他安排这么多码位

938
00:41:49,000 --> 00:41:52,000
然后给给给他放上去以后了还要进行编码

939
00:41:54,000 --> 00:41:57,000
等等我打个岔问一个就说你区位码和那个

940
00:41:57,000 --> 00:42:00,000
unico 的那个 code point 是可以对应起来的对吧

941
00:42:00,000 --> 00:42:05,000
可以对应但是呢就是排列方式是完全不一样的

942
00:42:07,000 --> 00:42:10,000
就是说应该说 GB 2312 他这份国家标准

943
00:42:10,000 --> 00:42:12,000
他同时设置两部分

944
00:42:12,000 --> 00:42:15,000
一部分他设计的是一个我们常称叫做

945
00:42:16,000 --> 00:42:19,000
编码字符集的这样一个字符集标准

946
00:42:19,000 --> 00:42:23,000
而另一部分他也同时包含了一套这个编码的

947
00:42:23,000 --> 00:42:25,000
encoding 的一套规则

948
00:42:26,000 --> 00:42:28,000
那我重新描述一下应该是这么说

949
00:42:28,000 --> 00:42:33,000
就是说 GB 2312 这个我们作为编码方式来讲的时候

950
00:42:33,000 --> 00:42:36,000
他是对应的是 UTF 8,UTF 16,UTF 32 这种东西

951
00:42:36,000 --> 00:42:44,000
然后 GB 2312 这个规范里面那个区位和区位码

952
00:42:44,000 --> 00:42:46,000
其实对于 unico 的那个 code point

953
00:42:46,000 --> 00:42:48,000
GB 2312 就相当于一个只有一个编码方案

954
00:42:48,000 --> 00:42:50,000
只有 UTF 16 编码方案的 unico

955
00:42:52,000 --> 00:42:53,000
对没错没错

956
00:42:53,000 --> 00:42:55,000
对 OK

957
00:42:59,000 --> 00:43:02,000
现在讲这个 GB 2312 作为编码方式的时候

958
00:43:02,000 --> 00:43:03,000
他怎么玩的吗

959
00:43:03,000 --> 00:43:05,000
作为编码方式来这么玩

960
00:43:05,000 --> 00:43:09,000
其实跟 UTF 16 一样

961
00:43:09,000 --> 00:43:12,000
每个汉字和符号都需要两个字节

962
00:43:12,000 --> 00:43:14,000
因为一个字节放不下

963
00:43:14,000 --> 00:43:16,000
然后第一个字节叫高位

964
00:43:16,000 --> 00:43:18,000
第二个字节叫低位

965
00:43:18,000 --> 00:43:23,000
然后高位有一个对应的方法

966
00:43:23,000 --> 00:43:28,000
就是把一共用了 87 个区

967
00:43:28,000 --> 00:43:29,000
96 区没有用完

968
00:43:29,000 --> 00:43:32,000
然后从 1 区到 87 区

969
00:43:32,000 --> 00:43:36,000
1 区到 87 区那个 2 级汉字加上特殊符号

970
00:43:36,000 --> 00:43:37,000
就已经排完了

971
00:43:37,000 --> 00:43:43,000
所以他就把那个字节 0 XA 0

972
00:43:43,000 --> 00:43:48,000
就是 16 进制的 A 0 加上 11 到 87

973
00:43:48,000 --> 00:43:53,000
然后低位字节是 1 到 94 加上 0 XA 0

974
00:43:53,000 --> 00:43:55,000
所以如果你有一个

975
00:43:55,000 --> 00:43:57,000
所以 0 XA 0

976
00:43:57,000 --> 00:43:59,000
0 XA 1

977
00:43:59,000 --> 00:44:02,000
0 XA 1 就是相当于第一区的第一位

978
00:44:02,000 --> 00:44:03,000
就这么来

979
00:44:03,000 --> 00:44:09,000
然后高位字节就是相当于 0 XB 0 到 0 XF 7

980
00:44:09,000 --> 00:44:12,000
低位字节是 0 XA 1 到 0 XFE

981
00:44:12,000 --> 00:44:17,000
然后一共有 6768 个码位

982
00:44:17,000 --> 00:44:19,000
然后有一些是空着的

983
00:44:22,000 --> 00:44:24,000
所以他这个高位字节和低位字节

984
00:44:24,000 --> 00:44:27,000
其实并没有和区和位没有什么关系

985
00:44:27,000 --> 00:44:34,000
对高位字和低位字节完全对应于区号加上

986
00:44:36,000 --> 00:44:39,000
相当于 X 和 Y

987
00:44:41,000 --> 00:44:42,000
就说这两个

988
00:44:42,000 --> 00:44:43,000
因为那个表

989
00:44:43,000 --> 00:44:45,000
我们刚才讲的那个区

990
00:44:45,000 --> 00:44:46,000
它是一个方格

991
00:44:46,000 --> 00:44:47,000
就是 94 乘 94

992
00:44:47,000 --> 00:44:50,000
所以如果用两个字节来表示

993
00:44:50,000 --> 00:44:52,000
高位字节对应的是行

994
00:44:52,000 --> 00:44:54,000
然后低位字节对应的是列

995
00:44:54,000 --> 00:44:55,000
是这样

996
00:44:55,000 --> 00:44:56,000
是这个意思对吧

997
00:44:56,000 --> 00:45:00,000
实际上是一个 87 到 94 的长方形区

998
00:45:00,000 --> 00:45:02,000
有几个区是没有用的对吧

999
00:45:02,000 --> 00:45:05,000
对就 87 以后到 94 区就没有用了

1000
00:45:05,000 --> 00:45:07,000
所以其实并不是一个方

1001
00:45:07,000 --> 00:45:08,000
90 乘 94 方的格子

1002
00:45:08,000 --> 00:45:09,000
它没有填满

1003
00:45:09,000 --> 00:45:10,000
有空

1004
00:45:10,000 --> 00:45:11,000
对它没有

1005
00:45:11,000 --> 00:45:12,000
就有座位空着

1006
00:45:12,000 --> 00:45:13,000
但大致上可以认为

1007
00:45:13,000 --> 00:45:14,000
高位字节表示行

1008
00:45:14,000 --> 00:45:15,000
然后低位字节表示行

1009
00:45:15,000 --> 00:45:19,000
然后中间有一些特殊的那个空格的地方

1010
00:45:19,000 --> 00:45:23,000
然后这个每个都要加上这个 16 进制的 A 0

1011
00:45:23,000 --> 00:45:26,000
A 0 就是可以转换为 ASCII 的那个

1012
00:45:26,000 --> 00:45:28,000
就是低位置为 1 的时候

1013
00:45:28,000 --> 00:45:30,000
就 128 起

1014
00:45:30,000 --> 00:45:32,000
OK makes sense

1015
00:45:32,000 --> 00:45:34,000
刚才说了 2312

1016
00:45:34,000 --> 00:45:37,000
它只有 6000 多个汉字不够用

1017
00:45:37,000 --> 00:45:39,000
所以后来就又进行了扩展

1018
00:45:39,000 --> 00:45:41,000
后面就有什么 GBK

1019
00:45:41,000 --> 00:45:44,000
然后后面还有 GB 18030

1020
00:45:44,000 --> 00:45:47,000
对我们小时候有很多同学的那个名字

1021
00:45:47,000 --> 00:45:48,000
就是起一个冷屁的名字

1022
00:45:48,000 --> 00:45:50,000
然后到时候去录什么准考证

1023
00:45:50,000 --> 00:45:52,000
就录不出来

1024
00:45:52,000 --> 00:45:54,000
就是因为这个派

1025
00:45:54,000 --> 00:45:57,000
比如说两个吉祥的吉念哲

1026
00:45:59,000 --> 00:46:00,000
陶哲

1027
00:46:00,000 --> 00:46:06,000
对这个字原来是作为哲学的哲的一体字废弃不用的

1028
00:46:06,000 --> 00:46:10,000
所以在当时的那个 GB 2312 里面是没有这个字的

1029
00:46:11,000 --> 00:46:14,000
OK 我当时有个同学叫什么

1030
00:46:14,000 --> 00:46:18,000
叫什么立威

1031
00:46:18,000 --> 00:46:21,000
对它中间有一个那个立字好像是

1032
00:46:21,000 --> 00:46:24,000
木字旁右边有一个

1033
00:46:24,000 --> 00:46:26,000
看起来像威海的威

1034
00:46:26,000 --> 00:46:28,000
但是下面是个乐

1035
00:46:28,000 --> 00:46:30,000
就很冷屁的一个字

1036
00:46:30,000 --> 00:46:34,000
每次录真考证它就叫断空格威

1037
00:46:34,000 --> 00:46:36,000
好可怜

1038
00:46:36,000 --> 00:46:39,000
当时我记得就是为了解决这个

1039
00:46:39,000 --> 00:46:42,000
用 GB 2312 这个字符机不够用这种生屁字

1040
00:46:42,000 --> 00:46:47,000
很多人是用那个未图的方式是表示那些生屁字的

1041
00:46:47,000 --> 00:46:48,000
就直接画个图写

1042
00:46:48,000 --> 00:46:50,000
还有人手写不是就是机器打不出来

1043
00:46:50,000 --> 00:46:53,000
就直接后面手写不再补一个是吧

1044
00:46:54,000 --> 00:46:58,000
对这也是个解方和那个用未图的方式差不多

1045
00:46:59,000 --> 00:47:04,000
有一个问题就是 GBK 和 GB 18030 也是用两个未的吗

1046
00:47:04,000 --> 00:47:06,000
就是双字节

1047
00:47:06,000 --> 00:47:09,000
GB 18030 本身两个字节够吗

1048
00:47:09,000 --> 00:47:11,000
应该要用四字节

1049
00:47:11,000 --> 00:47:14,000
它是变成了对 GB 18030 它是四字节的

1050
00:47:14,000 --> 00:47:15,000
那 GBK 呢

1051
00:47:15,000 --> 00:47:18,000
如果按照刚才那个 GB 2312 的编码方式

1052
00:47:18,000 --> 00:47:20,000
我们高位都不用都留出来

1053
00:47:20,000 --> 00:47:24,000
就是就每你两个字节其实只有一共 14 个位可以用

1054
00:47:24,000 --> 00:47:29,000
14 个位 2 的 14 次方应该是 16384 个字

1055
00:47:29,000 --> 00:47:34,000
然后 GBK 其实收入了 21886 个其实肯定是不够用的

1056
00:47:34,000 --> 00:47:37,000
所以怎么解决这个问题的

1057
00:47:37,000 --> 00:47:39,000
所以刚才我那个算法不对

1058
00:47:39,000 --> 00:47:44,000
它那个双字节它只算第一个字节的那个第一位是不能用的

1059
00:47:44,000 --> 00:47:48,000
其实是应该有 15 个位可以用

1060
00:47:48,000 --> 00:47:53,000
15 个位的话其实可以用到 32000 多个那个那个叫什么

1061
00:47:53,000 --> 00:47:55,000
所以 GPK 是双字节的

1062
00:47:55,000 --> 00:47:59,000
然后 GB 18030 的话是双字节四字节混用的

1063
00:47:59,000 --> 00:48:00,000
对

1064
00:48:00,000 --> 00:48:03,000
GPK 本身它不是一个正式的 GB

1065
00:48:03,000 --> 00:48:06,000
GPK 是微软搞的是不是

1066
00:48:06,000 --> 00:48:10,000
对它就是内码是扩的 K 是扩展的扩嘛

1067
00:48:10,000 --> 00:48:15,000
但是它本身扩展的扩就是汉字内码扩展规范嘛

1068
00:48:15,000 --> 00:48:17,000
但是它本身它没有号

1069
00:48:17,000 --> 00:48:19,000
其实因为它不是一个正式的 GB

1070
00:48:19,000 --> 00:48:21,000
对 GB 是国标的意思吗

1071
00:48:21,000 --> 00:48:23,000
它不是一个正式的国标文件

1072
00:48:23,000 --> 00:48:28,000
对其实我们说 GBK 的时候大多数指的是它的那个字符级标准

1073
00:48:28,000 --> 00:48:30,000
而不是指它的编码方式

1074
00:48:30,000 --> 00:48:35,000
那么 GBK 这个字符级你完全可以用 unicode 来给它编码

1075
00:48:35,000 --> 00:48:38,000
那那那那那 GBK 和 GB 2312 是什么关系

1076
00:48:39,000 --> 00:48:42,000
GB 2312 它首先定义了一个字符级

1077
00:48:42,000 --> 00:48:44,000
就定义了一个字符级的标准

1078
00:48:44,000 --> 00:48:47,000
同时它还给了一套编码方案

1079
00:48:47,000 --> 00:48:50,000
但是同时 GB 2312 的那个字符级

1080
00:48:50,000 --> 00:48:52,000
我们也可以用 unicode 来给它编码

1081
00:48:52,000 --> 00:48:58,000
也就是说一个字符级它可是可以用很多种编码方式来实现它的

1082
00:48:58,000 --> 00:49:02,000
同时一种编码方式它也是可以去编很多个不同的字符级的

1083
00:49:02,000 --> 00:49:05,000
就是它们并不是一个完全一对应的关系

1084
00:49:06,000 --> 00:49:09,000
所以其实我们在讨论这些的时候

1085
00:49:09,000 --> 00:49:11,000
只要时刻的区分清楚

1086
00:49:11,000 --> 00:49:15,000
我们是在说一个字符级还是在说一个编码方式的话

1087
00:49:15,000 --> 00:49:16,000
就不太会混淆

1088
00:49:18,000 --> 00:49:19,000
单从字符级的来讲的话

1089
00:49:19,000 --> 00:49:22,000
所以现在就是大家在买字体的时候

1090
00:49:22,000 --> 00:49:25,000
就经常会说这个字体显示不出来嘛

1091
00:49:25,000 --> 00:49:29,000
那在做在中国的字体厂商的话

1092
00:49:29,000 --> 00:49:33,000
肯定它说首先是要做 GB 2312 里面的

1093
00:49:33,000 --> 00:49:35,000
它那个字一共是六千多个字嘛

1094
00:49:35,000 --> 00:49:36,000
它是先做这个

1095
00:49:36,000 --> 00:49:37,000
然后

1096
00:49:38,000 --> 00:49:39,000
就那些是必须的

1097
00:49:39,000 --> 00:49:41,000
一般来讲就是这是最低的门槛

1098
00:49:42,000 --> 00:49:46,000
然后后面有支持 GBK 的字库

1099
00:49:46,000 --> 00:49:49,000
然后有支持 GB 1803 英的字库

1100
00:49:49,000 --> 00:49:53,000
说实话 GB 1803 英的字库还非常少

1101
00:49:53,000 --> 00:49:55,000
字实在是太多了

1102
00:49:55,000 --> 00:49:57,000
对 完整支持的非常少

1103
00:49:57,000 --> 00:49:59,000
反而是六万多了

1104
00:49:59,000 --> 00:50:01,000
因为那时候浩泽在做的时候

1105
00:50:01,000 --> 00:50:05,000
把那个什么少数民族兄弟民族的一些文字

1106
00:50:05,000 --> 00:50:06,000
也一起做进去了嘛

1107
00:50:08,000 --> 00:50:10,000
一个不小心可能就超过了

1108
00:50:10,000 --> 00:50:13,000
OpenType 单个文件的 Glyph 的限制

1109
00:50:14,000 --> 00:50:18,000
因为一个 OpenType 它是用一个 unsigned short

1110
00:50:18,000 --> 00:50:21,000
所以也只有六万多个吧

1111
00:50:21,000 --> 00:50:23,000
就应该是 653 多个吧

1112
00:50:23,000 --> 00:50:25,000
6535

1113
00:50:25,000 --> 00:50:26,000
对对对

1114
00:50:26,000 --> 00:50:27,000
6536

1115
00:50:27,000 --> 00:50:28,000
很有可能就放不下

1116
00:50:28,000 --> 00:50:30,000
然后再从编码方式的说

1117
00:50:30,000 --> 00:50:31,000
刚才我们也讨论了

1118
00:50:31,000 --> 00:50:35,000
那 GB 2312 和 GBK 都是双字节的字库籍的

1119
00:50:35,000 --> 00:50:40,000
那 GB 1803 是单字节 双字节 四字节

1120
00:50:40,000 --> 00:50:42,000
就是它是变长的

1121
00:50:43,000 --> 00:50:45,000
这个思想的话跟 unicode 就是一样的

1122
00:50:47,000 --> 00:50:48,000
我问一个问题

1123
00:50:48,000 --> 00:50:52,000
就是 GB 1803 那个码点和 unicode 的码点是重合的吗

1124
00:50:52,000 --> 00:50:53,000
不一样

1125
00:50:53,000 --> 00:50:54,000
也不一样

1126
00:50:54,000 --> 00:50:58,000
后面要讲 CGK Unification 的关系

1127
00:50:58,000 --> 00:51:00,000
所以就是同样一个字的话

1128
00:51:00,000 --> 00:51:03,000
在 GB 里面它是这个座位要用这个编码

1129
00:51:03,000 --> 00:51:05,000
但是在 unicode 的话

1130
00:51:05,000 --> 00:51:07,000
它是另外一个座位要另外一个编码

1131
00:51:07,000 --> 00:51:12,000
那 GB 2312 GBK 和 GB 1803 是一个超级的关系吗

1132
00:51:12,000 --> 00:51:13,000
还是也不一样

1133
00:51:13,000 --> 00:51:15,000
基本上是互相兼容的

1134
00:51:15,000 --> 00:51:16,000
就是向后兼容

1135
00:51:17,000 --> 00:51:22,000
就是 GBK 里面包含 GB 2312 那些字

1136
00:51:22,000 --> 00:51:23,000
全部的字

1137
00:51:23,000 --> 00:51:25,000
在那个对应的位置上

1138
00:51:25,000 --> 00:51:28,000
然后 GB 1803 是包含 GBK 全部的字

1139
00:51:28,000 --> 00:51:30,000
并且也是在那个位置上

1140
00:51:30,000 --> 00:51:31,000
对

1141
00:51:31,000 --> 00:51:32,000
对

1142
00:51:32,000 --> 00:51:34,000
就是一个超级一个比一个大的概念

1143
00:51:34,000 --> 00:51:35,000
对

1144
00:51:36,000 --> 00:51:37,000
对

1145
00:51:37,000 --> 00:51:40,000
在这个 GB 的这一系列字符集里面

1146
00:51:40,000 --> 00:51:43,000
最坑的只有 GB 2345 这个标准

1147
00:51:43,000 --> 00:51:47,000
那么其他的都是一个就是越向后越往前兼容

1148
00:51:47,000 --> 00:51:50,000
就是说后来的肯定是兼容前来的这样

1149
00:51:50,000 --> 00:51:54,000
所以我们在这里有机会一定要说一下 GB 12345

1150
00:51:55,000 --> 00:51:56,000
这是什么

1151
00:51:56,000 --> 00:51:58,000
一个特别坑

1152
00:51:58,000 --> 00:52:00,000
GB 12345 我从来没有听过这个东西

1153
00:52:00,000 --> 00:52:01,000
对

1154
00:52:02,000 --> 00:52:06,000
GB 2345 是那个字体圈的一个噩梦

1155
00:52:07,000 --> 00:52:08,000
都说不到这个东西

1156
00:52:08,000 --> 00:52:12,000
经常说的就是那个什么反体字符集

1157
00:52:12,000 --> 00:52:16,000
它其实编码就是跟那个 2312 是一样的

1158
00:52:17,000 --> 00:52:20,000
可以看成 GB 2312 的反体版本

1159
00:52:20,000 --> 00:52:23,000
共收录有 6866 个汉字

1160
00:52:23,000 --> 00:52:25,000
对 但多了几个

1161
00:52:25,000 --> 00:52:29,000
因为大家知道就是反减不是一一对应的

1162
00:52:29,000 --> 00:52:30,000
没错

1163
00:52:30,000 --> 00:52:31,000
在汉字在简化的时候

1164
00:52:31,000 --> 00:52:34,000
一般是多反对

1165
00:52:34,000 --> 00:52:38,000
把好多个反体字同时简化成一个简体字

1166
00:52:38,000 --> 00:52:43,000
所以原来它就是在 GB 2312 是定的是简体字

1167
00:52:43,000 --> 00:52:45,000
那它改成 12345 的时候

1168
00:52:45,000 --> 00:52:48,000
它要写反体字它就要变多

1169
00:52:48,000 --> 00:52:52,000
但是这个多反对一减的时候怎么办呢

1170
00:52:52,000 --> 00:52:57,000
它就会挑选一个就是简体字对应的反体字先安上去

1171
00:52:57,000 --> 00:53:02,000
然后剩下的那些剩下来的反体字它统一放到最后

1172
00:53:02,000 --> 00:53:04,000
马威上的统一放到最后

1173
00:53:04,000 --> 00:53:07,000
就是之前那个说的那些空位的那些地方

1174
00:53:07,000 --> 00:53:08,000
对

1175
00:53:08,000 --> 00:53:10,000
简反转化这里可能要提一下

1176
00:53:10,000 --> 00:53:12,000
刚才说多反对一减其实也有一减对多反

1177
00:53:12,000 --> 00:53:17,000
一减对多反就是多错错就是一凡对多减

1178
00:53:17,000 --> 00:53:20,000
一减对多反是非常常见的

1179
00:53:20,000 --> 00:53:24,000
但是一凡对多减的话

1180
00:53:24,000 --> 00:53:28,000
它其实往往是一个一体字之间的相互的关系

1181
00:53:28,000 --> 00:53:33,000
它不是一个数学上怎么描述这种函数的概念来的

1182
00:53:33,000 --> 00:53:34,000
这不是函数

1183
00:53:34,000 --> 00:53:35,000
单设

1184
00:53:35,000 --> 00:53:37,000
不是一个单设

1185
00:53:37,000 --> 00:53:39,000
不是单设的一个概念

1186
00:53:39,000 --> 00:53:43,000
一凡对多减比如说乾坤的钱

1187
00:53:43,000 --> 00:53:44,000
对

1188
00:53:44,000 --> 00:53:47,000
对在反体字里的话它可能是干也可能是钱

1189
00:53:47,000 --> 00:53:49,000
它是一个多音字

1190
00:53:49,000 --> 00:53:52,000
但是对到简体的就是因为它用途不同

1191
00:53:52,000 --> 00:53:54,000
就把它分化成了不同的写法了

1192
00:53:54,000 --> 00:53:55,000
对

1193
00:53:55,000 --> 00:53:58,000
它把干的这个时候对应到另外一个字上去了

1194
00:53:58,000 --> 00:54:01,000
所以这个多音字就变成了一个单音字

1195
00:54:01,000 --> 00:54:03,000
专指乾坤的钱

1196
00:54:03,000 --> 00:54:06,000
所以其实很多那个朋友写的那种

1197
00:54:06,000 --> 00:54:10,000
就是网页再现了什么减繁转化工具都是不合格的

1198
00:54:10,000 --> 00:54:14,000
对如果你的算法很简单的话确实会输错

1199
00:54:14,000 --> 00:54:17,000
很多人都是直接拿一个那个就是那个

1200
00:54:17,000 --> 00:54:18,000
那个 Dictionary 的表

1201
00:54:18,000 --> 00:54:20,000
就是这个换成那个就完了

1202
00:54:20,000 --> 00:54:25,000
但其实是要根据语境和那个前后文来决定的

1203
00:54:25,000 --> 00:54:26,000
对吧

1204
00:54:26,000 --> 00:54:29,000
钱坤换成干坤还蛮多的

1205
00:54:29,000 --> 00:54:33,000
然后说到这个 GB 12345 的字体产品的话

1206
00:54:33,000 --> 00:54:35,000
我们也必须要说一下对吧

1207
00:54:35,000 --> 00:54:37,000
因为内码是一样的嘛

1208
00:54:37,000 --> 00:54:41,000
所以在国内一些大的字体产商他们曾经就是有

1209
00:54:41,000 --> 00:54:45,000
到现在也有他们所谓的繁体汉字的字库

1210
00:54:45,000 --> 00:54:49,000
就以换字库的形式来实现繁体

1211
00:54:49,000 --> 00:54:51,000
而不是没有换内码

1212
00:54:51,000 --> 00:54:53,000
就是因为那个 GB 2345 的问题吗

1213
00:54:53,000 --> 00:54:57,000
对所以就是因为他们用 12345 来做编码嘛

1214
00:54:57,000 --> 00:54:58,000
对对对

1215
00:54:58,000 --> 00:55:00,000
它只是在表面

1216
00:55:00,000 --> 00:55:02,000
因为到了用字库显示

1217
00:55:02,000 --> 00:55:05,000
它其实就是最后显示的层级了嘛

1218
00:55:05,000 --> 00:55:07,000
它码其实没变嘛

1219
00:55:07,000 --> 00:55:08,000
对

1220
00:55:08,000 --> 00:55:14,000
这样的话这样做出来的 GB 12345 的繁体字库就不能解决

1221
00:55:14,000 --> 00:55:15,000
一减对多繁的问题

1222
00:55:15,000 --> 00:55:18,000
然后就经常出错字

1223
00:55:18,000 --> 00:55:23,000
比如说永和九年睡在魁丑嘛

1224
00:55:23,000 --> 00:55:25,000
那个丑字就变成了没丑的丑了

1225
00:55:25,000 --> 00:55:28,000
所以呢我曾经在我的微博上讲

1226
00:55:28,000 --> 00:55:30,000
如果一个产品

1227
00:55:30,000 --> 00:55:34,000
一个字库产品如果会导致错字的话

1228
00:55:34,000 --> 00:55:37,000
我觉得这应该讲是一个不及格的产品

1229
00:55:37,000 --> 00:55:39,000
但是它的自我设计方式下

1230
00:55:39,000 --> 00:55:40,000
它没有别的解决方案了呀

1231
00:55:40,000 --> 00:55:46,000
对所以就是说应该废除用 GB 12345 来分装字库

1232
00:55:46,000 --> 00:55:48,000
就那个本来就是一个 hack

1233
00:55:48,000 --> 00:55:52,000
对那是一个固定时期的产物

1234
00:55:52,000 --> 00:55:54,000
而且是一个不成熟的产物

1235
00:55:54,000 --> 00:55:55,000
过渡方案呗

1236
00:55:55,000 --> 00:55:57,000
现在其实都就刚我们说嘛

1237
00:55:57,000 --> 00:55:59,000
这样我们都没有听过 GB 12345 这个规范

1238
00:55:59,000 --> 00:56:01,000
其实应该用的也不多了吧

1239
00:56:01,000 --> 00:56:04,000
对就因为国内有几个大厂

1240
00:56:04,000 --> 00:56:08,000
就是大家现在去买繁体字库的话

1241
00:56:08,000 --> 00:56:09,000
有很多就这样的

1242
00:56:09,000 --> 00:56:11,000
所以呢又另外一个问题

1243
00:56:11,000 --> 00:56:13,000
就是说繁减转换应该怎么转换

1244
00:56:13,000 --> 00:56:17,000
就不能单纯的就是像用这个 GB 12345 的字库

1245
00:56:17,000 --> 00:56:21,000
到最后只转字库而没有转码

1246
00:56:21,000 --> 00:56:24,000
我们应该彻头彻尾的把码换掉

1247
00:56:25,000 --> 00:56:28,000
就不能用那种 dirty 的 hack

1248
00:56:28,000 --> 00:56:35,000
可是就是因为有大厂中国的很多大厂的话都做了 GB 12345 的字库

1249
00:56:35,000 --> 00:56:37,000
所以导致现在街头巷尾很多错字都是这样

1250
00:56:37,000 --> 00:56:39,000
头出去砍了

1251
00:56:39,000 --> 00:56:43,000
这是名副其实的文字语啊

1252
00:56:47,000 --> 00:56:50,000
好吧那我们终于可以说 unicode 的问题了

1253
00:56:51,000 --> 00:56:53,000
Windows 的那个要不要先讲一下

1254
00:56:53,000 --> 00:56:56,000
就为什么世界上会先有 GBK

1255
00:56:56,000 --> 00:57:02,000
就是因为操作系统的发展已经远远超过了国家制定标准的发展

1256
00:57:02,000 --> 00:57:08,000
然后操作系统厂商微软不得不先解决了一个人们必须要解决的痛点

1257
00:57:08,000 --> 00:57:12,000
然后国家才跟上的推出了 GBK

1258
00:57:14,000 --> 00:57:17,000
那个什么 18130 来取代 GBK

1259
00:57:17,000 --> 00:57:26,000
我觉得从这个策划其实反映出了现在我们已经处在一个接近于那种跨国的

1260
00:57:26,000 --> 00:57:28,000
或者怎么说呢

1261
00:57:28,000 --> 00:57:35,000
从这件事上开始跨国的公司取代政府来解决你的一些民生问题的一个时代

1262
00:57:35,000 --> 00:57:38,000
其实就是从这种事情开始

1263
00:57:38,000 --> 00:57:43,000
如果你要说的话肯定就是政治可能是落后的

1264
00:57:43,000 --> 00:57:45,000
永远都是经济先行的嘛

1265
00:57:45,000 --> 00:57:47,000
所以我们现在是

1266
00:57:47,000 --> 00:57:53,000
我的意思是在信息时代之前很少会有一个公司会

1267
00:57:53,000 --> 00:58:03,000
在这种跨国的超越政府界限的程度上来改变我们的生活

1268
00:58:03,000 --> 00:58:06,000
大国吧小国其实这种事情经常发生

1269
00:58:06,000 --> 00:58:07,000
以前可能是有

1270
00:58:07,000 --> 00:58:12,000
但以前你们 IBM 之类的他们做的事情可能更多的就是制定一个国内标准

1271
00:58:12,000 --> 00:58:14,000
国内工业界的标准

1272
00:58:14,000 --> 00:58:20,000
但是在微软这件事情上你由一个外国厂商来搞一个你国文字

1273
00:58:20,000 --> 00:58:24,000
这好像还是前所未有的事情

1274
00:58:24,000 --> 00:58:27,000
我觉得对于小国来说这种事情应该经常发生

1275
00:58:27,000 --> 00:58:33,000
比如说周边那些可能人口也很少占地面积很小的国家

1276
00:58:33,000 --> 00:58:35,000
他真的什么技术都是要由别人提供给他的

1277
00:58:35,000 --> 00:58:40,000
别人先用了他才说我们可以就这样支持他了

1278
00:58:41,000 --> 00:58:47,000
其实类似的例子在这个 CJK 领域并不罕见

1279
00:58:47,000 --> 00:58:51,000
比如说那个自服机标准像香港的那个自服机标准

1280
00:58:51,000 --> 00:58:56,000
其实主要就是由华康和萌娜两家自体公司来推动的

1281
00:58:56,000 --> 00:59:02,000
那么香港显然就是属于一个政府在这方面管制力不强的这样一个地区

1282
00:59:02,000 --> 00:59:04,000
就曾经了

1283
00:59:04,000 --> 00:59:12,000
对,包括像新加坡也是新加坡早期是直接照搬了 GB 2312 来作为他们这个文字标准

1284
00:59:12,000 --> 00:59:20,000
那么后期 UNICode 出来之后他们又收录了一部分这个号称来源是新加坡的一部分汉字

1285
00:59:20,000 --> 00:59:22,000
但是实际上

1286
00:59:22,000 --> 00:59:24,000
这就是为什么维基百科里面有马心简历

1287
00:59:24,000 --> 00:59:32,000
对,但实际上呢那个至今好像没有明确的来源说这个新加坡来源的汉字是他们政府官方给的

1288
00:59:33,000 --> 00:59:35,000
对,的确是有的,的确是有的

1289
00:59:35,000 --> 00:59:38,000
就是在新加坡当时他有新加坡的一些简化字

1290
00:59:38,000 --> 00:59:40,000
就和大陆简体不一样的

1291
00:59:40,000 --> 00:59:42,000
有几十个字,数量不多

1292
00:59:43,000 --> 00:59:45,000
OK,这里肯定要插一下历史啊

1293
00:59:45,000 --> 00:59:48,000
就中国大陆搞简化字的时候新加坡也跟着搞了是吧

1294
00:59:48,000 --> 00:59:52,000
当时他们做这个简化的背景和目的是什么

1295
00:59:52,000 --> 00:59:55,000
应该还是为了提高十字律吧

1296
00:59:55,000 --> 00:59:57,000
这个出发点都是类似

1297
00:59:58,000 --> 01:00:05,000
我倒觉得是为了贴合当时华人中有一个怎么说呢

1298
01:00:05,000 --> 01:00:07,000
站起来的国家嘛

1299
01:00:08,000 --> 01:00:09,000
不是吗

1300
01:00:09,000 --> 01:00:11,000
新加坡也搞了一个

1301
01:00:12,000 --> 01:00:13,000
不是民族认同感

1302
01:00:13,000 --> 01:00:16,000
而是因为新加坡本来就是一个华人建立的国家

1303
01:00:16,000 --> 01:00:20,000
然后他们看到母国非常强盛

1304
01:00:20,000 --> 01:00:21,000
就新向往之嘛

1305
01:00:21,000 --> 01:00:25,000
或者说是出于一种就是现在也有这种强势文化出现了

1306
01:00:25,000 --> 01:00:30,000
不是强势文化,而是一个就是有一个独立自主的国家出现了

1307
01:00:30,000 --> 01:00:32,000
就采用了这样一种

1308
01:00:32,000 --> 01:00:36,000
我觉得是出于一种民族认同感来做的

1309
01:00:37,000 --> 01:00:40,000
不像那个,因为现在大家都很讨厌中国

1310
01:00:40,000 --> 01:00:44,000
那个时候中国刚出现的时候还是比较让全中国华人为之一振的嘛

1311
01:00:44,000 --> 01:00:46,000
对,有可能有一部分这个因素

1312
01:00:46,000 --> 01:00:49,000
但是我的观点是认为

1313
01:00:49,000 --> 01:00:51,000
还是因为新加坡其实在那个时期

1314
01:00:51,000 --> 01:00:57,000
因为新加坡其实在那个时期并没有这方面的专家来具体的制定一个新的标准的能力

1315
01:00:57,000 --> 01:01:05,000
所以他们情愿去搬一个在文化上面和在这个身份认同上都跟他们接近的国家的一个成熟标志

1316
01:01:05,000 --> 01:01:10,000
不,问题是你这个回避了一点就是他们还有一个选择就是什么也不做啊

1317
01:01:10,000 --> 01:01:11,000
继续用繁体啊

1318
01:01:11,000 --> 01:01:12,000
为什么一定要

1319
01:01:12,000 --> 01:01:14,000
你是说为什么要做简化是吗

1320
01:01:15,000 --> 01:01:16,000
对啊

1321
01:01:17,000 --> 01:01:19,000
是这样子,新加坡使用的汉字

1322
01:01:19,000 --> 01:01:24,000
他们在 1969 年他们颁布了新加坡的简体字表

1323
01:01:24,000 --> 01:01:27,000
然后这个简体字表有 502 个字

1324
01:01:27,000 --> 01:01:29,000
所以他们一般把这个称为 502 简体字表

1325
01:01:29,000 --> 01:01:35,000
然后这个简体字表和中华人民共和国的汉字简化方案是不一样的

1326
01:01:35,000 --> 01:01:40,000
然后里面有 67 个字是不一样的

1327
01:01:41,000 --> 01:01:43,000
那怎么处理

1328
01:01:43,000 --> 01:01:46,000
然后 1976 年的时候呢

1329
01:01:46,000 --> 01:01:51,000
新加坡又说他们倒过来完全采用中华人民共和国的简体字

1330
01:01:51,000 --> 01:01:53,000
就把那 67 个也干掉了

1331
01:01:53,000 --> 01:02:00,000
对,所以呢这 67 个字呢就是曾经出现过但是呢现在已经不用的字

1332
01:02:01,000 --> 01:02:04,000
但是 unicode 这种垃圾堆应该也装进去了

1333
01:02:04,000 --> 01:02:06,000
对,所以要装进去

1334
01:02:06,000 --> 01:02:09,000
有一些是装进去了,对,全部装进去了

1335
01:02:09,000 --> 01:02:12,000
刚才 Ryo 问说那个时候怎么处理

1336
01:02:12,000 --> 01:02:16,000
因为 1969 年的时候那个时候你出一不一样的签字就可以了

1337
01:02:16,000 --> 01:02:18,000
那个时候没有电话的问题

1338
01:02:18,000 --> 01:02:20,000
对啊,这个意思

1339
01:02:20,000 --> 01:02:22,000
不存在码点这个问题吗

1340
01:02:22,000 --> 01:02:23,000
对啊

1341
01:02:23,000 --> 01:02:28,000
对,所以我觉得他们用回 GB 2312 也是因为他们处理不了新的问题

1342
01:02:28,000 --> 01:02:32,000
就是他们没这个能力来做这方面新的技术规格

1343
01:02:32,000 --> 01:02:33,000
这不划算吗

1344
01:02:33,000 --> 01:02:38,000
你本来人口少的国家你要做这种吃力不讨好的事情何必呢

1345
01:02:38,000 --> 01:02:43,000
就像直接那个小城门啊我们现在话好话说这样直接来 for can reuse

1346
01:02:45,000 --> 01:02:48,000
对,这个历史包括在这个 big 5

1347
01:02:48,000 --> 01:02:52,000
big 5 也是开始照搬了这次的规范

1348
01:02:52,000 --> 01:02:54,000
然后自己做了一些扩展

1349
01:02:55,000 --> 01:02:56,000
OK

1350
01:02:57,000 --> 01:02:59,000
所以所以现在有个历史遗留问题啊

1351
01:02:59,000 --> 01:03:02,000
就是说当比如说当时说微软搞了那个 GBK

1352
01:03:02,000 --> 01:03:06,000
然后后来国家补了一个这个 GB 18030

1353
01:03:06,000 --> 01:03:09,000
那么实际上在这个微软的操作系统里面

1354
01:03:09,000 --> 01:03:13,000
到底是用编码的时候是用 GBK 还是 GB 18030

1355
01:03:15,000 --> 01:03:18,000
Windows 的内核应该是用 unicode 对吧

1356
01:03:18,000 --> 01:03:20,000
对对,那个都一样嘛

1357
01:03:20,000 --> 01:03:23,000
就是它内核表述它支持多国语言肯定是要用统一的标志

1358
01:03:23,000 --> 01:03:24,000
但是在默认

1359
01:03:24,000 --> 01:03:26,000
比如说你有中文版的这个 Windows

1360
01:03:26,000 --> 01:03:28,000
你用这个记事本默认保存的时候

1361
01:03:28,000 --> 01:03:30,000
它选择的编码方式是什么

1362
01:03:30,000 --> 01:03:31,000
我是这么理解的

1363
01:03:31,000 --> 01:03:34,000
Windows 里面有一个默认的那个码本

1364
01:03:34,000 --> 01:03:37,000
就是有一个 code page 你得去选

1365
01:03:37,000 --> 01:03:40,000
然后你选什么它默认的储存就是什么

1366
01:03:40,000 --> 01:03:42,000
如果你是中文版的 Windows 的话

1367
01:03:42,000 --> 01:03:46,000
默认就是 GB 18030

1368
01:03:46,000 --> 01:03:48,000
对对对,我就这个意思

1369
01:03:48,000 --> 01:03:51,000
就是它等于是给这个某一个区域版本的 Windows

1370
01:03:51,000 --> 01:03:55,000
选择了一个默认的保存的这个编码方式嘛

1371
01:03:55,000 --> 01:03:56,000
和打开对

1372
01:03:56,000 --> 01:03:58,000
对,打开和那个 decode

1373
01:03:58,000 --> 01:04:01,000
就好像有些人玩日文游戏一定要先把那个 code page 改成日文的

1374
01:04:01,000 --> 01:04:04,000
然后在玩的时候日文的游戏才不会显示落马

1375
01:04:04,000 --> 01:04:06,000
但是其他系统所有部分都是落马

1376
01:04:06,000 --> 01:04:09,000
所以那个现在就 Windows 用的那个 code page

1377
01:04:09,000 --> 01:04:12,000
到底默认是 GBK 还是 GB 18030 的

1378
01:04:12,000 --> 01:04:13,000
我记得是 18030

1379
01:04:13,000 --> 01:04:15,000
我上一次改的时候应该还是 18030

1380
01:04:15,000 --> 01:04:17,000
现在已经变得 18030 了

1381
01:04:17,000 --> 01:04:18,000
现在已经改了

1382
01:04:18,000 --> 01:04:21,000
因为那个时候没有 GBK 的时候你自然就是

1383
01:04:21,000 --> 01:04:24,000
没有 18030 的时候自然就是 GBK

1384
01:04:24,000 --> 01:04:25,000
但是现在有标准了

1385
01:04:25,000 --> 01:04:27,000
那所以就会牵涉到 Windows 不同版本

1386
01:04:27,000 --> 01:04:29,000
它有不同行为的这个结果了吧

1387
01:04:29,000 --> 01:04:30,000
是没错

1388
01:04:30,000 --> 01:04:35,000
然后因为刚才我们讲的那个 GB 2312

1389
01:04:35,000 --> 01:04:37,000
GBK 和 GB 18030

1390
01:04:37,000 --> 01:04:40,000
它是一个逐渐超级的一个关系

1391
01:04:40,000 --> 01:04:42,000
所以新版本的 Windows

1392
01:04:42,000 --> 01:04:45,000
它总是能兼容旧版本的那个文件的嘛

1393
01:04:47,000 --> 01:04:48,000
理论上是这样

1394
01:04:48,000 --> 01:04:51,000
这个其实是要找一个 Windows

1395
01:04:51,000 --> 01:04:53,000
编程比较熟悉的人来解释

1396
01:04:53,000 --> 01:04:55,000
他们的编码方式是向后兼容的

1397
01:04:56,000 --> 01:04:57,000
OK

1398
01:04:57,000 --> 01:05:00,000
所以就不存在说 Windows

1399
01:05:00,000 --> 01:05:01,000
比如说 Windows 10

1400
01:05:01,000 --> 01:05:03,000
默认是 GB 18030 中文版

1401
01:05:03,000 --> 01:05:05,000
不对它应该用 Unicode 吧

1402
01:05:05,000 --> 01:05:06,000
Anyway

1403
01:05:06,000 --> 01:05:08,000
假设它是用 GB 18030 存回去

1404
01:05:08,000 --> 01:05:09,000
就还可以

1405
01:05:09,000 --> 01:05:11,000
也可以打开之前 Windows

1406
01:05:11,000 --> 01:05:13,000
比如说 XP 用 GBK 编码的时候存的东西

1407
01:05:13,000 --> 01:05:14,000
对

1408
01:05:14,000 --> 01:05:15,000
这是肯定可以的

1409
01:05:15,000 --> 01:05:16,000
OK

1410
01:05:17,000 --> 01:05:19,000
所以就说那个代码页

1411
01:05:19,000 --> 01:05:21,000
CodePage 这个事情的话

1412
01:05:21,000 --> 01:05:22,000
只有 Windows 在用

1413
01:05:22,000 --> 01:05:24,000
IBM 的那套架構

1414
01:05:25,000 --> 01:05:26,000
对

1415
01:05:26,000 --> 01:05:28,000
因为在其他的

1416
01:05:28,000 --> 01:05:30,000
像比如说 Mac 和 Linux 上面

1417
01:05:30,000 --> 01:05:31,000
它是让你直接在

1418
01:05:31,000 --> 01:05:34,000
就是保存的时候文件编辑系

1419
01:05:34,000 --> 01:05:37,000
它是用 Charset 的一个标志吧

1420
01:05:37,000 --> 01:05:38,000
应该

1421
01:05:38,000 --> 01:05:39,000
对没错

1422
01:05:39,000 --> 01:05:42,000
这是两种编码的标记的哲学吧

1423
01:05:42,000 --> 01:05:43,000
可以算是

1424
01:05:44,000 --> 01:05:46,000
一个是全系统的

1425
01:05:46,000 --> 01:05:47,000
一个是那个

1426
01:05:47,000 --> 01:05:48,000
Perfile 的

1427
01:05:49,000 --> 01:05:53,000
终于讲清楚 Windows 和 GB 那些东西了

1428
01:05:53,000 --> 01:05:54,000
现在开始

1429
01:05:54,000 --> 01:05:56,000
我不知道我们听众有没有被我们绕晕

1430
01:05:57,000 --> 01:05:59,000
我觉得其实对于很多听众来说

1431
01:05:59,000 --> 01:06:00,000
可能并没有

1432
01:06:00,000 --> 01:06:02,000
他们看了一集被我们绕晕了

1433
01:06:03,000 --> 01:06:04,000
有一种

1434
01:06:04,000 --> 01:06:07,000
吴涛那个什么沙拉怎么说来的

1435
01:06:07,000 --> 01:06:08,000
Cycle Salad

1436
01:06:08,000 --> 01:06:09,000
对

1437
01:06:09,000 --> 01:06:10,000
脑子里面还是那个

1438
01:06:11,000 --> 01:06:13,000
听了一脑子沙拉

1439
01:06:13,000 --> 01:06:14,000
以后

1440
01:06:14,000 --> 01:06:16,000
对以后说你一脑降虎

1441
01:06:16,000 --> 01:06:18,000
说你一脑 Cycle Salad

1442
01:06:19,000 --> 01:06:20,000
这个比较好

1443
01:06:20,000 --> 01:06:21,000
听起来很高级

1444
01:06:21,000 --> 01:06:23,000
Cycle Salad

1445
01:06:24,000 --> 01:06:27,000
OK

1446
01:06:27,000 --> 01:06:30,000
现在终于进入到的 Unicode 时代

1447
01:06:30,000 --> 01:06:32,000
其实这样是并存的吧

1448
01:06:32,000 --> 01:06:34,000
在时间观念上是有重叠的

1449
01:06:35,000 --> 01:06:37,000
应该说 Unicode

1450
01:06:37,000 --> 01:06:39,000
它作为一个独立的这样一个机构

1451
01:06:39,000 --> 01:06:44,000
它希望能推动全球文字编码和字符集的

1452
01:06:44,000 --> 01:06:46,000
这两套标准都统一的这样一个

1453
01:06:46,000 --> 01:06:47,000
一个目标吧

1454
01:06:47,000 --> 01:06:48,000
应该说

1455
01:06:48,000 --> 01:06:52,000
但是同时它又不能去废除那些地方性的编码方案

1456
01:06:54,000 --> 01:06:57,000
对就只能想办法去都兼容

1457
01:06:57,000 --> 01:06:58,000
这样造成一个结果的话

1458
01:06:58,000 --> 01:07:01,000
它就是不可能向后兼容了

1459
01:07:01,000 --> 01:07:03,000
就必须要改 Mapping 了

1460
01:07:03,000 --> 01:07:04,000
对

1461
01:07:04,000 --> 01:07:06,000
最新的 ASCII 的码位

1462
01:07:06,000 --> 01:07:10,000
必须是这个什么美国人发明的

1463
01:07:10,000 --> 01:07:11,000
美国中心主义

1464
01:07:11,000 --> 01:07:12,000
应该说 Unicode

1465
01:07:12,000 --> 01:07:15,000
它用它定义字符集的时候

1466
01:07:15,000 --> 01:07:18,000
它创造了一个它称为叫什么

1467
01:07:18,000 --> 01:07:19,000
Unicode

1468
01:07:19,000 --> 01:07:20,000
Scalar

1469
01:07:20,000 --> 01:07:21,000
Scalar

1470
01:07:21,000 --> 01:07:22,000
那个叫什么

1471
01:07:22,000 --> 01:07:23,000
Scalar Value

1472
01:07:23,000 --> 01:07:27,000
就是它所谓的它这个 Unicode 标量值的这样一个

1473
01:07:27,000 --> 01:07:29,000
非常规范的标记方式

1474
01:07:29,000 --> 01:07:32,000
那么这个值的这个数值显然跟 ASCII

1475
01:07:32,000 --> 01:07:35,000
和我们传统建造的一些编码的数值

1476
01:07:35,000 --> 01:07:38,000
就我们所谓的这个内码数值都是不一样的

1477
01:07:38,000 --> 01:07:40,000
它是一套完全独立的方案

1478
01:07:40,000 --> 01:07:44,000
但同时那个 Unicode 创造了这个三个主流的编码方案

1479
01:07:44,000 --> 01:07:45,000
Unicode

1480
01:07:45,000 --> 01:07:48,000
那个 UTF 8 16 和 32 里面

1481
01:07:48,000 --> 01:07:50,000
16 应该是兼容 ASCII 的

1482
01:07:50,000 --> 01:07:51,000
但是

1483
01:07:51,000 --> 01:07:53,000
8 是兼容 ASCII 的

1484
01:07:53,000 --> 01:07:56,000
但是那个 16 和 32 就是完全独立的

1485
01:07:56,000 --> 01:07:58,000
因为字节宽度不一样的

1486
01:07:58,000 --> 01:07:59,000
对

1487
01:07:59,000 --> 01:08:03,000
就是 32 是一个固定宽度的一个编码方案

1488
01:08:03,000 --> 01:08:05,000
那么它的这个

1489
01:08:05,000 --> 01:08:07,000
它是一个比较漂亮的编码方案

1490
01:08:07,000 --> 01:08:10,000
它的这个编码的数值跟那个 Unicode

1491
01:08:10,000 --> 01:08:11,000
那个 Scalar

1492
01:08:11,000 --> 01:08:13,000
Value 是一一对应的

1493
01:08:13,000 --> 01:08:14,000
因为它最宽嘛

1494
01:08:14,000 --> 01:08:15,000
有四个字节了

1495
01:08:15,000 --> 01:08:16,000
对

1496
01:08:16,000 --> 01:08:17,000
它是可以完全写出来这个

1497
01:08:17,000 --> 01:08:19,000
那么这个 16 的话

1498
01:08:19,000 --> 01:08:24,000
就是由那个双字节和四字节切换了这样一个模式

1499
01:08:24,000 --> 01:08:28,000
8 的话就是一个在单字节模式下是兼容 ASCII 的

1500
01:08:28,000 --> 01:08:31,000
你虽然那个四个是很漂亮的

1501
01:08:31,000 --> 01:08:33,000
但是固定四个的话就很浪费

1502
01:08:33,000 --> 01:08:37,000
如果你纯属比如说西纹的话

1503
01:08:37,000 --> 01:08:38,000
就非常浪费

1504
01:08:38,000 --> 01:08:41,000
所以后来大家就觉得比较经济的方式

1505
01:08:41,000 --> 01:08:43,000
还是用变长的方式比较好

1506
01:08:43,000 --> 01:08:45,000
对

1507
01:08:45,000 --> 01:08:46,000
这样呢就

1508
01:08:46,000 --> 01:08:48,000
而且还有一个问题是

1509
01:08:48,000 --> 01:08:51,000
就是那个定长的有解决不了的

1510
01:08:51,000 --> 01:08:52,000
待会会提到

1511
01:08:52,000 --> 01:08:55,000
所以刚才说的区位嘛

1512
01:08:55,000 --> 01:08:56,000
区有 Row

1513
01:08:56,000 --> 01:08:58,000
然后 Way 是 Cell

1514
01:08:58,000 --> 01:09:00,000
然后后面就开始有个平面了

1515
01:09:00,000 --> 01:09:01,000
就叫 Pline

1516
01:09:01,000 --> 01:09:03,000
然后好几个平面

1517
01:09:03,000 --> 01:09:05,000
它又变成一个 Group

1518
01:09:05,000 --> 01:09:06,000
变成一个组

1519
01:09:07,000 --> 01:09:08,000
这是整

1520
01:09:08,000 --> 01:09:11,000
这个是 Unicode 的一个划分的方式

1521
01:09:11,000 --> 01:09:12,000
这是整个 Unicode

1522
01:09:12,000 --> 01:09:14,000
对 这是整个 Unicode 它的一个

1523
01:09:14,000 --> 01:09:17,000
它必须要有这么多个座位

1524
01:09:17,000 --> 01:09:20,000
才能把所有全世界这些字给安排下去

1525
01:09:23,000 --> 01:09:25,000
然后就会有我们常说的一个词

1526
01:09:25,000 --> 01:09:27,000
就是基本多语言平面

1527
01:09:27,000 --> 01:09:29,000
就是 BMP

1528
01:09:29,000 --> 01:09:32,000
Basic Multilingual Plane

1529
01:09:32,000 --> 01:09:34,000
就是所谓的第 0 面

1530
01:09:34,000 --> 01:09:36,000
这个第 0 面应该说就是

1531
01:09:36,000 --> 01:09:38,000
是一个双字节的

1532
01:09:38,000 --> 01:09:41,000
就是 16 个 Bit 的这样子的

1533
01:09:41,000 --> 01:09:43,000
一个字符级的组合

1534
01:09:43,000 --> 01:09:45,000
这是因为早期 Unicode

1535
01:09:45,000 --> 01:09:47,000
它没有想到会进来那么多的字符

1536
01:09:47,000 --> 01:09:48,000
越加越多

1537
01:09:48,000 --> 01:09:50,000
它就指定了这样一个平面

1538
01:09:50,000 --> 01:09:52,000
对 这个平面就是成为了一个

1539
01:09:52,000 --> 01:09:56,000
最基本的叫第 0 平面或者叫 BMP 这样子

1540
01:09:56,000 --> 01:09:57,000
这是什么呢

1541
01:09:57,000 --> 01:10:01,000
65536 个码位已经够用了

1542
01:10:03,000 --> 01:10:05,000
事实证明是不够的

1543
01:10:06,000 --> 01:10:08,000
所以这里其实我们还是要把那个

1544
01:10:08,000 --> 01:10:11,000
刚才那个东西再稍微形象解释一下

1545
01:10:11,000 --> 01:10:13,000
就是说我们刚才讲

1546
01:10:13,000 --> 01:10:15,000
GV 2432 它规定了一个方格

1547
01:10:15,000 --> 01:10:17,000
94 x 94 这么一个区间

1548
01:10:17,000 --> 01:10:19,000
有些空没用

1549
01:10:19,000 --> 01:10:21,000
但是它也是一个矩阵

1550
01:10:21,000 --> 01:10:23,000
然后 Unicode 其实这个我们讲的

1551
01:10:23,000 --> 01:10:25,000
BMP 这个基本面

1552
01:10:25,000 --> 01:10:26,000
其实大致上可以对应为那个

1553
01:10:26,000 --> 01:10:30,000
不过它是一个 256 x 256 的一个平面

1554
01:10:30,000 --> 01:10:33,000
对 那就是成出来就是 65536

1555
01:10:33,000 --> 01:10:35,000
65536 个座位

1556
01:10:35,000 --> 01:10:37,000
就是这个码位

1557
01:10:38,000 --> 01:10:41,000
对 但其实这只是为了好看

1558
01:10:41,000 --> 01:10:42,000
它本质上还是一长串

1559
01:10:42,000 --> 01:10:43,000
就是一个数

1560
01:10:43,000 --> 01:10:44,000
就是它如果

1561
01:10:44,000 --> 01:10:45,000
我应该想像它一个竖轴上

1562
01:10:45,000 --> 01:10:47,000
它应该是一个一维的一个东西

1563
01:10:47,000 --> 01:10:48,000
对

1564
01:10:48,000 --> 01:10:50,000
然后再往里面天上

1565
01:10:50,000 --> 01:10:52,000
就各国的文字对吧

1566
01:10:52,000 --> 01:10:55,000
这是刚才我们说的这个码位的事情

1567
01:10:58,000 --> 01:11:00,000
然后这个基本平面里面

1568
01:11:00,000 --> 01:11:02,000
有些什么字是什么规定的

1569
01:11:02,000 --> 01:11:04,000
有什么讲究吗

1570
01:11:04,000 --> 01:11:06,000
就是按顺序往里填呗

1571
01:11:06,000 --> 01:11:08,000
这个区位就非常多了

1572
01:11:08,000 --> 01:11:10,000
OK 那比如说我问一个问题

1573
01:11:10,000 --> 01:11:12,000
就是说

1574
01:11:12,000 --> 01:11:14,000
中文字是放

1575
01:11:14,000 --> 01:11:17,000
就大部分中文字是放在那个基本平面里面的吧

1576
01:11:17,000 --> 01:11:18,000
对

1577
01:11:18,000 --> 01:11:19,000
常用的

1578
01:11:19,000 --> 01:11:22,000
一直汉字基本都在里面

1579
01:11:22,000 --> 01:11:24,000
那比如说对应刚才我们说的那些东西

1580
01:11:24,000 --> 01:11:27,000
就是说不是 GBR 312 里面所有的字符

1581
01:11:27,000 --> 01:11:29,000
都在基本平面里面吧

1582
01:11:29,000 --> 01:11:30,000
嗯

1583
01:11:30,000 --> 01:11:32,000
还有再扩张面

1584
01:11:32,000 --> 01:11:35,000
就是在后面其他的面上的的确是有的

1585
01:11:35,000 --> 01:11:36,000
OK

1586
01:11:36,000 --> 01:11:37,000
OK

1587
01:11:37,000 --> 01:11:38,000
明白

1588
01:11:38,000 --> 01:11:40,000
那再问一个问题

1589
01:11:40,000 --> 01:11:42,000
就是说在这个 Unicode 的基本面里面

1590
01:11:42,000 --> 01:11:44,000
那个码位的那个中文类

1591
01:11:44,000 --> 01:11:46,000
就是基本汉字

1592
01:11:46,000 --> 01:11:48,000
Unicode 里面已经有一个新的称呼

1593
01:11:48,000 --> 01:11:51,000
就是 CJK 统一表一文字

1594
01:11:51,000 --> 01:11:52,000
这不仅是中文了

1595
01:11:52,000 --> 01:11:54,000
就是中日汉

1596
01:11:54,000 --> 01:11:57,000
就是大家全球大一统

1597
01:11:57,000 --> 01:11:59,000
所有字形一样的文字全都可以塞在里面

1598
01:11:59,000 --> 01:12:00,000
OK

1599
01:12:00,000 --> 01:12:01,000
这里

1600
01:12:01,000 --> 01:12:02,000
这里就是说要解释一下

1601
01:12:02,000 --> 01:12:04,000
为什么会有这么一个事

1602
01:12:04,000 --> 01:12:06,000
就是他的逻辑是什么

1603
01:12:06,000 --> 01:12:11,000
他的逻辑就是 Unicode 是针对这个 script 这种东西

1604
01:12:11,000 --> 01:12:13,000
来划分他的 block 的

1605
01:12:13,000 --> 01:12:16,000
我们刚刚说了就是说这个日语

1606
01:12:16,000 --> 01:12:17,000
或者说日文

1607
01:12:17,000 --> 01:12:18,000
它作为一个书写系统

1608
01:12:18,000 --> 01:12:20,000
其实它用到了四种文字

1609
01:12:20,000 --> 01:12:21,000
就是包括拉丁

1610
01:12:21,000 --> 01:12:22,000
平甲名

1611
01:12:22,000 --> 01:12:23,000
片甲名和汉字

1612
01:12:23,000 --> 01:12:26,000
那么 Unicode 认为你日本用的汉字

1613
01:12:26,000 --> 01:12:27,000
韩国用的汉字

1614
01:12:27,000 --> 01:12:28,000
中国用的汉字

1615
01:12:28,000 --> 01:12:29,000
以及越南用的汉字

1616
01:12:29,000 --> 01:12:31,000
他们都是汉字这一种 script

1617
01:12:31,000 --> 01:12:33,000
你们都应该统一起来

1618
01:12:33,000 --> 01:12:35,000
既然明明是一个字

1619
01:12:35,000 --> 01:12:36,000
而且写法基本上也一样

1620
01:12:36,000 --> 01:12:37,000
为什么不能就用一个码位

1621
01:12:37,000 --> 01:12:39,000
比如说汉字 1 2 3

1622
01:12:39,000 --> 01:12:41,000
各个地区大家都长得都一样

1623
01:12:41,000 --> 01:12:43,000
就没有必要用三个码位分别的码位

1624
01:12:43,000 --> 01:12:44,000
所以呢

1625
01:12:44,000 --> 01:12:46,000
比如说汉字的 1

1626
01:12:46,000 --> 01:12:48,000
那大家就统一起来吧

1627
01:12:48,000 --> 01:12:53,000
那所以这里就牵涉到一个所谓的汉字的追根溯源的问题了

1628
01:12:53,000 --> 01:12:54,000
就是说

1629
01:12:54,000 --> 01:12:56,000
因为日文和韩文里面的汉字

1630
01:12:56,000 --> 01:12:59,000
它的来源是来自于中文的那个字

1631
01:12:59,000 --> 01:13:00,000
那就说

1632
01:13:00,000 --> 01:13:02,000
就要问日本人民说

1633
01:13:02,000 --> 01:13:06,000
你们觉得你们这个汉字是对应到中国的哪一个

1634
01:13:06,000 --> 01:13:07,000
还有韩国人民说

1635
01:13:07,000 --> 01:13:10,000
你们认为你们这个汉字对应到中国的哪一个

1636
01:13:10,000 --> 01:13:13,000
他们说我们听说要对应到中文

1637
01:13:13,000 --> 01:13:14,000
对对对

1638
01:13:14,000 --> 01:13:15,000
那肯定会出现一种情况

1639
01:13:15,000 --> 01:13:17,000
就是说他们觉得

1640
01:13:17,000 --> 01:13:20,000
韩国人觉得我这个字应该对应到中文那个字

1641
01:13:20,000 --> 01:13:22,000
然后日本人觉得这个字

1642
01:13:22,000 --> 01:13:24,000
我觉得这个字应该对应到中文另外一个字

1643
01:13:24,000 --> 01:13:25,000
对对吧

1644
01:13:25,000 --> 01:13:26,000
非非混乱

1645
01:13:27,000 --> 01:13:28,000
对

1646
01:13:28,000 --> 01:13:29,000
这怎么解决了但是

1647
01:13:29,000 --> 01:13:31,000
首先一个原则就是

1648
01:13:31,000 --> 01:13:32,000
在做 Uniqlo 的时候

1649
01:13:32,000 --> 01:13:35,000
大家各个国家先把各国的那个标准拿出来嘛

1650
01:13:35,000 --> 01:13:37,000
日本要拿出它的 G 4

1651
01:13:37,000 --> 01:13:39,000
韩国拿出它的 KS

1652
01:13:39,000 --> 01:13:41,000
咱们中国拿出来是 GB

1653
01:13:41,000 --> 01:13:43,000
还有台湾地区

1654
01:13:43,000 --> 01:13:45,000
还有他们拿出它的大 5 嘛

1655
01:13:45,000 --> 01:13:46,000
然后呢

1656
01:13:46,000 --> 01:13:48,000
中国拿的是 GB 哪一个

1657
01:13:48,000 --> 01:13:50,000
18030 还是 GBK 还是 GB 2312

1658
01:13:50,000 --> 01:13:54,000
不同的历史阶段应该拿出的是不同的文件

1659
01:13:54,000 --> 01:13:56,000
好吧但中文的情况比较简单

1660
01:13:56,000 --> 01:13:58,000
因为至少我们是向后兼容的嘛

1661
01:13:58,000 --> 01:13:59,000
对对

1662
01:13:59,000 --> 01:14:02,000
就还不至于说乱掉这种情况

1663
01:14:02,000 --> 01:14:05,000
然后先拿出来的时候呢

1664
01:14:05,000 --> 01:14:06,000
就是各个国家拿出来

1665
01:14:06,000 --> 01:14:08,000
它的一个首先一个原则就是说

1666
01:14:08,000 --> 01:14:10,000
如果你在这些字

1667
01:14:10,000 --> 01:14:12,000
原来你在这个

1668
01:14:12,000 --> 01:14:15,000
比如说在 GB 里面它本来就是两个字的话

1669
01:14:15,000 --> 01:14:19,000
那我放到这个 Uniqlo 里面也是两个字

1670
01:14:19,000 --> 01:14:21,000
就是原规则分开的话

1671
01:14:21,000 --> 01:14:22,000
我现在也分开

1672
01:14:22,000 --> 01:14:24,000
我不会给它合在一起

1673
01:14:24,000 --> 01:14:26,000
因为它要保证就是

1674
01:14:26,000 --> 01:14:28,000
所谓的向后兼容嘛

1675
01:14:28,000 --> 01:14:29,000
那这里有个问题啊

1676
01:14:29,000 --> 01:14:30,000
就是说

1677
01:14:30,000 --> 01:14:31,000
因为我理解

1678
01:14:31,000 --> 01:14:35,000
就是日文的汉字和这个韩文的汉字

1679
01:14:35,000 --> 01:14:37,000
里面应该都是对应的繁体字吧

1680
01:14:37,000 --> 01:14:38,000
不一定

1681
01:14:38,000 --> 01:14:39,000
不一定非常复杂

1682
01:14:39,000 --> 01:14:40,000
不一定

1683
01:14:40,000 --> 01:14:41,000
对

1684
01:14:41,000 --> 01:14:43,000
因为日文有日文汉字

1685
01:14:43,000 --> 01:14:44,000
然后刚才说嘛

1686
01:14:44,000 --> 01:14:45,000
各个国家的简化都不一样

1687
01:14:45,000 --> 01:14:46,000
比如说新加坡

1688
01:14:46,000 --> 01:14:48,000
它有新加坡的简化汉字

1689
01:14:48,000 --> 01:14:50,000
然后日文有日文的简化汉字

1690
01:14:50,000 --> 01:14:52,000
日文还有简化汉字

1691
01:14:52,000 --> 01:14:53,000
对

1692
01:14:53,000 --> 01:14:54,000
有啊

1693
01:14:54,000 --> 01:14:57,000
而且还有经典会简化以后张冠李带的字

1694
01:14:57,000 --> 01:15:00,000
比如说文艺的意

1695
01:15:00,000 --> 01:15:03,000
在日文的这个文艺的意的简化就是草字头

1696
01:15:03,000 --> 01:15:05,000
底下个白云的云

1697
01:15:05,000 --> 01:15:07,000
然后这个字在中文里面是有的

1698
01:15:07,000 --> 01:15:09,000
中文里面是另外一个字

1699
01:15:09,000 --> 01:15:10,000
为什么我追这种情况呢

1700
01:15:10,000 --> 01:15:13,000
就因为你国没有权利去管理我

1701
01:15:13,000 --> 01:15:16,000
去约束我国怎么简化字对吧

1702
01:15:16,000 --> 01:15:18,000
不不不我这个意思就是说

1703
01:15:18,000 --> 01:15:22,000
就是日文简化这个意字简化成云的时候

1704
01:15:22,000 --> 01:15:24,000
他们没有去看一下别人怎么做

1705
01:15:24,000 --> 01:15:26,000
是平行发展

1706
01:15:26,000 --> 01:15:28,000
他们为什么要去看别人怎么做

1707
01:15:28,000 --> 01:15:30,000
就我国就在日本里面

1708
01:15:30,000 --> 01:15:32,000
在日本的汉字里面没有云这个字

1709
01:15:32,000 --> 01:15:34,000
就没有上草下云这个字

1710
01:15:34,000 --> 01:15:36,000
那他为什么不能用呢

1711
01:15:36,000 --> 01:15:37,000
所以就说吧

1712
01:15:37,000 --> 01:15:39,000
如果人的历史可以改写的话

1713
01:15:39,000 --> 01:15:41,000
当年如果大家简化汉字都商量一下就好了

1714
01:15:41,000 --> 01:15:43,000
不是如果对

1715
01:15:43,000 --> 01:15:45,000
如果我们黄汉早一点统一世界的话

1716
01:15:45,000 --> 01:15:47,000
就没有这种问题

1717
01:15:49,000 --> 01:15:50,000
或者对

1718
01:15:50,000 --> 01:15:52,000
从这个今日的角度讲

1719
01:15:52,000 --> 01:15:54,000
如果当年大日本建立了什么东亚共融圈

1720
01:15:54,000 --> 01:15:56,000
也没有这种问题

1721
01:15:56,000 --> 01:15:59,000
就解决一切问题都不成问题了对吧

1722
01:15:59,000 --> 01:16:01,000
对一切一切技术问题

1723
01:16:01,000 --> 01:16:03,000
其实归根结底都是政治问题

1724
01:16:03,000 --> 01:16:05,000
这老实

1725
01:16:05,000 --> 01:16:07,000
所以呢最初期

1726
01:16:07,000 --> 01:16:09,000
比如说出现这种情况怎么解决呢

1727
01:16:09,000 --> 01:16:11,000
比如说刚才说文艺的这个意字的时候

1728
01:16:11,000 --> 01:16:12,000
到 unicode 里面怎么办

1729
01:16:12,000 --> 01:16:14,000
就只能各给一个码点吧

1730
01:16:14,000 --> 01:16:16,000
但是现在事实上呢

1731
01:16:16,000 --> 01:16:17,000
是只有一个码点

1732
01:16:17,000 --> 01:16:18,000
然后这个码点呢

1733
01:16:18,000 --> 01:16:20,000
是草字头一个云

1734
01:16:20,000 --> 01:16:22,000
然后呢日本人用这个字

1735
01:16:22,000 --> 01:16:24,000
把它当成艺术的意字

1736
01:16:24,000 --> 01:16:25,000
在用

1737
01:16:25,000 --> 01:16:27,000
中国人用这个字拿出

1738
01:16:27,000 --> 01:16:29,000
云云昼山的云

1739
01:16:29,000 --> 01:16:31,000
因为只是编码

1740
01:16:31,000 --> 01:16:32,000
然后用来显示嘛

1741
01:16:32,000 --> 01:16:34,000
至于它是什么语意

1742
01:16:34,000 --> 01:16:36,000
这个是没有关系的嘛

1743
01:16:38,000 --> 01:16:40,000
这相当于意中各个

1744
01:16:40,000 --> 01:16:42,000
只规定形状

1745
01:16:42,000 --> 01:16:44,000
不规定意义嘛

1746
01:16:44,000 --> 01:16:46,000
因为本来你这个

1747
01:16:46,000 --> 01:16:48,000
收的那个字符集的话

1748
01:16:48,000 --> 01:16:50,000
只是给每个字编一个座位而已嘛

1749
01:16:52,000 --> 01:16:53,000
对对对

1750
01:16:53,000 --> 01:16:55,000
这并不需要附于含义的

1751
01:16:55,000 --> 01:16:57,000
现在首先他们在 CJK 统一汉字

1752
01:16:57,000 --> 01:16:59,000
只是大家各自把各国选手

1753
01:16:59,000 --> 01:17:01,000
拉出来嘛对吧

1754
01:17:01,000 --> 01:17:03,000
所以最初的统一汉字呢

1755
01:17:03,000 --> 01:17:05,000
有 20941 个字

1756
01:17:05,000 --> 01:17:07,000
然后呢

1757
01:17:07,000 --> 01:17:09,000
中国国标

1758
01:17:09,000 --> 01:17:11,000
当时就是拉出了那个

1759
01:17:11,000 --> 01:17:13,000
2312 和 112345

1760
01:17:13,000 --> 01:17:15,000
然后台湾的

1761
01:17:15,000 --> 01:17:17,000
台湾有他们的 CNS

1762
01:17:17,000 --> 01:17:19,000
然后日本呢

1763
01:17:19,000 --> 01:17:21,000
日本就是祭祀的

1764
01:17:21,000 --> 01:17:23,000
0208 大概也是

1765
01:17:23,000 --> 01:17:25,000
有 1 万 1000 多个字

1766
01:17:25,000 --> 01:17:27,000
韩国的话

1767
01:17:27,000 --> 01:17:29,000
韩国特别坑

1768
01:17:29,000 --> 01:17:31,000
汉字不是有多音字吗

1769
01:17:31,000 --> 01:17:33,000
韩国他们那个 KS 的那个

1770
01:17:33,000 --> 01:17:35,000
编码里面呢

1771
01:17:35,000 --> 01:17:37,000
它只是

1772
01:17:37,000 --> 01:17:39,000
韩文它是发音嘛

1773
01:17:39,000 --> 01:17:41,000
发音会对一个字

1774
01:17:41,000 --> 01:17:43,000
那多一个

1775
01:17:43,000 --> 01:17:45,000
多个发音都对同一个汉字

1776
01:17:45,000 --> 01:17:47,000
那他们怎么解决这个问题

1777
01:17:47,000 --> 01:17:49,000
他们没有解决这个问题

1778
01:17:49,000 --> 01:17:51,000
他们没有解决这个问题

1779
01:17:51,000 --> 01:17:53,000
在韩文的他们 KS 的编码里面

1780
01:17:53,000 --> 01:17:55,000
汉字有重复

1781
01:17:55,000 --> 01:17:57,000
就是

1782
01:17:57,000 --> 01:17:59,000
它是取音的

1783
01:17:59,000 --> 01:18:01,000
它是取形和音就是同一个形

1784
01:18:01,000 --> 01:18:03,000
它不同读音的时候比如刚才我们那个曲吧

1785
01:18:03,000 --> 01:18:05,000
歌曲和这个曲线

1786
01:18:05,000 --> 01:18:07,000
它会把它有两个码点

1787
01:18:07,000 --> 01:18:09,000
所以在韩国的比如说 KSC 的

1788
01:18:09,000 --> 01:18:11,000
5601 里面

1789
01:18:11,000 --> 01:18:13,000
它有 4888 个字

1790
01:18:13,000 --> 01:18:15,000
但是呢其中呢有 268 个字

1791
01:18:15,000 --> 01:18:17,000
是重复的

1792
01:18:17,000 --> 01:18:19,000
然后转到 Uniqlo CDK 的时候

1793
01:18:19,000 --> 01:18:21,000
我们都给它合一了吗

1794
01:18:21,000 --> 01:18:23,000
没有合一 因为要保留

1795
01:18:23,000 --> 01:18:25,000
还要相互兼容 字元分离原则

1796
01:18:25,000 --> 01:18:27,000
刚才说了我们说的第一个原则

1797
01:18:27,000 --> 01:18:29,000
就是字离分

1798
01:18:29,000 --> 01:18:31,000
原来是分的话

1799
01:18:31,000 --> 01:18:33,000
我必须要分

1800
01:18:33,000 --> 01:18:35,000
所以说 CJK 这个 unification

1801
01:18:35,000 --> 01:18:37,000
其实是说

1802
01:18:37,000 --> 01:18:39,000
中国的汉字和日本的汉字

1803
01:18:39,000 --> 01:18:41,000
和韩国的汉字如果长得差不多的

1804
01:18:41,000 --> 01:18:43,000
就混成一个

1805
01:18:43,000 --> 01:18:45,000
但是如果它们本身里面是有两个的

1806
01:18:45,000 --> 01:18:47,000
我们就不合了

1807
01:18:47,000 --> 01:18:49,000
所以呢导致于这个

1808
01:18:49,000 --> 01:18:51,000
合和分的这个规则特别的混乱

1809
01:18:51,000 --> 01:18:53,000
有的该合的不合

1810
01:18:53,000 --> 01:18:55,000
该分的不分之类的

1811
01:18:55,000 --> 01:18:57,000
所以其实为了

1812
01:18:57,000 --> 01:18:59,000
就为了说这个

1813
01:18:59,000 --> 01:19:01,000
这个原则

1814
01:19:01,000 --> 01:19:03,000
所以其实为了

1815
01:19:03,000 --> 01:19:05,000
就为了省那么小几个码点

1816
01:19:05,000 --> 01:19:07,000
不如说直接复制过来

1817
01:19:07,000 --> 01:19:09,000
就是划区嘛 跟那个 IP 地址一样

1818
01:19:09,000 --> 01:19:11,000
说这一块你们中国人拿去啊

1819
01:19:11,000 --> 01:19:13,000
够用了吧 不用再申请

1820
01:19:13,000 --> 01:19:15,000
随便你怎么样

1821
01:19:15,000 --> 01:19:17,000
然后这一块韩国人你们拿去

1822
01:19:17,000 --> 01:19:19,000
随便你们怎么弄

1823
01:19:19,000 --> 01:19:21,000
然后这块日本人拿去你们随便怎么用

1824
01:19:21,000 --> 01:19:23,000
会更简单一点

1825
01:19:23,000 --> 01:19:25,000
但是这样就背离了 Uniqlo 想要 unify 的初衷了

1826
01:19:25,000 --> 01:19:27,000
Uniqlo 一开始的一个

1827
01:19:27,000 --> 01:19:29,000
目的不就是让所有字型

1828
01:19:29,000 --> 01:19:31,000
如果相似的话

1829
01:19:31,000 --> 01:19:33,000
他们的意思就是如果这个世界上

1830
01:19:33,000 --> 01:19:35,000
有这样一个符号

1831
01:19:35,000 --> 01:19:37,000
他在哪里的写法都是

1832
01:19:37,000 --> 01:19:39,000
基本上是同一个事物

1833
01:19:39,000 --> 01:19:41,000
比如说白云或者是

1834
01:19:41,000 --> 01:19:43,000
那个可以用 normalization 来解决吗

1835
01:19:45,000 --> 01:19:47,000
比较复杂

1836
01:19:47,000 --> 01:19:49,000
然后因为

1837
01:19:49,000 --> 01:19:51,000
可是 normalization

1838
01:19:51,000 --> 01:19:53,000
最终的结果不就还是会像现在

1839
01:19:53,000 --> 01:19:55,000
不 但是一个是可选

1840
01:19:55,000 --> 01:19:57,000
一个是强加的问题

1841
01:19:57,000 --> 01:19:59,000
因为 unification 是你在制定规范的时候

1842
01:19:59,000 --> 01:20:01,000
要选

1843
01:20:01,000 --> 01:20:03,000
申请 IP 地址的时候申请这个马威的时候

1844
01:20:03,000 --> 01:20:05,000
要先选好说我们这个

1845
01:20:05,000 --> 01:20:07,000
共用一个马威

1846
01:20:07,000 --> 01:20:09,000
但是就是说你又要保持向后兼容的话

1847
01:20:09,000 --> 01:20:11,000
其实做这个事情是平白无故增加了复杂度

1848
01:20:11,000 --> 01:20:13,000
那如果你说 normalization

1849
01:20:13,000 --> 01:20:15,000
作为一个事后的东西

1850
01:20:15,000 --> 01:20:17,000
就虽然我可以向后兼容

1851
01:20:17,000 --> 01:20:19,000
但是为了说得出来大家都还能够一个可比的话

1852
01:20:19,000 --> 01:20:21,000
我们再用一个 normalization 的规则

1853
01:20:21,000 --> 01:20:23,000
把它换成一个统一的表达不就好了吗

1854
01:20:23,000 --> 01:20:25,000
这个有意思吗

1855
01:20:25,000 --> 01:20:27,000
好啊

1856
01:20:27,000 --> 01:20:29,000
你可以这么说

1857
01:20:29,000 --> 01:20:31,000
但我觉得 unicode 的初衷可能是

1858
01:20:31,000 --> 01:20:39,000
在 unicode 制定的理念里面兼容既有编码并不是占第一位

1859
01:20:39,000 --> 01:20:45,000
就是 unicode 的理想就是从 unicode 之后再无别的编码

1860
01:20:45,000 --> 01:20:47,000
对吧

1861
01:20:47,000 --> 01:20:49,000
那如果你说你一定要保留原有的那个东西

1862
01:20:49,000 --> 01:20:51,000
那相当于

1863
01:20:51,000 --> 01:20:53,000
就不要合了

1864
01:20:53,000 --> 01:20:55,000
它的主要诉求

1865
01:20:55,000 --> 01:20:57,000
其实一开始的确就是

1866
01:20:57,000 --> 01:20:59,000
为了大幅度减少收入的汉字的字数

1867
01:20:59,000 --> 01:21:03,000
然后就尽量去尊重各地的习惯字型

1868
01:21:03,000 --> 01:21:05,000
那就是你原来是分离的你就分离

1869
01:21:05,000 --> 01:21:07,000
然后能合的就合在一起

1870
01:21:07,000 --> 01:21:09,000
对

1871
01:21:09,000 --> 01:21:11,000
这还是统一为主兼容为主

1872
01:21:11,000 --> 01:21:13,000
对对是比较灵活

1873
01:21:13,000 --> 01:21:15,000
但是就因为这个灵活的话

1874
01:21:15,000 --> 01:21:17,000
灵活就是复杂度

1875
01:21:17,000 --> 01:21:19,000
所以他说他的编码是针对字

1876
01:21:19,000 --> 01:21:21,000
而不是对字型

1877
01:21:21,000 --> 01:21:23,000
就是对 character 进行编码

1878
01:21:23,000 --> 01:21:25,000
而不是对 griff

1879
01:21:25,000 --> 01:21:27,000
明白明白明白

1880
01:21:27,000 --> 01:21:29,000
其实也不太对

1881
01:21:29,000 --> 01:21:31,000
刚刚你说文艺的意识就不符合这个逻辑了

1882
01:21:31,000 --> 01:21:33,000
但是呢

1883
01:21:33,000 --> 01:21:35,000
他们就是对字啊

1884
01:21:35,000 --> 01:21:37,000
所以就很复杂

1885
01:21:37,000 --> 01:21:39,000
像合起来比如说

1886
01:21:39,000 --> 01:21:41,000
户口的户

1887
01:21:41,000 --> 01:21:43,000
中国大陆的话户的第一笔是点吧

1888
01:21:43,000 --> 01:21:45,000
在

1889
01:21:45,000 --> 01:21:47,000
日本是一号

1890
01:21:47,000 --> 01:21:49,000
然后呢

1891
01:21:49,000 --> 01:21:51,000
台湾是一撇

1892
01:21:51,000 --> 01:21:53,000
但是这个字呢

1893
01:21:53,000 --> 01:21:55,000
在 unicode 的话

1894
01:21:55,000 --> 01:21:57,000
我们被当时认为是一个字

1895
01:21:57,000 --> 01:21:59,000
所以呢就只给他一个座位

1896
01:21:59,000 --> 01:22:01,000
就导致于就是

1897
01:22:01,000 --> 01:22:03,000
各个地区如果想要他们各自的字型的话

1898
01:22:03,000 --> 01:22:05,000
就显示不出来

1899
01:22:05,000 --> 01:22:07,000
就不能通过这个

1900
01:22:07,000 --> 01:22:09,000
就码位来展现了

1901
01:22:11,000 --> 01:22:13,000
就只能通过字体和位置来实现了

1902
01:22:13,000 --> 01:22:15,000
所以就说这不是字的区别

1903
01:22:15,000 --> 01:22:17,000
而是字型的区别

1904
01:22:17,000 --> 01:22:19,000
那等一下我有一个问题啊

1905
01:22:19,000 --> 01:22:21,000
如果说这样的话我们做那种

1906
01:22:21,000 --> 01:22:23,000
就是多语言文本的时候怎么办

1907
01:22:23,000 --> 01:22:25,000
所以非常依靠你所用的

1908
01:22:25,000 --> 01:22:27,000
那个字库文件

1909
01:22:27,000 --> 01:22:29,000
他字库文件不可能

1910
01:22:29,000 --> 01:22:31,000
就他会有这种

1911
01:22:31,000 --> 01:22:33,000
就是

1912
01:22:33,000 --> 01:22:35,000
对应一个码位他有多个字型

1913
01:22:35,000 --> 01:22:37,000
对

1914
01:22:37,000 --> 01:22:39,000
比如说

1915
01:22:39,000 --> 01:22:41,000
source hand sense

1916
01:22:41,000 --> 01:22:43,000
应该说他是唯一的一个

1917
01:22:43,000 --> 01:22:45,000
对他是现存

1918
01:22:45,000 --> 01:22:47,000
市场唯一一个能找到

1919
01:22:47,000 --> 01:22:49,000
试图去解决刚才 Ryo 提出这个问题的

1920
01:22:49,000 --> 01:22:51,000
这样一个字体工程项目

1921
01:22:51,000 --> 01:22:53,000
对但是如果说

1922
01:22:53,000 --> 01:22:55,000
举个很简单的例子

1923
01:22:55,000 --> 01:22:57,000
假设我要做这个 CGK

1924
01:22:57,000 --> 01:22:59,000
就是你们我们假设自弹

1925
01:22:59,000 --> 01:23:01,000
自唱要出一个节目

1926
01:23:01,000 --> 01:23:03,000
然后出一个这种印刷品来说

1927
01:23:03,000 --> 01:23:05,000
这几个字的区别

1928
01:23:05,000 --> 01:23:07,000
然后你们用 unicode 编码的时候

1929
01:23:07,000 --> 01:23:09,000
要写出这个字你能采取的方案

1930
01:23:09,000 --> 01:23:11,000
你能采取的方案就只有两个

1931
01:23:11,000 --> 01:23:13,000
要么找这种带有这个

1932
01:23:13,000 --> 01:23:15,000
CGK 不同字型 variation

1933
01:23:15,000 --> 01:23:17,000
的这种字体文件一个可以搞定

1934
01:23:17,000 --> 01:23:19,000
然后你在那个就是编辑器

1935
01:23:19,000 --> 01:23:21,000
里面去选择它另外一个就是说

1936
01:23:21,000 --> 01:23:23,000
选三个不同的字体

1937
01:23:23,000 --> 01:23:25,000
然后手工的去调那个字体

1938
01:23:25,000 --> 01:23:27,000
对那个字应该用那个字体

1939
01:23:27,000 --> 01:23:29,000
对的对是的

1940
01:23:29,000 --> 01:23:31,000
这种时候可能直接写 markdown

1941
01:23:31,000 --> 01:23:33,000
会比较简单

1942
01:23:33,000 --> 01:23:35,000
你要么在 unicode 的

1943
01:23:35,000 --> 01:23:37,000
层面确保你写的每一个字是正确的

1944
01:23:37,000 --> 01:23:39,000
否则就只能用 markdown 来辅助

1945
01:23:41,000 --> 01:23:43,000
什么 markdown

1946
01:23:43,000 --> 01:23:45,000
其实就是 HTML

1947
01:23:45,000 --> 01:23:47,000
就是你在那个时候标出说这一段文字

1948
01:23:47,000 --> 01:23:49,000
是日文

1949
01:23:49,000 --> 01:23:51,000
到时候再在那个

1950
01:23:51,000 --> 01:23:53,000
cessus 里面指定说这一段用日文字体

1951
01:23:53,000 --> 01:23:55,000
就不能直接用一个很简单的

1952
01:23:55,000 --> 01:23:57,000
那种就你得人为的

1953
01:23:57,000 --> 01:23:59,000
加入一些 metadata 才行对对对

1954
01:23:59,000 --> 01:24:01,000
所以其实还是刚才那个问题嘛就是刚才

1955
01:24:01,000 --> 01:24:03,000
unicode 这个 unification 它是带来

1956
01:24:03,000 --> 01:24:05,000
的后果就是在混排文字

1957
01:24:05,000 --> 01:24:07,000
混排文字的时候出现那种不可指

1958
01:24:07,000 --> 01:24:09,000
就是不能很方便的指定的情况下

1959
01:24:09,000 --> 01:24:11,000
理想情况下如果这三个的那个

1960
01:24:11,000 --> 01:24:13,000
互字的那个三个国家的不同写法

1961
01:24:13,000 --> 01:24:15,000
是没有统一的话其实你是

1962
01:24:15,000 --> 01:24:17,000
可以很方便的让系统自动去

1963
01:24:17,000 --> 01:24:19,000
fallback 到对应国家的

1964
01:24:19,000 --> 01:24:21,000
那个字上面去

1965
01:24:21,000 --> 01:24:23,000
但是话说回来如果真是混排系统的话你别说

1966
01:24:23,000 --> 01:24:25,000
是机器了连人都看不出来

1967
01:24:25,000 --> 01:24:27,000
比如说中国两个字

1968
01:24:27,000 --> 01:24:29,000
中国大陆的写法和日本的写法

1969
01:24:29,000 --> 01:24:31,000
是完全一模一样的

1970
01:24:31,000 --> 01:24:33,000
所以如果你单写中国两个字你不知道这是日文

1971
01:24:33,000 --> 01:24:35,000
还是中文而且你不知道它指的是中国

1972
01:24:35,000 --> 01:24:37,000
还是日本的意思也不一样

1973
01:24:37,000 --> 01:24:39,000
因为日本也有中国地区

1974
01:24:39,000 --> 01:24:41,000
什么意思日本

1975
01:24:41,000 --> 01:24:43,000
有一个地区就叫中国

1976
01:24:43,000 --> 01:24:45,000
所以这就是为什么

1977
01:24:45,000 --> 01:24:47,000
在在历史上日本

1978
01:24:47,000 --> 01:24:49,000
管中国他们喜欢叫支那

1979
01:24:49,000 --> 01:24:51,000
就是因为如果说中国的话

1980
01:24:51,000 --> 01:24:53,000
对他们就指的是

1981
01:24:53,000 --> 01:24:55,000
日本的中国地区就是管道

1982
01:24:55,000 --> 01:24:57,000
的附近那叫日本那是

1983
01:24:57,000 --> 01:24:59,000
日本的中国地区对

1984
01:24:59,000 --> 01:25:01,000
所以他们选择了这个法语词的法语

1985
01:25:01,000 --> 01:25:03,000
看起来比较洋气

1986
01:25:03,000 --> 01:25:05,000
支那不是法语词

1987
01:25:05,000 --> 01:25:07,000
应该是吧

1988
01:25:07,000 --> 01:25:09,000
它应该是那个 China 的

1989
01:25:09,000 --> 01:25:11,000
支那是从 Sina 来的吗

1990
01:25:11,000 --> 01:25:13,000
印度就是

1991
01:25:13,000 --> 01:25:15,000
是印度那边过来的

1992
01:25:15,000 --> 01:25:17,000
印度就是那个什么

1993
01:25:17,000 --> 01:25:19,000
Sino

1994
01:25:19,000 --> 01:25:21,000
现在英文也是我们 Sino 派

1995
01:25:21,000 --> 01:25:23,000
就是同源嘛对啊

1996
01:25:23,000 --> 01:25:25,000
Sino-American

1997
01:25:25,000 --> 01:25:27,000
Relationship 对吧

1998
01:25:27,000 --> 01:25:29,000
就是这个词源

1999
01:25:29,000 --> 01:25:31,000
就有时候看那个说支那

2000
01:25:31,000 --> 01:25:33,000
是一个什么歧视性的称呼

2001
01:25:33,000 --> 01:25:35,000
就觉得挺扯的你自己翻英文的时候你不写什么 Sino 什么什么

2002
01:25:35,000 --> 01:25:37,000
所以其实支那

2003
01:25:37,000 --> 01:25:39,000
这是一个历史上

2004
01:25:39,000 --> 01:25:41,000
就很常用的一个词

2005
01:25:41,000 --> 01:25:43,000
只是到因为到后面打仗了以后

2006
01:25:43,000 --> 01:25:45,000
才变成有歧视

2007
01:25:45,000 --> 01:25:47,000
原来它完全没有这个意思的

2008
01:25:47,000 --> 01:25:49,000
就没有歧视的明白明白

2009
01:25:49,000 --> 01:25:51,000
OK

2010
01:25:51,000 --> 01:25:53,000
所以的话就这个退回来讲就是你如果单纯写

2011
01:25:53,000 --> 01:25:55,000
中国这两个字的话

2012
01:25:55,000 --> 01:25:57,000
别说是机器了人也看不出来

2013
01:25:57,000 --> 01:25:59,000
就到底是中文还是日本

2014
01:25:59,000 --> 01:26:01,000
所以呢还是要

2015
01:26:01,000 --> 01:26:03,000
非常仔仔细细的

2016
01:26:03,000 --> 01:26:05,000
去 mark 对你是要给

2017
01:26:05,000 --> 01:26:07,000
他一个 locale 的这样一个

2018
01:26:07,000 --> 01:26:09,000
信息他才能

2019
01:26:09,000 --> 01:26:11,000
更加正确和精确的

2020
01:26:11,000 --> 01:26:13,000
显示这个

2021
01:26:13,000 --> 01:26:15,000
你所想要的结果就是其实是一个

2022
01:26:15,000 --> 01:26:17,000
信息处理的一种

2023
01:26:17,000 --> 01:26:19,000
架构或者哲学吧

2024
01:26:19,000 --> 01:26:21,000
这个其实大家可以去看那个小零件

2025
01:26:21,000 --> 01:26:23,000
写的那本 CJKV 的

2026
01:26:23,000 --> 01:26:25,000
信息处理的那本书

2027
01:26:25,000 --> 01:26:27,000
他应该算是一个这方面的

2028
01:26:27,000 --> 01:26:29,000
专家然后他应该方方面面

2029
01:26:29,000 --> 01:26:31,000
都会照顾到这些问题

2030
01:26:31,000 --> 01:26:33,000
然后告诉你在不同的

2031
01:26:33,000 --> 01:26:35,000
层面他们分别是用什么样的技术

2032
01:26:35,000 --> 01:26:37,000
去解决我们不可能依赖

2033
01:26:37,000 --> 01:26:39,000
unicode 这样一种技术方案

2034
01:26:39,000 --> 01:26:41,000
来解决所有的问题

2035
01:26:41,000 --> 01:26:43,000
所以所以刚才你们说那个

2036
01:26:43,000 --> 01:26:45,000
中文的中国和日文的

2037
01:26:45,000 --> 01:26:47,000
中国在 unicode 里面是不同的点位

2038
01:26:47,000 --> 01:26:49,000
是一样的

2039
01:26:49,000 --> 01:26:51,000
但是

2040
01:26:51,000 --> 01:26:53,000
写出来是一样的吗就不涉及这个问题

2041
01:26:53,000 --> 01:26:55,000
写出来完全没有对对没错

2042
01:26:55,000 --> 01:26:57,000
写出来完全没有

2043
01:26:57,000 --> 01:26:59,000
取决于你从谁的角度来看

2044
01:26:59,000 --> 01:27:01,000
假如你是一个

2045
01:27:01,000 --> 01:27:03,000
日本人写了中国两个字然后你

2046
01:27:03,000 --> 01:27:05,000
用中国来看可能看不出来

2047
01:27:05,000 --> 01:27:07,000
但如果你用一个日文字体的话你会

2048
01:27:07,000 --> 01:27:09,000
看到中国这两个字在

2049
01:27:09,000 --> 01:27:11,000
日文和中文字体里面有不一样的风格

2050
01:27:11,000 --> 01:27:13,000
所以多少还是能判断出来这是

2051
01:27:13,000 --> 01:27:15,000
一个

2052
01:27:15,000 --> 01:27:17,000
有可能你可以判断出来这是日文的

2053
01:27:17,000 --> 01:27:19,000
中国还是中国的

2054
01:27:19,000 --> 01:27:21,000
看语意了嘛就是看那个上下文在讲什么

2055
01:27:21,000 --> 01:27:23,000
你去看字形

2056
01:27:23,000 --> 01:27:25,000
他的意思是那个看 design

2057
01:27:25,000 --> 01:27:27,000
看那个形状

2058
01:27:27,000 --> 01:27:29,000
每个国家的字形的标准都有

2059
01:27:29,000 --> 01:27:31,000
多少的区别

2060
01:27:31,000 --> 01:27:33,000
那是 design 风格的问题

2061
01:27:33,000 --> 01:27:35,000
设计风格的问题

2062
01:27:35,000 --> 01:27:37,000
所以呢这个 CJK

2063
01:27:37,000 --> 01:27:39,000
统一汉字

2064
01:27:39,000 --> 01:27:41,000
它叫统一表意文字

2065
01:27:45,000 --> 01:27:47,000
所以后来就

2066
01:27:47,000 --> 01:27:49,000
当然字是不够用嘛

2067
01:27:49,000 --> 01:27:51,000
然后后面就扩展 A 区扩展 B 区

2068
01:27:51,000 --> 01:27:53,000
我们大陆说

2069
01:27:53,000 --> 01:27:55,000
扩展 ABCDE

2070
01:27:55,000 --> 01:27:57,000
现在已经有 E 区了嘛

2071
01:27:57,000 --> 01:27:59,000
台湾他们那边说扩展

2072
01:27:59,000 --> 01:28:01,000
甲乙丙丙物说法不一样

2073
01:28:01,000 --> 01:28:03,000
其实这些东西是一样的

2074
01:28:03,000 --> 01:28:05,000
现在有 F 区了是吗都已经到

2075
01:28:05,000 --> 01:28:07,000
字是越来越多越来越多

2076
01:28:07,000 --> 01:28:09,000
好像是有了

2077
01:28:09,000 --> 01:28:11,000
各种考古挖出来一些新字

2078
01:28:11,000 --> 01:28:13,000
又得加进去吗

2079
01:28:13,000 --> 01:28:15,000
对什么而且什么

2080
01:28:15,000 --> 01:28:17,000
小转大转之类的都可以加进去

2081
01:28:17,000 --> 01:28:19,000
对啊就是

2082
01:28:19,000 --> 01:28:21,000
所以呢

2083
01:28:21,000 --> 01:28:23,000
因为本身 unicode 它本身也一直都在更新嘛

2084
01:28:27,000 --> 01:28:29,000
至少

2085
01:28:29,000 --> 01:28:31,000
unicode 8.0 的话已经有

2086
01:28:31,000 --> 01:28:33,000
到扩展 E 区了

2087
01:28:33,000 --> 01:28:35,000
已经收进去了

2088
01:28:37,000 --> 01:28:39,000
所以以后我们不能说把这个什么扫进

2089
01:28:39,000 --> 01:28:41,000
固纸堆里面我们得扫进 unicode 这个垃圾坑里面

2090
01:28:41,000 --> 01:28:43,000
好

2091
01:28:43,000 --> 01:28:45,000
这是说到 unicode 这个字的问题

2092
01:28:45,000 --> 01:28:47,000
然后 unicode 的编码问题呢

2093
01:28:47,000 --> 01:28:49,000
这个坑就大了

2094
01:28:49,000 --> 01:28:51,000
之前我吴涛在那个

2095
01:28:51,000 --> 01:28:53,000
那期单口节目里面已经大概讲过了

2096
01:28:53,000 --> 01:28:55,000
这里要不要再重申一遍

2097
01:28:55,000 --> 01:28:57,000
为什么你们都记得那期我讲了什么

2098
01:28:57,000 --> 01:28:59,000
我现在完全不记得自己那一期讲

2099
01:28:59,000 --> 01:29:01,000
未录这节目我还特地翻出来听了一遍

2100
01:29:01,000 --> 01:29:03,000
结果听到后面居然是情绪人怎么找女朋友

2101
01:29:03,000 --> 01:29:05,000
有什么关系

2102
01:29:05,000 --> 01:29:07,000
我现在完全不记得自己那一期讲

2103
01:29:07,000 --> 01:29:09,000
未录这节目我还特地翻出来听了一遍

2104
01:29:09,000 --> 01:29:11,000
其实我也写了一篇很简单的一个博客

2105
01:29:11,000 --> 01:29:13,000
其实我也写了一篇很简单的一个博客

2106
01:29:13,000 --> 01:29:15,000
大概记录一下我当时学习坑的结果

2107
01:29:15,000 --> 01:29:17,000
大概记录一下我当时学习坑的结果

2108
01:29:17,000 --> 01:29:19,000
大概记录一下我当时学习坑的结果

2109
01:29:19,000 --> 01:29:21,000
这个编码方式的 UTF 8 和 UTF 16 什么什么

2110
01:29:21,000 --> 01:29:23,000
其实这个坑还蛮多的

2111
01:29:23,000 --> 01:29:25,000
这个我可以讲一下

2112
01:29:25,000 --> 01:29:27,000
对

2113
01:29:27,000 --> 01:29:29,000
最开始的时候其实没有 UTF 16 的

2114
01:29:29,000 --> 01:29:31,000
最开始的时候叫 UCS 2

2115
01:29:31,000 --> 01:29:33,000
对

2116
01:29:33,000 --> 01:29:35,000
最开始的时候其实没有 UTF 16 的

2117
01:29:35,000 --> 01:29:37,000
最开始的时候其实没有 UTF 16 的

2118
01:29:37,000 --> 01:29:39,000
然后叫 UCS 2

2119
01:29:39,000 --> 01:29:41,000
对,没错

2120
01:29:41,000 --> 01:29:43,000
这个坑也是一个历史遗留问题

2121
01:29:43,000 --> 01:29:45,000
然后 UCS 2

2122
01:29:45,000 --> 01:29:47,000
其实它只是编码

2123
01:29:47,000 --> 01:29:49,000
刚才讲的那个叫做 BMP

2124
01:29:49,000 --> 01:29:51,000
就是基本平面

2125
01:29:51,000 --> 01:29:53,000
就是一共有 6536 个点

2126
01:29:53,000 --> 01:29:55,000
对吧

2127
01:29:55,000 --> 01:29:57,000
然后就很简单

2128
01:29:57,000 --> 01:29:59,000
没有任何额外的东西

2129
01:29:59,000 --> 01:30:01,000
然后 UCS 2

2130
01:30:01,000 --> 01:30:03,000
和 UTF 16 的区别

2131
01:30:03,000 --> 01:30:05,000
是什么呢

2132
01:30:05,000 --> 01:30:07,000
UTF 16 里面其实是等于 UCS 2

2133
01:30:07,000 --> 01:30:09,000
然后加了那个

2134
01:30:09,000 --> 01:30:11,000
那个叫做 Serogate Parallel

2135
01:30:11,000 --> 01:30:13,000
Serogate Parallel 中文叫什么

2136
01:30:13,000 --> 01:30:15,000
代理,对

2137
01:30:15,000 --> 01:30:17,000
对,我一直不知道中文叫什么

2138
01:30:17,000 --> 01:30:19,000
对,我一直不知道中文叫什么

2139
01:30:19,000 --> 01:30:21,000
或者这么理解吧

2140
01:30:21,000 --> 01:30:23,000
UCS 2 可以大致等同于

2141
01:30:23,000 --> 01:30:25,000
这个 GB 2312 对于中文的概念

2142
01:30:25,000 --> 01:30:27,000
因为它就是一个定常的

2143
01:30:27,000 --> 01:30:29,000
没有任何特殊东西

2144
01:30:29,000 --> 01:30:31,000
就只是那么多个点位而已

2145
01:30:31,000 --> 01:30:33,000
但是因为当时

2146
01:30:33,000 --> 01:30:35,000
已经突破了基本平面了

2147
01:30:35,000 --> 01:30:37,000
对吧

2148
01:30:37,000 --> 01:30:39,000
要想办法表达 6536 个点之外的东西

2149
01:30:39,000 --> 01:30:41,000
要想办法表达 6536 个点之外的东西

2150
01:30:41,000 --> 01:30:43,000
怎么办

2151
01:30:43,000 --> 01:30:45,000
想出这么一个 hack

2152
01:30:45,000 --> 01:30:47,000
就是说在基本平面里面

2153
01:30:47,000 --> 01:30:49,000
扣出了一小段

2154
01:30:49,000 --> 01:30:51,000
大概是

2155
01:30:51,000 --> 01:30:53,000
16 进制编码

2156
01:30:53,000 --> 01:30:55,000
是 D 800 到 DFF

2157
01:30:55,000 --> 01:30:57,000
这几个字符

2158
01:30:57,000 --> 01:30:59,000
是用作 Serogate Parallel

2159
01:30:59,000 --> 01:31:01,000
Serogate Parallel 是什么意思

2160
01:31:01,000 --> 01:31:03,000
Serogate Parallel 是什么意思

2161
01:31:03,000 --> 01:31:05,000
等于是从两个字节的

2162
01:31:05,000 --> 01:31:07,000
一个定常编码里面

2163
01:31:07,000 --> 01:31:09,000
Markup 就是刚才讲的

2164
01:31:09,000 --> 01:31:11,000
做标记

2165
01:31:11,000 --> 01:31:13,000
对,做了一个特殊标记

2166
01:31:13,000 --> 01:31:15,000
从这些字符之间的东西

2167
01:31:15,000 --> 01:31:17,000
你要进行一个特殊处理

2168
01:31:17,000 --> 01:31:19,000
使得我们可以超出基本平面

2169
01:31:19,000 --> 01:31:21,000
6536 个字符的限制

2170
01:31:21,000 --> 01:31:23,000
这里是 UTF 16

2171
01:31:23,000 --> 01:31:25,000
它当时做出这个编码方案

2172
01:31:25,000 --> 01:31:27,000
其实还是为了省

2173
01:31:27,000 --> 01:31:29,000
资源对吧

2174
01:31:29,000 --> 01:31:31,000
对,因为是这样

2175
01:31:31,000 --> 01:31:33,000
如果当时有一个

2176
01:31:33,000 --> 01:31:35,000
刚才讲的 UCS-2 是一个非常简单的编码方式

2177
01:31:35,000 --> 01:31:37,000
其实对应的还有一个叫 UCS-4

2178
01:31:37,000 --> 01:31:39,000
就是

2179
01:31:39,000 --> 01:31:41,000
对,就是四个字节,32 位的东西

2180
01:31:41,000 --> 01:31:43,000
然后 UCS-4

2181
01:31:43,000 --> 01:31:45,000
本质上就是 UTF 32

2182
01:31:45,000 --> 01:31:47,000
它是一个

2183
01:31:47,000 --> 01:31:49,000
固定的

2184
01:31:49,000 --> 01:31:51,000
对,就是定常编码

2185
01:31:51,000 --> 01:31:53,000
就很浪费

2186
01:31:53,000 --> 01:31:55,000
一个字母 A 的话也要用那个

2187
01:31:55,000 --> 01:31:57,000
特别浪费

2188
01:31:57,000 --> 01:31:59,000
对,所以后来权衡一下

2189
01:31:59,000 --> 01:32:01,000
我们还是用内部

2190
01:32:01,000 --> 01:32:03,000
还是用 UTF 16

2191
01:32:03,000 --> 01:32:05,000
用 UCS-2

2192
01:32:05,000 --> 01:32:07,000
定常的比较好

2193
01:32:07,000 --> 01:32:09,000
但是要为了解决那个超出基本平面的问题

2194
01:32:09,000 --> 01:32:11,000
所以加了这个

2195
01:32:11,000 --> 01:32:13,000
Saraget pair 这种 hack

2196
01:32:13,000 --> 01:32:15,000
使得 UCS-2 变成 UTF 16

2197
01:32:15,000 --> 01:32:17,000
这么一个过程

2198
01:32:17,000 --> 01:32:19,000
要看那个标记,有了这个标记以后

2199
01:32:19,000 --> 01:32:21,000
我就要用另外一个了对吧

2200
01:32:21,000 --> 01:32:23,000
就是你搜

2201
01:32:23,000 --> 01:32:25,000
搜那个 UCS-2 里面

2202
01:32:25,000 --> 01:32:27,000
那段是没有定义意义的

2203
01:32:27,000 --> 01:32:29,000
人为规定说

2204
01:32:29,000 --> 01:32:31,000
如果你看到有这种

2205
01:32:31,000 --> 01:32:33,000
Saraget pair 的字符

2206
01:32:33,000 --> 01:32:35,000
就知道你这个是 UTF 16

2207
01:32:35,000 --> 01:32:37,000
所以这些 Saraget pair 里面东西

2208
01:32:37,000 --> 01:32:39,000
你要特殊处理

2209
01:32:39,000 --> 01:32:41,000
反正也是一个很大

2210
01:32:41,000 --> 01:32:43,000
很大的坑

2211
01:32:43,000 --> 01:32:45,000
然后说到这个定常编码

2212
01:32:45,000 --> 01:32:47,000
就 UNIQL 定常编码就会牵涉到一个

2213
01:32:47,000 --> 01:32:49,000
所谓的这个顺序的问题

2214
01:32:49,000 --> 01:32:51,000
这又是一个更大的坑

2215
01:32:51,000 --> 01:32:53,000
深坑

2216
01:32:53,000 --> 01:32:55,000
这其实是那个

2217
01:32:55,000 --> 01:32:57,000
非单字节编码都要牵涉到

2218
01:32:57,000 --> 01:32:59,000
对啊,非单字节编码都要有这个

2219
01:32:59,000 --> 01:33:01,000
很明显的问题,这个不光是在

2220
01:33:01,000 --> 01:33:03,000
字符编码上,其实在计算机的

2221
01:33:03,000 --> 01:33:05,000
这个数字的表达上也会有这个问题

2222
01:33:05,000 --> 01:33:07,000
比如说我们常说计算机一个

2223
01:33:07,000 --> 01:33:09,000
一个字节,最小单位嘛

2224
01:33:09,000 --> 01:33:11,000
是八个位对吧

2225
01:33:11,000 --> 01:33:13,000
但是两个字节就是你表示 16 位

2226
01:33:13,000 --> 01:33:15,000
整数的时候,也会牵涉到哪个是高位

2227
01:33:15,000 --> 01:33:17,000
哪个是低位,就是哪边是高位哪边是低位的问题嘛

2228
01:33:17,000 --> 01:33:19,000
对,然后

2229
01:33:19,000 --> 01:33:21,000
就会所谓的

2230
01:33:21,000 --> 01:33:23,000
我们就会牵涉到那个叫做

2231
01:33:23,000 --> 01:33:25,000
indium,indium 中文翻成什么

2232
01:33:25,000 --> 01:33:27,000
端吧

2233
01:33:27,000 --> 01:33:29,000
就翻成

2234
01:33:29,000 --> 01:33:31,000
一般那个就是

2235
01:33:31,000 --> 01:33:33,000
对,我们一般管那个叫端式

2236
01:33:33,000 --> 01:33:35,000
就大端和大尾和小尾

2237
01:33:35,000 --> 01:33:37,000
这个是个章节名字

2238
01:33:37,000 --> 01:33:39,000
我经常说大头小头

2239
01:33:39,000 --> 01:33:41,000
对,它其实表示的就是

2240
01:33:41,000 --> 01:33:43,000
大头派小头派嘛,没错

2241
01:33:43,000 --> 01:33:45,000
原作是指这个嘛

2242
01:33:45,000 --> 01:33:47,000
就在格列夫邮寄的原作里面是指这个

2243
01:33:47,000 --> 01:33:49,000
小人国在打内战的时候

2244
01:33:49,000 --> 01:33:51,000
他其实是使用那个意思

2245
01:33:51,000 --> 01:33:53,000
说吃鸡蛋要从大头开始敲

2246
01:33:53,000 --> 01:33:55,000
还是从小头开始敲

2247
01:33:55,000 --> 01:33:57,000
然后因此还发过六次叛乱

2248
01:33:57,000 --> 01:33:59,000
对对对,indium 就是从那个

2249
01:33:59,000 --> 01:34:01,000
鸡蛋的那个两头那个地方来的吧

2250
01:34:01,000 --> 01:34:03,000
对啊,他用了那个点

2251
01:34:03,000 --> 01:34:05,000
对对对

2252
01:34:05,000 --> 01:34:07,000
然后这个坑就

2253
01:34:07,000 --> 01:34:09,000
比较深了,就说简单来讲

2254
01:34:09,000 --> 01:34:11,000
就是那头,就是对于一个数字来讲

2255
01:34:11,000 --> 01:34:13,000
比如说对一个 16 位的

2256
01:34:13,000 --> 01:34:15,000
整数来讲,你觉得第一就是

2257
01:34:15,000 --> 01:34:17,000
从左到右数,左边是高位呢

2258
01:34:17,000 --> 01:34:19,000
还是右边是高位,对吧

2259
01:34:19,000 --> 01:34:21,000
没错吧,我想想

2260
01:34:21,000 --> 01:34:23,000
对对对

2261
01:34:23,000 --> 01:34:25,000
就是大端式的话

2262
01:34:25,000 --> 01:34:27,000
就是左边是高位,小端式

2263
01:34:27,000 --> 01:34:29,000
就是右边是高位

2264
01:34:29,000 --> 01:34:31,000
但是在字符集的时候这个坑就

2265
01:34:31,000 --> 01:34:33,000
又多了,就会牵涉到,因为

2266
01:34:33,000 --> 01:34:35,000
我想想怎么表述这个

2267
01:34:35,000 --> 01:34:37,000
东西啊,就是首先你要看

2268
01:34:37,000 --> 01:34:39,000
他的这个字节

2269
01:34:39,000 --> 01:34:41,000
的组合是怎样分成一个

2270
01:34:41,000 --> 01:34:43,000
单元的,然后他在每个单元的内部

2271
01:34:43,000 --> 01:34:45,000
会有一个端式的这个

2272
01:34:45,000 --> 01:34:47,000
因为有这么一个问题

2273
01:34:47,000 --> 01:34:49,000
可能要解释一下,就说在数字

2274
01:34:49,000 --> 01:34:51,000
上面我们写一般是说

2275
01:34:51,000 --> 01:34:53,000
是从左往右写

2276
01:34:53,000 --> 01:34:55,000
对吧,我们正常的

2277
01:34:55,000 --> 01:34:57,000
是个数学顺序,但是在表达

2278
01:34:57,000 --> 01:34:59,000
那个如果是位的话

2279
01:34:59,000 --> 01:35:01,000
如果你是小端,大端小端

2280
01:35:01,000 --> 01:35:03,000
就某一端的时候他是最右边

2281
01:35:03,000 --> 01:35:05,000
那个位开始起的,因为你想

2282
01:35:05,000 --> 01:35:07,000
就是低位高位的话

2283
01:35:07,000 --> 01:35:09,000
各位数是在右边嘛,然后越

2284
01:35:09,000 --> 01:35:11,000
高位的话是越往左写嘛

2285
01:35:11,000 --> 01:35:13,000
越往左边的是越高位嘛

2286
01:35:15,000 --> 01:35:17,000
对,这个也是一个很深的一个

2287
01:35:17,000 --> 01:35:19,000
坑,经常

2288
01:35:19,000 --> 01:35:21,000
我搞不清楚这里面到底是哪个

2289
01:35:21,000 --> 01:35:23,000
是哪个原理啊,就是

2290
01:35:23,000 --> 01:35:25,000
你想如果我们把那个位

2291
01:35:25,000 --> 01:35:27,000
作为一个图形化的方式表达在眼前

2292
01:35:27,000 --> 01:35:29,000
的话,你发现他其实是从

2293
01:35:29,000 --> 01:35:31,000
右边开始

2294
01:35:31,000 --> 01:35:33,000
增加的

2295
01:35:33,000 --> 01:35:35,000
你懂我的意思吗,就是比如说

2296
01:35:35,000 --> 01:35:37,000
0、1,然后

2297
01:35:37,000 --> 01:35:39,000
10,然后 11

2298
01:35:39,000 --> 01:35:41,000
100,110

2299
01:35:41,000 --> 01:35:43,000
这样的方式,对吧

2300
01:35:43,000 --> 01:35:45,000
我就这样,就说出来

2301
01:35:45,000 --> 01:35:47,000
好,大家肯定晕了

2302
01:35:47,000 --> 01:35:49,000
Anyway,没错

2303
01:35:49,000 --> 01:35:51,000
得在脑中化一下

2304
01:35:51,000 --> 01:35:53,000
对,其实我们只是要认可

2305
01:35:53,000 --> 01:35:55,000
这个世界上事实上存在

2306
01:35:55,000 --> 01:35:57,000
了这样两种顺序,那么这两种

2307
01:35:57,000 --> 01:35:59,000
顺序实际上是由计算机

2308
01:35:59,000 --> 01:36:01,000
这个体系的硬件架构

2309
01:36:01,000 --> 01:36:03,000
所决定的,一派架构

2310
01:36:03,000 --> 01:36:05,000
它就是以这个小端式来保存

2311
01:36:05,000 --> 01:36:07,000
它的数据,而另一种架构

2312
01:36:07,000 --> 01:36:09,000
就是以大端式来保存

2313
01:36:09,000 --> 01:36:11,000
它的数据,对,然后这个

2314
01:36:11,000 --> 01:36:13,000
在我们常用的计算机里面

2315
01:36:13,000 --> 01:36:15,000
Intel 架构,就是我们现在用的 X 86

2316
01:36:15,000 --> 01:36:17,000
它是一个小端设计的

2317
01:36:17,000 --> 01:36:19,000
对,但是

2318
01:36:19,000 --> 01:36:21,000
在互联网上,我们

2319
01:36:21,000 --> 01:36:23,000
基本上所有的通讯协议

2320
01:36:23,000 --> 01:36:25,000
以及网络标准,全部都是以大端

2321
01:36:25,000 --> 01:36:27,000
来设计的,所以坑

2322
01:36:27,000 --> 01:36:29,000
就从这里开始了

2323
01:36:29,000 --> 01:36:31,000
没错,这是不是跟早期的

2324
01:36:31,000 --> 01:36:33,000
服务器用的那个架构

2325
01:36:33,000 --> 01:36:35,000
有关?因为早期的那个

2326
01:36:35,000 --> 01:36:37,000
做互联网的服务器都不是

2327
01:36:37,000 --> 01:36:39,000
Intel 的处理器,都是一些其他

2328
01:36:39,000 --> 01:36:41,000
那些现在已经销声匿迹的

2329
01:36:41,000 --> 01:36:43,000
那些处理器

2330
01:36:43,000 --> 01:36:45,000
Unex 的其实是吧

2331
01:36:45,000 --> 01:36:47,000
不,那个是操作系统的,那个还没有

2332
01:36:47,000 --> 01:36:49,000
这个是一个硬件,这很低层的

2333
01:36:49,000 --> 01:36:51,000
然后,对,早期

2334
01:36:51,000 --> 01:36:53,000
的很多那个做互联网的服务器

2335
01:36:53,000 --> 01:36:55,000
还有包括那些开发

2336
01:36:55,000 --> 01:36:57,000
就是最开始做什么 Apa 那些

2337
01:36:57,000 --> 01:36:59,000
的用的机器,他们其实很多都是大端的

2338
01:36:59,000 --> 01:37:01,000
就是 Big Ending 的,所以就他们

2339
01:37:01,000 --> 01:37:03,000
用的那些机器变成了一个正统

2340
01:37:03,000 --> 01:37:05,000
然后反而现在我们做小端的

2341
01:37:05,000 --> 01:37:07,000
那个 Intel 的处理器到时候

2342
01:37:07,000 --> 01:37:09,000
就为什么你写 C 程序的时候,还要有一个

2343
01:37:09,000 --> 01:37:11,000
什么

2344
01:37:11,000 --> 01:37:13,000
HOST H 2 N

2345
01:37:13,000 --> 01:37:15,000
H 2 L

2346
01:37:15,000 --> 01:37:17,000
和 L 2 H 就是

2347
01:37:17,000 --> 01:37:19,000
转换网络的端

2348
01:37:19,000 --> 01:37:21,000
和这个本地的

2349
01:37:21,000 --> 01:37:23,000
HOST 2 LOCAL 是吧?对对对

2350
01:37:23,000 --> 01:37:25,000
对,那个小端式

2351
01:37:25,000 --> 01:37:27,000
是 VAX 和 Intel 的架构

2352
01:37:27,000 --> 01:37:29,000
大端式是摩托罗拉和 SUN 的那个

2353
01:37:29,000 --> 01:37:31,000
架构,没错没错

2354
01:37:31,000 --> 01:37:33,000
Spark 那些东西

2355
01:37:33,000 --> 01:37:35,000
Anyway,说回这个

2356
01:37:35,000 --> 01:37:37,000
就在这个字体,这个 UTF 8

2357
01:37:37,000 --> 01:37:39,000
编码,UTF 16 和 UTF 32

2358
01:37:39,000 --> 01:37:41,000
编码也有这个同样的问题,就是说

2359
01:37:41,000 --> 01:37:43,000
第一个字节,到底代表是

2360
01:37:43,000 --> 01:37:45,000
小头还是大头

2361
01:37:45,000 --> 01:37:47,000
所以他要做标注

2362
01:37:47,000 --> 01:37:49,000
对吧,对

2363
01:37:49,000 --> 01:37:51,000
所以为了就是,他们就没有说

2364
01:37:51,000 --> 01:37:53,000
我们大家都规定一律是

2365
01:37:53,000 --> 01:37:55,000
像网络上大家都规定

2366
01:37:55,000 --> 01:37:57,000
说,因为在所有的这个 RFC 的

2367
01:37:57,000 --> 01:37:59,000
规范里面,只要设计网络的

2368
01:37:59,000 --> 01:38:01,000
都是用的那个大端设计嘛

2369
01:38:01,000 --> 01:38:03,000
但是在文本上面,其实并没有这么一个

2370
01:38:03,000 --> 01:38:05,000
统一,就是,约定

2371
01:38:05,000 --> 01:38:07,000
俗成的一个规定,所以就两种都

2372
01:38:07,000 --> 01:38:09,000
存在,所以说存在说,叫做 UTF 16

2373
01:38:09,000 --> 01:38:11,000
就是 LE 和

2374
01:38:11,000 --> 01:38:13,000
UTF 16

2375
01:38:13,000 --> 01:38:15,000
BE

2376
01:38:15,000 --> 01:38:17,000
对,就两种不同的表达方式

2377
01:38:17,000 --> 01:38:19,000
这个存储方式,所以你们看到

2378
01:38:19,000 --> 01:38:21,000
很多这个

2379
01:38:21,000 --> 01:38:23,000
Windows 上面的那个

2380
01:38:23,000 --> 01:38:25,000
那个文本

2381
01:38:25,000 --> 01:38:27,000
编辑器吧,Text Editor

2382
01:38:27,000 --> 01:38:29,000
记事本

2383
01:38:29,000 --> 01:38:31,000
对对对,记事本

2384
01:38:31,000 --> 01:38:33,000
对,它会给你这个选项

2385
01:38:33,000 --> 01:38:35,000
然后,因为存在这个

2386
01:38:35,000 --> 01:38:37,000
BE 和 LE 的这个问题呢

2387
01:38:37,000 --> 01:38:39,000
就是很多人

2388
01:38:39,000 --> 01:38:41,000
就为了标志说这个文本到底

2389
01:38:41,000 --> 01:38:43,000
是大端还是小端的,我们

2390
01:38:43,000 --> 01:38:45,000
有一个人,规定就是说用 UTF 16

2391
01:38:45,000 --> 01:38:47,000
编码的文本,会在他的

2392
01:38:47,000 --> 01:38:49,000
第一个字符

2393
01:38:49,000 --> 01:38:51,000
应该是,不,填两个字符

2394
01:38:51,000 --> 01:38:53,000
会放一个特殊的

2395
01:38:53,000 --> 01:38:55,000
标志,叫做 BOM

2396
01:38:55,000 --> 01:38:57,000
Bite Order Mark

2397
01:38:57,000 --> 01:38:59,000
这叫什么,字序

2398
01:38:59,000 --> 01:39:01,000
字节序列标志

2399
01:39:01,000 --> 01:39:03,000
标志,我这个序列

2400
01:39:03,000 --> 01:39:05,000
是大头还是小头

2401
01:39:05,000 --> 01:39:07,000
对对对,然后这个

2402
01:39:07,000 --> 01:39:09,000
BOM 其实是一个两个字节

2403
01:39:09,000 --> 01:39:11,000
的特殊

2404
01:39:11,000 --> 01:39:13,000
它是很取巧了,因为

2405
01:39:13,000 --> 01:39:15,000
它其实是

2406
01:39:15,000 --> 01:39:17,000
UNICODE 的那个 FEFF

2407
01:39:17,000 --> 01:39:19,000
这个字,但是这个字呢

2408
01:39:19,000 --> 01:39:21,000
叫 ZERO WITH NO BREAK SPACE

2409
01:39:23,000 --> 01:39:25,000
就是零宽的一个

2410
01:39:25,000 --> 01:39:27,000
不间断的

2411
01:39:27,000 --> 01:39:29,000
不可分割的空白

2412
01:39:29,000 --> 01:39:31,000
所以呢,表面

2413
01:39:31,000 --> 01:39:33,000
你看不出来有这个字

2414
01:39:33,000 --> 01:39:35,000
这是一个非常

2415
01:39:35,000 --> 01:39:37,000
很容易把人坑死的坑

2416
01:39:37,000 --> 01:39:39,000
就是因为你看不到这个字,你必须用一个

2417
01:39:39,000 --> 01:39:41,000
能够看见看不到

2418
01:39:41,000 --> 01:39:43,000
的东西的编辑机来看

2419
01:39:43,000 --> 01:39:45,000
才能看到这个东西,当时想出

2420
01:39:45,000 --> 01:39:47,000
这个招的也应该拖出这个卡了

2421
01:39:47,000 --> 01:39:49,000
对的,但是它

2422
01:39:49,000 --> 01:39:51,000
当时就是因为这个字看不见

2423
01:39:51,000 --> 01:39:53,000
所以才能用来做这个 HACK

2424
01:39:53,000 --> 01:39:55,000
对,它当时觉得自己这个

2425
01:39:55,000 --> 01:39:57,000
HACK 还挺技巧的

2426
01:39:57,000 --> 01:39:59,000
但是现在

2427
01:39:59,000 --> 01:40:01,000
的这个 UNICODE 规范

2428
01:40:01,000 --> 01:40:03,000
它已经不推荐你再把

2429
01:40:03,000 --> 01:40:05,000
这个 BOM 当成这个零宽的

2430
01:40:05,000 --> 01:40:07,000
空格来用了,它只推荐

2431
01:40:07,000 --> 01:40:09,000
你用来标记这个字节式

2432
01:40:09,000 --> 01:40:11,000
现在不是

2433
01:40:11,000 --> 01:40:13,000
应该用 UTF 吧,为什么

2434
01:40:13,000 --> 01:40:15,000
还有人推荐 UTF 16

2435
01:40:15,000 --> 01:40:17,000
对于 UNICODE 它这个

2436
01:40:17,000 --> 01:40:19,000
规范书来说,它认为

2437
01:40:19,000 --> 01:40:21,000
这个字节式的标记,即使是

2438
01:40:21,000 --> 01:40:23,000
对于 UTF 8 的编码

2439
01:40:23,000 --> 01:40:25,000
也有一定的作用,因为它能明确的

2440
01:40:25,000 --> 01:40:27,000
告诉你这个文本处理的软件

2441
01:40:27,000 --> 01:40:29,000
你这个就是用 UNICODE 编码

2442
01:40:29,000 --> 01:40:31,000
好吧,不需要

2443
01:40:31,000 --> 01:40:33,000
UTF 8 不需要这个东西啊

2444
01:40:33,000 --> 01:40:35,000
怎么说呢,就是

2445
01:40:35,000 --> 01:40:37,000
UNICODE 它

2446
01:40:37,000 --> 01:40:39,000
是这样号称的啦,就是说

2447
01:40:39,000 --> 01:40:41,000
即使你这个用 UTF 8 这样

2448
01:40:41,000 --> 01:40:43,000
没有端式的编码方式来编码

2449
01:40:43,000 --> 01:40:45,000
那么我如果看到了

2450
01:40:45,000 --> 01:40:47,000
这个 BOM 的这个标记位

2451
01:40:47,000 --> 01:40:49,000
那么我可以提前就知道

2452
01:40:49,000 --> 01:40:51,000
这些文本一定是用 UNICODE

2453
01:40:51,000 --> 01:40:53,000
的某一种编码方案来编码

2454
01:40:53,000 --> 01:40:55,000
你就不用去考虑

2455
01:40:55,000 --> 01:40:57,000
别的编码方案

2456
01:40:57,000 --> 01:40:59,000
那这里会设计一个问题

2457
01:40:59,000 --> 01:41:01,000
就是说在其他所有编码

2458
01:41:01,000 --> 01:41:03,000
方案里面都没有出现过 BOM

2459
01:41:03,000 --> 01:41:05,000
这个东西是吧

2460
01:41:05,000 --> 01:41:07,000
就不会在开头,或者说

2461
01:41:07,000 --> 01:41:09,000
它做了一个约定,一旦在开头出现这个

2462
01:41:09,000 --> 01:41:11,000
标记位的时候,我就认为

2463
01:41:11,000 --> 01:41:13,000
它是 UNICODE 编码的一个方案

2464
01:41:13,000 --> 01:41:15,000
它能做出这个约定,它肯定是说

2465
01:41:15,000 --> 01:41:17,000
如果市面上所有现存用过的这个编码方案

2466
01:41:17,000 --> 01:41:19,000
不管是日本的韩国的

2467
01:41:19,000 --> 01:41:21,000
还是澳洲的也好

2468
01:41:21,000 --> 01:41:23,000
它的都不会出现这么一个

2469
01:41:23,000 --> 01:41:25,000
这么一个组合

2470
01:41:25,000 --> 01:41:27,000
就是这个 FE,FF 的位

2471
01:41:27,000 --> 01:41:29,000
对,那应该是

2472
01:41:29,000 --> 01:41:31,000
因为这个字符本身

2473
01:41:31,000 --> 01:41:33,000
作为一个非标记字符来用

2474
01:41:33,000 --> 01:41:35,000
它就是一个很罕见的

2475
01:41:35,000 --> 01:41:37,000
它是一个零宽的这样一个

2476
01:41:37,000 --> 01:41:39,000
空格,如果你正确的使用这个

2477
01:41:39,000 --> 01:41:41,000
空格的话,它是不会出现在

2478
01:41:41,000 --> 01:41:43,000
这个一个字符串的开头

2479
01:41:43,000 --> 01:41:45,000
因为它的语意决定了

2480
01:41:45,000 --> 01:41:47,000
它一定是出现在一些

2481
01:41:47,000 --> 01:41:49,000
字符串的中间的

2482
01:41:49,000 --> 01:41:51,000
OK, makes sense

2483
01:41:51,000 --> 01:41:53,000
无论如何,这还是一个 bad idea

2484
01:41:55,000 --> 01:41:57,000
它的存在就是一个 bad idea

2485
01:41:57,000 --> 01:41:59,000
所以那个 Windows 记事本

2486
01:41:59,000 --> 01:42:01,000
你在保存这个文件的时候

2487
01:42:01,000 --> 01:42:03,000
它有个选项叫 UNICODE

2488
01:42:03,000 --> 01:42:05,000
然后又有个选项叫

2489
01:42:05,000 --> 01:42:07,000
UNICODE BIG END

2490
01:42:07,000 --> 01:42:09,000
大家会想什么鬼

2491
01:42:09,000 --> 01:42:11,000
因为它是第一个选项

2492
01:42:11,000 --> 01:42:13,000
UNICODE 它就是默认的说

2493
01:42:13,000 --> 01:42:15,000
这个就是 UTF 的 16

2494
01:42:15,000 --> 01:42:17,000
而且是默认是小头的

2495
01:42:17,000 --> 01:42:19,000
所以它还会有另外一个选项

2496
01:42:19,000 --> 01:42:21,000
是 UNICODE BIG END

2497
01:42:21,000 --> 01:42:23,000
这个用大头来保存

2498
01:42:23,000 --> 01:42:25,000
所以这也是一个坑对不对

2499
01:42:25,000 --> 01:42:27,000
因为你选 UNICODE,UNICODE 并不是一个编码

2500
01:42:27,000 --> 01:42:29,000
对啊,而且它还有第三个选项

2501
01:42:29,000 --> 01:42:31,000
是 UTF 8

2502
01:42:31,000 --> 01:42:33,000
这其实也是,如果你要这样想

2503
01:42:33,000 --> 01:42:35,000
这是 UNICODE 的编码方式而已嘛

2504
01:42:35,000 --> 01:42:37,000
它把两个完全不在

2505
01:42:37,000 --> 01:42:39,000
一个逻辑层面的概念全部放在一堆

2506
01:42:39,000 --> 01:42:41,000
然后揉成了一堆

2507
01:42:41,000 --> 01:42:43,000
对,它这个菜单显示的

2508
01:42:43,000 --> 01:42:45,000
很奇怪,就是它不应该这样表述

2509
01:42:45,000 --> 01:42:47,000
对,它的这个术语比较乱了

2510
01:42:47,000 --> 01:42:49,000
所以把那个什么

2511
01:42:49,000 --> 01:42:51,000
做记事本的那个产品经理脱手去砍了

2512
01:42:51,000 --> 01:42:53,000
你今天要砍多少人呢

2513
01:42:55,000 --> 01:42:57,000
不合逻辑的通通砍死了

2514
01:42:59,000 --> 01:43:01,000
所以 Windows 记事本它

2515
01:43:01,000 --> 01:43:03,000
保存了以后呢

2516
01:43:03,000 --> 01:43:05,000
这个 BOMB 大家都会有是吧

2517
01:43:05,000 --> 01:43:07,000
写标记了以后

2518
01:43:07,000 --> 01:43:09,000
不会,只会用

2519
01:43:09,000 --> 01:43:11,000
在一个正常

2520
01:43:11,000 --> 01:43:13,000
符合逻辑的编辑机里面

2521
01:43:13,000 --> 01:43:15,000
它应该只会用 UTF 16

2522
01:43:15,000 --> 01:43:17,000
或者 UTF 32

2523
01:43:17,000 --> 01:43:19,000
好像是规定的 NDN 顺序

2524
01:43:19,000 --> 01:43:21,000
它也有两种顺序可以用的

2525
01:43:21,000 --> 01:43:23,000
就是说 16 和 32 的时候

2526
01:43:23,000 --> 01:43:25,000
所以这就是为什么 Windows 它会

2527
01:43:25,000 --> 01:43:27,000
在那个 UNICODE 上面

2528
01:43:27,000 --> 01:43:29,000
加一个

2529
01:43:29,000 --> 01:43:31,000
带不带 BE 这个标记的吃分了

2530
01:43:31,000 --> 01:43:33,000
不,但是

2531
01:43:33,000 --> 01:43:35,000
它里面不能选 UTF 32

2532
01:43:35,000 --> 01:43:37,000
对,它的产品逻辑是说

2533
01:43:37,000 --> 01:43:39,000
当我标明了这个 BOMB 的时候

2534
01:43:39,000 --> 01:43:41,000
它有可能是用 UTF 16 编码

2535
01:43:41,000 --> 01:43:43,000
也有可能是用 32 编码

2536
01:43:43,000 --> 01:43:45,000
所以它就用 UNICODE 来指代这两种

2537
01:43:47,000 --> 01:43:49,000
然后同时呢

2538
01:43:49,000 --> 01:43:51,000
它认为 UTF 8 是不需要这个的

2539
01:43:51,000 --> 01:43:53,000
所以它说 UTF 8 的时候呢

2540
01:43:53,000 --> 01:43:55,000
只用一个标准的编码方案

2541
01:43:55,000 --> 01:43:57,000
来指代它现在的这个文件状态

2542
01:43:59,000 --> 01:44:01,000
Jesus

2543
01:44:01,000 --> 01:44:03,000
我们最终得出结论就是

2544
01:44:03,000 --> 01:44:05,000
千万不要用 Windows 的记事本

2545
01:44:05,000 --> 01:44:07,000
如果你也要用 Chin,务必记得用 UTF 8 编码

2546
01:44:07,000 --> 01:44:09,000
或者说

2547
01:44:09,000 --> 01:44:11,000
从今天开始

2548
01:44:11,000 --> 01:44:13,000
所有的设计跟文字相关的

2549
01:44:13,000 --> 01:44:15,000
跟编程相关的,任何是有文本的东西

2550
01:44:15,000 --> 01:44:17,000
一定要用 UTF 8 来编

2551
01:44:17,000 --> 01:44:19,000
来存就可以了

2552
01:44:19,000 --> 01:44:21,000
其他的都是斜角

2553
01:44:23,000 --> 01:44:25,000
Windows 记事本会在

2554
01:44:25,000 --> 01:44:27,000
UTF 8 的编码文件里面

2555
01:44:27,000 --> 01:44:29,000
还会加一串字

2556
01:44:29,000 --> 01:44:31,000
加一个字节串

2557
01:44:31,000 --> 01:44:33,000
它为什么还要画蛇天足呢

2558
01:44:33,000 --> 01:44:35,000
就刚才你说那个问题

2559
01:44:35,000 --> 01:44:37,000
虽然是 UTF 8

2560
01:44:37,000 --> 01:44:39,000
但是它又加了一个这个东西

2561
01:44:39,000 --> 01:44:41,000
它还是想加这个东西,才觉得保险

2562
01:44:43,000 --> 01:44:45,000
让人家知道,我这肯定是 Unicode

2563
01:44:45,000 --> 01:44:47,000
对吧,拖出去砍是很正常的处理方式

2564
01:44:47,000 --> 01:44:49,000
好吧

2565
01:44:53,000 --> 01:44:55,000
好,Windows 的坑终于踩过了

2566
01:44:55,000 --> 01:44:57,000
现在我们来讲这个

2567
01:44:57,000 --> 01:44:59,000
UTF 8 还没讲

2568
01:44:59,000 --> 01:45:01,000
UTF 8 需要讲吗

2569
01:45:01,000 --> 01:45:03,000
UTF 8 其实挺好解释的,可以讲

2570
01:45:03,000 --> 01:45:05,000
说说来吧,我好累

2571
01:45:05,000 --> 01:45:07,000
我说

2572
01:45:09,000 --> 01:45:11,000
为什么在这个时候就要把锅舍给我

2573
01:45:11,000 --> 01:45:13,000
因为我把该砍的人都砍掉了

2574
01:45:13,000 --> 01:45:15,000
剩下都是给你讲这个

2575
01:45:15,000 --> 01:45:17,000
很完美的世界了

2576
01:45:19,000 --> 01:45:21,000
UTF 8 是一个

2577
01:45:21,000 --> 01:45:23,000
目前看来比较完美的编导方案

2578
01:45:23,000 --> 01:45:25,000
The Holy Grail

2579
01:45:25,000 --> 01:45:27,000
Ecoding

2580
01:45:27,000 --> 01:45:29,000
可以这么说吧

2581
01:45:29,000 --> 01:45:31,000
虽然它还是带有一些美国

2582
01:45:31,000 --> 01:45:33,000
重心主义的色彩

2583
01:45:33,000 --> 01:45:35,000
但是基本上已经

2584
01:45:35,000 --> 01:45:37,000
在占地和

2585
01:45:37,000 --> 01:45:39,000
效率方面

2586
01:45:39,000 --> 01:45:41,000
达到一个均衡

2587
01:45:41,000 --> 01:45:43,000
UTF 8 虽然叫 UTF 8

2588
01:45:43,000 --> 01:45:45,000
但是它是一种所谓的

2589
01:45:45,000 --> 01:45:47,000
Various Length

2590
01:45:47,000 --> 01:45:49,000
就是可变长度的自复变化

2591
01:45:49,000 --> 01:45:51,000
就是说

2592
01:45:51,000 --> 01:45:53,000
一个字,或者说一个符号

2593
01:45:53,000 --> 01:45:55,000
比如说我们常见的这些 Emojai 之类的

2594
01:45:55,000 --> 01:45:57,000
有可能用

2595
01:45:57,000 --> 01:45:59,000
一个 byte

2596
01:45:59,000 --> 01:46:01,000
八个 bit

2597
01:46:01,000 --> 01:46:03,000
或者最多可以用到六个

2598
01:46:03,000 --> 01:46:05,000
目前是六个吧

2599
01:46:05,000 --> 01:46:07,000
六个 byte,以前是四个

2600
01:46:09,000 --> 01:46:11,000
现在是六个

2601
01:46:11,000 --> 01:46:13,000
最多可以用到六个字

2602
01:46:13,000 --> 01:46:15,000
六八四十八个 bit

2603
01:46:15,000 --> 01:46:17,000
来代表一个符号

2604
01:46:17,000 --> 01:46:19,000
然后其中最原始的

2605
01:46:19,000 --> 01:46:21,000
那 128 个 ASCII 的自复

2606
01:46:21,000 --> 01:46:23,000
这些就和 ASCII

2607
01:46:23,000 --> 01:46:25,000
一模一样

2608
01:46:25,000 --> 01:46:27,000
只需要一个字节

2609
01:46:27,000 --> 01:46:29,000
比如说一个 UTF 8 的文件

2610
01:46:29,000 --> 01:46:31,000
如果它只用

2611
01:46:31,000 --> 01:46:33,000
ASCII 自复来写的话

2612
01:46:33,000 --> 01:46:35,000
它和 ASCII 编码的

2613
01:46:35,000 --> 01:46:37,000
文件是一模一样

2614
01:46:37,000 --> 01:46:39,000
然后带有

2615
01:46:39,000 --> 01:46:41,000
附加符号的什么

2616
01:46:41,000 --> 01:46:43,000
比如说德语的 U

2617
01:46:43,000 --> 01:46:45,000
然后什么

2618
01:46:45,000 --> 01:46:47,000
阿拉伯语

2619
01:46:47,000 --> 01:46:49,000
俄罗斯用的

2620
01:46:49,000 --> 01:46:51,000
希列尔字母之类的

2621
01:46:51,000 --> 01:46:53,000
从这些字母开始

2622
01:46:53,000 --> 01:46:55,000
全都需要两个字节编码

2623
01:46:55,000 --> 01:46:57,000
然后中文

2624
01:46:57,000 --> 01:46:59,000
则需要三到四个字节

2625
01:46:59,000 --> 01:47:01,000
基本上大部分中文

2626
01:47:01,000 --> 01:47:03,000
都是需要三到四个字节

2627
01:47:03,000 --> 01:47:05,000
然后

2628
01:47:05,000 --> 01:47:07,000
尤其是那个

2629
01:47:07,000 --> 01:47:09,000
在 unicode 里面所谓

2630
01:47:09,000 --> 01:47:11,000
叫什么 BMP

2631
01:47:11,000 --> 01:47:13,000
BMP 的全程什么

2632
01:47:13,000 --> 01:47:15,000
基本语言平面

2633
01:47:15,000 --> 01:47:17,000
基本语言平面

2634
01:47:17,000 --> 01:47:19,000
基本语言平面的那个平面

2635
01:47:19,000 --> 01:47:21,000
这个位面里面基本上全都在

2636
01:47:21,000 --> 01:47:23,000
三个字节里面

2637
01:47:23,000 --> 01:47:25,000
所以汉字

2638
01:47:25,000 --> 01:47:27,000
用它来编的话

2639
01:47:27,000 --> 01:47:29,000
基本上全都是三个字节编码

2640
01:47:31,000 --> 01:47:33,000
也就是说如果你用 UTF 8 来编

2641
01:47:33,000 --> 01:47:35,000
一个之前适用 GB 2312

2642
01:47:35,000 --> 01:47:37,000
编的

2643
01:47:37,000 --> 01:47:39,000
文件的话

2644
01:47:39,000 --> 01:47:41,000
它的尺寸可能

2645
01:47:41,000 --> 01:47:43,000
会扩大 50%

2646
01:47:45,000 --> 01:47:47,000
这可能是它的唯一一个

2647
01:47:47,000 --> 01:47:49,000
唯一一个比较不好的地方

2648
01:47:51,000 --> 01:47:53,000
但其实这个问题在现代

2649
01:47:53,000 --> 01:47:55,000
都是用压缩技术的情况下

2650
01:47:55,000 --> 01:47:57,000
完全没有任何去

2651
01:47:57,000 --> 01:47:59,000
对

2652
01:47:59,000 --> 01:48:01,000
耗费的这些

2653
01:48:01,000 --> 01:48:03,000
多余空间期基本上只在网络

2654
01:48:03,000 --> 01:48:05,000
传输和

2655
01:48:05,000 --> 01:48:07,000
磁盘比较昂贵的时代

2656
01:48:07,000 --> 01:48:09,000
是一个比较大的招位

2657
01:48:09,000 --> 01:48:11,000
但是在目前带宽这样的话

2658
01:48:11,000 --> 01:48:13,000
大部分时候

2659
01:48:13,000 --> 01:48:15,000
不压缩都还好都还 OK

2660
01:48:15,000 --> 01:48:17,000
你看一些文本能值多少个

2661
01:48:17,000 --> 01:48:19,000
你随便下个图不就没了

2662
01:48:23,000 --> 01:48:25,000
然后 UTF 8 最开始好像是

2663
01:48:25,000 --> 01:48:27,000
在 2000 年左右

2664
01:48:27,000 --> 01:48:29,000
开始定义了

2665
01:48:29,000 --> 01:48:31,000
所以其应用也基本上

2666
01:48:31,000 --> 01:48:33,000
2000 年之后出的操作系统才

2667
01:48:33,000 --> 01:48:35,000
开始比较大规模

2668
01:48:35,000 --> 01:48:37,000
使用

2669
01:48:37,000 --> 01:48:39,000
应该不是 UTF 8 很早就有了

2670
01:48:41,000 --> 01:48:43,000
UTF 8 在

2671
01:48:43,000 --> 01:48:45,000
怎么说

2672
01:48:45,000 --> 01:48:47,000
有一个官方的定义文件

2673
01:48:47,000 --> 01:48:49,000
应该是在 2000 年

2674
01:48:49,000 --> 01:48:51,000
第一版的

2675
01:48:51,000 --> 01:48:53,000
最新修订版本

2676
01:48:53,000 --> 01:48:55,000
最开始的起源可能是

2677
01:48:55,000 --> 01:48:57,000
在 1996 年

2678
01:48:57,000 --> 01:48:59,000
反正早了 1993 年

2679
01:48:59,000 --> 01:49:01,000
它其实不是

2680
01:49:01,000 --> 01:49:03,000
一个特别老

2681
01:49:03,000 --> 01:49:05,000
特别古老的

2682
01:49:05,000 --> 01:49:07,000
编码

2683
01:49:07,000 --> 01:49:09,000
相对来说比较新的编码

2684
01:49:09,000 --> 01:49:11,000
用方式

2685
01:49:11,000 --> 01:49:13,000
目前来讲应用还不是特别的广泛

2686
01:49:13,000 --> 01:49:15,000
但是我们

2687
01:49:15,000 --> 01:49:17,000
所希望达到理想国的状态

2688
01:49:17,000 --> 01:49:19,000
就是全世界就只用 UTF 8

2689
01:49:19,000 --> 01:49:21,000
这样一种编码

2690
01:49:21,000 --> 01:49:23,000
刚才说了 Windows

2691
01:49:23,000 --> 01:49:25,000
Windows 内部不是用 UTF 8 的对吧

2692
01:49:25,000 --> 01:49:27,000
没有系统内部会用 UTF 8

2693
01:49:27,000 --> 01:49:29,000
因为它是变长的

2694
01:49:29,000 --> 01:49:31,000
变长是很不利于处理的

2695
01:49:31,000 --> 01:49:33,000
所以其实 UTF 8

2696
01:49:33,000 --> 01:49:35,000
它的最大优势是在于

2697
01:49:35,000 --> 01:49:37,000
不同的

2698
01:49:37,000 --> 01:49:39,000
跨平台的或者说可交换的

2699
01:49:39,000 --> 01:49:41,000
这样一个场景

2700
01:49:41,000 --> 01:49:43,000
就我们说到 UTF 8 或者 UTF 16 的时候

2701
01:49:43,000 --> 01:49:45,000
其实

2702
01:49:45,000 --> 01:49:47,000
在现实中

2703
01:49:47,000 --> 01:49:49,000
都是在它存到

2704
01:49:49,000 --> 01:49:51,000
磁盘上序列化之后的一个结果

2705
01:49:51,000 --> 01:49:53,000
嗯

2706
01:49:53,000 --> 01:49:55,000
互联网工程工作小组

2707
01:49:55,000 --> 01:49:57,000
要求所有的互联网协议

2708
01:49:57,000 --> 01:49:59,000
都必须支持 UTF

2709
01:49:59,000 --> 01:50:01,000
就唯一的全球认可

2710
01:50:01,000 --> 01:50:03,000
的一个标准

2711
01:50:03,000 --> 01:50:05,000
然后互联网邮件联盟

2712
01:50:05,000 --> 01:50:07,000
是建议所有的电子邮件

2713
01:50:07,000 --> 01:50:09,000
的软件都支持 UTF 8

2714
01:50:09,000 --> 01:50:11,000
是

2715
01:50:11,000 --> 01:50:13,000
对

2716
01:50:13,000 --> 01:50:15,000
邮件的话还很复杂

2717
01:50:15,000 --> 01:50:17,000
对

2718
01:50:17,000 --> 01:50:19,000
然后 UTF 8 的编码方式

2719
01:50:19,000 --> 01:50:21,000
其实也比较好理解

2720
01:50:21,000 --> 01:50:23,000
因为 8 比特的那个

2721
01:50:23,000 --> 01:50:25,000
第一个位如果是 0 的话

2722
01:50:25,000 --> 01:50:27,000
肯定是 ASCII 的编码

2723
01:50:27,000 --> 01:50:29,000
你怎么辨认说

2724
01:50:29,000 --> 01:50:31,000
接下来两个比特是一个双比特的

2725
01:50:31,000 --> 01:50:33,000
UTF 8 的字符

2726
01:50:33,000 --> 01:50:35,000
就是看第一个 byte

2727
01:50:35,000 --> 01:50:37,000
我刚才应该说字节

2728
01:50:37,000 --> 01:50:39,000
就如果你怎么你怎样才能辨认

2729
01:50:39,000 --> 01:50:41,000
出接下来两个字节是一个双字节

2730
01:50:41,000 --> 01:50:43,000
的 UTF 8 的

2731
01:50:43,000 --> 01:50:45,000
编码呢就是要看

2732
01:50:45,000 --> 01:50:47,000
第一个字节的前两位如果是 1

2733
01:50:47,000 --> 01:50:49,000
然后第三位是 0 的话呢就意味着

2734
01:50:49,000 --> 01:50:51,000
这是一个

2735
01:50:51,000 --> 01:50:53,000
双字节的 UTF

2736
01:50:53,000 --> 01:50:55,000
码

2737
01:50:55,000 --> 01:50:57,000
如果有三个 1 然后一个 0

2738
01:50:57,000 --> 01:50:59,000
的话也就意味着它是一个三字节

2739
01:50:59,000 --> 01:51:01,000
的 UTF 码

2740
01:51:01,000 --> 01:51:03,000
然后除了第一位之外其他的后面的几个

2741
01:51:03,000 --> 01:51:05,000
字节每个字节的前两位都是

2742
01:51:05,000 --> 01:51:07,000
10

2743
01:51:07,000 --> 01:51:09,000
对然后这样到

2744
01:51:09,000 --> 01:51:11,000
如果你有六个

2745
01:51:11,000 --> 01:51:13,000
字节

2746
01:51:13,000 --> 01:51:15,000
来表示一个

2747
01:51:15,000 --> 01:51:17,000
码位的话那它就是 1111

2748
01:51:17,000 --> 01:51:19,000
61 然后接一个 0

2749
01:51:19,000 --> 01:51:21,000
对然后

2750
01:51:21,000 --> 01:51:23,000
就可以把接下来的

2751
01:51:23,000 --> 01:51:25,000
剩下的 5 个 byte 也都以

2752
01:51:25,000 --> 01:51:27,000
10 开头跟在它后面然后来代表

2753
01:51:27,000 --> 01:51:29,000
一个字符

2754
01:51:29,000 --> 01:51:31,000
差不多就这样吧

2755
01:51:31,000 --> 01:51:33,000
还有什么要介绍的

2756
01:51:33,000 --> 01:51:35,000
所以就是称死 UTF 816 个

2757
01:51:35,000 --> 01:51:37,000
字节

2758
01:51:37,000 --> 01:51:39,000
为一个 code

2759
01:51:39,000 --> 01:51:41,000
对

2760
01:51:43,000 --> 01:51:45,000
这个倒不一定

2761
01:51:45,000 --> 01:51:47,000
不能再扩了吗

2762
01:51:47,000 --> 01:51:49,000
就说你可能不能用

2763
01:51:49,000 --> 01:51:51,000
这一套第一位完全是

2764
01:51:51,000 --> 01:51:53,000
7 个 1 一个 0 是吧

2765
01:51:53,000 --> 01:51:55,000
你可能不能在这种方式上

2766
01:51:55,000 --> 01:51:57,000
扩展它的这个

2767
01:51:57,000 --> 01:51:59,000
字符的这个量了

2768
01:51:59,000 --> 01:52:01,000
但是你还可以用一些别的方式

2769
01:52:01,000 --> 01:52:03,000
比如你可以通过

2770
01:52:03,000 --> 01:52:05,000
中间串一个什么特殊的

2771
01:52:05,000 --> 01:52:07,000
字符来告诉

2772
01:52:07,000 --> 01:52:09,000
它这样设计是有目的的

2773
01:52:09,000 --> 01:52:11,000
就是说这种设计它最后有一个很重要的

2774
01:52:11,000 --> 01:52:13,000
特性要解释一下

2775
01:52:13,000 --> 01:52:15,000
不然的话就很容易乱掉

2776
01:52:17,000 --> 01:52:19,000
就是说因为变长和

2777
01:52:19,000 --> 01:52:21,000
为什么刚才讲那个操作系统内部

2778
01:52:21,000 --> 01:52:23,000
执行的时候都一定是用定长的定长

2779
01:52:23,000 --> 01:52:25,000
它如果做那个叫什么

2780
01:52:25,000 --> 01:52:27,000
跳转啊计算 offset 就是那个

2781
01:52:27,000 --> 01:52:29,000
位移的话它是很简单的

2782
01:52:29,000 --> 01:52:31,000
它可以成语整数都可以

2783
01:52:31,000 --> 01:52:33,000
但是变长的话就不具备这个问题了

2784
01:52:33,000 --> 01:52:35,000
变长的话要避免的一个很大的问题

2785
01:52:35,000 --> 01:52:37,000
就是说在一个相当长的

2786
01:52:37,000 --> 01:52:39,000
文本里面假设部分

2787
01:52:39,000 --> 01:52:41,000
字符出现问题可能是

2788
01:52:41,000 --> 01:52:43,000
因为磁盘存储的

2789
01:52:43,000 --> 01:52:45,000
介质的损坏或者是网络传输的问题

2790
01:52:45,000 --> 01:52:47,000
导致中间部分那个字节

2791
01:52:47,000 --> 01:52:49,000
发生变化的时候我们能够很快的

2792
01:52:49,000 --> 01:52:51,000
辨认出来哪部分是坏的

2793
01:52:51,000 --> 01:52:53,000
并且在那个坏的那个

2794
01:52:53,000 --> 01:52:55,000
字节或者那几个字节之后

2795
01:52:55,000 --> 01:52:57,000
立即重新的找回你的那个起点

2796
01:52:57,000 --> 01:52:59,000
就是你怎么

2797
01:52:59,000 --> 01:53:01,000
因为是变长你不知道接下来的

2798
01:53:01,000 --> 01:53:03,000
那个字符的起点在哪里

2799
01:53:05,000 --> 01:53:07,000
中间几个码坏掉后面的字全了

2800
01:53:07,000 --> 01:53:09,000
这个是一种很危险的

2801
01:53:09,000 --> 01:53:11,000
就是很不健壮的

2802
01:53:11,000 --> 01:53:13,000
一种设计

2803
01:53:13,000 --> 01:53:15,000
但是 UTF 8 这种设计它可以导致说

2804
01:53:15,000 --> 01:53:17,000
你能够很快的

2805
01:53:17,000 --> 01:53:19,000
叫做 self-synchronizing

2806
01:53:19,000 --> 01:53:21,000
就是可以自己同步

2807
01:53:21,000 --> 01:53:23,000
因为你只用看每一个字节

2808
01:53:23,000 --> 01:53:25,000
每个字节的这样去跳

2809
01:53:25,000 --> 01:53:27,000
你只要看每个字节的前两位

2810
01:53:27,000 --> 01:53:29,000
你就能够知道它这个是不是某一个

2811
01:53:29,000 --> 01:53:31,000
这个

2812
01:53:31,000 --> 01:53:33,000
字

2813
01:53:33,000 --> 01:53:35,000
就 character 的起点

2814
01:53:35,000 --> 01:53:37,000
因为如果它是 10 开头的话

2815
01:53:37,000 --> 01:53:39,000
或者是零几开头的话它肯定不是

2816
01:53:39,000 --> 01:53:41,000
第一位是零的话

2817
01:53:41,000 --> 01:53:43,000
它肯定是一个单一字节

2818
01:53:43,000 --> 01:53:45,000
它就是一个字符的起点对吧

2819
01:53:45,000 --> 01:53:47,000
然后如果它是 10 开头的话它肯定不是

2820
01:53:47,000 --> 01:53:49,000
它是前面一个字符的一部分

2821
01:53:49,000 --> 01:53:51,000
对所以它

2822
01:53:51,000 --> 01:53:53,000
直接 skip 直到你又发现

2823
01:53:53,000 --> 01:53:55,000
一个第一位是零

2824
01:53:55,000 --> 01:53:57,000
或者是 11

2825
01:53:57,000 --> 01:53:59,000
11 这种开头的就根据

2826
01:53:59,000 --> 01:54:01,000
前缀的表

2827
01:54:01,000 --> 01:54:03,000
所以这个是一个很重要的特性

2828
01:54:03,000 --> 01:54:05,000
如果说一旦这个结构被破坏的话

2829
01:54:05,000 --> 01:54:07,000
UTF 8 的健壮性就不复存在了

2830
01:54:07,000 --> 01:54:09,000
对在编码方案的层面

2831
01:54:09,000 --> 01:54:11,000
确实是这样

2832
01:54:11,000 --> 01:54:13,000
我刚刚想说的意思就是说其实

2833
01:54:13,000 --> 01:54:15,000
我们可能不必担心

2834
01:54:15,000 --> 01:54:17,000
用 UTF 8 这种编码方案

2835
01:54:17,000 --> 01:54:19,000
会导致有一天说我们想用的

2836
01:54:19,000 --> 01:54:21,000
这个符数不够用

2837
01:54:21,000 --> 01:54:23,000
它其实可以添加

2838
01:54:23,000 --> 01:54:25,000
别的方案进去将这个范围

2839
01:54:25,000 --> 01:54:27,000
扩的更多

2840
01:54:27,000 --> 01:54:29,000
其实起码到目前为止六个字节的

2841
01:54:29,000 --> 01:54:31,000
飞镖的也已经

2842
01:54:31,000 --> 01:54:33,000
足够用了吧

2843
01:54:33,000 --> 01:54:35,000
希望我们不要再往这个 Unicode

2844
01:54:35,000 --> 01:54:37,000
垃圾堆里面再飞东西

2845
01:54:39,000 --> 01:54:41,000
可是 Unicode 这个垃圾堆还一直都在

2846
01:54:41,000 --> 01:54:43,000
而且它现在有一个非常重大的

2847
01:54:43,000 --> 01:54:45,000
缺口理论上可以无限 c

2848
01:54:45,000 --> 01:54:47,000
就是那个 emoji 的这个缺口

2849
01:54:49,000 --> 01:54:51,000
表情文字

2850
01:54:51,000 --> 01:54:53,000
那个坑我们是这次讲还是下次讲

2851
01:54:53,000 --> 01:54:55,000
我们可以专门找一次

2852
01:54:55,000 --> 01:54:57,000
专门来讲

2853
01:54:57,000 --> 01:54:59,000
可以专门找一次来讲各种各样有趣的

2854
01:54:59,000 --> 01:55:01,000
以及有一些

2855
01:55:01,000 --> 01:55:03,000
根本就不知道为什么要放

2856
01:55:03,000 --> 01:55:05,000
在那里面的 emoji

2857
01:55:05,000 --> 01:55:07,000
一个悬浮在半空中的

2858
01:55:07,000 --> 01:55:09,000
男人对吧

2859
01:55:09,000 --> 01:55:11,000
这个 emoji 到底有什么意义

2860
01:55:13,000 --> 01:55:15,000
这个是一个象形文字

2861
01:55:15,000 --> 01:55:17,000
始终是要解决的问题

2862
01:55:19,000 --> 01:55:21,000
它是不是一个封闭的集合

2863
01:55:21,000 --> 01:55:23,000
对对

2864
01:55:23,000 --> 01:55:25,000
就很麻烦

2865
01:55:25,000 --> 01:55:27,000
你说不清楚比如说你刚才

2866
01:55:27,000 --> 01:55:29,000
问那个问题一个飘浮在半空中的男人

2867
01:55:29,000 --> 01:55:31,000
表达了这么一个象形文字的 emoji

2868
01:55:31,000 --> 01:55:33,000
它和我们考古

2869
01:55:33,000 --> 01:55:35,000
挖出一个固执这里面写了一个通甲字

2870
01:55:35,000 --> 01:55:37,000
有什么区别通甲字至少有意义

2871
01:55:37,000 --> 01:55:39,000
他写错了

2872
01:55:39,000 --> 01:55:41,000
他写错了就有意义

2873
01:55:41,000 --> 01:55:43,000
我们要表达现代人要表达一个东西就没有意义

2874
01:55:43,000 --> 01:55:45,000
我觉得这种

2875
01:55:45,000 --> 01:55:47,000
这是个政治问题

2876
01:55:47,000 --> 01:55:49,000
你去考他的那个 sonetics

2877
01:55:49,000 --> 01:55:51,000
通甲字你至少知道它有意义

2878
01:55:51,000 --> 01:55:53,000
但是这个

2879
01:55:53,000 --> 01:55:55,000
至少你可以推测出来它代表的意义

2880
01:55:55,000 --> 01:55:57,000
是什么可是这个悬浮在空中的

2881
01:55:57,000 --> 01:55:59,000
男人这个意义是什么都很多人

2882
01:55:59,000 --> 01:56:01,000
不知道

2883
01:56:01,000 --> 01:56:03,000
我也不知道你再解释一下

2884
01:56:03,000 --> 01:56:05,000
不是这个意义

2885
01:56:05,000 --> 01:56:07,000
这个符号最开始是

2886
01:56:07,000 --> 01:56:09,000
出现在

2887
01:56:09,000 --> 01:56:11,000
微软的 webdings 里面

2888
01:56:11,000 --> 01:56:13,000
然后

2889
01:56:13,000 --> 01:56:15,000
是一个

2890
01:56:15,000 --> 01:56:17,000
一个码位多少啊

2891
01:56:17,000 --> 01:56:19,000
稍等我找一找

2892
01:56:19,000 --> 01:56:21,000
你怎么搜

2893
01:56:21,000 --> 01:56:23,000
悬浮在半框中的男人吗

2894
01:56:23,000 --> 01:56:25,000
leviating man

2895
01:56:25,000 --> 01:56:27,000
emoji

2896
01:56:27,000 --> 01:56:29,000
man in business suit leviating

2897
01:56:29,000 --> 01:56:31,000
搜这个

2898
01:56:31,000 --> 01:56:33,000
U 1 加 5

2899
01:56:33,000 --> 01:56:35,000
U 加 1 F 574

2900
01:56:35,000 --> 01:56:39,000
浮在地面上的西装男

2901
01:56:39,000 --> 01:56:41,000
哈哈哈哈

2902
01:56:41,000 --> 01:56:43,000
这是什么鬼

2903
01:56:43,000 --> 01:56:45,000
这个 emoji 最开始是出现在 webdings 里面

2904
01:56:45,000 --> 01:56:47,000
然后它的意义是一个

2905
01:56:47,000 --> 01:56:49,000
感叹号

2906
01:56:49,000 --> 01:56:51,000
然后这个感叹号的风格

2907
01:56:51,000 --> 01:56:53,000
就像一个

2908
01:56:53,000 --> 01:56:55,000
rude boy logo

2909
01:56:55,000 --> 01:56:57,000
然后是在

2910
01:56:57,000 --> 01:56:59,000
是一个叫做

2911
01:56:59,000 --> 01:57:01,000
the specials 的乐队

2912
01:57:01,000 --> 01:57:03,000
所出的一张照片里面

2913
01:57:03,000 --> 01:57:05,000
是你 emojie 还是 emoji

2914
01:57:05,000 --> 01:57:07,000
emoji

2915
01:57:07,000 --> 01:57:09,000
你要是按日文念读音的话

2916
01:57:09,000 --> 01:57:11,000
就是 emoji

2917
01:57:11,000 --> 01:57:13,000
对 emoji

2918
01:57:13,000 --> 01:57:15,000
这么说它确实有点像一个感叹号

2919
01:57:15,000 --> 01:57:17,000
因为就是它的那个人

2920
01:57:17,000 --> 01:57:19,000
悬浮在空中地下有个投影

2921
01:57:19,000 --> 01:57:21,000
正好是感叹号的那一叠

2922
01:57:21,000 --> 01:57:23,000
哈哈哈哈

2923
01:57:23,000 --> 01:57:25,000
哈哈哈哈

2924
01:57:25,000 --> 01:57:27,000
好吧

2925
01:57:27,000 --> 01:57:29,000
什么鬼

2926
01:57:29,000 --> 01:57:31,000
这个玩意在 unicode 7.0 的时候

2927
01:57:31,000 --> 01:57:33,000
进入了 unicode

2928
01:57:33,000 --> 01:57:35,000
所以无涛在

2929
01:57:35,000 --> 01:57:37,000
这个 emoji 这个

2930
01:57:37,000 --> 01:57:39,000
这个争论里面是持这个

2931
01:57:39,000 --> 01:57:41,000
什么叫保守派

2932
01:57:41,000 --> 01:57:43,000
左派和右派的区别是什么

2933
01:57:43,000 --> 01:57:45,000
右派是应该就是 unicode

2934
01:57:45,000 --> 01:57:47,000
工作组里面就是说我们不要

2935
01:57:47,000 --> 01:57:49,000
加这么多乱七八糟的东西进来

2936
01:57:49,000 --> 01:57:51,000
这个是我觉得界限是很难

2937
01:57:51,000 --> 01:57:53,000
界定的你怎么区分什么

2938
01:57:53,000 --> 01:57:55,000
叫乱七八糟的

2939
01:57:55,000 --> 01:57:57,000
我就觉得这个就是象形文字不封闭的导致的

2940
01:57:57,000 --> 01:57:59,000
一个必然结果

2941
01:57:59,000 --> 01:58:01,000
它主要就是它不是一个封闭的集合

2942
01:58:01,000 --> 01:58:03,000
退于万物

2943
01:58:03,000 --> 01:58:05,000
这个边界随时都在扩的就很麻烦

2944
01:58:05,000 --> 01:58:07,000
对所以这个东西是一个深坑

2945
01:58:07,000 --> 01:58:09,000
可能没有办法

2946
01:58:09,000 --> 01:58:11,000
如果说这个 unicode 里面那帮人

2947
01:58:11,000 --> 01:58:13,000
觉得不应该加 emoji 进来的话

2948
01:58:13,000 --> 01:58:15,000
那也不要从固执队里面找

2949
01:58:15,000 --> 01:58:17,000
那个生批字进来是一个原理

2950
01:58:19,000 --> 01:58:21,000
事实上将这个 emoji 当成

2951
01:58:21,000 --> 01:58:23,000
一种字符

2952
01:58:23,000 --> 01:58:25,000
这个观念本身就是一个比较

2953
01:58:25,000 --> 01:58:27,000
激进的观念

2954
01:58:27,000 --> 01:58:29,000
它本身不是一种文字

2955
01:58:29,000 --> 01:58:31,000
但是从技术上的实现来讲的话

2956
01:58:31,000 --> 01:58:33,000
倒是 ok 的

2957
01:58:33,000 --> 01:58:35,000
因为你从 font 的技术上实现来讲

2958
01:58:35,000 --> 01:58:37,000
它就是一个码

2959
01:58:37,000 --> 01:58:39,000
显示一个 greef

2960
01:58:39,000 --> 01:58:41,000
greef 的确就是一个图案

2961
01:58:41,000 --> 01:58:43,000
从技术显示来讲

2962
01:58:43,000 --> 01:58:45,000
这是很正常的

2963
01:58:45,000 --> 01:58:47,000
它是一个典型由技术来推动标志

2964
01:58:47,000 --> 01:58:49,000
就由技术实作来推动这个标志

2965
01:58:49,000 --> 01:58:51,000
改变的这样一个问题

2966
01:58:51,000 --> 01:58:53,000
好吧 emoji 咱们还是下次来说

2967
01:58:53,000 --> 01:58:55,000
对对对

2968
01:58:55,000 --> 01:58:57,000
而且我觉得它还推出来一个

2969
01:58:57,000 --> 01:58:59,000
扩展

2970
01:58:59,000 --> 01:59:01,000
一个三维的符号

2971
01:59:01,000 --> 01:59:03,000
应不应该算作一个 emoji

2972
01:59:05,000 --> 01:59:07,000
一个三维的符号是什么意思

2973
01:59:07,000 --> 01:59:09,000
就是同样一个

2974
01:59:09,000 --> 01:59:11,000
有一个平面的脸

2975
01:59:11,000 --> 01:59:13,000
和一个立体的脸

2976
01:59:13,000 --> 01:59:15,000
算一个符号吗

2977
01:59:15,000 --> 01:59:17,000
这就刚才我们说的那个

2978
01:59:17,000 --> 01:59:19,000
户的三种写法它算一个

2979
01:59:19,000 --> 01:59:21,000
还是算三个

2980
01:59:21,000 --> 01:59:23,000
对没错

2981
01:59:23,000 --> 01:59:25,000
就很难去划分这个东西

2982
01:59:25,000 --> 01:59:27,000
所以我觉得不把那个到底是

2983
01:59:27,000 --> 01:59:29,000
表音表意还是表形

2984
01:59:29,000 --> 01:59:31,000
这个东西定下来这个东西永远都是有

2985
01:59:31,000 --> 01:59:33,000
争议

2986
01:59:33,000 --> 01:59:35,000
好吧那要不刹个车

2987
01:59:35,000 --> 01:59:37,000
然后我们下次接着讲

2988
01:59:37,000 --> 01:59:39,000
OK 所以我们今天究竟

2989
01:59:39,000 --> 01:59:41,000
有没有讲到乱码这些事情

2990
01:59:41,000 --> 01:59:43,000
我大概还是

2991
01:59:43,000 --> 01:59:45,000
大概还是讲到了对

2992
01:59:45,000 --> 01:59:47,000
嗯嗯

2993
01:59:47,000 --> 01:59:49,000
就是说我们讲到了这个

2994
01:59:49,000 --> 01:59:51,000
一些编码的基本的原理

2995
01:59:51,000 --> 01:59:53,000
然后梳理了一下这个

2996
01:59:53,000 --> 01:59:55,000
自负极规范的这个发展的历史

2997
01:59:55,000 --> 01:59:57,000
那么在这两个环节中

2998
01:59:57,000 --> 01:59:59,000
如果有一个环节出错了其实

2999
01:59:59,000 --> 02:00:01,000
首先就会导致乱码

3000
02:00:01,000 --> 02:00:03,000
然后最后我们还讲了这个字节端式的问题

3001
02:00:03,000 --> 02:00:05,000
它也是导致

3002
02:00:05,000 --> 02:00:07,000
乱码的一个

3003
02:00:07,000 --> 02:00:09,000
实践中经常遇到的因素的

3004
02:00:09,000 --> 02:00:11,000
嗯嗯

3005
02:00:11,000 --> 02:00:13,000
其实大家要珍惜

3006
02:00:13,000 --> 02:00:15,000
每天你在网页上

3007
02:00:15,000 --> 02:00:17,000
看出来的这些字符

3008
02:00:17,000 --> 02:00:19,000
因为它突破千些万许

3009
02:00:19,000 --> 02:00:21,000
被正确的编码

3010
02:00:21,000 --> 02:00:23,000
编出来然后传输过来

3011
02:00:23,000 --> 02:00:25,000
然后显示在你的浏览器

3012
02:00:25,000 --> 02:00:27,000
里面对

3013
02:00:27,000 --> 02:00:29,000
它已经经过了各层的

3014
02:00:29,000 --> 02:00:31,000
处理

3015
02:00:31,000 --> 02:00:33,000
不过实际上那个我们应该知道

3016
02:00:33,000 --> 02:00:35,000
像 HTML 它的这个解析

3017
02:00:35,000 --> 02:00:37,000
规则里它的这个建装性

3018
02:00:37,000 --> 02:00:39,000
还是比较强的它应该能

3019
02:00:39,000 --> 02:00:41,000
容一定的编码错误

3020
02:00:41,000 --> 02:00:43,000
是的

3021
02:00:43,000 --> 02:00:45,000
那当然了要不然的话

3022
02:00:45,000 --> 02:00:47,000
你想在传输过程中

3023
02:00:47,000 --> 02:00:49,000
又是掉包又是乱

3024
02:00:49,000 --> 02:00:51,000
又会乱的对吧

3025
02:00:51,000 --> 02:00:53,000
我指的是就是比如说

3026
02:00:53,000 --> 02:00:55,000
我这个浏览器把它

3027
02:00:55,000 --> 02:00:57,000
误认成另一种与它不符合的编码

3028
02:00:57,000 --> 02:00:59,000
不少情况下

3029
02:00:59,000 --> 02:01:01,000
就因为大家都对 ASCII 的兼容比较好

3030
02:01:01,000 --> 02:01:03,000
那么 HTML 用到一些

3031
02:01:03,000 --> 02:01:05,000
关键的这个标记

3032
02:01:05,000 --> 02:01:07,000
符号都是 ASCII 里面

3033
02:01:07,000 --> 02:01:09,000
所以它其实还是可以正确的

3034
02:01:09,000 --> 02:01:11,000
渲染一部分

3035
02:01:11,000 --> 02:01:13,000
嗯就至少

3036
02:01:13,000 --> 02:01:15,000
它的 mark 是对的

3037
02:01:17,000 --> 02:01:19,000
好吧那今天时间有限

3038
02:01:19,000 --> 02:01:21,000
那就暂时先

3039
02:01:21,000 --> 02:01:23,000
刹到这边我们下次

3040
02:01:23,000 --> 02:01:25,000
再接着讲

3041
02:01:25,000 --> 02:01:27,000
感谢大家的收听

3042
02:01:27,000 --> 02:01:29,000
那大家可以从各种

3043
02:01:29,000 --> 02:01:31,000
社交网络上关注我们

3044
02:01:31,000 --> 02:01:33,000
那自残自创呢在

3045
02:01:33,000 --> 02:01:35,000
新浪微博微信公众号

3046
02:01:35,000 --> 02:01:37,000
以及 Twitter 的账号的名字都是 The Type

3047
02:01:37,000 --> 02:01:39,000
T-H-E-T-Y-P-E

3048
02:01:39,000 --> 02:01:41,000
在 Facebook 上面呢可以通过

3049
02:01:41,000 --> 02:01:43,000
Type is beautiful 找到我们

3050
02:01:43,000 --> 02:01:45,000
那也欢迎大家用邮件的方式

3051
02:01:45,000 --> 02:01:47,000
来给我们写反馈我们的邮箱是

3052
02:01:47,000 --> 02:01:49,000
podcast at the type.com

3053
02:01:49,000 --> 02:01:51,000
podcast 的拼写是 P-O-D-C-E-S-T

3054
02:01:51,000 --> 02:01:53,000
The Type 的拼写是

3055
02:01:53,000 --> 02:01:55,000
T-H-E-T-Y-P-E

3056
02:01:55,000 --> 02:01:57,000
podcast at the type.com

3057
02:01:57,000 --> 02:01:59,000
欢迎大家给我们捐款

3058
02:01:59,000 --> 02:02:01,000
让我们努力把节目做成最好的

3059
02:02:01,000 --> 02:02:03,000
全球最好的字体播客

3060
02:02:03,000 --> 02:02:05,000
感谢收听

3061
02:02:05,000 --> 02:02:07,000
IPM Podcast 的我们旗下的

3062
02:02:07,000 --> 02:02:09,000
IT 技术主题娱乐节目内容很慌

3063
02:02:09,000 --> 02:02:11,000
我们号称 Hardcore 但是也没有干货

3064
02:02:11,000 --> 02:02:13,000
想听人听不想听人就别听

3065
02:02:13,000 --> 02:02:15,000
您可以为本节目捐款地址是

3066
02:02:15,000 --> 02:02:41,000
kernopanic.fm 编译

3067
02:02:41,000 --> 02:02:43,000
我们下期节目再会

3068
02:02:45,000 --> 02:02:47,000
掰掰

