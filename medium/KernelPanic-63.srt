1
00:00:00,000 --> 00:00:02,000
我现在感觉耳机很有问题

2
00:00:02,000 --> 00:00:04,000
因为我现在用的是 AirPods

3
00:00:05,000 --> 00:00:06,000
等一下我换一下

4
00:00:06,000 --> 00:00:08,000
不要用无线的

5
00:00:08,000 --> 00:00:09,000
找个有线的耳机

6
00:00:09,000 --> 00:00:10,000
不然会很不稳定的

7
00:00:10,000 --> 00:00:13,000
主要是我手机没什么电

8
00:00:13,000 --> 00:00:14,000
行我换好了

9
00:00:14,000 --> 00:00:15,000
不好意思

10
00:00:16,000 --> 00:00:20,000
所以这回苹果 12 的背上贴的充电就有用了吗

11
00:00:20,000 --> 00:00:21,000
就是那个边充电

12
00:00:21,000 --> 00:00:23,000
然后下面插一个无线耳机

13
00:00:23,000 --> 00:00:24,000
没有因为我买的是 mini

14
00:00:24,000 --> 00:00:26,000
然后这个电量就感觉超小

15
00:00:26,000 --> 00:00:28,000
用到一天晚上就差不多就不够了

16
00:00:29,000 --> 00:00:29,000
真的很差的吗

17
00:00:29,000 --> 00:00:33,000
我还想说那天我去店里试了一下 mini 的手感

18
00:00:33,000 --> 00:00:34,000
我觉得还挺不错的

19
00:00:34,000 --> 00:00:35,000
mini 是很好

20
00:00:35,000 --> 00:00:36,000
就是很好

21
00:00:36,000 --> 00:00:38,000
那它肯定电池就没有其他那么大

22
00:00:38,000 --> 00:00:41,000
就是很纠结这个事情好烦

23
00:00:41,000 --> 00:00:44,000
它能不能把摄像头剪到只剩一个

24
00:00:44,000 --> 00:00:45,000
然后腾点空间给电池

25
00:00:48,000 --> 00:00:49,000
你就跟苹果说

26
00:00:50,000 --> 00:00:51,000
好了我们开始录吧

27
00:00:59,000 --> 00:01:11,000
大家好

28
00:01:11,000 --> 00:01:13,000
今天是 2021 年的 3 月 16 号

29
00:01:13,000 --> 00:01:16,000
字弹字串的第 147 期

30
00:01:16,000 --> 00:01:18,000
同时也是内核恐慌的第 93 期

31
00:01:19,000 --> 00:01:22,000
这也是字弹字串与内核恐慌的串台

32
00:01:22,000 --> 00:01:24,000
字弹字串的第 10 期

33
00:01:24,000 --> 00:01:26,000
字弹字串是 The Type 旗下全球首家

34
00:01:26,000 --> 00:01:30,000
用华语制作的字体排印主题播客节目

35
00:01:30,000 --> 00:01:31,000
我是主播

36
00:01:31,000 --> 00:01:32,000
文川西半动营局 Eric

37
00:01:33,000 --> 00:01:34,000
我是主播黄浦下面秦真宇

38
00:01:34,000 --> 00:01:35,000
贤真宇

39
00:01:36,000 --> 00:01:41,000
内核恐慌是一档大致以计算机科技为主题的娱乐 podcast

40
00:01:41,000 --> 00:01:43,000
我们号称硬核但是也没有什么干货

41
00:01:43,000 --> 00:01:45,000
想听人听不想听人就别听

42
00:01:45,000 --> 00:01:47,000
我们的网址是 pan.icu

43
00:01:47,000 --> 00:01:50,000
您可以在网站上找到订阅我们的节目

44
00:01:50,000 --> 00:01:52,000
订阅我们节目的方法以及联络我们的方式

45
00:01:53,000 --> 00:01:53,000
我是吴涛

46
00:01:54,000 --> 00:01:55,000
我是 Rail

47
00:01:55,000 --> 00:01:57,000
友台主播你们好

48
00:01:57,000 --> 00:01:59,000
我们居然已经开始做第 10 期的串台了

49
00:01:59,000 --> 00:02:00,000
两位数了

50
00:02:01,000 --> 00:02:04,000
托你们的福我们才能够保持更新的节奏

51
00:02:05,000 --> 00:02:06,000
没关系

52
00:02:06,000 --> 00:02:08,000
反正这期的话主要是吴涛在说

53
00:02:08,000 --> 00:02:09,000
我只负责听

54
00:02:10,000 --> 00:02:10,000
是这样吗

55
00:02:10,000 --> 00:02:13,000
我怎么为什么我事先没有得到通知

56
00:02:14,000 --> 00:02:15,000
现在你知道了

57
00:02:15,000 --> 00:02:17,000
所以让你写这个题杠

58
00:02:17,000 --> 00:02:20,000
因为这次我们来串台的一个非常重要的主题

59
00:02:20,000 --> 00:02:23,000
宗师级程序员的字体排印解决方案

60
00:02:23,000 --> 00:02:28,000
我们要来终于可以来拜一拜我们的高德纳大先生

61
00:02:29,000 --> 00:02:30,000
其实我不知道你们两个

62
00:02:30,000 --> 00:02:34,000
我跟 Rail 都只是用 Latech 写过论文而已

63
00:02:35,000 --> 00:02:36,000
你们两个就是

64
00:02:36,000 --> 00:02:39,000
或者说不如我们四个人轮流来说一说

65
00:02:39,000 --> 00:02:42,000
怎么知道 Latech 或者说 Tech 这段事情的吧

66
00:02:44,000 --> 00:02:45,000
我先说吧

67
00:02:46,000 --> 00:02:49,000
我应该是在本科的时候知道的这个人他的事

68
00:02:49,000 --> 00:02:51,000
以及他写的这本书

69
00:02:52,000 --> 00:02:53,000
但是那个时候我对

70
00:02:53,000 --> 00:02:55,000
Tech 这个东西还没有什么概念

71
00:02:55,000 --> 00:02:58,000
我在本我大概是在本科的时候接触了 Web 编程

72
00:02:58,000 --> 00:03:01,000
然后学了什么 HTML

73
00:03:01,000 --> 00:03:02,000
CSS 之类的

74
00:03:02,000 --> 00:03:04,000
然后那个时候正好是赶上了

75
00:03:04,000 --> 00:03:05,000
Web 前端开发了一次

76
00:03:06,000 --> 00:03:07,000
革新吧就是在

77
00:03:08,000 --> 00:03:10,000
嗯在我上大学之前

78
00:03:10,000 --> 00:03:12,000
Web 开发基本上就是你在你在 photoshop

79
00:03:12,000 --> 00:03:13,000
或者是 whatever 什么

80
00:03:13,000 --> 00:03:15,000
Dreamweaver 之类的地方里面

81
00:03:15,000 --> 00:03:16,000
做一个设计

82
00:03:16,000 --> 00:03:18,000
然后把这个设计切成很多

83
00:03:18,000 --> 00:03:20,000
小块然后

84
00:03:20,000 --> 00:03:23,000
这个设计工具会帮你转换成一个 table

85
00:03:23,000 --> 00:03:27,000
然后你用编程语言去等于轮流

86
00:03:27,000 --> 00:03:29,000
转换这个 table 里面的每一个块

87
00:03:30,000 --> 00:03:31,000
然后在我上大学之后

88
00:03:31,000 --> 00:03:32,000
就我大学毕业之后

89
00:03:32,000 --> 00:03:34,000
Web 开发的标准变成了

90
00:03:34,000 --> 00:03:37,000
你要以语意的方式去描述整个文档的结构

91
00:03:37,000 --> 00:03:38,000
然后

92
00:03:38,000 --> 00:03:40,000
用 css 去改变每个文档的

93
00:03:41,000 --> 00:03:42,000
样式

94
00:03:43,000 --> 00:03:46,000
然后大概就是在这个时候我隐约听说了在

95
00:03:46,000 --> 00:03:48,000
在桌面出版界也有这么一个东西

96
00:03:48,000 --> 00:03:49,000
就叫 Tech

97
00:03:49,000 --> 00:03:53,000
但是真正用到它还是到了德国之后写

98
00:03:53,000 --> 00:03:54,000
说是论文的时候

99
00:03:54,000 --> 00:03:58,000
就大概明白了这个东西它的来历以及它的用处

100
00:03:58,000 --> 00:04:02,000
然后怎么说用自己对 HTML 和 css 的理解去

101
00:04:03,000 --> 00:04:05,000
去使用它然后碰着头破血流

102
00:04:05,000 --> 00:04:09,000
然后在历经了坎坷之后终于把论文搞出来了

103
00:04:09,000 --> 00:04:12,000
这大概就是我跟 Tech 的全部的渊源

104
00:04:12,000 --> 00:04:14,000
然后我在毕业之后

105
00:04:14,000 --> 00:04:17,000
2010 年刚刚加入 tib 的时候

106
00:04:17,000 --> 00:04:18,000
对 tib 的贡献之一

107
00:04:18,000 --> 00:04:22,000
就是我在 2010 年写过一篇 computer modern 的故事

108
00:04:22,000 --> 00:04:24,000
就是高丹娜发明的

109
00:04:24,000 --> 00:04:24,000
不是她发明的

110
00:04:24,000 --> 00:04:27,000
她电子数字化了这款字体

111
00:04:27,000 --> 00:04:31,000
然后用来排她的 plcp 的这本书

112
00:04:31,000 --> 00:04:36,000
基本上基本上简短的解释了这个 Latif 的整个的渊源

113
00:04:36,000 --> 00:04:37,000
各位如果有兴趣的话

114
00:04:37,000 --> 00:04:41,000
可以去看一下那个文章在 theTib.com

115
00:04:42,000 --> 00:04:44,000
然后你可以在上面搜 computer modern

116
00:04:44,000 --> 00:04:46,000
然后应该能搜到这篇文章

117
00:04:46,000 --> 00:04:48,000
是 2010 年 2 月 05 号写的

118
00:04:49,000 --> 00:04:51,000
当然我们也会把这篇文章的链接

119
00:04:51,000 --> 00:04:53,000
放到今天的 show notes 里面去

120
00:04:53,000 --> 00:04:56,000
大家可以去看 2010 年时候的文章

121
00:04:58,000 --> 00:04:58,000
我说完了

122
00:04:58,000 --> 00:05:00,000
接下来是 rex

123
00:05:03,000 --> 00:05:04,000
新系站长

124
00:05:05,000 --> 00:05:06,000
那个 reo 你说一下

125
00:05:07,000 --> 00:05:12,000
我第一次接触应该是用 latif 写那个时候

126
00:05:12,000 --> 00:05:12,000
对等一下

127
00:05:12,000 --> 00:05:13,000
这玩意到底怎么念

128
00:05:13,000 --> 00:05:15,000
我们要不要先科普一下

129
00:05:15,000 --> 00:05:16,000
latif 你念的是对的

130
00:05:16,000 --> 00:05:19,000
是 la 不是 la 对吧

131
00:05:19,000 --> 00:05:21,000
反正我一直念 latif

132
00:05:22,000 --> 00:05:23,000
其实有人念 la 的

133
00:05:23,000 --> 00:05:26,000
但是一般我们都念 la

134
00:05:26,000 --> 00:05:26,000
好的

135
00:05:26,000 --> 00:05:30,000
我当时是在上大学本科的时候

136
00:05:30,000 --> 00:05:32,000
然后写作业

137
00:05:32,000 --> 00:05:34,000
然后我因为我不是写字

138
00:05:34,000 --> 00:05:35,000
就是手写很丑

139
00:05:35,000 --> 00:05:37,000
然后我就不想手写

140
00:05:37,000 --> 00:05:39,000
我都一直从大概

141
00:05:39,000 --> 00:05:42,000
大学开始基本上教作业都没有手写过

142
00:05:42,000 --> 00:05:43,000
除了考试是必须手写的

143
00:05:43,000 --> 00:05:45,000
那时候都是用电脑

144
00:05:46,000 --> 00:05:47,000
排版好

145
00:05:47,000 --> 00:05:48,000
然后去打印

146
00:05:48,000 --> 00:05:48,000
然后再教

147
00:05:49,000 --> 00:05:51,000
后来是因为学科的

148
00:05:51,000 --> 00:05:53,000
就是你有几个课程的关系

149
00:05:53,000 --> 00:05:57,000
它会涉及到比较多的公式

150
00:05:57,000 --> 00:05:59,000
和数学的一些排版

151
00:05:59,000 --> 00:06:02,000
还有像一些这种图形什么的

152
00:06:02,000 --> 00:06:06,000
然后我就想说找一个特别好用的一个工具

153
00:06:06,000 --> 00:06:07,000
来解决这个问题

154
00:06:07,000 --> 00:06:09,000
当时 word 肯定是不行的

155
00:06:09,000 --> 00:06:09,000
对吧

156
00:06:09,000 --> 00:06:10,000
当时 word 很久已经没有

157
00:06:11,000 --> 00:06:14,000
数学排版工具实在是太垃圾了

158
00:06:15,000 --> 00:06:16,000
所以后来就多多转转

159
00:06:16,000 --> 00:06:20,000
当时也在玩像 Linux 那些系统

160
00:06:20,000 --> 00:06:22,000
然后就在找到了这么一个工具

161
00:06:22,000 --> 00:06:24,000
应该是受了谁的

162
00:06:25,000 --> 00:06:26,000
蛊惑来着我想想

163
00:06:26,000 --> 00:06:27,000
应该是王盈

164
00:06:27,000 --> 00:06:29,000
如果没记错的话

165
00:06:29,000 --> 00:06:30,000
对

166
00:06:30,000 --> 00:06:32,000
当时他不是写了有几篇

167
00:06:32,000 --> 00:06:33,000
还影响挺深的一个文章

168
00:06:33,000 --> 00:06:36,000
其中就是在兜售拉太海这个东西

169
00:06:36,000 --> 00:06:37,000
然后我就去学了一下

170
00:06:37,000 --> 00:06:39,000
然后费了牛逼自尽

171
00:06:39,000 --> 00:06:42,000
装上了一个我们叫什么

172
00:06:42,000 --> 00:06:43,000
一个是 distribution

173
00:06:43,000 --> 00:06:45,000
然后就开始用那个写作业

174
00:06:45,000 --> 00:06:47,000
然后后来是写毕业论文

175
00:06:47,000 --> 00:06:48,000
然后去国外上学

176
00:06:49,000 --> 00:06:51,000
写作业和毕业论文差不多也就这么改

177
00:06:51,000 --> 00:06:52,000
然后之后就再也没用过

178
00:06:53,000 --> 00:06:54,000
差不多是这么一个过程

179
00:06:55,000 --> 00:06:57,000
所以你的论文也是用拉太海写的

180
00:06:58,000 --> 00:06:59,000
我毕竟读 CS

181
00:06:59,000 --> 00:07:00,000
那肯定还是要

182
00:07:01,000 --> 00:07:01,000
对吧

183
00:07:02,000 --> 00:07:04,000
这两者之间有毕业的关联吗

184
00:07:04,000 --> 00:07:05,000
就是

185
00:07:05,000 --> 00:07:09,000
我相信大部分我们听众里面读 CS 的人

186
00:07:09,000 --> 00:07:10,000
也未必是用拉太海写的

187
00:07:11,000 --> 00:07:12,000
那或者这么说吧

188
00:07:12,000 --> 00:07:14,000
如果你又想用拉太海写的

189
00:07:14,000 --> 00:07:14,000
写论文

190
00:07:14,000 --> 00:07:16,000
然后你又不是 CS 的

191
00:07:16,000 --> 00:07:17,000
你是不是是不是很尴尬

192
00:07:17,000 --> 00:07:18,000
那可不一定啊

193
00:07:18,000 --> 00:07:19,000
拉太海

194
00:07:19,000 --> 00:07:23,000
其实现在基本上你觉得现在拉太海最大的用途是在哪

195
00:07:23,000 --> 00:07:25,000
就我觉得是

196
00:07:27,000 --> 00:07:30,000
任何业界需要公式的地方

197
00:07:30,000 --> 00:07:33,000
但实际上 computer science 并不是一个最需要公式的地方

198
00:07:33,000 --> 00:07:34,000
OK

199
00:07:34,000 --> 00:07:35,000
那个时候我需要

200
00:07:35,000 --> 00:07:36,000
然后

201
00:07:36,000 --> 00:07:38,000
但我当时有一个

202
00:07:38,000 --> 00:07:39,000
但我们在学校外面租房子住

203
00:07:39,000 --> 00:07:40,000
有一个室友

204
00:07:40,000 --> 00:07:42,000
然后他是读工程的

205
00:07:42,000 --> 00:07:43,000
就是那种 engineering

206
00:07:43,000 --> 00:07:45,000
他好像也是用拉太海写的

207
00:07:45,000 --> 00:07:46,000
毕业论文比较多

208
00:07:46,000 --> 00:07:47,000
因为他们论文也比较长

209
00:07:47,000 --> 00:07:49,000
有比较多复杂的计算的过程

210
00:07:49,000 --> 00:07:51,000
所以他们也是用那个的

211
00:07:51,000 --> 00:07:52,000
所以反正

212
00:07:52,000 --> 00:07:52,000
就是

213
00:07:53,000 --> 00:07:54,000
都在用

214
00:07:54,000 --> 00:07:57,000
就反而是用 word 的那些是比较相对来说少一点点的

215
00:07:59,000 --> 00:07:59,000
对

216
00:07:59,000 --> 00:08:01,000
真鱼你是怎么用上

217
00:08:01,000 --> 00:08:03,000
你是怎么接触到 tech 的吗

218
00:08:03,000 --> 00:08:04,000
你介绍一下好了

219
00:08:05,000 --> 00:08:09,000
其实真鱼也是本科用拉太海写的论文

220
00:08:10,000 --> 00:08:11,000
怎么可能

221
00:08:12,000 --> 00:08:14,000
我觉得我应该我应该引用那个

222
00:08:14,000 --> 00:08:17,000
就是你们先聊我有点事先走

223
00:08:18,000 --> 00:08:19,000
我其实没有

224
00:08:19,000 --> 00:08:22,000
我其实至今没有用过 tech 来做

225
00:08:23,000 --> 00:08:24,000
任何

226
00:08:24,000 --> 00:08:25,000
任何事情

227
00:08:25,000 --> 00:08:26,000
我应该说对

228
00:08:26,000 --> 00:08:27,000
怎么知道 tech 的

229
00:08:27,000 --> 00:08:29,000
我觉得我是因为先知道了你们

230
00:08:29,000 --> 00:08:30,000
所以才知道了 tech

231
00:08:32,000 --> 00:08:33,000
对我们受宠若惊啊

232
00:08:33,000 --> 00:08:34,000
我们简直

233
00:08:35,000 --> 00:08:36,000
居然做到了什么

234
00:08:36,000 --> 00:08:38,000
新进火船的这样一个

235
00:08:38,000 --> 00:08:40,000
对我对太海认知其实是一个就是

236
00:08:40,000 --> 00:08:42,000
就像刚才瑞和

237
00:08:42,000 --> 00:08:43,000
吴涛也说的

238
00:08:43,000 --> 00:08:46,000
就是他是一个在公式领域非常有用的

239
00:08:46,000 --> 00:08:47,000
这样子的一个排版工具

240
00:08:47,000 --> 00:08:48,000
但其实

241
00:08:48,000 --> 00:08:50,000
我曾经大概在

242
00:08:50,000 --> 00:08:51,000
可能在五六年前吧

243
00:08:51,000 --> 00:08:54,000
一度有有想过要去用太海

244
00:08:54,000 --> 00:08:55,000
因为我当时有一个

245
00:08:55,000 --> 00:08:56,000
非常实际的需求

246
00:08:56,000 --> 00:08:59,000
就是我当时差不多每个季度都会有一个

247
00:09:00,000 --> 00:09:01,000
类似像

248
00:09:02,000 --> 00:09:04,000
内部刊物排版的这样一个工作

249
00:09:04,000 --> 00:09:05,000
那个刊物的业数非常的多

250
00:09:05,000 --> 00:09:09,000
大概是在千页这样子的一个数量级的

251
00:09:09,000 --> 00:09:11,000
所以我当时其实有想过要用 tech 去做一个

252
00:09:11,000 --> 00:09:14,000
比较自动化的排版的流程

253
00:09:14,000 --> 00:09:17,000
但后来一直一直没有动力去做这个事情

254
00:09:17,000 --> 00:09:17,000
等等

255
00:09:17,000 --> 00:09:20,000
你说你每个月要排 1000 页的内部刊物

256
00:09:20,000 --> 00:09:21,000
每个季度左右

257
00:09:21,000 --> 00:09:23,000
对每个季度三三个月左右

258
00:09:23,000 --> 00:09:26,000
每个季每三个月要排 1000 页

259
00:09:26,000 --> 00:09:27,000
oh my god

260
00:09:27,000 --> 00:09:31,000
我问不禁心里勇气的一丝怎么说同情

261
00:09:31,000 --> 00:09:34,000
什么内容啊好奇的问一下

262
00:09:34,000 --> 00:09:37,000
是我当时在的一个团队

263
00:09:37,000 --> 00:09:38,000
我们自己做的一些出版

264
00:09:38,000 --> 00:09:40,000
其实这个大家可以找到的

265
00:09:40,000 --> 00:09:41,000
我当时在那个团队叫镇建

266
00:09:41,000 --> 00:09:44,000
然后我们当时的出版物是以季刊

267
00:09:44,000 --> 00:09:46,000
或者半年刊的方式来发布的

268
00:09:46,000 --> 00:09:48,000
其实是将大家写的一些文章合起来

269
00:09:48,000 --> 00:09:51,000
当然这个 1000 页的开本是一个

270
00:09:51,000 --> 00:09:52,000
A 5 左右的开本

271
00:09:52,000 --> 00:09:54,000
而且字号相对算是比较大的

272
00:09:54,000 --> 00:09:57,000
所以工作量可能没有那么的多

273
00:09:57,000 --> 00:09:59,000
但大概也有这样子的一个量子

274
00:09:59,000 --> 00:10:00,000
A 5 就是 A 4 的一半

275
00:10:00,000 --> 00:10:03,000
1000 页 A 5 那也有 500 页的 A 4

276
00:10:03,000 --> 00:10:04,000
那也是非常厚的一本书

277
00:10:05,000 --> 00:10:06,000
对

278
00:10:08,000 --> 00:10:11,000
我知道珍宇一直都在做镇建

279
00:10:11,000 --> 00:10:16,000
但是我没有想到当时有每个季度 1000 多页的量

280
00:10:16,000 --> 00:10:19,000
就是因为我也没认真看

281
00:10:19,000 --> 00:10:20,000
有的时候会少一点

282
00:10:20,000 --> 00:10:23,000
可能几百页多的时候会比较多

283
00:10:23,000 --> 00:10:24,000
你们继续

284
00:10:24,000 --> 00:10:26,000
艾瑞克来说一下

285
00:10:26,000 --> 00:10:27,000
好

286
00:10:28,000 --> 00:10:30,000
我也是在大学的时候

287
00:10:30,000 --> 00:10:32,000
第一次知道 Teche 的

288
00:10:32,000 --> 00:10:35,000
每次在这个串台的时候都要说到

289
00:10:35,000 --> 00:10:41,000
我的大学的第二学士是计算机的这样一个黑历史

290
00:10:41,000 --> 00:10:45,000
但是我那时候第二学位的论文

291
00:10:45,000 --> 00:10:48,000
并不需要用那么多公式

292
00:10:48,000 --> 00:10:54,000
所以我们当时的第二学位的论文不是用 Teche 写的

293
00:10:54,000 --> 00:10:56,000
我第一学位大家知道我是学日语的

294
00:10:56,000 --> 00:10:59,000
那就更是不用大家都用 World

295
00:11:00,000 --> 00:11:02,000
我用 Teche 的是因为

296
00:11:02,000 --> 00:11:03,000
因为我高中也是学理科的

297
00:11:03,000 --> 00:11:07,000
所以就要做一些什么卷子之类的那些东西

298
00:11:07,000 --> 00:11:08,000
都是用 World 排的公式

299
00:11:08,000 --> 00:11:10,000
然后觉得很难用

300
00:11:10,000 --> 00:11:13,000
到了大学本科以后有同学介绍说

301
00:11:13,000 --> 00:11:15,000
理工科的真的就是理工科的东西

302
00:11:15,000 --> 00:11:17,000
他们都用 Teche

303
00:11:17,000 --> 00:11:18,000
所以我就拿来用了

304
00:11:18,000 --> 00:11:19,000
可是这个东西太难用

305
00:11:19,000 --> 00:11:20,000
就是因为要组装

306
00:11:21,000 --> 00:11:23,000
各种各样的包怎么搞不清楚

307
00:11:23,000 --> 00:11:26,000
所以我当时就是为了解决临时的问题

308
00:11:26,000 --> 00:11:31,000
我干脆就是用一个 Teche 先排出需要的公式

309
00:11:31,000 --> 00:11:33,000
然后生成 PDF 以后

310
00:11:33,000 --> 00:11:36,000
然后再把 PDF 转取以后再嵌到我

311
00:11:36,000 --> 00:11:39,000
比如说我用那个 illustrate 给它嵌进来

312
00:11:39,000 --> 00:11:43,000
我就是为了排这个公式临时给它嵌进来而已

313
00:11:43,000 --> 00:11:44,000
我从来没有用 Teche

314
00:11:44,000 --> 00:11:48,000
就做个完整的一个文档

315
00:11:48,000 --> 00:11:49,000
或者就是中文的文档

316
00:11:49,000 --> 00:11:50,000
我从来没有做过

317
00:11:51,000 --> 00:11:54,000
我就是为了导出一个单独的一个公式

318
00:11:54,000 --> 00:11:57,000
然后就生成一个东西就做过而已

319
00:11:57,000 --> 00:11:59,000
其实我要补充一下

320
00:11:59,000 --> 00:12:01,000
刚才其实我们都一直在讲

321
00:12:01,000 --> 00:12:05,000
是因为为了数学公式才用的这个

322
00:12:05,000 --> 00:12:07,000
后来我刚翻了一下

323
00:12:07,000 --> 00:12:13,000
我之前写的那些什么作业和论文的那些文档

324
00:12:13,000 --> 00:12:14,000
刚好还在电脑里面

325
00:12:14,000 --> 00:12:17,000
其实是发现数学公式也不算特别多

326
00:12:17,000 --> 00:12:21,000
但是其实有很多像什么程序代码

327
00:12:21,000 --> 00:12:24,000
你知道读 CS 它很多是那种伪代码

328
00:12:24,000 --> 00:12:28,000
并不是真的那种你要用等宽字体排印的那种

329
00:12:28,000 --> 00:12:30,000
真的我们可以编译的那种代码

330
00:12:30,000 --> 00:12:32,000
它很多是伪代码是不等宽

331
00:12:32,000 --> 00:12:34,000
然后有各种很多稀奇古怪的箭头符号

332
00:12:34,000 --> 00:12:35,000
那种东西的

333
00:12:35,000 --> 00:12:37,000
比如点心的一个

334
00:12:37,000 --> 00:12:39,000
比如说 Grammar 的那些 Lexer 那些东西

335
00:12:39,000 --> 00:12:42,000
然后还有一个就是当时我想起来了

336
00:12:42,000 --> 00:12:45,000
当时为了用这个东西是为了画那个

337
00:12:46,000 --> 00:12:47,000
这个叫什么

338
00:12:47,000 --> 00:12:50,000
Automata 自动机的那个图形

339
00:12:51,000 --> 00:12:53,000
然后当时用了一个

340
00:12:53,000 --> 00:12:55,000
那个就是 Latech 有一个专门

341
00:12:55,000 --> 00:12:57,000
这种因为 Latech 比较灵活

342
00:12:57,000 --> 00:12:59,000
它可以做很多的插件

343
00:12:59,000 --> 00:13:01,000
但是有一个非常好用的插件

344
00:13:01,000 --> 00:13:03,000
应该叫做 Tikz

345
00:13:03,000 --> 00:13:04,000
如果没记错名字的话

346
00:13:04,000 --> 00:13:05,000
Tikz 对

347
00:13:06,000 --> 00:13:06,000
怎么念

348
00:13:06,000 --> 00:13:07,000
我不知道

349
00:13:07,000 --> 00:13:09,000
反正它的就是四个字母

350
00:13:09,000 --> 00:13:10,000
Tikz 应该是 Tikz

351
00:13:10,000 --> 00:13:12,000
我念 Tikz

352
00:13:12,000 --> 00:13:13,000
对它就非常灵活

353
00:13:13,000 --> 00:13:15,000
等于是一套类似于

354
00:13:15,000 --> 00:13:17,000
您可以认为是一个可编程的

355
00:13:17,000 --> 00:13:19,000
会图的一个语言

356
00:13:19,000 --> 00:13:21,000
然后嵌在那个 Latech 里面

357
00:13:21,000 --> 00:13:23,000
就可以做各种各样的

358
00:13:23,000 --> 00:13:24,000
非常精美的图形

359
00:13:24,000 --> 00:13:27,000
比如说你要这个箭头转个 35 度半

360
00:13:27,000 --> 00:13:30,000
然后再和另外一个圆圈连起来

361
00:13:30,000 --> 00:13:32,000
再穿过那个圆心种之类的事情

362
00:13:32,000 --> 00:13:35,000
就是你用任何其他的现成的工具

363
00:13:35,000 --> 00:13:36,000
都是没法去描述这个东西的

364
00:13:36,000 --> 00:13:37,000
精确描述

365
00:13:38,000 --> 00:13:40,000
所以就是当时有

366
00:13:40,000 --> 00:13:42,000
其实公式到并不是我

367
00:13:43,000 --> 00:13:44,000
用它的最核心的一个事情

368
00:13:44,000 --> 00:13:45,000
我后来发现

369
00:13:45,000 --> 00:13:47,000
然后还有一个事就是刚才

370
00:13:47,000 --> 00:13:48,000
真鱼也提到

371
00:13:48,000 --> 00:13:49,000
这个让我也想起来

372
00:13:49,000 --> 00:13:50,000
就是如果说你的那个文档

373
00:13:50,000 --> 00:13:51,000
不要说 1000 页了

374
00:13:52,000 --> 00:13:54,000
就超过比如说 100 页吧

375
00:13:54,000 --> 00:13:55,000
然后你用这种任何

376
00:13:56,000 --> 00:13:57,000
这种所见即所得的编辑工具

377
00:13:57,000 --> 00:13:58,000
Mord 也好

378
00:13:58,000 --> 00:14:00,000
当时还试过各种什么

379
00:14:00,000 --> 00:14:02,000
OpenOffice 这种东西

380
00:14:02,000 --> 00:14:04,000
就是它的那个性能是直线下降的

381
00:14:04,000 --> 00:14:06,000
就是已经超过几十

382
00:14:06,000 --> 00:14:08,000
就三位数的页码就基本上没法用

383
00:14:08,000 --> 00:14:10,000
那个时候我记得用的那个

384
00:14:10,000 --> 00:14:12,000
那个电脑的性能也一般

385
00:14:12,000 --> 00:14:14,000
然后如果是特别长的文档

386
00:14:14,000 --> 00:14:15,000
就你一次编

387
00:14:15,000 --> 00:14:17,000
因为那个 Lattex 每次叫编译一次

388
00:14:17,000 --> 00:14:18,000
才能输出那个 PDF 的结果

389
00:14:18,000 --> 00:14:20,000
那个编译时间也还蛮长的

390
00:14:20,000 --> 00:14:21,000
后来就是分

391
00:14:21,000 --> 00:14:22,000
分成那个章节

392
00:14:22,000 --> 00:14:22,000
对吧

393
00:14:22,000 --> 00:14:24,000
我只我在当时我在写这个章节

394
00:14:24,000 --> 00:14:26,000
我就我就只编译当前那个章节

395
00:14:26,000 --> 00:14:28,000
然后最后再合在一起的时候

396
00:14:28,000 --> 00:14:30,000
我在这个合在一起在编译

397
00:14:30,000 --> 00:14:31,000
这样就可以节省那个时间嘛

398
00:14:31,000 --> 00:14:33,000
虽然也不是所见即所得

399
00:14:33,000 --> 00:14:35,000
但是整个它的那个 Feedback Loop

400
00:14:35,000 --> 00:14:37,000
就是还是比较比较快的

401
00:14:38,000 --> 00:14:41,000
对就实际上你的书大到一个规模的时候

402
00:14:41,000 --> 00:14:44,000
你就必须用管理源带码的方式来管理场面

403
00:14:44,000 --> 00:14:47,000
就其实作家也同样面临着类似的问题

404
00:14:47,000 --> 00:14:49,000
比如说你会遇到什么版本控制

405
00:14:49,000 --> 00:14:51,000
或者是插图方面的问题

406
00:14:51,000 --> 00:14:52,000
这个时候所见即所得

407
00:14:52,000 --> 00:14:55,000
实际上并不是一个非常好的解决方式

408
00:14:57,000 --> 00:15:00,000
就是总结一下刚才大家的自我描述

409
00:15:00,000 --> 00:15:04,000
我们会发现公式实际上是 Tag 的一个 killer app

410
00:15:04,000 --> 00:15:06,000
这其实跟我现在观察也相似

411
00:15:06,000 --> 00:15:11,000
就是 Lathek 虽然是一个非常怎么说高大上的系统

412
00:15:11,000 --> 00:15:17,000
但是它目前它的发展的这样一个定位

413
00:15:17,000 --> 00:15:20,000
实际上是在一个非常精细的领域

414
00:15:20,000 --> 00:15:23,000
就是公式编辑

415
00:15:23,000 --> 00:15:25,000
以及部分的插图方面

416
00:15:26,000 --> 00:15:29,000
你说我们现在这么多出版物

417
00:15:29,000 --> 00:15:30,000
有哪个出版物

418
00:15:30,000 --> 00:15:33,000
你听说是纯粹用 Lathek 来编排的吗

419
00:15:33,000 --> 00:15:34,000
好像也没有

420
00:15:34,000 --> 00:15:39,000
Lathek 现在可能是一个个人出版的 specialized 的一个巅峰

421
00:15:40,000 --> 00:15:41,000
但是我觉得它在公共领域

422
00:15:41,000 --> 00:15:43,000
好像没有获得那么广泛的应用

423
00:15:43,000 --> 00:15:46,000
至少你跟什么 page maker 或者是

424
00:15:47,000 --> 00:15:48,000
这个就是看领域了

425
00:15:48,000 --> 00:15:51,000
反正我觉得理工科类的还有

426
00:15:51,000 --> 00:15:54,000
因为理工科类的所有的论文

427
00:15:54,000 --> 00:15:55,000
还有那些期刊的话

428
00:15:55,000 --> 00:15:58,000
它既收 Lathek 的论文

429
00:15:58,000 --> 00:16:00,000
它自己出的话也是用 Tag 出的

430
00:16:00,000 --> 00:16:01,000
就是期刊

431
00:16:02,000 --> 00:16:03,000
然后在日本的话

432
00:16:03,000 --> 00:16:05,000
比如说像理工科类字典

433
00:16:05,000 --> 00:16:07,000
它整本字典都是用 Tag 出的

434
00:16:07,000 --> 00:16:08,000
真的

435
00:16:08,000 --> 00:16:10,000
整本字典是用 Lathek 来做的

436
00:16:10,000 --> 00:16:11,000
对有的

437
00:16:11,000 --> 00:16:12,000
在日本是有的

438
00:16:12,000 --> 00:16:14,000
研播数学词典的第四版

439
00:16:14,000 --> 00:16:17,000
就是全部都用 Lathek 写的

440
00:16:17,000 --> 00:16:19,000
如果说确切的话是

441
00:16:19,000 --> 00:16:22,000
P Lathek 的 2 E 版本

442
00:16:24,000 --> 00:16:25,000
首先因为它是字典

443
00:16:25,000 --> 00:16:27,000
然后肯定是有一个 P 处理的东西

444
00:16:27,000 --> 00:16:30,000
因为你知道字典的每个词条

445
00:16:30,000 --> 00:16:32,000
它是非常有规范化的一个 format 的东西

446
00:16:33,000 --> 00:16:34,000
然后它又是理工类字的

447
00:16:34,000 --> 00:16:35,000
里面有很多公式

448
00:16:37,000 --> 00:16:39,000
我也是很多人入门 Lathek

449
00:16:39,000 --> 00:16:41,000
比如说他要写个论文

450
00:16:41,000 --> 00:16:43,000
但是大部分写论文的人

451
00:16:44,000 --> 00:16:46,000
我们说 90%的人写了论文之后

452
00:16:46,000 --> 00:16:49,000
可能就不会再写第二次论文了

453
00:16:49,000 --> 00:16:51,000
对于很多人来说

454
00:16:51,000 --> 00:16:52,000
Lathek 的学习过程

455
00:16:52,000 --> 00:16:54,000
可能是一生一次的事情

456
00:16:54,000 --> 00:16:56,000
大概跟追姑娘差不多

457
00:16:56,000 --> 00:16:57,000
你可能追一次

458
00:16:57,000 --> 00:16:59,000
你就不用再追第二次了

459
00:16:59,000 --> 00:17:02,000
但是真正会一直把 Lathek

460
00:17:02,000 --> 00:17:03,000
用不下去的人

461
00:17:03,000 --> 00:17:05,000
大部分都是会继承学术界的

462
00:17:05,000 --> 00:17:07,000
或者是学术出版界的

463
00:17:08,000 --> 00:17:11,000
这非学术界基本上不会有这种

464
00:17:11,000 --> 00:17:14,000
工业化或者是产业化的需求

465
00:17:14,000 --> 00:17:16,000
除非你是在排版行业生活的

466
00:17:16,000 --> 00:17:19,000
那基本上不会有这个需求

467
00:17:20,000 --> 00:17:22,000
我觉得你一个人写论文

468
00:17:22,000 --> 00:17:25,000
其实就大概是一个个人出版的这么一个巅峰了

469
00:17:25,000 --> 00:17:28,000
你写一个了不起三五百页的论文

470
00:17:29,000 --> 00:17:31,000
毕业级别

471
00:17:31,000 --> 00:17:35,000
对这已经是巅峰级别的一个 Lathek 的应用了

472
00:17:35,000 --> 00:17:38,000
然后在个人出版领域

473
00:17:39,000 --> 00:17:42,000
但是在公共出版领域可能一本数学词典

474
00:17:42,000 --> 00:17:45,000
而且我觉得数学词典用 Lathek 的一个很大原因

475
00:17:45,000 --> 00:17:46,000
也是因为公式

476
00:17:46,000 --> 00:17:50,000
我们是不是应该还是给你抢稿了

477
00:17:50,000 --> 00:17:52,000
我觉得好像有点带偏了

478
00:17:53,000 --> 00:17:54,000
没关系

479
00:17:54,000 --> 00:17:56,000
因为我们是串台节目

480
00:17:56,000 --> 00:18:00,000
说实话从自谈之上这边过来的听众很多都是设计师

481
00:18:00,000 --> 00:18:05,000
所以他们就从来就没有接触到也不知道 Lathek 是个什么东西

482
00:18:05,000 --> 00:18:08,000
所以我觉得还是得从头到尾给大家解释一下

483
00:18:08,000 --> 00:18:09,000
然后刚才也说了

484
00:18:09,000 --> 00:18:12,000
因为这个东西挺局限于理工科类的

485
00:18:13,000 --> 00:18:15,000
其他领域的人可能也都不知道

486
00:18:15,000 --> 00:18:17,000
即使是理工科类的朋友们

487
00:18:17,000 --> 00:18:20,000
他们可能就一辈子也就是为了写论文用一下而已

488
00:18:20,000 --> 00:18:22,000
然后之后就再也没用过

489
00:18:23,000 --> 00:18:25,000
前因后果可能也不是很清楚

490
00:18:25,000 --> 00:18:30,000
对所以还是要从我们的大师高德纳先生开始说起吧

491
00:18:30,000 --> 00:18:31,000
考古开始

492
00:18:33,000 --> 00:18:34,000
行那我来吧

493
00:18:36,000 --> 00:18:40,000
我们今天这个 Podcast 标题所谓宗师级程序员

494
00:18:40,000 --> 00:18:41,000
其实指的就是一个人

495
00:18:41,000 --> 00:18:44,000
这个人叫做 Donald E. Knute

496
00:18:44,000 --> 00:18:46,000
他有一个中文名字叫做高德纳

497
00:18:47,000 --> 00:18:49,000
他从 1969 年开始写一本书

498
00:18:49,000 --> 00:18:52,000
这本书叫做 The Art of Computer Programming

499
00:18:52,000 --> 00:18:55,000
这本书的简称是 T-A-O-C-P

500
00:18:56,000 --> 00:18:57,000
他到现在应该还没写完

501
00:18:57,000 --> 00:18:59,000
据我所知还没写完

502
00:18:59,000 --> 00:19:01,000
这本书是有中译版的

503
00:19:01,000 --> 00:19:04,000
就是各位有兴趣的话可以可以在网上看一下预览

504
00:19:04,000 --> 00:19:05,000
有吗

505
00:19:05,000 --> 00:19:06,000
哦有中译版我都不知道

506
00:19:06,000 --> 00:19:10,000
对我在我在中国应该是买了中译版的第一卷

507
00:19:10,000 --> 00:19:13,000
这样然后他在 1969 年的时候

508
00:19:13,000 --> 00:19:14,000
开始写这本书

509
00:19:14,000 --> 00:19:18,000
第一卷的排印用的是 Monotype 的排字机

510
00:19:18,000 --> 00:19:21,000
就是那个时候是完全机械的排字机对吧

511
00:19:21,000 --> 00:19:22,000
自动助排机

512
00:19:22,000 --> 00:19:25,000
对一个一个非常硬核的这么一个

513
00:19:25,000 --> 00:19:27,000
就他很喜欢 Monotype 排字机

514
00:19:27,000 --> 00:19:30,000
然后他是当时在美国的 Monotype 的排字机排的

515
00:19:30,000 --> 00:19:32,000
然后他第二卷什么时候写好了呢

516
00:19:32,000 --> 00:19:33,000
是 7 年

517
00:19:33,000 --> 00:19:34,000
7 年之后才写了

518
00:19:35,000 --> 00:19:36,000
7 年之后是

519
00:19:36,000 --> 00:19:37,000
因为 1976 年

520
00:19:38,000 --> 00:19:39,000
不对不对

521
00:19:40,000 --> 00:19:40,000
不对

522
00:19:41,000 --> 00:19:45,000
1976 年他是第二卷要重排的时候

523
00:19:45,000 --> 00:19:45,000
哦那就对啊

524
00:19:45,000 --> 00:19:46,000
OK

525
00:19:46,000 --> 00:19:48,000
那就第二卷的一个 revision 完成的时候

526
00:19:48,000 --> 00:19:50,000
他不得不转向激光照

527
00:19:51,000 --> 00:19:52,000
不是激光照

528
00:19:52,000 --> 00:19:54,000
就是普通的这个照相照拍机

529
00:19:54,000 --> 00:19:55,000
照相排印机来排版

530
00:19:56,000 --> 00:20:00,000
但是他拿到了那个叫所谓 Galley Proof

531
00:20:00,000 --> 00:20:02,000
就是样板的时候

532
00:20:02,000 --> 00:20:05,000
他他大概说了一句话就是 blah

533
00:20:06,000 --> 00:20:07,000
就这么一个

534
00:20:08,000 --> 00:20:09,000
感叹词吧

535
00:20:09,000 --> 00:20:10,000
就是觉得我靠这是什么

536
00:20:12,000 --> 00:20:14,000
这句话的翻译叫这什么屎

537
00:20:15,000 --> 00:20:18,000
就是这个哎呀我去这种感觉

538
00:20:20,000 --> 00:20:20,000
然后

539
00:20:21,000 --> 00:20:22,000
他非常失望

540
00:20:22,000 --> 00:20:25,000
至于他做一件只有宗师级的程序

541
00:20:25,000 --> 00:20:27,000
能做的事情就是他决定自己开发一套

542
00:20:27,000 --> 00:20:29,000
系统来完成排版这件事情

543
00:20:29,000 --> 00:20:30,000
就是

544
00:20:30,000 --> 00:20:31,000
from scratch

545
00:20:32,000 --> 00:20:35,000
然后他首先他发明了一种变成语言

546
00:20:35,000 --> 00:20:37,000
这种变成语言叫 web

547
00:20:37,000 --> 00:20:41,000
就是跟我们那个万为网 web 没有关联

548
00:20:41,000 --> 00:20:43,000
他就叫 web 这种变成语言

549
00:20:44,000 --> 00:20:45,000
然后他用这种变成语言

550
00:20:46,000 --> 00:20:47,000
首先开发了一种字体

551
00:20:48,000 --> 00:20:49,000
这种字体叫 meta font

552
00:20:49,000 --> 00:20:53,000
不他开发了一种用于画字体的系统

553
00:20:53,000 --> 00:20:54,000
叫做 meta font

554
00:20:55,000 --> 00:20:59,000
meta 这个前缀就是什么什么的什么什么

555
00:20:59,000 --> 00:21:02,000
比如说我叫 meta fox 就是 fox fox

556
00:21:02,000 --> 00:21:04,000
然后他这个 meta font 就是 font font

557
00:21:04,000 --> 00:21:06,000
那么 meta font 的用处就是你

558
00:21:06,000 --> 00:21:08,000
你用一个数学公式

559
00:21:08,000 --> 00:21:10,000
类似数学公式方式描述出

560
00:21:10,000 --> 00:21:12,000
比如说一个字母的几个点

561
00:21:13,000 --> 00:21:14,000
他们之间的相对位置

562
00:21:14,000 --> 00:21:17,000
比如说我说 m 这个字母的相对位置是

563
00:21:18,000 --> 00:21:20,000
下面的三个点彼此的距离是一样的

564
00:21:20,000 --> 00:21:23,000
然后上面的两个点跟下面的三个点怎么相连的

565
00:21:23,000 --> 00:21:28,000
ok 然后 meta font 可以帮你生成出这个字体的

566
00:21:28,000 --> 00:21:32,000
怎么说点阵化的表示来

567
00:21:33,000 --> 00:21:35,000
这是 meta font 然后他用 web

568
00:21:35,000 --> 00:21:37,000
写了另外一套系统叫做 tech

569
00:21:37,000 --> 00:21:41,000
tex 然后这个 tech 的功能呢就是

570
00:21:42,000 --> 00:21:47,000
把你的文章排列出一个可以用于打印的格式来

571
00:21:48,000 --> 00:21:52,000
这个格式叫做 dvi 然后他用自己发明了这套工具

572
00:21:52,000 --> 00:21:53,000
来排了自己的书

573
00:21:53,000 --> 00:21:54,000
大概就是这么一个

574
00:21:55,000 --> 00:21:57,000
听起来好像没有那么怎么样

575
00:21:57,000 --> 00:22:01,000
但是在我们看来就是一个武学宗师开创了一个门派

576
00:22:01,000 --> 00:22:03,000
然后专门拿来做一件事情这么一个级别

577
00:22:04,000 --> 00:22:07,000
然后他这套系统呢就从此开源了

578
00:22:07,000 --> 00:22:10,000
然后广为流传一直活跃到今天

579
00:22:10,000 --> 00:22:13,000
并且这中间有一个比较推波助澜的事情就是

580
00:22:14,000 --> 00:22:16,000
美国数学学会 ams

581
00:22:16,000 --> 00:22:19,000
等于说钦定了 tech 就是他们的

582
00:22:20,000 --> 00:22:22,000
排数学公式的这么一个工具

583
00:22:22,000 --> 00:22:26,000
所以导致基本上整个数学界就采用了 tech 这套东西

584
00:22:26,000 --> 00:22:30,000
那数学我们知道实际上是条条大路通向数学

585
00:22:30,000 --> 00:22:30,000
所以

586
00:22:31,000 --> 00:22:35,000
反过来导致整个科学界基本上在你在使用

587
00:22:35,000 --> 00:22:38,000
这个公式的时候都一定会碰到他

588
00:22:38,000 --> 00:22:41,000
然后大概现在的状况就是这样了

589
00:22:41,000 --> 00:22:44,000
就是他还仍旧是一个被维护的这么一个程序

590
00:22:44,000 --> 00:22:46,000
当然他已经有点过时了

591
00:22:46,000 --> 00:22:47,000
这个我们一会儿会提到

592
00:22:47,000 --> 00:22:47,000
但是

593
00:22:48,000 --> 00:22:51,000
直到现在他都是在一个稳定维护

594
00:22:51,000 --> 00:22:53,000
并且发行中的这么一个程序

595
00:22:53,000 --> 00:22:54,000
这个程序的

596
00:22:55,000 --> 00:22:57,000
历史可以追溯到上个世纪的 70 年代

597
00:22:57,000 --> 00:22:58,000
但是就是这么一个

598
00:22:59,000 --> 00:23:00,000
这么一个过程

599
00:23:00,000 --> 00:23:00,000
然后

600
00:23:01,000 --> 00:23:04,000
有一就是我在 tib 上写的那篇文章

601
00:23:04,000 --> 00:23:06,000
computer modern 大家如果去看的话

602
00:23:06,000 --> 00:23:09,000
会发现那个字体可能有点眼熟

603
00:23:09,000 --> 00:23:10,000
因为如果你 ever

604
00:23:11,000 --> 00:23:13,000
看过一篇比较正式的论文的话

605
00:23:13,000 --> 00:23:15,000
那么他有很大的可能性

606
00:23:15,000 --> 00:23:17,000
现在我觉得可能没那么流行

607
00:23:17,000 --> 00:23:19,000
但是至少在比如说 10 年前或者 5 年前

608
00:23:19,000 --> 00:23:21,000
你去看任何一篇论文

609
00:23:21,000 --> 00:23:24,000
他有可能有八成的概率是用 computer modern 排的

610
00:23:24,000 --> 00:23:25,000
所以当你看到一篇文论文

611
00:23:25,000 --> 00:23:28,000
他是用 computer modern 来排的话

612
00:23:28,000 --> 00:23:30,000
那他有很大很大的概率就是用 lathech 来写

613
00:23:32,000 --> 00:23:32,000
大概是这么一个状况

614
00:23:33,000 --> 00:23:35,000
我跟大家补充一下

615
00:23:35,000 --> 00:23:36,000
就是这个时间点

616
00:23:36,000 --> 00:23:40,000
首先高德纳先生他现年 83 岁

617
00:23:40,000 --> 00:23:43,000
所以大家首先要想到这是一位老先生

618
00:23:43,000 --> 00:23:44,000
而且还健在

619
00:23:44,000 --> 00:23:45,000
对

620
00:23:45,000 --> 00:23:49,000
他还接着写他那套那个计算机程序艺术吗

621
00:23:49,000 --> 00:23:52,000
他本来想是说一共出七卷是吧

622
00:23:52,000 --> 00:23:55,000
结果后来他现在写第四卷

623
00:23:55,000 --> 00:23:56,000
开始写分册了

624
00:23:56,000 --> 00:23:58,000
所以不知道他一共要出多少本

625
00:23:59,000 --> 00:24:02,000
然后这个时间点如果说我们自然自然听众

626
00:24:02,000 --> 00:24:04,000
可能知道我在节目里面讲过很多次

627
00:24:04,000 --> 00:24:06,000
就是我们在做印刷的时候

628
00:24:06,000 --> 00:24:08,000
整个技术有三大技术革新

629
00:24:08,000 --> 00:24:12,000
就是从签字到照牌到现在的桌面出版

630
00:24:12,000 --> 00:24:16,000
那么这个事情发生在美国的六七十年代

631
00:24:16,000 --> 00:24:21,000
其实就是当时从金属活字到照相排版

632
00:24:21,000 --> 00:24:22,000
转变的这样一个过程

633
00:24:22,000 --> 00:24:28,000
高老先生他当时出到第三版是 1973 年

634
00:24:28,000 --> 00:24:32,000
那时候出版社就已经把自动助排机的蒙娜机

635
00:24:32,000 --> 00:24:33,000
就已经卖掉了

636
00:24:34,000 --> 00:24:37,000
所以出版社他自己已经没有蒙娜

637
00:24:37,000 --> 00:24:39,000
签字做自动助排机的东西

638
00:24:39,000 --> 00:24:42,000
所以当时他 75 年的第一版再版的时候

639
00:24:42,000 --> 00:24:46,000
特地把这个书版送到欧洲的

640
00:24:46,000 --> 00:24:49,000
因为当时欧洲还有老的机器可以用

641
00:24:49,000 --> 00:24:53,000
所以特地到欧洲去重新排来给高德纳用

642
00:24:53,000 --> 00:24:56,000
然后等到 76 年要等第二卷再重版

643
00:24:56,000 --> 00:24:59,000
实在是没有花费太大了

644
00:24:59,000 --> 00:25:02,000
从欧洲再倒一次的话成本太高

645
00:25:02,000 --> 00:25:05,000
所以只好用照牌机给他排

646
00:25:05,000 --> 00:25:08,000
然后老先生当时就看这都什么鬼

647
00:25:08,000 --> 00:25:12,000
所以他就重新自己做了一个 Tag 这个排版软件

648
00:25:13,000 --> 00:25:18,000
那么这个 Tag 最初的发布的时间点是 1978 年

649
00:25:18,000 --> 00:25:20,000
也就是 43 年前

650
00:25:20,000 --> 00:25:23,000
43 年前高德纳老先生还是一个 38 岁的

651
00:25:23,000 --> 00:25:24,000
对不对

652
00:25:24,000 --> 00:25:28,000
38 岁的壮年

653
00:25:28,000 --> 00:25:29,000
就跟你现在差不多

654
00:25:29,000 --> 00:25:30,000
我好老

655
00:25:32,000 --> 00:25:34,000
不他要试试该是写你自己的出版系统了

656
00:25:34,000 --> 00:25:35,000
对说的对

657
00:25:36,000 --> 00:25:38,000
我要在我要在怎么说

658
00:25:38,000 --> 00:25:43,000
VR 里面弄一个属于未来的这么一个排版系统

659
00:25:43,000 --> 00:25:44,000
我今天把话搁这了

660
00:25:46,000 --> 00:25:48,000
所以等到现在就是到之后我们也会讨论

661
00:25:48,000 --> 00:25:50,000
可能大家现在站到这个高度

662
00:25:50,000 --> 00:25:53,000
然后就讲为什么还连什么 unicode 都不支持

663
00:25:53,000 --> 00:25:54,000
但 unicode 是什么年代的事情

664
00:25:54,000 --> 00:25:56,000
就他当时写 Tag 的时候 1978 年

665
00:25:56,000 --> 00:26:00,000
那时候 unicode 还在娘胎里面还没出来

666
00:26:01,000 --> 00:26:05,000
那个时候 ASCII 都不是一个比较广为使用的 standard

667
00:26:05,000 --> 00:26:05,000
对

668
00:26:06,000 --> 00:26:08,000
所以 78 年 Tag 诞生

669
00:26:08,000 --> 00:26:12,000
然后高德纳在 1990 年的 9 月份

670
00:26:12,000 --> 00:26:17,000
他就宣布说 Tag 发到 3.1 版本以后就不会有重大更新了

671
00:26:17,000 --> 00:26:18,000
除了修 bug

672
00:26:19,000 --> 00:26:22,000
他其实这个项目其实就已经打句号了

673
00:26:23,000 --> 00:26:24,000
刚好是 3.1 版本

674
00:26:25,000 --> 00:26:29,000
我有一个疑问就是他 3.1 版本之前是 1.02.0 这样的吗

675
00:26:29,000 --> 00:26:32,000
还是他一上来就是应该是的

676
00:26:32,000 --> 00:26:33,000
应该是的

677
00:26:33,000 --> 00:26:37,000
因为这里有个梗就是 Tag 以及跟 Tag 相关的很多软件

678
00:26:37,000 --> 00:26:39,000
他的版本号都是一个

679
00:26:40,000 --> 00:26:40,000
这个叫什么

680
00:26:41,000 --> 00:26:42,000
超越数还是叫什么

681
00:26:42,000 --> 00:26:44,000
无理数

682
00:26:44,000 --> 00:26:47,000
比如说 Tag 的版本号是 Py

683
00:26:47,000 --> 00:26:50,000
然后 Metaphones 的版本号是 1

684
00:26:50,000 --> 00:26:52,000
自然对数的 2 点击的那种

685
00:26:52,000 --> 00:26:54,000
自然对数的第一

686
00:26:54,000 --> 00:26:55,000
还有一个什么软件

687
00:26:55,000 --> 00:26:58,000
他的版本号是 0.999

688
00:26:59,000 --> 00:27:00,000
就是 1 嘛

689
00:27:00,000 --> 00:27:03,000
他无限接近 1

690
00:27:03,000 --> 00:27:06,000
高德纳他是一个很喜欢这种各种梗的人

691
00:27:06,000 --> 00:27:07,000
他是一个很 geek 的人

692
00:27:07,000 --> 00:27:13,000
他是那个时代的风格 olmuş

693
00:27:13,000 --> 00:27:15,000
他非常严谨

694
00:27:15,000 --> 00:27:19,000
然后又相对来说比我们这个时代我们再化严肃一些

695
00:27:19,000 --> 00:27:21,000
但是他的内心里面就是一个 Geek

696
00:27:21,000 --> 00:27:23,000
比如说 campus

697
00:27:23,000 --> 00:27:27,000
它的 TLCP 如果你在里面找到一个 bug 的话

698
00:27:27,000 --> 00:27:29,000
它会给你寄一张支票

699
00:27:29,000 --> 00:27:31,000
这个支票的金额是 3.14 美元吧

700
00:27:31,000 --> 00:27:33,000
好像还是多少钱

701
00:27:33,000 --> 00:27:34,000
不是不是

702
00:27:34,000 --> 00:27:37,000
那个支票是多少钱来着

703
00:27:37,000 --> 00:27:39,000
反正是 2 的正整数倍

704
00:27:39,000 --> 00:27:40,000
不是反正是 2 的倍数

705
00:27:40,000 --> 00:27:41,000
就是是吗

706
00:27:41,000 --> 00:27:44,000
2 多少次方之类的

707
00:27:44,000 --> 00:27:44,000
我记得好像是

708
00:27:44,000 --> 00:27:47,000
跟本台的捐款类型是一样的

709
00:27:48,000 --> 00:27:49,000
其实刚刚吴涛说到

710
00:27:50,000 --> 00:27:52,000
Tag 所包含的第一套的字体

711
00:27:52,000 --> 00:27:54,000
也就是所谓的 Computer Modern

712
00:27:54,000 --> 00:27:56,000
大家应该是非常眼熟

713
00:27:56,000 --> 00:27:57,000
因为为什么呢

714
00:27:57,000 --> 00:28:00,000
就是我们其实在大概十来期节目前

715
00:28:00,000 --> 00:28:04,000
讲到了另一位字体设计师叫 Morris Fuller Benton

716
00:28:04,000 --> 00:28:08,000
他所指导设计的有一款很著名的字体叫 Sentry

717
00:28:08,000 --> 00:28:10,000
而这个 Computer Modern 其实

718
00:28:10,000 --> 00:28:13,000
它的字形的设计是跟 Sentry 非常的接近的

719
00:28:13,000 --> 00:28:18,000
或者说 Sentry 是 Computer Modern 的一个直接的复刻的蓝本

720
00:28:19,000 --> 00:28:19,000
所以在这个意义上

721
00:28:19,000 --> 00:28:22,000
Sentry 作为一款非常流行

722
00:28:22,000 --> 00:28:25,000
曾经也是跟 Monotype 绑定的这样一套字体

723
00:28:26,000 --> 00:28:29,000
大家也可以在过去以及在今天

724
00:28:29,000 --> 00:28:30,000
甚至在将来的很多出版物上

725
00:28:30,000 --> 00:28:32,000
都会看到它的影子

726
00:28:32,000 --> 00:28:33,000
我打岔问一个问题

727
00:28:33,000 --> 00:28:36,000
这个叫 Computer Modern 的字体

728
00:28:36,000 --> 00:28:38,000
它看起来一点都不 modern

729
00:28:38,000 --> 00:28:40,000
它的 modern 指的是一种风格

730
00:28:40,000 --> 00:28:41,000
这种风格叫 modern 风格

731
00:28:41,000 --> 00:28:44,000
所谓的在字体中的现代体

732
00:28:44,000 --> 00:28:46,000
它 modern 的时候是我们还没有出生的时代

733
00:28:46,000 --> 00:28:47,000
对对对

734
00:28:47,000 --> 00:28:50,000
它所谓的 modern 是那种时尚杂志的 modern

735
00:28:50,000 --> 00:28:52,000
Computer Modern 的一个直系情数

736
00:28:52,000 --> 00:28:53,000
实际上是 died out

737
00:28:53,000 --> 00:28:53,000
Dido

738
00:28:53,000 --> 00:28:54,000
对对对

739
00:28:54,000 --> 00:28:59,000
Dido 字体是一个在 18 世纪出现的这么一个字体

740
00:28:59,000 --> 00:29:02,000
然后那个时代人们会认为说

741
00:29:02,000 --> 00:29:03,000
我们现在处于现代

742
00:29:03,000 --> 00:29:05,000
在那之前是古代

743
00:29:05,000 --> 00:29:05,000
实际上也是这样的

744
00:29:05,000 --> 00:29:10,000
就是大概从 19 世纪初人类进入了所谓什么大爆发

745
00:29:10,000 --> 00:29:15,000
反正英语有一个词叫 Great 什么的一个时代

746
00:29:15,000 --> 00:29:17,000
然后我们现在还处在一个时代中

747
00:29:17,000 --> 00:29:19,000
这个时代可以视为现代的开端

748
00:29:19,000 --> 00:29:21,000
所以你叫它 modern 其实也蛮正常

749
00:29:22,000 --> 00:29:27,000
其实我们自谈自唱在第 137 期讲过本顿父子的世纪传奇

750
00:29:27,000 --> 00:29:30,000
其实在这里面我们就讲述了当时的美国的

751
00:29:30,000 --> 00:29:32,000
其实本顿父子是工程师

752
00:29:33,000 --> 00:29:35,000
他们制作的 century 字体

753
00:29:35,000 --> 00:29:39,000
也就是现在 computer modern 的直系的

754
00:29:39,000 --> 00:29:40,000
老鼠中

755
00:29:40,000 --> 00:29:41,000
模板

756
00:29:42,000 --> 00:29:45,000
如果上述到我们说是整个对于字体来讲

757
00:29:45,000 --> 00:29:47,000
在所谓的现代题

758
00:29:47,000 --> 00:29:51,000
那就要追溯到字体的什么伯多尼

759
00:29:51,000 --> 00:29:52,000
然后要讲到狄多

760
00:29:53,000 --> 00:29:56,000
那么大家也可以翻到我们自谈自唱的

761
00:29:56,000 --> 00:29:58,000
我们在第 125 期讲过狄多

762
00:29:59,000 --> 00:30:01,000
然后在第 131 期讲过伯多尼

763
00:30:01,000 --> 00:30:05,000
大家可以回去听一下就知道当时所谓的

764
00:30:05,000 --> 00:30:08,000
当时的现代题是一个什么样的东西

765
00:30:09,000 --> 00:30:11,000
锐佑你说为什么他们可以一下子就说起来

766
00:30:11,000 --> 00:30:14,000
我们之前哪一期讲了什么

767
00:30:14,000 --> 00:30:15,000
为什么咱们就做不到

768
00:30:16,000 --> 00:30:17,000
好问题

769
00:30:19,000 --> 00:30:21,000
你们是要打印一个 list

770
00:30:21,000 --> 00:30:23,000
你们是怎么做到的

771
00:30:23,000 --> 00:30:25,000
你们身边有一个小秘书吗

772
00:30:25,000 --> 00:30:28,000
还是或者你们把所有的每一期讲了什么

773
00:30:28,000 --> 00:30:30,000
全都随时随地摆在手表

774
00:30:31,000 --> 00:30:32,000
我们只是有个列表而已

775
00:30:33,000 --> 00:30:35,000
我们做了 140 多期

776
00:30:35,000 --> 00:30:37,000
然后我们一期就一个主题

777
00:30:37,000 --> 00:30:41,000
那一期我们花了一个半小时就讲本顿父子

778
00:30:41,000 --> 00:30:43,000
所以一搜寻还是可以搜到的

779
00:30:44,000 --> 00:30:45,000
伍达我给你出个主意

780
00:30:45,000 --> 00:30:47,000
你可以把我们首页打开

781
00:30:47,000 --> 00:30:48,000
我们也有个列表

782
00:30:50,000 --> 00:30:51,000
你用像素自排的

783
00:30:51,000 --> 00:30:53,000
我看不懂啊

784
00:30:53,000 --> 00:30:54,000
这太难读了

785
00:30:59,000 --> 00:31:03,000
所以你们找到高德纳老先生发的那个多少钱了吗

786
00:31:04,000 --> 00:31:05,000
刚才谁在查

787
00:31:05,000 --> 00:31:06,000
我以为前证也是查了

788
00:31:06,000 --> 00:31:07,000
没有

789
00:31:08,000 --> 00:31:09,000
我来查吧

790
00:31:10,000 --> 00:31:14,000
Knut reward check

791
00:31:14,000 --> 00:31:19,000
他每个漏洞的奖金是 2 块 5 毛 6

792
00:31:19,000 --> 00:31:23,000
因为这个 2 块 5 毛 6 是 16 进制的 100 美分

793
00:31:23,000 --> 00:31:24,000
就是第一个

794
00:31:24,000 --> 00:31:24,000
对

795
00:31:24,000 --> 00:31:26,000
然后他有些人

796
00:31:26,000 --> 00:31:29,000
达到的支票上面写的是 0 x 1.0

797
00:31:30,000 --> 00:31:32,000
然后是每次

798
00:31:32,000 --> 00:31:35,000
就是你下一个人得到这个支票的人

799
00:31:35,000 --> 00:31:36,000
就会在那个数字上乘以 2

800
00:31:36,000 --> 00:31:38,000
知道现在数多少

801
00:31:38,000 --> 00:31:40,000
327.68

802
00:31:42,000 --> 00:31:44,000
但是也才 300 多美金

803
00:31:44,000 --> 00:31:47,000
高德纳其实也不算很多钱了

804
00:31:47,000 --> 00:31:47,000
不是

805
00:31:47,000 --> 00:31:49,000
你要知道这个是每次成瘾

806
00:31:49,000 --> 00:31:50,000
这个是很恐怖的故事

807
00:31:50,000 --> 00:31:53,000
你们还记得那个印度棋盘的故事吗

808
00:31:53,000 --> 00:31:54,000
这个很恐怖的

809
00:31:54,000 --> 00:31:58,000
2015 年的时候总金额就已经超过 2 万美元了

810
00:31:58,000 --> 00:32:00,000
所以高德纳就疯掉了

811
00:32:00,000 --> 00:32:02,000
他就是说我不更新了

812
00:32:02,000 --> 00:32:02,000
对

813
00:32:02,000 --> 00:32:03,000
这是非常恐怖的

814
00:32:03,000 --> 00:32:06,000
这是逼迫他自己少写 bug 的一个驱动力

815
00:32:06,000 --> 00:32:06,000
你知道吧

816
00:32:06,000 --> 00:32:08,000
为了防止破产

817
00:32:09,000 --> 00:32:11,000
要尽量少的出现 bug

818
00:32:11,000 --> 00:32:12,000
因为下一个 bug

819
00:32:12,000 --> 00:32:14,000
随时肯定让你亲家当产

820
00:32:15,000 --> 00:32:16,000
不过刚才也说了

821
00:32:16,000 --> 00:32:17,000
它的版本号接近于 Py

822
00:32:17,000 --> 00:32:21,000
那么其实一个非常新的一个时间点

823
00:32:21,000 --> 00:32:23,000
就是在今年的 2 月份

824
00:32:23,000 --> 00:32:26,000
2021 年的 2 月份刚更新了一个版本

825
00:32:26,000 --> 00:32:30,000
然后这个版本号是 3.141592653

826
00:32:31,000 --> 00:32:31,000
版

827
00:32:32,000 --> 00:32:34,000
就已经到 2653 了

828
00:32:35,000 --> 00:32:36,000
其实也还好

829
00:32:36,000 --> 00:32:38,000
你想一下其实也很容易背得下来

830
00:32:38,000 --> 00:32:39,000
也没更新几版

831
00:32:39,000 --> 00:32:40,000
对

832
00:32:40,000 --> 00:32:42,000
你能背到几位

833
00:32:42,000 --> 00:32:45,000
J 5926535897998285462643

834
00:32:45,000 --> 00:32:46,000
以前是可以的

835
00:32:46,000 --> 00:32:47,000
现在不记得

836
00:32:47,000 --> 00:32:50,000
大概我能背到 50 位还是多少位

837
00:32:50,000 --> 00:32:51,000
real 能背到 100 位吧

838
00:32:51,000 --> 00:32:52,000
好像

839
00:32:54,000 --> 00:32:56,000
所以我想确认一下

840
00:32:56,000 --> 00:33:01,000
到 2653 的版本实际上指的是 3.9 版本

841
00:33:01,000 --> 00:33:01,000
是吧

842
00:33:01,000 --> 00:33:02,000
你数位数对

843
00:33:02,000 --> 00:33:03,000
数到后面有几位的

844
00:33:03,000 --> 00:33:04,000
好

845
00:33:04,000 --> 00:33:07,000
但是没有很多大的修改

846
00:33:07,000 --> 00:33:08,000
主要是那些 bug

847
00:33:08,000 --> 00:33:10,000
修 bug 而已

848
00:33:10,000 --> 00:33:11,000
没有重大的功能更新

849
00:33:11,000 --> 00:33:12,000
其实就是

850
00:33:13,000 --> 00:33:13,000
对

851
00:33:13,000 --> 00:33:16,000
TEC 本身的内核实际上已经比较老了

852
00:33:16,000 --> 00:33:16,000
就是

853
00:33:17,000 --> 00:33:20,000
而且它本身并不是一个特别复杂的系统

854
00:33:20,000 --> 00:33:21,000
就是你把它本

855
00:33:21,000 --> 00:33:25,000
它底层的那个 TEC engine 可以用其他方式来实现

856
00:33:25,000 --> 00:33:26,000
现在实际上比较流行的是

857
00:33:26,000 --> 00:33:27,000
一个叫 PDF TEC

858
00:33:27,000 --> 00:33:30,000
另外一个叫 Z TEC 应该是

859
00:33:30,000 --> 00:33:32,000
这两个引擎现在是用的比较广泛的

860
00:33:32,000 --> 00:33:37,000
PDF TEC 主要是做标点悬挂比较好

861
00:33:37,000 --> 00:33:40,000
然后 PDF TEC 还支持直接生成 PDF

862
00:33:40,000 --> 00:33:43,000
而不是要先经过 DVI 内部

863
00:33:43,000 --> 00:33:47,000
就是有各种前缀的 TEC 和他们之间到底是什么关系

864
00:33:47,000 --> 00:33:49,000
其实还挺复杂的这个事

865
00:33:49,000 --> 00:33:52,000
这个你还是要跟大家讲一讲的到后面

866
00:33:53,000 --> 00:33:55,000
TEC 有点像 UNIX

867
00:33:55,000 --> 00:33:56,000
然后对

868
00:33:56,000 --> 00:33:57,000
特别像坦克

869
00:33:57,000 --> 00:33:59,000
以 TEC 为源流

870
00:33:59,000 --> 00:34:02,000
衍生了很多其他的发行板

871
00:34:02,000 --> 00:34:03,000
其中最为人所知的

872
00:34:03,000 --> 00:34:06,000
或者说我们现在最一提到 TEC

873
00:34:06,000 --> 00:34:09,000
或者说我们现在一提到这套排版工具

874
00:34:09,000 --> 00:34:12,000
不会是说我用 TEC 写了什么

875
00:34:12,000 --> 00:34:14,000
而是会说这个东西是用 LATEC 写的

876
00:34:15,000 --> 00:34:17,000
就是因为 LATEC 是 TEC 的最知名

877
00:34:17,000 --> 00:34:19,000
也是最早的一个扩展手段

878
00:34:19,000 --> 00:34:21,000
就是 TEC 有点像一个

879
00:34:21,000 --> 00:34:22,000
它有点像 Python

880
00:34:22,000 --> 00:34:23,000
它有点像一种编程语言

881
00:34:23,000 --> 00:34:24,000
然后一个人

882
00:34:25,000 --> 00:34:28,000
他的名字叫做 Leslie Lamport

883
00:34:28,000 --> 00:34:28,000
应该是

884
00:34:28,000 --> 00:34:30,000
他也是一个老先生

885
00:34:30,000 --> 00:34:31,000
今年 80 岁

886
00:34:31,000 --> 00:34:34,000
然后他给 TEC 做了一套扩展

887
00:34:34,000 --> 00:34:37,000
就是他用 TEC 写了很多东西

888
00:34:38,000 --> 00:34:40,000
比如说你 TEC

889
00:34:40,000 --> 00:34:40,000
打个比方

890
00:34:40,000 --> 00:34:43,000
这个 TEC 原来只能设字体和字号

891
00:34:43,000 --> 00:34:45,000
然后他用 TEC 做了扩展

892
00:34:45,000 --> 00:34:45,000
可以让

893
00:34:47,000 --> 00:34:49,000
他用旧的命令生成了一个新的命令

894
00:34:49,000 --> 00:34:51,000
然后这个新的命令你可以说

895
00:34:51,000 --> 00:34:52,000
比如说我现在要开始写一张

896
00:34:52,000 --> 00:34:54,000
然后我要现在要开始写一个新的结

897
00:34:54,000 --> 00:35:00,000
然后这个张和杰应该是怎么样被 decorate 之类的

898
00:35:00,000 --> 00:35:02,000
然后他最重要的贡献之一

899
00:35:02,000 --> 00:35:06,000
就是他在 LATEC 里面做了一个包管理系统

900
00:35:06,000 --> 00:35:11,000
这个是等于说是一个革命性的这么一个创造

901
00:35:11,000 --> 00:35:14,000
然后有了这套包管理系统之后

902
00:35:14,000 --> 00:35:16,000
就有很多人创造了很多包

903
00:35:16,000 --> 00:35:17,000
然后你用 LATEC

904
00:35:17,000 --> 00:35:19,000
你就可以使用别人写的这些包

905
00:35:19,000 --> 00:35:21,000
来扩展你的

906
00:35:21,000 --> 00:35:24,000
来实现你的排版的一个目的

907
00:35:25,000 --> 00:35:26,000
这个就是 LATEC

908
00:35:28,000 --> 00:35:29,000
所以这里本质上

909
00:35:29,000 --> 00:35:32,000
TEC 其实只是一个非常底层的

910
00:35:32,000 --> 00:35:33,000
非常这种

911
00:35:33,000 --> 00:35:34,000
它是个内核

912
00:35:34,000 --> 00:35:36,000
它是绘编语言的一个东西

913
00:35:36,000 --> 00:35:37,000
但是它并不

914
00:35:37,000 --> 00:35:38,000
对

915
00:35:38,000 --> 00:35:39,000
它并不

916
00:35:39,000 --> 00:35:40,000
就是如果你直接去用它来排版

917
00:35:40,000 --> 00:35:41,000
其实是非常痛苦的

918
00:35:41,000 --> 00:35:44,000
因为就是各种指令都很原始

919
00:35:44,000 --> 00:35:45,000
所以这个 LATEC

920
00:35:45,000 --> 00:35:46,000
它其实做的是说

921
00:35:46,000 --> 00:35:48,000
我在上面打包做了一些抽象

922
00:35:48,000 --> 00:35:48,000
对吧

923
00:35:48,000 --> 00:35:49,000
你看有结构了

924
00:35:49,000 --> 00:35:50,000
对吧

925
00:35:50,000 --> 00:35:52,000
然后就是开始出现所谓的形式

926
00:35:52,000 --> 00:35:56,000
和内容有一点点的分离的感觉

927
00:35:56,000 --> 00:35:57,000
然后你可以引用的包管理

928
00:35:57,000 --> 00:35:58,000
其实是模块化了

929
00:35:59,000 --> 00:36:01,000
让大家能够更好地在上面去做进一步的扩展

930
00:36:03,000 --> 00:36:04,000
他们的语意就是说

931
00:36:04,000 --> 00:36:06,000
其实 TEC 就是基础的排版引擎

932
00:36:06,000 --> 00:36:08,000
然后他们是叫红包是吧

933
00:36:08,000 --> 00:36:10,000
就那个 Macro Package 是吧

934
00:36:10,000 --> 00:36:11,000
红包吗

935
00:36:11,000 --> 00:36:12,000
中文叫红包吗

936
00:36:12,000 --> 00:36:13,000
听起来怎么这么喜庆

937
00:36:13,000 --> 00:36:15,000
肯定是

938
00:36:15,000 --> 00:36:15,000
就红包

939
00:36:15,000 --> 00:36:17,000
不然还能叫什么

940
00:36:17,000 --> 00:36:19,000
红这个词就是随着

941
00:36:19,000 --> 00:36:21,000
Macro 的办公软件

942
00:36:21,000 --> 00:36:24,000
基本上是在 90 年代在中文世界就铺开了

943
00:36:24,000 --> 00:36:25,000
这个玩意就叫红

944
00:36:26,000 --> 00:36:27,000
台湾叫聚集

945
00:36:28,000 --> 00:36:30,000
聚集可能听起来还比较

946
00:36:30,000 --> 00:36:31,000
就好奇怪

947
00:36:31,000 --> 00:36:32,000
比较好一点

948
00:36:32,000 --> 00:36:35,000
但是红这个词已经被传开了

949
00:36:38,000 --> 00:36:41,000
我们是不是重点要跟大家讲一下 TEC 的一些特点

950
00:36:41,000 --> 00:36:42,000
好

951
00:36:42,000 --> 00:36:43,000
但是 TEC 有什么特点

952
00:36:44,000 --> 00:36:44,000
难用

953
00:36:45,000 --> 00:36:47,000
TEC 最大特点就是免费开源

954
00:36:47,000 --> 00:36:48,000
就最重要的

955
00:36:49,000 --> 00:36:50,000
说的也是

956
00:36:50,000 --> 00:36:51,000
我前两天在做功课的时候

957
00:36:51,000 --> 00:36:52,000
搜到了一篇

958
00:36:52,000 --> 00:36:54,000
一个奇人写的一篇奇文

959
00:36:54,000 --> 00:36:54,000
然后

960
00:36:55,000 --> 00:36:57,000
我觉得还是可以在这里念一下

961
00:36:57,000 --> 00:36:59,000
就是他

962
00:36:59,000 --> 00:37:00,000
那个死额精病

963
00:37:00,000 --> 00:37:02,000
隶属了 TEC 的种种弊端

964
00:37:02,000 --> 00:37:04,000
然后其中有一段是这样的

965
00:37:04,000 --> 00:37:05,000
我来念一下

966
00:37:05,000 --> 00:37:06,000
你说中文

967
00:37:06,000 --> 00:37:07,000
好我来翻译一下

968
00:37:07,000 --> 00:37:08,000
他说

969
00:37:08,000 --> 00:37:10,000
因为 TEC 是免费的

970
00:37:10,000 --> 00:37:16,000
所以它限制了与其竞争的系统和想法发展

971
00:37:16,000 --> 00:37:18,000
如果 TEC 没有被研究出来

972
00:37:18,000 --> 00:37:22,000
并且没有被免费的让人使用

973
00:37:22,000 --> 00:37:26,000
那么能够保持数学公式的 structure

974
00:37:26,000 --> 00:37:28,000
结构的这些替代的方案

975
00:37:28,000 --> 00:37:30,000
比如说 MathML

976
00:37:30,000 --> 00:37:33,000
我们一会儿提到叫 Math Markov Language

977
00:37:33,000 --> 00:37:34,000
还有 Mathematic

978
00:37:34,000 --> 00:37:37,000
就会比较早的被开发出来

979
00:37:37,000 --> 00:37:40,000
并且也有可能就是会更为广泛的使用

980
00:37:40,000 --> 00:37:41,000
就是它言下之意

981
00:37:41,000 --> 00:37:46,000
TEC 是一个比较差的这么一套工具

982
00:37:46,000 --> 00:37:48,000
但是因为它免费

983
00:37:48,000 --> 00:37:48,000
大家都用了

984
00:37:48,000 --> 00:37:50,000
所以大家就不思进取了

985
00:37:50,000 --> 00:37:50,000
是吗

986
00:37:50,000 --> 00:37:51,000
他的意思是

987
00:37:51,000 --> 00:37:53,000
接下来他紧接就说了类似的一轮话

988
00:37:53,000 --> 00:37:55,000
他说 free software

989
00:37:55,000 --> 00:37:57,000
就像一种病毒

990
00:37:57,000 --> 00:38:04,000
然后 free systems 有能力可以去使得任何其他的

991
00:38:04,000 --> 00:38:06,000
protocol 协议或者是设计

992
00:38:07,000 --> 00:38:09,000
包括那些比较好的协议和设计

993
00:38:11,000 --> 00:38:15,000
它有让他们全军覆没的这样一种潜力

994
00:38:15,000 --> 00:38:18,000
听起来很像比尔盖茨当年对自由软件的自责

995
00:38:18,000 --> 00:38:19,000
对 worse is better

996
00:38:19,000 --> 00:38:20,000
然后他说

997
00:38:20,000 --> 00:38:22,000
其中一个例子就是

998
00:38:23,000 --> 00:38:24,000
the various Unix systems

999
00:38:24,000 --> 00:38:27,000
就是各种各样的 Unix 系统

1000
00:38:27,000 --> 00:38:29,000
以及他们所对应的协议

1001
00:38:30,000 --> 00:38:32,000
然后他说这些系统和协议

1002
00:38:32,000 --> 00:38:36,000
has done huge irreversible damage to society

1003
00:38:36,000 --> 00:38:41,000
他说这些东西对整个社会产生了不可逆转的巨大伤害

1004
00:38:43,000 --> 00:38:44,000
就是 worse is better

1005
00:38:45,000 --> 00:38:51,000
这可能是我们今天或者我这过去 20 年里面听到的

1006
00:38:51,000 --> 00:38:54,000
对于自由软件的最大的一次

1007
00:38:54,000 --> 00:38:57,000
最严苛的一次指控

1008
00:38:58,000 --> 00:38:59,000
就我以前没有想过这件事情

1009
00:38:59,000 --> 00:39:01,000
但是如果你说他

1010
00:39:02,000 --> 00:39:03,000
我们来想想他说有没有道理

1011
00:39:03,000 --> 00:39:04,000
可能是有点道理

1012
00:39:04,000 --> 00:39:08,000
但是看你站的立场是啥了

1013
00:39:08,000 --> 00:39:11,000
你如果是那些想做商业软件

1014
00:39:11,000 --> 00:39:12,000
对吧

1015
00:39:12,000 --> 00:39:13,000
想靠这个赚钱

1016
00:39:13,000 --> 00:39:17,000
然后说你要通过 complete on quality

1017
00:39:17,000 --> 00:39:18,000
对吧

1018
00:39:18,000 --> 00:39:19,000
你要通过品质的竞争

1019
00:39:19,000 --> 00:39:20,000
那确实是

1020
00:39:21,000 --> 00:39:22,000
那很多你就干

1021
00:39:22,000 --> 00:39:23,000
你这个人就干不下去了

1022
00:39:23,000 --> 00:39:30,000
那很多比如说你需要聘请专业能源来设计制作

1023
00:39:30,000 --> 00:39:32,000
然后比如说这些的系统

1024
00:39:32,000 --> 00:39:34,000
那你肯定就干不过免费的

1025
00:39:34,000 --> 00:39:34,000
你就死掉了

1026
00:39:34,000 --> 00:39:35,000
对

1027
00:39:35,000 --> 00:39:38,000
我们看到过去自由软件的整个历史

1028
00:39:38,000 --> 00:39:40,000
不就是在不断地去蝉食那些商业软件

1029
00:39:40,000 --> 00:39:43,000
本来可以卖钱的那些领域

1030
00:39:43,000 --> 00:39:43,000
对吧

1031
00:39:43,000 --> 00:39:45,000
现在超级系统也是

1032
00:39:46,000 --> 00:39:47,000
unix 出来之后

1033
00:39:47,000 --> 00:39:47,000
对吧

1034
00:39:47,000 --> 00:39:49,000
unix 之后你还有什么

1035
00:39:50,000 --> 00:39:51,000
其他就是非

1036
00:39:51,000 --> 00:39:53,000
就除了 windows

1037
00:39:54,000 --> 00:39:55,000
除了 Mac

1038
00:39:55,000 --> 00:39:56,000
它底下 BSD

1039
00:39:56,000 --> 00:39:59,000
还在有一些商业的在用之外

1040
00:39:59,000 --> 00:40:02,000
其他那些非常小众都已经非常示威了

1041
00:40:02,000 --> 00:40:04,000
商业软件都已经消亡了

1042
00:40:04,000 --> 00:40:04,000
对

1043
00:40:04,000 --> 00:40:07,000
就好像他提到这些 virus unix system

1044
00:40:07,000 --> 00:40:10,000
他这里面 unix system 包含很多东西

1045
00:40:10,000 --> 00:40:15,000
其中 unix 最原本的 unix 后来被卖给了

1046
00:40:15,000 --> 00:40:16,000
卖给了谁

1047
00:40:16,000 --> 00:40:17,000
AT&T 还是谁

1048
00:40:18,000 --> 00:40:21,000
他真正 unix 的商标实际上是卖钱的

1049
00:40:21,000 --> 00:40:26,000
反倒是后来的什么 BSD 和 linux 之流

1050
00:40:26,000 --> 00:40:29,000
把卖钱的 unix 给打败了

1051
00:40:29,000 --> 00:40:31,000
比如说当时的

1052
00:40:32,000 --> 00:40:33,000
为什么现在会有 AWS

1053
00:40:33,000 --> 00:40:37,000
就是因为当时亚马逊觉得

1054
00:40:37,000 --> 00:40:41,000
some micro system 的那个 solaris 的那些服务器太贵了

1055
00:40:42,000 --> 00:40:43,000
然后他们转向 linux

1056
00:40:44,000 --> 00:40:46,000
然后 sun 就倒闭了

1057
00:40:46,000 --> 00:40:47,000
对

1058
00:40:47,000 --> 00:40:49,000
生亚也会倒闭

1059
00:40:49,000 --> 00:40:50,000
对

1060
00:40:50,000 --> 00:40:53,000
然后亚马逊发现自己可以用十分之一的价钱

1061
00:40:53,000 --> 00:40:55,000
达到之前 100 倍的容量

1062
00:40:55,000 --> 00:40:59,000
然后他决定把之前多出来这些容量租给别人用

1063
00:40:59,000 --> 00:41:01,000
于是就有了今天的 AWS

1064
00:41:02,000 --> 00:41:04,000
诸如此类的事情实际上在一次一次的上演

1065
00:41:04,000 --> 00:41:06,000
但是如果你这样讲的话

1066
00:41:06,000 --> 00:41:08,000
虽然 tech 本身是免费的

1067
00:41:09,000 --> 00:41:13,000
tech 本身是美国数学学会的商标

1068
00:41:13,000 --> 00:41:16,000
然后 Metaphones 也是当时那个出版社

1069
00:41:16,000 --> 00:41:19,000
就是 Ellison Wesley 出版社的商标

1070
00:41:19,000 --> 00:41:21,000
这些商标都是有注册的

1071
00:41:21,000 --> 00:41:23,000
就跟 unix 一样

1072
00:41:24,000 --> 00:41:25,000
但是它本身是免费的

1073
00:41:25,000 --> 00:41:28,000
它免费事实上不自由

1074
00:41:28,000 --> 00:41:28,000
对吧

1075
00:41:28,000 --> 00:41:28,000
可以这么理解

1076
00:41:28,000 --> 00:41:30,000
开源他们开源

1077
00:41:30,000 --> 00:41:32,000
所以有人骂这个 tech

1078
00:41:32,000 --> 00:41:35,000
可是 tech 的支持者就说我们 tech 多好

1079
00:41:35,000 --> 00:41:36,000
我们免费开源

1080
00:41:36,000 --> 00:41:39,000
然后跨平台跨设备

1081
00:41:39,000 --> 00:41:43,000
这个最关键就是说同样的输入可以得到同样的效果

1082
00:41:43,000 --> 00:41:49,000
哪怕大家也知道 tech 原来是 40 多年前开发的这样的一个引擎

1083
00:41:49,000 --> 00:41:54,000
但是当时高德纳就说你无论用任何一台电脑

1084
00:41:55,000 --> 00:41:56,000
输出的效果都是一样的

1085
00:41:57,000 --> 00:41:58,000
这个特别厉害

1086
00:41:58,000 --> 00:42:02,000
然后跨设备的意思是不仅是屏幕显示

1087
00:42:03,000 --> 00:42:04,000
无论后来打印机

1088
00:42:04,000 --> 00:42:07,000
哪怕后来有 postscript 出现

1089
00:42:07,000 --> 00:42:10,000
然后比如说有 pdf

1090
00:42:10,000 --> 00:42:13,000
甚至像哪怕是日本特别专用的

1091
00:42:13,000 --> 00:42:17,000
写言家公司他们自己的电算照牌机

1092
00:42:17,000 --> 00:42:20,000
你只要用的是 tech 它出的文本

1093
00:42:20,000 --> 00:42:22,000
最后输出效果都是一样的

1094
00:42:22,000 --> 00:42:25,000
这个是特别厉害的一个例子

1095
00:42:27,000 --> 00:42:31,000
我们要不接下来就讲一讲 tech 作为一个软件

1096
00:42:31,000 --> 00:42:33,000
它的 user interface 是怎么样

1097
00:42:33,000 --> 00:42:35,000
也就是它的用户操作界面是怎么样

1098
00:42:35,000 --> 00:42:39,000
这我觉得可能对于很多设计师或者是没有接触和 tech

1099
00:42:39,000 --> 00:42:43,000
但有想要试一试的人来说比较重要的一点

1100
00:42:44,000 --> 00:42:45,000
我觉得可能要介绍的是工作流

1101
00:42:45,000 --> 00:42:47,000
因为 lattach 事实上是没有一个

1102
00:42:48,000 --> 00:42:49,000
首先你要学会使用命令

1103
00:42:49,000 --> 00:42:53,000
对它事实上是没有一个标准的操作界面的

1104
00:42:53,000 --> 00:42:56,000
你可能装了某些特定的 tech 的版本

1105
00:42:57,000 --> 00:42:58,000
这个我们一会会讲

1106
00:42:58,000 --> 00:43:02,000
然后你会有一个编辑 tech 的环境

1107
00:43:02,000 --> 00:43:05,000
但是没有一个东西说你一定要打开这个

1108
00:43:05,000 --> 00:43:07,000
比如说 photoshop 或者是 page maker

1109
00:43:07,000 --> 00:43:08,000
你有一个主程序要运行

1110
00:43:09,000 --> 00:43:10,000
在 lattach 这边是没有的

1111
00:43:11,000 --> 00:43:13,000
你可以按照自己喜欢的方式

1112
00:43:13,000 --> 00:43:17,000
用一个你喜欢的编辑软件去做你想要做的事情

1113
00:43:18,000 --> 00:43:19,000
本质上它是编程

1114
00:43:19,000 --> 00:43:24,000
它没有一个所谓的你说有一个什么专用的程序来使用它

1115
00:43:24,000 --> 00:43:24,000
对吧

1116
00:43:24,000 --> 00:43:28,000
你其实是用任何一个文本编辑器都可以写

1117
00:43:28,000 --> 00:43:30,000
所以我刚才讲你说你要开始使用这个

1118
00:43:30,000 --> 00:43:31,000
你一定要接触到的 UI

1119
00:43:31,000 --> 00:43:32,000
U 的 interface

1120
00:43:32,000 --> 00:43:34,000
首先你得学会使用命令好吗

1121
00:43:34,000 --> 00:43:37,000
怎么开始去完成这个转化的过程

1122
00:43:38,000 --> 00:43:39,000
这也是它的特点之一

1123
00:43:39,000 --> 00:43:41,000
我们把整个过程说一下

1124
00:43:41,000 --> 00:43:46,000
用户是只要有一个文本编辑器就可以了

1125
00:43:46,000 --> 00:43:47,000
它写的是一个文本文件

1126
00:43:47,000 --> 00:43:48,000
记事本也可以

1127
00:43:48,000 --> 00:43:50,000
对 tech 它是纯文本

1128
00:43:50,000 --> 00:43:53,000
所以它非常便于传输编辑

1129
00:43:53,000 --> 00:43:58,000
你只要你喜欢你个人习惯用的文本编辑器就可以了

1130
00:43:58,000 --> 00:43:59,000
你用什么都可以

1131
00:43:59,000 --> 00:44:01,000
然后导到引擎里面去

1132
00:44:01,000 --> 00:44:05,000
当然传统的 Lathek 它要中途要先生成一个 DVI 文件

1133
00:44:07,000 --> 00:44:10,000
其实 DVI 是 device independent 的

1134
00:44:10,000 --> 00:44:12,000
就是设备独立

1135
00:44:12,000 --> 00:44:13,000
它有一个中途文件

1136
00:44:14,000 --> 00:44:17,000
然后根据它的驱动

1137
00:44:17,000 --> 00:44:20,000
然后最后再生成什么 PDF 或者是打印

1138
00:44:20,000 --> 00:44:23,000
当然现在的 Lathek 它们就可以

1139
00:44:23,000 --> 00:44:24,000
现在 Lathek 比如说 Lumar Lathek

1140
00:44:24,000 --> 00:44:29,000
它就可以直接从文本文件直接给导出 PDF 了

1141
00:44:29,000 --> 00:44:32,000
所以这是两个步骤的

1142
00:44:32,000 --> 00:44:37,000
用户直接它要写一个像命令行一样的纯文本

1143
00:44:37,000 --> 00:44:42,000
然后要再通过这样一个引擎去生成 PDF

1144
00:44:42,000 --> 00:44:44,000
所以它是两个步骤的东西

1145
00:44:44,000 --> 00:44:48,000
而不是所谓的所见即所得

1146
00:44:49,000 --> 00:44:51,000
这是它的一个最大的不同

1147
00:44:51,000 --> 00:44:53,000
但其实也有人在上面做一些尝试

1148
00:44:53,000 --> 00:44:56,000
就是说有人做了这种专用的编辑器

1149
00:44:56,000 --> 00:44:58,000
然后你这边输入 Lathek 的指令

1150
00:44:58,000 --> 00:45:02,000
然后是可以几乎实现所见即所得

1151
00:45:02,000 --> 00:45:06,000
但是和所有的所见即所得的排表元件一样

1152
00:45:06,000 --> 00:45:08,000
它还是面临着非常不好用的问题

1153
00:45:08,000 --> 00:45:11,000
所以也不是非常的广泛

1154
00:45:11,000 --> 00:45:12,000
它还是有代码的

1155
00:45:13,000 --> 00:45:15,000
知乎公式编辑器

1156
00:45:15,000 --> 00:45:18,000
其实它提供了一个让你点的那么一个界面

1157
00:45:18,000 --> 00:45:21,000
就是你点一个什么比如说跟号

1158
00:45:21,000 --> 00:45:24,000
然后它下面帮你插入 Lathek 的跟号的命令

1159
00:45:24,000 --> 00:45:26,000
类似于这些东西

1160
00:45:26,000 --> 00:45:29,000
其实现在要比直接手写的还是要多一些

1161
00:45:29,000 --> 00:45:34,000
就这种还是一个非常短的编写

1162
00:45:34,000 --> 00:45:36,000
然后编译的一个循环

1163
00:45:36,000 --> 00:45:38,000
它还是没有脱离刚才我说的命令行的本质

1164
00:45:38,000 --> 00:45:40,000
这里面我说这种就是可以

1165
00:45:40,000 --> 00:45:41,000
对它基本上就只能做公式

1166
00:45:41,000 --> 00:45:44,000
对你可以就是相对完整的做出的这种编辑器

1167
00:45:44,000 --> 00:45:48,000
最成熟的应该是叫做这怎么念 Lyx

1168
00:45:48,000 --> 00:45:52,000
Lyx 它的网站是 lyx.org.org 的这个

1169
00:45:52,000 --> 00:45:54,000
你可以去看一下它有截图

1170
00:45:54,000 --> 00:45:58,000
它相对来说是更加接近于你编辑 word 的那种感觉的

1171
00:45:59,000 --> 00:46:00,000
不过话说回来的话

1172
00:46:00,000 --> 00:46:02,000
我们现在用 Tayhawk 都是大家会想到用公式

1173
00:46:02,000 --> 00:46:06,000
可是当年高德纳先生他可是真的是要排书的

1174
00:46:07,000 --> 00:46:10,000
他最很厉害的比如他会算那个段换函位置

1175
00:46:10,000 --> 00:46:11,000
然后两段对齐

1176
00:46:12,000 --> 00:46:15,000
其实这都是做很专业的常温排版的东西

1177
00:46:16,000 --> 00:46:18,000
他还特地为此去学排版

1178
00:46:18,000 --> 00:46:20,000
所以高德纳先生很厉害

1179
00:46:20,000 --> 00:46:23,000
可是我们现在主要用的拿它用的还是拿去排公式

1180
00:46:26,000 --> 00:46:27,000
其实这里就有一个问题了

1181
00:46:27,000 --> 00:46:29,000
其实就是可以探讨一下

1182
00:46:29,000 --> 00:46:35,000
就是为什么排公式和普通的排版它有什么样的特殊之处

1183
00:46:36,000 --> 00:46:39,000
使得他必须要专门做这么一套系统

1184
00:46:40,000 --> 00:46:41,000
公式很复杂

1185
00:46:42,000 --> 00:46:42,000
大家也都知道

1186
00:46:43,000 --> 00:46:47,000
尤其在签字时代能跟那个公式可就是超级复杂了

1187
00:46:47,000 --> 00:46:50,000
他要在字符的周围塞不同的清空

1188
00:46:51,000 --> 00:46:54,000
哪怕一个根号就是一个很复杂的东西

1189
00:46:54,000 --> 00:46:58,000
根号上面还有一个长度什么就乱七八糟的

1190
00:46:58,000 --> 00:47:00,000
都要有附和的

1191
00:47:01,000 --> 00:47:04,000
我觉得数学公式最麻烦的地方就在于

1192
00:47:04,000 --> 00:47:08,000
我们只是考虑一个最简单的文本的排印

1193
00:47:08,000 --> 00:47:12,000
它其实主要考虑是相对来说是一个维度

1194
00:47:12,000 --> 00:47:13,000
就是你那一行到底要出现怎么样

1195
00:47:13,000 --> 00:47:17,000
因为它行业行之间通常来说不会有太大的相互关联

1196
00:47:17,000 --> 00:47:18,000
除非你是断航的影响之外

1197
00:47:18,000 --> 00:47:19,000
对吧

1198
00:47:19,000 --> 00:47:23,000
但是数学公式它本质上是一个二维的画画

1199
00:47:23,000 --> 00:47:24,000
你可以这么理解

1200
00:47:24,000 --> 00:47:27,000
比如说我们常用的这个叫什么来的

1201
00:47:27,000 --> 00:47:29,000
上标下标就是指数符号或者是角标符号

1202
00:47:29,000 --> 00:47:30,000
对吧

1203
00:47:30,000 --> 00:47:32,000
它存在说有一个大小的问题

1204
00:47:32,000 --> 00:47:34,000
而且数学公式很多是可以所谓的嵌套的

1205
00:47:34,000 --> 00:47:37,000
就你会 A 的平方的平方的平方

1206
00:47:37,000 --> 00:47:41,000
你要想到那个结果是平方的角标会逐级变小

1207
00:47:42,000 --> 00:47:46,000
这种需求在普通的文字排版上面它其实是不存在的

1208
00:47:46,000 --> 00:47:48,000
就相对来说它把灵活性是要求非常高

1209
00:47:48,000 --> 00:47:51,000
然后要求你控制它的相对位置

1210
00:47:51,000 --> 00:47:53,000
它的首先维度上就变得更广泛

1211
00:47:53,000 --> 00:47:55,000
而且它的大小的精度又要求更高了

1212
00:47:56,000 --> 00:48:00,000
排数学公式谁要面临一个双倍的双层的问题

1213
00:48:00,000 --> 00:48:05,000
一个是 unicode 或者说编码需要解决的一个问题

1214
00:48:05,000 --> 00:48:08,000
就是那些周音符号或者是字

1215
00:48:08,000 --> 00:48:10,000
首先有字的问题

1216
00:48:10,000 --> 00:48:14,000
字符的附加的这些零件的排版就是定位的问题

1217
00:48:14,000 --> 00:48:16,000
它还有一个问题就是它把所有这些东西

1218
00:48:16,000 --> 00:48:19,000
在一个非线性的方式组合在一起

1219
00:48:19,000 --> 00:48:22,000
它是面临是一个二维的一个空间

1220
00:48:22,000 --> 00:48:24,000
它还不仅仅是一个三维的问题

1221
00:48:24,000 --> 00:48:25,000
所以你要解决这个问题

1222
00:48:25,000 --> 00:48:30,000
实际上是要用比 unicode 更加复杂的一套方法来完成

1223
00:48:30,000 --> 00:48:31,000
你还是提到刚才一点

1224
00:48:31,000 --> 00:48:33,000
TES 出现的时候还没有 unicode 这件事情

1225
00:48:33,000 --> 00:48:37,000
所以当时他要去在数学公式里面大量出现的

1226
00:48:37,000 --> 00:48:41,000
什么希腊字母各种奇奇怪怪的这种数学符号

1227
00:48:41,000 --> 00:48:42,000
你就从来不会想到过的

1228
00:48:42,000 --> 00:48:45,000
就现在连 unicode 里面这种不齐全的那些符号

1229
00:48:45,000 --> 00:48:47,000
它都要在这个系统里面实现出来

1230
00:48:47,000 --> 00:48:48,000
然后还要考虑它各种

1231
00:48:49,000 --> 00:48:50,000
在二维

1232
00:48:50,000 --> 00:48:54,000
就是两个维度商店区的如何相对排布

1233
00:48:54,000 --> 00:48:55,000
相对大小

1234
00:48:55,000 --> 00:48:58,000
以及每个字形还要处理的好看

1235
00:48:58,000 --> 00:48:58,000
对吧

1236
00:48:58,000 --> 00:48:59,000
这个就太难了

1237
00:49:00,000 --> 00:49:00,000
对

1238
00:49:01,000 --> 00:49:05,000
这的确是一个非常只有宗师级成员能解决的编程问题

1239
00:49:06,000 --> 00:49:07,000
你不排数学公式你都不知道

1240
00:49:08,000 --> 00:49:09,000
比如说 sinex

1241
00:49:09,000 --> 00:49:12,000
sine 是必须要用正立的罗马体

1242
00:49:12,000 --> 00:49:15,000
然后变量 x 是要用意大利邪体

1243
00:49:15,000 --> 00:49:18,000
就是不做理工科排版都不会意识到这个问题

1244
00:49:18,000 --> 00:49:19,000
是

1245
00:49:19,000 --> 00:49:19,000
对吧

1246
00:49:19,000 --> 00:49:20,000
单位的话

1247
00:49:20,000 --> 00:49:23,000
物理量的单位是必须要用正立的罗马体

1248
00:49:23,000 --> 00:49:26,000
但是物理的变量都必须要用意大利邪体

1249
00:49:26,000 --> 00:49:29,000
像这个东西你跟一般人来讲的话

1250
00:49:29,000 --> 00:49:30,000
他都没有注意到

1251
00:49:30,000 --> 00:49:31,000
哪怕虽然你平时

1252
00:49:31,000 --> 00:49:36,000
从中小学你看数学课本都是那样排出来的

1253
00:49:36,000 --> 00:49:37,000
然后等你自己来排到

1254
00:49:37,000 --> 00:49:39,000
你就觉得总是没有味道

1255
00:49:39,000 --> 00:49:40,000
就感觉要排出来不像

1256
00:49:40,000 --> 00:49:43,000
就是因为它其中有很多

1257
00:49:43,000 --> 00:49:46,000
它有各自的这样的一个排版规则在

1258
00:49:46,000 --> 00:49:46,000
对

1259
00:49:46,000 --> 00:49:48,000
写公式跟排公式

1260
00:49:48,000 --> 00:49:51,000
甚至自动生成公式之间的关系是

1261
00:49:51,000 --> 00:49:52,000
难度是天长地远的

1262
00:49:52,000 --> 00:49:58,000
不过我觉得这里还是我要夹带私货吐一下草

1263
00:49:58,000 --> 00:50:01,000
就是我觉得虽然说它有各种各样的难度

1264
00:50:01,000 --> 00:50:04,000
其实我觉得很多问题都是自找的

1265
00:50:04,000 --> 00:50:04,000
对吧

1266
00:50:04,000 --> 00:50:07,000
没有其他哪个行业有这么多规模的需求

1267
00:50:07,000 --> 00:50:09,000
比如像刚才你听到

1268
00:50:09,000 --> 00:50:13,000
丁德埃尔克讲的对同一个概念里面

1269
00:50:13,000 --> 00:50:17,000
还要用不同的这种字符形态来去描述它

1270
00:50:17,000 --> 00:50:19,000
你想手写的数学体不存在这种区别

1271
00:50:19,000 --> 00:50:19,000
对不对

1272
00:50:19,000 --> 00:50:21,000
你可能都是写个 sign

1273
00:50:21,000 --> 00:50:22,000
然后都是你的手写的那种字体

1274
00:50:22,000 --> 00:50:24,000
然后你就区分一个大小写

1275
00:50:24,000 --> 00:50:27,000
区分一个罗马的字母

1276
00:50:27,000 --> 00:50:27,000
希腊的字母

1277
00:50:27,000 --> 00:50:29,000
当然可能也是因为字母 26 个

1278
00:50:29,000 --> 00:50:30,000
你不够用了

1279
00:50:30,000 --> 00:50:31,000
你才会讨这种东西

1280
00:50:31,000 --> 00:50:34,000
但是到了数码排版之后

1281
00:50:34,000 --> 00:50:37,000
你就发现我有各种各样的工具

1282
00:50:37,000 --> 00:50:39,000
这种口型性之后

1283
00:50:39,000 --> 00:50:43,000
你就说我要规定说这种 sign 要用怎么一个标识来写

1284
00:50:43,000 --> 00:50:46,000
然后我在罗马字符上面加个尖又是什么意思

1285
00:50:46,000 --> 00:50:51,000
就很多问题其实是研究数学做这些照牌系统

1286
00:50:51,000 --> 00:50:54,000
或者说是编辑他们自己给自己找的麻烦

1287
00:50:54,000 --> 00:50:56,000
所以咎由自取

1288
00:50:56,000 --> 00:50:57,000
自作孽不可活

1289
00:50:57,000 --> 00:50:59,000
搞得这么麻烦也活该

1290
00:50:59,000 --> 00:51:00,000
你要这样说的话

1291
00:51:01,000 --> 00:51:04,000
这不是代数的它的宿命所在吗

1292
00:51:04,000 --> 00:51:06,000
它用字母代替数

1293
00:51:06,000 --> 00:51:09,000
它肯定是数字母肯定是越来越不够的

1294
00:51:10,000 --> 00:51:11,000
一开始我们只用拉丁字母而已

1295
00:51:11,000 --> 00:51:12,000
然后希腊

1296
00:51:12,000 --> 00:51:15,000
我们的希腊字母都是数学老师教的

1297
00:51:15,000 --> 00:51:18,000
我相信希腊字母怎么也都是数学老师教的

1298
00:51:18,000 --> 00:51:18,000
是啊

1299
00:51:18,000 --> 00:51:20,000
我的意思就是说

1300
00:51:20,000 --> 00:51:22,000
它本来是有一些

1301
00:51:22,000 --> 00:51:24,000
就是说有可能有其他解决方案的

1302
00:51:24,000 --> 00:51:25,000
比如说为什么一定

1303
00:51:25,000 --> 00:51:26,000
比如说那个叫什么

1304
00:51:26,000 --> 00:51:28,000
SUM 的那个操作符号

1305
00:51:28,000 --> 00:51:30,000
一定要是这么一个规定的一个格式去描述

1306
00:51:30,000 --> 00:51:31,000
那个大 C 个码对吧

1307
00:51:31,000 --> 00:51:32,000
对吧

1308
00:51:32,000 --> 00:51:35,000
C 个码然后下面一个 N 等于顶上到多少到无穷

1309
00:51:35,000 --> 00:51:36,000
然后这边是一个什么东西

1310
00:51:36,000 --> 00:51:37,000
为什么一定要这种结构

1311
00:51:37,000 --> 00:51:38,000
它明明有更简单的方式可以写

1312
00:51:38,000 --> 00:51:40,000
大家可以自己找这种麻烦

1313
00:51:40,000 --> 00:51:40,000
对吧

1314
00:51:40,000 --> 00:51:42,000
就锐尔说的这些东西让我想到了很久以前

1315
00:51:42,000 --> 00:51:43,000
读过一篇文章

1316
00:51:43,000 --> 00:51:50,000
就说数学为什么会有现在的非常难的这个 reputation

1317
00:51:51,000 --> 00:51:54,000
原因之一跟它采用的这套符号系统是分不开的

1318
00:51:54,000 --> 00:51:58,000
就是数学的这套符号系统就好像五线谱

1319
00:51:58,000 --> 00:52:00,000
或者是对

1320
00:52:00,000 --> 00:52:01,000
它是一个入门的门槛

1321
00:52:01,000 --> 00:52:05,000
它是一个历史延呈下来的这么一套自成系统的一个东西

1322
00:52:06,000 --> 00:52:10,000
就假如说我们有一个数学的公式的理想模型的话

1323
00:52:10,000 --> 00:52:12,000
它并不是适合于

1324
00:52:12,000 --> 00:52:13,000
它不是设计出来的

1325
00:52:13,000 --> 00:52:16,000
描述这个理想模型的最合适的系统

1326
00:52:17,000 --> 00:52:19,000
但是这个系统的存在导致于很多人

1327
00:52:19,000 --> 00:52:20,000
他也许有数学天赋

1328
00:52:21,000 --> 00:52:24,000
但是因为没有办法去理解这套符号系统

1329
00:52:24,000 --> 00:52:26,000
而浪费了他的数学天赋

1330
00:52:26,000 --> 00:52:29,000
就好像那些有些可能音乐上面很有造诣的人

1331
00:52:29,000 --> 00:52:31,000
他不懂五线谱一样

1332
00:52:31,000 --> 00:52:34,000
有些人是靠着自己的数学直觉可以克服这个的

1333
00:52:34,000 --> 00:52:37,000
比如说那个什么印度曾经有过一个数学天才

1334
00:52:37,000 --> 00:52:39,000
叫什么拉努玛金之类的一个人

1335
00:52:39,000 --> 00:52:43,000
他就是一个靠着自己发明出来的数学符号

1336
00:52:43,000 --> 00:52:44,000
达到了很多

1337
00:52:44,000 --> 00:52:47,000
怎么说那些科班出身的人没能达到数学高度

1338
00:52:48,000 --> 00:52:52,000
但是不是我们每个普通人都可以有这样的能力

1339
00:52:52,000 --> 00:52:55,000
但是这套数学符号对于我们

1340
00:52:55,000 --> 00:52:58,000
每个普通人造成的障碍确实确确实是在那

1341
00:52:58,000 --> 00:52:59,000
就好像你在

1342
00:52:59,000 --> 00:53:01,000
你比如说你在知乎或者外太外什么地方

1343
00:53:01,000 --> 00:53:03,000
你想要本来用自己的输入法

1344
00:53:04,000 --> 00:53:05,000
写字写得开开心心的

1345
00:53:05,000 --> 00:53:07,000
忽然你想要插入一个数学公式

1346
00:53:07,000 --> 00:53:09,000
然后你发现你自己的输入法

1347
00:53:09,000 --> 00:53:12,000
完全没有办法帮你插入一个公式

1348
00:53:12,000 --> 00:53:15,000
然后你去找怎么样来画一个公式

1349
00:53:15,000 --> 00:53:17,000
很多人 ended up with

1350
00:53:17,000 --> 00:53:20,000
就是在纸上画写一个数学公式

1351
00:53:20,000 --> 00:53:22,000
然后拍一下那个纸的照片

1352
00:53:22,000 --> 00:53:22,000
对吧

1353
00:53:22,000 --> 00:53:24,000
在知乎上很多答案都是这样的

1354
00:53:24,000 --> 00:53:26,000
但是也有一些人会去研究说

1355
00:53:26,000 --> 00:53:29,000
我怎么样用一个比较

1356
00:53:29,000 --> 00:53:33,000
怎么说正统的方式来生成一个公式的图片

1357
00:53:33,000 --> 00:53:36,000
然后他会去发现 tech 这套东西

1358
00:53:37,000 --> 00:53:38,000
这里面还有一个很核心的问题

1359
00:53:38,000 --> 00:53:41,000
就是说他这套符号系统是

1360
00:53:42,000 --> 00:53:43,000
通过各种演进过来的

1361
00:53:43,000 --> 00:53:45,000
它并不成体系

1362
00:53:45,000 --> 00:53:47,000
也没有什么规则可言

1363
00:53:47,000 --> 00:53:49,000
然后他其实是各种不同流派

1364
00:53:49,000 --> 00:53:52,000
最终互相妥协融合的一个结果

1365
00:53:52,000 --> 00:53:52,000
对

1366
00:53:52,000 --> 00:53:54,000
就导致一个事实的问题

1367
00:53:54,000 --> 00:53:55,000
就是说不要说你

1368
00:53:55,000 --> 00:53:57,000
我们这种非数学专业的人

1369
00:53:57,000 --> 00:53:58,000
你肯定看不懂

1370
00:53:58,000 --> 00:53:59,000
就是哪怕你学术的专业人

1371
00:53:59,000 --> 00:54:02,000
你看到一篇特别前沿的这种数学研究

1372
00:54:02,000 --> 00:54:05,000
你还是得去看他在那篇论文的引文里面

1373
00:54:05,000 --> 00:54:08,000
会先逐步定义他用的这套

1374
00:54:08,000 --> 00:54:10,000
专门讨论这个话题的

1375
00:54:10,000 --> 00:54:11,000
还得想一想

1376
00:54:11,000 --> 00:54:12,000
符号题是怎么样子

1377
00:54:12,000 --> 00:54:14,000
就等于他还在不断的自我研发

1378
00:54:14,000 --> 00:54:15,000
就是我们叫什么来的

1379
00:54:15,000 --> 00:54:16,000
DSL 对吧

1380
00:54:16,000 --> 00:54:18,000
Domain Specific Language

1381
00:54:18,000 --> 00:54:19,000
专用领域的语言

1382
00:54:19,000 --> 00:54:20,000
他还在不断的延续

1383
00:54:20,000 --> 00:54:23,000
而所有的这些都是没有一个

1384
00:54:23,000 --> 00:54:25,000
没有一个通用的一个标准的

1385
00:54:25,000 --> 00:54:26,000
对

1386
00:54:26,000 --> 00:54:29,000
而且数学符号内部自己也有流派

1387
00:54:29,000 --> 00:54:30,000
就是什么

1388
00:54:30,000 --> 00:54:33,000
就哪怕我们上学的时候也会学到说

1389
00:54:33,000 --> 00:54:35,000
比如说一个一个矢量的标法

1390
00:54:35,000 --> 00:54:38,000
可能你如果你有粗体的话

1391
00:54:38,000 --> 00:54:39,000
应该用粗体

1392
00:54:39,000 --> 00:54:40,000
然后没有粗体的话

1393
00:54:40,000 --> 00:54:42,000
你要在上面画一个什么箭头之类的

1394
00:54:42,000 --> 00:54:43,000
对

1395
00:54:43,000 --> 00:54:45,000
然后有些流派可能已经消失了

1396
00:54:45,000 --> 00:54:47,000
比如说我们现在使用的积分

1397
00:54:47,000 --> 00:54:49,000
虽然是号称牛顿发明的

1398
00:54:49,000 --> 00:54:52,000
但是我们使用的大 S 的这样一个

1399
00:54:52,000 --> 00:54:53,000
积分符号

1400
00:54:53,000 --> 00:54:55,000
实际上是莱布尼茨的标法

1401
00:54:55,000 --> 00:54:57,000
牛顿那个标法是非常复杂的

1402
00:54:57,000 --> 00:55:00,000
但即便如此我们的微分

1403
00:55:00,000 --> 00:55:01,000
还是有两种方式

1404
00:55:01,000 --> 00:55:01,000
对吧

1405
00:55:01,000 --> 00:55:03,000
一个是什么

1406
00:55:03,000 --> 00:55:04,000
用那个字母

1407
00:55:04,000 --> 00:55:05,000
那个字母叫什么来着

1408
00:55:05,000 --> 00:55:07,000
SETA

1409
00:55:07,000 --> 00:55:09,000
然后另外一种是用撇对吧

1410
00:55:09,000 --> 00:55:10,000
那个怎么念我不知道

1411
00:55:10,000 --> 00:55:11,000
我也忘了

1412
00:55:11,000 --> 00:55:12,000
我一直念 SETA

1413
00:55:12,000 --> 00:55:13,000
好像是念 SETA

1414
00:55:13,000 --> 00:55:15,000
但肯定不是 SETA

1415
00:55:15,000 --> 00:55:16,000
那不是 SETA

1416
00:55:16,000 --> 00:55:18,000
就像一个小 D 一样的东西

1417
00:55:19,000 --> 00:55:21,000
而且他们当时发明的符号是手写的

1418
00:55:21,000 --> 00:55:23,000
肯定不是排印的

1419
00:55:23,000 --> 00:55:24,000
对啊

1420
00:55:24,000 --> 00:55:26,000
就刚才我吐槽了另外一件事情

1421
00:55:26,000 --> 00:55:29,000
就是现在我们排印上规定的各种非常细节

1422
00:55:29,000 --> 00:55:32,000
或者说是为了美观也好的这种要求

1423
00:55:32,000 --> 00:55:34,000
其实你在手写上是复刻不出来的

1424
00:55:34,000 --> 00:55:34,000
你手写

1425
00:55:34,000 --> 00:55:37,000
但你可以写的时候稍微正楷一点

1426
00:55:37,000 --> 00:55:38,000
稍微写得直立一点

1427
00:55:38,000 --> 00:55:40,000
但你有斜还有各种弯

1428
00:55:40,000 --> 00:55:41,000
还有各种夹花

1429
00:55:41,000 --> 00:55:41,000
对吧

1430
00:55:41,000 --> 00:55:42,000
但其实你在手写里面

1431
00:55:42,000 --> 00:55:44,000
并没有那么多的工具可用

1432
00:55:44,000 --> 00:55:44,000
对吧

1433
00:55:44,000 --> 00:55:47,000
取决于你手写的整齐度

1434
00:55:47,000 --> 00:55:49,000
你如果在版书上面写得很快的话

1435
00:55:49,000 --> 00:55:52,000
其实也就很快的一笔带过去了

1436
00:55:52,000 --> 00:55:54,000
他在手写过程中和你真的排印中

1437
00:55:54,000 --> 00:55:57,000
存在一个跳跃的过程

1438
00:55:57,000 --> 00:55:58,000
我再插播一下

1439
00:55:58,000 --> 00:56:00,000
就是我刚才查到了

1440
00:56:00,000 --> 00:56:02,000
首先求导是用 D

1441
00:56:02,000 --> 00:56:03,000
就是字母 D

1442
00:56:03,000 --> 00:56:05,000
DX 比 DY

1443
00:56:05,000 --> 00:56:07,000
然后我刚才说那个符号

1444
00:56:07,000 --> 00:56:08,000
或者说我们刚才试图找到的符号

1445
00:56:08,000 --> 00:56:10,000
不是一个希腊字母

1446
00:56:10,000 --> 00:56:12,000
而是它是偏微分的符号

1447
00:56:12,000 --> 00:56:13,000
它就是 D

1448
00:56:13,000 --> 00:56:17,000
偏微分符号 D 是全导数符号 D 的变体

1449
00:56:17,000 --> 00:56:20,000
它是 D 的另外一种写法

1450
00:56:20,000 --> 00:56:23,000
就是对一个草书的写体的 D

1451
00:56:23,000 --> 00:56:24,000
D 是什么

1452
00:56:24,000 --> 00:56:26,000
是 Differentiation 吗

1453
00:56:26,000 --> 00:56:28,000
Diritative 应该是吧

1454
00:56:28,000 --> 00:56:29,000
Diritative 对

1455
00:56:29,000 --> 00:56:30,000
导嘛对

1456
00:56:30,000 --> 00:56:31,000
就是什么

1457
00:56:31,000 --> 00:56:32,000
忘道

1458
00:56:32,000 --> 00:56:34,000
早就忘光了

1459
00:56:34,000 --> 00:56:35,000
所以这个东西就是

1460
00:56:35,000 --> 00:56:37,000
他们在发明这个符号的时候

1461
00:56:37,000 --> 00:56:42,000
就是用当时他们觉得最方便的方式发明的

1462
00:56:42,000 --> 00:56:44,000
然后他们就肯定又没有想到后面

1463
00:56:44,000 --> 00:56:46,000
技术发展以后的问题

1464
00:56:46,000 --> 00:56:46,000
对吧

1465
00:56:46,000 --> 00:56:49,000
他们觉得手写当时这个手写起来很方便

1466
00:56:49,000 --> 00:56:51,000
它其实也不一定是为了方便

1467
00:56:51,000 --> 00:56:54,000
它是为了就是为了记录一个思路

1468
00:56:54,000 --> 00:56:55,000
因为数学这东西很抽象嘛

1469
00:56:55,000 --> 00:56:58,000
所以它你有时候记不住那么多概念的时候

1470
00:56:58,000 --> 00:57:02,000
你要靠一个 notation 把它写在这个纸上

1471
00:57:02,000 --> 00:57:04,000
然后帮助你去做一些抽象的一些运算

1472
00:57:04,000 --> 00:57:06,000
就是你知道我们学什么求导啊

1473
00:57:06,000 --> 00:57:08,000
做变形的时候

1474
00:57:08,000 --> 00:57:11,000
都并没有去说考虑它的原理

1475
00:57:11,000 --> 00:57:12,000
它在手写的时候

1476
00:57:12,000 --> 00:57:14,000
它就想说就用另外一个方式的话

1477
00:57:14,000 --> 00:57:17,000
它就用一个草书的字体来写

1478
00:57:17,000 --> 00:57:19,000
但可是后来想要排印的时候

1479
00:57:19,000 --> 00:57:20,000
那我就得就麻烦了

1480
00:57:20,000 --> 00:57:22,000
排印的时候我就得必须要

1481
00:57:22,000 --> 00:57:24,000
用另外一个签字来做

1482
00:57:24,000 --> 00:57:26,000
这个像国际印标当时也是一样的

1483
00:57:26,000 --> 00:57:27,000
国际印标大家知道

1484
00:57:27,000 --> 00:57:29,000
有各种各样莫名其妙的符号

1485
00:57:29,000 --> 00:57:31,000
可是当时已经有签印了

1486
00:57:31,000 --> 00:57:33,000
所以呢作为签印来讲

1487
00:57:33,000 --> 00:57:35,000
他们很方便是把字母倒过来

1488
00:57:35,000 --> 00:57:37,000
这个对于签印来讲是很方便的

1489
00:57:37,000 --> 00:57:38,000
所以比如说那个什么

1490
00:57:38,000 --> 00:57:39,000
呃的那个发音的话

1491
00:57:39,000 --> 00:57:42,000
就是倒过来的小写字母一嘛

1492
00:57:42,000 --> 00:57:43,000
对 flip 一下就好了

1493
00:57:43,000 --> 00:57:45,000
手写你要倒写也不方便啊

1494
00:57:45,000 --> 00:57:48,000
这个是在签字的时候是很方便

1495
00:57:48,000 --> 00:57:49,000
可是反过来在电脑里面

1496
00:57:49,000 --> 00:57:51,000
你要输入那个评就超难的

1497
00:57:51,000 --> 00:57:53,000
直到现在你要输都很难输嘛对吧

1498
00:57:53,000 --> 00:57:55,000
国际印标这套东西对吧

1499
00:57:55,000 --> 00:57:56,000
是是是

1500
00:57:56,000 --> 00:57:59,000
那其实泰和他在解决数学公式的时候

1501
00:57:59,000 --> 00:58:01,000
其实也面临着这个问题

1502
00:58:01,000 --> 00:58:03,000
就是说他要输入那些各种各样的

1503
00:58:03,000 --> 00:58:05,000
这个奇怪的符号的时候

1504
00:58:05,000 --> 00:58:06,000
他都是用一个命令的

1505
00:58:06,000 --> 00:58:09,000
就是他要线性化成一个

1506
00:58:09,000 --> 00:58:11,000
这个键盘上就是 ASCII

1507
00:58:11,000 --> 00:58:12,000
那个就是这个什么

1508
00:58:12,000 --> 00:58:15,000
Corti 键盘上存在的这些按键

1509
00:58:15,000 --> 00:58:16,000
你还对那个

1510
00:58:16,000 --> 00:58:18,000
把它用一串命令来指代某一个符号吗

1511
00:58:19,000 --> 00:58:20,000
就跟我们现在转译一样吧对吧

1512
00:58:20,000 --> 00:58:21,000
是的

1513
00:58:24,000 --> 00:58:26,000
这我觉得泰和面临问题

1514
00:58:26,000 --> 00:58:28,000
跟 HTML 所解决问题是一样的

1515
00:58:28,000 --> 00:58:31,000
当然 HTML 出现要比泰和玩很多

1516
00:58:31,000 --> 00:58:33,000
或者 XM 出现要比泰和玩很多

1517
00:58:33,000 --> 00:58:36,000
但他们面临的问题和解决问题方式实际上是相似的

1518
00:58:36,000 --> 00:58:39,000
不过泰和可能因为他出现的比较早

1519
00:58:39,000 --> 00:58:42,000
所以他没有那么考虑周全

1520
00:58:43,000 --> 00:58:44,000
但这里其实有个很好的问题

1521
00:58:44,000 --> 00:58:47,000
就是说到底形式和内容是不是能够分离的

1522
00:58:47,000 --> 00:58:49,000
我觉得泰和或者是 Litech 也好

1523
00:58:49,000 --> 00:58:52,000
他证明的这件事情是实现不了的

1524
00:58:52,000 --> 00:58:57,000
就是说 HTML 和 CSS 一个写语意

1525
00:58:57,000 --> 00:58:58,000
一个写样式

1526
00:58:58,000 --> 00:59:00,000
这件事情只是一个美好的愿望而已

1527
00:59:00,000 --> 00:59:03,000
因为真正你落实到具体的那些

1528
00:59:03,000 --> 00:59:05,000
非标准化文档的那些细节的时候

1529
00:59:05,000 --> 00:59:07,000
你就发现你没有这种形式上

1530
00:59:07,000 --> 00:59:08,000
内容分离的细节了

1531
00:59:08,000 --> 00:59:09,000
比如说就刚才这个情况

1532
00:59:09,000 --> 00:59:10,000
这个 sum 对吧

1533
00:59:10,000 --> 00:59:14,000
然后从 1 到 100 的积分

1534
00:59:14,000 --> 00:59:14,000
积到多少

1535
00:59:14,000 --> 00:59:16,000
然后再去个什么样的技术

1536
00:59:16,000 --> 00:59:19,000
你如果要去用完全形式和内容分开的东西

1537
00:59:19,000 --> 00:59:20,000
去描述他的话

1538
00:59:20,000 --> 00:59:21,000
泰和其实是不支持的

1539
00:59:21,000 --> 00:59:22,000
Litech 也是不支持的

1540
00:59:22,000 --> 00:59:24,000
他从来没有支持过这件事情

1541
00:59:24,000 --> 00:59:27,000
最终你还是要去描述他的相对位置

1542
00:59:27,000 --> 00:59:29,000
一定要支持语意的话

1543
00:59:29,000 --> 00:59:31,000
可能只能用 MathML 之类的

1544
00:59:31,000 --> 00:59:34,000
就是 Math Markup Language

1545
00:59:34,000 --> 00:59:35,000
或者 MathMathLig

1546
00:59:35,000 --> 00:59:35,000
对

1547
00:59:35,000 --> 00:59:37,000
所以也就是刚才你念那一段的

1548
00:59:37,000 --> 00:59:38,000
对这个的一个指责

1549
00:59:38,000 --> 00:59:41,000
就是说你除非有一套完整的这种语言

1550
00:59:41,000 --> 00:59:43,000
去描述一个结构

1551
00:59:43,000 --> 00:59:45,000
就本质上泰和也好

1552
00:59:45,000 --> 00:59:46,000
Litech 也好

1553
00:59:46,000 --> 00:59:47,000
他去描述一个公式的时候

1554
00:59:47,000 --> 00:59:50,000
他并不单纯的是描述那公式的一个结构

1555
00:59:50,000 --> 00:59:53,000
他其实描述那公式长什么样子

1556
00:59:53,000 --> 00:59:54,000
大概长什么样子

1557
00:59:54,000 --> 00:59:56,000
大致结构是如何

1558
00:59:56,000 --> 00:59:57,000
你并不能从

1559
00:59:57,000 --> 00:59:58,000
就什么意思

1560
00:59:58,000 --> 01:00:01,000
如果说你能够用 Litech 去描述一个结构的话

1561
01:00:01,000 --> 01:00:03,000
理论上你是可以去

1562
01:00:03,000 --> 01:00:07,000
Parse 去解析他的结构

1563
01:00:07,000 --> 01:00:09,000
得到你想要的那个公式的一些

1564
01:00:09,000 --> 01:00:10,000
比如说变形和运算

1565
01:00:10,000 --> 01:00:11,000
他是可以自动化的

1566
01:00:11,000 --> 01:00:11,000
对吧

1567
01:00:11,000 --> 01:00:12,000
但在这件事情

1568
01:00:12,000 --> 01:00:13,000
在 Tag 里面是无法实现的

1569
01:00:13,000 --> 01:00:15,000
因为他的形式和内容

1570
01:00:15,000 --> 01:00:17,000
在微观的层面上是融合在一起的

1571
01:00:17,000 --> 01:00:19,000
你不要对 Tag 要求太高

1572
01:00:19,000 --> 01:00:21,000
Tag 它原来一开始

1573
01:00:21,000 --> 01:00:22,000
它就是个排版引擎而已

1574
01:00:22,000 --> 01:00:25,000
它跟这个结构一点关系都没有

1575
01:00:25,000 --> 01:00:26,000
我知道

1576
01:00:26,000 --> 01:00:27,000
刚才不是在讨论

1577
01:00:27,000 --> 01:00:30,000
就是说 Litech 在说这个内容和形式的分离

1578
01:00:30,000 --> 01:00:33,000
是对应于这个 HTML 和 CSS 这个关系吗

1579
01:00:33,000 --> 01:00:36,000
但这个其实我觉得在这里面

1580
01:00:36,000 --> 01:00:37,000
其实并没有很好的体现出这一点

1581
01:00:37,000 --> 01:00:39,000
它只是有这种倾向

1582
01:00:39,000 --> 01:00:39,000
对吧

1583
01:00:39,000 --> 01:00:41,000
但其实在实现层面上

1584
01:00:41,000 --> 01:00:44,000
它并没有非常彻底的去观测这件事情

1585
01:00:44,000 --> 01:00:47,000
Eric 说我们不要去指责 Litech 这件事情

1586
01:00:47,000 --> 01:00:49,000
但问题我们现在面临一个问题

1587
01:00:49,000 --> 01:00:51,000
就是 Tag 是业界标准

1588
01:00:51,000 --> 01:00:53,000
如果我能作为一个魔鬼代言人

1589
01:00:53,000 --> 01:00:57,000
我站到刚才那篇批驳 Tag 的文章的观点上

1590
01:00:57,000 --> 01:00:58,000
来说一句话

1591
01:00:58,000 --> 01:01:01,000
Tag 它实际上的确就是一个业界独留

1592
01:01:01,000 --> 01:01:01,000
这么一个状况

1593
01:01:01,000 --> 01:01:04,000
你用 Tag 写出来的公式

1594
01:01:04,000 --> 01:01:05,000
面临一个问题

1595
01:01:05,000 --> 01:01:10,000
就是它没有办法被很轻易的被意向 Parse

1596
01:01:10,000 --> 01:01:11,000
对吧

1597
01:01:11,000 --> 01:01:13,000
而且尤其是现在

1598
01:01:13,000 --> 01:01:16,000
比如说知乎你在知乎片文章里面生成一个

1599
01:01:16,000 --> 01:01:18,000
SVG 格式的公式

1600
01:01:18,000 --> 01:01:21,000
这个 SVG 格式描述的公式

1601
01:01:21,000 --> 01:01:24,000
原原本本的就是公式怎么画出来的

1602
01:01:24,000 --> 01:01:26,000
它跟这个公式的语意毫无关联

1603
01:01:26,000 --> 01:01:26,000
对吧

1604
01:01:26,000 --> 01:01:27,000
毫无关联

1605
01:01:27,000 --> 01:01:32,000
对我们可不可以说 Tag 的存在导致了整个数学的语意

1606
01:01:32,000 --> 01:01:36,000
表示在互联网上的存在处于一个支离破碎的

1607
01:01:36,000 --> 01:01:38,000
这个我觉得也不能这么指责

1608
01:01:38,000 --> 01:01:40,000
这个是一个结果

1609
01:01:40,000 --> 01:01:41,000
但是它并不是核心原因

1610
01:01:41,000 --> 01:01:42,000
是的

1611
01:01:42,000 --> 01:01:47,000
但是我的意思是说你不能说 Tag 就因此不该被指责了

1612
01:01:47,000 --> 01:01:49,000
因为它是它作为一个事实标准

1613
01:01:49,000 --> 01:01:51,000
它带来了现在业界的这么一个现况

1614
01:01:51,000 --> 01:01:52,000
对吧

1615
01:01:52,000 --> 01:01:54,000
我明白你说的意思

1616
01:01:54,000 --> 01:01:55,000
我想表达的点是说

1617
01:01:55,000 --> 01:01:59,000
这件事情你换任何一个软件都是不可能实现的

1618
01:01:59,000 --> 01:02:02,000
就是那个 Math, Macro, Language 也没有实现这一点

1619
01:02:02,000 --> 01:02:05,000
就是因为这个问题出在于那个底层

1620
01:02:05,000 --> 01:02:07,000
我们要表示的那套体系

1621
01:02:07,000 --> 01:02:10,000
那套数学符号本身就不支持这一点

1622
01:02:10,000 --> 01:02:12,000
它的结构不是那么的清晰明确的

1623
01:02:12,000 --> 01:02:14,000
这是数学符号本身的问题

1624
01:02:14,000 --> 01:02:18,000
而不是描述它或者去给它排版的其他的这些

1625
01:02:18,000 --> 01:02:18,000
没错

1626
01:02:18,000 --> 01:02:19,000
顶级的问题

1627
01:02:20,000 --> 01:02:23,000
然后这个讨论就没有结果了

1628
01:02:24,000 --> 01:02:25,000
我们在说什么

1629
01:02:26,000 --> 01:02:27,000
这是不可能有结果的

1630
01:02:27,000 --> 01:02:30,000
因为我们不是可以左右这个历史进程的人

1631
01:02:30,000 --> 01:02:32,000
我们只是作为历史的批判者

1632
01:02:33,000 --> 01:02:35,000
滚滚长江东适水

1633
01:02:35,000 --> 01:02:35,000
对吧

1634
01:02:35,000 --> 01:02:37,000
我们只是两个鱼桥

1635
01:02:37,000 --> 01:02:38,000
在这边喝酒

1636
01:02:38,000 --> 01:02:39,000
然后讨论这些事情

1637
01:02:39,000 --> 01:02:40,000
对

1638
01:02:40,000 --> 01:02:42,000
所以我觉得还是回到之前那个评书里面

1639
01:02:42,000 --> 01:02:45,000
我觉得目前这么去概括它

1640
01:02:45,000 --> 01:02:48,000
这个是比较中肯的一个评价

1641
01:02:48,000 --> 01:02:49,000
相对来说我觉得就是说

1642
01:02:49,000 --> 01:02:52,000
Taihe 只是一个底层的

1643
01:02:52,000 --> 01:02:55,000
不涉及说内容还是形式的这么一个排版引擎

1644
01:02:55,000 --> 01:02:57,000
因为排版引擎本质上是展现的是一个形式

1645
01:02:57,000 --> 01:02:58,000
对不对

1646
01:02:58,000 --> 01:02:59,000
它并不是体现的所有内容

1647
01:02:59,000 --> 01:03:02,000
你不可能去通过读 Taihe 的原码

1648
01:03:02,000 --> 01:03:03,000
去读懂这本书长

1649
01:03:03,000 --> 01:03:06,000
你还是要看他最终 compile 出来的那本书长什么样子

1650
01:03:06,000 --> 01:03:10,000
然后 Lamport 在上面做的一个重大的一个贡献

1651
01:03:10,000 --> 01:03:15,000
是说在一个无结构的体系上面引入了

1652
01:03:15,000 --> 01:03:18,000
就是 macro 的这么一个宏观的一个结构

1653
01:03:18,000 --> 01:03:20,000
实现了章节对吧

1654
01:03:20,000 --> 01:03:21,000
实现了这个 section

1655
01:03:21,000 --> 01:03:23,000
然后实现了数学公式的一些

1656
01:03:23,000 --> 01:03:24,000
实现了包管理

1657
01:03:24,000 --> 01:03:25,000
实现了模块化

1658
01:03:25,000 --> 01:03:28,000
但是具体在非常微观的层面上

1659
01:03:28,000 --> 01:03:31,000
它肯定还是无法完全的结构化的

1660
01:03:31,000 --> 01:03:33,000
就好像我们现在说

1661
01:03:33,000 --> 01:03:38,000
哪怕是说当年提 html 和 CS 的形式的分离提到现在

1662
01:03:38,000 --> 01:03:39,000
我们现在去看 web

1663
01:03:39,000 --> 01:03:43,000
它这两个事情还是互相连接在一起的

1664
01:03:43,000 --> 01:03:45,000
你到微观层面上还是无法分开

1665
01:03:45,000 --> 01:03:50,000
所以我觉得这里面也就是我们的技术理想

1666
01:03:50,000 --> 01:03:53,000
和客观现实之间的妥协点就是这样子

1667
01:03:54,000 --> 01:04:02,000
我很好奇你们对 W 3 C massml 有什么做和评论

1668
01:04:02,000 --> 01:04:04,000
Xml 就像暴力一样

1669
01:04:04,000 --> 01:04:05,000
你如果没有解决问题

1670
01:04:05,000 --> 01:04:07,000
你就用更多的暴力

1671
01:04:07,000 --> 01:04:08,000
大概这个感觉

1672
01:04:08,000 --> 01:04:12,000
就是 massml 本质上就是用 Xml 来

1673
01:04:12,000 --> 01:04:13,000
就是叠传家屋

1674
01:04:13,000 --> 01:04:15,000
就不停的加东西

1675
01:04:15,000 --> 01:04:16,000
啰啰嗦嗦的

1676
01:04:16,000 --> 01:04:17,000
Xml 就是这样

1677
01:04:17,000 --> 01:04:20,000
Xml 作为当时的一个银蛋

1678
01:04:20,000 --> 01:04:25,000
90 年代的人觉得好像你用原数据去描述数据

1679
01:04:25,000 --> 01:04:29,000
就可以让数据更好地被处理

1680
01:04:29,000 --> 01:04:31,000
但是人们会发现原数据本身也是数据

1681
01:04:31,000 --> 01:04:34,000
然后你需要给原数据加上更多原数据

1682
01:04:34,000 --> 01:04:36,000
你这只算是无穷精英

1683
01:04:36,000 --> 01:04:40,000
但我觉得 massml 虽然是一个非常复杂的文档

1684
01:04:40,000 --> 01:04:43,000
它本质上也不是让人来写的和让人来读的

1685
01:04:43,000 --> 01:04:45,000
它的存在意义就像 Xml 一样

1686
01:04:45,000 --> 01:04:46,000
它是为了保存信息

1687
01:04:46,000 --> 01:04:48,000
然后给信息加上原信息

1688
01:04:48,000 --> 01:04:50,000
虽然它的手段非常的拙劣

1689
01:04:50,000 --> 01:04:52,000
或者说非常的啰嗦

1690
01:04:52,000 --> 01:04:54,000
但是它还是起到它的应有的目的

1691
01:04:54,000 --> 01:04:56,000
massml 其实你不用多看

1692
01:04:56,000 --> 01:05:00,000
massml 就是 html for 公式

1693
01:05:00,000 --> 01:05:01,000
就大概这种感觉

1694
01:05:01,000 --> 01:05:06,000
就是它你可以把所有的符号用那个监控号扩起来

1695
01:05:06,000 --> 01:05:11,000
然后这个监控号里面的文本就是告诉你这个符号是干嘛的

1696
01:05:11,000 --> 01:05:17,000
它维系了一套数学的公式的语意

1697
01:05:17,000 --> 01:05:23,000
而且它基本上没有涉及说这个语意应该是怎么用什么样的方法来表示的

1698
01:05:23,000 --> 01:05:30,000
所以理论上你可用一套类似于 css 的东西来描述一个 massml 生成的

1699
01:05:30,000 --> 01:05:34,000
用 massml 来描述的一个数学公式

1700
01:05:34,000 --> 01:05:42,000
而 massml 本身只负责描述这个数学公式里面每一个元件之间的关系

1701
01:05:42,000 --> 01:05:43,000
大概这样

1702
01:05:43,000 --> 01:05:47,000
它的最大的问题就是你要编辑它或者是你要生成它是非常麻烦的

1703
01:05:47,000 --> 01:05:49,000
但是你读起来其实还是比较简单的

1704
01:05:49,000 --> 01:05:52,000
massml 这个名字就很难念

1705
01:05:52,000 --> 01:05:55,000
mathematic markup language 这个东西

1706
01:05:55,000 --> 01:06:03,000
它本质上就是把 tech 的理想用 xml 这个标记语言重新实现一遍

1707
01:06:03,000 --> 01:06:05,000
但其实他们两个都没有实现刚才我说的那一点

1708
01:06:07,000 --> 01:06:07,000
不是不是

1709
01:06:07,000 --> 01:06:09,000
我觉得这个还是差别蛮大的

1710
01:06:09,000 --> 01:06:15,000
因为 tech 就是我们介绍几个 tech 的最比较基本的那个命令

1711
01:06:15,000 --> 01:06:20,000
就像 hml 有什么 em 有什么 strong 一样

1712
01:06:20,000 --> 01:06:27,000
tech 是有比如说 textbf boldface 或者是 textit italic 诸如此类的

1713
01:06:27,000 --> 01:06:29,000
你说 textbf 描述的是什么

1714
01:06:29,000 --> 01:06:31,000
描述的是它的风格

1715
01:06:31,000 --> 01:06:35,000
就是我说接下来这个部分要用粗体来描述

1716
01:06:35,000 --> 01:06:37,000
可是这个粗体的意义是什么

1717
01:06:38,000 --> 01:06:41,000
它跟这个东西的实际语意是毫无关联的

1718
01:06:41,000 --> 01:06:46,000
但是 massml 这边就它的每个标签都是跟这个语意相关的

1719
01:06:46,000 --> 01:06:49,000
你不能只说这个东西需要用粗体

1720
01:06:49,000 --> 01:06:53,000
你必须在 massml 里面描述这个粗体标出来的东西是什么

1721
01:06:53,000 --> 01:06:56,000
不就粗体这个概念在那里面不存在

1722
01:06:56,000 --> 01:06:58,000
它实际上在理念上是要比

1723
01:06:58,000 --> 01:06:59,000
对吧

1724
01:06:59,000 --> 01:07:01,000
它其实要表述的是这个数学结构怎么回事

1725
01:07:01,000 --> 01:07:02,000
就是它表述的是一个

1726
01:07:02,000 --> 01:07:04,000
加上我已经开始提出了一个第一个问题

1727
01:07:04,000 --> 01:07:07,000
就是数学公式的那些各种 notation 的结构

1728
01:07:07,000 --> 01:07:10,000
它想用一个通用的方法把它描述出来

1729
01:07:10,000 --> 01:07:14,000
其实这个东西本来就是一个很困难的事情

1730
01:07:14,000 --> 01:07:16,000
就几乎不可能完成的用

1731
01:07:16,000 --> 01:07:20,000
所以它本身的复杂性是来源于数学公式本身的复杂性

1732
01:07:20,000 --> 01:07:23,000
但它还是描述出了数学公式之间的关系

1733
01:07:23,000 --> 01:07:25,000
就好像 Lisp 比如说 Lisp

1734
01:07:25,000 --> 01:07:28,000
你用 Lisp 可以描述出任何足够复杂的

1735
01:07:28,000 --> 01:07:31,000
任何复杂的数学公式都可以用 Lisp 描述出来

1736
01:07:31,000 --> 01:07:32,000
只不过 Lisp 的描述

1737
01:07:32,000 --> 01:07:35,000
你可能就是非常烦人类的

1738
01:07:35,000 --> 01:07:36,000
对吧

1739
01:07:36,000 --> 01:07:37,000
但它是可以的

1740
01:07:37,000 --> 01:07:39,000
MathML 实际上做到的事情跟 Lisp 差不多

1741
01:07:39,000 --> 01:07:40,000
对

1742
01:07:40,000 --> 01:07:44,000
就是引入一个数状结构去描述

1743
01:07:44,000 --> 01:07:46,000
去描述一个数学的 notation

1744
01:07:46,000 --> 01:07:47,000
把它拆解出来

1745
01:07:47,000 --> 01:07:48,000
对

1746
01:07:48,000 --> 01:07:49,000
这么比的话

1747
01:07:49,000 --> 01:07:53,000
它其实应该说是应该是它选择的载体不好

1748
01:07:54,000 --> 01:07:57,000
MathML 这个坑实在是太深了

1749
01:07:59,000 --> 01:08:01,000
所以我们接下来要往什么地方讲

1750
01:08:01,000 --> 01:08:04,000
给大家说一下各种环境下的 Tech 吗

1751
01:08:04,000 --> 01:08:05,000
OK

1752
01:08:05,000 --> 01:08:05,000
对

1753
01:08:05,000 --> 01:08:07,000
到底有多少种 XX

1754
01:08:07,000 --> 01:08:07,000
Tech

1755
01:08:07,000 --> 01:08:09,000
回乡字、回字有几种写法

1756
01:08:09,000 --> 01:08:11,000
那就多了我跟你说

1757
01:08:11,000 --> 01:08:11,000
OK

1758
01:08:11,000 --> 01:08:13,000
假如你听我们的节目

1759
01:08:13,000 --> 01:08:15,000
然后对 Tech 产生了兴趣

1760
01:08:15,000 --> 01:08:16,000
那么

1761
01:08:16,000 --> 01:08:18,000
首先最重要的一件事就是获得 Tech

1762
01:08:19,000 --> 01:08:21,000
会有这样的人吗

1763
01:08:21,000 --> 01:08:22,000
为什么每次你都要拆穿我

1764
01:08:22,000 --> 01:08:24,000
首先你要获得哪一个 Tech

1765
01:08:24,000 --> 01:08:27,000
或者说假如你是一个即将要写论文的人

1766
01:08:27,000 --> 01:08:30,000
然后你想要尝试一下传说中

1767
01:08:30,000 --> 01:08:33,000
中世纪程序员使用的解决方案

1768
01:08:33,000 --> 01:08:36,000
那么你需要获得一个你所使用的操作讯口上的

1769
01:08:36,000 --> 01:08:38,000
Tech 环境

1770
01:08:38,000 --> 01:08:41,000
因为在座的四位都是 Mac 用户

1771
01:08:41,000 --> 01:08:43,000
那我们要先从 Mac 说起吧

1772
01:08:43,000 --> 01:08:45,000
就我当时用的是

1773
01:08:45,000 --> 01:08:46,000
就叫 Mac Tech

1774
01:08:46,000 --> 01:08:47,000
那个很老了

1775
01:08:47,000 --> 01:08:49,000
但是我要是没记错的话

1776
01:08:49,000 --> 01:08:52,000
Mac Tech 是现在已经停止开发了

1777
01:08:52,000 --> 01:08:53,000
嗯

1778
01:08:53,000 --> 01:08:54,000
还有更新版的

1779
01:08:54,000 --> 01:08:57,000
你现在去搜这个 Mac Tech

1780
01:08:57,000 --> 01:09:00,000
就是 Mac Tech 这个东西

1781
01:09:00,000 --> 01:09:04,000
它会让你去到一个

1782
01:09:04,000 --> 01:09:07,000
Mac Tech 2020 的发行版

1783
01:09:07,000 --> 01:09:07,000
对

1784
01:09:07,000 --> 01:09:10,000
说到这个就要先解释一下什么是发行版

1785
01:09:10,000 --> 01:09:12,000
本质上 Mac Tech 它是做了一个事儿

1786
01:09:12,000 --> 01:09:14,000
就把它把常用的那些工具包

1787
01:09:14,000 --> 01:09:16,000
都给你打包在一起

1788
01:09:16,000 --> 01:09:18,000
然后你可以一次去下载完安装好

1789
01:09:18,000 --> 01:09:19,000
就可以开始用了

1790
01:09:19,000 --> 01:09:20,000
你不用考虑

1791
01:09:20,000 --> 01:09:22,000
你需要到底你哪些组件

1792
01:09:22,000 --> 01:09:24,000
然后组件相互作用是什么样子

1793
01:09:24,000 --> 01:09:26,000
你可以大致略过这个问题

1794
01:09:26,000 --> 01:09:28,000
就有点像 Linux 是一样

1795
01:09:28,000 --> 01:09:28,000
对吧

1796
01:09:28,000 --> 01:09:30,000
我们现在说你要去装一个 Linux

1797
01:09:30,000 --> 01:09:31,000
你先选一个发行版

1798
01:09:31,000 --> 01:09:32,000
对吧

1799
01:09:32,000 --> 01:09:33,000
你要选什么

1800
01:09:33,000 --> 01:09:33,000
Ubuntu 啊

1801
01:09:33,000 --> 01:09:34,000
Fedora 啊

1802
01:09:34,000 --> 01:09:34,000
之类的

1803
01:09:34,000 --> 01:09:35,000
对吧

1804
01:09:35,000 --> 01:09:37,000
你要他们把那些打包的工作给你做好了

1805
01:09:37,000 --> 01:09:39,000
你去用一个现成的版本就可以了

1806
01:09:39,000 --> 01:09:42,000
那 Mac 上面可能还是用这个比较简单一些

1807
01:09:42,000 --> 01:09:45,000
然后如果你在 Windows 上的话

1808
01:09:45,000 --> 01:09:47,000
应该去下载

1809
01:09:47,000 --> 01:09:49,000
据我所知应该是 Mic Tech

1810
01:09:49,000 --> 01:09:52,000
就是 M-I-K-T-E-X

1811
01:09:52,000 --> 01:09:53,000
这个我没用过

1812
01:09:53,000 --> 01:09:55,000
就这个我不知道现在还是不是

1813
01:09:55,000 --> 01:09:57,000
我上本科的时候

1814
01:09:57,000 --> 01:09:59,000
当时用过 Windows 写那个系统

1815
01:09:59,000 --> 01:10:01,000
然后装的确实是这个系统

1816
01:10:01,000 --> 01:10:03,000
就是 Mic

1817
01:10:03,000 --> 01:10:04,000
Mic 还是 Mic Tech

1818
01:10:04,000 --> 01:10:05,000
好用吗

1819
01:10:05,000 --> 01:10:07,000
也没有什么其他好选的

1820
01:10:07,000 --> 01:10:10,000
你就是存在说能用和不能用的区别

1821
01:10:10,000 --> 01:10:12,000
其他你对一个新手

1822
01:10:12,000 --> 01:10:13,000
你根本就属于不能用的状态

1823
01:10:13,000 --> 01:10:14,000
就不用考虑这个问题了

1824
01:10:14,000 --> 01:10:15,000
你知道吗

1825
01:10:18,000 --> 01:10:19,000
那如果你用 Linux 的话

1826
01:10:19,000 --> 01:10:22,000
你需要自己手写一个 Tag 的这门一个系统

1827
01:10:22,000 --> 01:10:24,000
Linux 上没有 Tag 的包

1828
01:10:24,000 --> 01:10:26,000
所以就是比较尴尬的一件事情

1829
01:10:26,000 --> 01:10:29,000
应该有的什么 APT 各种

1830
01:10:29,000 --> 01:10:31,000
我在胡说

1831
01:10:33,000 --> 01:10:36,000
Linux 上的 Tag 实际上是最好的一个

1832
01:10:36,000 --> 01:10:38,000
最好的一个 Debuter

1833
01:10:38,000 --> 01:10:39,000
Tag Live

1834
01:10:39,000 --> 01:10:42,000
这个东西应该是目前最积极维护

1835
01:10:42,000 --> 01:10:44,000
然后也是用户技术最大的一个群体

1836
01:10:44,000 --> 01:10:47,000
也是我印象中体积最庞大的

1837
01:10:47,000 --> 01:10:51,000
他当时我记得是在多少十几年前

1838
01:10:51,000 --> 01:10:53,000
那个时候互联网状态

1839
01:10:53,000 --> 01:10:53,000
你想象一下

1840
01:10:53,000 --> 01:10:55,000
他的一个完整的装包都已经小

1841
01:10:55,000 --> 01:10:57,000
要小 10 个 GB 了

1842
01:10:57,000 --> 01:10:57,000
你想象一下

1843
01:10:57,000 --> 01:11:02,000
但是不管你在哪个平台上用哪个发行板

1844
01:11:02,000 --> 01:11:04,000
你的工作流程基本上是一样的

1845
01:11:04,000 --> 01:11:08,000
就是你要先写一个成文本的 Tag 文件

1846
01:11:08,000 --> 01:11:12,000
然后用你的发行板所提供给你的

1847
01:11:12,000 --> 01:11:15,000
通常是一个叫做 LagTag 或者是 PDF

1848
01:11:15,000 --> 01:11:18,000
LagTag 的程序去处理你写好的文件

1849
01:11:18,000 --> 01:11:20,000
然后他会帮你生成出一个 PDF 文件

1850
01:11:20,000 --> 01:11:22,000
但这里面有很多坑

1851
01:11:22,000 --> 01:11:23,000
就是虽然我刚才讲了这个过程

1852
01:11:23,000 --> 01:11:24,000
听起来轻薄淡写

1853
01:11:24,000 --> 01:11:25,000
但实际上这里面有很多坑

1854
01:11:25,000 --> 01:11:29,000
比如说你写的东西要不要支持中文

1855
01:11:29,000 --> 01:11:31,000
是不是要支持 CJK

1856
01:11:32,000 --> 01:11:36,000
然后你写的东西是不是要支持插图

1857
01:11:36,000 --> 01:11:39,000
除了刚才 Ryo 提到的 TickZ 之外

1858
01:11:40,000 --> 01:11:42,000
你要不要支持其他格式的插图

1859
01:11:42,000 --> 01:11:43,000
如果你要的话

1860
01:11:43,000 --> 01:11:44,000
你必须做出选择

1861
01:11:44,000 --> 01:11:48,000
然后你必须注意你的插图是怎么生成的

1862
01:11:48,000 --> 01:11:50,000
以什么格式来提供给 Tag

1863
01:11:50,000 --> 01:11:53,000
然后你可能会就你的领域

1864
01:11:53,000 --> 01:11:56,000
需要用到一些你的领域才会使用的包

1865
01:11:56,000 --> 01:11:58,000
如果你的领域比较大众的话

1866
01:11:58,000 --> 01:11:59,000
这个包可能是有很多人维护的

1867
01:11:59,000 --> 01:12:01,000
如果你的领域比较小众的话

1868
01:12:01,000 --> 01:12:04,000
那么很有可能你必须自己亲自去解决一些问题

1869
01:12:04,000 --> 01:12:06,000
Tag 用户群里面有一句话说

1870
01:12:06,000 --> 01:12:09,000
You have to know everything to do anything

1871
01:12:09,000 --> 01:12:11,000
这个我深有体会

1872
01:12:11,000 --> 01:12:15,000
你面临着的是一个非常陡峭的学习曲线

1873
01:12:15,000 --> 01:12:15,000
必须说

1874
01:12:15,000 --> 01:12:18,000
然后如果你的论文的时间比较赶的话

1875
01:12:18,000 --> 01:12:22,000
我劝你还是另学一条别的途径

1876
01:12:22,000 --> 01:12:22,000
用模板

1877
01:12:23,000 --> 01:12:25,000
我举个例子大家可以体会一下

1878
01:12:25,000 --> 01:12:30,000
如果说我们节目也很多是程序员听众

1879
01:12:30,000 --> 01:12:34,000
我们当时说学习 Vim 这个编辑器是一个非常陡峭的学习曲线

1880
01:12:34,000 --> 01:12:37,000
然后当你取完之后是非常好爽的

1881
01:12:37,000 --> 01:12:41,000
那么学习 Tag 或者任何版本的上手来讲

1882
01:12:41,000 --> 01:12:42,000
它比那个曲线陡峭多了

1883
01:12:43,000 --> 01:12:45,000
你本质上是要学习一门全新的

1884
01:12:45,000 --> 01:12:47,000
你也不知道什么原理

1885
01:12:47,000 --> 01:12:55,000
并且它的整个设计理念和设计思维都是来自于 50 年前的一套编程环境

1886
01:12:55,000 --> 01:12:56,000
本质上你在做这个事情

1887
01:12:57,000 --> 01:13:01,000
其实最终就说自谈自串的听众朋友们

1888
01:13:01,000 --> 01:13:06,000
是很有可能是 Tag 的目标用户群

1889
01:13:06,000 --> 01:13:07,000
这完全重合

1890
01:13:07,000 --> 01:13:10,000
既是程序员又要知道怎么排版

1891
01:13:10,000 --> 01:13:13,000
所以中司的封装做得不是特别好

1892
01:13:13,000 --> 01:13:15,000
露出的东西太多

1893
01:13:15,000 --> 01:13:17,000
而且本质上你还得会排版

1894
01:13:17,000 --> 01:13:21,000
而且事实上我也知道我们听众里面有

1895
01:13:21,000 --> 01:13:25,000
同时加入我们两个群的听众有 Tag 高手

1896
01:13:26,000 --> 01:13:27,000
的确是有的

1897
01:13:27,000 --> 01:13:33,000
我们之前我觉得好像是我们有一个朋友还做过 Tag 相关的开发

1898
01:13:33,000 --> 01:13:35,000
就是之前请过的江江

1899
01:13:35,000 --> 01:13:40,000
所以这些 Tag 高手听完这期节目是会被气的吐血吗

1900
01:13:40,000 --> 01:13:42,000
我觉得他们也能够理解

1901
01:13:42,000 --> 01:13:46,000
毕竟这是一个我们要在短短一两个小时里面解释清楚

1902
01:13:46,000 --> 01:13:48,000
这件事情本身就是一个不可能完成的任务

1903
01:13:50,000 --> 01:13:53,000
所以现在 TagLag 是不是在 Mac 上也是可以用

1904
01:13:53,000 --> 01:13:57,000
它好像已经变成一个跨平台的应该是可以的

1905
01:13:58,000 --> 01:14:01,000
那个 MICTAC 也可以在跨平台用了

1906
01:14:01,000 --> 01:14:04,000
大家都在想办法去挤占别人的地盘

1907
01:14:05,000 --> 01:14:08,000
而且这个东西实际上是比较惯性导向的

1908
01:14:08,000 --> 01:14:09,000
就是你之前用什么

1909
01:14:09,000 --> 01:14:11,000
你可能之后就一直用什么

1910
01:14:11,000 --> 01:14:16,000
因为大部分使用了 Tag 的人实际上是对 Tag 本身的发展没有太多兴趣的

1911
01:14:16,000 --> 01:14:17,000
他们有更多

1912
01:14:17,000 --> 01:14:18,000
只是一个用户

1913
01:14:18,000 --> 01:14:20,000
自己领域的问题需要去解决

1914
01:14:20,000 --> 01:14:21,000
他们可能一开始用什么

1915
01:14:21,000 --> 01:14:22,000
或者他们师兄用什么

1916
01:14:22,000 --> 01:14:23,000
或者他们学校用什么

1917
01:14:23,000 --> 01:14:26,000
就他们学校会给一套模板

1918
01:14:26,000 --> 01:14:29,000
然后这个模板在什么环境之下测试的

1919
01:14:29,000 --> 01:14:31,000
他们就会去用那个环境

1920
01:14:31,000 --> 01:14:33,000
大概这样一个模式

1921
01:14:34,000 --> 01:14:34,000
对

1922
01:14:34,000 --> 01:14:36,000
因为你要去了解

1923
01:14:36,000 --> 01:14:39,000
从零开始没有任何被别人给你的帮助的话

1924
01:14:39,000 --> 01:14:41,000
其实是非常困难的一件事情

1925
01:14:44,000 --> 01:14:45,000
我问你个问题

1926
01:14:45,000 --> 01:14:48,000
因为这里面估计也只有你有可能干这件事情

1927
01:14:49,000 --> 01:14:52,000
你写论文或者写作的时候自定义过红

1928
01:14:54,000 --> 01:14:54,000
有

1929
01:14:54,000 --> 01:14:57,000
那你自定义的红到哪个程度了

1930
01:14:57,000 --> 01:14:58,000
没有很复杂

1931
01:14:58,000 --> 01:15:00,000
就是大概四五个命令

1932
01:15:01,000 --> 01:15:01,000
了不起了

1933
01:15:01,000 --> 01:15:03,000
然后定义成一个红

1934
01:15:03,000 --> 01:15:04,000
我从来没有

1935
01:15:04,000 --> 01:15:05,000
我自定义的红

1936
01:15:05,000 --> 01:15:06,000
我这么说

1937
01:15:06,000 --> 01:15:09,000
我其实从来没有真正意义上写过 Tag

1938
01:15:09,000 --> 01:15:11,000
我其实都在写 LagTag

1939
01:15:11,000 --> 01:15:13,000
Tag 底层那些命令我从来没有碰过

1940
01:15:14,000 --> 01:15:15,000
这我倒是可以介绍一下

1941
01:15:15,000 --> 01:15:18,000
Tag 底层大概是一个什么样子

1942
01:15:20,000 --> 01:15:21,000
首先说 Tag

1943
01:15:22,000 --> 01:15:24,000
最古早的就是原汁原味的 Tag

1944
01:15:25,000 --> 01:15:27,000
有时候也被人们称为 PlayingTag

1945
01:15:27,000 --> 01:15:31,000
它的底层是用一种

1946
01:15:31,000 --> 01:15:33,000
我们最少提到的叫 Web

1947
01:15:33,000 --> 01:15:34,000
这种编程语言写的

1948
01:15:34,000 --> 01:15:36,000
而 Web 看起来是什么样的

1949
01:15:36,000 --> 01:15:39,000
高德纳的另外一个理念叫做

1950
01:15:39,000 --> 01:15:41,000
literature programming

1951
01:15:41,000 --> 01:15:42,000
文学编程

1952
01:15:43,000 --> 01:15:45,000
文学编程这个东西

1953
01:15:45,000 --> 01:15:46,000
就是他写 Web 的时候

1954
01:15:47,000 --> 01:15:49,000
期间发明出来的一套开发理念

1955
01:15:50,000 --> 01:15:51,000
你可以这么理解

1956
01:15:51,000 --> 01:15:53,000
然后他这套理念大概的意思就是说

1957
01:15:53,000 --> 01:15:55,000
我写程式要像写一篇文章一样

1958
01:15:55,000 --> 01:15:58,000
我要有起承转合

1959
01:16:01,000 --> 01:16:04,000
他说我要用人类的语言

1960
01:16:04,000 --> 01:16:07,000
用读者能够理解的语言去描述这个程序

1961
01:16:07,000 --> 01:16:12,000
然后我这个程序本身是嵌在我的写的文章里面的

1962
01:16:12,000 --> 01:16:13,000
这个说法可能比较抽象

1963
01:16:13,000 --> 01:16:15,000
具体来说就是说他一开始会

1964
01:16:15,000 --> 01:16:18,000
比如说他用写注释的方式来写出我这个程序是干嘛的

1965
01:16:19,000 --> 01:16:20,000
然后我现在要开始一个 section

1966
01:16:21,000 --> 01:16:23,000
这个 section 里面包含了以下 variable

1967
01:16:23,000 --> 01:16:24,000
然后这些 variable

1968
01:16:24,000 --> 01:16:25,000
每个 variable 是拿来干嘛的

1969
01:16:26,000 --> 01:16:26,000
然后用 Web

1970
01:16:27,000 --> 01:16:29,000
你可以去分析你刚才写的这篇文章

1971
01:16:29,000 --> 01:16:31,000
把里面你所有提到的

1972
01:16:31,000 --> 01:16:33,000
比如说你刚才说我以下要使用

1973
01:16:34,000 --> 01:16:35,000
42 个 variable

1974
01:16:35,000 --> 01:16:37,000
然后每个 variable 他都有一个描述

1975
01:16:38,000 --> 01:16:42,000
然后用 Web 可以把这些 variable 描述抽离出来

1976
01:16:42,000 --> 01:16:43,000
然后生成一个程序

1977
01:16:43,000 --> 01:16:44,000
这个程序是可以编译的

1978
01:16:44,000 --> 01:16:46,000
那么这个程序是什么

1979
01:16:46,000 --> 01:16:47,000
具体是什么程序呢

1980
01:16:47,000 --> 01:16:50,000
在古早的 Playing Tech 里面

1981
01:16:50,000 --> 01:16:52,000
这个程序是 Pasco 的一个字节

1982
01:16:53,000 --> 01:16:56,000
不过我们的节目的心中就不用解释 Pasco 是什么了是吗

1983
01:16:56,000 --> 01:16:57,000
对

1984
01:16:57,000 --> 01:17:01,000
然后他的 Web 有另外一个工具

1985
01:17:01,000 --> 01:17:04,000
这个工具的用途是

1986
01:17:04,000 --> 01:17:07,000
作用是把你刚才写的这篇文章

1987
01:17:07,000 --> 01:17:08,000
排印出来

1988
01:17:09,000 --> 01:17:14,000
生成 Technology 来达到一个更加易于阅读的这么一个状态

1989
01:17:14,000 --> 01:17:19,000
就是说他的所谓 Literature Programming 的理念里面实现了两件事情

1990
01:17:19,000 --> 01:17:25,000
一件事情是让你写出来文章变成一个可以执行的程序

1991
01:17:25,000 --> 01:17:31,000
另外一个功能是让你写的文章有一个适合阅读的 presentation

1992
01:17:31,000 --> 01:17:33,000
这么一个功能

1993
01:17:33,000 --> 01:17:33,000
OK

1994
01:17:33,000 --> 01:17:35,000
这是 Playing Tech

1995
01:17:35,000 --> 01:17:37,000
然后这个 Playing Tech 因为他用的是 Pasco

1996
01:17:37,000 --> 01:17:40,000
然后如果你要坚持使用他的话

1997
01:17:40,000 --> 01:17:44,000
等于你每一个环境里面都要有一个 Pasco 编译器

1998
01:17:44,000 --> 01:17:47,000
而重点都是 Pasco 这个语言现在已经示威了

1999
01:17:47,000 --> 01:17:52,000
所以后来有一个人写了一个东西叫做 web 2 c

2000
01:17:52,000 --> 01:17:58,000
就是采用 C 语言来描述 web 里面的程序

2001
01:17:58,000 --> 01:17:59,000
大概就是这样

2002
01:17:59,000 --> 01:18:00,000
后来有个越南人

2003
01:18:00,000 --> 01:18:05,000
他在捷克的一所大学里面念博士的时候

2004
01:18:06,000 --> 01:18:08,000
写了一个程序叫做 PDF Tech

2005
01:18:08,000 --> 01:18:12,000
然后这个 PDF Tech 他又跳过了之前我们一开始介绍的

2006
01:18:12,000 --> 01:18:14,000
那个 PDA Tech 要生成一个 DVI 的这一步

2007
01:18:14,000 --> 01:18:19,000
就是他改为直接生成一个 PDF 文件

2008
01:18:19,000 --> 01:18:21,000
然后这个东西是用的是 web 2 c

2009
01:18:22,000 --> 01:18:26,000
就是说现在事实上最广为使用的这么一个引擎

2010
01:18:27,000 --> 01:18:29,000
PDF Tech 他是基于 web 2 c 的

2011
01:18:29,000 --> 01:18:34,000
然后他最基本的最核心的这样一个东西是 C 语言的一个子级

2012
01:18:36,000 --> 01:18:37,000
大概就是这样

2013
01:18:37,000 --> 01:18:39,000
然后现在还有一个引擎叫做 Lua Tech

2014
01:18:39,000 --> 01:18:43,000
然后 Lua Tech 就是试图把 Tet 的整个引擎暴露给 Lua

2015
01:18:43,000 --> 01:18:48,000
这个本质上还是嵌入到 C 里面的这样一个语言

2016
01:18:49,000 --> 01:18:52,000
然后你可以用 Lua 来做一些比较高层的开发

2017
01:18:53,000 --> 01:18:55,000
大概底层是这样一个现状

2018
01:18:56,000 --> 01:18:59,000
没有如果你要说这个 Tet 的发展的话

2019
01:18:59,000 --> 01:19:04,000
刚才那个越南人那个他是不是叫 Han Te Tan 是吧

2020
01:19:05,000 --> 01:19:06,000
我不会念

2021
01:19:06,000 --> 01:19:07,000
我也不会念

2022
01:19:07,000 --> 01:19:08,000
我觉得还是不要侮辱越南人

2023
01:19:08,000 --> 01:19:09,000
对不起

2024
01:19:11,000 --> 01:19:13,000
肯定是念错了我觉得

2025
01:19:13,000 --> 01:19:16,000
但是因为后面就有很多这样的扩展

2026
01:19:17,000 --> 01:19:20,000
中国的话不是那个李阿林他们也在做

2027
01:19:20,000 --> 01:19:23,000
他这个是那个是什么 PTNG 是吧

2028
01:19:23,000 --> 01:19:24,000
这个我还真不知道

2029
01:19:24,000 --> 01:19:27,000
他是用那个 C 语言开发的

2030
01:19:27,000 --> 01:19:34,000
当年他那个是 Yny 的 Tet 重新开始写的一个东西

2031
01:19:34,000 --> 01:19:37,000
然后就可以直接输出 PDF

2032
01:19:37,000 --> 01:19:38,000
那是李阿林

2033
01:19:38,000 --> 01:19:39,000
这个东西现在还存在吗

2034
01:19:39,000 --> 01:19:40,000
对李阿林他自己在维护

2035
01:19:40,000 --> 01:19:42,000
这个名字有点耳熟

2036
01:19:43,000 --> 01:19:45,000
对他的真名叫马启元

2037
01:19:45,000 --> 01:19:47,000
然后在支付上也是很活跃的

2038
01:19:48,000 --> 01:19:51,000
太厉害了一个人维护这么一整套东西

2039
01:19:51,000 --> 01:19:53,000
那个 Lua Teche 补出一点

2040
01:19:53,000 --> 01:19:55,000
他其实是为了解决

2041
01:19:55,000 --> 01:19:57,000
原始的那个 Teche 不好编程扩展的问题

2042
01:19:58,000 --> 01:20:01,000
所以他其实把 Lua 的比较一个

2043
01:20:01,000 --> 01:20:04,000
Lua 本来是一个非常简单的语言

2044
01:20:04,000 --> 01:20:07,000
他在很多游戏里面是作为这种控制语言存在的

2045
01:20:07,000 --> 01:20:10,000
因为他很好的可以很方便的嵌入到 C 里面去

2046
01:20:10,000 --> 01:20:11,000
对吧

2047
01:20:11,000 --> 01:20:11,000
魔兽世界

2048
01:20:11,000 --> 01:20:13,000
然后 Lua Teche 就是说他整个把

2049
01:20:14,000 --> 01:20:17,000
Lua 的解释器嵌到 Teche 里面去

2050
01:20:17,000 --> 01:20:18,000
然后你很多事情

2051
01:20:18,000 --> 01:20:19,000
Teche 里面不方便做的

2052
01:20:20,000 --> 01:20:22,000
其实对绝大数来讲基本上

2053
01:20:22,000 --> 01:20:24,000
但凡任何事情你需要编程控制的

2054
01:20:24,000 --> 01:20:25,000
你都转到 Lua 去

2055
01:20:25,000 --> 01:20:26,000
会比较

2056
01:20:26,000 --> 01:20:28,000
你用起来会比较舒服一些

2057
01:20:29,000 --> 01:20:30,000
然后 Lua Teche 做了这么一个事

2058
01:20:31,000 --> 01:20:32,000
当时我记得还有好几个

2059
01:20:32,000 --> 01:20:36,000
就当时还存在到 Unicode 过渡的那个阶段

2060
01:20:36,000 --> 01:20:38,000
还有那个叫什么 Xe Teche

2061
01:20:38,000 --> 01:20:39,000
我不知道这个怎么念

2062
01:20:39,000 --> 01:20:43,000
就是他的 Xe Teche

2063
01:20:45,000 --> 01:20:46,000
然后还有各种各种变种

2064
01:20:46,000 --> 01:20:48,000
什么 PDF Z Teche

2065
01:20:49,000 --> 01:20:50,000
这实在是太多了

2066
01:20:50,000 --> 01:20:51,000
我当时看着头都大了

2067
01:20:52,000 --> 01:20:56,000
但好像现在反而就是该发展的发展

2068
01:20:56,000 --> 01:20:58,000
然后也就他也经过了现在化的过程

2069
01:20:58,000 --> 01:21:01,000
现在流存下来还在活跃开发

2070
01:21:01,000 --> 01:21:02,000
然后功能比较全的

2071
01:21:02,000 --> 01:21:03,000
好像也就那么两三个了

2072
01:21:03,000 --> 01:21:04,000
对

2073
01:21:04,000 --> 01:21:08,000
Xe Teche 应该是可能现在最怎么说高级

2074
01:21:08,000 --> 01:21:11,000
或者说最 feature complete 的一个发行板

2075
01:21:11,000 --> 01:21:12,000
一个引擎

2076
01:21:12,000 --> 01:21:15,000
这他首先他一开始刚出发的时候

2077
01:21:15,000 --> 01:21:17,000
就是以全面的 Unicode 支持为出发点

2078
01:21:18,000 --> 01:21:20,000
然后他还支持 OpenType 之类的

2079
01:21:20,000 --> 01:21:21,000
你用 Xe Teche 的话

2080
01:21:21,000 --> 01:21:24,000
你就可以使用你机器上装的文本

2081
01:21:24,000 --> 01:21:24,000
装的字体

2082
01:21:24,000 --> 01:21:25,000
对

2083
01:21:25,000 --> 01:21:26,000
这是很大的一个坑

2084
01:21:26,000 --> 01:21:27,000
这是很大的一个坑

2085
01:21:27,000 --> 01:21:32,000
就是你可能说我想要用 Xe Teche 来排我的东西

2086
01:21:32,000 --> 01:21:35,000
但是如果你使用比如说 Xe Teche Live 的话

2087
01:21:35,000 --> 01:21:38,000
你会发现自己没有办法使用系统上有的字体

2088
01:21:38,000 --> 01:21:40,000
这是很蛋疼的一件事情

2089
01:21:40,000 --> 01:21:41,000
但是你要是用 Xe Teche 的话

2090
01:21:41,000 --> 01:21:43,000
就可以绕开这个坑

2091
01:21:43,000 --> 01:21:45,000
Xe Teche 本最开始的时候

2092
01:21:45,000 --> 01:21:48,000
他就是在 Mac OS 上面去开发的

2093
01:21:48,000 --> 01:21:52,000
所以他当时搞了这种所谓的先进的字体排音技术

2094
01:21:52,000 --> 01:21:53,000
各种联字

2095
01:21:53,000 --> 01:21:57,000
Ligature 各种这种高级的 OpenType 那些特性

2096
01:21:57,000 --> 01:22:00,000
在其他的当时在其他的太阳发行板里面都是不能支持的

2097
01:22:00,000 --> 01:22:04,000
因为它完全不是一个体系

2098
01:22:04,000 --> 01:22:05,000
也不是一个技术路线

2099
01:22:05,000 --> 01:22:06,000
它然后

2100
01:22:06,000 --> 01:22:07,000
是一个年代的东西

2101
01:22:07,000 --> 01:22:08,000
完全不是一个年代的东西

2102
01:22:08,000 --> 01:22:12,000
但是当时 Xe Teche 他把这两个结合在了一起

2103
01:22:12,000 --> 01:22:15,000
然后当时给到我们看到的一些实现的效果

2104
01:22:15,000 --> 01:22:17,000
那是非常惊艳的

2105
01:22:17,000 --> 01:22:18,000
by the way

2106
01:22:18,000 --> 01:22:22,000
版本号无限接近于 0.99999

2107
01:22:22,000 --> 01:22:23,000
就是这个 Xe Teche

2108
01:22:24,000 --> 01:22:27,000
就像刚才我们讨论的 Lagteche 还有 Xe Teche

2109
01:22:27,000 --> 01:22:29,000
包括像 PDF Teche

2110
01:22:29,000 --> 01:22:32,000
他们跟我们最开始讲的

2111
01:22:32,000 --> 01:22:34,000
Teche Live 这类的发行板

2112
01:22:34,000 --> 01:22:36,000
是什么样的一个关系呢

2113
01:22:36,000 --> 01:22:39,000
还是说后面我们说的这些像 Lagteche 这样的东西

2114
01:22:39,000 --> 01:22:42,000
他们只是负责排版的功能

2115
01:22:42,000 --> 01:22:43,000
他们只是一个排版引擎是这样的

2116
01:22:43,000 --> 01:22:45,000
这个解释起来又复杂

2117
01:22:46,000 --> 01:22:48,000
Xe Teche 应该是比较像引擎的一个东西

2118
01:22:48,000 --> 01:22:50,000
但是 Xe Teche 面临一个问题

2119
01:22:50,000 --> 01:22:54,000
就是如果你要从头开始支持 Unicode 和 OpenType 的话

2120
01:22:54,000 --> 01:22:56,000
你会需要更多的工具

2121
01:22:56,000 --> 01:23:01,000
所以 Xe Teche 除了实现 Teche 这个程序之外

2122
01:23:01,000 --> 01:23:02,000
它还有一些别的什么

2123
01:23:02,000 --> 01:23:07,000
就是类似于比如说要去处理 Unicode

2124
01:23:07,000 --> 01:23:11,000
或者说又处理 OpenType 的字体格式的一些工具

2125
01:23:12,000 --> 01:23:14,000
就等于它有核心的那些程序之外

2126
01:23:14,000 --> 01:23:15,000
还有一些扩展

2127
01:23:16,000 --> 01:23:18,000
而 PDF Teche 的话

2128
01:23:18,000 --> 01:23:22,000
完全只是重新实现了 Teche 和 Lagteche 这两个程序

2129
01:23:22,000 --> 01:23:23,000
他们基本上都是引擎

2130
01:23:23,000 --> 01:23:27,000
但是他们的覆盖范围是不一样的

2131
01:23:27,000 --> 01:23:29,000
比如说有些一个可能只是一个内燃机

2132
01:23:29,000 --> 01:23:30,000
另外一个除了内燃机之外

2133
01:23:30,000 --> 01:23:33,000
还有一个 PowerTrain 在那边

2134
01:23:33,000 --> 01:23:35,000
他们跟 Teche Live 这样子的

2135
01:23:35,000 --> 01:23:37,000
然后 Teche Live 就是

2136
01:23:37,000 --> 01:23:39,000
比如说 Teche Live 应该用的是 PDF Latteche

2137
01:23:39,000 --> 01:23:40,000
或者是它两个都有

2138
01:23:40,000 --> 01:23:42,000
它既有 Teche 也有 PDF Teche

2139
01:23:43,000 --> 01:23:46,000
然后它把所有这些东西外面加上一套编辑器

2140
01:23:46,000 --> 01:23:48,000
加上工作流

2141
01:23:48,000 --> 01:23:50,000
然后加上一些校对工具之类的

2142
01:23:50,000 --> 01:23:51,000
然后打包给你

2143
01:23:54,000 --> 01:23:55,000
说到 Teche Live

2144
01:23:55,000 --> 01:23:57,000
我们是不是要讲一下

2145
01:23:57,000 --> 01:23:59,000
它所谓的官方开发组

2146
01:24:00,000 --> 01:24:03,000
叫做 TOG 的这个 Teche User Group

2147
01:24:03,000 --> 01:24:04,000
应该怎么翻译

2148
01:24:04,000 --> 01:24:05,000
粉丝群

2149
01:24:05,000 --> 01:24:08,000
Teche 不是 Teche Live 的官方开发组

2150
01:24:08,000 --> 01:24:14,000
TAG 是所有的 Teche 的用户的一个群组

2151
01:24:14,000 --> 01:24:14,000
对啊

2152
01:24:14,000 --> 01:24:15,000
TAG

2153
01:24:15,000 --> 01:24:19,000
而且高德纳一开始就经常会在里面发一些东西

2154
01:24:20,000 --> 01:24:21,000
在很早以前

2155
01:24:21,000 --> 01:24:24,000
然后会做一些更新什么的

2156
01:24:24,000 --> 01:24:26,000
一直都在那个 TAG

2157
01:24:26,000 --> 01:24:30,000
Anyway 我们跟大家介绍一下这个社区

2158
01:24:31,000 --> 01:24:33,000
我之前看过他们写的一些论文

2159
01:24:33,000 --> 01:24:34,000
跟自己盘音有关的

2160
01:24:34,000 --> 01:24:35,000
我倒是看过一两遍

2161
01:24:35,000 --> 01:24:37,000
还有一些采访稿

2162
01:24:37,000 --> 01:24:40,000
因为本来 Teche 它就是一个排版引擎

2163
01:24:40,000 --> 01:24:42,000
虽然他们必须要研究排版

2164
01:24:42,000 --> 01:24:45,000
所以很多他们研究到排版的论文

2165
01:24:45,000 --> 01:24:47,000
就发在这个 TAG 上面

2166
01:24:47,000 --> 01:24:50,000
TAG 之于 Teche 的关系

2167
01:24:50,000 --> 01:24:54,000
你可以认为有点类似于 Gnue 之于

2168
01:24:54,000 --> 01:24:57,000
这个 Uniqus 或者是 Inaqus 的一个关系

2169
01:24:57,000 --> 01:24:59,000
这不就是 Python 跟 Pug 之间的关系吗

2170
01:24:59,000 --> 01:25:01,000
Python 跟 Pog 之间就是这样的

2171
01:25:01,000 --> 01:25:02,000
对

2172
01:25:02,000 --> 01:25:05,000
它有一个这种是一个比较 fun 的那种用户的组织

2173
01:25:05,000 --> 01:25:10,000
然后很多这种项目都挂在组织的名下

2174
01:25:10,000 --> 01:25:11,000
或者是被组织 sponsor 的

2175
01:25:11,000 --> 01:25:13,000
比如说我们看到刚才提到的好几个

2176
01:25:13,000 --> 01:25:16,000
Teche Live Mac Tech

2177
01:25:16,000 --> 01:25:19,000
它都是在组织的旗下

2178
01:25:19,000 --> 01:25:21,000
然后由组织的成员

2179
01:25:22,000 --> 01:25:23,000
然后在开发维护

2180
01:25:24,000 --> 01:25:24,000
就大概是这么一些

2181
01:25:24,000 --> 01:25:26,000
然后还有一些是非组织的

2182
01:25:26,000 --> 01:25:30,000
就是说在 TAG 这个 TAG group 以外的

2183
01:25:30,000 --> 01:25:32,000
有各种专业分支的领域的

2184
01:25:32,000 --> 01:25:32,000
那也有对吧

2185
01:25:32,000 --> 01:25:36,000
它就不严格是大一统的这么一个群体

2186
01:25:36,000 --> 01:25:38,000
因为它原来的名字就是叫 Teche User Group

2187
01:25:39,000 --> 01:25:39,000
对吧

2188
01:25:39,000 --> 01:25:40,000
Teche 的用户组

2189
01:25:40,000 --> 01:25:42,000
所以就简称 TOG

2190
01:25:42,000 --> 01:25:43,000
对

2191
01:25:43,000 --> 01:25:45,000
你只要用都可以在里面去申请加入

2192
01:25:45,000 --> 01:25:48,000
然后他们有一个叫 Tag Boat

2193
01:25:48,000 --> 01:25:49,000
就拖船

2194
01:25:49,000 --> 01:25:51,000
因为 TAG 本身是拖船的意思

2195
01:25:52,000 --> 01:25:56,000
所以他们后来发很多那些发的文章

2196
01:25:57,000 --> 01:25:59,000
就都发在 TAG Boat 里面

2197
01:26:00,000 --> 01:26:01,000
那里面其实如果

2198
01:26:01,000 --> 01:26:03,000
刚才说的有很多采访

2199
01:26:04,000 --> 01:26:06,000
去采访高德纳先生

2200
01:26:06,000 --> 01:26:08,000
还有各种字体设计师

2201
01:26:08,000 --> 01:26:11,000
还有排印的一些研究的论文

2202
01:26:11,000 --> 01:26:13,000
就都会发在 TAG Boat 里面

2203
01:26:13,000 --> 01:26:14,000
对

2204
01:26:14,000 --> 01:26:16,000
说到这里我提另外一个东西

2205
01:26:16,000 --> 01:26:17,000
其实非常有意思的

2206
01:26:17,000 --> 01:26:18,000
就是刚才我们讲的

2207
01:26:18,000 --> 01:26:19,000
Teche

2208
01:26:19,000 --> 01:26:20,000
那里拉 Teche 一行

2209
01:26:20,000 --> 01:26:22,000
它其实还是偏向于这种文档文稿

2210
01:26:22,000 --> 01:26:24,000
这种长篇的论文为主

2211
01:26:24,000 --> 01:26:27,000
还有一个大的分支的一个流派

2212
01:26:28,000 --> 01:26:30,000
是基于 Teche 来做一些更加 Fancy

2213
01:26:30,000 --> 01:26:33,000
就是你想都想不到的一些那种图形

2214
01:26:33,000 --> 01:26:34,000
你不会觉得它是用

2215
01:26:35,000 --> 01:26:36,000
Teche 编出来的

2216
01:26:36,000 --> 01:26:38,000
那个排印出来的东西

2217
01:26:38,000 --> 01:26:38,000
但确实是

2218
01:26:38,000 --> 01:26:41,000
然后这套体系叫做 Context

2219
01:26:41,000 --> 01:26:42,000
有个 T 了

2220
01:26:42,000 --> 01:26:44,000
就变成叫 Context

2221
01:26:45,000 --> 01:26:46,000
就是 Context 的那个词

2222
01:26:46,000 --> 01:26:48,000
但是它的中间那个 Tex

2223
01:26:48,000 --> 01:26:50,000
是那个 Teche 的那个拼法

2224
01:26:50,000 --> 01:26:51,000
就是大写的 T

2225
01:26:51,000 --> 01:26:51,000
大写的 X

2226
01:26:51,000 --> 01:26:52,000
小写的 E

2227
01:26:53,000 --> 01:26:53,000
这个是干嘛呢

2228
01:26:53,000 --> 01:26:56,000
当时我有一段时间非常痴迷这个东西

2229
01:26:56,000 --> 01:26:56,000
就是

2230
01:26:57,000 --> 01:26:58,000
就你们写 PPT

2231
01:26:58,000 --> 01:27:00,000
要不就是用 Power Point

2232
01:27:00,000 --> 01:27:01,000
要不就是用那个

2233
01:27:02,000 --> 01:27:03,000
对 Power Point 就是 PPT 嘛

2234
01:27:06,000 --> 01:27:08,000
你写这个换登片

2235
01:27:08,000 --> 01:27:09,000
就是数码换登片的时候

2236
01:27:09,000 --> 01:27:10,000
你要不就是用 Power Point

2237
01:27:10,000 --> 01:27:11,000
是 PPT

2238
01:27:11,000 --> 01:27:12,000
要不就是那个 Keynote

2239
01:27:12,000 --> 01:27:14,000
知道这就结尾是那个点 Key 的那个文件

2240
01:27:15,000 --> 01:27:18,000
但是你也可以用 Teche 这套逻辑来写

2241
01:27:18,000 --> 01:27:19,000
这个 slides

2242
01:27:19,000 --> 01:27:21,000
而且当时我记得我有很多

2243
01:27:21,000 --> 01:27:23,000
这个上课的那种教授

2244
01:27:23,000 --> 01:27:25,000
他们的这个版书

2245
01:27:25,000 --> 01:27:26,000
他们也有版书的嘛

2246
01:27:27,000 --> 01:27:28,000
就是用这个

2247
01:27:28,000 --> 01:27:30,000
这个 Teche 来排版出来

2248
01:27:30,000 --> 01:27:31,000
投射到上面去的

2249
01:27:31,000 --> 01:27:33,000
但是你如果直接用那个原始的

2250
01:27:33,000 --> 01:27:34,000
那个 Teche 或者拉 Teche

2251
01:27:34,000 --> 01:27:36,000
你说你把这个

2252
01:27:36,000 --> 01:27:37,000
正常它是定义一个

2253
01:27:37,000 --> 01:27:38,000
比如 Letter 或者是 A 4 的一个

2254
01:27:38,000 --> 01:27:40,000
只是一个长条的一个结构

2255
01:27:40,000 --> 01:27:42,000
你投到那个屏幕上 4 比 3

2256
01:27:42,000 --> 01:27:43,000
它是一个宽的结构

2257
01:27:43,000 --> 01:27:44,000
不太合适嘛

2258
01:27:44,000 --> 01:27:45,000
然后说你可以说

2259
01:27:45,000 --> 01:27:47,000
那我重新把那个纸横一下

2260
01:27:47,000 --> 01:27:48,000
好像也可以侧着用

2261
01:27:48,000 --> 01:27:48,000
对

2262
01:27:48,000 --> 01:27:50,000
但是还是排出来那个东西是比较无趣嘛

2263
01:27:50,000 --> 01:27:51,000
对吧

2264
01:27:51,000 --> 01:27:52,000
我们知道很多这种版书

2265
01:27:52,000 --> 01:27:53,000
或者是这种 slides

2266
01:27:53,000 --> 01:27:55,000
它需要有一些有趣的东西

2267
01:27:55,000 --> 01:27:56,000
有些要图形啊

2268
01:27:56,000 --> 01:27:58,000
各种箭头去指点啊

2269
01:27:58,000 --> 01:27:59,000
各种甚至是

2270
01:28:00,000 --> 01:28:01,000
渐变过场动画什么的

2271
01:28:01,000 --> 01:28:03,000
这些在传统的

2272
01:28:03,000 --> 01:28:04,000
那个拉 Teche 里面

2273
01:28:04,000 --> 01:28:05,000
都是非常难以实现的

2274
01:28:06,000 --> 01:28:08,000
然后就有人搞了这个 Context

2275
01:28:08,000 --> 01:28:10,000
Context 这套系统

2276
01:28:10,000 --> 01:28:13,000
它可以实际上非常完美的这种

2277
01:28:13,000 --> 01:28:14,000
就是各种图形啊

2278
01:28:14,000 --> 01:28:16,000
精确的这种图案的生成

2279
01:28:16,000 --> 01:28:17,000
然后你可以做一些动画呀

2280
01:28:17,000 --> 01:28:18,000
特效啊

2281
01:28:19,000 --> 01:28:20,000
你看到那个结果

2282
01:28:20,000 --> 01:28:22,000
你不会认为那个东西是用

2283
01:28:22,000 --> 01:28:23,000
它也可以做出来

2284
01:28:23,000 --> 01:28:24,000
但它确实是

2285
01:28:24,000 --> 01:28:25,000
这大家可以去试一下

2286
01:28:25,000 --> 01:28:28,000
然后就有个叫做 contextgarden.net

2287
01:28:28,000 --> 01:28:30,000
这个网站上是他们的一个

2288
01:28:30,000 --> 01:28:31,000
相当于是一个官网的东西嘛

2289
01:28:31,000 --> 01:28:33,000
你可以看一下他的那些试炼文件

2290
01:28:33,000 --> 01:28:35,000
那个是非常 fancy 的一个东西

2291
01:28:35,000 --> 01:28:36,000
OK

2292
01:28:36,000 --> 01:28:37,000
我明白了

2293
01:28:37,000 --> 01:28:39,000
这个 context 之于你

2294
01:28:39,000 --> 01:28:41,000
就像 review.js 之于我

2295
01:28:41,000 --> 01:28:42,000
可以这么理解

2296
01:28:42,000 --> 01:28:44,000
就本质上你是

2297
01:28:44,000 --> 01:28:45,000
你是在编程化的方式

2298
01:28:45,000 --> 01:28:47,000
去生成你的那个幻能片

2299
01:28:47,000 --> 01:28:50,000
而不是用这个鼠标在底下点点点的方式

2300
01:28:50,000 --> 01:28:51,000
生成这个幻能片

2301
01:28:51,000 --> 01:28:52,000
你可以精确的描述

2302
01:28:52,000 --> 01:28:54,000
每一个动效的

2303
01:28:54,000 --> 01:28:55,000
每一个这个数学描述

2304
01:28:55,000 --> 01:28:56,000
你都可以实现出来

2305
01:28:56,000 --> 01:28:59,000
这个当时做出来的非常令人惊艳

2306
01:28:59,000 --> 01:29:00,000
如果你不想使用 tech 的话

2307
01:29:00,000 --> 01:29:03,000
你可以试试我刚才说的这个 review.js

2308
01:29:03,000 --> 01:29:05,000
就是你如果你觉得 PPT 太古 hardcore

2309
01:29:05,000 --> 01:29:07,000
然后你想要使用编程方式

2310
01:29:07,000 --> 01:29:09,000
来解决你的幻灯片问题

2311
01:29:09,000 --> 01:29:11,000
你可以试试我刚才说的 review.js

2312
01:29:12,000 --> 01:29:14,000
它是基本上就是你写 java script

2313
01:29:14,000 --> 01:29:16,000
然后来生成你的幻灯片这样

2314
01:29:19,000 --> 01:29:19,000
哎

2315
01:29:19,000 --> 01:29:20,000
我想起来了

2316
01:29:20,000 --> 01:29:22,000
刚才我们说到了 mac 上面

2317
01:29:22,000 --> 01:29:23,000
linux 上面和 windows 上面

2318
01:29:24,000 --> 01:29:27,000
但实际上还有一个现在就是我们现在处在一个网络时代

2319
01:29:27,000 --> 01:29:28,000
还有一个更简单的解决方法

2320
01:29:28,000 --> 01:29:30,000
就是如果你想要使用 tech 的话

2321
01:29:31,000 --> 01:29:34,000
现在有很多所谓的在线 tech 编辑器

2322
01:29:34,000 --> 01:29:35,000
sas

2323
01:29:35,000 --> 01:29:36,000
然后有些是

2324
01:29:37,000 --> 01:29:38,000
对

2325
01:29:38,000 --> 01:29:39,000
software as a service

2326
01:29:39,000 --> 01:29:40,000
在云上的

2327
01:29:40,000 --> 01:29:40,000
对

2328
01:29:40,000 --> 01:29:42,000
就好像现在我基本上写 python 程序

2329
01:29:42,000 --> 01:29:44,000
或者写什么小程序的时候

2330
01:29:44,000 --> 01:29:45,000
需要写一个脚本的话

2331
01:29:45,000 --> 01:29:46,000
我已经不会在本地去写它了

2332
01:29:46,000 --> 01:29:48,000
我去去比如说

2333
01:29:49,000 --> 01:29:52,000
repail.it 或者是什么

2334
01:29:53,000 --> 01:29:54,000
主此类的 online

2335
01:29:54,000 --> 01:29:55,000
直接云编程对吧

2336
01:29:55,000 --> 01:29:56,000
对

2337
01:29:56,000 --> 01:29:58,000
latech 也有这样的云编程环境

2338
01:29:58,000 --> 01:30:01,000
其中比较知名的一个叫 overleaf

2339
01:30:02,000 --> 01:30:03,000
对

2340
01:30:03,000 --> 01:30:05,000
它是可能现在用户群也蛮多的一个

2341
01:30:05,000 --> 01:30:07,000
虽然我从来没有用过

2342
01:30:07,000 --> 01:30:09,000
但是有我曾经看到人用过

2343
01:30:09,000 --> 01:30:11,000
然后好像反响还蛮好

2344
01:30:11,000 --> 01:30:13,000
网址就是 overleaf.com

2345
01:30:13,000 --> 01:30:14,000
然后你在上面注册一下

2346
01:30:14,000 --> 01:30:17,000
你就会得到一个编辑 tech 的环境

2347
01:30:17,000 --> 01:30:18,000
然后它会

2348
01:30:18,000 --> 01:30:21,000
给你实时的就像 repo 一样

2349
01:30:21,000 --> 01:30:22,000
给你实时的生成 APF

2350
01:30:22,000 --> 01:30:23,000
对还蛮好用的

2351
01:30:23,000 --> 01:30:25,000
而且好像价格也不是很贵

2352
01:30:25,000 --> 01:30:27,000
尤其是对学生来说

2353
01:30:27,000 --> 01:30:28,000
一个月 9 块钱

2354
01:30:28,000 --> 01:30:30,000
就比如说你要写 6 个月的论文的话

2355
01:30:30,000 --> 01:30:31,000
你一个月 9 块钱

2356
01:30:31,000 --> 01:30:34,000
我觉得实在是相当便宜了

2357
01:30:35,000 --> 01:30:36,000
太方便了

2358
01:30:36,000 --> 01:30:39,000
让你一举忘掉如何安装

2359
01:30:39,000 --> 01:30:41,000
和整环境的痛苦

2360
01:30:41,000 --> 01:30:43,000
而且随时随地都可以

2361
01:30:43,000 --> 01:30:45,000
你不用担心本地数据丢失之类的问题

2362
01:30:45,000 --> 01:30:46,000
它是保存在云编的

2363
01:30:46,000 --> 01:30:49,000
就还是相当推荐

2364
01:30:49,000 --> 01:30:49,000
对

2365
01:30:49,000 --> 01:30:50,000
这叫什么来的

2366
01:30:50,000 --> 01:30:52,000
Cloud Native Tech

2367
01:30:52,000 --> 01:30:55,000
1976 与 2021 的完美结合

2368
01:30:57,000 --> 01:30:58,000
这个我印象非常深

2369
01:30:58,000 --> 01:31:02,000
当时我在我用的应该是 2000 几年的时候

2370
01:31:02,000 --> 01:31:03,000
前后

2371
01:31:03,000 --> 01:31:05,000
2000 几年到 2010 年

2372
01:31:05,000 --> 01:31:06,000
这段是这个 10 年

2373
01:31:06,000 --> 01:31:08,000
这个 Decade 之间

2374
01:31:08,000 --> 01:31:09,000
就那个时候还没有

2375
01:31:09,000 --> 01:31:10,000
就是有这种

2376
01:31:10,000 --> 01:31:11,000
就是有云的这种

2377
01:31:11,000 --> 01:31:13,000
这种太和出现

2378
01:31:13,000 --> 01:31:14,000
但是因为那个时候的

2379
01:31:15,000 --> 01:31:16,000
Cloud 的这个 info

2380
01:31:16,000 --> 01:31:18,000
就是设施还没有非常的完善

2381
01:31:18,000 --> 01:31:19,000
其实非常不好用

2382
01:31:20,000 --> 01:31:20,000
但如果说

2383
01:31:20,000 --> 01:31:22,000
假设我现在让我丢到一个学校里面

2384
01:31:22,000 --> 01:31:23,000
让我再写一篇

2385
01:31:23,000 --> 01:31:25,000
我估计我也不会在自己电脑上安装

2386
01:31:25,000 --> 01:31:25,000
这个破玩意

2387
01:31:25,000 --> 01:31:27,000
一次性的破玩意

2388
01:31:27,000 --> 01:31:29,000
还是用这种云环境比较简单一些

2389
01:31:31,000 --> 01:31:32,000
对

2390
01:31:32,000 --> 01:31:32,000
是的

2391
01:31:32,000 --> 01:31:35,000
所以一个标准的太和的编写的

2392
01:31:35,000 --> 01:31:38,000
当然你编的流程是这样

2393
01:31:38,000 --> 01:31:39,000
但是我就说

2394
01:31:39,000 --> 01:31:40,000
可以描述一下

2395
01:31:40,000 --> 01:31:42,000
当时你看到你电脑屏幕上应该是什么

2396
01:31:42,000 --> 01:31:44,000
比如我通常是一半屏幕

2397
01:31:44,000 --> 01:31:46,000
就屏幕对开左右两边

2398
01:31:46,000 --> 01:31:46,000
对吧

2399
01:31:46,000 --> 01:31:48,000
然后一边是这个元代码

2400
01:31:48,000 --> 01:31:49,000
就是那个太和

2401
01:31:49,000 --> 01:31:51,000
Lathek 的这个原始的那个点

2402
01:31:51,000 --> 01:31:53,000
太和那个 source code

2403
01:31:53,000 --> 01:31:56,000
然后另外一边是生成的 PDF 的窗口

2404
01:31:56,000 --> 01:31:56,000
对吧

2405
01:31:56,000 --> 01:32:01,000
然后把编辑器的工作流程设为

2406
01:32:01,000 --> 01:32:04,000
你这边只要一保存太和的源代码

2407
01:32:04,000 --> 01:32:07,000
那边就自动在后台编译生成 PDF

2408
01:32:07,000 --> 01:32:09,000
然后在右边及时的展示出来

2409
01:32:09,000 --> 01:32:11,000
这样就可以勉强实现

2410
01:32:11,000 --> 01:32:12,000
所见

2411
01:32:12,000 --> 01:32:14,000
等大概一秒钟

2412
01:32:14,000 --> 01:32:14,000
两秒钟

2413
01:32:14,000 --> 01:32:16,000
三秒钟之后做集所得

2414
01:32:17,000 --> 01:32:19,000
然后当时有一个非常有趣的

2415
01:32:19,000 --> 01:32:21,000
或者很 tricky 的一个实现的难点

2416
01:32:21,000 --> 01:32:21,000
就是说

2417
01:32:21,000 --> 01:32:22,000
如果你这篇文章

2418
01:32:22,000 --> 01:32:24,000
或者你编写的这个文章有十几页长

2419
01:32:24,000 --> 01:32:25,000
对吧

2420
01:32:25,000 --> 01:32:27,000
然后你想要肯定是说

2421
01:32:27,000 --> 01:32:29,000
你当前编写的那边保存的时候

2422
01:32:29,000 --> 01:32:33,000
刚好是它刷新出来在右边的那个 PDF 的

2423
01:32:33,000 --> 01:32:36,000
那个也是对应到你大致位置这一行

2424
01:32:36,000 --> 01:32:38,000
但不能严格一对应

2425
01:32:38,000 --> 01:32:39,000
就这个当时也很多

2426
01:32:39,000 --> 01:32:41,000
tricky 的办法在做这件事情

2427
01:32:41,000 --> 01:32:43,000
这一步根本没有找到怎么解决

2428
01:32:43,000 --> 01:32:45,000
你刚才说你的典型编辑界面

2429
01:32:45,000 --> 01:32:46,000
但我的典型编辑界面

2430
01:32:46,000 --> 01:32:48,000
就是就只有原代码

2431
01:32:48,000 --> 01:32:50,000
就是我会 concentrate

2432
01:32:50,000 --> 01:32:51,000
我先把内容写完

2433
01:32:51,000 --> 01:32:54,000
然后再一个一个去解决

2434
01:32:54,000 --> 01:32:56,000
带给我的种种头疼的问题

2435
01:32:57,000 --> 01:32:59,000
等于先写再排版这样

2436
01:32:59,000 --> 01:33:02,000
所以你是在编写原代码的时候

2437
01:33:02,000 --> 01:33:04,000
脑子里面再浮现出他应该想要的效果

2438
01:33:04,000 --> 01:33:06,000
然后之后再去 debug

2439
01:33:06,000 --> 01:33:10,000
一个一个人肉 Render 的这么一个过程

2440
01:33:10,000 --> 01:33:11,000
所以你写 markdown 也是这样子吧

2441
01:33:11,000 --> 01:33:13,000
先一遍 markdown source 写完

2442
01:33:13,000 --> 01:33:15,000
然后再 Render 上去听到开销

2443
01:33:15,000 --> 01:33:16,000
再 preview 一下

2444
01:33:16,000 --> 01:33:18,000
而不是说这种 side by side 的方式

2445
01:33:18,000 --> 01:33:19,000
对差不多是这样的

2446
01:33:20,000 --> 01:33:22,000
这看你取决于你写什么东西了

2447
01:33:22,000 --> 01:33:25,000
如果你还是一个长的普通的文档的话

2448
01:33:25,000 --> 01:33:26,000
那可能还好

2449
01:33:26,000 --> 01:33:28,000
因为比如说写论文的话

2450
01:33:28,000 --> 01:33:28,000
对吧

2451
01:33:28,000 --> 01:33:30,000
你论述的东西如果还是很长的话

2452
01:33:30,000 --> 01:33:32,000
你还是想去集中的先

2453
01:33:32,000 --> 01:33:35,000
把论述的逻辑先写清楚

2454
01:33:35,000 --> 01:33:38,000
但是如果你要在渲染一个公式的时候

2455
01:33:38,000 --> 01:33:40,000
你得先想象一下

2456
01:33:40,000 --> 01:33:40,000
猜一下

2457
01:33:40,000 --> 01:33:41,000
然后渲染出来看一下

2458
01:33:42,000 --> 01:33:43,000
这个好像又跑位了

2459
01:33:43,000 --> 01:33:44,000
不行了

2460
01:33:44,000 --> 01:33:46,000
回来调调就会出现这个事情

2461
01:33:46,000 --> 01:33:48,000
因为我可能用法比较奇怪

2462
01:33:48,000 --> 01:33:50,000
因为我用这个东西最常用的

2463
01:33:50,000 --> 01:33:51,000
倒不是写论文这种常闻的

2464
01:33:51,000 --> 01:33:53,000
而是写作业的时候

2465
01:33:53,000 --> 01:33:55,000
因为我当说我写字不是很丑吗

2466
01:33:55,000 --> 01:33:56,000
有时候丑到

2467
01:33:56,000 --> 01:33:58,000
以至于我自己也都不知道

2468
01:33:58,000 --> 01:33:59,000
我写的草稿上面是什么东西

2469
01:34:00,000 --> 01:34:02,000
所以我写作业的时候

2470
01:34:02,000 --> 01:34:04,000
其实我其实是在电脑上

2471
01:34:04,000 --> 01:34:07,000
用拉太和这个方式去一步一步去进行演算的

2472
01:34:08,000 --> 01:34:09,000
所以我一定要看到最终结果

2473
01:34:09,000 --> 01:34:11,000
再想下一步是什么

2474
01:34:11,000 --> 01:34:13,000
你用那个做双数是吧

2475
01:34:13,000 --> 01:34:13,000
对

2476
01:34:13,000 --> 01:34:14,000
就有点这种感觉

2477
01:34:14,000 --> 01:34:15,000
比如说我要把图画到

2478
01:34:15,000 --> 01:34:16,000
下一步怎么来的

2479
01:34:16,000 --> 01:34:18,000
我再用来画

2480
01:34:18,000 --> 01:34:18,000
对吧

2481
01:34:18,000 --> 01:34:22,000
我不会说我在草稿纸上先把作业写得差不多

2482
01:34:22,000 --> 01:34:24,000
然后再腾一遍腾到拉太和里面

2483
01:34:24,000 --> 01:34:25,000
我不是这么干的

2484
01:34:25,000 --> 01:34:26,000
对

2485
01:34:26,000 --> 01:34:28,000
这还是看你写的内容怎么样

2486
01:34:28,000 --> 01:34:30,000
每个人写作的环境和写的内容不一样

2487
01:34:30,000 --> 01:34:31,000
用法就不一样了

2488
01:34:32,000 --> 01:34:34,000
尤其是如果你有很多公式的话

2489
01:34:34,000 --> 01:34:35,000
他要求你在写公式的时候

2490
01:34:35,000 --> 01:34:39,000
你能够确定知道自己的拉太和的公式写的是对的

2491
01:34:39,000 --> 01:34:41,000
这实际上对于很多人来说还是蛮单的

2492
01:34:42,000 --> 01:34:43,000
很难的一件事情

2493
01:34:43,000 --> 01:34:44,000
就是你想象应该是对的

2494
01:34:44,000 --> 01:34:46,000
结果虽然它并不是这个样子

2495
01:34:47,000 --> 01:34:48,000
经常会出现这种情况

2496
01:34:49,000 --> 01:34:49,000
对

2497
01:34:49,000 --> 01:34:50,000
对

2498
01:34:50,000 --> 01:34:51,000
我忘了说

2499
01:34:51,000 --> 01:34:53,000
还有一个我其实应该说是一个三频的

2500
01:34:53,000 --> 01:34:57,000
就是还有一个是拉太和的对应的手册

2501
01:34:57,000 --> 01:35:00,000
因为你记不住那些符号或者是那些公式

2502
01:35:00,000 --> 01:35:02,000
到底是哪个你得不断的去翻

2503
01:35:02,000 --> 01:35:05,000
然后包括 TIKZ 的绘图的工具

2504
01:35:05,000 --> 01:35:06,000
它有一个非常完整的

2505
01:35:07,000 --> 01:35:10,000
也是一本书本质上的一个 PDF 的册子

2506
01:35:10,000 --> 01:35:12,000
你要去找它里面到底是怎么去画箭头

2507
01:35:12,000 --> 01:35:13,000
怎么画到哪里去

2508
01:35:13,000 --> 01:35:16,000
就是你是要随时去找 reference 的

2509
01:35:18,000 --> 01:35:19,000
所以就很烦的

2510
01:35:20,000 --> 01:35:24,000
其实太和除了我们讲常用于这种数学理工之类

2511
01:35:24,000 --> 01:35:26,000
它还有一些奇奇怪怪的其他的用法

2512
01:35:26,000 --> 01:35:30,000
比如说有人来做音乐我也有看到

2513
01:35:30,000 --> 01:35:32,000
就是乐谱也可以用太和的方式

2514
01:35:33,000 --> 01:35:35,000
写出非常严谨的美观的乐谱

2515
01:35:35,000 --> 01:35:37,000
还有当时我看到还有很多

2516
01:35:37,000 --> 01:35:38,000
反正就是非常小众的用法

2517
01:35:38,000 --> 01:35:42,000
但因为我不是做方向的人

2518
01:35:42,000 --> 01:35:44,000
我太理解它底层原理是什么

2519
01:35:44,000 --> 01:35:46,000
比如说我一直没有理解

2520
01:35:46,000 --> 01:35:49,000
它用太和写五线符是什么一个原理

2521
01:35:49,000 --> 01:35:50,000
你们知道吗

2522
01:35:51,000 --> 01:35:53,000
或者写音乐的那些东西

2523
01:35:54,000 --> 01:35:56,000
它应该也是有什么记号

2524
01:35:56,000 --> 01:35:58,000
各种专用的红之类的

2525
01:35:58,000 --> 01:35:58,000
但是我从来没用过

2526
01:35:58,000 --> 01:36:01,000
我从来不知道怎么实现

2527
01:36:01,000 --> 01:36:03,000
因为当时我还做过另外一种

2528
01:36:03,000 --> 01:36:04,000
一些比较 crazy 的事情

2529
01:36:05,000 --> 01:36:08,000
我不是觉得太和的红编程

2530
01:36:08,000 --> 01:36:10,000
有一些语法什么的

2531
01:36:10,000 --> 01:36:11,000
不是太灵活吗

2532
01:36:11,000 --> 01:36:14,000
我甚至还在为了写一个

2533
01:36:14,000 --> 01:36:15,000
写一个复杂的图形

2534
01:36:15,000 --> 01:36:18,000
它可能是要手工去写会非常的麻烦

2535
01:36:19,000 --> 01:36:20,000
我甚至是用比如说用 Python

2536
01:36:20,000 --> 01:36:22,000
写了一个小程序

2537
01:36:22,000 --> 01:36:25,000
去生成输出的结果是 Lathex

2538
01:36:25,000 --> 01:36:27,000
然后再 compile 成 PTF

2539
01:36:27,000 --> 01:36:29,000
得到我最终想要的图形

2540
01:36:29,000 --> 01:36:31,000
非常的 meta 这个过程

2541
01:36:32,000 --> 01:36:34,000
但事实上

2542
01:36:34,000 --> 01:36:37,000
web 的一个功能就是这个

2543
01:36:37,000 --> 01:36:40,000
它先去读取那一段程序

2544
01:36:40,000 --> 01:36:42,000
然后生成一段可以被

2545
01:36:42,000 --> 01:36:45,000
Tag 来执行的程序

2546
01:36:45,000 --> 01:36:47,000
它基本上也是一个大马生成器

2547
01:36:47,000 --> 01:36:49,000
做乐谱的那个是叫什么

2548
01:36:49,000 --> 01:36:50,000
Music Tag

2549
01:36:50,000 --> 01:36:51,000
是吧

2550
01:36:51,000 --> 01:36:52,000
Music Tag

2551
01:36:52,000 --> 01:36:54,000
因为是 X 的

2552
01:36:54,000 --> 01:36:55,000
Music Tag

2553
01:36:55,000 --> 01:36:57,000
我只看人

2554
01:36:57,000 --> 01:36:58,000
结果用过

2555
01:36:58,000 --> 01:37:00,000
但我不知道它到底是怎么一个用法

2556
01:37:00,000 --> 01:37:02,000
但不过它还是一个红包

2557
01:37:06,000 --> 01:37:08,000
所以我们今天很关键一点

2558
01:37:08,000 --> 01:37:08,000
就是说

2559
01:37:09,000 --> 01:37:11,000
我们所有在谈排版的时候

2560
01:37:11,000 --> 01:37:14,000
它是和字体配套的事情很关键

2561
01:37:14,000 --> 01:37:16,000
就像高德纳他当时他做 Tag 的时候

2562
01:37:16,000 --> 01:37:18,000
他自己做了一套字体

2563
01:37:18,000 --> 01:37:23,000
然后字体对应的排版如何调用之后

2564
01:37:23,000 --> 01:37:24,000
才能做出精细的排版

2565
01:37:24,000 --> 01:37:25,000
否则的话

2566
01:37:25,000 --> 01:37:28,000
他想实现这个的话没办法调用

2567
01:37:28,000 --> 01:37:30,000
我们现在平面设计师经常

2568
01:37:30,000 --> 01:37:32,000
比如说我用 indesign

2569
01:37:32,000 --> 01:37:36,000
这个平面设计的页面的软件所得

2570
01:37:36,000 --> 01:37:40,000
但是 indesign 它需要调用的是 Open Type

2571
01:37:40,000 --> 01:37:42,000
这个字体里面的高级排版特性

2572
01:37:42,000 --> 01:37:45,000
所以说到底就是排版引擎和字体

2573
01:37:45,000 --> 01:37:47,000
它是相辅相成的

2574
01:37:47,000 --> 01:37:49,000
两边东西得配套好

2575
01:37:49,000 --> 01:37:51,000
要不然的话很多事情

2576
01:37:51,000 --> 01:37:52,000
你是在字体层面做

2577
01:37:52,000 --> 01:37:53,000
还是到排版引擎做

2578
01:37:53,000 --> 01:37:55,000
很多事情想不清楚

2579
01:37:55,000 --> 01:37:56,000
有的时候会

2580
01:37:57,000 --> 01:37:59,000
然后高德纳就说什么事情都我来

2581
01:37:59,000 --> 01:38:02,000
有了这个 computer modern 的字体

2582
01:38:02,000 --> 01:38:03,000
然后有了 Tag

2583
01:38:03,000 --> 01:38:07,000
它就可以赋予作者所有的权利

2584
01:38:07,000 --> 01:38:10,000
Fully control of your work

2585
01:38:10,000 --> 01:38:12,000
所以高德纳他自己很开心

2586
01:38:12,000 --> 01:38:14,000
如果你知道怎么用的话

2587
01:38:14,000 --> 01:38:16,000
打个非常大的引号

2588
01:38:16,000 --> 01:38:18,000
就是你要学会那套东西才行

2589
01:38:19,000 --> 01:38:21,000
大宗师不是那么好当的

2590
01:38:21,000 --> 01:38:22,000
你要拿着悬铁剑

2591
01:38:22,000 --> 01:38:24,000
你得先拿得起来会武才可以

2592
01:38:25,000 --> 01:38:26,000
他是 control free

2593
01:38:26,000 --> 01:38:27,000
这是毫无疑问的

2594
01:38:28,000 --> 01:38:31,000
这其实也是我们在排版工作中

2595
01:38:31,000 --> 01:38:33,000
遇到的一个难题

2596
01:38:33,000 --> 01:38:37,000
我们知道其实无论是早前还是现在

2597
01:38:37,000 --> 01:38:39,000
现在当然更是了字体

2598
01:38:39,000 --> 01:38:42,000
其实已经成为了排版程式的一个构成部分

2599
01:38:42,000 --> 01:38:45,000
如果没有一个在功能上符合

2600
01:38:45,000 --> 01:38:47,000
目标排版需求的字体的话

2601
01:38:47,000 --> 01:38:50,000
我们实际上是无法完成整个排版工作的

2602
01:38:50,000 --> 01:38:52,000
这一点无论是在 Tag 里面

2603
01:38:52,000 --> 01:38:54,000
甚至我们在 web 上面

2604
01:38:54,000 --> 01:38:56,000
就在网页上面也越来越是这样

2605
01:38:56,000 --> 01:38:58,000
我们需要更多的 Open Type Feature

2606
01:38:58,000 --> 01:39:01,000
来实现一些复杂的排版

2607
01:39:01,000 --> 01:39:05,000
甚至只是为了实现一些复杂文字的排版

2608
01:39:05,000 --> 01:39:07,000
这些文字的排版都没有什么特殊的需求

2609
01:39:07,000 --> 01:39:08,000
它都不是写公式

2610
01:39:08,000 --> 01:39:09,000
也不是寄阅谱

2611
01:39:09,000 --> 01:39:13,000
它只是想把他自己国家那种语言的文字记录下来

2612
01:39:13,000 --> 01:39:15,000
我们就需要用到这样一些复杂的特性

2613
01:39:15,000 --> 01:39:22,000
这也是我们现在越来越难以纯粹的将内容和样式分离开来的一个原因

2614
01:39:22,000 --> 01:39:23,000
其实我比较好奇

2615
01:39:23,000 --> 01:39:25,000
因为我之前在用 Lathek 的时候

2616
01:39:25,000 --> 01:39:30,000
有大量的这种情况是没法通过这种中间插入到 word

2617
01:39:30,000 --> 01:39:34,000
或者是这种 word office 的方式里面去实现的

2618
01:39:34,000 --> 01:39:36,000
然后就必须要在里面同时解决

2619
01:39:36,000 --> 01:39:38,000
但是有一个非常 tricky 的需求是这样

2620
01:39:38,000 --> 01:39:40,000
比如说你要插一个图

2621
01:39:40,000 --> 01:39:40,000
对吧

2622
01:39:41,000 --> 01:39:44,000
那个图很多不是有那种所谓的 label 文字的那种标签吗

2623
01:39:45,000 --> 01:39:50,000
你想要那个文字标签的字体形态风格和大小

2624
01:39:50,000 --> 01:39:51,000
有可能文字标签本来就是数学公式

2625
01:39:51,000 --> 01:39:52,000
对吧

2626
01:39:52,000 --> 01:39:59,000
有可能文字标签本来是一个要跟正文的字体和排音方式要一致的

2627
01:39:59,000 --> 01:40:03,000
如果说你用一个第三方的这种图片插进去的话

2628
01:40:03,000 --> 01:40:05,000
就会出现各种各样奇怪的问题

2629
01:40:05,000 --> 01:40:05,000
比如说最简单一个情况

2630
01:40:06,000 --> 01:40:12,000
我看到很多人他不用 Lathek 和 Tikz 去生成图片的这种情况下

2631
01:40:12,000 --> 01:40:16,000
他是说我在外面找一个通用的画图工具把它画了

2632
01:40:16,000 --> 01:40:21,000
做成一个 PNG 或者是这个 SVG 或者是那个叫什么 EPS

2633
01:40:21,000 --> 01:40:23,000
这种矢量图形或者是位图图形

2634
01:40:23,000 --> 01:40:25,000
如果他那个不能用矢量来描述的话

2635
01:40:25,000 --> 01:40:27,000
然后他再导入到这个 word 里面去

2636
01:40:27,000 --> 01:40:28,000
这就导致一个什么问题呢

2637
01:40:29,000 --> 01:40:30,000
因为它本身是两套脱节东西

2638
01:40:30,000 --> 01:40:33,000
那个图片对周围的文字是没有这个意识的

2639
01:40:34,000 --> 01:40:38,000
那么你缩放那个图片就会导致那个图片里面的

2640
01:40:38,000 --> 01:40:43,000
那些 Tikz label 那些文字标签的大小和外面的脱节了

2641
01:40:43,000 --> 01:40:44,000
就完全不一样

2642
01:40:44,000 --> 01:40:45,000
并不联动

2643
01:40:45,000 --> 01:40:49,000
甚至我们看到国内很多那种用 word 写论文的人

2644
01:40:49,000 --> 01:40:51,000
你看那个论文一看就是 word 写的

2645
01:40:51,000 --> 01:40:51,000
为什么呢

2646
01:40:51,000 --> 01:40:55,000
因为它里面插入的图片是比例是不对的

2647
01:40:56,000 --> 01:41:00,000
然后字形和周围的文字是严重脱节

2648
01:41:00,000 --> 01:41:01,000
对吧

2649
01:41:01,000 --> 01:41:02,000
它字号都不一样

2650
01:41:02,000 --> 01:41:04,000
然后字体都完全不是一个东西了

2651
01:41:05,000 --> 01:41:07,000
这些都是在 Tikz 里面解决的比较好

2652
01:41:07,000 --> 01:41:10,000
它是你嵌入一个 Tikz 那种 native 的图形

2653
01:41:10,000 --> 01:41:13,000
它的文字 label 它还是用 Tikz 来排版的

2654
01:41:13,000 --> 01:41:15,000
就它会非常的一致

2655
01:41:15,000 --> 01:41:19,000
不你那个图也必须要用安代合的方法画

2656
01:41:20,000 --> 01:41:20,000
对

2657
01:41:20,000 --> 01:41:23,000
所以它必须是在同一个语境里面去

2658
01:41:23,000 --> 01:41:24,000
就它没有割裂感

2659
01:41:24,000 --> 01:41:25,000
对

2660
01:41:26,000 --> 01:41:29,000
甚至还有像我刚才讲的 context

2661
01:41:29,000 --> 01:41:30,000
非常诡异的需求

2662
01:41:30,000 --> 01:41:31,000
它可以实现什么

2663
01:41:31,000 --> 01:41:35,000
假设你想象一个页面上有一个插图

2664
01:41:35,000 --> 01:41:36,000
插图里面有一个箭头

2665
01:41:36,000 --> 01:41:37,000
箭头里面指到

2666
01:41:37,000 --> 01:41:41,000
你这页上某一段画的某一个字上面有一个符号

2667
01:41:41,000 --> 01:41:42,000
它可以指到那个上面去

2668
01:41:42,000 --> 01:41:45,000
这个在普通的那些里面插图的话是无法实现的

2669
01:41:46,000 --> 01:41:47,000
体系里面

2670
01:41:47,000 --> 01:41:51,000
它是互相之间是能够互相理解对方的结构的

2671
01:41:51,000 --> 01:41:52,000
他们说的是同样的语言

2672
01:41:52,000 --> 01:41:53,000
所以它能指的

2673
01:41:53,000 --> 01:41:55,000
能定位能定的到

2674
01:41:55,000 --> 01:41:56,000
对

2675
01:41:56,000 --> 01:41:57,000
如果你是插图的话

2676
01:41:57,000 --> 01:41:58,000
你就单纯那种普通的

2677
01:41:58,000 --> 01:41:59,000
比如说是这个 png

2678
01:42:00,000 --> 01:42:03,000
你是无法从 png 插图里面去指向

2679
01:42:03,000 --> 01:42:05,000
你的文档里面的某一个字的

2680
01:42:05,000 --> 01:42:06,000
因为它都不知道你要插向哪一个文档

2681
01:42:06,000 --> 01:42:07,000
对不对

2682
01:42:07,000 --> 01:42:10,000
这个还是有一个非常不一样的体验的

2683
01:42:11,000 --> 01:42:11,000
对

2684
01:42:11,000 --> 01:42:13,000
但其实这样子的排版

2685
01:42:13,000 --> 01:42:16,000
它其实之所以它能排的这么准

2686
01:42:16,000 --> 01:42:19,000
它是因为所有的东西都是在一个

2687
01:42:19,000 --> 01:42:22,000
接近封闭的环境中实现出来的

2688
01:42:23,000 --> 01:42:24,000
如果从这点来说

2689
01:42:24,000 --> 01:42:25,000
假如我们很极端

2690
01:42:25,000 --> 01:42:27,000
我们说我们写一篇论文

2691
01:42:27,000 --> 01:42:29,000
我们每个字都用 photoshop 来排

2692
01:42:29,000 --> 01:42:30,000
它最后就是一张位图

2693
01:42:30,000 --> 01:42:32,000
它必然每一个细节都可以排得很准

2694
01:42:33,000 --> 01:42:35,000
之所以我们用 word 来排

2695
01:42:35,000 --> 01:42:37,000
有的时候发现有一些图片的

2696
01:42:37,000 --> 01:42:39,000
里面内嵌的那些字体的样式

2697
01:42:39,000 --> 01:42:41,000
跟整个文档的样式脱离了

2698
01:42:41,000 --> 01:42:43,000
是因为有可能它这个图片

2699
01:42:44,000 --> 01:42:45,000
并不是这个作者自己做

2700
01:42:45,000 --> 01:42:47,000
它只是从这个地方拉了一张图片过来

2701
01:42:47,000 --> 01:42:48,000
这图片里面有一些文本

2702
01:42:48,000 --> 01:42:53,000
其实这个图片的生成环境都不是由它自己来控制的

2703
01:42:53,000 --> 01:42:53,000
自然会产生

2704
01:42:53,000 --> 01:42:55,000
但 Tether 的好处就是说

2705
01:42:55,000 --> 01:42:59,000
比如说你都用 tikz 来做图

2706
01:42:59,000 --> 01:43:02,000
它图的那部分代码是可以单独拷贝出来的

2707
01:43:02,000 --> 01:43:04,000
所以你只要再做一些小小的修改

2708
01:43:05,000 --> 01:43:06,000
就可以让内将图无缝的

2709
01:43:06,000 --> 01:43:08,000
嵌入到你自己那份文档里面去

2710
01:43:09,000 --> 01:43:11,000
你是有那个源代码的

2711
01:43:11,000 --> 01:43:13,000
而不是只有一个最终的结果

2712
01:43:14,000 --> 01:43:18,000
所以当年高老师说的

2713
01:43:18,000 --> 01:43:19,000
我用 Tether 的话

2714
01:43:19,000 --> 01:43:21,000
我是不管你用什么设备

2715
01:43:21,000 --> 01:43:22,000
不用用什么环境

2716
01:43:22,000 --> 01:43:23,000
最后生成东西都是一样的

2717
01:43:24,000 --> 01:43:24,000
对

2718
01:43:24,000 --> 01:43:28,000
这个就是他当初用做 Tether 的最基本的一个目的

2719
01:43:29,000 --> 01:43:30,000
所以我就很好奇

2720
01:43:30,000 --> 01:43:33,000
现在我们用的这种商业用的排版工具

2721
01:43:33,000 --> 01:43:36,000
它是怎么解决这种类似的这种需求或者是问题

2722
01:43:36,000 --> 01:43:39,000
如果你在它自家的一个封闭的环境里实现

2723
01:43:39,000 --> 01:43:43,000
其实 Adobe 提供的工具也足以实现这样的需求

2724
01:43:43,000 --> 01:43:47,000
比如说你在 InDesign 里面排一个很复杂的书籍

2725
01:43:47,000 --> 01:43:49,000
这书籍里面可能有一些图片

2726
01:43:49,000 --> 01:43:51,000
甚至图片上面会有一些小的文字标注

2727
01:43:52,000 --> 01:43:54,000
如果你这个图片是用 Photoshop 做的

2728
01:43:54,000 --> 01:43:56,000
或者是用 Elliswit 做的

2729
01:43:56,000 --> 01:43:59,000
然后你把 Elliswit 做好的图像文件

2730
01:43:59,000 --> 01:44:00,000
以一个外链 link 的方式

2731
01:44:00,000 --> 01:44:02,000
可以 link 到 InDesign 内部

2732
01:44:02,000 --> 01:44:06,000
或者直接插入进去成为 InDesign 文档的一部分

2733
01:44:06,000 --> 01:44:09,000
你也可以几乎保持说

2734
01:44:10,000 --> 01:44:12,000
它不会产生任何意外的情况

2735
01:44:12,000 --> 01:44:13,000
它都是受你控制的

2736
01:44:13,000 --> 01:44:16,000
然后你也可以随时在编辑图像文件里的内容

2737
01:44:16,000 --> 01:44:19,000
保持一个两边实时的同步更新

2738
01:44:19,000 --> 01:44:21,000
而且是 native 的更新

2739
01:44:21,000 --> 01:44:23,000
它可以实现说刚才我说那种情况

2740
01:44:23,000 --> 01:44:27,000
就是某一个图片里面的一个元素

2741
01:44:27,000 --> 01:44:30,000
一个箭头指向这一页图像以外

2742
01:44:30,000 --> 01:44:33,000
但是还是在这一页上的某一个文字的

2743
01:44:34,000 --> 01:44:35,000
某一个角落吗

2744
01:44:35,000 --> 01:44:35,000
随便举个例子

2745
01:44:36,000 --> 01:44:39,000
你的意思是假如说我下面被指向的文字

2746
01:44:39,000 --> 01:44:42,000
它因为比如说修改文本而被重排了

2747
01:44:42,000 --> 01:44:44,000
所以这个箭头还能不能始终指向它是不是

2748
01:44:45,000 --> 01:44:46,000
对 要跟着它走

2749
01:44:46,000 --> 01:44:47,000
不然没有意义

2750
01:44:48,000 --> 01:44:51,000
对 这部分可能在平面设计软件里还比较受限

2751
01:44:51,000 --> 01:44:53,000
因为这样的需求不强

2752
01:44:53,000 --> 01:44:55,000
可能或者说对平面设计师来说

2753
01:44:55,000 --> 01:44:57,000
如果产生了这样子的情况

2754
01:44:57,000 --> 01:45:00,000
它有可能需要人工来解决这种情况

2755
01:45:00,000 --> 01:45:06,000
因为它有可能觉得机器自动给它重新安排的结果并不满意

2756
01:45:07,000 --> 01:45:08,000
对 所以这个需求不那么的强

2757
01:45:09,000 --> 01:45:15,000
相当于 Rail 的要求是他们要有所谓 interoperability

2758
01:45:15,000 --> 01:45:16,000
就是可以互相交互

2759
01:45:16,000 --> 01:45:18,000
对

2760
01:45:18,000 --> 01:45:22,000
这也是用 Taihe 中间我产生了一个非常奇妙的一个感觉

2761
01:45:22,000 --> 01:45:24,000
就是说你能感觉到它的强大

2762
01:45:24,000 --> 01:45:27,000
但是你也能感觉到它对你的制约

2763
01:45:27,000 --> 01:45:29,000
就是说有些它给你定义好的东西

2764
01:45:29,000 --> 01:45:30,000
你就只能那么去用它

2765
01:45:30,000 --> 01:45:32,000
比如它那条线要怎么走

2766
01:45:33,000 --> 01:45:35,000
当然你完全可以重新把红包打散

2767
01:45:35,000 --> 01:45:38,000
自己写一个让你足够满意的红包

2768
01:45:38,000 --> 01:45:38,000
对吧

2769
01:45:38,000 --> 01:45:40,000
但是那个过程是非常痛苦的

2770
01:45:40,000 --> 01:45:42,000
以至于我就说将就一下

2771
01:45:42,000 --> 01:45:44,000
就用这个自己画轮子

2772
01:45:46,000 --> 01:45:47,000
对 这张轮子很痛苦的

2773
01:45:48,000 --> 01:45:49,000
其实 Rail 说的这种情况

2774
01:45:49,000 --> 01:45:54,000
更像是我们现在用 web 牌版里面实现了一些特性

2775
01:45:54,000 --> 01:45:57,000
也就是它有我们用一个很俗的词

2776
01:45:57,000 --> 01:45:59,000
就是它有一些 responsive 的特性

2777
01:45:59,000 --> 01:46:00,000
在里面

2778
01:46:00,000 --> 01:46:02,000
它能根据你呈现围界的改变

2779
01:46:02,000 --> 01:46:05,000
甚至包括你能实时的修改一些文本

2780
01:46:05,000 --> 01:46:09,000
但是还是保持着一些关键的牌版特性的稳定性

2781
01:46:10,000 --> 01:46:12,000
PDF 不是有一些这种可编程的功能吗

2782
01:46:12,000 --> 01:46:14,000
它可以嵌入 JavaScript 然后做一些交互

2783
01:46:15,000 --> 01:46:18,000
当时有一些那种比较疯狂的 text 的那种

2784
01:46:18,000 --> 01:46:20,000
就是先锋

2785
01:46:20,000 --> 01:46:22,000
它可以直接生成可交互的 PDF

2786
01:46:22,000 --> 01:46:24,000
比如说最简单的是用那个 context 做那个换能片

2787
01:46:24,000 --> 01:46:25,000
对吧

2788
01:46:25,000 --> 01:46:27,000
换能片不是有所谓的这个

2789
01:46:27,000 --> 01:46:28,000
这个这个快进下一页

2790
01:46:28,000 --> 01:46:29,000
页手页尾

2791
01:46:29,000 --> 01:46:32,000
或者到某一下一个章节的标题这种都有的吗

2792
01:46:32,000 --> 01:46:35,000
它可以在 PDF 里面实现一个导航栏

2793
01:46:35,000 --> 01:46:36,000
都可以通过这个来实现

2794
01:46:36,000 --> 01:46:37,000
非常的厉害

2795
01:46:38,000 --> 01:46:39,000
对 PDF 实现表单也是可以的

2796
01:46:39,000 --> 01:46:40,000
你可以填表

2797
01:46:41,000 --> 01:46:43,000
对 而且它会自动数据收集

2798
01:46:44,000 --> 01:46:47,000
但这个我觉得现在反倒是有一点示威了

2799
01:46:47,000 --> 01:46:48,000
就是我发现越到后来

2800
01:46:48,000 --> 01:46:49,000
就是说

2801
01:46:49,000 --> 01:46:52,000
因为太太说白了

2802
01:46:52,000 --> 01:46:53,000
它最终还是

2803
01:46:53,000 --> 01:46:57,000
99%是为了打印的那个场景设计的

2804
01:46:57,000 --> 01:46:59,000
排版它核心是一个排版

2805
01:46:59,000 --> 01:47:02,000
你们所有对它的过度使用

2806
01:47:02,000 --> 01:47:02,000
其实都是误用

2807
01:47:02,000 --> 01:47:03,000
对

2808
01:47:03,000 --> 01:47:04,000
对

2809
01:47:04,000 --> 01:47:07,000
就它还是为了这个打印出来在使用的

2810
01:47:07,000 --> 01:47:09,000
但其实现在我们看很多

2811
01:47:09,000 --> 01:47:13,000
我其实已经很少把一篇论文打印出来再看

2812
01:47:13,000 --> 01:47:15,000
都是在电脑屏幕上看

2813
01:47:15,000 --> 01:47:18,000
就是说是否还有必要拘泥于

2814
01:47:18,000 --> 01:47:20,000
这个 page 这个页面这个概念

2815
01:47:20,000 --> 01:47:21,000
对吧

2816
01:47:21,000 --> 01:47:24,000
其实这个概念已经开始在逐步淡化了

2817
01:47:24,000 --> 01:47:27,000
像太太和他花了很多时间去研究说

2818
01:47:27,000 --> 01:47:31,000
我要为了把这一篇文字和公式

2819
01:47:31,000 --> 01:47:35,000
完美的塞进一个固定的尺寸里面空间

2820
01:47:35,000 --> 01:47:36,000
我要做什么标点挤

2821
01:47:36,000 --> 01:47:38,000
我要做各种什么这种

2822
01:47:38,000 --> 01:47:40,000
这种分词

2823
01:47:40,000 --> 01:47:42,000
各种各种

2824
01:47:42,000 --> 01:47:44,000
这种变种

2825
01:47:44,000 --> 01:47:45,000
这种操作

2826
01:47:45,000 --> 01:47:46,000
这个公式这么好

2827
01:47:46,000 --> 01:47:47,000
一行写不下

2828
01:47:47,000 --> 01:47:49,000
到底应该在 X 还是 Y

2829
01:47:49,000 --> 01:47:50,000
哪里哪个地方断开

2830
01:47:50,000 --> 01:47:52,000
这种非常细致的规则

2831
01:47:52,000 --> 01:47:54,000
但随着这种无线

2832
01:47:54,000 --> 01:47:59,000
就是相对来说灵活的这种展示界面的存在

2833
01:47:59,000 --> 01:48:01,000
它好像这个需求已经不那么强烈了

2834
01:48:01,000 --> 01:48:02,000
那无非看不下

2835
01:48:02,000 --> 01:48:04,000
我就把那个流量器窗口拉宽一点

2836
01:48:04,000 --> 01:48:06,000
对

2837
01:48:06,000 --> 01:48:07,000
在节目的最开始

2838
01:48:07,000 --> 01:48:08,000
实际上我就提到了这一点

2839
01:48:08,000 --> 01:48:10,000
我觉得现在拉太可

2840
01:48:10,000 --> 01:48:15,000
或者太可本身的定位是一个比较精准的

2841
01:48:15,000 --> 01:48:17,000
小众的

2842
01:48:17,000 --> 01:48:21,000
局限在插入公式这一部分

2843
01:48:21,000 --> 01:48:24,000
你真正拿太可来排版的人

2844
01:48:24,000 --> 01:48:25,000
实际上是

2845
01:48:25,000 --> 01:48:26,000
就是你

2846
01:48:26,000 --> 01:48:27,000
越来越少了

2847
01:48:27,000 --> 01:48:31,000
在整个的个人出版领域里面

2848
01:48:31,000 --> 01:48:33,000
实际上是已经很小的一部分

2849
01:48:33,000 --> 01:48:35,000
就反过来说宗师级的解决方案

2850
01:48:35,000 --> 01:48:37,000
实际上是不适合普通人的

2851
01:48:37,000 --> 01:48:39,000
对

2852
01:48:39,000 --> 01:48:40,000
它将排版这样一件

2853
01:48:40,000 --> 01:48:45,000
其实高度依赖于视觉结果的这样一件工作

2854
01:48:45,000 --> 01:48:48,000
给你添加了一个比较抽象的中间

2855
01:48:48,000 --> 01:48:49,000
中间的这样一个过程

2856
01:48:49,000 --> 01:48:51,000
它需要你用一些相对抽象的方式

2857
01:48:51,000 --> 01:48:52,000
去描述你的排版

2858
01:48:52,000 --> 01:48:55,000
而不是像早期的平面设计师一样

2859
01:48:55,000 --> 01:48:58,000
他们甚至将一个剪贴画

2860
01:48:58,000 --> 01:49:00,000
剪下来直接粘到纸上的某一个位置

2861
01:49:00,000 --> 01:49:03,000
这样子的一个直观的过程

2862
01:49:03,000 --> 01:49:06,000
我觉得这是它比较难上手的一个原因

2863
01:49:06,000 --> 01:49:07,000
对

2864
01:49:07,000 --> 01:49:09,000
你使用这个东西是需要经过一套

2865
01:49:09,000 --> 01:49:11,000
你并不

2866
01:49:11,000 --> 01:49:14,000
或者说违反直觉的训练的

2867
01:49:14,000 --> 01:49:16,000
我觉得在很多设计师这边

2868
01:49:16,000 --> 01:49:18,000
实际上是一个很大的阻力

2869
01:49:18,000 --> 01:49:19,000
违反直觉这件事情

2870
01:49:19,000 --> 01:49:22,000
在设计师这里是行不通的

2871
01:49:22,000 --> 01:49:23,000
也不叫违反直觉

2872
01:49:23,000 --> 01:49:25,000
就是不直接

2873
01:49:25,000 --> 01:49:25,000
就是

2874
01:49:25,000 --> 01:49:28,000
就 Not Intuitive

2875
01:49:28,000 --> 01:49:31,000
没有那么直观的意思

2876
01:49:31,000 --> 01:49:32,000
它不是 Not Intuitive

2877
01:49:32,000 --> 01:49:33,000
它是 Counter Intuitive

2878
01:49:33,000 --> 01:49:36,000
它是反直觉的

2879
01:49:36,000 --> 01:49:36,000
对

2880
01:49:36,000 --> 01:49:38,000
Counter Intuitive

2881
01:49:38,000 --> 01:49:40,000
它说的是反人性的

2882
01:49:40,000 --> 01:49:41,000
你知道吗

2883
01:49:41,000 --> 01:49:43,000
它本质上让你变成一个

2884
01:49:43,000 --> 01:49:44,000
叫做什么来的

2885
01:49:44,000 --> 01:49:45,000
Interpreter

2886
01:49:45,000 --> 01:49:45,000
对吧

2887
01:49:45,000 --> 01:49:46,000
脚本解释器

2888
01:49:46,000 --> 01:49:48,000
你要去运行这段结果

2889
01:49:48,000 --> 01:49:50,000
大概在你的脑子里面

2890
01:49:50,000 --> 01:49:53,000
人脑去演算这个

2891
01:49:53,000 --> 01:49:54,000
太和排版算法的结果

2892
01:49:54,000 --> 01:49:56,000
得到说大概会长什么样子

2893
01:49:56,000 --> 01:49:58,000
然后你得到那个 PDF

2894
01:49:58,000 --> 01:50:00,000
再看到底是不是你想的那个样子

2895
01:50:00,000 --> 01:50:02,000
会不会什么 bonding box overflow

2896
01:50:02,000 --> 01:50:04,000
这种东西就出来了

2897
01:50:04,000 --> 01:50:05,000
这实际上就是编程

2898
01:50:05,000 --> 01:50:07,000
对于人的异化过程

2899
01:50:07,000 --> 01:50:08,000
它是宗师的工具

2900
01:50:08,000 --> 01:50:11,000
它不是普通人的工具

2901
01:50:11,000 --> 01:50:11,000
对

2902
01:50:14,000 --> 01:50:16,000
但是一开始刚才说到

2903
01:50:16,000 --> 01:50:17,000
那个连字段词

2904
01:50:17,000 --> 01:50:19,000
Have a Nation 的那个算法

2905
01:50:19,000 --> 01:50:21,000
其实它做得挺好的

2906
01:50:21,000 --> 01:50:23,000
而且就是

2907
01:50:23,000 --> 01:50:25,000
因为你人工排版的时候

2908
01:50:25,000 --> 01:50:27,000
你可能只能顾着这一行来排

2909
01:50:27,000 --> 01:50:30,000
但是它现在就是所谓

2910
01:50:30,000 --> 01:50:31,000
我们现在阿杜比的算法是

2911
01:50:31,000 --> 01:50:35,000
单行排版器和段落排版器

2912
01:50:35,000 --> 01:50:36,000
它可以在

2913
01:50:36,000 --> 01:50:38,000
根据这一整个段落的数行

2914
01:50:38,000 --> 01:50:40,000
它能根据它的公式

2915
01:50:40,000 --> 01:50:42,000
计算出一个最小的调整值

2916
01:50:42,000 --> 01:50:44,000
然后得出最佳的

2917
01:50:44,000 --> 01:50:45,000
最佳方案

2918
01:50:45,000 --> 01:50:47,000
这个东西就是电脑上层做的东西

2919
01:50:47,000 --> 01:50:49,000
这还不是最狠的

2920
01:50:49,000 --> 01:50:51,000
太和做得更狠

2921
01:50:51,000 --> 01:50:51,000
在这方面

2922
01:50:51,000 --> 01:50:52,000
它可以做全局的优化

2923
01:50:52,000 --> 01:50:54,000
就是说这一整页里面

2924
01:50:54,000 --> 01:50:56,000
我觉得是不是要在这里段

2925
01:50:56,000 --> 01:50:58,000
会导致后面三个

2926
01:50:58,000 --> 01:51:00,000
五个字安段之后的那个排版

2927
01:51:00,000 --> 01:51:02,000
所以违反了一个更大的代价

2928
01:51:02,000 --> 01:51:04,000
它有一个整篇的全局优化的过程

2929
01:51:04,000 --> 01:51:05,000
它有好多个参数

2930
01:51:05,000 --> 01:51:06,000
对

2931
01:51:06,000 --> 01:51:08,000
而且我印象最深的就是说

2932
01:51:08,000 --> 01:51:10,000
它在相当长的一段时期内

2933
01:51:10,000 --> 01:51:11,000
它的那个

2934
01:51:11,000 --> 01:51:12,000
就是编译

2935
01:51:12,000 --> 01:51:13,000
编译那个太和文本

2936
01:51:13,000 --> 01:51:14,000
到最终 DVI 也好

2937
01:51:14,000 --> 01:51:15,000
PDF 的结果

2938
01:51:15,000 --> 01:51:17,000
它不是这个 one pass 的

2939
01:51:17,000 --> 01:51:18,000
它不是一遍就完了

2940
01:51:18,000 --> 01:51:19,000
它可以 multi pass

2941
01:51:19,000 --> 01:51:22,000
就是它去不断的去进行全局优化

2942
01:51:22,000 --> 01:51:23,000
然后使得说

2943
01:51:23,000 --> 01:51:25,000
你得到一个整

2944
01:51:25,000 --> 01:51:27,000
充篇文稿里面最小代价

2945
01:51:27,000 --> 01:51:30,000
去违反那些排版规则的

2946
01:51:30,000 --> 01:51:32,000
总和的一个总成本

2947
01:51:32,000 --> 01:51:33,000
对

2948
01:51:33,000 --> 01:51:34,000
像这一类事情的话

2949
01:51:34,000 --> 01:51:37,000
就是计算机所擅长的部分

2950
01:51:37,000 --> 01:51:39,000
就哪怕你是一个很训练

2951
01:51:39,000 --> 01:51:42,000
很几十年的一个高级的一个排版师

2952
01:51:42,000 --> 01:51:44,000
也不会比这个计算机

2953
01:51:44,000 --> 01:51:44,000
它做的

2954
01:51:44,000 --> 01:51:46,000
就经过计算以后

2955
01:51:46,000 --> 01:51:48,000
根据这个算法计算出来的那个演化

2956
01:51:48,000 --> 01:51:50,000
采取的一个最优值会好嘛

2957
01:51:50,000 --> 01:51:50,000
对吧

2958
01:51:50,000 --> 01:51:53,000
所以这部分太和是很厉害的

2959
01:51:53,000 --> 01:51:54,000
但是反过来讲

2960
01:51:55,000 --> 01:51:58,000
对于那个公式排版里面

2961
01:51:58,000 --> 01:52:01,000
比如说你要等号对齐加多少宽

2962
01:52:01,000 --> 01:52:03,000
这个控制多少

2963
01:52:03,000 --> 01:52:04,000
这个东西的话

2964
01:52:04,000 --> 01:52:07,000
需要人再重新去反渲染的话

2965
01:52:07,000 --> 01:52:08,000
这个的确就是

2966
01:52:09,000 --> 01:52:10,000
不是机器所擅长的东西

2967
01:52:10,000 --> 01:52:13,000
然后需要人进行非常多的干预

2968
01:52:13,000 --> 01:52:16,000
当时我印象非常深的一个点

2969
01:52:16,000 --> 01:52:17,000
就是说当时我自己写诺文

2970
01:52:17,000 --> 01:52:19,000
这里面跟普通的排版有点不太一样

2971
01:52:19,000 --> 01:52:20,000
就在于

2972
01:52:20,000 --> 01:52:22,000
比如说我问一个

2973
01:52:22,000 --> 01:52:23,000
我理解应该是这样子

2974
01:52:23,000 --> 01:52:25,000
比如说你拿到一个别人的书

2975
01:52:25,000 --> 01:52:25,000
你要排

2976
01:52:25,000 --> 01:52:27,000
你是不能改书的内容的吗

2977
01:52:27,000 --> 01:52:27,000
对不对

2978
01:52:27,000 --> 01:52:28,000
对

2979
01:52:28,000 --> 01:52:28,000
但是

2980
01:52:28,000 --> 01:52:29,000
因为我是自己写论文

2981
01:52:29,000 --> 01:52:31,000
我知道写到最后

2982
01:52:31,000 --> 01:52:32,000
最后那一句话的时候

2983
01:52:32,000 --> 01:52:33,000
刚好就多了那么一行

2984
01:52:33,000 --> 01:52:35,000
然后你无论如何都调不回去

2985
01:52:35,000 --> 01:52:37,000
然后就不多一夜空

2986
01:52:37,000 --> 01:52:38,000
空不白夜的时候

2987
01:52:38,000 --> 01:52:39,000
你说你干脆把最后那段话改一下

2988
01:52:39,000 --> 01:52:41,000
缩短一点点好吗

2989
01:52:41,000 --> 01:52:41,000
对吧

2990
01:52:41,000 --> 01:52:43,000
编辑其实是有这个权限的

2991
01:52:43,000 --> 01:52:45,000
编辑在排版之中

2992
01:52:45,000 --> 01:52:47,000
起到的作用有时候就是这样

2993
01:52:47,000 --> 01:52:48,000
他觉得

2994
01:52:48,000 --> 01:52:49,000
对啊

2995
01:52:49,000 --> 01:52:51,000
这篇文章可能排了一整页

2996
01:52:51,000 --> 01:52:51,000
加一句话

2997
01:52:51,000 --> 01:52:52,000
那我把那句话改一改

2998
01:52:52,000 --> 01:52:54,000
或者把这个篇幅缩一下

2999
01:52:54,000 --> 01:52:56,000
然后跟作者沟通一下就好

3000
01:52:56,000 --> 01:52:56,000
对

3001
01:52:56,000 --> 01:52:58,000
所以编辑有这个权限

3002
01:52:58,000 --> 01:52:59,000
但是排版师没有这个权限

3003
01:52:59,000 --> 01:53:00,000
对

3004
01:53:00,000 --> 01:53:03,000
比如你想这是一个非常有名的作家

3005
01:53:03,000 --> 01:53:04,000
一字千金的

3006
01:53:04,000 --> 01:53:05,000
你敢改字吗

3007
01:53:05,000 --> 01:53:05,000
不敢的

3008
01:53:05,000 --> 01:53:06,000
对啊

3009
01:53:06,000 --> 01:53:07,000
就违约了

3010
01:53:07,000 --> 01:53:08,000
会出事故的

3011
01:53:09,000 --> 01:53:11,000
所以编辑如果觉得有必要

3012
01:53:11,000 --> 01:53:14,000
他可能导回去和作者去联系这个事情

3013
01:53:14,000 --> 01:53:15,000
再难的东西

3014
01:53:15,000 --> 01:53:17,000
你排版都能排得好

3015
01:53:17,000 --> 01:53:19,000
这才是你排版师的厉害之处

3016
01:53:19,000 --> 01:53:20,000
你拿去改字

3017
01:53:20,000 --> 01:53:21,000
这个算什么

3018
01:53:21,000 --> 01:53:21,000
对吧

3019
01:53:22,000 --> 01:53:24,000
所以本质上你看排版师

3020
01:53:24,000 --> 01:53:26,000
本质上也是一个人肉的那个

3021
01:53:26,000 --> 01:53:26,000
对吧

3022
01:53:26,000 --> 01:53:28,000
那个就是 Layout

3023
01:53:28,000 --> 01:53:29,000
Auto Layout 计算器

3024
01:53:29,000 --> 01:53:32,000
你要知道怎么排才能变得好看

3025
01:53:32,000 --> 01:53:36,000
你脑子中有各种各样的规则

3026
01:53:36,000 --> 01:53:36,000
对

3027
01:53:36,000 --> 01:53:39,000
一个人肉的 PageMaker 的

3028
01:53:39,000 --> 01:53:40,000
我刚才查了一下

3029
01:53:40,000 --> 01:53:41,000
我才发现 PageMaker 这个东西

3030
01:53:41,000 --> 01:53:43,000
已经在 2004 年的时候

3031
01:53:43,000 --> 01:53:44,000
早就没有了

3032
01:53:44,000 --> 01:53:45,000
我的天呐

3033
01:53:45,000 --> 01:53:48,000
我一直选择找个机会去执政你

3034
01:53:48,000 --> 01:53:49,000
但是就没有机会

3035
01:53:49,000 --> 01:53:51,000
这十年来我都活在一个谎言里

3036
01:53:52,000 --> 01:53:53,000
对

3037
01:53:53,000 --> 01:53:54,000
我们现在都用 indesign

3038
01:53:54,000 --> 01:53:57,000
而且你想 indesign 都二十多年了

3039
01:53:57,000 --> 01:53:57,000
对

3040
01:53:57,000 --> 01:53:57,000
我知道

3041
01:53:57,000 --> 01:53:59,000
其实我天天

3042
01:53:59,000 --> 01:54:02,000
我刚才所有提到 PageMaker 的地方

3043
01:54:02,000 --> 01:54:03,000
我想说的其实都是 indesign

3044
01:54:03,000 --> 01:54:04,000
就是那个

3045
01:54:04,000 --> 01:54:07,000
我甚至我能想起来那个 logo 是写的 ID

3046
01:54:07,000 --> 01:54:10,000
但是我就 Somehow 把它叫成 PageMaker

3047
01:54:10,000 --> 01:54:12,000
上个世纪的记忆实在是

3048
01:54:12,000 --> 01:54:14,000
用 indesign 的话

3049
01:54:14,000 --> 01:54:16,000
先不考虑钱的问题

3050
01:54:16,000 --> 01:54:16,000
它比较贵

3051
01:54:16,000 --> 01:54:18,000
我有可能拿它来写毕业论文吗

3052
01:54:18,000 --> 01:54:21,000
取决于你写什么级别的毕业论文

3053
01:54:21,000 --> 01:54:22,000
刚才我想说的一个事情

3054
01:54:22,000 --> 01:54:25,000
就是不管是 Tag 还是 indesign

3055
01:54:25,000 --> 01:54:26,000
实际上都有一个问题

3056
01:54:26,000 --> 01:54:31,000
就是它如果你要使用比较专业的 plot 工具的话

3057
01:54:31,000 --> 01:54:34,000
他们还是必须使用第三方的东西

3058
01:54:34,000 --> 01:54:35,000
就比如说 Mathplotlib

3059
01:54:35,000 --> 01:54:37,000
公式很多会比较麻烦

3060
01:54:38,000 --> 01:54:38,000
对

3061
01:54:38,000 --> 01:54:41,000
它就是没有很好的公式处理工具

3062
01:54:41,000 --> 01:54:44,000
就是会那种根据数据会出来的图

3063
01:54:44,000 --> 01:54:44,000
对吧

3064
01:54:44,000 --> 01:54:46,000
它是没法支持这一点的

3065
01:54:46,000 --> 01:54:47,000
对

3066
01:54:47,000 --> 01:54:49,000
或者是你画一个什么三维界面的

3067
01:54:49,000 --> 01:54:51,000
三维里面的流行之类的东西

3068
01:54:51,000 --> 01:54:55,000
你要怎么用 Tigz 来画

3069
01:54:55,000 --> 01:54:55,000
不可能的

3070
01:54:55,000 --> 01:54:57,000
所以这些东西其实还是有局限

3071
01:54:57,000 --> 01:54:58,000
可以的

3072
01:54:59,000 --> 01:55:00,000
Tigz 可以画

3073
01:55:00,000 --> 01:55:00,000
可以的

3074
01:55:00,000 --> 01:55:01,000
OK

3075
01:55:02,000 --> 01:55:03,000
可以画一些简单的

3076
01:55:03,000 --> 01:55:06,000
然后刚才我不是说我用 Python 写了一个代码

3077
01:55:06,000 --> 01:55:07,000
输出这个

3078
01:55:07,000 --> 01:55:09,000
然后 Tag 的命令来实现绘图

3079
01:55:09,000 --> 01:55:12,000
输出的就是 Tigz 的代码

3080
01:55:12,000 --> 01:55:14,000
然后它实现了一个我想要的图形

3081
01:55:14,000 --> 01:55:17,000
为的就是解决刚才我说的那个问题

3082
01:55:17,000 --> 01:55:20,000
它画出那个图形中间是有一些

3083
01:55:20,000 --> 01:55:23,000
Tagz label 是需要跟周围的长相一致的

3084
01:55:24,000 --> 01:55:26,000
你用任何其他的工具是没有办法实现这一点的

3085
01:55:27,000 --> 01:55:30,000
然后这又退回来这个软件的本质

3086
01:55:30,000 --> 01:55:31,000
就是因为 Tag 它是开放的

3087
01:55:31,000 --> 01:55:32,000
开源的

3088
01:55:32,000 --> 01:55:33,000
如果你有这个需求

3089
01:55:33,000 --> 01:55:35,000
你自己去写个红写个包

3090
01:55:35,000 --> 01:55:36,000
你自己造个轮子

3091
01:55:36,000 --> 01:55:39,000
然后你就可以添加功能了

3092
01:55:39,000 --> 01:55:39,000
对吧

3093
01:55:39,000 --> 01:55:41,000
你自己拿去用去

3094
01:55:41,000 --> 01:55:43,000
但是对于 Adubi 公司来讲

3095
01:55:43,000 --> 01:55:44,000
硬币是他们专属的

3096
01:55:44,000 --> 01:55:46,000
然后你这个需求太小了

3097
01:55:46,000 --> 01:55:47,000
我干嘛要给你做

3098
01:55:47,000 --> 01:55:47,000
对吧

3099
01:55:47,000 --> 01:55:49,000
然后这个东西

3100
01:55:50,000 --> 01:55:52,000
你看就回到了开始无套念的

3101
01:55:52,000 --> 01:55:55,000
引用那一段对自由软件的指责

3102
01:55:55,000 --> 01:55:58,000
确实 InDesign 是一个设计了非常好的工具

3103
01:55:58,000 --> 01:55:59,000
它具备非常

3104
01:55:59,000 --> 01:56:01,000
它凝聚了非常多工程师

3105
01:56:01,000 --> 01:56:04,000
多少的辛苦劳动的结果

3106
01:56:04,000 --> 01:56:06,000
当然它得到的结果也是非常的

3107
01:56:06,000 --> 01:56:08,000
这种 professional 专业的这种结果

3108
01:56:08,000 --> 01:56:11,000
但是它不能解决我这么一个特别定制化

3109
01:56:11,000 --> 01:56:12,000
小众的需求

3110
01:56:13,000 --> 01:56:15,000
所以你看在研究领域

3111
01:56:15,000 --> 01:56:16,000
在这种

3112
01:56:16,000 --> 01:56:18,000
特别是那种探索边界的那些人

3113
01:56:18,000 --> 01:56:20,000
他总是要遇到这种 etiquette

3114
01:56:20,000 --> 01:56:23,000
所以还是要用这种开放的

3115
01:56:23,000 --> 01:56:25,000
这种开源的自由的软件

3116
01:56:25,000 --> 01:56:27,000
才能实现它的那种

3117
01:56:27,000 --> 01:56:29,000
可能全世界就只有他这么一个人

3118
01:56:29,000 --> 01:56:31,000
在 20 年时间内用了这么一次

3119
01:56:31,000 --> 01:56:33,000
之后再也没有人想过这种需求了

3120
01:56:33,000 --> 01:56:35,000
InDesign 肯定是不会做的

3121
01:56:36,000 --> 01:56:36,000
对

3122
01:56:36,000 --> 01:56:39,000
其实还是看你怎样衡量这个排版的工作量

3123
01:56:39,000 --> 01:56:41,000
比如说我们用 InDesign

3124
01:56:41,000 --> 01:56:43,000
理论上你完全可以人肉的实现

3125
01:56:43,000 --> 01:56:46,000
所有公式编辑器可以实现的事情

3126
01:56:46,000 --> 01:56:47,000
排一个公式

3127
01:56:47,000 --> 01:56:49,000
它结构很复杂

3128
01:56:49,000 --> 01:56:49,000
但它再复杂

3129
01:56:49,000 --> 01:56:52,000
它无非就是在一个二维的平面上

3130
01:56:52,000 --> 01:56:53,000
把人工排它也可以

3131
01:56:53,000 --> 01:56:54,000
是吧

3132
01:56:54,000 --> 01:56:56,000
文字放到固定的位置

3133
01:56:56,000 --> 01:56:56,000
对

3134
01:56:56,000 --> 01:56:58,000
就 InDesign 完全有这个能力

3135
01:56:58,000 --> 01:57:01,000
而且做这件事情未必很复杂

3136
01:57:01,000 --> 01:57:03,000
就是它的学习成本首先非常的低

3137
01:57:03,000 --> 01:57:06,000
其二就是它未必很复杂

3138
01:57:06,000 --> 01:57:08,000
如果你的公式量不是非常的多

3139
01:57:08,000 --> 01:57:10,000
那你这个如果就不成立了

3140
01:57:10,000 --> 01:57:11,000
说到这个 InDesign

3141
01:57:11,000 --> 01:57:12,000
你这个如果不成立

3142
01:57:14,000 --> 01:57:16,000
说到 InDesign 做技术类书籍

3143
01:57:16,000 --> 01:57:17,000
如果我没记错的话

3144
01:57:17,000 --> 01:57:21,000
小林健的 CJKV Information Processing

3145
01:57:21,000 --> 01:57:22,000
应该第二版就是用 InDesign

3146
01:57:22,000 --> 01:57:24,000
一版好像是 PageMaker 排的

3147
01:57:24,000 --> 01:57:26,000
小林健随便写一个技术文档

3148
01:57:26,000 --> 01:57:27,000
都是用 InDesign 写的

3149
01:57:28,000 --> 01:57:30,000
这么硬核动吗

3150
01:57:30,000 --> 01:57:31,000
他自己一页一页去排吗

3151
01:57:31,000 --> 01:57:31,000
对

3152
01:57:31,000 --> 01:57:32,000
他自己做的

3153
01:57:32,000 --> 01:57:33,000
对

3154
01:57:33,000 --> 01:57:35,000
他是字典界的高德纳

3155
01:57:36,000 --> 01:57:37,000
所以说到底的话

3156
01:57:37,000 --> 01:57:38,000
对于他来讲的话

3157
01:57:38,000 --> 01:57:40,000
因为写文章是关键

3158
01:57:40,000 --> 01:57:41,000
用的工具是什么

3159
01:57:41,000 --> 01:57:43,000
就是次要吗

3160
01:57:43,000 --> 01:57:43,000
对于他来讲

3161
01:57:43,000 --> 01:57:45,000
他用 InDesign 上手

3162
01:57:45,000 --> 01:57:46,000
他就用 InDesign

3163
01:57:46,000 --> 01:57:46,000
对吧

3164
01:57:47,000 --> 01:57:49,000
好像中国有好多企业

3165
01:57:49,000 --> 01:57:50,000
内部交换文档

3166
01:57:50,000 --> 01:57:51,000
全都是 PPT

3167
01:57:51,000 --> 01:57:54,000
不管干嘛都是一个 PPT 发过来

3168
01:57:54,000 --> 01:57:56,000
所以我们本质上是需要一张数码白纸

3169
01:57:56,000 --> 01:57:56,000
对吧

3170
01:57:56,000 --> 01:57:58,000
不要给我加那么条条框框

3171
01:57:58,000 --> 01:58:00,000
我自己把它摆到哪里就是哪里

3172
01:58:00,000 --> 01:58:01,000
你所需要的是说

3173
01:58:01,000 --> 01:58:04,000
怎么让我能够自由的通过一个规则

3174
01:58:04,000 --> 01:58:05,000
能够摆在那里

3175
01:58:05,000 --> 01:58:07,000
数码纸张其实就是 PDF

3176
01:58:08,000 --> 01:58:09,000
它是一个容器

3177
01:58:09,000 --> 01:58:10,000
你怎么在怎么打印

3178
01:58:10,000 --> 01:58:11,000
怎么画

3179
01:58:11,000 --> 01:58:12,000
这个是另外的事情

3180
01:58:12,000 --> 01:58:15,000
但是 PDF 没法直接生成

3181
01:58:15,000 --> 01:58:16,000
你得有一个工具才能生成它

3182
01:58:16,000 --> 01:58:17,000
所以 Keynote

3183
01:58:17,000 --> 01:58:19,000
PPT 反而是比较

3184
01:58:20,000 --> 01:58:21,000
相对来说简洁直观的

3185
01:58:22,000 --> 01:58:22,000
确实也是

3186
01:58:22,000 --> 01:58:24,000
我看到很多人最终

3187
01:58:24,000 --> 01:58:25,000
他搞不定了

3188
01:58:25,000 --> 01:58:28,000
他就直接开一个 PPT

3189
01:58:28,000 --> 01:58:29,000
弄成白板

3190
01:58:29,000 --> 01:58:30,000
删掉所有文字

3191
01:58:30,000 --> 01:58:32,000
然后一个一个摆上他需要的相对位置

3192
01:58:32,000 --> 01:58:33,000
也可以

3193
01:58:33,000 --> 01:58:35,000
本质上是你在白纸上用手写

3194
01:58:35,000 --> 01:58:37,000
然后再把它拍成照是一样的

3195
01:58:37,000 --> 01:58:41,000
PPT 是我在研究生的时候

3196
01:58:41,000 --> 01:58:44,000
提交的论文的学术会议

3197
01:58:44,000 --> 01:58:47,000
他应该也是 IEEE 下属的一个学术会议

3198
01:58:47,000 --> 01:58:49,000
官方推荐的海报排版公司

3199
01:58:50,000 --> 01:58:51,000
海报

3200
01:58:51,000 --> 01:58:52,000
他给的官方

3201
01:58:52,000 --> 01:58:52,000
对

3202
01:58:52,000 --> 01:58:53,000
就是你的论文

3203
01:58:53,000 --> 01:58:54,000
就是你的 paper

3204
01:58:54,000 --> 01:58:56,000
有可能有两种发表的形式

3205
01:58:56,000 --> 01:58:58,000
一种是 presentation

3206
01:58:58,000 --> 01:58:59,000
就是你去那边做一个演讲

3207
01:58:59,000 --> 01:59:00,000
另一种就是 poster

3208
01:59:00,000 --> 01:59:03,000
就是你在会场贴一个海报

3209
01:59:03,000 --> 01:59:04,000
然后你站在海报旁边

3210
01:59:04,000 --> 01:59:05,000
等别人来跟你交流

3211
01:59:05,000 --> 01:59:06,000
这样子

3212
01:59:06,000 --> 01:59:09,000
然后它的官方给你的海报的排版模板

3213
01:59:09,000 --> 01:59:11,000
就是一个 poll point 的文件

3214
01:59:11,000 --> 01:59:14,000
这里面各种什么会议的 logo

3215
01:59:14,000 --> 01:59:15,000
元素

3216
01:59:17,000 --> 01:59:18,000
指定的字体样式都给你定好了

3217
01:59:18,000 --> 01:59:19,000
对吧

3218
01:59:19,000 --> 01:59:20,000
没有很简单

3219
01:59:20,000 --> 01:59:23,000
就是它会给你一个比较简单的框架

3220
01:59:23,000 --> 01:59:25,000
因为那些会议一般它没有什么 logo

3221
01:59:25,000 --> 01:59:28,000
它可能主要还是侧重展示你自己的

3222
01:59:28,000 --> 01:59:29,000
它有一个格式

3223
01:59:29,000 --> 01:59:30,000
对有一个大致的格式

3224
01:59:30,000 --> 01:59:30,000
通样的

3225
01:59:30,000 --> 01:59:32,000
通用的格式

3226
01:59:32,000 --> 01:59:33,000
标题是什么

3227
01:59:33,000 --> 01:59:34,000
作者是谁

3228
01:59:34,000 --> 01:59:35,000
会议名称

3229
01:59:35,000 --> 01:59:36,000
某某地体界

3230
01:59:36,000 --> 01:59:37,000
什么什么

3231
01:59:37,000 --> 01:59:38,000
conference 之类的

3232
01:59:38,000 --> 01:59:39,000
这种会给你定好了

3233
01:59:39,000 --> 01:59:40,000
那个模板

3234
01:59:40,000 --> 01:59:42,000
这就在中间是一个大白板

3235
01:59:42,000 --> 01:59:42,000
你自己写吧

3236
01:59:42,000 --> 01:59:45,000
但其实你最后交的海报

3237
01:59:45,000 --> 01:59:47,000
如果跟它这个格式有很大差异

3238
01:59:47,000 --> 01:59:49,000
但是基本的文本信息是对上的话

3239
01:59:49,000 --> 01:59:52,000
它其实不会干涉你对设计的改变

3240
01:59:52,000 --> 01:59:53,000
你达到目的就可以了

3241
01:59:54,000 --> 01:59:56,000
毕竟不是一个商业发行

3242
01:59:59,000 --> 02:00:00,000
说到底的话

3243
02:00:00,000 --> 02:00:00,000
对

3244
02:00:00,000 --> 02:00:02,000
你们现在再来讲

3245
02:00:02,000 --> 02:00:04,000
讨论说 TEC 有各种各样的不好的地方

3246
02:00:04,000 --> 02:00:08,000
当时无非就是高章他自己想把自己书印好了

3247
02:00:08,000 --> 02:00:09,000
然后人家很牛

3248
02:00:09,000 --> 02:00:12,000
他自己为了自己排书

3249
02:00:12,000 --> 02:00:14,000
他自己写了一个白板引擎

3250
02:00:14,000 --> 02:00:16,000
自己做了一套自己

3251
02:00:16,000 --> 02:00:17,000
然后他写出来了

3252
02:00:17,000 --> 02:00:18,000
但是他觉得挺好的

3253
02:00:18,000 --> 02:00:20,000
于是他就开源出来了

3254
02:00:20,000 --> 02:00:21,000
大家也都可以用

3255
02:00:22,000 --> 02:00:23,000
仅此而已

3256
02:00:24,000 --> 02:00:25,000
事情就结束了

3257
02:00:25,000 --> 02:00:26,000
你们爱怎么用

3258
02:00:26,000 --> 02:00:28,000
你们真爱怎么导

3259
02:00:28,000 --> 02:00:30,000
这都是大家后来的事情了

3260
02:00:31,000 --> 02:00:32,000
他原来的目的就想

3261
02:00:32,000 --> 02:00:36,000
只是想他觉得原来照牌排出来

3262
02:00:36,000 --> 02:00:38,000
他自己的书太难看了

3263
02:00:38,000 --> 02:00:42,000
然后他希望他想对他的作品有 full control

3264
02:00:42,000 --> 02:00:43,000
完全的控制

3265
02:00:44,000 --> 02:00:46,000
所以他写出来这样的东西

3266
02:00:46,000 --> 02:00:48,000
而且也只有像他这样的大事

3267
02:00:48,000 --> 02:00:53,000
才能把自己的字体和渲染引擎写出来

3268
02:00:55,000 --> 02:00:57,000
而且好像自从那之后从来没有人

3269
02:00:58,000 --> 02:00:59,000
想过这件事情了

3270
02:00:59,000 --> 02:01:00,000
我感觉

3271
02:01:02,000 --> 02:01:04,000
已经没有人有这种

3272
02:01:04,000 --> 02:01:06,000
大量去尝试这件事情

3273
02:01:06,000 --> 02:01:07,000
对

3274
02:01:07,000 --> 02:01:09,000
这件事情太跨学科了

3275
02:01:09,000 --> 02:01:11,000
他对自己排运的知识要求也非常高

3276
02:01:11,000 --> 02:01:15,000
我记得高德纳好像还跟 XAPF 有过很深度的合作

3277
02:01:15,000 --> 02:01:15,000
对 没错

3278
02:01:15,000 --> 02:01:16,000
这我们也可以讲一讲

3279
02:01:17,000 --> 02:01:18,000
没有

3280
02:01:18,000 --> 02:01:20,000
他当时其实没想那么多

3281
02:01:20,000 --> 02:01:22,000
他就觉得这个太难看

3282
02:01:22,000 --> 02:01:22,000
然后自己写个

3283
02:01:22,000 --> 02:01:24,000
然后他当时一开始觉得说

3284
02:01:24,000 --> 02:01:27,000
这事情花几个月就能搞定的事情

3285
02:01:27,000 --> 02:01:30,000
然后他才发现他太乐观了

3286
02:01:30,000 --> 02:01:31,000
是个大坑

3287
02:01:31,000 --> 02:01:32,000
对

3288
02:01:33,000 --> 02:01:34,000
而且他一开始

3289
02:01:35,000 --> 02:01:37,000
他决定要做字体的时候

3290
02:01:37,000 --> 02:01:38,000
他其实也想的

3291
02:01:38,000 --> 02:01:40,000
他还想用别人的东西

3292
02:01:40,000 --> 02:01:41,000
而且他那时候失乐

3293
02:01:41,000 --> 02:01:44,000
不是那时候已经有实验室有一些东西吗

3294
02:01:44,000 --> 02:01:46,000
在打印机什么他去问

3295
02:01:46,000 --> 02:01:47,000
我能不能用

3296
02:01:47,000 --> 02:01:50,000
然后失乐跟他谈判的基础就是说

3297
02:01:50,000 --> 02:01:52,000
你可以用我的设备

3298
02:01:52,000 --> 02:01:53,000
但是最后做出来的东西

3299
02:01:53,000 --> 02:01:54,000
又归于我失乐

3300
02:01:54,000 --> 02:01:55,000
然后他就不愿意了

3301
02:01:56,000 --> 02:01:59,000
这个东西最后做出来应该开源给大家用

3302
02:02:00,000 --> 02:02:01,000
所以他后来就想

3303
02:02:01,000 --> 02:02:01,000
不行

3304
02:02:01,000 --> 02:02:03,000
那想来想去我还是得自己重新做

3305
02:02:04,000 --> 02:02:06,000
然后他发现既然

3306
02:02:06,000 --> 02:02:09,000
目前所有东西他不能去改动现有的字体

3307
02:02:10,000 --> 02:02:12,000
他只好就重新再做一个字体

3308
02:02:12,000 --> 02:02:14,000
他要是学习的时候发现

3309
02:02:15,000 --> 02:02:19,000
你现在无论是那些矢量和那些点阵的字体

3310
02:02:19,000 --> 02:02:20,000
都不能满足他要求

3311
02:02:20,000 --> 02:02:27,000
那我就干脆直接向现成的字体设计师去学如何画字

3312
02:02:27,000 --> 02:02:31,000
然后再用他的程序教电脑如何画字

3313
02:02:31,000 --> 02:02:34,000
其实他做的 Metal Phone 的话

3314
02:02:34,000 --> 02:02:36,000
是真正的在画这个字

3315
02:02:36,000 --> 02:02:39,000
因为我们现在用的矢量字体

3316
02:02:39,000 --> 02:02:40,000
它只是轮廓

3317
02:02:40,000 --> 02:02:43,000
就把字体的勾边勾出来

3318
02:02:43,000 --> 02:02:44,000
但是 Metal Phone 的

3319
02:02:44,000 --> 02:02:48,000
它是真正教他的代码是在写

3320
02:02:48,000 --> 02:02:49,000
这个字应该怎么写

3321
02:02:49,000 --> 02:02:51,000
一笔一画怎么写

3322
02:02:52,000 --> 02:02:55,000
最终它是渲染出一个位图的格式了

3323
02:02:55,000 --> 02:02:56,000
它的那个是矢量的

3324
02:02:56,000 --> 02:03:00,000
但最后他必须得渲染成位图

3325
02:03:00,000 --> 02:03:01,000
最后得呈现出来

3326
02:03:02,000 --> 02:03:03,000
因为这个渲染这是最后的事情

3327
02:03:04,000 --> 02:03:08,000
但是他的代码最后他的确是叫点位移多少

3328
02:03:08,000 --> 02:03:10,000
笔画是怎么样的

3329
02:03:10,000 --> 02:03:12,000
然后再上面长肉是怎么样的

3330
02:03:12,000 --> 02:03:14,000
他的 Metal Phone 其实是在画个字

3331
02:03:15,000 --> 02:03:17,000
他之所以有这样一个思路

3332
02:03:17,000 --> 02:03:19,000
就是因为他在做字体的话

3333
02:03:19,000 --> 02:03:22,000
他是直接找字体设计师

3334
02:03:22,000 --> 02:03:24,000
他当时去找 X 不复

3335
02:03:24,000 --> 02:03:26,000
他们像比如我画个字母

3336
02:03:26,000 --> 02:03:28,000
先画右边一笔

3337
02:03:28,000 --> 02:03:29,000
左边一笔

3338
02:03:29,000 --> 02:03:31,000
然后称线怎么加

3339
02:03:31,000 --> 02:03:32,000
然后再削掉一点

3340
02:03:32,000 --> 02:03:36,000
就是一步一步真的就是按写字的步骤写出来的

3341
02:03:36,000 --> 02:03:37,000
一笔一笔写出来的

3342
02:03:38,000 --> 02:03:39,000
Metal Phone 是这样的

3343
02:03:39,000 --> 02:03:42,000
就是 Metal Phone 的机制它是矢量的

3344
02:03:42,000 --> 02:03:46,000
但是 Metal Phone 的绘制的结果好像是位图

3345
02:03:46,000 --> 02:03:47,000
它是个 Restrizer

3346
02:03:47,000 --> 02:03:49,000
就是你要指定一个

3347
02:03:50,000 --> 02:03:52,000
你在调动 Metal Phone 的时候

3348
02:03:52,000 --> 02:03:53,000
你是要指定单位的

3349
02:03:53,000 --> 02:03:55,000
这个单位是拿来干什么的

3350
02:03:55,000 --> 02:03:56,000
可能是拿来画的

3351
02:03:56,000 --> 02:03:57,000
就是拿来定位的

3352
02:03:58,000 --> 02:03:59,000
对 因为要 Metal Phone

3353
02:03:59,000 --> 02:04:01,000
你还得有字体知识

3354
02:04:01,000 --> 02:04:04,000
做 Metal Phone 的厂商非常少

3355
02:04:04,000 --> 02:04:05,000
现在应该已经绝技了

3356
02:04:06,000 --> 02:04:06,000
对

3357
02:04:08,000 --> 02:04:09,000
因为特别难写

3358
02:04:09,000 --> 02:04:13,000
因为它要等于教电脑怎么写这个字

3359
02:04:13,000 --> 02:04:16,000
因此就是要 60 多个参数

3360
02:04:16,000 --> 02:04:18,000
就是老多参数了

3361
02:04:18,000 --> 02:04:20,000
这个对于一个设计师

3362
02:04:21,000 --> 02:04:23,000
而且它是非常不直观的

3363
02:04:23,000 --> 02:04:23,000
对吧

3364
02:04:23,000 --> 02:04:24,000
你是其实是书写

3365
02:04:24,000 --> 02:04:25,000
你是在写代码

3366
02:04:25,000 --> 02:04:26,000
对

3367
02:04:26,000 --> 02:04:27,000
设了好多遍

3368
02:04:27,000 --> 02:04:28,000
你首先

3369
02:04:28,000 --> 02:04:31,000
一个新的字体要设多少个变量

3370
02:04:31,000 --> 02:04:32,000
你得想

3371
02:04:32,000 --> 02:04:33,000
对吧

3372
02:04:33,000 --> 02:04:35,000
然后参数都要复制

3373
02:04:35,000 --> 02:04:37,000
然后怎么动起来

3374
02:04:37,000 --> 02:04:38,000
怎么加成线

3375
02:04:38,000 --> 02:04:40,000
这个对于一个普通的设计师来讲

3376
02:04:40,000 --> 02:04:41,000
太不直观了

3377
02:04:41,000 --> 02:04:42,000
对

3378
02:04:42,000 --> 02:04:43,000
原来是这样

3379
02:04:44,000 --> 02:04:46,000
所以其实现在也没有人

3380
02:04:46,000 --> 02:04:49,000
在用 Metal Phone 做字

3381
02:04:49,000 --> 02:04:51,000
然后当时我记得我用的时候

3382
02:04:52,000 --> 02:04:54,000
其实已经是过了那个时间段

3383
02:04:54,000 --> 02:04:55,000
就我用的

3384
02:04:55,000 --> 02:04:56,000
那个时候还有两个并行的系统

3385
02:04:56,000 --> 02:04:58,000
就是 Tech 系统

3386
02:04:58,000 --> 02:05:00,000
要去引用一个系统字体

3387
02:05:00,000 --> 02:05:02,000
是非常困难的

3388
02:05:02,000 --> 02:05:04,000
当时还要转换格式

3389
02:05:04,000 --> 02:05:05,000
要转换成一个 Tech 能够

3390
02:05:05,000 --> 02:05:07,000
不是说你丢一个 TTF

3391
02:05:07,000 --> 02:05:08,000
或者是 OpenType 给它

3392
02:05:08,000 --> 02:05:10,000
它就能用了

3393
02:05:10,000 --> 02:05:12,000
但是越到后来像什么

3394
02:05:12,000 --> 02:05:14,000
ZTech

3395
02:05:14,000 --> 02:05:15,000
是不是 ZTech 出来之后

3396
02:05:15,000 --> 02:05:16,000
它是可以直接调用系统字体

3397
02:05:16,000 --> 02:05:17,000
因为它是 Mac 上面的

3398
02:05:17,000 --> 02:05:18,000
Mac 上面

3399
02:05:18,000 --> 02:05:20,000
它本来就是把 OpenType 那套

3400
02:05:20,000 --> 02:05:22,000
做成一个系统级别的 API

3401
02:05:22,000 --> 02:05:25,000
可以暴露给上面的应用程序

3402
02:05:25,000 --> 02:05:26,000
所以它并没有像

3403
02:05:26,000 --> 02:05:27,000
最原始的 Tech 那种

3404
02:05:27,000 --> 02:05:28,000
你还得自己

3405
02:05:28,000 --> 02:05:31,000
用自己的什么 Metal Phone 那种格式

3406
02:05:31,000 --> 02:05:32,000
去描述一个字体

3407
02:05:32,000 --> 02:05:33,000
当时还有好多这种

3408
02:05:33,000 --> 02:05:34,000
就是所谓的中间格式

3409
02:05:34,000 --> 02:05:35,000
什么 Phone 1

3410
02:05:35,000 --> 02:05:37,000
那些中间还要转很多遍

3411
02:05:37,000 --> 02:05:39,000
后来都是可以直接

3412
02:05:39,000 --> 02:05:40,000
就调用系统里面存在的

3413
02:05:40,000 --> 02:05:42,000
OpenType 或者 TrueType 字体就可以了

3414
02:05:42,000 --> 02:05:45,000
也就不用再考虑什么 Metal Phone

3415
02:05:45,000 --> 02:05:47,000
包括甚至这个 Computer Model

3416
02:05:47,000 --> 02:05:49,000
后来也有人转成 TrueType

3417
02:05:49,000 --> 02:05:50,000
还是 OpenType 的格式

3418
02:05:50,000 --> 02:05:51,000
放在那个库里面

3419
02:05:51,000 --> 02:05:53,000
就供直接使用

3420
02:05:53,000 --> 02:05:55,000
而且这很重要一点

3421
02:05:55,000 --> 02:05:56,000
就是说大家感觉

3422
02:05:56,000 --> 02:05:57,000
这样字体就是它的一个造型

3423
02:05:57,000 --> 02:05:58,000
这个造型轮廓而已

3424
02:05:58,000 --> 02:05:59,000
其实更重要的

3425
02:05:59,000 --> 02:06:00,000
对于排版来讲

3426
02:06:00,000 --> 02:06:02,000
是很多里面的 Metrics

3427
02:06:02,000 --> 02:06:04,000
就是它的那个度量信息

3428
02:06:04,000 --> 02:06:06,000
里面记录了

3429
02:06:06,000 --> 02:06:08,000
比如说这个基线是在什么位置

3430
02:06:08,000 --> 02:06:11,000
然后这个字的降步是有多高

3431
02:06:11,000 --> 02:06:12,000
升步有多高

3432
02:06:12,000 --> 02:06:14,000
这些东西都必须要让

3433
02:06:14,000 --> 02:06:15,000
排版引擎进行读取

3434
02:06:15,000 --> 02:06:17,000
它才能调

3435
02:06:17,000 --> 02:06:18,000
要不然它找

3436
02:06:18,000 --> 02:06:19,000
它不认得这个字的话

3437
02:06:19,000 --> 02:06:20,000
它没办法调

3438
02:06:20,000 --> 02:06:21,000
你上下标

3439
02:06:21,000 --> 02:06:23,000
你要给它挪多少位置之类的

3440
02:06:23,000 --> 02:06:24,000
基线要提高多少

3441
02:06:24,000 --> 02:06:26,000
这些东西都必须要

3442
02:06:26,000 --> 02:06:28,000
字体里面先要有这个信息

3443
02:06:28,000 --> 02:06:30,000
然后要让排版引擎知道

3444
02:06:31,000 --> 02:06:33,000
大家知道 Tag 原来和 OpenType

3445
02:06:33,000 --> 02:06:36,000
它原来根本就不是一个体系的东西

3446
02:06:36,000 --> 02:06:37,000
所以它们两个人

3447
02:06:37,000 --> 02:06:38,000
就鸡头鸭脚

3448
02:06:38,000 --> 02:06:39,000
两个东西之间

3449
02:06:39,000 --> 02:06:40,000
对

3450
02:06:40,000 --> 02:06:43,000
要让他们互相交流这个信息

3451
02:06:43,000 --> 02:06:44,000
然后让它互相知道这个事情

3452
02:06:44,000 --> 02:06:46,000
本身就是一个很难的

3453
02:06:46,000 --> 02:06:47,000
对

3454
02:06:47,000 --> 02:06:48,000
原来的话

3455
02:06:49,000 --> 02:06:51,000
高德纳他因为 Metafone 是他自己做的

3456
02:06:51,000 --> 02:06:55,000
他所有他自己新定义了一套 Metrics

3457
02:06:56,000 --> 02:06:58,000
然后让 Tag 能调用

3458
02:06:58,000 --> 02:07:00,000
他自己做东西就他自己好调用

3459
02:07:00,000 --> 02:07:01,000
这个就正如

3460
02:07:02,000 --> 02:07:04,000
Adubi 他自己 OpenType

3461
02:07:04,000 --> 02:07:06,000
他的 Spec 就是 Adubi 他自己开发的

3462
02:07:07,000 --> 02:07:10,000
然后 InDesign 又是他自己的软件

3463
02:07:10,000 --> 02:07:12,000
所以他自己的软件调 OpenType 特性

3464
02:07:12,000 --> 02:07:13,000
就调得特别好

3465
02:07:13,000 --> 02:07:15,000
所以你在方针的软件里面

3466
02:07:15,000 --> 02:07:16,000
排版引擎里面

3467
02:07:16,000 --> 02:07:19,000
你要用 Adubi 的 OpenType 特性

3468
02:07:19,000 --> 02:07:20,000
就特别难受

3469
02:07:20,000 --> 02:07:21,000
就调不出来

3470
02:07:21,000 --> 02:07:24,000
因为他们不是一个系统的东西

3471
02:07:24,000 --> 02:07:26,000
这些国产的这些系统软件

3472
02:07:26,000 --> 02:07:30,000
他难道还要求用国产的字体格式才行吗

3473
02:07:30,000 --> 02:07:31,000
他怎么解决这个问题呢

3474
02:07:32,000 --> 02:07:33,000
在很久以前

3475
02:07:34,000 --> 02:07:36,000
在方针软件外必须要用方针的字体

3476
02:07:37,000 --> 02:07:38,000
以前是不认的

3477
02:07:38,000 --> 02:07:40,000
方针自己有一个字体格式的

3478
02:07:40,000 --> 02:07:41,000
对没错

3479
02:07:41,000 --> 02:07:42,000
是的

3480
02:07:42,000 --> 02:07:45,000
后来也是终于可以用 TDF 了

3481
02:07:45,000 --> 02:07:47,000
也能用 OpenType

3482
02:07:47,000 --> 02:07:48,000
这也是很后面的事情

3483
02:07:48,000 --> 02:07:51,000
现在业界不都统一到

3484
02:07:52,000 --> 02:07:54,000
TrueType 和 OpenType 这两个格式了

3485
02:07:54,000 --> 02:07:57,000
现在所有的现代排版软件都得支持

3486
02:07:59,000 --> 02:07:59,000
对

3487
02:08:00,000 --> 02:08:01,000
但是你也知道

3488
02:08:01,000 --> 02:08:05,000
OpenType 有时候微软和 Adubi 做的

3489
02:08:07,000 --> 02:08:09,000
这跟 WPS 之类的差不多

3490
02:08:09,000 --> 02:08:09,000
其实

3491
02:08:10,000 --> 02:08:12,000
支持程度也可以不一样

3492
02:08:12,000 --> 02:08:13,000
因为你想一个字体里面

3493
02:08:13,000 --> 02:08:15,000
现在的 OpenType 字体

3494
02:08:15,000 --> 02:08:16,000
他的特性非常复杂

3495
02:08:16,000 --> 02:08:19,000
他有很多指导你怎样去排版的特性

3496
02:08:19,000 --> 02:08:21,000
而最早的一个 TrueType 的字体

3497
02:08:21,000 --> 02:08:23,000
它其实指核心的功能

3498
02:08:23,000 --> 02:08:25,000
就是描述一个具体的 Glyph

3499
02:08:25,000 --> 02:08:26,000
它的轮廓是什么样的

3500
02:08:27,000 --> 02:08:27,000
比较简单吗

3501
02:08:27,000 --> 02:08:30,000
方针其实它以前就是通过排版引擎

3502
02:08:30,000 --> 02:08:32,000
来实现很多排版特性

3503
02:08:32,000 --> 02:08:36,000
但是现在可能业界更希望大家能够遵循 OpenType

3504
02:08:36,000 --> 02:08:39,000
这个字体里面已经写入的一些排版特性

3505
02:08:39,000 --> 02:08:41,000
来实现一些排版

3506
02:08:42,000 --> 02:08:44,000
就是这个权利到底是在排版师那里

3507
02:08:44,000 --> 02:08:46,000
还是在字体设计师那里的问题吗

3508
02:08:46,000 --> 02:08:48,000
在哪个层级你要说好

3509
02:08:48,000 --> 02:08:50,000
然后你互相能调用就可以

3510
02:08:51,000 --> 02:08:54,000
像 Teche 和 MetalFound 都是同一个人做的

3511
02:08:54,000 --> 02:08:55,000
所以他自己想清楚

3512
02:08:55,000 --> 02:08:57,000
他自己做互相调用就很顺

3513
02:08:58,000 --> 02:09:00,000
你到另外一个系统去集统压展

3514
02:09:00,000 --> 02:09:01,000
这个搞不清楚

3515
02:09:02,000 --> 02:09:02,000
是

3516
02:09:02,000 --> 02:09:07,000
因为毕竟互相都不能直接干预对方的成果

3517
02:09:07,000 --> 02:09:08,000
他字体设计师也不能说

3518
02:09:08,000 --> 02:09:10,000
我这个字体只能用在哪些地域

3519
02:09:10,000 --> 02:09:11,000
他也不知道你用场景是什么

3520
02:09:11,000 --> 02:09:14,000
只能给到你一些通用的建议

3521
02:09:14,000 --> 02:09:16,000
然后排版师那边

3522
02:09:16,000 --> 02:09:17,000
这就是 Hint

3523
02:09:17,000 --> 02:09:19,000
然后排版师那边也只能说

3524
02:09:19,000 --> 02:09:24,000
我根据我现在手上这个作品的特殊的情况

3525
02:09:24,000 --> 02:09:26,000
选择要不要启用你的 Hint

3526
02:09:26,000 --> 02:09:29,000
还是说我自己定一个规则

3527
02:09:29,000 --> 02:09:30,000
说了算算算了

3528
02:09:30,000 --> 02:09:32,000
因为有些特殊情况就要特殊处理的

3529
02:09:33,000 --> 02:09:33,000
搞个很简单的

3530
02:09:33,000 --> 02:09:36,000
就是网页排版连一个航高都算不清楚

3531
02:09:36,000 --> 02:09:37,000
就是这一点

3532
02:09:37,000 --> 02:09:39,000
不同系统的

3533
02:09:39,000 --> 02:09:42,000
他读取的 OpenType 特性里面字段

3534
02:09:42,000 --> 02:09:45,000
航高的数据字段是不一样的

3535
02:09:45,000 --> 02:09:48,000
每个浏览器读出来的数值都不一样

3536
02:09:48,000 --> 02:09:50,000
他算出来的位置都不一样

3537
02:09:50,000 --> 02:09:51,000
他渲染出来的东西都不一样

3538
02:09:53,000 --> 02:09:55,000
所以这一套有什么国标之类的吗

3539
02:09:55,000 --> 02:09:57,000
还是只有行业标准

3540
02:09:57,000 --> 02:09:59,000
大家各自想办法解决

3541
02:09:59,000 --> 02:10:01,000
典型的 OpenType 就是一个商业标准

3542
02:10:01,000 --> 02:10:03,000
这行业巨头首先提出来的

3543
02:10:03,000 --> 02:10:05,000
因为是大厂商做的

3544
02:10:05,000 --> 02:10:07,000
所以大家自然而然的也就都跟进

3545
02:10:08,000 --> 02:10:09,000
从这个侧面来讲的话

3546
02:10:09,000 --> 02:10:11,000
高德纳是一个人挑

3547
02:10:12,000 --> 02:10:14,000
单枪匹马做一套系统

3548
02:10:14,000 --> 02:10:16,000
然后我们在这边拿来和整个业界

3549
02:10:16,000 --> 02:10:18,000
做出来的一套系统相比

3550
02:10:18,000 --> 02:10:20,000
这是大宗师的风范

3551
02:10:20,000 --> 02:10:20,000
对

3552
02:10:20,000 --> 02:10:21,000
不是错了

3553
02:10:21,000 --> 02:10:24,000
是大宗师做的时候业界这个事情还不存在

3554
02:10:24,000 --> 02:10:25,000
没有这个业好吗

3555
02:10:25,000 --> 02:10:26,000
业界还不存在

3556
02:10:27,000 --> 02:10:28,000
没有这个行业

3557
02:10:29,000 --> 02:10:31,000
40 多年级 70 年代的事情

3558
02:10:32,000 --> 02:10:34,000
所以那时候桌面排版是什么

3559
02:10:34,000 --> 02:10:35,000
那时候还没有 Mac

3560
02:10:35,000 --> 02:10:37,000
那个时候 PC 都没有还桌面排版

3561
02:10:38,000 --> 02:10:41,000
所以从这个意义上讲

3562
02:10:41,000 --> 02:10:42,000
它真的是一个传奇

3563
02:10:42,000 --> 02:10:44,000
就是一个人开创了一个领域

3564
02:10:44,000 --> 02:10:45,000
但是

3565
02:10:45,000 --> 02:10:48,000
而且这个领域的这个成果到现在还是被

3566
02:10:48,000 --> 02:10:50,000
被一些比较

3567
02:10:50,000 --> 02:10:54,000
像他一样比较喜欢走极端的人所使用的

3568
02:10:54,000 --> 02:10:58,000
而其他的熟民或者说没有那么

3569
02:10:58,000 --> 02:11:00,000
Geek 的人们就在使用着另一套

3570
02:11:00,000 --> 02:11:02,000
可能更 User-friendly 的系统

3571
02:11:03,000 --> 02:11:05,000
而他们最终的结果几乎是

3572
02:11:06,000 --> 02:11:06,000
不分伯种的

3573
02:11:07,000 --> 02:11:08,000
我不知道你们

3574
02:11:08,000 --> 02:11:09,000
但是有时候我会觉得

3575
02:11:09,000 --> 02:11:12,000
太和排出来东西太有风格性了

3576
02:11:13,000 --> 02:11:14,000
你一看就知道这是太和写的

3577
02:11:15,000 --> 02:11:18,000
但是反过来一个用 word 或者是

3578
02:11:18,000 --> 02:11:19,000
word 也很有风格

3579
02:11:19,000 --> 02:11:21,000
一看就看出来了

3580
02:11:21,000 --> 02:11:22,000
一看就用一数字

3581
02:11:22,000 --> 02:11:24,000
用 indesign 排出来东西

3582
02:11:24,000 --> 02:11:27,000
你就会不太知道说这个东西到底是怎么来的

3583
02:11:28,000 --> 02:11:31,000
有时候太风格化可能也不是一件特别好的事情

3584
02:11:31,000 --> 02:11:32,000
这也是程度的问题

3585
02:11:33,000 --> 02:11:34,000
它有点千篇一律

3586
02:11:34,000 --> 02:11:38,000
很多人他不会配置那些太很多个性化的参数

3587
02:11:38,000 --> 02:11:40,000
因为调个性化要牵涉到很多这种参数的变动

3588
02:11:40,000 --> 02:11:42,000
其实有时候不一定能得到好的结果

3589
02:11:42,000 --> 02:11:43,000
对还是那句话

3590
02:11:43,000 --> 02:11:45,000
You have to know everything to do anything

3591
02:11:46,000 --> 02:11:46,000
还是蛮难的

3592
02:11:46,000 --> 02:11:46,000
对

3593
02:11:47,000 --> 02:11:48,000
哪怕是最简单的

3594
02:11:48,000 --> 02:11:49,000
你就换一个字体

3595
02:11:49,000 --> 02:11:54,000
比如说你就看不惯 Computer Modern 这种圆滚滚的这种长相的字体

3596
02:11:54,000 --> 02:11:56,000
当时我就有这个问题

3597
02:11:56,000 --> 02:11:58,000
我说我换成 Palatino 对吧

3598
02:11:58,000 --> 02:11:59,000
我用的是 Palatino

3599
02:11:59,000 --> 02:12:00,000
对

3600
02:12:00,000 --> 02:12:02,000
但是你一旦你用 Palatino

3601
02:12:02,000 --> 02:12:04,000
你就要考虑你的公式的问题了

3602
02:12:04,000 --> 02:12:11,000
因为公式的它当时很多 Palatino 的希腊字母罗马字母

3603
02:12:11,000 --> 02:12:12,000
它是不齐全的

3604
02:12:12,000 --> 02:12:13,000
或者你必须要用代替字体

3605
02:12:13,000 --> 02:12:15,000
你就发现公式的特别难看

3606
02:12:15,000 --> 02:12:15,000
这是其一

3607
02:12:15,000 --> 02:12:18,000
第二个就是说数学排版特别是公式排版的

3608
02:12:18,000 --> 02:12:21,000
但那件具那些就是那些 Metrics

3609
02:12:21,000 --> 02:12:23,000
那些数值标注

3610
02:12:23,000 --> 02:12:25,000
它是根据那个字体来定制的

3611
02:12:25,000 --> 02:12:26,000
然后你换一套字体

3612
02:12:26,000 --> 02:12:28,000
它写在字体里头了

3613
02:12:28,000 --> 02:12:29,000
但你就换到字体

3614
02:12:29,000 --> 02:12:30,000
你就发现那个就是更难看

3615
02:12:30,000 --> 02:12:31,000
就没有了

3616
02:12:31,000 --> 02:12:32,000
就很麻烦

3617
02:12:32,000 --> 02:12:34,000
所以到时大家就最偷懒的方法

3618
02:12:34,000 --> 02:12:35,000
就是直接用啥也不改

3619
02:12:35,000 --> 02:12:36,000
直接写

3620
02:12:36,000 --> 02:12:36,000
对吧

3621
02:12:36,000 --> 02:12:37,000
写内容就好了

3622
02:12:37,000 --> 02:12:38,000
不要管它长啥

3623
02:12:38,000 --> 02:12:38,000
还是这个问题

3624
02:12:38,000 --> 02:12:40,000
而且不要去定制它的长相

3625
02:12:40,000 --> 02:12:43,000
所以用太和做出来的东西都是一样的了

3626
02:12:43,000 --> 02:12:43,000
大家都知道

3627
02:12:43,000 --> 02:12:45,000
这一看就知道这是太和写的

3628
02:12:49,000 --> 02:12:50,000
也是一个传奇

3629
02:12:50,000 --> 02:12:52,000
机身单和单身机

3630
02:12:52,000 --> 02:12:53,000
但我不知道

3631
02:12:53,000 --> 02:12:55,000
如果说以后的那种论文

3632
02:12:55,000 --> 02:12:58,000
如果不需要考虑是一个页的形式存在

3633
02:12:58,000 --> 02:12:59,000
它可以是一个 Scroll

3634
02:12:59,000 --> 02:13:02,000
一个长卷轴的形式出现

3635
02:13:02,000 --> 02:13:05,000
其实很多排版的难题可以降很多维度

3636
02:13:05,000 --> 02:13:05,000
对

3637
02:13:05,000 --> 02:13:09,000
你的意思是把排版的难题转嫁到浏览器上

3638
02:13:10,000 --> 02:13:12,000
浏览器的引擎实际上就是一个排版引擎

3639
02:13:13,000 --> 02:13:14,000
就不需要静态排版的

3640
02:13:14,000 --> 02:13:15,000
然后

3641
02:13:15,000 --> 02:13:16,000
不是

3642
02:13:16,000 --> 02:13:17,000
动态排版就是一坨屎

3643
02:13:17,000 --> 02:13:19,000
现在你看 CSS 排版

3644
02:13:19,000 --> 02:13:20,000
现在能力那么差

3645
02:13:20,000 --> 02:13:21,000
就在这一点

3646
02:13:21,000 --> 02:13:22,000
太难了

3647
02:13:22,000 --> 02:13:23,000
这真的太难了

3648
02:13:23,000 --> 02:13:24,000
没有需求

3649
02:13:24,000 --> 02:13:25,000
就是这个问题

3650
02:13:25,000 --> 02:13:26,000
浏览器厂商

3651
02:13:26,000 --> 02:13:28,000
天天要考虑各种安全问题

3652
02:13:29,000 --> 02:13:31,000
还要给你搞这种非常坑爹的排版

3653
02:13:31,000 --> 02:13:32,000
怎么气死

3654
02:13:32,000 --> 02:13:34,000
你在 Web 排版

3655
02:13:34,000 --> 02:13:36,000
你连对方用什么字体都不知道了

3656
02:13:36,000 --> 02:13:37,000
你得猜

3657
02:13:37,000 --> 02:13:38,000
现在不用了

3658
02:13:38,000 --> 02:13:39,000
现在有 WebFont

3659
02:13:39,000 --> 02:13:40,000
可以指定了

3660
02:13:40,000 --> 02:13:44,000
但只是说最终体积的问题还是不太好说

3661
02:13:44,000 --> 02:13:45,000
对

3662
02:13:47,000 --> 02:13:49,000
不过我们自弹机上也花了两期时间

3663
02:13:49,000 --> 02:13:51,000
就讲 Web 排版的事情

3664
02:13:51,000 --> 02:13:52,000
大家可以回去听

3665
02:13:53,000 --> 02:13:54,000
这次他没有说是哪一期

3666
02:13:54,000 --> 02:13:56,000
我已经很欣慰了

3667
02:13:57,000 --> 02:13:58,000
你一定要逼我说吗

3668
02:13:59,000 --> 02:14:00,000
偶尔我也能一息想起来

3669
02:14:00,000 --> 02:14:02,000
那和孔芳聊过什么

3670
02:14:02,000 --> 02:14:04,000
因为刚好就是前两期

3671
02:14:04,000 --> 02:14:04,000
不远

3672
02:14:06,000 --> 02:14:06,000
OK

3673
02:14:06,000 --> 02:14:08,000
今天也聊了好久

3674
02:14:08,000 --> 02:14:09,000
差不多了

3675
02:14:09,000 --> 02:14:11,000
我们说了这么多好难解了

3676
02:14:12,000 --> 02:14:13,000
是不是要收尾了

3677
02:14:13,000 --> 02:14:13,000
同学们

3678
02:14:13,000 --> 02:14:14,000
好

3679
02:14:14,000 --> 02:14:14,000
来

3680
02:14:14,000 --> 02:14:15,000
Auto

3681
02:14:16,000 --> 02:14:16,000
好

3682
02:14:16,000 --> 02:14:18,000
我们今天的节目就

3683
02:14:19,000 --> 02:14:20,000
暂时告一段落

3684
02:14:21,000 --> 02:14:22,000
我们今天也是

3685
02:14:22,000 --> 02:14:24,000
我们现在在这里提一下这事情

3686
02:14:24,000 --> 02:14:27,000
我们今天也是首次尝试在 Clubhouse 上面

3687
02:14:27,000 --> 02:14:29,000
同步我们直播的

3688
02:14:30,000 --> 02:14:31,000
同步我们录播的内容

3689
02:14:31,000 --> 02:14:33,000
然后一个直播的形式

3690
02:14:33,000 --> 02:14:33,000
我们的

3691
02:14:34,000 --> 02:14:35,000
我们这房间还剩下多少人现在

3692
02:14:36,000 --> 02:14:38,000
还剩下三十多个人

3693
02:14:38,000 --> 02:14:40,000
我们死忠粉丝

3694
02:14:40,000 --> 02:14:44,000
也非常感谢大家一起跟我们完成了这期节目的录制

3695
02:14:45,000 --> 02:14:46,000
自弹自唱

3696
02:14:46,000 --> 02:14:49,000
听众如果想跟我们交流或者反馈

3697
02:14:49,000 --> 02:14:50,000
都可以写邮件告诉我们

3698
02:14:50,000 --> 02:14:53,000
我们的邮箱地址是 podcastatthe 12.com

3699
02:14:53,000 --> 02:14:57,000
podcastatthe 12.com

3700
02:14:57,000 --> 02:14:59,000
同时大家也可以在新浪微博

3701
02:14:59,000 --> 02:15:00,000
在推特

3702
02:15:00,000 --> 02:15:01,000
以及在微信上面

3703
02:15:01,000 --> 02:15:03,000
通过搜索 TheType

3704
02:15:03,000 --> 02:15:05,000
theType

3705
02:15:05,000 --> 02:15:06,000
这个账号关注到我们

3706
02:15:06,000 --> 02:15:08,000
在 Facebook 上搜索 TheType

3707
02:15:08,000 --> 02:15:10,000
或者搜索 Typeisbeautiful

3708
02:15:10,000 --> 02:15:11,000
也都可以找到我们

3709
02:15:12,000 --> 02:15:15,000
您刚刚收听到的节目是内核恐慌一档

3710
02:15:15,000 --> 02:15:18,000
尽量贴近计算机主题的娱乐 Podcast

3711
02:15:18,000 --> 02:15:19,000
我们号称应活

3712
02:15:19,000 --> 02:15:20,000
但是也没有什么干货

3713
02:15:20,000 --> 02:15:21,000
想听人听不想听人就别听

3714
02:15:22,000 --> 02:15:24,000
我们的网址是 pan.icu

3715
02:15:24,000 --> 02:15:25,000
您可以在网上找到

3716
02:15:25,000 --> 02:15:26,000
订阅我们节目的方法

3717
02:15:26,000 --> 02:15:27,000
以及联络我们的方式

3718
02:15:27,000 --> 02:15:30,000
如果您期待我们更频繁的更新节目

3719
02:15:30,000 --> 02:15:31,000
欢迎您到爱发店我们捐款

3720
02:15:31,000 --> 02:15:33,000
相亲可以在我们的网站上找到

3721
02:15:33,000 --> 02:15:34,000
鲜花链后催更

3722
02:15:34,000 --> 02:15:36,000
文明催更从你做起

3723
02:15:36,000 --> 02:15:37,000
如果您觉得意拥为尽

3724
02:15:37,000 --> 02:15:39,000
也欢迎您去收听

3725
02:15:39,000 --> 02:15:41,000
Rail 和黄海主持的节目风头圈

3726
02:15:41,000 --> 02:15:43,000
Rail 和任宁主持的节目提前怀旧

3727
02:15:43,000 --> 02:15:46,000
以及基本不由吴涛主持的自坦自传

3728
02:15:48,000 --> 02:15:49,000
感谢大家收听

3729
02:15:49,000 --> 02:15:50,000
本期节目是由 Eric

3730
02:15:50,000 --> 02:15:52,000
在 BigSore 上剪辑制作完成的

3731
02:15:52,000 --> 02:15:54,000
我们下期节目再见

3732
02:15:54,000 --> 02:15:54,000
拜拜

3733
02:15:54,000 --> 02:15:55,000
拜拜

3734
02:15:55,000 --> 02:15:56,000
哇你还会说这个

3735
02:15:57,000 --> 02:15:58,000
这是 Meta 信息啊

3736
02:15:58,000 --> 02:16:00,000
就是我很注重 Meta 的知道吗

3737
02:16:01,000 --> 02:16:03,000
就像我们会看不是有封面吗

3738
02:16:03,000 --> 02:16:05,000
那照片是谁在几月几号

3739
02:16:05,000 --> 02:16:06,000
在什么地方拍的吗

3740
02:16:06,000 --> 02:16:08,000
有时候我把那个拍照设备也写进去

3741
02:16:08,000 --> 02:16:11,000
然后我们的编辑就说有必要写吗

