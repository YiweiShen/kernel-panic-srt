1
00:00:00,000 --> 00:00:04,000
感觉今天这个话题有点太大

2
00:00:04,000 --> 00:00:08,000
不知道能不能在一两个小时内讲得清楚

3
00:00:08,000 --> 00:00:13,000
对 而且我觉得有可能以我们两个的能力 handle 不了

4
00:00:13,000 --> 00:00:19,000
对 我们两个其实也不是在这个话题上面非常有经验的两个人

5
00:00:19,000 --> 00:00:23,000
关键是我觉得首先我们两个都是一个 Win 的中度用户

6
00:00:23,000 --> 00:00:27,000
这个在本来就是在什么起点上就是有偏见的

7
00:00:28,000 --> 00:00:30,000
对 所以我们算是一个

8
00:00:32,000 --> 00:00:34,000
别人叫什么 Inform 的 Opinion

9
00:00:34,000 --> 00:00:37,000
我们这边是 Opinion 的 Information

10
00:00:37,000 --> 00:00:47,000
对 所以如果你不是 Win 留户或者你听到觉得有些不赞同的观点

11
00:00:47,000 --> 00:00:48,000
请记住这一点

12
00:00:48,000 --> 00:00:54,000
我们这是两个具有偏见的人在聊一件非常个性化的东西

13
00:00:54,000 --> 00:00:57,000
对 我们虚心接受我坚决不改

14
00:00:59,000 --> 00:01:02,000
其实我们还是说下来在聊什么

15
00:01:02,000 --> 00:01:07,000
对 其实我们这一期的主题是编辑器或者说 IDE

16
00:01:09,000 --> 00:01:10,000
邪来马来的工具

17
00:01:10,000 --> 00:01:18,000
我们可能会有很多期持续讨论关于开发软件的很多相关的工具

18
00:01:18,000 --> 00:01:20,000
流程相关的话题

19
00:01:22,000 --> 00:01:24,000
也大概算是一个系列

20
00:01:24,000 --> 00:01:31,000
就尽量会聊一些比较贴近开发过程的东西

21
00:01:31,000 --> 00:01:36,000
北美山地时间 2006 年 1 月 2 日下午 3 点 04 分 05 秒

22
00:01:36,000 --> 00:01:40,000
您近来收听到的是 IPN 旗下的 Podcast 广播内核恐慌

23
00:01:40,000 --> 00:01:42,000
所以你学了够了

24
00:01:42,000 --> 00:01:43,000
没错

25
00:01:43,000 --> 00:01:47,000
对 如果刚才你记住了这个 sequence 的话

26
00:01:47,000 --> 00:01:51,000
2006 年 1 月 2 日下午 3 点 04 分 05 秒

27
00:01:52,000 --> 00:01:53,000
你就学会一点点够了

28
00:01:55,000 --> 00:01:57,000
这是我们上一期节目结束的时候

29
00:01:57,000 --> 00:01:59,000
Rail 教给我的一件事情

30
00:01:59,000 --> 00:02:02,000
我觉得这两天仔细想了一下

31
00:02:02,000 --> 00:02:07,000
的确算是一个比较很 pragmatical 的解决方案

32
00:02:07,000 --> 00:02:12,000
但是还是觉得有点奇怪的事

33
00:02:12,000 --> 00:02:15,000
对 我觉得挺奇怪的点是

34
00:02:15,000 --> 00:02:16,000
比如我问你个问题

35
00:02:16,000 --> 00:02:20,000
你要写中文的 12 月这三个字你怎么办

36
00:02:20,000 --> 00:02:23,000
对 就是你要把它 localization 的话

37
00:02:23,000 --> 00:02:26,000
的确可能要考虑 localization 的话

38
00:02:26,000 --> 00:02:29,000
的确可能不是一个非常理想的解决方案

39
00:02:29,000 --> 00:02:34,000
可是反过来你用%h 这种方式好像也不行

40
00:02:34,000 --> 00:02:36,000
对 也是要单独做一下处理

41
00:02:36,000 --> 00:02:39,000
也是要考虑到 local

42
00:02:39,000 --> 00:02:43,000
但是我觉得反正够的这种时间的表达方式的好处就是

43
00:02:43,000 --> 00:02:44,000
上次我也讲了

44
00:02:44,000 --> 00:02:47,000
就不需要查手册这点是挺爽的

45
00:02:47,000 --> 00:02:49,000
我不知道你有没有这么觉得

46
00:02:49,000 --> 00:02:53,000
是没错 因为他的这个安排就刻意把他

47
00:02:53,000 --> 00:02:54,000
所见即所得了

48
00:02:54,000 --> 00:02:56,000
对 而且他的这个 sequence 是

49
00:02:56,000 --> 00:02:58,000
就是当然以美国人的逻辑

50
00:02:58,000 --> 00:03:01,000
我觉得不可理喻的就是 1 月 2 日

51
00:03:01,000 --> 00:03:02,000
就是日在前面

52
00:03:02,000 --> 00:03:04,000
日在后面 月在前面

53
00:03:04,000 --> 00:03:08,000
我在推特上看到我一个漫画说

54
00:03:08,000 --> 00:03:11,000
Logic vs American Logic

55
00:03:11,000 --> 00:03:12,000
然后左边是个金字塔

56
00:03:12,000 --> 00:03:13,000
最上面的是日

57
00:03:13,000 --> 00:03:14,000
然后下面是月

58
00:03:14,000 --> 00:03:16,000
最下面是年

59
00:03:16,000 --> 00:03:17,000
就是从小到大的

60
00:03:17,000 --> 00:03:18,000
对 是一个倒三角

61
00:03:18,000 --> 00:03:21,000
然后 American Logic 那边写的是月

62
00:03:21,000 --> 00:03:22,000
然后日

63
00:03:22,000 --> 00:03:22,000
年

64
00:03:22,000 --> 00:03:24,000
然后上面是个倒三角

65
00:03:24,000 --> 00:03:25,000
下面是一个 T 形

66
00:03:25,000 --> 00:03:28,000
就嘲笑美国人的这个逻辑

67
00:03:29,000 --> 00:03:31,000
不过我觉得其实可以加一个

68
00:03:31,000 --> 00:03:33,000
就是如果你把中国人的逻辑考虑进去的话

69
00:03:33,000 --> 00:03:34,000
那中国人其实更合理

70
00:03:34,000 --> 00:03:36,000
中国人是从上到下

71
00:03:36,000 --> 00:03:38,000
从大到小是一个倒金字塔

72
00:03:38,000 --> 00:03:39,000
年月日

73
00:03:39,000 --> 00:03:41,000
然后小时分秒

74
00:03:41,000 --> 00:03:44,000
但是在所谓 normal logic

75
00:03:44,000 --> 00:03:47,000
或者说西方 logic 这边

76
00:03:47,000 --> 00:03:48,000
从小到大吗

77
00:03:48,000 --> 00:03:49,000
先从小到大

78
00:03:49,000 --> 00:03:49,000
然后

79
00:03:49,000 --> 00:03:50,000
先从小到大

80
00:03:50,000 --> 00:03:52,000
然后再从大到小

81
00:03:53,000 --> 00:03:54,000
对 反正我觉得只要

82
00:03:54,000 --> 00:03:55,000
不管你是从小到大

83
00:03:55,000 --> 00:03:57,000
就是跟那个 bite order 一样

84
00:03:57,000 --> 00:03:58,000
不管你从小到大

85
00:03:58,000 --> 00:03:58,000
从小到大

86
00:03:58,000 --> 00:04:01,000
你只要遵从一个统一的规则就好了

87
00:04:01,000 --> 00:04:03,000
然后美国人这一套

88
00:04:05,000 --> 00:04:07,000
实在是太奇怪了

89
00:04:07,000 --> 00:04:08,000
没错

90
00:04:10,000 --> 00:04:11,000
对 回到我们今天的

91
00:04:12,000 --> 00:04:14,000
Hollywood 的主题上面

92
00:04:14,000 --> 00:04:15,000
就是我们觉得

93
00:04:15,000 --> 00:04:18,000
可能谈编辑器总会

94
00:04:19,000 --> 00:04:21,000
不可避免的谈到这个

95
00:04:21,000 --> 00:04:22,000
成全界的

96
00:04:23,000 --> 00:04:24,000
若干大胜战之一

97
00:04:25,000 --> 00:04:28,000
也就是 Vim 和 Emax 之争

98
00:04:30,000 --> 00:04:33,000
我们其实也无意调起什么 flame war

99
00:04:33,000 --> 00:04:34,000
但是

100
00:04:35,000 --> 00:04:37,000
但是也有可能这是一个不可避免的事情

101
00:04:37,000 --> 00:04:39,000
对

102
00:04:40,000 --> 00:04:42,000
其实为什么成全界

103
00:04:42,000 --> 00:04:44,000
有这么多的 Hollywood

104
00:04:44,000 --> 00:04:47,000
我刚才前两天也不小心在知乎上挑起了

105
00:04:48,000 --> 00:04:50,000
半场小半场 Hollywood

106
00:04:51,000 --> 00:04:54,000
我在那边 bitching PHP 是一款多烂的语言

107
00:04:54,000 --> 00:04:55,000
然后在下面说

108
00:04:56,000 --> 00:04:57,000
有人说

109
00:04:57,000 --> 00:04:58,000
那它为什么还这么流行呢

110
00:04:59,000 --> 00:05:01,000
我说烂的

111
00:05:02,000 --> 00:05:04,000
一个东西流行并不意味着它不烂

112
00:05:04,000 --> 00:05:07,000
你看 Windows 不也是最流行的操作系统

113
00:05:07,000 --> 00:05:08,000
然后这句话就

114
00:05:09,000 --> 00:05:10,000
有可能

115
00:05:10,000 --> 00:05:16,000
触到某些 flame war 的征战之点了

116
00:05:16,000 --> 00:05:17,000
然后有人说

117
00:05:20,000 --> 00:05:22,000
你说什么 Windows 不是最好操作系统

118
00:05:22,000 --> 00:05:23,000
这句话就暴露你的水平

119
00:05:24,000 --> 00:05:24,000
好吧

120
00:05:26,000 --> 00:05:26,000
so bid

121
00:05:30,000 --> 00:05:31,000
先回答那个问题

122
00:05:31,000 --> 00:05:34,000
为什么会有这么多这种所谓胜仗

123
00:05:34,000 --> 00:05:37,000
或者说为什么程式员特别喜欢吵架

124
00:05:37,000 --> 00:05:40,000
我觉得可能就是什么死理心派

125
00:05:42,000 --> 00:05:44,000
一定要分出一个对错

126
00:05:44,000 --> 00:05:46,000
一定要分出一个高下

127
00:05:47,000 --> 00:05:48,000
是不是有这个原因在里面

128
00:05:49,000 --> 00:05:52,000
可是真正死理心派应该会意识到这种

129
00:05:53,000 --> 00:05:55,000
争吵的无意义之处

130
00:05:55,000 --> 00:05:56,000
但我觉得这不是

131
00:05:56,000 --> 00:05:58,000
其实那就不是死理心派

132
00:05:58,000 --> 00:05:59,000
那就是活理心派

133
00:05:59,000 --> 00:06:04,000
你想想 flame war 这个词可能不是那么特别的

134
00:06:04,000 --> 00:06:04,000
突出这点

135
00:06:04,000 --> 00:06:05,000
但是 Hollywood

136
00:06:05,000 --> 00:06:07,000
你想想这个词 Holly

137
00:06:07,000 --> 00:06:12,000
Holly 只有在对于宗教的

138
00:06:13,000 --> 00:06:14,000
Holly 本身是一个宗教的感觉

139
00:06:14,000 --> 00:06:14,000
对吧

140
00:06:14,000 --> 00:06:21,000
你只有对某种东西产生出了非理性的崇拜

141
00:06:21,000 --> 00:06:24,000
才有可能认为这件事情是 Holly 的

142
00:06:25,000 --> 00:06:26,000
对吧

143
00:06:26,000 --> 00:06:27,000
有道理

144
00:06:27,000 --> 00:06:31,000
如果你真正是一个真正的死理性派

145
00:06:31,000 --> 00:06:35,000
那你应该能够克服情感上的偏见

146
00:06:35,000 --> 00:06:37,000
来就事论事论讨论问题

147
00:06:37,000 --> 00:06:39,000
但实际上我们看到

148
00:06:39,000 --> 00:06:41,000
至少我是不可能做到这一点

149
00:06:43,000 --> 00:06:45,000
就是你不能摒除感情色彩

150
00:06:45,000 --> 00:06:47,000
然后再考虑你的每一个决定的

151
00:06:48,000 --> 00:06:48,000
对

152
00:06:48,000 --> 00:06:51,000
而且我觉得其实很多程序员

153
00:06:52,000 --> 00:06:55,000
是具有这样的一种感情上的偏执的

154
00:06:55,000 --> 00:07:00,000
因为在标榜或者说追求死理性派

155
00:07:00,000 --> 00:07:04,000
这一个身份认同的同时

156
00:07:05,000 --> 00:07:06,000
人们会试图去

157
00:07:06,000 --> 00:07:12,000
或者说有一无一的忽视了感情上面的情商建设

158
00:07:12,000 --> 00:07:12,000
可以这么理解

159
00:07:14,000 --> 00:07:18,000
一旦对方和自己不一样的观点的话

160
00:07:19,000 --> 00:07:21,000
就很容易产生一种情感上的偏执

161
00:07:21,000 --> 00:07:22,000
说你一定是错的

162
00:07:22,000 --> 00:07:23,000
我一定是对的

163
00:07:25,000 --> 00:07:27,000
这个我还没有意识到

164
00:07:27,000 --> 00:07:30,000
我觉得其实是一种宗教情节

165
00:07:30,000 --> 00:07:32,000
就是 Howl 1 这个名字

166
00:07:32,000 --> 00:07:33,000
或者说不是宗教情节

167
00:07:33,000 --> 00:07:35,000
而是一种非理性的情节

168
00:07:36,000 --> 00:07:39,000
恰恰是因为非理性的部分被人忽视了

169
00:07:40,000 --> 00:07:45,000
才会以这种看似理性的方式去打这样的战争

170
00:07:49,000 --> 00:07:51,000
我又有一个猜想

171
00:07:51,000 --> 00:07:53,000
我不知道是不是正确的

172
00:07:53,000 --> 00:07:56,000
这当然跟他是不是理性的

173
00:07:57,000 --> 00:07:58,000
我们可以再讨论

174
00:08:00,000 --> 00:08:02,000
或者说你做一个思想的工作

175
00:08:02,000 --> 00:08:05,000
或者是你做一种什么生产力的工具也好

176
00:08:05,000 --> 00:08:07,000
还是做一个什么编程语言也好

177
00:08:08,000 --> 00:08:10,000
你都是要找到一个群体的

178
00:08:10,000 --> 00:08:10,000
对吧

179
00:08:10,000 --> 00:08:14,000
然后你是需要所谓扩大你的叫做 mind share

180
00:08:14,000 --> 00:08:18,000
就是你有更多的人和你分享同样的观点

181
00:08:18,000 --> 00:08:22,000
或者是跟你有同样的对某一种事情的认知

182
00:08:22,000 --> 00:08:25,000
这样对你来说整体而言是有好处的

183
00:08:25,000 --> 00:08:26,000
举个最简单的例子

184
00:08:27,000 --> 00:08:29,000
比如说你是一个很小众的语言

185
00:08:29,000 --> 00:08:32,000
那么你是很小众语言的铁杆粉丝

186
00:08:32,000 --> 00:08:34,000
你可能很经常会觉得

187
00:08:34,000 --> 00:08:36,000
哎呀这个问题为什么不用这个语言写

188
00:08:37,000 --> 00:08:38,000
这个写专范会很优雅

189
00:08:38,000 --> 00:08:39,000
结果会多好

190
00:08:39,000 --> 00:08:42,000
而且一旦有很多人这么写的话

191
00:08:42,000 --> 00:08:45,000
那我很多 library 就是所谓的酷就已经有现存了

192
00:08:45,000 --> 00:08:47,000
我也不用自己再动手写

193
00:08:47,000 --> 00:08:48,000
我就可以直接拿来用就可以了

194
00:08:49,000 --> 00:08:53,000
那么出于这种比较自立的角度去看的话

195
00:08:53,000 --> 00:08:57,000
你的一个默认的倾向就应该是

196
00:08:57,000 --> 00:08:58,000
就如果你真的是很喜欢这个东西的话

197
00:08:58,000 --> 00:09:02,000
你会把它推荐给你认识的或者不认识的人

198
00:09:02,000 --> 00:09:05,000
然后让他们也能够像你一样

199
00:09:05,000 --> 00:09:07,000
认识到它的好处和优点

200
00:09:07,000 --> 00:09:08,000
从而加入你的行列

201
00:09:08,000 --> 00:09:10,000
从而为这个东西

202
00:09:10,000 --> 00:09:12,000
就所谓扩大这个东西的 mind share

203
00:09:12,000 --> 00:09:15,000
然后这样对于你个体而言

204
00:09:15,000 --> 00:09:17,000
也是非常有利的一个结果

205
00:09:17,000 --> 00:09:19,000
我不知道这样讲

206
00:09:19,000 --> 00:09:21,000
说清楚刚刚我讲那个意思

207
00:09:21,000 --> 00:09:22,000
是我可以理解

208
00:09:22,000 --> 00:09:25,000
就是换一个角度说

209
00:09:25,000 --> 00:09:27,000
每种工具或者说

210
00:09:27,000 --> 00:09:28,000
比如说我们非常推崇的 Wim

211
00:09:28,000 --> 00:09:30,000
就你和我都是 Wim 档

212
00:09:30,000 --> 00:09:34,000
那我们两个会对于这种工具所推崇

213
00:09:34,000 --> 00:09:38,000
或者说这个工具的设计者所使用

214
00:09:38,000 --> 00:09:42,000
在工具之中注入的这么一种使用哲学

215
00:09:42,000 --> 00:09:46,000
或者说使用模式产生一定的意见

216
00:09:46,000 --> 00:09:48,000
然后我们会认为

217
00:09:49,000 --> 00:09:53,000
同样持有这样意见的使用者

218
00:09:53,000 --> 00:09:54,000
是我们的同类

219
00:09:54,000 --> 00:09:57,000
但是在一些其他编辑器里面

220
00:09:57,000 --> 00:10:00,000
可能没有这样的倾向

221
00:10:00,000 --> 00:10:01,000
或者说这样的倾向会比较少

222
00:10:01,000 --> 00:10:03,000
比如说我们很少会

223
00:10:04,000 --> 00:10:05,000
也许这样的地方真的有

224
00:10:05,000 --> 00:10:08,000
但是我们很少会听说有什么

225
00:10:08,000 --> 00:10:12,000
NotePad 用户会组成这么一个兴趣小组

226
00:10:12,000 --> 00:10:15,000
或者是更大众比较

227
00:10:15,000 --> 00:10:16,000
Eclipse

228
00:10:16,000 --> 00:10:18,000
我觉得 Eclipse 好像也是一个

229
00:10:18,000 --> 00:10:20,000
非常路人的这么一个编辑器

230
00:10:20,000 --> 00:10:23,000
很少会有人非常以使用 Eclipse 为

231
00:10:24,000 --> 00:10:27,000
一种身份认同的标志

232
00:10:27,000 --> 00:10:28,000
有可能是因为它太普遍了

233
00:10:28,000 --> 00:10:30,000
有可能是因为它太平庸了

234
00:10:31,000 --> 00:10:35,000
但对于任何一种稍微具有一些

235
00:10:35,000 --> 00:10:37,000
就像我说的这种使用哲学

236
00:10:37,000 --> 00:10:38,000
在里面的工具来说

237
00:10:39,000 --> 00:10:41,000
这种用户情节是很容易产生的

238
00:10:41,000 --> 00:10:42,000
就像你说的

239
00:10:42,000 --> 00:10:43,000
对

240
00:10:43,000 --> 00:10:45,000
所以反正就是一个什么

241
00:10:45,000 --> 00:10:46,000
身份认同在里面

242
00:10:46,000 --> 00:10:48,000
我觉得我们会找到自己的同类

243
00:10:48,000 --> 00:10:49,000
然后去交流一些

244
00:10:49,000 --> 00:10:50,000
使用体验

245
00:10:50,000 --> 00:10:51,000
心得体会

246
00:10:51,000 --> 00:10:53,000
包括什么各种插件之类的

247
00:10:53,000 --> 00:10:57,000
然后反正我个人会有这种倾向

248
00:10:57,000 --> 00:10:58,000
反正

249
00:10:59,000 --> 00:11:00,000
对

250
00:11:00,000 --> 00:11:01,000
OK

251
00:11:01,000 --> 00:11:03,000
今天我们还是从

252
00:11:04,000 --> 00:11:05,000
也不叫最古老

253
00:11:06,000 --> 00:11:09,000
真吵的最凶的两大编辑器开始入手

254
00:11:09,000 --> 00:11:11,000
最经典的一场战利分析开始

255
00:11:11,000 --> 00:11:11,000
对

256
00:11:13,000 --> 00:11:14,000
先讲的那个是我和

257
00:11:15,000 --> 00:11:16,000
吴涛都很喜欢的 Vim

258
00:11:17,000 --> 00:11:21,000
Vim 其实它不仅仅是一个编辑器对吧

259
00:11:21,000 --> 00:11:22,000
对

260
00:11:22,000 --> 00:11:23,000
Vim 其实是一组编辑器

261
00:11:23,000 --> 00:11:25,000
最早最早的

262
00:11:26,000 --> 00:11:27,000
就是 Vim 编辑器

263
00:11:27,000 --> 00:11:29,000
就是 Vim 这种编辑器

264
00:11:29,000 --> 00:11:36,000
可以追溯到一个叫做 X 的 Text Editor

265
00:11:36,000 --> 00:11:36,000
就是

266
00:11:38,000 --> 00:11:42,000
它最早是在 Unix 上面的一个行编辑器

267
00:11:42,000 --> 00:11:43,000
就是我们编辑器

268
00:11:43,000 --> 00:11:45,000
我们现在编辑器司工监管的都是

269
00:11:45,000 --> 00:11:46,000
一次可以编辑很多行

270
00:11:46,000 --> 00:11:49,000
然后在当时 X 这个编辑器

271
00:11:49,000 --> 00:11:51,000
它一次只能编辑一行

272
00:11:52,000 --> 00:11:53,000
你打开一个文件

273
00:11:53,000 --> 00:11:55,000
你一次只能看到一行或者几行内容

274
00:11:55,000 --> 00:11:58,000
然后你所有的编辑都针对这几行完成

275
00:11:59,000 --> 00:12:01,000
然后这是 1976 年写成的一个工具

276
00:12:03,000 --> 00:12:05,000
它是非常非常古老的一个工具

277
00:12:05,000 --> 00:12:09,000
对 V 就是在 EX 之后出现了一个工具

278
00:12:09,000 --> 00:12:10,000
叫做 V

279
00:12:10,000 --> 00:12:11,000
也就是 Vi

280
00:12:12,000 --> 00:12:18,000
Vi 出现的目的是把 X 的行编辑

281
00:12:18,000 --> 00:12:20,000
扩展到多行编辑

282
00:12:21,000 --> 00:12:25,000
也就是我们现在能够看到的这种

283
00:12:25,000 --> 00:12:29,000
多行编辑器的一个命令行中端上的版本

284
00:12:29,000 --> 00:12:31,000
然后我们所使用的 Vim

285
00:12:31,000 --> 00:12:36,000
又是一个荷兰程序员

286
00:12:36,000 --> 00:12:39,000
把原始的 Vi 程序扩展之后

287
00:12:40,000 --> 00:12:42,000
改名叫做 Vi Improved

288
00:12:43,000 --> 00:12:46,000
然后一直维护到现在这么一个工具

289
00:12:46,000 --> 00:12:49,000
所以我们其实讨论 Vim 的时候

290
00:12:49,000 --> 00:12:50,000
讨论是一组 Vim

291
00:12:50,000 --> 00:12:53,000
包括 Vim 还有比如说 MacVim

292
00:12:53,000 --> 00:12:56,000
这样专门在 Mac 上面运行的

293
00:12:56,000 --> 00:12:58,000
或者是 GVim 专门在 XWindow

294
00:12:58,000 --> 00:13:02,000
或者是跟我们下面运行的图形界面

295
00:13:02,000 --> 00:13:04,000
这些零零松松的都可以算到 Vim 里面

296
00:13:05,000 --> 00:13:05,000
对

297
00:13:05,000 --> 00:13:09,000
而且 Vim 还有一些后来的新的

298
00:13:09,000 --> 00:13:10,000
后继者吧

299
00:13:10,000 --> 00:13:12,000
比如最近比较火的一个叫做

300
00:13:12,000 --> 00:13:14,000
那个叫 NeoVim

301
00:13:14,000 --> 00:13:15,000
对吧

302
00:13:15,000 --> 00:13:15,000
对

303
00:13:15,000 --> 00:13:16,000
NeoVim

304
00:13:16,000 --> 00:13:18,000
他是把在 Vim 的

305
00:13:18,000 --> 00:13:19,000
不太不是

306
00:13:19,000 --> 00:13:21,000
他是等于是重写了一遍了

307
00:13:21,000 --> 00:13:25,000
我理解 NeoVim 的理念是

308
00:13:25,000 --> 00:13:34,000
Vim 这个编辑作为一个非常注重兼容性的代码库

309
00:13:34,000 --> 00:13:35,000
有太多问题

310
00:13:35,000 --> 00:13:39,000
所以他们把里面比较重要的组件重写了一遍

311
00:13:39,000 --> 00:13:42,000
比如说把单元测试全都重写了一遍

312
00:13:42,000 --> 00:13:49,000
然后应该是把 VimScript 的解析器用录啊重写了一遍

313
00:13:50,000 --> 00:13:56,000
然后以此带来的改进就是整个代码库变得更易读了

314
00:13:56,000 --> 00:13:59,000
然后维护起来比较容易

315
00:13:59,000 --> 00:14:03,000
因为我们知道 Vim 这个编辑器

316
00:14:03,000 --> 00:14:05,000
虽然使用的人非常多

317
00:14:05,000 --> 00:14:07,000
Contributor 也非常多

318
00:14:07,000 --> 00:14:10,000
但是其核心维护者其实只有一个人

319
00:14:10,000 --> 00:14:15,000
这个人就是 Bram Mullerner

320
00:14:16,000 --> 00:14:17,000
Mullerner

321
00:14:17,000 --> 00:14:17,000
对

322
00:14:17,000 --> 00:14:19,000
这是个河南名字

323
00:14:19,000 --> 00:14:19,000
河南语

324
00:14:19,000 --> 00:14:20,000
河南名字

325
00:14:20,000 --> 00:14:22,000
他是一个河南人

326
00:14:22,000 --> 00:14:24,000
生于 1961 年

327
00:14:24,000 --> 00:14:26,000
现在在苏伊士做 Google 员工

328
00:14:26,000 --> 00:14:29,000
我相信我 somehow 在苏伊士的街头见到过这个人

329
00:14:29,000 --> 00:14:30,000
但是我不敢确定

330
00:14:31,000 --> 00:14:31,000
因为

331
00:14:32,000 --> 00:14:32,000
对

332
00:14:32,000 --> 00:14:35,000
因为如果你去 Wikipedia 上看他的词条的话

333
00:14:35,000 --> 00:14:39,000
就是他有一张非常知名的照片

334
00:14:39,000 --> 00:14:42,000
他穿着一件胸前印着 slashcode slash

335
00:14:43,000 --> 00:14:46,000
然后下面写个问号的黑色 T 恤的

336
00:14:46,000 --> 00:14:50,000
所以我对他的相貌还是比较有概念的

337
00:14:50,000 --> 00:14:52,000
所以那天也许我在苏伊士街头看到过他

338
00:14:52,000 --> 00:14:53,000
但是不敢确定

339
00:14:53,000 --> 00:14:56,000
另外他现在是 Google 员工

340
00:14:56,000 --> 00:15:00,000
就是 Google 是一个聚集了很多这种神人的地方

341
00:15:01,000 --> 00:15:04,000
之前 Python 的作者好像也在 Google 吧

342
00:15:04,000 --> 00:15:05,000
现在已经去了 Dropbox 了

343
00:15:05,000 --> 00:15:06,000
对现在已经 Dropbox 了

344
00:15:06,000 --> 00:15:07,000
对

345
00:15:07,000 --> 00:15:12,000
这个人他是 Vim 项目的所谓的 Single point of failure

346
00:15:12,000 --> 00:15:13,000
就是一旦这个人

347
00:15:13,000 --> 00:15:14,000
过完了

348
00:15:14,000 --> 00:15:17,000
如果 Brand 某一天出去街上

349
00:15:17,000 --> 00:15:20,000
被苏伊士的电车给撞死了

350
00:15:21,000 --> 00:15:23,000
那么 Vim 这个项目也就完蛋了估计

351
00:15:23,000 --> 00:15:25,000
God forbid

352
00:15:25,000 --> 00:15:26,000
千万不要发现

353
00:15:26,000 --> 00:15:27,000
因为有人

354
00:15:27,000 --> 00:15:28,000
我没有看过

355
00:15:28,000 --> 00:15:30,000
但是我之前有缩耳闻

356
00:15:30,000 --> 00:15:32,000
就是看 Neo Vim 那件事的事情

357
00:15:32,000 --> 00:15:36,000
就是 Vim 本身代码库的写法是比较古怪的

358
00:15:37,000 --> 00:15:37,000
对

359
00:15:37,000 --> 00:15:40,000
很近是一个所谓

360
00:15:40,000 --> 00:15:43,000
逐渐生长起来的这么一个项目

361
00:15:43,000 --> 00:15:44,000
它不是一开始就有一个比较

362
00:15:45,000 --> 00:15:46,000
宏大的规划

363
00:15:46,000 --> 00:15:51,000
我说在所谓 architecture 这一部分做的不是很好

364
00:15:51,000 --> 00:15:52,000
其实

365
00:15:52,000 --> 00:15:52,000
对

366
00:15:52,000 --> 00:15:56,000
你可以说它甚至是不是一个很优美的代码库

367
00:15:56,000 --> 00:15:56,000
这样

368
00:15:57,000 --> 00:15:57,000
对

369
00:15:57,000 --> 00:15:58,000
也是为什么

370
00:15:58,000 --> 00:16:00,000
Neo Vim 那帮人想着

371
00:16:00,000 --> 00:16:00,000
哇靠

372
00:16:00,000 --> 00:16:01,000
这个没法忍了

373
00:16:01,000 --> 00:16:07,000
他们之前也想给 Brand 提一个 patch

374
00:16:07,000 --> 00:16:08,000
因为他好像这个

375
00:16:08,000 --> 00:16:10,000
很流用那个分布式代码管理

376
00:16:10,000 --> 00:16:10,000
我记得

377
00:16:12,000 --> 00:16:13,000
反正想给他提个 patch

378
00:16:13,000 --> 00:16:15,000
然后就经常被拒掉了

379
00:16:15,000 --> 00:16:16,000
然后他就算了

380
00:16:16,000 --> 00:16:18,000
我们自己搞一个好了

381
00:16:18,000 --> 00:16:19,000
还有一个问题

382
00:16:19,000 --> 00:16:21,000
就是 Vim 这个代码库

383
00:16:21,000 --> 00:16:26,000
它兼容非常非常非常多的系统和平台

384
00:16:27,000 --> 00:16:30,000
而且这些所有的街头代码都是他一个人在维护的

385
00:16:30,000 --> 00:16:32,000
就 Brand 一个人在维护的

386
00:16:32,000 --> 00:16:35,000
那么有些那种奇奇怪怪的平台

387
00:16:35,000 --> 00:16:38,000
现在我估计很多人从来不是说没有见过

388
00:16:38,000 --> 00:16:39,000
可能听都没有听过

389
00:16:39,000 --> 00:16:42,000
对什么 B 1 OS 或者是什么

390
00:16:42,000 --> 00:16:47,000
Omega 还是 Emiga

391
00:16:48,000 --> 00:16:49,000
Omega

392
00:16:49,000 --> 00:16:51,000
反正有很多这种奇奇怪怪的平台

393
00:16:51,000 --> 00:16:55,000
至少我觉得像我们这种新生代

394
00:16:55,000 --> 00:16:56,000
就是后面的

395
00:16:57,000 --> 00:17:00,000
不是六七十年代出生的那帮人

396
00:17:00,000 --> 00:17:02,000
是不知道那些系统是长什么样的

397
00:17:02,000 --> 00:17:05,000
可能就是在西欧某个国家的某个角落里面

398
00:17:05,000 --> 00:17:07,000
有一个从 60 年代运行至今的系统上面

399
00:17:07,000 --> 00:17:09,000
必须要跑 Vim

400
00:17:09,000 --> 00:17:11,000
然后他就必须维护这个分代码

401
00:17:11,000 --> 00:17:11,000
对

402
00:17:11,000 --> 00:17:15,000
然后其实像很多像比如像 NEO Vim 这种新兴的项目

403
00:17:15,000 --> 00:17:15,000
他就觉得

404
00:17:15,000 --> 00:17:16,000
哇

405
00:17:16,000 --> 00:17:19,000
那我为什么要花时间花精力去支持那么多

406
00:17:19,000 --> 00:17:20,000
可能地球上

407
00:17:20,000 --> 00:17:23,000
绝大部分人都可能没有听说过的那种平台或者系统呢

408
00:17:24,000 --> 00:17:27,000
就这也是一个就是减少代码量的一个办法吧

409
00:17:28,000 --> 00:17:28,000
没错

410
00:17:29,000 --> 00:17:29,000
对

411
00:17:29,000 --> 00:17:32,000
这也就刚刚也就提到了 Vim 的一个优点

412
00:17:32,000 --> 00:17:33,000
就是所谓的

413
00:17:33,000 --> 00:17:35,000
ubiquitous 无处不在

414
00:17:36,000 --> 00:17:36,000
对

415
00:17:36,000 --> 00:17:37,000
就你很有可能

416
00:17:37,000 --> 00:17:40,000
就我们既然谈到了 Vim 和 Emacs 之间的胜战

417
00:17:40,000 --> 00:17:42,000
基本上我们可以说

418
00:17:42,000 --> 00:17:44,000
现在就可以说出 Vim 那个优点

419
00:17:44,000 --> 00:17:49,000
就是几乎你有机会碰触到了任何一台

420
00:17:49,000 --> 00:17:50,000
Uniqs 电脑

421
00:17:50,000 --> 00:17:51,000
Lay Unix 电脑

422
00:17:51,000 --> 00:17:54,000
基本上都会有 Vim 的某种形式存在

423
00:17:54,000 --> 00:17:55,000
但是 Emacs 都不一定

424
00:17:55,000 --> 00:17:56,000
对

425
00:17:56,000 --> 00:18:01,000
而且之前我经常在捣腾 Linux 的路由器

426
00:18:01,000 --> 00:18:06,000
还有很多这种所谓的经典版或者是嵌入式的系统里面

427
00:18:06,000 --> 00:18:12,000
你会发现他默认自在一个 Vi 或者是 Vim Tiny

428
00:18:12,000 --> 00:18:14,000
这种超小型的 Vim 编辑器

429
00:18:14,000 --> 00:18:16,000
不是全部特性都有的

430
00:18:16,000 --> 00:18:19,000
然后但是 Emacs 这种是肯定找不到的

431
00:18:20,000 --> 00:18:21,000
对

432
00:18:21,000 --> 00:18:22,000
所以他叫做无处不在

433
00:18:23,000 --> 00:18:28,000
没有记错 V 应该是 Vi 应该是 Posix 标准的一部分

434
00:18:28,000 --> 00:18:28,000
吧

435
00:18:28,000 --> 00:18:31,000
这个我还没理解

436
00:18:31,000 --> 00:18:34,000
如果你要让你的系统符合 Posix

437
00:18:34,000 --> 00:18:39,000
或者是就是 Max 过的那个叫什么 Single Unix Specification

438
00:18:39,000 --> 00:18:42,000
那你的系统里面必须包含 Vi

439
00:18:42,000 --> 00:18:43,000
天哪

440
00:18:43,000 --> 00:18:46,000
这个 Specification 也管得太多了吧

441
00:18:46,000 --> 00:18:46,000
对

442
00:18:46,000 --> 00:18:50,000
好像这个还包括 Poro 也是一部分

443
00:18:51,000 --> 00:18:51,000
不要吧

444
00:18:51,000 --> 00:18:51,000
真的

445
00:18:51,000 --> 00:18:52,000
对

446
00:18:52,000 --> 00:18:52,000
Anyway

447
00:18:52,000 --> 00:18:53,000
真的

448
00:18:53,000 --> 00:18:54,000
不开玩笑

449
00:18:54,000 --> 00:18:55,000
OK

450
00:18:56,000 --> 00:18:58,000
但 Emacs 是不是我就不知道

451
00:18:58,000 --> 00:19:00,000
感觉三观又被刷新了

452
00:19:00,000 --> 00:19:06,000
所以为什么 Vim 或者说 Linux 的这种编辑器会这么的普及

453
00:19:06,000 --> 00:19:08,000
而 Emacs 却没有呢

454
00:19:08,000 --> 00:19:10,000
这里有什么技术的原因

455
00:19:10,000 --> 00:19:15,000
我觉得主要的原因还是 Vi 或者说 Vim 其实它不是

456
00:19:16,000 --> 00:19:18,000
它不单单是一种编辑器

457
00:19:18,000 --> 00:19:20,000
它是一种语言

458
00:19:20,000 --> 00:19:22,000
它是一种思维方式

459
00:19:22,000 --> 00:19:23,000
你可以说

460
00:19:23,000 --> 00:19:31,000
它是一种你告诉编辑器你想要做的事情的一套机制

461
00:19:31,000 --> 00:19:37,000
而这套机制本身其实并不依赖于 Vi 或者是 Vim 所存在着

462
00:19:39,000 --> 00:19:42,000
所以它也就被移植到了各种各样的地方

463
00:19:43,000 --> 00:19:47,000
比如说现在基本上任何稍微主流一点的编辑器里面都会有

464
00:19:47,000 --> 00:19:51,000
Vi 或者是 Linux 的 Keybinding 可以选

465
00:19:53,000 --> 00:19:54,000
但是如果这样说的话

466
00:19:54,000 --> 00:19:58,000
其实反而是 Emacs 那种 Keybinding 会比较常见一点

467
00:19:58,000 --> 00:20:00,000
就是在大部分的编辑器里面

468
00:20:00,000 --> 00:20:01,000
比如上次我们已经聊到了

469
00:20:02,000 --> 00:20:09,000
在 Mac 上面大部分的文本输入框是自带一些基本的 Emacs 的 Keybinding 的

470
00:20:10,000 --> 00:20:12,000
但问题在于比如说你说 Eclipse

471
00:20:13,000 --> 00:20:23,000
Eclipse 或者是 NetBeans 之类的 IDE 里面是不会有 Emacs 的 Keybinding

472
00:20:24,000 --> 00:20:27,000
但是 VimKeybinding 肯定会有人实现出来

473
00:20:30,000 --> 00:20:31,000
这个有点意思

474
00:20:31,000 --> 00:20:34,000
对这其中原因我觉得就是因为 Vim 本身是一种语言

475
00:20:35,000 --> 00:20:38,000
对这里可能不是很多人都用

476
00:20:38,000 --> 00:20:42,000
或者说是学了一下但是没有坚持到底

477
00:20:42,000 --> 00:20:45,000
就是 Vim 的它的魅力或者优势在哪里

478
00:20:45,000 --> 00:20:49,000
就刚才讲了它有一个所谓的语言

479
00:20:49,000 --> 00:20:52,000
这里我们待会会解释这个语言是什么样的

480
00:20:52,000 --> 00:20:55,000
然后另外一个特点就是所谓的模态这一点

481
00:20:56,000 --> 00:20:59,000
所以这两者其实是相辅相成的可以说

482
00:20:59,000 --> 00:21:01,000
我们先讲哪一个

483
00:21:02,000 --> 00:21:04,000
其实现在就可以解释一下

484
00:21:04,000 --> 00:21:06,000
到底为什么或者说首先解释一下

485
00:21:06,000 --> 00:21:08,000
为什么这么难

486
00:21:08,000 --> 00:21:11,000
或者说怎么样才能让 Vim 变得不那么难

487
00:21:12,000 --> 00:21:14,000
你要先理解一个概念

488
00:21:17,000 --> 00:21:21,000
或者说你要从自己的使用习惯之中观察出一个概念来

489
00:21:21,000 --> 00:21:28,000
也就是你最终写出来的文本里面

490
00:21:28,000 --> 00:21:33,000
你是看不到任何移动光标或者修改的痕迹的

491
00:21:33,000 --> 00:21:34,000
对不对

492
00:21:34,000 --> 00:21:34,000
对

493
00:21:34,000 --> 00:21:36,000
因为那个是撰写的过程

494
00:21:37,000 --> 00:21:38,000
跟制作的产品是没有关系的

495
00:21:38,000 --> 00:21:41,000
也就是说当我们在写一篇文章的时候

496
00:21:41,000 --> 00:21:43,000
我们按下一些键的时候

497
00:21:44,000 --> 00:21:49,000
所达成的目的是让这些键所代表的字符

498
00:21:49,000 --> 00:21:51,000
成为最终文章的一部分

499
00:21:51,000 --> 00:21:52,000
这是一种状态

500
00:21:52,000 --> 00:21:54,000
而另一种状态

501
00:21:54,000 --> 00:21:57,000
比如说我们按方向键

502
00:21:57,000 --> 00:21:58,000
或者是按 Page up,Page down

503
00:21:58,000 --> 00:22:00,000
那就是按 Home end 的时候

504
00:22:01,000 --> 00:22:08,000
意图在于去改变我们刚刚以第一种状态所写下的文章

505
00:22:10,000 --> 00:22:11,000
这是第二种状态

506
00:22:11,000 --> 00:22:14,000
也就是说我们其实在写文章的时候

507
00:22:14,000 --> 00:22:17,000
已经在两种状态之间切换来切换去的

508
00:22:17,000 --> 00:22:18,000
只不过在

509
00:22:19,000 --> 00:22:21,000
如果你没有意识到这一点的话

510
00:22:21,000 --> 00:22:23,000
在你看来两者其实都是在按键

511
00:22:24,000 --> 00:22:26,000
只不过有些键做这种事情

512
00:22:26,000 --> 00:22:27,000
有些键做那种事情而已

513
00:22:27,000 --> 00:22:28,000
那么 WIM

514
00:22:29,000 --> 00:22:30,000
它的难点

515
00:22:30,000 --> 00:22:34,000
或者说它所抽象出来的一套概念就是

516
00:22:35,000 --> 00:22:37,000
既然你有两种状态

517
00:22:37,000 --> 00:22:39,000
那我就明确定义两种状态好了

518
00:22:39,000 --> 00:22:43,000
那么 WIM 就明确地区分出了两种

519
00:22:43,000 --> 00:22:45,000
或者说严格意义上是三种模式

520
00:22:46,000 --> 00:22:47,000
在其中一种模式下

521
00:22:47,000 --> 00:22:50,000
你所写的一切内容

522
00:22:50,000 --> 00:22:52,000
你在键盘上敲入的一些内容

523
00:22:53,000 --> 00:22:54,000
都会成为成能正功

524
00:22:54,000 --> 00:22:55,000
或者说都会成为

525
00:22:55,000 --> 00:22:58,000
最终出现在文档之中的文字

526
00:22:58,000 --> 00:23:01,000
而在另外一种模式之下

527
00:23:02,000 --> 00:23:04,000
你可以告诉编辑器你想要干什么

528
00:23:04,000 --> 00:23:07,000
比如说编辑器我想要删掉我

529
00:23:08,000 --> 00:23:09,000
写下来我光

530
00:23:09,000 --> 00:23:11,000
我处于我光渺右侧的三个单词

531
00:23:11,000 --> 00:23:13,000
或者编辑器我想要删掉我

532
00:23:14,000 --> 00:23:15,000
现在这一行

533
00:23:15,000 --> 00:23:17,000
以及上面那一行

534
00:23:17,000 --> 00:23:19,000
以及再上面那一行的

535
00:23:20,000 --> 00:23:22,000
刚刚敲入输入的代码

536
00:23:22,000 --> 00:23:23,000
或者编辑器我想要

537
00:23:24,000 --> 00:23:28,000
让现在的用双引号引起来的这句话

538
00:23:29,000 --> 00:23:30,000
改变成单引号

539
00:23:31,000 --> 00:23:31,000
诸如此类

540
00:23:32,000 --> 00:23:34,000
那么这种模式叫做普通模式

541
00:23:35,000 --> 00:23:37,000
然后还有第三种模式叫做命令模式

542
00:23:37,000 --> 00:23:40,000
但是它目前来说不是很重要

543
00:23:40,000 --> 00:23:43,000
我们就是比较重大的难点

544
00:23:43,000 --> 00:23:45,000
对于 Vim 的出现者来说

545
00:23:45,000 --> 00:23:48,000
就是为什么要出现

546
00:23:48,000 --> 00:23:50,000
普通模式和编辑模式之间的区别

547
00:23:50,000 --> 00:23:52,000
对

548
00:23:52,000 --> 00:23:55,000
那么反过来想

549
00:23:56,000 --> 00:23:59,000
如果你能适应这一点的话

550
00:23:59,000 --> 00:24:02,000
那么在普通模式之下

551
00:24:02,000 --> 00:24:05,000
你可以以非常快的速度

552
00:24:05,000 --> 00:24:09,000
以一种非常特别的语言

553
00:24:09,000 --> 00:24:10,000
就是加引号语言

554
00:24:10,000 --> 00:24:12,000
来告诉 Vim 你想要干什么

555
00:24:12,000 --> 00:24:14,000
然后 Vim 可以很快地替你完成这些事情

556
00:24:14,000 --> 00:24:15,000
比如说

557
00:24:15,000 --> 00:24:17,000
假如说你换用别的编辑器

558
00:24:17,000 --> 00:24:18,000
比如说用 NotePad

559
00:24:18,000 --> 00:24:21,000
然后你要删掉接下来的三个单词

560
00:24:21,000 --> 00:24:23,000
你可能会怎么做呢

561
00:24:23,000 --> 00:24:25,000
按住 Delete 键不放

562
00:24:26,000 --> 00:24:28,000
或者是按住 Shift 选中三个单词

563
00:24:28,000 --> 00:24:30,000
然后按一次 Delete 键

564
00:24:30,000 --> 00:24:31,000
对

565
00:24:31,000 --> 00:24:34,000
但是在 Vim 的模式之下

566
00:24:34,000 --> 00:24:35,000
你只需要告诉编辑器说

567
00:24:35,000 --> 00:24:37,000
删除三个单词

568
00:24:37,000 --> 00:24:39,000
对 D 3 W

569
00:24:39,000 --> 00:24:41,000
就是你按 D 键

570
00:24:41,000 --> 00:24:42,000
然后按 3 键再按 W 键

571
00:24:42,000 --> 00:24:44,000
也就是 Delete 3 words

572
00:24:44,000 --> 00:24:44,000
对

573
00:24:45,000 --> 00:24:47,000
然后 Vim 就会递你删掉

574
00:24:47,000 --> 00:24:48,000
光标右侧的三个单词

575
00:24:49,000 --> 00:24:50,000
所以这里就是有一个

576
00:24:50,000 --> 00:24:53,000
刚才你讲的 Vim 的操作语言

577
00:24:54,000 --> 00:24:56,000
我们刚才你看到它是有一个所谓的

578
00:24:57,000 --> 00:24:58,000
动作

579
00:24:58,000 --> 00:24:58,000
然后

580
00:25:00,000 --> 00:25:01,000
量词

581
00:25:01,000 --> 00:25:03,000
然后再加所谓冰语的结构

582
00:25:04,000 --> 00:25:05,000
就是一个简单的比较简单的

583
00:25:05,000 --> 00:25:07,000
但主语默认就是你自己

584
00:25:07,000 --> 00:25:08,000
这个不用讲了

585
00:25:10,000 --> 00:25:12,000
也是因为这条语言使得 Vim

586
00:25:12,000 --> 00:25:13,000
在

587
00:25:14,000 --> 00:25:16,000
起码在我们这种铁开粉丝的角度

588
00:25:16,000 --> 00:25:18,000
看它的编辑的效率是非常高的

589
00:25:18,000 --> 00:25:19,000
因为刚才你讲

590
00:25:19,000 --> 00:25:21,000
那个问题其实没有回答

591
00:25:21,000 --> 00:25:22,000
就是为什么 Vim 会区分

592
00:25:22,000 --> 00:25:23,000
这个所谓的

593
00:25:24,000 --> 00:25:25,000
编辑或者叫做

594
00:25:25,000 --> 00:25:27,000
专业的术语叫做插入模式

595
00:25:27,000 --> 00:25:28,000
Insert Mode

596
00:25:28,000 --> 00:25:30,000
和命令

597
00:25:30,000 --> 00:25:31,000
就刚才你讲的

598
00:25:31,000 --> 00:25:34,000
在 Vim 里面专业术语叫做 Normal Mode

599
00:25:34,000 --> 00:25:35,000
普通模式

600
00:25:36,000 --> 00:25:37,000
其实我觉得这里有一个

601
00:25:38,000 --> 00:25:39,000
上次来在跟 Lawrence 讨论这个问题

602
00:25:39,000 --> 00:25:40,000
就是说

603
00:25:40,000 --> 00:25:43,000
写程序和写

604
00:25:44,000 --> 00:25:46,000
普通的文章有一个很大的区别

605
00:25:46,000 --> 00:25:47,000
我觉得就是

606
00:25:47,000 --> 00:25:48,000
可能写程序的时候

607
00:25:48,000 --> 00:25:49,000
你更多的时候

608
00:25:49,000 --> 00:25:50,000
我不是真的在写

609
00:25:50,000 --> 00:25:52,000
而是那时候在读你之前写过的程序

610
00:25:53,000 --> 00:25:54,000
然后再做一些

611
00:25:55,000 --> 00:25:56,000
轻度的修改

612
00:25:56,000 --> 00:25:58,000
对或者说写程序的

613
00:25:58,000 --> 00:26:00,000
80%的时间是在改

614
00:26:00,000 --> 00:26:01,000
对是在读

615
00:26:01,000 --> 00:26:02,000
是在不停的调试

616
00:26:02,000 --> 00:26:04,000
是在不停的更正你

617
00:26:04,000 --> 00:26:06,000
脑海中之中的运算模型

618
00:26:06,000 --> 00:26:07,000
对

619
00:26:07,000 --> 00:26:08,000
不过这样说其实也不太对

620
00:26:08,000 --> 00:26:10,000
因为我知道很多文章写出来

621
00:26:10,000 --> 00:26:11,000
也是要经常改的

622
00:26:11,000 --> 00:26:12,000
但是

623
00:26:12,000 --> 00:26:14,000
对但我不知道你怎么样

624
00:26:14,000 --> 00:26:15,000
但至少我在写文章的时候

625
00:26:15,000 --> 00:26:16,000
会有那种

626
00:26:16,000 --> 00:26:18,000
就是写到在 Zone 里面的时候

627
00:26:18,000 --> 00:26:20,000
会有那种行人流水的感觉

628
00:26:20,000 --> 00:26:21,000
就一气呵成

629
00:26:21,000 --> 00:26:22,000
不会要跳来跳去

630
00:26:22,000 --> 00:26:24,000
会一次写很多字

631
00:26:24,000 --> 00:26:25,000
就很少

632
00:26:25,000 --> 00:26:25,000
一般上

633
00:26:26,000 --> 00:26:26,000
基本上

634
00:26:27,000 --> 00:26:29,000
修改会集中在一个阶段里面改

635
00:26:29,000 --> 00:26:30,000
但是写程序就很少这样

636
00:26:30,000 --> 00:26:31,000
对

637
00:26:31,000 --> 00:26:32,000
而且就是

638
00:26:32,000 --> 00:26:33,000
就刚才我也讲了

639
00:26:33,000 --> 00:26:34,000
写程序更多

640
00:26:34,000 --> 00:26:35,000
就是我们所谓的写程序

641
00:26:35,000 --> 00:26:36,000
更多的时候你是在翻出

642
00:26:36,000 --> 00:26:38,000
你之前写过的程序

643
00:26:38,000 --> 00:26:40,000
或者别人之前写过的程序

644
00:26:40,000 --> 00:26:42,000
然后你再去做一些阅读

645
00:26:42,000 --> 00:26:43,000
然后做一些小的调整而已

646
00:26:43,000 --> 00:26:44,000
并不是真的

647
00:26:44,000 --> 00:26:46,000
你每次都在从头到尾去

648
00:26:46,000 --> 00:26:48,000
在 right from scratch

649
00:26:48,000 --> 00:26:51,000
从头到尾完完全全地写一个新的程序出来

650
00:26:51,000 --> 00:26:51,000
这种事情是

651
00:26:51,000 --> 00:26:53,000
这种时候是相当少的

652
00:26:54,000 --> 00:26:54,000
对

653
00:26:54,000 --> 00:26:55,000
所以

654
00:26:55,000 --> 00:26:57,000
所以就是为什么在 Wim 里面

655
00:26:57,000 --> 00:26:59,000
你如果不做任何处理

656
00:26:59,000 --> 00:27:00,000
不做任何特别的配置的话

657
00:27:00,000 --> 00:27:01,000
你进到里面去

658
00:27:01,000 --> 00:27:03,000
它默认的那个模式叫做

659
00:27:03,000 --> 00:27:04,000
是刚才你讲的

660
00:27:04,000 --> 00:27:06,000
这个所谓的命令模式

661
00:27:06,000 --> 00:27:07,000
对就是 normal mode

662
00:27:07,000 --> 00:27:08,000
普通模式

663
00:27:08,000 --> 00:27:08,000
对普通模式

664
00:27:08,000 --> 00:27:09,000
而且

665
00:27:10,000 --> 00:27:11,000
对于一个

666
00:27:12,000 --> 00:27:14,000
对一个日常的 Wim 的用户来讲

667
00:27:14,000 --> 00:27:16,000
他也应该把绝大多数的时间

668
00:27:16,000 --> 00:27:18,000
花在这个普通模式里面

669
00:27:19,000 --> 00:27:20,000
对

670
00:27:20,000 --> 00:27:23,000
反过来就是在 emacs 下面

671
00:27:23,000 --> 00:27:27,000
其实也可以意识到

672
00:27:27,000 --> 00:27:28,000
当你打开 emacs 之后

673
00:27:28,000 --> 00:27:31,000
你基本上你会下意识地按住 ctrl

674
00:27:31,000 --> 00:27:32,000
然后去做一些事情

675
00:27:32,000 --> 00:27:32,000
就是

676
00:27:35,000 --> 00:27:38,000
在你不会一上来就写什么东西

677
00:27:38,000 --> 00:27:39,000
在这个

678
00:27:39,000 --> 00:27:41,000
至少你要做的一件事情是移动光标

679
00:27:41,000 --> 00:27:42,000
把光标插入到

680
00:27:42,000 --> 00:27:46,000
移动到你想要插入文字的部分

681
00:27:46,000 --> 00:27:47,000
然后才会开始编辑吧

682
00:27:47,000 --> 00:27:48,000
对

683
00:27:48,000 --> 00:27:52,000
那么在 emacs 或者说任何一种其他

684
00:27:53,000 --> 00:27:54,000
不区分

685
00:27:54,000 --> 00:27:57,000
不明确区分模态的编辑器里面

686
00:27:58,000 --> 00:28:00,000
你还是会有大量的时间

687
00:28:01,000 --> 00:28:03,000
花在这种移动光标

688
00:28:03,000 --> 00:28:04,000
或者是删除某个单词

689
00:28:04,000 --> 00:28:07,000
或者删除某一行的这种需求之下

690
00:28:07,000 --> 00:28:08,000
而 Wim 的

691
00:28:09,000 --> 00:28:11,000
出发点或者他的设计要素

692
00:28:11,000 --> 00:28:13,000
就是把这样一个抽象的级别

693
00:28:13,000 --> 00:28:15,000
把它实体化了

694
00:28:15,000 --> 00:28:20,000
你可以明确的告诉编辑器

695
00:28:20,000 --> 00:28:22,000
我现在要切换到那种模式

696
00:28:22,000 --> 00:28:24,000
然后你可以一直保留在那种模式之下

697
00:28:24,000 --> 00:28:26,000
对或者说你这么理解

698
00:28:26,000 --> 00:28:27,000
就是在 emacs 里面

699
00:28:27,000 --> 00:28:30,000
你采用快捷键的时候

700
00:28:30,000 --> 00:28:33,000
其实你是已经在短暂的时间内

701
00:28:33,000 --> 00:28:35,000
进就是在快捷键按下这个过程中

702
00:28:35,000 --> 00:28:36,000
你已经在极短的时间内

703
00:28:36,000 --> 00:28:38,000
进入了某一种模式里面

704
00:28:38,000 --> 00:28:41,000
然后再在那个模式去进行一个制定的操作

705
00:28:41,000 --> 00:28:46,000
而此时你并没有在真正的插入

706
00:28:46,000 --> 00:28:47,000
或者是撰写某一个文档

707
00:28:48,000 --> 00:28:50,000
对而 Wim 的所谓编辑模式

708
00:28:50,000 --> 00:28:54,000
和命令模式之间的差别就在于

709
00:28:54,000 --> 00:28:58,000
就好像就相当于你找到什么东西

710
00:28:58,000 --> 00:28:59,000
找到一本书

711
00:28:59,000 --> 00:29:00,000
压住了你的 control 键

712
00:29:00,000 --> 00:29:04,000
这个时候你按键盘上的任何一个字母

713
00:29:04,000 --> 00:29:06,000
你都是在执行快捷键

714
00:29:06,000 --> 00:29:11,000
对你都是在做一种给出命令

715
00:29:11,000 --> 00:29:14,000
而不是书写字母的行为

716
00:29:14,000 --> 00:29:17,000
也就是比如说 F

717
00:29:17,000 --> 00:29:20,000
假如你的 control 键一直被按住了

718
00:29:20,000 --> 00:29:22,000
那你敲一下 F

719
00:29:22,000 --> 00:29:25,000
你所要做的事情是搜寻什么东西

720
00:29:25,000 --> 00:29:26,000
那么在 Wim 里面

721
00:29:26,000 --> 00:29:28,000
当你切换到普通模式之后

722
00:29:28,000 --> 00:29:30,000
你只要按一下 F 键

723
00:29:30,000 --> 00:29:34,000
你就可以去找你要找的某一个字符

724
00:29:35,000 --> 00:29:39,000
不过有一个可能在就是在术语上

725
00:29:39,000 --> 00:29:40,000
有一个可能比较容易混淆的地方

726
00:29:40,000 --> 00:29:43,000
其实在 emacs 里面也有 mode 这个概念

727
00:29:44,000 --> 00:29:47,000
对但 emacs mode 指的是

728
00:29:48,000 --> 00:29:49,000
完全不一样的什么东西

729
00:29:49,000 --> 00:29:50,000
比如说

730
00:29:52,000 --> 00:29:57,000
比如说 emacs 它打开一个 Latech 文件

731
00:29:57,000 --> 00:29:59,000
它会进入所谓 Latech mode

732
00:29:59,000 --> 00:30:02,000
那这个 mode 其实就相当于

733
00:30:02,000 --> 00:30:04,000
如果你是 Wim 使用者

734
00:30:04,000 --> 00:30:05,000
你对 emacs 不是很熟

735
00:30:05,000 --> 00:30:06,000
我们两个对 emacs 都不是很熟

736
00:30:06,000 --> 00:30:07,000
但

737
00:30:08,000 --> 00:30:10,000
而 emacs mode 其实对 Wim 来说

738
00:30:10,000 --> 00:30:13,000
就相当于 Wim 的 file type

739
00:30:13,000 --> 00:30:14,000
就是

740
00:30:15,000 --> 00:30:18,000
针对某一种特别的文件类型

741
00:30:18,000 --> 00:30:21,000
或者说针对某一种特别的编辑状态

742
00:30:21,000 --> 00:30:23,000
而激活一种模式

743
00:30:23,000 --> 00:30:25,000
而这个跟 Wim 的

744
00:30:25,000 --> 00:30:28,000
所谓 mode 其实是完全不同的两个概念

745
00:30:28,000 --> 00:30:29,000
对

746
00:30:29,000 --> 00:30:31,000
所以就是从刚才讲的

747
00:30:31,000 --> 00:30:32,000
就是 emacs 的 mode

748
00:30:32,000 --> 00:30:35,000
其实大约等同于 emacs 的

749
00:30:35,000 --> 00:30:37,000
Wim 的叫什么

750
00:30:37,000 --> 00:30:39,000
ftplugin 这个东西

751
00:30:39,000 --> 00:30:40,000
对

752
00:30:40,000 --> 00:30:41,000
file type plugin

753
00:30:43,000 --> 00:30:43,000
然后

754
00:30:44,000 --> 00:30:47,000
对我们是接着说 Wim 的问题

755
00:30:47,000 --> 00:30:47,000
还是

756
00:30:48,000 --> 00:30:53,000
每一个点都尽量对照两种编辑器来说

757
00:30:54,000 --> 00:30:55,000
这还是对照一下

758
00:30:55,000 --> 00:30:57,000
因为这个本来就是回顾胜仗

759
00:30:57,000 --> 00:31:00,000
我们还是要把最基本的那些要点

760
00:31:00,000 --> 00:31:01,000
大概理一下

761
00:31:01,000 --> 00:31:01,000
对

762
00:31:01,000 --> 00:31:02,000
其实

763
00:31:02,000 --> 00:31:07,000
这种模态的区分也就导致了 Wim 如此难学

764
00:31:07,000 --> 00:31:07,000
或者说

765
00:31:08,000 --> 00:31:12,000
很多人会觉得 Wim 是一种非常奇怪的编辑器的一个原因之一

766
00:31:12,000 --> 00:31:12,000
对

767
00:31:12,000 --> 00:31:14,000
因为我觉得他是不够

768
00:31:14,000 --> 00:31:16,000
或者很多人觉得他不够直观

769
00:31:16,000 --> 00:31:17,000
就是因为这个模态

770
00:31:17,000 --> 00:31:21,000
我想不出在生活中有什么样的地方是有模态这个概念

771
00:31:23,000 --> 00:31:23,000
对

772
00:31:23,000 --> 00:31:26,000
因为键盘其实是一个非常奇怪的

773
00:31:27,000 --> 00:31:28,000
奇怪的输入工具

774
00:31:28,000 --> 00:31:30,000
如果要我说的话

775
00:31:31,000 --> 00:31:34,000
如果你把键盘上所有的功能键拿掉

776
00:31:34,000 --> 00:31:38,000
Control、Out、Command、Escape

777
00:31:38,000 --> 00:31:40,000
乃至所有的 F 键都拿掉的话

778
00:31:42,000 --> 00:31:44,000
你要怎样才能

779
00:31:45,000 --> 00:31:47,000
改变工标的位置呢

780
00:31:49,000 --> 00:31:50,000
就方向键要拿掉

781
00:31:50,000 --> 00:31:52,000
或者说你要怎样去查找

782
00:31:52,000 --> 00:31:53,000
没有这种功能键

783
00:31:53,000 --> 00:31:57,000
只有字母键或者字符号键的时候怎么去操作

784
00:31:57,000 --> 00:31:59,000
如果你的键盘只能插入的话

785
00:31:59,000 --> 00:32:00,000
你应该怎样修改

786
00:32:01,000 --> 00:32:03,000
你屏幕上的内容呢

787
00:32:06,000 --> 00:32:07,000
假如说

788
00:32:07,000 --> 00:32:09,000
其中一种解决方式是 TouchScreen

789
00:32:09,000 --> 00:32:12,000
那么我们是不是可以理解为

790
00:32:14,000 --> 00:32:17,000
或者用鼠标去移动的时候

791
00:32:17,000 --> 00:32:20,000
你是在进入另外一种模态里面

792
00:32:20,000 --> 00:32:23,000
对或者说你面对的是一台

793
00:32:23,000 --> 00:32:24,000
是一个 TouchScreen

794
00:32:24,000 --> 00:32:27,000
那么你可以用手指去点你要改的那个文字

795
00:32:27,000 --> 00:32:29,000
然后选中它

796
00:32:29,000 --> 00:32:31,000
然后再在你的键盘上面改

797
00:32:31,000 --> 00:32:33,000
那么这一种情况是不是存在的

798
00:32:33,000 --> 00:32:34,000
其实已经存在的

799
00:32:34,000 --> 00:32:37,000
就是你在你的手机上去修改什么东西的时候

800
00:32:38,000 --> 00:32:41,000
你要选中一个文字

801
00:32:41,000 --> 00:32:42,000
你所做的事情

802
00:32:42,000 --> 00:32:43,000
并不是按住 Shift 键

803
00:32:43,000 --> 00:32:44,000
然后选方向键

804
00:32:44,000 --> 00:32:45,000
因为手机键盘上

805
00:32:46,000 --> 00:32:48,000
反正也没有方向键对吧

806
00:32:49,000 --> 00:32:51,000
你要用手去点那个字母

807
00:32:51,000 --> 00:32:52,000
按住松开

808
00:32:52,000 --> 00:32:54,000
然后这个单词被选中了

809
00:32:55,000 --> 00:32:58,000
其实在你移动手指到键盘上

810
00:32:58,000 --> 00:33:00,000
和你移动手指到

811
00:33:00,000 --> 00:33:02,000
你要选的那个单词之间

812
00:33:02,000 --> 00:33:03,000
你已经在做这种切换了

813
00:33:03,000 --> 00:33:04,000
只不过你不会

814
00:33:04,000 --> 00:33:07,000
你会觉得这种切换非常自然

815
00:33:07,000 --> 00:33:10,000
但是当一个编辑器跳出来告诉你说

816
00:33:10,000 --> 00:33:12,000
你要明确的告诉我

817
00:33:12,000 --> 00:33:14,000
你要处于哪种状态之中的时候

818
00:33:14,000 --> 00:33:15,000
你可能就不习惯了

819
00:33:16,000 --> 00:33:17,000
对

820
00:33:17,000 --> 00:33:18,000
不过就像你说的

821
00:33:18,000 --> 00:33:20,000
现实生活中好像是没有一种

822
00:33:20,000 --> 00:33:24,000
没有一种非常明显的

823
00:33:24,000 --> 00:33:26,000
会切换状态的

824
00:33:29,000 --> 00:33:32,000
我唯一能想到的例子就是游戏

825
00:33:32,000 --> 00:33:32,000
比如说

826
00:33:32,000 --> 00:33:35,000
比如说有些游戏里面

827
00:33:35,000 --> 00:33:38,000
早期的命令征服

828
00:33:38,000 --> 00:33:41,000
你在战略地图上可以选择

829
00:33:41,000 --> 00:33:44,000
接下来要打北非的什么地方

830
00:33:44,000 --> 00:33:46,000
而你选择之后

831
00:33:46,000 --> 00:33:47,000
才开始关卡

832
00:33:47,000 --> 00:33:48,000
在这个关卡里面

833
00:33:48,000 --> 00:33:51,000
你才会去真正的进行这场战争

834
00:33:51,000 --> 00:33:52,000
也许这是一个

835
00:33:52,000 --> 00:33:55,000
可以类比模式

836
00:33:55,000 --> 00:33:57,000
但其实还是差的挺远

837
00:33:57,000 --> 00:33:58,000
对

838
00:33:58,000 --> 00:34:01,000
我就觉得这个是模态这个概念

839
00:34:01,000 --> 00:34:04,000
始终对于初学者来讲很大的门槛

840
00:34:04,000 --> 00:34:05,000
就是因为他没有在现实生活中

841
00:34:05,000 --> 00:34:09,000
有一个可以所谓可以隐喻的一个东西

842
00:34:09,000 --> 00:34:10,000
对

843
00:34:10,000 --> 00:34:11,000
但其实这也就是为什么

844
00:34:11,000 --> 00:34:18,000
很多人说 VI 是一种比较社群化的编辑器

845
00:34:18,000 --> 00:34:21,000
就是如果你身边没有人在用 VI

846
00:34:21,000 --> 00:34:23,000
然后你很难入门的

847
00:34:23,000 --> 00:34:24,000
你也很难入门

848
00:34:24,000 --> 00:34:24,000
对

849
00:34:24,000 --> 00:34:26,000
基本上大部分学 VI 的人

850
00:34:26,000 --> 00:34:29,000
都是在某种机缘巧合之下

851
00:34:29,000 --> 00:34:32,000
看到了某一个人在用

852
00:34:32,000 --> 00:34:35,000
发现这个人修改文章的速度

853
00:34:35,000 --> 00:34:36,000
像飞一样

854
00:34:36,000 --> 00:34:38,000
然后会惊讶地说

855
00:34:38,000 --> 00:34:39,000
这是什么编辑器

856
00:34:39,000 --> 00:34:40,000
然后那个人说

857
00:34:40,000 --> 00:34:42,000
用神圣的呛着说

858
00:34:42,000 --> 00:34:44,000
这是 Vim

859
00:34:44,000 --> 00:34:47,000
然后说我要学

860
00:34:47,000 --> 00:34:49,000
然后才会渐渐入门

861
00:34:49,000 --> 00:34:52,000
所以其实你

862
00:34:52,000 --> 00:34:53,000
当然我们也看到了

863
00:34:53,000 --> 00:34:54,000
Vim 这种方式

864
00:34:54,000 --> 00:34:56,000
其实非常叫做什么

865
00:34:56,000 --> 00:34:58,000
不 newbie friendly

866
00:34:58,000 --> 00:34:59,000
对

867
00:34:59,000 --> 00:35:02,000
也有一些尝试在改变这么一个状况

868
00:35:02,000 --> 00:35:06,000
就是先所谓的先把你骗进来再讲

869
00:35:06,000 --> 00:35:07,000
所以现在有那个

870
00:35:07,000 --> 00:35:08,000
特别是在

871
00:35:08,000 --> 00:35:09,000
我记得在

872
00:35:09,000 --> 00:35:11,000
就现在 Vim 的正式的版本里面

873
00:35:11,000 --> 00:35:13,000
有一个叫什么

874
00:35:13,000 --> 00:35:14,000
就是什么初学者模式

875
00:35:14,000 --> 00:35:18,000
就他默认是禁用掉这个模态的行为的

876
00:35:18,000 --> 00:35:21,000
就是你进去始终都是编辑状态

877
00:35:21,000 --> 00:35:21,000
嗯

878
00:35:21,000 --> 00:35:23,000
然后但是我自己是

879
00:35:23,000 --> 00:35:25,000
没有用过那种方式

880
00:35:25,000 --> 00:35:25,000
我也不知道

881
00:35:25,000 --> 00:35:26,000
对

882
00:35:26,000 --> 00:35:28,000
我们都态化

883
00:35:28,000 --> 00:35:30,000
他没有赶上这种 user friendly 的时代

884
00:35:30,000 --> 00:35:31,000
对

885
00:35:31,000 --> 00:35:33,000
这个就好像说

886
00:35:33,000 --> 00:35:36,000
我不知道那个的意义何在

887
00:35:36,000 --> 00:35:38,000
当你可以把初学者领进来

888
00:35:38,000 --> 00:35:41,000
但是你并没有让他认识到这个模态的

889
00:35:41,000 --> 00:35:42,000
本质在哪里

890
00:35:42,000 --> 00:35:44,000
其实好像也没有什么太大用处

891
00:35:44,000 --> 00:35:45,000
就是这样变的话

892
00:35:45,000 --> 00:35:47,000
另外一个普通编辑器也没有什么区别

893
00:35:48,000 --> 00:35:48,000
嗯

894
00:35:48,000 --> 00:35:51,000
你说起来你是怎么开始用 Vim

895
00:35:52,000 --> 00:35:53,000
这个问题

896
00:35:54,000 --> 00:35:56,000
我已经不太记得了

897
00:35:56,000 --> 00:35:58,000
我是在上

898
00:35:58,000 --> 00:36:00,000
上大学的时候

899
00:36:00,000 --> 00:36:03,000
在开始学用这个 Vim

900
00:36:03,000 --> 00:36:05,000
然后那个时候很奇怪

901
00:36:05,000 --> 00:36:05,000
因为我

902
00:36:06,000 --> 00:36:07,000
因为我大学是读商科的

903
00:36:07,000 --> 00:36:09,000
其实也没有什么编程的需求

904
00:36:10,000 --> 00:36:12,000
但我在想我为什么会在学它

905
00:36:14,000 --> 00:36:14,000
嗯

906
00:36:14,000 --> 00:36:15,000
你有看到

907
00:36:15,000 --> 00:36:17,000
你是像我说的那样看到有人在用

908
00:36:17,000 --> 00:36:20,000
然后被他勾引入门的吗

909
00:36:20,000 --> 00:36:22,000
应该是我有看到过某一个什么书

910
00:36:22,000 --> 00:36:24,000
或者某一个人怎么样在用

911
00:36:24,000 --> 00:36:25,000
但是我现在想不起来

912
00:36:25,000 --> 00:36:27,000
这个过程是怎么一回事

913
00:36:27,000 --> 00:36:28,000
OK

914
00:36:28,000 --> 00:36:31,000
不过可能跟什么 personality 的

915
00:36:31,000 --> 00:36:33,000
这些有一点关系

916
00:36:33,000 --> 00:36:35,000
就在相当长一段时间内

917
00:36:35,000 --> 00:36:38,000
我有一个人格上的缺陷

918
00:36:38,000 --> 00:36:39,000
就是

919
00:36:39,000 --> 00:36:42,000
我会去如果有一堆同类

920
00:36:42,000 --> 00:36:44,000
或者做同样事情的东西

921
00:36:44,000 --> 00:36:45,000
我一定要选出一个最好的

922
00:36:49,000 --> 00:36:50,000
就比如说现在你给我摆

923
00:36:50,000 --> 00:36:51,000
如果我啥不知道

924
00:36:51,000 --> 00:36:53,000
你现在摆了两个编辑在我面前

925
00:36:53,000 --> 00:36:54,000
我一定要比较这两个编辑器

926
00:36:55,000 --> 00:36:57,000
但这个最好是带引号的

927
00:36:57,000 --> 00:36:58,000
就是对于个人来讲

928
00:36:58,000 --> 00:36:59,000
我觉得是最好的

929
00:37:00,000 --> 00:37:02,000
你一定要找出一个适合你自己的

930
00:37:02,000 --> 00:37:05,000
对我一定要分出来一个

931
00:37:05,000 --> 00:37:08,000
我觉得这个比那个更加适合我

932
00:37:08,000 --> 00:37:09,000
或者就是在我地面

933
00:37:09,000 --> 00:37:10,000
这个是更好的

934
00:37:10,000 --> 00:37:12,000
当时就出现这么一个状态

935
00:37:12,000 --> 00:37:14,000
其实我是在 Vim 和 Memac 上面

936
00:37:14,000 --> 00:37:16,000
就是都还摇摆了一段时间

937
00:37:16,000 --> 00:37:16,000
后来觉得

938
00:37:16,000 --> 00:37:18,000
感觉 Vim 这种方式比较好

939
00:37:18,000 --> 00:37:20,000
然后我觉得就后来就选了

940
00:37:20,000 --> 00:37:22,000
一直在用 Vim

941
00:37:22,000 --> 00:37:23,000
现在就算是一个

942
00:37:23,000 --> 00:37:26,000
所谓的什么终极用户

943
00:37:26,000 --> 00:37:29,000
所以你是在有对比的前提之下

944
00:37:29,000 --> 00:37:30,000
习惯了 Vim

945
00:37:30,000 --> 00:37:32,000
或者说选择了 Vim

946
00:37:33,000 --> 00:37:33,000
对

947
00:37:34,000 --> 00:37:35,000
OK

948
00:37:35,000 --> 00:37:35,000
这个

949
00:37:36,000 --> 00:37:37,000
我的经历几乎不一样

950
00:37:37,000 --> 00:37:38,000
就是

951
00:37:39,000 --> 00:37:42,000
我在最开始接触到 VI 的时候

952
00:37:42,000 --> 00:37:44,000
我完全不知道 Vim X 是什么

953
00:37:45,000 --> 00:37:45,000
OK

954
00:37:45,000 --> 00:37:48,000
所以你是在一个无知的情况下选择了 Vim

955
00:37:49,000 --> 00:37:50,000
对我记得那是我

956
00:37:52,000 --> 00:37:55,000
可能初中毕业还是什么时候

957
00:37:55,000 --> 00:37:57,000
就又暴露年龄了

958
00:37:57,000 --> 00:37:59,000
你又可以说你有亲嘛

959
00:37:59,000 --> 00:37:59,000
对

960
00:38:00,000 --> 00:38:01,000
反正就是在中学

961
00:38:01,000 --> 00:38:02,000
当我还是一个中学生的时候

962
00:38:02,000 --> 00:38:04,000
我买了一本

963
00:38:05,000 --> 00:38:08,000
Unix 命令手册之类的一本书

964
00:38:09,000 --> 00:38:10,000
因为那个时候

965
00:38:10,000 --> 00:38:13,000
装了 Windows 和 Linux 的双系统

966
00:38:13,000 --> 00:38:14,000
那个时候 Linux 刚刚进入中国

967
00:38:14,000 --> 00:38:16,000
我记得装的是什么

968
00:38:16,000 --> 00:38:18,000
Slecware 还是什么

969
00:38:18,000 --> 00:38:21,000
现在几乎没有再碰的一个发行板

970
00:38:22,000 --> 00:38:24,000
然后迫不及待去学命令

971
00:38:27,000 --> 00:38:30,000
在这本命令手册里面有那么

972
00:38:30,000 --> 00:38:33,000
别的命令大概就是那么四五行五六行

973
00:38:33,000 --> 00:38:35,000
然后讲这个命令能干嘛

974
00:38:35,000 --> 00:38:36,000
然后给你两个例子

975
00:38:37,000 --> 00:38:39,000
而 Vi 的

976
00:38:39,000 --> 00:38:40,000
而轮到 Vi 这个命令的时候

977
00:38:40,000 --> 00:38:44,000
这个命令手册大概写了四五页

978
00:38:44,000 --> 00:38:44,000
对

979
00:38:44,000 --> 00:38:46,000
四五页

980
00:38:46,000 --> 00:38:47,000
我说 What the hell

981
00:38:47,000 --> 00:38:48,000
这是什么东西

982
00:38:48,000 --> 00:38:49,000
它只是一个编辑器而已

983
00:38:49,000 --> 00:38:50,000
至于吗

984
00:38:50,000 --> 00:38:52,000
然后用起来

985
00:38:52,000 --> 00:38:53,000
用了一段

986
00:38:53,000 --> 00:38:54,000
就刚开始用的时候

987
00:38:54,000 --> 00:38:55,000
也觉得匪夷所思

988
00:38:55,000 --> 00:38:56,000
但是

989
00:38:57,000 --> 00:38:59,000
大概过了两三个星期

990
00:38:59,000 --> 00:39:00,000
有那么一个

991
00:39:00,000 --> 00:39:02,000
就是所谓的 Eureka moment

992
00:39:02,000 --> 00:39:05,000
就是我明白了这么一个时刻

993
00:39:05,000 --> 00:39:06,000
对

994
00:39:06,000 --> 00:39:07,000
对误了

995
00:39:07,000 --> 00:39:08,000
然后

996
00:39:09,000 --> 00:39:10,000
也就从此一直用它

997
00:39:10,000 --> 00:39:11,000
天哪

998
00:39:11,000 --> 00:39:13,000
你初中就在看

999
00:39:13,000 --> 00:39:14,000
Unix 的书

1000
00:39:14,000 --> 00:39:15,000
你当时在哪里

1001
00:39:15,000 --> 00:39:16,000
在天津

1002
00:39:16,000 --> 00:39:17,000
OK

1003
00:39:17,000 --> 00:39:18,000
所以大城市还是好

1004
00:39:18,000 --> 00:39:19,000
你看像我们那种

1005
00:39:19,000 --> 00:39:20,000
我家乡

1006
00:39:20,000 --> 00:39:20,000
不

1007
00:39:20,000 --> 00:39:22,000
我是天津城乡集合部的

1008
00:39:22,000 --> 00:39:23,000
那也比我们那种

1009
00:39:23,000 --> 00:39:25,000
特别的偏远地区要好

1010
00:39:26,000 --> 00:39:26,000
好吧

1011
00:39:26,000 --> 00:39:27,000
太谦虚了

1012
00:39:27,000 --> 00:39:29,000
在那个时候没有互联网

1013
00:39:29,000 --> 00:39:31,000
就基本上所有的发行板

1014
00:39:31,000 --> 00:39:32,000
或者有互联网存在

1015
00:39:32,000 --> 00:39:33,000
有波号的

1016
00:39:33,000 --> 00:39:34,000
然后有发行板

1017
00:39:34,000 --> 00:39:35,000
因为另一个发行板存在

1018
00:39:35,000 --> 00:39:36,000
基本上一定要去

1019
00:39:37,000 --> 00:39:38,000
就类似于武道口

1020
00:39:38,000 --> 00:39:39,000
或者是

1021
00:39:39,000 --> 00:39:41,000
就天津市类似于武道口的地方

1022
00:39:41,000 --> 00:39:42,000
去淘才可以找到的

1023
00:39:42,000 --> 00:39:43,000
OK

1024
00:39:43,000 --> 00:39:44,000
对

1025
00:39:44,000 --> 00:39:47,000
那个时候已经是中文版还是英文版

1026
00:39:47,000 --> 00:39:49,000
那个时候没有中文版的 Linux

1027
00:39:50,000 --> 00:39:51,000
我记得有

1028
00:39:51,000 --> 00:39:52,000
有一个中文版 Linux 叫什么

1029
00:39:52,000 --> 00:39:53,000
红旗 Linux

1030
00:39:55,000 --> 00:39:56,000
对

1031
00:39:56,000 --> 00:39:57,000
确实有这么一个东西

1032
00:39:57,000 --> 00:39:58,000
其实是有这么一个东西

1033
00:39:58,000 --> 00:40:00,000
好像还在

1034
00:40:00,000 --> 00:40:01,000
真的吗

1035
00:40:01,000 --> 00:40:03,000
好像我上次见到

1036
00:40:03,000 --> 00:40:03,000
我忘了

1037
00:40:03,000 --> 00:40:05,000
还是已经转型了还是什么

1038
00:40:05,000 --> 00:40:06,000
这个我才不太清楚

1039
00:40:07,000 --> 00:40:07,000
我不知道

1040
00:40:07,000 --> 00:40:08,000
对

1041
00:40:08,000 --> 00:40:09,000
但那个时候

1042
00:40:10,000 --> 00:40:11,000
我可能是出于某种

1043
00:40:13,000 --> 00:40:14,000
因为

1044
00:40:14,000 --> 00:40:15,000
你用过 DOS 吗

1045
00:40:15,000 --> 00:40:16,000
肯定用过

1046
00:40:17,000 --> 00:40:17,000
对

1047
00:40:18,000 --> 00:40:19,000
所以你也不是很年轻

1048
00:40:19,000 --> 00:40:22,000
你知道真正年轻的人认为

1049
00:40:22,000 --> 00:40:24,000
电脑开机就应该自动显示

1050
00:40:25,000 --> 00:40:26,000
Windows 的桌面

1051
00:40:26,000 --> 00:40:27,000
然后和一个指针的

1052
00:40:27,000 --> 00:40:27,000
如果

1053
00:40:28,000 --> 00:40:29,000
跳出来一个

1054
00:40:30,000 --> 00:40:31,000
C 冒号

1055
00:40:33,000 --> 00:40:34,000
反斜杠大于号

1056
00:40:34,000 --> 00:40:35,000
然后一闪一闪的光标

1057
00:40:35,000 --> 00:40:36,000
他会觉得电脑坏了

1058
00:40:37,000 --> 00:40:37,000
对

1059
00:40:37,000 --> 00:40:39,000
那确实对大多数来说

1060
00:40:39,000 --> 00:40:40,000
那个时候就是

1061
00:40:40,000 --> 00:40:41,000
啊搞不定了怎么办

1062
00:40:42,000 --> 00:40:42,000
对

1063
00:40:42,000 --> 00:40:43,000
那么以电脑

1064
00:40:43,000 --> 00:40:46,000
以命令行入门的人来

1065
00:40:47,000 --> 00:40:47,000
对于

1066
00:40:48,000 --> 00:40:49,000
命令行时代

1067
00:40:49,000 --> 00:40:50,000
入门电脑的人来说

1068
00:40:50,000 --> 00:40:52,000
好像在学另外一个命令行

1069
00:40:52,000 --> 00:40:53,000
是很自然的事情

1070
00:40:53,000 --> 00:40:54,000
处理旁通吧

1071
00:40:54,000 --> 00:40:55,000
我觉得这个

1072
00:40:55,000 --> 00:40:55,000
这个应该是比较常见的

1073
00:40:55,000 --> 00:40:57,000
但现在好像已经

1074
00:40:57,000 --> 00:40:59,000
你已经很难

1075
00:40:59,000 --> 00:41:00,000
你甚至可以找到一种人

1076
00:41:00,000 --> 00:41:03,000
就是他只会用图形化界面来编程

1077
00:41:03,000 --> 00:41:03,000
大多数

1078
00:41:03,000 --> 00:41:04,000
如果切换到

1079
00:41:04,000 --> 00:41:05,000
用图形化的方式来编

1080
00:41:05,000 --> 00:41:06,000
啊

1081
00:41:06,000 --> 00:41:08,000
就是在图形在一个

1082
00:41:08,000 --> 00:41:10,000
Windows 开发者大部分都这样吧

1083
00:41:12,000 --> 00:41:13,000
就首先有个积和弹的问题

1084
00:41:13,000 --> 00:41:14,000
因为 Windows 上面

1085
00:41:14,000 --> 00:41:16,000
并没有一个好用的命令行

1086
00:41:16,000 --> 00:41:17,000
或者是你用的命令行

1087
00:41:17,000 --> 00:41:18,000
也干不了太多事

1088
00:41:18,000 --> 00:41:19,000
但现在他有那个什么

1089
00:41:19,000 --> 00:41:20,000
PowerShell

1090
00:41:20,000 --> 00:41:21,000
那个是另外一回事

1091
00:41:21,000 --> 00:41:22,000
就在相当长一段时间内

1092
00:41:22,000 --> 00:41:23,000
是这样子的

1093
00:41:25,000 --> 00:41:26,000
嗯

1094
00:41:26,000 --> 00:41:28,000
对应该或者说

1095
00:41:29,000 --> 00:41:29,000
你不能说

1096
00:41:29,000 --> 00:41:30,000
我觉得你不能说

1097
00:41:30,000 --> 00:41:31,000
就是我不是为

1098
00:41:31,000 --> 00:41:32,000
Windows 成全证明

1099
00:41:32,000 --> 00:41:33,000
但

1100
00:41:33,000 --> 00:41:35,000
你这个在这一点上

1101
00:41:35,000 --> 00:41:36,000
也许是因为

1102
00:41:36,000 --> 00:41:37,000
绝大多数人

1103
00:41:38,000 --> 00:41:40,000
在学习编程的时候

1104
00:41:40,000 --> 00:41:41,000
接触到的

1105
00:41:42,000 --> 00:41:43,000
操作系统是 Windows

1106
00:41:44,000 --> 00:41:45,000
你不能因此说

1107
00:41:45,000 --> 00:41:47,000
大多数 Windows 程序员

1108
00:41:47,000 --> 00:41:48,000
都只会在

1109
00:41:49,000 --> 00:41:50,000
图形界面下编程

1110
00:41:50,000 --> 00:41:51,000
我就说他

1111
00:41:51,000 --> 00:41:52,000
因为 Windows 上没有一个好用的

1112
00:41:52,000 --> 00:41:53,000
命令行界面嘛

1113
00:41:53,000 --> 00:41:54,000
就是说

1114
00:41:54,000 --> 00:41:55,000
就命令行的这么一个接口

1115
00:41:55,000 --> 00:41:57,000
那你也不能拿来干嘛对吧

1116
00:41:58,000 --> 00:41:58,000
OK

1117
00:41:59,000 --> 00:41:59,000
Yeah

1118
00:41:59,000 --> 00:42:00,000
Whatever

1119
00:42:00,000 --> 00:42:00,000
好你太远

1120
00:42:00,000 --> 00:42:01,000
对

1121
00:42:01,000 --> 00:42:02,000
我们这一次

1122
00:42:02,000 --> 00:42:04,000
我们这一次的 Flameboard 主题

1123
00:42:04,000 --> 00:42:05,000
还是编辑器之战

1124
00:42:05,000 --> 00:42:06,000
而不是操作系统之战

1125
00:42:07,000 --> 00:42:07,000
下次

1126
00:42:08,000 --> 00:42:08,000
对

1127
00:42:08,000 --> 00:42:09,000
下次

1128
00:42:09,000 --> 00:42:10,000
对

1129
00:42:10,000 --> 00:42:12,000
回到 Wim 的

1130
00:42:13,000 --> 00:42:14,000
我们刚才讲了

1131
00:42:14,000 --> 00:42:16,000
Wim 的操作模式对吧

1132
00:42:16,000 --> 00:42:16,000
对

1133
00:42:17,000 --> 00:42:19,000
那么除了模态编辑模式

1134
00:42:19,000 --> 00:42:21,000
是一个巨大的门槛之外

1135
00:42:21,000 --> 00:42:22,000
还有什么门槛

1136
00:42:22,000 --> 00:42:24,000
或者说还有什么点

1137
00:42:24,000 --> 00:42:25,000
让你觉得

1138
00:42:25,000 --> 00:42:26,000
或者说你会觉得

1139
00:42:26,000 --> 00:42:27,000
Wim 是非常不平均

1140
00:42:27,000 --> 00:42:28,000
人的一个地方

1141
00:42:28,000 --> 00:42:30,000
的一种工具

1142
00:42:30,000 --> 00:42:31,000
就是它的那个

1143
00:42:31,000 --> 00:42:34,000
配置和所谓的扩展

1144
00:42:34,000 --> 00:42:36,000
就是它有一个叫做语言

1145
00:42:36,000 --> 00:42:37,000
就是 Wim script

1146
00:42:39,000 --> 00:42:40,000
我觉得这个语言是相当古怪的

1147
00:42:40,000 --> 00:42:42,000
就哪怕以现在的

1148
00:42:42,000 --> 00:42:45,000
不管以现在还是古代的观点来说

1149
00:42:45,000 --> 00:42:45,000
我觉得它的语言

1150
00:42:45,000 --> 00:42:47,000
这门语言都是挺奇怪的

1151
00:42:48,000 --> 00:42:48,000
对

1152
00:42:48,000 --> 00:42:50,000
最简单的

1153
00:42:50,000 --> 00:42:50,000
最简单的

1154
00:42:50,000 --> 00:42:51,000
从审美的角度讲

1155
00:42:51,000 --> 00:42:54,000
Wim script 是一种非常潮流的语言

1156
00:42:55,000 --> 00:42:59,000
对这一点和 Emax 有非常大的区别

1157
00:42:59,000 --> 00:43:01,000
Emax 有一个非常优美的

1158
00:43:01,000 --> 00:43:03,000
Lisp 的语言作为它的基础

1159
00:43:04,000 --> 00:43:04,000
对

1160
00:43:04,000 --> 00:43:05,000
甚至

1161
00:43:05,000 --> 00:43:05,000
不是 Emax

1162
00:43:06,000 --> 00:43:06,000
甚至你都可以说

1163
00:43:06,000 --> 00:43:08,000
Emax 它并不是一个编辑器

1164
00:43:08,000 --> 00:43:09,000
它就是用这个

1165
00:43:09,000 --> 00:43:11,000
叫做 E-Lisp

1166
00:43:11,000 --> 00:43:14,000
写的一个

1167
00:43:15,000 --> 00:43:15,000
叫什么

1168
00:43:15,000 --> 00:43:16,000
操作系统

1169
00:43:18,000 --> 00:43:18,000
对

1170
00:43:19,000 --> 00:43:21,000
有一句很知名的话说

1171
00:43:21,000 --> 00:43:23,000
Emax 是一个操作系统

1172
00:43:23,000 --> 00:43:26,000
它只是偶尔能备用来修改文字

1173
00:43:26,000 --> 00:43:29,000
而 Wii 则是一个

1174
00:43:29,000 --> 00:43:31,000
基本上只能修改文字的

1175
00:43:31,000 --> 00:43:32,000
这么一个小工具而已

1176
00:43:32,000 --> 00:43:33,000
对

1177
00:43:33,000 --> 00:43:34,000
我觉得为什么这么讲

1178
00:43:35,000 --> 00:43:36,000
刚才讲 Wim script 这门语言

1179
00:43:36,000 --> 00:43:38,000
首先是比较古怪的

1180
00:43:38,000 --> 00:43:39,000
然后它的整个

1181
00:43:41,000 --> 00:43:42,000
它不光是语法古怪

1182
00:43:42,000 --> 00:43:44,000
它整个这种编程的

1183
00:43:44,000 --> 00:43:44,000
就是整个

1184
00:43:46,000 --> 00:43:47,000
这种运行环境也是比较

1185
00:43:48,000 --> 00:43:48,000
受限的

1186
00:43:48,000 --> 00:43:52,000
相对于 Emax 的 E-Lisp 而言

1187
00:43:53,000 --> 00:43:55,000
因为 E-Lisp 它的自由度和灵活度

1188
00:43:56,000 --> 00:43:58,000
不管是从语法的角度来讲

1189
00:43:58,000 --> 00:44:00,000
因为如果你知道 Lisp 是什么的话

1190
00:44:01,000 --> 00:44:02,000
你就知道大概会是什么一个状况

1191
00:44:02,000 --> 00:44:04,000
然后它的这个

1192
00:44:04,000 --> 00:44:07,000
就是可以供你修改或者是改

1193
00:44:08,000 --> 00:44:11,000
扩展的部分也是非常庞大的

1194
00:44:11,000 --> 00:44:13,000
这样导致一个结果就是

1195
00:44:13,000 --> 00:44:15,000
Wim 很多人就是拿来

1196
00:44:15,000 --> 00:44:17,000
只是做一个比较简单的编辑工具

1197
00:44:17,000 --> 00:44:19,000
就是所谓的小儿专

1198
00:44:20,000 --> 00:44:21,000
然后 Emax 就很多人来扩展

1199
00:44:21,000 --> 00:44:23,000
来做奇奇怪怪的事情

1200
00:44:23,000 --> 00:44:25,000
比如说有人来用 Emax 来写

1201
00:44:26,000 --> 00:44:27,000
聊天程序

1202
00:44:27,000 --> 00:44:28,000
网页浏览器

1203
00:44:29,000 --> 00:44:30,000
但是文字版本的

1204
00:44:30,000 --> 00:44:32,000
而且其实也可以插图的

1205
00:44:33,000 --> 00:44:34,000
对我在做功课的时候

1206
00:44:34,000 --> 00:44:36,000
还在酷尔上看到一个人

1207
00:44:36,000 --> 00:44:39,000
演示如何在半个小时之内

1208
00:44:39,000 --> 00:44:43,000
用 E-Lisp 来写一个

1209
00:44:44,000 --> 00:44:46,000
Spotify 的 client

1210
00:44:46,000 --> 00:44:48,000
就你可以在放音乐是吧

1211
00:44:48,000 --> 00:44:50,000
对他可以在 Emax 里面搜索

1212
00:44:50,000 --> 00:44:51,000
Spotify 上那首歌

1213
00:44:51,000 --> 00:44:53,000
然后在 Emax 里面告诉 Spotify

1214
00:44:53,000 --> 00:44:55,000
Spotify 把这首歌放出来

1215
00:44:55,000 --> 00:44:55,000
对

1216
00:44:56,000 --> 00:44:57,000
还可以写游戏

1217
00:44:57,000 --> 00:44:58,000
所以你知道

1218
00:44:59,000 --> 00:45:02,000
这样他的作用领域

1219
00:45:02,000 --> 00:45:04,000
就完全不仅仅是一个编辑器

1220
00:45:04,000 --> 00:45:05,000
那么简单

1221
00:45:05,000 --> 00:45:08,000
对 Emax 对于很多 Emax 用户来说

1222
00:45:08,000 --> 00:45:08,000
是一个

1223
00:45:09,000 --> 00:45:10,000
开机之后

1224
00:45:10,000 --> 00:45:11,000
不管有时候没事

1225
00:45:11,000 --> 00:45:12,000
先打开的一个工具

1226
00:45:12,000 --> 00:45:14,000
但是在 Wim 用户里面

1227
00:45:14,000 --> 00:45:15,000
很少会看到这种现象

1228
00:45:15,000 --> 00:45:18,000
所以他们其实并不需要

1229
00:45:18,000 --> 00:45:19,000
管是什么样的操作系统

1230
00:45:19,000 --> 00:45:21,000
那都是一个虚拟机而已

1231
00:45:21,000 --> 00:45:22,000
对不管怎么说

1232
00:45:22,000 --> 00:45:23,000
我先打开就是了

1233
00:45:23,000 --> 00:45:25,000
对先打开 Emax 之后

1234
00:45:25,000 --> 00:45:28,000
其他的底层系统就已经无所谓了

1235
00:45:28,000 --> 00:45:28,000
对

1236
00:45:30,000 --> 00:45:31,000
其实这也就导致就是说

1237
00:45:31,000 --> 00:45:33,000
在使用 Vi 的时候

1238
00:45:33,000 --> 00:45:35,000
你不得不大量的

1239
00:45:35,000 --> 00:45:38,000
去利用外部工具来完成

1240
00:45:39,000 --> 00:45:41,000
Vi 或者 Wim 本身不支持的一些功能

1241
00:45:42,000 --> 00:45:42,000
对

1242
00:45:42,000 --> 00:45:44,000
而在 Emax 里面

1243
00:45:44,000 --> 00:45:45,000
你基本上可以永远待在 Emax 里面

1244
00:45:46,000 --> 00:45:47,000
对比如说这里说一个

1245
00:45:47,000 --> 00:45:48,000
我最

1246
00:45:48,000 --> 00:45:50,000
我个人最常用的一个状况

1247
00:45:50,000 --> 00:45:51,000
就是因为我做的很多

1248
00:45:51,000 --> 00:45:53,000
都是服务器端的东西

1249
00:45:53,000 --> 00:45:53,000
那么

1250
00:45:53,000 --> 00:45:55,000
需要去远程调试对吧

1251
00:45:55,000 --> 00:45:56,000
然后远程调试的话

1252
00:45:56,000 --> 00:45:57,000
你要通过命令行

1253
00:45:57,000 --> 00:45:59,000
比如说 SSH 登录过去

1254
00:46:00,000 --> 00:46:01,000
但显然

1255
00:46:01,000 --> 00:46:02,000
至少到目前为止

1256
00:46:02,000 --> 00:46:03,000
我并没有发现

1257
00:46:03,000 --> 00:46:05,000
在 Wim 下面有一个可以

1258
00:46:05,000 --> 00:46:07,000
就是嵌入到 Wim 里面的

1259
00:46:07,000 --> 00:46:09,000
这么一个终端的一个插件

1260
00:46:09,000 --> 00:46:10,000
对吧

1261
00:46:10,000 --> 00:46:12,000
所以我还是得一边看一个

1262
00:46:12,000 --> 00:46:13,000
这个 Wim 编辑的窗口

1263
00:46:13,000 --> 00:46:15,000
然后一边再看一个

1264
00:46:15,000 --> 00:46:17,000
这个终端的这个窗口

1265
00:46:17,000 --> 00:46:19,000
去做这个操作

1266
00:46:19,000 --> 00:46:20,000
但这点我发现在 Emax

1267
00:46:20,000 --> 00:46:21,000
他们就完全不一样

1268
00:46:21,000 --> 00:46:23,000
因为就是直接全屏是一个

1269
00:46:24,000 --> 00:46:24,000
Emax 的窗口

1270
00:46:24,000 --> 00:46:26,000
然后里面再画出一部分

1271
00:46:26,000 --> 00:46:28,000
来做一个终端的插件

1272
00:46:28,000 --> 00:46:30,000
然后这样登录去操作这样

1273
00:46:30,000 --> 00:46:32,000
对在开 Wim 的时候

1274
00:46:32,000 --> 00:46:34,000
你很少有说

1275
00:46:34,000 --> 00:46:37,000
所有的工作都在 Wim 里面完成

1276
00:46:38,000 --> 00:46:40,000
的这样一种情形存在

1277
00:46:40,000 --> 00:46:40,000
嗯

1278
00:46:41,000 --> 00:46:42,000
但反过来在 Emax 里面

1279
00:46:42,000 --> 00:46:44,000
基本上进去就不需要再出来

1280
00:46:45,000 --> 00:46:45,000
呵呵

1281
00:46:45,000 --> 00:46:47,000
对甚至

1282
00:46:47,000 --> 00:46:49,000
就是甚至我在

1283
00:46:50,000 --> 00:46:53,000
找例子的时候找到这么一个

1284
00:46:55,000 --> 00:46:56,000
场景就是有一个

1285
00:46:56,000 --> 00:46:58,000
有一个应该是在实验室工作的人

1286
00:46:58,000 --> 00:46:59,000
他说

1287
00:47:00,000 --> 00:47:01,000
在 Emax 上面

1288
00:47:01,000 --> 00:47:03,000
因为 Emax 支持在

1289
00:47:04,000 --> 00:47:05,000
支持 X-Windows 系统

1290
00:47:06,000 --> 00:47:09,000
然后它可以同时连接到多个 X server

1291
00:47:09,000 --> 00:47:10,000
然后它可以做到这样一件事情

1292
00:47:10,000 --> 00:47:11,000
就是

1293
00:47:12,000 --> 00:47:14,000
它在办公室里面开一台电脑

1294
00:47:14,000 --> 00:47:16,000
然后在实验室里面又有几台电脑

1295
00:47:16,000 --> 00:47:18,000
它可以在办公室里面打开一个 Emax

1296
00:47:19,000 --> 00:47:20,000
然后远程

1297
00:47:20,000 --> 00:47:21,000
告诉

1298
00:47:21,000 --> 00:47:25,000
实验室里面某一台电脑上面的 X-Windows

1299
00:47:26,000 --> 00:47:27,000
server 出现

1300
00:47:28,000 --> 00:47:29,000
请出现一个 Emax 窗口

1301
00:47:30,000 --> 00:47:32,000
它的办公室做完这件事情之后

1302
00:47:32,000 --> 00:47:34,000
走到实验室

1303
00:47:35,000 --> 00:47:36,000
做实验

1304
00:47:36,000 --> 00:47:39,000
然后就可以转身在实验室的电脑上

1305
00:47:39,000 --> 00:47:41,000
在它刚刚打开的那个办公室

1306
00:47:41,000 --> 00:47:43,000
Emax 窗口里面输入数据

1307
00:47:44,000 --> 00:47:46,000
我觉得这是一个非常

1308
00:47:46,000 --> 00:47:47,000
这是一件非常

1309
00:47:47,000 --> 00:47:49,000
匪夷所思的功能

1310
00:47:49,000 --> 00:47:49,000
但

1311
00:47:50,000 --> 00:47:51,000
所以你看这个

1312
00:47:51,000 --> 00:47:53,000
但其实你是看它这样

1313
00:47:53,000 --> 00:47:54,000
就是或者说

1314
00:47:54,000 --> 00:47:58,000
Emax 用户在很多年以前就已经实现了现在

1315
00:47:58,000 --> 00:48:00,000
苹果所谓的叫什么 continuity 的功能了

1316
00:48:01,000 --> 00:48:03,000
对 handle work 这不就是

1317
00:48:03,000 --> 00:48:06,000
对虽然还是有一个人工干预的

1318
00:48:06,000 --> 00:48:07,000
对 handle off

1319
00:48:07,000 --> 00:48:09,000
虽然有一个人工干预的过程

1320
00:48:09,000 --> 00:48:11,000
但它已经在那了

1321
00:48:11,000 --> 00:48:13,000
就是如果你懂得怎么用的话

1322
00:48:13,000 --> 00:48:13,000
你是可以实现的

1323
00:48:13,000 --> 00:48:14,000
而且很快

1324
00:48:16,000 --> 00:48:17,000
但是反而来如果用 Vim 的话

1325
00:48:17,000 --> 00:48:18,000
这种功能

1326
00:48:18,000 --> 00:48:21,000
你可能唯一能做的就是你走到实验室

1327
00:48:21,000 --> 00:48:22,000
然后用实验室的

1328
00:48:22,000 --> 00:48:26,000
SSH 连接到办公室的电脑上

1329
00:48:26,000 --> 00:48:29,000
然后在那边编辑你刚才编辑的文件

1330
00:48:29,000 --> 00:48:30,000
你甚至不能重用

1331
00:48:31,000 --> 00:48:32,000
一个 Vim session

1332
00:48:33,000 --> 00:48:35,000
或者说你必须用

1333
00:48:35,000 --> 00:48:36,000
比如说 TMAX 这样的东西

1334
00:48:36,000 --> 00:48:39,000
等一下 Vim 好像有一个这个 server mode

1335
00:48:39,000 --> 00:48:40,000
我记得

1336
00:48:40,000 --> 00:48:41,000
但是我从来没有用过

1337
00:48:41,000 --> 00:48:42,000
我也没有用过

1338
00:48:42,000 --> 00:48:43,000
对我记得有这么一个东西

1339
00:48:43,000 --> 00:48:44,000
确实是可以这么干

1340
00:48:45,000 --> 00:48:47,000
这里要解释一下什么是 server mode

1341
00:48:48,000 --> 00:48:49,000
我们常讲的编辑器

1342
00:48:49,000 --> 00:48:51,000
其实如果你大体来分

1343
00:48:51,000 --> 00:48:52,000
可以分为两部分

1344
00:48:52,000 --> 00:48:54,000
就一个是所谓的前端

1345
00:48:54,000 --> 00:48:55,000
就它展示给你那些字符

1346
00:48:55,000 --> 00:48:56,000
然后那些

1347
00:48:57,000 --> 00:48:58,000
你看得到了部分

1348
00:48:58,000 --> 00:48:59,000
那个那一部分

1349
00:48:59,000 --> 00:49:01,000
然后它其实后面跑的是一个所谓的

1350
00:49:01,000 --> 00:49:03,000
编辑器的内核

1351
00:49:03,000 --> 00:49:05,000
然后内核其实在操作

1352
00:49:05,000 --> 00:49:06,000
内存中边间的一块区域

1353
00:49:07,000 --> 00:49:07,000
对吧

1354
00:49:08,000 --> 00:49:09,000
然后同时是磁盘上的一个文件

1355
00:49:09,000 --> 00:49:10,000
对通常的话

1356
00:49:10,000 --> 00:49:12,000
我这两块是在同一个进程

1357
00:49:12,000 --> 00:49:14,000
或者同一台机器上面的

1358
00:49:14,000 --> 00:49:15,000
至少是在同一台机器上面的

1359
00:49:15,000 --> 00:49:17,000
就是你编辑本地的文件

1360
00:49:17,000 --> 00:49:20,000
然后刚才讲的 server mode

1361
00:49:20,000 --> 00:49:22,000
其实可以让你把这两个分开

1362
00:49:22,000 --> 00:49:23,000
就是你可以在

1363
00:49:23,000 --> 00:49:25,000
比如说本地启动一个 Wim 的前端

1364
00:49:26,000 --> 00:49:28,000
然后它连接的不是你本地的

1365
00:49:28,000 --> 00:49:29,000
它编辑的不是你一个本地的文件

1366
00:49:29,000 --> 00:49:32,000
而是连接到远程的一台

1367
00:49:32,000 --> 00:49:33,000
Wim 的 server 上面去

1368
00:49:33,000 --> 00:49:34,000
然后通过

1369
00:49:35,000 --> 00:49:36,000
这种方式去编

1370
00:49:36,000 --> 00:49:38,000
去控制远程那台 server

1371
00:49:38,000 --> 00:49:39,000
编辑它的内存

1372
00:49:39,000 --> 00:49:41,000
或者是中的一个区块

1373
00:49:41,000 --> 00:49:42,000
去编辑它的一个文件

1374
00:49:43,000 --> 00:49:44,000
所以其实也是这样做

1375
00:49:44,000 --> 00:49:46,000
但是在现实中

1376
00:49:46,000 --> 00:49:48,000
我似乎还没有发现

1377
00:49:48,000 --> 00:49:50,000
有什么场合能用到这一点

1378
00:49:51,000 --> 00:49:52,000
对

1379
00:49:52,000 --> 00:49:54,000
因为 Wim 的使用模式

1380
00:49:54,000 --> 00:49:55,000
和 E-max 使用模式

1381
00:49:55,000 --> 00:49:57,000
基本上就是两个极端

1382
00:49:57,000 --> 00:49:58,000
Wim 就是

1383
00:49:58,000 --> 00:50:00,000
Wim 非常小

1384
00:50:00,000 --> 00:50:02,000
启动非常快

1385
00:50:02,000 --> 00:50:03,000
就像一个命令一样

1386
00:50:04,000 --> 00:50:05,000
一打 Wim

1387
00:50:05,000 --> 00:50:07,000
它立刻就会弹出来一个窗口

1388
00:50:07,000 --> 00:50:09,000
而 E-max 则是一个启动

1389
00:50:09,000 --> 00:50:11,000
相对来说比较慢的这么一个工具

1390
00:50:11,000 --> 00:50:14,000
所以使用 Wim 的习惯

1391
00:50:14,000 --> 00:50:17,000
也就是多次的进入 Wim

1392
00:50:17,000 --> 00:50:18,000
多次的切出 Wim

1393
00:50:18,000 --> 00:50:21,000
然后把 Wim 作为你

1394
00:50:21,000 --> 00:50:24,000
一系列工具之中的一个组件使用

1395
00:50:24,000 --> 00:50:25,000
而 E-max 反过来

1396
00:50:25,000 --> 00:50:27,000
基本上就是你进去之后

1397
00:50:27,000 --> 00:50:28,000
就想办法不要从里面出

1398
00:50:29,000 --> 00:50:31,000
一切功能或者一切工具

1399
00:50:31,000 --> 00:50:34,000
尽量在 E-max 里面内部接取

1400
00:50:34,000 --> 00:50:35,000
所以 Wim 应该是一个

1401
00:50:35,000 --> 00:50:37,000
你的系统里面的长铸进程

1402
00:50:38,000 --> 00:50:40,000
你说 E-max 应该是长铸进程吧

1403
00:50:40,000 --> 00:50:41,000
对对对

1404
00:50:41,000 --> 00:50:44,000
E-max 应该是你的系统的一个长铸进程

1405
00:50:45,000 --> 00:50:48,000
对你在 E-max 里面

1406
00:50:48,000 --> 00:50:49,000
基本上可以做任何事情

1407
00:50:49,000 --> 00:50:50,000
比如说看当前的日历

1408
00:50:50,000 --> 00:50:51,000
这种小儿科的事情

1409
00:50:51,000 --> 00:50:52,000
全都可以在 E-max 里面完成

1410
00:50:53,000 --> 00:50:55,000
甚至还可以玩俄罗斯方块

1411
00:50:56,000 --> 00:50:57,000
E-max 内置了俄罗斯方块功能

1412
00:50:58,000 --> 00:51:03,000
这也是 Wim 所缺乏一个特征

1413
00:51:04,000 --> 00:51:07,000
还有一点我觉得我一直想挺羡慕的

1414
00:51:07,000 --> 00:51:09,000
就 E-max 的特性

1415
00:51:09,000 --> 00:51:11,000
就是 E-max 的图形界面模式

1416
00:51:11,000 --> 00:51:15,000
它是可以使用多种字体组合的

1417
00:51:17,000 --> 00:51:17,000
OK

1418
00:51:17,000 --> 00:51:19,000
那这个要比 Wim 好多了

1419
00:51:19,000 --> 00:51:19,000
对

1420
00:51:19,000 --> 00:51:20,000
然后这个有什么用呢

1421
00:51:20,000 --> 00:51:23,000
就是之前这个是我看我

1422
00:51:23,000 --> 00:51:25,000
一个朋友在大学的时候用过的

1423
00:51:25,000 --> 00:51:26,000
就是他当时

1424
00:51:26,000 --> 00:51:27,000
他

1425
00:51:27,000 --> 00:51:29,000
我

1426
00:51:29,000 --> 00:51:31,000
就他写那个论文

1427
00:51:31,000 --> 00:51:33,000
或者看论文写文档的时候

1428
00:51:33,000 --> 00:51:35,000
他会用那个 Lite 来写

1429
00:51:36,000 --> 00:51:38,000
然后他是一个 E-max 用户

1430
00:51:38,000 --> 00:51:40,000
然后我去他那里看的时候

1431
00:51:40,000 --> 00:51:41,000
就会发现

1432
00:51:41,000 --> 00:51:43,000
他的那个界面的

1433
00:51:44,000 --> 00:51:47,000
他可以用某一种 E-max 的 Mode

1434
00:51:47,000 --> 00:51:49,000
直接展示出

1435
00:51:49,000 --> 00:51:51,000
比如说这是一个标题

1436
00:51:51,000 --> 00:51:52,000
它会大一点的字

1437
00:51:52,000 --> 00:51:53,000
然后这个是正文

1438
00:51:53,000 --> 00:51:53,000
它会小

1439
00:51:53,000 --> 00:51:55,000
它会是一个正文的字体

1440
00:51:55,000 --> 00:51:56,000
然后它是一个二级标题

1441
00:51:56,000 --> 00:51:58,000
它又会是介于大标题

1442
00:51:58,000 --> 00:51:59,000
和正文之间的一个字号

1443
00:51:59,000 --> 00:52:01,000
或者另外一种形态的字

1444
00:52:01,000 --> 00:52:01,000
就是他

1445
00:52:01,000 --> 00:52:03,000
伴所见其所得

1446
00:52:03,000 --> 00:52:03,000
对

1447
00:52:03,000 --> 00:52:04,000
就是这个意思

1448
00:52:04,000 --> 00:52:05,000
而且他可以在

1449
00:52:05,000 --> 00:52:07,000
因为 E-max 的图形界面

1450
00:52:07,000 --> 00:52:08,000
其实非常牛逼

1451
00:52:08,000 --> 00:52:09,000
他可以插入什么

1452
00:52:09,000 --> 00:52:09,000
刚刚讲

1453
00:52:09,000 --> 00:52:11,000
因为播音乐这种小儿可以做

1454
00:52:11,000 --> 00:52:12,000
还可以插入图形

1455
00:52:13,000 --> 00:52:14,000
他甚至可以通过

1456
00:52:14,000 --> 00:52:16,000
一个插件

1457
00:52:16,000 --> 00:52:18,000
就是 E-max 插件

1458
00:52:18,000 --> 00:52:19,000
即时的渲染

1459
00:52:19,000 --> 00:52:21,000
你在 E-max 的文档里面

1460
00:52:21,000 --> 00:52:24,000
输入的一条 Lite 的公式

1461
00:52:24,000 --> 00:52:25,000
然后把那个渲染的结果

1462
00:52:25,000 --> 00:52:27,000
以图片的形式展现在那里

1463
00:52:27,000 --> 00:52:28,000
实现一个

1464
00:52:28,000 --> 00:52:29,000
基本上实现一个所见

1465
00:52:29,000 --> 00:52:30,000
其所得的

1466
00:52:30,000 --> 00:52:32,000
这边一个 Lite 的编辑的结果

1467
00:52:34,000 --> 00:52:35,000
这个是当时

1468
00:52:35,000 --> 00:52:36,000
这个是 Wim 永远做不到的

1469
00:52:36,000 --> 00:52:37,000
对

1470
00:52:37,000 --> 00:52:38,000
因为 Wim 的

1471
00:52:38,000 --> 00:52:39,000
他是一个

1472
00:52:39,000 --> 00:52:40,000
就不管你怎么改

1473
00:52:40,000 --> 00:52:42,000
他始终是默认是一个

1474
00:52:42,000 --> 00:52:43,000
单一字体界面的

1475
00:52:43,000 --> 00:52:44,000
而且他的那个

1476
00:52:44,000 --> 00:52:45,000
都是一个所谓的懂宽字体

1477
00:52:46,000 --> 00:52:48,000
就是你在唯一能做的

1478
00:52:48,000 --> 00:52:49,000
就是语法高亮

1479
00:52:49,000 --> 00:52:50,000
去改变自己的颜色

1480
00:52:50,000 --> 00:52:51,000
或者加什么下画线

1481
00:52:51,000 --> 00:52:52,000
之类的东西

1482
00:52:53,000 --> 00:52:54,000
但是你并不能说

1483
00:52:54,000 --> 00:52:56,000
你在同一个文档中的

1484
00:52:56,000 --> 00:52:57,000
一部分采用一种字体

1485
00:52:57,000 --> 00:52:58,000
然后另外一部分采用另一种字体

1486
00:52:58,000 --> 00:53:01,000
当然你更加不能插入图片

1487
00:53:01,000 --> 00:53:02,000
因为他根本没有这种接口

1488
00:53:03,000 --> 00:53:04,000
所以这一点上

1489
00:53:04,000 --> 00:53:05,000
我觉得

1490
00:53:05,000 --> 00:53:08,000
所以其实从这角度来讲

1491
00:53:08,000 --> 00:53:10,000
你并不能把 Wim 和 Vmax

1492
00:53:10,000 --> 00:53:15,000
作为两个同等的产品来对比

1493
00:53:15,000 --> 00:53:16,000
他就是所谓的

1494
00:53:16,000 --> 00:53:18,000
苹果和橘子的区别

1495
00:53:18,000 --> 00:53:19,000
对

1496
00:53:20,000 --> 00:53:20,000
这是好像

1497
00:53:23,000 --> 00:53:24,000
其实但是这种比较

1498
00:53:24,000 --> 00:53:26,000
仍旧是有意义的

1499
00:53:26,000 --> 00:53:26,000
或者说仍旧是

1500
00:53:26,000 --> 00:53:28,000
时常被拿出来说的

1501
00:53:28,000 --> 00:53:30,000
因为就有点像

1502
00:53:30,000 --> 00:53:33,000
Android 和 iPhone 之间的差别

1503
00:53:33,000 --> 00:53:34,000
iPhone 同时是硬件

1504
00:53:34,000 --> 00:53:35,000
同时是软件

1505
00:53:35,000 --> 00:53:36,000
同时是一家公司

1506
00:53:36,000 --> 00:53:38,000
所提供的一些的服务

1507
00:53:38,000 --> 00:53:40,000
但 Android 只是一个操作系统而已

1508
00:53:40,000 --> 00:53:42,000
但人们即便如此

1509
00:53:42,000 --> 00:53:44,000
人们还是会把他们拿出来

1510
00:53:44,000 --> 00:53:44,000
相对明白的

1511
00:53:45,000 --> 00:53:49,000
但 Wim 和 Emax 之间的差别

1512
00:53:49,000 --> 00:53:50,000
大概大致类似

1513
00:53:50,000 --> 00:53:52,000
但我仍旧认为

1514
00:53:52,000 --> 00:53:53,000
这样的比较还是有意义的

1515
00:53:54,000 --> 00:53:56,000
就反正就刚才说的那种

1516
00:53:56,000 --> 00:53:58,000
那个 Emax 能做的很多事情

1517
00:53:58,000 --> 00:53:59,000
其实 Wim 是做不到的

1518
00:53:59,000 --> 00:54:00,000
就我有时候还是挺羡慕的

1519
00:54:00,000 --> 00:54:03,000
然后也尝试过很多次

1520
00:54:03,000 --> 00:54:04,000
去学那个 Emax

1521
00:54:04,000 --> 00:54:07,000
但是因为模态

1522
00:54:07,000 --> 00:54:08,000
因为没有模态这个东西

1523
00:54:08,000 --> 00:54:11,000
也一直就是觉得挺沮丧的

1524
00:54:11,000 --> 00:54:12,000
不过后来有

1525
00:54:12,000 --> 00:54:13,000
我向你介绍一个插件

1526
00:54:13,000 --> 00:54:14,000
叫做 EVO

1527
00:54:15,000 --> 00:54:15,000
是 EVO

1528
00:54:15,000 --> 00:54:16,000
还是

1529
00:54:17,000 --> 00:54:18,000
不知道

1530
00:54:18,000 --> 00:54:19,000
叫什么来的

1531
00:54:20,000 --> 00:54:21,000
反正大概意思就是

1532
00:54:21,000 --> 00:54:24,000
Emax 有一个插件

1533
00:54:24,000 --> 00:54:25,000
刚才讲了可以插件

1534
00:54:25,000 --> 00:54:27,000
它完全模拟了

1535
00:54:28,000 --> 00:54:30,000
Wim 的模态系统

1536
00:54:30,000 --> 00:54:33,000
然后在 Emax 里面也可以做

1537
00:54:33,000 --> 00:54:35,000
然后后来我据说

1538
00:54:35,000 --> 00:54:38,000
我这个没有真心自求证过

1539
00:54:38,000 --> 00:54:39,000
据说是

1540
00:54:39,000 --> 00:54:42,000
比 Wim 自己的模态做得还好

1541
00:54:43,000 --> 00:54:46,000
这就是 VI 和 Emax

1542
00:54:46,000 --> 00:54:48,000
的最大的一个区别

1543
00:54:48,000 --> 00:54:50,000
就是 Emax 可以成为 Wim

1544
00:54:50,000 --> 00:54:52,000
但是 Wim 永远不会成为 Emax

1545
00:54:52,000 --> 00:54:53,000
对

1546
00:54:53,000 --> 00:54:55,000
这好像有点自黑了一点

1547
00:54:56,000 --> 00:54:57,000
也没有吧

1548
00:54:57,000 --> 00:54:58,000
我觉得这还是

1549
00:54:58,000 --> 00:54:59,000
还蛮值得自豪的

1550
00:54:59,000 --> 00:55:00,000
因为

1551
00:55:01,000 --> 00:55:02,000
反过来想

1552
00:55:02,000 --> 00:55:03,000
Emax 的用户可以说

1553
00:55:03,000 --> 00:55:05,000
我们可以做这个可以做那个

1554
00:55:05,000 --> 00:55:06,000
可是我们可以说

1555
00:55:08,000 --> 00:55:09,000
我们只需要

1556
00:55:09,000 --> 00:55:11,000
集中注意力做一件事就好了

1557
00:55:11,000 --> 00:55:12,000
那其他

1558
00:55:13,000 --> 00:55:13,000
需要

1559
00:55:14,000 --> 00:55:15,000
其他的功能

1560
00:55:15,000 --> 00:55:17,000
就交给其他的

1561
00:55:17,000 --> 00:55:18,000
工具去实现就好了

1562
00:55:18,000 --> 00:55:19,000
对回到最开始说的

1563
00:55:19,000 --> 00:55:20,000
这是一种哲学

1564
00:55:20,000 --> 00:55:22,000
然后使用哲学的拥有

1565
00:55:22,000 --> 00:55:23,000
或者思维状态的一个

1566
00:55:23,000 --> 00:55:23,000
对

1567
00:55:23,000 --> 00:55:24,000
一个差别吧

1568
00:55:24,000 --> 00:55:26,000
对我觉得我们都是那种人

1569
00:55:26,000 --> 00:55:27,000
就是喜欢

1570
00:55:27,000 --> 00:55:28,000
一个很小的

1571
00:55:28,000 --> 00:55:29,000
所以的 unix 哲学

1572
00:55:29,000 --> 00:55:31,000
就是 Do one thing and do it well

1573
00:55:32,000 --> 00:55:32,000
对

1574
00:55:32,000 --> 00:55:34,000
然后其实我在

1575
00:55:34,000 --> 00:55:35,000
就是我们在本质上

1576
00:55:35,000 --> 00:55:36,000
都是排斥那种所谓

1577
00:55:36,000 --> 00:55:37,000
大而全的方案的

1578
00:55:37,000 --> 00:55:39,000
比如上次你讲

1579
00:55:39,000 --> 00:55:41,000
那个 System D 的那个时候

1580
00:55:41,000 --> 00:55:44,000
我应该我也能也能够感觉得到

1581
00:55:44,000 --> 00:55:46,000
你是不太喜欢那套方案的

1582
00:55:47,000 --> 00:55:47,000
对

1583
00:55:47,000 --> 00:55:48,000
但其实

1584
00:55:49,000 --> 00:55:51,000
如果去追溯这两个

1585
00:55:51,000 --> 00:55:52,000
工具的出生的话

1586
00:55:52,000 --> 00:55:54,000
你就会意识到

1587
00:55:54,000 --> 00:55:56,000
VI 其实就是

1588
00:55:56,000 --> 00:55:57,000
从一开始

1589
00:55:57,000 --> 00:55:58,000
从 1976 年

1590
00:55:58,000 --> 00:56:00,000
它就是 unix 的一部分

1591
00:56:01,000 --> 00:56:04,000
而 emacs 是由 GNU 的创始人所写的

1592
00:56:04,000 --> 00:56:05,000
Richer Stolman

1593
00:56:05,000 --> 00:56:07,000
对 RMS

1594
00:56:07,000 --> 00:56:08,000
就是

1595
00:56:08,000 --> 00:56:09,000
Stolman 写这个东西的时候

1596
00:56:09,000 --> 00:56:10,000
它其实

1597
00:56:11,000 --> 00:56:13,000
当然它仍旧是在

1598
00:56:13,000 --> 00:56:16,000
一台 unix 的机器上所写出来的

1599
00:56:16,000 --> 00:56:17,000
可是

1600
00:56:17,000 --> 00:56:19,000
我觉得 emacs 这个东西

1601
00:56:19,000 --> 00:56:21,000
本质上还是违背 unix 哲学

1602
00:56:21,000 --> 00:56:22,000
对它是一个

1603
00:56:22,000 --> 00:56:23,000
就是所谓的大

1604
00:56:23,000 --> 00:56:24,000
叫什么大教堂吗

1605
00:56:25,000 --> 00:56:25,000
对

1606
00:56:25,000 --> 00:56:27,000
它就是一个

1607
00:56:28,000 --> 00:56:28,000
Cassadal

1608
00:56:28,000 --> 00:56:29,000
对

1609
00:56:30,000 --> 00:56:31,000
所以

1610
00:56:32,000 --> 00:56:33,000
但是有时候你还不得不承认它

1611
00:56:33,000 --> 00:56:35,000
有时候你有一个

1612
00:56:35,000 --> 00:56:36,000
就是

1613
00:56:37,000 --> 00:56:38,000
像那种小儿精的时候

1614
00:56:38,000 --> 00:56:40,000
有时候所谓的边界的问题

1615
00:56:40,000 --> 00:56:40,000
是比较难

1616
00:56:40,000 --> 00:56:41,000
就配合起来

1617
00:56:41,000 --> 00:56:42,000
会有各种各样的

1618
00:56:42,000 --> 00:56:44,000
不让你不爽的地方

1619
00:56:44,000 --> 00:56:45,000
比如说

1620
00:56:45,000 --> 00:56:47,000
那个 Vim 你要去调一些外部的工具

1621
00:56:47,000 --> 00:56:48,000
那么你知道

1622
00:56:48,000 --> 00:56:49,000
那个在 unix 里面

1623
00:56:49,000 --> 00:56:51,000
这种工具之间会像调

1624
00:56:51,000 --> 00:56:52,000
一般都只能通过

1625
00:56:52,000 --> 00:56:54,000
那种纯文本去做这个

1626
00:56:54,000 --> 00:56:56,000
输出的这种事情来

1627
00:56:56,000 --> 00:56:57,000
来进行一些交互吗

1628
00:56:57,000 --> 00:56:58,000
对

1629
00:56:58,000 --> 00:56:59,000
但是

1630
00:56:59,000 --> 00:57:01,000
而且它缺乏一种

1631
00:57:01,000 --> 00:57:02,000
就是比较

1632
00:57:02,000 --> 00:57:04,000
unified 的这样一种

1633
00:57:04,000 --> 00:57:05,000
这样一种调用方式

1634
00:57:05,000 --> 00:57:05,000
比如说

1635
00:57:08,000 --> 00:57:09,000
我刚刚一个小时之前用到的

1636
00:57:09,000 --> 00:57:10,000
就是

1637
00:57:10,000 --> 00:57:13,000
比如说我要在 Vim 里面格式化 Jason

1638
00:57:14,000 --> 00:57:15,000
对

1639
00:57:15,000 --> 00:57:17,000
我现在比较流行的

1640
00:57:17,000 --> 00:57:17,000
或者比较

1641
00:57:18,000 --> 00:57:20,000
de facto 的优雅解决方案

1642
00:57:20,000 --> 00:57:23,000
是调用 Python 来格式化 Jason

1643
00:57:23,000 --> 00:57:25,000
那么你就会意识到

1644
00:57:25,000 --> 00:57:26,000
你要在一个

1645
00:57:26,000 --> 00:57:28,000
你叫在 Vim 这样一种工具里面

1646
00:57:28,000 --> 00:57:29,000
调用一个外部工具

1647
00:57:29,000 --> 00:57:31,000
而这个外部工具的输出

1648
00:57:32,000 --> 00:57:34,000
以及它的输入

1649
00:57:34,000 --> 00:57:36,000
其实都是

1650
00:57:36,000 --> 00:57:37,000
某种

1651
00:57:38,000 --> 00:57:40,000
跨进程完成的这样一种

1652
00:57:40,000 --> 00:57:41,000
对

1653
00:57:41,000 --> 00:57:42,000
这样一种结果

1654
00:57:42,000 --> 00:57:43,000
你会觉得非常的

1655
00:57:44,000 --> 00:57:44,000
有

1656
00:57:44,000 --> 00:57:46,000
一种很不爽的感觉

1657
00:57:46,000 --> 00:57:48,000
我很难具体描述他们

1658
00:57:48,000 --> 00:57:48,000
但是

1659
00:57:49,000 --> 00:57:50,000
在 emacs 下面

1660
00:57:50,000 --> 00:57:52,000
你可能只需要敲几个组合键就完了

1661
00:57:52,000 --> 00:57:53,000
对

1662
00:57:53,000 --> 00:57:53,000
而且

1663
00:57:53,000 --> 00:57:54,000
然后整个过程最好

1664
00:57:54,000 --> 00:57:56,000
你不会觉得自己离开了一次编辑器

1665
00:57:56,000 --> 00:57:58,000
但是在 Vim 里面你会

1666
00:57:58,000 --> 00:57:59,000
很明确的

1667
00:57:59,000 --> 00:58:00,000
感觉到

1668
00:58:00,000 --> 00:58:02,000
刚才这个东西是用 Python 来做的

1669
00:58:03,000 --> 00:58:03,000
对

1670
00:58:03,000 --> 00:58:05,000
我觉得这可能跟 emacs 的

1671
00:58:05,000 --> 00:58:08,000
叫做什么 Lisp 的根基有一点

1672
00:58:08,000 --> 00:58:09,000
或多或少的关系

1673
00:58:10,000 --> 00:58:11,000
你知道在

1674
00:58:13,000 --> 00:58:16,000
曾经有一种操作系统是用 Lisp 写的

1675
00:58:16,000 --> 00:58:17,000
就曾经有一种硬件

1676
00:58:17,000 --> 00:58:20,000
是专门为了跑 Lisp 操作系统的

1677
00:58:20,000 --> 00:58:21,000
Lisp Machine

1678
00:58:21,000 --> 00:58:21,000
对

1679
00:58:21,000 --> 00:58:21,000
然后

1680
00:58:22,000 --> 00:58:23,000
它里面的所有状态

1681
00:58:23,000 --> 00:58:25,000
都是可以被

1682
00:58:25,000 --> 00:58:26,000
修改的

1683
00:58:26,000 --> 00:58:27,000
可以被即时修改的

1684
00:58:28,000 --> 00:58:30,000
Lisp 这种语言最大的魅力也就在于

1685
00:58:30,000 --> 00:58:31,000
它的

1686
00:58:31,000 --> 00:58:32,000
它就像围棋一样

1687
00:58:32,000 --> 00:58:33,000
它的基础非常简单

1688
00:58:33,000 --> 00:58:34,000
但是

1689
00:58:34,000 --> 00:58:36,000
它可以不停的修改自身

1690
00:58:36,000 --> 00:58:37,000
然后可以不停的

1691
00:58:37,000 --> 00:58:40,000
在运行时添加语言本身的功能

1692
00:58:40,000 --> 00:58:40,000
对

1693
00:58:40,000 --> 00:58:41,000
就是说明一个什么问题

1694
00:58:41,000 --> 00:58:44,000
它的进程之间的边界

1695
00:58:44,000 --> 00:58:45,000
其实是比较模糊的

1696
00:58:45,000 --> 00:58:46,000
因为整个

1697
00:58:46,000 --> 00:58:48,000
如果整个操作系统的所有的状态

1698
00:58:48,000 --> 00:58:51,000
都是可以随意的访问和修改的话

1699
00:58:51,000 --> 00:58:52,000
那就不存在说

1700
00:58:52,000 --> 00:58:54,000
像比如说 Unix 这种

1701
00:58:54,000 --> 00:58:55,000
这种相对于

1702
00:58:56,000 --> 00:58:57,000
每个进程之间完全割裂

1703
00:58:57,000 --> 00:58:59,000
然后你只能通过简单的输出

1704
00:58:59,000 --> 00:59:01,000
或者其他的 IPC 的方式

1705
00:59:01,000 --> 00:59:03,000
来实现进程之间的通信

1706
00:59:03,000 --> 00:59:06,000
这种肯定是有一定的代价和门槛

1707
00:59:06,000 --> 00:59:06,000
刚才讲的

1708
00:59:06,000 --> 00:59:08,000
你比如说你只能依赖于

1709
00:59:08,000 --> 00:59:09,000
一般情况下

1710
00:59:09,000 --> 00:59:11,000
你是只能依赖于文本的方式来实现

1711
00:59:11,000 --> 00:59:13,000
那就会导致同一个数据

1712
00:59:13,000 --> 00:59:15,000
你要不断的把它序列化

1713
00:59:15,000 --> 00:59:16,000
然后反序列化成

1714
00:59:17,000 --> 00:59:19,000
一个内存中的一个结构

1715
00:59:20,000 --> 00:59:21,000
但是如果你像

1716
00:59:21,000 --> 00:59:22,000
像 Lisp Machine 这种方式

1717
00:59:22,000 --> 00:59:24,000
或者说在 Emax 里面这种方式

1718
00:59:24,000 --> 00:59:26,000
你整个都是在同一个进程里面的

1719
00:59:26,000 --> 00:59:28,000
当然 Lisp Machine 就比较急

1720
00:59:28,000 --> 00:59:31,000
因为整个系统都是一个进程

1721
00:59:31,000 --> 00:59:32,000
你可以这么理解

1722
00:59:33,000 --> 00:59:34,000
那么这样的话

1723
00:59:34,000 --> 00:59:35,000
就不存在说你每次要序列

1724
00:59:35,000 --> 00:59:39,000
去把一个内存中的结构序列化成文本

1725
00:59:39,000 --> 00:59:41,000
然后再去到另外一个地方解序列化出来

1726
00:59:41,000 --> 00:59:42,000
这个本来也是一个损耗

1727
00:59:43,000 --> 00:59:46,000
而且也多余的工作

1728
00:59:47,000 --> 00:59:48,000
我有一个问题

1729
00:59:48,000 --> 00:59:48,000
就是

1730
00:59:49,000 --> 00:59:53,000
Lisp Machine 的 CPU 仍旧是传统意义上的 CPU

1731
00:59:53,000 --> 00:59:56,000
它不是在 CPU 级别提供什么

1732
00:59:57,000 --> 01:00:00,000
什么 Car CDR 这种

1733
01:00:00,000 --> 01:00:01,000
好像是这样的

1734
01:00:01,000 --> 01:00:02,000
真的吗

1735
01:00:02,000 --> 01:00:03,000
这可能吗

1736
01:00:04,000 --> 01:00:04,000
为什么不可能

1737
01:00:04,000 --> 01:00:06,000
那只有几个

1738
01:00:06,000 --> 01:00:07,000
什么 7 个还是 8 个的源

1739
01:00:07,000 --> 01:00:11,000
就是最原始的那几个表达就可以了

1740
01:00:11,000 --> 01:00:11,000
对

1741
01:00:11,000 --> 01:00:13,000
可是这样的芯片真的存在吗

1742
01:00:13,000 --> 01:00:17,000
就是专门直接解释执行 Lisp 语句的芯片

1743
01:00:17,000 --> 01:00:18,000
我没记错

1744
01:00:18,000 --> 01:00:19,000
应该是这样的

1745
01:00:19,000 --> 01:00:21,000
可以再查一下

1746
01:00:21,000 --> 01:00:23,000
你给我一下

1747
01:00:23,000 --> 01:00:24,000
因为我记得是这样子的

1748
01:00:24,000 --> 01:00:26,000
就如果至少 Lisp Machine 不是的话

1749
01:00:26,000 --> 01:00:27,000
曾经有人做过这样的东西

1750
01:00:27,000 --> 01:00:29,000
但是虽然性能怎么样

1751
01:00:29,000 --> 01:00:29,000
我们再说

1752
01:00:29,000 --> 01:00:31,000
但是起码是存在过这么一种东西的

1753
01:00:32,000 --> 01:00:33,000
对

1754
01:00:33,000 --> 01:00:39,000
我相信如果能在硬件上完成一个 Lisp 源的硬件解释器的话

1755
01:00:39,000 --> 01:00:42,000
那的确是非常非常

1756
01:00:42,000 --> 01:00:44,000
Alien 的一种东西

1757
01:00:44,000 --> 01:00:48,000
他还是通过汇变成机器语

1758
01:00:48,000 --> 01:00:52,000
但是他应该是在硬件层面有对 Lisp 特性有所支持的

1759
01:00:53,000 --> 01:00:58,000
也不是完全的通过你讲的那个方式来实现

1760
01:00:58,000 --> 01:01:00,000
但是差不太远了

1761
01:01:00,000 --> 01:01:00,000
已经

1762
01:01:00,000 --> 01:01:01,000
OK

1763
01:01:01,000 --> 01:01:01,000
对

1764
01:01:02,000 --> 01:01:04,000
因为回到 Emacs

1765
01:01:04,000 --> 01:01:04,000
对

1766
01:01:04,000 --> 01:01:07,000
Emacs 的非常非常诱人的一点

1767
01:01:07,000 --> 01:01:10,000
大概也就在于 Ellipse

1768
01:01:10,000 --> 01:01:11,000
Ellipse 这种语言上面了

1769
01:01:11,000 --> 01:01:12,000
嗯哼

1770
01:01:13,000 --> 01:01:13,000
对

1771
01:01:13,000 --> 01:01:16,000
我其实有好多次下学生要学学 Lisp

1772
01:01:16,000 --> 01:01:18,000
学学 Emacs

1773
01:01:18,000 --> 01:01:22,000
也就是因为想要找一个真正的能够用到 Lisp 的地方

1774
01:01:22,000 --> 01:01:22,000
嗯哼

1775
01:01:23,000 --> 01:01:23,000
嗯

1776
01:01:23,000 --> 01:01:29,000
不过每次都是因为小拇指或者是大拇指开始抱怨

1777
01:01:29,000 --> 01:01:31,000
然后想还是算了吧

1778
01:01:31,000 --> 01:01:31,000
健康要紧

1779
01:01:32,000 --> 01:01:34,000
这个就是我们上一

1780
01:01:34,000 --> 01:01:34,000
哎

1781
01:01:34,000 --> 01:01:35,000
应该是前一期提到的

1782
01:01:35,000 --> 01:01:37,000
这个键盘的问题

1783
01:01:37,000 --> 01:01:40,000
就是 Emacs 的过多的使用快捷键

1784
01:01:40,000 --> 01:01:44,000
而且在目前的主流的键盘的布局上面

1785
01:01:44,000 --> 01:01:46,000
这些快捷键对你的手指

1786
01:01:46,000 --> 01:01:47,000
特别是小指

1787
01:01:48,000 --> 01:01:49,000
都是一个极大的考验

1788
01:01:49,000 --> 01:01:50,000
对

1789
01:01:50,000 --> 01:01:53,000
然后如果你不想你在可能 40 岁之前

1790
01:01:53,000 --> 01:01:55,000
就是手指或者手掌废掉的话

1791
01:01:55,000 --> 01:01:58,000
可能需要要做一些比较大的调整才可以了

1792
01:01:58,000 --> 01:01:58,000
对

1793
01:01:58,000 --> 01:02:00,000
如果你不想在手上也出现什么

1794
01:02:00,000 --> 01:02:01,000
拇指外翻

1795
01:02:01,000 --> 01:02:04,000
小指外翻这种症状的话

1796
01:02:04,000 --> 01:02:04,000
这还是

1797
01:02:04,000 --> 01:02:05,000
所以应该买

1798
01:02:05,000 --> 01:02:07,000
我们不应该这样

1799
01:02:07,000 --> 01:02:09,000
你这样误导听众

1800
01:02:09,000 --> 01:02:10,000
所以应该买那个 pedal

1801
01:02:11,000 --> 01:02:13,000
买那个踏板是挺有用的

1802
01:02:13,000 --> 01:02:14,000
应该还挺有用

1803
01:02:14,000 --> 01:02:15,000
对

1804
01:02:15,000 --> 01:02:17,000
其实这边也可以解释一下

1805
01:02:17,000 --> 01:02:19,000
就是如果我们评众没有用过 Emacs 的话

1806
01:02:19,000 --> 01:02:22,000
那么 Emacs 的绝大部分操作

1807
01:02:22,000 --> 01:02:23,000
都有一个对应的快捷键

1808
01:02:23,000 --> 01:02:24,000
比如说

1809
01:02:24,000 --> 01:02:27,000
推出 Emacs 的是什么

1810
01:02:27,000 --> 01:02:29,000
Ctrl X,Ctrl C

1811
01:02:29,000 --> 01:02:30,000
对

1812
01:02:30,000 --> 01:02:31,000
应该是吧

1813
01:02:31,000 --> 01:02:32,000
应该是吧

1814
01:02:32,000 --> 01:02:33,000
Ctrl X,Ctrl C,Ctrl C

1815
01:02:33,000 --> 01:02:34,000
我忘了

1816
01:02:34,000 --> 01:02:35,000
对

1817
01:02:35,000 --> 01:02:37,000
就是而且大部分 Emacs 的快捷键

1818
01:02:37,000 --> 01:02:39,000
都是要按两次

1819
01:02:39,000 --> 01:02:42,000
就是你不仅仅是像

1820
01:02:42,000 --> 01:02:44,000
比如说 Windows 里面 Ctrl X

1821
01:02:44,000 --> 01:02:45,000
是剪切

1822
01:02:45,000 --> 01:02:46,000
在 Emacs 里面

1823
01:02:46,000 --> 01:02:48,000
你为了退出编辑器

1824
01:02:48,000 --> 01:02:50,000
要按 Ctrl X

1825
01:02:50,000 --> 01:02:50,000
松开

1826
01:02:50,000 --> 01:02:52,000
再按 Ctrl C

1827
01:02:52,000 --> 01:02:52,000
对

1828
01:02:52,000 --> 01:02:56,000
就绝大部分命令都有两到三个快捷键

1829
01:02:56,000 --> 01:02:57,000
需要依次按一下

1830
01:02:57,000 --> 01:02:58,000
对

1831
01:02:58,000 --> 01:02:58,000
所以刚才我们讲

1832
01:02:58,000 --> 01:03:00,000
你知道为什么你的那个小拇指

1833
01:03:00,000 --> 01:03:01,000
会很快要废掉了吗

1834
01:03:01,000 --> 01:03:02,000
也是这个原因

1835
01:03:02,000 --> 01:03:03,000
你刚刚

1836
01:03:03,000 --> 01:03:04,000
你

1837
01:03:04,000 --> 01:03:05,000
乍听可能没有什么

1838
01:03:05,000 --> 01:03:06,000
但是想象一下

1839
01:03:06,000 --> 01:03:08,000
你每要改一个单词

1840
01:03:08,000 --> 01:03:09,000
每要改一个行字

1841
01:03:09,000 --> 01:03:11,000
你就必须按

1842
01:03:11,000 --> 01:03:12,000
两三次 Ctrl

1843
01:03:12,000 --> 01:03:14,000
那对于时间异常的话

1844
01:03:14,000 --> 01:03:15,000
对于你的小指

1845
01:03:15,000 --> 01:03:16,000
其实是伤害相当大

1846
01:03:16,000 --> 01:03:18,000
而且我觉得他那些快捷键的那个

1847
01:03:18,000 --> 01:03:20,000
就是我觉得很难

1848
01:03:20,000 --> 01:03:22,000
就是我可能也用的不够熟练

1849
01:03:22,000 --> 01:03:25,000
但是我觉得好像很难记住

1850
01:03:26,000 --> 01:03:29,000
对就是经常有 Emacs 用户跟我说什么

1851
01:03:29,000 --> 01:03:32,000
Emacs 用快捷键比较符合直觉

1852
01:03:32,000 --> 01:03:33,000
就 Ctrl X 其实是

1853
01:03:33,000 --> 01:03:35,000
extended

1854
01:03:35,000 --> 01:03:36,000
commands

1855
01:03:36,000 --> 01:03:37,000
然后 Ctrl C

1856
01:03:37,000 --> 01:03:38,000
就是

1857
01:03:38,000 --> 01:03:39,000
whatever

1858
01:03:39,000 --> 01:03:40,000
Ctrl C cancel

1859
01:03:40,000 --> 01:03:41,000
extended command

1860
01:03:41,000 --> 01:03:42,000
然后 cancel

1861
01:03:42,000 --> 01:03:44,000
其实还是挺好记的

1862
01:03:44,000 --> 01:03:45,000
可是反过来

1863
01:03:45,000 --> 01:03:48,000
你可以说 Ctrl N next

1864
01:03:48,000 --> 01:03:50,000
是移动光标向前

1865
01:03:50,000 --> 01:03:51,000
对吧

1866
01:03:51,000 --> 01:03:53,000
还是向下翻

1867
01:03:53,000 --> 01:03:56,000
我往下一页

1868
01:03:56,000 --> 01:03:57,000
next

1869
01:03:57,000 --> 01:03:57,000
对应该是下一个

1870
01:03:57,000 --> 01:03:59,000
Ctrl P 是往回

1871
01:03:59,000 --> 01:04:01,000
然后 Ctrl F 是向前

1872
01:04:01,000 --> 01:04:02,000
光标向右

1873
01:04:02,000 --> 01:04:04,000
或者说 Ctrl B 是光标向左

1874
01:04:04,000 --> 01:04:06,000
就是 next previous

1875
01:04:06,000 --> 01:04:07,000
forward backward

1876
01:04:07,000 --> 01:04:09,000
这些是符合直觉的

1877
01:04:09,000 --> 01:04:10,000
其实也不一定

1878
01:04:10,000 --> 01:04:12,000
如果你是母语是英文来讲

1879
01:04:12,000 --> 01:04:15,000
你觉得还可以猜想出来一个什么 next previous 那些

1880
01:04:15,000 --> 01:04:17,000
但如果你母语不是英文

1881
01:04:17,000 --> 01:04:19,000
或者是甚至比如说你母语是德文

1882
01:04:19,000 --> 01:04:21,000
你想一下这个符合直觉吗

1883
01:04:21,000 --> 01:04:22,000
我觉得也不一定

1884
01:04:26,000 --> 01:04:28,000
德语可能也还行

1885
01:04:28,000 --> 01:04:29,000
anyway

1886
01:04:29,000 --> 01:04:32,000
但这不就回到了美国中心论

1887
01:04:32,000 --> 01:04:34,000
对

1888
01:04:34,000 --> 01:04:36,000
而且这样其实同样的问题在 WIM 上面也有

1889
01:04:38,000 --> 01:04:39,000
对

1890
01:04:39,000 --> 01:04:39,000
也是

1891
01:04:39,000 --> 01:04:42,000
Change 或者是 Yank

1892
01:04:42,000 --> 01:04:46,000
为什么 Y 代表副字

1893
01:04:46,000 --> 01:04:48,000
因为 Y stand for Yank

1894
01:04:48,000 --> 01:04:49,000
可是你要不是

1895
01:04:49,000 --> 01:04:51,000
你不是英语母语者的话

1896
01:04:51,000 --> 01:04:52,000
Yank 这个词到底是什么意思

1897
01:04:52,000 --> 01:04:54,000
其实我横了才明白

1898
01:04:54,000 --> 01:04:55,000
其实就算你是母语

1899
01:04:55,000 --> 01:04:56,000
你看见 Yank

1900
01:04:56,000 --> 01:04:58,000
你没有理解 WIM 的概念

1901
01:04:58,000 --> 01:05:00,000
你知道 Yank 也是很费解的一个概念

1902
01:05:00,000 --> 01:05:01,000
对

1903
01:05:01,000 --> 01:05:02,000
对

1904
01:05:02,000 --> 01:05:03,000
回到 emacs

1905
01:05:03,000 --> 01:05:06,000
emacs 里面有些快捷键的确是

1906
01:05:06,000 --> 01:05:07,000
至少你按下去之后

1907
01:05:07,000 --> 01:05:09,000
你就比较容易记下来的

1908
01:05:09,000 --> 01:05:10,000
但是

1909
01:05:10,000 --> 01:05:11,000
另外一些字不是

1910
01:05:11,000 --> 01:05:14,000
比如说向下翻译评是 Ctrl 加 V

1911
01:05:14,000 --> 01:05:15,000
那我可以把 V

1912
01:05:15,000 --> 01:05:16,000
我不知道 V 代表什么

1913
01:05:16,000 --> 01:05:17,000
V 代表

1914
01:05:19,000 --> 01:05:21,000
至少我是把它理解为下箭头

1915
01:05:21,000 --> 01:05:23,000
就是 V 是向下翻译

1916
01:05:23,000 --> 01:05:25,000
是因为 V 是一个向下的箭头

1917
01:05:26,000 --> 01:05:28,000
这可能是有两号的

1918
01:05:28,000 --> 01:05:28,000
所以这里是什么

1919
01:05:28,000 --> 01:05:34,000
图形法加英文混合技艺

1920
01:05:34,000 --> 01:05:34,000
对

1921
01:05:34,000 --> 01:05:35,000
不然你告诉我它是什么

1922
01:05:35,000 --> 01:05:37,000
V 的 V stand for what

1923
01:05:37,000 --> 01:05:38,000
我也不记得

1924
01:05:38,000 --> 01:05:39,000
对

1925
01:05:39,000 --> 01:05:41,000
然后 Ctrl 加 V 是下翻

1926
01:05:41,000 --> 01:05:43,000
那请你猜一猜

1927
01:05:43,000 --> 01:05:44,000
什么是上翻

1928
01:05:44,000 --> 01:05:45,000
各位听众

1929
01:05:45,000 --> 01:05:45,000
各位亲爱的听众

1930
01:05:45,000 --> 01:05:48,000
请你猜猜向上翻是什么

1931
01:05:48,000 --> 01:05:49,000
是 B 吗好像是

1932
01:05:50,000 --> 01:05:52,000
向上翻译评是 meta

1933
01:05:52,000 --> 01:05:54,000
也是 Alt 加 V

1934
01:05:54,000 --> 01:05:55,000
what the fuck

1935
01:05:55,000 --> 01:05:56,000
所以

1936
01:05:58,000 --> 01:05:59,000
对

1937
01:05:59,000 --> 01:06:00,000
这里是有一点

1938
01:06:01,000 --> 01:06:02,000
也可以这么理解

1939
01:06:02,000 --> 01:06:04,000
就是 V 是一个翻页的

1940
01:06:04,000 --> 01:06:07,000
但是然后方向是由快捷键来控制的

1941
01:06:10,000 --> 01:06:10,000
好吧

1942
01:06:11,000 --> 01:06:14,000
给 Emax 起地

1943
01:06:14,000 --> 01:06:15,000
你看 Emax 起地有技巧了

1944
01:06:17,000 --> 01:06:18,000
OK

1945
01:06:18,000 --> 01:06:20,000
刚才讲了这么两个

1946
01:06:20,000 --> 01:06:21,000
这么比较古老的编辑讲

1947
01:06:21,000 --> 01:06:22,000
我们来现在说一下

1948
01:06:22,000 --> 01:06:24,000
现在比较新兴的

1949
01:06:24,000 --> 01:06:27,000
特别是在所谓的图形界面下

1950
01:06:27,000 --> 01:06:29,000
比较流行的一些编辑器

1951
01:06:30,000 --> 01:06:33,000
或者说试图弥补这种

1952
01:06:33,000 --> 01:06:35,000
因为 Vim 不管是 Vim 还是 Emax

1953
01:06:35,000 --> 01:06:38,000
其实都有点老太龙中的感觉

1954
01:06:38,000 --> 01:06:41,000
那么在他们之下编辑器

1955
01:06:41,000 --> 01:06:44,000
在他们之下编辑文档

1956
01:06:44,000 --> 01:06:46,000
你取决于你的视角

1957
01:06:46,000 --> 01:06:47,000
你可能觉得它非常的

1958
01:06:48,000 --> 01:06:50,000
老掉牙

1959
01:06:50,000 --> 01:06:52,000
但也有可能会觉得非常的酷

1960
01:06:55,000 --> 01:06:57,000
我相信可能还是觉得

1961
01:06:57,000 --> 01:06:59,000
在命令行之下修改文件

1962
01:06:59,000 --> 01:07:01,000
比较老掉牙的人居多吧

1963
01:07:01,000 --> 01:07:02,000
你觉得呢

1964
01:07:03,000 --> 01:07:04,000
我觉得首先一点就是

1965
01:07:04,000 --> 01:07:07,000
他们至少从观感上

1966
01:07:07,000 --> 01:07:09,000
就是 Vim 和 Emax 来讲

1967
01:07:09,000 --> 01:07:10,000
他们在观感上

1968
01:07:10,000 --> 01:07:11,000
都是一个不美的英勇

1969
01:07:13,000 --> 01:07:15,000
这倒的确是

1970
01:07:15,000 --> 01:07:17,000
是个

1971
01:07:17,000 --> 01:07:18,000
对起码我知道很多

1972
01:07:19,000 --> 01:07:22,000
从 Mac 的铁杆用户

1973
01:07:22,000 --> 01:07:25,000
他都不是特别喜欢这两个

1974
01:07:25,000 --> 01:07:26,000
他们会喜欢一些

1975
01:07:26,000 --> 01:07:27,000
Mac 原生的

1976
01:07:27,000 --> 01:07:29,000
然后是具有

1977
01:07:29,000 --> 01:07:30,000
就原生图形界面的

1978
01:07:30,000 --> 01:07:31,000
这么一个编辑器

1979
01:07:31,000 --> 01:07:32,000
就比最早的什么

1980
01:07:33,000 --> 01:07:35,000
像什么 BB Edit 这种东西

1981
01:07:36,000 --> 01:07:38,000
对因为一方面也是

1982
01:07:38,000 --> 01:07:40,000
他们有图形界面

1983
01:07:40,000 --> 01:07:41,000
另一方面也是

1984
01:07:41,000 --> 01:07:42,000
他们没有那么多

1985
01:07:42,000 --> 01:07:43,000
奇奇怪怪的

1986
01:07:44,000 --> 01:07:44,000
比如说

1987
01:07:45,000 --> 01:07:46,000
其实刚才我们说到

1988
01:07:46,000 --> 01:07:48,000
Ctrl 加 N 是向下

1989
01:07:48,000 --> 01:07:51,000
Ctrl 加 P 是向前向上

1990
01:07:51,000 --> 01:07:53,000
Ctrl F、Ctrl B 这些

1991
01:07:53,000 --> 01:07:55,000
也是不那么符合直觉的

1992
01:07:56,000 --> 01:07:57,000
就如果你去

1993
01:07:57,000 --> 01:08:00,000
如果你习惯了在 word 里面

1994
01:08:00,000 --> 01:08:02,000
按方向键来改变光标

1995
01:08:02,000 --> 01:08:05,000
方向键是很符合直觉的话

1996
01:08:05,000 --> 01:08:06,000
对方向键

1997
01:08:06,000 --> 01:08:08,000
习惯了键头

1998
01:08:08,000 --> 01:08:08,000
你按下去

1999
01:08:08,000 --> 01:08:09,000
然后光标动了

2000
01:08:09,000 --> 01:08:09,000
这是

2001
01:08:10,000 --> 01:08:11,000
几乎不言自明的一个

2002
01:08:11,000 --> 01:08:12,000
而且他那个

2003
01:08:12,000 --> 01:08:13,000
键头的

2004
01:08:13,000 --> 01:08:15,000
那几个键的方向

2005
01:08:15,000 --> 01:08:17,000
和这个摆布都是

2006
01:08:17,000 --> 01:08:19,000
一眼就能看懂的

2007
01:08:20,000 --> 01:08:22,000
对虽然在早期键盘上

2008
01:08:22,000 --> 01:08:24,000
四个键头的排布

2009
01:08:24,000 --> 01:08:25,000
也是有过一番变革

2010
01:08:25,000 --> 01:08:26,000
就不是

2011
01:08:26,000 --> 01:08:27,000
其实

2012
01:08:27,000 --> 01:08:28,000
如果要追溯计算机

2013
01:08:28,000 --> 01:08:30,000
键盘的发展史的话

2014
01:08:30,000 --> 01:08:32,000
没有这个方向键吧

2015
01:08:32,000 --> 01:08:33,000
就早期的键盘

2016
01:08:33,000 --> 01:08:34,000
对

2017
01:08:34,000 --> 01:08:37,000
比如说中华学习机的方向键

2018
01:08:37,000 --> 01:08:43,000
中华学习机的方向键是一个巨大的正方形

2019
01:08:43,000 --> 01:08:45,000
然后沿对角线被切成了四块

2020
01:08:45,000 --> 01:08:46,000
What

2021
01:08:47,000 --> 01:08:47,000
Yes

2022
01:08:48,000 --> 01:08:50,000
就是一个巨大的正方形

2023
01:08:50,000 --> 01:08:51,000
所以你看你有四个

2024
01:08:51,000 --> 01:08:52,000
对角线被切成了四块

2025
01:08:52,000 --> 01:08:54,000
你有四个三角

2026
01:08:54,000 --> 01:08:54,000
对

2027
01:08:54,000 --> 01:08:56,000
然后朝上的那一个三角

2028
01:08:57,000 --> 01:08:58,000
上面画了一个

2029
01:08:59,000 --> 01:09:00,000
朝上的那个倒三角

2030
01:09:00,000 --> 01:09:02,000
上面画了一个朝上的正三角

2031
01:09:06,000 --> 01:09:07,000
这个方向键其实

2032
01:09:07,000 --> 01:09:10,000
就有点像什么 Xbox 手柄那种感觉

2033
01:09:10,000 --> 01:09:11,000
明白了

2034
01:09:12,000 --> 01:09:14,000
甚至早期也有键盘是比如说

2035
01:09:14,000 --> 01:09:16,000
只有左右方向

2036
01:09:16,000 --> 01:09:17,000
只有左右键头

2037
01:09:17,000 --> 01:09:17,000
没有上下键头

2038
01:09:17,000 --> 01:09:19,000
那怎么上下呢

2039
01:09:19,000 --> 01:09:20,000
就没有上下功能

2040
01:09:22,000 --> 01:09:24,000
起码我们知道 Vim 的

2041
01:09:24,000 --> 01:09:25,000
就是 Vim 作者

2042
01:09:25,000 --> 01:09:27,000
Vi 作者

2043
01:09:27,000 --> 01:09:27,000
对

2044
01:09:27,000 --> 01:09:28,000
Vim 作者

2045
01:09:28,000 --> 01:09:29,000
Vi 作者

2046
01:09:29,000 --> 01:09:30,000
Vi 作者那台键

2047
01:09:31,000 --> 01:09:31,000
那台

2048
01:09:32,000 --> 01:09:34,000
那个键盘是没有方向键的

2049
01:09:34,000 --> 01:09:36,000
然后它在那个 HJKL 上面

2050
01:09:36,000 --> 01:09:38,000
那四个字母上面是有四个方向键

2051
01:09:38,000 --> 01:09:39,000
分别是

2052
01:09:39,000 --> 01:09:40,000
那四个方向

2053
01:09:43,000 --> 01:09:44,000
对

2054
01:09:44,000 --> 01:09:45,000
Billy Joy 用的那台电脑

2055
01:09:45,000 --> 01:09:45,000
其实在

2056
01:09:45,000 --> 01:09:48,000
如果你在网上搜一下 Vi Keyboard

2057
01:09:48,000 --> 01:09:49,000
然后搜 Billy Joy

2058
01:09:50,000 --> 01:09:50,000
Bill Joy

2059
01:09:50,000 --> 01:09:51,000
Sorry

2060
01:09:51,000 --> 01:09:51,000
Bill Joy

2061
01:09:51,000 --> 01:09:53,000
就可以找到他

2062
01:09:53,000 --> 01:09:54,000
最开始用的那台

2063
01:09:54,000 --> 01:09:55,000
电脑的键盘

2064
01:09:55,000 --> 01:09:57,000
你会觉得

2065
01:09:57,000 --> 01:09:59,000
在这个电脑上

2066
01:09:59,000 --> 01:10:00,000
在这个键盘上开发出 Vi

2067
01:10:00,000 --> 01:10:02,000
其实是非常合理的一件事情

2068
01:10:03,000 --> 01:10:05,000
所以唯一你觉得 Vi 的键

2069
01:10:06,000 --> 01:10:07,000
就排布不合理

2070
01:10:07,000 --> 01:10:08,000
那是因为你的键盘不对

2071
01:10:09,000 --> 01:10:09,000
对

2072
01:10:09,000 --> 01:10:10,000
没错

2073
01:10:10,000 --> 01:10:11,000
这是为什么要买一台

2074
01:10:11,000 --> 01:10:12,000
买一只 Hyper Gank Keyboard

2075
01:10:13,000 --> 01:10:13,000
忘掉

2076
01:10:13,000 --> 01:10:14,000
忘掉键

2077
01:10:14,000 --> 01:10:16,000
那个什么键上的音的那个东西

2078
01:10:16,000 --> 01:10:17,000
自己改吧

2079
01:10:18,000 --> 01:10:22,000
在推特上有一位听众也反馈说

2080
01:10:22,000 --> 01:10:23,000
听了我们的节目之后

2081
01:10:23,000 --> 01:10:23,000
终于

2082
01:10:24,000 --> 01:10:26,000
买了这个心理长草很久的

2083
01:10:26,000 --> 01:10:27,000
Hyper Gank Keyboard

2084
01:10:27,000 --> 01:10:29,000
然后用得很爽

2085
01:10:29,000 --> 01:10:31,000
但是被室友投诉说太吵

2086
01:10:33,000 --> 01:10:34,000
这个副作用

2087
01:10:34,000 --> 01:10:37,000
我们一概不承担后果

2088
01:10:37,000 --> 01:10:37,000
没错

2089
01:10:37,000 --> 01:10:38,000
没错

2090
01:10:38,000 --> 01:10:39,000
又扯远了

2091
01:10:39,000 --> 01:10:41,000
找回那个基于图形界面的编辑器

2092
01:10:41,000 --> 01:10:44,000
最近比较火的几个是

2093
01:10:44,000 --> 01:10:45,000
Sublime

2094
01:10:45,000 --> 01:10:46,000
Sublime 是一个比较火的

2095
01:10:46,000 --> 01:10:48,000
然后它是一个

2096
01:10:48,000 --> 01:10:49,000
它其实是一个跨平台的编辑器

2097
01:10:50,000 --> 01:10:51,000
然后我没有用过它

2098
01:10:51,000 --> 01:10:53,000
在其他系统上的怎么样

2099
01:10:53,000 --> 01:10:54,000
但我在 Mac 上面

2100
01:10:54,000 --> 01:10:57,000
我还真没感觉到它是一个跨平台的

2101
01:10:57,000 --> 01:10:59,000
它做的原生态挺好的

2102
01:11:00,000 --> 01:11:02,000
其实它的跨平台是

2103
01:11:03,000 --> 01:11:06,000
不像 Eclipse 或者是其他什么东西

2104
01:11:06,000 --> 01:11:08,000
它的快捷键就是在 Eclipse 里面

2105
01:11:08,000 --> 01:11:09,000
快捷键在各个平台之下

2106
01:11:09,000 --> 01:11:10,000
基本上是一致的

2107
01:11:10,000 --> 01:11:10,000
都是用同一种

2108
01:11:10,000 --> 01:11:12,000
在 Sublime 里面

2109
01:11:12,000 --> 01:11:14,000
对在 Sublime 里面

2110
01:11:14,000 --> 01:11:16,000
很多快捷键在不同的平台之下

2111
01:11:16,000 --> 01:11:17,000
是不一样的

2112
01:11:17,000 --> 01:11:18,000
Windows 和 Linux 比较像

2113
01:11:18,000 --> 01:11:20,000
但是 Mac 下面

2114
01:11:20,000 --> 01:11:21,000
有那个 Mont

2115
01:11:22,000 --> 01:11:23,000
对

2116
01:11:23,000 --> 01:11:26,000
就是快捷键其实差蛮多的

2117
01:11:26,000 --> 01:11:28,000
我最开始用 Sublime 是在 Windows 下面

2118
01:11:28,000 --> 01:11:29,000
而且我觉得它的那个

2119
01:11:29,000 --> 01:11:31,000
就是它的那个叫什么

2120
01:11:31,000 --> 01:11:33,000
图形界面的表达的元素

2121
01:11:33,000 --> 01:11:34,000
我觉得很

2122
01:11:34,000 --> 01:11:35,000
就是还挺原生的

2123
01:11:35,000 --> 01:11:37,000
但是虽然说它的风格和

2124
01:11:38,000 --> 01:11:40,000
和 Mac 本身是不一样的

2125
01:11:40,000 --> 01:11:41,000
但是我觉得

2126
01:11:41,000 --> 01:11:43,000
就没有太为和感

2127
01:11:43,000 --> 01:11:46,000
这一点跟后面要讲到的那个什么 Eclipse

2128
01:11:46,000 --> 01:11:48,000
那支流是差很大的

2129
01:11:48,000 --> 01:11:49,000
对没错

2130
01:11:50,000 --> 01:11:52,000
而且 Sublime

2131
01:11:52,000 --> 01:11:53,000
如果各位

2132
01:11:53,000 --> 01:11:55,000
还在苦于找不到一款

2133
01:11:55,000 --> 01:11:57,000
或者说各位刚学编程

2134
01:11:57,000 --> 01:12:00,000
现在还正要寻找一款适合

2135
01:12:01,000 --> 01:12:02,000
出学者编辑器的话

2136
01:12:02,000 --> 01:12:04,000
那我觉得 Sublime 其实是非常好

2137
01:12:05,000 --> 01:12:06,000
虽然它要钱

2138
01:12:06,000 --> 01:12:07,000
但它不是一个免费的

2139
01:12:07,000 --> 01:12:08,000
它是

2140
01:12:08,000 --> 01:12:10,000
但你不交钱的话

2141
01:12:10,000 --> 01:12:12,000
它也只是时不时的跳出来一个

2142
01:12:12,000 --> 01:12:13,000
对话旁说

2143
01:12:13,000 --> 01:12:14,000
请你买吧

2144
01:12:14,000 --> 01:12:15,000
然后你按下 ES 4

2145
01:12:15,000 --> 01:12:16,000
它就消失了

2146
01:12:16,000 --> 01:12:18,000
对功能上没有任何阉割

2147
01:12:18,000 --> 01:12:19,000
时间上也没有限制

2148
01:12:19,000 --> 01:12:21,000
唯一就是让你会有点小不爽

2149
01:12:22,000 --> 01:12:24,000
对是一个非常友善的编辑器

2150
01:12:24,000 --> 01:12:25,000
它还有什么新版本了

2151
01:12:25,000 --> 01:12:26,000
对吧现在是有

2152
01:12:26,000 --> 01:12:29,000
对 Sublime Text 现在处于 2

2153
01:12:29,000 --> 01:12:30,000
就像 Python 一样

2154
01:12:30,000 --> 01:12:32,000
处于 2 和 3 的割裂状态

2155
01:12:32,000 --> 01:12:33,000
它怎么一回事

2156
01:12:33,000 --> 01:12:35,000
就是说新版本还没有

2157
01:12:35,000 --> 01:12:36,000
就不够好吗还是

2158
01:12:37,000 --> 01:12:39,000
Sublime Text 2

2159
01:12:39,000 --> 01:12:41,000
算是第一次发明的轮子

2160
01:12:41,000 --> 01:12:44,000
然后作者觉得还是不够好

2161
01:12:44,000 --> 01:12:46,000
所以要重起乌糟再写一遍

2162
01:12:46,000 --> 01:12:48,000
那 Sublime 一直长怎么样子

2163
01:12:49,000 --> 01:12:50,000
这我还真不知道

2164
01:12:50,000 --> 01:12:51,000
我也是从 2 开始

2165
01:12:51,000 --> 01:12:52,000
我没有见过 1 长什么

2166
01:12:52,000 --> 01:12:54,000
估计不是太好应该

2167
01:12:55,000 --> 01:12:57,000
另外一个比较老牌的编辑器

2168
01:12:57,000 --> 01:12:59,000
可能很多用户

2169
01:12:59,000 --> 01:13:00,000
对 Mac 用户可能都用过

2170
01:13:00,000 --> 01:13:01,000
叫做 Textmate

2171
01:13:02,000 --> 01:13:03,000
对我也用过

2172
01:13:04,000 --> 01:13:06,000
但时间不是很长

2173
01:13:06,000 --> 01:13:07,000
对它最早的时候

2174
01:13:07,000 --> 01:13:09,000
就 Textmate 1 的时候

2175
01:13:09,000 --> 01:13:10,000
它也是一个付费软件

2176
01:13:10,000 --> 01:13:11,000
而且价格还不便宜

2177
01:13:11,000 --> 01:13:12,000
我记得

2178
01:13:13,000 --> 01:13:16,000
不是 80 多刀还是多少钱

2179
01:13:16,000 --> 01:13:16,000
就是我记得

2180
01:13:16,000 --> 01:13:18,000
反正至少是多于

2181
01:13:18,000 --> 01:13:19,000
好像 60 欧左右吧

2182
01:13:19,000 --> 01:13:19,000
应该是

2183
01:13:20,000 --> 01:13:21,000
你买了吗

2184
01:13:21,000 --> 01:13:22,000
我没有买

2185
01:13:22,000 --> 01:13:23,000
我也没有

2186
01:13:23,000 --> 01:13:26,000
然后后来那个作者

2187
01:13:26,000 --> 01:13:27,000
好像也是因为卖编辑器转的

2188
01:13:27,000 --> 01:13:29,000
听说是转翻了

2189
01:13:29,000 --> 01:13:30,000
然后也就没有什么动力

2190
01:13:30,000 --> 01:13:31,000
在写二版

2191
01:13:31,000 --> 01:13:32,000
后来他就干脆把二版

2192
01:13:32,000 --> 01:13:34,000
做了一半的二版的一个代码

2193
01:13:34,000 --> 01:13:36,000
就是开源了

2194
01:13:36,000 --> 01:13:38,000
然后但现在是一个社区维护的

2195
01:13:38,000 --> 01:13:39,000
一个编辑器

2196
01:13:39,000 --> 01:13:42,000
现在是出了二的 Beta

2197
01:13:42,000 --> 01:13:43,000
6 还是 7 了吧应该是

2198
01:13:44,000 --> 01:13:45,000
就快要正式发布了

2199
01:13:45,000 --> 01:13:47,000
然后现在是变成一个免费

2200
01:13:47,000 --> 01:13:49,000
并且开源的一个编辑器

2201
01:13:49,000 --> 01:13:51,000
所以如果你是 Mac 用户

2202
01:13:51,000 --> 01:13:52,000
然后你也想试一下

2203
01:13:52,000 --> 01:13:55,000
这个经典传统的编辑器的话

2204
01:13:56,000 --> 01:13:56,000
你可以试试这个

2205
01:13:56,000 --> 01:14:00,000
因为有很多所谓的资深 Mac 开发者

2206
01:14:00,000 --> 01:14:04,000
也是对 Texmade 的死忠

2207
01:14:05,000 --> 01:14:08,000
甚至你去找一些比较早的

2208
01:14:09,000 --> 01:14:12,000
早期的 Rails 的 Screencast

2209
01:14:12,000 --> 01:14:12,000
对

2210
01:14:12,000 --> 01:14:14,000
里面几乎每一个 Rails 的开发者

2211
01:14:14,000 --> 01:14:15,000
都在用 Texmade

2212
01:14:15,000 --> 01:14:17,000
好像 Texmade 火起来

2213
01:14:17,000 --> 01:14:20,000
也就是因为 DHH

2214
01:14:20,000 --> 01:14:23,000
Devi Hampson

2215
01:14:23,000 --> 01:14:24,000
对

2216
01:14:24,000 --> 01:14:26,000
我只记得他有做这个

2217
01:14:26,000 --> 01:14:29,000
就是 Rails 的作者

2218
01:14:29,000 --> 01:14:31,000
因为他一直用 Texmade

2219
01:14:31,000 --> 01:14:33,000
然后导致了很多东西

2220
01:14:33,000 --> 01:14:39,000
他做了很多 Rails 的 Screencast

2221
01:14:39,000 --> 01:14:40,000
就是视频的节目

2222
01:14:40,000 --> 01:14:41,000
然后里面都

2223
01:14:41,000 --> 01:14:43,000
当时出来的时候大家

2224
01:14:43,000 --> 01:14:45,000
我其实也是因为被惊艳到

2225
01:14:45,000 --> 01:14:48,000
就当时他用了一个配色

2226
01:14:48,000 --> 01:14:49,000
其实 Texmade 自带的一个配色

2227
01:14:49,000 --> 01:14:50,000
好像是这样

2228
01:14:50,000 --> 01:14:52,000
然后显示 Ruby 的代码

2229
01:14:52,000 --> 01:14:54,000
你知道 Ruby 的代码

2230
01:14:54,000 --> 01:14:55,000
本来也比较好看

2231
01:14:55,000 --> 01:14:57,000
然后再加上漂亮的语法高亮

2232
01:14:57,000 --> 01:14:59,000
再加上长得很漂亮的编辑器

2233
01:15:00,000 --> 01:15:00,000
大家都觉得

2234
01:15:00,000 --> 01:15:01,000
哇这个好漂亮

2235
01:15:01,000 --> 01:15:02,000
什么赶快去买

2236
01:15:02,000 --> 01:15:04,000
然后也就 Texmade

2237
01:15:04,000 --> 01:15:05,000
好像应该在我印象中

2238
01:15:05,000 --> 01:15:06,000
也是从那里火起来的

2239
01:15:07,000 --> 01:15:07,000
没错

2240
01:15:08,000 --> 01:15:09,000
对 Ruby 就是这样吸引

2241
01:15:09,000 --> 01:15:12,000
一大群万妙协会的程序

2242
01:15:13,000 --> 01:15:14,000
完了

2243
01:15:14,000 --> 01:15:16,000
我也是万妙协会的好菜

2244
01:15:17,000 --> 01:15:18,000
我觉得其实多少

2245
01:15:18,000 --> 01:15:19,000
多少有点是有点这样

2246
01:15:19,000 --> 01:15:20,000
对

2247
01:15:20,000 --> 01:15:22,000
所以这个故事说明一个什么道理

2248
01:15:22,000 --> 01:15:23,000
哪怕你是做一个

2249
01:15:24,000 --> 01:15:26,000
甚至不是一个科技产品

2250
01:15:26,000 --> 01:15:28,000
你是一个纯粹的工具

2251
01:15:28,000 --> 01:15:32,000
你也是要考虑它的所谓的 Design

2252
01:15:32,000 --> 01:15:33,000
这个外观怎么样

2253
01:15:33,000 --> 01:15:34,000
如果你外观不好看

2254
01:15:35,000 --> 01:15:35,000
你做得再好

2255
01:15:35,000 --> 01:15:36,000
可能在推广

2256
01:15:36,000 --> 01:15:37,000
或者是 Marketing 的时候

2257
01:15:37,000 --> 01:15:38,000
都没有

2258
01:15:38,000 --> 01:15:40,000
会有很大的阻力吧我觉得

2259
01:15:40,000 --> 01:15:41,000
对

2260
01:15:41,000 --> 01:15:42,000
我觉得

2261
01:15:42,000 --> 01:15:43,000
对说到这件事情

2262
01:15:43,000 --> 01:15:46,000
我就想起来之所以我很讨厌 C++

2263
01:15:48,000 --> 01:15:51,000
甚至是一种非理性的讨厌 C++

2264
01:15:51,000 --> 01:15:53,000
部分原因也是因为在

2265
01:15:54,000 --> 01:15:56,000
刚刚接触 Visual Basic

2266
01:15:56,000 --> 01:15:58,000
就是微软的 Visual Basic C++的时候

2267
01:15:59,000 --> 01:16:01,000
不是 Visual Basic C++

2268
01:16:01,000 --> 01:16:03,000
Visual Studio C++

2269
01:16:03,000 --> 01:16:03,000
Visual

2270
01:16:03,000 --> 01:16:05,000
就叫 Visual C++吧应该

2271
01:16:05,000 --> 01:16:05,000
那个时候

2272
01:16:05,000 --> 01:16:06,000
VC

2273
01:16:06,000 --> 01:16:07,000
对好像应该是

2274
01:16:07,000 --> 01:16:09,000
对 Visual C++6.0 的时候

2275
01:16:09,000 --> 01:16:10,000
它的那个

2276
01:16:10,000 --> 01:16:12,000
用的那一支字体是

2277
01:16:12,000 --> 01:16:13,000
FixedSYS

2278
01:16:14,000 --> 01:16:15,000
Fixed System

2279
01:16:15,000 --> 01:16:17,000
我觉得怎么一个

2280
01:16:17,000 --> 01:16:19,000
写程序的界面可以有这么丑的字体

2281
01:16:20,000 --> 01:16:21,000
你觉得那个 FixedSYS 很丑吗

2282
01:16:22,000 --> 01:16:24,000
我当时觉得相当丑

2283
01:16:25,000 --> 01:16:27,000
这里要自爆一下黑历史

2284
01:16:27,000 --> 01:16:28,000
当时我还觉得

2285
01:16:28,000 --> 01:16:29,000
我觉得那个还

2286
01:16:30,000 --> 01:16:32,000
因为当时在 Windows 上面可选的

2287
01:16:32,000 --> 01:16:33,000
等宽字体有限

2288
01:16:33,000 --> 01:16:35,000
也不像现在说大家都很

2289
01:16:35,000 --> 01:16:36,000
都可以选

2290
01:16:36,000 --> 01:16:38,000
首先 Windows 本来那个字体渲染就比较糟糕

2291
01:16:38,000 --> 01:16:39,000
而且就是非

2292
01:16:39,000 --> 01:16:41,000
那个时候还肯定是非 Retina 的屏幕

2293
01:16:41,000 --> 01:16:42,000
什么 640

2294
01:16:42,000 --> 01:16:43,000
乘以 480 的分辨率

2295
01:16:44,000 --> 01:16:45,000
基本上都是那种所谓像素字体

2296
01:16:46,000 --> 01:16:47,000
然后

2297
01:16:47,000 --> 01:16:48,000
在当时 Windows 上面

2298
01:16:48,000 --> 01:16:50,000
仅有的那些字体里面

2299
01:16:50,000 --> 01:16:54,000
我觉得 FixedSYS 算是一个还能看不错的了吧

2300
01:16:55,000 --> 01:16:56,000
不然你还有什么选 Coreal 吗

2301
01:16:57,000 --> 01:16:57,000
Coreal

2302
01:16:57,000 --> 01:16:58,000
那比较丑

2303
01:16:59,000 --> 01:17:00,000
我觉得 Coreal 很漂亮

2304
01:17:00,000 --> 01:17:01,000
那个时候

2305
01:17:01,000 --> 01:17:03,000
Coreal 的那个 0 和 O 都是分不清楚的

2306
01:17:05,000 --> 01:17:06,000
我是用

2307
01:17:06,000 --> 01:17:07,000
我曾经用过

2308
01:17:08,000 --> 01:17:10,000
George 也很做变成字体

2309
01:17:10,000 --> 01:17:10,000
What

2310
01:17:10,000 --> 01:17:11,000
为了好看

2311
01:17:11,000 --> 01:17:12,000
对

2312
01:17:12,000 --> 01:17:13,000
为了好看

2313
01:17:13,000 --> 01:17:14,000
选择 George 这样做变成字体

2314
01:17:15,000 --> 01:17:18,000
你还是很早以前就进行过非等宽字体了

2315
01:17:18,000 --> 01:17:19,000
这个还是挺先锋的

2316
01:17:22,000 --> 01:17:23,000
年少轻狂

2317
01:17:23,000 --> 01:17:24,000
扯远了

2318
01:17:24,000 --> 01:17:24,000
扯远了

2319
01:17:25,000 --> 01:17:26,000
我也年轻过

2320
01:17:27,000 --> 01:17:28,000
对

2321
01:17:28,000 --> 01:17:28,000
所以

2322
01:17:29,000 --> 01:17:30,000
他刚才讲哪里了

2323
01:17:30,000 --> 01:17:31,000
Fixed

2324
01:17:31,000 --> 01:17:32,000
对继续说吧

2325
01:17:32,000 --> 01:17:33,000
反正扯远

2326
01:17:33,000 --> 01:17:35,000
FixedSYS 一个优点是

2327
01:17:35,000 --> 01:17:39,000
它和 Sony 一起显示的时候

2328
01:17:39,000 --> 01:17:40,000
2 比 1 的关系

2329
01:17:40,000 --> 01:17:40,000
对

2330
01:17:40,000 --> 01:17:42,000
正好是 2 比 1 的关系

2331
01:17:42,000 --> 01:17:43,000
然后我看这个编辑器里面

2332
01:17:43,000 --> 01:17:43,000
我靠

2333
01:17:43,000 --> 01:17:45,000
英文是 FixedSYS

2334
01:17:45,000 --> 01:17:46,000
然后中文动不动出来什么

2335
01:17:46,000 --> 01:17:48,000
汤汤汤汤汤

2336
01:17:49,000 --> 01:17:50,000
What the fuck is this

2337
01:17:50,000 --> 01:17:54,000
我想起我为什么喜欢 FixedSYS 这个字体了

2338
01:17:54,000 --> 01:17:55,000
当时

2339
01:17:55,000 --> 01:17:57,000
因为一些莫名其妙的原因

2340
01:17:57,000 --> 01:17:58,000
我在一个

2341
01:17:59,000 --> 01:18:00,000
做

2342
01:18:00,000 --> 01:18:02,000
就是专注于做嵌入式系统的论坛上

2343
01:18:02,000 --> 01:18:03,000
应该叫 C 51 吧

2344
01:18:03,000 --> 01:18:04,000
我记得这个 C 51 论坛

2345
01:18:04,000 --> 01:18:05,000
啊

2346
01:18:05,000 --> 01:18:05,000
51 芯片

2347
01:18:05,000 --> 01:18:06,000
对

2348
01:18:06,000 --> 01:18:07,000
51 单片机

2349
01:18:07,000 --> 01:18:08,000
你也上过

2350
01:18:08,000 --> 01:18:09,000
当时我在那里看

2351
01:18:09,000 --> 01:18:10,000
我没上过这个

2352
01:18:10,000 --> 01:18:12,000
但是你一说 51

2353
01:18:12,000 --> 01:18:13,000
那又是芯片的

2354
01:18:13,000 --> 01:18:14,000
只能是 51 的

2355
01:18:14,000 --> 01:18:14,000
对

2356
01:18:14,000 --> 01:18:15,000
那个应该是在九

2357
01:18:15,000 --> 01:18:17,000
我想想应该是 98

2358
01:18:17,000 --> 01:18:19,000
或者 99 年的时候

2359
01:18:19,000 --> 01:18:21,000
然后当时我去 C 51 面上

2360
01:18:21,000 --> 01:18:23,000
看到有一个人贴了一个

2361
01:18:23,000 --> 01:18:24,000
现在

2362
01:18:24,000 --> 01:18:25,000
我们回过头去看

2363
01:18:25,000 --> 01:18:27,000
应该是叫一个 Screencast 的一个东西

2364
01:18:27,000 --> 01:18:29,000
但现在 Screencast 是一个录制屏幕

2365
01:18:29,000 --> 01:18:31,000
用一个视频的方式来做

2366
01:18:31,000 --> 01:18:32,000
它那也是 Screencast

2367
01:18:32,000 --> 01:18:34,000
不过它那个时间方式非常奇怪

2368
01:18:34,000 --> 01:18:35,000
它也是录制屏幕

2369
01:18:35,000 --> 01:18:36,000
像一个人在讲

2370
01:18:37,000 --> 01:18:38,000
然后

2371
01:18:38,000 --> 01:18:39,000
那个

2372
01:18:39,000 --> 01:18:40,000
它那个软件不是

2373
01:18:40,000 --> 01:18:42,000
我们现在一个视频文件

2374
01:18:42,000 --> 01:18:42,000
它是一个特殊的一个

2375
01:18:42,000 --> 01:18:44,000
可是感觉就是一帧一帧

2376
01:18:44,000 --> 01:18:46,000
放这个屏幕的截图这种感觉

2377
01:18:46,000 --> 01:18:47,000
而且压缩的还蛮好的

2378
01:18:49,000 --> 01:18:49,000
啊

2379
01:18:49,000 --> 01:18:49,000
anyway

2380
01:18:49,000 --> 01:18:51,000
然后就是有一个人在

2381
01:18:51,000 --> 01:18:53,000
在展示他怎么用一个

2382
01:18:53,000 --> 01:18:54,000
那个什么

2383
01:18:54,000 --> 01:18:56,000
我忘了一个是波兰还是什么

2384
01:18:56,000 --> 01:18:56,000
一个开发器

2385
01:18:56,000 --> 01:18:57,000
编写

2386
01:18:57,000 --> 01:18:58,000
开发这个

2387
01:18:58,000 --> 01:19:00,000
用 C 语言写

2388
01:19:00,000 --> 01:19:01,000
这个签入式代码

2389
01:19:01,000 --> 01:19:03,000
然后他当时用的那个字体的

2390
01:19:03,000 --> 01:19:05,000
那个编辑的字体就是那个 FixSystem

2391
01:19:05,000 --> 01:19:06,000
ColdWar

2392
01:19:07,000 --> 01:19:07,000
我会不会

2393
01:19:07,000 --> 01:19:08,000
应该不是

2394
01:19:08,000 --> 01:19:09,000
应该没有那么

2395
01:19:09,000 --> 01:19:10,000
那个是后来才有的

2396
01:19:10,000 --> 01:19:11,000
应该很老的一个编辑

2397
01:19:11,000 --> 01:19:12,000
我现在一下想不起

2398
01:19:12,000 --> 01:19:14,000
但 anyway 这个不是重点

2399
01:19:14,000 --> 01:19:16,000
重点是那个人的声音超好听

2400
01:19:17,000 --> 01:19:18,000
然后因为那个时候

2401
01:19:18,000 --> 01:19:19,000
我完全不懂编程

2402
01:19:19,000 --> 01:19:20,000
我那个时候还在

2403
01:19:20,000 --> 01:19:21,000
就是

2404
01:19:22,000 --> 01:19:24,000
因为还没有上编程课

2405
01:19:24,000 --> 01:19:24,000
也不知道什么

2406
01:19:24,000 --> 01:19:26,000
就是只是看了好奇

2407
01:19:26,000 --> 01:19:27,000
有这么一个东西

2408
01:19:27,000 --> 01:19:28,000
就觉得挺有意思的

2409
01:19:28,000 --> 01:19:28,000
就是我对

2410
01:19:28,000 --> 01:19:29,000
而且我对签入

2411
01:19:29,000 --> 01:19:29,000
我到现在为止

2412
01:19:29,000 --> 01:19:31,000
都对签入式开发都一点

2413
01:19:31,000 --> 01:19:33,000
就门路都没有摸着的

2414
01:19:33,000 --> 01:19:34,000
但是就是因为看着编辑

2415
01:19:34,000 --> 01:19:35,000
我那个人的声音好听

2416
01:19:35,000 --> 01:19:37,000
我把那个视频反过看了 50 遍

2417
01:19:38,000 --> 01:19:39,000
OMG

2418
01:19:39,000 --> 01:19:40,000
你不仅是外表协会

2419
01:19:40,000 --> 01:19:41,000
你还是声音协会

2420
01:19:41,000 --> 01:19:42,000
声控声控

2421
01:19:42,000 --> 01:19:43,000
不好意思

2422
01:19:43,000 --> 01:19:45,000
而且他那个

2423
01:19:45,000 --> 01:19:47,000
我怀疑那个人用的是一款机械键盘

2424
01:19:48,000 --> 01:19:49,000
就是他在

2425
01:19:49,000 --> 01:19:49,000
或者说

2426
01:19:50,000 --> 01:19:51,000
他不是选择用机械键盘

2427
01:19:51,000 --> 01:19:53,000
而是那个时代只有机械键盘

2428
01:19:53,000 --> 01:19:53,000
有可能

2429
01:19:53,000 --> 01:19:55,000
就是他在解说的过程

2430
01:19:55,000 --> 01:19:56,000
他会边解说边敲

2431
01:19:56,000 --> 01:19:57,000
那个

2432
01:19:57,000 --> 01:19:58,000
听着边写代码

2433
01:19:58,000 --> 01:19:59,000
然后那个声音

2434
01:19:59,000 --> 01:20:00,000
咔咔作响

2435
01:20:00,000 --> 01:20:01,000
又很清脆

2436
01:20:01,000 --> 01:20:02,000
又超好听

2437
01:20:02,000 --> 01:20:04,000
然后那个人的声线又很好

2438
01:20:04,000 --> 01:20:04,000
就是

2439
01:20:05,000 --> 01:20:06,000
其实后来我想的

2440
01:20:06,000 --> 01:20:07,000
其实也不一定是那个人的声音

2441
01:20:07,000 --> 01:20:08,000
就是刚好可能他

2442
01:20:08,000 --> 01:20:09,000
他那个某一个频段

2443
01:20:09,000 --> 01:20:11,000
刚好对我来说比较有吸引力

2444
01:20:11,000 --> 01:20:13,000
听着好爽

2445
01:20:13,000 --> 01:20:14,000
是女的吗

2446
01:20:14,000 --> 01:20:16,000
男的一个比较

2447
01:20:16,000 --> 01:20:17,000
一个

2448
01:20:17,000 --> 01:20:19,000
浑厚的男生的声音

2449
01:20:19,000 --> 01:20:20,000
OK

2450
01:20:20,000 --> 01:20:21,000
我就哇这个声音太好听了

2451
01:20:21,000 --> 01:20:22,000
我每次反过看

2452
01:20:22,000 --> 01:20:23,000
听了 50 遍

2453
01:20:24,000 --> 01:20:25,000
我现在找不到那个文件了

2454
01:20:25,000 --> 01:20:26,000
我能找出来

2455
01:20:26,000 --> 01:20:28,000
都可以把它录下来给你们听一下

2456
01:20:28,000 --> 01:20:29,000
但是非常抱歉

2457
01:20:30,000 --> 01:20:31,000
系统添一过很多年了

2458
01:20:31,000 --> 01:20:32,000
已经找不到那个

2459
01:20:32,000 --> 01:20:33,000
不知道

2460
01:20:33,000 --> 01:20:35,000
有没有 511 电片机的

2461
01:20:35,000 --> 01:20:37,000
自身用户听了我们的节目之后

2462
01:20:37,000 --> 01:20:39,000
可以找到这篇视频

2463
01:20:39,000 --> 01:20:40,000
我希望他找到

2464
01:20:40,000 --> 01:20:41,000
我也不一定能放得了

2465
01:20:41,000 --> 01:20:42,000
他那个是一个

2466
01:20:42,000 --> 01:20:43,000
应该是一个

2467
01:20:44,000 --> 01:20:45,000
可以执行的一个东西

2468
01:20:45,000 --> 01:20:46,000
就是他自己

2469
01:20:46,000 --> 01:20:47,000
What

2470
01:20:47,000 --> 01:20:49,000
你小小年纪对于

2471
01:20:49,000 --> 01:20:50,000
信息安全这么没有

2472
01:20:50,000 --> 01:20:51,000
不是

2473
01:20:51,000 --> 01:20:51,000
就是他不是

2474
01:20:51,000 --> 01:20:53,000
他这个也是就是他

2475
01:20:53,000 --> 01:20:55,000
那个时候 Windows 上很多这种东西

2476
01:20:55,000 --> 01:20:58,000
因为没有这个通用的播放器

2477
01:20:58,000 --> 01:21:00,000
很多那种特殊的媒体格式

2478
01:21:00,000 --> 01:21:02,000
都是自带一个播放器来的

2479
01:21:03,000 --> 01:21:05,000
就打包成一个 EXE 文件来的

2480
01:21:05,000 --> 01:21:06,000
但是那个时候也不懂安全是吗

2481
01:21:07,000 --> 01:21:09,000
种病毒是常有的

2482
01:21:09,000 --> 01:21:10,000
那个时候真的是

2483
01:21:10,000 --> 01:21:10,000
很傻很天真

2484
01:21:10,000 --> 01:21:12,000
基本上为所欲为

2485
01:21:12,000 --> 01:21:13,000
现在也是

2486
01:21:13,000 --> 01:21:14,000
Windows 上面

2487
01:21:15,000 --> 01:21:17,000
可能还好一些

2488
01:21:17,000 --> 01:21:18,000
对安全上大家还是挺注重

2489
01:21:18,000 --> 01:21:20,000
但是相信我那个时候应该是

2490
01:21:20,000 --> 01:21:21,000
Windows 95

2491
01:21:21,000 --> 01:21:22,000
对我没记错的话

2492
01:21:22,000 --> 01:21:24,000
肯定是没有这个概念的

2493
01:21:24,000 --> 01:21:25,000
对

2494
01:21:26,000 --> 01:21:27,000
讲哪里

2495
01:21:27,000 --> 01:21:30,000
讲到 Texmate

2496
01:21:30,000 --> 01:21:31,000
对 Texmate

2497
01:21:31,000 --> 01:21:32,000
对

2498
01:21:32,000 --> 01:21:34,000
还有一个是

2499
01:21:34,000 --> 01:21:35,000
这是你写的

2500
01:21:35,000 --> 01:21:36,000
Chocolate

2501
01:21:36,000 --> 01:21:37,000
这个我其实用的很少

2502
01:21:37,000 --> 01:21:39,000
但我有听说过

2503
01:21:39,000 --> 01:21:39,000
对

2504
01:21:39,000 --> 01:21:40,000
他

2505
01:21:40,000 --> 01:21:41,000
Chocolate

2506
01:21:41,000 --> 01:21:41,000
我不知道

2507
01:21:41,000 --> 01:21:43,000
我不确定他应该念什么

2508
01:21:43,000 --> 01:21:43,000
因为他

2509
01:21:43,000 --> 01:21:44,000
没有那个 E 的

2510
01:21:44,000 --> 01:21:45,000
他的拼法是

2511
01:21:45,000 --> 01:21:47,000
Chocolate

2512
01:21:47,000 --> 01:21:48,000
就是法语的拼法

2513
01:21:48,000 --> 01:21:49,000
Chocolate

2514
01:21:49,000 --> 01:21:50,000
Chocolate

2515
01:21:50,000 --> 01:21:52,000
而不是英语的 Chocolate

2516
01:21:52,000 --> 01:21:54,000
我所有怀疑他是不是念

2517
01:21:54,000 --> 01:21:55,000
Chocolate

2518
01:21:55,000 --> 01:21:57,000
那我们现在就姑且这样念吧

2519
01:21:57,000 --> 01:21:57,000
对

2520
01:21:57,000 --> 01:21:59,000
总之巧克力编辑器

2521
01:21:59,000 --> 01:22:02,000
巧克力编辑器是一个

2522
01:22:02,000 --> 01:22:03,000
号称要做

2523
01:22:03,000 --> 01:22:07,000
The default native OS 10 editor 的一个编辑器

2524
01:22:07,000 --> 01:22:07,000
好像没做成

2525
01:22:07,000 --> 01:22:09,000
而且他也是要钱的

2526
01:22:09,000 --> 01:22:11,000
而且他只有 15 天的试用期

2527
01:22:11,000 --> 01:22:12,000
OK

2528
01:22:13,000 --> 01:22:17,000
但是基本上很多用户都会觉得

2529
01:22:17,000 --> 01:22:22,000
他是更加像 Texmate 的一个编辑器

2530
01:22:22,000 --> 01:22:23,000
一个 Clone 对吧

2531
01:22:24,000 --> 01:22:24,000
对

2532
01:22:24,000 --> 01:22:27,000
有一点点像 Texmate 的精神继承者

2533
01:22:27,000 --> 01:22:28,000
就是他

2534
01:22:28,000 --> 01:22:30,000
有一批核心的功能做得非常好

2535
01:22:30,000 --> 01:22:32,000
做得非常的实用

2536
01:22:32,000 --> 01:22:33,000
但是

2537
01:22:33,000 --> 01:22:36,000
除此之外可扩展性并不是很好

2538
01:22:36,000 --> 01:22:36,000
因为

2539
01:22:37,000 --> 01:22:40,000
SublampTex 的一大优点

2540
01:22:40,000 --> 01:22:42,000
就是 SublampTex 有一大批

2541
01:22:43,000 --> 01:22:45,000
非常优良的插件可以用

2542
01:22:45,000 --> 01:22:46,000
而且有内置的

2543
01:22:46,000 --> 01:22:47,000
也不是内置的

2544
01:22:47,000 --> 01:22:50,000
就是有一个插件管理器可以安装

2545
01:22:50,000 --> 01:22:52,000
但是 Chocolate

2546
01:22:52,000 --> 01:22:53,000
巧克力编辑器

2547
01:22:53,000 --> 01:22:57,000
在至少就我所知是没用的

2548
01:22:59,000 --> 01:23:01,000
但他仍旧是一个相当称手的编辑器

2549
01:23:01,000 --> 01:23:05,000
我印象中用这个巧克力编辑器的人

2550
01:23:05,000 --> 01:23:08,000
似乎从那个什么在 Web 开发的比较多

2551
01:23:08,000 --> 01:23:09,000
就是做什么

2552
01:23:09,000 --> 01:23:12,000
写 CSS 写的 NHTML 代码的

2553
01:23:12,000 --> 01:23:13,000
好像用的比较多

2554
01:23:13,000 --> 01:23:15,000
但是用他来编程的我还

2555
01:23:15,000 --> 01:23:16,000
我见的人不是特别多

2556
01:23:16,000 --> 01:23:17,000
反正

2557
01:23:19,000 --> 01:23:20,000
好像的确如此

2558
01:23:20,000 --> 01:23:22,000
因为我自己也只是

2559
01:23:22,000 --> 01:23:26,000
大概用过那么一两天吧

2560
01:23:26,000 --> 01:23:28,000
就尝鲜一样用了一两天

2561
01:23:28,000 --> 01:23:30,000
然后下次再想起来的时候

2562
01:23:30,000 --> 01:23:31,000
那个已经过期了

2563
01:23:31,000 --> 01:23:32,000
然后就删了对吧

2564
01:23:32,000 --> 01:23:34,000
所以他的口号不对

2565
01:23:34,000 --> 01:23:35,000
你要做什么

2566
01:23:35,000 --> 01:23:36,000
这个默认编辑器

2567
01:23:36,000 --> 01:23:37,000
你要收费

2568
01:23:37,000 --> 01:23:38,000
那肯定是做不到的

2569
01:23:39,000 --> 01:23:41,000
刚刚我们讲那么多

2570
01:23:41,000 --> 01:23:42,000
都是 Mac 上面的编辑器

2571
01:23:42,000 --> 01:23:43,000
现在比较流行的

2572
01:23:43,000 --> 01:23:44,000
Windows 上面有什么

2573
01:23:44,000 --> 01:23:46,000
其实我现在已经不太清楚了

2574
01:23:48,000 --> 01:23:49,000
我也不是很清楚

2575
01:23:49,000 --> 01:23:51,000
但我记得有一个叫做

2576
01:23:52,000 --> 01:23:53,000
有两个吧

2577
01:23:53,000 --> 01:23:54,000
一个叫做 UltraEdit

2578
01:23:54,000 --> 01:23:55,000
这个以前

2579
01:23:56,000 --> 01:23:57,000
这是一个付费文件

2580
01:23:58,000 --> 01:23:59,000
UltraEdit 最早最早

2581
01:23:59,000 --> 01:24:02,000
我是用来修改二进制文件

2582
01:24:02,000 --> 01:24:03,000
然后改成文件之类的

2583
01:24:03,000 --> 01:24:05,000
那个时候一定要用 UltraEdit

2584
01:24:05,000 --> 01:24:05,000
对

2585
01:24:05,000 --> 01:24:06,000
它有一个很方便的

2586
01:24:06,000 --> 01:24:07,000
一个 Hex mode 的编辑模式

2587
01:24:07,000 --> 01:24:08,000
对吧

2588
01:24:09,000 --> 01:24:10,000
就如果你不知道的话

2589
01:24:11,000 --> 01:24:11,000
对

2590
01:24:11,000 --> 01:24:12,000
那个时候

2591
01:24:12,000 --> 01:24:13,000
就是我那个时候

2592
01:24:13,000 --> 01:24:15,000
因为不是还并不懂编程

2593
01:24:15,000 --> 01:24:16,000
只是想要

2594
01:24:16,000 --> 01:24:18,000
想要改一下文件

2595
01:24:18,000 --> 01:24:18,000
然后

2596
01:24:19,000 --> 01:24:20,000
然后赶紧过这一关的时候

2597
01:24:20,000 --> 01:24:21,000
造弊

2598
01:24:21,000 --> 01:24:23,000
产生这样的迷思

2599
01:24:23,000 --> 01:24:24,000
就是

2600
01:24:24,000 --> 01:24:26,000
你要改十六进制代码

2601
01:24:26,000 --> 01:24:27,000
就必须用 HexEdit

2602
01:24:27,000 --> 01:24:27,000
不对

2603
01:24:27,000 --> 01:24:29,000
但是不是有一个什么

2604
01:24:29,000 --> 01:24:31,000
有各种这种游戏的辅助工具

2605
01:24:31,000 --> 01:24:32,000
可以帮你改吗

2606
01:24:32,000 --> 01:24:33,000
就直接可以

2607
01:24:33,000 --> 01:24:34,000
DOS 下面有 PC Tools

2608
01:24:34,000 --> 01:24:35,000
对

2609
01:24:35,000 --> 01:24:36,000
还有什么金山游侠

2610
01:24:36,000 --> 01:24:37,000
你记不记得

2611
01:24:38,000 --> 01:24:40,000
金山游侠是改内存

2612
01:24:40,000 --> 01:24:40,000
对

2613
01:24:40,000 --> 01:24:40,000
金山游侠

2614
01:24:40,000 --> 01:24:41,000
对

2615
01:24:41,000 --> 01:24:42,000
可是金山游侠出来

2616
01:24:42,000 --> 01:24:43,000
已经比 HexEdit 晚很多

2617
01:24:43,000 --> 01:24:44,000
对

2618
01:24:44,000 --> 01:24:45,000
就是这一类的

2619
01:24:45,000 --> 01:24:47,000
就是专门改游戏的

2620
01:24:47,000 --> 01:24:48,000
就是在最开始的时候

2621
01:24:48,000 --> 01:24:48,000
我有的

2622
01:24:48,000 --> 01:24:50,000
我所有的迷思就是

2623
01:24:50,000 --> 01:24:52,000
在 Windows 下面要改十六进制的东西

2624
01:24:52,000 --> 01:24:53,000
就必须用 HexEdit

2625
01:24:53,000 --> 01:24:53,000
对

2626
01:24:55,000 --> 01:24:55,000
还有一个

2627
01:24:55,000 --> 01:24:56,000
我不知道

2628
01:24:56,000 --> 01:24:59,000
你用 HexEdit 写过程序吗

2629
01:24:59,000 --> 01:24:59,000
我没有

2630
01:24:59,000 --> 01:25:00,000
我很少用

2631
01:25:00,000 --> 01:25:02,000
我这一次看到想吐槽

2632
01:25:02,000 --> 01:25:03,000
为什么我不喜欢

2633
01:25:03,000 --> 01:25:04,000
那个

2634
01:25:04,000 --> 01:25:04,000
不是

2635
01:25:04,000 --> 01:25:05,000
Ultra

2636
01:25:05,000 --> 01:25:08,000
Ultra Edit 的一个原因

2637
01:25:08,000 --> 01:25:08,000
就是它上面

2638
01:25:08,000 --> 01:25:11,000
你摸着打开有一排的那个 Toolbar

2639
01:25:11,000 --> 01:25:12,000
不三排的 Toolbar

2640
01:25:13,000 --> 01:25:13,000
对

2641
01:25:13,000 --> 01:25:15,000
Ultra Edit 是一个非常像

2642
01:25:16,000 --> 01:25:17,000
把自己伪装成一个

2643
01:25:17,000 --> 01:25:18,000
IDE 的编辑器

2644
01:25:19,000 --> 01:25:19,000
对

2645
01:25:19,000 --> 01:25:21,000
就是我当时看到我就被震惊了

2646
01:25:21,000 --> 01:25:22,000
我说这什么

2647
01:25:22,000 --> 01:25:24,000
怎么这么多

2648
01:25:24,000 --> 01:25:25,000
然后因为在我印象中

2649
01:25:25,000 --> 01:25:28,000
如果你是一个文本编辑器

2650
01:25:28,000 --> 01:25:30,000
然后你还有三排的 Toolbar

2651
01:25:30,000 --> 01:25:32,000
意思你是要鼓励我用鼠标

2652
01:25:33,000 --> 01:25:33,000
没错

2653
01:25:33,000 --> 01:25:35,000
然后那个时候我已经是深信说

2654
01:25:35,000 --> 01:25:37,000
鼠标和键盘之间

2655
01:25:37,000 --> 01:25:38,000
相互切换起来

2656
01:25:38,000 --> 01:25:39,000
切换去是一个

2657
01:25:39,000 --> 01:25:41,000
非常低效的一个过程

2658
01:25:41,000 --> 01:25:42,000
没错

2659
01:25:42,000 --> 01:25:42,000
然后我觉得

2660
01:25:42,000 --> 01:25:43,000
对

2661
01:25:43,000 --> 01:25:44,000
完全不能忍

2662
01:25:44,000 --> 01:25:46,000
说到 Ultra Edit 就是

2663
01:25:46,000 --> 01:25:48,000
我之前在想说

2664
01:25:48,000 --> 01:25:51,000
你说编辑器和 IDE 之间的界限

2665
01:25:51,000 --> 01:25:52,000
到底在哪呢

2666
01:25:52,000 --> 01:25:53,000
我曾经一度想说

2667
01:25:53,000 --> 01:25:56,000
一个非常表面的现象就是

2668
01:25:56,000 --> 01:25:58,000
IDE 一定是用 Splash Screen

2669
01:25:59,000 --> 01:26:00,000
就一定会一上来

2670
01:26:00,000 --> 01:26:02,000
给你一个启动图案的

2671
01:26:02,000 --> 01:26:03,000
但是反过来想

2672
01:26:03,000 --> 01:26:05,000
Ultra Edit 明明是一个编辑器

2673
01:26:05,000 --> 01:26:06,000
可是它有一个 Splash Screen

2674
01:26:07,000 --> 01:26:08,000
我觉得是这样吧

2675
01:26:08,000 --> 01:26:10,000
就是如果你能在那个编辑器里面完成

2676
01:26:11,000 --> 01:26:11,000
就是

2677
01:26:11,000 --> 01:26:14,000
Code Compile Debug 这个流程

2678
01:26:14,000 --> 01:26:16,000
就算 IDE 了

2679
01:26:16,000 --> 01:26:17,000
那可是

2680
01:26:17,000 --> 01:26:19,000
比如说什么 IDE Plus 之类的东西

2681
01:26:19,000 --> 01:26:20,000
也是可以配置成这样

2682
01:26:20,000 --> 01:26:23,000
那你就把它当成 IDE 在用了

2683
01:26:23,000 --> 01:26:25,000
其实我界定它是不是 IDE

2684
01:26:25,000 --> 01:26:26,000
有一个地方

2685
01:26:26,000 --> 01:26:26,000
我觉得

2686
01:26:26,000 --> 01:26:28,000
我一般用这个标准来判断

2687
01:26:28,000 --> 01:26:31,000
但是这个很土的一个标准就是

2688
01:26:31,000 --> 01:26:33,000
如果编译错了

2689
01:26:33,000 --> 01:26:34,000
它能不能够直接给我

2690
01:26:34,000 --> 01:26:37,000
跳到错那条的行号那里去

2691
01:26:37,000 --> 01:26:38,000
或者给我高量出来

2692
01:26:38,000 --> 01:26:40,000
有没有 Debug 功能

2693
01:26:40,000 --> 01:26:40,000
对

2694
01:26:40,000 --> 01:26:41,000
有没有动态追踪

2695
01:26:41,000 --> 01:26:42,000
就有没有那个 Feedback

2696
01:26:44,000 --> 01:26:44,000
如果有的话

2697
01:26:44,000 --> 01:26:45,000
它就算 IDE

2698
01:26:46,000 --> 01:26:47,000
但这个是有不错的标准

2699
01:26:47,000 --> 01:26:49,000
但其实这个是很有问题的

2700
01:26:49,000 --> 01:26:50,000
因为现在比如说我现在用

2701
01:26:51,000 --> 01:26:54,000
在 Wim 有一个插件叫做

2702
01:26:55,000 --> 01:26:55,000
叫什么来的

2703
01:26:56,000 --> 01:26:57,000
Synthetic

2704
01:26:57,000 --> 01:26:57,000
对

2705
01:26:57,000 --> 01:26:58,000
还是

2706
01:26:58,000 --> 01:26:59,000
叫 Synthetic

2707
01:27:00,000 --> 01:27:01,000
就是那个插件

2708
01:27:01,000 --> 01:27:03,000
它会告诉你出错的地方的行号

2709
01:27:03,000 --> 01:27:04,000
然后我用一个

2710
01:27:04,000 --> 01:27:04,000
就是 Synthetic

2711
01:27:04,000 --> 01:27:07,000
可是那是一个静态分析

2712
01:27:07,000 --> 01:27:07,000
对

2713
01:27:07,000 --> 01:27:09,000
它就是说它严格来说

2714
01:27:09,000 --> 01:27:10,000
不算是一个

2715
01:27:11,000 --> 01:27:12,000
叫什么

2716
01:27:13,000 --> 01:27:14,000
动态追踪

2717
01:27:14,000 --> 01:27:15,000
对

2718
01:27:15,000 --> 01:27:16,000
就它并没有办法

2719
01:27:16,000 --> 01:27:18,000
很直接的告诉你

2720
01:27:18,000 --> 01:27:19,000
编译器告诉你的结果

2721
01:27:19,000 --> 01:27:21,000
它就是通过一个语法分析来做

2722
01:27:21,000 --> 01:27:24,000
但是现在有一点界限很模糊的地方

2723
01:27:24,000 --> 01:27:25,000
就是比如说现在我写 Go

2724
01:27:26,000 --> 01:27:27,000
然后我有一个 Go 语言的插件

2725
01:27:27,000 --> 01:27:28,000
它会直接

2726
01:27:28,000 --> 01:27:29,000
因为 Go 你保存的时候

2727
01:27:29,000 --> 01:27:30,000
它就会直接

2728
01:27:30,000 --> 01:27:33,000
用那个 Go 一个小工具

2729
01:27:33,000 --> 01:27:33,000
Go format

2730
01:27:33,000 --> 01:27:33,000
对

2731
01:27:33,000 --> 01:27:36,000
它会默认检查你那个是可不可以被编译的

2732
01:27:36,000 --> 01:27:37,000
就是有没有什么编译错误

2733
01:27:37,000 --> 01:27:38,000
因为 Go 编译很快

2734
01:27:39,000 --> 01:27:40,000
这个其实也无所谓

2735
01:27:40,000 --> 01:27:41,000
然后就其实

2736
01:27:41,000 --> 01:27:42,000
你如果按刚才那个定来说

2737
01:27:42,000 --> 01:27:43,000
这也算是一个 IDE 了

2738
01:27:43,000 --> 01:27:45,000
好像似乎也不太对

2739
01:27:45,000 --> 01:27:45,000
所以

2740
01:27:46,000 --> 01:27:47,000
所以我说刚才那个只是我以前用的

2741
01:27:47,000 --> 01:27:49,000
一个很土的一个标准

2742
01:27:50,000 --> 01:27:51,000
但起码有一点就是

2743
01:27:51,000 --> 01:27:55,000
你不可以在编辑器里面跑一个 Compiler 之类的

2744
01:27:56,000 --> 01:27:57,000
编辑器里面跑 Compiler

2745
01:27:57,000 --> 01:27:59,000
所以那个还是不算 IDE

2746
01:28:00,000 --> 01:28:03,000
或者说更权威的种方法

2747
01:28:03,000 --> 01:28:06,000
就是去这个工具的官方网站上看

2748
01:28:06,000 --> 01:28:06,000
自己说什么

2749
01:28:06,000 --> 01:28:09,000
它会不会说这是一款 IDE

2750
01:28:09,000 --> 01:28:10,000
如果是的话

2751
01:28:10,000 --> 01:28:10,000
好吧

2752
01:28:10,000 --> 01:28:11,000
那当它是 IDE

2753
01:28:11,000 --> 01:28:12,000
对

2754
01:28:13,000 --> 01:28:14,000
Windows 上面还有一个

2755
01:28:14,000 --> 01:28:17,000
我当时用的是一个挺有意思的编辑器

2756
01:28:17,000 --> 01:28:19,000
叫 Scient

2757
01:28:19,000 --> 01:28:20,000
你还记得吗

2758
01:28:22,000 --> 01:28:25,000
好像那个东西是和某一个 Python 的发行板

2759
01:28:25,000 --> 01:28:26,000
一起打包发布的

2760
01:28:27,000 --> 01:28:29,000
我也不太记得它是和谁一起发布的

2761
01:28:29,000 --> 01:28:31,000
但是我想它还叫 Sci

2762
01:28:31,000 --> 01:28:32,000
是叫 Sci

2763
01:28:33,000 --> 01:28:34,000
Sci Te 我记得

2764
01:28:34,000 --> 01:28:35,000
是不是

2765
01:28:35,000 --> 01:28:35,000
对

2766
01:28:35,000 --> 01:28:36,000
对

2767
01:28:36,000 --> 01:28:37,000
我用过它

2768
01:28:37,000 --> 01:28:38,000
我确定我用过它

2769
01:28:38,000 --> 01:28:39,000
它好像是和

2770
01:28:40,000 --> 01:28:44,000
某一个特定的 Python 发行板一起打包发布的

2771
01:28:44,000 --> 01:28:44,000
对

2772
01:28:44,000 --> 01:28:45,000
现在还有这个东西

2773
01:28:45,000 --> 01:28:46,000
就是

2774
01:28:46,000 --> 01:28:47,000
它叫什么

2775
01:28:47,000 --> 01:28:50,000
Scient 是一个我们编辑器

2776
01:28:50,000 --> 01:28:53,000
然后它本来是为了展示一个叫做

2777
01:28:53,000 --> 01:28:54,000
哇这怎么念

2778
01:28:54,000 --> 01:28:58,000
Scientila

2779
01:28:58,000 --> 01:28:59,000
Scientila

2780
01:28:59,000 --> 01:29:01,000
Scientila 是一个什么玩意

2781
01:29:01,000 --> 01:29:04,000
就是它是一个编辑器组件

2782
01:29:04,000 --> 01:29:07,000
就是它是一个用来写编辑器的一个 Library

2783
01:29:08,000 --> 01:29:08,000
OK

2784
01:29:08,000 --> 01:29:08,000
对

2785
01:29:08,000 --> 01:29:11,000
然后 Scient 就是为了展示这个 Library

2786
01:29:11,000 --> 01:29:13,000
然后它本来这个

2787
01:29:13,000 --> 01:29:15,000
我记得如果我没记错的话

2788
01:29:15,000 --> 01:29:17,000
它本来是要卖这个组件的 License 的

2789
01:29:18,000 --> 01:29:19,000
然后为了卖 License

2790
01:29:19,000 --> 01:29:21,000
它就要先展示一下 Scient

2791
01:29:21,000 --> 01:29:22,000
它能做什么

2792
01:29:22,000 --> 01:29:23,000
然后当时我就被它一些

2793
01:29:23,000 --> 01:29:26,000
很多比较新奇的特性所震惊了

2794
01:29:26,000 --> 01:29:27,000
就当时比如说

2795
01:29:28,000 --> 01:29:30,000
它支持多种字体

2796
01:29:30,000 --> 01:29:32,000
跟 Emax 那种是一样的

2797
01:29:32,000 --> 01:29:34,000
然后它可以支持等宽非等宽的

2798
01:29:34,000 --> 01:29:35,000
就是同时使用

2799
01:29:35,000 --> 01:29:37,000
然后与法高亮那些

2800
01:29:37,000 --> 01:29:39,000
就是当时我在

2801
01:29:39,000 --> 01:29:41,000
这个来说就是

2802
01:29:41,000 --> 01:29:42,000
哇这个还这么牛逼

2803
01:29:42,000 --> 01:29:44,000
还是挺少见

2804
01:29:44,000 --> 01:29:44,000
因为当时你知道

2805
01:29:45,000 --> 01:29:46,000
那个是从 Nopad

2806
01:29:46,000 --> 01:29:49,000
G 10 本过渡过来找的第一款编辑器

2807
01:29:49,000 --> 01:29:49,000
你知道吗

2808
01:29:52,000 --> 01:29:54,000
原来有这么一段黑历史

2809
01:29:55,000 --> 01:29:56,000
而且它是一个免费的

2810
01:29:57,000 --> 01:29:59,000
感觉还是相当不错

2811
01:29:59,000 --> 01:30:00,000
我不知道现在怎么样

2812
01:30:00,000 --> 01:30:00,000
哇它现在还有

2813
01:30:00,000 --> 01:30:01,000
既然还有 Mac OS 版

2814
01:30:01,000 --> 01:30:03,000
还在 Mac App Store 里面

2815
01:30:03,000 --> 01:30:04,000
我一定要下一个

2816
01:30:04,000 --> 01:30:05,000
下一个来用

2817
01:30:05,000 --> 01:30:06,000
我来怀怀旧

2818
01:30:06,000 --> 01:30:09,000
这个编辑器应该已经有一定年头了

2819
01:30:09,000 --> 01:30:10,000
至少也是有个十年八年的

2820
01:30:10,000 --> 01:30:13,000
你想我用的时候是在

2821
01:30:13,000 --> 01:30:14,000
我想想应该是在

2822
01:30:15,000 --> 01:30:16,000
2000 年左右吧

2823
01:30:16,000 --> 01:30:19,000
我在 Windows XP 的早期的时候

2824
01:30:19,000 --> 01:30:21,000
所以应该是有十几年的历史了

2825
01:30:22,000 --> 01:30:25,000
我早期用到了 Windows 上编辑器

2826
01:30:25,000 --> 01:30:28,000
或者编辑器比较

2827
01:30:28,000 --> 01:30:31,000
印象深刻的一个叫做 Edit Plus

2828
01:30:31,000 --> 01:30:33,000
图标是一个红色的笔记本

2829
01:30:33,000 --> 01:30:34,000
这个没有清晰过

2830
01:30:34,000 --> 01:30:35,000
图标是个红色的

2831
01:30:35,000 --> 01:30:37,000
翻开了半页的笔记本

2832
01:30:37,000 --> 01:30:37,000
OK

2833
01:30:37,000 --> 01:30:38,000
Edit Plus

2834
01:30:38,000 --> 01:30:40,000
我来看一看它是不是还存在

2835
01:30:43,000 --> 01:30:44,000
什么里已经阵亡

2836
01:30:45,000 --> 01:30:46,000
还存在

2837
01:30:46,000 --> 01:30:49,000
最近更新是 3 月 27 日今年

2838
01:30:49,000 --> 01:30:50,000
天哪

2839
01:30:50,000 --> 01:30:53,000
而且它的图标还是没有变

2840
01:30:53,000 --> 01:30:55,000
是一个红色的笔记本翻开了一半

2841
01:30:55,000 --> 01:30:56,000
好吧

2842
01:30:56,000 --> 01:30:58,000
这个 SignTag 我疯了

2843
01:30:58,000 --> 01:30:59,000
你知道它卖多少钱吗

2844
01:31:00,000 --> 01:31:00,000
多少

2845
01:31:00,000 --> 01:31:01,000
42 美元

2846
01:31:01,000 --> 01:31:03,000
Oh my fucking god

2847
01:31:03,000 --> 01:31:05,000
它的整个 4.2 兆

2848
01:31:05,000 --> 01:31:09,000
这就是在 Mac App Store 里面

2849
01:31:10,000 --> 01:31:11,000
太屌了

2850
01:31:12,000 --> 01:31:12,000
对

2851
01:31:12,000 --> 01:31:14,000
它确实是有一个自带的

2852
01:31:14,000 --> 01:31:16,000
好像它就是用 Python 来 script 还是怎么样

2853
01:31:16,000 --> 01:31:17,000
我忘了

2854
01:31:17,000 --> 01:31:18,000
很有可能

2855
01:31:18,000 --> 01:31:20,000
因为在我的印象里面

2856
01:31:20,000 --> 01:31:21,000
在我的脑海里面

2857
01:31:21,000 --> 01:31:23,000
somehow 跟 Python 有点关系

2858
01:31:23,000 --> 01:31:29,000
SignTag 和 Python 有非常浓烈的关联

2859
01:31:29,000 --> 01:31:29,000
我想起来了

2860
01:31:29,000 --> 01:31:31,000
我曾经用它来写过 Latech

2861
01:31:33,000 --> 01:31:35,000
就是因为它有多种语法高辽

2862
01:31:35,000 --> 01:31:36,000
然后字体不一样

2863
01:31:36,000 --> 01:31:37,000
就刚才讲

2864
01:31:37,000 --> 01:31:39,000
我是一直很羡慕 Emax 那个特性

2865
01:31:41,000 --> 01:31:42,000
OK

2866
01:31:43,000 --> 01:31:47,000
我的 Latech 的那个

2867
01:31:47,000 --> 01:31:51,000
描文件是在 Note++里面写的

2868
01:31:51,000 --> 01:31:53,000
它是一个只能使用等宽字体的吧

2869
01:31:54,000 --> 01:31:54,000
好像是

2870
01:31:54,000 --> 01:31:55,000
对

2871
01:31:55,000 --> 01:31:56,000
我觉得有时候

2872
01:31:56,000 --> 01:31:57,000
感觉不是

2873
01:31:57,000 --> 01:32:00,000
通过语法高辽有时候很难一言扫

2874
01:32:00,000 --> 01:32:02,000
你为什么会对这种半锁建基础

2875
01:32:02,000 --> 01:32:05,000
本意锁建基础有这么强烈的需求

2876
01:32:05,000 --> 01:32:07,000
我是希望能够不看编译结果

2877
01:32:07,000 --> 01:32:08,000
只看编码

2878
01:32:08,000 --> 01:32:12,000
能够很快的扫清楚文档的原始结构

2879
01:32:12,000 --> 01:32:13,000
比如说大标题

2880
01:32:13,000 --> 01:32:14,000
二级标题

2881
01:32:14,000 --> 01:32:15,000
这样那些东西

2882
01:32:15,000 --> 01:32:17,000
然后如果你每个字都是一样大

2883
01:32:17,000 --> 01:32:18,000
只通过颜色来区别的话

2884
01:32:18,000 --> 01:32:20,000
其实有一定的难度的

2885
01:32:20,000 --> 01:32:21,000
特别是文档比较长的时候

2886
01:32:22,000 --> 01:32:23,000
说得没错

2887
01:32:23,000 --> 01:32:24,000
你这么一说

2888
01:32:24,000 --> 01:32:25,000
我忽然想起来

2889
01:32:25,000 --> 01:32:28,000
我在本科做毕业设计的时候

2890
01:32:28,000 --> 01:32:31,000
要看一个非常庞大的 C 库

2891
01:32:31,000 --> 01:32:38,000
然后当时 download 了一个半编辑器的代码阅读工具

2892
01:32:38,000 --> 01:32:41,000
这个代码阅读工具的优点之一

2893
01:32:41,000 --> 01:32:48,000
也是它可以把比如说函数的名字用大号字体显示

2894
01:32:48,000 --> 01:32:51,000
然后一些经常出现的变量

2895
01:32:51,000 --> 01:32:54,000
可以用比较深的颜色显示

2896
01:32:54,000 --> 01:32:55,000
可是具体叫什么我忘记了

2897
01:32:55,000 --> 01:32:57,000
但是当时搜寻它的时候

2898
01:32:57,000 --> 01:33:00,000
就说它是一款非常适合于阅读代码的编辑器

2899
01:33:01,000 --> 01:33:02,000
OK

2900
01:33:02,000 --> 01:33:03,000
其实我觉得其实从这个

2901
01:33:03,000 --> 01:33:07,000
如果你从纯粹从字体和排版的角度来讲

2902
01:33:07,000 --> 01:33:09,000
就是这种方式也未尝不可

2903
01:33:09,000 --> 01:33:09,000
对不对

2904
01:33:10,000 --> 01:33:12,000
我现在有这种

2905
01:33:12,000 --> 01:33:13,000
也就是这么一种想法

2906
01:33:13,000 --> 01:33:16,000
因为有时候你真的看了一整瓶的大小

2907
01:33:16,000 --> 01:33:18,000
都一样的代码的时候还是挺辛苦的

2908
01:33:19,000 --> 01:33:20,000
对

2909
01:33:21,000 --> 01:33:23,000
接着说 Windows 上面的编辑

2910
01:33:23,000 --> 01:33:27,000
另外一个就是我刚刚提到的这个 NodePad++

2911
01:33:28,000 --> 01:33:29,000
好像是台湾人开发的

2912
01:33:31,000 --> 01:33:31,000
对

2913
01:33:31,000 --> 01:33:34,000
我记得在我切换到 Linux 之前

2914
01:33:34,000 --> 01:33:39,000
它是我几乎是最默认的一款编辑器了

2915
01:33:40,000 --> 01:33:43,000
不管是写文章还是写代码

2916
01:33:43,000 --> 01:33:44,000
基本上我都用它

2917
01:33:44,000 --> 01:33:45,000
OK

2918
01:33:45,000 --> 01:33:48,000
而且它启动快

2919
01:33:48,000 --> 01:33:49,000
对大文件的处理也很好

2920
01:33:49,000 --> 01:33:51,000
就是比较小巧精致

2921
01:33:52,000 --> 01:33:52,000
对

2922
01:33:52,000 --> 01:33:54,000
而且现在应该也是完全免费

2923
01:33:54,000 --> 01:33:55,000
你说这个我突然想起来

2924
01:33:55,000 --> 01:33:57,000
其实我也见过很多人在用这个

2925
01:33:57,000 --> 01:33:58,000
就是因为

2926
01:33:58,000 --> 01:34:01,000
首先就是 Windows 默认那个机式本确实太糟糕了

2927
01:34:01,000 --> 01:34:04,000
然后有很多人编辑一些文本文件的时候

2928
01:34:04,000 --> 01:34:06,000
还有苦于找不到一个比较好的工具

2929
01:34:06,000 --> 01:34:09,000
然后突然出来这么一个长得很像那个机式本的

2930
01:34:09,000 --> 01:34:10,000
但是又比它做得好的

2931
01:34:10,000 --> 01:34:12,000
觉得还是不错的

2932
01:34:12,000 --> 01:34:13,000
对

2933
01:34:13,000 --> 01:34:15,000
NodePad++可能就是这样一种东西

2934
01:34:15,000 --> 01:34:18,000
它甚至连名字都叫 NodePad

2935
01:34:18,000 --> 01:34:19,000
只不过是++而已

2936
01:34:19,000 --> 01:34:21,000
对

2937
01:34:22,000 --> 01:34:22,000
我相信还有

2938
01:34:22,000 --> 01:34:25,000
而且它经过简单的配置也是可以

2939
01:34:25,000 --> 01:34:30,000
成为一个比较基本的 IDE 来用的

2940
01:34:31,000 --> 01:34:34,000
就是你可以一键编译 C++

2941
01:34:34,000 --> 01:34:37,000
然后 C++的编译结果

2942
01:34:37,000 --> 01:34:38,000
也可以在它的那个

2943
01:34:38,000 --> 01:34:40,000
它应该也有一个类似于 Consul

2944
01:34:40,000 --> 01:34:43,000
或者说 Output 这么一个 Window

2945
01:34:43,000 --> 01:34:47,000
然后编译结果就可以在这个窗口里面显示

2946
01:34:47,000 --> 01:34:47,000
也挺好

2947
01:34:47,000 --> 01:34:49,000
它是一个免费的还是要付费的

2948
01:34:49,000 --> 01:34:50,000
是全免费

2949
01:34:50,000 --> 01:34:50,000
OK

2950
01:34:50,000 --> 01:34:55,000
那这个说不定真的可以成为什么 D 4 Windows Editor

2951
01:34:55,000 --> 01:34:55,000
对

2952
01:34:55,000 --> 01:34:58,000
我相信基本上用上它的人都挺喜欢的吧

2953
01:34:58,000 --> 01:34:59,000
就是我在

2954
01:35:00,000 --> 01:35:04,000
我已经至少说动了四五个朋友

2955
01:35:04,000 --> 01:35:05,000
在遥远的 Windows 时代

2956
01:35:05,000 --> 01:35:07,000
只说动了四五个朋友用它来写程序

2957
01:35:07,000 --> 01:35:08,000
因为那个时候你知道

2958
01:35:11,000 --> 01:35:13,000
学校里面教写程序

2959
01:35:13,000 --> 01:35:17,000
甚至是在什么 Turbo C 的环境下

2960
01:35:17,000 --> 01:35:19,000
在不堪回首的往事

2961
01:35:20,000 --> 01:35:20,000
OK

2962
01:35:20,000 --> 01:35:21,000
但对

2963
01:35:21,000 --> 01:35:26,000
我就教过了他们可以在这样一种 Windows 下面的一个编辑器里面写程序

2964
01:35:26,000 --> 01:35:29,000
然后通过简单的配置

2965
01:35:29,000 --> 01:35:30,000
就可以调用一个编辑器

2966
01:35:30,000 --> 01:35:33,000
编译器来调试程序

2967
01:35:33,000 --> 01:35:33,000
其实还挺爽

2968
01:35:35,000 --> 01:35:37,000
然后我自己在偷偷的用 Visual Studio

2969
01:35:41,000 --> 01:35:43,000
这就好像告诉别人菜好吃

2970
01:35:43,000 --> 01:35:44,000
你吃菜然后自己吃

2971
01:35:47,000 --> 01:35:48,000
太机智了

2972
01:35:50,000 --> 01:35:53,000
最近还有一些比较另类的编辑器出现

2973
01:35:54,000 --> 01:35:55,000
刚才我们提到那些编辑器

2974
01:35:55,000 --> 01:35:57,000
它都是基本上是用一个原生的

2975
01:36:00,000 --> 01:36:01,000
怎么这么描述

2976
01:36:01,000 --> 01:36:03,000
它都是一个原生的代码实现的编辑器

2977
01:36:04,000 --> 01:36:08,000
然后最近有一些基于 WebKit 的编辑器出现了

2978
01:36:09,000 --> 01:36:13,000
最比较典型的代表就是 GitHub Atom

2979
01:36:14,000 --> 01:36:14,000
对

2980
01:36:14,000 --> 01:36:15,000
GitHub Atom

2981
01:36:15,000 --> 01:36:17,000
现在这个知道的人比较多

2982
01:36:17,000 --> 01:36:17,000
它其实是

2983
01:36:18,000 --> 01:36:19,000
你可以理解它是一个浏览器

2984
01:36:19,000 --> 01:36:21,000
伪装成一个编辑器的样子

2985
01:36:22,000 --> 01:36:22,000
对

2986
01:36:22,000 --> 01:36:23,000
因为它就好像

2987
01:36:23,000 --> 01:36:26,000
有一些基于网页的编辑器

2988
01:36:26,000 --> 01:36:28,000
在线编辑器叫什么

2989
01:36:28,000 --> 01:36:29,000
Code Anywhere

2990
01:36:30,000 --> 01:36:32,000
有个比较著名叫 Code Mirror

2991
01:36:34,000 --> 01:36:37,000
但我记得我用过的那个音音叫做 Code Anywhere

2992
01:36:37,000 --> 01:36:39,000
然后就是一个

2993
01:36:39,000 --> 01:36:40,000
你打开一个网页

2994
01:36:40,000 --> 01:36:42,000
然后这个网页上面会给你显示一个编辑器

2995
01:36:42,000 --> 01:36:44,000
你可以在这个编辑器里面操作文件

2996
01:36:45,000 --> 01:36:47,000
只不过这些文件都是在云端的

2997
01:36:47,000 --> 01:36:47,000
对

2998
01:36:47,000 --> 01:36:49,000
然后也有什么语法高亮

2999
01:36:49,000 --> 01:36:51,000
然后你点一下

3000
01:36:51,000 --> 01:36:54,000
那个发布键它就可以把你

3001
01:36:54,000 --> 01:36:55,000
写好的东西发布出来

3002
01:36:55,000 --> 01:36:56,000
对

3003
01:36:56,000 --> 01:36:56,000
然后这个

3004
01:36:57,000 --> 01:36:59,000
Atom 这样的编辑器就可以视为

3005
01:36:59,000 --> 01:37:02,000
这样一种离线版本的浏览器里面的编辑器

3006
01:37:02,000 --> 01:37:03,000
但是我有一点

3007
01:37:03,000 --> 01:37:06,000
如果你真的去看它这种具体的实现

3008
01:37:06,000 --> 01:37:09,000
以及它整个的运行的逻辑

3009
01:37:09,000 --> 01:37:10,000
你会觉得这

3010
01:37:11,000 --> 01:37:13,000
这完全就不适合用来做一个编辑器

3011
01:37:13,000 --> 01:37:14,000
因为它毕竟是一个浏览器

3012
01:37:14,000 --> 01:37:14,000
对吧

3013
01:37:14,000 --> 01:37:15,000
比如你要实现

3014
01:37:15,000 --> 01:37:16,000
比如最简单的一个例子

3015
01:37:16,000 --> 01:37:18,000
你要实现光标那一束

3016
01:37:18,000 --> 01:37:19,000
然后再不断的变

3017
01:37:19,000 --> 01:37:21,000
你是要去通过一个

3018
01:37:21,000 --> 01:37:24,000
CSS 样式表去做一个动画

3019
01:37:24,000 --> 01:37:26,000
然后你要去衡量

3020
01:37:26,000 --> 01:37:26,000
非常

3021
01:37:26,000 --> 01:37:27,000
衡量那个位置

3022
01:37:27,000 --> 01:37:31,000
大概是在这个文档的哪一个相对的位移上面去

3023
01:37:31,000 --> 01:37:33,000
反正就整个过程是很扭曲的

3024
01:37:33,000 --> 01:37:33,000
所以

3025
01:37:34,000 --> 01:37:36,000
我到现在为止我也没看出来

3026
01:37:36,000 --> 01:37:38,000
就大家你看如果你是一个网页

3027
01:37:38,000 --> 01:37:39,000
然后你需要

3028
01:37:39,000 --> 01:37:42,000
比如说你是一个什么所谓的云编辑器

3029
01:37:42,000 --> 01:37:43,000
我可以理解

3030
01:37:43,000 --> 01:37:45,000
因为你最终是要在网页里面实现

3031
01:37:45,000 --> 01:37:46,000
你有这个平台的限制

3032
01:37:46,000 --> 01:37:49,000
但你说像那个 GitHub Atom 这种东西

3033
01:37:49,000 --> 01:37:49,000
我到目前为止

3034
01:37:49,000 --> 01:37:52,000
我还是不能理解它的意义何在

3035
01:37:52,000 --> 01:37:53,000
或者为什么要做这么一个东西

3036
01:37:54,000 --> 01:37:55,000
它可能就是

3037
01:37:57,000 --> 01:37:59,000
把 WebKit 当做

3038
01:38:00,000 --> 01:38:02,000
就像 GVM 或者是

3039
01:38:03,000 --> 01:38:06,000
.NET 这样一个运行时来使用

3040
01:38:06,000 --> 01:38:08,000
然后用它来写成确定一个常识吧

3041
01:38:08,000 --> 01:38:09,000
我觉得

3042
01:38:09,000 --> 01:38:11,000
就什么 WebKit as an OS

3043
01:38:11,000 --> 01:38:11,000
对

3044
01:38:11,000 --> 01:38:13,000
你把 WebKit 当做一个 OS 来使用

3045
01:38:13,000 --> 01:38:15,000
或者当做一个 Library 来使用

3046
01:38:15,000 --> 01:38:16,000
当作一个 Framework 来使用

3047
01:38:16,000 --> 01:38:16,000
对

3048
01:38:16,000 --> 01:38:17,000
但是

3049
01:38:17,000 --> 01:38:17,000
然后

3050
01:38:17,000 --> 01:38:18,000
他们也没有

3051
01:38:18,000 --> 01:38:19,000
就是这个编辑做出来

3052
01:38:19,000 --> 01:38:21,000
他也没有说有什么

3053
01:38:21,000 --> 01:38:22,000
相对于

3054
01:38:22,000 --> 01:38:22,000
非常了不起的样子

3055
01:38:22,000 --> 01:38:23,000
对

3056
01:38:23,000 --> 01:38:24,000
因为我没有看出来

3057
01:38:24,000 --> 01:38:25,000
起码我到目前为止没有看出来

3058
01:38:25,000 --> 01:38:28,000
他有什么不得了的创新

3059
01:38:28,000 --> 01:38:29,000
或者是有什么

3060
01:38:29,000 --> 01:38:31,000
足够吸引我的特性

3061
01:38:31,000 --> 01:38:32,000
让我去试一下

3062
01:38:32,000 --> 01:38:33,000
而且最关键是

3063
01:38:33,000 --> 01:38:33,000
它现在

3064
01:38:33,000 --> 01:38:34,000
我当然自己现在

3065
01:38:34,000 --> 01:38:36,000
现在是所谓的 Alpha 版本

3066
01:38:37,000 --> 01:38:38,000
很容易挂掉

3067
01:38:38,000 --> 01:38:38,000
对

3068
01:38:38,000 --> 01:38:39,000
它现在还是太不完善了

3069
01:38:39,000 --> 01:38:40,000
而且很不稳定

3070
01:38:40,000 --> 01:38:41,000
不完善

3071
01:38:41,000 --> 01:38:44,000
而且对资源的占用也是非常可观的

3072
01:38:44,000 --> 01:38:45,000
因为你想

3073
01:38:45,000 --> 01:38:47,000
你在滥用一个浏览器

3074
01:38:47,000 --> 01:38:50,000
然后去实现一个编辑器的功能

3075
01:38:51,000 --> 01:38:51,000
对吧

3076
01:38:52,000 --> 01:38:54,000
所以是挺古怪的一件事情

3077
01:38:56,000 --> 01:38:57,000
还有一个编辑器

3078
01:38:57,000 --> 01:38:58,000
这里是

3079
01:38:58,000 --> 01:38:59,000
你也写了

3080
01:38:59,000 --> 01:39:00,000
但是我也要大力推荐的

3081
01:39:00,000 --> 01:39:01,000
叫做 ACME

3082
01:39:03,000 --> 01:39:04,000
ACME 这个编辑器是

3083
01:39:04,000 --> 01:39:06,000
你确定你要大力推荐吗

3084
01:39:06,000 --> 01:39:08,000
我的推荐不是说你要去用

3085
01:39:08,000 --> 01:39:09,000
你要去什么

3086
01:39:09,000 --> 01:39:11,000
去真的去用它作为主力

3087
01:39:11,000 --> 01:39:13,000
但是你应该去了解一下它一些

3088
01:39:13,000 --> 01:39:15,000
一些很奇怪的一些哲学

3089
01:39:15,000 --> 01:39:15,000
我觉得是

3090
01:39:15,000 --> 01:39:17,000
对去了解一下

3091
01:39:17,000 --> 01:39:19,000
就是上世纪

3092
01:39:19,000 --> 01:39:20,000
七八十年代有这么

3093
01:39:20,000 --> 01:39:21,000
八九十年代应该是

3094
01:39:21,000 --> 01:39:23,000
八九十年代有这么一群人

3095
01:39:23,000 --> 01:39:25,000
曾经有过这样的想象

3096
01:39:26,000 --> 01:39:27,000
编辑器有可能是这个样子的

3097
01:39:29,000 --> 01:39:30,000
其实 ACME

3098
01:39:30,000 --> 01:39:31,000
对说到 ACME

3099
01:39:31,000 --> 01:39:33,000
就不得不说 Planet 9

3100
01:39:33,000 --> 01:39:34,000
Planet 其实就是这样一种

3101
01:39:35,000 --> 01:39:37,000
非常了不起的

3102
01:39:37,000 --> 01:39:38,000
先锋性的尝试

3103
01:39:38,000 --> 01:39:40,000
只不过它没有成功罢了

3104
01:39:40,000 --> 01:39:40,000
对

3105
01:39:40,000 --> 01:39:43,000
Planet 9 的目的是作为一个什么

3106
01:39:43,000 --> 01:39:45,000
叫做更好的 UNIX

3107
01:39:45,000 --> 01:39:48,000
对就比 UNIX 还 UNIX 的 UNIX

3108
01:39:48,000 --> 01:39:49,000
对 Next Generation UNIX

3109
01:39:49,000 --> 01:39:50,000
就是 Planet 9

3110
01:39:50,000 --> 01:39:51,000
但是

3111
01:39:52,000 --> 01:39:53,000
但是后来也

3112
01:39:53,000 --> 01:39:54,000
现在你可以去下载

3113
01:39:54,000 --> 01:39:56,000
虚拟机比较方便

3114
01:39:56,000 --> 01:39:57,000
可以在虚拟机上跑来玩

3115
01:39:57,000 --> 01:39:58,000
但是作为生产用

3116
01:39:58,000 --> 01:39:59,000
肯定不太现实了

3117
01:40:00,000 --> 01:40:01,000
Anyway

3118
01:40:01,000 --> 01:40:02,000
ACME 这个编辑器

3119
01:40:02,000 --> 01:40:04,000
就是在 Planet 9 里面

3120
01:40:05,000 --> 01:40:06,000
Roll Pike

3121
01:40:06,000 --> 01:40:09,000
为了在 Planet 9 里面写程序

3122
01:40:09,000 --> 01:40:10,000
于是给自己开发了

3123
01:40:10,000 --> 01:40:11,000
这么一个编辑器

3124
01:40:11,000 --> 01:40:13,000
但是后来他先用了

3125
01:40:13,000 --> 01:40:15,000
用它来写构程序了

3126
01:40:15,000 --> 01:40:17,000
然后这编辑器

3127
01:40:17,000 --> 01:40:19,000
有什么特别的地方呢

3128
01:40:19,000 --> 01:40:20,000
我觉得就说两点

3129
01:40:20,000 --> 01:40:21,000
比较表面的

3130
01:40:21,000 --> 01:40:24,000
因为我也没有真的实际去

3131
01:40:24,000 --> 01:40:25,000
很长时间用过它

3132
01:40:25,000 --> 01:40:25,000
但是

3133
01:40:26,000 --> 01:40:27,000
首先第一个

3134
01:40:27,000 --> 01:40:29,000
它默认使用是不等宽字体的

3135
01:40:30,000 --> 01:40:32,000
这个就觉得非常奇怪

3136
01:40:32,000 --> 01:40:33,000
我说为什么会这样

3137
01:40:34,000 --> 01:40:35,000
但是它是

3138
01:40:35,000 --> 01:40:36,000
当我记得它给过一个解释

3139
01:40:36,000 --> 01:40:39,000
就是觉得它说不等宽字体的

3140
01:40:39,000 --> 01:40:40,000
程序更加易读

3141
01:40:41,000 --> 01:40:43,000
不等宽的程序更加美观

3142
01:40:43,000 --> 01:40:44,000
我觉得至少

3143
01:40:44,000 --> 01:40:46,000
以央视我幼小的心灵来看

3144
01:40:46,000 --> 01:40:49,000
在 Georgia 这个字体下面

3145
01:40:49,000 --> 01:40:52,000
程序看起来好像要更优雅一些

3146
01:40:52,000 --> 01:40:53,000
不管其不说代码质量怎么样

3147
01:40:53,000 --> 01:40:55,000
但至少看起来比较有用

3148
01:40:56,000 --> 01:40:56,000
然后这些人

3149
01:40:56,000 --> 01:40:57,000
如果你们不等宽字体

3150
01:40:57,000 --> 01:40:59,000
你怎么去对齐那些东西呢

3151
01:40:59,000 --> 01:40:59,000
但发生

3152
01:40:59,000 --> 01:41:00,000
对齐没有这么多

3153
01:41:00,000 --> 01:41:01,000
没有那么重要

3154
01:41:01,000 --> 01:41:02,000
没有你想象中的数据

3155
01:41:02,000 --> 01:41:03,000
对

3156
01:41:03,000 --> 01:41:04,000
而且它就是

3157
01:41:04,000 --> 01:41:05,000
而且它用那个 Tab

3158
01:41:05,000 --> 01:41:07,000
我们现在一般的做法

3159
01:41:07,000 --> 01:41:08,000
是把 Tab 转换成

3160
01:41:08,000 --> 01:41:10,000
比如说四个空格来做

3161
01:41:10,000 --> 01:41:11,000
但是在 Acme

3162
01:41:11,000 --> 01:41:12,000
或者包括在

3163
01:41:12,000 --> 01:41:14,000
你在 Go 语言里面的

3164
01:41:14,000 --> 01:41:16,000
缩进默认是用 Tab 吗

3165
01:41:17,000 --> 01:41:17,000
真的

3166
01:41:17,000 --> 01:41:18,000
真的

3167
01:41:18,000 --> 01:41:20,000
我以为现在全世界已经

3168
01:41:20,000 --> 01:41:20,000
没有

3169
01:41:20,000 --> 01:41:22,000
完全倒向空格了

3170
01:41:22,000 --> 01:41:24,000
那个什么 GoLine 里面的

3171
01:41:24,000 --> 01:41:25,000
就是你用 GoFormat

3172
01:41:25,000 --> 01:41:26,000
如果你不改配置

3173
01:41:26,000 --> 01:41:29,000
它默认会帮你重新用 Tab 来做缩进

3174
01:41:29,000 --> 01:41:30,000
就是在这里也是一样

3175
01:41:30,000 --> 01:41:31,000
因为 Tab 有个好处

3176
01:41:31,000 --> 01:41:31,000
就是它可以

3177
01:41:31,000 --> 01:41:32,000
如果你是不等宽的话

3178
01:41:32,000 --> 01:41:34,000
它也可以能够帮你对齐

3179
01:41:34,000 --> 01:41:35,000
对

3180
01:41:35,000 --> 01:41:37,000
但也不是所有情况下能

3181
01:41:37,000 --> 01:41:39,000
大部分时候就能用了

3182
01:41:39,000 --> 01:41:41,000
然后另外一点就是

3183
01:41:42,000 --> 01:41:43,000
RawPyke 这个人是不用

3184
01:41:43,000 --> 01:41:44,000
语法高亮的

3185
01:41:44,000 --> 01:41:45,000
你能想象吗

3186
01:41:46,000 --> 01:41:47,000
这个还好吧

3187
01:41:47,000 --> 01:41:48,000
就是

3188
01:41:49,000 --> 01:41:50,000
我也不知道

3189
01:41:50,000 --> 01:41:50,000
我

3190
01:41:51,000 --> 01:41:53,000
有一点

3191
01:41:53,000 --> 01:41:57,000
感觉就是语法高亮和等宽

3192
01:41:58,000 --> 01:42:01,000
和包括小键盘

3193
01:42:02,000 --> 01:42:03,000
这些东西都是

3194
01:42:03,000 --> 01:42:04,000
可有可无的

3195
01:42:05,000 --> 01:42:06,000
Somehow overrated

3196
01:42:07,000 --> 01:42:09,000
但这一点我一直是很不能理解

3197
01:42:09,000 --> 01:42:11,000
因为虽然说它这个 Acme

3198
01:42:11,000 --> 01:42:13,000
它是默认是使用非等宽字体的

3199
01:42:13,000 --> 01:42:15,000
但是它只有一个大小

3200
01:42:15,000 --> 01:42:16,000
而且只能用一种字体

3201
01:42:17,000 --> 01:42:18,000
我看的样子是这样子

3202
01:42:18,000 --> 01:42:19,000
对

3203
01:42:19,000 --> 01:42:21,000
至少在目前版本来说是这样

3204
01:42:21,000 --> 01:42:21,000
对

3205
01:42:21,000 --> 01:42:22,000
这就会有一个问题

3206
01:42:22,000 --> 01:42:23,000
就是

3207
01:42:24,000 --> 01:42:28,000
你没有办法通过改变字形

3208
01:42:28,000 --> 01:42:29,000
或者是字体的大小来区分

3209
01:42:31,000 --> 01:42:32,000
原代码的结构

3210
01:42:32,000 --> 01:42:34,000
或者是文档的结构

3211
01:42:34,000 --> 01:42:35,000
那么刚才我讲了

3212
01:42:35,000 --> 01:42:37,000
如果一般的做法

3213
01:42:37,000 --> 01:42:38,000
就是你用语法高亮的方式

3214
01:42:38,000 --> 01:42:39,000
来分清楚这个结构

3215
01:42:40,000 --> 01:42:43,000
但是 Raw Pike 这种大神级的人物

3216
01:42:44,000 --> 01:42:46,000
他说我们大神写程序

3217
01:42:46,000 --> 01:42:48,000
从来不需要语法高亮

3218
01:42:48,000 --> 01:42:50,000
那就没有办法了

3219
01:42:50,000 --> 01:42:52,000
但是我一直很难想象

3220
01:42:52,000 --> 01:42:53,000
我也尝试过一下

3221
01:42:53,000 --> 01:42:55,000
但是还是很别扭

3222
01:42:55,000 --> 01:42:56,000
我不知道你怎么觉得

3223
01:42:57,000 --> 01:42:59,000
我其实在很长时间

3224
01:43:00,000 --> 01:43:01,000
在我比较小的时候

3225
01:43:01,000 --> 01:43:02,000
写程序

3226
01:43:02,000 --> 01:43:03,000
我是不知道怎么看它

3227
01:43:04,000 --> 01:43:06,000
那个时候我是用单色的

3228
01:43:08,000 --> 01:43:11,000
单色的模式来写过很长时间的程序

3229
01:43:11,000 --> 01:43:11,000
甚至

3230
01:43:12,000 --> 01:43:13,000
我应该跟你说过

3231
01:43:13,000 --> 01:43:17,000
我最开始学写程序的时候

3232
01:43:17,000 --> 01:43:18,000
是用笔写在纸上的

3233
01:43:19,000 --> 01:43:21,000
那个时候难道

3234
01:43:21,000 --> 01:43:23,000
我要用不同的颜色去写一段程序吗

3235
01:43:23,000 --> 01:43:24,000
所以也没什么

3236
01:43:25,000 --> 01:43:26,000
而且你知道

3237
01:43:26,000 --> 01:43:27,000
所以我知道

3238
01:43:27,000 --> 01:43:30,000
这些大神级程序员的先例都是这样的

3239
01:43:30,000 --> 01:43:31,000
不

3240
01:43:31,000 --> 01:43:32,000
这跟大神不神没有关系

3241
01:43:32,000 --> 01:43:33,000
这只是一个

3242
01:43:33,000 --> 01:43:34,000
由简入奢异

3243
01:43:34,000 --> 01:43:35,000
由奢异简难的问题

3244
01:43:36,000 --> 01:43:37,000
如果你

3245
01:43:37,000 --> 01:43:39,000
我的第一台电脑是一台 Apple II

3246
01:43:40,000 --> 01:43:41,000
然后 Apple II 上面的 Basic

3247
01:43:41,000 --> 01:43:43,000
是只有一种颜色的

3248
01:43:43,000 --> 01:43:44,000
蓝底白字好像还是

3249
01:43:45,000 --> 01:43:49,000
然后你可以在 Logo 和 Basic 模式之间切换

3250
01:43:49,000 --> 01:43:51,000
可是不管 Logo 还是 Basic

3251
01:43:51,000 --> 01:43:52,000
都没有语法高亮

3252
01:43:52,000 --> 01:43:53,000
甚至在 Logo 这种

3253
01:43:53,000 --> 01:43:55,000
括号套括号的语言里面

3254
01:43:55,000 --> 01:43:57,000
括号是没办法配对的

3255
01:43:58,000 --> 01:44:00,000
你必须靠肉眼去配对

3256
01:44:00,000 --> 01:44:03,000
看你的两个括号是不是配等

3257
01:44:03,000 --> 01:44:05,000
如果不等的话

3258
01:44:05,000 --> 01:44:06,000
也许你这一个程序

3259
01:44:06,000 --> 01:44:07,000
你就要 debug 一个下午

3260
01:44:07,000 --> 01:44:09,000
你都不知道缺失的

3261
01:44:09,000 --> 01:44:10,000
缺失括号在哪

3262
01:44:11,000 --> 01:44:13,000
但是我也不知道

3263
01:44:13,000 --> 01:44:14,000
那个时候

3264
01:44:14,000 --> 01:44:16,000
我从来没有想过

3265
01:44:16,000 --> 01:44:20,000
没有的那个东西会让我造成什么障碍

3266
01:44:21,000 --> 01:44:21,000
OK

3267
01:44:23,000 --> 01:44:24,000
那如果你现在

3268
01:44:25,000 --> 01:44:27,000
我相信现在你应该是习惯了语法高亮

3269
01:44:28,000 --> 01:44:29,000
现在

3270
01:44:31,000 --> 01:44:34,000
有时候可能也会觉得

3271
01:44:34,000 --> 01:44:35,000
没有语法高亮是不太好

3272
01:44:35,000 --> 01:44:37,000
那就是有时候

3273
01:44:37,000 --> 01:44:39,000
比如说写一个非常复杂的

3274
01:44:39,000 --> 01:44:41,000
尤其是在打开

3275
01:44:41,000 --> 01:44:44,000
刚刚打开一个文件的时候

3276
01:44:44,000 --> 01:44:44,000
比如说

3277
01:44:47,000 --> 01:44:48,000
某一段

3278
01:44:48,000 --> 01:44:51,000
某一个文件打开的时候

3279
01:44:51,000 --> 01:44:54,000
它没有扩展名

3280
01:44:55,000 --> 01:44:58,000
打开之后默认把它显示为单色的

3281
01:44:58,000 --> 01:45:00,000
我有时候可能要过一段时间

3282
01:45:00,000 --> 01:45:02,000
才会意识到这个东西没有语法高亮

3283
01:45:03,000 --> 01:45:04,000
OK

3284
01:45:04,000 --> 01:45:05,000
这还蛮新鲜

3285
01:45:05,000 --> 01:45:07,000
我现在就遇到一个作用是这样子

3286
01:45:07,000 --> 01:45:09,000
就是因为我要去登录很多服务器

3287
01:45:10,000 --> 01:45:12,000
然后你知道我也不是说

3288
01:45:12,000 --> 01:45:15,000
在每个服务器上都配置我的 Vim 的那些东西

3289
01:45:15,000 --> 01:45:16,000
很懒吗

3290
01:45:16,000 --> 01:45:16,000
还是因为

3291
01:45:16,000 --> 01:45:18,000
比如说编辑一些配置文件

3292
01:45:19,000 --> 01:45:21,000
有时候它就没有语法高亮

3293
01:45:21,000 --> 01:45:22,000
然后就觉得

3294
01:45:23,000 --> 01:45:24,000
好不习惯

3295
01:45:24,000 --> 01:45:25,000
觉得它没有安全感

3296
01:45:25,000 --> 01:45:25,000
你知道吗

3297
01:45:25,000 --> 01:45:26,000
因为语法高亮它可以

3298
01:45:26,000 --> 01:45:27,000
有时候可以

3299
01:45:27,000 --> 01:45:28,000
如果你看颜色不对

3300
01:45:28,000 --> 01:45:29,000
一般都是你语法错了

3301
01:45:30,000 --> 01:45:31,000
对

3302
01:45:31,000 --> 01:45:35,000
语法高亮毫无疑问是有助于你发现

3303
01:45:35,000 --> 01:45:36,000
问题

3304
01:45:36,000 --> 01:45:37,000
代码之中的问题了

3305
01:45:37,000 --> 01:45:37,000
对

3306
01:45:37,000 --> 01:45:41,000
然后就会有一种叫什么不安全的感觉

3307
01:45:41,000 --> 01:45:42,000
对

3308
01:45:42,000 --> 01:45:43,000
这算什么

3309
01:45:43,000 --> 01:45:45,000
我是把语法高亮做语法检查了

3310
01:45:45,000 --> 01:45:46,000
我觉得你们都有 paranoid

3311
01:45:48,000 --> 01:45:49,000
Anyway

3312
01:45:50,000 --> 01:45:52,000
所以我一直很难想象

3313
01:45:52,000 --> 01:45:53,000
在现在这种情况下

3314
01:45:54,000 --> 01:45:55,000
放弃语法高亮会怎么样

3315
01:45:55,000 --> 01:45:56,000
不过后来我想了一下

3316
01:45:57,000 --> 01:45:57,000
其实

3317
01:45:58,000 --> 01:45:58,000
在 Go

3318
01:46:01,000 --> 01:46:02,000
如果你只是写 Go 程序的话

3319
01:46:02,000 --> 01:46:03,000
可能没有太大的障碍

3320
01:46:03,000 --> 01:46:05,000
因为你知道如果

3321
01:46:07,000 --> 01:46:08,000
就哪怕你没有语法高亮

3322
01:46:08,000 --> 01:46:10,000
然后如果你配置你编辑器

3323
01:46:10,000 --> 01:46:11,000
默认保存

3324
01:46:11,000 --> 01:46:12,000
跑一下能 Go format 的话

3325
01:46:13,000 --> 01:46:15,000
它是会提醒你哪里错了的

3326
01:46:15,000 --> 01:46:17,000
这个是编译器级别的检查

3327
01:46:17,000 --> 01:46:19,000
不是说只是从语法上面来检查

3328
01:46:20,000 --> 01:46:23,000
所以从这个角度来说

3329
01:46:23,000 --> 01:46:24,000
你没有语法编辑器

3330
01:46:24,000 --> 01:46:26,000
其实没有语法高亮

3331
01:46:26,000 --> 01:46:27,000
其实也是挺安全的

3332
01:46:27,000 --> 01:46:28,000
起码是 Go

3333
01:46:28,000 --> 01:46:29,000
但是如果你是写 Python

3334
01:46:29,000 --> 01:46:31,000
或者想写 Ruby 这种动态语言

3335
01:46:31,000 --> 01:46:32,000
就完全不行了

3336
01:46:32,000 --> 01:46:34,000
因为那种东西你不跑起来

3337
01:46:34,000 --> 01:46:35,000
或者说你跑起来

3338
01:46:35,000 --> 01:46:37,000
没有跑到那个代码内

3339
01:46:37,000 --> 01:46:40,000
你去可能都不会很好的发现那个问题

3340
01:46:41,000 --> 01:46:42,000
对

3341
01:46:42,000 --> 01:46:43,000
所以是这样

3342
01:46:43,000 --> 01:46:45,000
所以我觉得这里还是有一点区别

3343
01:46:45,000 --> 01:46:46,000
也可能是为什么

3344
01:46:46,000 --> 01:46:47,000
像 Ropehike

3345
01:46:47,000 --> 01:46:49,000
因为他也是 Go 的作者

3346
01:46:51,000 --> 01:46:55,000
他能敢于用 Ackme

3347
01:46:55,000 --> 01:46:57,000
来写这个程序

3348
01:46:57,000 --> 01:46:59,000
而不用担心写错

3349
01:46:59,000 --> 01:47:00,000
反正大流程序员

3350
01:47:01,000 --> 01:47:02,000
应该是不会出错的吧

3351
01:47:02,000 --> 01:47:03,000
可能是这样

3352
01:47:04,000 --> 01:47:06,000
然后 Ackme 在我看来

3353
01:47:06,000 --> 01:47:10,000
它比较 Hardcore 的一点

3354
01:47:10,000 --> 01:47:12,000
就是它有点像 Lisp

3355
01:47:13,000 --> 01:47:15,000
它的很多东西是可以

3356
01:47:16,000 --> 01:47:17,000
在运行时改变的

3357
01:47:17,000 --> 01:47:19,000
比如说我们司空见惯的

3358
01:47:19,000 --> 01:47:21,000
这样一个 Layout

3359
01:47:21,000 --> 01:47:24,000
就是下面是一片可以编辑的区域

3360
01:47:24,000 --> 01:47:26,000
然后上面有一堆菜单栏

3361
01:47:26,000 --> 01:47:27,000
菜单栏里面的每个命令

3362
01:47:27,000 --> 01:47:31,000
比如说 Edit、View 或者 Format

3363
01:47:33,000 --> 01:47:36,000
你会觉得点 Edit

3364
01:47:36,000 --> 01:47:38,000
然后下面出现一个 Dropdown List

3365
01:47:38,000 --> 01:47:39,000
然后从里面选一个命令

3366
01:47:39,000 --> 01:47:40,000
是非常自然的事情

3367
01:47:40,000 --> 01:47:43,000
但是你有没有想过假如说

3368
01:47:44,000 --> 01:47:46,000
菜单栏这一行里面的每一个字符

3369
01:47:46,000 --> 01:47:48,000
也都是可以更改的呢

3370
01:47:49,000 --> 01:47:52,000
而 Ackme 它就是这样一种编辑器

3371
01:47:52,000 --> 01:47:52,000
Ackme 的

3372
01:47:53,000 --> 01:47:55,000
你打开一个 Buffer

3373
01:47:55,000 --> 01:47:59,000
或者是打开一个编辑文件的区域的时候

3374
01:47:59,000 --> 01:48:02,000
它上面会有一排菜单栏的东西

3375
01:48:02,000 --> 01:48:04,000
而且它的确也是卖菜单栏

3376
01:48:04,000 --> 01:48:05,000
比如说有 Edit

3377
01:48:05,000 --> 01:48:07,000
有 Dell 之类的

3378
01:48:07,000 --> 01:48:08,000
然后比如说你点一下 Edit

3379
01:48:08,000 --> 01:48:10,000
而且我记得应该是

3380
01:48:10,000 --> 01:48:11,000
对 Ackme 是一个

3381
01:48:11,000 --> 01:48:15,000
一定要用三件鼠标才能操作的编辑器

3382
01:48:16,000 --> 01:48:18,000
你用左键点一行文字是选中它

3383
01:48:18,000 --> 01:48:20,000
然后用中键点一行文字是 Whatever

3384
01:48:21,000 --> 01:48:22,000
应该是执行吧

3385
01:48:22,000 --> 01:48:23,000
然后用右键点

3386
01:48:23,000 --> 01:48:25,000
又是又有其他的功用

3387
01:48:26,000 --> 01:48:28,000
如果你用左键点一下

3388
01:48:30,000 --> 01:48:32,000
菜单栏里面的 Edit

3389
01:48:32,000 --> 01:48:33,000
不会有任何方向

3390
01:48:33,000 --> 01:48:35,000
你只会把光标放在 Edit 那边

3391
01:48:35,000 --> 01:48:37,000
然后此时你可以改变 Edit

3392
01:48:37,000 --> 01:48:39,000
比如说你可以把 Edit 这个词删掉

3393
01:48:39,000 --> 01:48:40,000
然后把它改成

3394
01:48:40,000 --> 01:48:43,000
比如说 Dell

3395
01:48:43,000 --> 01:48:46,000
然后你再用你的中键去点一下 Dell

3396
01:48:47,000 --> 01:48:48,000
你会发现

3397
01:48:49,000 --> 01:48:52,000
你原来在编辑区里面

3398
01:48:52,000 --> 01:48:53,000
被选中了一段文字

3399
01:48:53,000 --> 01:48:54,000
被删掉了

3400
01:48:57,000 --> 01:49:00,000
它是一个它的所谓可定制的这么一个

3401
01:49:01,000 --> 01:49:03,000
功能被扩展到了

3402
01:49:04,000 --> 01:49:06,000
用户界面本身

3403
01:49:06,000 --> 01:49:07,000
而且

3404
01:49:07,000 --> 01:49:10,000
所以它是一个可以编辑自己的编辑器

3405
01:49:11,000 --> 01:49:14,000
对它不仅能够配置自己

3406
01:49:14,000 --> 01:49:15,000
而且能够编辑自己

3407
01:49:15,000 --> 01:49:19,000
这是非常非常先锋的一种使用方式

3408
01:49:19,000 --> 01:49:20,000
应该说

3409
01:49:20,000 --> 01:49:21,000
就像我说的

3410
01:49:21,000 --> 01:49:22,000
就像 Lisp 一样

3411
01:49:22,000 --> 01:49:25,000
它的使用是如此灵活

3412
01:49:25,000 --> 01:49:28,000
也就是人们不知道应该怎么使用它

3413
01:49:33,000 --> 01:49:34,000
所以其实你看一下

3414
01:49:34,000 --> 01:49:39,000
像他们之前购语言的日期的展示

3415
01:49:39,000 --> 01:49:40,000
就觉得很奇怪

3416
01:49:40,000 --> 01:49:40,000
对吧

3417
01:49:40,000 --> 01:49:42,000
这种方式编辑也是很奇怪的

3418
01:49:43,000 --> 01:49:46,000
有时候我觉得这些比较

3419
01:49:47,000 --> 01:49:49,000
un-orthodoxo 的

3420
01:49:49,000 --> 01:49:51,000
这非正统的

3421
01:49:51,000 --> 01:49:53,000
或者说非我们

3422
01:49:53,000 --> 01:49:58,000
五倍平庸之人所能想象出的特别的方式

3423
01:49:58,000 --> 01:49:59,000
有时候比较

3424
01:50:00,000 --> 01:50:01,000
非常的 pragmatic

3425
01:50:01,000 --> 01:50:03,000
有时候就非常的 alien

3426
01:50:03,000 --> 01:50:04,000
非常非常

3427
01:50:06,000 --> 01:50:08,000
就非常奇异

3428
01:50:08,000 --> 01:50:09,000
有时候

3429
01:50:09,000 --> 01:50:10,000
不知道是件好事还是坏事

3430
01:50:10,000 --> 01:50:12,000
但无论如何对于你的

3431
01:50:13,000 --> 01:50:16,000
跳出你的 comfortable zone 是有帮助的

3432
01:50:17,000 --> 01:50:18,000
有时候你真的是

3433
01:50:19,000 --> 01:50:22,000
如果你听到一个非常激进古怪

3434
01:50:22,000 --> 01:50:23,000
或奇怪的观点

3435
01:50:23,000 --> 01:50:25,000
而且你有知道一个是一个什么

3436
01:50:25,000 --> 01:50:27,000
很厉害的人在这么做

3437
01:50:27,000 --> 01:50:29,000
你可能要放下所有成见

3438
01:50:29,000 --> 01:50:30,000
然后去看一下

3439
01:50:30,000 --> 01:50:31,000
想一想

3440
01:50:32,000 --> 01:50:32,000
所有的叫什么

3441
01:50:33,000 --> 01:50:34,000
give you five minutes

3442
01:50:35,000 --> 01:50:37,000
去想一下它为什么会这样

3443
01:50:37,000 --> 01:50:37,000
就有什么

3444
01:50:37,000 --> 01:50:39,000
对你就像一个风险投资人

3445
01:50:39,000 --> 01:50:42,000
然后进了一个战争精英的创业者

3446
01:50:42,000 --> 01:50:43,000
你要先听听他

3447
01:50:43,000 --> 01:50:45,000
到底要说什么不是

3448
01:50:45,000 --> 01:50:47,000
然后想想这个东西能不能成功

3449
01:50:47,000 --> 01:50:47,000
对

3450
01:50:48,000 --> 01:50:48,000
所以有时候

3451
01:50:48,000 --> 01:50:50,000
你会学到一些

3452
01:50:50,000 --> 01:50:52,000
完全不一样的新鲜的一些东西

3453
01:50:52,000 --> 01:50:52,000
我觉得

3454
01:50:53,000 --> 01:50:53,000
对

3455
01:50:53,000 --> 01:50:55,000
而且就像风险投资商一样

3456
01:50:55,000 --> 01:50:58,000
如果你接受了这个观点之后

3457
01:50:58,000 --> 01:50:58,000
你觉得

3458
01:50:59,000 --> 01:51:03,000
你愿意把你的时间资本投入进去

3459
01:51:03,000 --> 01:51:04,000
学习一下

3460
01:51:04,000 --> 01:51:06,000
投资在这个 idea 上面

3461
01:51:06,000 --> 01:51:09,000
也许将来的回报是非常高的

3462
01:51:09,000 --> 01:51:10,000
就好像

3463
01:51:10,000 --> 01:51:11,000
就比如说

3464
01:51:11,000 --> 01:51:14,000
我在 Qra 上找到了一个对比

3465
01:51:14,000 --> 01:51:16,000
WIM 和 Emax 的答案里面

3466
01:51:17,000 --> 01:51:18,000
这个作者就说

3467
01:51:18,000 --> 01:51:20,000
你在 WIM 里面的投资

3468
01:51:21,000 --> 01:51:23,000
会对于你一生来说

3469
01:51:23,000 --> 01:51:24,000
都是有不注意的

3470
01:51:24,000 --> 01:51:25,000
而且可以在

3471
01:51:25,000 --> 01:51:29,000
理理作统很多其他的工具里面得到应用

3472
01:51:30,000 --> 01:51:31,000
比如说

3473
01:51:31,000 --> 01:51:32,000
最简单的一个例子

3474
01:51:32,000 --> 01:51:33,000
J 和 K

3475
01:51:35,000 --> 01:51:36,000
你按下 J 是下一个

3476
01:51:36,000 --> 01:51:37,000
按下 K 是上一个

3477
01:51:37,000 --> 01:51:38,000
在

3478
01:51:38,000 --> 01:51:39,000
下一行上一行

3479
01:51:39,000 --> 01:51:41,000
在 WIM 里面是这样

3480
01:51:41,000 --> 01:51:43,000
在 Gmail 里面也是这样

3481
01:51:43,000 --> 01:51:43,000
对

3482
01:51:43,000 --> 01:51:46,000
Gmail 里面如果你启用了一个叫什么

3483
01:51:46,000 --> 01:51:48,000
快捷键模式的话

3484
01:51:48,000 --> 01:51:50,000
你会发现有很多这种键榜定是

3485
01:51:50,000 --> 01:51:51,000
非常有 WIM 风格的

3486
01:51:52,000 --> 01:51:52,000
对

3487
01:51:53,000 --> 01:51:55,000
如果你学会了 WIM 之后

3488
01:51:56,000 --> 01:52:00,000
你的经验是可以应用在很多其他的工具上面的

3489
01:52:00,000 --> 01:52:00,000
而反过来

3490
01:52:00,000 --> 01:52:03,000
如果你把你的时间花在 Emax 上面的话

3491
01:52:03,000 --> 01:52:06,000
你会发现你就局限在 Emax 里面了

3492
01:52:06,000 --> 01:52:07,000
当然 Emax 是一个非常

3493
01:52:08,000 --> 01:52:09,000
庞大的天地

3494
01:52:09,000 --> 01:52:10,000
但是

3495
01:52:10,000 --> 01:52:12,000
你所有的知识就

3496
01:52:12,000 --> 01:52:14,000
仅仅只是在 Emax 内部有用而已

3497
01:52:14,000 --> 01:52:17,000
但部分原因也就是因为 Lisp 这个东西

3498
01:52:20,000 --> 01:52:20,000
还有一个

3499
01:52:20,000 --> 01:52:21,000
有一个

3500
01:52:22,000 --> 01:52:26,000
最早的 Firefox 有一个插件叫做

3501
01:52:27,000 --> 01:52:28,000
Vampirator 应该是

3502
01:52:30,000 --> 01:52:30,000
可以

3503
01:52:30,000 --> 01:52:33,000
让你的 Firefox

3504
01:52:33,000 --> 01:52:35,000
你不用鼠标操作这个浏览器了

3505
01:52:35,000 --> 01:52:41,000
你可以用 WIM 快捷键的方式去操作它来翻译

3506
01:52:41,000 --> 01:52:43,000
你居然没有再用这种东西吗

3507
01:52:43,000 --> 01:52:44,000
我有

3508
01:52:44,000 --> 01:52:46,000
Firefox 很早之前就在用这个

3509
01:52:46,000 --> 01:52:47,000
后来也有一个

3510
01:52:47,000 --> 01:52:49,000
在 Chrome 下面也有

3511
01:52:49,000 --> 01:52:49,000
对

3512
01:52:49,000 --> 01:52:51,000
就是我一直都在用它

3513
01:52:51,000 --> 01:52:53,000
最开始是在用一个叫做

3514
01:52:53,000 --> 01:52:55,000
最开始是用一个叫做 Wimnum

3515
01:52:57,000 --> 01:52:59,000
后来现在用的东西叫做 CWim

3516
01:52:59,000 --> 01:53:00,000
就是小写的 C

3517
01:53:00,000 --> 01:53:01,000
然后好像 Wim

3518
01:53:01,000 --> 01:53:02,000
OK

3519
01:53:02,000 --> 01:53:03,000
就是 ChromeWim

3520
01:53:03,000 --> 01:53:04,000
可以理解了

3521
01:53:04,000 --> 01:53:07,000
而且这个插件已经逆天到什么地步

3522
01:53:07,000 --> 01:53:09,000
就是它可以在里面

3523
01:53:09,000 --> 01:53:12,000
进入 Visual Mode

3524
01:53:13,000 --> 01:53:16,000
你用 J 向下移动网页

3525
01:53:16,000 --> 01:53:17,000
然后用 F

3526
01:53:17,000 --> 01:53:19,000
然后你按下 F 之后

3527
01:53:19,000 --> 01:53:22,000
屏幕上所有的链接都会被高亮

3528
01:53:22,000 --> 01:53:23,000
然后每一个链接

3529
01:53:23,000 --> 01:53:26,000
会有两个字母到三个字母的组合

3530
01:53:26,000 --> 01:53:27,000
你接下来按那两个字母

3531
01:53:27,000 --> 01:53:29,000
那个链接就会被打开

3532
01:53:29,000 --> 01:53:29,000
这个我知道

3533
01:53:29,000 --> 01:53:31,000
这个 Vampirator 也有这个功能吗

3534
01:53:31,000 --> 01:53:32,000
对

3535
01:53:32,000 --> 01:53:34,000
然后最逆天的是你按下 V

3536
01:53:34,000 --> 01:53:36,000
就进入 Visual Mode

3537
01:53:36,000 --> 01:53:37,000
在 Visual Mode 之下

3538
01:53:37,000 --> 01:53:40,000
你按 J 和 K 可以移动光标

3539
01:53:41,000 --> 01:53:41,000
对

3540
01:53:41,000 --> 01:53:43,000
然后在你移动光标同时

3541
01:53:43,000 --> 01:53:44,000
可以选中文字

3542
01:53:44,000 --> 01:53:49,000
然后这个时候再回到 Normal Mode

3543
01:53:49,000 --> 01:53:49,000
按一下 Y

3544
01:53:49,000 --> 01:53:52,000
你就可以把刚才选中的文字

3545
01:53:52,000 --> 01:53:54,000
复制到剪贴版里面

3546
01:53:54,000 --> 01:53:54,000
天哪

3547
01:53:54,000 --> 01:53:55,000
完全不需要用鼠标

3548
01:53:55,000 --> 01:53:56,000
对

3549
01:53:56,000 --> 01:53:58,000
我之前用过非常长一段时间

3550
01:53:58,000 --> 01:53:59,000
那个 Vampirator

3551
01:53:59,000 --> 01:54:02,000
后来切到 Chrome

3552
01:54:02,000 --> 01:54:03,000
当时最早的时候

3553
01:54:03,000 --> 01:54:04,000
Chrome 是没有这种插件的

3554
01:54:04,000 --> 01:54:05,000
也就没有用了

3555
01:54:05,000 --> 01:54:07,000
后来好像也就把这些事情不了了

3556
01:54:07,000 --> 01:54:09,000
对我是第一时间出现这样的插件的时候

3557
01:54:09,000 --> 01:54:10,000
就开始用了

3558
01:54:10,000 --> 01:54:12,000
所以我一直非常关注

3559
01:54:12,000 --> 01:54:17,000
我可以凭着自己小白鼠的经验来

3560
01:54:17,000 --> 01:54:19,000
向大家拍着胸部推广

3561
01:54:19,000 --> 01:54:20,000
C-Wim 这个插件

3562
01:54:20,000 --> 01:54:22,000
一定绝对是所有的

3563
01:54:22,000 --> 01:54:23,000
C-Wim 对吧

3564
01:54:23,000 --> 01:54:23,000
对

3565
01:54:23,000 --> 01:54:24,000
C-Wim 对

3566
01:54:24,000 --> 01:54:28,000
所有的 Vampirator 的插件里面

3567
01:54:28,000 --> 01:54:29,000
最好用的一个

3568
01:54:29,000 --> 01:54:32,000
那个什么 Safari 有类似这种东西吗

3569
01:54:34,000 --> 01:54:35,000
Safari 有一个

3570
01:54:35,000 --> 01:54:37,000
但是觉得要死

3571
01:54:37,000 --> 01:54:38,000
对这就是为什么

3572
01:54:38,000 --> 01:54:43,000
有一天刚生有 Semite 之后

3573
01:54:43,000 --> 01:54:47,000
用了大概四个小时的 Safari

3574
01:54:47,000 --> 01:54:49,000
然后屁股尿流淘回来 Chrome

3575
01:54:49,000 --> 01:54:51,000
就是因为完全不能用

3576
01:54:52,000 --> 01:54:53,000
我明白你的苦衷

3577
01:54:53,000 --> 01:54:56,000
因为现在我现在我相当长一段 Safari

3578
01:54:56,000 --> 01:54:57,000
作为的主力浏览器了

3579
01:54:57,000 --> 01:55:00,000
但所谓主力就 60%左右的时间

3580
01:55:00,000 --> 01:55:02,000
因为很多时候要切到 Chrome 里面

3581
01:55:02,000 --> 01:55:05,000
用 Flash 插件非常不幸

3582
01:55:05,000 --> 01:55:10,000
但是我发现自从有多点触控的触控板之后

3583
01:55:10,000 --> 01:55:11,000
我就很少用那种方式

3584
01:55:11,000 --> 01:55:13,000
就是浏览网页的时候

3585
01:55:13,000 --> 01:55:16,000
上使用键盘操作

3586
01:55:16,000 --> 01:55:19,000
不 可是你真的觉得多点触控

3587
01:55:19,000 --> 01:55:21,000
要比用键盘方便吗

3588
01:55:22,000 --> 01:55:22,000
不会

3589
01:55:22,000 --> 01:55:25,000
就从效率上讲肯定是不好的

3590
01:55:25,000 --> 01:55:26,000
但是我懒

3591
01:55:26,000 --> 01:55:28,000
我发现我现在越来越懒了

3592
01:55:28,000 --> 01:55:30,000
就是懒得去碰它

3593
01:55:30,000 --> 01:55:32,000
难道去配置那么多东西

3594
01:55:32,000 --> 01:55:36,000
然后你可能是受了什么

3595
01:55:36,000 --> 01:55:36,000
重了

3596
01:55:36,000 --> 01:55:39,000
即便不用配置的话

3597
01:55:39,000 --> 01:55:42,000
多点触控

3598
01:55:42,000 --> 01:55:45,000
我就是我现在仍旧是

3599
01:55:45,000 --> 01:55:47,000
下意识的会去按空格键向下翻页

3600
01:55:47,000 --> 01:55:49,000
在浏览器里面

3601
01:55:49,000 --> 01:55:50,000
而不是用两指向下卷动

3602
01:55:50,000 --> 01:55:53,000
但是你要向上翻怎么办

3603
01:55:53,000 --> 01:55:54,000
你没办法向上翻

3604
01:55:55,000 --> 01:55:56,000
但是 99%的时间

3605
01:55:56,000 --> 01:55:58,000
你难道不都是在向下翻吗

3606
01:55:59,000 --> 01:56:00,000
有这么一个问题

3607
01:56:00,000 --> 01:56:01,000
就空格键它翻页

3608
01:56:01,000 --> 01:56:03,000
它那个高度是固定的

3609
01:56:03,000 --> 01:56:05,000
就是一次都是翻译屏

3610
01:56:05,000 --> 01:56:07,000
可是这难道不是一件好事吗

3611
01:56:07,000 --> 01:56:09,000
因为有时候我想把

3612
01:56:09,000 --> 01:56:11,000
比如说你这一个网页

3613
01:56:11,000 --> 01:56:13,000
从上到下一个网页

3614
01:56:13,000 --> 01:56:14,000
我想把我

3615
01:56:14,000 --> 01:56:16,000
我现在读到可能这个网页的下半部分

3616
01:56:16,000 --> 01:56:17,000
我有一种不好的习惯

3617
01:56:17,000 --> 01:56:19,000
我会想把我正在读的那一部分

3618
01:56:19,000 --> 01:56:22,000
字挪到屏幕的中间

3619
01:56:22,000 --> 01:56:23,000
就高度的中间来读

3620
01:56:23,000 --> 01:56:27,000
所以你是那个 Ctrl 加 L 的

3621
01:56:27,000 --> 01:56:29,000
就是 emacs 里面的 Ctrl 加 L

3622
01:56:29,000 --> 01:56:30,000
我怎么会知道

3623
01:56:31,000 --> 01:56:33,000
emacs 的快递键

3624
01:56:33,000 --> 01:56:34,000
而不知道 vim 里面

3625
01:56:34,000 --> 01:56:35,000
vim 也有这个功能

3626
01:56:35,000 --> 01:56:35,000
也可以

3627
01:56:35,000 --> 01:56:36,000
vim 的快递键是什么

3628
01:56:38,000 --> 01:56:40,000
vim 我还这个用的蛮少的

3629
01:56:40,000 --> 01:56:40,000
你也不记得

3630
01:56:40,000 --> 01:56:42,000
你也不记得

3631
01:56:42,000 --> 01:56:44,000
但是在 vim 在 emacs 里面

3632
01:56:44,000 --> 01:56:46,000
这个罗轮是 Ctrl 加 L

3633
01:56:46,000 --> 01:56:47,000
我记得你可以试一下

3634
01:56:48,000 --> 01:56:50,000
我试一下

3635
01:56:50,000 --> 01:56:52,000
就是把当前好像移动到屏幕的中间

3636
01:56:52,000 --> 01:56:52,000
对对对

3637
01:56:52,000 --> 01:56:54,000
我知道你说的那个东西

3638
01:56:54,000 --> 01:56:55,000
如果我没记错的话

3639
01:56:55,000 --> 01:56:56,000
应该是这个

3640
01:56:57,000 --> 01:56:59,000
不是一直下一行

3641
01:56:59,000 --> 01:56:59,000
还是 j

3642
01:56:59,000 --> 01:57:00,000
什么

3643
01:57:00,000 --> 01:57:01,000
我也想记不清楚

3644
01:57:01,000 --> 01:57:02,000
middle 吧

3645
01:57:02,000 --> 01:57:03,000
对

3646
01:57:03,000 --> 01:57:04,000
看想不想

3647
01:57:04,000 --> 01:57:04,000
anyway

3648
01:57:06,000 --> 01:57:08,000
我知道这个习惯其实效率挺低

3649
01:57:08,000 --> 01:57:09,000
但是就是

3650
01:57:09,000 --> 01:57:12,000
手键忍不住要去拨弄一下这个触控板

3651
01:57:12,000 --> 01:57:13,000
而且

3652
01:57:13,000 --> 01:57:14,000
如果你用触控板的话

3653
01:57:14,000 --> 01:57:16,000
你可以很方便的

3654
01:57:16,000 --> 01:57:17,000
因为这个时候这张网

3655
01:57:17,000 --> 01:57:19,000
就特别是在 Mac 上面下

3656
01:57:19,000 --> 01:57:21,000
这个网页的流畅程度

3657
01:57:21,000 --> 01:57:22,000
就像一张纸一样

3658
01:57:22,000 --> 01:57:23,000
你可以摆到

3659
01:57:23,000 --> 01:57:26,000
你想要的任何一个像素的位置和精度

3660
01:57:27,000 --> 01:57:29,000
所以我觉得这个时候还蛮好的

3661
01:57:29,000 --> 01:57:31,000
所以现在我就一直在用触摸板

3662
01:57:32,000 --> 01:57:34,000
在去浏览网页去滑来滑去

3663
01:57:34,000 --> 01:57:35,000
而且就是 Safari 里面可以用

3664
01:57:37,000 --> 01:57:38,000
左滑右滑去回退那些

3665
01:57:40,000 --> 01:57:41,000
Chrome 里面也可以

3666
01:57:41,000 --> 01:57:42,000
Chrome 里面没有 Safari

3667
01:57:42,000 --> 01:57:44,000
只不过视觉效果不是很好

3668
01:57:44,000 --> 01:57:45,000
不是

3669
01:57:45,000 --> 01:57:48,000
我觉得它的触摸板的反馈

3670
01:57:48,000 --> 01:57:49,000
跟 Safari 是不一样的

3671
01:57:49,000 --> 01:57:49,000
对

3672
01:57:49,000 --> 01:57:50,000
有点 buggy

3673
01:57:50,000 --> 01:57:51,000
对

3674
01:57:51,000 --> 01:57:51,000
很奇怪

3675
01:57:51,000 --> 01:57:52,000
我不知道为什么

3676
01:57:52,000 --> 01:57:54,000
但是 Safari 的感觉要流畅得多

3677
01:57:54,000 --> 01:57:55,000
然后我很喜欢

3678
01:57:55,000 --> 01:57:56,000
我想起来了

3679
01:57:56,000 --> 01:57:56,000
对

3680
01:57:56,000 --> 01:57:58,000
在 Vim 里面这个功能是 ZDOT

3681
01:57:59,000 --> 01:58:00,000
ZDOT

3682
01:58:01,000 --> 01:58:01,000
对

3683
01:58:01,000 --> 01:58:04,000
ZDOT 是把当前行

3684
01:58:05,000 --> 01:58:07,000
Cursor 所在当前行挪到屏幕的中间

3685
01:58:08,000 --> 01:58:09,000
是这样吗

3686
01:58:09,000 --> 01:58:10,000
对

3687
01:58:10,000 --> 01:58:11,000
真的吗

3688
01:58:11,000 --> 01:58:11,000
OK

3689
01:58:14,000 --> 01:58:16,000
可见我这个功能也是不常用的

3690
01:58:16,000 --> 01:58:16,000
OK

3691
01:58:18,000 --> 01:58:18,000
对

3692
01:58:18,000 --> 01:58:20,000
就刚才解释那个问题

3693
01:58:20,000 --> 01:58:21,000
其实我现在越来越懒

3694
01:58:21,000 --> 01:58:23,000
就是能系统原生的

3695
01:58:23,000 --> 01:58:24,000
就用系统原生的吧

3696
01:58:24,000 --> 01:58:25,000
懒得去配置了

3697
01:58:26,000 --> 01:58:26,000
对

3698
01:58:29,000 --> 01:58:29,000
对

3699
01:58:29,000 --> 01:58:31,000
其实我们说了

3700
01:58:32,000 --> 01:58:32,000
Windows

3701
01:58:32,000 --> 01:58:34,000
我们说了 Mac

3702
01:58:34,000 --> 01:58:36,000
Windows 下面的文本编辑

3703
01:58:36,000 --> 01:58:37,000
那 Linux 下面

3704
01:58:37,000 --> 01:58:39,000
你会用什么来编辑文件的

3705
01:58:39,000 --> 01:58:42,000
就是假如你用 Linux 图形版的话

3706
01:58:42,000 --> 01:58:43,000
还是 Vim

3707
01:58:45,000 --> 01:58:47,000
那有没有什么出学者有好的编辑器

3708
01:58:48,000 --> 01:58:48,000
哼

3709
01:58:49,000 --> 01:58:51,000
它有一个 Gedit 吧

3710
01:58:51,000 --> 01:58:52,000
我记得

3711
01:58:52,000 --> 01:58:52,000
Ubuntu

3712
01:58:52,000 --> 01:58:52,000
对

3713
01:58:52,000 --> 01:58:55,000
可是 Gedit 是一个非常废的编辑器

3714
01:58:55,000 --> 01:58:56,000
要我说的

3715
01:58:56,000 --> 01:58:58,000
你要出学者那么高级强大的编辑器

3716
01:58:58,000 --> 01:59:01,000
它也可以找不着方向了

3717
01:59:03,000 --> 01:59:03,000
好吧

3718
01:59:03,000 --> 01:59:03,000
对吧

3719
01:59:03,000 --> 01:59:06,000
可是我觉得 Gedit 就有点像 NotePad

3720
01:59:06,000 --> 01:59:06,000
我能

3721
01:59:06,000 --> 01:59:07,000
就

3722
01:59:07,000 --> 01:59:08,000
一开始就不应该

3723
01:59:08,000 --> 01:59:09,000
我觉得它比 NotePad 好多了好吧

3724
01:59:09,000 --> 01:59:10,000
你这样

3725
01:59:10,000 --> 01:59:12,000
你这样踩它真的好吗

3726
01:59:13,000 --> 01:59:14,000
好吧

3727
01:59:15,000 --> 01:59:15,000
还有一个

3728
01:59:16,000 --> 01:59:17,000
叫什么 Nano

3729
01:59:18,000 --> 01:59:19,000
Nano

3730
01:59:20,000 --> 01:59:21,000
Nano 可以它什么

3731
01:59:22,000 --> 01:59:23,000
乞丐版 Emax

3732
01:59:24,000 --> 01:59:25,000
Nano Pico

3733
01:59:25,000 --> 01:59:26,000
这些

3734
01:59:26,000 --> 01:59:29,000
就像 Microsoft Nullsoft

3735
01:59:29,000 --> 01:59:31,000
Nano 下面还有个 Pico

3736
01:59:31,000 --> 01:59:32,000
这些

3737
01:59:32,000 --> 01:59:33,000
一个一个比小

3738
01:59:34,000 --> 01:59:35,000
那个就纯粹是给

3739
01:59:37,000 --> 01:59:40,000
千年等一回配置一个配置文件的时候用的

3740
01:59:42,000 --> 01:59:43,000
而且真的很小

3741
01:59:44,000 --> 01:59:44,000
对

3742
01:59:44,000 --> 01:59:45,000
Nano 是非常非常小

3743
01:59:45,000 --> 01:59:46,000
但我

3744
01:59:46,000 --> 01:59:48,000
我每次用 Nano 都有一种

3745
01:59:48,000 --> 01:59:50,000
我到底在用什么在错觉

3746
01:59:50,000 --> 01:59:51,000
我到底是在干嘛

3747
01:59:51,000 --> 01:59:53,000
乞丐版 Emax 什么都说了

3748
01:59:54,000 --> 01:59:54,000
对

3749
01:59:54,000 --> 01:59:55,000
可是

3750
01:59:56,000 --> 01:59:58,000
它只有最基本的 Emax 的键榜地

3751
01:59:58,000 --> 02:00:01,000
没有任何可以刻铲的梗的

3752
02:00:01,000 --> 02:00:02,000
对

3753
02:00:02,000 --> 02:00:03,000
我何必如此呢

3754
02:00:03,000 --> 02:00:04,000
我只需要

3755
02:00:05,000 --> 02:00:06,000
立刻退出这个 Gedit 编辑器

3756
02:00:06,000 --> 02:00:09,000
然后设定一下 Edit 编辑量就可以

3757
02:00:09,000 --> 02:00:10,000
因为它小

3758
02:00:10,000 --> 02:00:16,000
它可以在很多这种发行板里面作为一个最最基础的编辑器在用

3759
02:00:17,000 --> 02:00:18,000
可是 V 也不大

3760
02:00:18,000 --> 02:00:18,000
就像

3761
02:00:20,000 --> 02:00:23,000
Mac 上面的默认 VM 我刚才查了一下是 1.5 兆

3762
02:00:23,000 --> 02:00:25,000
然后 Emax 24 兆

3763
02:00:25,000 --> 02:00:27,000
你这就已经用兆来衡量了

3764
02:00:27,000 --> 02:00:29,000
人家的 Pico 是 K 是吧

3765
02:00:29,000 --> 02:00:30,000
要用 KB 来衡量

3766
02:00:31,000 --> 02:00:31,000
OK

3767
02:00:31,000 --> 02:00:33,000
还是有很大的数量级的差异的

3768
02:00:33,000 --> 02:00:34,000
所以

3769
02:00:34,000 --> 02:00:35,000
所以我还是能理解

3770
02:00:35,000 --> 02:00:36,000
就是有时候比如说

3771
02:00:36,000 --> 02:00:38,000
它根本就不需要编辑什么

3772
02:00:38,000 --> 02:00:40,000
就是临时可能改

3773
02:00:40,000 --> 02:00:41,000
配置文件某一个字符

3774
02:00:41,000 --> 02:00:43,000
或者某一个改一行

3775
02:00:43,000 --> 02:00:43,000
对

3776
02:00:43,000 --> 02:00:47,000
所以它根本也就不需要那么多麻烦的功能

3777
02:00:47,000 --> 02:00:48,000
其实也还可以理解

3778
02:00:49,000 --> 02:00:50,000
OK

3779
02:00:50,000 --> 02:00:52,000
可是不需要麻烦的功能

3780
02:00:52,000 --> 02:00:54,000
你干嘛要上 Linux

3781
02:00:54,000 --> 02:00:57,000
有什么办法

3782
02:00:58,000 --> 02:00:59,000
对

3783
02:00:59,000 --> 02:01:02,000
我们基本上聊完了编辑器

3784
02:01:02,000 --> 02:01:02,000
对

3785
02:01:02,000 --> 02:01:05,000
可以终于进入

3786
02:01:05,000 --> 02:01:07,000
这节目已经过去了四分之三的时候

3787
02:01:07,000 --> 02:01:11,000
终于可以进入我们的下一个环节

3788
02:01:11,000 --> 02:01:13,000
就是 IDE 了

3789
02:01:14,000 --> 02:01:17,000
我都不知道这个怎么从何讲起

3790
02:01:17,000 --> 02:01:19,000
其实首先我自己用的 IDE

3791
02:01:19,000 --> 02:01:21,000
用的非常少

3792
02:01:22,000 --> 02:01:22,000
OK

3793
02:01:22,000 --> 02:01:23,000
我是因为工作原因

3794
02:01:23,000 --> 02:01:24,000
不得不用 IDE

3795
02:01:24,000 --> 02:01:27,000
所以你在工作中哪个 Eclipse

3796
02:01:27,000 --> 02:01:30,000
我用 Eclipse 和 Xcode

3797
02:01:31,000 --> 02:01:33,000
因为我讲一下感受

3798
02:01:35,000 --> 02:01:38,000
用 Eclipse 的时候感觉在地狱

3799
02:01:39,000 --> 02:01:42,000
用 Xcode 的时候好像回到了天

3800
02:01:44,000 --> 02:01:45,000
天哪还是太夸张了

3801
02:01:45,000 --> 02:01:46,000
就我没有这样说

3802
02:01:46,000 --> 02:01:47,000
Xcode 只有两

3803
02:01:47,000 --> 02:01:49,000
Xcode 就

3804
02:01:50,000 --> 02:01:52,000
先说 Visual Studio 好了

3805
02:01:52,000 --> 02:01:52,000
OK

3806
02:01:52,000 --> 02:01:57,000
Visual Studio 作为 Windows 上的老牌

3807
02:01:57,000 --> 02:02:00,000
或者说甚至说是龙头老大的 IDE

3808
02:02:00,000 --> 02:02:02,000
它有很多版本对吧

3809
02:02:02,000 --> 02:02:02,000
对

3810
02:02:02,000 --> 02:02:04,000
有 Ultimate 版本

3811
02:02:04,000 --> 02:02:05,000
有 Prenum 版本

3812
02:02:05,000 --> 02:02:06,000
有 Test Pro 版本

3813
02:02:06,000 --> 02:02:07,000
有 Pro 版本

3814
02:02:07,000 --> 02:02:08,000
还有什么 Express Edition

3815
02:02:08,000 --> 02:02:09,000
Whatever

3816
02:02:09,000 --> 02:02:11,000
所以它们可以说没有什么区别吗

3817
02:02:12,000 --> 02:02:12,000
对

3818
02:02:12,000 --> 02:02:13,000
其实是有区别的

3819
02:02:13,000 --> 02:02:15,000
它专门有一页

3820
02:02:15,000 --> 02:02:16,000
一个 Metrics

3821
02:02:16,000 --> 02:02:18,000
来告诉你每一个版本之间

3822
02:02:18,000 --> 02:02:20,000
有什么样具体的差别

3823
02:02:20,000 --> 02:02:23,000
比如说 Ultimate 有所谓的

3824
02:02:23,000 --> 02:02:25,000
Record Tracing 功能

3825
02:02:25,000 --> 02:02:28,000
就是你可以把用户的交互录下来

3826
02:02:29,000 --> 02:02:32,000
然后重新播放用户的交互

3827
02:02:32,000 --> 02:02:36,000
然后在播放的过程中去 Debug 之类

3828
02:02:36,000 --> 02:02:37,000
匪夷所思

3829
02:02:37,000 --> 02:02:38,000
放往领角用的

3830
02:02:38,000 --> 02:02:40,000
都在 Ultimate 里面有所体现

3831
02:02:40,000 --> 02:02:40,000
OK

3832
02:02:40,000 --> 02:02:43,000
然后 Pro 版本基本上是最亲密的一个版本

3833
02:02:43,000 --> 02:02:45,000
但仍旧是要钱的

3834
02:02:45,000 --> 02:02:47,000
我记得还有一个免费的

3835
02:02:47,000 --> 02:02:49,000
针对学生的版本吧

3836
02:02:49,000 --> 02:02:49,000
对

3837
02:02:50,000 --> 02:02:50,000
What

3838
02:02:50,000 --> 02:02:51,000
针对学生

3839
02:02:51,000 --> 02:02:53,000
你是说 Express Edition 吗

3840
02:02:53,000 --> 02:02:53,000
还是

3841
02:02:53,000 --> 02:02:54,000
就叫 Express

3842
02:02:54,000 --> 02:02:55,000
Express 是免费的吗

3843
02:02:56,000 --> 02:02:57,000
Express Edition

3844
02:02:57,000 --> 02:02:58,000
可是并不是针对学生

3845
02:02:58,000 --> 02:03:00,000
它只是针对那些

3846
02:03:01,000 --> 02:03:02,000
我不知道怎么形容

3847
02:03:02,000 --> 02:03:04,000
因为其实微软给

3848
02:03:05,000 --> 02:03:07,000
对微软给编辑器

3849
02:03:07,000 --> 02:03:08,000
微软给 IDE

3850
02:03:09,000 --> 02:03:10,000
定一个价格

3851
02:03:10,000 --> 02:03:11,000
或者说微软 ID 是要钱的

3852
02:03:11,000 --> 02:03:13,000
在我们小时候

3853
02:03:13,000 --> 02:03:14,000
在我小时候

3854
02:03:14,000 --> 02:03:15,000
看起来好像天津第一的事情

3855
02:03:15,000 --> 02:03:15,000
因为

3856
02:03:16,000 --> 02:03:17,000
Microsoft 不就是这样吗

3857
02:03:17,000 --> 02:03:18,000
什么东西都要钱

3858
02:03:20,000 --> 02:03:21,000
可是不就是因为这个

3859
02:03:21,000 --> 02:03:22,000
大家才去选择 Linux 吗

3860
02:03:22,000 --> 02:03:23,000
可是

3861
02:03:23,000 --> 02:03:25,000
现在已经 2014 年了

3862
02:03:25,000 --> 02:03:28,000
Microsoft 仍旧靠卖 IDE 来赚钱

3863
02:03:28,000 --> 02:03:29,000
我觉得这个是比较

3864
02:03:29,000 --> 02:03:30,000
要让人费解这件事情

3865
02:03:30,000 --> 02:03:33,000
它这些的购买者

3866
02:03:33,000 --> 02:03:34,000
大部分是企业

3867
02:03:34,000 --> 02:03:36,000
所以反正企业有钱

3868
02:03:36,000 --> 02:03:37,000
该宰就宰呗

3869
02:03:38,000 --> 02:03:42,000
可是早期好吧

3870
02:03:42,000 --> 02:03:42,000
对吧

3871
02:03:42,000 --> 02:03:43,000
我也不知道该怎么

3872
02:03:44,000 --> 02:03:45,000
问题在于

3873
02:03:47,000 --> 02:03:49,000
你觉得它应该免费吗

3874
02:03:49,000 --> 02:03:49,000
还是怎么样

3875
02:03:49,000 --> 02:03:50,000
我是觉得

3876
02:03:51,000 --> 02:03:53,000
作为一个开发工具来说

3877
02:03:53,000 --> 02:03:55,000
难道更多的开发者

3878
02:03:55,000 --> 02:03:57,000
为你开发出更多的 App 来说

3879
02:03:57,000 --> 02:04:00,000
难道不应该是对你这个平台的那种注意吗

3880
02:04:00,000 --> 02:04:02,000
为什么要为开发工具收费呢

3881
02:04:03,000 --> 02:04:04,000
这是一个好问题

3882
02:04:04,000 --> 02:04:05,000
这个什么你还记得

3883
02:04:06,000 --> 02:04:07,000
Steve Barmore

3884
02:04:07,000 --> 02:04:08,000
那个 Developer

3885
02:04:08,000 --> 02:04:09,000
Developer

3886
02:04:09,000 --> 02:04:10,000
Developer

3887
02:04:10,000 --> 02:04:13,000
然后一窝下面还有汗

3888
02:04:13,000 --> 02:04:14,000
但是我们要

3889
02:04:14,000 --> 02:04:16,000
但是你买个编辑手门

3890
02:04:16,000 --> 02:04:16,000
收你 300 刀

3891
02:04:17,000 --> 02:04:18,000
对没错

3892
02:04:18,000 --> 02:04:18,000
What the fuck

3893
02:04:19,000 --> 02:04:21,000
应该 Express 版本应该是免费的

3894
02:04:21,000 --> 02:04:22,000
就是可以

3895
02:04:22,000 --> 02:04:23,000
对 Express 版本是免费的

3896
02:04:23,000 --> 02:04:25,000
但是 Express 不能装插件

3897
02:04:25,000 --> 02:04:26,000
就是这个意思吗

3898
02:04:26,000 --> 02:04:27,000
就是

3899
02:04:28,000 --> 02:04:30,000
我的毕业设计是用

3900
02:04:31,000 --> 02:04:32,000
C-Sharp 写的

3901
02:04:32,000 --> 02:04:33,000
然后我当时用的

3902
02:04:33,000 --> 02:04:35,000
应该就是 C-Sharp 的 Express Edition

3903
02:04:36,000 --> 02:04:37,000
因为我也不知道

3904
02:04:37,000 --> 02:04:39,000
我们学校可能是有 Visual Studio

3905
02:04:39,000 --> 02:04:41,000
但只不过可能晚了 10 年

3906
02:04:42,000 --> 02:04:43,000
是 10 年前的版本之类的

3907
02:04:43,000 --> 02:04:45,000
然后 Dotnet 那套东西

3908
02:04:45,000 --> 02:04:47,000
当时刚刚流行起来

3909
02:04:47,000 --> 02:04:48,000
根本还没有

3910
02:04:48,000 --> 02:04:52,000
因为我是从 Visual Basic

3911
02:04:52,000 --> 02:04:53,000
Visual Basic

3912
02:04:53,000 --> 02:04:55,000
每次都要说 Visual Basic 这是什么

3913
02:04:55,000 --> 02:04:57,000
每次都是

3914
02:04:58,000 --> 02:04:59,000
暴露了

3915
02:05:00,000 --> 02:05:01,000
被压抑的这个

3916
02:05:01,000 --> 02:05:03,000
这个欲望就是 Visual Basic

3917
02:05:03,000 --> 02:05:04,000
对

3918
02:05:04,000 --> 02:05:06,000
我最开始是用 Visual C++

3919
02:05:06,000 --> 02:05:08,000
6.0 应该是

3920
02:05:08,000 --> 02:05:10,000
后来用 7.0

3921
02:05:10,000 --> 02:05:11,000
然后当 Dotnet 出来之后

3922
02:05:11,000 --> 02:05:13,000
立刻抛弃了 C++去用 Dotnet

3923
02:05:13,000 --> 02:05:15,000
因为觉得 C-Sharp

3924
02:05:15,000 --> 02:05:17,000
当时真觉得 C-Sharp 是逆天级别的

3925
02:05:18,000 --> 02:05:19,000
好用的一个

3926
02:05:20,000 --> 02:05:20,000
对

3927
02:05:20,000 --> 02:05:21,000
因为那时候

3928
02:05:21,000 --> 02:05:22,000
其实现在也是

3929
02:05:22,000 --> 02:05:25,000
现在它还是一个设计的非常好

3930
02:05:26,000 --> 02:05:28,000
起码有 85 分得益

3931
02:05:28,000 --> 02:05:29,000
对

3932
02:05:29,000 --> 02:05:31,000
是一个非常仅次于

3933
02:05:34,000 --> 02:05:36,000
此处填入你最喜欢的语

3934
02:05:36,000 --> 02:05:36,000
对

3935
02:05:36,000 --> 02:05:39,000
仅次于 Dollar Language

3936
02:05:42,000 --> 02:05:43,000
因为那个时候

3937
02:05:43,000 --> 02:05:44,000
我还挺喜欢 Pascal

3938
02:05:44,000 --> 02:05:45,000
就是 Delphi 的

3939
02:05:45,000 --> 02:05:48,000
然后 Delphi 的作者跑去

3940
02:05:48,000 --> 02:05:49,000
做了 C-Sharp

3941
02:05:49,000 --> 02:05:51,000
我也就觉得 C-Sharp 应该是

3942
02:05:51,000 --> 02:05:52,000
next generation

3943
02:05:54,000 --> 02:05:56,000
heyday language

3944
02:05:57,000 --> 02:05:57,000
但是对

3945
02:05:57,000 --> 02:05:58,000
还是那个时候谁能想到

3946
02:05:58,000 --> 02:06:00,000
自己有一天会

3947
02:06:00,000 --> 02:06:01,000
彻底转向

3948
02:06:01,000 --> 02:06:03,000
彻底转向 Mac

3949
02:06:04,000 --> 02:06:05,000
那这都是后话

3950
02:06:05,000 --> 02:06:07,000
就那个时候觉得

3951
02:06:08,000 --> 02:06:12,000
为什么我用微软的东西

3952
02:06:12,000 --> 02:06:14,000
为微软开发软件

3953
02:06:14,000 --> 02:06:15,000
微软还要向我收钱

3954
02:06:15,000 --> 02:06:17,000
其实现在我觉得它政策就这样子

3955
02:06:18,000 --> 02:06:18,000
比如说现在很多

3956
02:06:18,000 --> 02:06:21,000
它对这种大学有这种

3957
02:06:22,000 --> 02:06:23,000
它现在叫什么 DreamSpark 这个项目

3958
02:06:23,000 --> 02:06:24,000
以前叫什么

3959
02:06:24,000 --> 02:06:24,000
对 DreamSpark

3960
02:06:24,000 --> 02:06:27,000
以前叫做 Academy Alliance

3961
02:06:27,000 --> 02:06:29,000
就是你如果你是大学的学生

3962
02:06:29,000 --> 02:06:30,000
然后至少你是读软工

3963
02:06:30,000 --> 02:06:31,000
或者是 CS 的

3964
02:06:31,000 --> 02:06:34,000
它可以去系里面申请一个账号

3965
02:06:34,000 --> 02:06:35,000
然后可以免费下载

3966
02:06:35,000 --> 02:06:37,000
微软的大部分产品

3967
02:06:37,000 --> 02:06:38,000
比如像什么 Office

3968
02:06:38,000 --> 02:06:38,000
操作系统

3969
02:06:39,000 --> 02:06:40,000
还有这种开发工具

3970
02:06:40,000 --> 02:06:42,000
一套都是可以免费拿的

3971
02:06:42,000 --> 02:06:45,000
然后我记得 DreamSpark 曾几何时是

3972
02:06:45,000 --> 02:06:48,000
各个高校基本上是趋之若鶩的一个东西

3973
02:06:48,000 --> 02:06:51,000
但是现在据说是微软的销售代表

3974
02:06:51,000 --> 02:06:53,000
要去高校里面求说

3975
02:06:53,000 --> 02:06:53,000
哎呀

3976
02:06:53,000 --> 02:06:54,000
跟我们签一个吧

3977
02:06:54,000 --> 02:06:56,000
我们免费给你们

3978
02:06:56,000 --> 02:06:58,000
你们只需要搭设一下

3979
02:06:58,000 --> 02:06:59,000
就什么可以了

3980
02:06:59,000 --> 02:07:02,000
甚至是你们所有的那个 access

3981
02:07:02,000 --> 02:07:04,000
都可以在我们这边托管啊什么的

3982
02:07:05,000 --> 02:07:07,000
现在 DreamSpark 好像真的已经不那么

3983
02:07:07,000 --> 02:07:09,000
就微软现在就不那么必要

3984
02:07:09,000 --> 02:07:10,000
非常示威

3985
02:07:10,000 --> 02:07:13,000
仍然正在渐渐的淡出

3986
02:07:13,000 --> 02:07:15,000
因为现在的显学是学什么

3987
02:07:15,000 --> 02:07:17,000
Object-C 开发 App 嘛

3988
02:07:17,000 --> 02:07:17,000
所以

3989
02:07:17,000 --> 02:07:19,000
不我觉得这跟显学没有关系

3990
02:07:19,000 --> 02:07:21,000
就是比如说

3991
02:07:22,000 --> 02:07:25,000
我们平时谈论的什么 Line Note

3992
02:07:25,000 --> 02:07:29,000
或者是 Ligit Ocean 这些 VPS 提供商们

3993
02:07:29,000 --> 02:07:32,000
有哪一家是提供.net 环境的吗

3994
02:07:32,000 --> 02:07:33,000
没有啊

3995
02:07:35,000 --> 02:07:36,000
你说服务器吗

3996
02:07:36,000 --> 02:07:37,000
对啊

3997
02:07:37,000 --> 02:07:42,000
就 VPS 提供商有谁家是在提供服务端的微软环境

3998
02:07:42,000 --> 02:07:45,000
AWS 它是有 Windows Server 可以用的

3999
02:07:45,000 --> 02:07:47,000
不过要贵一些

4000
02:07:47,000 --> 02:07:47,000
有多少呢

4001
02:07:47,000 --> 02:07:48,000
百分之一嘛

4002
02:07:48,000 --> 02:07:51,000
对我们接触的应该不是很多

4003
02:07:51,000 --> 02:07:53,000
我觉得感觉这就是用

4004
02:07:53,000 --> 02:07:55,000
因为要跑那些大部分还是企业的场合

4005
02:07:55,000 --> 02:07:56,000
感觉比较多一点

4006
02:07:56,000 --> 02:07:59,000
但有一个例外就是那个 Stuck Overflow

4007
02:08:01,000 --> 02:08:02,000
对你讲确实这是一个问题

4008
02:08:02,000 --> 02:08:06,000
就在我们所谓的 Web App 兴起的时间

4009
02:08:06,000 --> 02:08:08,000
微软是其实是

4010
02:08:09,000 --> 02:08:10,000
输掉了这个市场的嘛

4011
02:08:11,000 --> 02:08:12,000
对它已经

4012
02:08:12,000 --> 02:08:16,000
somehow 变得非常的无关紧要了

4013
02:08:16,000 --> 02:08:17,000
对

4014
02:08:17,000 --> 02:08:19,000
你要我现在去回忆自己

4015
02:08:21,000 --> 02:08:22,000
这几天我在反思

4016
02:08:22,000 --> 02:08:23,000
我在上次节目里面说到

4017
02:08:24,000 --> 02:08:28,000
自己花在微软上面的时间都蹉跎掉了

4018
02:08:28,000 --> 02:08:29,000
真的是这样吗

4019
02:08:31,000 --> 02:08:32,000
我真的

4020
02:08:33,000 --> 02:08:36,000
后悔自己曾经努力学过

4021
02:08:37,000 --> 02:08:39,000
Windows 的这一套相关技术吗

4022
02:08:41,000 --> 02:08:42,000
我也啃过厚厚的那一本

4023
02:08:42,000 --> 02:08:45,000
那个猴节翻的什么深入浅珠 MFC

4024
02:08:46,000 --> 02:08:48,000
这些经历真的都废掉了吗

4025
02:08:48,000 --> 02:08:49,000
可能也没有

4026
02:08:49,000 --> 02:08:50,000
可能有一部分是内化掉了

4027
02:08:50,000 --> 02:08:55,000
变成了可以处理旁通的内力的一部分

4028
02:08:55,000 --> 02:08:59,000
但是我觉得大部分时间可能的确是躲躲到的

4029
02:08:59,000 --> 02:08:59,000
因为

4030
02:09:01,000 --> 02:09:04,000
回想起来没有任何值得留恋的部分

4031
02:09:04,000 --> 02:09:05,000
对我觉得这个就是一个很重要的原因

4032
02:09:05,000 --> 02:09:08,000
就是刚才之前我们最开始的

4033
02:09:08,000 --> 02:09:10,000
Dylan 最开始讲了 Mindshare 的问题

4034
02:09:10,000 --> 02:09:12,000
我觉得其实你从现在的来看

4035
02:09:12,000 --> 02:09:14,000
微软它真的是已经输掉了

4036
02:09:14,000 --> 02:09:16,000
就起码如果你是一个开发者

4037
02:09:16,000 --> 02:09:18,000
你能够自由选择的情况下

4038
02:09:18,000 --> 02:09:21,000
它已经输掉了这一部分人的所谓的 Mindshare

4039
02:09:21,000 --> 02:09:22,000
这点你可以刚刚我们讲了

4040
02:09:23,000 --> 02:09:26,000
比如说他可能很多人会选择去做 Web App

4041
02:09:26,000 --> 02:09:28,000
去学什么动态语言去做

4042
02:09:28,000 --> 02:09:29,000
然后也不需要 Windows 的东西

4043
02:09:29,000 --> 02:09:31,000
那也不需要在 Windows 上面跑

4044
02:09:31,000 --> 02:09:34,000
然后有很多人学开发

4045
02:09:34,000 --> 02:09:35,000
就哪怕是企业应用

4046
02:09:35,000 --> 02:09:37,000
他就现在大部分应用还是 Java 程序比较多

4047
02:09:39,000 --> 02:09:41,000
这个我还真不敢说

4048
02:09:41,000 --> 02:09:42,000
就是我说起码服务端

4049
02:09:42,000 --> 02:09:44,000
我感觉是 Java 或者多点

4050
02:09:44,000 --> 02:09:44,000
但是如果你是

4051
02:09:44,000 --> 02:09:46,000
对前几天找工作的时候

4052
02:09:46,000 --> 02:09:48,000
我出于好奇也输入了什么 Dotnet

4053
02:09:48,000 --> 02:09:50,000
或者是 C-Shop 之类的

4054
02:09:50,000 --> 02:09:51,000
前几天是有的

4055
02:09:51,000 --> 02:09:52,000
搜一下

4056
02:09:52,000 --> 02:09:53,000
而且还不少

4057
02:09:53,000 --> 02:09:54,000
至少在

4058
02:09:54,000 --> 02:09:56,000
就他其实他就用分两部分

4059
02:09:56,000 --> 02:09:59,000
一个就是他跑在服务器端的一些东西

4060
02:09:59,000 --> 02:10:00,000
然后是跑在客户端的东西

4061
02:10:00,000 --> 02:10:02,000
客户端这边应该还是 Windows 的

4062
02:10:03,000 --> 02:10:05,000
VC 和 Visio Studio 这些的天下

4063
02:10:05,000 --> 02:10:06,000
这没有问题

4064
02:10:06,000 --> 02:10:07,000
然后但是在移动上面

4065
02:10:07,000 --> 02:10:09,000
现在大部分人要么就是开发安卓

4066
02:10:09,000 --> 02:10:11,000
要么可能是开发 IOS

4067
02:10:11,000 --> 02:10:12,000
肯定是没什么

4068
02:10:12,000 --> 02:10:15,000
Windows Phone 的用户是非常少的

4069
02:10:16,000 --> 02:10:17,000
而开发网页程序的话

4070
02:10:17,000 --> 02:10:18,000
Web Application 的话

4071
02:10:18,000 --> 02:10:19,000
根本用不着

4072
02:10:20,000 --> 02:10:22,000
用 C-Shop 也是凤毛麟角

4073
02:10:22,000 --> 02:10:23,000
非常非常少

4074
02:10:23,000 --> 02:10:24,000
至少在欧洲是这样

4075
02:10:24,000 --> 02:10:24,000
对

4076
02:10:24,000 --> 02:10:26,000
不管是全球范围都是这样

4077
02:10:26,000 --> 02:10:27,000
不

4078
02:10:27,000 --> 02:10:28,000
但我觉得中国这个市场

4079
02:10:28,000 --> 02:10:31,000
好像还是 C-Shop 份额还是挺高的

4080
02:10:31,000 --> 02:10:33,000
因为盗版嘛

4081
02:10:33,000 --> 02:10:34,000
给他助长了

4082
02:10:34,000 --> 02:10:34,000
对

4083
02:10:34,000 --> 02:10:36,000
因为在中国

4084
02:10:36,000 --> 02:10:36,000
是

4085
02:10:37,000 --> 02:10:38,000
中国在

4086
02:10:39,000 --> 02:10:39,000
对

4087
02:10:39,000 --> 02:10:40,000
Visio 的明天

4088
02:10:40,000 --> 02:10:42,000
Visio 的希望就在中国

4089
02:10:42,000 --> 02:10:43,000
但是在中国又被搞了

4090
02:10:43,000 --> 02:10:44,000
反垄

4091
02:10:44,000 --> 02:10:45,000
当然也是很惨的

4092
02:10:46,000 --> 02:10:46,000
真的吗

4093
02:10:46,000 --> 02:10:47,000
你们知道吗

4094
02:10:47,000 --> 02:10:47,000
什么时候

4095
02:10:47,000 --> 02:10:49,000
就是最近这一年

4096
02:10:49,000 --> 02:10:50,000
毕竟被搞得很惨

4097
02:10:52,000 --> 02:10:54,000
所以他的日子肯定是不好过的

4098
02:10:54,000 --> 02:10:56,000
所以他现在也是要急着求变

4099
02:10:57,000 --> 02:10:58,000
因为再过可能

4100
02:10:58,000 --> 02:11:00,000
这种趋势再十几年

4101
02:11:00,000 --> 02:11:01,000
微软就是一个不知名的小公司

4102
02:11:03,000 --> 02:11:05,000
刚才你说什么微软变得无关紧要了

4103
02:11:05,000 --> 02:11:06,000
这个还蛮巧的

4104
02:11:06,000 --> 02:11:09,000
我在支付上有一篇回答

4105
02:11:09,000 --> 02:11:11,000
当时问说 Windows 8 的一些事情

4106
02:11:11,000 --> 02:11:12,000
但是我讲了一个回答

4107
02:11:12,000 --> 02:11:15,000
也就提到了这么一个概念

4108
02:11:16,000 --> 02:11:19,000
晚点我把这个连接放到 Note

4109
02:11:19,000 --> 02:11:20,000
大家有兴趣可以去看一下

4110
02:11:21,000 --> 02:11:23,000
扯的又比较远了

4111
02:11:23,000 --> 02:11:24,000
然后说回来

4112
02:11:24,000 --> 02:11:25,000
然后 Eclipse

4113
02:11:25,000 --> 02:11:26,000
说回 Visio Studio

4114
02:11:26,000 --> 02:11:26,000
对

4115
02:11:26,000 --> 02:11:26,000
Visio Studio

4116
02:11:28,000 --> 02:11:30,000
刚才远启是说 Visio Studio

4117
02:11:30,000 --> 02:11:32,000
非常多的版本

4118
02:11:32,000 --> 02:11:34,000
而 Xcode

4119
02:11:35,000 --> 02:11:35,000
只有一个

4120
02:11:35,000 --> 02:11:36,000
或者说他有两个版本

4121
02:11:36,000 --> 02:11:38,000
一个不稳定的版本

4122
02:11:38,000 --> 02:11:39,000
和一个更不稳定的版本

4123
02:11:41,000 --> 02:11:42,000
这个黑得比较亮

4124
02:11:43,000 --> 02:11:45,000
而为了那个更不稳定的版本

4125
02:11:45,000 --> 02:11:48,000
你需要交一笔钱成为

4126
02:11:49,000 --> 02:11:51,000
IOS 开发商

4127
02:11:51,000 --> 02:11:53,000
IOS 开发者或者是 MAC 开发者

4128
02:11:53,000 --> 02:11:55,000
才可以下载到

4129
02:11:56,000 --> 02:11:57,000
这个更不稳定的版本

4130
02:11:58,000 --> 02:11:59,000
但默认的那个稳定版本

4131
02:11:59,000 --> 02:12:01,000
就是比较稳定的版本

4132
02:12:01,000 --> 02:12:02,000
是免费的

4133
02:12:02,000 --> 02:12:02,000
不要钱

4134
02:12:02,000 --> 02:12:04,000
他是从四把开始

4135
02:12:04,000 --> 02:12:06,000
在 App Store 里面可以免费下载了

4136
02:12:07,000 --> 02:12:09,000
然后我记得我还付钱买过他

4137
02:12:09,000 --> 02:12:10,000
免费之前的版本

4138
02:12:10,000 --> 02:12:10,000
五块钱

4139
02:12:11,000 --> 02:12:13,000
五美元

4140
02:12:13,000 --> 02:12:13,000
对

4141
02:12:13,000 --> 02:12:15,000
Xcode 层级合是也是要收费的

4142
02:12:15,000 --> 02:12:16,000
三对

4143
02:12:16,000 --> 02:12:18,000
三之前是要收费的

4144
02:12:18,000 --> 02:12:18,000
对

4145
02:12:18,000 --> 02:12:20,000
就是那个非模态窗口的版本

4146
02:12:21,000 --> 02:12:21,000
对

4147
02:12:22,000 --> 02:12:24,000
然后我当时是因为要写

4148
02:12:24,000 --> 02:12:26,000
一个 OpenGL 的程序

4149
02:12:26,000 --> 02:12:28,000
因为上一个图形的课

4150
02:12:28,000 --> 02:12:30,000
然后要写一些 OpenGL 的东西

4151
02:12:30,000 --> 02:12:31,000
然后当时觉得

4152
02:12:32,000 --> 02:12:33,000
有两个做法

4153
02:12:33,000 --> 02:12:34,000
我在 MAC 上面开发

4154
02:12:35,000 --> 02:12:35,000
不对

4155
02:12:35,000 --> 02:12:36,000
今天有三个

4156
02:12:36,000 --> 02:12:37,000
要不我用 Eclipse 写

4157
02:12:38,000 --> 02:12:39,000
就直接被我否定掉了

4158
02:12:40,000 --> 02:12:41,000
那待会儿我会解释为什么

4159
02:12:41,000 --> 02:12:42,000
然后另外一版本是

4160
02:12:42,000 --> 02:12:43,000
我用 Wim 写

4161
02:12:43,000 --> 02:12:44,000
然后命令行写

4162
02:12:44,000 --> 02:12:46,000
但是你知道用那种方式写

4163
02:12:46,000 --> 02:12:48,000
C 或者是一般要写

4164
02:12:48,000 --> 02:12:50,000
OpenGL 的代码其实非常痛苦的

4165
02:12:50,000 --> 02:12:51,000
因为没有做通补期

4166
02:12:54,000 --> 02:12:54,000
好了

4167
02:12:54,000 --> 02:12:56,000
另外一版本就发现就是用 Xcode

4168
02:12:56,000 --> 02:12:57,000
然后当时想一想

4169
02:12:57,000 --> 02:12:58,000
买吧

4170
02:12:58,000 --> 02:13:00,000
就为了写这个作业

4171
02:13:00,000 --> 02:13:01,000
就买了

4172
02:13:01,000 --> 02:13:03,000
然后后来我买了过了

4173
02:13:03,000 --> 02:13:05,000
差不多不到一个月吧

4174
02:13:05,000 --> 02:13:07,000
他就说他全部免费了

4175
02:13:08,000 --> 02:13:11,000
就很沮丧

4176
02:13:13,000 --> 02:13:13,000
好吧

4177
02:13:14,000 --> 02:13:14,000
OK

4178
02:13:14,000 --> 02:13:14,000
对

4179
02:13:14,000 --> 02:13:16,000
现在讲到那个

4180
02:13:16,000 --> 02:13:18,000
Visual Studio 你还要要么补充的吗

4181
02:13:20,000 --> 02:13:22,000
Visual Studio 有什么要补充的

4182
02:13:22,000 --> 02:13:22,000
我也不知道

4183
02:13:22,000 --> 02:13:25,000
我其实有很多年没有用 Visual Studio

4184
02:13:25,000 --> 02:13:27,000
但是我在前两天看到一句话说

4185
02:13:28,000 --> 02:13:30,000
Visual Studio 比 Xcode

4186
02:13:30,000 --> 02:13:32,000
好了一万个 Eclipse 之间

4187
02:13:32,000 --> 02:13:34,000
好了一万个 Eclipse

4188
02:13:34,000 --> 02:13:35,000
Eclipse 这么多

4189
02:13:36,000 --> 02:13:39,000
我怎么感觉有 50 步 100 步的感觉

4190
02:13:41,000 --> 02:13:43,000
也许 Visual Studio 是很屌

4191
02:13:44,000 --> 02:13:47,000
IntelliSense 可能是所有的

4192
02:13:47,000 --> 02:13:49,000
自动补全里面最聪明的一个

4193
02:13:50,000 --> 02:13:53,000
也是最看起来最舒服

4194
02:13:53,000 --> 02:13:55,000
或者说细节最多的一个

4195
02:13:55,000 --> 02:13:56,000
因为 Windows

4196
02:13:56,000 --> 02:13:58,000
我觉得微软东西就是有这样一种特征

4197
02:13:58,000 --> 02:14:00,000
就是事无巨细都要告诉你

4198
02:14:01,000 --> 02:14:03,000
都要来问你

4199
02:14:03,000 --> 02:14:06,000
或者说都要给提供你一个可能

4200
02:14:06,000 --> 02:14:07,000
就是我刚才

4201
02:14:07,000 --> 02:14:10,000
就我为了玩这个文明超越地球

4202
02:14:10,000 --> 02:14:12,000
装了一个 Windows 8

4203
02:14:12,000 --> 02:14:14,000
然后我发现 Windows 8 在考文件的时候

4204
02:14:14,000 --> 02:14:14,000
如果你愿意的话

4205
02:14:14,000 --> 02:14:16,000
你给点一个更多详情

4206
02:14:17,000 --> 02:14:20,000
然后这个更多详情里面会跳出来一个

4207
02:14:22,000 --> 02:14:26,000
实时拷贝速度的一个线图

4208
02:14:26,000 --> 02:14:27,000
对

4209
02:14:27,000 --> 02:14:28,000
那很帅

4210
02:14:28,000 --> 02:14:30,000
就是我觉得

4211
02:14:30,000 --> 02:14:31,000
卧槽

4212
02:14:31,000 --> 02:14:32,000
用这样无关的信息

4213
02:14:32,000 --> 02:14:33,000
你告诉我真的有意义吗

4214
02:14:33,000 --> 02:14:35,000
很多人会看这个的

4215
02:14:35,000 --> 02:14:36,000
我不知道为什么

4216
02:14:37,000 --> 02:14:37,000
好吧

4217
02:14:38,000 --> 02:14:40,000
时间太多了

4218
02:14:40,000 --> 02:14:41,000
Maybe

4219
02:14:43,000 --> 02:14:44,000
Eclipse

4220
02:14:45,000 --> 02:14:46,000
Visual Studio 就是这样的东西

4221
02:14:46,000 --> 02:14:48,000
就会告诉你非常多的

4222
02:14:48,000 --> 02:14:51,000
其实你也不知道是有用还是没用的知识

4223
02:14:51,000 --> 02:14:52,000
信息在那边

4224
02:14:52,000 --> 02:14:53,000
摆在那边

4225
02:14:55,000 --> 02:14:58,000
但我仍然要承认它是一个非常好的编辑器

4226
02:14:58,000 --> 02:14:59,000
就是一个非常好的耐力

4227
02:14:59,000 --> 02:15:00,000
就是

4228
02:15:00,000 --> 02:15:01,000
至少我的印象里面

4229
02:15:01,000 --> 02:15:03,000
在我还在用它的时候

4230
02:15:04,000 --> 02:15:05,000
它好用

4231
02:15:05,000 --> 02:15:06,000
而且它从来不 crash

4232
02:15:06,000 --> 02:15:09,000
而且它的文档非常非常全面

4233
02:15:09,000 --> 02:15:10,000
这个是什么

4234
02:15:12,000 --> 02:15:13,000
Xcode 不能比的

4235
02:15:14,000 --> 02:15:14,000
对

4236
02:15:14,000 --> 02:15:15,000
Xcode 就

4237
02:15:16,000 --> 02:15:17,000
Xcode 有很多非常

4238
02:15:17,000 --> 02:15:19,000
Xcode 给我的感觉有点像

4239
02:15:19,000 --> 02:15:23,000
刚刚接触那个 Micromedia 的那一套编辑器

4240
02:15:23,000 --> 02:15:24,000
那就是 Micromedia

4241
02:15:24,000 --> 02:15:25,000
还是 Micromedia 的时代

4242
02:15:26,000 --> 02:15:27,000
Flash 呀

4243
02:15:28,000 --> 02:15:28,000
Fireworks 呀

4244
02:15:29,000 --> 02:15:30,000
之类的这些东西

4245
02:15:30,000 --> 02:15:34,000
就是有很多细小的功能隐藏在某一处

4246
02:15:34,000 --> 02:15:35,000
如果你不知道怎么用的话

4247
02:15:35,000 --> 02:15:36,000
那你就不知道怎么用

4248
02:15:36,000 --> 02:15:37,000
弄死也找不到

4249
02:15:37,000 --> 02:15:37,000
对

4250
02:15:37,000 --> 02:15:38,000
没错

4251
02:15:39,000 --> 02:15:40,000
这个导引是一个问题

4252
02:15:40,000 --> 02:15:41,000
但是就是说

4253
02:15:41,000 --> 02:15:44,000
从因为你也做这个 Object-C 的开发

4254
02:15:44,000 --> 02:15:46,000
就是从实际使用的角度来讲

4255
02:15:46,000 --> 02:15:48,000
你觉得这两个有什么可比的地方吗

4256
02:15:51,000 --> 02:15:53,000
Xcode 缺少一些

4257
02:15:54,000 --> 02:15:56,000
有时候我觉得非常简单

4258
02:15:56,000 --> 02:15:58,000
但是它就是没有的功能

4259
02:15:58,000 --> 02:15:59,000
非常必要的就是没有

4260
02:15:59,000 --> 02:16:00,000
比如说呢

4261
02:16:02,000 --> 02:16:03,000
比如说

4262
02:16:04,000 --> 02:16:06,000
就有没有什么一个具体的例子

4263
02:16:06,000 --> 02:16:06,000
你觉得是

4264
02:16:06,000 --> 02:16:10,000
我现在一时还真的想不出来

4265
02:16:11,000 --> 02:16:12,000
但是

4266
02:16:12,000 --> 02:16:13,000
或者这么问

4267
02:16:13,000 --> 02:16:16,000
就是你在它日常使用的过程中

4268
02:16:16,000 --> 02:16:16,000
你有觉得

4269
02:16:17,000 --> 02:16:19,000
它有哪点地方让你非常不爽的地方

4270
02:16:19,000 --> 02:16:20,000
或者让你非常爽

4271
02:16:20,000 --> 02:16:22,000
或者让你非常不爽的地方都可以

4272
02:16:24,000 --> 02:16:26,000
让我比较不爽的地方

4273
02:16:26,000 --> 02:16:29,000
可能是有时候它的窗口

4274
02:16:29,000 --> 02:16:30,000
就是它的某些

4275
02:16:31,000 --> 02:16:32,000
布局是非常

4276
02:16:33,000 --> 02:16:34,000
让人难受的

4277
02:16:34,000 --> 02:16:36,000
比如说你要去

4278
02:16:36,000 --> 02:16:37,000
去点一个什么东西

4279
02:16:37,000 --> 02:16:39,000
你会发现这个东西

4280
02:16:39,000 --> 02:16:40,000
空间做得非常非常小

4281
02:16:44,000 --> 02:16:46,000
然后你要去改变它的大小

4282
02:16:46,000 --> 02:16:48,000
你会觉得自己已经有的

4283
02:16:48,000 --> 02:16:50,000
那个边际区域被压缩了

4284
02:16:50,000 --> 02:16:52,000
这布局不是很合理

4285
02:16:52,000 --> 02:16:53,000
对

4286
02:16:53,000 --> 02:16:55,000
我觉得布局并不是很合理

4287
02:16:55,000 --> 02:16:56,000
另外就是它的自动补全

4288
02:16:56,000 --> 02:16:57,000
有时候就是

4289
02:16:58,000 --> 02:17:00,000
很长一段时间里面都非常蠢

4290
02:17:00,000 --> 02:17:01,000
比如说

4291
02:17:01,000 --> 02:17:03,000
它有时候会

4292
02:17:04,000 --> 02:17:06,000
不能理解为什么你要

4293
02:17:06,000 --> 02:17:07,000
就是有两个

4294
02:17:07,000 --> 02:17:08,000
就有时候它是

4295
02:17:09,000 --> 02:17:11,000
你有时候你会觉得它是非常笨的

4296
02:17:11,000 --> 02:17:12,000
就是比如说

4297
02:17:12,000 --> 02:17:13,000
有两个一模一样的

4298
02:17:14,000 --> 02:17:17,000
有两个前十个字母一模一样的

4299
02:17:19,000 --> 02:17:20,000
函数

4300
02:17:21,000 --> 02:17:23,000
然后你敲了前几个字母

4301
02:17:23,000 --> 02:17:24,000
敲了几个字母

4302
02:17:24,000 --> 02:17:27,000
它非要把那个不常用的摆在上面

4303
02:17:27,000 --> 02:17:29,000
你要么要按 type 键

4304
02:17:29,000 --> 02:17:31,000
然后补全到那个

4305
02:17:32,000 --> 02:17:33,000
不一样

4306
02:17:34,000 --> 02:17:35,000
开始的地方

4307
02:17:36,000 --> 02:17:37,000
然后再打下一个字母

4308
02:17:37,000 --> 02:17:39,000
才可以输入下一个字母

4309
02:17:39,000 --> 02:17:41,000
要么你就要按下下

4310
02:17:41,000 --> 02:17:41,000
或者是什么键

4311
02:17:41,000 --> 02:17:44,000
去手动选中

4312
02:17:44,000 --> 02:17:46,000
你真正想要打的那个

4313
02:17:46,000 --> 02:17:47,000
那个东西

4314
02:17:47,000 --> 02:17:48,000
这个时候你会觉得

4315
02:17:48,000 --> 02:17:50,000
Intelligence 真的是非常非常聪明

4316
02:17:50,000 --> 02:17:52,000
就是它会去猜你最想要的是哪一个

4317
02:17:53,000 --> 02:17:56,000
但是现在 Excode 可能是要比以前好很多

4318
02:17:56,000 --> 02:17:56,000
OK

4319
02:17:57,000 --> 02:17:58,000
至少这两天我在

4320
02:17:58,000 --> 02:18:00,000
就是最近我在写 Swift 的时候

4321
02:18:00,000 --> 02:18:02,000
感觉好像是没有以前那么不爽

4322
02:18:03,000 --> 02:18:05,000
就稳定性那些有提高吗

4323
02:18:05,000 --> 02:18:08,000
就至少我经常看有人说要 crash 掉

4324
02:18:08,000 --> 02:18:10,000
或者是失去响应这样

4325
02:18:10,000 --> 02:18:13,000
我记得曾经在 4.2 G 的时候

4326
02:18:13,000 --> 02:18:16,000
有一个版本在那个

4327
02:18:17,000 --> 02:18:20,000
App Store 里面得到了一星半还是什么

4328
02:18:20,000 --> 02:18:22,000
就是因为那一版非常非常

4329
02:18:22,000 --> 02:18:24,000
就是大概平均半个小时 crash

4330
02:18:24,000 --> 02:18:27,000
而我现在经常遇到的一个问题是什么

4331
02:18:27,000 --> 02:18:29,000
它会跳出来一个半透明的提示框

4332
02:18:29,000 --> 02:18:30,000
说什么

4333
02:18:31,000 --> 02:18:34,000
Internal module for syntax

4334
02:18:34,000 --> 02:18:36,000
highlighting has crashed

4335
02:18:37,000 --> 02:18:39,000
please restart Excode

4336
02:18:39,000 --> 02:18:41,000
之类的这么一个提示框

4337
02:18:42,000 --> 02:18:44,000
它告诉你我内部有一个组件 crash

4338
02:18:44,000 --> 02:18:47,000
你有可能的话请你重新启动一下 Excode

4339
02:18:48,000 --> 02:18:49,000
我就 what the fuck

4340
02:18:50,000 --> 02:18:50,000
对

4341
02:18:51,000 --> 02:18:52,000
另外还有一个就是

4342
02:18:52,000 --> 02:18:55,000
我专门为了 Excode 买了一个小程序

4343
02:18:56,000 --> 02:18:58,000
叫做 Watchdog

4344
02:18:58,000 --> 02:18:59,000
是干嘛的

4345
02:18:59,000 --> 02:19:02,000
Watchdog 应该是卖大概 10 欧还是几欧

4346
02:19:02,000 --> 02:19:04,000
反正很便宜的工具

4347
02:19:04,000 --> 02:19:07,000
它唯一的功能就是在你退出 Excode 的时候

4348
02:19:07,000 --> 02:19:09,000
自动帮你把 Excode 所有的中间文件删掉

4349
02:19:09,000 --> 02:19:11,000
有什么问题吗

4350
02:19:11,000 --> 02:19:11,000
为什么要这样

4351
02:19:11,000 --> 02:19:12,000
就是

4352
02:19:12,000 --> 02:19:19,000
据很多很多 Excode 用户的经验来看

4353
02:19:19,000 --> 02:19:21,000
大部分时候如果 Excode 的行为怪异

4354
02:19:22,000 --> 02:19:25,000
你只需要把所有临时文件删掉

4355
02:19:25,000 --> 02:19:26,000
然后重新启动一遍就可以了

4356
02:19:27,000 --> 02:19:28,000
所以这个插件的意图就在于

4357
02:19:29,000 --> 02:19:30,000
干脆你每次一关 Excode

4358
02:19:30,000 --> 02:19:33,000
我立刻就把这些所有的文件全都清除掉

4359
02:19:33,000 --> 02:19:35,000
代价无非就是下一次启动的时候

4360
02:19:35,000 --> 02:19:37,000
可能稍微慢一点

4361
02:19:37,000 --> 02:19:39,000
但却以此换来了更多的稳定性

4362
02:19:40,000 --> 02:19:41,000
哇

4363
02:19:41,000 --> 02:19:42,000
天哪

4364
02:19:46,000 --> 02:19:48,000
而且我必须要保护

4365
02:19:48,000 --> 02:19:49,000
我必须要保护一下 Excode 的一点

4366
02:19:49,000 --> 02:19:51,000
就是现在的 Playground 非常爽

4367
02:19:51,000 --> 02:19:53,000
Playground 就是 Excode 里面的一个功能

4368
02:19:53,000 --> 02:19:55,000
你可以在左边输入代码

4369
02:19:55,000 --> 02:19:56,000
然后右边

4370
02:19:56,000 --> 02:19:58,000
这里有一个很简单的窗口

4371
02:19:58,000 --> 02:19:59,000
左边可以输入代码

4372
02:19:59,000 --> 02:20:04,000
窗口右半可以输出左边输入的代码

4373
02:20:06,000 --> 02:20:07,000
会展现出来的东西

4374
02:20:07,000 --> 02:20:09,000
比如说你写个 fall 循环

4375
02:20:09,000 --> 02:20:13,000
然后右边就会出现 fall 循环被执行多少次

4376
02:20:13,000 --> 02:20:15,000
以及中间如果有输出结果的话

4377
02:20:15,000 --> 02:20:17,000
它会把中间的输出结果也显示在右边

4378
02:20:17,000 --> 02:20:18,000
就不需要你做什么

4379
02:20:18,000 --> 02:20:20,000
你就是要把语句写出来按回车

4380
02:20:20,000 --> 02:20:24,000
然后它就会自动实时的去演算左边的语言

4381
02:20:24,000 --> 02:20:27,000
然后在右边显示出左边演算的结果来

4382
02:20:27,000 --> 02:20:29,000
就是如果你看过那个 Keynote 的话

4383
02:20:29,000 --> 02:20:31,000
那次 WC Keynote 的话

4384
02:20:33,000 --> 02:20:35,000
当时演示的就是这功能

4385
02:20:35,000 --> 02:20:36,000
我必须说 Playground 非常爽

4386
02:20:36,000 --> 02:20:39,000
但是 Playground 经常 crash 在我手里

4387
02:20:41,000 --> 02:20:45,000
就是 Swift 它是一种伪装成动态语言的静态语言

4388
02:20:45,000 --> 02:20:45,000
对

4389
02:20:45,000 --> 02:20:47,000
它每一次都要编译

4390
02:20:48,000 --> 02:20:51,000
但是它经常编译到一半就挂

4391
02:20:51,000 --> 02:20:53,000
然后导致整个 Playground 就挂

4392
02:20:54,000 --> 02:21:00,000
所以苹果的软工的质量是真的这么糟糕吗

4393
02:21:00,000 --> 02:21:01,000
还是

4394
02:21:02,000 --> 02:21:02,000
我觉得是这样

4395
02:21:02,000 --> 02:21:04,000
就是你必须要正视这一点

4396
02:21:04,000 --> 02:21:07,000
就是苹果它毕竟是个硬件公司

4397
02:21:07,000 --> 02:21:09,000
或者说它是一个一体化集成公司

4398
02:21:09,000 --> 02:21:11,000
而微软是专门做软件的

4399
02:21:11,000 --> 02:21:12,000
这里面还是有

4400
02:21:12,000 --> 02:21:13,000
微软也有 Xbox

4401
02:21:13,000 --> 02:21:15,000
我承认微软也有 Xbox

4402
02:21:15,000 --> 02:21:18,000
但是从基因上来看

4403
02:21:19,000 --> 02:21:21,000
苹果做的软件的确是不如 MakerCode

4404
02:21:21,000 --> 02:21:24,000
就从稳定性的角度来看吗

4405
02:21:24,000 --> 02:21:25,000
对

4406
02:21:25,000 --> 02:21:26,000
或者从义用性

4407
02:21:26,000 --> 02:21:30,000
或者说从 user friendly 的角度来看

4408
02:21:31,000 --> 02:21:33,000
Xcode 都远远输于 Visual Studio

4409
02:21:33,000 --> 02:21:34,000
这个我必须承认

4410
02:21:34,000 --> 02:21:36,000
所以它的好处

4411
02:21:36,000 --> 02:21:39,000
就是它比 Visual Studio 好的哪好在哪里

4412
02:21:40,000 --> 02:21:41,000
它有选择吗

4413
02:21:41,000 --> 02:21:41,000
它有好处吗

4414
02:21:41,000 --> 02:21:43,000
如果你可以选请问一下

4415
02:21:45,000 --> 02:21:48,000
比如说你们都写 C 程序

4416
02:21:48,000 --> 02:21:49,000
因为 Visual Studio 也可以写 C 程序

4417
02:21:49,000 --> 02:21:50,000
然后 Xcode 也可以写 C 程序

4418
02:21:50,000 --> 02:21:53,000
就不是写跟某一个平台

4419
02:21:53,000 --> 02:21:54,000
直接相关的那种东西的话

4420
02:21:57,000 --> 02:22:01,000
说实话我想不出来什么非常好的

4421
02:22:01,000 --> 02:22:03,000
就比如说我刚才第一反应是自体渲染

4422
02:22:05,000 --> 02:22:06,000
对

4423
02:22:06,000 --> 02:22:08,000
因为 Visual Studio 下面的

4424
02:22:08,000 --> 02:22:09,000
就是或者说 Windows 下面的自体渲染

4425
02:22:09,000 --> 02:22:11,000
是我现在已经不太能容忍的了

4426
02:22:11,000 --> 02:22:15,000
但是如果你真要说我要写一个

4427
02:22:15,000 --> 02:22:17,000
不去考虑跨平台

4428
02:22:18,000 --> 02:22:20,000
当然 Xcode 下面也写不了什么跨平台的东西

4429
02:22:21,000 --> 02:22:24,000
不是可以写它有什么 Python 模式吗

4430
02:22:26,000 --> 02:22:27,000
Xcode 有 Python 模式

4431
02:22:27,000 --> 02:22:29,000
就可以这么干

4432
02:22:29,000 --> 02:22:31,000
但是因为它毕竟可以当成一个编辑器来用

4433
02:22:31,000 --> 02:22:34,000
对 当成一个编辑器来用

4434
02:22:35,000 --> 02:22:36,000
我也不知道这个 point 何在的话

4435
02:22:36,000 --> 02:22:37,000
只是这样说而已

4436
02:22:38,000 --> 02:22:39,000
对

4437
02:22:40,000 --> 02:22:43,000
我觉得这一点上 Visual Studio 也许是完胜 Xcode

4438
02:22:43,000 --> 02:22:46,000
但我还是不会去用 Visual Studio

4439
02:22:46,000 --> 02:22:47,000
就是因为太丑了

4440
02:22:49,000 --> 02:22:51,000
就是因为它已经不是我的

4441
02:22:51,000 --> 02:22:52,000
平台了

4442
02:22:52,000 --> 02:22:53,000
不是我的世界的一部分了

4443
02:22:53,000 --> 02:22:55,000
但是它对我来说是一种

4444
02:22:55,000 --> 02:22:56,000
已经是一种比较陌生的东西

4445
02:22:56,000 --> 02:23:01,000
你说你把自己变得再好有什么用

4446
02:23:01,000 --> 02:23:02,000
它已经往前走了

4447
02:23:03,000 --> 02:23:03,000
对

4448
02:23:03,000 --> 02:23:04,000
I have no no

4449
02:23:05,000 --> 02:23:07,000
好悲伤的一个故事

4450
02:23:07,000 --> 02:23:08,000
对

4451
02:23:09,000 --> 02:23:10,000
Eclipse

4452
02:23:11,000 --> 02:23:11,000
对

4453
02:23:11,000 --> 02:23:13,000
Eclipse 可能是比较

4454
02:23:14,000 --> 02:23:18,000
非常平庸的一个 ide

4455
02:23:18,000 --> 02:23:18,000
应该说

4456
02:23:18,000 --> 02:23:20,000
这里面叫平庸来形容

4457
02:23:20,000 --> 02:23:22,000
我觉得这大而全的庸种一个东西

4458
02:23:23,000 --> 02:23:24,000
不它所谓平庸

4459
02:23:24,000 --> 02:23:26,000
就是应该 Eclipse 可以在所有平台上使用

4460
02:23:26,000 --> 02:23:28,000
对

4461
02:23:28,000 --> 02:23:33,000
然后用 Eclipse 最多使用 Eclipse 的一帮人士

4462
02:23:33,000 --> 02:23:35,000
没有什么志向的

4463
02:23:35,000 --> 02:23:36,000
或者说没有什么

4464
02:23:40,000 --> 02:23:46,000
此处插入一个带有歧视性意味的形容词

4465
02:23:47,000 --> 02:23:50,000
品味或者是 whatever 的程序员所用的

4466
02:23:50,000 --> 02:23:55,000
就是你能想象到的最平庸的工作

4467
02:23:56,000 --> 02:23:59,000
我觉得就是用 Eclipse 在一个公司里面写扎吧

4468
02:23:59,000 --> 02:24:00,000
我发现有个问题

4469
02:24:00,000 --> 02:24:02,000
或者说就是我现在所做的事情

4470
02:24:02,000 --> 02:24:03,000
因为我发现有个问题

4471
02:24:03,000 --> 02:24:06,000
就是学校里面教人写

4472
02:24:06,000 --> 02:24:10,000
因为现在学校里面大部分教

4473
02:24:10,000 --> 02:24:12,000
是用 java 写入门

4474
02:24:12,000 --> 02:24:14,000
学 CS 入门的东西

4475
02:24:14,000 --> 02:24:16,000
然后我发现他们都在用 Eclipse

4476
02:24:16,000 --> 02:24:16,000
对

4477
02:24:16,000 --> 02:24:18,000
然后 Eclipse 对

4478
02:24:18,000 --> 02:24:20,000
这也是平庸的一个点

4479
02:24:20,000 --> 02:24:23,000
就是如果一个人在学校里面学过 java

4480
02:24:23,000 --> 02:24:26,000
那他基本上就很有可能用过 Eclipse

4481
02:24:26,000 --> 02:24:27,000
惯性的

4482
02:24:28,000 --> 02:24:28,000
对

4483
02:24:28,000 --> 02:24:31,000
就是教材就会说你去下载一个这个工具

4484
02:24:31,000 --> 02:24:33,000
他会一步一步告诉你怎么去完成

4485
02:24:33,000 --> 02:24:34,000
你没有一个偏好的情况之下

4486
02:24:34,000 --> 02:24:37,000
你当然要按照教材上告诉你的事情来做

4487
02:24:37,000 --> 02:24:39,000
对吧

4488
02:24:39,000 --> 02:24:39,000
对

4489
02:24:40,000 --> 02:24:43,000
然后这就导致了 Eclipse 是一个非常没有

4490
02:24:44,000 --> 02:24:45,000
你谈到他的时候

4491
02:24:45,000 --> 02:24:47,000
你就让他谈论空气或者水

4492
02:24:47,000 --> 02:24:49,000
你对他没有什么偏好

4493
02:24:49,000 --> 02:24:51,000
或者是没有性格的东西

4494
02:24:51,000 --> 02:24:52,000
对

4495
02:24:52,000 --> 02:24:54,000
而人们只能吐槽说

4496
02:24:54,000 --> 02:24:56,000
比如说 Eclipse 在 Mac 上非常慢

4497
02:24:57,000 --> 02:24:58,000
这不光是 Mac 吧

4498
02:24:58,000 --> 02:24:59,000
所有系统上都很慢

4499
02:25:00,000 --> 02:25:02,000
我觉得在 Linux 上还可以

4500
02:25:02,000 --> 02:25:02,000
还可以

4501
02:25:02,000 --> 02:25:02,000
OK

4502
02:25:03,000 --> 02:25:05,000
但是在 Mac 上经常会卡到

4503
02:25:05,000 --> 02:25:05,000
我也不知道

4504
02:25:05,000 --> 02:25:06,000
应该跟项目有关

4505
02:25:06,000 --> 02:25:08,000
就是我现在做的项目是一个

4506
02:25:12,000 --> 02:25:12,000
我来说一个词

4507
02:25:12,000 --> 02:25:13,000
你不要被吓到

4508
02:25:13,000 --> 02:25:14,000
Maven

4509
02:25:17,000 --> 02:25:20,000
是用 Maven 来管理软件包的

4510
02:25:20,000 --> 02:25:29,000
然后我们这个项目大概有 70 到 80 个 Maven module

4511
02:25:29,000 --> 02:25:30,000
OK

4512
02:25:30,000 --> 02:25:31,000
Maven project

4513
02:25:31,000 --> 02:25:34,000
然后每次去刷新的时候

4514
02:25:34,000 --> 02:25:37,000
就是 Eclipse 要在后台去更新整个

4515
02:25:38,000 --> 02:25:41,000
整个项目的 dependency 的时候

4516
02:25:41,000 --> 02:25:45,000
可能整个程序可以长达 20 分钟时序响应

4517
02:25:46,000 --> 02:25:48,000
这在 Linux 上面是完全不会出现的

4518
02:25:48,000 --> 02:25:49,000
OK

4519
02:25:50,000 --> 02:25:51,000
这是实现的问题吗

4520
02:25:53,000 --> 02:25:54,000
不对

4521
02:25:54,000 --> 02:25:55,000
他应该是加盲写的

4522
02:25:55,000 --> 02:25:56,000
如果许景机没有

4523
02:25:56,000 --> 02:25:56,000
他是这样写的

4524
02:25:56,000 --> 02:25:58,000
就是 JVM 没有问题的话

4525
02:25:58,000 --> 02:25:59,000
不能

4526
02:25:59,000 --> 02:26:00,000
不应该出现这种

4527
02:26:01,000 --> 02:26:01,000
这么大的差异

4528
02:26:01,000 --> 02:26:03,000
我觉得肯定是实现的问题

4529
02:26:03,000 --> 02:26:04,000
就是他的

4530
02:26:04,000 --> 02:26:07,000
可能三炮现成模型不是很科学

4531
02:26:07,000 --> 02:26:12,000
导致 UI 的现成会长时间的失去响应

4532
02:26:13,000 --> 02:26:17,000
有可能是在 Maven 的 Gui 那套是不是没有弄好

4533
02:26:18,000 --> 02:26:18,000
很有可能

4534
02:26:18,000 --> 02:26:19,000
对

4535
02:26:19,000 --> 02:26:23,000
我其实我有用过一段时间的 Eclipse

4536
02:26:23,000 --> 02:26:25,000
因为要去阅卷

4537
02:26:25,000 --> 02:26:28,000
就是做助教的话要写好作业

4538
02:26:29,000 --> 02:26:31,000
因为你刚才也讲了问题

4539
02:26:31,000 --> 02:26:33,000
他是有一个惯性的

4540
02:26:33,000 --> 02:26:35,000
就是学校里面老师教用这个

4541
02:26:35,000 --> 02:26:36,000
然后学生也要用这个

4542
02:26:36,000 --> 02:26:38,000
我打开他的工程文件

4543
02:26:38,000 --> 02:26:39,000
因为只能用这个

4544
02:26:39,000 --> 02:26:41,000
不然的话我还得再去折腾一下

4545
02:26:41,000 --> 02:26:43,000
他怎么去配置他每一个工程是怎么样子

4546
02:26:43,000 --> 02:26:43,000
对吧

4547
02:26:44,000 --> 02:26:45,000
还是挺坑爹的

4548
02:26:46,000 --> 02:26:49,000
我对他的最恶劣的印象就是他实在是太丑了

4549
02:26:52,000 --> 02:26:53,000
这个我已经

4550
02:26:54,000 --> 02:26:54,000
好吧

4551
02:26:55,000 --> 02:26:58,000
他比我见过的任何一款编辑都要丑

4552
02:26:59,000 --> 02:27:01,000
因为他

4553
02:27:01,000 --> 02:27:03,000
对没有一个

4554
02:27:03,000 --> 02:27:04,000
就是怎么说呢

4555
02:27:04,000 --> 02:27:10,000
就是 Eclipse 他的组织模式导致了他必然是这样一个宿命

4556
02:27:10,000 --> 02:27:16,000
其实他也不算是用的是一个跨平台的 Gui 套件

4557
02:27:16,000 --> 02:27:18,000
因为我看他的元素

4558
02:27:18,000 --> 02:27:21,000
有些还是在 Mac 上是原生的 Mac 元素

4559
02:27:21,000 --> 02:27:22,000
但是一到他那个编辑器

4560
02:27:22,000 --> 02:27:24,000
就是那个 IDE 里面的那些东西

4561
02:27:24,000 --> 02:27:25,000
一些部件的时候

4562
02:27:25,000 --> 02:27:28,000
你就会明显的发现这和其他系统完全不一样

4563
02:27:29,000 --> 02:27:30,000
对没错

4564
02:27:30,000 --> 02:27:33,000
而且我不知道 Windows 上面是有没有这个问题

4565
02:27:33,000 --> 02:27:37,000
但他在 Linux 上面好像他还装的挺好的

4566
02:27:37,000 --> 02:27:38,000
就模拟的挺好

4567
02:27:38,000 --> 02:27:40,000
也可能是这个选择

4568
02:27:40,000 --> 02:27:41,000
就 GTK 的情况下

4569
02:27:41,000 --> 02:27:43,000
他还凑合

4570
02:27:43,000 --> 02:27:44,000
但是

4571
02:27:44,000 --> 02:27:47,000
在 Mac 上或者在 Windows 上

4572
02:27:47,000 --> 02:27:48,000
他就是长得很奇怪

4573
02:27:49,000 --> 02:27:55,000
其实可能也是因为他用的那一套叫什么 Standard Widget SWT

4574
02:27:55,000 --> 02:27:57,000
Standard Widget Toolkit

4575
02:27:58,000 --> 02:27:59,000
SWT 对

4576
02:27:59,000 --> 02:28:00,000
是一套

4577
02:28:01,000 --> 02:28:02,000
的确也是一套

4578
02:28:02,000 --> 02:28:03,000
可能只有 Eclipse 在用的东西

4579
02:28:05,000 --> 02:28:09,000
还是 SWT 好像就是专门用 Eclipse 而开发出来的东西

4580
02:28:09,000 --> 02:28:09,000
应该是这样吧

4581
02:28:09,000 --> 02:28:11,000
我记得如果我没记错的话

4582
02:28:11,000 --> 02:28:13,000
就是他会用这么一套跨平台的东西去做

4583
02:28:13,000 --> 02:28:14,000
然后搞得

4584
02:28:14,000 --> 02:28:17,000
虽然在每个平台上你说都长得一样了

4585
02:28:17,000 --> 02:28:17,000
没有问题

4586
02:28:18,000 --> 02:28:19,000
可是这实在是太丑了

4587
02:28:19,000 --> 02:28:20,000
怎么能够

4588
02:28:22,000 --> 02:28:24,000
而且他那些窗口

4589
02:28:24,000 --> 02:28:26,000
你刚才说那个什么 Xcode 的窗口的布局

4590
02:28:27,000 --> 02:28:28,000
可能不是很合理

4591
02:28:28,000 --> 02:28:28,000
对吧

4592
02:28:28,000 --> 02:28:30,000
他起码他好歹还长得还

4593
02:28:31,000 --> 02:28:32,000
可以

4594
02:28:32,000 --> 02:28:33,000
长得还能看

4595
02:28:33,000 --> 02:28:33,000
对吧

4596
02:28:33,000 --> 02:28:34,000
他至少是漂亮

4597
02:28:34,000 --> 02:28:34,000
对

4598
02:28:34,000 --> 02:28:35,000
这个没错

4599
02:28:35,000 --> 02:28:36,000
Eclipse 这种布局

4600
02:28:36,000 --> 02:28:37,000
哇

4601
02:28:38,000 --> 02:28:40,000
这已经不能用

4602
02:28:40,000 --> 02:28:42,000
用丑来形容了

4603
02:28:42,000 --> 02:28:42,000
简直

4604
02:28:42,000 --> 02:28:43,000
对于外贸协会来说

4605
02:28:43,000 --> 02:28:45,000
这是非常不能忍受的一件事

4606
02:28:45,000 --> 02:28:45,000
对

4607
02:28:45,000 --> 02:28:47,000
而且你又说这都什么乱七八糟的玩意

4608
02:28:47,000 --> 02:28:50,000
而且他那些各种图标也非常诡异

4609
02:28:52,000 --> 02:28:54,000
你会想这是一个什么样的设计师

4610
02:28:54,000 --> 02:28:55,000
设计出来的图标

4611
02:28:57,000 --> 02:28:59,000
好像的确有

4612
02:28:59,000 --> 02:29:00,000
你这么一说

4613
02:29:00,000 --> 02:29:02,000
我也觉得好像是挺奇怪

4614
02:29:02,000 --> 02:29:02,000
对

4615
02:29:02,000 --> 02:29:05,000
就完全不能反映他要代表的那个意思

4616
02:29:05,000 --> 02:29:06,000
我觉得就是

4617
02:29:07,000 --> 02:29:08,000
好吧

4618
02:29:08,000 --> 02:29:08,000
也可能是他那套语

4619
02:29:08,000 --> 02:29:09,000
我没有

4620
02:29:09,000 --> 02:29:12,000
我至今为止没有理解到的一个结果

4621
02:29:12,000 --> 02:29:13,000
反正

4622
02:29:13,000 --> 02:29:14,000
对

4623
02:29:14,000 --> 02:29:18,000
这我想到的一件完全无关的事情

4624
02:29:18,000 --> 02:29:18,000
就是

4625
02:29:19,000 --> 02:29:21,000
其实图标设计的一个问题

4626
02:29:21,000 --> 02:29:24,000
就是我在大上大学的时候

4627
02:29:24,000 --> 02:29:27,000
有一天去参加一个

4628
02:29:28,000 --> 02:29:31,000
web 设计的一个展会之类的

4629
02:29:31,000 --> 02:29:32,000
不展会

4630
02:29:32,000 --> 02:29:33,000
就是一个

4631
02:29:34,000 --> 02:29:36,000
颁奖会之类的这么一个活动

4632
02:29:36,000 --> 02:29:39,000
然后就坐的时候有一个教美术

4633
02:29:39,000 --> 02:29:40,000
还是教什么

4634
02:29:40,000 --> 02:29:42,000
视觉传达的一个老师

4635
02:29:42,000 --> 02:29:45,000
在那边指导台上的人用 powerpoint

4636
02:29:46,000 --> 02:29:48,000
然后他一直说点那个酒杯

4637
02:29:50,000 --> 02:29:52,000
点那个酒杯的图标

4638
02:29:52,000 --> 02:29:53,000
然后我想

4639
02:29:54,000 --> 02:29:57,000
powerpoint 上面为什么会有一个酒杯的图标呢

4640
02:29:57,000 --> 02:29:58,000
结果是哪个图标

4641
02:30:00,000 --> 02:30:02,000
结果是当时的 powerpoint

4642
02:30:03,000 --> 02:30:04,000
2002 还是什么

4643
02:30:05,000 --> 02:30:07,000
反正是某一个特定版本的 powerpoint

4644
02:30:07,000 --> 02:30:08,000
可能现在还是这样的

4645
02:30:08,000 --> 02:30:12,000
就是有一个快捷的图标是

4646
02:30:12,000 --> 02:30:13,000
进入展示模式

4647
02:30:13,000 --> 02:30:15,000
就是把你平时不是你打开

4648
02:30:15,000 --> 02:30:17,000
powerpoint 不是处于编辑模式吗

4649
02:30:17,000 --> 02:30:19,000
就是左边是 slides

4650
02:30:19,000 --> 02:30:21,000
然后右边是那个正要被编辑的 slides

4651
02:30:22,000 --> 02:30:24,000
然后你点一下那个图标

4652
02:30:24,000 --> 02:30:25,000
就可以立即进入放映模式

4653
02:30:25,000 --> 02:30:26,000
对

4654
02:30:26,000 --> 02:30:28,000
怎么是个酒杯呢

4655
02:30:28,000 --> 02:30:32,000
那个图标其实是一个

4656
02:30:33,000 --> 02:30:35,000
下面是一个支架

4657
02:30:35,000 --> 02:30:37,000
那个放映机的吧

4658
02:30:37,000 --> 02:30:39,000
白纸不是放映机

4659
02:30:39,000 --> 02:30:39,000
就是那种

4660
02:30:40,000 --> 02:30:42,000
早期的 whiteboard 是一张纸

4661
02:30:43,000 --> 02:30:44,000
就是是一个 board

4662
02:30:44,000 --> 02:30:45,000
然后上面挂了很多纸

4663
02:30:45,000 --> 02:30:46,000
物理的 slides

4664
02:30:47,000 --> 02:30:49,000
对物理的 slides

4665
02:30:49,000 --> 02:30:50,000
然后这个 slides

4666
02:30:50,000 --> 02:30:51,000
这个下面是一个支架

4667
02:30:51,000 --> 02:30:53,000
上面是一张纸的这么一个

4668
02:30:53,000 --> 02:30:54,000
远看是一个杯子

4669
02:30:54,000 --> 02:30:56,000
被那个老师认成了酒杯

4670
02:30:56,000 --> 02:30:59,000
这件事情一直深深的印在我的脑海里

4671
02:30:59,000 --> 02:31:00,000
我就觉得

4672
02:31:01,000 --> 02:31:03,000
对交互设计有时候你不会理解

4673
02:31:03,000 --> 02:31:06,000
你不会明白你的用户把它理解为什么

4674
02:31:06,000 --> 02:31:07,000
就比如说

4675
02:31:07,000 --> 02:31:08,000
还有一例子就是

4676
02:31:09,000 --> 02:31:11,000
command and conquer 里面那个

4677
02:31:13,000 --> 02:31:14,000
有三个工具

4678
02:31:14,000 --> 02:31:16,000
最左边是修理

4679
02:31:16,000 --> 02:31:18,000
中间是贩卖

4680
02:31:18,000 --> 02:31:19,000
一个钱

4681
02:31:19,000 --> 02:31:20,000
就是你可以把自己的建筑卖掉

4682
02:31:21,000 --> 02:31:22,000
左边是个搬手

4683
02:31:22,000 --> 02:31:25,000
然后右边是个刀来的标志

4684
02:31:25,000 --> 02:31:26,000
然后我想说

4685
02:31:29,000 --> 02:31:30,000
用搬手可以修理

4686
02:31:32,000 --> 02:31:35,000
用刀来不就是买建筑吗

4687
02:31:36,000 --> 02:31:38,000
不对反过来

4688
02:31:38,000 --> 02:31:39,000
用刀来可以把建筑卖掉

4689
02:31:39,000 --> 02:31:41,000
那用搬手难道不就是

4690
02:31:42,000 --> 02:31:43,000
造一个建筑出来吗

4691
02:31:44,000 --> 02:31:44,000
然后

4692
02:31:44,000 --> 02:31:45,000
不全

4693
02:31:45,000 --> 02:31:47,000
对我把自己所有建筑卖掉了

4694
02:31:47,000 --> 02:31:49,000
我把自己所有建筑都卖掉了

4695
02:31:49,000 --> 02:31:49,000
然后试图

4696
02:31:49,000 --> 02:31:52,000
重新把基地再搭一遍用搬手

4697
02:31:55,000 --> 02:31:56,000
对一上来把自己的大门一摆

4698
02:31:56,000 --> 02:31:59,000
所以什么图标设计还是一个很重要的

4699
02:31:59,000 --> 02:32:01,000
对交互设计还是很重要的

4700
02:32:01,000 --> 02:32:01,000
就像你说的

4701
02:32:01,000 --> 02:32:02,000
就是

4702
02:32:02,000 --> 02:32:02,000
有时候

4703
02:32:02,000 --> 02:32:04,000
就是如果你不太明白

4704
02:32:04,000 --> 02:32:07,000
jar 这个单词在英语里面

4705
02:32:07,000 --> 02:32:09,000
可以指代罐子的话

4706
02:32:09,000 --> 02:32:12,000
你是不太明白为什么 Eclipse 要把

4707
02:32:12,000 --> 02:32:13,000
jar 文件

4708
02:32:13,000 --> 02:32:14,000
化成一个罐子

4709
02:32:14,000 --> 02:32:16,000
然后里面装着 0 和 1 的

4710
02:32:17,000 --> 02:32:18,000
的确是挺好玩的

4711
02:32:18,000 --> 02:32:19,000
对

4712
02:32:20,000 --> 02:32:21,000
关于 Cleaks 的吐槽

4713
02:32:21,000 --> 02:32:23,000
还有一个就是他

4714
02:32:23,000 --> 02:32:25,000
你们觉得他非常慢

4715
02:32:26,000 --> 02:32:26,000
对啊

4716
02:32:26,000 --> 02:32:27,000
我刚才已经说了

4717
02:32:27,000 --> 02:32:29,000
就是他的慢不是那种

4718
02:32:31,000 --> 02:32:32,000
可以接受的慢

4719
02:32:32,000 --> 02:32:33,000
不是那种可以忍

4720
02:32:33,000 --> 02:32:34,000
是你说这个点一下

4721
02:32:34,000 --> 02:32:35,000
可能卡一下这样

4722
02:32:35,000 --> 02:32:36,000
他是一种

4723
02:32:36,000 --> 02:32:38,000
整个流程都会觉得

4724
02:32:38,000 --> 02:32:39,000
连输入一个字

4725
02:32:39,000 --> 02:32:40,000
你都会觉得他有点慢的那种慢

4726
02:32:40,000 --> 02:32:41,000
但可能这就是

4727
02:32:41,000 --> 02:32:43,000
就好像 somehow 你输入一个字符

4728
02:32:43,000 --> 02:32:44,000
他要更新整个 UI 的感觉

4729
02:32:44,000 --> 02:32:45,000
对就是有一种

4730
02:32:46,000 --> 02:32:47,000
粘质的感觉

4731
02:32:47,000 --> 02:32:49,000
我不知道怎么描述准不准确

4732
02:32:49,000 --> 02:32:50,000
就是你会觉得

4733
02:32:50,000 --> 02:32:53,000
你跟这个 UI 交互的时候

4734
02:32:53,000 --> 02:32:54,000
你在写代码的时候

4735
02:32:54,000 --> 02:32:57,000
你永远不可能找到那种流畅的感觉

4736
02:32:59,000 --> 02:33:00,000
没错是这样

4737
02:33:00,000 --> 02:33:01,000
我一直不明白为什么

4738
02:33:01,000 --> 02:33:02,000
刚才你可以说

4739
02:33:02,000 --> 02:33:05,000
这个可能是什么用 JVM 虚拟机

4740
02:33:05,000 --> 02:33:05,000
他可能

4741
02:33:06,000 --> 02:33:06,000
Latency

4742
02:33:06,000 --> 02:33:08,000
不如用原生的像 C

4743
02:33:08,000 --> 02:33:09,000
或者 C++这种

4744
02:33:09,000 --> 02:33:11,000
不需要 GC 的语言

4745
02:33:11,000 --> 02:33:12,000
或者这种来的要直接

4746
02:33:12,000 --> 02:33:13,000
但是

4747
02:33:14,000 --> 02:33:14,000
原因我们不管了

4748
02:33:14,000 --> 02:33:15,000
但是就是说

4749
02:33:15,000 --> 02:33:17,000
这个助动的给我的体验就是

4750
02:33:17,000 --> 02:33:19,000
我如果可能

4751
02:33:19,000 --> 02:33:21,000
我肯定不会再想在这里面写东西了

4752
02:33:22,000 --> 02:33:23,000
没错

4753
02:33:23,000 --> 02:33:23,000
对

4754
02:33:23,000 --> 02:33:24,000
对

4755
02:33:24,000 --> 02:33:26,000
就是基本上我也曾经挣扎过

4756
02:33:26,000 --> 02:33:29,000
就是我想要切换到 IntelJ 下面

4757
02:33:30,000 --> 02:33:32,000
但是 B 公司的项目

4758
02:33:32,000 --> 02:33:34,000
其实是非常 Eclipse 依赖的

4759
02:33:35,000 --> 02:33:36,000
因为是 legacy code

4760
02:33:36,000 --> 02:33:38,000
所以然后里面有很多

4761
02:33:38,000 --> 02:33:40,000
比如说启动项目或者是

4762
02:33:41,000 --> 02:33:43,000
启动项目可能有十几个

4763
02:33:43,000 --> 02:33:45,000
每一个分别启动一个

4764
02:33:45,000 --> 02:33:48,000
不启动整个组件里面的

4765
02:33:48,000 --> 02:33:49,000
某一个特定的组件

4766
02:33:49,000 --> 02:33:49,000
然后

4767
02:33:51,000 --> 02:33:52,000
打开一个窗口

4768
02:33:52,000 --> 02:33:53,000
Windows 之类的

4769
02:33:53,000 --> 02:33:54,000
这些东西我基本上

4770
02:33:54,000 --> 02:33:56,000
直到现在就是快要离职了

4771
02:33:56,000 --> 02:33:57,000
我都没有时间去

4772
02:33:57,000 --> 02:34:00,000
弄明白他到底是启动了哪一个组件

4773
02:34:00,000 --> 02:34:02,000
但整个程序基本上

4774
02:34:03,000 --> 02:34:05,000
脱离 Eclipse 是非常难以使用的

4775
02:34:06,000 --> 02:34:08,000
然后或者是难以维护的

4776
02:34:08,000 --> 02:34:10,000
但是我还是成功地做到了

4777
02:34:10,000 --> 02:34:12,000
在 80%的时间里面

4778
02:34:12,000 --> 02:34:15,000
能用 Wim 改的部分就用 Wim

4779
02:34:16,000 --> 02:34:18,000
我宁可用 Wim 改完 Java

4780
02:34:18,000 --> 02:34:20,000
然后用 Synthetic 去

4781
02:34:21,000 --> 02:34:22,000
看一下有没有语法错误

4782
02:34:22,000 --> 02:34:23,000
然后编译

4783
02:34:23,000 --> 02:34:24,000
如果编译不过了

4784
02:34:24,000 --> 02:34:25,000
我再回去改

4785
02:34:25,000 --> 02:34:27,000
我宁可这样也不愿意去启动 Eclipse

4786
02:34:28,000 --> 02:34:30,000
你看就把人逼成什么样子

4787
02:34:30,000 --> 02:34:31,000
对就可以想象

4788
02:34:31,000 --> 02:34:33,000
他们 paying ass 的指数有多高

4789
02:34:34,000 --> 02:34:36,000
对反正就是刚才讲的

4790
02:34:36,000 --> 02:34:39,000
他没有那种让你很畅快的感觉

4791
02:34:39,000 --> 02:34:40,000
所以我很难想象

4792
02:34:40,000 --> 02:34:43,000
有人会在里面做到出一个好的产品

4793
02:34:43,000 --> 02:34:44,000
我问你一件事情

4794
02:34:45,000 --> 02:34:48,000
你觉得地球上存在一种人能够理解

4795
02:34:48,000 --> 02:34:49,000
Lixir 的所有功能组

4796
02:34:49,000 --> 02:34:51,000
那些按钮的组合是在干嘛吗

4797
02:34:52,000 --> 02:34:55,000
我觉得 Eclipse 就像 CSSR 一样

4798
02:34:55,000 --> 02:34:57,000
任何一个说我精通 Eclipse 的人都在扯淡

4799
02:34:59,000 --> 02:35:01,000
所以没有一个人是理解

4800
02:35:01,000 --> 02:35:04,000
Lixir 所有的按钮或者功能是干嘛的

4801
02:35:06,000 --> 02:35:07,000
可以这样说

4802
02:35:07,000 --> 02:35:10,000
我相信如果你愿意穷尽

4803
02:35:11,000 --> 02:35:13,000
你两三年的时间去研究一个版本的话

4804
02:35:13,000 --> 02:35:14,000
应该是可以研究到

4805
02:35:14,000 --> 02:35:15,000
对他会更新

4806
02:35:15,000 --> 02:35:16,000
两三年之间又更新了一个版本

4807
02:35:16,000 --> 02:35:17,000
你又不知道

4808
02:35:17,000 --> 02:35:19,000
现在版本叫什么 Luna 还是叫什么

4809
02:35:20,000 --> 02:35:22,000
现在应该已经出 Luna 版本

4810
02:35:22,000 --> 02:35:25,000
我还在用之前那个什么

4811
02:35:25,000 --> 02:35:28,000
反正木星我们卫星的名字我的天啊

4812
02:35:30,000 --> 02:35:31,000
还有一个事情就是

4813
02:35:31,000 --> 02:35:34,000
据我所知好像 Android 开发

4814
02:35:34,000 --> 02:35:35,000
那个什么

4815
02:35:35,000 --> 02:35:38,000
Android Studio 好像是基于 Eclipse 改的

4816
02:35:38,000 --> 02:35:38,000
是吧

4817
02:35:39,000 --> 02:35:40,000
对 Android 的开发

4818
02:35:40,000 --> 02:35:43,000
最开始是一定要装一个 Eclipse 的插件

4819
02:35:43,000 --> 02:35:45,000
我觉得当时就已经 turn me off 了

4820
02:35:45,000 --> 02:35:47,000
就我那我这辈子都不要为 Android 开发程序了

4821
02:35:47,000 --> 02:35:49,000
居然要用 Eclipse

4822
02:35:49,000 --> 02:35:51,000
然后

4823
02:35:51,000 --> 02:35:52,000
对

4824
02:35:52,000 --> 02:35:55,000
而且 Google App Engine 其实早期也是

4825
02:35:55,000 --> 02:35:58,000
支持你用一个 Eclipse 的插件

4826
02:35:58,000 --> 02:36:01,000
因为它支持那个 Java 的那个运行态嘛

4827
02:36:01,000 --> 02:36:01,000
对

4828
02:36:02,000 --> 02:36:03,000
对

4829
02:36:03,000 --> 02:36:06,000
然后我就那个 Android 那次我一直有一个

4830
02:36:06,000 --> 02:36:07,000
假说啊

4831
02:36:07,000 --> 02:36:09,000
那也肯定是不对的

4832
02:36:09,000 --> 02:36:11,000
但是我倾向于这么想

4833
02:36:11,000 --> 02:36:12,000
就是你

4834
02:36:12,000 --> 02:36:15,000
我们老是说这个什么 Android 的上面的应用

4835
02:36:15,000 --> 02:36:16,000
整体来说

4836
02:36:16,000 --> 02:36:18,000
不如 IOS 上面的好看

4837
02:36:19,000 --> 02:36:21,000
我在想是不是和开发工具有关吗

4838
02:36:21,000 --> 02:36:22,000
你想象一下

4839
02:36:22,000 --> 02:36:24,000
如果你一个作为一个

4840
02:36:24,000 --> 02:36:24,000
比如说你是一个

4841
02:36:24,000 --> 02:36:26,000
就是什么所谓的独立开发者

4842
02:36:26,000 --> 02:36:27,000
那种大公司

4843
02:36:27,000 --> 02:36:29,000
你就会有单独的美工那种东西在说

4844
02:36:29,000 --> 02:36:30,000
就是你作为一个

4845
02:36:30,000 --> 02:36:32,000
这种小的两三个人

4846
02:36:32,000 --> 02:36:33,000
或者一个人的团队

4847
02:36:33,000 --> 02:36:34,000
不是这个团队

4848
02:36:34,000 --> 02:36:35,000
就是两三个团队和一个人

4849
02:36:35,000 --> 02:36:36,000
你自己一个独立的

4850
02:36:36,000 --> 02:36:38,000
就单人开发者

4851
02:36:38,000 --> 02:36:42,000
你面对着这么一个丑陋的一个界面

4852
02:36:42,000 --> 02:36:43,000
你有心情做出一个很好

4853
02:36:43,000 --> 02:36:45,000
很漂亮的产品吗

4854
02:36:45,000 --> 02:36:46,000
我一直很怀疑这件事情

4855
02:36:46,000 --> 02:36:48,000
起码我每次看到 Eclipse 的时候

4856
02:36:48,000 --> 02:36:51,000
我对那个心态就觉得很焦躁

4857
02:36:51,000 --> 02:36:52,000
很焦虑

4858
02:36:52,000 --> 02:36:53,000
没错

4859
02:36:53,000 --> 02:36:56,000
所以这里可能会影响很多心情吧

4860
02:36:56,000 --> 02:36:56,000
我觉得

4861
02:36:57,000 --> 02:36:57,000
对

4862
02:36:58,000 --> 02:37:01,000
这就好像 Xcode 再怎么丑

4863
02:37:01,000 --> 02:37:02,000
再怎么不好用

4864
02:37:02,000 --> 02:37:03,000
好像还长得可以的

4865
02:37:03,000 --> 02:37:07,000
画窗体的部分还是比较漂亮

4866
02:37:07,000 --> 02:37:07,000
对

4867
02:37:08,000 --> 02:37:10,000
但是反过来在 Virtual Studio 下面

4868
02:37:11,000 --> 02:37:14,000
一显示一个 Windows Form 1

4869
02:37:14,000 --> 02:37:16,000
然后里面一堆小点

4870
02:37:16,000 --> 02:37:18,000
我立刻就觉得我靠是什么

4871
02:37:19,000 --> 02:37:21,000
就它那个小点作用是为了让你定位对吧

4872
02:37:21,000 --> 02:37:22,000
是定位用的

4873
02:37:22,000 --> 02:37:23,000
其实是 Great

4874
02:37:23,000 --> 02:37:26,000
但是明显不如 Xcode 的那个叫什么

4875
02:37:26,000 --> 02:37:28,000
那个线条 Grideline 好用

4876
02:37:28,000 --> 02:37:28,000
漂亮

4877
02:37:28,000 --> 02:37:28,000
对

4878
02:37:28,000 --> 02:37:30,000
而且长得丑

4879
02:37:30,000 --> 02:37:31,000
但其实也不能一个人论诺对吧

4880
02:37:31,000 --> 02:37:34,000
比如说 App Store 里面

4881
02:37:34,000 --> 02:37:37,000
同样有非常多丑的令人发指的 App

4882
02:37:37,000 --> 02:37:39,000
而那个安装的下面

4883
02:37:39,000 --> 02:37:41,000
也的确有比较精美的

4884
02:37:41,000 --> 02:37:43,000
肯定是有这个什么例外

4885
02:37:43,000 --> 02:37:44,000
反正永远是存在的

4886
02:37:44,000 --> 02:37:47,000
但我承认你说的有道理

4887
02:37:47,000 --> 02:37:48,000
就是开发者的

4888
02:37:48,000 --> 02:37:50,000
如果面对一个丑陋的工具

4889
02:37:50,000 --> 02:37:52,000
做出来的东西很有可能也是丑陋

4890
02:37:52,000 --> 02:37:53,000
什么进猪叫吃吗

4891
02:37:54,000 --> 02:37:55,000
进魔叫黑

4892
02:37:56,000 --> 02:37:56,000
对

4893
02:37:56,000 --> 02:37:57,000
远离 Xcode

4894
02:37:57,000 --> 02:37:58,000
珍爱生命

4895
02:38:00,000 --> 02:38:00,000
别这样

4896
02:38:00,000 --> 02:38:01,000
别这样

4897
02:38:01,000 --> 02:38:04,000
不过如果说你是一个 Java 开发者

4898
02:38:04,000 --> 02:38:07,000
然后你想要尝试

4899
02:38:08,000 --> 02:38:09,000
一款 IDE 的话

4900
02:38:10,000 --> 02:38:12,000
如果没有现有那个

4901
02:38:12,000 --> 02:38:15,000
如果没有现有项目的限制

4902
02:38:16,000 --> 02:38:18,000
真的 IntelliJ 基本上是

4903
02:38:19,000 --> 02:38:20,000
非常适合的一个选择

4904
02:38:20,000 --> 02:38:21,000
我觉得

4905
02:38:22,000 --> 02:38:22,000
因为

4906
02:38:23,000 --> 02:38:24,000
或者说在 Java 开发

4907
02:38:24,000 --> 02:38:25,000
就以我有限的

4908
02:38:25,000 --> 02:38:27,000
粗显的 Java 开发经验来看

4909
02:38:27,000 --> 02:38:29,000
IntelliJ NetBeans Eclipse

4910
02:38:29,000 --> 02:38:31,000
基本上是三大

4911
02:38:31,000 --> 02:38:33,000
最常被用到的战外定义

4912
02:38:33,000 --> 02:38:34,000
而在这里面

4913
02:38:34,000 --> 02:38:36,000
IntelliJ 算是一个非常用心做的产品

4914
02:38:37,000 --> 02:38:40,000
而且 IntelliJ 背后的公司

4915
02:38:41,000 --> 02:38:41,000
叫什么

4916
02:38:41,000 --> 02:38:42,000
JetBrains

4917
02:38:42,000 --> 02:38:44,000
他们还做了很多其他的

4918
02:38:44,000 --> 02:38:45,000
很惊讶的产品

4919
02:38:45,000 --> 02:38:46,000
比如说

4920
02:38:46,000 --> 02:38:48,000
有 PHP 的 PHP Storm

4921
02:38:48,000 --> 02:38:52,000
还有 C++的叫做

4922
02:38:53,000 --> 02:38:54,000
C-Line

4923
02:38:55,000 --> 02:38:57,000
不是海诗的 C-Line

4924
02:38:57,000 --> 02:38:58,000
而是 C

4925
02:38:58,000 --> 02:38:59,000
然后 Line

4926
02:38:59,000 --> 02:39:00,000
就是 C 诗字

4927
02:39:01,000 --> 02:39:02,000
然后还有

4928
02:39:02,000 --> 02:39:04,000
包括 JetBrains 还做了一款

4929
02:39:04,000 --> 02:39:06,000
Object-C 的 ID

4930
02:39:06,000 --> 02:39:09,000
我觉得这个也很让人震惊

4931
02:39:09,000 --> 02:39:09,000
就是

4932
02:39:10,000 --> 02:39:11,000
就是 Object-C 开发者

4933
02:39:11,000 --> 02:39:12,000
对

4934
02:39:12,000 --> 02:39:14,000
MAC 开发者本身就已经是一个小群体了

4935
02:39:14,000 --> 02:39:15,000
对

4936
02:39:15,000 --> 02:39:17,000
而这个小群体里面

4937
02:39:17,000 --> 02:39:18,000
再分一倍

4938
02:39:18,000 --> 02:39:22,000
用 Xcode 这种手握其谁的工具的人

4939
02:39:22,000 --> 02:39:23,000
其实

4940
02:39:24,000 --> 02:39:26,000
其实也习惯了没有选择

4941
02:39:26,000 --> 02:39:28,000
而你居然为这么一群人

4942
02:39:28,000 --> 02:39:30,000
开发出了这么一款 ID 来

4943
02:39:30,000 --> 02:39:32,000
而且我用了用感觉还不错

4944
02:39:32,000 --> 02:39:33,000
也挺难得的

4945
02:39:34,000 --> 02:39:35,000
刚才你也说了

4946
02:39:35,000 --> 02:39:36,000
Xcode 有那么多问题

4947
02:39:36,000 --> 02:39:38,000
所以它能做一个

4948
02:39:38,000 --> 02:39:40,000
alternative 应该是挺好的

4949
02:39:40,000 --> 02:39:41,000
没错

4950
02:39:41,000 --> 02:39:43,000
然后 JetBrains 还有 Python 的 ID

4951
02:39:43,000 --> 02:39:45,000
就是 Python 如果我一定要用一个 ID 的话

4952
02:39:45,000 --> 02:39:47,000
我应该会首先想到

4953
02:39:50,000 --> 02:39:53,000
JetBrains 出的叫做 PYcharm 的 ID

4954
02:39:53,000 --> 02:39:54,000
也是蛮好的

4955
02:39:55,000 --> 02:39:55,000
对

4956
02:39:56,000 --> 02:39:58,000
Pycharm 也是他们出的原来

4957
02:39:58,000 --> 02:39:59,000
Pycharm 是他们出的

4958
02:39:59,000 --> 02:40:01,000
我知道这个好像知道

4959
02:40:01,000 --> 02:40:04,000
还有不少 Python 的用户在用这个

4960
02:40:04,000 --> 02:40:04,000
对

4961
02:40:04,000 --> 02:40:05,000
相当好用其实

4962
02:40:05,000 --> 02:40:05,000
对

4963
02:40:06,000 --> 02:40:09,000
InteliJ 支持多种配色

4964
02:40:09,000 --> 02:40:10,000
然后要比 Eclipse 快很多

4965
02:40:10,000 --> 02:40:11,000
这是很关键点

4966
02:40:11,000 --> 02:40:13,000
比 Eclipse 快很多

4967
02:40:13,000 --> 02:40:18,000
然后它的智能补全也是相当的聪明

4968
02:40:19,000 --> 02:40:21,000
最大的问题可能就是 InteliJ 本身有两个版本

4969
02:40:21,000 --> 02:40:22,000
一个是社区版

4970
02:40:22,000 --> 02:40:23,000
免费的

4971
02:40:23,000 --> 02:40:25,000
但是缺乏很多功能

4972
02:40:25,000 --> 02:40:25,000
比如说

4973
02:40:26,000 --> 02:40:28,000
尤其是你要做 ZIE 开发的话

4974
02:40:28,000 --> 02:40:30,000
你要用到很多

4975
02:40:31,000 --> 02:40:31,000
就 whatever

4976
02:40:31,000 --> 02:40:33,000
奇奇怪怪的功能

4977
02:40:33,000 --> 02:40:34,000
那个

4978
02:40:35,000 --> 02:40:36,000
CE 版本是没有

4979
02:40:36,000 --> 02:40:37,000
Community Edition 是没有的

4980
02:40:37,000 --> 02:40:39,000
你必须花钱去买

4981
02:40:39,000 --> 02:40:39,000
那个

4982
02:40:40,000 --> 02:40:41,000
InteliJ 的

4983
02:40:41,000 --> 02:40:43,000
它是 Dual License

4984
02:40:43,000 --> 02:40:44,000
对 Dual License

4985
02:40:44,000 --> 02:40:46,000
当然你可以以学生身份去买

4986
02:40:46,000 --> 02:40:48,000
应该可以

4987
02:40:48,000 --> 02:40:49,000
要不你帮我买一个

4988
02:40:49,000 --> 02:40:50,000
可以

4989
02:40:50,000 --> 02:40:51,000
回头我给你钱帮我买一个

4990
02:40:51,000 --> 02:40:51,000
好

4991
02:40:51,000 --> 02:40:52,000
我还挺想弄一个

4992
02:40:52,000 --> 02:40:55,000
当然我将来做 JY 的可能性也为乎其非

4993
02:40:55,000 --> 02:40:56,000
不过

4994
02:40:57,000 --> 02:40:57,000
对

4995
02:40:57,000 --> 02:41:01,000
JY Brace 曾经在 2012 年的时候

4996
02:41:01,000 --> 02:41:02,000
搞过一个大促销

4997
02:41:02,000 --> 02:41:02,000
就是

4998
02:41:03,000 --> 02:41:05,000
世界毁灭的那一天

4999
02:41:06,000 --> 02:41:06,000
传言

5000
02:41:06,000 --> 02:41:08,000
蚂蚁人说世界要毁灭的一天

5001
02:41:08,000 --> 02:41:09,000
他们搞了一个大促销

5002
02:41:09,000 --> 02:41:10,000
所有的

5003
02:41:12,000 --> 02:41:13,000
IDE 的 License

5004
02:41:14,000 --> 02:41:15,000
好像统一价

5005
02:41:15,000 --> 02:41:15,000
五收还是多少

5006
02:41:15,000 --> 02:41:16,000
我就可以买下来

5007
02:41:16,000 --> 02:41:17,000
我非常后悔

5008
02:41:17,000 --> 02:41:18,000
错过那次大促销

5009
02:41:18,000 --> 02:41:19,000
如果世界都毁灭了

5010
02:41:19,000 --> 02:41:21,000
你买个 License 干什么

5011
02:41:23,000 --> 02:41:24,000
说点事

5012
02:41:24,000 --> 02:41:26,000
当时就赌了一把赌书

5013
02:41:26,000 --> 02:41:27,000
世界没有毁灭

5014
02:41:27,000 --> 02:41:28,000
我很伤心

5015
02:41:28,000 --> 02:41:29,000
Lier Lier

5016
02:41:32,000 --> 02:41:33,000
OK

5017
02:41:33,000 --> 02:41:33,000
对

5018
02:41:33,000 --> 02:41:34,000
还有吗

5019
02:41:34,000 --> 02:41:34,000
差不多这期

5020
02:41:35,000 --> 02:41:35,000
没有了

5021
02:41:35,000 --> 02:41:36,000
对

5022
02:41:36,000 --> 02:41:37,000
我们本来还想说一下

5023
02:41:37,000 --> 02:41:39,000
就是简单的说一下

5024
02:41:39,000 --> 02:41:41,000
应该选择编辑器还是选择 IDE

5025
02:41:41,000 --> 02:41:43,000
如果你是一个编程出血者的话

5026
02:41:43,000 --> 02:41:43,000
这个

5027
02:41:44,000 --> 02:41:46,000
其实也不方便展开了

5028
02:41:46,000 --> 02:41:48,000
我觉得简单一句话就是

5029
02:41:48,000 --> 02:41:49,000
选你觉得舒服一点

5030
02:41:49,000 --> 02:41:51,000
一个方式吧

5031
02:41:51,000 --> 02:41:52,000
因为

5032
02:41:52,000 --> 02:41:53,000
有时候我觉得

5033
02:41:54,000 --> 02:41:56,000
有些人喜欢 IDE 的原因

5034
02:41:56,000 --> 02:41:57,000
其实就是 IDE

5035
02:41:57,000 --> 02:41:58,000
有一种仪式感

5036
02:41:58,000 --> 02:41:59,000
就是你打开 IDE

5037
02:41:59,000 --> 02:42:00,000
你会觉得自己

5038
02:42:00,000 --> 02:42:01,000
切换到那种工作的状态

5039
02:42:02,000 --> 02:42:04,000
而你仅仅使用一个单独的编辑器的话

5040
02:42:04,000 --> 02:42:05,000
你好像

5041
02:42:05,000 --> 02:42:06,000
我都要在干嘛

5042
02:42:06,000 --> 02:42:06,000
玩骗子

5043
02:42:06,000 --> 02:42:07,000
写这么一个

5044
02:42:07,000 --> 02:42:08,000
对

5045
02:42:08,000 --> 02:42:09,000
写好像一个文件

5046
02:42:09,000 --> 02:42:11,000
在编辑器里面出现

5047
02:42:11,000 --> 02:42:13,000
和在 IDE 里面出现

5048
02:42:13,000 --> 02:42:14,000
或者甚至说

5049
02:42:14,000 --> 02:42:16,000
在一个编辑器的编辑窗口里面出现

5050
02:42:16,000 --> 02:42:18,000
和在一个 IDE 的所谓

5051
02:42:18,000 --> 02:42:20,000
什么工程管理器里面出现

5052
02:42:20,000 --> 02:42:21,000
装重感不一样的

5053
02:42:21,000 --> 02:42:23,000
对 装重感是不一样的

5054
02:42:23,000 --> 02:42:26,000
这个细小的心理上的差别

5055
02:42:26,000 --> 02:42:27,000
其实还是挺重要的

5056
02:42:28,000 --> 02:42:28,000
对

5057
02:42:29,000 --> 02:42:30,000
你是

5058
02:42:30,000 --> 02:42:32,000
我觉得你应该是会选择编辑器吧

5059
02:42:32,000 --> 02:42:35,000
我没有需要用到 IDE 的场合起码

5060
02:42:35,000 --> 02:42:36,000
对 这也是

5061
02:42:36,000 --> 02:42:37,000
对 所以没有需求

5062
02:42:37,000 --> 02:42:37,000
也许有一天你

5063
02:42:38,000 --> 02:42:40,000
你终于走入这工业界

5064
02:42:41,000 --> 02:42:43,000
你会觉得 IDE 是一个

5065
02:42:45,000 --> 02:42:47,000
你 unlove it and hate it

5066
02:42:48,000 --> 02:42:49,000
对 就是

5067
02:42:49,000 --> 02:42:50,000
又爱又恨的这种感觉

5068
02:42:51,000 --> 02:42:53,000
好吧 我再想象一下

5069
02:42:53,000 --> 02:42:53,000
会有什么场合

5070
02:42:53,000 --> 02:42:54,000
我们最

5071
02:42:55,000 --> 02:42:57,000
可能目前最靠谱的场合是

5072
02:42:57,000 --> 02:42:58,000
因为我一直想学

5073
02:42:59,000 --> 02:43:00,000
LS 开发

5074
02:43:00,000 --> 02:43:01,000
然后可能会接触

5075
02:43:01,000 --> 02:43:03,000
其实 Xcode 之前也已经用过了

5076
02:43:03,000 --> 02:43:04,000
就是写作业的时候

5077
02:43:04,000 --> 02:43:06,000
还有那个 Eclipse 也用

5078
02:43:06,000 --> 02:43:08,000
就是给别人改

5079
02:43:08,000 --> 02:43:09,000
耗别人作业的时候用

5080
02:43:09,000 --> 02:43:11,000
Visual Studio 好像还没有碰过

5081
02:43:11,000 --> 02:43:12,000
不过你不打算碰了

5082
02:43:12,000 --> 02:43:13,000
但是就

5083
02:43:13,000 --> 02:43:15,000
这两个来讲可能 Xcode 会是

5084
02:43:15,000 --> 02:43:16,000
如果要用 IDE 的话

5085
02:43:16,000 --> 02:43:17,000
可能会是 Xcode

5086
02:43:18,000 --> 02:43:19,000
嗯

5087
02:43:19,000 --> 02:43:21,000
可以去试一下

5088
02:43:21,000 --> 02:43:22,000
我希望

5089
02:43:22,000 --> 02:43:23,000
太烦了

5090
02:43:23,000 --> 02:43:24,000
等我用到的时候

5091
02:43:24,000 --> 02:43:26,000
它不要再那么不稳定了

5092
02:43:26,000 --> 02:43:27,000
好 falling

5093
02:43:28,000 --> 02:43:30,000
对 你就最好坚持用

5094
02:43:30,000 --> 02:43:32,000
那个比较不稳定的版本

5095
02:43:32,000 --> 02:43:33,000
而不要用那个更不稳定的版本

5096
02:43:33,000 --> 02:43:35,000
我这个我一般还是

5097
02:43:35,000 --> 02:43:36,000
选择不折腾的

5098
02:43:36,000 --> 02:43:37,000
就是一定用

5099
02:43:37,000 --> 02:43:39,000
官方发布的稳定版什么

5100
02:43:39,000 --> 02:43:41,000
Developer preview 什么

5101
02:43:41,000 --> 02:43:42,000
离我远一点

5102
02:43:42,000 --> 02:43:45,000
对 Xcode 用户最悲惨的时刻

5103
02:43:45,000 --> 02:43:46,000
莫过于苹果说

5104
02:43:46,000 --> 02:43:47,000
Xcode 新版出了

5105
02:43:47,000 --> 02:43:48,000
请你升级

5106
02:43:48,000 --> 02:43:50,000
升级之后我发现它一直 crush

5107
02:43:52,000 --> 02:43:53,000
对这是一个

5108
02:43:53,000 --> 02:43:55,000
非常令人讨厌的事情

5109
02:43:57,000 --> 02:43:57,000
好吧

5110
02:43:57,000 --> 02:43:58,000
那今天先这样

5111
02:43:58,000 --> 02:43:58,000
好吧

5112
02:43:58,000 --> 02:43:59,000
这一次

5113
02:43:59,000 --> 02:44:00,000
时间也蛮长的

5114
02:44:00,000 --> 02:44:02,000
不知道最后会剪出来多久

5115
02:44:05,000 --> 02:44:06,000
非常凑巧的是

5116
02:44:06,000 --> 02:44:09,000
本期节目录制完成之后的周三

5117
02:44:09,000 --> 02:44:11,000
也就是 11 月 12 日

5118
02:44:11,000 --> 02:44:16,000
微软将其.net 平台的服务器端开源

5119
02:44:16,000 --> 02:44:18,000
并且宣传会扩展

5120
02:44:18,000 --> 02:44:23,000
支持 Linux 和 MacOS 平台

5121
02:44:23,000 --> 02:44:24,000
与此同时

5122
02:44:24,000 --> 02:44:28,000
为我们提到的这个 Visual Studio 也推出了一个叫做

5123
02:44:28,000 --> 02:44:30,000
Community Edition

5124
02:44:30,000 --> 02:44:33,000
Community Edition 2013 的版本

5125
02:44:35,000 --> 02:44:36,000
它是免费的

5126
02:44:36,000 --> 02:44:37,000
对

5127
02:44:37,000 --> 02:44:38,000
所以

5128
02:44:38,000 --> 02:44:41,000
我跟 Ryo 大概也都会去下载

5129
02:44:41,000 --> 02:44:43,000
然后试着用一下

5130
02:44:43,000 --> 02:44:44,000
看看观感如何

