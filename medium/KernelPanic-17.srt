1
00:00:00,000 --> 00:00:05,000
您正在收听的是 IPN Podcast 网络旗下的 IT 技术主题节目内核恐慌

2
00:00:05,000 --> 00:00:07,000
我们号称 Hardcore 但是也没有干货

3
00:00:07,000 --> 00:00:09,000
想听能听不想听就别听

4
00:00:09,000 --> 00:00:12,000
内核恐慌的网址是 ipn.li.kernelpanic

5
00:00:12,000 --> 00:00:16,000
我们推荐大家使用 Podcast 客户端订阅我们的节目

6
00:00:16,000 --> 00:00:18,000
如果您不知道该用什么客户端

7
00:00:18,000 --> 00:00:21,000
欢迎访问 ipn.li.faq

8
00:00:21,000 --> 00:00:22,000
欢迎你为我们的节目捐款

9
00:00:22,000 --> 00:00:26,000
捐款地址是 ipn.li.kernelpanic.donate

10
00:00:26,000 --> 00:00:28,000
捐款金额随意

11
00:00:28,000 --> 00:00:31,000
只要是能为 8 整出的正整数就可以

12
00:00:31,000 --> 00:00:32,000
捐款不会为你带来什么

13
00:00:32,000 --> 00:00:34,000
不捐也不会让你失去什么

14
00:00:37,000 --> 00:00:39,000
首先欢迎 Rail 回来

15
00:00:39,000 --> 00:00:40,000
耶

16
00:00:40,000 --> 00:00:42,000
之前病了

17
00:00:42,000 --> 00:00:43,000
缺席了一期

18
00:00:43,000 --> 00:00:44,000
积劳成疾嘛

19
00:00:46,000 --> 00:00:47,000
搬家嘛

20
00:00:47,000 --> 00:00:48,000
就这样子

21
00:00:49,000 --> 00:00:50,000
事情折腾

22
00:00:50,000 --> 00:00:51,000
搬家穷三年

23
00:00:52,000 --> 00:00:55,000
那个我们今天节目还是先念一下

24
00:00:55,000 --> 00:00:59,000
就之前我们做到了一些听众反馈的节选吧

25
00:01:00,000 --> 00:01:04,000
对其实我们两期没做听众反馈了

26
00:01:04,000 --> 00:01:07,000
所以可能有一个月没有

27
00:01:08,000 --> 00:01:11,000
反省一下我们之前犯过什么错误

28
00:01:12,000 --> 00:01:16,000
但是最近没有听众指出我们读音的错误

29
00:01:16,000 --> 00:01:18,000
我觉得这也是一件好事

30
00:01:18,000 --> 00:01:20,000
要么我们读音开始没有错误了

31
00:01:20,000 --> 00:01:22,000
要么就是听众们开始放弃了

32
00:01:23,000 --> 00:01:24,000
OK

33
00:01:24,000 --> 00:01:26,000
先开始读一篇听众反馈

34
00:01:26,000 --> 00:01:27,000
好

35
00:01:27,000 --> 00:01:29,000
就是有一个叫刘春的朋友

36
00:01:29,000 --> 00:01:30,000
我应该是叫刘春吧

37
00:01:30,000 --> 00:01:32,000
我觉得怎么写的话

38
00:01:33,000 --> 00:01:34,000
他这么写的哈

39
00:01:34,000 --> 00:01:36,000
刚刚听了病发与异步这期

40
00:01:36,000 --> 00:01:38,000
比较赞同吴涛的点子

41
00:01:38,000 --> 00:01:41,000
就是提前公布你们希望讨论的主题

42
00:01:41,000 --> 00:01:43,000
让大家可以参与公信 idea

43
00:01:43,000 --> 00:01:44,000
哎你觉得这个怎么样

44
00:01:45,000 --> 00:01:50,000
但是我那期说了之后就发现好像

45
00:01:51,000 --> 00:01:54,000
提前公布我们希望讨论的主题怎么公布

46
00:01:54,000 --> 00:01:56,000
是我们这一期就要公布下一期的主题吗

47
00:01:56,000 --> 00:01:59,000
好像来好像没有提前准备是吧

48
00:01:59,000 --> 00:02:01,000
事实事实上的状况就是

49
00:02:01,000 --> 00:02:03,000
我们这一期都不知道下一期要讲什么

50
00:02:04,000 --> 00:02:06,000
虽然这件事情不现实

51
00:02:06,000 --> 00:02:06,000
这不行啊说实话

52
00:02:06,000 --> 00:02:10,000
我们应该一下子就把后半年的主题全都介绍好

53
00:02:10,000 --> 00:02:11,000
弄一个列表

54
00:02:11,000 --> 00:02:13,000
然后大家去自己去下面填充好了

55
00:02:14,000 --> 00:02:18,000
对然后在可能拍那个网站上面发出来

56
00:02:18,000 --> 00:02:22,000
就是哪一些话题可能

57
00:02:22,000 --> 00:02:25,000
然后如果讲的话可以

58
00:02:25,000 --> 00:02:28,000
可以讨论哪方面的问题

59
00:02:28,000 --> 00:02:33,000
但是请不要在下面写请谁谁当嘉宾

60
00:02:33,000 --> 00:02:35,000
就我们应该是请不到

61
00:02:35,000 --> 00:02:36,000
完全没有办法保证

62
00:02:37,000 --> 00:02:37,000
对

63
00:02:39,000 --> 00:02:40,000
继续好

64
00:02:40,000 --> 00:02:44,000
那我接着念这个刘春这个朋友带的这个反馈

65
00:02:45,000 --> 00:02:47,000
说到数据统计和分析

66
00:02:47,000 --> 00:02:49,000
或者更宽泛的 data science

67
00:02:49,000 --> 00:02:53,000
其实学数学的人比纯粹的程序员有太大的优势了

68
00:02:53,000 --> 00:02:55,000
这一点我深有体会

69
00:02:55,000 --> 00:02:59,000
通常一个 data science 项目总是会包括

70
00:02:59,000 --> 00:03:01,000
总是会包括数据收集

71
00:03:01,000 --> 00:03:04,000
进化转换处理分析建模

72
00:03:04,000 --> 00:03:05,000
对程序员来说

73
00:03:05,000 --> 00:03:07,000
对数据的操作基本不是事

74
00:03:07,000 --> 00:03:09,000
再加上像现在

75
00:03:09,000 --> 00:03:13,000
像 Azure Machine Learning Studio 这样的工具

76
00:03:13,000 --> 00:03:15,000
基本连编程都不用就搞定了

77
00:03:15,000 --> 00:03:18,000
可是建模分析就是一个极大的挑战了

78
00:03:18,000 --> 00:03:20,000
选择什么样的算法是有效的

79
00:03:20,000 --> 00:03:22,000
什么算法是最优的

80
00:03:22,000 --> 00:03:24,000
针对特定的问题

81
00:03:24,000 --> 00:03:25,000
算法应该如何调整

82
00:03:25,000 --> 00:03:29,000
这些问题如果没有足够的数学基础无法回答

83
00:03:29,000 --> 00:03:31,000
而模型的好坏

84
00:03:31,000 --> 00:03:33,000
直接决定了你的分析是否有效

85
00:03:33,000 --> 00:03:36,000
可惜你们不打算讨论温暖技术了

86
00:03:36,000 --> 00:03:40,000
否则有些我们可以讨论一下 Azure Machine Learning

87
00:03:40,000 --> 00:03:44,000
比较 R 和 Python 在 Data Science 方面的长短

88
00:03:45,000 --> 00:03:47,000
就是他的来信的全文

89
00:03:49,000 --> 00:03:50,000
你怎么看

90
00:03:52,000 --> 00:03:54,000
其实我们是

91
00:03:54,000 --> 00:03:57,000
我们嘴上说不打算讨论温暖技术的

92
00:03:58,000 --> 00:04:00,000
但本期主要讨论温暖技术

93
00:04:02,000 --> 00:04:05,000
嘴上说不要身体学很诚实是不是

94
00:04:07,000 --> 00:04:09,000
我们不是不打算

95
00:04:09,000 --> 00:04:12,000
我们是不打算讨论温暖技术

96
00:04:12,000 --> 00:04:14,000
但是实际上温暖技术是绕不开的

97
00:04:14,000 --> 00:04:15,000
在今天

98
00:04:15,000 --> 00:04:16,000
而且

99
00:04:17,000 --> 00:04:19,000
我不知道你有没有这种感觉

100
00:04:19,000 --> 00:04:23,000
就是挥别了巴尔默的中世纪的黑暗时代之后

101
00:04:23,000 --> 00:04:25,000
微软可能要开始唯一复兴了

102
00:04:26,000 --> 00:04:27,000
老树缝春

103
00:04:28,000 --> 00:04:29,000
对

104
00:04:31,000 --> 00:04:33,000
很可能微软又要开始大方一采了

105
00:04:33,000 --> 00:04:33,000
但

106
00:04:34,000 --> 00:04:36,000
现在说这种话还没试过早

107
00:04:36,000 --> 00:04:37,000
不过有一件事情是肯定的

108
00:04:37,000 --> 00:04:38,000
就是想要绕开微软

109
00:04:38,000 --> 00:04:40,000
其实是很难的一件事情

110
00:04:41,000 --> 00:04:44,000
我觉得咱们两个背景可能都是决定了

111
00:04:44,000 --> 00:04:45,000
就屁股决定脑袋

112
00:04:46,000 --> 00:04:48,000
我们两个都是微软阵营之外的人

113
00:04:48,000 --> 00:04:52,000
所以有时候说起来微软问题总会有那种隔绝骚扰的感觉

114
00:04:53,000 --> 00:04:53,000
但是

115
00:04:54,000 --> 00:04:55,000
也没什么办法

116
00:04:55,000 --> 00:04:55,000
就

117
00:04:57,000 --> 00:04:59,000
也就因为主持人就我俩了

118
00:04:59,000 --> 00:04:59,000
对吧

119
00:04:59,000 --> 00:05:01,000
就你也不可能

120
00:05:01,000 --> 00:05:03,000
你也不可能指望我们两个去搞微软的什么事情

121
00:05:03,000 --> 00:05:05,000
因为毕竟不是混着什么饭吃的

122
00:05:05,000 --> 00:05:06,000
何必呢

123
00:05:06,000 --> 00:05:07,000
所以

124
00:05:08,000 --> 00:05:09,000
当我们讨论微软问题的时候

125
00:05:09,000 --> 00:05:11,000
就大家就当娱乐节目来听听话

126
00:05:12,000 --> 00:05:14,000
而且事实上我们这一期是要讨论微软技术

127
00:05:14,000 --> 00:05:15,000
yeah ok

128
00:05:16,000 --> 00:05:19,000
然后 data science 这个主题

129
00:05:19,000 --> 00:05:20,000
我们其实计划很久了

130
00:05:20,000 --> 00:05:21,000
但是

131
00:05:22,000 --> 00:05:24,000
暂时还没有找到一个合适的嘉宾

132
00:05:25,000 --> 00:05:27,000
我们想把这期做好

133
00:05:27,000 --> 00:05:30,000
所以就反正要就多跳几期的票吧

134
00:05:30,000 --> 00:05:31,000
对

135
00:05:31,000 --> 00:05:31,000
您劝我呢

136
00:05:31,000 --> 00:05:32,000
讲了肯定会讲

137
00:05:33,000 --> 00:05:33,000
对

138
00:05:34,000 --> 00:05:38,000
然后我再来念下一条反馈

139
00:05:39,000 --> 00:05:39,000
嗯

140
00:05:40,000 --> 00:05:43,000
这是来自一位叫做

141
00:05:44,000 --> 00:05:47,000
virgil 名的同学

142
00:05:47,000 --> 00:05:49,000
virgil 梅吉尔就是那个

143
00:05:50,000 --> 00:05:51,000
诗人的名字

144
00:05:51,000 --> 00:05:52,000
嗯

145
00:05:53,000 --> 00:05:54,000
这一期应该是

146
00:05:54,000 --> 00:05:58,000
这个反馈应该是针对我们提到 I like rabbits 的那一期

147
00:05:58,000 --> 00:05:59,000
两位主播

148
00:05:59,000 --> 00:06:03,000
虽然 I like rabbits 听起来只是另一外一个版本的 freelancer

149
00:06:03,000 --> 00:06:04,000
但是我注意到

150
00:06:05,000 --> 00:06:10,000
这个网站声称他们只解决 small well defined programming task

151
00:06:10,000 --> 00:06:12,000
正如节目中提到的

152
00:06:12,000 --> 00:06:14,000
把需求明确到的这种程度

153
00:06:14,000 --> 00:06:17,000
其实已经完成了工作中的绝大部分

154
00:06:17,000 --> 00:06:18,000
最终只是需要找到胶水

155
00:06:18,000 --> 00:06:20,000
让需求的模块跑起来而已

156
00:06:20,000 --> 00:06:22,000
而程序员们并不缺胶水

157
00:06:23,000 --> 00:06:26,000
well defined 本身作为迁移的概念

158
00:06:26,000 --> 00:06:27,000
难以保留原有的严谨

159
00:06:28,000 --> 00:06:30,000
数学上对于运算符合函数

160
00:06:30,000 --> 00:06:34,000
对于是否 well defined 都有形式上非常精确的判断

161
00:06:35,000 --> 00:06:36,000
而产品经理

162
00:06:36,000 --> 00:06:37,000
这个用法

163
00:06:38,000 --> 00:06:39,000
这个说法可能不是很精确

164
00:06:39,000 --> 00:06:41,000
可能客户只需要一个轮子

165
00:06:41,000 --> 00:06:42,000
缠不上产品

166
00:06:42,000 --> 00:06:44,000
所以产品经理这个

167
00:06:44,000 --> 00:06:45,000
呃

168
00:06:45,000 --> 00:06:47,000
错词应该是要加一号了

169
00:06:47,000 --> 00:06:49,000
产品经理对于一个功能的定义

170
00:06:49,000 --> 00:06:51,000
很难做到形式上的精确

171
00:06:51,000 --> 00:06:54,000
如同算法课上我们碰到的代码那样

172
00:06:54,000 --> 00:06:56,000
可以用于证明各种的

173
00:06:56,000 --> 00:06:58,000
呃可以用于证明正确性

174
00:06:58,000 --> 00:07:02,000
我相信他们的客服要和客户来往好几次邮件

175
00:07:02,000 --> 00:07:03,000
才能明确

176
00:07:03,000 --> 00:07:04,000
具体要做什么

177
00:07:05,000 --> 00:07:07,000
但是当然这对客户也是好事

178
00:07:07,000 --> 00:07:09,000
而这让我想到了 Wolfram Alpha

179
00:07:10,000 --> 00:07:12,000
这个服务刚刚出现在媒体报道上的时候

180
00:07:12,000 --> 00:07:14,000
引起了不小的关注

181
00:07:14,000 --> 00:07:16,000
但是从 Google Trend

182
00:07:16,000 --> 00:07:19,000
我们可以看到他两个月之后的热度就下降

183
00:07:19,000 --> 00:07:21,000
下降到了顶点的 10%

184
00:07:22,000 --> 00:07:23,000
之后他的热度按年

185
00:07:24,000 --> 00:07:25,000
呈现周期变化

186
00:07:25,000 --> 00:07:28,000
在春季和秋季各达到一次高峰

187
00:07:30,000 --> 00:07:32,000
我的 wild gas 是大部分的热度

188
00:07:32,000 --> 00:07:35,000
来自于需要完成代数作业的学生

189
00:07:37,000 --> 00:07:40,000
他说在本校这个情况相当的普遍

190
00:07:42,000 --> 00:07:45,000
而 Wolfram Alpha 通过程序得到结果

191
00:07:45,000 --> 00:07:47,000
I like rabbits 这通过人工

192
00:07:47,000 --> 00:07:51,000
假定 Rabbits 的客户都提出 wild-define 的需求

193
00:07:51,000 --> 00:07:52,000
不需要客户问

194
00:07:52,000 --> 00:07:54,000
您是不是要怎么怎么样

195
00:07:54,000 --> 00:07:58,000
那么为什么不能让程序代办 Rabbits 后面的工作呢

196
00:07:59,000 --> 00:08:01,000
尽管 NLP 是一个 National Language Processing

197
00:08:01,000 --> 00:08:03,000
是一个复杂到极点的工作

198
00:08:04,000 --> 00:08:05,000
但是应当可以假设

199
00:08:05,000 --> 00:08:07,000
比如描述一些问题的语言

200
00:08:07,000 --> 00:08:09,000
只是其中一个很小的紫集

201
00:08:09,000 --> 00:08:12,000
它不需要或者只需要很少的清晰

202
00:08:12,000 --> 00:08:15,000
就能够方便的解析为语法数

203
00:08:15,000 --> 00:08:16,000
比如

204
00:08:16,000 --> 00:08:21,000
抓取我站点上所有每日 pageview 超过 100 的页面

205
00:08:22,000 --> 00:08:25,000
可以被解析为 fetch my site.com

206
00:08:26,000 --> 00:08:31,000
is page greater than pageview per day 100

207
00:08:31,000 --> 00:08:33,000
它是用 Lisp 的语法写的

208
00:08:33,000 --> 00:08:34,000
但是它是写了一个语法数

209
00:08:35,000 --> 00:08:35,000
然后

210
00:08:37,000 --> 00:08:38,000
他说有很多条件

211
00:08:38,000 --> 00:08:40,000
比如说生成 ruby 的目标代码

212
00:08:40,000 --> 00:08:43,000
可以从 Google Analytics 去提取 pageview

213
00:08:44,000 --> 00:08:46,000
静态页面统一使用 slash 结尾

214
00:08:46,000 --> 00:08:47,000
没有扩展名等等等等

215
00:08:48,000 --> 00:08:50,000
而这些作为语法数的可选部分

216
00:08:50,000 --> 00:08:51,000
肯定要留给默认值

217
00:08:51,000 --> 00:08:55,000
然后给语法数里面每个元素写 EVO

218
00:08:55,000 --> 00:08:57,000
然后把它们拼接起来

219
00:08:58,000 --> 00:08:59,000
这一步才是最难的

220
00:08:59,000 --> 00:09:01,000
就大概就像那期 XKCD

221
00:09:01,000 --> 00:09:03,000
我需要一个国家级的实验室

222
00:09:03,000 --> 00:09:04,000
数十个博士

223
00:09:05,000 --> 00:09:06,000
数年的时间

224
00:09:06,000 --> 00:09:08,000
数一百万计的美元

225
00:09:08,000 --> 00:09:10,000
茫茫多的边界约束

226
00:09:10,000 --> 00:09:12,000
函数逻辑参数类型

227
00:09:13,000 --> 00:09:15,000
但至少这是一个很少的

228
00:09:15,000 --> 00:09:17,000
但至少是一个可以计算的问题

229
00:09:17,000 --> 00:09:19,000
而且很可能 AI 发展到这种程度的时候

230
00:09:19,000 --> 00:09:22,000
这一级的逻辑大部分也是由程序生成的

231
00:09:22,000 --> 00:09:24,000
可以自身净化

232
00:09:24,000 --> 00:09:26,000
人工只是一定的 supervation

233
00:09:27,000 --> 00:09:28,000
supervation

234
00:09:30,000 --> 00:09:33,000
我一直是个人工智能领域的票友

235
00:09:33,000 --> 00:09:34,000
我喜欢这种畅想

236
00:09:34,000 --> 00:09:35,000
它让我感到放松

237
00:09:36,000 --> 00:09:37,000
谢谢两位带来节目

238
00:09:37,000 --> 00:09:41,000
刚才他念的可能有点乱吧

239
00:09:41,000 --> 00:09:43,000
这位听众的主要意思就是

240
00:09:43,000 --> 00:09:44,000
他觉得 I like rabbits

241
00:09:44,000 --> 00:09:49,000
其实是一个可以通过人工智能完成的

242
00:09:50,000 --> 00:09:51,000
网站

243
00:09:53,000 --> 00:09:55,000
本质上我觉得他的说法固然没错

244
00:09:55,000 --> 00:09:58,000
但是在今天显示做不到的

245
00:10:00,000 --> 00:10:01,000
还是有点远

246
00:10:01,000 --> 00:10:02,000
但是我觉得

247
00:10:02,000 --> 00:10:05,000
但是起码觉得他至少就指出了

248
00:10:05,000 --> 00:10:06,000
上次我们聊的那个他的一个

249
00:10:06,000 --> 00:10:07,000
这个东西

250
00:10:07,000 --> 00:10:08,000
I like rabbit 这个那个短板

251
00:10:08,000 --> 00:10:12,000
就是你要让客户提出一个 well defined task

252
00:10:12,000 --> 00:10:14,000
其实是相当困难的

253
00:10:15,000 --> 00:10:16,000
所以其实他那个 well defined

254
00:10:16,000 --> 00:10:18,000
其实也是只是针对人而言

255
00:10:18,000 --> 00:10:20,000
他还没有说到一个

256
00:10:21,000 --> 00:10:23,000
机器能够认为他是一个 well defined

257
00:10:23,000 --> 00:10:25,000
他能够直接给出答案的这么一个方案

258
00:10:25,000 --> 00:10:25,000
所以

259
00:10:26,000 --> 00:10:28,000
这里面就在真正的人工智能实现之前

260
00:10:28,000 --> 00:10:29,000
我觉得这样的需求

261
00:10:30,000 --> 00:10:31,000
可能还是有的

262
00:10:31,000 --> 00:10:32,000
那就是说看

263
00:10:32,000 --> 00:10:34,000
可能是一个逐步缩缩小的过程吧

264
00:10:36,000 --> 00:10:39,000
对就好像

265
00:10:39,000 --> 00:10:40,000
我们觉得这个

266
00:10:41,000 --> 00:10:44,000
东西实现起来似乎没有什么

267
00:10:44,000 --> 00:10:45,000
太大的困难

268
00:10:46,000 --> 00:10:48,000
至少在如果他实现好的话

269
00:10:48,000 --> 00:10:50,000
在他的交互界面上应该不会比

270
00:10:51,000 --> 00:10:53,000
Cortana 或者是

271
00:10:54,000 --> 00:10:57,000
那个互联里面的 Jarvis 更难

272
00:10:57,000 --> 00:10:59,000
至少在操纵者

273
00:10:59,000 --> 00:11:01,000
从操作者的角度来看应该不是这样

274
00:11:02,000 --> 00:11:03,000
但是实现起来

275
00:11:03,000 --> 00:11:05,000
我觉得目前的水准应该是做不到

276
00:11:06,000 --> 00:11:06,000
然后

277
00:11:06,000 --> 00:11:08,000
但我觉得这正是

278
00:11:08,000 --> 00:11:10,000
I like rabbit 的那个

279
00:11:10,000 --> 00:11:11,000
可取之处啊

280
00:11:11,000 --> 00:11:12,000
他就是他用一个

281
00:11:13,000 --> 00:11:15,000
叫什么人力朋克的方式

282
00:11:16,000 --> 00:11:17,000
来帮你实现这种

283
00:11:18,000 --> 00:11:21,000
理论上应该由 AI 完成的工作

284
00:11:21,000 --> 00:11:22,000
对吧

285
00:11:22,000 --> 00:11:24,000
所以他不是他不是 AI

286
00:11:24,000 --> 00:11:25,000
他是他是

287
00:11:25,000 --> 00:11:27,000
他是 Ti True Intelligence

288
00:11:30,000 --> 00:11:30,000
对

289
00:11:31,000 --> 00:11:31,000
好吧

290
00:11:31,000 --> 00:11:34,000
那我来念今天最后一则听众反馈

291
00:11:34,000 --> 00:11:35,000
也不是最后一则

292
00:11:35,000 --> 00:11:36,000
就是我们选出来的最后一则

293
00:11:36,000 --> 00:11:38,000
这是一位叫 Bill 的朋友

294
00:11:38,000 --> 00:11:40,000
他是给我们说 14 期的反馈

295
00:11:42,000 --> 00:11:44,000
第一次给内核恐慌写反馈

296
00:11:44,000 --> 00:11:46,000
也就挺喜欢你们的节目

297
00:11:46,000 --> 00:11:49,000
其实最初是从知乎上不明奇妙的

298
00:11:49,000 --> 00:11:50,000
知道了这么一档节目

299
00:11:50,000 --> 00:11:53,000
也是从此才知道播客这个东西以及 IPN

300
00:11:54,000 --> 00:11:56,000
但听了几期后觉得还挺有意思的

301
00:11:56,000 --> 00:11:57,000
抱着听失货的心态

302
00:11:58,000 --> 00:12:00,000
偶尔还能听到些干货

303
00:12:00,000 --> 00:12:01,000
其实很多货都听不懂

304
00:12:02,000 --> 00:12:03,000
这个还是蛮好笑的

305
00:12:03,000 --> 00:12:03,000
到底是

306
00:12:04,000 --> 00:12:06,000
我们节目到底是失货还是干货

307
00:12:08,000 --> 00:12:10,000
我觉得 podcast 不可能是干货

308
00:12:10,000 --> 00:12:13,000
这一一棒子打死了所有 podcast

309
00:12:13,000 --> 00:12:14,000
但我觉得就是这样的

310
00:12:14,000 --> 00:12:15,000
就反正我感觉

311
00:12:15,000 --> 00:12:17,000
我们节目讲干货的

312
00:12:18,000 --> 00:12:20,000
打引号干货的时候还是其实挺无聊的

313
00:12:21,000 --> 00:12:24,000
吹牛扯蛋的时候还蛮有意思的

314
00:12:24,000 --> 00:12:26,000
所以我们还是吹牛扯蛋

315
00:12:26,000 --> 00:12:29,000
如果从一个市场导向的

316
00:12:29,000 --> 00:12:31,000
市场导向的角度来看的话

317
00:12:31,000 --> 00:12:33,000
B 节目简直是

318
00:12:34,000 --> 00:12:37,000
吹水的那些期反馈都是最好的

319
00:12:41,000 --> 00:12:42,000
好我们明确的这个方向

320
00:12:43,000 --> 00:12:43,000
那我接着念

321
00:12:45,000 --> 00:12:46,000
十四期开头的时候

322
00:12:46,000 --> 00:12:47,000
吴涛说到

323
00:12:48,000 --> 00:12:50,000
摩托车不代表社会地位的时候

324
00:12:50,000 --> 00:12:50,000
Rail 说

325
00:12:51,000 --> 00:12:53,000
城乡结合部的青年晚上

326
00:12:53,000 --> 00:12:54,000
轰鸣摩托车的时候

327
00:12:54,000 --> 00:12:55,000
肯定不是这么想的

328
00:12:55,000 --> 00:12:57,000
我瞬间感觉被击中了

329
00:12:57,000 --> 00:12:59,000
因为我就在这个 bill 哈

330
00:12:59,000 --> 00:13:01,000
他说因为我就在这样一个地方

331
00:13:01,000 --> 00:13:02,000
听你们的播客

332
00:13:03,000 --> 00:13:05,000
每当有这样的青年呼吓而过的

333
00:13:05,000 --> 00:13:07,000
时候轰隆声压盖一切

334
00:13:07,000 --> 00:13:09,000
只能在心里咒骂一声

335
00:13:10,000 --> 00:13:12,000
其实我现在不止城乡结合部是这样

336
00:13:12,000 --> 00:13:12,000
其实很多

337
00:13:13,000 --> 00:13:14,000
大城市你到了

338
00:13:14,000 --> 00:13:16,000
晚上交警下班的时候

339
00:13:16,000 --> 00:13:17,000
也有这种

340
00:13:17,000 --> 00:13:18,000
他不一定轰摩托车

341
00:13:18,000 --> 00:13:20,000
他可能轰的是可能什么几百万的跑车

342
00:13:20,000 --> 00:13:22,000
但是效果是一样的

343
00:13:24,000 --> 00:13:27,000
嗯对轰隆门是一种很没品的表象

344
00:13:27,000 --> 00:13:29,000
轰隆门我没有意见

345
00:13:29,000 --> 00:13:32,000
我有意见的是他把那个消声器拆了再轰隆门

346
00:13:33,000 --> 00:13:33,000
OK

347
00:13:34,000 --> 00:13:35,000
这个是 02

348
00:13:36,000 --> 00:13:38,000
那我接着念这个反馈

349
00:13:38,000 --> 00:13:38,000
啊

350
00:13:39,000 --> 00:13:39,000
一

351
00:13:40,000 --> 00:13:42,000
一小时 09 分的时候吴涛谈到

352
00:13:42,000 --> 00:13:46,000
通过像阿丢诺这样的东西控制 led 的

353
00:13:46,000 --> 00:13:49,000
是一个学习编程有成就感的方式

354
00:13:49,000 --> 00:13:50,000
其实如此

355
00:13:50,000 --> 00:13:53,000
作为一个电子类专业的学生

356
00:13:53,000 --> 00:13:55,000
我的 c 编程就是这样入门的

357
00:13:55,000 --> 00:13:56,000
哎恭喜

358
00:13:57,000 --> 00:13:59,000
关于操作系统存储自

359
00:13:59,000 --> 00:14:02,000
元年以来经历多少秒说这件事情

360
00:14:02,000 --> 00:14:03,000
我还是不太理解

361
00:14:03,000 --> 00:14:05,000
这是一个好的方式吗

362
00:14:05,000 --> 00:14:06,000
还是历史原因比较多

363
00:14:06,000 --> 00:14:09,000
节目中也提到了润秒的问题

364
00:14:09,000 --> 00:14:12,000
2015 年我们将迎来史上第 26 次润秒

365
00:14:12,000 --> 00:14:15,000
一些新闻也显示此前的润秒调整

366
00:14:15,000 --> 00:14:16,000
对软件造成了一定影响

367
00:14:17,000 --> 00:14:19,000
linux 就是那个 linux 的发明证

368
00:14:19,000 --> 00:14:19,000
啊

369
00:14:19,000 --> 00:14:21,000
好像也表示过这样的调整

370
00:14:21,000 --> 00:14:23,000
对操作系统而言比较麻烦

371
00:14:23,000 --> 00:14:26,000
不知道下次节目中有没有兴趣补充讨论一下

372
00:14:27,000 --> 00:14:27,000
啊

373
00:14:27,000 --> 00:14:29,000
那我们这可以补一下吧

374
00:14:29,000 --> 00:14:31,000
就是为什么要采用这种所谓

375
00:14:31,000 --> 00:14:35,000
呃从某一个 epoc 就是所谓某某元年开始

376
00:14:35,000 --> 00:14:38,000
经历多少秒数这种是这种方式来表示

377
00:14:38,000 --> 00:14:39,000
时间

378
00:14:40,000 --> 00:14:42,000
这种我们一般叫做什么 unix time

379
00:14:42,000 --> 00:14:44,000
啊就是 unix 系统时间

380
00:14:44,000 --> 00:14:48,000
就是从那么 1970 年 1 月 1 日 0 时 0 分 0 秒

381
00:14:48,000 --> 00:14:49,000
开始然后数

382
00:14:50,000 --> 00:14:52,000
呃为什么要这种方式呢

383
00:14:52,000 --> 00:14:53,000
简单呀

384
00:14:53,000 --> 00:14:56,000
你只是需要你只需要记住一个

385
00:14:56,000 --> 00:15:00,000
呃就是第呃外部定义的一个起点

386
00:15:00,000 --> 00:15:03,000
之后也是可以就就存数学一个非常简单的

387
00:15:03,000 --> 00:15:05,000
预算你不需要考虑任何

388
00:15:05,000 --> 00:15:09,000
呃就对于这个软件控制的这个计时来讲

389
00:15:09,000 --> 00:15:11,000
他是不需要考虑很多什么润秒啊时间

390
00:15:11,000 --> 00:15:15,000
轴啊那个不是就是日历上的那些时间的规范啊

391
00:15:15,000 --> 00:15:16,000
日记的不规则那些问题对吧

392
00:15:16,000 --> 00:15:18,000
所以都是很简单很规范的一个方式

393
00:15:18,000 --> 00:15:19,000
就是记录这个

394
00:15:20,000 --> 00:15:23,000
这个叫什么电子卖充的这么一个次数而已

395
00:15:24,000 --> 00:15:27,000
对就如果你从这个角度来讲

396
00:15:27,000 --> 00:15:32,000
反而是人类计量时间的方式其实非常

397
00:15:32,000 --> 00:15:33,000
太蠢了简直

398
00:15:33,000 --> 00:15:38,000
和不可理喻的就是所有的周期都不能互相

399
00:15:39,000 --> 00:15:42,000
同步啊没有一个没有一个叫什么

400
00:15:43,000 --> 00:15:47,000
最小公倍数还是最大公约数的这么一个

401
00:15:47,000 --> 00:15:50,000
概念在里面就是尤其是每次我看到这个

402
00:15:51,000 --> 00:15:52,000
周和

403
00:15:53,000 --> 00:15:55,000
呃月份不能

404
00:15:55,000 --> 00:15:58,000
synchronize 的时候都会觉得啊实在是蠢透

405
00:15:59,000 --> 00:16:02,000
就因为本质上我们那种人类的就是说的叫什么

406
00:16:02,000 --> 00:16:05,000
格格力高礼力还是什么

407
00:16:06,000 --> 00:16:07,000
就我们现在用的那个功力

408
00:16:08,000 --> 00:16:12,000
如略力如略力如略力和格力高礼力应该是同样一个

409
00:16:12,000 --> 00:16:14,000
东西对一个是就是

410
00:16:14,000 --> 00:16:16,000
我就是这 gregory 吧

411
00:16:17,000 --> 00:16:21,000
gregory 力就是如略力吧对就是只是翻译的写法不一样

412
00:16:21,000 --> 00:16:22,000
我觉得应该是这样子 whatever

413
00:16:22,000 --> 00:16:25,000
就是我们讲的功力我们现在常用的日历

414
00:16:25,000 --> 00:16:28,000
他本身在做一件不可能完成的事情就是

415
00:16:28,000 --> 00:16:33,000
他要用他要同步太阳立法和就是太阳立法是这个是按

416
00:16:33,000 --> 00:16:34,000
这个每年嘛

417
00:16:35,000 --> 00:16:40,000
然后他要同步这个月球的月球的这个这个这个转

418
00:16:40,000 --> 00:16:42,000
就是每个月的这个月象那些

419
00:16:42,000 --> 00:16:46,000
他还在同每天这个地球的自转就是那个每天的这种一个情况

420
00:16:46,000 --> 00:16:49,000
然后这些都是互相有影响的不可能说是一个

421
00:16:49,000 --> 00:16:51,000
永恒不变完美的东西对吧

422
00:16:52,000 --> 00:16:52,000
等等

423
00:16:53,000 --> 00:16:56,000
功力是阴阳混合力吗不是吧

424
00:16:56,000 --> 00:16:59,000
不他好像不会是考虑月象

425
00:16:59,000 --> 00:17:00,000
但是你们就嗯

426
00:17:01,000 --> 00:17:04,000
怎么说他分那个 12 个月他最开始初衷不就是为了做这件事情吗

427
00:17:05,000 --> 00:17:07,000
就每一个月每个月的概念不是这么来的吗

428
00:17:10,000 --> 00:17:10,000
嗯

429
00:17:12,000 --> 00:17:14,000
但是他后来等等

430
00:17:15,000 --> 00:17:16,000
我这部分并不重要

431
00:17:16,000 --> 00:17:18,000
但是我的印象里面应该是

432
00:17:19,000 --> 00:17:20,000
巴比伦人开始

433
00:17:21,000 --> 00:17:22,000
月

434
00:17:22,000 --> 00:17:24,000
立开始了

435
00:17:24,000 --> 00:17:27,000
就是现在用的功力的雏形但是他们后来

436
00:17:28,000 --> 00:17:30,000
他们一开始也是纯阴力

437
00:17:30,000 --> 00:17:31,000
就

438
00:17:31,000 --> 00:17:35,000
实际上大部分包括什么那个回教的立法也都是

439
00:17:35,000 --> 00:17:38,000
包括我们国家的立法其实大部分都是纯阴力

440
00:17:38,000 --> 00:17:39,000
但是

441
00:17:40,000 --> 00:17:42,000
中国人很聪明的就是加了节气这个东西

442
00:17:42,000 --> 00:17:44,000
然后用节气来

443
00:17:44,000 --> 00:17:47,000
规定浓湿然后日常作息跟着月亮走

444
00:17:48,000 --> 00:17:48,000
而不像

445
00:17:49,000 --> 00:17:51,000
功力这样比较愚蠢的

446
00:17:51,000 --> 00:17:55,000
功力实际上是试图用太阳力

447
00:17:55,000 --> 00:17:56,000
呃

448
00:17:57,000 --> 00:18:00,000
以为主然后月

449
00:18:00,000 --> 00:18:03,000
这个每个月的设置只是一种

450
00:18:04,000 --> 00:18:08,000
为了研习历史而已他跟人为的东西吗任何关系对对 ok

451
00:18:08,000 --> 00:18:09,000
那没错没错

452
00:18:11,000 --> 00:18:12,000
ok 不中了

453
00:18:12,000 --> 00:18:14,000
但我们最主要的一个问题就是说

454
00:18:14,000 --> 00:18:17,000
呃这个地球自转他那个时间我们定义为一天

455
00:18:17,000 --> 00:18:21,000
转一圈转定义为一天吗他他他并不是一个稳定的

456
00:18:22,000 --> 00:18:24,000
这个是最要命的问题然后那个

457
00:18:24,000 --> 00:18:25,000
呃

458
00:18:25,000 --> 00:18:28,000
就如果我们这样定义一天是地球自转一周的话

459
00:18:28,000 --> 00:18:31,000
我们在这种算出来是一年 365 天是肯定是

460
00:18:31,000 --> 00:18:33,000
不能严格满足的因为

461
00:18:33,000 --> 00:18:35,000
他总是会有点偏差嘛

462
00:18:36,000 --> 00:18:38,000
然后就会造成之后的各种非常奇奇怪怪的什么

463
00:18:38,000 --> 00:18:41,000
润年啊润秒啊这样的奇奇怪怪的问题

464
00:18:41,000 --> 00:18:43,000
所以其实从这个角度来讲

465
00:18:43,000 --> 00:18:46,000
所以我们所相机里面存储从某一个

466
00:18:46,000 --> 00:18:48,000
第三方外部定义的原点开始的

467
00:18:49,000 --> 00:18:51,000
然后经历这个一个纯数值的方法经历

468
00:18:51,000 --> 00:18:54,000
经历过多少秒数的方法是相当简单的

469
00:18:55,000 --> 00:18:57,000
没错嗯好这个就说多了哈

470
00:18:58,000 --> 00:19:01,000
然后他接着那个反馈还有一段没我们没念完

471
00:19:01,000 --> 00:19:01,000
嗯

472
00:19:02,000 --> 00:19:05,000
单片机系统中记录时间一般会使用一个

473
00:19:05,000 --> 00:19:08,000
实时时钟就是 real time clock 的芯片

474
00:19:08,000 --> 00:19:13,000
使用 32,768 赫兹的

475
00:19:13,000 --> 00:19:14,000
金正坐

476
00:19:15,000 --> 00:19:17,000
时钟元啊对

477
00:19:18,000 --> 00:19:20,000
呃很多单片机也集成这样的电路

478
00:19:20,000 --> 00:19:21,000
如果这样的

479
00:19:21,000 --> 00:19:25,000
就是实时时钟芯片配有试机位的话

480
00:19:26,000 --> 00:19:27,000
一出问题就不大

481
00:19:28,000 --> 00:19:30,000
也就是说有的 rtc 这个芯片是没有的

482
00:19:30,000 --> 00:19:31,000
嗯

483
00:19:31,000 --> 00:19:34,000
我印象中单片机的这个

484
00:19:34,000 --> 00:19:37,000
那个时钟是比较通常的 16 位吧

485
00:19:39,000 --> 00:19:41,000
32,768 赫兹

486
00:19:41,000 --> 00:19:43,000
看起来就是 16 位的东西吗

487
00:19:43,000 --> 00:19:46,000
不就是他的那个记录的产生只有 16 位

488
00:19:46,000 --> 00:19:48,000
那么这必然就少不了的就是有个

489
00:19:48,000 --> 00:19:50,000
所谓的 wrap around 的问题

490
00:19:50,000 --> 00:19:51,000
就是你 16 位很容易溢出嘛

491
00:19:51,000 --> 00:19:53,000
你一说的时候怎么办呢对

492
00:19:53,000 --> 00:19:55,000
就通常呢一般的做法就说

493
00:19:55,000 --> 00:19:56,000
反一出之后我就从头开始嘛

494
00:19:56,000 --> 00:19:58,000
对对我这个系统来讲

495
00:19:58,000 --> 00:19:59,000
只不过我这个软件设计是

496
00:20:00,000 --> 00:20:01,000
呃就是

497
00:20:01,000 --> 00:20:03,000
呃鲁棒性够好的话

498
00:20:03,000 --> 00:20:06,000
你就实时这个时时时钟这个 wrap over

499
00:20:07,000 --> 00:20:10,000
就是一出从重置归零重新开始记的时候

500
00:20:10,000 --> 00:20:12,000
对你系统来讲应该是不受影响的

501
00:20:12,000 --> 00:20:14,000
就是你总是说我经过这么一个

502
00:20:14,000 --> 00:20:16,000
固定秒数咔叨咔叨咔叨这样不断往前走

503
00:20:17,000 --> 00:20:19,000
当然了这都是美好的愿景

504
00:20:19,000 --> 00:20:21,000
实际情况永远通常不是这样的

505
00:20:21,000 --> 00:20:22,000
刚好最近是上周吧

506
00:20:22,000 --> 00:20:24,000
还是前周就发生了这么一个事

507
00:20:25,000 --> 00:20:26,000
是那个呃

508
00:20:26,000 --> 00:20:28,000
是美国的那个叫什么

509
00:20:28,000 --> 00:20:30,000
就是反正航空航就是那个民航的那种

510
00:20:30,000 --> 00:20:32,000
就检查到是拨音七

511
00:20:33,000 --> 00:20:35,000
87 那个什么 dreamliner 嘛

512
00:20:35,000 --> 00:20:36,000
但上面有个

513
00:20:37,000 --> 00:20:39,000
有不是有那种飞机上有时候航电系统嘛

514
00:20:39,000 --> 00:20:40,000
机套是独立配置的

515
00:20:40,000 --> 00:20:41,000
但是他们发现

516
00:20:42,000 --> 00:20:43,000
有一个很久的情况就是

517
00:20:43,000 --> 00:20:45,000
他们也会有那个 wrap over 的问题

518
00:20:45,000 --> 00:20:48,000
然后 wrap over 大概就是说美这个飞机美

519
00:20:48,000 --> 00:20:49,000
连续服役就不关机

520
00:20:49,000 --> 00:20:51,000
连续服役超过多少

521
00:20:51,000 --> 00:20:53,000
100 多天吧还是几百天

522
00:20:53,000 --> 00:20:54,000
就不到一年反正

523
00:20:55,000 --> 00:20:56,000
这么一个时间内

524
00:20:56,000 --> 00:20:59,000
就会出现所有系统都挂掉

525
00:20:59,000 --> 00:21:01,000
就是因为这个时钟 wrap over 的那个问题

526
00:21:01,000 --> 00:21:02,000
没有处理好

527
00:21:02,000 --> 00:21:03,000
就是那个软件觉得

528
00:21:03,000 --> 00:21:05,000
所以就是要定时重启飞机是吧

529
00:21:05,000 --> 00:21:06,000
对没错

530
00:21:06,000 --> 00:21:09,000
所以他们飞机是不能连续开机

531
00:21:09,000 --> 00:21:11,000
就是不能连续也不是说连续飞行

532
00:21:11,000 --> 00:21:12,000
就是不断电嘛

533
00:21:12,000 --> 00:21:14,000
不能就是不间断运行

534
00:21:14,000 --> 00:21:16,000
不能超过好像 100 多天还是多少天

535
00:21:16,000 --> 00:21:17,000
反正是不到一年的时间

536
00:21:18,000 --> 00:21:20,000
但你像对于一些这种所谓现在这种那种大型的

537
00:21:21,000 --> 00:21:22,000
航空公司来说他是什么

538
00:21:23,000 --> 00:21:24,000
呃人停机不停嘛

539
00:21:24,000 --> 00:21:27,000
他就是几个航班几个机组轮流换

540
00:21:27,000 --> 00:21:29,000
这个但是飞机是一直在飞一直在运行的

541
00:21:29,000 --> 00:21:31,000
这样才因为飞机是一个

542
00:21:31,000 --> 00:21:32,000
一个什么资本性的支出嘛

543
00:21:32,000 --> 00:21:34,000
那个是没有就是能够尽量利用起来

544
00:21:34,000 --> 00:21:35,000
就尽量利用起来呗

545
00:21:35,000 --> 00:21:37,000
但是发现有这么一个很久的问题

546
00:21:38,000 --> 00:21:40,000
结果就是什么被发现了这个漏洞

547
00:21:40,000 --> 00:21:41,000
也不叫漏洞就是 bug

548
00:21:41,000 --> 00:21:43,000
然后择令后就修改了

549
00:21:43,000 --> 00:21:45,000
因为你想飞机飞到半空中

550
00:21:45,000 --> 00:21:48,000
然后突然所有航电系统都没有反应了

551
00:21:48,000 --> 00:21:49,000
你就没有办法

552
00:21:49,000 --> 00:21:51,000
因为现在这个飞机是所谓的什么

553
00:21:51,000 --> 00:21:53,000
呃可能 control by wire 嘛限控

554
00:21:53,000 --> 00:21:57,000
对然后所有的那个限控没有这个新

555
00:21:57,000 --> 00:21:58,000
电脑新电脑不工作了

556
00:21:58,000 --> 00:22:00,000
那你个没有什么控制

557
00:22:00,000 --> 00:22:02,000
这个机翼的转向啊

558
00:22:02,000 --> 00:22:03,000
他们完全都没有了

559
00:22:03,000 --> 00:22:05,000
你这个风机飞机就是可以直接掉下去的

560
00:22:05,000 --> 00:22:06,000
很危险很危险

561
00:22:07,000 --> 00:22:07,000
所以怎么讲

562
00:22:08,000 --> 00:22:10,000
呃以前我们用 xp 的什么

563
00:22:11,000 --> 00:22:13,000
呃定时重启还是有一定的好处的

564
00:22:13,000 --> 00:22:15,000
哈哈哈哈

565
00:22:16,000 --> 00:22:18,000
让我想起来就是有一次我从

566
00:22:19,000 --> 00:22:20,000
我应该是要飞英国

567
00:22:20,000 --> 00:22:23,000
然后一开始从法兰克福飞要色单

568
00:22:24,000 --> 00:22:28,000
呃然后在法兰克福的飞机跑道上

569
00:22:28,000 --> 00:22:32,000
已经到那个跑道的起点了

570
00:22:32,000 --> 00:22:35,000
然后停了大概 30 分钟

571
00:22:35,000 --> 00:22:39,000
然后机长说呃我们的飞机上的电脑有点问题

572
00:22:39,000 --> 00:22:41,000
啊阿姆斯是和航

573
00:22:42,000 --> 00:22:43,000
和航老是出这种幺蛾子

574
00:22:43,000 --> 00:22:48,000
然后和航的说和航我们在和航总部的系统工程师

575
00:22:49,000 --> 00:22:50,000
有一台一模一样的电脑

576
00:22:50,000 --> 00:22:54,000
但是他没有办法复原就是重现我们的这个 bug

577
00:22:54,000 --> 00:22:56,000
所以他建议我们重新启动一下飞机

578
00:22:56,000 --> 00:22:58,000
然后我们现在需要滑滑飞

579
00:22:58,000 --> 00:23:01,000
滑回到那个呃 gate 那边

580
00:23:01,000 --> 00:23:03,000
然后重新启动

581
00:23:03,000 --> 00:23:05,000
然后就滑回去重启

582
00:23:05,000 --> 00:23:08,000
然后你就坐在飞机上等着飞机重启

583
00:23:08,000 --> 00:23:09,000
那种感觉非常的

584
00:23:09,000 --> 00:23:10,000
surreal

585
00:23:10,000 --> 00:23:12,000
对重启的时候是不是会听见一堆

586
00:23:12,000 --> 00:23:14,000
会那个重启的时候听见一个

587
00:23:14,000 --> 00:23:17,000
噹噹噹噹噹的声音

588
00:23:17,000 --> 00:23:18,000
哈哈哈哈

589
00:23:19,000 --> 00:23:22,000
然后系统航这个时候就惊呆了是不是

590
00:23:22,000 --> 00:23:23,000
整个人都不好了

591
00:23:24,000 --> 00:23:25,000
没错

592
00:23:26,000 --> 00:23:26,000
对

593
00:23:27,000 --> 00:23:30,000
好吧今天的这个听众反馈就念到这里啊

594
00:23:30,000 --> 00:23:35,000
我们先啊刚才那个七八七的事情不是听众反馈

595
00:23:35,000 --> 00:23:37,000
的那个是我们自己加的

596
00:23:38,000 --> 00:23:38,000
对

597
00:23:38,000 --> 00:23:43,000
嗯好嗯对感谢各位听众反馈也欢迎你们写信给我们

598
00:23:43,000 --> 00:23:43,000
嗯

599
00:23:45,000 --> 00:23:47,000
然后如果你写的足够长的话

600
00:23:47,000 --> 00:23:49,000
我们是非常愿意把它念出来

601
00:23:49,000 --> 00:23:53,000
然后这样可以从填充节目时间

602
00:23:53,000 --> 00:23:54,000
哈哈哈哈

603
00:23:55,000 --> 00:23:57,000
哪怕是写信来骂我们或者是批评我们

604
00:23:57,000 --> 00:23:59,000
我们也会非常愿意地念出来

605
00:23:59,000 --> 00:24:00,000
嗯好吧

606
00:24:00,000 --> 00:24:02,000
ok 狼子野心啊这可是

607
00:24:05,000 --> 00:24:08,000
好那我们现在过多到这个新闻环节哈

608
00:24:08,000 --> 00:24:09,000
这个时候应该

609
00:24:09,000 --> 00:24:12,000
响起新闻联播的那个开场的声音

610
00:24:14,000 --> 00:24:15,000
lorenz 可以插一个

611
00:24:17,000 --> 00:24:19,000
这周北京时间七点钟

612
00:24:19,000 --> 00:24:22,000
哈哈也不叫这周哈就这段时间

613
00:24:23,000 --> 00:24:24,000
发生了一些

614
00:24:24,000 --> 00:24:27,000
不大不小的科技相关我们觉得还挺有意思的

615
00:24:27,000 --> 00:24:30,000
新闻我们给大家啊也聊一聊

616
00:24:30,000 --> 00:24:32,000
第一个是这个

617
00:24:33,000 --> 00:24:35,000
wubuntu 那间公司叫什么 canonical 对吧

618
00:24:36,000 --> 00:24:39,000
对他们之前搞了一个叫做 wubuntu core

619
00:24:39,000 --> 00:24:40,000
这么一个精简的系统

620
00:24:40,000 --> 00:24:42,000
然后里面用了一个比较先进的

621
00:24:42,000 --> 00:24:44,000
不是比较先进比较现代的

622
00:24:44,000 --> 00:24:47,000
就包管理器叫做 snapy 然后简单来讲呢

623
00:24:47,000 --> 00:24:48,000
它就是一个把

624
00:24:49,000 --> 00:24:51,000
我们之前讲的那个 docker 这个种什么 container 的技术

625
00:24:51,000 --> 00:24:52,000
用到

626
00:24:53,000 --> 00:24:55,000
操作系统本身的这个升级和管理上

627
00:24:55,000 --> 00:24:57,000
而不是简单的用这个操作系统上面的应用

628
00:24:57,000 --> 00:24:59,000
应用软件什么意思呢

629
00:25:00,000 --> 00:25:02,000
主要我们通常我们如果你做

630
00:25:02,000 --> 00:25:05,000
用过任何一款的 linux 的操作系统

631
00:25:05,000 --> 00:25:07,000
就你大概会知道他会定期的

632
00:25:07,000 --> 00:25:09,000
不让你说我有多少多少个包要升级

633
00:25:10,000 --> 00:25:11,000
但是如果你

634
00:25:11,000 --> 00:25:13,000
运气足够不好呢

635
00:25:14,000 --> 00:25:17,000
有可能在升级过程中你电脑就重启死机或者断电了

636
00:25:17,000 --> 00:25:19,000
然后这个时候也会进到系统发现哎

637
00:25:19,000 --> 00:25:21,000
惨了系统已经叫做 corrupt

638
00:25:22,000 --> 00:25:24,000
就是他在一个

639
00:25:25,000 --> 00:25:26,000
不是一个

640
00:25:27,000 --> 00:25:31,000
所谓的不是 0 也不是 1 的状态对就是是一个

641
00:25:31,000 --> 00:25:33,000
他属于那个猫的状态

642
00:25:34,000 --> 00:25:37,000
你说不清楚他是一个什么除非你去看

643
00:25:37,000 --> 00:25:38,000
那你一看发现哎呀我靠

644
00:25:39,000 --> 00:25:41,000
各种这个文件缺一块那个包又没安装好

645
00:25:41,000 --> 00:25:42,000
然后就属于

646
00:25:42,000 --> 00:25:46,000
你本来的目标是说你从 A 状态就是可以工作的 A 状态

647
00:25:46,000 --> 00:25:48,000
切换到可以工作的 B 状态嘛

648
00:25:48,000 --> 00:25:50,000
像也是卡在 A 和 B 之中间这么一个不干

649
00:25:50,000 --> 00:25:53,000
就很尴尬的一个境地怎么解决这个问题呢

650
00:25:53,000 --> 00:25:54,000
那这个问题其实对

651
00:25:55,000 --> 00:25:56,000
普通消费者来说可能还好

652
00:25:56,000 --> 00:25:59,000
就现在来说就总体而言嘛还是比较少遇到

653
00:25:59,000 --> 00:26:02,000
这个系统崩溃就这系统在升级过程中崩溃的情况

654
00:26:03,000 --> 00:26:05,000
然后断电的话因为现在大部分都是笔记本吧

655
00:26:05,000 --> 00:26:08,000
就有自带电池也不也不太像过去的台式机

656
00:26:08,000 --> 00:26:11,000
可能被一不小心碰到一个线或者就停电

657
00:26:11,000 --> 00:26:12,000
然后是这种外部原因

658
00:26:13,000 --> 00:26:14,000
导致这个系统

659
00:26:15,000 --> 00:26:16,000
属于这个一个中间状态的情况

660
00:26:17,000 --> 00:26:18,000
但是还是会有的嘛

661
00:26:18,000 --> 00:26:21,000
我们还是想讲降低这种样的风险和损失

662
00:26:22,000 --> 00:26:24,000
那么 Snappe 他的这么一个核心理念就是说

663
00:26:24,000 --> 00:26:25,000
如果我们可以用

664
00:26:25,000 --> 00:26:28,000
之前我们讲过的这种 container 集装消化的技术

665
00:26:28,000 --> 00:26:29,000
就是说我们是一个

666
00:26:29,000 --> 00:26:30,000
叫什么

667
00:26:30,000 --> 00:26:31,000
增量升级

668
00:26:31,000 --> 00:26:32,000
也不叫增量升级就是一个

669
00:26:33,000 --> 00:26:35,000
升级好了才完全切换过来

670
00:26:35,000 --> 00:26:38,000
就在中间过程中出现任何问题我们都是可以回滚的

671
00:26:39,000 --> 00:26:41,000
那么这不就解决了这个问题了吗

672
00:26:41,000 --> 00:26:43,000
这个思想还是挺好的

673
00:26:43,000 --> 00:26:44,000
但他也不是这个

674
00:26:44,000 --> 00:26:46,000
Snappe 也不是第一个做这种事情的

675
00:26:46,000 --> 00:26:48,000
之前有很多这种类似于包管理的

676
00:26:48,000 --> 00:26:50,000
就不是从那种

677
00:26:50,000 --> 00:26:52,000
东西来做的尝试也有很多

678
00:26:52,000 --> 00:26:54,000
反正商用的话最

679
00:26:55,000 --> 00:26:57,000
最大就最普及的肯定还是那个

680
00:26:57,000 --> 00:26:59,000
就是 Chromebook 用那个 ChromeOS 嘛

681
00:27:01,000 --> 00:27:03,000
就 ChromeOS 他的这个升级过程中

682
00:27:03,000 --> 00:27:06,000
呃就他是系统是采用这么一种

683
00:27:06,000 --> 00:27:08,000
就是就是两个系统了就是升级

684
00:27:08,000 --> 00:27:12,000
升级 A 系统你用 A 系统的时候他其实在升级 B 系统

685
00:27:12,000 --> 00:27:13,000
然后如果你是你在

686
00:27:13,000 --> 00:27:15,000
你切换到 B 系统发现有问题的话

687
00:27:15,000 --> 00:27:17,000
他 A 还是可以切换到 A 系统的

688
00:27:17,000 --> 00:27:20,000
就是双两个分区嘛这样子但是

689
00:27:20,000 --> 00:27:22,000
同样的同样系统他不同的版本这样

690
00:27:23,000 --> 00:27:25,000
然后对这个就比那个

691
00:27:26,000 --> 00:27:29,000
有一个 recovery mode 要稍微先进一点

692
00:27:29,000 --> 00:27:31,000
没错两套系统都是可以用的对

693
00:27:31,000 --> 00:27:34,000
但是他这个力度还是比较粗哈就说是一个

694
00:27:34,000 --> 00:27:36,000
呃因为只有两个 AB 轮换嘛等于是

695
00:27:37,000 --> 00:27:40,000
对就如果我们实际上做的好一点就是说尽量能够说

696
00:27:41,000 --> 00:27:44,000
连这个就是每一个系统的小的改动

697
00:27:44,000 --> 00:27:47,000
都可以通过这种像 container 的方式

698
00:27:47,000 --> 00:27:49,000
就不就不是 AB 轮换就是 ABCD 可能这样

699
00:27:49,000 --> 00:27:51,000
你可以无限增多的这么方式轮换

700
00:27:52,000 --> 00:27:55,000
但我他那个是是年初的时候吧

701
00:27:55,000 --> 00:27:58,000
出了一个就可以大家用的这个试玩版

702
00:27:58,000 --> 00:28:00,000
我就我就用了一下就 snapy 啊

703
00:28:00,000 --> 00:28:01,000
我觉得还还不错挺好的

704
00:28:01,000 --> 00:28:03,000
就是感觉跟那个 docker 挺像

705
00:28:03,000 --> 00:28:04,000
但是管理系统嗯哼

706
00:28:05,000 --> 00:28:08,000
呃我觉得这个东西在服务器上的优势还是蛮大的

707
00:28:08,000 --> 00:28:10,000
就是省心嘛在现在的

708
00:28:10,000 --> 00:28:12,000
对我觉得这一次最重要的意义就是

709
00:28:12,000 --> 00:28:14,000
snapy 终于要进入

710
00:28:14,000 --> 00:28:15,000
因为他之前只是在 call 上有嘛

711
00:28:15,000 --> 00:28:18,000
然后现在要进入桌面吧

712
00:28:18,000 --> 00:28:19,000
无关就是桌面吧

713
00:28:19,000 --> 00:28:23,000
是说是 15.04 还是说哪一个叫做还是 15.10

714
00:28:25,000 --> 00:28:27,000
呃应该是 15.04 吧

715
00:28:28,000 --> 00:28:31,000
15 就今年的就已经已经发了这个吧应该他是

716
00:28:31,000 --> 00:28:33,000
对他应该是要开始

717
00:28:34,000 --> 00:28:36,000
啊他这肯定是一个漫长的过程

718
00:28:36,000 --> 00:28:37,000
我 10.04 我还没有装

719
00:28:37,000 --> 00:28:39,000
我觉得可能在 15.10 里面会出现嘛

720
00:28:39,000 --> 00:28:41,000
对因为他是 5 月 8 日 announced 的

721
00:28:41,000 --> 00:28:44,000
所以他应该是 15.10 才会出

722
00:28:44,000 --> 00:28:47,000
ok 对因为因为这个 5 方土他那个系统发行版本

723
00:28:47,000 --> 00:28:48,000
他就是说每隔

724
00:28:48,000 --> 00:28:50,000
好像是几一年两年两年吧

725
00:28:50,000 --> 00:28:54,000
会发一个所谓长期维护版本的 long term support

726
00:28:54,000 --> 00:28:57,000
对但是这之间我们现在就现在那个 snapy

727
00:28:57,000 --> 00:28:58,000
进到这个 5 方土这个正式版

728
00:28:58,000 --> 00:29:00,000
而不是之前那个经典版的 call

729
00:29:00,000 --> 00:29:02,000
他其实是所谓的中间那个就是

730
00:29:02,000 --> 00:29:04,000
非那个长期维护版本的

731
00:29:05,000 --> 00:29:06,000
就是简单来说大家做小白鼠吧

732
00:29:07,000 --> 00:29:08,000
就我还是

733
00:29:08,000 --> 00:29:11,000
对挺鼓励大家去去试试看下感觉怎么样

734
00:29:11,000 --> 00:29:12,000
然后

735
00:29:12,000 --> 00:29:15,000
因为这个毕竟是个新全新的管理系统

736
00:29:15,000 --> 00:29:16,000
我觉得

737
00:29:16,000 --> 00:29:18,000
必然是坑多路滑

738
00:29:18,000 --> 00:29:21,000
要大家去多踩踩

739
00:29:21,000 --> 00:29:22,000
这样后面才用得爽嘛

740
00:29:22,000 --> 00:29:24,000
就是鼓励大家去尝试一下

741
00:29:25,000 --> 00:29:28,000
然后我觉得他最大的

742
00:29:28,000 --> 00:29:31,000
一个特征或者一个特点就是他会

743
00:29:32,000 --> 00:29:35,000
他把所有的依赖全都打个打在一个包里面

744
00:29:35,000 --> 00:29:36,000
就是他每一个包都是原子的

745
00:29:36,000 --> 00:29:38,000
然后这个包一换上去

746
00:29:38,000 --> 00:29:39,000
所有依赖就跟这个包一起去了

747
00:29:40,000 --> 00:29:42,000
也算是他的一个特点

748
00:29:42,000 --> 00:29:47,000
就是他试图用就有点像 NPM 那样的方式来

749
00:29:47,000 --> 00:29:49,000
提供依赖管理

750
00:29:49,000 --> 00:29:50,000
就所谓依赖管理就是不管理

751
00:29:50,000 --> 00:29:52,000
就你需要什么都全都给你

752
00:29:52,000 --> 00:29:55,000
然后但是你也别去操心这个东西

753
00:29:55,000 --> 00:29:56,000
别人又没有上的问题

754
00:29:57,000 --> 00:29:58,000
这点是

755
00:29:59,000 --> 00:30:02,000
就算是现代操作系统发展的一个

756
00:30:03,000 --> 00:30:06,000
一个思潮吧就好像

757
00:30:07,000 --> 00:30:09,000
我觉得以前之所以会出现 DFH

758
00:30:09,000 --> 00:30:11,000
或者是 Dependency HAL

759
00:30:11,000 --> 00:30:13,000
这种窘境

760
00:30:13,000 --> 00:30:16,000
原因之一也就是以前的硬盘太贵了

761
00:30:17,000 --> 00:30:20,000
然后现在想节省空间对吧

762
00:30:20,000 --> 00:30:22,000
对网速也快了空间也多了

763
00:30:22,000 --> 00:30:25,000
那这种依赖的问题

764
00:30:25,000 --> 00:30:27,000
也许就可以成为这种简单粗暴的

765
00:30:27,000 --> 00:30:28,000
好你要什么我就全都给你包起来

766
00:30:28,000 --> 00:30:31,000
然后一次性的一个一股脑子

767
00:30:31,000 --> 00:30:32,000
给你装上完事

768
00:30:32,000 --> 00:30:34,000
这样的方式来解决也挺好

769
00:30:35,000 --> 00:30:37,000
这现在有一个事情我觉得不太清楚

770
00:30:37,000 --> 00:30:40,000
当然硬盘我们现在说存储空间不是一个问题

771
00:30:40,000 --> 00:30:41,000
但是可能另外一个就是说

772
00:30:41,000 --> 00:30:45,000
这个共享的内存可能还是一个问题

773
00:30:45,000 --> 00:30:46,000
因为如果你是通过

774
00:30:46,000 --> 00:30:49,000
比如说你有两个应用都能连接到一个包的话

775
00:30:49,000 --> 00:30:50,000
如果你两个应用同时开

776
00:30:50,000 --> 00:30:52,000
这个包本身是可以

777
00:30:52,000 --> 00:30:55,000
就是他们共享的外部连接的包

778
00:30:55,000 --> 00:30:57,000
应该是可以只用加载一份到内存中的

779
00:30:57,000 --> 00:31:00,000
然后两边是可以共用的吧

780
00:31:01,000 --> 00:31:07,000
如果在加载本地的包之前

781
00:31:07,000 --> 00:31:08,000
加载本地的依赖之前

782
00:31:08,000 --> 00:31:09,000
先看一下内存里面有没有

783
00:31:09,000 --> 00:31:10,000
有的话就用了

784
00:31:10,000 --> 00:31:12,000
但是这个版本不就有问题吗

785
00:31:12,000 --> 00:31:13,000
就可能两个依赖的

786
00:31:13,000 --> 00:31:16,000
可是即便在 DII HAL 的时代

787
00:31:16,000 --> 00:31:17,000
同样有这个问题

788
00:31:17,000 --> 00:31:18,000
就是你可能需要另外一个版本

789
00:31:18,000 --> 00:31:21,000
那那个时候你还是需要再漏另外一份

790
00:31:25,000 --> 00:31:28,000
总体来说我觉得趋势肯定还是说

791
00:31:29,000 --> 00:31:30,000
不管以后操作系统也好

792
00:31:30,000 --> 00:31:32,000
还是应用的分发也好

793
00:31:32,000 --> 00:31:34,000
可能这种集装箱化

794
00:31:34,000 --> 00:31:35,000
可能还是一个比较好的趋势

795
00:31:35,000 --> 00:31:38,000
就起码它对管理哲学上是一个相对

796
00:31:39,000 --> 00:31:39,000
怎么讲

797
00:31:39,000 --> 00:31:40,000
独立啊

798
00:31:40,000 --> 00:31:42,000
好维护的一个东西

799
00:31:42,000 --> 00:31:45,000
当然也有另外一种就是这种反对的声音

800
00:31:45,000 --> 00:31:47,000
反对声音主要就是说从这个

801
00:31:47,000 --> 00:31:50,000
软件的维护和开发的角度上来讲

802
00:31:50,000 --> 00:31:52,000
比如说之前我们不是出过

803
00:31:52,000 --> 00:31:55,000
SSL 的那个 Hardbleed 的漏洞吗

804
00:31:55,000 --> 00:31:57,000
那出了漏洞肯定大家就要休息不保

805
00:31:57,000 --> 00:31:59,000
因为很多人都用了那个 OpenSSL 那个包嘛

806
00:31:59,000 --> 00:32:02,000
那大家都要升级到最新版本

807
00:32:02,000 --> 00:32:04,000
才可以就避免有那个 Hardbleed

808
00:32:04,000 --> 00:32:07,000
这种比较严重的安全漏洞的存在嘛

809
00:32:07,000 --> 00:32:10,000
如果说整个系统的这个 SSL

810
00:32:10,000 --> 00:32:11,000
就用到

811
00:32:11,000 --> 00:32:13,000
凡是用到 OpenSSL 这个软件的包

812
00:32:13,000 --> 00:32:16,000
都是外连到同样一个

813
00:32:16,000 --> 00:32:17,000
对就只用升级一个嘛

814
00:32:17,000 --> 00:32:18,000
就只用一次升级

815
00:32:18,000 --> 00:32:19,000
所有人都好了对吧

816
00:32:19,000 --> 00:32:22,000
就那个漏洞就安全漏洞就解决了

817
00:32:22,000 --> 00:32:24,000
但是如果采用像

818
00:32:24,000 --> 00:32:25,000
集装箱化这种方式

819
00:32:25,000 --> 00:32:26,000
就是各个 APP

820
00:32:26,000 --> 00:32:27,000
自己是一套独立完整的

821
00:32:27,000 --> 00:32:29,000
这么一套 Stack 的话

822
00:32:29,000 --> 00:32:31,000
那你要遇到这种

823
00:32:32,000 --> 00:32:33,000
使用面积比较广的

824
00:32:33,000 --> 00:32:35,000
然后又比较严重的 Bug

825
00:32:35,000 --> 00:32:36,000
这个这个的软件

826
00:32:36,000 --> 00:32:38,000
CodeBug 的时候就就比较痛苦了

827
00:32:38,000 --> 00:32:40,000
你可能要挨个挨个 APP 去升级

828
00:32:40,000 --> 00:32:41,000
去然后才能免

829
00:32:41,000 --> 00:32:44,000
才能保证你整个系统中没有任何部位

830
00:32:44,000 --> 00:32:47,000
可以遭受到这种 Hardbleed 类似的

831
00:32:47,000 --> 00:32:50,000
这么一种漏洞的攻击嘛

832
00:32:50,000 --> 00:32:51,000
所以我不太清楚

833
00:32:51,000 --> 00:32:53,000
这两边可能还是有一点矛盾的

834
00:32:53,000 --> 00:32:54,000
我觉得可能从用户的层面来讲

835
00:32:54,000 --> 00:32:57,000
可能觉得像那种现在所谓的 APP

836
00:32:57,000 --> 00:32:58,000
那种方式就装一个

837
00:32:58,000 --> 00:32:59,000
然后直接删掉也没什么问题

838
00:32:59,000 --> 00:33:02,000
这种方式可能是更加简单易懂和直观的

839
00:33:02,000 --> 00:33:03,000
然后维护性更好

840
00:33:03,000 --> 00:33:05,000
它不会有残留垃圾什么的

841
00:33:05,000 --> 00:33:06,000
但是我觉得像

842
00:33:06,000 --> 00:33:08,000
从这个软件开发者的这么一个角度来讲

843
00:33:08,000 --> 00:33:12,000
可能还是有会对这个是有比较大的意义的吧

844
00:33:13,000 --> 00:33:13,000
没错

845
00:33:15,000 --> 00:33:15,000
对但

846
00:33:16,000 --> 00:33:17,000
我也不知道

847
00:33:17,000 --> 00:33:19,000
他至少从 Ubuntu 的角度讲

848
00:33:19,000 --> 00:33:24,000
他作为全球第一的 Linux 发行版

849
00:33:24,000 --> 00:33:25,000
他已经是全球第一了

850
00:33:26,000 --> 00:33:26,000
是吗

851
00:33:27,000 --> 00:33:27,000
应该是吧

852
00:33:27,000 --> 00:33:28,000
我不太清楚

853
00:33:28,000 --> 00:33:31,000
因为我前两天看了一份服务器上的装机量

854
00:33:31,000 --> 00:33:33,000
我应该现在应该是全球第一

855
00:33:34,000 --> 00:33:34,000
OK

856
00:33:35,000 --> 00:33:37,000
我之前老是看到有人说

857
00:33:37,000 --> 00:33:38,000
我们这个 Fedora 多好

858
00:33:38,000 --> 00:33:40,000
我们这个 Santa OS 多好

859
00:33:40,000 --> 00:33:41,000
所以也很难讲

860
00:33:42,000 --> 00:33:47,000
可能企业级和全球一个总体的水平还是不太一样的

861
00:33:48,000 --> 00:33:49,000
对你要说付费的话

862
00:33:49,000 --> 00:33:51,000
那现在 Red Hat 仍旧是第一的吧

863
00:33:51,000 --> 00:33:52,000
Red Hat 应该是

864
00:33:52,000 --> 00:33:55,000
但如果你考虑所有的 Linux 发行版本的装机量的话

865
00:33:55,000 --> 00:33:57,000
Ubuntu 现在应该已经是

866
00:33:58,000 --> 00:33:59,000
不是应该已经是

867
00:33:59,000 --> 00:34:01,000
是我前两天看了一份报道是

868
00:34:01,000 --> 00:34:04,000
小白用户太多什么商业知识都不够用了

869
00:34:05,000 --> 00:34:06,000
嗯

870
00:34:08,000 --> 00:34:12,000
对就好像现在 SystemD 也已经跟着 15.04

871
00:34:12,000 --> 00:34:16,000
成为 Ubuntu 的默认启动项目了

872
00:34:16,000 --> 00:34:17,000
所以启动管理器了

873
00:34:17,000 --> 00:34:17,000
所以

874
00:34:18,000 --> 00:34:19,000
OK

875
00:34:20,000 --> 00:34:22,000
他们推动力量还是很大

876
00:34:22,000 --> 00:34:23,000
呵呵呵

877
00:34:24,000 --> 00:34:25,000
没错

878
00:34:25,000 --> 00:34:28,000
但也有很多人对这个有什么不爽的声音

879
00:34:28,000 --> 00:34:29,000
还是另外一回事

880
00:34:29,000 --> 00:34:31,000
以后找机会再聊吧

881
00:34:31,000 --> 00:34:34,000
他们就无情的被历史的洪流淹没了

882
00:34:34,000 --> 00:34:35,000
呵呵呵

883
00:34:37,000 --> 00:34:38,000
OK

884
00:34:38,000 --> 00:34:41,000
下一条新闻是一个

885
00:34:42,000 --> 00:34:43,000
也不算多重要

886
00:34:43,000 --> 00:34:45,000
就是有一个

887
00:34:45,000 --> 00:34:48,000
有一个 Manifesto

888
00:34:48,000 --> 00:34:50,000
叫做 No TCP

889
00:34:50,000 --> 00:34:51,000
活动

890
00:34:52,000 --> 00:34:55,000
你这里可能要解释一下他的主要的诉求是什么

891
00:34:56,000 --> 00:34:56,000
对

892
00:34:56,000 --> 00:34:58,000
其实很简单

893
00:34:58,000 --> 00:34:58,000
就是一个网站

894
00:34:58,000 --> 00:35:00,000
一个叫 No TCP.io

895
00:35:00,000 --> 00:35:02,000
然后上面有一个大大的 TCP

896
00:35:02,000 --> 00:35:06,000
然后在上面画了那个禁止的标志

897
00:35:06,000 --> 00:35:07,000
然后

898
00:35:07,000 --> 00:35:09,000
他开宗明也说了

899
00:35:09,000 --> 00:35:10,000
就说好

900
00:35:10,000 --> 00:35:11,000
我们也是一个

901
00:35:11,000 --> 00:35:12,000
怎么说

902
00:35:12,000 --> 00:35:14,000
hipster 的一个宣告

903
00:35:14,000 --> 00:35:16,000
就是顺应了

904
00:35:16,000 --> 00:35:18,000
比如说 No Jazz

905
00:35:20,000 --> 00:35:22,000
他这句话写的其实还挺酸的

906
00:35:22,000 --> 00:35:22,000
他说

907
00:35:22,000 --> 00:35:29,000
Just as No Jazz and NIO provided the word that proved to the world

908
00:35:29,000 --> 00:35:34,000
that bare metal performance is always worth the consequent unreadable code

909
00:35:34,000 --> 00:35:36,000
呵呵呵

910
00:35:37,000 --> 00:35:38,000
No Jazz

911
00:35:38,000 --> 00:35:39,000
Jazz code 这么丑的东西

912
00:35:39,000 --> 00:35:42,000
但是为了 performance

913
00:35:43,000 --> 00:35:45,000
也是可以被人接受的

914
00:35:45,000 --> 00:35:46,000
或者是

915
00:35:46,000 --> 00:35:48,000
那么多这种莫名其妙

916
00:35:48,000 --> 00:35:51,000
No SQL 的 database 也是

917
00:35:51,000 --> 00:35:55,000
被证明是非常有用的

918
00:35:55,000 --> 00:35:58,000
我们现在也要开始宣扬一下

919
00:35:58,000 --> 00:36:00,000
TCP 其实是非常传统

920
00:36:00,000 --> 00:36:01,000
非常老掉牙

921
00:36:01,000 --> 00:36:02,000
非常不那么

922
00:36:03,000 --> 00:36:04,000
入时的东西

923
00:36:04,000 --> 00:36:06,000
我们要宣扬大家来开始

924
00:36:06,000 --> 00:36:08,000
秉系 TCP

925
00:36:08,000 --> 00:36:12,000
在不该使用 TCP 的地方

926
00:36:12,000 --> 00:36:13,000
就不要使用 TCP

927
00:36:14,000 --> 00:36:15,000
然后

928
00:36:15,000 --> 00:36:16,000
对

929
00:36:16,000 --> 00:36:18,000
其实他的诉求就是说

930
00:36:18,000 --> 00:36:21,000
你要尽量去采用 UDP 协议

931
00:36:21,000 --> 00:36:22,000
做一些

932
00:36:23,000 --> 00:36:25,000
本来不该有 TCP 完整

933
00:36:25,000 --> 00:36:29,000
或者是使用 TCP 协议会太重的场合之下

934
00:36:29,000 --> 00:36:30,000
主要有哪些呢

935
00:36:30,000 --> 00:36:31,000
可以举几个例子吗

936
00:36:32,000 --> 00:36:32,000
对

937
00:36:32,000 --> 00:36:33,000
比如说他举的例子

938
00:36:33,000 --> 00:36:36,000
像 Google 开发了

939
00:36:36,000 --> 00:36:37,000
叫 Quick

940
00:36:38,000 --> 00:36:40,000
Quick 协议其实就是一个

941
00:36:41,000 --> 00:36:44,000
以基于 UDP 的传输协议

942
00:36:45,000 --> 00:36:46,000
或者是他写了一些

943
00:36:46,000 --> 00:36:48,000
比如说 NDNS

944
00:36:48,000 --> 00:36:48,000
或者是 NTP

945
00:36:48,000 --> 00:36:49,000
或者 RTP

946
00:36:49,000 --> 00:36:52,000
其实全都是基于 UDP 的协议

947
00:36:52,000 --> 00:36:54,000
然后他的

948
00:36:54,000 --> 00:36:57,000
这个 Manifesto 的要点就是

949
00:36:57,000 --> 00:36:59,000
如果你开发一个

950
00:37:00,000 --> 00:37:02,000
比较依赖实时性

951
00:37:03,000 --> 00:37:05,000
比较强调不能有 Letsy

952
00:37:06,000 --> 00:37:09,000
但是又能接受丢一些包的 APP 的话

953
00:37:09,000 --> 00:37:11,000
那其实用 TCP 是一个很好的选择

954
00:37:12,000 --> 00:37:14,000
他还举了 Torrent

955
00:37:14,000 --> 00:37:16,000
就是 BTC 下载的那个公司

956
00:37:17,000 --> 00:37:19,000
组织所开发的所谓叫什么

957
00:37:22,000 --> 00:37:23,000
MuteTP

958
00:37:24,000 --> 00:37:24,000
OK

959
00:37:25,000 --> 00:37:28,000
Mute 就是一个西大字母的 MuteTP

960
00:37:29,000 --> 00:37:30,000
Transfer Protocol

961
00:37:30,000 --> 00:37:32,000
也是基于 UDP 的

962
00:37:32,000 --> 00:37:32,000
对

963
00:37:33,000 --> 00:37:34,000
Mute 这里要解释一下

964
00:37:34,000 --> 00:37:37,000
Mute 就是在对应到英文

965
00:37:37,000 --> 00:37:38,000
就是 Micro 的意思

966
00:37:38,000 --> 00:37:39,000
V 型

967
00:37:39,000 --> 00:37:39,000
就很小

968
00:37:39,000 --> 00:37:41,000
V 型 CP

969
00:37:41,000 --> 00:37:43,000
V 型 Control Protocol 这样的一个意思

970
00:37:43,000 --> 00:37:45,000
他晚上有这么一段话

971
00:37:45,000 --> 00:37:46,000
就说 TCP 的问题是什么

972
00:37:47,000 --> 00:37:47,000
就说

973
00:38:13,000 --> 00:38:16,000
这段话有点绕

974
00:38:16,000 --> 00:38:17,000
然后有点长

975
00:38:17,000 --> 00:38:19,000
然后里面有涉及到很多概念

976
00:38:19,000 --> 00:38:22,000
可能要解释一下才能够理解

977
00:38:22,000 --> 00:38:24,000
如果不是学网络通信的话

978
00:38:24,000 --> 00:38:26,000
其实我们也不是学网络通信

979
00:38:26,000 --> 00:38:27,000
我们是半调脂水

980
00:38:27,000 --> 00:38:28,000
但是就尽量

981
00:38:28,000 --> 00:38:30,000
尽量解释一下什么意思

982
00:38:30,000 --> 00:38:31,000
就是说我们是在说

983
00:38:31,000 --> 00:38:32,000
我们是在说

984
00:38:32,000 --> 00:38:34,000
我们是在说

985
00:38:34,000 --> 00:38:35,000
我们是在说

986
00:38:35,000 --> 00:38:35,000
我们是在说

987
00:38:35,000 --> 00:38:37,000
我们是在说

988
00:38:37,000 --> 00:38:37,000
我们是在说

989
00:38:37,000 --> 00:38:38,000
我们是在说

990
00:38:38,000 --> 00:38:39,000
我们是在说

991
00:38:39,000 --> 00:38:39,000
我们是在说

992
00:38:39,000 --> 00:38:40,000
我们是在说

993
00:38:40,000 --> 00:38:41,000
我们是在说

994
00:38:41,000 --> 00:38:42,000
我们是在说

995
00:38:42,000 --> 00:38:43,000
我们是在说

996
00:38:43,000 --> 00:38:43,000
解释一下什么意思

997
00:38:44,000 --> 00:38:45,000
TCP 的主要问题就是说

998
00:38:45,000 --> 00:38:46,000
他有一个

999
00:38:46,000 --> 00:38:47,000
TCP 我们知道他提供一个

1000
00:38:47,000 --> 00:38:49,000
所谓的这个排序的保证

1001
00:38:49,000 --> 00:38:50,000
就是说你先发的报

1002
00:38:50,000 --> 00:38:51,000
一定是先收到的

1003
00:38:53,000 --> 00:38:54,000
后发的报是后收到的

1004
00:38:55,000 --> 00:38:57,000
但这个是一个非常强的

1005
00:38:57,000 --> 00:38:59,000
这么一个感染器

1006
00:38:59,000 --> 00:39:00,000
很强的一个保证

1007
00:39:01,000 --> 00:39:02,000
就是因为在实际传送

1008
00:39:02,000 --> 00:39:03,000
我们的网络传送

1009
00:39:03,000 --> 00:39:05,000
并不是说严格是先入先出

1010
00:39:05,000 --> 00:39:07,000
因为跟一直走的路径不一样

1011
00:39:08,000 --> 00:39:09,000
和这个可能一些什么延迟

1012
00:39:09,000 --> 00:39:11,000
或丢包的情况不一样

1013
00:39:11,000 --> 00:39:12,000
他是要

1014
00:39:12,000 --> 00:39:13,000
就是你的超级程底层

1015
00:39:13,000 --> 00:39:15,000
就 TCP 这个鞋这一层

1016
00:39:15,000 --> 00:39:16,000
是要做一些恶化的工作

1017
00:39:16,000 --> 00:39:17,000
去把那些

1018
00:39:17,000 --> 00:39:19,000
可能是乱序来的包

1019
00:39:19,000 --> 00:39:20,000
重新组合成有序的

1020
00:39:20,000 --> 00:39:22,000
这样的话会有什么问题呢

1021
00:39:22,000 --> 00:39:23,000
就是说

1022
00:39:24,000 --> 00:39:25,000
一个

1023
00:39:25,000 --> 00:39:26,000
假设你发的包

1024
00:39:26,000 --> 00:39:27,000
说明是 12345

1025
00:39:27,000 --> 00:39:28,000
这样说你发

1026
00:39:28,000 --> 00:39:29,000
里面还有这个 TCP 的

1027
00:39:29,000 --> 00:39:30,000
这个排序保证

1028
00:39:30,000 --> 00:39:32,000
你收到的也是 12345

1029
00:39:32,000 --> 00:39:33,000
但是有可能

1030
00:39:33,000 --> 00:39:34,000
在传送过程中

1031
00:39:34,000 --> 00:39:35,000
2345 都正常过来了

1032
00:39:35,000 --> 00:39:36,000
但是一可能被

1033
00:39:36,000 --> 00:39:37,000
被 drop 掉

1034
00:39:37,000 --> 00:39:38,000
就是在传送过程中

1035
00:39:38,000 --> 00:39:40,000
被丢掉或者损坏了

1036
00:39:40,000 --> 00:39:40,000
这叫重发

1037
00:39:41,000 --> 00:39:42,000
重发的话

1038
00:39:42,000 --> 00:39:43,000
你得等那个什么

1039
00:39:43,000 --> 00:39:43,000
有这个

1040
00:39:43,000 --> 00:39:44,000
这个 ACK

1041
00:39:44,000 --> 00:39:45,000
就是

1042
00:39:45,000 --> 00:39:46,000
就是这个叫什么

1043
00:39:46,000 --> 00:39:47,000
Achkinolegment

1044
00:39:47,000 --> 00:39:48,000
这个中文叫什么

1045
00:39:50,000 --> 00:39:51,000
确认接受

1046
00:39:51,000 --> 00:39:53,000
对确认接受这个机制

1047
00:39:53,000 --> 00:39:54,000
就会导致说

1048
00:39:54,000 --> 00:39:55,000
你得等那个

1049
00:39:55,000 --> 00:39:56,000
比较久的时间

1050
00:39:56,000 --> 00:39:57,000
才能够

1051
00:39:57,000 --> 00:39:57,000
那个才

1052
00:39:57,000 --> 00:39:58,000
那个发送方才知道

1053
00:39:58,000 --> 00:40:00,000
哦 AE 那个包

1054
00:40:00,000 --> 00:40:01,000
已经丢

1055
00:40:01,000 --> 00:40:02,000
已经被 drop 掉了

1056
00:40:02,000 --> 00:40:03,000
没有对方没有收到

1057
00:40:03,000 --> 00:40:04,000
我还得再重发

1058
00:40:04,000 --> 00:40:06,000
但这个相对延迟的

1059
00:40:06,000 --> 00:40:08,000
等待的过程中

1060
00:40:08,000 --> 00:40:09,000
对方那边

1061
00:40:09,000 --> 00:40:11,000
即便他的那个

1062
00:40:11,000 --> 00:40:12,000
那个 TCP 协议内层

1063
00:40:12,000 --> 00:40:14,000
是已经拿到了 2345

1064
00:40:14,000 --> 00:40:14,000
这么多个包

1065
00:40:14,000 --> 00:40:15,000
他因为他没有 1

1066
00:40:16,000 --> 00:40:17,000
他没有办法

1067
00:40:17,000 --> 00:40:18,000
向上层应用说

1068
00:40:18,000 --> 00:40:18,000
提供说

1069
00:40:18,000 --> 00:40:18,000
哎

1070
00:40:18,000 --> 00:40:21,000
这个数据其实 80%

1071
00:40:21,000 --> 00:40:21,000
已经有了

1072
00:40:21,000 --> 00:40:23,000
但最开始的 20%

1073
00:40:23,000 --> 00:40:24,000
是还没收到

1074
00:40:24,000 --> 00:40:24,000
你

1075
00:40:24,000 --> 00:40:26,000
你是就等着吧

1076
00:40:26,000 --> 00:40:26,000
反正我现在

1077
00:40:26,000 --> 00:40:27,000
我什么也不给你

1078
00:40:27,000 --> 00:40:28,000
你就只能等

1079
00:40:28,000 --> 00:40:29,000
你也只能等着

1080
00:40:29,000 --> 00:40:30,000
这个就是说

1081
00:40:30,000 --> 00:40:30,000
这是一种叫

1082
00:40:30,000 --> 00:40:32,000
所谓的 head of line blocking

1083
00:40:32,000 --> 00:40:34,000
就是说头部阻塞

1084
00:40:34,000 --> 00:40:35,000
不知道这翻译合不合适

1085
00:40:35,000 --> 00:40:37,000
就是因为一个火车头的

1086
00:40:38,000 --> 00:40:38,000
前面那节

1087
00:40:38,000 --> 00:40:39,000
那节没有

1088
00:40:39,000 --> 00:40:40,000
那就没有没有到

1089
00:40:40,000 --> 00:40:42,000
导致后面的虽然到了

1090
00:40:42,000 --> 00:40:43,000
但是也没法交货给你

1091
00:40:43,000 --> 00:40:44,000
但其实这个是很蠢的

1092
00:40:44,000 --> 00:40:46,000
我们知道对于很多这种

1093
00:40:46,000 --> 00:40:47,000
实际应用来讲

1094
00:40:47,000 --> 00:40:48,000
他并不是特别在意

1095
00:40:48,000 --> 00:40:49,000
说这个

1096
00:40:49,000 --> 00:40:50,000
一定要按某一个

1097
00:40:50,000 --> 00:40:51,000
机制的顺序

1098
00:40:51,000 --> 00:40:51,000
到头

1099
00:40:51,000 --> 00:40:52,000
头递给你的信息

1100
00:40:52,000 --> 00:40:53,000
对吧

1101
00:40:53,000 --> 00:40:53,000
就简单一个

1102
00:40:53,000 --> 00:40:54,000
我们说

1103
00:40:54,000 --> 00:40:55,000
打开一个网页

1104
00:40:55,000 --> 00:40:55,000
对吧

1105
00:40:55,000 --> 00:40:56,000
传到来说我们

1106
00:40:57,000 --> 00:40:58,000
我们得等那个

1107
00:40:58,000 --> 00:40:59,000
那个每一个

1108
00:40:59,000 --> 00:40:59,000
那个 html 代码

1109
00:40:59,000 --> 00:41:01,000
一个一个字符的传过来

1110
00:41:01,000 --> 00:41:02,000
我们才可以组成显示

1111
00:41:02,000 --> 00:41:03,000
这其实并不是的

1112
00:41:03,000 --> 00:41:04,000
现在流量其实很聪明的

1113
00:41:04,000 --> 00:41:05,000
大概解析片段嘛

1114
00:41:06,000 --> 00:41:06,000
对吧

1115
00:41:07,000 --> 00:41:08,000
那可以说

1116
00:41:08,000 --> 00:41:09,000
我们先说到后面的

1117
00:41:09,000 --> 00:41:11,000
看看那里有一个 JS

1118
00:41:11,000 --> 00:41:12,000
前面那里有一个

1119
00:41:13,000 --> 00:41:14,000
其他什么东西

1120
00:41:14,000 --> 00:41:15,000
也是可以主散

1121
00:41:15,000 --> 00:41:16,000
可能这个例子还不是很好

1122
00:41:16,000 --> 00:41:17,000
可能流量器解析

1123
00:41:17,000 --> 00:41:19,000
还是有一些这个顺序依赖的

1124
00:41:19,000 --> 00:41:21,000
我们再举一些相对来说比较

1125
00:41:23,000 --> 00:41:24,000
更容易讲的一列列的

1126
00:41:24,000 --> 00:41:25,000
就是囤图片对吧

1127
00:41:25,000 --> 00:41:27,000
你知道像那个像 jpeg 图片

1128
00:41:27,000 --> 00:41:27,000
它是

1129
00:41:27,000 --> 00:41:28,000
其实我们是可以

1130
00:41:28,000 --> 00:41:29,000
其实可以分块加载的

1131
00:41:29,000 --> 00:41:30,000
就是假设我们把这个图片

1132
00:41:30,000 --> 00:41:31,000
或者视频流

1133
00:41:31,000 --> 00:41:32,000
最简单的视频流

1134
00:41:32,000 --> 00:41:34,000
你一针看到并不重要

1135
00:41:35,000 --> 00:41:35,000
没错

1136
00:41:35,000 --> 00:41:37,000
就是你甚至可以说

1137
00:41:37,000 --> 00:41:38,000
我先收到后面的

1138
00:41:38,000 --> 00:41:39,000
在 buffer

1139
00:41:39,000 --> 00:41:39,000
就是说

1140
00:41:39,000 --> 00:41:40,000
所以先把先收到

1141
00:41:40,000 --> 00:41:41,000
我就存起来嘛

1142
00:41:41,000 --> 00:41:42,000
然后待会再放

1143
00:41:42,000 --> 00:41:42,000
对不对

1144
00:41:43,000 --> 00:41:45,000
就其实会有这么一些问题的

1145
00:41:45,000 --> 00:41:46,000
但是因为

1146
00:41:46,000 --> 00:41:46,000
由于这个

1147
00:41:46,000 --> 00:41:48,000
我们现在这个整个网络技术设施

1148
00:41:48,000 --> 00:41:51,000
还是严重以 TCP 为主

1149
00:41:51,000 --> 00:41:53,000
就起码从应用层面的角度来看

1150
00:41:54,000 --> 00:41:56,000
就其实体验是并不好的

1151
00:41:56,000 --> 00:41:57,000
当然这也会在刚刚你提到

1152
00:41:57,000 --> 00:41:58,000
像那个一些应用

1153
00:41:58,000 --> 00:41:59,000
就说

1154
00:41:59,000 --> 00:42:01,000
像 Google 新出那个 Quick 这种协议

1155
00:42:01,000 --> 00:42:02,000
它就是为了解决这个问题

1156
00:42:02,000 --> 00:42:03,000
就是说

1157
00:42:03,000 --> 00:42:04,000
我们知道

1158
00:42:04,000 --> 00:42:06,000
在给定正应用情况下

1159
00:42:06,000 --> 00:42:08,000
我们如果不保证

1160
00:42:08,000 --> 00:42:10,000
严格保证这个这个顺序

1161
00:42:10,000 --> 00:42:11,000
投递

1162
00:42:11,000 --> 00:42:12,000
我们其实可以获得更好的

1163
00:42:12,000 --> 00:42:13,000
这个传输的

1164
00:42:13,000 --> 00:42:15,000
这个一个是传输带宽也好

1165
00:42:15,000 --> 00:42:16,000
因为有这个 TCP

1166
00:42:16,000 --> 00:42:17,000
还有一些其他的

1167
00:42:17,000 --> 00:42:19,000
流控的方法去去去解决

1168
00:42:19,000 --> 00:42:20,000
如果遇到丢包

1169
00:42:20,000 --> 00:42:21,000
它会把那个传输带宽降低嘛

1170
00:42:21,000 --> 00:42:22,000
对吧

1171
00:42:22,000 --> 00:42:23,000
然后再一天逐步恢复

1172
00:42:23,000 --> 00:42:24,000
这样子一个过程

1173
00:42:24,000 --> 00:42:25,000
但是其实如果

1174
00:42:26,000 --> 00:42:27,000
我们见面

1175
00:42:27,000 --> 00:42:28,000
面对现在的一些网络状况

1176
00:42:28,000 --> 00:42:29,000
特别是像这个移动

1177
00:42:29,000 --> 00:42:31,000
那个就是手机网络

1178
00:42:31,000 --> 00:42:33,000
它是一个高度延迟不稳定的

1179
00:42:34,000 --> 00:42:34,000
这种情况

1180
00:42:34,000 --> 00:42:37,000
其实是对 TCP 这种协议来说

1181
00:42:37,000 --> 00:42:37,000
是不太适合

1182
00:42:37,000 --> 00:42:39,000
在这种网络情况下用

1183
00:42:39,000 --> 00:42:39,000
但是我们没有办法

1184
00:42:39,000 --> 00:42:40,000
就是说一个

1185
00:42:40,000 --> 00:42:42,000
有一个历史依赖的

1186
00:42:42,000 --> 00:42:43,000
这个路径依赖的问题

1187
00:42:43,000 --> 00:42:44,000
现在已经有了

1188
00:42:44,000 --> 00:42:45,000
你明白还记得用

1189
00:42:45,000 --> 00:42:45,000
但是我们就说

1190
00:42:45,000 --> 00:42:47,000
现在我们一直认识到的

1191
00:42:47,000 --> 00:42:48,000
有这么一些问题

1192
00:42:48,000 --> 00:42:49,000
那我们就说

1193
00:42:50,000 --> 00:42:51,000
从这个协议层来讲

1194
00:42:51,000 --> 00:42:53,000
我们以一个更加简单

1195
00:42:53,000 --> 00:42:54,000
没有那么多保护

1196
00:42:54,000 --> 00:42:55,000
没有那么多保证的

1197
00:42:55,000 --> 00:42:57,000
UDP 协议的基础上在

1198
00:42:57,000 --> 00:42:59,000
构建出这么一个

1199
00:43:00,000 --> 00:43:01,000
就是应用层独立的协议

1200
00:43:01,000 --> 00:43:03,000
然后来满足

1201
00:43:03,000 --> 00:43:04,000
就提供更低的延迟

1202
00:43:04,000 --> 00:43:05,000
更好的带宽

1203
00:43:05,000 --> 00:43:05,000
这么一些

1204
00:43:05,000 --> 00:43:06,000
最终得到的是用户

1205
00:43:06,000 --> 00:43:07,000
是更好的体验

1206
00:43:09,000 --> 00:43:09,000
对

1207
00:43:09,000 --> 00:43:10,000
对差不多就是

1208
00:43:10,000 --> 00:43:12,000
当然从 TCP 的角度来看

1209
00:43:13,000 --> 00:43:14,000
也不是没有过

1210
00:43:14,000 --> 00:43:16,000
就是试图改善 TCP 的

1211
00:43:16,000 --> 00:43:18,000
这种延迟的尝试

1212
00:43:18,000 --> 00:43:18,000
比如说

1213
00:43:19,000 --> 00:43:21,000
曾经有过一个叫

1214
00:43:21,000 --> 00:43:23,000
TCP Vegas 的项目

1215
00:43:23,000 --> 00:43:25,000
我相信甚至

1216
00:43:25,000 --> 00:43:28,000
至少 FreeBSD 的内核里面

1217
00:43:28,000 --> 00:43:29,000
也已经把它

1218
00:43:30,000 --> 00:43:31,000
编译进去

1219
00:43:31,000 --> 00:43:32,000
就是现在

1220
00:43:32,000 --> 00:43:33,000
BSD 应该已经支持

1221
00:43:34,000 --> 00:43:36,000
所谓的 TCP Vegas

1222
00:43:36,000 --> 00:43:36,000
这样一种

1223
00:43:37,000 --> 00:43:39,000
叫做 Congestion Avoidance

1224
00:43:39,000 --> 00:43:41,000
Aggression 的改善版本

1225
00:43:41,000 --> 00:43:43,000
就是使用这种 TCP 的

1226
00:43:43,000 --> 00:43:44,000
怎么说方言

1227
00:43:44,000 --> 00:43:47,000
你可以获得更好的

1228
00:43:47,000 --> 00:43:48,000
更低的延迟

1229
00:43:48,000 --> 00:43:49,000
因为它

1230
00:43:49,000 --> 00:43:51,000
试图从算法层面上去

1231
00:43:51,000 --> 00:43:53,000
减少 TCP 所

1232
00:43:53,000 --> 00:43:55,000
可能产生的网络阻塞

1233
00:43:55,000 --> 00:43:56,000
但是

1234
00:43:58,000 --> 00:43:59,000
出于历史原因

1235
00:43:59,000 --> 00:44:00,000
就是 Worth is better

1236
00:44:00,000 --> 00:44:02,000
普通 TCP 的大部分时候

1237
00:44:02,000 --> 00:44:03,000
是

1238
00:44:03,000 --> 00:44:04,000
大部分时候是足够用的

1239
00:44:04,000 --> 00:44:07,000
所以 TCP Vegas 的项目

1240
00:44:07,000 --> 00:44:08,000
一直没有普及开来

1241
00:44:08,000 --> 00:44:10,000
至少我相信 Windows 应该是不支持的

1242
00:44:11,000 --> 00:44:12,000
所以

1243
00:44:13,000 --> 00:44:15,000
但 UDP 是到处都在

1244
00:44:15,000 --> 00:44:16,000
所以基于 UDP 来开发

1245
00:44:16,000 --> 00:44:18,000
这种所谓的 NoTCP 的

1246
00:44:18,000 --> 00:44:20,000
专门的传送协议

1247
00:44:21,000 --> 00:44:22,000
应该将来会

1248
00:44:22,000 --> 00:44:25,000
比较成为某种潮流趋势了

1249
00:44:25,000 --> 00:44:28,000
当然并不意味着我们要抛弃 TCP

1250
00:44:28,000 --> 00:44:29,000
就好像 NoSQL

1251
00:44:29,000 --> 00:44:30,000
并不是

1252
00:44:30,000 --> 00:44:32,000
真的 NoSQL

1253
00:44:32,000 --> 00:44:35,000
NoTCP 也是 Not onlyTCP

1254
00:44:36,000 --> 00:44:37,000
没错

1255
00:44:37,000 --> 00:44:38,000
但是这里面其实

1256
00:44:38,000 --> 00:44:40,000
我觉得问题还是蛮多的

1257
00:44:40,000 --> 00:44:41,000
首先一个就是说

1258
00:44:41,000 --> 00:44:43,000
如果所有的应用层

1259
00:44:43,000 --> 00:44:45,000
都自己去基于 UDP 来

1260
00:44:45,000 --> 00:44:46,000
就因为 UDP 保证这些东西

1261
00:44:47,000 --> 00:44:47,000
所以它的

1262
00:44:48,000 --> 00:44:51,000
延迟和贷款就会好一些

1263
00:44:51,000 --> 00:44:53,000
但其实还是有很多问题

1264
00:44:53,000 --> 00:44:54,000
因为网络

1265
00:44:54,000 --> 00:44:56,000
如果我们想象的那么简单

1266
00:44:56,000 --> 00:44:57,000
比如说可以随便提几个

1267
00:44:57,000 --> 00:44:59,000
比较常见的问题

1268
00:44:59,000 --> 00:45:00,000
第一个是说

1269
00:45:00,000 --> 00:45:02,000
从这个成本上来讲

1270
00:45:02,000 --> 00:45:03,000
所有的应用都要自己

1271
00:45:03,000 --> 00:45:04,000
重新发明一遍轮子

1272
00:45:04,000 --> 00:45:04,000
对吧

1273
00:45:04,000 --> 00:45:06,000
本来有说系统可以解决 TCP

1274
00:45:06,000 --> 00:45:08,000
提供顺序保证

1275
00:45:08,000 --> 00:45:09,000
你写应用的时候

1276
00:45:09,000 --> 00:45:10,000
你就有一个假设可以做

1277
00:45:10,000 --> 00:45:12,000
其实可以减化很多事情

1278
00:45:12,000 --> 00:45:14,000
现在就是说你没有这一层

1279
00:45:14,000 --> 00:45:14,000
你要自己去

1280
00:45:14,000 --> 00:45:16,000
要么你自己去所谓

1281
00:45:16,000 --> 00:45:17,000
自己发明轮子

1282
00:45:17,000 --> 00:45:18,000
自己再搞一遍

1283
00:45:18,000 --> 00:45:20,000
类似这种 Quick 的协议

1284
00:45:20,000 --> 00:45:21,000
或者你就直接用现成的

1285
00:45:21,000 --> 00:45:22,000
Quick 协议

1286
00:45:22,000 --> 00:45:24,000
但是即便是你用现成的

1287
00:45:24,000 --> 00:45:24,000
这种 Quick 协议

1288
00:45:24,000 --> 00:45:25,000
它还是有一个问题

1289
00:45:25,000 --> 00:45:27,000
就是它是一个应用层的东西

1290
00:45:27,000 --> 00:45:28,000
应用层东西有什么不好

1291
00:45:29,000 --> 00:45:30,000
就是应用层东西

1292
00:45:30,000 --> 00:45:32,000
它互相互相之间

1293
00:45:32,000 --> 00:45:34,000
是没有办法直接沟通协调的

1294
00:45:34,000 --> 00:45:36,000
因为处于权限的问题

1295
00:45:36,000 --> 00:45:37,000
和安全的原因

1296
00:45:37,000 --> 00:45:37,000
对

1297
00:45:38,000 --> 00:45:38,000
对

1298
00:45:38,000 --> 00:45:40,000
所以这会造成说

1299
00:45:40,000 --> 00:45:41,000
同一个系统上面的

1300
00:45:42,000 --> 00:45:45,000
跑着多个基于 UDP 协议的

1301
00:45:45,000 --> 00:45:46,000
应用会互相打架

1302
00:45:47,000 --> 00:45:48,000
一个常见的例子就是说

1303
00:45:48,000 --> 00:45:50,000
可能单机上还不是很明显

1304
00:45:50,000 --> 00:45:51,000
因为都毕竟是

1305
00:45:51,000 --> 00:45:52,000
一个人用

1306
00:45:52,000 --> 00:45:54,000
但是你像如果你几个人

1307
00:45:54,000 --> 00:45:55,000
在共用一个路由器

1308
00:45:55,000 --> 00:45:55,000
比如说

1309
00:45:55,000 --> 00:45:58,000
你在上网打游戏

1310
00:45:58,000 --> 00:45:59,000
那边你的室友在 BT

1311
00:46:00,000 --> 00:46:02,000
然后你就比较痛苦了

1312
00:46:03,000 --> 00:46:04,000
你没有办法

1313
00:46:05,000 --> 00:46:06,000
你没办法去控制他电脑

1314
00:46:06,000 --> 00:46:07,000
去做一些事情

1315
00:46:07,000 --> 00:46:07,000
你唯一能做到

1316
00:46:07,000 --> 00:46:09,000
就是在路由器上

1317
00:46:09,000 --> 00:46:10,000
去做一些流控

1318
00:46:10,000 --> 00:46:11,000
什么 Quality of Service

1319
00:46:11,000 --> 00:46:13,000
就是服务质量的一些控制

1320
00:46:14,000 --> 00:46:16,000
但是你是并没有直接控制他的电脑的

1321
00:46:17,000 --> 00:46:18,000
这个情况就可以类比为

1322
00:46:18,000 --> 00:46:19,000
如果大家都

1323
00:46:19,000 --> 00:46:20,000
就你在同一台机上的

1324
00:46:20,000 --> 00:46:22,000
所有大部分应用都自己

1325
00:46:22,000 --> 00:46:24,000
搞这么一套 UDP 的话

1326
00:46:24,000 --> 00:46:26,000
大家其实可能会互相抢占资源的

1327
00:46:28,000 --> 00:46:28,000
对

1328
00:46:29,000 --> 00:46:31,000
这好像你和你的邻居们

1329
00:46:31,000 --> 00:46:32,000
只有那么一个邮筒

1330
00:46:32,000 --> 00:46:33,000
然后你每天要寄很多邮筒信

1331
00:46:33,000 --> 00:46:34,000
把邮筒塞马了

1332
00:46:34,000 --> 00:46:37,000
你邻居把信塞不进去了

1333
00:46:37,000 --> 00:46:37,000
对

1334
00:46:39,000 --> 00:46:41,000
我之前想起知乎上有一个人说

1335
00:46:41,000 --> 00:46:42,000
他们说什么

1336
00:46:42,000 --> 00:46:45,000
他嫌宿舍里面其他人打游戏太吵

1337
00:46:45,000 --> 00:46:47,000
然后他把一个网线

1338
00:46:48,000 --> 00:46:50,000
插在墙上的网线接口

1339
00:46:50,000 --> 00:46:51,000
就是他自己的那个位置上

1340
00:46:51,000 --> 00:46:53,000
没有接电脑

1341
00:46:53,000 --> 00:46:54,000
没有接网线

1342
00:46:54,000 --> 00:46:55,000
然后他

1343
00:46:55,000 --> 00:46:57,000
把网线连到床上

1344
00:46:57,000 --> 00:47:01,000
然后在床上把两网线的两端

1345
00:47:02,000 --> 00:47:04,000
绑在一起

1346
00:47:04,000 --> 00:47:08,000
这样他只要用大拇角指去踩一下

1347
00:47:08,000 --> 00:47:09,000
整个宿舍就断网了

1348
00:47:11,000 --> 00:47:14,000
Effectively 让所有人都玩不了网游

1349
00:47:14,000 --> 00:47:15,000
然后可以安心的睡觉

1350
00:47:16,000 --> 00:47:17,000
太机智了

1351
00:47:17,000 --> 00:47:18,000
这哥们

1352
00:47:18,000 --> 00:47:19,000
竟然还活下来

1353
00:47:19,000 --> 00:47:21,000
没有被室友砍死也是不容易

1354
00:47:21,000 --> 00:47:22,000
没有被发现

1355
00:47:24,000 --> 00:47:25,000
室友太蠢了

1356
00:47:26,000 --> 00:47:27,000
好吧

1357
00:47:27,000 --> 00:47:30,000
如果遇到像我这种吹毛求疵的

1358
00:47:30,000 --> 00:47:31,000
一定会去追根

1359
00:47:31,000 --> 00:47:32,000
到底是哪个线

1360
00:47:32,000 --> 00:47:32,000
你出了问题

1361
00:47:33,000 --> 00:47:34,000
就会发现是他干的

1362
00:47:35,000 --> 00:47:38,000
这是知识改变命运的活生生的例子

1363
00:47:38,000 --> 00:47:39,000
只有你懂这些

1364
00:47:39,000 --> 00:47:41,000
你就可以去玩弄别人

1365
00:47:41,000 --> 00:47:43,000
所以什么 knowledge is power

1366
00:47:43,000 --> 00:47:44,000
知识就是权力

1367
00:47:46,000 --> 00:47:48,000
刚才这个核心问题点就是说

1368
00:47:49,000 --> 00:47:52,000
CCP 并不是一个完全不好的东西

1369
00:47:52,000 --> 00:47:54,000
它提供有一些很基本的保证

1370
00:47:54,000 --> 00:47:55,000
就是说大家

1371
00:47:55,000 --> 00:47:58,000
资源分配是由系统自己来说的

1372
00:47:58,000 --> 00:47:59,000
然后系统不会说

1373
00:47:59,000 --> 00:48:02,000
特别偏向某一些软件而不

1374
00:48:02,000 --> 00:48:04,000
而放弃另外一些软件

1375
00:48:04,000 --> 00:48:05,000
这样就是会均衡一点

1376
00:48:06,000 --> 00:48:08,000
特别是在中国这种大环境下

1377
00:48:08,000 --> 00:48:11,000
是搞指不定哪个流氓软件

1378
00:48:11,000 --> 00:48:12,000
你都给你装上这种东西之后

1379
00:48:12,000 --> 00:48:13,000
你就很哭哈哈了

1380
00:48:14,000 --> 00:48:15,000
但是

1381
00:48:15,000 --> 00:48:16,000
对是一个

1382
00:48:16,000 --> 00:48:17,000
其实说白了

1383
00:48:17,000 --> 00:48:19,000
最终说到底还是一个权力的

1384
00:48:19,000 --> 00:48:21,000
谁说了算的问题

1385
00:48:21,000 --> 00:48:22,000
就是你相信你的系统

1386
00:48:22,000 --> 00:48:23,000
是一个

1387
00:48:23,000 --> 00:48:26,000
更加公平公开公正的一个

1388
00:48:27,000 --> 00:48:28,000
参与者吗

1389
00:48:28,000 --> 00:48:29,000
还是说

1390
00:48:29,000 --> 00:48:32,000
你说我觉得你为了追求某一个用户

1391
00:48:32,000 --> 00:48:33,000
某一个应用的体验

1392
00:48:33,000 --> 00:48:35,000
这个快好

1393
00:48:35,000 --> 00:48:36,000
这个响应低

1394
00:48:37,000 --> 00:48:39,000
愿意放弃其他一些应用的

1395
00:48:40,000 --> 00:48:42,000
响应速度还是怎么样

1396
00:48:42,000 --> 00:48:43,000
就这里面其实是

1397
00:48:43,000 --> 00:48:45,000
我觉得还有很多是要权衡的

1398
00:48:45,000 --> 00:48:47,000
并不是一个看起来

1399
00:48:47,000 --> 00:48:50,000
那么简单的纯技术的一个讨论

1400
00:48:51,000 --> 00:48:52,000
嗯没错

1401
00:48:54,000 --> 00:48:55,000
OK

1402
00:48:55,000 --> 00:48:58,000
接下来一条新闻是

1403
00:48:58,000 --> 00:49:00,000
我非常喜欢乐天的

1404
00:49:00,000 --> 00:49:01,000
就是

1405
00:49:01,000 --> 00:49:05,000
Google 在研发 Dart Language

1406
00:49:05,000 --> 00:49:08,000
用于开发 Android F

1407
00:49:08,000 --> 00:49:09,000
耶

1408
00:49:09,000 --> 00:49:12,000
为什么不是 Go

1409
00:49:12,000 --> 00:49:13,000
为什么不是 Go

1410
00:49:13,000 --> 00:49:14,000
我抗议

1411
00:49:14,000 --> 00:49:18,000
应该还是权衡利弊的结果吧

1412
00:49:18,000 --> 00:49:20,000
我觉得 Go 可能目前看来

1413
00:49:20,000 --> 00:49:22,000
还是不太适合开发

1414
00:49:23,000 --> 00:49:24,000
需要写很多界面的东西

1415
00:49:24,000 --> 00:49:25,000
我也不知道

1416
00:49:25,000 --> 00:49:29,000
就还是语法太弱小了

1417
00:49:30,000 --> 00:49:31,000
它不是弱小

1418
00:49:31,000 --> 00:49:32,000
就是 Go 太

1419
00:49:33,000 --> 00:49:34,000
太金刚钻了

1420
00:49:34,000 --> 00:49:37,000
它比较精干

1421
00:49:37,000 --> 00:49:39,000
它太小

1422
00:49:39,000 --> 00:49:40,000
嗯

1423
00:49:40,000 --> 00:49:41,000
不过这里可能要先解释一下

1424
00:49:41,000 --> 00:49:45,000
Dart 是一个什么类型的样子的语言

1425
00:49:46,000 --> 00:49:47,000
你需要解释吗

1426
00:49:48,000 --> 00:49:48,000
解释一下

1427
00:49:48,000 --> 00:49:51,000
我觉得并不是所有人都去关注这一块的

1428
00:49:51,000 --> 00:49:52,000
不知道就

1429
00:49:55,000 --> 00:49:56,000
Anyway 好

1430
00:49:56,000 --> 00:49:57,000
Dart 其实是就是

1431
00:49:57,000 --> 00:50:00,000
Chrome 的 V 8 Team

1432
00:50:00,000 --> 00:50:01,000
开发出来的一种语言

1433
00:50:04,000 --> 00:50:06,000
他们开发 Dart 的主要原因

1434
00:50:06,000 --> 00:50:08,000
也就是因为 JavaScript 和 Java 一样

1435
00:50:08,000 --> 00:50:09,000
就比较老了嘛

1436
00:50:10,000 --> 00:50:11,000
JavaScript 也是 95 年

1437
00:50:11,000 --> 00:50:13,000
20 一晃 20 年了

1438
00:50:13,000 --> 00:50:16,000
20 年这么老的一个 JavaScript 的语言

1439
00:50:16,000 --> 00:50:18,000
他们也希望

1440
00:50:18,000 --> 00:50:19,000
就好像微软的

1441
00:50:19,000 --> 00:50:21,000
像微软的 TypeScript 一样

1442
00:50:21,000 --> 00:50:23,000
也希望开发出一种东西来取它

1443
00:50:23,000 --> 00:50:24,000
取而代之

1444
00:50:25,000 --> 00:50:27,000
然后 Dart 就是这样一种

1445
00:50:29,000 --> 00:50:31,000
Google 希望它能够成为下一代

1446
00:50:31,000 --> 00:50:33,000
浏览器语言的语言

1447
00:50:33,000 --> 00:50:35,000
然后 Dart 现在有两种执行方式

1448
00:50:35,000 --> 00:50:38,000
一种是直接编译成它自己的讯息机的

1449
00:50:40,000 --> 00:50:40,000
IL

1450
00:50:41,000 --> 00:50:44,000
另外一种方式是把 Dart 编译为 JavaScript

1451
00:50:45,000 --> 00:50:46,000
我记得当时是

1452
00:50:47,000 --> 00:50:48,000
当时有过一个秘密

1453
00:50:48,000 --> 00:50:52,000
就是 Dart 写了一行 Hello World

1454
00:50:52,000 --> 00:50:54,000
然后编译出来 JavaScript 有 8 K

1455
00:50:56,000 --> 00:50:57,000
有什么

1456
00:50:57,000 --> 00:50:58,000
有个 overhead

1457
00:50:59,000 --> 00:51:01,000
有一个比较严重的 overhead

1458
00:51:01,000 --> 00:51:04,000
就是如果你把它编译成 JavaScript 的话

1459
00:51:04,000 --> 00:51:05,000
它会变得非常用手

1460
00:51:05,000 --> 00:51:10,000
但是相信目前状况已经有比较大的改善了

1461
00:51:10,000 --> 00:51:12,000
然后 Dart 这种语言

1462
00:51:12,000 --> 00:51:19,000
接下来即将被推广到 Android 应用开发上面

1463
00:51:19,000 --> 00:51:23,000
就是之前我们不是提到过 Android 的 App 可以

1464
00:51:24,000 --> 00:51:30,000
直接用 C++来写那种比较 performance critical 的 App

1465
00:51:30,000 --> 00:51:31,000
比如说游戏

1466
00:51:31,000 --> 00:51:34,000
然后现在 Google 决定说

1467
00:51:34,000 --> 00:51:34,000
好

1468
00:51:34,000 --> 00:51:35,000
你不写游戏的话

1469
00:51:35,000 --> 00:51:37,000
也可以采用 Java 之外的语言

1470
00:51:37,000 --> 00:51:38,000
就是 Dart

1471
00:51:39,000 --> 00:51:43,000
而且 Dart 最大的优势就是

1472
00:51:43,000 --> 00:51:45,000
或者他们的理念

1473
00:51:45,000 --> 00:51:46,000
他们的理想目标就是

1474
00:51:46,000 --> 00:51:50,000
希望能够用 Dart 写出来的 App 都跑得非常快

1475
00:51:50,000 --> 00:51:53,000
他们有个指标是 120 fps

1476
00:51:55,000 --> 00:51:57,000
60 fps 已经不足以满足了

1477
00:51:57,000 --> 00:51:58,000
是吧

1478
00:51:58,000 --> 00:51:59,000
没错

1479
00:52:00,000 --> 00:52:00,000
我们之前提到

1480
00:52:00,000 --> 00:52:02,000
不是我们之前

1481
00:52:02,000 --> 00:52:04,000
是你们之前提到的 Flipboard

1482
00:52:06,000 --> 00:52:08,000
在 Kines 上实现的 App 好像也只有 60 fps

1483
00:52:08,000 --> 00:52:09,000
对

1484
00:52:09,000 --> 00:52:11,000
因为你更快没有用

1485
00:52:11,000 --> 00:52:13,000
我们显示器只有刷 60 次

1486
00:52:13,000 --> 00:52:13,000
每秒

1487
00:52:14,000 --> 00:52:14,000
对

1488
00:52:14,000 --> 00:52:15,000
然后他们说好

1489
00:52:15,000 --> 00:52:18,000
我们要用 Dart 来写 120 fps 的 App

1490
00:52:19,000 --> 00:52:21,000
不过先浇个冷水

1491
00:52:22,000 --> 00:52:24,000
Dart 本来之前说是刚才也讲了

1492
00:52:24,000 --> 00:52:26,000
是本来是说在做进 Chrome

1493
00:52:26,000 --> 00:52:26,000
就替代

1494
00:52:26,000 --> 00:52:27,000
对你不叫替代

1495
00:52:27,000 --> 00:52:30,000
就是说和 JavaScript 所谓一个并

1496
00:52:30,000 --> 00:52:33,000
就是同时存在支持的官方支持的语言

1497
00:52:33,000 --> 00:52:37,000
但后来好像这事已经说不是了

1498
00:52:37,000 --> 00:52:39,000
就是说不进 Dart 语言

1499
00:52:39,000 --> 00:52:40,000
不进浏览器了

1500
00:52:40,000 --> 00:52:41,000
不进 Chrome 至少

1501
00:52:42,000 --> 00:52:44,000
这是什么时候的事情

1502
00:52:44,000 --> 00:52:45,000
就上个月

1503
00:52:45,000 --> 00:52:46,000
就最近

1504
00:52:46,000 --> 00:52:48,000
也不是就今年的

1505
00:52:48,000 --> 00:52:51,000
就最近一两个月之前的事情就确认说

1506
00:52:52,000 --> 00:52:52,000
不会了

1507
00:52:52,000 --> 00:52:53,000
就是

1508
00:52:53,000 --> 00:52:54,000
就别想了

1509
00:52:54,000 --> 00:52:56,000
你别想在浏览器里面直接用 Dart

1510
00:52:56,000 --> 00:52:56,000
对

1511
00:52:56,000 --> 00:52:57,000
就这个意思

1512
00:52:57,000 --> 00:53:01,000
所以将来 JavaScript 还是会继续主宰浏览器吗

1513
00:53:01,000 --> 00:53:02,000
没错

1514
00:53:03,000 --> 00:53:05,000
但他们现在的方向就有点变了

1515
00:53:05,000 --> 00:53:08,000
其实想法是这样子

1516
00:53:08,000 --> 00:53:12,000
就是说我们不直接去取代 JavaScript

1517
00:53:12,000 --> 00:53:15,000
但是我们推出一个

1518
00:53:15,000 --> 00:53:17,000
就跟 Mozella 的思路有点像

1519
00:53:17,000 --> 00:53:20,000
就是他们推出一个所谓精简版的 JavaScript

1520
00:53:20,000 --> 00:53:21,000
紫集

1521
00:53:21,000 --> 00:53:24,000
然后就其他的语言

1522
00:53:24,000 --> 00:53:25,000
你是可以就是 Transpile

1523
00:53:25,000 --> 00:53:26,000
就是

1524
00:53:27,000 --> 00:53:30,000
翻译编译成

1525
00:53:30,000 --> 00:53:33,000
JavaScript 紫集

1526
00:53:33,000 --> 00:53:36,000
然后这个紫集是如何选定出来的

1527
00:53:36,000 --> 00:53:37,000
就这个紫集能够

1528
00:53:37,000 --> 00:53:40,000
能够有足够的这种一种 Construct

1529
00:53:40,000 --> 00:53:41,000
是可以构建

1530
00:53:41,000 --> 00:53:44,000
就是可以支持你上面的语言的那些基础的功能的

1531
00:53:44,000 --> 00:53:45,000
然后

1532
00:53:45,000 --> 00:53:48,000
这个紫集在 JavaScript 是可以很好的被

1533
00:53:48,000 --> 00:53:51,000
这个什么 JusXinTime 的编译器优化的

1534
00:53:51,000 --> 00:53:52,000
这么一个

1535
00:53:52,000 --> 00:53:52,000
的字集

1536
00:53:52,000 --> 00:53:54,000
这样的话等于是说

1537
00:53:54,000 --> 00:53:56,000
我们把这个 JavaScript 作为一个

1538
00:53:56,000 --> 00:53:56,000
怎么说

1539
00:53:57,000 --> 00:53:59,000
类似于 C 或者是类似于

1540
00:53:59,000 --> 00:54:00,000
会编的这么一个角色

1541
00:54:00,000 --> 00:54:02,000
JavaScript 是新的集团语言

1542
00:54:03,000 --> 00:54:03,000
For the Web

1543
00:54:03,000 --> 00:54:04,000
没错

1544
00:54:04,000 --> 00:54:05,000
对

1545
00:54:05,000 --> 00:54:07,000
前一阵子一个 Hacker News 的标题

1546
00:54:09,000 --> 00:54:12,000
所以其实这个跟现在我们这个新闻里面讲的

1547
00:54:12,000 --> 00:54:14,000
说 Dart 直接用于

1548
00:54:14,000 --> 00:54:17,000
这个 Android 里面的 App 的编写

1549
00:54:17,000 --> 00:54:18,000
还是非常不一样

1550
00:54:18,000 --> 00:54:19,000
起码你说

1551
00:54:19,000 --> 00:54:21,000
用 Dart 的网页板件能够比较

1552
00:54:21,000 --> 00:54:23,000
畅快的方式还是说

1553
00:54:23,000 --> 00:54:25,000
先转成 JS 再说

1554
00:54:25,000 --> 00:54:26,000
那现在这个

1555
00:54:26,000 --> 00:54:29,000
这个就玩法就是完全不一样的一个过程

1556
00:54:29,000 --> 00:54:30,000
OK

1557
00:54:30,000 --> 00:54:32,000
然后 Dart 和 Android

1558
00:54:33,000 --> 00:54:35,000
它的名字不是叫 Dart 和 Android

1559
00:54:35,000 --> 00:54:38,000
而是有另外一个叫做 Sky

1560
00:54:39,000 --> 00:54:40,000
就有点

1561
00:54:41,000 --> 00:54:42,000
莫名其妙

1562
00:54:42,000 --> 00:54:43,000
为什么叫 Sky

1563
00:54:43,000 --> 00:54:44,000
这不光是莫名其妙

1564
00:54:44,000 --> 00:54:46,000
这个简直就是自讨苦吃

1565
00:54:46,000 --> 00:54:48,000
你知道最近是前一阵子上周

1566
00:54:48,000 --> 00:54:49,000
搜不到

1567
00:54:49,000 --> 00:54:49,000
对

1568
00:54:49,000 --> 00:54:50,000
最大的地方搜不到

1569
00:54:50,000 --> 00:54:52,000
搜不到就不说了

1570
00:54:52,000 --> 00:54:53,000
上周不是 Skype

1571
00:54:53,000 --> 00:54:54,000
被判

1572
00:54:54,000 --> 00:54:57,000
欧洲一个哪个国家我忘了

1573
00:54:57,000 --> 00:54:58,000
被欧洲一个法院说

1574
00:54:58,000 --> 00:54:59,000
判他商标侵权

1575
00:55:00,000 --> 00:55:01,000
Skype 电视网络

1576
00:55:03,000 --> 00:55:04,000
理由是因为

1577
00:55:04,000 --> 00:55:06,000
理由是前面都有一个 Sky

1578
00:55:06,000 --> 00:55:08,000
然后大家消费者可能会分不清楚

1579
00:55:08,000 --> 00:55:11,000
此 Sky 和 Sky 不是没有关系的

1580
00:55:12,000 --> 00:55:14,000
法国人与消费者都是傻逼呗

1581
00:55:14,000 --> 00:55:15,000
那是法国吗

1582
00:55:16,000 --> 00:55:17,000
Oh sorry

1583
00:55:17,000 --> 00:55:18,000
这不是法国的

1584
00:55:18,000 --> 00:55:19,000
我不确定是不是法国的

1585
00:55:20,000 --> 00:55:20,000
但是

1586
00:55:20,000 --> 00:55:22,000
这是在你们大欧洲的

1587
00:55:22,000 --> 00:55:24,000
某一个法院判决的结果

1588
00:55:24,000 --> 00:55:25,000
当时大家就觉得

1589
00:55:25,000 --> 00:55:26,000
德国人老干这种事情

1590
00:55:26,000 --> 00:55:28,000
就是你知道最开始 Google Mail

1591
00:55:28,000 --> 00:55:29,000
Gmail 想要进德国的时候

1592
00:55:29,000 --> 00:55:31,000
德国已经有一个叫什么

1593
00:55:31,000 --> 00:55:32,000
Gmail 之类的

1594
00:55:32,000 --> 00:55:34,000
那个我觉得可以理解

1595
00:55:34,000 --> 00:55:35,000
那个是可以注册商标的

1596
00:55:35,000 --> 00:55:37,000
你说这个 Sky 和 Sky

1597
00:55:37,000 --> 00:55:37,000
不是差的

1598
00:55:37,000 --> 00:55:39,000
这十万八千里呢

1599
00:55:40,000 --> 00:55:42,000
欧洲诡异多

1600
00:55:42,000 --> 00:55:43,000
这也是什么见怪不怪的吧

1601
00:55:43,000 --> 00:55:44,000
我觉得

1602
00:55:44,000 --> 00:55:44,000
那个什么

1603
00:55:44,000 --> 00:55:46,000
在稍后在以后再吐槽

1604
00:55:46,000 --> 00:55:48,000
我们就先说回这个

1605
00:55:48,000 --> 00:55:50,000
这个什么 Darton Android

1606
00:55:50,000 --> 00:55:52,000
Nickname Sky

1607
00:55:53,000 --> 00:55:54,000
这么一个东西

1608
00:55:54,000 --> 00:55:57,000
就他其实是一个

1609
00:55:57,000 --> 00:55:58,000
就他至于 Java

1610
00:55:58,000 --> 00:56:00,000
有什么特别的优势吗

1611
00:56:00,000 --> 00:56:02,000
就用于写这个安卓应用

1612
00:56:02,000 --> 00:56:03,000
有什么特别的好处

1613
00:56:03,000 --> 00:56:04,000
难道不写 Java

1614
00:56:04,000 --> 00:56:05,000
不是最大的有事吗

1615
00:56:07,000 --> 00:56:08,000
黑的漂亮

1616
00:56:10,000 --> 00:56:12,000
我觉得只要你不写 Java

1617
00:56:12,000 --> 00:56:13,000
基本上就可以做到

1618
00:56:13,000 --> 00:56:15,000
write less do more

1619
00:56:15,000 --> 00:56:16,000
但是也可能会出现

1620
00:56:16,000 --> 00:56:17,000
一个比 Java 更烂的语言

1621
00:56:18,000 --> 00:56:18,000
当然

1622
00:56:18,000 --> 00:56:19,000
概率比较小

1623
00:56:19,000 --> 00:56:20,000
但是显然不可能比 Java 更烂

1624
00:56:20,000 --> 00:56:22,000
还有什么语言能比 Java 更烂吗

1625
00:56:23,000 --> 00:56:24,000
说的也是

1626
00:56:24,000 --> 00:56:25,000
好吧

1627
00:56:26,000 --> 00:56:26,000
对

1628
00:56:27,000 --> 00:56:28,000
PHP 比 Java 更烂

1629
00:56:28,000 --> 00:56:29,000
这个我必须承认

1630
00:56:30,000 --> 00:56:31,000
他这个还是有一个

1631
00:56:31,000 --> 00:56:32,000
这个 adoption 的问题

1632
00:56:32,000 --> 00:56:33,000
他之前那个去

1633
00:56:33,000 --> 00:56:34,000
就撤掉

1634
00:56:34,000 --> 00:56:36,000
Dart 原生在 Chrome 浏览器

1635
00:56:36,000 --> 00:56:38,000
里面支持的这么一个计划

1636
00:56:38,000 --> 00:56:40,000
我觉得可能最大的一个考虑

1637
00:56:40,000 --> 00:56:40,000
还是说这个

1638
00:56:40,000 --> 00:56:43,000
可能会造成用户群的割裂

1639
00:56:43,000 --> 00:56:44,000
你本来一个浏览器

1640
00:56:44,000 --> 00:56:45,000
这个开发小组

1641
00:56:45,000 --> 00:56:46,000
你就去考虑说

1642
00:56:46,000 --> 00:56:48,000
怎么去优化 JavaScript 就好了

1643
00:56:48,000 --> 00:56:49,000
现在吧

1644
00:56:49,000 --> 00:56:50,000
多出了一个新语言

1645
00:56:50,000 --> 00:56:52,000
我还要再考虑你这个新语言的模型

1646
00:56:52,000 --> 00:56:53,000
就并不经济

1647
00:56:53,000 --> 00:56:56,000
然后这个从用户的角度来讲

1648
00:56:56,000 --> 00:56:57,000
其实也是挺有问题的

1649
00:56:57,000 --> 00:56:59,000
我跟所有其他浏览器开发

1650
00:56:59,000 --> 00:57:01,000
都得使用 JavaScript

1651
00:57:01,000 --> 00:57:03,000
唯独给你这个 Chrome 开发

1652
00:57:03,000 --> 00:57:03,000
我再想想

1653
00:57:03,000 --> 00:57:05,000
那个 Dart 是不是更好

1654
00:57:05,000 --> 00:57:06,000
其实何必呢

1655
00:57:06,000 --> 00:57:07,000
就这样会导致

1656
00:57:07,000 --> 00:57:07,000
就是说

1657
00:57:09,000 --> 00:57:10,000
保守型的用户

1658
00:57:10,000 --> 00:57:12,000
还是会倾向于选择说一个成熟的

1659
00:57:13,000 --> 00:57:14,000
JavaScript 的这种语言

1660
00:57:14,000 --> 00:57:17,000
还有成熟的一些技术来做这个开发

1661
00:57:17,000 --> 00:57:19,000
那就不会那么倾向于说用 Dart

1662
00:57:19,000 --> 00:57:23,000
怎么没有经过所谓时间考验的

1663
00:57:23,000 --> 00:57:25,000
新的语言来继续做这种商业开发

1664
00:57:25,000 --> 00:57:26,000
我觉得这个是不太靠谱的

1665
00:57:27,000 --> 00:57:31,000
除非有一天 Chrome 市占率可以达到 90%以上

1666
00:57:32,000 --> 00:57:34,000
否则基本上还是不要想

1667
00:57:35,000 --> 00:57:37,000
I don't think that day will ever come

1668
00:57:38,000 --> 00:57:38,000
but

1669
00:57:38,000 --> 00:57:39,000
对

1670
00:57:39,000 --> 00:57:41,000
应该太现实

1671
00:57:42,000 --> 00:57:42,000
现在

1672
00:57:43,000 --> 00:57:44,000
现在那个

1673
00:57:45,000 --> 00:57:50,000
Chrome 也就 3%到 40%的市占率

1674
00:57:50,000 --> 00:57:52,000
中国现在就完全不行

1675
00:57:52,000 --> 00:57:52,000
因为

1676
00:57:53,000 --> 00:57:54,000
就是被封锁

1677
00:57:54,000 --> 00:57:55,000
就没办法下载

1678
00:57:55,000 --> 00:57:55,000
没办法更新

1679
00:57:55,000 --> 00:57:58,000
其实用户觉得这个流程和发现都是

1680
00:57:59,000 --> 00:58:00,000
肯定是走下跑路的

1681
00:58:02,000 --> 00:58:03,000
那头外可能还行

1682
00:58:04,000 --> 00:58:04,000
吧

1683
00:58:05,000 --> 00:58:05,000
对

1684
00:58:08,000 --> 00:58:09,000
对

1685
00:58:09,000 --> 00:58:10,000
然后接下来

1686
00:58:11,000 --> 00:58:13,000
Windows 10 搭载的

1687
00:58:13,000 --> 00:58:15,000
或者说微软的下载的关系

1688
00:58:15,000 --> 00:58:18,000
也很有可能会替微软抢回一部分讲什么

1689
00:58:19,000 --> 00:58:19,000
嗯

1690
00:58:20,000 --> 00:58:21,000
这个其实

1691
00:58:21,000 --> 00:58:22,000
今年

1692
00:58:22,000 --> 00:58:23,000
我们现在马上要聊到的主题

1693
00:58:23,000 --> 00:58:24,000
就是今年这个

1694
00:58:24,000 --> 00:58:26,000
已经过了一段时间

1695
00:58:26,000 --> 00:58:27,000
我们现在聊的比较晚

1696
00:58:27,000 --> 00:58:30,000
就是微软的 Build 2015 这个大会

1697
00:58:30,000 --> 00:58:30,000
开发者大会

1698
00:58:31,000 --> 00:58:33,000
他们提到的一些东西

1699
00:58:33,000 --> 00:58:37,000
你先说你觉得印象比较深刻的那几个

1700
00:58:37,000 --> 00:58:38,000
你先看了哪些

1701
00:58:39,000 --> 00:58:41,000
其实我唯一关注的就是 HoloLens

1702
00:58:44,000 --> 00:58:44,000
其他都没看

1703
00:58:44,000 --> 00:58:45,000
我不知道你

1704
00:58:45,000 --> 00:58:46,000
就整个那个 keynote

1705
00:58:46,000 --> 00:58:48,000
我只看了 HoloLens 那部分

1706
00:58:48,000 --> 00:58:49,000
然后就转头打游戏去

1707
00:58:50,000 --> 00:58:50,000
嗯

1708
00:58:51,000 --> 00:58:52,000
呃

1709
00:58:52,000 --> 00:58:55,000
就是第一天的主题演讲

1710
00:58:55,000 --> 00:58:56,000
我还看了

1711
00:58:57,000 --> 00:59:00,000
除了讲 Azure 的中后半节之外

1712
00:59:00,000 --> 00:59:00,000
其他我都看了

1713
00:59:01,000 --> 00:59:02,000
他先说那个会吧

1714
00:59:02,000 --> 00:59:03,000
那个主题演讲

1715
00:59:03,000 --> 00:59:06,000
他前面花了相当长时间讲 Azure

1716
00:59:06,000 --> 00:59:07,000
就是他们那个运服务

1717
00:59:08,000 --> 00:59:09,000
我觉得其实挺无聊的

1718
00:59:09,000 --> 00:59:11,000
就不是很多人都要做后台开发

1719
00:59:12,000 --> 00:59:13,000
你也讲那么多有什么用

1720
00:59:13,000 --> 00:59:15,000
我觉得 Azure 有点

1721
00:59:15,000 --> 00:59:16,000
就是

1722
00:59:17,000 --> 00:59:17,000
over 了

1723
00:59:17,000 --> 00:59:19,000
推的太过头了

1724
00:59:19,000 --> 00:59:21,000
不过但这个也能够理解

1725
00:59:21,000 --> 00:59:22,000
毕竟那个谁

1726
00:59:22,000 --> 00:59:23,000
Santa Anna Delas

1727
00:59:24,000 --> 00:59:25,000
Zaier 部门投投这样过去了

1728
00:59:25,000 --> 00:59:26,000
他可能在

1729
00:59:26,000 --> 00:59:28,000
这个人员部署上

1730
00:59:28,000 --> 00:59:29,000
可能会有点偏向性

1731
00:59:29,000 --> 00:59:31,000
但我觉得那个安排是不太好的

1732
00:59:31,000 --> 00:59:33,000
起码作为一个主题演讲

1733
00:59:33,000 --> 00:59:34,000
就是太

1734
00:59:34,000 --> 00:59:36,000
繁琐太多太多细节的东西

1735
00:59:36,000 --> 00:59:39,000
没有把消费者能够感知的东西

1736
00:59:40,000 --> 00:59:41,000
把痛点突出出来

1737
00:59:41,000 --> 00:59:42,000
当然你可以说

1738
00:59:42,000 --> 00:59:45,000
这个我们这个 build 会又不像这个 WDC

1739
00:59:45,000 --> 00:59:47,000
第一天主要是面向这个外媒体和消费者

1740
00:59:47,000 --> 00:59:48,000
就我们这个

1741
00:59:49,000 --> 00:59:50,000
build 的就完全是针对开发者

1742
00:59:50,000 --> 00:59:51,000
那也可以

1743
00:59:51,000 --> 00:59:52,000
但起码说

1744
00:59:53,000 --> 00:59:54,000
从一个

1745
00:59:54,000 --> 00:59:55,000
个人消费者来讲

1746
00:59:55,000 --> 00:59:56,000
还是从媒体角度来讲

1747
00:59:56,000 --> 00:59:59,000
他现在这种方式就这么匆匆发布出来

1748
01:00:00,000 --> 01:00:01,000
好像感觉时候会有一点问题

1749
01:00:03,000 --> 01:00:06,000
我觉得 build 不能

1750
01:00:06,000 --> 01:00:08,000
真正的消费者会有多少

1751
01:00:08,000 --> 01:00:10,000
真正开发者会有多少看 build 的

1752
01:00:10,000 --> 01:00:10,000
且不说

1753
01:00:11,000 --> 01:00:13,000
真正的消费者没有几个在看 build 的

1754
01:00:14,000 --> 01:00:15,000
消费者我感觉就是微软

1755
01:00:15,000 --> 01:00:16,000
微软还是有

1756
01:00:16,000 --> 01:00:18,000
不少这个是为贴肝粉丝的

1757
01:00:19,000 --> 01:00:20,000
这个我不怀疑

1758
01:00:20,000 --> 01:00:21,000
就是说这个数量上怎么样

1759
01:00:21,000 --> 01:00:22,000
第二个说

1760
01:00:22,000 --> 01:00:23,000
他们这么的人

1761
01:00:23,000 --> 01:00:25,000
到底有多关心

1762
01:00:25,000 --> 01:00:27,000
有值得讲半个小时

1763
01:00:27,000 --> 01:00:29,000
然后换三个人这种方式

1764
01:00:29,000 --> 01:00:30,000
我觉得也不一定

1765
01:00:30,000 --> 01:00:30,000
对

1766
01:00:31,000 --> 01:00:33,000
我是可以理解微软

1767
01:00:33,000 --> 01:00:36,000
非常迫切的想要抢回服务器端的

1768
01:00:37,000 --> 01:00:39,000
市场份额的决心

1769
01:00:39,000 --> 01:00:40,000
但是

1770
01:00:41,000 --> 01:00:42,000
我觉得这样一个

1771
01:00:42,000 --> 01:00:43,000
开发者大会上

1772
01:00:43,000 --> 01:00:46,000
花这么长的篇幅来介绍这样一个产品

1773
01:00:46,000 --> 01:00:47,000
有点

1774
01:00:47,000 --> 01:00:48,000
有点偶尔

1775
01:00:53,000 --> 01:00:54,000
但 anyway

1776
01:00:55,000 --> 01:00:58,000
虽然 B 公司也正在试图

1777
01:00:59,000 --> 01:01:00,000
跟 azure

1778
01:01:01,000 --> 01:01:03,000
之前反正开了很多天的会

1779
01:01:03,000 --> 01:01:04,000
当然我们要参与

1780
01:01:04,000 --> 01:01:07,000
想要把公司的产品做进 azure 里面

1781
01:01:07,000 --> 01:01:08,000
成为他的一个服务

1782
01:01:11,000 --> 01:01:12,000
但我觉得还是离

1783
01:01:12,000 --> 01:01:14,000
觉得还是离我还远

1784
01:01:17,000 --> 01:01:19,000
build 听了还展示了一些其他东西

1785
01:01:19,000 --> 01:01:21,000
另外一个重头戏

1786
01:01:21,000 --> 01:01:22,000
就是 windows 10

1787
01:01:22,000 --> 01:01:24,000
反正起码从 demo 的角度来看

1788
01:01:24,000 --> 01:01:26,000
还是蛮激动人心的

1789
01:01:26,000 --> 01:01:28,000
然后上次我们请小姐姐来讲

1790
01:01:28,000 --> 01:01:29,000
她也说

1791
01:01:30,000 --> 01:01:32,000
确实 Win 10 还是不错的

1792
01:01:32,000 --> 01:01:34,000
虽然现在开发测试版

1793
01:01:34,000 --> 01:01:35,000
可能不是太稳定

1794
01:01:35,000 --> 01:01:36,000
但是

1795
01:01:36,000 --> 01:01:38,000
起码从设计上来讲

1796
01:01:38,000 --> 01:01:38,000
观众来讲

1797
01:01:38,000 --> 01:01:40,000
我们看的还是挺好的这么一个过程

1798
01:01:40,000 --> 01:01:42,000
但 Win 10 有一个特别

1799
01:01:42,000 --> 01:01:44,000
Win 10 还是继续延续了微软

1800
01:01:44,000 --> 01:01:46,000
有非常多的

1801
01:01:46,000 --> 01:01:47,000
版本的特点

1802
01:01:50,000 --> 01:01:53,000
Win 10 将在 190 个国家发售

1803
01:01:53,000 --> 01:01:55,000
然后有 111 种语

1804
01:01:57,000 --> 01:01:59,000
然后接下来我可以大概

1805
01:01:59,000 --> 01:02:00,000
大概说一下 Windows 10 的版本

1806
01:02:00,000 --> 01:02:03,000
首先 Windows 10 有 home 版

1807
01:02:03,000 --> 01:02:03,000
就是

1808
01:02:04,000 --> 01:02:05,000
最普通的

1809
01:02:05,000 --> 01:02:08,000
大家最普通的消费者会买的版本

1810
01:02:08,000 --> 01:02:10,000
Windows 10 mobile 版本

1811
01:02:10,000 --> 01:02:12,000
跑在 mobile 版本上

1812
01:02:12,000 --> 01:02:15,000
Windows 10 pro 版本

1813
01:02:15,000 --> 01:02:17,000
是 home 版本

1814
01:02:17,000 --> 01:02:19,000
加上一些可能小的

1815
01:02:19,000 --> 01:02:21,000
开小的 small business

1816
01:02:21,000 --> 01:02:22,000
或者是开发者会需要的

1817
01:02:22,000 --> 01:02:24,000
一些特性

1818
01:02:24,000 --> 01:02:26,000
然后有 Windows 10 enterprise 版本

1819
01:02:26,000 --> 01:02:28,000
然后 Windows 10 education 版本

1820
01:02:28,000 --> 01:02:31,000
然后还有 Windows 10 mobile enterprise 版本

1821
01:02:31,000 --> 01:02:32,000
这是什么东西

1822
01:02:34,000 --> 01:02:37,000
就为什么会有一个 mobile enterprise 版本

1823
01:02:37,000 --> 01:02:38,000
这是

1824
01:02:38,000 --> 01:02:39,000
这是

1825
01:02:39,000 --> 01:02:40,000
拿来干嘛的

1826
01:02:41,000 --> 01:02:41,000
西方市场

1827
01:02:41,000 --> 01:02:43,000
其实挺挺鼓励的

1828
01:02:43,000 --> 01:02:44,000
对

1829
01:02:44,000 --> 01:02:44,000
然后最后还有一个

1830
01:02:44,000 --> 01:02:47,000
Windows 10 iot core 版本

1831
01:02:47,000 --> 01:02:49,000
就是 internet of things core 版本

1832
01:02:49,000 --> 01:02:50,000
那个挺有意思

1833
01:02:50,000 --> 01:02:52,000
其实可以简单说一下

1834
01:02:52,000 --> 01:02:54,000
就是说那个的主要

1835
01:02:54,000 --> 01:02:55,000
就是 IoT 是指

1836
01:02:55,000 --> 01:02:57,000
这个 Internet of things

1837
01:02:57,000 --> 01:02:58,000
就是物联网

1838
01:02:59,000 --> 01:03:00,000
它那个什么意思呢

1839
01:03:00,000 --> 01:03:01,000
其实是非常小的设备

1840
01:03:01,000 --> 01:03:03,000
因为物联网里面最

1841
01:03:04,000 --> 01:03:05,000
最要紧的一个基础设施

1842
01:03:05,000 --> 01:03:06,000
就是各种各样的传感器

1843
01:03:06,000 --> 01:03:08,000
各种各样的小外设

1844
01:03:08,000 --> 01:03:10,000
这些小外设通常的一个

1845
01:03:10,000 --> 01:03:11,000
就是他们的一个共性

1846
01:03:11,000 --> 01:03:12,000
就是说

1847
01:03:12,000 --> 01:03:14,000
价格便宜成本低

1848
01:03:14,000 --> 01:03:15,000
但结果就是说

1849
01:03:15,000 --> 01:03:17,000
这个处理器很弱

1850
01:03:17,000 --> 01:03:17,000
然后肯定还没

1851
01:03:17,000 --> 01:03:18,000
还有这个耗电的

1852
01:03:18,000 --> 01:03:20,000
这个就是功耗有要求

1853
01:03:20,000 --> 01:03:21,000
不能超过多少

1854
01:03:21,000 --> 01:03:23,000
对导致他们那个整个

1855
01:03:23,000 --> 01:03:24,000
都是一个比较弱小的

1856
01:03:24,000 --> 01:03:25,000
一个一个机器

1857
01:03:25,000 --> 01:03:26,000
然后你要在那么弱小的

1858
01:03:26,000 --> 01:03:28,000
机器上运行一个 Windows 系统

1859
01:03:29,000 --> 01:03:30,000
这想就没有

1860
01:03:30,000 --> 01:03:31,000
没有精简化的 Windows 系统

1861
01:03:31,000 --> 01:03:32,000
这显然是

1862
01:03:32,000 --> 01:03:33,000
听起来非常疯狂

1863
01:03:33,000 --> 01:03:35,000
对比较疯狂的一件事情

1864
01:03:35,000 --> 01:03:36,000
而且不太合适

1865
01:03:36,000 --> 01:03:36,000
因为那些东西

1866
01:03:36,000 --> 01:03:37,000
很多都没有屏幕对吧

1867
01:03:38,000 --> 01:03:39,000
那么你这个系统加载那些

1868
01:03:39,000 --> 01:03:40,000
什么显示啊

1869
01:03:40,000 --> 01:03:41,000
图标啊

1870
01:03:41,000 --> 01:03:41,000
就是故意啊

1871
01:03:41,000 --> 01:03:43,000
对它都是完全没有意义的

1872
01:03:43,000 --> 01:03:43,000
对啊

1873
01:03:43,000 --> 01:03:45,000
你连个蓝屏都看不到

1874
01:03:45,000 --> 01:03:45,000
我何必呢

1875
01:03:45,000 --> 01:03:45,000
对对

1876
01:03:46,000 --> 01:03:47,000
所以说为了

1877
01:03:47,000 --> 01:03:49,000
把这个 Windows 能够 C 进那么小的

1878
01:03:49,000 --> 01:03:51,000
那么性能差的机器里面

1879
01:03:51,000 --> 01:03:52,000
当然同时也为了说

1880
01:03:52,000 --> 01:03:53,000
简化这个结构

1881
01:03:53,000 --> 01:03:54,000
他们就出了这么一个

1882
01:03:54,000 --> 01:03:56,000
Windows 式的这种所谓 IoT 版本

1883
01:03:57,000 --> 01:03:57,000
就简单来说

1884
01:03:57,000 --> 01:03:58,000
就是把这个 Windows 的

1885
01:03:58,000 --> 01:04:00,000
这个内核拿出来

1886
01:04:00,000 --> 01:04:01,000
跟 Linux 一样

1887
01:04:01,000 --> 01:04:02,000
然后再精解一下

1888
01:04:02,000 --> 01:04:04,000
把这个内核加上一些比较

1889
01:04:04,000 --> 01:04:06,000
简单的周边的工具

1890
01:04:06,000 --> 01:04:08,000
装到那些小小的这个 IoT 的这种

1891
01:04:08,000 --> 01:04:10,000
就是互联网的设备里面去

1892
01:04:10,000 --> 01:04:11,000
就可以实现说

1893
01:04:11,000 --> 01:04:12,000
哪怕我这个处理器弱小

1894
01:04:12,000 --> 01:04:14,000
我好歹也能跑一个 Windows

1895
01:04:14,000 --> 01:04:15,000
但虽然是今年吧

1896
01:04:16,000 --> 01:04:16,000
对

1897
01:04:16,000 --> 01:04:18,000
虽然这个念头在

1898
01:04:19,000 --> 01:04:22,000
目前来看是比较奇怪的

1899
01:04:22,000 --> 01:04:25,000
因为目前的 IoT 的这些既有产品的

1900
01:04:25,000 --> 01:04:27,000
开发者基本上全都是采用 Linux

1901
01:04:27,000 --> 01:04:29,000
各种形式的 Linux

1902
01:04:29,000 --> 01:04:31,000
被采检过的

1903
01:04:31,000 --> 01:04:33,000
甚至 FreeBSD 之类的东西来

1904
01:04:34,000 --> 01:04:35,000
来做它的操作

1905
01:04:35,000 --> 01:04:35,000
对

1906
01:04:35,000 --> 01:04:37,000
但是这个 Windows

1907
01:04:38,000 --> 01:04:40,000
Windows 10 IoT Core 版本

1908
01:04:40,000 --> 01:04:41,000
应该就是为了

1909
01:04:41,000 --> 01:04:42,000
要抢占这部分市场

1910
01:04:43,000 --> 01:04:46,000
所以它有一个所谓什么

1911
01:04:46,000 --> 01:04:47,000
是一个什么 Uphill Battle

1912
01:04:47,000 --> 01:04:49,000
就是上山打仗

1913
01:04:49,000 --> 01:04:50,000
就是很难了

1914
01:04:50,000 --> 01:04:53,000
因为你现在市场上有这么一个免费

1915
01:04:53,000 --> 01:04:55,000
而且可以更加容易定制化

1916
01:04:55,000 --> 01:04:57,000
然后市场规模就非常大的

1917
01:04:57,000 --> 01:05:00,000
这么一个开源的产品

1918
01:05:00,000 --> 01:05:02,000
那你肯定选那个

1919
01:05:02,000 --> 01:05:03,000
你选一个 B 原自己搞的

1920
01:05:03,000 --> 01:05:06,000
开源是要开得起码快要好

1921
01:05:06,000 --> 01:05:07,000
也不一定

1922
01:05:07,000 --> 01:05:09,000
我觉得也许 Windows 10

1923
01:05:09,000 --> 01:05:12,000
它固然要打上山仗

1924
01:05:12,000 --> 01:05:14,000
但是你必须承认

1925
01:05:14,000 --> 01:05:16,000
这他面对的敌人并没有团结起来

1926
01:05:16,000 --> 01:05:17,000
对付他

1927
01:05:18,000 --> 01:05:19,000
然后

1928
01:05:19,000 --> 01:05:21,000
而且它有一个优势

1929
01:05:21,000 --> 01:05:23,000
就是如果你所有的产品

1930
01:05:23,000 --> 01:05:25,000
都统一使用 Windows 10 IoT

1931
01:05:26,000 --> 01:05:28,000
Core 这个版本的操作系统的话

1932
01:05:28,000 --> 01:05:30,000
那不管是管理

1933
01:05:30,000 --> 01:05:32,000
还是和其他的

1934
01:05:32,000 --> 01:05:35,000
同样使用同一平台的产品交流

1935
01:05:35,000 --> 01:05:37,000
可能会更方便一点

1936
01:05:37,000 --> 01:05:40,000
而且我觉得以微软的支持

1937
01:05:40,000 --> 01:05:41,000
微软的技术能力

1938
01:05:41,000 --> 01:05:43,000
做技术支持是会比较好

1939
01:05:44,000 --> 01:05:47,000
而且同时给你养活一大批顾问公司

1940
01:05:50,000 --> 01:05:51,000
就 Windows 10 之后

1941
01:05:51,000 --> 01:05:54,000
我们这个上面就是目前能

1942
01:05:54,000 --> 01:05:56,000
马上能用的还一个挺好玩的东西

1943
01:05:56,000 --> 01:05:58,000
叫做 Visual Studio Code

1944
01:05:58,000 --> 01:05:59,000
对

1945
01:05:59,000 --> 01:06:00,000
就之前我们在那个 IT 工程

1946
01:06:00,000 --> 01:06:03,000
和 Roy 大概就是提及了一下

1947
01:06:03,000 --> 01:06:04,000
但是并没有展开

1948
01:06:04,000 --> 01:06:05,000
因为觉得那个

1949
01:06:05,000 --> 01:06:06,000
并不适合在那个节目讲

1950
01:06:07,000 --> 01:06:07,000
那这边

1951
01:06:07,000 --> 01:06:09,000
就是我们这个编辑器

1952
01:06:09,000 --> 01:06:11,000
就是我们关注编辑器

1953
01:06:11,000 --> 01:06:12,000
还有什么键盘

1954
01:06:12,000 --> 01:06:14,000
这些电脑外设也是我们关注的重点

1955
01:06:14,000 --> 01:06:15,000
我不知道你又用那个

1956
01:06:15,000 --> 01:06:18,000
这个 Visual Studio Code 这款编辑器没

1957
01:06:18,000 --> 01:06:19,000
有啊

1958
01:06:19,000 --> 01:06:21,000
就当时看到那个

1959
01:06:22,000 --> 01:06:23,000
新闻就立刻下载

1960
01:06:23,000 --> 01:06:25,000
试用了一下

1961
01:06:25,000 --> 01:06:27,000
感觉还是挺

1962
01:06:28,000 --> 01:06:29,000
萌太奇的

1963
01:06:29,000 --> 01:06:30,000
就是你在

1964
01:06:30,000 --> 01:06:32,000
OS X 上面下载

1965
01:06:32,000 --> 01:06:33,000
从微软的网站上下载了一个东西

1966
01:06:33,000 --> 01:06:34,000
然后这个东西的

1967
01:06:35,000 --> 01:06:36,000
结尾居然不是

1968
01:06:37,000 --> 01:06:38,000
MSI 或者是 EXE

1969
01:06:39,000 --> 01:06:40,000
它是个

1970
01:06:41,000 --> 01:06:43,000
它应该是个那个

1971
01:06:43,000 --> 01:06:44,000
应该也是一个

1972
01:06:46,000 --> 01:06:47,000
这不重要了

1973
01:06:47,000 --> 01:06:49,000
就是反正我把那个

1974
01:06:49,000 --> 01:06:50,000
Visual Studio 的图标

1975
01:06:50,000 --> 01:06:52,000
拖进 Application 文件夹的时候

1976
01:06:52,000 --> 01:06:53,000
感觉还是非常萌太奇的

1977
01:06:54,000 --> 01:06:55,000
然后

1978
01:06:56,000 --> 01:06:57,000
点了脸还能跑

1979
01:06:57,000 --> 01:06:59,000
反而就是哪个世界

1980
01:06:59,000 --> 01:07:00,000
对

1981
01:07:00,000 --> 01:07:01,000
点了脸还能跑

1982
01:07:01,000 --> 01:07:02,000
非常 Serial

1983
01:07:03,000 --> 01:07:04,000
嗯

1984
01:07:05,000 --> 01:07:06,000
怎么说呢

1985
01:07:06,000 --> 01:07:07,000
就它还是一个

1986
01:07:08,000 --> 01:07:10,000
虽然它挂了 Visual Studio 的

1987
01:07:10,000 --> 01:07:11,000
名字

1988
01:07:11,000 --> 01:07:13,000
但它本质上还只是一个编辑器而已

1989
01:07:15,000 --> 01:07:15,000
对它是一个

1990
01:07:15,000 --> 01:07:17,000
所谓的 Editor

1991
01:07:17,000 --> 01:07:19,000
对它并不是一个

1992
01:07:19,000 --> 01:07:20,000
IDE

1993
01:07:20,000 --> 01:07:24,000
它并不是一个 Edit environment

1994
01:07:24,000 --> 01:07:26,000
对就是这两个一是不一样的

1995
01:07:26,000 --> 01:07:27,000
一个是 Editor 的一

1996
01:07:28,000 --> 01:07:28,000
然后那个是 IDE

1997
01:07:28,000 --> 01:07:30,000
那个一是指的是 Environment

1998
01:07:30,000 --> 01:07:31,000
就是机身开发环境

1999
01:07:32,000 --> 01:07:34,000
所以就它们在定义上还是区别蛮大

2000
01:07:34,000 --> 01:07:36,000
就这个是一个简单的写代码

2001
01:07:36,000 --> 01:07:37,000
那个可能会加上什么

2002
01:07:37,000 --> 01:07:40,000
开发、挑事、项目管理

2003
01:07:40,000 --> 01:07:42,000
这些关系把它的功能在里面一起的

2004
01:07:42,000 --> 01:07:42,000
对吧

2005
01:07:42,000 --> 01:07:43,000
对

2006
01:07:43,000 --> 01:07:45,000
然后这个 Code

2007
01:07:45,000 --> 01:07:46,000
就 Visual Studio Code 这个编辑器

2008
01:07:46,000 --> 01:07:48,000
它是基于这个叫做

2009
01:07:48,000 --> 01:07:50,000
Electron 的项目做的

2010
01:07:50,000 --> 01:07:51,000
对 Electron 呢

2011
01:07:51,000 --> 01:07:53,000
简单来讲它是用那个

2012
01:07:53,000 --> 01:07:55,000
Node 或者说我们现在新版本

2013
01:07:55,000 --> 01:07:58,000
它叫这个基于 Io.js 这么一个引擎

2014
01:07:58,000 --> 01:08:00,000
加上这个 WebKit

2015
01:08:00,000 --> 01:08:02,000
或者说 Chromium 这一套

2016
01:08:02,000 --> 01:08:04,000
对网页展示的东西

2017
01:08:04,000 --> 01:08:05,000
然后

2018
01:08:05,000 --> 01:08:07,000
整个呈现出来的跟你这个

2019
01:08:07,000 --> 01:08:08,000
看起来是个原生应用

2020
01:08:08,000 --> 01:08:11,000
那其实里面所有的技术都是来自于 Web 的

2021
01:08:11,000 --> 01:08:12,000
对

2022
01:08:12,000 --> 01:08:13,000
其实是个浏览器

2023
01:08:13,000 --> 01:08:14,000
这是很

2024
01:08:14,000 --> 01:08:16,000
就如果你没有用过的话

2025
01:08:16,000 --> 01:08:17,000
就可能是个比较神纪的一点

2026
01:08:17,000 --> 01:08:18,000
但

2027
01:08:18,000 --> 01:08:20,000
其实这样的浏览

2028
01:08:20,000 --> 01:08:22,000
这样的编辑器此前已经有过很多历史了

2029
01:08:22,000 --> 01:08:23,000
比如说

2030
01:08:23,000 --> 01:08:25,000
GitHub Atom

2031
01:08:25,000 --> 01:08:26,000
GitHub Atom 也是基于 Electron

2032
01:08:26,000 --> 01:08:27,000
甚至说

2033
01:08:27,000 --> 01:08:30,000
我也在跟 Electron 之前叫什么来着

2034
01:08:32,000 --> 01:08:33,000
其实想不起来了

2035
01:08:33,000 --> 01:08:34,000
但

2036
01:08:34,000 --> 01:08:36,000
之前他叫的那个名字跟 Atom 有点关系

2037
01:08:36,000 --> 01:08:37,000
Atom 是原子

2038
01:08:37,000 --> 01:08:38,000
所以它叫电子

2039
01:08:38,000 --> 01:08:39,000
就是它是组成

2040
01:08:39,000 --> 01:08:42,000
它一开始就是为了 Atom 而开发的

2041
01:08:43,000 --> 01:08:46,000
然后另外一个叫 Brackets 的编辑器

2042
01:08:46,000 --> 01:08:47,000
也是

2043
01:08:47,000 --> 01:08:48,000
类似的基于

2044
01:08:50,000 --> 01:08:51,000
Chromium 和

2045
01:08:52,000 --> 01:08:54,000
Bracket 应该是 Node.js

2046
01:08:54,000 --> 01:08:55,000
做出来的一个编辑器

2047
01:08:57,000 --> 01:09:00,000
然后我觉得我适用 Virtual Studio Code 最大的

2048
01:09:01,000 --> 01:09:02,000
惊讶之处是

2049
01:09:03,000 --> 01:09:05,000
它并不仅仅是把 Electron 换了一个

2050
01:09:05,000 --> 01:09:07,000
就是加了一个皮肤

2051
01:09:07,000 --> 01:09:09,000
然后加了什么 intelligence

2052
01:09:10,000 --> 01:09:10,000
对

2053
01:09:10,000 --> 01:09:12,000
它是有定制很多东西的其实

2054
01:09:12,000 --> 01:09:13,000
的功能

2055
01:09:13,000 --> 01:09:14,000
它可以 debug

2056
01:09:14,000 --> 01:09:17,000
我觉得这个是最让我 impressed 的一件事情

2057
01:09:17,000 --> 01:09:17,000
就是

2058
01:09:18,000 --> 01:09:19,000
你写了一个程序

2059
01:09:19,000 --> 01:09:20,000
你可以在

2060
01:09:21,000 --> 01:09:23,000
Virtual Studio Code 里面调试

2061
01:09:24,000 --> 01:09:25,000
其实这就已经让它

2062
01:09:25,000 --> 01:09:27,000
成了一个

2063
01:09:28,000 --> 01:09:30,000
达到一个叫什么编辑器以上

2064
01:09:30,000 --> 01:09:31,000
ID 一位满的这么一个状态

2065
01:09:32,000 --> 01:09:32,000
就

2066
01:09:33,000 --> 01:09:34,000
大部分时候

2067
01:09:35,000 --> 01:09:37,000
其他的编辑器都不会提供

2068
01:09:39,000 --> 01:09:41,000
元代码级别的调试功能

2069
01:09:41,000 --> 01:09:43,000
你最多最多能做的就是

2070
01:09:43,000 --> 01:09:45,000
就是把那个

2071
01:09:45,000 --> 01:09:46,000
Consul

2072
01:09:47,000 --> 01:09:49,000
的输入输出集成到

2073
01:09:49,000 --> 01:09:51,000
你这个编辑器的一个

2074
01:09:51,000 --> 01:09:52,000
一个子窗口里面

2075
01:09:52,000 --> 01:09:54,000
然后你在这个编辑器的子窗口里面做

2076
01:09:54,000 --> 01:09:55,000
比如说

2077
01:09:55,000 --> 01:09:58,000
GDV 或者是 PYDB 的这个

2078
01:09:58,000 --> 01:09:59,000
debug 功能

2079
01:10:00,000 --> 01:10:02,000
但是 Virtual Studio Code 就把

2080
01:10:03,000 --> 01:10:03,000
你

2081
01:10:03,000 --> 01:10:06,000
我们最常用的那一批什么

2082
01:10:07,000 --> 01:10:09,000
单步执行跳过断点之类的

2083
01:10:09,000 --> 01:10:10,000
全都集成在了

2084
01:10:10,000 --> 01:10:11,000
这个编辑器里面

2085
01:10:11,000 --> 01:10:13,000
然后你在跑的时候可以用编辑器来 debug

2086
01:10:14,000 --> 01:10:16,000
我觉得这个是比较了不起的一件事情

2087
01:10:17,000 --> 01:10:18,000
OK

2088
01:10:18,000 --> 01:10:18,000
对

2089
01:10:19,000 --> 01:10:21,000
其实我是要坦白一下

2090
01:10:21,000 --> 01:10:22,000
因为最近也比较忙

2091
01:10:22,000 --> 01:10:23,000
也没怎么用这个编辑器

2092
01:10:23,000 --> 01:10:26,000
所以没有太多的深刻的感受

2093
01:10:26,000 --> 01:10:28,000
反正就是当时看第一眼就感觉演员还不错

2094
01:10:28,000 --> 01:10:31,000
不知道你有用它做一些什么实际的事情吗

2095
01:10:31,000 --> 01:10:33,000
我最近我也挺忙

2096
01:10:33,000 --> 01:10:33,000
打开看看娃娃

2097
01:10:33,000 --> 01:10:35,000
但是我最近也挺忙的

2098
01:10:35,000 --> 01:10:37,000
但是我在公司也装了

2099
01:10:37,000 --> 01:10:40,000
就是它在 Linux 上跑的效果一定好

2100
01:10:40,000 --> 01:10:41,000
对

2101
01:10:41,000 --> 01:10:42,000
忘了说它是一个跨平台的

2102
01:10:42,000 --> 01:10:43,000
刚才忘了说

2103
01:10:43,000 --> 01:10:44,000
这是它最重要的一点就是它

2104
01:10:45,000 --> 01:10:45,000
试图用

2105
01:10:46,000 --> 01:10:48,000
显示微软的狼子野心

2106
01:10:48,000 --> 01:10:50,000
就想要用这个东西来

2107
01:10:51,000 --> 01:10:53,000
让各个平台开发者都可以

2108
01:10:55,000 --> 01:10:56,000
你做

2109
01:10:56,000 --> 01:10:56,000
对

2110
01:10:56,000 --> 01:10:59,000
首先是为微软开发东西

2111
01:11:00,000 --> 01:11:01,000
为你提供一个比较好的工具

2112
01:11:01,000 --> 01:11:04,000
你可以在闲下之余给微软开发点东西

2113
01:11:04,000 --> 01:11:06,000
这是他们的目的

2114
01:11:06,000 --> 01:11:07,000
然后

2115
01:11:07,000 --> 01:11:07,000
对

2116
01:11:07,000 --> 01:11:11,000
然后从网上的反应来看

2117
01:11:11,000 --> 01:11:13,000
大家还是比较

2118
01:11:13,000 --> 01:11:14,000
怎么说

2119
01:11:14,000 --> 01:11:15,000
我觉得大部分的人都是叫好了

2120
01:11:16,000 --> 01:11:19,000
就他们官方在 5 月 13 日

2121
01:11:19,000 --> 01:11:23,000
就是录音的前一天也贴了一个 blog

2122
01:11:23,000 --> 01:11:23,000
就说

2123
01:11:24,000 --> 01:11:27,000
他们收到了反响的好评如潮

2124
01:11:28,000 --> 01:11:31,000
他们在推特上有一个 code 账号

2125
01:11:31,000 --> 01:11:32,000
然后这个账号在

2126
01:11:32,000 --> 01:11:36,000
现在已经有了 14.3 k 的 follower

2127
01:11:36,000 --> 01:11:37,000
然后

2128
01:11:37,000 --> 01:11:38,000
很高了

2129
01:11:38,000 --> 01:11:38,000
对

2130
01:11:38,000 --> 01:11:40,000
他们 mention 的 4.8 k 次

2131
01:11:42,000 --> 01:11:43,000
太恐怖了

2132
01:11:43,000 --> 01:11:43,000
对

2133
01:11:43,000 --> 01:11:44,000
这他们

2134
01:11:45,000 --> 01:11:47,000
再过了一周多一点吧

2135
01:11:47,000 --> 01:11:48,000
就已经

2136
01:11:48,000 --> 01:11:49,000
对

2137
01:11:49,000 --> 01:11:50,000
然后

2138
01:11:50,000 --> 01:11:52,000
virus code 的右下角有一个小笑脸

2139
01:11:52,000 --> 01:11:53,000
如果你点一下的话

2140
01:11:53,000 --> 01:11:57,000
你可以跟他们回报一个 bug

2141
01:11:57,000 --> 01:11:58,000
或者是说

2142
01:11:58,000 --> 01:11:59,000
你们做的好

2143
01:11:59,000 --> 01:12:01,000
就是有一个笑脸又哭脸

2144
01:12:01,000 --> 01:12:02,000
如果你点哭脸的话

2145
01:12:02,000 --> 01:12:05,000
就可以写一个 bug

2146
01:12:05,000 --> 01:12:05,000
如果你点笑脸的话

2147
01:12:05,000 --> 01:12:06,000
就是说

2148
01:12:06,000 --> 01:12:07,000
我夸你们写的好

2149
01:12:08,000 --> 01:12:11,000
然后他们目前为止收到了 6000 个 sender smile

2150
01:12:12,000 --> 01:12:13,000
就是

2151
01:12:14,000 --> 01:12:16,000
至少 6000 个 smile

2152
01:12:17,000 --> 01:12:19,000
那个公众叫做 sender smile

2153
01:12:20,000 --> 01:12:21,000
然后他们收到了 6000 个

2154
01:12:22,000 --> 01:12:24,000
但是他们又透露说

2155
01:12:24,000 --> 01:12:27,000
收到了多少个 sender not smile

2156
01:12:27,000 --> 01:12:29,000
sender crying

2157
01:12:29,000 --> 01:12:30,000
但

2158
01:12:30,000 --> 01:12:31,000
6000 个至少

2159
01:12:31,000 --> 01:12:32,000
8000 个

2160
01:12:32,000 --> 01:12:32,000
对

2161
01:12:33,000 --> 01:12:33,000
不止吧

2162
01:12:33,000 --> 01:12:34,000
6 万个

2163
01:12:36,000 --> 01:12:37,000
又黑人家

2164
01:12:37,000 --> 01:12:38,000
没有我没有黑

2165
01:12:38,000 --> 01:12:39,000
因为这个功能

2166
01:12:39,000 --> 01:12:40,000
就是这个编辑器的功能

2167
01:12:40,000 --> 01:12:42,000
它版本号是零点几吧

2168
01:12:42,000 --> 01:12:43,000
我没记错的话

2169
01:12:43,000 --> 01:12:45,000
编辑器的功能还是缺很多的

2170
01:12:45,000 --> 01:12:46,000
比如说

2171
01:12:47,000 --> 01:12:48,000
我记得

2172
01:12:49,000 --> 01:12:50,000
有人说

2173
01:12:50,000 --> 01:12:52,000
在里面输入中文有问题

2174
01:12:52,000 --> 01:12:55,000
就中文输入法在 code 里面是不能工作的

2175
01:12:55,000 --> 01:12:56,000
但是我有点怀疑

2176
01:12:56,000 --> 01:12:57,000
就是我有点

2177
01:12:58,000 --> 01:13:00,000
奇怪就是你在一个编辑

2178
01:13:00,000 --> 01:13:02,000
代码编辑器里面输入中文干嘛

2179
01:13:04,000 --> 01:13:05,000
哦对提示

2180
01:13:05,000 --> 01:13:08,000
有些写注释会用中文写

2181
01:13:09,000 --> 01:13:10,000
注释用中文就挺二的

2182
01:13:11,000 --> 01:13:12,000
不过

2183
01:13:12,000 --> 01:13:12,000
但是

2184
01:13:12,000 --> 01:13:15,000
有很多的英文写不好

2185
01:13:15,000 --> 01:13:16,000
那就用中文写

2186
01:13:16,000 --> 01:13:18,000
国内我觉得这个还是蛮常见的

2187
01:13:18,000 --> 01:13:19,000
就再关键准确写拼

2188
01:13:19,000 --> 01:13:20,000
看着更痛苦

2189
01:13:21,000 --> 01:13:23,000
这让我想起了之前说什么

2190
01:13:23,000 --> 01:13:26,000
KDE 有一次版本更新是

2191
01:13:28,000 --> 01:13:30,000
从现在开始代码库里面终于没有德语了

2192
01:13:31,000 --> 01:13:33,000
有那种类似的感觉

2193
01:13:34,000 --> 01:13:36,000
这个也是黑的漂亮

2194
01:13:37,000 --> 01:13:38,000
然后

2195
01:13:39,000 --> 01:13:42,000
在 user voice 就是一个 feature request 网站上面

2196
01:13:42,000 --> 01:13:45,000
他们已经收到了 660 个 feature request

2197
01:13:46,000 --> 01:13:49,000
然后有

2198
01:13:49,000 --> 01:13:52,000
他们有一个所谓的 insiders program

2199
01:13:52,000 --> 01:13:56,000
就是让你可以更快的获得新的版本

2200
01:13:56,000 --> 01:13:58,000
或者是更快的得到新的

2201
01:13:58,000 --> 01:14:01,000
新闻更新的这么一个 program

2202
01:14:02,000 --> 01:14:07,000
他们在短时间内已经收到 1300 个用户的注册

2203
01:14:08,000 --> 01:14:12,000
然后在 stack overflow 上也已经有了和 code 相关的 195 个问题

2204
01:14:13,000 --> 01:14:17,000
所有这些都是在仅仅一周多月的时间里面出现的

2205
01:14:17,000 --> 01:14:17,000
所以

2206
01:14:18,000 --> 01:14:19,000
反响还是不错的

2207
01:14:23,000 --> 01:14:25,000
好关于 Vitio Studio Code

2208
01:14:25,000 --> 01:14:27,000
我们就差不多聊到这

2209
01:14:27,000 --> 01:14:31,000
然后之后我们如果能够用它写什么东西的话

2210
01:14:31,000 --> 01:14:32,000
再来跟大家回报

2211
01:14:32,000 --> 01:14:32,000
对

2212
01:14:33,000 --> 01:14:36,000
毕竟现在还是一个相对比较粗浅的认识

2213
01:14:36,000 --> 01:14:37,000
然后

2214
01:14:38,000 --> 01:14:40,000
还是需要长期的使用才有结果

2215
01:14:40,000 --> 01:14:43,000
但是我觉得短期的应该不会发生这件事情

2216
01:14:43,000 --> 01:14:44,000
就不着急

2217
01:14:44,000 --> 01:14:44,000
慢慢等

2218
01:14:44,000 --> 01:14:46,000
不管怎么说

2219
01:14:46,000 --> 01:14:50,000
这些厂商们能够开发跨平台的开发工具

2220
01:14:50,000 --> 01:14:52,000
对程序来说其实是一个解放

2221
01:14:52,000 --> 01:14:55,000
就是你可以选择自己喜欢的开发平台

2222
01:14:55,000 --> 01:14:57,000
用自己喜欢的开发源

2223
01:14:58,000 --> 01:14:59,000
开发自己喜欢的东西

2224
01:14:59,000 --> 01:15:00,000
就比如说

2225
01:15:01,000 --> 01:15:04,000
之前我一直说 Syshap 是我最喜欢的语言

2226
01:15:04,000 --> 01:15:09,000
但是在 Mac 上面就没有机缘去开发 Syshap 的工具

2227
01:15:09,000 --> 01:15:10,000
开发 Syshap 的程序

2228
01:15:10,000 --> 01:15:11,000
因为根本没有工具

2229
01:15:11,000 --> 01:15:12,000
而现在

2230
01:15:12,000 --> 01:15:15,000
巴尔默的黑暗的中世纪过了之后

2231
01:15:15,000 --> 01:15:18,000
这样的机会似乎开始出现了眼前了

2232
01:15:18,000 --> 01:15:19,000
我觉得这无论如何是一件好事

2233
01:15:20,000 --> 01:15:23,000
然后反过来其实也是一样的

2234
01:15:23,000 --> 01:15:28,000
就是这一次 Build 最受欢迎的 Session 之一

2235
01:15:28,000 --> 01:15:35,000
就是用 Windows Visual Studio 2005 编译 Object C 程序

2236
01:15:35,000 --> 01:15:42,000
如果你是一个想要给 iPhone 开发程序的人

2237
01:15:42,000 --> 01:15:44,000
然后你只有 iPhone 和 Windows 电脑

2238
01:15:45,000 --> 01:15:49,000
从 Windows Studio 2015 开始

2239
01:15:49,000 --> 01:15:52,000
你也可以用 Visual Studio 给 iPhone 开发程序

2240
01:15:52,000 --> 01:15:53,000
这也是一件

2241
01:15:54,000 --> 01:15:57,000
就是反过来也是一件很好事

2242
01:15:58,000 --> 01:16:00,000
我还没用过那个东西

2243
01:16:00,000 --> 01:16:02,000
但我现在也不做这个一顿开发不知道

2244
01:16:03,000 --> 01:16:04,000
但是如果说

2245
01:16:04,000 --> 01:16:07,000
因为大家对 Visual Studio 的评价是不错的

2246
01:16:07,000 --> 01:16:10,000
然后 Xcode 就是属于好看

2247
01:16:10,000 --> 01:16:12,000
但是可能不是那么好用的时候

2248
01:16:12,000 --> 01:16:16,000
到时候最最 Ironic 最讽刺的就是

2249
01:16:17,000 --> 01:16:21,000
你在为 iOS 开发最好的体验是用 Visual Studio

2250
01:16:21,000 --> 01:16:22,000
这个就搞笑了

2251
01:16:23,000 --> 01:16:24,000
这很有可能是真的

2252
01:16:24,000 --> 01:16:25,000
就好像

2253
01:16:27,000 --> 01:16:32,000
Intelligent 那个厂商 JetBrains 出了一个 Object C 的编译器

2254
01:16:32,000 --> 01:16:35,000
Ide 叫什么我已经忘了

2255
01:16:35,000 --> 01:16:36,000
但

2256
01:16:38,000 --> 01:16:39,000
就是 Object Codes 之类的

2257
01:16:40,000 --> 01:16:43,000
那个东西用起来就已经比 Xcode 要舒服很多了

2258
01:16:43,000 --> 01:16:44,000
但是

2259
01:16:46,000 --> 01:16:48,000
它一直没有推广起来

2260
01:16:48,000 --> 01:16:53,000
但很大一个原因是它试图在 OS X 上和 Xcode 争锋

2261
01:16:54,000 --> 01:16:55,000
这还是比较吃亏的

2262
01:16:55,000 --> 01:16:58,000
但是像 Visual Studio 2015 它目前还是只有 Windows 版本

2263
01:16:59,000 --> 01:17:01,000
基本上你在 Windows 上开发

2264
01:17:02,000 --> 01:17:05,000
OBJEC 的程序

2265
01:17:05,000 --> 01:17:09,000
迄今只有之前只有那个工具叫什么

2266
01:17:10,000 --> 01:17:11,000
XCode

2267
01:17:11,000 --> 01:17:11,000
叫

2268
01:17:14,000 --> 01:17:15,000
应该是叫 Zamarin

2269
01:17:16,000 --> 01:17:17,000
没念错了

2270
01:17:17,000 --> 01:17:18,000
OK

2271
01:17:18,000 --> 01:17:18,000
那样一个工具

2272
01:17:19,000 --> 01:17:22,000
然后现在还是你可以在 Visual Studio 2015 里面做这件事情

2273
01:17:22,000 --> 01:17:26,000
所以我觉得可能这样会无形中

2274
01:17:26,000 --> 01:17:28,000
给很多 iOS 开发者

2275
01:17:29,000 --> 01:17:30,000
Want to be

2276
01:17:30,000 --> 01:17:32,000
打开那扇大门

2277
01:17:34,000 --> 01:17:35,000
至少不用买 Mac 了

2278
01:17:35,000 --> 01:17:35,000
对吧

2279
01:17:35,000 --> 01:17:36,000
对

2280
01:17:36,000 --> 01:17:38,000
而且至少不用忍受 Xcode

2281
01:17:38,000 --> 01:17:39,000
不是有一句

2282
01:17:39,000 --> 01:17:39,000
等等

2283
01:17:40,000 --> 01:17:41,000
它那个只能编译

2284
01:17:41,000 --> 01:17:41,000
它能提交吗

2285
01:17:41,000 --> 01:17:42,000
不能提交

2286
01:17:42,000 --> 01:17:45,000
你提交到 App Store 还是得通过 Xcode 来做

2287
01:17:45,000 --> 01:17:45,000
对吧

2288
01:17:48,000 --> 01:17:50,000
如果它能编译出一个 IPA 来就可以

2289
01:17:50,000 --> 01:17:55,000
因为提交 App 这件事情不是可以在网页上做的

2290
01:17:56,000 --> 01:17:58,000
我记得是可以

2291
01:17:58,000 --> 01:18:01,000
就是并不一定要在 Xcode 里面验证

2292
01:18:01,000 --> 01:18:05,000
然后通过 Xcode 的那个 Archive 管理器提交

2293
01:18:07,000 --> 01:18:08,000
好

2294
01:18:08,000 --> 01:18:09,000
那如果再这样

2295
01:18:09,000 --> 01:18:10,000
我觉得可能很可能

2296
01:18:10,000 --> 01:18:11,000
这个什么

2297
01:18:11,000 --> 01:18:15,000
苹果的律师就要给未来律师寄文件了

2298
01:18:15,000 --> 01:18:17,000
或者苹果会耍一些小手段

2299
01:18:17,000 --> 01:18:22,000
让用户只能通过 Xcode 来提交程序

2300
01:18:22,000 --> 01:18:23,000
但我觉得这样太二了吧

2301
01:18:23,000 --> 01:18:24,000
何必呢

2302
01:18:24,000 --> 01:18:24,000
这不是

2303
01:18:27,000 --> 01:18:30,000
这个我觉得还是有一定的意义

2304
01:18:30,000 --> 01:18:33,000
因为这样 Mac 的销量就会受到很大影响

2305
01:18:33,000 --> 01:18:35,000
你现在知道很多这种创业团队

2306
01:18:35,000 --> 01:18:41,000
它就纯粹是为了要开发 Mac 或者是 iPhone 的应用

2307
01:18:41,000 --> 01:18:43,000
它才给开发

2308
01:18:43,000 --> 01:18:45,000
就才招聘使用这个

2309
01:18:45,000 --> 01:18:50,000
然后如果说这块都完全没必要

2310
01:18:50,000 --> 01:18:51,000
他们就完全可以用 Windows

2311
01:18:51,000 --> 01:18:52,000
就是 Ratio Studio 就搞定了

2312
01:18:52,000 --> 01:18:54,000
那甚至连 Mac 都不需要买了

2313
01:18:54,000 --> 01:18:56,000
你要按照乔布斯那个德行

2314
01:18:56,000 --> 01:18:58,000
肯定是不会东西这种事情发生的

2315
01:18:58,000 --> 01:18:58,000
我觉得

2316
01:18:59,000 --> 01:19:00,000
说得也对

2317
01:19:00,000 --> 01:19:01,000
然后

2318
01:19:01,000 --> 01:19:02,000
当然 Windows

2319
01:19:02,000 --> 01:19:04,000
Windows 的用户还有另外一个选择

2320
01:19:04,000 --> 01:19:09,000
就是用 Syshop 开发跨平台的移动 App

2321
01:19:09,000 --> 01:19:11,000
就是你用 Syshop 写一个移动 App

2322
01:19:11,000 --> 01:19:13,000
它可以自动被编译成

2323
01:19:14,000 --> 01:19:17,000
iPhone Android 和 Windows Phone 上去

2324
01:19:18,000 --> 01:19:19,000
这个也是

2325
01:19:19,000 --> 01:19:20,000
就等于是你

2326
01:19:20,000 --> 01:19:25,000
如果你不是说只希望在 Windows 上为 iPhone 开发程序的话

2327
01:19:25,000 --> 01:19:26,000
你甚至可以

2328
01:19:26,000 --> 01:19:31,000
或者说也许更多的人会选择使用 Syshop 来开发跨平台的程序

2329
01:19:31,000 --> 01:19:33,000
然后让 Visual Studio 去操心

2330
01:19:33,000 --> 01:19:38,000
把 Syshop 转移成平台对应的目标源

2331
01:19:38,000 --> 01:19:40,000
这件这件苦差事

2332
01:19:42,000 --> 01:19:42,000
对

2333
01:19:42,000 --> 01:19:43,000
有一个 Session 就是这样的

2334
01:19:43,000 --> 01:19:44,000
当然我没看完

2335
01:19:44,000 --> 01:19:45,000
但是一开始一开头

2336
01:19:45,000 --> 01:19:47,000
基本上那个演示研究

2337
01:19:48,000 --> 01:19:50,000
试图

2338
01:19:51,000 --> 01:19:52,000
运行一个 Demo

2339
01:19:52,000 --> 01:19:55,000
这个 Demo 编译之后可以同时跑在 Windows Phone

2340
01:19:55,000 --> 01:19:56,000
iPhone 和 Android 上

2341
01:19:56,000 --> 01:19:58,000
然后它是用 Syshop 写的

2342
01:19:59,000 --> 01:20:00,000
然后这一次

2343
01:20:00,000 --> 01:20:06,000
Microsoft Build 上面还展示了新的 Directive X 12

2344
01:20:06,000 --> 01:20:07,000
就是

2345
01:20:08,000 --> 01:20:09,000
这可能也是一个比较重要的事情吧

2346
01:20:09,000 --> 01:20:10,000
就是因为

2347
01:20:11,000 --> 01:20:12,000
至少我不知道你

2348
01:20:12,000 --> 01:20:14,000
至少我一直心心念念想要

2349
01:20:14,000 --> 01:20:16,000
传一台 Windows 机器

2350
01:20:16,000 --> 01:20:19,000
就是因为有好多游戏是只能在 Windows 上跑的

2351
01:20:19,000 --> 01:20:23,000
然后微软也是延续的这个游戏传统

2352
01:20:23,000 --> 01:20:24,000
就是一定要

2353
01:20:25,000 --> 01:20:28,000
向大家展示 Windows 是一个多么适合做游戏的平台

2354
01:20:29,000 --> 01:20:31,000
尤其是 Windows 的这一套 3 D

2355
01:20:32,000 --> 01:20:32,000
3 D 酷吧

2356
01:20:32,000 --> 01:20:35,000
3 D 图形酷 Directive X 12

2357
01:20:35,000 --> 01:20:37,000
然后它不是请到了

2358
01:20:39,000 --> 01:20:40,000
Square 安妮克斯

2359
01:20:41,000 --> 01:20:43,000
展示了下一代游戏

2360
01:20:43,000 --> 01:20:44,000
那个游戏叫什么我忘了

2361
01:20:45,000 --> 01:20:47,000
Witch 应该叫 Witch

2362
01:20:47,000 --> 01:20:49,000
然后它展示了一个

2363
01:20:49,000 --> 01:20:51,000
一开始我以为是一段 CG

2364
01:20:51,000 --> 01:20:52,000
然后

2365
01:20:53,000 --> 01:20:53,000
它

2366
01:20:54,000 --> 01:20:57,000
反正场景就是一个女人趴在地上在哭

2367
01:20:57,000 --> 01:20:59,000
然后我想这有什么看的

2368
01:20:59,000 --> 01:20:59,000
然后

2369
01:21:00,000 --> 01:21:01,000
播完之后它说

2370
01:21:01,000 --> 01:21:03,000
大家以为刚才是 CG 吗

2371
01:21:03,000 --> 01:21:04,000
其实刚才是游戏画面

2372
01:21:04,000 --> 01:21:05,000
然后我就惊呆了

2373
01:21:05,000 --> 01:21:06,000
因为那个

2374
01:21:06,000 --> 01:21:09,000
就是实景不是预先渲染好的录像

2375
01:21:09,000 --> 01:21:12,000
就是你看起来那个东西跟 CG 一模一样

2376
01:21:12,000 --> 01:21:13,000
但是它

2377
01:21:13,000 --> 01:21:14,000
播到一半的时候

2378
01:21:14,000 --> 01:21:17,000
它说好现在我要把它转成 Manual 模式

2379
01:21:18,000 --> 01:21:19,000
然后整个场景就

2380
01:21:20,000 --> 01:21:20,000
停下来了

2381
01:21:20,000 --> 01:21:22,000
然后它开始移动镜头

2382
01:21:22,000 --> 01:21:23,000
我觉得

2383
01:21:23,000 --> 01:21:25,000
那一刹那真的是挺震撼的

2384
01:21:25,000 --> 01:21:28,000
就你眼前看到的一个像

2385
01:21:28,000 --> 01:21:29,000
有点像什么的

2386
01:21:29,000 --> 01:21:32,000
有点那精细程度非常接近

2387
01:21:33,000 --> 01:21:36,000
之前的最终幻想的那个电影版

2388
01:21:36,000 --> 01:21:37,000
我不知道你看过没有

2389
01:21:38,000 --> 01:21:38,000
就是

2390
01:21:38,000 --> 01:21:39,000
我知道

2391
01:21:39,000 --> 01:21:41,000
因为它要渲染那个长头发嘛

2392
01:21:41,000 --> 01:21:42,000
那个是很困难的

2393
01:21:42,000 --> 01:21:43,000
然后它

2394
01:21:43,000 --> 01:21:44,000
开始

2395
01:21:44,000 --> 01:21:45,000
转镜头的时候

2396
01:21:45,000 --> 01:21:47,000
你会发现这个

2397
01:21:47,000 --> 01:21:50,000
里面所有的场景都可以实时渲染成

2398
01:21:51,000 --> 01:21:54,000
非常接近于现在的最顶级的 CG 的程度

2399
01:21:55,000 --> 01:21:56,000
然后

2400
01:21:57,000 --> 01:21:59,000
包括每根头发都是用多边形

2401
01:21:59,000 --> 01:22:00,000
每一根头发

2402
01:22:00,000 --> 01:22:03,000
就是这个人物头上可能有几千根头发

2403
01:22:03,000 --> 01:22:04,000
三千反导丝

2404
01:22:04,000 --> 01:22:07,000
每一根头发都是用那个多边形渲染而成

2405
01:22:07,000 --> 01:22:10,000
然后光的效果照在上面非常非常好

2406
01:22:10,000 --> 01:22:13,000
然后它宣称说现在

2407
01:22:13,000 --> 01:22:21,000
效果应该是 DirectX 11 的 6 到 10 倍

2408
01:22:21,000 --> 01:22:24,000
所以还是相当可观的一个提升

2409
01:22:25,000 --> 01:22:27,000
其实最主要的原因就是说

2410
01:22:28,000 --> 01:22:29,000
就这么理解就是

2411
01:22:30,000 --> 01:22:31,000
它的这个

2412
01:22:32,000 --> 01:22:33,000
overhead 少了嘛

2413
01:22:33,000 --> 01:22:36,000
就更加接近于硬件本身能够提供的性能

2414
01:22:37,000 --> 01:22:39,000
这个其实一个挺重要的

2415
01:22:39,000 --> 01:22:41,000
就几个厂商都在做同样的事情

2416
01:22:41,000 --> 01:22:42,000
首先

2417
01:22:42,000 --> 01:22:44,000
可能比较早的是那个

2418
01:22:44,000 --> 01:22:47,000
就起码概念上他先做这个就是苹果那个叫什么

2419
01:22:47,000 --> 01:22:48,000
Metal

2420
01:22:48,000 --> 01:22:48,000
Metal 吧

2421
01:22:49,000 --> 01:22:51,000
Metal 主要是贴近移动的

2422
01:22:51,000 --> 01:22:53,000
对但它这个只有 Metal

2423
01:22:53,000 --> 01:22:55,000
对 Metal 厂商只有在 IOS 上才有

2424
01:22:56,000 --> 01:22:57,000
然后

2425
01:22:57,000 --> 01:23:00,000
后来是 AMD 出了一个叫什么

2426
01:23:01,000 --> 01:23:02,000
叫

2427
01:23:03,000 --> 01:23:04,000
名字我一下想不起来了

2428
01:23:04,000 --> 01:23:06,000
因为但是他们也在做类似的事情

2429
01:23:07,000 --> 01:23:07,000
就是说

2430
01:23:07,000 --> 01:23:11,000
怎么样能够更好的

2431
01:23:11,000 --> 01:23:15,000
暴露出这个显卡原生的硬件的性能

2432
01:23:15,000 --> 01:23:19,000
然后减少中间的增加的额外的复杂

2433
01:23:21,000 --> 01:23:23,000
你说对那个 AMD 叫 Metal

2434
01:23:23,000 --> 01:23:23,000
对

2435
01:23:23,000 --> 01:23:25,000
对对 Metal 就挺像的

2436
01:23:25,000 --> 01:23:25,000
就一个 Metal

2437
01:23:25,000 --> 01:23:27,000
对 Dimant 那个说对

2438
01:23:28,000 --> 01:23:29,000
对没错没错

2439
01:23:30,000 --> 01:23:32,000
然后但毕竟就微软这个

2440
01:23:32,000 --> 01:23:34,000
他做这个还是有优势的

2441
01:23:34,000 --> 01:23:34,000
因为之前

2442
01:23:35,000 --> 01:23:38,000
有很多游戏厂商还是走什么 DirectX 这条线的

2443
01:23:38,000 --> 01:23:39,000
对

2444
01:23:39,000 --> 01:23:41,000
那么他自己做的顺序板

2445
01:23:41,000 --> 01:23:43,000
可能还是有很多会常常会跟进

2446
01:23:43,000 --> 01:23:44,000
然后这样在发行上会有好处

2447
01:23:45,000 --> 01:23:46,000
但是我不太清楚

2448
01:23:46,000 --> 01:23:50,000
现在 DirectX 和 OpenGL

2449
01:23:51,000 --> 01:23:51,000
他们之间的

2450
01:23:53,000 --> 01:23:55,000
有谁比谁领先很明显吗

2451
01:23:55,000 --> 01:23:56,000
有这种样的区别吗

2452
01:23:57,000 --> 01:23:58,000
我看到的说法是

2453
01:23:58,000 --> 01:24:00,000
如果你不想让自己的脑袋爆掉的话

2454
01:24:00,000 --> 01:24:02,000
就选择 DirectX 比较好

2455
01:24:03,000 --> 01:24:05,000
就从一个开发者的角度来看

2456
01:24:05,000 --> 01:24:07,000
如果你不打算支持多平台

2457
01:24:07,000 --> 01:24:10,000
然后你又想要比较好的文档

2458
01:24:10,000 --> 01:24:12,000
那选择 DirectX 是比较好

2459
01:24:13,000 --> 01:24:16,000
就是开发体验上是 DirectX 这个系列更好

2460
01:24:16,000 --> 01:24:18,000
因为毕竟是单一

2461
01:24:19,000 --> 01:24:20,000
比较新

2462
01:24:20,000 --> 01:24:22,000
而且是说历史包袱相对较少

2463
01:24:22,000 --> 01:24:25,000
OpenGL 的我看他们说主要的问题就是讲

2464
01:24:26,000 --> 01:24:28,000
因为历史包袱比较沉重

2465
01:24:28,000 --> 01:24:29,000
各种那种

2466
01:24:29,000 --> 01:24:31,000
就是几套 API

2467
01:24:31,000 --> 01:24:33,000
都是在同一个版本里面存在

2468
01:24:33,000 --> 01:24:35,000
没有所有 DirectX 的这种情况

2469
01:24:35,000 --> 01:24:37,000
导致开发者看完就很辛苦

2470
01:24:37,000 --> 01:24:41,000
你说你明明可以用一个更好的方式实现的

2471
01:24:41,000 --> 01:24:42,000
但是你可能就是没翻到那一页

2472
01:24:42,000 --> 01:24:43,000
因为实在太长了

2473
01:24:43,000 --> 01:24:46,000
那你看了一个比较原始或模糊的方案来实现

2474
01:24:46,000 --> 01:24:48,000
可能对性能也不好

2475
01:24:50,000 --> 01:24:51,000
你的开发难度也大

2476
01:24:52,000 --> 01:24:55,000
当然最好的好处就是说你可以在多个平台运行

2477
01:24:55,000 --> 01:24:56,000
你现在可以比较

2478
01:24:57,000 --> 01:24:59,000
不需要怎么太改

2479
01:24:59,000 --> 01:25:05,000
就可以兼容多个平台的类型也好

2480
01:25:05,000 --> 01:25:06,000
对吧

2481
01:25:06,000 --> 01:25:08,000
游戏手机专利的时候是有 OpenGL

2482
01:25:08,000 --> 01:25:09,000
但是它是一个什么 ES

2483
01:25:10,000 --> 01:25:14,000
然后桌面端也有各种不同机型

2484
01:25:14,000 --> 01:25:15,000
好像那个什么

2485
01:25:15,000 --> 01:25:19,000
就是 PS 4 和 Xbox 都是可以支持这种吧

2486
01:25:21,000 --> 01:25:24,000
你说 DirectX 还是 OpenGL

2487
01:25:24,000 --> 01:25:25,000
不那个 OpenGL

2488
01:25:25,000 --> 01:25:26,000
对没错

2489
01:25:27,000 --> 01:25:29,000
对差不多是这个意思

2490
01:25:29,000 --> 01:25:32,000
对所以开发者还是要取舍一下的

2491
01:25:32,000 --> 01:25:35,000
你是要市场呢

2492
01:25:35,000 --> 01:25:37,000
要体验呢还是怎么这么的

2493
01:25:37,000 --> 01:25:37,000
没错

2494
01:25:38,000 --> 01:25:41,000
然后当然我印象里面之前有过一个

2495
01:25:43,000 --> 01:25:48,000
就是应该是 N 厂的那个 NVIDIA 厂商的开发者

2496
01:25:49,000 --> 01:25:53,000
在一个论坛上面写了一篇非常长的倒苦水的帖子

2497
01:25:54,000 --> 01:25:58,000
就说那些用 DirectX 的人全都不知道怎么样正确的使用 API

2498
01:25:59,000 --> 01:26:06,000
然后有些 BlockBuster 级别的大作都非常非常的蠢

2499
01:26:06,000 --> 01:26:10,000
就是没有以合适的方式来使用 API

2500
01:26:10,000 --> 01:26:13,000
使得游戏的性能非常非常的弱

2501
01:26:13,000 --> 01:26:17,000
然后最后玩家会怪到显卡头上

2502
01:26:17,000 --> 01:26:21,000
说显卡的功能不够强劲什么的

2503
01:26:21,000 --> 01:26:27,000
然后他们说他们 literally 每一代的 Driver

2504
01:26:30,000 --> 01:26:33,000
如果你好奇过一个 Driver 要下个三五百张

2505
01:26:33,000 --> 01:26:34,000
那是在下什么

2506
01:26:34,000 --> 01:26:36,000
其实里面都是给每个游戏的补丁

2507
01:26:36,000 --> 01:26:40,000
就是检测到说原来你是在运行这个游戏

2508
01:26:40,000 --> 01:26:42,000
好这个游戏里面有这个部分写得非常的蠢

2509
01:26:43,000 --> 01:26:44,000
每当运行到这部分的时候

2510
01:26:44,000 --> 01:26:50,000
我们就切换成我们所谓它提供的正确的比较好的 API 调用

2511
01:26:50,000 --> 01:26:53,000
然后整个游戏的 performance 立刻就上去了

2512
01:26:56,000 --> 01:26:59,000
显卡厂商也是不容易过的

2513
01:27:02,000 --> 01:27:06,000
这也是就说什么像苹果这种软硬合一的厂商

2514
01:27:06,000 --> 01:27:07,000
它就有好处

2515
01:27:08,000 --> 01:27:10,000
我 Metal 我出了就出了

2516
01:27:10,000 --> 01:27:12,000
然后我开发者我一个都还没讲

2517
01:27:13,000 --> 01:27:14,000
然后这个 API 很爽

2518
01:27:14,000 --> 01:27:16,000
硬件都给你搞好

2519
01:27:16,000 --> 01:27:17,000
你再用这个体验就是不错的

2520
01:27:18,000 --> 01:27:20,000
当然可能微软做不到那么好

2521
01:27:20,000 --> 01:27:21,000
但是那 TriHack 就去刺吧

2522
01:27:21,000 --> 01:27:23,000
我起码 API 我可以同意

2523
01:27:23,000 --> 01:27:24,000
然后可以提供比较好的

2524
01:27:24,000 --> 01:27:25,000
对

2525
01:27:25,000 --> 01:27:28,000
至于后面跟硬件底层打交道怎么去折腾

2526
01:27:28,000 --> 01:27:30,000
反正我把这个干活累活干了

2527
01:27:30,000 --> 01:27:31,000
你们上面爽就好了

2528
01:27:31,000 --> 01:27:36,000
但是前提就是你们得接着用我这个 proprietary 的系统

2529
01:27:37,000 --> 01:27:37,000
对

2530
01:27:37,000 --> 01:27:42,000
所以如果人两个巨头能够曲长不短就好

2531
01:27:44,000 --> 01:27:46,000
但是现实总是不那么美好的

2532
01:27:46,000 --> 01:27:46,000
对

2533
01:27:47,000 --> 01:27:48,000
所以不指望

2534
01:27:49,000 --> 01:27:50,000
他们这次还发布了

2535
01:27:50,000 --> 01:27:51,000
也不叫发布

2536
01:27:51,000 --> 01:27:53,000
就算是一个名字

2537
01:27:54,000 --> 01:27:57,000
那个传说中的取代 IE 的流量器

2538
01:27:57,000 --> 01:27:58,000
有 project sparta

2539
01:28:00,000 --> 01:28:02,000
斯巴谭

2540
01:28:02,000 --> 01:28:03,000
斯巴达

2541
01:28:03,000 --> 01:28:06,000
斯巴谭就是古希腊的城邦

2542
01:28:06,000 --> 01:28:07,000
斯巴达人

2543
01:28:07,000 --> 01:28:08,000
对

2544
01:28:08,000 --> 01:28:08,000
对

2545
01:28:09,000 --> 01:28:10,000
这个你有看吗

2546
01:28:10,000 --> 01:28:12,000
之前我在那个什么

2547
01:28:12,000 --> 01:28:14,000
IT 工作那边大概聊了一下

2548
01:28:14,000 --> 01:28:16,000
但是也是因为没有用到

2549
01:28:16,000 --> 01:28:17,000
也不知道到底是个什么样的

2550
01:28:17,000 --> 01:28:18,000
你说看是什么意思

2551
01:28:18,000 --> 01:28:19,000
看这个

2552
01:28:21,000 --> 01:28:22,000
他应该有那个

2553
01:28:22,000 --> 01:28:24,000
你有用他的 beta 版本吗

2554
01:28:24,000 --> 01:28:24,000
没有

2555
01:28:24,000 --> 01:28:26,000
我只看了一个他的展示 demo

2556
01:28:27,000 --> 01:28:30,000
我觉得我印象最深刻就是 Edge 做得非常漂亮

2557
01:28:33,000 --> 01:28:34,000
漂亮是指哪

2558
01:28:34,000 --> 01:28:35,000
具体指哪些方面

2559
01:28:35,000 --> 01:28:38,000
就是他把整个 UI 的

2560
01:28:39,000 --> 01:28:41,000
不仅仅是扁平化

2561
01:28:41,000 --> 01:28:45,000
而且他把 UI 去 UI 化

2562
01:28:45,000 --> 01:28:48,000
就是你看不到非常明显的

2563
01:28:49,000 --> 01:28:49,000
比如一个按钮

2564
01:28:49,000 --> 01:28:51,000
然后这个按钮基本上就只有一个

2565
01:28:52,000 --> 01:28:54,000
一项速度的宽的一个边缘

2566
01:28:54,000 --> 01:28:57,000
然后其他所有流动器都是这个网页的预览图

2567
01:28:58,000 --> 01:28:58,000
或者比如说

2568
01:28:58,000 --> 01:28:59,000
OK

2569
01:28:59,000 --> 01:28:59,000
你

2570
01:29:00,000 --> 01:29:03,000
他那个流量器上面有一排 tab

2571
01:29:03,000 --> 01:29:05,000
然后你把鼠标挪到每个 tab 上面

2572
01:29:05,000 --> 01:29:08,000
就会立刻下面出现一个 dropdown

2573
01:29:08,000 --> 01:29:11,000
然后这个 dropdown 里面就是这个页面

2574
01:29:11,000 --> 01:29:13,000
目前正在显示的东西的一个小预览图

2575
01:29:16,000 --> 01:29:17,000
或者

2576
01:29:18,000 --> 01:29:19,000
要按一个按钮

2577
01:29:19,000 --> 01:29:21,000
这个按钮基本上也是

2578
01:29:21,000 --> 01:29:23,000
大部分地方都是图片

2579
01:29:23,000 --> 01:29:25,000
或者是你需要看的东西

2580
01:29:25,000 --> 01:29:27,000
而不是一个按钮本身

2581
01:29:27,000 --> 01:29:29,000
就 Edge to Edge

2582
01:29:29,000 --> 01:29:32,000
我觉得他可能也是跟这个名字来的

2583
01:29:32,000 --> 01:29:34,000
所有的东西都是

2584
01:29:36,000 --> 01:29:37,000
所有东西都是内容

2585
01:29:37,000 --> 01:29:38,000
然后他是这个内容的 Edge

2586
01:29:38,000 --> 01:29:41,000
其实有点跟 Chrome 有点异曲同工之妙

2587
01:29:41,000 --> 01:29:43,000
但他叫的更直白一些

2588
01:29:44,000 --> 01:29:44,000
一个是框

2589
01:29:44,000 --> 01:29:45,000
一个是边

2590
01:29:45,000 --> 01:29:46,000
而且是边框

2591
01:29:46,000 --> 01:29:47,000
对

2592
01:29:47,000 --> 01:29:50,000
他的暗域就是你所要看到的一切内容

2593
01:29:52,000 --> 01:29:53,000
都让你看到

2594
01:29:53,000 --> 01:29:55,000
就是你尽可能多去看到内容

2595
01:29:55,000 --> 01:29:57,000
而我只是作为这个内容

2596
01:29:57,000 --> 01:29:59,000
外面的那一像素的白边而已

2597
01:30:01,000 --> 01:30:02,000
这个我对他理解

2598
01:30:02,000 --> 01:30:03,000
明明是你理解

2599
01:30:03,000 --> 01:30:05,000
可能还没想到这一次没有

2600
01:30:05,000 --> 01:30:07,000
你把它理解为 Blooding Edge 是吧

2601
01:30:07,000 --> 01:30:08,000
Bleeding Edge

2602
01:30:08,000 --> 01:30:10,000
因为他那个

2603
01:30:10,000 --> 01:30:11,000
还有那个 IE

2604
01:30:11,000 --> 01:30:12,000
他不是有各种兼有模式吗

2605
01:30:12,000 --> 01:30:13,000
没有

2606
01:30:14,000 --> 01:30:15,000
然后他那个最新的模式

2607
01:30:15,000 --> 01:30:16,000
就是叫做 Edge Mode

2608
01:30:16,000 --> 01:30:17,000
OK

2609
01:30:18,000 --> 01:30:20,000
然后他不是承诺说这个有氧气胶一直

2610
01:30:20,000 --> 01:30:23,000
就是永远处在时代最前沿

2611
01:30:23,000 --> 01:30:25,000
所以就是 Edge 是吧

2612
01:30:25,000 --> 01:30:25,000
对

2613
01:30:25,000 --> 01:30:26,000
Cutting Edge

2614
01:30:26,000 --> 01:30:30,000
然后我是这么理解他这个命名的来历的

2615
01:30:30,000 --> 01:30:31,000
但你说到这么

2616
01:30:31,000 --> 01:30:33,000
也确实也是一个挺有

2617
01:30:33,000 --> 01:30:37,000
是挺有说服力的一个讲法

2618
01:30:38,000 --> 01:30:40,000
但我觉得可能 Edge 最有

2619
01:30:40,000 --> 01:30:45,000
对开发者最有意义的一点是

2620
01:30:45,000 --> 01:30:48,000
他不再支持 ActiveX 那个空间

2621
01:30:50,000 --> 01:30:52,000
他终于甩掉了一个毒瘤

2622
01:30:53,000 --> 01:30:54,000
对

2623
01:30:54,000 --> 01:30:56,000
甩掉了一个历史重大的包袱

2624
01:30:56,000 --> 01:30:58,000
然后如果这个流行起来

2625
01:30:58,000 --> 01:31:00,000
我们就可以看到国内那些愚蠢的

2626
01:31:00,000 --> 01:31:01,000
网银厂商也好

2627
01:31:01,000 --> 01:31:03,000
银行登录商也好

2628
01:31:03,000 --> 01:31:05,000
再装一个什么狗屁的空间这种事情

2629
01:31:06,000 --> 01:31:06,000
对

2630
01:31:07,000 --> 01:31:08,000
You never know

2631
01:31:08,000 --> 01:31:08,000
我觉得

2632
01:31:11,000 --> 01:31:12,000
政府什么事情都干得出来

2633
01:31:12,000 --> 01:31:13,000
很难说

2634
01:31:13,000 --> 01:31:15,000
也许政府会说

2635
01:31:15,000 --> 01:31:16,000
你不支持 ActiveX

2636
01:31:16,000 --> 01:31:17,000
不要进中国市场

2637
01:31:18,000 --> 01:31:20,000
你能反他怎么递吗

2638
01:31:22,000 --> 01:31:23,000
搞得跟韩国一样

2639
01:31:25,000 --> 01:31:27,000
我觉得其实你说如果

2640
01:31:28,000 --> 01:31:29,000
好现在 Google 被办了

2641
01:31:30,000 --> 01:31:30,000
然后

2642
01:31:32,000 --> 01:31:34,000
苹果是反正苹果不在意

2643
01:31:34,000 --> 01:31:35,000
苹果是做硬件的

2644
01:31:35,000 --> 01:31:38,000
那如果 Microsoft 也被办了的话

2645
01:31:39,000 --> 01:31:39,000
中国人用什么

2646
01:31:41,000 --> 01:31:42,000
对

2647
01:31:42,000 --> 01:31:43,000
是一个

2648
01:31:44,000 --> 01:31:45,000
在大推 20 年

2649
01:31:45,000 --> 01:31:47,000
你当然可以说这种情况

2650
01:31:47,000 --> 01:31:49,000
出现的可能性微红其微

2651
01:31:49,000 --> 01:31:49,000
但是

2652
01:31:51,000 --> 01:31:53,000
参争就是在理论上有可能

2653
01:31:53,000 --> 01:31:55,000
说微软骨子这么软的一个公司是吧

2654
01:31:55,000 --> 01:31:56,000
对

2655
01:31:57,000 --> 01:32:00,000
还有一个比较好玩的

2656
01:32:00,000 --> 01:32:02,000
他支持那个 Chrome 和 Firefox 那些扩展

2657
01:32:03,000 --> 01:32:04,000
对

2658
01:32:04,000 --> 01:32:06,000
这个也是比较很独立的一个招数

2659
01:32:06,000 --> 01:32:07,000
我觉得

2660
01:32:08,000 --> 01:32:10,000
我觉得这个做起来不算太难

2661
01:32:10,000 --> 01:32:12,000
因为那个扩展也是有一个 JavaScript

2662
01:32:12,000 --> 01:32:13,000
加那个 HTML

2663
01:32:13,000 --> 01:32:14,000
HTML 5 写的

2664
01:32:14,000 --> 01:32:15,000
一般是这样子

2665
01:32:16,000 --> 01:32:16,000
他这个人

2666
01:32:16,000 --> 01:32:19,000
可能知识上也并不是特别复杂

2667
01:32:19,000 --> 01:32:20,000
但是意义还是蛮大的

2668
01:32:20,000 --> 01:32:21,000
就跟其实

2669
01:32:21,000 --> 01:32:22,000
他们 Build 的这次上面

2670
01:32:22,000 --> 01:32:24,000
我们可能自己不会单独讲

2671
01:32:26,000 --> 01:32:28,000
他那个 Windows 10 上不是可以

2672
01:32:29,000 --> 01:32:29,000
不是 Windows 10

2673
01:32:29,000 --> 01:32:32,000
就 Windows 10 在 Windows Phone 上的版本

2674
01:32:32,000 --> 01:32:33,000
它不是可以

2675
01:32:33,000 --> 01:32:36,000
原生就是可以兼容运行 Android 应用

2676
01:32:36,000 --> 01:32:39,000
然后也可以兼容运行这个 LS 应用

2677
01:32:39,000 --> 01:32:40,000
所以这个有点

2678
01:32:41,000 --> 01:32:42,000
一举同工的意思

2679
01:32:42,000 --> 01:32:43,000
因为很多人

2680
01:32:43,000 --> 01:32:45,000
像是那种 Firefox 的重度用户

2681
01:32:45,000 --> 01:32:46,000
他为什么离不开

2682
01:32:47,000 --> 01:32:48,000
但除了一个精神理念上

2683
01:32:48,000 --> 01:32:51,000
他支持这种开源免费的这种独立的流量器之外

2684
01:32:51,000 --> 01:32:53,000
可能很多一个因素就是有很多人

2685
01:32:53,000 --> 01:32:54,000
装了这种各种各样的小插件

2686
01:32:54,000 --> 01:32:56,000
然后对他们来说

2687
01:32:56,000 --> 01:32:58,000
这些插件不管是他们工作也好

2688
01:32:58,000 --> 01:32:58,000
生活也好

2689
01:32:58,000 --> 01:33:00,000
都是属于那种必不可少的工具

2690
01:33:01,000 --> 01:33:01,000
然后

2691
01:33:03,000 --> 01:33:03,000
你这个

2692
01:33:04,000 --> 01:33:05,000
因为 IE 是没什么插件的

2693
01:33:05,000 --> 01:33:08,000
IE 的插件都是什么流氓厂商装的

2694
01:33:08,000 --> 01:33:09,000
流氓软件

2695
01:33:10,000 --> 01:33:12,000
用户自己装的插件是相对比较少的

2696
01:33:12,000 --> 01:33:13,000
当然他说他能够

2697
01:33:14,000 --> 01:33:15,000
这次

2698
01:33:15,000 --> 01:33:17,000
把这个东西集成进来能够做一些

2699
01:33:17,000 --> 01:33:19,000
我觉得还是挺不错的

2700
01:33:19,000 --> 01:33:21,000
就能够争取市场地位的一个做法

2701
01:33:21,000 --> 01:33:21,000
对

2702
01:33:21,000 --> 01:33:25,000
当然具体能不能成功还是要看细节了

2703
01:33:25,000 --> 01:33:27,000
他的这个策略最大的问题就是

2704
01:33:27,000 --> 01:33:28,000
你必须把细节做好

2705
01:33:28,000 --> 01:33:30,000
如果你说

2706
01:33:30,000 --> 01:33:32,000
所有这些插件能跑是能跑

2707
01:33:32,000 --> 01:33:34,000
可是要么特别卡

2708
01:33:34,000 --> 01:33:35,000
要么有些功能用不了

2709
01:33:36,000 --> 01:33:38,000
那我觉得还是

2710
01:33:38,000 --> 01:33:41,000
还是会迫使很多人说

2711
01:33:41,000 --> 01:33:41,000
哎呦

2712
01:33:41,000 --> 01:33:45,000
我这个东西是 mission critical

2713
01:33:45,000 --> 01:33:46,000
你跑不好的话

2714
01:33:46,000 --> 01:33:46,000
那我宁可不用

2715
01:33:46,000 --> 01:33:47,000
我还是用回去

2716
01:33:47,000 --> 01:33:49,000
反正也不损失什么

2717
01:33:49,000 --> 01:33:49,000
不是

2718
01:33:50,000 --> 01:33:50,000
就

2719
01:33:50,000 --> 01:33:52,000
然后反过来

2720
01:33:52,000 --> 01:33:55,000
在 Windows 上面跑那个 iPhone 和 Android 应用

2721
01:33:55,000 --> 01:33:56,000
其实也是这样

2722
01:33:56,000 --> 01:33:57,000
如果说

2723
01:33:57,000 --> 01:33:59,000
你这个应用能在 Windows 上面跑

2724
01:33:59,000 --> 01:34:01,000
但是用起来怎么用怎么用

2725
01:34:01,000 --> 01:34:03,000
怎么用怎么觉得别扭

2726
01:34:03,000 --> 01:34:05,000
我觉得还是一个很大的问题

2727
01:34:06,000 --> 01:34:08,000
我觉得可能还是

2728
01:34:08,000 --> 01:34:10,000
我觉得这个问题可能比那个在 Windows

2729
01:34:10,000 --> 01:34:11,000
10 的

2730
01:34:11,000 --> 01:34:13,000
而且 Windows Phone 上跑安卓和 iOS 应用

2731
01:34:13,000 --> 01:34:14,000
比较简单得多

2732
01:34:14,000 --> 01:34:18,000
因为毕竟上你是要做一些非常麻烦的事情

2733
01:34:18,000 --> 01:34:19,000
你要提供兼容的 API

2734
01:34:19,000 --> 01:34:21,000
你要考虑说万一他用了这个

2735
01:34:22,000 --> 01:34:24,000
什么平台独私有的 API 或者独特的 API

2736
01:34:24,000 --> 01:34:25,000
你怎么去兼容

2737
01:34:25,000 --> 01:34:26,000
你怎么去折腾

2738
01:34:26,000 --> 01:34:27,000
还要稳定信仰

2739
01:34:27,000 --> 01:34:28,000
这都是很难保证的

2740
01:34:29,000 --> 01:34:30,000
因为你没有这个

2741
01:34:30,000 --> 01:34:33,000
你没有这个跑的应用的源代码

2742
01:34:33,000 --> 01:34:35,000
你只有一个二进制的字节码

2743
01:34:35,000 --> 01:34:35,000
或者是像 iOS

2744
01:34:35,000 --> 01:34:37,000
你甚至连字节码都没有

2745
01:34:37,000 --> 01:34:38,000
你得等他重新编译一个

2746
01:34:39,000 --> 01:34:40,000
但是像浏览器里面

2747
01:34:40,000 --> 01:34:42,000
大家都是解析 JavaScript

2748
01:34:42,000 --> 01:34:43,000
我觉得是一个

2749
01:34:44,000 --> 01:34:47,000
相对来说比较好

2750
01:34:47,000 --> 01:34:50,000
做好的一个技术

2751
01:34:50,000 --> 01:34:52,000
就是说你看现在 i 11

2752
01:34:53,000 --> 01:34:56,000
它里面的那些 JavaScript 解析引擎

2753
01:34:56,000 --> 01:34:57,000
就性能也是不错的

2754
01:34:57,000 --> 01:35:00,000
所以现在唯一解析就是做一些兼容性的考量

2755
01:35:00,000 --> 01:35:01,000
然后我觉得

2756
01:35:01,000 --> 01:35:04,000
以微软的这么庞大的

2757
01:35:04,000 --> 01:35:07,000
团队这么庞大的研发实力

2758
01:35:07,000 --> 01:35:09,000
然后只要给予他们足够的决心

2759
01:35:09,000 --> 01:35:12,000
按肖基姐的话来说

2760
01:35:12,000 --> 01:35:14,000
只要 PM 的压力足够大

2761
01:35:14,000 --> 01:35:16,000
因为他们应该还是能够做得出来的

2762
01:35:16,000 --> 01:35:17,000
应该还是还可以

2763
01:35:18,000 --> 01:35:20,000
只要把不能胜的那批 PM 开掉就可以做

2764
01:35:21,000 --> 01:35:22,000
没错

2765
01:35:23,000 --> 01:35:24,000
就这个我觉得

2766
01:35:24,000 --> 01:35:27,000
我觉得他们还是有比较乐观的态度

2767
01:35:28,000 --> 01:35:28,000
对

2768
01:35:29,000 --> 01:35:29,000
对

2769
01:35:30,000 --> 01:35:33,000
当然我能想到的一个问题就是

2770
01:35:33,000 --> 01:35:36,000
至少在某些插件

2771
01:35:36,000 --> 01:35:39,000
Chrome 和 Firefox 都有

2772
01:35:39,000 --> 01:35:41,000
但是有时候有些插件

2773
01:35:41,000 --> 01:35:43,000
在 Firefox 上能做到的事情

2774
01:35:43,000 --> 01:35:44,000
在 Chrome 上是做不到的

2775
01:35:44,000 --> 01:35:45,000
比如说有一个

2776
01:35:47,000 --> 01:35:50,000
用 Wim 的 keybinding 来操作浏览器的插件

2777
01:35:50,000 --> 01:35:51,000
我记得

2778
01:35:51,000 --> 01:35:54,000
他说他在 Firefox 上面能够做到一些事情

2779
01:35:54,000 --> 01:35:56,000
在 Chrome 上做不到的原因是

2780
01:35:56,000 --> 01:36:00,000
Chrome 的沙盒限制更强一点

2781
01:36:00,000 --> 01:36:01,000
严格

2782
01:36:01,000 --> 01:36:02,000
对

2783
01:36:02,000 --> 01:36:06,000
而且 Chrome 没有把浏览器本身的一些操作

2784
01:36:06,000 --> 01:36:08,000
暴露给 JavaScript API

2785
01:36:08,000 --> 01:36:10,000
你可以操作页面上的内容

2786
01:36:10,000 --> 01:36:12,000
你可以去访问页面上的内容

2787
01:36:12,000 --> 01:36:14,000
但是不能访问浏览器本身的一些功能

2788
01:36:14,000 --> 01:36:17,000
比如说关闭或者是切换 time 之类的

2789
01:36:17,000 --> 01:36:18,000
嗯哼

2790
01:36:19,000 --> 01:36:20,000
但他那个也不行

2791
01:36:20,000 --> 01:36:22,000
因为他那个不是他那个是多进程模型

2792
01:36:23,000 --> 01:36:26,000
然后他那个浏览器的主控进程和页面的

2793
01:36:26,000 --> 01:36:29,000
那进程是就是和那个包括连

2794
01:36:29,000 --> 01:36:31,000
扩展的进程都是完全独立的

2795
01:36:31,000 --> 01:36:34,000
这样的话应该是没有权限解决这个问题

2796
01:36:34,000 --> 01:36:36,000
但可能想想技术上应该也有

2797
01:36:36,000 --> 01:36:38,000
但是不一定马上就能做出来

2798
01:36:38,000 --> 01:36:40,000
甚至都不在路线图上

2799
01:36:40,000 --> 01:36:40,000
这个就比较惨

2800
01:36:40,000 --> 01:36:41,000
就是很有可能

2801
01:36:43,000 --> 01:36:45,000
所以不太也发现现在那个东西也没正式发布

2802
01:36:45,000 --> 01:36:47,000
也不太清楚到底是一个什么样的状况

2803
01:36:48,000 --> 01:36:50,000
大家如果有兴趣可以去装个

2804
01:36:50,000 --> 01:36:51,000
他有一个所谓的什么 Rings

2805
01:36:51,000 --> 01:36:52,000
各种各样的圈圈

2806
01:36:53,000 --> 01:36:55,000
就是什么 early adopter ring

2807
01:36:55,000 --> 01:36:56,000
这种乱七八糟的

2808
01:36:56,000 --> 01:36:57,000
如果你有兴趣

2809
01:36:57,000 --> 01:37:00,000
你可以申请加入一些什么早期的那种发布的环

2810
01:37:00,000 --> 01:37:01,000
发布的圈圈

2811
01:37:01,000 --> 01:37:05,000
那你可以拿到他们最新的 Build 出来的版本

2812
01:37:05,000 --> 01:37:06,000
然后可以装上去试一下

2813
01:37:06,000 --> 01:37:07,000
反正也是

2814
01:37:08,000 --> 01:37:09,000
争当小白鼠

2815
01:37:10,000 --> 01:37:11,000
说的是

2816
01:37:11,000 --> 01:37:14,000
这个传一台 Windows 机器这件事情应该提上日程

2817
01:37:15,000 --> 01:37:20,000
HoloLens 反正其实从概念和产品来讲

2818
01:37:20,000 --> 01:37:25,000
跟这次 Build 上面的演示和上一次差不太多

2819
01:37:25,000 --> 01:37:26,000
但这次我感觉

2820
01:37:26,000 --> 01:37:29,000
这个完成度要高一些

2821
01:37:29,000 --> 01:37:31,000
就是这个 demo 的完成度要高

2822
01:37:31,000 --> 01:37:33,000
但是事情毕竟还是没有碰到产品

2823
01:37:33,000 --> 01:37:35,000
所以还行

2824
01:37:36,000 --> 01:37:37,000
然后他们事后去又去试了一下

2825
01:37:37,000 --> 01:37:40,000
发现还是跟上一代上一次发布的时候

2826
01:37:40,000 --> 01:37:42,000
他们也是找了一堆媒体的人去试

2827
01:37:43,000 --> 01:37:44,000
这次他们等于是让开发者去试了

2828
01:37:46,000 --> 01:37:49,000
感觉看了一圈评论下来的感觉就是说

2829
01:37:51,000 --> 01:37:52,000
还是有比较多问题的

2830
01:37:52,000 --> 01:37:54,000
但是还是有进步期

2831
01:37:55,000 --> 01:37:56,000
微型化这一代是做到了

2832
01:37:56,000 --> 01:37:57,000
他们现在是不需要插任何线

2833
01:37:57,000 --> 01:37:59,000
就头上带那里头东西就可以直接用了

2834
01:37:59,000 --> 01:38:00,000
这个还是不错的

2835
01:38:01,000 --> 01:38:04,000
这比什么 Oculus Rift 那些要接个什么线

2836
01:38:04,000 --> 01:38:05,000
到台式机上还是要好很多的

2837
01:38:06,000 --> 01:38:09,000
但其他的还是要有些也有恶化的情况

2838
01:38:09,000 --> 01:38:11,000
比如说到那个可视角变窄了

2839
01:38:11,000 --> 01:38:13,000
可能也是根据要考虑什么

2840
01:38:14,000 --> 01:38:18,000
计算能力和电力供应这种的限制的情况下

2841
01:38:18,000 --> 01:38:22,000
做出了一个什么不得不选的一个 trade off

2842
01:38:22,000 --> 01:38:23,000
但是

2843
01:38:25,000 --> 01:38:27,000
这东西怎么说没有看到是很难去评价它的

2844
01:38:27,000 --> 01:38:31,000
而且我们现在外面看到的那个什么

2845
01:38:32,000 --> 01:38:34,000
它那个展示觉得挺惊艳的

2846
01:38:34,000 --> 01:38:35,000
但其实带起来怎么样回事

2847
01:38:35,000 --> 01:38:37,000
还是得带了才知道

2848
01:38:38,000 --> 01:38:41,000
可能我觉得并没有它展示的那么好

2849
01:38:41,000 --> 01:38:43,000
这是什么微软的一贯的毛病

2850
01:38:43,000 --> 01:38:47,000
就是屏隆化的看起来比吃起来好

2851
01:38:47,000 --> 01:38:49,000
这个就是一个挺大的问题

2852
01:38:49,000 --> 01:38:50,000
这怎么说呢

2853
01:38:50,000 --> 01:38:54,000
就会导致一个 over promise under deliver

2854
01:38:54,000 --> 01:38:56,000
就是承诺过多实现太少

2855
01:38:56,000 --> 01:38:59,000
这个到时候会有落差

2856
01:38:59,000 --> 01:39:01,000
用户拿到的时候会落差

2857
01:39:01,000 --> 01:39:03,000
所以我觉得很好的一个方式

2858
01:39:03,000 --> 01:39:04,000
还说把这个

2859
01:39:04,000 --> 01:39:06,000
这个你这个 demo 的

2860
01:39:08,000 --> 01:39:11,000
你还不能够达到的

2861
01:39:11,000 --> 01:39:14,000
这些东西是要收敛一点

2862
01:39:14,000 --> 01:39:17,000
就是说不要把这个饼化得太美好

2863
01:39:17,000 --> 01:39:19,000
而实际上你可能做不出那么好吃的饼

2864
01:39:19,000 --> 01:39:20,000
这个就比较

2865
01:39:20,000 --> 01:39:22,000
就是一个比较考验

2866
01:39:22,000 --> 01:39:22,000
对

2867
01:39:24,000 --> 01:39:26,000
团队的什么克制力的时候了

2868
01:39:26,000 --> 01:39:27,000
就是你知道

2869
01:39:28,000 --> 01:39:30,000
微软从来不是一个有克制的公司

2870
01:39:30,000 --> 01:39:33,000
所以他们需要引入一个新的 CEO 叫

2871
01:39:33,000 --> 01:39:37,000
Chief User Expectation Office

2872
01:39:37,000 --> 01:39:38,000
就是专门来

2873
01:39:39,000 --> 01:39:43,000
manage customer expectation

2874
01:39:44,000 --> 01:39:45,000
该保密的保密

2875
01:39:45,000 --> 01:39:47,000
该 hold 住的 hold 住

2876
01:39:47,000 --> 01:39:47,000
对

2877
01:39:48,000 --> 01:39:49,000
不管来看你怎么说

2878
01:39:49,000 --> 01:39:52,000
可能他们现在也是说这个 expectation 已经

2879
01:39:52,000 --> 01:39:54,000
就可能对我们来说

2880
01:39:54,000 --> 01:39:56,000
很多人都已经不指望他什么了

2881
01:39:56,000 --> 01:39:57,000
对吧

2882
01:39:57,000 --> 01:40:01,000
所以也说不定他说就是要达到这个效果

2883
01:40:01,000 --> 01:40:03,000
又是要让你他对他多指望一点

2884
01:40:03,000 --> 01:40:03,000
对吧

2885
01:40:03,000 --> 01:40:06,000
这个也说不准他这么想

2886
01:40:06,000 --> 01:40:09,000
但是我目前为止还是就那个

2887
01:40:09,000 --> 01:40:11,000
就之前在爱迪公众也讲过这个说法

2888
01:40:11,000 --> 01:40:12,000
就是说

2889
01:40:14,000 --> 01:40:15,000
不错的产品

2890
01:40:15,000 --> 01:40:17,000
不错的 idea

2891
01:40:18,000 --> 01:40:20,000
实现还是有点担忧的

2892
01:40:21,000 --> 01:40:23,000
问你问题

2893
01:40:23,000 --> 01:40:25,000
如果 HoloLens 和 Oculus

2894
01:40:26,000 --> 01:40:30,000
Lift 摆在你面前你会选哪一个

2895
01:40:30,000 --> 01:40:31,000
只能选一个的话

2896
01:40:33,000 --> 01:40:34,000
只能选一个

2897
01:40:34,000 --> 01:40:36,000
这个还蛮难的

2898
01:40:36,000 --> 01:40:37,000
很难吗

2899
01:40:37,000 --> 01:40:37,000
你想想

2900
01:40:38,000 --> 01:40:40,000
一个是虚拟现实

2901
01:40:40,000 --> 01:40:41,000
一个是增强现实

2902
01:40:42,000 --> 01:40:47,000
我觉得从酷和好玩这个点出发的话

2903
01:40:47,000 --> 01:40:49,000
可能还是那个 HoloLens 会比较好

2904
01:40:49,000 --> 01:40:52,000
而且其实从就现在从他们这个 HoloLens

2905
01:40:52,000 --> 01:40:56,000
这个二次发布的展示的效果

2906
01:40:56,000 --> 01:40:58,000
和这个机器的情况

2907
01:40:58,000 --> 01:40:59,000
相比于那个 OculusLift

2908
01:40:59,000 --> 01:41:02,000
他展示的那个什么三代工程机

2909
01:41:02,000 --> 01:41:03,000
的情况来讲

2910
01:41:03,000 --> 01:41:06,000
我觉得吧

2911
01:41:06,000 --> 01:41:07,000
还是 HoloLens 的好一点

2912
01:41:07,000 --> 01:41:08,000
对

2913
01:41:08,000 --> 01:41:09,000
OK

2914
01:41:09,000 --> 01:41:10,000
有意思

2915
01:41:10,000 --> 01:41:11,000
你会怎么选

2916
01:41:11,000 --> 01:41:13,000
我应该会选 OculusLift

2917
01:41:15,000 --> 01:41:16,000
我觉得为什么

2918
01:41:16,000 --> 01:41:17,000
因为可以打游戏

2919
01:41:19,000 --> 01:41:20,000
非常好

2920
01:41:20,000 --> 01:41:22,000
这个 Vr 那个什么

2921
01:41:22,000 --> 01:41:23,000
HoloLens 不也可以玩游戏吗

2922
01:41:23,000 --> 01:41:26,000
他不是展示了那个叫什么 Minecraft 吗

2923
01:41:26,000 --> 01:41:26,000
对

2924
01:41:26,000 --> 01:41:29,000
问题在于 Minecraft 的游戏

2925
01:41:29,000 --> 01:41:32,000
它不是一个

2926
01:41:33,000 --> 01:41:35,000
或者说它故意把 Minecraft

2927
01:41:36,000 --> 01:41:41,000
改变成了一个可以叠加在现实世界层面上的游戏

2928
01:41:41,000 --> 01:41:42,000
其实我就是

2929
01:41:42,000 --> 01:41:43,000
我

2930
01:41:44,000 --> 01:41:46,000
仔细的想模这个问题

2931
01:41:46,000 --> 01:41:47,000
就是

2932
01:41:48,000 --> 01:41:49,000
我在想说

2933
01:41:50,000 --> 01:41:54,000
两种技术分别适用于什么样的游戏场景

2934
01:41:55,000 --> 01:41:57,000
假如说你要打 Doom

2935
01:41:58,000 --> 01:42:02,000
或者 Quake 这样一个完全需模拟出来

2936
01:42:03,000 --> 01:42:05,000
异界环境的游戏

2937
01:42:05,000 --> 01:42:10,000
那我毫无疑问是 OculusLift 会比较好

2938
01:42:10,000 --> 01:42:11,000
因为你可以

2939
01:42:11,000 --> 01:42:14,000
它会帮你把现实隔绝起来

2940
01:42:14,000 --> 01:42:14,000
对吧

2941
01:42:14,000 --> 01:42:17,000
你所要做到的就是进入一个隔绝

2942
01:42:18,000 --> 01:42:21,000
现实的环境里面去杀一些根本不存在的怪物

2943
01:42:22,000 --> 01:42:23,000
OK

2944
01:42:23,000 --> 01:42:24,000
或者是

2945
01:42:24,000 --> 01:42:26,000
比如说你要做一个打猎游戏

2946
01:42:26,000 --> 01:42:30,000
你显然会希望自己能够认为自己身处在一个丛林里面

2947
01:42:30,000 --> 01:42:31,000
而不是你自己家里

2948
01:42:31,000 --> 01:42:32,000
对吧

2949
01:42:33,000 --> 01:42:34,000
但是

2950
01:42:34,000 --> 01:42:36,000
反过来

2951
01:42:36,000 --> 01:42:39,000
像 HoloLens 这样的 AR 技术

2952
01:42:39,000 --> 01:42:41,000
那就比较适合于

2953
01:42:42,000 --> 01:42:43,000
做一些

2954
01:42:44,000 --> 01:42:45,000
比如捉友

2955
01:42:46,000 --> 01:42:46,000
我曾经是想过

2956
01:42:46,000 --> 01:42:49,000
比如说我和女朋友一人带一个

2957
01:42:49,000 --> 01:42:50,000
然后在

2958
01:42:51,000 --> 01:42:51,000
盯着

2959
01:42:51,000 --> 01:42:53,000
卢氏传说嘛简单来说

2960
01:42:53,000 --> 01:42:53,000
就不用

2961
01:42:54,000 --> 01:42:54,000
对

2962
01:42:54,000 --> 01:42:56,000
盯着面前的桌子就可以打大风了

2963
01:42:56,000 --> 01:42:56,000
对吧

2964
01:42:56,000 --> 01:42:57,000
就可以看到什么

2965
01:42:57,000 --> 01:42:59,000
孙小美跑的跑去

2966
01:42:59,000 --> 01:43:01,000
然后但其上桌子什么也没有

2967
01:43:01,000 --> 01:43:01,000
这不是很

2968
01:43:01,000 --> 01:43:02,000
这不是很

2969
01:43:02,000 --> 01:43:03,000
但是有点奇怪

2970
01:43:03,000 --> 01:43:04,000
但难道不是很好吗

2971
01:43:05,000 --> 01:43:06,000
是不是比较适合这样的东西

2972
01:43:08,000 --> 01:43:11,000
我就是想卢氏传说就可以直接把那个拍

2973
01:43:11,000 --> 01:43:11,000
没错

2974
01:43:11,000 --> 01:43:14,000
卢氏传说就直接显示在你面前

2975
01:43:14,000 --> 01:43:19,000
或者最合适的其实是战唇

2976
01:43:20,000 --> 01:43:21,000
就是 Wahamut 这个系列

2977
01:43:21,000 --> 01:43:22,000
你不是可以

2978
01:43:23,000 --> 01:43:26,000
给自己的模型

2979
01:43:26,000 --> 01:43:27,000
给自己沾模型

2980
01:43:27,000 --> 01:43:29,000
然后给自己模型涂色

2981
01:43:29,000 --> 01:43:32,000
然后用什么两角器皮尺

2982
01:43:33,000 --> 01:43:37,000
来量两个模型之间的距离

2983
01:43:37,000 --> 01:43:38,000
然后制骰子

2984
01:43:38,000 --> 01:43:40,000
然后把你的战车推进

2985
01:43:40,000 --> 01:43:42,000
然后说我的战车把你的兽人轰掉了

2986
01:43:42,000 --> 01:43:45,000
然后你把你的兽人从桌子上拿出去

2987
01:43:45,000 --> 01:43:46,000
所有这些桌游

2988
01:43:46,000 --> 01:43:48,000
其实全都可以用 Hololens 来实现

2989
01:43:48,000 --> 01:43:50,000
效果应该会非常好玩

2990
01:43:50,000 --> 01:43:51,000
我觉得

2991
01:43:52,000 --> 01:43:55,000
但如果要我选的话

2992
01:43:55,000 --> 01:43:56,000
我觉得我还是会选

2993
01:43:56,000 --> 01:44:01,000
会希望玩那种比较强调进入式体验的

2994
01:44:01,000 --> 01:44:02,000
对

2995
01:44:03,000 --> 01:44:08,000
就让你忘掉从真实世界的种种限制

2996
01:44:08,000 --> 01:44:09,000
直接进入这种虚拟世界的

2997
01:44:09,000 --> 01:44:12,000
完全不同的一个环境

2998
01:44:12,000 --> 01:44:13,000
就是去逃离

2999
01:44:13,000 --> 01:44:14,000
对

3000
01:44:14,000 --> 01:44:17,000
我觉得我可能还是会选择 Oculus Rift

3001
01:44:18,000 --> 01:44:19,000
这挺有意思

3002
01:44:20,000 --> 01:44:22,000
当然理想情况还是全主机制

3003
01:44:24,000 --> 01:44:27,000
反正我觉得 Hololens 还是一个比较 Promising

3004
01:44:27,000 --> 01:44:30,000
但是对我来说

3005
01:44:30,000 --> 01:44:31,000
不像 Oculus Rift 那样

3006
01:44:31,000 --> 01:44:35,000
会想要在第一出的上市的第一时间就去买的一个东西

3007
01:44:35,000 --> 01:44:38,000
Oculus Rift 应该是明年年初就要上市的

3008
01:44:39,000 --> 01:44:42,000
Hololens 还不知道什么好消息

3009
01:44:42,000 --> 01:44:45,000
你这个是有确定的时间购买了

3010
01:44:45,000 --> 01:44:49,000
那个什么 Hololens 还不知道猴年马月什么时候能上

3011
01:44:49,000 --> 01:44:53,000
至少明年 Q 1 应该就可以带上 Oculus Rift

3012
01:44:54,000 --> 01:44:57,000
你预设 3 月 31 号

3013
01:44:57,000 --> 01:45:00,000
至少有 Oculus Rift 可以买了

3014
01:45:00,000 --> 01:45:01,000
至少

3015
01:45:01,000 --> 01:45:01,000
对

3016
01:45:01,000 --> 01:45:04,000
然后我觉得现在最大的一个问题就是

3017
01:45:06,000 --> 01:45:09,000
PlayStation 或者 Xbox One 之类的东西

3018
01:45:09,000 --> 01:45:12,000
应该尽快提供这个 Hololens 的支持

3019
01:45:12,000 --> 01:45:12,000
不

3020
01:45:13,000 --> 01:45:13,000
Hololens

3021
01:45:14,000 --> 01:45:15,000
Oculus Rift 的支持

3022
01:45:15,000 --> 01:45:16,000
不然

3023
01:45:16,000 --> 01:45:19,000
我觉得太多游戏值得被

3024
01:45:20,000 --> 01:45:21,000
移植到虚拟现实里面

3025
01:45:23,000 --> 01:45:24,000
这里就有问题

3026
01:45:24,000 --> 01:45:26,000
因为它那个 Hololens

3027
01:45:26,000 --> 01:45:28,000
毕竟它只是一个做设备厂

3028
01:45:28,000 --> 01:45:31,000
它并没有任何游戏的渠道也好

3029
01:45:31,000 --> 01:45:32,000
它只能去找别人合作

3030
01:45:32,000 --> 01:45:33,000
其实这点上

3031
01:45:33,000 --> 01:45:33,000
我觉得微软

3032
01:45:33,000 --> 01:45:34,000
那个

3033
01:45:35,000 --> 01:45:36,000
你刚才说是 Hololens 吗

3034
01:45:36,000 --> 01:45:38,000
还是 Oculus Rift

3035
01:45:39,000 --> 01:45:41,000
我觉得这点上微软可能反而有优势

3036
01:45:41,000 --> 01:45:42,000
因为第一个

3037
01:45:43,000 --> 01:45:44,000
它等于是除了

3038
01:45:45,000 --> 01:45:48,000
甚至已经是全球最大的游戏的发行商

3039
01:45:48,000 --> 01:45:49,000
它应该比索尼大

3040
01:45:49,000 --> 01:45:50,000
因为有 Xbox 之后

3041
01:45:50,000 --> 01:45:53,000
微软的游戏比索尼大吗

3042
01:45:54,000 --> 01:45:56,000
我理解是这样子

3043
01:45:56,000 --> 01:45:56,000
不是吗

3044
01:45:56,000 --> 01:45:58,000
应该不是吧

3045
01:45:59,000 --> 01:45:59,000
如果不是它

3046
01:45:59,000 --> 01:46:02,000
它们也是属于可能一二的这样的区别

3047
01:46:02,000 --> 01:46:02,000
对那肯定

3048
01:46:02,000 --> 01:46:04,000
我想插播一个小新闻

3049
01:46:05,000 --> 01:46:09,000
微软前一阵子推出了

3050
01:46:10,000 --> 01:46:11,000
帝国时代 2

3051
01:46:11,000 --> 01:46:12,000
你有没有听错

3052
01:46:12,000 --> 01:46:14,000
帝国时代 2 的 HD 版本

3053
01:46:15,000 --> 01:46:18,000
2015 年推出了帝国时代 2 的 HD 版本

3054
01:46:18,000 --> 01:46:19,000
简直是良心企业

3055
01:46:19,000 --> 01:46:21,000
这玩意已经多少年了

3056
01:46:21,000 --> 01:46:22,000
这什么情况

3057
01:46:22,000 --> 01:46:22,000
为什么

3058
01:46:23,000 --> 01:46:26,000
提供了一个可以支持高负面率

3059
01:46:27,000 --> 01:46:28,000
支持多显示器

3060
01:46:29,000 --> 01:46:34,000
支持 Steam 平台联网对战的

3061
01:46:35,000 --> 01:46:36,000
帝国时代 2

3062
01:46:37,000 --> 01:46:38,000
你要不要买一份咱俩对战

3063
01:46:40,000 --> 01:46:41,000
可以啊

3064
01:46:41,000 --> 01:46:43,000
我回头去研究一下怎么一回事

3065
01:46:43,000 --> 01:46:44,000
因为帝国时代应该是

3066
01:46:44,000 --> 01:46:45,000
帝国时代 2 就是我们当时

3067
01:46:45,000 --> 01:46:48,000
那个九几年玩的最火的那款

3068
01:46:48,000 --> 01:46:50,000
这个东西已经十几年了吧

3069
01:46:51,000 --> 01:46:53,000
居然今年又出了一个新版本

3070
01:46:53,000 --> 01:46:56,000
我觉得 Microsoft 也算是良心企业

3071
01:46:57,000 --> 01:46:59,000
对必须是良心企业

3072
01:46:59,000 --> 01:47:00,000
刚才说的刚才那个

3073
01:47:00,000 --> 01:47:03,000
我感觉微软在这方面算是

3074
01:47:03,000 --> 01:47:04,000
其实有优势的

3075
01:47:04,000 --> 01:47:05,000
它可以说

3076
01:47:05,000 --> 01:47:06,000
因为它有主机

3077
01:47:06,000 --> 01:47:09,000
然后它也有相应的发行渠道

3078
01:47:09,000 --> 01:47:12,000
然后它会有开发团队

3079
01:47:12,000 --> 01:47:13,000
开发这种

3080
01:47:13,000 --> 01:47:16,000
就是做游戏的人的资源

3081
01:47:16,000 --> 01:47:17,000
它会去笼络

3082
01:47:17,000 --> 01:47:19,000
它可以说我们当然开发一款

3083
01:47:19,000 --> 01:47:22,000
给 HoloLens 玩的

3084
01:47:22,000 --> 01:47:25,000
然后是跑在 Xbox 上面的这种游戏

3085
01:47:25,000 --> 01:47:27,000
因为它其实就是要打通这个平台之后

3086
01:47:27,000 --> 01:47:28,000
它不是现在是讲那个

3087
01:47:28,000 --> 01:47:31,000
Windows 10 是一个什么 Universal App

3088
01:47:31,000 --> 01:47:32,000
Universal App 什么意思

3089
01:47:32,000 --> 01:47:33,000
就是可以跨

3090
01:47:33,000 --> 01:47:36,000
它能够覆盖到所有的平台

3091
01:47:36,000 --> 01:47:37,000
不是说它还要追求一个

3092
01:47:37,000 --> 01:47:38,000
就是说

3093
01:47:40,000 --> 01:47:41,000
简单说就可以互玩

3094
01:47:41,000 --> 01:47:43,000
就是我可以去用那个 HoloLens

3095
01:47:43,000 --> 01:47:44,000
去接到这个

3096
01:47:45,000 --> 01:47:47,000
什么可能跟那个 Xbox 配合

3097
01:47:47,000 --> 01:47:48,000
去玩这么一下游戏

3098
01:47:48,000 --> 01:47:49,000
我觉得这个的

3099
01:47:49,000 --> 01:47:50,000
如果它真的做成了

3100
01:47:50,000 --> 01:47:52,000
我觉得它这个潜力是要比

3101
01:47:52,000 --> 01:47:54,000
像 Octus Rift 这样去和

3102
01:47:55,000 --> 01:47:56,000
其他厂商去谈

3103
01:47:57,000 --> 01:47:58,000
合作这种方式

3104
01:47:58,000 --> 01:47:59,000
我觉得是要好得多的

3105
01:47:59,000 --> 01:47:59,000
对

3106
01:47:59,000 --> 01:48:01,000
如果 HoloLens 可以

3107
01:48:01,000 --> 01:48:03,000
和 Xbox 整合在一起的话

3108
01:48:03,000 --> 01:48:05,000
真的是前途无聊的

3109
01:48:05,000 --> 01:48:07,000
其他基本上所有主题都可以去死

3110
01:48:09,000 --> 01:48:09,000
对

3111
01:48:09,000 --> 01:48:11,000
就可能会达到那么像当年那个

3112
01:48:11,000 --> 01:48:13,000
什么 Wei 就一代的 Wei

3113
01:48:13,000 --> 01:48:14,000
那种风靡的程度

3114
01:48:14,000 --> 01:48:14,000
对

3115
01:48:16,000 --> 01:48:17,000
甚至可能会超过

3116
01:48:17,000 --> 01:48:17,000
对

3117
01:48:17,000 --> 01:48:18,000
来看看价格

3118
01:48:19,000 --> 01:48:20,000
价格贵了可能也不太行

3119
01:48:20,000 --> 01:48:21,000
但是

3120
01:48:21,000 --> 01:48:22,000
嗯

3121
01:48:22,000 --> 01:48:25,000
然后我们还要想提及的一件趣事

3122
01:48:25,000 --> 01:48:27,000
就是在这次 Build 上面

3123
01:48:27,000 --> 01:48:28,000
微软员工

3124
01:48:28,000 --> 01:48:30,000
穿了

3125
01:48:30,000 --> 01:48:32,000
那个一件蓝色的 T-shirt

3126
01:48:32,000 --> 01:48:34,000
然后蓝色 T-shirt 胸前有

3127
01:48:35,000 --> 01:48:36,000
就是 Windows 图标

3128
01:48:36,000 --> 01:48:38,000
然后这个图标

3129
01:48:38,000 --> 01:48:39,000
你细看的话

3130
01:48:39,000 --> 01:48:42,000
它是有很多细小的零和一组成的

3131
01:48:42,000 --> 01:48:43,000
然后

3132
01:48:44,000 --> 01:48:45,000
我不知道是谁找出来的

3133
01:48:45,000 --> 01:48:49,000
但是我们就目前理解为有好事者

3134
01:48:49,000 --> 01:48:52,000
是否把这个零和一

3135
01:48:52,000 --> 01:48:53,000
转换成 Ascima

3136
01:48:53,000 --> 01:48:56,000
然后看看这些是不是有意思

3137
01:48:56,000 --> 01:48:57,000
然后发现

3138
01:48:57,000 --> 01:48:59,000
真的是有意思的

3139
01:48:59,000 --> 01:49:02,000
就是推特用户叫做 Kevin Gose

3140
01:49:02,000 --> 01:49:06,000
他把这些零和一都翻译出来了

3141
01:49:07,000 --> 01:49:09,000
然后左上角那一块是

3142
01:49:09,000 --> 01:49:10,000
呃

3143
01:49:10,000 --> 01:49:12,000
There are 10 types of people in the world

3144
01:49:12,000 --> 01:49:17,000
应该说 There are 1 0 types of people in the world

3145
01:49:17,000 --> 01:49:18,000
然后

3146
01:49:19,000 --> 01:49:20,000
呃

3147
01:49:20,000 --> 01:49:22,000
右上角那一块是

3148
01:49:22,000 --> 01:49:23,000
Windows 10

3149
01:49:23,000 --> 01:49:26,000
Because 7 8 9

3150
01:49:26,000 --> 01:49:27,000
就是

3151
01:49:27,000 --> 01:49:29,000
因为 7 8 9 吃了

3152
01:49:29,000 --> 01:49:31,000
然后 8 和 8 协音

3153
01:49:31,000 --> 01:49:32,000
所以它写着

3154
01:49:32,000 --> 01:49:34,000
Because 7 8 9

3155
01:49:38,000 --> 01:49:40,000
然后左下角是

3156
01:49:40,000 --> 01:49:42,000
Congrats on being one of the first

3157
01:49:43,000 --> 01:49:45,000
就是欢迎你成为第一个

3158
01:49:45,000 --> 01:49:47,000
Whatever 做什么的人

3159
01:49:47,000 --> 01:49:49,000
解开这个谜的是不是

3160
01:49:49,000 --> 01:49:50,000
然后右下角是

3161
01:49:50,000 --> 01:49:55,000
Windows Insiders help us develop the future

3162
01:49:55,000 --> 01:49:56,000
对

3163
01:49:57,000 --> 01:49:58,000
我觉得还挺有意思

3164
01:49:59,000 --> 01:49:59,000
有意思

3165
01:49:59,000 --> 01:50:00,000
嗯

3166
01:50:00,000 --> 01:50:02,000
有小插曲

3167
01:50:02,000 --> 01:50:03,000
小趣闻

3168
01:50:03,000 --> 01:50:03,000
对

3169
01:50:04,000 --> 01:50:06,000
然后我觉得怎么说呢

3170
01:50:06,000 --> 01:50:06,000
呃

3171
01:50:07,000 --> 01:50:09,000
我以前是不看 Bill 的

3172
01:50:09,000 --> 01:50:10,000
你看吧

3173
01:50:10,000 --> 01:50:12,000
就我其实是今年第一次

3174
01:50:12,000 --> 01:50:13,000
我也是今年才看

3175
01:50:13,000 --> 01:50:14,000
Bill 是一个

3176
01:50:14,000 --> 01:50:16,000
已经连续播了 5 年的这么一个

3177
01:50:17,000 --> 01:50:18,000
一个一个一个

3178
01:50:18,000 --> 01:50:18,000
对

3179
01:50:18,000 --> 01:50:19,000
我也是才意思到

3180
01:50:19,000 --> 01:50:19,000
哎

3181
01:50:20,000 --> 01:50:20,000
原来还有这个

3182
01:50:20,000 --> 01:50:22,000
还搞一个类似 WWDC

3183
01:50:22,000 --> 01:50:23,000
WWDC 的东西

3184
01:50:23,000 --> 01:50:23,000
嗯

3185
01:50:23,000 --> 01:50:24,000
新鲜

3186
01:50:24,000 --> 01:50:25,000
看一下

3187
01:50:25,000 --> 01:50:25,000
对

3188
01:50:25,000 --> 01:50:27,000
然后我去过

3189
01:50:28,000 --> 01:50:28,000
呃

3190
01:50:28,000 --> 01:50:30,000
WWDC 是买不到票的

3191
01:50:30,000 --> 01:50:31,000
但是我去过的

3192
01:50:31,000 --> 01:50:32,000
Developer Conference

3193
01:50:32,000 --> 01:50:33,000
是 Google 的那个

3194
01:50:34,000 --> 01:50:35,000
Google developer day

3195
01:50:35,000 --> 01:50:36,000
Google IO 吗

3196
01:50:36,000 --> 01:50:36,000
不是

3197
01:50:36,000 --> 01:50:37,000
Developer day

3198
01:50:37,000 --> 01:50:37,000
哦不是

3199
01:50:37,000 --> 01:50:38,000
Developer day 现在也不办了

3200
01:50:39,000 --> 01:50:40,000
就之前在

3201
01:50:40,000 --> 01:50:41,000
之前 01 年

3202
01:50:42,000 --> 01:50:44,000
10 年 11 年和 12 年

3203
01:50:44,000 --> 01:50:45,000
我应该都去了

3204
01:50:45,000 --> 01:50:46,000
然后

3205
01:50:46,000 --> 01:50:46,000
嗯

3206
01:50:46,000 --> 01:50:47,000
呃

3207
01:50:48,000 --> 01:50:49,000
我觉得

3208
01:50:49,000 --> 01:50:50,000
这种开发者盛会

3209
01:50:50,000 --> 01:50:52,000
somehow 已经成为了一种

3210
01:50:53,000 --> 01:50:54,000
phenomena

3211
01:50:54,000 --> 01:50:56,000
全球开发者

3212
01:50:56,000 --> 01:50:58,000
乃至于并非开发者的人

3213
01:50:58,000 --> 01:51:00,000
会去关注这样一种

3214
01:51:00,000 --> 01:51:00,000
啊

3215
01:51:01,000 --> 01:51:02,000
本来是一群人

3216
01:51:02,000 --> 01:51:02,000
对

3217
01:51:02,000 --> 01:51:03,000
对

3218
01:51:03,000 --> 01:51:04,000
讨论工具的

3219
01:51:04,000 --> 01:51:05,000
这样一个

3220
01:51:05,000 --> 01:51:05,000
人

3221
01:51:05,000 --> 01:51:06,000
event

3222
01:51:06,000 --> 01:51:07,000
还挺有意思的

3223
01:51:07,000 --> 01:51:08,000
特别是那个 keynote

3224
01:51:08,000 --> 01:51:10,000
其实他很多时候就

3225
01:51:10,000 --> 01:51:11,000
并不

3226
01:51:11,000 --> 01:51:12,000
单单是面对

3227
01:51:13,000 --> 01:51:14,000
开发者

3228
01:51:14,000 --> 01:51:14,000
对

3229
01:51:14,000 --> 01:51:14,000
对

3230
01:51:14,000 --> 01:51:14,000
对

3231
01:51:14,000 --> 01:51:15,000
但可能更多的

3232
01:51:16,000 --> 01:51:16,000
那个受众

3233
01:51:16,000 --> 01:51:17,000
就 keynote 的那个的

3234
01:51:17,000 --> 01:51:18,000
就主题演讲的受众

3235
01:51:18,000 --> 01:51:19,000
可能是

3236
01:51:19,000 --> 01:51:20,000
面向一个所谓的普罗大众

3237
01:51:20,000 --> 01:51:21,000
就是 general public

3238
01:51:21,000 --> 01:51:22,000
或者说对

3239
01:51:22,000 --> 01:51:24,000
技术比较关注的

3240
01:51:25,000 --> 01:51:26,000
这么一些一些一些人

3241
01:51:26,000 --> 01:51:27,000
并不是说这些人

3242
01:51:27,000 --> 01:51:28,000
一定要是开发者

3243
01:51:29,000 --> 01:51:29,000
没错

3244
01:51:30,000 --> 01:51:31,000
然后我觉得

3245
01:51:31,000 --> 01:51:33,000
这 somehow 也是代表了

3246
01:51:33,000 --> 01:51:35,000
目前这样一个

3247
01:51:36,000 --> 01:51:37,000
工业时代

3248
01:51:38,000 --> 01:51:40,000
就我就忘了是哪一个

3249
01:51:40,000 --> 01:51:43,000
社会学家说过一段话说

3250
01:51:43,000 --> 01:51:45,000
我之后一定要查出来

3251
01:51:45,000 --> 01:51:46,000
到底谁说

3252
01:51:46,000 --> 01:51:47,000
可能不是社会学家

3253
01:51:47,000 --> 01:51:49,000
就是反正有人说过说

3254
01:51:49,000 --> 01:51:51,000
工业时代以来

3255
01:51:51,000 --> 01:51:54,000
整个工业对人们的影响

3256
01:51:54,000 --> 01:51:56,000
导致了人们对于工业的崇拜

3257
01:51:57,000 --> 01:51:58,000
而这样一种崇拜

3258
01:51:58,000 --> 01:51:59,000
这样一种迷恋

3259
01:51:59,000 --> 01:51:59,000
这样一种

3260
01:52:00,000 --> 01:52:02,000
投身其中的热情

3261
01:52:02,000 --> 01:52:04,000
其实远远超越了

3262
01:52:04,000 --> 01:52:05,000
宗教

3263
01:52:05,000 --> 01:52:07,000
乃至于艺术文学

3264
01:52:07,000 --> 01:52:09,000
所给人们带来的影响

3265
01:52:10,000 --> 01:52:10,000
然后

3266
01:52:11,000 --> 01:52:11,000
这算什么

3267
01:52:11,000 --> 01:52:12,000
拜物教

3268
01:52:13,000 --> 01:52:14,000
它不是拜物教

3269
01:52:14,000 --> 01:52:15,000
就拜工业教

3270
01:52:15,000 --> 01:52:16,000
星辰大海

3271
01:52:16,000 --> 01:52:18,000
工业党星辰大海

3272
01:52:19,000 --> 01:52:20,000
你会觉得

3273
01:52:21,000 --> 01:52:24,000
我们现在处于一种这样的

3274
01:52:24,000 --> 01:52:25,000
对于工具的热忱里面

3275
01:52:25,000 --> 01:52:27,000
我们会专门去

3276
01:52:27,000 --> 01:52:30,000
办这样的 podcast 来讨论工具

3277
01:52:30,000 --> 01:52:31,000
因为我觉得内阔恐慌

3278
01:52:31,000 --> 01:52:33,000
其实讨论的本身就是

3279
01:52:35,000 --> 01:52:36,000
工业产品的一种

3280
01:52:36,000 --> 01:52:37,000
特别形式

3281
01:52:37,000 --> 01:52:38,000
软件的

3282
01:52:38,000 --> 01:52:40,000
内部的一些形式

3283
01:52:40,000 --> 01:52:41,000
我觉得其实也是这样一种

3284
01:52:42,000 --> 01:52:43,000
工业崇拜

3285
01:52:43,000 --> 01:52:46,000
工业崇拜乃至于工具崇拜的一种体现

3286
01:52:46,000 --> 01:52:47,000
挺有意思

3287
01:52:48,000 --> 01:52:48,000
然后

3288
01:52:50,000 --> 01:52:51,000
我之前还觉得

3289
01:52:51,000 --> 01:52:53,000
有一个很有意思的事情就是

3290
01:52:53,000 --> 01:52:55,000
有没有发现我们很多

3291
01:52:57,000 --> 01:52:58,000
工具的图标

3292
01:52:58,000 --> 01:53:00,000
其实都是在试图

3293
01:53:02,000 --> 01:53:04,000
去模拟那些

3294
01:53:05,000 --> 01:53:06,000
现实生活中

3295
01:53:06,000 --> 01:53:07,000
非常古老的工具

3296
01:53:08,000 --> 01:53:08,000
比如说

3297
01:53:09,000 --> 01:53:12,000
应该是那个 S code 图标

3298
01:53:12,000 --> 01:53:14,000
是一个原规是吧

3299
01:53:14,000 --> 01:53:14,000
对

3300
01:53:14,000 --> 01:53:16,000
是一个原规

3301
01:53:16,000 --> 01:53:17,000
但这个原规是

3302
01:53:19,000 --> 01:53:20,000
由一把尺子

3303
01:53:20,000 --> 01:53:23,000
一支笔和一个什么东西组成的

3304
01:53:23,000 --> 01:53:25,000
但实际上这些东西在开发

3305
01:53:25,000 --> 01:53:27,000
App 的时候是根本用不到的

3306
01:53:27,000 --> 01:53:27,000
对吧

3307
01:53:28,000 --> 01:53:28,000
然后

3308
01:53:29,000 --> 01:53:31,000
debug 的图标是一个锤子

3309
01:53:31,000 --> 01:53:32,000
还是一个扳手之类的

3310
01:53:33,000 --> 01:53:34,000
这些东西其实都是在暗示说

3311
01:53:34,000 --> 01:53:36,000
我这个是个工具

3312
01:53:36,000 --> 01:53:38,000
然后我这个工具可以完成

3313
01:53:38,000 --> 01:53:40,000
那些实体世界里面工具

3314
01:53:40,000 --> 01:53:41,000
所能完成的事情

3315
01:53:42,000 --> 01:53:43,000
但实际上这些工具

3316
01:53:43,000 --> 01:53:45,000
跟实体工具是完全不搭嘎的

3317
01:53:45,000 --> 01:53:46,000
一个

3318
01:53:46,000 --> 01:53:47,000
一批一批存在

3319
01:53:48,000 --> 01:53:50,000
但是我们却不得不借用这些

3320
01:53:50,000 --> 01:53:52,000
我们能够理解的暗语

3321
01:53:53,000 --> 01:53:55,000
来画这么一个图标

3322
01:53:55,000 --> 01:53:56,000
来表达出这样一个意思

3323
01:53:59,000 --> 01:54:00,000
这还挺有意思的

3324
01:54:01,000 --> 01:54:04,000
这其实这是某一种形式的

3325
01:54:04,000 --> 01:54:05,000
隐喻吗

3326
01:54:05,000 --> 01:54:05,000
等于是

3327
01:54:05,000 --> 01:54:06,000
对

3328
01:54:06,000 --> 01:54:07,000
我们在讨论

3329
01:54:07,000 --> 01:54:09,000
是要去你物化的同时

3330
01:54:09,000 --> 01:54:10,000
却

3331
01:54:11,000 --> 01:54:12,000
却没有办法

3332
01:54:12,000 --> 01:54:14,000
不得不借助这些非常你物的东西

3333
01:54:14,000 --> 01:54:15,000
来表达我们的意思

3334
01:54:17,000 --> 01:54:18,000
然后

3335
01:54:18,000 --> 01:54:19,000
我也不知道

3336
01:54:19,000 --> 01:54:20,000
也许将来

3337
01:54:20,000 --> 01:54:21,000
虚拟的

3338
01:54:21,000 --> 01:54:22,000
我们习惯的虚拟现实之后

3339
01:54:22,000 --> 01:54:23,000
会

3340
01:54:23,000 --> 01:54:24,000
会非常好奇说

3341
01:54:24,000 --> 01:54:26,000
这个东西到底是什么

3342
01:54:26,000 --> 01:54:26,000
这样一个

3343
01:54:26,000 --> 01:54:27,000
这样一个锤子

3344
01:54:27,000 --> 01:54:29,000
你有多久没有试过

3345
01:54:29,000 --> 01:54:31,000
锤子拿在手里是什么感觉

3346
01:54:31,000 --> 01:54:32,000
就甚至说

3347
01:54:32,000 --> 01:54:34,000
可能很多做这个 UI 设计人

3348
01:54:34,000 --> 01:54:36,000
根本就没有摸过那些什么

3349
01:54:36,000 --> 01:54:37,000
什么齿龟

3350
01:54:37,000 --> 01:54:39,000
那些什么李克森干的事情

3351
01:54:39,000 --> 01:54:41,000
所以或者是那个保存图标

3352
01:54:41,000 --> 01:54:42,000
那个软盘

3353
01:54:43,000 --> 01:54:44,000
现在对啊

3354
01:54:44,000 --> 01:54:45,000
现在新生一代就是完全没有

3355
01:54:45,000 --> 01:54:47,000
完全没有东西了

3356
01:54:47,000 --> 01:54:47,000
说

3357
01:54:47,000 --> 01:54:48,000
他说那个笑话怎么说

3358
01:54:48,000 --> 01:54:50,000
他说是一个小朋友

3359
01:54:50,000 --> 01:54:52,000
看见爸爸拿的

3360
01:54:52,000 --> 01:54:53,000
几次那一个什么

3361
01:54:53,000 --> 01:54:54,000
古董软盘说

3362
01:54:54,000 --> 01:54:56,000
你竟然有一个保存图标的物理版本

3363
01:54:56,000 --> 01:54:57,000
说高级

3364
01:54:57,000 --> 01:54:58,000
非常神奇

3365
01:55:00,000 --> 01:55:01,000
对

3366
01:55:01,000 --> 01:55:04,000
但我觉得这里肯定还是有一个点

3367
01:55:04,000 --> 01:55:05,000
但可能

3368
01:55:05,000 --> 01:55:05,000
在

3369
01:55:06,000 --> 01:55:07,000
过往很多

3370
01:55:07,000 --> 01:55:09,000
很多很久时间以前讨论过的

3371
01:55:09,000 --> 01:55:11,000
就是说这个所谓的 Skinmorphism

3372
01:55:11,000 --> 01:55:13,000
就是咱们拟物化的问题

3373
01:55:13,000 --> 01:55:14,000
我觉得就

3374
01:55:14,000 --> 01:55:15,000
你越往后面走

3375
01:55:15,000 --> 01:55:17,000
这种抽象层级越高之后可能

3376
01:55:18,000 --> 01:55:20,000
很多人是比较难以

3377
01:55:20,000 --> 01:55:23,000
去获得那么所谓的一个 reference

3378
01:55:23,000 --> 01:55:25,000
就是你得有一个什么参照物对吧

3379
01:55:25,000 --> 01:55:25,000
对

3380
01:55:25,000 --> 01:55:26,000
特别是

3381
01:55:26,000 --> 01:55:28,000
你这个工具的

3382
01:55:28,000 --> 01:55:31,000
这个作用越不直接的情况下

3383
01:55:31,000 --> 01:55:33,000
你可能反而是越需要这种

3384
01:55:33,000 --> 01:55:34,000
有一些什么你刚才讲的

3385
01:55:34,000 --> 01:55:37,000
所谓的一个隐喻的参考去指点你

3386
01:55:37,000 --> 01:55:39,000
它并不是说一定说能够让你说

3387
01:55:39,000 --> 01:55:41,000
能够推测出它是一个什么样的作用

3388
01:55:41,000 --> 01:55:42,000
比如说我很怀疑

3389
01:55:42,000 --> 01:55:44,000
说你如果你不知道

3390
01:55:44,000 --> 01:55:46,000
Xcode 是干什么的工具的一个人

3391
01:55:46,000 --> 01:55:48,000
你能看见他们的尺规

3392
01:55:48,000 --> 01:55:49,000
能想出来他是干嘛的

3393
01:55:49,000 --> 01:55:50,000
但是我觉得

3394
01:55:50,000 --> 01:55:51,000
可能是说

3395
01:55:51,000 --> 01:55:52,000
你知道他是干嘛之后

3396
01:55:52,000 --> 01:55:54,000
你再联想到那么一个图标

3397
01:55:54,000 --> 01:55:56,000
或联想到这么一个隐喻

3398
01:55:56,000 --> 01:55:58,000
就如果用 Skinmorphism 的方法

3399
01:55:58,000 --> 01:55:59,000
就是说

3400
01:55:59,000 --> 01:56:01,000
联想到它代表的一个物理实体

3401
01:56:01,000 --> 01:56:02,000
什么东西之后就想到

3402
01:56:02,000 --> 01:56:05,000
是你加深这么一个记忆

3403
01:56:05,000 --> 01:56:06,000
加深你们的理解的一个过程

3404
01:56:06,000 --> 01:56:08,000
而不是说真的是说帮助你

3405
01:56:08,000 --> 01:56:08,000
从一开始

3406
01:56:08,000 --> 01:56:10,000
从零到有

3407
01:56:10,000 --> 01:56:12,000
从那个什么

3408
01:56:12,000 --> 01:56:13,000
从一个零基础这种东西去推测

3409
01:56:13,000 --> 01:56:15,000
说他是他猜说他是干嘛

3410
01:56:15,000 --> 01:56:15,000
对

3411
01:56:15,000 --> 01:56:17,000
就好像只是说是一个

3412
01:56:17,000 --> 01:56:18,000
是一个 Hint

3413
01:56:18,000 --> 01:56:20,000
是一个帮助你记忆的东西

3414
01:56:20,000 --> 01:56:21,000
而不是帮助你理解的东西

3415
01:56:21,000 --> 01:56:21,000
对

3416
01:56:21,000 --> 01:56:23,000
从好像小时候第一次看到

3417
01:56:23,000 --> 01:56:25,000
那个 Windows 里面的

3418
01:56:26,000 --> 01:56:29,000
DL 的图标是一张纸

3419
01:56:29,000 --> 01:56:30,000
然后上面有个齿轮

3420
01:56:31,000 --> 01:56:31,000
当时

3421
01:56:32,000 --> 01:56:33,000
琢磨了半天说

3422
01:56:33,000 --> 01:56:34,000
这到底是什么东西的

3423
01:56:34,000 --> 01:56:35,000
能不能删呢

3424
01:56:35,000 --> 01:56:37,000
为什么所有的文件看起来都一样

3425
01:56:37,000 --> 01:56:38,000
因为

3426
01:56:38,000 --> 01:56:39,000
那个时候主要的兴趣是打游戏

3427
01:56:39,000 --> 01:56:41,000
每个游戏的图标都不一样

3428
01:56:41,000 --> 01:56:42,000
可是这些一模一样的图标

3429
01:56:42,000 --> 01:56:43,000
我是不是都应该

3430
01:56:43,000 --> 01:56:44,000
应该都没什么用

3431
01:56:44,000 --> 01:56:45,000
可以删掉吗

3432
01:56:45,000 --> 01:56:46,000
然后

3433
01:56:46,000 --> 01:56:48,000
到底是干嘛的呢

3434
01:56:48,000 --> 01:56:48,000
对

3435
01:56:49,000 --> 01:56:49,000
对

3436
01:56:49,000 --> 01:56:50,000
但是其实那个时候

3437
01:56:50,000 --> 01:56:53,000
其实反而你是理解了 DL 的

3438
01:56:53,000 --> 01:56:54,000
功能中你才想

3439
01:56:55,000 --> 01:56:56,000
总监齿轮是吧

3440
01:56:56,000 --> 01:56:57,000
这个意思

3441
01:56:57,000 --> 01:56:59,000
我觉得可能是从这个角度去想

3442
01:56:59,000 --> 01:57:02,000
也不是说完全就

3443
01:57:03,000 --> 01:57:05,000
抨击你牛化就一无是处了

3444
01:57:05,000 --> 01:57:07,000
或者说完全说扁平化就是一定是好的

3445
01:57:07,000 --> 01:57:09,000
牛化就是老土保守的

3446
01:57:09,000 --> 01:57:10,000
我觉得其实也

3447
01:57:10,000 --> 01:57:11,000
也不一定

3448
01:57:11,000 --> 01:57:12,000
要

3449
01:57:13,000 --> 01:57:14,000
要比较

3450
01:57:15,000 --> 01:57:16,000
那个扯淡的批划

3451
01:57:16,000 --> 01:57:18,000
就是比较辩证的来看这个问题

3452
01:57:20,000 --> 01:57:21,000
辩证法是德国人发明的

3453
01:57:24,000 --> 01:57:25,000
谢谢

3454
01:57:25,000 --> 01:57:27,000
那个资本主义也是德国人发明的

3455
01:57:27,000 --> 01:57:28,000
什么资本主义

3456
01:57:28,000 --> 01:57:29,000
共产主义

3457
01:57:29,000 --> 01:57:33,000
共产主义也是你们德国人发明的

3458
01:57:33,000 --> 01:57:34,000
也不容易

3459
01:57:34,000 --> 01:57:35,000
不客气

3460
01:57:37,000 --> 01:57:37,000
这么说来

3461
01:57:37,000 --> 01:57:40,000
你们德国还出产过很多祸害人类的东西

3462
01:57:41,000 --> 01:57:43,000
共产主义的纳粹都来自德国

3463
01:57:45,000 --> 01:57:47,000
不过在某种程度上

3464
01:57:47,000 --> 01:57:48,000
他们还是蛮有共通点的

3465
01:57:49,000 --> 01:57:51,000
马路杀手汽车也来自于德国

3466
01:57:52,000 --> 01:57:53,000
什么

3467
01:57:54,000 --> 01:57:56,000
马路杀手汽车也来自于德国

3468
01:57:59,000 --> 01:57:59,000
好吧

3469
01:57:59,000 --> 01:57:59,000
OK

3470
01:58:00,000 --> 01:58:01,000
OK

3471
01:58:01,000 --> 01:58:03,000
您刚刚收听到的是

3472
01:58:03,000 --> 01:58:05,000
IPN Podcast 网络旗下的

3473
01:58:05,000 --> 01:58:06,000
IT 技术主题节目

3474
01:58:06,000 --> 01:58:07,000
内阁恐慌

3475
01:58:07,000 --> 01:58:09,000
也欢迎你收听 IPN 旗下的

3476
01:58:09,000 --> 01:58:11,000
其他六档 Podcast

3477
01:58:11,000 --> 01:58:12,000
包括

3478
01:58:12,000 --> 01:58:14,000
Softcore 技术主题节目

3479
01:58:14,000 --> 01:58:15,000
IT 公论

3480
01:58:15,000 --> 01:58:16,000
医疗主题节目

3481
01:58:16,000 --> 01:58:16,000
太医来了

3482
01:58:17,000 --> 01:58:18,000
美食主题节目

3483
01:58:18,000 --> 01:58:18,000
未知道

3484
01:58:18,000 --> 01:58:19,000
艺术主题节目

3485
01:58:19,000 --> 01:58:20,000
流行通信

3486
01:58:20,000 --> 01:58:21,000
无主题节目

3487
01:58:21,000 --> 01:58:22,000
无次元

3488
01:58:22,000 --> 01:58:22,000
固执主题节目

3489
01:58:22,000 --> 01:58:23,000
Hi story

3490
01:58:23,000 --> 01:58:25,000
以及最新加入 IPN 的

3491
01:58:25,000 --> 01:58:27,000
老牌影像节目

3492
01:58:27,000 --> 01:58:27,000
硬影像

3493
01:58:27,000 --> 01:58:29,000
欢迎

3494
01:58:29,000 --> 01:58:31,000
感谢大家收听这一期节目

3495
01:58:31,000 --> 01:58:32,000
也欢迎大家为我们捐款

3496
01:58:33,000 --> 01:58:33,000
捐款地址是

3497
01:58:33,000 --> 01:58:34,000
ipn.ly

3498
01:58:34,000 --> 01:58:35,000
slash

3499
01:58:35,000 --> 01:58:35,000
kernelpanic

3500
01:58:35,000 --> 01:58:36,000
slash

3501
01:58:36,000 --> 01:58:36,000
donate

3502
01:58:37,000 --> 01:58:38,000
OK 了

