1
00:00:00,000 --> 00:00:05,000
北美山地时间 2006 年 1 月 2 日下午 3 点 04 分 05 秒

2
00:00:05,000 --> 00:00:11,000
您正在收听 IPN Podcast 网络旗下的 IT 技术主题节目内核恐慌

3
00:00:11,000 --> 00:00:13,000
我们号称 Hardcore 但是也没有干货

4
00:00:14,000 --> 00:00:15,000
想听的人听,不想听的人就不要听

5
00:00:16,000 --> 00:00:20,000
内核恐慌的网址是 ipn.li-kernelpanic

6
00:00:20,000 --> 00:00:21,000
我们推荐

7
00:00:21,000 --> 00:00:24,000
大家使用 Podcast 的客户端来订阅节目

8
00:00:24,000 --> 00:00:28,000
如果您不知道该用什么样的客户端,您就不要听我节目

9
00:00:28,000 --> 00:00:34,000
正确的台词是,如果您不知道该用什么样的客户端

10
00:00:35,000 --> 00:00:38,000
请访问 ipn.li-faq

11
00:00:39,000 --> 00:00:40,000
OK

12
00:00:40,000 --> 00:00:45,000
好,大家新年好,今天我们又一次请到了柳成云先生作为我们的嘉宾

13
00:00:45,000 --> 00:00:47,000
大家好,我是柳成云

14
00:00:47,000 --> 00:00:51,000
是扬年吧,对,扬年新年第一期节目

15
00:00:51,000 --> 00:00:55,000
大家新年快乐,要说一下什么北美人民发来贺电

16
00:00:56,000 --> 00:00:59,000
德国人民发来贺电,我这些已经不流行这个了是吧

17
00:01:00,000 --> 00:01:02,000
你们有看春晚吗

18
00:01:02,000 --> 00:01:03,000
我看了一点点北吧

19
00:01:04,000 --> 00:01:05,000
威龙你有看吗

20
00:01:05,000 --> 00:01:08,000
我已经四年没有看过春晚了吧

21
00:01:08,000 --> 00:01:14,000
我也是,然后那个那天早上,不是,今年你知道那个川普在 YouTube 上直播吗

22
00:01:14,000 --> 00:01:16,000
对,我有听说,非常讽刺嘛

23
00:01:17,000 --> 00:01:22,000
对对对,是挺讽刺,不过想一下也蛮合理的,这样他可以把那个什么

24
00:01:22,000 --> 00:01:27,000
漏的丢给 Google 去搞吧,然后海外华人也可以

25
00:01:27,000 --> 00:01:28,000
装模作样的过个年

26
00:01:29,000 --> 00:01:32,000
然后那天早上我起来在 Apple TV 上播了可能五分钟

27
00:01:33,000 --> 00:01:36,000
实在是看不下去了,有点想吐,然后就关了走了

28
00:01:37,000 --> 00:01:42,000
OK,这个什么,拜年就到此结束,是不是可以讨红包,你们今天有讨红包

29
00:01:42,000 --> 00:01:47,000
讨红包好啊,欢迎大家转账到我的支付宝

30
00:01:47,000 --> 00:01:49,000
成云点流

31
00:01:49,000 --> 00:01:50,000
哈哈哈

32
00:01:51,000 --> 00:01:54,000
你有支付宝,你居然有支付宝

33
00:01:54,000 --> 00:01:55,000
对对,不要

34
00:01:55,000 --> 00:01:57,000
我完全没有支付宝,我没有国内的银行卡

35
00:01:57,000 --> 00:02:01,000
请大家交由 Lawrence 转交给我们就好了

36
00:02:02,000 --> 00:02:07,000
我们有一个什么官方账号,我们全部放在那里面好了

37
00:02:09,000 --> 00:02:14,000
对,其实可以去你们的那个会员网站上加一个什么红包选项

38
00:02:14,000 --> 00:02:19,000
然后大家在那边直接 stripe 钱过来就好了

39
00:02:20,000 --> 00:02:27,000
这个不错,刚好昨天那个 stripe 又放出来,他们已经开始支持可以收那个什么 Bitcoin 了

40
00:02:27,000 --> 00:02:28,000
stripe 支持支付宝吗?

41
00:02:28,000 --> 00:02:29,000
支持啊支持啊

42
00:02:30,000 --> 00:02:32,000
OK,那蛮好的

43
00:02:33,000 --> 00:02:37,000
所以吴涛你有贺青春吗?有吃年夜饭吗?

44
00:02:38,000 --> 00:02:45,000
我这个女朋友包了下饺子,也哪也没去,我也是要工作,就没有请假什么的

45
00:02:45,000 --> 00:02:46,000
那还挺温馨的

46
00:02:46,000 --> 00:02:49,000
你呢?你请假了吗?

47
00:02:49,000 --> 00:02:51,000
我没有呢,我跟我室友吃了个火锅

48
00:02:52,000 --> 00:02:53,000
OK

49
00:02:53,000 --> 00:03:02,000
那我那个,我想都没想,我星期一的时候另外一个同事,我另外一个朋友说他在那个他要吃火锅

50
00:03:02,000 --> 00:03:06,000
我才想起这个事,所以那边就抓了我室友

51
00:03:06,000 --> 00:03:08,000
然后,还蛮好的

52
00:03:08,000 --> 00:03:12,000
你们有你们那边有唐人街什么的吗?有啊,是可以

53
00:03:12,000 --> 00:03:20,000
但是就很少去嘛,其实你知道 China 他要跟你跟我们这些

54
00:03:20,000 --> 00:03:22,000
这一代的中国人没什么关系

55
00:03:22,000 --> 00:03:31,000
真的就没什么关系,就很不一样,特别是我又不是潮汕人,我又不说广东话,所以说就更加陌生感觉

56
00:03:31,000 --> 00:03:33,000
你从中国哪儿去了?

57
00:03:33,000 --> 00:03:34,000
我长沙人

58
00:03:34,000 --> 00:03:36,000
你是长沙人?

59
00:03:36,000 --> 00:03:37,000
我是长沙人,对吧

60
00:03:37,000 --> 00:03:38,000
你是长沙人

61
00:03:38,000 --> 00:03:42,000
你跟你口音都不对,长沙人,我是咋子说的?

62
00:03:43,000 --> 00:03:44,000
长沙人

63
00:03:46,000 --> 00:03:48,000
我在长沙大学

64
00:03:48,000 --> 00:03:49,000
哪一所?

65
00:03:50,000 --> 00:03:50,000
中南大学

66
00:03:50,000 --> 00:03:54,000
哦,这挺巧的,你是什么时候在长沙?

67
00:03:55,000 --> 00:03:57,000
2002 年到 2006 年

68
00:03:57,000 --> 00:04:00,000
我在当时在那,我是我在干嘛?

69
00:04:00,000 --> 00:04:04,000
2002 年啊,2011 年的时候

70
00:04:05,000 --> 00:04:06,000
已经出国了

71
00:04:06,000 --> 00:04:08,000
没有,我 2001 年的时候开始上初中

72
00:04:10,000 --> 00:04:12,000
哦,对,你好,比我想的多,我差点胖了

73
00:04:12,000 --> 00:04:15,000
对,所以你啊

74
00:04:15,000 --> 00:04:18,000
好,我那个时候还经历,其实我的那个

75
00:04:19,000 --> 00:04:24,000
我当时我的外教是在中南大学,我还经常去呢,所以说

76
00:04:25,000 --> 00:04:27,000
我靠,搞不好我碰到你,碰见过

77
00:04:27,000 --> 00:04:29,000
有可能有

78
00:04:29,000 --> 00:04:35,000
OK,我们先做一下前两期的 Follow-up

79
00:04:37,000 --> 00:04:39,000
首先又到了英语课堂时间

80
00:04:40,000 --> 00:04:45,000
我读错了一个词,是 Dialect,我读成了 Dialect

81
00:04:46,000 --> 00:04:48,000
这是德语读法,我再次检讨

82
00:04:50,000 --> 00:04:51,000
还有啊,还有啊,还有俩

83
00:04:51,000 --> 00:04:53,000
哇,这两个都是我读错的吗?

84
00:04:54,000 --> 00:04:54,000
难道是我吗?

85
00:04:54,000 --> 00:04:58,000
好吧,第一个,这个怎么叫?Model

86
00:04:59,000 --> 00:05:00,000
还是 Model

87
00:05:01,000 --> 00:05:03,000
是 Mode 的其中词,说的是 Model

88
00:05:04,000 --> 00:05:05,000
Model,OK

89
00:05:05,000 --> 00:05:09,000
对,这个就是模态的意思,几种模态

90
00:05:09,000 --> 00:05:11,000
可能当时我脑子里面想的都是 Model,所以

91
00:05:15,000 --> 00:05:16,000
然后这个是什么?

92
00:05:17,000 --> 00:05:17,000
Augmented

93
00:05:18,000 --> 00:05:20,000
Augmented Reality,对吧?

94
00:05:20,000 --> 00:05:23,000
Augmented,我念成了 Argumented

95
00:05:23,000 --> 00:05:25,000
我也不记得了,是你念错了还是我念错了?

96
00:05:26,000 --> 00:05:30,000
我也忘了,下面一个我应该是说我念错了,Backbone,没错

97
00:05:31,000 --> 00:05:32,000
Backbone

98
00:05:32,000 --> 00:05:34,000
好吧,那是个叫什么?

99
00:05:35,000 --> 00:05:38,000
法语留给英语的坏习惯叫什么?开原因,开音节

100
00:05:40,000 --> 00:05:44,000
OK,不过这个词是今天我们后面要讲的重头戏

101
00:05:44,000 --> 00:05:45,000
对

102
00:05:46,000 --> 00:05:48,000
先卖个关子,接着讲

103
00:05:49,000 --> 00:05:52,000
卖关子有时候用那个 title 里面写的,肯定会很明白

104
00:05:53,000 --> 00:05:55,000
有些人可能不看嘛

105
00:05:56,000 --> 00:05:58,000
直接就听了是不是?

106
00:05:58,000 --> 00:05:58,000
好吧

107
00:06:00,000 --> 00:06:02,000
然后下面是意大利语阵音

108
00:06:02,000 --> 00:06:05,000
诶,不对,这是意大利语法,语法版

109
00:06:05,000 --> 00:06:08,000
对,自从我上一上期抛出那个

110
00:06:08,000 --> 00:06:12,000
Peznista 的复述是 Peznisti 的论调之后

111
00:06:12,000 --> 00:06:16,000
有一位叫做姜正宇的朋友

112
00:06:17,000 --> 00:06:18,000
写 E-mail 来给我们

113
00:06:20,000 --> 00:06:21,000
做了一段意大利语法的讲解

114
00:06:21,000 --> 00:06:26,000
就是以 ista 结尾的名词,复述变化为

115
00:06:27,000 --> 00:06:32,000
Isti,意思是做手门式的男人们或者是男女会合的人们

116
00:06:33,000 --> 00:06:36,000
而如果这一个

117
00:06:37,000 --> 00:06:41,000
这种人是纯女性的话,才是 ista 变成 Isti

118
00:06:43,000 --> 00:06:45,000
OK,所以是

119
00:06:46,000 --> 00:06:49,000
所以就是 Peznisti 就是复述的

120
00:06:49,000 --> 00:06:51,000
不分男女的

121
00:06:51,000 --> 00:06:53,000
不分性别的,对

122
00:06:54,000 --> 00:06:57,000
这个什么?你看这又印证了你那句话

123
00:06:57,000 --> 00:07:00,000
做播客最好的可以学到各种的语文知识

124
00:07:00,000 --> 00:07:03,000
但这个语文包含了各国语文

125
00:07:03,000 --> 00:07:06,000
各国语文,各种语种的语文

126
00:07:06,000 --> 00:07:12,000
每次看这些其他欧洲语言就觉得英语还真是容易啊

127
00:07:13,000 --> 00:07:15,000
容易吗?很容易啊

128
00:07:15,000 --> 00:07:18,000
英语其实还是相当容易

129
00:07:18,000 --> 00:07:21,000
因为我觉得英文的就是不太规则

130
00:07:21,000 --> 00:07:25,000
比如说德语,其他也没什么概念

131
00:07:25,000 --> 00:07:28,000
他虽然麻烦,但是好歹他规则

132
00:07:28,000 --> 00:07:31,000
他的查德语词在大部分时候是不需要音标的

133
00:07:31,000 --> 00:07:33,000
这是德语唯一一点好的

134
00:07:34,000 --> 00:07:36,000
而且大部分可以读得出来

135
00:07:36,000 --> 00:07:39,000
英文很多坑的,就是那种弱音或者是哑音

136
00:07:39,000 --> 00:07:41,000
对方不说大众是吗?

137
00:07:43,000 --> 00:07:45,000
比如说 dialect 这个词

138
00:07:46,000 --> 00:07:50,000
什么时候一个字母 I 应该念 I,什么时候应该念 E

139
00:07:50,000 --> 00:07:53,000
E 的,这个就是比较糟糕的

140
00:07:53,000 --> 00:07:54,000
对啊

141
00:07:54,000 --> 00:07:57,000
不像德语就是比较唯一我觉得

142
00:07:57,000 --> 00:08:00,000
对啊,比如说那个 anti-air 还是 anti-air

143
00:08:00,000 --> 00:08:01,000
我到现在都不知道

144
00:08:02,000 --> 00:08:03,000
是 anti 吧

145
00:08:03,000 --> 00:08:04,000
OK

146
00:08:05,000 --> 00:08:06,000
可是很多人都 anti-air

147
00:08:09,000 --> 00:08:10,000
这个就

148
00:08:10,000 --> 00:08:13,000
我等会,我是在做的唯一一个没有在英语国家待过的人

149
00:08:13,000 --> 00:08:15,000
所以我念错全有可言

150
00:08:16,000 --> 00:08:18,000
加拿大人不说英语,没事

151
00:08:18,000 --> 00:08:19,000
好吧

152
00:08:21,000 --> 00:08:25,000
我们的拼写都是跟着 British English 走的挺奇怪的

153
00:08:26,000 --> 00:08:27,000
你知道

154
00:08:27,000 --> 00:08:29,000
在英语国家待的越久

155
00:08:29,000 --> 00:08:32,000
of course 你那个英语变得好一点

156
00:08:32,000 --> 00:08:35,000
但是更多的是你就变得越来越不在乎了

157
00:08:35,000 --> 00:08:37,000
因为好像大家也不是特别在意

158
00:08:37,000 --> 00:08:38,000
反正都听得明白

159
00:08:38,000 --> 00:08:39,000
听懂了就好啊

160
00:08:39,000 --> 00:08:40,000
就不用管了一次

161
00:08:40,000 --> 00:08:43,000
我根本就不纠结口音的问题

162
00:08:45,000 --> 00:08:47,000
不过他们说是 Widow 不在美国

163
00:08:47,000 --> 00:08:49,000
然后美国其实是没有官方语言的

164
00:08:49,000 --> 00:08:50,000
对,那个

165
00:08:50,000 --> 00:08:53,000
美国从来没有法定过官方语言

166
00:08:53,000 --> 00:08:55,000
对,这个很诡异我觉得

167
00:08:55,000 --> 00:08:56,000
这不诡异

168
00:08:56,000 --> 00:08:59,000
这日本也没有规定日语是官方语言

169
00:08:59,000 --> 00:09:00,000
Really?

170
00:09:00,000 --> 00:09:01,000
Really

171
00:09:01,000 --> 00:09:05,000
但他们还有除了日语之外什么主要通行的语言吗

172
00:09:05,000 --> 00:09:06,000
就是因为如此,所以

173
00:09:06,000 --> 00:09:09,000
那美国还有什么西班牙语啊

174
00:09:09,000 --> 00:09:13,000
这种,特别是 Widow 所在的什么大加州

175
00:09:13,000 --> 00:09:16,000
那没有西班牙语,真是少混半个加州啊

176
00:09:16,000 --> 00:09:17,000
加州是这样的吗

177
00:09:17,000 --> 00:09:20,000
我还以为只有什么西墨西哥州那个

178
00:09:20,000 --> 00:09:21,000
我觉得加州也很严重

179
00:09:21,000 --> 00:09:23,000
Widow 你说一下

180
00:09:23,000 --> 00:09:24,000
没有什么严不严重的

181
00:09:24,000 --> 00:09:28,000
就是因为离 LATAM 比较近

182
00:09:28,000 --> 00:09:34,000
所以说很多从南美移民过来的人

183
00:09:34,000 --> 00:09:37,000
对,特别是南加那边好像就很

184
00:09:37,000 --> 00:09:38,000
没有不会西班牙语

185
00:09:38,000 --> 00:09:39,000
但是挺吃亏的我觉得

186
00:09:41,000 --> 00:09:43,000
可能就是在特定的情况下

187
00:09:43,000 --> 00:09:46,000
比方说如果你开一个餐厅

188
00:09:46,000 --> 00:09:51,000
然后你大部分人所顾的人肯定是

189
00:09:51,000 --> 00:09:53,000
就是拉美裔的

190
00:09:53,000 --> 00:09:57,000
然后如果你不会说西班牙语的话

191
00:09:57,000 --> 00:10:00,000
做一个 Manager 跟他们沟通就很困难

192
00:10:00,000 --> 00:10:02,000
但是平时的日常生活中

193
00:10:02,000 --> 00:10:04,000
除了泡妞之外好像也没有

194
00:10:04,000 --> 00:10:06,000
或者泡男人啊,看,Depends

195
00:10:07,000 --> 00:10:10,000
很多路啊,很多路会是西班牙语的呀

196
00:10:10,000 --> 00:10:11,000
什么

197
00:10:11,000 --> 00:10:12,000
Al Camino

198
00:10:12,000 --> 00:10:13,000
Mbeka Derro

199
00:10:13,000 --> 00:10:14,000
对,各种

200
00:10:14,000 --> 00:10:16,000
Yerba Boyna

201
00:10:16,000 --> 00:10:17,000
对

202
00:10:17,000 --> 00:10:20,000
San Jose 也是西班牙语

203
00:10:20,000 --> 00:10:21,000
San Jose

204
00:10:21,000 --> 00:10:22,000
对啊

205
00:10:22,000 --> 00:10:25,000
San Francisco 本身也是

206
00:10:25,000 --> 00:10:26,000
西班牙语

207
00:10:26,000 --> 00:10:27,000
对,圣福兰西斯科

208
00:10:28,000 --> 00:10:30,000
对,其实我觉得西班牙语挺好听的

209
00:10:30,000 --> 00:10:32,000
就听起来很像在唱歌的感觉

210
00:10:32,000 --> 00:10:33,000
它原音多嘛

211
00:10:33,000 --> 00:10:35,000
它跟日语一样都是原音和抚音

212
00:10:35,000 --> 00:10:36,000
大概一半一半的

213
00:10:36,000 --> 00:10:38,000
就听起来比较中听

214
00:10:38,000 --> 00:10:40,000
而且听起来就觉得很欢快

215
00:10:40,000 --> 00:10:41,000
不知道为什么

216
00:10:41,000 --> 00:10:42,000
是很欢快

217
00:10:43,000 --> 00:10:46,000
你就觉得如果身旁有一个什么西班牙的哥们

218
00:10:46,000 --> 00:10:47,000
在那里跟你讲话

219
00:10:47,000 --> 00:10:51,000
你觉得整个生活都阳光了一些的样子

220
00:10:53,000 --> 00:10:55,000
所以古罗马其实是个非常阳光的国家

221
00:10:57,000 --> 00:10:59,000
下面一个是国语阵营班

222
00:10:59,000 --> 00:11:01,000
这个应该又是吴涛的

223
00:11:01,000 --> 00:11:02,000
吴涛你怎么老是念词啊

224
00:11:02,000 --> 00:11:03,000
我老是掉书袋嘛

225
00:11:03,000 --> 00:11:05,000
一掉书袋就容易念词

226
00:11:08,000 --> 00:11:09,000
又暴露了

227
00:11:09,000 --> 00:11:11,000
冒天下之大不为

228
00:11:11,000 --> 00:11:13,000
我念成冒天下之大不为了

229
00:11:14,000 --> 00:11:16,000
其实我悄悄地说我也会这么念

230
00:11:16,000 --> 00:11:16,000
我也会念错

231
00:11:16,000 --> 00:11:17,000
这个我倒不会

232
00:11:18,000 --> 00:11:19,000
你这些没有文化的人

233
00:11:19,000 --> 00:11:21,000
怎么可以跟我一起主持节目

234
00:11:23,000 --> 00:11:25,000
好,我们两个关掉麦一下

235
00:11:25,000 --> 00:11:26,000
接下来又留声音

236
00:11:26,000 --> 00:11:29,000
我想可能是那个字就是那个

237
00:11:29,000 --> 00:11:30,000
避讳那个讳嘛

238
00:11:30,000 --> 00:11:32,000
不是沿旁一个尾嘛

239
00:11:32,000 --> 00:11:33,000
OK

240
00:11:34,000 --> 00:11:36,000
公讳的那个讳好像也是一个讳

241
00:11:37,000 --> 00:11:40,000
反正就是会有点那个

242
00:11:40,000 --> 00:11:41,000
就如果我来念

243
00:11:41,000 --> 00:11:42,000
我估计也会念成那个

244
00:11:42,000 --> 00:11:43,000
现在哈哈我又知道了

245
00:11:43,000 --> 00:11:44,000
谢谢

246
00:11:44,000 --> 00:11:45,000
吴涛

247
00:11:45,000 --> 00:11:46,000
我有一个问题

248
00:11:46,000 --> 00:11:47,000
不客气

249
00:11:47,000 --> 00:11:48,000
举手提问

250
00:11:48,000 --> 00:11:48,000
举手提问

251
00:11:48,000 --> 00:11:49,000
老师们

252
00:11:49,000 --> 00:11:54,000
刚刚吴涛念的是那个

253
00:11:55,000 --> 00:11:57,000
就是没有什么干货

254
00:11:57,000 --> 00:12:00,000
是读干货还是干货

255
00:12:03,000 --> 00:12:04,000
论课

256
00:12:07,000 --> 00:12:08,000
这个词真的不是

257
00:12:08,000 --> 00:12:11,000
这个问题真的不是来戏弄我们的吗

258
00:12:12,000 --> 00:12:13,000
这个其实在某一期

259
00:12:13,000 --> 00:12:15,000
我有这个某一期

260
00:12:15,000 --> 00:12:16,000
我遇到过另外一个问题就是

261
00:12:17,000 --> 00:12:18,000
精凑

262
00:12:19,000 --> 00:12:19,000
对

263
00:12:21,000 --> 00:12:22,000
是精凑呢

264
00:12:22,000 --> 00:12:24,000
还是就说我们说一个东西

265
00:12:24,000 --> 00:12:26,000
很很 robust 的时候

266
00:12:26,000 --> 00:12:27,000
说的很精凑呢

267
00:12:27,000 --> 00:12:29,000
还是说很精凑呢

268
00:12:30,000 --> 00:12:31,000
我会说

269
00:12:31,000 --> 00:12:32,000
WILLOW 你回答

270
00:12:33,000 --> 00:12:35,000
我会说精凑啊

271
00:12:37,000 --> 00:12:39,000
所以你们两个是一个阵营

272
00:12:39,000 --> 00:12:41,000
北美大陆都是一个阵营

273
00:12:44,000 --> 00:12:46,000
我理解这个是从操练来的

274
00:12:46,000 --> 00:12:48,000
你应该说这个东西很精凑

275
00:12:48,000 --> 00:12:50,000
就是他非常经得起

276
00:12:50,000 --> 00:12:52,000
WILLOW 你说你想哪里去了

277
00:12:53,000 --> 00:12:55,000
我就觉得读起来很自然

278
00:12:57,000 --> 00:12:58,000
对

279
00:12:58,000 --> 00:12:59,000
自然

280
00:13:00,000 --> 00:13:02,000
所以应该是干货

281
00:13:02,000 --> 00:13:03,000
干湿的干

282
00:13:03,000 --> 00:13:05,000
这个是相对于湿货来讲的

283
00:13:05,000 --> 00:13:06,000
对

284
00:13:06,000 --> 00:13:08,000
因为如果你用繁体字写的话

285
00:13:08,000 --> 00:13:10,000
这个字必须写成那个干燥的干

286
00:13:10,000 --> 00:13:13,000
就是就像看起来像钱的那个钱

287
00:13:13,000 --> 00:13:15,000
我懂那个语境下

288
00:13:15,000 --> 00:13:18,000
但是我不知道这个干货

289
00:13:18,000 --> 00:13:19,000
这个词的来源

290
00:13:19,000 --> 00:13:21,000
但是我一开始以为是觉得是那个

291
00:13:21,000 --> 00:13:23,000
就是像主干到那种

292
00:13:23,000 --> 00:13:26,000
就是重要的

293
00:13:26,000 --> 00:13:27,000
主要的

294
00:13:27,000 --> 00:13:28,000
主要的

295
00:13:28,000 --> 00:13:29,000
就是重要的

296
00:13:29,000 --> 00:13:31,000
我又想歪了

297
00:13:31,000 --> 00:13:32,000
我没有 buy product

298
00:13:32,000 --> 00:13:34,000
我们只有主要的

299
00:13:35,000 --> 00:13:38,000
他那个干货是来自于说没有水分

300
00:13:38,000 --> 00:13:41,000
就是说都是精华 essence

301
00:13:41,000 --> 00:13:42,000
这个意思

302
00:13:42,000 --> 00:13:44,000
就是别人都是鸡汤

303
00:13:44,000 --> 00:13:45,000
我们是鸡精

304
00:13:45,000 --> 00:13:47,000
这就是干货

305
00:13:47,000 --> 00:13:49,000
但我们这个就是自来水

306
00:13:49,000 --> 00:13:50,000
水到了

307
00:13:50,000 --> 00:13:50,000
谢谢了

308
00:13:50,000 --> 00:13:52,000
谢谢了

309
00:13:52,000 --> 00:13:54,000
我们别人跟他说我们是脑髓

310
00:13:55,000 --> 00:13:56,000
脑浆

311
00:14:00,000 --> 00:14:01,000
还有一个反馈

312
00:14:01,000 --> 00:14:04,000
这是在前一期

313
00:14:04,000 --> 00:14:05,000
我们不是在提到

314
00:14:05,000 --> 00:14:08,000
苹果可能会在今年发布那个传说中的

315
00:14:08,000 --> 00:14:09,000
Retina MacBook Air 吗

316
00:14:10,000 --> 00:14:13,000
然后之前不是网上流传出他的截图说

317
00:14:13,000 --> 00:14:15,000
这个 escape 键的位置

318
00:14:15,000 --> 00:14:17,000
被电源键占据了吗

319
00:14:17,000 --> 00:14:19,000
然后当时我们在讨论

320
00:14:19,000 --> 00:14:21,000
就说到底是回退键那个 backspace

321
00:14:21,000 --> 00:14:23,000
或者是在 Mac 上叫做 delete 那个键

322
00:14:23,000 --> 00:14:24,000
按得多呢

323
00:14:24,000 --> 00:14:25,000
还是 escape 按得多呢

324
00:14:25,000 --> 00:14:30,000
然后这里有一位听众叫杜凡

325
00:14:30,000 --> 00:14:30,000
这个是拼音吧

326
00:14:30,000 --> 00:14:31,000
他来邮件跟我们说

327
00:14:31,000 --> 00:14:33,000
他有一个用那个 Wattpals 记录的自己

328
00:14:33,000 --> 00:14:35,000
机件的频率的分布

329
00:14:36,000 --> 00:14:39,000
然后猜一下这个比例大概多少

330
00:14:39,000 --> 00:14:40,000
给你两秒钟

331
00:14:42,000 --> 00:14:43,000
1 比 1

332
00:14:45,000 --> 00:14:45,000
就是你吧

333
00:14:47,000 --> 00:14:49,000
就是说一个我觉得这一正常来说

334
00:14:49,000 --> 00:14:50,000
应该差不多

335
00:14:50,000 --> 00:14:51,000
就是他超过 10 比 1 的样子

336
00:14:51,000 --> 00:14:53,000
就他应该是 7000 比 600

337
00:14:53,000 --> 00:14:56,000
就是 11 比大概 11 比 1 的样子

338
00:14:56,000 --> 00:14:56,000
对

339
00:14:57,000 --> 00:14:58,000
OK

340
00:14:58,000 --> 00:14:59,000
他为什么不写 70 比 6

341
00:14:59,000 --> 00:15:01,000
我要写个 7000 比 600

342
00:15:01,000 --> 00:15:04,000
因为那个是他机件次数

343
00:15:04,000 --> 00:15:05,000
对

344
00:15:06,000 --> 00:15:07,000
说来很巧

345
00:15:07,000 --> 00:15:09,000
我们这里在座三位都是 Vim 档

346
00:15:11,000 --> 00:15:11,000
好像是

347
00:15:12,000 --> 00:15:13,000
Willow 也是

348
00:15:13,000 --> 00:15:16,000
有这些你是用 Vim 还是 Emac

349
00:15:16,000 --> 00:15:16,000
OK

350
00:15:17,000 --> 00:15:18,000
智商太低

351
00:15:18,000 --> 00:15:20,000
配不上 Emac 这种高级货

352
00:15:21,000 --> 00:15:24,000
先自黑一下以免被人黑

353
00:15:27,000 --> 00:15:29,000
Willow 其实你做前端开发的话

354
00:15:29,000 --> 00:15:31,000
其实很多我看了最近很多形象

355
00:15:31,000 --> 00:15:32,000
用什么 sublime 那些

356
00:15:32,000 --> 00:15:34,000
你怎么没有被勾引过去

357
00:15:35,000 --> 00:15:37,000
因为基本上他们能够提供的

358
00:15:37,000 --> 00:15:39,000
Toolchain Vim 都能够提供

359
00:15:39,000 --> 00:15:45,000
然后重新学习一个编辑器的成本

360
00:15:45,000 --> 00:15:46,000
这个太高了

361
00:15:46,000 --> 00:15:47,000
然后完全没有吸引力

362
00:15:48,000 --> 00:15:51,000
我觉得那些编辑器不能叫重新学习

363
00:15:51,000 --> 00:15:54,000
而是你要先安烂一个非常好的编辑器

364
00:15:54,000 --> 00:15:55,000
然后再 re-land

365
00:15:55,000 --> 00:15:56,000
将就一下

366
00:15:56,000 --> 00:15:58,000
对强迫自己去

367
00:15:58,000 --> 00:15:59,000
本来已经会跑了

368
00:15:59,000 --> 00:16:01,000
然后慢慢走就很不适

369
00:16:03,000 --> 00:16:06,000
我是很 respect 大家 personal choice

370
00:16:06,000 --> 00:16:11,000
就是你想用其他编辑器

371
00:16:11,000 --> 00:16:12,000
我不价值你

372
00:16:14,000 --> 00:16:15,000
我们节目的主旨就是

373
00:16:15,000 --> 00:16:17,000
你不是 Vim 档就是跟我们作对吗

374
00:16:19,000 --> 00:16:21,000
刚才问到你是用 Emac 还是用 Vim 的时候

375
00:16:21,000 --> 00:16:24,000
这个割席的刀已经提起来了

376
00:16:25,000 --> 00:16:27,000
就等着你那个什么了

377
00:16:27,000 --> 00:16:28,000
还好

378
00:16:29,000 --> 00:16:31,000
不过这个是我之前有侦查过

379
00:16:31,000 --> 00:16:32,000
所以我才敢问

380
00:16:32,000 --> 00:16:33,000
OK

381
00:16:33,000 --> 00:16:34,000
不然伤了和气是吧

382
00:16:35,000 --> 00:16:37,000
对这样就内讧了

383
00:16:43,000 --> 00:16:48,000
接下来的 feedback 来自于一位听众在微

384
00:16:48,000 --> 00:16:49,000
不是微信是

385
00:16:50,000 --> 00:16:51,000
那个东西叫什么

386
00:16:51,000 --> 00:16:52,000
微博上面

387
00:16:53,000 --> 00:16:55,000
那个东西叫什么

388
00:16:58,000 --> 00:17:00,000
微博已经离你生活这么远了

389
00:17:00,000 --> 00:17:01,000
我想问一下

390
00:17:01,000 --> 00:17:02,000
因为基本不用

391
00:17:05,000 --> 00:17:06,000
微博很糟糕我觉得

392
00:17:07,000 --> 00:17:09,000
反正有一个听众给我们贴了一段

393
00:17:09,000 --> 00:17:11,000
YouTube 上面的视频

394
00:17:11,000 --> 00:17:17,000
讲 Lip Motion 和 Oculus Rift 结合在一起的应用

395
00:17:17,000 --> 00:17:20,000
它非常逼近我所希望的那个能够在

396
00:17:21,000 --> 00:17:23,000
虚拟现实里面看到自己的手

397
00:17:23,000 --> 00:17:24,000
至少是看到自己的手这个需求

398
00:17:24,000 --> 00:17:25,000
然后

399
00:17:27,000 --> 00:17:30,000
他那个 YouTube 的视频就演示了一个人

400
00:17:30,000 --> 00:17:31,000
带着 Oculus Rift

401
00:17:31,000 --> 00:17:36,000
然后把 Lip Motion 贴在 Oculus Rift 的前面

402
00:17:36,000 --> 00:17:38,000
这样 Lip Motion 可以感受到自己的手

403
00:17:40,000 --> 00:17:43,000
然后他在 Rift 的 vision 里面

404
00:17:43,000 --> 00:17:46,000
把自己的手以一个虚拟的方式画出来

405
00:17:46,000 --> 00:17:50,000
然后再用手去控制虚拟世界里面的物体

406
00:17:51,000 --> 00:17:54,000
所以他用两家公司的方案组合出了那个 HoloLens

407
00:17:56,000 --> 00:17:59,000
这其实是非常

408
00:18:00,000 --> 00:18:02,000
很奇妙的一件事情

409
00:18:02,000 --> 00:18:04,000
就是这两个东西本来都不是这么用的

410
00:18:04,000 --> 00:18:04,000
但

411
00:18:05,000 --> 00:18:09,000
它其实这就是 somehow 叫什么 Ductive

412
00:18:09,000 --> 00:18:11,000
Ductive Programming

413
00:18:12,000 --> 00:18:12,000
Ductive Programming

414
00:18:12,000 --> 00:18:14,000
他们两个东西粘在一起

415
00:18:14,000 --> 00:18:17,000
然后实现一个浇水的功能

416
00:18:17,000 --> 00:18:18,000
把他们两个功能合起来

417
00:18:18,000 --> 00:18:20,000
这不是我们的 Daily Life 吗

418
00:18:21,000 --> 00:18:24,000
要实现一个什么功能

419
00:18:24,000 --> 00:18:25,000
先上 GitHub 搜一下

420
00:18:25,000 --> 00:18:29,000
有什么 Open Source 包先用一下

421
00:18:29,000 --> 00:18:30,000
对

422
00:18:30,000 --> 00:18:33,000
如果有什么问题就 Stack Overflow 去搜一下

423
00:18:33,000 --> 00:18:35,000
有没有现成的解决方案

424
00:18:35,000 --> 00:18:37,000
我现在很少用 Stack Overflow

425
00:18:37,000 --> 00:18:42,000
因为我发现问题都是有时效性的

426
00:18:42,000 --> 00:18:43,000
你说我们解决问题

427
00:18:43,000 --> 00:18:46,000
2011 年解决问题的方式

428
00:18:46,000 --> 00:18:50,000
跟 2015 年解决问题的方式

429
00:18:50,000 --> 00:18:51,000
是有很大的变化

430
00:18:51,000 --> 00:18:52,000
但是 Stack Overflow

431
00:18:52,000 --> 00:18:53,000
特别是前段

432
00:18:53,000 --> 00:18:53,000
对

433
00:18:53,000 --> 00:18:55,000
只有前段是这样吗

434
00:18:55,000 --> 00:18:56,000
我想说

435
00:18:57,000 --> 00:19:02,000
Stack Overflow 搜索的结果很多都来自于

436
00:19:02,000 --> 00:19:03,000
叫 Asian Time

437
00:19:03,000 --> 00:19:06,000
Asian Time 是 4 年前

438
00:19:06,000 --> 00:19:06,000
对

439
00:19:06,000 --> 00:19:07,000
2 年前

440
00:19:07,000 --> 00:19:08,000
对

441
00:19:09,000 --> 00:19:10,000
所以就变得很没用

442
00:19:10,000 --> 00:19:12,000
我知道 Google 要 Search Tool

443
00:19:12,000 --> 00:19:13,000
但是

444
00:19:15,000 --> 00:19:17,000
Stack Overflow 他们现在不是做了一个功能吗

445
00:19:17,000 --> 00:19:18,000
就是叫什么

446
00:19:18,000 --> 00:19:20,000
可以编辑成 Wiki

447
00:19:22,000 --> 00:19:23,000
你知道就是他把

448
00:19:23,000 --> 00:19:25,000
就是你答案是可以被再编辑的

449
00:19:25,000 --> 00:19:27,000
所以我看到很多就是最近也不叫最近

450
00:19:27,000 --> 00:19:30,000
可能一两年的答案

451
00:19:30,000 --> 00:19:31,000
你可以看他的最开始

452
00:19:31,000 --> 00:19:33,000
回答可能是 3 4 年前

453
00:19:33,000 --> 00:19:35,000
然后最近一两年又有人编辑过一遍

454
00:19:35,000 --> 00:19:35,000
嗯

455
00:19:36,000 --> 00:19:37,000
那是蛮有帮助的

456
00:19:37,000 --> 00:19:39,000
我是觉得在前段这一块

457
00:19:39,000 --> 00:19:41,000
可能三个月就是一个人

458
00:19:41,000 --> 00:19:41,000
一个真正的月

459
00:19:41,000 --> 00:19:42,000
三个月

460
00:19:42,000 --> 00:19:46,000
如果你的技术周期还是月的话

461
00:19:46,000 --> 00:19:47,000
你已经落后了

462
00:19:47,000 --> 00:19:49,000
通常都是以周围计算的

463
00:19:49,000 --> 00:19:50,000
不

464
00:19:50,000 --> 00:19:50,000
我的意思是

465
00:19:50,000 --> 00:19:53,000
如果你看到这个答案是三个月之前

466
00:19:53,000 --> 00:19:56,000
那基本上意味着他可能已经不对了

467
00:19:56,000 --> 00:19:56,000
但是

468
00:19:56,000 --> 00:19:57,000
其他一些领域

469
00:19:57,000 --> 00:19:59,000
比如说我今天不得已

470
00:19:59,000 --> 00:20:01,000
又去碰一下 Java Swing

471
00:20:01,000 --> 00:20:01,000
然后

472
00:20:02,000 --> 00:20:04,000
Stack Overflow Driven Development

473
00:20:04,000 --> 00:20:05,000
非常成功

474
00:20:05,000 --> 00:20:07,000
大概是 4 年前的一个答案

475
00:20:07,000 --> 00:20:09,000
非常完美的方导

476
00:20:09,000 --> 00:20:12,000
所以这个成熟的

477
00:20:12,000 --> 00:20:13,000
就是 Metropole

478
00:20:13,000 --> 00:20:14,000
就是这个好处

479
00:20:15,000 --> 00:20:15,000
对

480
00:20:16,000 --> 00:20:18,000
然后我还顺便找一本书里面

481
00:20:18,000 --> 00:20:20,000
讲的一些 Java Swing 的技巧

482
00:20:20,000 --> 00:20:23,000
你看里面实现的那些视觉效果

483
00:20:23,000 --> 00:20:24,000
都是

484
00:20:25,000 --> 00:20:26,000
90 年代的感觉

485
00:20:27,000 --> 00:20:29,000
还有跑马灯吗

486
00:20:29,000 --> 00:20:31,000
好像没有吧

487
00:20:31,000 --> 00:20:32,000
就是什么阴影啊

488
00:20:32,000 --> 00:20:33,000
圆角啊

489
00:20:35,000 --> 00:20:37,000
圆角现在看起来都已经如此过失了

490
00:20:37,000 --> 00:20:38,000
什么

491
00:20:39,000 --> 00:20:40,000
要 Flat

492
00:20:41,000 --> 00:20:42,000
好啦

493
00:20:42,000 --> 00:20:44,000
这样说到这个前端开发

494
00:20:44,000 --> 00:20:46,000
我们就切入今天的主题吧

495
00:20:47,000 --> 00:20:47,000
好

496
00:20:47,000 --> 00:20:48,000
那个什么

497
00:20:49,000 --> 00:20:50,000
Will 同学

498
00:20:50,000 --> 00:20:52,000
你刚才我们说了

499
00:20:52,000 --> 00:20:53,000
前端开发是以周围

500
00:20:53,000 --> 00:20:55,000
然后是那个时间单位来计算

501
00:20:55,000 --> 00:20:56,000
更迭速度的

502
00:20:56,000 --> 00:20:58,000
您最近最赶的怎么样

503
00:20:58,000 --> 00:21:00,000
还在学习

504
00:21:00,000 --> 00:21:01,000
这个刚说了

505
00:21:01,000 --> 00:21:02,000
就是自黑了

506
00:21:02,000 --> 00:21:03,000
已经自黑过了

507
00:21:03,000 --> 00:21:05,000
就继续一下

508
00:21:05,000 --> 00:21:05,000
那个

509
00:21:05,000 --> 00:21:06,000
Bucket TV

510
00:21:06,000 --> 00:21:08,000
就感觉智商很不够用

511
00:21:08,000 --> 00:21:08,000
你知道吧

512
00:21:08,000 --> 00:21:10,000
就这个

513
00:21:10,000 --> 00:21:11,000
更新周期里头

514
00:21:12,000 --> 00:21:13,000
你看 React Native

515
00:21:13,000 --> 00:21:14,000
我们上期说了那么多

516
00:21:14,000 --> 00:21:16,000
结果我直到昨天

517
00:21:16,000 --> 00:21:18,000
才终于有机会尝试了一下

518
00:21:18,000 --> 00:21:19,000
然后还

519
00:21:20,000 --> 00:21:22,000
还给他们交了一个 Pool Request

520
00:21:22,000 --> 00:21:24,000
当然只是 Fix 一个 Type

521
00:21:24,000 --> 00:21:25,000
但是觉得很骄傲

522
00:21:26,000 --> 00:21:27,000
这也是贡献

523
00:21:27,000 --> 00:21:28,000
没关系

524
00:21:29,000 --> 00:21:31,000
在 GitHub 上面

525
00:21:31,000 --> 00:21:32,000
不管你的贡献多少

526
00:21:32,000 --> 00:21:34,000
哪怕只是改个标准符号

527
00:21:34,000 --> 00:21:35,000
你也会出现在那个

528
00:21:35,000 --> 00:21:36,000
你的 Contributions 里面

529
00:21:36,000 --> 00:21:38,000
也会出现那个

530
00:21:38,000 --> 00:21:39,000
有什么 Popular

531
00:21:39,000 --> 00:21:40,000
而且是一个很重要的 Contribution

532
00:21:40,000 --> 00:21:42,000
叫做 Inproven Documentation

533
00:21:43,000 --> 00:21:45,000
这个多重要的一件事

534
00:21:45,000 --> 00:21:47,000
你知道那个 React Native

535
00:21:47,000 --> 00:21:49,000
它的那个 Management

536
00:21:49,000 --> 00:21:49,000
我不知道 React

537
00:21:49,000 --> 00:21:51,000
它本身是怎么那个

538
00:21:53,000 --> 00:21:55,000
Pool Request 怎么 Manage

539
00:21:55,000 --> 00:21:58,000
但是它这个是一个 Squash Merge

540
00:21:58,000 --> 00:22:00,000
所以它几个人那个 Merge Request

541
00:22:00,000 --> 00:22:01,000
会被 Squash 在一起

542
00:22:01,000 --> 00:22:03,000
然后以一个

543
00:22:04,000 --> 00:22:06,000
就是他们 Main Contributor 身份

544
00:22:06,000 --> 00:22:07,000
Push 出来

545
00:22:07,000 --> 00:22:08,000
所以说

546
00:22:08,000 --> 00:22:10,000
我其实得不到 Credit

547
00:22:10,000 --> 00:22:12,000
虽然我也不 Deserve

548
00:22:12,000 --> 00:22:13,000
虽然我也不 Deserve

549
00:22:13,000 --> 00:22:13,000
Something

550
00:22:13,000 --> 00:22:15,000
就摸摸头

551
00:22:15,000 --> 00:22:17,000
那可是这样每一个 Merge

552
00:22:17,000 --> 00:22:20,000
每个 Commit 不是会非常大吗

553
00:22:20,000 --> 00:22:20,000
这样

554
00:22:21,000 --> 00:22:22,000
它们有什么好处

555
00:22:22,000 --> 00:22:22,000
应该是

556
00:22:22,000 --> 00:22:23,000
就是说

557
00:22:24,000 --> 00:22:24,000
我没有

558
00:22:24,000 --> 00:22:26,000
它现在这个整个

559
00:22:26,000 --> 00:22:27,000
整个这个 Report 上

560
00:22:27,000 --> 00:22:29,000
只有 38 个 Commit

561
00:22:29,000 --> 00:22:30,000
然后全都是说

562
00:22:31,000 --> 00:22:31,000
今天的跟

563
00:22:31,000 --> 00:22:33,000
就是 February 16

564
00:22:33,000 --> 00:22:36,000
February 17 的更新

565
00:22:36,000 --> 00:22:36,000
然后

566
00:22:39,000 --> 00:22:40,000
可能它

567
00:22:40,000 --> 00:22:41,000
可能它就是

568
00:22:41,000 --> 00:22:42,000
把一些小的东西 Merge 出来

569
00:22:42,000 --> 00:22:43,000
或者是

570
00:22:44,000 --> 00:22:46,000
它并没有接受很大的

571
00:22:46,000 --> 00:22:47,000
Pool Request

572
00:22:47,000 --> 00:22:48,000
我并不是很清楚

573
00:22:48,000 --> 00:22:49,000
但是这是它的

574
00:22:49,000 --> 00:22:49,000
它应该

575
00:22:49,000 --> 00:22:51,000
它应该没有直接在那个

576
00:22:51,000 --> 00:22:52,000
GitHub 上面做那些什么

577
00:22:52,000 --> 00:22:53,000
Code Refuel 那些吧

578
00:22:53,000 --> 00:22:55,000
它应该是在线下做

579
00:22:55,000 --> 00:22:57,000
然后就 GitHub 只是用来同步用的吧

580
00:22:57,000 --> 00:23:00,000
我看很多公司发布出来产品都是这样子

581
00:23:00,000 --> 00:23:01,000
它们内部可能

582
00:23:01,000 --> 00:23:02,000
比如说是用那个 Fabricator

583
00:23:03,000 --> 00:23:05,000
Facebook 是用 Fabricator

584
00:23:05,000 --> 00:23:06,000
这是我知道的

585
00:23:06,000 --> 00:23:07,000
但是

586
00:23:07,000 --> 00:23:09,000
我不知道就是像这种第三方

587
00:23:09,000 --> 00:23:10,000
就我们 Pool Request

588
00:23:10,000 --> 00:23:11,000
因为

589
00:23:11,000 --> 00:23:13,000
因为 Facebook 那 Fabricator

590
00:23:13,000 --> 00:23:14,000
并不是

591
00:23:14,000 --> 00:23:15,000
对外开放嘛

592
00:23:15,000 --> 00:23:15,000
所以我

593
00:23:15,000 --> 00:23:17,000
我如果说我做一个

594
00:23:17,000 --> 00:23:19,000
那个 Open Source Contributor

595
00:23:19,000 --> 00:23:20,000
我是不能够用

596
00:23:20,000 --> 00:23:23,000
Facebook 那个 Fabricator 来做

597
00:23:24,000 --> 00:23:24,000
做 Code Refuel

598
00:23:24,000 --> 00:23:26,000
所以应该这个 Code Refuel 还是在

599
00:23:27,000 --> 00:23:28,000
GitHub 上完成的

600
00:23:28,000 --> 00:23:30,000
所以那个 React Native 他们在

601
00:23:30,000 --> 00:23:31,000
GitHub 的 Report

602
00:23:31,000 --> 00:23:32,000
他们是有人在

603
00:23:32,000 --> 00:23:33,000
在什么

604
00:23:33,000 --> 00:23:34,000
就是你们所有的像

605
00:23:34,000 --> 00:23:35,000
Pool Request

606
00:23:35,000 --> 00:23:36,000
还有包括 Essue 都在那边做吗

607
00:23:36,000 --> 00:23:37,000
还是说

608
00:23:37,000 --> 00:23:39,000
那只是一个中转的地方而已

609
00:23:39,000 --> 00:23:41,000
它是在其他地方做那些

610
00:23:41,000 --> 00:23:43,000
代码审核的东西

611
00:23:43,000 --> 00:23:44,000
这两者并不冲突啊

612
00:23:44,000 --> 00:23:46,000
两者都可以用

613
00:23:47,000 --> 00:23:48,000
像我们公司的话

614
00:23:48,000 --> 00:23:49,000
也是这样一个结构

615
00:23:49,000 --> 00:23:50,000
就是我们有

616
00:23:50,000 --> 00:23:51,000
我们用 GitHub 来

617
00:23:51,000 --> 00:23:52,000
Manage 我们的 Report

618
00:23:52,000 --> 00:23:55,000
然后用 Fabricator 来做那个 Code Refuel

619
00:23:55,000 --> 00:23:56,000
Fabricator 有很好的

620
00:23:56,000 --> 00:23:59,000
跟 GitHub 相连接的那个

621
00:23:59,000 --> 00:24:01,000
就是 Building Plugin

622
00:24:01,000 --> 00:24:02,000
所以

623
00:24:02,000 --> 00:24:03,000
你可以

624
00:24:03,000 --> 00:24:04,000
所以很自然的就可以用

625
00:24:05,000 --> 00:24:06,000
两者同时用

626
00:24:08,000 --> 00:24:08,000
但是

627
00:24:08,000 --> 00:24:10,000
但是你不可能就是说什么一个 Code Refuel

628
00:24:10,000 --> 00:24:12,000
同时在 GitHub 上 Review

629
00:24:12,000 --> 00:24:14,000
也在 Fabricator 上 Review

630
00:24:14,000 --> 00:24:15,000
就是做不到的

631
00:24:15,000 --> 00:24:15,000
对

632
00:24:15,000 --> 00:24:18,000
我就是在想它为什么会出现

633
00:24:18,000 --> 00:24:18,000
你说

634
00:24:18,000 --> 00:24:20,000
如果它是在 GitHub 上面做的话

635
00:24:20,000 --> 00:24:21,000
为什么会出现你这种状况

636
00:24:21,000 --> 00:24:22,000
会把多个

637
00:24:22,000 --> 00:24:23,000
这个 Commit

638
00:24:23,000 --> 00:24:26,000
就整合到一起再放上去

639
00:24:26,000 --> 00:24:27,000
就挺奇怪

640
00:24:28,000 --> 00:24:29,000
That's beyond me

641
00:24:29,000 --> 00:24:30,000
You know what I mean

642
00:24:30,000 --> 00:24:31,000
Yeah

643
00:24:31,000 --> 00:24:32,000
对

644
00:24:32,000 --> 00:24:35,000
这已经算是他们内部的工作流程问题了

645
00:24:36,000 --> 00:24:38,000
我们这些局外人应该是猜不到的

646
00:24:39,000 --> 00:24:40,000
OK

647
00:24:41,000 --> 00:24:42,000
那个威老

648
00:24:42,000 --> 00:24:44,000
那你最近是在忙乎什么

649
00:24:46,000 --> 00:24:48,000
Well 最近熬夜熬得很多

650
00:24:48,000 --> 00:24:50,000
因为我们最近有一个新产品要发布

651
00:24:50,000 --> 00:24:51,000
所以说

652
00:24:52,000 --> 00:24:52,000
然后

653
00:24:53,000 --> 00:24:54,000
随着这个新产品

654
00:24:54,000 --> 00:24:55,000
我们整个

655
00:24:55,000 --> 00:24:58,000
前端终于是可以说是

656
00:24:59,000 --> 00:25:01,000
超过百分之 60

657
00:25:01,000 --> 00:25:03,000
是从 Backbone

658
00:25:03,000 --> 00:25:05,000
转移到了 React

659
00:25:05,000 --> 00:25:06,000
那个非常开心

660
00:25:06,000 --> 00:25:10,000
但是也是花了我非常长的时间

661
00:25:10,000 --> 00:25:11,000
我们公司整个

662
00:25:12,000 --> 00:25:15,000
这个流程到现在从开始到现在

663
00:25:15,000 --> 00:25:17,000
大概是 6 个月的时间

664
00:25:18,000 --> 00:25:20,000
所以没有以周围计算单位

665
00:25:22,000 --> 00:25:24,000
什么跑得还不够快

666
00:25:25,000 --> 00:25:26,000
至少不够勇

667
00:25:26,000 --> 00:25:27,000
至少不够勇

668
00:25:28,000 --> 00:25:29,000
所以先介绍一下

669
00:25:29,000 --> 00:25:31,000
就是你们整个

670
00:25:31,000 --> 00:25:34,000
就是一个直观的认识

671
00:25:34,000 --> 00:25:35,000
多大的一个项目

672
00:25:35,000 --> 00:25:37,000
比如说你们前端开发团队有多少人

673
00:25:37,000 --> 00:25:39,000
我们只有三个人

674
00:25:39,000 --> 00:25:40,000
做一个小团队

675
00:25:40,000 --> 00:25:41,000
就是说其实我们

676
00:25:42,000 --> 00:25:43,000
我觉得人还算

677
00:25:43,000 --> 00:25:45,000
就是够用

678
00:25:45,000 --> 00:25:46,000
三个人还够用

679
00:25:46,000 --> 00:25:47,000
关键是说

680
00:25:47,000 --> 00:25:50,000
从一个新的技术出来

681
00:25:50,000 --> 00:25:53,000
到你能够自由的应用它

682
00:25:53,000 --> 00:25:56,000
全面的理解它的好坏

683
00:25:56,000 --> 00:25:58,000
知道 best practice 是怎么样的

684
00:25:58,000 --> 00:26:01,000
这个流程并不是人多人少

685
00:26:01,000 --> 00:26:02,000
能够解决的问题

686
00:26:02,000 --> 00:26:03,000
而是一个

687
00:26:03,000 --> 00:26:05,000
智商高低能够解决的问题

688
00:26:07,000 --> 00:26:08,000
对没错

689
00:26:08,000 --> 00:26:09,000
智商高低

690
00:26:09,000 --> 00:26:10,000
可以

691
00:26:10,000 --> 00:26:11,000
boycott 智商那个思路

692
00:26:13,000 --> 00:26:14,000
对

693
00:26:14,000 --> 00:26:15,000
这个所以

694
00:26:15,000 --> 00:26:17,000
所以我觉得并不是说

695
00:26:17,000 --> 00:26:18,000
我们就特别的慢

696
00:26:18,000 --> 00:26:20,000
或者是说人不够用

697
00:26:20,000 --> 00:26:21,000
关键是说

698
00:26:21,000 --> 00:26:24,000
React 还是从它的思维方式上

699
00:26:24,000 --> 00:26:27,000
跟之前的产品有非常大的不同

700
00:26:27,000 --> 00:26:27,000
然后

701
00:26:28,000 --> 00:26:30,000
在大量的实践的过程中

702
00:26:30,000 --> 00:26:31,000
我们也是逐渐的

703
00:26:31,000 --> 00:26:32,000
逐渐的明白

704
00:26:32,000 --> 00:26:34,000
到底这个不同是怎么样的

705
00:26:36,000 --> 00:26:37,000
我觉得大部分的时间

706
00:26:37,000 --> 00:26:38,000
花在那个上面

707
00:26:38,000 --> 00:26:39,000
所以如果我看

708
00:26:39,000 --> 00:26:40,000
所以你们会彼此交流吗

709
00:26:40,000 --> 00:26:42,000
就是我理解这一块

710
00:26:42,000 --> 00:26:45,000
然后可以给你讲一讲之类的

711
00:26:45,000 --> 00:26:47,000
因为我觉得就是一个

712
00:26:47,000 --> 00:26:50,000
一个团队可能超过四个人的时候

713
00:26:50,000 --> 00:26:52,000
交流成本就非常

714
00:26:53,000 --> 00:26:54,000
非常可观了

715
00:26:55,000 --> 00:26:56,000
可能四个人的时候

716
00:26:56,000 --> 00:26:58,000
还可以大家一起坐下来

717
00:26:58,000 --> 00:27:00,000
就直接凑在电脑前面

718
00:27:00,000 --> 00:27:02,000
讲自己最新鲜的发现

719
00:27:02,000 --> 00:27:04,000
但是再多一个人

720
00:27:04,000 --> 00:27:06,000
就可以非常明显的感觉到空间不够用

721
00:27:07,000 --> 00:27:08,000
然后就可能会需要

722
00:27:09,000 --> 00:27:10,000
需要去开个会啊什么的

723
00:27:10,000 --> 00:27:11,000
然后这个这个

724
00:27:11,000 --> 00:27:13,000
然后然后你会觉得五个人里面

725
00:27:13,000 --> 00:27:15,000
当人数大于四的时候

726
00:27:15,000 --> 00:27:18,000
你就会意识到这个每个人的

727
00:27:18,000 --> 00:27:20,000
进展速度是不一样的

728
00:27:20,000 --> 00:27:23,000
然后会有一种很强烈的

729
00:27:25,000 --> 00:27:26,000
某 A

730
00:27:26,000 --> 00:27:29,000
拖了某 B 的后腿的这种感觉

731
00:27:30,000 --> 00:27:32,000
这叫什么沟通复杂度

732
00:27:32,000 --> 00:27:35,000
所以什么 ON 的平方的增长吧

733
00:27:36,000 --> 00:27:38,000
应该是指数级增长吧

734
00:27:38,000 --> 00:27:40,000
可能我觉得指数级就不只是平方了

735
00:27:40,000 --> 00:27:41,000
真的 ok

736
00:27:43,000 --> 00:27:46,000
我现在人乐神话里面好像对这个有一个

737
00:27:46,000 --> 00:27:47,000
描述吧

738
00:27:47,000 --> 00:27:50,000
但具体是怎么样的公式我也忘了

739
00:27:50,000 --> 00:27:53,000
你竟然还看人乐神话这种产品经理本

740
00:27:53,000 --> 00:27:55,000
工程经理才看的东西

741
00:27:55,000 --> 00:27:56,000
what

742
00:27:56,000 --> 00:27:57,000
你哦好吧

743
00:27:57,000 --> 00:27:58,000
你本科

744
00:27:58,000 --> 00:27:59,000
因为本科的时候

745
00:27:59,000 --> 00:28:02,000
就你总要学读一读相关的书籍吧

746
00:28:03,000 --> 00:28:04,000
好暴露了

747
00:28:04,000 --> 00:28:04,000
这是我

748
00:28:05,000 --> 00:28:06,000
为了你有看过

749
00:28:07,000 --> 00:28:08,000
人乐神话没有赢的

750
00:28:08,000 --> 00:28:09,000
啊天呐

751
00:28:09,000 --> 00:28:12,000
快找来个垫背的太好了

752
00:28:12,000 --> 00:28:13,000
你们刚刚在说什么

753
00:28:13,000 --> 00:28:14,000
我怎么都听不懂啊

754
00:28:15,000 --> 00:28:16,000
就是那个叫我懂的

755
00:28:16,000 --> 00:28:17,000
我懂的

756
00:28:18,000 --> 00:28:20,000
我也没有读过那本书了

757
00:28:21,000 --> 00:28:22,000
但是听过名字

758
00:28:23,000 --> 00:28:24,000
我知道我知道

759
00:28:24,000 --> 00:28:26,000
一开始我以为是本的那个 sci-fi 书呢

760
00:28:26,000 --> 00:28:27,000
honestly

761
00:28:28,000 --> 00:28:28,000
嗯

762
00:28:28,000 --> 00:28:30,000
看名字很像是吧

763
00:28:30,000 --> 00:28:31,000
对啊

764
00:28:32,000 --> 00:28:33,000
对

765
00:28:33,000 --> 00:28:33,000
ok

766
00:28:33,000 --> 00:28:35,000
就是直接回答那个

767
00:28:35,000 --> 00:28:36,000
吴涛的内容

768
00:28:36,000 --> 00:28:38,000
其实是一个非常好的团队建设的问题

769
00:28:38,000 --> 00:28:42,000
啊三个人是一个就沟通成本还比较小一点

770
00:28:42,000 --> 00:28:42,000
但是

771
00:28:42,000 --> 00:28:43,000
啊

772
00:28:43,000 --> 00:28:45,000
就是我们不希望花太多的时间

773
00:28:45,000 --> 00:28:47,000
在开会和沟通上

774
00:28:47,000 --> 00:28:51,000
因为啊总体而言还是希望能够花更多时间在写代码上嘛

775
00:28:51,000 --> 00:28:55,000
所以我们的设置主要是有啊有几项

776
00:28:55,000 --> 00:28:57,000
就是 process 来帮助吧

777
00:28:57,000 --> 00:29:00,000
首先是我们所有的 commute 都会 code review

778
00:29:01,000 --> 00:29:07,000
code review 的确会减慢那个从 commute 到那个 production 时间

779
00:29:07,000 --> 00:29:10,000
但对 code quality 是非常有帮助的

780
00:29:10,000 --> 00:29:14,000
同时也是一个很好的经验交流的一个啊

781
00:29:15,000 --> 00:29:16,000
一个媒介吧

782
00:29:16,000 --> 00:29:17,000
因为在 code review 的时候

783
00:29:17,000 --> 00:29:20,000
如果你看不懂其他人在写什么

784
00:29:20,000 --> 00:29:22,000
那往往就是一个很好的啊

785
00:29:22,000 --> 00:29:25,000
契机来互相学习说对方在想什么

786
00:29:26,000 --> 00:29:29,000
然后你也知道这个非常经常的我们会有

787
00:29:31,000 --> 00:29:34,000
wtf moment 就是看别人代码的时候对

788
00:29:34,000 --> 00:29:36,000
我觉得我的 code review 特别有用

789
00:29:36,000 --> 00:29:39,000
就是有时候就不光你是 review 别人也好

790
00:29:39,000 --> 00:29:40,000
还是就是别人 review 你也好

791
00:29:40,000 --> 00:29:43,000
可能别人 review 你的就对方是一个大牛的话

792
00:29:43,000 --> 00:29:45,000
给你的那个提升就更大

793
00:29:45,000 --> 00:29:48,000
之前我不是在写一个小的那个开源项目吗

794
00:29:49,000 --> 00:29:49,000
然后来

795
00:29:50,000 --> 00:29:53,000
那个你们知道那个 memcache 那个的作者吗

796
00:29:55,000 --> 00:29:55,000
不知道

797
00:29:55,000 --> 00:30:00,000
叫 bratz 他现在在写 code 的主要开发者之一

798
00:30:00,000 --> 00:30:02,000
然后他在那他也在用那个工具

799
00:30:02,000 --> 00:30:04,000
然后他就他就给我就我提交代码之后

800
00:30:04,000 --> 00:30:05,000
要 merge 进去嘛

801
00:30:05,000 --> 00:30:07,000
然后他就给我指点了一下

802
00:30:07,000 --> 00:30:10,000
顿时一种茅塞顿开的感觉超爽

803
00:30:11,000 --> 00:30:14,000
我靠这是叫什么令狐冲遇到了风轻芽

804
00:30:14,000 --> 00:30:16,000
对对对就是那种感觉

805
00:30:16,000 --> 00:30:17,000
你就是抬举他

806
00:30:17,000 --> 00:30:20,000
你这是对你这是拍人马屁啊

807
00:30:20,000 --> 00:30:21,000
舞蹈就不行啊你

808
00:30:23,000 --> 00:30:24,000
意图太明显了

809
00:30:26,000 --> 00:30:27,000
接着说

810
00:30:29,000 --> 00:30:30,000
code review 非常有用

811
00:30:30,000 --> 00:30:33,000
然后也像刚刚 review 说的

812
00:30:33,000 --> 00:30:33,000
特别是说

813
00:30:33,000 --> 00:30:36,000
如果你啊有其他可以学习对象的话

814
00:30:36,000 --> 00:30:38,000
就更有更加有帮助了

815
00:30:40,000 --> 00:30:42,000
而且我们也有啊

816
00:30:42,000 --> 00:30:45,000
每两周有一个 tiktok

817
00:30:45,000 --> 00:30:47,000
就是我们团队内部人会给一个 tiktok

818
00:30:47,000 --> 00:30:49,000
不管你是 backend infrastructure

819
00:30:49,000 --> 00:30:51,000
或者是谁前端

820
00:30:51,000 --> 00:30:52,000
都可以啊

821
00:30:53,000 --> 00:30:55,000
来分享一下你最近用的一些工具

822
00:30:55,000 --> 00:30:57,000
用的一些啊学到了新的东西

823
00:30:57,000 --> 00:31:01,000
这样的话我们也希望能够促进整个公司范围的

824
00:31:01,000 --> 00:31:01,000
整个公司范围

825
00:31:01,000 --> 00:31:02,000
我们公司很小

826
00:31:02,000 --> 00:31:03,000
所以说

827
00:31:03,000 --> 00:31:03,000
that's possible

828
00:31:03,000 --> 00:31:04,000
啊

829
00:31:04,000 --> 00:31:05,000
我们公司

830
00:31:05,000 --> 00:31:08,000
我的上一家公司也会有这样一个 event

831
00:31:08,000 --> 00:31:10,000
然后那个 event 叫做 tech bite

832
00:31:10,000 --> 00:31:13,000
就是你在你在做 talk 的时候

833
00:31:13,000 --> 00:31:15,000
别的所有其他人都在吃披萨

834
00:31:17,000 --> 00:31:18,000
我们也是这样子

835
00:31:18,000 --> 00:31:18,000
我们也是这样子

836
00:31:18,000 --> 00:31:20,000
是中餐时间

837
00:31:21,000 --> 00:31:23,000
就是每次有个导弯蛋会会

838
00:31:23,000 --> 00:31:25,000
望着别人吃饭

839
00:31:25,000 --> 00:31:26,000
然后自己机场顾着说

840
00:31:26,000 --> 00:31:27,000
还有一点没错没错

841
00:31:27,000 --> 00:31:28,000
就把这个讲

842
00:31:29,000 --> 00:31:31,000
只有吃完了才可以吃点别人

843
00:31:31,000 --> 00:31:33,000
啊不只有讲完才可以吃点别人的食物

844
00:31:34,000 --> 00:31:35,000
不讲完不许吃饭

845
00:31:37,000 --> 00:31:39,000
对之前之前我在知乎的时候

846
00:31:39,000 --> 00:31:42,000
我们也就也算是坚持过一段时间

847
00:31:42,000 --> 00:31:45,000
每周有一次这种开发团队的

848
00:31:45,000 --> 00:31:47,000
有一个人会讲一件有的没的吧

849
00:31:47,000 --> 00:31:49,000
然后这样就互相学习一下

850
00:31:49,000 --> 00:31:51,000
就是我就是在吃东西吗

851
00:31:52,000 --> 00:31:54,000
好像没有我们是在

852
00:31:54,000 --> 00:31:55,000
有没有东西去了吗

853
00:31:55,000 --> 00:31:56,000
不是在饭点上

854
00:31:59,000 --> 00:32:00,000
对我觉得整个这种模式

855
00:32:00,000 --> 00:32:01,000
我觉得还是挺好的

856
00:32:01,000 --> 00:32:03,000
就是整个对团的建设

857
00:32:03,000 --> 00:32:04,000
互相学习促进

858
00:32:04,000 --> 00:32:06,000
就还是挺挺有帮助的一件事情吧

859
00:32:07,000 --> 00:32:09,000
所以 vlog 有在这样一个 event 上面

860
00:32:09,000 --> 00:32:11,000
讲 react 吗还是

861
00:32:11,000 --> 00:32:15,000
我也在一个更大型的 event 上讲 react

862
00:32:15,000 --> 00:32:18,000
我有在这个 event 上讲过了三次 react

863
00:32:18,000 --> 00:32:18,000
就是

864
00:32:19,000 --> 00:32:21,000
六个月之前

865
00:32:21,000 --> 00:32:23,000
不是要得到巴硬吗

866
00:32:23,000 --> 00:32:25,000
不是要给大家说这个

867
00:32:25,000 --> 00:32:27,000
我们为什么要走这条路

868
00:32:27,000 --> 00:32:28,000
为什么要做

869
00:32:29,000 --> 00:32:30,000
这个 migration 吗

870
00:32:30,000 --> 00:32:31,000
在那个时候

871
00:32:31,000 --> 00:32:32,000
internally 做过一次

872
00:32:33,000 --> 00:32:34,000
就当时分析了

873
00:32:34,000 --> 00:32:36,000
人称洗脑会的时候是不是

874
00:32:37,000 --> 00:32:38,000
这个不需要洗了

875
00:32:38,000 --> 00:32:40,000
因为你知道事实摆在面前非常清楚的嘛

876
00:32:40,000 --> 00:32:41,000
特别是像我这样

877
00:32:41,000 --> 00:32:42,000
你知道

878
00:32:42,000 --> 00:32:43,000
anyways

879
00:32:46,000 --> 00:32:49,000
看起来就觉得很 trustworthy

880
00:32:51,000 --> 00:32:52,000
都错误了

881
00:32:54,000 --> 00:32:55,000
所以

882
00:32:55,000 --> 00:32:57,000
所以当时我们有分析

883
00:32:57,000 --> 00:32:58,000
我们也是这么说的

884
00:33:06,000 --> 00:33:07,000
当时有说一些关于

885
00:33:08,000 --> 00:33:09,000
有说一些 backbone

886
00:33:10,000 --> 00:33:10,000
坏话了

887
00:33:10,000 --> 00:33:12,000
就是说一些 pain points

888
00:33:12,000 --> 00:33:13,000
然后总结出来

889
00:33:14,000 --> 00:33:16,000
关于 performance

890
00:33:16,000 --> 00:33:17,000
关于 maintainability

891
00:33:17,000 --> 00:33:18,000
这些问题

892
00:33:20,000 --> 00:33:21,000
然后就是说

893
00:33:21,000 --> 00:33:23,000
angular 或者是 react

894
00:33:23,000 --> 00:33:25,000
怎么样能够帮助解决这些问题

895
00:33:26,000 --> 00:33:27,000
所以六个月之前有

896
00:33:27,000 --> 00:33:29,000
给一个那样的 talk

897
00:33:29,000 --> 00:33:31,000
这六个月我们就 set off

898
00:33:31,000 --> 00:33:32,000
然后

899
00:33:34,000 --> 00:33:35,000
写了很多 react code

900
00:33:35,000 --> 00:33:36,000
这六个月回来之后

901
00:33:36,000 --> 00:33:39,000
我又把之前那个 slides 给翻了出来

902
00:33:39,000 --> 00:33:41,000
然后看这些问题是不是还存在

903
00:33:41,000 --> 00:33:42,000
然后

904
00:33:43,000 --> 00:33:44,000
想了一想说

905
00:33:44,000 --> 00:33:46,000
我们到底是怎么样从 react

906
00:33:46,000 --> 00:33:48,000
migrate 到

907
00:33:49,000 --> 00:33:49,000
sorry

908
00:33:49,000 --> 00:33:52,000
从 backbone migrate 到 react 这个过程

909
00:33:53,000 --> 00:33:57,000
给我们上一周 host 了一个 meetup

910
00:33:57,000 --> 00:33:57,000
就是

911
00:33:57,000 --> 00:33:59,000
举行了一个那个

912
00:33:59,000 --> 00:34:01,000
请了一些 backbone

913
00:34:01,000 --> 00:34:02,000
因为其实这边很多

914
00:34:02,000 --> 00:34:04,000
我不知道国内是不是很精彩

915
00:34:04,000 --> 00:34:06,000
也就是这边有很多 meetup group

916
00:34:06,000 --> 00:34:08,000
每一次就是每一种

917
00:34:08,000 --> 00:34:10,000
技术都基本上有自己的 meetup group

918
00:34:10,000 --> 00:34:14,000
然后他们每两三个星期就会有一个

919
00:34:15,000 --> 00:34:16,000
你知道

920
00:34:16,000 --> 00:34:18,000
meetup 大家一起

921
00:34:18,000 --> 00:34:20,000
出来喝酒吃吃东西

922
00:34:20,000 --> 00:34:22,000
然后会有人给一些 speech

923
00:34:23,000 --> 00:34:25,000
说就是也有了国内的话

924
00:34:25,000 --> 00:34:28,000
研讨会吧叫做什么技术研讨会对

925
00:34:29,000 --> 00:34:32,000
但是国内好像没有一个像 meetup 这样的网站

926
00:34:32,000 --> 00:34:33,000
在组织这种事情

927
00:34:33,000 --> 00:34:35,000
有小范围的有人在做

928
00:34:35,000 --> 00:34:37,000
我记得最活跃的应该是

929
00:34:37,000 --> 00:34:39,000
现在是之前就 ruby 社区

930
00:34:39,000 --> 00:34:40,000
然后现在是

931
00:34:40,000 --> 00:34:42,000
我看 goal line 社区好像还比较火

932
00:34:43,000 --> 00:34:44,000
我的意思是就是

933
00:34:44,000 --> 00:34:46,000
因为 meetup 有 meetup.com

934
00:34:46,000 --> 00:34:47,000
是这个域名吗

935
00:34:47,000 --> 00:34:50,000
有一个网站专门在

936
00:34:50,000 --> 00:34:51,000
专门会给你发邀请

937
00:34:51,000 --> 00:34:53,000
然后也是跨主题的

938
00:34:53,000 --> 00:34:54,000
而不是一个

939
00:34:54,000 --> 00:34:57,000
域域一个专门的 user group

940
00:34:57,000 --> 00:35:00,000
这样就一个主题来谈

941
00:35:01,000 --> 00:35:02,000
好如果国内来

942
00:35:02,000 --> 00:35:04,000
哪位听众

943
00:35:04,000 --> 00:35:06,000
想要抄这个 id 的话

944
00:35:06,000 --> 00:35:08,000
不要忘记给我们红包哦

945
00:35:11,000 --> 00:35:13,000
v 创新欢迎 v 创新

946
00:35:13,000 --> 00:35:15,000
等一下这好像也不是你们想出来的

947
00:35:15,000 --> 00:35:16,000
对不对

948
00:35:16,000 --> 00:35:18,000
你们为什么要接受这个 quit

949
00:35:18,000 --> 00:35:20,000
这个信息就是钱的

950
00:35:20,000 --> 00:35:22,000
我们是什么我们是皮体

951
00:35:22,000 --> 00:35:22,000
不是不是

952
00:35:26,000 --> 00:35:28,000
前科我们是前科

953
00:35:28,000 --> 00:35:28,000
明白了

954
00:35:28,000 --> 00:35:29,000
中间人

955
00:35:29,000 --> 00:35:30,000
你赶快回国做一个

956
00:35:30,000 --> 00:35:31,000
不过现在也是

957
00:35:31,000 --> 00:35:32,000
反正

958
00:35:32,000 --> 00:35:34,000
什么说各种翻墙也是越来越难了

959
00:35:34,000 --> 00:35:35,000
这种

960
00:35:35,000 --> 00:35:38,000
我就怕这个最后被做成什么约炮

961
00:35:39,000 --> 00:35:41,000
程序员之间能约出个啥

962
00:35:43,000 --> 00:35:45,000
你别小看我们程序

963
00:35:45,000 --> 00:35:46,000
只能狡击了

964
00:35:50,000 --> 00:35:52,000
所以这个为了我问一下

965
00:35:52,000 --> 00:35:53,000
就说其实你们是在

966
00:35:53,000 --> 00:35:55,000
半年前已经开始在

967
00:35:55,000 --> 00:35:57,000
着手就是尝试 react 的

968
00:35:58,000 --> 00:35:59,000
技术了对吧

969
00:35:59,000 --> 00:36:00,000
但是你们什么时候

970
00:36:01,000 --> 00:36:02,000
就是说一般来讲

971
00:36:02,000 --> 00:36:03,000
你们要选择一种

972
00:36:03,000 --> 00:36:06,000
像这种比较大型的改写的话

973
00:36:06,000 --> 00:36:08,000
你们怎么去花多少时间去判断他

974
00:36:08,000 --> 00:36:10,000
然后在什么时候决定要

975
00:36:10,000 --> 00:36:11,000
觉得说

976
00:36:11,000 --> 00:36:13,000
哎假设选定的这个方向走下去的话

977
00:36:13,000 --> 00:36:15,000
怎么去做这个

978
00:36:15,000 --> 00:36:16,000
这个步骤呢

979
00:36:17,000 --> 00:36:19,000
评估这件事

980
00:36:19,000 --> 00:36:19,000
well

981
00:36:20,000 --> 00:36:21,000
首先我觉得非常幸运的是

982
00:36:21,000 --> 00:36:24,000
我我我身处的环境是一个比较

983
00:36:25,000 --> 00:36:27,000
比较灵活的环境

984
00:36:27,000 --> 00:36:28,000
所以想要

985
00:36:28,000 --> 00:36:29,000
想要做出这样的

986
00:36:29,000 --> 00:36:31,000
就比较重大的 architect 的改变

987
00:36:31,000 --> 00:36:33,000
其实并不是一个非常难的事情

988
00:36:35,000 --> 00:36:36,000
在这一次的改变实际上

989
00:36:37,000 --> 00:36:38,000
对于我来说

990
00:36:38,000 --> 00:36:39,000
现在回头看过来

991
00:36:39,000 --> 00:36:41,000
也是一个非常顺理成章

992
00:36:42,000 --> 00:36:44,000
顺水推舟的一个过程

993
00:36:44,000 --> 00:36:44,000
因为

994
00:36:45,000 --> 00:36:46,000
backbone 已经

995
00:36:46,000 --> 00:36:48,000
我们已经用它也非常久了

996
00:36:48,000 --> 00:36:50,000
所以说其实团队内部对于

997
00:36:51,000 --> 00:36:55,000
他的缺点是非常非常清楚的

998
00:36:55,000 --> 00:36:57,000
我有我当时的那个 pain point

999
00:36:57,000 --> 00:36:58,000
有列出几项

1000
00:36:58,000 --> 00:36:59,000
可以告诉你们一下

1001
00:37:00,000 --> 00:37:01,000
还有听众

1002
00:37:02,000 --> 00:37:04,000
首先我们的那个 performance 并不好

1003
00:37:04,000 --> 00:37:06,000
我们的 rendering performance 并不好

1004
00:37:06,000 --> 00:37:08,000
因为有非常多的

1005
00:37:08,000 --> 00:37:09,000
就手动的

1006
00:37:09,000 --> 00:37:11,000
你知道那个 dom manipulation

1007
00:37:12,000 --> 00:37:14,000
自己做其实效率满低下的

1008
00:37:14,000 --> 00:37:15,000
然后

1009
00:37:16,000 --> 00:37:18,000
很多时候这个 balance 就是多精细

1010
00:37:18,000 --> 00:37:20,000
你想要把 code 写得多精细

1011
00:37:20,000 --> 00:37:21,000
越精细的话

1012
00:37:22,000 --> 00:37:24,000
那个 performance 就会越好

1013
00:37:24,000 --> 00:37:29,000
但是写的精细就花的时间越长

1014
00:37:29,000 --> 00:37:30,000
对复杂度又提高嘛

1015
00:37:30,000 --> 00:37:32,000
所以我们当时我们的

1016
00:37:32,000 --> 00:37:35,000
这一点其实是在那个 react 之前

1017
00:37:35,000 --> 00:37:38,000
大部分的这种前端框架都有的问题吧

1018
00:37:38,000 --> 00:37:39,000
因为就直接操作动

1019
00:37:40,000 --> 00:37:41,000
没错没错这个

1020
00:37:42,000 --> 00:37:44,000
但是 react 还有一点就是

1021
00:37:44,000 --> 00:37:47,000
因为我们是一个用的那个 vanilla 的 virtual

1022
00:37:47,000 --> 00:37:49,000
就是没有用其他的 plugin

1023
00:37:49,000 --> 00:37:50,000
比方说

1024
00:37:51,000 --> 00:37:52,000
marriott

1025
00:37:52,000 --> 00:37:54,000
或者是说 lay backbone 的 amber

1026
00:37:54,000 --> 00:37:55,000
我们并没有采取这样

1027
00:37:56,000 --> 00:37:57,000
这样的大型的 framework

1028
00:37:58,000 --> 00:38:00,000
所以我们整个的系统并不是特别的

1029
00:38:00,000 --> 00:38:02,000
叫做 opinionated 吧

1030
00:38:02,000 --> 00:38:03,000
并不是特别的

1031
00:38:03,000 --> 00:38:04,000
或者是说

1032
00:38:04,000 --> 00:38:06,000
不是很规范

1033
00:38:06,000 --> 00:38:08,000
因为你完成一件事情

1034
00:38:08,000 --> 00:38:10,000
可能有多种写法

1035
00:38:10,000 --> 00:38:13,000
但是就是从 consistency 的角度来说的话

1036
00:38:13,000 --> 00:38:15,000
总是用一种写法是最好的

1037
00:38:16,000 --> 00:38:17,000
可是因为没有

1038
00:38:17,000 --> 00:38:18,000
没有任何的

1039
00:38:19,000 --> 00:38:21,000
enforcement 在这个上面

1040
00:38:21,000 --> 00:38:23,000
因为 backbone 本身它不 opinionated 嘛

1041
00:38:23,000 --> 00:38:24,000
所以

1042
00:38:25,000 --> 00:38:27,000
所以这一点上我们

1043
00:38:27,000 --> 00:38:28,000
做一个团队做的并不好

1044
00:38:28,000 --> 00:38:30,000
这点是大家都知道的

1045
00:38:32,000 --> 00:38:32,000
还有

1046
00:38:33,000 --> 00:38:34,000
还有就是

1047
00:38:35,000 --> 00:38:37,000
memory 上我们也非常非常非常糟糕

1048
00:38:37,000 --> 00:38:40,000
其实这个说实在的有点小惭愧

1049
00:38:40,000 --> 00:38:42,000
但是反正我智商低这也无所谓了

1050
00:38:45,000 --> 00:38:47,000
就 memory manager 不带上来的

1051
00:38:50,000 --> 00:38:50,000
因为

1052
00:38:50,000 --> 00:38:52,000
因为你那个很多时候就

1053
00:38:52,000 --> 00:38:54,000
忘记 release 一些东西嘛

1054
00:38:54,000 --> 00:38:56,000
忘记 release 你的 dom 的那个 hold

1055
00:38:56,000 --> 00:39:01,000
忘记那个 onbind 你的 event handler

1056
00:39:01,000 --> 00:39:03,000
这样的事情非常非常

1057
00:39:03,000 --> 00:39:04,000
就会 leak 吗

1058
00:39:06,000 --> 00:39:07,000
就非常多 leak

1059
00:39:07,000 --> 00:39:09,000
就非常的难看

1060
00:39:09,000 --> 00:39:11,000
也非常的心痛

1061
00:39:11,000 --> 00:39:12,000
看着很心痛

1062
00:39:12,000 --> 00:39:14,000
所以大概是在一个什么样的数量级上

1063
00:39:14,000 --> 00:39:17,000
就 leak 会 leak 到一个多严重的程度

1064
00:39:17,000 --> 00:39:17,000
对

1065
00:39:17,000 --> 00:39:20,000
你知道像我们像我们这种 predation 都是

1066
00:39:20,000 --> 00:39:22,000
就是这种小节都不去过问

1067
00:39:22,000 --> 00:39:23,000
你知道特别是

1068
00:39:23,000 --> 00:39:24,000
特别是像那种

1069
00:39:25,000 --> 00:39:26,000
当你 host 一个 meetup 的时候

1070
00:39:26,000 --> 00:39:28,000
你总是想要吸引人才的

1071
00:39:28,000 --> 00:39:28,000
是不是

1072
00:39:28,000 --> 00:39:30,000
你总最终还是想要招一些人来的

1073
00:39:30,000 --> 00:39:32,000
然后你把这些数字放出来

1074
00:39:32,000 --> 00:39:34,000
谁还想给你工作

1075
00:39:36,000 --> 00:39:38,000
但我们可以私下聊一下嘛对不对

1076
00:39:38,000 --> 00:39:38,000
对

1077
00:39:39,000 --> 00:39:40,000
悄悄告诉我们

1078
00:39:40,000 --> 00:39:41,000
小声的

1079
00:39:41,000 --> 00:39:42,000
你们一个 type 多少个 g

1080
00:39:45,000 --> 00:39:46,000
你这 loading question 呢

1081
00:39:46,000 --> 00:39:47,000
多少个 g 我靠

1082
00:39:49,000 --> 00:39:50,000
这样让我觉得有神奇

1083
00:39:50,000 --> 00:39:52,000
风扇能达到多少转弯

1084
00:39:52,000 --> 00:39:54,000
0.0. something

1085
00:39:54,000 --> 00:39:55,000
就说

1086
00:39:55,000 --> 00:39:56,000
还不到一个

1087
00:39:56,000 --> 00:39:57,000
真的还不错了

1088
00:39:57,000 --> 00:39:57,000
ok

1089
00:39:58,000 --> 00:39:59,000
那这个大家

1090
00:39:59,000 --> 00:40:00,000
至少不低嘛

1091
00:40:02,000 --> 00:40:03,000
我

1092
00:40:03,000 --> 00:40:04,000
总之呢

1093
00:40:04,000 --> 00:40:05,000
这个 memory management 的问题呢

1094
00:40:05,000 --> 00:40:06,000
再说

1095
00:40:07,000 --> 00:40:09,000
就是程序员自己要非常的规范

1096
00:40:09,000 --> 00:40:13,000
就这个那个之前的 iOS 的那个开发是类似

1097
00:40:13,000 --> 00:40:15,000
在没有那个 auto

1098
00:40:16,000 --> 00:40:17,000
auto release count

1099
00:40:17,000 --> 00:40:18,000
count

1100
00:40:19,000 --> 00:40:20,000
auto reference counting

1101
00:40:20,000 --> 00:40:21,000
yeah

1102
00:40:21,000 --> 00:40:22,000
没有那个之前

1103
00:40:23,000 --> 00:40:24,000
也有这样的问题嘛

1104
00:40:24,000 --> 00:40:25,000
就是如果你

1105
00:40:25,000 --> 00:40:27,000
如果你忘记 release 的话

1106
00:40:27,000 --> 00:40:27,000
也会有这样的问题

1107
00:40:28,000 --> 00:40:30,000
所以 backbone 在电脑上就是

1108
00:40:30,000 --> 00:40:31,000
没有任何件数

1109
00:40:31,000 --> 00:40:33,000
就是毫无件数的那种

1110
00:40:33,000 --> 00:40:34,000
所以我们 memory 很差

1111
00:40:38,000 --> 00:40:40,000
well anyways 就是在整个这个 meetup 上

1112
00:40:40,000 --> 00:40:40,000
我

1113
00:40:40,000 --> 00:40:41,000
我

1114
00:40:41,000 --> 00:40:41,000
就 share 了

1115
00:40:41,000 --> 00:40:43,000
我们可以继续过这个 pain point

1116
00:40:43,000 --> 00:40:44,000
我有六个 pain point

1117
00:40:44,000 --> 00:40:45,000
然后告诉了

1118
00:40:46,000 --> 00:40:47,000
这些 backbone developers

1119
00:40:48,000 --> 00:40:49,000
就是

1120
00:40:49,000 --> 00:40:51,000
that's quite some pain ass

1121
00:40:51,000 --> 00:40:52,000
exactly

1122
00:40:54,000 --> 00:40:55,000
not my language

1123
00:40:55,000 --> 00:40:56,000
ok

1124
00:40:56,000 --> 00:40:57,000
not my language

1125
00:40:57,000 --> 00:40:58,000
但是这个

1126
00:41:00,000 --> 00:41:02,000
但是大家都是很

1127
00:41:03,000 --> 00:41:05,000
就是 pain point 大家都是感同身受的吧

1128
00:41:05,000 --> 00:41:07,000
然后最终的目的这个 meetup

1129
00:41:07,000 --> 00:41:09,000
是告诉大家说

1130
00:41:09,000 --> 00:41:11,000
怎么样有可能就是

1131
00:41:11,000 --> 00:41:13,000
你今天就可以开始写 react

1132
00:41:13,000 --> 00:41:14,000
即使你有一个 backbone app

1133
00:41:15,000 --> 00:41:18,000
你也可以直接把那个 react 很容易的 drop in

1134
00:41:18,000 --> 00:41:19,000
你的 stack

1135
00:41:19,000 --> 00:41:20,000
然后开始写 react

1136
00:41:21,000 --> 00:41:23,000
就回到你刚刚说的这个

1137
00:41:23,000 --> 00:41:24,000
我们这个流程

1138
00:41:24,000 --> 00:41:25,000
因为

1139
00:41:25,000 --> 00:41:26,000
首先有这些 pain point

1140
00:41:26,000 --> 00:41:28,000
大家都很清楚这些 pain point

1141
00:41:28,000 --> 00:41:29,000
然后

1142
00:41:29,000 --> 00:41:31,000
大家都希望

1143
00:41:31,000 --> 00:41:33,000
做客户观能够越快越好

1144
00:41:33,000 --> 00:41:35,000
就是开发速度越快越好

1145
00:41:35,000 --> 00:41:36,000
对

1146
00:41:37,000 --> 00:41:37,000
所以说

1147
00:41:38,000 --> 00:41:40,000
这个需求是在那里的

1148
00:41:40,000 --> 00:41:42,000
然后这个实验也非常的简单

1149
00:41:42,000 --> 00:41:44,000
因为 react 的本身

1150
00:41:44,000 --> 00:41:47,000
我觉得它的 layering 做得非常好

1151
00:41:47,000 --> 00:41:49,000
你如果只要用 react 的话

1152
00:41:49,000 --> 00:41:50,000
你可以只用 react 做那个 view

1153
00:41:51,000 --> 00:41:52,000
所以我们一开始就

1154
00:41:53,000 --> 00:41:55,000
我就花了半天时间就

1155
00:41:56,000 --> 00:41:57,000
demo 了一下

1156
00:41:57,000 --> 00:41:59,000
就是说怎么样可能

1157
00:41:59,000 --> 00:42:02,000
直接的在我们的现有的 stack 的情况下

1158
00:42:02,000 --> 00:42:04,000
做 react 就是用 react

1159
00:42:04,000 --> 00:42:05,000
然后开销是什么

1160
00:42:05,000 --> 00:42:07,000
就是说 react 有多大

1161
00:42:07,000 --> 00:42:07,000
然后

1162
00:42:09,000 --> 00:42:11,000
只增加了多少的带宽成本

1163
00:42:11,000 --> 00:42:13,000
增加多少 compiling 成本

1164
00:42:13,000 --> 00:42:14,000
这些东西来算一下

1165
00:42:15,000 --> 00:42:18,000
就非常容易

1166
00:42:18,000 --> 00:42:21,000
就是这些数据摆在面前

1167
00:42:21,000 --> 00:42:23,000
就非常容易做判断

1168
00:42:23,000 --> 00:42:27,000
所以这个过程对你们来说还是其实挺好的

1169
00:42:27,000 --> 00:42:29,000
就是因为 react 它这个就可以

1170
00:42:29,000 --> 00:42:33,000
比较平滑的引入你们现有的 codebase 里面

1171
00:42:33,000 --> 00:42:34,000
非常非常平滑

1172
00:42:34,000 --> 00:42:35,000
非常非常平滑

1173
00:42:35,000 --> 00:42:39,000
因为 react 它是

1174
00:42:39,000 --> 00:42:42,000
它 react view 是一个 self-contained 的东西

1175
00:42:43,000 --> 00:42:44,000
你只需要告诉他说

1176
00:42:44,000 --> 00:42:46,000
你的 container 是什么

1177
00:42:46,000 --> 00:42:50,000
最后你会在 dom 里面去哪一个 container

1178
00:42:50,000 --> 00:42:53,000
你只要告诉 react 的引擎

1179
00:42:54,000 --> 00:42:55,000
这样一个信息

1180
00:42:55,000 --> 00:42:58,000
然后把 view 一写 react 就会

1181
00:42:58,000 --> 00:43:01,000
把他的 view 给 drop 到这个引擎里

1182
00:43:02,000 --> 00:43:03,000
这个 container 里面去

1183
00:43:04,000 --> 00:43:05,000
所以可以很容易的

1184
00:43:06,000 --> 00:43:08,000
写一个 backbone view

1185
00:43:08,000 --> 00:43:11,000
然后实际上那个 backbone view 里面是用了一个 react view

1186
00:43:11,000 --> 00:43:13,000
这是一个非常简单的事情

1187
00:43:13,000 --> 00:43:15,000
大概就是 20 行的代码

1188
00:43:15,000 --> 00:43:18,000
你就可以把这个事情做出来了

1189
00:43:18,000 --> 00:43:19,000
然后这个代码是可以重用的

1190
00:43:19,000 --> 00:43:20,000
就是不同的

1191
00:43:21,000 --> 00:43:22,000
不同的 react view 可以

1192
00:43:23,000 --> 00:43:24,000
重用同一个 rapper

1193
00:43:25,000 --> 00:43:25,000
所以

1194
00:43:26,000 --> 00:43:28,000
把那个一写代这个

1195
00:43:28,000 --> 00:43:28,000
这很容易

1196
00:43:29,000 --> 00:43:31,000
然后其实大家在这个阶段你知道

1197
00:43:32,000 --> 00:43:34,000
angular 出来 react 出来

1198
00:43:34,000 --> 00:43:36,000
大家都对这个前端就觉得说

1199
00:43:36,000 --> 00:43:38,000
好像有一股新风

1200
00:43:38,000 --> 00:43:39,000
有股新气象

1201
00:43:40,000 --> 00:43:41,000
所以

1202
00:43:41,000 --> 00:43:44,000
我们的团队很想要在

1203
00:43:45,000 --> 00:43:48,000
production 中尝试这些新的技术

1204
00:43:49,000 --> 00:43:50,000
大家看到说

1205
00:43:50,000 --> 00:43:51,000
它有非常多的好处

1206
00:43:51,000 --> 00:43:53,000
可以解决我们的 pain point

1207
00:43:53,000 --> 00:43:56,000
然后同时又这么容易开始使用

1208
00:43:56,000 --> 00:43:57,000
大家都就说

1209
00:43:57,000 --> 00:43:59,000
那我们都来试一试

1210
00:44:00,000 --> 00:44:02,000
然后就大家都开始写一些

1211
00:44:02,000 --> 00:44:04,000
不怎么样的 react view

1212
00:44:05,000 --> 00:44:06,000
写一些就是

1213
00:44:06,000 --> 00:44:07,000
一开始嘛

1214
00:44:07,000 --> 00:44:10,000
总是还没有完全的掌握

1215
00:44:10,000 --> 00:44:10,000
但是可以用

1216
00:44:10,000 --> 00:44:11,000
就是至少

1217
00:44:12,000 --> 00:44:13,000
至少 it works

1218
00:44:14,000 --> 00:44:15,000
逐渐的在这个六个月的时间中

1219
00:44:15,000 --> 00:44:17,000
就学到了更多说

1220
00:44:17,000 --> 00:44:18,000
怎么样正确的使用 react

1221
00:44:20,000 --> 00:44:22,000
也同时在

1222
00:44:23,000 --> 00:44:25,000
不断的发新的 feature

1223
00:44:26,000 --> 00:44:27,000
swap out

1224
00:44:27,000 --> 00:44:31,000
所以你是说现在 react 的 best practice

1225
00:44:31,000 --> 00:44:32,000
已经出来了

1226
00:44:33,000 --> 00:44:34,000
或者说

1227
00:44:34,000 --> 00:44:36,000
你们已经通过自己的摸索

1228
00:44:36,000 --> 00:44:40,000
找到了使用 react 的最佳方式

1229
00:44:40,000 --> 00:44:41,000
我觉得从

1230
00:44:41,000 --> 00:44:44,000
不管是从 community 的层面

1231
00:44:44,000 --> 00:44:47,000
到我们自己小团队的层面来说的话

1232
00:44:48,000 --> 00:44:51,000
它的 best practice 其实是比较清楚的

1233
00:44:53,000 --> 00:44:55,000
最主要的一个

1234
00:44:55,000 --> 00:44:59,000
我觉得就是在认知困难中

1235
00:44:59,000 --> 00:45:01,000
最重要一点是

1236
00:45:01,000 --> 00:45:03,000
你要摆脱

1237
00:45:04,000 --> 00:45:09,000
就是手动 DOM 操作这样一个概念

1238
00:45:10,000 --> 00:45:12,000
因为我们之前的习惯就是

1239
00:45:12,000 --> 00:45:15,000
比方说我们要改变一个

1240
00:45:15,000 --> 00:45:17,000
页面 element 的 class

1241
00:45:17,000 --> 00:45:19,000
我们都是直接把那个 class 给

1242
00:45:20,000 --> 00:45:20,000
挑出来

1243
00:45:20,000 --> 00:45:21,000
然后直接

1244
00:45:21,000 --> 00:45:24,000
再改它的那个 attribute

1245
00:45:24,000 --> 00:45:26,000
直接跟 DOM API 打交道

1246
00:45:27,000 --> 00:45:29,000
add class remove class 这样吗

1247
00:45:29,000 --> 00:45:33,000
那甚至都不是直接跟 DOM API 打交道

1248
00:45:33,000 --> 00:45:35,000
那是跟那个 JCrew API 打交道

1249
00:45:38,000 --> 00:45:41,000
但是在 react 中

1250
00:45:43,000 --> 00:45:44,000
这并不是一个

1251
00:45:45,000 --> 00:45:49,000
practice 就是完全就改变了它写的方式

1252
00:45:49,000 --> 00:45:50,000
它实际上是一个状态机

1253
00:45:51,000 --> 00:45:53,000
它把那一层抽象出去了

1254
00:45:53,000 --> 00:45:53,000
对

1255
00:45:54,000 --> 00:45:54,000
所以你就

1256
00:45:55,000 --> 00:45:58,000
其实你心里要想的就是两个东西

1257
00:45:58,000 --> 00:45:59,000
一个叫做 probs

1258
00:45:59,000 --> 00:46:00,000
一个叫 state

1259
00:46:00,000 --> 00:46:01,000
probs 是

1260
00:46:02,000 --> 00:46:02,000
这个

1261
00:46:03,000 --> 00:46:04,000
你现在这个 view

1262
00:46:04,000 --> 00:46:07,000
从它的母体

1263
00:46:07,000 --> 00:46:08,000
从 parent

1264
00:46:09,000 --> 00:46:10,000
或者是从 render function

1265
00:46:10,000 --> 00:46:12,000
就是 render element function

1266
00:46:12,000 --> 00:46:14,000
获得的信息

1267
00:46:14,000 --> 00:46:15,000
不可变的信息

1268
00:46:15,000 --> 00:46:18,000
然后同时这个 view 本身有它自己的状态

1269
00:46:19,000 --> 00:46:20,000
就是

1270
00:46:20,000 --> 00:46:23,000
从外部获取的信息跟它自身的状态

1271
00:46:23,000 --> 00:46:24,000
这两者

1272
00:46:24,000 --> 00:46:25,000
都是 JCrew object

1273
00:46:26,000 --> 00:46:27,000
然后你要总是想到说

1274
00:46:27,000 --> 00:46:29,000
怎么样通过这两者

1275
00:46:29,000 --> 00:46:31,000
来反映

1276
00:46:31,000 --> 00:46:33,000
这个 view 的最终形态

1277
00:46:34,000 --> 00:46:35,000
从而

1278
00:46:36,000 --> 00:46:37,000
在这个过程中你就完全没有

1279
00:46:37,000 --> 00:46:38,000
就 dom 就不存在

1280
00:46:38,000 --> 00:46:41,000
就是你把这两个变化的

1281
00:46:42,000 --> 00:46:44,000
变化的 object 给

1282
00:46:45,000 --> 00:46:47,000
feed 到你的 render function 中

1283
00:46:48,000 --> 00:46:50,000
你所得到的就是最终形态的 view

1284
00:46:50,000 --> 00:46:52,000
就完全没有 dom

1285
00:46:53,000 --> 00:46:56,000
当然我们最开始不是特别适应这个

1286
00:46:56,000 --> 00:46:56,000
这个想法

1287
00:46:56,000 --> 00:47:00,000
我们并没有很明确的想这个 state 怎么样

1288
00:47:00,000 --> 00:47:02,000
应该是什么样构成的 probs

1289
00:47:02,000 --> 00:47:03,000
这是什么意思

1290
00:47:04,000 --> 00:47:05,000
因为 technically 你可以

1291
00:47:05,000 --> 00:47:07,000
你可以放任何的 object 进去

1292
00:47:07,000 --> 00:47:10,000
所以我们并没有把这个东西用得很好

1293
00:47:11,000 --> 00:47:13,000
也是在逐步的

1294
00:47:14,000 --> 00:47:15,000
用然后

1295
00:47:15,000 --> 00:47:17,000
然后发现问题

1296
00:47:17,000 --> 00:47:18,000
然后讨论问题

1297
00:47:18,000 --> 00:47:20,000
code review 中才把这些

1298
00:47:21,000 --> 00:47:24,000
这个概念每个人心里都非常清楚

1299
00:47:24,000 --> 00:47:26,000
所以现在的话就是大家写出来的

1300
00:47:26,000 --> 00:47:30,000
就少了很多 dom manipulation

1301
00:47:30,000 --> 00:47:31,000
然后更加的 focus 在 state 上

1302
00:47:32,000 --> 00:47:34,000
在这个 react account 上

1303
00:47:34,000 --> 00:47:35,000
我们也提到更多的说

1304
00:47:35,000 --> 00:47:39,000
怎么样能够写出高性能的 react view

1305
00:47:40,000 --> 00:47:41,000
它的重点就是说

1306
00:47:42,000 --> 00:47:43,000
怎么样更好的

1307
00:47:43,000 --> 00:47:46,000
更高效的 detect 你的

1308
00:47:47,000 --> 00:47:48,000
那个 view 到底要不要 render

1309
00:47:48,000 --> 00:47:49,000
view 有什么 change

1310
00:47:49,000 --> 00:47:53,000
然后这个 change 就是通过你的 probs

1311
00:47:53,000 --> 00:47:55,000
跟 state 所反映出来

1312
00:47:56,000 --> 00:47:58,000
所以这个就是你们现在

1313
00:47:58,000 --> 00:48:00,000
之前你提到那六大就是

1314
00:48:00,000 --> 00:48:02,000
pinpoint 这个痛点之后

1315
00:48:03,000 --> 00:48:05,000
你们现在大概是

1316
00:48:05,000 --> 00:48:07,000
就是迁移到了什么样的程度了呢

1317
00:48:07,000 --> 00:48:09,000
就是说比如有就整个这个架构中

1318
00:48:09,000 --> 00:48:12,000
有哪些部分已经是被就传统的

1319
00:48:12,000 --> 00:48:14,000
shrinkbackbond 加这种传统的模板方式来写

1320
00:48:14,000 --> 00:48:17,000
现在已经被 react 的方式替代掉了

1321
00:48:19,000 --> 00:48:22,000
我刚就随便给了一个数字

1322
00:48:22,000 --> 00:48:26,000
60%我觉得 60%是一个 conservative estimation

1323
00:48:27,000 --> 00:48:29,000
特别是当我就是我这个熬夜的成果

1324
00:48:30,000 --> 00:48:31,000
即将发布

1325
00:48:31,000 --> 00:48:33,000
然后特别是在那个出去之后呢

1326
00:48:33,000 --> 00:48:36,000
就 60%肯定可以达到的了

1327
00:48:36,000 --> 00:48:39,000
所以剩下的那些 backbond view

1328
00:48:39,000 --> 00:48:40,000
我们所要采取的方式

1329
00:48:40,000 --> 00:48:43,000
就是把它们包在那个 react view 中

1330
00:48:43,000 --> 00:48:46,000
这样对于其他的开发者来说

1331
00:48:46,000 --> 00:48:48,000
他们好像是在用一个 react view

1332
00:48:48,000 --> 00:48:50,000
虽然说我们大家都清楚

1333
00:48:50,000 --> 00:48:52,000
就有一些 view 并不是 react view

1334
00:48:52,000 --> 00:48:54,000
但是就是在 code base 中

1335
00:48:54,000 --> 00:48:57,000
他们是以那个 react view 的形式被使用的

1336
00:48:57,000 --> 00:48:59,000
这样一来的话就是就封装了嘛

1337
00:48:59,000 --> 00:49:01,000
这样的话我们以后要 swap 他们 out

1338
00:49:01,000 --> 00:49:03,000
也就变得简单了很多

1339
00:49:06,000 --> 00:49:08,000
随着我这个新的项目的话

1340
00:49:08,000 --> 00:49:10,000
我觉得这个 memory management 这一点是

1341
00:49:10,000 --> 00:49:12,000
会有很大的改善

1342
00:49:12,000 --> 00:49:17,000
因为所有的这些紫 view 的那个架构

1343
00:49:17,000 --> 00:49:19,000
都是 react 它帮我来实现的

1344
00:49:19,000 --> 00:49:24,000
所以说 react 在很大程度上会帮助我

1345
00:49:24,000 --> 00:49:27,000
make sure 就是那个所有的 element

1346
00:49:27,000 --> 00:49:30,000
都是会正确的被移走被加进来

1347
00:49:31,000 --> 00:49:34,000
同时 react 有很清晰的 life cycle

1348
00:49:34,000 --> 00:49:35,000
所以 life cycle 就是

1349
00:49:35,000 --> 00:49:38,000
如果你有很多 callback function

1350
00:49:38,000 --> 00:49:39,000
就像 protocol 一样

1351
00:49:39,000 --> 00:49:40,000
你有很多 callback function

1352
00:49:41,000 --> 00:49:43,000
反映就是这个 element

1353
00:49:43,000 --> 00:49:48,000
在它的生命周期中的关键点吧

1354
00:49:48,000 --> 00:49:54,000
比方说这个 view 会要被放到那个 dome 上去了

1355
00:49:54,000 --> 00:49:55,000
你会有一个 callback

1356
00:49:55,000 --> 00:49:57,000
它会被从那个 dome 中拿出来

1357
00:49:57,000 --> 00:49:58,000
它会有 callback

1358
00:49:58,000 --> 00:50:01,000
放进去那个时候就是最好的

1359
00:50:03,000 --> 00:50:05,000
如果你要 manually 做一些 event handling 的话

1360
00:50:05,000 --> 00:50:06,000
那是最好的时候了

1361
00:50:06,000 --> 00:50:09,000
然后随着对应的在它 element

1362
00:50:09,000 --> 00:50:11,000
在它被拿出来的时候

1363
00:50:11,000 --> 00:50:14,000
就是最好的时候来做这个 event handling

1364
00:50:15,000 --> 00:50:17,000
这个 life cycle 这么清晰的话

1365
00:50:17,000 --> 00:50:23,000
对我们 mentally handle 这些 memory management

1366
00:50:23,000 --> 00:50:25,000
这些点也是很有帮助的

1367
00:50:25,000 --> 00:50:28,000
我们的另外一个 pinpoint 就是

1368
00:50:28,000 --> 00:50:31,000
在我们之前那个 stack 中

1369
00:50:31,000 --> 00:50:37,000
是非常难重用这个 view 的

1370
00:50:38,000 --> 00:50:39,000
这点是也是

1371
00:50:39,000 --> 00:50:41,000
again 就是我也是很不好意思一点

1372
00:50:41,000 --> 00:50:43,000
就是因为我们之前是用的

1373
00:50:43,000 --> 00:50:45,000
叫做 underscore template

1374
00:50:45,000 --> 00:50:48,000
是一个 EJX 的 embedded javascript solution

1375
00:50:49,000 --> 00:50:49,000
非常的

1376
00:50:49,000 --> 00:50:51,000
可是如果我没理解错的话

1377
00:50:51,000 --> 00:50:57,000
underscore 的 template 其实就是一个

1378
00:50:57,000 --> 00:51:02,000
在 html 里面预留出来的 script

1379
00:51:02,000 --> 00:51:04,000
就在那一块里面

1380
00:51:04,000 --> 00:51:07,000
用纯 html 写的 view

1381
00:51:07,000 --> 00:51:09,000
这个会非常难以复用吗

1382
00:51:11,000 --> 00:51:13,000
underscore template 它是

1383
00:51:13,000 --> 00:51:14,000
首先它是一个 stream

1384
00:51:14,000 --> 00:51:17,000
它只是一个字符串

1385
00:51:17,000 --> 00:51:20,000
然后它实际上是叫做 embedded JS

1386
00:51:20,000 --> 00:51:24,000
就是它会把这个 stream 做一些 manipulation

1387
00:51:24,000 --> 00:51:26,000
就是很简单的 search and replace

1388
00:51:26,000 --> 00:51:30,000
你所得到的结果就是一个可以 evaluate 的

1389
00:51:31,000 --> 00:51:32,000
javascript stream

1390
00:51:32,000 --> 00:51:35,000
然后通过这个 evaluate function

1391
00:51:35,000 --> 00:51:37,000
来最后产生结果

1392
00:51:38,000 --> 00:51:40,000
我之所以说它难用是因为

1393
00:51:40,000 --> 00:51:42,000
你想如果现在

1394
00:51:43,000 --> 00:51:45,000
现在我要写一个 user profile

1395
00:51:45,000 --> 00:51:46,000
我要写一个用户的那个

1396
00:51:47,000 --> 00:51:48,000
他的 profile

1397
00:51:48,000 --> 00:51:50,000
然后就上面有一个 follow button

1398
00:51:50,000 --> 00:51:53,000
就是你可以加这个用户为好友

1399
00:51:53,000 --> 00:51:55,000
或者 follow 这个用户

1400
00:51:56,000 --> 00:51:59,000
这个 follow button 实际上在很多地方都会出现

1401
00:51:59,000 --> 00:51:59,000
对不对

1402
00:51:59,000 --> 00:52:02,000
我们在比方说我们有更

1403
00:52:02,000 --> 00:52:04,000
用户会有 user card

1404
00:52:04,000 --> 00:52:06,000
我们用户会有那个就在

1405
00:52:07,000 --> 00:52:11,000
在我们的那个 post card 上面也会有用户信息

1406
00:52:11,000 --> 00:52:14,000
然后也会有这个 follow button

1407
00:52:14,000 --> 00:52:16,000
所以好的 practice 就是

1408
00:52:16,000 --> 00:52:19,000
我们要重用这个 follow button itself

1409
00:52:20,000 --> 00:52:21,000
但是呢

1410
00:52:21,000 --> 00:52:21,000
对

1411
00:52:22,000 --> 00:52:23,000
don't repeat yourself

1412
00:52:23,000 --> 00:52:26,000
在用那个 underscore template 跟 vanilla backbone

1413
00:52:26,000 --> 00:52:27,000
就意味着

1414
00:52:28,000 --> 00:52:29,000
首先你在那个 template 里

1415
00:52:29,000 --> 00:52:31,000
要写一个 d 要写一个 container

1416
00:52:32,000 --> 00:52:34,000
然后在那个 backbone 的 render 里头呢

1417
00:52:34,000 --> 00:52:36,000
你要 initialize 这个

1418
00:52:37,000 --> 00:52:40,000
就手动的 initialize 这个 follow button

1419
00:52:40,000 --> 00:52:41,000
然后要把这个

1420
00:52:43,000 --> 00:52:45,000
container 给从 dom 里面挑出来

1421
00:52:45,000 --> 00:52:48,000
然后把这个新 initialize 的

1422
00:52:49,000 --> 00:52:52,000
follow button 给它加进去

1423
00:52:52,000 --> 00:52:53,000
给它加到那个 dom 里头

1424
00:52:54,000 --> 00:52:56,000
这样一个过程实际上你要写

1425
00:52:56,000 --> 00:52:59,000
我写了一个 sample code 做这个事

1426
00:52:59,000 --> 00:53:00,000
然后

1427
00:53:02,000 --> 00:53:03,000
如果没有记错的话

1428
00:53:03,000 --> 00:53:05,000
我得多写 14 行代码

1429
00:53:06,000 --> 00:53:08,000
就是为了重用这个 follow button

1430
00:53:08,000 --> 00:53:10,000
我得写 14 行代码

1431
00:53:10,000 --> 00:53:12,000
但是真正这个 follow button 本身

1432
00:53:12,000 --> 00:53:14,000
可能也就那么 10 行代码的样子

1433
00:53:15,000 --> 00:53:16,000
所以说

1434
00:53:16,000 --> 00:53:17,000
所以说

1435
00:53:17,000 --> 00:53:19,000
组合性太差

1436
00:53:19,000 --> 00:53:23,000
所以其实上在我们的那个 codebase 中

1437
00:53:23,000 --> 00:53:27,000
这个有非常多的 follow button 的不同的实现

1438
00:53:28,000 --> 00:53:29,000
当然这个问题就是

1439
00:53:29,000 --> 00:53:30,000
我就是

1440
00:53:30,000 --> 00:53:32,000
不仅仅是 practical

1441
00:53:32,000 --> 00:53:35,000
practical 你很现实点就是

1442
00:53:35,000 --> 00:53:37,000
比方说我们后来一开始 follow button 里面的 follow

1443
00:53:37,000 --> 00:53:39,000
就是一个 follow 吧

1444
00:53:39,000 --> 00:53:40,000
就是英语

1445
00:53:40,000 --> 00:53:43,000
但是我们后来做那个国际化的时候

1446
00:53:43,000 --> 00:53:47,000
我们要把这个 follow 转换成一个变量

1447
00:53:47,000 --> 00:53:49,000
我就改了很多个地方

1448
00:53:49,000 --> 00:53:51,000
如果只是我们再重用一个

1449
00:53:51,000 --> 00:53:53,000
我们只是重用一个 view 的话

1450
00:53:53,000 --> 00:53:54,000
那我们就只需要改一个地方

1451
00:53:54,000 --> 00:53:55,000
就是这个很 practical

1452
00:53:55,000 --> 00:53:57,000
就有很多这样的问题

1453
00:53:57,000 --> 00:54:00,000
但是我也很理解为什么大家

1454
00:54:00,000 --> 00:54:01,000
没有重用这个 button

1455
00:54:01,000 --> 00:54:03,000
因为太 TM 麻烦了嘛对吧

1456
00:54:03,000 --> 00:54:04,000
就成本太高嘛

1457
00:54:04,000 --> 00:54:05,000
你重用的成本你超过了

1458
00:54:05,000 --> 00:54:06,000
再写一遍成本

1459
00:54:06,000 --> 00:54:08,000
那肯定不会有人愿意去重用

1460
00:54:08,000 --> 00:54:10,000
在当时你写的时候是这样

1461
00:54:10,000 --> 00:54:12,000
但是后来就是他这个

1462
00:54:12,000 --> 00:54:13,000
你挽回起来就是灾难

1463
00:54:15,000 --> 00:54:15,000
所以

1464
00:54:15,000 --> 00:54:18,000
这是 react 采取的方式完全不一样

1465
00:54:18,000 --> 00:54:20,000
所以你看起来好像他

1466
00:54:20,000 --> 00:54:22,000
你写的那个代码是一个 template

1467
00:54:22,000 --> 00:54:23,000
但是他实际上

1468
00:54:24,000 --> 00:54:25,000
完全不是 template 的

1469
00:54:25,000 --> 00:54:27,000
他完全不是那个字符串的

1470
00:54:27,000 --> 00:54:30,000
他只是他只是一个

1471
00:54:30,000 --> 00:54:31,000
他其实就是一个 javascript

1472
00:54:31,000 --> 00:54:35,000
所以说你在写你的 view 的时候

1473
00:54:35,000 --> 00:54:37,000
你所构建的是一个

1474
00:54:39,000 --> 00:54:41,000
object tree 等于是说

1475
00:54:41,000 --> 00:54:43,000
不是一个 pure 字符串

1476
00:54:43,000 --> 00:54:45,000
然后他也通过他的那个

1477
00:54:46,000 --> 00:54:48,000
grammar candy 叫做 jsx

1478
00:54:49,000 --> 00:54:50,000
重用一个 follow button

1479
00:54:50,000 --> 00:54:51,000
就是两行代码

1480
00:54:51,000 --> 00:54:52,000
就是你把那个代

1481
00:54:52,000 --> 00:54:53,000
你把那个 follow button

1482
00:54:53,000 --> 00:54:55,000
给 require 进来

1483
00:54:55,000 --> 00:54:57,000
然后再加上那个

1484
00:54:57,000 --> 00:54:58,000
就可以了 follow button 就出现了

1485
00:54:58,000 --> 00:55:00,000
这样这样大家就愿意

1486
00:55:00,000 --> 00:55:02,000
愿意复用

1487
00:55:02,000 --> 00:55:04,000
重用性就得到极大提高

1488
00:55:05,000 --> 00:55:07,000
我们在这个概念上

1489
00:55:07,000 --> 00:55:09,000
引申出来就我们有自己的

1490
00:55:09,000 --> 00:55:11,000
叫做 uikit uicomponents

1491
00:55:11,000 --> 00:55:13,000
就好像你写 iOS

1492
00:55:13,000 --> 00:55:15,000
你会有那个 Apple 官方的

1493
00:55:15,000 --> 00:55:16,000
uikit

1494
00:55:16,000 --> 00:55:18,000
然后大部分都在用这个

1495
00:55:18,000 --> 00:55:19,000
uikit

1496
00:55:19,000 --> 00:55:21,000
然后你写了以后

1497
00:55:21,000 --> 00:55:22,000
你写了以后

1498
00:55:22,000 --> 00:55:23,000
你写了以后

1499
00:55:23,000 --> 00:55:24,000
你写了以后

1500
00:55:24,000 --> 00:55:25,000
你写了以后

1501
00:55:25,000 --> 00:55:27,000
大部分都在用这个 uikit

1502
00:55:27,000 --> 00:55:29,000
而不是写自己的

1503
00:55:29,000 --> 00:55:31,000
重新实现自己的那个

1504
00:55:31,000 --> 00:55:33,000
一套东西

1505
00:55:33,000 --> 00:55:35,000
对这也是挺有意思一点

1506
00:55:35,000 --> 00:55:37,000
就是说终于什么写 web 的

1507
00:55:37,000 --> 00:55:39,000
同学们赶上了写那个

1508
00:55:39,000 --> 00:55:41,000
desktop 的那种什么

1509
00:55:41,000 --> 00:55:43,000
SDK 的畅快感

1510
00:55:43,000 --> 00:55:44,000
没错

1511
00:55:44,000 --> 00:55:46,000
那个 Flash 开发人员

1512
00:55:46,000 --> 00:55:47,000
现在默默累了

1513
00:55:47,000 --> 00:55:49,000
人说 Flash 早就有这堆东西了

1514
00:55:49,000 --> 00:55:50,000
你们不用一定要搞什么

1515
00:55:50,000 --> 00:55:51,000
你看看现在

1516
00:55:51,000 --> 00:55:53,000
重新发明轮子

1517
00:55:53,000 --> 00:55:55,000
可能本质上也是挺好理解的

1518
00:55:55,000 --> 00:55:56,000
就是说

1519
00:55:56,000 --> 00:55:57,000
不管我们现在怎么讲

1520
00:55:57,000 --> 00:55:59,000
web app 多么多么牛

1521
00:55:59,000 --> 00:56:00,000
web app 多么多么好

1522
00:56:00,000 --> 00:56:01,000
但本质上 HTML

1523
00:56:01,000 --> 00:56:04,000
它不是用来写一个 application 的

1524
00:56:04,000 --> 00:56:05,000
一个技术

1525
00:56:05,000 --> 00:56:07,000
它本来是用来写文档的一个技术

1526
00:56:07,000 --> 00:56:08,000
所以我们把它

1527
00:56:08,000 --> 00:56:11,000
这样什么滥用来写这个 application

1528
00:56:11,000 --> 00:56:12,000
对

1529
00:56:12,000 --> 00:56:14,000
我记得是在 Stack Overflow

1530
00:56:14,000 --> 00:56:17,000
还是在哪个 IRC 服务器上

1531
00:56:17,000 --> 00:56:19,000
我看到我一个人写过这样一句话

1532
00:56:19,000 --> 00:56:20,000
印象非常深刻

1533
00:56:20,000 --> 00:56:23,000
他说他是不会去

1534
00:56:23,000 --> 00:56:26,000
试图理解前端的这些东西

1535
00:56:26,000 --> 00:56:28,000
因为前端的整个 Stack

1536
00:56:28,000 --> 00:56:30,000
在他看来就是一大堆 hack

1537
00:56:30,000 --> 00:56:32,000
被叠放在一起

1538
00:56:32,000 --> 00:56:34,000
一种非常古怪的方式被叠放在一起

1539
00:56:34,000 --> 00:56:37,000
所以他是完全不会去碰的

1540
00:56:37,000 --> 00:56:39,000
其实还是

1541
00:56:39,000 --> 00:56:40,000
这也是为什么说

1542
00:56:40,000 --> 00:56:41,000
就像我们刚才讲的

1543
00:56:41,000 --> 00:56:42,000
就是传统的那些

1544
00:56:42,000 --> 00:56:45,000
开发 web app 的 framework

1545
00:56:45,000 --> 00:56:47,000
它就基于 Dome

1546
00:56:47,000 --> 00:56:48,000
一旦基于 Dome 的话

1547
00:56:48,000 --> 00:56:50,000
它整个四维模型

1548
00:56:50,000 --> 00:56:53,000
就是在文档的圈子里面

1549
00:56:53,000 --> 00:56:55,000
就是 HTML 文档

1550
00:56:55,000 --> 00:56:56,000
Document-oriented

1551
00:56:56,000 --> 00:56:57,000
这么导向的一个东西

1552
00:56:57,000 --> 00:56:58,000
在里面响了

1553
00:56:58,000 --> 00:56:59,000
这样的话其实你跟

1554
00:56:59,000 --> 00:57:01,000
构建一个现代的

1555
00:57:01,000 --> 00:57:02,000
这种高度组建化

1556
00:57:02,000 --> 00:57:05,000
然后高度可重用的这种应用的话

1557
00:57:05,000 --> 00:57:08,000
其实是在底层上

1558
00:57:08,000 --> 00:57:10,000
完全不吻合的

1559
00:57:10,000 --> 00:57:13,000
对你说 Tim Bernalite

1560
00:57:13,000 --> 00:57:17,000
在 80 年代某一个昏暗的

1561
00:57:17,000 --> 00:57:19,000
地下室里面

1562
00:57:19,000 --> 00:57:21,000
在一台 Nex 的计算机上

1563
00:57:21,000 --> 00:57:23,000
研发出万维网的时候

1564
00:57:23,000 --> 00:57:25,000
他怎么可能想到这个玩意

1565
00:57:25,000 --> 00:57:27,000
有招一是会被拿来

1566
00:57:27,000 --> 00:57:29,000
做这种稀奇古怪的用途

1567
00:57:29,000 --> 00:57:30,000
对对对

1568
00:57:30,000 --> 00:57:32,000
所以整个基础建设

1569
00:57:32,000 --> 00:57:35,000
就不符合这个时代精神

1570
00:57:35,000 --> 00:57:37,000
就是在悉尼上建摩天大厦

1571
00:57:37,000 --> 00:57:39,000
就是我们前端开发的痛苦

1572
00:57:39,000 --> 00:57:40,000
对

1573
00:57:40,000 --> 00:57:41,000
后来现在

1574
00:57:41,000 --> 00:57:42,000
也就是什么

1575
00:57:42,000 --> 00:57:45,000
RELAX 选择走这个虚拟化

1576
00:57:45,000 --> 00:57:46,000
或者叫 Virtual Dome

1577
00:57:46,000 --> 00:57:48,000
或者他根本就不关注 Dome 本身

1578
00:57:48,000 --> 00:57:50,000
只关注他本身

1579
00:57:50,000 --> 00:57:53,000
Application Logic 里面的那些 Object Tree

1580
00:57:53,000 --> 00:57:55,000
这样的话就等于说

1581
00:57:55,000 --> 00:57:56,000
你这个悉尼来

1582
00:57:56,000 --> 00:57:57,000
我给你打几个装

1583
00:57:57,000 --> 00:58:00,000
终于有一个基石了

1584
00:58:00,000 --> 00:58:01,000
对

1585
00:58:01,000 --> 00:58:02,000
所以 RELAX 试图做的事情

1586
00:58:02,000 --> 00:58:05,000
其实就是类似这种打装子

1587
00:58:06,000 --> 00:58:07,000
那个 Winlow

1588
00:58:07,000 --> 00:58:08,000
刚才讲了

1589
00:58:08,000 --> 00:58:10,000
这个就是在 View 这一块

1590
00:58:10,000 --> 00:58:11,000
你们就其实

1591
00:58:12,000 --> 00:58:15,000
在你问这个问题之前

1592
00:58:15,000 --> 00:58:16,000
我得说我对这个

1593
00:58:17,000 --> 00:58:19,000
就是各种 Develop

1594
00:58:19,000 --> 00:58:20,000
是有智商优越感

1595
00:58:20,000 --> 00:58:22,000
其实是很看不惯的一个事情

1596
00:58:22,000 --> 00:58:24,000
就是刚刚那个

1597
00:58:24,000 --> 00:58:26,000
刚刚吴涛提到就是在

1598
00:58:26,000 --> 00:58:29,000
这个前端开发是一堆 Hack

1599
00:58:29,000 --> 00:58:31,000
其实并没有大错了

1600
00:58:31,000 --> 00:58:34,000
就是在一个阶段

1601
00:58:34,000 --> 00:58:35,000
确实是这样子

1602
00:58:35,000 --> 00:58:37,000
但是你得从发展的

1603
00:58:37,000 --> 00:58:39,000
发展的角度看事情

1604
00:58:39,000 --> 00:58:41,000
同时从我的

1605
00:58:41,000 --> 00:58:43,000
从我个人角度来说的话

1606
00:58:43,000 --> 00:58:46,000
更多的考虑解决问题

1607
00:58:46,000 --> 00:58:48,000
有什么样的好的 Solution

1608
00:58:49,000 --> 00:58:51,000
才是更值得做的事情

1609
00:58:51,000 --> 00:58:53,000
像 RELAX 这样

1610
00:58:53,000 --> 00:58:55,000
就是这样一个思维过程的一个产物

1611
00:58:55,000 --> 00:58:56,000
因为你

1612
00:58:56,000 --> 00:58:58,000
这个视角是肯定对的

1613
00:58:58,000 --> 00:59:00,000
就像 C 元

1614
00:59:00,000 --> 00:59:04,000
C 元其实也并不是一个特别完美的

1615
00:59:04,000 --> 00:59:09,000
有朝一日 Dance Richard 会想到

1616
00:59:09,000 --> 00:59:10,000
这个东西会不会拿来开发

1617
00:59:10,000 --> 00:59:15,000
世界上作为先进和复杂的操作系统之一

1618
00:59:15,000 --> 00:59:16,000
可能那时候也没有

1619
00:59:16,000 --> 00:59:18,000
他只不过想要有一个

1620
00:59:18,000 --> 00:59:20,000
编程元能够取代汇编元而已

1621
00:59:20,000 --> 00:59:23,000
但你说 C 的种种大坑

1622
00:59:23,000 --> 00:59:25,000
一直到今天都在危害很多人

1623
00:59:25,000 --> 00:59:27,000
可能还是非常成功

1624
00:59:27,000 --> 00:59:29,000
我觉得这个意义上讲

1625
00:59:29,000 --> 00:59:31,000
其实前端的世界也是这样的

1626
00:59:31,000 --> 00:59:33,000
不好意思打断了 RELAX

1627
00:59:33,000 --> 00:59:34,000
那我接着问

1628
00:59:34,000 --> 00:59:36,000
就是说 WILLOW 你刚才讲了

1629
00:59:36,000 --> 00:59:39,000
就是说你们其实在 View 这一块

1630
00:59:39,000 --> 00:59:41,000
已经用得非常成功了

1631
00:59:41,000 --> 00:59:43,000
但是 Backbone 还有一块很重要

1632
00:59:43,000 --> 00:59:45,000
就是这个在数据管理这一块

1633
00:59:45,000 --> 00:59:46,000
然后这一块其实传统上

1634
00:59:46,000 --> 00:59:50,000
REACT 是没有现成的解决方案的

1635
00:59:50,000 --> 00:59:53,000
就是说你们在这一块上是怎么做的呢

1636
00:59:54,000 --> 00:59:56,000
我们刚一开始说

1637
00:59:56,000 --> 00:59:57,000
就是你要得到 buying

1638
00:59:57,000 --> 01:00:00,000
总是要把这个东西做得越简单越好

1639
01:00:00,000 --> 01:00:03,000
然后我也说到就是 REACT

1640
01:00:03,000 --> 01:00:05,000
它的那个

1641
01:00:05,000 --> 01:00:07,000
Abstraction Layer 做得非常好的一点

1642
01:00:07,000 --> 01:00:10,000
其实你可以先从 Reacted View 开始用起

1643
01:00:10,000 --> 01:00:12,000
我觉得当你开始用了之后

1644
01:00:12,000 --> 01:00:15,000
当你终于了解了

1645
01:00:15,000 --> 01:00:17,000
它的背后的这个

1646
01:00:17,000 --> 01:00:20,000
Prob and State 的含义之后

1647
01:00:20,000 --> 01:00:22,000
再继续去考虑这个

1648
01:00:22,000 --> 01:00:25,000
Architecture 是一个比较好的 Migration

1649
01:00:25,000 --> 01:00:27,000
从我的个人角度来说

1650
01:00:27,000 --> 01:00:29,000
所以我们的系统在目前来说的话

1651
01:00:29,000 --> 01:00:35,000
还是用了一个比较传统的 MVC 的架构

1652
01:00:35,000 --> 01:00:37,000
这个跟

1653
01:00:37,000 --> 01:00:40,000
其实看起来跟原来的 Backbone 的

1654
01:00:40,000 --> 01:00:41,000
也没有太大的区别

1655
01:00:41,000 --> 01:00:43,000
就是把那个 Backbone 的 View

1656
01:00:43,000 --> 01:00:45,000
换成了一个

1657
01:00:45,000 --> 01:00:47,000
Way Better 的 View

1658
01:00:47,000 --> 01:00:51,000
就是这样在那个 Controller 跟 Model 上面

1659
01:00:51,000 --> 01:00:52,000
是没有太大的变化的

1660
01:00:52,000 --> 01:00:54,000
但这个对于 Migration 来说

1661
01:00:54,000 --> 01:00:55,000
是非常非常好处的

1662
01:00:55,000 --> 01:00:57,000
因为你所要重写的那个代码

1663
01:00:57,000 --> 01:00:59,000
就大大地降低了嘛

1664
01:00:59,000 --> 01:01:00,000
你只要重写

1665
01:01:00,000 --> 01:01:02,000
就是一小部分代码

1666
01:01:02,000 --> 01:01:04,000
而不是重写所有代码

1667
01:01:04,000 --> 01:01:07,000
所以说我们 View 的那个

1668
01:01:07,000 --> 01:01:09,000
Reacted View 的比例增大呢

1669
01:01:09,000 --> 01:01:12,000
我们才开始就现在考虑说

1670
01:01:12,000 --> 01:01:15,000
到底要 Architecture 往哪个方向走

1671
01:01:15,000 --> 01:01:20,000
Reacted 他们这个 Facebook 所倡导的

1672
01:01:20,000 --> 01:01:22,000
叫做 Flux

1673
01:01:24,000 --> 01:01:26,000
Flux 跟那个

1674
01:01:26,000 --> 01:01:28,000
传统的 MVC 主

1675
01:01:28,000 --> 01:01:30,000
对我来说最主要的区别呢

1676
01:01:30,000 --> 01:01:31,000
首先是

1677
01:01:31,000 --> 01:01:33,000
它非常的强烈的

1678
01:01:34,000 --> 01:01:38,000
Inforce 了一个单向的数据流

1679
01:01:39,000 --> 01:01:40,000
对

1680
01:01:40,000 --> 01:01:41,000
View 呢

1681
01:01:41,000 --> 01:01:44,000
它可以改变

1682
01:01:44,000 --> 01:01:47,000
View 可以改变 Model

1683
01:01:47,000 --> 01:01:49,000
但是这个改变的过程跟原来完全不一样

1684
01:01:49,000 --> 01:01:51,000
就在传统的 MVC 中呢

1685
01:01:51,000 --> 01:01:54,000
View 它一般都会直接的

1686
01:01:54,000 --> 01:01:55,000
Reference 这个 Model

1687
01:01:55,000 --> 01:01:58,000
或者间接的通过 Controller 来 Reference 这个 Model

1688
01:01:58,000 --> 01:02:00,000
然后可以改变这个 Model

1689
01:02:01,000 --> 01:02:03,000
坏处在于说呢

1690
01:02:03,000 --> 01:02:06,000
现在你就是你的那个 Model 的改变的 Logic

1691
01:02:06,000 --> 01:02:08,000
就被分散到各个地方

1692
01:02:08,000 --> 01:02:11,000
就你也不知道每个地方会改这个

1693
01:02:11,000 --> 01:02:13,000
怎么样改这个 Model

1694
01:02:13,000 --> 01:02:16,000
这个 Model 会怎么样变化这点是不清楚的

1695
01:02:17,000 --> 01:02:22,000
所以在这个 Flux 的这个 Structure 呢

1696
01:02:22,000 --> 01:02:25,000
View 它们跟 Model 之间没有直接的联系

1697
01:02:25,000 --> 01:02:28,000
View 没有办法直接去改变这个 Model

1698
01:02:28,000 --> 01:02:30,000
而是 View 要改变这个 Model

1699
01:02:30,000 --> 01:02:31,000
需要传递消息

1700
01:02:31,000 --> 01:02:32,000
通过 Dispatcher

1701
01:02:32,000 --> 01:02:35,000
通过一个就是

1702
01:02:35,000 --> 01:02:37,000
算是一个 Global Object

1703
01:02:37,000 --> 01:02:39,000
来发送一条消息

1704
01:02:39,000 --> 01:02:41,000
这个 View 也不知道这个消息

1705
01:02:41,000 --> 01:02:43,000
到底能不能够到达谁

1706
01:02:43,000 --> 01:02:45,000
View 这个对这个是没有概念的

1707
01:02:45,000 --> 01:02:49,000
然后这个好处在于说呢

1708
01:02:49,000 --> 01:02:53,000
因为这些消息最终都要被 Model 所处理嘛

1709
01:02:53,000 --> 01:02:56,000
然后 Model 可以有选择的处理

1710
01:02:56,000 --> 01:02:57,000
这些消息

1711
01:02:57,000 --> 01:03:00,000
所以 Model 就是

1712
01:03:00,000 --> 01:03:02,000
它可以完全的掌握说

1713
01:03:02,000 --> 01:03:05,000
它自己到底要怎么改变自己的数据结构

1714
01:03:05,000 --> 01:03:08,000
到底有什么样的操作能够被支持

1715
01:03:08,000 --> 01:03:11,000
所以这点上 Model 就非常 Emporced 这一点

1716
01:03:11,000 --> 01:03:14,000
这跟那个传统的 MVC 就不是很一样

1717
01:03:14,000 --> 01:03:17,000
那你觉得说就是 React 它选择这个 Flux 一套模式

1718
01:03:17,000 --> 01:03:20,000
相比之前那个 Backbone

1719
01:03:20,000 --> 01:03:22,000
就是它在数据管理这部分

1720
01:03:22,000 --> 01:03:24,000
它有什么就是有什么

1721
01:03:24,000 --> 01:03:25,000
显著的优势吗

1722
01:03:25,000 --> 01:03:29,000
或者说解决了一个什么样的核心的痛点

1723
01:03:31,000 --> 01:03:33,000
如果你看那个 React

1724
01:03:33,000 --> 01:03:37,000
就是 Facebook 他们自己给出的一个解释的话呢

1725
01:03:37,000 --> 01:03:40,000
就是在大型程序的情况下

1726
01:03:40,000 --> 01:03:42,000
你的数据流是非常不清晰的

1727
01:03:42,000 --> 01:03:44,000
这到底是哪一个 View

1728
01:03:44,000 --> 01:03:46,000
Trig 了哪一个 Model 来变化

1729
01:03:46,000 --> 01:03:47,000
然后这个

1730
01:03:47,000 --> 01:03:51,000
因为不仅是 View 可以去改变这些 Model

1731
01:03:51,000 --> 01:03:53,000
这些 Model 从此也可以去改变

1732
01:03:53,000 --> 01:03:55,000
Model 从此也可以

1733
01:03:55,000 --> 01:03:58,000
Trig 一些 Event 来改变 View

1734
01:03:58,000 --> 01:04:02,000
然后这个数据流动是非常不清晰的

1735
01:04:02,000 --> 01:04:04,000
也没有任何 Emporced

1736
01:04:04,000 --> 01:04:06,000
你有可能甚至于就是出现一个死循环

1737
01:04:06,000 --> 01:04:08,000
就是 View 你会改变那个 Model

1738
01:04:08,000 --> 01:04:10,000
然后 Model

1739
01:04:10,000 --> 01:04:11,000
Trig Event

1740
01:04:11,000 --> 01:04:14,000
然后 View 又会去改变这个 Model

1741
01:04:14,000 --> 01:04:16,000
或者是甚至于不是改变

1742
01:04:16,000 --> 01:04:18,000
View 改变 ModelA

1743
01:04:18,000 --> 01:04:19,000
ModelA 改变 ModelB

1744
01:04:19,000 --> 01:04:21,000
ModelBTrigView 再改变 ModelA

1745
01:04:21,000 --> 01:04:22,000
你知道这样的一个

1746
01:04:22,000 --> 01:04:26,000
就是有很多这样的情况有可能出现

1747
01:04:26,000 --> 01:04:28,000
同时在你要 Facebook 是一个

1748
01:04:28,000 --> 01:04:29,000
它不是一个三人

1749
01:04:29,000 --> 01:04:31,000
不是一个三人小团队

1750
01:04:31,000 --> 01:04:34,000
所以对他们来讲

1751
01:04:34,000 --> 01:04:36,000
这样的维护成本其实非常高的

1752
01:04:36,000 --> 01:04:39,000
因为一个 code 要被

1753
01:04:39,000 --> 01:04:41,000
有可能被 10 个人

1754
01:04:41,000 --> 01:04:43,000
被 50 个人所改变

1755
01:04:43,000 --> 01:04:47,000
然后你的 knowledge 是不可能很好的 share 的

1756
01:04:47,000 --> 01:04:49,000
在这个 50 个人中

1757
01:04:49,000 --> 01:04:52,000
所以它 code 本身一定要非常清晰

1758
01:04:52,000 --> 01:04:55,000
或者是 architecture 一定要非常清晰

1759
01:04:55,000 --> 01:04:58,000
能够 enforce 一些 rules

1760
01:04:58,000 --> 01:05:00,000
不然的话

1761
01:05:00,000 --> 01:05:03,000
要改他们的 View

1762
01:05:03,000 --> 01:05:05,000
他们的整个程序写下来就非常困难

1763
01:05:05,000 --> 01:05:08,000
所以对他们来说是有这样非常强烈的 motivation 的

1764
01:05:08,000 --> 01:05:11,000
同时我觉得你如果看两者的话

1765
01:05:13,000 --> 01:05:15,000
基本的概念就是像

1766
01:05:15,000 --> 01:05:18,000
就是 Model 跟 View 这两个基本的概念

1767
01:05:18,000 --> 01:05:21,000
实际上是多多少少可以 mapping 的

1768
01:05:21,000 --> 01:05:24,000
关键是说他们两个之间怎么交流

1769
01:05:24,000 --> 01:05:27,000
View 怎么要改变 model

1770
01:05:27,000 --> 01:05:31,000
这一点上我觉得是跟 MVC 是最大的区别

1771
01:05:32,000 --> 01:05:33,000
对于我们来讲

1772
01:05:33,000 --> 01:05:35,000
所以引申出来

1773
01:05:35,000 --> 01:05:38,000
你看我们如果下一步要改变这个 architecture 的话

1774
01:05:38,000 --> 01:05:40,000
我所想到的也是说

1775
01:05:40,000 --> 01:05:42,000
我会重用我的 model

1776
01:05:42,000 --> 01:05:44,000
跟我的 collection

1777
01:05:44,000 --> 01:05:46,000
backward model collection

1778
01:05:46,000 --> 01:05:49,000
但是我会用 flux 的方式来连接我的 View

1779
01:05:49,000 --> 01:05:51,000
跟我的 model 跟 collection

1780
01:05:51,000 --> 01:05:52,000
这样 View 的话

1781
01:05:52,000 --> 01:05:56,000
它就不会直接的跟这个 model 跟 collection 打交道

1782
01:05:56,000 --> 01:06:01,000
而通过另外一个抽象层面来跟 model collection 打交道

1783
01:06:01,000 --> 01:06:05,000
这个抽象层面就是 flux 所引进的这个部分

1784
01:06:06,000 --> 01:06:09,000
所以说你们就是下一步的这个引进的计划

1785
01:06:09,000 --> 01:06:13,000
假设比如说你们要切换到 immutable 的那一套东西的画面去

1786
01:06:13,000 --> 01:06:16,000
现在的一个中间方案就是说

1787
01:06:16,000 --> 01:06:21,000
先把现在的 View 和 backward 之间的直接引用关系给去掉

1788
01:06:21,000 --> 01:06:23,000
然后通过 action 的方式来替代

1789
01:06:23,000 --> 01:06:24,000
是这样吗

1790
01:06:24,000 --> 01:06:28,000
对 如果我们要做 immutable GS 那一套的话

1791
01:06:28,000 --> 01:06:31,000
用 backward 的 model 跟 backward collection 是非常难的

1792
01:06:31,000 --> 01:06:38,000
因为 backward 的 model 跟 collection 并不是 native

1793
01:06:38,000 --> 01:06:42,000
可能可以通过 toJSON 那个方式来实现

1794
01:06:42,000 --> 01:06:44,000
但是那样的效率会很低

1795
01:06:44,000 --> 01:06:45,000
同时那个 View 的话

1796
01:06:45,000 --> 01:06:52,000
在目前来说的话 View 是必须得直接跟 collectionmodel 打交道

1797
01:06:52,000 --> 01:06:54,000
因为你没有其他的 machinen

1798
01:06:54,000 --> 01:06:56,000
要不就用 callback 的方式

1799
01:06:56,000 --> 01:06:58,000
要不就用直接 callmodel 的方式

1800
01:06:58,000 --> 01:07:01,000
这个问题会永远存在

1801
01:07:01,000 --> 01:07:05,000
除非你真正的 adopt 这个 flux

1802
01:07:05,000 --> 01:07:08,000
所以我们必须得先做这一步

1803
01:07:08,000 --> 01:07:12,000
才能够有可能 adopt 那 immutable

1804
01:07:12,000 --> 01:07:14,000
但是话又说回来

1805
01:07:14,000 --> 01:07:17,000
我们这个团队也不是 facebook 那么

1806
01:07:17,000 --> 01:07:19,000
facebook 所面临的问题

1807
01:07:19,000 --> 01:07:21,000
跟我们所面临的问题是非常不一样的

1808
01:07:21,000 --> 01:07:22,000
对

1809
01:07:22,000 --> 01:07:26,000
facebook 它的 motivation 是说能够在实现

1810
01:07:26,000 --> 01:07:32,000
他们那么大一个 scale 能够同时很有效的工作

1811
01:07:32,000 --> 01:07:33,000
但是对我们来说的话

1812
01:07:33,000 --> 01:07:35,000
我们的 motivation 是完全不一样的

1813
01:07:35,000 --> 01:07:39,000
我个人觉得就是在有可能情况下

1814
01:07:39,000 --> 01:07:43,000
我们需要尽可能的跟 community best practice 走

1815
01:07:43,000 --> 01:07:49,000
有些时候我并不能够完全地就是 proof 说

1816
01:07:49,000 --> 01:07:53,000
我们的 practice 并没有 community best practice 好

1817
01:07:53,000 --> 01:07:55,000
我不知道这是不是真的

1818
01:07:55,000 --> 01:07:59,000
但是 community 它有 100 1000 个人在后面

1819
01:07:59,000 --> 01:08:02,000
我们有三个人在后面支持我们自己的架构

1820
01:08:02,000 --> 01:08:06,000
然后 community 他们可以 focusing 很多问题

1821
01:08:06,000 --> 01:08:07,000
因为大家都在用

1822
01:08:07,000 --> 01:08:09,000
所以他们可能也有一些问题

1823
01:08:09,000 --> 01:08:10,000
我们现在还没有遇到

1824
01:08:10,000 --> 01:08:12,000
甚至不知道我们会遇到的问题

1825
01:08:12,000 --> 01:08:13,000
他们已经解决了

1826
01:08:13,000 --> 01:08:16,000
我们需要在后面才能去解决

1827
01:08:16,000 --> 01:08:17,000
对

1828
01:08:17,000 --> 01:08:19,000
我们三个人又很难写很好的 documentation

1829
01:08:19,000 --> 01:08:21,000
所以有新的人加入的话

1830
01:08:21,000 --> 01:08:24,000
新的人也不一定能够理解说

1831
01:08:24,000 --> 01:08:26,000
你们为什么要做自己的架构

1832
01:08:26,000 --> 01:08:29,000
理解说你们为什么要做自己的事

1833
01:08:29,000 --> 01:08:31,000
就是说这个到底是个什么东西

1834
01:08:31,000 --> 01:08:32,000
新人的培训

1835
01:08:32,000 --> 01:08:34,000
这里还是一个学习的成本

1836
01:08:34,000 --> 01:08:37,000
对这个其实是一个非常好的点

1837
01:08:37,000 --> 01:08:44,000
如果你们要使用一个并不是那么 opinionated

1838
01:08:44,000 --> 01:08:46,000
这次我没念错了

1839
01:08:46,000 --> 01:08:48,000
不要紧张

1840
01:08:48,000 --> 01:08:50,000
这么一个 stack 的话

1841
01:08:50,000 --> 01:08:53,000
你必须向一个新人去解释很多东西

1842
01:08:53,000 --> 01:08:58,000
就好像我现在也是在历经这样一个被别人解释的过程

1843
01:08:58,000 --> 01:09:00,000
就是我需要理解公司 mental 的东西

1844
01:09:00,000 --> 01:09:02,000
而我有时候会觉得说

1845
01:09:02,000 --> 01:09:09,000
如果这个东西你们用的是某个 community 已经解决过的

1846
01:09:09,000 --> 01:09:11,000
或者说已经开发出来的标准工具

1847
01:09:11,000 --> 01:09:16,000
那我们就可以省去学习这个曲线了

1848
01:09:16,000 --> 01:09:20,000
可是出于某种种种历史原因

1849
01:09:20,000 --> 01:09:29,000
还是有很多东西是意识半回没有办法被这样一种 community 所维护的东西所替换掉

1850
01:09:29,000 --> 01:09:30,000
你们说到这个事情

1851
01:09:30,000 --> 01:09:34,000
我想起一个前几天在记录上看到挺有趣的一个事情

1852
01:09:34,000 --> 01:09:38,000
也是一个算是一半段子的事情

1853
01:09:38,000 --> 01:09:43,000
你知道国内不是很多做那种网页游戏手机游戏的小公司吗

1854
01:09:43,000 --> 01:09:44,000
成百上千的

1855
01:09:44,000 --> 01:09:49,000
然后他们说那些业佣端游的那个后

1856
01:09:49,000 --> 01:09:53,000
不是他有个服务器要同步那些用户之间的数据或者在维护一个状态吗

1857
01:09:53,000 --> 01:09:55,000
他们说那个都是 urln 写的

1858
01:09:55,000 --> 01:10:00,000
然后他们就有那个 urln 的这个粉丝说你看这个 urln 多好多好

1859
01:10:00,000 --> 01:10:03,000
多扩展性多牛逼多健壮

1860
01:10:03,000 --> 01:10:05,000
后来又另外忘了是谁说

1861
01:10:05,000 --> 01:10:10,000
难道不是因为他们的代码都是从同一份公司复制过去抄来抄去改的吗

1862
01:10:14,000 --> 01:10:16,000
感觉有点类似这个事情

1863
01:10:16,000 --> 01:10:17,000
这其实

1864
01:10:17,000 --> 01:10:27,000
这让我想起来就是之前不是欧洲还是美国有一个小厂商做一个集市商业游戏

1865
01:10:27,000 --> 01:10:31,000
然后这个集市商业游戏的某一个版本的源代码泄漏了

1866
01:10:31,000 --> 01:10:35,000
然后被中国的一堆游戏厂商复制了

1867
01:10:35,000 --> 01:10:36,000
视如珍宝

1868
01:10:36,000 --> 01:10:39,000
对视如珍宝复制了好几十遍

1869
01:10:39,000 --> 01:10:43,000
然后每一次改来改去就只改美工其他地方看不懂也不敢改

1870
01:10:43,000 --> 01:10:47,000
然后你会发现有十几个游戏可能十几个太夸张了

1871
01:10:47,000 --> 01:10:48,000
四五个游戏

1872
01:10:48,000 --> 01:10:51,000
四五个游戏太少了

1873
01:10:51,000 --> 01:10:53,000
反正就是有那么一堆游戏

1874
01:10:53,000 --> 01:10:55,000
看起来几乎不一样

1875
01:10:55,000 --> 01:10:57,000
玩起来一模一样

1876
01:10:57,000 --> 01:11:00,000
然后只有这个版本的代码被泄漏了

1877
01:11:00,000 --> 01:11:03,000
然后也只有这个版本被在中国流传开来

1878
01:11:03,000 --> 01:11:05,000
然后之后这个公司做的所有的补丁

1879
01:11:05,000 --> 01:11:10,000
在中国的所有的客栏里面都看不到平衡度修改之类的都没有

1880
01:11:10,000 --> 01:11:14,000
所以这其实就是刚才那个问题的另外一个极端的版本

1881
01:11:14,000 --> 01:11:16,000
就是说有可能

1882
01:11:16,000 --> 01:11:18,000
可能是一个取舍吧

1883
01:11:18,000 --> 01:11:19,000
怎么去均衡这两者之间

1884
01:11:19,000 --> 01:11:23,000
怎么去说在自己的认识上有一点创新

1885
01:11:23,000 --> 01:11:26,000
还是说要贴紧这个这个什么

1886
01:11:26,000 --> 01:11:29,000
这个 community 的步伐

1887
01:11:29,000 --> 01:11:31,000
这里面可能是一个

1888
01:11:31,000 --> 01:11:34,000
要把根据这个你的这个团队的大小啊

1889
01:11:34,000 --> 01:11:37,000
就开发人员的那个水平的高低要把握的一个事情

1890
01:11:37,000 --> 01:11:39,000
同时还要根据你自己所要解决的问题

1891
01:11:39,000 --> 01:11:42,000
如果说你要解决问题是那么的 unique 的话

1892
01:11:42,000 --> 01:11:46,000
那可能就你要可能你本就是那个是你解决问题的一部分了

1893
01:11:46,000 --> 01:11:48,000
但是如果是为了创新

1894
01:11:48,000 --> 01:11:50,000
你知道现在想来的话呢

1895
01:11:50,000 --> 01:11:53,000
其实我们有一些就是自大吧

1896
01:11:53,000 --> 01:11:56,000
就是实际上在在一开始在

1897
01:11:56,000 --> 01:12:01,000
包括在最初的阶段有一些就是说故意的好像说

1898
01:12:01,000 --> 01:12:05,000
哎我就要走自己的路来来来来来所谓创新

1899
01:12:05,000 --> 01:12:10,000
但是在实际上很多时候是就是就是就是一种自大

1900
01:12:10,000 --> 01:12:12,000
不是一个解决问题的方式

1901
01:12:12,000 --> 01:12:16,000
对他刚才是走不下去前端前端开发有很多这种领域啊

1902
01:12:16,000 --> 01:12:19,000
就特别是就最近这一两年特别明显

1903
01:12:19,000 --> 01:12:22,000
你可以看到经常隔三岔我才说来个我们一个什么

1904
01:12:22,000 --> 01:12:24,000
又一个新的一个 framework 出来

1905
01:12:24,000 --> 01:12:28,000
然后再推销一个 totally different way of doing things

1906
01:12:28,000 --> 01:12:31,000
然后就你有他有些闪光点也是不错的

1907
01:12:31,000 --> 01:12:36,000
但是可能你因为他这个整个一个是推动的那个呢

1908
01:12:36,000 --> 01:12:39,000
可能团队少可能就是甚至有时候就一两个人两三个人这样

1909
01:12:39,000 --> 01:12:44,000
他推动不下去然后又没有形成这个社区的这个这个合力

1910
01:12:44,000 --> 01:12:47,000
就是你很难把这些很有意思很有创意的点

1911
01:12:47,000 --> 01:12:52,000
然后能够真的把这个这些好的 idea 被被大众所普及吧我觉得

1912
01:12:52,000 --> 01:12:57,000
嗯你知道这个这点上最明显的公司是什么吗

1913
01:12:57,000 --> 01:13:03,000
就是 Google 隔三岔我就得要翻翻点新东西出来

1914
01:13:03,000 --> 01:13:08,000
然后开始推什么 dart 啊 anglo 啊 polymer 啊

1915
01:13:08,000 --> 01:13:15,000
说来这个什么 anglo 现在应该是什么演习息骨了吗

1916
01:13:15,000 --> 01:13:21,000
不是吧我怎么觉得 anglo 反而有就是大行其道的趋势

1917
01:13:21,000 --> 01:13:25,000
但我觉得他的那条方式整个是很很落后很复杂的呀

1918
01:13:25,000 --> 01:13:31,000
无套你这个是上周没有更新了吧已经你还在提起上周的代码是吗

1919
01:13:31,000 --> 01:13:36,000
什么他已经被彻底抛弃了吗不可能吧就因为就我所知

1920
01:13:36,000 --> 01:13:40,000
好吧也许是也许是老欧洲们比较保守的人就是

1921
01:13:40,000 --> 01:13:44,000
欧洲还是有很多项目是在用 anglo 的这些

1922
01:13:44,000 --> 01:13:48,000
我是这么看的就首先他出那个 2.0 版本吧就出完全改

1923
01:13:48,000 --> 01:13:52,000
就基本上是一个非常大的改动就否定这个没错

1924
01:13:52,000 --> 01:13:57,000
否定掉了他 1.0 的很多这种这种概念和说法

1925
01:13:57,000 --> 01:14:00,000
然后那么就会有一个问题那用 1.0 的怎么切过来

1926
01:14:00,000 --> 01:14:03,000
然后就说整个概念要重新学习一遍对不对

1927
01:14:03,000 --> 01:14:09,000
也没有吧没有这么夸张因为就我的前公司其实是在用 anglo

1928
01:14:09,000 --> 01:14:15,000
我去我后来跟他们通一下气他们说已经签过来了没什么问题那还不错

1929
01:14:15,000 --> 01:14:22,000
然后有可以签吗可以签吗他现在就是他们他们认为是 Apt 就是

1930
01:14:22,000 --> 01:14:29,000
是完全可以的没有什么他们不觉得在 mentality 上有什么不可逾越的障碍

1931
01:14:29,000 --> 01:14:34,000
至少是没有问题的问题是你那个是他没有 official 的 support

1932
01:14:34,000 --> 01:14:40,000
他那个 1.x 跟那个 2.0 之前是没有 official 那个连接的

1933
01:14:41,000 --> 01:14:45,000
对这是没有但就是要自己改写

1934
01:14:45,000 --> 01:14:48,000
anglo 的主要问题在我看来是这样几个

1935
01:14:48,000 --> 01:14:53,000
他的他有非常高的 learning curve 他的概念非常概念太多了

1936
01:14:53,000 --> 01:14:58,000
概念非常非常非常他跟他是 backbone 的另外一个

1937
01:14:58,000 --> 01:15:04,000
他跟 backbone 是光谱的两端一个是完全几乎是完全没有没有 opinion

1938
01:15:04,000 --> 01:15:07,000
另外一个 anglo jazz 就是明确的说

1939
01:15:07,000 --> 01:15:12,000
就跟苹果一样的

1940
01:15:12,000 --> 01:15:17,000
有很多人是可能是你可以说他是一个 anglo 的 developer

1941
01:15:17,000 --> 01:15:19,000
但他并不是一个 jazz group 的 developer

1942
01:15:19,000 --> 01:15:23,000
这个也非常这个 google 了这是 google

1943
01:15:23,000 --> 01:15:32,000
同时你要想最最就是我觉得最不好的一点是说

1944
01:15:32,000 --> 01:15:34,000
google 他本身自己也不用 anglo 了

1945
01:15:34,000 --> 01:15:38,000
你看他有多少产品是用 anglo 的你就是我搜过啊

1946
01:15:38,000 --> 01:15:40,000
就是大家都好像不是很确定

1947
01:15:40,000 --> 01:15:42,000
然后有人说 google trends 是用他写的

1948
01:15:42,000 --> 01:15:46,000
有人说很多 internal tool 是用他写的

1949
01:15:46,000 --> 01:15:51,000
最近的 inbox 都不是用那个 anglo 的事他自己都不用

1950
01:15:51,000 --> 01:15:55,000
我觉得这个本身狗粮都不吃还我们吃真是

1951
01:15:55,000 --> 01:16:00,000
对你要 dark food 吗这个就是还是比较明显的一点

1952
01:16:00,000 --> 01:16:05,000
我觉得对于这个公司对一个产品到底有多大的支持

1953
01:16:05,000 --> 01:16:09,000
他自己用不用这点是非常重要的相对来说像 react 的话

1954
01:16:09,000 --> 01:16:13,000
facebook 他是自己在大量的使用了

1955
01:16:13,000 --> 01:16:17,000
包括 react native 也是自己在 dark food 之后才拿出来给别人吃的

1956
01:16:17,000 --> 01:16:22,000
对他做了那个 groups 然后大家都没发现他是这种方式实现的

1957
01:16:22,000 --> 01:16:26,000
对我觉得这个还是蛮好的一个方式

1958
01:16:27,000 --> 01:16:32,000
所以为了总的来说你们这个迁移就是说也是进行了蛮顺利的

1959
01:16:32,000 --> 01:16:37,000
就整个说那你的这个体验或者说有个什么总结性的感想是怎么样的

1960
01:16:37,000 --> 01:16:42,000
我的感想是就对那个 migration 本身来说的话是

1961
01:16:42,000 --> 01:16:48,000
他比原本你所想象中要容易开始

1962
01:16:48,000 --> 01:16:52,000
同时呢你上了贼船之后呢就很难下来吧

1963
01:16:52,000 --> 01:16:54,000
是不想下来吧

1964
01:16:54,000 --> 01:16:58,000
是不想下来然后再往后面走一点呢

1965
01:16:58,000 --> 01:17:03,000
你会遇到就是在超超超过 view 的层面上你会遇到更多的问题

1966
01:17:03,000 --> 01:17:06,000
比方说我们刚刚说的 floss 这个 architecture

1967
01:17:06,000 --> 01:17:11,000
然后你也会碰到关于 toolchain 的问题

1968
01:17:11,000 --> 01:17:16,000
之前就是我们的 toolchain 都是我现在是 outdated 了

1969
01:17:16,000 --> 01:17:18,000
也不算完全 outdated 就是不流行了

1970
01:17:18,000 --> 01:17:22,000
就比方说用 RJS 用 Bower 做 package management

1971
01:17:22,000 --> 01:17:26,000
用 required 做 dependency management

1972
01:17:26,000 --> 01:17:28,000
在新的这个

1973
01:17:28,000 --> 01:17:31,000
听起来已经是爷爷辈了

1974
01:17:31,000 --> 01:17:33,000
好吧

1975
01:17:33,000 --> 01:17:40,000
这个不算什么我前两天那个做了一个非常小的小小小小级别的项目

1976
01:17:40,000 --> 01:17:46,000
但是因为公司的限制在我的 ubuntu box 上是装不了

1977
01:17:46,000 --> 01:17:50,000
是装不了 jam 的因为我没有

1978
01:17:50,000 --> 01:17:54,000
出于某种原因没有权限还是怎么着还是因为防火墙的问题

1979
01:17:54,000 --> 01:18:00,000
好像是因为防火墙的问题就是我只能利用电脑上已经装了的工具做一个非常小的项目

1980
01:18:00,000 --> 01:18:02,000
你猜我是怎么完成的

1981
01:18:02,000 --> 01:18:09,000
我用 C preprocessor 写 CSS

1982
01:18:09,000 --> 01:18:12,000
可以节省一批

1983
01:18:12,000 --> 01:18:21,000
对我用 C preprocessor 写了一部分的 CSS

1984
01:18:21,000 --> 01:18:27,000
然后用 python 生成一堆 HTML 然后再用 preprocessor 把这堆 HTML

1985
01:18:27,000 --> 01:18:31,000
include 到三个不同的分页之类

1986
01:18:31,000 --> 01:18:37,000
我觉得自己实在是太不重新放映文字了

1987
01:18:37,000 --> 01:18:40,000
你这重用度也有点高

1988
01:18:40,000 --> 01:18:46,000
这跟我们前端界差别蛮大前端界这两年工具也是换了好几轮了

1989
01:18:46,000 --> 01:18:50,000
现在为了你们现在是说是什么样一个状况

1990
01:18:50,000 --> 01:18:55,000
我们就想我这个工具线的 migration 其实挺难的

1991
01:18:55,000 --> 01:19:05,000
但是我是想要就是至少要去 evaluate 一下看说怎么样能够做这个 migration

1992
01:19:05,000 --> 01:19:10,000
我是很希望能够赶上时代的

1993
01:19:10,000 --> 01:19:13,000
你们现在的工具链是什么样的状况

1994
01:19:13,000 --> 01:19:15,000
我刚刚说的是我们现在的状态

1995
01:19:15,000 --> 01:19:17,000
还是在用没有改是吧

1996
01:19:17,000 --> 01:19:20,000
因为工具链的更新是非常难的

1997
01:19:20,000 --> 01:19:25,000
因为你把所有东西 glue 起来了

1998
01:19:25,000 --> 01:19:28,000
然后可以开始用了这种是一个很好的事情

1999
01:19:28,000 --> 01:19:32,000
但是你要又重新要 adopt 新的一套东西的话

2000
01:19:32,000 --> 01:19:35,000
那有很多问题就要解决了

2001
01:19:35,000 --> 01:19:38,000
然后我还没有时间来做这个事

2002
01:19:38,000 --> 01:19:42,000
我觉得这个有点像就是就好像你要学习编程

2003
01:19:42,000 --> 01:19:45,000
然后你开始折腾 linux

2004
01:19:45,000 --> 01:19:48,000
然后不小心折腾 linux 折腾一年半

2005
01:19:48,000 --> 01:19:50,000
就还是非常有可能的

2006
01:19:50,000 --> 01:19:51,000
终于把电机配好了

2007
01:19:51,000 --> 01:19:54,000
纠结说我这到底应该是用 vim 还是应该用 github

2008
01:19:54,000 --> 01:19:58,000
我应该用 kde 还是用 sorry

2009
01:19:58,000 --> 01:20:02,000
应该用 vim 还是应该用 emacs

2010
01:20:02,000 --> 01:20:04,000
是应该用 gnome 还是应该用 kde

2011
01:20:04,000 --> 01:20:07,000
然后是应该用 freebsd 还是应该用 linux

2012
01:20:07,000 --> 01:20:11,000
然后等你折腾一年半之后你还是没有开始学编程

2013
01:20:11,000 --> 01:20:14,000
就是在 toolchain 这方面我真有体会

2014
01:20:14,000 --> 01:20:18,000
我觉得有时候一个工具可能你会觉得它很旧了

2015
01:20:18,000 --> 01:20:24,000
但是更换它的时间成本可能要远远超过你

2016
01:20:24,000 --> 01:20:27,000
因为更换而带来的手艺

2017
01:20:27,000 --> 01:20:30,000
比较现实的问题啊

2018
01:20:30,000 --> 01:20:37,000
在这个 react 这个 community 这个现实的问题是说

2019
01:20:37,000 --> 01:20:43,000
大部分人现在新的开发的东西都不再支持

2020
01:20:43,000 --> 01:20:51,000
比如像 bauer 这样的爷爷被 call on quote 的工具

2021
01:20:51,000 --> 01:20:56,000
然后他也不支持 require json 的 require 方式

2022
01:20:56,000 --> 01:21:05,000
那就损失了很多重用那个社区的工具的好处

2023
01:21:05,000 --> 01:21:07,000
所以这点上是比较头痛的

2024
01:21:07,000 --> 01:21:11,000
这点上是我的 migration 的主要动力吧

2025
01:21:11,000 --> 01:21:19,000
我自己的感觉就是现在这套前端的固件工具还是蛮简单的

2026
01:21:19,000 --> 01:21:27,000
最基本的话你用 galp 做一个基本的 task manager

2027
01:21:27,000 --> 01:21:31,000
然后再用 browser file

2028
01:21:31,000 --> 01:21:35,000
然后就可以把它用 npm 那些方式就管理起来

2029
01:21:35,000 --> 01:21:36,000
整个还是比较简单的

2030
01:21:36,000 --> 01:21:41,000
问题就是说经常会升级一下然后就不能用了

2031
01:21:41,000 --> 01:21:45,000
前几天不是刚发布那个 node 发布了 0.12 的那个版本吗

2032
01:21:45,000 --> 01:21:49,000
就 break 掉了很多东西要等个可能三四天

2033
01:21:49,000 --> 01:21:54,000
等他们把那些打个什么 patch version 上去才可以再构建出来

2034
01:21:54,000 --> 01:22:00,000
就整个我觉得还是就是给人一种很 fragile 很脆的感觉

2035
01:22:00,000 --> 01:22:02,000
的确是这样的

2036
01:22:02,000 --> 01:22:04,000
我就比较比较糟糕

2037
01:22:04,000 --> 01:22:05,000
哎就有一个小问题还没有问好

2038
01:22:05,000 --> 01:22:07,000
在高速发展的东西都是什么

2039
01:22:07,000 --> 01:22:13,000
以周围前进步伐的时候总是有那么一段时间是不行

2040
01:22:13,000 --> 01:22:15,000
其实是有会有这样那样问题的

2041
01:22:15,000 --> 01:22:18,000
那个 wilo 再问一下你们一个问题

2042
01:22:18,000 --> 01:22:21,000
你们有打算再采用那个 ES 6 吗

2043
01:22:21,000 --> 01:22:23,000
有哎

2044
01:22:23,000 --> 01:22:28,000
我在就是说我在给团队制定计划的时候

2045
01:22:28,000 --> 01:22:35,000
有一个重要的点就是我希望大家现在就开始就是非常对 ES 6 的特性非常熟悉

2046
01:22:35,000 --> 01:22:42,000
这样的话我们可以在往后会很好的就是开始使用它

2047
01:22:42,000 --> 01:22:44,000
但是这个也跟拖欠有关系

2048
01:22:44,000 --> 01:22:49,000
因为我们要就意味着我们要引进新的一个工具就是 6 to 5

2049
01:22:49,000 --> 01:22:51,000
这样一个工具

2050
01:22:51,000 --> 01:22:53,000
已经改名了哈哈哈你又没跟上时代

2051
01:22:53,000 --> 01:22:55,000
改成什么

2052
01:22:55,000 --> 01:22:57,000
他改成 babel 啊

2053
01:22:57,000 --> 01:23:00,000
突然觉得八别塔

2054
01:23:00,000 --> 01:23:03,000
突然觉得这个领域好残忍啊

2055
01:23:03,000 --> 01:23:08,000
对就是经常你这不光是说跟不上时代你可能名都找不着

2056
01:23:09,000 --> 01:23:15,000
就那天我在我在跟我在把我的那个就升级一下我的那个依赖的时候

2057
01:23:15,000 --> 01:23:18,000
等他弹出一个错误说什么 6 to 5 is not babel

2058
01:23:18,000 --> 01:23:20,000
什么玩意点出去看哈

2059
01:23:20,000 --> 01:23:24,000
演员的名字都改了在根目上就就确实是有点

2060
01:23:24,000 --> 01:23:28,000
就下次再找不着他都是感觉你知道吗

2061
01:23:28,000 --> 01:23:30,000
好残忍啊好残忍啊

2062
01:23:30,000 --> 01:23:34,000
就所以前段开发快吧那天我还看那个什么

2063
01:23:34,000 --> 01:23:38,000
我们不是在 v 2 上面有发布那我们的节目的讨论区吗

2064
01:23:38,000 --> 01:23:41,000
上面还有人在抱怨说这个什么前端

2065
01:23:41,000 --> 01:23:47,000
进前端开发步伐进步太快已经感觉有点跟不上好累什么什么的

2066
01:23:47,000 --> 01:23:49,000
确实是我觉得是这样就是

2067
01:23:49,000 --> 01:23:52,000
有时候我会觉得说

2068
01:23:52,000 --> 01:23:55,000
呃这些做前端的人都从来不休假吗

2069
01:23:55,000 --> 01:23:58,000
就你你你你你出去休假

2070
01:23:58,000 --> 01:24:01,000
回来之后发现自己所学的知识全都作废了

2071
01:24:01,000 --> 01:24:05,000
前端开发人多吗一个人休假千千万人还在工作没事

2072
01:24:05,000 --> 01:24:08,000
还有还有像为了现在熬夜这样干的

2073
01:24:08,000 --> 01:24:11,000
这不会很没有安全感吧

2074
01:24:11,000 --> 01:24:16,000
那没办法这就是一个拼体力的能拼体力的时代

2075
01:24:16,000 --> 01:24:22,000
嗯我看你怎么看呢就是从从另外一个角度来说话也是比较

2076
01:24:22,000 --> 01:24:26,000
激动人心的吧就是有很多对啊很多新的东西出来

2077
01:24:26,000 --> 01:24:34,000
特别是如果说就啊你抱着一种比较积极的态度来看的话啊这些

2078
01:24:34,000 --> 01:24:40,000
好的工具所解决的问题实际上应该是你能够感同身受的问题这样的话

2079
01:24:40,000 --> 01:24:45,000
就是这些你对这些新的工具出来实际上是抱着非常积极的态度

2080
01:24:45,000 --> 01:24:50,000
因为觉得说哦他可以解决我刚才听成抱着比较鸡贼的

2081
01:24:50,000 --> 01:25:01,000
你刚刚就抱着很鸡贼的态度啊对我刚才就我刚才就蛮鸡贼的在想我说这样我可以吗

2082
01:25:01,000 --> 01:25:11,000
对反正我这块 ESO 的我也最近也在自己的一个就是那个什么就是我们 IPM 的管理后台

2083
01:25:11,000 --> 01:25:17,000
我也在一个接着折腾他嘛这套我觉得摸得还挺舒服这是还是体验还是不错的

2084
01:25:17,000 --> 01:25:26,000
一旦摸就是弄通弄通他这个 build 之后的那个 toolchain 之后写起来还是蛮爽的我觉得

2085
01:25:26,000 --> 01:25:29,000
威龙只可以私下再交流一下

2086
01:25:29,000 --> 01:25:30,000
好的

2087
01:25:30,000 --> 01:25:35,000
那今天时间也差不多了威龙威龙还要去上班然后有什么特别要再说的吗

2088
01:25:35,000 --> 01:25:39,000
然后没有的话我们就把要放威龙走了

2089
01:25:40,000 --> 01:25:49,000
对我们我们叫什么物的主要是嘉宾近期用把威龙不请则已请就请了两期

2090
01:25:49,000 --> 01:26:03,000
所以也是非常感谢非常感谢同学能在百忙之中来交流一下他从 backbone 迁移到 react 的经验

2091
01:26:03,000 --> 01:26:09,000
也非常开心跟两位继续聊天也非常开心跟听众分享我们的经历

2092
01:26:09,000 --> 01:26:13,000
如果大家有什么问题的话可以随时跟我联系

2093
01:26:13,000 --> 01:26:19,000
我们还要预告一下就是威龙最近在潜心专业那个 react native

2094
01:26:19,000 --> 01:26:24,000
就现在还大家只是神龙见首不见尾的一个高级工具

2095
01:26:24,000 --> 01:26:29,000
然后等他摸熟了我们会让威龙再回来跟我们再聊一聊那个东西

2096
01:26:29,000 --> 01:26:35,000
所以我已经是被绑架了是吗这个消息消息被发出去了

2097
01:26:35,000 --> 01:26:40,000
对对你已经逃不掉了我们会争取给你配女嘉宾

2098
01:26:40,000 --> 01:26:43,000
有这种可能吗

2099
01:26:43,000 --> 01:26:46,000
我就说一下吧好啊

2100
01:26:46,000 --> 01:26:50,000
那听众们我们就那个下次再见喽

2101
01:26:50,000 --> 01:26:53,000
OK 威龙拜拜

2102
01:26:53,000 --> 01:26:55,000
上班小心点

2103
01:26:55,000 --> 01:26:56,000
拜拜

2104
01:26:59,000 --> 01:27:03,000
那个吴涛你还在吗

2105
01:27:03,000 --> 01:27:07,000
我在 OK 那我们接着因为今天可能时间还不到吗

2106
01:27:07,000 --> 01:27:12,000
我们在这边吹会儿今天个 no 词里面没有没有漏掉那些东西

2107
01:27:12,000 --> 01:27:13,000
可以了

2108
01:27:13,000 --> 01:27:17,000
我把那个 no 词有两个事情没有说

2109
01:27:17,000 --> 01:27:21,000
其实对就可以说那个 CR 和 ISM

2110
01:27:21,000 --> 01:27:26,000
好吧那个 CR 是微软的那个 donate 的 round time

2111
01:27:26,000 --> 01:27:29,000
round time 嘛 common language round time 对吧

2112
01:27:29,000 --> 01:27:35,000
通用语言运行时运行时好久没有听过这个词了

2113
01:27:35,000 --> 01:27:38,000
他他他怎么了

2114
01:27:38,000 --> 01:27:46,000
就有一个大牛在 github 上面提交了一个 merge request

2115
01:27:46,000 --> 01:27:50,000
然后这个 merge request 的

2116
01:27:50,000 --> 01:27:58,000
的目的就是让 CLRdonate 的 call CR 可以在 OS X 上编译

2117
01:27:58,000 --> 01:28:03,000
那什么意思就是以后的那 donate 程序可以直接在 OS X 上运行了吗

2118
01:28:03,000 --> 01:28:10,000
donate 程序非非 graphic 非图像化的那一部分是可以在 OS X 上跑

2119
01:28:10,000 --> 01:28:15,000
有不包含图像化的这件事情的 donate 程序吗

2120
01:28:15,000 --> 01:28:21,000
我就想问一下有不包含就是 gui 的 donate 程序吗

2121
01:28:21,000 --> 01:28:24,000
当然有吧

2122
01:28:24,000 --> 01:28:27,000
Windows 也是有命运行的好吗

2123
01:28:27,000 --> 01:28:30,000
我知道有 parts 那有人用吗真的吗

2124
01:28:30,000 --> 01:28:34,000
不是吧这个 Windows 命运行还是还有很多很多人

2125
01:28:34,000 --> 01:28:38,000
他能干嘛呢就是有什么用场合要用到他呢

2126
01:28:38,000 --> 01:28:42,000
大部分时候不都是有一个什么就有一个管理界面东西去用用他吗

2127
01:28:42,000 --> 01:28:48,000
怎么说呢就是如果你要愿意的话你可以在 power shell 里面

2128
01:28:48,000 --> 01:28:53,000
完成大部分使用 graphic USMFs 可以完成

2129
01:28:53,000 --> 01:28:57,000
我知道这个是可以但是前提是你在实际上有人这么干吗

2130
01:28:57,000 --> 01:29:01,000
你问倒我因为我从来没有接触过任何一个 Windows

2131
01:29:01,000 --> 01:29:07,000
以 Windows 为技术为主的 server developer

2132
01:29:07,000 --> 01:29:19,000
但就我所知很多.net 做的 web application 其实说起来也是没有什么

2133
01:29:19,000 --> 01:29:24,000
就是传统音上的一个 gui

2134
01:29:24,000 --> 01:29:30,000
用 GDI 化的 gui 的没有我的意思吧就是他跑在服务座位上

2135
01:29:30,000 --> 01:29:34,000
但是他有一个比如说他可能有一个 web 界面让你可以配置他

2136
01:29:34,000 --> 01:29:40,000
就像那个什么什么什么企业软件那种东西就是他没有那个这个就图形化的前台

2137
01:29:40,000 --> 01:29:47,000
但只是就是通过比如说这个叫什么 asp.net 通过这个在 IE 里面运行的方式来做

2138
01:29:47,000 --> 01:29:54,000
asp.net 的程序其实也是你在开发他的过程之中用到 gui 就是 virtual studio

2139
01:29:54,000 --> 01:29:59,000
然后当你把他 deploy 之后你用到 gui 就是他的网页端

2140
01:29:59,000 --> 01:30:10,000
所以他难道不也是一个像 Java 的 app 一样 Java 一一样不也是一个没有 gui 的企业级的应用吗

2141
01:30:10,000 --> 01:30:16,000
对对对我就很好奇啊比如说你现在看现在应该有相当长的时间了吧

2142
01:30:16,000 --> 01:30:21,000
那个 Java runtime 就是以前我记得是自带那个 Java runtime 是吧

2143
01:30:22,000 --> 01:30:28,000
对现在没有而且而且现在你升了级之后这好几个版本之前就不计了

2144
01:30:28,000 --> 01:30:33,000
对啊对啊而且而且他会提醒你说你真的要装吗你真的要装吗你真的要装吗

2145
01:30:33,000 --> 01:30:45,000
他不会提醒你就是我记得从 10.9 升到 10.10 的时候 10.9 上装的 Java 6 被 10.10 自动删掉了

2146
01:30:45,000 --> 01:30:47,000
就是一声不吭的给你删掉了

2147
01:30:47,000 --> 01:30:57,000
他会这样就是说你要运行一个 Java 的程序的时候他会问你说你只是要打 Java-version 然后然后他就会跳出来一个提示框

2148
01:30:57,000 --> 01:31:05,000
你要装吗真的要装吗装的后很严重哦你还是不要装了吧他会这么他会这么去给你不要这样提问

2149
01:31:05,000 --> 01:31:12,000
那那那就是说那如果这个 COR 的实现就是在 LS 上运行就差不多也就这个结局吧

2150
01:31:18,000 --> 01:31:26,000
我不知道应该怎么回答这个因为首先如果你从切实的实际实用意义上来讲这其实不是一点大事

2151
01:31:26,000 --> 01:31:31,000
因为反正没有人会把 OS 10 部署在服务端不是吗

2152
01:31:31,000 --> 01:31:36,000
你还别说真有人这么干有一个那个叫什么

2153
01:31:36,000 --> 01:31:43,000
但我相信这样做的市场可能比 FreeBSD 还要小对不起我又黑了 FreeBSD

2154
01:31:43,000 --> 01:31:50,000
FreeBSD 用很大的好不好 NGX 比 OpenBSD 还要少

2155
01:31:50,000 --> 01:31:56,000
比 DragonflyBSD 还要少差不多差不多对我明白你的意思

2156
01:31:56,000 --> 01:32:03,000
就可能还是只是仅限于那种比较非常专业的领域可能还有这种需求吧我觉得

2157
01:32:04,000 --> 01:32:08,000
专业这两个字是应该读成奇葩吗

2158
01:32:09,000 --> 01:32:10,000
这个就 up to you 了

2159
01:32:10,000 --> 01:32:24,000
我的理解是这一个就是 CORS-LR 运行在 OS 10 上这件事情使得你用一台 Mac 开发.NET 服务端的程序成为了可能

2160
01:32:24,000 --> 01:32:31,000
就是你不再需要一个 Linux 的虚拟机或者怎么样直接在本机上原生开发原生运行

2161
01:32:31,000 --> 01:32:41,000
在 OS 10 上运行一个.exe 文件的这种史诗时刻的行为终于被支持了

2162
01:32:41,000 --> 01:32:54,000
但你还别说其实在 Mac 上面做跨平台的开发你还真的是一个假设你要做一个软件是需要同时支持 Mac、Windows、Android 和这个叫什么

2163
01:32:55,000 --> 01:32:56,000
Linux

2164
01:32:56,000 --> 01:33:02,000
你还真的只能在 OS 10 上做就如果你只能选择一台设备的话好

2165
01:33:02,000 --> 01:33:13,000
因为你因为我记得是没有办法在或者没有比较方便可靠的办法在 PC 或者是在其他平台上装 OS 10

2166
01:33:13,000 --> 01:33:17,000
有黑苹果但是经常一升级就好像不行了

2167
01:33:18,000 --> 01:33:26,000
对我的理解是如果你要开发 Android 和 iOS 的话你基本上你肯定会需要一台 Mac 但是事情也是在慢慢改变的

2168
01:33:26,000 --> 01:33:34,000
比如说我好像前两天刚刚看到了一个工具叫什么 Silver 还是什么东西还是叫 Fire

2169
01:33:35,000 --> 01:33:48,000
有这么一个工具现在可以在 Visual Studio 里面写 Swift 然后编译成 iOS 和 Android 程序我不确定是不是这样

2170
01:33:48,000 --> 01:34:01,000
但大体我因为我看到一张截图就是在 Visual Studio 里面写 Swift 的程序但是具体能编译出什么效果来我好像还是得看一下

2171
01:34:01,000 --> 01:34:02,000
应该是可以的

2172
01:34:02,000 --> 01:34:08,000
所以刚才那个 common language runtime 就是微软这个什么通用原因

2173
01:34:08,000 --> 01:34:14,000
它这个是官方微软官方支持吗还是说只是一个玩票性质的东西

2174
01:34:14,000 --> 01:34:20,000
这个东西被 merge 进入了微软官方的 git repository 就是在 github 上面的这个东西

2175
01:34:20,000 --> 01:34:23,000
意思是他们以后要要要负责到底了

2176
01:34:23,000 --> 01:34:27,000
应该是吧不然他们干嘛要

2177
01:34:27,000 --> 01:34:30,000
我的理解这是微软很重要的一个战略举动

2178
01:34:30,000 --> 01:34:32,000
哪里都要去是吧

2179
01:34:32,000 --> 01:34:33,000
对啊

2180
01:34:33,000 --> 01:34:40,000
这也不错其实我觉得那个人称那个 CLR 是比 JVM 好吗

2181
01:34:40,000 --> 01:34:45,000
我是坚决这样相信你

2182
01:34:45,000 --> 01:34:49,000
因为之前我忘了我有什么会有这个印象想讲

2183
01:34:49,000 --> 01:34:54,000
想讲是之前那个很多年前玩那个 Skala 的时候

2184
01:34:54,000 --> 01:34:56,000
就看他们怎么去实现那些到

2185
01:34:56,000 --> 01:34:59,000
因为 Skala 最开始是在那个 JVM 上面实现的嘛

2186
01:34:59,000 --> 01:35:06,000
就说 JVM 有很多坑那个什么 Skala 很多那种特性都不是太好实现

2187
01:35:06,000 --> 01:35:10,000
但反而是在那个因为 Skala 也有那个 CLR 的版本吧好像

2188
01:35:10,000 --> 01:35:16,000
就反而是在 CLR 上实现起来效率会就比较简单效率会比较高

2189
01:35:16,000 --> 01:35:21,000
Skala 是带着料靠跳舞然后这个料靠指的是 JVM

2190
01:35:21,000 --> 01:35:24,000
对对对 JVM 有很多奇葩的地方嘛

2191
01:35:24,000 --> 01:35:26,000
它老嘛没办法

2192
01:35:26,000 --> 01:35:37,000
虽然一方面我们也可以说 JVM 是一个被大量的人力精力所优化过的一个讯息

2193
01:35:37,000 --> 01:35:39,000
企业软件

2194
01:35:40,000 --> 01:35:46,000
对而且我相信在企业性应用上面 CLR 应该还不是 JVM 的对手

2195
01:35:46,000 --> 01:35:49,000
虽然你可以说这个东西要比 CLR 要先进一些

2196
01:35:49,000 --> 01:35:51,000
不不比 JVM 要先进一些

2197
01:35:51,000 --> 01:35:53,000
体量上还是完全不一样了

2198
01:35:53,000 --> 01:35:54,000
对啊

2199
01:35:54,000 --> 01:35:58,000
主要是 JVM 可以有那个什么有个开源版可以免费大家自己改

2200
01:35:58,000 --> 01:36:02,000
而且不是现在又有什么安卓有什么 DAVIC 大家知道吗

2201
01:36:02,000 --> 01:36:04,000
那怎么念 DAVIC 对吧

2202
01:36:04,000 --> 01:36:05,000
DAVIC 对吧

2203
01:36:05,000 --> 01:36:10,000
因为那种东西就是它其实变成一种怎么讲事实的标准了我觉得

2204
01:36:10,000 --> 01:36:16,000
不是前段那个什么 Google 跟 Oracle 打官司还在争 JVM 的 API

2205
01:36:16,000 --> 01:36:19,000
到底是不是可以被专利什么版权保护的吗

2206
01:36:19,000 --> 01:36:23,000
Oracle 真是丧心病狂的公司

2207
01:36:23,000 --> 01:36:30,000
这说 Oracle 的法务是超过其他所有部门的员工总和吗

2208
01:36:30,000 --> 01:36:32,000
就他们对吧

2209
01:36:32,000 --> 01:36:39,000
而且即便如此他们的智商加起来还是低于任何一个单一部门

2210
01:36:39,000 --> 01:36:41,000
但这没有关系啊

2211
01:36:41,000 --> 01:36:45,000
关键人家只能够在法庭上搞定官司这个就够牛逼了

2212
01:36:45,000 --> 01:36:47,000
好啊

2213
01:36:47,000 --> 01:36:49,000
然后 CLR 它这样的话

2214
01:36:49,000 --> 01:36:51,000
对了那个有个问题想怎么问了问了

2215
01:36:51,000 --> 01:36:57,000
就 CLR 开源之后它还需要向微软支付费用吗

2216
01:36:57,000 --> 01:36:59,000
就企业使用的话

2217
01:36:59,000 --> 01:37:07,000
开源之后需要向微软支付费用

2218
01:37:07,000 --> 01:37:09,000
我相信应该是不需要的

2219
01:37:09,000 --> 01:37:14,000
因为 CLR.NET 从来没有作为一种 license model 被使用

2220
01:37:14,000 --> 01:37:17,000
因为之前它都是只能在 Windows 上面用嘛

2221
01:37:17,000 --> 01:37:18,000
就是说

2222
01:37:18,000 --> 01:37:21,000
对就是微软之前是靠平台

2223
01:37:21,000 --> 01:37:23,000
不是靠软件平台赚钱的

2224
01:37:23,000 --> 01:37:28,000
而是靠操作系统和硬件赚钱

2225
01:37:28,000 --> 01:37:34,000
你要买它的服务器和操作系统开发工具你全部都要买嘛

2226
01:37:34,000 --> 01:37:35,000
对不对

2227
01:37:35,000 --> 01:37:39,000
那我把这个整套工具都卖给你

2228
01:37:39,000 --> 01:37:42,000
我可以赚钱可以 cover 我的开发层面没问题

2229
01:37:42,000 --> 01:37:44,000
那现在它开源之后

2230
01:37:44,000 --> 01:37:46,000
比如说有 CLR 可以在 Minecraft 上运行

2231
01:37:46,000 --> 01:37:48,000
现在又可以在 OS X 上运行

2232
01:37:48,000 --> 01:37:50,000
那它怎么办

2233
01:37:50,000 --> 01:37:51,000
卖服务吧

2234
01:37:51,000 --> 01:37:53,000
就是卖怎么 commercial support

2235
01:37:56,000 --> 01:37:57,000
应该是吧

2236
01:37:57,000 --> 01:38:00,000
然后 MSDN 要钱了不要钱了

2237
01:38:00,000 --> 01:38:04,000
MSDN 要付费的四个 subscription

2238
01:38:05,000 --> 01:38:10,000
可是为什么我可以在 MSDN 上查到所有 API 的

2239
01:38:10,000 --> 01:38:12,000
它有大部分的是开放的

2240
01:38:12,000 --> 01:38:16,000
但是我记得有一些不全还是怎么样我忘了

2241
01:38:16,000 --> 01:38:17,000
哪一部分的

2242
01:38:17,000 --> 01:38:19,000
我回头我们再查一下

2243
01:38:19,000 --> 01:38:24,000
我之前也有关注过这个事情我都忘了为什么

2244
01:38:24,000 --> 01:38:32,000
我觉得主要问题是现在温软面临的不是一个怎么赚钱的问题

2245
01:38:32,000 --> 01:38:34,000
而是一个安身立命的问题

2246
01:38:34,000 --> 01:38:41,000
你再不去试图以某种方式占领一下

2247
01:38:41,000 --> 01:38:43,000
不说占领了

2248
01:38:43,000 --> 01:38:47,000
就说能够守住服务器上的仅有一点点阵地的话

2249
01:38:47,000 --> 01:38:54,000
这是一个非常自然或者说非常理性的选择

2250
01:38:54,000 --> 01:38:58,000
其实就不管 3721 如果有足够多的人用的话

2251
01:38:58,000 --> 01:39:01,000
我就总有一线希望可以赚钱

2252
01:39:01,000 --> 01:39:02,000
但如果没有人用的话

2253
01:39:02,000 --> 01:39:05,000
那别说怎么赚钱那是根本赚不到钱

2254
01:39:05,000 --> 01:39:07,000
活都活不下去的问题了

2255
01:39:07,000 --> 01:39:10,000
这确实是一个挺麻烦的事

2256
01:39:10,000 --> 01:39:12,000
可以看一下他看他之后怎么弄

2257
01:39:13,000 --> 01:39:16,000
不知道他这个怎么就包括运行效率

2258
01:39:16,000 --> 01:39:19,000
就在非 Windows 平台上面的运行效率

2259
01:39:19,000 --> 01:39:21,000
跟 JVM 比起来会怎么样

2260
01:39:21,000 --> 01:39:23,000
这个是挺值得期待的一件事情

2261
01:39:23,000 --> 01:39:27,000
一开始应该不会太好了我相信

2262
01:39:27,000 --> 01:39:29,000
但是我怎么说呢

2263
01:39:29,000 --> 01:39:34,000
我是相信 CLR 会聚集一批 Java hater

2264
01:39:34,000 --> 01:39:36,000
hater is gonna hate

2265
01:39:36,000 --> 01:39:41,000
然后围绕在 CoreCR 周围做出一个生态圈来

2266
01:39:41,000 --> 01:39:44,000
这是我希望迁倒的一种事情

2267
01:39:44,000 --> 01:39:46,000
然后你就可以写回你心爱的 C Sharp

2268
01:39:46,000 --> 01:39:48,000
然后在各种地方跑了是不是

2269
01:39:48,000 --> 01:39:49,000
对嘛

2270
01:39:49,000 --> 01:39:52,000
而且我买了台 PlayStation 4

2271
01:39:52,000 --> 01:39:55,000
然后那天真好奇

2272
01:39:55,000 --> 01:39:56,000
你玩游戏了

2273
01:39:56,000 --> 01:40:00,000
玩什么为了什么游戏买的说吧

2274
01:40:00,000 --> 01:40:05,000
目前只有一个游戏玩就是 The Last of Us

2275
01:40:05,000 --> 01:40:07,000
这个中文叫

2276
01:40:07,000 --> 01:40:08,000
我不知道

2277
01:40:08,000 --> 01:40:10,000
最后的我们

2278
01:40:10,000 --> 01:40:11,000
是吗

2279
01:40:13,000 --> 01:40:17,000
不是应该翻译成一小股残余势力吗

2280
01:40:20,000 --> 01:40:22,000
大叔和罗立的故事

2281
01:40:23,000 --> 01:40:28,000
大叔和罗立在一个僵尸横行的视线里面相应为命的故事

2282
01:40:28,000 --> 01:40:31,000
为什么会突然想买个 PS 4 来玩这个

2283
01:40:32,000 --> 01:40:34,000
其实也不是突然想买

2284
01:40:34,000 --> 01:40:37,000
就一直说要全主机制霸

2285
01:40:37,000 --> 01:40:43,000
然后现在是有了 360 PS 4 和 Xbox One

2286
01:40:43,000 --> 01:40:44,000
齐了很多

2287
01:40:45,000 --> 01:40:46,000
还差一个 PS 3

2288
01:40:46,000 --> 01:40:48,000
PS 3 你就有 4 了还玩 3 吗

2289
01:40:48,000 --> 01:40:51,000
不但有一个非常重要的游戏在 PS 3 上独占的

2290
01:40:51,000 --> 01:40:53,000
现在是 Base Combat

2291
01:40:54,000 --> 01:40:57,000
它那个不会有开发 PS 4 的版本了吗

2292
01:40:58,000 --> 01:40:59,000
不会

2293
01:40:59,000 --> 01:41:03,000
后面空战系列每一作都是独占平台

2294
01:41:03,000 --> 01:41:05,000
而且绝对不会移植

2295
01:41:05,000 --> 01:41:06,000
OK

2296
01:41:06,000 --> 01:41:08,000
就是我上次在你那里玩的那一款吗

2297
01:41:09,000 --> 01:41:10,000
应该是

2298
01:41:10,000 --> 01:41:12,000
还在巴登巴登的时候

2299
01:41:12,000 --> 01:41:13,000
对

2300
01:41:13,000 --> 01:41:14,000
那个真的挺好玩

2301
01:41:15,000 --> 01:41:16,000
上一期

2302
01:41:18,000 --> 01:41:19,000
然后

2303
01:41:21,000 --> 01:41:25,000
我刚才说了 PS 4 的开发工具是 C-Sharp

2304
01:41:25,000 --> 01:41:26,000
蛤

2305
01:41:27,000 --> 01:41:31,000
至少我现在玩的 The Last of Us 是用 C-Sharp 写的

2306
01:41:31,000 --> 01:41:32,000
玩游戏吗

2307
01:41:32,000 --> 01:41:33,000
如果我们看错了

2308
01:41:33,000 --> 01:41:34,000
可以吗

2309
01:41:35,000 --> 01:41:36,000
对啊

2310
01:41:36,000 --> 01:41:37,000
我也觉得挺惊讶的

2311
01:41:37,000 --> 01:41:38,000
你怎么

2312
01:41:38,000 --> 01:41:41,000
你是说 C-Sharp 的性能可以写那种什么

2313
01:41:41,000 --> 01:41:44,000
很对性能有极高要求的游戏

2314
01:41:45,000 --> 01:41:48,000
从目前得到的信息来看是这样的

2315
01:41:48,000 --> 01:41:49,000
哇靠

2316
01:41:49,000 --> 01:41:50,000
而且

2317
01:41:51,000 --> 01:41:52,000
而且你不要

2318
01:41:52,000 --> 01:41:55,000
那个 Unity 整个都是用 C-Sharp 写的

2319
01:41:56,000 --> 01:41:58,000
但是我理解它的那些什么

2320
01:41:58,000 --> 01:42:00,000
比如说核心路径

2321
01:42:00,000 --> 01:42:03,000
那可能还是用 C 或者是什么

2322
01:42:03,000 --> 01:42:05,000
甚至汇编应该不会用了吧

2323
01:42:06,000 --> 01:42:07,000
也很难说

2324
01:42:07,000 --> 01:42:09,000
好吧我再来确认一下

2325
01:42:09,000 --> 01:42:11,000
The Last of Us

2326
01:42:12,000 --> 01:42:13,000
C-Sharp

2327
01:42:19,000 --> 01:42:20,000
OK

2328
01:42:20,000 --> 01:42:23,000
Sony WWS ATF

2329
01:42:23,000 --> 01:42:24,000
就是

2330
01:42:24,000 --> 01:42:28,000
Sony 提供的这一套开发工具

2331
01:42:28,000 --> 01:42:29,000
嗯

2332
01:42:30,000 --> 01:42:32,000
ATF 是

2333
01:42:32,000 --> 01:42:35,000
Othering Tools Framework 的缩写

2334
01:42:36,000 --> 01:42:37,000
它是

2335
01:42:37,000 --> 01:42:40,000
A set of C-Sharp .NET components

2336
01:42:40,000 --> 01:42:43,000
for making tools on Windows

2337
01:42:46,000 --> 01:42:49,000
ATF has been in continuous development

2338
01:42:49,000 --> 01:42:52,000
in Sony Computer Entertainment

2339
01:42:53,000 --> 01:42:56,000
Worldwide Studio Central Tools Group

2340
01:42:56,000 --> 01:42:58,000
since early 2005

2341
01:42:58,000 --> 01:42:59,000
这个部门的名字怎么这么长

2342
01:42:59,000 --> 01:43:02,000
SCE Worldwide Studio

2343
01:43:03,000 --> 01:43:05,000
Central Tools Group

2344
01:43:06,000 --> 01:43:09,000
然后这个东西被拿来做

2345
01:43:10,000 --> 01:43:12,000
Naughty Dog 的 The Last of Us

2346
01:43:13,000 --> 01:43:14,000
然后 OK

2347
01:43:15,000 --> 01:43:17,000
所以这套工具

2348
01:43:17,000 --> 01:43:19,000
至少肯定是 C-Sharp .NET

2349
01:43:19,000 --> 01:43:20,000
OK

2350
01:43:20,000 --> 01:43:21,000
为基础的

2351
01:43:21,000 --> 01:43:22,000
但有一个问题就是

2352
01:43:22,000 --> 01:43:24,000
据我所知

2353
01:43:24,000 --> 01:43:26,000
PlayStation 4 上面跑的

2354
01:43:26,000 --> 01:43:29,000
OS 是一套经过修改的 FreeBSD

2355
01:43:29,000 --> 01:43:30,000
哇

2356
01:43:32,000 --> 01:43:33,000
这么分裂

2357
01:43:33,000 --> 01:43:34,000
对

2358
01:43:34,000 --> 01:43:35,000
然后

2359
01:43:35,000 --> 01:43:37,000
这个游戏本

2360
01:43:37,000 --> 01:43:39,000
这个游戏居然是用 C-Sharp 写的

2361
01:43:42,000 --> 01:43:45,000
这个流程也是蛮

2362
01:43:45,000 --> 01:43:46,000
蛮

2363
01:43:46,000 --> 01:43:48,000
这个流程也是蛮奇怪的

2364
01:43:49,000 --> 01:43:50,000
对是蛮奇怪的

2365
01:43:50,000 --> 01:43:51,000
好吧

2366
01:43:51,000 --> 01:43:54,000
一群人在 Windows 上面开发游戏

2367
01:43:54,000 --> 01:43:56,000
然后最后又跑在 FreeBSD 上

2368
01:43:58,000 --> 01:44:00,000
所以你是打算怎么

2369
01:44:00,000 --> 01:44:02,000
等他的那个 Core CLR 搞好了之后

2370
01:44:02,000 --> 01:44:04,000
你也写个游戏方向去跑跑

2371
01:44:06,000 --> 01:44:09,000
这两个东西可能没有什么可逼性吧

2372
01:44:11,000 --> 01:44:12,000
做个小游戏吧

2373
01:44:12,000 --> 01:44:13,000
应该是可以的

2374
01:44:13,000 --> 01:44:15,000
他也不是打着那个 C-Sharp 的旗号

2375
01:44:15,000 --> 01:44:19,000
要说要跨设备吗

2376
01:44:19,000 --> 01:44:20,000
就是

2377
01:44:20,000 --> 01:44:21,000
一套代码

2378
01:44:21,000 --> 01:44:23,000
可以通吃猫骨

2379
01:44:23,000 --> 01:44:25,000
手机平板和电脑吗

2380
01:44:28,000 --> 01:44:29,000
怎么说呢

2381
01:44:29,000 --> 01:44:30,000
也不是没有可能吧

2382
01:44:30,000 --> 01:44:36,000
但我其实比较希望有一天可以有什么 Swift.net 之类的奇葩出现

2383
01:44:38,000 --> 01:44:39,000
你别说

2384
01:44:39,000 --> 01:44:42,000
现在刚刚那个我 Twitter 更新了

2385
01:44:42,000 --> 01:44:47,000
我说要把这个 React 加到 Visual Studio 2015 里面去

2386
01:44:48,000 --> 01:44:49,000
What

2387
01:44:49,000 --> 01:44:50,000
React JavaScript

2388
01:44:50,000 --> 01:44:51,000
就刚才我们讲那个

2389
01:44:53,000 --> 01:44:54,000
这太神奇了

2390
01:44:54,000 --> 01:44:55,000
什么

2391
01:44:55,000 --> 01:44:59,000
Microsoft to React JavaScript to Visual Studio 2015

2392
01:44:59,000 --> 01:45:03,000
in response to overwhelming user requests

2393
01:45:04,000 --> 01:45:06,000
用户需求是正天下

2394
01:45:08,000 --> 01:45:12,000
我认还是一个挺蛮听用户的声音的公司

2395
01:45:13,000 --> 01:45:16,000
对 Valorant 不像苹果那么牛西冲天

2396
01:45:16,000 --> 01:45:19,000
但问题就是主要他听的都不太对

2397
01:45:19,000 --> 01:45:20,000
我说

2398
01:45:22,000 --> 01:45:23,000
那个就不扯

2399
01:45:24,000 --> 01:45:27,000
监听则明,偏听则喜

2400
01:45:28,000 --> 01:45:30,000
有时候听多了也不是好事

2401
01:45:32,000 --> 01:45:34,000
还有一个事情我们可以再扯一下

2402
01:45:34,000 --> 01:45:36,000
就是我上次不是说我装了一个 i 3 吗

2403
01:45:37,000 --> 01:45:38,000
对,感觉怎么样

2404
01:45:38,000 --> 01:45:39,000
我又用了一段时间了

2405
01:45:40,000 --> 01:45:41,000
感觉还真的蛮爽的

2406
01:45:42,000 --> 01:45:43,000
我就说吧

2407
01:45:43,000 --> 01:45:44,000
简单

2408
01:45:44,000 --> 01:45:46,000
然后我之前那个有个听众也在问

2409
01:45:46,000 --> 01:45:48,000
他试了那个他听了你的古惑

2410
01:45:48,000 --> 01:45:49,000
就是了那个 Awesome

2411
01:45:49,000 --> 01:45:50,000
觉得不太好用

2412
01:45:51,000 --> 01:45:52,000
然后我给他说 Try i 3

2413
01:45:53,000 --> 01:45:54,000
然后他会用了

2414
01:45:54,000 --> 01:45:55,000
然后第二天把他说

2415
01:45:55,000 --> 01:45:56,000
嗯,果然很好用

2416
01:45:58,000 --> 01:46:01,000
我觉得 Awesome 可能问题还是在于

2417
01:46:01,000 --> 01:46:03,000
他给你提供的选项有点多

2418
01:46:03,000 --> 01:46:05,000
就不够就是就是什么

2419
01:46:05,000 --> 01:46:06,000
不够清晰

2420
01:46:06,000 --> 01:46:07,000
上手还是有点难嘛

2421
01:46:07,000 --> 01:46:12,000
而且这种对这种就比较不太就是一样的操作方式

2422
01:46:12,000 --> 01:46:13,000
我觉得上手是一个很重要的

2423
01:46:13,000 --> 01:46:15,000
上手门槛是一个很重要的事情

2424
01:46:16,000 --> 01:46:17,000
对

2425
01:46:18,000 --> 01:46:20,000
我发现用了那个之后就回来

2426
01:46:20,000 --> 01:46:21,000
就是想哎呀

2427
01:46:21,000 --> 01:46:23,000
我怎么 Mac 上怎么没有这个呢

2428
01:46:23,000 --> 01:46:25,000
Mac 上有这个就好了

2429
01:46:26,000 --> 01:46:27,000
就觉得很沮丧

2430
01:46:27,000 --> 01:46:29,000
不过 Mac 上有一个问题

2431
01:46:29,000 --> 01:46:30,000
我发现一直是有个

2432
01:46:30,000 --> 01:46:32,000
i 3 它有个很重要的那个 Meta Key

2433
01:46:32,000 --> 01:46:34,000
就是你用它来起

2434
01:46:34,000 --> 01:46:37,000
就它的一个等于是一个专用的快捷键

2435
01:46:38,000 --> 01:46:40,000
我发现这个事情在 Linux 上面就是很简单

2436
01:46:40,000 --> 01:46:43,000
你就把那个 Windows 那个键留给他就可以了

2437
01:46:43,000 --> 01:46:49,000
因为我基本到目前为止没有遇到过 Linux 上面的任何一个图形软件

2438
01:46:49,000 --> 01:46:52,000
是需要用 Windows Key 作为一个这个快捷键的

2439
01:46:53,000 --> 01:46:54,000
你有遇到过吗

2440
01:46:54,000 --> 01:46:58,000
因为我用的是 Hacking Keyboard

2441
01:46:58,000 --> 01:46:59,000
你没有 Windows 键的

2442
01:47:00,000 --> 01:47:02,000
我就把那个 Command 键设成 Meta Key

2443
01:47:02,000 --> 01:47:06,000
就 Modifier 5

2444
01:47:06,000 --> 01:47:07,000
那你要用 Command 怎么办

2445
01:47:08,000 --> 01:47:11,000
你的那个 Command 就是那个 Mac 那个 Command 键

2446
01:47:11,000 --> 01:47:12,000
就是 Windows 键所谓的

2447
01:47:12,000 --> 01:47:13,000
对

2448
01:47:13,000 --> 01:47:14,000
OK

2449
01:47:14,000 --> 01:47:19,000
就常见我们键盘上是有这四个改变键盘状态的键盘

2450
01:47:19,000 --> 01:47:20,000
一个是 Shift

2451
01:47:20,000 --> 01:47:21,000
一个是 Control

2452
01:47:21,000 --> 01:47:23,000
一个是这个 Auto 或者叫 Option 在 Mac 上面

2453
01:47:23,000 --> 01:47:25,000
然后就是这个所谓 Windows 键

2454
01:47:25,000 --> 01:47:27,000
就是在 Mac 上叫做 Command 的这个键

2455
01:47:28,000 --> 01:47:35,000
然后我记得在很久以前 Windows 键不是还没有

2456
01:47:35,000 --> 01:47:39,000
Windows 键应该是在 XP 之后开始流行的对不对

2457
01:47:39,000 --> 01:47:40,000
对

2458
01:47:40,000 --> 01:47:43,000
从 XP 开始才渐渐有键盘上出现 Windows

2459
01:47:43,000 --> 01:47:45,000
我记得这些很多 Windows 软件它是没有

2460
01:47:45,000 --> 01:47:47,000
就是只用那个 Shift、Control

2461
01:47:47,000 --> 01:47:49,000
还有 Auto 这三个键来做快捷键就好了

2462
01:47:49,000 --> 01:47:52,000
当然就会有很多这种怪异的组合了

2463
01:47:52,000 --> 01:47:54,000
但是后来就在微软加了

2464
01:47:54,000 --> 01:47:57,000
就很多这个键盘开始做这个特殊的 Windows 键之后

2465
01:47:57,000 --> 01:48:00,000
然后就开始有些软件支持这个

2466
01:48:00,000 --> 01:48:04,000
要用那个 Windows 键来做快捷键的那个一个辅助按键

2467
01:48:04,000 --> 01:48:07,000
但是在 Linux 上面这件事情好像还没有发生

2468
01:48:07,000 --> 01:48:10,000
因为我知道很多那种键盘都没有 Windows 键的嘛

2469
01:48:10,000 --> 01:48:12,000
那个 Windows 用户

2470
01:48:12,000 --> 01:48:19,000
对而且很多 Linux 用户会选择用一个键盘贴把那个 Windows 标志去掉

2471
01:48:19,000 --> 01:48:25,000
其实我一直觉得很多键盘厂商把 Windows 键做成半透明的圆形

2472
01:48:25,000 --> 01:48:28,000
是非常恶趣味的一件事情

2473
01:48:28,000 --> 01:48:29,000
半透明的圆形我从没见过

2474
01:48:29,000 --> 01:48:30,000
哪个键盘是怎么搞的

2475
01:48:30,000 --> 01:48:31,000
对太丑了

2476
01:48:31,000 --> 01:48:36,000
就是他把那个 Windows 键做成一个触感和其他键不一样的

2477
01:48:36,000 --> 01:48:41,000
然后他上面是一个是圆形的凸起来的

2478
01:48:41,000 --> 01:48:44,000
你说那个键帽上面的那个叫什么

2479
01:48:44,000 --> 01:48:45,000
键帽上那个

2480
01:48:45,000 --> 01:48:46,000
他是一个气泡

2481
01:48:46,000 --> 01:48:47,000
Low cone 的那个地方

2482
01:48:47,000 --> 01:48:48,000
对他做成一个气泡

2483
01:48:48,000 --> 01:48:50,000
我觉得这实在是太二了

2484
01:48:50,000 --> 01:48:51,000
不能忍是吧

2485
01:48:51,000 --> 01:48:54,000
不过这个有时候跟那个什么小白用户解释

2486
01:48:54,000 --> 01:48:57,000
你按那个圆的跟那个别的键都不一样的

2487
01:48:57,000 --> 01:48:59,000
挺好解释的

2488
01:48:59,000 --> 01:49:03,000
不过就是说 Linux 上面没有这个 Windows 键

2489
01:49:03,000 --> 01:49:05,000
因为他要支持更奇奇怪怪的设备

2490
01:49:05,000 --> 01:49:07,000
然后他没有这个 Windows 键的话

2491
01:49:07,000 --> 01:49:09,000
他就不会去占用那个嘛

2492
01:49:09,000 --> 01:49:12,000
这样的话我就可以直接把 Windows 键预留给这样窗口管理器

2493
01:49:12,000 --> 01:49:14,000
而且刚好你窗口管理

2494
01:49:14,000 --> 01:49:16,000
Windows 你是窗口对吧

2495
01:49:16,000 --> 01:49:18,000
就还挺一一对应的

2496
01:49:18,000 --> 01:49:22,000
然后我发现回到这个 OS 3 上面来找一个类似的东西

2497
01:49:22,000 --> 01:49:24,000
其实也有但是发现跟没法用

2498
01:49:24,000 --> 01:49:29,000
就是他因为 MAC 上面的那四个快捷键

2499
01:49:29,000 --> 01:49:33,000
就是大量在广泛使用的一个组合

2500
01:49:33,000 --> 01:49:40,000
这样的话就发现没有一个键可以预留给某一个这种全局系统来的工具用了

2501
01:49:40,000 --> 01:49:42,000
就其实挺沮丧的一件事情

2502
01:49:44,000 --> 01:49:45,000
我不知道你怎么样

2503
01:49:45,000 --> 01:49:47,000
因为你也用 Devint 对吧

2504
01:49:47,000 --> 01:49:49,000
对我现在就我买了嘛

2505
01:49:49,000 --> 01:49:50,000
然后就主要用 Devint

2506
01:49:50,000 --> 01:49:54,000
但是你 Devint 你是用快捷键启动还是用鼠标启动的

2507
01:49:54,000 --> 01:49:56,000
我是用快捷键启动

2508
01:49:56,000 --> 01:49:58,000
你说是哪一个

2509
01:49:58,000 --> 01:50:00,000
我设成 command 加点

2510
01:50:00,000 --> 01:50:02,000
command 加句号

2511
01:50:04,000 --> 01:50:06,000
这个组合键很常见吧

2512
01:50:07,000 --> 01:50:11,000
这个组合键在 Photoshop 里面应该是有用的

2513
01:50:11,000 --> 01:50:14,000
就其他软件里面也经常会用到这个组合键

2514
01:50:14,000 --> 01:50:21,000
在某些软件里面代表结束一件事情或终止一件事情

2515
01:50:21,000 --> 01:50:23,000
对对对那你不会冲突吗这样

2516
01:50:23,000 --> 01:50:28,000
到现在为止还很少我要说

2517
01:50:28,000 --> 01:50:29,000
OK

2518
01:50:29,000 --> 01:50:34,000
那等一下这两个键这个到在右边你是左手用鼠标吗

2519
01:50:35,000 --> 01:50:37,000
我基本不用鼠标

2520
01:50:37,000 --> 01:50:40,000
那你怎么用 Devint 呢

2521
01:50:41,000 --> 01:50:46,000
用 Devint 的 hold points 不就是不要用鼠标吗

2522
01:50:46,000 --> 01:50:52,000
Devint 但是你需要画的那个比例是要用那个鼠标来画那个框吗

2523
01:50:52,000 --> 01:50:55,000
What 你用鼠标来画比例真的假的

2524
01:50:55,000 --> 01:50:57,000
等一下我们说的是同一个东西吗是 Devint 这个东西

2525
01:50:57,000 --> 01:51:04,000
对啊问题是 Devint 可以在按下就是在你呼出 Devint 的主界面之后

2526
01:51:04,000 --> 01:51:08,000
按一个快捷键让窗口成为就迅速占据

2527
01:51:08,000 --> 01:51:11,000
你是预先分配了这个叫什么

2528
01:51:11,000 --> 01:51:14,000
就是你预先确定了一个比例然后所有窗口都是按的

2529
01:51:14,000 --> 01:51:17,000
对我先预先画出一批 grid 来

2530
01:51:17,000 --> 01:51:22,000
比如说我把屏幕右半边的 grid 设成 L

2531
01:51:22,000 --> 01:51:23,000
OK 我明白

2532
01:51:23,000 --> 01:51:25,000
然后左半边设成 H

2533
01:51:25,000 --> 01:51:28,000
然后右三分之 R 设成 M

2534
01:51:28,000 --> 01:51:31,000
左三分之 R 设成 N

2535
01:51:31,000 --> 01:51:33,000
右四分之一设成 P

2536
01:51:33,000 --> 01:51:35,000
左四分之一设成 O

2537
01:51:35,000 --> 01:51:36,000
懂了懂了

2538
01:51:36,000 --> 01:51:38,000
左上设成 Q

2539
01:51:38,000 --> 01:51:40,000
右上设成 W

2540
01:51:40,000 --> 01:51:41,000
左下设成 A

2541
01:51:41,000 --> 01:51:43,000
右下设成 S

2542
01:51:43,000 --> 01:51:45,000
然后这样就是通过一个按键组合来完成

2543
01:51:45,000 --> 01:51:50,000
比如说我现在要把流感机窗口设为左半边

2544
01:51:50,000 --> 01:51:54,000
我只要按凯曼加句号然后 H 就可以了

2545
01:51:54,000 --> 01:51:55,000
OK 我明白你的意思

2546
01:51:55,000 --> 01:51:56,000
你是这么用

2547
01:51:56,000 --> 01:51:59,000
因为经常我会一会大一会小

2548
01:51:59,000 --> 01:52:03,000
其实你说到这样道理我可以试一下这种方式

2549
01:52:03,000 --> 01:52:09,000
一会大一会小就会打破你在 i 3 里面养成那种

2550
01:52:09,000 --> 01:52:13,000
所有的窗口一出现就应该立刻占屏幕一半的

2551
01:52:13,000 --> 01:52:16,000
12 的闷透猫咙

2552
01:52:16,000 --> 01:52:18,000
现在这个屏幕有点问题

2553
01:52:18,000 --> 01:52:21,000
比如说我现在是 15 寸的 Retina MacBook Pro

2554
01:52:21,000 --> 01:52:27,000
它是在逻辑上应该是 1440 x 900 的

2555
01:52:27,000 --> 01:52:29,000
这样如果一半宽的话

2556
01:52:29,000 --> 01:52:32,000
一个流程上就只有 720 个像素

2557
01:52:32,000 --> 01:52:35,000
这样的话很多网页都不够宽

2558
01:52:35,000 --> 01:52:38,000
所以我有一个三分之二设计

2559
01:52:38,000 --> 01:52:42,000
有些又可以你知道就很纠结

2560
01:52:42,000 --> 01:52:44,000
不过你说的也道理

2561
01:52:44,000 --> 01:52:46,000
大部分时候要么就是三分之二要不就是一半

2562
01:52:46,000 --> 01:52:52,000
然后在我上网的时候我会我有一个 U

2563
01:52:52,000 --> 01:52:58,000
U 是中间的三分之二

2564
01:52:58,000 --> 01:53:04,000
但是上下是怎么说上下通透的

2565
01:53:04,000 --> 01:53:06,000
从最上到最下

2566
01:53:06,000 --> 01:53:09,000
为什么现在表达力这么差

2567
01:53:09,000 --> 01:53:13,000
纵向的三分之二但是是居中的

2568
01:53:13,000 --> 01:53:17,000
左右两边的留白是什么东西呢空的

2569
01:53:17,000 --> 01:53:21,000
这种情况下我一般身上是在

2570
01:53:21,000 --> 01:53:25,000
比如说需要读 PDF 然后专心读 PDF 的时候

2571
01:53:25,000 --> 01:53:27,000
把所有其他窗口都关掉

2572
01:53:27,000 --> 01:53:31,000
把 PDF 放成中间三分之二这样子

2573
01:53:31,000 --> 01:53:33,000
这就是 Zain Mode 对不对

2574
01:53:33,000 --> 01:53:35,000
对 into the zone

2575
01:53:35,000 --> 01:53:38,000
我一般是这样子

2576
01:53:38,000 --> 01:53:40,000
就是我压 440 宽的屏幕的话

2577
01:53:40,000 --> 01:53:43,000
我一般就是可能五分之

2578
01:53:43,000 --> 01:53:46,000
六分之四就三分之二

2579
01:53:46,000 --> 01:53:49,000
因为我是按六扇来分的

2580
01:53:49,000 --> 01:53:52,000
三分之二是一个流量出窗口

2581
01:53:52,000 --> 01:53:54,000
三分之一是一个要么是一个 Message

2582
01:53:54,000 --> 01:53:57,000
要么就是 Twitter 界面

2583
01:53:57,000 --> 01:53:59,000
大概是这么一个用法

2584
01:53:59,000 --> 01:54:02,000
不过你说这个方式可以试一下

2585
01:54:02,000 --> 01:54:04,000
对你可以试试

2586
01:54:04,000 --> 01:54:05,000
然后就要找一个快捷键

2587
01:54:05,000 --> 01:54:07,000
我现在是一个很扭捏的快捷键

2588
01:54:07,000 --> 01:54:11,000
是 Command 加 F 4

2589
01:54:11,000 --> 01:54:17,000
你按久了会关窗口了到温度上

2590
01:54:17,000 --> 01:54:19,000
我没有用温度

2591
01:54:19,000 --> 01:54:21,000
所以没有这个关系

2592
01:54:21,000 --> 01:54:23,000
但你不然你说了确实是个问题

2593
01:54:23,000 --> 01:54:26,000
改一下

2594
01:54:26,000 --> 01:54:28,000
然后那个 i 3 还有一个

2595
01:54:28,000 --> 01:54:31,000
很重要的附属的一个工具

2596
01:54:31,000 --> 01:54:32,000
叫 D-Menu

2597
01:54:32,000 --> 01:54:34,000
就是一个 Luncher 启动器

2598
01:54:34,000 --> 01:54:35,000
大概什么意思

2599
01:54:35,000 --> 01:54:37,000
跟 Spotlight 和 Offline 差不多意思

2600
01:54:37,000 --> 01:54:39,000
但它那个就比较弱小

2601
01:54:39,000 --> 01:54:42,000
只能启动软件

2602
01:54:42,000 --> 01:54:44,000
别的什么都不能改

2603
01:54:44,000 --> 01:54:47,000
你有什么更好的替代方案吗

2604
01:54:47,000 --> 01:54:49,000
我没有什么更好的替代方案

2605
01:54:49,000 --> 01:54:50,000
对我发现其实

2606
01:54:50,000 --> 01:54:51,000
你说

2607
01:54:51,000 --> 01:54:52,000
就是从我的角度来说

2608
01:54:52,000 --> 01:54:55,000
Linux 是一台工作的机器

2609
01:54:55,000 --> 01:54:57,000
我在上面要干什么我是明确知道的

2610
01:54:57,000 --> 01:55:02,000
然后我要启动固定工具就那么几种

2611
01:55:02,000 --> 01:55:04,000
也用不了几次是吧

2612
01:55:04,000 --> 01:55:07,000
而且绝大部分工具都是命令行家的

2613
01:55:07,000 --> 01:55:12,000
所以用 D 3 其实就只需要启动 Remina

2614
01:55:12,000 --> 01:55:16,000
是一个 Remote Desktop 的 Client

2615
01:55:16,000 --> 01:55:18,000
然后启动浏览器

2616
01:55:18,000 --> 01:55:21,000
启动命令行

2617
01:55:21,000 --> 01:55:23,000
启动编辑器

2618
01:55:23,000 --> 01:55:25,000
启动邮件客户端

2619
01:55:25,000 --> 01:55:28,000
邮件客户端启动 IM 就好了

2620
01:55:28,000 --> 01:55:29,000
然后就好了

2621
01:55:29,000 --> 01:55:30,000
好吧

2622
01:55:30,000 --> 01:55:32,000
我发现有一个很窘的问题

2623
01:55:32,000 --> 01:55:34,000
就是它 DMAN 它不是默认启动

2624
01:55:34,000 --> 01:55:37,000
就是说你的这种可执行路径下的命令

2625
01:55:37,000 --> 01:55:39,000
都可以搜到道吗

2626
01:55:39,000 --> 01:55:40,000
对

2627
01:55:40,000 --> 01:55:41,000
但是你其实你发现

2628
01:55:41,000 --> 01:55:42,000
其实大部分都是没有用的

2629
01:55:42,000 --> 01:55:45,000
因为没有那个界面可以打开任何东西

2630
01:55:45,000 --> 01:55:47,000
没错是这样

2631
01:55:47,000 --> 01:55:48,000
就觉得很窘

2632
01:55:48,000 --> 01:55:50,000
比如说我要启动一个 Chrome

2633
01:55:50,000 --> 01:55:53,000
我就打 CHR 对吧

2634
01:55:53,000 --> 01:55:56,000
它会第一个是出来那个叫什么 Change Route

2635
01:55:56,000 --> 01:55:57,000
还是

2636
01:55:57,000 --> 01:55:59,000
对 Change Route

2637
01:55:59,000 --> 01:56:01,000
你会觉得这不是神经病吗

2638
01:56:01,000 --> 01:56:04,000
打开这个你按着选了那个没有用啊

2639
01:56:04,000 --> 01:56:06,000
对它甚至不如一个输入法

2640
01:56:06,000 --> 01:56:08,000
不会过滤那些东西

2641
01:56:08,000 --> 01:56:09,000
放在前面

2642
01:56:09,000 --> 01:56:14,000
但可能这个应该它的那个什么设计也有关系

2643
01:56:14,000 --> 01:56:15,000
它没有办法嘛

2644
01:56:15,000 --> 01:56:16,000
这个系统上那些东西

2645
01:56:16,000 --> 01:56:18,000
哪些是可以会启动一个 X 窗口的

2646
01:56:18,000 --> 01:56:19,000
哪些是不行

2647
01:56:19,000 --> 01:56:20,000
它又不知道对吧

2648
01:56:20,000 --> 01:56:22,000
这个是很难做的一件事情

2649
01:56:22,000 --> 01:56:23,000
不过我就在想

2650
01:56:23,000 --> 01:56:25,000
其实如果 i 3 那个 D-Manual

2651
01:56:25,000 --> 01:56:26,000
它做的强大一点

2652
01:56:26,000 --> 01:56:28,000
做成像类似于 Spotlight

2653
01:56:28,000 --> 01:56:30,000
可以有一种搜索啊

2654
01:56:30,000 --> 01:56:31,000
就常见的搜索

2655
01:56:31,000 --> 01:56:33,000
比如说我经常做的一件事情就是

2656
01:56:33,000 --> 01:56:35,000
就单位转换嘛

2657
01:56:35,000 --> 01:56:37,000
或者做一个简单的这个计算嘛

2658
01:56:37,000 --> 01:56:39,000
比如说你要算一下

2659
01:56:39,000 --> 01:56:41,000
它不是显示多少个字节出来

2660
01:56:41,000 --> 01:56:43,000
你要转换成这个兆嘛

2661
01:56:43,000 --> 01:56:44,000
或者是 GB 的时候

2662
01:56:44,000 --> 01:56:45,000
你怎么都要算一下

2663
01:56:45,000 --> 01:56:47,000
然后说转换一个后遇单位

2664
01:56:47,000 --> 01:56:50,000
现在在那个 Spotlight 里面做就挺方便的

2665
01:56:50,000 --> 01:56:52,000
做一些常见的单位对轮环的转换

2666
01:56:52,000 --> 01:56:54,000
或者说一个常见的这个

2667
01:56:54,000 --> 01:56:56,000
比如说查单词吧

2668
01:56:56,000 --> 01:56:58,000
甚至都可以很方便的做

2669
01:56:58,000 --> 01:56:59,000
但 D-Manual 的话

2670
01:56:59,000 --> 01:57:01,000
不知道有没有可以更高级的

2671
01:57:01,000 --> 01:57:03,000
可以把这些东西解决

2672
01:57:04,000 --> 01:57:05,000
嗯,这的确是一个问题

2673
01:57:05,000 --> 01:57:09,000
但是我觉得这可能也就

2674
01:57:09,000 --> 01:57:10,000
怎么说呢

2675
01:57:10,000 --> 01:57:15,000
违背了 i 3 的初衷吧

2676
01:57:15,000 --> 01:57:17,000
简单是吧,极简

2677
01:57:17,000 --> 01:57:20,000
对,i 3 的设计初衷

2678
01:57:20,000 --> 01:57:23,000
应该是不包括有一个万能的

2679
01:57:23,000 --> 01:57:25,000
就叫什么 Omnibar

2680
01:57:25,000 --> 01:57:27,000
还是叫什么 Omnibot

2681
01:57:27,000 --> 01:57:29,000
差不多这么一个东西的

2682
01:57:30,000 --> 01:57:31,000
如果你要用这个的话

2683
01:57:31,000 --> 01:57:32,000
其实 Linux 上是有的

2684
01:57:32,000 --> 01:57:33,000
叫什么

2685
01:57:35,000 --> 01:57:37,000
我知道以前那个

2686
01:57:37,000 --> 01:57:39,000
那个最早那个版本叫什么 Light

2687
01:57:39,000 --> 01:57:41,000
Light 什么玩意

2688
01:57:42,000 --> 01:57:43,000
Silverlight

2689
01:57:44,000 --> 01:57:45,000
你还记得吗

2690
01:57:45,000 --> 01:57:47,000
Silverlight 是 OS 10 上面

2691
01:57:48,000 --> 01:57:50,000
它以前是

2692
01:57:50,000 --> 01:57:52,000
不是 Silverlight 吗

2693
01:57:53,000 --> 01:57:54,000
Cupfer

2694
01:57:54,000 --> 01:57:55,000
是叫什么 Cupfer

2695
01:57:55,000 --> 01:57:57,000
不是,有一个哥们开发了个版本

2696
01:57:57,000 --> 01:57:59,000
它有一个是可以在 Linux 上面用的

2697
01:58:00,000 --> 01:58:01,000
OK

2698
01:58:01,000 --> 01:58:02,000
对,但或者说

2699
01:58:02,000 --> 01:58:04,000
其实你现在连那个 5 Band

2700
01:58:04,000 --> 01:58:06,000
因为现在 5 Band 2 不是全面抄袭

2701
01:58:06,000 --> 01:58:08,000
这个 OS 10 的设计吗

2702
01:58:08,000 --> 01:58:11,000
它里面也有那个功能

2703
01:58:11,000 --> 01:58:13,000
当然 5 Band 比较慢就没这么用

2704
01:58:13,000 --> 01:58:14,000
用了这个 i 3 之后

2705
01:58:14,000 --> 01:58:15,000
感觉真的是飞快

2706
01:58:15,000 --> 01:58:17,000
而且上次我那个分辨率

2707
01:58:17,000 --> 01:58:19,000
就是在 VirtualBox 里面那个分辨率

2708
01:58:19,000 --> 01:58:21,000
调不出来,它不会自动随

2709
01:58:21,000 --> 01:58:23,000
穿过大小便的问题我也解决了

2710
01:58:23,000 --> 01:58:25,000
现在感觉还是蛮爽的

2711
01:58:25,000 --> 01:58:26,000
就可以不用装了

2712
01:58:26,000 --> 01:58:29,000
所以你现在是全屏跑虚拟机

2713
01:58:29,000 --> 01:58:31,000
假装自己是在 Linux 上工作

2714
01:58:31,000 --> 01:58:33,000
有时候要在 Linux 上面

2715
01:58:33,000 --> 01:58:35,000
做点事情的时候就是这么用

2716
01:58:35,000 --> 01:58:36,000
而且启动超快

2717
01:58:36,000 --> 01:58:38,000
之前其实 5 Band 2 还要等

2718
01:58:38,000 --> 01:58:40,000
觉得有点小慢

2719
01:58:40,000 --> 01:58:42,000
虽然我是 SSD

2720
01:58:42,000 --> 01:58:44,000
然后又是什么 i 7 处理器

2721
01:58:44,000 --> 01:58:46,000
感觉配置挺高的是吧

2722
01:58:46,000 --> 01:58:49,000
但你觉得等它启动还是挺久的一件事情

2723
01:58:49,000 --> 01:58:51,000
现在 i 3 你启动

2724
01:58:51,000 --> 01:58:53,000
爽秒开

2725
01:58:53,000 --> 01:58:55,000
没错是这样的

2726
01:58:55,000 --> 01:58:56,000
有时候我也会

2727
01:58:56,000 --> 01:58:58,000
我在 VirtualBox 里面装一个 Debian

2728
01:58:58,000 --> 01:59:00,000
然后装了 i 3

2729
01:59:00,000 --> 01:59:03,000
然后我把 host key 设成了右边的 command

2730
01:59:03,000 --> 01:59:07,000
这样全屏之后就按左边 command 比较多

2731
01:59:07,000 --> 01:59:10,000
然后可以完全不会意识到自己

2732
01:59:10,000 --> 01:59:11,000
意识到自己

2733
01:59:11,000 --> 01:59:13,000
其实下面还跑着一个虚拟机

2734
01:59:13,000 --> 01:59:16,000
OS 10

2735
01:59:16,000 --> 01:59:19,000
之前我学校有一个老师是这么干的

2736
01:59:19,000 --> 01:59:20,000
我之前去他办公室

2737
01:59:20,000 --> 01:59:24,000
他是用一个 27 还是 21 的 iMac

2738
01:59:24,000 --> 01:59:25,000
然后他整个

2739
01:59:25,000 --> 01:59:27,000
你看他那个 Dock

2740
01:59:27,000 --> 01:59:28,000
干干净净

2741
01:59:28,000 --> 01:59:29,000
就一个软件

2742
01:59:29,000 --> 01:59:30,000
VirtualBox

2743
01:59:30,000 --> 01:59:32,000
然后里面跑个 5 Band 2

2744
01:59:32,000 --> 01:59:34,000
何必呢这是

2745
01:59:34,000 --> 01:59:36,000
我说你这是何苦

2746
01:59:36,000 --> 01:59:37,000
那不如直接买个

2747
01:59:37,000 --> 01:59:39,000
不过确实也是现在

2748
01:59:39,000 --> 01:59:41,000
买不到这个

2749
01:59:41,000 --> 01:59:43,000
趁性如意的硬件能够

2750
01:59:43,000 --> 01:59:44,000
就除了 Dial 吧

2751
01:59:44,000 --> 01:59:46,000
能够跑那两个时间都要折腾

2752
01:59:46,000 --> 01:59:48,000
有些人就选择不折腾

2753
01:59:48,000 --> 01:59:50,000
我买个 Mac

2754
01:59:50,000 --> 01:59:51,000
然后上面跑个虚拟机

2755
01:59:51,000 --> 01:59:53,000
这样保证硬件不会有问题

2756
01:59:54,000 --> 01:59:56,000
那个 Mac

2757
01:59:56,000 --> 01:59:58,000
Dial 的 XPS

2758
01:59:58,000 --> 02:00:00,000
XPS 13

2759
02:00:00,000 --> 02:00:01,000
XPS 13 还是 17

2760
02:00:01,000 --> 02:00:03,000
有一个 Developer Edition

2761
02:00:04,000 --> 02:00:06,000
Developer Edition 就预装了 OpenZoom

2762
02:00:06,000 --> 02:00:07,000
对对

2763
02:00:07,000 --> 02:00:08,000
我就说要如果你不想折腾

2764
02:00:08,000 --> 02:00:09,000
又想折腾

2765
02:00:09,000 --> 02:00:11,000
然后又想专门用 Linux 的话

2766
02:00:11,000 --> 02:00:12,000
就用那个还挺好的

2767
02:00:13,000 --> 02:00:14,000
买那个

2768
02:00:14,000 --> 02:00:15,000
好像也不便宜吧

2769
02:00:15,000 --> 02:00:17,000
好像 1200 还是 1000 几

2770
02:00:18,000 --> 02:00:19,000
刀

2771
02:00:19,000 --> 02:00:21,000
而且做工还是不错的

2772
02:00:21,000 --> 02:00:23,000
那个他的高端型号

2773
02:00:23,000 --> 02:00:24,000
还是不错的

2774
02:00:24,000 --> 02:00:25,000
但是

2775
02:00:26,000 --> 02:00:28,000
还是不能跟 UniBody 相比

2776
02:00:28,000 --> 02:00:30,000
对审美上还是不能够接受

2777
02:00:30,000 --> 02:00:33,000
而且他那个不是 Retina 屏幕吧

2778
02:00:33,000 --> 02:00:34,000
我记得

2779
02:00:35,000 --> 02:00:37,000
最新的一代好像是了

2780
02:00:37,000 --> 02:00:38,000
他有

2781
02:00:38,000 --> 02:00:40,000
我看最新可以选高配的

2782
02:00:40,000 --> 02:00:42,000
有一个什么是 3200 还是 2500 多

2783
02:00:42,000 --> 02:00:43,000
是一个高

2784
02:00:43,000 --> 02:00:45,000
但是你说那个 Developer Edition

2785
02:00:45,000 --> 02:00:46,000
好像还不是

2786
02:00:46,000 --> 02:00:47,000
没有吗 OK

2787
02:00:47,000 --> 02:00:48,000
我记得好像是这样子

2788
02:00:48,000 --> 02:00:50,000
但可能今年他再升级一下

2789
02:00:50,000 --> 02:00:51,000
说不定也就有了

2790
02:00:51,000 --> 02:00:52,000
那谁知道

2791
02:00:54,000 --> 02:00:56,000
其实还有一个

2792
02:00:56,000 --> 02:00:58,000
厂商

2793
02:00:58,000 --> 02:01:00,000
是做游戏 Laptop

2794
02:01:00,000 --> 02:01:02,000
我一想到他的名字了

2795
02:01:02,000 --> 02:01:04,000
Razer Blade

2796
02:01:04,000 --> 02:01:06,000
好像是你们加拿大的

2797
02:01:06,000 --> 02:01:07,000
What

2798
02:01:07,000 --> 02:01:08,000
真的

2799
02:01:08,000 --> 02:01:09,000
Razer

2800
02:01:10,000 --> 02:01:11,000
加拿大还是这么个

2801
02:01:11,000 --> 02:01:13,000
Razer Blade Laptop

2802
02:01:13,000 --> 02:01:14,000
Gaming Laptop

2803
02:01:14,000 --> 02:01:17,000
其实也是工业设计非常非常好的

2804
02:01:17,000 --> 02:01:19,000
我撤掉一个非常

2805
02:01:20,000 --> 02:01:22,000
就你去看那个 Razer Blade

2806
02:01:22,000 --> 02:01:25,000
基本上就是一个黑板的 Mac Pro

2807
02:01:25,000 --> 02:01:26,000
然后

2808
02:01:27,000 --> 02:01:30,000
也是高端机型

2809
02:01:30,000 --> 02:01:31,000
装

2810
02:01:32,000 --> 02:01:34,000
装 Linux 也没什么问题吧

2811
02:01:34,000 --> 02:01:35,000
我看看

2812
02:01:35,000 --> 02:01:37,000
什么 Razer

2813
02:01:37,000 --> 02:01:39,000
Razer Blade

2814
02:01:39,000 --> 02:01:42,000
是叫 Razerzone.com 吗这网站

2815
02:01:42,000 --> 02:01:43,000
对没错

2816
02:01:43,000 --> 02:01:44,000
Razer Blade

2817
02:01:44,000 --> 02:01:46,000
我之前看过那个

2818
02:01:46,000 --> 02:01:47,000
戴尔的那个什么

2819
02:01:47,000 --> 02:01:49,000
Alienware 那套设计哲学

2820
02:01:49,000 --> 02:01:50,000
我简直

2821
02:01:50,000 --> 02:01:51,000
我都不知道

2822
02:01:51,000 --> 02:01:53,000
为什么会有人觉得他好看

2823
02:01:54,000 --> 02:01:57,000
那你应该会觉得 Razer Blade 还 OK 吧

2824
02:01:57,000 --> 02:02:00,000
除了那个键盘的

2825
02:02:00,000 --> 02:02:03,000
键盘上的字体比较

2826
02:02:03,000 --> 02:02:05,000
比较 kitch 之外

2827
02:02:05,000 --> 02:02:07,000
反正推荐一下这款笔记本电脑

2828
02:02:07,000 --> 02:02:08,000
等一下这种

2829
02:02:08,000 --> 02:02:11,000
这种游戏笔记本装 Linux 不是找死吗

2830
02:02:11,000 --> 02:02:13,000
那些硬件驱动都是跑不动的

2831
02:02:13,000 --> 02:02:14,000
还好吧

2832
02:02:14,000 --> 02:02:15,000
NVIDIA

2833
02:02:15,000 --> 02:02:16,000
OK

2834
02:02:16,000 --> 02:02:17,000
NVIDIA

2835
02:02:17,000 --> 02:02:18,000
被 Linux 骂了

2836
02:02:18,000 --> 02:02:20,000
P 到死简直

2837
02:02:20,000 --> 02:02:22,000
我觉得现在你真的你要做开发机

2838
02:02:22,000 --> 02:02:23,000
你只能找什么

2839
02:02:23,000 --> 02:02:27,000
就全套 Intel 平台的可能会好一点

2840
02:02:27,000 --> 02:02:28,000
OK

2841
02:02:28,000 --> 02:02:29,000
就是集血

2842
02:02:29,000 --> 02:02:32,000
然后不要用太多什么奇奇怪怪的硬件

2843
02:02:32,000 --> 02:02:33,000
可能会好一点

2844
02:02:35,000 --> 02:02:36,000
好吧

2845
02:02:36,000 --> 02:02:40,000
我本来还想买一台 Razer Blade

2846
02:02:40,000 --> 02:02:42,000
在去北美的时候

2847
02:02:42,000 --> 02:02:43,000
为什么

2848
02:02:44,000 --> 02:02:46,000
有一个非常了不起的游戏

2849
02:02:46,000 --> 02:02:48,000
叫 Star Citizen

2850
02:02:48,000 --> 02:02:49,000
什么玩意

2851
02:02:49,000 --> 02:02:51,000
是 PC only

2852
02:02:51,000 --> 02:02:54,000
他是 Kickstarter 上一个项目

2853
02:02:54,000 --> 02:02:56,000
做出来了吗还是

2854
02:02:56,000 --> 02:02:58,000
应该是已经做出来了

2855
02:02:58,000 --> 02:03:00,000
就是已经做到可以玩的地步

2856
02:03:00,000 --> 02:03:01,000
但是没有做完

2857
02:03:01,000 --> 02:03:02,000
贝塔

2858
02:03:02,000 --> 02:03:03,000
就是他

2859
02:03:03,000 --> 02:03:05,000
准备了

2860
02:03:05,000 --> 02:03:10,000
他要做成一个非常野心勃勃的太空探险式的

2861
02:03:10,000 --> 02:03:12,000
MMORPG

2862
02:03:12,000 --> 02:03:16,000
就是你在里面可以拥有很多艘宇宙飞船

2863
02:03:16,000 --> 02:03:17,000
然后在

2864
02:03:17,000 --> 02:03:20,000
是不是类似以前那个 Home 那种类型的东西

2865
02:03:20,000 --> 02:03:22,000
Homeworld

2866
02:03:22,000 --> 02:03:23,000
就家园吗

2867
02:03:23,000 --> 02:03:24,000
以前有个太空

2868
02:03:24,000 --> 02:03:25,000
那个叫 Homeworld

2869
02:03:28,000 --> 02:03:29,000
不一样

2870
02:03:29,000 --> 02:03:31,000
Homeworld 里面你是看不到自己的

2871
02:03:31,000 --> 02:03:33,000
但是在 Star Citizen 里面

2872
02:03:33,000 --> 02:03:35,000
你在里面有个 Avatar

2873
02:03:35,000 --> 02:03:37,000
然后你可以去

2874
02:03:37,000 --> 02:03:39,000
你可以非常逼真的看到自己

2875
02:03:39,000 --> 02:03:41,000
爬进自己飞船的座舱

2876
02:03:41,000 --> 02:03:43,000
然后开着飞船出去

2877
02:03:43,000 --> 02:03:44,000
对

2878
02:03:44,000 --> 02:03:46,000
有点像 1 V 1

2879
02:03:46,000 --> 02:03:49,000
但是要比 1 V 1 节奏更快一点

2880
02:03:49,000 --> 02:03:50,000
我打开这个

2881
02:03:51,000 --> 02:03:52,000
这个什么 Razer 的

2882
02:03:52,000 --> 02:03:54,000
这不是雷蛇吗

2883
02:03:55,000 --> 02:03:56,000
What

2884
02:03:56,000 --> 02:03:57,000
他有中文名

2885
02:03:57,000 --> 02:03:58,000
这好像就叫雷蛇

2886
02:03:58,000 --> 02:04:00,000
我看这个标志好像挺眼熟的

2887
02:04:00,000 --> 02:04:04,000
因为我以前只知道他做键盘鼠标什么的

2888
02:04:04,000 --> 02:04:06,000
这整个美学不就是一个黑板

2889
02:04:06,000 --> 02:04:07,000
以前你还记不记得

2890
02:04:07,000 --> 02:04:10,000
MacBook 还是塑料的时候有个黑色的版本

2891
02:04:10,000 --> 02:04:11,000
对 我有朋友还在用

2892
02:04:11,000 --> 02:04:13,000
好像 Lobos 也在用那台吧

2893
02:04:13,000 --> 02:04:14,000
我记得

2894
02:04:15,000 --> 02:04:17,000
这不是长得一模一样吗

2895
02:04:18,000 --> 02:04:20,000
除了键盘会发光之外

2896
02:04:22,000 --> 02:04:23,000
所以最终还是

2897
02:04:23,000 --> 02:04:26,000
还是要朝苹果的美学靠拢才好看

2898
02:04:26,000 --> 02:04:28,000
微创新

2899
02:04:29,000 --> 02:04:31,000
你要玩 PC 游戏你干嘛买个笔记本

2900
02:04:31,000 --> 02:04:33,000
你买个台式机好了

2901
02:04:35,000 --> 02:04:36,000
监用性还好一些

2902
02:04:36,000 --> 02:04:37,000
价格又便宜

2903
02:04:37,000 --> 02:04:38,000
Good point

2904
02:04:38,000 --> 02:04:40,000
但是台式机看起来太难看了

2905
02:04:41,000 --> 02:04:43,000
你这个也不是一个长期用的需求吧

2906
02:04:43,000 --> 02:04:44,000
我觉得

2907
02:04:45,000 --> 02:04:48,000
关键是笔记本的性能和散热都不太适合玩游戏

2908
02:04:48,000 --> 02:04:50,000
你这个怎么弄

2909
02:04:50,000 --> 02:04:54,000
你为什么总是要改变我的人生观

2910
02:04:54,000 --> 02:04:56,000
我就觉得很 Rational

2911
02:04:56,000 --> 02:04:58,000
很理性的跟你讲道理

2912
02:04:58,000 --> 02:05:00,000
为师教育你一下

2913
02:05:00,000 --> 02:05:01,000
好

2914
02:05:02,000 --> 02:05:05,000
我最近想搞个虚心接手

2915
02:05:05,000 --> 02:05:08,000
因为用虚拟机不是很爽

2916
02:05:08,000 --> 02:05:10,000
因为有些事情麻烦

2917
02:05:10,000 --> 02:05:11,000
想搞个那种小的

2918
02:05:11,000 --> 02:05:14,000
你知道英特尔有个 NUC 的东西吗

2919
02:05:14,000 --> 02:05:15,000
不知道

2920
02:05:15,000 --> 02:05:16,000
NUC 就是一个很小

2921
02:05:16,000 --> 02:05:17,000
不知道

2922
02:05:17,000 --> 02:05:20,000
NUC 就是一个很小大概可能有一个

2923
02:05:21,000 --> 02:05:22,000
多大呢

2924
02:05:22,000 --> 02:05:27,000
比一个外置光区再小一圈但是厚一些的一种盒子

2925
02:05:27,000 --> 02:05:28,000
OK

2926
02:05:28,000 --> 02:05:31,000
英特尔出的那个 mini PC 叫 NUC

2927
02:05:31,000 --> 02:05:35,000
对它整个的 Form Factor 叫 NUC

2928
02:05:36,000 --> 02:05:38,000
我看到这个产品就知道它是什么

2929
02:05:38,000 --> 02:05:39,000
C 是 Computer

2930
02:05:39,000 --> 02:05:42,000
不知道 NNU 代表什么我一下忘了

2931
02:05:42,000 --> 02:05:43,000
NetUnit

2932
02:05:43,000 --> 02:05:45,000
挺讨喜的一个东西

2933
02:05:45,000 --> 02:05:48,000
NUC 它是可以

2934
02:05:48,000 --> 02:05:50,000
它不是有四个螺丝吗

2935
02:05:50,000 --> 02:05:52,000
它是可以绑在显示器背后

2936
02:05:52,000 --> 02:05:54,000
Visamount 的四个洞上面的

2937
02:05:55,000 --> 02:05:57,000
如果你是用 PC 的话

2938
02:05:57,000 --> 02:05:59,000
你是可以整个放在后面

2939
02:05:59,000 --> 02:06:00,000
就完全可以看不见

2940
02:06:00,000 --> 02:06:01,000
就是怎么讲

2941
02:06:01,000 --> 02:06:05,000
可以比较低成本的实现一体机

2942
02:06:05,000 --> 02:06:06,000
大概是这个意思

2943
02:06:06,000 --> 02:06:08,000
然后也不用看到太多的线

2944
02:06:08,000 --> 02:06:11,000
其实我之前看的时候挺心动的

2945
02:06:11,000 --> 02:06:14,000
因为它搭配一个

2946
02:06:14,000 --> 02:06:17,000
而且台式机的 Core i 5

2947
02:06:17,000 --> 02:06:22,000
其实相当于笔记本的 Core i 7 的 Performance

2948
02:06:24,000 --> 02:06:25,000
我一直想搞一个

2949
02:06:25,000 --> 02:06:27,000
但是我发现它那个型号还挺乱的

2950
02:06:27,000 --> 02:06:29,000
它出了好多好多款

2951
02:06:29,000 --> 02:06:34,000
对但是再一想买好像也没有太多用途

2952
02:06:34,000 --> 02:06:36,000
又不能玩游戏对不对

2953
02:06:36,000 --> 02:06:39,000
对主要是它缺一块显卡

2954
02:06:40,000 --> 02:06:42,000
这就是一个问题

2955
02:06:42,000 --> 02:06:44,000
现在不是有很多这个可以带什么

2956
02:06:44,000 --> 02:06:47,000
有 Thunderbolt 之后有外置显卡了吗

2957
02:06:47,000 --> 02:06:50,000
这种黑科技你见过吗

2958
02:06:50,000 --> 02:06:51,000
见过

2959
02:06:51,000 --> 02:06:53,000
我觉得太恐怖了

2960
02:06:55,000 --> 02:06:58,000
Alienware 还专门出了一个叫什么

2961
02:06:59,000 --> 02:07:01,000
Video Amplifier

2962
02:07:01,000 --> 02:07:03,000
对差不多就是这个意思了

2963
02:07:03,000 --> 02:07:04,000
我看了一下价钱

2964
02:07:04,000 --> 02:07:06,000
我说那我干嘛不直接买一台 PC 放

2965
02:07:06,000 --> 02:07:07,000
干嘛不直接买一台电脑

2966
02:07:07,000 --> 02:07:09,000
对啊这就是神经病

2967
02:07:09,000 --> 02:07:11,000
这就是早充啊这不是

2968
02:07:11,000 --> 02:07:13,000
反正你用那个方法也是对的

2969
02:07:13,000 --> 02:07:16,000
不过反正就是这种 NUC 的方式挺讨喜的

2970
02:07:16,000 --> 02:07:19,000
就是大家在国内好像比较少

2971
02:07:19,000 --> 02:07:20,000
不知道为什么

2972
02:07:20,000 --> 02:07:21,000
就国外挺多的

2973
02:07:21,000 --> 02:07:24,000
就是 Best Buy 上面都还挺方便的

2974
02:07:24,000 --> 02:07:26,000
我不知道德国怎么样的

2975
02:07:26,000 --> 02:07:27,000
需求还没有出现

2976
02:07:27,000 --> 02:07:29,000
德国也挺多的

2977
02:07:30,000 --> 02:07:33,000
你这样在家很多家里人都

2978
02:07:33,000 --> 02:07:35,000
你不需要买个那种传统台式机

2979
02:07:35,000 --> 02:07:38,000
很大一坨又占地方有很多灰嘛

2980
02:07:38,000 --> 02:07:43,000
那个东西贴在那个用螺丝拧在显示器背后面多好

2981
02:07:43,000 --> 02:07:45,000
简单便宜完全是

2982
02:07:47,000 --> 02:07:50,000
下次可以再有找机会买一个吧

2983
02:07:52,000 --> 02:07:53,000
你用用吧

2984
02:07:53,000 --> 02:07:56,000
然后再给你汇报一下

2985
02:07:56,000 --> 02:07:57,000
再来改变我的生棍

2986
02:07:58,000 --> 02:08:00,000
你这边 PS 4 玩多久了

2987
02:08:00,000 --> 02:08:01,000
下次再给我汇报一下吧

2988
02:08:01,000 --> 02:08:03,000
感觉如何

2989
02:08:03,000 --> 02:08:04,000
好没问题

2990
02:08:04,000 --> 02:08:07,000
其实现在我已经觉得它比 XBOX One 好多了

2991
02:08:08,000 --> 02:08:10,000
你是有对比完了

2992
02:08:10,000 --> 02:08:12,000
有什么具体的感受吗

2993
02:08:14,000 --> 02:08:17,000
比如说 XBOX One 有一个变压器

2994
02:08:17,000 --> 02:08:18,000
巨大物理

2995
02:08:19,000 --> 02:08:20,000
这个要吐槽一下

2996
02:08:20,000 --> 02:08:21,000
这个是很多事情

2997
02:08:21,000 --> 02:08:23,000
很多时候不能忍的一件事情

2998
02:08:23,000 --> 02:08:26,000
而且最扯的是它自己会发声

2999
02:08:26,000 --> 02:08:30,000
我不知道里面是个风扇还是它的线圈

3000
02:08:30,000 --> 02:08:32,000
它的线圈是在震动还是怎么样

3001
02:08:33,000 --> 02:08:34,000
应该是线圈的问题吧

3002
02:08:34,000 --> 02:08:35,000
很多变压器都有这个问题

3003
02:08:35,000 --> 02:08:36,000
应该是线圈的问题

3004
02:08:36,000 --> 02:08:38,000
而且上面还有个指示灯

3005
02:08:38,000 --> 02:08:41,000
这个玩意本身已经可以作为一台机器来买了

3006
02:08:42,000 --> 02:08:44,000
但 PS 4 就没有这个问题

3007
02:08:44,000 --> 02:08:45,000
就差一根线的话

3008
02:08:45,000 --> 02:08:46,000
很多人都是这样子

3009
02:08:46,000 --> 02:08:50,000
现在可能最近一些设备现在功率越来越低了

3010
02:08:50,000 --> 02:08:51,000
可能还好了

3011
02:08:51,000 --> 02:08:53,000
以前你记不记得很多笔记本电脑

3012
02:08:53,000 --> 02:08:54,000
都什么超轻超薄

3013
02:08:54,000 --> 02:08:57,000
配一个 5 斤重的电源设备器

3014
02:08:57,000 --> 02:08:58,000
搞死你了

3015
02:08:59,000 --> 02:09:01,000
以前我有一个 ThinkPan

3016
02:09:02,000 --> 02:09:04,000
13 寸的 X 系列很早了

3017
02:09:04,000 --> 02:09:06,000
很早了 X 31 吧

3018
02:09:06,000 --> 02:09:07,000
应该是我没记错的话

3019
02:09:08,000 --> 02:09:09,000
对

3020
02:09:09,000 --> 02:09:11,000
然后 13 寸的本应该当时还是蛮小的

3021
02:09:11,000 --> 02:09:13,000
商务型的挺小的

3022
02:09:13,000 --> 02:09:16,000
但是那个适配器可估计有必惊重

3023
02:09:18,000 --> 02:09:21,000
你会觉得这个成功拿着就很沮丧

3024
02:09:21,000 --> 02:09:22,000
不现在好像

3025
02:09:22,000 --> 02:09:24,000
包括我现在用这个 Retina

3026
02:09:24,000 --> 02:09:26,000
你也用 Retina 15 寸

3027
02:09:26,000 --> 02:09:28,000
它变压器也很大的 85 瓦的

3028
02:09:29,000 --> 02:09:31,000
对要比 13 寸的大一圈

3029
02:09:31,000 --> 02:09:33,000
对大一圈不说还重

3030
02:09:33,000 --> 02:09:35,000
然后那个什么

3031
02:09:35,000 --> 02:09:36,000
Air 就要好很多

3032
02:09:36,000 --> 02:09:38,000
Air 它那个好像只有 35 瓦了

3033
02:09:38,000 --> 02:09:39,000
我记得没记错的话

3034
02:09:39,000 --> 02:09:41,000
就很轻巧

3035
02:09:42,000 --> 02:09:43,000
那个玩意是没有办法给

3036
02:09:44,000 --> 02:09:45,000
如果你在打开电脑的时候

3037
02:09:45,000 --> 02:09:48,000
是没有办法给蓝 MVP 充电的吧

3038
02:09:49,000 --> 02:09:50,000
你说用 35 瓦那个吗

3039
02:09:51,000 --> 02:09:52,000
对

3040
02:09:52,000 --> 02:09:54,000
如果你一直跑那个什么

3041
02:09:54,000 --> 02:09:55,000
就 CPU 一直在转

3042
02:09:55,000 --> 02:09:56,000
或者显卡一直在转

3043
02:09:56,000 --> 02:09:57,000
肯定是入不敷出的

3044
02:09:57,000 --> 02:09:58,000
应该是不行的

3045
02:09:58,000 --> 02:10:00,000
但是如果你是静态

3046
02:10:00,000 --> 02:10:02,000
就是没怎么用或者看网页

3047
02:10:02,000 --> 02:10:03,000
我觉得应该还凑合

3048
02:10:04,000 --> 02:10:06,000
可能会很慢但是

3049
02:10:06,000 --> 02:10:08,000
然后 PS 4 还有一点比较好的

3050
02:10:08,000 --> 02:10:10,000
就是它可以竖着放

3051
02:10:10,000 --> 02:10:12,000
它是一个两用设计的

3052
02:10:12,000 --> 02:10:14,000
不过对你来说已经无所谓了吧

3053
02:10:14,000 --> 02:10:16,000
你那么多就堆在一起好了

3054
02:10:16,000 --> 02:10:17,000
一层一层叠上去

3055
02:10:18,000 --> 02:10:19,000
一层层叠上去的话

3056
02:10:19,000 --> 02:10:20,000
散热会有问题吗

3057
02:10:20,000 --> 02:10:23,000
我是觉得需要一个架子

3058
02:10:23,000 --> 02:10:25,000
不不你就堆叠了吗

3059
02:10:25,000 --> 02:10:26,000
你就堆叠它嘛

3060
02:10:28,000 --> 02:10:30,000
我是觉得堆叠会有散热

3061
02:10:30,000 --> 02:10:32,000
而且会有机灰的问题

3062
02:10:32,000 --> 02:10:35,000
就是因为电气

3063
02:10:36,000 --> 02:10:38,000
就是电气跑的时候

3064
02:10:38,000 --> 02:10:40,000
静电会吸附灰尘

3065
02:10:40,000 --> 02:10:44,000
然后灰尘会积攒在两个设备的缝隙里

3066
02:10:44,000 --> 02:10:46,000
德国这个我觉得灰还是蛮重的

3067
02:10:46,000 --> 02:10:47,000
不知道为什么

3068
02:10:48,000 --> 02:10:49,000
上梅吗

3069
02:10:49,000 --> 02:10:51,000
当时你在曼海姆

3070
02:10:51,000 --> 02:10:53,000
曼海姆算是灰比较重的地方

3071
02:10:53,000 --> 02:10:54,000
没错

3072
02:10:56,000 --> 02:10:57,000
我经常那个桌面

3073
02:10:57,000 --> 02:10:58,000
我可能三天

3074
02:10:58,000 --> 02:10:59,000
这比国内好点

3075
02:10:59,000 --> 02:11:01,000
但是也不是好多少

3076
02:11:01,000 --> 02:11:02,000
三天不擦一下就觉得

3077
02:11:02,000 --> 02:11:04,000
摸一下这一层灰

3078
02:11:04,000 --> 02:11:09,000
然后 PS 刷脸也要比 Xbox One 方便

3079
02:11:09,000 --> 02:11:11,000
或者是直观一点

3080
02:11:11,000 --> 02:11:12,000
刷脸

3081
02:11:12,000 --> 02:11:15,000
你不觉得刷脸这件事情很久吗

3082
02:11:15,000 --> 02:11:17,000
你拿张照片去忽悠它不行吗

3083
02:11:18,000 --> 02:11:19,000
我为什么要拿照片去忽悠它

3084
02:11:19,000 --> 02:11:20,000
不 我就说

3085
02:11:20,000 --> 02:11:23,000
纯粹从一个安全的角度考虑的话

3086
02:11:25,000 --> 02:11:27,000
纯粹从安全角度考虑的话

3087
02:11:27,000 --> 02:11:29,000
根本不应该建立任何 PS 账号了

3088
02:11:31,000 --> 02:11:32,000
但是你试过吗

3089
02:11:32,000 --> 02:11:33,000
你拿张照片去忽悠它

3090
02:11:33,000 --> 02:11:34,000
它能认出来吗

3091
02:11:36,000 --> 02:11:38,000
没有 我可以试一试

3092
02:11:38,000 --> 02:11:39,000
你可以试一下

3093
02:11:39,000 --> 02:11:40,000
我一直很好奇这一点

3094
02:11:40,000 --> 02:11:41,000
之前国内不是

3095
02:11:41,000 --> 02:11:42,000
有可能是不行的

3096
02:11:42,000 --> 02:11:45,000
因为 PS 4 的摄影红颜是双

3097
02:11:45,000 --> 02:11:46,000
也是两个眼镜

3098
02:11:46,000 --> 02:11:47,000
就是它会

3099
02:11:48,000 --> 02:11:51,000
而且它在记录你的面部信息的时候

3100
02:11:51,000 --> 02:11:53,000
也会记录你抬头和转头的样子

3101
02:11:53,000 --> 02:11:54,000
OK

3102
02:11:54,000 --> 02:11:56,000
所以有可能它会通过

3103
02:11:56,000 --> 02:11:58,000
鼻子的高度来判断

3104
02:11:58,000 --> 02:11:59,000
这个人不立体

3105
02:11:59,000 --> 02:12:00,000
照片就不行

3106
02:12:00,000 --> 02:12:01,000
这个人不立体

3107
02:12:01,000 --> 02:12:03,000
对 你长得不够立体

3108
02:12:03,000 --> 02:12:04,000
不认你

3109
02:12:04,000 --> 02:12:05,000
亚洲人不能用这个

3110
02:12:07,000 --> 02:12:08,000
种族歧视

3111
02:12:09,000 --> 02:12:11,000
PS 4 是日本人做的

3112
02:12:11,000 --> 02:12:12,000
要相信我们亚洲人

3113
02:12:12,000 --> 02:12:13,000
日本人不算亚洲人

3114
02:12:15,000 --> 02:12:17,000
人家熟悉的国家开玩笑呢

3115
02:12:17,000 --> 02:12:18,000
G 8

3116
02:12:18,000 --> 02:12:20,000
意大利是脱欧入亚

3117
02:12:20,000 --> 02:12:22,000
日本是脱亚入欧

3118
02:12:22,000 --> 02:12:24,000
这黑的漂亮

3119
02:12:27,000 --> 02:12:28,000
好吧

3120
02:12:28,000 --> 02:12:30,000
差不多今天扯淡就扯到这

3121
02:12:30,000 --> 02:12:32,000
我估计我们的流量也快差不多了

3122
02:12:33,000 --> 02:12:36,000
对 今天我们的 Rail 是为了节目效果

3123
02:12:36,000 --> 02:12:38,000
LTE 给你们通话录的

3124
02:12:38,000 --> 02:12:43,000
用 LTE 和我还有柳承英通话

3125
02:12:43,000 --> 02:12:44,000
废了血本

3126
02:12:45,000 --> 02:12:47,000
对 而且这笔钱

3127
02:12:47,000 --> 02:12:49,000
你们有会员计划可以报销一笔

3128
02:12:49,000 --> 02:12:50,000
等一下 会员计划是会员计划

3129
02:12:50,000 --> 02:12:51,000
这个是两回事

3130
02:12:51,000 --> 02:12:53,000
不行 这个得红包讨回来

3131
02:12:54,000 --> 02:12:55,000
好吧

3132
02:12:55,000 --> 02:12:56,000
看我们弄个红包照

3133
02:12:59,000 --> 02:13:00,000
OK

3134
02:13:00,000 --> 02:13:02,000
我觉得其实可以考虑一下

3135
02:13:02,000 --> 02:13:03,000
要不要开捐赠

3136
02:13:04,000 --> 02:13:07,000
我技术方面都很成熟

3137
02:13:07,000 --> 02:13:09,000
就是等您一声令响

3138
02:13:10,000 --> 02:13:12,000
行 我回头去找支笔来挥一挥

3139
02:13:13,000 --> 02:13:14,000
同意

3140
02:13:18,000 --> 02:13:19,000
然后就拿着这个纸乐呵乐呵的

3141
02:13:19,000 --> 02:13:22,000
同意了 领导批示 赶快去开着

3142
02:13:26,000 --> 02:13:27,000
OK

3143
02:13:27,000 --> 02:13:28,000
我就不耽搁你了

3144
02:13:28,000 --> 02:13:29,000
你这边也快半夜了吧

3145
02:13:31,000 --> 02:13:33,000
现在是 23 点 37 分

3146
02:13:33,000 --> 02:13:35,000
不对 现在是北美山地时间

3147
02:13:35,000 --> 02:13:38,000
2 月 01 日 下午 3 点 405 点

3148
02:13:38,000 --> 02:13:39,000
我想到一个梗

3149
02:13:39,000 --> 02:13:43,000
就是我上大学的时候说过一个排位话剧

3150
02:13:43,000 --> 02:13:45,000
然后里面说

3151
02:13:45,000 --> 02:13:48,000
今天是猴年马月旅日星期朱

3152
02:13:49,000 --> 02:13:50,000
对

3153
02:13:54,000 --> 02:13:57,000
现在是北美山地时间猴年马月旅日星期朱

3154
02:13:57,000 --> 02:13:59,000
下午 3 点 04 分 05 秒

3155
02:14:00,000 --> 02:14:03,000
您刚刚收听完 ITN Podcast 网络旗下的

3156
02:14:03,000 --> 02:14:05,000
IT 技术主题节目内壑恐慌

3157
02:14:06,000 --> 02:14:08,000
内壑恐慌的网址是

3158
02:14:08,000 --> 02:14:11,000
ipn.li-kernelpanic

3159
02:14:11,000 --> 02:14:14,000
我之所以要说这个网址是因为我们的制作人

3160
02:14:14,000 --> 02:14:16,000
给下了最高指示说

3161
02:14:16,000 --> 02:14:18,000
每个节目开头结尾走最好说一遍

3162
02:14:18,000 --> 02:14:19,000
要做一下硬广

3163
02:14:20,000 --> 02:14:24,000
对 不然主要考量是会有听众

3164
02:14:25,000 --> 02:14:26,000
我们这个节目还好

3165
02:14:26,000 --> 02:14:27,000
我们节目客

3166
02:14:27,000 --> 02:14:29,000
对 我们节目应该不会有小白

3167
02:14:29,000 --> 02:14:33,000
就是听了之后居然不知道这个节目是有一个网址

3168
02:14:33,000 --> 02:14:35,000
别别 你还别说那个什么

3169
02:14:35,000 --> 02:14:38,000
我听 Lawrence 说他妈妈都听我们节目的

3170
02:14:40,000 --> 02:14:41,000
伯母好

3171
02:14:41,000 --> 02:14:42,000
你要小心一点

3172
02:14:43,000 --> 02:14:46,000
好 我们推荐大家使用 Podcast 客户端订阅节目

3173
02:14:46,000 --> 02:14:48,000
如果您不知道什么是客户端

3174
02:14:50,000 --> 02:14:52,000
或者不知道该用什么是客户端

3175
02:14:52,000 --> 02:14:53,000
不知道该用什么客户端

3176
02:14:53,000 --> 02:14:57,000
欢迎访问 ipn.li-faq

3177
02:15:00,000 --> 02:15:01,000
ipn 旗下的其他五档 Podcast

3178
02:15:01,000 --> 02:15:04,000
包括 softcore 技术主题节目 IT 功乐

3179
02:15:04,000 --> 02:15:06,000
医疗主题节目太医来了

3180
02:15:06,000 --> 02:15:07,000
美食节目未知道

3181
02:15:07,000 --> 02:15:10,000
以及不只谈艺术的艺术类节目流行通信

3182
02:15:10,000 --> 02:15:14,000
最后还有不知道是在播什么的无主题节目无词源

3183
02:15:14,000 --> 02:15:16,000
刚才那段也是念稿的吧

3184
02:15:17,000 --> 02:15:19,000
那当然了 你这种心怎么可能背下来

3185
02:15:19,000 --> 02:15:20,000
我说背中词

3186
02:15:20,000 --> 02:15:21,000
你这应该铭记于心啊

3187
02:15:22,000 --> 02:15:24,000
我内心太小了

3188
02:15:26,000 --> 02:15:28,000
行 那就这样吧 晚安了

3189
02:15:28,000 --> 02:15:30,000
OK OK OK

3190
02:15:30,000 --> 02:15:31,000
Bye Bye

