1
00:00:00,000 --> 00:00:02,000
321 开始

2
00:00:02,000 --> 00:00:06,000
我们其实要做一下开场还是要怎么先介绍一下

3
00:00:06,000 --> 00:00:08,000
我有一个梗

4
00:00:10,000 --> 00:00:14,000
我想想北京时间百分号 H 点百分号 M 分

5
00:00:14,000 --> 00:00:16,000
您现在收听到的是内核空旷

6
00:00:16,000 --> 00:00:18,000
这个梗是什么

7
00:00:20,000 --> 00:00:24,000
因为你看一般人一般做广播的时候

8
00:00:24,000 --> 00:00:28,000
人们会说北京时间 15 点 46 分

9
00:00:28,000 --> 00:00:30,000
然后我说北京时间

10
00:00:30,000 --> 00:00:32,000
但是你会意识到这是一款 podcast

11
00:00:32,000 --> 00:00:36,000
你根本不知道听众是在什么时候听这个 podcast

12
00:00:36,000 --> 00:00:38,000
所以我说北京时间然后愣一下

13
00:00:38,000 --> 00:00:40,000
百分号 H 点百分号 M 分

14
00:00:40,000 --> 00:00:42,000
所以这是一个 placeholder 对吧

15
00:00:42,000 --> 00:00:44,000
对啊

16
00:00:44,000 --> 00:00:46,000
就是 date format

17
00:00:46,000 --> 00:00:50,000
百分号 H 百分号 M

18
00:00:50,000 --> 00:00:52,000
这是什么

19
00:00:52,000 --> 00:00:54,000
string time format

20
00:00:54,000 --> 00:00:56,000
time format

21
00:00:56,000 --> 00:00:58,000
大家好

22
00:00:58,000 --> 00:01:00,000
这里是我们新开的一档

23
00:01:00,000 --> 00:01:02,000
播客节目

24
00:01:02,000 --> 00:01:04,000
叫做内核恐慌

25
00:01:04,000 --> 00:01:06,000
Colonel Panic

26
00:01:06,000 --> 00:01:08,000
然后这里的嘉宾

27
00:01:08,000 --> 00:01:10,000
就是我 Rail

28
00:01:10,000 --> 00:01:12,000
以及吴涛

29
00:01:12,000 --> 00:01:14,000
大家可能听之前听 IT 空洞的时候他已经来过几次了

30
00:01:14,000 --> 00:01:16,000
对

31
00:01:16,000 --> 00:01:18,000
其实咱们两个不能算嘉宾

32
00:01:18,000 --> 00:01:20,000
咱们两个算主播

33
00:01:20,000 --> 00:01:22,000
理论上我们假如

34
00:01:22,000 --> 00:01:24,000
podcast 可以积累到

35
00:01:24,000 --> 00:01:26,000
足够多的听众的话

36
00:01:26,000 --> 00:01:28,000
我们应该要一直做下去

37
00:01:28,000 --> 00:01:30,000
所以我们都是 host

38
00:01:30,000 --> 00:01:32,000
我们先解释一下为什么要做这么一档节目

39
00:01:34,000 --> 00:01:36,000
我听说

40
00:01:36,000 --> 00:01:38,000
我听 Lawrence 说

41
00:01:38,000 --> 00:01:40,000
有部分听众认为 IT 功能不够 hardcore

42
00:01:40,000 --> 00:01:42,000
对

43
00:01:42,000 --> 00:01:44,000
因为湿货

44
00:01:44,000 --> 00:01:46,000
不水货湿货太多

45
00:01:46,000 --> 00:01:48,000
干货比较少

46
00:01:48,000 --> 00:01:50,000
然后大家可能会比较抱怨

47
00:01:50,000 --> 00:01:52,000
但是其实我想了一下

48
00:01:52,000 --> 00:01:54,000
你说我们两个聊

49
00:01:54,000 --> 00:01:56,000
就纯聊干货估计也不现实

50
00:01:56,000 --> 00:01:58,000
也会夹杂很多

51
00:01:58,000 --> 00:02:00,000
湿货、丝货以及水货

52
00:02:00,000 --> 00:02:02,000
在里面我觉得

53
00:02:02,000 --> 00:02:04,000
而且我觉得

54
00:02:04,000 --> 00:02:06,000
在中文 IT 圈里面

55
00:02:06,000 --> 00:02:08,000
干货实在是太多了

56
00:02:08,000 --> 00:02:10,000
你有这感觉吗

57
00:02:10,000 --> 00:02:12,000
挺有这样的感觉

58
00:02:12,000 --> 00:02:14,000
我总觉得

59
00:02:14,000 --> 00:02:16,000
缺一些比较

60
00:02:16,000 --> 00:02:18,000
轻弹的部分

61
00:02:18,000 --> 00:02:20,000
当然也有可能是跟

62
00:02:20,000 --> 00:02:22,000
我们读的

63
00:02:22,000 --> 00:02:24,000
我跟每个人的日常阅读有关

64
00:02:24,000 --> 00:02:26,000
也许我总是读那些比较干的部分

65
00:02:26,000 --> 00:02:28,000
我觉得听听你们的

66
00:02:28,000 --> 00:02:30,000
湿货挺好的

67
00:02:30,000 --> 00:02:32,000
虽然只是在通勤的路上听

68
00:02:32,000 --> 00:02:34,000
听听湿货挺好的

69
00:02:34,000 --> 00:02:36,000
OK 所以有一个问题就是

70
00:02:36,000 --> 00:02:38,000
我们这个节目和 IT 功能

71
00:02:38,000 --> 00:02:40,000
有什么区别呢

72
00:02:40,000 --> 00:02:42,000
刚才讲了都是很多水分在里面

73
00:02:42,000 --> 00:02:44,000
可能我们这个节目的定位

74
00:02:44,000 --> 00:02:46,000
和选题上会更加偏向于

75
00:02:46,000 --> 00:02:48,000
比如说像程式员

76
00:02:48,000 --> 00:02:50,000
开发者这类的东西

77
00:02:50,000 --> 00:02:52,000
因为我和吴涛都是

78
00:02:52,000 --> 00:02:54,000
做相关行业的

79
00:02:54,000 --> 00:02:58,000
对 我觉得可能比较重要的一个区别就是

80
00:02:58,000 --> 00:03:00,000
在 IT 功能里面

81
00:03:00,000 --> 00:03:02,000
你们会假设听众

82
00:03:02,000 --> 00:03:04,000
听不懂一些东西

83
00:03:04,000 --> 00:03:06,000
而我们则假设听众是能听懂

84
00:03:06,000 --> 00:03:08,000
大部分内容的

85
00:03:08,000 --> 00:03:10,000
我们不会去解释一些名词

86
00:03:10,000 --> 00:03:12,000
或者是解释一些

87
00:03:12,000 --> 00:03:14,000
术语或者是做背景介绍之类的

88
00:03:14,000 --> 00:03:16,000
我们就直接开始讲

89
00:03:16,000 --> 00:03:20,000
而且会比较不太顾及听众的感受

90
00:03:20,000 --> 00:03:22,000
对 所以你看我们这个

91
00:03:22,000 --> 00:03:24,000
播客的名字叫做 Colonel Panic

92
00:03:24,000 --> 00:03:26,000
如果你问什么是 Colonel Panic

93
00:03:26,000 --> 00:03:28,000
那你就输了

94
00:03:28,000 --> 00:03:30,000
那你就不适合听这种题目

95
00:03:30,000 --> 00:03:32,000
不过其实你在题杆里面也写了

96
00:03:32,000 --> 00:03:34,000
为什么要解释一下

97
00:03:34,000 --> 00:03:36,000
对 毕竟还是要解释

98
00:03:36,000 --> 00:03:38,000
内核恐慌来自于 Colonel Panic

99
00:03:38,000 --> 00:03:40,000
Colonel Panic 我相信

100
00:03:40,000 --> 00:03:42,000
如果你不是一个

101
00:03:42,000 --> 00:03:44,000
普通、毛鲁的

102
00:03:44,000 --> 00:03:46,000
计算机专业的本科生

103
00:03:46,000 --> 00:03:48,000
那你应该是知道什么是 Colonel Panic

104
00:03:48,000 --> 00:03:50,000
如果你 ever

105
00:03:50,000 --> 00:03:52,000
用过

106
00:03:52,000 --> 00:03:54,000
Linux 或者是

107
00:03:54,000 --> 00:03:56,000
MacOS 的话

108
00:03:56,000 --> 00:03:58,000
而且你也足够的

109
00:03:58,000 --> 00:04:00,000
有足够的不幸运

110
00:04:00,000 --> 00:04:02,000
曾经看到过 MacOS

111
00:04:02,000 --> 00:04:04,000
出现过一个俗称五国

112
00:04:04,000 --> 00:04:06,000
现在已经是六国还是七国的画面

113
00:04:06,000 --> 00:04:08,000
就是背景是一个

114
00:04:08,000 --> 00:04:10,000
大大的关机的符号

115
00:04:10,000 --> 00:04:12,000
然后用五种国家的语言

116
00:04:12,000 --> 00:04:14,000
写着

117
00:04:14,000 --> 00:04:16,000
MacOS 10 遭遇到了

118
00:04:16,000 --> 00:04:18,000
一个不可预知或者是

119
00:04:18,000 --> 00:04:20,000
很难搞定的问题

120
00:04:20,000 --> 00:04:22,000
我不得不关机了

121
00:04:22,000 --> 00:04:24,000
那么在这种情况下其实我们说

122
00:04:24,000 --> 00:04:26,000
MacOS 操作系统的

123
00:04:26,000 --> 00:04:28,000
Colonel

124
00:04:28,000 --> 00:04:30,000
也就是它的内核出现了 Panic

125
00:04:30,000 --> 00:04:32,000
可能如果听众朋友没有用过 Mac 的话

126
00:04:32,000 --> 00:04:34,000
用 Windows 时代

127
00:04:34,000 --> 00:04:36,000
那个叫什么蓝屏

128
00:04:36,000 --> 00:04:38,000
Windows 那个叫做

129
00:04:38,000 --> 00:04:40,000
专业数语叫做 Stop Error

130
00:04:40,000 --> 00:04:42,000
就是停止错误

131
00:04:42,000 --> 00:04:44,000
这个错误如此严重

132
00:04:44,000 --> 00:04:46,000
以至于它必须停下来了

133
00:04:46,000 --> 00:04:48,000
对,俗称

134
00:04:48,000 --> 00:04:50,000
叫什么

135
00:04:50,000 --> 00:04:52,000
中文叫蓝屏,英文叫做

136
00:04:52,000 --> 00:04:54,000
The blue screen of death

137
00:04:54,000 --> 00:04:56,000
蓝色死亡屏幕

138
00:05:00,000 --> 00:05:02,000
Mac 还有一个说法叫做

139
00:05:02,000 --> 00:05:04,000
Spinning beach ball of death

140
00:05:04,000 --> 00:05:06,000
Spinning beach ball of death

141
00:05:06,000 --> 00:05:08,000
但是

142
00:05:08,000 --> 00:05:10,000
这个其实并不对等

143
00:05:10,000 --> 00:05:12,000
因为 Spinning beach ball of death

144
00:05:12,000 --> 00:05:14,000
不一定会导致

145
00:05:14,000 --> 00:05:16,000
Colonel Panic

146
00:05:16,000 --> 00:05:18,000
对,那个只是系统停止响应

147
00:05:18,000 --> 00:05:20,000
它通常只是

148
00:05:20,000 --> 00:05:22,000
在用户层的

149
00:05:22,000 --> 00:05:24,000
一个进程

150
00:05:24,000 --> 00:05:26,000
导致 UI 不能更新

151
00:05:26,000 --> 00:05:28,000
才会出现

152
00:05:28,000 --> 00:05:30,000
所以其实我

153
00:05:30,000 --> 00:05:32,000
最近还遇到这么几个事情

154
00:05:32,000 --> 00:05:34,000
就是那个

155
00:05:34,000 --> 00:05:36,000
我发现现在 Mac 上最容易出现这个问题

156
00:05:36,000 --> 00:05:38,000
就是 Safari,不是,Finder 吧

157
00:05:40,000 --> 00:05:42,000
真的吗?

158
00:05:42,000 --> 00:05:44,000
我用 Finder 从来没有出现过

159
00:05:44,000 --> 00:05:46,000
难道经常遭遇 Colonel Panic 不可能吗?

160
00:05:46,000 --> 00:05:48,000
不不不

161
00:05:48,000 --> 00:05:50,000
Spinning ball

162
00:05:50,000 --> 00:05:52,000
主要的问题是我家里有一个 NAS

163
00:05:52,000 --> 00:05:54,000
NAS 就是

164
00:05:54,000 --> 00:05:56,000
网络硬盘

165
00:05:56,000 --> 00:05:58,000
它是通过 Finder

166
00:05:58,000 --> 00:06:00,000
Share 的 Tab 去访问的

167
00:06:00,000 --> 00:06:02,000
所以是在等待网络 IO 的时候导致的

168
00:06:02,000 --> 00:06:04,000
对,会很慢

169
00:06:04,000 --> 00:06:06,000
我觉得这个 Finder 写的不好的地方

170
00:06:06,000 --> 00:06:08,000
它这里是阻塞的一个过程

171
00:06:08,000 --> 00:06:10,000
就是你一旦

172
00:06:10,000 --> 00:06:12,000
它那个 NAS 它是一个机械式硬盘

173
00:06:12,000 --> 00:06:14,000
然后如果你一段时间不用的话

174
00:06:14,000 --> 00:06:16,000
它是设置了默认是会

175
00:06:16,000 --> 00:06:18,000
就停转的嘛

176
00:06:18,000 --> 00:06:20,000
就省电嘛

177
00:06:20,000 --> 00:06:22,000
我也遇到过类似的问题

178
00:06:22,000 --> 00:06:24,000
而且这甚至不是通过 NAS

179
00:06:24,000 --> 00:06:26,000
我在接一个外接硬盘的时候

180
00:06:26,000 --> 00:06:28,000
会导致 Finder

181
00:06:28,000 --> 00:06:30,000
也会这样子吧

182
00:06:30,000 --> 00:06:32,000
然后我的解决方案是

183
00:06:32,000 --> 00:06:34,000
做一个 Chrome Tab

184
00:06:34,000 --> 00:06:36,000
然后每隔 5 分钟去 LS 一下这个硬盘

185
00:06:36,000 --> 00:06:38,000
就保持它

186
00:06:38,000 --> 00:06:40,000
一直运转嘛

187
00:06:40,000 --> 00:06:42,000
对,但这样会很吵啊

188
00:06:42,000 --> 00:06:44,000
还好吧

189
00:06:44,000 --> 00:06:46,000
你的 NAS 难道不是放在一个不会吵到的地方吗

190
00:06:46,000 --> 00:06:48,000
我很远,另外一个房间

191
00:06:48,000 --> 00:06:50,000
对啊,所以无所谓嘛

192
00:06:50,000 --> 00:06:52,000
但是你的 U 盘就不行了

193
00:06:52,000 --> 00:06:54,000
U 盘肯定跟电脑连在一起的嘛

194
00:06:54,000 --> 00:06:56,000
我倒是没有遇到过这个问题

195
00:06:56,000 --> 00:06:58,000
我是把那个移动硬盘塞在抽屉的最里面

196
00:06:58,000 --> 00:07:00,000
然后它只要转起来

197
00:07:00,000 --> 00:07:02,000
我也听不到其实

198
00:07:02,000 --> 00:07:04,000
你这样设置了应该

199
00:07:04,000 --> 00:07:06,000
因为我都是摆在外面的

200
00:07:06,000 --> 00:07:08,000
我这个桌子是没有抽屉的

201
00:07:08,000 --> 00:07:10,000
对,我没有找到

202
00:07:10,000 --> 00:07:12,000
怎么样才可以设定说

203
00:07:12,000 --> 00:07:14,000
这个移动硬盘

204
00:07:14,000 --> 00:07:16,000
或者它根本就是一个内置的功能

205
00:07:16,000 --> 00:07:18,000
就是它会自动停下来省电

206
00:07:18,000 --> 00:07:20,000
然后导致第一次房关的时候

207
00:07:20,000 --> 00:07:22,000
会有一个非常慢的过程

208
00:07:22,000 --> 00:07:24,000
那我就干脆用这种暴力的方式

209
00:07:24,000 --> 00:07:26,000
我记得在 Linux 上是可以设置

210
00:07:26,000 --> 00:07:28,000
有那个什么 PM set 这个工具

211
00:07:28,000 --> 00:07:30,000
好像是一个什么玩意

212
00:07:30,000 --> 00:07:32,000
有个命令行的工具

213
00:07:32,000 --> 00:07:34,000
在那边可以设定

214
00:07:34,000 --> 00:07:36,000
不让这些硬盘就停下来

215
00:07:38,000 --> 00:07:40,000
我不太记得

216
00:07:40,000 --> 00:07:42,000
好像是省电功能

217
00:07:42,000 --> 00:07:44,000
应该是可以设定的

218
00:07:44,000 --> 00:07:46,000
但是我当时没有找到

219
00:07:46,000 --> 00:07:48,000
所以你还有很多是用外置硬盘吗

220
00:07:48,000 --> 00:07:50,000
现在

221
00:07:50,000 --> 00:07:52,000
现在没有了,现在我可能会用外置硬盘

222
00:07:52,000 --> 00:07:58,000
现在没有了,现在我可能会买一个时间胶囊

223
00:07:58,000 --> 00:08:00,000
你真的要买那个吗

224
00:08:00,000 --> 00:08:02,000
对,挺二的

225
00:08:02,000 --> 00:08:04,000
不过我觉得

226
00:08:04,000 --> 00:08:06,000
人变得越来越懒了

227
00:08:06,000 --> 00:08:08,000
如果能花钱解决问题

228
00:08:08,000 --> 00:08:10,000
可能就不愿意再去

229
00:08:10,000 --> 00:08:12,000
自己动手了

230
00:08:12,000 --> 00:08:14,000
或者说我希望能够把动手的精力

231
00:08:14,000 --> 00:08:16,000
留在其他部分

232
00:08:16,000 --> 00:08:18,000
这个不错,时间

233
00:08:18,000 --> 00:08:20,000
我前两天其实在网上看到了一个

234
00:08:20,000 --> 00:08:22,000
在 Hacker News 上面的评论区

235
00:08:22,000 --> 00:08:24,000
看到了一条新闻

236
00:08:24,000 --> 00:08:26,000
有一个人

237
00:08:26,000 --> 00:08:28,000
在 GitHub 上公布了一个

238
00:08:28,000 --> 00:08:30,000
一个脚本

239
00:08:30,000 --> 00:08:32,000
自动的把 Mac 的很多设置

240
00:08:32,000 --> 00:08:34,000
设定为

241
00:08:34,000 --> 00:08:36,000
加引号的更易用

242
00:08:36,000 --> 00:08:38,000
然后有一个人评论说

243
00:08:38,000 --> 00:08:40,000
这些整天捣腾电脑的人

244
00:08:40,000 --> 00:08:42,000
就好像

245
00:08:42,000 --> 00:08:44,000
就像 Car Guy

246
00:08:44,000 --> 00:08:46,000
就是摆动汽车的人一样

247
00:08:46,000 --> 00:08:48,000
改装的

248
00:08:48,000 --> 00:08:50,000
把汽车很多部分改装掉

249
00:08:50,000 --> 00:08:52,000
来获得一点点微不足道的

250
00:08:52,000 --> 00:08:54,000
性能提升

251
00:08:54,000 --> 00:08:56,000
然后他说我就很恨这种人

252
00:08:56,000 --> 00:08:58,000
但是我就想说

253
00:08:58,000 --> 00:09:00,000
其实我们每个人

254
00:09:00,000 --> 00:09:02,000
在每个阶段

255
00:09:02,000 --> 00:09:04,000
在某一个阶段可能都是这样的人

256
00:09:04,000 --> 00:09:06,000
会拼命的去摆动

257
00:09:06,000 --> 00:09:08,000
折腾这个电脑

258
00:09:08,000 --> 00:09:10,000
但是可能现在是折腾不动

259
00:09:10,000 --> 00:09:12,000
或者是希望能够去折腾其他的东西

260
00:09:12,000 --> 00:09:14,000
所以就觉得

261
00:09:14,000 --> 00:09:16,000
如果能够有一个现成的

262
00:09:16,000 --> 00:09:18,000
而且比较好的解决方案的话

263
00:09:18,000 --> 00:09:20,000
不妨就用它

264
00:09:20,000 --> 00:09:22,000
也是我当初为什么

265
00:09:22,000 --> 00:09:24,000
换用 Mac 的主要原因

266
00:09:24,000 --> 00:09:26,000
因为在换 Mac 之前

267
00:09:26,000 --> 00:09:28,000
我大概用了几年的时间

268
00:09:28,000 --> 00:09:30,000
Linux 桌面

269
00:09:30,000 --> 00:09:32,000
Wandoo 的桌面系统

270
00:09:32,000 --> 00:09:34,000
确实太折腾

271
00:09:34,000 --> 00:09:36,000
我觉得可能就是因为我

272
00:09:36,000 --> 00:09:38,000
不停的折腾它

273
00:09:38,000 --> 00:09:40,000
后来我是在 Windows

274
00:09:40,000 --> 00:09:42,000
装了一个讯息机

275
00:09:42,000 --> 00:09:44,000
然后在讯息机装了

276
00:09:44,000 --> 00:09:46,000
可能四五个 Linux

277
00:09:48,000 --> 00:09:50,000
一开始是觉得

278
00:09:50,000 --> 00:09:52,000
怎么都不能找到一个

279
00:09:52,000 --> 00:09:54,000
可新的

280
00:09:54,000 --> 00:09:56,000
桌面环境

281
00:09:56,000 --> 00:09:58,000
到后来就变成了

282
00:09:58,000 --> 00:10:00,000
怎么都不能找到一个可新的 Windows Manager

283
00:10:00,000 --> 00:10:02,000
我记得那个时候

284
00:10:02,000 --> 00:10:04,000
用 i 3

285
00:10:04,000 --> 00:10:06,000
还是用一个叫做

286
00:10:06,000 --> 00:10:08,000
E 吧

287
00:10:08,000 --> 00:10:10,000
Enlightment 是不是

288
00:10:10,000 --> 00:10:12,000
不是 Enlightment

289
00:10:12,000 --> 00:10:14,000
一时想不起来叫什么

290
00:10:14,000 --> 00:10:16,000
Awesome

291
00:10:16,000 --> 00:10:18,000
好像叫 Awesome

292
00:10:18,000 --> 00:10:20,000
是一个 Windows Manager

293
00:10:20,000 --> 00:10:22,000
它支持纯键盘操作

294
00:10:22,000 --> 00:10:24,000
因为那个时候我

295
00:10:24,000 --> 00:10:26,000
试图找到一个

296
00:10:26,000 --> 00:10:28,000
纯键盘的桌面环境

297
00:10:28,000 --> 00:10:30,000
Linux 的桌面环境

298
00:10:30,000 --> 00:10:32,000
但后来就

299
00:10:32,000 --> 00:10:34,000
还是觉得还买台 Mac

300
00:10:34,000 --> 00:10:36,000
我的问题倒不是那么

301
00:10:36,000 --> 00:10:38,000
不是因为软件的原因

302
00:10:38,000 --> 00:10:40,000
我的因为是硬件的事情

303
00:10:40,000 --> 00:10:42,000
但是我用的

304
00:10:42,000 --> 00:10:44,000
就在跑五磅图的时候

305
00:10:44,000 --> 00:10:46,000
用的是一个 ThinkPad

306
00:10:46,000 --> 00:10:48,000
然后就经常

307
00:10:48,000 --> 00:10:50,000
那个时候是大学上要用什么特殊的

308
00:10:50,000 --> 00:10:52,000
无线认证的一种方式

309
00:10:52,000 --> 00:10:54,000
现在叫锐节

310
00:10:54,000 --> 00:10:56,000
对很多大学里面都有这个

311
00:10:56,000 --> 00:10:58,000
你是在国内的时候

312
00:10:58,000 --> 00:11:00,000
对国内的时候

313
00:11:00,000 --> 00:11:02,000
我们学校还用的还不叫锐节

314
00:11:02,000 --> 00:11:04,000
是一个什么其他的一个厂商

315
00:11:04,000 --> 00:11:06,000
我忘了但是意思是差不多的

316
00:11:06,000 --> 00:11:08,000
就不是说像现在

317
00:11:08,000 --> 00:11:10,000
你可以连上它是要认证一下

318
00:11:10,000 --> 00:11:12,000
但是好像不需要装一个特殊的客户端

319
00:11:12,000 --> 00:11:14,000
你直接用当时是

320
00:11:14,000 --> 00:11:16,000
它是针对 Windows 开发的

321
00:11:16,000 --> 00:11:18,000
你用 Windows 自带的验证一下

322
00:11:18,000 --> 00:11:20,000
就可以了但是问题是

323
00:11:20,000 --> 00:11:22,000
我在五磅图上用自带的

324
00:11:22,000 --> 00:11:24,000
WiFi Stack 是打死也验证

325
00:11:24,000 --> 00:11:26,000
不过了就非常

326
00:11:26,000 --> 00:11:28,000
非常折腾而且它好像每个一段时间

327
00:11:28,000 --> 00:11:30,000
会升级一次就是我可能配好可能

328
00:11:30,000 --> 00:11:32,000
能用一次去图书馆比如说

329
00:11:32,000 --> 00:11:34,000
然后过个十天

330
00:11:34,000 --> 00:11:36,000
半个月发现又连不上

331
00:11:36,000 --> 00:11:38,000
我想想 Fuck this

332
00:11:38,000 --> 00:11:40,000
就买了一个 Mac

333
00:11:40,000 --> 00:11:42,000
然后就后来

334
00:11:42,000 --> 00:11:44,000
就出国才买 Mac

335
00:11:44,000 --> 00:11:46,000
也是因为类似的问题

336
00:11:46,000 --> 00:11:48,000
OK 我记得那个时候

337
00:11:48,000 --> 00:11:50,000
我刚到德国

338
00:11:50,000 --> 00:11:52,000
印象比较深的一件事情就是

339
00:11:52,000 --> 00:11:54,000
那个

340
00:11:54,000 --> 00:11:56,000
学校的计算机实验室门上

341
00:11:56,000 --> 00:11:58,000
贴着一个纸条写着

342
00:11:58,000 --> 00:12:00,000
我们不提供任何微软产品

343
00:12:00,000 --> 00:12:02,000
然后旁边

344
00:12:02,000 --> 00:12:04,000
一张纸条上面写着

345
00:12:04,000 --> 00:12:06,000
如果要下载 WiFi 的

346
00:12:08,000 --> 00:12:10,000
认证客户端 Windows 请去这里

347
00:12:10,000 --> 00:12:12,000
Linux 请去那里

348
00:12:12,000 --> 00:12:14,000
然后我就觉得

349
00:12:14,000 --> 00:12:16,000
Linux 用户真是

350
00:12:16,000 --> 00:12:18,000
畅通无阻

351
00:12:18,000 --> 00:12:20,000
这点跟我在德国另外一个学校遇到的

352
00:12:20,000 --> 00:12:22,000
印象也差不多当时

353
00:12:22,000 --> 00:12:24,000
不是德国大陆一年也是在另外一个学校交换

354
00:12:24,000 --> 00:12:26,000
是在他们的

355
00:12:26,000 --> 00:12:28,000
Informatik

356
00:12:28,000 --> 00:12:30,000
Informatik

357
00:12:30,000 --> 00:12:32,000
就是德语的 Computer Science

358
00:12:34,000 --> 00:12:36,000
信息科学

359
00:12:36,000 --> 00:12:38,000
然后

360
00:12:38,000 --> 00:12:40,000
爱丁堡的

361
00:12:40,000 --> 00:12:42,000
计算机学院也叫做

362
00:12:42,000 --> 00:12:44,000
Informatik

363
00:12:44,000 --> 00:12:46,000
是 C 吧

364
00:12:46,000 --> 00:12:48,000
是 Informatiks

365
00:12:48,000 --> 00:12:50,000
对是 C

366
00:12:50,000 --> 00:12:52,000
不是 K

367
00:12:52,000 --> 00:12:54,000
我觉得还挺神奇的

368
00:12:54,000 --> 00:12:56,000
我觉得这更合理

369
00:12:56,000 --> 00:12:58,000
Computer Science sounds weird

370
00:12:58,000 --> 00:13:00,000
Informatik

371
00:13:00,000 --> 00:13:02,000
听起来比较屌

372
00:13:02,000 --> 00:13:04,000
对信息学

373
00:13:04,000 --> 00:13:06,000
其实信息学在国内

374
00:13:06,000 --> 00:13:08,000
跟其他科目有点关系

375
00:13:08,000 --> 00:13:10,000
跟 Computer Science 不是严格

376
00:13:10,000 --> 00:13:12,000
信息学好像是什么情报

377
00:13:12,000 --> 00:13:14,000
信息专业

378
00:13:14,000 --> 00:13:16,000
他们做的事情是

379
00:13:16,000 --> 00:13:18,000
间谍那一类的

380
00:13:18,000 --> 00:13:20,000
他们比较偏向于

381
00:13:22,000 --> 00:13:24,000
不那么计算机科学的部分

382
00:13:24,000 --> 00:13:26,000
就是信息传输

383
00:13:26,000 --> 00:13:28,000
还有什么

384
00:13:28,000 --> 00:13:30,000
乃至雷达之类的好像都有

385
00:13:30,000 --> 00:13:32,000
所以是一个更

386
00:13:32,000 --> 00:13:34,000
Hardcore 的

387
00:13:34,000 --> 00:13:36,000
一个科目

388
00:13:36,000 --> 00:13:38,000
偏向于通讯的专业

389
00:13:38,000 --> 00:13:40,000
刚说哪里了

390
00:13:40,000 --> 00:13:42,000
我在德国的时候发现

391
00:13:42,000 --> 00:13:44,000
德国的 LUG

392
00:13:44,000 --> 00:13:46,000
Lennox Unit Group

393
00:13:46,000 --> 00:13:48,000
好像特别 Hardcore

394
00:13:48,000 --> 00:13:50,000
比较多

395
00:13:50,000 --> 00:13:52,000
而且他们会很坚持

396
00:13:52,000 --> 00:13:54,000
很多事情他不想用

397
00:13:54,000 --> 00:13:56,000
付费或者是

398
00:13:56,000 --> 00:13:58,000
特别是微软的产品

399
00:13:58,000 --> 00:14:00,000
德国的时候也是有一个门上面

400
00:14:00,000 --> 00:14:02,000
举师他们也是

401
00:14:02,000 --> 00:14:04,000
叫什么 Technical Support

402
00:14:04,000 --> 00:14:06,000
然后他们也是说 Windows

403
00:14:06,000 --> 00:14:08,000
去另外那个玩

404
00:14:08,000 --> 00:14:10,000
然后这边只管 Unix 类系统

405
00:14:10,000 --> 00:14:12,000
对所以

406
00:14:12,000 --> 00:14:14,000
我觉得这挺不错的

407
00:14:14,000 --> 00:14:16,000
德国是这样

408
00:14:16,000 --> 00:14:18,000
如果你的政府部门开发什么软件

409
00:14:18,000 --> 00:14:20,000
这个东西只支持 Windows

410
00:14:20,000 --> 00:14:22,000
立刻会有人去报人

411
00:14:22,000 --> 00:14:24,000
德国有一个

412
00:14:24,000 --> 00:14:26,000
德国报税可以在网上报税

413
00:14:26,000 --> 00:14:28,000
这个报税部门一开始

414
00:14:28,000 --> 00:14:30,000
只有一个 Windows 的软件

415
00:14:30,000 --> 00:14:32,000
后来被人抱怨他们不得不开发了一个 Linux 的软件

416
00:14:32,000 --> 00:14:34,000
现在你在 Linux 下面

417
00:14:34,000 --> 00:14:36,000
就可以报税

418
00:14:36,000 --> 00:14:38,000
但 Mac 用户机器

419
00:14:38,000 --> 00:14:40,000
还是没有受到重视

420
00:14:40,000 --> 00:14:42,000
可能德国政府也觉得你既然

421
00:14:42,000 --> 00:14:44,000
有钱买得起 Mac 那你就请你去

422
00:14:44,000 --> 00:14:46,000
花钱买 Mac 下面的报税软件

423
00:14:46,000 --> 00:14:48,000
它是一个专用的客户端

424
00:14:48,000 --> 00:14:50,000
不是一个网页版吗

425
00:14:50,000 --> 00:14:52,000
是一个专用的客户端报税必须用一个专用的客户端

426
00:14:52,000 --> 00:14:54,000
这个客户端会

427
00:14:54,000 --> 00:14:56,000
会用数字证书给你签名

428
00:14:56,000 --> 00:14:58,000
通过加密信道把

429
00:14:58,000 --> 00:15:00,000
报税表单发给

430
00:15:00,000 --> 00:15:02,000
政府部门

431
00:15:02,000 --> 00:15:04,000
这么复杂

432
00:15:04,000 --> 00:15:06,000
它报税比较简单

433
00:15:06,000 --> 00:15:08,000
政府不提供任何这种官方的

434
00:15:08,000 --> 00:15:10,000
界面给你

435
00:15:10,000 --> 00:15:12,000
你可以用纸张的方式填表去报

436
00:15:12,000 --> 00:15:14,000
但是其实大多数人还是找一个

437
00:15:14,000 --> 00:15:16,000
你刚才讲的软件

438
00:15:16,000 --> 00:15:18,000
做软件的公司

439
00:15:18,000 --> 00:15:20,000
它同时有这种客户端版本

440
00:15:20,000 --> 00:15:22,000
比如说你可装到你的 Mac 上

441
00:15:22,000 --> 00:15:24,000
可以装到你的 Windows 上

442
00:15:24,000 --> 00:15:26,000
甚至还有 iPhone 就是 iOS 的版本

443
00:15:26,000 --> 00:15:28,000
但是我一直用的都是

444
00:15:28,000 --> 00:15:30,000
他们的一个网页版

445
00:15:30,000 --> 00:15:32,000
虽然很丑但是好歹能用

446
00:15:32,000 --> 00:15:34,000
而且我试了一下吧

447
00:15:34,000 --> 00:15:36,000
跨浏览器的兼容性还不错

448
00:15:36,000 --> 00:15:38,000
也许这是更好的一种选择

449
00:15:38,000 --> 00:15:40,000
我不知道为什么德国人一定要

450
00:15:40,000 --> 00:15:42,000
税务局一定要

451
00:15:42,000 --> 00:15:44,000
自己开发一个客户端

452
00:15:44,000 --> 00:15:46,000
你刚才都说他要加密那些很麻烦

453
00:15:46,000 --> 00:15:48,000
你知道加密

454
00:15:48,000 --> 00:15:50,000
我觉得有点 over engineering

455
00:15:50,000 --> 00:15:52,000
很多东西都是 over engineering

456
00:15:52,000 --> 00:15:54,000
是德国人

457
00:15:54,000 --> 00:15:56,000
可能是比较

458
00:15:56,000 --> 00:15:58,000
make sense

459
00:15:58,000 --> 00:16:00,000
不像法国的很多东西

460
00:16:00,000 --> 00:16:02,000
而且非常奇过

461
00:16:04,000 --> 00:16:06,000
我希望听众里面没有

462
00:16:06,000 --> 00:16:08,000
法国粉因为我是一个非常喜欢

463
00:16:08,000 --> 00:16:10,000
黑法国人可能会经常听见

464
00:16:10,000 --> 00:16:12,000
我吐槽法国的

465
00:16:12,000 --> 00:16:14,000
德国人都黑法国人吧

466
00:16:14,000 --> 00:16:16,000
也不是德国人

467
00:16:16,000 --> 00:16:18,000
我觉得德国应该也有喜欢法国的

468
00:16:18,000 --> 00:16:20,000
黑法国是欧洲的

469
00:16:20,000 --> 00:16:22,000
黑法国是欧洲的

470
00:16:22,000 --> 00:16:24,000
你想

471
00:16:24,000 --> 00:16:26,000
这是谁说的

472
00:16:26,000 --> 00:16:28,000
好像是 Cecian 说的

473
00:16:28,000 --> 00:16:30,000
你想跟欧洲的任何一个国家

474
00:16:30,000 --> 00:16:32,000
建立起

475
00:16:32,000 --> 00:16:34,000
陌生人建立迅速建立起友谊

476
00:16:34,000 --> 00:16:36,000
黑法国人就可以了

477
00:16:36,000 --> 00:16:38,000
先黑一下法国人看看对方有没有反应

478
00:16:38,000 --> 00:16:40,000
没有可能就可以一级黑了

479
00:16:42,000 --> 00:16:44,000
但是我觉得就是

480
00:16:44,000 --> 00:16:46,000
刚才你讲那种方式用那种什么

481
00:16:46,000 --> 00:16:48,000
就是证书签名然后加密的方式确实是

482
00:16:48,000 --> 00:16:50,000
更安全的

483
00:16:50,000 --> 00:16:52,000
因为加拿大这种地方对安全

484
00:16:52,000 --> 00:16:54,000
他们是很水的

485
00:16:54,000 --> 00:16:56,000
很多事情都是可以

486
00:16:56,000 --> 00:16:58,000
很容易的不需要经过任何

487
00:16:58,000 --> 00:17:00,000
麻烦的就可以

488
00:17:00,000 --> 00:17:02,000
搜索已经任人到别人

489
00:17:02,000 --> 00:17:04,000
那天我去

490
00:17:04,000 --> 00:17:06,000
这次回来搬了一个

491
00:17:06,000 --> 00:17:08,000
地方的新的地址

492
00:17:08,000 --> 00:17:10,000
然后就要去改

493
00:17:10,000 --> 00:17:12,000
比如说我改了那个价值上的

494
00:17:12,000 --> 00:17:14,000
注册的地址

495
00:17:14,000 --> 00:17:16,000
我改了我自己的然后就改我老婆的

496
00:17:16,000 --> 00:17:18,000
然后他有个网页可以

497
00:17:18,000 --> 00:17:20,000
可以输入你的价值的号

498
00:17:20,000 --> 00:17:22,000
然后一个六位数的

499
00:17:22,000 --> 00:17:24,000
密码就可以去登录进去

500
00:17:24,000 --> 00:17:26,000
但是我老婆从来没有用过

501
00:17:26,000 --> 00:17:28,000
所以我也不知道六位数密码多少

502
00:17:28,000 --> 00:17:30,000
然后就打电话去哪个

503
00:17:30,000 --> 00:17:32,000
我们这里管发价值的机构

504
00:17:32,000 --> 00:17:34,000
去问密码

505
00:17:34,000 --> 00:17:36,000
他就问了我一下价值的号码

506
00:17:36,000 --> 00:17:38,000
然后名字就把密码告诉我

507
00:17:40,000 --> 00:17:42,000
我觉得可能这跟

508
00:17:42,000 --> 00:17:44,000
加拿大地管人心有关吧

509
00:17:44,000 --> 00:17:46,000
对我觉得和人之间

510
00:17:46,000 --> 00:17:48,000
有比较更多的信任

511
00:17:48,000 --> 00:17:50,000
特别是在我这个地方我觉得可能是

512
00:17:50,000 --> 00:17:52,000
属于这种非常高信任度的

513
00:17:52,000 --> 00:17:54,000
那种地区啊就是

514
00:17:54,000 --> 00:17:56,000
我知道有很多人他们

515
00:17:56,000 --> 00:17:58,000
他们住那种就是两层楼的那种

516
00:17:58,000 --> 00:18:00,000
house 就是小别墅嘛

517
00:18:00,000 --> 00:18:02,000
然后他们出门是从来不锁门的

518
00:18:02,000 --> 00:18:04,000
就是你随便对或者把钥匙

519
00:18:04,000 --> 00:18:06,000
藏在地毯下面我觉得有时候我小时候看

520
00:18:06,000 --> 00:18:08,000
每一天他们把地钥匙藏在

521
00:18:08,000 --> 00:18:10,000
地毯下面我都惊呆了

522
00:18:10,000 --> 00:18:12,000
对上次我也是

523
00:18:12,000 --> 00:18:14,000
我要去租一个房子他那个风景

524
00:18:14,000 --> 00:18:16,000
非常好在一个海边的一个

525
00:18:16,000 --> 00:18:18,000
一个小 house

526
00:18:18,000 --> 00:18:20,000
那个房主是不在本地的

527
00:18:20,000 --> 00:18:22,000
他是远程电话给你说

528
00:18:22,000 --> 00:18:24,000
你去那个地方然后

529
00:18:24,000 --> 00:18:26,000
门口有一个什么花的

530
00:18:26,000 --> 00:18:28,000
花博对吧

531
00:18:28,000 --> 00:18:30,000
花博上面有把钥匙你把钥匙

532
00:18:30,000 --> 00:18:32,000
打开就可以进去了我说哈

533
00:18:32,000 --> 00:18:34,000
那你这样真的放心吗

534
00:18:34,000 --> 00:18:36,000
没事你看啊

535
00:18:36,000 --> 00:18:38,000
我就给他看就是看一个房子

536
00:18:38,000 --> 00:18:40,000
后来没租但是

537
00:18:40,000 --> 00:18:42,000
我觉得就在这个地方还是信任度

538
00:18:42,000 --> 00:18:44,000
是蛮高的那你也可能是因为这样

539
00:18:44,000 --> 00:18:46,000
才导致刚才你说那些问题就很多

540
00:18:46,000 --> 00:18:48,000
这种所谓的

541
00:18:48,000 --> 00:18:50,000
我们在一个 geek

542
00:18:50,000 --> 00:18:52,000
看来就太不安全了

543
00:18:52,000 --> 00:18:54,000
但是他们觉得无所谓反正

544
00:18:54,000 --> 00:18:56,000
也没有也不会发生什么对吧

545
00:18:56,000 --> 00:18:58,000
对可能

546
00:18:58,000 --> 00:19:00,000
在

547
00:19:00,000 --> 00:19:02,000
某些社会主义比老子

548
00:19:02,000 --> 00:19:04,000
看来这种小狗寡民可能

549
00:19:04,000 --> 00:19:06,000
是非常理想的一种状态

550
00:19:06,000 --> 00:19:08,000
但是很遗憾我们在

551
00:19:08,000 --> 00:19:10,000
发达国家

552
00:19:10,000 --> 00:19:12,000
或者说某些发展中国家

553
00:19:12,000 --> 00:19:14,000
比如某个具有十多亿人口

554
00:19:14,000 --> 00:19:16,000
的范种国家这是非常不现实的一件事情

555
00:19:16,000 --> 00:19:18,000
人们还是尽量注意安全的比较好

556
00:19:18,000 --> 00:19:20,000
我觉得在德国

557
00:19:20,000 --> 00:19:22,000
的时候我觉得他还是蛮注意安全的

558
00:19:22,000 --> 00:19:24,000
很多地方德国其实德国

559
00:19:24,000 --> 00:19:26,000
是人欧洲的人口第一

560
00:19:26,000 --> 00:19:28,000
大国八千多万九千

561
00:19:28,000 --> 00:19:30,000
万全法国

562
00:19:30,000 --> 00:19:32,000
是第一大国但是德国是人口最多的国家

563
00:19:32,000 --> 00:19:34,000
所以人德国之间可能

564
00:19:34,000 --> 00:19:36,000
是这种信任的状况稍微少一点

565
00:19:36,000 --> 00:19:38,000
对

566
00:19:38,000 --> 00:19:40,000
而且我相信还是有很多

567
00:19:40,000 --> 00:19:42,000
德国人会把钥匙藏在地上

568
00:19:42,000 --> 00:19:44,000
对而且

569
00:19:44,000 --> 00:19:46,000
还有一件事情我觉得很有意思

570
00:19:46,000 --> 00:19:48,000
就是你

571
00:19:48,000 --> 00:19:50,000
你有开车在德国开

572
00:19:50,000 --> 00:19:52,000
汽车对吧

573
00:19:52,000 --> 00:19:54,000
你那个油箱是可以随便打开的吗

574
00:19:54,000 --> 00:19:56,000
可以

575
00:19:56,000 --> 00:19:58,000
我的不行但是大部分

576
00:19:58,000 --> 00:20:00,000
人的车的油箱都可以

577
00:20:00,000 --> 00:20:02,000
我的油箱需要在驾驶舱里按一个键

578
00:20:02,000 --> 00:20:04,000
才可以打开所以德国的车也有这样的

579
00:20:04,000 --> 00:20:06,000
不不不德国大部分

580
00:20:06,000 --> 00:20:08,000
车的油箱是按一下油箱盖就会弹起来

581
00:20:08,000 --> 00:20:10,000
不但是就是需要

582
00:20:10,000 --> 00:20:12,000
一个锁的机制吗

583
00:20:12,000 --> 00:20:14,000
不需要就是任何人都可以打开

584
00:20:14,000 --> 00:20:16,000
这个事情很傻逼吗

585
00:20:16,000 --> 00:20:18,000
中国难道不是吗

586
00:20:18,000 --> 00:20:20,000
中国我开过的

587
00:20:20,000 --> 00:20:22,000
所有的车都是

588
00:20:22,000 --> 00:20:24,000
就好的坏的都是

589
00:20:24,000 --> 00:20:26,000
有一个锁的机制的要不你是

590
00:20:26,000 --> 00:20:28,000
从外面有钥匙打开要不是从那个驾驶舱

591
00:20:28,000 --> 00:20:30,000
按一个钮然后他才能够

592
00:20:30,000 --> 00:20:32,000
有人偷油是吧

593
00:20:32,000 --> 00:20:34,000
这个是一个问题可能在中国

594
00:20:34,000 --> 00:20:36,000
就是最主要的问题但我觉得另外一个就是

595
00:20:36,000 --> 00:20:38,000
你不觉得这样很不安全吗

596
00:20:38,000 --> 00:20:40,000
就是有如果

597
00:20:40,000 --> 00:20:42,000
不喜欢就是恨你的话往你

598
00:20:42,000 --> 00:20:44,000
油箱里面倒一点什么东西你车就毁了

599
00:20:44,000 --> 00:20:46,000
因为我知道上次有一个

600
00:20:46,000 --> 00:20:48,000
发生一些事情就是有一个

601
00:20:48,000 --> 00:20:50,000
我不知道他得罪了谁还是怎么样

602
00:20:50,000 --> 00:20:52,000
有人好像在他那个油箱里面尿了一泡

603
00:20:52,000 --> 00:20:54,000
然后发动机

604
00:20:54,000 --> 00:20:56,000
就爆笑了

605
00:20:56,000 --> 00:20:58,000
这是挺惨的

606
00:20:58,000 --> 00:21:00,000
从来没有想过这个问题

607
00:21:00,000 --> 00:21:02,000
因为我女朋友的车就是按一下就会

608
00:21:02,000 --> 00:21:04,000
弹开的

609
00:21:04,000 --> 00:21:06,000
这时候觉得为什么会这样呢这不很奇怪吗

610
00:21:06,000 --> 00:21:08,000
但这也是可能从一个

611
00:21:08,000 --> 00:21:10,000
低信任度社会

612
00:21:10,000 --> 00:21:12,000
迁移到高信任度社会

613
00:21:12,000 --> 00:21:14,000
的一个 shock 之一吧

614
00:21:14,000 --> 00:21:16,000
对就好像

615
00:21:16,000 --> 00:21:18,000
比如说 Dash Camera

616
00:21:18,000 --> 00:21:20,000
其实我们在 YouTube 上可以

617
00:21:20,000 --> 00:21:22,000
看到很多很多这个

618
00:21:22,000 --> 00:21:24,000
俄国或者是

619
00:21:24,000 --> 00:21:26,000
就是对对对

620
00:21:26,000 --> 00:21:28,000
在中国也超多的

621
00:21:28,000 --> 00:21:30,000
大量的车祸的镜头是由 Dash Camera

622
00:21:30,000 --> 00:21:32,000
录下来的我相信中国

623
00:21:32,000 --> 00:21:34,000
好像现在也是非常有情就是

624
00:21:34,000 --> 00:21:36,000
给车上装一个

625
00:21:36,000 --> 00:21:38,000
叫什么行车记录仪

626
00:21:38,000 --> 00:21:40,000
但是你会觉得在

627
00:21:40,000 --> 00:21:42,000
就是高信任度的社会的国家

628
00:21:42,000 --> 00:21:44,000
这种东西是很少见的就为什么要把

629
00:21:44,000 --> 00:21:46,000
行车的东西录下来呢是

630
00:21:46,000 --> 00:21:48,000
你怕别人撞了你不承认还是

631
00:21:48,000 --> 00:21:50,000
就怕就是

632
00:21:50,000 --> 00:21:52,000
就是什么

633
00:21:52,000 --> 00:21:54,000
因为国内特别是

634
00:21:54,000 --> 00:21:56,000
现在通用词党有比较多

635
00:21:56,000 --> 00:21:58,000
你装个行车记录仪能拍到非常

636
00:21:58,000 --> 00:22:00,000
很多搞笑而且恶心的事情

637
00:22:00,000 --> 00:22:02,000
对

638
00:22:02,000 --> 00:22:04,000
有时候我看你听行车记录

639
00:22:04,000 --> 00:22:06,000
录下来的东西我都会觉得非常

640
00:22:06,000 --> 00:22:08,000
disturbing 上次我

641
00:22:08,000 --> 00:22:10,000
我老婆她说就是在我们上次不是

642
00:22:10,000 --> 00:22:12,000
回国待了一段时间她说也买一个要不待

643
00:22:12,000 --> 00:22:14,000
回加拿去我说有必要吗

644
00:22:14,000 --> 00:22:16,000
加拿大人那谁管你到时候出了

645
00:22:16,000 --> 00:22:18,000
事情这家保险公司

646
00:22:18,000 --> 00:22:20,000
就按那个什么规则弄就好了

647
00:22:20,000 --> 00:22:22,000
根本没有这种虚假而且从一个

648
00:22:22,000 --> 00:22:24,000
比较悲观但是从一个比较悲观的角度

649
00:22:24,000 --> 00:22:26,000
来看我觉得可能

650
00:22:26,000 --> 00:22:28,000
行车记录仪会渐渐普及

651
00:22:28,000 --> 00:22:30,000
看来的因为整个

652
00:22:30,000 --> 00:22:32,000
世界的趋势是在渐渐

653
00:22:32,000 --> 00:22:34,000
走向不信任吧你觉得呢

654
00:22:36,000 --> 00:22:38,000
不我的想法倒是更简单

655
00:22:38,000 --> 00:22:40,000
我觉得有行车记录仪还要包括

656
00:22:40,000 --> 00:22:42,000
行车记录仪只有你在

657
00:22:42,000 --> 00:22:44,000
驾驶的时候才会

658
00:22:44,000 --> 00:22:46,000
开启对吧然后他有些

659
00:22:46,000 --> 00:22:48,000
就现在技术可以做到你是

660
00:22:48,000 --> 00:22:50,000
24 小时全天监控

661
00:22:50,000 --> 00:22:52,000
我是觉得有的这个东西的话

662
00:22:52,000 --> 00:22:54,000
可以在某种程度上降低

663
00:22:54,000 --> 00:22:56,000
这个保险的费用

664
00:22:58,000 --> 00:23:00,000
如果保险公司强制要求你

665
00:23:00,000 --> 00:23:02,000
装上这个的话他可以说你装

666
00:23:02,000 --> 00:23:04,000
这个保险减半你不装这个

667
00:23:04,000 --> 00:23:06,000
保险加倍这样

668
00:23:06,000 --> 00:23:08,000
有更多的就虽然说

669
00:23:10,000 --> 00:23:12,000
比如说我现在待的地方都属于

670
00:23:12,000 --> 00:23:14,000
这种整体社会成绩度比较高的

671
00:23:14,000 --> 00:23:16,000
但是我觉得这只是通过传统

672
00:23:16,000 --> 00:23:18,000
来的一个事情来保证吧就好像你

673
00:23:18,000 --> 00:23:20,000
刚才讲这个这个社会状况

674
00:23:20,000 --> 00:23:22,000
是在变化了所以如果有一些

675
00:23:22,000 --> 00:23:24,000
叫做什么

676
00:23:24,000 --> 00:23:26,000
机制的有什么这种

677
00:23:26,000 --> 00:23:28,000
比较可靠的机制来确保

678
00:23:28,000 --> 00:23:30,000
这一点我觉得是更好的一个方案

679
00:23:30,000 --> 00:23:32,000
就是我更相信

680
00:23:32,000 --> 00:23:34,000
机器而不是人

681
00:23:34,000 --> 00:23:36,000
我相信 Lawrence

682
00:23:36,000 --> 00:23:38,000
如果在场的话一定会跳出来说

683
00:23:38,000 --> 00:23:40,000
他是

684
00:23:40,000 --> 00:23:42,000
更希望能够社会能够朝着

685
00:23:42,000 --> 00:23:44,000
更相信人的方向发展

686
00:23:44,000 --> 00:23:46,000
因为人才是最重要的但是

687
00:23:46,000 --> 00:23:48,000
人是不 predictable

688
00:23:48,000 --> 00:23:50,000
对人是

689
00:23:50,000 --> 00:23:52,000
我记得前两天

690
00:23:52,000 --> 00:23:54,000
看了看一个

691
00:23:54,000 --> 00:23:56,000
笑话说什么是程序员

692
00:23:56,000 --> 00:23:58,000
程序员是这样一种职业就是

693
00:23:58,000 --> 00:24:00,000
你坐在桌子前面面对着

694
00:24:00,000 --> 00:24:02,000
一个盒子然后非常痛恨

695
00:24:02,000 --> 00:24:04,000
自己不能像一台机器那样思考

696
00:24:06,000 --> 00:24:08,000
程序员实际上是一个非常非人的职业

697
00:24:08,000 --> 00:24:10,000
然后这一点可能有时候

698
00:24:10,000 --> 00:24:12,000
会引起我的

699
00:24:12,000 --> 00:24:14,000
这个肉

700
00:24:14,000 --> 00:24:16,000
叫什么

701
00:24:16,000 --> 00:24:18,000
肉体的内核就是

702
00:24:18,000 --> 00:24:20,000
血肉的内核有时候也会有点恐慌

703
00:24:20,000 --> 00:24:22,000
我觉得自己越来越不像一个人

704
00:24:22,000 --> 00:24:24,000
所以其实大部分时间

705
00:24:24,000 --> 00:24:26,000
所谓 debug

706
00:24:26,000 --> 00:24:28,000
其实 debug 不是程序里的 debug

707
00:24:28,000 --> 00:24:30,000
是你脑子里面的 bug 对吧

708
00:24:30,000 --> 00:24:32,000
对就是找出

709
00:24:32,000 --> 00:24:34,000
自己到底又哪一步

710
00:24:34,000 --> 00:24:36,000
不像一个机器那样所以导致了

711
00:24:36,000 --> 00:24:38,000
这个

712
00:24:38,000 --> 00:24:40,000
让你感到愤怒的 bug 所以写程序

713
00:24:40,000 --> 00:24:42,000
一直就是一个易化的过程

714
00:24:42,000 --> 00:24:44,000
对你易化你自己

715
00:24:44,000 --> 00:24:46,000
你让自己

716
00:24:46,000 --> 00:24:48,000
并出感情和情绪的影响

717
00:24:48,000 --> 00:24:50,000
变成一个

718
00:24:50,000 --> 00:24:52,000
对

719
00:24:52,000 --> 00:24:54,000
好像成了一天天了

720
00:24:54,000 --> 00:24:56,000
那行刚才讲到这里了

721
00:24:56,000 --> 00:24:58,000
今天那个一个主题是讲什么

722
00:24:58,000 --> 00:25:00,000
错误处理对吧

723
00:25:00,000 --> 00:25:02,000
其实对其实刚才我们说到 bug

724
00:25:02,000 --> 00:25:04,000
bug 会

725
00:25:04,000 --> 00:25:06,000
导致程序不能正常

726
00:25:06,000 --> 00:25:08,000
运行或者导致一台机器不能正常

727
00:25:08,000 --> 00:25:10,000
运行然后

728
00:25:10,000 --> 00:25:12,000
此时就涉及到一个

729
00:25:14,000 --> 00:25:16,000
就是 exception

730
00:25:16,000 --> 00:25:18,000
handling 的机制

731
00:25:18,000 --> 00:25:20,000
其实这是我们这一期

732
00:25:20,000 --> 00:25:22,000
节目想要讨论的一个主题

733
00:25:22,000 --> 00:25:24,000
就是

734
00:25:24,000 --> 00:25:26,000
exception

735
00:25:26,000 --> 00:25:28,000
应该怎样被 handle

736
00:25:28,000 --> 00:25:30,000
先说这个之前我们要先可能

737
00:25:30,000 --> 00:25:32,000
先解释一下

738
00:25:32,000 --> 00:25:34,000
如果最开始大家是学这种更加

739
00:25:34,000 --> 00:25:36,000
低级的语言比如说 C

740
00:25:36,000 --> 00:25:38,000
这种语言出来是没有 exception 这个机制的

741
00:25:40,000 --> 00:25:42,000
C 其实是

742
00:25:42,000 --> 00:25:44,000
你可以通过 set jump long jump 来

743
00:25:44,000 --> 00:25:46,000
你可以说它没有原生

744
00:25:46,000 --> 00:25:48,000
它没有在语言的层面上

745
00:25:48,000 --> 00:25:50,000
支持 exception 这个概念

746
00:25:50,000 --> 00:25:52,000
对然后就一般的

747
00:25:52,000 --> 00:25:54,000
错误处理是通过这个反回

748
00:25:54,000 --> 00:25:56,000
错误代码的方式来实现的

749
00:25:56,000 --> 00:25:58,000
对

750
00:25:58,000 --> 00:26:00,000
然后最近有些新

751
00:26:00,000 --> 00:26:02,000
新的语言反而是就

752
00:26:02,000 --> 00:26:04,000
就抛弃了 exception 然后

753
00:26:04,000 --> 00:26:06,000
回归了 C 的这一点比如说

754
00:26:06,000 --> 00:26:08,000
我现在最近一直在用的 go

755
00:26:08,000 --> 00:26:10,000
Google 那个语言

756
00:26:10,000 --> 00:26:12,000
它是没有 exception 的

757
00:26:12,000 --> 00:26:14,000
其实它有一种

758
00:26:14,000 --> 00:26:16,000
但是用的非常少

759
00:26:16,000 --> 00:26:18,000
大部分时间

760
00:26:18,000 --> 00:26:20,000
是用 return error

761
00:26:20,000 --> 00:26:22,000
这种方式来实现

762
00:26:22,000 --> 00:26:24,000
对我记得我在

763
00:26:24,000 --> 00:26:26,000
知乎上也回答过一个类似的

764
00:26:26,000 --> 00:26:28,000
问题就是有人问 swift

765
00:26:28,000 --> 00:26:30,000
为什么没有 exception

766
00:26:30,000 --> 00:26:32,000
然后我就我其实

767
00:26:32,000 --> 00:26:34,000
我也是一个觉得 exception 是一个

768
00:26:34,000 --> 00:26:36,000
比较不那么

769
00:26:36,000 --> 00:26:38,000
有点 overrated

770
00:26:38,000 --> 00:26:40,000
这样一个功能

771
00:26:40,000 --> 00:26:42,000
所以你觉得 exception 的主要问题在哪里

772
00:26:44,000 --> 00:26:46,000
exception 有点像 go to

773
00:26:46,000 --> 00:26:48,000
你要我说的话

774
00:26:48,000 --> 00:26:50,000
很多人把 exception 当 go to 用

775
00:26:50,000 --> 00:26:52,000
就如果发生了 exception

776
00:26:52,000 --> 00:26:54,000
那你就

777
00:26:54,000 --> 00:26:56,000
此时你的程序

778
00:26:56,000 --> 00:26:58,000
有时候会产生一种

779
00:26:58,000 --> 00:27:00,000
不可预知的走向

780
00:27:00,000 --> 00:27:02,000
对我觉得这是最主要

781
00:27:02,000 --> 00:27:04,000
的问题就是为什么

782
00:27:04,000 --> 00:27:06,000
就为什么我觉得 exception

783
00:27:06,000 --> 00:27:08,000
不是特别好的原因

784
00:27:08,000 --> 00:27:10,000
也是因为就是

785
00:27:10,000 --> 00:27:12,000
跟 go to is considered harmful

786
00:27:12,000 --> 00:27:14,000
一样嘛 exception 它会

787
00:27:14,000 --> 00:27:16,000
导致你之前预设的

788
00:27:16,000 --> 00:27:18,000
control flow

789
00:27:18,000 --> 00:27:20,000
控制流会变得很乱

790
00:27:20,000 --> 00:27:22,000
因为它一旦

791
00:27:22,000 --> 00:27:24,000
抛出 exception 它整个

792
00:27:24,000 --> 00:27:26,000
程序运行的逻辑

793
00:27:26,000 --> 00:27:28,000
就不再是按照线性的往下走

794
00:27:28,000 --> 00:27:30,000
而是跳到另外一个地方或者跳到

795
00:27:30,000 --> 00:27:32,000
调用层或者更高层去

796
00:27:32,000 --> 00:27:34,000
这样的话就会导致很多

797
00:27:34,000 --> 00:27:36,000
非常难以预料的

798
00:27:36,000 --> 00:27:38,000
那种场景的组合

799
00:27:38,000 --> 00:27:40,000
所以这样

800
00:27:40,000 --> 00:27:42,000
会导致很多问题

801
00:27:42,000 --> 00:27:44,000
但是反过来

802
00:27:44,000 --> 00:27:46,000
exception 的支持者

803
00:27:46,000 --> 00:27:48,000
也会说这

804
00:27:48,000 --> 00:27:50,000
是一种 necessary evil

805
00:27:50,000 --> 00:27:52,000
或者甚至就不是 evil

806
00:27:52,000 --> 00:27:54,000
这是一种非常

807
00:27:54,000 --> 00:27:56,000
必要的功能

808
00:27:56,000 --> 00:27:58,000
它并不是

809
00:27:58,000 --> 00:28:00,000
它并不是一种

810
00:28:00,000 --> 00:28:02,000
错误

811
00:28:02,000 --> 00:28:04,000
它只是一种对于一种

812
00:28:04,000 --> 00:28:06,000
就是现实生活

813
00:28:06,000 --> 00:28:08,000
里面

814
00:28:08,000 --> 00:28:10,000
毕竟会出现的错误的

815
00:28:10,000 --> 00:28:12,000
不得不有的这么一种处理方式

816
00:28:12,000 --> 00:28:14,000
而且他们会说

817
00:28:14,000 --> 00:28:16,000
用返回值或者是

818
00:28:16,000 --> 00:28:18,000
像 objective C

819
00:28:18,000 --> 00:28:20,000
这样的 arrow point

820
00:28:20,000 --> 00:28:22,000
的方式非常的原始

821
00:28:22,000 --> 00:28:24,000
古老而且

822
00:28:24,000 --> 00:28:26,000
会导致代码非常的永长

823
00:28:26,000 --> 00:28:28,000
对这也是确实是

824
00:28:28,000 --> 00:28:30,000
我有写

825
00:28:30,000 --> 00:28:32,000
最近写的 go

826
00:28:32,000 --> 00:28:34,000
比较多遇到的一个问题

827
00:28:34,000 --> 00:28:36,000
之前

828
00:28:36,000 --> 00:28:38,000
是支持 exception 机制的

829
00:28:38,000 --> 00:28:40,000
很多错误都通过那种

830
00:28:40,000 --> 00:28:42,000
正常的逻辑流

831
00:28:42,000 --> 00:28:44,000
然后 exception 错误处理

832
00:28:44,000 --> 00:28:46,000
单独的一个方式走

833
00:28:46,000 --> 00:28:48,000
而且在 python 里面这甚至是一种

834
00:28:48,000 --> 00:28:50,000
pattern 就是 python 推荐你用

835
00:28:50,000 --> 00:28:52,000
异常处理方式

836
00:28:52,000 --> 00:28:54,000
来当做 logic

837
00:28:54,000 --> 00:28:56,000
对对

838
00:28:56,000 --> 00:28:58,000
他是把正常

839
00:28:58,000 --> 00:29:00,000
情况下的一个流

840
00:29:00,000 --> 00:29:02,000
缩得比较简单

841
00:29:02,000 --> 00:29:04,000
因为你不需要做很多这种错误处理

842
00:29:04,000 --> 00:29:06,000
一旦出错你直接抛出一层

843
00:29:06,000 --> 00:29:08,000
就跳到另外一层去处理

844
00:29:08,000 --> 00:29:10,000
但是你会看起来

845
00:29:10,000 --> 00:29:12,000
代码很简单漂亮

846
00:29:12,000 --> 00:29:14,000
要完成同样的事情

847
00:29:14,000 --> 00:29:16,000
然后在 go 里面就发现

848
00:29:16,000 --> 00:29:18,000
你每次调一个函数

849
00:29:18,000 --> 00:29:20,000
都要检查一个 if arrow 不等于

850
00:29:20,000 --> 00:29:22,000
neil 怎么样

851
00:29:22,000 --> 00:29:24,000
其实会

852
00:29:24,000 --> 00:29:26,000
常话叫什么 boiler

853
00:29:26,000 --> 00:29:28,000
boiler place

854
00:29:28,000 --> 00:29:30,000
会出现大量这种其实没什么用

855
00:29:30,000 --> 00:29:32,000
但是又明明有意义的

856
00:29:32,000 --> 00:29:34,000
语句在里面

857
00:29:34,000 --> 00:29:36,000
对所以这牵涉到还是跟他讲

858
00:29:36,000 --> 00:29:38,000
是一个认知的问题

859
00:29:38,000 --> 00:29:40,000
比如说像

860
00:29:40,000 --> 00:29:42,000
刚才我们讲 python 那种类型

861
00:29:42,000 --> 00:29:44,000
为代表的

862
00:29:44,000 --> 00:29:46,000
也不只是 python 一种

863
00:29:46,000 --> 00:29:48,000
其实大多数支持 exception 的语言都是推荐你用这种方式

864
00:29:48,000 --> 00:29:50,000
就是正常的

865
00:29:50,000 --> 00:29:52,000
你用正常的逻辑去想

866
00:29:52,000 --> 00:29:54,000
然后异常的你就走那个 exception

867
00:29:54,000 --> 00:29:56,000
handling 就好了

868
00:29:56,000 --> 00:29:58,000
像 go 和 c 这一派就是说

869
00:29:58,000 --> 00:30:00,000
那你肯定是

870
00:30:00,000 --> 00:30:02,000
错误应该是

871
00:30:02,000 --> 00:30:04,000
你的逻辑的一部分

872
00:30:04,000 --> 00:30:06,000
错误处理应该是你逻辑的一部分

873
00:30:06,000 --> 00:30:08,000
因为只有这样你才可能保证

874
00:30:08,000 --> 00:30:10,000
出现任何情况

875
00:30:10,000 --> 00:30:12,000
你都是在可控的一个范围内对吧

876
00:30:12,000 --> 00:30:14,000
所以我觉得他们都是代表

877
00:30:14,000 --> 00:30:16,000
两种完全不一样的思维

878
00:30:16,000 --> 00:30:18,000
当然就是说你喜欢

879
00:30:18,000 --> 00:30:20,000
就看你自己觉得了

880
00:30:20,000 --> 00:30:22,000
但是我觉得吧

881
00:30:22,000 --> 00:30:24,000
我现在的看法一般是这样子

882
00:30:24,000 --> 00:30:26,000
如果你写的这个程序是需要

883
00:30:26,000 --> 00:30:28,000
非常 robust

884
00:30:28,000 --> 00:30:30,000
非常

885
00:30:30,000 --> 00:30:32,000
就是要长时间不间断

886
00:30:32,000 --> 00:30:34,000
不出错不 crush 的工作的话

887
00:30:34,000 --> 00:30:36,000
就不出现那个 blue square of death

888
00:30:36,000 --> 00:30:38,000
spinning beach ball of death

889
00:30:38,000 --> 00:30:40,000
这类的东西

890
00:30:40,000 --> 00:30:42,000
你还是可能要采用像

891
00:30:42,000 --> 00:30:44,000
C、R、go 为代表这种类型

892
00:30:44,000 --> 00:30:46,000
就是把错误处理作为你的程序

893
00:30:46,000 --> 00:30:48,000
就要考虑的每一步

894
00:30:48,000 --> 00:30:50,000
这样会导致这个代码很庸常很麻烦

895
00:30:50,000 --> 00:30:52,000
但是它确实会保证

896
00:30:52,000 --> 00:30:54,000
你的每一种情况

897
00:30:54,000 --> 00:30:56,000
你的程序都是在一个

898
00:30:56,000 --> 00:30:58,000
可以预测的

899
00:30:58,000 --> 00:31:00,000
可控的状态内的我觉得

900
00:31:00,000 --> 00:31:02,000
对但

901
00:31:02,000 --> 00:31:04,000
其实你说的就是

902
00:31:04,000 --> 00:31:06,000
但其实这是一种不可能的状态

903
00:31:06,000 --> 00:31:08,000
就是

904
00:31:08,000 --> 00:31:10,000
在几乎在所有的

905
00:31:10,000 --> 00:31:12,000
编程语言里面

906
00:31:12,000 --> 00:31:14,000
你都会遇到

907
00:31:14,000 --> 00:31:16,000
错误和异常的区分

908
00:31:16,000 --> 00:31:18,000
有一种异常是你可以控制的

909
00:31:18,000 --> 00:31:20,000
你可以预料到的

910
00:31:20,000 --> 00:31:22,000
比如说你要打开一文件

911
00:31:22,000 --> 00:31:24,000
然后你发现这个文件不存在

912
00:31:24,000 --> 00:31:26,000
这是你可以预料到的异常

913
00:31:26,000 --> 00:31:28,000
可是有些异常是你预料不到的

914
00:31:28,000 --> 00:31:30,000
比如说像在 Java 里面

915
00:31:30,000 --> 00:31:32,000
我觉得

916
00:31:32,000 --> 00:31:34,000
这一直是 Java 非常二的一个特性

917
00:31:34,000 --> 00:31:36,000
就是有一个所谓 checked exception

918
00:31:36,000 --> 00:31:38,000
你在想

919
00:31:38,000 --> 00:31:40,000
你可能会想到

920
00:31:40,000 --> 00:31:42,000
这个是一个

921
00:31:42,000 --> 00:31:44,000
这个是一个 checked exception

922
00:31:44,000 --> 00:31:46,000
你在写一个方法的时候

923
00:31:46,000 --> 00:31:48,000
你要告诉方法的调用者

924
00:31:48,000 --> 00:31:50,000
这个方法可能抛出什么样的 exception

925
00:31:50,000 --> 00:31:52,000
这其实是一个看起来很美

926
00:31:52,000 --> 00:31:54,000
但是用起来非常不实际的这么一个功能

927
00:31:54,000 --> 00:31:56,000
就是在

928
00:31:56,000 --> 00:31:58,000
许多时候你是

929
00:31:58,000 --> 00:32:00,000
预料不到或者是作为一个

930
00:32:00,000 --> 00:32:02,000
会出错误的人

931
00:32:02,000 --> 00:32:04,000
你是没有办法完全的

932
00:32:04,000 --> 00:32:06,000
便利这一个方法

933
00:32:06,000 --> 00:32:08,000
可能出现的 exception 的情况

934
00:32:08,000 --> 00:32:10,000
其实也是导致了非常多的

935
00:32:10,000 --> 00:32:12,000
这个我觉得是

936
00:32:12,000 --> 00:32:14,000
为什么会是一个问题呢

937
00:32:14,000 --> 00:32:16,000
如果你用这种

938
00:32:16,000 --> 00:32:18,000
返回错误的方法来处理

939
00:32:18,000 --> 00:32:20,000
为什么不能解决这个问题呢

940
00:32:20,000 --> 00:32:22,000
对你用返回错误的

941
00:32:22,000 --> 00:32:24,000
我觉得用错误返回

942
00:32:24,000 --> 00:32:26,000
值的语言

943
00:32:26,000 --> 00:32:28,000
其实是采用那种更为

944
00:32:28,000 --> 00:32:30,000
pragmatical 的理念

945
00:32:30,000 --> 00:32:32,000
我处理所有我能预见到的

946
00:32:32,000 --> 00:32:34,000
错误如果这个错误我没有

947
00:32:34,000 --> 00:32:36,000
预见到那我就让它 crash 好了

948
00:32:36,000 --> 00:32:38,000
对啊

949
00:32:38,000 --> 00:32:40,000
但是在很多

950
00:32:40,000 --> 00:32:42,000
也不是很多就是在部分

951
00:32:42,000 --> 00:32:44,000
编程语言里面人们会

952
00:32:44,000 --> 00:32:46,000
觉得我有 exception control

953
00:32:46,000 --> 00:32:48,000
我有这种机制在

954
00:32:48,000 --> 00:32:50,000
我就会尽可能的让我的程序

955
00:32:50,000 --> 00:32:52,000
不要 crash

956
00:32:52,000 --> 00:32:54,000
我觉得很多扎要程序都是这样

957
00:32:56,000 --> 00:32:58,000
我想想就起码我

958
00:32:58,000 --> 00:33:00,000
最近在写 go 的时候没有遇到说

959
00:33:00,000 --> 00:33:02,000
会有某一个

960
00:33:02,000 --> 00:33:04,000
错误

961
00:33:04,000 --> 00:33:06,000
没有处理到导致 crash 的

962
00:33:06,000 --> 00:33:08,000
这种状况发生了

963
00:33:08,000 --> 00:33:10,000
对因为这种错误一旦

964
00:33:10,000 --> 00:33:12,000
出现的话基本上我觉得

965
00:33:12,000 --> 00:33:14,000
go 程序是处理不了 handle 不了的比如说你

966
00:33:14,000 --> 00:33:16,000
运行时把你一块内存

967
00:33:16,000 --> 00:33:18,000
把你的

968
00:33:18,000 --> 00:33:20,000
程序本身要怎么 handle

969
00:33:20,000 --> 00:33:22,000
如果遇到这种情况下你用 exception

970
00:33:22,000 --> 00:33:24,000
handle 也是没有办法的

971
00:33:24,000 --> 00:33:26,000
就比如说你加了

972
00:33:26,000 --> 00:33:28,000
虚拟机内存出了问题你上面能怎么办

973
00:33:28,000 --> 00:33:30,000
也是没有任何办法

974
00:33:30,000 --> 00:33:32,000
有时候我会有一种感觉

975
00:33:32,000 --> 00:33:34,000
就是我用黑扎

976
00:33:34,000 --> 00:33:36,000
这个不太好

977
00:33:36,000 --> 00:33:38,000
在第一期里面就树立这么多敌人

978
00:33:38,000 --> 00:33:40,000
在某些比较

979
00:33:40,000 --> 00:33:42,000
广为人知的程序里面

980
00:33:42,000 --> 00:33:44,000
程序会产生这样的错觉

981
00:33:44,000 --> 00:33:46,000
我有异常处理机制

982
00:33:46,000 --> 00:33:48,000
我几乎是可以处理一切异常的

983
00:33:48,000 --> 00:33:50,000
但其实并不是这样

984
00:33:50,000 --> 00:33:52,000
所以其实我觉得

985
00:33:52,000 --> 00:33:54,000
如果要实现那种

986
00:33:54,000 --> 00:33:56,000
所有的错误都被预测到

987
00:33:56,000 --> 00:33:58,000
所有的错误都被

988
00:33:58,000 --> 00:34:00,000
处理过你可能是需要一些

989
00:34:00,000 --> 00:34:02,000
更加 formal 的

990
00:34:02,000 --> 00:34:04,000
一些机制比如说你要去

991
00:34:04,000 --> 00:34:06,000
证明这个程序

992
00:34:06,000 --> 00:34:08,000
是不错但是这种情况

993
00:34:08,000 --> 00:34:10,000
在现实中基本上是不可能

994
00:34:10,000 --> 00:34:12,000
实现了

995
00:34:12,000 --> 00:34:14,000
在一些非常受限的学术性的环境里面才可以

996
00:34:14,000 --> 00:34:16,000
或者说

997
00:34:16,000 --> 00:34:18,000
你可以

998
00:34:18,000 --> 00:34:20,000
说我程序

999
00:34:20,000 --> 00:34:22,000
本身并不提供这样的机制

1000
00:34:22,000 --> 00:34:24,000
但是我依赖于系统

1001
00:34:24,000 --> 00:34:26,000
所提供的机制就是就像你说的

1002
00:34:26,000 --> 00:34:28,000
你希望一个程序它稳定的

1003
00:34:28,000 --> 00:34:30,000
运行那么

1004
00:34:30,000 --> 00:34:32,000
尽量可能不出错不 crush

1005
00:34:32,000 --> 00:34:34,000
可是它一旦 crush 了怎么办呢

1006
00:34:34,000 --> 00:34:36,000
你可以说那我把它

1007
00:34:36,000 --> 00:34:38,000
做成一个 service

1008
00:34:38,000 --> 00:34:40,000
然后那么我们都知道

1009
00:34:40,000 --> 00:34:42,000
linux 或者是 windows 下面

1010
00:34:42,000 --> 00:34:44,000
对于一个 service

1011
00:34:44,000 --> 00:34:46,000
的控制

1012
00:34:46,000 --> 00:34:48,000
里面会有这样一项就是如果这个 service

1013
00:34:48,000 --> 00:34:50,000
crush 了怎么办

1014
00:34:50,000 --> 00:34:52,000
那 windows 下面比如说可以选

1015
00:34:52,000 --> 00:34:54,000
说尝试重新

1016
00:34:54,000 --> 00:34:56,000
启动它并且如果尝试

1017
00:34:56,000 --> 00:34:58,000
重新启动三次它仍旧 crush

1018
00:34:58,000 --> 00:35:00,000
那我就不再启动它了

1019
00:35:00,000 --> 00:35:02,000
其实这也是一种就是异常处理

1020
00:35:02,000 --> 00:35:04,000
机制那 windows linux

1021
00:35:04,000 --> 00:35:06,000
其实也是有类似的这样一个

1022
00:35:06,000 --> 00:35:08,000
一个机制在里面

1023
00:35:08,000 --> 00:35:10,000
这里就牵涉到

1024
00:35:10,000 --> 00:35:12,000
linux 他们也常见的那个叫做

1025
00:35:12,000 --> 00:35:14,000
你说 service 他们

1026
00:35:14,000 --> 00:35:16,000
就可能 demo

1027
00:35:16,000 --> 00:35:18,000
的概念然后 demo 的话就会有

1028
00:35:18,000 --> 00:35:20,000
相关的上这个 supervising

1029
00:35:20,000 --> 00:35:22,000
的一个机制

1030
00:35:22,000 --> 00:35:24,000
在里面

1031
00:35:24,000 --> 00:35:26,000
你有没有最近关注

1032
00:35:26,000 --> 00:35:28,000
这个 systemd 这个话题

1033
00:35:28,000 --> 00:35:30,000
看了好久

1034
00:35:30,000 --> 00:35:32,000
我觉得挺扯的

1035
00:35:32,000 --> 00:35:34,000
你最近这个事情的态度是

1036
00:35:34,000 --> 00:35:36,000
怎么样子

1037
00:35:36,000 --> 00:35:38,000
我觉得我也是觉得 systemd 有一点

1038
00:35:38,000 --> 00:35:40,000
激进了但是

1039
00:35:40,000 --> 00:35:42,000
怎么说呢

1040
00:35:42,000 --> 00:35:44,000
我觉得这一天迟早

1041
00:35:44,000 --> 00:35:46,000
回来

1042
00:35:46,000 --> 00:35:48,000
你觉得它激进的地方在哪里

1043
00:35:48,000 --> 00:35:50,000
就是它试图把

1044
00:35:50,000 --> 00:35:52,000
一些它试图把

1045
00:35:52,000 --> 00:35:54,000
所有的 demo 的

1046
00:35:54,000 --> 00:35:56,000
启动机制乃至于系统的启动机制

1047
00:35:56,000 --> 00:35:58,000
均一化

1048
00:35:58,000 --> 00:36:00,000
模块化

1049
00:36:00,000 --> 00:36:02,000
然后

1050
00:36:02,000 --> 00:36:04,000
就摒弃了很多传统

1051
00:36:04,000 --> 00:36:06,000
我不知道你们有读

1052
00:36:06,000 --> 00:36:08,000
那篇文章就是 systemd 的主要维护者

1053
00:36:08,000 --> 00:36:10,000
之一他叫什么我忘了他好像

1054
00:36:10,000 --> 00:36:12,000
是个德国人他在

1055
00:36:12,000 --> 00:36:14,000
blog 上发了一篇文章说

1056
00:36:14,000 --> 00:36:16,000
因为他开发 systemd

1057
00:36:16,000 --> 00:36:18,000
已经受到了很多死亡威胁

1058
00:36:18,000 --> 00:36:20,000
甚至是有些人在写很

1059
00:36:20,000 --> 00:36:22,000
酸的文章在暗示

1060
00:36:22,000 --> 00:36:24,000
要对他产生人身攻击或者是

1061
00:36:24,000 --> 00:36:26,000
有人写了歌来嘲讽他

1062
00:36:26,000 --> 00:36:28,000
恨不得他去死之类的

1063
00:36:28,000 --> 00:36:30,000
你会发现

1064
00:36:30,000 --> 00:36:32,000
这种问题居然可以导致

1065
00:36:32,000 --> 00:36:34,000
非常 personal 的这么一个层面

1066
00:36:36,000 --> 00:36:38,000
对这就扯远了

1067
00:36:38,000 --> 00:36:40,000
这个故事的教训是什么不要激怒

1068
00:36:40,000 --> 00:36:42,000
一个程序员对吧不要激怒

1069
00:36:42,000 --> 00:36:44,000
一群程序员

1070
00:36:44,000 --> 00:36:46,000
不要像唐吉克德一样去

1071
00:36:46,000 --> 00:36:48,000
但

1072
00:36:48,000 --> 00:36:50,000
反过来

1073
00:36:50,000 --> 00:36:52,000
你可以说

1074
00:36:52,000 --> 00:36:54,000
就是因为会有这样的

1075
00:36:54,000 --> 00:36:56,000
反应

1076
00:36:56,000 --> 00:36:58,000
体现出了 systemd

1077
00:36:58,000 --> 00:37:00,000
到底是一个多么

1078
00:37:00,000 --> 00:37:02,000
激进的项目对我觉得可能

1079
00:37:02,000 --> 00:37:04,000
我对他的一个

1080
00:37:04,000 --> 00:37:06,000
现在我其实是没有太明确

1081
00:37:06,000 --> 00:37:08,000
的反对或者

1082
00:37:08,000 --> 00:37:10,000
是支持他的一个观点

1083
00:37:10,000 --> 00:37:12,000
但是我觉得有一些是值得商榷的

1084
00:37:12,000 --> 00:37:14,000
比如说他把那个

1085
00:37:14,000 --> 00:37:16,000
就是 pide 的那一块做

1086
00:37:16,000 --> 00:37:18,000
的那么重真的好

1087
00:37:18,000 --> 00:37:20,000
对就是此时你会有一个想法

1088
00:37:20,000 --> 00:37:22,000
就是 linux 并不只是

1089
00:37:22,000 --> 00:37:24,000
跑在你的笔记本

1090
00:37:24,000 --> 00:37:26,000
或者是跑在大型机上的

1091
00:37:26,000 --> 00:37:28,000
很多 linux 是跑在比如说

1092
00:37:28,000 --> 00:37:30,000
像 beagle one 或者像

1093
00:37:30,000 --> 00:37:32,000
路由器上面

1094
00:37:32,000 --> 00:37:34,000
对或者路由器

1095
00:37:34,000 --> 00:37:36,000
上面的那个地方

1096
00:37:36,000 --> 00:37:38,000
linux 真的要换用 systemd

1097
00:37:38,000 --> 00:37:40,000
有意义吗好像也没有

1098
00:37:40,000 --> 00:37:42,000
对现在我就觉得他

1099
00:37:42,000 --> 00:37:44,000
但他自己的说法是说

1100
00:37:44,000 --> 00:37:46,000
我这个 systemd 这个是一大

1101
00:37:46,000 --> 00:37:48,000
一大块东西你可以挑

1102
00:37:48,000 --> 00:37:50,000
其中的一小部分来用

1103
00:37:50,000 --> 00:37:52,000
你不是要全部都用上

1104
00:37:52,000 --> 00:37:54,000
这显得很庸耳朵吗你可以

1105
00:37:54,000 --> 00:37:56,000
只用一小坨但是

1106
00:37:56,000 --> 00:37:58,000
我不知道好就他那种组织的

1107
00:37:58,000 --> 00:38:00,000
机制还有那种思考的方式我觉得

1108
00:38:00,000 --> 00:38:02,000
很容易会导致一种

1109
00:38:02,000 --> 00:38:04,000
就是 unnecessary

1110
00:38:04,000 --> 00:38:06,000
complexity 在里面

1111
00:38:06,000 --> 00:38:08,000
对他会为了模为了

1112
00:38:08,000 --> 00:38:10,000
为了有这么一种比较

1113
00:38:10,000 --> 00:38:12,000
均一的模式

1114
00:38:12,000 --> 00:38:14,000
或者说为了有这样为了

1115
00:38:14,000 --> 00:38:16,000
射击而去牺牲功能

1116
00:38:16,000 --> 00:38:18,000
对然后

1117
00:38:18,000 --> 00:38:20,000
这我也有看其他的

1118
00:38:20,000 --> 00:38:22,000
一些就是替代的那种

1119
00:38:22,000 --> 00:38:24,000
就是 pade 的

1120
00:38:24,000 --> 00:38:26,000
那个程序比如说像 dj

1121
00:38:26,000 --> 00:38:28,000
b 他们那些比较轻量级简化的

1122
00:38:28,000 --> 00:38:30,000
甚至就总共

1123
00:38:30,000 --> 00:38:32,000
就只有可能不到 100 行 c 代码

1124
00:38:32,000 --> 00:38:34,000
的一些这种 init

1125
00:38:34,000 --> 00:38:36,000
程序我觉得是更好的因为

1126
00:38:36,000 --> 00:38:38,000
如果代码够少的话你可以

1127
00:38:38,000 --> 00:38:40,000
就是穷举掉他所有

1128
00:38:40,000 --> 00:38:42,000
可能出错的地方因为

1129
00:38:42,000 --> 00:38:44,000
这个 pade 是一个非常重要的程序

1130
00:38:44,000 --> 00:38:46,000
如果他 crash 你这就只能 cernal panic

1131
00:38:46,000 --> 00:38:48,000
但是

1132
00:38:48,000 --> 00:38:50,000
如果你

1133
00:38:50,000 --> 00:38:52,000
这个东西就代码量复杂了

1134
00:38:52,000 --> 00:38:54,000
然后就跟他讲你如果能

1135
00:38:54,000 --> 00:38:56,000
出错的地方多了那肯定是

1136
00:38:56,000 --> 00:38:58,000
不可避免的有些出错的地方

1137
00:38:58,000 --> 00:39:00,000
然后这个出错就会导致整个系统崩掉

1138
00:39:00,000 --> 00:39:02,000
所以如果有

1139
00:39:02,000 --> 00:39:04,000
一个这种更加简洁的

1140
00:39:04,000 --> 00:39:06,000
甚至就是几十行不到 100

1141
00:39:06,000 --> 00:39:08,000
行代码的能够实现

1142
00:39:08,000 --> 00:39:10,000
那你真的是可以用甚至你可以用

1143
00:39:10,000 --> 00:39:12,000
这种机器这个就是

1144
00:39:12,000 --> 00:39:14,000
就是证明的方法去证明这个

1145
00:39:14,000 --> 00:39:16,000
程序可能会在哪个地方出错

1146
00:39:16,000 --> 00:39:18,000
然后那些可能出错的地方你都已经

1147
00:39:18,000 --> 00:39:20,000
顾及到了对吧

1148
00:39:20,000 --> 00:39:22,000
可以实现一个就是 100% reliable

1149
00:39:22,000 --> 00:39:24,000
就只要你的硬件是不出错的

1150
00:39:24,000 --> 00:39:26,000
这个软件可以保证 100%

1151
00:39:26,000 --> 00:39:28,000
这个正常运行的

1152
00:39:28,000 --> 00:39:30,000
但是如果你是太复杂的话

1153
00:39:30,000 --> 00:39:32,000
你就做不到这一点这点我其实觉得

1154
00:39:32,000 --> 00:39:34,000
是有一点点问题的

1155
00:39:34,000 --> 00:39:36,000
对而且就是 systemd

1156
00:39:36,000 --> 00:39:38,000
的设计与

1157
00:39:38,000 --> 00:39:40,000
unix 的哲学就是

1158
00:39:40,000 --> 00:39:42,000
do one thing and do it well

1159
00:39:42,000 --> 00:39:44,000
有点相背

1160
00:39:44,000 --> 00:39:46,000
背道而驰吧

1161
00:39:46,000 --> 00:39:48,000
他试图实现很多事情然后把

1162
00:39:48,000 --> 00:39:50,000
很多功能集中在一个

1163
00:39:50,000 --> 00:39:52,000
一个单一的程序里面

1164
00:39:52,000 --> 00:39:54,000
当然他 systemd 也不是

1165
00:39:54,000 --> 00:39:56,000
一个单一的程序但是他试图

1166
00:39:56,000 --> 00:39:58,000
以这样一种单一统的架构

1167
00:39:58,000 --> 00:40:00,000
去解决一些

1168
00:40:00,000 --> 00:40:02,000
源头

1169
00:40:02,000 --> 00:40:04,000
和本质都非常易

1170
00:40:04,000 --> 00:40:06,000
构的问题对可能

1171
00:40:06,000 --> 00:40:08,000
我觉得很多人对 systemd 的反感

1172
00:40:08,000 --> 00:40:10,000
倒不是说

1173
00:40:10,000 --> 00:40:12,000
他就是不喜欢这种

1174
00:40:12,000 --> 00:40:14,000
设计哲学是一个最主要的因素

1175
00:40:14,000 --> 00:40:16,000
但是可能更多的一个是因为

1176
00:40:16,000 --> 00:40:18,000
他

1177
00:40:18,000 --> 00:40:20,000
用某种政治的方法

1178
00:40:20,000 --> 00:40:22,000
在主流的

1179
00:40:22,000 --> 00:40:24,000
发行版中得到了一个

1180
00:40:24,000 --> 00:40:26,000
所谓正统的地位

1181
00:40:26,000 --> 00:40:28,000
对 dabian 也换好像

1182
00:40:28,000 --> 00:40:30,000
也是即将支持

1183
00:40:30,000 --> 00:40:32,000
dabian 8 里面他就会换成

1184
00:40:32,000 --> 00:40:34,000
systemd 之前是在

1185
00:40:34,000 --> 00:40:36,000
做一个

1186
00:40:36,000 --> 00:40:38,000
dabian 用户

1187
00:40:38,000 --> 00:40:40,000
我觉得还是有点

1188
00:40:40,000 --> 00:40:42,000
不爽的

1189
00:40:42,000 --> 00:40:44,000
但其实

1190
00:40:44,000 --> 00:40:46,000
我觉得以我的水平

1191
00:40:46,000 --> 00:40:48,000
来说这种改变可能

1192
00:40:48,000 --> 00:40:50,000
对于我的影响是微乎其微的

1193
00:40:50,000 --> 00:40:52,000
其实

1194
00:40:52,000 --> 00:40:54,000
也比较简单我用的长河也比较简单

1195
00:40:54,000 --> 00:40:56,000
主要的问题就是

1196
00:40:56,000 --> 00:40:58,000
他的 upstart 的配置

1197
00:40:58,000 --> 00:41:00,000
不是一个完全的数据化的东西

1198
00:41:00,000 --> 00:41:02,000
他明明有包含可以

1199
00:41:02,000 --> 00:41:04,000
他用 share 脚本

1200
00:41:04,000 --> 00:41:06,000
其实也是一个安全因

1201
00:41:06,000 --> 00:41:08,000
不光是这个问题

1202
00:41:08,000 --> 00:41:10,000
一旦你掉到 share 脚本之后

1203
00:41:10,000 --> 00:41:12,000
你整个东西就没有办法

1204
00:41:12,000 --> 00:41:14,000
自动化来去分析或者是处理了

1205
00:41:14,000 --> 00:41:16,000
对

1206
00:41:16,000 --> 00:41:18,000
他就打开了一个

1207
00:41:18,000 --> 00:41:20,000
潘多拉盒子

1208
00:41:20,000 --> 00:41:22,000
他就不再可控

1209
00:41:22,000 --> 00:41:24,000
就变成一个纯粹的 descriptive

1210
00:41:24,000 --> 00:41:26,000
描述性的配置文件

1211
00:41:26,000 --> 00:41:28,000
变成一个 imparative

1212
00:41:28,000 --> 00:41:30,000
叫什么

1213
00:41:30,000 --> 00:41:32,000
有执行的配置文件

1214
00:41:32,000 --> 00:41:34,000
就变得比较奇怪了

1215
00:41:34,000 --> 00:41:36,000
而且你想最近不是又出了

1216
00:41:36,000 --> 00:41:38,000
等等反过来了

1217
00:41:38,000 --> 00:41:40,000
为什么我记得 systemd

1218
00:41:40,000 --> 00:41:42,000
里面的 demo 的描述文件

1219
00:41:42,000 --> 00:41:44,000
是 descriptive

1220
00:41:44,000 --> 00:41:46,000
是 systemd 是 descriptive

1221
00:41:46,000 --> 00:41:48,000
upstart 不是

1222
00:41:48,000 --> 00:41:50,000
upstart 上面支持你可以嵌入

1223
00:41:50,000 --> 00:41:52,000
你的 prestart

1224
00:41:52,000 --> 00:41:54,000
postart 之类的

1225
00:41:54,000 --> 00:41:56,000
你可以加入一些钩子

1226
00:41:56,000 --> 00:41:58,000
你可以直接在配置文本

1227
00:41:58,000 --> 00:42:00,000
嵌入这个脚本的

1228
00:42:00,000 --> 00:42:02,000
执行脚本的

1229
00:42:02,000 --> 00:42:04,000
就会导致各种各样的

1230
00:42:04,000 --> 00:42:06,000
麻烦的就没有完全

1231
00:42:06,000 --> 00:42:08,000
解决 cv 的那些问题

1232
00:42:10,000 --> 00:42:12,000
然后刚好最近不是出了

1233
00:42:12,000 --> 00:42:14,000
share shock

1234
00:42:14,000 --> 00:42:16,000
现在是 bash 这种

1235
00:42:16,000 --> 00:42:18,000
老东西也是可能会有很多

1236
00:42:18,000 --> 00:42:20,000
坑的所以

1237
00:42:20,000 --> 00:42:22,000
bash

1238
00:42:22,000 --> 00:42:24,000
bash in bash

1239
00:42:24,000 --> 00:42:26,000
又扯远了

1240
00:42:26,000 --> 00:42:28,000
不过这可能就是 podcast

1241
00:42:30,000 --> 00:42:32,000
本来要做一件事吧不停的扯远

1242
00:42:34,000 --> 00:42:36,000
所以你觉得刚才讲 exception

1243
00:42:36,000 --> 00:42:38,000
handling 你说

1244
00:42:38,000 --> 00:42:40,000
exception 应该在哪一层处理

1245
00:42:40,000 --> 00:42:42,000
这是一个很好的问题

1246
00:42:42,000 --> 00:42:44,000
exception 其实

1247
00:42:44,000 --> 00:42:46,000
是有不同层级的

1248
00:42:46,000 --> 00:42:48,000
我觉得我可能

1249
00:42:48,000 --> 00:42:50,000
在小时候用 windows

1250
00:42:50,000 --> 00:42:52,000
的时候这话说

1251
00:42:52,000 --> 00:42:54,000
对在以前用 windows 的时候

1252
00:42:54,000 --> 00:42:56,000
非常恼的那个

1253
00:42:56,000 --> 00:42:58,000
错误提示就是

1254
00:42:58,000 --> 00:43:00,000
一个红叉的

1255
00:43:00,000 --> 00:43:02,000
popup 然后说

1256
00:43:02,000 --> 00:43:04,000
严重错误冒号

1257
00:43:04,000 --> 00:43:06,000
0 x

1258
00:43:06,000 --> 00:43:08,000
某某某地址的

1259
00:43:08,000 --> 00:43:10,000
内容

1260
00:43:10,000 --> 00:43:12,000
不应被访问之类的

1261
00:43:12,000 --> 00:43:14,000
然后程序终止

1262
00:43:14,000 --> 00:43:16,000
我觉得其实是非常愚蠢的一个

1263
00:43:16,000 --> 00:43:18,000
错误提示就是

1264
00:43:18,000 --> 00:43:20,000
我当时做一个

1265
00:43:20,000 --> 00:43:22,000
普通的用户

1266
00:43:22,000 --> 00:43:24,000
我凭什么要去读这个

1267
00:43:24,000 --> 00:43:26,000
十六进式的地址

1268
00:43:26,000 --> 00:43:28,000
你这个 popup

1269
00:43:28,000 --> 00:43:30,000
到底给我带来了什么呢

1270
00:43:30,000 --> 00:43:32,000
什么也没有你只是告诉我

1271
00:43:32,000 --> 00:43:34,000
我的游戏不能玩了

1272
00:43:34,000 --> 00:43:36,000
你不如直接告诉我游戏不能玩了就好

1273
00:43:36,000 --> 00:43:38,000
产品机里

1274
00:43:38,000 --> 00:43:40,000
偷懒吗没有去做

1275
00:43:40,000 --> 00:43:42,000
这个事情这个不应该暴露给

1276
00:43:42,000 --> 00:43:44,000
用户吗我相信这是 windows

1277
00:43:44,000 --> 00:43:46,000
的问题就是这种严重的

1278
00:43:46,000 --> 00:43:48,000
错误级别这种这种

1279
00:43:48,000 --> 00:43:50,000
现在我知道这样的错误提示显示 windows

1280
00:43:50,000 --> 00:43:52,000
就是 windows 作为一个

1281
00:43:52,000 --> 00:43:54,000
抢单试多任务的系统

1282
00:43:54,000 --> 00:43:56,000
它可以探测到程序

1283
00:43:56,000 --> 00:43:58,000
访问的不该访问的内存

1284
00:43:58,000 --> 00:44:00,000
所以它会抛出这样的错误提示

1285
00:44:00,000 --> 00:44:02,000
来 OKOK

1286
00:44:02,000 --> 00:44:04,000
对我相信这种情况

1287
00:44:04,000 --> 00:44:06,000
我相信这种情况我在 mac

1288
00:44:06,000 --> 00:44:08,000
OS 10 上发生的话 macOS 10

1289
00:44:08,000 --> 00:44:10,000
会很简单的让它 crush 然后

1290
00:44:10,000 --> 00:44:12,000
跳出来一个对话框说你

1291
00:44:12,000 --> 00:44:14,000
刚才的程序 crush 了你要发送

1292
00:44:14,000 --> 00:44:16,000
一个错误报告给 apple 吗

1293
00:44:16,000 --> 00:44:18,000
对啊这个现在 windows

1294
00:44:18,000 --> 00:44:20,000
不是这样的吗我运好多年没有

1295
00:44:20,000 --> 00:44:22,000
我不知道啊就咱们两个都不是 windows

1296
00:44:22,000 --> 00:44:24,000
所以我觉得这期可能有点偏扑

1297
00:44:24,000 --> 00:44:26,000
不不不其实我

1298
00:44:26,000 --> 00:44:28,000
起码到 windows 7 的时候

1299
00:44:28,000 --> 00:44:30,000
还是有这个印象就 windows 上面

1300
00:44:30,000 --> 00:44:32,000
一旦出了任何

1301
00:44:32,000 --> 00:44:34,000
预料之外的事情

1302
00:44:34,000 --> 00:44:36,000
它的那个错误提示都是非常的

1303
00:44:36,000 --> 00:44:38,000
用户不友好

1304
00:44:38,000 --> 00:44:40,000
highly user friendly

1305
00:44:40,000 --> 00:44:42,000
而且它一定要你点一下

1306
00:44:42,000 --> 00:44:44,000
一定要跳出来告诉你啊这个玩意儿挂了

1307
00:44:44,000 --> 00:44:46,000
对而且你确认吧而且你点

1308
00:44:46,000 --> 00:44:48,000
是 wun 7 还是 vista

1309
00:44:48,000 --> 00:44:50,000
这个问题超严重就是它每次

1310
00:44:50,000 --> 00:44:52,000
就出现任何系统级别

1311
00:44:52,000 --> 00:44:54,000
让你提示的都行它会把

1312
00:44:54,000 --> 00:44:56,000
就所有的都挥掉

1313
00:44:56,000 --> 00:44:58,000
只出现那个框

1314
00:44:58,000 --> 00:45:00,000
就你没有办法去去忽略它

1315
00:45:00,000 --> 00:45:02,000
然后就导致一个问题就是

1316
00:45:02,000 --> 00:45:04,000
那普通用户他反正

1317
00:45:04,000 --> 00:45:06,000
他也看不懂那个在说什么对吧

1318
00:45:06,000 --> 00:45:08,000
然后那就点了你在多出几次

1319
00:45:08,000 --> 00:45:10,000
之后他就就见到的框就点

1320
00:45:10,000 --> 00:45:12,000
也不管他们说什么就会导致

1321
00:45:12,000 --> 00:45:14,000
它有一个一个叫什么防止

1322
00:45:14,000 --> 00:45:16,000
这个恶意程序的一种机制吗对吧

1323
00:45:16,000 --> 00:45:18,000
我记得是微散能开始有的吧

1324
00:45:18,000 --> 00:45:20,000
但是因为这个

1325
00:45:20,000 --> 00:45:22,000
它把用户训练的只要用到的框

1326
00:45:22,000 --> 00:45:23,000
就点 OK

1327
00:45:23,000 --> 00:45:25,000
所以其实那个机制等于有了等于没有

1328
00:45:25,000 --> 00:45:28,000
你不断去反用户说

1329
00:45:28,000 --> 00:45:30,000
啊这个程序会怎么讲啊

1330
00:45:30,000 --> 00:45:32,000
那个程序会怎么讲这就是这个啊

1331
00:45:32,000 --> 00:45:34,000
所有人都去死不管

1332
00:45:34,000 --> 00:45:36,000
就好像不停的弹窗

1333
00:45:36,000 --> 00:45:38,000
那么用户养成的习惯就是

1334
00:45:38,000 --> 00:45:40,000
一键弹窗立刻点关闭

1335
00:45:40,000 --> 00:45:42,000
如果你不停跳对话框用户的习惯就是

1336
00:45:42,000 --> 00:45:44,000
听话框出来不去读立刻点

1337
00:45:44,000 --> 00:45:46,000
对一个可以让他最快消失的键

1338
00:45:46,000 --> 00:45:48,000
但其实现在我觉得就不管是在什么情况

1339
00:45:48,000 --> 00:45:50,000
就已经是绝大多数用户的

1340
00:45:50,000 --> 00:45:52,000
就是第一反第一反应了

1341
00:45:52,000 --> 00:45:54,000
对就我们黑问的

1342
00:45:54,000 --> 00:45:56,000
其实很多麦芬户也是这样的

1343
00:45:56,000 --> 00:46:00,000
对不过这个情况小的小一些好就是

1344
00:46:00,000 --> 00:46:04,000
比如说起码他是从那个十点几开始搭那个

1345
00:46:04,000 --> 00:46:06,000
那个叫什么玩意儿

1346
00:46:06,000 --> 00:46:08,000
那个就是你点一下

1347
00:46:08,000 --> 00:46:10,000
他要经过他去签

1348
00:46:10,000 --> 00:46:12,000
签名过的程序才可以正常使用那个

1349
00:46:12,000 --> 00:46:14,000
在那个 Security Settings 里面叫

1350
00:46:14,000 --> 00:46:16,000
叫认证 Authorized Developer 之类的

1351
00:46:16,000 --> 00:46:18,000
那个功能

1352
00:46:18,000 --> 00:46:20,000
我看一下那个东西叫什么来着

1353
00:46:22,000 --> 00:46:26,000
啊对就是 Allow apps downloaded from

1354
00:46:26,000 --> 00:46:28,000
什么什么他有三个选项

1355
00:46:28,000 --> 00:46:32,000
他默认就是默认是允许

1356
00:46:32,000 --> 00:46:34,000
App Store 和这个

1357
00:46:34,000 --> 00:46:36,000
Illinify the developers and anywhere

1358
00:46:36,000 --> 00:46:38,000
对就是对这基本上是

1359
00:46:38,000 --> 00:46:40,000
好奇怪啊我居然没有改过这一项

1360
00:46:40,000 --> 00:46:42,000
你的是默认是哪一个

1361
00:46:42,000 --> 00:46:44,000
第二个就是 MAC App Store

1362
00:46:44,000 --> 00:46:46,000
and Identify the developers

1363
00:46:46,000 --> 00:46:50,000
对你不你不你你觉得你应该改哪一下

1364
00:46:50,000 --> 00:46:52,000
我竟然没有把它改成 anywhere

1365
00:46:52,000 --> 00:46:54,000
这是非常奇怪的一件事情

1366
00:46:54,000 --> 00:46:56,000
你为什么把它改成 anywhere

1367
00:46:56,000 --> 00:46:58,000
因为我觉得

1368
00:46:58,000 --> 00:47:00,000
这不是我不是在用

1369
00:47:00,000 --> 00:47:02,000
IOS 我知道我要干什么

1370
00:47:02,000 --> 00:47:04,000
我作为一个程序员我知道我下载的

1371
00:47:04,000 --> 00:47:06,000
程序是什么

1372
00:47:06,000 --> 00:47:08,000
但至少是我认为我知道

1373
00:47:08,000 --> 00:47:10,000
所以你不要 stand in my way

1374
00:47:10,000 --> 00:47:12,000
然后告诉我我不应该做什么

1375
00:47:12,000 --> 00:47:14,000
我觉得我就是

1376
00:47:14,000 --> 00:47:16,000
我知道有这三个选项

1377
00:47:16,000 --> 00:47:18,000
然后我是故意留的这个就现在这个就是允许

1378
00:47:18,000 --> 00:47:20,000
App Store 和这个受信任的开发者

1379
00:47:20,000 --> 00:47:24,000
然后这样一个好处就是我从网上下载了一个程序之后

1380
00:47:24,000 --> 00:47:28,000
我可以很清楚的知道这个程序是被那个开发者

1381
00:47:28,000 --> 00:47:30,000
自己签过名的没

1382
00:47:30,000 --> 00:47:32,000
如果他是没有被签过名的

1383
00:47:32,000 --> 00:47:34,000
那他不可能是被签过名的

1384
00:47:34,000 --> 00:47:36,000
如果他是没有被签过名的

1385
00:47:36,000 --> 00:47:38,000
然后我觉得他应该是有签名的话

1386
00:47:38,000 --> 00:47:42,000
可能我下的那个版本可能会是一个叫做什么

1387
00:47:42,000 --> 00:47:44,000
contaminate

1388
00:47:44,000 --> 00:47:46,000
版本

1389
00:47:46,000 --> 00:47:52,000
可是你不觉得这一点其实对于你这个层级的程序来说很很无稽吗

1390
00:47:52,000 --> 00:47:58,000
就是你明明也会去用 bro homebrew 或者是其他的脚本程序

1391
00:47:58,000 --> 00:48:02,000
有时候这些脚本程序有时候有些安装包他同样是需要你速度的

1392
00:48:02,000 --> 00:48:07,000
那这种情况下你其实这种程序是不会经过

1393
00:48:07,000 --> 00:48:10,000
Apple 的这一套认证机制

1394
00:48:10,000 --> 00:48:12,000
可是你照样会去运行

1395
00:48:12,000 --> 00:48:14,000
我 homebrew 我不用速度啊

1396
00:48:14,000 --> 00:48:18,000
我把那个就是 user local 改成了我自己属于我自己的

1397
00:48:18,000 --> 00:48:20,000
Homebrew 是一个不好的用

1398
00:48:20,000 --> 00:48:23,000
但是我意思是你可以去运行一些脚本

1399
00:48:23,000 --> 00:48:29,000
脚本程序而不仅仅是这种经过 Apple 搭包的 bundle 程序

1400
00:48:29,000 --> 00:48:34,000
但那种程序的安全性是不受这里的控制所保护的

1401
00:48:34,000 --> 00:48:35,000
对

1402
00:48:35,000 --> 00:48:37,000
我想想我觉得是这样子

1403
00:48:37,000 --> 00:48:41,000
就是我知道我大部分时候在做什么

1404
00:48:41,000 --> 00:48:46,000
但是我不保证有时候没睡醒的时候或者是快睡着的时候

1405
00:48:46,000 --> 00:48:49,000
做的事情都是一定是合乎逻辑的

1406
00:48:49,000 --> 00:48:52,000
所以有这么一个安全机制保护一下还是挺好的

1407
00:48:52,000 --> 00:48:54,000
然后要跳出这个机制其实很简单

1408
00:48:54,000 --> 00:48:57,000
就是你双击执行那个 App 不行的话

1409
00:48:57,000 --> 00:49:00,000
你就右键调出那个 contacts menu

1410
00:49:00,000 --> 00:49:01,000
然后点 open 的话

1411
00:49:01,000 --> 00:49:03,000
它就可以绕过那个限制

1412
00:49:03,000 --> 00:49:04,000
它会问你确认一下

1413
00:49:04,000 --> 00:49:07,000
那你就再二次确认一下就可以直接就行了

1414
00:49:07,000 --> 00:49:11,000
你不需要把这个选项调成 Allow it from anywhere 这样也

1415
00:49:11,000 --> 00:49:13,000
就刹上面比较大

1416
00:49:13,000 --> 00:49:17,000
所以就哪怕是你这里在干什么

1417
00:49:17,000 --> 00:49:20,000
就好像就好像很多车

1418
00:49:20,000 --> 00:49:22,000
你开车一样对吧

1419
00:49:22,000 --> 00:49:23,000
你虽然知道你这怎么开

1420
00:49:23,000 --> 00:49:26,000
但是我觉得有这么一种安全机制还是不错的

1421
00:49:27,000 --> 00:49:31,000
对我其实刚才惊讶的是我这台电脑买来也有

1422
00:49:31,000 --> 00:49:34,000
两个月了

1423
00:49:34,000 --> 00:49:37,000
买了一台新的 MBP

1424
00:49:37,000 --> 00:49:41,000
然后这两个月里面我居然从来没有改过它

1425
00:49:41,000 --> 00:49:43,000
也没有察觉到任何不正常

1426
00:49:43,000 --> 00:49:45,000
或者说没察觉到任何不便

1427
00:49:45,000 --> 00:49:47,000
所以说明两个问题对吧

1428
00:49:47,000 --> 00:49:50,000
要不你就是用的第三方软件比较少

1429
00:49:50,000 --> 00:49:55,000
要么就是你遇到的都是那种

1430
00:49:55,000 --> 00:49:57,000
就迁宁过的至少是

1431
00:49:57,000 --> 00:49:58,000
对

1432
00:49:58,000 --> 00:50:01,000
还证明了第三个问题就是

1433
00:50:01,000 --> 00:50:04,000
还证明了第三点就是其实你的选择是比较理智

1434
00:50:04,000 --> 00:50:07,000
我有点太 over opening

1435
00:50:07,000 --> 00:50:08,000
对

1436
00:50:08,000 --> 00:50:12,000
我是就刚才讲了我们刚才也得讲不想折腾

1437
00:50:12,000 --> 00:50:14,000
这也是其中一个就是

1438
00:50:14,000 --> 00:50:16,000
我之前还说了这么一个事情

1439
00:50:16,000 --> 00:50:19,000
就之前我打那个在麦克向打中文输入法

1440
00:50:19,000 --> 00:50:23,000
对我一个叫做数虚管的一个一个

1441
00:50:23,000 --> 00:50:24,000
对我也用

1442
00:50:24,000 --> 00:50:25,000
对吧

1443
00:50:25,000 --> 00:50:30,000
对如果有听众不知道的话数虚管是中文界最好的输入法没有指引

1444
00:50:30,000 --> 00:50:34,000
然后免费为这个佛箴做入广告

1445
00:50:34,000 --> 00:50:37,000
对那个连接我们可以放到这个里面

1446
00:50:37,000 --> 00:50:40,000
不过那个东西其实还不算用户特别友好

1447
00:50:40,000 --> 00:50:43,000
它的那个要改设置是要改配置文件的

1448
00:50:43,000 --> 00:50:47,000
但在麦克上面有一个 Gi 可以用的

1449
00:50:47,000 --> 00:50:49,000
对对把那个也倒是连进去吧

1450
00:50:49,000 --> 00:50:51,000
但 anyway 我想说的是

1451
00:50:51,000 --> 00:50:53,000
我最近把那个数据管关掉

1452
00:50:53,000 --> 00:50:56,000
然后开始用那个系统默认的那个拼音输入法

1453
00:50:56,000 --> 00:50:57,000
就自带的那个

1454
00:50:57,000 --> 00:50:58,000
感觉怎样

1455
00:50:58,000 --> 00:50:59,000
现在还不错

1456
00:50:59,000 --> 00:51:04,000
就是我没有觉得效率有特别大的影响

1457
00:51:04,000 --> 00:51:07,000
但一方面是因为我最近打中文也打的不多

1458
00:51:07,000 --> 00:51:08,000
其实也无所谓

1459
00:51:08,000 --> 00:51:11,000
因为日常的都是英文的比较多

1460
00:51:11,000 --> 00:51:14,000
然后中文的话也就进线云给你们发发邮件

1461
00:51:14,000 --> 00:51:15,000
聊聊天之类的

1462
00:51:15,000 --> 00:51:16,000
是这样的

1463
00:51:16,000 --> 00:51:19,000
而且我觉得数据管让我觉得很不爽利的

1464
00:51:19,000 --> 00:51:21,000
就是我在输入

1465
00:51:21,000 --> 00:51:24,000
我不知道自带的中文输入法有没有这个问题

1466
00:51:24,000 --> 00:51:27,000
就是你在输入这个德语的叫 Wumlaut 的时候

1467
00:51:27,000 --> 00:51:30,000
就是有些字母上面要加两点

1468
00:51:30,000 --> 00:51:34,000
在这种情况下如果是 Mac 的英文状态

1469
00:51:34,000 --> 00:51:38,000
可以通过 LT 加上 U 来输入两点

1470
00:51:38,000 --> 00:51:39,000
然后再按一个字母

1471
00:51:39,000 --> 00:51:43,000
这样就可以形成这个字母上面加两点的组合

1472
00:51:43,000 --> 00:51:45,000
但是在数据管里面是没有的

1473
00:51:45,000 --> 00:51:49,000
其实我一直想要给佛阵提一个 Bug Request

1474
00:51:49,000 --> 00:51:54,000
因为有些组合键在数据管下面是可以认出来的

1475
00:51:54,000 --> 00:51:55,000
但是这个没有

1476
00:51:55,000 --> 00:51:59,000
所以它是因为有它被炸用了吗还是怎么样

1477
00:51:59,000 --> 00:52:00,000
应该不是吧

1478
00:52:00,000 --> 00:52:04,000
就比如说在数据管下面你按 LT 加 A

1479
00:52:04,000 --> 00:52:06,000
你可以打出这个 A 片

1480
00:52:06,000 --> 00:52:14,000
不是 A 片应该是挪威语的 O 就是 A 上面加一个圈

1481
00:52:14,000 --> 00:52:15,000
我不确定

1482
00:52:15,000 --> 00:52:17,000
但应该是可以的

1483
00:52:17,000 --> 00:52:23,000
但是你要想打 Wumlaut 的时候就不可以

1484
00:52:23,000 --> 00:52:28,000
我觉得它可能是不是也是类似一种 IME 的方式来实现

1485
00:52:28,000 --> 00:52:31,000
你看 Wumlaut 就是这种

1486
00:52:31,000 --> 00:52:33,000
你先按一个键再按其他键

1487
00:52:33,000 --> 00:52:38,000
然后这两个键组合成一个字母的方式叫做 Deadkey

1488
00:52:38,000 --> 00:52:44,000
Deadkey 应该是可以通过被 IME 改变的

1489
00:52:44,000 --> 00:52:51,000
但是我相信它是可以不去改系统既有的这种 Deadkey 设置

1490
00:52:51,000 --> 00:52:54,000
我也没有做过这些东西

1491
00:52:54,000 --> 00:52:55,000
我只是我的猜想

1492
00:52:55,000 --> 00:52:58,000
那你可以给它提个 Bug Request

1493
00:52:58,000 --> 00:53:00,000
Pool Request 你自己改了好了

1494
00:53:00,000 --> 00:53:01,000
Bug Request

1495
00:53:01,000 --> 00:53:02,000
Bug Request

1496
00:53:02,000 --> 00:53:04,000
我不知道怎么改

1497
00:53:04,000 --> 00:53:05,000
我太弱了

1498
00:53:05,000 --> 00:53:07,000
但是我相信你

1499
00:53:07,000 --> 00:53:08,000
等等

1500
00:53:08,000 --> 00:53:11,000
数学碗是用什么写的 C 加加

1501
00:53:11,000 --> 00:53:12,000
好问题

1502
00:53:12,000 --> 00:53:15,000
我不知道没有关注过

1503
00:53:15,000 --> 00:53:18,000
我昨天去面试的时候

1504
00:53:18,000 --> 00:53:25,000
听众朋友我作为一个目前你们还不太了解的主持人

1505
00:53:25,000 --> 00:53:27,000
昨天我去面试新工作

1506
00:53:27,000 --> 00:53:28,000
在面试的时候

1507
00:53:28,000 --> 00:53:32,000
他们给了我一道面试题

1508
00:53:32,000 --> 00:53:34,000
面试题里面写说

1509
00:53:34,000 --> 00:53:36,000
最好能用 C 加加解决

1510
00:53:36,000 --> 00:53:39,000
然后我心里就流汗

1511
00:53:39,000 --> 00:53:43,000
我说这个招命简历上可没写

1512
00:53:43,000 --> 00:53:44,000
说一定要会 C 加加

1513
00:53:44,000 --> 00:53:45,000
而且我真的是不会 C 加加

1514
00:53:45,000 --> 00:53:47,000
然后我就说我去上去问

1515
00:53:47,000 --> 00:53:48,000
我能用 Python 写吗

1516
00:53:48,000 --> 00:53:49,000
他们说可以

1517
00:53:49,000 --> 00:53:51,000
然后我用一秒钟写出来了

1518
00:53:51,000 --> 00:53:56,000
效率顿时就不一样了

1519
00:53:56,000 --> 00:53:58,000
我觉得对

1520
00:53:58,000 --> 00:53:59,000
但是我也不是很骄傲

1521
00:53:59,000 --> 00:54:03,000
因为我觉得如果能在 10 秒钟之内用 C 加加写出来

1522
00:54:03,000 --> 00:54:04,000
可能更快

1523
00:54:04,000 --> 00:54:06,000
可能更会受到击杀

1524
00:54:06,000 --> 00:54:09,000
你这样用一秒写出来更爽

1525
00:54:09,000 --> 00:54:10,000
对

1526
00:54:10,000 --> 00:54:11,000
一秒可能夸张了

1527
00:54:11,000 --> 00:54:12,000
可能三秒

1528
00:54:12,000 --> 00:54:14,000
毕竟要写一个

1529
00:54:14,000 --> 00:54:16,000
打几个字是吧

1530
00:54:16,000 --> 00:54:19,000
你有在找工作吗

1531
00:54:19,000 --> 00:54:20,000
我们又岔开了

1532
00:54:20,000 --> 00:54:21,000
不关你的事

1533
00:54:21,000 --> 00:54:23,000
目前还没有

1534
00:54:23,000 --> 00:54:25,000
你想你是什么时候毕业

1535
00:54:25,000 --> 00:54:27,000
理论上是明年吧

1536
00:54:27,000 --> 00:54:30,000
对我们的嘉宾主持 Ryo

1537
00:54:30,000 --> 00:54:32,000
现在还在读博士

1538
00:54:32,000 --> 00:54:33,000
Ryo 博士你好

1539
00:54:33,000 --> 00:54:36,000
Candidate 还不算

1540
00:54:36,000 --> 00:54:39,000
对就是博士生

1541
00:54:39,000 --> 00:54:40,000
博士生

1542
00:54:40,000 --> 00:54:42,000
Dr.RyoGonnaV

1543
00:54:42,000 --> 00:54:45,000
北京时间

1544
00:54:45,000 --> 00:54:47,000
百分号 H

1545
00:54:47,000 --> 00:54:48,000
百分号 M 分

1546
00:54:48,000 --> 00:54:51,000
您收听到的是内核恐慌

1547
00:54:51,000 --> 00:54:53,000
有 Dr.RyoGonnaV

1548
00:54:53,000 --> 00:54:55,000
有 Dr.RyoGonnaV

1549
00:54:55,000 --> 00:54:57,000
无涛为你主持一款

1550
00:54:57,000 --> 00:54:59,000
普通人也能听懂

1551
00:54:59,000 --> 00:55:02,000
但是普通人一般不会来听的 IT 播客节目

1552
00:55:02,000 --> 00:55:05,000
你确定普通人能听懂

1553
00:55:05,000 --> 00:55:06,000
程序员能够听懂

1554
00:55:06,000 --> 00:55:08,000
但是程序员一般不听的播客节目

1555
00:55:08,000 --> 00:55:10,000
我们这样不好

1556
00:55:10,000 --> 00:55:13,000
我觉得应该要做成程序员能听懂

1557
00:55:13,000 --> 00:55:14,000
让程序员来听

1558
00:55:14,000 --> 00:55:17,000
然后普通人不会听的播客就好了

1559
00:55:17,000 --> 00:55:19,000
或者说程序员都喜欢听

1560
00:55:19,000 --> 00:55:22,000
但是程序员甚至不一定能听懂的播客节目

1561
00:55:22,000 --> 00:55:23,000
失败感

1562
00:55:23,000 --> 00:55:24,000
No

1563
00:55:24,000 --> 00:55:27,000
这样会让程序员产生一种挫折感

1564
00:55:27,000 --> 00:55:29,000
然后会奋发图强

1565
00:55:29,000 --> 00:55:34,000
去学到能够来 Bitching 我们的节目

1566
00:55:34,000 --> 00:55:36,000
种种微小的错误的水平

1567
00:55:36,000 --> 00:55:38,000
这就达到我们节目的目的了

1568
00:55:38,000 --> 00:55:39,000
OK

1569
00:55:39,000 --> 00:55:43,000
所以今天到此为止吗

1570
00:55:43,000 --> 00:55:45,000
我们录了多久

1571
00:55:45,000 --> 00:55:48,000
差不多一小时了

1572
00:55:48,000 --> 00:55:49,000
OK

1573
00:55:49,000 --> 00:55:50,000
对

1574
00:55:50,000 --> 00:55:52,000
还是控制在一小时内吧

1575
00:55:52,000 --> 00:55:53,000
OK 就这样

1576
00:55:53,000 --> 00:55:54,000
假然而止

1577
00:55:54,000 --> 00:55:57,000
不知道各位听众听的

1578
00:55:57,000 --> 00:55:59,000
那个字念假

1579
00:55:59,000 --> 00:56:00,000
不念假吗

1580
00:56:00,000 --> 00:56:01,000
我不知道

1581
00:56:01,000 --> 00:56:03,000
我经常会念错字

1582
00:56:03,000 --> 00:56:05,000
然后被听众指出

1583
00:56:05,000 --> 00:56:08,000
我现在这个字这么念

1584
00:56:08,000 --> 00:56:10,000
我希望是假然而止

1585
00:56:10,000 --> 00:56:13,000
假如你认为这个字有其他的念法

1586
00:56:13,000 --> 00:56:17,000
也欢迎你连同其他反馈告诉我们

1587
00:56:17,000 --> 00:56:21,000
我们的 Producer 是 Laurence Lee

1588
00:56:21,000 --> 00:56:24,000
他会为我们剪辑今天的这款剪辑

1589
00:56:24,000 --> 00:56:28,000
我们还没有社交媒体

1590
00:56:28,000 --> 00:56:29,000
对

1591
00:56:29,000 --> 00:56:30,000
暂时如果有反馈的话

1592
00:56:30,000 --> 00:56:32,000
可以直接反馈 IT 公论

1593
00:56:32,000 --> 00:56:37,000
IT 公论的 Twitter 账号是 IT 公论的全拼

1594
00:56:37,000 --> 00:56:39,000
Twitter 我在模仿 Laurence

1595
00:56:39,000 --> 00:56:40,000
算了

1596
00:56:40,000 --> 00:56:42,000
我们有一个邮箱地址

1597
00:56:42,000 --> 00:56:43,000
到时候会有一个

1598
00:56:43,000 --> 00:56:46,000
每个播客在 IPN 都会有一个邮箱的

1599
00:56:46,000 --> 00:56:47,000
对

1600
00:56:47,000 --> 00:56:50,000
但是每一个播客会在 Twitter

1601
00:56:50,000 --> 00:56:51,000
或者是微博上面有系列账号吗

1602
00:56:51,000 --> 00:56:52,000
下次吧

1603
00:56:52,000 --> 00:56:53,000
叮咚

1604
00:56:53,000 --> 00:56:55,000
等等不要下次了

1605
00:56:55,000 --> 00:56:57,000
事实上在我剪辑播客的时候

1606
00:56:57,000 --> 00:56:59,000
Rail 已经效率非常高的

1607
00:56:59,000 --> 00:57:02,000
把内核恐慌的社交网络账号注册好了

1608
00:57:02,000 --> 00:57:06,000
我们在新浪微博和 Twitter 都是叫

1609
00:57:06,000 --> 00:57:08,000
Kernelpanicfm

1610
00:57:08,000 --> 00:57:10,000
Kernelpanicfm

1611
00:57:10,000 --> 00:57:13,000
K-E-R-N-E-L-P-A-N-I-C-F-M

1612
00:57:14,000 --> 00:57:17,000
所以观众朋友有任何反馈

1613
00:57:17,000 --> 00:57:19,000
可以给我们写一封邮件

1614
00:57:19,000 --> 00:57:21,000
邮件地址是 Kernelpanicfm

1615
00:57:21,000 --> 00:57:26,000
K-E-R-N-E-L-P-A-N-I-C-F-M

1616
00:57:26,000 --> 00:57:28,000
IPN.LI

1617
00:57:28,000 --> 00:57:30,000
写在一起中间没有 dot 或是 dash

1618
00:57:30,000 --> 00:57:31,000
不分达

1619
00:57:31,000 --> 00:57:33,000
也没有下滑线

1620
00:57:33,000 --> 00:57:35,000
有点长

1621
00:57:35,000 --> 00:57:37,000
OK

1622
00:57:37,000 --> 00:57:38,000
今天节目先到这里

1623
00:57:38,000 --> 00:57:41,000
然后我们下期再见

1624
00:57:41,000 --> 00:57:42,000
OK

1625
00:57:42,000 --> 00:57:43,000
拜拜

