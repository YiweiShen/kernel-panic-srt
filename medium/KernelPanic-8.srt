1
00:00:00,000 --> 00:00:03,000
大家好 欢迎收听第八期的内核恐慌

2
00:00:03,000 --> 00:00:04,000
我是 Ryo

3
00:00:04,000 --> 00:00:05,000
我是吴涛

4
00:00:05,000 --> 00:00:07,000
新年快乐

5
00:00:07,000 --> 00:00:12,000
所以今天我们节目开始之前还是先做一个 follow up 吧

6
00:00:12,000 --> 00:00:13,000
对

7
00:00:13,000 --> 00:00:15,000
先是我自我检讨

8
00:00:15,000 --> 00:00:19,000
我又念错了 应该是陈沐杰舍

9
00:00:19,000 --> 00:00:20,000
念唐沐杰舍

10
00:00:20,000 --> 00:00:22,000
我听的时候就觉得好像不太对

11
00:00:22,000 --> 00:00:24,000
然后就查了一下果然不是唐沐杰舍

12
00:00:24,000 --> 00:00:27,000
但 too late 就对

13
00:00:28,000 --> 00:00:30,000
然后我也念错了字

14
00:00:30,000 --> 00:00:33,000
而且这个错我觉得有点

15
00:00:34,000 --> 00:00:36,000
不可原谅是不是

16
00:00:36,000 --> 00:00:39,000
原谅总是可以原谅

17
00:00:39,000 --> 00:00:41,000
我总是原谅自己

18
00:00:41,000 --> 00:00:45,000
粘贴我总是念成粘贴

19
00:00:45,000 --> 00:00:48,000
但我觉得首先粘这个字是个多音字

20
00:00:48,000 --> 00:00:53,000
然后我个人在听到粘贴的时候会觉得有点不舒服

21
00:00:53,000 --> 00:00:57,000
所以我可能在很小的时候就知道我读错了

22
00:00:57,000 --> 00:00:59,000
但是我一直都没有改过

23
00:00:59,000 --> 00:01:02,000
其实这个事情我也一直挺模糊的

24
00:01:02,000 --> 00:01:04,000
后来我还专门去查了一下

25
00:01:04,000 --> 00:01:06,000
就是有听众指出这个错误之后

26
00:01:06,000 --> 00:01:07,000
我专门去查了一下词点

27
00:01:07,000 --> 00:01:09,000
我说原来是这样的

28
00:01:09,000 --> 00:01:13,000
就是说做动词的时候一定是念粘贴的

29
00:01:13,000 --> 00:01:17,000
然后名词的话就是米字旁这个字

30
00:01:17,000 --> 00:01:21,000
米字旁这个字做念年的时候只是做一个人的姓

31
00:01:21,000 --> 00:01:22,000
就姓氏

32
00:01:22,000 --> 00:01:26,000
然后年姓的年是另外一个是这个叫蜀字旁

33
00:01:26,000 --> 00:01:27,000
不是米字旁

34
00:01:27,000 --> 00:01:30,000
而米字旁的年在某些词典里面说

35
00:01:30,000 --> 00:01:32,000
它是蜀字旁的那个年的一体字

36
00:01:32,000 --> 00:01:33,000
怎么这么乱

37
00:01:33,000 --> 00:01:35,000
yeah whatever

38
00:01:35,000 --> 00:01:36,000
对

39
00:01:36,000 --> 00:01:40,000
所以我做内核恐光以来最大的收获之一就是语文变得好一点

40
00:01:43,000 --> 00:01:45,000
话也讲到溜了是吧

41
00:01:45,000 --> 00:01:49,000
对这是一个出乎意料的收获

42
00:01:49,000 --> 00:01:50,000
假以后的收获

43
00:01:50,000 --> 00:01:53,000
这也是个进步其实我也是

44
00:01:54,000 --> 00:02:00,000
对其实就我们两个在上一期录音的时候说

45
00:02:00,000 --> 00:02:05,000
如果我们下一期做 feedback 的话

46
00:02:05,000 --> 00:02:10,000
会把前两期的 feedback 综合在一起反馈给大家

47
00:02:10,000 --> 00:02:16,000
但是目前看来不知道是因为过节的缘故还是怎么样

48
00:02:16,000 --> 00:02:19,000
就过去两期好像没有什么反响

49
00:02:19,000 --> 00:02:21,000
不管是在社交网络上还是在邮件里面

50
00:02:21,000 --> 00:02:25,000
当然还是有一些反响

51
00:02:25,000 --> 00:02:27,000
但没有我们想象的那么多

52
00:02:27,000 --> 00:02:29,000
因为我开始预想的是

53
00:02:29,000 --> 00:02:36,000
至少我们在做 memory management 那一期可能犯了很多很低级的错误

54
00:02:36,000 --> 00:02:38,000
但目前看来没有什么人指出

55
00:02:38,000 --> 00:02:43,000
反而是比如说粘贴粘成粘贴这样低级的语文错误

56
00:02:43,000 --> 00:02:45,000
总是有听众指出来

57
00:02:46,000 --> 00:02:50,000
不会可能也是因为这个播客这个媒介的限制

58
00:02:50,000 --> 00:02:54,000
有时候你要挑错嘛

59
00:02:54,000 --> 00:02:55,000
你总得知道你要错在哪里

60
00:02:55,000 --> 00:02:58,000
但是有时候你听过之后不一定能记得下来

61
00:02:58,000 --> 00:03:00,000
或者说你当时想听到了

62
00:03:00,000 --> 00:03:03,000
但是可能一下没联系到之前他说了什么东西

63
00:03:03,000 --> 00:03:06,000
所以就好像我们在开车的时候

64
00:03:06,000 --> 00:03:12,000
一起听出站分配或者流行通信的时候

65
00:03:12,000 --> 00:03:15,000
这个地方说的好像不太对

66
00:03:15,000 --> 00:03:16,000
然后讨论一阵

67
00:03:16,000 --> 00:03:21,000
但是也不会想起来要给主持人一些反馈

68
00:03:21,000 --> 00:03:24,000
所以这里就是有这个问题

69
00:03:24,000 --> 00:03:29,000
大概咱们两个已经被很多人在驾驶舱里面骂了很多次了

70
00:03:29,000 --> 00:03:31,000
但这俩傻逼的

71
00:03:31,000 --> 00:03:32,000
对又说错了

72
00:03:32,000 --> 00:03:34,000
这种低级错误都反哈哈哈

73
00:03:34,000 --> 00:03:36,000
但咱们两个也都听不到

74
00:03:38,000 --> 00:03:40,000
所以还是应该求反馈

75
00:03:40,000 --> 00:03:43,000
不要在这家默默的骂完就爽了

76
00:03:43,000 --> 00:03:45,000
我们还是要多听一下

77
00:03:45,000 --> 00:03:50,000
不仅要当时还要事后还得接着来信

78
00:03:50,000 --> 00:03:54,000
把自己的 curse 记录下来发给我们

79
00:03:54,000 --> 00:03:56,000
待会我们改改是另一回事

80
00:03:56,000 --> 00:04:00,000
但起码有机会可以共同提高

81
00:04:00,000 --> 00:04:04,000
如果听众朋友们也有犯我们类似错误的

82
00:04:04,000 --> 00:04:07,000
我们在检讨自己错误的时候

83
00:04:07,000 --> 00:04:11,000
你们也能够知道自己过往的哪里错了吗

84
00:04:11,000 --> 00:04:12,000
对

85
00:04:12,000 --> 00:04:15,000
而且我觉得一个 podcast 可能最恐怖的事情

86
00:04:15,000 --> 00:04:16,000
不是被很多人骂

87
00:04:16,000 --> 00:04:18,000
而是跟没有人去理睬

88
00:04:18,000 --> 00:04:22,000
所以如果一个 podcast 总是得不到回应的话

89
00:04:22,000 --> 00:04:26,000
也许就让制作人觉得做下去有什么意义呢

90
00:04:26,000 --> 00:04:27,000
但是如果很多人骂的话

91
00:04:27,000 --> 00:04:30,000
反而有可能就说哎这个还是有的人听的

92
00:04:30,000 --> 00:04:31,000
那我就继续做

93
00:04:31,000 --> 00:04:33,000
你就不是见吧

94
00:04:33,000 --> 00:04:34,000
对

95
00:04:34,000 --> 00:04:35,000
轮串不了轮串

96
00:04:35,000 --> 00:04:36,000
anyway

97
00:04:36,000 --> 00:04:44,000
接下来的一条反馈是听众 log.e 发给我们的邮箱里面的一条

98
00:04:44,000 --> 00:04:48,000
他说 Swift 是没有 garbage collection

99
00:04:48,000 --> 00:04:49,000
这个是正确的

100
00:04:49,000 --> 00:04:51,000
因为我又回去看了一遍

101
00:04:51,000 --> 00:04:55,000
因为我之所以会有 Swift 有 GCD 的印象是

102
00:04:55,000 --> 00:04:58,000
在最开始的那个 Swift 的那个

103
00:04:58,000 --> 00:04:59,000
当时有一幅图嘛

104
00:04:59,000 --> 00:05:03,000
就标写出 Swift 的各项新特性

105
00:05:03,000 --> 00:05:05,000
然后我记得里面有 garbage collection

106
00:05:05,000 --> 00:05:06,000
可是我回去翻了一遍

107
00:05:06,000 --> 00:05:08,000
发现其实没有

108
00:05:09,000 --> 00:05:10,000
对

109
00:05:10,000 --> 00:05:12,000
然后

110
00:05:13,000 --> 00:05:16,000
其实还是 reference content 只不过

111
00:05:16,000 --> 00:05:17,000
automated

112
00:05:17,000 --> 00:05:19,000
然后也一直没有注意到这件事情

113
00:05:19,000 --> 00:05:21,000
所以这件事情是我们错了

114
00:05:21,000 --> 00:05:22,000
其实我们错了

115
00:05:22,000 --> 00:05:23,000
其实我们错了

116
00:05:23,000 --> 00:05:24,000
其实我们错了

117
00:05:24,000 --> 00:05:25,000
其实我们错了

118
00:05:25,000 --> 00:05:26,000
也一直没有注意到这件事情

119
00:05:26,000 --> 00:05:27,000
对

120
00:05:27,000 --> 00:05:28,000
所以这件事情是我们错了

121
00:05:28,000 --> 00:05:29,000
然后这个

122
00:05:29,000 --> 00:05:32,000
我不知道为什么 log.e 这位听众用 QQ 邮箱发给我们的

123
00:05:32,000 --> 00:05:36,000
但是我回复的时候说投币失败

124
00:05:36,000 --> 00:05:39,000
难道 QQ 不能收到 Gmail

125
00:05:40,000 --> 00:05:42,000
你知道最近出了一点点问题吗

126
00:05:42,000 --> 00:05:43,000
听说

127
00:05:43,000 --> 00:05:46,000
但是印象中还是

128
00:05:46,000 --> 00:05:48,000
QQ 和 Gmail 好像没有什么仇吧

129
00:05:48,000 --> 00:05:49,000
对

130
00:05:49,000 --> 00:05:50,000
因为不是那个

131
00:05:50,000 --> 00:05:51,000
因为 QQ 邮箱它在海外

132
00:05:51,000 --> 00:05:53,000
或者至少在香港吧

133
00:05:53,000 --> 00:05:55,000
应该是做过什么

134
00:05:57,000 --> 00:05:58,000
就是墙外服务器的

135
00:05:58,000 --> 00:05:59,000
应该是没有问题的

136
00:05:59,000 --> 00:06:01,000
不知道你这个情况怎么一回事

137
00:06:01,000 --> 00:06:04,000
不过你反馈了这里讲了也可以了

138
00:06:04,000 --> 00:06:05,000
对

139
00:06:06,000 --> 00:06:09,000
然后有一位听众来信说

140
00:06:09,000 --> 00:06:12,000
Ubuntu Mono 也是一个不错的变成字体

141
00:06:12,000 --> 00:06:15,000
而这一点我觉得我是不能接受的

142
00:06:15,000 --> 00:06:16,000
我也不能接受

143
00:06:16,000 --> 00:06:19,000
Ubuntu 那一套字体真是太丑了

144
00:06:20,000 --> 00:06:21,000
不光是 Mono 那一个

145
00:06:21,000 --> 00:06:24,000
它还有一个界面的 UI 的字体叫什么来的

146
00:06:25,000 --> 00:06:28,000
就是 14.0 里面

147
00:06:28,000 --> 00:06:30,000
就是整个它的桌面环境里面默认的

148
00:06:30,000 --> 00:06:31,000
Ubuntu Display 吗

149
00:06:31,000 --> 00:06:32,000
还是叫什么我忘了

150
00:06:32,000 --> 00:06:33,000
反正它自己出了一团字体

151
00:06:33,000 --> 00:06:34,000
就是那种感觉是很

152
00:06:34,000 --> 00:06:37,000
就是所有的转角都是圆形的那个

153
00:06:37,000 --> 00:06:40,000
对 它就是为了突出人文主义

154
00:06:40,000 --> 00:06:43,000
就是以人为本的哲学

155
00:06:43,000 --> 00:06:45,000
实在是太丑了

156
00:06:45,000 --> 00:06:47,000
把一套科技字体

157
00:06:47,000 --> 00:06:48,000
也不是科技字体

158
00:06:48,000 --> 00:06:49,000
反正就把它

159
00:06:49,000 --> 00:06:53,000
试图通过字体来反射出它那种圆滑的

160
00:06:53,000 --> 00:06:56,000
具有人情味的这么一套系统

161
00:06:57,000 --> 00:06:59,000
但我觉得是失败了

162
00:06:59,000 --> 00:07:01,000
但不是针对这个听众

163
00:07:01,000 --> 00:07:06,000
但我是觉得使用 Ubuntu Mono

164
00:07:06,000 --> 00:07:08,000
并是作为变成字体的人

165
00:07:08,000 --> 00:07:10,000
真是没有什么匹配

166
00:07:10,000 --> 00:07:13,000
sorry 非常对不起

167
00:07:13,000 --> 00:07:14,000
但比如说

168
00:07:14,000 --> 00:07:17,000
就是我专门又去看了一下

169
00:07:17,000 --> 00:07:22,000
这个字体甚至大写的 I 比小写的 L 要短一点

170
00:07:22,000 --> 00:07:24,000
然后你再

171
00:07:24,000 --> 00:07:26,000
它会让你的阅读

172
00:07:26,000 --> 00:07:29,000
那样的视线变得比较受到干扰

173
00:07:29,000 --> 00:07:32,000
就是你会情不自禁的去

174
00:07:32,000 --> 00:07:35,000
你会情不自禁的去注意到这款字体的

175
00:07:35,000 --> 00:07:38,000
加扩幅的设计上面

176
00:07:38,000 --> 00:07:41,000
对 这感觉每次感觉

177
00:07:41,000 --> 00:07:43,000
这好像有点太

178
00:07:43,000 --> 00:07:45,000
对 它会非常跳脱出来

179
00:07:45,000 --> 00:07:48,000
会呐喊着让你注意到它的存在

180
00:07:48,000 --> 00:07:50,000
不够撒手的

181
00:07:50,000 --> 00:07:56,000
这是非常影响字体质量的一个特性

182
00:07:56,000 --> 00:07:57,000
其实还是因为丑

183
00:07:57,000 --> 00:08:00,000
而且丑得那么喧嚣

184
00:08:02,000 --> 00:08:04,000
丑话说够了

185
00:08:04,000 --> 00:08:07,000
还好我们审美取向比较一致

186
00:08:07,000 --> 00:08:09,000
不然这里就打起来

187
00:08:11,000 --> 00:08:14,000
我觉得可能是 IT 公共比较具有可行性的一个特点

188
00:08:14,000 --> 00:08:22,000
你跟 Lawrence 的观点总是趋向于不同的

189
00:08:22,000 --> 00:08:26,000
而咱们这边总是你说什么什么我说对对对

190
00:08:26,000 --> 00:08:28,000
然后我说什么你说对对对

191
00:08:29,000 --> 00:08:32,000
实际上咱们都是同行的

192
00:08:32,000 --> 00:08:34,000
对 实际上咱俩是一个阵营

193
00:08:34,000 --> 00:08:36,000
下次应该请个另一个阵营的

194
00:08:36,000 --> 00:08:38,000
但我也不知道

195
00:08:38,000 --> 00:08:40,000
好吧

196
00:08:41,000 --> 00:08:44,000
然后 IT 公论上一期

197
00:08:44,000 --> 00:08:46,000
我们上一期录音的时候你告诉我说

198
00:08:46,000 --> 00:08:49,000
要听下一期 IT 公论关于苹果开发者的部分

199
00:08:49,000 --> 00:08:53,000
你们吐槽了苹果对于开发者是多么的不友好

200
00:08:53,000 --> 00:08:57,000
但怎么说呢

201
00:08:57,000 --> 00:09:00,000
我觉得这里没有一点

202
00:09:00,000 --> 00:09:04,000
就是我强调的是苹果对于开发者好的那部分

203
00:09:04,000 --> 00:09:08,000
是他们的工程师所呈现出来的

204
00:09:08,000 --> 00:09:10,000
对于开发者的那一面

205
00:09:10,000 --> 00:09:13,000
而你们所强调的则是其审核部门

206
00:09:13,000 --> 00:09:18,000
或者说他们管控的这一部分

207
00:09:18,000 --> 00:09:20,000
对于开发者不友好的部分

208
00:09:20,000 --> 00:09:23,000
这两者其实是当然是冲突的

209
00:09:23,000 --> 00:09:27,000
但是在我看来我比较看重的是工程师的那部分

210
00:09:27,000 --> 00:09:32,000
因为我自己反正不是一个要给什么第三方开发者

211
00:09:32,000 --> 00:09:34,000
要给最终用户做 APP 的人

212
00:09:34,000 --> 00:09:40,000
那我所关注的只是他提供了什么样的工具

213
00:09:40,000 --> 00:09:43,000
以及他的生态系统看起来是怎么样的

214
00:09:43,000 --> 00:09:46,000
但至于这套生态系统能不能被管理层

215
00:09:46,000 --> 00:09:52,000
以一种什么样的形式转化为对于最终用户友好的一部分

216
00:09:52,000 --> 00:09:56,000
我觉得这个对我们来说没有什么抗散

217
00:09:57,000 --> 00:10:00,000
而且说实话

218
00:10:00,000 --> 00:10:09,000
当我第一次听说 Peacock 要在 TodayVidget 里面做一个计算器的时候

219
00:10:09,000 --> 00:10:12,000
我的第一反应其实是为什么要做计算器呢

220
00:10:12,000 --> 00:10:15,000
我觉得这个东西不属于 Today

221
00:10:15,000 --> 00:10:16,000
你们有没有那意思吗

222
00:10:16,000 --> 00:10:19,000
你觉得他语境不对

223
00:10:19,000 --> 00:10:21,000
不符合那个东西

224
00:10:21,000 --> 00:10:23,000
这个东西不应该出现在哪

225
00:10:23,000 --> 00:10:27,000
我是 somehow 支持审核者的决定的

226
00:10:30,000 --> 00:10:31,000
怎么说呢

227
00:10:31,000 --> 00:10:37,000
你是严格按照 TodayVidget 的名字或者含义来确定

228
00:10:37,000 --> 00:10:39,000
它应该包含什么东西

229
00:10:39,000 --> 00:10:40,000
不应该包含什么东西吗

230
00:10:40,000 --> 00:10:41,000
对

231
00:10:41,000 --> 00:10:43,000
当然你也可以说 Today 里面出现了很多东西

232
00:10:43,000 --> 00:10:45,000
其实不一定跟 Today 完全相关

233
00:10:45,000 --> 00:10:47,000
这条线是很难划定的

234
00:10:47,000 --> 00:10:48,000
这个我承认

235
00:10:48,000 --> 00:10:52,000
比如说 Evernote 或者是 Instapaper

236
00:10:52,000 --> 00:10:56,000
在这里面出现一个 Vidget 显示你可以读的东西

237
00:10:56,000 --> 00:10:59,000
或者是你可以直接在 Evernote 里面做一些事情

238
00:10:59,000 --> 00:11:02,000
可能也跟 Today 没有什么直接的关系

239
00:11:02,000 --> 00:11:04,000
但是 Peacock 这个东西在我看来

240
00:11:04,000 --> 00:11:11,000
你在一个本来是应该提供通知和总结的地方

241
00:11:11,000 --> 00:11:12,000
做一个计算器

242
00:11:12,000 --> 00:11:14,000
在我看来这是 Misuse

243
00:11:16,000 --> 00:11:18,000
对这个怎么讲呢

244
00:11:18,000 --> 00:11:24,000
我刚才讲的也是一个非常合理的说法

245
00:11:24,000 --> 00:11:26,000
你不应该出现在那个地方

246
00:11:26,000 --> 00:11:28,000
你就为什么要出现在那个地方

247
00:11:28,000 --> 00:11:30,000
但是我觉得这个选择的自由

248
00:11:30,000 --> 00:11:32,000
难道不是应该用户来决定的吗

249
00:11:34,000 --> 00:11:36,000
用户是不知道自己要什么

250
00:11:36,000 --> 00:11:38,000
但问题就是说

251
00:11:38,000 --> 00:11:39,000
这么说吧

252
00:11:39,000 --> 00:11:41,000
好 我也是个用户

253
00:11:41,000 --> 00:11:43,000
我觉得这个地方不应该出现 Peacock

254
00:11:43,000 --> 00:11:44,000
你怎么说

255
00:11:44,000 --> 00:11:46,000
你不要装备

256
00:11:46,000 --> 00:11:48,000
那个不是默认启动的吗

257
00:11:48,000 --> 00:11:50,000
你要说天下道里面才可以

258
00:11:50,000 --> 00:11:53,000
在审核者那边不应该替用户做出决定

259
00:11:53,000 --> 00:11:55,000
这个东西不可以在那出现

260
00:11:55,000 --> 00:11:59,000
对 就说除非它违反了某一条

261
00:11:59,000 --> 00:12:02,000
对你这个东西有明显的损害

262
00:12:02,000 --> 00:12:04,000
这种不痛不痒的事情

263
00:12:04,000 --> 00:12:10,000
我的默认的一个选择就是不要限制选择的自由

264
00:12:10,000 --> 00:12:11,000
OK

265
00:12:11,000 --> 00:12:17,000
没有人阻止你去往 Today View 里面加一个计算器

266
00:12:17,000 --> 00:12:19,000
但是也没有人强迫你往里面加

267
00:12:19,000 --> 00:12:20,000
对吧

268
00:12:20,000 --> 00:12:22,000
这完全是一个用户可以选择的东西

269
00:12:22,000 --> 00:12:24,000
而且它默认是没有的

270
00:12:24,000 --> 00:12:25,000
OK

271
00:12:25,000 --> 00:12:27,000
所以实际上这是一种管理哲学的分歧

272
00:12:27,000 --> 00:12:31,000
就是你觉得你不应该替用户做出太多的决定

273
00:12:31,000 --> 00:12:33,000
而我觉得你应该

274
00:12:33,000 --> 00:12:38,000
或者我应该替用户做出一些看起来让我觉得不爽的决定

275
00:12:38,000 --> 00:12:40,000
我觉得你可以做替用户做决定

276
00:12:40,000 --> 00:12:42,000
比如说你默认

277
00:12:42,000 --> 00:12:45,000
你给一个在比如说开发者

278
00:12:45,000 --> 00:12:49,000
哲理里面说明说 Today View 应该是主要用来干什么的

279
00:12:49,000 --> 00:12:51,000
然后你不鼓励什么东西

280
00:12:51,000 --> 00:12:52,000
但是你不能说

281
00:12:52,000 --> 00:12:53,000
因为我不鼓励这个

282
00:12:53,000 --> 00:12:55,000
所以我完全禁止你做这个

283
00:12:55,000 --> 00:12:56,000
对吧

284
00:12:56,000 --> 00:12:58,000
因为这个并不是一个

285
00:12:58,000 --> 00:13:00,000
就是有些人就是愿意这样使用的

286
00:13:00,000 --> 00:13:01,000
因为那个方便嘛

287
00:13:01,000 --> 00:13:02,000
拉下来之后

288
00:13:02,000 --> 00:13:05,000
它并不是把 Today View 当成一个

289
00:13:05,000 --> 00:13:08,000
按字面意义上讲的是今日相关的事情

290
00:13:08,000 --> 00:13:09,000
而是说

291
00:13:09,000 --> 00:13:11,000
作为一个能够比较快捷的

292
00:13:11,000 --> 00:13:15,000
启动一个或者甚至不用启动程序的一个

293
00:13:15,000 --> 00:13:16,000
完成一个功能的方式

294
00:13:16,000 --> 00:13:17,000
对吧

295
00:13:17,000 --> 00:13:19,000
这个也很难说

296
00:13:19,000 --> 00:13:20,000
好吧

297
00:13:20,000 --> 00:13:21,000
但在我看来

298
00:13:21,000 --> 00:13:27,000
这就好像在 Bookmark 上面用一个 JavaScript 的小程序来

299
00:13:27,000 --> 00:13:30,000
来完成一件事情叫做什么 Bookmarklet 一样

300
00:13:30,000 --> 00:13:31,000
是一种

301
00:13:31,000 --> 00:13:33,000
是种误用

302
00:13:33,000 --> 00:13:37,000
但是这个你不可否认

303
00:13:37,000 --> 00:13:38,000
就是说这种情况有些

304
00:13:38,000 --> 00:13:39,000
它是方便

305
00:13:39,000 --> 00:13:41,000
所谓 Power User

306
00:13:41,000 --> 00:13:42,000
它就是要这样用

307
00:13:42,000 --> 00:13:46,000
我不反对说你只出一种

308
00:13:46,000 --> 00:13:47,000
它应该做什么

309
00:13:47,000 --> 00:13:48,000
但是你不能说

310
00:13:48,000 --> 00:13:50,000
我完全禁止你做什么

311
00:13:50,000 --> 00:13:52,000
你是一个

312
00:13:52,000 --> 00:13:54,000
就你并不是用户自己

313
00:13:54,000 --> 00:13:56,000
有用户可能他就是需要这样的需求

314
00:13:56,000 --> 00:13:57,000
他发现可以这么用

315
00:13:57,000 --> 00:13:58,000
我觉得还挺方便的

316
00:13:58,000 --> 00:14:01,000
你为什么要干涉用户的自由

317
00:14:01,000 --> 00:14:02,000
如果照这种逻辑发展下去

318
00:14:02,000 --> 00:14:04,000
那这不就成了独裁专制吗

319
00:14:04,000 --> 00:14:07,000
那 OS X 上面我们那些什么定制化的

320
00:14:07,000 --> 00:14:09,000
什么 Pro User 的工具

321
00:14:09,000 --> 00:14:10,000
不要搞了

322
00:14:10,000 --> 00:14:11,000
不

323
00:14:11,000 --> 00:14:13,000
但我觉得这个不算独裁专制吧

324
00:14:13,000 --> 00:14:14,000
这个算比如说

325
00:14:14,000 --> 00:14:18,000
你这实际上是虽然

326
00:14:18,000 --> 00:14:20,000
但是用这个词造句

327
00:14:20,000 --> 00:14:23,000
你是你是愿意说

328
00:14:23,000 --> 00:14:24,000
虽然这样做是错的

329
00:14:24,000 --> 00:14:26,000
但是用户有这样的需求

330
00:14:26,000 --> 00:14:28,000
还是说虽然用户有这个需求

331
00:14:28,000 --> 00:14:30,000
但是这样做是错的呢

332
00:14:30,000 --> 00:14:31,000
那我可以说

333
00:14:31,000 --> 00:14:35,000
其实这就好像怎么说花园里面的草坪

334
00:14:35,000 --> 00:14:41,000
你说虽然用户从 A 点走到 B 点

335
00:14:41,000 --> 00:14:43,000
直接穿过草坪是最方便的

336
00:14:43,000 --> 00:14:46,000
但是我就不要这样修路

337
00:14:46,000 --> 00:14:49,000
因为那样会破坏草坪的整个设计或者是美观

338
00:14:49,000 --> 00:14:50,000
你也可以说

339
00:14:50,000 --> 00:14:52,000
虽然这样设计看起来是横平竖直的

340
00:14:52,000 --> 00:14:55,000
但是会使得用户从 A 点到 B 点

341
00:14:55,000 --> 00:14:57,000
不得不绕一段弯路

342
00:14:57,000 --> 00:14:59,000
他有可能会去踩草坪

343
00:14:59,000 --> 00:15:01,000
这跟专制没什么关系吧

344
00:15:01,000 --> 00:15:02,000
这只是一种就是

345
00:15:02,000 --> 00:15:07,000
我愿意把我的这一套设计哲学放在我的软件仓库里面

346
00:15:07,000 --> 00:15:11,000
或者说施加在我的软件仓库上面

347
00:15:11,000 --> 00:15:13,000
你不爱用可以别用啊

348
00:15:13,000 --> 00:15:14,000
你不想进这花园可以别进啊

349
00:15:14,000 --> 00:15:16,000
这跟独裁没什么关系吧

350
00:15:16,000 --> 00:15:20,000
但问题是说你这样限制了之后你得到了什么呢

351
00:15:20,000 --> 00:15:21,000
我得到了

352
00:15:21,000 --> 00:15:24,000
你认为的美观对吧

353
00:15:24,000 --> 00:15:25,000
对啊

354
00:15:25,000 --> 00:15:27,000
如果我是一个园林设计者的话

355
00:15:27,000 --> 00:15:31,000
我希望我的游园客人来欣赏园林

356
00:15:31,000 --> 00:15:33,000
或者说使用我的园林在我园里面玩

357
00:15:33,000 --> 00:15:35,000
那我不希望他们踩草坪

358
00:15:35,000 --> 00:15:36,000
这难道不是对的吗

359
00:15:36,000 --> 00:15:38,000
所以我觉得这里要讲

360
00:15:38,000 --> 00:15:41,000
我就是这个以前也很多人引用的那个故事啊

361
00:15:41,000 --> 00:15:44,000
说这个迪斯尼的公园里面怎么修草坪

362
00:15:44,000 --> 00:15:45,000
先把草坪铺上

363
00:15:45,000 --> 00:15:47,000
然后让游客随便进去踩

364
00:15:47,000 --> 00:15:50,000
然后踩过一段时间之后看哪个地方的脚印多

365
00:15:50,000 --> 00:15:52,000
就在那边挖一条路

366
00:15:52,000 --> 00:15:53,000
修一条路对

367
00:15:53,000 --> 00:15:54,000
这个我也听过

368
00:15:54,000 --> 00:15:59,000
但这是一种没有设计的设计

369
00:15:59,000 --> 00:16:01,000
就是无微而至嘛

370
00:16:01,000 --> 00:16:02,000
随机应变设计嘛

371
00:16:02,000 --> 00:16:09,000
但我就想要修一个像法尔赛公一样的横屏竖直的草坪

372
00:16:09,000 --> 00:16:11,000
那这套方法就行不通了呀

373
00:16:11,000 --> 00:16:14,000
所以我说我就是要这么任性的

374
00:16:14,000 --> 00:16:15,000
对啊

375
00:16:15,000 --> 00:16:16,000
我也不知道

376
00:16:16,000 --> 00:16:19,000
我觉得苹果是一个比较控制恶心的公司

377
00:16:19,000 --> 00:16:21,000
但是起码它现在退下了

378
00:16:21,000 --> 00:16:23,000
它已经取消了两个决定

379
00:16:23,000 --> 00:16:24,000
因为这个

380
00:16:24,000 --> 00:16:27,000
因为其实你从取舍利益的角度来讲

381
00:16:27,000 --> 00:16:29,000
确实是真的很不值得

382
00:16:29,000 --> 00:16:31,000
因为首先这个 today view 这个东西

383
00:16:31,000 --> 00:16:33,000
本来就是一个生造出来的一个功能

384
00:16:33,000 --> 00:16:35,000
然后真正有没有多少用户需求

385
00:16:35,000 --> 00:16:36,000
这个很难讲

386
00:16:36,000 --> 00:16:39,000
而且其实按照我自己的观察来看

387
00:16:39,000 --> 00:16:41,000
完全意义的验证

388
00:16:41,000 --> 00:16:44,000
按照你刚才讲的那种字面上的 today view 的东西

389
00:16:44,000 --> 00:16:46,000
其实我是很少去用它的

390
00:16:46,000 --> 00:16:47,000
但是如果有一个什么小工具

391
00:16:47,000 --> 00:16:49,000
我现在有装一个小工具在里面

392
00:16:49,000 --> 00:16:51,000
但是我还要经常去看它

393
00:16:51,000 --> 00:16:53,000
所以这里面就是说

394
00:16:53,000 --> 00:16:55,000
你可以去生造出来一个东西

395
00:16:55,000 --> 00:16:57,000
但是它是不是真的符合用户的需求

396
00:16:57,000 --> 00:16:59,000
这个是很难说的

397
00:16:59,000 --> 00:17:01,000
所以我觉得面对这种情况的话

398
00:17:01,000 --> 00:17:05,000
还是给开发者和用户一个选择的自由

399
00:17:05,000 --> 00:17:07,000
我觉得这种方式是更好的

400
00:17:07,000 --> 00:17:12,000
对 我觉得其实更加合理的一个选择

401
00:17:12,000 --> 00:17:13,000
是开放那个

402
00:17:13,000 --> 00:17:17,000
从下面往上拉的那个

403
00:17:17,000 --> 00:17:19,000
叫什么 control sensor 的

404
00:17:19,000 --> 00:17:20,000
对

405
00:17:20,000 --> 00:17:21,000
的 widget 开发

406
00:17:21,000 --> 00:17:23,000
因为计算器

407
00:17:23,000 --> 00:17:25,000
如果你可以替换那个默认计算器的话

408
00:17:25,000 --> 00:17:27,000
那我觉得我没有任何话说了

409
00:17:27,000 --> 00:17:30,000
因为那个地方本来就是让你干那个事情用的

410
00:17:30,000 --> 00:17:33,000
其实它有点性质不一样

411
00:17:33,000 --> 00:17:34,000
就看 control sensor 里面

412
00:17:34,000 --> 00:17:37,000
就你拉下来它比如四个快捷启动

413
00:17:37,000 --> 00:17:41,000
它默认的是电筒

414
00:17:41,000 --> 00:17:43,000
然后这个什么

415
00:17:43,000 --> 00:17:45,000
是这个闹钟

416
00:17:45,000 --> 00:17:46,000
手边没有对

417
00:17:46,000 --> 00:17:48,000
然后是计算器

418
00:17:48,000 --> 00:17:49,000
然后照相机

419
00:17:49,000 --> 00:17:52,000
其实这里就有一些奇怪的

420
00:17:52,000 --> 00:17:54,000
就是说

421
00:17:54,000 --> 00:17:57,000
为什么会把计算器放在那里

422
00:17:57,000 --> 00:18:01,000
因为计算的确是一个需要便捷使用的功能

423
00:18:01,000 --> 00:18:04,000
美国人总是要算小费算账单什么的

424
00:18:04,000 --> 00:18:06,000
其实这里就出现了一个问题了

425
00:18:06,000 --> 00:18:08,000
这四个钮是说

426
00:18:08,000 --> 00:18:10,000
它按照某一个方式

427
00:18:10,000 --> 00:18:11,000
要么是数据统计

428
00:18:11,000 --> 00:18:12,000
要么是拍脑袋拍出来

429
00:18:12,000 --> 00:18:14,000
这个四个是应该会比较常用的功能

430
00:18:14,000 --> 00:18:16,000
但是

431
00:18:16,000 --> 00:18:19,000
真的这四个功能是所有人都最常用的四个功能吗

432
00:18:19,000 --> 00:18:20,000
这个也很难讲对不对

433
00:18:20,000 --> 00:18:26,000
这就是我说为什么应该开放这个东西的开发 API

434
00:18:26,000 --> 00:18:29,000
如果我可以自由定义这四个快捷方式的话

435
00:18:29,000 --> 00:18:34,000
today view 不就可以去服务其本该服务的东西了吗

436
00:18:34,000 --> 00:18:35,000
所以这里来讲

437
00:18:35,000 --> 00:18:36,000
还有点不一样

438
00:18:36,000 --> 00:18:38,000
像 peacock 那件事情里面

439
00:18:38,000 --> 00:18:42,000
它是等于是在 today view 里面直接做了一个计算器

440
00:18:42,000 --> 00:18:44,000
你甚至都不需要单独启动它

441
00:18:44,000 --> 00:18:47,000
但是如果你用这个 control center 下面那四个钮

442
00:18:47,000 --> 00:18:50,000
你其实还是要启动那个程序还是要跳一下的

443
00:18:50,000 --> 00:18:52,000
你用完之后还得再跳回来

444
00:18:52,000 --> 00:18:54,000
所以其实你说那下面

445
00:18:54,000 --> 00:18:56,000
control center 那四个快捷方菜单

446
00:18:56,000 --> 00:18:58,000
对应的那个 APP 其实应该是那个叫什么

447
00:18:58,000 --> 00:19:01,000
launch pro 还是 launch center

448
00:19:01,000 --> 00:19:05,000
它也在 today view 里面做了这种快速启动的一个钮

449
00:19:05,000 --> 00:19:07,000
就是它在里面放了几个那种

450
00:19:07,000 --> 00:19:09,000
你自定义的这个 icon

451
00:19:09,000 --> 00:19:12,000
然后你拉下来之后就把它点进去

452
00:19:12,000 --> 00:19:15,000
但是从这种角度来讲

453
00:19:15,000 --> 00:19:19,000
你说其实你它苹果应该开发那四个其实是满足

454
00:19:19,000 --> 00:19:22,000
刚才讲那个 launch pro 还是 launch center 那个软件

455
00:19:22,000 --> 00:19:25,000
对 today view 的滥用的问题

456
00:19:25,000 --> 00:19:28,000
但是你就是像 peacock 这种

457
00:19:28,000 --> 00:19:31,000
它甚至都不需要启动别的地方去

458
00:19:31,000 --> 00:19:32,000
其实还是很难讲的

459
00:19:32,000 --> 00:19:36,000
或者说就是人们就是需要

460
00:19:36,000 --> 00:19:40,000
因为这个 iOS 这个是一个单一 APP

461
00:19:40,000 --> 00:19:43,000
就是在 foreground 这种情况的这种前提下

462
00:19:43,000 --> 00:19:46,000
你怎么去减少这个 APP 间切换的成本

463
00:19:46,000 --> 00:19:51,000
today view 可能给出了一个可以用的地方

464
00:19:51,000 --> 00:19:53,000
但是它对现在对方的限制还比较死

465
00:19:53,000 --> 00:19:55,000
那你不如再加一个什么

466
00:19:55,000 --> 00:19:57,000
像现在打开 today view 不是上面有三个 type 吗

467
00:19:57,000 --> 00:19:59,000
today view notification

468
00:19:59,000 --> 00:20:01,000
那你再加一旁边给一个什么

469
00:20:01,000 --> 00:20:02,000
什么 dashboard

470
00:20:02,000 --> 00:20:04,000
因为这个在 iOS 上也有这个概念

471
00:20:04,000 --> 00:20:06,000
你在里面搞了的话

472
00:20:06,000 --> 00:20:08,000
可以自己加一些随意

473
00:20:08,000 --> 00:20:11,000
就是要求没有那么限制严格的东西

474
00:20:11,000 --> 00:20:14,000
也其实也是一个不错的思路我觉得

475
00:20:14,000 --> 00:20:19,000
所以我觉得归根结底还是一个翘逐死走

476
00:20:19,000 --> 00:20:24,000
就是苹果这一套死板管制的哲学没有贯彻下来

477
00:20:24,000 --> 00:20:29,000
我觉得其实你是希望苹果变得更像安卓不是吗

478
00:20:29,000 --> 00:20:31,000
就是更松散一些

479
00:20:31,000 --> 00:20:36,000
就是让软件按照用户的需求去生长出来

480
00:20:36,000 --> 00:20:38,000
而不是一上来做一个 grand design

481
00:20:38,000 --> 00:20:43,000
但实际上 iOS 这么几年的演化

482
00:20:43,000 --> 00:20:46,000
确实是照在这条路上走下去的

483
00:20:46,000 --> 00:20:50,000
很多东西它都不是说苹果自己拍脑袋想出来的一个方案

484
00:20:50,000 --> 00:20:52,000
而是说看到别的平台用户用得很好

485
00:20:52,000 --> 00:20:55,000
然后把这个东西借鉴过来

486
00:20:55,000 --> 00:20:56,000
我都不说

487
00:20:56,000 --> 00:20:58,000
甚至是什么官方鸭死铜人

488
00:20:58,000 --> 00:21:01,000
有些第三方做出来然后它自己盗用

489
00:21:01,000 --> 00:21:05,000
我相信绝大多数软件都不是这么一个

490
00:21:05,000 --> 00:21:07,000
就起码针对最终用户的这种软件

491
00:21:07,000 --> 00:21:10,000
它都不是一个最终设计出来的东西

492
00:21:10,000 --> 00:21:13,000
而可能真的是要用户体验出来的

493
00:21:13,000 --> 00:21:14,000
对但这里面有个度的问题

494
00:21:14,000 --> 00:21:17,000
就是你在多大程度上让用户来使用导向

495
00:21:17,000 --> 00:21:20,000
你在多大程度上要让别人去采草品

496
00:21:20,000 --> 00:21:23,000
还是你完全不去预设

497
00:21:23,000 --> 00:21:26,000
就是你完全不去预设用户怎么从一点走到毕点

498
00:21:26,000 --> 00:21:30,000
和精确的设计出从一点走到毕点的每一步

499
00:21:30,000 --> 00:21:33,000
中间是有很大的回旋空间的

500
00:21:33,000 --> 00:21:35,000
就是一个灰色地带

501
00:21:35,000 --> 00:21:36,000
你对

502
00:21:36,000 --> 00:21:39,000
Anyway 这个问题太 IT 功劳了

503
00:21:39,000 --> 00:21:41,000
太 softcore 了我们不要再讨论了

504
00:21:41,000 --> 00:21:43,000
不过其实回到你刚才你讲的那一点

505
00:21:43,000 --> 00:21:46,000
就是你刚才也提到说你觉得最爽的

506
00:21:46,000 --> 00:21:48,000
就是苹果的工程团队带给你那些东西

507
00:21:48,000 --> 00:21:50,000
比如说像在去年 WWDC 上

508
00:21:50,000 --> 00:21:54,000
它展示的那些 API 那些地层技术上你很兴奋对吧

509
00:21:54,000 --> 00:21:57,000
但是你对审核这块其实完全不感冒

510
00:21:57,000 --> 00:22:01,000
因为首先第一个你并不是一个开发者

511
00:22:01,000 --> 00:22:04,000
你不需要去面对这个的审核不够的后果

512
00:22:04,000 --> 00:22:07,000
但我觉得这里我觉得正是刚才我们讨论那堆事情

513
00:22:07,000 --> 00:22:09,000
反映出来的一个结果

514
00:22:09,000 --> 00:22:12,000
就是说其实也大家都在这次

515
00:22:12,000 --> 00:22:13,000
持这么一个观点

516
00:22:13,000 --> 00:22:18,000
很多人工程团队给了开发者这么很爽的一个选择

517
00:22:18,000 --> 00:22:21,000
很爽的技术可以去玩

518
00:22:21,000 --> 00:22:22,000
或者说你叫炫技

519
00:22:22,000 --> 00:22:25,000
但是开发者花时间做出来之后

520
00:22:25,000 --> 00:22:27,000
然后审核队给人家拒了

521
00:22:27,000 --> 00:22:30,000
这个就是一个很恶劣的结果

522
00:22:30,000 --> 00:22:32,000
就是怎么左手打右手

523
00:22:32,000 --> 00:22:34,000
对而且会有寒蝉效应

524
00:22:34,000 --> 00:22:37,000
就会有懒得做了

525
00:22:37,000 --> 00:22:41,000
这个是会有很负面的影响

526
00:22:41,000 --> 00:22:42,000
包括舆论上也好

527
00:22:42,000 --> 00:22:44,000
包括对开发者心态上的影响也好

528
00:22:44,000 --> 00:22:51,000
然后现在很多批评苹果审核这一套东西的人

529
00:22:51,000 --> 00:22:53,000
就这么就有持这么一种观点

530
00:22:53,000 --> 00:22:56,000
就是在上一期我们大地公众也提到了

531
00:22:56,000 --> 00:22:58,000
就是说安卓现在已经越来越好用了

532
00:22:58,000 --> 00:22:59,000
对吧

533
00:22:59,000 --> 00:23:01,000
特别是在 5.0 之后

534
00:23:01,000 --> 00:23:02,000
我看到身边

535
00:23:02,000 --> 00:23:05,000
哪怕是很多这个之前的 LS 的死忠的用户

536
00:23:05,000 --> 00:23:09,000
都觉得这个确实真的做得不错

537
00:23:09,000 --> 00:23:11,000
然后我们又众所周知

538
00:23:11,000 --> 00:23:13,000
安卓是一个相对开放的系统

539
00:23:13,000 --> 00:23:16,000
就没有那么多条条观观的限制

540
00:23:16,000 --> 00:23:19,000
那这样的话苹果在这种情况下

541
00:23:19,000 --> 00:23:21,000
这样自己给自己打脸

542
00:23:21,000 --> 00:23:23,000
其实会造成

543
00:23:23,000 --> 00:23:27,000
某种程度上是有一个对开发者的驱动力

544
00:23:27,000 --> 00:23:28,000
让他去说

545
00:23:28,000 --> 00:23:30,000
那我不要在苹果在那边开发好了

546
00:23:30,000 --> 00:23:32,000
我去给安卓开发

547
00:23:32,000 --> 00:23:34,000
不用受这么多气对吧

548
00:23:34,000 --> 00:23:35,000
对

549
00:23:35,000 --> 00:23:37,000
所以其实这个对他的生态来讲

550
00:23:37,000 --> 00:23:39,000
其实叫什么自毁

551
00:23:39,000 --> 00:23:40,000
基石自毁

552
00:23:40,000 --> 00:23:42,000
有个什么词语来的

553
00:23:42,000 --> 00:23:44,000
Anyway 还是不要讲了

554
00:23:44,000 --> 00:23:46,000
免得又被挑错了

555
00:23:46,000 --> 00:23:47,000
对

556
00:23:47,000 --> 00:23:49,000
What

557
00:23:49,000 --> 00:23:51,000
好吧有这么一个成语吗

558
00:23:51,000 --> 00:23:53,000
有一个什么

559
00:23:53,000 --> 00:23:55,000
自废无功

560
00:23:55,000 --> 00:23:57,000
之类的肯定是有一个什么的

561
00:23:57,000 --> 00:23:58,000
但我现在想不起来了

562
00:23:58,000 --> 00:23:59,000
Anyway 下一个

563
00:23:59,000 --> 00:24:00,000
不重要

564
00:24:00,000 --> 00:24:02,000
但我觉得至少从我的角度来讲

565
00:24:02,000 --> 00:24:05,000
如果我真的不要去做 IOS 的话

566
00:24:05,000 --> 00:24:07,000
我宁可试一试 Windows Phone

567
00:24:07,000 --> 00:24:10,000
因为 Java 太恶心

568
00:24:10,000 --> 00:24:14,000
在 GoLang 可以完全写安卓之前

569
00:24:14,000 --> 00:24:16,000
我应该是绝对不会去碰安卓

570
00:24:16,000 --> 00:24:18,000
你可以试试用 Scala 写安卓

571
00:24:18,000 --> 00:24:20,000
Closure

572
00:24:20,000 --> 00:24:22,000
这个过程应该是蛮酸酸的

573
00:24:22,000 --> 00:24:24,000
算了吧

574
00:24:24,000 --> 00:24:25,000
好吧

575
00:24:25,000 --> 00:24:27,000
还是算了吧

576
00:24:27,000 --> 00:24:29,000
Windows Phone 你可以用 C-Shop 写对吧

577
00:24:29,000 --> 00:24:31,000
对啊很爽

578
00:24:31,000 --> 00:24:32,000
对啊

579
00:24:32,000 --> 00:24:33,000
那如果这样的话

580
00:24:33,000 --> 00:24:34,000
其实还可以建议你试一下

581
00:24:34,000 --> 00:24:36,000
因为据说

582
00:24:36,000 --> 00:24:39,000
微软也在推 Windows Phone 的应用

583
00:24:39,000 --> 00:24:41,000
他们最缺的就是应用

584
00:24:41,000 --> 00:24:43,000
然后说如果你这个应用做得好

585
00:24:43,000 --> 00:24:45,000
他还有钱奖励哦

586
00:24:45,000 --> 00:24:50,000
但 Again 我还是不会去做一些最终用户用的东西

587
00:24:50,000 --> 00:24:52,000
就基本上还是会

588
00:24:52,000 --> 00:24:54,000
不知道我究竟做过什么

589
00:24:54,000 --> 00:24:55,000
其实也没有做过什么

590
00:24:55,000 --> 00:24:57,000
就只是因为公司的原因

591
00:24:57,000 --> 00:24:58,000
而且我已经换了公司了

592
00:24:58,000 --> 00:25:01,000
可能也不需要再汤这汤浑水了

593
00:25:01,000 --> 00:25:04,000
所以你还是打算安安静静的

594
00:25:04,000 --> 00:25:07,000
做一个高冷的企业开发者

595
00:25:07,000 --> 00:25:09,000
很难说

596
00:25:09,000 --> 00:25:10,000
Anyway

597
00:25:10,000 --> 00:25:13,000
反正我正式工作是

598
00:25:13,000 --> 00:25:15,000
应该在这一期播出的时候

599
00:25:15,000 --> 00:25:18,000
我已经上了三天班了

600
00:25:18,000 --> 00:25:20,000
所以

601
00:25:20,000 --> 00:25:23,000
在下一期节目的时候我们应该可以

602
00:25:23,000 --> 00:25:25,000
至少我会对自己会做什么

603
00:25:25,000 --> 00:25:26,000
有一个清晰的了解

604
00:25:26,000 --> 00:25:28,000
以及那个时候就可以知道

605
00:25:28,000 --> 00:25:30,000
自己是不是还继续要在

606
00:25:30,000 --> 00:25:36,000
异动开发这一块有什么建筑或者是发展

607
00:25:36,000 --> 00:25:37,000
好吧

608
00:25:37,000 --> 00:25:39,000
下次再说吧

609
00:25:40,000 --> 00:25:45,000
然后还有一位听众提到我们

610
00:25:45,000 --> 00:25:48,000
作为两个 Pythonista

611
00:25:48,000 --> 00:25:53,000
Pythonista 的服务应该是 Pythonisti

612
00:25:53,000 --> 00:25:54,000
对

613
00:25:54,000 --> 00:25:57,000
因为我刚刚从意大利回来

614
00:25:57,000 --> 00:26:00,000
然后非常冷

615
00:26:00,000 --> 00:26:06,000
然后在和朋友们聊天的时候说什么

616
00:26:06,000 --> 00:26:10,000
我们非常注重意大利

617
00:26:10,000 --> 00:26:12,000
德国人非常注重

618
00:26:12,000 --> 00:26:13,000
在说外来语的时候

619
00:26:13,000 --> 00:26:17,000
一定要按照外来语的正确语法去变革

620
00:26:17,000 --> 00:26:19,000
比如说 Espresso

621
00:26:19,000 --> 00:26:21,000
你的副数不是 Espresso

622
00:26:21,000 --> 00:26:23,000
而是 Espressi

623
00:26:23,000 --> 00:26:26,000
所以你不能说我要两杯 Espresso

624
00:26:26,000 --> 00:26:28,000
而要说我要两杯 Espressi

625
00:26:28,000 --> 00:26:30,000
然后意大利人咬着头说

626
00:26:30,000 --> 00:26:31,000
No

627
00:26:31,000 --> 00:26:34,000
如果你在意大利之外的地方这么说

628
00:26:34,000 --> 00:26:36,000
可能是非常正确

629
00:26:36,000 --> 00:26:38,000
高逼格的

630
00:26:38,000 --> 00:26:40,000
但在意大利你说两杯咖啡就行了

631
00:26:40,000 --> 00:26:43,000
因为意大利人咖啡默认就是 Espresso

632
00:26:43,000 --> 00:26:45,000
然后 Pythonista

633
00:26:45,000 --> 00:26:47,000
因为它是意大利语

634
00:26:47,000 --> 00:26:50,000
所以它的副数应该是 Pythonisti

635
00:26:50,000 --> 00:26:53,000
这里又给科普了

636
00:26:53,000 --> 00:26:55,000
这个其实我在诸如此类的

637
00:26:55,000 --> 00:26:57,000
经常有处过几次查的

638
00:26:57,000 --> 00:26:59,000
就是经常会有

639
00:26:59,000 --> 00:27:02,000
应该是去年还是前年的时候吧

640
00:27:02,000 --> 00:27:05,000
有人在直播上去哪里去招 Python 程序学

641
00:27:05,000 --> 00:27:08,000
他说他自己是他们要招 Python 呢

642
00:27:08,000 --> 00:27:09,000
Python 呢

643
00:27:09,000 --> 00:27:10,000
我们之前吐槽过

644
00:27:10,000 --> 00:27:13,000
但没办法中国的英语教育

645
00:27:13,000 --> 00:27:15,000
可能跟中国的英语教育也扯不上不过去

646
00:27:15,000 --> 00:27:17,000
你没有在文化圈子里面

647
00:27:17,000 --> 00:27:20,000
我觉得这个就是很奇怪的地方

648
00:27:20,000 --> 00:27:22,000
如果你真的是要招

649
00:27:22,000 --> 00:27:25,000
所谓 HardcorePython 的

650
00:27:25,000 --> 00:27:27,000
对你至少应该有点文化是吧

651
00:27:27,000 --> 00:27:30,000
对你至少要知道 Jargon 是什么对吧

652
00:27:30,000 --> 00:27:32,000
然后如果你知道 Python 哪

653
00:27:32,000 --> 00:27:34,000
默认已经 Fail

654
00:27:34,000 --> 00:27:35,000
对

655
00:27:35,000 --> 00:27:38,000
就好像 Ruby 也 Fail

656
00:27:38,000 --> 00:27:40,000
Ruby 什么 Rubyist

657
00:27:40,000 --> 00:27:41,000
对

658
00:27:41,000 --> 00:27:42,000
那个比较好

659
00:27:42,000 --> 00:27:44,000
那个比较常见

660
00:27:44,000 --> 00:27:46,000
因为 Y 结尾的一般都会这么变

661
00:27:46,000 --> 00:27:48,000
但是像 Python 这种情况很多人

662
00:27:48,000 --> 00:27:50,000
Python 也是 Y 结尾

663
00:27:50,000 --> 00:27:52,000
Oh by the sorry

664
00:27:52,000 --> 00:27:53,000
我二了没什么

665
00:27:53,000 --> 00:27:55,000
我刚才想到别的地方去了

666
00:27:55,000 --> 00:27:57,000
就很容易忘文生意

667
00:27:57,000 --> 00:27:59,000
就跟我们看中文一样嘛

668
00:27:59,000 --> 00:28:00,000
糖木结实

669
00:28:00,000 --> 00:28:01,000
明明就是 N 结尾嘛

670
00:28:01,000 --> 00:28:03,000
加一 N 多简单

671
00:28:03,000 --> 00:28:05,000
OK

672
00:28:05,000 --> 00:28:07,000
还是没文化关键是

673
00:28:07,000 --> 00:28:09,000
对然后刚才说什么来着

674
00:28:09,000 --> 00:28:10,000
Pythonista

675
00:28:10,000 --> 00:28:11,000
我们作为两个 Pythonisti

676
00:28:11,000 --> 00:28:12,000
居然不知道

677
00:28:12,000 --> 00:28:14,000
居然没有提到 Python 的 packaging

678
00:28:14,000 --> 00:28:16,000
就是 Conda 这套东西

679
00:28:16,000 --> 00:28:18,000
你有什么说的吗

680
00:28:18,000 --> 00:28:20,000
我是真的不知道

681
00:28:20,000 --> 00:28:21,000
What

682
00:28:21,000 --> 00:28:23,000
你不知道 Anaconda 吗

683
00:28:23,000 --> 00:28:26,000
它是之前很早就有的吗

684
00:28:26,000 --> 00:28:27,000
还是

685
00:28:27,000 --> 00:28:29,000
Anaconda 有一阵了吧

686
00:28:29,000 --> 00:28:30,000
我之前不是提起来

687
00:28:30,000 --> 00:28:32,000
我在折腾 PyQt 吗

688
00:28:33,000 --> 00:28:34,000
什么 PyQt

689
00:28:34,000 --> 00:28:37,000
就是 iPython Qt console

690
00:28:37,000 --> 00:28:39,000
其实部分原因就是因为

691
00:28:39,000 --> 00:28:41,000
我想要在电脑上

692
00:28:41,000 --> 00:28:42,000
不装 Anaconda

693
00:28:42,000 --> 00:28:46,000
搞出一个 iPython 的 Qt console

694
00:28:46,000 --> 00:28:49,000
因为 Anaconda 实际上是一个

695
00:28:50,000 --> 00:28:51,000
怎么说呢

696
00:28:51,000 --> 00:28:52,000
小白

697
00:28:52,000 --> 00:28:56,000
给小白用户们使用的 Python distribution

698
00:28:56,000 --> 00:28:58,000
比如说数据分析师

699
00:28:58,000 --> 00:29:00,000
或者是尤其是在

700
00:29:00,000 --> 00:29:04,000
就是非 CDS 人士用 Python 的

701
00:29:04,000 --> 00:29:06,000
就是一些不得不写程序

702
00:29:06,000 --> 00:29:08,000
但是没有系统的学过

703
00:29:08,000 --> 00:29:09,000
怎么写程序的人

704
00:29:09,000 --> 00:29:10,000
比如说什么

705
00:29:10,000 --> 00:29:12,000
搞生物的

706
00:29:12,000 --> 00:29:13,000
要处理细胞图像

707
00:29:13,000 --> 00:29:16,000
或者是搞化学的

708
00:29:16,000 --> 00:29:17,000
要做一些化学计算

709
00:29:17,000 --> 00:29:19,000
因为 Python 毕竟是一个

710
00:29:19,000 --> 00:29:20,000
在科学计算领域

711
00:29:20,000 --> 00:29:24,000
非常受欢迎的主流语言

712
00:29:24,000 --> 00:29:25,000
教学语言吗

713
00:29:25,000 --> 00:29:27,000
对不只是教学

714
00:29:27,000 --> 00:29:28,000
就是在科研领域

715
00:29:28,000 --> 00:29:29,000
教学

716
00:29:29,000 --> 00:29:30,000
Glu-Line

717
00:29:30,000 --> 00:29:32,000
这个也不能算教学语言

718
00:29:32,000 --> 00:29:34,000
它是正儿八经的

719
00:29:34,000 --> 00:29:35,000
很多科研人员的

720
00:29:35,000 --> 00:29:36,000
第一生产力语言

721
00:29:36,000 --> 00:29:37,000
这个我知道

722
00:29:37,000 --> 00:29:39,000
像 Numeric Py

723
00:29:39,000 --> 00:29:41,000
它也是这种场景下

724
00:29:41,000 --> 00:29:42,000
应用出来的结果

725
00:29:42,000 --> 00:29:43,000
您的意思是

726
00:29:43,000 --> 00:29:45,000
它使用 Python 作为

727
00:29:45,000 --> 00:29:47,000
操作界面

728
00:29:47,000 --> 00:29:48,000
而使用

729
00:29:48,000 --> 00:29:51,000
而让开发者可以用到数学库

730
00:29:51,000 --> 00:29:53,000
用到数学库

731
00:29:53,000 --> 00:29:54,000
对啊

732
00:29:54,000 --> 00:29:56,000
在这个意义上的胶水是吧

733
00:29:56,000 --> 00:29:58,000
其实这么说也不对

734
00:29:58,000 --> 00:29:59,000
胶水应该是

735
00:29:59,000 --> 00:30:00,000
联合各不同组件

736
00:30:00,000 --> 00:30:01,000
不 anyway

737
00:30:01,000 --> 00:30:03,000
就是说他们用它

738
00:30:03,000 --> 00:30:05,000
因为它语法比较简单

739
00:30:05,000 --> 00:30:07,000
然后相对直观一点

740
00:30:07,000 --> 00:30:08,000
然后去用到一些什么

741
00:30:08,000 --> 00:30:09,000
第三方的库

742
00:30:09,000 --> 00:30:10,000
去做一些科学计算

743
00:30:10,000 --> 00:30:13,000
这些我是有所耳闻的

744
00:30:13,000 --> 00:30:14,000
不过我现在反应过来

745
00:30:14,000 --> 00:30:17,000
我怎么没有听说过这个东西了

746
00:30:17,000 --> 00:30:18,000
因为你不是搞这个

747
00:30:18,000 --> 00:30:20,000
不是你看你不像小白用户吗

748
00:30:21,000 --> 00:30:23,000
你刚才说他小白用户用到了

749
00:30:23,000 --> 00:30:24,000
那我不是

750
00:30:24,000 --> 00:30:25,000
对

751
00:30:25,000 --> 00:30:27,000
安奈科德

752
00:30:27,000 --> 00:30:28,000
就是大嘛

753
00:30:28,000 --> 00:30:30,000
或者比较大的蟒蛇

754
00:30:30,000 --> 00:30:31,000
就是安奈科德

755
00:30:31,000 --> 00:30:32,000
应该没错吧

756
00:30:32,000 --> 00:30:33,000
安奈科德这个词应该是蟒蛇意思吧

757
00:30:33,000 --> 00:30:35,000
别要给人吐槽

758
00:30:35,000 --> 00:30:36,000
我不知道啊

759
00:30:36,000 --> 00:30:37,000
但我觉得安奈科德应该是

760
00:30:37,000 --> 00:30:38,000
应该没错

761
00:30:38,000 --> 00:30:39,000
某种蟒蛇

762
00:30:39,000 --> 00:30:42,000
然后它就是一个 Python 的 Distribution

763
00:30:42,000 --> 00:30:46,000
它等于把 Python 包装在一个安装包里面

764
00:30:46,000 --> 00:30:47,000
然后如果你是做

765
00:30:47,000 --> 00:30:49,000
你是要学

766
00:30:49,000 --> 00:30:50,000
比如说图像处理

767
00:30:50,000 --> 00:30:54,000
或者是你要搞什么化学生物学方面的计算

768
00:30:54,000 --> 00:30:55,000
甚至物理学有用用吧

769
00:30:55,000 --> 00:30:56,000
我不知道

770
00:30:56,000 --> 00:30:58,000
然后你可以安装安奈科德

771
00:30:58,000 --> 00:31:00,000
然后啪一下你什么都有

772
00:31:00,000 --> 00:31:03,000
什么 QDiPython 的笔记本

773
00:31:03,000 --> 00:31:05,000
Consul

774
00:31:05,000 --> 00:31:06,000
NumPy

775
00:31:06,000 --> 00:31:07,000
全都有

776
00:31:07,000 --> 00:31:14,000
然后安装和删除这些 Python 的包也通过

777
00:31:14,000 --> 00:31:16,000
也都是通过一个图形界面

778
00:31:16,000 --> 00:31:17,000
就有点像 Sigwin

779
00:31:17,000 --> 00:31:19,000
大概那种感觉吧

780
00:31:19,000 --> 00:31:22,000
然后所谓 Conda 就是一个

781
00:31:22,000 --> 00:31:26,000
就是你怎么把自己的 package

782
00:31:26,000 --> 00:31:29,000
打包给安奈科德用

783
00:31:29,000 --> 00:31:30,000
是这么一套东西

784
00:31:30,000 --> 00:31:31,000
OK

785
00:31:31,000 --> 00:31:34,000
对它几乎是一个 Python 的平行宇宙吧

786
00:31:34,000 --> 00:31:40,000
所以其实就是说这种专业开发者肯定是不会接触到的了

787
00:31:40,000 --> 00:31:41,000
也不一定吧

788
00:31:41,000 --> 00:31:42,000
因为安奈科德里面的包

789
00:31:42,000 --> 00:31:49,000
其实也都是几乎所有的常见的 Python 包安奈科德里面都有

790
00:31:49,000 --> 00:31:51,000
我甚至怀疑安奈科德其实就是

791
00:31:51,000 --> 00:31:56,000
定期会把 QIPI 上面的包全都包一遍

792
00:31:56,000 --> 00:32:00,000
然后装一个包装成安奈科德的格式

793
00:32:00,000 --> 00:32:04,000
然后给科学技术领域的用户用

794
00:32:04,000 --> 00:32:07,000
因为他们根本不关心我们这些工程师在干嘛

795
00:32:07,000 --> 00:32:10,000
他只关心造出来的东西他能用就行了

796
00:32:10,000 --> 00:32:14,000
然后你只要提供一个傻瓜化男装界面就蛮好的

797
00:32:14,000 --> 00:32:18,000
说到只有一个办法

798
00:32:18,000 --> 00:32:19,000
对

799
00:32:19,000 --> 00:32:21,000
那是另一个办法

800
00:32:21,000 --> 00:32:25,000
接着有文化一点

801
00:32:25,000 --> 00:32:29,000
安奈科德中文叫做森林的森

802
00:32:29,000 --> 00:32:31,000
森吗

803
00:32:31,000 --> 00:32:32,000
不是,森染

804
00:32:32,000 --> 00:32:36,000
虫之旁一个再不要上面那一横

805
00:32:36,000 --> 00:32:38,000
就是再见的再不要上面那一横

806
00:32:38,000 --> 00:32:41,000
然后这个叫做

807
00:32:41,000 --> 00:32:44,000
产于热带南美洲的大蟒蛇

808
00:32:44,000 --> 00:32:47,000
可用身体嚼死猎物

809
00:32:47,000 --> 00:32:49,000
亦称大水蟒

810
00:32:49,000 --> 00:32:50,000
OK

811
00:32:50,000 --> 00:32:52,000
知道了又学了一个词

812
00:32:52,000 --> 00:32:59,000
我觉得好像之前看过一部恐怖片

813
00:32:59,000 --> 00:33:00,000
是不是恐怖片

814
00:33:00,000 --> 00:33:01,000
精琐片

815
00:33:01,000 --> 00:33:02,000
Thriller 吧

816
00:33:02,000 --> 00:33:05,000
就是讲有一道非常非常大的蟒蛇

817
00:33:05,000 --> 00:33:07,000
然后怎么搞人的是

818
00:33:07,000 --> 00:33:09,000
90 年代的片子吧

819
00:33:09,000 --> 00:33:13,000
因为那个时候有部什么

820
00:33:13,000 --> 00:33:17,000
那个讲恶语的恐怖片很卖座

821
00:33:17,000 --> 00:33:19,000
然后他们就拍了一个什么

822
00:33:19,000 --> 00:33:22,000
搞不好叫什么狂妄之灾这么一部电影

823
00:33:22,000 --> 00:33:23,000
然后

824
00:33:23,000 --> 00:33:24,000
起名字

825
00:33:24,000 --> 00:33:25,000
对

826
00:33:25,000 --> 00:33:28,000
这一定是台湾或者香港人翻译的

827
00:33:28,000 --> 00:33:30,000
对然后片名应该就像安奈科德

828
00:33:30,000 --> 00:33:31,000
OK

829
00:33:31,000 --> 00:33:33,000
因为不重要

830
00:33:33,000 --> 00:33:37,000
还有一个叫做 Nix 的东西其实我也没有用过

831
00:33:37,000 --> 00:33:39,000
没有提说过准确来说

832
00:33:39,000 --> 00:33:41,000
Nix 不就是 NixOS 的那个吗

833
00:33:41,000 --> 00:33:43,000
不不这个是 Python 的 Nix

834
00:33:43,000 --> 00:33:46,000
刚好我们提到另外一个 Nix 是另外一个东西

835
00:33:46,000 --> 00:33:48,000
这个那这个我也不知道

836
00:33:48,000 --> 00:33:52,000
我一开始以为它就是那个 NixOS 的 Nix

837
00:33:52,000 --> 00:33:54,000
所以

838
00:33:54,000 --> 00:33:56,000
怎么说呢

839
00:33:56,000 --> 00:33:57,000
莽然无知啊

840
00:33:57,000 --> 00:33:58,000
我们

841
00:33:58,000 --> 00:33:59,000
这不怪咱们吧

842
00:33:59,000 --> 00:34:00,000
我觉得这个

843
00:34:00,000 --> 00:34:03,000
他都这个已经四分五裂成这样了

844
00:34:03,000 --> 00:34:05,000
我也没什么好说的了

845
00:34:06,000 --> 00:34:07,000
LadyB

846
00:34:07,000 --> 00:34:08,000
对

847
00:34:08,000 --> 00:34:10,000
反正我是不怎么用了

848
00:34:10,000 --> 00:34:11,000
随便吧

849
00:34:11,000 --> 00:34:13,000
对安奈科德我其实我装过一次

850
00:34:13,000 --> 00:34:15,000
但是我不记得为什么了

851
00:34:15,000 --> 00:34:17,000
我用了大概两三天就把它删了

852
00:34:17,000 --> 00:34:18,000
好像是

853
00:34:18,000 --> 00:34:19,000
有一个我

854
00:34:19,000 --> 00:34:22,000
我不能理解还是不能接受的

855
00:34:23,000 --> 00:34:24,000
ShowStop

856
00:34:24,000 --> 00:34:26,000
但我不确定了

857
00:34:26,000 --> 00:34:29,000
是因为他装了之后 SystemPython 就

858
00:34:29,000 --> 00:34:32,000
就坏了还是还是 SomehowSomeway

859
00:34:33,000 --> 00:34:34,000
有一个东西不能用

860
00:34:34,000 --> 00:34:37,000
因为我大概三年前用过一次

861
00:34:37,000 --> 00:34:39,000
对具体也不记得

862
00:34:40,000 --> 00:34:41,000
嗯

863
00:34:41,000 --> 00:34:43,000
可以过吧

864
00:34:43,000 --> 00:34:44,000
过

865
00:34:46,000 --> 00:34:47,000
还有什么没有什么

866
00:34:47,000 --> 00:34:50,000
对那另外一个 Feedback 就是我给

867
00:34:51,000 --> 00:34:56,000
Lav 写的邮件说我们能不能用 Stay Alive 作为我们的 SimP 赞啊

868
00:34:56,000 --> 00:34:57,000
然后

869
00:34:57,000 --> 00:34:59,000
对知道现在都没有人理我

870
00:35:00,000 --> 00:35:01,000
没有 Ack

871
00:35:01,000 --> 00:35:03,000
不知道我们会不会有听众在 Valve 工作呢

872
00:35:03,000 --> 00:35:06,000
Valve 应该有很多华人程序员的

873
00:35:06,000 --> 00:35:09,000
这个应该是他们的法务部门吧我觉得

874
00:35:09,000 --> 00:35:13,000
对但如果你能够 SomehowSomeway 接触到

875
00:35:13,000 --> 00:35:15,000
有内部人最好是吧

876
00:35:15,000 --> 00:35:19,000
对有知道我们这个问题能够由谁来解决

877
00:35:19,000 --> 00:35:21,000
能不能帮帮我们的忙

878
00:35:21,000 --> 00:35:23,000
跪下了跪下了

879
00:35:23,000 --> 00:35:24,000
对跪下了跪下了

880
00:35:24,000 --> 00:35:27,000
如果帮不了的话 I don't blame you

881
00:35:29,000 --> 00:35:31,000
对好吧

882
00:35:31,000 --> 00:35:33,000
Feedback 结束了

883
00:35:33,000 --> 00:35:36,000
接下来进入我们的当当当新闻会

884
00:35:37,000 --> 00:35:38,000
来吧

885
00:35:39,000 --> 00:35:43,000
对其实上一期 IT 工作也提到了就是

886
00:35:43,000 --> 00:35:47,000
Dr.Dops 这个这个在线杂志停刊

887
00:35:48,000 --> 00:35:50,000
当然他不是停刊了

888
00:35:50,000 --> 00:35:53,000
他只是把他只是不再更新了整个网站还是还是在那

889
00:35:54,000 --> 00:35:56,000
我当时停刊不就是这个意思吗

890
00:35:56,000 --> 00:35:59,000
停刊也有可能是整个网站要撤下来

891
00:35:59,000 --> 00:36:00,000
因为他后来不说

892
00:36:00,000 --> 00:36:03,000
你说这个停刊这个字可能是从传统杂志的

893
00:36:03,000 --> 00:36:05,000
这个来的一个概念吗

894
00:36:05,000 --> 00:36:07,000
就停止发行吗对吧

895
00:36:07,000 --> 00:36:10,000
但是你之前买过的旧的还在你家里

896
00:36:10,000 --> 00:36:11,000
好吧

897
00:36:11,000 --> 00:36:14,000
所以其实还是有点这个

898
00:36:14,000 --> 00:36:17,000
在这个语境下面其实还蛮好的

899
00:36:18,000 --> 00:36:22,000
对所以如果他真的整个站挂掉了

900
00:36:22,000 --> 00:36:25,000
或者是整个站停掉了应该叫关站是吧

901
00:36:25,000 --> 00:36:28,000
对就停刊这段蛮好的就是 stop publishing

902
00:36:28,000 --> 00:36:32,000
但是你还可以看之前发发表过的吗

903
00:36:32,000 --> 00:36:37,000
嗯对这个我当时在推特上读到还是挺伤感的

904
00:36:37,000 --> 00:36:41,000
因为我不显然不是读着 Dr.Dops 长大了

905
00:36:41,000 --> 00:36:45,000
但至少 Dr.Dops 是一个我觉得非常靠谱的

906
00:36:46,000 --> 00:36:49,000
而且而且管是深度还是

907
00:36:50,000 --> 00:36:54,000
及时度都让人相当满意的一个在线杂志

908
00:36:54,000 --> 00:36:59,000
所以而且而且就是我不知道你有没有印象就是有一本书叫

909
00:37:01,000 --> 00:37:04,000
Graphic Programming Black Book

910
00:37:05,000 --> 00:37:06,000
没什么印象

911
00:37:06,000 --> 00:37:11,000
就是讲图像处理的黑书

912
00:37:12,000 --> 00:37:13,000
对

913
00:37:13,000 --> 00:37:16,000
里面讲了非常多的图像处理相关的

914
00:37:18,000 --> 00:37:22,000
的问题或者说教你怎么去写图像处理方面的

915
00:37:22,000 --> 00:37:26,000
也不是图像处理就是就是 Graphic Programming

916
00:37:26,000 --> 00:37:28,000
怎么说呢

917
00:37:28,000 --> 00:37:31,000
对就这一方面主题的一系列文章

918
00:37:31,000 --> 00:37:34,000
他最开始其实就是在 Dr.Dops 上面的连载

919
00:37:34,000 --> 00:37:38,000
然后整个连载最后集结成书放在网上

920
00:37:38,000 --> 00:37:40,000
直到现在都是非常非常经典的一本书

921
00:37:41,000 --> 00:37:42,000
OK

922
00:37:42,000 --> 00:37:43,000
对

923
00:37:43,000 --> 00:37:45,000
所以你对这个还是很有甚有感情的

924
00:37:45,000 --> 00:37:46,000
对啊

925
00:37:46,000 --> 00:37:50,000
而且我也不知道就 Dr.Dops 就有点像一个

926
00:37:51,000 --> 00:37:55,000
每次上他的网站你就看到那种那种 90 年代的奇袭扑面而来

927
00:37:56,000 --> 00:37:58,000
就让人觉得这是我的青少年

928
00:37:58,000 --> 00:38:00,000
这是我的童年

929
00:38:02,000 --> 00:38:03,000
不过怎么说呢

930
00:38:03,000 --> 00:38:10,000
这一类的专业网站其实在广告模式情况下还是挺难生存的吧

931
00:38:10,000 --> 00:38:13,000
特别是现在就有很多这种所谓新媒体战

932
00:38:13,000 --> 00:38:16,000
一直在抢眼球的情况下

933
00:38:16,000 --> 00:38:17,000
对

934
00:38:17,000 --> 00:38:20,000
我虽然这件事情虽然让我伤感

935
00:38:20,000 --> 00:38:22,000
但我从来不觉得它是意外的事情

936
00:38:22,000 --> 00:38:24,000
或者说它是不可理解的事情

937
00:38:24,000 --> 00:38:27,000
因为我们每个人都知道这样的内

938
00:38:27,000 --> 00:38:29,000
就是内容 Heavy 的网站

939
00:38:29,000 --> 00:38:36,000
是很难在我们现在这样的经济环境下生存下去

940
00:38:36,000 --> 00:38:38,000
因为没有人知道

941
00:38:38,000 --> 00:38:40,000
怎样用好的内容赚钱

942
00:38:40,000 --> 00:38:42,000
就没法量化吗这个东西

943
00:38:42,000 --> 00:38:43,000
对

944
00:38:43,000 --> 00:38:47,000
而不像杂志你可以说这本杂志就卖这么多

945
00:38:47,000 --> 00:38:49,000
然后每一版广告都是定价

946
00:38:49,000 --> 00:38:53,000
现在是一个非常混乱的时代没有人知道应该怎么

947
00:38:53,000 --> 00:38:54,000
怎么用好的内容

948
00:38:54,000 --> 00:38:56,000
所以其实还是应该就说

949
00:38:56,000 --> 00:39:00,000
比如说像 Dr.Dops 可以说恢复我们会员制

950
00:39:00,000 --> 00:39:03,000
需要订阅才能看之类的

951
00:39:03,000 --> 00:39:06,000
这样起码他的会稳定一点

952
00:39:06,000 --> 00:39:08,000
也许吧

953
00:39:08,000 --> 00:39:09,000
我也不知道

954
00:39:09,000 --> 00:39:13,000
但不过完了就完了吧

955
00:39:13,000 --> 00:39:15,000
还是还会有后继者

956
00:39:15,000 --> 00:39:18,000
而且凭良性说话

957
00:39:18,000 --> 00:39:22,000
我其实也不会去专门关注 Dr.Dops 有什么更新

958
00:39:22,000 --> 00:39:25,000
甚至我不知道你买杂志吗

959
00:39:25,000 --> 00:39:26,000
你买杂志吗

960
00:39:26,000 --> 00:39:29,000
传统意义上的电脑杂志你还买吗

961
00:39:29,000 --> 00:39:31,000
很久以前

962
00:39:31,000 --> 00:39:32,000
很久很久以前

963
00:39:32,000 --> 00:39:33,000
大家都是这样吗

964
00:39:33,000 --> 00:39:36,000
对自从有了互联网之后就再不花钱买杂志

965
00:39:36,000 --> 00:39:37,000
对啊

966
00:39:37,000 --> 00:39:38,000
就我小时候还会觉得

967
00:39:38,000 --> 00:39:44,000
我小时候有一个朋友会把一整年的大众软件排在书架里面

968
00:39:44,000 --> 00:39:46,000
然后一整年的书籍

969
00:39:46,000 --> 00:39:49,000
就书的侧面会连成一个图案

970
00:39:49,000 --> 00:39:52,000
我当时觉得将来长大了我也有感觉

971
00:39:52,000 --> 00:39:56,000
说来上次我回家的时候清理家里的什么

972
00:39:56,000 --> 00:40:00,000
就我的自己的书架把那些都当废纸卖掉了

973
00:40:00,000 --> 00:40:02,000
真的

974
00:40:02,000 --> 00:40:04,000
这件事情我应该还是不会干的

975
00:40:04,000 --> 00:40:09,000
我小时候攒的那些杂志我觉得还是去让他们压在那好

976
00:40:09,000 --> 00:40:11,000
没有什么用啊

977
00:40:11,000 --> 00:40:15,000
为什么一定所有事情都要有用

978
00:40:15,000 --> 00:40:17,000
我再来先解释一下这个情况

979
00:40:17,000 --> 00:40:21,000
就是说因为要放其他东西然后堆不下了

980
00:40:21,000 --> 00:40:23,000
OK 所以你是有空间需求

981
00:40:23,000 --> 00:40:25,000
而且我有这个什么

982
00:40:25,000 --> 00:40:26,000
结批

983
00:40:26,000 --> 00:40:28,000
你有整理批

984
00:40:28,000 --> 00:40:30,000
反正你也没什么用嘛

985
00:40:30,000 --> 00:40:31,000
过期的信息

986
00:40:31,000 --> 00:40:32,000
然后你也不得不看

987
00:40:32,000 --> 00:40:34,000
古玩商最爱你们这种人了

988
00:40:34,000 --> 00:40:39,000
你们这种人的存在使得古玩是一些文物可以在

989
00:40:39,000 --> 00:40:41,000
可以不定时的重建天日

990
00:40:41,000 --> 00:40:43,000
如果每个人都没有整理批的话

991
00:40:43,000 --> 00:40:46,000
每个人的阁楼里面都堆满了各种各样的

992
00:40:46,000 --> 00:40:49,000
在那个时代毫不稀奇

993
00:40:49,000 --> 00:40:55,000
但是过上二三十年就非常非常让人爱不释手的东西

994
00:40:55,000 --> 00:40:58,000
如果没有整理批的人群存在的话

995
00:40:58,000 --> 00:41:00,000
这些东西永远不会重建天日

996
00:41:00,000 --> 00:41:07,000
不过我很难想象什么过期杂志能成为什么一个玩物

997
00:41:07,000 --> 00:41:09,000
过期杂志的确很难成为玩物

998
00:41:09,000 --> 00:41:10,000
对啊

999
00:41:10,000 --> 00:41:11,000
我

1000
00:41:11,000 --> 00:41:13,000
所以起码还是

1001
00:41:13,000 --> 00:41:17,000
在可以预见的将来这东西都只会成为一个负担

1002
00:41:17,000 --> 00:41:19,000
而不会成为一个有价值的东西

1003
00:41:19,000 --> 00:41:21,000
可能唯一的价值就是

1004
00:41:21,000 --> 00:41:24,000
缅怀一下什么逝去的青春

1005
00:41:24,000 --> 00:41:26,000
它有展示的价值和收藏的

1006
00:41:26,000 --> 00:41:27,000
我也不知道

1007
00:41:27,000 --> 00:41:29,000
它又不是四大名处

1008
00:41:29,000 --> 00:41:31,000
它往给展示给谁看

1009
00:41:31,000 --> 00:41:36,000
不这就好像一台古旧的计算机一样

1010
00:41:36,000 --> 00:41:37,000
它没有什么使用价值的

1011
00:41:37,000 --> 00:41:40,000
可是摆在那儿就是可以让人觉得你很有文化

1012
00:41:40,000 --> 00:41:41,000
不是

1013
00:41:43,000 --> 00:41:46,000
你真的觉得大众大众软件会让你显得很有文化

1014
00:41:46,000 --> 00:41:47,000
我这个在鬼扯了

1015
00:41:47,000 --> 00:41:48,000
我也不知道

1016
00:41:48,000 --> 00:41:52,000
你有一个什么 PTP 10 或者 11 你摆在家里可能还行

1017
00:41:52,000 --> 00:41:54,000
但是像这种东西

1018
00:41:54,000 --> 00:41:55,000
想象一下

1019
00:41:55,000 --> 00:41:57,000
十年之后你有了一个大宅子

1020
00:41:57,000 --> 00:41:59,000
然后大宅子里面有一个书房

1021
00:41:59,000 --> 00:42:03,000
书房里面摆了一大堆大众软件

1022
00:42:03,000 --> 00:42:05,000
90 年代的期刊

1023
00:42:05,000 --> 00:42:07,000
然后每一本都压得像钻石

1024
00:42:07,000 --> 00:42:09,000
压得像大理石样平

1025
00:42:09,000 --> 00:42:10,000
然后摆在书架上

1026
00:42:10,000 --> 00:42:11,000
摆在书架上

1027
00:42:11,000 --> 00:42:12,000
然后这个时候

1028
00:42:12,000 --> 00:42:14,000
你的童年朋友们来玩的时候

1029
00:42:14,000 --> 00:42:17,000
就说你还收着 90 年代的大宅子

1030
00:42:17,000 --> 00:42:18,000
这难道不是一个谈资吗

1031
00:42:18,000 --> 00:42:21,000
难道他不会认为你是个 weirdo

1032
00:42:25,000 --> 00:42:26,000
对吧

1033
00:42:26,000 --> 00:42:27,000
next

1034
00:42:31,000 --> 00:42:33,000
所以我们两个其实还是有分歧的

1035
00:42:33,000 --> 00:42:36,000
我们两个在价值观上还是有分歧

1036
00:42:36,000 --> 00:42:37,000
对的

1037
00:42:37,000 --> 00:42:39,000
太好

1038
00:42:39,000 --> 00:42:41,000
有得聊了

1039
00:42:41,000 --> 00:42:42,000
yeah

1040
00:42:42,000 --> 00:42:47,000
然后另外一个就是我前两期也提倡了一个 Anantek

1041
00:42:47,000 --> 00:42:49,000
也是

1042
00:42:49,000 --> 00:42:50,000
他没有停刊了

1043
00:42:50,000 --> 00:42:52,000
但是他被卖给了 perch

1044
00:42:52,000 --> 00:42:54,000
这个你们也在 DKW 里面聊过

1045
00:42:54,000 --> 00:42:56,000
这个没有什么太多可说的

1046
00:42:56,000 --> 00:42:57,000
我也觉得挺可惜的

1047
00:42:57,000 --> 00:42:58,000
其实事情

1048
00:42:58,000 --> 00:43:00,000
这个还好

1049
00:43:00,000 --> 00:43:02,000
他卖给那个就是换了这个东家而已

1050
00:43:02,000 --> 00:43:05,000
但是编辑团队还是没变

1051
00:43:05,000 --> 00:43:06,000
然后他还是独立运作的

1052
00:43:06,000 --> 00:43:07,000
这个其实倒没什么

1053
00:43:07,000 --> 00:43:09,000
但是其实也反映出一个现象

1054
00:43:09,000 --> 00:43:18,000
但是他们说的理由之一就是这样可以增强他们在广告买主那里的一个什么竞争力

1055
00:43:18,000 --> 00:43:21,000
因为你大平台买主更多

1056
00:43:21,000 --> 00:43:23,000
其实潜台词就是说

1057
00:43:23,000 --> 00:43:26,000
他作为一个独立的这么一个网站

1058
00:43:26,000 --> 00:43:28,000
均盈的广告收入其实要

1059
00:43:28,000 --> 00:43:29,000
要么就是没有

1060
00:43:29,000 --> 00:43:32,000
中秋还是需要更多的钱

1061
00:43:32,000 --> 00:43:33,000
对

1062
00:43:33,000 --> 00:43:36,000
所以其实跟 Dr.Dope 面临的是同样的问题

1063
00:43:36,000 --> 00:43:38,000
只是说他的那个程度没有那么严重

1064
00:43:38,000 --> 00:43:39,000
而且他现在就是说

1065
00:43:39,000 --> 00:43:41,000
找到了一个还不错的买家

1066
00:43:41,000 --> 00:43:42,000
然后能够

1067
00:43:42,000 --> 00:43:45,000
就起码我们希望他能够解决问题

1068
00:43:45,000 --> 00:43:47,000
但是可能再过个两三年

1069
00:43:47,000 --> 00:43:49,000
发现卖回去还是不行

1070
00:43:49,000 --> 00:43:50,000
再怎么样

1071
00:43:50,000 --> 00:43:51,000
我们也不知道

1072
00:43:51,000 --> 00:43:54,000
但是像这种所谓的这种 Hardcore 媒体

1073
00:43:54,000 --> 00:43:55,000
包括 B 节目在内

1074
00:43:55,000 --> 00:43:57,000
都有这种用户群体

1075
00:43:57,000 --> 00:44:00,000
读者群体或听众群体比较小众

1076
00:44:00,000 --> 00:44:03,000
然后没有办法可以持续盈利化

1077
00:44:03,000 --> 00:44:04,000
做下去的情况

1078
00:44:04,000 --> 00:44:06,000
起码我们现在还是在免费做这件事情

1079
00:44:06,000 --> 00:44:07,000
对不对

1080
00:44:07,000 --> 00:44:10,000
就没有任何收费的尝试

1081
00:44:10,000 --> 00:44:11,000
目前还

1082
00:44:11,000 --> 00:44:12,000
征兆

1083
00:44:12,000 --> 00:44:14,000
而且我们收的话大概也是

1084
00:44:14,000 --> 00:44:15,000
就 donate

1085
00:44:15,000 --> 00:44:17,000
就是捐赠而已

1086
00:44:17,000 --> 00:44:19,000
对但是就像他并不可能

1087
00:44:19,000 --> 00:44:21,000
我们不可能说

1088
00:44:21,000 --> 00:44:23,000
我们来全职做这个东西

1089
00:44:23,000 --> 00:44:25,000
肯定咬合不了我们两个人

1090
00:44:26,000 --> 00:44:27,000
好吧

1091
00:44:27,000 --> 00:44:28,000
OK

1092
00:44:28,000 --> 00:44:30,000
现在开始今天的正题

1093
00:44:30,000 --> 00:44:31,000
其实今天我们准备

1094
00:44:31,000 --> 00:44:32,000
今天我们准备

1095
00:44:32,000 --> 00:44:35,000
刚才扯了差不多 45 分钟的毒字

1096
00:44:35,000 --> 00:44:37,000
我们今天准备准备

1097
00:44:37,000 --> 00:44:40,000
延续着之前的话题

1098
00:44:40,000 --> 00:44:41,000
也不叫话题

1099
00:44:41,000 --> 00:44:42,000
那个方向走下去

1100
00:44:42,000 --> 00:44:43,000
今天我们讲一些

1101
00:44:43,000 --> 00:44:45,000
运维的一些东西

1102
00:44:45,000 --> 00:44:46,000
对

1103
00:44:46,000 --> 00:44:48,000
上一期我们说的东西

1104
00:44:48,000 --> 00:44:51,000
其实有一点像从

1105
00:44:52,000 --> 00:44:53,000
从小处

1106
00:44:53,000 --> 00:44:56,000
就是从非常小的一个单独的程序运行

1107
00:44:56,000 --> 00:44:57,000
或者说一群程序

1108
00:44:57,000 --> 00:45:01,000
在一个操作系统上运行的时候

1109
00:45:01,000 --> 00:45:04,000
他们的生存周期管理

1110
00:45:04,000 --> 00:45:06,000
然后我们上一期又提到了这些东西

1111
00:45:06,000 --> 00:45:07,000
当你把它

1112
00:45:07,000 --> 00:45:10,000
从你开发那台机器上拿出来

1113
00:45:10,000 --> 00:45:12,000
放到其他系统机或者反过来

1114
00:45:12,000 --> 00:45:14,000
你怎么把别人开发好的程序

1115
00:45:14,000 --> 00:45:16,000
放到你的系统机上用的时候

1116
00:45:16,000 --> 00:45:19,000
去管理他的生存周期

1117
00:45:20,000 --> 00:45:22,000
而这一期我们想要说的

1118
00:45:22,000 --> 00:45:23,000
其实就是

1119
00:45:23,000 --> 00:45:24,000
你怎么用它

1120
00:45:24,000 --> 00:45:26,000
你怎样才能在

1121
00:45:27,000 --> 00:45:28,000
就是整

1122
00:45:29,000 --> 00:45:31,000
你一个人作为一个开发者

1123
00:45:31,000 --> 00:45:32,000
管理一堆程序

1124
00:45:32,000 --> 00:45:34,000
和你一个公司

1125
00:45:34,000 --> 00:45:37,000
去管理一堆你开发出来的程序

1126
00:45:37,000 --> 00:45:40,000
跑在一堆服务器上

1127
00:45:40,000 --> 00:45:42,000
其实又是一个更大的层级

1128
00:45:42,000 --> 00:45:44,000
然后我们今天想要讨论

1129
00:45:44,000 --> 00:45:45,000
其实是这件事

1130
00:45:45,000 --> 00:45:49,000
在这个之前可能要引入一个概念

1131
00:45:49,000 --> 00:45:50,000
就是说

1132
00:45:50,000 --> 00:45:51,000
本身有两个概念

1133
00:45:51,000 --> 00:45:52,000
就是一个叫 dev

1134
00:45:52,000 --> 00:45:53,000
一个叫 op

1135
00:45:53,000 --> 00:45:56,000
就是开发者和运萎者这两种身份

1136
00:45:56,000 --> 00:45:58,000
我们传统上应该是分离的吧

1137
00:45:58,000 --> 00:46:00,000
就大部分那种传统企业里面

1138
00:46:00,000 --> 00:46:01,000
都是这样子

1139
00:46:01,000 --> 00:46:03,000
所谓 dev 就是 developer

1140
00:46:03,000 --> 00:46:04,000
开发者

1141
00:46:04,000 --> 00:46:06,000
然后开发者的传统意义上

1142
00:46:07,000 --> 00:46:09,000
应该包括哪些呢

1143
00:46:09,000 --> 00:46:10,000
我觉得可以包括

1144
00:46:10,000 --> 00:46:12,000
比如说 programmers 肯定吧

1145
00:46:12,000 --> 00:46:13,000
他们是 developer

1146
00:46:13,000 --> 00:46:14,000
然后 testers

1147
00:46:15,000 --> 00:46:17,000
应该其实也是开发团队的一部分

1148
00:46:17,000 --> 00:46:18,000
对

1149
00:46:18,000 --> 00:46:19,000
它是最保证

1150
00:46:19,000 --> 00:46:21,000
这个产品质量的最后一个环节

1151
00:46:21,000 --> 00:46:22,000
然后

1152
00:46:22,000 --> 00:46:23,000
Wait a second

1153
00:46:23,000 --> 00:46:25,000
QA 是最后一个环节

1154
00:46:25,000 --> 00:46:27,000
还是 QA 和 Tester 一般是混在一起的

1155
00:46:29,000 --> 00:46:32,000
它开发者自己有一套标准化的测试

1156
00:46:32,000 --> 00:46:33,000
一般是 QA 是在

1157
00:46:34,000 --> 00:46:35,000
就是这么白核和黑核

1158
00:46:35,000 --> 00:46:36,000
对吧

1159
00:46:36,000 --> 00:46:37,000
对

1160
00:46:37,000 --> 00:46:38,000
就是要一个黑核测试

1161
00:46:38,000 --> 00:46:39,000
就 QA 那个环节

1162
00:46:39,000 --> 00:46:42,000
要保证最终的结果

1163
00:46:42,000 --> 00:46:45,000
然后就是这个产品出来

1164
00:46:45,000 --> 00:46:46,000
然后运萎的人把它

1165
00:46:46,000 --> 00:46:47,000
就是要有人把它

1166
00:46:47,000 --> 00:46:48,000
take over

1167
00:46:48,000 --> 00:46:49,000
operator

1168
00:46:49,000 --> 00:46:51,000
把它弄到机器上去跑

1169
00:46:51,000 --> 00:46:54,000
然后保证它能够连续稳定的工作下去

1170
00:46:54,000 --> 00:46:55,000
然后

1171
00:46:55,000 --> 00:46:56,000
对

1172
00:46:56,000 --> 00:46:57,000
然后这一部分就是

1173
00:46:57,000 --> 00:46:58,000
Operator

1174
00:46:58,000 --> 00:47:01,000
Opps 应该是 operations 还是 operators

1175
00:47:02,000 --> 00:47:03,000
如果 developer

1176
00:47:03,000 --> 00:47:04,000
developer operator

1177
00:47:04,000 --> 00:47:06,000
ok operator 包括哪些人

1178
00:47:08,000 --> 00:47:10,000
首先那些管网络肯定是 operator

1179
00:47:10,000 --> 00:47:12,000
网管网络管理员

1180
00:47:12,000 --> 00:47:13,000
有算是

1181
00:47:13,000 --> 00:47:15,000
system admin 其实是

1182
00:47:16,000 --> 00:47:19,000
更 proper 的一个头衔

1183
00:47:19,000 --> 00:47:20,000
对

1184
00:47:20,000 --> 00:47:21,000
system and threader

1185
00:47:21,000 --> 00:47:22,000
系统管理

1186
00:47:22,000 --> 00:47:24,000
然后还有 database and threader

1187
00:47:24,000 --> 00:47:26,000
应该也算是 Opps 的一部分吧

1188
00:47:26,000 --> 00:47:27,000
DBA

1189
00:47:27,000 --> 00:47:29,000
DBA 其实介于两者之间

1190
00:47:29,000 --> 00:47:30,000
对

1191
00:47:30,000 --> 00:47:32,000
一个是在开发时的工种

1192
00:47:32,000 --> 00:47:34,000
一个是在运行时的工种

1193
00:47:36,000 --> 00:47:37,000
可以这么理解吧

1194
00:47:37,000 --> 00:47:39,000
但至少在我接触的几个公司里面

1195
00:47:39,000 --> 00:47:42,000
DBA 其实多半还要参与到

1196
00:47:42,000 --> 00:47:44,000
Architecture 的决策里面

1197
00:47:44,000 --> 00:47:46,000
就是开发之前的工作对吧

1198
00:47:46,000 --> 00:47:47,000
对

1199
00:47:47,000 --> 00:47:50,000
对所以当然这两者之间的

1200
00:47:50,000 --> 00:47:51,000
分野也不是非常明确

1201
00:47:51,000 --> 00:47:53,000
但我们在这里就把 DBA

1202
00:47:53,000 --> 00:47:55,000
画到 Opps 里面吧

1203
00:47:56,000 --> 00:47:57,000
对

1204
00:47:57,000 --> 00:47:58,000
然后他们两者之间的

1205
00:47:58,000 --> 00:48:01,000
这个兴趣其实是有冲突的

1206
00:48:02,000 --> 00:48:03,000
对就

1207
00:48:03,000 --> 00:48:05,000
像我们上次提到那个知乎帖子里面说

1208
00:48:05,000 --> 00:48:07,000
屁股决定脑袋

1209
00:48:08,000 --> 00:48:09,000
对

1210
00:48:09,000 --> 00:48:10,000
开发者的屁股

1211
00:48:10,000 --> 00:48:13,000
就坐在他们要做新的东西

1212
00:48:13,000 --> 00:48:16,000
他们要改变世界这一部分

1213
00:48:16,000 --> 00:48:19,000
他们最新的

1214
00:48:19,000 --> 00:48:21,000
最炫的技术

1215
00:48:21,000 --> 00:48:23,000
对所以他们是奥巴马派的

1216
00:48:23,000 --> 00:48:24,000
We want change

1217
00:48:25,000 --> 00:48:28,000
但是 Opps 这一派就比较保守

1218
00:48:28,000 --> 00:48:30,000
他们说我们要什么

1219
00:48:30,000 --> 00:48:31,000
稳定

1220
00:48:31,000 --> 00:48:33,000
对 Reliability

1221
00:48:34,000 --> 00:48:36,000
你跑什么东西千万不要坏

1222
00:48:36,000 --> 00:48:38,000
坏了我们就有了麻烦

1223
00:48:38,000 --> 00:48:41,000
麻烦就要被什么半夜三点被一个 call 起来

1224
00:48:41,000 --> 00:48:44,000
然后去看服务器当机了怎么办

1225
00:48:44,000 --> 00:48:45,000
对

1226
00:48:45,000 --> 00:48:46,000
没错

1227
00:48:46,000 --> 00:48:49,000
而 Developer 担心的则是

1228
00:48:49,000 --> 00:48:51,000
不开发新东西我就没饭吃了

1229
00:48:54,000 --> 00:48:57,000
所以传统上在这些企业里面

1230
00:48:57,000 --> 00:48:58,000
这两个工作室

1231
00:48:58,000 --> 00:48:59,000
工作室完全分离了

1232
00:48:59,000 --> 00:49:01,000
他们有不同的职责

1233
00:49:01,000 --> 00:49:03,000
他们有不同的侧重点

1234
00:49:03,000 --> 00:49:05,000
刚才讲的也是因为屁股决定脑袋

1235
00:49:05,000 --> 00:49:08,000
所以他们对工具的选择也好

1236
00:49:08,000 --> 00:49:11,000
对包括操作性的选择也好

1237
00:49:11,000 --> 00:49:14,000
他们都是有不同的取向的

1238
00:49:14,000 --> 00:49:17,000
对而且他们会不停的互相 blame

1239
00:49:17,000 --> 00:49:18,000
出了问题

1240
00:49:18,000 --> 00:49:21,000
开发的傻逼写的什么破玩意

1241
00:49:21,000 --> 00:49:22,000
一开就死机

1242
00:49:22,000 --> 00:49:24,000
我说你那帮傻逼

1243
00:49:24,000 --> 00:49:26,000
我写的这东西好好的

1244
00:49:26,000 --> 00:49:27,000
就是跑不起来

1245
00:49:27,000 --> 00:49:28,000
蠢不蠢

1246
00:49:30,000 --> 00:49:33,000
所以其实这两个我们割裂

1247
00:49:33,000 --> 00:49:34,000
还是有点问题的

1248
00:49:34,000 --> 00:49:35,000
大家刚才也看到了

1249
00:49:35,000 --> 00:49:39,000
所以最近的区也比较最起来

1250
00:49:39,000 --> 00:49:40,000
应该有好几年了

1251
00:49:40,000 --> 00:49:42,000
这种流行的一个趋势就是说

1252
00:49:42,000 --> 00:49:44,000
我们不要分这么小

1253
00:49:44,000 --> 00:49:45,000
我们二合

1254
00:49:45,000 --> 00:49:46,000
就是什么合体

1255
00:49:46,000 --> 00:49:48,000
我们就叫做 Devop

1256
00:49:48,000 --> 00:49:50,000
就是它既是开发者

1257
00:49:50,000 --> 00:49:51,000
它又是运维的人员

1258
00:49:51,000 --> 00:49:53,000
就是简单来讲

1259
00:49:53,000 --> 00:49:57,000
开发者说 deploy your own shit

1260
00:49:58,000 --> 00:50:00,000
你自己的狗屎你自己去部署

1261
00:50:00,000 --> 00:50:01,000
然后你自己去运维

1262
00:50:01,000 --> 00:50:02,000
吃你自己的狗屎

1263
00:50:02,000 --> 00:50:04,000
然后部署你自己写出来的屎

1264
00:50:04,000 --> 00:50:05,000
对

1265
00:50:05,000 --> 00:50:09,000
然后其实从大的一个角度来讲

1266
00:50:09,000 --> 00:50:13,000
可能刚才我们讲的是一个比较直白的描述

1267
00:50:13,000 --> 00:50:14,000
但是有一些比如说

1268
00:50:14,000 --> 00:50:16,000
很 enterprise 的说法

1269
00:50:16,000 --> 00:50:19,000
就是什么 end to end ownership

1270
00:50:19,000 --> 00:50:25,000
就是说你这个软件的工程的 ownership

1271
00:50:25,000 --> 00:50:26,000
就是这个权责在哪里

1272
00:50:26,000 --> 00:50:28,000
你是从头到尾

1273
00:50:28,000 --> 00:50:31,000
从它的制作到它的最终使用

1274
00:50:31,000 --> 00:50:32,000
你都是要负全责的

1275
00:50:32,000 --> 00:50:35,000
对你从收集用户的需求开始

1276
00:50:35,000 --> 00:50:40,000
然后到把最终产品呈现给用户使用为止

1277
00:50:40,000 --> 00:50:44,000
整个过程你都要自己去完成

1278
00:50:44,000 --> 00:50:45,000
对

1279
00:50:45,000 --> 00:50:51,000
这样的话理论上说是可以对开发者也好

1280
00:50:51,000 --> 00:50:52,000
还是运维者也好

1281
00:50:52,000 --> 00:50:53,000
它有更大的一个激励机制

1282
00:50:53,000 --> 00:50:56,000
因为传统上开发和运维分开的话

1283
00:50:56,000 --> 00:50:58,000
有这么一个不太好的地方

1284
00:50:58,000 --> 00:51:00,000
就是开发完毕之后

1285
00:51:00,000 --> 00:51:02,000
觉得这个事情就跟我没关系了

1286
00:51:02,000 --> 00:51:04,000
这个东西到底跑起来怎么样

1287
00:51:04,000 --> 00:51:05,000
性能怎么样

1288
00:51:05,000 --> 00:51:10,000
他们就比较不太关心了

1289
00:51:10,000 --> 00:51:12,000
然后这样的话从来得到的成就感

1290
00:51:12,000 --> 00:51:16,000
可能那个东西是我从头到脚负责到底的

1291
00:51:16,000 --> 00:51:18,000
然后你就是用手来看牛逼吧

1292
00:51:18,000 --> 00:51:20,000
那种成就感可能就没有那么强烈了

1293
00:51:20,000 --> 00:51:22,000
所以从某种意义上来讲

1294
00:51:22,000 --> 00:51:25,000
这种所谓 devop 运动或者说 end to end ownership

1295
00:51:25,000 --> 00:51:29,000
它其实有一种也是激励开发者

1296
00:51:29,000 --> 00:51:32,000
有更多的动力去做事的一个方法吧

1297
00:51:32,000 --> 00:51:33,000
我觉得

1298
00:51:33,000 --> 00:51:34,000
没错

1299
00:51:34,000 --> 00:51:37,000
当然同时它这个 devop 运动

1300
00:51:37,000 --> 00:51:41,000
它对软件从业者的技能的要求

1301
00:51:41,000 --> 00:51:43,000
就有了更进一步的要求了

1302
00:51:43,000 --> 00:51:46,000
或者说我们之前有一个另外一个概念

1303
00:51:46,000 --> 00:51:47,000
叫做 full stack developer

1304
00:51:47,000 --> 00:51:49,000
就是所谓全站工程师

1305
00:51:49,000 --> 00:51:53,000
就是你要从硬件底层到最终用户界面

1306
00:51:53,000 --> 00:51:55,000
每一个步骤你都

1307
00:51:55,000 --> 00:51:57,000
你不说要精通版的起码也有了解

1308
00:51:57,000 --> 00:52:00,000
你至少要知道出了问题去在哪一层去解决

1309
00:52:00,000 --> 00:52:02,000
那就是说这个是一个所谓的

1310
00:52:02,000 --> 00:52:04,000
如果把这个定为一个终极目标的话

1311
00:52:04,000 --> 00:52:08,000
devop 其实就是再往这个目标上又更近了一步

1312
00:52:08,000 --> 00:52:09,000
对

1313
00:52:09,000 --> 00:52:12,000
而且其实我觉得 devop 有点多少有点

1314
00:52:12,000 --> 00:52:15,000
back to the roots 的感觉

1315
00:52:15,000 --> 00:52:17,000
就是在很古早的时代

1316
00:52:17,000 --> 00:52:19,000
每一个程序员都是 devop

1317
00:52:19,000 --> 00:52:20,000
对

1318
00:52:20,000 --> 00:52:24,000
还没有出现这个工作的分野

1319
00:52:24,000 --> 00:52:25,000
对

1320
00:52:25,000 --> 00:52:27,000
但是分工

1321
00:52:27,000 --> 00:52:30,000
就是软件工程变得越来越大的时候

1322
00:52:30,000 --> 00:52:35,000
一个人的 scope 可能没办法 cover 到那么大的范围

1323
00:52:35,000 --> 00:52:36,000
但是

1324
00:52:36,000 --> 00:52:42,000
那个时候的思潮就是要让这一群 devs 做 devs 事情

1325
00:52:42,000 --> 00:52:44,000
然后一群 ops 做 ops 的事情

1326
00:52:44,000 --> 00:52:46,000
但是现在潮流又反过来了

1327
00:52:46,000 --> 00:52:50,000
就是要希望一个人能够完成所有的事情

1328
00:52:50,000 --> 00:52:51,000
因为这样才可以得到

1329
00:52:51,000 --> 00:52:52,000
怎么说呢

1330
00:52:52,000 --> 00:52:55,000
比较高质量的软件

1331
00:52:55,000 --> 00:52:59,000
并且也会让整个开发过程变得更加敏捷一点

1332
00:52:59,000 --> 00:53:00,000
嗯

1333
00:53:00,000 --> 00:53:02,000
其实刚才讲了那么多

1334
00:53:02,000 --> 00:53:05,000
我们还是要探究一下 devop 这个背景

1335
00:53:05,000 --> 00:53:08,000
刚才讲的一个激励因素是一个方面

1336
00:53:08,000 --> 00:53:10,000
其实我觉得可能从一个务实的角度来讲

1337
00:53:10,000 --> 00:53:13,000
就特别是现在我们不是流行创业小团队吗

1338
00:53:13,000 --> 00:53:16,000
小团队的话那么就隐含的一个条件

1339
00:53:16,000 --> 00:53:18,000
一个前提就是人少

1340
00:53:18,000 --> 00:53:20,000
每个人都要会什么

1341
00:53:20,000 --> 00:53:22,000
对就是说可能这个团队我就三个人

1342
00:53:22,000 --> 00:53:24,000
如果说你这个三个人

1343
00:53:24,000 --> 00:53:27,000
然后你说你其中一个人只写代码

1344
00:53:27,000 --> 00:53:28,000
另外一个只运为

1345
00:53:28,000 --> 00:53:31,000
这显然可能平时那个写代码的

1346
00:53:31,000 --> 00:53:32,000
人就一直在写代码

1347
00:53:32,000 --> 00:53:34,000
然后运用的人部署完了也没什么事干了对吧

1348
00:53:34,000 --> 00:53:37,000
就其实对资源的利用也是不太合理的

1349
00:53:37,000 --> 00:53:39,000
然后另外一方面就是说

1350
00:53:39,000 --> 00:53:41,000
小公司可能也没有那么

1351
00:53:41,000 --> 00:53:43,000
那么划分明确的东西

1352
00:53:43,000 --> 00:53:46,000
因为如果你一旦划分明确的话

1353
00:53:46,000 --> 00:53:49,000
你就要在不同的人员之间沟通

1354
00:53:49,000 --> 00:53:54,000
沟通的话其实对这个效率是有很大的折损的

1355
00:53:55,000 --> 00:53:58,000
对就是如果你说你是一个小团队的话

1356
00:53:58,000 --> 00:54:01,000
你肯定是要尽量减少这种折损

1357
00:54:01,000 --> 00:54:03,000
因为你没有那么多人去

1358
00:54:03,000 --> 00:54:07,000
你没有那么多种的脑力去消耗

1359
00:54:07,000 --> 00:54:09,000
你要把这些东西全部用在实际的价值上面去

1360
00:54:09,000 --> 00:54:14,000
你得让他们都把他在真正实在在做事

1361
00:54:14,000 --> 00:54:15,000
所以其实从这个角度来讲

1362
00:54:15,000 --> 00:54:17,000
就是代码比速军运动还是从

1363
00:54:17,000 --> 00:54:19,000
很多务实的考虑出来的结果吧我觉得

1364
00:54:19,000 --> 00:54:20,000
没错

1365
00:54:20,000 --> 00:54:25,000
那要成为一个 DevOps 其实

1366
00:54:26,000 --> 00:54:27,000
说难也不难

1367
00:54:27,000 --> 00:54:29,000
但是说简单也不是很简单

1368
00:54:29,000 --> 00:54:31,000
就如果你只是一个

1369
00:54:31,000 --> 00:54:35,000
或说我是一个很普通的学了一点编程的人

1370
00:54:35,000 --> 00:54:40,000
我怎样才能知道自己要成为一个 DevOps

1371
00:54:40,000 --> 00:54:43,000
需要哪些额外的知识呢

1372
00:54:43,000 --> 00:54:48,000
其实这个问题有点让我想起之前

1373
00:54:48,000 --> 00:54:50,000
不只是在知乎上

1374
00:54:50,000 --> 00:54:52,000
很多地方都会出现一个问题就是

1375
00:54:52,000 --> 00:54:54,000
我是学计算机的

1376
00:54:54,000 --> 00:54:58,000
但是我的亲戚朋友让我修电脑我不会修

1377
00:54:58,000 --> 00:55:02,000
我应该怎么让他们理解我是学计算机的

1378
00:55:02,000 --> 00:55:04,000
但是我不一定会修电脑呢

1379
00:55:04,000 --> 00:55:08,000
我觉得我对这个问题的回答就是

1380
00:55:08,000 --> 00:55:11,000
你一个学计算机的怎么可以不会修电脑

1381
00:55:11,000 --> 00:55:17,000
现在想想这种反应可能是

1382
00:55:17,000 --> 00:55:19,000
是不那么

1383
00:55:19,000 --> 00:55:21,000
至少是正直不正确的

1384
00:55:21,000 --> 00:55:27,000
你不能要求每一个人所选择的专业都是他真正

1385
00:55:27,000 --> 00:55:29,000
这么说好像太黑了

1386
00:55:29,000 --> 00:55:31,000
都是他真正所喜欢的

1387
00:55:31,000 --> 00:55:33,000
这个没什么好黑的这个现实就是

1388
00:55:33,000 --> 00:55:39,000
我相信很多人就学的那个专业都不是他自己所真正喜欢的东西

1389
00:55:39,000 --> 00:55:43,000
对在跑在报计算机科学专业之前

1390
00:55:43,000 --> 00:55:45,000
可能完全不知道计算机科学到的是干嘛

1391
00:55:45,000 --> 00:55:50,000
对啊就看了这个这个这个是我没有经历过的一个一个一个

1392
00:55:50,000 --> 00:55:52,000
一个这时候不能理解的一种现象

1393
00:55:52,000 --> 00:55:58,000
但我也我觉得可能具体去想也没什么可以厚非的

1394
00:55:58,000 --> 00:56:00,000
就可能有些人就是这样的

1395
00:56:00,000 --> 00:56:05,000
但在我看来一个学计算机的不会修电脑是挺让人费解的一件事情

1396
00:56:05,000 --> 00:56:11,000
甚至会在主观上去寻找一个怎么才能让别人明白

1397
00:56:11,000 --> 00:56:15,000
我学计算机的就不会修电脑是一件正常的事情

1398
00:56:15,000 --> 00:56:20,000
anyway 就回到 devops 这个话题

1399
00:56:20,000 --> 00:56:25,000
就是我觉得这就有点像你要成为一个 devops 但是你只会 dev

1400
00:56:25,000 --> 00:56:28,000
可能就有点像你是一个学计算机的人

1401
00:56:28,000 --> 00:56:30,000
然后你要学会怎么修计算机啊

1402
00:56:30,000 --> 00:56:34,000
是一个从从偏向理论部分

1403
00:56:34,000 --> 00:56:39,000
转向于理论和实践相结合的一个一个状态的过程

1404
00:56:39,000 --> 00:56:45,000
然后还有一部分人是从 op 然后转向 dev

1405
00:56:45,000 --> 00:56:47,000
他们又需要学些什么东西

1406
00:56:47,000 --> 00:56:50,000
对这个其实也挺有意思的就是

1407
00:56:50,000 --> 00:56:57,000
想象你是一个在中国村电脑城存机长大的孩子

1408
00:56:57,000 --> 00:57:06,000
然后在生命的某一时刻你突然决定说我对硬件搞得这么熟

1409
00:57:06,000 --> 00:57:09,000
那我想要研究一下软件怎么弄

1410
00:57:09,000 --> 00:57:13,000
我觉得你这个夸得有点大

1411
00:57:13,000 --> 00:57:15,000
我们还是说回一个正常一点

1412
00:57:15,000 --> 00:57:19,000
就是说你是一个系统管理员或者你是网络管理员

1413
00:57:19,000 --> 00:57:23,000
然后你怎么想我也来写几个程序部署来玩玩

1414
00:57:23,000 --> 00:57:24,000
有这样的人存在吗

1415
00:57:24,000 --> 00:57:26,000
有啊有啊肯定是有的

1416
00:57:26,000 --> 00:57:30,000
可是为什么会有人先成为一个系统管理员而不会编程

1417
00:57:30,000 --> 00:57:32,000
这个就是要讲的一件事情

1418
00:57:32,000 --> 00:57:39,000
以前什么思哥还很牛逼的时候不是有什么各种认证吗

1419
00:57:39,000 --> 00:57:45,000
还有好几个什么 CCEP 什么的

1420
00:57:45,000 --> 00:57:47,000
一下缩解我就想不起来

1421
00:57:47,000 --> 00:57:51,000
就是专门教你怎么去管理一个组建计算机网络

1422
00:57:51,000 --> 00:57:52,000
管理计算机网络

1423
00:57:52,000 --> 00:57:56,000
包括很多人也就是从这个地方入手吧

1424
00:57:56,000 --> 00:57:59,000
然后开始去接触这个服务器的

1425
00:57:59,000 --> 00:58:03,000
起码中国互联网早期创业那方面很多是从这种渠道出来的

1426
00:58:03,000 --> 00:58:10,000
哦明白了就是就等于把计算机网络管理作为一种技能来教授

1427
00:58:10,000 --> 00:58:13,000
对对这就是一个还有还可以搬证书的技能

1428
00:58:13,000 --> 00:58:15,000
当然是很多人有这种方式

1429
00:58:15,000 --> 00:58:16,000
我知道这个东西

1430
00:58:16,000 --> 00:58:24,000
我还小但我总觉得这些东西应该是至少是你得先会写程序才会去考的一个东西吧

1431
00:58:24,000 --> 00:58:26,000
不需要完全不需要

1432
00:58:26,000 --> 00:58:28,000
原来如此

1433
00:58:28,000 --> 00:58:30,000
有什么北大七鸟你还有吗

1434
00:58:30,000 --> 00:58:33,000
这种各种培训班也是在做这种事情

1435
00:58:33,000 --> 00:58:34,000
记得记得

1436
00:58:34,000 --> 00:58:36,000
现在怎么来想计算机构估计再做一个事吧

1437
00:58:36,000 --> 00:58:37,000
OK

1438
00:58:37,000 --> 00:58:40,000
对就是这方面是属于一个比较成熟的

1439
00:58:41,000 --> 00:58:46,000
因为网络其实它是一个眼镜相对于相对来说比较慢

1440
00:58:46,000 --> 00:58:49,000
就是它的这个技术是比较稳定的一个东西嘛

1441
00:58:49,000 --> 00:58:56,000
然后就会有一些这种成熟的培训体系来做这个教大家怎么去使用组建网络

1442
00:58:56,000 --> 00:58:59,000
怎么去调试啊这类的东西

1443
00:58:59,000 --> 00:59:03,000
然后很多这个公司招人的时候也会会去选择嘛

1444
00:59:03,000 --> 00:59:07,000
就说那我来招一个网络管理员把这个东西弄好就好了

1445
00:59:07,000 --> 00:59:08,000
好吧

1446
00:59:08,000 --> 00:59:10,000
现在我大概明白了

1447
00:59:12,000 --> 00:59:14,000
对那好吧

1448
00:59:14,000 --> 00:59:17,000
那我们来说说做一个 DevOps 到底需要哪些支持

1449
00:59:18,000 --> 00:59:21,000
首先你得知道软件工程对吧

1450
00:59:21,000 --> 00:59:23,000
对你得会写程序

1451
00:59:23,000 --> 00:59:30,000
包括软件工程的所有的东西什么算法啊什么东西之类的你得全会

1452
00:59:30,000 --> 00:59:32,000
你得先把那个东西做出来对吧

1453
00:59:32,000 --> 00:59:34,000
你得是一个是一个厨师

1454
00:59:34,000 --> 00:59:37,000
对就是或者说我们前两期提及的这些内容你得会

1455
00:59:37,000 --> 00:59:38,000
你得会

1456
00:59:38,000 --> 00:59:43,000
然后在那些基础上你还得知道就是现代的一个服务器

1457
00:59:43,000 --> 00:59:45,000
是怎么样子的

1458
00:59:45,000 --> 00:59:47,000
现在一个它需要一个什么样操作系统啊

1459
00:59:47,000 --> 00:59:51,000
它有什么工具刚刚有讲我们待会会提到一些部署的一些工具

1460
00:59:51,000 --> 00:59:55,000
然后你还得知道网络的基础的一些东西是怎么样子的

1461
00:59:55,000 --> 01:00:00,000
什么 TCP IP 几层几层然后每个包干嘛的然后每一层能做什么

1462
01:00:00,000 --> 01:00:05,000
因为这样的话你出了问题你才好找才好调出错嘛

1463
01:00:05,000 --> 01:00:12,000
然后你还得会在比如说 Linux 的系统上面配置这些东西使得它能达到你的一些效果

1464
01:00:12,000 --> 01:00:19,000
你还得知道操作系统的底层啊什么那些调度怎么样子然后如此种种吧

1465
01:00:19,000 --> 01:00:24,000
嗯对所以总结出来就是要有集团机网络方面的知识

1466
01:00:24,000 --> 01:00:26,000
有集团机架构方面的知识

1467
01:00:26,000 --> 01:00:27,000
对

1468
01:00:27,000 --> 01:00:32,000
并且还要有实践技能其实我觉得最重要的一点就是你得明白

1469
01:00:32,000 --> 01:00:43,000
怎么样才能隔着网络去操纵一台远程的机架构就是当你当你看不到那台机架构的时候

1470
01:00:43,000 --> 01:00:50,000
怎么才能操作它去去探测远程机架构的状态啊去配置远程机架构的功能

1471
01:00:50,000 --> 01:00:56,000
然后把你的软件通过一个非图形化的方式去部署到那台机架构上

1472
01:00:56,000 --> 01:01:02,000
然后才能去考虑怎么样把它运行起来之类的

1473
01:01:02,000 --> 01:01:06,000
而这些东西其实都是跟编程没有什么直接关系的

1474
01:01:06,000 --> 01:01:09,000
嗯对可以这么说吧

1475
01:01:09,000 --> 01:01:17,000
对就是如果你习惯了在一个 ID 里面写出一个程序然后点一下 ID 的那个 PlayButton

1476
01:01:17,000 --> 01:01:19,000
然后这个程序就跑起来的话

1477
01:01:19,000 --> 01:01:28,000
那么可能到这个点上你对于怎样才能让这个程序在一个远程的计算机上跑起来是莽然无知的

1478
01:01:28,000 --> 01:01:32,000
这一块就是非常需要需要 DevOps 掌握

1479
01:01:32,000 --> 01:01:42,000
对换句话说就是 DevOps 其实是需要一个软件工程师成为一个计算机行业的文艺复兴人

1480
01:01:42,000 --> 01:01:43,000
就他得什么都会

1481
01:01:43,000 --> 01:01:48,000
然后包括你得如果拿什么拿餐厅来来做比较好了

1482
01:01:48,000 --> 01:01:50,000
你得是成为一个小餐馆的老板

1483
01:01:50,000 --> 01:01:56,000
你得从采购原材料开始到制作原材料到上菜到包括回收盘子洗碗

1484
01:01:56,000 --> 01:01:58,000
你就是全套都得都得搞定

1485
01:01:58,000 --> 01:02:03,000
而不是说像一个五星级酒店大厨你只用掌勺就可以了

1486
01:02:03,000 --> 01:02:06,000
对对所以这种要求还是蛮高的

1487
01:02:06,000 --> 01:02:09,000
可能说到这儿就有些人已经忘而却步了

1488
01:02:09,000 --> 01:02:11,000
就我不要当 DevOps 我好好写我的程序

1489
01:02:11,000 --> 01:02:12,000
好累啊

1490
01:02:12,000 --> 01:02:17,000
对这好像有些后端程序员会说哎前面那套不要搞

1491
01:02:17,000 --> 01:02:26,000
或者是对回到那个 Computer Science 的专业生的比喻就是哎呀我干嘛要学运动啊

1492
01:02:26,000 --> 01:02:33,000
其实可能有时候我也会有这样的想法就是这个东西坏了

1493
01:02:33,000 --> 01:02:40,000
你要我修但其实我是没有那么多时间精力或者是 know how 去搞定这件事情的

1494
01:02:40,000 --> 01:02:48,000
嗯哼嗯对这可能对这个广度的需求会比较高

1495
01:02:48,000 --> 01:02:51,000
但对深度的需求其实也没有那么多

1496
01:02:51,000 --> 01:02:59,000
比如说你可能并不真正的需要完全理解这个 Linux 的什么内核才能做 DevOps 对吧

1497
01:02:59,000 --> 01:03:05,000
其实也没有那个必要就是说并不是说我们刚才提到的东西你都要每个都要完全精通而已

1498
01:03:05,000 --> 01:03:11,000
啊你就是有时候可能只是作为一个工具的需求你知道出了问题怎么去解决它你并不

1499
01:03:11,000 --> 01:03:18,000
但如果你有兴趣或者有这个学有余力啊你愿意去去再钻研某一个自己的短板其实当然也是很好的

1500
01:03:18,000 --> 01:03:22,000
但是我觉得也不要想得那么太可怕吧我觉得

1501
01:03:22,000 --> 01:03:30,000
嗯而且还有很重要的一点就是要掌握一门 script language 或者是几门 script language

1502
01:03:30,000 --> 01:03:35,000
除了除了 share script 之外还要掌握什么 ruby 啊 python 之类的

1503
01:03:35,000 --> 01:03:41,000
因为我们接下来提到很多 optu 其实都是逃不了的对逃不掉的

1504
01:03:41,000 --> 01:03:47,000
好那么开始介绍这些运维的一些常见的工具吧好了

1505
01:03:47,000 --> 01:03:55,000
好呀最简单的一个也是可能比较稍微古老或者是这个没有那么吓人的一个工具叫做 fabric

1506
01:03:56,000 --> 01:03:59,000
这又是我们 Pythonista 喜欢的东西了

1507
01:03:59,000 --> 01:04:08,000
对这是一个什么呢这是一个可以用 python 脚本语言来编程控制或者说你就写几个 python 脚本来

1508
01:04:08,000 --> 01:04:15,000
然后来控制这个远向某几台远程服务器发送指令的一个工具

1509
01:04:16,000 --> 01:04:17,000
可以怎么说

1510
01:04:17,000 --> 01:04:27,000
对其实它是非常简单的一个让你可以批量处理一堆远程计算机上

1511
01:04:27,000 --> 01:04:37,000
比如说在一堆远程计算机上同时运行一个程序然后看他们的看他们输出结果之类的这样一个很简单的工具

1512
01:04:38,000 --> 01:04:46,000
就是简单就是它可以让你通过 SSH 协议就其实它就是一个可编程的 SSH 客户方法可以这么讲

1513
01:04:46,000 --> 01:04:54,000
然后 Ruby 那边有一个叫做 capis channel 这可能这又是一个意大利词应该看起来像

1514
01:04:54,000 --> 01:05:05,000
的这么一个工具 capis channel 然后它也是利用了 Ruby 的这张比较强力的写 DSL 的功能

1515
01:05:05,000 --> 01:05:10,000
搞出这么一套东西就是它也是一个 Ruby Jam

1516
01:05:10,000 --> 01:05:16,000
然后也是可以定义一大堆在远程机器上跑起来的东西

1517
01:05:16,000 --> 01:05:25,000
诸如此类的只不过是 Ruby 这边的而且可能应该是要比 fabric 更强大一点我觉得

1518
01:05:25,000 --> 01:05:36,000
但是不管是这个叫什么 capis channel 和 fabric 也好它都有一个这个它是很简单的工具就是你只要理解 SSH 怎么回事

1519
01:05:36,000 --> 01:05:41,000
就基本上能够写能够用它来做一些自动化的工作但是它的问题在哪里呢

1520
01:05:41,000 --> 01:05:51,000
就是如果它要批量处理多台机器的话就同时处理多台机器的话它它要求那些机器的状态是一致的

1521
01:05:51,000 --> 01:05:56,000
对不然会出现什么问题呢就是你写一个脚本它可能

1522
01:05:56,000 --> 01:06:02,000
但你可以说用易服语句去判断它当前的状态是怎么样子但是总体来讲

1523
01:06:02,000 --> 01:06:18,000
如果你的这个操作多台机器的状态不一致那么你可能执行的每一条指令的成功也失败就不确定对吧这样的话你对接下来的要做的操作就会变得分支很多就管理起来并不方便

1524
01:06:19,000 --> 01:06:36,000
就是这一批工具这两个工具代表的这个抽象层级的工具所能帮你做的事情只是把你的一些日常或者经常需要用到的命令自动化而已

1525
01:06:36,000 --> 01:06:47,000
它并不能替你解决如果远程机器对于某一个指令的回响和你期望的不一样该怎么办这个问题

1526
01:06:47,000 --> 01:06:54,000
对其实在说这之前我们应该先说如果是手工做应该怎么样子才有一个比较明显的对比

1527
01:06:54,000 --> 01:06:55,000
OK

1528
01:06:55,000 --> 01:07:07,000
手工管理一个服务器怎么样一般就是说你通过什么 SSH 登录上去然后运行一堆指令把你的软件铺上去跑起来然后查看一下状态看是否正常对吧

1529
01:07:07,000 --> 01:07:22,000
这其实牵扯到一个问题就是你要想要成为 DiveOps 的话或者说你想要了解如何远程操作一台计算机的话最好的方法是什么呢是不是用一台真正意义上远程计算机呢就买一个 VPS

1530
01:07:22,000 --> 01:07:35,000
对啊这个就是那练手现在有很方便的这种什么第三方的云的工具国内有很多国外也有什么最近比较火的 Digital Ocean 它也很便宜

1531
01:07:35,000 --> 01:07:36,000
一个月好

1532
01:07:36,000 --> 01:07:37,000
你转了吗

1533
01:07:37,000 --> 01:07:40,000
5 块钱我有它的号但我还没我自己用

1534
01:07:40,000 --> 01:07:44,000
OK 我现在 Metafox.com 的域名是 Digital Ocean 上

1535
01:07:44,000 --> 01:07:46,000
你已经不在 Linode 上面了

1536
01:07:46,000 --> 01:07:50,000
对对后来 Linode 也是升级了吧

1537
01:07:50,000 --> 01:07:52,000
你是在它升级之前转的是吧

1538
01:07:52,000 --> 01:07:53,000
我是在它升级之前转

1539
01:07:53,000 --> 01:07:59,000
OK 就它升级之后其实两家的竞争力是差不多的就所以我们我就没有切了

1540
01:07:59,000 --> 01:08:00,000
对

1541
01:08:00,000 --> 01:08:06,000
然后传统的有 Linode

1542
01:08:06,000 --> 01:08:07,000
对

1543
01:08:07,000 --> 01:08:14,000
还有一些像国内的什么各种云青云什么还有什么阿里云

1544
01:08:14,000 --> 01:08:26,000
这里有一个问题就是我们所在这里推荐的是一个真正是一台真正意义上的计算机而不是像 Google App Engine 或者是我不知道阿里云是干嘛

1545
01:08:27,000 --> 01:08:37,000
阿里云跟 Yamaha 训练的差不多对也不对吧就是它有很庞大的产品的子雷但是它的虚拟机是跟 EC 2 差不多

1546
01:08:37,000 --> 01:08:38,000
OK

1547
01:08:38,000 --> 01:08:50,000
OK 对所以比较重要的是拥有一台真正意义上的被虚拟出来的计算机而不是仅仅是一个能够刨你的程序的容器

1548
01:08:50,000 --> 01:08:59,000
两者还是有蛮大的区别的后者对于 Devops 功力的培养可能没有什么注意吧也是有了但没有那么多

1549
01:08:59,000 --> 01:09:10,000
所以最原始的方法就是你直接登录到某一台远程的计算机或者是 VPS 上面去去做一些操作然后查看运行状态刚刚就讲了

1550
01:09:10,000 --> 01:09:19,000
然后但如果你有不止一台的话你有四五台的时候这个整个你每台都重复这个操作就比较繁琐嘛

1551
01:09:19,000 --> 01:09:33,000
然后像 Fabric 这种工具就是说能够帮你去自动化掉重复的那部分但是如果你的机器多了多了之后这样就不可避免的有些机器的状态可能并不是非常一致这个时候你家一些更加高级的

1552
01:09:34,000 --> 01:09:49,000
或者说这个功能更强大然后抽象成绩更高的一些工具来帮助你解决这个数量庞大的这个服务器的管理吧一般怎么一般怎么说就是说如果你假设你有超过十台吧

1553
01:09:49,000 --> 01:09:56,000
比如说这个数目之后你再用像用 Fabric 这种工具来管理就可能不是那么有效了

1554
01:09:56,000 --> 01:10:11,000
对那个有一个数字是人类同一时间可以关注到的物体的最高数量说什么七五到七对我觉得其实超过五台基本上就有点力不从心对确实是这样

1555
01:10:11,000 --> 01:10:18,000
然后就会引入像这个叫 Puppet 和 Chef 这种叫做 configuration management tool

1556
01:10:19,000 --> 01:10:21,000
配置管理工具

1557
01:10:21,000 --> 01:10:42,000
对 puppet 就是小木偶对吧然后 chef 就是厨师对这其实也是两 chef 这个 metaphor 可能还更圈一点就是更绕人一点就是 chef 其实他的 metaphor 是你给他准备了一个菜单

1558
01:10:42,000 --> 01:10:57,000
然后 chef 可以按单做菜就 chef 这个工具可以给你按单做菜而 puppet 这个名字的 metaphor 则是你管理那些计算机就好像去操纵一些木偶一样提前木偶的对提前木偶

1559
01:10:58,000 --> 01:11:02,000
那么他们两个其实都是目前是竞争关系吧应该说

1560
01:11:02,000 --> 01:11:14,000
一直都是吧对就是经常会有 python 还是 rubypuppet 还是 chef 之类的这样也是一个 flame war 的一个起点又一个胜战对又一个胜战

1561
01:11:14,000 --> 01:11:21,000
但我觉得 puppet 和 chef 好像是没有那么没有那么炒起来的吧因为两者还是太相像了

1562
01:11:22,000 --> 01:11:32,000
他们是都是 ruby 社区里面的东西嘛然后他们只是说在社区哲学上有所不同但是因为我们反正是处于敌对阵营也无所谓了

1563
01:11:32,000 --> 01:11:36,000
但是他们在干什么呢我觉得这个是更加重要的一个问题

1564
01:11:37,000 --> 01:11:42,000
没错你解释一下还是你来吧

1565
01:11:43,000 --> 01:11:46,000
他们的干

1566
01:11:46,000 --> 01:11:55,000
好吧就是你有一个我们可以把一台远程的计算机想象一想象成一个原始材料

1567
01:11:55,000 --> 01:12:01,000
然后如果我们沿用 chef 的 metaphor 的话那么就是我要提供一个菜单

1568
01:12:01,000 --> 01:12:10,000
在这个菜单上面我详细的不是菜单应该叫做菜那个东西叫什么

1569
01:12:12,000 --> 01:12:20,000
做菜的指令菜谱对菜谱 sorry 就是我要准备一个菜谱对告诉你在

1570
01:12:20,000 --> 01:12:29,000
为了要把这个原材料做成一个最终能用的菜也就是一个最终能够跑应用程序的环境

1571
01:12:29,000 --> 01:12:36,000
我需要在整个过程中做什么比如说我需要安装哪一些必要的组件

1572
01:12:36,000 --> 01:12:47,000
需要在需要这些组件的什么版本然后每一个组件安装之后需要做哪些配置

1573
01:12:47,000 --> 01:12:57,000
以及把所有的组件的配置做好了之后怎样从什么地方把我的写好的一个程序上传上去

1574
01:12:57,000 --> 01:13:02,000
然后把上传上去的程序又要开启什么样的服务做哪些配置

1575
01:13:02,000 --> 01:13:11,000
所有这些都一步一步写下来然后交给 chef 说 chef 这里是我的菜谱你把我的服务器弄好吧

1576
01:13:11,000 --> 01:13:17,000
然后 chef 就会或者 puppet 就会替你完成这些事情大概是这么一个意思

1577
01:13:17,000 --> 01:13:23,000
所以他们比之于像之前提到 fabric 工具的进步之处在哪里

1578
01:13:23,000 --> 01:13:34,000
就是他提供了一种比如说你用 fabric 就有点像写一个程序说

1579
01:13:34,000 --> 01:13:43,000
比如说你在 chef 里面反过来吧比如说在 fabric 里面你要写说

1580
01:13:43,000 --> 01:13:53,000
然后首先远程用 ssh 远程连接到这一台计算机上然后在那边执行一个指令看看这个计算机的目前内核版本是什么

1581
01:13:53,000 --> 01:13:58,000
然后比较这个内核版本和我期望的内核版本是不是一致不一致的话

1582
01:13:58,000 --> 01:14:02,000
那我要执行另外一条指令把这个内核版本升级到什么地方

1583
01:14:02,000 --> 01:14:10,000
然后再看看这台计算机上有哪些安装好的包然后比较这些包和我期待的是否一致

1584
01:14:10,000 --> 01:14:14,000
如果不一致的话再执行另外一条指令把这些包安装好

1585
01:14:14,000 --> 01:14:23,000
所有这些繁琐操作其实都是为了完成一件事情就是安装某一个特定版本的软件包在某一个特定版本内核上

1586
01:14:23,000 --> 01:14:30,000
那么在 chef 这边你所做的一切都简化为了一句你告诉 chef 说这台计算机上应该有这个内核

1587
01:14:30,000 --> 01:14:34,000
然后应该有那个软件包然后 chef 就会自动帮你完成这一切

1588
01:14:34,000 --> 01:14:44,000
所以它其实有一个从所谓 imperative 到 declarative 的就是从命令式向 declarative 的中文是什么

1589
01:14:44,000 --> 01:14:50,000
说明式的描述式的语言的这么一个进步这么一个转向吧

1590
01:14:50,000 --> 01:14:53,000
我觉得这是最重要的进步

1591
01:14:53,000 --> 01:14:55,000
对

1592
01:14:55,000 --> 01:15:05,000
这里可能有一个小区别要说明一下就是说像 fabric 这种的它的核心逻辑还是在就是所谓的控制那台电脑

1593
01:15:05,000 --> 01:15:11,000
比如说你用你的笔记本上操作 fabric 然后去向那个远程这样去发送指令

1594
01:15:11,000 --> 01:15:18,000
然后那个再执行就是你的控制逻辑还是在这个叫什么你的控制在本机上面对不是在服务器上面的

1595
01:15:19,000 --> 01:15:27,000
然后像 pub and chef 这两种我觉得大部分情况下它的那个控制逻辑其实是已经移交到了这个服务器上就在运行对吧

1596
01:15:27,000 --> 01:15:36,000
对因为你在本机上你所做的只是下命令而不是对或者说你做的只是描述你要达到什么样的效果

1597
01:15:36,000 --> 01:15:41,000
而不是你怎么样完成我想要达到的效果

1598
01:15:41,000 --> 01:15:42,000
嗯嗯

1599
01:15:42,000 --> 01:15:43,000
对

1600
01:15:43,000 --> 01:15:55,000
然后这两个工具都是 ruby 写的其实在相当长一段时间内这两个也就是在在那个 devop 这个市场上参与主导地位的一个工具

1601
01:15:55,000 --> 01:15:56,000
对 defecto stand out

1602
01:15:56,000 --> 01:16:09,000
对然后后来我们这个正不对就 python 这个阵营的这这这些哥们们终于站不住就是什么就是忍不住了

1603
01:16:09,000 --> 01:16:18,000
因为因为其实在这之前 ruby 在这个服务器运为这块其实并没有多少人在用吧照我的理解

1604
01:16:18,000 --> 01:16:25,000
其实这个语言是非常有意思的一个就是在 ruby on rails 出现之前 ruby 是一个没人理睬的语言吧

1605
01:16:25,000 --> 01:16:26,000
对对对

1606
01:16:26,000 --> 01:16:29,000
就那个时候什么 zoop 什么那个

1607
01:16:29,000 --> 01:16:31,000
就 python 是一个主导地位的语言

1608
01:16:31,000 --> 01:16:36,000
对呀当前当年 zoop 可是跟什么 j 2 e 不

1609
01:16:36,000 --> 01:16:39,000
j 1 java 一平分秋色的一个东西吧

1610
01:16:39,000 --> 01:16:53,000
你要在服务器端完成一个大型的应用软件好像在 ruby on rails 出现之前要么 java 要么就 python 要么就其他的什么更偏本的东西

1611
01:16:54,000 --> 01:17:02,000
但是 ruby on rails 出现之后就几乎一夜之间扳倒了整个开发社区的气氛

1612
01:17:02,000 --> 01:17:07,000
对然后我们就看到很多这种开发运为工具都是基于 ruby 来写的

1613
01:17:07,000 --> 01:17:16,000
而且就是在我还是 python 那个阵营的时候我曾经一度怀疑说哎呀是不是应该转向 ruby 那个阵营啊

1614
01:17:16,000 --> 01:17:21,000
那么多新的有意思的工具都是从那个 ruby 阵营过来的

1615
01:17:21,000 --> 01:17:23,000
等于那个时候 ruby 正在 hype 吗

1616
01:17:23,000 --> 01:17:25,000
关系 ruby 一直都在 hype

1617
01:17:27,000 --> 01:17:29,000
现在可能要弱一点了

1618
01:17:29,000 --> 01:17:31,000
因为有像什么 node 这种工具又起来了

1619
01:17:31,000 --> 01:17:34,000
所以还有 go 之类的

1620
01:17:34,000 --> 01:17:41,000
对对不过反正我觉得这么说还是很安全的

1621
01:17:41,000 --> 01:17:51,000
就是说正是因为像 ruby on rails 这种框架的崛起使得 ruby 在 devop 这个圈子流行起来

1622
01:17:51,000 --> 01:17:57,000
然后才出现了像 puppet 啊 chef 这种一系列的基于 ruby 这个工具吧

1623
01:17:57,000 --> 01:17:59,000
如果没有这个东西可能这一切都不会存在

1624
01:17:59,000 --> 01:18:04,000
没错所以 ruby on rails 其实是一个功不可没的起点

1625
01:18:05,000 --> 01:18:08,000
然后当然 python 是一名闲着啊

1626
01:18:08,000 --> 01:18:14,000
后来就出了两套新一代的 configure mission management tool 吧

1627
01:18:14,000 --> 01:18:16,000
其中一个叫做 sort

1628
01:18:16,000 --> 01:18:19,000
然后另外一个叫做 ansible

1629
01:18:19,000 --> 01:18:22,000
ansible 是一个缩写吧

1630
01:18:22,000 --> 01:18:25,000
而且不是什么

1631
01:18:25,000 --> 01:18:28,000
你这么一问我还真不知道可以查一下

1632
01:18:28,000 --> 01:18:29,000
ansible 到底什么意思

1633
01:18:30,000 --> 01:18:35,000
ansible is simple IT automation

1634
01:18:35,000 --> 01:18:37,000
wait a second

1635
01:18:37,000 --> 01:18:39,000
le 是哪来的

1636
01:18:44,000 --> 01:18:47,000
对计算机界有两件最难的事情

1637
01:18:47,000 --> 01:18:49,000
一件是 caching validation

1638
01:18:49,000 --> 01:18:51,000
另一件就是 naming things

1639
01:18:51,000 --> 01:18:58,000
而 rbj 所有更难的一件事情就是 figure out 这个东西是怎么被命名的

1640
01:18:59,000 --> 01:19:01,000
对

1641
01:19:01,000 --> 01:19:04,000
这个就不去追究什么意思了

1642
01:19:04,000 --> 01:19:06,000
我也没有查到

1643
01:19:06,000 --> 01:19:09,000
但是这两个都有一个共同点

1644
01:19:09,000 --> 01:19:10,000
就说

1645
01:19:10,000 --> 01:19:11,000
应该是说

1646
01:19:11,000 --> 01:19:17,000
不先说 puppet 和 chef 他们的编写脚本的东西都是使用 ruby 的脚本

1647
01:19:17,000 --> 01:19:19,000
然后用 DSL 的方法来写

1648
01:19:19,000 --> 01:19:21,000
我靠我查到了

1649
01:19:21,000 --> 01:19:22,000
是什么

1650
01:19:22,000 --> 01:19:25,000
它居然是 n 得游戏里面的 ansible

1651
01:19:25,000 --> 01:19:26,000
什么呀

1652
01:19:26,000 --> 01:19:31,000
有一个非常非常非常非常 awesome 史诗级别的科幻小说

1653
01:19:31,000 --> 01:19:32,000
如果你没看过的话

1654
01:19:32,000 --> 01:19:33,000
一定要去给我看

1655
01:19:33,000 --> 01:19:36,000
叫做安德的游戏

1656
01:19:36,000 --> 01:19:40,000
去年被拍成了电影

1657
01:19:40,000 --> 01:19:41,000
谁写的

1658
01:19:41,000 --> 01:19:44,000
Skull Cart

1659
01:19:44,000 --> 01:19:48,000
卡德吧

1660
01:19:48,000 --> 01:19:49,000
我记得中文好像

1661
01:19:49,000 --> 01:19:51,000
我看了安德的游戏

1662
01:19:51,000 --> 01:19:52,000
sorry 原谅我语的伦次

1663
01:19:52,000 --> 01:19:53,000
原谅我语的伦次

1664
01:19:53,000 --> 01:19:56,000
因为这部科幻小说实在是太史诗级别了

1665
01:19:56,000 --> 01:20:00,000
作者应该叫 Skull Cart

1666
01:20:00,000 --> 01:20:01,000
斯科特卡德

1667
01:20:01,000 --> 01:20:04,000
然后他写了一系列

1668
01:20:04,000 --> 01:20:07,000
由一个

1669
01:20:07,000 --> 01:20:08,000
也不是小男孩

1670
01:20:08,000 --> 01:20:11,000
但是在安德的游戏这部书里面

1671
01:20:11,000 --> 01:20:13,000
他还是一个小男孩

1672
01:20:13,000 --> 01:20:16,000
的为主角的科幻小说

1673
01:20:16,000 --> 01:20:20,000
然后这一部科幻小说第一卷就叫做 Enderscape

1674
01:20:20,000 --> 01:20:21,000
就是终结者的游戏

1675
01:20:21,000 --> 01:20:24,000
但是中文一般翻译成安德的游戏

1676
01:20:24,000 --> 01:20:26,000
因为主角就叫 Enders

1677
01:20:26,000 --> 01:20:28,000
我们做的主角叫 Enders

1678
01:20:28,000 --> 01:20:32,000
然后他是非常好看的一部科幻电影

1679
01:20:32,000 --> 01:20:34,000
2003 年的时候

1680
01:20:34,000 --> 01:20:36,000
这个 sorry

1681
01:20:36,000 --> 01:20:41,000
他是非常好看的一部科幻小说

1682
01:20:41,000 --> 01:20:42,000
然后 2003 年的时候

1683
01:20:42,000 --> 01:20:44,000
他被翻拍成了电影

1684
01:20:44,000 --> 01:20:45,000
但是电影没有原著的

1685
01:20:45,000 --> 01:20:46,000
十分之一吧

1686
01:20:46,000 --> 01:20:47,000
我确定

1687
01:20:47,000 --> 01:20:48,000
视频效果是很炫了

1688
01:20:48,000 --> 01:20:53,000
但是原著里面的很多非常让人激动

1689
01:20:53,000 --> 01:20:55,000
或者哪知难过的片段

1690
01:20:55,000 --> 01:20:57,000
其实都没有呈现的很好

1691
01:20:57,000 --> 01:20:58,000
然后这一部

1692
01:20:58,000 --> 01:21:00,000
这不是所有小说改编成电影的

1693
01:21:00,000 --> 01:21:03,000
然后小说读过小说的人都这种感觉吗

1694
01:21:03,000 --> 01:21:04,000
也不近人吧

1695
01:21:04,000 --> 01:21:07,000
有些电影让我觉得比小说要好

1696
01:21:07,000 --> 01:21:08,000
OK

1697
01:21:08,000 --> 01:21:10,000
但一时想不出来

1698
01:21:10,000 --> 01:21:13,000
但总之这部电影里面有

1699
01:21:13,000 --> 01:21:17,000
就是讲述的是人类和一个虫族

1700
01:21:17,000 --> 01:21:18,000
对

1701
01:21:18,000 --> 01:21:22,000
就有点像《星之争霸》里面的 Zerg 的感觉

1702
01:21:22,000 --> 01:21:24,000
但是这部小说出来的时候

1703
01:21:24,000 --> 01:21:26,000
1985 年的小说

1704
01:21:26,000 --> 01:21:28,000
那个时候还远远没有 Zerg

1705
01:21:28,000 --> 01:21:29,000
什么星舰

1706
01:21:29,000 --> 01:21:30,000
Star Trooper

1707
01:21:30,000 --> 01:21:34,000
星舰散兵那部科幻电影可能都没有出来

1708
01:21:34,000 --> 01:21:35,000
然后

1709
01:21:35,000 --> 01:21:39,000
在里面他描写了一个人类和遥远的虫族之间的战争

1710
01:21:39,000 --> 01:21:43,000
然后其中里面有一种超光速通信工具

1711
01:21:43,000 --> 01:21:46,000
就叫做安塞波

1712
01:21:46,000 --> 01:21:48,000
所以这个名字是不来

1713
01:21:48,000 --> 01:21:49,000
OK

1714
01:21:49,000 --> 01:21:52,000
我立刻爱上了这个软件

1715
01:21:53,000 --> 01:21:55,000
不过其实这里也说到了一个问题

1716
01:21:55,000 --> 01:21:56,000
就是说

1717
01:21:56,000 --> 01:21:59,000
为什么他们要做这个东西

1718
01:21:59,000 --> 01:22:01,000
其实也是因为

1719
01:22:01,000 --> 01:22:04,000
他们很多人抱怨 Puppet 和 Chef 太慢了

1720
01:22:04,000 --> 01:22:08,000
如果你管理什么上千台机器的时候

1721
01:22:08,000 --> 01:22:10,000
那个什么归宿

1722
01:22:10,000 --> 01:22:11,000
就是你运行完一个脚本

1723
01:22:11,000 --> 01:22:13,000
肯定要半个小时这样

1724
01:22:13,000 --> 01:22:16,000
他说要从根本上解决这个问题

1725
01:22:16,000 --> 01:22:18,000
就不能那些救不回来了

1726
01:22:18,000 --> 01:22:19,000
你要重新

1727
01:22:19,000 --> 01:22:21,000
要什么 Start over

1728
01:22:21,000 --> 01:22:22,000
你才可以解决这个问题

1729
01:22:22,000 --> 01:22:25,000
然后就有这么两个 Python 社取来的工具

1730
01:22:25,000 --> 01:22:26,000
一个叫做 Sort

1731
01:22:26,000 --> 01:22:27,000
一个叫安塞波

1732
01:22:27,000 --> 01:22:28,000
刚才你提了

1733
01:22:28,000 --> 01:22:30,000
然后他们的一个特点

1734
01:22:30,000 --> 01:22:32,000
就是用户看到的一个特点

1735
01:22:32,000 --> 01:22:34,000
就是他们的配置语言

1736
01:22:34,000 --> 01:22:35,000
是 Yaml

1737
01:22:37,000 --> 01:22:38,000
Yaml 就是

1738
01:22:38,000 --> 01:22:40,000
Yet another markup language

1739
01:22:41,000 --> 01:22:43,000
就是一个比 XML 简单

1740
01:22:43,000 --> 01:22:45,000
然后比 Jason 强大

1741
01:22:45,000 --> 01:22:47,000
然后是一个 Jason 的超级的

1742
01:22:47,000 --> 01:22:49,000
这么一个配置语言

1743
01:22:49,000 --> 01:22:51,000
而且他最大优点是人类读的时候

1744
01:22:51,000 --> 01:22:52,000
也非常舒畅

1745
01:22:52,000 --> 01:22:53,000
就可以手写

1746
01:22:53,000 --> 01:22:56,000
然后可以裸眼读

1747
01:22:56,000 --> 01:22:57,000
不需要接触任何工具

1748
01:22:57,000 --> 01:22:58,000
比较爽

1749
01:22:58,000 --> 01:23:00,000
读 XML 让人想死对吧

1750
01:23:00,000 --> 01:23:01,000
读 Jason 越好

1751
01:23:01,000 --> 01:23:03,000
但是读 Yaml 就非常像

1752
01:23:03,000 --> 01:23:05,000
读一个正常的人类文档

1753
01:23:05,000 --> 01:23:07,000
Jason 读起来还行

1754
01:23:07,000 --> 01:23:08,000
就是写起来太费劲了

1755
01:23:08,000 --> 01:23:09,000
各种限制比较多

1756
01:23:09,000 --> 01:23:11,000
比如说不能加注释

1757
01:23:11,000 --> 01:23:13,000
然后 key 必须要扩起来

1758
01:23:13,000 --> 01:23:14,000
然后之类的

1759
01:23:16,000 --> 01:23:17,000
这个跟 PubPy 和 Ship

1760
01:23:17,000 --> 01:23:19,000
他们起码在用的时候

1761
01:23:19,000 --> 01:23:20,000
有一个很鲜明的对比

1762
01:23:20,000 --> 01:23:21,000
就是 PubPy 和 Ship

1763
01:23:21,000 --> 01:23:22,000
他们都是用 Ruby 的

1764
01:23:22,000 --> 01:23:24,000
又是一个 class 文件

1765
01:23:25,000 --> 01:23:28,000
然后这里就有一个取舍的好

1766
01:23:28,000 --> 01:23:29,000
或者说你想为什么

1767
01:23:29,000 --> 01:23:32,000
Python 社区不用 Python 写呢

1768
01:23:32,000 --> 01:23:33,000
当然其中一个主要的原因

1769
01:23:33,000 --> 01:23:36,000
是因为 Python 写 DSL 并不方便

1770
01:23:36,000 --> 01:23:38,000
然后语法限制比较多

1771
01:23:38,000 --> 01:23:41,000
Python 其实本身就有点像 DSL

1772
01:23:44,000 --> 01:23:46,000
或者我觉得我知道

1773
01:23:46,000 --> 01:23:47,000
这个描述可能非常怪异

1774
01:23:47,000 --> 01:23:50,000
但 Python 给人的感觉就是

1775
01:23:51,000 --> 01:23:53,000
它明明是一种泛用的变成语言

1776
01:23:53,000 --> 01:23:54,000
但是你在写它的时候

1777
01:23:54,000 --> 01:23:57,000
就好像觉得自己在写某一种

1778
01:23:57,000 --> 01:23:58,000
英文

1779
01:23:58,000 --> 01:24:00,000
某一种不那么像

1780
01:24:00,000 --> 01:24:03,000
像写程序的程序

1781
01:24:03,000 --> 01:24:06,000
而 DSL 给人的感觉其实也是这样

1782
01:24:07,000 --> 01:24:10,000
但问题是说 Python 它的语法限制比较多

1783
01:24:10,000 --> 01:24:13,000
比如说它对缩进有要求

1784
01:24:13,000 --> 01:24:16,000
然后对 block 也有要求

1785
01:24:16,000 --> 01:24:18,000
就不像 Ruby 的语法那么灵活

1786
01:24:18,000 --> 01:24:20,000
这样的话作为一个配置工具

1787
01:24:20,000 --> 01:24:23,000
你要求用户学的东西就比较多了

1788
01:24:23,000 --> 01:24:26,000
但是说我也一直没搞明白这个的点

1789
01:24:26,000 --> 01:24:30,000
因为你始终还是要学 Python 这个语言才能用的

1790
01:24:32,000 --> 01:24:33,000
不过它用 Yaml

1791
01:24:33,000 --> 01:24:36,000
它用 Yaml 也是有一个比较明显的好处的

1792
01:24:36,000 --> 01:24:40,000
就是说它可以比较方便的

1793
01:24:40,000 --> 01:24:42,000
用机器去读这些配置文件

1794
01:24:42,000 --> 01:24:44,000
然后用机器去处理它

1795
01:24:44,000 --> 01:24:47,000
因为这和 Ruby 的那种方式就不太一样

1796
01:24:47,000 --> 01:24:48,000
因为 Ruby 那种的话

1797
01:24:48,000 --> 01:24:50,000
你必须运行过才可以

1798
01:24:50,000 --> 01:24:51,000
对吧

1799
01:24:51,000 --> 01:24:53,000
它并不是一个

1800
01:24:53,000 --> 01:24:54,000
怎么讲

1801
01:24:54,000 --> 01:24:56,000
它并不是一个 code is code

1802
01:24:56,000 --> 01:24:59,000
然后这个 data is data

1803
01:24:59,000 --> 01:25:00,000
它这两个是分离的

1804
01:25:00,000 --> 01:25:03,000
然后在 Python 的 Yaml 这种方式的话

1805
01:25:03,000 --> 01:25:04,000
就是 code is data

1806
01:25:04,000 --> 01:25:05,000
data is code

1807
01:25:05,000 --> 01:25:07,000
有点这个意思在里面

1808
01:25:07,000 --> 01:25:10,000
虽然 Yaml 本身并不能直接执行

1809
01:25:10,000 --> 01:25:12,000
还是要依靠 Python 去解析它

1810
01:25:12,000 --> 01:25:13,000
对

1811
01:25:13,000 --> 01:25:15,000
而且我觉得另外一个优点就是

1812
01:25:15,000 --> 01:25:17,000
在 Puppet Chef 里面你可以

1813
01:25:17,000 --> 01:25:18,000
因为它是 DSL

1814
01:25:18,000 --> 01:25:20,000
它毕竟还是 Ruby

1815
01:25:20,000 --> 01:25:22,000
你还是可以编程的

1816
01:25:22,000 --> 01:25:24,000
而写 Yaml 的时候它会强迫你

1817
01:25:24,000 --> 01:25:25,000
或者说它会提示你

1818
01:25:25,000 --> 01:25:26,000
不能够编程

1819
01:25:26,000 --> 01:25:28,000
对你不能再编程了

1820
01:25:28,000 --> 01:25:30,000
这个地方你该 Declarative

1821
01:25:30,000 --> 01:25:31,000
给我好好 Declarative

1822
01:25:31,000 --> 01:25:33,000
你不要再像写 Chef

1823
01:25:33,000 --> 01:25:35,000
或 Puppet 脚本的时候

1824
01:25:35,000 --> 01:25:37,000
你可以加入一些私货

1825
01:25:37,000 --> 01:25:38,000
你可以说这个地方

1826
01:25:38,000 --> 01:25:39,000
我要做一些东西

1827
01:25:39,000 --> 01:25:41,000
而因为我可以

1828
01:25:41,000 --> 01:25:42,000
所以我要做

1829
01:25:42,000 --> 01:25:44,000
但这个就是有时候是一个

1830
01:25:44,000 --> 01:25:45,000
怎么讲

1831
01:25:45,000 --> 01:25:49,000
一个可维护性和利用性之间的权衡

1832
01:25:49,000 --> 01:25:51,000
因为其实如果你真的去用

1833
01:25:51,000 --> 01:25:53,000
那个 Ansible 这种

1834
01:25:53,000 --> 01:25:55,000
因为我用 Solid 没有用过

1835
01:25:55,000 --> 01:25:56,000
就是我用过 Ansible

1836
01:25:56,000 --> 01:25:57,000
就是去做一些部署

1837
01:25:57,000 --> 01:25:59,000
其实你真的用的话会发现

1838
01:25:59,000 --> 01:26:00,000
你有时候还是逃不掉

1839
01:26:00,000 --> 01:26:02,000
要做一些比如说简单的

1840
01:26:02,000 --> 01:26:03,000
什么循环啊

1841
01:26:03,000 --> 01:26:05,000
那种批量的操作的时候

1842
01:26:05,000 --> 01:26:06,000
你还是用很坑爹的

1843
01:26:06,000 --> 01:26:07,000
用那个 Yaml 的语法

1844
01:26:07,000 --> 01:26:09,000
去写一些东西

1845
01:26:09,000 --> 01:26:10,000
但是这个好处就是说

1846
01:26:10,000 --> 01:26:12,000
你知道那里是在干嘛

1847
01:26:12,000 --> 01:26:14,000
然后你用比较好的判断

1848
01:26:14,000 --> 01:26:16,000
用程序去判断它的状态

1849
01:26:16,000 --> 01:26:20,000
但是写起来就比较费劲

1850
01:26:20,000 --> 01:26:21,000
然后那个语法

1851
01:26:21,000 --> 01:26:23,000
因为它并不是一个完整的

1852
01:26:23,000 --> 01:26:24,000
编程语言

1853
01:26:24,000 --> 01:26:26,000
就很怪异的一个状态

1854
01:26:26,000 --> 01:26:27,000
但是这个时候

1855
01:26:27,000 --> 01:26:30,000
你如果用 Ruby 这种方式去写的话

1856
01:26:30,000 --> 01:26:31,000
就会爽很多

1857
01:26:31,000 --> 01:26:32,000
只要你会 Ruby

1858
01:26:32,000 --> 01:26:33,000
你写个循环多简单

1859
01:26:33,000 --> 01:26:34,000
对吧

1860
01:26:34,000 --> 01:26:35,000
所有的语法你都知道

1861
01:26:35,000 --> 01:26:38,000
该操作怎么都很正常

1862
01:26:38,000 --> 01:26:40,000
所以这里是一个不同的

1863
01:26:40,000 --> 01:26:43,000
什么设计哲学的区别吧

1864
01:26:43,000 --> 01:26:44,000
而且我觉得这个问题

1865
01:26:44,000 --> 01:26:48,000
可能也不仅仅是在 Ansible 这边会有

1866
01:26:48,000 --> 01:26:51,000
你刚才说描述的情况让我想起了

1867
01:26:51,000 --> 01:26:52,000
就是 Angle.js

1868
01:26:52,000 --> 01:26:57,000
Angle.js 在很大一部分程度上是

1869
01:26:57,000 --> 01:27:01,000
试图去把 HML 的语意扩展出来

1870
01:27:01,000 --> 01:27:04,000
就是 Angle.js 可以自定义一个 HML tag

1871
01:27:04,000 --> 01:27:07,000
然后这个 HML tag 所呈现出来的东西

1872
01:27:07,000 --> 01:27:10,000
它的外观以及它的行为

1873
01:27:10,000 --> 01:27:15,000
可以通过 HML 和 CSS 和 JavaScore 去定义

1874
01:27:15,000 --> 01:27:17,000
但是你在定义过程中会发现

1875
01:27:17,000 --> 01:27:19,000
有时候你几乎是在用 HML 来编程

1876
01:27:19,000 --> 01:27:24,000
你会试图用 HML 写一些和逻辑相关的东西

1877
01:27:24,000 --> 01:27:26,000
这个让我觉得挺不爽的

1878
01:27:26,000 --> 01:27:29,000
但很显然这也不是 Ansible 的错

1879
01:27:29,000 --> 01:27:31,000
然后在 Ansible 这边这也不是 Yaml 的错

1880
01:27:31,000 --> 01:27:36,000
就是有时候有些场景逼迫你不得不这样做

1881
01:27:36,000 --> 01:27:41,000
而工具的切分则是相对来说比较分明的

1882
01:27:41,000 --> 01:27:45,000
你不可能在这里面有那么多的灵活性

1883
01:27:45,000 --> 01:27:50,000
如果你要尊重工具之间的区别的话

1884
01:27:50,000 --> 01:27:53,000
对这也是我比较担心的一个问题

1885
01:27:53,000 --> 01:27:56,000
特别是看到 Ansible 的模板

1886
01:27:56,000 --> 01:27:58,000
就是 Yaml 语法之后的一个问题

1887
01:27:58,000 --> 01:28:02,000
你知道我们之前也吐槽过 Java 程序学

1888
01:28:02,000 --> 01:28:04,000
因为 Java 的灵活性太差

1889
01:28:04,000 --> 01:28:09,000
也被迫不得已使用 XML 来编程了吗

1890
01:28:09,000 --> 01:28:10,000
对没错

1891
01:28:10,000 --> 01:28:17,000
我觉得可能 Yaml 如果他之后搞不好会陷入同样的困境

1892
01:28:17,000 --> 01:28:20,000
就是要用被迫要用 Yaml 来编程

1893
01:28:20,000 --> 01:28:22,000
所以其实这里要吐槽一下

1894
01:28:22,000 --> 01:28:28,000
其实为什么没有人用 Elisp 写一个配置工具

1895
01:28:28,000 --> 01:28:30,000
就没有这个问题了

1896
01:28:30,000 --> 01:28:33,000
这个真的是 Data is code code is data

1897
01:28:33,000 --> 01:28:34,000
这个还真有

1898
01:28:34,000 --> 01:28:40,000
有就是当然我不确定这个是不是你真的要的

1899
01:28:40,000 --> 01:28:48,000
但是你知道基于 JVM 的 Lisp dialect

1900
01:28:48,000 --> 01:28:55,000
有一个运为工具叫做 Pilot

1901
01:28:55,000 --> 01:28:58,000
就是用 closure 写的

1902
01:28:58,000 --> 01:29:02,000
他的配置文本其实就是他的运行脚本

1903
01:29:02,000 --> 01:29:04,000
脚本及配置及脚本

1904
01:29:04,000 --> 01:29:09,000
然后他的脚本也是可以当做 Data 来处理的

1905
01:29:09,000 --> 01:29:11,000
所以存在这个问题

1906
01:29:11,000 --> 01:29:12,000
对这个东西叫做 Pilot

1907
01:29:12,000 --> 01:29:14,000
但是因为他需要 Java dependency

1908
01:29:14,000 --> 01:29:18,000
就是你本来搞的东西可能已经非常庸种

1909
01:29:18,000 --> 01:29:20,000
然后还要加一个 Java dependency

1910
01:29:20,000 --> 01:29:23,000
对这个可能就是一个比较麻烦的问题

1911
01:29:23,000 --> 01:29:27,000
因为像你如果你一个东西是 JVM 的话

1912
01:29:27,000 --> 01:29:31,000
你首先目标机器上你至少得有一个才可以运行的对吧

1913
01:29:31,000 --> 01:29:36,000
然后 JVM 的启动那些也并不算得迅速

1914
01:29:36,000 --> 01:29:40,000
对一个那种如果你需要轻量级的做一些配置

1915
01:29:40,000 --> 01:29:42,000
其实我觉得可能不是特别好的一个选择

1916
01:29:42,000 --> 01:29:48,000
对所以 Pilot 不是非常适合你一些比较中等量级的

1917
01:29:48,000 --> 01:29:52,000
尤其是如果你要部署的东西本身跟 Java 没什么关系

1918
01:29:52,000 --> 01:29:56,000
涂这么一个 Java dependency 简直是 paying ass

1919
01:29:56,000 --> 01:29:58,000
对何必呢真的

1920
01:29:59,000 --> 01:30:03,000
OK 那说回 SAT 和 Answer 这两个东西

1921
01:30:03,000 --> 01:30:08,000
他们的还有对社会哲学上跟 Puppet 和 Chef 还有点不一样

1922
01:30:08,000 --> 01:30:09,000
没错

1923
01:30:09,000 --> 01:30:13,000
至少 SAT 这个东西是比较

1924
01:30:13,000 --> 01:30:19,000
SAT 其实有点像 Fabric 在某种程度上

1925
01:30:19,000 --> 01:30:23,000
只不过 SAT 会比较怎么说呢

1926
01:30:23,000 --> 01:30:26,000
就更加是 Fabric 的升级版本

1927
01:30:26,000 --> 01:30:30,000
就是 SAT 是基于 Zero MQ 的

1928
01:30:30,000 --> 01:30:33,000
其他的 Puppet Chef 也好全都是基于 SSH

1929
01:30:33,000 --> 01:30:36,000
它的底层传输线也都是 SSH

1930
01:30:36,000 --> 01:30:38,000
而 SAT 则是基于 Zero MQ 的

1931
01:30:38,000 --> 01:30:42,000
什么是 Zero MQ 你来解释一下

1932
01:30:42,000 --> 01:30:47,000
Zero MQ 你可以认为它是一个增强版的套节字 socket

1933
01:30:47,000 --> 01:30:50,000
然后它可以让你做

1934
01:30:50,000 --> 01:30:53,000
因为你知道我们通常用的 TCP socket 它是一个基于流的

1935
01:30:53,000 --> 01:30:58,000
基于 stream 的你不知道这个流的开头结尾怎么样

1936
01:30:58,000 --> 01:31:01,000
你得去读那个内容然后自己定义协议去判断

1937
01:31:01,000 --> 01:31:04,000
然后 Zero MQ 的话它是基于 Message 就是基于消息的

1938
01:31:04,000 --> 01:31:07,000
消息的话就是一个有一个固定的

1939
01:31:07,000 --> 01:31:08,000
也不叫固定长度

1940
01:31:08,000 --> 01:31:12,000
它是你可以每一个消息之间它是有一个固定边界的

1941
01:31:12,000 --> 01:31:14,000
就是你知道消息之间消息怎么样

1942
01:31:14,000 --> 01:31:19,000
然后它可以让你做一些比较普通的这种 socket 做不到的事情

1943
01:31:19,000 --> 01:31:23,000
比如说它可以让你做一个什么 pubsub 啊

1944
01:31:23,000 --> 01:31:28,000
会做一个 Q 啊这种更加丰富多样的一个 top 结构

1945
01:31:28,000 --> 01:31:32,000
然后它的性能是非常不错的一个通讯工具

1946
01:31:32,000 --> 01:31:34,000
对 broadcast 之类的

1947
01:31:34,000 --> 01:31:37,000
当然它最大的败笔可能是用 C++写

1948
01:31:37,000 --> 01:31:41,000
它的安装和 E-Line 会比较麻烦

1949
01:31:41,000 --> 01:31:45,000
我记得我在什么地方读过 Zero MQ 的作者说

1950
01:31:45,000 --> 01:31:47,000
如果上天给他再来一次机会

1951
01:31:47,000 --> 01:31:49,000
他会选择用 C 来重写 Zero MQ

1952
01:31:49,000 --> 01:31:56,000
ZMQ 那个原作者就自制一把他已经分就跟原那个分裂了嘛

1953
01:31:56,000 --> 01:31:58,000
他就自己真的用那个 C 再写

1954
01:31:58,000 --> 01:31:59,000
C 是重写的吗

1955
01:31:59,000 --> 01:32:01,000
叫 Nano Message

1956
01:32:01,000 --> 01:32:03,000
Nano MSG

1957
01:32:03,000 --> 01:32:04,000
就是那个人

1958
01:32:04,000 --> 01:32:06,000
作者之一把干的

1959
01:32:06,000 --> 01:32:10,000
然后 ZMQ 他现在是一个有一个公司来推动的事情

1960
01:32:10,000 --> 01:32:13,000
那个作者之一他出去搞了这个东西

1961
01:32:13,000 --> 01:32:15,000
然后他就改用 C 写了

1962
01:32:15,000 --> 01:32:17,000
对

1963
01:32:17,000 --> 01:32:24,000
总之 SAT 就是一个基于 Zero MQ 的这样一个 Message Bus

1964
01:32:24,000 --> 01:32:27,000
来写的这么一套配置工具

1965
01:32:27,000 --> 01:32:30,000
然后他其实也是要有一台 Master

1966
01:32:30,000 --> 01:32:33,000
然后 Client 在那边叫做 Minions

1967
01:32:33,000 --> 01:32:38,000
就那个 DisplaceableMe 里面的那个 Minions

1968
01:32:38,000 --> 01:32:40,000
一群小黄人的

1969
01:32:40,000 --> 01:32:41,000
香蕉人

1970
01:32:41,000 --> 01:32:42,000
然后它的工程

1971
01:32:42,000 --> 01:32:44,000
是小兵的意思吧对吧

1972
01:32:44,000 --> 01:32:46,000
Minions 我怎么记得

1973
01:32:46,000 --> 01:32:47,000
Minions 其实是普通嘛

1974
01:32:47,000 --> 01:32:51,000
就是我的控我手下的小罗罗

1975
01:32:51,000 --> 01:32:53,000
被我控制的小罗罗对这个词

1976
01:32:53,000 --> 01:32:59,000
我记得这个词我是从 Dungeon Keeper 里面学的

1977
01:32:59,000 --> 01:33:01,000
又暴露年龄了对

1978
01:33:01,000 --> 01:33:05,000
然后 SAT 是一个相对来说

1979
01:33:05,000 --> 01:33:07,000
要比 Puppet and Chef 简单多的工具

1980
01:33:07,000 --> 01:33:12,000
它整个安装过程就是在 Master 上安一个包

1981
01:33:12,000 --> 01:33:14,000
然后在 Client 上安一个包

1982
01:33:14,000 --> 01:33:15,000
然后就完了

1983
01:33:17,000 --> 01:33:20,000
这一点可能跟那个 Ansible 其实还区别蛮大的

1984
01:33:20,000 --> 01:33:24,000
就是 Ansible 其实是不需要在客户端上安装任何东西的

1985
01:33:24,000 --> 01:33:30,000
但是 Ansible 在服务端上安装的东西是专门要写本书的

1986
01:33:30,000 --> 01:33:32,000
也不是专门写本书

1987
01:33:32,000 --> 01:33:38,000
反正专门有一个教程来教你怎么在服务端上安装一个 Ansible

1988
01:33:38,000 --> 01:33:43,000
但是你可以不用装但是如果你是数量不多的情况下

1989
01:33:43,000 --> 01:33:46,000
对 Ansible 也是有企业级解决方案的

1990
01:33:46,000 --> 01:33:48,000
就是要装一个 Consult 什么的

1991
01:33:48,000 --> 01:33:52,000
其实这几个都是像 Puppet 也好 Chef 也好 SortAnsible

1992
01:33:52,000 --> 01:33:54,000
他们都是一个共同的一个方式

1993
01:33:54,000 --> 01:33:58,000
就是说他们有一个商业公司来提供这种商业级别的

1994
01:33:58,000 --> 01:34:00,000
就付费的商业支持

1995
01:34:00,000 --> 01:34:03,000
但同时又有一个开放的社区版本

1996
01:34:03,000 --> 01:34:07,000
所有的都是基于一个开源软件开源社区的

1997
01:34:07,000 --> 01:34:11,000
然后做一些商业化的支持的这么一种盈利模式

1998
01:34:11,000 --> 01:34:13,000
应该这么说是安全的

1999
01:34:17,000 --> 01:34:23,000
我记得 Sort 其实也是有所谓 Masterless Mining 的一个模式

2000
01:34:23,000 --> 01:34:27,000
我们这一期最大的问题就是我们两个其实都没有什么实际的使用经验

2001
01:34:27,000 --> 01:34:32,000
我只用过 AnsibleSort 其实我是没怎么用

2002
01:34:32,000 --> 01:34:35,000
应该是它比 Ansible 后出现吧

2003
01:34:35,000 --> 01:34:37,000
对其实 Sort 最简单的用法

2004
01:34:37,000 --> 01:34:39,000
我不知道 Ansible 能不能做这件事情

2005
01:34:39,000 --> 01:34:41,000
就是 Sort 最简单的用法就是比如说

2006
01:34:41,000 --> 01:34:44,000
Sort 专门有一个命令行工具叫 Sort

2007
01:34:44,000 --> 01:34:49,000
然后那个 hostname

2008
01:34:49,000 --> 01:34:53,000
hostname 可以用比如说 Asterisk

2009
01:34:53,000 --> 01:35:03,000
就是星号来指代所有可以被抵达的 Mining

2010
01:35:03,000 --> 01:35:06,000
然后 Sort 星号然后 Ping

2011
01:35:06,000 --> 01:35:12,000
然后所有的 Mining 都会执行 Ping 命令

2012
01:35:12,000 --> 01:35:17,000
就是它有最简单的一个用法就是直接用命令行下面的 Sort

2013
01:35:17,000 --> 01:35:22,000
然后你也可以在 Master 上面说所有的 MiningSort

2014
01:35:22,000 --> 01:35:26,000
所有的 Mining 一起来比如说 InstallPackageVim

2015
01:35:26,000 --> 01:35:31,000
然后所有的 Mining 也就会去安装 Vim

2016
01:35:31,000 --> 01:35:37,000
然后接下来就是你可以写一个脚本来批量完成一些

2017
01:35:38,000 --> 01:35:41,000
叫做 Formula

2018
01:35:41,000 --> 01:35:44,000
这个应该是跟 Brew 一样叫做 Formula

2019
01:35:44,000 --> 01:35:46,000
就是你可以执行一系列脚本

2020
01:35:46,000 --> 01:35:47,000
然后这些脚本叫做 Formula

2021
01:35:47,000 --> 01:35:51,000
就有点像 Puppet 或者是 Chef 那样

2022
01:35:51,000 --> 01:35:57,000
可以自动化完成一系列行动

2023
01:35:57,000 --> 01:36:00,000
所以为什么说实际用的时候

2024
01:36:00,000 --> 01:36:04,000
为什么这个 Ansible 也好还是这个 Sort 也好

2025
01:36:04,000 --> 01:36:08,000
会比 Puppet 和 Chef 跑起来更快呢

2026
01:36:08,000 --> 01:36:11,000
这里可能要稍微解释一下

2027
01:36:11,000 --> 01:36:16,000
因为也是刚才提到配置语言的一个关系

2028
01:36:16,000 --> 01:36:23,000
Puppet 和 Chef 每个机器上它要跑一遍脚本

2029
01:36:23,000 --> 01:36:27,000
它跑完之后才能知道这个状态是否达到你所有要的需求

2030
01:36:27,000 --> 01:36:31,000
每次不管做什么感动它都要把脚本完整从头到尾跑一遍

2031
01:36:31,000 --> 01:36:33,000
但是像 Sort 和 Ansible 这两个东西

2032
01:36:33,000 --> 01:36:39,000
它是因为它的配置文件是一个描述性的数字结构

2033
01:36:39,000 --> 01:36:43,000
这样的话它可以直接跳过中间已经满足的那些东西

2034
01:36:43,000 --> 01:36:46,000
它不需要每次都执行完脚本

2035
01:36:46,000 --> 01:36:49,000
对 我觉得这么描述应该是正确的吧

2036
01:36:49,000 --> 01:36:51,000
应该是正确的吧

2037
01:36:51,000 --> 01:36:59,000
所以可以有很大程度上可以减少每一台服务器上需要等待的时间

2038
01:36:59,000 --> 01:37:01,000
这样的话可以大幅度提高部署的速度

2039
01:37:01,000 --> 01:37:03,000
没错

2040
01:37:03,000 --> 01:37:08,000
然后这几个常见 Opto 我们就讲到这里

2041
01:37:08,000 --> 01:37:11,000
下面还有一些不常见的就带过吧

2042
01:37:11,000 --> 01:37:14,000
有个什么 Parl 的 Rex 你也写到有

2043
01:37:14,000 --> 01:37:19,000
对 Rex 是一个反正也是有集拥的那个

2044
01:37:19,000 --> 01:37:21,000
Parl 现在还有人在用吗

2045
01:37:21,000 --> 01:37:23,000
不要这样

2046
01:37:23,000 --> 01:37:25,000
这么说真的不太好

2047
01:37:25,000 --> 01:37:29,000
但是确实是不太流行的一个语言

2048
01:37:29,000 --> 01:37:34,000
我的前前公司安装的一套机房组件我忘了是什么

2049
01:37:34,000 --> 01:37:37,000
好像是某一套电源管理系统

2050
01:37:37,000 --> 01:37:41,000
电源管理系统对给了一批配置工具

2051
01:37:41,000 --> 01:37:43,000
就用 Parl 写的

2052
01:37:43,000 --> 01:37:46,000
感觉就是新的那些工具基本上都没有用 Parl 写的了

2053
01:37:46,000 --> 01:37:51,000
对 Parl 是一个 Parl 就是八十年的 Ruby

2054
01:37:51,000 --> 01:37:53,000
对一个 Hype 的劲

2055
01:37:53,000 --> 01:37:55,000
现在好像已经过期了

2056
01:37:55,000 --> 01:37:56,000
对

2057
01:37:56,000 --> 01:37:58,000
这么说应该是安全不会被人喷吧

2058
01:37:58,000 --> 01:38:00,000
那很难说 Parl 也是有

2059
01:38:00,000 --> 01:38:05,000
我想最近我用的一个 Parl 写的工具还蛮意外的

2060
01:38:05,000 --> 01:38:08,000
Linode 他不是开发了一个命令行工具

2061
01:38:08,000 --> 01:38:13,000
让他可以不用网页版不用登录网页可以直接操纵那个虚拟机吗

2062
01:38:13,000 --> 01:38:14,000
嗯

2063
01:38:14,000 --> 01:38:16,000
安装过程

2064
01:38:17,000 --> 01:38:22,000
你试一下在 Brew 里面安装的话你会发现那个安装过程超级超级长

2065
01:38:22,000 --> 01:38:25,000
他下载可能好几百个 Parl 的包

2066
01:38:25,000 --> 01:38:28,000
天哪我真是

2067
01:38:28,000 --> 01:38:30,000
Anyway

2068
01:38:30,000 --> 01:38:33,000
就是唯一一个现代一点的 Parl 的用户

2069
01:38:33,000 --> 01:38:35,000
给我感觉是这么糟糕

2070
01:38:35,000 --> 01:38:39,000
所以你可以想而知这个后面是多么惨烈的一个状况

2071
01:38:39,000 --> 01:38:40,000
Anyway

2072
01:38:40,000 --> 01:38:44,000
下面我们过渡到今天最最核心的内容

2073
01:38:44,000 --> 01:38:47,000
就是 containerization

2074
01:38:47,000 --> 01:38:49,000
当当当当当

2075
01:38:49,000 --> 01:38:52,000
这个先要解释一下 containerization 是什么玩意

2076
01:38:52,000 --> 01:38:54,000
简单上就是集装箱

2077
01:38:54,000 --> 01:38:57,000
对集装箱化

2078
01:38:57,000 --> 01:39:00,000
但是要解释集装箱可能要牵涉到

2079
01:39:00,000 --> 01:39:03,000
我们在讲集装箱化是在软件世界里面讲

2080
01:39:03,000 --> 01:39:05,000
对我们在讲一个 metaphor

2081
01:39:05,000 --> 01:39:10,000
但是其实在现实世界里面这个 metaphor 也是同样同等重要

2082
01:39:10,000 --> 01:39:15,000
对就可能是人类最重要的发明之一

2083
01:39:15,000 --> 01:39:17,000
不可能没有之一可能最重要的发明

2084
01:39:17,000 --> 01:39:20,000
不可能人类最重要的发明是火

2085
01:39:20,000 --> 01:39:22,000
好吧或者互联网

2086
01:39:22,000 --> 01:39:24,000
现代社会

2087
01:39:24,000 --> 01:39:25,000
集装箱是一个

2088
01:39:25,000 --> 01:39:27,000
如果有排前十的话

2089
01:39:27,000 --> 01:39:30,000
他可能至少能列到前五

2090
01:39:30,000 --> 01:39:33,000
好吧我们来排排好

2091
01:39:33,000 --> 01:39:35,000
算了

2092
01:39:35,000 --> 01:39:39,000
总之抽水马桶和集装箱可能是

2093
01:39:39,000 --> 01:39:43,000
彻底让我们变得文明起来的必要条件两个必要条件

2094
01:39:43,000 --> 01:39:47,000
如果没有集装箱就可能没有什么现代什么全球化

2095
01:39:47,000 --> 01:39:50,000
没有什么现代经济我们也没有办法在这里扯什么毒子

2096
01:39:50,000 --> 01:39:51,000
没错

2097
01:39:51,000 --> 01:39:53,000
为什么呢

2098
01:39:53,000 --> 01:39:57,000
因为曾经有这么一个时代

2099
01:39:57,000 --> 01:39:59,000
甚至离我们不是特别遥远

2100
01:39:59,000 --> 01:40:01,000
就是在二战

2101
01:40:01,000 --> 01:40:02,000
应该是二战之前

2102
01:40:02,000 --> 01:40:04,000
大概六十年

2103
01:40:04,000 --> 01:40:07,000
就是 1960 年之前

2104
01:40:07,000 --> 01:40:10,000
整个世界的航运系统

2105
01:40:10,000 --> 01:40:13,000
是怎么说呢

2106
01:40:13,000 --> 01:40:14,000
分散的

2107
01:40:14,000 --> 01:40:16,000
是没有一个统一的

2108
01:40:16,000 --> 01:40:18,000
没有就是这么说吧

2109
01:40:18,000 --> 01:40:20,000
六十年代之前

2110
01:40:20,000 --> 01:40:22,000
在集装箱发展出来之前

2111
01:40:22,000 --> 01:40:26,000
整个人类的物流系统是非常臃肿和零散的

2112
01:40:26,000 --> 01:40:29,000
对这里要可能要一个比较形象的描述

2113
01:40:29,000 --> 01:40:33,000
假设我到你在德国对吧

2114
01:40:33,000 --> 01:40:35,000
我在加拿大

2115
01:40:35,000 --> 01:40:37,000
你准备给我运十吨大米过来

2116
01:40:37,000 --> 01:40:38,000
举个例子

2117
01:40:38,000 --> 01:40:40,000
我们虽然不明白为什么这么干

2118
01:40:40,000 --> 01:40:42,000
但是可以讲一下这个过程

2119
01:40:42,000 --> 01:40:44,000
就是要会有多繁琐

2120
01:40:44,000 --> 01:40:47,000
首先你是在一个内陆的城市对吧

2121
01:40:47,000 --> 01:40:48,000
不是在海港

2122
01:40:48,000 --> 01:40:50,000
你得先把这十吨大米想办法装到一个车上面

2123
01:40:50,000 --> 01:40:52,000
或者火车上面

2124
01:40:52,000 --> 01:40:55,000
然后这个火车或者是卡车拖到德国的一个海港上

2125
01:40:55,000 --> 01:40:57,000
然后再装船再运到我这里来

2126
01:40:57,000 --> 01:40:59,000
我这里是个港口可能还好

2127
01:40:59,000 --> 01:41:01,000
但是就说你那段吧

2128
01:41:01,000 --> 01:41:04,000
应该主要的运输的难度都已经能够覆盖的到了

2129
01:41:04,000 --> 01:41:07,000
因为这个米是一个小颗粒嘛

2130
01:41:07,000 --> 01:41:08,000
散装的东西

2131
01:41:08,000 --> 01:41:09,000
对它是散的东西

2132
01:41:09,000 --> 01:41:12,000
首先第一步就是你要解决一个容器的问题

2133
01:41:12,000 --> 01:41:14,000
米是装在袋子里还是装在桶里呢

2134
01:41:14,000 --> 01:41:16,000
袋子和桶都有各有各的优点

2135
01:41:16,000 --> 01:41:18,000
比如说袋子比较灵活

2136
01:41:18,000 --> 01:41:20,000
你可以把几袋米叠在一起

2137
01:41:20,000 --> 01:41:22,000
但是袋子容易破

2138
01:41:22,000 --> 01:41:23,000
不过有这个问题

2139
01:41:23,000 --> 01:41:25,000
就是说不是所有的地方

2140
01:41:25,000 --> 01:41:27,000
因为你装袋子是要有成本的嘛

2141
01:41:27,000 --> 01:41:28,000
袋子首先本身是要成本

2142
01:41:28,000 --> 01:41:29,000
十吨大米你要装多大

2143
01:41:29,000 --> 01:41:33,000
你要装那种我们常见的那种什么几十公斤的一个小袋

2144
01:41:33,000 --> 01:41:35,000
你得装好几百包吧

2145
01:41:35,000 --> 01:41:36,000
几千包这样的

2146
01:41:36,000 --> 01:41:39,000
然后其实这个是一个你装填的时候就是一个成本

2147
01:41:39,000 --> 01:41:42,000
然后如果像这种成这种规模的运输的话

2148
01:41:42,000 --> 01:41:44,000
很多人他们都是所谓的用散货

2149
01:41:44,000 --> 01:41:48,000
就是你直接装到一个大的容器里面

2150
01:41:48,000 --> 01:41:50,000
然后就不用再分袋小装了

2151
01:41:50,000 --> 01:41:52,000
然后再装再运输这样

2152
01:41:52,000 --> 01:41:57,000
对但是散货的盒子又有一个又不能太大又不能太小

2153
01:41:57,000 --> 01:42:00,000
散货的话你要比如说你现在有个卡车对吧

2154
01:42:00,000 --> 01:42:02,000
你现在散货装那个卡车里面

2155
01:42:02,000 --> 01:42:06,000
你得想办法把那个东西那个米装到那个卡车里面去对吧

2156
01:42:06,000 --> 01:42:09,000
然后卡车有不同的尺寸对吧

2157
01:42:09,000 --> 01:42:11,000
你可能一个车装不了

2158
01:42:11,000 --> 01:42:12,000
你还得搞几个车

2159
01:42:12,000 --> 01:42:14,000
十吨可能体现不出来

2160
01:42:14,000 --> 01:42:16,000
有些卡车十吨就能装上来

2161
01:42:16,000 --> 01:42:17,000
那一百吨吧

2162
01:42:17,000 --> 01:42:19,000
我们可能要运好几卡车

2163
01:42:19,000 --> 01:42:21,000
可能卡车的形状还不一样

2164
01:42:21,000 --> 01:42:22,000
那你怎么办

2165
01:42:22,000 --> 01:42:24,000
然后你到了卡车到了海港边

2166
01:42:24,000 --> 01:42:26,000
如果你是散货的话

2167
01:42:26,000 --> 01:42:28,000
你得想办法怎么去装到这个一个船上

2168
01:42:28,000 --> 01:42:31,000
因为船不止装一百吨或者一十吨

2169
01:42:31,000 --> 01:42:35,000
你还得想怎么去和其他的东西共就是什么

2170
01:42:35,000 --> 01:42:38,000
就是怎么摆和其他的你船上其他物品

2171
01:42:38,000 --> 01:42:39,000
你先怎么摆如果你是散货的话

2172
01:42:39,000 --> 01:42:42,000
你还得考虑在海上的时候下房潮怎么办

2173
01:42:42,000 --> 01:42:45,000
路上有下雨怎么办对吧

2174
01:42:45,000 --> 01:42:46,000
对蛛虫怎么办

2175
01:42:46,000 --> 01:42:48,000
有人盗窃怎么办

2176
01:42:48,000 --> 01:42:50,000
然后装货的时候还有一个很大的

2177
01:42:50,000 --> 01:42:52,000
你散货的话你可能怎么装你拿个

2178
01:42:52,000 --> 01:42:55,000
最传统的时候是一些人拿个什么铲子

2179
01:42:55,000 --> 01:42:57,000
一铲一铲的往上铲对吧

2180
01:42:57,000 --> 01:42:58,000
对

2181
01:42:58,000 --> 01:42:59,000
你就这个

2182
01:42:59,000 --> 01:43:02,000
现在即便现在没船还是这样运

2183
01:43:02,000 --> 01:43:04,000
没船还是这样的吗

2184
01:43:04,000 --> 01:43:09,000
对航就是在蓝银河里面经常还是看到一些运那个

2185
01:43:09,000 --> 01:43:10,000
在铲货的

2186
01:43:10,000 --> 01:43:12,000
他们还仍旧不是用集参箱

2187
01:43:12,000 --> 01:43:14,000
仍旧不是用集参箱的

2188
01:43:14,000 --> 01:43:17,000
但他们也不是用铲他们是用什么卷阳机之类的

2189
01:43:17,000 --> 01:43:18,000
还是自动化了对吧

2190
01:43:18,000 --> 01:43:19,000
对

2191
01:43:19,000 --> 01:43:25,000
但是你需要有一个这你不可能说你用用运煤的东西再去运这个运大米吗

2192
01:43:25,000 --> 01:43:29,000
就是说你用你卷煤那个东西肯定不能用来卷大米

2193
01:43:29,000 --> 01:43:30,000
因为它会互相污染对吧

2194
01:43:30,000 --> 01:43:31,000
对

2195
01:43:31,000 --> 01:43:34,000
所以看我们就互相污染也是一个很重要的问题

2196
01:43:34,000 --> 01:43:35,000
没错

2197
01:43:35,000 --> 01:43:40,000
然后就是这个运就没在每切换一次模式的时候切换一次运输模式

2198
01:43:40,000 --> 01:43:44,000
比如说你从卡车转到船或者就是卡车转到火车这种模式的时候

2199
01:43:44,000 --> 01:43:47,000
你就要有一个转换的过程这个费就费时费力

2200
01:43:47,000 --> 01:43:48,000
而且会有损

2201
01:43:48,000 --> 01:43:54,000
会有损对你可能每次会铲掉一些到地上或者说就铲坏了一些

2202
01:43:54,000 --> 01:43:59,000
现在那种米是长条的你铲下去可能就断成两截了

2203
01:43:59,000 --> 01:44:00,000
对吧

2204
01:44:00,000 --> 01:44:01,000
没错

2205
01:44:01,000 --> 01:44:03,000
每一个环节都会出现这么一个问题

2206
01:44:03,000 --> 01:44:10,000
所以后来就有一个这个什么跨时代的发明集装箱就很出事了

2207
01:44:10,000 --> 01:44:13,000
对集装箱其实我们现在司空见惯

2208
01:44:13,000 --> 01:44:17,000
但是细细想来其实是一个挺了不起的东西

2209
01:44:17,000 --> 01:44:18,000
对

2210
01:44:18,000 --> 01:44:20,000
就他解决了刚才我们讲的一系列的问题

2211
01:44:20,000 --> 01:44:21,000
没错

2212
01:44:21,000 --> 01:44:24,000
就是你想象一个刚做的盒子一个是刚做的

2213
01:44:24,000 --> 01:44:26,000
应该是刚还是铝刚做的盒子

2214
01:44:26,000 --> 01:44:29,000
刚做的盒子你往里面放什么东西

2215
01:44:29,000 --> 01:44:34,000
然后整个盒子作为一个整体可以被搬到船上被放在火车上

2216
01:44:34,000 --> 01:44:36,000
被放在汽车上

2217
01:44:36,000 --> 01:44:39,000
然后甚至有我记得我们家

2218
01:44:39,000 --> 01:44:43,000
我记得我们家因为我们家曾经从兰州搬到天津

2219
01:44:43,000 --> 01:44:45,000
整个搬家的过程其实就是

2220
01:44:45,000 --> 01:44:47,000
买个集装箱的

2221
01:44:47,000 --> 01:44:49,000
公司运来了一个集装箱

2222
01:44:49,000 --> 01:44:51,000
然后我们家占其中一半

2223
01:44:51,000 --> 01:44:53,000
然后另外一个邻居占其中另一半

2224
01:44:53,000 --> 01:44:55,000
然后整个集装箱被运到天津

2225
01:44:55,000 --> 01:44:58,000
然后我们再把集装箱从我们新家门口拆下来

2226
01:44:58,000 --> 01:45:00,000
把里面的家具一个搬出来

2227
01:45:00,000 --> 01:45:03,000
就是说我们可以看到在用集装箱之后

2228
01:45:03,000 --> 01:45:06,000
首先解决了这个模式切换中间的一个损耗的问题

2229
01:45:06,000 --> 01:45:08,000
就是说因为集装箱你作为整体处理

2230
01:45:08,000 --> 01:45:12,000
你再从集装箱装到一个卡车上面去

2231
01:45:12,000 --> 01:45:14,000
然后再从卡车装到火车上面去

2232
01:45:14,000 --> 01:45:16,000
中间只需要一个吊一下

2233
01:45:16,000 --> 01:45:18,000
不需要再把里面东西每一个

2234
01:45:18,000 --> 01:45:20,000
就像你搬家一样

2235
01:45:20,000 --> 01:45:22,000
不需要把里面每个家具驾驶再搬出来

2236
01:45:22,000 --> 01:45:24,000
然后再放到火车上再摆一遍

2237
01:45:24,000 --> 01:45:26,000
然后再从火车上挪下来

2238
01:45:26,000 --> 01:45:28,000
再放到船上再摆一遍这样

2239
01:45:28,000 --> 01:45:30,000
每次切换都是一个简单的挪一下

2240
01:45:30,000 --> 01:45:32,000
吊车吊一下就好了

2241
01:45:32,000 --> 01:45:34,000
也没有损耗

2242
01:45:34,000 --> 01:45:36,000
然后因为它是整个封起来的嘛

2243
01:45:36,000 --> 01:45:38,000
就是说它可以做到什么

2244
01:45:38,000 --> 01:45:40,000
做出的 weatherproof

2245
01:45:40,000 --> 01:45:42,000
就是不怕

2246
01:45:42,000 --> 01:45:44,000
就风雨无阻

2247
01:45:44,000 --> 01:45:46,000
因为你可以铁盒里面你可以做一些

2248
01:45:46,000 --> 01:45:48,000
包括加固啊密封啊

2249
01:45:48,000 --> 01:45:50,000
这些东西的保温啊

2250
01:45:50,000 --> 01:45:52,000
对而且更重要一点就是

2251
01:45:52,000 --> 01:45:56,000
你可以让收货人和送货人都放心的一个

2252
01:45:56,000 --> 01:45:58,000
可以锁起来

2253
01:45:58,000 --> 01:46:00,000
它会对每个集装箱在上传的时候

2254
01:46:00,000 --> 01:46:02,000
会锁起来然后下传的时候

2255
01:46:02,000 --> 01:46:04,000
收货人可以验证这个封条

2256
01:46:04,000 --> 01:46:06,000
如果被拆过的话可以举收

2257
01:46:06,000 --> 01:46:08,000
就跟那个什么快递一样

2258
01:46:08,000 --> 01:46:10,000
而且它可以

2259
01:46:10,000 --> 01:46:12,000
可以说

2260
01:46:12,000 --> 01:46:14,000
因为集装箱它是密封

2261
01:46:14,000 --> 01:46:16,000
就是每个东西可以密封起来

2262
01:46:16,000 --> 01:46:18,000
如果你对这个串味的要求更严重

2263
01:46:18,000 --> 01:46:20,000
你可以在集装箱内部再做一些特别的处理

2264
01:46:20,000 --> 01:46:22,000
对吧

2265
01:46:22,000 --> 01:46:24,000
这可以保证让你说同一车

2266
01:46:24,000 --> 01:46:26,000
你可以一车运大米一车运大粪

2267
01:46:26,000 --> 01:46:28,000
如果你愿意这么干

2268
01:46:28,000 --> 01:46:30,000
真的是可以这么做的

2269
01:46:30,000 --> 01:46:32,000
因为我们可以

2270
01:46:32,000 --> 01:46:34,000
完全不会互相影响

2271
01:46:34,000 --> 01:46:38,000
而且你内部做的任何的防护处理也好

2272
01:46:38,000 --> 01:46:40,000
包括一个制冷的那些什么方法也好

2273
01:46:40,000 --> 01:46:42,000
对于这个运输这个船

2274
01:46:42,000 --> 01:46:44,000
或者是卡车上它都可以做到

2275
01:46:44,000 --> 01:46:46,000
它可以不用知道你内部做了什么处理

2276
01:46:46,000 --> 01:46:48,000
它不用知道这些细节

2277
01:46:48,000 --> 01:46:50,000
对它有一个非常好的封装在那边

2278
01:46:50,000 --> 01:46:52,000
对所以我们看看还有什么

2279
01:46:52,000 --> 01:46:54,000
就是一个

2280
01:46:54,000 --> 01:46:56,000
一个一大特性就是 isolation

2281
01:46:56,000 --> 01:46:58,000
对就是隔离

2282
01:46:58,000 --> 01:47:00,000
这是一个很重要的东西

2283
01:47:00,000 --> 01:47:02,000
第二就是标准化

2284
01:47:02,000 --> 01:47:04,000
standardization

2285
01:47:04,000 --> 01:47:06,000
它有规定的尺寸

2286
01:47:06,000 --> 01:47:08,000
只有那么几种尺寸

2287
01:47:08,000 --> 01:47:10,000
对我们记错的话

2288
01:47:10,000 --> 01:47:12,000
应该是短集装箱 20 英寸

2289
01:47:12,000 --> 01:47:14,000
20 英尺

2290
01:47:14,000 --> 01:47:16,000
20 英尺的柜子是短柜

2291
01:47:16,000 --> 01:47:18,000
40 英尺的是长柜

2292
01:47:18,000 --> 01:47:20,000
它只有长短的区别

2293
01:47:20,000 --> 01:47:22,000
它的截面都是一样大

2294
01:47:22,000 --> 01:47:24,000
我没记错的话

2295
01:47:24,000 --> 01:47:26,000
是宽度

2296
01:47:26,000 --> 01:47:28,000
我要说到一本书

2297
01:47:28,000 --> 01:47:30,000
宽度是固定的

2298
01:47:30,000 --> 01:47:32,000
但是高度其实还是有几种标准的

2299
01:47:32,000 --> 01:47:34,000
但只不过目前所见的

2300
01:47:34,000 --> 01:47:36,000
最常见的一种就是

2301
01:47:36,000 --> 01:47:38,000
应该是高度和宽度

2302
01:47:38,000 --> 01:47:40,000
几乎一致的一个版本

2303
01:47:40,000 --> 01:47:42,000
其他的就比较小种

2304
01:47:42,000 --> 01:47:44,000
方盒子吗

2305
01:47:44,000 --> 01:47:46,000
长条的方盒子

2306
01:47:46,000 --> 01:47:48,000
然后你在

2307
01:47:48,000 --> 01:47:50,000
现在的码头和 60 年代之前的码头

2308
01:47:50,000 --> 01:47:52,000
是完全不一样的

2309
01:47:52,000 --> 01:47:54,000
现在的码头区

2310
01:47:54,000 --> 01:47:56,000
一大堆形象都一样

2311
01:47:56,000 --> 01:47:58,000
但是 60 年代以前的码头

2312
01:47:58,000 --> 01:48:00,000
全是散货对地上

2313
01:48:00,000 --> 01:48:02,000
全都是

2314
01:48:02,000 --> 01:48:04,000
从轮船通向

2315
01:48:04,000 --> 01:48:06,000
岸边的桥啊

2316
01:48:06,000 --> 01:48:08,000
然后吊车啊

2317
01:48:08,000 --> 01:48:10,000
更重要的是那时候的码头上

2318
01:48:10,000 --> 01:48:12,000
有非常非常非常多的码头工人

2319
01:48:12,000 --> 01:48:14,000
他们就是

2320
01:48:14,000 --> 01:48:16,000
码头工人叫 Docker

2321
01:48:16,000 --> 01:48:18,000
对 Docker

2322
01:48:18,000 --> 01:48:20,000
他们的最大的

2323
01:48:20,000 --> 01:48:22,000
任务之一

2324
01:48:22,000 --> 01:48:24,000
就是把散货

2325
01:48:24,000 --> 01:48:26,000
从船上搬到岸上

2326
01:48:26,000 --> 01:48:28,000
或者从岸上搬到船上

2327
01:48:28,000 --> 01:48:30,000
然后这群码头工人

2328
01:48:30,000 --> 01:48:32,000
因为他们是纯粹卖苦力的这群人

2329
01:48:32,000 --> 01:48:34,000
薪水又低

2330
01:48:34,000 --> 01:48:36,000
为什么货非常差

2331
01:48:36,000 --> 01:48:38,000
然后又没有什么教养

2332
01:48:38,000 --> 01:48:40,000
就积成偷货

2333
01:48:40,000 --> 01:48:42,000
他们还会结成帮派之类的

2334
01:48:42,000 --> 01:48:44,000
因为天津以前就是一个

2335
01:48:44,000 --> 01:48:46,000
码头吧

2336
01:48:46,000 --> 01:48:48,000
天津有一群非常有名的

2337
01:48:48,000 --> 01:48:50,000
有一个

2338
01:48:50,000 --> 01:48:52,000
是一类人就叫混混

2339
01:48:52,000 --> 01:48:54,000
混混他们的

2340
01:48:54,000 --> 01:48:56,000
发家地之一就是码头工人

2341
01:48:56,000 --> 01:48:58,000
对

2342
01:48:58,000 --> 01:49:00,000
但是

2343
01:49:00,000 --> 01:49:02,000
在那个直车厢出现

2344
01:49:02,000 --> 01:49:04,000
之后这群码头工人就已经消失了

2345
01:49:04,000 --> 01:49:06,000
就他们

2346
01:49:06,000 --> 01:49:08,000
十几年的时间

2347
01:49:08,000 --> 01:49:10,000
就完全淘汰了改变

2348
01:49:10,000 --> 01:49:12,000
现在已经很难找到一个人说

2349
01:49:12,000 --> 01:49:14,000
我是在码头扛麻包

2350
01:49:14,000 --> 01:49:16,000
这不可能

2351
01:49:16,000 --> 01:49:18,000
只有在一些非常遥远的

2352
01:49:18,000 --> 01:49:20,000
小港口非常非常小的

2353
01:49:20,000 --> 01:49:22,000
小国家或者是非常

2354
01:49:22,000 --> 01:49:24,000
甚至我们这种第三世界国家

2355
01:49:24,000 --> 01:49:26,000
中国这种第三世界国家都已经

2356
01:49:26,000 --> 01:49:28,000
可能不再存在了

2357
01:49:28,000 --> 01:49:30,000
对

2358
01:49:30,000 --> 01:49:32,000
那个时候商船水手们可以在

2359
01:49:32,000 --> 01:49:34,000
港口上岸玩好几天

2360
01:49:34,000 --> 01:49:36,000
因为装货实在是太慢

2361
01:49:36,000 --> 01:49:38,000
现在基本上是你只能你到

2362
01:49:38,000 --> 01:49:40,000
一个港口抽两根烟

2363
01:49:40,000 --> 01:49:42,000
又得上船走

2364
01:49:42,000 --> 01:49:44,000
货已经卸完了

2365
01:49:44,000 --> 01:49:46,000
来说回直车厢的东西本身

2366
01:49:46,000 --> 01:49:48,000
我们看着他的一些属性什么样

2367
01:49:48,000 --> 01:49:50,000
是好的刚才讲的一个就是

2368
01:49:50,000 --> 01:49:52,000
格力标准化

2369
01:49:52,000 --> 01:49:54,000
尺寸是标准化的

2370
01:49:54,000 --> 01:49:56,000
格力的好处就是

2371
01:49:56,000 --> 01:49:58,000
可以保证直车厢之间互不影响

2372
01:49:58,000 --> 01:50:00,000
这样可以把不同

2373
01:50:00,000 --> 01:50:02,000
内含不同物品的

2374
01:50:02,000 --> 01:50:04,000
混合摆放

2375
01:50:04,000 --> 01:50:06,000
之间不会影响

2376
01:50:06,000 --> 01:50:08,000
然后标准化

2377
01:50:08,000 --> 01:50:10,000
有一个好处就是说除了我们可以

2378
01:50:10,000 --> 01:50:12,000
比较简单的摆

2379
01:50:12,000 --> 01:50:14,000
因为大家尺寸都一样

2380
01:50:14,000 --> 01:50:16,000
可能摆多少摆多少呗

2381
01:50:16,000 --> 01:50:18,000
另外还可以共用搬运的机械

2382
01:50:18,000 --> 01:50:20,000
比如刚才讲我们讲

2383
01:50:20,000 --> 01:50:22,000
装散货的话你运煤的散货

2384
01:50:22,000 --> 01:50:24,000
你不能用来运大米

2385
01:50:24,000 --> 01:50:26,000
但是如果你用集装箱化的话

2386
01:50:26,000 --> 01:50:28,000
运煤的机器也可以运来运大米

2387
01:50:28,000 --> 01:50:30,000
因为它都是处理集装箱而已

2388
01:50:30,000 --> 01:50:32,000
对吧那个叫什么

2389
01:50:32,000 --> 01:50:34,000
龙门调对不对

2390
01:50:34,000 --> 01:50:36,000
龙门调

2391
01:50:36,000 --> 01:50:38,000
Crayon 是鹤

2392
01:50:38,000 --> 01:50:40,000
中文翻译叫龙门调

2393
01:50:40,000 --> 01:50:42,000
码头机械

2394
01:50:42,000 --> 01:50:44,000
Crayon 和龙门调可能还不是完全一样

2395
01:50:44,000 --> 01:50:46,000
Crayon 还是要

2396
01:50:46,000 --> 01:50:48,000
Crayon 是一个饭的东西吗对吧

2397
01:50:48,000 --> 01:50:50,000
对 Crayon 还是包括那种

2398
01:50:50,000 --> 01:50:52,000
有一个摇臂出去的东西

2399
01:50:52,000 --> 01:50:54,000
但是龙门调是专门指

2400
01:50:54,000 --> 01:50:56,000
像龙门一样的东西

2401
01:50:56,000 --> 01:50:58,000
Anyway

2402
01:50:58,000 --> 01:51:00,000
所以这个就是

2403
01:51:00,000 --> 01:51:02,000
集装箱之后就改变了

2404
01:51:02,000 --> 01:51:04,000
人类的运输

2405
01:51:04,000 --> 01:51:06,000
然后才使得什么中国的

2406
01:51:06,000 --> 01:51:08,000
产品能够很快速的运到美国

2407
01:51:08,000 --> 01:51:10,000
去销售这样才有了全球化

2408
01:51:10,000 --> 01:51:14,000
这就是为什么我们说集装箱是对中国非常重要的一个东西

2409
01:51:14,000 --> 01:51:16,000
因为如果没有集装箱的话

2410
01:51:16,000 --> 01:51:18,000
可能现在不可能有什么

2411
01:51:18,000 --> 01:51:20,000
我们还在北朝的时代

2412
01:51:20,000 --> 01:51:22,000
我们还不是什么中国

2413
01:51:22,000 --> 01:51:24,000
是世界工厂这是根本不可能的

2414
01:51:24,000 --> 01:51:26,000
那个时候如果没有集装箱的话可能

2415
01:51:26,000 --> 01:51:28,000
别说从中国运到美国

2416
01:51:28,000 --> 01:51:30,000
可能从江苏运到

2417
01:51:30,000 --> 01:51:32,000
山东都是非常非常

2418
01:51:32,000 --> 01:51:34,000
困难的一件事情

2419
01:51:34,000 --> 01:51:36,000
说了那么久集装箱了

2420
01:51:36,000 --> 01:51:38,000
其实我们还没有集装箱

2421
01:51:38,000 --> 01:51:40,000
说了这么久集装箱了

2422
01:51:40,000 --> 01:51:42,000
其实我们还是要说一个就是在

2423
01:51:42,000 --> 01:51:44,000
软件世界里面集装箱是一个什么样的概念

2424
01:51:44,000 --> 01:51:46,000
稍微等一下我

2425
01:51:46,000 --> 01:51:48,000
最后提一件事情就是如果刚才

2426
01:51:48,000 --> 01:51:50,000
我们说一件事我们说这段话

2427
01:51:50,000 --> 01:51:52,000
对你没有产生太多的

2428
01:51:52,000 --> 01:51:54,000
困扰反而让你觉得挺有意思的话

2429
01:51:54,000 --> 01:51:56,000
你可以去看本书叫做集装箱改变

2430
01:51:56,000 --> 01:51:58,000
世界

2431
01:51:58,000 --> 01:52:00,000
听标题就这么没错

2432
01:52:00,000 --> 01:52:02,000
他是应该也

2433
01:52:02,000 --> 01:52:04,000
是易著吧但是我读的是中文吧

2434
01:52:04,000 --> 01:52:06,000
我相信这本书还是能买得到然后我回头

2435
01:52:06,000 --> 01:52:09,000
我会把这本书的链接加到我们的收纳

2436
01:52:09,000 --> 01:52:11,000
OK

2437
01:52:11,000 --> 01:52:13,000
OK 那我们现在来说这个软件世界

2438
01:52:13,000 --> 01:52:15,000
集装箱

2439
01:52:15,000 --> 01:52:17,000
传统上我们部署的一个

2440
01:52:17,000 --> 01:52:19,000
软件的时候其实你那个

2441
01:52:19,000 --> 01:52:21,000
服务器上面是一个开放的东西

2442
01:52:21,000 --> 01:52:23,000
它是一个装带机嘛

2443
01:52:23,000 --> 01:52:25,000
你把那个东西上进去

2444
01:52:25,000 --> 01:52:27,000
这个过程就有点像装散货

2445
01:52:27,000 --> 01:52:29,000
就是他们互相之间是有点影响的

2446
01:52:29,000 --> 01:52:31,000
而且他们

2447
01:52:31,000 --> 01:52:33,000
怎么说呢比如说你在服务器上要装

2448
01:52:33,000 --> 01:52:35,000
一个数据库然后再装一个什么

2449
01:52:35,000 --> 01:52:37,000
你自己的软件

2450
01:52:37,000 --> 01:52:39,000
指不定数据库依赖的什么东西

2451
01:52:39,000 --> 01:52:41,000
和你的软件就冲突了

2452
01:52:41,000 --> 01:52:43,000
你还得想办法去解决它对吧

2453
01:52:43,000 --> 01:52:45,000
它并不是一个完全隔离的一个东西

2454
01:52:45,000 --> 01:52:47,000
包括不同的应用之间可能

2455
01:52:47,000 --> 01:52:49,000
互相会对可能会共享某一个

2456
01:52:49,000 --> 01:52:51,000
文件或者说这个数据库

2457
01:52:51,000 --> 01:52:53,000
这个程序会觉得

2458
01:52:53,000 --> 01:52:55,000
我要改那个文件那个程序

2459
01:52:55,000 --> 01:52:57,000
会觉得你怎么改了我那个文件对吧

2460
01:52:57,000 --> 01:52:59,000
这个东西是可能会出现的一个问题

2461
01:52:59,000 --> 01:53:01,000
然后他们对资源

2462
01:53:01,000 --> 01:53:03,000
的这个

2463
01:53:03,000 --> 01:53:05,000
他们的这个安装方式也是一个

2464
01:53:05,000 --> 01:53:07,000
非标准化的就是说你安装

2465
01:53:07,000 --> 01:53:09,000
数据库的方法和你安装一个

2466
01:53:09,000 --> 01:53:11,000
什么 tomcat 的方法可能并不

2467
01:53:11,000 --> 01:53:13,000
一样对

2468
01:53:13,000 --> 01:53:15,000
这回到我们上一期讲的内容就是可能

2469
01:53:15,000 --> 01:53:17,000
两个软件

2470
01:53:17,000 --> 01:53:19,000
所需要的包管理

2471
01:53:19,000 --> 01:53:21,000
系统是完全不一样就会出现这种

2472
01:53:21,000 --> 01:53:23,000
不一致的一个状况

2473
01:53:23,000 --> 01:53:25,000
所以如果我们能够把刚才讲的集装箱

2474
01:53:25,000 --> 01:53:27,000
那几个概念拿起来拿过来

2475
01:53:27,000 --> 01:53:29,000
用到这个软件

2476
01:53:29,000 --> 01:53:31,000
部署里面是不是就会情况好

2477
01:53:31,000 --> 01:53:33,000
很多呢我们能不能说

2478
01:53:33,000 --> 01:53:35,000
装个软件就好像

2479
01:53:35,000 --> 01:53:37,000
怎么讲呢

2480
01:53:37,000 --> 01:53:39,000
你直接就把它那个文件传上去

2481
01:53:39,000 --> 01:53:41,000
就好了或者执行同一个命令就好

2482
01:53:41,000 --> 01:53:43,000
互相之间绝对不会干扰

2483
01:53:43,000 --> 01:53:45,000
对就之前的思潮可能

2484
01:53:45,000 --> 01:53:47,000
是说这一传

2485
01:53:47,000 --> 01:53:49,000
货就是如果说一

2486
01:53:49,000 --> 01:53:51,000
台积存机是一艘船的话

2487
01:53:51,000 --> 01:53:53,000
那么可能说这艘船上

2488
01:53:53,000 --> 01:53:55,000
装一群猪然后又装

2489
01:53:55,000 --> 01:53:57,000
一坨米然后之前

2490
01:53:57,000 --> 01:53:59,000
的思潮可能是把舱石里面的

2491
01:53:59,000 --> 01:54:01,000
这一块划给猪然后另一部分划给米

2492
01:54:01,000 --> 01:54:03,000
但是此时就有一个问题

2493
01:54:03,000 --> 01:54:05,000
就是他们两个有可能是互相影响的

2494
01:54:05,000 --> 01:54:07,000
就万一猪圈翻了

2495
01:54:07,000 --> 01:54:09,000
然后猪跑出来把米拱了

2496
01:54:09,000 --> 01:54:11,000
你说你是救猪呢

2497
01:54:11,000 --> 01:54:13,000
还是救米

2498
01:54:13,000 --> 01:54:15,000
但是 contentization 就

2499
01:54:15,000 --> 01:54:17,000
有一点

2500
01:54:17,000 --> 01:54:19,000
其实也类比

2501
01:54:19,000 --> 01:54:21,000
不是特别的合适

2502
01:54:21,000 --> 01:54:23,000
因为真正的 contentization 其实是

2503
01:54:23,000 --> 01:54:25,000
把猪和米分别装到两条船

2504
01:54:25,000 --> 01:54:27,000
不是啊是装到

2505
01:54:27,000 --> 01:54:29,000
两个盒子里面

2506
01:54:29,000 --> 01:54:31,000
但这两个盒子在

2507
01:54:31,000 --> 01:54:33,000
contentization 的世界

2508
01:54:33,000 --> 01:54:35,000
如果是 proper

2509
01:54:35,000 --> 01:54:37,000
像 Docker 这样的 contentization

2510
01:54:37,000 --> 01:54:39,000
他们两个其实是跑在两个不同的

2511
01:54:39,000 --> 01:54:41,000
虚拟机上他们是他们之间不存在

2512
01:54:41,000 --> 01:54:43,000
他们是在同一个

2513
01:54:43,000 --> 01:54:45,000
虚拟机同一个机器里面

2514
01:54:45,000 --> 01:54:47,000
只是在不同的子区域里面

2515
01:54:47,000 --> 01:54:49,000
啊 OK

2516
01:54:49,000 --> 01:54:51,000
好吧

2517
01:54:51,000 --> 01:54:53,000
就是说

2518
01:54:53,000 --> 01:54:55,000
然后我们还要想如果能够所有软件

2519
01:54:55,000 --> 01:54:57,000
都不要去说我你

2520
01:54:57,000 --> 01:54:59,000
那个数据库要用什么 apt 来装

2521
01:54:59,000 --> 01:55:01,000
然后你自己的应用程序要用一个

2522
01:55:01,000 --> 01:55:03,000
自己的方法来装不要搞这些麻烦

2523
01:55:03,000 --> 01:55:05,000
的方法不要搞 32 种不同的

2524
01:55:05,000 --> 01:55:07,000
安装方式对吧

2525
01:55:07,000 --> 01:55:09,000
我们所有的方式都用同一种方式

2526
01:55:09,000 --> 01:55:11,000
安装过去这样不就更好吗

2527
01:55:11,000 --> 01:55:13,000
对吧其实最先实践

2528
01:55:13,000 --> 01:55:15,000
这种想法的

2529
01:55:15,000 --> 01:55:17,000
其实也有叫做虚拟机这概念对吧

2530
01:55:17,000 --> 01:55:19,000
对虚拟机能够

2531
01:55:19,000 --> 01:55:21,000
虚拟机里面然后有一个

2532
01:55:21,000 --> 01:55:23,000
叫做 virtual appliance 这么一个概念

2533
01:55:23,000 --> 01:55:25,000
我不知道大家用 virtual box

2534
01:55:25,000 --> 01:55:27,000
应该可能看到有这么一个 import

2535
01:55:27,000 --> 01:55:29,000
appliance 这么一个东西

2536
01:55:29,000 --> 01:55:31,000
什么意思呢就是说

2537
01:55:31,000 --> 01:55:33,000
我们部署软件的单位不再

2538
01:55:33,000 --> 01:55:35,000
是某一个软件某一个应用

2539
01:55:35,000 --> 01:55:37,000
某一个应用为单位了

2540
01:55:37,000 --> 01:55:39,000
而是说我们整个把这个应用

2541
01:55:39,000 --> 01:55:41,000
所需要的所有环境包括它的操作系统

2542
01:55:41,000 --> 01:55:43,000
包括它所依赖的文件

2543
01:55:43,000 --> 01:55:45,000
包括它的依赖的数据啊还有它的

2544
01:55:45,000 --> 01:55:47,000
什么

2545
01:55:47,000 --> 01:55:49,000
各种各样

2546
01:55:49,000 --> 01:55:51,000
它需要依赖的环境打包成

2547
01:55:51,000 --> 01:55:53,000
一个虚拟机然后再部署到

2548
01:55:53,000 --> 01:55:55,000
某一个实体的物理的

2549
01:55:55,000 --> 01:55:57,000
服务器上去运行

2550
01:55:57,000 --> 01:55:59,000
这个在很长的时间里面大家

2551
01:55:59,000 --> 01:56:01,000
都是什么像那个

2552
01:56:01,000 --> 01:56:03,000
亚马逊的那个 EC 2 嘛

2553
01:56:03,000 --> 01:56:05,000
就是这种方式来做的就是说

2554
01:56:05,000 --> 01:56:07,000
我把我的应用都打包成一个

2555
01:56:07,000 --> 01:56:09,000
完整的虚拟机然后我

2556
01:56:09,000 --> 01:56:11,000
我需要用的时候就

2557
01:56:11,000 --> 01:56:13,000
开一个虚拟机让它跑起来

2558
01:56:13,000 --> 01:56:15,000
就好了然后我也不去改虚拟机里面的

2559
01:56:15,000 --> 01:56:17,000
内容就是让它运行就好了

2560
01:56:17,000 --> 01:56:19,000
然后如果不需要我就把这个虚拟机关上

2561
01:56:19,000 --> 01:56:21,000
对吧

2562
01:56:21,000 --> 01:56:23,000
这就实现了我们刚才讲的那个什么标准化

2563
01:56:23,000 --> 01:56:25,000
因为所有的都是不管你里面装什么

2564
01:56:25,000 --> 01:56:27,000
就是你开发者只要负责

2565
01:56:27,000 --> 01:56:29,000
建好这个虚拟机我运萎的时候我就

2566
01:56:29,000 --> 01:56:31,000
只负责开关这个虚拟机就好了

2567
01:56:31,000 --> 01:56:33,000
然后如果某一个虚拟机坏了我就把它

2568
01:56:33,000 --> 01:56:35,000
关掉然后再另外开个新的

2569
01:56:35,000 --> 01:56:37,000
就实现了这个标准化和

2570
01:56:37,000 --> 01:56:39,000
这个隔离这确实是好的

2571
01:56:39,000 --> 01:56:41,000
也在相当

2572
01:56:41,000 --> 01:56:43,000
长时间内我们都知道很多

2573
01:56:43,000 --> 01:56:45,000
这个厂商都是你到现在都是主流吧

2574
01:56:45,000 --> 01:56:47,000
对就是到

2575
01:56:47,000 --> 01:56:49,000
到目前为止都还是一个起码有半壁江山

2576
01:56:49,000 --> 01:56:51,000
这么一个状态

2577
01:56:51,000 --> 01:56:53,000
但是虚拟机有一个什么问题呢

2578
01:56:53,000 --> 01:56:55,000
就是它的资源损耗是比较高的

2579
01:56:55,000 --> 01:56:57,000
因为你想象应该虚拟机的话

2580
01:56:57,000 --> 01:56:59,000
首先你要虚拟一个操作系统对吧

2581
01:56:59,000 --> 01:57:01,000
对我们看虚拟操作系统

2582
01:57:01,000 --> 01:57:03,000
你要至少哪怕你最精简的

2583
01:57:03,000 --> 01:57:05,000
一个 Linux 也不叫最精简

2584
01:57:05,000 --> 01:57:07,000
就是一个正常的一个 Linux 的发行板

2585
01:57:07,000 --> 01:57:09,000
运行起来可能都需要

2586
01:57:09,000 --> 01:57:11,000
占掉个几百

2587
01:57:11,000 --> 01:57:13,000
两三百兆的内存

2588
01:57:13,000 --> 01:57:15,000
就是这个内存的 overhead

2589
01:57:15,000 --> 01:57:17,000
再小一点的对

2590
01:57:17,000 --> 01:57:19,000
至少是在一两百两三百这个范围内

2591
01:57:19,000 --> 01:57:21,000
然后一盘磁盘空间

2592
01:57:21,000 --> 01:57:23,000
你可能每个虚拟机至少

2593
01:57:23,000 --> 01:57:25,000
装完那个系统都是至少是一两个机了

2594
01:57:25,000 --> 01:57:27,000
然后再装你的应用又是一堆空间在那里

2595
01:57:27,000 --> 01:57:29,000
然后这个

2596
01:57:29,000 --> 01:57:31,000
虚拟机运行的时候因为它是

2597
01:57:31,000 --> 01:57:33,000
在之前没有这个

2598
01:57:33,000 --> 01:57:35,000
硬件虚拟的就是没有

2599
01:57:35,000 --> 01:57:37,000
这个硬件支持的情况下

2600
01:57:37,000 --> 01:57:39,000
虚拟机的运行效率还会打折对吧

2601
01:57:39,000 --> 01:57:41,000
因为你虚拟机要

2602
01:57:41,000 --> 01:57:43,000
代码是在一个虚拟的环节面运行的

2603
01:57:43,000 --> 01:57:45,000
然后还要再转化成那个

2604
01:57:45,000 --> 01:57:47,000
真实的在硬件上运行的代码

2605
01:57:47,000 --> 01:57:49,000
还要是因为一层转化

2606
01:57:49,000 --> 01:57:51,000
但后来有这个芯片

2607
01:57:51,000 --> 01:57:53,000
CPU 级别的虚拟的话支持的这个情况

2608
01:57:53,000 --> 01:57:55,000
会好很多但是并不是

2609
01:57:55,000 --> 01:57:57,000
完全是一个无碍的特别是在

2610
01:57:57,000 --> 01:57:59,000
面对 Io 啊内存读写

2611
01:57:59,000 --> 01:58:01,000
这一块的时候还是有一个比较大的

2612
01:58:01,000 --> 01:58:03,000
瓶颈就是对它就是解决了

2613
01:58:03,000 --> 01:58:05,000
计算能力的方面

2614
01:58:05,000 --> 01:58:07,000
的问题但没有解决 Io 方面

2615
01:58:07,000 --> 01:58:09,000
对损耗还是很很大的就是

2616
01:58:09,000 --> 01:58:11,000
应该有一个比较

2617
01:58:11,000 --> 01:58:13,000
怎么说一个默认的数字吧

2618
01:58:13,000 --> 01:58:15,000
就是可能是百分之一到二十这么一个损耗

2619
01:58:15,000 --> 01:58:17,000
就性能上的损耗

2620
01:58:17,000 --> 01:58:19,000
就然后这个虚拟机的

2621
01:58:19,000 --> 01:58:21,000
在启动的时候也比较慢

2622
01:58:21,000 --> 01:58:23,000
比如说你开一个虚拟机你只是要等它

2623
01:58:23,000 --> 01:58:25,000
操作系统完全 boot 一遍吧

2624
01:58:25,000 --> 01:58:27,000
至少你最快也得个

2625
01:58:27,000 --> 01:58:29,000
二三十秒吧我会呃

2626
01:58:29,000 --> 01:58:31,000
我们看到一般的一个发行板

2627
01:58:31,000 --> 01:58:33,000
对嗯所以就有人

2628
01:58:33,000 --> 01:58:35,000
在想说那我们能不能够再保留

2629
01:58:35,000 --> 01:58:37,000
虚拟机那些好处比如说

2630
01:58:37,000 --> 01:58:39,000
隔离然后标准化

2631
01:58:39,000 --> 01:58:41,000
这些好处同时解决它的问题呢

2632
01:58:41,000 --> 01:58:43,000
就是说它的就是能不能让它

2633
01:58:43,000 --> 01:58:45,000
更加快速的启动然后

2634
01:58:45,000 --> 01:58:47,000
就不再说说几十秒

2635
01:58:47,000 --> 01:58:49,000
我们能不能做到说几十毫秒或者几百毫秒

2636
01:58:49,000 --> 01:58:51,000
的级别的启动或者是杀掉它

2637
01:58:51,000 --> 01:58:53,000
然后我们同时能够不

2638
01:58:53,000 --> 01:58:55,000
不去浪费那么多的

2639
01:58:55,000 --> 01:58:57,000
资源在虚拟机本身上面

2640
01:58:57,000 --> 01:58:59,000
而是把资源集中到这个应用上面

2641
01:58:59,000 --> 01:59:01,000
去跑呢于是就有

2642
01:59:01,000 --> 01:59:03,000
这个 container 这个概念就是

2643
01:59:03,000 --> 01:59:05,000
就横空出事了

2644
01:59:05,000 --> 01:59:07,000
终于说到它

2645
01:59:07,000 --> 01:59:09,000
终于说到 container 就是集装箱

2646
01:59:09,000 --> 01:59:11,000
这个概念对然后

2647
01:59:11,000 --> 01:59:13,000
这个这个趋势

2648
01:59:13,000 --> 01:59:15,000
也被一些人称为

2649
01:59:15,000 --> 01:59:17,000
所谓 Docker

2650
01:59:17,000 --> 01:59:19,000
apocalypse

2651
01:59:19,000 --> 01:59:21,000
就是

2652
01:59:21,000 --> 01:59:23,000
它是一种灾难性的

2653
01:59:23,000 --> 01:59:25,000
就是在某些传统主义者

2654
01:59:25,000 --> 01:59:27,000
的人看来这是某种

2655
01:59:27,000 --> 01:59:29,000
灾难性的变革就是程序

2656
01:59:29,000 --> 01:59:31,000
和

2657
01:59:31,000 --> 01:59:33,000
机和

2658
01:59:33,000 --> 01:59:35,000
跑它和它所运行的环境

2659
01:59:35,000 --> 01:59:37,000
之间的隔离变得越来越

2660
01:59:37,000 --> 01:59:39,000
越来越

2661
01:59:39,000 --> 01:59:41,000
有些人是不喜欢这样

2662
01:59:41,000 --> 01:59:43,000
多出来的这一层的

2663
01:59:43,000 --> 01:59:45,000
隔离和抽象

2664
01:59:45,000 --> 01:59:47,000
但是目前看来

2665
01:59:47,000 --> 01:59:49,000
这个趋势的确是

2666
01:59:49,000 --> 01:59:51,000
带来的优势

2667
01:59:51,000 --> 01:59:53,000
要远远大于

2668
01:59:53,000 --> 01:59:55,000
它所损失的一点就是你们不能

2669
01:59:55,000 --> 01:59:57,000
再和一个比较 native 的

2670
01:59:57,000 --> 01:59:59,000
环境所互通

2671
01:59:59,000 --> 02:00:01,000
而带来的便利

2672
02:00:01,000 --> 02:00:03,000
对

2673
02:00:03,000 --> 02:00:05,000
那接着说 Docker

2674
02:00:05,000 --> 02:00:07,000
最开始的时候是 Linux

2675
02:00:07,000 --> 02:00:09,000
有一个内核的一些功能

2676
02:00:09,000 --> 02:00:11,000
叫做 seqgroups

2677
02:00:11,000 --> 02:00:13,000
control groups

2678
02:00:13,000 --> 02:00:15,000
它能做一些什么事

2679
02:00:15,000 --> 02:00:17,000
它可以让你在

2680
02:00:17,000 --> 02:00:19,000
在一个 Linux 的系统

2681
02:00:19,000 --> 02:00:21,000
上面去划分出

2682
02:00:21,000 --> 02:00:23,000
一群进程

2683
02:00:23,000 --> 02:00:25,000
然后让他们

2684
02:00:25,000 --> 02:00:27,000
划分出一群进程

2685
02:00:27,000 --> 02:00:29,000
应该是做一个

2686
02:00:29,000 --> 02:00:31,000
这么一个容器就刚才讲的 container

2687
02:00:31,000 --> 02:00:33,000
然后你可以限制这个容器

2688
02:00:33,000 --> 02:00:35,000
它能够使用的资源的比例

2689
02:00:35,000 --> 02:00:37,000
你可以让容器之间

2690
02:00:37,000 --> 02:00:39,000
互相隔离

2691
02:00:39,000 --> 02:00:41,000
seqgroups 好像一开始就叫什么

2692
02:00:41,000 --> 02:00:43,000
process container 之类的一个名字

2693
02:00:43,000 --> 02:00:45,000
但后来才改成

2694
02:00:45,000 --> 02:00:47,000
control groups

2695
02:00:47,000 --> 02:00:49,000
对 因为有一个什么命名上的冲突

2696
02:00:49,000 --> 02:00:51,000
我好像忘了

2697
02:00:51,000 --> 02:00:53,000
OK

2698
02:00:53,000 --> 02:00:55,000
我觉得有可能是那个时候觉得

2699
02:00:55,000 --> 02:00:57,000
container 这个词指的太

2700
02:00:57,000 --> 02:00:59,000
就指位太不明了

2701
02:00:59,000 --> 02:01:01,000
太不明确了

2702
02:01:01,000 --> 02:01:03,000
所以才改成 control groups

2703
02:01:03,000 --> 02:01:05,000
在 Linux 世界里好像 group 这个概念

2704
02:01:05,000 --> 02:01:07,000
更容易理解一些

2705
02:01:07,000 --> 02:01:09,000
就是

2706
02:01:09,000 --> 02:01:11,000
有这么一个内核的

2707
02:01:11,000 --> 02:01:13,000
一个支持

2708
02:01:13,000 --> 02:01:15,000
你可以划分出资源的

2709
02:01:15,000 --> 02:01:17,000
限制 互相之间他们是不可以

2710
02:01:17,000 --> 02:01:19,000
比如说不可以法问的

2711
02:01:19,000 --> 02:01:21,000
可以限制它只能使用多少

2712
02:01:21,000 --> 02:01:23,000
比例的 CPU

2713
02:01:23,000 --> 02:01:25,000
多少比例的内存

2714
02:01:25,000 --> 02:01:27,000
这样就可以在

2715
02:01:27,000 --> 02:01:29,000
很大程度上实现说

2716
02:01:29,000 --> 02:01:31,000
我们运行的时候互相不干扰

2717
02:01:31,000 --> 02:01:33,000
甚至都不知道别人的

2718
02:01:33,000 --> 02:01:35,000
存在 甚至不知道对方的存在

2719
02:01:35,000 --> 02:01:37,000
对于我来说我以为

2720
02:01:37,000 --> 02:01:39,000
我这个程序

2721
02:01:39,000 --> 02:01:41,000
认为我是在这台机上

2722
02:01:41,000 --> 02:01:43,000
运行的唯一的程序 但其实不是

2723
02:01:43,000 --> 02:01:45,000
但用的不是虚拟机的方法

2724
02:01:45,000 --> 02:01:47,000
这样的话就有一个好处

2725
02:01:47,000 --> 02:01:49,000
他没有虚拟机那些损耗

2726
02:01:49,000 --> 02:01:51,000
没有转化那一层

2727
02:01:51,000 --> 02:01:53,000
因为所有东西都是还是直接在

2728
02:01:53,000 --> 02:01:55,000
硬件上运行的

2729
02:01:55,000 --> 02:01:57,000
但是还有一个要解决的问题

2730
02:01:57,000 --> 02:01:59,000
就是说那磁盘怎么办

2731
02:01:59,000 --> 02:02:01,000
还有一个文件系统

2732
02:02:01,000 --> 02:02:03,000
然后 C-group control group

2733
02:02:03,000 --> 02:02:05,000
他还有一个就是还能够划分

2734
02:02:05,000 --> 02:02:07,000
不同的文件

2735
02:02:07,000 --> 02:02:09,000
让不同的进程看到的

2736
02:02:09,000 --> 02:02:11,000
自己的文件的目录数

2737
02:02:11,000 --> 02:02:13,000
是独立的 分格的

2738
02:02:13,000 --> 02:02:15,000
这样的话

2739
02:02:15,000 --> 02:02:17,000
就可以让

2740
02:02:17,000 --> 02:02:19,000
互相之间 比如说我同样要读取什么

2741
02:02:19,000 --> 02:02:21,000
ETC 下面的一个配置文件的时候

2742
02:02:21,000 --> 02:02:23,000
大家可以读到不同的版本

2743
02:02:23,000 --> 02:02:25,000
或者修改的时候互相不冲突

2744
02:02:25,000 --> 02:02:27,000
对

2745
02:02:27,000 --> 02:02:29,000
其实就是一个操作系统级别的

2746
02:02:29,000 --> 02:02:31,000
虚拟机 但他又不是

2747
02:02:31,000 --> 02:02:33,000
重量级的虚拟机

2748
02:02:35,000 --> 02:02:37,000
他提供了虚拟机的功能

2749
02:02:37,000 --> 02:02:39,000
但是他并不是一个虚拟机

2750
02:02:39,000 --> 02:02:41,000
对 就是一个超轻量级的虚拟机

2751
02:02:41,000 --> 02:02:43,000
一个虚拟技术吧

2752
02:02:43,000 --> 02:02:45,000
然后 C-group 他能够

2753
02:02:45,000 --> 02:02:47,000
启动那些 启动这个

2754
02:02:47,000 --> 02:02:49,000
隔离也非常快 他就是什么

2755
02:02:49,000 --> 02:02:51,000
几十毫秒级别就可以建立出

2756
02:02:51,000 --> 02:02:53,000
新建一个 C-group

2757
02:02:53,000 --> 02:02:55,000
可以在几十毫秒级别

2758
02:02:55,000 --> 02:02:57,000
量级上把他杀掉

2759
02:02:57,000 --> 02:02:59,000
基本上认为他是一个

2760
02:02:59,000 --> 02:03:01,000
即时的过程 而不是像

2761
02:03:01,000 --> 02:03:03,000
虚拟机 你还要等

2762
02:03:03,000 --> 02:03:05,000
他启动 然后等他退出

2763
02:03:05,000 --> 02:03:07,000
要等几十秒

2764
02:03:07,000 --> 02:03:09,000
就是一个数量级的提升

2765
02:03:09,000 --> 02:03:11,000
两三个数量级的提升

2766
02:03:11,000 --> 02:03:13,000
然后有了这么一个

2767
02:03:13,000 --> 02:03:15,000
基础技术之后

2768
02:03:15,000 --> 02:03:17,000
就后来有一个公司

2769
02:03:17,000 --> 02:03:19,000
叫做 Docker

2770
02:03:19,000 --> 02:03:21,000
就出了一个基于

2771
02:03:21,000 --> 02:03:23,000
基于 C-groups 的一个技术

2772
02:03:23,000 --> 02:03:25,000
就叫做 Docker

2773
02:03:25,000 --> 02:03:27,000
Docker 就是刚才我们讲的

2774
02:03:27,000 --> 02:03:29,000
码头工人嘛 就是负责

2775
02:03:29,000 --> 02:03:33,000
建 负责搬运货物的一个东西

2776
02:03:33,000 --> 02:03:35,000
但是虽然 Docker 已经

2777
02:03:35,000 --> 02:03:37,000
绝种了 现在这个工种

2778
02:03:37,000 --> 02:03:39,000
也绝种了 但是他把这个名字

2779
02:03:39,000 --> 02:03:41,000
借过来了 他说我们是要

2780
02:03:41,000 --> 02:03:43,000
当然他的 logo 不是一个正在扛马包的

2781
02:03:43,000 --> 02:03:45,000
码头工人 而是一个

2782
02:03:45,000 --> 02:03:47,000
运的集装箱的金鱼

2783
02:03:47,000 --> 02:03:49,000
对 因为他把

2784
02:03:49,000 --> 02:03:51,000
因为 C-groups 他是一个内核的

2785
02:03:51,000 --> 02:03:53,000
内核的一些 API 嘛

2786
02:03:53,000 --> 02:03:55,000
所以他就要有一个什么

2787
02:03:55,000 --> 02:03:57,000
用户可以直接

2788
02:03:57,000 --> 02:03:59,000
要操作他的一个界面

2789
02:03:59,000 --> 02:04:01,000
职干所的时候 Linux 是支持

2790
02:04:01,000 --> 02:04:03,000
LXC 的一个东西吧

2791
02:04:03,000 --> 02:04:05,000
但是也不是非常友好

2792
02:04:05,000 --> 02:04:07,000
也不是非常好用

2793
02:04:07,000 --> 02:04:09,000
然后 Docker 就说

2794
02:04:09,000 --> 02:04:11,000
我们提供一个

2795
02:04:11,000 --> 02:04:13,000
更加好用

2796
02:04:13,000 --> 02:04:15,000
完善的工具

2797
02:04:15,000 --> 02:04:17,000
Docker 目前有投行

2798
02:04:17,000 --> 02:04:19,000
应该也是用命令行界面

2799
02:04:19,000 --> 02:04:21,000
对 命令行界面的东西

2800
02:04:21,000 --> 02:04:23,000
他用起来有点像 Git

2801
02:04:23,000 --> 02:04:25,000
对 有点

2802
02:04:25,000 --> 02:04:27,000
类似感觉吧

2803
02:04:27,000 --> 02:04:29,000
然后

2804
02:04:29,000 --> 02:04:31,000
他是一个什么东西呢

2805
02:04:31,000 --> 02:04:33,000
他就是利用 C-groups

2806
02:04:33,000 --> 02:04:35,000
这些内核的一些特性

2807
02:04:35,000 --> 02:04:37,000
然后让你能够快速的

2808
02:04:37,000 --> 02:04:39,000
建立出一个一个的所谓的 container

2809
02:04:39,000 --> 02:04:41,000
一个一个集装箱 每个集装箱可以

2810
02:04:41,000 --> 02:04:43,000
做些什么事 就是说你集装箱里面包含

2811
02:04:43,000 --> 02:04:45,000
他们推荐的方式

2812
02:04:45,000 --> 02:04:47,000
一个集装箱里面只包含一个

2813
02:04:47,000 --> 02:04:49,000
主要的软件

2814
02:04:49,000 --> 02:04:51,000
你就运行一个数据库

2815
02:04:51,000 --> 02:04:53,000
不要搞一些别的东西

2816
02:04:53,000 --> 02:04:55,000
然后运行一个程序 一个应用

2817
02:04:55,000 --> 02:04:57,000
就是单独的一个应用 不要塞五个应用在一个 container 里面

2818
02:04:57,000 --> 02:04:59,000
这样不方便管理了

2819
02:04:59,000 --> 02:05:01,000
有了这些集装箱之后

2820
02:05:01,000 --> 02:05:03,000
他 Docker 提供了这么一套工具

2821
02:05:03,000 --> 02:05:05,000
能够标准化的去安装它

2822
02:05:05,000 --> 02:05:07,000
然后可以标准化的去部署它

2823
02:05:07,000 --> 02:05:09,000
这样就可以实现

2824
02:05:09,000 --> 02:05:11,000
container 那些所有的好处

2825
02:05:11,000 --> 02:05:13,000
可以避免虚拟机的那些资源损耗高的问题

2826
02:05:15,000 --> 02:05:23,000
而且他还大幅度的简化了一个软件部署者

2827
02:05:23,000 --> 02:05:25,000
或者说我们刚才说的 DevOps 的工作量

2828
02:05:27,000 --> 02:05:33,000
之前我们会觉得用 Shaft 好像已经相当简便了

2829
02:05:33,000 --> 02:05:35,000
用 Shaft 或是 Puppet 来描述整个的部署过程

2830
02:05:35,000 --> 02:05:37,000
已经相当简便了

2831
02:05:37,000 --> 02:05:39,000
但是使用 Docker 的时候

2832
02:05:39,000 --> 02:05:41,000
你会觉得原来整个过程还可以更加抽象

2833
02:05:41,000 --> 02:05:43,000
更加简便一点

2834
02:05:43,000 --> 02:05:49,000
就是之前你还需要去操心你从哪里获得一个操作系统

2835
02:05:49,000 --> 02:05:51,000
你还要去操心

2836
02:05:51,000 --> 02:05:55,000
因为 Puppet 毕竟还是要运行在一个特定的操作系统之上的

2837
02:05:55,000 --> 02:05:57,000
但是 Docker 也需要

2838
02:05:57,000 --> 02:06:03,000
但 Puppet 所关心的抽象是在操作系统级别以下

2839
02:06:03,000 --> 02:06:05,000
可是从 Docker 开始

2840
02:06:05,000 --> 02:06:07,000
这个抽象就已经包含了很多的

2841
02:06:07,000 --> 02:06:15,000
这是一个非常了不起的封装层级

2842
02:06:15,000 --> 02:06:17,000
而且就怎么说

2843
02:06:17,000 --> 02:06:19,000
如果用 Docker 这种方式来部署的话

2844
02:06:19,000 --> 02:06:21,000
开发者和运运为者做的事情

2845
02:06:21,000 --> 02:06:25,000
其实是用的工具是类似的

2846
02:06:25,000 --> 02:06:27,000
同样的工具了

2847
02:06:27,000 --> 02:06:29,000
因为在过去的话开发者其实并不

2848
02:06:29,000 --> 02:06:31,000
开发的过程中至少并不需要用到 Puppet 也好

2849
02:06:31,000 --> 02:06:33,000
还有 Shaft 那些东西

2850
02:06:33,000 --> 02:06:35,000
因为只是部署的时候才用到的

2851
02:06:35,000 --> 02:06:37,000
但是如果你用 Docker 来做开发的话

2852
02:06:37,000 --> 02:06:39,000
其实你发现你在开发的时候

2853
02:06:39,000 --> 02:06:41,000
就已经是在 Docker 里面去做开发

2854
02:06:41,000 --> 02:06:43,000
对你可以一上来就说

2855
02:06:43,000 --> 02:06:45,000
我要一个什么样的 Docker

2856
02:06:45,000 --> 02:06:47,000
然后

2857
02:06:47,000 --> 02:06:49,000
在配置 Docker

2858
02:06:49,000 --> 02:06:51,000
一上来我就知道这个东西最终会跑在一个什么样的环境

2859
02:06:51,000 --> 02:06:53,000
然后

2860
02:06:53,000 --> 02:06:55,000
你在开发的时候就怎么去构建

2861
02:06:55,000 --> 02:06:57,000
Container 的环境

2862
02:06:57,000 --> 02:06:59,000
或者你怎么去构建你的软件

2863
02:06:59,000 --> 02:07:01,000
最终运行的环境

2864
02:07:01,000 --> 02:07:03,000
也就正是你在最后

2865
02:07:03,000 --> 02:07:05,000
部署的时候运为的时候要

2866
02:07:05,000 --> 02:07:07,000
用的同样的环境

2867
02:07:07,000 --> 02:07:09,000
就是你用的是同样一套工具

2868
02:07:09,000 --> 02:07:11,000
同样的命令去执行这个工具

2869
02:07:11,000 --> 02:07:13,000
这样的话就有什么好处呢

2870
02:07:13,000 --> 02:07:15,000
运作的时候你只需要拿到

2871
02:07:15,000 --> 02:07:17,000
开发好的 Docker 的 Container

2872
02:07:17,000 --> 02:07:19,000
然后直接把它部署到物理的机器上去就好了

2873
02:07:19,000 --> 02:07:21,000
并不需要做任何特别多的

2874
02:07:21,000 --> 02:07:23,000
额外的操作

2875
02:07:23,000 --> 02:07:25,000
但是额外的操作就可能在这个

2876
02:07:25,000 --> 02:07:27,000
那个目标的机器上装上 Docker 本身

2877
02:07:27,000 --> 02:07:29,000
对

2878
02:07:29,000 --> 02:07:31,000
换言之

2879
02:07:31,000 --> 02:07:33,000
从 Docker 之后

2880
02:07:33,000 --> 02:07:35,000
整个软件的开发过程就变成了

2881
02:07:35,000 --> 02:07:37,000
Dev 在

2882
02:07:37,000 --> 02:07:39,000
Container 里面开发一个东西

2883
02:07:39,000 --> 02:07:41,000
然后 Ops 接过 Container

2884
02:07:41,000 --> 02:07:43,000
然后把它放在一个

2885
02:07:43,000 --> 02:07:45,000
真正的运行环境上

2886
02:07:45,000 --> 02:07:47,000
然后整个过程中你会发现 DevOps 好像

2887
02:07:47,000 --> 02:07:49,000
因此

2888
02:07:49,000 --> 02:07:51,000
而变得非常简单

2889
02:07:51,000 --> 02:07:53,000
对

2890
02:07:53,000 --> 02:07:55,000
Docker 另外一个重要的贡献就是说

2891
02:07:55,000 --> 02:07:57,000
它把这个文件系统

2892
02:07:57,000 --> 02:07:59,000
虚拟化做得比较好

2893
02:07:59,000 --> 02:08:01,000
比如说刚才讲的那个虚拟机需要

2894
02:08:01,000 --> 02:08:03,000
如果你开五个虚拟机那你还要建五个虚拟机的镜像

2895
02:08:03,000 --> 02:08:05,000
那么他们那个

2896
02:08:05,000 --> 02:08:07,000
每个镜像都要占用

2897
02:08:07,000 --> 02:08:09,000
系统要占用一定的空间

2898
02:08:09,000 --> 02:08:11,000
然后应用它占用你的空间对吧

2899
02:08:11,000 --> 02:08:13,000
Docker 说那首先我们不需要这个虚拟每一个操作系统

2900
02:08:13,000 --> 02:08:15,000
我们这一条就省掉了

2901
02:08:15,000 --> 02:08:17,000
然后第二就是说我们这个文件系统

2902
02:08:17,000 --> 02:08:19,000
是一个很叫什么 Copy and Write 的系统

2903
02:08:19,000 --> 02:08:21,000
嗯

2904
02:08:21,000 --> 02:08:23,000
如果我在文件系统

2905
02:08:23,000 --> 02:08:25,000
做一个改进的话

2906
02:08:25,000 --> 02:08:27,000
我只需要记录它修改的那部分

2907
02:08:27,000 --> 02:08:29,000
然后共享的部分就可以

2908
02:08:29,000 --> 02:08:31,000
可以共享到这个磁盘空间嘛

2909
02:08:31,000 --> 02:08:33,000
这样的话我哪怕我开

2910
02:08:33,000 --> 02:08:35,000
十个一百个 Docker

2911
02:08:35,000 --> 02:08:37,000
的 container 的同时运行的时候

2912
02:08:37,000 --> 02:08:39,000
我并不需要真的浪费一百份

2913
02:08:39,000 --> 02:08:41,000
的磁盘空间

2914
02:08:41,000 --> 02:08:43,000
对 这个是非常了不得的一个

2915
02:08:43,000 --> 02:08:45,000
一个贡献吧

2916
02:08:45,000 --> 02:08:47,000
没错 嗯 可以看到 Docker 这个工具

2917
02:08:47,000 --> 02:08:49,000
是非常强大的一个东西

2918
02:08:49,000 --> 02:08:51,000
但是 Docker 本身还是要跑在一个系统上面的嘛

2919
02:08:51,000 --> 02:08:53,000
在我帮助这个 14.04

2920
02:08:53,000 --> 02:08:55,000
开始它就官方已经有

2921
02:08:55,000 --> 02:08:57,000
支持了 然后你只要在

2922
02:08:57,000 --> 02:08:59,000
APT 里面安装一下

2923
02:08:59,000 --> 02:09:01,000
那个我发动的主机就可以

2924
02:09:01,000 --> 02:09:03,000
变成一个 Docker 主机 然后你就可以在里面

2925
02:09:03,000 --> 02:09:05,000
运行一些 Docker 的 container

2926
02:09:05,000 --> 02:09:07,000
就好了 对 或者说

2927
02:09:07,000 --> 02:09:09,000
你就可以在这台机器上将你

2928
02:09:09,000 --> 02:09:11,000
自己的 app dockerize

2929
02:09:11,000 --> 02:09:13,000
嗯哼 对 让它

2930
02:09:13,000 --> 02:09:15,000
跑在一个容器里面 这套界面

2931
02:09:15,000 --> 02:09:17,000
还是挺容易用的 而且

2932
02:09:17,000 --> 02:09:19,000
我或者想想有一个优点就是

2933
02:09:19,000 --> 02:09:21,000
你可以保留一个

2934
02:09:21,000 --> 02:09:23,000
保留某一个

2935
02:09:23,000 --> 02:09:25,000
开发版本的一个 image

2936
02:09:25,000 --> 02:09:27,000
嗯 嗯 对 好像是这样的吧

2937
02:09:27,000 --> 02:09:29,000
对对对 就是你可以

2938
02:09:29,000 --> 02:09:31,000
在里面运行一个程序 然后把它

2939
02:09:31,000 --> 02:09:33,000
存成一个 image 然后你每次

2940
02:09:33,000 --> 02:09:35,000
打开这个 image 的时候你会得到这个

2941
02:09:35,000 --> 02:09:37,000
程序在那个时候的运行时刻

2942
02:09:37,000 --> 02:09:39,000
嗯哼 嗯哼 在那个时候的

2943
02:09:39,000 --> 02:09:41,000
部署状态

2944
02:09:41,000 --> 02:09:43,000
对 它等于又成了

2945
02:09:43,000 --> 02:09:45,000
某一种很特别的版本

2946
02:09:45,000 --> 02:09:47,000
控制系统 它所控制的是

2947
02:09:47,000 --> 02:09:49,000
一个软件的运行状态的版本

2948
02:09:49,000 --> 02:09:51,000
嗯 或者说是把整个

2949
02:09:51,000 --> 02:09:53,000
操作系统的状态进行的一个版本

2950
02:09:53,000 --> 02:09:55,000
控制吧 对 有点像

2951
02:09:55,000 --> 02:09:57,000
那个 VMV 里面的

2952
02:09:57,000 --> 02:09:59,000
Virtualbox 里面的 SnapShot

2953
02:09:59,000 --> 02:10:01,000
对对 但是它比 SnapShot

2954
02:10:01,000 --> 02:10:03,000
比较轻量的机会很多 而且快嘛

2955
02:10:03,000 --> 02:10:05,000
没错 嗯

2956
02:10:05,000 --> 02:10:07,000
但是还有的人觉得这样

2957
02:10:07,000 --> 02:10:09,000
还是太麻烦了 那个

2958
02:10:09,000 --> 02:10:11,000
所谓 Docker 的这个什么宿主机

2959
02:10:11,000 --> 02:10:13,000
啊 就是太复杂了

2960
02:10:13,000 --> 02:10:15,000
有很多人在做一些新的

2961
02:10:15,000 --> 02:10:17,000
尝试 比如说最

2962
02:10:17,000 --> 02:10:19,000
可能大家听的比较多的是

2963
02:10:19,000 --> 02:10:21,000
一个叫做 CoreOS 的这么一个

2964
02:10:21,000 --> 02:10:23,000
它是一个精简版的

2965
02:10:23,000 --> 02:10:25,000
Linux 系统

2966
02:10:25,000 --> 02:10:27,000
然后它也是基于 Cgroups

2967
02:10:27,000 --> 02:10:29,000
如果我记错了

2968
02:10:29,000 --> 02:10:31,000
对 它最开始是 它现在还是

2969
02:10:31,000 --> 02:10:33,000
目前为止还是基于 Docker

2970
02:10:33,000 --> 02:10:35,000
它就是给你提供一个精简版的

2971
02:10:35,000 --> 02:10:37,000
Docker 的运行环境 然后你直接在里面去

2972
02:10:37,000 --> 02:10:39,000
就是它的这个

2973
02:10:39,000 --> 02:10:41,000
CoreOS 本身是非常精简的东西

2974
02:10:41,000 --> 02:10:43,000
里面并没有很多东西

2975
02:10:43,000 --> 02:10:45,000
然后你所有的应用的部署

2976
02:10:45,000 --> 02:10:47,000
都是在 CoreOS 里面跑一个 Docker

2977
02:10:47,000 --> 02:10:49,000
然后你直接在 Docker 里面在建

2978
02:10:49,000 --> 02:10:51,000
各种的虚拟机去跑

2979
02:10:51,000 --> 02:10:53,000
Catenary 去跑

2980
02:10:53,000 --> 02:10:55,000
当然他们最近也在搞一个

2981
02:10:55,000 --> 02:10:57,000
因为他们跟 Docker 因为 Docker 背后还有一个公司

2982
02:10:57,000 --> 02:10:59,000
叫 Docker Incorporated

2983
02:10:59,000 --> 02:11:01,000
他们之间有一些利益的冲突

2984
02:11:01,000 --> 02:11:03,000
他们不是一家的 这是

2985
02:11:03,000 --> 02:11:05,000
或是说他们的设计哲学有点不一样

2986
02:11:05,000 --> 02:11:07,000
对 他们设计理念有点不一样

2987
02:11:07,000 --> 02:11:09,000
然后商业的利益

2988
02:11:09,000 --> 02:11:11,000
也有点冲突嘛 所以他们

2989
02:11:11,000 --> 02:11:13,000
最近在搞一个所谓的 Docker

2990
02:11:13,000 --> 02:11:15,000
的一个分支嘛 一个 Fork

2991
02:11:15,000 --> 02:11:17,000
去把一些标准化的东西定下来

2992
02:11:17,000 --> 02:11:19,000
但是我们就不去纠结那些细节了

2993
02:11:19,000 --> 02:11:21,000
其实说穿的就是

2994
02:11:21,000 --> 02:11:23,000
原教族主义和

2995
02:11:23,000 --> 02:11:25,000
和这个什么商业利益

2996
02:11:25,000 --> 02:11:27,000
之间的冲突

2997
02:11:27,000 --> 02:11:29,000
然后 Ubuntu

2998
02:11:29,000 --> 02:11:31,000
他们也没有闲着

2999
02:11:31,000 --> 02:11:33,000
他们前一段时间也发布了一个叫做 Ubuntu Core

3000
02:11:33,000 --> 02:11:35,000
这么一个新的

3001
02:11:35,000 --> 02:11:37,000
Ubuntu 的发行版

3002
02:11:37,000 --> 02:11:39,000
这个也比较好玩的一点就是说

3003
02:11:39,000 --> 02:11:41,000
他连这个

3004
02:11:41,000 --> 02:11:43,000
母系统本身都变成一个

3005
02:11:43,000 --> 02:11:45,000
Docker 的

3006
02:11:45,000 --> 02:11:47,000
Docker 化的一个东西了吧

3007
02:11:47,000 --> 02:11:49,000
你可以这么想

3008
02:11:49,000 --> 02:11:51,000
就是 母系素组机

3009
02:11:51,000 --> 02:11:53,000
的系统里面它还是可以有一些状态

3010
02:11:53,000 --> 02:11:55,000
要改的嘛 然后它的升级啊这些

3011
02:11:55,000 --> 02:11:57,000
还是不是非常稳健的

3012
02:11:57,000 --> 02:11:59,000
但是刚才我们讲利用那种 Image 的这种

3013
02:11:59,000 --> 02:12:01,000
版本控制的一种方式

3014
02:12:01,000 --> 02:12:03,000
它可以做到连这个素组机的升级

3015
02:12:03,000 --> 02:12:05,000
和这个维护都变成一个

3016
02:12:05,000 --> 02:12:07,000
非常确定化的东西 就是如果

3017
02:12:07,000 --> 02:12:09,000
中途失败是可以回滚的

3018
02:12:09,000 --> 02:12:11,000
然后

3019
02:12:11,000 --> 02:12:13,000
就变成这个就是

3020
02:12:13,000 --> 02:12:15,000
用 Docker 来控制 Docker 素组机了

3021
02:12:15,000 --> 02:12:17,000
你可以大概是这个意思

3022
02:12:17,000 --> 02:12:19,000
OK 有意思

3023
02:12:19,000 --> 02:12:21,000
比较好 但是

3024
02:12:21,000 --> 02:12:23,000
整个来说呢 对 Docker 现在还是比较

3025
02:12:23,000 --> 02:12:25,000
一个

3026
02:12:25,000 --> 02:12:27,000
新兴的技术吧

3027
02:12:27,000 --> 02:12:29,000
你说要用在生产中可能还是

3028
02:12:29,000 --> 02:12:31,000
要先实践一下

3029
02:12:31,000 --> 02:12:33,000
也有不少的坑 那些 Docker 本身

3030
02:12:33,000 --> 02:12:35,000
是一个还在不断往下中的系统

3031
02:12:35,000 --> 02:12:37,000
对 可能就是因为这些坑

3032
02:12:37,000 --> 02:12:39,000
刚才说到这个所谓 Docker

3033
02:12:39,000 --> 02:12:41,000
Apocalypse

3034
02:12:41,000 --> 02:12:43,000
也指的就是这些 就是有些人

3035
02:12:43,000 --> 02:12:45,000
对于对此之怀疑态度的会觉得

3036
02:12:45,000 --> 02:12:47,000
因为这个东西还不成熟

3037
02:12:47,000 --> 02:12:49,000
哪怕我们两个 我们两个觉得

3038
02:12:49,000 --> 02:12:51,000
这是一个化石灾的伟大发明

3039
02:12:51,000 --> 02:12:53,000
也不可能拍着胸部说

3040
02:12:53,000 --> 02:12:55,000
这个东西肯定会在时间之后成为

3041
02:12:55,000 --> 02:12:57,000
绝对的主要

3042
02:12:57,000 --> 02:12:59,000
但是我觉得趋势还是要

3043
02:12:59,000 --> 02:13:01,000
再往那个方向走 对

3044
02:13:01,000 --> 02:13:03,000
因为就像集装箱一样 很难想像

3045
02:13:03,000 --> 02:13:05,000
将来没有这种变异的话

3046
02:13:05,000 --> 02:13:07,000
还能有

3047
02:13:07,000 --> 02:13:09,000
什么更好的方式来管理

3048
02:13:09,000 --> 02:13:11,000
来让

3049
02:13:11,000 --> 02:13:13,000
每个人都可以

3050
02:13:13,000 --> 02:13:15,000
更加低门卡的成为 DevOps

3051
02:13:15,000 --> 02:13:17,000
可能这是最好的一种方法

3052
02:13:17,000 --> 02:13:19,000
对

3053
02:13:19,000 --> 02:13:21,000
所以如果你作为一个开发者

3054
02:13:21,000 --> 02:13:23,000
然后你想成为 DevOps

3055
02:13:23,000 --> 02:13:25,000
你想接触一下 Docker 这东西

3056
02:13:25,000 --> 02:13:27,000
也有很多方法可以尝试

3057
02:13:27,000 --> 02:13:29,000
比如说你自己在电脑上装一个免费的

3058
02:13:29,000 --> 02:13:31,000
VirtualBox

3059
02:13:31,000 --> 02:13:33,000
然后你再装一个 Docker

3060
02:13:33,000 --> 02:13:35,000
或者装一个 5 Bunt 也好

3061
02:13:35,000 --> 02:13:37,000
或者装 Docker 或者装一个 QoS 也可以

3062
02:13:37,000 --> 02:13:39,000
当然也有一个

3063
02:13:39,000 --> 02:13:41,000
如果你是在 Mac 上面的话

3064
02:13:41,000 --> 02:13:43,000
我们有一个更简单的方式

3065
02:13:43,000 --> 02:13:45,000
Docker 这个社区提供了

3066
02:13:45,000 --> 02:13:47,000
一个叫做 Boot 2 Docker 的这么一个

3067
02:13:47,000 --> 02:13:49,000
极度精简版的

3068
02:13:49,000 --> 02:13:51,000
Linux 系统

3069
02:13:51,000 --> 02:13:53,000
里面它做的唯一一件事情就是让你跑 Docker

3070
02:13:53,000 --> 02:13:55,000
然后我给这个系统

3071
02:13:55,000 --> 02:13:57,000
Boot 2 Docker 这个工具做了一个

3072
02:13:57,000 --> 02:13:59,000
命令行的小工具

3073
02:13:59,000 --> 02:14:01,000
各位

3074
02:14:01,000 --> 02:14:03,000
现在正在听

3075
02:14:03,000 --> 02:14:07,000
Nerio 同学在 Brag 他写的一个自我推广

3076
02:14:07,000 --> 02:14:11,000
一个用 Docker 的小命行工具

3077
02:14:11,000 --> 02:14:13,000
叫做 Boot 2 Docker Client

3078
02:14:13,000 --> 02:14:15,000
对对对

3079
02:14:15,000 --> 02:14:17,000
Boot 2 Docker-Cli

3080
02:14:17,000 --> 02:14:19,000
对然后你可以在

3081
02:14:19,000 --> 02:14:21,000
Homebrew 里面装 Mac

3082
02:14:21,000 --> 02:14:23,000
因为这个主要是给 Mac 用户开发的

3083
02:14:23,000 --> 02:14:25,000
因为 Docker 不能原生运行

3084
02:14:25,000 --> 02:14:27,000
只能原生运行在 Linux 上面

3085
02:14:27,000 --> 02:14:29,000
所以你肯定是需要一个虚拟机

3086
02:14:29,000 --> 02:14:31,000
才能在 Mac 上面跑的

3087
02:14:31,000 --> 02:14:33,000
然后这个工具你可以干嘛呢

3088
02:14:33,000 --> 02:14:35,000
可以帮你一件事的

3089
02:14:35,000 --> 02:14:37,000
去完成只要你装上

3090
02:14:37,000 --> 02:14:39,000
VirtualBox 之后它可以一件事的

3091
02:14:39,000 --> 02:14:41,000
帮你装好这个 Boot 2 Docker 东西

3092
02:14:41,000 --> 02:14:43,000
然后可以让你很方便的

3093
02:14:43,000 --> 02:14:45,000
去操纵这个虚拟机

3094
02:14:45,000 --> 02:14:47,000
里面的一些概念吧

3095
02:14:47,000 --> 02:14:49,000
然后之后你可以再用 Docker 去

3096
02:14:49,000 --> 02:14:51,000
用 Boot 2 Docker 装好的

3097
02:14:51,000 --> 02:14:53,000
一个

3098
02:14:53,000 --> 02:14:55,000
用 Boot 2 Docker 装好的

3099
02:14:55,000 --> 02:14:57,000
一个 Docker 数字机

3100
02:14:57,000 --> 02:14:59,000
的去

3101
02:14:59,000 --> 02:15:01,000
可以去玩嘛

3102
02:15:01,000 --> 02:15:03,000
就可以去学习里面的东西

3103
02:15:03,000 --> 02:15:05,000
好累

3104
02:15:05,000 --> 02:15:07,000
对大概就是这个意思

3105
02:15:07,000 --> 02:15:09,000
可以去学习

3106
02:15:09,000 --> 02:15:11,000
然后现在我们要

3107
02:15:11,000 --> 02:15:13,000
在节目的最后要扯一点

3108
02:15:13,000 --> 02:15:15,000
玄学

3109
02:15:15,000 --> 02:15:17,000
对就是扯一些

3110
02:15:17,000 --> 02:15:19,000
有的没的不干

3111
02:15:19,000 --> 02:15:21,000
不湿可能还是偏湿的一些

3112
02:15:21,000 --> 02:15:23,000
东西吧

3113
02:15:23,000 --> 02:15:25,000
其实我们刚才讲那么多东西

3114
02:15:25,000 --> 02:15:27,000
我们为什么要这么多工具去

3115
02:15:27,000 --> 02:15:29,000
其实要解决什么问题

3116
02:15:29,000 --> 02:15:31,000
如果我们把

3117
02:15:31,000 --> 02:15:33,000
一台服务器作为一个状态机的话

3118
02:15:33,000 --> 02:15:35,000
其实我们可以

3119
02:15:35,000 --> 02:15:37,000
看到这些工具的一个

3120
02:15:37,000 --> 02:15:39,000
发展方向就是把这个状态机

3121
02:15:39,000 --> 02:15:41,000
尽量变得无状态

3122
02:15:41,000 --> 02:15:43,000
状态机

3123
02:15:43,000 --> 02:15:45,000
不可能无状态

3124
02:15:45,000 --> 02:15:47,000
我觉得可能正确的说法应该是让

3125
02:15:47,000 --> 02:15:49,000
状态机的状态变化

3126
02:15:49,000 --> 02:15:51,000
是可预测的吗

3127
02:15:51,000 --> 02:15:53,000
是可

3128
02:15:53,000 --> 02:15:55,000
这么说可能也不是特别

3129
02:15:55,000 --> 02:15:57,000
精确

3130
02:15:57,000 --> 02:15:59,000
我们刚才想要表达什么意思就是

3131
02:15:59,000 --> 02:16:01,000
服务器是一大堆状态机

3132
02:16:01,000 --> 02:16:03,000
状态机是一个

3133
02:16:03,000 --> 02:16:05,000
算了我不解释什么状态机了

3134
02:16:05,000 --> 02:16:07,000
就是如果把服务器

3135
02:16:07,000 --> 02:16:09,000
视为一个状态机的话

3136
02:16:09,000 --> 02:16:11,000
我们的终极理想就是

3137
02:16:11,000 --> 02:16:13,000
我不用去操心状态机

3138
02:16:13,000 --> 02:16:15,000
从状态 A

3139
02:16:15,000 --> 02:16:17,000
变到状态 B 的

3140
02:16:17,000 --> 02:16:19,000
过程究竟需要

3141
02:16:19,000 --> 02:16:21,000
做哪些事情

3142
02:16:21,000 --> 02:16:23,000
我只操心让它从状态 A 变到

3143
02:16:23,000 --> 02:16:25,000
状态 B 可控

3144
02:16:25,000 --> 02:16:27,000
有反应

3145
02:16:27,000 --> 02:16:29,000
并且可以同时在很多很多

3146
02:16:29,000 --> 02:16:31,000
机器上运行

3147
02:16:31,000 --> 02:16:33,000
对就是说我们希望能够

3148
02:16:33,000 --> 02:16:35,000
有成百上千的

3149
02:16:35,000 --> 02:16:37,000
我们不用一个

3150
02:16:37,000 --> 02:16:39,000
通过很 imperative

3151
02:16:39,000 --> 02:16:41,000
很 mini 式的方式去指定它怎么切换状态

3152
02:16:41,000 --> 02:16:43,000
的状态机

3153
02:16:43,000 --> 02:16:45,000
我只用告诉它说进入 A 状态

3154
02:16:45,000 --> 02:16:47,000
然后它们就全部进入 A 状态了

3155
02:16:47,000 --> 02:16:49,000
对这是有点像

3156
02:16:49,000 --> 02:16:51,000
Dispossible Minion 里面的

3157
02:16:51,000 --> 02:16:53,000
Miniion 一样我们理想状态

3158
02:16:53,000 --> 02:16:55,000
不是告诉每一个单独的 Miniion

3159
02:16:55,000 --> 02:16:57,000
Kevin 你去拿那个

3160
02:16:57,000 --> 02:16:59,000
然后 Mike 你去拿那个

3161
02:16:59,000 --> 02:17:01,000
然后把它拿两个不同的工具

3162
02:17:01,000 --> 02:17:03,000
把塑小射线枪偷出来

3163
02:17:03,000 --> 02:17:05,000
我只需要下一个命令

3164
02:17:05,000 --> 02:17:07,000
你们去把塑小射线枪给我偷出来

3165
02:17:07,000 --> 02:17:09,000
至于怎么完成的我不管

3166
02:17:09,000 --> 02:17:11,000
这是我们想要达到的终极目标

3167
02:17:11,000 --> 02:17:13,000
说出来其实还是懒吗

3168
02:17:13,000 --> 02:17:15,000
我觉得我们这

3169
02:17:15,000 --> 02:17:17,000
我们这一期讲的

3170
02:17:17,000 --> 02:17:19,000
Docker

3171
02:17:19,000 --> 02:17:21,000
其实也是第三层的

3172
02:17:21,000 --> 02:17:23,000
所谓的 Lifecycle Management

3173
02:17:23,000 --> 02:17:25,000
就是 Server as a State Machine

3174
02:17:25,000 --> 02:17:27,000
as a Service

3175
02:17:27,000 --> 02:17:29,000
我们要管理他们的 Lifecycle

3176
02:17:29,000 --> 02:17:31,000
然后

3177
02:17:33,000 --> 02:17:35,000
所有这一切都希望能够尽可能

3178
02:17:35,000 --> 02:17:37,000
的自动化尽可能的

3179
02:17:37,000 --> 02:17:39,000
无痛的实现

3180
02:17:39,000 --> 02:17:41,000
所以归根结底其实还是

3181
02:17:41,000 --> 02:17:43,000
因为懒

3182
02:17:43,000 --> 02:17:45,000
或者说

3183
02:17:45,000 --> 02:17:47,000
削减复杂度嘛

3184
02:17:47,000 --> 02:17:49,000
如果你要关注每一台机器

3185
02:17:49,000 --> 02:17:51,000
它具体的状态怎么样

3186
02:17:51,000 --> 02:17:53,000
每台机器状态还不一样

3187
02:17:53,000 --> 02:17:55,000
你手工一个一个解决的话

3188
02:17:55,000 --> 02:17:57,000
这个就太复杂了嘛

3189
02:17:57,000 --> 02:17:59,000
我们想的方法就是说

3190
02:17:59,000 --> 02:18:01,000
能够通过这种

3191
02:18:01,000 --> 02:18:03,000
首先是一个描述性的语言

3192
02:18:03,000 --> 02:18:05,000
去指定它的状态

3193
02:18:05,000 --> 02:18:07,000
然后用工具去实现说

3194
02:18:07,000 --> 02:18:09,000
我不管你是什么状态

3195
02:18:09,000 --> 02:18:11,000
你就变成这样的状态就好了

3196
02:18:11,000 --> 02:18:13,000
来做到

3197
02:18:13,000 --> 02:18:15,000
把这个事情尽量变得简化一点

3198
02:18:15,000 --> 02:18:17,000
目标是什么呢

3199
02:18:17,000 --> 02:18:19,000
希望能够很快速方便的

3200
02:18:19,000 --> 02:18:21,000
能够去生缩我们这个

3201
02:18:21,000 --> 02:18:23,000
计算资源

3202
02:18:23,000 --> 02:18:25,000
然后去应对这个随时变化的

3203
02:18:25,000 --> 02:18:27,000
工作负荷嘛

3204
02:18:27,000 --> 02:18:29,000
没错

3205
02:18:29,000 --> 02:18:31,000
然后我们让状态机

3206
02:18:31,000 --> 02:18:33,000
变得所谓

3207
02:18:33,000 --> 02:18:35,000
不是 Stateless

3208
02:18:35,000 --> 02:18:37,000
但是是某种意义上的

3209
02:18:37,000 --> 02:18:41,000
在我们的最终用户的

3210
02:18:41,000 --> 02:18:43,000
视角看来是处于 Stateless 的状态的

3211
02:18:45,000 --> 02:18:47,000
这样一种思潮

3212
02:18:47,000 --> 02:18:49,000
或者说这样一种哲学

3213
02:18:49,000 --> 02:18:51,000
其理念和

3214
02:18:51,000 --> 02:18:53,000
functional programming 其实是相通的

3215
02:18:53,000 --> 02:18:55,000
对

3216
02:18:55,000 --> 02:18:57,000
就说我们如果把每一个

3217
02:18:57,000 --> 02:18:59,000
因为我们为什么要弄那么多

3218
02:18:59,000 --> 02:19:01,000
服务器跑起来就是因为它要完成一个功能

3219
02:19:01,000 --> 02:19:03,000
那所谓完成功能就是说

3220
02:19:03,000 --> 02:19:05,000
它服务器接受一个输入用户的请求

3221
02:19:05,000 --> 02:19:07,000
对吧然后它要完成一个输出

3222
02:19:07,000 --> 02:19:09,000
就是产生用户的反

3223
02:19:09,000 --> 02:19:11,000
反复给用户的结果

3224
02:19:11,000 --> 02:19:13,000
我们是希望每一个这个

3225
02:19:13,000 --> 02:19:15,000
这个我们叫做服务器也好

3226
02:19:15,000 --> 02:19:17,000
还是叫做 container 也好

3227
02:19:17,000 --> 02:19:19,000
我们希望它的输入输出是能够

3228
02:19:19,000 --> 02:19:21,000
无状态的

3229
02:19:21,000 --> 02:19:23,000
就是说我们只要有同样的

3230
02:19:23,000 --> 02:19:25,000
另外一个 container 或者同样的

3231
02:19:25,000 --> 02:19:27,000
另外一个服务器我给它同样的输出

3232
02:19:27,000 --> 02:19:29,000
它能够产生同样的输出吗

3233
02:19:29,000 --> 02:19:31,000
对没有副作用

3234
02:19:31,000 --> 02:19:33,000
然后这样没有副作用的话就可以让我们

3235
02:19:33,000 --> 02:19:35,000
很方便的去管理它们

3236
02:19:35,000 --> 02:19:37,000
也可以调配资源啊调度资源

3237
02:19:37,000 --> 02:19:39,000
对我们就可以像

3238
02:19:39,000 --> 02:19:41,000
把整个服务器

3239
02:19:41,000 --> 02:19:43,000
像一个函数一样组建起来

3240
02:19:43,000 --> 02:19:45,000
然后每次扔进去

3241
02:19:45,000 --> 02:19:47,000
我们想我们知道会得到什么样

3242
02:19:47,000 --> 02:19:49,000
输出的输入就可以了

3243
02:19:49,000 --> 02:19:51,000
而不是像在

3244
02:19:51,000 --> 02:19:53,000
命令室编程那样

3245
02:19:53,000 --> 02:19:55,000
还要去操心此时的整个程序

3246
02:19:55,000 --> 02:19:57,000
处理什么状态

3247
02:19:57,000 --> 02:19:59,000
这个我们是不是忘了提 Nix OS

3248
02:19:59,000 --> 02:20:01,000
Nix OS 不对

3249
02:20:01,000 --> 02:20:03,000
它的最终目标不就是要达到这个效果

3250
02:20:03,000 --> 02:20:05,000
对这个其实应该要讲的

3251
02:20:05,000 --> 02:20:07,000
不过因为我自己也没有用过

3252
02:20:07,000 --> 02:20:09,000
只是在关注这个东西

3253
02:20:09,000 --> 02:20:11,000
没有太多的实际的

3254
02:20:11,000 --> 02:20:13,000
这个英文的

3255
02:20:13,000 --> 02:20:15,000
场景而且它那个本身

3256
02:20:15,000 --> 02:20:17,000
也不太成熟嘛还是在一个

3257
02:20:17,000 --> 02:20:19,000
开发它还是一个比较

3258
02:20:19,000 --> 02:20:21,000
相比较先锋式的

3259
02:20:21,000 --> 02:20:23,000
比较比较比较更加

3260
02:20:23,000 --> 02:20:25,000
纯粹的这么一个朝着

3261
02:20:25,000 --> 02:20:27,000
stateless 的

3262
02:20:27,000 --> 02:20:29,000
的管理工具的

3263
02:20:29,000 --> 02:20:31,000
一个一个尝试

3264
02:20:31,000 --> 02:20:33,000
对就是 Docker 这种思路

3265
02:20:33,000 --> 02:20:35,000
就是说我们不改变

3266
02:20:35,000 --> 02:20:37,000
目前的操作系统就是你

3267
02:20:37,000 --> 02:20:39,000
你现在 Docker 里面跑的东西还是一个

3268
02:20:39,000 --> 02:20:41,000
我们所谓的常规的一个操作系统

3269
02:20:41,000 --> 02:20:43,000
它里面还是有那些状态的

3270
02:20:43,000 --> 02:20:45,000
但就是说我们只是说因为

3271
02:20:45,000 --> 02:20:47,000
我们用一个皈依化的方式去生成它

3272
02:20:47,000 --> 02:20:49,000
然后我们

3273
02:20:49,000 --> 02:20:51,000
Hopefully

3274
02:20:51,000 --> 02:20:53,000
我们希望

3275
02:20:53,000 --> 02:20:55,000
我们通过皈依化的方式去生成它

3276
02:20:55,000 --> 02:20:57,000
得到的结果是一个大家都一样的结果

3277
02:20:57,000 --> 02:20:59,000
但是并不能保证它运行一段时间之后

3278
02:20:59,000 --> 02:21:01,000
它每个个

3279
02:21:01,000 --> 02:21:03,000
同样方式生成的

3280
02:21:03,000 --> 02:21:05,000
container 它不会出现所谓 diverge

3281
02:21:05,000 --> 02:21:07,000
就是出现分野

3282
02:21:07,000 --> 02:21:09,000
就是说这个运行的一段时间变成

3283
02:21:09,000 --> 02:21:11,000
这个状态然后那个运行的时间变成另一个状态

3284
02:21:11,000 --> 02:21:13,000
没错

3285
02:21:13,000 --> 02:21:15,000
但是像 Nix

3286
02:21:15,000 --> 02:21:17,000
这种东西的话其实它又想

3287
02:21:17,000 --> 02:21:19,000
做更进一步的它

3288
02:21:19,000 --> 02:21:21,000
我们只要把操作系统本身变成

3289
02:21:21,000 --> 02:21:23,000
是一个 stateless

3290
02:21:23,000 --> 02:21:25,000
的东西就是它的

3291
02:21:25,000 --> 02:21:27,000
其实是更加一个更

3292
02:21:27,000 --> 02:21:29,000
激进的一个方法我觉得

3293
02:21:29,000 --> 02:21:31,000
但是通常来说这种更加

3294
02:21:31,000 --> 02:21:33,000
激进的方法一般

3295
02:21:33,000 --> 02:21:35,000
都是不会成功的

3296
02:21:37,000 --> 02:21:39,000
就是对软件工程来讲

3297
02:21:39,000 --> 02:21:41,000
我觉得这个向后兼容

3298
02:21:41,000 --> 02:21:43,000
还有这个所谓的这个

3299
02:21:43,000 --> 02:21:45,000
规模优势还是有点

3300
02:21:45,000 --> 02:21:47,000
有点用处吧就说 Nix

3301
02:21:47,000 --> 02:21:49,000
它其实更加类似于 Bround to Core

3302
02:21:49,000 --> 02:21:51,000
那种比较极端

3303
02:21:51,000 --> 02:21:53,000
的一种方式去改变我们的

3304
02:21:53,000 --> 02:21:55,000
部署的环境

3305
02:21:57,000 --> 02:21:59,000
但愿是吧

3306
02:21:59,000 --> 02:22:01,000
我还是希望它能够做

3307
02:22:01,000 --> 02:22:03,000
我应该但愿

3308
02:22:03,000 --> 02:22:05,000
我应该说但愿不是吧

3309
02:22:05,000 --> 02:22:07,000
我觉得在服务端其实人们接受

3310
02:22:07,000 --> 02:22:09,000
变革的

3311
02:22:09,000 --> 02:22:11,000
阻力

3312
02:22:11,000 --> 02:22:13,000
还是要比在其他

3313
02:22:13,000 --> 02:22:15,000
领域少一些因为在服务端

3314
02:22:15,000 --> 02:22:17,000
其实

3315
02:22:17,000 --> 02:22:19,000
首先人们对产品没有太多感情

3316
02:22:19,000 --> 02:22:21,000
不像

3317
02:22:21,000 --> 02:22:23,000
这没有用户习惯在里面

3318
02:22:23,000 --> 02:22:25,000
我们不会说我是果粉或者说我有苹果

3319
02:22:25,000 --> 02:22:27,000
的使用习惯

3320
02:22:27,000 --> 02:22:29,000
我们都是一对建方史多的人

3321
02:22:29,000 --> 02:22:31,000
对我们在

3322
02:22:31,000 --> 02:22:33,000
看见摸得着的

3323
02:22:33,000 --> 02:22:35,000
这种消费

3324
02:22:35,000 --> 02:22:37,000
的领域会有这样的

3325
02:22:37,000 --> 02:22:39,000
教派的存在就是你我都是

3326
02:22:39,000 --> 02:22:41,000
我不知道你是不是但我是一个

3327
02:22:41,000 --> 02:22:43,000
苹果翘土

3328
02:22:43,000 --> 02:22:45,000
但在服务端可能

3329
02:22:45,000 --> 02:22:47,000
不会有这样的

3330
02:22:47,000 --> 02:22:49,000
会更加利益趋势

3331
02:22:49,000 --> 02:22:51,000
Lazy Driven 一点

3332
02:22:51,000 --> 02:22:53,000
什么好我用什么我不会去

3333
02:22:53,000 --> 02:22:55,000
而且

3334
02:22:55,000 --> 02:22:57,000
在服务端有好处就是

3335
02:22:57,000 --> 02:22:59,000
好是有一个明确的标准的

3336
02:22:59,000 --> 02:23:01,000
如果我用这个比你一快

3337
02:23:01,000 --> 02:23:03,000
二简单那它就是好

3338
02:23:03,000 --> 02:23:05,000
但是在我们

3339
02:23:05,000 --> 02:23:07,000
可能消费级别

3340
02:23:07,000 --> 02:23:09,000
中端电子用户会有一些

3341
02:23:09,000 --> 02:23:11,000
非常难以理解的非理性的因素

3342
02:23:11,000 --> 02:23:13,000
有感性的因素在里面

3343
02:23:13,000 --> 02:23:15,000
比如说我就是习惯关闭

3344
02:23:15,000 --> 02:23:17,000
按钮在左上角

3345
02:23:17,000 --> 02:23:19,000
没有理由

3346
02:23:19,000 --> 02:23:21,000
没有什么理由你能告诉我

3347
02:23:21,000 --> 02:23:23,000
说在右上角就是要别人在左上角好吗

3348
02:23:23,000 --> 02:23:25,000
我就是说不好你咬我

3349
02:23:25,000 --> 02:23:27,000
我就觉得 OS X 的自力渲染

3350
02:23:27,000 --> 02:23:29,000
比 Windows 的好你能把我咋地

3351
02:23:29,000 --> 02:23:31,000
你咬我但是在服务端

3352
02:23:31,000 --> 02:23:33,000
就不会有这种不会有这样的问题

3353
02:23:33,000 --> 02:23:35,000
真的是真刀真枪

3354
02:23:35,000 --> 02:23:37,000
没有什么

3355
02:23:37,000 --> 02:23:39,000
一切都是可以量化这可能是

3356
02:23:39,000 --> 02:23:41,000
你为什么喜欢后端的原因

3357
02:23:41,000 --> 02:23:43,000
对一切都是可控

3358
02:23:43,000 --> 02:23:45,000
你倾向于一切都是可控可以量化

3359
02:23:45,000 --> 02:23:47,000
可以抉择

3360
02:23:47,000 --> 02:23:49,000
所以

3361
02:23:49,000 --> 02:23:51,000
从这个角度讲可能

3362
02:23:51,000 --> 02:23:53,000
Nix OS

3363
02:23:53,000 --> 02:23:55,000
还是会

3364
02:23:55,000 --> 02:23:57,000
后来居上

3365
02:23:57,000 --> 02:23:59,000
如果真的有它宣称的那么好

3366
02:23:59,000 --> 02:24:01,000
当然其作者也说了

3367
02:24:01,000 --> 02:24:03,000
Nix OS is not for the faint of heart

3368
02:24:03,000 --> 02:24:05,000
Final

3369
02:24:05,000 --> 02:24:07,000
你说小白物尽

3370
02:24:07,000 --> 02:24:09,000
如果你没有一些功力

3371
02:24:09,000 --> 02:24:11,000
没有想要折腾的

3372
02:24:11,000 --> 02:24:13,000
心念的话最好还是不要碰它

3373
02:24:13,000 --> 02:24:15,000
不过那个

3374
02:24:15,000 --> 02:24:17,000
那个还比较用户友好

3375
02:24:17,000 --> 02:24:19,000
可以去玩一下如果你觉得

3376
02:24:19,000 --> 02:24:21,000
Nix OS 太

3377
02:24:21,000 --> 02:24:23,000
Hardcore

3378
02:24:23,000 --> 02:24:25,000
Ubuntu Core 还比较

3379
02:24:25,000 --> 02:24:27,000
比较好玩

3380
02:24:27,000 --> 02:24:29,000
我自己试了一下还挺

3381
02:24:29,000 --> 02:24:31,000
我觉得还不错吧那个理念也挺简单的

3382
02:24:33,000 --> 02:24:35,000
好吧

3383
02:24:35,000 --> 02:24:37,000
那我们大概聊完了

3384
02:24:37,000 --> 02:24:39,000
这个最后一期的

3385
02:24:39,000 --> 02:24:41,000
Sorry

3386
02:24:41,000 --> 02:24:43,000
2015 年第一期的

3387
02:24:43,000 --> 02:24:45,000
内核恐慌我们今天的主题

3388
02:24:45,000 --> 02:24:47,000
其实也是延伸了前两期的

3389
02:24:47,000 --> 02:24:49,000
Lifecycle Management

3390
02:24:49,000 --> 02:24:51,000
今天讲的是

3391
02:24:51,000 --> 02:24:53,000
Containerization

3392
02:24:53,000 --> 02:24:55,000
集装箱化

3393
02:24:55,000 --> 02:24:57,000
可以这么说吗

3394
02:24:57,000 --> 02:24:59,000
软件部署的集装箱化以及

3395
02:24:59,000 --> 02:25:01,000
DevOps

3396
02:25:01,000 --> 02:25:03,000
我觉得我从今天开始一定要

3397
02:25:03,000 --> 02:25:05,000
每一期都说那个灌口

3398
02:25:05,000 --> 02:25:07,000
好像其他节目都说

3399
02:25:07,000 --> 02:25:09,000
我不说不太好

3400
02:25:09,000 --> 02:25:11,000
北美山地时间

3401
02:25:11,000 --> 02:25:13,000
2006 年 1 月 2 日下午

3402
02:25:13,000 --> 02:25:15,000
3 点 04 分 05 秒

3403
02:25:15,000 --> 02:25:17,000
您正在收听的是

3404
02:25:17,000 --> 02:25:19,000
IPN Podcast

3405
02:25:19,000 --> 02:25:21,000
网络旗下的 IT

3406
02:25:21,000 --> 02:25:23,000
技术主题节目内核恐慌

3407
02:25:23,000 --> 02:25:25,000
我们号称 Hardcore 但是没有干货

3408
02:25:25,000 --> 02:25:27,000
想听的人听不想听的人就不要听

3409
02:25:27,000 --> 02:25:29,000
同时 IPN

3410
02:25:29,000 --> 02:25:31,000
旗下的其他五辆 Podcast 包括

3411
02:25:31,000 --> 02:25:33,000
Softcore 技术主题节目

3412
02:25:33,000 --> 02:25:35,000
IT 功论

3413
02:25:35,000 --> 02:25:37,000
同样是由 Rail 和

3414
02:25:37,000 --> 02:25:39,000
另外一位我们的制作人 Lawrence

3415
02:25:39,000 --> 02:25:41,000
技术师

3416
02:25:41,000 --> 02:25:43,000
还有医疗主题节目太医来了

3417
02:25:43,000 --> 02:25:45,000
美食节目未知道

3418
02:25:45,000 --> 02:25:47,000
以及不只谈艺术的

3419
02:25:47,000 --> 02:25:49,000
艺术类节目流行通信

3420
02:25:49,000 --> 02:25:51,000
他的英文名字叫做 Pop Dispatch

3421
02:25:51,000 --> 02:25:53,000
千万不要记错成出债分派

3422
02:25:55,000 --> 02:25:57,000
最后还有其实我是非常

3423
02:25:57,000 --> 02:25:59,000
推荐流行通信

3424
02:25:59,000 --> 02:26:01,000
这一趟节目的就是我觉得尤其是

3425
02:26:01,000 --> 02:26:03,000
死城妹应该听一听

3426
02:26:03,000 --> 02:26:05,000
幻醒一下脑中

3427
02:26:05,000 --> 02:26:07,000
已经快要死去的感性

3428
02:26:07,000 --> 02:26:09,000
那一部分是不是

3429
02:26:09,000 --> 02:26:11,000
我和女朋友在听这个节目的时候

3430
02:26:11,000 --> 02:26:13,000
就说如果我们

3431
02:26:13,000 --> 02:26:15,000
内壑恐慌有我们自己的

3432
02:26:15,000 --> 02:26:17,000
一个 pattern 的话

3433
02:26:17,000 --> 02:26:19,000
或者一个家或一个族徽的话

3434
02:26:19,000 --> 02:26:21,000
那肯定到处都是直线

3435
02:26:23,000 --> 02:26:25,000
所有地方都是 90 度角

3436
02:26:25,000 --> 02:26:27,000
但是如果你在听

3437
02:26:27,000 --> 02:26:29,000
出债分派 Pop Dispatch

3438
02:26:29,000 --> 02:26:31,000
流行通信的时候你会觉得

3439
02:26:31,000 --> 02:26:33,000
有时候你会觉得

3440
02:26:33,000 --> 02:26:35,000
从一个

3441
02:26:35,000 --> 02:26:37,000
死理型派的角度

3442
02:26:37,000 --> 02:26:39,000
会觉得主持人好像有点拖线

3443
02:26:39,000 --> 02:26:41,000
很乱造成的

3444
02:26:41,000 --> 02:26:43,000
可能这才是

3445
02:26:43,000 --> 02:26:45,000
我们所缺失的

3446
02:26:45,000 --> 02:26:47,000
那一部分让我们成为

3447
02:26:47,000 --> 02:26:49,000
让我们更具有人情味的一部分

3448
02:26:49,000 --> 02:26:51,000
如果他们有他们的主题图案的话

3449
02:26:51,000 --> 02:26:53,000
可能都是非常柔美的曲线

3450
02:26:53,000 --> 02:26:55,000
像云一样

3451
02:26:55,000 --> 02:26:57,000
水云纹

3452
02:26:57,000 --> 02:26:59,000
所以我还是非常

3453
02:26:59,000 --> 02:27:01,000
推荐各位

3454
02:27:01,000 --> 02:27:03,000
喜欢收听我们节目的

3455
02:27:03,000 --> 02:27:05,000
听众的话一定也要去

3456
02:27:05,000 --> 02:27:07,000
听一下流行通信

3457
02:27:07,000 --> 02:27:09,000
但如果你不喜欢听我们节目的话

3458
02:27:09,000 --> 02:27:11,000
也非常欢迎您去听

3459
02:27:11,000 --> 02:27:13,000
流行通信

3460
02:27:13,000 --> 02:27:15,000
然后 IPN 还有一款节目就是

3461
02:27:15,000 --> 02:27:17,000
我也不知道在播什么

3462
02:27:17,000 --> 02:27:19,000
无主题节目无次元

3463
02:27:19,000 --> 02:27:21,000
没有固定时长没有禁忌

3464
02:27:21,000 --> 02:27:23,000
没有主播

3465
02:27:23,000 --> 02:27:25,000
没有主题无次元

3466
02:27:25,000 --> 02:27:27,000
欢迎收听本期内行果

3467
02:27:27,000 --> 02:27:29,000
对了还有一个事情我们忘了说

3468
02:27:33,000 --> 02:27:35,000
非常高兴 2014 年

3469
02:27:35,000 --> 02:27:37,000
你们听到这期节目的时候 2014 年已经结束了

3470
02:27:37,000 --> 02:27:39,000
我们录这期节的时候 2014 年也结束了

3471
02:27:39,000 --> 02:27:41,000
是吗

3472
02:27:41,000 --> 02:27:43,000
对啊 2014 年已经结束了

3473
02:27:43,000 --> 02:27:45,000
不过我们在

3474
02:27:45,000 --> 02:27:47,000
我们节目

3475
02:27:47,000 --> 02:27:49,000
第八期了

3476
02:27:49,000 --> 02:27:51,000
2014 年做了七期

3477
02:27:51,000 --> 02:27:53,000
然后非常高兴上

3478
02:27:53,000 --> 02:27:55,000
融灯苹果的

3479
02:27:55,000 --> 02:27:57,000
Aura of Code 2014 这个活动的

3480
02:27:57,000 --> 02:27:59,000
推荐榜里面

3481
02:27:59,000 --> 02:28:01,000
对没错

3482
02:28:01,000 --> 02:28:03,000
其实 Aura of Code 是干嘛的

3483
02:28:03,000 --> 02:28:05,000
它大概是一个全球性的活动

3484
02:28:05,000 --> 02:28:07,000
大家来学编程吧

3485
02:28:07,000 --> 02:28:09,000
对对对推进

3486
02:28:09,000 --> 02:28:11,000
就把编程

3487
02:28:11,000 --> 02:28:13,000
作为通识教育的一部分

3488
02:28:13,000 --> 02:28:15,000
让更多人来接触它

3489
02:28:15,000 --> 02:28:17,000
而不是说我是小白我什么都不懂

3490
02:28:17,000 --> 02:28:19,000
不要告诉我这些什么东西

3491
02:28:19,000 --> 02:28:21,000
你们连奥巴马都写 JavaScript 了

3492
02:28:21,000 --> 02:28:23,000
对

3493
02:28:23,000 --> 02:28:25,000
所以这个事情还是蛮值得高兴的

3494
02:28:25,000 --> 02:28:27,000
咱们两个可以互相

3495
02:28:27,000 --> 02:28:29,000
共为一番

3496
02:28:29,000 --> 02:28:31,000
unbelievable

3497
02:28:31,000 --> 02:28:33,000
you subject name here

3498
02:28:33,000 --> 02:28:35,000
Pride of subject hometown here

3499
02:28:35,000 --> 02:28:37,000
耶

3500
02:28:37,000 --> 02:28:39,000
不过也有人说

3501
02:28:39,000 --> 02:28:41,000
我们这个字母

3502
02:28:41,000 --> 02:28:43,000
讲那么多是不是对

3503
02:28:43,000 --> 02:28:45,000
初学变成者太难了

3504
02:28:45,000 --> 02:28:47,000
我是这么想的其实我们讲的

3505
02:28:47,000 --> 02:28:49,000
很多概念应该是主要的目的

3506
02:28:49,000 --> 02:28:51,000
还是唤起大家对

3507
02:28:51,000 --> 02:28:53,000
对这个的兴趣

3508
02:28:53,000 --> 02:28:55,000
我们有吗

3509
02:28:55,000 --> 02:28:57,000
我不知道我希望是

3510
02:28:57,000 --> 02:28:59,000
这样子

3511
02:28:59,000 --> 02:29:01,000
我也不知道我觉得还是那句话吧

3512
02:29:01,000 --> 02:29:03,000
这款节目我们想做就做

3513
02:29:03,000 --> 02:29:05,000
想听的人听不想听的就不听

3514
02:29:05,000 --> 02:29:07,000
对

3515
02:29:07,000 --> 02:29:09,000
Anyway

3516
02:29:09,000 --> 02:29:11,000
不过这个还是蛮可喜可贺的事情

3517
02:29:11,000 --> 02:29:13,000
做了些

3518
02:29:13,000 --> 02:29:15,000
有什么

3519
02:29:15,000 --> 02:29:17,000
有所被人认识

3520
02:29:17,000 --> 02:29:19,000
然后能够

3521
02:29:19,000 --> 02:29:21,000
更多人知道然后能拿到这个

3522
02:29:21,000 --> 02:29:23,000
回想 2014 年觉得这件事情还是

3523
02:29:23,000 --> 02:29:25,000
挺值得教的

3524
02:29:25,000 --> 02:29:27,000
对又可以贴个章 our code recommended

3525
02:29:27,000 --> 02:29:29,000
耶

3526
02:29:29,000 --> 02:29:31,000
好吧

3527
02:29:31,000 --> 02:29:33,000
今天就到此为止了

3528
02:29:33,000 --> 02:29:35,000
下期再见

