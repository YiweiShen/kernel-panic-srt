1
00:00:00,000 --> 00:00:04,000
您正在收听的是 IPN Podcast 网络旗下的 IT 技术主题节目内核恐慌

2
00:00:04,000 --> 00:00:07,000
我们号称 hardcore 但是也没有干货

3
00:00:07,000 --> 00:00:08,000
想听的人听不想听的就别听

4
00:00:08,000 --> 00:00:12,000
内核恐慌的网址是 ipn.li slash kernelpanic

5
00:00:12,000 --> 00:00:15,000
我们推荐大家使用 podcast 客户端订阅我们的节目

6
00:00:15,000 --> 00:00:18,000
如果您不知道该用什么客户端

7
00:00:18,000 --> 00:00:20,000
欢迎访问 ipn.li slash faq

8
00:00:20,000 --> 00:00:22,000
欢迎你为我们的节目捐款

9
00:00:22,000 --> 00:00:26,000
捐款地址是 ipn.li slash kernelpanic slash donate

10
00:00:26,000 --> 00:00:28,000
捐款金额随意

11
00:00:28,000 --> 00:00:30,000
只要是能为八整除的正整除就可以

12
00:00:30,000 --> 00:00:32,000
捐款不会为你带来什么

13
00:00:32,000 --> 00:00:34,000
不捐也不会让你失去什么

14
00:00:34,000 --> 00:00:39,000
首先欢迎 Rail 回来

15
00:00:39,000 --> 00:00:43,000
之前病了缺席了一期

16
00:00:43,000 --> 00:00:44,000
积劳成疾嘛

17
00:00:44,000 --> 00:00:48,000
搬家嘛就这样子

18
00:00:49,000 --> 00:00:51,000
是挺折腾搬家穷三年

19
00:00:51,000 --> 00:00:55,000
我们今天节目还是先念一下

20
00:00:55,000 --> 00:00:57,000
就之前我们说到的一些

21
00:00:57,000 --> 00:00:59,000
听众反馈的节选吧

22
00:00:59,000 --> 00:01:04,000
对其实我们两期没做听众反馈了吧

23
00:01:04,000 --> 00:01:06,000
所以可能有一个月没有

24
00:01:06,000 --> 00:01:11,000
反省一下我们之前犯过什么错误

25
00:01:11,000 --> 00:01:16,000
但是最近没有听众指出我们读音的错误了

26
00:01:16,000 --> 00:01:18,000
我觉得这也是一件好事

27
00:01:18,000 --> 00:01:20,000
要么我们读音开始没有错误了

28
00:01:20,000 --> 00:01:22,000
要么就是听众们开始放弃了

29
00:01:22,000 --> 00:01:23,000
OK

30
00:01:23,000 --> 00:01:26,000
先开始读一篇听众反馈

31
00:01:26,000 --> 00:01:27,000
好

32
00:01:27,000 --> 00:01:29,000
有一个叫刘春的朋友

33
00:01:29,000 --> 00:01:30,000
我应该是叫刘春吧

34
00:01:30,000 --> 00:01:32,000
我觉得这么写的话

35
00:01:32,000 --> 00:01:34,000
他这么写的

36
00:01:34,000 --> 00:01:36,000
刚刚听了并发与异步这期

37
00:01:36,000 --> 00:01:38,000
比较赞同吴涛的点子

38
00:01:38,000 --> 00:01:41,000
就是提前公布你们希望讨论的主题

39
00:01:41,000 --> 00:01:42,000
让大家可以参与贡献 idea

40
00:01:42,000 --> 00:01:44,000
你觉得这个怎么样

41
00:01:44,000 --> 00:01:49,000
但是我那期说了之后

42
00:01:49,000 --> 00:01:53,000
就发现好像提前公布我们希望讨论的主题

43
00:01:53,000 --> 00:01:54,000
怎么公布

44
00:01:54,000 --> 00:01:56,000
是我们这一期就要公布下一期的主题吗

45
00:01:56,000 --> 00:01:57,000
好像来

46
00:01:57,000 --> 00:01:59,000
没有提前准备是吧

47
00:01:59,000 --> 00:02:03,000
事实上的状况就是我们这一期都不知道下一期要讲什么

48
00:02:03,000 --> 00:02:05,000
所以这件事情不现实

49
00:02:05,000 --> 00:02:06,000
这样不行啊

50
00:02:06,000 --> 00:02:06,000
说实话

51
00:02:06,000 --> 00:02:10,000
我们应该一下子就把后半年的主题全都介绍好

52
00:02:10,000 --> 00:02:11,000
弄一个列表

53
00:02:11,000 --> 00:02:13,000
然后大家去自己去下面填充好了

54
00:02:13,000 --> 00:02:15,000
对

55
00:02:15,000 --> 00:02:18,000
然后在 Current Panic 网站上面发出来

56
00:02:18,000 --> 00:02:23,000
就是哪一些话题可能可以讲

57
00:02:23,000 --> 00:02:24,000
然后如果讲的话

58
00:02:24,000 --> 00:02:25,000
可以

59
00:02:25,000 --> 00:02:26,000
可以

60
00:02:26,000 --> 00:02:26,000
可以

61
00:02:26,000 --> 00:02:26,000
可以

62
00:02:26,000 --> 00:02:26,000
可以

63
00:02:26,000 --> 00:02:26,000
可以

64
00:02:26,000 --> 00:02:26,000
可以

65
00:02:26,000 --> 00:02:26,000
可以

66
00:02:26,000 --> 00:02:26,000
可以

67
00:02:26,000 --> 00:02:26,000
可以

68
00:02:26,000 --> 00:02:26,000
可以

69
00:02:26,000 --> 00:02:27,000
可以

70
00:02:27,000 --> 00:02:27,000
可以

71
00:02:27,000 --> 00:02:27,000
可以

72
00:02:27,000 --> 00:02:28,000
可以

73
00:02:28,000 --> 00:02:28,000
可以

74
00:02:28,000 --> 00:02:28,000
可以

75
00:02:28,000 --> 00:02:28,000
可以

76
00:02:28,000 --> 00:02:28,000
可以

77
00:02:28,000 --> 00:02:33,000
但是请不要在下面写请谁是谁当嘉宾

78
00:02:33,000 --> 00:02:35,000
就我们应该是请不到

79
00:02:35,000 --> 00:02:36,000
完全没有办法保证

80
00:02:36,000 --> 00:02:37,000
对

81
00:02:37,000 --> 00:02:39,000
继续

82
00:02:39,000 --> 00:02:40,000
好

83
00:02:40,000 --> 00:02:42,000
那我接着念这个刘春

84
00:02:42,000 --> 00:02:44,000
对朋友来的这个反馈

85
00:02:44,000 --> 00:02:47,000
说到数据统计和分析

86
00:02:47,000 --> 00:02:49,000
或者更宽泛的 Data Science

87
00:02:49,000 --> 00:02:53,000
其实学数学的人比纯粹的程序员有太大的优势了

88
00:02:53,000 --> 00:02:55,000
这一点我深有体会

89
00:02:55,000 --> 00:02:57,000
通常一个 Data Science

90
00:02:57,000 --> 00:02:59,000
项目总是会包括

91
00:02:59,000 --> 00:03:01,000
总是会包括数据搜集

92
00:03:01,000 --> 00:03:02,000
进化

93
00:03:02,000 --> 00:03:03,000
转换处理

94
00:03:03,000 --> 00:03:04,000
分析建模

95
00:03:04,000 --> 00:03:05,000
对程序员来说

96
00:03:05,000 --> 00:03:07,000
对数据的操作基本不是事

97
00:03:07,000 --> 00:03:12,000
再加上像现在像 Azure Machine Learning Studio

98
00:03:12,000 --> 00:03:13,000
这样的工具

99
00:03:13,000 --> 00:03:15,000
基本连编程都不用就搞定了

100
00:03:15,000 --> 00:03:18,000
可是建模分析也就是一个极大的挑战了

101
00:03:18,000 --> 00:03:20,000
选择什么样的算法是有效的

102
00:03:20,000 --> 00:03:22,000
什么算法是最优的

103
00:03:22,000 --> 00:03:24,000
针对特定的问题

104
00:03:24,000 --> 00:03:25,000
算法应该如何调整

105
00:03:25,000 --> 00:03:26,000
这些问题

106
00:03:26,000 --> 00:03:27,000
如果没有足够的

107
00:03:27,000 --> 00:03:29,000
数学基础无法回答

108
00:03:29,000 --> 00:03:32,000
而模型的好坏直接决定了你的分析是否有效

109
00:03:32,000 --> 00:03:36,000
可惜你们不打算讨论微软技术了

110
00:03:36,000 --> 00:03:40,000
否则尤其我们可以讨论一下 Azure Machine Learning

111
00:03:40,000 --> 00:03:44,000
比较 R 和 Python 在 Data Science 方面的长短

112
00:03:44,000 --> 00:03:47,000
对就是这个他的来信的全文

113
00:03:47,000 --> 00:03:49,000
对你怎么看

114
00:03:49,000 --> 00:03:53,000
其实我们是

115
00:03:53,000 --> 00:03:57,000
我们嘴上说不打算讨论微软技术了

116
00:03:57,000 --> 00:04:00,000
但本期主要讨论微软技术

117
00:04:00,000 --> 00:04:04,000
嘴上说不要身体却很诚实

118
00:04:04,000 --> 00:04:05,000
是不是

119
00:04:05,000 --> 00:04:06,000
对

120
00:04:06,000 --> 00:04:09,000
我们不是不打算

121
00:04:09,000 --> 00:04:12,000
对我们是不打算讨论微软技术

122
00:04:12,000 --> 00:04:14,000
但是实际上微软技术是绕不开的

123
00:04:14,000 --> 00:04:14,000
在今天

124
00:04:14,000 --> 00:04:19,000
而且我不知道你有没有这种感觉

125
00:04:19,000 --> 00:04:22,000
就是挥别了巴尔默的中世纪的黑暗时代

126
00:04:22,000 --> 00:04:25,000
然后微软可能要开始唯一复兴了

127
00:04:25,000 --> 00:04:27,000
老树逢春

128
00:04:27,000 --> 00:04:28,000
对

129
00:04:28,000 --> 00:04:29,000
好吧

130
00:04:29,000 --> 00:04:33,000
就很可能微软又要开始大方一彩了

131
00:04:33,000 --> 00:04:36,000
但现在说这种话还没识过早

132
00:04:36,000 --> 00:04:37,000
不过有一件事情是肯定的

133
00:04:37,000 --> 00:04:38,000
就是想要绕开微软

134
00:04:38,000 --> 00:04:39,000
其实是很难的一件事情

135
00:04:39,000 --> 00:04:44,000
我觉得咱们俩的背景可能都是决定了

136
00:04:44,000 --> 00:04:45,000
就屁股决定脑袋

137
00:04:45,000 --> 00:04:48,000
就我们两个都是微软阵营之外的人

138
00:04:48,000 --> 00:04:49,000
所以有时候说起来

139
00:04:49,000 --> 00:04:52,000
微软问题总会有那种隔血骚扰的感觉

140
00:04:52,000 --> 00:04:55,000
但是也没什么办法

141
00:04:55,000 --> 00:04:55,000
就

142
00:04:55,000 --> 00:04:57,000
就也

143
00:04:57,000 --> 00:04:57,000
也

144
00:04:57,000 --> 00:04:59,000
就因为主持人就我俩了

145
00:04:59,000 --> 00:04:59,000
对吧

146
00:04:59,000 --> 00:05:00,000
就你也不可能

147
00:05:00,000 --> 00:05:03,000
你也不可能指望我们两个去搞微软的什么事情

148
00:05:03,000 --> 00:05:05,000
因为毕竟不是混这口饭吃了

149
00:05:05,000 --> 00:05:06,000
何必呢

150
00:05:06,000 --> 00:05:09,000
所以当我们讨论微软问题的时候

151
00:05:09,000 --> 00:05:11,000
就大家就当娱乐节目来听一会儿

152
00:05:11,000 --> 00:05:14,000
而且事实上我们这一期是要讨论微软技术

153
00:05:14,000 --> 00:05:18,000
然后 Data Science 这个主题

154
00:05:18,000 --> 00:05:20,000
我们其实计划很久了

155
00:05:20,000 --> 00:05:24,000
但是暂时还没有找到一个合适的嘉宾

156
00:05:24,000 --> 00:05:26,000
我们想把这期做好

157
00:05:26,000 --> 00:05:27,000
所以

158
00:05:27,000 --> 00:05:30,000
就反正要就多跳几期的票吧

159
00:05:30,000 --> 00:05:30,000
对

160
00:05:30,000 --> 00:05:31,000
您确定会讲吗

161
00:05:31,000 --> 00:05:32,000
将来肯定会讲

162
00:05:32,000 --> 00:05:33,000
对

163
00:05:33,000 --> 00:05:38,000
然后我再来念下一条反馈

164
00:05:38,000 --> 00:05:46,000
这是来自一位叫做 Virgil Ming 的同学

165
00:05:46,000 --> 00:05:47,000
Virgil

166
00:05:47,000 --> 00:05:51,000
就是那个诗人的名字

167
00:05:51,000 --> 00:05:54,000
这一期应该是

168
00:05:54,000 --> 00:05:57,000
这个反馈应该是针对我们提到

169
00:05:57,000 --> 00:05:58,000
I Like Rabbits 的那一期

170
00:05:58,000 --> 00:05:59,000
两位主播

171
00:05:59,000 --> 00:06:03,000
虽然 I Like Rabbits 听起来只是另另外一个版本的 freelancer

172
00:06:03,000 --> 00:06:04,000
但是我注意到

173
00:06:04,000 --> 00:06:10,000
这个网站声称他们只解决 small well-defined programming task

174
00:06:10,000 --> 00:06:12,000
正如节目中提到的

175
00:06:12,000 --> 00:06:14,000
把需求明确到的这种程度

176
00:06:14,000 --> 00:06:16,000
其实已经完成了工作中的绝大工作

177
00:06:16,000 --> 00:06:18,000
最终只是需要找到胶水

178
00:06:18,000 --> 00:06:20,000
让需求的模块跑起来而已

179
00:06:20,000 --> 00:06:22,000
而程序员们并不缺胶水

180
00:06:22,000 --> 00:06:25,000
well-defined 本身作为迁移的概念

181
00:06:25,000 --> 00:06:27,000
难以保留原来的模块

182
00:06:27,000 --> 00:06:29,000
而这个模块的设计是没有的严谨

183
00:06:29,000 --> 00:06:31,000
数学上对于运算符和函数

184
00:06:31,000 --> 00:06:36,000
对于是否 well-defined 都有形式上非常精确的判断

185
00:06:36,000 --> 00:06:39,000
而产品经理这个用法

186
00:06:39,000 --> 00:06:40,000
这个说法可能不是很精确

187
00:06:40,000 --> 00:06:42,000
可能客户只需要一个轮子

188
00:06:42,000 --> 00:06:43,000
缠不上产品

189
00:06:43,000 --> 00:06:49,000
所以产品经理这个措辞应该是要加引号了

190
00:06:49,000 --> 00:06:50,000
产品经理对于一个功能的定义

191
00:06:50,000 --> 00:06:52,000
很难做到形式上的精确

192
00:06:52,000 --> 00:06:55,000
如同算法课上我们碰到的代码那样

193
00:06:55,000 --> 00:06:56,000
可以用于证明各种的

194
00:06:56,000 --> 00:06:58,000
可以用于证明正确性

195
00:06:58,000 --> 00:07:02,000
我相信他们的客服要和客户来往好几次邮件

196
00:07:02,000 --> 00:07:05,000
才能明确具体要做什么

197
00:07:05,000 --> 00:07:07,000
但是当然这对客户也是好事

198
00:07:07,000 --> 00:07:10,000
而这让我想到了 Wallframe Alpha

199
00:07:10,000 --> 00:07:12,000
这个服务刚刚出现在媒体报道上的时候

200
00:07:12,000 --> 00:07:14,000
引起了不小的关注

201
00:07:14,000 --> 00:07:16,000
但是从 Google Trend

202
00:07:16,000 --> 00:07:18,000
我们可以看到它两个月之后的热度

203
00:07:18,000 --> 00:07:22,000
就下降到了顶点的 10%

204
00:07:22,000 --> 00:07:25,000
之后它的热度按年呈现周期变化

205
00:07:25,000 --> 00:07:26,000
在春季和秋季之间

206
00:07:26,000 --> 00:07:28,000
从中级各达到一次高峰

207
00:07:28,000 --> 00:07:32,000
我的 Wild Guess 是大部分的热度

208
00:07:32,000 --> 00:07:35,000
来自于需要完成代数作业的学生

209
00:07:35,000 --> 00:07:41,000
他说在本校这个情况相当的普遍

210
00:07:41,000 --> 00:07:45,000
而 Wallframe Alpha 通过程序得到结果

211
00:07:45,000 --> 00:07:46,000
I like Rebits

212
00:07:46,000 --> 00:07:47,000
这通过人工

213
00:07:47,000 --> 00:07:51,000
假定 Rebits 的客户都提出 well-defined 的需求

214
00:07:51,000 --> 00:07:54,000
不需要客户问您是不是要怎么怎么样

215
00:07:54,000 --> 00:07:56,000
那么为什么不能让程序代办

216
00:07:56,000 --> 00:07:58,000
Rebits 后面的工作呢

217
00:07:58,000 --> 00:08:01,000
尽管 NLP 是一个 natural language processing

218
00:08:01,000 --> 00:08:03,000
是一个复杂到极点的工作

219
00:08:03,000 --> 00:08:05,000
但是应当可以假设

220
00:08:05,000 --> 00:08:07,000
比如描述一些问题的语言

221
00:08:07,000 --> 00:08:09,000
只是其中一个很小的字集

222
00:08:09,000 --> 00:08:12,000
它不需要或者只需要很少的清晰

223
00:08:12,000 --> 00:08:15,000
就能够方便的解析为语法术

224
00:08:15,000 --> 00:08:18,000
比如抓取我站点上

225
00:08:18,000 --> 00:08:21,000
所有每日 pageview 超过 100 的页面

226
00:08:21,000 --> 00:08:23,000
可以被解析为

227
00:08:23,000 --> 00:08:25,000
fetchmysite.com

228
00:08:25,000 --> 00:08:26,000
it's a good idea

229
00:08:26,000 --> 00:08:31,000
is page greater than pageview per day 100

230
00:08:31,000 --> 00:08:33,000
它是用 Lisp 的语法写的

231
00:08:33,000 --> 00:08:34,000
反正它是写了一个语法术

232
00:08:34,000 --> 00:08:38,000
然后它说有很多条件

233
00:08:38,000 --> 00:08:40,000
比如说生成 Ruby 的目标代码

234
00:08:40,000 --> 00:08:43,000
可以从 Google Analytics 去提取 pageview

235
00:08:43,000 --> 00:08:46,000
静态页面统一使用 slash 结尾

236
00:08:46,000 --> 00:08:47,000
没有扩展名等等等等

237
00:08:47,000 --> 00:08:49,000
而这些作为语法术的可选部分

238
00:08:49,000 --> 00:08:51,000
肯定要留给默认制

239
00:08:51,000 --> 00:08:54,000
然后给这个语法术里面每一个元素写 Evil

240
00:08:54,000 --> 00:08:56,000
然后把它们拼接着

241
00:08:56,000 --> 00:08:59,000
这一步才是最难的

242
00:08:59,000 --> 00:09:01,000
大概就像那一期 XKCD

243
00:09:01,000 --> 00:09:03,000
我需要一个国家级的实验室

244
00:09:03,000 --> 00:09:04,000
数十个博士

245
00:09:04,000 --> 00:09:06,000
数年的时间

246
00:09:06,000 --> 00:09:08,000
数亿百万计的美元

247
00:09:08,000 --> 00:09:10,000
忙忙多的边界约束

248
00:09:10,000 --> 00:09:11,000
函数逻辑

249
00:09:11,000 --> 00:09:12,000
参数类型

250
00:09:12,000 --> 00:09:16,000
但至少这是一个可以计算的问题

251
00:09:16,000 --> 00:09:17,000
而且很可能

252
00:09:17,000 --> 00:09:19,000
AI 发展到这种程度的时候

253
00:09:19,000 --> 00:09:22,000
这级的逻辑大部分也是由程序生成的

254
00:09:22,000 --> 00:09:23,000
可以自行净化

255
00:09:23,000 --> 00:09:26,000
人工只是执行一定的 supervation

256
00:09:26,000 --> 00:09:26,000
而这些人工只是执行一定的 supervation

257
00:09:26,000 --> 00:09:33,000
我一直是个人工智能领域的票友

258
00:09:33,000 --> 00:09:34,000
我喜欢这种畅想

259
00:09:34,000 --> 00:09:35,000
它让我感到放松

260
00:09:35,000 --> 00:09:37,000
谢谢两位带来的节目

261
00:09:37,000 --> 00:09:41,000
我刚才念的可能有点乱吧

262
00:09:41,000 --> 00:09:43,000
这位听众的主要意思就是

263
00:09:43,000 --> 00:09:44,000
他觉得 I like rabbits

264
00:09:44,000 --> 00:09:50,000
其实是一个可以通过人工智能完成的网站

265
00:09:50,000 --> 00:09:55,000
本质上我觉得他的说法固然没错

266
00:09:55,000 --> 00:09:56,000
但是在今天

267
00:09:56,000 --> 00:09:56,000
我感觉他说的说法

268
00:09:56,000 --> 00:09:58,000
显然是做不到的

269
00:09:58,000 --> 00:10:01,000
还是有点语言

270
00:10:01,000 --> 00:10:03,000
但是起码觉得他只知道

271
00:10:03,000 --> 00:10:05,000
就只说了上次我们聊的

272
00:10:05,000 --> 00:10:06,000
他的一个这个东西

273
00:10:06,000 --> 00:10:08,000
I like rabbits 的一个短版

274
00:10:08,000 --> 00:10:12,000
就是你要让客户提出一个 well defined 的 test

275
00:10:12,000 --> 00:10:14,000
其实是相当困难的

276
00:10:14,000 --> 00:10:16,000
所以他那个 well defined

277
00:10:16,000 --> 00:10:18,000
其实也是只是针对人而言

278
00:10:18,000 --> 00:10:22,000
他还没有说到一个机器能够认为

279
00:10:22,000 --> 00:10:22,000
它是一个 well defined

280
00:10:22,000 --> 00:10:25,000
它能够直接给出答案的这么一个方案

281
00:10:25,000 --> 00:10:26,000
所以这里面

282
00:10:26,000 --> 00:10:28,000
就在真正的人工智能实现之前

283
00:10:28,000 --> 00:10:29,000
我觉得这样的需求

284
00:10:29,000 --> 00:10:31,000
可能还是有的

285
00:10:31,000 --> 00:10:34,000
看可能是一个逐步缩小的过程

286
00:10:34,000 --> 00:10:36,000
对

287
00:10:36,000 --> 00:10:37,000
就好像

288
00:10:37,000 --> 00:10:42,000
我们觉得这个东西实现起来

289
00:10:42,000 --> 00:10:45,000
似乎没有什么太大的困难

290
00:10:45,000 --> 00:10:48,000
至少在如果它实现好的话

291
00:10:48,000 --> 00:10:49,000
在它的交互界面上

292
00:10:49,000 --> 00:10:52,000
应该不会比 Cortana

293
00:10:52,000 --> 00:10:56,000
或者是那个复联里面的 Jarvis

294
00:10:56,000 --> 00:10:57,000
更难

295
00:10:57,000 --> 00:11:00,000
至少在从操作者的角度来看

296
00:11:00,000 --> 00:11:01,000
应该不是这样

297
00:11:01,000 --> 00:11:02,000
但是实现起来

298
00:11:02,000 --> 00:11:05,000
我觉得目前的水准应该是做不到

299
00:11:05,000 --> 00:11:07,000
然后但我觉得这正是

300
00:11:07,000 --> 00:11:11,000
I like rabbits 的那个可取之处

301
00:11:11,000 --> 00:11:12,000
它就是它用一个

302
00:11:12,000 --> 00:11:15,000
就什么人力朋克的方式

303
00:11:15,000 --> 00:11:17,000
来帮你实现这种

304
00:11:17,000 --> 00:11:20,000
理论上应该由 AI 完成的工作

305
00:11:20,000 --> 00:11:21,000
对吧

306
00:11:21,000 --> 00:11:24,000
所以它不是 AI

307
00:11:24,000 --> 00:11:26,000
它是 Ti

308
00:11:26,000 --> 00:11:26,000
Tribe

309
00:11:26,000 --> 00:11:28,000
True Intelligence

310
00:11:28,000 --> 00:11:30,000
对

311
00:11:30,000 --> 00:11:31,000
好吧

312
00:11:31,000 --> 00:11:34,000
那我来念今天最后一则听众反馈

313
00:11:34,000 --> 00:11:35,000
也不是最后一则

314
00:11:35,000 --> 00:11:36,000
就我们选出来的最后一则

315
00:11:36,000 --> 00:11:37,000
这是一位叫 Bill 的朋友

316
00:11:37,000 --> 00:11:40,000
他是给我们说 14 期的反馈

317
00:11:40,000 --> 00:11:44,000
第一次给内核恐慌写反馈

318
00:11:44,000 --> 00:11:46,000
一直挺喜欢你们的节目

319
00:11:46,000 --> 00:11:48,000
其实最初是从知乎上

320
00:11:48,000 --> 00:11:50,000
没明其妙的知道了这么一档节目

321
00:11:50,000 --> 00:11:52,000
也是从此才知道播客这个东西

322
00:11:52,000 --> 00:11:53,000
以及 IPN

323
00:11:53,000 --> 00:11:55,000
但听了几期后觉得还挺有意思的

324
00:11:55,000 --> 00:11:56,000
抱着听视频

325
00:11:56,000 --> 00:11:57,000
识货的心态

326
00:11:57,000 --> 00:12:00,000
偶尔还能听到些干货

327
00:12:00,000 --> 00:12:02,000
其实很多货都听不懂

328
00:12:02,000 --> 00:12:03,000
这个还蛮好笑的

329
00:12:03,000 --> 00:12:08,000
到底是我们节目到底是识货还是干货

330
00:12:08,000 --> 00:12:10,000
我觉得 podcast 不可能是干货吧

331
00:12:10,000 --> 00:12:13,000
这一棒子打死了所有 podcast

332
00:12:13,000 --> 00:12:14,000
但我觉得就是这样的

333
00:12:14,000 --> 00:12:15,000
反正我感觉吧

334
00:12:15,000 --> 00:12:17,000
我们节目讲干货的

335
00:12:17,000 --> 00:12:19,000
打引号干货的时候

336
00:12:19,000 --> 00:12:20,000
还是其实挺无聊的

337
00:12:20,000 --> 00:12:24,000
吹牛扯蛋的时候还蛮有意思的

338
00:12:24,000 --> 00:12:25,000
所以我还是吹牛扯蛋吧

339
00:12:25,000 --> 00:12:25,000
对啊

340
00:12:25,000 --> 00:12:26,000
我还是吹牛扯蛋吧

341
00:12:26,000 --> 00:12:26,000
对啊

342
00:12:26,000 --> 00:12:26,000
我还是吹牛扯蛋吧

343
00:12:26,000 --> 00:12:26,000
对啊

344
00:12:26,000 --> 00:12:26,000
我还是吹牛扯蛋吧

345
00:12:26,000 --> 00:12:26,000
对啊

346
00:12:26,000 --> 00:12:28,000
如果从一个市场导向的

347
00:12:28,000 --> 00:12:31,000
市场导向的角度来看的话

348
00:12:31,000 --> 00:12:37,000
B 节目简直是吹水的那些期反馈都是最好的

349
00:12:37,000 --> 00:12:38,000
不是吗

350
00:12:38,000 --> 00:12:41,000
好

351
00:12:41,000 --> 00:12:42,000
我们明确的这个方向

352
00:12:42,000 --> 00:12:43,000
那我接着念

353
00:12:43,000 --> 00:12:46,000
十四期开头的时候

354
00:12:46,000 --> 00:12:50,000
吴涛说到摩托车不代表社会地位的时候

355
00:12:50,000 --> 00:12:50,000
Rio 说

356
00:12:50,000 --> 00:12:54,000
城乡结合部的青年晚上轰鸣摩托车的时候

357
00:12:54,000 --> 00:12:55,000
肯定不是这么想的

358
00:12:55,000 --> 00:12:56,000
我瞬间感觉

359
00:12:56,000 --> 00:12:57,000
被击中了

360
00:12:57,000 --> 00:12:58,000
因为我就在

361
00:12:58,000 --> 00:12:59,000
这个 Bill

362
00:12:59,000 --> 00:13:01,000
他说因为我就在这样一个地方

363
00:13:01,000 --> 00:13:02,000
听你们的播客

364
00:13:02,000 --> 00:13:05,000
每当有这样的青年呼啸而过的时候

365
00:13:05,000 --> 00:13:07,000
轰隆声压盖一切

366
00:13:07,000 --> 00:13:09,000
只能心里咒骂一声

367
00:13:09,000 --> 00:13:11,000
其实我现在不只城乡结合部这样

368
00:13:11,000 --> 00:13:13,000
其实很多大城市

369
00:13:13,000 --> 00:13:16,000
你到了晚上交警下班的时候

370
00:13:16,000 --> 00:13:17,000
也有这种

371
00:13:17,000 --> 00:13:18,000
他不一定轰摩了车

372
00:13:18,000 --> 00:13:20,000
可能轰的是可能什么几百万的跑车

373
00:13:20,000 --> 00:13:22,000
但是效果是一样的

374
00:13:22,000 --> 00:13:25,000
对

375
00:13:25,000 --> 00:13:26,000
轰隆门是一种

376
00:13:26,000 --> 00:13:27,000
很没品的表现

377
00:13:27,000 --> 00:13:29,000
轰隆门我没有意见

378
00:13:29,000 --> 00:13:30,000
我有意见的是

379
00:13:30,000 --> 00:13:31,000
他把那个消声器拆了

380
00:13:31,000 --> 00:13:32,000
叫轰隆门

381
00:13:32,000 --> 00:13:33,000
OK

382
00:13:33,000 --> 00:13:35,000
这个是 02

383
00:13:35,000 --> 00:13:38,000
那我接着念这个反馈

384
00:13:38,000 --> 00:13:41,000
一小时零九分的时候

385
00:13:41,000 --> 00:13:42,000
吴涛谈到

386
00:13:42,000 --> 00:13:44,000
通过像 Arduino 这样的东西

387
00:13:44,000 --> 00:13:46,000
控制 LED 的

388
00:13:46,000 --> 00:13:47,000
是一个学习编程

389
00:13:47,000 --> 00:13:49,000
有成就感的方式

390
00:13:49,000 --> 00:13:50,000
其实如此

391
00:13:50,000 --> 00:13:53,000
作为一个电子类专业的学生

392
00:13:53,000 --> 00:13:55,000
我的 C 编程就是这样入门的

393
00:13:55,000 --> 00:13:56,000
恭喜

394
00:13:56,000 --> 00:14:00,000
关于操作系统存储自元年以来

395
00:14:00,000 --> 00:14:01,000
经历多少秒数

396
00:14:01,000 --> 00:14:03,000
这件事情我还是不太理解

397
00:14:03,000 --> 00:14:04,000
这是一个好的方式吗

398
00:14:04,000 --> 00:14:06,000
还是历史原因比较多

399
00:14:06,000 --> 00:14:08,000
节目中也提到了润秒的问题

400
00:14:08,000 --> 00:14:12,000
2015 年我们将迎来史上第 26 次润秒

401
00:14:12,000 --> 00:14:13,000
一些新闻也显示

402
00:14:13,000 --> 00:14:15,000
此前的润秒调整

403
00:14:15,000 --> 00:14:16,000
对软件造成了一定影响

404
00:14:16,000 --> 00:14:19,000
Linux 就是那个 Linux 的发明人

405
00:14:19,000 --> 00:14:21,000
好像也表示过这样的调整

406
00:14:21,000 --> 00:14:23,000
对操作系统而言比较麻烦

407
00:14:23,000 --> 00:14:24,000
不知道下次节目中

408
00:14:24,000 --> 00:14:26,000
有没有兴趣补充讨论的问题

409
00:14:26,000 --> 00:14:28,000
我们可以补充一下

410
00:14:28,000 --> 00:14:30,000
我们这里可以补一下

411
00:14:30,000 --> 00:14:32,000
为什么要采用这种所谓

412
00:14:32,000 --> 00:14:34,000
从某一个 epoch

413
00:14:34,000 --> 00:14:36,000
就是某某元年开始

414
00:14:36,000 --> 00:14:38,000
经历多少秒数

415
00:14:38,000 --> 00:14:40,000
这种方式来表示时间

416
00:14:40,000 --> 00:14:42,000
这种我们一般叫做什么

417
00:14:42,000 --> 00:14:44,000
Linux time

418
00:14:44,000 --> 00:14:46,000
Linux 系统时间

419
00:14:46,000 --> 00:14:48,000
从 1970 年 1 月 1 日

420
00:14:48,000 --> 00:14:50,000
零时零分零秒开始

421
00:14:50,000 --> 00:14:52,000
然后数

422
00:14:52,000 --> 00:14:54,000
为什么要这种方式呢

423
00:14:54,000 --> 00:14:55,000
简单呀

424
00:14:55,000 --> 00:14:56,000
你只需要

425
00:14:56,000 --> 00:15:00,000
一个外部定义的一个起点之后

426
00:15:00,000 --> 00:15:02,000
你是可以就就存数学

427
00:15:02,000 --> 00:15:03,000
一个非常简单的预算

428
00:15:03,000 --> 00:15:05,000
你不需要考虑任何

429
00:15:05,000 --> 00:15:07,000
就对于这个软件控制的这个

430
00:15:07,000 --> 00:15:08,000
计时来讲

431
00:15:08,000 --> 00:15:10,000
它是不需要考虑很多什么润秒

432
00:15:10,000 --> 00:15:11,000
时间轴

433
00:15:11,000 --> 00:15:14,000
那个就是日历上的那些时间的规范

434
00:15:14,000 --> 00:15:15,000
日历的不规则那些问题

435
00:15:15,000 --> 00:15:16,000
对吧

436
00:15:16,000 --> 00:15:18,000
所以都是很简单很规范的方式

437
00:15:18,000 --> 00:15:19,000
就是记录这个

438
00:15:19,000 --> 00:15:20,000
这个叫什么

439
00:15:20,000 --> 00:15:23,000
电子脉冲的这么一个次数而已

440
00:15:23,000 --> 00:15:24,000
对

441
00:15:24,000 --> 00:15:26,000
就如果你从这个

442
00:15:26,000 --> 00:15:27,000
这个角度来讲

443
00:15:27,000 --> 00:15:30,000
反而是人类计量时间的方式

444
00:15:30,000 --> 00:15:32,000
其实非常太蠢了

445
00:15:32,000 --> 00:15:35,000
简直复杂和不可理喻的

446
00:15:35,000 --> 00:15:39,000
就是所有的周期都不能互相同步

447
00:15:39,000 --> 00:15:40,000
没有一个

448
00:15:40,000 --> 00:15:42,000
没有一个叫什么

449
00:15:42,000 --> 00:15:44,000
最小公倍数

450
00:15:44,000 --> 00:15:46,000
还有最大公约数的这么一个

451
00:15:46,000 --> 00:15:48,000
概念在里面

452
00:15:48,000 --> 00:15:53,000
就是尤其是每次我看到这个周和月份

453
00:15:53,000 --> 00:15:55,000
不能 synchronize

454
00:15:55,000 --> 00:15:58,000
的时候都会觉得实在是蠢透

455
00:15:58,000 --> 00:16:00,000
就因为本质上我们那种人类的

456
00:16:00,000 --> 00:16:02,000
就所谓的叫什么

457
00:16:02,000 --> 00:16:03,000
格力高理力

458
00:16:03,000 --> 00:16:05,000
还是什么力

459
00:16:05,000 --> 00:16:07,000
就我们现在用的那个功力

460
00:16:07,000 --> 00:16:08,000
如略力

461
00:16:08,000 --> 00:16:09,000
如略力

462
00:16:09,000 --> 00:16:11,000
好如略力和格力高理力

463
00:16:11,000 --> 00:16:12,000
应该是同样一个东西

464
00:16:12,000 --> 00:16:14,000
对一个是就是

465
00:16:14,000 --> 00:16:16,000
我就是叫 Grigori 吧

466
00:16:16,000 --> 00:16:18,000
Grigori 就是如略力吧

467
00:16:18,000 --> 00:16:21,000
对就是只是翻译的写法不一样

468
00:16:21,000 --> 00:16:22,000
我觉得应该是这样子 whatever

469
00:16:22,000 --> 00:16:23,000
就是我们讲的功力

470
00:16:23,000 --> 00:16:24,000
我们现在常用的日历

471
00:16:24,000 --> 00:16:27,000
它本身上在做一些不可能完成的事情

472
00:16:27,000 --> 00:16:29,000
就是它要用

473
00:16:29,000 --> 00:16:32,000
它要同步太阳力法和就是太阳力法

474
00:16:32,000 --> 00:16:34,000
是这个是按这个每年嘛

475
00:16:34,000 --> 00:16:38,000
然后它要同步这个月球的月球的这个

476
00:16:38,000 --> 00:16:41,000
这个转就是每个月的这个月相那些

477
00:16:41,000 --> 00:16:43,000
它还在同每天这个地球的自转

478
00:16:43,000 --> 00:16:45,000
就是那个每天的这种一个情况

479
00:16:45,000 --> 00:16:47,000
然后这些都是互相有影响的

480
00:16:47,000 --> 00:16:50,000
不可能说是一个永恒不变完美的东西

481
00:16:50,000 --> 00:16:51,000
对吧

482
00:16:51,000 --> 00:16:52,000
等等

483
00:16:52,000 --> 00:16:54,000
功力是什么

484
00:16:54,000 --> 00:16:56,000
是阴阳混合力吗

485
00:16:56,000 --> 00:16:57,000
不是吧

486
00:16:57,000 --> 00:16:59,000
不它不是好像不会是考虑月相

487
00:16:59,000 --> 00:17:02,000
但是你怎么说它分那个 12 个月

488
00:17:02,000 --> 00:17:05,000
它最开始初衷不就是为了做这件事情吗

489
00:17:05,000 --> 00:17:08,000
就每个月每个月的概念不是这么来的吗

490
00:17:12,000 --> 00:17:14,000
但是它后来等等

491
00:17:14,000 --> 00:17:16,000
我这部分并不重要

492
00:17:16,000 --> 00:17:23,000
但是我的印象里面应该是巴比伦人开始了阅历

493
00:17:23,000 --> 00:17:24,000
开始了

494
00:17:24,000 --> 00:17:26,000
就是现在用的功力的雏形

495
00:17:26,000 --> 00:17:30,000
但是他们后来他们一开始也是纯阴历

496
00:17:30,000 --> 00:17:34,000
就世界上大部分包括什么那个回教的历法

497
00:17:34,000 --> 00:17:36,000
也都是包括我们国家的历法

498
00:17:36,000 --> 00:17:38,000
其实大部分都是纯阴历

499
00:17:38,000 --> 00:17:42,000
但是中国人很聪明的就是加了节气这个东西

500
00:17:42,000 --> 00:17:45,000
然后用节气来规定农食

501
00:17:45,000 --> 00:17:47,000
然后日常作息跟着月亮走

502
00:17:47,000 --> 00:17:51,000
而不像功力这样比较愚蠢的

503
00:17:51,000 --> 00:17:53,000
功力实际上是试图用它来做的东西

504
00:17:53,000 --> 00:17:59,000
就是用太阳力为主

505
00:17:59,000 --> 00:18:03,000
然后月这个每个月的设置只是一种

506
00:18:03,000 --> 00:18:05,000
为了延续历史而已

507
00:18:05,000 --> 00:18:07,000
它跟人为的东西没有任何关系

508
00:18:07,000 --> 00:18:09,000
对 OK 那没错

509
00:18:09,000 --> 00:18:10,000
没错

510
00:18:10,000 --> 00:18:11,000
OK

511
00:18:11,000 --> 00:18:14,000
但我们最主要的一个问题就是说

512
00:18:14,000 --> 00:18:15,000
这个地球自转

513
00:18:15,000 --> 00:18:19,000
它那个时间定义为一天转一圈转定义为一天嘛

514
00:18:19,000 --> 00:18:21,000
它并不是一个稳定的值

515
00:18:21,000 --> 00:18:22,000
这个是最要命的问题

516
00:18:22,000 --> 00:18:28,000
然后如果我们这样定义一天是机球自转一周的话

517
00:18:28,000 --> 00:18:30,000
我们在这种算出来是一年 365 天

518
00:18:30,000 --> 00:18:32,000
是肯定是不能严格满足的

519
00:18:32,000 --> 00:18:35,000
因为它总是会有点偏差嘛

520
00:18:35,000 --> 00:18:41,000
然后就会造成之后的各种各样奇奇怪怪的什么润年润秒这样的奇奇怪怪的问题

521
00:18:41,000 --> 00:18:43,000
所以其实从这个角度来讲

522
00:18:43,000 --> 00:18:46,000
我们所计算机里面存储从某一个第三方

523
00:18:46,000 --> 00:18:48,000
是外部定义的原点开始的

524
00:18:48,000 --> 00:18:50,000
然后经历就一个纯数值的方法经历过当中的问题

525
00:18:50,000 --> 00:18:52,000
我们认为这个纯数值的方法

526
00:18:52,000 --> 00:18:55,000
经历过当中描述的方法是相当简单的

527
00:18:55,000 --> 00:18:56,000
没错

528
00:18:56,000 --> 00:18:58,000
嗯好这个就说多了

529
00:18:58,000 --> 00:19:01,000
接着那个反馈还有一段没有我们没念完

530
00:19:01,000 --> 00:19:03,000
嗯

531
00:19:03,000 --> 00:19:07,000
单片机系统中记录时间一般会使用一个实时时钟

532
00:19:07,000 --> 00:19:09,000
就是 real time clock 的芯片

533
00:19:09,000 --> 00:19:18,000
使用 32768 赫兹的金正座时钟元啊对

534
00:19:18,000 --> 00:19:20,000
很多单片机也集成这样的电路

535
00:19:20,000 --> 00:19:26,000
如果这样的就是实时时钟芯片配有 4 G 位的话

536
00:19:26,000 --> 00:19:28,000
溢出问题就不大

537
00:19:28,000 --> 00:19:31,000
也就是说有的 RTC 这个芯片是没有的

538
00:19:31,000 --> 00:19:32,000
嗯

539
00:19:32,000 --> 00:19:38,000
好像我印象中单片机的这个那个时钟是比较通常是 16 位吧

540
00:19:40,000 --> 00:19:42,000
32768 赫兹

541
00:19:42,000 --> 00:19:44,000
看起来就是个 16 位的东西吗

542
00:19:44,000 --> 00:19:47,000
不就是他的那个记录的差时长只有 16 位

543
00:19:47,000 --> 00:19:50,000
那么这必然就少不了的就是有一个所谓的 wraparound 的问题

544
00:19:50,000 --> 00:19:52,000
就是你 16 位很容易溢出嘛

545
00:19:52,000 --> 00:19:53,000
你溢出的时候怎么办呢

546
00:19:53,000 --> 00:19:55,000
对就通常呢一般的做法就说

547
00:19:55,000 --> 00:19:57,000
反溢出之后我就从头开始嘛

548
00:19:57,000 --> 00:19:58,000
对对我这个系统来讲

549
00:19:58,000 --> 00:20:03,000
如果我这个软件设计是呃就是鲁棒性够好的话

550
00:20:03,000 --> 00:20:07,000
你就实时这个实时时钟这个 wraparound 就是溢出

551
00:20:07,000 --> 00:20:09,000
从重置归零重新开始记的时候

552
00:20:09,000 --> 00:20:12,000
对你系统来讲应该是不受影响的

553
00:20:12,000 --> 00:20:14,000
就是你总是说我经过这么一个固定秒数

554
00:20:14,000 --> 00:20:16,000
咔哒咔哒咔哒这样不断往前走

555
00:20:16,000 --> 00:20:17,000
嗯

556
00:20:17,000 --> 00:20:19,000
当然了这都是美好的愿景

557
00:20:19,000 --> 00:20:21,000
实际情况远远通常不是这样的

558
00:20:21,000 --> 00:20:24,000
刚好最近是上周吧还是前周就发生了这么一个事儿

559
00:20:24,000 --> 00:20:28,000
是那个呃是美国的那个叫什么

560
00:20:28,000 --> 00:20:33,000
就是反正航空航就是那个民航的那种就检查到是波音七八七

561
00:20:33,000 --> 00:20:35,000
那个什么 dreamliner 嘛

562
00:20:35,000 --> 00:20:39,000
它上面有个有不是有那种非常有时候航电系统吗

563
00:20:39,000 --> 00:20:40,000
几套是独立配置的

564
00:20:40,000 --> 00:20:45,000
但是他们发现有一个很窘的情况就是他们也会有那个 wraparound 的问题

565
00:20:45,000 --> 00:20:46,000
然后 wraparound 大概就是说

566
00:20:46,000 --> 00:20:52,000
每这个飞机每连续服役就不关机连续服役超过多少一百多天吗

567
00:20:52,000 --> 00:20:53,000
还是几百天就不到一年

568
00:20:53,000 --> 00:20:58,000
反正这么一个时间内就会出现所有系统都挂掉

569
00:20:58,000 --> 00:21:02,000
就是因为这个时钟 wrapover 的那个问题没有处理好

570
00:21:02,000 --> 00:21:05,000
就是那个软件觉得这个就是要定时重启飞机是吧

571
00:21:05,000 --> 00:21:06,000
对没错

572
00:21:06,000 --> 00:21:10,000
所以他们飞机是不能连续开机就是不能连续也不是连续飞行

573
00:21:10,000 --> 00:21:11,000
就是不断电嘛

574
00:21:11,000 --> 00:21:15,000
不能就是不间断运行不能超过好像一百多天还是多少天

575
00:21:15,000 --> 00:21:16,000
对吧

576
00:21:16,000 --> 00:21:17,000
反正是不到一年的时间

577
00:21:17,000 --> 00:21:21,000
但你像对于一些种所谓现在这种那种大型的航空公司来说

578
00:21:21,000 --> 00:21:24,000
它是什么人停机不停嘛

579
00:21:24,000 --> 00:21:27,000
就是几几个航班几个机组轮流换

580
00:21:27,000 --> 00:21:29,000
这个但是飞机是一直在飞一直在运行的

581
00:21:29,000 --> 00:21:32,000
这样才因为飞机是一个什么资本性的支出嘛

582
00:21:32,000 --> 00:21:35,000
就是没有就是能够尽量利用起来就尽量利用起来

583
00:21:35,000 --> 00:21:37,000
但是发现有这么一个很窘的问题

584
00:21:37,000 --> 00:21:40,000
结果就是什么被发现了这个漏洞也不叫漏洞

585
00:21:40,000 --> 00:21:43,000
就 bug 然后择另一回就修改了

586
00:21:43,000 --> 00:21:45,000
因为你想飞机飞到半空中

587
00:21:45,000 --> 00:21:48,000
然后突然所有航电系统都没有反应了

588
00:21:48,000 --> 00:21:51,000
你就没有办法因为现在这个飞机是什么

589
00:21:51,000 --> 00:21:53,000
那个控制线控

590
00:21:53,000 --> 00:21:58,000
然后所有的那个线控没有这个新电脑新电脑不工作了

591
00:21:58,000 --> 00:22:02,000
那个没有什么控制这个机翼的转向啊

592
00:22:02,000 --> 00:22:03,000
完全都没有了

593
00:22:03,000 --> 00:22:05,000
你这个风机就飞机就可以直接掉下去的

594
00:22:05,000 --> 00:22:06,000
很危险很危险

595
00:22:06,000 --> 00:22:08,000
所以怎么讲

596
00:22:08,000 --> 00:22:14,000
以前我们用 XP 的什么定时重启还是有一定的好处的

597
00:22:14,000 --> 00:22:18,000
让我想起来就是有一次我从

598
00:22:18,000 --> 00:22:20,000
我应该是要飞英国

599
00:22:20,000 --> 00:22:23,000
然后一开始从法兰克福飞阿姆斯特丹

600
00:22:23,000 --> 00:22:32,000
然后在法兰克福的飞机跑道上已经到那个跑道的起点了

601
00:22:32,000 --> 00:22:35,000
然后停了大概 30 分钟

602
00:22:35,000 --> 00:22:39,000
然后机长说我们的飞机上的电脑有点问题

603
00:22:39,000 --> 00:22:41,000
阿姆斯特丹是和好

604
00:22:41,000 --> 00:22:43,000
和好老是出这种幺蛾子

605
00:22:43,000 --> 00:22:44,000
然后和好呢

606
00:22:44,000 --> 00:22:48,000
说和好我们在和好总部的系统工程师

607
00:22:48,000 --> 00:22:50,000
有一台一模一样的电脑

608
00:22:50,000 --> 00:22:53,000
但是他没有办法复原就是重现我们的这个 bug

609
00:22:53,000 --> 00:22:56,000
所以他建议我们重新启动一下飞机

610
00:22:56,000 --> 00:23:01,000
然后我们现在需要划回到那个 Gate 那边

611
00:23:01,000 --> 00:23:02,000
然后重新启动

612
00:23:02,000 --> 00:23:05,000
然后就划回去重启

613
00:23:05,000 --> 00:23:07,000
然后你就坐在飞机上等着飞机重启

614
00:23:07,000 --> 00:23:10,000
那种感觉非常的 surreal

615
00:23:10,000 --> 00:23:11,000
重启的时候

616
00:23:11,000 --> 00:23:13,000
会有那个

617
00:23:13,000 --> 00:23:17,000
重启的时候听见一个当当当当当的声音

618
00:23:17,000 --> 00:23:22,000
然后系统这个时候就惊呆了是不是

619
00:23:22,000 --> 00:23:24,000
整个人都不好了

620
00:23:24,000 --> 00:23:26,000
没错

621
00:23:26,000 --> 00:23:27,000
对

622
00:23:27,000 --> 00:23:28,000
好吧

623
00:23:28,000 --> 00:23:30,000
今天的这个听众反馈就念到这里

624
00:23:30,000 --> 00:23:31,000
我们先

625
00:23:31,000 --> 00:23:35,000
刚才那个 787 的事情不是听众反馈的

626
00:23:35,000 --> 00:23:37,000
那个是我们自己讲的

627
00:23:37,000 --> 00:23:38,000
对

628
00:23:38,000 --> 00:23:39,000
好

629
00:23:39,000 --> 00:23:40,000
对

630
00:23:40,000 --> 00:23:41,000
感谢各位听众反馈

631
00:23:41,000 --> 00:23:42,000
欢迎你们写信给我们

632
00:23:42,000 --> 00:23:43,000
谢谢大家

633
00:23:43,000 --> 00:23:47,000
осв miej

634
00:23:47,000 --> 00:23:48,000
谢谢

635
00:23:53,000 --> 00:23:54,000
好了

636
00:23:54,000 --> 00:23:58,000
今天我们有几个哦

637
00:23:58,000 --> 00:23:59,000
我们是正常使践的

638
00:23:59,000 --> 00:24:00,000
思想

639
00:24:00,000 --> 00:24:01,000
MU Guitar

640
00:24:01,000 --> 00:24:03,000
你看

641
00:24:03,000 --> 00:24:04,000
altung

642
00:24:04,000 --> 00:24:06,000
啥

643
00:24:06,000 --> 00:24:08,000
猛

644
00:24:08,000 --> 00:24:09,000
一种

645
00:24:09,000 --> 00:24:10,000
我就觉得

646
00:24:10,000 --> 00:24:11,000
看着

647
00:24:11,000 --> 00:24:12,000
这个

648
00:24:12,000 --> 00:24:15,000
Lawrence 可以插一个

649
00:24:15,000 --> 00:24:19,000
北京时间七点整

650
00:24:19,000 --> 00:24:21,000
也不叫这周

651
00:24:21,000 --> 00:24:22,000
就这段时间

652
00:24:22,000 --> 00:24:24,000
发生了一些

653
00:24:24,000 --> 00:24:26,000
不大不小的科技相关

654
00:24:26,000 --> 00:24:27,000
我们觉得还挺有意思的新闻

655
00:24:27,000 --> 00:24:30,000
我们跟大家聊一聊

656
00:24:30,000 --> 00:24:31,000
第一个是

657
00:24:31,000 --> 00:24:34,000
Ubuntu 那间公司

658
00:24:34,000 --> 00:24:35,000
叫什么 Canonical 对吧

659
00:24:35,000 --> 00:24:36,000
对

660
00:24:36,000 --> 00:24:37,000
他们之前搞了一个

661
00:24:37,000 --> 00:24:39,000
叫做 Ubuntu Core

662
00:24:39,000 --> 00:24:40,000
这么一个精简的系统

663
00:24:40,000 --> 00:24:41,000
然后里面用了一个

664
00:24:41,000 --> 00:24:42,000
比较先进的

665
00:24:42,000 --> 00:24:42,000
不是比较先进

666
00:24:42,000 --> 00:24:44,000
比较现代的

667
00:24:44,000 --> 00:24:45,000
就包管理器

668
00:24:45,000 --> 00:24:46,000
叫做 Snappy

669
00:24:46,000 --> 00:24:47,000
然后简单来讲

670
00:24:47,000 --> 00:24:48,000
它就是一个

671
00:24:48,000 --> 00:24:49,000
把我们之前讲的

672
00:24:49,000 --> 00:24:50,000
那个 Docker

673
00:24:50,000 --> 00:24:50,000
这个种子

674
00:24:50,000 --> 00:24:51,000
container 的技术

675
00:24:51,000 --> 00:24:54,000
用到操作系统本身的

676
00:24:54,000 --> 00:24:55,000
这个升级和管理上

677
00:24:55,000 --> 00:24:56,000
而不是简单的

678
00:24:56,000 --> 00:24:57,000
用于这个操作系统

679
00:24:57,000 --> 00:24:58,000
上面的应用软件

680
00:24:58,000 --> 00:25:00,000
什么意思呢

681
00:25:00,000 --> 00:25:01,000
就是我们通常

682
00:25:01,000 --> 00:25:02,000
我们如果你做

683
00:25:02,000 --> 00:25:03,000
用过任何一款

684
00:25:03,000 --> 00:25:05,000
Linux 的操作系统

685
00:25:05,000 --> 00:25:06,000
就你大概会知道

686
00:25:06,000 --> 00:25:07,000
它会定期的

687
00:25:07,000 --> 00:25:07,000
不然叫你说

688
00:25:07,000 --> 00:25:09,000
我有多少个包要升级

689
00:25:09,000 --> 00:25:11,000
但是如果你

690
00:25:11,000 --> 00:25:13,000
运气足够不好

691
00:25:13,000 --> 00:25:15,000
有可能在升级过程中

692
00:25:15,000 --> 00:25:16,000
你电脑就重启死机

693
00:25:16,000 --> 00:25:16,000
或者断电了

694
00:25:16,000 --> 00:25:17,000
然后这个时候

695
00:25:17,000 --> 00:25:18,000
你会进到系统发现

696
00:25:18,000 --> 00:25:20,000
哎 惨了

697
00:25:20,000 --> 00:25:21,000
系统已经叫做 Corrupt

698
00:25:21,000 --> 00:25:24,000
就是它在一个

699
00:25:24,000 --> 00:25:26,000
不是一个

700
00:25:26,000 --> 00:25:28,000
所谓的

701
00:25:28,000 --> 00:25:29,000
不是零也不是一的状态

702
00:25:29,000 --> 00:25:30,000
对 就是一个

703
00:25:30,000 --> 00:25:31,000
薛灵

704
00:25:31,000 --> 00:25:33,000
它属于猫的状态

705
00:25:33,000 --> 00:25:35,000
你说不清楚

706
00:25:35,000 --> 00:25:36,000
它是一个什么样的

707
00:25:36,000 --> 00:25:37,000
除非你去看

708
00:25:37,000 --> 00:25:37,000
你一看发现

709
00:25:37,000 --> 00:25:38,000
哎呀 我靠

710
00:25:38,000 --> 00:25:40,000
各种文件缺块

711
00:25:40,000 --> 00:25:40,000
那个包

712
00:25:41,000 --> 00:25:41,000
安装好

713
00:25:41,000 --> 00:25:42,000
然后就属于

714
00:25:42,000 --> 00:25:44,000
你本来的目标是说

715
00:25:44,000 --> 00:25:44,000
你从 A 状态

716
00:25:44,000 --> 00:25:46,000
就是可以工作的 A 状态

717
00:25:46,000 --> 00:25:48,000
切换到可以工作的 B 状态

718
00:25:48,000 --> 00:25:50,000
现在你是卡在 A 和 B 之中间

719
00:25:50,000 --> 00:25:50,000
这么一个不干

720
00:25:50,000 --> 00:25:52,000
就很尴尬的一个境地

721
00:25:52,000 --> 00:25:53,000
怎么解决这个问题呢

722
00:25:53,000 --> 00:25:55,000
那这个问题是对

723
00:25:55,000 --> 00:25:56,000
普通消费者来说

724
00:25:56,000 --> 00:25:56,000
可能还好

725
00:25:56,000 --> 00:25:57,000
就现在来说

726
00:25:57,000 --> 00:25:58,000
就总体来而言吧

727
00:25:58,000 --> 00:26:00,000
还是比较少遇到这个系统崩溃

728
00:26:00,000 --> 00:26:01,000
就这系统在升级过程中

729
00:26:01,000 --> 00:26:03,000
崩溃的情况

730
00:26:03,000 --> 00:26:04,000
然后断电的话

731
00:26:04,000 --> 00:26:05,000
因为现在大部分都是笔记本吧

732
00:26:05,000 --> 00:26:06,000
就有自带电池

733
00:26:06,000 --> 00:26:08,000
也不也不太像过去的台式机

734
00:26:08,000 --> 00:26:10,000
可能被你不小心碰到一个线

735
00:26:10,000 --> 00:26:11,000
或者就停电

736
00:26:11,000 --> 00:26:12,000
或者这种外部原因

737
00:26:12,000 --> 00:26:14,000
导致这个系统

738
00:26:14,000 --> 00:26:16,000
处于这个一个中间状态的情况

739
00:26:16,000 --> 00:26:18,000
但是还是会有的嘛

740
00:26:18,000 --> 00:26:20,000
我们还是想降低

741
00:26:20,000 --> 00:26:21,000
这种样的风险和损失

742
00:26:21,000 --> 00:26:22,000
那么 Snappy

743
00:26:22,000 --> 00:26:24,000
它的这么一个核心理念

744
00:26:24,000 --> 00:26:25,000
就是说如果我们可以用

745
00:26:25,000 --> 00:26:26,000
之前我们讲过的

746
00:26:26,000 --> 00:26:27,000
这种 container

747
00:26:27,000 --> 00:26:28,000
集装箱化的技术

748
00:26:28,000 --> 00:26:29,000
就是我们是一个

749
00:26:29,000 --> 00:26:30,000
叫什么

750
00:26:30,000 --> 00:26:31,000
增量升级

751
00:26:31,000 --> 00:26:32,000
不叫增量升级

752
00:26:32,000 --> 00:26:34,000
就是一个升级好了

753
00:26:34,000 --> 00:26:36,000
才完全切换过来

754
00:26:36,000 --> 00:26:37,000
就在中间过程中

755
00:26:37,000 --> 00:26:37,000
出现任何问题

756
00:26:37,000 --> 00:26:38,000
我们都是可以

757
00:26:38,000 --> 00:26:38,000
回滚的

758
00:26:38,000 --> 00:26:40,000
那么这不就解决了

759
00:26:40,000 --> 00:26:41,000
这个问题了吗

760
00:26:41,000 --> 00:26:43,000
这个思想还是挺好的

761
00:26:43,000 --> 00:26:44,000
但它也不是这个

762
00:26:44,000 --> 00:26:45,000
Snappy 也不是

763
00:26:45,000 --> 00:26:46,000
第一个做这种事情了

764
00:26:46,000 --> 00:26:47,000
之前有很多这种

765
00:26:47,000 --> 00:26:48,000
类似于包管理的

766
00:26:48,000 --> 00:26:49,000
就不是从那种

767
00:26:49,000 --> 00:26:51,000
东西来做的尝试

768
00:26:51,000 --> 00:26:52,000
也有很多

769
00:26:52,000 --> 00:26:53,000
反正商用的话

770
00:26:53,000 --> 00:26:55,000
最大

771
00:26:55,000 --> 00:26:56,000
就最普及的

772
00:26:56,000 --> 00:26:57,000
肯定还是那个

773
00:26:57,000 --> 00:26:58,000
就是 Chromebook

774
00:26:58,000 --> 00:26:59,000
用那个 ChromeOS

775
00:26:59,000 --> 00:27:01,000
就 ChromeOS

776
00:27:01,000 --> 00:27:03,000
它的这个升级过程中

777
00:27:03,000 --> 00:27:05,000
就它是系统

778
00:27:05,000 --> 00:27:05,000
是采用这么一种

779
00:27:05,000 --> 00:27:07,000
就是两个系统了

780
00:27:07,000 --> 00:27:08,000
就是升级

781
00:27:08,000 --> 00:27:09,000
升级 AA 系统

782
00:27:09,000 --> 00:27:10,000
你用 AA 系统的时候

783
00:27:10,000 --> 00:27:12,000
它其实在升级 B 系统

784
00:27:12,000 --> 00:27:13,000
然后如果你在

785
00:27:13,000 --> 00:27:14,000
你切换到 B 系统

786
00:27:14,000 --> 00:27:15,000
发现有问题的话

787
00:27:15,000 --> 00:27:16,000
它 A 还是可以

788
00:27:16,000 --> 00:27:17,000
切换回 A 系统的

789
00:27:17,000 --> 00:27:18,000
就是双系

790
00:27:18,000 --> 00:27:19,000
两个分区这样子

791
00:27:19,000 --> 00:27:21,000
但是同样的

792
00:27:21,000 --> 00:27:21,000
同样的系统

793
00:27:21,000 --> 00:27:22,000
它不同的版本这样

794
00:27:22,000 --> 00:27:24,000
然后

795
00:27:24,000 --> 00:27:24,000
对

796
00:27:24,000 --> 00:27:25,000
这个就比那个

797
00:27:25,000 --> 00:27:27,000
有一个 Recovery Mode

798
00:27:27,000 --> 00:27:29,000
要稍微先进一点

799
00:27:29,000 --> 00:27:29,000
没错

800
00:27:29,000 --> 00:27:31,000
两套系统都是可以用的

801
00:27:31,000 --> 00:27:31,000
对

802
00:27:31,000 --> 00:27:32,000
但是它这个力度

803
00:27:32,000 --> 00:27:33,000
还是比较粗

804
00:27:33,000 --> 00:27:34,000
就是说是一个

805
00:27:34,000 --> 00:27:36,000
因为只有两个 AB 轮换

806
00:27:36,000 --> 00:27:37,000
等于是

807
00:27:37,000 --> 00:27:37,000
对

808
00:27:37,000 --> 00:27:38,000
对

809
00:27:38,000 --> 00:27:38,000
对

810
00:27:38,000 --> 00:27:39,000
我们实际上做的好一点

811
00:27:39,000 --> 00:27:40,000
就是说尽量能够说

812
00:27:40,000 --> 00:27:42,000
连这个

813
00:27:42,000 --> 00:27:43,000
就是每一个系统的

814
00:27:43,000 --> 00:27:44,000
小的改动

815
00:27:44,000 --> 00:27:45,000
都可以通过这种

816
00:27:45,000 --> 00:27:47,000
像 container 的方式

817
00:27:47,000 --> 00:27:48,000
就不是 AB 轮换

818
00:27:48,000 --> 00:27:49,000
就是 ABCD

819
00:27:49,000 --> 00:27:49,000
可能这样

820
00:27:49,000 --> 00:27:50,000
你可以无限增多的

821
00:27:50,000 --> 00:27:51,000
那么的方式轮换

822
00:27:51,000 --> 00:27:53,000
当然我

823
00:27:53,000 --> 00:27:54,000
它那个是

824
00:27:54,000 --> 00:27:55,000
是年初的时候吧

825
00:27:55,000 --> 00:27:56,000
出了一个

826
00:27:56,000 --> 00:27:57,000
就可以大家用的

827
00:27:57,000 --> 00:27:58,000
这个试玩版

828
00:27:58,000 --> 00:27:59,000
我就用了一下

829
00:27:59,000 --> 00:27:59,000
就 Snappy

830
00:27:59,000 --> 00:28:01,000
我觉得还不错

831
00:28:01,000 --> 00:28:01,000
挺好的

832
00:28:01,000 --> 00:28:03,000
就感觉跟那个 Docker 挺像

833
00:28:03,000 --> 00:28:04,000
但是管理系统

834
00:28:04,000 --> 00:28:06,000
我觉得这个东西

835
00:28:06,000 --> 00:28:07,000
在服务器上的优势

836
00:28:07,000 --> 00:28:08,000
还是蛮大的

837
00:28:08,000 --> 00:28:09,000
就是省心

838
00:28:09,000 --> 00:28:10,000
在现在的

839
00:28:10,000 --> 00:28:10,000
对

840
00:28:10,000 --> 00:28:12,000
我觉得这一次最重要的意义

841
00:28:12,000 --> 00:28:14,000
就是 Snappy 终于要进入

842
00:28:14,000 --> 00:28:15,000
因为它之前只是在 Core 上用

843
00:28:15,000 --> 00:28:18,000
然后 Snappy 现在要进入桌面版

844
00:28:18,000 --> 00:28:19,000
无线球的桌面版

845
00:28:19,000 --> 00:28:21,000
是说是 15.04

846
00:28:21,000 --> 00:28:22,000
还是说哪一个叫做

847
00:28:22,000 --> 00:28:23,000
还是 15.10

848
00:28:23,000 --> 00:28:28,000
应该是 15.04 吧

849
00:28:28,000 --> 00:28:29,000
就今年的

850
00:28:29,000 --> 00:28:30,000
就已经发了这个版本

851
00:28:30,000 --> 00:28:31,000
应该它是

852
00:28:31,000 --> 00:28:31,000
对

853
00:28:31,000 --> 00:28:33,000
它应该是要开始

854
00:28:33,000 --> 00:28:36,000
它这肯定是一个漫长的过程

855
00:28:36,000 --> 00:28:36,000
15.04

856
00:28:36,000 --> 00:28:37,000
我还没有装

857
00:28:37,000 --> 00:28:37,000
我觉得可能

858
00:28:37,000 --> 00:28:39,000
在 15.10 里面会出现

859
00:28:39,000 --> 00:28:40,000
对

860
00:28:40,000 --> 00:28:41,000
因为它是 5 月 8 日 announce 的

861
00:28:41,000 --> 00:28:44,000
所以它应该是 15.10 才会出现

862
00:28:44,000 --> 00:28:44,000
OK

863
00:28:44,000 --> 00:28:45,000
对

864
00:28:45,000 --> 00:28:46,000
因为这个 Ubuntu

865
00:28:46,000 --> 00:28:47,000
它那个系统发行版本

866
00:28:47,000 --> 00:28:48,000
它就是说每隔

867
00:28:48,000 --> 00:28:50,000
好像是一年两年

868
00:28:50,000 --> 00:28:52,000
会发一个所谓长期维护版本

869
00:28:52,000 --> 00:28:52,000
对

870
00:28:52,000 --> 00:28:53,000
Long Term Support

871
00:28:53,000 --> 00:28:54,000
对

872
00:28:54,000 --> 00:28:55,000
但是这之间

873
00:28:55,000 --> 00:28:55,000
我们现在

874
00:28:55,000 --> 00:28:57,000
就现在 Snappy 进到

875
00:28:57,000 --> 00:28:59,000
这个 Ubuntu 正式版

876
00:28:59,000 --> 00:28:59,000
而不是之前

877
00:28:59,000 --> 00:29:00,000
那个经典版的 Core

878
00:29:00,000 --> 00:29:01,000
它其实是所谓的中间

879
00:29:01,000 --> 00:29:05,000
就是非长期维护版本的

880
00:29:05,000 --> 00:29:05,000
就是简单说

881
00:29:05,000 --> 00:29:06,000
大家就做小白鼠

882
00:29:06,000 --> 00:29:07,000
对

883
00:29:07,000 --> 00:29:10,000
我还是挺鼓励大家去试试

884
00:29:10,000 --> 00:29:11,000
看看感觉怎么样

885
00:29:11,000 --> 00:29:13,000
然后因为这个毕竟是一个新

886
00:29:13,000 --> 00:29:15,000
全新的管理系统

887
00:29:15,000 --> 00:29:18,000
我觉得必然是坑多路滑

888
00:29:18,000 --> 00:29:21,000
要大家去多踩踩

889
00:29:21,000 --> 00:29:22,000
这样后人才用得爽

890
00:29:22,000 --> 00:29:24,000
鼓励大家去尝试一下

891
00:29:24,000 --> 00:29:29,000
然后我觉得它最大的一个特征

892
00:29:29,000 --> 00:29:30,000
或者一个特点

893
00:29:30,000 --> 00:29:31,000
就是它会

894
00:29:31,000 --> 00:29:33,000
它把所有的依赖

895
00:29:33,000 --> 00:29:35,000
全都打在一个包里面

896
00:29:35,000 --> 00:29:36,000
就是它每一个包都是原子的

897
00:29:36,000 --> 00:29:37,000
然后这个包一换上去

898
00:29:37,000 --> 00:29:37,000
就会有一个原子的

899
00:29:37,000 --> 00:29:38,000
就所有依赖

900
00:29:38,000 --> 00:29:39,000
就跟着一个包一起去了

901
00:29:39,000 --> 00:29:42,000
也算是它有一个特点

902
00:29:42,000 --> 00:29:44,000
它试图用

903
00:29:44,000 --> 00:29:46,000
就有点像 NPM 那样的方式

904
00:29:46,000 --> 00:29:49,000
来提供依赖管理

905
00:29:49,000 --> 00:29:50,000
所谓依赖管理

906
00:29:50,000 --> 00:29:50,000
就是不管你

907
00:29:50,000 --> 00:29:51,000
你需要什么

908
00:29:51,000 --> 00:29:52,000
全都给你

909
00:29:52,000 --> 00:29:55,000
然后但是你也别去操心

910
00:29:55,000 --> 00:29:55,000
这个东西

911
00:29:55,000 --> 00:29:57,000
别人用不用个上的问题

912
00:29:57,000 --> 00:29:58,000
这一点是

913
00:29:58,000 --> 00:30:01,000
就算是现代操作系统

914
00:30:01,000 --> 00:30:05,000
发展的一个思潮

915
00:30:05,000 --> 00:30:06,000
就好像

916
00:30:06,000 --> 00:30:07,000
我觉得以前

917
00:30:07,000 --> 00:30:09,000
之所以会出现 DIL

918
00:30:09,000 --> 00:30:11,000
或者是 Dependency Health 这种

919
00:30:11,000 --> 00:30:13,000
窘境

920
00:30:13,000 --> 00:30:15,000
原因之一也就是

921
00:30:15,000 --> 00:30:16,000
以前的硬盘太贵了

922
00:30:16,000 --> 00:30:17,000
然后现在

923
00:30:17,000 --> 00:30:19,000
想节省空间

924
00:30:19,000 --> 00:30:20,000
网速也快了

925
00:30:20,000 --> 00:30:20,000
对

926
00:30:20,000 --> 00:30:21,000
网速也快了

927
00:30:21,000 --> 00:30:22,000
空间也多了

928
00:30:22,000 --> 00:30:25,000
那这种依赖的问题

929
00:30:25,000 --> 00:30:27,000
也许就可以成为这种简单粗暴的

930
00:30:27,000 --> 00:30:27,000
好你要什么

931
00:30:27,000 --> 00:30:29,000
我就全都给你包起来

932
00:30:29,000 --> 00:30:31,000
然后一次性的

933
00:30:31,000 --> 00:30:32,000
一股脑子给你抓上完事

934
00:30:32,000 --> 00:30:33,000
这样的方式来解决

935
00:30:33,000 --> 00:30:34,000
也挺好

936
00:30:34,000 --> 00:30:36,000
现在有一个事情

937
00:30:36,000 --> 00:30:37,000
我觉得不太清楚

938
00:30:37,000 --> 00:30:37,000
当然

939
00:30:37,000 --> 00:30:38,000
硬盘我们现在说

940
00:30:38,000 --> 00:30:40,000
存储空间不是一个问题

941
00:30:40,000 --> 00:30:41,000
但是我觉得可能另外一个

942
00:30:41,000 --> 00:30:42,000
就是说

943
00:30:42,000 --> 00:30:43,000
这个共享的内存

944
00:30:43,000 --> 00:30:44,000
可能还是一个问题

945
00:30:44,000 --> 00:30:46,000
因为如果你是通过

946
00:30:46,000 --> 00:30:47,000
比如说你有两个应用

947
00:30:47,000 --> 00:30:49,000
都能连接到一个包的话

948
00:30:49,000 --> 00:30:50,000
如果你两个应用同时开

949
00:30:50,000 --> 00:30:52,000
这个包本身是可以

950
00:30:52,000 --> 00:30:53,000
就是他们共享的

951
00:30:53,000 --> 00:30:55,000
外部连接的包

952
00:30:55,000 --> 00:30:56,000
应该是可以只用

953
00:30:56,000 --> 00:30:57,000
加载一份到内存中的

954
00:30:57,000 --> 00:30:58,000
然后两边是可以

955
00:30:58,000 --> 00:31:00,000
共用的

956
00:31:00,000 --> 00:31:02,000
如果在

957
00:31:02,000 --> 00:31:06,000
加载本地的包之前

958
00:31:06,000 --> 00:31:07,000
加载本地的包之前

959
00:31:07,000 --> 00:31:08,000
依赖之前先看一下

960
00:31:08,000 --> 00:31:09,000
内存里面有没有人

961
00:31:09,000 --> 00:31:10,000
有的话就用了

962
00:31:10,000 --> 00:31:12,000
但是版本不就有问题吗

963
00:31:12,000 --> 00:31:13,000
可能两个是依赖

964
00:31:13,000 --> 00:31:16,000
可是即便在 DIY 的时代

965
00:31:16,000 --> 00:31:17,000
同样有这个问题

966
00:31:17,000 --> 00:31:18,000
你可能需要另外一个版本

967
00:31:18,000 --> 00:31:21,000
那个时候你还是需要再弄另外一份

968
00:31:21,000 --> 00:31:23,000
嗯

969
00:31:23,000 --> 00:31:24,000
不错

970
00:31:24,000 --> 00:31:25,000
对

971
00:31:25,000 --> 00:31:26,000
总体来说

972
00:31:26,000 --> 00:31:29,000
我觉得趋势肯定还是说

973
00:31:29,000 --> 00:31:30,000
不管以后操作系统也好

974
00:31:30,000 --> 00:31:32,000
还是应用的分发也好

975
00:31:32,000 --> 00:31:34,000
可能这种集装箱化

976
00:31:34,000 --> 00:31:35,000
可能还是一个比较好的趋势

977
00:31:35,000 --> 00:31:35,000
起码它对管理哲学上是一个相对的方法

978
00:31:35,000 --> 00:31:36,000
起码它对管理哲学上是一个相对的方法

979
00:31:36,000 --> 00:31:36,000
起码它对管理哲学上是一个相对的方法

980
00:31:36,000 --> 00:31:38,000
管理哲学上是一个相对

981
00:31:38,000 --> 00:31:39,000
怎么讲

982
00:31:39,000 --> 00:31:40,000
独立啊

983
00:31:40,000 --> 00:31:42,000
好维护的一个东西

984
00:31:42,000 --> 00:31:43,000
当然也有另外一种

985
00:31:43,000 --> 00:31:45,000
就是是这种反对的声音

986
00:31:45,000 --> 00:31:46,000
反对声音主要就是说

987
00:31:46,000 --> 00:31:50,000
从这个软件的这个维护和这个开发角度上可以讲

988
00:31:50,000 --> 00:31:51,000
比如说

989
00:31:51,000 --> 00:31:53,000
之前我们不是出过那个 SSL 的

990
00:31:53,000 --> 00:31:54,000
那个 hard bleed 的那个漏洞吗

991
00:31:54,000 --> 00:31:57,000
那出了漏洞肯定大家要学学补补啊

992
00:31:57,000 --> 00:31:59,000
因为很多人都用了那个 openSSL 那个包嘛

993
00:31:59,000 --> 00:32:02,000
那大家都要升级到最新版本

994
00:32:02,000 --> 00:32:04,000
才可以就避免有那个 hard bleed 的这种

995
00:32:04,000 --> 00:32:06,000
比较严重的安全漏洞的

996
00:32:06,000 --> 00:32:06,000
这种

997
00:32:06,000 --> 00:32:07,000
存在吗

998
00:32:07,000 --> 00:32:11,000
如果说整个系统的这个 SSL 就用到

999
00:32:11,000 --> 00:32:13,000
凡是用到 openSSL 的这个软件的包

1000
00:32:13,000 --> 00:32:15,000
都是外连到同样一个

1001
00:32:15,000 --> 00:32:17,000
对就只用升级一个嘛

1002
00:32:17,000 --> 00:32:18,000
就只用一次升级

1003
00:32:18,000 --> 00:32:19,000
所有人都好了

1004
00:32:19,000 --> 00:32:19,000
对吧

1005
00:32:19,000 --> 00:32:21,000
就就那个漏洞就安全漏洞就解决了

1006
00:32:21,000 --> 00:32:23,000
但是如果采用像

1007
00:32:23,000 --> 00:32:25,000
极端箱化这种方式

1008
00:32:25,000 --> 00:32:27,000
就是各个 app 自己是一套独立完整的

1009
00:32:27,000 --> 00:32:29,000
这么一套 stack 的话

1010
00:32:29,000 --> 00:32:31,000
那你要遇到这种

1011
00:32:31,000 --> 00:32:33,000
使用面积比较广的

1012
00:32:33,000 --> 00:32:35,000
然后又比较严重的 bug

1013
00:32:35,000 --> 00:32:36,000
这个的软件

1014
00:32:36,000 --> 00:32:37,000
软件 could bug 的时候

1015
00:32:37,000 --> 00:32:38,000
就就比较痛苦了

1016
00:32:38,000 --> 00:32:40,000
你可能要挨个挨个 app 去升级

1017
00:32:40,000 --> 00:32:41,000
去然后才能免

1018
00:32:41,000 --> 00:32:43,000
才能保证你整个系统中没有

1019
00:32:43,000 --> 00:32:46,000
任何部分可以遭受到这种 hard bleed

1020
00:32:46,000 --> 00:32:49,000
类似的这么一种漏洞的攻击嘛

1021
00:32:49,000 --> 00:32:51,000
所以我不太清楚

1022
00:32:51,000 --> 00:32:52,000
这两边可能还是有一点矛盾的

1023
00:32:52,000 --> 00:32:54,000
我觉得可能从用户的层面来讲

1024
00:32:54,000 --> 00:32:55,000
他可能觉得像那种

1025
00:32:55,000 --> 00:32:57,000
现在说的 app 那种方式

1026
00:32:57,000 --> 00:32:58,000
就装一个

1027
00:32:58,000 --> 00:32:59,000
然后直接删掉也没什么问题

1028
00:32:59,000 --> 00:33:00,000
这种方式可能是更加

1029
00:33:00,000 --> 00:33:02,000
简单易懂和直观的

1030
00:33:02,000 --> 00:33:03,000
然后维护性更好

1031
00:33:03,000 --> 00:33:05,000
它不会有残留垃圾什么的

1032
00:33:05,000 --> 00:33:06,000
但是我觉得像

1033
00:33:06,000 --> 00:33:06,000
对

1034
00:33:06,000 --> 00:33:07,000
从这个软件开发者的

1035
00:33:07,000 --> 00:33:08,000
这么一个角度来讲

1036
00:33:08,000 --> 00:33:10,000
可能还是有会对这个

1037
00:33:10,000 --> 00:33:12,000
是有比较大的意义的吧

1038
00:33:12,000 --> 00:33:13,000
没错

1039
00:33:13,000 --> 00:33:15,000
对

1040
00:33:15,000 --> 00:33:17,000
但我也不知道

1041
00:33:17,000 --> 00:33:19,000
他至少从 Ubuntu 的角度讲

1042
00:33:19,000 --> 00:33:23,000
他作为全球第一的 Linux 发行版

1043
00:33:23,000 --> 00:33:25,000
他已经选择第一了

1044
00:33:25,000 --> 00:33:26,000
是吗

1045
00:33:26,000 --> 00:33:27,000
应该是吧

1046
00:33:27,000 --> 00:33:28,000
我不太清楚

1047
00:33:28,000 --> 00:33:31,000
我前两天看了一份服务器上的装机量

1048
00:33:31,000 --> 00:33:33,000
现在应该是全球第一

1049
00:33:33,000 --> 00:33:34,000
OK

1050
00:33:34,000 --> 00:33:36,000
我之前老是

1051
00:33:36,000 --> 00:33:37,000
看到有人说

1052
00:33:37,000 --> 00:33:38,000
我们这个 Fedora 多好

1053
00:33:38,000 --> 00:33:40,000
我们这个 CentOS 多好

1054
00:33:40,000 --> 00:33:41,000
所以也很难讲

1055
00:33:41,000 --> 00:33:46,000
可能企业级和全球一个总体的水平

1056
00:33:46,000 --> 00:33:47,000
还是不太一样的

1057
00:33:47,000 --> 00:33:48,000
对

1058
00:33:48,000 --> 00:33:49,000
你要说付费的话

1059
00:33:49,000 --> 00:33:50,000
现在 Red Hat 终究是第一的

1060
00:33:50,000 --> 00:33:52,000
Red Hat 应该是

1061
00:33:52,000 --> 00:33:55,000
但如果你考虑所有的 Linux 发行版本的装机量的话

1062
00:33:55,000 --> 00:33:57,000
Ubuntu 现在应该一定是

1063
00:33:57,000 --> 00:33:59,000
不是应该已经是

1064
00:33:59,000 --> 00:34:01,000
是我前天看了一份报道

1065
00:34:01,000 --> 00:34:03,000
小白用户太多

1066
00:34:03,000 --> 00:34:04,000
什么商业知识都不够用了

1067
00:34:04,000 --> 00:34:05,000
对

1068
00:34:05,000 --> 00:34:05,000
对

1069
00:34:05,000 --> 00:34:05,000
对

1070
00:34:05,000 --> 00:34:05,000
对

1071
00:34:05,000 --> 00:34:05,000
对

1072
00:34:05,000 --> 00:34:05,000
对

1073
00:34:05,000 --> 00:34:05,000
对

1074
00:34:05,000 --> 00:34:05,000
对

1075
00:34:05,000 --> 00:34:05,000
对

1076
00:34:05,000 --> 00:34:05,000
对

1077
00:34:05,000 --> 00:34:06,000
对

1078
00:34:06,000 --> 00:34:06,000
对

1079
00:34:06,000 --> 00:34:12,000
,好像现在 SystemD 也已经跟着 15.04

1080
00:34:12,000 --> 00:34:16,000
成为 Ubuntu 的默认启动项目了

1081
00:34:16,000 --> 00:34:17,000
所以启动过去了

1082
00:34:17,000 --> 00:34:19,000
所以 OK

1083
00:34:19,000 --> 00:34:22,000
他们推动力量还是很大

1084
00:34:22,000 --> 00:34:25,000
没错

1085
00:34:25,000 --> 00:34:28,000
但也有很多人对这个有什么不爽的声音

1086
00:34:28,000 --> 00:34:29,000
还是另外一回事

1087
00:34:29,000 --> 00:34:30,000
以后找机会再聊

1088
00:34:30,000 --> 00:34:34,000
他们就无情的被历史的洪流淹没了

1089
00:34:34,000 --> 00:34:35,000
对

1090
00:34:35,000 --> 00:34:35,000
对

1091
00:34:35,000 --> 00:34:41,000
下一条新闻是一个

1092
00:34:41,000 --> 00:34:43,000
也不算多重要

1093
00:34:43,000 --> 00:34:44,000
就是有一个

1094
00:34:44,000 --> 00:34:47,000
有一个 manifesto

1095
00:34:47,000 --> 00:34:49,000
叫做 no tcp

1096
00:34:49,000 --> 00:34:51,000
活动

1097
00:34:51,000 --> 00:34:53,000
你这里肯定要解释一下

1098
00:34:53,000 --> 00:34:55,000
它的主要的诉求是什么

1099
00:34:55,000 --> 00:34:56,000
对

1100
00:34:56,000 --> 00:34:58,000
其实很简单

1101
00:34:58,000 --> 00:34:58,000
就是一个网站

1102
00:34:58,000 --> 00:35:00,000
一个叫 notcp.io

1103
00:35:00,000 --> 00:35:02,000
然后上面有一个大大的 tcp

1104
00:35:02,000 --> 00:35:03,000
然后画了那个

1105
00:35:03,000 --> 00:35:06,000
就是在上面画了那个禁止的标志

1106
00:35:06,000 --> 00:35:09,000
然后他开宗明义也说了

1107
00:35:09,000 --> 00:35:10,000
就说好

1108
00:35:10,000 --> 00:35:11,000
我们也是一个

1109
00:35:11,000 --> 00:35:12,000
怎么说

1110
00:35:12,000 --> 00:35:14,000
hipster 的一个宣告

1111
00:35:14,000 --> 00:35:16,000
就是顺应了

1112
00:35:16,000 --> 00:35:18,000
比如说 no jazz

1113
00:35:18,000 --> 00:35:22,000
他这句话写的其实挺酸的

1114
00:35:22,000 --> 00:35:24,000
他说 just as no jazz

1115
00:35:24,000 --> 00:35:26,000
and nio provided the world

1116
00:35:26,000 --> 00:35:29,000
that proved to the world

1117
00:35:29,000 --> 00:35:31,000
that bare metal performance

1118
00:35:31,000 --> 00:35:33,000
is always worth the consequence

1119
00:35:33,000 --> 00:35:33,000
of the world

1120
00:35:33,000 --> 00:35:35,000
unreadable code

1121
00:35:35,000 --> 00:35:37,000
就是说

1122
00:35:37,000 --> 00:35:38,000
no jazz

1123
00:35:38,000 --> 00:35:39,000
就是 jazz code 这么丑的东西

1124
00:35:39,000 --> 00:35:41,000
但是为了 performance

1125
00:35:41,000 --> 00:35:45,000
也是可以被人接受的

1126
00:35:45,000 --> 00:35:48,000
或者是那么多这种莫名其妙

1127
00:35:48,000 --> 00:35:50,000
no SQL 的 database

1128
00:35:50,000 --> 00:35:56,000
也是被证明是非常有用的

1129
00:35:56,000 --> 00:35:58,000
我们现在也要开始就是宣扬一下

1130
00:35:58,000 --> 00:36:00,000
这个 tcp 其实是非常传统

1131
00:36:00,000 --> 00:36:01,000
非常老獠牙

1132
00:36:01,000 --> 00:36:02,000
非常不那么

1133
00:36:02,000 --> 00:36:04,000
入时的东西

1134
00:36:04,000 --> 00:36:06,000
我们要宣扬大家来开始

1135
00:36:06,000 --> 00:36:08,000
摒弃 tcp

1136
00:36:08,000 --> 00:36:12,000
在不该使用 tcp 的地方

1137
00:36:12,000 --> 00:36:13,000
就不要使用 tcp

1138
00:36:13,000 --> 00:36:15,000
然后对

1139
00:36:15,000 --> 00:36:17,000
其实他的诉求就是说

1140
00:36:17,000 --> 00:36:21,000
你要尽量去采用 udp 协议

1141
00:36:21,000 --> 00:36:25,000
做一些本来不该有 tcp

1142
00:36:25,000 --> 00:36:27,000
或者是使用 tcp 协议

1143
00:36:27,000 --> 00:36:28,000
会太重的场合之下

1144
00:36:28,000 --> 00:36:30,000
主要有哪些呢

1145
00:36:30,000 --> 00:36:31,000
可以举几个例子吗

1146
00:36:32,000 --> 00:36:33,000
对比如说他举的例子

1147
00:36:33,000 --> 00:36:37,000
像那个 google 开发的叫 quick 吧

1148
00:36:37,000 --> 00:36:39,000
quick 协议

1149
00:36:39,000 --> 00:36:40,000
其实就是一个

1150
00:36:40,000 --> 00:36:44,000
基于 udp 的传输协议

1151
00:36:44,000 --> 00:36:46,000
或者是他写了一些

1152
00:36:46,000 --> 00:36:49,000
比如说 ndns 或者是 ntp 或者 rtp

1153
00:36:49,000 --> 00:36:52,000
其实全都是基于 udp 的协议

1154
00:36:52,000 --> 00:36:57,000
然后他的 manifesto 的要点就是

1155
00:36:57,000 --> 00:36:59,000
如果你开发一个

1156
00:36:59,000 --> 00:37:02,000
比较依赖实时

1157
00:37:02,000 --> 00:37:05,000
比较强调不能有 let's see

1158
00:37:05,000 --> 00:37:09,000
但是又能接受丢一些包的 app 的话

1159
00:37:09,000 --> 00:37:11,000
其实用 tcp 是一个很好的选择

1160
00:37:11,000 --> 00:37:14,000
他还举了那个 torrent

1161
00:37:14,000 --> 00:37:16,000
就是 bt 下载的那个公司

1162
00:37:16,000 --> 00:37:18,000
那个组织所开发的

1163
00:37:18,000 --> 00:37:19,000
所谓叫什么

1164
00:37:19,000 --> 00:37:23,000
multiple

1165
00:37:23,000 --> 00:37:28,000
就是一个希腊字母的 multiple

1166
00:37:28,000 --> 00:37:30,000
transfer protocol

1167
00:37:30,000 --> 00:37:32,000
也是基于 udp 的

1168
00:37:32,000 --> 00:37:33,000
对

1169
00:37:33,000 --> 00:37:34,000
multiple 这里要解释一下

1170
00:37:34,000 --> 00:37:36,000
multiple 就是在对应到英文

1171
00:37:36,000 --> 00:37:37,000
就是 micro 的意思

1172
00:37:37,000 --> 00:37:39,000
就是微型

1173
00:37:39,000 --> 00:37:39,000
对就很小了

1174
00:37:39,000 --> 00:37:41,000
微型 cp

1175
00:37:41,000 --> 00:37:43,000
微型 control protocol 这样的一个意思

1176
00:37:43,000 --> 00:37:45,000
他晚上有这么一段话

1177
00:37:45,000 --> 00:37:46,000
就说 tcp 的问题是什么

1178
00:37:46,000 --> 00:37:49,000
就说 the problem now is that

1179
00:37:49,000 --> 00:37:51,000
tcp gives us an ordering guarantee

1180
00:37:51,000 --> 00:37:54,000
that's much stronger than we need

1181
00:37:54,000 --> 00:37:58,000
all packets are reassembled in order as they are received

1182
00:37:58,000 --> 00:38:00,000
but we know that the order in which

1183
00:38:00,000 --> 00:38:01,000
we interleave them

1184
00:38:02,000 --> 00:38:04,000
never matter to begin with

1185
00:38:04,000 --> 00:38:06,000
one delayed packet

1186
00:38:06,000 --> 00:38:07,000
can artificially

1187
00:38:07,000 --> 00:38:09,000
delay the availability of the data

1188
00:38:09,000 --> 00:38:13,000
for all streams multiplexed over that connection

1189
00:38:13,000 --> 00:38:16,000
this is one form of ahead of line blocking

1190
00:38:16,000 --> 00:38:18,000
as before the application knows

1191
00:38:18,000 --> 00:38:21,000
its specific needs better than tcp

1192
00:38:21,000 --> 00:38:22,000
in this case

1193
00:38:22,000 --> 00:38:24,000
we've treated startup's latency

1194
00:38:24,000 --> 00:38:27,000
for a significant steady state latency

1195
00:38:27,000 --> 00:38:29,000
when neither is necessary

1196
00:38:29,000 --> 00:38:30,000
这段话有点肉

1197
00:38:30,000 --> 00:38:31,000
然后有点长

1198
00:38:31,000 --> 00:38:32,000
然后里面有点绕口

1199
00:38:32,000 --> 00:38:33,000
这些都是很多概念

1200
00:38:33,000 --> 00:38:36,000
可能要解释一下才能够理解

1201
00:38:36,000 --> 00:38:38,000
很多如果不是学网络通信的

1202
00:38:38,000 --> 00:38:40,000
其实我们也不是学网络通信

1203
00:38:40,000 --> 00:38:41,000
我没事半吊子水

1204
00:38:41,000 --> 00:38:44,000
但是就尽量解释一下什么意思

1205
00:38:44,000 --> 00:38:45,000
tcp 的主要问题就是说

1206
00:38:45,000 --> 00:38:46,000
他有一个 tcp

1207
00:38:46,000 --> 00:38:49,000
我们知道他提供一个所谓的排序的保证

1208
00:38:49,000 --> 00:38:52,000
就是说你先发的报一定是先收到的

1209
00:38:52,000 --> 00:38:55,000
后发的报是后收到的

1210
00:38:55,000 --> 00:38:59,000
这个是一个非常强的这么一个感染器

1211
00:38:59,000 --> 00:39:00,000
很强的一个保证

1212
00:39:00,000 --> 00:39:02,000
就是因为这个保证是很强的

1213
00:39:02,000 --> 00:39:04,000
但是实际传送我们的网络传输

1214
00:39:04,000 --> 00:39:05,000
并不是说严格是先入先出

1215
00:39:05,000 --> 00:39:08,000
因为跟一直走的路径不一样

1216
00:39:08,000 --> 00:39:09,000
和可能一些什么延迟

1217
00:39:09,000 --> 00:39:11,000
或丢包的情况不一样

1218
00:39:11,000 --> 00:39:14,000
它是要你的超级能底层

1219
00:39:14,000 --> 00:39:15,000
就 tcp 这一层

1220
00:39:15,000 --> 00:39:17,000
是要做一些额外的工作

1221
00:39:17,000 --> 00:39:19,000
去把那些可能是乱序来的包

1222
00:39:19,000 --> 00:39:21,000
重新组合成有序的

1223
00:39:21,000 --> 00:39:23,000
这样的话会有什么问题

1224
00:39:23,000 --> 00:39:25,000
就是说一个

1225
00:39:25,000 --> 00:39:28,000
假设你发的报数是 12345

1226
00:39:28,000 --> 00:39:29,000
这样子你发

1227
00:39:29,000 --> 00:39:30,000
因为他有 tcp 的排序保证

1228
00:39:30,000 --> 00:39:32,000
你收到的也是 12345

1229
00:39:32,000 --> 00:39:34,000
但是有可能在传输过程中

1230
00:39:34,000 --> 00:39:35,000
2345 都正常过来了

1231
00:39:35,000 --> 00:39:37,000
但是一可能被 drop 掉

1232
00:39:37,000 --> 00:39:39,000
就是在传输过程中被丢掉

1233
00:39:39,000 --> 00:39:40,000
或者损坏了

1234
00:39:40,000 --> 00:39:41,000
这叫重发

1235
00:39:41,000 --> 00:39:42,000
重发的话

1236
00:39:42,000 --> 00:39:43,000
你得等什么

1237
00:39:43,000 --> 00:39:44,000
有这个什么

1238
00:39:44,000 --> 00:39:46,000
这个 act 就是

1239
00:39:46,000 --> 00:39:47,000
这个叫什么

1240
00:39:47,000 --> 00:39:48,000
acknowledgement

1241
00:39:48,000 --> 00:39:50,000
这个中文叫什么

1242
00:39:50,000 --> 00:39:51,000
确认接受

1243
00:39:51,000 --> 00:39:53,000
对确认接受这个机制

1244
00:39:53,000 --> 00:39:54,000
就会导致说

1245
00:39:54,000 --> 00:39:56,000
你得等比较久的时间

1246
00:39:56,000 --> 00:39:59,000
才能够发送方才知道

1247
00:39:59,000 --> 00:40:02,000
一那个包已经被 drop 掉了

1248
00:40:02,000 --> 00:40:03,000
对方没有收到

1249
00:40:03,000 --> 00:40:04,000
我还得再重发

1250
00:40:04,000 --> 00:40:06,000
但在这个相对延迟的

1251
00:40:06,000 --> 00:40:08,000
等待的过程中

1252
00:40:08,000 --> 00:40:09,000
对方那边

1253
00:40:09,000 --> 00:40:11,000
即便他的那个

1254
00:40:11,000 --> 00:40:12,000
那个 tcp 协议那层是

1255
00:40:12,000 --> 00:40:14,000
已经拿到了 2345

1256
00:40:14,000 --> 00:40:15,000
这么多个包

1257
00:40:15,000 --> 00:40:16,000
因为他没有 1

1258
00:40:16,000 --> 00:40:18,000
他没有办法向上层应用说

1259
00:40:18,000 --> 00:40:19,000
提供说

1260
00:40:19,000 --> 00:40:22,000
这个数据其实 80%已经有了

1261
00:40:22,000 --> 00:40:24,000
但最开始的 20%是还没收到

1262
00:40:24,000 --> 00:40:26,000
你就等着

1263
00:40:26,000 --> 00:40:27,000
反正我现在我什么也不给你

1264
00:40:27,000 --> 00:40:29,000
你就只能等着

1265
00:40:29,000 --> 00:40:30,000
这个就是说

1266
00:40:30,000 --> 00:40:31,000
这是一种所谓的

1267
00:40:31,000 --> 00:40:33,000
head of line blocking

1268
00:40:33,000 --> 00:40:34,000
就是说头部阻塞

1269
00:40:34,000 --> 00:40:35,000
不知道这翻译合不合适

1270
00:40:35,000 --> 00:40:39,000
就是因为一个火车头的前面那节

1271
00:40:39,000 --> 00:40:40,000
那节没有到

1272
00:40:40,000 --> 00:40:42,000
导致后面的虽然到了

1273
00:40:42,000 --> 00:40:43,000
但是也没法交货给你

1274
00:40:43,000 --> 00:40:44,000
但其实这个是很蠢的

1275
00:40:44,000 --> 00:40:47,000
我们知道对于很多这种实际应用来讲

1276
00:40:47,000 --> 00:40:48,000
他并不是特别在意

1277
00:40:48,000 --> 00:40:51,000
说一定要按某一个基准的顺序

1278
00:40:51,000 --> 00:40:52,000
到头递给你的信息

1279
00:40:52,000 --> 00:40:53,000
对吧

1280
00:40:53,000 --> 00:40:54,000
最简单一个我们说

1281
00:40:54,000 --> 00:40:55,000
打开一个网页

1282
00:40:55,000 --> 00:40:56,000
对吧

1283
00:40:56,000 --> 00:40:57,000
传统来说

1284
00:40:57,000 --> 00:40:59,000
我们得等每一个 html 代码

1285
00:40:59,000 --> 00:41:01,000
一个字符的传过来

1286
00:41:01,000 --> 00:41:02,000
我们才可以组上显示

1287
00:41:02,000 --> 00:41:03,000
这其实并不是的

1288
00:41:03,000 --> 00:41:04,000
现在浏览器是很聪明的

1289
00:41:04,000 --> 00:41:05,000
它可以解析片段

1290
00:41:05,000 --> 00:41:06,000
对吧

1291
00:41:06,000 --> 00:41:07,000
它可以说

1292
00:41:07,000 --> 00:41:09,000
我们先说到后面的

1293
00:41:09,000 --> 00:41:11,000
看看那里有一个 js

1294
00:41:11,000 --> 00:41:13,000
前面那里有一个其他什么东西

1295
00:41:13,000 --> 00:41:15,000
它也是可以阻塞

1296
00:41:15,000 --> 00:41:16,000
可能这个例子还不是很好

1297
00:41:16,000 --> 00:41:17,000
可能浏览器解析

1298
00:41:17,000 --> 00:41:18,000
可能还是有一些顺序依赖的

1299
00:41:18,000 --> 00:41:20,000
我们再举一些相对来说

1300
00:41:20,000 --> 00:41:24,000
比较更容易讲的页列

1301
00:41:24,000 --> 00:41:25,000
就是跟图片

1302
00:41:25,000 --> 00:41:26,000
对吧

1303
00:41:26,000 --> 00:41:27,000
你知道像 jpeg 的图片

1304
00:41:27,000 --> 00:41:28,000
它是我们是可以

1305
00:41:28,000 --> 00:41:29,000
其实可以分块加载的

1306
00:41:29,000 --> 00:41:30,000
假设我们把图片

1307
00:41:30,000 --> 00:41:31,000
或者是

1308
00:41:31,000 --> 00:41:32,000
视频聊

1309
00:41:32,000 --> 00:41:33,000
我做简单的视频聊

1310
00:41:33,000 --> 00:41:35,000
你一针看到并不重要

1311
00:41:35,000 --> 00:41:36,000
没错

1312
00:41:36,000 --> 00:41:37,000
你甚至可以说

1313
00:41:37,000 --> 00:41:39,000
我先收到后面的在 buffer

1314
00:41:39,000 --> 00:41:41,000
所以先收到我就存起来

1315
00:41:41,000 --> 00:41:43,000
然后待会再放对不对

1316
00:41:43,000 --> 00:41:45,000
其实会有这么一些问题的

1317
00:41:45,000 --> 00:41:48,000
但是因为由于我们现在整个网络

1318
00:41:48,000 --> 00:41:51,000
就是说还是严重以 tcp 为主

1319
00:41:51,000 --> 00:41:54,000
起码从应用层面的角度来看

1320
00:41:54,000 --> 00:41:56,000
其实体验是并不好的

1321
00:41:56,000 --> 00:41:57,000
当然这也会在刚刚你提到

1322
00:41:57,000 --> 00:41:58,000
像一些应用

1323
00:41:58,000 --> 00:42:00,000
就是说像 google 新出

1324
00:42:00,000 --> 00:42:01,000
quick 这种协议

1325
00:42:01,000 --> 00:42:02,000
它就是为了解决这个问题

1326
00:42:02,000 --> 00:42:04,000
就是说我们知道

1327
00:42:04,000 --> 00:42:06,000
在给定证应用情况下

1328
00:42:06,000 --> 00:42:11,000
我们如果不保证严格保证顺序投递

1329
00:42:11,000 --> 00:42:13,000
我们其实可以获得更好的传输的

1330
00:42:13,000 --> 00:42:15,000
一个是传输带宽也好

1331
00:42:15,000 --> 00:42:16,000
因为它有 tcp

1332
00:42:16,000 --> 00:42:19,000
还有一些其他的流控的方法去解决

1333
00:42:19,000 --> 00:42:20,000
如果遇到丢包

1334
00:42:20,000 --> 00:42:21,000
它会把传输带宽降低

1335
00:42:21,000 --> 00:42:22,000
对吧

1336
00:42:22,000 --> 00:42:24,000
然后在你开始组织恢复这样子一个过程

1337
00:42:24,000 --> 00:42:25,000
但是其实如果

1338
00:42:25,000 --> 00:42:28,000
我们见面对现在的一些网络状况

1339
00:42:28,000 --> 00:42:30,000
特别是像移动手机网络

1340
00:42:30,000 --> 00:42:33,000
它是一个高度延迟不稳定的

1341
00:42:33,000 --> 00:42:34,000
这种情况

1342
00:42:34,000 --> 00:42:36,000
其实是对 tcp 这种协议来说

1343
00:42:36,000 --> 00:42:38,000
是不太适合在这种网络情况下用

1344
00:42:38,000 --> 00:42:39,000
但是我们没有办法

1345
00:42:39,000 --> 00:42:41,000
就是说一个历史依赖的

1346
00:42:41,000 --> 00:42:43,000
路径依赖的问题

1347
00:42:43,000 --> 00:42:44,000
现在已经有了

1348
00:42:44,000 --> 00:42:45,000
你没有办法记得用

1349
00:42:45,000 --> 00:42:46,000
但是我们就说

1350
00:42:46,000 --> 00:42:48,000
现在我们认识到的有这么一些问题

1351
00:42:48,000 --> 00:42:49,000
我们就说

1352
00:42:49,000 --> 00:42:51,000
从这个协议层来讲

1353
00:42:51,000 --> 00:42:53,000
我们以一个更加简单

1354
00:42:53,000 --> 00:42:54,000
没有那么多包袱

1355
00:42:54,000 --> 00:42:56,000
没有那么多保证的 udp 协议的

1356
00:42:56,000 --> 00:42:59,000
基础上在构建出这么一个

1357
00:42:59,000 --> 00:43:01,000
就是应用成独立的协议

1358
00:43:01,000 --> 00:43:02,000
然后来满足

1359
00:43:02,000 --> 00:43:04,000
就提供更低的延迟

1360
00:43:04,000 --> 00:43:05,000
更好的带宽

1361
00:43:05,000 --> 00:43:08,000
这么一些就最终得到是用户是更好的体验

1362
00:43:08,000 --> 00:43:09,000
对

1363
00:43:09,000 --> 00:43:10,000
对

1364
00:43:10,000 --> 00:43:12,000
当然从 tcp 的角度来看

1365
00:43:12,000 --> 00:43:18,000
也不是没有过就是试图改善 tcp 的这种延迟的尝试

1366
00:43:18,000 --> 00:43:19,000
比如说

1367
00:43:19,000 --> 00:43:23,000
曾经有过一个叫 tcp vegas 的项目

1368
00:43:23,000 --> 00:43:27,000
我相信甚至至少 freebsd 的内核里面

1369
00:43:27,000 --> 00:43:29,000
也已经把它

1370
00:43:29,000 --> 00:43:31,000
编译进去

1371
00:43:31,000 --> 00:43:35,000
就是现在 bsd 应该已经支持所谓的 tcp vegas

1372
00:43:35,000 --> 00:43:41,000
这样一种叫做 congestion avoidance algorithm 的改善版本

1373
00:43:41,000 --> 00:43:44,000
就是使用这种 tcp 的怎么说方言

1374
00:43:44,000 --> 00:43:48,000
你可以获得更好的更低的延迟

1375
00:43:48,000 --> 00:43:55,000
因为它试图从算法计算法层面上去减少 tcp 所可能产生的网络阻塞

1376
00:43:55,000 --> 00:43:56,000
但是

1377
00:43:57,000 --> 00:43:59,000
出于历史原因就是

1378
00:43:59,000 --> 00:44:05,000
Worth is better 的普通 tcp 的大部分时候是足够用的

1379
00:44:05,000 --> 00:44:09,000
所以 tcp vegas 的项目一直没有普及开来

1380
00:44:09,000 --> 00:44:11,000
至少我相信 windows 应该是不支持的

1381
00:44:11,000 --> 00:44:12,000
所以

1382
00:44:12,000 --> 00:44:15,000
但 udp 是到处都在

1383
00:44:15,000 --> 00:44:20,000
所以基于 udp 来开发这种所谓的 no tcp 的专门的传送协议

1384
00:44:20,000 --> 00:44:26,000
应该将来会比较成为某种潮流趋势了

1385
00:44:26,000 --> 00:44:28,000
当然并不意味着我们要抛弃 tcp

1386
00:44:28,000 --> 00:44:32,000
就好像 no tcp 并不是真的 no tcp

1387
00:44:32,000 --> 00:44:35,000
no tcp 也是 not only tcp

1388
00:44:35,000 --> 00:44:37,000
没错

1389
00:44:37,000 --> 00:44:40,000
但是这里面其实我觉得问题还是蛮多的

1390
00:44:40,000 --> 00:44:41,000
首先一个就是说

1391
00:44:41,000 --> 00:44:45,000
如果所有的应用层都自己去基于 udp 来

1392
00:44:45,000 --> 00:44:47,000
因为 udp 不保证一些东西

1393
00:44:47,000 --> 00:44:51,000
所以它的延迟和带宽就会好一些

1394
00:44:51,000 --> 00:44:53,000
但其实还是有很多很多问题

1395
00:44:53,000 --> 00:44:56,000
因为网络并不如我们想象的那么简单

1396
00:44:56,000 --> 00:44:59,000
可以随便提几个比较常见的问题

1397
00:44:59,000 --> 00:45:00,000
第一个是说

1398
00:45:00,000 --> 00:45:02,000
从这个层面上来讲

1399
00:45:02,000 --> 00:45:04,000
所有的应用都要自己重新发明一遍轮子

1400
00:45:04,000 --> 00:45:05,000
对吧

1401
00:45:05,000 --> 00:45:06,000
本来有说系统可以解决这个 tcp

1402
00:45:06,000 --> 00:45:08,000
提供这个顺序保证

1403
00:45:08,000 --> 00:45:09,000
那你写应用的时候

1404
00:45:09,000 --> 00:45:10,000
你就有一个假设可以做

1405
00:45:10,000 --> 00:45:12,000
其实可以简化很多事情

1406
00:45:12,000 --> 00:45:14,000
那现在就是说你没有这一层了

1407
00:45:14,000 --> 00:45:15,000
你要自己去

1408
00:45:15,000 --> 00:45:16,000
要么你自己去所谓

1409
00:45:16,000 --> 00:45:17,000
就是自己发明轮子

1410
00:45:17,000 --> 00:45:18,000
自己再搞一遍

1411
00:45:18,000 --> 00:45:20,000
能类似这种 quick 的协议

1412
00:45:20,000 --> 00:45:22,000
或者你就直接用现成的 quick 协议

1413
00:45:22,000 --> 00:45:24,000
但是就即便是你用现成的这种 quick 协议

1414
00:45:24,000 --> 00:45:25,000
它还是有一个问题就是说

1415
00:45:25,000 --> 00:45:27,000
它是一个应用层的东西

1416
00:45:27,000 --> 00:45:28,000
应用层东西有什么不好呢

1417
00:45:28,000 --> 00:45:30,000
就是应用层东西

1418
00:45:30,000 --> 00:45:32,000
它互相应用互相之间

1419
00:45:32,000 --> 00:45:34,000
是没有办法直接沟通协调的

1420
00:45:34,000 --> 00:45:36,000
因为出于这个权限的问题

1421
00:45:36,000 --> 00:45:37,000
和这个安全的原因嘛

1422
00:45:37,000 --> 00:45:39,000
对对所以这会造成说

1423
00:45:39,000 --> 00:45:41,000
造成说同一个系统上面的

1424
00:45:41,000 --> 00:45:45,000
跑着多个基于 udp 协议的应用

1425
00:45:45,000 --> 00:45:46,000
会互相打架

1426
00:45:46,000 --> 00:45:48,000
一个常见的例子就是说

1427
00:45:48,000 --> 00:45:49,000
可能单机上还不是很明显

1428
00:45:49,000 --> 00:45:52,000
因为都毕竟是一个人用嘛

1429
00:45:52,000 --> 00:45:54,000
但是你像如果你几个人

1430
00:45:54,000 --> 00:45:55,000
在共用一个路线

1431
00:45:55,000 --> 00:45:57,000
比如说你在上网打游戏

1432
00:45:57,000 --> 00:45:59,000
那边你的室友在 bt

1433
00:45:59,000 --> 00:46:02,000
然后你就比较痛苦了

1434
00:46:02,000 --> 00:46:05,000
你没有办法去控制他电脑

1435
00:46:05,000 --> 00:46:06,000
去做一些事情

1436
00:46:06,000 --> 00:46:08,000
你唯一能做的就是在这个路由器上

1437
00:46:08,000 --> 00:46:10,000
去做一些流控啊

1438
00:46:10,000 --> 00:46:11,000
quality of service

1439
00:46:11,000 --> 00:46:13,000
就是服务质量的一些控制

1440
00:46:13,000 --> 00:46:16,000
但是你是并没有直接控制他的电脑的嘛

1441
00:46:16,000 --> 00:46:17,000
这个情况就可以类比为

1442
00:46:17,000 --> 00:46:18,000
如果大家都

1443
00:46:18,000 --> 00:46:20,000
就在同一台机上的时候

1444
00:46:20,000 --> 00:46:23,000
就大部分应用都自己搞这么一套 udp 的话

1445
00:46:23,000 --> 00:46:24,000
就大家可以说

1446
00:46:24,000 --> 00:46:25,000
就大家可以

1447
00:46:25,000 --> 00:46:27,000
其实可能会互相抢占资源的嘛

1448
00:46:27,000 --> 00:46:29,000
对

1449
00:46:29,000 --> 00:46:31,000
这好像你和你的邻居们

1450
00:46:31,000 --> 00:46:32,000
只有那么一个邮筒

1451
00:46:32,000 --> 00:46:33,000
然后你每天要自己很多邮筒

1452
00:46:33,000 --> 00:46:34,000
现在把邮筒塞满了

1453
00:46:34,000 --> 00:46:37,000
你邻居把信塞不进去了

1454
00:46:37,000 --> 00:46:38,000
对

1455
00:46:38,000 --> 00:46:41,000
我之前想起知乎上有一个人说

1456
00:46:41,000 --> 00:46:42,000
他们说什么

1457
00:46:42,000 --> 00:46:45,000
他嫌宿舍里面其他人打游戏太吵

1458
00:46:45,000 --> 00:46:47,000
然后他把一个网线

1459
00:46:47,000 --> 00:46:50,000
插在墙上的网线接口

1460
00:46:50,000 --> 00:46:53,000
就是他自己的那个位置上没有接电脑

1461
00:46:53,000 --> 00:46:54,000
没有接网线

1462
00:46:54,000 --> 00:46:57,000
然后他把网线连到床上

1463
00:46:57,000 --> 00:47:03,000
然后在床上把两网线的两端绑在一起

1464
00:47:03,000 --> 00:47:08,000
这样他主要用大拇脚趾去去踩一下

1465
00:47:08,000 --> 00:47:10,000
整个宿舍就断网了

1466
00:47:10,000 --> 00:47:13,000
effectively 让所有人都玩不了网游

1467
00:47:13,000 --> 00:47:15,000
然后可以时安心的睡觉

1468
00:47:15,000 --> 00:47:16,000
太机智了

1469
00:47:16,000 --> 00:47:19,000
这哥们竟然竟然还活下来

1470
00:47:19,000 --> 00:47:21,000
没有被室友砍死也是不容易

1471
00:47:21,000 --> 00:47:22,000
没有没有被发现啊

1472
00:47:22,000 --> 00:47:23,000
就没有被发现啊

1473
00:47:23,000 --> 00:47:25,000
室友太蠢了

1474
00:47:25,000 --> 00:47:27,000
好吧

1475
00:47:27,000 --> 00:47:30,000
如果如果遇到像我这种吹毛求疵的

1476
00:47:30,000 --> 00:47:32,000
因为去追根到底到底是哪个线

1477
00:47:32,000 --> 00:47:33,000
那里出了问题呢

1478
00:47:33,000 --> 00:47:34,000
就会发现是他干的

1479
00:47:34,000 --> 00:47:36,000
嗯

1480
00:47:36,000 --> 00:47:38,000
这是知识改变命运的活生生的例子

1481
00:47:38,000 --> 00:47:39,000
只有你懂这些呢

1482
00:47:39,000 --> 00:47:41,000
你就可以去玩弄别人

1483
00:47:41,000 --> 00:47:43,000
所以什么 knowledge is power

1484
00:47:43,000 --> 00:47:45,000
什么知识就是权利

1485
00:47:45,000 --> 00:47:46,000
对

1486
00:47:46,000 --> 00:47:49,000
就刚才这个核心问题点就是说

1487
00:47:49,000 --> 00:47:52,000
CCP 还并不是一个完全不好的东西

1488
00:47:52,000 --> 00:47:54,000
就是它提供有一些很基本的保证

1489
00:47:54,000 --> 00:47:55,000
就是说大家

1490
00:47:55,000 --> 00:47:58,000
这个资源分配是由系统层级来说的

1491
00:47:58,000 --> 00:47:59,000
然后系统不会说

1492
00:47:59,000 --> 00:48:04,000
特别偏向某一些软件而不而放弃另外一些软件

1493
00:48:04,000 --> 00:48:06,000
这样就是会均衡一点嘛

1494
00:48:06,000 --> 00:48:08,000
特别是在中国这种大环境下是吧

1495
00:48:08,000 --> 00:48:11,000
谁搞指不定哪个流氓软件

1496
00:48:11,000 --> 00:48:12,000
你都给你装上这种东西之后

1497
00:48:12,000 --> 00:48:14,000
你就你就很苦哈哈了

1498
00:48:14,000 --> 00:48:17,000
但是对是一个其实说白了

1499
00:48:17,000 --> 00:48:19,000
最终说到底还是一个权利的

1500
00:48:19,000 --> 00:48:21,000
谁说了算的问题就是西子

1501
00:48:21,000 --> 00:48:28,000
你相信你的系统是一个更加公平公开公正的一个参与者吗

1502
00:48:28,000 --> 00:48:32,000
还是说你说我觉得你为了追求某一个用户

1503
00:48:32,000 --> 00:48:33,000
某一个应用的体验

1504
00:48:33,000 --> 00:48:36,000
这个快好这个响应低

1505
00:48:36,000 --> 00:48:42,000
愿意放弃其他一些这个应用的这个响应速度还是怎么样

1506
00:48:42,000 --> 00:48:45,000
这里面其实是我觉得还有很多是要要权衡的

1507
00:48:45,000 --> 00:48:50,000
并不是一个看起来那么简单的纯技术的一个讨论

1508
00:48:51,000 --> 00:48:53,000
嗯没错

1509
00:48:53,000 --> 00:48:55,000
OK

1510
00:48:55,000 --> 00:48:58,000
呃接下来一条新闻是

1511
00:48:58,000 --> 00:49:01,000
嗯我非常喜欢乐天的就是

1512
00:49:01,000 --> 00:49:06,000
Google 呃在研发 Dart Language

1513
00:49:06,000 --> 00:49:09,000
呃用于开发 Android F

1514
00:49:09,000 --> 00:49:10,000
耶

1515
00:49:10,000 --> 00:49:12,000
为什么不是够

1516
00:49:12,000 --> 00:49:15,000
为什么不是够我抗议

1517
00:49:15,000 --> 00:49:18,000
应该还是权衡利弊的结果吧

1518
00:49:18,000 --> 00:49:21,000
我觉得够可能目前看来还是不太适合

1519
00:49:21,000 --> 00:49:25,000
因为我看了很多开发需要写很多界面的东西

1520
00:49:25,000 --> 00:49:29,000
我也不知道就就还是语法太还是非常弱小了

1521
00:49:29,000 --> 00:49:35,000
他不是弱小就是够太太金刚钻了

1522
00:49:35,000 --> 00:49:38,000
他他比较精干

1523
00:49:38,000 --> 00:49:40,000
他太小了

1524
00:49:40,000 --> 00:49:45,000
嗯不过这里可能要先解释一下 Dart 是个是一个什么类型的样子的语言

1525
00:49:45,000 --> 00:49:48,000
你需要解释吗

1526
00:49:48,000 --> 00:49:49,000
呃解释一下

1527
00:49:49,000 --> 00:49:51,000
我觉得并不是所有人都去关注这一块的

1528
00:49:51,000 --> 00:49:53,000
不知道就

1529
00:49:53,000 --> 00:49:55,000
哈哈哈

1530
00:49:55,000 --> 00:49:56,000
anyway 好

1531
00:49:56,000 --> 00:50:02,000
Dart 其实是就是 chrome 的 v 8 team 开发出来的一种语言

1532
00:50:02,000 --> 00:50:04,000
嗯

1533
00:50:04,000 --> 00:50:10,000
他们开发 Dart 的主要原因也就是因为 JavaScript 和 Java 一样就比较老嘛

1534
00:50:10,000 --> 00:50:13,000
JavaScript 也是 95 年二十一一晃二十年了

1535
00:50:13,000 --> 00:50:16,000
二十年这么老的一个 JavaScript 的语言

1536
00:50:16,000 --> 00:50:20,000
他们也希望就好像微软的像微软那个 TypeScript

1537
00:50:20,000 --> 00:50:25,000
也希望开发出一种东西来取它取而代之嘛

1538
00:50:25,000 --> 00:50:33,000
然后 Dart 就是这样一种呃 Google 希望它能够成为下一代浏览器语言的语言

1539
00:50:33,000 --> 00:50:35,000
然后 Dart 现在有两种执行方式

1540
00:50:35,000 --> 00:50:41,000
一种是直接编译成他自己的虚拟机的呃 IAL

1541
00:50:41,000 --> 00:50:45,000
另外一种方式是把 Dart 编译为 JavaScript

1542
00:50:45,000 --> 00:50:49,000
我记得当时是当时有过一个 meme 就是呃

1543
00:50:49,000 --> 00:50:52,000
Dart 写了一行 hello world

1544
00:50:52,000 --> 00:50:55,000
然后编译出来 JavaScript 好像有 8 K

1545
00:50:55,000 --> 00:50:56,000
哈哈哈哈

1546
00:50:56,000 --> 00:50:57,000
对

1547
00:50:57,000 --> 00:50:59,000
有什么有那个 overhead

1548
00:50:59,000 --> 00:51:02,000
对有一个非常比较严重的 overhead

1549
00:51:02,000 --> 00:51:05,000
就是如果你把它编译成呃 JavaScript 的话

1550
00:51:05,000 --> 00:51:06,000
它会变得非常用处

1551
00:51:06,000 --> 00:51:11,000
但是相信目前状况已经有大有比较大的改善了

1552
00:51:11,000 --> 00:51:12,000
嗯

1553
00:51:12,000 --> 00:51:13,000
然后 Dart 这种语言呢

1554
00:51:13,000 --> 00:51:14,000
呃

1555
00:51:14,000 --> 00:51:19,000
接下来即将被推广到 Android 应用开发上面

1556
00:51:19,000 --> 00:51:20,000
就是呃

1557
00:51:20,000 --> 00:51:24,000
之前我们不是提到过 Android 的 app 可以呃

1558
00:51:24,000 --> 00:51:30,000
直接用 C++来写那种比较 performance critical 的 app

1559
00:51:30,000 --> 00:51:32,000
比如说尤其是游戏

1560
00:51:32,000 --> 00:51:33,000
然后现在呢

1561
00:51:33,000 --> 00:51:36,000
呃 Google 决定说好你不写游戏的话

1562
00:51:36,000 --> 00:51:39,000
也可以采用 Java 之外的语言就是 Dart

1563
00:51:39,000 --> 00:51:40,000
呃

1564
00:51:40,000 --> 00:51:45,000
而且这个 Dart 最大的特一个一个一个优势就是或者他们的理念

1565
00:51:45,000 --> 00:51:49,000
他们的理想目标就是希望能够用 Dart 写出来的 app 都跑了出去

1566
00:51:49,000 --> 00:51:50,000
非常非常快

1567
00:51:50,000 --> 00:51:54,000
他们有个指标是 120 fps

1568
00:51:54,000 --> 00:51:55,000
哈哈

1569
00:51:55,000 --> 00:51:58,000
就是跑 60 fps 已经不足以满足了是吧

1570
00:51:58,000 --> 00:51:59,000
没错

1571
00:51:59,000 --> 00:52:01,000
就我们之前提到那个哎

1572
00:52:01,000 --> 00:52:04,000
不是我们之前是你们之前提到的那个 flipboard

1573
00:52:04,000 --> 00:52:05,000
呃

1574
00:52:05,000 --> 00:52:08,000
在看完之上实现的 app 好像也只有 60 fps

1575
00:52:08,000 --> 00:52:09,000
对对

1576
00:52:09,000 --> 00:52:10,000
因为你更快没有用

1577
00:52:10,000 --> 00:52:13,000
我们显示器只有刷 60 次每秒

1578
00:52:13,000 --> 00:52:14,000
对

1579
00:52:14,000 --> 00:52:15,000
然后他们说好

1580
00:52:15,000 --> 00:52:18,000
我们用 Dart 来写 120 fps 的 app

1581
00:52:18,000 --> 00:52:19,000
嗯

1582
00:52:19,000 --> 00:52:20,000
嗯

1583
00:52:20,000 --> 00:52:21,000
嗯

1584
00:52:21,000 --> 00:52:22,000
不过先浇个冷水啊

1585
00:52:22,000 --> 00:52:24,000
Dart 本来之前说是刚才也讲了

1586
00:52:24,000 --> 00:52:27,000
是本来是说在做进这个 chrome 就替代对

1587
00:52:27,000 --> 00:52:29,000
也不叫替代就是说和这个 Java script

1588
00:52:29,000 --> 00:52:33,000
所以一个并就是同时存在支持的官方支持的语言啊

1589
00:52:33,000 --> 00:52:37,000
但后来好像这事已经说不是了

1590
00:52:37,000 --> 00:52:40,000
就是说不进那个 Dart 语言不进这个浏览器了

1591
00:52:40,000 --> 00:52:42,000
都不进 chrome 至少啊

1592
00:52:42,000 --> 00:52:44,000
这是什么时候去

1593
00:52:44,000 --> 00:52:45,000
就就上个月吧

1594
00:52:45,000 --> 00:52:47,000
就最近也不是就今年的就最近一个月吧

1595
00:52:47,000 --> 00:52:48,000
嗯

1596
00:52:48,000 --> 00:52:52,000
就是就最近一两个月之内的事情就确认说啊

1597
00:52:52,000 --> 00:52:54,000
不会了就是就别想了

1598
00:52:54,000 --> 00:52:56,000
你别想在浏览器里面直接用 Dart

1599
00:52:56,000 --> 00:52:57,000
对就这个意思

1600
00:52:57,000 --> 00:53:01,000
所以将来 Java script 还是会继续主宰浏览器吗

1601
00:53:01,000 --> 00:53:02,000
嗯

1602
00:53:02,000 --> 00:53:03,000
没错

1603
00:53:03,000 --> 00:53:05,000
但他们现在的方向就有点变了

1604
00:53:05,000 --> 00:53:08,000
就是说其实想法是这样子

1605
00:53:08,000 --> 00:53:12,000
就是说我们不直接去取代这个 Java script

1606
00:53:12,000 --> 00:53:13,000
但是呢

1607
00:53:13,000 --> 00:53:16,000
我们推出一个就跟 mozilla 的思路有点像

1608
00:53:16,000 --> 00:53:17,000
就是他们推出一个

1609
00:53:17,000 --> 00:53:21,000
就是他们推出一个所谓精简版的这个 Java script 的子集

1610
00:53:21,000 --> 00:53:22,000
然后呢

1611
00:53:22,000 --> 00:53:26,000
就其他的这个语言你是可以就是说 transpire

1612
00:53:26,000 --> 00:53:33,000
就是编译的翻译编译成这个 Java script 的这个子集

1613
00:53:33,000 --> 00:53:36,000
然后这个子集是如何选定出来的

1614
00:53:36,000 --> 00:53:40,000
就这个子集能够能够有足够的这种一种 construct

1615
00:53:40,000 --> 00:53:41,000
是可以构建

1616
00:53:41,000 --> 00:53:44,000
就可以支持你上面的语言的那些基础的功能的

1617
00:53:44,000 --> 00:53:47,000
然后这个这个子集的 Java script 是可以

1618
00:53:47,000 --> 00:53:51,000
很好的被这个什么 just in time 的编译去优化的

1619
00:53:51,000 --> 00:53:53,000
这么一个子集

1620
00:53:53,000 --> 00:53:54,000
这样的话就等于是说

1621
00:53:54,000 --> 00:53:57,000
我们把这个 Java script 作为一个怎么说呢

1622
00:53:57,000 --> 00:54:00,000
类似于 C 或者类似于汇编的这么一个角色

1623
00:54:00,000 --> 00:54:03,000
Java script is new assembly language

1624
00:54:03,000 --> 00:54:04,000
for the web

1625
00:54:04,000 --> 00:54:05,000
没错

1626
00:54:05,000 --> 00:54:08,000
对前阵子的一个 hackerness

1627
00:54:08,000 --> 00:54:12,000
所以就其实这个跟现在我们这个新闻里面讲的

1628
00:54:12,000 --> 00:54:17,000
说 Dart 直接用于这个 Android 里面的 app 的编写

1629
00:54:17,000 --> 00:54:18,000
还是非常不一样

1630
00:54:18,000 --> 00:54:23,000
起码你说用 Dart 的网页版件能够比较畅快的方式

1631
00:54:23,000 --> 00:54:26,000
还是说先转成这个 JS 再说嘛

1632
00:54:26,000 --> 00:54:29,000
那现在这个这个就玩法就是完全不一样的一个过程

1633
00:54:29,000 --> 00:54:30,000
OK

1634
00:54:30,000 --> 00:54:32,000
然后 Dart on Android

1635
00:54:32,000 --> 00:54:36,000
它的名字不是叫 Dart on Android

1636
00:54:36,000 --> 00:54:39,000
而是留意外名叫 Sky

1637
00:54:39,000 --> 00:54:42,000
就有点莫名其妙啊

1638
00:54:42,000 --> 00:54:43,000
他为什么叫

1639
00:54:43,000 --> 00:54:44,000
这不光是莫名其妙啊

1640
00:54:44,000 --> 00:54:46,000
这个简直就是自讨苦吃啊

1641
00:54:46,000 --> 00:54:48,000
是啊你知道最近是前不上周吧

1642
00:54:48,000 --> 00:54:49,000
那个搜不到啊

1643
00:54:49,000 --> 00:54:52,000
对啊最大的搜不到搜不到就不说了

1644
00:54:52,000 --> 00:54:55,000
上周不是那个 Sky 被判

1645
00:54:55,000 --> 00:54:57,000
欧洲一个哪个哪个国家我忘了

1646
00:54:57,000 --> 00:55:00,000
被欧洲一个法院说判他那个商标侵权

1647
00:55:00,000 --> 00:55:03,000
那个 Sky 电视网络吗

1648
00:55:03,000 --> 00:55:06,000
理由是因为之前理由是前面都有一个 Sky

1649
00:55:06,000 --> 00:55:08,000
然后大家消费者可能会分不清楚

1650
00:55:08,000 --> 00:55:12,000
此 Sky 和那个 Sky 不是没有关系的

1651
00:55:12,000 --> 00:55:14,000
法国人里消费者都是傻逼呗

1652
00:55:14,000 --> 00:55:15,000
那是法国吗

1653
00:55:15,000 --> 00:55:17,000
哦 sorry

1654
00:55:17,000 --> 00:55:19,000
我不确定是法国的

1655
00:55:19,000 --> 00:55:24,000
但是这是是你在你们大欧洲的某一个这个法院判决结果

1656
00:55:24,000 --> 00:55:25,000
当时大家就觉得

1657
00:55:25,000 --> 00:55:26,000
德国是老干这种事情

1658
00:55:26,000 --> 00:55:29,000
就是你知道最开始 GooglemailGmail 想要进德国的时候

1659
00:55:29,000 --> 00:55:32,000
德国已经有一个叫什么啊 Gmail 之类的

1660
00:55:32,000 --> 00:55:34,000
那个我觉得可以理解啊

1661
00:55:34,000 --> 00:55:35,000
那个是可以注册商标的

1662
00:55:35,000 --> 00:55:39,000
你说这个 Sky 和 Sky 不就差的这十万八千里呢

1663
00:55:39,000 --> 00:55:41,000
欧洲诡异多

1664
00:55:41,000 --> 00:55:42,000
欧洲诡异多

1665
00:55:42,000 --> 00:55:43,000
这也是什么见怪不怪了吧

1666
00:55:43,000 --> 00:55:44,000
我觉得那个什么在

1667
00:55:44,000 --> 00:55:45,000
在

1668
00:55:45,000 --> 00:55:47,000
我们稍后再以后再吐槽

1669
00:55:47,000 --> 00:55:51,000
我们就先说回这个这个什么 Dart 和 Android

1670
00:55:51,000 --> 00:55:53,000
NicknameSky

1671
00:55:53,000 --> 00:55:55,000
对这么一个东西

1672
00:55:55,000 --> 00:55:57,000
就它其实是一个

1673
00:55:57,000 --> 00:56:00,000
就它它至于 Java 有什么特别的优势吗

1674
00:56:00,000 --> 00:56:03,000
就是用于写这个 Android 应用有什么特别的好处

1675
00:56:03,000 --> 00:56:06,000
难道不写 Java 不是最大的优势吗

1676
00:56:06,000 --> 00:56:07,000
哈哈哈

1677
00:56:07,000 --> 00:56:09,000
黑的漂亮

1678
00:56:09,000 --> 00:56:10,000
嗯

1679
00:56:10,000 --> 00:56:11,000
但还是

1680
00:56:11,000 --> 00:56:14,000
其实我觉得只要你不写 Java 基本上就可以做到 Writeless do more

1681
00:56:14,000 --> 00:56:17,000
但是也可能会出现一个比 Java 更烂的语言嘛

1682
00:56:17,000 --> 00:56:19,000
当然概率比较小

1683
00:56:19,000 --> 00:56:20,000
Dart 显然不可能比 Java 更烂吧

1684
00:56:20,000 --> 00:56:22,000
还有什么语言能比 Java 更烂吗

1685
00:56:22,000 --> 00:56:23,000
哈哈哈

1686
00:56:23,000 --> 00:56:24,000
说的也是好吧

1687
00:56:24,000 --> 00:56:25,000
嗯

1688
00:56:25,000 --> 00:56:26,000
对啊

1689
00:56:26,000 --> 00:56:27,000
PHP 比 Java 更烂

1690
00:56:27,000 --> 00:56:29,000
这个我必须承认

1691
00:56:29,000 --> 00:56:32,000
他这个还是有一个这个 adoption 的问题啊

1692
00:56:32,000 --> 00:56:38,000
他之前那个去就撤掉 Dart 原生在 Chrome 浪游器里面支持的这么一个计划

1693
00:56:38,000 --> 00:56:43,000
我觉得可能最大的一个考虑还是说这个可能会造成这个用户群的割裂嘛

1694
00:56:43,000 --> 00:56:45,000
就是你本来一个浏览器这个写开发小组

1695
00:56:45,000 --> 00:56:48,000
你这种去考虑说怎么去优化 Java script 就好了

1696
00:56:48,000 --> 00:56:50,000
那吧多出了一个新语言

1697
00:56:50,000 --> 00:56:53,000
我还在考虑你这个新语言的模型就并不经济嘛

1698
00:56:53,000 --> 00:56:57,000
然后这个从这个用户的角度来讲其实也是挺有问题的

1699
00:56:57,000 --> 00:57:01,000
我跟所有其他浏览器开发都得使用 Java script

1700
00:57:01,000 --> 00:57:02,000
哎唯独给你这个 Chrome 开发

1701
00:57:02,000 --> 00:57:05,000
我再想想那个 Dart 是不是更好呢

1702
00:57:05,000 --> 00:57:06,000
就其实何必呢

1703
00:57:06,000 --> 00:57:08,000
就这样会导致就是说

1704
00:57:08,000 --> 00:57:12,000
呃保守型的这个用户还是会倾向于选择说一个成熟的

1705
00:57:12,000 --> 00:57:13,000
呃保守型的这个用户还是会倾向于选择说一个成熟的

1706
00:57:13,000 --> 00:57:14,000
这个 Java script 的这种语言

1707
00:57:14,000 --> 00:57:16,000
还有成熟的一些技术来做这个开发

1708
00:57:16,000 --> 00:57:19,000
那就不会那么倾向于说用 Dart

1709
00:57:19,000 --> 00:57:24,000
这种没有经过所谓时间考验的新的语言来

1710
00:57:24,000 --> 00:57:25,000
基于做这种商业开发

1711
00:57:25,000 --> 00:57:27,000
我觉得这个是不太靠谱的

1712
00:57:27,000 --> 00:57:31,000
除非有一天 Chrome 的市场率可以达到 90%以上

1713
00:57:31,000 --> 00:57:32,000
啊

1714
00:57:32,000 --> 00:57:34,000
否则基本上还是不要想

1715
00:57:34,000 --> 00:57:37,000
I don't think that they will ever come

1716
00:57:37,000 --> 00:57:38,000
but

1717
00:57:38,000 --> 00:57:39,000
对

1718
00:57:39,000 --> 00:57:41,000
太现实

1719
00:57:41,000 --> 00:57:42,000
嗯哼

1720
00:57:42,000 --> 00:57:43,000
现在

1721
00:57:43,000 --> 00:57:45,000
现在那个呃

1722
00:57:45,000 --> 00:57:50,000
Chrome 也就 3%到 40%的市占率嘛

1723
00:57:50,000 --> 00:57:52,000
那中国现在就完全不行了

1724
00:57:52,000 --> 00:57:54,000
因为就是被封锁

1725
00:57:54,000 --> 00:57:55,000
就没办法下载

1726
00:57:55,000 --> 00:57:56,000
没办法更新嘛

1727
00:57:56,000 --> 00:57:59,000
就其实用户觉得这个流程和发现都是

1728
00:57:59,000 --> 00:58:02,000
肯定是走下坡路的

1729
00:58:02,000 --> 00:58:05,000
国外可能还行吧

1730
00:58:05,000 --> 00:58:06,000
对

1731
00:58:08,000 --> 00:58:09,000
嗯对

1732
00:58:09,000 --> 00:58:11,000
然后接下来呃

1733
00:58:11,000 --> 00:58:26,000
Win 10 搭载的或者说微软的下载论迹也很有可能会替微软抢回一部分奖赏的嗯这个其实今年这个我们现在马上要聊到的这个主题就是今天这个已经过了一段时间了

1734
00:58:26,000 --> 00:58:27,000
我们现在聊的比较晚

1735
00:58:27,000 --> 00:58:31,000
就是这个微软的 Build 2015 这个大会开发者大会

1736
00:58:31,000 --> 00:58:33,000
他们提到了一些东西

1737
00:58:33,000 --> 00:58:34,000
嗯

1738
00:58:34,000 --> 00:58:37,000
你你先说说你觉得印象比较深刻的那几个吧

1739
00:58:37,000 --> 00:58:39,000
你先看了哪些

1740
00:58:39,000 --> 00:58:40,000
呃其实我唯一关注的就是好像是微软的 2015 的这个大会啊

1741
00:58:40,000 --> 00:58:42,000
其实我唯一关注的就是 Hololens

1742
00:58:42,000 --> 00:58:44,000
哈哈哈

1743
00:58:44,000 --> 00:58:45,000
其他都没看

1744
00:58:45,000 --> 00:58:48,000
我不知道你就整个那个 Keynote 我只看了 Hololens 那一部分

1745
00:58:48,000 --> 00:58:50,000
然后就转头打游戏去

1746
00:58:50,000 --> 00:58:51,000
啊

1747
00:58:51,000 --> 00:58:52,000
啊

1748
00:58:52,000 --> 00:58:53,000
呃

1749
00:58:53,000 --> 00:58:55,000
就是那个第一天的那个主题演讲

1750
00:58:55,000 --> 00:58:57,000
我还看了

1751
00:58:57,000 --> 00:59:00,000
除了这个讲 Azure 的中后半截之外

1752
00:59:00,000 --> 00:59:01,000
其他我都看了

1753
00:59:01,000 --> 00:59:03,000
他先先说那个会吧

1754
00:59:03,000 --> 00:59:04,000
那个那个主题演讲

1755
00:59:04,000 --> 00:59:08,000
他前面花了相当长时间讲那个 Azure 就是那个他们那个云服务

1756
00:59:08,000 --> 00:59:09,000
我觉得其实挺无聊的

1757
00:59:09,000 --> 00:59:10,000
就

1758
00:59:10,000 --> 00:59:12,000
就是很多人都要做这个后台开发嘛

1759
00:59:12,000 --> 00:59:13,000
你要讲那么多有什么用

1760
00:59:13,000 --> 00:59:18,000
对我觉得 Azure 有点就是 over 了

1761
00:59:18,000 --> 00:59:19,000
推的有点太过头了

1762
00:59:19,000 --> 00:59:21,000
不但这个也能够理解

1763
00:59:21,000 --> 00:59:26,000
毕竟那个谁 Santagia Nadella 是 Azure 部门头头这样过去的嘛

1764
00:59:26,000 --> 00:59:29,000
他可能在这个人员部署上可能会有点偏向性

1765
00:59:29,000 --> 00:59:31,000
但我我觉得那个安排是不太好的

1766
00:59:31,000 --> 00:59:33,000
起码作为一个主题演讲

1767
00:59:33,000 --> 00:59:36,000
就是太繁琐太多太多细节的东西

1768
00:59:36,000 --> 00:59:39,000
没有把消费者能够感知到的东西

1769
00:59:39,000 --> 00:59:41,000
通过点突出出来

1770
00:59:41,000 --> 00:59:44,000
当然你可以说这个我们这个 Build 会有不像那个 WDC

1771
00:59:44,000 --> 00:59:47,000
第一天主要是面向这个外媒体和消费者

1772
00:59:47,000 --> 00:59:50,000
我们这个 Build 就完全是针对开发者

1773
00:59:50,000 --> 00:59:55,000
那也可以但起码说从一个个人消费者来讲

1774
00:59:55,000 --> 00:59:56,000
还是说从媒体来讲

1775
00:59:56,000 --> 00:59:59,000
他现在这种方式就这么匆匆发布出来

1776
00:59:59,000 --> 01:00:02,000
好像感觉时候会有一点问题呢

1777
01:00:02,000 --> 01:00:08,000
我觉得 Build 不能真正的消费者或者真正的开发者或者是

1778
01:00:08,000 --> 01:00:10,000
真正开发者会有多少看 Build 呢

1779
01:00:10,000 --> 01:00:14,000
且不说真正消费者没有几个在看 Build 的

1780
01:00:14,000 --> 01:00:19,000
消费者我感觉就是微软还是有不少这个所谓铁杆粉丝的嘛

1781
01:00:19,000 --> 01:00:20,000
就是这个我不怀疑

1782
01:00:20,000 --> 01:00:22,000
就是说这个数量上怎么样

1783
01:00:22,000 --> 01:00:26,000
第二个说他们这么人到底有多关心 Ayer

1784
01:00:26,000 --> 01:00:28,000
值得讲两讲半个小时

1785
01:00:28,000 --> 01:00:29,000
然后换三个人这种方式

1786
01:00:29,000 --> 01:00:31,000
我觉得也不一定对

1787
01:00:31,000 --> 01:00:36,000
我是可以理解微软非常迫切的想要抢回服务器端的

1788
01:00:36,000 --> 01:00:37,000
嗯

1789
01:00:37,000 --> 01:00:39,000
市场份额的决心

1790
01:00:39,000 --> 01:00:48,000
但是我觉得这样一个开发者大会上花这么长的篇幅来介绍这样一个产品有点偶尔

1791
01:00:48,000 --> 01:00:49,000
嗯

1792
01:00:49,000 --> 01:00:54,000
但 Anyway

1793
01:00:54,000 --> 01:01:00,000
虽然 B 公司也正在试图跟 Azure

1794
01:01:00,000 --> 01:01:02,000
之前反正开了很多天的会

1795
01:01:02,000 --> 01:01:03,000
当然我们要参与

1796
01:01:03,000 --> 01:01:06,000
想要把公司的产品做进 Azure 内容里面

1797
01:01:07,000 --> 01:01:09,000
成为他的一个服务

1798
01:01:09,000 --> 01:01:11,000
哈哈哈

1799
01:01:11,000 --> 01:01:12,000
但我觉得还是离

1800
01:01:12,000 --> 01:01:14,000
觉得还是离我很远

1801
01:01:14,000 --> 01:01:16,000
嗯

1802
01:01:16,000 --> 01:01:19,000
就是 Build 这个 Keynote 上还展示了一些其他的东西

1803
01:01:19,000 --> 01:01:22,000
另外一个重头戏就是这个 Windows 10 了

1804
01:01:22,000 --> 01:01:26,000
反正起码从 Demo 角度来看还是蛮激动人心的

1805
01:01:26,000 --> 01:01:28,000
然后上次我们请小姐姐来讲

1806
01:01:28,000 --> 01:01:32,000
就她也说这个就确实 Win 10 还是不错的

1807
01:01:32,000 --> 01:01:35,000
虽然现在开发测试版可能不是太稳定

1808
01:01:35,000 --> 01:01:36,000
但是啊

1809
01:01:36,000 --> 01:01:38,000
起码从设计上来讲

1810
01:01:38,000 --> 01:01:40,000
观感来讲我们看的还是挺好的这么一个过程

1811
01:01:40,000 --> 01:01:42,000
但有 Win 10 有一个特点

1812
01:01:42,000 --> 01:01:44,000
Win 10 还是继续延续了这个微软

1813
01:01:44,000 --> 01:01:47,000
有非常非常多的版本的这个特点

1814
01:01:47,000 --> 01:01:48,000
哈哈哈

1815
01:01:48,000 --> 01:01:49,000
对

1816
01:01:49,000 --> 01:01:53,000
Win 10 将在 190 个国家发售

1817
01:01:53,000 --> 01:01:55,000
然后有 111 种语

1818
01:01:55,000 --> 01:01:56,000
嗯

1819
01:01:56,000 --> 01:02:00,000
然后接下来我可以大概大概说一下 Windows 10 的版本

1820
01:02:00,000 --> 01:02:03,000
首先 Windows 10 有 Home 版

1821
01:02:03,000 --> 01:02:06,000
就是最普通的大家各自的版本

1822
01:02:06,000 --> 01:02:08,000
最普通的消费者会买的版本

1823
01:02:08,000 --> 01:02:10,000
还有 Windows 10 Mobile 版本

1824
01:02:10,000 --> 01:02:13,000
跑在 Mobile 的地板上

1825
01:02:13,000 --> 01:02:15,000
Windows 10 Pro 版本

1826
01:02:15,000 --> 01:02:17,000
是 Home 版本

1827
01:02:17,000 --> 01:02:24,000
加上一些可能小的 small business 或者是开发者会需要的一些特性

1828
01:02:24,000 --> 01:02:26,000
然后有 Windows 10 Enterprise 版本

1829
01:02:26,000 --> 01:02:28,000
然后有 Windows 10 Education 版本

1830
01:02:28,000 --> 01:02:31,000
然后还有 Windows 10 Mobile Enterprise 版本

1831
01:02:31,000 --> 01:02:32,000
这是什么东西

1832
01:02:32,000 --> 01:02:34,000
哈哈哈

1833
01:02:34,000 --> 01:02:35,000
嗯哼

1834
01:02:35,000 --> 01:02:37,000
为什么会有一个 Mobile Enterprise 版本

1835
01:02:37,000 --> 01:02:38,000
这是

1836
01:02:38,000 --> 01:02:39,000
哎

1837
01:02:39,000 --> 01:02:40,000
就是戏份市场

1838
01:02:40,000 --> 01:02:41,000
拿来干嘛的

1839
01:02:41,000 --> 01:02:42,000
戏份市场吧

1840
01:02:42,000 --> 01:02:43,000
其实挺挺鼓励的

1841
01:02:43,000 --> 01:02:44,000
对

1842
01:02:44,000 --> 01:02:47,000
然后最后还有一个 Windows 10 IoT Core 版本

1843
01:02:47,000 --> 01:02:49,000
就是 Internet of Things Core 版本

1844
01:02:49,000 --> 01:02:50,000
啊

1845
01:02:50,000 --> 01:02:51,000
那个挺有意思的

1846
01:02:51,000 --> 01:02:53,000
那个其实可以先简单说一下

1847
01:02:53,000 --> 01:02:57,000
就是说那个的主要就是 IoT 是指这个 Internet of Things

1848
01:02:57,000 --> 01:02:59,000
就是物联网

1849
01:02:59,000 --> 01:03:00,000
它那个什么意思呢

1850
01:03:00,000 --> 01:03:02,000
其实是非常小的设备

1851
01:03:02,000 --> 01:03:04,000
因为物联网里面最

1852
01:03:04,000 --> 01:03:06,000
最要紧的一个基础设施就是各种各样的传感器

1853
01:03:06,000 --> 01:03:08,000
各种各样的那种小外设嘛

1854
01:03:08,000 --> 01:03:10,000
那这小外设通常的这个

1855
01:03:10,000 --> 01:03:12,000
就是他们的一个共性就是说

1856
01:03:12,000 --> 01:03:14,000
价格便宜成本低

1857
01:03:14,000 --> 01:03:15,000
但结果就是说

1858
01:03:15,000 --> 01:03:17,000
这个处理器很弱

1859
01:03:17,000 --> 01:03:20,000
然后可能还没有还有这个耗电的这个要就是功耗有要求

1860
01:03:20,000 --> 01:03:21,000
不能超过多少

1861
01:03:21,000 --> 01:03:25,000
对导致他们那个整个就是一个比较弱小的一个一个机器

1862
01:03:25,000 --> 01:03:28,000
然后你要在那么弱小的一个机器上运行一个 Windows 系统

1863
01:03:28,000 --> 01:03:31,000
这想就就没有没有精简过的 Windows 系统

1864
01:03:31,000 --> 01:03:32,000
这显然是

1865
01:03:32,000 --> 01:03:33,000
听起来非常疯狂

1866
01:03:33,000 --> 01:03:35,000
对比较疯狂的一件事情

1867
01:03:35,000 --> 01:03:36,000
也不太合适

1868
01:03:36,000 --> 01:03:37,000
因为那些东西很多都没有屏幕

1869
01:03:37,000 --> 01:03:38,000
对吧

1870
01:03:38,000 --> 01:03:40,000
那么你这个系统加载那些什么显示

1871
01:03:40,000 --> 01:03:41,000
图标

1872
01:03:41,000 --> 01:03:43,000
就是故意对它都是完全没有意义的

1873
01:03:43,000 --> 01:03:44,000
对啊

1874
01:03:44,000 --> 01:03:45,000
你连个蓝屏都看不到

1875
01:03:45,000 --> 01:03:46,000
何必呢

1876
01:03:46,000 --> 01:03:49,000
所以说为了把这个 Windows 能够塞进那么小的

1877
01:03:49,000 --> 01:03:51,000
那么性能差的机器里面

1878
01:03:51,000 --> 01:03:53,000
当然同时也为了说简化这个结构

1879
01:03:53,000 --> 01:03:55,000
他们就出了这么一个 Windows 式的

1880
01:03:55,000 --> 01:03:57,000
这种所谓 IOT 版本

1881
01:03:57,000 --> 01:04:00,000
就简单的说就是把这个 Windows 的这个内核拿出来

1882
01:04:00,000 --> 01:04:01,000
跟 Linux 一样

1883
01:04:01,000 --> 01:04:02,000
然后再精简一下

1884
01:04:02,000 --> 01:04:03,000
把这个内核

1885
01:04:03,000 --> 01:04:06,000
加上一些比较简单的周边的工具

1886
01:04:06,000 --> 01:04:08,000
装到那些小小的这个 IOT 的这种

1887
01:04:08,000 --> 01:04:10,000
就是物联网的设备里面去

1888
01:04:10,000 --> 01:04:11,000
就可以实现说

1889
01:04:11,000 --> 01:04:13,000
哪怕我这个处理是弱小

1890
01:04:13,000 --> 01:04:14,000
我好歹也能跑一个 Windows 啊

1891
01:04:14,000 --> 01:04:16,000
但虽然是精简吧

1892
01:04:16,000 --> 01:04:22,000
对虽然这个念头在目前来看是比较奇怪

1893
01:04:22,000 --> 01:04:26,000
因为目前的 IOT 的这些既有产品的开发者

1894
01:04:26,000 --> 01:04:30,000
基本上全都采用 Linux 的各种形式的 Linux

1895
01:04:30,000 --> 01:04:32,000
被裁减过了

1896
01:04:32,000 --> 01:04:33,000
甚至 FreeBSD 之类的

1897
01:04:33,000 --> 01:04:36,000
所以就是用了这个 Linux 的这个东西来来来做它的操作

1898
01:04:36,000 --> 01:04:38,000
对但是这个 Windows 10

1899
01:04:38,000 --> 01:04:40,000
Windows 10 IOT core 版本

1900
01:04:40,000 --> 01:04:43,000
应该就是为了要抢占这一部分市场

1901
01:04:43,000 --> 01:04:45,000
嗯

1902
01:04:45,000 --> 01:04:48,000
所以它有一个所谓的什么是一个什么 Uphill battle

1903
01:04:48,000 --> 01:04:49,000
就是上山打仗

1904
01:04:49,000 --> 01:04:50,000
就是很难了

1905
01:04:50,000 --> 01:04:53,000
因为你现在市场上有这么一个免费

1906
01:04:53,000 --> 01:04:56,000
而且可以更加容易定制化

1907
01:04:56,000 --> 01:04:58,000
然后市场规模又非常大的

1908
01:04:58,000 --> 01:05:00,000
这么一个开源的产品

1909
01:05:00,000 --> 01:05:02,000
那你可能选那个

1910
01:05:02,000 --> 01:05:04,000
你可能选一个币源自己搞的

1911
01:05:04,000 --> 01:05:07,000
看是要来得起码快要好

1912
01:05:07,000 --> 01:05:08,000
也不一定

1913
01:05:08,000 --> 01:05:11,000
我觉得也许 Windows 10 它固然要打上山

1914
01:05:11,000 --> 01:05:12,000
它固然要打上山仗

1915
01:05:12,000 --> 01:05:14,000
但是你必须承认

1916
01:05:14,000 --> 01:05:18,000
这它面对的敌人并没有团结起来对付它

1917
01:05:18,000 --> 01:05:21,000
然后而且它有一个优势

1918
01:05:21,000 --> 01:05:26,000
就是如果你所有的产品都统一使用 Windows 10 IOT

1919
01:05:26,000 --> 01:05:29,000
core 这个版本的操修的话

1920
01:05:29,000 --> 01:05:31,000
那不管是管理还是

1921
01:05:31,000 --> 01:05:35,000
和其他的同样使用同一平台的产品交流

1922
01:05:35,000 --> 01:05:37,000
可能会更方便一点

1923
01:05:37,000 --> 01:05:40,000
而且我觉得以微软的支持

1924
01:05:40,000 --> 01:05:43,000
微软的技术能力做技术支持是会比较好

1925
01:05:43,000 --> 01:05:47,000
而且同时给你养活一大批顾问公司

1926
01:05:47,000 --> 01:05:51,000
就 Windows 10 之后

1927
01:05:51,000 --> 01:05:54,000
我们这个上面就是目前能

1928
01:05:54,000 --> 01:05:56,000
马上能用的还有一个挺好玩的东西

1929
01:05:56,000 --> 01:05:58,000
叫做 Visual Studio Code

1930
01:05:58,000 --> 01:05:59,000
对

1931
01:05:59,000 --> 01:06:01,000
就之前我们在 IT 功能和

1932
01:06:01,000 --> 01:06:03,000
Logit 大概就是提及了一下

1933
01:06:03,000 --> 01:06:04,000
但是并没有展开

1934
01:06:04,000 --> 01:06:07,000
因为觉得那个并不适合在那个节目讲

1935
01:06:07,000 --> 01:06:10,000
那这边就是我们这个编辑器是我们关注

1936
01:06:10,000 --> 01:06:12,000
编辑器还有什么键盘

1937
01:06:12,000 --> 01:06:14,000
这些电脑外设也是我们关注的重点

1938
01:06:14,000 --> 01:06:18,000
我不知道你有用 Visual Studio Code 这款编辑器没

1939
01:06:18,000 --> 01:06:19,000
有啊

1940
01:06:19,000 --> 01:06:25,000
就当时看到新闻就立刻下载试用了一下

1941
01:06:25,000 --> 01:06:29,000
就感觉还是挺蒙太奇的

1942
01:06:29,000 --> 01:06:31,000
就是你在 OS X 里面

1943
01:06:31,000 --> 01:06:33,000
在网站上面下载

1944
01:06:33,000 --> 01:06:35,000
从微软的网站上下载的一个东西

1945
01:06:35,000 --> 01:06:40,000
然后这个东西的结尾居然不是 MSI 或者是 EXE

1946
01:06:40,000 --> 01:06:45,000
它应该也是一个

1947
01:06:45,000 --> 01:06:47,000
这不重要

1948
01:06:47,000 --> 01:06:53,000
反正我把 Visual Studio 的图标拖进 application 文件夹的时候

1949
01:06:53,000 --> 01:06:55,000
感觉还是非常蒙太奇的

1950
01:06:55,000 --> 01:06:58,000
然后点了点还能跑

1951
01:06:58,000 --> 01:07:00,000
反正这是哪个世界的

1952
01:07:00,000 --> 01:07:01,000
点了点还能跑

1953
01:07:01,000 --> 01:07:02,000
非常 thrilling

1954
01:07:02,000 --> 01:07:06,000
怎么说呢

1955
01:07:06,000 --> 01:07:08,000
它还是一个

1956
01:07:08,000 --> 01:07:11,000
虽然挂了 Visual Studio 的名字

1957
01:07:11,000 --> 01:07:14,000
但它本质上还只是一个编辑器而已

1958
01:07:14,000 --> 01:07:18,000
对它是一个所谓的 editor

1959
01:07:18,000 --> 01:07:20,000
对它并不是一个

1960
01:07:20,000 --> 01:07:24,000
它并不是一个 editing environment

1961
01:07:24,000 --> 01:07:26,000
对就是这两个 1 是不一样的

1962
01:07:26,000 --> 01:07:28,000
一个是 editor 的 1

1963
01:07:28,000 --> 01:07:30,000
那个是 idee

1964
01:07:30,000 --> 01:07:31,000
那个 1 是指的 environment

1965
01:07:31,000 --> 01:07:32,000
就是机身开发环境

1966
01:07:32,000 --> 01:07:34,000
所以他们在定义上还是区别蛮大

1967
01:07:34,000 --> 01:07:36,000
这个是一个简单的写代码

1968
01:07:36,000 --> 01:07:38,000
可能会加上什么开发

1969
01:07:38,000 --> 01:07:40,000
调试项目管理

1970
01:07:40,000 --> 01:07:42,000
这些大大功能在里面一起的

1971
01:07:42,000 --> 01:07:43,000
对吧

1972
01:07:43,000 --> 01:07:44,000
对

1973
01:07:44,000 --> 01:07:46,000
然后 Visual Studio Code 的编辑器

1974
01:07:46,000 --> 01:07:50,000
它是基于这个叫做 Electron 的项目做的

1975
01:07:50,000 --> 01:07:54,000
Electron 简单来讲它就是用 node

1976
01:07:54,000 --> 01:07:55,000
或者说我们现在新版

1977
01:07:55,000 --> 01:07:58,000
它叫这个基于 io.js 这么一个引擎

1978
01:07:58,000 --> 01:08:00,000
加上这个 webkit

1979
01:08:00,000 --> 01:08:04,000
或者说 Chromium 这一套网页展示的东西

1980
01:08:04,000 --> 01:08:06,000
然后整个呈现出来的

1981
01:08:06,000 --> 01:08:09,000
跟你这个看起来是一个原生应用

1982
01:08:09,000 --> 01:08:12,000
但其实那里面所有的技术都是来自于 web 的

1983
01:08:12,000 --> 01:08:13,000
对其实是个浏览器

1984
01:08:13,000 --> 01:08:14,000
这是很

1985
01:08:14,000 --> 01:08:16,000
就如果你没有用过的话

1986
01:08:16,000 --> 01:08:18,000
可能是个比较神奇的一点

1987
01:08:18,000 --> 01:08:20,000
但其实这样的浏览

1988
01:08:20,000 --> 01:08:22,000
这样的编辑器此前已经有过很多例子了

1989
01:08:22,000 --> 01:08:25,000
比如说 Github 的 Atom

1990
01:08:25,000 --> 01:08:27,000
Github 的 Atom 也是基于 Electron

1991
01:08:27,000 --> 01:08:28,000
甚至说

1992
01:08:28,000 --> 01:08:30,000
Electron 之前叫什么来着

1993
01:08:30,000 --> 01:08:33,000
其实想不起来了

1994
01:08:33,000 --> 01:08:37,000
但之前它叫的名字跟 Atom 有点关系

1995
01:08:37,000 --> 01:08:38,000
Atom 是原子

1996
01:08:38,000 --> 01:08:39,000
所以它叫电子

1997
01:08:39,000 --> 01:08:40,000
它是组成

1998
01:08:40,000 --> 01:08:42,000
它一开始就是为了 Atom 而开发的

1999
01:08:42,000 --> 01:08:48,000
然后另外一个叫 Brackets 的编辑器也是类似的

2000
01:08:48,000 --> 01:08:54,000
基于 Chrome 和 Bracket 应该是 nodejs

2001
01:08:54,000 --> 01:08:56,000
做出来的一个编辑器

2002
01:08:57,000 --> 01:09:01,000
然后我觉得我适用 Virals Studio Code 最大的

2003
01:09:01,000 --> 01:09:03,000
惊讶之处是

2004
01:09:03,000 --> 01:09:06,000
它并不仅仅是把 Electron 换了一个

2005
01:09:06,000 --> 01:09:07,000
就是加了一个皮肤

2006
01:09:07,000 --> 01:09:10,000
然后加了什么 Intelligence

2007
01:09:10,000 --> 01:09:12,000
对它是有定制很多东西的

2008
01:09:12,000 --> 01:09:13,000
其实的功能

2009
01:09:13,000 --> 01:09:14,000
它可以 debug

2010
01:09:14,000 --> 01:09:17,000
我觉得这个是最让我 impress 的一件事情

2011
01:09:17,000 --> 01:09:19,000
就是你写了一个程序

2012
01:09:19,000 --> 01:09:24,000
你可以在 Virals Studio Code 里面调试

2013
01:09:24,000 --> 01:09:26,000
其实这就已经让它成了一个

2014
01:09:26,000 --> 01:09:32,000
达到一个叫什么编辑器以上 ID 位满的这么一个状态

2015
01:09:32,000 --> 01:09:38,000
大部分时候其他的编辑器都不会提供

2016
01:09:38,000 --> 01:09:39,000
呃

2017
01:09:39,000 --> 01:09:41,000
圆的码级别的调试功能

2018
01:09:41,000 --> 01:09:47,000
你最多最多能做的就是把那个 console 的输入输出

2019
01:09:47,000 --> 01:09:52,000
集成到你这个编辑器的一个一个子窗口里面

2020
01:09:52,000 --> 01:09:54,000
然后你在这个编辑器的子窗口里面做

2021
01:09:54,000 --> 01:09:55,000
比如说

2022
01:09:55,000 --> 01:09:56,000
呃

2023
01:09:56,000 --> 01:10:00,000
pydb 或者是 pydb 的这个呃 debug 功能

2024
01:10:00,000 --> 01:10:07,000
但是 Virals Studio Code 就把你呃我们最常用的那一批什么

2025
01:10:07,000 --> 01:10:08,000
单步之行啊

2026
01:10:08,000 --> 01:10:09,000
跳过啊

2027
01:10:09,000 --> 01:10:12,000
断点之类的全都集成在了这个编辑器里面

2028
01:10:12,000 --> 01:10:14,000
然后你在跑的时候可以用编辑器来 debug

2029
01:10:14,000 --> 01:10:17,000
我觉得这个是比较了不起的一件事情

2030
01:10:17,000 --> 01:10:18,000
OK

2031
01:10:18,000 --> 01:10:19,000
嗯

2032
01:10:19,000 --> 01:10:21,000
对其实我是要坦白一下

2033
01:10:21,000 --> 01:10:22,000
因为最近也比较忙

2034
01:10:22,000 --> 01:10:24,000
也没怎么用这个编辑器

2035
01:10:24,000 --> 01:10:25,000
所以没有太多的

2036
01:10:25,000 --> 01:10:26,000
深刻的感受

2037
01:10:26,000 --> 01:10:29,000
反正就是当时看第一眼就感觉演员还不错

2038
01:10:29,000 --> 01:10:32,000
嗯不知道你有用它做一些什么实际的事情吗

2039
01:10:32,000 --> 01:10:33,000
我最近我也挺忙

2040
01:10:33,000 --> 01:10:34,000
打开看看玩玩

2041
01:10:34,000 --> 01:10:35,000
但是我最近也挺忙

2042
01:10:35,000 --> 01:10:37,000
但是呃我在公司也装了

2043
01:10:37,000 --> 01:10:40,000
就是它在 Linux 上跑的效果也挺好

2044
01:10:40,000 --> 01:10:42,000
啊对他忘了说他是一个跨平台的啊

2045
01:10:42,000 --> 01:10:44,000
对对对这是他最重要的一点

2046
01:10:44,000 --> 01:10:48,000
就是他试图用呃这显示飞转的狼子野心吧

2047
01:10:48,000 --> 01:10:54,000
就想要用用这个东西来呃让各个平台开发者都可以呃

2048
01:10:54,000 --> 01:10:56,000
你错

2049
01:10:56,000 --> 01:11:00,000
对手手手先是为微软开发的东西

2050
01:11:00,000 --> 01:11:02,000
为你提供一个比较好的工具呢

2051
01:11:02,000 --> 01:11:05,000
你可以在闲暇之余给微软开发点东西

2052
01:11:05,000 --> 01:11:07,000
这是他们的目的

2053
01:11:07,000 --> 01:11:11,000
然后对然后从呃网上的反应来看

2054
01:11:11,000 --> 01:11:14,000
大家还是比较怎么说

2055
01:11:14,000 --> 01:11:16,000
我觉得大部分人都是叫好的吧

2056
01:11:16,000 --> 01:11:23,000
就呃他们官方在 5 月 13 日就是呃录音的前一天也贴了一个 blog

2057
01:11:23,000 --> 01:11:24,000
就说

2058
01:11:24,000 --> 01:11:27,000
呃他们收到了反响的好评如潮

2059
01:11:27,000 --> 01:11:31,000
呃他们在推特上有一个扣的账号

2060
01:11:31,000 --> 01:11:36,000
然后这个账号在现在已经有了 14.3 k 的 follow

2061
01:11:36,000 --> 01:11:41,000
然后高了一对他们闷声的 4.8 k 次

2062
01:11:41,000 --> 01:11:43,000
呃太恐怖了

2063
01:11:43,000 --> 01:11:47,000
对啊这他们那呃再过了一周多一点吧

2064
01:11:47,000 --> 01:11:52,000
就已经嗯对然后 virus 的 code 的右下角有一个小笑脸

2065
01:11:52,000 --> 01:11:53,000
如果你点一下的话

2066
01:11:53,000 --> 01:11:59,000
你可以呃跟他们回报一个 bug 或者是说哎你们做的好

2067
01:11:59,000 --> 01:12:01,000
就是有一个笑脸有一个哭脸

2068
01:12:01,000 --> 01:12:02,000
呃如果你点哭脸的话

2069
01:12:02,000 --> 01:12:04,000
就可以写一个 bug

2070
01:12:04,000 --> 01:12:05,000
如果你点笑脸的话

2071
01:12:05,000 --> 01:12:07,000
就是说哎呦夸你们写的好

2072
01:12:07,000 --> 01:12:11,000
然后他们目前为止收到了 6000 个 send smile

2073
01:12:11,000 --> 01:12:17,000
就是有至少有 6000 个 smile

2074
01:12:17,000 --> 01:12:19,000
那个功能叫做 send smile

2075
01:12:19,000 --> 01:12:21,000
然后他们收到了 6000 个

2076
01:12:21,000 --> 01:12:22,000
但是他们没有收到 6000 个 smile

2077
01:12:22,000 --> 01:12:27,000
但是他们没有透露说收到了多少个呃 send not smile

2078
01:12:27,000 --> 01:12:29,000
send crying

2079
01:12:29,000 --> 01:12:34,000
但 6000 个至少有 8000 个对不止吧 6 万个

2080
01:12:34,000 --> 01:12:37,000
哈哈又黑人家

2081
01:12:37,000 --> 01:12:40,000
没有没有很因为这个功能就是这个编辑器的功能

2082
01:12:40,000 --> 01:12:42,000
他版本号是 0.7 吧

2083
01:12:42,000 --> 01:12:43,000
没记错的话

2084
01:12:43,000 --> 01:12:46,000
就编辑器的功能还是缺很多的

2085
01:12:46,000 --> 01:12:51,000
比如说嗯我记得呃有人说在里面输入中文有问题

2086
01:12:51,000 --> 01:12:55,000
就中文输中中文输入法在 code 里面是不能工作的

2087
01:12:55,000 --> 01:12:58,000
但是我有点怀疑就是会有点奇怪

2088
01:12:58,000 --> 01:13:02,000
就是你在一个编辑代码编辑器里面输入中文干嘛

2089
01:13:02,000 --> 01:13:08,000
嗯哦对提示有些那个写那个注释会用中文写吧

2090
01:13:08,000 --> 01:13:10,000
嗯注释用中文就挺二的

2091
01:13:10,000 --> 01:13:15,000
不过但是国内很多的那个英文写不好

2092
01:13:15,000 --> 01:13:16,000
那就用中文写了

2093
01:13:16,000 --> 01:13:18,000
国内我觉得这个还是蛮蛮常见的

2094
01:13:18,000 --> 01:13:20,000
就在外面就只能写拼音更看得更痛苦啊

2095
01:13:20,000 --> 01:13:27,000
这让我想起了之前说什么 kd 有一次版本更新是呃

2096
01:13:27,000 --> 01:13:30,000
从现在开始代码库里面终于没有德语了

2097
01:13:30,000 --> 01:13:33,000
有那种类似的感觉

2098
01:13:33,000 --> 01:13:36,000
哈哈哈哈这个也是黑的漂亮

2099
01:13:36,000 --> 01:13:42,000
呀然后呃在 user voice 就是一个 feature request 的网站上面

2100
01:13:42,000 --> 01:13:46,000
他们已经收到了 660 个 feature request

2101
01:13:46,000 --> 01:13:49,000
嗯然后有呃

2102
01:13:49,000 --> 01:13:52,000
他们有一个所谓的 insiders program

2103
01:13:52,000 --> 01:13:56,000
就是让你可以更快的获得新的版本

2104
01:13:56,000 --> 01:14:02,000
或者是更快的得到新的呃新闻更新的这么一个 program

2105
01:14:02,000 --> 01:14:08,000
他们在呃短时间内已经收到 1300 个呃用户的注册

2106
01:14:08,000 --> 01:14:12,000
然后在 stack overflow 上也已经有了和 code 相关的 195 个问题

2107
01:14:12,000 --> 01:14:17,000
啊所有这些都是在仅仅一周多年的时间里面出现的

2108
01:14:17,000 --> 01:14:19,000
所以反响还是很重要的

2109
01:14:19,000 --> 01:14:20,000
还是不错的

2110
01:14:20,000 --> 01:14:21,000
对

2111
01:14:21,000 --> 01:14:22,000
ok

2112
01:14:22,000 --> 01:14:23,000
好

2113
01:14:23,000 --> 01:14:25,000
那个关于那个 vichu studio code

2114
01:14:25,000 --> 01:14:27,000
我们就差不多聊到这儿

2115
01:14:27,000 --> 01:14:31,000
然后之后我们如果能够用它写什么东西的话

2116
01:14:31,000 --> 01:14:32,000
再来跟大家回报

2117
01:14:32,000 --> 01:14:33,000
对对

2118
01:14:33,000 --> 01:14:36,000
他的毕竟现在还是一个相对比较粗浅的认识

2119
01:14:36,000 --> 01:14:40,000
然后呃还是需要长期的使用才有结果

2120
01:14:40,000 --> 01:14:43,000
但是我觉得短期内应该不会发生这件事情

2121
01:14:43,000 --> 01:14:44,000
就不着急

2122
01:14:44,000 --> 01:14:45,000
慢慢等吧

2123
01:14:45,000 --> 01:14:46,000
不管怎么说

2124
01:14:46,000 --> 01:14:48,000
就是这些厂商们能够开发跨平台

2125
01:14:48,000 --> 01:14:49,000
是很重要的

2126
01:14:49,000 --> 01:14:52,000
因为他们的开发工具对程序来说其实是一个解放

2127
01:14:52,000 --> 01:14:55,000
就是你可以选择自己喜欢的开发平台

2128
01:14:55,000 --> 01:14:57,000
用自己喜欢的开发语言

2129
01:14:57,000 --> 01:14:59,000
呃开发自己喜欢的东西

2130
01:14:59,000 --> 01:15:04,000
就比如说呃之前我一直说 cshap 是我最喜欢的语言

2131
01:15:04,000 --> 01:15:08,000
但是呃在 mac 上面就没有机缘去开发 cshap 的工具

2132
01:15:08,000 --> 01:15:10,000
呃开发 cshap 的程序

2133
01:15:10,000 --> 01:15:11,000
因为根本没有工具

2134
01:15:11,000 --> 01:15:15,000
而现在呃巴尔默的中世纪黑暗的中世纪过了之后

2135
01:15:15,000 --> 01:15:18,000
这样的机会似乎开始出现在眼前了

2136
01:15:18,000 --> 01:15:20,000
我觉得这无论如何是一件好事

2137
01:15:20,000 --> 01:15:23,000
然后反过来其实也是一样的

2138
01:15:23,000 --> 01:15:24,000
就是这一次

2139
01:15:24,000 --> 01:15:35,000
build 最受欢迎的 session 之一就是用 window 呃用 vizual studio 2005 编译 object c 程序

2140
01:15:35,000 --> 01:15:42,000
就是如果你是一个呃想要给 iphone 开发程序的人

2141
01:15:42,000 --> 01:15:45,000
然后你只有 iphone 和 windows 电脑

2142
01:15:45,000 --> 01:15:48,000
那从 window 呃从 vizual studio 2005

2143
01:15:48,000 --> 01:15:52,000
从 2015 开始你也可以用 vizual studio 给 iphone 开发程序了

2144
01:15:52,000 --> 01:15:54,000
这也是一件嗯

2145
01:15:54,000 --> 01:15:58,000
就是反过来也是一件很好事嘛

2146
01:15:58,000 --> 01:16:00,000
我我还没用过那个东西

2147
01:16:00,000 --> 01:16:03,000
但我现在也我也不做这个移动开发不知道

2148
01:16:03,000 --> 01:16:08,000
但是如果说因为因为大家对那个 viz studio 的评价是不错的嘛

2149
01:16:08,000 --> 01:16:10,000
然后 xcode 就是属于那个好看

2150
01:16:10,000 --> 01:16:12,000
但是可能不是那么好用的时候

2151
01:16:12,000 --> 01:16:17,000
到时候最最 ironic 最讽刺的就是

2152
01:16:17,000 --> 01:16:21,000
你在为 iOS 开发最好的体验是用 window

2153
01:16:21,000 --> 01:16:23,000
vizual studio 这个就搞笑了

2154
01:16:23,000 --> 01:16:24,000
这很有可能是真的

2155
01:16:24,000 --> 01:16:27,000
就好像呃

2156
01:16:27,000 --> 01:16:33,000
intelligent 的那个厂商 jetbrains 出了一个 object c 的编译器叫

2157
01:16:33,000 --> 01:16:35,000
叫什么我已经忘了

2158
01:16:35,000 --> 01:16:38,000
但呃

2159
01:16:38,000 --> 01:16:40,000
就是 object code 之类的

2160
01:16:40,000 --> 01:16:43,000
呃那个东西用起来就已经比 xcode 要要舒服很多了

2161
01:16:43,000 --> 01:16:45,000
但是呃

2162
01:16:45,000 --> 01:16:47,000
他一直没有

2163
01:16:47,000 --> 01:16:48,000
推广起来吧

2164
01:16:48,000 --> 01:16:54,000
但很大一个原因是他试图在 os 10 上和 xcode 的争锋

2165
01:16:54,000 --> 01:16:55,000
这还是比较吃亏的

2166
01:16:55,000 --> 01:16:59,000
但是像 vizual studio 2015 他目前还是只有 windows 版本

2167
01:16:59,000 --> 01:17:03,000
呃基本上你在 windows 上开发 xcode 的程序

2168
01:17:03,000 --> 01:17:05,000
开发 object c 的程序

2169
01:17:05,000 --> 01:17:10,000
至迄只有呃之前只有呃那个那个工具叫什么

2170
01:17:10,000 --> 01:17:11,000
x 开头呢

2171
01:17:11,000 --> 01:17:13,000
叫呃

2172
01:17:13,000 --> 01:17:16,000
呃应该是叫 zamarine

2173
01:17:16,000 --> 01:17:17,000
没念

2174
01:17:17,000 --> 01:17:18,000
没错了

2175
01:17:18,000 --> 01:17:19,000
ok 那样一个工具

2176
01:17:19,000 --> 01:17:23,000
然后现在还是可以在呃 vizual studio 2015 里面做这件事情

2177
01:17:23,000 --> 01:17:30,000
所以我觉得可能这样会无形中给很多 iOS 开发者呃 wanna be

2178
01:17:30,000 --> 01:17:33,000
呃开呃打开这扇大门

2179
01:17:33,000 --> 01:17:36,000
至少不用买 mac 了对吧

2180
01:17:36,000 --> 01:17:39,000
对而且至少不用忍受 xcode 不是有句

2181
01:17:39,000 --> 01:17:41,000
哎等等等等他那个只能编译

2182
01:17:41,000 --> 01:17:42,000
他能提交吗

2183
01:17:42,000 --> 01:17:43,000
不能提交吧

2184
01:17:43,000 --> 01:17:46,000
你你提交到那个 app store 还是得通过 xcode 的在做对吧

2185
01:17:46,000 --> 01:17:48,000
呃

2186
01:17:48,000 --> 01:17:51,000
如果他能编译出一个 ipa 来就可以啊

2187
01:17:51,000 --> 01:17:52,000
因为

2188
01:17:52,000 --> 01:17:56,000
提交 app 这件事情不是可以在网页上做的

2189
01:17:57,000 --> 01:17:59,000
啊我记得是可以啊

2190
01:17:59,000 --> 01:18:02,000
就是并不一定要在 xcode 里面验证

2191
01:18:02,000 --> 01:18:05,000
然后通过 xcode 的那个 archive 管理器提交

2192
01:18:06,000 --> 01:18:09,000
嗯好那如果如果真的这样了

2193
01:18:09,000 --> 01:18:15,000
我觉得可能很可能这个什么苹果的律师就要给未来律师寄这个文件了

2194
01:18:15,000 --> 01:18:19,000
或者苹果会使会议耍一些小手段让呃

2195
01:18:19,000 --> 01:18:22,000
用不了用户只能通过 xcode 来提交程序

2196
01:18:22,000 --> 01:18:23,000
但我觉得这样太二了吧

2197
01:18:23,000 --> 01:18:25,000
何必呢这不是

2198
01:18:26,000 --> 01:18:27,000
哎呀

2199
01:18:27,000 --> 01:18:30,000
不过这个我觉得还是有一定的意义啊

2200
01:18:30,000 --> 01:18:33,000
因为这样他 mac 的销量就会受到很大影响

2201
01:18:33,000 --> 01:18:35,000
你现在知道很多这种创业团队吗

2202
01:18:35,000 --> 01:18:41,000
他就纯粹是为了要开发这个啊 mac 或者是 iphone 的应用

2203
01:18:41,000 --> 01:18:43,000
他才给这个开发就才招聘使用的嘛

2204
01:18:43,000 --> 01:18:49,000
然后就如果说这一块这块都完全没必要

2205
01:18:49,000 --> 01:18:52,000
他们就完全可以用 windows 就是 vizio studio 去搞定了

2206
01:18:52,000 --> 01:18:54,000
那就甚至连 mac 都不需要买了

2207
01:18:54,000 --> 01:18:58,000
你要按照乔布斯那个德行肯定是不会东西这种事情发生的

2208
01:18:58,000 --> 01:19:00,000
我觉得说的也对

2209
01:19:00,000 --> 01:19:04,000
然后呃当然 windows 呃 windows 用呃 vizio studio 用户还有另外一个选择

2210
01:19:04,000 --> 01:19:09,000
就是用 c shop 开发跨平台的移动 app

2211
01:19:09,000 --> 01:19:11,000
就是你用 c shop 写一个移动 app

2212
01:19:11,000 --> 01:19:13,000
他可以自动被编译出来

2213
01:19:13,000 --> 01:19:18,000
然后把这个移动 app 转移成呃 iphoneandroid 和 windowsphone 的程序

2214
01:19:18,000 --> 01:19:20,000
这个也是就等于是你

2215
01:19:20,000 --> 01:19:25,000
如果你不是说只希望在 windows 上为 iphone 开发程序的话

2216
01:19:25,000 --> 01:19:31,000
你甚至可以或者说也许更多的人会选择使用 c shop 来开发跨平台的程序

2217
01:19:31,000 --> 01:19:38,000
然后让呃 vizio studio 去操心把 c shop 转移成呃平台对应的目标源

2218
01:19:38,000 --> 01:19:41,000
这点这这这点苦差事

2219
01:19:41,000 --> 01:19:43,000
呃对有一个 session 就是这样的

2220
01:19:43,000 --> 01:19:44,000
当然我没看完

2221
01:19:44,000 --> 01:19:52,000
但是一开始一开头基本上那个演示员就呃试图呃运行一个 demo

2222
01:19:52,000 --> 01:19:56,000
这个 demo 编译之后可以同时跑在 windowsphoneiphone 和安装上

2223
01:19:56,000 --> 01:19:58,000
然后他是用 c shop 写的

2224
01:19:58,000 --> 01:20:06,000
然后这一次 microsoft build 上面还展示了新的 direct directive x 12

2225
01:20:06,000 --> 01:20:09,000
就是嗯这可能也是一个比较重要的事情吧

2226
01:20:09,000 --> 01:20:12,000
就是因为至少我不知道你至少我

2227
01:20:12,000 --> 01:20:16,000
我一直心心念念想要传一台 windows 机器

2228
01:20:16,000 --> 01:20:19,000
就是因为好多游戏是只能在 windows 上跑的

2229
01:20:19,000 --> 01:20:23,000
然后嗯微软也是延续的这个优良传统吧

2230
01:20:23,000 --> 01:20:28,000
就是一定要向大家展示 windows 是一个多么适合做游戏的平台

2231
01:20:28,000 --> 01:20:35,000
呃尤其是 windows 这一套 3 d 呃 3 d 库吧 3 d 图形库 direct x 12

2232
01:20:35,000 --> 01:20:40,000
然后他不是请到了呃 square 埃尼克斯呃展示了这个图形库吧

2233
01:20:40,000 --> 01:20:41,000
呃展示了这个图形库呃 x 12 然后他不是请到了呃 square 埃尼克斯呃展示了这个图形库吧

2234
01:20:41,000 --> 01:20:43,000
呃展示了这个图形库呃 x 12

2235
01:20:43,000 --> 01:20:48,000
呃展示了这个图形库呃 x 12

2236
01:20:48,000 --> 01:20:50,000
쪽에在 sought which

2237
01:20:51,000 --> 01:20:55,000
然后他展示了一个一开始 我以为是一段 cg

2238
01:20:55,000 --> 01:21:01,000
然后嗯嗯呃他把那个反正场景就是一个女人趴在电视上在哭

2239
01:21:01,000 --> 01:21:03,000
然后我就想 这我怎么看的

2240
01:21:03,000 --> 01:21:05,000
然后呃播回来之后 他说大家以为刚才这是 cg 嘛

2241
01:21:05,000 --> 01:21:06,000
其实刚才这是游戏画面

2242
01:21:06,000 --> 01:21:08,000
然后我就惊呆了

2243
01:21:08,000 --> 01:21:09,000
因为那个

2244
01:21:09,000 --> 01:21:11,000
就是实景不是预先宣传好的录像

2245
01:21:11,000 --> 01:21:12,000
跟 CG 一模一样

2246
01:21:12,000 --> 01:21:14,000
但是他播到一半的时候

2247
01:21:14,000 --> 01:21:15,000
他说好

2248
01:21:15,000 --> 01:21:17,000
现在我要把它转成 manual 模式

2249
01:21:17,000 --> 01:21:20,000
然后整个场景就停下来了

2250
01:21:20,000 --> 01:21:22,000
然后他开始移动镜头

2251
01:21:22,000 --> 01:21:24,000
我觉得那一刹那

2252
01:21:24,000 --> 01:21:25,000
真的是挺震撼的

2253
01:21:25,000 --> 01:21:28,000
就你眼前看到的一个像

2254
01:21:28,000 --> 01:21:29,000
有点像什么的

2255
01:21:29,000 --> 01:21:31,000
有点那个惊喜程度

2256
01:21:31,000 --> 01:21:34,000
非常接近之前的

2257
01:21:34,000 --> 01:21:36,000
最终幻想的那个电影版

2258
01:21:36,000 --> 01:21:37,000
我不知道你看过没有

2259
01:21:37,000 --> 01:21:39,000
就是非常

2260
01:21:39,000 --> 01:21:39,000
我知道

2261
01:21:39,000 --> 01:21:41,000
因为他要渲染那个长头发

2262
01:21:41,000 --> 01:21:41,000
那个是很困难的

2263
01:21:41,000 --> 01:21:45,000
然后他开始转镜头的时候

2264
01:21:45,000 --> 01:21:47,000
你会发现这个里面

2265
01:21:47,000 --> 01:21:50,000
所有的场景都可以实时渲染成

2266
01:21:50,000 --> 01:21:52,000
非常接近于现在的

2267
01:21:52,000 --> 01:21:54,000
最顶级的 CG 的程度

2268
01:21:54,000 --> 01:21:58,000
然后包括每根头发

2269
01:21:58,000 --> 01:21:59,000
都是用多边形

2270
01:21:59,000 --> 01:22:00,000
每一根头发

2271
01:22:00,000 --> 01:22:02,000
就是这个人物头上

2272
01:22:02,000 --> 01:22:03,000
可能有几千根头发

2273
01:22:03,000 --> 01:22:04,000
三千反档丝

2274
01:22:04,000 --> 01:22:05,000
每一根头发

2275
01:22:05,000 --> 01:22:07,000
都是用那个多边形渲染而成

2276
01:22:07,000 --> 01:22:09,000
然后光的效果

2277
01:22:09,000 --> 01:22:10,000
照在上面非常非常好

2278
01:22:10,000 --> 01:22:16,000
然后他宣称说现在的效果

2279
01:22:16,000 --> 01:22:17,000
performance 应该是

2280
01:22:17,000 --> 01:22:21,000
DirectX 11 的 6 到 10 倍

2281
01:22:21,000 --> 01:22:24,000
所以还是相当可观的一个提升

2282
01:22:24,000 --> 01:22:28,000
就就就其实最主要的原因就是说

2283
01:22:28,000 --> 01:22:29,000
就这么理解

2284
01:22:29,000 --> 01:22:33,000
就是他的这个 overhead 少了嘛

2285
01:22:33,000 --> 01:22:36,000
就更加接近于硬件本身能够提供的性能

2286
01:22:36,000 --> 01:22:36,000
对

2287
01:22:38,000 --> 01:22:39,000
这个其实是一个挺重要的

2288
01:22:39,000 --> 01:22:41,000
就几个厂商都在做同样的事情

2289
01:22:41,000 --> 01:22:42,000
首先

2290
01:22:42,000 --> 01:22:44,000
可能比较早的是那个

2291
01:22:44,000 --> 01:22:47,000
就起码概念上他先做这个就是苹果那个叫什么

2292
01:22:47,000 --> 01:22:48,000
Metal

2293
01:22:48,000 --> 01:22:49,000
Metal 吧

2294
01:22:49,000 --> 01:22:51,000
对 Metal 主要是贴近移动端的

2295
01:22:51,000 --> 01:22:53,000
对但他这个只有 Metal 只有

2296
01:22:53,000 --> 01:22:56,000
对 Metal 现在好像只有在 iOS 上才有的

2297
01:22:56,000 --> 01:23:01,000
然后后来是那个 AMD 出了一个叫什么

2298
01:23:01,000 --> 01:23:03,000
叫

2299
01:23:03,000 --> 01:23:04,000
名字我一下想不起来了

2300
01:23:04,000 --> 01:23:07,000
因为但是他们也在做类似的事情

2301
01:23:07,000 --> 01:23:07,000
就是说

2302
01:23:07,000 --> 01:23:09,000
呃

2303
01:23:09,000 --> 01:23:15,000
就怎么样能够更好的暴露出这个这个显卡原生的这个硬件的性能

2304
01:23:15,000 --> 01:23:18,000
然后减少中间的这个增加的额外的负担

2305
01:23:18,000 --> 01:23:19,000
是 Mental 吧

2306
01:23:19,000 --> 01:23:19,000
还是

2307
01:23:21,000 --> 01:23:23,000
你说啊对那个 MD 那叫 Mental

2308
01:23:23,000 --> 01:23:25,000
对对对 Mental 就挺像的

2309
01:23:25,000 --> 01:23:25,000
就一个 Metal

2310
01:23:25,000 --> 01:23:26,000
对 Metal

2311
01:23:26,000 --> 01:23:27,000
闭闷的也是

2312
01:23:27,000 --> 01:23:27,000
对

2313
01:23:28,000 --> 01:23:30,000
对没错没错

2314
01:23:30,000 --> 01:23:30,000
呃

2315
01:23:30,000 --> 01:23:34,000
然后但毕竟就微软这个他做这个还是有优势的

2316
01:23:34,000 --> 01:23:38,000
因为之前有很多有想上还是走这个什么 DirectX 这条线的

2317
01:23:38,000 --> 01:23:39,000
对

2318
01:23:39,000 --> 01:23:43,000
那么他自己自己做一个升级版可能还是有很多会非常常会就跟进

2319
01:23:43,000 --> 01:23:45,000
然后这样在发行上会有好处嘛

2320
01:23:45,000 --> 01:23:46,000
但是我不太清楚啊

2321
01:23:46,000 --> 01:23:55,000
现在这个 DirectX 和这个 OpenGL 他们之间的这个这个有谁比谁领先很明显吗

2322
01:23:55,000 --> 01:23:56,000
有这种样的区别吗

2323
01:23:56,000 --> 01:23:57,000
呃

2324
01:23:57,000 --> 01:24:00,000
我看到的说法是如果你不想让自己的脑袋爆掉的话

2325
01:24:00,000 --> 01:24:01,000
就选择 DX

2326
01:24:01,000 --> 01:24:03,000
DirectX 比较好

2327
01:24:03,000 --> 01:24:05,000
就从一个开发者的角度来看

2328
01:24:05,000 --> 01:24:07,000
如果你不打算支持多平台

2329
01:24:07,000 --> 01:24:09,000
然后你又想要

2330
01:24:09,000 --> 01:24:10,000
选择比较好的文档

2331
01:24:10,000 --> 01:24:12,000
那选择 DX 是比较好

2332
01:24:12,000 --> 01:24:12,000
嗯

2333
01:24:13,000 --> 01:24:16,000
就是体开发体验上是 DirectX 这个系列更好

2334
01:24:16,000 --> 01:24:19,000
因为毕竟是单一这个呃

2335
01:24:19,000 --> 01:24:20,000
就比较新了

2336
01:24:20,000 --> 01:24:23,000
而且是说历史包袱相对较少

2337
01:24:23,000 --> 01:24:26,000
OpenGL 的我看他们说这个主要的问题就是讲呃

2338
01:24:26,000 --> 01:24:28,000
因为这个历史包袱比较沉重

2339
01:24:28,000 --> 01:24:30,000
各种各种各种那种呃

2340
01:24:30,000 --> 01:24:33,000
就是几套 API 都是在同一个版本里面存在

2341
01:24:33,000 --> 01:24:35,000
没有说这 Deprecate 的这种情况

2342
01:24:35,000 --> 01:24:36,000
那导致就开发者看完

2343
01:24:36,000 --> 01:24:38,000
那就很辛苦啊

2344
01:24:38,000 --> 01:24:38,000
你说

2345
01:24:38,000 --> 01:24:41,000
你明明可以用一个更好的方式实现了

2346
01:24:41,000 --> 01:24:42,000
但是你可能就是没翻到那一页

2347
01:24:42,000 --> 01:24:43,000
因为实在太长了

2348
01:24:43,000 --> 01:24:46,000
你看了一个比较原始或者落后的方案来实现

2349
01:24:46,000 --> 01:24:49,000
那可能对性能也不好啊

2350
01:24:49,000 --> 01:24:50,000
这个呃

2351
01:24:50,000 --> 01:24:52,000
你的开发难度也大了

2352
01:24:52,000 --> 01:24:52,000
当然了

2353
01:24:52,000 --> 01:24:55,000
最好处就是说你可以在多个平台运行嘛

2354
01:24:55,000 --> 01:24:59,000
你现在可以比较就不需要怎么太改

2355
01:24:59,000 --> 01:25:02,000
就可以兼容多个这个呃

2356
01:25:02,000 --> 01:25:03,000
这个这个叫什么呃

2357
01:25:03,000 --> 01:25:05,000
平台的类型也好

2358
01:25:05,000 --> 01:25:06,000
对吧

2359
01:25:06,000 --> 01:25:07,000
游戏手机端的也是我是有问就这样的

2360
01:25:07,000 --> 01:25:07,000
对吧

2361
01:25:07,000 --> 01:25:08,000
对吧

2362
01:25:08,000 --> 01:25:08,000
对吧

2363
01:25:08,000 --> 01:25:10,000
那个还是一个什么 yes 啊

2364
01:25:10,000 --> 01:25:14,000
然后这个桌面端也有各种的不同机型

2365
01:25:14,000 --> 01:25:18,000
好像那个什么就是 ps 4 和 xbox 啊

2366
01:25:18,000 --> 01:25:19,000
都是可以支持这种吧

2367
01:25:21,000 --> 01:25:21,000
你说对啊

2368
01:25:21,000 --> 01:25:26,000
还是还是还是那个欧文就要没错

2369
01:25:27,000 --> 01:25:29,000
对是差不多差不多是这个意思

2370
01:25:29,000 --> 01:25:31,000
对所以就是啊

2371
01:25:31,000 --> 01:25:32,000
开发者是要取舍一下的

2372
01:25:32,000 --> 01:25:35,000
你是要要市场呢

2373
01:25:35,000 --> 01:25:36,000
要体验呢

2374
01:25:36,000 --> 01:25:37,000
还是怎么怎么的

2375
01:25:37,000 --> 01:25:37,000
没错

2376
01:25:37,000 --> 01:25:38,000
对

2377
01:25:38,000 --> 01:25:43,000
然后当然我印象里面之前有过一个呃

2378
01:25:43,000 --> 01:25:49,000
就是应该是 n 厂的那个 NVIDIA 厂商的开发者

2379
01:25:49,000 --> 01:25:54,000
在一个论坛上面写了一篇非常长的倒苦水的帖子

2380
01:25:54,000 --> 01:25:59,000
就说那些用 DX 的人全都不知道怎么样正确的使用 API

2381
01:25:59,000 --> 01:26:06,000
然后有些 blockbuster 级别的那个呃大作都非常非常的蠢

2382
01:26:06,000 --> 01:26:07,000
就是

2383
01:26:07,000 --> 01:26:13,000
没有没有以合适的方式来使用 API 使得游戏的那个性能非常非常的弱

2384
01:26:13,000 --> 01:26:21,000
然后最后有玩家会怪到那个显卡头上说这个显卡的功能那个不够不够不够强健什么的

2385
01:26:21,000 --> 01:26:27,000
然后他们对对对他们说他们 literally 每一代的那个 driver

2386
01:26:27,000 --> 01:26:31,000
呃你你你你如果你好奇过呢

2387
01:26:31,000 --> 01:26:33,000
一个 driver 要下个三五百张

2388
01:26:33,000 --> 01:26:34,000
那是在下什么

2389
01:26:34,000 --> 01:26:36,000
其实里面都是给每个游戏的补丁

2390
01:26:36,000 --> 01:26:37,000
就是

2391
01:26:37,000 --> 01:26:40,000
检测到说原来你是在运行这个游戏好

2392
01:26:40,000 --> 01:26:42,000
这个游戏里面有这个部分写的非常个蠢

2393
01:26:42,000 --> 01:26:44,000
那他每当运行到这部分的时候

2394
01:26:44,000 --> 01:26:50,000
我们就切换成我们所谓他提供的正确的比较好的这个 API 调用了

2395
01:26:50,000 --> 01:26:53,000
然后整个游戏的 performance 立刻就上去了

2396
01:26:54,000 --> 01:26:55,000
啊

2397
01:26:55,000 --> 01:26:59,000
这个显卡厂商也是不容易过的

2398
01:26:59,000 --> 01:26:59,000
挺惨

2399
01:27:02,000 --> 01:27:03,000
我这也是就说什么

2400
01:27:03,000 --> 01:27:05,000
像苹果这种啊

2401
01:27:05,000 --> 01:27:06,000
软硬合一的厂商他就有好处啊

2402
01:27:06,000 --> 01:27:06,000
就有好处啊

2403
01:27:06,000 --> 01:27:07,000
就有好处啊

2404
01:27:07,000 --> 01:27:08,000
对

2405
01:27:08,000 --> 01:27:09,000
那我卖卖头

2406
01:27:09,000 --> 01:27:10,000
我出了就出了

2407
01:27:10,000 --> 01:27:13,000
我开发者我一个大没讲

2408
01:27:13,000 --> 01:27:14,000
我这个这个很爽啊

2409
01:27:14,000 --> 01:27:16,000
应该我给你搞得搞搞好

2410
01:27:16,000 --> 01:27:18,000
你再用这个体验就是不错的

2411
01:27:18,000 --> 01:27:20,000
当然可能问的是做不到那个微软做不到那么好

2412
01:27:20,000 --> 01:27:22,000
但是在突然求其次吧

2413
01:27:22,000 --> 01:27:23,000
我起码 API 我可以同意

2414
01:27:23,000 --> 01:27:25,000
OK 听比较好的

2415
01:27:25,000 --> 01:27:28,000
至于后面这个跟意见底层打交道怎么去折腾

2416
01:27:28,000 --> 01:27:30,000
反正我把这个脏活累活干了吧

2417
01:27:30,000 --> 01:27:32,000
你们上面爽就好了

2418
01:27:32,000 --> 01:27:36,000
但是前天就是你们得接着用我这个 prateri 的系统

2419
01:27:36,000 --> 01:27:37,000
对

2420
01:27:37,000 --> 01:27:39,000
所以嗯

2421
01:27:39,000 --> 01:27:42,000
如果人两个巨头能够取长补短就好

2422
01:27:44,000 --> 01:27:46,000
但是现实总是不那么美好的

2423
01:27:46,000 --> 01:27:47,000
对啊

2424
01:27:47,000 --> 01:27:51,000
所以不指望他们这次还发布了那个也不叫发布

2425
01:27:51,000 --> 01:27:53,000
就算是一个名字吧

2426
01:27:53,000 --> 01:27:57,000
就是那个传说中的取代 IE 的浏览器

2427
01:27:57,000 --> 01:27:57,000
有 prateri

2428
01:27:57,000 --> 01:27:58,000
spartan

2429
01:27:58,000 --> 01:28:03,000
这个呃斯巴坦斯巴达

2430
01:28:03,000 --> 01:28:06,000
spartan 就是那个古希腊的城邦吗

2431
01:28:06,000 --> 01:28:06,000
斯巴达

2432
01:28:06,000 --> 01:28:07,000
达人吗

2433
01:28:07,000 --> 01:28:10,000
对对对对对这个你有看吗

2434
01:28:10,000 --> 01:28:14,000
这样我在那个那个什么那个爱提供的那边大概聊了下

2435
01:28:14,000 --> 01:28:16,000
但是也是因为没有用到吗

2436
01:28:16,000 --> 01:28:17,000
也不知道到底是个什么样的

2437
01:28:17,000 --> 01:28:18,000
你说看是什么意思

2438
01:28:18,000 --> 01:28:24,000
看这个就是有你有他应该有那个你你有用他的 beta 版本吗

2439
01:28:24,000 --> 01:28:26,000
没有我只看了一个他的展示 demo

2440
01:28:27,000 --> 01:28:30,000
OK 我觉得我印象最深的就是爱只做的非常漂亮

2441
01:28:32,000 --> 01:28:36,000
呃漂亮是指哪具体指哪些方面

2442
01:28:36,000 --> 01:28:36,000
就是他

2443
01:28:36,000 --> 01:28:41,000
把整个 UI 的呃不仅仅是扁平化

2444
01:28:41,000 --> 01:28:45,000
而且他把 UI 呃去 UI 化

2445
01:28:45,000 --> 01:28:49,000
就是你看不到非常明显的比如一个按钮

2446
01:28:49,000 --> 01:28:54,000
然后这个按钮基本上就只有一个一像素能宽的一个边缘

2447
01:28:54,000 --> 01:29:02,000
然后其他所有东西都是这个网页的预览图或者比如说你你呃他那个浏览器上面有一排 type

2448
01:29:02,000 --> 01:29:03,000
吗

2449
01:29:03,000 --> 01:29:08,000
然后你把鼠标挪到每个 type 上面就会立刻下面出现一个 drop

2450
01:29:08,000 --> 01:29:08,000
dropdown

2451
01:29:08,000 --> 01:29:13,000
然后这个 dropdown 里面就是这个页面目前正在显示的东西的一个小预览图

2452
01:29:14,000 --> 01:29:14,000
呃

2453
01:29:15,000 --> 01:29:17,000
或者

2454
01:29:18,000 --> 01:29:19,000
要按一个按钮的话

2455
01:29:19,000 --> 01:29:27,000
这个按钮基本上也是大部分地方都是图片或者是你需要看的东西而不是一个按钮本身

2456
01:29:27,000 --> 01:29:29,000
就 edge to edge 吧

2457
01:29:29,000 --> 01:29:32,000
我觉得他可能也是跟这个名字来的嘛

2458
01:29:32,000 --> 01:29:37,000
就所有的东西都是呃啊所有东西都是内容

2459
01:29:37,000 --> 01:29:41,000
然后他是这个内容的 edge 其实有点跟 chrome 有点异曲同工之妙

2460
01:29:41,000 --> 01:29:43,000
但他叫的更直白一些

2461
01:29:43,000 --> 01:29:44,000
一个是框

2462
01:29:44,000 --> 01:29:45,000
一个是边线

2463
01:29:45,000 --> 01:29:46,000
而且是边框

2464
01:29:46,000 --> 01:29:55,000
对他的暗域就是你所要看到的一切内容呃都让你看到就是你尽可能多去看到内容

2465
01:29:55,000 --> 01:29:59,000
而我只是作为这个内容外面的那一像素的白边而已

2466
01:30:00,000 --> 01:30:00,000
嗯

2467
01:30:00,000 --> 01:30:00,000
对

2468
01:30:01,000 --> 01:30:01,000
哎

2469
01:30:01,000 --> 01:30:02,000
这个我对我对他

2470
01:30:02,000 --> 01:30:07,000
理解命名的理解还可能还没想到这一层没有你把他理解为 blood edge 是吧

2471
01:30:07,000 --> 01:30:09,000
leading edge

2472
01:30:09,000 --> 01:30:12,000
因为他那个他用那个 i 1 他不是各种间谣模式吗

2473
01:30:12,000 --> 01:30:13,000
对啊

2474
01:30:14,000 --> 01:30:16,000
然后他那个最新的模式就是叫做 edge mode

2475
01:30:16,000 --> 01:30:17,000
ok

2476
01:30:18,000 --> 01:30:21,000
然后他不是承诺说这个有点奇叫一直就是啊

2477
01:30:21,000 --> 01:30:23,000
永远处在时代最前缘

2478
01:30:23,000 --> 01:30:25,000
所以就是 edge 没错啊

2479
01:30:25,000 --> 01:30:26,000
对对对对对

2480
01:30:26,000 --> 01:30:30,000
然后我我是我是这么理解他这个命名的这个来来历的啊

2481
01:30:30,000 --> 01:30:32,000
但那你说这么也可能也确实也是

2482
01:30:32,000 --> 01:30:37,000
这个挺有是挺有这个什么说服力的一个一个一个讲法

2483
01:30:37,000 --> 01:30:37,000
嗯

2484
01:30:37,000 --> 01:30:48,000
但我觉得可能 edge 最有就最对开发者最有意义的一点是他不再支持那个 active x 那个空间

2485
01:30:48,000 --> 01:30:50,000
嗯

2486
01:30:50,000 --> 01:30:52,000
他终于甩掉这个毒瘤吗

2487
01:30:52,000 --> 01:30:56,000
对甩掉一个历史重大的包袱

2488
01:30:56,000 --> 01:30:58,000
然后就如果这个流行起来

2489
01:30:58,000 --> 01:31:00,000
我们就可以看到国内那些愚蠢的

2490
01:31:00,000 --> 01:31:01,000
往银厂商也好

2491
01:31:01,000 --> 01:31:02,000
这个银行

2492
01:31:02,000 --> 01:31:02,000
对吧

2493
01:31:02,000 --> 01:31:06,000
这种想要再装一个什么狗屁的空间这种事情

2494
01:31:06,000 --> 01:31:07,000
对

2495
01:31:07,000 --> 01:31:08,000
那我弄啊

2496
01:31:08,000 --> 01:31:08,000
我觉得

2497
01:31:10,000 --> 01:31:11,000
啊

2498
01:31:11,000 --> 01:31:13,000
政府什么事情都干得出来

2499
01:31:13,000 --> 01:31:13,000
很难说

2500
01:31:13,000 --> 01:31:15,000
也许政府会说啊

2501
01:31:15,000 --> 01:31:16,000
你不是帅

2502
01:31:16,000 --> 01:31:17,000
Xx 不要进中国市场

2503
01:31:19,000 --> 01:31:20,000
你能你能把他怎么地

2504
01:31:22,000 --> 01:31:23,000
搞得跟韩国一样

2505
01:31:25,000 --> 01:31:28,000
就我觉得其实你说如果好

2506
01:31:28,000 --> 01:31:30,000
现在 google 没办

2507
01:31:30,000 --> 01:31:31,000
然后

2508
01:31:31,000 --> 01:31:31,000
嗯

2509
01:31:31,000 --> 01:31:32,000
嗯

2510
01:31:32,000 --> 01:31:35,000
苹果是反正苹果苹果不在意苹果是做硬件

2511
01:31:35,000 --> 01:31:39,000
那如果 mercrosoft 也被办了的话呢

2512
01:31:39,000 --> 01:31:40,000
中国人用什么

2513
01:31:40,000 --> 01:31:42,000
哈哈哈

2514
01:31:42,000 --> 01:31:45,000
对是一个在大推 20 年

2515
01:31:45,000 --> 01:31:49,000
你当然可以你当然可以说这种情况出现的可能性微红其微

2516
01:31:49,000 --> 01:31:49,000
但是

2517
01:31:51,000 --> 01:31:55,000
参争就是在理论上有可能说微软骨子这么软的一个公司是吧

2518
01:31:55,000 --> 01:31:56,000
对

2519
01:31:57,000 --> 01:31:58,000
哎呀

2520
01:31:58,000 --> 01:32:00,000
edge 还有一个比较好玩的

2521
01:32:00,000 --> 01:32:00,000
他支持那个 crime

2522
01:32:00,000 --> 01:32:02,000
和 firefox 的那些扩展

2523
01:32:03,000 --> 01:32:04,000
对

2524
01:32:04,000 --> 01:32:06,000
这也是比较独立的一个一个招数

2525
01:32:06,000 --> 01:32:07,000
我觉得

2526
01:32:08,000 --> 01:32:10,000
但是我觉得这个做起来不算太难

2527
01:32:10,000 --> 01:32:13,000
因为大家那个扩展也是就是有一个 javascript 加那个 html

2528
01:32:13,000 --> 01:32:14,000
要去买我无写的嘛

2529
01:32:14,000 --> 01:32:15,000
一般是这样

2530
01:32:16,000 --> 01:32:19,000
他这个人支持我就可能知识上也并不是特别复杂

2531
01:32:19,000 --> 01:32:20,000
但是意义还是蛮大的

2532
01:32:20,000 --> 01:32:24,000
就跟其实他们标的这次上面我们可能自己不会单独讲啊

2533
01:32:24,000 --> 01:32:25,000
就是嗯

2534
01:32:27,000 --> 01:32:29,000
他那个 windows 十上不是可以不是 windows

2535
01:32:29,000 --> 01:32:30,000
就 windows 十在

2536
01:32:30,000 --> 01:32:32,000
windows 是 phone 上的版本

2537
01:32:32,000 --> 01:32:36,000
他不是可以原本有没有原神就是可以兼容运行安卓应用吗

2538
01:32:36,000 --> 01:32:36,000
嗯

2539
01:32:36,000 --> 01:32:39,000
然后可以也可以兼容运行这个 ls 应用吗

2540
01:32:39,000 --> 01:32:41,000
所以这个有点这个啊

2541
01:32:41,000 --> 01:32:42,000
异曲同工的意思

2542
01:32:42,000 --> 01:32:47,000
因为很多人像说那种 firefox 的重度用户他为什么离不开

2543
01:32:47,000 --> 01:32:51,000
但除了一个精神理念上他支持这个开源免费的这种独立的浏览器之外哈

2544
01:32:51,000 --> 01:32:54,000
可能很多一个因素就是有很多人装了这种各种各样的小插件

2545
01:32:54,000 --> 01:32:56,000
然后在这个对于他们来说

2546
01:32:56,000 --> 01:32:58,000
这插件不管是他们工作也好

2547
01:32:58,000 --> 01:32:58,000
生活也好

2548
01:32:58,000 --> 01:33:00,000
都是属于那种必不可少的工具

2549
01:33:00,000 --> 01:33:02,000
然后啊

2550
01:33:02,000 --> 01:33:05,000
你这个因为 IE 是没什么插件的

2551
01:33:05,000 --> 01:33:09,000
IE 的插件都是什么流氓厂商装的流氓流氓软件

2552
01:33:09,000 --> 01:33:12,000
用户自己装的插件是相对比较少的

2553
01:33:12,000 --> 01:33:14,000
当然他说他能够啊

2554
01:33:14,000 --> 01:33:17,000
这次把这个东西集成进来能够做一些

2555
01:33:17,000 --> 01:33:19,000
我觉得还是挺不错的

2556
01:33:19,000 --> 01:33:21,000
就是能够争取市场定位的一个做法

2557
01:33:21,000 --> 01:33:25,000
对当然具体能不能成功还是要看细节了

2558
01:33:25,000 --> 01:33:28,000
就是他这个策略最大的问题就是你必须把细节做好

2559
01:33:28,000 --> 01:33:30,000
如果你说啊

2560
01:33:30,000 --> 01:33:32,000
所有这些插件能跑是能跑

2561
01:33:32,000 --> 01:33:34,000
可是要么特别卡

2562
01:33:34,000 --> 01:33:36,000
要么有些功能用不了

2563
01:33:36,000 --> 01:33:41,000
那我觉得还是还是会迫使很多人说哎呦

2564
01:33:41,000 --> 01:33:45,000
我这个东西是 mission critical

2565
01:33:45,000 --> 01:33:46,000
你跑不好的话呢

2566
01:33:46,000 --> 01:33:47,000
我宁可不用我还是用回去

2567
01:33:47,000 --> 01:33:55,000
可是我反正也不损失什么不是就然后反过来在 windows 上面跑那个 iphone

2568
01:33:55,000 --> 01:33:56,000
安装的应用其实也是这样

2569
01:33:56,000 --> 01:33:59,000
如果说你这个应用能在 windows 上面跑

2570
01:33:59,000 --> 01:34:00,000
但是用起来怎么用

2571
01:34:00,000 --> 01:34:03,000
怎么用怎么用怎么觉得别扭

2572
01:34:03,000 --> 01:34:05,000
我觉得还是一个很大的问题

2573
01:34:06,000 --> 01:34:08,000
我觉得可能还是对

2574
01:34:08,000 --> 01:34:11,000
我觉得这个问题可能比那个在 windows 时的 windows

2575
01:34:11,000 --> 01:34:14,000
方向跑安卓和 lc 用就要简单得多

2576
01:34:14,000 --> 01:34:18,000
因为那个毕竟上你是要做一些非常麻烦的事情

2577
01:34:18,000 --> 01:34:19,000
你要 ap 你要提供建议的 api

2578
01:34:19,000 --> 01:34:22,000
你要考虑说那个万一他用了这个什么那个平台

2579
01:34:22,000 --> 01:34:25,000
独私有的 api 或者独特的 api 你怎么去兼容

2580
01:34:25,000 --> 01:34:26,000
你要去折腾

2581
01:34:26,000 --> 01:34:27,000
还有稳定性啊

2582
01:34:27,000 --> 01:34:29,000
你都是很难保证的

2583
01:34:29,000 --> 01:34:30,000
因为你你没有这个

2584
01:34:30,000 --> 01:34:33,000
你没有这个跑的应用的源代码嘛

2585
01:34:33,000 --> 01:34:35,000
你只有一个二进制的字节码

2586
01:34:35,000 --> 01:34:37,000
或者是像 iOS 你甚至连那个字节码都没有

2587
01:34:37,000 --> 01:34:39,000
你得等他重新编译一个

2588
01:34:39,000 --> 01:34:40,000
但是像这个浏览器里面

2589
01:34:40,000 --> 01:34:42,000
大家都是解析这个 javascript

2590
01:34:42,000 --> 01:34:47,000
我觉得是一个相对来说比较好

2591
01:34:47,000 --> 01:34:50,000
做好的一个一个一个技术

2592
01:34:50,000 --> 01:34:53,000
就是说你看现在那个 i 1111 吧

2593
01:34:53,000 --> 01:34:57,000
它里面的那些这个 javascript 的解析的引擎就性能也是不错的

2594
01:34:57,000 --> 01:35:00,000
这现在我一解就是做一些兼容性的考量嘛

2595
01:35:00,000 --> 01:35:00,000
对

2596
01:35:00,000 --> 01:35:04,000
然后我觉得以微软的这么庞大的团队

2597
01:35:04,000 --> 01:35:07,000
这么庞大的这个研发实力

2598
01:35:07,000 --> 01:35:09,000
然后只要他给他们足够的决心

2599
01:35:09,000 --> 01:35:10,000
是吧

2600
01:35:10,000 --> 01:35:12,000
那么按小姐姐的话来说

2601
01:35:12,000 --> 01:35:14,000
只要 pm 的压力足够大

2602
01:35:14,000 --> 01:35:16,000
因为他们应该还是能够做得出来的

2603
01:35:16,000 --> 01:35:18,000
那个应该还是还可以

2604
01:35:18,000 --> 01:35:21,000
只要把不能剩的那一批 pm 开掉就可以做好

2605
01:35:21,000 --> 01:35:22,000
哈哈哈

2606
01:35:22,000 --> 01:35:22,000
没错

2607
01:35:22,000 --> 01:35:23,000
哈哈哈

2608
01:35:23,000 --> 01:35:24,000
就这个我觉得还是对

2609
01:35:24,000 --> 01:35:26,000
我觉得他们还是有一比较乐

2610
01:35:26,000 --> 01:35:28,000
比比较乐观的态度吧

2611
01:35:28,000 --> 01:35:30,000
对对

2612
01:35:30,000 --> 01:35:30,000
当然啊

2613
01:35:30,000 --> 01:35:33,000
我能想到的一个问题就是

2614
01:35:33,000 --> 01:35:37,000
至少在就某些插件

2615
01:35:37,000 --> 01:35:39,000
呃 chrome 和 firefox 都有

2616
01:35:39,000 --> 01:35:43,000
但是有时候有些插件在 firefox 上面能做到的事情

2617
01:35:43,000 --> 01:35:44,000
在 chrome 上面是做不到的

2618
01:35:44,000 --> 01:35:47,000
比如说有一个呃

2619
01:35:47,000 --> 01:35:50,000
用 vim 的 keybinding 来操作浏览器的插件

2620
01:35:50,000 --> 01:35:54,000
我记得他说他在 firefox 上面能够做到一些事情

2621
01:35:54,000 --> 01:36:00,000
在 chrome 上做不到的原因是 chrome 的沙盒限制更强一点

2622
01:36:00,000 --> 01:36:02,000
严格啊

2623
01:36:02,000 --> 01:36:02,000
对

2624
01:36:02,000 --> 01:36:07,000
而且 chrome 没有把浏览器本身的一些操作暴露给 javascript

2625
01:36:07,000 --> 01:36:10,000
api 就是你可以操作页面上的内容

2626
01:36:10,000 --> 01:36:12,000
你可以去访问页面上的内容

2627
01:36:12,000 --> 01:36:14,000
但是不能访问浏览器本身的一些功能

2628
01:36:14,000 --> 01:36:17,000
比如说关闭或者是切换 type 之类的

2629
01:36:17,000 --> 01:36:18,000
嗯哼

2630
01:36:18,000 --> 01:36:20,000
但他那个也不行嘛

2631
01:36:20,000 --> 01:36:23,000
因为他那个不是他那个是多进程模型啊

2632
01:36:23,000 --> 01:36:28,000
然后他发现这些东西是浏览器的主控进程和页面的那个进程是就是和那个包括连那个扩展的进程都是完全的进程嘛

2633
01:36:28,000 --> 01:36:31,000
连那个扩展的进程都是完全独立的

2634
01:36:31,000 --> 01:36:34,000
这样的话应该是没有权限解决这个问题

2635
01:36:34,000 --> 01:36:36,000
但可能想想就是说应该也有

2636
01:36:36,000 --> 01:36:38,000
但是不一定马上就能做出来

2637
01:36:38,000 --> 01:36:40,000
甚至都不在路线图上

2638
01:36:40,000 --> 01:36:40,000
这个就比较惨

2639
01:36:40,000 --> 01:36:41,000
就是很有可能

2640
01:36:43,000 --> 01:36:46,000
所以不带也发现前面那个东西也没正式发布嘛

2641
01:36:46,000 --> 01:36:48,000
也不太清楚到底是一个什么样的状况

2642
01:36:48,000 --> 01:36:53,000
大家如果有兴趣可以去装个他有一个所谓的这帮 ring 各种各样的圈圈

2643
01:36:53,000 --> 01:36:57,000
就是呃就是什么什么 early adopter ring 啊这种乱七八糟的

2644
01:36:57,000 --> 01:36:58,000
如果你有兴趣去给声音加了一些什么早期的设计啊什么什么的

2645
01:36:58,000 --> 01:37:02,000
早期的那种发布的环发布的圈圈

2646
01:37:02,000 --> 01:37:05,000
你可以找到拿到他们最新的 build 出来的版本

2647
01:37:05,000 --> 01:37:06,000
然后可以装上去试一下啊

2648
01:37:06,000 --> 01:37:14,000
反正也是真当小白说哎呀说的是这个传一台 windows 机器这件事情应该提上日程

2649
01:37:15,000 --> 01:37:16,000
hello nice

2650
01:37:16,000 --> 01:37:20,000
反正其实从概念和产品来讲

2651
01:37:20,000 --> 01:37:25,000
跟这次就比较就比较的上面的演示和上一次差不太多

2652
01:37:25,000 --> 01:37:28,000
但这是我感觉呃

2653
01:37:28,000 --> 01:37:28,000
这个完成度

2654
01:37:28,000 --> 01:37:31,000
要高一些就是这个这个 demo 的完成度要高

2655
01:37:31,000 --> 01:37:33,000
对这个事情毕竟还是没有碰到产品嘛

2656
01:37:33,000 --> 01:37:36,000
所以还行

2657
01:37:36,000 --> 01:37:38,000
然后他们事后去又去试了一下

2658
01:37:38,000 --> 01:37:43,000
发现还是跟上一代上一次发布的时候的也是他们也是找了一对媒体人去试嘛

2659
01:37:43,000 --> 01:37:47,000
这次他们等于是让开发者去试了啊

2660
01:37:47,000 --> 01:37:51,000
感觉看了一圈评论下来的感觉就是说

2661
01:37:51,000 --> 01:37:52,000
还是有比较多问题的

2662
01:37:52,000 --> 01:37:56,000
但是还是有进步起码什么微型化这个但是做到了

2663
01:37:56,000 --> 01:37:58,000
他们现在是不需要插任何线就头上淡淡的一头

2664
01:37:58,000 --> 01:37:59,000
写就可以直接用了

2665
01:37:59,000 --> 01:38:01,000
这个还是不错的

2666
01:38:01,000 --> 01:38:06,000
这比那个什么奥克拉斯瑞夫那些要接个什么线到台式机上还是要好很多的

2667
01:38:06,000 --> 01:38:09,000
但其他的还像有些也有恶化的情况

2668
01:38:09,000 --> 01:38:12,000
比如说说的那个可是脚变窄了嘛

2669
01:38:12,000 --> 01:38:23,000
可能也是根据要考虑什么呃计算能力和电力供应这种的这种限制的情况下做出了一个什么不得不选的一个一个 trade off

2670
01:38:23,000 --> 01:38:25,000
但是哎

2671
01:38:25,000 --> 01:38:26,000
这东西怎么说

2672
01:38:26,000 --> 01:38:28,000
没有看到是很难去评价他的嘛

2673
01:38:28,000 --> 01:38:28,000
而且

2674
01:38:28,000 --> 01:38:34,000
我们我们现在外面看到的什么光那个什么呃他那个展示觉得啊挺惊艳的

2675
01:38:34,000 --> 01:38:36,000
但是带起来怎么样回事

2676
01:38:36,000 --> 01:38:38,000
还是带了才带了才知道

2677
01:38:38,000 --> 01:38:41,000
可能我觉得并没有他展示的那么好

2678
01:38:41,000 --> 01:38:43,000
这是什么微软的一贯的毛病嘛

2679
01:38:43,000 --> 01:38:47,000
就是饼哦画的看起来比吃起来好

2680
01:38:47,000 --> 01:38:49,000
这个就是一个挺大的问题

2681
01:38:49,000 --> 01:38:50,000
这怎么说呢

2682
01:38:50,000 --> 01:38:57,000
就会导致一个做 overpromise underdeliver 就是承诺过多实现太少

2683
01:38:57,000 --> 01:38:58,000
这个这个到时候会有问题

2684
01:38:58,000 --> 01:38:59,000
就是有落差嘛

2685
01:38:59,000 --> 01:39:01,000
中途拿到的时候会落差

2686
01:39:01,000 --> 01:39:03,000
对所以我觉得是很好的一个方式

2687
01:39:03,000 --> 01:39:14,000
还说把这个这个你这个 tab demo 的啊你你你还不能够达到的这些东西是要要收敛一点

2688
01:39:14,000 --> 01:39:17,000
就是说不要把这个饼画的太美好

2689
01:39:17,000 --> 01:39:19,000
而实际上你可能做不出那么那么好吃的饼

2690
01:39:19,000 --> 01:39:22,000
这个就比较这是一个比较考验

2691
01:39:22,000 --> 01:39:27,000
对呃什么团队的就是什么克制力的时候了

2692
01:39:27,000 --> 01:39:28,000
但是你知道啊

2693
01:39:28,000 --> 01:39:30,000
这个微软从来不是一个有克制的公司

2694
01:39:30,000 --> 01:39:37,000
所以他们需要引入一个新的 CEO 叫啊 chiefuserexpectationoffice

2695
01:39:37,000 --> 01:39:44,000
就是专门来 manage 这个 customerexpect expectation

2696
01:39:44,000 --> 01:39:46,000
该保密的保密

2697
01:39:46,000 --> 01:39:47,000
该 hold 住的 hold 住嘛

2698
01:39:47,000 --> 01:39:48,000
对

2699
01:39:48,000 --> 01:39:49,000
不过来看你怎么说

2700
01:39:49,000 --> 01:39:54,000
可能他们现在也是说这个 expectation 已经已经就可能对我们来说

2701
01:39:54,000 --> 01:39:56,000
很多人都已经不指望他什么了

2702
01:39:56,000 --> 01:39:57,000
对吧

2703
01:39:57,000 --> 01:40:01,000
所以也也不说不定他说就是要达到这个效果

2704
01:40:01,000 --> 01:40:03,000
又是要让你他对他多指望一点

2705
01:40:03,000 --> 01:40:03,000
对吧

2706
01:40:03,000 --> 01:40:06,000
这个也也说不准他这么想

2707
01:40:06,000 --> 01:40:11,000
但是我目前为止还是就那个那个那个就这样的爱临工作也讲过这个说法嘛

2708
01:40:11,000 --> 01:40:21,000
就是说啊不错的产品不错的爱这个 idea 呃实现还是有点担忧的嗯

2709
01:40:21,000 --> 01:40:23,000
这问你个问题

2710
01:40:23,000 --> 01:40:25,000
如果 hollow lens 和呃 oculuslift

2711
01:40:25,000 --> 01:40:26,000
摆在里面去吧

2712
01:40:26,000 --> 01:40:28,000
那你会选 rift 摆在你面前

2713
01:40:28,000 --> 01:40:30,000
你会选 rift 摆在你面前

2714
01:40:30,000 --> 01:40:32,000
你会选哪一个只能选一个的话

2715
01:40:32,000 --> 01:40:36,000
只能选一个啊哎哟这个还蛮难的

2716
01:40:36,000 --> 01:40:37,000
我很难嘛

2717
01:40:37,000 --> 01:40:41,000
你想想一个是一个是虚拟现实一个是增强现实

2718
01:40:41,000 --> 01:40:47,000
我觉得从这个这个嗯酷和好玩这个点出发的话

2719
01:40:47,000 --> 01:40:49,000
可能还是那个 hollow lens 会比较好

2720
01:40:49,000 --> 01:40:54,000
而且其实从就现在从他们那个 hollow lens 这个二二次发布的展示的效果和这个这个这个展示的效果呢

2721
01:40:54,000 --> 01:40:55,000
这个展示的效果和这个这个展示的效果呢

2722
01:40:55,000 --> 01:40:56,000
这个展示的效果和这个这个展示的效果呢

2723
01:40:56,000 --> 01:40:58,000
就是机器的情况

2724
01:40:58,000 --> 01:41:04,000
这样相比于那个 oculus lift 在展示的那个什么三代工程机的情况来讲

2725
01:41:04,000 --> 01:41:07,000
我觉得吧还是 hollow lens 的好一点

2726
01:41:07,000 --> 01:41:09,000
对 OK

2727
01:41:09,000 --> 01:41:10,000
有意思

2728
01:41:10,000 --> 01:41:11,000
你你会怎么选

2729
01:41:11,000 --> 01:41:15,000
我应该会选 oculus lift

2730
01:41:15,000 --> 01:41:16,000
我觉得为什么

2731
01:41:16,000 --> 01:41:17,000
因为可以打游戏

2732
01:41:17,000 --> 01:41:19,000
哈哈哈

2733
01:41:19,000 --> 01:41:23,000
非常这这个 vr 那个什么 hollow lens 不也可以玩游戏吗

2734
01:41:23,000 --> 01:41:26,000
他不是展示的那个叫什么 minecraft 吗

2735
01:41:26,000 --> 01:41:26,000
对

2736
01:41:26,000 --> 01:41:41,000
但我觉得这个问题在于 minecraft 的游戏的呃他他不是一个或者说他故意把 minecraft 呃改变成了一个可以叠加在现实世界层面上游戏

2737
01:41:41,000 --> 01:41:48,000
其实我就是我嗯嗯呃仔细的想过这个问题

2738
01:41:48,000 --> 01:41:54,000
就是呃我在想说呃两种技术分别适用于什么样的游戏场景啊假如说你要打 doom

2739
01:41:54,000 --> 01:41:55,000
画面就会垮了

2740
01:41:55,000 --> 01:41:56,000
如果是你想打 whatsapp

2741
01:41:56,000 --> 01:41:56,000
那你就加了一个游戏场景啊

2742
01:41:56,000 --> 01:42:02,000
或者 Quake 这样一个完全虚模拟出来

2743
01:42:02,000 --> 01:42:05,000
异界环境的游戏

2744
01:42:05,000 --> 01:42:10,000
那毫无疑问是 Oculus Rift 会比较好

2745
01:42:10,000 --> 01:42:14,000
因为它会帮你把现实隔绝起来

2746
01:42:14,000 --> 01:42:19,000
你所要做到的就是进入一个隔绝现实的环境里面

2747
01:42:19,000 --> 01:42:21,000
去杀一些根本不存在的怪物

2748
01:42:21,000 --> 01:42:26,000
或者是比如说你要做一个打猎游戏

2749
01:42:26,000 --> 01:42:30,000
你显然会希望自己能够认为自己身处在一个丛林里面

2750
01:42:30,000 --> 01:42:31,000
而不是你自己家里

2751
01:42:31,000 --> 01:42:39,000
但是反过来像 Holland 这样的 AR 技术

2752
01:42:39,000 --> 01:42:44,000
那就比较适合于做一些比如桌游

2753
01:42:44,000 --> 01:42:46,000
我曾经饰演过

2754
01:42:46,000 --> 01:42:48,000
就比如说我和我女朋友一人带一个

2755
01:42:48,000 --> 01:42:51,000
然后在盯着桌子

2756
01:42:51,000 --> 01:42:52,000
就是流行传说嘛

2757
01:42:52,000 --> 01:42:53,000
对

2758
01:42:53,000 --> 01:42:56,000
盯着面前的桌子就可以打大风

2759
01:42:56,000 --> 01:42:59,000
就可以看到什么孙小美跑到哪去

2760
01:42:59,000 --> 01:43:00,000
但其实桌子什么也没有

2761
01:43:00,000 --> 01:43:01,000
这不是很

2762
01:43:01,000 --> 01:43:02,000
但是有点奇怪

2763
01:43:02,000 --> 01:43:04,000
但难道不是很好吗

2764
01:43:04,000 --> 01:43:07,000
是不是比较适合这样的东西

2765
01:43:07,000 --> 01:43:10,000
我就是想那个卢氏传说就可以直接把那个拍

2766
01:43:10,000 --> 01:43:11,000
对没错

2767
01:43:11,000 --> 01:43:14,000
卢氏传说就直接显示在你面前

2768
01:43:14,000 --> 01:43:19,000
或者最合适的其实是战锤

2769
01:43:19,000 --> 01:43:21,000
就是 Wahama 这个系列

2770
01:43:21,000 --> 01:43:25,000
你不是可以给自己的模型

2771
01:43:25,000 --> 01:43:27,000
自己粘模型

2772
01:43:27,000 --> 01:43:28,000
然后给自己的模型涂色

2773
01:43:28,000 --> 01:43:31,000
然后用什么两脚器皮尺

2774
01:43:31,000 --> 01:43:37,000
来量两个模型之间的距离

2775
01:43:37,000 --> 01:43:38,000
然后制骰子

2776
01:43:38,000 --> 01:43:40,000
然后把你的战车推进

2777
01:43:40,000 --> 01:43:42,000
然后说我的战车把你的兽人轰掉了

2778
01:43:42,000 --> 01:43:44,000
然后你把你的兽人都捉在那拿下去

2779
01:43:44,000 --> 01:43:46,000
所有这些桌游

2780
01:43:46,000 --> 01:43:48,000
其实全都可以用 Holland 来实现

2781
01:43:48,000 --> 01:43:50,000
就效果应该会非常好玩

2782
01:43:50,000 --> 01:43:50,000
我觉得

2783
01:43:50,000 --> 01:43:55,000
但如果要我选的话

2784
01:43:55,000 --> 01:43:55,000
我厉害

2785
01:43:55,000 --> 01:43:55,000
我厉害

2786
01:43:55,000 --> 01:43:55,000
我厉害

2787
01:43:55,000 --> 01:43:56,000
我觉得我还是会选

2788
01:43:56,000 --> 01:43:58,000
会希望玩那种

2789
01:43:58,000 --> 01:44:01,000
就是比较强调进入式体验的

2790
01:44:01,000 --> 01:44:01,000
对

2791
01:44:01,000 --> 01:44:08,000
就让你忘掉从那个真实世界的种种限制

2792
01:44:08,000 --> 01:44:09,000
直接进入这种虚拟世界的

2793
01:44:09,000 --> 01:44:12,000
完全不同的一个环境

2794
01:44:12,000 --> 01:44:13,000
就是去逃离

2795
01:44:13,000 --> 01:44:14,000
对

2796
01:44:14,000 --> 01:44:16,000
我觉得我可能还是会选择 Oklahoma

2797
01:44:16,000 --> 01:44:18,000
OK

2798
01:44:18,000 --> 01:44:19,000
这挺有意思

2799
01:44:19,000 --> 01:44:22,000
当然理想情况还是全主机制吧

2800
01:44:22,000 --> 01:44:25,000
反正我觉得 Holland

2801
01:44:25,000 --> 01:44:25,000
还是一个很好的选择

2802
01:44:25,000 --> 01:44:27,000
还是一个比较 promising

2803
01:44:27,000 --> 01:44:30,000
但是不像对我来说

2804
01:44:30,000 --> 01:44:31,000
不像 Oculus Rift 那样

2805
01:44:31,000 --> 01:44:35,000
会想要在第一出的上市的第一时间就去买的一个东西

2806
01:44:35,000 --> 01:44:38,000
Oculus Rift 应该是明年年初就要上市的

2807
01:44:38,000 --> 01:44:39,000
对

2808
01:44:39,000 --> 01:44:41,000
刚才你说这个是什么好消息

2809
01:44:41,000 --> 01:44:42,000
好消息

2810
01:44:42,000 --> 01:44:45,000
你这个是有确定的时间购买的

2811
01:44:45,000 --> 01:44:45,000
对

2812
01:44:45,000 --> 01:44:49,000
那个什么 Holland 还不知道猴年马月什么时候能上

2813
01:44:49,000 --> 01:44:53,000
至少明年 Q 1 应该就可以戴上 Oculus Rift

2814
01:44:53,000 --> 01:44:53,000
你预着三年马月的时候就能上了

2815
01:44:53,000 --> 01:44:53,000
至少明年 Q 1 应该就可以戴上 Oculus Rift

2816
01:44:53,000 --> 01:44:53,000
至少明年 Q 1 应该就可以戴上 Oculus Rift

2817
01:44:53,000 --> 01:44:54,000
至少明年 Q 1 应该就可以戴上 Oculus Rift

2818
01:44:54,000 --> 01:44:57,000
反正你预着 3 月 31 号

2819
01:44:57,000 --> 01:45:00,000
至少有 Oculus Rift 可以买了

2820
01:45:00,000 --> 01:45:01,000
至少

2821
01:45:01,000 --> 01:45:01,000
对

2822
01:45:01,000 --> 01:45:04,000
然后我觉得现在最大的一个问题就是

2823
01:45:04,000 --> 01:45:09,000
PlayStation 或者 Xbox One 之类的东西

2824
01:45:09,000 --> 01:45:12,000
应该尽快提供 Holland 的支持

2825
01:45:12,000 --> 01:45:15,000
Oculus Rift 的支持

2826
01:45:15,000 --> 01:45:21,000
不然我觉得太多游戏值得被移植到虚拟现实里面

2827
01:45:21,000 --> 01:45:24,000
这里就有问题

2828
01:45:24,000 --> 01:45:28,000
因为 Holland 毕竟它只是一个做设备厂商

2829
01:45:28,000 --> 01:45:31,000
并没有任何游戏的渠道也好

2830
01:45:31,000 --> 01:45:32,000
它只能去找别人合作

2831
01:45:32,000 --> 01:45:33,000
其实这点上我觉得微软

2832
01:45:33,000 --> 01:45:36,000
你刚才说是 Holland 吗

2833
01:45:36,000 --> 01:45:39,000
还是 Oculus Rift

2834
01:45:39,000 --> 01:45:39,000
OK 对

2835
01:45:39,000 --> 01:45:41,000
我觉得这点上微软可能反而有优势

2836
01:45:41,000 --> 01:45:43,000
因为第一个

2837
01:45:43,000 --> 01:45:45,000
它等于是除了

2838
01:45:45,000 --> 01:45:48,000
甚至是已经是全球最大的游戏的发行商

2839
01:45:48,000 --> 01:45:49,000
它应该比索尼大

2840
01:45:49,000 --> 01:45:51,000
因为有 Xbox 之后

2841
01:45:51,000 --> 01:45:53,000
微软的游戏比索尼大吗

2842
01:45:54,000 --> 01:45:56,000
我理解是这样子不是吗

2843
01:45:56,000 --> 01:45:58,000
应该不是吧

2844
01:45:58,000 --> 01:45:59,000
如果不是的话

2845
01:45:59,000 --> 01:46:02,000
他们也是属于可能一二的这样的区别

2846
01:46:02,000 --> 01:46:02,000
对那肯定

2847
01:46:02,000 --> 01:46:04,000
我想插播一个小新闻

2848
01:46:04,000 --> 01:46:11,000
微软前一阵子推出了帝国时代 2

2849
01:46:11,000 --> 01:46:12,000
你没有听错

2850
01:46:12,000 --> 01:46:14,000
帝国时代 2 的 HD 版本

2851
01:46:14,000 --> 01:46:18,000
2015 年推出了帝国时代 2 的 HD 版本

2852
01:46:18,000 --> 01:46:19,000
简直是良心企业

2853
01:46:19,000 --> 01:46:21,000
这玩意已经多少年了

2854
01:46:21,000 --> 01:46:22,000
这什么情况

2855
01:46:22,000 --> 01:46:22,000
为什么

2856
01:46:22,000 --> 01:46:24,000
就提供了一个

2857
01:46:24,000 --> 01:46:26,000
可以支持高分辨率

2858
01:46:26,000 --> 01:46:28,000
支持多显示器

2859
01:46:28,000 --> 01:46:36,000
支持 steam 平台联网对战的帝国时代 2

2860
01:46:36,000 --> 01:46:38,000
你要不要买一份咱俩对战

2861
01:46:38,000 --> 01:46:40,000
可以啊

2862
01:46:40,000 --> 01:46:42,000
我回头去研究一下怎么一回事

2863
01:46:42,000 --> 01:46:43,000
对

2864
01:46:43,000 --> 01:46:44,000
因为帝国时代应该是

2865
01:46:44,000 --> 01:46:45,000
帝国时代 2 就是我们当时

2866
01:46:45,000 --> 01:46:48,000
九几年玩的最火的那款

2867
01:46:48,000 --> 01:46:48,000
对啊

2868
01:46:48,000 --> 01:46:50,000
这个东西已经十几年的吧

2869
01:46:50,000 --> 01:46:53,000
居然今年又出了一个新版本

2870
01:46:53,000 --> 01:46:53,000
我觉得

2871
01:46:53,000 --> 01:46:56,000
那个麦克萨夫特也算是良心质量

2872
01:46:56,000 --> 01:46:59,000
对必须是良心企业

2873
01:46:59,000 --> 01:47:00,000
刚才说的刚才那个

2874
01:47:00,000 --> 01:47:04,000
就是我我我感觉就是微软在这方面上是其实有优势的

2875
01:47:04,000 --> 01:47:05,000
他可以说

2876
01:47:05,000 --> 01:47:06,000
因为他有主机嘛

2877
01:47:06,000 --> 01:47:09,000
然后他也有这个相应的这个发行渠道

2878
01:47:09,000 --> 01:47:10,000
然后他会有这个

2879
01:47:10,000 --> 01:47:13,000
这个就开发团队开发这种

2880
01:47:13,000 --> 01:47:16,000
就是就做游戏的人的这种资源

2881
01:47:16,000 --> 01:47:17,000
他会去笼络嘛

2882
01:47:17,000 --> 01:47:18,000
他可以说

2883
01:47:18,000 --> 01:47:19,000
哎我们当时开发一款

2884
01:47:19,000 --> 01:47:22,000
给这个 hollowance 玩的

2885
01:47:22,000 --> 01:47:23,000
然后是跑在这个 XRM 的这种资源上

2886
01:47:23,000 --> 01:47:25,000
就是这个 Xbox 上面的这种游戏

2887
01:47:25,000 --> 01:47:27,000
因为他其实就是要打通这个平台之后

2888
01:47:27,000 --> 01:47:31,000
他不是现在是讲那个 Windows 10 是一个什么 Universal App

2889
01:47:31,000 --> 01:47:32,000
Universal App 什么意思

2890
01:47:32,000 --> 01:47:36,000
就是可以可以跨这些他能够覆盖到所有的平台

2891
01:47:36,000 --> 01:47:37,000
不是说他还要追求一个

2892
01:47:37,000 --> 01:47:38,000
就说

2893
01:47:40,000 --> 01:47:42,000
简单说就可以互玩嘛

2894
01:47:42,000 --> 01:47:48,000
就是我可以去用那个 hollowance 去接到这个呃什么可能跟那个 Xbox 配合就玩这么一下游戏

2895
01:47:48,000 --> 01:47:51,000
我觉得这个这个的如果他真的做成了哈

2896
01:47:51,000 --> 01:47:53,000
我觉得他这个潜力是要比像 Octus Rift

2897
01:47:53,000 --> 01:47:57,000
这样去和其他厂商去谈合作

2898
01:47:57,000 --> 01:47:59,000
这种方式我觉得是要好得多的

2899
01:47:59,000 --> 01:48:00,000
对

2900
01:48:00,000 --> 01:48:04,000
如果 hollowance 可以和 Xbox 整合在一起的话呢

2901
01:48:04,000 --> 01:48:07,000
真的是前途无量的其他基本上所有主机都可以去死

2902
01:48:09,000 --> 01:48:10,000
对啊

2903
01:48:10,000 --> 01:48:14,000
就可能会达到那么像是当年那个什么位就一代的位那种风靡的程度

2904
01:48:14,000 --> 01:48:15,000
对

2905
01:48:16,000 --> 01:48:17,000
甚至可能会超过

2906
01:48:17,000 --> 01:48:17,000
对

2907
01:48:17,000 --> 01:48:19,000
来看看价格价格贵了

2908
01:48:19,000 --> 01:48:20,000
可能也不太行

2909
01:48:20,000 --> 01:48:21,000
但是

2910
01:48:21,000 --> 01:48:22,000
嗯

2911
01:48:22,000 --> 01:48:23,000
然后我们还要想要提

2912
01:48:23,000 --> 01:48:32,000
一级的一件趣事就是在这次 bill 上面微软员工穿了那个一件蓝色的 T 恤

2913
01:48:32,000 --> 01:48:36,000
然后蓝色 T 恤胸前有呃就是 windows 图标了

2914
01:48:36,000 --> 01:48:39,000
然后这个图标你细看的话

2915
01:48:39,000 --> 01:48:42,000
他是有很多细小的 0 和 1 组成的

2916
01:48:42,000 --> 01:48:45,000
然后我不知道是谁找出来的

2917
01:48:45,000 --> 01:48:53,000
但是我们就目前理解为有好事者呃是否把这个 0 和 1 呃转换成阿斯基马克

2918
01:48:53,000 --> 01:48:56,000
然后看看这些是不是有意思

2919
01:48:56,000 --> 01:49:02,000
然后发现真的是有意识有意思的就是推一个呃推的用户叫做凯文

2920
01:49:02,000 --> 01:49:02,000
gos

2921
01:49:02,000 --> 01:49:06,000
他把这些 0 和 1 都翻译出来了

2922
01:49:07,000 --> 01:49:10,000
然后左上角那一块是呃

2923
01:49:10,000 --> 01:49:12,000
there are ten types of people in the world

2924
01:49:12,000 --> 01:49:17,000
呃应该说 there are one zero types of of people in the world

2925
01:49:17,000 --> 01:49:22,000
然后呃右上角那一块是 windows 10 types of people in the world

2926
01:49:22,000 --> 01:49:23,000
然后呃右上角那一块是 windows 10 types of people in the world

2927
01:49:23,000 --> 01:49:29,000
就是因为 789 就是因为 789 吃了

2928
01:49:29,000 --> 01:49:31,000
然后这个 8 和 8 谐音

2929
01:49:31,000 --> 01:49:34,000
所以他写的是 because 789

2930
01:49:34,000 --> 01:49:42,000
然后左下角是 congrats on being one of the first

2931
01:49:42,000 --> 01:49:44,000
就是欢迎你成为第一个

2932
01:49:44,000 --> 01:49:48,000
我待会做什么的人解开这个谜的是不是

2933
01:49:48,000 --> 01:49:52,000
然后右下角是 windows insiders help

2934
01:49:52,000 --> 01:49:53,000
呃

2935
01:49:53,000 --> 01:49:56,000
对

2936
01:49:56,000 --> 01:49:58,000
我觉得还挺有意思

2937
01:49:58,000 --> 01:50:00,000
有意思

2938
01:50:00,000 --> 01:50:02,000
有小小小插曲小趣闻

2939
01:50:02,000 --> 01:50:04,000
对

2940
01:50:04,000 --> 01:50:06,000
然后我觉得怎么说呢

2941
01:50:06,000 --> 01:50:07,000
嗯

2942
01:50:07,000 --> 01:50:09,000
我以前是不看贝尔的

2943
01:50:09,000 --> 01:50:10,000
你看吧

2944
01:50:10,000 --> 01:50:17,000
就我其实今年第一次我也是今年才看是一个已经连续播了五年的这么一个

2945
01:50:17,000 --> 01:50:18,000
一个一个一个对

2946
01:50:18,000 --> 01:50:19,000
我也是才意思哎

2947
01:50:19,000 --> 01:50:22,000
原来还有这个微软还搞一个类似 wwc

2948
01:50:22,000 --> 01:50:23,000
wwc

2949
01:50:23,000 --> 01:50:24,000
这个东西很新鲜

2950
01:50:24,000 --> 01:50:24,000
看一下

2951
01:50:24,000 --> 01:50:25,000
对

2952
01:50:25,000 --> 01:50:27,000
然后我去过

2953
01:50:27,000 --> 01:50:30,000
WWTC 是买不到票的

2954
01:50:30,000 --> 01:50:31,000
但是我去过的

2955
01:50:31,000 --> 01:50:32,000
Developer Conference

2956
01:50:32,000 --> 01:50:33,000
是 Google 的那个

2957
01:50:33,000 --> 01:50:35,000
Google Developer Day

2958
01:50:35,000 --> 01:50:36,000
Google I.O.吗

2959
01:50:36,000 --> 01:50:36,000
对

2960
01:50:36,000 --> 01:50:37,000
不是 Developer Day

2961
01:50:37,000 --> 01:50:37,000
不是

2962
01:50:37,000 --> 01:50:38,000
Developer Day 现在也不办了

2963
01:50:38,000 --> 01:50:38,000
OK

2964
01:50:38,000 --> 01:50:40,000
就之前在

2965
01:50:40,000 --> 01:50:41,000
之前 01 年

2966
01:50:41,000 --> 01:50:43,000
10 年

2967
01:50:43,000 --> 01:50:44,000
11 年和 12 年

2968
01:50:44,000 --> 01:50:45,000
我应该都去了

2969
01:50:45,000 --> 01:50:46,000
然后

2970
01:50:46,000 --> 01:50:48,000
我觉得

2971
01:50:48,000 --> 01:50:50,000
这种开发者盛会

2972
01:50:50,000 --> 01:50:52,000
SumUp 已经成为了一种

2973
01:50:52,000 --> 01:50:54,000
Phenomena

2974
01:50:54,000 --> 01:50:56,000
全球开发者

2975
01:50:56,000 --> 01:50:58,000
乃至于并非开发者的人

2976
01:50:58,000 --> 01:51:00,000
会去关注这样一种

2977
01:51:00,000 --> 01:51:02,000
本来是一群人

2978
01:51:02,000 --> 01:51:02,000
对

2979
01:51:02,000 --> 01:51:04,000
讨论工具的

2980
01:51:04,000 --> 01:51:05,000
这样一个

2981
01:51:05,000 --> 01:51:06,000
Event

2982
01:51:06,000 --> 01:51:07,000
还挺有意思的

2983
01:51:07,000 --> 01:51:08,000
特别是那个 Keynote

2984
01:51:08,000 --> 01:51:10,000
其实它很多时候就

2985
01:51:10,000 --> 01:51:11,000
并不

2986
01:51:11,000 --> 01:51:12,000
单单是面对

2987
01:51:12,000 --> 01:51:14,000
开发者

2988
01:51:14,000 --> 01:51:14,000
对

2989
01:51:14,000 --> 01:51:16,000
它可能更多的

2990
01:51:16,000 --> 01:51:16,000
那个受众

2991
01:51:16,000 --> 01:51:17,000
就 Keynote 的那个

2992
01:51:17,000 --> 01:51:18,000
就主题演讲的受众

2993
01:51:18,000 --> 01:51:19,000
可能是面向一个

2994
01:51:19,000 --> 01:51:20,000
所谓的普罗大众

2995
01:51:20,000 --> 01:51:21,000
就是 General Public

2996
01:51:21,000 --> 01:51:22,000
或者说

2997
01:51:22,000 --> 01:51:25,000
对技术比较关注的

2998
01:51:25,000 --> 01:51:26,000
这么一些人

2999
01:51:26,000 --> 01:51:27,000
并不是说这些人

3000
01:51:27,000 --> 01:51:29,000
一定要是开发者

3001
01:51:29,000 --> 01:51:30,000
没错

3002
01:51:30,000 --> 01:51:32,000
然后我觉得

3003
01:51:32,000 --> 01:51:33,000
SumUp 也是代表了

3004
01:51:33,000 --> 01:51:36,000
目前这样一个

3005
01:51:36,000 --> 01:51:38,000
工业时代

3006
01:51:38,000 --> 01:51:40,000
我就忘了是哪一个

3007
01:51:40,000 --> 01:51:42,000
社会学家说过一段话

3008
01:51:42,000 --> 01:51:44,000
说

3009
01:51:44,000 --> 01:51:44,000
不行

3010
01:51:44,000 --> 01:51:45,000
我之后一定要查出来

3011
01:51:45,000 --> 01:51:46,000
到底谁说

3012
01:51:46,000 --> 01:51:47,000
可能不是社会学家

3013
01:51:47,000 --> 01:51:49,000
反正有人说过说

3014
01:51:49,000 --> 01:51:51,000
工业时代以来

3015
01:51:51,000 --> 01:51:52,000
啊

3016
01:51:52,000 --> 01:51:54,000
整个工业对人们的影响

3017
01:51:54,000 --> 01:51:56,000
导致了人们对于工业的崇拜

3018
01:51:56,000 --> 01:51:58,000
而这样一种崇拜

3019
01:51:58,000 --> 01:51:59,000
这样一种迷恋

3020
01:51:59,000 --> 01:52:00,000
这样一种

3021
01:52:00,000 --> 01:52:01,000
啊

3022
01:52:01,000 --> 01:52:02,000
投身其中的热情

3023
01:52:02,000 --> 01:52:04,000
其实远远超越了

3024
01:52:04,000 --> 01:52:05,000
啊

3025
01:52:05,000 --> 01:52:05,000
宗教

3026
01:52:05,000 --> 01:52:07,000
乃至于艺术文学

3027
01:52:07,000 --> 01:52:08,000
所对

3028
01:52:08,000 --> 01:52:09,000
所给人们带来的影响

3029
01:52:09,000 --> 01:52:11,000
然后

3030
01:52:11,000 --> 01:52:11,000
这算什么

3031
01:52:11,000 --> 01:52:12,000
拜物教吗

3032
01:52:12,000 --> 01:52:14,000
它不是拜物教

3033
01:52:14,000 --> 01:52:15,000
就拜工业教

3034
01:52:15,000 --> 01:52:16,000
星辰大海嘛

3035
01:52:16,000 --> 01:52:16,000
OK

3036
01:52:16,000 --> 01:52:18,000
工业党星辰大海

3037
01:52:18,000 --> 01:52:19,000
就

3038
01:52:19,000 --> 01:52:21,000
你会觉得

3039
01:52:21,000 --> 01:52:21,000
嗯

3040
01:52:21,000 --> 01:52:24,000
我们现在处于一种这样的

3041
01:52:24,000 --> 01:52:25,000
对于工具的热忱里面

3042
01:52:25,000 --> 01:52:27,000
我们会关注专门去

3043
01:52:27,000 --> 01:52:30,000
办这样的 podcast 来讨论工具

3044
01:52:30,000 --> 01:52:31,000
因为我觉得内核恐慌

3045
01:52:31,000 --> 01:52:34,000
其实讨论的本身就是

3046
01:52:34,000 --> 01:52:37,000
就是就是工业产品的一种特别形式嘛

3047
01:52:37,000 --> 01:52:40,000
软件的内部的一些形式

3048
01:52:40,000 --> 01:52:41,000
我觉得其实也是这样一种

3049
01:52:41,000 --> 01:52:42,000
啊

3050
01:52:42,000 --> 01:52:43,000
工业崇拜

3051
01:52:43,000 --> 01:52:43,000
工业崇拜

3052
01:52:43,000 --> 01:52:46,000
乃至于工具崇拜的一种体现

3053
01:52:46,000 --> 01:52:47,000
挺有意思

3054
01:52:47,000 --> 01:52:48,000
嗯

3055
01:52:48,000 --> 01:52:48,000
然后

3056
01:52:50,000 --> 01:52:51,000
我之前还觉得

3057
01:52:51,000 --> 01:52:53,000
有很有意思的一件事情就是

3058
01:52:53,000 --> 01:52:55,000
你有没有发现我们很多

3059
01:52:55,000 --> 01:52:56,000
呃

3060
01:52:57,000 --> 01:52:58,000
工具的图标

3061
01:52:58,000 --> 01:53:01,000
其实都是在试图

3062
01:53:01,000 --> 01:53:02,000
啊

3063
01:53:02,000 --> 01:53:05,000
去模拟那些

3064
01:53:05,000 --> 01:53:08,000
现实生活中非常古老的工具

3065
01:53:08,000 --> 01:53:09,000
比如说

3066
01:53:09,000 --> 01:53:12,000
应该是那个 Xcode 的图标

3067
01:53:12,000 --> 01:53:14,000
是一个原规是吧

3068
01:53:14,000 --> 01:53:14,000
对

3069
01:53:14,000 --> 01:53:16,000
是一个是一个原规

3070
01:53:16,000 --> 01:53:18,000
但这个原规是

3071
01:53:18,000 --> 01:53:19,000
呃

3072
01:53:19,000 --> 01:53:20,000
有一把尺子

3073
01:53:20,000 --> 01:53:21,000
一支笔和一个

3074
01:53:21,000 --> 01:53:23,000
什么东西组成的

3075
01:53:23,000 --> 01:53:27,000
但实际上这些东西在开发 app 的时候是根本用不到的

3076
01:53:27,000 --> 01:53:27,000
对吧

3077
01:53:27,000 --> 01:53:32,000
然后那个 debug 的图标是一个锤子还是一个一个扳手之类的

3078
01:53:32,000 --> 01:53:36,000
这些东西其实都是在暗示说我这个是个工具

3079
01:53:36,000 --> 01:53:41,000
然后我这个工具可以完成那些实体世界里面工具所能完成的事情

3080
01:53:41,000 --> 01:53:47,000
但实际上这些工具跟实体工具是完全不搭嘎的一个一批一批存在

3081
01:53:47,000 --> 01:53:49,000
但是我们却不得不借用这些

3082
01:53:49,000 --> 01:53:50,000
嗯

3083
01:53:50,000 --> 01:53:52,000
我们能够理解的暗语

3084
01:53:52,000 --> 01:53:53,000
呃

3085
01:53:53,000 --> 01:53:56,000
来画这么一个图标来表达出这样一个意思

3086
01:53:56,000 --> 01:54:00,000
就还挺有意思的

3087
01:54:00,000 --> 01:54:05,000
这这这其实这是某一种形式的隐喻吗

3088
01:54:05,000 --> 01:54:15,000
等于是对我们在讨论是要去你物化的同时却却没有办法不得不借助这些非常你物的东西来表达我们的意思

3089
01:54:15,000 --> 01:54:19,000
然后我也不知道

3090
01:54:19,000 --> 01:54:19,000
也许将来

3091
01:54:20,000 --> 01:54:31,000
虚拟的我们习惯的虚拟现实之后会会非常好奇说这个东西到底是什么这样一个这样一个锤子你你有多久没有试过锤子拿在手里是什么感觉

3092
01:54:31,000 --> 01:54:39,000
就甚至很说可能很多做这个 us 设计人根本就没有摸过那些什么啊什么尺规啊那些什么理科生干的事情

3093
01:54:39,000 --> 01:54:50,000
所以或者那个保存图标那个软盘现在对啊现在新生一代就是完全没有完全没有东西了说说那个笑话怎么说来着说是一个小朋友

3094
01:54:50,000 --> 01:54:50,000
嗯

3095
01:54:50,000 --> 01:54:58,000
看见爸爸拿的几几次的一个什么古董软盘说哎你竟然有一个保存图标的物理版本说高级非常神奇

3096
01:54:58,000 --> 01:55:01,000
对对

3097
01:55:01,000 --> 01:55:04,000
但我觉得这里可能还是有一个点

3098
01:55:04,000 --> 01:55:11,000
但可能在过往很多很多很久时间以前讨论过的就是说这个所谓的 skeumorphism

3099
01:55:11,000 --> 01:55:13,000
就是我们你物化的问题

3100
01:55:13,000 --> 01:55:20,000
我觉得就你越往后面走这种抽象层级越高之后可能很多人是比较难的啊

3101
01:55:20,000 --> 01:55:24,000
所以说这个是一个很难以去获得那么所谓的一个 reference

3102
01:55:24,000 --> 01:55:26,000
就是你得有一个什么参照物对吧

3103
01:55:26,000 --> 01:55:32,000
对特别是你那个工具的那个的越这个作用越不直接的情况下

3104
01:55:32,000 --> 01:55:38,000
你可能反而是越需要这种有一些什么你都在讲的为了隐喻的参考去指点你

3105
01:55:38,000 --> 01:55:42,000
他并不是说一定说能够让你说能够推测出他是一个什么样的作用

3106
01:55:42,000 --> 01:55:47,000
比如说我我很怀疑说你如果你不知道 xcode 是干什么的工具的一个人

3107
01:55:47,000 --> 01:55:49,000
你能看见他们的尺规能想出来他是干嘛的

3108
01:55:49,000 --> 01:55:52,000
可能是说你知道他是干嘛之后

3109
01:55:52,000 --> 01:55:56,000
你再联想到那么一个图标或联想到这么一个隐喻

3110
01:55:56,000 --> 01:55:58,000
就如果用 skeumorphism 的方法

3111
01:55:58,000 --> 01:56:01,000
就是说联想到他他代表了一个物理实力的什么东西

3112
01:56:01,000 --> 01:56:05,000
之后就想到啊是是你加深这么一个记忆

3113
01:56:05,000 --> 01:56:06,000
加深你们的理解的一个过程

3114
01:56:06,000 --> 01:56:10,000
而不是说真的是说帮助你从一开始从从零到有

3115
01:56:10,000 --> 01:56:15,000
从从从那个什么从一个零基础的这种东西去推特说他是他猜说他是干嘛

3116
01:56:15,000 --> 01:56:18,000
对正话上只是说是一个是一个 hint

3117
01:56:18,000 --> 01:56:19,000
是一个帮助你记忆的东西

3118
01:56:19,000 --> 01:56:19,000
对正话上只是说是一个是一个 hint

3119
01:56:19,000 --> 01:56:21,000
而不是帮助你理解的东西

3120
01:56:21,000 --> 01:56:25,000
对正话上小时候第一次看到那个 windows 里面的

3121
01:56:25,000 --> 01:56:29,000
呃 dl 的图标是一个一张一张纸

3122
01:56:29,000 --> 01:56:30,000
然后上面有个齿轮

3123
01:56:30,000 --> 01:56:31,000
当时

3124
01:56:31,000 --> 01:56:34,000
啄了半天说这到底是什么东西的

3125
01:56:34,000 --> 01:56:35,000
能不能删呢

3126
01:56:35,000 --> 01:56:37,000
为什么所有文件看起来都一样

3127
01:56:37,000 --> 01:56:39,000
因为那个时候主要的兴趣是打游戏

3128
01:56:39,000 --> 01:56:41,000
每个游戏的图标都不一样

3129
01:56:41,000 --> 01:56:42,000
可是这些一模一样的图标

3130
01:56:42,000 --> 01:56:44,000
我是不是都应该应该都没什么用吗

3131
01:56:44,000 --> 01:56:45,000
可以删掉吗

3132
01:56:45,000 --> 01:56:47,000
然后带我你是干嘛的呢

3133
01:56:47,000 --> 01:56:48,000
对

3134
01:56:48,000 --> 01:56:49,000
对

3136
01:57:19,000 --> 01:57:21,000
,变正法是德国人发明的

3137
01:57:21,000 --> 01:57:25,000
谢谢

3138
01:57:25,000 --> 01:57:27,000
那个资本主义也是德国人发明的

3139
01:57:27,000 --> 01:57:28,000
什么资本主义

3140
01:57:28,000 --> 01:57:29,000
共产主义

3141
01:57:29,000 --> 01:57:29,000
社会主义

3142
01:57:29,000 --> 01:57:33,000
共产主义也是你们德国人发明的

3143
01:57:33,000 --> 01:57:34,000
也不容易

3144
01:57:34,000 --> 01:57:35,000
不不客气不客气

3145
01:57:36,000 --> 01:57:37,000
哎

3146
01:57:37,000 --> 01:57:38,000
这么说来

3147
01:57:38,000 --> 01:57:40,000
你们德国还出产过很多祸害人类的东西啊

3148
01:57:40,000 --> 01:57:42,000
嗯

3149
01:57:42,000 --> 01:57:43,000
共产主义纳粹都来自德国

3150
01:57:46,000 --> 01:57:47,000
不过在某种程度上

3151
01:57:47,000 --> 01:57:49,000
他们还是蛮有共通点的

3152
01:57:49,000 --> 01:57:49,000
嗯

3153
01:57:49,000 --> 01:57:51,000
马路杀手汽车也来自于多禄

3154
01:57:51,000 --> 01:57:53,000
什么

3155
01:57:53,000 --> 01:57:54,000
啊

3156
01:57:54,000 --> 01:57:56,000
马路杀手汽车也来自于多禄

3157
01:57:56,000 --> 01:57:59,000
好吧

3158
01:57:59,000 --> 01:57:59,000
OK

3159
01:57:59,000 --> 01:58:01,000
OK

3160
01:58:01,000 --> 01:58:06,000
您刚刚收听到的是 IPN podcast 网络旗下的 IT 技术主题节目

3161
01:58:06,000 --> 01:58:07,000
内科恐慌

3162
01:58:07,000 --> 01:58:11,000
也欢迎你收听 IPN 旗下的其他六档 podcast

3163
01:58:11,000 --> 01:58:14,000
包括 softcore 技术主题节目 IT 公论

3164
01:58:14,000 --> 01:58:16,000
医疗主题节目太医来了

3165
01:58:16,000 --> 01:58:18,000
美食主题节目未知到

3166
01:58:18,000 --> 01:58:19,000
艺术主题节目也来自于多禄

3167
01:58:19,000 --> 01:58:20,000
流行通信

3168
01:58:20,000 --> 01:58:21,000
无主题节目无次元

3169
01:58:21,000 --> 01:58:23,000
故事主题节目 hi sorry

3170
01:58:23,000 --> 01:58:27,000
以及最新加入 IPN 的老牌影像节目

3171
01:58:27,000 --> 01:58:27,000
印影像

3172
01:58:27,000 --> 01:58:28,000
欢迎

3173
01:58:28,000 --> 01:58:31,000
感谢大家收听这期节目

3174
01:58:31,000 --> 01:58:32,000
也欢迎大家为我们捐款

3175
01:58:32,000 --> 01:58:34,000
捐款地址是 ipn.io

3176
01:58:34,000 --> 01:58:35,000
slash

3177
01:58:35,000 --> 01:58:35,000
kernelpanic

3178
01:58:35,000 --> 01:58:36,000
slash

3179
01:58:36,000 --> 01:58:37,000
donate

3180
01:58:37,000 --> 01:58:38,000
OK 了

3181
01:58:38,000 --> 01:58:38,000
哦

