1
00:00:00,000 --> 00:00:05,000
您正在收听内核恐慌一档大致以计算机科技为主题的娱乐 podcast

2
00:00:05,000 --> 00:00:08,000
我们号称硬核但是也没有什么干货

3
00:00:08,000 --> 00:00:10,000
想听人听不想听人就别听

4
00:00:10,000 --> 00:00:12,000
我们的网址是 pan.icu

5
00:00:12,000 --> 00:00:15,000
您可以在网站上找到订阅我们节目的方法

6
00:00:15,000 --> 00:00:17,000
以及联络我们的方式

7
00:00:17,000 --> 00:00:18,000
我是武涛

8
00:00:18,000 --> 00:00:19,000
我是 Rail

9
00:00:19,000 --> 00:00:23,000
今天节目开始之前我们做一个简单的 follow up

10
00:00:23,000 --> 00:00:24,000
好久没有做 follow up 了

11
00:00:24,000 --> 00:00:31,000
是针对上一期这个叫银狮的光猫内提到的几个问题

12
00:00:31,000 --> 00:00:33,000
我随便说一下后续吧

13
00:00:33,000 --> 00:00:35,000
第一个就是说那个银狮光猫案呢

14
00:00:35,000 --> 00:00:38,000
算是告破一半

15
00:00:38,000 --> 00:00:39,000
怎么个一半

16
00:00:39,000 --> 00:00:41,000
就是我发出去之后

17
00:00:41,000 --> 00:00:46,000
有这个我的那个光猫的生产厂家的朋友找过来

18
00:00:46,000 --> 00:00:47,000
跟我确认过那个猫

19
00:00:47,000 --> 00:00:52,000
那个那个那个那个那首诗确实是他们光猫里面的设备发出来的

20
00:00:52,000 --> 00:00:53,000
不是外面的设备

21
00:00:53,000 --> 00:00:54,000
也不是我的基础网站里面

22
00:00:54,000 --> 00:00:55,000
其他设备发出来

23
00:00:55,000 --> 00:00:59,000
他们在他们的那个测试环境里面也浮现了这个东西

24
00:00:59,000 --> 00:01:03,000
然后那个产生那个诗的选项也找到了

25
00:01:03,000 --> 00:01:04,000
就是那个环路检测

26
00:01:04,000 --> 00:01:05,000
所以我猜对了

27
00:01:05,000 --> 00:01:06,000
对他你猜对了

28
00:01:06,000 --> 00:01:08,000
他没他不是每十秒发一个包吗

29
00:01:08,000 --> 00:01:10,000
那就用于环路检测了

30
00:01:10,000 --> 00:01:11,000
但是呢

31
00:01:11,000 --> 00:01:14,000
就是没有找到这个东西是谁写的

32
00:01:14,000 --> 00:01:16,000
也不知道为什么是这首诗

33
00:01:16,000 --> 00:01:21,000
我说过的光猫型号是上海贝尔阿尔卡特生产制造的嘛

34
00:01:21,000 --> 00:01:24,000
所以目前也不知道是贝尔的工程师干的

35
00:01:24,000 --> 00:01:24,000
还是

36
00:01:24,000 --> 00:01:25,000
是阿卡特工程师干的

37
00:01:25,000 --> 00:01:28,000
还是说上海贝尔阿卡特后来的工程师干的

38
00:01:28,000 --> 00:01:29,000
目前找不到人

39
00:01:29,000 --> 00:01:31,000
因为也不知道这个 former 到底谁写的

40
00:01:31,000 --> 00:01:32,000
就可能也比较久远

41
00:01:32,000 --> 00:01:34,000
暴露了他们没有 Warship Control 是吧

42
00:01:34,000 --> 00:01:36,000
或者说就是找我那个朋友

43
00:01:36,000 --> 00:01:39,000
他不是做那块开发的嘛

44
00:01:39,000 --> 00:01:39,000
所以他也不清楚

45
00:01:39,000 --> 00:01:41,000
但没有这个权限去查看那个

46
00:01:41,000 --> 00:01:44,000
到底这个是谁谁卡密的进去的

47
00:01:44,000 --> 00:01:44,000
我也不知道他们有没有

48
00:01:44,000 --> 00:01:45,000
有可能是没有的对吧

49
00:01:45,000 --> 00:01:46,000
这个我就不清楚了

50
00:01:46,000 --> 00:01:47,000
他们内部的问题

51
00:01:47,000 --> 00:01:48,000
但就说至少

52
00:01:48,000 --> 00:01:50,000
我说这个算是告破了一半

53
00:01:50,000 --> 00:01:51,000
就是说找到了这个源头

54
00:01:51,000 --> 00:01:54,000
找到了他这个是干嘛用的

55
00:01:54,000 --> 00:01:54,000
但是不知道

56
00:01:54,000 --> 00:01:55,000
是谁写进去的

57
00:01:55,000 --> 00:01:57,000
以及为什么是这首诗对吧

58
00:01:57,000 --> 00:01:58,000
OK

59
00:01:58,000 --> 00:01:59,000
这是第一个 follow

60
00:01:59,000 --> 00:02:00,000
第二个 follow

61
00:02:00,000 --> 00:02:02,000
就像是我们不是花了很长时间在讨论

62
00:02:02,000 --> 00:02:03,000
到底能不能够用

63
00:02:03,000 --> 00:02:05,000
已有房子里面

64
00:02:05,000 --> 00:02:07,000
用于接电视的那个同轴电缆

65
00:02:07,000 --> 00:02:11,000
来延伸这个 WiFi 的信号的那个距离嘛

66
00:02:11,000 --> 00:02:12,000
对吧

67
00:02:12,000 --> 00:02:13,000
目前来看呢

68
00:02:13,000 --> 00:02:15,000
有两种观点

69
00:02:15,000 --> 00:02:17,000
我们到时候也把这两个连接

70
00:02:17,000 --> 00:02:20,000
是一个 SuperUter 上面的这个回答放进去

71
00:02:20,000 --> 00:02:22,000
就是说正常你直接接

72
00:02:22,000 --> 00:02:23,000
就是上次我说那个方法

73
00:02:23,000 --> 00:02:24,000
你直接把那根

74
00:02:24,000 --> 00:02:25,000
那根同轴电缆

75
00:02:25,000 --> 00:02:27,000
就墙里面的一个同轴电缆

76
00:02:27,000 --> 00:02:28,000
给电视用的

77
00:02:28,000 --> 00:02:31,000
当成 WiFi 天线来延长是不行的

78
00:02:31,000 --> 00:02:32,000
因为它的电阻不对

79
00:02:32,000 --> 00:02:34,000
那个这个同轴电缆的电阻

80
00:02:34,000 --> 00:02:36,000
电阻好像说是

81
00:02:36,000 --> 00:02:37,000
你等我确认一下哈

82
00:02:37,000 --> 00:02:39,000
还是 75 欧姆吧

83
00:02:39,000 --> 00:02:41,000
应该是对 75 欧的电阻

84
00:02:41,000 --> 00:02:46,000
但是 WiFi 天线的那个就是那个叫这个专业名词

85
00:02:46,000 --> 00:02:48,000
我找到了叫做溃线

86
00:02:48,000 --> 00:02:52,000
就是这个这个就是延长 WiFi 的天线天线

87
00:02:52,000 --> 00:02:54,000
那个那个那个导线

88
00:02:54,000 --> 00:02:56,000
的电阻是 50 欧

89
00:02:56,000 --> 00:02:59,000
所以正常你直接接上去肯定是不行的

90
00:02:59,000 --> 00:03:00,000
因为信号很快就衰减了

91
00:03:00,000 --> 00:03:01,000
但是呢

92
00:03:01,000 --> 00:03:05,000
有一种设备是可以转化一下

93
00:03:05,000 --> 00:03:08,000
就是它在那个通脱电缆两端都接上一个

94
00:03:08,000 --> 00:03:09,000
类似于转接器一样的东西

95
00:03:09,000 --> 00:03:12,000
可以把一个 WiFi 的信号

96
00:03:12,000 --> 00:03:14,000
转成那个通脱电缆

97
00:03:14,000 --> 00:03:16,000
适合类似于你想象

98
00:03:16,000 --> 00:03:17,000
它是一个放弹或者怎么样

99
00:03:17,000 --> 00:03:19,000
然后把它传达到另外一端

100
00:03:19,000 --> 00:03:20,000
最后再解码出来

101
00:03:20,000 --> 00:03:22,000
然后再重新转为 WiFi 能用的

102
00:03:22,000 --> 00:03:23,000
就这种东西是有的

103
00:03:23,000 --> 00:03:24,000
但这个设备有点贵

104
00:03:24,000 --> 00:03:26,000
而且国内我在淘宝

105
00:03:26,000 --> 00:03:27,000
在天猫

106
00:03:27,000 --> 00:03:28,000
在京东上都没有找到

107
00:03:28,000 --> 00:03:30,000
但是在亚马逊上好像是有的

108
00:03:30,000 --> 00:03:32,000
那个东西叫做 MOCA

109
00:03:32,000 --> 00:03:34,000
我不知道这个

110
00:03:34,000 --> 00:03:36,000
这个这个是什么那个缩写

111
00:03:36,000 --> 00:03:37,000
然后呢

112
00:03:37,000 --> 00:03:39,000
我还发现一个特别好玩的东西

113
00:03:39,000 --> 00:03:41,000
叫做 WiFi over coax

114
00:03:41,000 --> 00:03:44,000
就是专门干这件事情的

115
00:03:44,000 --> 00:03:47,000
就是专门在用那个通脱电缆

116
00:03:47,000 --> 00:03:49,000
延长 WiFi 信号的一个解决方案

117
00:03:49,000 --> 00:03:52,000
当然就是要用到刚才那些东西嘛

118
00:03:52,000 --> 00:03:54,000
所以就解决这个电阻不匹配

119
00:03:54,000 --> 00:03:54,000
的问题

120
00:03:54,000 --> 00:03:57,000
大家如果生活在国外

121
00:03:57,000 --> 00:03:58,000
然后你那个房子

122
00:03:58,000 --> 00:04:00,000
明明没有走网线

123
00:04:00,000 --> 00:04:01,000
只有这个通脱电缆

124
00:04:01,000 --> 00:04:03,000
你又想解决这个信号的问题的话

125
00:04:03,000 --> 00:04:04,000
你可以去亚马逊上搜一下

126
00:04:04,000 --> 00:04:05,000
MOCA

127
00:04:05,000 --> 00:04:06,000
M O C A

128
00:04:06,000 --> 00:04:08,000
那个 M C A 都大写

129
00:04:08,000 --> 00:04:09,000
O 是小写

130
00:04:09,000 --> 00:04:09,000
这么一个设备

131
00:04:09,000 --> 00:04:12,000
它可以完成这个东西

132
00:04:12,000 --> 00:04:15,000
然后我们也在我们的听众群里面

133
00:04:15,000 --> 00:04:17,000
就是 Telegram 那个听众群里面

134
00:04:17,000 --> 00:04:18,000
有在海外的听众朋友

135
00:04:18,000 --> 00:04:19,000
他确实也买了

136
00:04:19,000 --> 00:04:19,000
用过这个东西

137
00:04:19,000 --> 00:04:20,000
好像效果还不错

138
00:04:20,000 --> 00:04:21,000
能够达到千兆吧

139
00:04:21,000 --> 00:04:22,000
他应该说是

140
00:04:22,000 --> 00:04:24,000
如果你不是一定要

141
00:04:24,000 --> 00:04:25,000
延长这个 WiFi 信号的话

142
00:04:25,000 --> 00:04:27,000
可以直接把网线

143
00:04:27,000 --> 00:04:28,000
转到通脱电缆上

144
00:04:28,000 --> 00:04:30,000
就那个转接头非常简陋

145
00:04:30,000 --> 00:04:33,000
但是这 JustWorks 也是可以的

146
00:04:33,000 --> 00:04:34,000
对就这种方案也是可行的

147
00:04:34,000 --> 00:04:35,000
但就具体怎么操作

148
00:04:35,000 --> 00:04:37,000
大家可能要去自己研究了一下

149
00:04:37,000 --> 00:04:39,000
因为我房子里面有通脱电缆

150
00:04:39,000 --> 00:04:41,000
但我实在是不想搞它

151
00:04:41,000 --> 00:04:42,000
OK

152
00:04:42,000 --> 00:04:44,000
好 OK

153
00:04:44,000 --> 00:04:45,000
就是 Full Up

154
00:04:45,000 --> 00:04:47,000
那今天我们开始今天的正题

155
00:04:47,000 --> 00:04:48,000
今天有点特别

156
00:04:48,000 --> 00:04:50,000
我们好久好久

157
00:04:50,000 --> 00:04:51,000
没有邀请过嘉宾了

158
00:04:51,000 --> 00:04:53,000
今天我们邀请到一位

159
00:04:53,000 --> 00:04:53,000
重磅

160
00:04:53,000 --> 00:04:54,000
嘉宾

161
00:04:54,000 --> 00:04:56,000
就是我们的老朋友

162
00:04:56,000 --> 00:04:58,000
这期我们又是跪着录的

163
00:04:58,000 --> 00:04:58,000
可以说

164
00:04:58,000 --> 00:05:01,000
这期我们邀请到我的一个好朋友

165
00:05:01,000 --> 00:05:03,000
是大家

166
00:05:03,000 --> 00:05:04,000
可能很多人都用过

167
00:05:04,000 --> 00:05:07,000
网络开发调试工具

168
00:05:07,000 --> 00:05:08,000
Search 的作者

169
00:05:08,000 --> 00:05:09,000
雷亚诚

170
00:05:09,000 --> 00:05:10,000
亚诚你好

171
00:05:10,000 --> 00:05:12,000
两位老师好

172
00:05:12,000 --> 00:05:14,000
要不亚诚

173
00:05:14,000 --> 00:05:15,000
你稍微简单介绍一下自己

174
00:05:15,000 --> 00:05:19,000
我觉得可能我自己的软件的

175
00:05:19,000 --> 00:05:21,000
受众和你们的听众

176
00:05:21,000 --> 00:05:22,000
其实应该覆盖变挺大的

177
00:05:22,000 --> 00:05:23,000
所以

178
00:05:23,000 --> 00:05:25,000
还需要再介绍一下吗

179
00:05:25,000 --> 00:05:27,000
我也不知道该怎么样去介绍

180
00:05:27,000 --> 00:05:29,000
东西应该是不用介绍的

181
00:05:29,000 --> 00:05:30,000
但是大家应该对你这个人

182
00:05:30,000 --> 00:05:31,000
还是不太熟悉

183
00:05:31,000 --> 00:05:33,000
你有什么可以给听众朋友们分享

184
00:05:33,000 --> 00:05:35,000
就是介绍一下自己的

185
00:05:35,000 --> 00:05:36,000
对

186
00:05:36,000 --> 00:05:38,000
然后有什么我们想知道的

187
00:05:38,000 --> 00:05:41,000
我们会接着再代替听众来提问的

188
00:05:41,000 --> 00:05:42,000
行

189
00:05:42,000 --> 00:05:44,000
那我就简单的说一下

190
00:05:44,000 --> 00:05:45,000
把剩下的靠你们提问

191
00:05:45,000 --> 00:05:47,000
我现在的身份的话

192
00:05:47,000 --> 00:05:49,000
就是专职的

193
00:05:49,000 --> 00:05:50,000
iOS 的独立开发者

194
00:05:50,000 --> 00:05:52,000
然后之前的话

195
00:05:52,000 --> 00:05:53,000
可能

196
00:05:53,000 --> 00:05:55,000
主要是创业者的一个身份

197
00:05:55,000 --> 00:05:56,000
干过很多一些

198
00:05:56,000 --> 00:05:59,000
很标准的一些创业的事情

199
00:05:59,000 --> 00:06:01,000
甚至还做过一些像技术猎头

200
00:06:01,000 --> 00:06:03,000
这样的一些和技术都已经快

201
00:06:03,000 --> 00:06:05,000
越来越没相关的一些事情

202
00:06:05,000 --> 00:06:07,000
然后反正从 15 年开始

203
00:06:07,000 --> 00:06:10,000
然后变成了一个专职的独立开发者

204
00:06:10,000 --> 00:06:11,000
现在的话

205
00:06:11,000 --> 00:06:12,000
主要的产品是

206
00:06:12,000 --> 00:06:14,000
Search 和 Airpass 两款

207
00:06:14,000 --> 00:06:15,000
然后同时的话

208
00:06:15,000 --> 00:06:17,000
还有一些客户的项目

209
00:06:17,000 --> 00:06:18,000
作为技术顾问去参与

210
00:06:18,000 --> 00:06:19,000
大概就这些

211
00:06:19,000 --> 00:06:22,000
Airpass 这个可能很多人不知道

212
00:06:22,000 --> 00:06:23,000
是一个密码的项目

213
00:06:23,000 --> 00:06:23,000
或者是一个密码管理器

214
00:06:23,000 --> 00:06:25,000
是应该是比那个

215
00:06:25,000 --> 00:06:26,000
One Password 要好用的

216
00:06:26,000 --> 00:06:27,000
好 谢谢

217
00:06:27,000 --> 00:06:29,000
但这个相对来说比较小众

218
00:06:29,000 --> 00:06:30,000
但密码管理器

219
00:06:30,000 --> 00:06:32,000
我知道我们之前节目里面

220
00:06:32,000 --> 00:06:33,000
还有单独讲过一期

221
00:06:33,000 --> 00:06:34,000
不过那个时候你还没有写

222
00:06:34,000 --> 00:06:37,000
所以我们如果下次再聊的时候

223
00:06:37,000 --> 00:06:39,000
可以到时候再专门介绍一下

224
00:06:39,000 --> 00:06:41,000
但虽然今天我们邀请了亚诚

225
00:06:41,000 --> 00:06:43,000
但是我们今天不聊 Search

226
00:06:43,000 --> 00:06:44,000
也不聊 Airpass

227
00:06:44,000 --> 00:06:46,000
甚至也不聊这个

228
00:06:46,000 --> 00:06:48,000
可以最后有一点相关

229
00:06:48,000 --> 00:06:50,000
但是甚至也不主要聊独立开发

230
00:06:50,000 --> 00:06:52,000
今天我们其实是要聊苹果

231
00:06:52,000 --> 00:06:52,000
对不对

232
00:06:52,000 --> 00:06:53,000
是的

233
00:06:53,000 --> 00:06:54,000
这个事也比较简单

234
00:06:54,000 --> 00:06:56,000
是因为目前我们三个里面

235
00:06:56,000 --> 00:06:57,000
只有亚诚现在

236
00:06:57,000 --> 00:06:59,000
你是买了那个 M 1 芯片的 MacBook Pro

237
00:06:59,000 --> 00:07:00,000
对吧

238
00:07:00,000 --> 00:07:01,000
对 是的

239
00:07:01,000 --> 00:07:03,000
好像是我就比较急

240
00:07:03,000 --> 00:07:05,000
所以你是在发布的那一天

241
00:07:05,000 --> 00:07:06,000
就是可以定的时候

242
00:07:06,000 --> 00:07:07,000
第一时间定的吧

243
00:07:07,000 --> 00:07:09,000
对 而且我当时第一时间定了之后

244
00:07:09,000 --> 00:07:12,000
由于它标准配置是 8 G 内存

245
00:07:12,000 --> 00:07:14,000
要定制版才能是 16 G 内存

246
00:07:14,000 --> 00:07:17,000
定制了之后会使得发货周期延迟到

247
00:07:17,000 --> 00:07:19,000
我印象中正常发货时间

248
00:07:19,000 --> 00:07:21,000
应该是 20 号还是 19 号左右

249
00:07:21,000 --> 00:07:22,000
我特别急的

250
00:07:22,000 --> 00:07:23,000
又等不了

251
00:07:23,000 --> 00:07:25,000
然后拖了一个 Apple 的朋友

252
00:07:25,000 --> 00:07:26,000
让他帮我查了一下

253
00:07:26,000 --> 00:07:27,000
现在实体店的库存

254
00:07:27,000 --> 00:07:29,000
发现离我家比较近的一家店

255
00:07:29,000 --> 00:07:31,000
还有 16 G 的一个高配版

256
00:07:31,000 --> 00:07:33,000
我就立刻跑到店里去

257
00:07:33,000 --> 00:07:34,000
现场拿了它回来

258
00:07:34,000 --> 00:07:36,000
然后把原来的订单给取消了

259
00:07:36,000 --> 00:07:37,000
这里有个小知识

260
00:07:37,000 --> 00:07:39,000
就是说我们通常认为

261
00:07:39,000 --> 00:07:40,000
苹果店里面只有那种

262
00:07:40,000 --> 00:07:42,000
所谓的标配版

263
00:07:42,000 --> 00:07:42,000
对吧

264
00:07:42,000 --> 00:07:43,000
比如说通常它

265
00:07:43,000 --> 00:07:44,000
苹果它在网站上

266
00:07:44,000 --> 00:07:45,000
它给一个 Mac 的配置

267
00:07:45,000 --> 00:07:47,000
它会给一个低配和一个高配

268
00:07:47,000 --> 00:07:48,000
这两个都是标准配置

269
00:07:48,000 --> 00:07:50,000
你不用去定制

270
00:07:50,000 --> 00:07:52,000
就可以直接在店里买到的

271
00:07:52,000 --> 00:07:52,000
对吧

272
00:07:52,000 --> 00:07:52,000
但是这次

273
00:07:52,000 --> 00:07:53,000
好像有点不一样

274
00:07:53,000 --> 00:07:53,000
对不对

275
00:07:53,000 --> 00:07:54,000
这次是因为

276
00:07:54,000 --> 00:07:55,000
它的两个标准配置

277
00:07:55,000 --> 00:07:56,000
都只有 8 G 那次

278
00:07:56,000 --> 00:07:58,000
然后 16 G 理论上

279
00:07:58,000 --> 00:07:59,000
按照官网的逻辑

280
00:07:59,000 --> 00:08:01,000
你是需要定制才可以选的

281
00:08:01,000 --> 00:08:02,000
对 是的

282
00:08:02,000 --> 00:08:03,000
但是其实我和朋友聊了一下

283
00:08:03,000 --> 00:08:05,000
他说一般的话

284
00:08:05,000 --> 00:08:06,000
店里面会备

285
00:08:06,000 --> 00:08:08,000
大概 5 台左右的顶配机器

286
00:08:08,000 --> 00:08:09,000
就是每家店都会

287
00:08:09,000 --> 00:08:10,000
有这么一个储备

288
00:08:10,000 --> 00:08:11,000
所以说的话

289
00:08:11,000 --> 00:08:12,000
如果就是不确定的话

290
00:08:12,000 --> 00:08:14,000
可以提前去他们官网上

291
00:08:14,000 --> 00:08:15,000
找到一个店的

292
00:08:15,000 --> 00:08:16,000
一个店的直接的

293
00:08:16,000 --> 00:08:17,000
博打他们的店的电话

294
00:08:17,000 --> 00:08:18,000
然后打电话去问一下

295
00:08:18,000 --> 00:08:20,000
他们现在有没有高配的库存

296
00:08:20,000 --> 00:08:21,000
然后再过去

297
00:08:21,000 --> 00:08:22,000
直接就可以购买

298
00:08:22,000 --> 00:08:22,000
所以

299
00:08:22,000 --> 00:08:24,000
他们应对的场景

300
00:08:24,000 --> 00:08:24,000
就是一个土豪

301
00:08:24,000 --> 00:08:25,000
走进苹果店说

302
00:08:25,000 --> 00:08:27,000
我要你们店里最好的电脑

303
00:08:27,000 --> 00:08:28,000
你给我拿一台出来

304
00:08:28,000 --> 00:08:28,000
对

305
00:08:28,000 --> 00:08:30,000
我感觉应该是这个意思

306
00:08:30,000 --> 00:08:31,000
他比如说

307
00:08:31,000 --> 00:08:32,000
你去买顶配

308
00:08:32,000 --> 00:08:33,000
我记得

309
00:08:33,000 --> 00:08:36,000
这次的 M 1 的 MacBook

310
00:08:36,000 --> 00:08:37,000
他能选的

311
00:08:37,000 --> 00:08:38,000
只有是内存

312
00:08:38,000 --> 00:08:39,000
是可以变质

313
00:08:39,000 --> 00:08:40,000
就是标配的 8 G

314
00:08:40,000 --> 00:08:41,000
和高配的 16 G

315
00:08:41,000 --> 00:08:42,000
然后唯一能选的

316
00:08:42,000 --> 00:08:43,000
就是 SSD 的配置了

317
00:08:43,000 --> 00:08:44,000
对吧

318
00:08:44,000 --> 00:08:44,000
SSD 的

319
00:08:44,000 --> 00:08:46,000
它的高配的

320
00:08:46,000 --> 00:08:47,000
能最多是配到哪里

321
00:08:47,000 --> 00:08:47,000
他店里面那台

322
00:08:47,000 --> 00:08:49,000
店里的机器

323
00:08:49,000 --> 00:08:51,000
我记得都是 1 TB 的

324
00:08:51,000 --> 00:08:51,000
就是

325
00:08:51,000 --> 00:08:52,000
像这次

326
00:08:52,000 --> 00:08:53,000
三个选项

327
00:08:53,000 --> 00:08:53,000
512

328
00:08:53,000 --> 00:08:54,000
1 T 和 2 T

329
00:08:54,000 --> 00:08:56,000
我印象中全是 1 T

330
00:08:56,000 --> 00:08:57,000
没有 2 T 的那个机器

331
00:08:57,000 --> 00:08:58,000
所以其实也没有

332
00:08:58,000 --> 00:08:59,000
真的到最顶

333
00:08:59,000 --> 00:09:00,000
那个就是

334
00:09:00,000 --> 00:09:01,000
就是

335
00:09:01,000 --> 00:09:03,000
所有的加到最大

336
00:09:03,000 --> 00:09:03,000
最贵的那款

337
00:09:03,000 --> 00:09:04,000
它还是没有的

338
00:09:04,000 --> 00:09:05,000
对

339
00:09:05,000 --> 00:09:06,000
而且颜色也只有

340
00:09:06,000 --> 00:09:06,000
深空灰

341
00:09:06,000 --> 00:09:08,000
就深空灰的 16 G 的

342
00:09:08,000 --> 00:09:09,000
1 TB 的机器

343
00:09:09,000 --> 00:09:09,000
这个机器好像

344
00:09:09,000 --> 00:09:10,000
是有个

345
00:09:10,000 --> 00:09:11,000
三四台左右

346
00:09:11,000 --> 00:09:13,000
就是你颜色也没得选

347
00:09:13,000 --> 00:09:14,000
如果你拿这台

348
00:09:14,000 --> 00:09:15,000
这个 16 G 的配置的话

349
00:09:15,000 --> 00:09:16,000
对

350
00:09:16,000 --> 00:09:16,000
是的

351
00:09:16,000 --> 00:09:16,000
没错

352
00:09:16,000 --> 00:09:17,000
所以但是本来

353
00:09:17,000 --> 00:09:18,000
我就是要选的话

354
00:09:18,000 --> 00:09:19,000
就选深空灰

355
00:09:19,000 --> 00:09:20,000
所以说这个倒是无所谓

356
00:09:20,000 --> 00:09:20,000
就刚好

357
00:09:20,000 --> 00:09:21,000
他们其实还是有一些

358
00:09:21,000 --> 00:09:22,000
这个大数据

359
00:09:22,000 --> 00:09:23,000
去支撑这个决策

360
00:09:23,000 --> 00:09:24,000
说一般

361
00:09:24,000 --> 00:09:25,000
买这种配置的人

362
00:09:25,000 --> 00:09:26,000
他不会选那种

363
00:09:26,000 --> 00:09:28,000
比较稍气的颜色

364
00:09:28,000 --> 00:09:28,000
而且这次

365
00:09:28,000 --> 00:09:29,000
其实那个颜色

366
00:09:29,000 --> 00:09:31,000
只有深空灰和银色

367
00:09:31,000 --> 00:09:32,000
都是两个比较保守

368
00:09:32,000 --> 00:09:33,000
和传统的颜色

369
00:09:33,000 --> 00:09:34,000
也没过太大的区别

370
00:09:34,000 --> 00:09:35,000
SKU 数量

371
00:09:35,000 --> 00:09:37,000
是要比较简单的是吧

372
00:09:37,000 --> 00:09:38,000
对

373
00:09:38,000 --> 00:09:39,000
是的

374
00:09:39,000 --> 00:09:40,000
OK

375
00:09:40,000 --> 00:09:41,000
所以其实

376
00:09:41,000 --> 00:09:42,000
对土豪

377
00:09:42,000 --> 00:09:43,000
还是没有那么的友好

378
00:09:43,000 --> 00:09:43,000
对吧

379
00:09:43,000 --> 00:09:44,000
不能说我想买啥

380
00:09:44,000 --> 00:09:45,000
买啥

381
00:09:45,000 --> 00:09:47,000
你给我最顶的

382
00:09:47,000 --> 00:09:47,000
那个不在乎钱

383
00:09:47,000 --> 00:09:49,000
Money is not an issue

384
00:09:49,000 --> 00:09:49,000
的时候

385
00:09:49,000 --> 00:09:50,000
也没有买

386
00:09:50,000 --> 00:09:51,000
还是得去网上定制

387
00:09:51,000 --> 00:09:53,000
我觉得要是真土豪的话

388
00:09:53,000 --> 00:09:55,000
可能不会在意

389
00:09:55,000 --> 00:09:56,000
是 M 1 还是什么

390
00:09:56,000 --> 00:09:57,000
直接来一个 Mac Pro

391
00:09:57,000 --> 00:09:59,000
就直接带走了是吧

392
00:09:59,000 --> 00:10:01,000
这好像是个误偏见

393
00:10:01,000 --> 00:10:04,000
土豪 stereotype

394
00:10:04,000 --> 00:10:06,000
所以目前你看

395
00:10:06,000 --> 00:10:07,000
就是我们网上

396
00:10:07,000 --> 00:10:07,000
看了一些

397
00:10:07,000 --> 00:10:10,000
各种媒体网站的测评

398
00:10:10,000 --> 00:10:12,000
但是我们聊一聊

399
00:10:12,000 --> 00:10:14,000
你实际使用下来的感受

400
00:10:14,000 --> 00:10:15,000
就是跟他们测评的

401
00:10:15,000 --> 00:10:16,000
你觉得有多大差异

402
00:10:16,000 --> 00:10:18,000
这个其实我作为

403
00:10:18,000 --> 00:10:20,000
最早就参与到

404
00:10:20,000 --> 00:10:20,000
那个

405
00:10:20,000 --> 00:10:22,000
ARM 芯片版本的

406
00:10:22,000 --> 00:10:23,000
那个 Apple 的开发的

407
00:10:23,000 --> 00:10:24,000
开发者来说

408
00:10:24,000 --> 00:10:25,000
因为 DTK 我早拿到了

409
00:10:25,000 --> 00:10:27,000
对你是有 DTK 的

410
00:10:27,000 --> 00:10:28,000
对是的

411
00:10:28,000 --> 00:10:29,000
但是 DTK 的话

412
00:10:29,000 --> 00:10:30,000
由于受协议限制

413
00:10:30,000 --> 00:10:31,000
我也没有

414
00:10:31,000 --> 00:10:32,000
我还没有仔细去看

415
00:10:32,000 --> 00:10:33,000
在现在这个状态下

416
00:10:33,000 --> 00:10:35,000
我还能不能给他

417
00:10:35,000 --> 00:10:37,000
公开的发表一些 review

418
00:10:37,000 --> 00:10:37,000
一些意见

419
00:10:37,000 --> 00:10:40,000
我想我想一想

420
00:10:40,000 --> 00:10:41,000
我觉得应该

421
00:10:41,000 --> 00:10:42,000
没什么太大问题吧

422
00:10:42,000 --> 00:10:45,000
所以这个是有 NDA 的是吧

423
00:10:45,000 --> 00:10:46,000
DTK 是有 NDA 的

424
00:10:46,000 --> 00:10:47,000
对这是有 NDA 的

425
00:10:47,000 --> 00:10:48,000
它官方提的是

426
00:10:48,000 --> 00:10:49,000
我不可以在

427
00:10:49,000 --> 00:10:50,000
public 的参数

428
00:10:50,000 --> 00:10:51,000
我去进去

429
00:10:51,000 --> 00:10:51,000
它要进行 review

430
00:10:51,000 --> 00:10:54,000
但是好像我没有仔细看

431
00:10:54,000 --> 00:10:55,000
它有没有一个期限

432
00:10:55,000 --> 00:10:56,000
就到什么时间解禁

433
00:10:56,000 --> 00:10:57,000
好像是没有的

434
00:10:57,000 --> 00:10:59,000
那我为了避免

435
00:10:59,000 --> 00:11:01,000
踩到这个坑里

436
00:11:01,000 --> 00:11:02,000
我还是尽量就不提它吧

437
00:11:02,000 --> 00:11:03,000
OK 我们就假装

438
00:11:03,000 --> 00:11:04,000
它不存在

439
00:11:04,000 --> 00:11:05,000
对我们谈论它

440
00:11:05,000 --> 00:11:06,000
但这并不是一个 review

441
00:11:06,000 --> 00:11:07,000
明白

442
00:11:07,000 --> 00:11:09,000
我就是在想打这个擦边球

443
00:11:09,000 --> 00:11:11,000
就是之前通过

444
00:11:11,000 --> 00:11:12,000
用 DTK 的时候

445
00:11:12,000 --> 00:11:14,000
我就能感受到

446
00:11:14,000 --> 00:11:16,000
这个苹果的这个 ARM 芯片

447
00:11:16,000 --> 00:11:17,000
这个 A 系列芯片的话

448
00:11:17,000 --> 00:11:18,000
很有可能

449
00:11:18,000 --> 00:11:20,000
它之后出来的正式产品

450
00:11:20,000 --> 00:11:20,000
会

451
00:11:20,000 --> 00:11:21,000
更牛逼

452
00:11:21,000 --> 00:11:22,000
就是原来已经

453
00:11:22,000 --> 00:11:24,000
其实很牛逼了

454
00:11:24,000 --> 00:11:26,000
但是那个等到一个

455
00:11:26,000 --> 00:11:27,000
毕竟但是那块芯片的话

456
00:11:27,000 --> 00:11:28,000
是 ALRZ

457
00:11:28,000 --> 00:11:30,000
是那个 iPad 之前用的芯片

458
00:11:30,000 --> 00:11:31,000
所以的话

459
00:11:31,000 --> 00:11:32,000
那么如果它本身

460
00:11:32,000 --> 00:11:33,000
就是为移动设备

461
00:11:33,000 --> 00:11:35,000
为低功耗设备设计的

462
00:11:35,000 --> 00:11:37,000
那如果是在这种基础上

463
00:11:37,000 --> 00:11:38,000
在为 MacBook

464
00:11:38,000 --> 00:11:40,000
或是 MacBook Pro 的话

465
00:11:40,000 --> 00:11:42,000
然后去更优化的

466
00:11:42,000 --> 00:11:43,000
设计一块芯片

467
00:11:43,000 --> 00:11:44,000
那它出来的效果

468
00:11:44,000 --> 00:11:45,000
应该是非常劲爆的

469
00:11:45,000 --> 00:11:47,000
然后确实的话

470
00:11:47,000 --> 00:11:48,000
从这几天的一个

471
00:11:48,000 --> 00:11:49,000
不管是测试

472
00:11:49,000 --> 00:11:50,000
还是使用来说

473
00:11:50,000 --> 00:11:51,000
都非常的

474
00:11:51,000 --> 00:11:53,000
让我感觉很兴奋

475
00:11:53,000 --> 00:11:54,000
这确实是一个

476
00:11:54,000 --> 00:11:56,000
可能有化石代意义的产品的

477
00:11:56,000 --> 00:11:57,000
这么一个进步

478
00:11:57,000 --> 00:11:59,000
就按我们这个行业里面的话说

479
00:11:59,000 --> 00:12:00,000
就是一屁股挤爆了

480
00:12:00,000 --> 00:12:02,000
这个英特尔的牙膏

481
00:12:02,000 --> 00:12:02,000
对吧

482
00:12:02,000 --> 00:12:03,000
对我自己的话说

483
00:12:03,000 --> 00:12:04,000
是不是把英特尔

484
00:12:04,000 --> 00:12:05,000
按在地板上摩擦

485
00:12:05,000 --> 00:12:06,000
这地板已经看

486
00:12:06,000 --> 00:12:07,000
快按穿了

487
00:12:07,000 --> 00:12:09,000
已经按出了一个棺材来了

488
00:12:09,000 --> 00:12:10,000
可以把英特尔

489
00:12:10,000 --> 00:12:12,000
盖棺定论了已经

490
00:12:12,000 --> 00:12:14,000
我们看到网上的测评

491
00:12:14,000 --> 00:12:15,000
看性能基本上都说是这种

492
00:12:15,000 --> 00:12:18,000
我们能看前面的这个定语

493
00:12:18,000 --> 00:12:19,000
都是什么 massive improvement

494
00:12:19,000 --> 00:12:20,000
就非常

495
00:12:20,000 --> 00:12:22,000
就是通常是吊打的

496
00:12:22,000 --> 00:12:23,000
至少我们看到那个数字

497
00:12:23,000 --> 00:12:24,000
跑分的

498
00:12:24,000 --> 00:12:25,000
跑分有很多指标

499
00:12:25,000 --> 00:12:26,000
我们看最常见的

500
00:12:26,000 --> 00:12:27,000
几个什么 kickbench

501
00:12:27,000 --> 00:12:28,000
什么那个

502
00:12:28,000 --> 00:12:29,000
什么那个

503
00:12:29,000 --> 00:12:30,000
那个叫什么 spec 那些

504
00:12:30,000 --> 00:12:32,000
对都是可能提高了

505
00:12:32,000 --> 00:12:33,000
百分之七八十

506
00:12:33,000 --> 00:12:34,000
这种这种级别的

507
00:12:34,000 --> 00:12:35,000
性能的提升

508
00:12:35,000 --> 00:12:37,000
很多网站的论述

509
00:12:37,000 --> 00:12:38,000
就是一开始

510
00:12:38,000 --> 00:12:39,000
我们是怀疑的

511
00:12:39,000 --> 00:12:41,000
一开始我们是非常抵触的

512
00:12:41,000 --> 00:12:43,000
不愿意相信这个结果的

513
00:12:43,000 --> 00:12:45,000
但是实际上手之后

514
00:12:45,000 --> 00:12:46,000
哇靠原来真的这么香

515
00:12:46,000 --> 00:12:47,000
对关键是就是说

516
00:12:47,000 --> 00:12:50,000
它在这种提供这种性能

517
00:12:50,000 --> 00:12:53,000
这么大幅度性能提升的情况下

518
00:12:53,000 --> 00:12:54,000
是基于什么呢

519
00:12:54,000 --> 00:12:55,000
是不发烫对吧

520
00:12:55,000 --> 00:12:57,000
按那个我看他们测评的方法

521
00:12:57,000 --> 00:12:59,000
那个评论的源远说是

522
00:12:59,000 --> 00:13:01,000
风扇基本不怎么转

523
00:13:01,000 --> 00:13:01,000
或者听不到

524
00:13:01,000 --> 00:13:03,000
然后特别是像那个

525
00:13:03,000 --> 00:13:04,000
MacBook Air 这款

526
00:13:04,000 --> 00:13:05,000
它根本就没有风扇

527
00:13:05,000 --> 00:13:08,000
而且续航能力还非常的恐怖

528
00:13:08,000 --> 00:13:08,000
就相关的

529
00:13:08,000 --> 00:13:11,000
如果说你在那个风扇又不转

530
00:13:11,000 --> 00:13:12,000
又不就不怎么发热的情况下

531
00:13:12,000 --> 00:13:14,000
说明能耗是低的

532
00:13:14,000 --> 00:13:15,000
那电池不变的情况

533
00:13:15,000 --> 00:13:15,000
你能耗变低

534
00:13:15,000 --> 00:13:17,000
你续航就就起来变长了

535
00:13:17,000 --> 00:13:18,000
但是我没有想到会有那么长

536
00:13:18,000 --> 00:13:18,000
对吧

537
00:13:18,000 --> 00:13:20,000
对这个我其实都还有一个

538
00:13:20,000 --> 00:13:21,000
疑问这个 Mac Pro

539
00:13:21,000 --> 00:13:23,000
这个多的这个风扇拿来干嘛的

540
00:13:23,000 --> 00:13:25,000
我现在就没有能让它转起来过

541
00:13:25,000 --> 00:13:27,000
但它在转吗

542
00:13:27,000 --> 00:13:29,000
就是它是你确定它是一直在转

543
00:13:29,000 --> 00:13:31,000
还是说需要才转

544
00:13:31,000 --> 00:13:34,000
我贴上去看感受的时候

545
00:13:34,000 --> 00:13:36,000
应该是以非常低的频率在转的

546
00:13:36,000 --> 00:13:39,000
就是你基本上是完全感受不到

547
00:13:39,000 --> 00:13:40,000
它在转

548
00:13:40,000 --> 00:13:41,000
但实际上它确实在转

549
00:13:41,000 --> 00:13:43,000
它转的意义可能就是为了

550
00:13:43,000 --> 00:13:44,000
提供一个压力

551
00:13:44,000 --> 00:13:46,000
让灰尘不要进去

552
00:13:46,000 --> 00:13:48,000
不是为了散热

553
00:13:48,000 --> 00:13:49,000
可能真的是

554
00:13:49,000 --> 00:13:50,000
或者就还不然

555
00:13:50,000 --> 00:13:51,000
就是为了一个

556
00:13:51,000 --> 00:13:53,000
因为这样它这个就叫什么来着

557
00:13:53,000 --> 00:13:55,000
就是热工程是吧

558
00:13:55,000 --> 00:13:56,000
热力学什么万一

559
00:13:56,000 --> 00:13:58,000
就是它得维持一个平衡嘛

560
00:13:58,000 --> 00:13:59,000
就是那个

561
00:13:59,000 --> 00:14:00,000
热动力学你想说

562
00:14:00,000 --> 00:14:01,000
Cermal Dynamics

563
00:14:01,000 --> 00:14:03,000
我只知道以前那个

564
00:14:03,000 --> 00:14:07,000
校那些去清华读这个热工程的

565
00:14:07,000 --> 00:14:09,000
热动力学什么热能学的这些行业

566
00:14:09,000 --> 00:14:10,000
他们都是烧锅炉

567
00:14:10,000 --> 00:14:11,000
对吧

568
00:14:11,000 --> 00:14:14,000
但其实这个东西是可以用到很多场景的

569
00:14:14,000 --> 00:14:17,000
烧锅炉只是一个比较大型的使用场景

570
00:14:17,000 --> 00:14:17,000
对吧

571
00:14:17,000 --> 00:14:19,000
包括你现在做芯片也好

572
00:14:19,000 --> 00:14:20,000
烧锅炉很难用的

573
00:14:20,000 --> 00:14:21,000
难得

574
00:14:21,000 --> 00:14:24,000
它可能是以这么低的一个转速的话

575
00:14:24,000 --> 00:14:26,000
就已经能够把它维持的很好了

576
00:14:26,000 --> 00:14:27,000
平衡了

577
00:14:27,000 --> 00:14:27,000
对

578
00:14:27,000 --> 00:14:32,000
因为那个同样是这个 M 1 芯片的那个 MacBook Air

579
00:14:32,000 --> 00:14:33,000
它是完全被动

580
00:14:33,000 --> 00:14:34,000
然后我们看到

581
00:14:34,000 --> 00:14:37,000
因为昨天那个 iFixit 出那个拆解图了

582
00:14:37,000 --> 00:14:38,000
就它把那个打开看了一下

583
00:14:38,000 --> 00:14:40,000
那个 MacBook Air 里面

584
00:14:40,000 --> 00:14:43,000
它其实就是有一块比较大的那个散热片

585
00:14:43,000 --> 00:14:44,000
对吧

586
00:14:44,000 --> 00:14:46,000
但是完全没有那个风扇

587
00:14:46,000 --> 00:14:48,000
它也可以完成这么一个

588
00:14:48,000 --> 00:14:50,000
就是不是那种高负载的

589
00:14:50,000 --> 00:14:52,000
不是那种持续高负载状况下的散热

590
00:14:52,000 --> 00:14:54,000
那照理说

591
00:14:54,000 --> 00:14:56,000
这个 MacBook Pro 有一个小风扇

592
00:14:56,000 --> 00:14:58,000
它能够低速的运转

593
00:14:58,000 --> 00:15:01,000
也能够很快的实现这个热的平衡

594
00:15:01,000 --> 00:15:02,000
对

595
00:15:02,000 --> 00:15:04,000
而且这个和英特尔机器比起来

596
00:15:04,000 --> 00:15:05,000
真的是天壤之别

597
00:15:05,000 --> 00:15:07,000
我第二轮测试的时候

598
00:15:07,000 --> 00:15:08,000
是测试去编译代码

599
00:15:08,000 --> 00:15:10,000
然后看它们的性能怎么样

600
00:15:10,000 --> 00:15:12,000
我两台英特尔的机器

601
00:15:12,000 --> 00:15:13,000
一台是 iMac Pro

602
00:15:13,000 --> 00:15:15,000
一台是 MacBook Air

603
00:15:15,000 --> 00:15:17,000
都是才开始编译第一轮到一半的时候

604
00:15:17,000 --> 00:15:19,000
风扇就已经基本上到满转了

605
00:15:19,000 --> 00:15:20,000
就已经进入很潮流了

606
00:15:20,000 --> 00:15:21,000
很潮流的状态了

607
00:15:21,000 --> 00:15:23,000
就是战斗机来袭的感觉

608
00:15:23,000 --> 00:15:24,000
对 是的

609
00:15:24,000 --> 00:15:27,000
然后 M 1 的那台 MacBook Pro 的话

610
00:15:27,000 --> 00:15:28,000
三次测完了之后

611
00:15:28,000 --> 00:15:31,000
我摸它就感觉温度几乎没有提升

612
00:15:31,000 --> 00:15:34,000
就还是那种室温的状态

613
00:15:34,000 --> 00:15:35,000
对 是的

614
00:15:35,000 --> 00:15:36,000
就让人感觉

615
00:15:36,000 --> 00:15:39,000
这已经是黑科技一样的一个存在了

616
00:15:39,000 --> 00:15:41,000
因为我们知道 MacBook 是前几代的时候

617
00:15:41,000 --> 00:15:43,000
换过一个更薄的外壳

618
00:15:43,000 --> 00:15:45,000
以前不是 Type-C 接口

619
00:15:45,000 --> 00:15:45,000
对吧

620
00:15:45,000 --> 00:15:48,000
以前是就是在拆白接口的时候

621
00:15:48,000 --> 00:15:50,000
它那个时候大家都会

622
00:15:50,000 --> 00:15:50,000
抱怨说

623
00:15:50,000 --> 00:15:52,000
有时候如果用的太猛

624
00:15:52,000 --> 00:15:54,000
它那个底部会比较烫

625
00:15:54,000 --> 00:15:55,000
Type-C MacBook Pro

626
00:15:55,000 --> 00:15:58,000
那个有独立显卡和 CPU 的两个热源

627
00:15:58,000 --> 00:16:01,000
后来它换到了现在

628
00:16:01,000 --> 00:16:02,000
就是这个外形的

629
00:16:02,000 --> 00:16:03,000
就是薄薄的

630
00:16:03,000 --> 00:16:05,000
然后边上是 Type-C 接口的时候

631
00:16:05,000 --> 00:16:06,000
就更烫了

632
00:16:06,000 --> 00:16:07,000
就是英特尔的时候

633
00:16:07,000 --> 00:16:07,000
对吧

634
00:16:07,000 --> 00:16:09,000
我们到如果你放在膝盖上的话

635
00:16:09,000 --> 00:16:09,000
它是有这个

636
00:16:09,000 --> 00:16:11,000
他们那个说法叫什么来着

637
00:16:11,000 --> 00:16:12,000
火腿肠煎蛋

638
00:16:12,000 --> 00:16:12,000
对不对

639
00:16:12,000 --> 00:16:17,000
而且我还听过一个说法

640
00:16:17,000 --> 00:16:19,000
就是对于那个

641
00:16:19,000 --> 00:16:20,000
现在的四口的

642
00:16:20,000 --> 00:16:21,000
那个 MacBook Pro

643
00:16:21,000 --> 00:16:22,000
你要给它充电的话

644
00:16:22,000 --> 00:16:24,000
是应该要插固定插右边

645
00:16:24,000 --> 00:16:25,000
还是固定插左边

646
00:16:25,000 --> 00:16:27,000
这样去减少它那一侧的发热

647
00:16:27,000 --> 00:16:28,000
才能平衡

648
00:16:28,000 --> 00:16:29,000
对我们上一期

649
00:16:29,000 --> 00:16:31,000
好像结尾的时候谈到这个

650
00:16:31,000 --> 00:16:33,000
就是你要是从一边插的话

651
00:16:33,000 --> 00:16:34,000
它会特别烫

652
00:16:34,000 --> 00:16:35,000
因为它有一个叫什么

653
00:16:35,000 --> 00:16:36,000
那个电压管理模块

654
00:16:36,000 --> 00:16:38,000
是在某一边

655
00:16:38,000 --> 00:16:39,000
然后会导致升温

656
00:16:39,000 --> 00:16:40,000
然后升温就会降频

657
00:16:40,000 --> 00:16:41,000
然后性能也会受影响

658
00:16:41,000 --> 00:16:43,000
现在 Apple 把这个锅

659
00:16:43,000 --> 00:16:44,000
就完全的丢给了英特尔

660
00:16:44,000 --> 00:16:45,000
告诉大家好

661
00:16:45,000 --> 00:16:46,000
不是我们做的烂

662
00:16:46,000 --> 00:16:48,000
对所以就这件事情

663
00:16:48,000 --> 00:16:49,000
证明了之前

664
00:16:50,000 --> 00:16:51,000
有几个问题

665
00:16:51,000 --> 00:16:52,000
就是苹果我们不是老实说

666
00:16:52,000 --> 00:16:53,000
它最近 Mac 这几代

667
00:16:53,000 --> 00:16:55,000
就迭代都非常的慢

668
00:16:55,000 --> 00:16:56,000
然后就是非常的

669
00:16:56,000 --> 00:16:57,000
就不让人满意

670
00:16:57,000 --> 00:16:58,000
但最后我们的锅

671
00:16:58,000 --> 00:17:00,000
现在可以明确的说

672
00:17:00,000 --> 00:17:00,000
是英特尔的锅

673
00:17:00,000 --> 00:17:01,000
对不对

674
00:17:01,000 --> 00:17:01,000
真相大白

675
00:17:01,000 --> 00:17:03,000
亚成我记得你也有

676
00:17:03,000 --> 00:17:04,000
你也有买那个

677
00:17:04,000 --> 00:17:05,000
那个垃圾桶的

678
00:17:05,000 --> 00:17:06,000
那个 MacBook Pro 是不是

679
00:17:06,000 --> 00:17:07,000
就是第一代的

680
00:17:07,000 --> 00:17:08,000
那个 MacBook Pro

681
00:17:08,000 --> 00:17:10,000
对那是 13 年的

682
00:17:10,000 --> 00:17:11,000
那个型号了

683
00:17:11,000 --> 00:17:12,000
垃圾桶的话

684
00:17:12,000 --> 00:17:13,000
对垃圾桶总共就一代

685
00:17:13,000 --> 00:17:15,000
没有之后

686
00:17:15,000 --> 00:17:17,000
也没有前五股人后来者

687
00:17:17,000 --> 00:17:18,000
它更新过一次 CPU 好像

688
00:17:18,000 --> 00:17:19,000
我记得好像

689
00:17:19,000 --> 00:17:20,000
只是

690
00:17:20,000 --> 00:17:20,000
我记得好像

691
00:17:20,000 --> 00:17:21,000
就是小型号的

692
00:17:21,000 --> 00:17:21,000
就是可能是

693
00:17:21,000 --> 00:17:22,000
加了几个选项吧

694
00:17:22,000 --> 00:17:24,000
反正都是 13 年的那一款

695
00:17:24,000 --> 00:17:25,000
对对

696
00:17:25,000 --> 00:17:26,000
没有大改过

697
00:17:26,000 --> 00:17:27,000
对在汽车的

698
00:17:27,000 --> 00:17:28,000
数据里面叫 Facelift

699
00:17:28,000 --> 00:17:29,000
小改款

700
00:17:29,000 --> 00:17:30,000
小改的

701
00:17:30,000 --> 00:17:31,000
不是大改

702
00:17:31,000 --> 00:17:32,000
然后就是

703
00:17:32,000 --> 00:17:33,000
当时它

704
00:17:33,000 --> 00:17:33,000
是那个

705
00:17:33,000 --> 00:17:34,000
那个垃圾桶

706
00:17:34,000 --> 00:17:35,000
它出来的时候说是

707
00:17:35,000 --> 00:17:37,000
最后他们的

708
00:17:37,000 --> 00:17:38,000
不是要做了一个媒体

709
00:17:38,000 --> 00:17:38,000
邀请那些

710
00:17:38,000 --> 00:17:39,000
就是 Mac 的

711
00:17:39,000 --> 00:17:40,000
那种专业媒体

712
00:17:40,000 --> 00:17:42,000
去开了一个小会

713
00:17:42,000 --> 00:17:43,000
说他们之前

714
00:17:43,000 --> 00:17:44,000
那个设计

715
00:17:44,000 --> 00:17:44,000
是

716
00:17:44,000 --> 00:17:46,000
遇到了

717
00:17:46,000 --> 00:17:47,000
这个 Thermal Constraint

718
00:17:47,000 --> 00:17:48,000
就是遇到了热能的限制

719
00:17:48,000 --> 00:17:50,000
其实这个锅也是

720
00:17:50,000 --> 00:17:50,000
英特尔的

721
00:17:50,000 --> 00:17:50,000
对吧

722
00:17:50,000 --> 00:17:52,000
因为或者说是

723
00:17:52,000 --> 00:17:53,000
加上这个 AMD 的

724
00:17:53,000 --> 00:17:53,000
因为那显卡

725
00:17:53,000 --> 00:17:54,000
也是个散热大户

726
00:17:54,000 --> 00:17:55,000
就是他没有想到

727
00:17:55,000 --> 00:17:56,000
就是说

728
00:17:56,000 --> 00:17:57,000
你们竟然

729
00:17:57,000 --> 00:17:59,000
不能够按照我们预期的

730
00:17:59,000 --> 00:17:59,000
这个

731
00:17:59,000 --> 00:18:01,000
提升这个

732
00:18:01,000 --> 00:18:02,000
那个功耗

733
00:18:02,000 --> 00:18:02,000
就是

734
00:18:02,000 --> 00:18:05,000
叫做每单位功耗的性能

735
00:18:05,000 --> 00:18:06,000
导致我们不能

736
00:18:06,000 --> 00:18:07,000
在这么小的空间里面

737
00:18:07,000 --> 00:18:09,000
用一个单一的风扇

738
00:18:09,000 --> 00:18:12,000
完成整个设备的散热

739
00:18:12,000 --> 00:18:13,000
所以导致我们产品的

740
00:18:13,000 --> 00:18:14,000
这个风 factor

741
00:18:14,000 --> 00:18:15,000
这个外观

742
00:18:15,000 --> 00:18:16,000
外形和整体的

743
00:18:16,000 --> 00:18:17,000
这个形态

744
00:18:17,000 --> 00:18:18,000
没有办法支撑

745
00:18:18,000 --> 00:18:19,000
你不断的

746
00:18:19,000 --> 00:18:19,000
后续的迭代

747
00:18:19,000 --> 00:18:22,000
这口锅已经毫无疑问的

748
00:18:22,000 --> 00:18:22,000
坐实的

749
00:18:22,000 --> 00:18:25,000
落到了英特尔和 AMD 头上了

750
00:18:25,000 --> 00:18:26,000
那英特尔是显卡

751
00:18:26,000 --> 00:18:28,000
是 CPU

752
00:18:28,000 --> 00:18:29,000
然后 AMD 是因为显卡

753
00:18:29,000 --> 00:18:30,000
对吧

754
00:18:30,000 --> 00:18:31,000
反正都是你们的

755
00:18:31,000 --> 00:18:32,000
对

756
00:18:32,000 --> 00:18:33,000
因为我们现在看到确实也是

757
00:18:33,000 --> 00:18:33,000
现在你说

758
00:18:33,000 --> 00:18:34,000
因为我

759
00:18:34,000 --> 00:18:35,000
亚成你好像我看到你买了

760
00:18:35,000 --> 00:18:37,000
最近什么新出的几台显卡

761
00:18:37,000 --> 00:18:39,000
你看那个显卡都是

762
00:18:39,000 --> 00:18:39,000
一个大卡

763
00:18:39,000 --> 00:18:40,000
然后上面三个风扇

764
00:18:40,000 --> 00:18:41,000
对吧

765
00:18:41,000 --> 00:18:43,000
然后一转起来也是非常响的

766
00:18:43,000 --> 00:18:43,000
对

767
00:18:43,000 --> 00:18:44,000
电磁炉是

768
00:18:44,000 --> 00:18:46,000
电磁炉

769
00:18:46,000 --> 00:18:47,000
然后我们看到这次

770
00:18:47,000 --> 00:18:48,000
就是 M 1 芯片

771
00:18:48,000 --> 00:18:49,000
不光是 CPU 的

772
00:18:49,000 --> 00:18:49,000
显卡

773
00:18:49,000 --> 00:18:49,000
对吧

774
00:18:49,000 --> 00:18:49,000
对吧

775
00:18:49,000 --> 00:18:51,000
性能爆表

776
00:18:51,000 --> 00:18:52,000
GPU 的性能也是把

777
00:18:52,000 --> 00:18:54,000
但它是集成显卡

778
00:18:54,000 --> 00:18:55,000
它的集成显卡的性能

779
00:18:55,000 --> 00:18:57,000
也是把英特尔的

780
00:18:57,000 --> 00:18:57,000
那个叫

781
00:18:57,000 --> 00:18:58,000
时代的

782
00:18:58,000 --> 00:18:59,000
就是 Ares

783
00:18:59,000 --> 00:19:01,000
也是按在地板上

784
00:19:01,000 --> 00:19:01,000
摩穿

785
00:19:01,000 --> 00:19:02,000
对吧

786
00:19:02,000 --> 00:19:04,000
它提升的好像还不止

787
00:19:04,000 --> 00:19:06,000
不是说百分之几十

788
00:19:06,000 --> 00:19:06,000
这种情况

789
00:19:06,000 --> 00:19:07,000
它是提高了

790
00:19:07,000 --> 00:19:09,000
两三倍

791
00:19:09,000 --> 00:19:10,000
我记得那个大概数字是

792
00:19:10,000 --> 00:19:11,000
对

793
00:19:11,000 --> 00:19:11,000
那个图形性能

794
00:19:11,000 --> 00:19:13,000
我倒是没有仔细测试了

795
00:19:13,000 --> 00:19:14,000
因为那个确实不是

796
00:19:14,000 --> 00:19:16,000
我了解的东西

797
00:19:16,000 --> 00:19:17,000
然后我看了的话

798
00:19:17,000 --> 00:19:18,000
别人的评测的话

799
00:19:18,000 --> 00:19:19,000
很多是视频博主去评测

800
00:19:19,000 --> 00:19:21,000
他去进行视频编辑

801
00:19:21,000 --> 00:19:22,000
视频编辑的时候的一个性能

802
00:19:22,000 --> 00:19:24,000
只不过由于那个 M 1

803
00:19:24,000 --> 00:19:26,000
它自己有那个 H 265 的

804
00:19:26,000 --> 00:19:27,000
那个硬解码吧

805
00:19:27,000 --> 00:19:28,000
所以说这个好像

806
00:19:28,000 --> 00:19:30,000
这个评测有点不太公平

807
00:19:30,000 --> 00:19:31,000
这个事情要吐槽一下

808
00:19:31,000 --> 00:19:33,000
包括这个我记得

809
00:19:33,000 --> 00:19:34,000
最开始爆出这件事情

810
00:19:34,000 --> 00:19:36,000
做了一个显示的对比

811
00:19:36,000 --> 00:19:37,000
是那个叫做

812
00:19:37,000 --> 00:19:38,000
Jonathan Morris

813
00:19:38,000 --> 00:19:40,000
他在 YouTube 上做了一个

814
00:19:40,000 --> 00:19:42,000
好像是两三分钟的短评吧

815
00:19:42,000 --> 00:19:45,000
他评的是输出一段

816
00:19:45,000 --> 00:19:48,000
这个 H 265 的这个视频

817
00:19:48,000 --> 00:19:49,000
就是他是做

818
00:19:49,000 --> 00:19:51,000
他是做那个视频博主嘛

819
00:19:51,000 --> 00:19:51,000
对吧

820
00:19:51,000 --> 00:19:53,000
他说我有一个原始视频

821
00:19:53,000 --> 00:19:53,000
我编辑好了

822
00:19:53,000 --> 00:19:55,000
我要输出成那个叫成片

823
00:19:55,000 --> 00:19:57,000
要流出来成一个 H 265

824
00:19:57,000 --> 00:19:58,000
可以给大家播放那个文件

825
00:19:58,000 --> 00:20:00,000
他现在那个他的

826
00:20:00,000 --> 00:20:01,000
好像是他的 iMac Pro 吧

827
00:20:01,000 --> 00:20:03,000
上面开始点

828
00:20:03,000 --> 00:20:05,000
然后那边就已经开始

829
00:20:05,000 --> 00:20:06,000
在转码输出了

830
00:20:06,000 --> 00:20:06,000
对吧

831
00:20:06,000 --> 00:20:08,000
然后他说

832
00:20:08,000 --> 00:20:09,000
这个时候他拿出

833
00:20:09,000 --> 00:20:10,000
他刚买的这个

834
00:20:10,000 --> 00:20:11,000
iPhone 12 的这个 mini

835
00:20:11,000 --> 00:20:12,000
然后说

836
00:20:12,000 --> 00:20:13,000
我再跟你磨叽半天

837
00:20:13,000 --> 00:20:14,000
说现在我们开始在

838
00:20:14,000 --> 00:20:16,000
这个 iPhone mini 上面

839
00:20:16,000 --> 00:20:17,000
去做同样的事情

840
00:20:17,000 --> 00:20:19,000
结果那个时候

841
00:20:19,000 --> 00:20:20,000
那个 iMac 已经跑了

842
00:20:20,000 --> 00:20:21,000
可能一两分钟了

843
00:20:21,000 --> 00:20:22,000
对吧

844
00:20:22,000 --> 00:20:23,000
然后这个他在开后面点

845
00:20:23,000 --> 00:20:24,000
然后这个时候

846
00:20:24,000 --> 00:20:25,000
iPhone mini 还是比

847
00:20:25,000 --> 00:20:27,000
他那个 iMac 先完成

848
00:20:27,000 --> 00:20:28,000
这个转码工作

849
00:20:28,000 --> 00:20:30,000
那看起来是很 impressive

850
00:20:30,000 --> 00:20:30,000
对不对

851
00:20:30,000 --> 00:20:31,000
但是这个事情

852
00:20:31,000 --> 00:20:32,000
刚才就说亚成讲

853
00:20:32,000 --> 00:20:33,000
他不是太公平

854
00:20:33,000 --> 00:20:35,000
原因是在于说

855
00:20:35,000 --> 00:20:38,000
一个是用专用硬件去做输出

856
00:20:38,000 --> 00:20:39,000
另外一个是用那个 CPU 去压

857
00:20:39,000 --> 00:20:41,000
那肯定是不能比的嘛

858
00:20:41,000 --> 00:20:41,000
对

859
00:20:41,000 --> 00:20:44,000
只不过说到不公平这事的话

860
00:20:44,000 --> 00:20:47,000
我们之前大家就比 CPU 性能的时候

861
00:20:47,000 --> 00:20:49,000
其实现在拿来和 M 1 比的东西

862
00:20:49,000 --> 00:20:51,000
都是拿 iMac Pro

863
00:20:51,000 --> 00:20:52,000
Mac Pro 这种顶级的

864
00:20:52,000 --> 00:20:54,000
桌面端的 CPU 去比了

865
00:20:54,000 --> 00:20:56,000
移动端的根本就早就

866
00:20:56,000 --> 00:20:57,000
已经不知道甩到哪里去了

867
00:20:57,000 --> 00:20:59,000
就是如果有功耗限制的

868
00:20:59,000 --> 00:21:00,000
肯定都是比不过的

869
00:21:00,000 --> 00:21:01,000
对吧

870
00:21:01,000 --> 00:21:02,000
但只有找那种

871
00:21:02,000 --> 00:21:03,000
不太受功耗限制的

872
00:21:03,000 --> 00:21:05,000
因为像那个 iMac Pro

873
00:21:05,000 --> 00:21:06,000
就桌面级 CPU

874
00:21:06,000 --> 00:21:06,000
它都是功耗都是

875
00:21:06,000 --> 00:21:08,000
可能几十上百瓦的这种

876
00:21:08,000 --> 00:21:08,000
对

877
00:21:08,000 --> 00:21:10,000
因为我自己对比的时候

878
00:21:10,000 --> 00:21:11,000
我是测的是

879
00:21:11,000 --> 00:21:12,000
我的 iMac Pro 和我的之前的

880
00:21:12,000 --> 00:21:14,000
19 款的 iMac

881
00:21:14,000 --> 00:21:15,000
iMac MacBook Air

882
00:21:15,000 --> 00:21:17,000
iMac MacBook Air 的话

883
00:21:17,000 --> 00:21:18,000
它那个 CPU 是比较弱了

884
00:21:18,000 --> 00:21:19,000
是两核的

885
00:21:19,000 --> 00:21:22,000
但是相比现在的 MacBook Air 的话

886
00:21:22,000 --> 00:21:23,000
301 这是一个一年前的

887
00:21:23,000 --> 00:21:25,000
完全同价格的一个产品

888
00:21:25,000 --> 00:21:26,000
拿来比较

889
00:21:26,000 --> 00:21:28,000
然后我记得测试结果的话

890
00:21:28,000 --> 00:21:30,000
在 M 1 上面的编译时间

891
00:21:30,000 --> 00:21:31,000
大概是 40 秒

892
00:21:31,000 --> 00:21:33,000
到了 MacBook Air 上面的话

893
00:21:33,000 --> 00:21:35,000
是大概接近 260 秒

894
00:21:35,000 --> 00:21:36,000
是这么一个

895
00:21:36,000 --> 00:21:38,000
翻这么多倍的差距

896
00:21:38,000 --> 00:21:39,000
就是六倍

897
00:21:39,000 --> 00:21:40,000
对吧

898
00:21:40,000 --> 00:21:41,000
对 没错

899
00:21:41,000 --> 00:21:44,000
就是我在做这个测试的时候

900
00:21:44,000 --> 00:21:45,000
到后面我真的都不想等

901
00:21:45,000 --> 00:21:47,000
MacBook Air 测三次的结果了

902
00:21:47,000 --> 00:21:48,000
太漫长了

903
00:21:48,000 --> 00:21:50,000
那个 Air 还是有风扇的

904
00:21:50,000 --> 00:21:50,000
对吧

905
00:21:50,000 --> 00:21:51,000
我记得它有一个小风扇

906
00:21:51,000 --> 00:21:52,000
对 是的

907
00:21:52,000 --> 00:21:55,000
而且风扇已经转到最响了

908
00:21:55,000 --> 00:21:56,000
但你这个也是有风扇

909
00:21:56,000 --> 00:21:59,000
但是如果说你是拿 M 1 的 Air 比

910
00:21:59,000 --> 00:22:01,000
我相信这个结果也不会差得太远

911
00:22:01,000 --> 00:22:03,000
因为我们看它的测试结果

912
00:22:03,000 --> 00:22:04,000
一般好像说是

913
00:22:04,000 --> 00:22:06,000
8 分钟以上才会

914
00:22:06,000 --> 00:22:07,000
那个 throttle

915
00:22:07,000 --> 00:22:08,000
就是降频线速

916
00:22:08,000 --> 00:22:08,000
没错

917
00:22:08,000 --> 00:22:10,000
所以来这次的话

918
00:22:10,000 --> 00:22:11,000
这次这个 Air 和 Pro 的

919
00:22:11,000 --> 00:22:13,000
其实是一个定位还挺奇怪的

920
00:22:13,000 --> 00:22:14,000
两个产品

921
00:22:14,000 --> 00:22:15,000
就是感觉好像

922
00:22:15,000 --> 00:22:17,000
到底该买 Pro 还是买 Air 的话

923
00:22:17,000 --> 00:22:17,000
很难选

924
00:22:18,000 --> 00:22:18,000
你可以解释一下

925
00:22:18,000 --> 00:22:21,000
你为什么选择买 Pro 不买 Air 吗

926
00:22:21,000 --> 00:22:23,000
因为就从参数上来说

927
00:22:23,000 --> 00:22:24,000
好像差的并不多

928
00:22:24,000 --> 00:22:26,000
它的屏幕首先是差不多的是吧

929
00:22:26,000 --> 00:22:28,000
我印象中好像没有区别

930
00:22:28,000 --> 00:22:31,000
所有的技术都是一样的

931
00:22:31,000 --> 00:22:32,000
对 而且这次不一样

932
00:22:32,000 --> 00:22:33,000
以前他们那个

933
00:22:33,000 --> 00:22:35,000
就上一代就是英特尔芯片的那个 Air

934
00:22:35,000 --> 00:22:37,000
它那个屏幕不是所谓的那个 P 3

935
00:22:37,000 --> 00:22:39,000
那个广色域的屏幕

936
00:22:39,000 --> 00:22:40,000
但这次它连这个也升上来了

937
00:22:40,000 --> 00:22:43,000
对 我记得我购买之前

938
00:22:43,000 --> 00:22:45,000
看过那个今天学习功课的时候

939
00:22:45,000 --> 00:22:47,000
发现好像没有什么

940
00:22:48,000 --> 00:22:49,000
屏幕上有人提了过会有区别

941
00:22:49,000 --> 00:22:51,000
我自己买 Pro 的话

942
00:22:51,000 --> 00:22:54,000
是想再给 TouchBar 一个机会

943
00:22:54,000 --> 00:22:58,000
因为我在这台 Air 之前的那台的话

944
00:22:58,000 --> 00:22:59,000
也是一台 MacBook Pro

945
00:22:59,000 --> 00:23:01,000
但那个 TouchBar 用的我非常早醒

946
00:23:01,000 --> 00:23:02,000
就是经常的我会

947
00:23:02,000 --> 00:23:04,000
想要一个功能键的时候

948
00:23:04,000 --> 00:23:05,000
要么摸不到它在哪里

949
00:23:05,000 --> 00:23:06,000
特别是 escape 键

950
00:23:06,000 --> 00:23:08,000
或者是它直接死一掉

951
00:23:08,000 --> 00:23:10,000
所以说就非常的难受

952
00:23:10,000 --> 00:23:13,000
所以这次想着既然要换的话

953
00:23:13,000 --> 00:23:15,000
那我就再顺便给 Pro 一个机会

954
00:23:15,000 --> 00:23:17,000
你的上一代那个 Pro 的是

955
00:23:18,000 --> 00:23:20,000
有独立的物理的 escape 键的那款

956
00:23:20,000 --> 00:23:21,000
对 是的

957
00:23:21,000 --> 00:23:24,000
那是最早发布的那一款的 TouchBar

958
00:23:24,000 --> 00:23:28,000
它后来是出过一款有单独的 escape 键

959
00:23:28,000 --> 00:23:30,000
同时有 TouchBar 的 MacBook Pro

960
00:23:30,000 --> 00:23:30,000
我记得 对不对

961
00:23:30,000 --> 00:23:31,000
对 就是上一款

962
00:23:31,000 --> 00:23:33,000
就是 19 年更新那一代了

963
00:23:33,000 --> 00:23:34,000
是 19 还是哪一年

964
00:23:34,000 --> 00:23:34,000
我记得了

965
00:23:34,000 --> 00:23:35,000
反正就这一代和上一代

966
00:23:35,000 --> 00:23:37,000
在这个方面是一模一样

967
00:23:37,000 --> 00:23:40,000
就是今年年初那一代应该是

968
00:23:40,000 --> 00:23:41,000
就今年的

969
00:23:41,000 --> 00:23:44,000
如果你现在去苹果店买

970
00:23:44,000 --> 00:23:47,000
然后你说你要英特尔芯片的 MacBook Pro

971
00:23:47,000 --> 00:23:48,000
它都是

972
00:23:48,000 --> 00:23:51,000
同时有物理的 escape 键和 TouchBar

973
00:23:51,000 --> 00:23:55,000
所以你是我遇到的第一个

974
00:23:55,000 --> 00:23:57,000
好像还不太反感 TouchBar 的人

975
00:23:57,000 --> 00:23:58,000
但是你刚才说

976
00:23:58,000 --> 00:23:59,000
其实体验也不是很好

977
00:23:59,000 --> 00:24:01,000
我其实是很反感的

978
00:24:01,000 --> 00:24:02,000
我刚才想说

979
00:24:02,000 --> 00:24:04,000
就是你用第一代 TouchBar

980
00:24:04,000 --> 00:24:05,000
你觉得很不爽

981
00:24:05,000 --> 00:24:06,000
然后你说

982
00:24:06,000 --> 00:24:09,000
想要再给第二代 TouchBar 一个机会

983
00:24:09,000 --> 00:24:12,000
这个思路就比较

984
00:24:12,000 --> 00:24:13,000
那就比较奇怪

985
00:24:13,000 --> 00:24:16,000
这就是真的自身果粉吧

986
00:24:16,000 --> 00:24:18,000
而且可以

987
00:24:18,000 --> 00:24:18,000
可能可以算吧

988
00:24:18,000 --> 00:24:20,000
就是因为既然要换电脑了

989
00:24:20,000 --> 00:24:22,000
那就多带来一点变化

990
00:24:22,000 --> 00:24:23,000
多带点不一样的去体验

991
00:24:23,000 --> 00:24:24,000
是吧

992
00:24:24,000 --> 00:24:25,000
这个我觉得也可以理解

993
00:24:25,000 --> 00:24:27,000
因为有一个很显著的区别

994
00:24:27,000 --> 00:24:29,000
就是说英特尔的

995
00:24:29,000 --> 00:24:33,000
就是英特尔芯片的 MacBook Pro 的 TouchBar

996
00:24:33,000 --> 00:24:35,000
是用 T 2 芯片来驱动的

997
00:24:35,000 --> 00:24:38,000
它有一个单独的一个 BridgeOS 来驱动它

998
00:24:38,000 --> 00:24:39,000
对吧

999
00:24:39,000 --> 00:24:41,000
就导致各种各样的通讯的问题

1000
00:24:41,000 --> 00:24:42,000
我们都看到

1001
00:24:42,000 --> 00:24:44,000
都已经看到各种什么死机

1002
00:24:44,000 --> 00:24:46,000
什么没反应

1003
00:24:46,000 --> 00:24:47,000
都已经很多吐槽了

1004
00:24:47,000 --> 00:24:48,000
但这次

1005
00:24:48,000 --> 00:24:50,000
M 1 的 TouchBar

1006
00:24:50,000 --> 00:24:51,000
照我的理解

1007
00:24:51,000 --> 00:24:52,000
首先 M 1

1008
00:24:52,000 --> 00:24:55,000
已经把 T 2 的所有功能整合在 M 1 里面

1009
00:24:55,000 --> 00:24:56,000
没有单独的一个 T 2 芯片了

1010
00:24:56,000 --> 00:24:58,000
那我的理解应该也不存在

1011
00:24:58,000 --> 00:25:00,000
这个所谓的这个 BridgeOS 了

1012
00:25:00,000 --> 00:25:00,000
对吧

1013
00:25:00,000 --> 00:25:02,000
它应该就是在 M 芯片里面

1014
00:25:02,000 --> 00:25:03,000
单独自己在内核里面跑的

1015
00:25:03,000 --> 00:25:06,000
那所以有可能说

1016
00:25:06,000 --> 00:25:08,000
这样就可以解决 TouchBar 之间

1017
00:25:08,000 --> 00:25:10,000
各种什么响应失灵

1018
00:25:10,000 --> 00:25:11,000
什么死机的问题

1019
00:25:11,000 --> 00:25:11,000
对不对

1020
00:25:11,000 --> 00:25:12,000
对

1021
00:25:12,000 --> 00:25:13,000
因为这事情

1022
00:25:13,000 --> 00:25:15,000
之前和瑞我们自己私下聊过

1023
00:25:15,000 --> 00:25:17,000
就是从我自己观察的话

1024
00:25:17,000 --> 00:25:17,000
就在旧版的时候

1025
00:25:18,000 --> 00:25:20,000
设备上 T 2 的芯片用的是 USB 总线

1026
00:25:20,000 --> 00:25:23,000
和整个 CPU 进行通信

1027
00:25:23,000 --> 00:25:26,000
按照我们自己之前的经验来说的话

1028
00:25:26,000 --> 00:25:28,000
USB 的这个总线的可靠性

1029
00:25:28,000 --> 00:25:30,000
一般来说可能是没那么高的

1030
00:25:30,000 --> 00:25:32,000
就是它还是会在魔动情况下就闪断了

1031
00:25:32,000 --> 00:25:35,000
然后说会不会是因为这样的一个原因

1032
00:25:35,000 --> 00:25:36,000
导致 TouchBar 9 的时候

1033
00:25:36,000 --> 00:25:37,000
就突然就死机了

1034
00:25:37,000 --> 00:25:39,000
或者是它就怎么就不灵了

1035
00:25:39,000 --> 00:25:41,000
所以说我也是在想试一下的

1036
00:25:41,000 --> 00:25:43,000
所以你想再给它一个机会看一下

1037
00:25:43,000 --> 00:25:43,000
对

1038
00:25:43,000 --> 00:25:46,000
看它这是不是也是因耳的过

1039
00:25:48,000 --> 00:25:52,000
如果说我们刨开不稳定性和死机这种因素来看

1040
00:25:52,000 --> 00:25:56,000
TouchBar 本身你觉得它的使用性还是可以的

1041
00:25:56,000 --> 00:25:58,000
我觉得也不太好说

1042
00:25:58,000 --> 00:26:01,000
它算说看上去直观上来说

1043
00:26:01,000 --> 00:26:03,000
它把很多操作放在键盘上了

1044
00:26:03,000 --> 00:26:06,000
这样我能够直接战略操作的话是一个提升

1045
00:26:06,000 --> 00:26:07,000
但它有一个扣分项

1046
00:26:07,000 --> 00:26:11,000
假如说我本身我自己会定了很多 FN 的功能

1047
00:26:11,000 --> 00:26:12,000
就有特定的作用

1048
00:26:12,000 --> 00:26:13,000
我如果是键盘的话

1049
00:26:13,000 --> 00:26:14,000
我能摸到那个键在哪里

1050
00:26:14,000 --> 00:26:17,000
我很多时候就直接对按下去了

1051
00:26:17,000 --> 00:26:18,000
但是如果是 TouchBar

1052
00:26:18,000 --> 00:26:19,000
我完全按不到

1053
00:26:19,000 --> 00:26:21,000
我必须得低头去看刀机在哪按下去

1054
00:26:21,000 --> 00:26:22,000
对这个问题

1055
00:26:22,000 --> 00:26:26,000
我觉得是没有办法通过任何软件和这个就是什么优化来实现

1056
00:26:26,000 --> 00:26:27,000
因为它就是一个很物理的东西

1057
00:26:27,000 --> 00:26:28,000
对吧

1058
00:26:28,000 --> 00:26:31,000
你能不能通过触感来摸到那个东西

1059
00:26:31,000 --> 00:26:33,000
因为 TouchBar 最核心的就是说

1060
00:26:33,000 --> 00:26:37,000
它把那个 FN 那排键的功能变成了一个随时可以定义

1061
00:26:37,000 --> 00:26:39,000
它叫 Context Aware

1062
00:26:39,000 --> 00:26:41,000
就是说根据使用环境

1063
00:26:41,000 --> 00:26:44,000
比如你切了一个那个某一个 APP 到前台

1064
00:26:44,000 --> 00:26:46,000
它那个 TouchBar 的功能就不一样

1065
00:26:46,000 --> 00:26:46,000
对不对

1066
00:26:46,000 --> 00:26:47,000
但这个就导致

1067
00:26:47,000 --> 00:26:50,000
你没有办法说此时你不看那个 TouchBar 的时候

1068
00:26:50,000 --> 00:26:51,000
它会怎么样

1069
00:26:51,000 --> 00:26:52,000
你是不知道的

1070
00:26:52,000 --> 00:26:53,000
对

1071
00:26:53,000 --> 00:26:55,000
而且还带来的另外一个问题就是误触

1072
00:26:55,000 --> 00:26:57,000
就是我可能会不注意就碰到它了

1073
00:26:57,000 --> 00:26:59,000
就把什么词音就调不对了

1074
00:26:59,000 --> 00:27:01,000
我觉得 TouchBar 刚出来的时候

1075
00:27:01,000 --> 00:27:02,000
我发过一条推

1076
00:27:02,000 --> 00:27:07,000
就是说我花 20 年的时间学习怎样不看键盘来打字

1077
00:27:07,000 --> 00:27:09,000
TouchBar 出来之后

1078
00:27:09,000 --> 00:27:11,000
我又反过来需要看键盘

1079
00:27:11,000 --> 00:27:13,000
这个就让人感觉很逆历史潮

1080
00:27:13,000 --> 00:27:16,000
所以我觉得 TouchBar 这个东西

1081
00:27:16,000 --> 00:27:17,000
真的是有点像苹果

1082
00:27:17,000 --> 00:27:19,000
就是为了做的不一样

1083
00:27:19,000 --> 00:27:21,000
强行做出来一个不一样的东西

1084
00:27:21,000 --> 00:27:25,000
然后感觉说不定之后希望它能改邪归正

1085
00:27:25,000 --> 00:27:28,000
但是你还是用金钱支持了它

1086
00:27:28,000 --> 00:27:29,000
你用脚投票说

1087
00:27:29,000 --> 00:27:31,000
你们还接着在这条邪路上越走越远

1088
00:27:31,000 --> 00:27:32,000
对

1089
00:27:32,000 --> 00:27:34,000
好像是你这样说的话

1090
00:27:34,000 --> 00:27:38,000
我还是怀着一个比较果粉的心态

1091
00:27:38,000 --> 00:27:39,000
希望再给它一次机会

1092
00:27:39,000 --> 00:27:40,000
是我自己的问题

1093
00:27:40,000 --> 00:27:41,000
不是它的问题

1094
00:27:41,000 --> 00:27:44,000
但现在这两天用下来感觉好像不是我问题

1095
00:27:44,000 --> 00:27:47,000
好

1096
00:27:47,000 --> 00:27:47,000
那我们到时候再聊吧

1097
00:27:47,000 --> 00:27:48,000
再关注一下

1098
00:27:48,000 --> 00:27:52,000
就是这次 M 1 的 MacBook Pro 普及开后

1099
00:27:52,000 --> 00:27:54,000
首先我们看确实是不是说

1100
00:27:54,000 --> 00:27:56,000
TouchBar 的各种不稳定问题

1101
00:27:56,000 --> 00:28:00,000
可以丢过于 BridgeOS 和 USB 的不稳定性

1102
00:28:00,000 --> 00:28:02,000
如果这个问题解决之后

1103
00:28:02,000 --> 00:28:03,000
我们再来看

1104
00:28:03,000 --> 00:28:08,000
刨除到这种导致极大扣分的负面因素之后

1105
00:28:08,000 --> 00:28:10,000
TouchBar 本身它能不能够打动消费者

1106
00:28:10,000 --> 00:28:12,000
除了 TouchBar 之外

1107
00:28:12,000 --> 00:28:15,000
这回的 M 1 芯片的 MacBook Pro 和 MacBook Air

1108
00:28:15,000 --> 00:28:17,000
它唯一的区别就只有

1109
00:28:17,000 --> 00:28:19,000
在外形和重量上的好像是

1110
00:28:19,000 --> 00:28:20,000
因为那个不管是就是

1111
00:28:20,000 --> 00:28:22,000
接口也是一样的

1112
00:28:22,000 --> 00:28:23,000
屏幕是一样的

1113
00:28:23,000 --> 00:28:26,000
甚至连这个 WiFi 天线的数量都是两根都是一样的

1114
00:28:26,000 --> 00:28:26,000
对吧

1115
00:28:26,000 --> 00:28:28,000
SSD 也是一样的

1116
00:28:28,000 --> 00:28:30,000
那个触摸板都是一样的

1117
00:28:30,000 --> 00:28:30,000
对

1118
00:28:30,000 --> 00:28:32,000
这件事情给人感觉就是

1119
00:28:32,000 --> 00:28:33,000
Apple 应该是把

1120
00:28:33,000 --> 00:28:35,000
直接把原来的英特尔的版本就拿过来

1121
00:28:35,000 --> 00:28:36,000
换了个新

1122
00:28:36,000 --> 00:28:37,000
换了个主板

1123
00:28:37,000 --> 00:28:39,000
大概其他的没有什么大的改进

1124
00:28:39,000 --> 00:28:40,000
就直接拿出来

1125
00:28:40,000 --> 00:28:44,000
好像在 mini 上这件事情会更显著一些

1126
00:28:44,000 --> 00:28:46,000
就至少我们看那个 iMac FX

1127
00:28:46,000 --> 00:28:47,000
昨天的拆解图

1128
00:28:47,000 --> 00:28:48,000
它打开来看

1129
00:28:48,000 --> 00:28:50,000
我们来对比跟上一代有英特尔的

1130
00:28:50,000 --> 00:28:52,000
这个芯片的 MacBook Pro

1131
00:28:52,000 --> 00:28:53,000
它确实是一模一样的

1132
00:28:53,000 --> 00:28:54,000
连那个

1133
00:28:54,000 --> 00:28:55,000
他们说那个

1134
00:28:55,000 --> 00:28:58,000
就是连那个 CPU 风扇的型号都是一模一样的

1135
00:28:58,000 --> 00:28:59,000
没错

1136
00:28:59,000 --> 00:29:00,000
而且 mini 的话

1137
00:29:00,000 --> 00:29:01,000
好像据说会空

1138
00:29:01,000 --> 00:29:03,000
额外空窄很多空间

1139
00:29:03,000 --> 00:29:04,000
就是明明可以做的更小的

1140
00:29:04,000 --> 00:29:07,000
更精简的一个设备

1141
00:29:07,000 --> 00:29:07,000
对

1142
00:29:07,000 --> 00:29:09,000
它其实里面就是半空了

1143
00:29:09,000 --> 00:29:09,000
已经

1144
00:29:09,000 --> 00:29:10,000
对

1145
00:29:10,000 --> 00:29:12,000
当时 Rail 问我要不要买 mini

1146
00:29:12,000 --> 00:29:14,000
我觉得这肯定不能玩

1147
00:29:14,000 --> 00:29:16,000
这明明可以做的更小

1148
00:29:16,000 --> 00:29:17,000
然后一定要塞

1149
00:29:17,000 --> 00:29:18,000
在既有的盒子里面

1150
00:29:18,000 --> 00:29:21,000
那我宁可等更小的下一代好了

1151
00:29:21,000 --> 00:29:23,000
下一代也不一定变得更小

1152
00:29:23,000 --> 00:29:24,000
可能变得更 powerful 了

1153
00:29:24,000 --> 00:29:26,000
就是下次给你一个 mini

1154
00:29:26,000 --> 00:29:27,000
Mac mini Pro 之类的这种

1155
00:29:27,000 --> 00:29:28,000
对

1156
00:29:28,000 --> 00:29:29,000
不管怎么说

1157
00:29:29,000 --> 00:29:30,000
这一代显然没有下载好

1158
00:29:30,000 --> 00:29:31,000
对

1159
00:29:31,000 --> 00:29:32,000
这句话是永远是对的

1160
00:29:32,000 --> 00:29:34,000
但是早买早享受

1161
00:29:34,000 --> 00:29:35,000
这也是有道理

1162
00:29:35,000 --> 00:29:37,000
我印象特别深刻

1163
00:29:37,000 --> 00:29:38,000
因为我当时是买的

1164
00:29:38,000 --> 00:29:41,000
你们记不记得苹果是在 2012 年发布的

1165
00:29:41,000 --> 00:29:43,000
第一款 Retina 的 MacBook Pro

1166
00:29:43,000 --> 00:29:44,000
15 寸的那一款

1167
00:29:44,000 --> 00:29:47,000
它当时还是搭载的独立显卡

1168
00:29:47,000 --> 00:29:47,000
还是 N 5 的那一款

1169
00:29:47,000 --> 00:29:47,000
还是 N 5 的那一款

1170
00:29:47,000 --> 00:29:47,000
还是 N 5 的那一款

1171
00:29:47,000 --> 00:29:49,000
NVIDIA 的应该是多少来的

1172
00:29:49,000 --> 00:29:50,000
什么 GT 00 M 吧

1173
00:29:50,000 --> 00:29:51,000
好像是

1174
00:29:51,000 --> 00:29:52,000
对

1175
00:29:52,000 --> 00:29:54,000
那一代我应该也是买了的

1176
00:29:54,000 --> 00:29:57,000
我都是第一个去吃第一代螃蟹的

1177
00:29:57,000 --> 00:30:00,000
那你遇到质量问题了吗

1178
00:30:00,000 --> 00:30:02,000
我好像不记得我遇到什么问题

1179
00:30:02,000 --> 00:30:04,000
我记得我对那台 MacBook

1180
00:30:04,000 --> 00:30:05,000
当时还各方面挺满意的

1181
00:30:05,000 --> 00:30:07,000
说回来这个 M 1

1182
00:30:07,000 --> 00:30:09,000
因为你没有买 mini

1183
00:30:09,000 --> 00:30:11,000
然后因为你有 DDK

1184
00:30:11,000 --> 00:30:12,000
所以我们目前

1185
00:30:12,000 --> 00:30:14,000
苹果目前还没有公布

1186
00:30:14,000 --> 00:30:16,000
到底说 DDK 它是租给你们用

1187
00:30:16,000 --> 00:30:16,000
对吧

1188
00:30:16,000 --> 00:30:17,000
对吧

1189
00:30:17,000 --> 00:30:17,000
当时也说得很明确

1190
00:30:17,000 --> 00:30:19,000
那个东西产权不是属于你的

1191
00:30:19,000 --> 00:30:19,000
对

1192
00:30:19,000 --> 00:30:20,000
到时候你还得退回去

1193
00:30:20,000 --> 00:30:20,000
对

1194
00:30:20,000 --> 00:30:22,000
但是不知道退回去之后

1195
00:30:22,000 --> 00:30:23,000
然后呢

1196
00:30:23,000 --> 00:30:24,000
因为你是为那个付了钱的

1197
00:30:24,000 --> 00:30:25,000
对吧

1198
00:30:25,000 --> 00:30:25,000
对

1199
00:30:25,000 --> 00:30:26,000
当然那个钱的话

1200
00:30:26,000 --> 00:30:28,000
它说的是一个 program fee

1201
00:30:28,000 --> 00:30:30,000
是加入这个计划的钱

1202
00:30:30,000 --> 00:30:31,000
它和买这个设备

1203
00:30:31,000 --> 00:30:32,000
根本就没有任何的关系

1204
00:30:32,000 --> 00:30:33,000
所以说

1205
00:30:33,000 --> 00:30:35,000
它即使要求你收回去

1206
00:30:35,000 --> 00:30:36,000
然后什么也不说

1207
00:30:36,000 --> 00:30:38,000
你也是没有办法

1208
00:30:38,000 --> 00:30:39,000
说去抱怨这件事情

1209
00:30:39,000 --> 00:30:41,000
但是好像据说

1210
00:30:41,000 --> 00:30:43,000
按照当年那个 PowerPC

1211
00:30:43,000 --> 00:30:44,000
这个迁移的

1212
00:30:44,000 --> 00:30:45,000
那个时候的事情的话

1213
00:30:45,000 --> 00:30:46,000
苹果之后

1214
00:30:46,000 --> 00:30:47,000
你还回去的时候

1215
00:30:47,000 --> 00:30:48,000
是会还给

1216
00:30:48,000 --> 00:30:50,000
是会再换给你一个

1217
00:30:50,000 --> 00:30:52,000
市售的一个正式版的一个产品的

1218
00:30:52,000 --> 00:30:53,000
现在开发者

1219
00:30:53,000 --> 00:30:55,000
大家都还挺期待这件事情

1220
00:30:55,000 --> 00:30:57,000
当时它是给了一个

1221
00:30:57,000 --> 00:30:59,000
好像是英特尔版本的 iMac

1222
00:30:59,000 --> 00:31:01,000
给那些就是尝试的开发者

1223
00:31:01,000 --> 00:31:03,000
但是可能这件事情不太好比

1224
00:31:03,000 --> 00:31:04,000
因为当时那个苹果开发者的数量

1225
00:31:04,000 --> 00:31:05,000
还是非常少的

1226
00:31:05,000 --> 00:31:05,000
对吧

1227
00:31:05,000 --> 00:31:07,000
至少跟现在不是一个数量级

1228
00:31:07,000 --> 00:31:09,000
可能差两个数量级要估计

1229
00:31:09,000 --> 00:31:10,000
那现在就是说

1230
00:31:10,000 --> 00:31:11,000
有这么多人的情况下

1231
00:31:11,000 --> 00:31:14,000
估计不能送 iMac 了吧

1232
00:31:14,000 --> 00:31:15,000
有点贵

1233
00:31:15,000 --> 00:31:16,000
能送一个 Mac mini

1234
00:31:16,000 --> 00:31:17,000
回来就已经不错了

1235
00:31:17,000 --> 00:31:18,000
对

1236
00:31:18,000 --> 00:31:20,000
我觉得可能送一个 M 1 的 mini

1237
00:31:20,000 --> 00:31:21,000
应该算一下价值上

1238
00:31:21,000 --> 00:31:22,000
应该是差不多的

1239
00:31:22,000 --> 00:31:24,000
因为现在它 M 1 的那个 Mac mini

1240
00:31:24,000 --> 00:31:25,000
它标配是多少钱

1241
00:31:25,000 --> 00:31:27,000
好像就是 600 刀差不多是吧

1242
00:31:27,000 --> 00:31:29,000
599 还是 699 来的

1243
00:31:29,000 --> 00:31:30,000
好像差不多

1244
00:31:30,000 --> 00:31:31,000
反正是这个价位上

1245
00:31:31,000 --> 00:31:33,000
但要是这样比的话

1246
00:31:33,000 --> 00:31:35,000
现在开发者

1247
00:31:35,000 --> 00:31:36,000
虽然说可能比原来多了很多

1248
00:31:36,000 --> 00:31:37,000
比如说多 10 倍

1249
00:31:37,000 --> 00:31:39,000
那它苹果的市值也翻 10 倍了

1250
00:31:39,000 --> 00:31:39,000
是吧

1251
00:31:39,000 --> 00:31:40,000
那也可以

1252
00:31:40,000 --> 00:31:44,000
它也不能赔钱给你

1253
00:31:44,000 --> 00:31:44,000
我的意思就是说

1254
00:31:44,000 --> 00:31:46,000
它可能就是要让点力

1255
00:31:46,000 --> 00:31:46,000
比如说

1256
00:31:46,000 --> 00:31:47,000
不怎么赚钱

1257
00:31:47,000 --> 00:31:48,000
你算吧

1258
00:31:48,000 --> 00:31:49,000
如果说我们查一下

1259
00:31:49,000 --> 00:31:50,000
现在 Mac mini

1260
00:31:50,000 --> 00:31:53,000
官方售价是多少钱

1261
00:31:53,000 --> 00:31:53,000
对吧

1262
00:31:53,000 --> 00:31:54,000
M 1 的刚好 699

1263
00:31:54,000 --> 00:31:56,000
你交的开发者费用

1264
00:31:56,000 --> 00:31:58,000
差不多是 500 刀

1265
00:31:58,000 --> 00:31:58,000
对吧

1266
00:31:58,000 --> 00:31:59,000
那我们知道苹果

1267
00:31:59,000 --> 00:32:00,000
大概是通常来说

1268
00:32:00,000 --> 00:32:04,000
是 30%的利润率

1269
00:32:04,000 --> 00:32:06,000
差不多 mini 的成本

1270
00:32:06,000 --> 00:32:08,000
也就是三四百刀的样子

1271
00:32:08,000 --> 00:32:09,000
那减掉物流成本

1272
00:32:09,000 --> 00:32:10,000
估计能打得住

1273
00:32:10,000 --> 00:32:11,000
我估计

1274
00:32:11,000 --> 00:32:12,000
实在不行

1275
00:32:12,000 --> 00:32:15,000
我觉得给开发者一个折扣券

1276
00:32:15,000 --> 00:32:15,000
什么的

1277
00:32:15,000 --> 00:32:16,000
能够抵消

1278
00:32:16,000 --> 00:32:18,000
一下你自己去买的时候的价格

1279
00:32:18,000 --> 00:32:20,000
我觉得其实也已经很不错了

1280
00:32:20,000 --> 00:32:21,000
第五年

1281
00:32:21,000 --> 00:32:23,000
Apple developer 年费

1282
00:32:23,000 --> 00:32:24,000
也可以

1283
00:32:24,000 --> 00:32:25,000
对

1284
00:32:25,000 --> 00:32:25,000
也可以

1285
00:32:25,000 --> 00:32:27,000
也是个方案

1286
00:32:27,000 --> 00:32:31,000
或者给 App Store 的 gift card

1287
00:32:31,000 --> 00:32:32,000
你可以去店里买东西也行

1288
00:32:32,000 --> 00:32:34,000
对

1289
00:32:34,000 --> 00:32:34,000
那就和

1290
00:32:34,000 --> 00:32:36,000
其实就和抵钱差不多一个意思

1291
00:32:36,000 --> 00:32:36,000
对

1292
00:32:36,000 --> 00:32:37,000
但是你自由一点

1293
00:32:37,000 --> 00:32:38,000
你不一定说一定

1294
00:32:38,000 --> 00:32:39,000
假设你不想要 mini

1295
00:32:39,000 --> 00:32:40,000
你只想要个 air

1296
00:32:40,000 --> 00:32:41,000
对吧

1297
00:32:41,000 --> 00:32:43,000
他给你选的多一些

1298
00:32:43,000 --> 00:32:43,000
是的

1299
00:32:43,000 --> 00:32:44,000
这个还挺

1300
00:32:44,000 --> 00:32:46,000
还挺期待到时候会怎么样

1301
00:32:46,000 --> 00:32:48,000
但如果说到时候真的换回来一个 mini

1302
00:32:48,000 --> 00:32:49,000
你可以拿它来做

1303
00:32:49,000 --> 00:32:51,000
这个什么编译主机用

1304
00:32:51,000 --> 00:32:51,000
对吧

1305
00:32:51,000 --> 00:32:52,000
对

1306
00:32:52,000 --> 00:32:52,000
可以

1307
00:32:52,000 --> 00:32:54,000
倒是是没问题的

1308
00:32:54,000 --> 00:32:57,000
毕竟比你 iMac Pro 的编译性能要好

1309
00:32:57,000 --> 00:32:58,000
对

1310
00:32:58,000 --> 00:32:59,000
我现在都在犹豫

1311
00:32:59,000 --> 00:33:01,000
我要不要干脆拿个 mini

1312
00:33:01,000 --> 00:33:03,000
还把我这个 iMac Pro 给替代出来了

1313
00:33:03,000 --> 00:33:05,000
就把 iMac Pro 给出了

1314
00:33:05,000 --> 00:33:06,000
然后换一个什么

1315
00:33:06,000 --> 00:33:09,000
Pro XDR Display 回来

1316
00:33:09,000 --> 00:33:11,000
接上那个 Mac mini

1317
00:33:11,000 --> 00:33:11,000
对

1318
00:33:11,000 --> 00:33:14,000
但是那个显示器的价格又变成了一个阻碍

1319
00:33:14,000 --> 00:33:15,000
等一下

1320
00:33:15,000 --> 00:33:16,000
他们说

1321
00:33:16,000 --> 00:33:16,000
是怎么来的

1322
00:33:16,000 --> 00:33:21,000
就是那个显示器的支架的价钱是要比 mini 贵的

1323
00:33:21,000 --> 00:33:22,000
对

1324
00:33:22,000 --> 00:33:22,000
是的

1325
00:33:22,000 --> 00:33:24,000
那个支架的比 mini 还贵

1326
00:33:24,000 --> 00:33:27,000
所以我去店里买的时候

1327
00:33:27,000 --> 00:33:29,000
我又仔细的端详了一下那个支架

1328
00:33:29,000 --> 00:33:32,000
它做的确实是很优雅的

1329
00:33:32,000 --> 00:33:33,000
很 fancy

1330
00:33:33,000 --> 00:33:37,000
有一种这种跑车的感觉

1331
00:33:37,000 --> 00:33:37,000
是不是

1332
00:33:37,000 --> 00:33:38,000
对

1333
00:33:38,000 --> 00:33:39,000
是的

1334
00:33:39,000 --> 00:33:41,000
那你要买吗

1335
00:33:41,000 --> 00:33:42,000
我觉得还是值那个钱

1336
00:33:42,000 --> 00:33:45,000
我觉得想来想来冷静一下

1337
00:33:45,000 --> 00:33:46,000
还是等着

1338
00:33:46,000 --> 00:33:49,000
它二代出现 M 2 这样的芯片的时候再迁移

1339
00:33:49,000 --> 00:33:54,000
确实现在在 M 1 上要完全拿来作为一个工作开发环境的话

1340
00:33:54,000 --> 00:33:56,000
可能还会稍微有一点障碍

1341
00:33:56,000 --> 00:34:00,000
这种情况下的话就没有必要这样非要强行换过去了

1342
00:34:00,000 --> 00:34:02,000
那刚好那我们就刚才聊完了硬件好了

1343
00:34:02,000 --> 00:34:04,000
我们就过渡到说这个软件的问题

1344
00:34:04,000 --> 00:34:07,000
就是目前你用下来在日常生活中

1345
00:34:07,000 --> 00:34:08,000
我们分两类吧

1346
00:34:08,000 --> 00:34:12,000
就首先说你的工作上如果用它会遇到什么样的障碍

1347
00:34:12,000 --> 00:34:12,000
然后说是如果你日常就是日常消遣用它会遇到什么样的障碍呢

1348
00:34:12,000 --> 00:34:12,000
然后说是如果你日常就是日常消遣用它会遇到什么样的障碍呢

1349
00:34:12,000 --> 00:34:17,000
那么现在做工作这一块吧

1350
00:34:17,000 --> 00:34:21,000
就是说你说还是有一些工具链不够那么完善的对吧

1351
00:34:21,000 --> 00:34:22,000
就主要是哪些呢

1352
00:34:22,000 --> 00:34:27,000
是的就是如果是苹果自己相关的 Xcode 相关的这些东西的话

1353
00:34:27,000 --> 00:34:28,000
几乎都毫无问题

1354
00:34:28,000 --> 00:34:30,000
所有东西都它都把你已经想好了

1355
00:34:30,000 --> 00:34:33,000
你就顶多是调一点参数改些参数就行了

1356
00:34:33,000 --> 00:34:35,000
然后的话最多的话就是 bro

1357
00:34:35,000 --> 00:34:38,000
就是那些命令行下面的话一些工具

1358
00:34:38,000 --> 00:34:42,000
本身的话这次做的这个兼容层是非常完美的

1359
00:34:42,000 --> 00:34:42,000
所以说你如果是用了这个工具链的话就是那些命令行下面的话一些工具本身的话这次做的这个兼容层是非常完美的

1360
00:34:42,000 --> 00:34:46,000
就是英特尔的阿金志在机器上执行不会有任何的问题

1361
00:34:46,000 --> 00:34:51,000
但是一旦遇到像 BatchScript 这样的脚本的时候就可能会出问题了

1362
00:34:51,000 --> 00:34:56,000
然后特别是当他需要去编译本地编译一些那个代码出来

1363
00:34:56,000 --> 00:34:57,000
然后去运行的时候就会出问题

1364
00:34:57,000 --> 00:35:01,000
但其实这个事情有一个很简单的解决方法

1365
00:35:01,000 --> 00:35:04,000
你把你整个 terminal 就是 iterm 或者是官方的 terminal

1366
00:35:04,000 --> 00:35:08,000
用那个特定的一个指令去执行了之后

1367
00:35:08,000 --> 00:35:11,000
让它直接让整个 terminal 运行英特尔的框架之下

1368
00:35:11,000 --> 00:35:12,000
这样的话

1369
00:35:12,000 --> 00:35:16,000
它去执行的下面的子进程 Batch 然后和 Script 的话

1370
00:35:16,000 --> 00:35:21,000
都会延续着它的母进程的这么一个附进程的这么一个设置

1371
00:35:21,000 --> 00:35:23,000
所以说就是以虚拟的方式去运行

1372
00:35:23,000 --> 00:35:26,000
所以说可以消灭掉很多很多的问题

1373
00:35:26,000 --> 00:35:27,000
这里可能要解释一下

1374
00:35:27,000 --> 00:35:29,000
就是说首先默认情况下

1375
00:35:29,000 --> 00:35:34,000
在 M 1 的 Mac 上面你开的任何程序

1376
00:35:34,000 --> 00:35:35,000
它有两种程序

1377
00:35:35,000 --> 00:35:40,000
一种是原生的 ARM 指令级的这种程序

1378
00:35:40,000 --> 00:35:40,000
然后就是所谓的

1379
00:35:40,000 --> 00:35:41,000
这种叫 Native

1380
00:35:41,000 --> 00:35:42,000
我们叫原生的

1381
00:35:42,000 --> 00:35:42,000
对吧

1382
00:35:42,000 --> 00:35:45,000
还有一种就是用英特尔的这个指令

1383
00:35:45,000 --> 00:35:49,000
但是是通过那个 Rosetta 2 的这个模拟层来实现的

1384
00:35:49,000 --> 00:35:49,000
对吧

1385
00:35:49,000 --> 00:35:54,000
Emulation 就是用在一个 ARM 的芯片上模拟运行 X 86 的指令

1386
00:35:54,000 --> 00:35:59,000
然后来跑原来那些旧的英特尔的那些指令集的程序

1387
00:35:59,000 --> 00:36:00,000
不做任何修改

1388
00:36:00,000 --> 00:36:01,000
对 是的

1389
00:36:01,000 --> 00:36:03,000
然后你的目前的状况是说

1390
00:36:03,000 --> 00:36:06,000
如果你用那些原生的

1391
00:36:06,000 --> 00:36:08,000
有的话是没有任何问题的

1392
00:36:08,000 --> 00:36:09,000
但是如果说原生

1393
00:36:09,000 --> 00:36:12,000
它原来是英特尔的这个指令集的程序

1394
00:36:12,000 --> 00:36:17,000
你最好还是用 Rosetta 2 的方式来驱动它会比较好一些

1395
00:36:17,000 --> 00:36:19,000
就是它如果本身是二进制的分发

1396
00:36:19,000 --> 00:36:21,000
然后是英特尔的代码

1397
00:36:21,000 --> 00:36:24,000
你就直接当它就是一个原生程序

1398
00:36:24,000 --> 00:36:25,000
用起来没有任何的问题

1399
00:36:25,000 --> 00:36:27,000
这个兼容层做得非常好

1400
00:36:27,000 --> 00:36:30,000
但这个时候它还是通过这个模拟的方式来执行的

1401
00:36:30,000 --> 00:36:30,000
对吧

1402
00:36:30,000 --> 00:36:32,000
因为它不是原生的一个 ARM 程序

1403
00:36:32,000 --> 00:36:32,000
对

1404
00:36:32,000 --> 00:36:35,000
它只是以此 CPU 性能上会有损耗

1405
00:36:35,000 --> 00:36:36,000
另外我观察的话

1406
00:36:36,000 --> 00:36:39,000
它的内存占用上几乎是它在英特尔设备上的两倍

1407
00:36:39,000 --> 00:36:42,000
可能是要涉及到这个虚拟的一个方式

1408
00:36:42,000 --> 00:36:42,000
的话

1409
00:36:42,000 --> 00:36:44,000
它有一些特定的一些损耗

1410
00:36:44,000 --> 00:36:45,000
可能要翻译一些指令

1411
00:36:45,000 --> 00:36:47,000
要缓存起来可能

1412
00:36:47,000 --> 00:36:47,000
对

1413
00:36:47,000 --> 00:36:47,000
是的

1414
00:36:47,000 --> 00:36:51,000
所以的话就是一个内存和 CPU 的一个问题

1415
00:36:51,000 --> 00:36:52,000
但是不会影响你工作

1416
00:36:52,000 --> 00:36:53,000
所以但是的话

1417
00:36:53,000 --> 00:36:55,000
就是会直接跑不起来的程序的话

1418
00:36:55,000 --> 00:36:57,000
主要都是一些特别复杂的

1419
00:36:57,000 --> 00:36:59,000
然后脚本类型的

1420
00:36:59,000 --> 00:37:00,000
因为脚本类型的话

1421
00:37:00,000 --> 00:37:02,000
它会导致你这个翻译的机制

1422
00:37:02,000 --> 00:37:03,000
你不知道你现在该去工作

1423
00:37:03,000 --> 00:37:07,000
你该对这个脚本进行一些特定的一些兼容性的一些事情

1424
00:37:07,000 --> 00:37:10,000
所以就它就整个就 break 掉了

1425
00:37:10,000 --> 00:37:12,000
你的意思就是说脚本

1426
00:37:12,000 --> 00:37:12,000
就是

1427
00:37:12,000 --> 00:37:13,000
它是以 ARM 的方式来运行的

1428
00:37:13,000 --> 00:37:16,000
但是开发者是在这个 X 86 的整理机上实现

1429
00:37:16,000 --> 00:37:18,000
所以导致这里面有点冲突的地方

1430
00:37:18,000 --> 00:37:19,000
对

1431
00:37:19,000 --> 00:37:19,000
是的

1432
00:37:19,000 --> 00:37:20,000
没错

1433
00:37:20,000 --> 00:37:21,000
就比如说你是那个脚

1434
00:37:21,000 --> 00:37:24,000
它直接靠一个脚本去编译出一段代码

1435
00:37:24,000 --> 00:37:26,000
这个编译的那些各种参数和那个命令的话

1436
00:37:26,000 --> 00:37:28,000
都是为 X 86 环境设计的

1437
00:37:28,000 --> 00:37:30,000
然后这个时候你去执行的话

1438
00:37:30,000 --> 00:37:30,000
那个整个 batch

1439
00:37:30,000 --> 00:37:31,000
整个 terminal

1440
00:37:31,000 --> 00:37:33,000
这个环境全都是在 ARM 状态下

1441
00:37:33,000 --> 00:37:34,000
它运到这个脚本

1442
00:37:34,000 --> 00:37:37,000
那个脚本里面自然都各种命令就和它出问题了

1443
00:37:37,000 --> 00:37:38,000
它就没法进行下去了

1444
00:37:38,000 --> 00:37:41,000
就可能连那个参数都不支持了

1445
00:37:41,000 --> 00:37:42,000
比方说也是 X 86 特有的参数

1446
00:37:42,000 --> 00:37:43,000
对

1447
00:37:43,000 --> 00:37:43,000
是的

1448
00:37:43,000 --> 00:37:46,000
但是如果你把整个 terminal 都是使用那个 ARM 指令

1449
00:37:46,000 --> 00:37:50,000
让它以那个虚拟环境的话去执行的话

1450
00:37:50,000 --> 00:37:52,000
那后面的整个动作一套

1451
00:37:52,000 --> 00:37:53,000
它就全部都对上了

1452
00:37:53,000 --> 00:37:54,000
所以说它又能用起来了

1453
00:37:54,000 --> 00:37:57,000
就是连整个这个 terminal 都运行在 Rosetta 2 的

1454
00:37:57,000 --> 00:37:58,000
这个 X 86 的环境里面

1455
00:37:58,000 --> 00:38:01,000
所以它下面启动的所有的这个脚本

1456
00:38:01,000 --> 00:38:04,000
它也认为它是还是在一个 X 86 的这个芯片上运行

1457
00:38:04,000 --> 00:38:05,000
所以就不会出任何问题

1458
00:38:05,000 --> 00:38:09,000
然后因为这个 Rosetta 2 的这个模拟层又做得特别好

1459
00:38:09,000 --> 00:38:09,000
所以目前来看

1460
00:38:09,000 --> 00:38:11,000
兼容性上是可以得到

1461
00:38:11,000 --> 00:38:11,000
保证的

1462
00:38:11,000 --> 00:38:11,000
对

1463
00:38:11,000 --> 00:38:12,000
是的

1464
00:38:12,000 --> 00:38:12,000
OK

1465
00:38:12,000 --> 00:38:13,000
那你有没有留意到这个

1466
00:38:13,000 --> 00:38:16,000
它用这个 Rosetta 2 来模拟运行 X 86 的这些

1467
00:38:16,000 --> 00:38:18,000
不管是脚本也好

1468
00:38:18,000 --> 00:38:19,000
还是一些就是比如说像 Dropbox

1469
00:38:19,000 --> 00:38:20,000
它还没有改

1470
00:38:20,000 --> 00:38:20,000
对吧

1471
00:38:20,000 --> 00:38:21,000
这种原人的程序

1472
00:38:21,000 --> 00:38:24,000
除了刚才你提到这个内存占用比较大的问题之外

1473
00:38:24,000 --> 00:38:26,000
它性能损耗大概有多少

1474
00:38:26,000 --> 00:38:27,000
你能感受得到吗

1475
00:38:27,000 --> 00:38:29,000
UI 程序的话几乎感受不到

1476
00:38:29,000 --> 00:38:33,000
就是你可能感觉点开的时候稍微它慢了一点

1477
00:38:33,000 --> 00:38:36,000
只是可能慢了那么一秒不到的一个时间吧

1478
00:38:36,000 --> 00:38:37,000
但是我不确定这是心理作用

1479
00:38:37,000 --> 00:38:40,000
还是那个它真的是慢的一个作用

1480
00:38:41,000 --> 00:38:43,000
也有可能是今天我们要说到的后面那个问题导致的

1481
00:38:43,000 --> 00:38:44,000
对吧

1482
00:38:44,000 --> 00:38:45,000
是的

1483
00:38:45,000 --> 00:38:49,000
然后根据别人的评测结果来看的话

1484
00:38:49,000 --> 00:38:51,000
即使是在虚拟层上运行的那个速度的话

1485
00:38:51,000 --> 00:38:54,000
都比在原来的英特尔机器上原生运行还快

1486
00:38:54,000 --> 00:38:56,000
这个实在是太可怕了

1487
00:38:56,000 --> 00:38:57,000
对

1488
00:38:57,000 --> 00:39:00,000
这个是我觉得最让我们吃惊的一个地方

1489
00:39:00,000 --> 00:39:05,000
它在一个 M 1 芯片上模拟运行 X 86 的指令

1490
00:39:05,000 --> 00:39:10,000
还比在 X 86 的原生的那个机器上去运行还要快

1491
00:39:10,000 --> 00:39:10,000
因为它是一个很快的机器

1492
00:39:10,000 --> 00:39:13,000
因为这个 M 1 的这个性能提升足够大嘛

1493
00:39:13,000 --> 00:39:13,000
对吧

1494
00:39:13,000 --> 00:39:14,000
然后它模拟损耗

1495
00:39:14,000 --> 00:39:18,000
比如说它 M 1 比那个上一代 X 86 的性能提高了 70%

1496
00:39:18,000 --> 00:39:21,000
然后那模拟损耗可能只有 20%或者是 30%

1497
00:39:21,000 --> 00:39:23,000
那这样算下来我还是有 40%的提高

1498
00:39:23,000 --> 00:39:24,000
对不对

1499
00:39:24,000 --> 00:39:26,000
这个真的是把英特尔摩穿

1500
00:39:26,000 --> 00:39:28,000
T 1 摩穿了

1501
00:39:28,000 --> 00:39:29,000
是的

1502
00:39:29,000 --> 00:39:30,000
太差了

1503
00:39:30,000 --> 00:39:31,000
这个就让人感觉

1504
00:39:31,000 --> 00:39:32,000
就都怀疑人生了

1505
00:39:32,000 --> 00:39:33,000
这英特尔到底这么多年

1506
00:39:33,000 --> 00:39:34,000
他现在最近在干什么

1507
00:39:34,000 --> 00:39:36,000
真的是没有对比都没有伤害

1508
00:39:36,000 --> 00:39:39,000
就你在 Apple 搞出一个东西之前

1509
00:39:39,000 --> 00:39:40,000
你是不想做的

1510
00:39:40,000 --> 00:39:44,000
不知道英特尔是已经老太隆重到了什么地步

1511
00:39:44,000 --> 00:39:45,000
是的

1512
00:39:45,000 --> 00:39:47,000
虽然我们经常会调侃牙膏厂

1513
00:39:47,000 --> 00:39:50,000
但是我们可能心里面总会有一个想法说

1514
00:39:50,000 --> 00:39:54,000
可能现在芯片发展的确就是到了这个瓶颈了

1515
00:39:54,000 --> 00:39:56,000
老实说这个摩尔定律到头了

1516
00:39:56,000 --> 00:39:57,000
对不对

1517
00:39:57,000 --> 00:39:59,000
然后苹果说来看我吊打你一下

1518
00:39:59,000 --> 00:40:00,000
对

1519
00:40:00,000 --> 00:40:03,000
只不过在新的 M 1 上面的话

1520
00:40:03,000 --> 00:40:05,000
还是能发现一些不一样的东西

1521
00:40:05,000 --> 00:40:07,000
有一些可能是在本来在 X 86 结构上

1522
00:40:07,000 --> 00:40:10,000
我们已经熟悉了十几年

1523
00:40:10,000 --> 00:40:10,000
几十年

1524
00:40:10,000 --> 00:40:14,000
那些东西它现在在苹果这边已经被颠覆了

1525
00:40:14,000 --> 00:40:15,000
比如说我发现的话

1526
00:40:15,000 --> 00:40:16,000
可能有这几个

1527
00:40:16,000 --> 00:40:20,000
一个是根据最新的拆解结果看的话

1528
00:40:20,000 --> 00:40:25,000
新的 WiFi 和蓝牙芯片已经不再是一个高通的独立的设备了

1529
00:40:25,000 --> 00:40:26,000
在原来的 iMac 上的话

1530
00:40:26,000 --> 00:40:27,000
我理解的话

1531
00:40:27,000 --> 00:40:30,000
它应该还是在 PCIE 总型上的一个设备吧

1532
00:40:30,000 --> 00:40:35,000
他老的苹果的 Mac 方案的 WiFi 方案一般都是接博通的方案

1533
00:40:35,000 --> 00:40:36,000
博通的都给他做一块卡

1534
00:40:36,000 --> 00:40:36,000
对

1535
00:40:36,000 --> 00:40:39,000
但是这个事情好像也不是苹果先发明的

1536
00:40:39,000 --> 00:40:40,000
因为我记得

1537
00:40:40,000 --> 00:40:40,000
如果没记错的话

1538
00:40:40,000 --> 00:40:44,000
英特尔是最近两年做了一个技术

1539
00:40:44,000 --> 00:40:48,000
就是他把 WiFi 的主要也是这个

1540
00:40:48,000 --> 00:40:48,000
因为他分两个

1541
00:40:48,000 --> 00:40:51,000
一个是叫做 physical layer

1542
00:40:51,000 --> 00:40:51,000
就是物理层

1543
00:40:51,000 --> 00:40:55,000
包括什么无线信号的乔治解条那一套东西

1544
00:40:55,000 --> 00:40:56,000
他单独还有个东西

1545
00:40:56,000 --> 00:41:00,000
但是他的逻辑就是什么协议控制那层

1546
00:41:00,000 --> 00:41:02,000
他就已经做到了英特尔的芯片里面去

1547
00:41:02,000 --> 00:41:06,000
所以你现在去买一些比较最新的英特尔的移动笔记本

1548
00:41:06,000 --> 00:41:09,000
你会发现他也是在那个芯片组里面

1549
00:41:09,000 --> 00:41:10,000
就是在英特尔的芯片里面

1550
00:41:10,000 --> 00:41:11,000
芯片里面完成的

1551
00:41:11,000 --> 00:41:12,000
就这个事情也是一样的

1552
00:41:12,000 --> 00:41:13,000
明白

1553
00:41:13,000 --> 00:41:17,000
以后都是变成那种独立的

1554
00:41:17,000 --> 00:41:20,000
就我们以前还搞那个就拆那个叫做拆卡

1555
00:41:20,000 --> 00:41:22,000
比如说我们给一个老的 Mac 换上

1556
00:41:22,000 --> 00:41:26,000
比如说 WiFi 6 的这个 WiFi 卡也是可行的

1557
00:41:26,000 --> 00:41:27,000
但以后就越来越不可行了

1558
00:41:27,000 --> 00:41:29,000
就是因为它是集成在 CPU 里面到了

1559
00:41:29,000 --> 00:41:30,000
对

1560
00:41:30,000 --> 00:41:33,000
有一个更加的更直观的就是那个 FaceTime 的摄像头

1561
00:41:33,000 --> 00:41:34,000
原来的话

1562
00:41:34,000 --> 00:41:37,000
FaceTime 摄像头也是靠 USB 总线接入的

1563
00:41:37,000 --> 00:41:39,000
现在在新的 M 1 设备上

1564
00:41:39,000 --> 00:41:41,000
我在系统信息里面看

1565
00:41:41,000 --> 00:41:43,000
USB 总线上默认上是干干净净的

1566
00:41:43,000 --> 00:41:44,000
什么设备都没有

1567
00:41:44,000 --> 00:41:46,000
说明这些内置的这些设备的话

1568
00:41:46,000 --> 00:41:50,000
很有可能现在都是苹果自己的一些特殊的一些实现

1569
00:41:50,000 --> 00:41:52,000
去直接就和主芯片去通讯了

1570
00:41:52,000 --> 00:41:56,000
而不再是一些标准的像我们是手机的这些方式

1571
00:41:56,000 --> 00:41:57,000
它叫 SUC

1572
00:41:57,000 --> 00:41:58,000
System Check

1573
00:41:58,000 --> 00:42:00,000
整合度是非常令人吃惊的

1574
00:42:00,000 --> 00:42:03,000
另外还有一个比较有趣的事情就是

1575
00:42:03,000 --> 00:42:07,000
当你的 M 1 设备如果它真的整个系统坏了之后

1576
00:42:07,000 --> 00:42:09,000
你怎么样去让它恢复这个事情

1577
00:42:09,000 --> 00:42:12,000
变得也稍微有点奇怪

1578
00:42:12,000 --> 00:42:15,000
原来的话我们的电脑不管是台式机也好

1579
00:42:15,000 --> 00:42:16,000
笔记本也好

1580
00:42:16,000 --> 00:42:17,000
坏了的话

1581
00:42:17,000 --> 00:42:19,000
像 Mac 的话是进入恢复模式

1582
00:42:19,000 --> 00:42:20,000
从往上重新下

1583
00:42:20,000 --> 00:42:24,000
然后像是或者的话更传统的方式

1584
00:42:24,000 --> 00:42:26,000
就是拿 U 盘或者是光驱光盘

1585
00:42:26,000 --> 00:42:28,000
重新去装整个操作系统

1586
00:42:28,000 --> 00:42:30,000
现在在新的 M 1 设备上

1587
00:42:30,000 --> 00:42:33,000
当如果你出现了真正彻底死掉的设备

1588
00:42:33,000 --> 00:42:34,000
彻底死掉开不开的时候

1589
00:42:34,000 --> 00:42:37,000
你要做的事情是再找一台 Mac

1590
00:42:37,000 --> 00:42:38,000
把它两个连起来

1591
00:42:38,000 --> 00:42:39,000
然后把那台 Mac

1592
00:42:39,000 --> 00:42:39,000
按到

1593
00:42:39,000 --> 00:42:41,000
要特定的开机方式

1594
00:42:41,000 --> 00:42:42,000
让它进 DFU 模式

1595
00:42:42,000 --> 00:42:44,000
然后在这边的 Mac 上去刷它

1596
00:42:44,000 --> 00:42:46,000
就像刷一个 iPhone 一样

1597
00:42:46,000 --> 00:42:48,000
它不能自举了

1598
00:42:48,000 --> 00:42:49,000
对我还没有试过

1599
00:42:49,000 --> 00:42:52,000
但是不知道是否拿一个可启动的 U 盘上去之后

1600
00:42:52,000 --> 00:42:54,000
能够通过 U 盘去启动

1601
00:42:54,000 --> 00:42:57,000
根据之前 DTK 的一些经验的话

1602
00:42:57,000 --> 00:42:59,000
那个时候是不行的

1603
00:42:59,000 --> 00:43:02,000
唯一的恢复方法就是我再拿一台 Mac

1604
00:43:02,000 --> 00:43:03,000
然后把它接上来

1605
00:43:03,000 --> 00:43:04,000
当成一个设备

1606
00:43:04,000 --> 00:43:06,000
然后把它刷一遍系统

1607
00:43:06,000 --> 00:43:07,000
所以听到这里

1608
00:43:07,000 --> 00:43:08,000
其实我们已经猜出了

1609
00:43:08,000 --> 00:43:09,000
DTK 你是遇到了什么

1610
00:43:09,000 --> 00:43:10,000
什么问题

1611
00:43:10,000 --> 00:43:11,000
还需要做这种操作

1612
00:43:11,000 --> 00:43:11,000
是吧

1613
00:43:11,000 --> 00:43:13,000
虽然我们还没识论它

1614
00:43:13,000 --> 00:43:15,000
但是我们推测出来

1615
00:43:15,000 --> 00:43:16,000
应该是这么一个结果

1616
00:43:16,000 --> 00:43:17,000
对我没有对它紧紧嘴

1617
00:43:17,000 --> 00:43:23,000
刚才说到了这个软件

1618
00:43:23,000 --> 00:43:25,000
你的就是工艺剧软件

1619
00:43:25,000 --> 00:43:26,000
没什么遇到问题

1620
00:43:26,000 --> 00:43:28,000
就是那你日常需要用的一些软件

1621
00:43:28,000 --> 00:43:29,000
上面有遇到什么问题吗

1622
00:43:29,000 --> 00:43:30,000
就是不管是原生运行的

1623
00:43:30,000 --> 00:43:32,000
还是需要模拟运行的

1624
00:43:32,000 --> 00:43:33,000
应该是完全没遇到

1625
00:43:33,000 --> 00:43:35,000
首先是因为我用的软件的话

1626
00:43:35,000 --> 00:43:37,000
大家这些开发者的话

1627
00:43:37,000 --> 00:43:38,000
都更新速度非常快

1628
00:43:38,000 --> 00:43:39,000
基本上

1629
00:43:39,000 --> 00:43:40,000
日常用到的像 Bear

1630
00:43:40,000 --> 00:43:42,000
Synth 这些的话

1631
00:43:42,000 --> 00:43:43,000
都已经专门适配

1632
00:43:43,000 --> 00:43:45,000
已经是原生代码的版本

1633
00:43:45,000 --> 00:43:46,000
都已经出来了

1634
00:43:46,000 --> 00:43:47,000
所以说没有任何问题

1635
00:43:47,000 --> 00:43:49,000
然后有一些稍微的

1636
00:43:49,000 --> 00:43:50,000
旧一点的程序

1637
00:43:50,000 --> 00:43:51,000
你像 Jobbox

1638
00:43:51,000 --> 00:43:53,000
Spotify 这些的话

1639
00:43:53,000 --> 00:43:54,000
就靠金融层

1640
00:43:54,000 --> 00:43:55,000
去你划的运行

1641
00:43:55,000 --> 00:43:56,000
也没有任何问题

1642
00:43:56,000 --> 00:43:57,000
而且我相信这些

1643
00:43:57,000 --> 00:43:59,000
他们也会比较快的

1644
00:43:59,000 --> 00:44:01,000
把 M 1 版本的就是做出来

1645
00:44:01,000 --> 00:44:03,000
因为他们还是要做

1646
00:44:03,000 --> 00:44:04,000
这个原生的

1647
00:44:04,000 --> 00:44:05,000
比较在乎用户体验的

1648
00:44:05,000 --> 00:44:05,000
这些公司

1649
00:44:05,000 --> 00:44:06,000
是的

1650
00:44:06,000 --> 00:44:08,000
而且其实整个迁移过程的话

1651
00:44:09,000 --> 00:44:10,000
其实工作量并不大

1652
00:44:10,000 --> 00:44:11,000
都是比较繁

1653
00:44:11,000 --> 00:44:12,000
主要是各种参数的

1654
00:44:12,000 --> 00:44:13,000
一些金融性的

1655
00:44:13,000 --> 00:44:14,000
一些小修小调的一些问题

1656
00:44:14,000 --> 00:44:16,000
没有什么需要你彻底去

1657
00:44:16,000 --> 00:44:17,000
颠覆原来架构

1658
00:44:17,000 --> 00:44:18,000
重构这样的一些事情

1659
00:44:18,000 --> 00:44:21,000
因为你自己也有几个程序

1660
00:44:21,000 --> 00:44:23,000
是很快就 port 到了

1661
00:44:23,000 --> 00:44:24,000
这个 M 1 上面去

1662
00:44:24,000 --> 00:44:24,000
好像这过程中

1663
00:44:24,000 --> 00:44:27,000
我理解应该也是比较平滑的

1664
00:44:27,000 --> 00:44:28,000
没有遇到什么太大的问题

1665
00:44:28,000 --> 00:44:28,000
是的

1666
00:44:28,000 --> 00:44:31,000
就基本上就是几个依赖库

1667
00:44:31,000 --> 00:44:32,000
然后把它拿来之后

1668
00:44:32,000 --> 00:44:33,000
调整一下

1669
00:44:33,000 --> 00:44:34,000
它的一些编译参数

1670
00:44:34,000 --> 00:44:35,000
在 Arm 上能编译出来

1671
00:44:35,000 --> 00:44:37,000
然后至于我自己的代码的话

1672
00:44:37,000 --> 00:44:38,000
主要是依赖 Xcode

1673
00:44:39,000 --> 00:44:39,000
这些的话

1674
00:44:39,000 --> 00:44:42,000
就基本上是点两下搞定

1675
00:44:42,000 --> 00:44:46,000
这就一直在苹果生态体系里面

1676
00:44:46,000 --> 00:44:47,000
它是比较舒服的

1677
00:44:47,000 --> 00:44:49,000
它已经帮你把所有的问题都解决了

1678
00:44:49,000 --> 00:44:51,000
然后你只用点点就好了

1679
00:44:51,000 --> 00:44:52,000
对

1680
00:44:52,000 --> 00:44:54,000
一方面是它帮解决了

1681
00:44:54,000 --> 00:44:56,000
但另外一方面就是本身的话

1682
00:44:56,000 --> 00:44:58,000
Mac 和 iOS 的开发者生态

1683
00:44:58,000 --> 00:44:59,000
就是打通的

1684
00:44:59,000 --> 00:45:01,000
大家基本上写的代码的话

1685
00:45:01,000 --> 00:45:01,000
除了一些

1686
00:45:01,000 --> 00:45:03,000
因为用的一些专用户不一样

1687
00:45:03,000 --> 00:45:03,000
它不兼容

1688
00:45:03,000 --> 00:45:04,000
但实际上本身

1689
00:45:04,000 --> 00:45:06,000
大部分你在 Mac 上的代码

1690
00:45:06,000 --> 00:45:08,000
在 iOS 上也是能用的

1691
00:45:08,000 --> 00:45:08,000
所以说

1692
00:45:08,000 --> 00:45:08,000
这个

1693
00:45:08,000 --> 00:45:09,000
它也不太会

1694
00:45:09,000 --> 00:45:09,000
所以说这个

1695
00:45:09,000 --> 00:45:11,000
它就自己就本身就不存在

1696
00:45:11,000 --> 00:45:12,000
这个牵引的这么一个障碍

1697
00:45:12,000 --> 00:45:14,000
所以就是那你在实际的

1698
00:45:14,000 --> 00:45:16,000
就是比如说我们现在你做了两款

1699
00:45:16,000 --> 00:45:17,000
Surge 的

1700
00:45:17,000 --> 00:45:20,000
就是 iOS 版和 AirPods 的 iOS 版

1701
00:45:20,000 --> 00:45:21,000
现在都可以

1702
00:45:21,000 --> 00:45:24,000
就理论上就可以在 Mac 上

1703
00:45:24,000 --> 00:45:25,000
去下这个 iOS 版来用

1704
00:45:25,000 --> 00:45:26,000
只是说它的界面

1705
00:45:26,000 --> 00:45:28,000
可能没有为这个 Mac 单独优化

1706
00:45:28,000 --> 00:45:28,000
对

1707
00:45:28,000 --> 00:45:30,000
然后碰巧刚好这两个软件

1708
00:45:30,000 --> 00:45:32,000
都是有单独的为 Mac 优化

1709
00:45:32,000 --> 00:45:33,000
甚至功能上也有比较

1710
00:45:33,000 --> 00:45:36,000
比较大的不一样的这个 Mac 版本

1711
00:45:36,000 --> 00:45:37,000
所以好像也没有什么必要

1712
00:45:37,000 --> 00:45:38,000
是的

1713
00:45:38,000 --> 00:45:40,000
而且让人感觉

1714
00:45:40,000 --> 00:45:42,000
Apple 这件事情做的还挺细心的

1715
00:45:42,000 --> 00:45:45,000
就是本来以为它大概是做到这么样

1716
00:45:45,000 --> 00:45:46,000
之后你骑起来

1717
00:45:46,000 --> 00:45:48,000
就像原来我们的虚拟机一样

1718
00:45:48,000 --> 00:45:49,000
然后你可以在里面

1719
00:45:49,000 --> 00:45:51,000
用上面大部分的 UI 功能

1720
00:45:51,000 --> 00:45:52,000
就已经还是一个不错的情况了

1721
00:45:52,000 --> 00:45:55,000
比如说我自己开发 Surge 的时候

1722
00:45:55,000 --> 00:45:57,000
虚拟机里面的 Surge

1723
00:45:57,000 --> 00:45:59,000
是肯定没有办法启动 Network Extension

1724
00:45:59,000 --> 00:46:00,000
这个网络扩展

1725
00:46:00,000 --> 00:46:03,000
去接管我 Mac 的那个网络的

1726
00:46:03,000 --> 00:46:05,000
但是现在我发现神奇的是

1727
00:46:05,000 --> 00:46:06,000
就是在 App Store 上面

1728
00:46:06,000 --> 00:46:07,000
你下了 Surge 之后

1729
00:46:07,000 --> 00:46:08,000
你用 Surge 的 iOS 版

1730
00:46:08,000 --> 00:46:11,000
它在 iOS 的这么一个模拟器

1731
00:46:11,000 --> 00:46:12,000
这么一个虚拟环境下

1732
00:46:12,000 --> 00:46:13,000
你启动了之后

1733
00:46:13,000 --> 00:46:14,000
它能够对接上系统

1734
00:46:14,000 --> 00:46:16,000
Mac 系统上的 N 1

1735
00:46:16,000 --> 00:46:18,000
扩展这一套的所有的逻辑

1736
00:46:18,000 --> 00:46:21,000
然后把整个系统的 VPN 给接管了

1737
00:46:21,000 --> 00:46:24,000
这个是让我很惊艳的一件事情

1738
00:46:24,000 --> 00:46:27,000
也就是说不用怎么改

1739
00:46:27,000 --> 00:46:28,000
iOS 的这个版本

1740
00:46:28,000 --> 00:46:31,000
也可以去操作 Mac 一些底层的

1741
00:46:31,000 --> 00:46:31,000
一些系统扩展

1742
00:46:31,000 --> 00:46:33,000
没错

1743
00:46:33,000 --> 00:46:34,000
因为它这些扩展的话

1744
00:46:34,000 --> 00:46:36,000
它的 Extension 的话

1745
00:46:36,000 --> 00:46:37,000
它在 Mac 上和 iOS 上

1746
00:46:37,000 --> 00:46:38,000
它的接口

1747
00:46:38,000 --> 00:46:39,000
是完全一样的

1748
00:46:39,000 --> 00:46:40,000
有很多扩展的接口

1749
00:46:40,000 --> 00:46:41,000
都是完全一样的

1750
00:46:41,000 --> 00:46:43,000
像之前我看

1751
00:46:43,000 --> 00:46:45,000
Net Extension Filter Data Provider

1752
00:46:45,000 --> 00:46:48,000
就是当时跟我们接下来聊的话题

1753
00:46:48,000 --> 00:46:50,000
比较相关的新闻里面的时候

1754
00:46:50,000 --> 00:46:53,000
我注意到它的 Availability

1755
00:46:53,000 --> 00:46:55,000
是比如说它会写说

1756
00:46:55,000 --> 00:46:58,000
iOS 9.0 MacOS 10.15

1757
00:46:58,000 --> 00:47:01,000
然后加上 Mac Catalyst 13 以上

1758
00:47:01,000 --> 00:47:04,000
它会说这个 Class 的

1759
00:47:04,000 --> 00:47:06,000
或者这个 API 的整个接口

1760
00:47:06,000 --> 00:47:07,000
在这三个版本里面

1761
00:47:07,000 --> 00:47:08,000
是完全一样的

1762
00:47:08,000 --> 00:47:11,000
所以它迁移成本应该是蛮小的

1763
00:47:11,000 --> 00:47:12,000
没错

1764
00:47:12,000 --> 00:47:13,000
但是就是让人感觉

1765
00:47:13,000 --> 00:47:16,000
它也居然去花了这个心去

1766
00:47:16,000 --> 00:47:17,000
还是要花这个心去做这个事情

1767
00:47:17,000 --> 00:47:19,000
也是挺不容易的

1768
00:47:19,000 --> 00:47:20,000
它可以不接

1769
00:47:20,000 --> 00:47:22,000
然后就导致这种用不了

1770
00:47:22,000 --> 00:47:23,000
对

1771
00:47:23,000 --> 00:47:24,000
它也可以完全不接

1772
00:47:24,000 --> 00:47:25,000
其实一般来说

1773
00:47:25,000 --> 00:47:26,000
用户不会太在意过

1774
00:47:26,000 --> 00:47:27,000
这件事情

1775
00:47:27,000 --> 00:47:29,000
它也要求你改写

1776
00:47:29,000 --> 00:47:31,000
像 Microsoft 就直接会

1777
00:47:31,000 --> 00:47:33,000
Windows 就会要求你

1778
00:47:33,000 --> 00:47:35,000
你再写一遍

1779
00:47:35,000 --> 00:47:36,000
对

1780
00:47:36,000 --> 00:47:36,000
从他们来看

1781
00:47:38,000 --> 00:47:39,000
这个时候反倒是说

1782
00:47:39,000 --> 00:47:41,000
苹果对这个跨平台兼容性

1783
00:47:41,000 --> 00:47:42,000
做的还蛮好的

1784
00:47:42,000 --> 00:47:43,000
但它都是自己的

1785
00:47:43,000 --> 00:47:45,000
控制的底层系统

1786
00:47:45,000 --> 00:47:45,000
没错

1787
00:47:45,000 --> 00:47:47,000
我看起来它还挺用力的

1788
00:47:47,000 --> 00:47:49,000
会去推荐事情的

1789
00:47:49,000 --> 00:47:50,000
因为我一开始以为的话

1790
00:47:50,000 --> 00:47:52,000
可能我在 iOS 的 App 里面

1791
00:47:52,000 --> 00:47:54,000
它如果在 Mac 虚拟环境下

1792
00:47:54,000 --> 00:47:56,000
我一些获取系统配置

1793
00:47:56,000 --> 00:47:58,000
系统参数的一些函数

1794
00:47:58,000 --> 00:47:59,000
应该是能拿到的是

1795
00:47:59,000 --> 00:48:00,000
Mac 的一些参数

1796
00:48:00,000 --> 00:48:01,000
这才是比较合理的

1797
00:48:01,000 --> 00:48:02,000
结果我发现

1798
00:48:02,000 --> 00:48:04,000
其实 Apple 对这个进行了一个造假

1799
00:48:04,000 --> 00:48:08,000
我在一个 Mac 设备上面

1800
00:48:08,000 --> 00:48:08,000
如果是 iOS

1801
00:48:08,000 --> 00:48:10,000
这么一种运行的方式的话

1802
00:48:10,000 --> 00:48:12,000
我拿到的设备信息是

1803
00:48:12,000 --> 00:48:13,000
iPad 14

1804
00:48:13,000 --> 00:48:14,000
对

1805
00:48:14,000 --> 00:48:15,000
14.1

1806
00:48:15,000 --> 00:48:17,000
它会欺骗你是吧

1807
00:48:17,000 --> 00:48:17,000
对

1808
00:48:17,000 --> 00:48:20,000
那你以为它是在一个 iPad 上运行的

1809
00:48:20,000 --> 00:48:22,000
对 没错

1810
00:48:22,000 --> 00:48:24,000
操作系统版本是 14.1

1811
00:48:24,000 --> 00:48:25,000
还是 14.0

1812
00:48:25,000 --> 00:48:26,000
就是它完全是虚拟化

1813
00:48:26,000 --> 00:48:28,000
造假出了一套 iOS 环境

1814
00:48:28,000 --> 00:48:29,000
让你整个应用相信

1815
00:48:29,000 --> 00:48:31,000
你真的是在一个 iOS 上面去运行

1816
00:48:31,000 --> 00:48:33,000
对 这里其实就

1817
00:48:33,000 --> 00:48:35,000
我们就很自然的说到这件事情了

1818
00:48:35,000 --> 00:48:37,000
就是说当时大家都在担心

1819
00:48:38,000 --> 00:48:43,000
就是说换成 ARM 指令集后的 M 1

1820
00:48:43,000 --> 00:48:46,000
上面很多原生的 X 86 的软件

1821
00:48:46,000 --> 00:48:47,000
不就运行不了了吗

1822
00:48:47,000 --> 00:48:48,000
那怎么办呢

1823
00:48:48,000 --> 00:48:50,000
不会面临软件荒吗

1824
00:48:50,000 --> 00:48:51,000
其实我们看目前

1825
00:48:51,000 --> 00:48:52,000
它的提问到两个解决方案

1826
00:48:52,000 --> 00:48:53,000
一个就是说通过那些 Rosetta 2

1827
00:48:53,000 --> 00:48:55,000
来模拟运行 X 86

1828
00:48:55,000 --> 00:48:57,000
目前来看质量还是非常好的

1829
00:48:57,000 --> 00:48:59,000
基本上没有什么大的问题

1830
00:48:59,000 --> 00:49:01,000
然后就是说你还可以

1831
00:49:01,000 --> 00:49:04,000
拿这个 iOS 上面的软件库

1832
00:49:04,000 --> 00:49:06,000
直接在 Mac 上不做

1833
00:49:06,000 --> 00:49:07,000
基本上不做什么修改

1834
00:49:07,000 --> 00:49:09,000
就在 Mac 上面去运行

1835
00:49:09,000 --> 00:49:11,000
这个就是说又提供了一个

1836
00:49:11,000 --> 00:49:13,000
就是说它是提供了一个

1837
00:49:13,000 --> 00:49:14,000
单从功能性来讲

1838
00:49:14,000 --> 00:49:15,000
它其实是提供了一个超级

1839
00:49:15,000 --> 00:49:17,000
它除了能运行 Mac 本身的

1840
00:49:17,000 --> 00:49:18,000
那些历史的软件

1841
00:49:18,000 --> 00:49:21,000
能运行专门为 M 1

1842
00:49:21,000 --> 00:49:22,000
芯片优化过的

1843
00:49:22,000 --> 00:49:25,000
Native 的 Mac 的软件

1844
00:49:25,000 --> 00:49:26,000
还可以运行

1845
00:49:26,000 --> 00:49:28,000
本来在 iOS 上面运行

1846
00:49:28,000 --> 00:49:30,000
没有想到过会在 Mac 上跑的

1847
00:49:30,000 --> 00:49:31,000
这种软件

1848
00:49:31,000 --> 00:49:33,000
它其实是集了三个平台的好处

1849
00:49:33,000 --> 00:49:35,000
对 是的

1850
00:49:35,000 --> 00:49:36,000
Trinity 380

1851
00:49:37,000 --> 00:49:40,000
那有一个问题

1852
00:49:40,000 --> 00:49:42,000
就是说可能打岔问一下

1853
00:49:42,000 --> 00:49:44,000
就是说因为你自己也是

1854
00:49:44,000 --> 00:49:46,000
iOS 这个程序的开发者

1855
00:49:46,000 --> 00:49:48,000
它这样的话会不会导致你的

1856
00:49:48,000 --> 00:49:50,000
这个产品的布局和

1857
00:49:50,000 --> 00:49:53,000
包括定价策略会有一些影响

1858
00:49:53,000 --> 00:49:54,000
对 是的

1859
00:49:54,000 --> 00:49:56,000
我也在思考这个问题

1860
00:49:56,000 --> 00:49:57,000
然后现在

1861
00:49:57,000 --> 00:49:59,000
暂时还没有一个

1862
00:49:59,000 --> 00:50:01,000
比较明确的一个结论

1863
00:50:01,000 --> 00:50:03,000
但是确实是未来会需要

1864
00:50:03,000 --> 00:50:04,000
更多去考虑的一个事情

1865
00:50:04,000 --> 00:50:06,000
Circ 这种比较特殊

1866
00:50:06,000 --> 00:50:07,000
就可能还

1867
00:50:07,000 --> 00:50:09,000
对于这个 iOS 的功能来说比较清晰一点

1868
00:50:09,000 --> 00:50:11,000
因为至少我们看到这个 Circ 的 iOS 版

1869
00:50:11,000 --> 00:50:12,000
和这个 Circ 的这个 Mac 版

1870
00:50:12,000 --> 00:50:14,000
它的功能上有比较显著的区别

1871
00:50:14,000 --> 00:50:16,000
比如说这个这个这个路由模式

1872
00:50:16,000 --> 00:50:18,000
这个是只有 Mac 版才有的

1873
00:50:18,000 --> 00:50:18,000
对吧

1874
00:50:18,000 --> 00:50:21,000
iOS 版目前是基于因为平台限制是没法提供的

1875
00:50:21,000 --> 00:50:22,000
是的

1876
00:50:22,000 --> 00:50:25,000
那但是如果你是直接把 iOS 版在 Mac 上运行

1877
00:50:25,000 --> 00:50:26,000
因为你根本那边就没有这个代码了

1878
00:50:26,000 --> 00:50:29,000
所以它也是没有这个这种比如路由模式

1879
00:50:29,000 --> 00:50:30,000
这种增强性的功能的

1880
00:50:30,000 --> 00:50:30,000
对不对

1881
00:50:30,000 --> 00:50:32,000
所以这个相对来说有这种差异性的地方

1882
00:50:32,000 --> 00:50:35,000
但是对于这个 iOS pass 来说就比较尴尬

1883
00:50:35,000 --> 00:50:36,000
因为它的功能其实是差不多的

1884
00:50:36,000 --> 00:50:39,000
也没有说有平台这种排他性吧

1885
00:50:39,000 --> 00:50:41,000
但 iOS pass 可能不太不太合适来比

1886
00:50:41,000 --> 00:50:43,000
因为 iOS pass 本来它不是靠这个

1887
00:50:43,000 --> 00:50:47,000
卖这个本身这个授权来来来盈利的

1888
00:50:47,000 --> 00:50:47,000
对不对

1889
00:50:47,000 --> 00:50:48,000
它是靠订阅嘛

1890
00:50:48,000 --> 00:50:49,000
对是的

1891
00:50:49,000 --> 00:50:51,000
对于现在主流是订阅制的话

1892
00:50:51,000 --> 00:50:53,000
其实就不存在这个问题

1893
00:50:53,000 --> 00:50:55,000
本来用户就是买一份订阅

1894
00:50:55,000 --> 00:50:56,000
然后在所有平台上就可以用

1895
00:50:56,000 --> 00:50:57,000
所以说你把 iOS

1896
00:50:57,000 --> 00:50:59,000
你非要拿 iOS 版本在 Mac 上用的话

1897
00:50:59,000 --> 00:51:00,000
那作者其实

1898
00:51:00,000 --> 00:51:01,000
他也不拦你对吧

1899
00:51:01,000 --> 00:51:02,000
你爱怎么用怎么用

1900
00:51:02,000 --> 00:51:03,000
不会拦你爱怎么样怎么样吧

1901
00:51:03,000 --> 00:51:05,000
但你比如说像 Synth 这样的话

1902
00:51:05,000 --> 00:51:06,000
是按

1903
00:51:06,000 --> 00:51:06,000
但

1904
00:51:06,000 --> 00:51:08,000
自然平台独立去购买的话

1905
00:51:08,000 --> 00:51:10,000
就会有点尴尬这个事情

1906
00:51:10,000 --> 00:51:13,000
Mac 版的原生应用的用户体验

1907
00:51:13,000 --> 00:51:14,000
比起 iOS 版来说

1908
00:51:14,000 --> 00:51:16,000
还是挺差距非常大的

1909
00:51:16,000 --> 00:51:19,000
就毕竟是个模拟器是吗

1910
00:51:19,000 --> 00:51:20,000
你永远你所有的操作

1911
00:51:20,000 --> 00:51:21,000
都是在那么一个虚拟化的

1912
00:51:21,000 --> 00:51:23,000
那么一个小窗口里面干的

1913
00:51:23,000 --> 00:51:24,000
和你在 Mac 上面的话

1914
00:51:24,000 --> 00:51:25,000
各种丰富的

1915
00:51:25,000 --> 00:51:27,000
就交互还是差别很大

1916
00:51:27,000 --> 00:51:28,000
对差别还是很大的

1917
00:51:28,000 --> 00:51:28,000
所以说我觉得

1918
00:51:28,000 --> 00:51:30,000
对开发者来说

1919
00:51:30,000 --> 00:51:31,000
应该是不太

1920
00:51:31,000 --> 00:51:33,000
不会太 care 的一件事情

1921
00:51:33,000 --> 00:51:34,000
就不会说因为

1922
00:51:34,000 --> 00:51:35,000
你能在我上面用了之后

1923
00:51:35,000 --> 00:51:36,000
我就

1924
00:51:36,000 --> 00:51:36,000
我就

1925
00:51:36,000 --> 00:51:37,000
Itu

1926
00:51:37,000 --> 00:51:38,000
输入减少了

1927
00:51:38,000 --> 00:51:39,000
或者是我就很担心怎么样

1928
00:51:39,000 --> 00:51:41,000
我觉得到时候不会猜成问题

1929
00:51:41,000 --> 00:51:42,000
对

1930
00:51:42,000 --> 00:51:44,000
我觉得可能主要还是像避免

1931
00:51:44,000 --> 00:51:44,000
或者说

1932
00:51:44,000 --> 00:51:46,000
如何苹果如何才能避免

1933
00:51:46,000 --> 00:51:47,000
就是 iPad

1934
00:51:47,000 --> 00:51:49,000
这种比较尴尬的一个状态

1935
00:51:49,000 --> 00:51:50,000
比如说我们现在看到

1936
00:51:50,000 --> 00:51:53,000
就是说很多国内的软件也好了

1937
00:51:53,000 --> 00:51:54,000
甚至国外的软件

1938
00:51:54,000 --> 00:51:55,000
其实也相对好一点

1939
00:51:55,000 --> 00:51:56,000
但是其实也有这个问题

1940
00:51:56,000 --> 00:51:57,000
就是说它

1941
00:51:57,000 --> 00:51:58,000
要么就是没有 summit

1942
00:51:58,000 --> 00:51:59,000
iPad

1943
00:51:59,000 --> 00:51:59,000
ON

1944
00:51:59,000 --> 00:52:01,000
因为我记得好像是

1945
00:52:01,000 --> 00:52:01,000
Instagram

1946
00:52:01,000 --> 00:52:02,000
到现在

1947
00:52:02,000 --> 00:52:03,000
还是没有 allein 拍版

1948
00:52:03,000 --> 00:52:03,000
对吧

1949
00:52:04,000 --> 00:52:04,000
没有

1950
00:52:04,000 --> 00:52:05,000
肯定没有

1951
00:52:05,000 --> 00:52:06,000
对

1952
00:52:06,000 --> 00:52:06,000
它就是

1953
00:52:06,000 --> 00:52:06,000
你要

1954
00:52:06,000 --> 00:52:08,000
要强行在 iPad 上运行

1955
00:52:08,000 --> 00:52:09,000
iPhone 版也行

1956
00:52:09,000 --> 00:52:09,000
对吧

1957
00:52:09,000 --> 00:52:10,000
就是变成一个很小的窗口

1958
00:52:10,000 --> 00:52:12,000
或者用两倍的方式

1959
00:52:12,000 --> 00:52:13,000
把它扩大

1960
00:52:13,000 --> 00:52:14,000
然后像国内的

1961
00:52:14,000 --> 00:52:15,000
有些软件

1962
00:52:15,000 --> 00:52:17,000
就是说它有这个 iPad 版

1963
00:52:17,000 --> 00:52:18,000
但 iPad 版明显你看

1964
00:52:18,000 --> 00:52:19,000
就是基本上

1965
00:52:19,000 --> 00:52:20,000
没有怎么用心去做

1966
00:52:20,000 --> 00:52:21,000
就随便重新

1967
00:52:21,000 --> 00:52:22,000
就放大了一下

1968
00:52:22,000 --> 00:52:23,000
放大了一下

1969
00:52:23,000 --> 00:52:25,000
就是很粗暴

1970
00:52:25,000 --> 00:52:25,000
比如说我记得

1971
00:52:25,000 --> 00:52:27,000
印象最深刻的

1972
00:52:27,000 --> 00:52:28,000
像京东

1973
00:52:28,000 --> 00:52:28,000
对吧

1974
00:52:28,000 --> 00:52:29,000
京东这个 APP

1975
00:52:29,000 --> 00:52:30,000
我用的比较多

1976
00:52:30,000 --> 00:52:31,000
有时候买东西看什么

1977
00:52:31,000 --> 00:52:31,000
有时候 iPad 上

1978
00:52:31,000 --> 00:52:33,000
在手边我就直接在 iPad 上用

1979
00:52:33,000 --> 00:52:36,000
它连横屏转过来

1980
00:52:36,000 --> 00:52:36,000
都不支持

1981
00:52:36,000 --> 00:52:38,000
就只能在 iPad 上竖屏

1982
00:52:38,000 --> 00:52:39,000
但我刚好就是

1983
00:52:39,000 --> 00:52:40,000
有外接键盘

1984
00:52:40,000 --> 00:52:41,000
我的 iPad 大部分

1985
00:52:41,000 --> 00:52:42,000
都是横屏的状态

1986
00:52:42,000 --> 00:52:42,000
我觉得很尴尬

1987
00:52:42,000 --> 00:52:43,000
我每次用的时候

1988
00:52:43,000 --> 00:52:44,000
还得把脑袋斜过

1989
00:52:44,000 --> 00:52:46,000
斜个 90 度去看它

1990
00:52:46,000 --> 00:52:48,000
我已经放弃了

1991
00:52:48,000 --> 00:52:48,000
我直接就用

1992
00:52:48,000 --> 00:52:49,000
那 Safari 的浏览器

1993
00:52:49,000 --> 00:52:50,000
没有

1994
00:52:50,000 --> 00:52:52,000
对

1995
00:52:52,000 --> 00:52:53,000
然后我就在想

1996
00:52:53,000 --> 00:52:53,000
就是说

1997
00:52:53,000 --> 00:52:56,000
这种 iOS APP

1998
00:52:56,000 --> 00:52:57,000
可以在 Mac 上运行

1999
00:52:57,000 --> 00:52:58,000
是可以的

2000
00:52:58,000 --> 00:53:00,000
但会不会有开发者

2001
00:53:00,000 --> 00:53:01,000
单独为这件事情去优化

2002
00:53:01,000 --> 00:53:02,000
我觉得还是一个

2003
00:53:02,000 --> 00:53:04,000
非常存疑的事情

2004
00:53:04,000 --> 00:53:05,000
就是如果不解决

2005
00:53:05,000 --> 00:53:05,000
这个

2006
00:53:05,000 --> 00:53:06,000
这个

2007
00:53:06,000 --> 00:53:07,000
付费的

2008
00:53:07,000 --> 00:53:08,000
或者用户数量的问题

2009
00:53:08,000 --> 00:53:10,000
可能还是比较难

2010
00:53:10,000 --> 00:53:12,000
你说 iPad 绝对用户数

2011
00:53:12,000 --> 00:53:13,000
肯定还是比 Mac 绝对用户数

2012
00:53:13,000 --> 00:53:14,000
要多一些的

2013
00:53:14,000 --> 00:53:15,000
但即便如此

2014
00:53:15,000 --> 00:53:16,000
厂商还是觉得

2015
00:53:16,000 --> 00:53:17,000
iPad 好像没有那么重要

2016
00:53:17,000 --> 00:53:18,000
就不管

2017
00:53:18,000 --> 00:53:20,000
那 Mac 上面就更不用想了

2018
00:53:20,000 --> 00:53:20,000
对

2019
00:53:20,000 --> 00:53:22,000
但其实得从另外一个角度

2020
00:53:22,000 --> 00:53:23,000
可以从另外一个角度

2021
00:53:23,000 --> 00:53:24,000
来看这件事情的话

2022
00:53:24,000 --> 00:53:25,000
就是对于我们这种开发者

2023
00:53:25,000 --> 00:53:28,000
是本身就有多平台的软件存在的

2024
00:53:28,000 --> 00:53:29,000
所以说会出现

2025
00:53:29,000 --> 00:53:30,000
互相平台之间

2026
00:53:30,000 --> 00:53:32,000
抢占这么的一个问题

2027
00:53:32,000 --> 00:53:33,000
但是对于更多的

2028
00:53:33,000 --> 00:53:34,000
可能开发者来说

2029
00:53:34,000 --> 00:53:35,000
它根本就没有

2030
00:53:35,000 --> 00:53:36,000
Mac 版本

2031
00:53:36,000 --> 00:53:37,000
所以说它是凭空的话

2032
00:53:37,000 --> 00:53:40,000
多了一部分市场和用户

2033
00:53:40,000 --> 00:53:40,000
对于他来说

2034
00:53:40,000 --> 00:53:42,000
这绝对是一个好消息

2035
00:53:42,000 --> 00:53:43,000
或者说他再做一点点

2036
00:53:43,000 --> 00:53:45,000
简单的适配调整

2037
00:53:45,000 --> 00:53:45,000
能够

2038
00:53:45,000 --> 00:53:45,000
对

2039
00:53:45,000 --> 00:53:48,000
比较低成本的去支持

2040
00:53:48,000 --> 00:53:49,000
Mac

2041
00:53:49,000 --> 00:53:50,000
它其实也还可以的

2042
00:53:50,000 --> 00:53:51,000
只要不让他

2043
00:53:51,000 --> 00:53:54,000
完全再为 Mac 单独定制一套

2044
00:53:54,000 --> 00:53:55,000
那就很麻烦了

2045
00:53:55,000 --> 00:53:56,000
对

2046
00:53:56,000 --> 00:53:56,000
是的

2047
00:53:56,000 --> 00:53:57,000
没错

2048
00:53:57,000 --> 00:53:57,000
对

2049
00:53:57,000 --> 00:53:59,000
因为这里就不得不吐槽一下

2050
00:53:59,000 --> 00:54:00,000
我们日常用的

2051
00:54:00,000 --> 00:54:01,000
这个 Twitter 的

2052
00:54:01,000 --> 00:54:02,000
这个官方客户端

2053
00:54:02,000 --> 00:54:03,000
在 Mac 上面

2054
00:54:03,000 --> 00:54:04,000
它本质上也是一个 iOS 版

2055
00:54:04,000 --> 00:54:05,000
它通过那个叫

2056
00:54:05,000 --> 00:54:07,000
什么 Catalyst 的方法

2057
00:54:07,000 --> 00:54:08,000
来运行

2058
00:54:08,000 --> 00:54:08,000
我觉得

2059
00:54:08,000 --> 00:54:09,000
就是 Catalyst

2060
00:54:09,000 --> 00:54:10,000
对

2061
00:54:10,000 --> 00:54:11,000
所以说可能 Catalyst

2062
00:54:11,000 --> 00:54:13,000
稍微简单解释一下

2063
00:54:13,000 --> 00:54:14,000
如果有朋友不太熟悉

2064
00:54:14,000 --> 00:54:16,000
Catalyst 是一套

2065
00:54:16,000 --> 00:54:20,000
在 X 86 的

2066
00:54:20,000 --> 00:54:22,000
芯片上的 Mac 上面

2067
00:54:22,000 --> 00:54:24,000
需要开发者做一些处理

2068
00:54:24,000 --> 00:54:27,000
才能够把一个 iOS 软件

2069
00:54:27,000 --> 00:54:29,000
变成 Mac 上可以运行的

2070
00:54:29,000 --> 00:54:30,000
这么一套方案

2071
00:54:30,000 --> 00:54:30,000
对吧

2072
00:54:30,000 --> 00:54:30,000
对

2073
00:54:30,000 --> 00:54:30,000
是的

2074
00:54:30,000 --> 00:54:32,000
和这个对比起来

2075
00:54:32,000 --> 00:54:35,000
那显然是在 M 1 芯片的

2076
00:54:35,000 --> 00:54:35,000
Rosetta

2077
00:54:35,000 --> 00:54:36,000
2 的差别

2078
00:54:36,000 --> 00:54:37,000
没有

2079
00:54:37,000 --> 00:54:41,000
Rosetta 它是在 M 1 上运行

2080
00:54:41,000 --> 00:54:42,000
X 86 的 Mac 程序

2081
00:54:42,000 --> 00:54:43,000
对吧

2082
00:54:43,000 --> 00:54:43,000
那这个是

2083
00:54:43,000 --> 00:54:45,000
那个 Catalyst 是在

2084
00:54:45,000 --> 00:54:47,000
X 86 的 Mac 上运行

2085
00:54:47,000 --> 00:54:47,000
iOS 的程序

2086
00:54:47,000 --> 00:54:48,000
对吧

2087
00:54:48,000 --> 00:54:49,000
然后现在就说

2088
00:54:49,000 --> 00:54:49,000
你可以

2089
00:54:49,000 --> 00:54:51,000
就那个时候还是要

2090
00:54:51,000 --> 00:54:52,000
这两个事情都是要

2091
00:54:52,000 --> 00:54:53,000
就 Rosetta 是不需要

2092
00:54:53,000 --> 00:54:54,000
开发者介入的

2093
00:54:54,000 --> 00:54:54,000
然后这个 Catalyst

2094
00:54:54,000 --> 00:54:55,000
是需要开发者

2095
00:54:55,000 --> 00:54:56,000
做一些操作的

2096
00:54:56,000 --> 00:54:57,000
然后还有一个

2097
00:54:57,000 --> 00:54:58,000
不需要开发者

2098
00:54:58,000 --> 00:55:00,000
做一个默认操作的

2099
00:55:00,000 --> 00:55:01,000
就是说

2100
00:55:01,000 --> 00:55:03,000
直接在 M 1 芯片的 Mac 上面

2101
00:55:03,000 --> 00:55:05,000
去运行 iOS 的程序

2102
00:55:05,000 --> 00:55:06,000
那我觉得像

2103
00:55:06,000 --> 00:55:07,000
比如说像 Twitter

2104
00:55:07,000 --> 00:55:07,000
这种客户端

2105
00:55:07,000 --> 00:55:09,000
这种做的这种调戏

2106
00:55:09,000 --> 00:55:10,000
那你还不如不要

2107
00:55:10,000 --> 00:55:11,000
那个 Catalyst

2108
00:55:11,000 --> 00:55:13,000
你直接在 M 1 上去运行

2109
00:55:13,000 --> 00:55:14,000
一个 iOS 版本的 Twitter

2110
00:55:14,000 --> 00:55:15,000
可能效果还好一点

2111
00:55:15,000 --> 00:55:16,000
Wait a second

2112
00:55:16,000 --> 00:55:17,000
Twitter 的客户端

2113
00:55:17,000 --> 00:55:18,000
你在用吗

2114
00:55:18,000 --> 00:55:19,000
我有在用啊

2115
00:55:19,000 --> 00:55:21,000
非常难用啊

2116
00:55:21,000 --> 00:55:22,000
我都已经完全忘记

2117
00:55:22,000 --> 00:55:23,000
这件事情了

2118
00:55:23,000 --> 00:55:24,000
对我就忘了用网页了

2119
00:55:24,000 --> 00:55:25,000
因为在 Mac 上面

2120
00:55:25,000 --> 00:55:26,000
刷推的时间

2121
00:55:26,000 --> 00:55:28,000
可能也没有那么多吧

2122
00:55:28,000 --> 00:55:29,000
就可能发推的时间

2123
00:55:29,000 --> 00:55:30,000
要比刷推的时间多

2124
00:55:30,000 --> 00:55:32,000
对发推会比较多一些

2125
00:55:32,000 --> 00:55:33,000
它毕竟还是有

2126
00:55:33,000 --> 00:55:34,000
那个系统级别的整合嘛

2127
00:55:34,000 --> 00:55:35,000
比如说

2128
00:55:35,000 --> 00:55:36,000
你在一个网页上

2129
00:55:36,000 --> 00:55:37,000
你要 share 到 Twitter 的话

2130
00:55:37,000 --> 00:55:38,000
你有两个方案嘛

2131
00:55:38,000 --> 00:55:39,000
一边就是说

2132
00:55:39,000 --> 00:55:40,000
你手工编辑

2133
00:55:40,000 --> 00:55:41,000
复制那个叫什么

2134
00:55:41,000 --> 00:55:43,000
URL 到 Twitter 里面去发

2135
00:55:43,000 --> 00:55:44,000
也可以

2136
00:55:44,000 --> 00:55:47,000
但是如果它有那个

2137
00:55:47,000 --> 00:55:48,000
虽然说是一个 Catalyst

2138
00:55:48,000 --> 00:55:49,000
改的一个 APP

2139
00:55:49,000 --> 00:55:50,000
但好歹它会提供

2140
00:55:50,000 --> 00:55:51,000
在 share 系统里面

2141
00:55:51,000 --> 00:55:53,000
分享那个菜单里面

2142
00:55:53,000 --> 00:55:54,000
提供说

2143
00:55:54,000 --> 00:55:54,000
分享到 Twitter

2144
00:55:54,000 --> 00:55:55,000
你可以做一些

2145
00:55:55,000 --> 00:55:56,000
相对的操作嘛

2146
00:55:56,000 --> 00:55:57,000
就我还是比较

2147
00:55:57,000 --> 00:55:59,000
白印这一套便利性的

2148
00:55:59,000 --> 00:56:01,000
我从来没有用过这个功能

2149
00:56:01,000 --> 00:56:02,000
就是 share 到 Twitter 这样

2150
00:56:02,000 --> 00:56:05,000
我还是

2151
00:56:05,000 --> 00:56:06,000
在继续用 Twitterbot

2152
00:56:06,000 --> 00:56:07,000
但 Twitterbot 的话

2153
00:56:07,000 --> 00:56:08,000
现在受那个 API

2154
00:56:08,000 --> 00:56:09,000
影响比较大了

2155
00:56:09,000 --> 00:56:10,000
就是它那边

2156
00:56:10,000 --> 00:56:12,000
Twitter 没有给很多数据回来

2157
00:56:12,000 --> 00:56:13,000
很多的那些

2158
00:56:13,000 --> 00:56:14,000
别人的回复啊

2159
00:56:14,000 --> 00:56:14,000
什么的

2160
00:56:14,000 --> 00:56:15,000
你拿 Twitterbot

2161
00:56:15,000 --> 00:56:16,000
从第三方客户端

2162
00:56:16,000 --> 00:56:17,000
根本看不见

2163
00:56:17,000 --> 00:56:18,000
所以说 Twitterbot

2164
00:56:18,000 --> 00:56:19,000
也就刷刷 timeline

2165
00:56:19,000 --> 00:56:20,000
就因为最近

2166
00:56:20,000 --> 00:56:21,000
这两年

2167
00:56:21,000 --> 00:56:22,000
Twitter 的那个

2168
00:56:22,000 --> 00:56:24,000
就是产品本身的改动

2169
00:56:24,000 --> 00:56:25,000
还是比较大的

2170
00:56:25,000 --> 00:56:26,000
你看它最近又出了一个

2171
00:56:26,000 --> 00:56:26,000
新的那个叫

2172
00:56:26,000 --> 00:56:27,000
Fleets 啊

2173
00:56:27,000 --> 00:56:28,000
什么功能

2174
00:56:28,000 --> 00:56:30,000
越发操蛋了嘛

2175
00:56:30,000 --> 00:56:32,000
说白一点

2176
00:56:32,000 --> 00:56:33,000
就是越发操蛋了

2177
00:56:33,000 --> 00:56:35,000
就是它还

2178
00:56:35,000 --> 00:56:35,000
这些新功能

2179
00:56:35,000 --> 00:56:37,000
都还没有在 API 的层面上

2180
00:56:37,000 --> 00:56:40,000
体现给第三方开发者去接入嘛

2181
00:56:40,000 --> 00:56:42,000
所以你要去跟原生客户端

2182
00:56:42,000 --> 00:56:44,000
去竞争这个 feature rich

2183
00:56:44,000 --> 00:56:45,000
那肯定是比不上的嘛

2184
00:56:45,000 --> 00:56:47,000
就是这里你作为用户

2185
00:56:47,000 --> 00:56:48,000
你就必须得想说

2186
00:56:48,000 --> 00:56:49,000
那你怎么办

2187
00:56:49,000 --> 00:56:51,000
那我就属于

2188
00:56:51,000 --> 00:56:51,000
那尽量用原生

2189
00:56:51,000 --> 00:56:52,000
还是原生吧

2190
00:56:52,000 --> 00:56:54,000
反正捏着鼻子用呗

2191
00:56:54,000 --> 00:56:55,000
对

2192
00:56:55,000 --> 00:56:58,000
那差不多就是

2193
00:56:58,000 --> 00:56:59,000
M 1 的这个 Mac 的问题

2194
00:56:59,000 --> 00:57:00,000
就聊到这里

2195
00:57:00,000 --> 00:57:01,000
因为也是

2196
00:57:01,000 --> 00:57:02,000
你是刚拿到差不多

2197
00:57:02,000 --> 00:57:03,000
还没有一个星期

2198
00:57:03,000 --> 00:57:04,000
有一个星期了吗

2199
00:57:04,000 --> 00:57:04,000
没有

2200
00:57:05,000 --> 00:57:05,000
没有一个星期吧

2201
00:57:05,000 --> 00:57:06,000
应该就三天

2202
00:57:06,000 --> 00:57:07,000
四天左右的样子

2203
00:57:07,000 --> 00:57:08,000
对

2204
00:57:08,000 --> 00:57:09,000
就可能接下来

2205
00:57:09,000 --> 00:57:12,000
我们目前看性能是没有问题的

2206
00:57:12,000 --> 00:57:13,000
然后不管是原生性能

2207
00:57:13,000 --> 00:57:14,000
就是报表

2208
00:57:14,000 --> 00:57:15,000
然后模拟性能还是超越原来

2209
00:57:15,000 --> 00:57:18,000
兼容性目前来看都还好

2210
00:57:18,000 --> 00:57:20,000
但是可能还是有些小小的这种

2211
00:57:20,000 --> 00:57:21,000
不尽人力的地方

2212
00:57:21,000 --> 00:57:23,000
但是我相信过个半年一年

2213
00:57:23,000 --> 00:57:25,000
等到它明年出第二代的

2214
00:57:25,000 --> 00:57:28,000
这个 Mac 的处理

2215
00:57:28,000 --> 00:57:30,000
就是这种可能 M 2

2216
00:57:30,000 --> 00:57:30,000
比如举个例子

2217
00:57:30,000 --> 00:57:32,000
的时候大家再去买

2218
00:57:32,000 --> 00:57:34,000
可能到时候一个是有新的

2219
00:57:34,000 --> 00:57:35,000
这种外形的

2220
00:57:35,000 --> 00:57:36,000
机器了

2221
00:57:36,000 --> 00:57:36,000
另外就是说

2222
00:57:36,000 --> 00:57:37,000
这些兼容性的问题

2223
00:57:37,000 --> 00:57:39,000
基本上也都解决了

2224
00:57:39,000 --> 00:57:41,000
该转原生的都转原生了

2225
00:57:41,000 --> 00:57:42,000
然后该模拟的

2226
00:57:42,000 --> 00:57:43,000
如果还有问题的

2227
00:57:43,000 --> 00:57:44,000
可能也都修掉了

2228
00:57:44,000 --> 00:57:44,000
对吧

2229
00:57:44,000 --> 00:57:45,000
然后那个时候

2230
00:57:45,000 --> 00:57:47,000
大家再去换一个问题

2231
00:57:47,000 --> 00:57:48,000
就不是很大了

2232
00:57:48,000 --> 00:57:49,000
我这里还想问一下两位

2233
00:57:49,000 --> 00:57:51,000
你们用你们现在的

2234
00:57:51,000 --> 00:57:52,000
Intel 的 MacBook

2235
00:57:52,000 --> 00:57:55,000
有觉得在就是电池状态下

2236
00:57:55,000 --> 00:57:56,000
开盖之后

2237
00:57:56,000 --> 00:57:57,000
到解锁这个过程

2238
00:57:57,000 --> 00:57:58,000
非常的痛苦吗

2239
00:57:58,000 --> 00:58:01,000
首先我现在没有用 Mac

2240
00:58:01,000 --> 00:58:02,000
我现在是用台脑 mini

2241
00:58:02,000 --> 00:58:03,000
是 X 86

2242
00:58:03,000 --> 00:58:04,000
所以我只能告诉你说

2243
00:58:04,000 --> 00:58:06,000
唤醒那个过程

2244
00:58:06,000 --> 00:58:07,000
肯定不是非常的快

2245
00:58:07,000 --> 00:58:08,000
它还是要等一下下

2246
00:58:08,000 --> 00:58:11,000
我好像基本上不怎么关盖

2247
00:58:11,000 --> 00:58:13,000
好的

2248
00:58:13,000 --> 00:58:16,000
我唤醒的过程就是按一下

2249
00:58:16,000 --> 00:58:18,000
随便按一下键盘什么键

2250
00:58:18,000 --> 00:58:19,000
或者敲一下鼠标这样

2251
00:58:19,000 --> 00:58:20,000
好了明白了

2252
00:58:20,000 --> 00:58:23,000
就是我最近几年的感受上来说

2253
00:58:23,000 --> 00:58:25,000
我这款 MacBook

2254
00:58:25,000 --> 00:58:27,000
可能我每次打开它的盖子

2255
00:58:27,000 --> 00:58:29,000
盖的时候都感觉非常的痛苦

2256
00:58:29,000 --> 00:58:33,000
黑屏可能就会黑个一到两秒

2257
00:58:33,000 --> 00:58:34,000
甚至有的时候不知道为什么

2258
00:58:34,000 --> 00:58:34,000
卡个五六秒

2259
00:58:34,000 --> 00:58:36,000
也是经常常见的事情

2260
00:58:36,000 --> 00:58:37,000
然后亮了之后

2261
00:58:37,000 --> 00:58:38,000
整个 UI 也是卡住的

2262
00:58:38,000 --> 00:58:40,000
然后输密码也是没有反应

2263
00:58:40,000 --> 00:58:41,000
然后进了桌面之后

2264
00:58:41,000 --> 00:58:43,000
可能也还得再卡一段时间

2265
00:58:43,000 --> 00:58:44,000
才能恢复正常

2266
00:58:44,000 --> 00:58:46,000
后面我在推特上

2267
00:58:46,000 --> 00:58:47,000
也大概问了一下

2268
00:58:47,000 --> 00:58:49,000
好像有很大部分用户

2269
00:58:49,000 --> 00:58:50,000
也是有同样的问题

2270
00:58:50,000 --> 00:58:52,000
但是好像有另外一部分用户

2271
00:58:52,000 --> 00:58:53,000
好像又没有遇到这样的问题

2272
00:58:53,000 --> 00:58:54,000
我还挺奇怪

2273
00:58:54,000 --> 00:58:56,000
这个问题到底是怎么造成的

2274
00:58:56,000 --> 00:58:58,000
我好像没有遇到

2275
00:58:58,000 --> 00:59:00,000
就是在我绝无仅有的几次

2276
00:59:00,000 --> 00:59:02,000
把它带着到处走的过程中

2277
00:59:02,000 --> 00:59:03,000
就是可能一天

2278
00:59:03,000 --> 00:59:04,000
比如说要开个会

2279
00:59:04,000 --> 00:59:04,000
然后

2280
00:59:04,000 --> 00:59:06,000
频繁关和十来次

2281
00:59:06,000 --> 00:59:09,000
好像没有发生过这样的事情

2282
00:59:09,000 --> 00:59:11,000
但是你刚才说

2283
00:59:11,000 --> 00:59:12,000
你要输密码

2284
00:59:12,000 --> 00:59:15,000
我知道是有些人用手表解锁的话

2285
00:59:15,000 --> 00:59:17,000
就是他免密码解锁的时候

2286
00:59:17,000 --> 00:59:18,000
会遇到这样的情况

2287
00:59:18,000 --> 00:59:21,000
但是我好像没有遇到过

2288
00:59:21,000 --> 00:59:24,000
因为这里面有一个机制的问题

2289
00:59:24,000 --> 00:59:24,000
是这样

2290
00:59:24,000 --> 00:59:26,000
就是说首先你取决于

2291
00:59:26,000 --> 00:59:29,000
它是我们讲系统休眠和系统睡眠

2292
00:59:29,000 --> 00:59:30,000
它不是一个概念

2293
00:59:30,000 --> 00:59:32,000
我们好像之前某些节目里面提到过

2294
00:59:32,000 --> 00:59:34,000
所谓 sleep

2295
00:59:34,000 --> 00:59:34,000
就是说

2296
00:59:34,000 --> 00:59:37,000
就是它的内存是不断电的

2297
00:59:37,000 --> 00:59:39,000
就是你整个内存还是在

2298
00:59:39,000 --> 00:59:39,000
不

2299
00:59:39,000 --> 00:59:42,000
就整个系统的镜像还是在内存里面

2300
00:59:42,000 --> 00:59:43,000
你只要打开它

2301
00:59:43,000 --> 00:59:45,000
可能比较快的去跟得上

2302
00:59:45,000 --> 00:59:46,000
但如果你是休眠

2303
00:59:46,000 --> 00:59:47,000
它就存在

2304
00:59:47,000 --> 00:59:49,000
这边有一个所谓的深度休眠

2305
00:59:49,000 --> 00:59:51,000
和浅度休眠问题

2306
00:59:51,000 --> 00:59:52,000
就是你真的

2307
00:59:52,000 --> 00:59:53,000
休眠的时候

2308
00:59:53,000 --> 00:59:57,000
它的内存的镜像是写到磁盘的

2309
00:59:57,000 --> 00:59:58,000
这个时候

2310
00:59:58,000 --> 01:00:01,000
就是说哪怕你整个系统没电

2311
01:00:01,000 --> 01:00:03,000
或者是你电池没有用光了

2312
01:00:03,000 --> 01:00:03,000
它

2313
01:00:03,000 --> 01:00:04,000
在换电的时候

2314
01:00:04,000 --> 01:00:05,000
唤醒的时候

2315
01:00:05,000 --> 01:00:07,000
还是能够把之前的状态给唤醒回来

2316
01:00:07,000 --> 01:00:10,000
但是取决于你电脑有没有插电

2317
01:00:10,000 --> 01:00:13,000
以及你电池的剩余状态

2318
01:00:13,000 --> 01:00:15,000
它内存是有可能会掉电的

2319
01:00:15,000 --> 01:00:15,000
这个时候

2320
01:00:15,000 --> 01:00:18,000
如果你在再打开唤醒的话

2321
01:00:18,000 --> 01:00:25,000
它等于要先从 SSD 上把内存里面的原来的镜像读回来

2322
01:00:25,000 --> 01:00:27,000
你看我们现在内存都是 16 个 G

2323
01:00:27,000 --> 01:00:27,000
对吧

2324
01:00:27,000 --> 01:00:29,000
可能至少 8 个 G 以上

2325
01:00:29,000 --> 01:00:31,000
开发者 16 个 G 可能是标配

2326
01:00:31,000 --> 01:00:32,000
如果你是叫什么来的

2327
01:00:32,000 --> 01:00:34,000
台式机

2328
01:00:34,000 --> 01:00:34,000
可能是标配的

2329
01:00:34,000 --> 01:00:35,000
可能是

2330
01:00:35,000 --> 01:00:36,000
但台式机不会拔电

2331
01:00:36,000 --> 01:00:38,000
应该问题没有这个不存在这个问题

2332
01:00:38,000 --> 01:00:39,000
就是说如果是笔记本的话

2333
01:00:39,000 --> 01:00:44,000
就是说假设我们以 16 个 G 的内存镜像都读回来的话

2334
01:00:44,000 --> 01:00:50,000
其实你算一下它的存储到那时候带宽本来就要读 16 个 G 就要那么长时间

2335
01:00:50,000 --> 01:00:52,000
然后再上电

2336
01:00:52,000 --> 01:00:53,000
再自检

2337
01:00:53,000 --> 01:00:55,000
再引导起来系统

2338
01:00:55,000 --> 01:00:57,000
就不是说重新开始 boot

2339
01:00:57,000 --> 01:00:58,000
就是说恢复之前的状态

2340
01:00:58,000 --> 01:01:00,000
它肯定是需要一个时间的

2341
01:01:00,000 --> 01:01:02,000
但是其实我们讨论的这个好好

2342
01:01:02,000 --> 01:01:04,000
我之前写了一篇文章解释就是

2343
01:01:04,000 --> 01:01:05,000
和这个其实真的没有关系

2344
01:01:05,000 --> 01:01:06,000
因为的话

2345
01:01:06,000 --> 01:01:08,000
现在在最新的 MacBook 里面

2346
01:01:08,000 --> 01:01:09,000
它的机制是

2347
01:01:09,000 --> 01:01:11,000
一旦核盖休眠了之后

2348
01:01:11,000 --> 01:01:17,000
它就先把内存 dump 一份到固态存储上

2349
01:01:17,000 --> 01:01:19,000
保证断电之后的问题

2350
01:01:19,000 --> 01:01:21,000
然后除非电池彻底耗尽

2351
01:01:21,000 --> 01:01:22,000
一点电都没有了

2352
01:01:22,000 --> 01:01:26,000
你都是从标准的从 RAM 上直接唤醒的这种模式

2353
01:01:26,000 --> 01:01:27,000
而不会去走休眠这种模式

2354
01:01:27,000 --> 01:01:28,000
就只要是电池有电

2355
01:01:28,000 --> 01:01:30,000
它的内存是不会掉电的

2356
01:01:30,000 --> 01:01:31,000
对 是的

2357
01:01:31,000 --> 01:01:32,000
要不是的话

2358
01:01:32,000 --> 01:01:34,000
因为现在 16 G 那么大读回来

2359
01:01:34,000 --> 01:01:36,000
很明显你能看到一个进度调整

2360
01:01:36,000 --> 01:01:37,000
走进度调整

2361
01:01:37,000 --> 01:01:39,000
那个速度是太慢了

2362
01:01:39,000 --> 01:01:39,000
对

2363
01:01:39,000 --> 01:01:43,000
你说只是说哪怕是内存没有掉电情况下

2364
01:01:43,000 --> 01:01:44,000
它的唤醒也是非常慢的

2365
01:01:44,000 --> 01:01:44,000
对吧

2366
01:01:44,000 --> 01:01:46,000
对 是的

2367
01:01:46,000 --> 01:01:48,000
我自己做了一个猜想

2368
01:01:48,000 --> 01:01:50,000
就是不确定这个猜想是对的

2369
01:01:50,000 --> 01:01:51,000
就是在如果

2370
01:01:51,000 --> 01:01:53,000
我就有一个习惯

2371
01:01:53,000 --> 01:01:55,000
就是因为我的 MacBook 不是主力的工作机

2372
01:01:55,000 --> 01:01:57,000
所以说我可能把它放在那盖个一两天

2373
01:01:57,000 --> 01:01:58,000
我都可能不会用一次

2374
01:01:58,000 --> 01:01:59,000
然后这时候才打开

2375
01:01:59,000 --> 01:02:02,000
然后如果是在英特尔的设备上的话

2376
01:02:02,000 --> 01:02:04,000
你在休眠的状态下的话

2377
01:02:04,000 --> 01:02:06,000
整个 CPU 是彻底不活跃的

2378
01:02:06,000 --> 01:02:08,000
所以说你在打开那一瞬间

2379
01:02:08,000 --> 01:02:09,000
有很多的 App

2380
01:02:09,000 --> 01:02:10,000
它的代码的话

2381
01:02:10,000 --> 01:02:11,000
它有很多的 Timer

2382
01:02:11,000 --> 01:02:13,000
技术器要触发一些各种各样的事情

2383
01:02:13,000 --> 01:02:16,000
这个时候你盖盒的越久

2384
01:02:16,000 --> 01:02:18,000
不用的时间越长

2385
01:02:18,000 --> 01:02:19,000
各种的 Timer 就堆的越多

2386
01:02:19,000 --> 01:02:20,000
所以说这一瞬间

2387
01:02:20,000 --> 01:02:22,000
堆积的任务在处理

2388
01:02:22,000 --> 01:02:22,000
对

2389
01:02:22,000 --> 01:02:23,000
全部都出来了

2390
01:02:23,000 --> 01:02:24,000
然后就要去处理

2391
01:02:24,000 --> 01:02:27,000
然后就会导致这一个时间是非常卡的

2392
01:02:27,000 --> 01:02:30,000
然后现在我测试了一下新的 M 1 的 MacBook 的话

2393
01:02:30,000 --> 01:02:32,000
它整个 CPU 的盒在后台上

2394
01:02:32,000 --> 01:02:36,000
是一直会间断的去唤醒整个系统

2395
01:02:36,000 --> 01:02:37,000
然后去工作的

2396
01:02:37,000 --> 01:02:38,000
就和你的 iPhone 一样

2397
01:02:38,000 --> 01:02:41,000
就是它不是完全的一个彻底休眠的状态

2398
01:02:42,000 --> 01:02:44,000
就是它所有的后台任务都是在一直运行的

2399
01:02:44,000 --> 01:02:45,000
对

2400
01:02:45,000 --> 01:02:47,000
所以你就不会在那一时刻

2401
01:02:47,000 --> 01:02:49,000
会有这么大量的一个任务量堆过来

2402
01:02:49,000 --> 01:02:51,000
然后非要在那一刻全部解决掉

2403
01:02:51,000 --> 01:02:53,000
你说这个我想起一个事

2404
01:02:53,000 --> 01:02:57,000
就是你在 M 1 的 MacBook Pro 上面

2405
01:02:57,000 --> 01:03:00,000
你去它的叫 System Preferences

2406
01:03:00,000 --> 01:03:01,000
就是系统设置里面

2407
01:03:01,000 --> 01:03:02,000
找到那个能力

2408
01:03:02,000 --> 01:03:04,000
就是 Energy Saver

2409
01:03:04,000 --> 01:03:05,000
就是节能那个选项之后

2410
01:03:05,000 --> 01:03:07,000
它还会有那个选项叫做 PowerNap

2411
01:03:07,000 --> 01:03:08,000
那个选项给你吗

2412
01:03:08,000 --> 01:03:09,000
没有了

2413
01:03:09,000 --> 01:03:10,000
我看过

2414
01:03:10,000 --> 01:03:11,000
它那个选项已经取消了

2415
01:03:11,000 --> 01:03:12,000
可能就这个问题导致的

2416
01:03:12,000 --> 01:03:14,000
PowerNap 是我现在是十点几

2417
01:03:14,000 --> 01:03:16,000
引进的一个新特性

2418
01:03:16,000 --> 01:03:20,000
就是说它可以让你那个 Mac 在待机

2419
01:03:20,000 --> 01:03:21,000
或者休眠状态下

2420
01:03:21,000 --> 01:03:24,000
它还是隔三差五的唤醒一下

2421
01:03:24,000 --> 01:03:25,000
然后来处理一下

2422
01:03:25,000 --> 01:03:27,000
比如说是做这个 Time Machine 的备份

2423
01:03:27,000 --> 01:03:29,000
它说是检查邮件

2424
01:03:29,000 --> 01:03:31,000
或者是 iCloud 的去推送处理

2425
01:03:31,000 --> 01:03:31,000
对吧

2426
01:03:31,000 --> 01:03:32,000
但是这个是仅限于

2427
01:03:32,000 --> 01:03:33,000
我的理解好

2428
01:03:33,000 --> 01:03:35,000
仅限于苹果的第一方的这些应用

2429
01:03:35,000 --> 01:03:36,000
它当时要求一个东西

2430
01:03:36,000 --> 01:03:38,000
就是那些应用必须得支持

2431
01:03:38,000 --> 01:03:39,000
叫做 Timer

2432
01:03:39,000 --> 01:03:41,000
就是合并吧

2433
01:03:41,000 --> 01:03:43,000
因为我们知道它的那些 Timer

2434
01:03:43,000 --> 01:03:45,000
是就是各自的 App

2435
01:03:45,000 --> 01:03:47,000
各自的 Timer 的节奏

2436
01:03:47,000 --> 01:03:48,000
它可能不一定在一起

2437
01:03:48,000 --> 01:03:50,000
它当时为了支持 PowerNap

2438
01:03:50,000 --> 01:03:51,000
那些应用

2439
01:03:51,000 --> 01:03:54,000
如果你想要在 PowerNap 期间

2440
01:03:54,000 --> 01:03:55,000
就是用户核改期间

2441
01:03:55,000 --> 01:03:56,000
还能做一些后台更新的话

2442
01:03:56,000 --> 01:03:58,000
你必须满足一些前提条件

2443
01:03:58,000 --> 01:03:59,000
其中还有一个

2444
01:03:59,000 --> 01:04:01,000
就是说你必须能够支持

2445
01:04:01,000 --> 01:04:02,000
把你的 Timer 能够合并

2446
01:04:02,000 --> 01:04:02,000
比如说

2447
01:04:02,000 --> 01:04:03,000
你本来是定时定的是

2448
01:04:03,000 --> 01:04:05,000
比如说三分五十秒后

2449
01:04:05,000 --> 01:04:07,000
唤醒一个事件

2450
01:04:07,000 --> 01:04:08,000
你要去运行

2451
01:04:08,000 --> 01:04:09,000
但是因为

2452
01:04:09,000 --> 01:04:11,000
如果你要在 PowerNap

2453
01:04:11,000 --> 01:04:11,000
就是说

2454
01:04:11,000 --> 01:04:14,000
你必须牺牲掉准确性

2455
01:04:14,000 --> 01:04:15,000
它系统有可能说

2456
01:04:15,000 --> 01:04:17,000
我在三分二十秒的时候

2457
01:04:17,000 --> 01:04:17,000
就把你唤醒

2458
01:04:17,000 --> 01:04:20,000
或者是在四分十秒的时候

2459
01:04:20,000 --> 01:04:20,000
才把你唤醒

2460
01:04:20,000 --> 01:04:22,000
因为我要考虑

2461
01:04:22,000 --> 01:04:24,000
把尽可能多的 Timer 时间

2462
01:04:24,000 --> 01:04:26,000
合并到一个 Nap 的周期

2463
01:04:26,000 --> 01:04:27,000
我就只用唤醒一次

2464
01:04:27,000 --> 01:04:28,000
因为每次唤醒

2465
01:04:28,000 --> 01:04:29,000
都要比较大的能耗

2466
01:04:29,000 --> 01:04:32,000
所以在

2467
01:04:32,000 --> 01:04:34,000
M 1 的新面上

2468
01:04:34,000 --> 01:04:35,000
不存在这个问题

2469
01:04:35,000 --> 01:04:37,000
因为它没有 PowerNap 这个功能

2470
01:04:37,000 --> 01:04:38,000
因为它的后台

2471
01:04:38,000 --> 01:04:39,000
它不是有什么四个小的

2472
01:04:39,000 --> 01:04:42,000
小核心

2473
01:04:42,000 --> 01:04:43,000
就是 Efficiency Core

2474
01:04:43,000 --> 01:04:44,000
高效率的核

2475
01:04:44,000 --> 01:04:46,000
所以它会一直在后台运行

2476
01:04:46,000 --> 01:04:47,000
所以不需要

2477
01:04:47,000 --> 01:04:49,000
就跟你的手机

2478
01:04:49,000 --> 01:04:51,000
跟你的 iPhone 跟 iPad 一样

2479
01:04:51,000 --> 01:04:52,000
它其实是一直在

2480
01:04:52,000 --> 01:04:54,000
后面有待机状态在运行的

2481
01:04:54,000 --> 01:04:55,000
那就不存在说

2482
01:04:55,000 --> 01:04:56,000
我需要合并 Timer 这个问题

2483
01:04:56,000 --> 01:04:57,000
你只要

2484
01:04:57,000 --> 01:04:59,000
你不过分的去使用

2485
01:04:59,000 --> 01:05:01,000
它还是会让你去

2486
01:05:01,000 --> 01:05:02,000
完成这些 Timer 的问题

2487
01:05:02,000 --> 01:05:03,000
这个功能的

2488
01:05:03,000 --> 01:05:04,000
也就不会导致你说

2489
01:05:04,000 --> 01:05:04,000
开盖以后

2490
01:05:04,000 --> 01:05:07,000
导致可能上一个 Nap 周期

2491
01:05:07,000 --> 01:05:08,000
累积的那些 Timer 时间

2492
01:05:08,000 --> 01:05:09,000
一下都冒出来

2493
01:05:09,000 --> 01:05:10,000
我又马上要处理了

2494
01:05:10,000 --> 01:05:11,000
对吧

2495
01:05:11,000 --> 01:05:11,000
对

2496
01:05:11,000 --> 01:05:13,000
而且 PowerNap 选项的话

2497
01:05:13,000 --> 01:05:15,000
我记得默认设置情况下

2498
01:05:15,000 --> 01:05:17,000
在电池的情况下

2499
01:05:17,000 --> 01:05:18,000
是关掉的

2500
01:05:18,000 --> 01:05:20,000
就是你得自己去电源设置里面

2501
01:05:20,000 --> 01:05:21,000
去允许它在电池的情况下

2502
01:05:21,000 --> 01:05:22,000
执行 PowerNap

2503
01:05:22,000 --> 01:05:23,000
对

2504
01:05:23,000 --> 01:05:25,000
如果你是一个电池

2505
01:05:25,000 --> 01:05:26,000
比如说你是一个笔记本

2506
01:05:26,000 --> 01:05:27,000
你是带电池的

2507
01:05:27,000 --> 01:05:29,000
它在简单选项里面

2508
01:05:29,000 --> 01:05:30,000
会有两个 Type

2509
01:05:30,000 --> 01:05:31,000
一个是电池模式

2510
01:05:31,000 --> 01:05:31,000
一个是

2511
01:05:31,000 --> 01:05:32,000
就是

2512
01:05:32,000 --> 01:05:32,000
就是

2513
01:05:32,000 --> 01:05:34,000
插电源线的模式

2514
01:05:34,000 --> 01:05:35,000
插电线的模式里面

2515
01:05:35,000 --> 01:05:36,000
PowerNap 默认是开的

2516
01:05:36,000 --> 01:05:38,000
然后插电池模式

2517
01:05:38,000 --> 01:05:39,000
它默认是关的

2518
01:05:39,000 --> 01:05:40,000
你得手机手中打开

2519
01:05:40,000 --> 01:05:40,000
才能完成

2520
01:05:40,000 --> 01:05:41,000
因为它还是要费电

2521
01:05:41,000 --> 01:05:42,000
对吧

2522
01:05:42,000 --> 01:05:44,000
但是它现在如果是 M 1 的话

2523
01:05:44,000 --> 01:05:45,000
就完全不给这个选项了

2524
01:05:45,000 --> 01:05:47,000
我就有那么自信

2525
01:05:47,000 --> 01:05:48,000
即便是这样

2526
01:05:48,000 --> 01:05:48,000
还是不会费电

2527
01:05:48,000 --> 01:05:49,000
对不对

2528
01:05:49,000 --> 01:05:50,000
没错

2529
01:05:50,000 --> 01:05:51,000
对

2530
01:05:51,000 --> 01:05:52,000
所以现在如果有

2531
01:05:52,000 --> 01:05:53,000
Intel 的 MacBook 的用户

2532
01:05:53,000 --> 01:05:54,000
可以尝试一下

2533
01:05:54,000 --> 01:05:55,000
把那个选项勾上之后

2534
01:05:55,000 --> 01:05:56,000
能不能缓解

2535
01:05:56,000 --> 01:05:58,000
就是缓解了之后

2536
01:05:58,000 --> 01:05:59,000
会卡顿的问题

2537
01:05:59,000 --> 01:06:00,000
就至少它通过

2538
01:06:00,000 --> 01:06:02,000
牺牲一些电量的

2539
01:06:02,000 --> 01:06:02,000
方式

2540
01:06:02,000 --> 01:06:04,000
来减缓

2541
01:06:04,000 --> 01:06:04,000
最后

2542
01:06:04,000 --> 01:06:07,000
同意打开唤醒

2543
01:06:07,000 --> 01:06:07,000
然后全部

2544
01:06:07,000 --> 01:06:09,000
timers 时间都跑出来

2545
01:06:09,000 --> 01:06:10,000
要挨个处理的问题

2546
01:06:10,000 --> 01:06:11,000
对吧

2547
01:06:11,000 --> 01:06:11,000
对

2548
01:06:11,000 --> 01:06:13,000
但有另外一个问题

2549
01:06:13,000 --> 01:06:14,000
就是我曾经遇到过

2550
01:06:14,000 --> 01:06:15,000
原来的 MacBook

2551
01:06:15,000 --> 01:06:17,000
就是我明明是休眠

2552
01:06:17,000 --> 01:06:18,000
就盖上盖

2553
01:06:18,000 --> 01:06:19,000
然后就带着出去旅行

2554
01:06:19,000 --> 01:06:20,000
或者怎么样了

2555
01:06:20,000 --> 01:06:21,000
然后当目的地打开

2556
01:06:21,000 --> 01:06:23,000
整个电池就 0%

2557
01:06:23,000 --> 01:06:24,000
完全耗尽的这种情况的

2558
01:06:24,000 --> 01:06:25,000
对

2559
01:06:25,000 --> 01:06:25,000
没电了

2560
01:06:25,000 --> 01:06:26,000
我有遇到过这种情况

2561
01:06:26,000 --> 01:06:27,000
对

2562
01:06:27,000 --> 01:06:28,000
这个好像

2563
01:06:28,000 --> 01:06:30,000
他们说过一个原因

2564
01:06:30,000 --> 01:06:30,000
就是我不知道

2565
01:06:30,000 --> 01:06:31,000
是不是这个情况

2566
01:06:31,000 --> 01:06:32,000
就是因为你

2567
01:06:32,000 --> 01:06:33,000
在背包里面的

2568
01:06:33,000 --> 01:06:34,000
那个

2569
01:06:34,000 --> 01:06:36,000
盒盖的话

2570
01:06:36,000 --> 01:06:37,000
它是竖直的

2571
01:06:37,000 --> 01:06:39,000
如果说你没有夹紧的话

2572
01:06:39,000 --> 01:06:40,000
比如说你书包比较空

2573
01:06:40,000 --> 01:06:42,000
然后你抖一抖

2574
01:06:42,000 --> 01:06:43,000
它是有可能在那个过程中

2575
01:06:43,000 --> 01:06:44,000
就把盖打开了

2576
01:06:44,000 --> 01:06:45,000
就不断打开

2577
01:06:45,000 --> 01:06:46,000
不断关上

2578
01:06:46,000 --> 01:06:47,000
盖子变成打开状态

2579
01:06:47,000 --> 01:06:48,000
对

2580
01:06:48,000 --> 01:06:49,000
它就变成又在运行

2581
01:06:49,000 --> 01:06:50,000
我真理不太可能

2582
01:06:50,000 --> 01:06:51,000
因为我背的是一个

2583
01:06:51,000 --> 01:06:52,000
就是那种

2584
01:06:52,000 --> 01:06:54,000
带专门夹层的包

2585
01:06:54,000 --> 01:06:56,000
它会把整个 MacBook

2586
01:06:56,000 --> 01:06:58,000
非常紧的包过去

2587
01:06:58,000 --> 01:06:59,000
但我还是遇到过这种问题

2588
01:06:59,000 --> 01:07:00,000
就是

2589
01:07:00,000 --> 01:07:01,000
下班的时候

2590
01:07:01,000 --> 01:07:02,000
把这些东西

2591
01:07:02,000 --> 01:07:03,000
放进去

2592
01:07:03,000 --> 01:07:03,000
然后去健身

2593
01:07:03,000 --> 01:07:04,000
然后回到家里面

2594
01:07:04,000 --> 01:07:05,000
再打开

2595
01:07:05,000 --> 01:07:07,000
电脑已经没电了

2596
01:07:07,000 --> 01:07:07,000
这样

2597
01:07:07,000 --> 01:07:09,000
可能是后台有什么程序

2598
01:07:09,000 --> 01:07:09,000
阻止了

2599
01:07:09,000 --> 01:07:11,000
强行阻止了休眠

2600
01:07:11,000 --> 01:07:12,000
这样的一个事情

2601
01:07:12,000 --> 01:07:13,000
然后它实际是运行的

2602
01:07:13,000 --> 01:07:14,000
有可能

2603
01:07:14,000 --> 01:07:14,000
对

2604
01:07:14,000 --> 01:07:15,000
或者是出现了一个 bug

2605
01:07:15,000 --> 01:07:17,000
根本就没有进到休眠状态

2606
01:07:17,000 --> 01:07:18,000
然后一直都是在

2607
01:07:18,000 --> 01:07:19,000
那个尝试进入休眠

2608
01:07:19,000 --> 01:07:20,000
然后不断的去

2609
01:07:20,000 --> 01:07:22,000
这个耗能的一个状态

2610
01:07:22,000 --> 01:07:23,000
也有可能

2611
01:07:23,000 --> 01:07:23,000
对吧

2612
01:07:23,000 --> 01:07:24,000
但是呢

2613
01:07:24,000 --> 01:07:26,000
我们目前都知道

2614
01:07:26,000 --> 01:07:28,000
这个锅可以甩给英特尔了

2615
01:07:28,000 --> 01:07:29,000
是的

2616
01:07:29,000 --> 01:07:30,000
这个也意思说了

2617
01:07:30,000 --> 01:07:31,000
因为 ME 没有这个问题

2618
01:07:31,000 --> 01:07:32,000
对吧

2619
01:07:32,000 --> 01:07:32,000
对

2620
01:07:32,000 --> 01:07:33,000
没这个问题了

2621
01:07:33,000 --> 01:07:34,000
我什么时候都来跑

2622
01:07:34,000 --> 01:07:36,000
我只是变得跑的慢了一点而已

2623
01:07:36,000 --> 01:07:37,000
对

2624
01:07:37,000 --> 01:07:38,000
不过你刚才说到

2625
01:07:38,000 --> 01:07:39,000
这个 timer 的这个问题

2626
01:07:39,000 --> 01:07:40,000
如果我在想

2627
01:07:40,000 --> 01:07:41,000
假设苹果

2628
01:07:41,000 --> 01:07:42,000
假设如果确实问题

2629
01:07:42,000 --> 01:07:43,000
是如你所说

2630
01:07:43,000 --> 01:07:44,000
那么一个

2631
01:07:44,000 --> 01:07:46,000
导致的它开机的时候

2632
01:07:46,000 --> 01:07:47,000
会比较

2633
01:07:47,000 --> 01:07:48,000
就英特尔的那个

2634
01:07:48,000 --> 01:07:49,000
MacBook 开机会比较

2635
01:07:49,000 --> 01:07:51,000
就是揭开盖会比较慢的话

2636
01:07:51,000 --> 01:07:52,000
它其实可以

2637
01:07:52,000 --> 01:07:53,000
等一下再启动

2638
01:07:53,000 --> 01:07:55,000
那些 timers 事件的处理

2639
01:07:55,000 --> 01:07:56,000
也还是可以解决这个问题吧

2640
01:07:56,000 --> 01:07:58,000
好像从架构上来说

2641
01:07:58,000 --> 01:07:59,000
会比较难

2642
01:07:59,000 --> 01:08:00,000
因为呢

2643
01:08:00,000 --> 01:08:00,000
已经是

2644
01:08:00,000 --> 01:08:01,000
那个程序

2645
01:08:01,000 --> 01:08:03,000
自己的一个代码的

2646
01:08:03,000 --> 01:08:03,000
一部分的逻辑了

2647
01:08:03,000 --> 01:08:04,000
你这个时候

2648
01:08:04,000 --> 01:08:05,000
你要是强行的

2649
01:08:05,000 --> 01:08:06,000
把那部分程序

2650
01:08:06,000 --> 01:08:08,000
全部给 sleep 住

2651
01:08:08,000 --> 01:08:10,000
然后就只把 kernel 唤醒

2652
01:08:10,000 --> 01:08:12,000
只把那个 UI 的进程

2653
01:08:12,000 --> 01:08:13,000
和这种事情唤醒的话

2654
01:08:13,000 --> 01:08:14,000
好像想起来

2655
01:08:14,000 --> 01:08:15,000
想想还是一个

2656
01:08:15,000 --> 01:08:16,000
很复杂的事情

2657
01:08:16,000 --> 01:08:17,000
就会导致

2658
01:08:17,000 --> 01:08:18,000
比如说你打开之后

2659
01:08:18,000 --> 01:08:19,000
那个程序没有响应

2660
01:08:19,000 --> 01:08:21,000
虽然说它不影响

2661
01:08:21,000 --> 01:08:22,000
你其他系统的性能

2662
01:08:22,000 --> 01:08:23,000
但是那个程序

2663
01:08:23,000 --> 01:08:24,000
本身没响应

2664
01:08:24,000 --> 01:08:24,000
会导致你说

2665
01:08:24,000 --> 01:08:25,000
你这个东西

2666
01:08:25,000 --> 01:08:25,000
是不是挂掉了

2667
01:08:25,000 --> 01:08:26,000
对

2668
01:08:26,000 --> 01:08:28,000
而且系统很有可能

2669
01:08:28,000 --> 01:08:28,000
系统的某些东西

2670
01:08:28,000 --> 01:08:29,000
要非得依靠

2671
01:08:29,000 --> 01:08:31,000
某个程序的某个结果

2672
01:08:31,000 --> 01:08:31,000
怎么样的东西

2673
01:08:31,000 --> 01:08:32,000
你把它 sleep 住

2674
01:08:32,000 --> 01:08:33,000
那系统也卡住了

2675
01:08:33,000 --> 01:08:35,000
然后大家就互相锁死

2676
01:08:35,000 --> 01:08:35,000
对

2677
01:08:35,000 --> 01:08:37,000
我们把这个 search

2678
01:08:37,000 --> 01:08:39,000
给 sleep 住

2679
01:08:39,000 --> 01:08:40,000
然后打开

2680
01:08:40,000 --> 01:08:41,000
没网了

2681
01:08:41,000 --> 01:08:44,000
就完蛋了

2682
01:08:44,000 --> 01:08:44,000
对

2683
01:08:44,000 --> 01:08:46,000
然后那边要检查

2684
01:08:46,000 --> 01:08:47,000
ocsp 的进球

2685
01:08:47,000 --> 01:08:48,000
然后就互相

2686
01:08:48,000 --> 01:08:49,000
就死云关就卡住了

2687
01:08:49,000 --> 01:08:51,000
所以看起来也不太可惜

2688
01:08:51,000 --> 01:08:52,000
就这个机盒弹的问题

2689
01:08:52,000 --> 01:08:53,000
很难解决

2690
01:08:53,000 --> 01:08:54,000
对

2691
01:08:54,000 --> 01:08:55,000
说到这个开机

2692
01:08:55,000 --> 01:08:57,000
你用那个手表

2693
01:08:57,000 --> 01:08:57,000
解锁了这个

2694
01:08:57,000 --> 01:08:59,000
M 1 的这个 MacBook Pro 吗

2695
01:08:59,000 --> 01:08:59,000
对

2696
01:08:59,000 --> 01:09:00,000
我没有

2697
01:09:00,000 --> 01:09:01,000
因为我的手表的话

2698
01:09:01,000 --> 01:09:03,000
只是健身的时候戴

2699
01:09:03,000 --> 01:09:04,000
所以日常的话

2700
01:09:04,000 --> 01:09:05,000
我都没有戴手表

2701
01:09:05,000 --> 01:09:06,000
平时你不戴是吧

2702
01:09:06,000 --> 01:09:06,000
对

2703
01:09:06,000 --> 01:09:08,000
而且 M 1 的话有那个指纹

2704
01:09:08,000 --> 01:09:09,000
所以说我也不戴

2705
01:09:09,000 --> 01:09:10,000
看亚车和我一样

2706
01:09:10,000 --> 01:09:12,000
我基本上很少戴 Apple Watch

2707
01:09:12,000 --> 01:09:13,000
现在不去健身了

2708
01:09:13,000 --> 01:09:15,000
连这个机会都没有了

2709
01:09:15,000 --> 01:09:16,000
就放那吃灰

2710
01:09:16,000 --> 01:09:16,000
OK

2711
01:09:16,000 --> 01:09:18,000
因为我平时还是戴的

2712
01:09:18,000 --> 01:09:19,000
但是因为戴一段时间

2713
01:09:19,000 --> 01:09:20,000
就会它背后那个圈

2714
01:09:20,000 --> 01:09:21,000
会压在手上

2715
01:09:21,000 --> 01:09:22,000
压上一个印子

2716
01:09:22,000 --> 01:09:24,000
那部分皮肤会非常的

2717
01:09:24,000 --> 01:09:26,000
就是难受

2718
01:09:26,000 --> 01:09:28,000
然后就又摘掉了

2719
01:09:28,000 --> 01:09:29,000
也是出门

2720
01:09:29,000 --> 01:09:29,000
就是

2721
01:09:29,000 --> 01:09:31,000
我需要走步的时候

2722
01:09:31,000 --> 01:09:32,000
才戴上它

2723
01:09:32,000 --> 01:09:33,000
就这个问题

2724
01:09:33,000 --> 01:09:34,000
还是比较难解决

2725
01:09:34,000 --> 01:09:36,000
那其实也是去健身房

2726
01:09:36,000 --> 01:09:36,000
对

2727
01:09:36,000 --> 01:09:37,000
之前遇到的问题

2728
01:09:37,000 --> 01:09:38,000
就是说

2729
01:09:38,000 --> 01:09:39,000
我老是经常性的

2730
01:09:39,000 --> 01:09:40,000
解锁不了

2731
01:09:40,000 --> 01:09:41,000
这个 Apple Watch

2732
01:09:41,000 --> 01:09:42,000
就是你看到

2733
01:09:42,000 --> 01:09:43,000
它在尝试解锁

2734
01:09:43,000 --> 01:09:44,000
对吧

2735
01:09:44,000 --> 01:09:44,000
那我是 Mac mini

2736
01:09:44,000 --> 01:09:45,000
然后

2737
01:09:45,000 --> 01:09:47,000
它过了几秒

2738
01:09:47,000 --> 01:09:48,000
我说

2739
01:09:48,000 --> 01:09:49,000
这几秒时间

2740
01:09:49,000 --> 01:09:50,000
我已经足够

2741
01:09:50,000 --> 01:09:51,000
我输入密码

2742
01:09:51,000 --> 01:09:52,000
完成登录的过程了

2743
01:09:52,000 --> 01:09:52,000
对吧

2744
01:09:52,000 --> 01:09:53,000
但是它还没有解锁

2745
01:09:53,000 --> 01:09:54,000
最后它还告诉我

2746
01:09:54,000 --> 01:09:55,000
失败了

2747
01:09:55,000 --> 01:09:56,000
我还是得输入一遍密码

2748
01:09:56,000 --> 01:09:58,000
就这个可靠性非常低

2749
01:09:58,000 --> 01:09:59,000
对

2750
01:09:59,000 --> 01:09:59,000
这个对于苹果来说

2751
01:09:59,000 --> 01:09:59,000
对于苹果来说

2752
01:09:59,000 --> 01:10:01,000
真的太常见的一件事情了

2753
01:10:01,000 --> 01:10:01,000
是吧

2754
01:10:01,000 --> 01:10:02,000
各种的这种

2755
01:10:02,000 --> 01:10:04,000
只要涉及到两个设备

2756
01:10:04,000 --> 01:10:05,000
不在一个一起的这种

2757
01:10:05,000 --> 01:10:06,000
感觉这个 bug

2758
01:10:06,000 --> 01:10:07,000
bug 的发生率

2759
01:10:07,000 --> 01:10:08,000
有 50%的这么高

2760
01:10:08,000 --> 01:10:10,000
我是 10 次

2761
01:10:10,000 --> 01:10:11,000
有 7 次可能都解不开

2762
01:10:11,000 --> 01:10:13,000
碰运气能解锁开

2763
01:10:13,000 --> 01:10:14,000
可能两三次这种

2764
01:10:14,000 --> 01:10:16,000
你的是第几代的

2765
01:10:16,000 --> 01:10:16,000
那个 Watch

2766
01:10:16,000 --> 01:10:18,000
就五代

2767
01:10:18,000 --> 01:10:19,000
不是最新这个

2768
01:10:19,000 --> 01:10:20,000
但是也是比较新的

2769
01:10:20,000 --> 01:10:21,000
对

2770
01:10:21,000 --> 01:10:22,000
那是去年

2771
01:10:22,000 --> 01:10:23,000
那那个应该是没问题的

2772
01:10:23,000 --> 01:10:24,000
因为原来

2773
01:10:24,000 --> 01:10:25,000
一二代的时候

2774
01:10:25,000 --> 01:10:26,000
确实是好像实现方式

2775
01:10:26,000 --> 01:10:27,000
整个都是不一样的

2776
01:10:27,000 --> 01:10:28,000
那个成功率

2777
01:10:28,000 --> 01:10:29,000
就是非常低

2778
01:10:29,000 --> 01:10:29,000
我就是一代

2779
01:10:29,000 --> 01:10:30,000
我就是一代的

2780
01:10:30,000 --> 01:10:32,000
可能就是太老了

2781
01:10:32,000 --> 01:10:33,000
无他就是太老了

2782
01:10:33,000 --> 01:10:33,000
对

2783
01:10:33,000 --> 01:10:35,000
我当时是开发 AirPods 的时候

2784
01:10:35,000 --> 01:10:36,000
我专门开

2785
01:10:36,000 --> 01:10:36,000
适配了 Watch

2786
01:10:36,000 --> 01:10:37,000
然后用

2787
01:10:37,000 --> 01:10:38,000
让 Watch 可以解锁

2788
01:10:38,000 --> 01:10:39,000
然后就发现

2789
01:10:39,000 --> 01:10:40,000
我那个原来的

2790
01:10:40,000 --> 01:10:40,000
最早的那一代

2791
01:10:40,000 --> 01:10:41,000
应该是零代了

2792
01:10:41,000 --> 01:10:42,000
S 0

2793
01:10:42,000 --> 01:10:43,000
就不行了

2794
01:10:43,000 --> 01:10:43,000
对

2795
01:10:43,000 --> 01:10:44,000
那个真的不行

2796
01:10:44,000 --> 01:10:45,000
那个成功率就低到

2797
01:10:45,000 --> 01:10:47,000
可能 5%不到的

2798
01:10:47,000 --> 01:10:47,000
这么一个

2799
01:10:47,000 --> 01:10:49,000
这么低的一个成功率

2800
01:10:49,000 --> 01:10:50,000
直接放弃了

2801
01:10:50,000 --> 01:10:51,000
那代机器

2802
01:10:51,000 --> 01:10:52,000
真的非常非常慢

2803
01:10:52,000 --> 01:10:53,000
就是那个

2804
01:10:53,000 --> 01:10:54,000
DB 是一号机

2805
01:10:54,000 --> 01:10:54,000
然后

2806
01:10:54,000 --> 01:10:56,000
那个处理器也不行

2807
01:10:56,000 --> 01:10:57,000
续航也不行

2808
01:10:57,000 --> 01:10:58,000
然后

2809
01:10:58,000 --> 01:10:58,000
哎

2810
01:10:58,000 --> 01:11:00,000
挺坑的

2811
01:11:00,000 --> 01:11:00,000
是的

2812
01:11:00,000 --> 01:11:01,000
然后换到五代了之后

2813
01:11:01,000 --> 01:11:02,000
就发现成功率

2814
01:11:02,000 --> 01:11:03,000
在测试的时候

2815
01:11:03,000 --> 01:11:06,000
是达到了 99%左右

2816
01:11:06,000 --> 01:11:07,000
但是在日常的使用中

2817
01:11:07,000 --> 01:11:08,000
确实很多时候

2818
01:11:08,000 --> 01:11:09,000
也会出现

2819
01:11:09,000 --> 01:11:09,000
就不知道怎么

2820
01:11:09,000 --> 01:11:11,000
它就不工作了

2821
01:11:11,000 --> 01:11:13,000
可能依赖于蓝牙的

2822
01:11:13,000 --> 01:11:15,000
那个 2.4 G 环境

2823
01:11:15,000 --> 01:11:16,000
可能还是有一些讲究

2824
01:11:16,000 --> 01:11:17,000
因为现在 2.4 G 环境

2825
01:11:17,000 --> 01:11:17,000
确实

2826
01:11:17,000 --> 01:11:18,000
特别是在城市里面

2827
01:11:18,000 --> 01:11:19,000
是比较糟糕的

2828
01:11:19,000 --> 01:11:20,000
然后说

2829
01:11:20,000 --> 01:11:21,000
不管你再怎么努力

2830
01:11:21,000 --> 01:11:22,000
你解决不了

2831
01:11:22,000 --> 01:11:23,000
这个无线

2832
01:11:23,000 --> 01:11:25,000
这个射频的问题的话

2833
01:11:25,000 --> 01:11:26,000
它可能还是

2834
01:11:26,000 --> 01:11:27,000
没有办法实现

2835
01:11:27,000 --> 01:11:28,000
就是说

2836
01:11:28,000 --> 01:11:28,000
稳定

2837
01:11:28,000 --> 01:11:28,000
可靠

2838
01:11:28,000 --> 01:11:29,000
对

2839
01:11:29,000 --> 01:11:30,000
但这个锅好像

2840
01:11:30,000 --> 01:11:31,000
也有一个

2841
01:11:31,000 --> 01:11:33,000
可以甩给英特尔的可能

2842
01:11:33,000 --> 01:11:35,000
就是我之前做过一些

2843
01:11:35,000 --> 01:11:37,000
蓝牙的一些开发

2844
01:11:37,000 --> 01:11:38,000
然后你会发现

2845
01:11:38,000 --> 01:11:39,000
就是其实整个

2846
01:11:39,000 --> 01:11:40,000
MacOS 和 iOS 的

2847
01:11:40,000 --> 01:11:41,000
那个蓝牙协议站

2848
01:11:41,000 --> 01:11:43,000
还是经常会出现问题

2849
01:11:43,000 --> 01:11:44,000
整个协议站崩掉的

2850
01:11:44,000 --> 01:11:45,000
所以是不是

2851
01:11:45,000 --> 01:11:47,000
也是 Mac 上面的

2852
01:11:47,000 --> 01:11:47,000
和原来

2853
01:11:47,000 --> 01:11:49,000
原来在老架构上面

2854
01:11:49,000 --> 01:11:50,000
和蓝牙的通讯

2855
01:11:50,000 --> 01:11:51,000
不是那么顺畅

2856
01:11:51,000 --> 01:11:52,000
然后它出问题了

2857
01:11:52,000 --> 01:11:55,000
然后在 M 1 的芯片上面

2858
01:11:55,000 --> 01:11:56,000
也把这个问题修好了

2859
01:11:56,000 --> 01:11:58,000
也是有可能的一种理论

2860
01:11:58,000 --> 01:11:58,000
也有可能的一种理论

2861
01:11:58,000 --> 01:11:59,000
也有可能

2862
01:11:59,000 --> 01:12:00,000
就是之前它是用

2863
01:12:00,000 --> 01:12:02,000
它的之前蓝牙和 WiFi

2864
01:12:02,000 --> 01:12:03,000
应该都是博通的方案

2865
01:12:03,000 --> 01:12:04,000
就是在 Mac 上面

2866
01:12:04,000 --> 01:12:04,000
对 是的

2867
01:12:04,000 --> 01:12:06,000
这次它改用自己的方案

2868
01:12:06,000 --> 01:12:08,000
说不定也有可能

2869
01:12:08,000 --> 01:12:10,000
你可以关注一下

2870
01:12:10,000 --> 01:12:10,000
就是你之后

2871
01:12:10,000 --> 01:12:12,000
试着解锁几次看一下

2872
01:12:12,000 --> 01:12:13,000
好 没问题

2873
01:12:13,000 --> 01:12:16,000
但我觉得最终要解决这个问题

2874
01:12:16,000 --> 01:12:17,000
可能还是得靠

2875
01:12:17,000 --> 01:12:17,000
不管是从安全性

2876
01:12:17,000 --> 01:12:19,000
还是可靠性上

2877
01:12:19,000 --> 01:12:20,000
还是得看

2878
01:12:20,000 --> 01:12:23,000
今天是从 iPhone 11

2879
01:12:23,000 --> 01:12:24,000
开始搭载了

2880
01:12:24,000 --> 01:12:25,000
U 1 的

2881
01:12:25,000 --> 01:12:28,000
Ultra Wideband 的

2882
01:12:28,000 --> 01:12:28,000
那个东西

2883
01:12:28,000 --> 01:12:29,000
看能不能解决

2884
01:12:29,000 --> 01:12:30,000
因为那个一个是可以解决

2885
01:12:30,000 --> 01:12:31,000
这个通讯可靠性

2886
01:12:31,000 --> 01:12:32,000
因为它是超宽带

2887
01:12:32,000 --> 01:12:34,000
它是可以同时在多个频段上

2888
01:12:34,000 --> 01:12:35,000
发几个消息

2889
01:12:35,000 --> 01:12:38,000
就不用再等蓝牙的一个跳屏

2890
01:12:38,000 --> 01:12:39,000
2.4 G 那种

2891
01:12:39,000 --> 01:12:40,000
而且它有那个距离

2892
01:12:40,000 --> 01:12:42,000
就是说它可以更加安全可靠的判断

2893
01:12:42,000 --> 01:12:44,000
是不是你这个表

2894
01:12:44,000 --> 01:12:46,000
刚好在 MacBook 的旁边

2895
01:12:46,000 --> 01:12:50,000
我就可以有更大的信任空间

2896
01:12:50,000 --> 01:12:53,000
说那肯定是你本人在解锁这个东西

2897
01:12:53,000 --> 01:12:54,000
而不是说通过这种

2898
01:12:54,000 --> 01:12:56,000
叫做什么 Relay 攻击的方式来做的

2899
01:12:56,000 --> 01:12:58,000
对 没错

2900
01:12:58,000 --> 01:13:00,000
但是这个好像还是一个遥远的现实

2901
01:13:00,000 --> 01:13:03,000
这个只在 iPhone 上目前装载了

2902
01:13:03,000 --> 01:13:05,000
Watch 和 Mac 上都还没有

2903
01:13:05,000 --> 01:13:07,000
Watch 上面看主要是空间的限制吧

2904
01:13:07,000 --> 01:13:09,000
怎么能够实现说

2905
01:13:09,000 --> 01:13:11,000
把那个再微缩一下

2906
01:13:11,000 --> 01:13:11,000
或者直接整

2907
01:13:11,000 --> 01:13:13,000
表上的它还不是 SoC

2908
01:13:13,000 --> 01:13:15,000
它是叫做 SOP

2909
01:13:15,000 --> 01:13:16,000
System Unpackage

2910
01:13:16,000 --> 01:13:17,000
就是它整个

2911
01:13:17,000 --> 01:13:21,000
整个那个系统都封装在一个 package 里面去了

2912
01:13:21,000 --> 01:13:24,000
然后就是它整合都是比那个 M 1 还要高的

2913
01:13:24,000 --> 01:13:26,000
所以说到时候如果它把 U 1 整合进去

2914
01:13:26,000 --> 01:13:28,000
我觉得应该也是有可能性的

2915
01:13:28,000 --> 01:13:31,000
只是说功耗这些天线怎么弄我不太清楚

2916
01:13:31,000 --> 01:13:34,000
但是我希望是能够实现的

2917
01:13:34,000 --> 01:13:37,000
然后 U 1 应该上 Mac 上都还没有对吧

2918
01:13:37,000 --> 01:13:39,000
哪怕是这个 M 1 的 Mac 上面是没有的

2919
01:13:39,000 --> 01:13:40,000
对都没有

2920
01:13:40,000 --> 01:13:42,000
说不定这个 M 2 可能就有了

2921
01:13:42,000 --> 01:13:45,000
应该是按时间的话应该是到了一个该母该模具

2922
01:13:45,000 --> 01:13:47,000
该进行大升级的那么一个时间了

2923
01:13:47,000 --> 01:13:48,000
对啊对啊

2924
01:13:48,000 --> 01:13:50,000
而且它要整合在芯片里面

2925
01:13:50,000 --> 01:13:52,000
它也比较好做

2926
01:13:52,000 --> 01:13:53,000
都是在自己的这个

2927
01:13:53,000 --> 01:13:56,000
不管是安全性上还是说这个空间上面

2928
01:13:56,000 --> 01:13:58,000
都比较好弄对吧

2929
01:13:58,000 --> 01:13:58,000
我觉得是这样的

2930
01:13:58,000 --> 01:14:00,000
而且这个场景很合适啊对吧

2931
01:14:00,000 --> 01:14:04,000
用这个表或者手机靠近一个你的 Mac 就就解锁了

2932
01:14:04,000 --> 01:14:05,000
那其实还是很方便的嘛

2933
01:14:05,000 --> 01:14:07,000
就是不用做什么操作

2934
01:14:07,000 --> 01:14:08,000
对我今天才从你这学习了

2935
01:14:08,000 --> 01:14:11,000
原来 U 1 是可以拿传输数据的

2936
01:14:11,000 --> 01:14:12,000
我原来的理解的话

2937
01:14:12,000 --> 01:14:14,000
以为它只能去标定一个方向

2938
01:14:14,000 --> 01:14:16,000
标定方向是它的那个物理特性导致的嘛

2939
01:14:16,000 --> 01:14:17,000
传输数据它只要能够传输信号

2940
01:14:17,000 --> 01:14:18,000
都是可以传输数据的

2941
01:14:18,000 --> 01:14:20,000
而且我理解它那个带宽还比较高

2942
01:14:20,000 --> 01:14:21,000
因为它可用的那个

2943
01:14:21,000 --> 01:14:23,000
就那个无线的频段会比较宽嘛

2944
01:14:23,000 --> 01:14:27,000
所以我觉得 U 1 如果内置到 iPad

2945
01:14:27,000 --> 01:14:28,000
甚至是这个

2946
01:14:28,000 --> 01:14:30,000
这个 Mac 里面

2947
01:14:30,000 --> 01:14:31,000
它甚至你知道我们现在用那个叫什么

2948
01:14:31,000 --> 01:14:33,000
Sidecar 对吧

2949
01:14:33,000 --> 01:14:34,000
就是通过

2950
01:14:34,000 --> 01:14:35,000
是通过 WiFi 来实现的嘛

2951
01:14:35,000 --> 01:14:37,000
它是通过 5 G 的一个 WiFi 来实现的对不对

2952
01:14:37,000 --> 01:14:39,000
对应该是 WiFi 的

2953
01:14:39,000 --> 01:14:40,000
对如果它用 U 1 的话

2954
01:14:40,000 --> 01:14:42,000
还可以把那个 WiFi 的带宽解放出来

2955
01:14:42,000 --> 01:14:44,000
其实还是更好的一个方案的

2956
01:14:44,000 --> 01:14:46,000
对是的是一个我们希望的未来

2957
01:14:46,000 --> 01:14:48,000
对对对

2958
01:14:48,000 --> 01:14:49,000
anyway 这个就是

2959
01:14:49,000 --> 01:14:50,000
就是未来的这个

2960
01:14:50,000 --> 01:14:52,000
苹果的这个 Mac

2961
01:14:52,000 --> 01:14:53,000
期待设备还是非常值得期待的

2962
01:14:53,000 --> 01:14:55,000
那大家可以去买一点这个苹果物票

2963
01:14:55,000 --> 01:14:58,000
反正我是买的

2964
01:14:58,000 --> 01:14:58,000
你们

2965
01:14:58,000 --> 01:14:58,000
我记得

2966
01:14:58,000 --> 01:14:59,000
你也买的好像

2967
01:14:59,000 --> 01:15:00,000
我先卖微镜了

2968
01:15:00,000 --> 01:15:02,000
对

2969
01:15:02,000 --> 01:15:05,000
OK 今天我们前半部分

2970
01:15:05,000 --> 01:15:06,000
我们叫什么寓意先扬对吧

2971
01:15:06,000 --> 01:15:09,000
先表扬了一顿这个苹果的这个

2972
01:15:09,000 --> 01:15:11,000
这个硬件

2973
01:15:11,000 --> 01:15:12,000
现在我们开始吐槽模式

2974
01:15:12,000 --> 01:15:13,000
很招在后面

2975
01:15:13,000 --> 01:15:15,000
就是在聊的第二个话题

2976
01:15:15,000 --> 01:15:16,000
其实是跟

2977
01:15:16,000 --> 01:15:17,000
其实是相对来说

2978
01:15:17,000 --> 01:15:18,000
一个比较糟糕的一个

2979
01:15:18,000 --> 01:15:21,000
或者是比更加难解决的一个事情吧

2980
01:15:21,000 --> 01:15:23,000
这东西叫什么

2981
01:15:23,000 --> 01:15:24,000
我不知道这个中文名叫什么

2982
01:15:24,000 --> 01:15:25,000
我就是这个

2983
01:15:25,000 --> 01:15:27,000
这个缩写叫做 OCSP

2984
01:15:27,000 --> 01:15:29,000
它的全名叫做

2985
01:15:29,000 --> 01:15:32,000
Online Certificate Status Protocol

2986
01:15:32,000 --> 01:15:33,000
叫什么

2987
01:15:33,000 --> 01:15:35,000
在线证书状态协议

2988
01:15:35,000 --> 01:15:37,000
大概这么翻译一下吧

2989
01:15:37,000 --> 01:15:39,000
要不亚琪你给我们先解释一下

2990
01:15:39,000 --> 01:15:39,000
因为这个

2991
01:15:39,000 --> 01:15:41,000
这个是一个开发者专门用的东西

2992
01:15:41,000 --> 01:15:42,000
你给我们解释

2993
01:15:42,000 --> 01:15:43,000
这个东西是干嘛用的

2994
01:15:43,000 --> 01:15:44,000
为什么它会

2995
01:15:44,000 --> 01:15:45,000
这次变成一个很大的问题

2996
01:15:45,000 --> 01:15:46,000
行

2997
01:15:46,000 --> 01:15:48,000
然后其实这个 OCSP

2998
01:15:48,000 --> 01:15:49,000
这个东西的话

2999
01:15:49,000 --> 01:15:51,000
本身的话和应用的话

3000
01:15:51,000 --> 01:15:52,000
它只是正好被套用在这了

3001
01:15:52,000 --> 01:15:54,000
它本身不是为了解决

3002
01:15:54,000 --> 01:15:56,000
应用安全性的这么一个问题

3003
01:15:56,000 --> 01:15:57,000
它是解决

3004
01:15:57,000 --> 01:15:58,000
它解决的问题是什么呢

3005
01:15:58,000 --> 01:16:01,000
是就是在原来的传统的证书体系下

3006
01:16:01,000 --> 01:16:04,000
证书可能更常见的场景是 HTPS 网站

3007
01:16:04,000 --> 01:16:05,000
我们当我们仿佛一个网站的时候

3008
01:16:05,000 --> 01:16:07,000
网站要通过各种的加密手段

3009
01:16:07,000 --> 01:16:10,000
给我们出示一个合理和有效的证书

3010
01:16:10,000 --> 01:16:11,000
我们留按期才知道

3011
01:16:11,000 --> 01:16:12,000
我们连接到了一个

3012
01:16:12,000 --> 01:16:13,000
这个网站是真实的

3013
01:16:13,000 --> 01:16:14,000
不是别人造假的

3014
01:16:14,000 --> 01:16:16,000
然后这么一个情况

3015
01:16:16,000 --> 01:16:17,000
但是这个情况就会出现

3016
01:16:17,000 --> 01:16:19,000
我的那个运营商也好

3017
01:16:19,000 --> 01:16:20,000
或者其他 whatever

3018
01:16:20,000 --> 01:16:22,000
什么样的情况都行

3019
01:16:22,000 --> 01:16:23,000
导致我把证书表现泄露出去了

3020
01:16:23,000 --> 01:16:26,000
那我需要有一个措施能够补救

3021
01:16:26,000 --> 01:16:27,000
然后能够补救

3022
01:16:27,000 --> 01:16:28,000
把我泄露出去

3023
01:16:28,000 --> 01:16:30,000
这个证书给它注销掉

3024
01:16:30,000 --> 01:16:33,000
所以说就有各种各样的方式

3025
01:16:33,000 --> 01:16:34,000
去进行叫做证书吊销

3026
01:16:34,000 --> 01:16:37,000
就这个 OCSP 就是用来吊销证书用的

3027
01:16:37,000 --> 01:16:37,000
对吧

3028
01:16:37,000 --> 01:16:38,000
对是的

3029
01:16:38,000 --> 01:16:40,000
OCSP 就是来吊销证书的一种方式

3030
01:16:40,000 --> 01:16:42,000
最早的时候应该是用的

3031
01:16:42,000 --> 01:16:44,000
叫 CRIL 的一种方式去吊销

3032
01:16:44,000 --> 01:16:46,000
CRIL 就是定期的系统区

3033
01:16:46,000 --> 01:16:48,000
或者是留按期去查一个地方

3034
01:16:48,000 --> 01:16:50,000
然后给你返回一大个列表

3035
01:16:50,000 --> 01:16:52,000
哪个证书是被吊销了的

3036
01:16:52,000 --> 01:16:54,000
你记得你不要再相信它了

3037
01:16:54,000 --> 01:16:56,000
但这个东西就是越堆越大

3038
01:16:56,000 --> 01:16:56,000
越堆越大

3039
01:16:56,000 --> 01:16:57,000
现在的大家

3040
01:16:57,000 --> 01:16:58,000
这么多网站

3041
01:16:58,000 --> 01:16:58,000
这么多东西

3042
01:16:58,000 --> 01:17:00,000
它只能不捡

3043
01:17:00,000 --> 01:17:00,000
因为

3044
01:17:00,000 --> 01:17:01,000
对是的

3045
01:17:01,000 --> 01:17:02,000
然后就搞到这个东西

3046
01:17:02,000 --> 01:17:04,000
就会感觉看起来很不优雅

3047
01:17:04,000 --> 01:17:06,000
然后 OCSP 的话

3048
01:17:06,000 --> 01:17:07,000
其实也挺简单的

3049
01:17:07,000 --> 01:17:08,000
就是每次访问的时候

3050
01:17:08,000 --> 01:17:10,000
我再去找一个测定的

3051
01:17:10,000 --> 01:17:12,000
我相信的服务区去问一下

3052
01:17:12,000 --> 01:17:14,000
然后说这个证书

3053
01:17:14,000 --> 01:17:15,000
还有没有被吊销掉

3054
01:17:15,000 --> 01:17:16,000
对它有没有被吊销掉

3055
01:17:16,000 --> 01:17:17,000
然后服务器就说 OK

3056
01:17:17,000 --> 01:17:17,000
没问题

3057
01:17:17,000 --> 01:17:20,000
然后我就本地就放心就可以了

3058
01:17:20,000 --> 01:17:22,000
然后可能会再加上一些缓存机制

3059
01:17:22,000 --> 01:17:25,000
就是比如说只有几天才会访问一次

3060
01:17:25,000 --> 01:17:27,000
这个可能有点

3061
01:17:27,000 --> 01:17:27,000
我们做个

3062
01:17:27,000 --> 01:17:29,000
刚才那个很技术的一个描述

3063
01:17:29,000 --> 01:17:31,000
但我们做一个比较形象的一个比喻

3064
01:17:31,000 --> 01:17:32,000
就好像我们现在说

3065
01:17:32,000 --> 01:17:34,000
是你去拿一个美国签证

3066
01:17:34,000 --> 01:17:36,000
它虽然发给你的一个签证

3067
01:17:36,000 --> 01:17:38,000
你拿到了那个所谓的 Visa 那张纸

3068
01:17:38,000 --> 01:17:39,000
贴在你的护照上了

3069
01:17:39,000 --> 01:17:39,000
对吧

3070
01:17:39,000 --> 01:17:42,000
但是你实际上要去美国之前

3071
01:17:42,000 --> 01:17:45,000
还是得在一个美国官方指定的

3072
01:17:45,000 --> 01:17:46,000
一个网站上去注册一下

3073
01:17:46,000 --> 01:17:47,000
说我要来美国了

3074
01:17:47,000 --> 01:17:49,000
虽然你之前给我发过这个签证

3075
01:17:49,000 --> 01:17:50,000
但是你现在

3076
01:17:50,000 --> 01:17:52,000
我再确认一下我能不能来

3077
01:17:52,000 --> 01:17:52,000
这次对吧

3078
01:17:52,000 --> 01:17:53,000
差不多这个 OCSP

3079
01:17:53,000 --> 01:17:55,000
就是说这个确认这个过程

3080
01:17:55,000 --> 01:17:56,000
可以这样解释

3081
01:17:56,000 --> 01:17:56,000
我觉得

3082
01:17:57,000 --> 01:17:58,000
OCSP 更像那种

3083
01:17:58,000 --> 01:18:00,000
就是比如说你买了一瓶酒

3084
01:18:00,000 --> 01:18:02,000
然后酒上有一个什么防伪标签

3085
01:18:02,000 --> 01:18:04,000
然后说你打电话到某某地方

3086
01:18:04,000 --> 01:18:05,000
查这个标签

3087
01:18:05,000 --> 01:18:05,000
是不是真的

3088
01:18:05,000 --> 01:18:07,000
类似于这样一个东西

3089
01:18:07,000 --> 01:18:07,000
对

3090
01:18:07,000 --> 01:18:09,000
这个解释好像非常的合适

3091
01:18:09,000 --> 01:18:11,000
几乎是一模一样的一个机制

3092
01:18:11,000 --> 01:18:12,000
因为就是 OCSP 的

3093
01:18:12,000 --> 01:18:14,000
它那个验证的那个网址

3094
01:18:14,000 --> 01:18:15,000
实际上是在证书内部

3095
01:18:15,000 --> 01:18:16,000
就是它发给你证书的时候

3096
01:18:16,000 --> 01:18:17,000
就告诉你

3097
01:18:17,000 --> 01:18:18,000
你要是想查这个证书的真伪

3098
01:18:18,000 --> 01:18:19,000
你要去哪哪哪查

3099
01:18:19,000 --> 01:18:20,000
对

3100
01:18:20,000 --> 01:18:23,000
所以它这次

3101
01:18:23,000 --> 01:18:25,000
我们就苹果这次遇到的一个问题

3102
01:18:25,000 --> 01:18:26,000
是说

3103
01:18:26,000 --> 01:18:27,000
因为

3104
01:18:27,000 --> 01:18:27,000
individue

3105
01:18:27,000 --> 01:18:29,000
这个新发的这个 mac os

3106
01:18:29,000 --> 01:18:29,000
pixels

3107
01:18:29,000 --> 01:18:31,000
这个 11 版本

3108
01:18:31,000 --> 01:18:32,000
11 的这个新系统

3109
01:18:32,000 --> 01:18:33,000
大规模的人

3110
01:18:33,000 --> 01:18:36,000
去通过 OCSP 的方式

3111
01:18:36,000 --> 01:18:38,000
去查这个应用证书

3112
01:18:38,000 --> 01:18:39,000
因为你你从

3113
01:18:39,000 --> 01:18:40,000
你换了新系统吧

3114
01:18:40,000 --> 01:18:41,000
然后你都要去

3115
01:18:41,000 --> 01:18:42,000
你开每一个程序的时候

3116
01:18:42,000 --> 01:18:44,000
都要先检查一遍这个东西

3117
01:18:44,000 --> 01:18:47,000
导致苹果的这个 OCSP 服务器

3118
01:18:47,000 --> 01:18:48,000
被等于是

3119
01:18:48,000 --> 01:18:48,000
等于是他自己

3120
01:18:48,000 --> 01:18:49,000
被自己 DDoS 了吗

3121
01:18:49,000 --> 01:18:50,000
拒绝服务攻击了

3122
01:18:50,000 --> 01:18:51,000
导致他缓慢

3123
01:18:51,000 --> 01:18:53,000
然后导致所有人

3124
01:18:53,000 --> 01:18:54,000
所有的这个 mac 程序

3125
01:18:54,000 --> 01:18:55,000
都启动不了

3126
01:18:55,000 --> 01:18:56,000
就因为都在等

3127
01:18:56,000 --> 01:18:57,000
这个查询

3128
01:18:57,000 --> 01:18:57,000
那个商务器

3129
01:18:57,000 --> 01:18:57,000
结果

3130
01:18:57,000 --> 01:18:58,000
那就这里面

3131
01:18:58,000 --> 01:18:59,000
可能有个挑要的地方

3132
01:18:59,000 --> 01:19:00,000
就在于

3133
01:19:00,000 --> 01:19:01,000
为什么每次启动

3134
01:19:01,000 --> 01:19:02,000
Mac 程序之前

3135
01:19:02,000 --> 01:19:03,000
需要去检查一下

3136
01:19:03,000 --> 01:19:04,000
这个证书

3137
01:19:04,000 --> 01:19:05,000
就苹果做这个东西的

3138
01:19:05,000 --> 01:19:06,000
目的是什么

3139
01:19:06,000 --> 01:19:07,000
这个的话

3140
01:19:07,000 --> 01:19:08,000
最早的时候

3141
01:19:08,000 --> 01:19:09,000
其实就是一种

3142
01:19:09,000 --> 01:19:10,000
安全的机制

3143
01:19:10,000 --> 01:19:12,000
就是这个类似的机制的话

3144
01:19:12,000 --> 01:19:13,000
就是在可能

3145
01:19:13,000 --> 01:19:15,000
公众一般理解起来

3146
01:19:15,000 --> 01:19:16,000
更简单的一个说法

3147
01:19:16,000 --> 01:19:17,000
叫数字签名

3148
01:19:17,000 --> 01:19:18,000
在 Windows 上也有

3149
01:19:18,000 --> 01:19:21,000
可能背后逻辑是这样的

3150
01:19:21,000 --> 01:19:22,000
就是因为有了一软件

3151
01:19:22,000 --> 01:19:24,000
那么我就要求

3152
01:19:24,000 --> 01:19:24,000
你们每个人

3153
01:19:24,000 --> 01:19:25,000
分发软件的时候

3154
01:19:25,000 --> 01:19:26,000
必须都给这个软件

3155
01:19:26,000 --> 01:19:27,000
加上一个签名

3156
01:19:27,000 --> 01:19:29,000
就是这个所谓的证书

3157
01:19:29,000 --> 01:19:29,000
对吧

3158
01:19:29,000 --> 01:19:31,000
就你千万别得到一个证书

3159
01:19:31,000 --> 01:19:31,000
对

3160
01:19:31,000 --> 01:19:32,000
我才能认为这个软件

3161
01:19:32,000 --> 01:19:34,000
是一个相对安全的软件

3162
01:19:34,000 --> 01:19:36,000
我才允许你打开

3163
01:19:36,000 --> 01:19:37,000
然后背后对新的逻辑

3164
01:19:37,000 --> 01:19:39,000
就是这个证书的获取

3165
01:19:39,000 --> 01:19:41,000
是有一定的门槛和难度的

3166
01:19:41,000 --> 01:19:42,000
对于 Mac 来说的话

3167
01:19:42,000 --> 01:19:43,000
就是你的证书

3168
01:19:43,000 --> 01:19:45,000
就是你的苹果开发者账号证书

3169
01:19:45,000 --> 01:19:46,000
首先你要付钱

3170
01:19:46,000 --> 01:19:47,000
才能买到

3171
01:19:47,000 --> 01:19:48,000
要 99 刀

3172
01:19:48,000 --> 01:19:50,000
你对于 99 刀

3173
01:19:50,000 --> 01:19:51,000
这么一个成本上来说的话

3174
01:19:51,000 --> 01:19:52,000
假如说你要非常大的

3175
01:19:52,000 --> 01:19:53,000
广泛的去扫网

3176
01:19:53,000 --> 01:19:55,000
然后你想每一个分发

3177
01:19:55,000 --> 01:19:56,000
都用不同的证书

3178
01:19:56,000 --> 01:19:58,000
几乎是不可能接受的一个成本

3179
01:19:58,000 --> 01:19:59,000
另外就是

3180
01:19:59,000 --> 01:20:01,000
你在注册账号的时候

3181
01:20:01,000 --> 01:20:02,000
是需要提供信息的

3182
01:20:02,000 --> 01:20:03,000
支付的时候

3183
01:20:03,000 --> 01:20:03,000
也是需要

3184
01:20:03,000 --> 01:20:05,000
暴露你的支付的信息的

3185
01:20:05,000 --> 01:20:06,000
假如说真的是

3186
01:20:06,000 --> 01:20:08,000
之后需要跟你秋后算账

3187
01:20:08,000 --> 01:20:09,000
你是个恶意软件

3188
01:20:09,000 --> 01:20:11,000
那么是有证据可以去追寻的

3189
01:20:11,000 --> 01:20:12,000
就抓到你本人

3190
01:20:12,000 --> 01:20:13,000
对吧

3191
01:20:13,000 --> 01:20:13,000
比如说

3192
01:20:13,000 --> 01:20:15,000
我们是可以找得到

3193
01:20:15,000 --> 01:20:16,000
苹果是找到你在哪的

3194
01:20:16,000 --> 01:20:16,000
对吧

3195
01:20:16,000 --> 01:20:18,000
你在哪里注册

3196
01:20:18,000 --> 01:20:20,000
你的法律主体是什么

3197
01:20:20,000 --> 01:20:20,000
都能找得到

3198
01:20:20,000 --> 01:20:21,000
这个证书里面

3199
01:20:21,000 --> 01:20:23,000
是包含着这些信息

3200
01:20:23,000 --> 01:20:23,000
对

3201
01:20:23,000 --> 01:20:25,000
除非苹果给你

3202
01:20:25,000 --> 01:20:26,000
认证过

3203
01:20:26,000 --> 01:20:28,000
你是不可能自己伪造一个

3204
01:20:28,000 --> 01:20:29,000
默认情况下

3205
01:20:29,000 --> 01:20:31,000
被苹果设备信任的证书的

3206
01:20:31,000 --> 01:20:31,000
对

3207
01:20:31,000 --> 01:20:33,000
这个是算法层面决定的

3208
01:20:33,000 --> 01:20:35,000
当然这个你应该比我懂得多

3209
01:20:35,000 --> 01:20:36,000
你可以给大家科普

3210
01:20:36,000 --> 01:20:39,000
这个我们下次再解释

3211
01:20:39,000 --> 01:20:41,000
但是我们从实用性的解释

3212
01:20:41,000 --> 01:20:41,000
就是说

3213
01:20:41,000 --> 01:20:43,000
你是不可能伪造一个

3214
01:20:43,000 --> 01:20:46,000
苹果签发给你的证书的

3215
01:20:46,000 --> 01:20:48,000
这两个证书是可以保证的

3216
01:20:48,000 --> 01:20:48,000
那么

3217
01:20:48,000 --> 01:20:48,000
对

3218
01:20:48,000 --> 01:20:50,000
在这个证书技术上

3219
01:20:50,000 --> 01:20:53,000
在做 OCSP 的原因是

3220
01:20:53,000 --> 01:20:54,000
我猜想

3221
01:20:54,000 --> 01:20:55,000
是不是说

3222
01:20:55,000 --> 01:20:55,000
苹果

3223
01:20:55,000 --> 01:20:56,000
认为

3224
01:20:56,000 --> 01:20:59,000
我即使发给你一个可信的证书

3225
01:20:59,000 --> 01:21:00,000
但是你作为一个开发者

3226
01:21:00,000 --> 01:21:02,000
也有可能拿这个证书

3227
01:21:02,000 --> 01:21:03,000
来分发恶意软件

3228
01:21:03,000 --> 01:21:03,000
对不对

3229
01:21:03,000 --> 01:21:04,000
对

3230
01:21:04,000 --> 01:21:04,000
是的

3231
01:21:04,000 --> 01:21:06,000
或者说你先翻发了一个正常软件

3232
01:21:06,000 --> 01:21:08,000
但是你可能潜伏一段时间

3233
01:21:08,000 --> 01:21:11,000
才使用你软件里面的恶意的功能

3234
01:21:11,000 --> 01:21:13,000
这个时候苹果需要一个手段

3235
01:21:13,000 --> 01:21:13,000
说

3236
01:21:13,000 --> 01:21:16,000
即便我签发了一个可信的证书

3237
01:21:16,000 --> 01:21:18,000
给这个软件的开发者

3238
01:21:18,000 --> 01:21:19,000
然后他用这个证书

3239
01:21:19,000 --> 01:21:20,000
给他的程序签了名

3240
01:21:20,000 --> 01:21:22,000
我也要有一个所谓的

3241
01:21:22,000 --> 01:21:23,000
Kill switch

3242
01:21:23,000 --> 01:21:24,000
对吧

3243
01:21:24,000 --> 01:21:24,000
就是

3244
01:21:24,000 --> 01:21:25,000
Tim Cook

3245
01:21:25,000 --> 01:21:26,000
可以按个键

3246
01:21:26,000 --> 01:21:27,000
老板键

3247
01:21:27,000 --> 01:21:28,000
老板键说禁止这个软件

3248
01:21:28,000 --> 01:21:31,000
在苹果设备上运行

3249
01:21:31,000 --> 01:21:33,000
因为它现在是一个恶意软件

3250
01:21:33,000 --> 01:21:34,000
它有一些隐藏的功能

3251
01:21:34,000 --> 01:21:35,000
我们当时是不知道的

3252
01:21:35,000 --> 01:21:36,000
没错

3253
01:21:36,000 --> 01:21:36,000
是的

3254
01:21:36,000 --> 01:21:37,000
这是一种可能

3255
01:21:37,000 --> 01:21:38,000
还有另外一种可能是

3256
01:21:38,000 --> 01:21:39,000
比如说开发者

3257
01:21:39,000 --> 01:21:40,000
他不小心把证书泄露了

3258
01:21:40,000 --> 01:21:42,000
然后被公众所知道

3259
01:21:42,000 --> 01:21:43,000
这个时候大家谁都可以用了

3260
01:21:43,000 --> 01:21:45,000
这也是需要把它注销掉

3261
01:21:45,000 --> 01:21:46,000
你把钥匙丢了

3262
01:21:46,000 --> 01:21:48,000
导致整个楼都要换锁

3263
01:21:48,000 --> 01:21:50,000
是的

3264
01:21:50,000 --> 01:21:51,000
这个 OCSP

3265
01:21:51,000 --> 01:21:52,000
其实是为了

3266
01:21:52,000 --> 01:21:53,000
从本质上来讲

3267
01:21:53,000 --> 01:21:55,000
它是为了保障用户的

3268
01:21:55,000 --> 01:21:56,000
这个安全性考虑

3269
01:21:56,000 --> 01:21:58,000
所以说在每次

3270
01:21:58,000 --> 01:21:59,000
一个应用程序启动之前

3271
01:21:59,000 --> 01:22:01,000
都去检查一下

3272
01:22:01,000 --> 01:22:02,000
这个应用程序签名的证书

3273
01:22:02,000 --> 01:22:04,000
是否被吊销过了

3274
01:22:04,000 --> 01:22:05,000
如果它被吊销过的话

3275
01:22:05,000 --> 01:22:06,000
这个程序就不能启动

3276
01:22:06,000 --> 01:22:07,000
对吧

3277
01:22:07,000 --> 01:22:09,000
其实还有一点偏差

3278
01:22:09,000 --> 01:22:10,000
就是它也不是

3279
01:22:10,000 --> 01:22:11,000
每次启动都会检查

3280
01:22:11,000 --> 01:22:12,000
一般它还是

3281
01:22:12,000 --> 01:22:13,000
有一个时间的缓存

3282
01:22:13,000 --> 01:22:14,000
给一段时间

3283
01:22:14,000 --> 01:22:15,000
可能一两天

3284
01:22:15,000 --> 01:22:17,000
我到这没有具体测了

3285
01:22:17,000 --> 01:22:17,000
可能是几天

3286
01:22:17,000 --> 01:22:18,000
也可能是几个小时

3287
01:22:18,000 --> 01:22:19,000
这么一个时间

3288
01:22:19,000 --> 01:22:20,000
然后它就会需要

3289
01:22:20,000 --> 01:22:21,000
重新去检查一下

3290
01:22:21,000 --> 01:22:24,000
而且甚至有可能

3291
01:22:24,000 --> 01:22:25,000
当然这个也是推测

3292
01:22:25,000 --> 01:22:25,000
不能确定

3293
01:22:25,000 --> 01:22:27,000
苹果压根没有考虑

3294
01:22:27,000 --> 01:22:30,000
有 CSP 在 App 包的验证上

3295
01:22:30,000 --> 01:22:31,000
这件事情

3296
01:22:31,000 --> 01:22:32,000
因为整个系统

3297
01:22:32,000 --> 01:22:33,000
关于证书

3298
01:22:33,000 --> 01:22:35,000
数字签名的验证的东西

3299
01:22:35,000 --> 01:22:35,000
都是用的是

3300
01:22:35,000 --> 01:22:37,000
同一套公用体系

3301
01:22:37,000 --> 01:22:40,000
然后在开发者上面的话

3302
01:22:40,000 --> 01:22:41,000
应该是 Security Framework

3303
01:22:41,000 --> 01:22:43,000
然后这套体系的话

3304
01:22:43,000 --> 01:22:44,000
既会拿来验证

3305
01:22:44,000 --> 01:22:46,000
HTPS 你房的网站

3306
01:22:46,000 --> 01:22:47,000
是否是合理法的

3307
01:22:47,000 --> 01:22:48,000
也会来验证

3308
01:22:48,000 --> 01:22:51,000
开发者签名的应用包

3309
01:22:51,000 --> 01:22:52,000
是否是合法的

3310
01:22:52,000 --> 01:22:53,000
所以说它可能

3311
01:22:53,000 --> 01:22:54,000
也根本没有想那么多细节

3312
01:22:54,000 --> 01:22:55,000
就直接

3313
01:22:55,000 --> 01:22:55,000
把那个东西搬过来

3314
01:22:55,000 --> 01:22:56,000
再用了

3315
01:22:56,000 --> 01:22:57,000
OK

3316
01:22:57,000 --> 01:22:58,000
如果你电脑

3317
01:22:58,000 --> 01:23:00,000
是在没联网的状态下

3318
01:23:00,000 --> 01:23:01,000
这个 OCISP

3319
01:23:01,000 --> 01:23:03,000
它是可以直接失败

3320
01:23:03,000 --> 01:23:04,000
其实是不影响你其中的

3321
01:23:04,000 --> 01:23:05,000
对不对

3322
01:23:05,000 --> 01:23:05,000
对

3323
01:23:05,000 --> 01:23:07,000
这其实是 OCISP 协议

3324
01:23:07,000 --> 01:23:08,000
本身设计的时候

3325
01:23:08,000 --> 01:23:08,000
我们就有问题

3326
01:23:08,000 --> 01:23:09,000
但这个问题

3327
01:23:09,000 --> 01:23:10,000
好像从理论上

3328
01:23:10,000 --> 01:23:11,000
我印象中

3329
01:23:11,000 --> 01:23:12,000
之前讨论是不可能解决的

3330
01:23:12,000 --> 01:23:14,000
就是假如说黑客恶意的

3331
01:23:14,000 --> 01:23:16,000
他能够控制你的链路

3332
01:23:16,000 --> 01:23:17,000
他能阻止你的查询

3333
01:23:17,000 --> 01:23:18,000
那怎么办

3334
01:23:18,000 --> 01:23:20,000
就不准你去检查 OCISP

3335
01:23:20,000 --> 01:23:20,000
对吧

3336
01:23:20,000 --> 01:23:21,000
对

3337
01:23:21,000 --> 01:23:24,000
你因为不太能够说

3338
01:23:24,000 --> 01:23:25,000
你这个 OCISP 访问失败

3339
01:23:25,000 --> 01:23:26,000
我就不允许继续

3340
01:23:26,000 --> 01:23:28,000
因为访问失败这件事情

3341
01:23:28,000 --> 01:23:29,000
太多因素了

3342
01:23:29,000 --> 01:23:29,000
对

3343
01:23:29,000 --> 01:23:31,000
太多因素

3344
01:23:31,000 --> 01:23:32,000
在网络上各种方面

3345
01:23:32,000 --> 01:23:33,000
还是都还是可能的

3346
01:23:33,000 --> 01:23:34,000
我自己观察的话

3347
01:23:34,000 --> 01:23:36,000
是系统会重拾五次

3348
01:23:36,000 --> 01:23:38,000
你如果这个连接失败的话

3349
01:23:38,000 --> 01:23:39,000
它会在后台自动重拾五次

3350
01:23:39,000 --> 01:23:40,000
如果五次之后

3351
01:23:40,000 --> 01:23:41,000
都还是无法访问的话

3352
01:23:41,000 --> 01:23:43,000
它就不管了

3353
01:23:43,000 --> 01:23:44,000
它就继续运行

3354
01:23:44,000 --> 01:23:45,000
所以这里面有个非常

3355
01:23:45,000 --> 01:23:46,000
简单直白的问题了

3356
01:23:46,000 --> 01:23:46,000
就是说

3357
01:23:46,000 --> 01:23:49,000
如果它 OCISP 检查默认

3358
01:23:49,000 --> 01:23:50,000
就是说如果网络不通的情况

3359
01:23:50,000 --> 01:23:53,000
它也能够就放过不检查

3360
01:23:53,000 --> 01:23:53,000
然后就让这次

3361
01:23:53,000 --> 01:23:55,000
先启动以后再说

3362
01:23:55,000 --> 01:23:56,000
它是不会影响用户使用的

3363
01:23:56,000 --> 01:23:58,000
为什么这次会导致

3364
01:23:58,000 --> 01:23:59,000
这么大规模的

3365
01:23:59,000 --> 01:24:00,000
又不能启动呢

3366
01:24:00,000 --> 01:24:01,000
它的问题在于

3367
01:24:01,000 --> 01:24:02,000
它没有服务器

3368
01:24:02,000 --> 01:24:04,000
直接说我不行了

3369
01:24:04,000 --> 01:24:05,000
而是服务器被 DDoS 了

3370
01:24:05,000 --> 01:24:06,000
没有响应

3371
01:24:06,000 --> 01:24:07,000
所以说在等着

3372
01:24:07,000 --> 01:24:08,000
它服务器说话

3373
01:24:08,000 --> 01:24:09,000
OK

3374
01:24:09,000 --> 01:24:10,000
这个代码就非常傻

3375
01:24:10,000 --> 01:24:11,000
如果说你正常

3376
01:24:11,000 --> 01:24:12,000
加个什么

3377
01:24:12,000 --> 01:24:12,000
加个 timers

3378
01:24:12,000 --> 01:24:13,000
有一个 timers

3379
01:24:13,000 --> 01:24:14,000
比如说五秒之后

3380
01:24:14,000 --> 01:24:15,000
还没有成功

3381
01:24:15,000 --> 01:24:16,000
你就直接放弃了

3382
01:24:16,000 --> 01:24:17,000
其实也不会导致

3383
01:24:17,000 --> 01:24:18,000
这么多的问题

3384
01:24:18,000 --> 01:24:18,000
对吧

3385
01:24:18,000 --> 01:24:19,000
但实际上等待五秒

3386
01:24:19,000 --> 01:24:21,000
也是相当长的一段时间

3387
01:24:21,000 --> 01:24:22,000
timers 应该是有的

3388
01:24:22,000 --> 01:24:23,000
我觉得应该不止五秒

3389
01:24:23,000 --> 01:24:25,000
可能那个 timers

3390
01:24:25,000 --> 01:24:26,000
我没有实际遇到

3391
01:24:26,000 --> 01:24:27,000
它真正当机的

3392
01:24:27,000 --> 01:24:28,000
那个时间

3393
01:24:28,000 --> 01:24:28,000
那个事情了

3394
01:24:28,000 --> 01:24:29,000
就是我没有观测到

3395
01:24:29,000 --> 01:24:30,000
它的倒计是多少秒

3396
01:24:30,000 --> 01:24:32,000
但是应该不止五秒

3397
01:24:32,000 --> 01:24:34,000
而且我觉得可能是

3398
01:24:34,000 --> 01:24:34,000
真的是一个

3399
01:24:34,000 --> 01:24:35,000
第一世界

3400
01:24:35,000 --> 01:24:36,000
没有考虑到的问题

3401
01:24:36,000 --> 01:24:37,000
对于苹果的工程师

3402
01:24:37,000 --> 01:24:39,000
坐在苹果的网络里面

3403
01:24:39,000 --> 01:24:40,000
从来都不会觉得

3404
01:24:40,000 --> 01:24:41,000
执行一个网络请求

3405
01:24:41,000 --> 01:24:43,000
那个堵塞的执行

3406
01:24:43,000 --> 01:24:44,000
一个网络请求会

3407
01:24:44,000 --> 01:24:44,000
还能失败

3408
01:24:44,000 --> 01:24:45,000
对还能失败

3409
01:24:45,000 --> 01:24:46,000
还能卡住

3410
01:24:46,000 --> 01:24:48,000
这不就几毫秒的事情

3411
01:24:48,000 --> 01:24:49,000
有什么关系呢

3412
01:24:49,000 --> 01:24:50,000
对关系就是说

3413
01:24:50,000 --> 01:24:51,000
如果它是直接失败

3414
01:24:51,000 --> 01:24:52,000
反而对了

3415
01:24:52,000 --> 01:24:53,000
反而如果是直接失败

3416
01:24:53,000 --> 01:24:54,000
就是网络不通的情况下

3417
01:24:54,000 --> 01:24:55,000
它反而也不会出

3418
01:24:55,000 --> 01:24:56,000
什么大大问题

3419
01:24:56,000 --> 01:24:56,000
它属于这种

3420
01:24:56,000 --> 01:24:58,000
对直接 502 之类的

3421
01:24:58,000 --> 01:24:59,000
就可以了

3422
01:24:59,000 --> 01:25:01,000
对但这是属于那种

3423
01:25:01,000 --> 01:25:01,000
就是它那边

3424
01:25:01,000 --> 01:25:02,000
那边服务器响应

3425
01:25:02,000 --> 01:25:03,000
非常非常慢

3426
01:25:03,000 --> 01:25:05,000
我还真正在努力中

3427
01:25:05,000 --> 01:25:06,000
对吧

3428
01:25:06,000 --> 01:25:07,000
你不要放弃

3429
01:25:07,000 --> 01:25:08,000
这种感觉

3430
01:25:08,000 --> 01:25:08,000
就很

3431
01:25:08,000 --> 01:25:10,000
但即便是这样

3432
01:25:10,000 --> 01:25:12,000
即便是这种失败场景

3433
01:25:12,000 --> 01:25:12,000
它如果说

3434
01:25:12,000 --> 01:25:14,000
它是就是这个 OCSP

3435
01:25:14,000 --> 01:25:14,000
它是一个

3436
01:25:14,000 --> 01:25:15,000
我们说什么

3437
01:25:15,000 --> 01:25:16,000
叫做异步的

3438
01:25:16,000 --> 01:25:17,000
就是说它

3439
01:25:17,000 --> 01:25:18,000
它检查 OCSP 和

3440
01:25:18,000 --> 01:25:21,000
和这个让你启动 APP

3441
01:25:21,000 --> 01:25:21,000
它是两个

3442
01:25:21,000 --> 01:25:22,000
不需要

3443
01:25:22,000 --> 01:25:24,000
以前会有依赖关系的

3444
01:25:24,000 --> 01:25:25,000
这个逻辑步骤

3445
01:25:25,000 --> 01:25:26,000
它其实也不会导致

3446
01:25:26,000 --> 01:25:27,000
这个问题

3447
01:25:27,000 --> 01:25:27,000
对吧

3448
01:25:27,000 --> 01:25:28,000
就是说你启动是启动了

3449
01:25:28,000 --> 01:25:29,000
你检查检查

3450
01:25:29,000 --> 01:25:30,000
你可以下次再

3451
01:25:30,000 --> 01:25:32,000
告诉我这个结果

3452
01:25:32,000 --> 01:25:33,000
或者说你检查好了之后

3453
01:25:33,000 --> 01:25:34,000
你弹个小窗出来说

3454
01:25:34,000 --> 01:25:36,000
这个程序刚才我检查失败了

3455
01:25:36,000 --> 01:25:37,000
但是你已经把它打开了

3456
01:25:37,000 --> 01:25:38,000
我现在警告你说

3457
01:25:38,000 --> 01:25:39,000
这个已经被吊销了

3458
01:25:39,000 --> 01:25:39,000
可能有问题

3459
01:25:39,000 --> 01:25:40,000
你赶紧推出来

3460
01:25:40,000 --> 01:25:40,000
对吧

3461
01:25:40,000 --> 01:25:41,000
也是可以的

3462
01:25:41,000 --> 01:25:41,000
对

3463
01:25:41,000 --> 01:25:43,000
但是它连这个也没有做

3464
01:25:43,000 --> 01:25:45,000
对

3465
01:25:45,000 --> 01:25:46,000
而且这个问题的话

3466
01:25:46,000 --> 01:25:47,000
可能导致了

3467
01:25:47,000 --> 01:25:49,000
在国内绝大部分用户

3468
01:25:49,000 --> 01:25:50,000
他觉得 Mac 缓慢的

3469
01:25:50,000 --> 01:25:51,000
一个很大的问题

3470
01:25:51,000 --> 01:25:53,000
所以我们会打开我们的 Mac

3471
01:25:53,000 --> 01:25:54,000
然后点开一个 app

3472
01:25:54,000 --> 01:25:55,000
或者看着图标

3473
01:25:55,000 --> 01:25:56,000
在那弹弹弹弹弹

3474
01:25:56,000 --> 01:25:57,000
弹个 10 秒

3475
01:25:57,000 --> 01:25:58,000
其实一直在跳

3476
01:25:58,000 --> 01:25:58,000
对吧

3477
01:25:58,000 --> 01:25:58,000
对

3478
01:25:58,000 --> 01:26:00,000
不是一个很常

3479
01:26:00,000 --> 01:26:01,000
很罕见的事情

3480
01:26:01,000 --> 01:26:03,000
就是在检查这个证书

3481
01:26:03,000 --> 01:26:03,000
它缓慢不少

3482
01:26:03,000 --> 01:26:04,000
网络不少

3483
01:26:04,000 --> 01:26:05,000
对

3484
01:26:05,000 --> 01:26:05,000
所以就是说

3485
01:26:05,000 --> 01:26:06,000
这本质上是一个

3486
01:26:06,000 --> 01:26:08,000
软件架构设计的失误

3487
01:26:08,000 --> 01:26:09,000
再加上这个网络

3488
01:26:09,000 --> 01:26:10,000
这个技术设施

3489
01:26:10,000 --> 01:26:12,000
因为一些外部

3490
01:26:12,000 --> 01:26:13,000
或者是不可预测的因素

3491
01:26:13,000 --> 01:26:15,000
导致变得缓慢

3492
01:26:15,000 --> 01:26:16,000
而不是完全不可用的情况下

3493
01:26:16,000 --> 01:26:19,000
双重压力导致的一个

3494
01:26:19,000 --> 01:26:21,000
用户使用体验的重大的问题

3495
01:26:21,000 --> 01:26:22,000
对 是的

3496
01:26:22,000 --> 01:26:23,000
所以就是还是要把

3497
01:26:23,000 --> 01:26:24,000
这个苹果的这个架构的

3498
01:26:24,000 --> 01:26:25,000
负责这块架构的人

3499
01:26:25,000 --> 01:26:26,000
拖出来打板子才行

3500
01:26:26,000 --> 01:26:28,000
对 我觉得很可能就是

3501
01:26:28,000 --> 01:26:30,000
之前没有想过这件事情

3502
01:26:30,000 --> 01:26:30,000
在他们那儿

3503
01:26:30,000 --> 01:26:32,000
从来没有遇到过这件事情

3504
01:26:32,000 --> 01:26:33,000
那这个坑埋在那儿

3505
01:26:33,000 --> 01:26:34,000
就一直没人管

3506
01:26:34,000 --> 01:26:35,000
其实这个坑

3507
01:26:35,000 --> 01:26:37,000
应该埋了相当长的时间了

3508
01:26:37,000 --> 01:26:38,000
很大

3509
01:26:38,000 --> 01:26:39,000
很多年以前

3510
01:26:39,000 --> 01:26:41,000
就已经是这么一个工作方式

3511
01:26:41,000 --> 01:26:42,000
这引入 LCSP

3512
01:26:42,000 --> 01:26:43,000
我记得应该是至少

3513
01:26:43,000 --> 01:26:45,000
可能是三到五个版本以前了吧

3514
01:26:45,000 --> 01:26:46,000
大版本以前了

3515
01:26:46,000 --> 01:26:47,000
对 我作为开发者

3516
01:26:47,000 --> 01:26:48,000
我自己观察

3517
01:26:48,000 --> 01:26:49,000
后台情绪

3518
01:26:49,000 --> 01:26:50,000
我早就是看到

3519
01:26:50,000 --> 01:26:51,000
后台不断的

3520
01:26:51,000 --> 01:26:52,000
就是 LCSP 的请求

3521
01:26:52,000 --> 01:26:53,000
会有在

3522
01:26:53,000 --> 01:26:54,000
一直在进行的

3523
01:26:54,000 --> 01:26:56,000
LCSP 是会直接

3524
01:26:56,000 --> 01:26:57,000
发到开发者那里去的吗

3525
01:26:57,000 --> 01:26:58,000
不是会发到开发者

3526
01:26:58,000 --> 01:27:00,000
它发的应该是

3527
01:27:00,000 --> 01:27:02,000
证书的那个颁发者那里去查

3528
01:27:02,000 --> 01:27:02,000
应该是

3529
01:27:02,000 --> 01:27:03,000
我从设置上面

3530
01:27:03,000 --> 01:27:04,000
看网络流量

3531
01:27:04,000 --> 01:27:05,000
我是能看到它的频次的

3532
01:27:05,000 --> 01:27:06,000
你是从中间人的角度去看它

3533
01:27:06,000 --> 01:27:07,000
对 是的

3534
01:27:07,000 --> 01:27:08,000
我能看到它的请求

3535
01:27:08,000 --> 01:27:09,000
然后因为它那个请求

3536
01:27:09,000 --> 01:27:10,000
本身是 HTP

3537
01:27:10,000 --> 01:27:11,000
是明文的

3538
01:27:11,000 --> 01:27:12,000
所以说你能看到它们的信息

3539
01:27:12,000 --> 01:27:14,000
所以这也是导致这一次

3540
01:27:14,000 --> 01:27:16,000
大家对它在隐私方面的

3541
01:27:16,000 --> 01:27:16,000
一个泄露上的

3542
01:27:16,000 --> 01:27:17,000
一个批评的一个原因

3543
01:27:17,000 --> 01:27:18,000
对 刚才我们说的

3544
01:27:18,000 --> 01:27:19,000
就是说它是导致不可用

3545
01:27:19,000 --> 01:27:20,000
这个还是说

3546
01:27:20,000 --> 01:27:22,000
是一个用户体验的问题

3547
01:27:22,000 --> 01:27:23,000
可能相对来说

3548
01:27:23,000 --> 01:27:26,000
如果它把这个架构改一下

3549
01:27:26,000 --> 01:27:27,000
比如说它做成异步的

3550
01:27:27,000 --> 01:27:27,000
对吧

3551
01:27:27,000 --> 01:27:28,000
不需要跟那个

3552
01:27:28,000 --> 01:27:29,000
启动这个

3553
01:27:29,000 --> 01:27:31,000
启动应用程序之间

3554
01:27:31,000 --> 01:27:32,000
产生一个绑定关系

3555
01:27:32,000 --> 01:27:33,000
那可能也还好

3556
01:27:33,000 --> 01:27:36,000
但可能这更要紧的是

3557
01:27:36,000 --> 01:27:38,000
就是说它在 LCSP 检查过程中

3558
01:27:38,000 --> 01:27:40,000
暴露出来的一些

3559
01:27:40,000 --> 01:27:42,000
更侵犯隐私的事情

3560
01:27:42,000 --> 01:27:43,000
比如说它说我们

3561
01:27:43,000 --> 01:27:44,000
我现在不太清楚

3562
01:27:44,000 --> 01:27:45,000
是不是这么一回事

3563
01:27:45,000 --> 01:27:47,000
我看到的这个说法是说

3564
01:27:47,000 --> 01:27:48,000
它在 LCSP 请求

3565
01:27:48,000 --> 01:27:51,000
是通过 HTTP 明文发送的

3566
01:27:51,000 --> 01:27:52,000
没有走 HTPS

3567
01:27:52,000 --> 01:27:54,000
这个跟我们目前主流的

3568
01:27:54,000 --> 01:27:56,000
只要是通过

3569
01:27:56,000 --> 01:27:57,000
互联网传输的信息

3570
01:27:57,000 --> 01:27:59,000
都尽可能加密的方式来做

3571
01:27:59,000 --> 01:28:01,000
这种做法是违背的

3572
01:28:01,000 --> 01:28:02,000
就是其一

3573
01:28:02,000 --> 01:28:03,000
第二就是说

3574
01:28:03,000 --> 01:28:04,000
它在明文的

3575
01:28:04,000 --> 01:28:06,000
LCSP 的请求里面

3576
01:28:06,000 --> 01:28:09,000
还附带了你

3577
01:28:09,000 --> 01:28:10,000
就是它要检查

3578
01:28:10,000 --> 01:28:11,000
那个 APP 的一个 HACI

3579
01:28:11,000 --> 01:28:12,000
这个所谓的 HACI

3580
01:28:12,000 --> 01:28:14,000
就是说可以唯一判定

3581
01:28:14,000 --> 01:28:16,000
说你是否在

3582
01:28:16,000 --> 01:28:16,000
不是 HACI

3583
01:28:16,000 --> 01:28:17,000
是 SN

3584
01:28:17,000 --> 01:28:18,000
是那个证书的 SN

3585
01:28:18,000 --> 01:28:19,000
证书的 SN

3586
01:28:19,000 --> 01:28:20,000
是证书的序列号对吧

3587
01:28:20,000 --> 01:28:21,000
对 是的

3588
01:28:21,000 --> 01:28:22,000
但是这个序列号是

3589
01:28:22,000 --> 01:28:23,000
证书唯一的

3590
01:28:23,000 --> 01:28:24,000
对

3591
01:28:24,000 --> 01:28:25,000
假设我有一个证书

3592
01:28:25,000 --> 01:28:27,000
和 APP 之间的彩虹表的话

3593
01:28:27,000 --> 01:28:28,000
我是可以反查出来

3594
01:28:28,000 --> 01:28:29,000
这是哪个 APP 的

3595
01:28:29,000 --> 01:28:30,000
都是公开信息

3596
01:28:30,000 --> 01:28:30,000
对吧

3597
01:28:30,000 --> 01:28:31,000
比如说 Surge

3598
01:28:31,000 --> 01:28:32,000
它会有一个 SN

3599
01:28:32,000 --> 01:28:32,000
对吧

3600
01:28:32,000 --> 01:28:33,000
它发了这个 SN 过去

3601
01:28:33,000 --> 01:28:34,000
但如果我只要

3602
01:28:34,000 --> 01:28:36,000
假设我是这个 SP

3603
01:28:36,000 --> 01:28:37,000
或者任何一个中间人

3604
01:28:37,000 --> 01:28:38,000
网络中间人

3605
01:28:38,000 --> 01:28:39,000
我观察到了

3606
01:28:39,000 --> 01:28:41,000
这个明文的 HTPS 的流量

3607
01:28:41,000 --> 01:28:42,000
然后我看到的是

3608
01:28:42,000 --> 01:28:44,000
一个 IP 地址

3609
01:28:44,000 --> 01:28:45,000
就是这个原 IP 地址

3610
01:28:45,000 --> 01:28:46,000
它发向了

3611
01:28:46,000 --> 01:28:47,000
苹果的 LCSP 的

3612
01:28:47,000 --> 01:28:47,000
服务器

3613
01:28:47,000 --> 01:28:49,000
有一个明文的包

3614
01:28:49,000 --> 01:28:50,000
包里面含有 SN

3615
01:28:50,000 --> 01:28:52,000
我可以百分之百

3616
01:28:52,000 --> 01:28:53,000
精确的都是结论说

3617
01:28:53,000 --> 01:28:54,000
这个 IP 的人

3618
01:28:54,000 --> 01:28:55,000
在用 Surge

3619
01:28:55,000 --> 01:28:56,000
开发者证书

3620
01:28:56,000 --> 01:28:57,000
签发的东西

3621
01:28:57,000 --> 01:28:57,000
对

3622
01:28:57,000 --> 01:28:58,000
但是 Surge 开发者证书

3623
01:28:58,000 --> 01:28:59,000
因为它只签发了

3624
01:28:59,000 --> 01:28:59,000
两个东西

3625
01:28:59,000 --> 01:29:01,000
就是 Surge 和 LPass

3626
01:29:01,000 --> 01:29:02,000
这两个 APP

3627
01:29:02,000 --> 01:29:03,000
那它肯定是在用

3628
01:29:03,000 --> 01:29:04,000
其中这两个之一

3629
01:29:04,000 --> 01:29:04,000
对吧

3630
01:29:04,000 --> 01:29:05,000
对 没错

3631
01:29:05,000 --> 01:29:08,000
然后由于绝大部分的

3632
01:29:08,000 --> 01:29:10,000
我们刨开什么微软

3633
01:29:10,000 --> 01:29:11,000
那些什么大公司

3634
01:29:11,000 --> 01:29:13,000
就正常一些中小开发者

3635
01:29:13,000 --> 01:29:14,000
它可能一个证书

3636
01:29:14,000 --> 01:29:15,000
就只开发一个 APP

3637
01:29:15,000 --> 01:29:15,000
其实我们可以

3638
01:29:15,000 --> 01:29:16,000
基本上可以

3639
01:29:16,000 --> 01:29:17,000
精确的

3640
01:29:17,000 --> 01:29:17,000
定位到这个人

3641
01:29:17,000 --> 01:29:18,000
是不是在用 Surge

3642
01:29:18,000 --> 01:29:19,000
或者这个人

3643
01:29:19,000 --> 01:29:20,000
是不是在用某某某

3644
01:29:20,000 --> 01:29:20,000
什么软件

3645
01:29:20,000 --> 01:29:21,000
对吧

3646
01:29:21,000 --> 01:29:22,000
有些比较稍微敏感

3647
01:29:22,000 --> 01:29:23,000
一点的软件

3648
01:29:23,000 --> 01:29:24,000
就是我们是可以

3649
01:29:24,000 --> 01:29:26,000
明确的知道这件事情的

3650
01:29:26,000 --> 01:29:26,000
对 是的

3651
01:29:26,000 --> 01:29:27,000
所以从这个角度

3652
01:29:27,000 --> 01:29:28,000
他来讲

3653
01:29:28,000 --> 01:29:30,000
这个明文的 LCSP 的请求

3654
01:29:30,000 --> 01:29:31,000
它的确是泄露了

3655
01:29:31,000 --> 01:29:32,000
用户的隐私

3656
01:29:32,000 --> 01:29:33,000
这个说法是没错的

3657
01:29:33,000 --> 01:29:33,000
对吧

3658
01:29:33,000 --> 01:29:35,000
对 这个说法是没错的

3659
01:29:35,000 --> 01:29:36,000
我们也看到

3660
01:29:36,000 --> 01:29:37,000
就是这个

3661
01:29:37,000 --> 01:29:38,000
但这是一篇

3662
01:29:38,000 --> 01:29:40,000
这个是一篇

3663
01:29:40,000 --> 01:29:41,000
这个博客里面

3664
01:29:41,000 --> 01:29:42,000
他有专门去解释

3665
01:29:42,000 --> 01:29:43,000
这个整个

3666
01:29:43,000 --> 01:29:44,000
这个底层原理

3667
01:29:44,000 --> 01:29:45,000
怎么回事

3668
01:29:45,000 --> 01:29:45,000
我会把这个

3669
01:29:45,000 --> 01:29:47,000
这期的 show notes 里面

3670
01:29:47,000 --> 01:29:48,000
会贴出这篇

3671
01:29:48,000 --> 01:29:49,000
这文章的这个连接

3672
01:29:49,000 --> 01:29:50,000
大家可以去

3673
01:29:50,000 --> 01:29:50,000
如果感兴趣

3674
01:29:50,000 --> 01:29:51,000
这个技术世界

3675
01:29:51,000 --> 01:29:52,000
可以去点进去来看

3676
01:29:52,000 --> 01:29:53,000
但我们也看到

3677
01:29:53,000 --> 01:29:54,000
就是隔了可能几天之后

3678
01:29:54,000 --> 01:29:56,000
苹果出了一个官方的

3679
01:29:56,000 --> 01:29:57,000
算是一个回应吧

3680
01:29:57,000 --> 01:29:58,000
他在他的这个

3681
01:29:58,000 --> 01:29:59,000
他的这个 support 的

3682
01:29:59,000 --> 01:30:00,000
配置里面

3683
01:30:00,000 --> 01:30:01,000
叫做 Safely Open Apps

3684
01:30:01,000 --> 01:30:02,000
On Your Mac

3685
01:30:02,000 --> 01:30:02,000
就是说

3686
01:30:02,000 --> 01:30:04,000
在你的 Mac

3687
01:30:04,000 --> 01:30:05,000
在安全的

3688
01:30:05,000 --> 01:30:06,000
打开启应用程序里面

3689
01:30:06,000 --> 01:30:07,000
最下面

3690
01:30:07,000 --> 01:30:08,000
加了一个 section

3691
01:30:08,000 --> 01:30:09,000
叫做

3692
01:30:09,000 --> 01:30:10,000
叫做这个

3693
01:30:10,000 --> 01:30:12,000
Piracy Protection

3694
01:30:12,000 --> 01:30:12,000
隐私保护

3695
01:30:12,000 --> 01:30:13,000
他说

3696
01:30:13,000 --> 01:30:14,000
他做了加了一段话

3697
01:30:14,000 --> 01:30:15,000
他给了三个方法

3698
01:30:15,000 --> 01:30:15,000
他说

3699
01:30:15,000 --> 01:30:17,000
在明年

3700
01:30:17,000 --> 01:30:19,000
我们会增加几个变化

3701
01:30:19,000 --> 01:30:20,000
一个是说

3702
01:30:20,000 --> 01:30:21,000
通过加密的协议

3703
01:30:21,000 --> 01:30:22,000
去传输这个

3704
01:30:22,000 --> 01:30:24,000
这个 OCSP 的请求

3705
01:30:24,000 --> 01:30:24,000
对吧

3706
01:30:24,000 --> 01:30:25,000
这是其一

3707
01:30:25,000 --> 01:30:26,000
第二就是说

3708
01:30:26,000 --> 01:30:28,000
他有更强的保护措施

3709
01:30:28,000 --> 01:30:29,000
去解决

3710
01:30:29,000 --> 01:30:29,000
刚才我们讲的

3711
01:30:29,000 --> 01:30:30,000
就是说

3712
01:30:30,000 --> 01:30:31,000
如果服务端不可用

3713
01:30:31,000 --> 01:30:33,000
就是各种失败的原因

3714
01:30:33,000 --> 01:30:34,000
出现

3715
01:30:34,000 --> 01:30:36,000
就尽量避免

3716
01:30:36,000 --> 01:30:38,000
由于服务器

3717
01:30:38,000 --> 01:30:39,000
或者网络不可用

3718
01:30:39,000 --> 01:30:40,000
而导致不法启动

3719
01:30:40,000 --> 01:30:41,000
这个应用的情况

3720
01:30:41,000 --> 01:30:42,000
对吧

3721
01:30:42,000 --> 01:30:43,000
然后就是说

3722
01:30:43,000 --> 01:30:44,000
还给用户一个选项

3723
01:30:44,000 --> 01:30:45,000
说用户可以

3724
01:30:45,000 --> 01:30:45,000
opt out

3725
01:30:45,000 --> 01:30:46,000
就是可以

3726
01:30:46,000 --> 01:30:48,000
不要这些安全保护措施

3727
01:30:48,000 --> 01:30:50,000
就彻底的保护这个隐私

3728
01:30:50,000 --> 01:30:50,000
对吧

3729
01:30:50,000 --> 01:30:51,000
我就是要罗温

3730
01:30:51,000 --> 01:30:52,000
我就是要像

3731
01:30:52,000 --> 01:30:53,000
要像 Windows 一样

3732
01:30:53,000 --> 01:30:54,000
对

3733
01:30:54,000 --> 01:30:55,000
我就不想检查

3734
01:30:55,000 --> 01:30:55,000
对吧

3735
01:30:55,000 --> 01:30:56,000
我就不想给你

3736
01:30:56,000 --> 01:30:57,000
苹果知道

3737
01:30:57,000 --> 01:30:58,000
我在运行什么样程序

3738
01:30:58,000 --> 01:30:59,000
虽然说这个说法

3739
01:30:59,000 --> 01:31:01,000
我觉得有点奇怪

3740
01:31:01,000 --> 01:31:02,000
就是说

3741
01:31:02,000 --> 01:31:03,000
你都在用苹果的软件

3742
01:31:03,000 --> 01:31:04,000
硬件系统了

3743
01:31:04,000 --> 01:31:05,000
你不想让苹果知道

3744
01:31:05,000 --> 01:31:06,000
这个是不可能的

3745
01:31:06,000 --> 01:31:07,000
对吧

3746
01:31:07,000 --> 01:31:08,000
苹果如果要想知道

3747
01:31:08,000 --> 01:31:09,000
它总有各种的方法知道

3748
01:31:09,000 --> 01:31:10,000
你跟他

3749
01:31:10,000 --> 01:31:11,000
你在这里做文章

3750
01:31:11,000 --> 01:31:12,000
是没有用的

3751
01:31:12,000 --> 01:31:14,000
但是我们来看

3752
01:31:14,000 --> 01:31:15,000
就是虽然苹果

3753
01:31:15,000 --> 01:31:15,000
还没有公布

3754
01:31:15,000 --> 01:31:17,000
他说他具体的解决方案

3755
01:31:17,000 --> 01:31:17,000
是什么

3756
01:31:17,000 --> 01:31:17,000
那我们

3757
01:31:17,000 --> 01:31:19,000
我们这是一个

3758
01:31:19,000 --> 01:31:20,000
毕竟是个技术节目

3759
01:31:20,000 --> 01:31:21,000
我们来想想

3760
01:31:21,000 --> 01:31:21,000
有哪些方法

3761
01:31:21,000 --> 01:31:22,000
可以避免这个问题

3762
01:31:22,000 --> 01:31:23,000
那首先来看

3763
01:31:23,000 --> 01:31:24,000
我们先说

3764
01:31:24,000 --> 01:31:25,000
刚才也提到了

3765
01:31:25,000 --> 01:31:25,000
就是说

3766
01:31:25,000 --> 01:31:27,000
把这个 OCSP 检查

3767
01:31:27,000 --> 01:31:28,000
和 app 启动

3768
01:31:28,000 --> 01:31:29,000
的这个两个过程

3769
01:31:29,000 --> 01:31:30,000
独立开来

3770
01:31:30,000 --> 01:31:31,000
不要做成是

3771
01:31:31,000 --> 01:31:32,000
像

3772
01:31:32,000 --> 01:31:34,000
如果因为 OCSP 检查失败

3773
01:31:34,000 --> 01:31:34,000
就

3774
01:31:34,000 --> 01:31:35,000
就是没有结果

3775
01:31:35,000 --> 01:31:37,000
或者是还在进行中

3776
01:31:37,000 --> 01:31:38,000
就要等它结果

3777
01:31:38,000 --> 01:31:38,000
才能成功

3778
01:31:38,000 --> 01:31:39,000
这个明显是不合理的

3779
01:31:39,000 --> 01:31:40,000
对吧

3780
01:31:40,000 --> 01:31:40,000
对

3781
01:31:40,000 --> 01:31:41,000
所以就是要

3782
01:31:41,000 --> 01:31:42,000
它

3783
01:31:42,000 --> 01:31:43,000
OCSP 它是一个

3784
01:31:43,000 --> 01:31:44,000
应该是一个异步

3785
01:31:44,000 --> 01:31:45,000
在背景

3786
01:31:45,000 --> 01:31:46,000
后台去运行的

3787
01:31:46,000 --> 01:31:47,000
一个东西

3788
01:31:47,000 --> 01:31:47,000
然后前台

3789
01:31:47,000 --> 01:31:49,000
应用在

3790
01:31:49,000 --> 01:31:50,000
还是正常执行

3791
01:31:50,000 --> 01:31:51,000
不用等待任何网络请求

3792
01:31:51,000 --> 01:31:52,000
然后后来

3793
01:31:52,000 --> 01:31:54,000
如果你 OCSP 检查结果

3794
01:31:54,000 --> 01:31:55,000
你告诉我说

3795
01:31:55,000 --> 01:31:56,000
要不就下次不能用

3796
01:31:56,000 --> 01:31:57,000
或者是你这次不能用

3797
01:31:57,000 --> 01:31:58,000
你直接弹个窗

3798
01:31:58,000 --> 01:31:59,000
或者是给个什么提示

3799
01:31:59,000 --> 01:32:00,000
然后把那个

3800
01:32:00,000 --> 01:32:02,000
那个 app freeze 住

3801
01:32:02,000 --> 01:32:02,000
也可以

3802
01:32:02,000 --> 01:32:02,000
对吧

3803
01:32:02,000 --> 01:32:03,000
或者是强行

3804
01:32:03,000 --> 01:32:04,000
杀掉它退出

3805
01:32:04,000 --> 01:32:05,000
给个提示也行

3806
01:32:05,000 --> 01:32:07,000
这种方法就比较简单

3807
01:32:07,000 --> 01:32:08,000
其实我更关心的

3808
01:32:08,000 --> 01:32:09,000
就是说

3809
01:32:09,000 --> 01:32:10,000
那是否

3810
01:32:10,000 --> 01:32:11,000
或者说如何通过一个

3811
01:32:11,000 --> 01:32:12,000
加密的协议

3812
01:32:12,000 --> 01:32:14,000
来传输这个

3813
01:32:14,000 --> 01:32:15,000
OCSP 的检查

3814
01:32:15,000 --> 01:32:15,000
或者说

3815
01:32:15,000 --> 01:32:16,000
从技术上

3816
01:32:16,000 --> 01:32:17,000
有没有可能就说

3817
01:32:17,000 --> 01:32:18,000
就是哪怕说

3818
01:32:18,000 --> 01:32:19,000
我用明文传输

3819
01:32:19,000 --> 01:32:22,000
但是不会泄露用户的

3820
01:32:22,000 --> 01:32:24,000
在用哪个证书的

3821
01:32:24,000 --> 01:32:24,000
或者说

3822
01:32:24,000 --> 01:32:25,000
在用哪个 app 的

3823
01:32:25,000 --> 01:32:26,000
这么一个信息

3824
01:32:26,000 --> 01:32:28,000
其实这个问题

3825
01:32:28,000 --> 01:32:29,000
它之所以

3826
01:32:29,000 --> 01:32:31,000
就是 OCSP 有这个问题

3827
01:32:31,000 --> 01:32:32,000
就是因为

3828
01:32:32,000 --> 01:32:32,000
OCSP 本身

3829
01:32:32,000 --> 01:32:33,000
最早就是为

3830
01:32:33,000 --> 01:32:36,000
htps 这个请求来设计的

3831
01:32:36,000 --> 01:32:36,000
因为

3832
01:32:36,000 --> 01:32:38,000
我当我去访问

3833
01:32:38,000 --> 01:32:39,000
htps 的时候

3834
01:32:39,000 --> 01:32:40,000
这是一个加密连接

3835
01:32:40,000 --> 01:32:41,000
我要去验证

3836
01:32:41,000 --> 01:32:42,000
这个证书是否有效

3837
01:32:42,000 --> 01:32:43,000
然后我要去执行

3838
01:32:43,000 --> 01:32:45,000
OCSP 请求

3839
01:32:45,000 --> 01:32:45,000
如果这个

3840
01:32:45,000 --> 01:32:46,000
OCSP 请求

3841
01:32:46,000 --> 01:32:48,000
也是 htps 的话

3842
01:32:48,000 --> 01:32:49,000
那它这个请求

3843
01:32:49,000 --> 01:32:50,000
又该谁来检查呢

3844
01:32:50,000 --> 01:32:51,000
鸡和蛋的问题

3845
01:32:51,000 --> 01:32:52,000
这个说法

3846
01:32:52,000 --> 01:32:53,000
当然我觉得逻辑上

3847
01:32:53,000 --> 01:32:53,000
是可以理解

3848
01:32:53,000 --> 01:32:54,000
但我觉得

3849
01:32:54,000 --> 01:32:56,000
如果我们不去追求

3850
01:32:56,000 --> 01:32:57,000
那么的百分之百完美的话

3851
01:32:57,000 --> 01:32:58,000
这个我觉得

3852
01:32:58,000 --> 01:32:59,000
也不是不可以接受

3853
01:32:59,000 --> 01:33:00,000
就是如果说

3854
01:33:00,000 --> 01:33:01,000
OCSP 的请求

3855
01:33:01,000 --> 01:33:03,000
它不是每次都要检查的话

3856
01:33:03,000 --> 01:33:04,000
就是如果它可以像

3857
01:33:04,000 --> 01:33:06,000
就是网页的 htps 的检查

3858
01:33:06,000 --> 01:33:06,000
也可以异步的话

3859
01:33:06,000 --> 01:33:08,000
它完全可以就是说

3860
01:33:08,000 --> 01:33:09,000
我检查 OCSP 的

3861
01:33:09,000 --> 01:33:11,000
那个 htps 请求

3862
01:33:11,000 --> 01:33:12,000
的 OCSP

3863
01:33:12,000 --> 01:33:13,000
我可以不做

3864
01:33:13,000 --> 01:33:14,000
或者说是我等下次

3865
01:33:14,000 --> 01:33:15,000
或者说等

3866
01:33:15,000 --> 01:33:16,000
这个

3867
01:33:16,000 --> 01:33:17,000
或者异步来做

3868
01:33:17,000 --> 01:33:18,000
也可以吧

3869
01:33:18,000 --> 01:33:19,000
至少让我保证

3870
01:33:19,000 --> 01:33:20,000
这一次的 OCSP 请求

3871
01:33:20,000 --> 01:33:21,000
是可以完成的

3872
01:33:21,000 --> 01:33:22,000
然后我们再来看你

3873
01:33:22,000 --> 01:33:23,000
那个 OCSP 请求

3874
01:33:23,000 --> 01:33:24,000
就是这个

3875
01:33:24,000 --> 01:33:25,000
就是它是两个英国的

3876
01:33:25,000 --> 01:33:26,000
OCSP 请求

3877
01:33:26,000 --> 01:33:28,000
它不需要一定是

3878
01:33:28,000 --> 01:33:29,000
同时完成吧

3879
01:33:29,000 --> 01:33:29,000
对

3880
01:33:29,000 --> 01:33:31,000
这个从我的理解上来说的话

3881
01:33:31,000 --> 01:33:33,000
是当时是在 1999 年

3882
01:33:33,000 --> 01:33:34,000
那个时候

3883
01:33:34,000 --> 01:33:35,000
对隐私的保护的重要性

3884
01:33:35,000 --> 01:33:37,000
没有现在这么强

3885
01:33:37,000 --> 01:33:38,000
然后本身的话

3886
01:33:38,000 --> 01:33:40,000
你通过访问 htps 的话

3887
01:33:40,000 --> 01:33:41,000
你通过在链路上

3888
01:33:41,000 --> 01:33:42,000
已经 SNI

3889
01:33:42,000 --> 01:33:43,000
已经泄露出

3890
01:33:43,000 --> 01:33:44,000
你的那个访问的域名了

3891
01:33:44,000 --> 01:33:45,000
所以说这个事情

3892
01:33:45,000 --> 01:33:46,000
你访问哪个网站

3893
01:33:46,000 --> 01:33:47,000
这些已经暴露了

3894
01:33:47,000 --> 01:33:48,000
对加不加密

3895
01:33:48,000 --> 01:33:49,000
好像走不走 htps

3896
01:33:49,000 --> 01:33:52,000
关于在 OCSP 请求上的话

3897
01:33:52,000 --> 01:33:53,000
只涉及安全性的问题

3898
01:33:53,000 --> 01:33:54,000
不涉及隐私性的问题

3899
01:33:54,000 --> 01:33:56,000
安全性的问题的话

3900
01:33:56,000 --> 01:33:57,000
在响应结果上

3901
01:33:57,000 --> 01:33:58,000
本身就已经被证实的

3902
01:33:58,000 --> 01:33:59,000
那个数字签名给解决了

3903
01:33:59,000 --> 01:34:01,000
所以说你加 htps

3904
01:34:01,000 --> 01:34:02,000
是解决隐私问题

3905
01:34:02,000 --> 01:34:03,000
在 1999 年那个时候

3906
01:34:03,000 --> 01:34:04,000
估计大家

3907
01:34:04,000 --> 01:34:07,000
一是它本身在 tls 的 SNI 上

3908
01:34:07,000 --> 01:34:08,000
就已经泄露过一次了

3909
01:34:08,000 --> 01:34:09,000
然后二是

3910
01:34:09,000 --> 01:34:10,000
也没有这么特别的

3911
01:34:10,000 --> 01:34:12,000
去关注这个隐私上

3912
01:34:12,000 --> 01:34:13,000
要这么保护的一个事情

3913
01:34:13,000 --> 01:34:14,000
所以说就没有考虑这件事

3914
01:34:14,000 --> 01:34:15,000
这是我的理解

3915
01:34:15,000 --> 01:34:16,000
因为它毕竟

3916
01:34:16,000 --> 01:34:17,000
它是一个 online 的事情

3917
01:34:17,000 --> 01:34:18,000
就是说你一定要联网

3918
01:34:18,000 --> 01:34:19,000
然后你才要

3919
01:34:19,000 --> 01:34:20,000
你本来就要发的东西

3920
01:34:20,000 --> 01:34:22,000
哪怕我不通过 ocsp 来看

3921
01:34:22,000 --> 01:34:23,000
我直接看你连去了

3922
01:34:23,000 --> 01:34:25,000
假设我是个中间人

3923
01:34:25,000 --> 01:34:26,000
我直接看你连去了

3924
01:34:26,000 --> 01:34:27,000
哪个目标的 ip

3925
01:34:27,000 --> 01:34:28,000
我也知道你去访问了

3926
01:34:28,000 --> 01:34:29,000
什么网站对吧

3927
01:34:29,000 --> 01:34:31,000
这个场景跟这个 app 上面启动

3928
01:34:31,000 --> 01:34:32,000
因为你有些 app

3929
01:34:32,000 --> 01:34:33,000
你可以是不用联网的

3930
01:34:33,000 --> 01:34:34,000
你就是本地启动一个

3931
01:34:34,000 --> 01:34:35,000
比如说我成立一个

3932
01:34:35,000 --> 01:34:37,000
随便某某某 app

3933
01:34:37,000 --> 01:34:38,000
但它本来就不需要联网

3934
01:34:38,000 --> 01:34:38,000
对吧

3935
01:34:38,000 --> 01:34:40,000
它就我在本地启动

3936
01:34:40,000 --> 01:34:42,000
但是却通过 ocsp 这个东西

3937
01:34:42,000 --> 01:34:44,000
泄露出我在开什么程序

3938
01:34:44,000 --> 01:34:45,000
这就很奇怪了

3939
01:34:45,000 --> 01:34:45,000
对不对

3940
01:34:45,000 --> 01:34:45,000
对

3941
01:34:45,000 --> 01:34:47,000
所以就是我的核心观点

3942
01:34:47,000 --> 01:34:48,000
就是苹果偷懒了

3943
01:34:48,000 --> 01:34:49,000
它没想那么多

3944
01:34:49,000 --> 01:34:51,000
就把那边现成的一个东西

3945
01:34:51,000 --> 01:34:52,000
就拿过来就用了

3946
01:34:52,000 --> 01:34:54,000
根本没有考虑过这些事情

3947
01:34:54,000 --> 01:34:56,000
你完全可以把整个 ocsp 验证

3948
01:34:56,000 --> 01:34:57,000
这一套搞到本地

3949
01:34:57,000 --> 01:35:01,000
定期在 macOS 里面

3950
01:35:01,000 --> 01:35:02,000
更新一套苹果

3951
01:35:02,000 --> 01:35:04,000
从 root certificate 到

3952
01:35:04,000 --> 01:35:08,000
具体到每一个 app 的证书

3953
01:35:08,000 --> 01:35:09,000
的这么一套验证链

3954
01:35:09,000 --> 01:35:11,000
然后你把整个验证过程

3955
01:35:11,000 --> 01:35:12,000
放在本地完成就可以

3956
01:35:12,000 --> 01:35:13,000
这其实就是原来

3957
01:35:13,000 --> 01:35:14,000
传统的 HCL

3958
01:35:14,000 --> 01:35:16,000
就是提前我把哪些

3959
01:35:16,000 --> 01:35:17,000
哪些被吊销了的东西

3960
01:35:17,000 --> 01:35:18,000
先全部下回来

3961
01:35:18,000 --> 01:35:18,000
在这等着

3962
01:35:18,000 --> 01:35:20,000
然后我只用更新这个就行了

3963
01:35:20,000 --> 01:35:21,000
这个面临的

3964
01:35:21,000 --> 01:35:23,000
最主要的一个限制

3965
01:35:23,000 --> 01:35:24,000
就是说这个列表到底有多大

3966
01:35:24,000 --> 01:35:25,000
我是不知道的

3967
01:35:25,000 --> 01:35:26,000
但我想来

3968
01:35:26,000 --> 01:35:28,000
这种在 app 上面

3969
01:35:28,000 --> 01:35:29,000
被吊销证书的情况

3970
01:35:29,000 --> 01:35:30,000
应该还是比较少的

3971
01:35:30,000 --> 01:35:31,000
也不像 web

3972
01:35:31,000 --> 01:35:33,000
它是一个完全开放的状态

3973
01:35:33,000 --> 01:35:35,000
在 mac 上几乎没有听说过

3974
01:35:35,000 --> 01:35:37,000
有哪个知名的软件

3975
01:35:37,000 --> 01:35:38,000
或者没有见过哪个软件

3976
01:35:38,000 --> 01:35:40,000
或者是安全的什么东西

3977
01:35:40,000 --> 01:35:41,000
被出现过吊销证书的情况

3978
01:35:41,000 --> 01:35:43,000
其实在 iOS 上会很常见

3979
01:35:43,000 --> 01:35:44,000
就是 iOS 的话

3980
01:35:44,000 --> 01:35:47,000
有很多一些黑色产业

3981
01:35:47,000 --> 01:35:48,000
什么的滥用企业

3982
01:35:48,000 --> 01:35:48,000
分发

3983
01:35:48,000 --> 01:35:50,000
然后去分发了很多的应用

3984
01:35:50,000 --> 01:35:51,000
然后他们一旦

3985
01:35:51,000 --> 01:35:53,000
苹果把他们的企业

3986
01:35:53,000 --> 01:35:54,000
证书吊销了之后

3987
01:35:54,000 --> 01:35:55,000
就会靠 CSP

3988
01:35:55,000 --> 01:35:56,000
把证书给诸销了

3989
01:35:56,000 --> 01:35:56,000
这样的话

3990
01:35:56,000 --> 01:35:57,000
用户的设备上

3991
01:35:57,000 --> 01:35:58,000
那个应用就直接打开了

3992
01:35:58,000 --> 01:36:00,000
核心就是

3993
01:36:00,000 --> 01:36:02,000
苹果之前没有仔细想过这件事

3994
01:36:02,000 --> 01:36:04,000
没有去仔细考虑

3995
01:36:04,000 --> 01:36:04,000
把证书体系

3996
01:36:04,000 --> 01:36:06,000
用在应用包检查上面

3997
01:36:06,000 --> 01:36:07,000
这些细节上会不会导致问题

3998
01:36:07,000 --> 01:36:08,000
但是如果就是

3999
01:36:08,000 --> 01:36:10,000
他好好的想了

4000
01:36:10,000 --> 01:36:12,000
我该怎么样去做这套逻辑

4001
01:36:12,000 --> 01:36:12,000
做这个流程的话

4002
01:36:12,000 --> 01:36:14,000
应该是有非常多的方案

4003
01:36:14,000 --> 01:36:15,000
能够做出一套

4004
01:36:15,000 --> 01:36:16,000
既保证隐私

4005
01:36:16,000 --> 01:36:18,000
又安全又稳定的一个结果的

4006
01:36:18,000 --> 01:36:20,000
在目前他不用他做任何

4007
01:36:20,000 --> 01:36:21,000
就是额外的工作

4008
01:36:21,000 --> 01:36:24,000
只是简单的把这个 OSSP

4009
01:36:24,000 --> 01:36:27,000
就是 OSSP.apple.com

4010
01:36:27,000 --> 01:36:27,000
这个网站

4011
01:36:27,000 --> 01:36:30,000
强制通过这个 HTPS 去访问

4012
01:36:30,000 --> 01:36:31,000
也可以解决这个隐私保护

4013
01:36:31,000 --> 01:36:32,000
和不泄露的问题

4014
01:36:32,000 --> 01:36:33,000
你只有苹果知道

4015
01:36:33,000 --> 01:36:35,000
中间人是不知道的

4016
01:36:35,000 --> 01:36:37,000
对理论上应该没问题

4017
01:36:37,000 --> 01:36:39,000
但是从开发者的角度的话

4018
01:36:39,000 --> 01:36:40,000
系统架构上

4019
01:36:40,000 --> 01:36:41,000
我觉得可能会有问题

4020
01:36:41,000 --> 01:36:42,000
因为他

4021
01:36:42,000 --> 01:36:44,000
本身就把这些东西的功能性

4022
01:36:44,000 --> 01:36:46,000
已经划分成块了

4023
01:36:46,000 --> 01:36:47,000
那么就是那个进程

4024
01:36:47,000 --> 01:36:48,000
可能本身就没办法

4025
01:36:48,000 --> 01:36:50,000
去再执行 HTPS 了

4026
01:36:50,000 --> 01:36:52,000
不然他就会产生一个循环了

4027
01:36:52,000 --> 01:36:53,000
所以我觉得最后结果

4028
01:36:53,000 --> 01:36:54,000
肯定就是他整个机制

4029
01:36:54,000 --> 01:36:56,000
可能都完全给颠覆掉

4030
01:36:56,000 --> 01:36:57,000
然后重新重新一套

4031
01:36:57,000 --> 01:36:58,000
专门为检查 App 证书的

4032
01:36:58,000 --> 01:36:59,000
那一套体系

4033
01:36:59,000 --> 01:37:00,000
就是既不依赖

4034
01:37:00,000 --> 01:37:03,000
现有的 HTPS 的证书体系

4035
01:37:03,000 --> 01:37:05,000
但又可以同时保证安全

4036
01:37:05,000 --> 01:37:06,000
对应该是

4037
01:37:06,000 --> 01:37:08,000
我觉得这次可以值得

4038
01:37:08,000 --> 01:37:09,000
专门花精力

4039
01:37:09,000 --> 01:37:11,000
好好地重新做一套

4040
01:37:11,000 --> 01:37:12,000
而不是偷个懒

4041
01:37:12,000 --> 01:37:14,000
然后把 HTPS 里面的东西

4042
01:37:14,000 --> 01:37:15,000
拿过来就直接用

4043
01:37:15,000 --> 01:37:16,000
那他其实如果

4044
01:37:16,000 --> 01:37:17,000
因为我们知道他

4045
01:37:17,000 --> 01:37:19,000
苹果都是有自带证书

4046
01:37:19,000 --> 01:37:21,000
他其实用 root 证书

4047
01:37:21,000 --> 01:37:22,000
给所有的设备签发

4048
01:37:22,000 --> 01:37:24,000
一个苹果专用的证书

4049
01:37:24,000 --> 01:37:26,000
然后用这个证书去签名

4050
01:37:26,000 --> 01:37:29,000
那个 OCSP 的请求

4051
01:37:29,000 --> 01:37:29,000
然后再发给

4052
01:37:29,000 --> 01:37:31,000
加密的时候再发给苹果

4053
01:37:31,000 --> 01:37:31,000
也是可以的

4054
01:37:31,000 --> 01:37:33,000
就这个还是比较简单的

4055
01:37:33,000 --> 01:37:34,000
对 是的

4056
01:37:34,000 --> 01:37:34,000
就是这样

4057
01:37:34,000 --> 01:37:36,000
这种改动其实很简单

4058
01:37:36,000 --> 01:37:37,000
就是改两下就是改好了

4059
01:37:37,000 --> 01:37:38,000
但是如果要改的话

4060
01:37:38,000 --> 01:37:40,000
那干脆从头再来

4061
01:37:40,000 --> 01:37:42,000
就把所有这些事情

4062
01:37:42,000 --> 01:37:42,000
都考虑起来

4063
01:37:42,000 --> 01:37:42,000
清楚

4064
01:37:42,000 --> 01:37:43,000
因为现在的话

4065
01:37:43,000 --> 01:37:45,000
我们可能有隐私问题

4066
01:37:45,000 --> 01:37:47,000
还有就是堵塞问题

4067
01:37:47,000 --> 01:37:48,000
那个隐私问题

4068
01:37:48,000 --> 01:37:49,000
倒是其实确实混淆一下

4069
01:37:49,000 --> 01:37:50,000
怎么样一下的话

4070
01:37:50,000 --> 01:37:51,000
就能够解决了

4071
01:37:51,000 --> 01:37:53,000
那堵塞问题要解决的话

4072
01:37:53,000 --> 01:37:53,000
就一步

4073
01:37:53,000 --> 01:37:54,000
对 一步

4074
01:37:54,000 --> 01:37:55,000
我再考虑一步的话

4075
01:37:55,000 --> 01:37:57,000
可能没那么简单

4076
01:37:57,000 --> 01:37:59,000
那一步第一次启动的话

4077
01:37:59,000 --> 01:38:00,000
必须得是同步的

4078
01:38:00,000 --> 01:38:00,000
要不是的话

4079
01:38:00,000 --> 01:38:01,000
一个恶意软件

4080
01:38:01,000 --> 01:38:02,000
它已经起来了

4081
01:38:02,000 --> 01:38:03,000
它该干的坏事都干完了

4082
01:38:03,000 --> 01:38:05,000
你现在你一步结果来了

4083
01:38:05,000 --> 01:38:06,000
再把它吊销

4084
01:38:06,000 --> 01:38:06,000
你这个赶不上

4085
01:38:06,000 --> 01:38:08,000
已经赶不上这个时间了

4086
01:38:08,000 --> 01:38:08,000
这个是一个问题

4087
01:38:08,000 --> 01:38:10,000
就是你要不要阻止

4088
01:38:10,000 --> 01:38:11,000
或者说你要多大程度上

4089
01:38:11,000 --> 01:38:12,000
去阻止

4090
01:38:12,000 --> 01:38:14,000
第一个那个程序

4091
01:38:14,000 --> 01:38:15,000
或者说

4092
01:38:15,000 --> 01:38:15,000
其实你想

4093
01:38:15,000 --> 01:38:16,000
本来这个 LCSP

4094
01:38:16,000 --> 01:38:18,000
就是一个滞后的解决方案

4095
01:38:18,000 --> 01:38:18,000
不管是你说

4096
01:38:18,000 --> 01:38:20,000
你及时去查询

4097
01:38:20,000 --> 01:38:21,000
它也是一个滞后的方案

4098
01:38:21,000 --> 01:38:22,000
因为你始终是要等到

4099
01:38:22,000 --> 01:38:24,000
你发现这个程序

4100
01:38:24,000 --> 01:38:25,000
它是恶意软件之后

4101
01:38:25,000 --> 01:38:27,000
你再才能够去吊销

4102
01:38:27,000 --> 01:38:27,000
这个它的证书

4103
01:38:27,000 --> 01:38:28,000
然后再通过 LCSP

4104
01:38:28,000 --> 01:38:29,000
发布出去这个东西

4105
01:38:29,000 --> 01:38:31,000
所以我觉得你去

4106
01:38:31,000 --> 01:38:32,000
这个时候你去追求

4107
01:38:32,000 --> 01:38:33,000
所谓的这个及时性

4108
01:38:33,000 --> 01:38:34,000
其实好像意义不是特别大

4109
01:38:34,000 --> 01:38:35,000
对 没错 是的

4110
01:38:35,000 --> 01:38:38,000
而且现在其实在 10.15

4111
01:38:38,000 --> 01:38:39,000
还是 10.14 开始

4112
01:38:39,000 --> 01:38:41,000
已经又加了新的一层

4113
01:38:41,000 --> 01:38:42,000
那个 Norinination

4114
01:38:42,000 --> 01:38:42,000
那个

4115
01:38:42,000 --> 01:38:43,000
公正的一个机制

4116
01:38:43,000 --> 01:38:45,000
那个和这个证书

4117
01:38:45,000 --> 01:38:45,000
又是独立的

4118
01:38:45,000 --> 01:38:47,000
这个机制跟 LCSP

4119
01:38:47,000 --> 01:38:48,000
还不一样吗

4120
01:38:48,000 --> 01:38:49,000
你这个我一直没有搞明白

4121
01:38:49,000 --> 01:38:50,000
这顺便可以解释一下

4122
01:38:50,000 --> 01:38:52,000
这个证书的这个机制的话

4123
01:38:52,000 --> 01:38:54,000
是持续存在的

4124
01:38:54,000 --> 01:38:55,000
就是这个每次

4125
01:38:55,000 --> 01:38:56,000
用那个操行

4126
01:38:56,000 --> 01:38:57,000
启动那个程序的话

4127
01:38:57,000 --> 01:38:58,000
就好像或者是

4128
01:38:58,000 --> 01:38:59,000
隔一段时间

4129
01:38:59,000 --> 01:39:00,000
都会要去检查

4130
01:39:00,000 --> 01:39:01,000
这证书是不是有效

4131
01:39:01,000 --> 01:39:02,000
然后从此触发 LCSP

4132
01:39:02,000 --> 01:39:03,000
可以动态率吊销

4133
01:39:03,000 --> 01:39:04,000
那个的话

4134
01:39:04,000 --> 01:39:05,000
只在入口检查

4135
01:39:05,000 --> 01:39:06,000
而且那个是

4136
01:39:06,000 --> 01:39:08,000
针对每一个应用包

4137
01:39:08,000 --> 01:39:09,000
就是我每一次开发者

4138
01:39:09,000 --> 01:39:10,000
发布一个包

4139
01:39:10,000 --> 01:39:11,000
都需要把那个包

4140
01:39:11,000 --> 01:39:12,000
丢到苹果

4141
01:39:12,000 --> 01:39:13,000
的服务区上去

4142
01:39:13,000 --> 01:39:14,000
先做一次

4143
01:39:14,000 --> 01:39:16,000
hash 和各种安全性的检查

4144
01:39:16,000 --> 01:39:17,000
然后它生成一个

4145
01:39:17,000 --> 01:39:18,000
有效的一个签名

4146
01:39:18,000 --> 01:39:19,000
叫做 ticket

4147
01:39:19,000 --> 01:39:20,000
然后拿给我

4148
01:39:20,000 --> 01:39:22,000
我附在应用包里面

4149
01:39:22,000 --> 01:39:23,000
然后下发给用户

4150
01:39:23,000 --> 01:39:24,000
然后用户打开

4151
01:39:24,000 --> 01:39:25,000
这个应用包的时候

4152
01:39:25,000 --> 01:39:26,000
会检查这个 ticket

4153
01:39:26,000 --> 01:39:27,000
是否是有效的

4154
01:39:27,000 --> 01:39:29,000
一种是本地的静态检查

4155
01:39:29,000 --> 01:39:31,000
同时也像服务器

4156
01:39:31,000 --> 01:39:31,000
会检查这个 ticket

4157
01:39:31,000 --> 01:39:32,000
是不是有效的

4158
01:39:32,000 --> 01:39:34,000
然后如果是有效的话

4159
01:39:34,000 --> 01:39:35,000
才允许运行

4160
01:39:35,000 --> 01:39:36,000
对你说的那个

4161
01:39:36,000 --> 01:39:37,000
就是这个 notarization

4162
01:39:37,000 --> 01:39:38,000
那个服务对吧

4163
01:39:38,000 --> 01:39:39,000
就它这个过程

4164
01:39:39,000 --> 01:39:39,000
是做这件事情的

4165
01:39:39,000 --> 01:39:39,000
对

4166
01:39:39,000 --> 01:39:41,000
就它其实是两个层面的东西

4167
01:39:41,000 --> 01:39:41,000
也就是说

4168
01:39:42,000 --> 01:39:43,000
cp 检查的是证书

4169
01:39:43,000 --> 01:39:44,000
但是这个证书

4170
01:39:44,000 --> 01:39:45,000
是签发给某一个

4171
01:39:45,000 --> 01:39:46,000
开发者账号的

4172
01:39:46,000 --> 01:39:47,000
然后这个开发者账号

4173
01:39:47,000 --> 01:39:48,000
可以开发很多个 app 出来

4174
01:39:48,000 --> 01:39:50,000
然后它所有的检查

4175
01:39:50,000 --> 01:39:51,000
都是检查这个证书

4176
01:39:51,000 --> 01:39:51,000
会怎么怎么样

4177
01:39:51,000 --> 01:39:53,000
但是 notarization

4178
01:39:53,000 --> 01:39:54,000
是针对于

4179
01:39:54,000 --> 01:39:56,000
这个开发者开发的

4180
01:39:56,000 --> 01:39:58,000
单个应用程序而言的

4181
01:39:58,000 --> 01:39:59,000
单个二进制

4182
01:39:59,000 --> 01:40:00,000
每个二进制

4183
01:40:00,000 --> 01:40:01,000
都需要单独的取从引起

4184
01:40:01,000 --> 01:40:02,000
我也在思考

4185
01:40:02,000 --> 01:40:03,000
这两种方式

4186
01:40:03,000 --> 01:40:04,000
它到底是

4187
01:40:04,000 --> 01:40:05,000
为什么要搞这么一种

4188
01:40:05,000 --> 01:40:06,000
搞这么新的

4189
01:40:06,000 --> 01:40:07,000
这么一场

4190
01:40:07,000 --> 01:40:09,000
它涉及这两个机制的

4191
01:40:09,000 --> 01:40:09,000
用意

4192
01:40:09,000 --> 01:40:10,000
或者 notarization

4193
01:40:10,000 --> 01:40:11,000
主要解决什么样的问题

4194
01:40:11,000 --> 01:40:12,000
它说是

4195
01:40:12,000 --> 01:40:14,000
检查这个恶意软件

4196
01:40:14,000 --> 01:40:14,000
对吧

4197
01:40:14,000 --> 01:40:15,000
我想的话

4198
01:40:15,000 --> 01:40:16,000
可能有这么几个优势

4199
01:40:16,000 --> 01:40:17,000
一是这样的话

4200
01:40:17,000 --> 01:40:18,000
你每次提交的时候

4201
01:40:18,000 --> 01:40:19,000
它其实现在

4202
01:40:19,000 --> 01:40:20,000
是有个要求的

4203
01:40:20,000 --> 01:40:21,000
就是你要求

4204
01:40:21,000 --> 01:40:22,000
你要满足以下的

4205
01:40:22,000 --> 01:40:23,000
一些新的

4206
01:40:23,000 --> 01:40:24,000
一些系统的安全特性

4207
01:40:24,000 --> 01:40:25,000
这个安全特性的话

4208
01:40:25,000 --> 01:40:26,000
随着时间的推进

4209
01:40:26,000 --> 01:40:27,000
它的要求

4210
01:40:27,000 --> 01:40:28,000
会变得越来越严格

4211
01:40:28,000 --> 01:40:29,000
然后比如说

4212
01:40:29,000 --> 01:40:31,000
像现在的一些 hardened

4213
01:40:31,000 --> 01:40:32,000
一些 runtime 的

4214
01:40:32,000 --> 01:40:33,000
一些各种限制

4215
01:40:33,000 --> 01:40:34,000
你必须得启动了

4216
01:40:34,000 --> 01:40:36,000
这些安全保护之后

4217
01:40:36,000 --> 01:40:38,000
它才给你通过

4218
01:40:38,000 --> 01:40:39,000
这么一个公证

4219
01:40:39,000 --> 01:40:41,000
然后所以说

4220
01:40:41,000 --> 01:40:41,000
它会能够

4221
01:40:41,000 --> 01:40:43,000
主动的去控制

4222
01:40:43,000 --> 01:40:44,000
去鞭策开发者

4223
01:40:44,000 --> 01:40:45,000
你赶快把这些

4224
01:40:45,000 --> 01:40:46,000
新的安全特性

4225
01:40:46,000 --> 01:40:46,000
都给我做上

4226
01:40:46,000 --> 01:40:47,000
要不是的话

4227
01:40:47,000 --> 01:40:49,000
大家就用起来

4228
01:40:49,000 --> 01:40:50,000
会很麻烦

4229
01:40:50,000 --> 01:40:51,000
然后另外一方面的话

4230
01:40:51,000 --> 01:40:53,000
就是可能会考虑到

4231
01:40:53,000 --> 01:40:54,000
有些开发者

4232
01:40:54,000 --> 01:40:55,000
他偶然发了一个版本

4233
01:40:55,000 --> 01:40:56,000
那个版本

4234
01:40:56,000 --> 01:40:57,000
是带有恶意软件的

4235
01:40:57,000 --> 01:40:58,000
或者是

4236
01:40:58,000 --> 01:40:58,000
它有什么样

4237
01:40:58,000 --> 01:40:59,000
严重漏洞的

4238
01:40:59,000 --> 01:41:01,000
不用把证书都杀掉

4239
01:41:01,000 --> 01:41:02,000
只要干掉那个版本

4240
01:41:02,000 --> 01:41:03,000
就可以了

4241
01:41:03,000 --> 01:41:04,000
你把证书一杀掉

4242
01:41:04,000 --> 01:41:05,000
这个可能影响的

4243
01:41:05,000 --> 01:41:07,000
就可能是威力太大了

4244
01:41:07,000 --> 01:41:08,000
比如说 Google

4245
01:41:08,000 --> 01:41:09,000
假如说 Croom

4246
01:41:09,000 --> 01:41:09,000
的某个版本

4247
01:41:09,000 --> 01:41:11,000
不小心带了一个恶意包

4248
01:41:11,000 --> 01:41:12,000
你这把 Google 的证书

4249
01:41:12,000 --> 01:41:12,000
一杀

4250
01:41:12,000 --> 01:41:13,000
这个感觉

4251
01:41:13,000 --> 01:41:13,000
整个互联网

4252
01:41:13,000 --> 01:41:14,000
可能都会炸了

4253
01:41:14,000 --> 01:41:15,000
公正是解决

4254
01:41:15,000 --> 01:41:16,000
就是说是那种

4255
01:41:16,000 --> 01:41:19,000
不是开发者主观故意

4256
01:41:19,000 --> 01:41:20,000
而是因为疏忽

4257
01:41:20,000 --> 01:41:21,000
或者是因为一些

4258
01:41:21,000 --> 01:41:22,000
什么原因

4259
01:41:22,000 --> 01:41:23,000
别的原因导致说

4260
01:41:23,000 --> 01:41:25,000
他某一个版本的

4261
01:41:25,000 --> 01:41:25,000
APP 有问题

4262
01:41:25,000 --> 01:41:26,000
但是整个开发者证书

4263
01:41:26,000 --> 01:41:28,000
还是安全的

4264
01:41:28,000 --> 01:41:28,000
对

4265
01:41:28,000 --> 01:41:30,000
我觉得应该

4266
01:41:30,000 --> 01:41:31,000
这个应该是这样

4267
01:41:31,000 --> 01:41:32,000
我理解就是说

4268
01:41:32,000 --> 01:41:32,000
Notarizing

4269
01:41:32,000 --> 01:41:33,000
它还有一个作用

4270
01:41:33,000 --> 01:41:34,000
就是说

4271
01:41:34,000 --> 01:41:35,000
因为我们知道

4272
01:41:35,000 --> 01:41:37,000
并不是所有的

4273
01:41:37,000 --> 01:41:38,000
Mac 上面的用程序

4274
01:41:38,000 --> 01:41:39,000
都是通过 Mac App

4275
01:41:39,000 --> 01:41:40,000
做办法

4276
01:41:40,000 --> 01:41:40,000
其实我们用了

4277
01:41:40,000 --> 01:41:41,000
大部分

4278
01:41:41,000 --> 01:41:42,000
第三方的软件

4279
01:41:42,000 --> 01:41:43,000
都不是通过

4280
01:41:43,000 --> 01:41:46,000
Mac App Store 发布的

4281
01:41:46,000 --> 01:41:48,000
所以苹果是不知道

4282
01:41:48,000 --> 01:41:50,000
你的 APP 到底有

4283
01:41:50,000 --> 01:41:51,000
它没有机会知道

4284
01:41:51,000 --> 01:41:53,000
你下载的第三方 APP

4285
01:41:53,000 --> 01:41:54,000
到底有没有包含

4286
01:41:54,000 --> 01:41:54,000
恶意程序

4287
01:41:54,000 --> 01:41:55,000
就是哪怕它知道

4288
01:41:55,000 --> 01:41:56,000
它也没法去对比

4289
01:41:56,000 --> 01:41:56,000
因为它不知道

4290
01:41:56,000 --> 01:41:57,000
你电厂装了什么东西

4291
01:41:57,000 --> 01:42:00,000
那么通过 Notarization

4292
01:42:00,000 --> 01:42:01,000
这个公正的机制

4293
01:42:01,000 --> 01:42:03,000
它其实是强迫开发者

4294
01:42:03,000 --> 01:42:04,000
必须上传一份

4295
01:42:04,000 --> 01:42:05,000
到它那去浏打

4296
01:42:05,000 --> 01:42:07,000
然后它发现

4297
01:42:07,000 --> 01:42:08,000
这个恶意版本之后

4298
01:42:08,000 --> 01:42:08,000
它可以直接

4299
01:42:08,000 --> 01:42:10,000
从它的库里面去比对

4300
01:42:10,000 --> 01:42:10,000
说

4301
01:42:10,000 --> 01:42:11,000
这个版本

4302
01:42:11,000 --> 01:42:13,000
是否在我这里公正过

4303
01:42:13,000 --> 01:42:14,000
如果被公正过

4304
01:42:14,000 --> 01:42:14,000
它就有可能

4305
01:42:14,000 --> 01:42:16,000
被分发到其他地方去

4306
01:42:16,000 --> 01:42:17,000
那我可以通过

4307
01:42:17,000 --> 01:42:17,000
这个公正书

4308
01:42:17,000 --> 01:42:18,000
后的那个时候

4309
01:42:18,000 --> 01:42:19,000
那个时候 Ticket

4310
01:42:19,000 --> 01:42:20,000
来查到说

4311
01:42:20,000 --> 01:42:22,000
它在哪些 Mac 上用过

4312
01:42:22,000 --> 01:42:23,000
我可以去估算

4313
01:42:23,000 --> 01:42:26,000
这个安全问题的影响范围

4314
01:42:26,000 --> 01:42:27,000
没错

4315
01:42:27,000 --> 01:42:28,000
甚至我也可以

4316
01:42:28,000 --> 01:42:29,000
直接去拿到这一份之后

4317
01:42:29,000 --> 01:42:31,000
我好去分析它的代码

4318
01:42:31,000 --> 01:42:32,000
它到底是干了

4319
01:42:32,000 --> 01:42:33,000
什么样的一些坏事

4320
01:42:33,000 --> 01:42:35,000
所以是通过这个机制

4321
01:42:35,000 --> 01:42:36,000
解决了 Mac App Store

4322
01:42:36,000 --> 01:42:38,000
就是应用商店

4323
01:42:38,000 --> 01:42:39,000
提供的一种安全特性

4324
01:42:39,000 --> 01:42:40,000
但是又不需要

4325
01:42:40,000 --> 01:42:41,000
强制大家都必须

4326
01:42:41,000 --> 01:42:43,000
通过这个应用商店

4327
01:42:43,000 --> 01:42:43,000
去发程序

4328
01:42:43,000 --> 01:42:44,000
对 没错

4329
01:42:44,000 --> 01:42:46,000
目前这两重机制上

4330
01:42:46,000 --> 01:42:48,000
一个是在用户

4331
01:42:48,000 --> 01:42:49,000
开发者账号这个层面

4332
01:42:49,000 --> 01:42:49,000
一个是在

4333
01:42:49,000 --> 01:42:51,000
每个单个用的层面

4334
01:42:51,000 --> 01:42:52,000
双重保护机制

4335
01:42:52,000 --> 01:42:53,000
这个都是属于

4336
01:42:53,000 --> 01:42:53,000
这个叫什么

4337
01:42:53,000 --> 01:42:54,000
Gatekeeper

4338
01:42:54,000 --> 01:42:55,000
那个要管的事情

4339
01:42:55,000 --> 01:42:56,000
就这个来看

4340
01:42:56,000 --> 01:42:58,000
目前 Mac 上面的

4341
01:42:58,000 --> 01:42:58,000
整个安全性

4342
01:42:58,000 --> 01:43:00,000
还是比较有保障的

4343
01:43:00,000 --> 01:43:01,000
对吧

4344
01:43:01,000 --> 01:43:01,000
因为这个事情

4345
01:43:01,000 --> 01:43:03,000
我印象特别深刻

4346
01:43:03,000 --> 01:43:04,000
你知道就是在

4347
01:43:04,000 --> 01:43:05,000
你知道在中国

4348
01:43:05,000 --> 01:43:07,000
你要用网银

4349
01:43:07,000 --> 01:43:08,000
现在做消费者

4350
01:43:08,000 --> 01:43:09,000
基本上都是用手机银行

4351
01:43:09,000 --> 01:43:10,000
没有太大的问题

4352
01:43:10,000 --> 01:43:12,000
都会通过这个 App Store

4353
01:43:12,000 --> 01:43:13,000
你只要不做越狱

4354
01:43:13,000 --> 01:43:15,000
不做几个什么这个事情

4355
01:43:15,000 --> 01:43:16,000
都还是能够保证

4356
01:43:16,000 --> 01:43:17,000
你的这个安全的

4357
01:43:17,000 --> 01:43:19,000
但是在那个企业银行

4358
01:43:19,000 --> 01:43:20,000
你还是要用那个

4359
01:43:20,000 --> 01:43:22,000
所谓 Windows 的那个程序

4360
01:43:22,000 --> 01:43:23,000
然后去下那个

4361
01:43:23,000 --> 01:43:25,000
银行的那个客户端

4362
01:43:25,000 --> 01:43:27,000
然后非常搞笑的就是

4363
01:43:27,000 --> 01:43:28,000
那些客户端的安装程序

4364
01:43:28,000 --> 01:43:29,000
我看了一下

4365
01:43:29,000 --> 01:43:30,000
十有八九

4366
01:43:30,000 --> 01:43:32,000
是通过 HTTP 名文

4367
01:43:32,000 --> 01:43:33,000
去传输的

4368
01:43:33,000 --> 01:43:34,000
而且他下回来那个东西

4369
01:43:34,000 --> 01:43:35,000
他 Windows 上

4370
01:43:35,000 --> 01:43:36,000
也是有签名的

4371
01:43:36,000 --> 01:43:37,000
这个机制的

4372
01:43:37,000 --> 01:43:37,000
对吧

4373
01:43:37,000 --> 01:43:38,000
但是你看他都是

4374
01:43:38,000 --> 01:43:39,000
未知开发者

4375
01:43:39,000 --> 01:43:40,000
就

4376
01:43:40,000 --> 01:43:42,000
感觉这些安全素养

4377
01:43:42,000 --> 01:43:42,000
还是有一个

4378
01:43:42,000 --> 01:43:44,000
需要极大的提高的

4379
01:43:44,000 --> 01:43:45,000
各个方面

4380
01:43:45,000 --> 01:43:46,000
安全素养实际上是

4381
01:43:46,000 --> 01:43:48,000
是需要厂商来倒逼的

4382
01:43:48,000 --> 01:43:48,000
我觉得在

4383
01:43:48,000 --> 01:43:50,000
就是在倒逼开发者

4384
01:43:50,000 --> 01:43:52,000
做到比较安全的这一点上

4385
01:43:52,000 --> 01:43:54,000
苹果实际上是业界先锋

4386
01:43:54,000 --> 01:43:55,000
没错

4387
01:43:55,000 --> 01:43:57,000
苹果特别能逼开发者

4388
01:43:57,000 --> 01:43:58,000
无论就不可能说

4389
01:43:58,000 --> 01:44:00,000
我们下一个 Windows 10 的

4390
01:44:00,000 --> 01:44:01,000
什么某一个版本更新

4391
01:44:01,000 --> 01:44:03,000
然后强行加一个

4392
01:44:03,000 --> 01:44:03,000
那个安全选项

4393
01:44:03,000 --> 01:44:04,000
那默认

4394
01:44:04,000 --> 01:44:06,000
你如果是未知开发者

4395
01:44:06,000 --> 01:44:07,000
就没有通过签名的

4396
01:44:07,000 --> 01:44:08,000
我根本就不给你运行

4397
01:44:08,000 --> 01:44:09,000
他根本就不敢

4398
01:44:09,000 --> 01:44:10,000
加任何选项

4399
01:44:10,000 --> 01:44:10,000
对吧

4400
01:44:10,000 --> 01:44:11,000
地球就炸了

4401
01:44:11,000 --> 01:44:13,000
这种事也只有苹果

4402
01:44:13,000 --> 01:44:14,000
现在能够推得动

4403
01:44:14,000 --> 01:44:15,000
其他人好像不敢

4404
01:44:15,000 --> 01:44:17,000
对

4405
01:44:17,000 --> 01:44:17,000
就是说这个安全性

4406
01:44:17,000 --> 01:44:18,000
我觉得还是

4407
01:44:18,000 --> 01:44:20,000
还是有比较好的保障的

4408
01:44:20,000 --> 01:44:21,000
那只是说在实现细节上

4409
01:44:21,000 --> 01:44:22,000
我觉得确实还有很多

4410
01:44:22,000 --> 01:44:24,000
刚才我们讨论的

4411
01:44:24,000 --> 01:44:25,000
很多比较

4412
01:44:25,000 --> 01:44:26,000
简单的

4413
01:44:26,000 --> 01:44:27,000
就可以改进的空间

4414
01:44:27,000 --> 01:44:28,000
那其实还是可以

4415
01:44:28,000 --> 01:44:30,000
更好的避免出现

4416
01:44:30,000 --> 01:44:31,000
我们今天讨论的

4417
01:44:31,000 --> 01:44:32,000
各种各样的问题

4418
01:44:32,000 --> 01:44:33,000
对

4419
01:44:33,000 --> 01:44:34,000
但其实这个讨论的话

4420
01:44:34,000 --> 01:44:36,000
会有两个方面

4421
01:44:36,000 --> 01:44:36,000
一个方面的话

4422
01:44:36,000 --> 01:44:37,000
就是刚刚我们说的

4423
01:44:37,000 --> 01:44:38,000
隐私问题

4424
01:44:38,000 --> 01:44:39,000
另外一个方面

4425
01:44:39,000 --> 01:44:40,000
他们大家会

4426
01:44:40,000 --> 01:44:40,000
有一种

4427
01:44:40,000 --> 01:44:41,000
感觉就是

4428
01:44:41,000 --> 01:44:42,000
就是像你最早一篇文章的

4429
01:44:42,000 --> 01:44:43,000
标题

4430
01:44:43,000 --> 01:44:45,000
Your computer isn't yours

4431
01:44:45,000 --> 01:44:46,000
你的电脑不是你的

4432
01:44:46,000 --> 01:44:47,000
那我就是

4433
01:44:47,000 --> 01:44:49,000
我是否是我作为用户

4434
01:44:49,000 --> 01:44:51,000
丧失了我对我的设备

4435
01:44:51,000 --> 01:44:52,000
完全的控制权

4436
01:44:52,000 --> 01:44:52,000
这么一件事情

4437
01:44:52,000 --> 01:44:54,000
技术经营这个圈子里面

4438
01:44:54,000 --> 01:44:55,000
或者我们说

4439
01:44:55,000 --> 01:44:56,000
你懂安全这个东西

4440
01:44:56,000 --> 01:44:57,000
你知道怎么回事

4441
01:44:57,000 --> 01:44:58,000
你会觉得

4442
01:44:58,000 --> 01:45:00,000
我不应该把这些信息

4443
01:45:00,000 --> 01:45:01,000
都泄露给苹果

4444
01:45:01,000 --> 01:45:02,000
但是其实从

4445
01:45:02,000 --> 01:45:02,000
我觉得

4446
01:45:02,000 --> 01:45:04,000
其实从普通人的角度来讲

4447
01:45:04,000 --> 01:45:05,000
普通人是没有这个能力

4448
01:45:05,000 --> 01:45:06,000
去分辨这些细节的

4449
01:45:06,000 --> 01:45:07,000
必须要有一个

4450
01:45:07,000 --> 01:45:09,000
了解这个事情的厂商

4451
01:45:09,000 --> 01:45:10,000
他信了过的这个厂商

4452
01:45:10,000 --> 01:45:11,000
去完成这个事情

4453
01:45:11,000 --> 01:45:12,000
如果这个世界上

4454
01:45:12,000 --> 01:45:13,000
还有什么大企业

4455
01:45:13,000 --> 01:45:14,000
可以让你相信的话

4456
01:45:14,000 --> 01:45:15,000
可能苹果上面

4457
01:45:15,000 --> 01:45:16,000
属于属于那个

4458
01:45:16,000 --> 01:45:19,000
屈指可数的几个之一

4459
01:45:19,000 --> 01:45:19,000
应该是

4460
01:45:19,000 --> 01:45:21,000
这句话是非常深刻的

4461
01:45:21,000 --> 01:45:22,000
一个果粉

4462
01:45:22,000 --> 01:45:24,000
只有最古字里的果粉

4463
01:45:24,000 --> 01:45:25,000
才会说出来

4464
01:45:25,000 --> 01:45:29,000
其实就是从普通人心里

4465
01:45:29,000 --> 01:45:31,000
也可能还是能理解的

4466
01:45:31,000 --> 01:45:32,000
就是我买了一台电脑

4467
01:45:32,000 --> 01:45:32,000
这是我的电脑

4468
01:45:32,000 --> 01:45:33,000
我想运行什么程序

4469
01:45:33,000 --> 01:45:34,000
你苹果凭什么

4470
01:45:34,000 --> 01:45:35,000
有权限插手

4471
01:45:35,000 --> 01:45:36,000
说你不让我运行它

4472
01:45:36,000 --> 01:45:38,000
只是可以理解这种心理

4473
01:45:38,000 --> 01:45:39,000
当然我不认同

4474
01:45:39,000 --> 01:45:39,000
这样的说法

4475
01:45:40,000 --> 01:45:41,000
但是我从一个

4476
01:45:41,000 --> 01:45:43,000
魔鬼代言人的角度来说

4477
01:45:43,000 --> 01:45:44,000
我要反驳的话

4478
01:45:44,000 --> 01:45:45,000
我说你实际上

4479
01:45:45,000 --> 01:45:46,000
你开的车也是一样的

4480
01:45:46,000 --> 01:45:49,000
虽然你的车不能左右你

4481
01:45:49,000 --> 01:45:51,000
能去哪不能去哪

4482
01:45:51,000 --> 01:45:52,000
但实际上你的车

4483
01:45:52,000 --> 01:45:53,000
买回来之后

4484
01:45:53,000 --> 01:45:54,000
你自己也是修不了的

4485
01:45:54,000 --> 01:45:58,000
别说你可能能换一些内饰

4486
01:45:58,000 --> 01:45:59,000
但 that's it

4487
01:45:59,000 --> 01:46:02,000
现在包括很多 4 S 店

4488
01:46:02,000 --> 01:46:03,000
都是修不了你的车的

4489
01:46:03,000 --> 01:46:05,000
改车是违法的

4490
01:46:05,000 --> 01:46:06,000
中国是不能上路的

4491
01:46:06,000 --> 01:46:08,000
对 是的

4492
01:46:08,000 --> 01:46:09,000
这个的

4493
01:46:09,000 --> 01:46:10,000
法规的道德歧视

4494
01:46:10,000 --> 01:46:12,000
这很多 4 S 店

4495
01:46:12,000 --> 01:46:13,000
实际上也是修不了你的车的

4496
01:46:13,000 --> 01:46:14,000
比如说现在奥迪

4497
01:46:14,000 --> 01:46:16,000
或者是宝马之类的车

4498
01:46:16,000 --> 01:46:17,000
你到 4 S 店

4499
01:46:17,000 --> 01:46:18,000
你说我的车有什么问题

4500
01:46:18,000 --> 01:46:19,000
他往你侧一下

4501
01:46:19,000 --> 01:46:20,000
他能做的就是

4502
01:46:20,000 --> 01:46:22,000
把你换的那个零件寄回去

4503
01:46:22,000 --> 01:46:23,000
然后换一个新的过来

4504
01:46:23,000 --> 01:46:23,000
that's it

4505
01:46:23,000 --> 01:46:25,000
他已经失去了

4506
01:46:25,000 --> 01:46:27,000
能够帮你维修车辆的

4507
01:46:27,000 --> 01:46:28,000
这样一个作用了

4508
01:46:28,000 --> 01:46:31,000
我觉得这本质上是一个权利

4509
01:46:31,000 --> 01:46:34,000
和责任的一个分摊的问题

4510
01:46:34,000 --> 01:46:34,000
就是说

4511
01:46:34,000 --> 01:46:35,000
没错

4512
01:46:35,000 --> 01:46:36,000
如果从绝对的说

4513
01:46:36,000 --> 01:46:37,000
我要有自主权的情况下

4514
01:46:37,000 --> 01:46:38,000
美国不得得讲

4515
01:46:38,000 --> 01:46:39,000
什么叫做

4516
01:46:39,000 --> 01:46:41,000
叫做 right to repair

4517
01:46:41,000 --> 01:46:42,000
就好像是那些

4518
01:46:42,000 --> 01:46:43,000
美国农民都比较强势

4519
01:46:43,000 --> 01:46:45,000
他要买什么高级的拖拉机

4520
01:46:45,000 --> 01:46:45,000
他坏了

4521
01:46:45,000 --> 01:46:46,000
他要修

4522
01:46:46,000 --> 01:46:46,000
对吧

4523
01:46:46,000 --> 01:46:48,000
他说拖拉机要送去

4524
01:46:48,000 --> 01:46:50,000
这个 Jandir 原厂再修

4525
01:46:50,000 --> 01:46:51,000
再给他发回来

4526
01:46:51,000 --> 01:46:53,000
那这个座物就烂在地里了

4527
01:46:53,000 --> 01:46:54,000
这明显是不可以接受的

4528
01:46:54,000 --> 01:46:55,000
对吧

4529
01:46:55,000 --> 01:46:56,000
这个我觉得完全是可以理解的

4530
01:46:56,000 --> 01:46:58,000
但是其实像你说像那种

4531
01:46:58,000 --> 01:46:58,000
对于普通来说

4532
01:46:58,000 --> 01:46:59,000
你说一个电脑

4533
01:46:59,000 --> 01:47:01,000
或者说一个手机

4534
01:47:01,000 --> 01:47:01,000
对吧

4535
01:47:01,000 --> 01:47:03,000
你就如果突然不能用的话

4536
01:47:03,000 --> 01:47:04,000
你对你来说

4537
01:47:04,000 --> 01:47:06,000
好像也没有那么大的一个损失

4538
01:47:06,000 --> 01:47:08,000
但是更主要的就是说

4539
01:47:08,000 --> 01:47:09,000
如果厂商说

4540
01:47:09,000 --> 01:47:11,000
允许开放很多接口

4541
01:47:11,000 --> 01:47:12,000
让你去做一些底层的修改

4542
01:47:12,000 --> 01:47:13,000
或者买发箱

4543
01:47:13,000 --> 01:47:14,000
苹果这次他说

4544
01:47:14,000 --> 01:47:15,000
给他一个选项

4545
01:47:15,000 --> 01:47:16,000
可以让你 opt out

4546
01:47:16,000 --> 01:47:17,000
可以放弃这些安全保护

4547
01:47:17,000 --> 01:47:19,000
但最终你被黑了

4548
01:47:19,000 --> 01:47:21,000
你的资产被盗了

4549
01:47:21,000 --> 01:47:22,000
或者说假设你

4550
01:47:22,000 --> 01:47:23,000
前面有一千个比太币

4551
01:47:23,000 --> 01:47:24,000
随便去理他

4552
01:47:24,000 --> 01:47:26,000
然后你又把这个安全墙关掉

4553
01:47:26,000 --> 01:47:27,000
然后你说你比太币偷走

4554
01:47:27,000 --> 01:47:28,000
你怪谁呢

4555
01:47:28,000 --> 01:47:29,000
你还是会去怪苹果

4556
01:47:29,000 --> 01:47:29,000
对不对

4557
01:47:29,000 --> 01:47:30,000
你说你这个安全

4558
01:47:30,000 --> 01:47:32,000
做的怎么这么早

4559
01:47:32,000 --> 01:47:32,000
那这个时候就

4560
01:47:32,000 --> 01:47:33,000
你就明显就是说

4561
01:47:33,000 --> 01:47:34,000
你的权利和责任

4562
01:47:34,000 --> 01:47:35,000
是没有对等的

4563
01:47:35,000 --> 01:47:37,000
对于绝大多数那种

4564
01:47:37,000 --> 01:47:38,000
不是那么懂技术的

4565
01:47:38,000 --> 01:47:40,000
也不知道那些安全措施

4566
01:47:40,000 --> 01:47:42,000
应该如何去日常践行的

4567
01:47:42,000 --> 01:47:43,000
哪怕是说

4568
01:47:43,000 --> 01:47:44,000
对于我们这种懂行的人

4569
01:47:44,000 --> 01:47:45,000
你每天要去想

4570
01:47:45,000 --> 01:47:46,000
各种各样的安全措施

4571
01:47:46,000 --> 01:47:47,000
各种各样的牺牲

4572
01:47:47,000 --> 01:47:48,000
各种各样的便利性

4573
01:47:48,000 --> 01:47:49,000
你也很心累

4574
01:47:49,000 --> 01:47:50,000
就是我觉得

4575
01:47:50,000 --> 01:47:51,000
从日常水来讲

4576
01:47:51,000 --> 01:47:51,000
你还是

4577
01:47:51,000 --> 01:47:53,000
我愿意放弃一些

4578
01:47:53,000 --> 01:47:55,000
所谓的我自己的一些权利

4579
01:47:55,000 --> 01:47:56,000
去换取说

4580
01:47:56,000 --> 01:47:58,000
有人去帮我 take care

4581
01:47:58,000 --> 01:47:59,000
有人把这个事情给我搞定

4582
01:47:59,000 --> 01:48:01,000
我甚至愿意为此

4583
01:48:01,000 --> 01:48:03,000
付出更高的价格

4584
01:48:03,000 --> 01:48:04,000
这个就是溢价的地方

4585
01:48:04,000 --> 01:48:05,000
在这里

4586
01:48:05,000 --> 01:48:06,000
为什么我现在不想去用安卓

4587
01:48:06,000 --> 01:48:07,000
不想去用安卓

4588
01:48:07,000 --> 01:48:07,000
不想用 windows

4589
01:48:07,000 --> 01:48:09,000
你说安卓不好用吗

4590
01:48:09,000 --> 01:48:09,000
其实也不是

4591
01:48:09,000 --> 01:48:11,000
安卓做的挺好的

4592
01:48:11,000 --> 01:48:13,000
windows 也跑得很流畅

4593
01:48:13,000 --> 01:48:13,000
都没有问题

4594
01:48:13,000 --> 01:48:14,000
但我还是不想用

4595
01:48:14,000 --> 01:48:15,000
就是因为我觉得

4596
01:48:15,000 --> 01:48:17,000
没有人去帮我盯的这一块

4597
01:48:17,000 --> 01:48:19,000
所以我觉得

4598
01:48:19,000 --> 01:48:20,000
还是要一些成年人的想法

4599
01:48:20,000 --> 01:48:22,000
就是说你的权利和责任

4600
01:48:22,000 --> 01:48:23,000
始终是对等的

4601
01:48:23,000 --> 01:48:24,000
对 是的

4602
01:48:24,000 --> 01:48:25,000
而且我觉得还有个底线

4603
01:48:25,000 --> 01:48:27,000
就是如果你真的觉得

4604
01:48:27,000 --> 01:48:27,000
你要是你的

4605
01:48:27,000 --> 01:48:30,000
其实你现在也是有办法的

4606
01:48:30,000 --> 01:48:31,000
虽然麻烦一点

4607
01:48:31,000 --> 01:48:31,000
进恢复模式

4608
01:48:31,000 --> 01:48:32,000
把 SIP 关了

4609
01:48:32,000 --> 01:48:33,000
把各种东西改了

4610
01:48:33,000 --> 01:48:35,000
也能够绕过这个限制

4611
01:48:35,000 --> 01:48:36,000
裸奔去

4612
01:48:36,000 --> 01:48:37,000
对

4613
01:48:37,000 --> 01:48:37,000
你也是能够

4614
01:48:37,000 --> 01:48:38,000
甚至不行

4615
01:48:38,000 --> 01:48:39,000
你把 macOS 删了是吧

4616
01:48:39,000 --> 01:48:40,000
你装个 windows

4617
01:48:40,000 --> 01:48:41,000
那也是你的 macbook

4618
01:48:41,000 --> 01:48:42,000
也能用

4619
01:48:42,000 --> 01:48:43,000
就不要买 mac

4620
01:48:43,000 --> 01:48:45,000
跑装个零蛋

4621
01:48:45,000 --> 01:48:45,000
就是买个 PC

4622
01:48:45,000 --> 01:48:47,000
多好又便宜又好用

4623
01:48:47,000 --> 01:48:47,000
对

4624
01:48:47,000 --> 01:48:49,000
那篇文章的一个论点

4625
01:48:49,000 --> 01:48:50,000
就是你在 M 1

4626
01:48:50,000 --> 01:48:52,000
Mac 出来之前

4627
01:48:52,000 --> 01:48:53,000
你是可以选择

4628
01:48:53,000 --> 01:48:54,000
比如说我装个 Linux

4629
01:48:54,000 --> 01:48:54,000
我装个 Ubuntu

4630
01:48:54,000 --> 01:48:55,000
都是可以的

4631
01:48:55,000 --> 01:48:55,000
对吧

4632
01:48:55,000 --> 01:48:56,000
硬件上面

4633
01:48:56,000 --> 01:48:57,000
我装什么操作性

4634
01:48:57,000 --> 01:48:58,000
我是完全 OK 的

4635
01:48:58,000 --> 01:49:00,000
但是从 M 1 Mac 之后

4636
01:49:00,000 --> 01:49:01,000
你除了装 macOS 之外

4637
01:49:01,000 --> 01:49:02,000
没有办法装别的了

4638
01:49:02,000 --> 01:49:03,000
但你可以不用买 mac

4639
01:49:03,000 --> 01:49:04,000
没有人逼着你买 mac

4640
01:49:04,000 --> 01:49:05,000
对不对

4641
01:49:05,000 --> 01:49:06,000
所以这个也很扯

4642
01:49:06,000 --> 01:49:07,000
对

4643
01:49:07,000 --> 01:49:07,000
是

4644
01:49:07,000 --> 01:49:09,000
而且现在好像据说

4645
01:49:09,000 --> 01:49:10,000
苹果也在考虑

4646
01:49:10,000 --> 01:49:13,000
正在和开放出来 M 1 的设备

4647
01:49:13,000 --> 01:49:14,000
也能装起来的操作系统

4648
01:49:14,000 --> 01:49:15,000
但是这可能就是一个

4649
01:49:15,000 --> 01:49:16,000
比较大的工程

4650
01:49:16,000 --> 01:49:17,000
问题是谁

4651
01:49:17,000 --> 01:49:18,000
谁会去适配呢

4652
01:49:18,000 --> 01:49:18,000
微软吗

4653
01:49:18,000 --> 01:49:19,000
微软做一个

4654
01:49:19,000 --> 01:49:20,000
把那个 windows arm

4655
01:49:20,000 --> 01:49:21,000
移植过来

4656
01:49:21,000 --> 01:49:23,000
我觉得 Linux

4657
01:49:23,000 --> 01:49:24,000
一定会出一个 M 1

4658
01:49:24,000 --> 01:49:26,000
或者说 Apple silicon 的版本

4659
01:49:26,000 --> 01:49:27,000
我觉得微软

4660
01:49:27,000 --> 01:49:28,000
也不是没有可能

4661
01:49:28,000 --> 01:49:29,000
现在微软不是

4662
01:49:29,000 --> 01:49:30,000
苹果的最佳合作伙伴

4663
01:49:30,000 --> 01:49:31,000
开发者了

4664
01:49:31,000 --> 01:49:33,000
微软它现在是

4665
01:49:33,000 --> 01:49:34,000
它的那个 arm

4666
01:49:34,000 --> 01:49:36,000
生态是依赖高通

4667
01:49:36,000 --> 01:49:37,000
高通不是出了

4668
01:49:37,000 --> 01:49:37,000
它最近是发了一个

4669
01:49:37,000 --> 01:49:38,000
什么来的

4670
01:49:38,000 --> 01:49:39,000
X 吧

4671
01:49:39,000 --> 01:49:40,000
还是 Pro X

4672
01:49:40,000 --> 01:49:41,000
就是那个

4673
01:49:41,000 --> 01:49:41,000
Surfacebook

4674
01:49:41,000 --> 01:49:42,000
还是 Surface

4675
01:49:42,000 --> 01:49:43,000
就 Surface

4676
01:49:43,000 --> 01:49:44,000
就是也是一个

4677
01:49:44,000 --> 01:49:46,000
它微软自己那套

4678
01:49:46,000 --> 01:49:47,000
就是两用的

4679
01:49:47,000 --> 01:49:49,000
那个便携电脑

4680
01:49:49,000 --> 01:49:50,000
它就好像用的是

4681
01:49:50,000 --> 01:49:51,000
高通的处理器

4682
01:49:51,000 --> 01:49:52,000
但是你看一下

4683
01:49:52,000 --> 01:49:53,000
苹果如果能够

4684
01:49:53,000 --> 01:49:54,000
把其他厂商

4685
01:49:54,000 --> 01:49:56,000
打成这样的话

4686
01:49:56,000 --> 01:49:57,000
那微软之后

4687
01:49:57,000 --> 01:49:58,000
会不会也觉得

4688
01:49:58,000 --> 01:49:59,000
就那干脆硬件上

4689
01:49:59,000 --> 01:49:59,000
我就硬件了

4690
01:49:59,000 --> 01:50:01,000
也包括也来

4691
01:50:01,000 --> 01:50:02,000
加注了苹果的

4692
01:50:02,000 --> 01:50:02,000
这个 arm 生态

4693
01:50:02,000 --> 01:50:03,000
对反正我又不

4694
01:50:03,000 --> 01:50:04,000
我又不靠

4695
01:50:04,000 --> 01:50:05,000
硬件赚钱

4696
01:50:05,000 --> 01:50:05,000
对吧

4697
01:50:05,000 --> 01:50:06,000
我就买不了软件

4698
01:50:06,000 --> 01:50:07,000
然后如果我能够

4699
01:50:07,000 --> 01:50:09,000
在这个 M 1 的 Mac

4700
01:50:09,000 --> 01:50:10,000
那跑到荷勒尔部位呢

4701
01:50:10,000 --> 01:50:11,000
对啊

4702
01:50:11,000 --> 01:50:11,000
是啊

4703
01:50:11,000 --> 01:50:12,000
也是有可能的

4704
01:50:12,000 --> 01:50:15,000
这个事情是太 crazy 了

4705
01:50:15,000 --> 01:50:16,000
你就十年前

4706
01:50:16,000 --> 01:50:17,000
你都不敢想象说

4707
01:50:17,000 --> 01:50:18,000
啊

4708
01:50:18,000 --> 01:50:19,000
这个微软

4709
01:50:19,000 --> 01:50:20,000
还要去给苹果

4710
01:50:20,000 --> 01:50:22,000
适配一下系统

4711
01:50:22,000 --> 01:50:23,000
这是什么情况呢

4712
01:50:23,000 --> 01:50:24,000
说到十年前

4713
01:50:24,000 --> 01:50:25,000
这个十年前

4714
01:50:25,000 --> 01:50:26,000
那个 Windows Sky

4715
01:50:26,000 --> 01:50:27,000
这次又出来了

4716
01:50:27,000 --> 01:50:29,000
在苹果发布会上

4717
01:50:29,000 --> 01:50:30,000
对对

4718
01:50:30,000 --> 01:50:31,000
是那个 PC

4719
01:50:31,000 --> 01:50:32,000
versus Mac

4720
01:50:32,000 --> 01:50:33,000
那个广告里面

4721
01:50:33,000 --> 01:50:34,000
那个 PC 嘛

4722
01:50:34,000 --> 01:50:34,000
对

4723
01:50:34,000 --> 01:50:36,000
稍微有点发胖

4724
01:50:36,000 --> 01:50:37,000
但是还是

4725
01:50:37,000 --> 01:50:38,000
风采不仅当年

4726
01:50:38,000 --> 01:50:39,000
我有读过一个报道

4727
01:50:39,000 --> 01:50:40,000
就说

4728
01:50:40,000 --> 01:50:41,000
这个广告里面

4729
01:50:41,000 --> 01:50:41,000
两个人

4730
01:50:41,000 --> 01:50:42,000
就是这个

4731
01:50:42,000 --> 01:50:43,000
这个 Windows Sky

4732
01:50:43,000 --> 01:50:44,000
实际上是一个

4733
01:50:44,000 --> 01:50:46,000
是一个 Mac 的铁粉

4734
01:50:46,000 --> 01:50:48,000
而那个 Mac Sky

4735
01:50:48,000 --> 01:50:49,000
实际上对电脑

4736
01:50:49,000 --> 01:50:50,000
一窍不通

4737
01:50:50,000 --> 01:50:52,000
可能是个 Windows 用户

4738
01:50:52,000 --> 01:50:52,000
对吧

4739
01:50:52,000 --> 01:50:54,000
对

4740
01:50:54,000 --> 01:50:56,000
这个才是真的果粉啊

4741
01:50:56,000 --> 01:50:57,000
为了愿意

4742
01:50:57,000 --> 01:50:59,000
支持这个理解

4743
01:50:59,000 --> 01:51:00,000
然后牺牲自己

4744
01:51:00,000 --> 01:51:02,000
来出演这个坏人

4745
01:51:02,000 --> 01:51:03,000
牺牲自己的形象

4746
01:51:03,000 --> 01:51:04,000
那好

4747
01:51:04,000 --> 01:51:04,000
我来换去

4748
01:51:04,000 --> 01:51:05,000
苹果的高档

4749
01:51:05,000 --> 01:51:07,000
那也换取了一些美元

4750
01:51:07,000 --> 01:51:07,000
我觉得

4751
01:51:07,000 --> 01:51:09,000
主要是美元比较香

4752
01:51:09,000 --> 01:51:10,000
那是可名的

4753
01:51:10,000 --> 01:51:12,000
OK

4754
01:51:12,000 --> 01:51:14,000
那好啊

4755
01:51:14,000 --> 01:51:14,000
那今天我们

4756
01:51:14,000 --> 01:51:15,000
就这个

4757
01:51:15,000 --> 01:51:17,000
苹果的 M 1 芯片

4758
01:51:17,000 --> 01:51:19,000
和这个 LCSP 的问题

4759
01:51:19,000 --> 01:51:20,000
展开了这个

4760
01:51:20,000 --> 01:51:21,000
深入而又好的讨论

4761
01:51:21,000 --> 01:51:23,000
那也非常感谢

4762
01:51:23,000 --> 01:51:25,000
亚诚来我们这个节目做客

4763
01:51:25,000 --> 01:51:27,000
感谢两位的邀请

4764
01:51:27,000 --> 01:51:28,000
我们之后还有机会的话

4765
01:51:28,000 --> 01:51:30,000
亚诚也可以常来我们节目

4766
01:51:30,000 --> 01:51:31,000
再聊聊其他的一些事情

4767
01:51:31,000 --> 01:51:32,000
我们可以比如说

4768
01:51:32,000 --> 01:51:33,000
聊聊独立开发者呀

4769
01:51:33,000 --> 01:51:34,000
那我们下期

4770
01:51:34,000 --> 01:51:36,000
聊 Serge 呀之类的事情

4771
01:51:36,000 --> 01:51:36,000
行

4772
01:51:36,000 --> 01:51:37,000
好的

4773
01:51:37,000 --> 01:51:38,000
还是感觉有很多

4774
01:51:38,000 --> 01:51:39,000
大案可以扯的

4775
01:51:39,000 --> 01:51:40,000
对对对

4776
01:51:40,000 --> 01:51:41,000
那好

4777
01:51:41,000 --> 01:51:42,000
我们今天的节目

4778
01:51:42,000 --> 01:51:43,000
就先到这里了

4779
01:51:43,000 --> 01:51:45,000
您刚刚收听到的节目

4780
01:51:45,000 --> 01:51:46,000
是内核恐慌

4781
01:51:46,000 --> 01:51:47,000
一档尽量贴近

4782
01:51:47,000 --> 01:51:48,000
计算机科技主题的

4783
01:51:48,000 --> 01:51:49,000
娱乐 podcast

4784
01:51:49,000 --> 01:51:51,000
我们号称硬核

4785
01:51:51,000 --> 01:51:52,000
但是也没有什么干货

4786
01:51:52,000 --> 01:51:52,000
想听就听

4787
01:51:52,000 --> 01:51:53,000
不想听就别听

4788
01:51:53,000 --> 01:51:55,000
我们的网址是

4789
01:51:55,000 --> 01:51:56,000
pan.icu

4790
01:51:56,000 --> 01:51:58,000
您可以在网站上

4791
01:51:58,000 --> 01:51:59,000
找到订阅我们的

4792
01:51:59,000 --> 01:51:59,000
节目的方法

4793
01:51:59,000 --> 01:52:01,000
以及联络我们节目的方式

4794
01:52:01,000 --> 01:52:02,000
如果您期待

4795
01:52:02,000 --> 01:52:03,000
我们更频繁的更新

4796
01:52:03,000 --> 01:52:04,000
欢迎您到

4797
01:52:04,000 --> 01:52:04,000
iPhone

4798
01:52:04,000 --> 01:52:04,000
iPhone

4799
01:52:04,000 --> 01:52:05,000
我们捐款

4800
01:52:05,000 --> 01:52:06,000
捐款地址

4801
01:52:06,000 --> 01:52:06,000
可以在

4802
01:52:06,000 --> 01:52:07,000
iPhone

4803
01:52:07,000 --> 01:52:09,000
可以在我们的网站上找到

4804
01:52:09,000 --> 01:52:10,000
先发店后催更

4805
01:52:10,000 --> 01:52:11,000
文明催更

4806
01:52:11,000 --> 01:52:12,000
从你做起

4807
01:52:12,000 --> 01:52:13,000
如果您觉得意义未尽

4808
01:52:13,000 --> 01:52:14,000
也欢迎您去收听

4809
01:52:14,000 --> 01:52:16,000
Rail 和黄海主持的节目

4810
01:52:16,000 --> 01:52:17,000
风头圈

4811
01:52:17,000 --> 01:52:19,000
Rail 和任宁主持的节目

4812
01:52:19,000 --> 01:52:20,000
提前怀旧

4813
01:52:20,000 --> 01:52:21,000
以及基本部位

4814
01:52:21,000 --> 01:52:21,000
无条主持的

4815
01:52:21,000 --> 01:52:22,000
自弹自唱

4816
01:52:22,000 --> 01:52:23,000
拜拜

4817
01:52:23,000 --> 01:52:23,000
拜拜

4818
01:52:23,000 --> 01:52:24,000
拜拜

