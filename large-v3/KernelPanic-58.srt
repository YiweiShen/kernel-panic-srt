1
00:00:00,000 --> 00:00:02,000
321 开始

2
00:00:02,000 --> 00:00:23,000
大家好

3
00:00:23,000 --> 00:00:26,000
今天是 2020 年的 5 月 26 号

4
00:00:26,000 --> 00:00:28,000
也是自弹自唱的第 126 期

5
00:00:28,000 --> 00:00:31,000
您正在收听内核恐慌一档

6
00:00:31,000 --> 00:00:34,000
大致计算机科系为主题的娱乐 podcast

7
00:00:34,000 --> 00:00:35,000
我们号称硬核

8
00:00:35,000 --> 00:00:36,000
但是也没有什么干货

9
00:00:36,000 --> 00:00:36,000
想听就听

10
00:00:36,000 --> 00:00:37,000
不想听就别听

11
00:00:37,000 --> 00:00:41,000
这是我们的第 58 期

12
00:00:41,000 --> 00:00:42,000
是啊

13
00:00:42,000 --> 00:00:46,000
这同时也是我们自弹自唱和内核恐慌串台的

14
00:00:46,000 --> 00:00:48,000
自弹自串的第 9 期

15
00:00:48,000 --> 00:00:52,000
自弹自唱是全球首家用华语制作的

16
00:00:52,000 --> 00:00:53,000
字体反应主题播客节目

17
00:00:53,000 --> 00:00:56,000
我是主播文川西范动音剧 Eric

18
00:00:56,000 --> 00:00:58,000
我是主播黄浦江明新真语

19
00:00:58,000 --> 00:00:59,000
前真语

20
00:00:59,000 --> 00:01:01,000
我是吴涛

21
00:01:01,000 --> 00:01:02,000
我是 Rail

22
00:01:02,000 --> 00:01:04,000
哇我们都串了 9 期了呀

23
00:01:04,000 --> 00:01:06,000
对呀

24
00:01:06,000 --> 00:01:08,000
然后我们上一期是

25
00:01:08,000 --> 00:01:09,000
嗯

26
00:01:09,000 --> 00:01:10,000
一年之前录的

27
00:01:10,000 --> 00:01:12,000
我们串了 9 期了

28
00:01:12,000 --> 00:01:14,000
我们都还没有那个 title

29
00:01:14,000 --> 00:01:16,000
就是你们前面那个很酷炫的那个 title

30
00:01:16,000 --> 00:01:18,000
我们曾经有过

31
00:01:18,000 --> 00:01:19,000
但是我们觉得太 awkward

32
00:01:19,000 --> 00:01:21,000
所以我们放弃了

33
00:01:21,000 --> 00:01:24,000
距离上次自弹自唱第 8 期

34
00:01:24,000 --> 00:01:26,000
那期是叫什么

35
00:01:26,000 --> 00:01:27,000
人造千年宠物

36
00:01:27,000 --> 00:01:28,000
哇

37
00:01:28,000 --> 00:01:28,000
那是啊

38
00:01:28,000 --> 00:01:28,000
是

39
00:01:28,000 --> 00:01:28,000
是

40
00:01:28,000 --> 00:01:30,000
,是令和元年对吧

41
00:01:30,000 --> 00:01:31,000
2019 年的 5 月 14 号

42
00:01:31,000 --> 00:01:33,000
刚好是整整一年

43
00:01:33,000 --> 00:01:35,000
在这一年里面

44
00:01:35,000 --> 00:01:41,000
我们的自弹自唱从第 99 期更新到到 126 期内核同欢呢

45
00:01:41,000 --> 00:01:43,000
从第 55 期更新到了第 58 期是吧

46
00:01:47,000 --> 00:01:48,000
沧海桑田

47
00:01:48,000 --> 00:01:50,000
中间经历了多少巨变

48
00:01:50,000 --> 00:01:51,000
人家都两位数变三位数了

49
00:01:51,000 --> 00:01:53,000
我们还缓慢的爬行的

50
00:01:53,000 --> 00:01:54,000
我们总共更新了三期

51
00:01:57,000 --> 00:01:58,000
但是你们很厉害啊

52
00:01:58,000 --> 00:02:00,000
你们图标也变了

53
00:02:00,000 --> 00:02:02,000
那个域名也变了

54
00:02:02,000 --> 00:02:03,000
然后连官网的字体都换掉了

55
00:02:03,000 --> 00:02:04,000
哎

56
00:02:04,000 --> 00:02:08,000
对我们这个是应该是 2020 年有什么改头画面了哈

57
00:02:08,000 --> 00:02:10,000
之前功夫都用在节目之外了

58
00:02:10,000 --> 00:02:12,000
应该说这叫看得见的地方

59
00:02:12,000 --> 00:02:13,000
听不见的地方

60
00:02:13,000 --> 00:02:14,000
哈哈哈

61
00:02:14,000 --> 00:02:16,000
说实话

62
00:02:16,000 --> 00:02:18,000
我现在现在打这个怕你哭

63
00:02:18,000 --> 00:02:20,000
还是感觉很有违和感

64
00:02:20,000 --> 00:02:20,000
知道吗

65
00:02:20,000 --> 00:02:22,000
为什么不听好的吗

66
00:02:22,000 --> 00:02:24,000
怕你哭多好呀

67
00:02:24,000 --> 00:02:25,000
好怪

68
00:02:25,000 --> 00:02:27,000
听起来很很日本吗

69
00:02:27,000 --> 00:02:28,000
然后

70
00:02:28,000 --> 00:02:28,000
哎

71
00:02:28,000 --> 00:02:31,000
这个点阵子看起来还可以感觉挺好的

72
00:02:31,000 --> 00:02:31,000
不过

73
00:02:31,000 --> 00:02:32,000
啊

74
00:02:32,000 --> 00:02:33,000
对点阵子呢

75
00:02:33,000 --> 00:02:36,000
就是因为上次听了你们应该应该是最新一期节目吧

76
00:02:36,000 --> 00:02:38,000
就是第一茅提还是上前一期

77
00:02:38,000 --> 00:02:40,000
因为我们是前一期了

78
00:02:40,000 --> 00:02:41,000
已经是对前一期了

79
00:02:41,000 --> 00:02:42,000
你们那个速度比较快

80
00:02:42,000 --> 00:02:44,000
然后我就说嗯

81
00:02:44,000 --> 00:02:46,000
我之前本来一直想换的嘛

82
00:02:46,000 --> 00:02:46,000
然后

83
00:02:46,000 --> 00:02:48,000
就是因为之前呃

84
00:02:48,000 --> 00:02:51,000
我们是先换的这个 logo

85
00:02:51,000 --> 00:02:52,000
先换的那个像素点

86
00:02:52,000 --> 00:02:53,000
也不叫像素点

87
00:02:53,000 --> 00:02:54,000
那个叫什么

88
00:02:54,000 --> 00:02:55,000
我叫 led 灯

89
00:02:55,000 --> 00:02:57,000
这个风格的 logo

90
00:02:57,000 --> 00:02:57,000
嘛

91
00:02:57,000 --> 00:02:58,000
那个圆的

92
00:02:58,000 --> 00:02:58,000
对对对

93
00:02:58,000 --> 00:03:00,000
当时我就想说哎

94
00:03:00,000 --> 00:03:04,000
那干脆拿这个风格把这个正文字也换了

95
00:03:04,000 --> 00:03:05,000
不是有这个 webfont 吗

96
00:03:05,000 --> 00:03:06,000
但是后来转念一想

97
00:03:06,000 --> 00:03:09,000
那中文字体的 webfont 马上就劝退了

98
00:03:09,000 --> 00:03:12,000
因为都知道这个体积会比较比较惊人

99
00:03:12,000 --> 00:03:12,000
对吧

100
00:03:12,000 --> 00:03:16,000
然后来听你们前一期节目找这个威力来聊的时候

101
00:03:16,000 --> 00:03:17,000
我在想哎

102
00:03:17,000 --> 00:03:20,000
如果是纯点阵的

103
00:03:20,000 --> 00:03:22,000
那不就没有这个体积问题了吗

104
00:03:22,000 --> 00:03:23,000
因为我简单算了一下这个数对吧

105
00:03:23,000 --> 00:03:25,000
假设我是一个呃

106
00:03:25,000 --> 00:03:27,000
十像素乘以十像素的汉字

107
00:03:27,000 --> 00:03:28,000
呃

108
00:03:28,000 --> 00:03:28,000
呃

109
00:03:28,000 --> 00:03:30,000
那么一个像就算我不压缩的情况下

110
00:03:30,000 --> 00:03:34,000
我一个汉一个方块就是 100 个 bit 嘛

111
00:03:34,000 --> 00:03:35,000
100 个 bit 除以 8 才多少

112
00:03:35,000 --> 00:03:39,000
不到不到 20 个这个 byte 对吧

113
00:03:39,000 --> 00:03:42,000
算下来还还再再稍微压缩一下

114
00:03:42,000 --> 00:03:43,000
应该是可以接受的嘛

115
00:03:43,000 --> 00:03:46,000
但是问题丁某他不是真正的点阵的

116
00:03:46,000 --> 00:03:47,000
他其实还是使量字啊

117
00:03:47,000 --> 00:03:49,000
问题这就是我遇到的第一个问题

118
00:03:49,000 --> 00:03:53,000
就是后来是没有办法是真的使用在这个 webfont

119
00:03:53,000 --> 00:03:55,000
真的是没有办法使用点阵字体的

120
00:03:55,000 --> 00:03:57,000
就好像跟威力那期你们也聊了嘛

121
00:03:57,000 --> 00:03:58,000
就是

122
00:03:58,000 --> 00:04:01,000
就是那个 windows 的那个自带的那个系统字体

123
00:04:01,000 --> 00:04:03,000
还有好几个都是有那个内嵌点阵的嘛

124
00:04:03,000 --> 00:04:03,000
嗯

125
00:04:03,000 --> 00:04:03,000
对

126
00:04:03,000 --> 00:04:05,000
这个就所谓的中意送体嘛

127
00:04:05,000 --> 00:04:06,000
对对对对对

128
00:04:06,000 --> 00:04:12,000
还包括之前就是在古早时期的这个 linax 系统里面有那个叫文权益

129
00:04:12,000 --> 00:04:13,000
那个那套有东西

130
00:04:13,000 --> 00:04:13,000
知道吧

131
00:04:13,000 --> 00:04:15,000
那应该是 pcf 吗

132
00:04:15,000 --> 00:04:15,000
啊

133
00:04:15,000 --> 00:04:16,000
这个可是我不知道

134
00:04:16,000 --> 00:04:17,000
我就说就是文权益

135
00:04:17,000 --> 00:04:22,000
他们当时也做过就是那种他做过那个就是他叫他叫他叫他叫开源吗

136
00:04:22,000 --> 00:04:26,000
我不知道就是免费的这种自由的这种中文点证字

137
00:04:26,000 --> 00:04:28,000
刚他做了一个高质量的嘛

138
00:04:28,000 --> 00:04:28,000
当

139
00:04:28,000 --> 00:04:33,000
是是应该是中文互联网上比较早的那种就是 crowdsourcing 的项目哈

140
00:04:33,000 --> 00:04:37,000
他当时我记得是做了一个这个呃网页

141
00:04:37,000 --> 00:04:38,000
那个时候还挺不容易的

142
00:04:38,000 --> 00:04:40,000
那个时候网页技术都比较落后嘛

143
00:04:40,000 --> 00:04:43,000
他们用通过这个网页的方式让大家去拆这个字

144
00:04:43,000 --> 00:04:44,000
然后点这个像素点嘛

145
00:04:44,000 --> 00:04:48,000
然后就是他们那边也有一套这个点证字

146
00:04:48,000 --> 00:04:49,000
但是呢

147
00:04:49,000 --> 00:04:52,000
这些都是没有办法用到这个那个 webfrontal 里面的

148
00:04:52,000 --> 00:04:55,000
因为 webfrontal 那个目前主流的几个格式哈

149
00:04:55,000 --> 00:04:58,000
就最开始的那个 eot 什么叫 embedded open type

150
00:04:58,000 --> 00:04:59,000
对吧

151
00:04:59,000 --> 00:05:03,000
后来的这个 svg 包括在目前最新的那个 wolf 和那个 wolf 2 对吧

152
00:05:03,000 --> 00:05:07,000
他们在那个生成的时候就直接是不支持这个内嵌点证

153
00:05:07,000 --> 00:05:09,000
所以这条路就是断掉的

154
00:05:09,000 --> 00:05:15,000
那所以你上期这个威力他做那个也是一个就是折中的方案嘛

155
00:05:15,000 --> 00:05:17,000
就是用史量来啊

156
00:05:17,000 --> 00:05:20,000
模拟点证的那种风格对吧

157
00:05:20,000 --> 00:05:20,000
嗯

158
00:05:20,000 --> 00:05:22,000
但是你还别说这个其实还是有用的

159
00:05:22,000 --> 00:05:25,000
就是虽然说不是一个真正的点证

160
00:05:25,000 --> 00:05:28,000
就是我要我要表达一个呃

161
00:05:28,000 --> 00:05:29,000
10 个像素乘以 10 个像素的字

162
00:05:29,000 --> 00:05:31,000
我并不能真的只用 100 个呃

163
00:05:31,000 --> 00:05:33,000
bite 就可以实现哈

164
00:05:33,000 --> 00:05:35,000
但是因为呃

165
00:05:35,000 --> 00:05:39,000
极度简化过的那个方那个就是五微点证嘛

166
00:05:39,000 --> 00:05:41,000
就是史量史量点证

167
00:05:41,000 --> 00:05:43,000
他其实是一个各种各样的小方块嘛

168
00:05:43,000 --> 00:05:44,000
对吧

169
00:05:44,000 --> 00:05:44,000
嗯

170
00:05:44,000 --> 00:05:45,000
小方块的就有个好处

171
00:05:45,000 --> 00:05:49,000
他就什么没有这个什么什么取贝塞而曲线的一些转角啊什么的

172
00:05:49,000 --> 00:05:51,000
他的那个点就比较少吗

173
00:05:51,000 --> 00:05:52,000
买呃

174
00:05:52,000 --> 00:05:52,000
没错

175
00:05:52,000 --> 00:05:54,000
你你你想这个道理吧

176
00:05:54,000 --> 00:05:56,000
OK 就是确实就拿这个威力

177
00:05:56,000 --> 00:05:58,000
他拿这个他

178
00:05:58,000 --> 00:05:59,000
他给了我一个这个低毛的 ttf

179
00:05:59,000 --> 00:06:02,000
然后我把它转成那个那个 wolf 二

180
00:06:02,000 --> 00:06:04,000
为何二是 wolf 的那个升级版

181
00:06:04,000 --> 00:06:07,000
他的压缩比例又提高了百分之好像 20 左右吧

182
00:06:07,000 --> 00:06:09,000
应该是那其实我我压完之后

183
00:06:09,000 --> 00:06:15,000
他当时给的是一套这个就是还在北大中的这个低毛体的这个文件给我嘛

184
00:06:15,000 --> 00:06:19,000
我压完之后其实也就才不到 500 kb 的那个啊

185
00:06:19,000 --> 00:06:20,000
那挺好的呀

186
00:06:20,000 --> 00:06:27,000
对对对就 500 kb 很在比如在五年前可能还是一个有一点纠结的这个尺寸

187
00:06:27,000 --> 00:06:27,000
因为

188
00:06:27,000 --> 00:06:28,000
毕竟还是网络

189
00:06:28,000 --> 00:06:30,000
要下载要带宽不高的情况下

190
00:06:30,000 --> 00:06:31,000
他现在在 500 kb

191
00:06:31,000 --> 00:06:32,000
就我们这个有四级网络

192
00:06:32,000 --> 00:06:33,000
马上五级网络的吧

193
00:06:33,000 --> 00:06:36,000
又是这个光线入户都还挺多的 500 kb 的话

194
00:06:36,000 --> 00:06:40,000
你其实你在这个 instagram 上刷刷一张图

195
00:06:40,000 --> 00:06:42,000
估计都都不止 500 kb 了对吧

196
00:06:42,000 --> 00:06:47,000
很多这个网页你加载一个这个什么 javascript 的这个库

197
00:06:47,000 --> 00:06:49,000
那可能都是差不多那个水平了

198
00:06:49,000 --> 00:06:51,000
所以完全可以接受嘛

199
00:06:51,000 --> 00:06:52,000
所以我就没那其实是可以的

200
00:06:52,000 --> 00:06:57,000
我我就换上这个这个把我们的这个官网的那个呃

201
00:06:57,000 --> 00:07:00,000
我们放他就换上了这个低卯作为主

202
00:07:00,000 --> 00:07:02,000
然后这样设了一些这个系统自带的一些 backup

203
00:07:02,000 --> 00:07:08,000
就是如果因为某种原因你的这个系统你的那个你乱七不过现代

204
00:07:08,000 --> 00:07:10,000
或者是你用的那个那个什么插件

205
00:07:10,000 --> 00:07:12,000
禁用那个 web 放的的话

206
00:07:12,000 --> 00:07:14,000
那你还是会退到你系统默认的那些字体嘛

207
00:07:14,000 --> 00:07:17,000
所以就整个起来就风格就还觉得还不错啊

208
00:07:18,000 --> 00:07:22,000
嗯用这种假的点阵的话

209
00:07:22,000 --> 00:07:25,000
其实嗯其实是实量嘛

210
00:07:25,000 --> 00:07:27,000
但是你这样用柔

211
00:07:27,000 --> 00:07:30,000
用要不然的话你点阵是真点阵的话

212
00:07:30,000 --> 00:07:32,000
你那个字号不好弄嘛

213
00:07:32,000 --> 00:07:34,000
对就是有这个问题的话

214
00:07:34,000 --> 00:07:36,000
你一个字号要一套点阵

215
00:07:36,000 --> 00:07:38,000
反而这种假点阵的话

216
00:07:38,000 --> 00:07:40,000
你可以就是你可以随意缩放吗

217
00:07:40,000 --> 00:07:42,000
对反而更好是是是

218
00:07:42,000 --> 00:07:44,000
因为你如果用真点阵的话

219
00:07:44,000 --> 00:07:44,000
缩放的话

220
00:07:44,000 --> 00:07:46,000
因为其实现在呃

221
00:07:46,000 --> 00:07:47,000
我想想呃

222
00:07:47,000 --> 00:07:53,000
我们至少在英特尔出那个还有 md 把出下一代的那个显卡之前

223
00:07:53,000 --> 00:07:56,000
我们目前所用的这个就是就是显卡

224
00:07:56,000 --> 00:07:57,000
这个包括

225
00:07:57,000 --> 00:07:58,000
一切的呀

226
00:07:58,000 --> 00:07:59,000
还是独立的包括手机上的也好

227
00:07:59,000 --> 00:08:03,000
他都不能做我们叫做这个整数倍缩放

228
00:08:03,000 --> 00:08:04,000
那什么意思呢

229
00:08:04,000 --> 00:08:05,000
就是比如说我要呃

230
00:08:05,000 --> 00:08:08,000
我用现在都是用的这个什么所谓高分高清平嘛

231
00:08:08,000 --> 00:08:10,000
有什么二叉三叉的什么意思

232
00:08:10,000 --> 00:08:12,000
就是相对于相对于一个像素点

233
00:08:12,000 --> 00:08:17,000
他我们之前讨论过是用可能是用四个物理点或者是九个物理点

234
00:08:17,000 --> 00:08:21,000
就是二二乘以二或者三乘以三的这个这个格子来做嘛

235
00:08:21,000 --> 00:08:23,000
所谓的这个整数被缩放什么意思呢

236
00:08:23,000 --> 00:08:25,000
就是说假设我是一个这个四 k 的屏幕

237
00:08:25,000 --> 00:08:26,000
对不对

238
00:08:26,000 --> 00:08:27,000
然后但是你想啊

239
00:08:27,000 --> 00:08:31,000
那个四 k 游戏他有很多这个特效不是这显卡的数据能跟不上了

240
00:08:31,000 --> 00:08:39,000
所以很多很多时候他只能用这个就放那个 1080 来的这个分辨率来来来呃显示这个游戏对吧

241
00:08:39,000 --> 00:08:41,000
但是 1080 分辨率

242
00:08:41,000 --> 00:08:45,000
但是你说是 4 k 4 k 就刚好是四个 1080 的屏幕的那个拼

243
00:08:45,000 --> 00:08:46,000
就是在田子格拼起来嘛

244
00:08:46,000 --> 00:08:46,000
对吧

245
00:08:46,000 --> 00:08:48,000
那这就有个问题了

246
00:08:48,000 --> 00:08:52,000
那一个 1080 像素点是对应四个这个 4 k 的像素点嘛

247
00:08:52,000 --> 00:08:57,000
就我们通常想那肯定就是说把那四个物理像素点都是都渲染成这个一个

248
00:08:57,000 --> 00:08:59,000
这个逻辑像素点的那个颜色

249
00:08:59,000 --> 00:09:02,000
那这样不就看起来虽然说是四个 4 k 的屏幕

250
00:09:02,000 --> 00:09:05,000
但看起来还是 10801080 的那个清晰那么锐利

251
00:09:05,000 --> 00:09:06,000
对不对

252
00:09:06,000 --> 00:09:07,000
嗯

253
00:09:07,000 --> 00:09:08,000
但其实并不是这样子的

254
00:09:08,000 --> 00:09:11,000
新鲜的主主的想法都是叫做他叫什么呢

255
00:09:11,000 --> 00:09:13,000
利尼尔的这种那个词叫什么来的

256
00:09:13,000 --> 00:09:19,000
interpolate 对 interpolate 就是他就会去差值差值差值去算了

257
00:09:19,000 --> 00:09:21,000
比如说我要如果你想象一下这么一个场景

258
00:09:21,000 --> 00:09:28,000
比如说你这个 1080 的屏幕上从左到右是一个从呃白到黑的一个渐进的一个过渡对吧

259
00:09:28,000 --> 00:09:31,000
正常的话如果说你是这个在 4 k 屏幕上显示

260
00:09:31,000 --> 00:09:33,000
那你说你每一个线条会这两边嘛

261
00:09:33,000 --> 00:09:34,000
就是每每一数啊

262
00:09:34,000 --> 00:09:36,000
每一数行你就会这两边对不对

263
00:09:36,000 --> 00:09:37,000
但其实并不是这样

264
00:09:37,000 --> 00:09:42,000
他还是要在 4 k 上他是要算出那两条 1080 的中间值是怎么样子啊

265
00:09:42,000 --> 00:09:49,000
再把那个中间值绘制在那个 4 k 的那个多出来的那个像素内内内数的这个像素上面的去吧

266
00:09:49,000 --> 00:09:51,000
那在这个网页的上面

267
00:09:51,000 --> 00:09:52,000
其实有类似的问题啊

268
00:09:52,000 --> 00:09:57,000
就是说我本来说我有一个这个比如说是这个 10×10 像素的这个点证字

269
00:09:57,000 --> 00:10:00,000
但我我能不能渲染到这个 20×20 这个分辨率上去

270
00:10:00,000 --> 00:10:01,000
其实做不到的对不对

271
00:10:03,000 --> 00:10:04,000
OK 在这个情况下

272
00:10:04,000 --> 00:10:06,000
就刚才艾瑞克说那个问题啊

273
00:10:06,000 --> 00:10:11,000
就是说你反而用这种为呃为点证就是这就是用矢量来模拟的反而更好

274
00:10:11,000 --> 00:10:12,000
他可以缩放一点

275
00:10:12,000 --> 00:10:17,000
但是我遇到一个问题就是现在的网页的 css 里面那个宽度啊

276
00:10:17,000 --> 00:10:20,000
他有可能我不是按这个整数像素来定的那个宽度

277
00:10:20,000 --> 00:10:23,000
他可能比如说是一个百分比对吧

278
00:10:23,000 --> 00:10:26,000
百分比之后他算出来都他最后还是要落落实的

279
00:10:26,000 --> 00:10:28,000
他到这个叫什么就是 rasterize 的时候啊

280
00:10:28,000 --> 00:10:37,000
rasterize 什么叫三格化的时候的时候他还是会会变成要要变成一个具体的到哪一个像素点的坐标上去吗

281
00:10:37,000 --> 00:10:38,000
就是有时候如果你是按百分比的话

282
00:10:38,000 --> 00:10:40,000
他就他不就除不进吗

283
00:10:40,000 --> 00:10:41,000
他就有这个小数

284
00:10:41,000 --> 00:10:46,000
那么就变成了就是说呃这个就结合到我们之前几期谈过的那个次像素平滑的问题对吧

285
00:10:46,000 --> 00:10:48,000
对你先是就是说灰度平滑嘛

286
00:10:48,000 --> 00:10:49,000
就是说啊

287
00:10:49,000 --> 00:10:50,000
我先还是一个像素

288
00:10:50,000 --> 00:10:50,000
我

289
00:10:50,000 --> 00:10:50,000
不

290
00:10:50,000 --> 00:10:52,000
Just consider this LCD screen

291
00:10:52,000 --> 00:10:55,000
这个这个子像素的结构

292
00:10:55,000 --> 00:10:55,000
我直接按灰度平滑

293
00:10:55,000 --> 00:10:59,000
比如说我们现在在这个 ios 设备上面都是这样子的对吧

294
00:10:59,000 --> 00:11:01,000
他是没有这个次像素平行都是和都平滑的话

295
00:11:01,000 --> 00:11:03,000
这样的话就相对来说还好一点

296
00:11:03,000 --> 00:11:05,000
他就最多是在左边一个像素会有没有像素

297
00:11:05,000 --> 00:11:08,000
或者他如果他觉得这个应该是两个像素之间

298
00:11:08,000 --> 00:11:12,000
那他可能在这个灰度上面做一些这个这个平均对不对

299
00:11:12,000 --> 00:11:15,000
但是就会导致我这个丁毛点整体哈

300
00:11:15,000 --> 00:11:18,000
本来我想的效果是应该是非常边缘锐利

301
00:11:18,000 --> 00:11:20,000
我把他那个那个叫做那个像素的

302
00:11:20,000 --> 00:11:21,000
字体的尺寸调好的话

303
00:11:21,000 --> 00:11:22,000
它边缘应该是非常锐利的

304
00:11:22,000 --> 00:11:27,000
但是因为由于非整数的宽度的问题

305
00:11:27,000 --> 00:11:29,000
它可能那个字的那一竖

306
00:11:29,000 --> 00:11:31,000
据说它起止的位置

307
00:11:31,000 --> 00:11:32,000
它在排版引擎

308
00:11:32,000 --> 00:11:33,000
加上三个画之后

309
00:11:33,000 --> 00:11:36,000
它是在从左到右

310
00:11:36,000 --> 00:11:38,000
第 32.57 个像素点

311
00:11:38,000 --> 00:11:41,000
那个时候再开始绘制

312
00:11:41,000 --> 00:11:41,000
这个时候怎么办

313
00:11:41,000 --> 00:11:43,000
你还是会看到

314
00:11:43,000 --> 00:11:44,000
在有些地方

315
00:11:44,000 --> 00:11:47,000
它的字的边缘是有一层

316
00:11:47,000 --> 00:11:49,000
那个叫什么

317
00:11:49,000 --> 00:11:51,000
就是灰灰的那种感觉的

318
00:11:51,000 --> 00:11:53,000
如果说你是有这个次相素平滑

319
00:11:53,000 --> 00:11:55,000
然后你这个人眼睛又比较敏感

320
00:11:55,000 --> 00:11:57,000
或者是你的屏幕素质

321
00:11:57,000 --> 00:11:58,000
是有一点问题的话

322
00:11:58,000 --> 00:12:00,000
你看到它可能边上有一点那种

323
00:12:00,000 --> 00:12:01,000
就叫那个

324
00:12:01,000 --> 00:12:01,000
踩边

325
00:12:01,000 --> 00:12:03,000
对踩边那个 career type

326
00:12:03,000 --> 00:12:04,000
那种常见的问题

327
00:12:04,000 --> 00:12:06,000
所以就还是挺头疼的

328
00:12:06,000 --> 00:12:07,000
这个事情

329
00:12:07,000 --> 00:12:10,000
毕竟你是假点阵

330
00:12:10,000 --> 00:12:12,000
对就假点阵的问题

331
00:12:12,000 --> 00:12:13,000
但是就是说

332
00:12:13,000 --> 00:12:14,000
刚才你说的那个缩放的问题

333
00:12:14,000 --> 00:12:16,000
其实这里还是有一点技巧的

334
00:12:16,000 --> 00:12:17,000
就并不是说

335
00:12:17,000 --> 00:12:18,000
我因为是这个

336
00:12:18,000 --> 00:12:20,000
真实量微点阵

337
00:12:20,000 --> 00:12:21,000
就可以自由缩放了

338
00:12:21,000 --> 00:12:23,000
其实我要达到刚才那种

339
00:12:23,000 --> 00:12:24,000
就是 pixel to pixel

340
00:12:24,000 --> 00:12:26,000
就是像素点对像素点的那种

341
00:12:26,000 --> 00:12:28,000
清晰和锐利的话

342
00:12:28,000 --> 00:12:29,000
其实还是有讲究的

343
00:12:29,000 --> 00:12:31,000
比如说我用的那个阵文体

344
00:12:31,000 --> 00:12:32,000
是丁卯的

345
00:12:32,000 --> 00:12:33,000
丁卯其实只有两个尺寸

346
00:12:33,000 --> 00:12:35,000
就是七像素和九像素

347
00:12:35,000 --> 00:12:35,000
对吧

348
00:12:35,000 --> 00:12:36,000
七像素

349
00:12:36,000 --> 00:12:37,000
它其实是

350
00:12:37,000 --> 00:12:38,000
因为有一个像素的留白的话

351
00:12:38,000 --> 00:12:41,000
它其实是八像素宽和十像素宽的

352
00:12:41,000 --> 00:12:42,000
这么一个字体

353
00:12:42,000 --> 00:12:43,000
对吧

354
00:12:43,000 --> 00:12:45,000
这样你在 CSS 里面设置的时候

355
00:12:45,000 --> 00:12:46,000
你就要设置成

356
00:12:46,000 --> 00:12:48,000
正常你应该是

357
00:12:48,000 --> 00:12:49,000
设置成十个像素对不对

358
00:12:49,000 --> 00:12:52,000
但是因为十个像素实在是太小了

359
00:12:52,000 --> 00:12:53,000
就是那个

360
00:12:53,000 --> 00:12:54,000
就是因为现在很多屏幕的

361
00:12:54,000 --> 00:12:56,000
这个分辨率挺高的嘛

362
00:12:56,000 --> 00:12:57,000
就是而且手机上

363
00:12:57,000 --> 00:12:58,000
你强制设置十个像素

364
00:12:58,000 --> 00:13:00,000
它也质也比较小

365
00:13:00,000 --> 00:13:02,000
所以我就设置成了 15

366
00:13:02,000 --> 00:13:03,000
15 你想不就出乎今了吗

367
00:13:03,000 --> 00:13:04,000
对不对

368
00:13:04,000 --> 00:13:05,000
你必须把它量子化

369
00:13:05,000 --> 00:13:06,000
它其实是可以的

370
00:13:06,000 --> 00:13:08,000
因为我看目前我们大部分人用的

371
00:13:08,000 --> 00:13:09,000
这个不管是笔记本也好

372
00:13:09,000 --> 00:13:11,000
还是这个就至少 Mac

373
00:13:11,000 --> 00:13:13,000
Mac 现在应该已经没有这个

374
00:13:13,000 --> 00:13:15,000
非 Retina 屏幕的 Mac 在销售了

375
00:13:15,000 --> 00:13:16,000
对吧

376
00:13:16,000 --> 00:13:17,000
销售肯定没有了

377
00:13:17,000 --> 00:13:18,000
但使用肯定还是可以的

378
00:13:18,000 --> 00:13:21,000
而且你要考虑到外接显示器这个问题

379
00:13:21,000 --> 00:13:23,000
就是至少是所有的 Mac

380
00:13:23,000 --> 00:13:25,000
就是新机和这个所有的这个

381
00:13:25,000 --> 00:13:27,000
就是目前应该在世的这个

382
00:13:27,000 --> 00:13:28,000
iOS 设备应该都是这个

383
00:13:28,000 --> 00:13:30,000
所谓的这个高分屏嘛

384
00:13:30,000 --> 00:13:31,000
就是 Retina 屏幕对不对

385
00:13:31,000 --> 00:13:33,000
那么就有两种了

386
00:13:33,000 --> 00:13:34,000
我们一种是就是常见的 Mac

387
00:13:34,000 --> 00:13:36,000
都是这个 2 X 的对吧

388
00:13:36,000 --> 00:13:37,000
然后还有这个

389
00:13:37,000 --> 00:13:38,000
那个叫什么 iPhone

390
00:13:38,000 --> 00:13:40,000
这个什么比如 11 Pro

391
00:13:40,000 --> 00:13:42,000
它是那个三倍的

392
00:13:42,000 --> 00:13:43,000
三倍的

393
00:13:43,000 --> 00:13:43,000
对对

394
00:13:43,000 --> 00:13:45,000
但三差的话就相对来说

395
00:13:45,000 --> 00:13:46,000
我就那个就相对来说

396
00:13:46,000 --> 00:13:47,000
我也没有那个设备嘛

397
00:13:47,000 --> 00:13:49,000
所以我都是两差的设备

398
00:13:49,000 --> 00:13:50,000
我就说整成 15 个像素

399
00:13:50,000 --> 00:13:52,000
15 个像素的逻辑

400
00:13:52,000 --> 00:13:55,000
其实是对应 30 个像素的物理

401
00:13:55,000 --> 00:13:55,000
对不对

402
00:13:55,000 --> 00:13:55,000
OK

403
00:13:55,000 --> 00:13:58,000
30 个像素的物理除以 10 个像素的

404
00:13:58,000 --> 00:13:59,000
这个丁卯的点阵体

405
00:13:59,000 --> 00:14:01,000
不是刚好也能是三倍吗

406
00:14:01,000 --> 00:14:02,000
所以他显示

407
00:14:02,000 --> 00:14:04,000
最小的最小公配数

408
00:14:04,000 --> 00:14:04,000
对对对

409
00:14:04,000 --> 00:14:05,000
搞个这个

410
00:14:05,000 --> 00:14:07,000
这个他能够能够整除的地方

411
00:14:07,000 --> 00:14:08,000
就还挺好的

412
00:14:08,000 --> 00:14:09,000
但是问题就来了

413
00:14:09,000 --> 00:14:10,000
我后来我想起来了

414
00:14:10,000 --> 00:14:11,000
你记不记得

415
00:14:11,000 --> 00:14:13,000
那个你们有买最新的

416
00:14:13,000 --> 00:14:16,000
那个 MacBook Pro 的笔记本

417
00:14:16,000 --> 00:14:17,000
就最近两三年的

418
00:14:17,000 --> 00:14:21,000
特别是 13 寸的那个机型

419
00:14:21,000 --> 00:14:21,000
没有

420
00:14:21,000 --> 00:14:22,000
想买

421
00:14:22,000 --> 00:14:24,000
没有人给我们捐款

422
00:14:24,000 --> 00:14:25,000
就是那个

423
00:14:25,000 --> 00:14:27,000
对这个我们

424
00:14:27,000 --> 00:14:29,000
忘了在节目里面说

425
00:14:29,000 --> 00:14:31,000
请大家给我们捐款

426
00:14:31,000 --> 00:14:32,000
想请请见我们

427
00:14:32,000 --> 00:14:34,000
没有人用爱给我们发电的

428
00:14:34,000 --> 00:14:37,000
说回来说回来

429
00:14:37,000 --> 00:14:39,000
就是 13 寸那个机型的

430
00:14:39,000 --> 00:14:40,000
那个屏幕的

431
00:14:40,000 --> 00:14:43,000
那个面板的分辨率是

432
00:14:43,000 --> 00:14:46,000
我记得是 2560 乘以 1600

433
00:14:46,000 --> 00:14:47,000
应该是这样

434
00:14:47,000 --> 00:14:47,000
就是它的

435
00:14:47,000 --> 00:14:50,000
逻辑是 1280 乘以 800

436
00:14:50,000 --> 00:14:51,000
1280 乘以 800

437
00:14:51,000 --> 00:14:52,000
在当下

438
00:14:52,000 --> 00:14:54,000
其实是一个非常窄的

439
00:14:54,000 --> 00:14:55,000
一个显示的面积

440
00:14:55,000 --> 00:14:55,000
对不对

441
00:14:55,000 --> 00:14:57,000
所以呢

442
00:14:57,000 --> 00:14:59,000
苹果后来

443
00:14:59,000 --> 00:15:01,000
我记得应该是在前几年开始的

444
00:15:01,000 --> 00:15:03,000
就应该就是最近这一代

445
00:15:03,000 --> 00:15:03,000
就是那个就是把

446
00:15:03,000 --> 00:15:06,000
就是蝴蝶键盘那一代开始

447
00:15:06,000 --> 00:15:08,000
它的那个出厂默认设置

448
00:15:08,000 --> 00:15:10,000
13 寸的那个 MacBook 的

449
00:15:10,000 --> 00:15:13,000
的那个默认的分辨率

450
00:15:13,000 --> 00:15:16,000
它并不是点对点的

451
00:15:16,000 --> 00:15:17,000
那个清晰的

452
00:15:17,000 --> 00:15:18,000
它用了一个

453
00:15:18,000 --> 00:15:20,000
就它的默认值是一个缩放的

454
00:15:20,000 --> 00:15:21,000
就是它缩放出来

455
00:15:21,000 --> 00:15:23,000
应该是个 1440 乘以 900

456
00:15:23,000 --> 00:15:25,000
的这么一个

457
00:15:25,000 --> 00:15:27,000
逻辑的分辨率

458
00:15:27,000 --> 00:15:29,000
但其实它的物理上

459
00:15:29,000 --> 00:15:30,000
它并除不尽

460
00:15:30,000 --> 00:15:31,000
你就 2560 除以这个

461
00:15:31,000 --> 00:15:32,000
1440 是除不尽的

462
00:15:32,000 --> 00:15:34,000
1260 刚好是 1280 的两倍

463
00:15:34,000 --> 00:15:37,000
所以它虽然说是逻辑上的这个 2 X

464
00:15:37,000 --> 00:15:39,000
但它物理上并不是

465
00:15:39,000 --> 00:15:41,000
它只是没有点到点

466
00:15:41,000 --> 00:15:43,000
就它推荐的那个设置

467
00:15:43,000 --> 00:15:44,000
没有点到点

468
00:15:44,000 --> 00:15:45,000
对对对

469
00:15:45,000 --> 00:15:46,000
它现在我已经完全不

470
00:15:46,000 --> 00:15:47,000
点对点了呀

471
00:15:47,000 --> 00:15:48,000
所有的

472
00:15:48,000 --> 00:15:50,000
但我都是调到点到点了

473
00:15:50,000 --> 00:15:52,000
比如我现在这台 15 寸的

474
00:15:52,000 --> 00:15:54,000
我不用它默认的那个缩放

475
00:15:54,000 --> 00:15:55,000
我就会改成

476
00:15:55,000 --> 00:15:57,000
正好是两倍的那个分辨率

477
00:15:57,000 --> 00:15:58,000
对因为 15 寸

478
00:15:58,000 --> 00:16:00,000
它原生的这个点对点分辨率

479
00:16:00,000 --> 00:16:01,000
应该是 1440 宽的嘛

480
00:16:01,000 --> 00:16:02,000
对吧

481
00:16:02,000 --> 00:16:05,000
但它推荐你设的是 1680 乘 1050

482
00:16:05,000 --> 00:16:06,000
对对对

483
00:16:06,000 --> 00:16:08,000
它都是变成我们叫做 scaled mode

484
00:16:08,000 --> 00:16:09,000
就是缩放模式

485
00:16:09,000 --> 00:16:09,000
对不对

486
00:16:09,000 --> 00:16:11,000
对它可以让你的屏幕

487
00:16:11,000 --> 00:16:12,000
看起来容量更大一点

488
00:16:12,000 --> 00:16:13,000
对对对

489
00:16:13,000 --> 00:16:15,000
因为它就是要展示更多的内容

490
00:16:15,000 --> 00:16:16,000
但是其实这样是会影响

491
00:16:16,000 --> 00:16:16,000
它可以让你的屏幕

492
00:16:16,000 --> 00:16:19,000
让你的视力下降更快一点

493
00:16:19,000 --> 00:16:20,000
其实应该

494
00:16:20,000 --> 00:16:21,000
绝大部分人是看不出来的

495
00:16:21,000 --> 00:16:22,000
但是如果说你对这个

496
00:16:22,000 --> 00:16:24,000
点对点那种有洁癖的话

497
00:16:24,000 --> 00:16:25,000
比如说我们如果要强行

498
00:16:25,000 --> 00:16:27,000
用这个低毛点证

499
00:16:27,000 --> 00:16:29,000
要点对点的话

500
00:16:29,000 --> 00:16:30,000
你在这两个

501
00:16:30,000 --> 00:16:31,000
就是你在最新的

502
00:16:31,000 --> 00:16:32,000
这个 MacBook 笔记本上

503
00:16:32,000 --> 00:16:33,000
是实现不了的

504
00:16:33,000 --> 00:16:34,000
对吧

505
00:16:34,000 --> 00:16:35,000
因为它默认值不是那样子的

506
00:16:35,000 --> 00:16:37,000
所以我都是把那个默认值调

507
00:16:37,000 --> 00:16:38,000
我都是手动

508
00:16:38,000 --> 00:16:41,000
把它改成这个 2 X 的

509
00:16:41,000 --> 00:16:42,000
那个点对点的模式

510
00:16:42,000 --> 00:16:44,000
这样我看起来那些才正常嘛

511
00:16:44,000 --> 00:16:45,000
但这样的后果就是说

512
00:16:45,000 --> 00:16:46,000
你的

513
00:16:46,000 --> 00:16:46,000
你的

514
00:16:46,000 --> 00:16:46,000
你的

515
00:16:46,000 --> 00:16:48,000
可显示的这个实际面积

516
00:16:48,000 --> 00:16:49,000
感觉就变小了嘛

517
00:16:49,000 --> 00:16:51,000
就字更大嘛

518
00:16:51,000 --> 00:16:52,000
对对对

519
00:16:52,000 --> 00:16:54,000
它那个设置不是就是选

520
00:16:54,000 --> 00:16:56,000
你要么选较大文字

521
00:16:56,000 --> 00:16:58,000
要么选更多空间嘛

522
00:16:58,000 --> 00:17:00,000
字很小的空间更大嘛

523
00:17:00,000 --> 00:17:01,000
是的

524
00:17:01,000 --> 00:17:03,000
那它的那个系统设计

525
00:17:03,000 --> 00:17:04,000
就只能这样选嘛

526
00:17:05,000 --> 00:17:05,000
对

527
00:17:05,000 --> 00:17:07,000
那这样就会很影响

528
00:17:07,000 --> 00:17:08,000
就本来之前吧

529
00:17:08,000 --> 00:17:08,000
你说你

530
00:17:08,000 --> 00:17:10,000
只是你做设计的人

531
00:17:10,000 --> 00:17:10,000
有这个问题

532
00:17:10,000 --> 00:17:12,000
你把那个调一下

533
00:17:12,000 --> 00:17:12,000
你这样看出

534
00:17:12,000 --> 00:17:13,000
交付的作品

535
00:17:13,000 --> 00:17:15,000
还是这个点对点清晰的

536
00:17:15,000 --> 00:17:15,000
对不对

537
00:17:15,000 --> 00:17:16,000
但现在这个默认值

538
00:17:16,000 --> 00:17:18,000
变成这个 scale mode

539
00:17:18,000 --> 00:17:19,000
就是说哪怕你交付的作品

540
00:17:19,000 --> 00:17:20,000
是点对点清晰的

541
00:17:20,000 --> 00:17:22,000
最后你就是用户炫

542
00:17:22,000 --> 00:17:23,000
看到的时候

543
00:17:23,000 --> 00:17:25,000
它其实也是被这个 scale 掉了嘛

544
00:17:25,000 --> 00:17:25,000
所以这个事情

545
00:17:25,000 --> 00:17:27,000
我觉得挺扯的

546
00:17:27,000 --> 00:17:28,000
所以他的意思就是

547
00:17:28,000 --> 00:17:29,000
你别纠结这个事情

548
00:17:29,000 --> 00:17:31,000
已经突破了视觉极限了

549
00:17:31,000 --> 00:17:32,000
是吧

550
00:17:32,000 --> 00:17:33,000
iOS 设备的话

551
00:17:33,000 --> 00:17:33,000
没有办法了呀

552
00:17:33,000 --> 00:17:35,000
iOS 至少目前还是清晰的呀

553
00:17:35,000 --> 00:17:36,000
我觉得他的意思

554
00:17:36,000 --> 00:17:37,000
其实是普通用户

555
00:17:37,000 --> 00:17:39,000
根本不应该操心这些事情

556
00:17:39,000 --> 00:17:40,000
对呀

557
00:17:40,000 --> 00:17:40,000
但是就是

558
00:17:40,000 --> 00:17:42,000
这还是一个 compromise

559
00:17:42,000 --> 00:17:43,000
就是说在这个

560
00:17:43,000 --> 00:17:45,000
显卡的这个处理能力

561
00:17:45,000 --> 00:17:46,000
面板的这个

562
00:17:46,000 --> 00:17:48,000
这个叫什么

563
00:17:48,000 --> 00:17:49,000
就是这个显示

564
00:17:49,000 --> 00:17:51,000
就是显卡到面板的连接带宽

565
00:17:51,000 --> 00:17:53,000
以及这个

566
00:17:53,000 --> 00:17:56,000
面板的实际的这个工艺的限制的情况下

567
00:17:56,000 --> 00:17:58,000
做出了这么一个 compromise

568
00:17:58,000 --> 00:18:00,000
但我觉得这毕竟不是这个长远之计

569
00:18:00,000 --> 00:18:02,000
哎

570
00:18:02,000 --> 00:18:03,000
我又想起来

571
00:18:03,000 --> 00:18:05,000
我因为我实际主力机

572
00:18:05,000 --> 00:18:08,000
是 27 寸的那个 iMac 嘛

573
00:18:08,000 --> 00:18:09,000
是 5 K 的屏嘛

574
00:18:09,000 --> 00:18:09,000
哇

575
00:18:09,000 --> 00:18:11,000
那个显卡是想

576
00:18:11,000 --> 00:18:12,000
可以看得出来

577
00:18:12,000 --> 00:18:13,000
它很吃力

578
00:18:13,000 --> 00:18:14,000
你知道吗

579
00:18:14,000 --> 00:18:16,000
我可以感觉到

580
00:18:16,000 --> 00:18:16,000
显卡很吃力

581
00:18:16,000 --> 00:18:18,000
这个构情能力

582
00:18:18,000 --> 00:18:19,000
5 K 的屏幕

583
00:18:19,000 --> 00:18:21,000
然后你渲染的时候

584
00:18:21,000 --> 00:18:21,000
得多大呀

585
00:18:21,000 --> 00:18:23,000
你想想那个 5 K 的屏

586
00:18:23,000 --> 00:18:24,000
你抓个屏

587
00:18:24,000 --> 00:18:25,000
啊

588
00:18:25,000 --> 00:18:25,000
对

589
00:18:25,000 --> 00:18:26,000
抓个屏出来

590
00:18:26,000 --> 00:18:28,000
一个一个 PNG 文件的话

591
00:18:28,000 --> 00:18:29,000
那个也是超大的

592
00:18:29,000 --> 00:18:30,000
就是

593
00:18:30,000 --> 00:18:33,000
那个还是就是无损压缩的嘛

594
00:18:33,000 --> 00:18:33,000
都可能有好几兆了

595
00:18:33,000 --> 00:18:35,000
对呀

596
00:18:35,000 --> 00:18:35,000
anyway

597
00:18:35,000 --> 00:18:37,000
就说回那个 DMALL

598
00:18:37,000 --> 00:18:38,000
DMALL 点阵

599
00:18:38,000 --> 00:18:40,000
就所以就是当时我们就我就试了一下

600
00:18:40,000 --> 00:18:42,000
我就感觉效果还行

601
00:18:42,000 --> 00:18:44,000
然后我就跟这个 Willy 说这个事

602
00:18:44,000 --> 00:18:46,000
然后他还帮我们做了很多其他的事情

603
00:18:46,000 --> 00:18:49,000
因为 DMALL 他应该是我

604
00:18:49,000 --> 00:18:50,000
如果我没记错

605
00:18:50,000 --> 00:18:51,000
应该是我们是

606
00:18:51,000 --> 00:18:53,000
应该是我们网站应该是第一个

607
00:18:53,000 --> 00:18:55,000
正式商用的

608
00:18:55,000 --> 00:18:57,000
贵网站是第一个正式商用的

609
00:18:57,000 --> 00:18:58,000
对对对

610
00:18:58,000 --> 00:19:00,000
然后他就就其实遇到了很多问题

611
00:19:00,000 --> 00:19:01,000
比如说

612
00:19:01,000 --> 00:19:02,000
你像我们上一次节目的时候

613
00:19:02,000 --> 00:19:07,000
不是有这个讨论这个令和这个这个盒子吗

614
00:19:07,000 --> 00:19:07,000
对不对

615
00:19:07,000 --> 00:19:08,000
嗯

616
00:19:08,000 --> 00:19:08,000
他做了吧

617
00:19:08,000 --> 00:19:09,000
我记得对

618
00:19:09,000 --> 00:19:11,000
这个令和次 DMALL 里面

619
00:19:11,000 --> 00:19:15,000
他唯一做了两个令和就是合在一起的

620
00:19:15,000 --> 00:19:16,000
但这个时候其实已经很为难了

621
00:19:16,000 --> 00:19:16,000
很为难了

622
00:19:16,000 --> 00:19:17,000
对不对

623
00:19:17,000 --> 00:19:19,000
一个十像素乘以十像素点

624
00:19:19,000 --> 00:19:21,000
你还要做合一乘以两个

625
00:19:21,000 --> 00:19:23,000
我看了一下

626
00:19:23,000 --> 00:19:24,000
反正也是比较勉强

627
00:19:24,000 --> 00:19:25,000
但是我还鼓动这个 Willy 说

628
00:19:25,000 --> 00:19:28,000
那你要不要去把这个挑战一下极限

629
00:19:28,000 --> 00:19:30,000
把前面那几个都做完

630
00:19:30,000 --> 00:19:31,000
那个叫什么招合

631
00:19:31,000 --> 00:19:31,000
对吧

632
00:19:31,000 --> 00:19:32,000
从招合开始

633
00:19:32,000 --> 00:19:34,000
他说不做了

634
00:19:34,000 --> 00:19:35,000
不做了

635
00:19:35,000 --> 00:19:37,000
我说九项数还有九项数做招合

636
00:19:37,000 --> 00:19:38,000
我天哪

637
00:19:38,000 --> 00:19:39,000
这还不是最难的

638
00:19:39,000 --> 00:19:40,000
还有那个

639
00:19:40,000 --> 00:19:42,000
就是那个日文那个诸事会社

640
00:19:42,000 --> 00:19:45,000
我觉得做大正可能还可以想象

641
00:19:45,000 --> 00:19:46,000
做其他的

642
00:19:46,000 --> 00:19:46,000
我还没想到

643
00:19:46,000 --> 00:19:47,000
我的天哪

644
00:19:47,000 --> 00:19:49,000
那诸事会社怎么办

645
00:19:49,000 --> 00:19:51,000
你不要说这些了

646
00:19:51,000 --> 00:19:52,000
当然是

647
00:19:52,000 --> 00:19:53,000
不要说盒子

648
00:19:53,000 --> 00:19:56,000
就写一个和这个什么雷霆万钧

649
00:19:56,000 --> 00:19:58,000
那个都已经写了一坨一坨的

650
00:19:58,000 --> 00:19:59,000
对

651
00:19:59,000 --> 00:20:02,000
我就担心怕不易赌

652
00:20:02,000 --> 00:20:04,000
然后我就套上之后

653
00:20:04,000 --> 00:20:07,000
我就做了一个 usability test

654
00:20:07,000 --> 00:20:07,000
就是找

655
00:20:07,000 --> 00:20:10,000
主要是找我太太来试了一下

656
00:20:10,000 --> 00:20:12,000
我就把我们有一期节目的

657
00:20:12,000 --> 00:20:13,000
那个就 summary

658
00:20:13,000 --> 00:20:14,000
就是那个叫什么

659
00:20:14,000 --> 00:20:15,000
节目简介

660
00:20:15,000 --> 00:20:15,000
他有一段话

661
00:20:15,000 --> 00:20:16,000
写了一段话

662
00:20:16,000 --> 00:20:18,000
就是 57 期节目有一段话

663
00:20:18,000 --> 00:20:19,000
我先把那个点就换上

664
00:20:19,000 --> 00:20:21,000
然后那些就是点的点都调好

665
00:20:21,000 --> 00:20:22,000
然后我让他来读那段话

666
00:20:22,000 --> 00:20:25,000
基本就还挺挺超乎我意外的

667
00:20:25,000 --> 00:20:26,000
就是还基本上没有出什么差错

668
00:20:26,000 --> 00:20:27,000
嗯

669
00:20:27,000 --> 00:20:28,000
就是一人性还是很好的

670
00:20:28,000 --> 00:20:29,000
嗯

671
00:20:29,000 --> 00:20:29,000
对对对

672
00:20:29,000 --> 00:20:30,000
而且呢主要是你放在

673
00:20:30,000 --> 00:20:33,000
这个有上下文之类的话

674
00:20:33,000 --> 00:20:33,000
没错

675
00:20:33,000 --> 00:20:33,000
没错

676
00:20:33,000 --> 00:20:34,000
可以猜嘛

677
00:20:34,000 --> 00:20:34,000
对吧

678
00:20:34,000 --> 00:20:36,000
有语境的话就可以猜

679
00:20:36,000 --> 00:20:37,000
而且我用的是那个

680
00:20:37,000 --> 00:20:38,000
九九九相数的那款

681
00:20:38,000 --> 00:20:39,000
九相数的那个相对来说

682
00:20:39,000 --> 00:20:41,000
还是看得清楚一些的

683
00:20:41,000 --> 00:20:42,000
七相数那款呢

684
00:20:42,000 --> 00:20:42,000
如果没有上下文

685
00:20:42,000 --> 00:20:43,000
确实有点难度了

686
00:20:43,000 --> 00:20:44,000
嗯

687
00:20:44,000 --> 00:20:46,000
就关键是有语境的话就好

688
00:20:46,000 --> 00:20:46,000
嗯

689
00:20:46,000 --> 00:20:47,000
是的是的

690
00:20:47,000 --> 00:20:47,000
所以我就想

691
00:20:47,000 --> 00:20:49,000
哎反正我们这个网站

692
00:20:49,000 --> 00:20:50,000
看的也不多

693
00:20:50,000 --> 00:20:50,000
对吧

694
00:20:50,000 --> 00:20:51,000
因为大部分都是在这个

695
00:20:51,000 --> 00:20:54,000
就是订订阅订阅在这个

696
00:20:54,000 --> 00:20:54,000
这个

697
00:20:54,000 --> 00:20:56,000
播客客户端里面去

698
00:20:56,000 --> 00:20:58,000
去去看的

699
00:20:58,000 --> 00:21:00,000
也不会说经常去我们网页翻来翻去

700
00:21:00,000 --> 00:21:00,000
对吧

701
00:21:00,000 --> 00:21:02,000
所以我想那不刚好

702
00:21:02,000 --> 00:21:03,000
我们这个网页还可以做的

703
00:21:03,000 --> 00:21:04,000
这个风格

704
00:21:04,000 --> 00:21:05,000
这个别致一点

705
00:21:05,000 --> 00:21:07,000
反正也不怎么常读它嘛

706
00:21:07,000 --> 00:21:07,000
对吧

707
00:21:07,000 --> 00:21:07,000
也没几个字

708
00:21:07,000 --> 00:21:08,000
其实

709
00:21:08,000 --> 00:21:08,000
对

710
00:21:08,000 --> 00:21:09,000
又不像我

711
00:21:09,000 --> 00:21:10,000
你们还要发这个

712
00:21:10,000 --> 00:21:11,000
你们官网这个

713
00:21:11,000 --> 00:21:12,000
type 官网还要发很多这个

714
00:21:12,000 --> 00:21:13,000
博文什么的

715
00:21:13,000 --> 00:21:15,000
我们一般就一期节目

716
00:21:15,000 --> 00:21:16,000
可能不到一百个字

717
00:21:16,000 --> 00:21:16,000
的

718
00:21:16,000 --> 00:21:17,000
这个汉字

719
00:21:17,000 --> 00:21:17,000
对吧

720
00:21:17,000 --> 00:21:18,000
完全没有问题

721
00:21:18,000 --> 00:21:19,000
所以每一期节目来

722
00:21:19,000 --> 00:21:21,000
来看的人也都一百个了

723
00:21:21,000 --> 00:21:22,000
呃

724
00:21:22,000 --> 00:21:23,000
我很怀疑

725
00:21:23,000 --> 00:21:23,000
哈哈哈

726
00:21:23,000 --> 00:21:24,000
我很怀疑

727
00:21:24,000 --> 00:21:25,000
的

728
00:21:25,000 --> 00:21:25,000
anyway

729
00:21:25,000 --> 00:21:26,000
就是就这样的话

730
00:21:26,000 --> 00:21:28,000
我就把那个低毛用起来

731
00:21:28,000 --> 00:21:28,000
然后

732
00:21:28,000 --> 00:21:29,000
但是其实我们还遇到的

733
00:21:29,000 --> 00:21:30,000
其他很大

734
00:21:30,000 --> 00:21:31,000
其他很多问题哈

735
00:21:31,000 --> 00:21:31,000
比如说

736
00:21:31,000 --> 00:21:32,000
嗯

737
00:21:32,000 --> 00:21:35,000
我们上次不是也是讨论这个

738
00:21:35,000 --> 00:21:35,000
那期节目

739
00:21:35,000 --> 00:21:36,000
除了讨论有

740
00:21:36,000 --> 00:21:37,000
有些讨论日本的地方

741
00:21:37,000 --> 00:21:38,000
就很多

742
00:21:38,000 --> 00:21:39,000
那个叫 show notes 里面

743
00:21:39,000 --> 00:21:40,000
有很多这个日文的

744
00:21:40,000 --> 00:21:41,000
这个符号

745
00:21:41,000 --> 00:21:44,000
然后

746
00:21:44,000 --> 00:21:45,000
刚好这个低毛里面

747
00:21:45,000 --> 00:21:46,000
你威力

748
00:21:46,000 --> 00:21:46,000
你

749
00:21:46,000 --> 00:21:48,000
他也做了那个日文的那些什么

750
00:21:48,000 --> 00:21:48,000
就是

751
00:21:48,000 --> 00:21:49,000
对

752
00:21:49,000 --> 00:21:49,000
他有做的

753
00:21:49,000 --> 00:21:50,000
对对

754
00:21:50,000 --> 00:21:51,000
就看我那效果还挺好的

755
00:21:51,000 --> 00:21:52,000
超乎我的意料

756
00:21:52,000 --> 00:21:56,000
后来他他交付给我的就是为了提还是为了这个体积的原因嘛

757
00:21:56,000 --> 00:21:56,000
我就说

758
00:21:56,000 --> 00:21:59,000
我们大概的应该不会讲不会也不会打

759
00:21:59,000 --> 00:21:59,000
主要是哈

760
00:21:59,000 --> 00:22:02,000
也不会用这个什么阿拉伯文和西部来文吧

761
00:22:02,000 --> 00:22:04,000
就把那几个符号给去掉了

762
00:22:04,000 --> 00:22:07,000
然后我问威力说他应该是没有韩文的部分的

763
00:22:07,000 --> 00:22:11,000
因为韩文好像挺可能就是比较难做啊

764
00:22:11,000 --> 00:22:12,000
但我们想一下

765
00:22:12,000 --> 00:22:13,000
好像我们官网也没有韩文

766
00:22:13,000 --> 00:22:15,000
那这个也还也是也就过去了

767
00:22:15,000 --> 00:22:16,000
但是又遇到另外一个问题

768
00:22:16,000 --> 00:22:17,000
就是我们毕竟是一个对吧

769
00:22:17,000 --> 00:22:21,000
面向这个中导员程序员的一个节目嘛

770
00:22:21,000 --> 00:22:26,000
所以有有一有一呃有两期节目是有贴代码的

771
00:22:26,000 --> 00:22:28,000
有一有一小段代码

772
00:22:28,000 --> 00:22:32,000
那么我就需要一个等宽的这个这个拉丁字字符嘛

773
00:22:32,000 --> 00:22:35,000
然后威力就帮我们调了一个这个

774
00:22:35,000 --> 00:22:38,000
最开始是用了一个就气象素嘛

775
00:22:38,000 --> 00:22:40,000
但就是有些这个还是有些问题

776
00:22:40,000 --> 00:22:43,000
然后后来他又专门帮我们定制了一个这个啊

777
00:22:43,000 --> 00:22:45,000
等宽的这个点证字

778
00:22:45,000 --> 00:22:46,000
但是就不是

779
00:22:46,000 --> 00:22:50,000
这个那个严格跟中文有那个等比的关系了

780
00:22:50,000 --> 00:22:51,000
但其实还好

781
00:22:51,000 --> 00:22:54,000
因为我不需要跟中文配配对用嘛

782
00:22:54,000 --> 00:22:58,000
然后另外一个场景就是我们不是之前呃

783
00:22:58,000 --> 00:23:01,000
每期节目五套都会有一句 slogan 嘛

784
00:23:01,000 --> 00:23:03,000
那句 slogan 在我们区的口号是对对对对对

785
00:23:03,000 --> 00:23:06,000
我们那个那个 slogan 在排版上在网页上排版

786
00:23:06,000 --> 00:23:08,000
那句 slogan 是写题牌的

787
00:23:08,000 --> 00:23:09,000
嗯

788
00:23:09,000 --> 00:23:10,000
哈哈哈

789
00:23:10,000 --> 00:23:14,000
所以为了有可能定制了一套写体字的这个丁毛点证的

790
00:23:14,000 --> 00:23:16,000
就是这个英文英文字符啊

791
00:23:16,000 --> 00:23:18,000
当时因为有一个事情过于疯狂

792
00:23:18,000 --> 00:23:21,000
我们就是只是在微信上简单聊了一下

793
00:23:21,000 --> 00:23:23,000
这个事情并没有真的发生

794
00:23:23,000 --> 00:23:25,000
威力说他其实中文也有写题的

795
00:23:25,000 --> 00:23:30,000
哈哈哈

796
00:23:30,000 --> 00:23:32,000
这所以这个写体是威力做的是吧

797
00:23:32,000 --> 00:23:34,000
是为你做的其实还可以吗

798
00:23:34,000 --> 00:23:36,000
这也是调了几次的啊

799
00:23:36,000 --> 00:23:38,000
就是是拉丁字母的写体

800
00:23:38,000 --> 00:23:40,000
我想知道他是自动生成的

801
00:23:40,000 --> 00:23:41,000
就是这是一个程序生成的

802
00:23:41,000 --> 00:23:44,000
还是他一个一个自己去排的一个点

803
00:23:44,000 --> 00:23:45,000
这是自己做的

804
00:23:45,000 --> 00:23:46,000
最开始是那个

805
00:23:46,000 --> 00:23:51,000
呃程序生成其实就就不是那个不是写理是那个叫做叫做那个那个 oblique 是不是

806
00:23:51,000 --> 00:23:53,000
太太

807
00:23:53,000 --> 00:23:54,000
不是以他那个是真写体吗

808
00:23:54,000 --> 00:23:57,000
我有个伪写体就直接把那个点证这个方式拉斜了

809
00:23:57,000 --> 00:23:57,000
嗯

810
00:23:57,000 --> 00:24:00,000
对最最最开始是那个就当时我都没有没有留意到这个问题

811
00:24:00,000 --> 00:24:03,000
因为我我都忘了我们有有用写体的地方

812
00:24:03,000 --> 00:24:06,000
因为最近已经没有用了

813
00:24:06,000 --> 00:24:10,000
得归吴涛说那么多口号都被你忘了

814
00:24:10,000 --> 00:24:11,000
中文用写的是异端啊

815
00:24:11,000 --> 00:24:13,000
中文用写的地方应该用海体吗

816
00:24:13,000 --> 00:24:15,000
不是不是就是我们口都是英文的吗

817
00:24:15,000 --> 00:24:16,000
啊对啊

818
00:24:16,000 --> 00:24:17,000
对所以就是只是因为那个部分

819
00:24:17,000 --> 00:24:24,000
但是我我开始没有意识到后来是我把那个那个丁某 web 不就是部署成费放的放到网上去

820
00:24:24,000 --> 00:24:27,000
然后让威乐威力来看那个效果的时候他发现了

821
00:24:27,000 --> 00:24:30,000
然后他说哎这个写体好像是有点问题

822
00:24:30,000 --> 00:24:31,000
他就修了一下

823
00:24:31,000 --> 00:24:35,000
那给了我单独的一个就之前给了我当做一个这个叫做叫做叫丁几吗

824
00:24:35,000 --> 00:24:51,000
丁几扣的可是那个等宽的后来又做了这个丁几的这个一台 X 就单这这两个都是只包含这个拉丁和这个这个就是常用符号那部分了就其他都有中文肯定没有办法做做写体啊这个这么小的这个情况下

825
00:24:51,000 --> 00:24:53,000
但其实你看那个写体的话

826
00:24:53,000 --> 00:24:58,000
他的那个易读性就要比那个就是正正普通的那个正常版本就差好多了吗

827
00:24:58,000 --> 00:25:00,000
那肯定了嗯就抖吧

828
00:25:00,000 --> 00:25:03,000
就就就真写体的可读性是要差的

829
00:25:03,000 --> 00:25:03,000
但是伪写体那个之前的易读性还是还是挺不错的啊

830
00:25:03,000 --> 00:25:04,000
但是伪写体那个之前的易读性还是还是挺不错的啊

831
00:25:04,000 --> 00:25:05,000
但是伪写体那个之前的易读性还是还是挺不错的啊

832
00:25:05,000 --> 00:25:06,000
但是伪写体那个之前的易读性还是还是挺不错的啊

833
00:25:07,000 --> 00:25:08,000
很奇怪

834
00:25:10,000 --> 00:25:12,000
就是这个网页啊

835
00:25:12,000 --> 00:25:13,000
看习惯了以后

836
00:25:13,000 --> 00:25:17,000
反而就已经习惯了这个点阵看习惯了反而呢

837
00:25:17,000 --> 00:25:23,000
就看比如说咱们那个自弹自串的第三期那个表情符号超清晰的

838
00:25:25,000 --> 00:25:27,000
人都反差感特别强烈是不是

839
00:25:27,000 --> 00:25:27,000
对

840
00:25:31,000 --> 00:25:32,000
这个太魔幻了

841
00:25:32,000 --> 00:25:34,000
就是反正我目前就还挺满意

842
00:25:34,000 --> 00:25:35,000
这个显示器的这个东西

843
00:25:35,000 --> 00:25:35,000
这个显示器的这个东西

844
00:25:35,000 --> 00:25:35,000
这个显示器的这个东西

845
00:25:35,000 --> 00:25:36,000
效果的

846
00:25:36,000 --> 00:25:37,000
虽然说 smoked

847
00:25:37,000 --> 00:25:38,000
刚才有说

848
00:25:38,000 --> 00:25:38,000
如果你仔细看的话

849
00:25:38,000 --> 00:25:39,000
有一些这个

850
00:25:39,000 --> 00:25:40,000
那当然根据你浏览器宽度啊

851
00:25:40,000 --> 00:25:42,000
因为他那个那个芬兰是自适应的吧

852
00:25:42,000 --> 00:25:46,000
在某些宽度下面他就会出现那个那个叫做灰边的问题

853
00:25:46,000 --> 00:25:48,000
但是有些情况下都做你刚好

854
00:25:48,000 --> 00:25:49,000
差好

855
00:25:49,000 --> 00:25:53,000
但是芬兰出来都是整数倍的这个像素就不出现这个就是这个定位

856
00:25:53,000 --> 00:25:56,000
就是半个像素的或者是小于一个像素情况下

857
00:25:56,000 --> 00:25:59,000
它的那个每个边缘都是非常锐利清晰的啊

858
00:25:59,000 --> 00:26:01,000
但还要加这个加这个信号

859
00:26:01,000 --> 00:26:03,000
就是你前提是你在一个真的专业的地方里面

860
00:26:03,000 --> 00:26:04,000
前提是你在一个

861
00:26:04,000 --> 00:26:06,000
真的可以点对点显示的

862
00:26:06,000 --> 00:26:08,000
这个 2 X 或者 3 X 屏幕上才可以

863
00:26:08,000 --> 00:26:08,000
对吧

864
00:26:08,000 --> 00:26:09,000
因为刚才讲了

865
00:26:09,000 --> 00:26:11,000
这个 Mac 的那个问题

866
00:26:11,000 --> 00:26:12,000
其实你特别在意

867
00:26:12,000 --> 00:26:13,000
如果你特别在意这个

868
00:26:13,000 --> 00:26:16,000
就是显示器

869
00:26:16,000 --> 00:26:17,000
或者说是

870
00:26:17,000 --> 00:26:18,000
这个应该

871
00:26:18,000 --> 00:26:20,000
其实这个应该是浏览器带来的

872
00:26:20,000 --> 00:26:21,000
这个次像素渲染

873
00:26:21,000 --> 00:26:22,000
或者是其他的一些

874
00:26:22,000 --> 00:26:24,000
这个抗聚齿渲染效果

875
00:26:24,000 --> 00:26:26,000
你可以在 CSS 里把它关掉

876
00:26:26,000 --> 00:26:26,000
关掉

877
00:26:26,000 --> 00:26:27,000
没有用啊

878
00:26:27,000 --> 00:26:29,000
关掉不解决刚才那个问题

879
00:26:29,000 --> 00:26:31,000
可以一定程度上缓解

880
00:26:31,000 --> 00:26:33,000
因为 CSS 里面

881
00:26:33,000 --> 00:26:34,000
至少很多浏览器都支持

882
00:26:34,000 --> 00:26:35,000
就是这个

883
00:26:35,000 --> 00:26:37,000
anti-alias 的这个设置

884
00:26:37,000 --> 00:26:38,000
我知道

885
00:26:38,000 --> 00:26:38,000
我试过

886
00:26:38,000 --> 00:26:40,000
那个效果比较糟糕

887
00:26:40,000 --> 00:26:42,000
这个还是跟底层操作有关

888
00:26:42,000 --> 00:26:44,000
就是你在 Mac 和 Windows 上

889
00:26:44,000 --> 00:26:46,000
不能使用同样的 CSS 规则

890
00:26:46,000 --> 00:26:47,000
来达到同样的效果

891
00:26:47,000 --> 00:26:48,000
这是最大的问题

892
00:26:48,000 --> 00:26:50,000
可以把那个几个浏览器

893
00:26:50,000 --> 00:26:51,000
兼容的 CSS 全写上

894
00:26:51,000 --> 00:26:52,000
它只要不冲突的话

895
00:26:52,000 --> 00:26:53,000
都可以都写上

896
00:26:53,000 --> 00:26:54,000
就啰嗦一点

897
00:26:54,000 --> 00:26:55,000
不是

898
00:26:55,000 --> 00:26:57,000
就是你用同样的规则

899
00:26:57,000 --> 00:26:58,000
在 Mac 和 Windows 上

900
00:26:58,000 --> 00:26:59,000
得到的效果是不一样的

901
00:26:59,000 --> 00:27:00,000
这是最大的问题

902
00:27:00,000 --> 00:27:00,000
对对对

903
00:27:00,000 --> 00:27:02,000
就是关掉次像素平滑

904
00:27:02,000 --> 00:27:03,000
这个事情

905
00:27:03,000 --> 00:27:04,000
各家的实现方向

906
00:27:04,000 --> 00:27:06,000
都是问题比较多的

907
00:27:06,000 --> 00:27:06,000
对

908
00:27:06,000 --> 00:27:07,000
所以因为这个事情

909
00:27:07,000 --> 00:27:08,000
也不是一个常见的

910
00:27:08,000 --> 00:27:10,000
CSS 规则里面有一条

911
00:27:10,000 --> 00:27:12,000
就是好像叫 text rendering

912
00:27:12,000 --> 00:27:13,000
还是叫 font rendering

913
00:27:13,000 --> 00:27:15,000
然后它现在有两个

914
00:27:15,000 --> 00:27:17,000
应该是 Mozilla 和 WebKit

915
00:27:17,000 --> 00:27:18,000
各有一个实现

916
00:27:18,000 --> 00:27:18,000
但这两个实现

917
00:27:18,000 --> 00:27:20,000
最后得到的效果都是

918
00:27:20,000 --> 00:27:22,000
就在 Mac 上好很多

919
00:27:22,000 --> 00:27:23,000
但是在 Windows 上

920
00:27:23,000 --> 00:27:25,000
就还是十一坨

921
00:27:25,000 --> 00:27:25,000
对对

922
00:27:25,000 --> 00:27:27,000
反正这个问题是比较多的

923
00:27:27,000 --> 00:27:28,000
所以说

924
00:27:28,000 --> 00:27:30,000
刚才郑宇说这条

925
00:27:30,000 --> 00:27:31,000
其实我在开发的时候

926
00:27:31,000 --> 00:27:32,000
我已经试过了

927
00:27:32,000 --> 00:27:32,000
那个效果是比

928
00:27:32,000 --> 00:27:34,000
反正一个是不一致

929
00:27:34,000 --> 00:27:35,000
一个就是说其实挺糟糕的

930
00:27:35,000 --> 00:27:37,000
而且也不能解决刚才说的

931
00:27:37,000 --> 00:27:38,000
比如说你的屏幕

932
00:27:38,000 --> 00:27:40,000
不是点对点导致的这个问题

933
00:27:40,000 --> 00:27:41,000
这个是你不断

934
00:27:41,000 --> 00:27:42,000
软件怎么调做调不了的

935
00:27:42,000 --> 00:27:43,000
因为一个是你在

936
00:27:43,000 --> 00:27:45,000
那个操作系统本身的设置的问题

937
00:27:45,000 --> 00:27:46,000
这个你是改不了用户设置的

938
00:27:46,000 --> 00:27:47,000
对吧

939
00:27:47,000 --> 00:27:49,000
我又不能检测到说

940
00:27:49,000 --> 00:27:50,000
这个用户说

941
00:27:50,000 --> 00:27:50,000
这个不是点对点

942
00:27:50,000 --> 00:27:52,000
我弹个弹窗说

943
00:27:52,000 --> 00:27:53,000
你这个不是点对点

944
00:27:53,000 --> 00:27:54,000
你赶紧把那个点对点弄回来

945
00:27:54,000 --> 00:27:54,000
对吧

946
00:27:54,000 --> 00:27:55,000
这也不现实

947
00:27:55,000 --> 00:28:00,000
然后就是在做完这一套之后

948
00:28:00,000 --> 00:28:01,000
我就再

949
00:28:01,000 --> 00:28:02,000
这应该是

950
00:28:02,000 --> 00:28:03,000
前两周吧

951
00:28:03,000 --> 00:28:05,000
就在刷那个 hacker news

952
00:28:05,000 --> 00:28:06,000
结果发现上面

953
00:28:06,000 --> 00:28:09,000
竟然有人在搞这个

954
00:28:09,000 --> 00:28:10,000
XP.CSS

955
00:28:10,000 --> 00:28:11,000
什么意思

956
00:28:11,000 --> 00:28:14,000
他要用 CSS 来复原

957
00:28:14,000 --> 00:28:15,000
当初的这个

958
00:28:15,000 --> 00:28:17,000
Windows XP 时代

959
00:28:17,000 --> 00:28:17,000
就是那个

960
00:28:17,000 --> 00:28:20,000
那个什么 640×408 像素的

961
00:28:20,000 --> 00:28:21,000
那个显示屏

962
00:28:21,000 --> 00:28:23,000
那种那种那种

963
00:28:23,000 --> 00:28:24,000
就是那种那种像素感

964
00:28:24,000 --> 00:28:26,000
不是我们现在追求的那种

965
00:28:26,000 --> 00:28:27,000
其实也算是了

966
00:28:27,000 --> 00:28:28,000
只是说可能不是

967
00:28:28,000 --> 00:28:29,000
他是从英文

968
00:28:29,000 --> 00:28:31,000
那个事件来来做的

969
00:28:31,000 --> 00:28:32,000
他也提到了说

970
00:28:32,000 --> 00:28:32,000
怎么用

971
00:28:32,000 --> 00:28:33,000
这个 web font 来

972
00:28:33,000 --> 00:28:35,000
来实现这种像素的感

973
00:28:35,000 --> 00:28:36,000
对吧

974
00:28:36,000 --> 00:28:36,000
包括是

975
00:28:36,000 --> 00:28:37,000
就是

976
00:28:37,000 --> 00:28:37,000
就是

977
00:28:37,000 --> 00:28:40,000
以真还原当年的那个 Windows

978
00:28:40,000 --> 00:28:42,000
这个这个常用的那几个字体

979
00:28:42,000 --> 00:28:43,000
比如说像

980
00:28:43,000 --> 00:28:43,000
Verdana

981
00:28:43,000 --> 00:28:44,000
Verdana

982
00:28:44,000 --> 00:28:45,000
Georgia

983
00:28:45,000 --> 00:28:47,000
还像那个 Times New Roman

984
00:28:47,000 --> 00:28:47,000
这些

985
00:28:47,000 --> 00:28:51,000
在关掉这个次像素平滑的

986
00:28:51,000 --> 00:28:51,000
那个

987
00:28:51,000 --> 00:28:53,000
情况下

988
00:28:53,000 --> 00:28:55,000
实现出点对点渲染的感觉

989
00:28:55,000 --> 00:28:55,000
对吧

990
00:28:55,000 --> 00:28:56,000
但是他其实没有

991
00:28:56,000 --> 00:28:56,000
他是用的

992
00:28:56,000 --> 00:28:57,000
也是用这个

993
00:28:57,000 --> 00:28:58,000
因为刚才讲的那个 web font

994
00:28:58,000 --> 00:28:59,000
其实不支持这个

995
00:28:59,000 --> 00:29:01,000
真像素字体

996
00:29:01,000 --> 00:29:02,000
都是也是微像素

997
00:29:02,000 --> 00:29:04,000
也是用那个钉

998
00:29:04,000 --> 00:29:05,000
钉毛的类似的手法

999
00:29:05,000 --> 00:29:06,000
不就是把它做成

1000
00:29:06,000 --> 00:29:07,000
矢量字

1001
00:29:07,000 --> 00:29:09,000
但是是那吹死出来的点

1002
00:29:09,000 --> 00:29:10,000
就是比较整数的

1003
00:29:10,000 --> 00:29:10,000
那这样的

1004
00:29:10,000 --> 00:29:12,000
他在 rendering

1005
00:29:12,000 --> 00:29:13,000
在 masterize 过后

1006
00:29:13,000 --> 00:29:15,000
都得到的还是一个像素化的感觉的

1007
00:29:15,000 --> 00:29:16,000
嘛

1008
00:29:16,000 --> 00:29:19,000
对我看到有两个案例在做这件事情的

1009
00:29:19,000 --> 00:29:21,000
回头我们可以把这两个案例放到这个 shownotes

1010
00:29:21,000 --> 00:29:22,000
里面大家有兴趣的话

1011
00:29:22,000 --> 00:29:23,000
可以点来看一下

1012
00:29:23,000 --> 00:29:24,000
但是我就觉得

1013
00:29:24,000 --> 00:29:27,000
因为他当然一个是因为拉丁字符的那个数量比较少

1014
00:29:27,000 --> 00:29:30,000
而且他那个点也比较好好弄嘛

1015
00:29:30,000 --> 00:29:32,000
就是他的滑样是效果还是比较高的

1016
00:29:32,000 --> 00:29:32,000
后来

1017
00:29:32,000 --> 00:29:33,000
我想了一下说

1018
00:29:33,000 --> 00:29:38,000
那我能不能还原出这个比如说我不还原这个 windows xp 那种比较难的情况下

1019
00:29:38,000 --> 00:29:43,000
我就还原一个这个以前那个叫什么 dos 下面的那种什么 ucdos

1020
00:29:43,000 --> 00:29:45,000
那个中文 dos 环境那种感觉行不行

1021
00:29:45,000 --> 00:29:46,000
对吧

1022
00:29:46,000 --> 00:29:51,000
但是就是因为刚才那个不能严格点对点的那个问题可能还不太好实现

1023
00:29:51,000 --> 00:29:53,000
我们现在反正还在研究吧

1024
00:29:53,000 --> 00:29:56,000
这个吴涛也在最近最近也在做类似风格的事情吧

1025
00:29:56,000 --> 00:30:00,000
所以我们都搞错到一块了

1026
00:30:00,000 --> 00:30:02,000
对现在其实网上有好多那种

1027
00:30:02,000 --> 00:30:03,000
在网页里面跑一个操作系统

1028
00:30:03,000 --> 00:30:06,000
就是跑一个古老的拟真操作系统的那个效果

1029
00:30:06,000 --> 00:30:08,000
他们用的那个字体也差不多吧

1030
00:30:08,000 --> 00:30:09,000
就是虽然不是完全一致

1031
00:30:09,000 --> 00:30:13,000
但也是那种就是古早的 PC

1032
00:30:13,000 --> 00:30:16,000
IBM PC 机里面那个内嵌的那种 room 的字体

1033
00:30:16,000 --> 00:30:18,000
那个还是比较好

1034
00:30:18,000 --> 00:30:22,000
你干脆用 canvas 直接把字体的渲染结果画出来

1035
00:30:22,000 --> 00:30:24,000
你说这个思路倒是可以

1036
00:30:24,000 --> 00:30:28,000
就是用那个就是那个 HTML 5 那个 canvas 那套 API 嘛

1037
00:30:28,000 --> 00:30:28,000
对

1038
00:30:28,000 --> 00:30:30,000
然后直接在里面画

1039
00:30:30,000 --> 00:30:31,000
直接往上画

1040
00:30:31,000 --> 00:30:32,000
但这样就有个问题啊

1041
00:30:32,000 --> 00:30:33,000
你那个文字就不可选了

1042
00:30:33,000 --> 00:30:35,000
至少我们现在做的这种伪像素感

1043
00:30:35,000 --> 00:30:39,000
它其实每个每个字都是可以都是非常 accessible 的

1044
00:30:39,000 --> 00:30:39,000
对

1045
00:30:39,000 --> 00:30:42,000
这他他们做那个拟真操作系统的这一层

1046
00:30:42,000 --> 00:30:45,000
这帮人是无所谓这件事的嘛

1047
00:30:45,000 --> 00:30:48,000
但是如果你想要说我要做一个伪操作系统的风格

1048
00:30:48,000 --> 00:30:50,000
同时又实际上是一个 accessible 的 website

1049
00:30:50,000 --> 00:30:52,000
那的确是非常难

1050
00:30:52,000 --> 00:30:53,000
至少你不能保证跨平台

1051
00:30:54,000 --> 00:30:55,000
对对对

1052
00:30:55,000 --> 00:30:56,000
就这个就比较坑一点

1053
00:30:56,000 --> 00:30:57,000
虽然我但我想一下

1054
00:30:57,000 --> 00:31:00,000
就是如果我的那个要求不是那么高

1055
00:31:00,000 --> 00:31:01,000
我只是要求尽可能的

1056
00:31:02,000 --> 00:31:03,000
像素的对齐

1057
00:31:03,000 --> 00:31:04,000
就包括解决这个

1058
00:31:04,000 --> 00:31:06,000
比如说现在我们那个首页

1059
00:31:06,000 --> 00:31:09,000
它是一个用那个最新的那个 css 3 的那个 grid

1060
00:31:09,000 --> 00:31:10,000
那个就是 grid

1061
00:31:10,000 --> 00:31:12,000
就是网格排布嘛

1062
00:31:12,000 --> 00:31:13,000
反过来不但是他比如说

1063
00:31:13,000 --> 00:31:16,000
比如说我默认打开是一个三三列

1064
00:31:16,000 --> 00:31:17,000
三栏

1065
00:31:17,000 --> 00:31:18,000
嗯

1066
00:31:18,000 --> 00:31:19,000
三三栏

1067
00:31:19,000 --> 00:31:20,000
对三栏就比较难除嘛

1068
00:31:20,000 --> 00:31:23,000
这就可能导致刚才我说的那个这个边缘有灰度

1069
00:31:23,000 --> 00:31:25,000
因为那个半个像素的问题

1070
00:31:25,000 --> 00:31:25,000
对不对

1071
00:31:25,000 --> 00:31:27,000
但如果说有一个什么

1072
00:31:27,000 --> 00:31:28,000
我不用这个三栏

1073
00:31:28,000 --> 00:31:30,000
我就用一栏或者两就双栏

1074
00:31:30,000 --> 00:31:31,000
或者是就四栏一定

1075
00:31:32,000 --> 00:31:34,000
这个就是这发式会来实现的话

1076
00:31:34,000 --> 00:31:38,000
那也可能实现说我能够指定到像素级别的这个宽度

1077
00:31:38,000 --> 00:31:41,000
那至少你说在不同系统上

1078
00:31:41,000 --> 00:31:41,000
他有一定的出

1079
00:31:41,000 --> 00:31:43,000
他至少他多一个像素

1080
00:31:43,000 --> 00:31:43,000
少一个像素

1081
00:31:43,000 --> 00:31:45,000
他至少还是个整数倍嘛

1082
00:31:45,000 --> 00:31:45,000
应该还是可以做的

1083
00:31:45,000 --> 00:31:47,000
我觉得有一些这个机会

1084
00:31:47,000 --> 00:31:54,000
所以就这个是我们官网改头换面

1085
00:31:54,000 --> 00:31:58,000
其实就是都是在听了你们前一期节目的这个鼓噪下面实现的

1086
00:31:58,000 --> 00:32:02,000
当然这里也非常感谢威威力帮这个过程

1087
00:32:02,000 --> 00:32:04,000
非常尽心尽力啊

1088
00:32:04,000 --> 00:32:06,000
帮我们做了那么多的这个定制化

1089
00:32:06,000 --> 00:32:09,000
然后我们也是第一个吃了这个螃蟹的人

1090
00:32:09,000 --> 00:32:12,000
现在好像把网站做成 ritual 风格是一个

1091
00:32:12,000 --> 00:32:14,000
是个潮流

1092
00:32:14,000 --> 00:32:17,000
就是包括在在在文艺界也是有那个

1093
00:32:17,000 --> 00:32:18,000
怎么样在文艺界

1094
00:32:18,000 --> 00:32:21,000
我我想在说在设计界也是

1095
00:32:21,000 --> 00:32:24,000
现在好像兴起了那个 ritual wave 这样一个一个风潮

1096
00:32:24,000 --> 00:32:26,000
尽年一直都流行 ritual 啊

1097
00:32:26,000 --> 00:32:27,000
对啊

1098
00:32:27,000 --> 00:32:28,000
复古风

1099
00:32:28,000 --> 00:32:30,000
但最近比如说那个蒸汽波

1100
00:32:30,000 --> 00:32:31,000
vipo 外啊

1101
00:32:31,000 --> 00:32:31,000
好像

1102
00:32:31,000 --> 00:32:32,000
好像是一个风潮

1103
00:32:32,000 --> 00:32:32,000
是这个名字

1104
00:32:32,000 --> 00:32:34,000
就是特别流行

1105
00:32:34,000 --> 00:32:36,000
这 90 年代的日本流行音乐

1106
00:32:36,000 --> 00:32:39,000
配上那种什么美少女战士

1107
00:32:39,000 --> 00:32:41,000
或者是超出标赛的动画片

1108
00:32:41,000 --> 00:32:46,000
然后现在各种各样的音乐全都被就是整成那个风格

1109
00:32:46,000 --> 00:32:49,000
之前那个哎

1110
00:32:49,000 --> 00:32:50,000
我在提顺便提个打个岔的事

1111
00:32:50,000 --> 00:32:53,000
就是那个叫什么班班代

1112
00:32:53,000 --> 00:32:54,000
中文叫什么

1113
00:32:54,000 --> 00:32:56,000
百代那个百代是吧

1114
00:32:56,000 --> 00:33:00,000
百代在应该是去年年末的时候

1115
00:33:00,000 --> 00:33:01,000
把他之前的一些老人物的音乐

1116
00:33:01,000 --> 00:33:02,000
把他之前的一些老人物的音乐

1117
00:33:02,000 --> 00:33:04,000
就小时候我们看的动画片

1118
00:33:04,000 --> 00:33:05,000
全部给放 youtube 上面去了

1119
00:33:05,000 --> 00:33:09,000
然后我就去追了一遍那个那叫什么来的啊

1120
00:33:09,000 --> 00:33:11,000
魔神英雄传吧

1121
00:33:11,000 --> 00:33:13,000
应该是那个之前转吧

1122
00:33:13,000 --> 00:33:17,000
是那个有个你这边有个山山有一圈彩虹

1123
00:33:17,000 --> 00:33:19,000
什么什么创建山对吧

1124
00:33:19,000 --> 00:33:20,000
然后有好多彩虹

1125
00:33:20,000 --> 00:33:21,000
我把那个又看了一遍

1126
00:33:21,000 --> 00:33:24,000
应该是一个他驾驶一个类似像高达一样的机甲

1127
00:33:24,000 --> 00:33:25,000
对对对

1128
00:33:25,000 --> 00:33:26,000
类高达龙嘛

1129
00:33:26,000 --> 00:33:27,000
还有一个龙嘛

1130
00:33:27,000 --> 00:33:27,000
骑着龙

1131
00:33:27,000 --> 00:33:30,000
我觉得他好像有个有个女主的那个名字叫

1132
00:33:30,000 --> 00:33:31,000
Hemico

1133
00:33:31,000 --> 00:33:31,000
Hemico

1134
00:33:31,000 --> 00:33:34,000
是那个日本的一个女巫的一个名字

1135
00:33:34,000 --> 00:33:36,000
对那个时候这个动画片小时候好火的

1136
00:33:36,000 --> 00:33:38,000
就我们班有个女生就叫 Hemico

1137
00:33:38,000 --> 00:33:39,000
我们给她起了

1138
00:33:39,000 --> 00:33:40,000
对啊

1139
00:33:40,000 --> 00:33:43,000
我当时应该是上小学吧

1140
00:33:43,000 --> 00:33:44,000
对吧

1141
00:33:44,000 --> 00:33:45,000
小学几年级播网

1142
00:33:45,000 --> 00:33:46,000
反正就是那个时候特别火

1143
00:33:46,000 --> 00:33:48,000
一到那个播出的时候

1144
00:33:48,000 --> 00:33:49,000
我就手持电视机里面看

1145
00:33:49,000 --> 00:33:50,000
半年空相的

1146
00:33:50,000 --> 00:33:51,000
而且你放到现在看

1147
00:33:51,000 --> 00:33:53,000
他是做了那个高薪穷制

1148
00:33:53,000 --> 00:33:53,000
不知道怎么

1149
00:33:53,000 --> 00:33:56,000
反正看起来那个 youtube 上面的效果还挺清楚的

1150
00:33:56,000 --> 00:33:57,000
那我就追了一遍

1151
00:33:57,000 --> 00:33:59,000
而且这个片特别坑

1152
00:33:59,000 --> 00:34:01,000
他好像有有有三部

1153
00:34:01,000 --> 00:34:02,000
然后都烂尾了

1154
00:34:02,000 --> 00:34:03,000
就没有播完

1155
00:34:03,000 --> 00:34:04,000
不知道为什么

1156
00:34:04,000 --> 00:34:05,000
是在中国没有播完

1157
00:34:05,000 --> 00:34:06,000
还是没有画完

1158
00:34:06,000 --> 00:34:07,000
就 youtube 上也没有

1159
00:34:07,000 --> 00:34:09,000
就我不知道怎么一回事

1160
00:34:09,000 --> 00:34:10,000
有可能是没有没有画

1161
00:34:10,000 --> 00:34:11,000
有可能是没有画完

1162
00:34:11,000 --> 00:34:11,000
这就很磕

1163
00:34:11,000 --> 00:34:12,000
然后这个故事到时候

1164
00:34:12,000 --> 00:34:14,000
就我那天是他是先放的第一部

1165
00:34:14,000 --> 00:34:16,000
他是一周跟一集嘛

1166
00:34:16,000 --> 00:34:18,000
一集也就十来二十分钟的样子

1167
00:34:18,000 --> 00:34:22,000
然后我最多第一季还差两三集啊

1168
00:34:22,000 --> 00:34:23,000
就可能就追完了

1169
00:34:23,000 --> 00:34:24,000
他就放第二部了

1170
00:34:24,000 --> 00:34:25,000
我说啊

1171
00:34:25,000 --> 00:34:25,000
然后呢

1172
00:34:25,000 --> 00:34:27,000
然后呢

1173
00:34:27,000 --> 00:34:30,000
需要付费解锁

1174
00:34:30,000 --> 00:34:31,000
没有啊

1175
00:34:31,000 --> 00:34:32,000
他也没有这个选项啊

1176
00:34:32,000 --> 00:34:34,000
他是为了卖那个卖手办

1177
00:34:34,000 --> 00:34:38,000
他现在又在出那个那个那个那个机甲的那个手办嘛

1178
00:34:38,000 --> 00:34:38,000
哦

1179
00:34:38,000 --> 00:34:40,000
OK 我想起来了

1180
00:34:40,000 --> 00:34:42,000
他们的机甲非常 Q 版是吧

1181
00:34:42,000 --> 00:34:42,000
对的

1182
00:34:42,000 --> 00:34:45,000
他们现在都很就是整个这个动画片都是那种萌系的

1183
00:34:45,000 --> 00:34:47,000
也比较有 Q 系

1184
00:34:47,000 --> 00:34:48,000
就特别搞笑的那种啊

1185
00:34:48,000 --> 00:34:50,000
对二手是 Q 版高达一样

1186
00:34:50,000 --> 00:34:51,000
对对对

1187
00:34:51,000 --> 00:34:54,000
我当时当时我应该是小时候最喜欢动画片

1188
00:34:54,000 --> 00:34:55,000
那个应该能排到前三吧

1189
00:34:55,000 --> 00:34:56,000
这个天哪

1190
00:34:56,000 --> 00:34:59,000
所以就就又在那里那个 flag 一下

1191
00:34:59,000 --> 00:35:01,000
而他的音乐我觉得他还挺好

1192
00:35:01,000 --> 00:35:05,000
听的就是一直现在都还记得那个感觉这期播节目播出之后

1193
00:35:05,000 --> 00:35:07,000
这个视频的点击量会大增

1194
00:35:07,000 --> 00:35:08,000
哈哈哈哈

1195
00:35:08,000 --> 00:35:10,000
就一看都是都是这个我们 IP 连过

1196
00:35:10,000 --> 00:35:12,000
我们那个 refer 过去了

1197
00:35:12,000 --> 00:35:12,000
对不对

1198
00:35:12,000 --> 00:35:14,000
对吧

1199
00:35:14,000 --> 00:35:15,000
他们那个叫

1200
00:35:15,000 --> 00:35:15,000
对对对

1201
00:35:15,000 --> 00:35:16,000
Vataru

1202
00:35:16,000 --> 00:35:17,000
Vataru 是什么意思

1203
00:35:17,000 --> 00:35:18,000
男主的名字嘛

1204
00:35:18,000 --> 00:35:19,000
Vataru 是男主的名字

1205
00:35:19,000 --> 00:35:21,000
就一般写成汉字那个杜

1206
00:35:21,000 --> 00:35:22,000
杜

1207
00:35:22,000 --> 00:35:23,000
杜江的杜

1208
00:35:23,000 --> 00:35:26,000
杜杜边杜的那个杜对吧

1209
00:35:26,000 --> 00:35:26,000
对

1210
00:35:26,000 --> 00:35:27,000
就是他的名字

1211
00:35:27,000 --> 00:35:31,000
反反这个这个就是最近不知道在怎么怀旧考古吗

1212
00:35:31,000 --> 00:35:31,000
对吧

1213
00:35:31,000 --> 00:35:31,000
对吧

1214
00:35:31,000 --> 00:35:31,000
对吧

1215
00:35:31,000 --> 00:35:31,000
对吧

1216
00:35:31,000 --> 00:35:31,000
对吧

1217
00:35:31,000 --> 00:35:32,000
很多这种情况

1218
00:35:32,000 --> 00:35:32,000
对不对

1219
00:35:32,000 --> 00:35:35,000
然后那个最近也是在那个商场里面

1220
00:35:35,000 --> 00:35:36,000
应该是疫情之前啊

1221
00:35:36,000 --> 00:35:39,000
商场也看到很多那种国产复古的也有

1222
00:35:39,000 --> 00:35:39,000
你知道吧

1223
00:35:39,000 --> 00:35:42,000
你们这边上海有那个大白兔奶汤

1224
00:35:42,000 --> 00:35:43,000
嗯

1225
00:35:43,000 --> 00:35:45,000
这已经很久了吧

1226
00:35:45,000 --> 00:35:47,000
这个十年前就出现了

1227
00:35:47,000 --> 00:35:48,000
没有没有

1228
00:35:48,000 --> 00:35:49,000
他最近我一次

1229
00:35:49,000 --> 00:35:50,000
我可能在其他地方

1230
00:35:50,000 --> 00:35:53,000
但是我是应该是去年就是 19 年末

1231
00:35:53,000 --> 00:35:57,000
下半年在深圳才看到他搞了一整个那个展厅的那种复古的

1232
00:35:57,000 --> 00:36:00,000
而且其实你仔细翻那个时候的那个排版和设计

1233
00:36:00,000 --> 00:36:01,000
我觉得他做的还蛮好的

1234
00:36:01,000 --> 00:36:01,000
是啊

1235
00:36:01,000 --> 00:36:03,000
就是大白兔奶糖的那套的这个设计

1236
00:36:03,000 --> 00:36:04,000
但不知道不知道是谁做的

1237
00:36:04,000 --> 00:36:07,000
可以去可以去找找一期节目

1238
00:36:07,000 --> 00:36:11,000
你们可以去考一下古这个当时是谁做的那个字体的这个设计啊

1239
00:36:11,000 --> 00:36:12,000
他那个全部都定制的

1240
00:36:12,000 --> 00:36:16,000
因为那个时候还没有没有什么数字化设计的手工化的呀

1241
00:36:16,000 --> 00:36:20,000
那个时候美术字的美术字和平面设计的功底

1242
00:36:20,000 --> 00:36:22,000
虽然条件非常简陋

1243
00:36:22,000 --> 00:36:25,000
但是最终水准是非常高的

1244
00:36:25,000 --> 00:36:26,000
在 90 年代电脑普及之后

1245
00:36:26,000 --> 00:36:29,000
就是这个个人桌面出版毁了平面设计

1246
00:36:29,000 --> 00:36:30,000
可以说

1247
00:36:30,000 --> 00:36:30,000
哈哈哈

1248
00:36:30,000 --> 00:36:31,000
哈哈哈

1249
00:36:31,000 --> 00:36:33,000
出字滥造的吧

1250
00:36:33,000 --> 00:36:33,000
就把他叫到那里

1251
00:36:33,000 --> 00:36:34,000
low end

1252
00:36:34,000 --> 00:36:36,000
低端的这种方法

1253
00:36:36,000 --> 00:36:36,000
哎呀

1254
00:36:36,000 --> 00:36:39,000
当年就是所有的师傅都有手上功夫的呀

1255
00:36:39,000 --> 00:36:42,000
就是后来就都都用定了了

1256
00:36:42,000 --> 00:36:43,000
大家就没有手上功夫了

1257
00:36:43,000 --> 00:36:43,000
对

1258
00:36:43,000 --> 00:36:46,000
那个时候我去我跟老师去做校

1259
00:36:46,000 --> 00:36:46,000
做校刊吧

1260
00:36:46,000 --> 00:36:50,000
做初中还是高中校刊去一个印刷厂

1261
00:36:50,000 --> 00:36:53,000
我那个师傅的手艺真的令人太让人太为关注了

1262
00:36:53,000 --> 00:36:55,000
就是从一个剪贴画那种

1263
00:36:55,000 --> 00:36:58,000
就是他实际上是一张一本很厚的书

1264
00:36:58,000 --> 00:37:00,000
然后里面每页都是那种半透明的剪贴画

1265
00:37:00,000 --> 00:37:03,000
然后他从上面踩一下

1266
00:37:03,000 --> 00:37:04,000
然后贴在一个板上

1267
00:37:04,000 --> 00:37:05,000
然后问你这样行不行

1268
00:37:05,000 --> 00:37:06,000
然后再去排版

1269
00:37:06,000 --> 00:37:07,000
然后最后印出来

1270
00:37:07,000 --> 00:37:10,000
那个那个手艺真的让人非常叹服了

1271
00:37:10,000 --> 00:37:11,000
那绝对是

1272
00:37:11,000 --> 00:37:13,000
就是你看现在一个人敲键盘

1273
00:37:13,000 --> 00:37:14,000
晃鼠标

1274
00:37:14,000 --> 00:37:15,000
做出来排版

1275
00:37:15,000 --> 00:37:17,000
那感受是完全不一样的

1276
00:37:17,000 --> 00:37:17,000
是一种

1277
00:37:17,000 --> 00:37:19,000
有那种将意的冲击在里面

1278
00:37:19,000 --> 00:37:21,000
就好像你看一个什么

1279
00:37:21,000 --> 00:37:23,000
看一个什么 letter price

1280
00:37:23,000 --> 00:37:26,000
letter price 的那种那种那种印刷机一样

1281
00:37:26,000 --> 00:37:28,000
就是赏心悦目啊

1282
00:37:28,000 --> 00:37:29,000
不像现在

1283
00:37:29,000 --> 00:37:30,000
那时候都是那个

1284
00:37:30,000 --> 00:37:30,000
对

1285
00:37:30,000 --> 00:37:30,000
对

1287
00:38:00,000 --> 00:38:02,000
他非常清楚

1288
00:38:02,000 --> 00:38:03,000
然后那个边缘啊

1289
00:38:03,000 --> 00:38:04,000
那些都做得非常好

1290
00:38:04,000 --> 00:38:06,000
我觉得这个仔细看那个配色

1291
00:38:06,000 --> 00:38:07,000
都搭的挺棒的

1292
00:38:07,000 --> 00:38:09,000
大白兔的兔毛看了一样

1293
00:38:09,000 --> 00:38:12,000
有毛吗

1294
00:38:12,000 --> 00:38:12,000
那个没有毛

1295
00:38:12,000 --> 00:38:15,000
高清版大白兔

1296
00:38:15,000 --> 00:38:17,000
有一个版本是有毛的

1297
00:38:17,000 --> 00:38:17,000
对

1298
00:38:17,000 --> 00:38:20,000
特别搞笑

1299
00:38:20,000 --> 00:38:20,000
哎

1300
00:38:20,000 --> 00:38:21,000
哎

1301
00:38:21,000 --> 00:38:21,000
等等等等

1302
00:38:21,000 --> 00:38:23,000
我们我们这期节目聊啥

1303
00:38:23,000 --> 00:38:25,000
都被你扯到哪去了

1304
00:38:25,000 --> 00:38:26,000
哎

1305
00:38:26,000 --> 00:38:27,000
不过啊

1306
00:38:27,000 --> 00:38:28,000
我们内核拱荒啊

1307
00:38:28,000 --> 00:38:30,000
这次号作为这个丁毛点正题的

1308
00:38:30,000 --> 00:38:30,000
这个

1309
00:38:30,000 --> 00:38:31,000
这个案例呢

1310
00:38:31,000 --> 00:38:36,000
我其实已经在我们的 type 会员的五月份哈

1311
00:38:36,000 --> 00:38:37,000
这一期里面介绍了啊

1312
00:38:37,000 --> 00:38:37,000
所以呢

1313
00:38:37,000 --> 00:38:45,000
大家如果在会刊里面也可以看到我们这次改版后的内核拱荒的这个网页的效果

1314
00:38:45,000 --> 00:38:46,000
啊

1315
00:38:46,000 --> 00:38:47,000
感谢感谢感谢推荐

1316
00:38:47,000 --> 00:38:50,000
我们发我们回去看一下这个能有多少个点击过来

1317
00:38:50,000 --> 00:38:59,000
所以刚才讲了那么多这个与主题无关的事情

1318
00:38:59,000 --> 00:39:00,000
我们这期节目的聊天呢

1319
00:39:00,000 --> 00:39:01,000
还算是有关吗

1320
00:39:01,000 --> 00:39:03,000
勉强给牵扯上

1321
00:39:03,000 --> 00:39:03,000
OK

1322
00:39:03,000 --> 00:39:04,000
好的

1323
00:39:04,000 --> 00:39:06,000
但是不是今天的主题啊

1324
00:39:06,000 --> 00:39:07,000
我们今天主题讲什么

1325
00:39:07,000 --> 00:39:10,000
这个我想想这个怎么描述

1326
00:39:10,000 --> 00:39:11,000
其实这个今天这个主题呢

1327
00:39:11,000 --> 00:39:13,000
跟我们之前串谈的好几次节目都是有

1328
00:39:13,000 --> 00:39:15,000
或多或少的关联

1329
00:39:15,000 --> 00:39:17,000
那当然了

1330
00:39:17,000 --> 00:39:19,000
我这个都是想好的

1331
00:39:19,000 --> 00:39:21,000
都想很长时间酝酿的啊

1332
00:39:21,000 --> 00:39:22,000
都是有计划的

1333
00:39:22,000 --> 00:39:23,000
对不对

1334
00:39:23,000 --> 00:39:25,000
明明之中早已

1335
00:39:25,000 --> 00:39:25,000
计划没有变好快

1336
00:39:25,000 --> 00:39:28,000
Eric 君是非常用心的

1337
00:39:28,000 --> 00:39:29,000
就像我们两个

1338
00:39:29,000 --> 00:39:30,000
每次来都是像

1339
00:39:30,000 --> 00:39:31,000
打酱油一样

1340
00:39:31,000 --> 00:39:33,000
我们都是很很很欢乐的在打酱油呀

1341
00:39:33,000 --> 00:39:34,000
对

1342
00:39:34,000 --> 00:39:36,000
我们是双重捧人

1343
00:39:36,000 --> 00:39:39,000
但是你们很你们能能能说呀

1344
00:39:39,000 --> 00:39:39,000
对

1345
00:39:39,000 --> 00:39:43,000
我们是之前串谈说讲过那个 unicode 的各种问题哈

1346
00:39:43,000 --> 00:39:46,000
然后包括应该有一最开始的一期也讲过什么

1347
00:39:46,000 --> 00:39:49,000
就是你在键盘上按下一个按键

1348
00:39:49,000 --> 00:39:51,000
那个字怎么出现在屏幕上的整个过程的

1349
00:39:51,000 --> 00:39:51,000
对吧

1350
00:39:51,000 --> 00:39:53,000
但其实今天讲的这个话题呢

1351
00:39:53,000 --> 00:39:57,000
跟这两件事情或多或少是有一定关系的

1352
00:39:57,000 --> 00:39:57,000
对吧

1353
00:39:57,000 --> 00:39:59,000
就是说文件系统

1354
00:39:59,000 --> 00:40:00,000
啊

1355
00:40:00,000 --> 00:40:00,000
大家如果还没看过

1356
00:40:00,000 --> 00:40:02,000
还知道这个什么叫文件系统的话

1357
00:40:02,000 --> 00:40:06,000
现在应该很多这个 00 后没有用 bc 或者 bac 的话

1358
00:40:06,000 --> 00:40:08,000
他可能不 mobile first generation

1359
00:40:08,000 --> 00:40:08,000
对

1360
00:40:08,000 --> 00:40:10,000
就是就是 mobile first

1361
00:40:10,000 --> 00:40:12,000
这一代应该已经不知道什么是文件系统了

1362
00:40:12,000 --> 00:40:13,000
文件系统呢

1363
00:40:13,000 --> 00:40:16,000
就是你打开这个所谓的资源管理器

1364
00:40:16,000 --> 00:40:16,000
对吧

1365
00:40:16,000 --> 00:40:17,000
能看到那个东西

1366
00:40:17,000 --> 00:40:21,000
反正你在像我跟吴涛这个啊

1367
00:40:21,000 --> 00:40:22,000
这个庄团的人呢

1368
00:40:22,000 --> 00:40:23,000
就还知道啊

1369
00:40:23,000 --> 00:40:24,000
还可以有一个命令行

1370
00:40:24,000 --> 00:40:24,000
对吧

1371
00:40:24,000 --> 00:40:27,000
能看到这个路径什么什么的对

1372
00:40:27,000 --> 00:40:28,000
但文件系统

1373
00:40:28,000 --> 00:40:30,000
我们不是聊他本人那些其他各种各样的问题

1374
00:40:30,000 --> 00:40:31,000
怎么用啊

1375
00:40:31,000 --> 00:40:35,000
怎么一些关我们只聊一个事情就是文件系统怎么命名的问题啊

1376
00:40:35,000 --> 00:40:37,000
就是一个文件到底他可以叫什么

1377
00:40:37,000 --> 00:40:38,000
嗯

1378
00:40:38,000 --> 00:40:43,000
然后其实我们也可以扩展到这其他的嘛

1379
00:40:43,000 --> 00:40:44,000
就是关于各种源代码

1380
00:40:44,000 --> 00:40:46,000
还有那些语言啊

1381
00:40:46,000 --> 00:40:49,000
就是我们会涉及到这个命名的事情

1382
00:40:49,000 --> 00:40:51,000
英文他叫什么

1383
00:40:51,000 --> 00:40:53,000
naming convention 吧

1384
00:40:53,000 --> 00:40:53,000
是吧

1385
00:40:53,000 --> 00:40:55,000
他可以叫命名规则啊

1386
00:40:55,000 --> 00:40:57,000
其实会有各种各样的命名规则

1387
00:40:57,000 --> 00:40:57,000
对

1388
00:40:57,000 --> 00:40:58,000
嗯

1389
00:40:58,000 --> 00:41:00,000
但是像

1390
00:41:00,000 --> 00:41:02,000
因为我大家都是 mac 用户吧

1391
00:41:02,000 --> 00:41:04,000
mac 几乎都都都没有规定

1392
00:41:04,000 --> 00:41:06,000
就不会存在这个事情

1393
00:41:06,000 --> 00:41:10,000
但是以前在很早很早以前我们在学命令行还在学道斯的时候

1394
00:41:10,000 --> 00:41:13,000
有各种各样的那个制度要遵守对吧

1395
00:41:13,000 --> 00:41:14,000
对啊

1396
00:41:14,000 --> 00:41:18,000
那时候你们还记得有时候八点三规则吗

1397
00:41:18,000 --> 00:41:18,000
对对对对对

1398
00:41:18,000 --> 00:41:19,000
这个是啊

1399
00:41:19,000 --> 00:41:22,000
这个要我想想一下这个得要在

1400
00:41:22,000 --> 00:41:23,000
呃

1401
00:41:23,000 --> 00:41:25,000
问都是九五之前时代的哦

1402
00:41:25,000 --> 00:41:27,000
应该是问到三二时代的时候

1403
00:41:27,000 --> 00:41:28,000
大家要遵守的一个事情

1404
00:41:28,000 --> 00:41:29,000
对不对

1405
00:41:29,000 --> 00:41:30,000
从温度三点一开始

1406
00:41:30,000 --> 00:41:32,000
支持了常文件名应该是

1407
00:41:32,000 --> 00:41:34,000
但是为了向下兼容

1408
00:41:34,000 --> 00:41:34,000
或者说

1409
00:41:34,000 --> 00:41:35,000
呃

1410
00:41:35,000 --> 00:41:38,000
或者对他做了一套向下兼容的方案

1411
00:41:38,000 --> 00:41:42,000
就是他这个文件名在道斯下面显示的时候还是会显示成八点三

1412
00:41:42,000 --> 00:41:46,000
还是用一个波浪号来展来来来显示一个波浪号加一个数字

1413
00:41:46,000 --> 00:41:48,000
你们跟大家解释一下什么叫八点三好吧

1414
00:41:48,000 --> 00:41:49,000
anyone

1415
00:41:49,000 --> 00:41:51,000
其实我觉得要解释八点三

1416
00:41:51,000 --> 00:41:52,000
先要解释什么是扩展名

1417
00:41:52,000 --> 00:41:56,000
因为其实 mac 上比如说怎么现在 mac 上面默认的情况下还是不显示这个扩展名的

1418
00:41:56,000 --> 00:41:57,000
对不对

1419
00:41:57,000 --> 00:42:00,000
因为 mac 其实即使没有扩展名

1420
00:42:00,000 --> 00:42:02,000
也可以也成立就是在 mac 上面

1421
00:42:02,000 --> 00:42:04,000
那是 windows 不行啊

1422
00:42:04,000 --> 00:42:04,000
是这样的

1423
00:42:04,000 --> 00:42:05,000
是这么来的

1424
00:42:05,000 --> 00:42:10,000
问呃扩展名这个东西最早实际上是七十年代的一个一个发明吧

1425
00:42:10,000 --> 00:42:14,000
当时那个操作的 cpm 应该叫 control 什么

1426
00:42:14,000 --> 00:42:15,000
dc 是 control

1427
00:42:15,000 --> 00:42:16,000
我只记得 c 是 control

1428
00:42:16,000 --> 00:42:20,000
cpm 就是道斯的道斯是从 cpm 超过来了

1429
00:42:20,000 --> 00:42:23,000
相当于然后 cpm 有扩展名这一项

1430
00:42:23,000 --> 00:42:29,000
因为 cpm 的创就是创始人认为在和文件相关的所有的原数据里面

1431
00:42:29,000 --> 00:42:31,000
类型数据是最重要的

1432
00:42:31,000 --> 00:42:33,000
所以类型数据应该是文件名的一部分

1433
00:42:33,000 --> 00:42:35,000
这其实这里是个哲学问题

1434
00:42:35,000 --> 00:42:36,000
就是说一个文件的扩展名

1435
00:42:36,000 --> 00:42:39,000
他其实是定义这个文献是一个什么样的种类

1436
00:42:39,000 --> 00:42:40,000
对不对

1437
00:42:40,000 --> 00:42:44,000
然后这个种类这个信息是否是应该体现在这个名字里面

1438
00:42:44,000 --> 00:42:46,000
还是说体现在一个什么别的地方

1439
00:42:46,000 --> 00:42:48,000
比如说刚才艾瑞克也提到

1440
00:42:48,000 --> 00:42:50,000
其实 mac 里面你不用扩展名也还可以

1441
00:42:50,000 --> 00:42:50,000
对吧

1442
00:42:50,000 --> 00:42:55,000
他因为他有一些别的方法可以判断这个文件是一个什么样的类型的文件

1443
00:42:55,000 --> 00:42:59,000
比如说我们常见那个方式有一个什么 magic number

1444
00:42:59,000 --> 00:42:59,000
对吧

1445
00:42:59,000 --> 00:43:01,000
就是在文件开头可能有几个字

1446
00:43:01,000 --> 00:43:02,000
mac

1447
00:43:02,000 --> 00:43:04,000
我想 mac 是怎么实现的

1448
00:43:04,000 --> 00:43:06,000
mac 在资源

1449
00:43:06,000 --> 00:43:09,000
他一个叫中文叫什么资源差

1450
00:43:09,000 --> 00:43:10,000
这个 fork 嘛

1451
00:43:10,000 --> 00:43:13,000
就在很早以前就是这个就更复杂

1452
00:43:13,000 --> 00:43:17,000
它好像是经典就是 mac classic 里面那个概念

1453
00:43:17,000 --> 00:43:18,000
对就 classical 嘛

1454
00:43:18,000 --> 00:43:19,000
对啊

1455
00:43:19,000 --> 00:43:21,000
因为你那个 ost 后面又不又不一样了

1456
00:43:21,000 --> 00:43:23,000
因为 ost 本质上是个 unix

1457
00:43:23,000 --> 00:43:26,000
对 unix 的哲学就是这个文件是不是可执行文件

1458
00:43:26,000 --> 00:43:28,000
那我让他可执行给他可执行的权限

1459
00:43:28,000 --> 00:43:29,000
他就是可执行文件

1460
00:43:29,000 --> 00:43:35,000
那是然后因为这实际上是不把元数据不把文件类型是什么

1461
00:43:35,000 --> 00:43:37,000
这个元数据存在任何地方的

1462
00:43:37,000 --> 00:43:40,000
就 unix 里面上面专门有一个命令的 file 嘛

1463
00:43:40,000 --> 00:43:41,000
你用 file

1464
00:43:41,000 --> 00:43:43,000
它是一个启发式的探针

1465
00:43:43,000 --> 00:43:45,000
他会去看这个文件看起来像猜嘛

1466
00:43:45,000 --> 00:43:48,000
就是怎么判断一个文件像什么

1467
00:43:48,000 --> 00:43:49,000
就是他有很多方法嘛

1468
00:43:49,000 --> 00:43:51,000
就是如果不看文件名的情况下

1469
00:43:51,000 --> 00:43:53,000
就是说你看可以看文件头部

1470
00:43:53,000 --> 00:43:55,000
他通常一些这种文件格式

1471
00:43:55,000 --> 00:43:58,000
他在头部都会有些特殊的一个标记或者一个什么结构

1472
00:43:58,000 --> 00:43:58,000
对吧

1473
00:43:58,000 --> 00:43:59,000
他会说这是一个文件名的结构

1474
00:43:59,000 --> 00:43:59,000
这是一个图片

1475
00:43:59,000 --> 00:44:01,000
这是一个什么 word 文档

1476
00:44:01,000 --> 00:44:05,000
这是一个什么 mp 3 的一个音频

1477
00:44:05,000 --> 00:44:05,000
举个例子

1478
00:44:05,000 --> 00:44:06,000
是这样子

1479
00:44:06,000 --> 00:44:08,000
这就好像后来还衍生

1480
00:44:08,000 --> 00:44:11,000
就因此而衍生出了一些所谓 polyglot 文件

1481
00:44:11,000 --> 00:44:14,000
就这个文件同时是很多种东西

1482
00:44:14,000 --> 00:44:15,000
比如说他同时一张照片

1483
00:44:15,000 --> 00:44:16,000
然后同时

1484
00:44:16,000 --> 00:44:18,000
然后又是一个 rr 压缩文档

1485
00:44:20,000 --> 00:44:20,000
对对

1486
00:44:20,000 --> 00:44:24,000
这种就是属于那个专门专门制作出来的这种 hack 嘛

1487
00:44:25,000 --> 00:44:28,000
但其实说回来就是说

1488
00:44:28,000 --> 00:44:29,000
那 windows

1489
00:44:29,000 --> 00:44:32,000
里面采取的一个方案就是说我他 windows 上没有没有像类似

1490
00:44:32,000 --> 00:44:33,000
刚才你说那个 file 这个命令

1491
00:44:33,000 --> 00:44:34,000
他其实没有对应的东西

1492
00:44:34,000 --> 00:44:35,000
对吧

1493
00:44:35,000 --> 00:44:38,000
他就说我怎么知道这个文件是个什么类是个什么东西呢

1494
00:44:38,000 --> 00:44:39,000
是个什么种类呢

1495
00:44:39,000 --> 00:44:41,000
你告诉我了

1496
00:44:41,000 --> 00:44:42,000
有用户告诉他

1497
00:44:42,000 --> 00:44:43,000
对你对啊

1498
00:44:43,000 --> 00:44:43,000
你告诉我了

1499
00:44:43,000 --> 00:44:45,000
你在这个名字最后下个

1500
00:44:45,000 --> 00:44:46,000
你说点 jpg

1501
00:44:46,000 --> 00:44:47,000
那可能就是一个压缩的图片

1502
00:44:47,000 --> 00:44:48,000
对吧

1503
00:44:48,000 --> 00:44:49,000
那是个点 mp 3

1504
00:44:49,000 --> 00:44:51,000
那可能就是一个这个音频文件

1505
00:44:51,000 --> 00:44:51,000
对吧

1506
00:44:51,000 --> 00:44:53,000
你要是点个 mp 4

1507
00:44:53,000 --> 00:44:53,000
那就是个视频

1508
00:44:53,000 --> 00:44:54,000
对不对

1509
00:44:54,000 --> 00:44:55,000
然后就就如此了呀

1510
00:44:55,000 --> 00:44:58,000
就是会搞了这么一套这个扩展名

1511
00:44:58,000 --> 00:44:59,000
这么一个概念来描述这件事情

1512
00:44:59,000 --> 00:45:00,000
然后嗯

1513
00:45:00,000 --> 00:45:01,000
到死

1514
00:45:01,000 --> 00:45:05,000
我记得当时 8.3 是因为他只能存 11 个字符宽

1515
00:45:05,000 --> 00:45:05,000
对吧

1516
00:45:05,000 --> 00:45:08,000
八个名字加一个点

1517
00:45:08,000 --> 00:45:11,000
再加三个字母的这个扩展名就就齐活了

1518
00:45:11,000 --> 00:45:12,000
最多就这样

1519
00:45:12,000 --> 00:45:17,000
所以当时的文件名最多只能是八个字符

1520
00:45:17,000 --> 00:45:18,000
然后扩展名呢

1521
00:45:18,000 --> 00:45:19,000
最多呢

1522
00:45:19,000 --> 00:45:20,000
也就只有三个字符

1523
00:45:20,000 --> 00:45:21,000
就是就到此

1524
00:45:21,000 --> 00:45:23,000
里面他的这个这个限制非常严格

1525
00:45:23,000 --> 00:45:25,000
所以就简称 8.3

1526
00:45:25,000 --> 00:45:27,000
其实我当时一直一直

1527
00:45:27,000 --> 00:45:29,000
我一再想不起来了

1528
00:45:29,000 --> 00:45:29,000
就是说

1529
00:45:29,000 --> 00:45:30,000
最多三个

1530
00:45:30,000 --> 00:45:32,000
那其实当时一个或者两个用的多吗

1531
00:45:32,000 --> 00:45:34,000
点 c 啊

1532
00:45:34,000 --> 00:45:34,000
啊

1533
00:45:34,000 --> 00:45:35,000
对啊

1534
00:45:35,000 --> 00:45:36,000
点 h 啊

1535
00:45:36,000 --> 00:45:39,000
哈哈哈哈

1536
00:45:39,000 --> 00:45:41,000
你都不用投啊

1537
00:45:41,000 --> 00:45:42,000
哈哈

1538
00:45:42,000 --> 00:45:43,000
明白明白

1539
00:45:43,000 --> 00:45:44,000
嗯

1540
00:45:44,000 --> 00:45:45,000
呀

1541
00:45:45,000 --> 00:45:48,000
所以现在就是讲说我们今天讲这个命名嘛

1542
00:45:48,000 --> 00:45:49,000
那命名的话

1543
00:45:49,000 --> 00:45:51,000
首先是一个文件名的长度问题

1544
00:45:51,000 --> 00:45:52,000
对吧

1545
00:45:52,000 --> 00:45:53,000
呃

1546
00:45:53,000 --> 00:45:58,000
所以现在刚才说的像 dos 的他的限制的是只能有八个字符

1547
00:45:58,000 --> 00:45:59,000
然后后面呢

1548
00:45:59,000 --> 00:46:04,000
到 windows 后面就最多是就可以有 255 个字符了

1549
00:46:04,000 --> 00:46:05,000
那个的多少长也可以啊

1550
00:46:05,000 --> 00:46:07,000
然后扩展名的话

1551
00:46:07,000 --> 00:46:08,000
嗯

1552
00:46:08,000 --> 00:46:10,000
好像像后面给四个字母也可以的

1553
00:46:10,000 --> 00:46:10,000
对吧

1554
00:46:10,000 --> 00:46:13,000
反正 unix 的话是随便的都无所谓的

1555
00:46:13,000 --> 00:46:15,000
那个那有几个字母都无所谓

1556
00:46:15,000 --> 00:46:16,000
对吧

1557
00:46:16,000 --> 00:46:19,000
unix 实际上实际上也没有扩展名这个概念

1558
00:46:19,000 --> 00:46:25,000
只不过后来扩展名这个扩展名这一套东西

1559
00:46:25,000 --> 00:46:27,000
归根结底还是有他意还是有意义的

1560
00:46:27,000 --> 00:46:29,000
因为你人不可能去扩展名的这个概念是吧

1561
00:46:29,000 --> 00:46:32,000
你不能去查看文件的额外的 metadata

1562
00:46:32,000 --> 00:46:36,000
人只能能人能看到的基本上就是一个呃文件名

1563
00:46:36,000 --> 00:46:39,000
所以文件名作为扩展名作为他一套还是有还是有意义的

1564
00:46:39,000 --> 00:46:40,000
所以在后面

1565
00:46:40,000 --> 00:46:47,000
呃 unix 和 mac 之类也其实也都怎么怎么说从善如流随大流吧

1566
00:46:47,000 --> 00:46:53,000
呃扩展名当成了文件的呃类型判断机制的一部分

1567
00:46:53,000 --> 00:46:54,000
但是归根结底

1568
00:46:54,000 --> 00:46:57,000
links 上面实际上是没有扩展名这个概念的

1569
00:46:57,000 --> 00:46:57,000
就跟 mac 一样了

1570
00:46:57,000 --> 00:46:58,000
嗯

1571
00:46:58,000 --> 00:46:58,000
哎

1572
00:46:58,000 --> 00:47:01,000
其实你们想没想这可能是这个叫什么来的

1573
00:47:01,000 --> 00:47:05,000
就是图形界面的一个问题还是怎么着

1574
00:47:05,000 --> 00:47:08,000
就是你在一个纯命令行的界面下面

1575
00:47:08,000 --> 00:47:09,000
cli 嘛

1576
00:47:09,000 --> 00:47:13,000
我们叫 common interface 交互的方式是一定是一个

1577
00:47:13,000 --> 00:47:15,000
你叫什么叫动兵结构对吧

1578
00:47:15,000 --> 00:47:16,000
我记得说 1000 枪一个命令

1579
00:47:16,000 --> 00:47:19,000
然后执行什么样的一个参数就是那个参数就是那个文件名嘛

1580
00:47:19,000 --> 00:47:21,000
就是这个时候你已经知道了

1581
00:47:21,000 --> 00:47:25,000
你要用什么东西去处理这个后面那个那个宾语对吧

1582
00:47:25,000 --> 00:47:26,000
那个那个文件

1583
00:47:26,000 --> 00:47:28,000
但其实你在这个呃比如说 windows 里面

1584
00:47:28,000 --> 00:47:30,000
你是要有一个这么一个感觉

1585
00:47:30,000 --> 00:47:32,000
就是比如你在那个资源管理器里面

1586
00:47:32,000 --> 00:47:34,000
你你双击一个图片

1587
00:47:34,000 --> 00:47:36,000
你的想法是把它打开对吧

1588
00:47:36,000 --> 00:47:39,000
这个时候你以一个暗含的假设是说你用什么把它打开

1589
00:47:39,000 --> 00:47:41,000
这里存在一个就是绑定的一个关系

1590
00:47:42,000 --> 00:47:42,000
对不对

1591
00:47:42,000 --> 00:47:43,000
他不是一个动兵

1592
00:47:43,000 --> 00:47:44,000
对

1593
00:47:44,000 --> 00:47:47,000
windows 打开文件的机制也是跟那个啊

1594
00:47:47,000 --> 00:47:48,000
扩展名相关的嘛

1595
00:47:48,000 --> 00:47:53,000
他在注册表里面把所有的扩展名对应了一个打开工具

1596
00:47:53,000 --> 00:47:54,000
所以就很蠢了

1597
00:47:54,000 --> 00:47:55,000
很死板了

1598
00:47:55,000 --> 00:47:57,000
就这里面就是一个哲学问题嘛

1599
00:47:57,000 --> 00:47:58,000
是你先想到了

1600
00:47:58,000 --> 00:47:59,000
用什么工具

1601
00:47:59,000 --> 00:48:01,000
你先想到用什么东西打开

1602
00:48:01,000 --> 00:48:02,000
然后你再去找那个文件

1603
00:48:02,000 --> 00:48:04,000
还是说你先找到那个文件

1604
00:48:04,000 --> 00:48:08,000
然后你要你要用这个你要用你要打开这个文件

1605
00:48:08,000 --> 00:48:11,000
然后再想这个这个文件是有对应的是一个什么工具来打开

1606
00:48:11,000 --> 00:48:15,000
就这里面我觉得有一个这个逻辑的前后的一个关系

1607
00:48:15,000 --> 00:48:16,000
对吧

1608
00:48:16,000 --> 00:48:18,000
而且像 mac 的话

1609
00:48:18,000 --> 00:48:22,000
他没有这个扩展名是因为他其实是他是那个 gui 的图形

1610
00:48:22,000 --> 00:48:23,000
是然后呢

1611
00:48:23,000 --> 00:48:26,000
他把这些东西啊都不用写在

1612
00:48:26,000 --> 00:48:28,000
就是不用当成扩展名

1613
00:48:28,000 --> 00:48:30,000
他写在文件名里面

1614
00:48:30,000 --> 00:48:30,000
嗯

1615
00:48:30,000 --> 00:48:33,000
我就说就老的那个 mac 他们是他他用那个 fork 嘛

1616
00:48:33,000 --> 00:48:35,000
就是那个 resource fork 资源差嘛

1617
00:48:35,000 --> 00:48:38,000
他其实是写在文件里头的

1618
00:48:38,000 --> 00:48:41,000
这个概念可能要要给大家解释一下

1619
00:48:41,000 --> 00:48:44,000
这个东西其实很除非你对这个底层非常了解啊

1620
00:48:44,000 --> 00:48:47,000
你不然其实你根本不会想到这么一个结构

1621
00:48:47,000 --> 00:48:48,000
就是这个这个 resource fork

1622
00:48:48,000 --> 00:48:49,000
到底是个啥

1623
00:48:49,000 --> 00:48:50,000
嗯

1624
00:48:50,000 --> 00:48:54,000
其实你你这么想你创建了一个空白的一个文本文件

1625
00:48:54,000 --> 00:48:55,000
对吧

1626
00:48:55,000 --> 00:48:55,000
嗯

1627
00:48:55,000 --> 00:48:58,000
然后这个文件在一个最普通的一个文件系统里面

1628
00:48:58,000 --> 00:48:58,000
他能记录啥

1629
00:48:58,000 --> 00:48:59,000
这个文件叫什么名字

1630
00:48:59,000 --> 00:49:00,000
对吧

1631
00:49:00,000 --> 00:49:02,000
有些原数据什么是什么时候创建的

1632
00:49:02,000 --> 00:49:03,000
有多有多大尺寸

1633
00:49:03,000 --> 00:49:05,000
然后就是文件的这个所谓的内容了嘛

1634
00:49:05,000 --> 00:49:07,000
就是假设空的话就是一个零字节的

1635
00:49:07,000 --> 00:49:09,000
就是临长的一个内容了

1636
00:49:09,000 --> 00:49:12,000
那这个时候你会会会想说那这个文件是什么类型

1637
00:49:12,000 --> 00:49:14,000
这个信息到底存在哪里的问题

1638
00:49:14,000 --> 00:49:14,000
对吧

1639
00:49:14,000 --> 00:49:20,000
刚才我们开始讲了这个 dos 和这个 windows 的方案是说存在这个文件的扩展名里面

1640
00:49:20,000 --> 00:49:20,000
对吧

1641
00:49:20,000 --> 00:49:23,000
就是最后那个点的后面那个就是文件的扩展名

1642
00:49:23,000 --> 00:49:24,000
那这个信息就已经包含了

1643
00:49:24,000 --> 00:49:26,000
然后这个 mac os 就是不是我们现在就有叫叫叫做 mac os

1644
00:49:26,000 --> 00:49:29,000
的这么一个版本

1645
00:49:29,000 --> 00:49:32,000
而是说比如说是 mac os 789

1646
00:49:32,000 --> 00:49:40,000
这个时候他其实在文件系统里面有一个专门存储这种原信息的原数据的地方

1647
00:49:40,000 --> 00:49:42,000
这个地方叫做叫做这个资源差 resource fork

1648
00:49:42,000 --> 00:49:44,000
这个实现性也比较比较磨叽

1649
00:49:44,000 --> 00:49:48,000
就是他是在独立于这个文件本身之外的一个地方去存储这个信息的

1650
00:49:48,000 --> 00:49:49,000
有了这个东西之后

1651
00:49:49,000 --> 00:49:51,000
那你的或者有没有这个扩展名其实已经不重要了

1652
00:49:51,000 --> 00:49:51,000
对不对

1653
00:49:51,000 --> 00:49:56,000
因为这个这个文件类型是存在那个原数据那个资源差里面的

1654
00:49:56,000 --> 00:49:56,000
他

1655
00:49:56,000 --> 00:49:57,000
这样的对应就比较灵活嘛

1656
00:49:57,000 --> 00:49:58,000
对

1657
00:49:58,000 --> 00:49:59,000
但这样也就是有一个代价

1658
00:49:59,000 --> 00:50:02,000
就是他其实首先他跟别的系统的兼容性就比较差

1659
00:50:02,000 --> 00:50:04,000
比如你把一个文件从从

1660
00:50:04,000 --> 00:50:05,000
但那个时候没有没有什么网络

1661
00:50:05,000 --> 00:50:07,000
可能这种情况倒不是特别常出现

1662
00:50:07,000 --> 00:50:09,000
但你知道现在有时候你要把这个文件

1663
00:50:09,000 --> 00:50:14,000
比如从那个经典版的 mac os 发到一个这个 windows xv 上面

1664
00:50:14,000 --> 00:50:15,000
或者 windows 9 我上面去

1665
00:50:15,000 --> 00:50:18,000
这个时候那个资源差是一个 mac os 的实现细节嘛

1666
00:50:18,000 --> 00:50:20,000
他在 windows 上面是没有的

1667
00:50:20,000 --> 00:50:21,000
这个时候你怎么办

1668
00:50:21,000 --> 00:50:25,000
所以经常会把这个 mac 的文件拷到 windows 上

1669
00:50:25,000 --> 00:50:26,000
会多出来一套

1670
00:50:26,000 --> 00:50:27,000
对嘛

1671
00:50:27,000 --> 00:50:27,000
对嘛

1672
00:50:27,000 --> 00:50:30,000
就包括你现在用那个我们可能下期节目讲

1673
00:50:30,000 --> 00:50:32,000
NAS 的时候啊

1674
00:50:32,000 --> 00:50:34,000
就是我们之前不是有期讲过 NAS 吗

1675
00:50:34,000 --> 00:50:35,000
但其实没有提到这个问题

1676
00:50:35,000 --> 00:50:39,000
比如说因为现在基本上所有 NAS 系统都是以这个 linux 系统

1677
00:50:39,000 --> 00:50:41,000
或者是 windows 系统为主的嘛

1678
00:50:41,000 --> 00:50:45,000
你一个 mac 的客户端去访问这个 NAS 的时候

1679
00:50:45,000 --> 00:50:48,000
那他的那个资源差又变成什么了

1680
00:50:48,000 --> 00:50:48,000
对吧

1681
00:50:48,000 --> 00:50:50,000
就变成你看上去那个文件变成两个文件

1682
00:50:50,000 --> 00:50:51,000
一个文件不只过去

1683
00:50:51,000 --> 00:50:52,000
两个文件

1684
00:50:52,000 --> 00:50:54,000
有一个文件是描述到原数据信息的

1685
00:50:54,000 --> 00:50:55,000
然后那个文件呢

1686
00:50:55,000 --> 00:50:56,000
在其他系统上

1687
00:50:56,000 --> 00:50:56,000
是没有用的

1688
00:50:56,000 --> 00:50:58,000
就跟就跟垃圾一样的

1689
00:50:58,000 --> 00:50:58,000
只有 mac 能用

1690
00:50:58,000 --> 00:51:03,000
所以就是从从别的那个超好笑的角度来看

1691
00:51:03,000 --> 00:51:06,000
这个 mac 的用户就是一个到处乱扔垃圾的这么一个人

1692
00:51:06,000 --> 00:51:07,000
对吧

1693
00:51:07,000 --> 00:51:10,000
所以我觉得两方两方互相都看对方不是也吧

1694
00:51:10,000 --> 00:51:12,000
windows 不是会留下那个什么 thumbnail

1695
00:51:12,000 --> 00:51:13,000
mac 也会啊

1696
00:51:13,000 --> 00:51:15,000
有那个 ds 叫什么 ds store 吧

1697
00:51:15,000 --> 00:51:16,000
对

1698
00:51:16,000 --> 00:51:18,000
那个也是一个就是点 ds store 开始

1699
00:51:18,000 --> 00:51:20,000
一个文件夹会多一个出来

1700
00:51:20,000 --> 00:51:22,000
每个文件夹都会有一个非常烦人的

1701
00:51:22,000 --> 00:51:25,000
像 svn 一样的很烦人

1702
00:51:25,000 --> 00:51:25,000
嗯

1703
00:51:25,000 --> 00:51:25,000
对

1704
00:51:26,000 --> 00:51:26,000
嗯

1705
00:51:26,000 --> 00:51:28,000
车车远了

1706
00:51:28,000 --> 00:51:29,000
就是这些都是学都是考古了

1707
00:51:29,000 --> 00:51:30,000
对吧

1708
00:51:30,000 --> 00:51:31,000
其实包括这个今年的 macos

1709
00:51:31,000 --> 00:51:35,000
我相信应该我们你们有谁用过今天把 macos 吗

1710
00:51:35,000 --> 00:51:39,000
我是没有我用我只在我只在讯息里跑过

1711
00:51:39,000 --> 00:51:40,000
ok

1712
00:51:40,000 --> 00:51:45,000
然后这个 windows 95 之前的版本

1713
00:51:45,000 --> 00:51:46,000
这个我们应该还都用过吧

1714
00:51:46,000 --> 00:51:47,000
我们都用过

1715
00:51:47,000 --> 00:51:50,000
对我当年还用 wps 排版呢

1716
00:51:50,000 --> 00:51:51,000
哎呦

1717
00:51:51,000 --> 00:51:54,000
wps 是图形版还是这个 dos 版

1718
00:51:54,000 --> 00:51:55,000
dos 版的啊

1719
00:51:55,000 --> 00:51:56,000
uc dos

1720
00:51:56,000 --> 00:51:57,000
就是那个进去的啊

1721
00:51:57,000 --> 00:51:58,000
用智能 abcwps

1722
00:51:58,000 --> 00:51:59,000
然后暴露了年龄哈

1723
00:51:59,000 --> 00:52:01,000
我们都是用过那个时代软件的

1724
00:52:01,000 --> 00:52:02,000
是

1725
00:52:02,000 --> 00:52:02,000
哈哈哈

1726
00:52:02,000 --> 00:52:04,000
而且还不是那个 wzig 的

1727
00:52:04,000 --> 00:52:04,000
对

1728
00:52:04,000 --> 00:52:06,000
都是要预览预览在预览

1729
00:52:06,000 --> 00:52:07,000
等等啊

1730
00:52:07,000 --> 00:52:12,000
那个时代除了 wps 还有一个 ci 界面下的排版工具

1731
00:52:12,000 --> 00:52:14,000
ccd 一还是叫什么

1732
00:52:14,000 --> 00:52:15,000
啊

1733
00:52:15,000 --> 00:52:18,000
对对对对对对对对对对对对对对对对对对对对对对没错

1734
00:52:18,000 --> 00:52:18,000
是的

1735
00:52:18,000 --> 00:52:20,000
有的对嗯

1736
00:52:20,000 --> 00:52:23,000
但是我们有主要我们用过那个对我知道嗯

1737
00:52:23,000 --> 00:52:24,000
但是没用的

1738
00:52:24,000 --> 00:52:24,000
哎

1739
00:52:24,000 --> 00:52:25,000
其实你你你那个下来

1740
00:52:25,000 --> 00:52:25,000
那个时候还是买的啊

1741
00:52:25,000 --> 00:52:26,000
蛮高级的

1742
00:52:26,000 --> 00:52:27,000
那个时候因为不能

1743
00:52:27,000 --> 00:52:28,000
所见即所得

1744
00:52:28,000 --> 00:52:30,000
就是纯字符界面的情况下

1745
00:52:30,000 --> 00:52:31,000
你其实是在写

1746
00:52:31,000 --> 00:52:31,000
markdown 差不多

1747
00:52:31,000 --> 00:52:32,000
这种感觉

1748
00:52:32,000 --> 00:52:33,000
是的

1749
00:52:33,000 --> 00:52:34,000
然后我们做个花边

1750
00:52:34,000 --> 00:52:35,000
都要脑补的

1751
00:52:35,000 --> 00:52:36,000
对

1752
00:52:36,000 --> 00:52:37,000
我查到了

1753
00:52:37,000 --> 00:52:39,000
CCED 是一款中文字表处理软件

1754
00:52:39,000 --> 00:52:41,000
问世于 1988 年

1755
00:52:41,000 --> 00:52:43,000
由原北京前维天

1756
00:52:43,000 --> 00:52:45,000
电子技术研究所开发

1757
00:52:45,000 --> 00:52:46,000
主要开发者是朱崇钧

1758
00:52:46,000 --> 00:52:48,000
软件在道斯时代

1759
00:52:48,000 --> 00:52:49,000
曾经是中国最流行的

1760
00:52:49,000 --> 00:52:51,000
文字处理与电子表格软件之一

1761
00:52:51,000 --> 00:52:51,000
1998 年之后

1762
00:52:51,000 --> 00:52:53,000
甚至出现了

1763
00:52:53,000 --> 00:52:54,000
基于 Windows 的版本

1764
00:52:54,000 --> 00:52:56,000
连续多年

1765
00:52:56,000 --> 00:52:57,000
是中国最畅销的软件之一

1766
00:52:57,000 --> 00:53:00,000
是全国计算机等级考试

1767
00:53:00,000 --> 00:53:01,000
以及国内不少计算机

1768
00:53:01,000 --> 00:53:02,000
教育培训的指定内容

1769
00:53:02,000 --> 00:53:03,000
我的天哪

1770
00:53:03,000 --> 00:53:04,000
你们想想

1771
00:53:04,000 --> 00:53:06,000
我用那个打印过

1772
00:53:06,000 --> 00:53:08,000
连那个真实打印机

1773
00:53:08,000 --> 00:53:09,000
打过东西

1774
00:53:09,000 --> 00:53:10,000
就打过文档

1775
00:53:10,000 --> 00:53:12,000
确实还用过这个东西

1776
00:53:12,000 --> 00:53:14,000
非常上古的感觉

1777
00:53:14,000 --> 00:53:15,000
后来 WPS

1778
00:53:15,000 --> 00:53:16,000
这里面写了

1779
00:53:16,000 --> 00:53:17,000
老对手 WPS

1780
00:53:17,000 --> 00:53:19,000
借助中国政府采购计划

1781
00:53:19,000 --> 00:53:20,000
恢复了生机

1782
00:53:20,000 --> 00:53:22,000
但 CCED 市场就萎缩了

1783
00:53:22,000 --> 00:53:22,000
等等

1784
00:53:22,000 --> 00:53:24,000
2010 年 2 月份

1785
00:53:24,000 --> 00:53:26,000
CCED 2000 版发行

1786
00:53:26,000 --> 00:53:28,000
天哪

1787
00:53:28,000 --> 00:53:29,000
我的天哪

1788
00:53:29,000 --> 00:53:30,000
我要去收一套

1789
00:53:30,000 --> 00:53:35,000
要还一下旧的

1790
00:53:35,000 --> 00:53:37,000
等下怎么扯到那里去

1791
00:53:37,000 --> 00:53:38,000
说回来

1792
00:53:38,000 --> 00:53:41,000
其实这几个

1793
00:53:41,000 --> 00:53:43,000
我们刚才提的那几个

1794
00:53:43,000 --> 00:53:44,000
古早的操作系统线

1795
00:53:44,000 --> 00:53:46,000
其实基本上都没有了

1796
00:53:46,000 --> 00:53:48,000
我们现在目前主流用的

1797
00:53:48,000 --> 00:53:49,000
还是 Windows 的

1798
00:53:49,000 --> 00:53:51,000
应该是 Windows 10

1799
00:53:51,000 --> 00:53:53,000
或者是至少是 8 以后的

1800
00:53:54,000 --> 00:53:55,000
8 和 10 这种

1801
00:53:55,000 --> 00:53:58,000
和 Linux 桌面现在还有人用吗

1802
00:53:58,000 --> 00:53:59,000
其实还比较少

1803
00:53:59,000 --> 00:54:00,000
所以这个先不算

1804
00:54:00,000 --> 00:54:02,000
然后就是 Mac

1805
00:54:02,000 --> 00:54:04,000
Mac OS X 应该说是准确的

1806
00:54:04,000 --> 00:54:06,000
现在叫 Mac OS 了

1807
00:54:06,000 --> 00:54:08,000
所以这两个系统

1808
00:54:08,000 --> 00:54:10,000
我们其实它给的我们限制

1809
00:54:10,000 --> 00:54:11,000
其实就没有那么多了

1810
00:54:11,000 --> 00:54:12,000
其实你可以

1811
00:54:12,000 --> 00:54:14,000
我记得文件名可以起到

1812
00:54:14,000 --> 00:54:15,000
多少来的

1813
00:54:15,000 --> 00:54:16,000
长度你说

1814
00:54:16,000 --> 00:54:18,000
对长度是可以很长的了

1815
00:54:18,000 --> 00:54:18,000
已经

1816
00:54:18,000 --> 00:54:19,000
但扩展名这个事情

1817
00:54:19,000 --> 00:54:20,000
在各个系统上面

1818
00:54:20,000 --> 00:54:21,000
我现在都基本上都保留下了

1819
00:54:21,000 --> 00:54:23,000
不管是在 Linux 上面

1820
00:54:23,000 --> 00:54:25,000
还是在 Mac OS 上面

1821
00:54:25,000 --> 00:54:26,000
还是在现在 Windows 上面

1822
00:54:26,000 --> 00:54:28,000
基本上扩展名这个事情

1823
00:54:28,000 --> 00:54:30,000
都已经成为一个约定俗成的东西了

1824
00:54:30,000 --> 00:54:31,000
但只是说

1825
00:54:31,000 --> 00:54:32,000
就刚才说那个区域

1826
00:54:32,000 --> 00:54:35,000
它默认是在图形界面下

1827
00:54:35,000 --> 00:54:37,000
它是展示还是不展示扩展名的问题

1828
00:54:37,000 --> 00:54:38,000
应该我记得 Windows

1829
00:54:38,000 --> 00:54:40,000
目前默认应该是不展示的

1830
00:54:40,000 --> 00:54:43,000
Mac 也是默认不展示的

1831
00:54:43,000 --> 00:54:45,000
然后 Linux 的桌面

1832
00:54:45,000 --> 00:54:45,000
我就不知道了

1833
00:54:45,000 --> 00:54:46,000
因为太多了

1834
00:54:46,000 --> 00:54:48,000
然后也不常用

1835
00:54:48,000 --> 00:54:50,000
所以就这两个都是默认不展示

1836
00:54:50,000 --> 00:54:50,000
就变得很尴尬

1837
00:54:50,000 --> 00:54:51,000
对不对

1838
00:54:51,000 --> 00:54:53,000
本来这个东西是为了说

1839
00:54:53,000 --> 00:54:54,000
武涛也讲了

1840
00:54:54,000 --> 00:54:57,000
是为了让用户一眼能看出

1841
00:54:57,000 --> 00:54:58,000
这个文件是个什么类型的东西

1842
00:54:58,000 --> 00:54:58,000
对吧

1843
00:54:58,000 --> 00:55:02,000
但其实因为有了图标

1844
00:55:02,000 --> 00:55:03,000
就是那个 File Icon

1845
00:55:03,000 --> 00:55:04,000
就是文件类型的图标

1846
00:55:04,000 --> 00:55:05,000
和它

1847
00:55:05,000 --> 00:55:07,000
因为如果你按那个叫什么

1848
00:55:07,000 --> 00:55:08,000
多列排布的

1849
00:55:08,000 --> 00:55:08,000
不知道多里

1850
00:55:08,000 --> 00:55:10,000
按列排布

1851
00:55:10,000 --> 00:55:10,000
按列

1852
00:55:10,000 --> 00:55:11,000
不叫按列排布

1853
00:55:11,000 --> 00:55:12,000
它有可能多个

1854
00:55:12,000 --> 00:55:13,000
但是应该是表格式

1855
00:55:13,000 --> 00:55:14,000
表格式的

1856
00:55:14,000 --> 00:55:15,000
它有一栏

1857
00:55:15,000 --> 00:55:15,000
它本来就会显示

1858
00:55:15,000 --> 00:55:16,000
这个文件是什么类型

1859
00:55:16,000 --> 00:55:20,000
所以就有了这两个

1860
00:55:20,000 --> 00:55:21,000
大概一个是文件图标

1861
00:55:21,000 --> 00:55:22,000
一个是文件类型

1862
00:55:22,000 --> 00:55:23,000
单独有一列显示的

1863
00:55:23,000 --> 00:55:24,000
情况下

1864
00:55:24,000 --> 00:55:26,000
这个文件名的扩展名

1865
00:55:26,000 --> 00:55:27,000
其实又变得不重要了

1866
00:55:27,000 --> 00:55:27,000
对不对

1867
00:55:27,000 --> 00:55:29,000
其实当初就不要搞扩展名

1868
00:55:29,000 --> 00:55:29,000
对

1869
00:55:29,000 --> 00:55:31,000
就好像 Windows 后来

1870
00:55:31,000 --> 00:55:33,000
就默认隐藏扩展名

1871
00:55:33,000 --> 00:55:33,000
对吧

1872
00:55:33,000 --> 00:55:34,000
刚装好

1873
00:55:34,000 --> 00:55:36,000
默认是会隐藏扩展名

1874
00:55:36,000 --> 00:55:38,000
从 XP 开始就默认隐藏了

1875
00:55:38,000 --> 00:55:38,000
应该是

1876
00:55:38,000 --> 00:55:39,000
还是之后还是 Windows 7

1877
00:55:39,000 --> 00:55:40,000
98 开始

1878
00:55:40,000 --> 00:55:42,000
我就觉得扩展名

1879
00:55:42,000 --> 00:55:43,000
是一个很蠢的办法

1880
00:55:43,000 --> 00:55:45,000
而且它特别死板

1881
00:55:45,000 --> 00:55:45,000
就刚才说

1882
00:55:45,000 --> 00:55:47,000
它和应用程式的话

1883
00:55:47,000 --> 00:55:48,000
只能一对一

1884
00:55:48,000 --> 00:55:51,000
像 Mac 系统

1885
00:55:51,000 --> 00:55:52,000
它是不用这个的

1886
00:55:52,000 --> 00:55:52,000
它甚至

1887
00:55:52,000 --> 00:55:53,000
因为它通过

1888
00:55:53,000 --> 00:55:54,000
图标来体现

1889
00:55:54,000 --> 00:55:57,000
甚至它资源 Fog 的话

1890
00:55:57,000 --> 00:55:59,000
它因为有更详细的定义

1891
00:55:59,000 --> 00:56:00,000
它还可以

1892
00:56:00,000 --> 00:56:02,000
同样比如说是

1893
00:56:02,000 --> 00:56:04,000
Illustrator 的 AI 的文件

1894
00:56:04,000 --> 00:56:05,000
它那个图标

1895
00:56:05,000 --> 00:56:06,000
可以体现出

1896
00:56:06,000 --> 00:56:08,000
AI 的版本的不同

1897
00:56:08,000 --> 00:56:11,000
它可以体现在图标上面

1898
00:56:11,000 --> 00:56:12,000
就同样都是点 AI

1899
00:56:12,000 --> 00:56:14,000
但是有的是显示的 AI

1900
00:56:14,000 --> 00:56:15,000
比如说是五个显示

1901
00:56:15,000 --> 00:56:16,000
AI 8 这种

1902
00:56:16,000 --> 00:56:16,000
对 没错

1903
00:56:16,000 --> 00:56:18,000
因为它 Fog

1904
00:56:18,000 --> 00:56:19,000
它可以分叉

1905
00:56:19,000 --> 00:56:22,000
可以加好多内容进去的

1906
00:56:22,000 --> 00:56:23,000
然后这个东西

1907
00:56:23,000 --> 00:56:25,000
只要体现在图标上就是一样

1908
00:56:25,000 --> 00:56:27,000
然后最后给用户的信息

1909
00:56:27,000 --> 00:56:27,000
是一样的

1910
00:56:27,000 --> 00:56:28,000
对于用户来讲

1911
00:56:28,000 --> 00:56:30,000
这的确就是一个 AI 的

1912
00:56:30,000 --> 00:56:32,000
这个版本的一个文件

1913
00:56:32,000 --> 00:56:33,000
它达到了一个效果

1914
00:56:33,000 --> 00:56:34,000
并不一定要用

1915
00:56:34,000 --> 00:56:35,000
比如说这个三个字母

1916
00:56:35,000 --> 00:56:37,000
还得让用户去

1917
00:56:37,000 --> 00:56:38,000
得记这个三个字母

1918
00:56:38,000 --> 00:56:39,000
是对应什么东西

1919
00:56:39,000 --> 00:56:40,000
所以它其实

1920
00:56:40,000 --> 00:56:41,000
如果这么来看

1921
00:56:41,000 --> 00:56:44,000
它文件扩展名这个事情

1922
00:56:44,000 --> 00:56:45,000
它其实是

1923
00:56:45,000 --> 00:56:46,000
字符界面向图形界面过渡

1924
00:56:46,000 --> 00:56:48,000
这个时期的一个副产物

1925
00:56:48,000 --> 00:56:51,000
因为在字符界面下面

1926
00:56:51,000 --> 00:56:53,000
你是没有图标来告诉你

1927
00:56:53,000 --> 00:56:55,000
和这个文件是什么类型

1928
00:56:55,000 --> 00:56:56,000
也没有多列的这种

1929
00:56:56,000 --> 00:56:58,000
就是附属信息

1930
00:56:58,000 --> 00:57:00,000
它展示因为字符界面

1931
00:57:00,000 --> 00:57:00,000
一般的比较窄

1932
00:57:00,000 --> 00:57:02,000
就栏比较窄

1933
00:57:02,000 --> 00:57:04,000
所以这种情况下

1934
00:57:04,000 --> 00:57:05,000
在过渡时期

1935
00:57:05,000 --> 00:57:07,000
把文件扩展名这个概念

1936
00:57:07,000 --> 00:57:08,000
给保留下来

1937
00:57:08,000 --> 00:57:09,000
但其实到现在发现

1938
00:57:09,000 --> 00:57:11,000
其实已经完全没有作用了

1939
00:57:11,000 --> 00:57:11,000
对不对

1940
00:57:11,000 --> 00:57:12,000
就感觉是反效果

1941
00:57:12,000 --> 00:57:14,000
Mac 它之所以要用扩展名

1942
00:57:14,000 --> 00:57:16,000
就是完全屈服于

1943
00:57:16,000 --> 00:57:17,000
网络时代信息

1944
00:57:17,000 --> 00:57:19,000
文件交换的时候

1945
00:57:19,000 --> 00:57:21,000
必须要屈服于

1946
00:57:21,000 --> 00:57:23,000
Windows 这个准的

1947
00:57:23,000 --> 00:57:25,000
更强势一些

1948
00:57:25,000 --> 00:57:25,000
有的人更多

1949
00:57:25,000 --> 00:57:26,000
对

1950
00:57:26,000 --> 00:57:29,000
所以这个就是一个典型的

1951
00:57:29,000 --> 00:57:30,000
就是像低看似的

1952
00:57:30,000 --> 00:57:31,000
一个典型的案例

1953
00:57:31,000 --> 00:57:33,000
就我们很多东西

1954
00:57:33,000 --> 00:57:33,000
就是好的技术

1955
00:57:33,000 --> 00:57:35,000
并没有得到发行

1956
00:57:35,000 --> 00:57:37,000
大家都是用一个很蠢的技术

1957
00:57:37,000 --> 00:57:38,000
然后再流行起来的

1958
00:57:38,000 --> 00:57:38,000
对

1959
00:57:38,000 --> 00:57:40,000
刚才还说到就是说

1960
00:57:40,000 --> 00:57:41,000
因为现在这个图形界面

1961
00:57:41,000 --> 00:57:42,000
都是默认隐藏

1962
00:57:42,000 --> 00:57:43,000
隐藏这个文件扩展名的

1963
00:57:43,000 --> 00:57:46,000
它其实有一个比较重要的点

1964
00:57:46,000 --> 00:57:47,000
就是说

1965
00:57:47,000 --> 00:57:48,000
比如说你在

1966
00:57:48,000 --> 00:57:50,000
Windows 里面好

1967
00:57:50,000 --> 00:57:51,000
还是 Mac 里面好

1968
00:57:51,000 --> 00:57:51,000
默认情况下

1969
00:57:51,000 --> 00:57:53,000
你要改一个文件的名字

1970
00:57:53,000 --> 00:57:53,000
你怎么改

1971
00:57:53,000 --> 00:57:53,000
对吧

1972
00:57:53,000 --> 00:57:55,000
你就是选择那个文件

1973
00:57:55,000 --> 00:57:56,000
要不你右键点击改名

1974
00:57:56,000 --> 00:57:57,000
或者是你就像我们这种键盘

1975
00:57:57,000 --> 00:58:00,000
比较键盘比较数六的人

1976
00:58:00,000 --> 00:58:01,000
你就直接按回车

1977
00:58:01,000 --> 00:58:02,000
它就一般可以改名了

1978
00:58:02,000 --> 00:58:02,000
对不对

1979
00:58:02,000 --> 00:58:04,000
然后这个时候

1980
00:58:04,000 --> 00:58:07,000
因为它不显示文件的扩展名

1981
00:58:07,000 --> 00:58:07,000
你默认改

1982
00:58:07,000 --> 00:58:09,000
就是所谓的文件名

1983
00:58:09,000 --> 00:58:11,000
就是就是狭义的文件名

1984
00:58:11,000 --> 00:58:12,000
就是不含扩展

1985
00:58:12,000 --> 00:58:13,000
那部分的前缀那部分

1986
00:58:13,000 --> 00:58:14,000
但其实如果说

1987
00:58:14,000 --> 00:58:16,000
你像我们都喜欢

1988
00:58:16,000 --> 00:58:17,000
我至少是这样的

1989
00:58:17,000 --> 00:58:18,000
我不知道你们的默认

1990
00:58:18,000 --> 00:58:18,000
说是怎么

1991
00:58:18,000 --> 00:58:20,000
我一定会把文件

1992
00:58:20,000 --> 00:58:21,000
扩展名展示出来

1993
00:58:21,000 --> 00:58:22,000
不知道为什么保留这个习惯

1994
00:58:22,000 --> 00:58:23,000
但是就是看起来

1995
00:58:23,000 --> 00:58:24,000
因为我可能

1996
00:58:24,000 --> 00:58:26,000
有可能是因为我要经常在

1997
00:58:26,000 --> 00:58:29,000
这个字符界面和

1998
00:58:29,000 --> 00:58:31,000
这个图形界面切换

1999
00:58:31,000 --> 00:58:33,000
所以还是有这个需求

2000
00:58:33,000 --> 00:58:34,000
看到那个文件

2001
00:58:34,000 --> 00:58:35,000
扩展名是什么的

2002
00:58:35,000 --> 00:58:36,000
那这种情况下

2003
00:58:36,000 --> 00:58:38,000
你如果要改名

2004
00:58:38,000 --> 00:58:40,000
它其实也有很多小小技巧的

2005
00:58:40,000 --> 00:58:41,000
比如说我现在试一下

2006
00:58:41,000 --> 00:58:41,000
给你们看

2007
00:58:41,000 --> 00:58:43,000
我记得应该是这样子

2008
00:58:43,000 --> 00:58:44,000
比如我现在我打开一个 Mac

2009
00:58:44,000 --> 00:58:46,000
我要改一个文件名

2010
00:58:46,000 --> 00:58:46,000
然后这个时候

2011
00:58:46,000 --> 00:58:47,000
我是显示的一个

2012
00:58:47,000 --> 00:58:50,000
是显示带扩展名的文件名

2013
00:58:50,000 --> 00:58:50,000
我要点

2014
00:58:50,000 --> 00:58:52,000
我按回车

2015
00:58:52,000 --> 00:58:53,000
它默认

2016
00:58:53,000 --> 00:58:55,000
会把文件名的部分

2017
00:58:55,000 --> 00:58:56,000
给我选中

2018
00:58:56,000 --> 00:58:57,000
但是扩展名是保留

2019
00:58:57,000 --> 00:58:58,000
是点

2020
00:58:58,000 --> 00:59:00,000
扩展名和那个点的部分

2021
00:59:00,000 --> 00:59:00,000
是不动的

2022
00:59:00,000 --> 00:59:01,000
什么意思呢

2023
00:59:01,000 --> 00:59:01,000
就是说

2024
00:59:01,000 --> 00:59:04,000
它不想让用户错误的

2025
00:59:04,000 --> 00:59:06,000
更改掉这个扩展名

2026
00:59:06,000 --> 00:59:07,000
把文件类型手感

2027
00:59:07,000 --> 00:59:08,000
对

2028
00:59:08,000 --> 00:59:09,000
对对

2029
00:59:09,000 --> 00:59:09,000
因为其实虽然说

2030
00:59:09,000 --> 00:59:10,000
我们刚才讲

2031
00:59:10,000 --> 00:59:11,000
虽然说这个文件类型不重要

2032
00:59:11,000 --> 00:59:15,000
但是如果说你用户明确的说

2033
00:59:15,000 --> 00:59:17,000
我要把这个文件改成那个类型

2034
00:59:17,000 --> 00:59:18,000
比如说很简单一个道理

2035
00:59:18,000 --> 00:59:19,000
你现在去网站

2036
00:59:19,000 --> 00:59:20,000
网站上下载一张图片回来

2037
00:59:20,000 --> 00:59:21,000
还有可能他在那个

2038
00:59:21,000 --> 00:59:22,000
因为现在很多那个

2039
00:59:23,000 --> 00:59:24,000
网站的那个图片

2040
00:59:24,000 --> 00:59:25,000
他本来就没有想给你下载

2041
00:59:25,000 --> 00:59:25,000
对吧

2042
00:59:25,000 --> 00:59:26,000
他的那个文件命名

2043
00:59:26,000 --> 00:59:27,000
也不是按照这个

2044
00:59:27,000 --> 00:59:29,000
什么有扩展名的方式来弄

2045
00:59:29,000 --> 00:59:30,000
你就下载就是一个

2046
00:59:30,000 --> 00:59:31,000
普通空白的文件

2047
00:59:31,000 --> 00:59:31,000
对吧

2048
00:59:31,000 --> 00:59:32,000
但这个时候

2049
00:59:32,000 --> 00:59:34,000
因为那个是一个外部系统

2050
00:59:34,000 --> 00:59:35,000
来的来的一个文件

2051
00:59:35,000 --> 00:59:35,000
这个

2052
00:59:35,000 --> 00:59:37,000
我的这个母系统

2053
00:59:37,000 --> 00:59:38,000
又不知道这个文件

2054
00:59:38,000 --> 00:59:38,000
是个什么东西

2055
00:59:38,000 --> 00:59:39,000
它就会显示一个

2056
00:59:39,000 --> 00:59:40,000
一个叫做什么

2057
00:59:40,000 --> 00:59:40,000
一个

2058
00:59:40,000 --> 00:59:42,000
一个 generic file

2059
00:59:42,000 --> 00:59:43,000
一个一个通用的一个文件

2060
00:59:43,000 --> 00:59:44,000
放在那里

2061
00:59:44,000 --> 00:59:45,000
不知道是它是个啥

2062
00:59:45,000 --> 00:59:46,000
不知道是个图片呢

2063
00:59:46,000 --> 00:59:47,000
也不知道是个视频呢

2064
00:59:47,000 --> 00:59:48,000
也不知道是个音乐

2065
00:59:48,000 --> 00:59:48,000
还是什么东西

2066
00:59:48,000 --> 00:59:48,000
对不对

2067
00:59:48,000 --> 00:59:49,000
这个时候我就说

2068
00:59:49,000 --> 00:59:50,000
那我要强行给它

2069
00:59:50,000 --> 00:59:51,000
加一个扩展名

2070
00:59:51,000 --> 00:59:53,000
告诉我这个系统说

2071
00:59:53,000 --> 00:59:55,000
你把它当做一个图片

2072
00:59:55,000 --> 00:59:57,000
或者你把它当做一个

2073
00:59:57,000 --> 00:59:58,000
这个音频

2074
00:59:58,000 --> 00:59:58,000
对吧

2075
00:59:58,000 --> 01:00:00,000
然后你在做对应的事情

2076
01:00:00,000 --> 01:00:01,000
这个时候我就不知道

2077
01:00:01,000 --> 01:00:02,000
这个什么时候

2078
01:00:02,000 --> 01:00:03,000
能启动那个

2079
01:00:03,000 --> 01:00:04,000
类似于这个 file

2080
01:00:04,000 --> 01:00:06,000
这个机制去探测

2081
01:00:06,000 --> 01:00:06,000
这个文件

2082
01:00:06,000 --> 01:00:07,000
是个什么样的类型

2083
01:00:07,000 --> 01:00:08,000
对这里面其实

2084
01:00:08,000 --> 01:00:09,000
还是有很多讲究的

2085
01:00:09,000 --> 01:00:10,000
所以呢

2086
01:00:10,000 --> 01:00:11,000
从 DOS

2087
01:00:11,000 --> 01:00:12,000
Windows 转过去

2088
01:00:12,000 --> 01:00:13,000
在用 Mac 的时候

2089
01:00:13,000 --> 01:00:14,000
在 Mac 当年

2090
01:00:14,000 --> 01:00:15,000
就因为它无所谓

2091
01:00:15,000 --> 01:00:16,000
扩展名

2092
01:00:16,000 --> 01:00:17,000
扩展名可以随便改

2093
01:00:17,000 --> 01:00:18,000
嗯

2094
01:00:18,000 --> 01:00:19,000
然后

2095
01:00:19,000 --> 01:00:20,000
这个对于我们

2096
01:00:20,000 --> 01:00:21,000
从 DOS 转过去

2097
01:00:21,000 --> 01:00:22,000
就觉得哇

2098
01:00:22,000 --> 01:00:22,000
这个都能改

2099
01:00:22,000 --> 01:00:23,000
太恐怕了

2100
01:00:23,000 --> 01:00:24,000
你说这个我想到一个问题

2101
01:00:24,000 --> 01:00:25,000
就是 Mac 上面

2102
01:00:25,000 --> 01:00:27,000
有时候会出现

2103
01:00:27,000 --> 01:00:28,000
比如说

2104
01:00:28,000 --> 01:00:28,000
嗯

2105
01:00:28,000 --> 01:00:29,000
一个文件

2106
01:00:29,000 --> 01:00:30,000
它没有扩展名

2107
01:00:30,000 --> 01:00:32,000
然后 Mac 会自动去

2108
01:00:32,000 --> 01:00:33,000
试图去猜

2109
01:00:33,000 --> 01:00:34,000
这个文件是什么

2110
01:00:34,000 --> 01:00:35,000
就是尤其是

2111
01:00:35,000 --> 01:00:36,000
在你按下动格的时候

2112
01:00:36,000 --> 01:00:37,000
然后这就导致了

2113
01:00:37,000 --> 01:00:38,000
很多人在

2114
01:00:38,000 --> 01:00:40,000
嗯

2115
01:00:40,000 --> 01:00:40,000
尤其是

2116
01:00:40,000 --> 01:00:41,000
就对电脑系统

2117
01:00:41,000 --> 01:00:43,000
不是那么在行的人

2118
01:00:43,000 --> 01:00:43,000
会

2119
01:00:43,000 --> 01:00:45,000
会经常

2120
01:00:45,000 --> 01:00:45,000
嗯

2121
01:00:45,000 --> 01:00:47,000
我觉得我遇到这个问题

2122
01:00:47,000 --> 01:00:48,000
就是会有人

2123
01:00:48,000 --> 01:00:48,000
给你很多

2124
01:00:48,000 --> 01:00:49,000
没有扩展名的文件

2125
01:00:49,000 --> 01:00:51,000
在他的电脑上

2126
01:00:51,000 --> 01:00:52,000
显示一切正常了

2127
01:00:52,000 --> 01:00:53,000
但到你这儿就不行了

2128
01:00:53,000 --> 01:00:53,000
因为没有扩展名

2129
01:00:53,000 --> 01:00:54,000
对

2130
01:00:54,000 --> 01:00:55,000
这个时候其实发现

2131
01:00:55,000 --> 01:00:56,000
如果一旦

2132
01:00:56,000 --> 01:00:57,000
一旦涉及到

2133
01:00:57,000 --> 01:00:58,000
这个文件的交换

2134
01:00:58,000 --> 01:01:00,000
这有个扩展名

2135
01:01:00,000 --> 01:01:01,000
明确的规定

2136
01:01:01,000 --> 01:01:02,000
这个文件是什么

2137
01:01:02,000 --> 01:01:04,000
样的这个类型

2138
01:01:04,000 --> 01:01:05,000
然后至少缩小一个范围

2139
01:01:05,000 --> 01:01:07,000
然后让我们再去处理

2140
01:01:07,000 --> 01:01:08,000
还是会容易很多的

2141
01:01:08,000 --> 01:01:08,000
对

2142
01:01:08,000 --> 01:01:10,000
有很多事情

2143
01:01:10,000 --> 01:01:10,000
你会觉得说

2144
01:01:10,000 --> 01:01:11,000
这样是方便用户

2145
01:01:11,000 --> 01:01:12,000
但是实际上会

2146
01:01:12,000 --> 01:01:14,000
会苦的开发者

2147
01:01:14,000 --> 01:01:15,000
这是

2148
01:01:15,000 --> 01:01:17,000
这是一个两面

2149
01:01:17,000 --> 01:01:18,000
这个所有的软件

2150
01:01:18,000 --> 01:01:18,000
设计

2151
01:01:18,000 --> 01:01:19,000
不是这么干的吗

2152
01:01:19,000 --> 01:01:19,000
都是这样

2153
01:01:19,000 --> 01:01:20,000
方便用户

2154
01:01:20,000 --> 01:01:23,000
要关着用户的

2155
01:01:23,000 --> 01:01:24,000
是的

2156
01:01:24,000 --> 01:01:27,000
好吧

2157
01:01:27,000 --> 01:01:29,000
我们文件名的长度

2158
01:01:29,000 --> 01:01:29,000
差不多这样

2159
01:01:29,000 --> 01:01:30,000
我们我觉得

2160
01:01:30,000 --> 01:01:31,000
扩展名的坑太深了

2161
01:01:31,000 --> 01:01:33,000
每次讲不完

2162
01:01:33,000 --> 01:01:34,000
我们本来今天重点

2163
01:01:34,000 --> 01:01:35,000
不是讲这个的

2164
01:01:35,000 --> 01:01:37,000
讲了这么久这个坑

2165
01:01:37,000 --> 01:01:38,000
对

2166
01:01:38,000 --> 01:01:41,000
下面我们来谈

2167
01:01:41,000 --> 01:01:41,000
更大一个坑

2168
01:01:41,000 --> 01:01:43,000
就是文件名

2169
01:01:43,000 --> 01:01:45,000
命名是否允许

2170
01:01:45,000 --> 01:01:46,000
包含空格的问题

2171
01:01:46,000 --> 01:01:48,000
这个事情就特别扯了

2172
01:01:48,000 --> 01:01:48,000
因为

2173
01:01:48,000 --> 01:01:48,000
大家也知道

2174
01:01:48,000 --> 01:01:50,000
我们所有的这些系统的话

2175
01:01:50,000 --> 01:01:53,000
都是从西方语言过来的

2176
01:01:53,000 --> 01:01:55,000
像西文的话

2177
01:01:55,000 --> 01:01:56,000
他们都是按词分写的

2178
01:01:56,000 --> 01:01:57,000
词和词之中

2179
01:01:57,000 --> 01:01:58,000
就是有空格的

2180
01:01:58,000 --> 01:02:00,000
我记得

2181
01:02:00,000 --> 01:02:02,000
DOS 的文件名

2182
01:02:02,000 --> 01:02:03,000
是不允许有空格的

2183
01:02:03,000 --> 01:02:06,000
应该是不允许的

2184
01:02:06,000 --> 01:02:08,000
我一点不太记不清楚了

2185
01:02:08,000 --> 01:02:09,000
有可能

2186
01:02:09,000 --> 01:02:10,000
我学电脑开始

2187
01:02:10,000 --> 01:02:12,000
就是从 DOS 进来的

2188
01:02:12,000 --> 01:02:14,000
所以哪怕直到现在

2189
01:02:14,000 --> 01:02:15,000
我自己起文件名

2190
01:02:15,000 --> 01:02:17,000
还是不习惯

2191
01:02:17,000 --> 01:02:18,000
选用空格的

2192
01:02:18,000 --> 01:02:20,000
我会用什么

2193
01:02:20,000 --> 01:02:21,000
用 hyphen

2194
01:02:21,000 --> 01:02:22,000
用连字符

2195
01:02:22,000 --> 01:02:24,000
或者下划线来写

2196
01:02:24,000 --> 01:02:25,000
OK

2197
01:02:25,000 --> 01:02:26,000
我上次看一个视频

2198
01:02:26,000 --> 01:02:27,000
就是一个

2199
01:02:27,000 --> 01:02:28,000
他叫什么

2200
01:02:28,000 --> 01:02:30,000
他叫 8 bit guy

2201
01:02:30,000 --> 01:02:31,000
就是他在

2202
01:02:31,000 --> 01:02:32,000
他在视频里面

2203
01:02:32,000 --> 01:02:34,000
教你装一个

2204
01:02:34,000 --> 01:02:37,000
MacOS Classic 的操作系统

2205
01:02:37,000 --> 01:02:39,000
然后他很自然而然的

2206
01:02:39,000 --> 01:02:42,000
把那个主硬盘命名为了

2207
01:02:42,000 --> 01:02:43,000
命名为

2208
01:02:43,000 --> 01:02:46,000
iMac 空格 HD

2209
01:02:46,000 --> 01:02:47,000
然后我就想

2210
01:02:47,000 --> 01:02:48,000
我就感叹说

2211
01:02:48,000 --> 01:02:49,000
果然是祖传 Mac 用户

2212
01:02:49,000 --> 01:02:50,000
从来不会在意

2213
01:02:50,000 --> 01:02:52,000
这个文件名里面

2214
01:02:52,000 --> 01:02:52,000
可有用

2215
01:02:52,000 --> 01:02:54,000
能不能有空格这种问题

2216
01:02:54,000 --> 01:02:58,000
你要是这种古早的 Windows 用户

2217
01:02:58,000 --> 01:02:59,000
你绝对不可能做出这种事的

2218
01:02:59,000 --> 01:03:00,000
就是把一个文件

2219
01:03:00,000 --> 01:03:04,000
命名为一个带空格的名字

2220
01:03:04,000 --> 01:03:06,000
因为有空格会有什么问题呢

2221
01:03:06,000 --> 01:03:09,000
就是在早年的命令行

2222
01:03:09,000 --> 01:03:11,000
就是字符界面的时候

2223
01:03:11,000 --> 01:03:13,000
他比如说我要处理

2224
01:03:13,000 --> 01:03:15,000
比如说我们想象一个场景

2225
01:03:15,000 --> 01:03:15,000
就是复制

2226
01:03:15,000 --> 01:03:16,000
我要把这个

2227
01:03:16,000 --> 01:03:17,000
假设我有一个文件叫做

2228
01:03:17,000 --> 01:03:18,000
A 1

2229
01:03:18,000 --> 01:03:21,000
我要把它复制为 B 点 txt

2230
01:03:21,000 --> 01:03:22,000
我直接就加什么

2231
01:03:22,000 --> 01:03:23,000
就是这个 cp

2232
01:03:23,000 --> 01:03:24,000
就 copy 对吧

2233
01:03:24,000 --> 01:03:25,000
然后 A 点 txt

2234
01:03:25,000 --> 01:03:27,000
然后到这个目标是 B 点 txt

2235
01:03:27,000 --> 01:03:28,000
就是完成了对不对

2236
01:03:28,000 --> 01:03:30,000
但你发现这三个部分

2237
01:03:30,000 --> 01:03:31,000
好像一个主语

2238
01:03:31,000 --> 01:03:31,000
两个 B 语嘛

2239
01:03:31,000 --> 01:03:32,000
对吧

2240
01:03:32,000 --> 01:03:34,000
这个动词

2241
01:03:34,000 --> 01:03:35,000
对一个动词

2242
01:03:35,000 --> 01:03:35,000
对

2243
01:03:35,000 --> 01:03:36,000
然后你两个这个 object

2244
01:03:36,000 --> 01:03:37,000
两个目标的时候

2245
01:03:37,000 --> 01:03:39,000
你发现他用什么风格呢

2246
01:03:39,000 --> 01:03:39,000
用空格风格

2247
01:03:39,000 --> 01:03:40,000
对不对

2248
01:03:40,000 --> 01:03:41,000
这个时候你说

2249
01:03:41,000 --> 01:03:43,000
那我的文件是刚好是 A 空格 B

2250
01:03:43,000 --> 01:03:44,000
这个时候怎么办

2251
01:03:44,000 --> 01:03:45,000
就很尴尬

2252
01:03:45,000 --> 01:03:46,000
对不对

2253
01:03:46,000 --> 01:03:47,000
但其实也是有

2254
01:03:47,000 --> 01:03:48,000
解决方案的

2255
01:03:48,000 --> 01:03:50,000
就是说你把这个

2256
01:03:50,000 --> 01:03:52,000
带空格的文件名

2257
01:03:52,000 --> 01:03:54,000
用引号引起来不就好了吗

2258
01:03:54,000 --> 01:03:54,000
对吧

2259
01:03:54,000 --> 01:03:56,000
那其实你可以说是 copy 空格

2260
01:03:56,000 --> 01:03:57,000
然后引号开

2261
01:03:57,000 --> 01:03:58,000
就是引号

2262
01:03:58,000 --> 01:04:00,000
然后 A 空格 B 点 txt

2263
01:04:00,000 --> 01:04:01,000
然后引号

2264
01:04:01,000 --> 01:04:02,000
然后就下一个目标

2265
01:04:02,000 --> 01:04:03,000
就是 c 点 txt

2266
01:04:03,000 --> 01:04:04,000
其实也是可以的

2267
01:04:04,000 --> 01:04:05,000
对不对

2268
01:04:05,000 --> 01:04:06,000
但只是说

2269
01:04:06,000 --> 01:04:07,000
就增加了一个麻烦

2270
01:04:07,000 --> 01:04:08,000
但其实我觉得

2271
01:04:08,000 --> 01:04:10,000
这个还不是最坑爹的

2272
01:04:10,000 --> 01:04:11,000
就说我个人觉得

2273
01:04:11,000 --> 01:04:13,000
就是说你可以允许空格

2274
01:04:13,000 --> 01:04:14,000
但是最好是

2275
01:04:14,000 --> 01:04:16,000
就是不鼓励使用空格

2276
01:04:16,000 --> 01:04:17,000
虽然说像 Mac

2277
01:04:17,000 --> 01:04:17,000
这个操作中间

2278
01:04:17,000 --> 01:04:19,000
目前的 Mac 消息里面

2279
01:04:19,000 --> 01:04:20,000
大量的使用了

2280
01:04:20,000 --> 01:04:22,000
这个空格的这么一个

2281
01:04:22,000 --> 01:04:23,000
因为一旦涉及到空格

2282
01:04:23,000 --> 01:04:25,000
你那个文件名

2283
01:04:25,000 --> 01:04:26,000
就必须要用引号

2284
01:04:26,000 --> 01:04:27,000
引号的话就有时候会导致

2285
01:04:27,000 --> 01:04:28,000
比如说自动补齐的一些问题

2286
01:04:28,000 --> 01:04:30,000
还有就包括有一些这种

2287
01:04:30,000 --> 01:04:31,000
有些这个兼容性的问题

2288
01:04:31,000 --> 01:04:33,000
比如说我们正采用这个

2289
01:04:33,000 --> 01:04:34,000
XRX

2290
01:04:34,000 --> 01:04:35,000
就是有一个命令

2291
01:04:35,000 --> 01:04:36,000
它可以说

2292
01:04:36,000 --> 01:04:37,000
你把这个前面的

2293
01:04:37,000 --> 01:04:39,000
那个成就的输入

2294
01:04:39,000 --> 01:04:40,000
全部作为

2295
01:04:40,000 --> 01:04:41,000
这个命令的参数来执行

2296
01:04:41,000 --> 01:04:42,000
这么一个辅助的一个命令

2297
01:04:42,000 --> 01:04:43,000
这个它是怎么判断

2298
01:04:43,000 --> 01:04:45,000
前面你输入了哪些参数给它

2299
01:04:45,000 --> 01:04:46,000
它就说有个空格

2300
01:04:46,000 --> 01:04:47,000
分隔开的

2301
01:04:47,000 --> 01:04:47,000
那些都是

2302
01:04:47,000 --> 01:04:48,000
参数对吧

2303
01:04:48,000 --> 01:04:49,000
说你的文件名

2304
01:04:49,000 --> 01:04:50,000
刚好又是个空格

2305
01:04:50,000 --> 01:04:50,000
你怎么办呢

2306
01:04:50,000 --> 01:04:52,000
就得你说

2307
01:04:52,000 --> 01:04:53,000
那我就改一个来

2308
01:04:53,000 --> 01:04:55,000
分隔符来分隔这个参数

2309
01:04:55,000 --> 01:04:56,000
就不要用空格分隔参数了

2310
01:04:56,000 --> 01:04:57,000
那我用一个什么

2311
01:04:57,000 --> 01:04:58,000
比如说是这个

2312
01:04:58,000 --> 01:04:58,000
就是 0

2313
01:04:58,000 --> 01:04:59,000
就是 askima

2314
01:04:59,000 --> 01:05:01,000
是 0 的那个字符

2315
01:05:01,000 --> 01:05:01,000
那个 no

2316
01:05:01,000 --> 01:05:03,000
那个字符来分隔

2317
01:05:03,000 --> 01:05:04,000
这个前面的参数

2318
01:05:04,000 --> 01:05:05,000
也可以对不对

2319
01:05:05,000 --> 01:05:06,000
但是就是这个东西

2320
01:05:06,000 --> 01:05:08,000
就很不自然了

2321
01:05:08,000 --> 01:05:09,000
但我觉得

2322
01:05:09,000 --> 01:05:11,000
其实就用空格的

2323
01:05:11,000 --> 01:05:12,000
最麻烦的问题

2324
01:05:12,000 --> 01:05:14,000
到前面那个都是说

2325
01:05:14,000 --> 01:05:14,000
只是麻烦

2326
01:05:14,000 --> 01:05:16,000
还不是说不至于说

2327
01:05:16,000 --> 01:05:17,000
完全不能用

2328
01:05:17,000 --> 01:05:19,000
用空格

2329
01:05:19,000 --> 01:05:20,000
作为在文件名里面

2330
01:05:20,000 --> 01:05:21,000
最坑爹的事情是

2331
01:05:21,000 --> 01:05:24,000
你到底连续用了几个空格

2332
01:05:24,000 --> 01:05:28,000
就是 a 空格 b.txt

2333
01:05:28,000 --> 01:05:29,000
这是一个文件

2334
01:05:29,000 --> 01:05:32,000
a 空格空格 b.txt

2335
01:05:32,000 --> 01:05:33,000
这是另外一个文件

2336
01:05:33,000 --> 01:05:33,000
对不对

2337
01:05:33,000 --> 01:05:36,000
这是在一个非等宽的字体的

2338
01:05:36,000 --> 01:05:37,000
显示环境之下

2339
01:05:37,000 --> 01:05:37,000
非常严重的问题

2340
01:05:37,000 --> 01:05:38,000
对啊

2341
01:05:38,000 --> 01:05:39,000
我不知道

2342
01:05:39,000 --> 01:05:41,000
有时候在非等宽的情况下

2343
01:05:41,000 --> 01:05:41,000
那个 a 和 b

2344
01:05:41,000 --> 01:05:42,000
它可能不是一个宽度

2345
01:05:42,000 --> 01:05:44,000
我说 a 和 b 可能还看不得出来

2346
01:05:44,000 --> 01:05:45,000
比如说 a 和小写字母

2347
01:05:45,000 --> 01:05:45,000
对

2348
01:05:45,000 --> 01:05:47,000
就是在非等宽的情况下

2349
01:05:47,000 --> 01:05:47,000
它肯定是

2350
01:05:47,000 --> 01:05:48,000
一样宽的

2351
01:05:48,000 --> 01:05:49,000
这个时候

2352
01:05:49,000 --> 01:05:51,000
你说它中间到底间隔了

2353
01:05:51,000 --> 01:05:52,000
几个空格

2354
01:05:52,000 --> 01:05:53,000
你去数吗

2355
01:05:53,000 --> 01:05:53,000
难道

2356
01:05:53,000 --> 01:05:54,000
或者如果说

2357
01:05:54,000 --> 01:05:55,000
你说一两个的区别

2358
01:05:55,000 --> 01:05:56,000
可能还比较明显

2359
01:05:56,000 --> 01:05:57,000
对吧

2360
01:05:57,000 --> 01:05:58,000
五个和六个的区别

2361
01:05:58,000 --> 01:05:58,000
你能看得出来

2362
01:05:58,000 --> 01:06:00,000
但这个其实

2363
01:06:00,000 --> 01:06:01,000
你用下滑线

2364
01:06:01,000 --> 01:06:02,000
或者用 hyphen

2365
01:06:02,000 --> 01:06:04,000
其实面临的问题是一样的

2366
01:06:04,000 --> 01:06:04,000
我觉得关键的问题

2367
01:06:04,000 --> 01:06:06,000
还是在于

2368
01:06:06,000 --> 01:06:07,000
空格它作为一个

2369
01:06:07,000 --> 01:06:09,000
特殊的字符

2370
01:06:09,000 --> 01:06:09,000
它其实

2371
01:06:09,000 --> 01:06:11,000
是有别的作用

2372
01:06:11,000 --> 01:06:12,000
含义的

2373
01:06:12,000 --> 01:06:13,000
它作为分隔符用

2374
01:06:13,000 --> 01:06:13,000
对

2375
01:06:13,000 --> 01:06:15,000
一旦你要把它容纳到文件名里

2376
01:06:15,000 --> 01:06:16,000
你可能要引入

2377
01:06:16,000 --> 01:06:17,000
别的机制

2378
01:06:17,000 --> 01:06:17,000
来

2379
01:06:17,000 --> 01:06:18,000
保护它

2380
01:06:18,000 --> 01:06:19,000
比如你要加引号

2381
01:06:19,000 --> 01:06:20,000
就 escape

2382
01:06:20,000 --> 01:06:21,000
转译

2383
01:06:21,000 --> 01:06:22,000
这样子的话

2384
01:06:22,000 --> 01:06:24,000
文件名还能不能用引号呢

2385
01:06:24,000 --> 01:06:25,000
对

2386
01:06:25,000 --> 01:06:27,000
所以你必须要引入

2387
01:06:27,000 --> 01:06:28,000
别的机制

2388
01:06:28,000 --> 01:06:28,000
对

2389
01:06:28,000 --> 01:06:29,000
escape 机制

2390
01:06:29,000 --> 01:06:30,000
在 Windows 上面

2391
01:06:30,000 --> 01:06:31,000
是非常非常蛋疼的

2392
01:06:31,000 --> 01:06:32,000
就是 Windows

2393
01:06:32,000 --> 01:06:33,000
自从支持

2394
01:06:33,000 --> 01:06:35,000
文件名没有空格之后

2395
01:06:35,000 --> 01:06:37,000
Windows 最知名的一个

2396
01:06:37,000 --> 01:06:38,000
带空格的文件名

2397
01:06:38,000 --> 01:06:39,000
大家想想是什么

2398
01:06:39,000 --> 01:06:41,000
Program 空格 Files

2399
01:06:41,000 --> 01:06:41,000
真的

2400
01:06:41,000 --> 01:06:42,000
fuck me

2401
01:06:42,000 --> 01:06:42,000
真的

2402
01:06:42,000 --> 01:06:44,000
每次要进入路径

2403
01:06:44,000 --> 01:06:45,000
真的是

2404
01:06:45,000 --> 01:06:46,000
它

2405
01:06:46,000 --> 01:06:47,000
这么说吧

2406
01:06:47,000 --> 01:06:49,000
Ulix 能有空格

2407
01:06:49,000 --> 01:06:51,000
但是 Ulix 只使用 backslash

2408
01:06:51,000 --> 01:06:51,000
做 escape

2409
01:06:51,000 --> 01:06:52,000
对吧

2410
01:06:52,000 --> 01:06:52,000
你打文件

2411
01:06:52,000 --> 01:06:53,000
你打文件名

2412
01:06:53,000 --> 01:06:54,000
你打了一半

2413
01:06:54,000 --> 01:06:55,000
你发现有个空格

2414
01:06:55,000 --> 01:06:56,000
那你 backslash 空格就好了

2415
01:06:56,000 --> 01:06:57,000
Windows 呢

2416
01:06:57,000 --> 01:06:59,000
你要回到一开始的

2417
01:06:59,000 --> 01:07:01,000
这个参数的

2418
01:07:01,000 --> 01:07:02,000
最开始

2419
01:07:02,000 --> 01:07:02,000
最前面

2420
01:07:02,000 --> 01:07:03,000
给它加一个

2421
01:07:03,000 --> 01:07:04,000
双引号

2422
01:07:04,000 --> 01:07:06,000
而 Windows 的这个

2423
01:07:06,000 --> 01:07:06,000
type

2424
01:07:06,000 --> 01:07:08,000
type auto completion

2425
01:07:08,000 --> 01:07:09,000
它虽然会帮你

2426
01:07:09,000 --> 01:07:11,000
加上双引号

2427
01:07:11,000 --> 01:07:11,000
但是它非常的蠢

2428
01:07:11,000 --> 01:07:13,000
就是你在用的时候

2429
01:07:13,000 --> 01:07:13,000
你会觉得

2430
01:07:13,000 --> 01:07:15,000
蠢死了

2431
01:07:15,000 --> 01:07:16,000
而且

2432
01:07:16,000 --> 01:07:17,000
而且 Windows

2433
01:07:17,000 --> 01:07:18,000
它也没有像

2434
01:07:18,000 --> 01:07:20,000
就是那个叫做

2435
01:07:20,000 --> 01:07:21,000
Line editor

2436
01:07:21,000 --> 01:07:22,000
就是那个命令行

2437
01:07:22,000 --> 01:07:23,000
内行的编辑器的时候

2438
01:07:23,000 --> 01:07:24,000
它是

2439
01:07:24,000 --> 01:07:24,000
我记得

2440
01:07:24,000 --> 01:07:26,000
它有那功能吗

2441
01:07:26,000 --> 01:07:27,000
就是跳一个

2442
01:07:27,000 --> 01:07:28,000
一个 word

2443
01:07:28,000 --> 01:07:28,000
一个 word 的跳

2444
01:07:28,000 --> 01:07:29,000
aut 加 f 是吧

2445
01:07:29,000 --> 01:07:30,000
没有

2446
01:07:30,000 --> 01:07:31,000
也没有

2447
01:07:31,000 --> 01:07:31,000
没有

2448
01:07:31,000 --> 01:07:33,000
w 全都没有

2449
01:07:33,000 --> 01:07:33,000
就比如说你想

2450
01:07:33,000 --> 01:07:34,000
写一个剧长的

2451
01:07:34,000 --> 01:07:35,000
什么 c

2452
01:07:35,000 --> 01:07:36,000
c 码号

2453
01:07:36,000 --> 01:07:37,000
斜杠斜杠

2454
01:07:37,000 --> 01:07:37,000
Program

2455
01:07:37,000 --> 01:07:38,000
这个

2456
01:07:38,000 --> 01:07:39,000
的时候你发现

2457
01:07:39,000 --> 01:07:40,000
我要

2458
01:07:40,000 --> 01:07:41,000
你想要回到

2459
01:07:41,000 --> 01:07:42,000
你想要回到行首

2460
01:07:42,000 --> 01:07:43,000
只能按 home

2461
01:07:43,000 --> 01:07:44,000
你不能按 control

2462
01:07:44,000 --> 01:07:45,000
加 a 之类的

2463
01:07:45,000 --> 01:07:45,000
那你只能回来

2464
01:07:45,000 --> 01:07:46,000
从第一个

2465
01:07:46,000 --> 01:07:47,000
慢慢用

2466
01:07:47,000 --> 01:07:48,000
这个箭头再挪到

2467
01:07:48,000 --> 01:07:49,000
那个对应的那个位置

2468
01:07:49,000 --> 01:07:50,000
加引号

2469
01:07:50,000 --> 01:07:50,000
c 前面

2470
01:07:50,000 --> 01:07:51,000
对

2471
01:07:51,000 --> 01:07:52,000
你看那些一纸缠

2472
01:07:52,000 --> 01:07:53,000
就德国有些很老的程序

2473
01:07:53,000 --> 01:07:54,000
一纸缠

2474
01:07:54,000 --> 01:07:56,000
然后修改文件名的时候

2475
01:07:56,000 --> 01:07:57,000
要按

2476
01:07:57,000 --> 01:07:58,000
按那个后退键

2477
01:07:58,000 --> 01:07:59,000
按

2478
01:07:59,000 --> 01:08:00,000
按上那么二三十四

2479
01:08:00,000 --> 01:08:01,000
你看它的时候

2480
01:08:01,000 --> 01:08:03,000
你就真的会替他着急啊

2481
01:08:03,000 --> 01:08:03,000
Oh my god

2482
01:08:05,000 --> 01:08:07,000
所以给人一种德国人做事严谨的感觉

2483
01:08:07,000 --> 01:08:07,000
就是这

2484
01:08:07,000 --> 01:08:08,000
道

2485
01:08:08,000 --> 01:08:09,000
模样工啊

2486
01:08:09,000 --> 01:08:10,000
我按给你们听一下

2487
01:08:14,000 --> 01:08:15,000
是这种感觉

2488
01:08:16,000 --> 01:08:17,000
请问键盘什么牌子

2489
01:08:17,000 --> 01:08:18,000
对

2490
01:08:18,000 --> 01:08:18,000
对

2491
01:08:18,000 --> 01:08:19,000
所以就刚才那个 backslash

2492
01:08:19,000 --> 01:08:21,000
其实又就是那个叫做啊

2493
01:08:21,000 --> 01:08:23,000
backslash 叫什么

2494
01:08:23,000 --> 01:08:24,000
我我我一直搞不清楚哪个是斜杠

2495
01:08:24,000 --> 01:08:26,000
哪个是反斜杠

2496
01:08:26,000 --> 01:08:28,000
backslash 是反斜杠

2497
01:08:28,000 --> 01:08:30,000
等一下斜杠是从哪

2498
01:08:30,000 --> 01:08:32,000
从右上到东南

2499
01:08:32,000 --> 01:08:33,000
OK

2500
01:08:33,000 --> 01:08:33,000
呃

2501
01:08:33,000 --> 01:08:34,000
右上到左下

2502
01:08:34,000 --> 01:08:35,000
这个是斜杠对吧

2503
01:08:35,000 --> 01:08:35,000
对

2504
01:08:35,000 --> 01:08:37,000
斜杠青年是斜杠青年

2505
01:08:37,000 --> 01:08:39,000
反斜杠青年

2506
01:08:39,000 --> 01:08:41,000
反向青年是用 backslash

2507
01:08:41,000 --> 01:08:43,000
做斜杠青年的斜杠青年

2508
01:08:44,000 --> 01:08:44,000
哎呦

2509
01:08:45,000 --> 01:08:46,000
哈哈

2510
01:08:46,000 --> 01:08:47,000
写看这个

2511
01:08:47,000 --> 01:08:49,000
左上到左下的是正斜杠

2512
01:08:49,000 --> 01:08:52,000
左上到右下的是反斜杠

2513
01:08:52,000 --> 01:08:52,000
我怎么说的

2514
01:08:52,000 --> 01:08:54,000
我问的这个问题有点抬杠

2515
01:08:54,000 --> 01:08:56,000
这实际上是一个怎么说

2516
01:08:56,000 --> 01:08:58,000
右撇子的世界的偏见

2517
01:08:58,000 --> 01:09:02,000
因为右撇子在砍人的时候会自然从右上举起来

2518
01:09:02,000 --> 01:09:04,000
然后朝左下削下去

2519
01:09:04,000 --> 01:09:04,000
对吧

2520
01:09:04,000 --> 01:09:06,000
为什么一定要砍人呢

2521
01:09:06,000 --> 01:09:07,000
就 slash 吗

2522
01:09:07,000 --> 01:09:10,000
slash 这个动作不是劈砍的意思吗

2523
01:09:10,000 --> 01:09:11,000
slash 是从

2524
01:09:11,000 --> 01:09:13,000
就是你把你把你的手举起来

2525
01:09:13,000 --> 01:09:14,000
你的惯用手举起来

2526
01:09:14,000 --> 01:09:16,000
肯定是朝右上举的呀

2527
01:09:16,000 --> 01:09:17,000
对然后呢然后

2528
01:09:17,000 --> 01:09:19,000
批批下来是朝左下批的吧

2529
01:09:19,000 --> 01:09:22,000
就是我这么说吧

2530
01:09:22,000 --> 01:09:24,000
就是在网址里面那个斜杠是正斜杠

2531
01:09:24,000 --> 01:09:25,000
对吧

2532
01:09:25,000 --> 01:09:26,000
正斜杠对

2533
01:09:26,000 --> 01:09:29,000
然后 windows 的那个路径是反斜杠吧

2534
01:09:29,000 --> 01:09:31,000
对 windows 路径是反斜杠

2535
01:09:31,000 --> 01:09:32,000
这是这实际上

2536
01:09:32,000 --> 01:09:34,000
这实际上也是一个很有意思的叫什么

2537
01:09:34,000 --> 01:09:35,000
路径依赖问题

2538
01:09:35,000 --> 01:09:39,000
因为 unix 最开始是用反用斜杠作为那个

2539
01:09:39,000 --> 01:09:39,000
正斜杠

2540
01:09:39,000 --> 01:09:41,000
路径分割服的

2541
01:09:41,000 --> 01:09:44,000
而 dos 一开始是 dos 1.0 是没有路径这个概念的

2542
01:09:44,000 --> 01:09:46,000
所以也是后来加的

2543
01:09:46,000 --> 01:09:47,000
对

2544
01:09:47,000 --> 01:09:55,000
他们就是继承了当时 cprcpm 的那个斜杠作为 flag 的这个参数

2545
01:09:55,000 --> 01:09:56,000
就是作为参数的用法

2546
01:09:56,000 --> 01:09:59,000
然后等到他们需要加入这个路径的时候

2547
01:09:59,000 --> 01:10:02,000
那就用了反斜杠

2548
01:10:02,000 --> 01:10:03,000
因为斜杠已经被用掉了

2549
01:10:03,000 --> 01:10:04,000
对吧

2550
01:10:04,000 --> 01:10:04,000
对

2551
01:10:04,000 --> 01:10:05,000
这就造成了另外一个问题

2552
01:10:05,000 --> 01:10:08,000
就是你用这个我们讲用 backslash 这个叫 quoting 嘛

2553
01:10:08,000 --> 01:10:12,000
就是以保护那个空格的时候

2554
01:10:12,000 --> 01:10:12,000
你发现哎

2555
01:10:12,000 --> 01:10:13,000
好像没法保护对吧

2556
01:10:13,000 --> 01:10:16,000
因为我的那个斜杠有别的用途

2557
01:10:16,000 --> 01:10:16,000
对

2558
01:10:16,000 --> 01:10:17,000
太坑爹了

2559
01:10:17,000 --> 01:10:21,000
但现在的主流的操作系统就是还是就是最新的

2560
01:10:21,000 --> 01:10:24,000
比如说 windows 10 和这个 macos 都是允许使用空格

2561
01:10:24,000 --> 01:10:25,000
而且是允许使用任意多个空格

2562
01:10:25,000 --> 01:10:26,000
就是连续也可以对

2563
01:10:26,000 --> 01:10:27,000
对吧

2564
01:10:27,000 --> 01:10:29,000
所以就会出现我刚才说那个问题

2565
01:10:29,000 --> 01:10:32,000
就是那就你非要搞事的话

2566
01:10:32,000 --> 01:10:33,000
你说起个文件名对吧

2567
01:10:33,000 --> 01:10:35,000
哎啊隐藏后缀对吧

2568
01:10:35,000 --> 01:10:37,000
然后又又起个文件文件名

2569
01:10:37,000 --> 01:10:39,000
哎空格又隐藏后缀对吧

2570
01:10:39,000 --> 01:10:40,000
那你又起个文件名

2571
01:10:40,000 --> 01:10:42,000
哎空格空格又隐藏后缀

2572
01:10:42,000 --> 01:10:42,000
你发现哎

2573
01:10:42,000 --> 01:10:44,000
这个文件怎么全都是文件就都叫哎

2574
01:10:44,000 --> 01:10:45,000
对不对

2575
01:10:45,000 --> 01:10:46,000
全全全是空格文件

2576
01:10:47,000 --> 01:10:47,000
哈哈哈哈

2577
01:10:47,000 --> 01:10:49,000
这就还有个空白的文件更猛的

2578
01:10:49,000 --> 01:10:50,000
这个也很有意思

2579
01:10:50,000 --> 01:10:53,000
但所以我觉得就是允许空格是可以的

2580
01:10:53,000 --> 01:10:56,000
但是我觉得就是能不写空格的时候

2581
01:10:56,000 --> 01:10:56,000
尽量不写空格

2582
01:10:56,000 --> 01:10:58,000
避免太多那种坑了

2583
01:10:58,000 --> 01:11:01,000
嗯

2584
01:11:01,000 --> 01:11:02,000
所以文件名啊

2585
01:11:02,000 --> 01:11:04,000
就是允许空格还好啊

2586
01:11:04,000 --> 01:11:05,000
但是你在编程的时候

2587
01:11:05,000 --> 01:11:08,000
那些标标制服标示服

2588
01:11:08,000 --> 01:11:09,000
标示服

2589
01:11:09,000 --> 01:11:11,000
identify

2590
01:11:11,000 --> 01:11:12,000
标示服

2591
01:11:12,000 --> 01:11:12,000
嗯

2592
01:11:12,000 --> 01:11:15,000
那标示服的话就肯定不能有空格嘛

2593
01:11:15,000 --> 01:11:15,000
对吧

2594
01:11:15,000 --> 01:11:16,000
嗯

2595
01:11:16,000 --> 01:11:16,000
那就就要变

2596
01:11:16,000 --> 01:11:17,000
会变成

2597
01:11:17,000 --> 01:11:18,000
两两个标示

2598
01:11:18,000 --> 01:11:19,000
两个符号了吗

2599
01:11:19,000 --> 01:11:20,000
identify

2600
01:11:20,000 --> 01:11:21,000
对

2601
01:11:21,000 --> 01:11:22,000
那里个相对好理解嘛

2602
01:11:22,000 --> 01:11:24,000
就是说那里至少有个明确的语义

2603
01:11:24,000 --> 01:11:25,000
跟写字是一样的

2604
01:11:25,000 --> 01:11:27,000
你知道这是你写的是两个 word

2605
01:11:27,000 --> 01:11:28,000
它不是一个 word

2606
01:11:28,000 --> 01:11:29,000
就那肯定要用一个东西来分割

2607
01:11:29,000 --> 01:11:30,000
空格分割

2608
01:11:30,000 --> 01:11:31,000
天经地义嘛

2609
01:11:31,000 --> 01:11:33,000
就是在西文里面还是这样子

2610
01:11:33,000 --> 01:11:33,000
嗯

2611
01:11:33,000 --> 01:11:34,000
所以呢

2612
01:11:34,000 --> 01:11:35,000
在

2613
01:11:35,000 --> 01:11:39,000
在编程的时候就开始各种类啊

2614
01:11:39,000 --> 01:11:40,000
这各种函数啊

2615
01:11:40,000 --> 01:11:42,000
就开始大家要连起来嘛

2616
01:11:42,000 --> 01:11:42,000
嗯

2617
01:11:42,000 --> 01:11:46,000
就于是就有各种各样的这个写法了

2618
01:11:46,000 --> 01:11:46,000
对

2619
01:11:47,000 --> 01:11:49,000
现在最流行的应该就是那种 camel case 吧

2620
01:11:49,000 --> 01:11:50,000
对吧

2621
01:11:50,000 --> 01:11:51,000
呃

2622
01:11:51,000 --> 01:11:53,000
camel case 和下划线

2623
01:11:53,000 --> 01:11:55,000
取决于你干嘛吧

2624
01:11:55,000 --> 01:11:56,000
现在什么 kbob case

2625
01:11:56,000 --> 01:12:00,000
camel case 和那个 snake case 各有用处呢

2626
01:12:00,000 --> 01:12:01,000
来来来

2627
01:12:01,000 --> 01:12:02,000
跟大家解释一下

2628
01:12:02,000 --> 01:12:03,000
这这个什么意思嘛

2629
01:12:03,000 --> 01:12:04,000
对吧

2630
01:12:04,000 --> 01:12:05,000
先要讲这个场景是什么

2631
01:12:05,000 --> 01:12:05,000
对不对

2632
01:12:05,000 --> 01:12:07,000
就是说为什么有这个需求

2633
01:12:07,000 --> 01:12:08,000
就是说你因为

2634
01:12:08,000 --> 01:12:10,000
因为不能用空格去分割

2635
01:12:10,000 --> 01:12:12,000
这个就是编程里面的一个

2636
01:12:12,000 --> 01:12:14,000
一个一个一个词

2637
01:12:14,000 --> 01:12:14,000
一个标示符

2638
01:12:14,000 --> 01:12:15,000
一个标示符

2639
01:12:15,000 --> 01:12:15,000
对吧

2640
01:12:15,000 --> 01:12:16,000
你不能用空格分割

2641
01:12:16,000 --> 01:12:16,000
嗯

2642
01:12:16,000 --> 01:12:17,000
嗯

2644
01:12:47,000 --> 01:12:47,000
对

2645
01:12:47,000 --> 01:12:49,000
第一个一定要小写才叫 camel case

2646
01:12:49,000 --> 01:12:52,000
第一个大写的话就 pass code case

2647
01:12:52,000 --> 01:12:54,000
但这个区别其实好像大家讲的那么多啊

2648
01:12:54,000 --> 01:12:57,000
就是大家一般还是讲就是说是就是首字母大写

2649
01:12:57,000 --> 01:12:58,000
我们都是这样对吧

2650
01:12:58,000 --> 01:12:58,000
对

2651
01:12:58,000 --> 01:13:01,000
比如说诟言里面那个大写小写是有语义的区别

2652
01:13:01,000 --> 01:13:03,000
number function 实际上是 camel

2653
01:13:03,000 --> 01:13:05,000
是实际上是 pass code case

2654
01:13:05,000 --> 01:13:07,000
但是很多人会说那是 camel case

2655
01:13:07,000 --> 01:13:10,000
camel case 就是说你看怎么去理解这个他的那个定义是啥

2656
01:13:10,000 --> 01:13:13,000
就是说你只是说就大写就是这个就有这个

2657
01:13:14,000 --> 01:13:17,000
词的这个首字母大写这种这一类

2658
01:13:17,000 --> 01:13:17,000
叫 camel case

2659
01:13:17,000 --> 01:13:18,000
他也说得过去

2660
01:13:18,000 --> 01:13:20,000
那只是说因为在 go 里面呢

2661
01:13:20,000 --> 01:13:23,000
他的第一个字母是大写和小写会影响到他这个

2662
01:13:23,000 --> 01:13:27,000
这个这个标示符的这个就是 visibility 的可见性嘛

2663
01:13:27,000 --> 01:13:31,000
所以这个他就说那我又不好去单独去给他起一个名字

2664
01:13:31,000 --> 01:13:34,000
所以就只能就说这一类都叫都叫 camel case 了

2665
01:13:34,000 --> 01:13:35,000
呃好吧

2666
01:13:35,000 --> 01:13:39,000
那你可以说 pass code case 实际上是 camel case 的一个一个一个特例的

2667
01:13:39,000 --> 01:13:39,000
嗯

2668
01:13:39,000 --> 01:13:41,000
就小驼峰和大驼峰

2669
01:13:41,000 --> 01:13:44,000
如果小所谓的小驼峰就是呃

2670
01:13:44,000 --> 01:13:45,000
首字母是小写

2671
01:13:45,000 --> 01:13:47,000
但是中的后面的那个词

2672
01:13:47,000 --> 01:13:50,000
那那个第二个单词的那个是字母是大写

2673
01:13:50,000 --> 01:13:50,000
就小驼峰

2674
01:13:50,000 --> 01:13:51,000
对对对

2675
01:13:51,000 --> 01:13:54,000
然后大驼峰的话就是连首字母也大写

2676
01:13:54,000 --> 01:13:57,000
那这样的话也可以叫做那个 pass code

2677
01:13:57,000 --> 01:13:58,000
就 pass code

2678
01:13:58,000 --> 01:14:01,000
他是从 pass code 原来的

2679
01:14:01,000 --> 01:14:02,000
对

2680
01:14:02,000 --> 01:14:04,000
但这里就有一个更坑爹的事情了

2681
01:14:04,000 --> 01:14:04,000
就是说啊

2682
01:14:04,000 --> 01:14:05,000
我考你们一个哈

2683
01:14:05,000 --> 01:14:07,000
就其实有很多人有分歧的

2684
01:14:07,000 --> 01:14:08,000
呃

2685
01:14:08,000 --> 01:14:09,000
缩略词

2686
01:14:09,000 --> 01:14:11,000
全大写的时候应该怎么办

2687
01:14:11,000 --> 01:14:11,000
是吗

2688
01:14:11,000 --> 01:14:12,000
对怎么办

2689
01:14:12,000 --> 01:14:13,000
比如说 URL

2690
01:14:13,000 --> 01:14:16,000
URL 基本上那个都大家都基本上都是

2691
01:14:16,000 --> 01:14:17,000
如果是

2692
01:14:17,000 --> 01:14:19,000
在词所包装很多都是小写或者是这个

2693
01:14:19,000 --> 01:14:21,000
那那也是一个要要值得讨论的问题

2694
01:14:21,000 --> 01:14:22,000
这个还不是最最坑的

2695
01:14:22,000 --> 01:14:23,000
最坑是这种

2696
01:14:23,000 --> 01:14:25,000
比如说是 IP 地址

2697
01:14:25,000 --> 01:14:26,000
IP address

2698
01:14:26,000 --> 01:14:27,000
我写成一个字的时候

2699
01:14:27,000 --> 01:14:28,000
怎么这么大小写

2700
01:14:28,000 --> 01:14:31,000
IP 两个字必须两个字母必须大写吧

2701
01:14:31,000 --> 01:14:32,000
通常来讲的话

2702
01:14:32,000 --> 01:14:35,000
那不就变成 pass code 开始了吗

2703
01:14:35,000 --> 01:14:38,000
不是这里就很坑的

2704
01:14:38,000 --> 01:14:39,000
在在这个问题在这里啊

2705
01:14:39,000 --> 01:14:40,000
就是说呃

2706
01:14:40,000 --> 01:14:42,000
我们先不考虑够语言这种比较特殊

2707
01:14:42,000 --> 01:14:45,000
他对那个首字母大小写有这个语义的区别之外

2708
01:14:45,000 --> 01:14:46,000
就是说假设是

2709
01:14:47,000 --> 01:14:48,000
诱诱于区别情况下

2710
01:14:48,000 --> 01:14:49,000
他其实也有也有讲究的

2711
01:14:49,000 --> 01:14:53,000
就是说比如说是 I 大写 P 小写

2712
01:14:53,000 --> 01:14:56,000
A 大写的 IP address

2713
01:14:56,000 --> 01:14:58,000
还是说 IPA 都大写

2714
01:14:58,000 --> 01:15:00,000
然后 address 的后面那个出手字母都小写

2715
01:15:00,000 --> 01:15:01,000
这是一种宪法对吧

2716
01:15:01,000 --> 01:15:03,000
还有就是 IP 都小写

2717
01:15:03,000 --> 01:15:04,000
然后 A 大写

2718
01:15:04,000 --> 01:15:05,000
然后 address 都小写

2719
01:15:05,000 --> 01:15:06,000
这种情况下对吧

2720
01:15:06,000 --> 01:15:08,000
就是你发现没

2721
01:15:08,000 --> 01:15:11,000
他有很多这种不太明确的地方

2722
01:15:11,000 --> 01:15:12,000
然后这种

2723
01:15:12,000 --> 01:15:15,000
你说这个 IP address 还比较简单对吧

2724
01:15:15,000 --> 01:15:16,000
但如果是刚好是这种

2725
01:15:16,000 --> 01:15:17,000
算缩略词

2726
01:15:17,000 --> 01:15:18,000
IP 是个缩略词

2727
01:15:18,000 --> 01:15:21,000
它是 Internet Protocol 的这个缩略

2728
01:15:21,000 --> 01:15:25,000
如果说我要写 IP URL address

2729
01:15:25,000 --> 01:15:26,000
怎么办

2730
01:15:26,000 --> 01:15:32,000
这好像这个就跟你的环境跟那个语言有关系

2731
01:15:32,000 --> 01:15:34,000
然后有些他还是有习惯的

2732
01:15:34,000 --> 01:15:37,000
比如说这个叫首字母缩写

2733
01:15:37,000 --> 01:15:41,000
如果超过是三个或三个以上的话

2734
01:15:41,000 --> 01:15:44,000
那么把后面几个字母小写

2735
01:15:44,000 --> 01:15:46,000
就有那样的语言

2736
01:15:46,000 --> 01:15:48,000
是啊

2737
01:15:48,000 --> 01:15:49,000
所以我就说这个事情呢

2738
01:15:49,000 --> 01:15:51,000
就是其实是一个相对来说

2739
01:15:51,000 --> 01:15:53,000
首先中文里面不存在这个问题

2740
01:15:53,000 --> 01:15:55,000
因为只有西文有大小姐这个概念嘛

2741
01:15:55,000 --> 01:15:58,000
然后在西文大小姐里面

2742
01:15:58,000 --> 01:16:00,000
这种就会经常导致各种

2743
01:16:00,000 --> 01:16:02,000
这种所谓的叫做

2744
01:16:02,000 --> 01:16:03,000
圣战对吧

2745
01:16:03,000 --> 01:16:04,000
各种坚持

2746
01:16:04,000 --> 01:16:06,000
一定要某一种写法才对

2747
01:16:06,000 --> 01:16:09,000
另外一种某种写法才更合理的

2748
01:16:09,000 --> 01:16:12,000
这种争论是一直都存在

2749
01:16:12,000 --> 01:16:14,000
而且我估计在我们死后

2750
01:16:14,000 --> 01:16:15,000
它应该还是会继续存在的

2751
01:16:16,000 --> 01:16:18,000
其实它怎么大小写

2752
01:16:18,000 --> 01:16:21,000
还是由这个 API 的设计者

2753
01:16:21,000 --> 01:16:23,000
他当时拍脑袋想的吧

2754
01:16:23,000 --> 01:16:25,000
因为我们这边有 web 开发者

2755
01:16:25,000 --> 01:16:27,000
那个 XML HTTP request 里面

2756
01:16:27,000 --> 01:16:29,000
就是 XML 全大写

2757
01:16:29,000 --> 01:16:31,000
但 HTTP 又不是全大写

2758
01:16:31,000 --> 01:16:32,000
是吧

2759
01:16:32,000 --> 01:16:34,000
很奇怪对不对

2760
01:16:34,000 --> 01:16:37,000
所以这个完全是看那个开发者

2761
01:16:37,000 --> 01:16:38,000
当时他拍脑袋

2762
01:16:38,000 --> 01:16:40,000
他觉得这样写比较优雅

2763
01:16:40,000 --> 01:16:40,000
他就这么写

2764
01:16:40,000 --> 01:16:42,000
看心情

2765
01:16:42,000 --> 01:16:43,000
没有

2766
01:16:43,000 --> 01:16:45,000
今天我们讲的是命名规则嘛

2767
01:16:45,000 --> 01:16:46,000
像这种东西

2768
01:16:46,000 --> 01:16:48,000
很多很多时候就是有规则

2769
01:16:48,000 --> 01:16:50,000
有的地方是没规则

2770
01:16:50,000 --> 01:16:51,000
然后一个语言里面

2771
01:16:51,000 --> 01:16:52,000
他有时候定了一个规则

2772
01:16:52,000 --> 01:16:53,000
他自己都不同意

2773
01:16:53,000 --> 01:16:55,000
经常会有这种事情

2774
01:16:55,000 --> 01:16:56,000
对每个公司

2775
01:16:56,000 --> 01:16:57,000
他有自己的这个 convention

2776
01:16:57,000 --> 01:17:00,000
毕竟它是一个 convention 嘛

2777
01:17:00,000 --> 01:17:01,000
就是它还是一种约定

2778
01:17:01,000 --> 01:17:05,000
它没有一种很强制的机制去约束它

2779
01:17:05,000 --> 01:17:07,000
比如说如果有一个什么机器检测的机制

2780
01:17:07,000 --> 01:17:09,000
禁止他做某件事情

2781
01:17:09,000 --> 01:17:13,000
那他可能这个规则才会非常的强力的

2782
01:17:13,000 --> 01:17:14,000
然后 comply 不过是吧

2783
01:17:14,000 --> 01:17:16,000
对

2784
01:17:16,000 --> 01:17:19,000
但从实用主义角度来讲

2785
01:17:19,000 --> 01:17:22,000
因为你用 camel case 要解决什么问题

2786
01:17:22,000 --> 01:17:25,000
是解决不能用空格分词

2787
01:17:25,000 --> 01:17:25,000
也没有

2788
01:17:25,000 --> 01:17:27,000
就是说也让我们后面会又讲

2789
01:17:27,000 --> 01:17:29,000
用下滑线也是一个办法

2790
01:17:29,000 --> 01:17:30,000
就如果在不能用空格

2791
01:17:30,000 --> 01:17:30,000
也不用下滑线的

2792
01:17:30,000 --> 01:17:32,000
因为我认为下滑线是一个空格的变种

2793
01:17:32,000 --> 01:17:33,000
对吧

2794
01:17:33,000 --> 01:17:33,000
OK

2795
01:17:33,000 --> 01:17:34,000
那不能用空格

2796
01:17:34,000 --> 01:17:36,000
也不能用下滑线的情况下

2797
01:17:36,000 --> 01:17:39,000
你要用这个大小写来展示词语词迹的区别

2798
01:17:39,000 --> 01:17:40,000
那很险

2799
01:17:40,000 --> 01:17:41,000
这种情况下

2800
01:17:41,000 --> 01:17:44,000
你就不应该把那种全大写的词

2801
01:17:44,000 --> 01:17:46,000
都真的全大写

2802
01:17:46,000 --> 01:17:46,000
这样的话

2803
01:17:46,000 --> 01:17:46,000
你可能会有一个很强的词迹

2804
01:17:46,000 --> 01:17:48,000
你看不清楚它的边界在哪里

2805
01:17:48,000 --> 01:17:49,000
就好像刚才你说的

2806
01:17:49,000 --> 01:17:51,000
XML HTTP Request 的情况下

2807
01:17:51,000 --> 01:17:51,000
对吧

2808
01:17:51,000 --> 01:17:53,000
那 XML HTTP 这是一个东西

2809
01:17:53,000 --> 01:17:54,000
还是两个东西

2810
01:17:54,000 --> 01:17:55,000
对吧

2811
01:17:55,000 --> 01:17:57,000
原教义的那种 camel case

2812
01:17:57,000 --> 01:18:00,000
还是比较适合阅读的

2813
01:18:00,000 --> 01:18:01,000
虽然说看起来比较丑

2814
01:18:01,000 --> 01:18:01,000
对吧

2815
01:18:01,000 --> 01:18:04,000
为什么 XML 是这么一种写法

2816
01:18:04,000 --> 01:18:04,000
就好奇怪

2817
01:18:04,000 --> 01:18:05,000
感觉怪怪的

2818
01:18:05,000 --> 01:18:07,000
但从读的角度来讲

2819
01:18:07,000 --> 01:18:09,000
或者从分词的这个角度来看

2820
01:18:09,000 --> 01:18:10,000
对吧

2821
01:18:10,000 --> 01:18:10,000
你还是要去找到

2822
01:18:10,000 --> 01:18:12,000
它那个东西的本质是什么

2823
01:18:12,000 --> 01:18:13,000
它本质不是为了好看

2824
01:18:13,000 --> 01:18:15,000
它本质是为了 clarity

2825
01:18:15,000 --> 01:18:16,000
为了清晰

2826
01:18:16,000 --> 01:18:16,000
对吧

2827
01:18:16,000 --> 01:18:16,000
对

2828
01:18:16,000 --> 01:18:17,000
OK

2829
01:18:17,000 --> 01:18:19,000
那就是一种命名方式

2830
01:18:19,000 --> 01:18:20,000
第二种命名方式

2831
01:18:20,000 --> 01:18:21,000
就要讲空格是肯定不行的

2832
01:18:21,000 --> 01:18:22,000
那为什么我说

2833
01:18:22,000 --> 01:18:23,000
下话线是空格的一个变种的

2834
01:18:23,000 --> 01:18:24,000
因为下话线

2835
01:18:24,000 --> 01:18:27,000
它其实就是空格那里

2836
01:18:27,000 --> 01:18:30,000
那个位置变成了一条线

2837
01:18:30,000 --> 01:18:30,000
然后下话线

2838
01:18:30,000 --> 01:18:33,000
其实有一个区别

2839
01:18:33,000 --> 01:18:34,000
是比较要紧的

2840
01:18:34,000 --> 01:18:38,000
就是在用鼠标双击选词的时候

2841
01:18:38,000 --> 01:18:40,000
下话线它不会把那个词断开

2842
01:18:40,000 --> 01:18:41,000
对

2843
01:18:41,000 --> 01:18:42,000
这个其实挺蛮有用的

2844
01:18:42,000 --> 01:18:42,000
比如说

2845
01:18:42,000 --> 01:18:43,000
什么意思

2846
01:18:43,000 --> 01:18:44,000
就是说

2847
01:18:44,000 --> 01:18:46,000
你想象 Hello World

2848
01:18:46,000 --> 01:18:46,000
的

2849
01:18:46,000 --> 01:18:47,000
如果你是空格断开

2850
01:18:47,000 --> 01:18:49,000
它肯定你点击

2851
01:18:49,000 --> 01:18:50,000
我们默认是双击

2852
01:18:50,000 --> 01:18:50,000
是选一个词

2853
01:18:50,000 --> 01:18:51,000
对吧

2854
01:18:51,000 --> 01:18:51,000
一个 word

2855
01:18:51,000 --> 01:18:53,000
那应该只会选到 Hello

2856
01:18:53,000 --> 01:18:54,000
然后它选不到后面那个 word

2857
01:18:54,000 --> 01:18:56,000
但如果说你用下话线

2858
01:18:56,000 --> 01:18:57,000
把 Hello World 连起来之后

2859
01:18:57,000 --> 01:19:00,000
你在大多数的图形界面

2860
01:19:00,000 --> 01:19:01,000
你用双击的方式去选那个词

2861
01:19:01,000 --> 01:19:02,000
它会把整个 Hello

2862
01:19:02,000 --> 01:19:02,000
下话线

2863
01:19:02,000 --> 01:19:03,000
都圈起来

2864
01:19:03,000 --> 01:19:05,000
都高亮选择起来

2865
01:19:05,000 --> 01:19:05,000
对不对

2866
01:19:05,000 --> 01:19:08,000
就这个其实还是蛮有用的

2867
01:19:08,000 --> 01:19:10,000
这交互设计为了优化

2868
01:19:10,000 --> 01:19:12,000
这种字符串

2869
01:19:12,000 --> 01:19:12,000
想这么做

2870
01:19:12,000 --> 01:19:14,000
对

2871
01:19:14,000 --> 01:19:15,000
它避免了

2872
01:19:15,000 --> 01:19:16,000
大小写的

2873
01:19:16,000 --> 01:19:16,000
那个

2874
01:19:16,000 --> 01:19:16,000
争端

2875
01:19:16,000 --> 01:19:17,000
这个时候你怎么用大小写

2876
01:19:17,000 --> 01:19:19,000
就全看你的这个心情了

2877
01:19:19,000 --> 01:19:21,000
因为它跟语义和这个分词

2878
01:19:21,000 --> 01:19:23,000
它都不影响了

2879
01:19:23,000 --> 01:19:23,000
对吧

2880
01:19:23,000 --> 01:19:24,000
你都可以比如说

2881
01:19:24,000 --> 01:19:24,000
刚才那个是

2882
01:19:24,000 --> 01:19:27,000
XML 下话线

2883
01:19:27,000 --> 01:19:28,000
HTTP 下话线

2884
01:19:28,000 --> 01:19:28,000
Request

2885
01:19:28,000 --> 01:19:29,000
你都可以这么写

2886
01:19:29,000 --> 01:19:29,000
对不对

2887
01:19:29,000 --> 01:19:31,000
其实不影响这个了

2888
01:19:31,000 --> 01:19:32,000
那这就是好看的问题了

2889
01:19:32,000 --> 01:19:34,000
不过理论上讲

2890
01:19:34,000 --> 01:19:34,000
就是话

2891
01:19:34,000 --> 01:19:36,000
用下话线的话

2892
01:19:36,000 --> 01:19:37,000
就没那么碍眼

2893
01:19:37,000 --> 01:19:37,000
说实话

2894
01:19:37,000 --> 01:19:41,000
就既有这个空格的这个空间感

2895
01:19:41,000 --> 01:19:41,000
然后呢

2896
01:19:41,000 --> 01:19:43,000
也没那么碍眼

2897
01:19:43,000 --> 01:19:44,000
然后因为它是在下话线

2898
01:19:44,000 --> 01:19:46,000
所以它这个名字叫

2899
01:19:46,000 --> 01:19:46,000
Snake Case

2900
01:19:46,000 --> 01:19:47,000
就像是蛇

2901
01:19:47,000 --> 01:19:50,000
在地上爬

2902
01:19:50,000 --> 01:19:51,000
蛇

2903
01:19:51,000 --> 01:19:52,000
超形象的

2904
01:19:52,000 --> 01:19:55,000
我觉得这几个名字都超形象的

2905
01:19:55,000 --> 01:19:56,000
像这个下话线叫 Snake 吧

2906
01:19:56,000 --> 01:19:58,000
名字符叫 Kebab

2907
01:19:58,000 --> 01:19:59,000
对吧

2908
01:19:59,000 --> 01:19:59,000
烤肉

2909
01:19:59,000 --> 01:20:00,000
烤串

2910
01:20:00,000 --> 01:20:01,000
烤串 Case

2911
01:20:01,000 --> 01:20:02,000
啥意思

2912
01:20:02,000 --> 01:20:03,000
就像一个串

2913
01:20:03,000 --> 01:20:05,000
串子上面好多这个什么肉

2914
01:20:05,000 --> 01:20:08,000
叉烧一样的感觉

2915
01:20:08,000 --> 01:20:10,000
这一看就是这个吃货去的

2916
01:20:10,000 --> 01:20:12,000
这个东西有中文翻译吗

2917
01:20:12,000 --> 01:20:13,000
就肉夹馍

2918
01:20:13,000 --> 01:20:13,000
对不对

2919
01:20:13,000 --> 01:20:15,000
就是肉夹馍

2920
01:20:15,000 --> 01:20:15,000
肉夹馍

2921
01:20:16,000 --> 01:20:16,000
字面意义上

2922
01:20:16,000 --> 01:20:19,000
Duna Kebab 是旋转烧烤的意思

2923
01:20:19,000 --> 01:20:21,000
Duna 是旋转

2924
01:20:21,000 --> 01:20:22,000
Kebab 是烧烤

2925
01:20:22,000 --> 01:20:26,000
然后连在一起叫

2926
01:20:26,000 --> 01:20:31,000
Keybab 实际上是 Duna Kebab 的简称

2927
01:20:31,000 --> 01:20:33,000
就是土耳其烤肉的简称

2928
01:20:33,000 --> 01:20:35,000
但是就是在 Keybab 这个词

2929
01:20:35,000 --> 01:20:37,000
在进入这个英语语系里面

2930
01:20:37,000 --> 01:20:39,000
它其实就是我们理解的那个串

2931
01:20:39,000 --> 01:20:40,000
对

2932
01:20:40,000 --> 01:20:41,000
烤啊

2933
01:20:41,000 --> 01:20:42,000
不是串

2934
01:20:42,000 --> 01:20:43,000
Duna 是旋转

2935
01:20:43,000 --> 01:20:44,000
Kebab 是烤

2936
01:20:46,000 --> 01:20:47,000
Kebab 是烤的意思

2937
01:20:47,000 --> 01:20:47,000
对

2938
01:20:47,000 --> 01:20:49,000
对但是就是我就说

2939
01:20:49,000 --> 01:20:50,000
你在那个就是英语里面

2940
01:20:50,000 --> 01:20:52,000
Rio 的语义是说

2941
01:20:52,000 --> 01:20:54,000
对他这个东西语义变成了

2942
01:20:54,000 --> 01:20:55,000
Shashlik

2943
01:20:55,000 --> 01:20:55,000
对

2944
01:20:55,000 --> 01:20:56,000
就是

2945
01:20:56,000 --> 01:20:58,000
变成一个串的一起的东西

2946
01:20:58,000 --> 01:21:01,000
对像像像竹签穿起来这样一个东西

2947
01:21:01,000 --> 01:21:03,000
对就是有一个罐在中间很细

2948
01:21:03,000 --> 01:21:05,000
然后上面有一堆这个更宽的一个物件

2949
01:21:05,000 --> 01:21:07,000
这个就是英文里面的这个 Kebab

2950
01:21:07,000 --> 01:21:09,000
目前他他展示了这个

2951
01:21:09,000 --> 01:21:11,000
也是这个 Kebab case 的这个意思

2952
01:21:11,000 --> 01:21:11,000
对

2953
01:21:11,000 --> 01:21:14,000
这个叫烤串

2954
01:21:14,000 --> 01:21:15,000
烤串 case

2955
01:21:15,000 --> 01:21:15,000
烤串 case

2956
01:21:15,000 --> 01:21:18,000
串这个字其实还是蛮形象

2957
01:21:18,000 --> 01:21:20,000
这要是日本人来起的话

2958
01:21:20,000 --> 01:21:21,000
就会变成那个

2959
01:21:21,000 --> 01:21:22,000
鸟串烧

2960
01:21:22,000 --> 01:21:23,000
串鸟烧

2961
01:21:23,000 --> 01:21:24,000
鸟串烧

2962
01:21:24,000 --> 01:21:24,000
对

2963
01:21:24,000 --> 01:21:26,000
但 Kebab case 有个问题

2964
01:21:26,000 --> 01:21:27,000
就是他并不是所有的这个

2965
01:21:27,000 --> 01:21:29,000
语言都支持

2966
01:21:29,000 --> 01:21:30,000
因为因为横线

2967
01:21:30,000 --> 01:21:32,000
就是不是用下话线

2968
01:21:32,000 --> 01:21:33,000
是用那个联子符

2969
01:21:33,000 --> 01:21:34,000
或者叫简号嘛

2970
01:21:34,000 --> 01:21:34,000
对吧

2971
01:21:34,000 --> 01:21:36,000
他其实是有别的含义的

2972
01:21:36,000 --> 01:21:37,000
可能是 A-B 的

2973
01:21:37,000 --> 01:21:37,000
也就是 Kebab

2974
01:21:37,000 --> 01:21:38,000
然后杠这个 case

2975
01:21:38,000 --> 01:21:39,000
他可能是一个

2976
01:21:39,000 --> 01:21:41,000
他认为你叫执行一个这个

2977
01:21:41,000 --> 01:21:43,000
就数学的这个简的一个操作

2978
01:21:43,000 --> 01:21:45,000
所以这个其实在很多语言里面

2979
01:21:45,000 --> 01:21:45,000
其实是

2980
01:21:45,000 --> 01:21:47,000
不支持这种方式的

2981
01:21:47,000 --> 01:21:48,000
Kebab case 最常见的

2982
01:21:48,000 --> 01:21:49,000
就是在 CSS 里面嘛

2983
01:21:49,000 --> 01:21:50,000
很啰嗦

2984
01:21:50,000 --> 01:21:51,000
对

2985
01:21:51,000 --> 01:21:51,000
这也是因为 CSS

2986
01:21:51,000 --> 01:21:54,000
其实不进行计算的一个原因导致的

2987
01:21:54,000 --> 01:21:54,000
对不对

2988
01:21:54,000 --> 01:21:55,000
他没有这个 compute

2989
01:21:55,000 --> 01:21:56,000
除非用那个 calc

2990
01:21:56,000 --> 01:21:57,000
他是要空格

2991
01:21:57,000 --> 01:21:59,000
CSS 现在不是支持 calc 吗

2992
01:21:59,000 --> 01:22:01,000
所以你在 calc 里面

2993
01:22:01,000 --> 01:22:02,000
你要想写简号的话

2994
01:22:02,000 --> 01:22:04,000
简号前后一定要有空格

2995
01:22:04,000 --> 01:22:06,000
而且这空格不能被压缩掉

2996
01:22:06,000 --> 01:22:07,000
对

2997
01:22:07,000 --> 01:22:09,000
不像有些空格可以压缩

2998
01:22:09,000 --> 01:22:10,000
就是那个

2999
01:22:10,000 --> 01:22:12,000
叫做语意敏感的空格

3000
01:22:12,000 --> 01:22:13,000
对

3001
01:22:13,000 --> 01:22:15,000
这个其实也挺不和谐

3002
01:22:15,000 --> 01:22:15,000
对

3003
01:22:15,000 --> 01:22:19,000
但是你看

3004
01:22:19,000 --> 01:22:21,000
就是他其实这种历史背景的原因

3005
01:22:21,000 --> 01:22:22,000
过去没有运算

3006
01:22:22,000 --> 01:22:24,000
那所以我用这个下下线

3007
01:22:24,000 --> 01:22:25,000
用这个叫什么

3008
01:22:25,000 --> 01:22:26,000
不叫简号

3009
01:22:26,000 --> 01:22:27,000
叫的这个横线

3010
01:22:27,000 --> 01:22:29,000
其实没有什么区别

3011
01:22:29,000 --> 01:22:30,000
但是后来发现

3012
01:22:30,000 --> 01:22:31,000
你现在要运算了

3013
01:22:31,000 --> 01:22:32,000
怎么办

3014
01:22:32,000 --> 01:22:33,000
对

3015
01:22:33,000 --> 01:22:34,000
这其实一切都是

3016
01:22:34,000 --> 01:22:36,000
都是一个路径依赖的功能

3017
01:22:36,000 --> 01:22:37,000
假如当初键盘设计的时候

3018
01:22:37,000 --> 01:22:40,000
能明确区分连字符和简号

3019
01:22:40,000 --> 01:22:42,000
现在可能也就没有这个问题了

3020
01:22:42,000 --> 01:22:42,000
所以

3021
01:22:42,000 --> 01:22:44,000
我觉得也区分不了

3022
01:22:44,000 --> 01:22:44,000
这个很难

3023
01:22:44,000 --> 01:22:45,000
对

3024
01:22:45,000 --> 01:22:45,000
就好像

3025
01:22:45,000 --> 01:22:45,000
对于人

3026
01:22:45,000 --> 01:22:45,000
对

3027
01:22:45,000 --> 01:22:49,000
我们人类在非常自然的情况下

3028
01:22:49,000 --> 01:22:51,000
是不会去考虑一个符号的语意

3029
01:22:51,000 --> 01:22:52,000
跟这个符号的表现

3030
01:22:52,000 --> 01:22:52,000
是可以分开的

3031
01:22:52,000 --> 01:22:53,000
这个问题

3032
01:22:53,000 --> 01:22:54,000
就我们看到

3033
01:22:54,000 --> 01:22:55,000
那种不精确的物种

3034
01:22:55,000 --> 01:22:56,000
对

3035
01:22:56,000 --> 01:22:57,000
我们看到一个短横

3036
01:22:57,000 --> 01:22:58,000
一定会根据上下文来判断

3037
01:22:58,000 --> 01:22:59,000
它到底是个简号

3038
01:22:59,000 --> 01:23:00,000
还是一个 hyphen 的

3039
01:23:00,000 --> 01:23:00,000
对吧

3040
01:23:00,000 --> 01:23:02,000
但是计算机没有这个功能

3041
01:23:02,000 --> 01:23:04,000
那其实这个是阿拉伯人的问题

3042
01:23:04,000 --> 01:23:04,000
对不对

3043
01:23:04,000 --> 01:23:06,000
为什么用短横来表示简

3044
01:23:06,000 --> 01:23:09,000
你用一个更加特殊的符号

3045
01:23:09,000 --> 01:23:10,000
来表示简

3046
01:23:10,000 --> 01:23:11,000
不就更好吧

3047
01:23:11,000 --> 01:23:13,000
这是阿拉伯人发明的吗

3048
01:23:13,000 --> 01:23:14,000
喂

3049
01:23:14,000 --> 01:23:15,000
那我们现在这个加减

3050
01:23:15,000 --> 01:23:16,000
除这个四个符号之中

3051
01:23:16,000 --> 01:23:18,000
什么时候开始确定这个标准

3052
01:23:18,000 --> 01:23:19,000
就成号至少

3053
01:23:19,000 --> 01:23:20,000
不是非常不同意的

3054
01:23:20,000 --> 01:23:21,000
历史上成号

3055
01:23:21,000 --> 01:23:23,000
有很多很多种表示方法

3056
01:23:23,000 --> 01:23:23,000
成号

3057
01:23:23,000 --> 01:23:25,000
我们只会在那个地方

3058
01:23:25,000 --> 01:23:27,000
就只会在成号里面用

3059
01:23:27,000 --> 01:23:28,000
日常的这个

3060
01:23:28,000 --> 01:23:29,000
这个叫什么

3061
01:23:29,000 --> 01:23:30,000
日常排版里面并不会用

3062
01:23:30,000 --> 01:23:31,000
我只是抛出一个想法

3063
01:23:31,000 --> 01:23:32,000
因为中国古代

3064
01:23:32,000 --> 01:23:33,000
也不是用简号的

3065
01:23:33,000 --> 01:23:34,000
对吧

3066
01:23:34,000 --> 01:23:35,000
中国古代简号是啥

3067
01:23:37,000 --> 01:23:39,000
所有人都卡了

3068
01:23:39,000 --> 01:23:40,000
对自己国家有的话

3069
01:23:40,000 --> 01:23:41,000
这么不了解

3070
01:23:41,000 --> 01:23:42,000
你看看你们

3071
01:23:42,000 --> 01:23:43,000
九张算数

3072
01:23:43,000 --> 01:23:44,000
对不对

3073
01:23:45,000 --> 01:23:48,000
现在阿拉伯人其实不用阿拉伯数字

3074
01:23:48,000 --> 01:23:51,000
阿拉伯数字实际上是西方对印度数字一套

3075
01:23:51,000 --> 01:23:52,000
对呀

3076
01:23:52,000 --> 01:23:53,000
称呼

3077
01:23:53,000 --> 01:23:55,000
所以我怀疑阿拉伯人其实也不是用简号

3078
01:23:55,000 --> 01:23:57,000
所以你不能把锅栽到阿拉伯人头上

3079
01:23:57,000 --> 01:23:58,000
阿拉伯兄弟们已经背了太多锅了

3080
01:23:58,000 --> 01:23:59,000
好的

3081
01:23:59,000 --> 01:24:01,000
那就是 whoever 发明这套东西的时候

3082
01:24:01,000 --> 01:24:03,000
他就没想过

3083
01:24:03,000 --> 01:24:04,000
其实你这么想

3084
01:24:04,000 --> 01:24:07,000
加减乘除那四个符号里面

3085
01:24:07,000 --> 01:24:08,000
除了加和乘

3086
01:24:08,000 --> 01:24:09,000
其他两个都是有其一的问题的

3087
01:24:09,000 --> 01:24:11,000
除如果你是用那个除还好

3088
01:24:11,000 --> 01:24:13,000
就是如果斜杠除也是有这个问题的

3089
01:24:13,000 --> 01:24:15,000
那其实还是简号的问题比较多

3090
01:24:15,000 --> 01:24:16,000
对吧

3091
01:24:16,000 --> 01:24:17,000
反过来说

3092
01:24:17,000 --> 01:24:18,000
现在英语键盘上

3093
01:24:18,000 --> 01:24:20,000
就是我有时候觉得挺不可思议的

3094
01:24:20,000 --> 01:24:23,000
打字机键盘上居然没有成号这个符号

3095
01:24:23,000 --> 01:24:25,000
就当初发明打字机的人会认为

3096
01:24:25,000 --> 01:24:28,000
你用 x 来替代成号就好了

3097
01:24:28,000 --> 01:24:31,000
就是真的路径依赖导致了很多问题

3098
01:24:31,000 --> 01:24:32,000
那你要说这个键盘的话

3099
01:24:32,000 --> 01:24:36,000
当年的键盘连那个小写字母 o 和数字 0

3100
01:24:36,000 --> 01:24:38,000
都可以用一个键位

3101
01:24:38,000 --> 01:24:39,000
那个可以理解

3102
01:24:39,000 --> 01:24:41,000
因为造个打字机

3103
01:24:41,000 --> 01:24:42,000
那个机械这个那么复杂

3104
01:24:42,000 --> 01:24:43,000
能少一个还是能省不少

3105
01:24:43,000 --> 01:24:44,000
这个复杂性的

3106
01:24:44,000 --> 01:24:45,000
在机械打字机的时候

3107
01:24:45,000 --> 01:24:47,000
成号跟 x 的话那不一样

3108
01:24:47,000 --> 01:24:50,000
赋予这个字符以一个固定的语义

3109
01:24:50,000 --> 01:24:54,000
其实我觉得是很计算机时代的一个事情

3110
01:24:54,000 --> 01:24:54,000
因为很晚近

3111
01:24:54,000 --> 01:24:55,000
因为你可能是

3112
01:24:55,000 --> 01:24:57,000
机器才需要识别这些事情

3113
01:24:57,000 --> 01:25:03,000
人是一个通过语境和上下文来判断符号意义的动物

3114
01:25:03,000 --> 01:25:05,000
他不是要背下来这个符号

3115
01:25:05,000 --> 01:25:07,000
或者说他根本就不可能知道

3116
01:25:07,000 --> 01:25:10,000
一个符号在抽象的一种数据结构里面

3117
01:25:10,000 --> 01:25:10,000
是一个什么东西

3118
01:25:10,000 --> 01:25:12,000
他只是看到他

3119
01:25:12,000 --> 01:25:12,000
他才知道

3120
01:25:12,000 --> 01:25:14,000
该死的神经网络对吧

3121
01:25:14,000 --> 01:25:15,000
好了

3122
01:25:15,000 --> 01:25:16,000
不讲这个东西了

3123
01:25:16,000 --> 01:25:18,000
我们一会接着回来讲我们的空格的事情

3124
01:25:18,000 --> 01:25:23,000
另外常见的一个命名就是我们各种这个网站的这个这个 url 的

3125
01:25:23,000 --> 01:25:25,000
url 是明显是不能有空格的

3126
01:25:25,000 --> 01:25:26,000
我想想

3127
01:25:26,000 --> 01:25:26,000
对

3128
01:25:26,000 --> 01:25:29,000
url 里面的空格会被编码掉

3129
01:25:29,000 --> 01:25:30,000
被转译掉

3130
01:25:30,000 --> 01:25:32,000
变成是多少

3131
01:25:32,000 --> 01:25:33,000
百分之二十嘛

3132
01:25:33,000 --> 01:25:34,000
百分之二十

3133
01:25:34,000 --> 01:25:38,000
然后就是我们常见的这个所谓用户名

3134
01:25:38,000 --> 01:25:38,000
对吧

3135
01:25:38,000 --> 01:25:41,000
这个其实我们或者比如你推特的这个我们叫 handle

3136
01:25:41,000 --> 01:25:41,000
对吧

3137
01:25:41,000 --> 01:25:45,000
邮件的这个邮箱的那个这个就是那个 at

3138
01:25:45,000 --> 01:25:47,000
前面那部分也是不能有空格的

3139
01:25:47,000 --> 01:25:48,000
通常是这样子

3140
01:25:48,000 --> 01:25:49,000
为什么呢

3141
01:25:49,000 --> 01:25:50,000
因为就跟他说那个问题吧

3142
01:25:50,000 --> 01:25:55,000
你什么什么什么时候才能确定他是不是一个完整的词

3143
01:25:55,000 --> 01:25:56,000
对吧

3144
01:25:56,000 --> 01:25:57,000
跟刚才那个 identifier 其实是一样的

3145
01:25:57,000 --> 01:25:59,000
这两个其实他本质上都是一个 identifier

3146
01:25:59,000 --> 01:25:59,000
对不对

3147
01:25:59,000 --> 01:26:01,000
标识符嘛

3148
01:26:01,000 --> 01:26:04,000
那么很显然也是不能有空格的

3149
01:26:04,000 --> 01:26:06,000
那就是你得想是说那就可以用下号线

3150
01:26:06,000 --> 01:26:09,000
就基本上下号线都是可以用的

3151
01:26:09,000 --> 01:26:09,000
对吧

3152
01:26:09,000 --> 01:26:11,000
但就是说那个就是横线或者是简号

3153
01:26:11,000 --> 01:26:13,000
或者你叫连字符也好

3154
01:26:13,000 --> 01:26:14,000
这个能不能用

3155
01:26:14,000 --> 01:26:15,000
其实就取决于各个系列的问题了

3156
01:26:15,000 --> 01:26:21,000
这个断词总是一个很纠结的事情

3157
01:26:21,000 --> 01:26:24,000
因为西方他们必须要用个空格断词

3158
01:26:24,000 --> 01:26:26,000
然后遇到不能用空格的时候啊

3159
01:26:26,000 --> 01:26:27,000
他们就老纠结了

3160
01:26:27,000 --> 01:26:28,000
对

3161
01:26:28,000 --> 01:26:29,000
想办法更多解决方案嘛

3162
01:26:29,000 --> 01:26:34,000
你看现在那个 twitter 的那个那个用那个 hashtag 嘛

3163
01:26:34,000 --> 01:26:36,000
那个标签啊

3164
01:26:36,000 --> 01:26:37,000
那个也是好烦的

3165
01:26:37,000 --> 01:26:41,000
现在他们他们那个 api 有时候认那个标签的话

3166
01:26:41,000 --> 01:26:44,000
也是得手工加空格才

3167
01:26:44,000 --> 01:26:45,000
嗯

3168
01:26:45,000 --> 01:26:49,000
才会才会认当这一个那个标签吗

3169
01:26:49,000 --> 01:26:52,000
因为他不然你不知道你你端到哪个地方

3170
01:26:52,000 --> 01:26:53,000
他不知道呀

3171
01:26:53,000 --> 01:26:54,000
对呀

3172
01:26:54,000 --> 01:26:56,000
他现在有一些优化吧

3173
01:26:56,000 --> 01:26:58,000
就如果你输入一些很明显

3174
01:26:58,000 --> 01:27:01,000
是标点符号的或者是特殊符号的字符

3175
01:27:01,000 --> 01:27:02,000
他会给你断开啊

3176
01:27:02,000 --> 01:27:04,000
至少我知道汉汉语的那些标点

3177
01:27:04,000 --> 01:27:05,000
他都会给你断开

3178
01:27:05,000 --> 01:27:06,000
哦

3179
01:27:06,000 --> 01:27:07,000
你说到这个我想起来

3180
01:27:07,000 --> 01:27:10,000
推特的那个 hashtag 好像不支持 hyphen

3181
01:27:10,000 --> 01:27:12,000
就是你的 tag 里面不能有 hyphen

3182
01:27:12,000 --> 01:27:12,000
嗯

3183
01:27:12,000 --> 01:27:13,000
没有他跟那个呀

3184
01:27:13,000 --> 01:27:15,000
他跟用户名是一样的

3185
01:27:15,000 --> 01:27:17,000
推了户名也不能有 hyphen 啊

3186
01:27:17,000 --> 01:27:17,000
你只能用下滑线

3187
01:27:17,000 --> 01:27:19,000
哦

3188
01:27:19,000 --> 01:27:23,000
所以你他他本质上你说你你你回到刚才那个问题吧

3189
01:27:23,000 --> 01:27:27,000
就是说这个这个 hashtag 这个 tag 本身是个什么东西

3190
01:27:27,000 --> 01:27:28,000
他就是个 identify

3191
01:27:28,000 --> 01:27:29,000
如果说他是个 identify

3192
01:27:29,000 --> 01:27:31,000
你想到在编程里面你什么时候

3193
01:27:31,000 --> 01:27:34,000
你你是不是觉得那都是地方都不能用这个简号

3194
01:27:34,000 --> 01:27:34,000
对不对

3195
01:27:34,000 --> 01:27:36,000
那其实也是一个道理了

3196
01:27:36,000 --> 01:27:36,000
嗯

3197
01:27:36,000 --> 01:27:38,000
嗯

3198
01:27:38,000 --> 01:27:42,000
倒是中文语境下面这不是问题就比较比较奇怪了

3199
01:27:42,000 --> 01:27:43,000
你说微博他是用两个

3200
01:27:43,000 --> 01:27:44,000
他其实把那个

3201
01:27:44,000 --> 01:27:45,000
嗯

3202
01:27:45,000 --> 01:27:45,000
嗯

3203
01:27:45,000 --> 01:27:45,000
嗯

3204
01:27:45,000 --> 01:27:45,000
嗯

3205
01:27:45,000 --> 01:27:47,000
这个这个这个警号键当成引号来用

3206
01:27:47,000 --> 01:27:47,000
对不对

3207
01:27:47,000 --> 01:27:49,000
就是两个圈起来的才是

3208
01:27:49,000 --> 01:27:50,000
因为中文不分词嘛

3209
01:27:50,000 --> 01:27:52,000
你不加一个后面的话

3210
01:27:52,000 --> 01:27:55,000
你不知道这个创创到什么到什么地方结束吗

3211
01:27:55,000 --> 01:27:56,000
对问题就来了呀

3212
01:27:56,000 --> 01:27:59,000
就是那我是警号啊

3213
01:27:59,000 --> 01:28:01,000
标签警号标签警号

3214
01:28:01,000 --> 01:28:02,000
这个时候算啥

3215
01:28:02,000 --> 01:28:04,000
那你说配对问题是吗

3216
01:28:04,000 --> 01:28:05,000
对配对问题嘛

3217
01:28:05,000 --> 01:28:06,000
就是有这个问题了

3218
01:28:06,000 --> 01:28:07,000
就是就是另外一个

3219
01:28:07,000 --> 01:28:08,000
还有欠套问题是吧

3220
01:28:08,000 --> 01:28:10,000
对对对对对

3221
01:28:10,000 --> 01:28:12,000
因为引号其实也是一个非常坑爹的事情啊

3222
01:28:12,000 --> 01:28:14,000
正常说我们引号是有这个

3223
01:28:14,000 --> 01:28:15,000
开一个

3224
01:28:15,000 --> 01:28:17,000
引号关引号的区别的吧

3225
01:28:17,000 --> 01:28:17,000
对是对吧

3226
01:28:17,000 --> 01:28:19,000
为为了打自己

3227
01:28:19,000 --> 01:28:21,000
我们为了省那个那个见位

3228
01:28:21,000 --> 01:28:23,000
我又何爱我一直搞一个了

3229
01:28:23,000 --> 01:28:24,000
对不对

3230
01:28:24,000 --> 01:28:25,000
对啊

3231
01:28:25,000 --> 01:28:27,000
所以我们这个做字体排印的就生物痛绝的

3232
01:28:27,000 --> 01:28:29,000
千万不要用傻瓜引号

3233
01:28:29,000 --> 01:28:31,000
结果都是打自己惹的祸

3234
01:28:31,000 --> 01:28:32,000
对啊

3235
01:28:32,000 --> 01:28:34,000
就是为了也不叫他打自己惹的祸吧

3236
01:28:34,000 --> 01:28:36,000
就是为了省钱导致

3237
01:28:36,000 --> 01:28:38,000
都是没钱

3238
01:28:38,000 --> 01:28:41,000
所以所以微博那个那个双警号

3239
01:28:41,000 --> 01:28:44,000
他就是你把想成引号的用法来用就行了

3240
01:28:44,000 --> 01:28:45,000
或者

3241
01:28:45,000 --> 01:28:45,000
然后

3242
01:28:45,000 --> 01:28:46,000
想成是说明号都不算说明号

3243
01:28:46,000 --> 01:28:47,000
这两个是不一样的嘛

3244
01:28:47,000 --> 01:28:50,000
就引号的这种方式来用就可以了嘛

3245
01:28:50,000 --> 01:28:55,000
所以其实我觉得以后要发明什么新的方式的这种 quoting 的方式的时候

3246
01:28:55,000 --> 01:28:56,000
一定要配对啊

3247
01:28:56,000 --> 01:28:58,000
就是不要用这个引号来来引了

3248
01:28:58,000 --> 01:29:00,000
你就用这个说明号好了

3249
01:29:00,000 --> 01:29:00,000
对吧

3250
01:29:00,000 --> 01:29:03,000
或者用那个方框号来引号

3251
01:29:03,000 --> 01:29:03,000
对

3252
01:29:03,000 --> 01:29:03,000
对吧

3253
01:29:03,000 --> 01:29:08,000
因为基本上扩幅都是肯定是有方有这个有这个开关两个的嘛

3254
01:29:08,000 --> 01:29:09,000
嗯

3255
01:29:09,000 --> 01:29:12,000
然后还得让他自动配对

3256
01:29:12,000 --> 01:29:14,000
然后还允许欠套是吧

3257
01:29:15,000 --> 01:29:16,000
大括弧小括弧中括弧

3258
01:29:16,000 --> 01:29:17,000
对对对

3259
01:29:17,000 --> 01:29:19,000
这样发现就在你在写 lisp

3260
01:29:19,000 --> 01:29:19,000
哎

3261
01:29:19,000 --> 01:29:22,000
所以就不用去数那个缩字

3262
01:29:22,000 --> 01:29:24,000
你会的怎么样是吧

3263
01:29:24,000 --> 01:29:24,000
对啊

3264
01:29:24,000 --> 01:29:26,000
就完全秒秒是缩进啊

3265
01:29:26,000 --> 01:29:28,000
缩进门就很反人了呀

3266
01:29:28,000 --> 01:29:28,000
就是说

3267
01:29:28,000 --> 01:29:29,000
你凭什么

3268
01:29:29,000 --> 01:29:32,000
你凭什么判断这一行前面有十个空格

3269
01:29:32,000 --> 01:29:36,000
你凭什么要求我写程序还要带着一把油腰卡尺

3270
01:29:36,000 --> 01:29:38,000
哈哈哈哈

3271
01:29:38,000 --> 01:29:41,000
就是一个 python 梗

3272
01:29:41,000 --> 01:29:45,000
回头我们把这个连接放在学生课程里面

3273
01:29:45,000 --> 01:29:47,000
哈哈哈哈

3274
01:29:47,000 --> 01:29:48,000
想死我了

3275
01:29:48,000 --> 01:29:49,000
不过啊

3276
01:29:49,000 --> 01:29:50,000
现在 camel case 啊

3277
01:29:50,000 --> 01:29:52,000
就把这个词越练越长了

3278
01:29:52,000 --> 01:29:53,000
现在

3279
01:29:53,000 --> 01:29:55,000
特别是那个什么 object c

3280
01:29:55,000 --> 01:29:57,000
他们有的啰啰嗦嗦的语言

3281
01:29:57,000 --> 01:29:57,000
哇

3282
01:29:57,000 --> 01:30:00,000
他这个名字超长的那个 API 的名字

3283
01:30:00,000 --> 01:30:01,000
那简直了

3284
01:30:01,000 --> 01:30:02,000
对我之前是不知道啊

3285
01:30:02,000 --> 01:30:06,000
就是我比如说我们现在很多的你用的这个 ios 的手机 app 很多啊

3286
01:30:06,000 --> 01:30:07,000
应该现在很开始变少

3287
01:30:07,000 --> 01:30:11,000
就是以前都是这个主要的 object c 这个语言写的

3288
01:30:11,000 --> 01:30:14,000
然后那现在有有有 sweep 这个语言写可能会好一些

3289
01:30:14,000 --> 01:30:14,000
object c

3290
01:30:15,000 --> 01:30:17,000
那个语言的命名规则真是太奇怪了

3291
01:30:17,000 --> 01:30:23,000
他就要把一个 API 的那个全部写全一个 API 的一个一个叫什么一个参数

3292
01:30:23,000 --> 01:30:26,000
就是五个单词写全

3293
01:30:26,000 --> 01:30:31,000
对他的 method signature 就是叫什么方法签名是非常长的

3294
01:30:31,000 --> 01:30:32,000
就你认为他就是一个函数名吗

3295
01:30:32,000 --> 01:30:33,000
你可以这么理解对吧

3296
01:30:33,000 --> 01:30:34,000
对嗯

3297
01:30:34,000 --> 01:30:35,000
这函数名都是要写全

3298
01:30:35,000 --> 01:30:40,000
我们通常都是不是按我们过去 c 的那个都是都写非常简短的吧

3299
01:30:40,000 --> 01:30:43,000
c 他是可以把单词缩写吗

3300
01:30:43,000 --> 01:30:44,000
这一切都要归功于 smalltalk

3301
01:30:44,000 --> 01:30:45,000
就是那怎么写呢

3302
01:30:45,000 --> 01:30:45,000
对吧这一切都要归功于 smalltalk 就是那怎么写呢

3303
01:30:45,000 --> 01:30:46,000
smalltalk 就是这一套吧

3304
01:30:46,000 --> 01:30:48,000
就是一个参数有两个名字

3305
01:30:48,000 --> 01:30:50,000
一个是外调用者看到的名字

3306
01:30:50,000 --> 01:30:52,000
另外一个是参数内部看到的名字

3307
01:30:52,000 --> 01:30:54,000
这个其实我觉得是非常合理的

3308
01:30:54,000 --> 01:30:57,000
就哪怕现在 swift 你看他还是继承了这一套

3309
01:30:57,000 --> 01:30:59,000
就这个东西还是蛮有用的

3310
01:30:59,000 --> 01:31:01,000
而且怎么说呢

3311
01:31:01,000 --> 01:31:06,000
我觉得 mac 就是 object c 和和 java 一样

3312
01:31:06,000 --> 01:31:08,000
就是是一个重度依赖于 ide 的语言

3313
01:31:08,000 --> 01:31:10,000
你你没有自动补全的话

3314
01:31:10,000 --> 01:31:12,000
你拿来写这个真的是非常自找苦试的一件事

3315
01:31:12,000 --> 01:31:15,000
但是如果你有自然自动补全的话

3316
01:31:15,000 --> 01:31:16,000
那文件名多长也都无所谓了

3317
01:31:16,000 --> 01:31:20,000
他想的是说你可以直接读到这个参数

3318
01:31:20,000 --> 01:31:21,000
或者这个函数名的时候

3319
01:31:21,000 --> 01:31:23,000
你就从他那个名字就能一脸看出来

3320
01:31:23,000 --> 01:31:24,000
这个函数是干啥

3321
01:31:24,000 --> 01:31:28,000
他会把这个东西的功能定义的非常清晰

3322
01:31:28,000 --> 01:31:28,000
对吧

3323
01:31:28,000 --> 01:31:31,000
但不像我们之前在上古时代

3324
01:31:31,000 --> 01:31:34,000
unix 那个时候写这个 c 都写的非常短的文件名

3325
01:31:34,000 --> 01:31:35,000
这个函数名

3326
01:31:35,000 --> 01:31:37,000
比如说什么从这个 terminal 取个字

3327
01:31:37,000 --> 01:31:39,000
它是 getch 的

3328
01:31:39,000 --> 01:31:40,000
它连那个 character 的

3329
01:31:40,000 --> 01:31:41,000
你说我们这张写的 character

3330
01:31:41,000 --> 01:31:43,000
你说 character

3331
01:31:43,000 --> 01:31:45,000
这个是几个单

3332
01:31:45,000 --> 01:31:45,000
字母的词

3333
01:31:45,000 --> 01:31:46,000
就比较长吧

3334
01:31:46,000 --> 01:31:47,000
你只要写个 char 吧

3335
01:31:47,000 --> 01:31:48,000
就 char 对吧

3336
01:31:48,000 --> 01:31:49,000
他连那个 char 都不要

3337
01:31:49,000 --> 01:31:51,000
他直接 getch 对吧

3338
01:31:51,000 --> 01:31:52,000
你自己猜 ch 后面是个啥

3339
01:31:52,000 --> 01:31:54,000
对这实际上也是一个

3340
01:31:54,000 --> 01:31:56,000
这实际上还是一个路径依赖的问题

3341
01:31:56,000 --> 01:31:59,000
就是你想大型机在 60 年代那个时代

3342
01:31:59,000 --> 01:32:04,000
你每次连上主机去写程序的时候

3343
01:32:04,000 --> 01:32:06,000
你会希望自己的按的键

3344
01:32:06,000 --> 01:32:08,000
需要按的键越少越好

3345
01:32:08,000 --> 01:32:10,000
因为就像现在我有时候

3346
01:32:10,000 --> 01:32:12,000
所有人都 work from home 对吧

3347
01:32:12,000 --> 01:32:14,000
你有时候连公司的那个讯息机

3348
01:32:14,000 --> 01:32:15,000
还是会觉得慢

3349
01:32:15,000 --> 01:32:16,000
你打一个键

3350
01:32:16,000 --> 01:32:18,000
我们好像有期节目聊过这个问题

3351
01:32:18,000 --> 01:32:19,000
就是你按一个键之后

3352
01:32:19,000 --> 01:32:21,000
多久之内获不到

3353
01:32:21,000 --> 01:32:22,000
得不到延迟

3354
01:32:22,000 --> 01:32:23,000
你个人就会非常焦躁

3355
01:32:23,000 --> 01:32:25,000
你会觉得整个思路被打断了

3356
01:32:25,000 --> 01:32:27,000
那我现在就经常会遇到这种状况

3357
01:32:27,000 --> 01:32:28,000
那我现在就希望说

3358
01:32:28,000 --> 01:32:29,000
我靠

3359
01:32:29,000 --> 01:32:30,000
敢跟你使用 MOS

3360
01:32:30,000 --> 01:32:32,000
有道理

3361
01:32:32,000 --> 01:32:34,000
但是我要连公司的讯息机

3362
01:32:34,000 --> 01:32:37,000
这个过程是没有办法用 MOS 来实现的

3363
01:32:37,000 --> 01:32:39,000
对我要先连到公司的 work from home

3364
01:32:39,000 --> 01:32:41,000
然后再从 work from home 上 MOS

3365
01:32:41,000 --> 01:32:43,000
到公司内部的远程界面

3366
01:32:43,000 --> 01:32:44,000
那这个过程

3367
01:32:44,000 --> 01:32:45,000
就没有什么延迟了

3368
01:32:45,000 --> 01:32:46,000
对吧

3369
01:32:46,000 --> 01:32:47,000
所以就是 60 年

3370
01:32:47,000 --> 01:32:47,000
60 年代的时候

3371
01:32:47,000 --> 01:32:48,000
人们写程序

3372
01:32:48,000 --> 01:32:49,000
当然会希望说

3373
01:32:49,000 --> 01:32:51,000
需要输入字符越少越好

3374
01:32:51,000 --> 01:32:53,000
而且是那些很常用的底层的功能

3375
01:32:53,000 --> 01:32:55,000
它可能会被反复调用

3376
01:32:55,000 --> 01:32:55,000
然后它刚才你说

3377
01:32:55,000 --> 01:32:56,000
那个 stop small talk

3378
01:32:56,000 --> 01:32:59,000
它有内外区别的机制

3379
01:32:59,000 --> 01:33:00,000
但其实在 C 里面

3380
01:33:00,000 --> 01:33:01,000
应该是之前是没有的

3381
01:33:01,000 --> 01:33:02,000
对吧

3382
01:33:02,000 --> 01:33:04,000
它就是你要会反复调用

3383
01:33:04,000 --> 01:33:04,000
如果你的文件

3384
01:33:04,000 --> 01:33:06,000
那个函数名太长的话

3385
01:33:06,000 --> 01:33:09,000
其实会反复浪费掉很多字节

3386
01:33:09,000 --> 01:33:10,000
去存储

3387
01:33:10,000 --> 01:33:12,000
调用到这个 entry point 在哪里

3388
01:33:12,000 --> 01:33:12,000
对

3389
01:33:12,000 --> 01:33:13,000
而到了

3390
01:33:13,000 --> 01:33:16,000
object c 或者是 java 的时代

3391
01:33:16,000 --> 01:33:17,000
那基本上所有的人

3392
01:33:17,000 --> 01:33:18,000
都在本地客户端

3393
01:33:18,000 --> 01:33:19,000
都是都是

3394
01:33:19,000 --> 01:33:20,000
不会省那一个字节的

3395
01:33:20,000 --> 01:33:21,000
后客户端

3396
01:33:21,000 --> 01:33:23,000
你的响应都是在本地的

3397
01:33:23,000 --> 01:33:24,000
所以你就不会说

3398
01:33:24,000 --> 01:33:27,000
需要有把名字弄短

3399
01:33:27,000 --> 01:33:28,000
那个需求对吧

3400
01:33:28,000 --> 01:33:31,000
只有只有奇葩的 PHP 是

3401
01:33:31,000 --> 01:33:32,000
是个

3402
01:33:32,000 --> 01:33:34,000
世界上最好的语言

3403
01:33:34,000 --> 01:33:34,000
你说什么

3404
01:33:34,000 --> 01:33:37,000
只有奇葩的 PHP

3405
01:33:37,000 --> 01:33:39,000
是用这个函数名的长度

3406
01:33:39,000 --> 01:33:40,000
作为一个 hash

3407
01:33:40,000 --> 01:33:43,000
你能想象吗

3408
01:33:43,000 --> 01:33:45,000
这是一个让人匪夷所思的决定

3409
01:33:45,000 --> 01:33:47,000
所以 PHP 的函数名有长有短

3410
01:33:47,000 --> 01:33:50,000
是故意有长有短的

3411
01:33:50,000 --> 01:33:51,000
不可思议

3412
01:33:51,000 --> 01:33:53,000
但是就是说回来

3413
01:33:53,000 --> 01:33:57,000
但是 object c 的函数名

3414
01:33:57,000 --> 01:33:59,000
真的是过于长了

3415
01:33:59,000 --> 01:34:02,000
即便是在现在的目光的观点来看

3416
01:34:02,000 --> 01:34:02,000
还是过于长

3417
01:34:02,000 --> 01:34:04,000
我觉得对于写 java 的人来说

3418
01:34:04,000 --> 01:34:05,000
真的不算什么

3419
01:34:05,000 --> 01:34:06,000
很啰嗦

3420
01:34:06,000 --> 01:34:09,000
java 里面也有很啰嗦的函数名

3421
01:34:09,000 --> 01:34:10,000
不要太多

3422
01:34:10,000 --> 01:34:11,000
至少 java 的那些

3423
01:34:11,000 --> 01:34:12,000
有些参数

3424
01:34:12,000 --> 01:34:13,000
你每个参数名

3425
01:34:13,000 --> 01:34:14,000
都要写参数名吗

3426
01:34:14,000 --> 01:34:15,000
不用吧

3427
01:34:15,000 --> 01:34:16,000
不用那倒不用

3428
01:34:16,000 --> 01:34:18,000
那 object c 要写的呀

3429
01:34:18,000 --> 01:34:19,000
对吧

3430
01:34:19,000 --> 01:34:21,000
object c 它每个 method

3431
01:34:21,000 --> 01:34:22,000
它还会把用那个冒号

3432
01:34:22,000 --> 01:34:23,000
就连起来

3433
01:34:23,000 --> 01:34:25,000
就是它后面带了一个参数

3434
01:34:25,000 --> 01:34:25,000
对呀

3435
01:34:25,000 --> 01:34:28,000
然后这可以串的超长超长的

3436
01:34:28,000 --> 01:34:29,000
那个是函数签名的一部分

3437
01:34:29,000 --> 01:34:31,000
这个是可以理解的

3438
01:34:31,000 --> 01:34:33,000
就好像 c 语言的函数签名

3439
01:34:33,000 --> 01:34:36,000
其实也要把函数的类型带上的

3440
01:34:36,000 --> 01:34:37,000
只不过不像 object c

3441
01:34:37,000 --> 01:34:38,000
写的非常显示

3442
01:34:38,000 --> 01:34:41,000
就是你必须显示的告诉对方

3443
01:34:41,000 --> 01:34:43,000
我要调用这个方法里面

3444
01:34:43,000 --> 01:34:43,000
这个参数

3445
01:34:43,000 --> 01:34:44,000
叫这个名字

3446
01:34:44,000 --> 01:34:46,000
但是在有些函数里面

3447
01:34:46,000 --> 01:34:48,000
比如说 java 的函数签名

3448
01:34:48,000 --> 01:34:49,000
实际上也是包含类型的

3449
01:34:49,000 --> 01:34:52,000
就是你必须写出类型来

3450
01:34:52,000 --> 01:34:54,000
而 object c 是不用写出类型来的

3451
01:34:54,000 --> 01:34:55,000
但是它要写出那个别名来

3452
01:34:55,000 --> 01:34:57,000
OK

3453
01:34:57,000 --> 01:34:59,000
那至少我们可以讨论另外一个事情

3454
01:34:59,000 --> 01:34:59,000
就是假设你还是

3455
01:34:59,000 --> 01:35:01,000
就是我们说认可

3456
01:35:01,000 --> 01:35:03,000
还是要把那个写的尽可能清晰

3457
01:35:03,000 --> 01:35:03,000
为准

3458
01:35:03,000 --> 01:35:04,000
但有个限度

3459
01:35:04,000 --> 01:35:05,000
这个限度在哪里的问题

3460
01:35:05,000 --> 01:35:07,000
比如说我们这个 show notes

3461
01:35:07,000 --> 01:35:08,000
今天给这个例子

3462
01:35:08,000 --> 01:35:10,000
这个是一个苹果的一个 API

3463
01:35:10,000 --> 01:35:12,000
是 appkit 的什么

3464
01:35:12,000 --> 01:35:13,000
NSAT

3465
01:35:13,000 --> 01:35:14,000
TS typesetter

3466
01:35:14,000 --> 01:35:15,000
里面有一个

3467
01:35:15,000 --> 01:35:19,000
我要念一下这个函数的

3468
01:35:19,000 --> 01:35:20,000
先深吸一口气

3469
01:35:20,000 --> 01:35:21,000
请深吸一口气

3470
01:35:21,000 --> 01:35:22,000
我先深吸一口气

3471
01:35:22,000 --> 01:35:23,000
你们请听好了

3472
01:35:23,000 --> 01:35:27,000
should break line by hyphenate

3473
01:35:27,000 --> 01:35:30,000
before character at index

3474
01:35:30,000 --> 01:35:31,000
hyphenating

3475
01:35:31,000 --> 01:35:33,000
你要加 ing

3476
01:35:33,000 --> 01:35:34,000
对 hyphenating

3477
01:35:34,000 --> 01:35:36,000
但我先测量一下

3478
01:35:36,000 --> 01:35:38,000
这个一共有

3479
01:35:38,000 --> 01:35:39,000
掏出你的

3480
01:35:39,000 --> 01:35:40,000
作为一个 Python 程序员

3481
01:35:40,000 --> 01:35:41,000
掏出你的游标卡尺来

3482
01:35:41,000 --> 01:35:43,000
50 个字

3483
01:35:43,000 --> 01:35:43,000
OK

3484
01:35:43,000 --> 01:35:44,000
假设

3485
01:35:44,000 --> 01:35:45,000
当然肯定

3486
01:35:45,000 --> 01:35:46,000
但吴涛也说了

3487
01:35:46,000 --> 01:35:47,000
因为都是图形界面

3488
01:35:47,000 --> 01:35:47,000
不存在这个问题

3489
01:35:47,000 --> 01:35:50,000
假设你在这个纯字符界面

3490
01:35:50,000 --> 01:35:52,000
你是一个 80 乘以 25 行宽的

3491
01:35:52,000 --> 01:35:53,000
这么一个

3492
01:35:53,000 --> 01:35:56,000
这么一个编辑器的窗口里面

3493
01:35:56,000 --> 01:35:57,000
这 50 个字

3494
01:35:57,000 --> 01:35:58,000
就已经干掉一整行了

3495
01:35:58,000 --> 01:35:58,000
对吧

3496
01:35:58,000 --> 01:35:59,000
你还不用干别的

3497
01:35:59,000 --> 01:36:00,000
对

3498
01:36:00,000 --> 01:36:01,000
这还不是 coco 最长的

3499
01:36:01,000 --> 01:36:03,000
show notes 里面

3500
01:36:03,000 --> 01:36:04,000
大家看那个 API

3501
01:36:04,000 --> 01:36:05,000
名最长选手权了吗

3502
01:36:05,000 --> 01:36:06,000
你们打开那一页看看

3503
01:36:06,000 --> 01:36:07,000
你看

3504
01:36:07,000 --> 01:36:08,000
你会发

3505
01:36:08,000 --> 01:36:08,000
你打开那个看到

3506
01:36:08,000 --> 01:36:09,000
你会发现最长是

3507
01:36:09,000 --> 01:36:11,000
java windows.net

3508
01:36:11,000 --> 01:36:12,000
对

3509
01:36:12,000 --> 01:36:13,000
还是.net

3510
01:36:13,000 --> 01:36:15,000
最关键是什么呢

3511
01:36:15,000 --> 01:36:16,000
像 coco

3512
01:36:16,000 --> 01:36:18,000
像 objc

3513
01:36:18,000 --> 01:36:18,000
他啰嗦

3514
01:36:18,000 --> 01:36:19,000
就啰嗦

3515
01:36:19,000 --> 01:36:20,000
也就算了

3516
01:36:20,000 --> 01:36:21,000
但是因为他啰嗦

3517
01:36:21,000 --> 01:36:23,000
他是因为他不缩写词

3518
01:36:23,000 --> 01:36:24,000
然后他都还很有语义

3519
01:36:24,000 --> 01:36:26,000
所以读起来呢

3520
01:36:26,000 --> 01:36:27,000
还算是 OK 的

3521
01:36:27,000 --> 01:36:28,000
你不像那个.net

3522
01:36:28,000 --> 01:36:31,000
他即使写那么长了

3523
01:36:31,000 --> 01:36:32,000
他看不懂他什么意思

3524
01:36:32,000 --> 01:36:33,000
还带缩写

3525
01:36:33,000 --> 01:36:34,000
他带了缩写

3526
01:36:34,000 --> 01:36:35,000
还看不懂什么

3527
01:36:35,000 --> 01:36:36,000
而且还很啰嗦

3528
01:36:36,000 --> 01:36:36,000
你看那个

3529
01:36:36,000 --> 01:36:38,000
就比如说这个例子

3530
01:36:38,000 --> 01:36:40,000
那个 103 个字母

3531
01:36:40,000 --> 01:36:41,000
那个那什么鬼

3532
01:36:41,000 --> 01:36:41,000
那个

3533
01:36:41,000 --> 01:36:43,000
我觉得 coco 还有

3534
01:36:43,000 --> 01:36:43,000
coco

3535
01:36:43,000 --> 01:36:45,000
api 还有一点很有意思

3536
01:36:45,000 --> 01:36:45,000
就是

3537
01:36:45,000 --> 01:36:47,000
或者说导致了

3538
01:36:47,000 --> 01:36:48,000
间接导致了

3539
01:36:48,000 --> 01:36:49,000
他名字比较长的

3540
01:36:49,000 --> 01:36:50,000
一点

3541
01:36:50,000 --> 01:36:50,000
就是

3542
01:36:50,000 --> 01:36:51,000
他会用什么

3543
01:36:51,000 --> 01:36:52,000
should

3544
01:36:52,000 --> 01:36:53,000
did

3545
01:36:53,000 --> 01:36:55,000
来表示 before 和 after

3546
01:36:55,000 --> 01:36:57,000
就在别的 api 里面

3547
01:36:57,000 --> 01:36:58,000
比如说什么

3548
01:36:58,000 --> 01:37:00,000
窗口 load

3549
01:37:00,000 --> 01:37:01,000
这件事

3550
01:37:01,000 --> 01:37:03,000
别的 api 会叫做

3551
01:37:03,000 --> 01:37:04,000
before windows load

3552
01:37:04,000 --> 01:37:05,000
或者是

3553
01:37:05,000 --> 01:37:06,000
after windows load

3554
01:37:06,000 --> 01:37:08,000
然后在 coco 这里呢

3555
01:37:08,000 --> 01:37:08,000
叫做

3556
01:37:08,000 --> 01:37:10,000
windows should be loaded

3557
01:37:10,000 --> 01:37:11,000
或者是

3558
01:37:11,000 --> 01:37:13,000
windows did load

3559
01:37:13,000 --> 01:37:13,000
哈哈

3560
01:37:13,000 --> 01:37:15,000
这个还蛮有意思的

3561
01:37:15,000 --> 01:37:16,000
算是 coco 一套

3562
01:37:16,000 --> 01:37:18,000
就哪怕现在 swift

3563
01:37:18,000 --> 01:37:18,000
也是这样的

3564
01:37:18,000 --> 01:37:20,000
但我就在想

3565
01:37:20,000 --> 01:37:22,000
这个是不是跟另外

3566
01:37:22,000 --> 01:37:23,000
当时他们诞生

3567
01:37:23,000 --> 01:37:25,000
那个背景有一个思潮有关系

3568
01:37:25,000 --> 01:37:26,000
就是你们还记得那个叫

3569
01:37:26,000 --> 01:37:28,000
apple script

3570
01:37:28,000 --> 01:37:28,000
那个语言

3571
01:37:28,000 --> 01:37:29,000
嗯

3572
01:37:29,000 --> 01:37:31,000
就他是他的那个语言

3573
01:37:31,000 --> 01:37:32,000
就是非常人性化

3574
01:37:32,000 --> 01:37:32,000
是吧

3575
01:37:32,000 --> 01:37:34,000
就像自然语言嘛

3576
01:37:34,000 --> 01:37:35,000
嗯

3577
01:37:35,000 --> 01:37:36,000
对所谓自然语言

3578
01:37:36,000 --> 01:37:37,000
描述这个东西

3579
01:37:37,000 --> 01:37:38,000
那么他就会什么描述呢

3580
01:37:38,000 --> 01:37:38,000
就是说

3581
01:37:38,000 --> 01:37:40,000
就全部都是用这个

3582
01:37:40,000 --> 01:37:41,000
我们现在都是用什么符号

3583
01:37:41,000 --> 01:37:43,000
来表达一些特殊的语义的地方

3584
01:37:43,000 --> 01:37:43,000
嗯

3585
01:37:43,000 --> 01:37:44,000
他都尽可能用这个

3586
01:37:44,000 --> 01:37:45,000
啊

3587
01:37:45,000 --> 01:37:46,000
英文来来表述

3588
01:37:46,000 --> 01:37:47,000
趁此年这个

3589
01:37:47,000 --> 01:37:48,000
比如说定义参数啊

3590
01:37:48,000 --> 01:37:49,000
定义函数这些

3591
01:37:49,000 --> 01:37:50,000
都是用这种方式来做

3592
01:37:50,000 --> 01:37:51,000
他其实可能跟那个时候的

3593
01:37:51,000 --> 01:37:53,000
那种思潮有一定的关系

3594
01:37:53,000 --> 01:37:53,000
但是你说

3595
01:37:53,000 --> 01:37:55,000
should 和 did

3596
01:37:55,000 --> 01:37:56,000
会比 before 和 after

3597
01:37:56,000 --> 01:37:58,000
更贴近人的使用习惯吗

3598
01:37:58,000 --> 01:37:59,000
我觉得不见得了

3599
01:37:59,000 --> 01:38:00,000
不不

3600
01:38:00,000 --> 01:38:02,000
before after 跟 should

3601
01:38:02,000 --> 01:38:03,000
这个肯定是语义上是不一样的嘛

3602
01:38:03,000 --> 01:38:04,000
这个是个判断对不对

3603
01:38:04,000 --> 01:38:05,000
他说 should

3604
01:38:05,000 --> 01:38:07,000
就是说你会得到一个是还是不是

3605
01:38:07,000 --> 01:38:08,000
但你 before 和 after

3606
01:38:08,000 --> 01:38:10,000
他得到的一个结果

3607
01:38:10,000 --> 01:38:10,000
不是一个不理吗

3608
01:38:10,000 --> 01:38:13,000
就是要得出一个不耳之

3609
01:38:13,000 --> 01:38:13,000
对吧

3610
01:38:13,000 --> 01:38:13,000
对吧

3611
01:38:13,000 --> 01:38:14,000
嗯

3612
01:38:14,000 --> 01:38:14,000
对他得到

3613
01:38:14,000 --> 01:38:16,000
他其实是做一个逻辑判断

3614
01:38:16,000 --> 01:38:18,000
就是说你这个时候是得到一个是是还是否

3615
01:38:18,000 --> 01:38:18,000
对吧

3616
01:38:18,000 --> 01:38:20,000
但如果你是 before breakline

3617
01:38:20,000 --> 01:38:21,000
你得到这个什么东西

3618
01:38:21,000 --> 01:38:21,000
你是看不出来的

3619
01:38:21,000 --> 01:38:24,000
问题是我说的这个 API 是一个

3620
01:38:24,000 --> 01:38:26,000
比如说他是在写

3621
01:38:26,000 --> 01:38:27,000
你在写 GUI 的时候

3622
01:38:27,000 --> 01:38:28,000
你要写一个函数

3623
01:38:28,000 --> 01:38:31,000
这个函数应该在窗口被绘制之前调用

3624
01:38:31,000 --> 01:38:32,000
OK

3625
01:38:32,000 --> 01:38:35,000
这个函数名在 OS 10 里面叫做

3626
01:38:35,000 --> 01:38:35,000
那就是 before

3627
01:38:35,000 --> 01:38:37,000
should present

3628
01:38:37,000 --> 01:38:37,000
比如说

3629
01:38:37,000 --> 01:38:39,000
哦

3630
01:38:39,000 --> 01:38:41,000
但是在别的编程里面

3631
01:38:41,000 --> 01:38:43,000
可能就叫 before drawing 之类的

3632
01:38:43,000 --> 01:38:43,000
嗯

3633
01:38:43,000 --> 01:38:43,000
嗯

3634
01:38:43,000 --> 01:38:45,000
那可能就是语义的问题了

3635
01:38:45,000 --> 01:38:46,000
就是你怎么去定义这个东西

3636
01:38:46,000 --> 01:38:48,000
就是总体来讲

3637
01:38:48,000 --> 01:38:51,000
他还是想维持一个就是所谓的这个真正意义上的可读性

3638
01:38:51,000 --> 01:38:52,000
可读什么意思

3639
01:38:52,000 --> 01:38:54,000
就是你用嘴去念那个东西

3640
01:38:54,000 --> 01:38:57,000
他还是得到的一些这个一些概念的

3641
01:38:57,000 --> 01:38:58,000
对

3642
01:38:58,000 --> 01:38:59,000
嗯

3643
01:38:59,000 --> 01:39:02,000
这个东西就是说不一定是适合

3644
01:39:02,000 --> 01:39:04,000
比如说假设你是一个非英语母语的人

3645
01:39:04,000 --> 01:39:06,000
比如说中国中国很多程序员就这样

3646
01:39:06,000 --> 01:39:10,000
为什么老说这个中国程序员做的这个这个 API 比较比较奇怪

3647
01:39:10,000 --> 01:39:10,000
对吧

3648
01:39:10,000 --> 01:39:12,000
因为他鬼色难懂

3649
01:39:12,000 --> 01:39:12,000
对

3650
01:39:12,000 --> 01:39:12,000
他是难懂

3651
01:39:12,000 --> 01:39:13,000
他根本他

3652
01:39:13,000 --> 01:39:16,000
他脑子里面不是用那套英文那个逻辑来思考的嘛

3653
01:39:16,000 --> 01:39:19,000
所以他你怎么可能要求他得出一套这个

3654
01:39:19,000 --> 01:39:22,000
should break line by hibernating before character

3655
01:39:22,000 --> 01:39:23,000
的 index 这种语句的出来呢

3656
01:39:23,000 --> 01:39:24,000
他肯定不会这么做

3657
01:39:24,000 --> 01:39:24,000
对不对

3658
01:39:24,000 --> 01:39:27,000
所以我们只好写文言文了

3659
01:39:27,000 --> 01:39:28,000
不不不

3660
01:39:28,000 --> 01:39:30,000
中国程序员最大的特点不是用拼音缩写吗

3661
01:39:30,000 --> 01:39:34,000
包括包括很多政府网站都是

3662
01:39:34,000 --> 01:39:37,000
政府网站缩写为 zfwz

3663
01:39:37,000 --> 01:39:38,000
我靠

3664
01:39:38,000 --> 01:39:39,000
oh my god

3665
01:39:39,000 --> 01:39:40,000
那这也是对

3666
01:39:40,000 --> 01:39:42,000
这也是一个很有意思的一个一个事情

3667
01:39:42,000 --> 01:39:43,000
就是说

3668
01:39:43,000 --> 01:39:44,000
如果他不用拼音缩写

3669
01:39:44,000 --> 01:39:46,000
他还能用啥

3670
01:39:46,000 --> 01:39:49,000
因为你说我先把那个翻译成英文

3671
01:39:49,000 --> 01:39:50,000
对

3672
01:39:50,000 --> 01:39:51,000
这好吧

3673
01:39:51,000 --> 01:39:54,000
我承认刚才我有点英语本位主义了

3674
01:39:54,000 --> 01:39:56,000
不就是不也不是说英文主义

3675
01:39:56,000 --> 01:40:00,000
其实我觉得在那个就是纯这个技术范围层里面去

3676
01:40:00,000 --> 01:40:01,000
其实是应该英语本位主义的

3677
01:40:01,000 --> 01:40:06,000
因为你的那个所有的那个底层的那些逻辑都是英文的方式来命名的

3678
01:40:06,000 --> 01:40:07,000
对不对

3679
01:40:07,000 --> 01:40:08,000
这个毫无疑义嘛

3680
01:40:08,000 --> 01:40:08,000
没有问题

3681
01:40:08,000 --> 01:40:11,000
不你要真真到底层的话是二进制啊

3682
01:40:11,000 --> 01:40:12,000
就我觉得不是

3683
01:40:12,000 --> 01:40:13,000
不是

3684
01:40:13,000 --> 01:40:17,000
在这个你还别说你还是会讲这个 council 啊

3685
01:40:17,000 --> 01:40:18,000
你会讲 device 啊

3686
01:40:18,000 --> 01:40:19,000
你会讲这个什么 socket 啊

3687
01:40:19,000 --> 01:40:20,000
这些干

3688
01:40:20,000 --> 01:40:21,000
这些还是逃不掉的吧

3689
01:40:21,000 --> 01:40:26,000
就是现在的那些操作系统软件系统的那些构建单元啊

3690
01:40:26,000 --> 01:40:28,000
他还是以这个英文来命名为主的

3691
01:40:28,000 --> 01:40:29,000
你看我说那个东西嘛

3692
01:40:29,000 --> 01:40:30,000
虽然说确实有事

3693
01:40:30,000 --> 01:40:32,000
你是有这个巨饼对吧

3694
01:40:32,000 --> 01:40:33,000
你有套接字对吧

3695
01:40:33,000 --> 01:40:36,000
但是你不会真的去写这几个字啊

3696
01:40:36,000 --> 01:40:37,000
你真的还是写的是 handle

3697
01:40:37,000 --> 01:40:38,000
hdl 吗

3698
01:40:38,000 --> 01:40:40,000
或者是这个 socket 的

3699
01:40:40,000 --> 01:40:41,000
window handle

3700
01:40:41,000 --> 01:40:42,000
这是一个 windows

3701
01:40:42,000 --> 01:40:43,000
windows 编程

3702
01:40:43,000 --> 01:40:43,000
对对对

3703
01:40:43,000 --> 01:40:45,000
我就说这这种底层的概念是英文的

3704
01:40:45,000 --> 01:40:47,000
那么你基于他构建的东西

3705
01:40:47,000 --> 01:40:50,000
你就肯定还是以这个英文来描述他

3706
01:40:50,000 --> 01:40:52,000
你才这条罗这个才才自洽嘛

3707
01:40:52,000 --> 01:40:53,000
才通顺嘛

3708
01:40:53,000 --> 01:40:53,000
对吧

3709
01:40:53,000 --> 01:40:56,000
这个是没有这个我觉得是毫无疑问的

3710
01:40:56,000 --> 01:40:58,000
问题是除了刚才你说那个就不能泛话

3711
01:40:58,000 --> 01:41:01,000
比如说你说那个 12 里面他是说这个啊

3712
01:41:01,000 --> 01:41:03,000
我们随便想一个政府网站啊

3713
01:41:03,000 --> 01:41:05,000
这就今日公告对吧

3714
01:41:05,000 --> 01:41:10,000
他也是 jrg g g g 对吧

3715
01:41:10,000 --> 01:41:11,000
那你你说那肯定是这么写的

3716
01:41:11,000 --> 01:41:13,000
那他说 today's news

3717
01:41:13,000 --> 01:41:14,000
他不会就对吧

3718
01:41:14,000 --> 01:41:18,000
他没有一个底层没有一个 foundation 去给你构建这个东西啊

3719
01:41:18,000 --> 01:41:20,000
所以就那个不成立嘛

3720
01:41:20,000 --> 01:41:22,000
所以所以就是这两个情况我觉得还是不一样

3721
01:41:22,000 --> 01:41:26,000
就是说如果你能够讨论的那个最小的那个单位啊

3722
01:41:26,000 --> 01:41:27,000
或者就是说就是常用的单位

3723
01:41:27,000 --> 01:41:29,000
他是一个什么样的语言描述的

3724
01:41:29,000 --> 01:41:32,000
你可能其上构建东西还是要以这个为主

3725
01:41:32,000 --> 01:41:35,000
就好像哪怕你用文言文言编程的时候

3726
01:41:35,000 --> 01:41:40,000
那除非你把底层的那个什么就是句柄和这个套节字都都用文言来描述

3727
01:41:40,000 --> 01:41:42,000
不然你就很尴尬

3728
01:41:42,000 --> 01:41:43,000
知乎上不是有一个

3729
01:41:43,000 --> 01:41:46,000
答案是说如果就是问题是什么

3730
01:41:46,000 --> 01:41:49,000
如果计算机是中国人发明的

3731
01:41:49,000 --> 01:41:50,000
那么底层会是什么样的

3732
01:41:50,000 --> 01:41:54,000
其实他就把那把周易的那一套话术套进去了

3733
01:41:54,000 --> 01:41:55,000
阴阳这样

3734
01:41:55,000 --> 01:41:57,000
对对对对对对

3735
01:41:57,000 --> 01:42:00,000
所以所以我觉得就是说你要去评价这个做法合不合理的时候

3736
01:42:00,000 --> 01:42:02,000
你都是不能单点来看

3737
01:42:02,000 --> 01:42:03,000
你可以这样成体系的来看

3738
01:42:03,000 --> 01:42:12,000
那现在的这个情况就是说计算机的所有的底层的这个体系都是以英语为方为这个主体来构建的

3739
01:42:12,000 --> 01:42:13,000
那你没有办法了

3740
01:42:13,000 --> 01:42:16,000
你就只能跟着这样写了

3741
01:42:16,000 --> 01:42:26,000
不知道有没有什么大神可以做一个兼容 UNIX 的完全自自从最底层开始就由中文构建的操作系统

3742
01:42:26,000 --> 01:42:27,000
Chinix

3743
01:42:27,000 --> 01:42:28,000
Chinix

3744
01:42:28,000 --> 01:42:30,000
不行

3745
01:42:30,000 --> 01:42:32,000
我说说这个的时候就已经输了

3746
01:42:32,000 --> 01:42:32,000
对不对

3747
01:42:32,000 --> 01:42:33,000
为什么会这么写

3748
01:42:33,000 --> 01:42:36,000
一定要用中文来描述这个东西

3749
01:42:36,000 --> 01:42:42,000
我觉得那个趋势是融合

3750
01:42:42,000 --> 01:42:42,000
就是

3751
01:42:43,000 --> 01:42:46,000
就融合出一种杂柔的杂柔的

3752
01:42:46,000 --> 01:42:50,000
对你看那个什么什么跟这种比较好的科幻片里面

3753
01:42:50,000 --> 01:42:52,000
未来都是中中西文夹合

3754
01:42:52,000 --> 01:42:53,000
克里奥利语

3755
01:42:53,000 --> 01:42:58,000
就网上线所谓的这种什么 00 后用的那种网络缩写语

3756
01:42:58,000 --> 01:43:03,000
他不就是用那种英语的单词和这个汉语拼音的缩写给他混在一起

3757
01:43:03,000 --> 01:43:05,000
然后再用一个手字母缩写

3758
01:43:05,000 --> 01:43:07,000
就这种这种例子非常的多

3759
01:43:07,000 --> 01:43:10,000
什么 NMSL 这种的

3760
01:43:10,000 --> 01:43:13,000
就这种这种当然是完全的这个是一个很好的例子

3761
01:43:13,000 --> 01:43:14,000
是汉语拼音的手机

3762
01:43:14,000 --> 01:43:16,000
还有一些就是寄用了英语的

3763
01:43:16,000 --> 01:43:18,000
因为现在有些英语单词

3764
01:43:18,000 --> 01:43:21,000
就像那个泰国网友泰国网友反击的时候说

3765
01:43:21,000 --> 01:43:23,000
NMSL knees

3766
01:43:23,000 --> 01:43:25,000
你妈死了

3767
01:43:25,000 --> 01:43:27,000
这就是一个很简单的

3768
01:43:27,000 --> 01:43:29,000
克里奥二语的

3769
01:43:29,000 --> 01:43:38,000
我们来聊聊这个这个特殊字符

3770
01:43:38,000 --> 01:43:39,000
刚才讲了一个空格

3771
01:43:39,000 --> 01:43:39,000
这个特殊字符

3772
01:43:39,000 --> 01:43:41,000
其实可能是比较常见

3773
01:43:41,000 --> 01:43:43,000
其实还有很多其他的特殊字符

3774
01:43:43,000 --> 01:43:46,000
不能在很多地方使用的

3775
01:43:46,000 --> 01:43:46,000
对吧

3776
01:43:46,000 --> 01:43:49,000
主要是 Windows 的那个限制很多

3777
01:43:49,000 --> 01:43:50,000
像 Mac 都没有

3778
01:43:50,000 --> 01:43:54,000
你在 Windows 里面命名一个非法的文件的时候

3779
01:43:54,000 --> 01:43:56,000
它会跳出来一个多话框里面

3780
01:43:56,000 --> 01:43:57,000
苦口婆心的告诉你

3781
01:43:57,000 --> 01:43:59,000
哪些文件是哪些符号是不能用的

3782
01:43:59,000 --> 01:44:01,000
一大堆

3783
01:44:01,000 --> 01:44:02,000
这个还蛮贴心的

3784
01:44:02,000 --> 01:44:04,000
我觉得这个我觉得很好

3785
01:44:04,000 --> 01:44:05,000
就是像 Mac 那种过于自由

3786
01:44:05,000 --> 01:44:06,000
我觉得是有问题的

3787
01:44:06,000 --> 01:44:08,000
就是最好建议你不要这样干

3788
01:44:08,000 --> 01:44:10,000
那就是说你就是直接禁止你这么干

3789
01:44:10,000 --> 01:44:11,000
不更好

3790
01:44:11,000 --> 01:44:12,000
但是 Mac 现在也会

3791
01:44:12,000 --> 01:44:13,000
跳出一个对话框

3792
01:44:13,000 --> 01:44:16,000
其实 Mac 也是有禁止字符的

3793
01:44:16,000 --> 01:44:19,000
Mac 其实是不能用那个冒号

3794
01:44:19,000 --> 01:44:21,000
唯一一个不能用的

3795
01:44:21,000 --> 01:44:24,000
就是在文件名里面是不让用冒号的

3796
01:44:24,000 --> 01:44:25,000
如果你要改冒号的时候

3797
01:44:25,000 --> 01:44:27,000
它会跳出一个对话框

3798
01:44:27,000 --> 01:44:28,000
然后提醒你

3799
01:44:28,000 --> 01:44:29,000
但是他说的

3800
01:44:29,000 --> 01:44:31,000
他说那句话就是比就比 Windows 说的

3801
01:44:31,000 --> 01:44:32,000
就很温柔啊

3802
01:44:32,000 --> 01:44:35,000
他说请尝试使用字符较少

3803
01:44:35,000 --> 01:44:38,000
或不含标点符号的名称

3804
01:44:38,000 --> 01:44:39,000
那原点算不算标点符号

3805
01:44:39,000 --> 01:44:40,000
对吧

3806
01:44:40,000 --> 01:44:41,000
这就很奇怪了

3807
01:44:41,000 --> 01:44:41,000
对吧

3808
01:44:41,000 --> 01:44:42,000
因为其实是可以用的

3809
01:44:42,000 --> 01:44:44,000
对你在 Mac 还是都可以

3810
01:44:44,000 --> 01:44:46,000
其实要想一下

3811
01:44:46,000 --> 01:44:48,000
就是为什么就即便可以用

3812
01:44:48,000 --> 01:44:50,000
我觉得还是不建议使用这些特殊字符

3813
01:44:50,000 --> 01:44:51,000
作为文件名

3814
01:44:51,000 --> 01:44:53,000
其实有很多比较实际的问题

3815
01:44:53,000 --> 01:44:55,000
比如说这里我们这个 show notes 里面列了几个

3816
01:44:55,000 --> 01:44:57,000
就是这个大于一号小于一号

3817
01:44:57,000 --> 01:44:57,000
对吧

3818
01:44:57,000 --> 01:45:01,000
因为这个在就是类 Unix 的系统下面

3819
01:45:01,000 --> 01:45:03,000
它就有这个管道重新向的

3820
01:45:03,000 --> 01:45:04,000
它都有其他的特殊意义

3821
01:45:04,000 --> 01:45:05,000
你这样用了之后

3822
01:45:05,000 --> 01:45:07,000
那别人要调用

3823
01:45:07,000 --> 01:45:09,000
或者是要指向你这个文件的时候

3824
01:45:09,000 --> 01:45:10,000
就必须用这个 coating

3825
01:45:10,000 --> 01:45:11,000
或打引号的方法

3826
01:45:11,000 --> 01:45:12,000
就其实会增加

3827
01:45:12,000 --> 01:45:14,000
比较多的麻烦

3828
01:45:14,000 --> 01:45:15,000
对吧

3829
01:45:15,000 --> 01:45:16,000
包括这个 bar

3830
01:45:16,000 --> 01:45:17,000
这个 pipe

3831
01:45:17,000 --> 01:45:18,000
这个字符其实也是

3832
01:45:18,000 --> 01:45:18,000
可以用监控号

3833
01:45:18,000 --> 01:45:21,000
Unix 里面可以用监控号做文件名吗

3834
01:45:21,000 --> 01:45:23,000
可以啊

3835
01:45:23,000 --> 01:45:25,000
你就引起来嘛

3836
01:45:25,000 --> 01:45:25,000
OK

3837
01:45:25,000 --> 01:45:27,000
就现在都是这样子

3838
01:45:27,000 --> 01:45:28,000
就是你要往一边写

3839
01:45:28,000 --> 01:45:30,000
理论上都是可行的

3840
01:45:30,000 --> 01:45:31,000
它唯一阻挡你的地方

3841
01:45:31,000 --> 01:45:34,000
无非就是在资源管理器的时候弄一个

3842
01:45:34,000 --> 01:45:36,000
但是你自己也非要写个程序

3843
01:45:36,000 --> 01:45:37,000
去生成这么一个文件名

3844
01:45:37,000 --> 01:45:39,000
然后再把它放到磁盘上面去

3845
01:45:39,000 --> 01:45:40,000
这个都是可行的

3846
01:45:40,000 --> 01:45:42,000
因为文件系统本身

3847
01:45:42,000 --> 01:45:43,000
没有这个限制

3848
01:45:43,000 --> 01:45:45,000
不让你存这个东西嘛

3849
01:45:45,000 --> 01:45:45,000
OK

3850
01:45:45,000 --> 01:45:47,000
就他说还就是一个数字啊

3851
01:45:47,000 --> 01:45:49,000
但是我就说从

3852
01:45:49,000 --> 01:45:51,000
对从实用主义的这个观念来讲

3853
01:45:51,000 --> 01:45:53,000
就是尽量去避免这些容易出问题的字符

3854
01:45:53,000 --> 01:45:54,000
会比较好

3855
01:45:54,000 --> 01:45:56,000
那所以其实就回到了

3856
01:45:56,000 --> 01:45:57,000
最开始的那个命名规则了

3857
01:45:57,000 --> 01:45:58,000
就是说啊

3858
01:45:58,000 --> 01:46:02,000
如何命名你的这个文件会导致减少问题

3859
01:46:02,000 --> 01:46:03,000
就是不要用标点符号

3860
01:46:03,000 --> 01:46:04,000
其实最好的

3861
01:46:04,000 --> 01:46:05,000
任何标

3862
01:46:05,000 --> 01:46:06,000
任何标点符号

3863
01:46:06,000 --> 01:46:08,000
包括空格是最好的

3864
01:46:08,000 --> 01:46:09,000
哎

3865
01:46:09,000 --> 01:46:10,000
那个下划线不算

3866
01:46:10,000 --> 01:46:11,000
又要抬杠了

3867
01:46:11,000 --> 01:46:12,000
空格是标点符号吗

3868
01:46:12,000 --> 01:46:15,000
这个标点其实是指的是英语

3869
01:46:15,000 --> 01:46:17,000
英语世界里的标点

3870
01:46:17,000 --> 01:46:18,000
对对对

3871
01:46:18,000 --> 01:46:19,000
中文的话都完全不存在这个问题嘛

3872
01:46:19,000 --> 01:46:20,000
你比如说什么

3873
01:46:20,000 --> 01:46:21,000
你要用中文的书名号

3874
01:46:21,000 --> 01:46:22,000
你根本就

3875
01:46:22,000 --> 01:46:23,000
就就就计算

3876
01:46:23,000 --> 01:46:25,000
不认为它是个特殊符号

3877
01:46:25,000 --> 01:46:25,000
对吧

3878
01:46:25,000 --> 01:46:26,000
这没没什么区别

3879
01:46:26,000 --> 01:46:29,000
对主要还是因为英语的这个标点符号

3880
01:46:29,000 --> 01:46:30,000
就日常书写中的标点符号

3881
01:46:30,000 --> 01:46:32,000
也被这个程序代码

3882
01:46:32,000 --> 01:46:36,000
借用来表达了很多特殊的意义

3883
01:46:36,000 --> 01:46:36,000
对

3884
01:46:36,000 --> 01:46:37,000
是的是的是的是

3885
01:46:37,000 --> 01:46:40,000
我自己当初刚学编程的时候

3886
01:46:40,000 --> 01:46:40,000
有些

3887
01:46:40,000 --> 01:46:42,000
就有些同学会

3888
01:46:42,000 --> 01:46:42,000
有些同学会

3889
01:46:42,000 --> 01:46:43,000
很疑惑

3890
01:46:43,000 --> 01:46:44,000
为什么英文的

3891
01:46:44,000 --> 01:46:45,000
就是他

3892
01:46:45,000 --> 01:46:47,000
输入法只装了中文输入吧

3893
01:46:47,000 --> 01:46:48,000
然后再用中文

3894
01:46:48,000 --> 01:46:49,000
为什么用中文的标点符号

3895
01:46:49,000 --> 01:46:50,000
就看起来跟英文的一模一样

3896
01:46:50,000 --> 01:46:52,000
但是在程序就跑不起来呢

3897
01:46:52,000 --> 01:46:53,000
这是一个非常

3898
01:46:53,000 --> 01:46:54,000
疑惑的问题

3899
01:46:54,000 --> 01:46:56,000
会困扰初学者的问题

3900
01:46:56,000 --> 01:46:58,000
特别是在那个只有十个项数

3901
01:46:58,000 --> 01:46:59,000
所以十个项数宽的时候

3902
01:46:59,000 --> 01:47:00,000
到底这个中文引号

3903
01:47:00,000 --> 01:47:03,000
中文这个这个括号和英文括号有啥区别

3904
01:47:03,000 --> 01:47:04,000
看不太出来

3905
01:47:04,000 --> 01:47:05,000
就很坑

3906
01:47:05,000 --> 01:47:07,000
所以就是又变成之前

3907
01:47:07,000 --> 01:47:09,000
Unicode 的那个玄学的问题了

3908
01:47:09,000 --> 01:47:11,000
两个看起来一样的符号

3909
01:47:11,000 --> 01:47:12,000
它应该是一个一个马尾

3910
01:47:12,000 --> 01:47:12,000
啊

3911
01:47:12,000 --> 01:47:13,000
Yes

3912
01:47:13,000 --> 01:47:15,000
是不是一个深坑

3913
01:47:15,000 --> 01:47:16,000
是

3914
01:47:16,000 --> 01:47:16,000
哎呀

3915
01:47:16,000 --> 01:47:18,000
不过我每次看到这个反斜杠

3916
01:47:18,000 --> 01:47:20,000
就想到日文系

3917
01:47:20,000 --> 01:47:22,000
日文 Windows 的那个日元符号

3918
01:47:22,000 --> 01:47:22,000
哎

3919
01:47:22,000 --> 01:47:23,000
那个是为什么

3920
01:47:23,000 --> 01:47:24,000
因为它刚好是把那个

3921
01:47:24,000 --> 01:47:26,000
那个为马尾给占了

3922
01:47:26,000 --> 01:47:26,000
所以

3923
01:47:26,000 --> 01:47:27,000
对

3924
01:47:27,000 --> 01:47:29,000
就 ask 里面借用了一下

3925
01:47:29,000 --> 01:47:30,000
为什么会借用到这个呢

3926
01:47:30,000 --> 01:47:33,000
就他们那时候一拍脑袋

3927
01:47:33,000 --> 01:47:36,000
就觉得好像说这个反斜杠不用

3928
01:47:36,000 --> 01:47:36,000
然后呢

3929
01:47:36,000 --> 01:47:38,000
日本人要用那个

3930
01:47:38,000 --> 01:47:39,000
要用日元符号嘛

3931
01:47:39,000 --> 01:47:41,000
所以呢

3932
01:47:41,000 --> 01:47:42,000
就在这个马尾

3933
01:47:42,000 --> 01:47:45,000
位上面放上了这个日元符号吗

3934
01:47:45,000 --> 01:47:47,000
这个日元符号是在那个 ASCII 的

3935
01:47:47,000 --> 01:47:49,000
那个头 128 个里面的吗

3936
01:47:49,000 --> 01:47:49,000
对

3937
01:47:49,000 --> 01:47:50,000
哦

3938
01:47:50,000 --> 01:47:51,000
我知道了

3939
01:47:51,000 --> 01:47:52,000
就是占了反斜杠的位置

3940
01:47:52,000 --> 01:47:54,000
所以当年的话

3941
01:47:54,000 --> 01:47:55,000
就是日本的那个系统

3942
01:47:55,000 --> 01:47:57,000
他就打不出反斜杠的

3943
01:47:57,000 --> 01:47:59,000
就只能打日元符号

3944
01:47:59,000 --> 01:48:00,000
这叫什么来的

3945
01:48:00,000 --> 01:48:02,000
这个以日本为代表的东亚文化

3946
01:48:02,000 --> 01:48:04,000
试图对欧美这个主导的

3947
01:48:04,000 --> 01:48:05,000
这个什么什么的一个

3948
01:48:05,000 --> 01:48:06,000
一个一个突破

3949
01:48:06,000 --> 01:48:07,000
对吧

3950
01:48:07,000 --> 01:48:08,000
逆袭

3951
01:48:08,000 --> 01:48:10,000
唯一成功的一次

3952
01:48:10,000 --> 01:48:13,000
因为其实你看在

3953
01:48:13,000 --> 01:48:15,000
基本上所有的编码里面

3954
01:48:15,000 --> 01:48:16,000
那个 ASCII 都是作为一个

3955
01:48:16,000 --> 01:48:17,000
神圣不可动摇的一个基础

3956
01:48:17,000 --> 01:48:18,000
对啊

3957
01:48:18,000 --> 01:48:20,000
而且我觉得他们脑子很奇怪

3958
01:48:20,000 --> 01:48:21,000
如果要换的话

3959
01:48:21,000 --> 01:48:22,000
也应该把就是

3960
01:48:22,000 --> 01:48:24,000
把美元符号换成日元符号

3961
01:48:24,000 --> 01:48:25,000
对吧

3962
01:48:25,000 --> 01:48:26,000
那么为什么要

3963
01:48:26,000 --> 01:48:27,000
那不行

3964
01:48:27,000 --> 01:48:29,000
那时候美国爸爸就不开心

3965
01:48:29,000 --> 01:48:31,000
这还是不可能的吧

3966
01:48:31,000 --> 01:48:32,000
我觉得把日元符号换成美元符号

3967
01:48:32,000 --> 01:48:35,000
比换掉 Hogbackslash 更不客气

3968
01:48:35,000 --> 01:48:38,000
那个时候美元是多重要的一个东西

3969
01:48:38,000 --> 01:48:39,000
现在也很重要吧

3970
01:48:39,000 --> 01:48:42,000
所以他们当时肯定是觉得说

3971
01:48:42,000 --> 01:48:45,000
这个反斜杆很不重要嘛

3972
01:48:45,000 --> 01:48:46,000
所以呢就把这个挪掉了

3973
01:48:46,000 --> 01:48:47,000
结果谁知道呢

3974
01:48:47,000 --> 01:48:49,000
Windows 把这个反斜杆来做路径了

3975
01:48:49,000 --> 01:48:51,000
结果日本的 Windows 的

3976
01:48:51,000 --> 01:48:54,000
满眼都是日元符号

3977
01:48:54,000 --> 01:48:55,000
都是钱

3978
01:48:55,000 --> 01:48:55,000
对

3979
01:48:55,000 --> 01:48:56,000
等一下

3980
01:48:56,000 --> 01:48:58,000
刚才万杰说了一个

3981
01:48:58,000 --> 01:49:00,000
就是在 Mac 里面

3982
01:49:00,000 --> 01:49:02,000
唯一一个不让用的是冒号嘛

3983
01:49:02,000 --> 01:49:03,000
对吧

3984
01:49:03,000 --> 01:49:05,000
其实这个冒号啊

3985
01:49:05,000 --> 01:49:08,000
是我们平时用的在 GUI

3986
01:49:08,000 --> 01:49:09,000
就是在

3987
01:49:09,000 --> 01:49:11,000
图形界面上不让用冒号的

3988
01:49:11,000 --> 01:49:13,000
因为是他们那个路径

3989
01:49:13,000 --> 01:49:14,000
其实用的是冒号

3990
01:49:14,000 --> 01:49:15,000
对吧

3991
01:49:15,000 --> 01:49:17,000
所以是他那个路径的保留字

3992
01:49:17,000 --> 01:49:19,000
其实就是老 Finder 里面

3993
01:49:19,000 --> 01:49:20,000
等一下我试一下

3994
01:49:20,000 --> 01:49:22,000
命令行里面是可以用冒号的

3995
01:49:22,000 --> 01:49:24,000
在命令行是可以用冒号的

3996
01:49:24,000 --> 01:49:24,000
对吧

3997
01:49:24,000 --> 01:49:28,000
然后在图形界面是可以用斜杠的

3998
01:49:28,000 --> 01:49:32,000
但是同样一个文件名在命令行里面

3999
01:49:32,000 --> 01:49:33,000
这个斜杠会变成冒号

4000
01:49:35,000 --> 01:49:35,000
哎

4001
01:49:35,000 --> 01:49:36,000
等一下

4002
01:49:36,000 --> 01:49:39,000
我刚才在命令行里面建了一个带冒号的文件

4003
01:49:39,000 --> 01:49:43,000
然后在图形界面看它变成了一个斜杠

4004
01:49:43,000 --> 01:49:43,000
对

4005
01:49:43,000 --> 01:49:44,000
嗯

4006
01:49:44,000 --> 01:49:45,000
就就交替了

4007
01:49:45,000 --> 01:49:47,000
对

4008
01:49:47,000 --> 01:49:48,000
是是反着的

4009
01:49:48,000 --> 01:49:48,000
嗯

4010
01:49:48,000 --> 01:49:49,000
哎

4011
01:49:49,000 --> 01:49:51,000
为什么是会这样呢

4012
01:49:51,000 --> 01:49:53,000
因为冒号在 GUI 里面有别的作用吗

4013
01:49:53,000 --> 01:49:54,000
我靠

4014
01:49:54,000 --> 01:49:55,000
太神奇了

4015
01:49:55,000 --> 01:49:56,000
哦

4016
01:49:56,000 --> 01:49:57,000
冒号在图形界面有什么用啊

4017
01:49:57,000 --> 01:50:00,000
在图形界面里面是不让用冒号的文件名

4018
01:50:00,000 --> 01:50:03,000
那他那他为什么要显示成斜杠呢

4019
01:50:03,000 --> 01:50:03,000
对

4020
01:50:03,000 --> 01:50:05,000
这个很难理解

4021
01:50:05,000 --> 01:50:09,000
反正现在你现在 Mac 的处理方式就是图形界面和

4022
01:50:09,000 --> 01:50:09,000
就是

4023
01:50:09,000 --> 01:50:12,000
和这个命令行里面冒号和斜杠是反着的

4024
01:50:12,000 --> 01:50:14,000
互相替代

4025
01:50:14,000 --> 01:50:17,000
因为在早期的 Finder 里面

4026
01:50:17,000 --> 01:50:23,000
早期的 Finder 里面的这个路径是用冒号隔开的

4027
01:50:23,000 --> 01:50:23,000
哎

4028
01:50:23,000 --> 01:50:24,000
真的哇

4029
01:50:24,000 --> 01:50:24,000
真的会反

4030
01:50:24,000 --> 01:50:26,000
真的会反过来

4031
01:50:26,000 --> 01:50:26,000
哎

4032
01:50:26,000 --> 01:50:27,000
我第一次知道有这个事情

4033
01:50:27,000 --> 01:50:30,000
就是我在 Finder 里面建一个负

4034
01:50:30,000 --> 01:50:31,000
斜杠 bar

4035
01:50:31,000 --> 01:50:33,000
在 terminal 里面显示为

4036
01:50:33,000 --> 01:50:35,000
terminal 显示为负冒号 bar

4037
01:50:35,000 --> 01:50:37,000
我不跟你说了

4038
01:50:37,000 --> 01:50:38,000
我再说一遍

4039
01:50:38,000 --> 01:50:39,000
就是在老的

4040
01:50:39,000 --> 01:50:41,000
Finder 就是老的系统里面

4041
01:50:41,000 --> 01:50:42,000
就是 classic

4042
01:50:42,000 --> 01:50:42,000
嗯

4043
01:50:42,000 --> 01:50:45,000
classic 的这个 Mac 里面

4044
01:50:45,000 --> 01:50:48,000
Finder 的路径的分割符

4045
01:50:48,000 --> 01:50:49,000
是用冒号

4046
01:50:49,000 --> 01:50:49,000
路径分割符

4047
01:50:49,000 --> 01:50:51,000
Windows 是反斜杠嘛

4048
01:50:51,000 --> 01:50:52,000
在 Finder 里面是冒号

4049
01:50:52,000 --> 01:50:53,000
OK

4050
01:50:53,000 --> 01:50:55,000
果然是一个用过 classic Mac 的人

4051
01:50:56,000 --> 01:50:57,000
啊

4052
01:50:57,000 --> 01:50:58,000
我怪不得我就说

4053
01:50:58,000 --> 01:51:04,000
所以这是老老 Mac 系统里面唯一一个的这个预留字

4054
01:51:04,000 --> 01:51:04,000
OK

4055
01:51:05,000 --> 01:51:06,000
明白明白

4056
01:51:06,000 --> 01:51:08,000
所以直到现在为止 Mac 也是用过的字

4057
01:51:08,000 --> 01:51:09,000
嗯所以直到现在为止 Mac 也是用过的字

4058
01:51:09,000 --> 01:51:10,000
也是指嗯不让有冒号

4059
01:51:10,000 --> 01:51:11,000
诶

4060
01:51:11,000 --> 01:51:13,000
然后这个它会跟斜杠转移

4061
01:51:13,000 --> 01:51:14,000
OK

4062
01:51:14,000 --> 01:51:18,000
但现在其实已经没有再有这个 classic Mac 了

4063
01:51:18,000 --> 01:51:18,000
对吧

4064
01:51:18,000 --> 01:51:22,000
所以这个转移其实完全没有什么现实意义了

4065
01:51:22,000 --> 01:51:27,000
这它就变成这个图形界面那个 Finder 的一个那个 spec 掉了

4066
01:51:27,000 --> 01:51:27,000
OK

4067
01:51:27,000 --> 01:51:28,000
哼

4068
01:51:28,000 --> 01:51:29,000
这个很有意思

4069
01:51:29,000 --> 01:51:30,000
这样我想起来

4070
01:51:30,000 --> 01:51:30,000
Windows

4071
01:51:30,000 --> 01:51:34,000
Windows 上其实除了文件名不能用特殊字符之外

4072
01:51:34,000 --> 01:51:36,000
还有不能用一些特殊保留字

4073
01:51:36,000 --> 01:51:36,000
比如说

4074
01:51:36,000 --> 01:51:38,000
你不能把一个文件名叫做 conk

4075
01:51:38,000 --> 01:51:39,000
conk

4076
01:51:39,000 --> 01:51:40,000
conk 是一味什么

4077
01:51:40,000 --> 01:51:42,000
是因为那个串口的一种

4078
01:51:42,000 --> 01:51:44,000
conk 是 console 吧

4079
01:51:44,000 --> 01:51:47,000
然后还有什么 prn 还是 pnt

4080
01:51:47,000 --> 01:51:48,000
还有 aux

4081
01:51:48,000 --> 01:51:51,000
auxiliary 对也不行

4082
01:51:51,000 --> 01:51:51,000
对

4083
01:51:51,000 --> 01:51:52,000
就这个当时是为什么

4084
01:51:52,000 --> 01:51:53,000
我记得有这个事

4085
01:51:53,000 --> 01:51:55,000
但我忘了原因是什么了

4086
01:51:55,000 --> 01:51:56,000
conk 是 console

4087
01:51:56,000 --> 01:51:58,000
就是你要是打 copyconk

4088
01:51:58,000 --> 01:52:00,000
然后空格 target.txt

4089
01:52:00,000 --> 01:52:02,000
你就可以输入从那个

4090
01:52:02,000 --> 01:52:04,000
从那个 console 上输入字符

4091
01:52:04,000 --> 01:52:08,000
然后把它存成 target.txt

4092
01:52:08,000 --> 01:52:08,000
就是 conk

4093
01:52:08,000 --> 01:52:10,000
实际上是 console 的一个

4094
01:52:10,000 --> 01:52:13,000
有特殊意义的这个名字

4095
01:52:13,000 --> 01:52:14,000
对吧

4096
01:52:14,000 --> 01:52:16,000
它不是不能存在这个文件名

4097
01:52:16,000 --> 01:52:17,000
对相当于一个

4098
01:52:17,000 --> 01:52:19,000
相当于 terminal 里面的保留字了

4099
01:52:19,000 --> 01:52:22,000
对

4100
01:52:22,000 --> 01:52:23,000
但这个还蛮不

4101
01:52:23,000 --> 01:52:25,000
我觉得这个还蛮不合理的

4102
01:52:25,000 --> 01:52:26,000
这个其实很常用

4103
01:52:26,000 --> 01:52:30,000
就它要是为了解决这个问题

4104
01:52:30,000 --> 01:52:33,000
直接进掉了好几个比较简短的名字

4105
01:52:33,000 --> 01:52:34,000
那你如果这样

4106
01:52:34,000 --> 01:52:37,000
你还不如直接用一个什么特殊符号

4107
01:52:37,000 --> 01:52:38,000
引起来或者

4108
01:52:38,000 --> 01:52:38,000
或者你再用一个特殊符号

4109
01:52:38,000 --> 01:52:38,000
或者你再用一个特殊符号

4110
01:52:38,000 --> 01:52:38,000
或者你再用一个特殊符号

4111
01:52:38,000 --> 01:52:39,000
你在前面加一个

4112
01:52:39,000 --> 01:52:41,000
你在前面加一个 escape 也可以

4113
01:52:41,000 --> 01:52:43,000
下滑线 ox

4114
01:52:43,000 --> 01:52:44,000
都要比 ox 好吧

4115
01:52:44,000 --> 01:52:47,000
或者是就是你用

4116
01:52:47,000 --> 01:52:49,000
你反正已经有那么多特殊字符

4117
01:52:49,000 --> 01:52:49,000
不能用了对吧

4118
01:52:49,000 --> 01:52:51,000
你就把用一个特殊字符

4119
01:52:51,000 --> 01:52:52,000
来作为一个前缀了

4120
01:52:52,000 --> 01:52:55,000
或者用比如说美元符号

4121
01:52:55,000 --> 01:52:56,000
这种情况对吧

4122
01:52:56,000 --> 01:52:57,000
因为基本上不会有人

4123
01:52:57,000 --> 01:52:59,000
把文件命名为

4124
01:52:59,000 --> 01:53:02,000
美元符号开头的文件名吧

4125
01:53:02,000 --> 01:53:02,000
you never know

4126
01:53:02,000 --> 01:53:03,000
也难说

4127
01:53:03,000 --> 01:53:05,000
所以那个时候

4128
01:53:05,000 --> 01:53:08,000
假如我们来做系统的话

4129
01:53:08,000 --> 01:53:10,000
就是当时这种选择

4130
01:53:10,000 --> 01:53:11,000
肯定有它不合理的

4131
01:53:11,000 --> 01:53:13,000
那个什么傻逼的地方对吧

4132
01:53:13,000 --> 01:53:14,000
但是肯定有很多情况

4133
01:53:14,000 --> 01:53:16,000
也是有不得已而为之的办法

4134
01:53:16,000 --> 01:53:19,000
legacy

4135
01:53:19,000 --> 01:53:20,000
路径依赖

4136
01:53:20,000 --> 01:53:21,000
真的可以解决很多

4137
01:53:21,000 --> 01:53:22,000
解释很多问题

4138
01:53:22,000 --> 01:53:23,000
对啊

4139
01:53:23,000 --> 01:53:24,000
你看你说这个刚才讲

4140
01:53:24,000 --> 01:53:25,000
为什么 macOS

4141
01:53:25,000 --> 01:53:27,000
现在里面你用一个反斜杆

4142
01:53:27,000 --> 01:53:28,000
会变成在

4143
01:53:28,000 --> 01:53:29,000
在图形界面

4144
01:53:29,000 --> 01:53:30,000
字符界面会变成冒号

4145
01:53:30,000 --> 01:53:31,000
对吧

4146
01:53:31,000 --> 01:53:32,000
然后这个冒号

4147
01:53:32,000 --> 01:53:32,000
这个又会

4148
01:53:32,000 --> 01:53:33,000
这边又反过来

4149
01:53:33,000 --> 01:53:34,000
不就是因为

4150
01:53:34,000 --> 01:53:36,000
和这个 classic mac 要兼容吗

4151
01:53:36,000 --> 01:53:37,000
嗯

4152
01:53:37,000 --> 01:53:37,000
嗯

4153
01:53:37,000 --> 01:53:37,000
嗯

4154
01:53:37,000 --> 01:53:37,000
嗯

4155
01:53:37,000 --> 01:53:37,000
嗯

4156
01:53:37,000 --> 01:53:37,000
嗯

4157
01:53:37,000 --> 01:53:37,000
嗯

4158
01:53:37,000 --> 01:53:37,000
嗯

4159
01:53:37,000 --> 01:53:37,000
嗯

4160
01:53:37,000 --> 01:53:37,000
嗯

4161
01:53:37,000 --> 01:53:37,000
嗯

4162
01:53:37,000 --> 01:53:37,000
嗯

4179
02:01:37,000 --> 02:01:38,000
I was wondering if this was

4180
02:01:38,000 --> 02:01:39,000
大小雪保留的呢

4181
02:01:39,000 --> 02:01:41,000
我记得不太清楚

4182
02:01:41,000 --> 02:01:42,000
因为当时

4183
02:01:42,000 --> 02:01:44,000
VV

4184
02:01:44,000 --> 02:01:46,000
当时被最被人吐槽的

4185
02:01:46,000 --> 02:01:48,000
会不会最被职业程序员

4186
02:01:48,000 --> 02:01:48,000
吐槽的也就是

4187
02:01:48,000 --> 02:01:49,000
它居然是一个

4188
02:01:49,000 --> 02:01:50,000
大小雪不敏感的语言

4189
02:01:50,000 --> 02:01:52,000
你可以想象吗

4190
02:01:52,000 --> 02:01:54,000
等一下

4191
02:01:54,000 --> 02:01:55,000
donate

4192
02:01:55,000 --> 02:01:57,000
它整个那个命名规则

4193
02:01:57,000 --> 02:01:57,000
是一样的吗

4194
02:01:57,000 --> 02:01:58,000
不一样

4195
02:01:58,000 --> 02:02:00,000
donate 只是一个 run time

4196
02:02:00,000 --> 02:02:01,000
不一样

4197
02:02:01,000 --> 02:02:02,000
donate 的好多语言

4198
02:02:02,000 --> 02:02:03,000
donate 的底层

4199
02:02:03,000 --> 02:02:05,000
肯定是区分大小雪

4200
02:02:05,000 --> 02:02:06,000
就是那套 IL

4201
02:02:06,000 --> 02:02:06,000
啊

4202
02:02:06,000 --> 02:02:08,000
Mac 上面其实是可能

4203
02:02:08,000 --> 02:02:09,000
这个问题相对复杂的

4204
02:02:09,000 --> 02:02:11,000
因为 Mac 上它存在一个

4205
02:02:11,000 --> 02:02:12,000
同一个文件系统

4206
02:02:12,000 --> 02:02:13,000
它另外有一种方式

4207
02:02:13,000 --> 02:02:15,000
是可以大小写敏感的

4208
02:02:15,000 --> 02:02:18,000
日志式区分大小写

4209
02:02:18,000 --> 02:02:19,000
我那个时候就是傻不拉几的

4210
02:02:19,000 --> 02:02:22,000
把自己的分区隔成了

4211
02:02:22,000 --> 02:02:25,000
严格区分大小写的文件系统

4212
02:02:25,000 --> 02:02:26,000
后来好多游戏装不了

4213
02:02:26,000 --> 02:02:27,000
装游戏的时候

4214
02:02:27,000 --> 02:02:30,000
他会说你不能把这个程序

4215
02:02:30,000 --> 02:02:32,000
装在一个大小写敏感的分区上面

4216
02:02:32,000 --> 02:02:34,000
很扯

4217
02:02:34,000 --> 02:02:35,000
因为它不一样

4218
02:02:35,000 --> 02:02:37,000
这是另外一个比较

4219
02:02:37,000 --> 02:02:39,000
因为比如说 Mac 上

4220
02:02:39,000 --> 02:02:40,000
我们现在用的主流的

4221
02:02:40,000 --> 02:02:43,000
就是这个叫做固态存储

4222
02:02:43,000 --> 02:02:44,000
固态存储它现在默认的

4223
02:02:44,000 --> 02:02:46,000
文件系统的格式是 APFS

4224
02:02:46,000 --> 02:02:48,000
但是在 Mac 上面

4225
02:02:48,000 --> 02:02:49,000
它是用的是 Mac 的

4226
02:02:49,000 --> 02:02:54,000
APFS 的大小写不敏感的默认值

4227
02:02:54,000 --> 02:02:55,000
但是在 iPhone 上面

4228
02:02:55,000 --> 02:02:56,000
虽然你看不见

4229
02:02:56,000 --> 02:02:57,000
但是在 iPhone 上面

4230
02:02:57,000 --> 02:02:59,000
它用的默认是 APFS

4231
02:02:59,000 --> 02:03:00,000
大小写敏感的那一套

4232
02:03:00,000 --> 02:03:02,000
iPhone 是区分大小写的

4233
02:03:02,000 --> 02:03:05,000
就是 APFS 区分大小写

4234
02:03:05,000 --> 02:03:07,000
APFS 是当然是敏感的

4235
02:03:07,000 --> 02:03:08,000
对

4236
02:03:08,000 --> 02:03:10,000
对对

4237
02:03:10,000 --> 02:03:10,000
很奇怪对吧

4238
02:03:10,000 --> 02:03:13,000
所以我觉得其实这是一个问题

4239
02:03:13,000 --> 02:03:14,000
因为我是觉得

4240
02:03:14,000 --> 02:03:16,000
就是从信息的这个角度来讲

4241
02:03:16,000 --> 02:03:18,000
肯定说是区分是更好的

4242
02:03:18,000 --> 02:03:19,000
只是说从

4243
02:03:19,000 --> 02:03:21,000
从到什么来的

4244
02:03:21,000 --> 02:03:22,000
Idiot proof

4245
02:03:22,000 --> 02:03:22,000
这个角度来看

4246
02:03:22,000 --> 02:03:23,000
可能稍微差一些

4247
02:03:23,000 --> 02:03:25,000
但是在 iOS 上面去用户

4248
02:03:25,000 --> 02:03:27,000
是并不能直接读写文件系统的

4249
02:03:27,000 --> 02:03:29,000
所以不存在这个问题

4250
02:03:29,000 --> 02:03:31,000
那既然他们自己不是 Idiot

4251
02:03:31,000 --> 02:03:32,000
那就没有这个问题了

4252
02:03:32,000 --> 02:03:35,000
好吧

4253
02:03:35,000 --> 02:03:36,000
等一下

4254
02:03:36,000 --> 02:03:37,000
Windows 现在是什么状况

4255
02:03:37,000 --> 02:03:38,000
我有点忘了

4256
02:03:38,000 --> 02:03:39,000
Windows 是大小写敏感吗

4257
02:03:39,000 --> 02:03:39,000
不敏感

4258
02:03:39,000 --> 02:03:41,000
Windows 现在是大小写保留

4259
02:03:41,000 --> 02:03:42,000
那就跟 Mac 一样

4260
02:03:42,000 --> 02:03:44,000
那就不敏感了

4261
02:03:44,000 --> 02:03:44,000
对

4262
02:03:44,000 --> 02:03:46,000
OK

4263
02:03:46,000 --> 02:03:49,000
然后 NTFS 是没有大小写敏感的选项的

4264
02:03:49,000 --> 02:03:50,000
对吧

4265
02:03:50,000 --> 02:03:52,000
应该是没有的

4266
02:03:52,000 --> 02:03:53,000
就这个其实大小写

4267
02:03:53,000 --> 02:03:54,000
叫什么

4268
02:03:54,000 --> 02:03:55,000
大小写不敏感

4269
02:03:55,000 --> 02:03:56,000
但是大小写保留

4270
02:03:56,000 --> 02:03:58,000
其实在实现上

4271
02:03:58,000 --> 02:04:00,000
其实有会带来一个更麻烦的事情

4272
02:04:00,000 --> 02:04:01,000
就是你要存

4273
02:04:01,000 --> 02:04:03,000
比如说你想一下

4274
02:04:03,000 --> 02:04:05,000
你要去判断

4275
02:04:05,000 --> 02:04:07,000
这个文件到底在这个目录里面存不存在的时候

4276
02:04:07,000 --> 02:04:08,000
你要做什么

4277
02:04:08,000 --> 02:04:09,000
你要先把这个文件名

4278
02:04:09,000 --> 02:04:11,000
找一找的目标文件名

4279
02:04:11,000 --> 02:04:13,000
你要先把它统一化成一个

4280
02:04:13,000 --> 02:04:14,000
比如说都是小写或者都是大写

4281
02:04:14,000 --> 02:04:16,000
然后你还得把这个

4282
02:04:16,000 --> 02:04:17,000
这叫什么来的

4283
02:04:17,000 --> 02:04:19,000
就是这个目录里面

4284
02:04:19,000 --> 02:04:20,000
以及有的文件名都得统一成

4285
02:04:20,000 --> 02:04:22,000
多想多想

4286
02:04:22,000 --> 02:04:23,000
以才能够逐个字符

4287
02:04:23,000 --> 02:04:25,000
逐个这个字符比较

4288
02:04:25,000 --> 02:04:25,000
对不对

4289
02:04:25,000 --> 02:04:28,000
所以我觉得这个其实就是

4290
02:04:28,000 --> 02:04:30,000
其实效率挺低的

4291
02:04:30,000 --> 02:04:30,000
对

4292
02:04:30,000 --> 02:04:32,000
所以我觉得大小写敏感

4293
02:04:32,000 --> 02:04:34,000
还是一个更好的一个方案

4294
02:04:34,000 --> 02:04:34,000
嗯

4295
02:04:35,000 --> 02:04:39,000
然后就是另外一个更加坑爹的问题了

4296
02:04:39,000 --> 02:04:43,000
就是那文件名可不可以用 unicode 来写

4297
02:04:43,000 --> 02:04:45,000
用 emoji 来写是吧

4298
02:04:45,000 --> 02:04:47,000
现在是可以的呀

4299
02:04:47,000 --> 02:04:48,000
现在是可以的

4300
02:04:48,000 --> 02:04:50,000
现在已经可以了

4301
02:04:50,000 --> 02:04:50,000
就好像

4302
02:04:50,000 --> 02:04:53,000
就好像那个 swift 最开始不就是

4303
02:04:53,000 --> 02:04:56,000
好多例子里面都出现了

4304
02:04:56,000 --> 02:04:58,000
用 unicode 做的 identify

4305
02:04:58,000 --> 02:05:00,000
就非常坑爹

4306
02:05:00,000 --> 02:05:01,000
对

4307
02:05:01,000 --> 02:05:03,000
你想要来一个自动完成都做不到

4308
02:05:03,000 --> 02:05:03,000
对

4309
02:05:03,000 --> 02:05:03,000
对

4310
02:05:03,000 --> 02:05:03,000
对

4311
02:05:03,000 --> 02:05:03,000
对

4312
02:05:03,000 --> 02:05:03,000
对

4313
02:05:03,000 --> 02:05:04,000
对

4314
02:05:04,000 --> 02:05:04,000
对

4315
02:05:04,000 --> 02:05:04,000
对

4316
02:05:04,000 --> 02:05:04,000
对

4317
02:05:04,000 --> 02:05:04,000
对

4318
02:05:04,000 --> 02:05:04,000
对

4319
02:05:04,000 --> 02:05:04,000
对

4320
02:05:04,000 --> 02:05:04,000
对

4321
02:05:04,000 --> 02:05:04,000
对

4322
02:05:04,000 --> 02:05:04,000
对

4323
02:05:04,000 --> 02:05:04,000
对

4324
02:05:04,000 --> 02:05:04,000
对

4325
02:05:04,000 --> 02:05:04,000
对

4326
02:05:04,000 --> 02:05:04,000
对

4327
02:05:04,000 --> 02:05:04,000
对

4328
02:05:04,000 --> 02:05:04,000
对

4329
02:05:04,000 --> 02:05:04,000
对

4330
02:05:04,000 --> 02:05:04,000
对

4331
02:05:04,000 --> 02:05:05,000
对

4332
02:05:05,000 --> 02:05:05,000
этой的语言嘛

4333
02:05:05,000 --> 02:05:09,000
它基本上都是以这个 unicode 友好为或者叫做

4334
02:05:09,000 --> 02:05:10,000
unicode 兼容

4335
02:05:10,000 --> 02:05:10,000
为

4336
02:05:10,000 --> 02:05:10,000
为

4337
02:05:10,000 --> 02:05:10,000
为

4338
02:05:10,000 --> 02:05:10,000
为

4339
02:05:10,000 --> 02:05:11,000
卖点

4340
02:05:11,000 --> 02:05:12,000
一个标准嘛

4341
02:05:12,000 --> 02:05:12,000
对

4342
02:05:12,000 --> 02:05:13,000
卖点

4343
02:05:13,000 --> 02:05:13,000
你可以

4344
02:05:13,000 --> 02:05:14,000
也就是这样

4345
02:05:14,000 --> 02:05:14,000
可能也是

4346
02:05:14,000 --> 02:05:17,000
就是刚才我们考讨论的另外的一个问题了

4347
02:05:17,000 --> 02:05:22,000
既然你就说不要以这个英语为中心主义的话

4348
02:05:22,000 --> 02:05:27,000
那我的文件本我的这个变量命名为什么不可以是中文的

4349
02:05:27,000 --> 02:05:27,000
嗯

4350
02:05:27,000 --> 02:05:27,000
嗯

4351
02:05:27,000 --> 02:05:29,000
既然都可以是中文了

4352
02:05:29,000 --> 02:05:31,000
为什么不能是一个

4353
02:05:31,000 --> 02:05:32,000
那就是啊

4354
02:05:32,000 --> 02:05:32,000
的

4355
02:05:32,000 --> 02:05:33,000
emoji 呢

4356
02:05:33,000 --> 02:05:34,000
哈哈哈

4357
02:05:34,000 --> 02:05:34,000
所以

4358
02:05:34,000 --> 02:05:37,000
你刚才发出了一个什么声音

4359
02:05:37,000 --> 02:05:38,000
就是

4360
02:05:38,000 --> 02:05:41,000
就是一个某一种表情符号

4361
02:05:41,000 --> 02:05:43,000
呕吐的

4362
02:05:43,000 --> 02:05:45,000
你刚才

4363
02:05:45,000 --> 02:05:47,000
你刚才同学们

4364
02:05:47,000 --> 02:05:50,000
刚才 Rail 念出了呕吐这个表情符号

4365
02:05:50,000 --> 02:05:53,000
为他赋予了语音

4366
02:05:53,000 --> 02:05:55,000
这毕竟是一个纯听觉的节目

4367
02:05:55,000 --> 02:05:56,000
你要我怎么办

4368
02:05:56,000 --> 02:05:58,000
我只能采用通感的方式给你们展现

4369
02:05:58,000 --> 02:06:00,000
我们感受到了

4370
02:06:00,000 --> 02:06:03,000
感受到了是吧

4371
02:06:03,000 --> 02:06:05,000
以后 Rail 应该出一套

4372
02:06:05,000 --> 02:06:07,000
应该在节目里面出一套

4373
02:06:07,000 --> 02:06:09,000
这个 emoji 的发音指南

4374
02:06:09,000 --> 02:06:10,000
叫做

4375
02:06:10,000 --> 02:06:14,000
Podcast Emoji User Guide

4376
02:06:14,000 --> 02:06:17,000
比如说笑出猪叫声这个 emoji

4377
02:06:17,000 --> 02:06:23,000
有这个 emoji

4378
02:06:23,000 --> 02:06:24,000
没有这个 emoji

4379
02:06:24,000 --> 02:06:29,000
就是我这个就不叫 emoji 了

4380
02:06:29,000 --> 02:06:30,000
这个叫什么

4381
02:06:30,000 --> 02:06:33,000
叫 voice emoji 对吧

4382
02:06:33,000 --> 02:06:33,000
对

4383
02:06:33,000 --> 02:06:33,000
对吧

4384
02:06:33,000 --> 02:06:34,000
audio emoji

4385
02:06:34,000 --> 02:06:36,000
这根本就不是 moji

4386
02:06:36,000 --> 02:06:38,000
对

4387
02:06:38,000 --> 02:06:39,000
其实就是

4388
02:06:39,000 --> 02:06:42,000
就这里就是用 unicode 作为这个命名的方式

4389
02:06:42,000 --> 02:06:44,000
就是刚才会出现类似于

4390
02:06:44,000 --> 02:06:46,000
最开始提到的那个

4391
02:06:46,000 --> 02:06:49,000
这个中文的括号和英文的括号

4392
02:06:49,000 --> 02:06:50,000
怎么长得都一样

4393
02:06:50,000 --> 02:06:52,000
但是为什么我始终找不到这个文件

4394
02:06:52,000 --> 02:06:53,000
这个问题

4395
02:06:53,000 --> 02:06:53,000
对不对

4396
02:06:53,000 --> 02:06:55,000
但 unicode 也提供了那个

4397
02:06:55,000 --> 02:06:56,000
我们之前也解释过

4398
02:06:56,000 --> 02:06:57,000
有那个叫什么

4399
02:06:57,000 --> 02:06:59,000
叫什么 collide 的那个方案

4400
02:06:59,000 --> 02:06:59,000
对不对

4401
02:06:59,000 --> 02:07:03,000
就是虽然这两个它不是同一个码位

4402
02:07:03,000 --> 02:07:03,000
但是

4403
02:07:03,000 --> 02:07:06,000
我们在搜索或者是在处理的时候

4404
02:07:06,000 --> 02:07:08,000
认为它们在语义上是等价的

4405
02:07:08,000 --> 02:07:12,000
所以理论上你只要找到这个东西也能找到另外一个

4406
02:07:12,000 --> 02:07:16,000
但这个就是程序要做更加复杂的这个特别的 handle

4407
02:07:16,000 --> 02:07:17,000
就不能只是简单的

4408
02:07:17,000 --> 02:07:22,000
我只要比较这两个支付串的它每一个字节是不是一样就可以了

4409
02:07:22,000 --> 02:07:22,000
对吧

4410
02:07:22,000 --> 02:07:24,000
就是就会变得更加复杂

4411
02:07:24,000 --> 02:07:25,000
超复杂的

4412
02:07:25,000 --> 02:07:27,000
所以这个什么

4413
02:07:27,000 --> 02:07:29,000
为什么我们不能有一个简单安全的

4414
02:07:29,000 --> 02:07:30,000
应用的系统

4415
02:07:30,000 --> 02:07:32,000
可能就是对吧

4416
02:07:32,000 --> 02:07:33,000
这帮人干的

4417
02:07:33,000 --> 02:07:33,000
对吧

4418
02:07:33,000 --> 02:07:38,000
你们记不记得当年应该是好

4419
02:07:38,000 --> 02:07:39,000
有好几年前了

4420
02:07:39,000 --> 02:07:42,000
就是 iphone 的在某某最开始的几年的时候

4421
02:07:42,000 --> 02:07:43,000
经常会出现

4422
02:07:43,000 --> 02:07:46,000
因为你收到一条短信里面包含了一个奇怪

4423
02:07:46,000 --> 02:07:47,000
有点扣的

4424
02:07:47,000 --> 02:07:49,000
然后你就系统就崩溃了

4425
02:07:49,000 --> 02:07:52,000
对系统就就死机或者崩溃了

4426
02:07:52,000 --> 02:07:52,000
这种情况

4427
02:07:52,000 --> 02:07:53,000
对吧

4428
02:07:53,000 --> 02:07:54,000
对你可以说这个是这个叫什么

4429
02:07:54,000 --> 02:07:57,000
那个程序员写的这个这个这个代码

4430
02:07:57,000 --> 02:07:59,000
这个软件质量不够高

4431
02:07:59,000 --> 02:07:59,000
没错

4432
02:07:59,000 --> 02:08:00,000
事实上也是这样的

4433
02:08:00,000 --> 02:08:01,000
对吧

4434
02:08:01,000 --> 02:08:03,000
但是这个复杂度是因为什么东西引起的

4435
02:08:03,000 --> 02:08:07,000
所以现在那个 unicode 他们在做很多事情的话

4436
02:08:07,000 --> 02:08:13,000
很首先就是在安全性上面是他们那个很大的一个考虑因素啊

4437
02:08:13,000 --> 02:08:14,000
对

4438
02:08:14,000 --> 02:08:16,000
对这个在各家实现的时候要考虑

4439
02:08:16,000 --> 02:08:19,000
因为他们进行这个信息交换的时候

4440
02:08:19,000 --> 02:08:20,000
就就全部都传过去了嘛

4441
02:08:20,000 --> 02:08:22,000
一传过去的话

4442
02:08:22,000 --> 02:08:23,000
对对对

4443
02:08:23,000 --> 02:08:25,000
就是本质上你从信息安全角度来讲

4444
02:08:25,000 --> 02:08:30,000
这个是就是你只要从从外部传过来的一一一段信息

4445
02:08:30,000 --> 02:08:32,000
你就认为默认他应该是不可信的嘛

4446
02:08:32,000 --> 02:08:32,000
对吧

4447
02:08:32,000 --> 02:08:32,000
嗯

4448
02:08:32,000 --> 02:08:33,000
然后又又

4449
02:08:33,000 --> 02:08:37,000
又恰巧碰碰上了这个 unicode 这么一套复杂的要死的系统之后

4450
02:08:37,000 --> 02:08:39,000
那就很容易出现问题嘛

4451
02:08:39,000 --> 02:08:40,000
因为复杂度越高

4452
02:08:40,000 --> 02:08:41,000
bug 越多嘛

4453
02:08:41,000 --> 02:08:42,000
对

4454
02:08:42,000 --> 02:08:46,000
所以一开始他们就有些朋友可能哈就觉得很奇怪吧

4455
02:08:46,000 --> 02:08:48,000
unicode 不就是一个文字的编码吗

4456
02:08:48,000 --> 02:08:51,000
怎么还会跟这个信息安全承上关注

4457
02:08:51,000 --> 02:08:55,000
其实就是因为它里面有很多复杂的就各种文字都加在里面

4458
02:08:55,000 --> 02:08:57,000
所以很容易很容易做文章

4459
02:08:59,000 --> 02:08:59,000
嗯

4460
02:08:59,000 --> 02:09:02,000
那逼得我们无头都已经不再从事安全行业了

4461
02:09:02,000 --> 02:09:03,000
这个东西

4462
02:09:03,000 --> 02:09:03,000
这个

4463
02:09:03,000 --> 02:09:04,000
用户需求的坑

4464
02:09:04,000 --> 02:09:08,000
我觉得主要还是怎么说呢

4465
02:09:08,000 --> 02:09:09,000
安全行业需要人们有意识

4466
02:09:09,000 --> 02:09:12,000
就是只有人们认为安全是重要的时候

4467
02:09:12,000 --> 02:09:14,000
安全安全全行业才有前途

4468
02:09:14,000 --> 02:09:18,000
现在只能说大部分人都太没有就太不在乎了

4469
02:09:18,000 --> 02:09:21,000
只有等到失窃的时候才会才会后悔

4470
02:09:21,000 --> 02:09:22,000
真的

4471
02:09:22,000 --> 02:09:24,000
是那肯定

4472
02:09:24,000 --> 02:09:24,000
对

4473
02:09:24,000 --> 02:09:27,000
但我就说你的你的这个解决方案什么

4474
02:09:27,000 --> 02:09:29,000
那就只能说就加大投入嘛

4475
02:09:29,000 --> 02:09:32,000
但我的想法就是说能不能能不能能能够可以不要加大成本

4476
02:09:32,000 --> 02:09:33,000
就是不要给我

4477
02:09:33,000 --> 02:09:34,000
搞那么有点课的麻烦事好吧

4478
02:09:34,000 --> 02:09:36,000
为什么要组合啊

4479
02:09:36,000 --> 02:09:39,000
一个字一个满位代表一个字不好吗

4480
02:09:39,000 --> 02:09:41,000
你不缺那几个满位对吧

4481
02:09:41,000 --> 02:09:43,000
组合个毛线啊

4482
02:09:43,000 --> 02:09:45,000
对你知道有一种呃

4483
02:09:45,000 --> 02:09:45,000
比如说路啊

4484
02:09:45,000 --> 02:09:49,000
路啊就是一个所谓 asky clean 的这么一个编程语言

4485
02:09:49,000 --> 02:09:56,000
它的核心的整个 library 是不会触及到这个 asky 的第八位的

4486
02:09:56,000 --> 02:09:57,000
呃

4487
02:09:57,000 --> 02:09:59,000
就全部都一把就是七位搞定

4488
02:09:59,000 --> 02:10:00,000
所有的东西都在

4489
02:10:00,000 --> 02:10:03,000
就是耳熟能详

4490
02:10:03,000 --> 02:10:07,000
然后所有机计算机所有的 C 语言系统都支持了这些满位里面

4491
02:10:07,000 --> 02:10:08,000
这也是一个思路吧

4492
02:10:08,000 --> 02:10:13,000
就是走这个绝对可行的最小的集合

4493
02:10:13,000 --> 02:10:13,000
但是不行啊

4494
02:10:13,000 --> 02:10:14,000
人用户需求提出来

4495
02:10:14,000 --> 02:10:15,000
我就要看这个

4496
02:10:15,000 --> 02:10:17,000
这一摸就怎么办

4497
02:10:21,000 --> 02:10:23,000
瑞奥是本日最佳声音

4498
02:10:25,000 --> 02:10:26,000
对吧

4499
02:10:26,000 --> 02:10:26,000
所以哎

4500
02:10:26,000 --> 02:10:27,000
这个就是呢

4501
02:10:27,000 --> 02:10:29,000
最终还是像这个用户需求妥协了

4502
02:10:29,000 --> 02:10:33,000
对还是必须得硬着头皮上去把这些

4503
02:10:33,000 --> 02:10:34,000
这个都给修了

4504
02:10:34,000 --> 02:10:38,000
然后拿着那个超级后那个 unicode 现在那个应该是出到 11 了

4505
02:10:38,000 --> 02:10:39,000
对不对

4506
02:10:39,000 --> 02:10:41,000
对 13 了 13 了

4507
02:10:41,000 --> 02:10:41,000
我又 out 了

4508
02:10:41,000 --> 02:10:44,000
就是那个那个册子也都有多少页了

4509
02:10:44,000 --> 02:10:46,000
现在他那个规范啊

4510
02:10:46,000 --> 02:10:49,000
你说这个那个 pdf 啊

4511
02:10:49,000 --> 02:10:50,000
这要问梁海了

4512
02:10:51,000 --> 02:10:52,000
对啊

4513
02:10:52,000 --> 02:10:53,000
应该得上百兆了吧

4514
02:10:53,000 --> 02:10:53,000
我估计

4515
02:10:54,000 --> 02:11:02,000
unicode 的第 11 版的 core specification 的 pdf 版本是 976 页

4516
02:11:03,000 --> 02:11:05,000
哈哈哈哈

4517
02:11:05,000 --> 02:11:06,000
那 13 肯定超过 1000 了

4518
02:11:09,000 --> 02:11:12,000
但是一个这个 pdf 一共才 14.2 m

4519
02:11:14,000 --> 02:11:15,000
还好还好还好

4520
02:11:15,000 --> 02:11:16,000
这还只是 core

4521
02:11:16,000 --> 02:11:16,000
那还有周边的吧

4522
02:11:17,000 --> 02:11:19,000
这只是 core specification

4523
02:11:19,000 --> 02:11:21,000
这就不带那个码表

4524
02:11:21,000 --> 02:11:23,000
对 附录还有那些数据表非常多

4525
02:11:23,000 --> 02:11:24,000
对嗯

4526
02:11:24,000 --> 02:11:26,000
这只是 core specification 而已

4527
02:11:26,000 --> 02:11:28,000
一个一个超级无敌的深坑

4528
02:11:29,000 --> 02:11:30,000
啊

4529
02:11:30,000 --> 02:11:32,000
想想就是累啊

4530
02:11:32,000 --> 02:11:35,000
对于我们这种就是尽可能说

4531
02:11:35,000 --> 02:11:38,000
砍砍用灰熊不要增加复杂度的这种思维方式的人

4532
02:11:39,000 --> 02:11:41,000
这个就是过于复杂可以不做对吧

4533
02:11:45,000 --> 02:11:45,000
好吧

4534
02:11:45,000 --> 02:11:49,000
今天我们这个脑洞也比较多好

4535
02:11:49,000 --> 02:11:52,000
然后这个聊聊了这个哇

4536
02:11:52,000 --> 02:11:55,000
天哪从哪里聊到哪里了

4537
02:11:55,000 --> 02:11:55,000
不过挺好的呀

4538
02:11:55,000 --> 02:11:58,000
就是这整个命名规则嘛

4539
02:11:58,000 --> 02:11:59,000
对吧

4540
02:11:59,000 --> 02:12:00,000
就是文像这个长度自然自负转长度嘛

4541
02:12:00,000 --> 02:12:01,000
对吧就是文像这个长度自然自负转长度嘛

4542
02:12:01,000 --> 02:12:02,000
对吧就是文像这个长度自然自负转长度嘛

4543
02:12:02,000 --> 02:12:03,000
对吧就是文像这个长度自负转长度嘛

4544
02:12:03,000 --> 02:12:04,000
然后空格

4545
02:12:04,000 --> 02:12:05,000
嗯

4546
02:12:05,000 --> 02:12:14,000
就这个保留字不允许的字符不允许的这些文件名是否去别大小写这个就是命名的该说的都说了嘛

4547
02:12:14,000 --> 02:12:14,000
对啊

4548
02:12:14,000 --> 02:12:16,000
也聊了我一桩心愿

4549
02:12:16,000 --> 02:12:17,000
哈哈

4550
02:12:17,000 --> 02:12:18,000
聊一桩心愿

4551
02:12:18,000 --> 02:12:19,000
哈哈

4552
02:12:19,000 --> 02:12:21,000
这个我憋了好久没说了这个

4553
02:12:21,000 --> 02:12:21,000
哈哈

4554
02:12:21,000 --> 02:12:23,000
这个我憋了好久没说了这个

4555
02:12:23,000 --> 02:12:25,000
可以瞑目了

4556
02:12:25,000 --> 02:12:27,000
并没有瞑目我们还要把你抓来串台

4557
02:12:27,000 --> 02:12:27,000
哈哈

4558
02:12:27,000 --> 02:12:28,000
好的好的

4559
02:12:28,000 --> 02:12:29,000
好了你们可以收个尾

4560
02:12:29,000 --> 02:12:30,000
好的好的

4561
02:12:30,000 --> 02:12:30,000
好了你们可以收个尾

4562
02:12:30,000 --> 02:12:31,000
好的好的

4563
02:12:31,000 --> 02:12:31,000
好的好的

4564
02:12:31,000 --> 02:12:32,000
好的好的

4565
02:12:32,000 --> 02:12:32,000
好的好的

4566
02:12:32,000 --> 02:12:33,000
好的好的

4567
02:12:33,000 --> 02:12:40,000
您刚才收听到的节目是内核恐慌一堂贴尽量贴近计算机主技术主题的娱乐 podcast

4568
02:12:40,000 --> 02:12:42,000
我们号称硬核但是也没有什么干货

4569
02:12:42,000 --> 02:12:44,000
想听就听不想听就别听

4570
02:12:44,000 --> 02:12:46,000
我们的网址是 pan.icu

4571
02:12:46,000 --> 02:12:50,000
您可以在网站上找到订阅我们节目的方法以及联络我们的方式

4572
02:12:50,000 --> 02:12:57,000
如果您期待我们更频繁的更新节目欢迎您到爱发电为我们捐款捐款地址是

4573
02:12:57,000 --> 02:13:00,000
爱发电.net slash at kernelpanic

4574
02:13:00,000 --> 02:13:01,000
先发电后催更

4575
02:13:01,000 --> 02:13:02,000
文名催更

4576
02:13:02,000 --> 02:13:03,000
从你做起

4577
02:13:03,000 --> 02:13:05,000
如果您觉得意犹未尽

4578
02:13:05,000 --> 02:13:07,000
也欢迎您去收听

4579
02:13:07,000 --> 02:13:10,000
Rail 和黄海主播的风头圈

4580
02:13:10,000 --> 02:13:13,000
Rail 和人精主播的提前怀旧

4581
02:13:13,000 --> 02:13:16,000
以及基本不由无套主播的自弹自唱

4582
02:13:16,000 --> 02:13:18,000
好了

4583
02:13:18,000 --> 02:13:22,000
我们的发电连接太长了

4584
02:13:22,000 --> 02:13:24,000
你要念他去我们官网点连接

4585
02:13:24,000 --> 02:13:24,000
谁记得住

4586
02:13:24,000 --> 02:13:28,000
说的是回头把这删了

4587
02:13:28,000 --> 02:13:28,000
好吧

4588
02:13:28,000 --> 02:13:30,000
那再次感谢大家收听

4589
02:13:30,000 --> 02:13:32,000
本期的自弹自唱的

4590
02:13:32,000 --> 02:13:34,000
串来节目自弹自串

4591
02:13:34,000 --> 02:13:36,000
如果大家对我们的节目

4592
02:13:36,000 --> 02:13:37,000
有什么意见或者反馈

4593
02:13:37,000 --> 02:13:39,000
都可以写邮件给我们

4594
02:13:39,000 --> 02:13:40,000
邮箱地址是

4595
02:13:40,000 --> 02:13:42,000
podcastatthetype.com

4596
02:13:42,000 --> 02:13:43,000
p-o-d-c-a-s-t

4597
02:13:43,000 --> 02:13:46,000
at-t-h-e-t-y-p-e.com

4598
02:13:46,000 --> 02:13:47,000
同时大家也可以在

4599
02:13:47,000 --> 02:13:49,000
推特在微信

4600
02:13:49,000 --> 02:13:51,000
以及在微博上面

4601
02:13:51,000 --> 02:13:52,000
搜索 the type

4602
02:13:52,000 --> 02:13:52,000
找到我们

4603
02:13:52,000 --> 02:13:54,000
t-h-e-t-y-p-e

4604
02:13:54,000 --> 02:13:56,000
在 Facebook 上搜索 the type

4605
02:13:56,000 --> 02:13:57,000
或者 typeisbeautiful

4606
02:13:57,000 --> 02:13:58,000
都可以找到我们

4607
02:13:58,000 --> 02:14:00,000
这比我们啰嗦多了

4608
02:14:00,000 --> 02:14:01,000
我觉得

4609
02:14:01,000 --> 02:14:04,000
没有对比就没有伤害

4610
02:14:04,000 --> 02:14:05,000
自弹自串

4611
02:14:05,000 --> 02:14:07,000
基本上是不需要催更的

4612
02:14:07,000 --> 02:14:09,000
我们是隔周二播出

4613
02:14:09,000 --> 02:14:11,000
从开播以来

4614
02:14:11,000 --> 02:14:12,000
就从来没有间断过

4615
02:14:12,000 --> 02:14:14,000
所以大家可以顺便来

4616
02:14:14,000 --> 02:14:15,000
给我们催更的话

4617
02:14:15,000 --> 02:14:18,000
来加强我们的自弹自串的

4618
02:14:18,000 --> 02:14:19,000
这样一个串台节目的

4619
02:14:19,000 --> 02:14:20,000
催更工作

4620
02:14:20,000 --> 02:14:22,000
专门催自弹自串

4621
02:14:22,000 --> 02:14:24,000
希望我们下次的这个串台

4622
02:14:24,000 --> 02:14:26,000
不会一年之后再见

4623
02:14:26,000 --> 02:14:28,000
OK

4624
02:14:28,000 --> 02:14:29,000
好

4625
02:14:29,000 --> 02:14:30,000
感谢大家的收听

4626
02:14:30,000 --> 02:14:32,000
本次节目是 Eric

4627
02:14:32,000 --> 02:14:35,000
在 macOS 上剪辑制作完成的

4628
02:14:35,000 --> 02:14:36,000
我们下次节目再见

4629
02:14:36,000 --> 02:14:36,000
拜拜

4630
02:14:36,000 --> 02:14:37,000
拜拜

4631
02:14:37,000 --> 02:14:38,000
拜拜

