1
00:00:00,000 --> 00:00:04,000
欢迎收听 IPN Podcast 网络旗下的 IT 技术主题节目

2
00:00:04,000 --> 00:00:06,000
技术主题娱乐节目

3
00:00:06,000 --> 00:00:07,000
内核恐慌

4
00:00:07,000 --> 00:00:08,000
我们号称 hardcore

5
00:00:08,000 --> 00:00:09,000
但是没有干货

6
00:00:09,000 --> 00:00:10,000
想听人听

7
00:00:10,000 --> 00:00:11,000
不想听人就别听

8
00:00:11,000 --> 00:00:14,000
内核恐慌的网址是 ipn.li.com

9
00:00:14,000 --> 00:00:18,000
我们推荐大家使用 podcast 客户端订阅我们的节目

10
00:00:18,000 --> 00:00:20,000
如果您不知道该用哪一个客户端

11
00:00:20,000 --> 00:00:23,000
欢迎访问 ipn.li.com

12
00:00:23,000 --> 00:00:26,000
同样欢迎你为我们的节目捐款

13
00:00:26,000 --> 00:00:28,000
捐款地址是 ipn.li.com

14
00:00:28,000 --> 00:00:31,000
捐款结果随意

15
00:00:31,000 --> 00:00:34,000
只要是能够被 8 整出的正经数捐款

16
00:00:34,000 --> 00:00:35,000
捐款不会为你带来什么

17
00:00:35,000 --> 00:00:37,000
不捐也不会让你失去什么

18
00:00:37,000 --> 00:00:38,000
我们口号是

19
00:00:38,000 --> 00:00:39,000
好了

20
00:00:39,000 --> 00:00:46,000
今天是第 21 期节目

21
00:00:46,000 --> 00:00:48,000
您嗓子怎么样

22
00:00:48,000 --> 00:00:50,000
还凑合现在

23
00:00:50,000 --> 00:00:51,000
你怎么样

24
00:00:51,000 --> 00:00:57,000
这倒不是故意加的吧

25
00:00:58,000 --> 00:00:59,000
这段千万要抹掉

26
00:00:59,000 --> 00:01:03,000
我在女朋友的细心照料之下

27
00:01:03,000 --> 00:01:04,000
现在已经好了九成

28
00:01:04,000 --> 00:01:08,000
但是剩下一成总是在总是一直困扰着我

29
00:01:08,000 --> 00:01:09,000
就是说句话还是会咳嗽一下

30
00:01:09,000 --> 00:01:11,000
然后就会产生那种

31
00:01:12,000 --> 00:01:15,000
第一句话前面说的比较平缓

32
00:01:15,000 --> 00:01:16,000
后面越说越急说

33
00:01:16,000 --> 00:01:17,000
然后开始咳了

34
00:01:17,000 --> 00:01:18,000
没气是吧

35
00:01:18,000 --> 00:01:23,000
对我发现这个状况是上次感冒的好像是只有这叫什么来着

36
00:01:23,000 --> 00:01:24,000
就是管炎对吧

37
00:01:24,000 --> 00:01:28,000
对其实是咽炎转化转化成吃吃玩意儿

38
00:01:28,000 --> 00:01:30,000
这怎么算怎么算同病相怜

39
00:01:30,000 --> 00:01:33,000
还是说什么隔空传染

40
00:01:33,000 --> 00:01:38,000
对这病毒现在已经可以电子化了

41
00:01:38,000 --> 00:01:40,000
然后数据 digitalize

42
00:01:40,000 --> 00:01:41,000
然后传到那边

43
00:01:41,000 --> 00:01:46,000
real virus spread across cybernet

44
00:01:46,000 --> 00:01:53,000
生物能不能真的有一天以数字化的形式存在

45
00:01:53,000 --> 00:01:55,000
理论上可以吧

46
00:01:55,000 --> 00:01:57,000
就是那边探测一下 DNA

47
00:01:58,000 --> 00:01:59,000
这边合成一下

48
00:01:59,000 --> 00:02:00,000
出来了吗

49
00:02:00,000 --> 00:02:01,000
maker movement

50
00:02:01,000 --> 00:02:02,000
搞个 3 D 打印机

51
00:02:02,000 --> 00:02:04,000
直接打印病毒出来

52
00:02:04,000 --> 00:02:06,000
你说的是传输生命

53
00:02:06,000 --> 00:02:11,000
我想的是能不能就让生命就这么生活生存在网络上

54
00:02:11,000 --> 00:02:14,000
就不用再转化为一个实体

55
00:02:14,000 --> 00:02:19,000
就那天我们还在 IT 功能里面聊这个事情

56
00:02:19,000 --> 00:02:21,000
说要实现这一点

57
00:02:21,000 --> 00:02:23,000
我们先要解决一些哲学上的问题

58
00:02:23,000 --> 00:02:24,000
什么叫生存

59
00:02:24,000 --> 00:02:25,000
是不是

60
00:02:25,000 --> 00:02:26,000
对吧

61
00:02:26,000 --> 00:02:28,000
什么叫意识

62
00:02:28,000 --> 00:02:28,000
对不对

63
00:02:28,000 --> 00:02:31,000
现在其实这个问题有答案了吗

64
00:02:31,000 --> 00:02:34,000
我现在还没有看到有一个什么确切的靠谱的解吧

65
00:02:34,000 --> 00:02:35,000
不知道

66
00:02:35,000 --> 00:02:41,000
我觉得下次你们可以请脑科学博士赵晨上一次你们的节目

67
00:02:41,000 --> 00:02:43,000
OK

68
00:02:43,000 --> 00:02:44,000
好吧

69
00:02:44,000 --> 00:02:51,000
那我们先讲一下上一期的反馈

70
00:02:51,000 --> 00:02:52,000
好

71
00:02:52,000 --> 00:02:54,000
我有一个反馈

72
00:02:54,000 --> 00:02:57,000
有一位叫做 Daymark 的朋友

73
00:02:57,000 --> 00:02:59,000
在微博上给我们留了个言

74
00:02:59,000 --> 00:03:01,000
他这个消息这么说的

75
00:03:01,000 --> 00:03:02,000
有个问题想问 Real

76
00:03:02,000 --> 00:03:04,000
在看不到源码的情况下

77
00:03:04,000 --> 00:03:09,000
如何知道 OnePassword 不是一个密码专业盗窃器呢

78
00:03:09,000 --> 00:03:12,000
以上期测试的语言来说

79
00:03:12,000 --> 00:03:14,000
我们只能把程序当做一个黑箱

80
00:03:14,000 --> 00:03:16,000
给一些输入来观察输出

81
00:03:16,000 --> 00:03:19,000
但是我们并不能证明答应号

82
00:03:19,000 --> 00:03:21,000
它是可信的

83
00:03:21,000 --> 00:03:24,000
也就是说实质上是我们选择相信 OnePassword

84
00:03:24,000 --> 00:03:26,000
想请问 Real 是一句

85
00:03:26,000 --> 00:03:27,000
哪个语言是一句话

86
00:03:27,000 --> 00:03:31,000
哪些因素认为 OnePassword 可信的呢

87
00:03:31,000 --> 00:03:33,000
然后他的第二个问题是说

88
00:03:33,000 --> 00:03:38,000
是否 Real 只在 OnePassword 存储安全等级较低的密码

89
00:03:38,000 --> 00:03:43,000
那我能问一下安全等级较高的信息

90
00:03:43,000 --> 00:03:46,000
比如财务相关的 Real 会数字化吗

91
00:03:46,000 --> 00:03:47,000
如果会的话

92
00:03:47,000 --> 00:03:49,000
Real 的方案是什么

93
00:03:49,000 --> 00:03:50,000
这里集中解答一下

94
00:03:50,000 --> 00:03:55,000
就是首先我已经不用 OnePassword

95
00:03:55,000 --> 00:03:56,000
其实我也没怎么用过它

96
00:03:56,000 --> 00:03:57,000
其实我也没怎么用过它

97
00:03:57,000 --> 00:03:59,000
我还就是当时就有买

98
00:03:59,000 --> 00:04:01,000
还是很久以前了

99
00:04:01,000 --> 00:04:05,000
对还是它的 2.0 还是 2.几的版本我买过

100
00:04:05,000 --> 00:04:06,000
然后用了一下

101
00:04:06,000 --> 00:04:09,000
我觉得还凑合了

102
00:04:09,000 --> 00:04:14,000
然后后来苹果的 KChain 不是出了 iCloud 的 KChain 吗

103
00:04:14,000 --> 00:04:20,000
就是可以跟 iCloud 通过同步到你的其他的 iOS 设备

104
00:04:20,000 --> 00:04:21,000
或者是 Mac 上面吧

105
00:04:21,000 --> 00:04:24,000
然后选择全部都存在 KChain 里面

106
00:04:24,000 --> 00:04:26,000
然后呢

107
00:04:26,000 --> 00:04:27,000
我的绝大部分信息都是数字化的

108
00:04:27,000 --> 00:04:31,000
然后比较一些比较机密的什么银行卡账号密码之类的

109
00:04:31,000 --> 00:04:33,000
也是存在那个 KChain 里面的

110
00:04:33,000 --> 00:04:35,000
所以刚才那个问题是说

111
00:04:35,000 --> 00:04:36,000
如果没有源码的话

112
00:04:36,000 --> 00:04:41,000
你怎么去选择相信这个 OnePassword 或者是 KChain 的安全性呢

113
00:04:41,000 --> 00:04:44,000
正确答案是你没法确信

114
00:04:44,000 --> 00:04:45,000
因为你没有源代码

115
00:04:45,000 --> 00:04:46,000
对吧

116
00:04:46,000 --> 00:04:48,000
也不戒然吧

117
00:04:48,000 --> 00:04:51,000
你可以自己弄一个中间人攻击

118
00:04:51,000 --> 00:04:53,000
你可以把自己的路由器

119
00:04:53,000 --> 00:04:55,000
你可以秀探自己路由器

120
00:04:55,000 --> 00:04:56,000
然后看他到底在和哪些路由器有关

121
00:04:56,000 --> 00:04:57,000
然后看他到底在和哪些路由器有关

122
00:04:57,000 --> 00:04:58,000
然后看他到底在和哪些路由器有关

123
00:04:58,000 --> 00:04:59,000
通信对吧

124
00:04:59,000 --> 00:04:59,000
对

125
00:04:59,000 --> 00:05:02,000
这个还是当做黑盒来处理去观察他的输出

126
00:05:02,000 --> 00:05:04,000
或者说你做了再彻底一点

127
00:05:04,000 --> 00:05:08,000
你去反编译他的那个可信文件

128
00:05:08,000 --> 00:05:10,000
看他有在哪些地方调用网络

129
00:05:10,000 --> 00:05:12,000
然后你足够牛逼的话

130
00:05:12,000 --> 00:05:14,000
应该能反解出来说他在哪些地方

131
00:05:14,000 --> 00:05:15,000
哪些时候传输了

132
00:05:15,000 --> 00:05:18,000
这个传输之前做了些什么东西

133
00:05:18,000 --> 00:05:21,000
但是我相信绝大部分理智的正常人

134
00:05:21,000 --> 00:05:23,000
是不会去做这件事情的

135
00:05:23,000 --> 00:05:24,000
如果你足够多疑的话

136
00:05:24,000 --> 00:05:27,000
那就是如果你 paranoia 了

137
00:05:27,000 --> 00:05:27,000
这个程度上

138
00:05:27,000 --> 00:05:31,000
你肯定不会使用任何密码管理软件了

139
00:05:31,000 --> 00:05:31,000
比如我

140
00:05:31,000 --> 00:05:37,000
应该是说如果你需要这个层级的确信的话

141
00:05:37,000 --> 00:05:39,000
要么你就学 Richard Stallman

142
00:05:39,000 --> 00:05:42,000
就是你用的所有软件

143
00:05:42,000 --> 00:05:44,000
我读的就是所有软件

144
00:05:44,000 --> 00:05:46,000
包括像硬件的 BIOS

145
00:05:46,000 --> 00:05:50,000
其他中间都不说了

146
00:05:50,000 --> 00:05:51,000
什么操作系统

147
00:05:51,000 --> 00:05:52,000
应用程序

148
00:05:52,000 --> 00:05:54,000
都必须要是开源的

149
00:05:54,000 --> 00:05:56,000
你才能够去确保每个东西

150
00:05:56,000 --> 00:05:57,000
然后你对硬件的确信

151
00:05:57,000 --> 00:05:58,000
硬件的要求也是有高要求

152
00:05:58,000 --> 00:06:01,000
你必须用那种所谓的 open hardware

153
00:06:01,000 --> 00:06:02,000
就是不要有那种

154
00:06:02,000 --> 00:06:04,000
常有私有代码的那种硬件

155
00:06:04,000 --> 00:06:05,000
就包括某一个

156
00:06:05,000 --> 00:06:09,000
比如说现在很多用硬盘或者 SSD

157
00:06:09,000 --> 00:06:11,000
上面不会有很多芯片对吧

158
00:06:11,000 --> 00:06:13,000
那些芯片的要求

159
00:06:13,000 --> 00:06:15,000
也是要求他们能开源的

160
00:06:15,000 --> 00:06:16,000
能知道你他在里面在做什么

161
00:06:16,000 --> 00:06:18,000
你这个时候你才可以

162
00:06:18,000 --> 00:06:21,000
你在有所有的圆满的基础下

163
00:06:21,000 --> 00:06:22,000
你才可以确信的说

164
00:06:22,000 --> 00:06:24,000
这个机器没有做你

165
00:06:24,000 --> 00:06:25,000
你不想要他做的事情

166
00:06:25,000 --> 00:06:26,000
但是我觉得

167
00:06:26,000 --> 00:06:27,000
Richard Stallman

168
00:06:27,000 --> 00:06:29,000
是用 Happy hacking Keyball 的吧

169
00:06:29,000 --> 00:06:32,000
对他接一个

170
00:06:32,000 --> 00:06:34,000
如果是的话

171
00:06:34,000 --> 00:06:36,000
Happy hacking Keyball 的 controller 是必源的

172
00:06:36,000 --> 00:06:37,000
是吗

173
00:06:37,000 --> 00:06:38,000
是

174
00:06:38,000 --> 00:06:38,000
OK

175
00:06:38,000 --> 00:06:40,000
所以这又存在一个漏洞了

176
00:06:40,000 --> 00:06:41,000
对吧

177
00:06:41,000 --> 00:06:44,000
你不确定他那个键盘里面有没有一个 keylogger

178
00:06:44,000 --> 00:06:46,000
就是键盘记录器

179
00:06:46,000 --> 00:06:46,000
对吧

180
00:06:46,000 --> 00:06:47,000
对

181
00:06:47,000 --> 00:06:48,000
这又是一个不确定因素

182
00:06:48,000 --> 00:06:49,000
所以其实你看

183
00:06:49,000 --> 00:06:51,000
在现代这种情况下

184
00:06:51,000 --> 00:06:54,000
你要求说每个步骤都是可以被 audited

185
00:06:54,000 --> 00:06:55,000
就是可审计的

186
00:06:55,000 --> 00:06:57,000
基本是不现实的

187
00:06:57,000 --> 00:06:58,000
对是非常难的一件事情

188
00:06:58,000 --> 00:06:59,000
对

189
00:06:59,000 --> 00:07:00,000
所以这个时候怎么办呢

190
00:07:00,000 --> 00:07:05,000
你只能选择相信一些人或者是一个人了

191
00:07:05,000 --> 00:07:06,000
这个时候就可以

192
00:07:06,000 --> 00:07:08,000
你可以选择说你相信苹果呢

193
00:07:08,000 --> 00:07:10,000
还是相信 one password 呢

194
00:07:10,000 --> 00:07:11,000
当然你选择相信 one password

195
00:07:11,000 --> 00:07:14,000
你刚好跑的是 mac 系统的话

196
00:07:14,000 --> 00:07:15,000
你总得还是得选择相信苹果

197
00:07:15,000 --> 00:07:15,000
对吧

198
00:07:15,000 --> 00:07:17,000
所以我的策略就比较简单了

199
00:07:17,000 --> 00:07:19,000
那我就相信苹果好了

200
00:07:19,000 --> 00:07:23,000
像信上帝一样的

201
00:07:23,000 --> 00:07:24,000
没错

202
00:07:24,000 --> 00:07:25,000
苹果叫嘛

203
00:07:25,000 --> 00:07:26,000
拜一拜

204
00:07:26,000 --> 00:07:26,000
对

205
00:07:26,000 --> 00:07:27,000
好

206
00:07:27,000 --> 00:07:27,000
好

207
00:07:27,000 --> 00:07:30,000
这就是这个时候你就只能选择相信

208
00:07:30,000 --> 00:07:32,000
然后为什么我选择相信苹果呢

209
00:07:32,000 --> 00:07:33,000
这个理由很简单

210
00:07:33,000 --> 00:07:35,000
因为这个什么他已经把这个牛逼吹出去了吗

211
00:07:35,000 --> 00:07:36,000
对吧

212
00:07:36,000 --> 00:07:40,000
就是我们不不不不销售这个用户引起一个隐私信息

213
00:07:40,000 --> 00:07:41,000
我们也不执着后门

214
00:07:41,000 --> 00:07:44,000
我们也不做一些什么对用户有害的事情

215
00:07:44,000 --> 00:07:46,000
因为我比较缺心的点是

216
00:07:46,000 --> 00:07:52,000
如果被人爆出来说苹果有意在那个 kitchin 里面或者其他 mac 里面做了什么手脚

217
00:07:52,000 --> 00:07:54,000
最后被人发现的话

218
00:07:55,000 --> 00:07:57,000
他对他的这个叫做商誉啊

219
00:07:57,000 --> 00:08:02,000
就想说我们在会计上是有这么一个概念

220
00:08:02,000 --> 00:08:04,000
叫做商誉叫 goodwell

221
00:08:04,000 --> 00:08:05,000
就是公司的品牌啊

222
00:08:05,000 --> 00:08:07,000
这个东西的这些东西的价值

223
00:08:07,000 --> 00:08:10,000
我如果苹果被发现他故意

224
00:08:10,000 --> 00:08:14,000
比如说因为 nsc 给他下了给他们给了什么秘密法令

225
00:08:14,000 --> 00:08:16,000
然后他就在电脑里面做什么手脚

226
00:08:16,000 --> 00:08:17,000
如果他真的这么做了

227
00:08:17,000 --> 00:08:20,000
我相信对他商业是非常损非常大的损失

228
00:08:20,000 --> 00:08:23,000
那这个损失通常是以多少 billion dollars

229
00:08:23,000 --> 00:08:26,000
就是 10 亿美元为单位的价格

230
00:08:26,000 --> 00:08:26,000
对

231
00:08:26,000 --> 00:08:27,000
所以

232
00:08:27,000 --> 00:08:32,000
所以这个时候我我相信在如此大的这个呃压力下

233
00:08:32,000 --> 00:08:37,000
以及从他们这么多年坚持在道德观念来看

234
00:08:37,000 --> 00:08:40,000
我觉得我相信他们是可以的

235
00:08:40,000 --> 00:08:42,000
但至于说你信不信

236
00:08:42,000 --> 00:08:45,000
请你自己做自己的选择和判断

237
00:08:45,000 --> 00:08:47,000
对比如说我就选择不信

238
00:08:47,000 --> 00:08:50,000
因为这世界上没有什么东西是可信的

239
00:08:50,000 --> 00:08:53,000
哈哈哈我不是故意跟你唱晚调

240
00:08:53,000 --> 00:08:54,000
但

241
00:08:54,000 --> 00:08:56,000
RichardFoxStormen 你好

242
00:08:56,000 --> 00:08:58,000
我们来问一个事

243
00:08:58,000 --> 00:09:03,000
嗯对我反正我也顺便说说自己的选择吧

244
00:09:03,000 --> 00:09:06,000
就我呃我是不用任何密码管理软件

245
00:09:06,000 --> 00:09:07,000
嗯

246
00:09:07,000 --> 00:09:10,000
然后你的密码是靠一套机制来实现的

247
00:09:10,000 --> 00:09:14,000
对我有一套比较详尽的密码存储和管理机制

248
00:09:14,000 --> 00:09:18,000
然后大大脑自带密码生成器

249
00:09:18,000 --> 00:09:20,000
对我曾经在支付上写过给大家

250
00:09:20,000 --> 00:09:23,000
反正简单的来说就是密码要分三层

251
00:09:23,000 --> 00:09:24,000
嗯

252
00:09:24,000 --> 00:09:26,000
呃最基本的密码是一个

253
00:09:26,000 --> 00:09:29,000
大概一两年换一次密码

254
00:09:29,000 --> 00:09:30,000
嗯

255
00:09:30,000 --> 00:09:34,000
然后这个密码可以是在所有这些网站上都一样的

256
00:09:34,000 --> 00:09:35,000
比如说什么

257
00:09:35,000 --> 00:09:36,000
啊

258
00:09:36,000 --> 00:09:40,000
你去你想要下载一个 sql developer

259
00:09:40,000 --> 00:09:41,000
嗯

260
00:09:41,000 --> 00:09:43,000
从 Oracle 网站上下一个 sql developer

261
00:09:43,000 --> 00:09:46,000
你可以你可以他强迫你注册

262
00:09:46,000 --> 00:09:52,000
然后你此时你可以选择去下一个什么 bug me not 之类的呃浏览器插件

263
00:09:52,000 --> 00:09:55,000
他自动帮你填一个那个已经有人注册过的

264
00:09:55,000 --> 00:09:56,000
啊

265
00:09:56,000 --> 00:09:57,000
入密码

266
00:09:57,000 --> 00:09:58,000
嗯

267
00:09:58,000 --> 00:10:01,000
呃另外一个选择就是你自己维护一个非常弱的密码

268
00:10:01,000 --> 00:10:04,000
然后基本上最低的最低级的这一层密码

269
00:10:04,000 --> 00:10:07,000
我就是用一个一一直用一个最一样的

270
00:10:07,000 --> 00:10:08,000
嗯

271
00:10:08,000 --> 00:10:11,000
呃第二层密码是每个网站不一样

272
00:10:11,000 --> 00:10:12,000
啊

273
00:10:12,000 --> 00:10:16,000
而且但是有一部分是一样的

274
00:10:16,000 --> 00:10:19,000
呃这个是比如一些比较重要的

275
00:10:19,000 --> 00:10:24,000
网站比如像什么知乎呀或者是微博啊之类的这种

276
00:10:24,000 --> 00:10:25,000
跟你的 identity 相似的

277
00:10:25,000 --> 00:10:27,000
嗯

278
00:10:27,000 --> 00:10:29,000
呃然后这些密码有一套生成机制

279
00:10:29,000 --> 00:10:36,000
就是我看到他的网址或者是一般是看到网址的时候会想到这个密码应该是怎么构建的

280
00:10:36,000 --> 00:10:37,000
嗯

281
00:10:37,000 --> 00:10:54,000
然后第三层密码就是什么网银密码呀信用卡密码呀或者是啊什么报税的税务局密码之类的这个密码是每个网站都不一样而且跟网站本身没有关系而且我自己自己有时候必须去看一个 reminder 才能看得到这个密码啊

282
00:10:54,000 --> 00:10:57,000
这个 reminder 才能看出来才能想出来

283
00:10:57,000 --> 00:10:58,000
哈哈哈

284
00:10:58,000 --> 00:11:00,000
所以你还是记录了密码在某一个地方对吧

285
00:11:00,000 --> 00:11:05,000
但我只是我只记录了这个密码的 salt 你可以理解为

286
00:11:05,000 --> 00:11:06,000
呃 hint 吧应该是

287
00:11:06,000 --> 00:11:13,000
呃 salt 就是那个就是看到这个看到这一串东西我才能够重新构建出那个密码这么一个对对对对对对对 salt 是你已经有一个密码然后你通过加这个 salt 这个言变成一个新密码就能够了解了这个密码了对吧

288
00:11:13,000 --> 00:11:21,000
然后

289
00:11:21,000 --> 00:11:22,000
你是这么一个过程

290
00:11:22,000 --> 00:11:23,000
OK

291
00:11:23,000 --> 00:11:24,000
你说对了

292
00:11:24,000 --> 00:11:27,000
我我因为我在那个纸上写了 salt 这个词

293
00:11:27,000 --> 00:11:28,000
所以我一直叫他 salt

294
00:11:28,000 --> 00:11:29,000
但你说得没错

295
00:11:29,000 --> 00:11:32,000
是只能说是一种 hint

296
00:11:32,000 --> 00:11:33,000
对是个提示

297
00:11:33,000 --> 00:11:34,000
让你强调密码是什么

298
00:11:34,000 --> 00:11:35,000
对

299
00:11:35,000 --> 00:11:36,000
然后最重要的是

300
00:11:36,000 --> 00:11:38,000
呃比如说什么飞溜之下的密码

301
00:11:38,000 --> 00:11:39,000
嗯

302
00:11:39,000 --> 00:11:40,000
这个密码是什么

303
00:11:40,000 --> 00:11:41,000
就是这个密码

304
00:11:41,000 --> 00:11:42,000
对

305
00:11:42,000 --> 00:11:44,000
你说什么飞溜直下 3000 尺是不是

306
00:11:44,000 --> 00:11:46,000
没有那么弱

307
00:11:46,000 --> 00:11:48,000
或者说我文学素颜没有那么高

308
00:11:48,000 --> 00:11:51,000
但最重要的是

309
00:11:51,000 --> 00:11:53,000
就是第二层和第三层密码

310
00:11:53,000 --> 00:11:56,000
要比第一层密码换得更勤快一些

311
00:11:56,000 --> 00:11:57,000
就是联号密码

312
00:11:57,000 --> 00:11:58,000
可能两个月就要换一次

313
00:11:58,000 --> 00:12:01,000
这是比较重要的

314
00:12:01,000 --> 00:12:02,000
但是这是一个 paranoid

315
00:12:02,000 --> 00:12:04,000
人才会需要做的事情

316
00:12:04,000 --> 00:12:08,000
另外就是所有能够采用

317
00:12:08,000 --> 00:12:09,000
二步

318
00:12:09,000 --> 00:12:10,000
叫什么

319
00:12:10,000 --> 00:12:11,000
两步验证

320
00:12:11,000 --> 00:12:13,000
对两步验证的网站

321
00:12:13,000 --> 00:12:14,000
一定要使用两步验证

322
00:12:14,000 --> 00:12:17,000
两步验证是手机上做的

323
00:12:17,000 --> 00:12:18,000
用那个什么

324
00:12:18,000 --> 00:12:19,000
Google authenticator

325
00:12:19,000 --> 00:12:20,000
还是用什么

326
00:12:20,000 --> 00:12:22,000
对我是用 Google authenticator

327
00:12:22,000 --> 00:12:24,000
然后 Battlenet 有一个

328
00:12:24,000 --> 00:12:28,000
然后部分德国银行会给你一个卡

329
00:12:28,000 --> 00:12:29,000
这卡上可以按那个

330
00:12:29,000 --> 00:12:31,000
那个是

331
00:12:31,000 --> 00:12:31,000
还蛮爽

332
00:12:31,000 --> 00:12:33,000
叫做密码器

333
00:12:33,000 --> 00:12:33,000
对

334
00:12:33,000 --> 00:12:36,000
中国很多现在银行也有了

335
00:12:36,000 --> 00:12:40,000
我觉得那个其实是比较安全的一个选择

336
00:12:40,000 --> 00:12:40,000
对

337
00:12:40,000 --> 00:12:41,000
我的那个

338
00:12:41,000 --> 00:12:42,000
密码管理方法上

339
00:12:42,000 --> 00:12:44,000
我在同一个支付问题下

340
00:12:44,000 --> 00:12:45,000
我也有打好

341
00:12:45,000 --> 00:12:46,000
我们都有这样的

342
00:12:46,000 --> 00:12:47,000
到时候把那个链接贴出来

343
00:12:47,000 --> 00:12:51,000
我的就是比你更机器化

344
00:12:51,000 --> 00:12:52,000
然后更做的更绝

345
00:12:52,000 --> 00:12:54,000
就是所有的策略都是一样的

346
00:12:54,000 --> 00:12:55,000
每个网站都是随机生成的密码

347
00:12:55,000 --> 00:12:56,000
我自己都不知道

348
00:12:56,000 --> 00:12:58,000
必须用密码管理去看

349
00:12:58,000 --> 00:13:03,000
但此时你可能会选择在省

350
00:13:03,000 --> 00:13:05,000
你必须在省心和

351
00:13:05,000 --> 00:13:10,000
有安全感之间找到一个

352
00:13:10,000 --> 00:13:11,000
找到一个 balance

353
00:13:11,000 --> 00:13:11,000
就不可能是一个很安全的方式

354
00:13:11,000 --> 00:13:14,000
我的方法肯定不适合任何人的

355
00:13:14,000 --> 00:13:15,000
对

356
00:13:15,000 --> 00:13:17,000
我的也肯定不适合任何人

357
00:13:17,000 --> 00:13:20,000
因为太麻烦了

358
00:13:20,000 --> 00:13:21,000
但是我是不介意麻烦的

359
00:13:21,000 --> 00:13:22,000
然后

360
00:13:22,000 --> 00:13:25,000
你刚才说是

361
00:13:25,000 --> 00:13:27,000
你有些网站是共享一个密码的

362
00:13:27,000 --> 00:13:28,000
对

363
00:13:28,000 --> 00:13:31,000
我都是每个都是不同的密码的

364
00:13:31,000 --> 00:13:31,000
对

365
00:13:31,000 --> 00:13:32,000
从这个角度讲

366
00:13:32,000 --> 00:13:34,000
你要比我安全一些

367
00:13:34,000 --> 00:13:34,000
但

368
00:13:34,000 --> 00:13:35,000
没错

369
00:13:35,000 --> 00:13:37,000
而且我连每个邮箱账号都是不一样的

370
00:13:37,000 --> 00:13:39,000
就每个注册账号的邮箱都是不一样

371
00:13:39,000 --> 00:13:40,000
对

372
00:13:40,000 --> 00:13:41,000
我觉得这个是为我最变态的一点的

373
00:13:41,000 --> 00:13:46,000
他有一个自己的 Google Apps

374
00:13:46,000 --> 00:13:46,000
是吧

375
00:13:46,000 --> 00:13:47,000
对

376
00:13:47,000 --> 00:13:51,000
然后他给每一个网站都有一个自己不同的用户名

377
00:13:51,000 --> 00:13:52,000
然后导致有时候我会

378
00:13:52,000 --> 00:13:55,000
想要在这个网站上给他分享一个什么东西

379
00:13:55,000 --> 00:13:58,000
然后他就先问我是哪个账号

380
00:13:58,000 --> 00:13:59,000
那个网站用户名是另外一个

381
00:13:59,000 --> 00:14:00,000
然后我就翻转

382
00:14:00,000 --> 00:14:01,000
对

383
00:14:01,000 --> 00:14:02,000
因为为什么要这么做

384
00:14:02,000 --> 00:14:04,000
其实除了在一个安全上

385
00:14:04,000 --> 00:14:06,000
还有一个就是那个匿名性的问题

386
00:14:06,000 --> 00:14:09,000
就是很多现在很多那个网站

387
00:14:09,000 --> 00:14:10,000
他是可以

388
00:14:10,000 --> 00:14:11,000
通过你使用同一个账号判断的问题

389
00:14:11,000 --> 00:14:11,000
通过你使用同一个账号判断的问题

390
00:14:11,000 --> 00:14:12,000
就会判断出

391
00:14:12,000 --> 00:14:15,000
你在那个网站用的另外一个什么服务

392
00:14:15,000 --> 00:14:15,000
对吧

393
00:14:15,000 --> 00:14:20,000
就不希望这样被他们通过交叉比对账号的方法 tracking 的

394
00:14:20,000 --> 00:14:21,000
因为

395
00:14:21,000 --> 00:14:22,000
有很多这个

396
00:14:22,000 --> 00:14:24,000
其实我们可以讲一下那个之前很多人

397
00:14:24,000 --> 00:14:27,000
账号被泄露出的原因也比较简单

398
00:14:27,000 --> 00:14:27,000
就是

399
00:14:27,000 --> 00:14:29,000
很多人都是用同样一个账号

400
00:14:29,000 --> 00:14:30,000
比如说你就有某一个

401
00:14:30,000 --> 00:14:32,000
固定的邮箱地址

402
00:14:32,000 --> 00:14:33,000
或者是你的手机号码

403
00:14:33,000 --> 00:14:35,000
或者是某个人固定一个 ID 对吧

404
00:14:35,000 --> 00:14:36,000
然后一套固定的密码

405
00:14:36,000 --> 00:14:38,000
注册多个账号

406
00:14:38,000 --> 00:14:40,000
就像你说的那个第一层的

407
00:14:40,000 --> 00:14:41,000
那种不怎么安全的东西

408
00:14:41,000 --> 00:14:45,000
然后其中某一个服务被人脱库了

409
00:14:45,000 --> 00:14:48,000
就是所谓他的那个密码用户

410
00:14:48,000 --> 00:14:51,000
账号的那个数据库那张表被人

411
00:14:51,000 --> 00:14:52,000
爆出来

412
00:14:52,000 --> 00:14:53,000
这样的话

413
00:14:53,000 --> 00:14:55,000
别人拿到这个信息之后他可以挨个去试嘛

414
00:14:55,000 --> 00:14:58,000
常见的网站上你同一个账号同一个密码

415
00:14:58,000 --> 00:15:00,000
有没有注册其他同类的服务对吧

416
00:15:00,000 --> 00:15:03,000
就可以依次连带攻陷你的好多这种东西

417
00:15:03,000 --> 00:15:06,000
所以我这个就可以从根源上阻断这一点

418
00:15:06,000 --> 00:15:07,000
第一个你没办法

419
00:15:07,000 --> 00:15:10,000
把我的那个不同的网站的账号

420
00:15:10,000 --> 00:15:11,000
能够串起来

421
00:15:11,000 --> 00:15:11,000
第二个就是

422
00:15:11,000 --> 00:15:16,000
就算你就算你发现我的这个账号是这个人用的这个账号

423
00:15:16,000 --> 00:15:18,000
是等于那个人在那个账号上面去

424
00:15:18,000 --> 00:15:20,000
你从用同一个密码去试也是不行的

425
00:15:20,000 --> 00:15:21,000
因为每个密码都是不一样的

426
00:15:23,000 --> 00:15:25,000
然后我跟你有一点不一样

427
00:15:25,000 --> 00:15:27,000
就是我不怎么去更换密码

428
00:15:29,000 --> 00:15:32,000
就是我不会说隔三差我去换他一轮

429
00:15:32,000 --> 00:15:33,000
就是比较不频繁吧

430
00:15:33,000 --> 00:15:35,000
也换但是不是非常频繁

431
00:15:35,000 --> 00:15:37,000
因为我的理念是这样子的

432
00:15:37,000 --> 00:15:41,000
按照我这种用法和注意事项的结果

433
00:15:41,000 --> 00:15:43,000
如果这样密码被泄露

434
00:15:43,000 --> 00:15:45,000
一般是因为对方网站被脱库了

435
00:15:45,000 --> 00:15:47,000
这个时候你换不换密码是没有没有任何区别的

436
00:15:52,000 --> 00:15:54,000
也有的确是有道理

437
00:15:54,000 --> 00:15:55,000
对

438
00:15:55,000 --> 00:15:57,000
然后就我已经很麻烦了

439
00:15:57,000 --> 00:15:59,000
我就不想再给自己添更多的麻烦

440
00:15:59,000 --> 00:16:01,000
然后关于两部验证

441
00:16:01,000 --> 00:16:04,000
我也是就说基本上就是重要的服务

442
00:16:04,000 --> 00:16:05,000
就其实

443
00:16:05,000 --> 00:16:07,000
提供两部验证的基本上是重要的服务

444
00:16:07,000 --> 00:16:11,000
然后就基本上有两部验证的我都开了

445
00:16:11,000 --> 00:16:12,000
然后我在

446
00:16:13,000 --> 00:16:16,000
那个 iOS 上装了个叫做 Aussie 的一个应用

447
00:16:17,000 --> 00:16:19,000
之前有问那个 Google Authenticator

448
00:16:19,000 --> 00:16:20,000
我发现他不太好使

449
00:16:20,000 --> 00:16:22,000
就是那个界面也比较糟糕嘛

450
00:16:23,000 --> 00:16:26,000
然后 Aussie 会稍微好一点点

451
00:16:26,000 --> 00:16:30,000
其实当年最主要的原因是 Aussie 有一个那个 Mac

452
00:16:30,000 --> 00:16:32,000
就是 OS X 的一个应用

453
00:16:32,000 --> 00:16:37,000
他理论上是可以通过蓝牙和你手上那个 Aussie 连接

454
00:16:37,000 --> 00:16:38,000
这样的话

455
00:16:38,000 --> 00:16:40,000
你就不用打开手机

456
00:16:40,000 --> 00:16:41,000
就能

457
00:16:41,000 --> 00:16:43,000
通过电脑上那个 Aussie 的插件

458
00:16:43,000 --> 00:16:44,000
直接把那个

459
00:16:45,000 --> 00:16:47,000
一般是一个六位数的数字嘛

460
00:16:47,000 --> 00:16:48,000
读出来

461
00:16:49,000 --> 00:16:50,000
后来我发现其实不行的

462
00:16:51,000 --> 00:16:55,000
那个是要求手机上那个 Aussie 是在工作状态才可以的

463
00:16:55,000 --> 00:16:57,000
所以最终你还是得开一个那个

464
00:16:58,000 --> 00:16:59,000
手机上的 Aussie

465
00:17:00,000 --> 00:17:02,000
然后再开电脑上那个 Aussie 去跟他蓝牙共享

466
00:17:03,000 --> 00:17:04,000
这样比较麻烦嘛

467
00:17:04,000 --> 00:17:06,000
最后这样还是就直接在手机上

468
00:17:06,000 --> 00:17:07,000
反正六位数也不是特别

469
00:17:07,000 --> 00:17:08,000
不是特别麻烦对吧

470
00:17:09,000 --> 00:17:10,000
就是可以输一下

471
00:17:10,000 --> 00:17:10,000
还可以

472
00:17:11,000 --> 00:17:12,000
开那个 iOS

473
00:17:13,000 --> 00:17:14,000
8

474
00:17:14,000 --> 00:17:16,000
7 不是有那个叫做

475
00:17:16,000 --> 00:17:17,000
Notification Center 吗

476
00:17:18,000 --> 00:17:19,000
有的那个 Today

477
00:17:20,000 --> 00:17:22,000
Today extension 还是叫什么

478
00:17:23,000 --> 00:17:24,000
就是从顶上

479
00:17:24,000 --> 00:17:25,000
对对对

480
00:17:26,000 --> 00:17:26,000
从顶上拉下来

481
00:17:26,000 --> 00:17:29,000
然后 Aussie 他加了这么个功能就是他可以直接在里面加个快捷

482
00:17:30,000 --> 00:17:30,000
快捷访问嘛

483
00:17:31,000 --> 00:17:32,000
就可以直接拉下来

484
00:17:32,000 --> 00:17:35,000
翻到 Aussie 的那一栏然后点击某个账号进去

485
00:17:35,000 --> 00:17:38,000
再输一下这个密码或者验一下指纹

486
00:17:38,000 --> 00:17:41,000
就可以直接取到那个六位数的那个验证码了

487
00:17:41,000 --> 00:17:42,000
对吧

488
00:17:42,000 --> 00:17:43,000
这样的话就是还是

489
00:17:43,000 --> 00:17:44,000
还是比较方便

490
00:17:46,000 --> 00:17:49,000
然后还有一种方式

491
00:17:49,000 --> 00:17:51,000
就是用一个硬件的 USB 设备

492
00:17:53,000 --> 00:17:54,000
这个国内

493
00:17:54,000 --> 00:17:55,000
国内大家都很熟

494
00:17:55,000 --> 00:17:56,000
优顿嘛

495
00:17:56,000 --> 00:17:57,000
对

496
00:17:57,000 --> 00:17:58,000
优顿

497
00:17:58,000 --> 00:17:59,000
银行的

498
00:17:59,000 --> 00:18:00,000
他其实还有好几种形式

499
00:18:01,000 --> 00:18:02,000
不管是有 USB 的

500
00:18:02,000 --> 00:18:04,000
USB 的都有好几种

501
00:18:04,000 --> 00:18:05,000
第一种是最传统的那个

502
00:18:06,000 --> 00:18:06,000
我记得当年是

503
00:18:07,000 --> 00:18:09,000
工行吧我开始办的一个优顿

504
00:18:09,000 --> 00:18:10,000
就插上去

505
00:18:10,000 --> 00:18:11,000
他里面是其实就是

506
00:18:11,000 --> 00:18:12,000
内置一个

507
00:18:13,000 --> 00:18:13,000
私钥了

508
00:18:14,000 --> 00:18:14,000
对

509
00:18:15,000 --> 00:18:15,000
不是他是一个私钥

510
00:18:16,000 --> 00:18:16,000
私钥设计

511
00:18:16,000 --> 00:18:18,000
他就是一个内置的私钥

512
00:18:19,000 --> 00:18:20,000
没有密码生成器

513
00:18:20,000 --> 00:18:21,000
没有密码生成器

514
00:18:21,000 --> 00:18:22,000
他是验证那个系统

515
00:18:22,000 --> 00:18:23,000
我如果我理解没错

516
00:18:24,000 --> 00:18:26,000
他就是给签名用的嘛

517
00:18:27,000 --> 00:18:28,000
那个私钥他是一个叫做

518
00:18:28,000 --> 00:18:29,000
HSM 吧

519
00:18:29,000 --> 00:18:31,000
Hardware

520
00:18:31,000 --> 00:18:33,000
Security Module

521
00:18:33,000 --> 00:18:34,000
应该是叫这个名字

522
00:18:34,000 --> 00:18:35,000
OK

523
00:18:35,000 --> 00:18:36,000
OK

524
00:18:36,000 --> 00:18:37,000
因为我们

525
00:18:37,000 --> 00:18:41,000
当时有一个同学的研究这个他说里面是一个

526
00:18:41,000 --> 00:18:44,000
或者他的意思是每次给出来的私钥只是

527
00:18:45,000 --> 00:18:47,000
所有可能私钥之中一种

528
00:18:47,000 --> 00:18:48,000
就是这么高级

529
00:18:48,000 --> 00:18:49,000
对

530
00:18:49,000 --> 00:18:49,000
OK

531
00:18:50,000 --> 00:18:51,000
反正

532
00:18:51,000 --> 00:18:51,000
反正 anyway

533
00:18:52,000 --> 00:18:52,000
逻辑上应该这样

534
00:18:53,000 --> 00:18:54,000
他里面是一个只有那个硬件

535
00:18:55,000 --> 00:18:57,000
本身才知道的一个秘密

536
00:18:57,000 --> 00:18:59,000
这个秘密是不能通过 USB-C 口读取的

537
00:18:59,000 --> 00:19:00,000
他只能说

538
00:19:00,000 --> 00:19:02,000
你提供一个东西给他帮你验证

539
00:19:02,000 --> 00:19:03,000
帮你做一个签名

540
00:19:03,000 --> 00:19:05,000
这个签名再返回到你电脑里面

541
00:19:05,000 --> 00:19:07,000
再传输给对方网站

542
00:19:07,000 --> 00:19:08,000
然后那个

543
00:19:09,000 --> 00:19:09,000
应该是

544
00:19:09,000 --> 00:19:11,000
对然后那边可以通过

545
00:19:11,000 --> 00:19:12,000
签名验证

546
00:19:12,000 --> 00:19:13,000
确实是经过这个私钥

547
00:19:15,000 --> 00:19:16,000
签名过的东西

548
00:19:16,000 --> 00:19:17,000
大概这么一个过程

549
00:19:18,000 --> 00:19:19,000
然后

550
00:19:19,000 --> 00:19:21,000
还有一种是 USB 的

551
00:19:21,000 --> 00:19:23,000
不是 USB

552
00:19:23,000 --> 00:19:25,000
就那个刚你说的密码器

553
00:19:25,000 --> 00:19:28,000
就是一个他不需要通过 USB 接口来插的

554
00:19:29,000 --> 00:19:30,000
他就是一个

555
00:19:30,000 --> 00:19:30,000
那个

556
00:19:31,000 --> 00:19:31,000
RC

557
00:19:32,000 --> 00:19:33,000
那个美国那间公司

558
00:19:33,000 --> 00:19:37,000
他有一个小的挂钥匙串上一个小东西有个小屏幕

559
00:19:37,000 --> 00:19:38,000
他就是

560
00:19:38,000 --> 00:19:39,000
就是那个

561
00:19:39,000 --> 00:19:40,000
Authentic 的硬件版本

562
00:19:40,000 --> 00:19:43,000
他每隔可能 15 秒 30 秒他会换一个数字

563
00:19:44,000 --> 00:19:45,000
然后这个数字他那个顺序

564
00:19:46,000 --> 00:19:47,000
这个 sequence

565
00:19:47,000 --> 00:19:49,000
就是那一串数字的顺序是

566
00:19:49,000 --> 00:19:50,000
既定的

567
00:19:50,000 --> 00:19:52,000
然后这个可以通过那个当前的时间来

568
00:19:52,000 --> 00:19:53,000
来判定

569
00:19:53,000 --> 00:19:56,000
就可以对方服务器上也知道说

570
00:19:56,000 --> 00:19:57,000
这个时候是不是这个数字

571
00:19:58,000 --> 00:19:58,000
这个 sequence

572
00:19:59,000 --> 00:19:59,000
就可以通过这个

573
00:20:00,000 --> 00:20:00,000
就是一个随机数链嘛

574
00:20:01,000 --> 00:20:06,000
对其实我刚才想说的是另外一种形式就是要求你一定要插入电脑里面

575
00:20:06,000 --> 00:20:06,000
是不是一个

576
00:20:07,000 --> 00:20:08,000
就 USB 的那个就是

577
00:20:09,000 --> 00:20:09,000
就是

578
00:20:09,000 --> 00:20:10,000
就是要求你一定要插入电脑里面

579
00:20:10,000 --> 00:20:11,000
对

580
00:20:11,000 --> 00:20:13,000
但这有个问题就是现在不是很多这个

581
00:20:14,000 --> 00:20:16,000
手机了吗没有 USB 接口怎么办

582
00:20:17,000 --> 00:20:20,000
后来上次我看他们有一种另外的一些方案就是

583
00:20:20,000 --> 00:20:23,000
那个是可以插 USB 口也可以通过一个

584
00:20:23,000 --> 00:20:25,000
那个音频的接口啊

585
00:20:25,000 --> 00:20:26,000
就是那个耳机线耳机插

586
00:20:27,000 --> 00:20:31,000
插到手机上然后他那个银行软件做了什么特殊的协议

587
00:20:31,000 --> 00:20:33,000
通过这个播放一个

588
00:20:33,000 --> 00:20:35,000
声音就是就猫就猫嘛

589
00:20:35,000 --> 00:20:38,000
那个大家记得那个以前那个播号上那个猫

590
00:20:38,000 --> 00:20:40,000
嘶嘶嘶那个声音吗对吧

591
00:20:40,000 --> 00:20:40,000
对

592
00:20:40,000 --> 00:20:42,000
他就是通过那个东西来通过那个

593
00:20:43,000 --> 00:20:46,000
语音来编码一串那个数字信息嘛

594
00:20:47,000 --> 00:20:48,000
他这个就是用了一样的原理

595
00:20:49,000 --> 00:20:51,000
通过那个那个手机的耳机那个接口

596
00:20:51,000 --> 00:20:55,000
去输出出一段声音然后那个声音是包含一些特殊的编码过的

597
00:20:56,000 --> 00:20:58,000
这个私钥的认证的信息的

598
00:20:59,000 --> 00:21:03,000
德国还有种方法就是他会在屏幕上不停的闪烁一组

599
00:21:03,000 --> 00:21:05,000
二进制文样

600
00:21:06,000 --> 00:21:10,000
然后你用他的那个密码生成器上背后有一个

601
00:21:10,000 --> 00:21:13,000
类似摄像头或者说应该是不是就是一个感光元件

602
00:21:13,000 --> 00:21:14,000
然后

603
00:21:14,000 --> 00:21:17,000
你把那个感光元件 hold 在屏幕的上方

604
00:21:18,000 --> 00:21:20,000
然后等一会之后这个这个

605
00:21:20,000 --> 00:21:22,000
你会识别出来吗

606
00:21:22,000 --> 00:21:23,000
识别出来然后生成一个密码给你

607
00:21:24,000 --> 00:21:26,000
哇这个好可惜

608
00:21:26,000 --> 00:21:27,000
好吧

609
00:21:27,000 --> 00:21:29,000
但这样不是很费电吗那个密码器

610
00:21:29,000 --> 00:21:32,000
密码器就像我说的他只是一个感光元件而已

611
00:21:33,000 --> 00:21:37,000
就是他要求密码器需要有供电才可以识别密码器是装电池的

612
00:21:38,000 --> 00:21:39,000
对啊这样电池不就费得很快了

613
00:21:40,000 --> 00:21:46,000
好吧我前四年前申请的一个 scanner 现在还能用

614
00:21:46,000 --> 00:21:49,000
而且这个 scanner 要求你当时要把银行卡插进去

615
00:21:51,000 --> 00:21:56,000
那个 rsa 那个密码器也是就是一个小电池可以用好几年了这样

616
00:21:57,000 --> 00:22:02,000
但是过了几年他就会他有一个有效期嘛 expire 就是过了就跟那个什么

617
00:22:02,000 --> 00:22:05,000
SSL 证书一样有个有效期过了就作废了

618
00:22:06,000 --> 00:22:09,000
瑞士银行发的那个密码生成器也是就是一张信用卡

619
00:22:09,000 --> 00:22:10,000
然后信用卡就过去了

620
00:22:10,000 --> 00:22:11,000
信用卡里面肯定有一块电池

621
00:22:12,000 --> 00:22:13,000
上面可以显示一个数字

622
00:22:13,000 --> 00:22:14,000
然后

623
00:22:14,000 --> 00:22:17,000
我估计那个电池可以一直用到这个卡作废

624
00:22:18,000 --> 00:22:19,000
一般就是从三五年这样子

625
00:22:21,000 --> 00:22:25,000
上次那个就是 rsa 这间公司不是被黑了吗就是好多

626
00:22:25,000 --> 00:22:29,000
那个国内的企业也因为那个要全部换一轮那个

627
00:22:30,000 --> 00:22:32,000
发出去的讯证器嘛我记得好像有这么一个事

628
00:22:33,000 --> 00:22:34,000
所以

629
00:22:34,000 --> 00:22:35,000
安全还是

630
00:22:35,000 --> 00:22:36,000
挺难的一件事

631
00:22:36,000 --> 00:22:39,000
一会新闻环节里面我们也要聊聊

632
00:22:40,000 --> 00:22:45,000
其实那个说到这个顺便聊一下就是

633
00:22:46,000 --> 00:22:51,000
你用那个登录服务器 ssh 登录服务器你是用密码还是用那个证书

634
00:22:52,000 --> 00:22:52,000
用证书呀

635
00:22:53,000 --> 00:22:54,000
不是证书 key

636
00:22:54,000 --> 00:22:55,000
就用 private key 嘛

637
00:22:55,000 --> 00:23:01,000
对对对然后我基本上我的那些服务器的话都是进掉密码登录然后用 key 的

638
00:23:01,000 --> 00:23:02,000
我只有 root 是这样的

639
00:23:03,000 --> 00:23:04,000
其实我觉得只有 root 是这样的

640
00:23:04,000 --> 00:23:05,000
好吧你还有其他账户吗

641
00:23:06,000 --> 00:23:08,000
你难道平时用 root 账户登录吗

642
00:23:09,000 --> 00:23:09,000
不是不是

643
00:23:09,000 --> 00:23:10,000
你其他账户

644
00:23:10,000 --> 00:23:11,000
可以用密码登录吗

645
00:23:12,000 --> 00:23:13,000
其他账户可以用密码登录

646
00:23:13,000 --> 00:23:14,000
因为有时候比如说

647
00:23:14,000 --> 00:23:19,000
临时抓了一个 iPad 必须 ssh 连上去怎么办

648
00:23:19,000 --> 00:23:22,000
那个那其他账户可以 sudo 吗

649
00:23:22,000 --> 00:23:23,000
可以

650
00:23:24,000 --> 00:23:25,000
那你跟 root 没有密码登录

651
00:23:26,000 --> 00:23:27,000
有什么区别呢

652
00:23:27,000 --> 00:23:28,000
说也是

653
00:23:28,000 --> 00:23:29,000
对吧

654
00:23:29,000 --> 00:23:32,000
你说那个 iPad 那个方案可以在

655
00:23:32,000 --> 00:23:37,000
其实正确的用 key 的就是密钥的认证的方法是每个设备有自己的一个

656
00:23:38,000 --> 00:23:38,000
私钥公钥嘛

657
00:23:39,000 --> 00:23:39,000
一套

658
00:23:40,000 --> 00:23:42,000
但有时候是拿不到这样一个设备怎么办呢

659
00:23:43,000 --> 00:23:45,000
也是还是给现实给

660
00:23:45,000 --> 00:23:46,000
贵了是吧

661
00:23:48,000 --> 00:23:50,000
其实我觉得私钥公钥这套方法是

662
00:23:51,000 --> 00:23:52,000
挺方便的

663
00:23:52,000 --> 00:23:52,000
因为

664
00:23:53,000 --> 00:23:56,000
用私钥解决了这个密码和认证两个问题

665
00:23:56,000 --> 00:23:59,000
身份认证和密码登录两个问题

666
00:23:59,000 --> 00:24:01,000
就是你现在那个

667
00:24:01,000 --> 00:24:03,000
你去一个这个

668
00:24:03,000 --> 00:24:03,000
开一个

669
00:24:04,000 --> 00:24:09,000
一个普通的网络服注册一个账号他让你输账号还得输密码对吧多麻烦

670
00:24:09,000 --> 00:24:11,000
你用那个私钥直接给他公钥就好了

671
00:24:11,000 --> 00:24:12,000
他永远不知道你的私钥是什么

672
00:24:13,000 --> 00:24:13,000
没错

673
00:24:14,000 --> 00:24:14,000
所以

674
00:24:15,000 --> 00:24:20,000
之前有很多尝试像那个什么最近一次应该是 mozilla 搞那个叫什么

675
00:24:20,000 --> 00:24:24,000
Secure ID 还是什么之类的东西

676
00:24:24,000 --> 00:24:25,000
还是 Persona

677
00:24:26,000 --> 00:24:26,000
我忘了

678
00:24:27,000 --> 00:24:28,000
忘了名字了反正就是

679
00:24:29,000 --> 00:24:30,000
想把这个

680
00:24:30,000 --> 00:24:31,000
这一类的

681
00:24:31,000 --> 00:24:32,000
比较方便

682
00:24:32,000 --> 00:24:34,000
和安全的系统

683
00:24:34,000 --> 00:24:38,000
去替换掉这个密码但是这个我觉得可能对大多数来

684
00:24:38,000 --> 00:24:39,000
讲理解

685
00:24:39,000 --> 00:24:41,000
对其这个私钥公钥加密这么一个过程

686
00:24:41,000 --> 00:24:42,000
或者是任何一套其他

687
00:24:42,000 --> 00:24:45,000
非密码的这么一个替代方案可能还是有点成本的

688
00:24:46,000 --> 00:24:48,000
并没有大规模推动起来

689
00:24:49,000 --> 00:24:50,000
不过倒是在一些

690
00:24:50,000 --> 00:24:53,000
什么程序员的一些社区里面

691
00:24:54,000 --> 00:24:57,000
其中也不多很少用我就最显著的是那个

692
00:24:58,000 --> 00:25:02,000
你在有一家那个专门生成给人生成免费那个 SSL 证书的网站叫那个

693
00:25:02,000 --> 00:25:04,000
START SSL

694
00:25:05,000 --> 00:25:06,000
好像听过吧

695
00:25:06,000 --> 00:25:07,000
他的那个

696
00:25:07,000 --> 00:25:08,000
就是他下登录

697
00:25:09,000 --> 00:25:10,000
他才能有一个账号系统的

698
00:25:11,000 --> 00:25:12,000
他那个就是通过那个

699
00:25:12,000 --> 00:25:14,000
客户端的那个证书来

700
00:25:14,000 --> 00:25:16,000
实现他没有一个账号密码

701
00:25:17,000 --> 00:25:17,000
的那个概念

702
00:25:19,000 --> 00:25:20,000
这是我用的唯一一家

703
00:25:21,000 --> 00:25:22,000
通过这种

704
00:25:22,000 --> 00:25:24,000
测量器证书的方式来实现登录

705
00:25:25,000 --> 00:25:26,000
这个

706
00:25:26,000 --> 00:25:28,000
其实我总说我觉得

707
00:25:28,000 --> 00:25:30,000
要一个人接受抢口令和

708
00:25:31,000 --> 00:25:34,000
验证码这件事情有时候已经很难了

709
00:25:35,000 --> 00:25:38,000
我不知道你因为咱们接触人可能平时都比较太 savvy

710
00:25:38,000 --> 00:25:41,000
其实很多很多用户

711
00:25:41,000 --> 00:25:44,000
都不知道验证码到底是拿来干什么用的

712
00:25:44,000 --> 00:25:46,000
你说哪个验证码

713
00:25:47,000 --> 00:25:48,000
就是那个防止

714
00:25:48,000 --> 00:25:49,000
图灵测试验证码

715
00:25:49,000 --> 00:25:51,000
那个人机测试那个验证码

716
00:25:51,000 --> 00:25:56,000
在这种情况下你要向他解释什么是公钥私钥以及他为什么更安全其实是

717
00:25:56,000 --> 00:25:58,000
对了所以还是一个那个教育的问题

718
00:25:59,000 --> 00:26:06,000
对也许我觉得可能过两三代人会觉得公钥私钥是一个非常天经地义的概念就好像钥匙和锁一样

719
00:26:06,000 --> 00:26:07,000
就非常容易理解

720
00:26:07,000 --> 00:26:08,000
你竟然这么乐观

721
00:26:08,000 --> 00:26:10,000
过两三代人就可以了

722
00:26:10,000 --> 00:26:12,000
两三代还不够吗

723
00:26:12,000 --> 00:26:14,000
不要高估群众的智商

724
00:26:15,000 --> 00:26:16,000
你这个

725
00:26:16,000 --> 00:26:18,000
你这个这句话太精英主义了

726
00:26:18,000 --> 00:26:19,000
要不要抹掉

727
00:26:20,000 --> 00:26:21,000
不要

728
00:26:21,000 --> 00:26:22,000
让他们来批我吧

729
00:26:23,000 --> 00:26:23,000
好吧

730
00:26:24,000 --> 00:26:28,000
好那么接下来就进入新闻环节吧

731
00:26:29,000 --> 00:26:35,000
不如就接着刚才的话头说这个最近这一次比较严重的一个

732
00:26:35,000 --> 00:26:36,000
一个安全事件

733
00:26:37,000 --> 00:26:38,000
这个事件严重到

734
00:26:38,000 --> 00:26:40,000
严重的程度就是

735
00:26:41,000 --> 00:26:43,000
关乎你我的

736
00:26:45,000 --> 00:26:46,000
怎么说呢

737
00:26:46,000 --> 00:26:47,000
先介绍一下怎么回事吧

738
00:26:47,000 --> 00:26:47,000
对

739
00:26:48,000 --> 00:26:50,000
有一个有一个安全公司他

740
00:26:50,000 --> 00:26:51,000
这个公司名字叫做 hacking

741
00:26:53,000 --> 00:26:53,000
好像

742
00:26:53,000 --> 00:26:55,000
黑客小分队

743
00:26:55,000 --> 00:26:59,000
对有家客栈他的名字叫做有家有间客栈

744
00:26:59,000 --> 00:27:03,000
然后这个安全公司这个 hacking team 就叫做 hacking

745
00:27:04,000 --> 00:27:06,000
然后 hacking team 这家公司呢被黑了

746
00:27:07,000 --> 00:27:08,000
多福

747
00:27:08,000 --> 00:27:10,000
他不叫 hacking team 吗叫 hacked team

748
00:27:11,000 --> 00:27:12,000
对

749
00:27:12,000 --> 00:27:13,000
hacking team is hacked

750
00:27:14,000 --> 00:27:17,000
然后首先这家公司是以什么为生呢

751
00:27:17,000 --> 00:27:19,000
他们其实就是

752
00:27:19,000 --> 00:27:20,000
专门搞破解

753
00:27:21,000 --> 00:27:22,000
但是

754
00:27:23,000 --> 00:27:26,000
他搞破解之后不会告诉那些被破解了的

755
00:27:27,000 --> 00:27:29,000
或者是被黑了的网站或者公司

756
00:27:29,000 --> 00:27:30,000
说你们的产品有问题

757
00:27:31,000 --> 00:27:33,000
而是把这些漏洞藏起来

758
00:27:33,000 --> 00:27:35,000
放在他们的货架上

759
00:27:35,000 --> 00:27:37,000
对放在他们的货架上

760
00:27:37,000 --> 00:27:38,000
然后包起来卖给他们

761
00:27:38,000 --> 00:27:39,000
然后把这些比如说

762
00:27:40,000 --> 00:27:41,000
NSA 啊或者是

763
00:27:42,000 --> 00:27:46,000
也许中国人也有他们的客户或者是一些商业间谍啊

764
00:27:46,000 --> 00:27:47,000
会说

765
00:27:47,000 --> 00:27:48,000
就是

766
00:27:48,000 --> 00:27:50,000
世界各国政府和这种

767
00:27:50,000 --> 00:27:51,000
大机构嘛

768
00:27:52,000 --> 00:27:54,000
他们不是直接卖这些

769
00:27:55,000 --> 00:27:57,000
这些破解吧他是卖这个打包的服务好像是

770
00:27:57,000 --> 00:28:01,000
对他部分漏洞是会卖出去

771
00:28:01,000 --> 00:28:06,000
如果你只买服务的话你会需要你付的钱少一点但是如果你要把整个这个

772
00:28:07,000 --> 00:28:08,000
知识产权加以后

773
00:28:08,000 --> 00:28:09,000
然后买药方

774
00:28:09,000 --> 00:28:11,000
对那是要花很大很大一笔钱

775
00:28:12,000 --> 00:28:13,000
然后他们

776
00:28:14,000 --> 00:28:18,000
靠这个赚钱攒了 400 GB 的数据

777
00:28:18,000 --> 00:28:22,000
当然后来有消息说这个 400 GB 里面很多很多都是 email

778
00:28:22,000 --> 00:28:23,000
就没什么用

779
00:28:23,000 --> 00:28:25,000
没有啊 email 很有用的

780
00:28:26,000 --> 00:28:29,000
好吧就是各种机密都在 email 里面暴露

781
00:28:29,000 --> 00:28:31,000
在数据方面

782
00:28:31,000 --> 00:28:37,000
就是在 400 G 里面有很多只是数据而真正和方法相关的部分可能只有

783
00:28:37,000 --> 00:28:38,000
只有几百个

784
00:28:38,000 --> 00:28:40,000
但是无论如何这里面全都是非常非常机密的信息

785
00:28:41,000 --> 00:28:43,000
然后这一些

786
00:28:44,000 --> 00:28:47,000
数据全都被黑了然后被放在了网上就现在

787
00:28:48,000 --> 00:28:49,000
你我他都可以搞下来

788
00:28:51,000 --> 00:28:52,000
所以你下载了吗

789
00:28:53,000 --> 00:28:54,000
没有啊

790
00:28:54,000 --> 00:28:58,000
何必呢 400 G 我硬盘都装不下了

791
00:28:58,000 --> 00:29:00,000
400 G 现在随便一个小硬盘都能可以啊

792
00:29:01,000 --> 00:29:01,000
我

793
00:29:02,000 --> 00:29:03,000
只不过你全部是 SSD

794
00:29:03,000 --> 00:29:05,000
我的 SSD 是装不下的

795
00:29:05,000 --> 00:29:06,000
我的 SSD 只有 512

796
00:29:06,000 --> 00:29:07,000
然后还装了一堆

797
00:29:08,000 --> 00:29:08,000
所以

798
00:29:08,000 --> 00:29:09,000
买个那个什么吧

799
00:29:09,000 --> 00:29:10,000
那个

800
00:29:10,000 --> 00:29:11,000
外置硬盘有啊

801
00:29:12,000 --> 00:29:14,000
何必装着没用的东西是不是

802
00:29:15,000 --> 00:29:18,000
装很多觉得自己会看但其实根本不会看的东西

803
00:29:20,000 --> 00:29:21,000
不要想歪了我是说电子数

804
00:29:26,000 --> 00:29:28,000
然后在

805
00:29:28,000 --> 00:29:34,000
所有这些已经被下载已经被破解被爆出来的工具里面有一个比较严重的漏洞是在 flash

806
00:29:34,000 --> 00:29:35,000
上面

807
00:29:35,000 --> 00:29:36,000
就是

808
00:29:36,000 --> 00:29:37,000
臭名昭著的 flash

809
00:29:38,000 --> 00:29:39,000
竟然只有一个我也很吃惊

810
00:29:40,000 --> 00:29:41,000
或者说目前被发现的只有一个

811
00:29:42,000 --> 00:29:43,000
是一个

812
00:29:43,000 --> 00:29:44,000
非常严重的 flash

813
00:29:44,000 --> 00:29:45,000
zero day

814
00:29:45,000 --> 00:29:46,000
然后他

815
00:29:46,000 --> 00:29:49,000
最大的问题是他可以让任何网站这个网站上面有 flash

816
00:29:50,000 --> 00:29:51,000
的话

817
00:29:51,000 --> 00:29:53,000
可以让你在

818
00:29:53,000 --> 00:29:55,000
访问这个网站并且运行这个 flash 的时候

819
00:29:56,000 --> 00:30:01,000
在你的机器上以管理源权限执行任何他想要执行的代码

820
00:30:02,000 --> 00:30:03,000
是一件

821
00:30:03,000 --> 00:30:05,000
就你可能听起来没有什么但

822
00:30:06,000 --> 00:30:08,000
你硬盘上所有的

823
00:30:08,000 --> 00:30:10,000
短信

824
00:30:10,000 --> 00:30:11,000
邮件

825
00:30:11,000 --> 00:30:12,000
验照

826
00:30:12,000 --> 00:30:14,000
总之你就裸奋了

827
00:30:14,000 --> 00:30:14,000
对

828
00:30:15,000 --> 00:30:15,000
全都跟

829
00:30:16,000 --> 00:30:16,000
把

830
00:30:16,000 --> 00:30:18,000
就全都跟那个

831
00:30:19,000 --> 00:30:20,000
就像陈冠希

832
00:30:21,000 --> 00:30:23,000
无辜的把他的电脑交给了修理电脑的人一样

833
00:30:24,000 --> 00:30:26,000
暴露在这个网站下面

834
00:30:27,000 --> 00:30:33,000
然后当时紧急的 patch 也已经出来了但是

835
00:30:33,000 --> 00:30:34,000
我相信很多人还是没有装

836
00:30:35,000 --> 00:30:35,000
所以如果你

837
00:30:35,000 --> 00:30:37,000
听到这里的话最好赶紧去装一下

838
00:30:38,000 --> 00:30:40,000
真的是为了自己好

839
00:30:44,000 --> 00:30:46,000
所以这件事情怎么说呢

840
00:30:48,000 --> 00:30:49,000
之前大家都知道说这些

841
00:30:50,000 --> 00:30:53,000
安全漏洞是可以私家买卖交易然后

842
00:30:53,000 --> 00:30:56,000
用来去去黑进别人电脑

843
00:30:56,000 --> 00:30:59,000
大家抱着一个脚信心的觉得没事

844
00:30:59,000 --> 00:31:01,000
谁来搞我我又不是什么重要人物是吧

845
00:31:02,000 --> 00:31:04,000
但我觉得这次暴露就是

846
00:31:05,000 --> 00:31:07,000
我吃惊的是原来

847
00:31:07,000 --> 00:31:07,000
可以

848
00:31:08,000 --> 00:31:08,000
有这么

849
00:31:10,000 --> 00:31:11,000
这么多这么惊人的

850
00:31:13,000 --> 00:31:14,000
海量的

851
00:31:14,000 --> 00:31:16,000
数据可以供人购买

852
00:31:16,000 --> 00:31:18,000
我以前总觉得

853
00:31:18,000 --> 00:31:19,000
对嘛所以

854
00:31:19,000 --> 00:31:21,000
大家都以前觉得只看到个 B 3 一角是吧

855
00:31:21,000 --> 00:31:23,000
现在看到 B 3 的半截

856
00:31:24,000 --> 00:31:27,000
其实上面还有更庞大的生态链我们是看不到的

857
00:31:27,000 --> 00:31:31,000
不小心扔了一个深水扎带然后居然浮上来这么多

858
00:31:31,000 --> 00:31:33,000
特色的冰

859
00:31:35,000 --> 00:31:36,000
但是呢

860
00:31:36,000 --> 00:31:37,000
有什么问题呢就是

861
00:31:38,000 --> 00:31:43,000
这些还是公开就用的就在他做成这个商业化的产品

862
00:31:45,000 --> 00:31:46,000
之前已经有很多人受害了

863
00:31:47,000 --> 00:31:47,000
你不知道而已

864
00:31:48,000 --> 00:31:50,000
我没有我可能这个时候

865
00:31:50,000 --> 00:31:54,000
在录音对吧说不是一个谁在监控我们也也很难讲

866
00:31:54,000 --> 00:31:58,000
对在报出来的数据里面报出来的资料里面有

867
00:31:58,000 --> 00:32:04,000
据称 hacking team 有在所有的几乎所有的 windows 客户都在上安装远程桌面的方法

868
00:32:05,000 --> 00:32:06,000
包括 windows form

869
00:32:06,000 --> 00:32:07,000
就是

870
00:32:08,000 --> 00:32:13,000
你在用手机你手机上显示什么可能已经有人可以去看了只不过他从来没有看过而已

871
00:32:15,000 --> 00:32:16,000
还没来得及看是吧

872
00:32:16,000 --> 00:32:18,000
前一阵子那个

873
00:32:19,000 --> 00:32:25,000
Wikileaks 爆出来从施洛德到梅克尔每一任德国总理全都被 NINC 确定

874
00:32:25,000 --> 00:32:28,000
政府要人肯定是操不掉的这点什么都不用想

875
00:32:29,000 --> 00:32:32,000
只是说我们现在关注我们这种什么小老百姓

876
00:32:33,000 --> 00:32:36,000
对然后里面可能有一部分的

877
00:32:36,000 --> 00:32:37,000
手段就来自于这次

878
00:32:38,000 --> 00:32:41,000
被爆出来的 hacking team 所开发的技术

879
00:32:41,000 --> 00:32:43,000
这些都是综合性的工程

880
00:32:43,000 --> 00:32:44,000
就是他

881
00:32:44,000 --> 00:32:44,000
就是

882
00:32:45,000 --> 00:32:47,000
hacking team 他掌握了一部分的这么一些漏洞

883
00:32:48,000 --> 00:32:49,000
还有一些其他的

884
00:32:49,000 --> 00:32:51,000
更资深或藏得更好的

885
00:32:52,000 --> 00:32:52,000
这种

886
00:32:53,000 --> 00:32:53,000
这种

887
00:32:53,000 --> 00:32:54,000
组织或者个人

888
00:32:55,000 --> 00:32:56,000
比如说 NINC

889
00:32:56,000 --> 00:33:00,000
他们自己有一套手上的所有的什么核武器

890
00:33:00,000 --> 00:33:01,000
这种东西

891
00:33:01,000 --> 00:33:05,000
然后这些东西爆出来的危害在哪里呢就好像

892
00:33:05,000 --> 00:33:06,000
怎么说呢

893
00:33:06,000 --> 00:33:07,000
川友也能告诉你说

894
00:33:08,000 --> 00:33:09,000
大家

895
00:33:09,000 --> 00:33:11,000
过去都不知道这个原子弹怎么造对吧

896
00:33:11,000 --> 00:33:14,000
我告诉你原子弹是这么这么这么早

897
00:33:15,000 --> 00:33:16,000
而且造这个原子弹

898
00:33:16,000 --> 00:33:17,000
不怎么麻烦

899
00:33:17,000 --> 00:33:18,000
不怎么费钱

900
00:33:19,000 --> 00:33:23,000
有了图纸就可以上了不像说你真的造一个原子弹

901
00:33:23,000 --> 00:33:28,000
你有了图纸你可能不一定有那个什么离心机你还提炼不出来那么高纯度的什么

902
00:33:28,000 --> 00:33:29,000
放射性物质对吧

903
00:33:30,000 --> 00:33:32,000
像这种软件的原子弹和核武器

904
00:33:33,000 --> 00:33:34,000
拿了就可以用了

905
00:33:35,000 --> 00:33:36,000
所以

906
00:33:36,000 --> 00:33:44,000
反正就是大家就最后这段时间就只好自求多福了因为爆出来之后公开了这些东西之后

907
00:33:46,000 --> 00:33:48,000
好人坏人都会用它的然后你也不知道

908
00:33:48,000 --> 00:33:50,000
谁会对你有利谁会对你不利对不对

909
00:33:51,000 --> 00:33:51,000
没错

910
00:33:51,000 --> 00:33:52,000
我觉得这次

911
00:33:53,000 --> 00:33:54,000
出来的最

912
00:33:54,000 --> 00:33:56,000
我最关心的一件问题就是

913
00:33:56,000 --> 00:33:59,000
比如说我用苹果这个系统对吧我就关心

914
00:33:59,000 --> 00:34:03,000
Apple 他会不会专门派一个什么专门搞一个小组的人

915
00:34:04,000 --> 00:34:06,000
去研究这里面爆出来的这些公开的漏洞

916
00:34:06,000 --> 00:34:08,000
马上把他跟他相关的事收好啊

917
00:34:10,000 --> 00:34:11,000
这是一个 Lip of face

918
00:34:11,000 --> 00:34:12,000
永远不知道

919
00:34:12,000 --> 00:34:14,000
我觉得作为一家正

920
00:34:14,000 --> 00:34:15,000
你只能选择相同

921
00:34:16,000 --> 00:34:17,000
不是他应该做的就是

922
00:34:18,000 --> 00:34:19,000
把这个事情

923
00:34:19,000 --> 00:34:21,000
作为他的一个

924
00:34:22,000 --> 00:34:23,000
核心药物吧

925
00:34:23,000 --> 00:34:24,000
提上一丝马上就

926
00:34:24,000 --> 00:34:26,000
他们会重视起来那肯定会

927
00:34:26,000 --> 00:34:30,000
不确定你现在他不知道他没有他没有吱声嘛对吧

928
00:34:30,000 --> 00:34:31,000
这是我的 Lip of face

929
00:34:31,000 --> 00:34:32,000
我是

930
00:34:32,000 --> 00:34:33,000
I hope

931
00:34:33,000 --> 00:34:34,000
Do that

932
00:34:34,000 --> 00:34:35,000
但是

933
00:34:35,000 --> 00:34:36,000
但是

934
00:34:36,000 --> 00:34:37,000
不一定吗

935
00:34:37,000 --> 00:34:40,000
所以就看最近这个你而且他们修那个

936
00:34:41,000 --> 00:34:43,000
就他们去分析一个这个漏洞然后去修

937
00:34:43,000 --> 00:34:45,000
达布丁还要测试

938
00:34:45,000 --> 00:34:48,000
再放给大众中间还要这么一场至少可能有这么

939
00:34:48,000 --> 00:34:50,000
一两周或者一两个月的没有过程吧对吧

940
00:34:51,000 --> 00:34:53,000
所以在这段时间内大家还是都处于在

941
00:34:53,000 --> 00:34:55,000
裸奔的状态

942
00:34:55,000 --> 00:34:56,000
对对所以

943
00:34:56,000 --> 00:34:57,000
真的是

944
00:34:58,000 --> 00:35:00,000
安全是很难很难的

945
00:35:00,000 --> 00:35:02,000
就从从某种意义上来说

946
00:35:03,000 --> 00:35:06,000
以后的这个所谓的真正意义上的安全就只能是少部分

947
00:35:06,000 --> 00:35:10,000
特权阶级和特别有钱人能够享受的服务了

948
00:35:11,000 --> 00:35:13,000
你看有这么多人花钱来搞你对吧

949
00:35:13,000 --> 00:35:15,000
那怎么办你怎么花钱

950
00:35:15,000 --> 00:35:16,000
有钱负得起

951
00:35:16,000 --> 00:35:17,000
四人兵

952
00:35:17,000 --> 00:35:18,000
雇佣军才可以

953
00:35:18,000 --> 00:35:19,000
对对对

954
00:35:19,000 --> 00:35:20,000
上次那个谁

955
00:35:21,000 --> 00:35:24,000
是希拉里克伦顿他不在鸡血美国总统吗

956
00:35:24,000 --> 00:35:25,000
然后来就有

957
00:35:26,000 --> 00:35:27,000
就很多报道去去去

958
00:35:27,000 --> 00:35:28,000
去把他的那个过去吗

959
00:35:29,000 --> 00:35:32,000
说他在当那个他当国务卿还是什么来的

960
00:35:33,000 --> 00:35:34,000
反正是 Secretary of State

961
00:35:35,000 --> 00:35:35,000
应该是国务卿吧

962
00:35:36,000 --> 00:35:36,000
对

963
00:35:36,000 --> 00:35:38,000
对然后期间

964
00:35:39,000 --> 00:35:40,000
他竟然在自己家

965
00:35:41,000 --> 00:35:46,000
地下室搞了一个 mail server 邮件服务器去跑他自己的私人邮件

966
00:35:47,000 --> 00:35:49,000
然后他的目的也比较简单就是

967
00:35:49,000 --> 00:35:52,000
避开因为如果他用公那个政府就白宫的邮件

968
00:35:52,000 --> 00:35:54,000
服务器

969
00:35:54,000 --> 00:35:55,000
不是

970
00:35:55,000 --> 00:35:56,000
那个被审查是肯定的

971
00:35:56,000 --> 00:36:01,000
他会被 archive 会被存档那可能会会被翻出来做出一些对他不利的东西吧

972
00:36:01,000 --> 00:36:02,000
所以他就

973
00:36:02,000 --> 00:36:04,000
搞了个自己的私服

974
00:36:04,000 --> 00:36:06,000
然后自己的一些

975
00:36:06,000 --> 00:36:06,000
跑船器

976
00:36:06,000 --> 00:36:10,000
在邮件上面玩一些东西

977
00:36:10,000 --> 00:36:12,000
然后来就说卧槽那还得了

978
00:36:13,000 --> 00:36:14,000
白宫的那些邮件服务器

979
00:36:14,000 --> 00:36:17,000
NSA 的专门派一小队人在里帮他盯着嘛

980
00:36:18,000 --> 00:36:19,000
好歹还好一点

981
00:36:20,000 --> 00:36:22,000
他放自己家里谁给他盯着

982
00:36:23,000 --> 00:36:25,000
所以我还是蛮震惊的

983
00:36:25,000 --> 00:36:26,000
竟然还有这种玩法

984
00:36:27,000 --> 00:36:31,000
不过还好一般通过邮件交流也不是什么

985
00:36:32,000 --> 00:36:34,000
特别要紧的国家机密

986
00:36:34,000 --> 00:36:36,000
那种会用专门专线的

987
00:36:36,000 --> 00:36:37,000
还还

988
00:36:37,000 --> 00:36:38,000
凑合但是

989
00:36:38,000 --> 00:36:40,000
这种这种消息还是挺

990
00:36:40,000 --> 00:36:41,000
不容易的

991
00:36:41,000 --> 00:36:42,000
这回到了那个什么

992
00:36:43,000 --> 00:36:43,000
刚才我们

993
00:36:44,000 --> 00:36:45,000
开场我提到那个你到底相信谁是吧

994
00:36:46,000 --> 00:36:48,000
其实正确答案是 trust

995
00:36:48,000 --> 00:36:49,000
no one

996
00:36:50,000 --> 00:36:51,000
但是做不到吗

997
00:36:52,000 --> 00:36:52,000
这是

998
00:36:53,000 --> 00:36:55,000
X 档里面那个

999
00:36:55,000 --> 00:36:56,000
主角什么

1000
00:36:56,000 --> 00:36:56,000
Ted Fox

1001
00:36:57,000 --> 00:36:57,000
Fox Ted

1002
00:36:59,000 --> 00:37:00,000
他叫什么来着

1003
00:37:00,000 --> 00:37:01,000
Murder

1004
00:37:01,000 --> 00:37:05,000
Murder 他的开机密码就是 trust no one

1005
00:37:06,000 --> 00:37:07,000
你现在知道了

1006
00:37:08,000 --> 00:37:08,000
就是

1007
00:37:09,000 --> 00:37:09,000
你

1008
00:37:09,000 --> 00:37:11,000
正确的方式 trust no one

1009
00:37:11,000 --> 00:37:12,000
但是其实做不到

1010
00:37:12,000 --> 00:37:15,000
我相信这个心血上的分估是九点

1011
00:37:15,000 --> 00:37:16,000
9999999999999999999999999999999999999999999999999

1012
00:37:16,000 --> 00:37:16,000
做不到

1013
00:37:17,000 --> 00:37:20,000
因为你要 Trust no one 的话就像刚刚我说的

1014
00:37:20,000 --> 00:37:22,000
从硬件底层开始

1015
00:37:22,000 --> 00:37:25,000
每一个步骤都要经过你自己的验证

1016
00:37:27,000 --> 00:37:27,000
就是不行

1017
00:37:27,000 --> 00:37:28,000
不现实

1018
00:37:28,000 --> 00:37:30,000
所以只能选择

1019
00:37:30,000 --> 00:37:31,000
相信一帮人啊

1020
00:37:31,000 --> 00:37:32,000
然后

1021
00:37:32,000 --> 00:37:33,000
至于说

1022
00:37:33,000 --> 00:37:35,000
你想选一 acey 相信她之后

1023
00:37:35,000 --> 00:37:36,000
会发生什么

1024
00:37:36,000 --> 00:37:39,000
那就只能填知道了

1025
00:37:39,000 --> 00:37:44,000
当然我觉得也不用特别过分的去怀疑

1026
00:37:44,000 --> 00:37:47,000
怀疑这些人

1027
00:37:47,000 --> 00:37:49,000
或者怀疑一品公司

1028
00:37:49,000 --> 00:37:50,000
或者说怀疑 whatever

1029
00:37:50,000 --> 00:37:53,000
因为你活在现代社会里面

1030
00:37:53,000 --> 00:37:54,000
完全不相信任何人

1031
00:37:54,000 --> 00:37:57,000
其实只是一个美好的愿景和假象

1032
00:37:57,000 --> 00:37:58,000
你是做不到的

1033
00:37:58,000 --> 00:38:01,000
我觉得是这样子的

1034
00:38:01,000 --> 00:38:06,000
现在这些系统已经太复杂了

1035
00:38:06,000 --> 00:38:09,000
你没有可能从一个

1036
00:38:09,000 --> 00:38:12,000
比较高的可行度的情况下

1037
00:38:12,000 --> 00:38:13,000
确保这个体系不出任何问题

1038
00:38:13,000 --> 00:38:15,000
这就是不现实的

1039
00:38:15,000 --> 00:38:16,000
就好像你说指望

1040
00:38:16,000 --> 00:38:17,000
我要这个软件没有 bug

1041
00:38:17,000 --> 00:38:20,000
不太现实

1042
00:38:20,000 --> 00:38:23,000
这个时候怎么办

1043
00:38:23,000 --> 00:38:25,000
你只能说就选择相信了

1044
00:38:25,000 --> 00:38:28,000
我觉得复杂度固然是一方面

1045
00:38:28,000 --> 00:38:30,000
另一方面是你在生活中

1046
00:38:30,000 --> 00:38:30,000
已经

1047
00:38:30,000 --> 00:38:32,000
你在现代社会里面

1048
00:38:32,000 --> 00:38:33,000
已经选择相信很多人了

1049
00:38:33,000 --> 00:38:36,000
或者说无条件的去相信很多人

1050
00:38:36,000 --> 00:38:37,000
甚至是很多人你根本就不认识

1051
00:38:37,000 --> 00:38:38,000
根本就不知道他叫什么

1052
00:38:38,000 --> 00:38:40,000
比如说你上公车

1053
00:38:40,000 --> 00:38:41,000
你搭乘飞机的时候

1054
00:38:41,000 --> 00:38:44,000
你就把生命交给了机长的手里

1055
00:38:44,000 --> 00:38:46,000
然后你在银行存钱的时候

1056
00:38:46,000 --> 00:38:47,000
不管是机长

1057
00:38:47,000 --> 00:38:49,000
还有什么各种航空公司

1058
00:38:49,000 --> 00:38:51,000
飞机制造厂

1059
00:38:51,000 --> 00:38:53,000
然后雷达天气

1060
00:38:53,000 --> 00:38:54,000
还有什么上帝

1061
00:38:54,000 --> 00:38:57,000
不会砸个鸟过来撞死你

1062
00:38:57,000 --> 00:38:59,000
这类的

1063
00:38:59,000 --> 00:39:00,000
所以活着就要

1064
00:39:00,000 --> 00:39:03,000
有时候就是被迫要盲目相信一些人

1065
00:39:03,000 --> 00:39:04,000
Life is risky

1066
00:39:04,000 --> 00:39:10,000
为什么忽然觉得好沉重

1067
00:39:10,000 --> 00:39:11,000
没有啊

1068
00:39:11,000 --> 00:39:12,000
大家都知道

1069
00:39:12,000 --> 00:39:14,000
人生就是有风险

1070
00:39:14,000 --> 00:39:15,000
你坐家里还指不定

1071
00:39:15,000 --> 00:39:16,000
天下掉个东西

1072
00:39:16,000 --> 00:39:17,000
把你房子砸垮了

1073
00:39:17,000 --> 00:39:18,000
把你砸死

1074
00:39:18,000 --> 00:39:20,000
就好像今天

1075
00:39:20,000 --> 00:39:22,000
刚刚我今天中午吃饭的时候

1076
00:39:22,000 --> 00:39:24,000
Apple Watch 会员震了一下

1077
00:39:24,000 --> 00:39:26,000
然后我抬起手腕来一看

1078
00:39:26,000 --> 00:39:30,000
说我住的这个地方叫 Franken

1079
00:39:30,000 --> 00:39:34,000
说 Franken 地区有一个发生了枪击案

1080
00:39:34,000 --> 00:39:34,000
What?

1081
00:39:35,000 --> 00:39:36,000
我说 What?

1082
00:39:37,000 --> 00:39:38,000
然后赶紧进去看细则

1083
00:39:38,000 --> 00:39:40,000
就在离我 50 公里的地方

1084
00:39:40,000 --> 00:39:43,000
有一个人

1085
00:39:43,000 --> 00:39:46,000
他开着一辆银色的

1086
00:39:46,000 --> 00:39:49,000
Mercedes 的 Cabrio

1087
00:39:49,000 --> 00:39:50,000
敞篷跑车

1088
00:39:50,000 --> 00:39:52,000
在路边停下

1089
00:39:52,000 --> 00:39:53,000
问路边一个老太太

1090
00:39:53,000 --> 00:39:56,000
82 岁老太太一些事

1091
00:39:56,000 --> 00:39:57,000
问完之后

1092
00:39:57,000 --> 00:39:58,000
老太太往回走的过程中

1093
00:39:58,000 --> 00:39:59,000
他掏出枪来

1094
00:39:59,000 --> 00:40:00,000
把老太太打死了

1095
00:40:00,000 --> 00:40:01,000
What?

1096
00:40:01,000 --> 00:40:02,000
神经病啊这是

1097
00:40:02,000 --> 00:40:03,000
我不知道啊

1098
00:40:03,000 --> 00:40:06,000
然后他开了大概 10 公里左右

1099
00:40:06,000 --> 00:40:10,000
又杀死了一个在路边骑自行车的人

1100
00:40:10,000 --> 00:40:11,000
所以他是什么反社会人格

1101
00:40:11,000 --> 00:40:12,000
我不知道

1102
00:40:12,000 --> 00:40:13,000
这是今天才发生的事情

1103
00:40:13,000 --> 00:40:15,000
所以我可能一会儿看下新闻

1104
00:40:15,000 --> 00:40:16,000
才知道具体发生了什么

1105
00:40:16,000 --> 00:40:17,000
但怎么说呢

1106
00:40:17,000 --> 00:40:18,000
就是飞来横祸不是吗

1107
00:40:18,000 --> 00:40:20,000
而且离你这么近

1108
00:40:20,000 --> 00:40:21,000
就离我这么近

1109
00:40:21,000 --> 00:40:22,000
50 公里之外

1110
00:40:22,000 --> 00:40:23,000
是因为我每天

1111
00:40:23,000 --> 00:40:24,000
不是每天

1112
00:40:24,000 --> 00:40:28,000
但以前往返于某地和某地之间

1113
00:40:28,000 --> 00:40:28,000
每天会

1114
00:40:28,000 --> 00:40:30,000
为什么

1115
00:40:30,000 --> 00:40:32,000
我总要说每天经常会经过这么一个地方

1116
00:40:32,000 --> 00:40:35,000
你看这高速公路上的牌子

1117
00:40:35,000 --> 00:40:35,000
记着这个名字

1118
00:40:35,000 --> 00:40:38,000
然后忽然今天那儿发生了一次枪击案

1119
00:40:38,000 --> 00:40:39,000
就是这个感觉

1120
00:40:39,000 --> 00:40:40,000
所以就是嘛

1121
00:40:40,000 --> 00:40:43,000
就是你可能什么出门被车撞死

1122
00:40:43,000 --> 00:40:44,000
然后遇到一个疯子把你给崩了

1123
00:40:44,000 --> 00:40:47,000
然后什么喝水也可能被淹死

1124
00:40:47,000 --> 00:40:49,000
就呛死之类的

1125
00:40:49,000 --> 00:40:51,000
就是反正你知道做任何事情

1126
00:40:51,000 --> 00:40:53,000
就不管你做还是不做任何事情

1127
00:40:53,000 --> 00:40:56,000
你总是会有机会遇到这种小概率事件的

1128
00:40:56,000 --> 00:40:57,000
对

1129
00:40:57,000 --> 00:40:58,000
所以其实信息方面的

1130
00:40:58,000 --> 00:40:59,000
信息安全方面的风险

1131
00:41:00,000 --> 00:41:01,000
就必须要承担一点

1132
00:41:01,000 --> 00:41:02,000
对

1133
00:41:02,000 --> 00:41:03,000
没有办法

1134
00:41:03,000 --> 00:41:04,000
你想你这么想一下

1135
00:41:04,000 --> 00:41:06,000
你可能觉得你就安心了

1136
00:41:06,000 --> 00:41:06,000
释然一点

1137
00:41:06,000 --> 00:41:08,000
对

1138
00:41:08,000 --> 00:41:09,000
没错

1139
00:41:09,000 --> 00:41:10,000
OK

1140
00:41:10,000 --> 00:41:11,000
那么过渡到下一条新闻

1141
00:41:11,000 --> 00:41:12,000
嗯

1142
00:41:12,000 --> 00:41:14,000
这条新闻比较振奋啊

1143
00:41:14,000 --> 00:41:15,000
就是就是老闻了吧

1144
00:41:15,000 --> 00:41:18,000
就已经上两周前的了

1145
00:41:18,000 --> 00:41:19,000
对对

1146
00:41:19,000 --> 00:41:21,000
开发了

1147
00:41:21,000 --> 00:41:23,000
嗯

1148
00:41:23,000 --> 00:41:23,000
蛮大码算

1149
00:41:23,000 --> 00:41:24,000
其实有七年

1150
00:41:24,000 --> 00:41:30,000
但是去年 2 月 26 日才 public beta 的这个来自于 github

1151
00:41:30,000 --> 00:41:32,000
的 atom 编辑器

1152
00:41:32,000 --> 00:41:34,000
什么今天

1153
00:41:34,000 --> 00:41:37,000
6 月 25 日终于发布了 1.0 版

1154
00:41:37,000 --> 00:41:38,000
嗯

1155
00:41:38,000 --> 00:41:39,000
这也是个什么

1156
00:41:39,000 --> 00:41:41,000
1.0 就是一个里程碑了

1157
00:41:41,000 --> 00:41:41,000
对

1158
00:41:41,000 --> 00:41:45,000
当然这是 github 这种比较负责任的公司

1159
00:41:45,000 --> 00:41:49,000
会把 1.0 版这么这么及时的试出来

1160
00:41:49,000 --> 00:41:52,000
你像当初 google mail beta 的多久

1161
00:41:52,000 --> 00:41:55,000
好多好多年

1162
00:41:55,000 --> 00:41:56,000
对

1163
00:41:56,000 --> 00:41:57,000
十年又没有了

1164
00:41:57,000 --> 00:41:59,000
差不多吧

1165
00:41:59,000 --> 00:42:00,000
嗯

1166
00:42:00,000 --> 00:42:01,000
难以相信

1167
00:42:01,000 --> 00:42:01,000
对

1168
00:42:01,000 --> 00:42:03,000
所以 1.0 版有什么特别的

1169
00:42:03,000 --> 00:42:06,000
其实也没有什么特别

1170
00:42:06,000 --> 00:42:06,000
我仔细看了一下

1171
00:42:06,000 --> 00:42:15,000
就是他们呃从 public release 一直到现在历经了 155 次 release

1172
00:42:15,000 --> 00:42:18,000
就是过去的这一年多一点里面有 155 次 release

1173
00:42:18,000 --> 00:42:20,000
每一次都有 change list

1174
00:42:20,000 --> 00:42:26,000
然后现在就是他们整个呃编辑器的核心

1175
00:42:26,000 --> 00:42:27,000
那个可以扩展的那一部分

1176
00:42:27,000 --> 00:42:30,000
就是 api 那一部分已经被正式去了

1177
00:42:30,000 --> 00:42:33,000
这也是他发布 1.0 版本的专业

1178
00:42:33,000 --> 00:42:36,000
然后其实我想说的是就是他有一个视频很有意思

1179
00:42:36,000 --> 00:42:40,000
他呃用一台用那种 60 年的手法

1180
00:42:40,000 --> 00:42:51,000
就是如果你看过一个视频叫做啊 prediction of home computers 之类的这么一个 60 年代做的啊

1181
00:42:51,000 --> 00:42:54,000
未来关于未来家用电脑的展望视频的话

1182
00:42:54,000 --> 00:42:57,000
这个视频跟那个视频是相呼应的那种感觉

1183
00:42:57,000 --> 00:42:58,000
对那个 60 年的视频是相呼应的那种感觉

1184
00:42:58,000 --> 00:42:59,000
对那个 60 年的视频是相呼应的那种感觉

1185
00:42:59,000 --> 00:42:59,000
对那个 60 年的视频是相呼应的那种感觉

1186
00:42:59,000 --> 00:42:59,000
对那个 60 年的视频是相呼应的那种感觉

1187
00:43:00,000 --> 00:43:04,000
在视频里面说已经假想了将来的人们回家一回家就会开着脑

1188
00:43:04,000 --> 00:43:08,000
然后可以在多个显示器上处理表格

1189
00:43:08,000 --> 00:43:15,000
然后可以通过一个巨大的电视屏幕一样一样的东西和一个滚轮啊

1190
00:43:15,000 --> 00:43:17,000
滚球应该说之类的

1191
00:43:17,000 --> 00:43:20,000
会以旋钮之类的东西来在线购物

1192
00:43:20,000 --> 00:43:23,000
那个时候已经全都想到了这些

1193
00:43:23,000 --> 00:43:28,000
然后这个 atom 1.0 的宣传视频就是拍的也不算吧

1194
00:43:28,000 --> 00:43:37,000
就是用那种风格拍了一个一家人围绕着这么一个专用的 atom 控制台上的显示器来滑的过程

1195
00:43:37,000 --> 00:43:38,000
还蛮值得一看的

1196
00:43:39,000 --> 00:43:41,000
这个什么程序员的恶趣味

1197
00:43:41,000 --> 00:43:43,000
没错

1198
00:43:43,000 --> 00:43:44,000
然后可以顺便提一下

1199
00:43:44,000 --> 00:43:49,000
就是那个 Visual Studio Code 也发布了 0.5 百

1200
00:43:49,000 --> 00:43:51,000
其实这几个我一直搞不清楚

1201
00:43:51,000 --> 00:43:56,000
就是 Facebook 最近之前不是也搞了一个叫 Nucleus 对吧

1202
00:43:58,000 --> 00:43:58,000
Nucleus 对吧

1203
00:43:58,000 --> 00:44:01,000
Nucleus 也是基于 Electro 的嘛

1204
00:44:01,000 --> 00:44:02,000
不是吗

1205
00:44:03,000 --> 00:44:04,000
对对对

1206
00:44:04,000 --> 00:44:07,000
就是基于那个和那个什么电子

1207
00:44:07,000 --> 00:44:08,000
对对对

1208
00:44:08,000 --> 00:44:10,000
就是对一套东西

1209
00:44:10,000 --> 00:44:13,000
就反正就是基于 web 技术做了三款浏览器了

1210
00:44:13,000 --> 00:44:17,000
atom 是一个什么算是第一个正统吧

1211
00:44:17,000 --> 00:44:18,000
对那个 Nucleus

1212
00:44:18,000 --> 00:44:21,000
然后有那个 Visual Studio Code

1213
00:44:21,000 --> 00:44:24,000
最近是今年出的

1214
00:44:24,000 --> 00:44:24,000
还有什么 slack

1215
00:44:27,000 --> 00:44:28,000
slack 是那个什么

1216
00:44:28,000 --> 00:44:30,000
那个什么协同软件吧

1217
00:44:30,000 --> 00:44:31,000
啊

1218
00:44:31,000 --> 00:44:32,000
就是

1219
00:44:32,000 --> 00:44:35,000
它也是那个基于那个和谐的嘛

1220
00:44:35,000 --> 00:44:36,000
对一个也是怎么说

1221
00:44:36,000 --> 00:44:40,000
他自己好像叫自己 messagingapp

1222
00:44:40,000 --> 00:44:42,000
就是一个团队协作软件

1223
00:44:42,000 --> 00:44:45,000
但实际上他也是从那个 Electro 改的

1224
00:44:45,000 --> 00:44:49,000
我记得 Lawrence 还给咱俩发过 invitation 相的

1225
00:44:49,000 --> 00:44:49,000
我不能提

1226
00:44:49,000 --> 00:44:50,000
我有装

1227
00:44:50,000 --> 00:44:52,000
我有装给 slack

1228
00:44:52,000 --> 00:44:52,000
用了一下

1229
00:44:52,000 --> 00:44:53,000
就其实你一看就知道

1230
00:44:53,000 --> 00:44:54,000
哎

1231
00:44:54,000 --> 00:44:57,000
这其实是一个 webview 封装起来的壳子

1232
00:44:57,000 --> 00:45:01,000
壳子比那个过去 webview 可能做的要稍微原生一点

1233
00:45:01,000 --> 00:45:05,000
但是毕竟还是不改它那个本质嘛

1234
00:45:05,000 --> 00:45:05,000
对

1235
00:45:05,000 --> 00:45:07,000
因为当然这些本质是什么呢

1236
00:45:07,000 --> 00:45:12,000
比如说我先问一下 atom 1.0 能打开一个 20 兆的文件吗

1237
00:45:12,000 --> 00:45:14,000
不知道我还没装呢

1238
00:45:14,000 --> 00:45:17,000
其实那似乎还是不行是吧

1239
00:45:17,000 --> 00:45:17,000
ok

1240
00:45:17,000 --> 00:45:21,000
虽然也不太肯定有 20 兆的一个程序的代码

1241
00:45:21,000 --> 00:45:23,000
但是嗯吧

1242
00:45:23,000 --> 00:45:26,000
毕竟还是有这么一个限制的

1243
00:45:26,000 --> 00:45:27,000
嗯

1244
00:45:27,000 --> 00:45:31,000
然后这些东西都有一个问题

1245
00:45:31,000 --> 00:45:32,000
就是比较臃肿

1246
00:45:32,000 --> 00:45:33,000
对

1247
00:45:33,000 --> 00:45:34,000
起动比较占资源吧

1248
00:45:34,000 --> 00:45:35,000
应该说

1249
00:45:35,000 --> 00:45:36,000
对

1250
00:45:36,000 --> 00:45:39,000
虽然说现在什么硬件资源比较丰富

1251
00:45:39,000 --> 00:45:44,000
但是我总觉得哈就这么浪费好像也不是一个特别好的事

1252
00:45:44,000 --> 00:45:45,000
嗯

1253
00:45:45,000 --> 00:45:52,000
但做一个编辑器竟然要外装的内存才能跑起来

1254
00:45:52,000 --> 00:45:54,000
觉得就有点过了

1255
00:45:54,000 --> 00:45:55,000
是对

1256
00:45:55,000 --> 00:45:56,000
这就是为什么一些人呢

1257
00:45:56,000 --> 00:45:57,000
对

1258
00:45:57,000 --> 00:46:03,000
就是因为这个古老的用 C 写的编辑可以一直活到今天

1259
00:46:03,000 --> 00:46:07,000
什么 vi 啊 emax 啊还挺好的

1260
00:46:07,000 --> 00:46:08,000
哎

1261
00:46:08,000 --> 00:46:11,000
所以那个其实你看好这一类的东西吗

1262
00:46:11,000 --> 00:46:13,000
就是把那种 web 的技术跑在客户端

1263
00:46:13,000 --> 00:46:15,000
跑在那个原生的皮里面

1264
00:46:15,000 --> 00:46:18,000
然后假装自己是原生引用

1265
00:46:18,000 --> 00:46:19,000
嗯

1266
00:46:19,000 --> 00:46:24,000
其实 lawrence 前上一期节目里面说什么 webapp is for animals 的时候

1267
00:46:24,000 --> 00:46:25,000
我就想

1268
00:46:25,000 --> 00:46:26,000
哈哈

1269
00:46:26,000 --> 00:46:30,000
把这个 webapp 封装成一个原生 app 的这种东西

1270
00:46:30,000 --> 00:46:32,000
有用应该怎么讲

1271
00:46:32,000 --> 00:46:37,000
不这个我觉得跟 webapp 可能还就我们传统意义认为的 webapp 可能还不太一样

1272
00:46:37,000 --> 00:46:40,000
就是传统意义上 webapp 可能还是在浏览器里面

1273
00:46:40,000 --> 00:46:41,000
然后啊

1274
00:46:41,000 --> 00:46:44,000
他的其实我觉得这个界限主要在哪里

1275
00:46:44,000 --> 00:46:47,000
就是他的这个在离线状态下的行为

1276
00:46:47,000 --> 00:46:55,000
就起起码这些几个应用都是说他的本本初是为单机或者离线状态自己运行的

1277
00:46:55,000 --> 00:46:56,000
呃

1278
00:46:56,000 --> 00:46:57,000
这种情况设计的

1279
00:46:57,000 --> 00:47:04,000
他不牵涉到说很多 webapp 他没有做这个叫做 appcache 和这个 offline mode 的情况下

1280
00:47:04,000 --> 00:47:06,000
那我没完全没法用的那种情况嘛

1281
00:47:06,000 --> 00:47:08,000
就这个我觉得还是有很大区别

1282
00:47:08,000 --> 00:47:09,000
好吧

1283
00:47:09,000 --> 00:47:15,000
我觉得最大区别还是在于那个 chrome 就是在于那个外面的那个框架什么

1284
00:47:15,000 --> 00:47:16,000
你在用 webapp 的时候

1285
00:47:16,000 --> 00:47:19,000
你会有一个明确的心理预期

1286
00:47:19,000 --> 00:47:22,000
说我正在浏览器里面使用一个东西

1287
00:47:22,000 --> 00:47:25,000
这个东西不是 native 的不是 native 的不是 native 的

1288
00:47:25,000 --> 00:47:29,000
我觉得至少我会有这样一种默默的心理暗示

1289
00:47:29,000 --> 00:47:36,000
但是我觉得这也就是为什么 google 要把那个 chromeapps 单独拎出来

1290
00:47:36,000 --> 00:47:41,000
放成一个独立于浏览器之外的窗口

1291
00:47:41,000 --> 00:47:44,000
放在一个独立于浏览器之外的窗口里面

1292
00:47:44,000 --> 00:47:45,000
让用户来用

1293
00:47:45,000 --> 00:47:46,000
呃

1294
00:47:46,000 --> 00:47:48,000
我觉得他就是试图打破这种 chrome

1295
00:47:48,000 --> 00:47:51,000
但是效果也拖枷锁嘛

1296
00:47:51,000 --> 00:47:53,000
对效果还是不适合他

1297
00:47:53,000 --> 00:47:57,000
所以你看到像那个 atom 这种编辑器的时候

1298
00:47:57,000 --> 00:48:00,000
你用的时候你会觉得它是一个非原生的东西吗

1299
00:48:00,000 --> 00:48:02,000
我觉得这种感觉已经非常淡化

1300
00:48:02,000 --> 00:48:05,000
就因为我为了准备这一期的节目

1301
00:48:05,000 --> 00:48:09,000
又打开那个创业最新版的 virtual studio code

1302
00:48:09,000 --> 00:48:10,000
然后用一下

1303
00:48:10,000 --> 00:48:11,000
就感觉还是

1304
00:48:11,000 --> 00:48:15,000
你感觉不到他除了在那个 UI 风格上

1305
00:48:15,000 --> 00:48:16,000
呃

1306
00:48:23,000 --> 00:48:24,000
呃

1307
00:48:24,000 --> 00:48:26,000
跟你的系统格格不入之外啊

1308
00:48:26,000 --> 00:48:27,000
啊

1309
00:48:27,000 --> 00:48:29,000
你你感觉不到它是一个网页应用对不对

1310
00:48:29,000 --> 00:48:31,000
也格格不入也没有吧

1311
00:48:31,000 --> 00:48:32,000
我必须说

1312
00:48:32,000 --> 00:48:34,000
但他风格很不一样哦

1313
00:48:34,000 --> 00:48:35,000
哎

1314
00:48:35,000 --> 00:48:39,000
或者说我在用 virtual studio 的时候心里心里面就带了这个这样一个预期

1315
00:48:39,000 --> 00:48:40,000
我就说这是 virtual 做的东西

1316
00:48:40,000 --> 00:48:42,000
他他风格本来就不一样了

1317
00:48:42,000 --> 00:48:43,000
对他不可能一样

1318
00:48:43,000 --> 00:48:44,000
ok

1319
00:48:44,000 --> 00:48:54,000
他说回来风格风格跟原生的不一样的原生 app 风格跟默认的苹果风格不一样的原生 app 其实也很多

1320
00:48:54,000 --> 00:48:55,000
对嘛

1321
00:48:55,000 --> 00:49:07,000
所以其实说到底就是说 web 呃叫什么来着 web app 本身并不代表一个比较糟糕的体验是这个意思吗

1322
00:49:07,000 --> 00:49:08,000
就是他就是那些技术

1323
00:49:08,000 --> 00:49:12,000
我是这么觉得是可以实现出一个比较原生的体验的

1324
00:49:12,000 --> 00:49:14,000
当然说我们资源战略上这种事情先不讲哈

1325
00:49:14,000 --> 00:49:19,000
就是说在交互上还有包括这个给人的感觉上是可以做到比较好的

1326
00:49:19,000 --> 00:49:22,000
就之前就说这个 webapp 不好用

1327
00:49:22,000 --> 00:49:24,000
纯粹是因为他们做的不够好吗

1328
00:49:24,000 --> 00:49:25,000
ok

1329
00:49:25,000 --> 00:49:30,000
那我们可以呃暂时把这个浏览器的新闻放在一边

1330
00:49:30,000 --> 00:49:33,000
将来如果 virtual studio code 也出了 1.0 的话

1331
00:49:33,000 --> 00:49:35,000
我们再来后续报

1332
00:49:35,000 --> 00:49:36,000
哈哈哈哈

1333
00:49:36,000 --> 00:49:37,000
ok

1334
00:49:37,000 --> 00:49:39,000
好吧

1335
00:49:39,000 --> 00:49:41,000
那下一条新闻这是你你写的吧

1336
00:49:41,000 --> 00:49:46,000
对这个这个事情还挺有意思的

1337
00:49:46,000 --> 00:49:52,000
就是之前我们讲那个那个在阿里宫论美经常讲的那个叫 oculus

1338
00:49:52,000 --> 00:49:53,000
rift

1339
00:49:53,000 --> 00:49:55,000
那个 3 d 的虚拟现实眼镜嘛

1340
00:49:55,000 --> 00:49:59,000
然后他那个他那个开发者叫做 john karmic

1341
00:49:59,000 --> 00:50:01,000
这个大家都应该比较熟悉了哈

1342
00:50:01,000 --> 00:50:05,000
他在应该是上周还是前周吧

1343
00:50:05,000 --> 00:50:08,000
也也是差不多也是上黑二十几号的时候

1344
00:50:08,000 --> 00:50:10,000
在 google 那么讨论组里面

1345
00:50:10,000 --> 00:50:12,000
发了这么一条信息

1346
00:50:12,000 --> 00:50:15,000
就是他在琢磨着用 racket

1347
00:50:15,000 --> 00:50:20,000
racket 是一个 scheme 语言的一个实现吧

1348
00:50:20,000 --> 00:50:22,000
然后 scheme 是一种 lisp

1349
00:50:22,000 --> 00:50:25,000
他是 lisp one 对

1350
00:50:25,000 --> 00:50:28,000
然后他决定用这个 racket 或者是 scheme 这个语言

1351
00:50:28,000 --> 00:50:32,000
给这个 vr 环境里面做一个怎么说呢

1352
00:50:32,000 --> 00:50:34,000
就叫做教学语言吧

1353
00:50:34,000 --> 00:50:35,000
可以这么讲

1354
00:50:35,000 --> 00:50:37,000
教学环境也是

1355
00:50:37,000 --> 00:50:39,000
就是他叫做 scripting environment 就是

1356
00:50:39,000 --> 00:50:41,000
脚本环境什么意思呢

1357
00:50:41,000 --> 00:50:45,000
就是你可以在通过写这个 scheme 代码

1358
00:50:45,000 --> 00:50:48,000
在那个虚拟世界里面构建出一些组件出来

1359
00:50:48,000 --> 00:50:49,000
比如说可以看到那么大

1360
00:50:49,000 --> 00:50:50,000
就像大积木一样啊

1361
00:50:50,000 --> 00:50:51,000
做一些事情

1362
00:50:51,000 --> 00:50:55,000
然后他发了一篇非常长的文章去讲

1363
00:50:55,000 --> 00:50:57,000
他就是这么想

1364
00:50:57,000 --> 00:50:59,000
就为什么会选择这个 scheme

1365
00:50:59,000 --> 00:51:03,000
还有一些什么其他关于搭建这个环境的一些事情

1366
00:51:03,000 --> 00:51:05,000
我把那个连接放到那个 show notes 里面吧

1367
00:51:05,000 --> 00:51:07,000
但我觉得这个事情大家还挺好

1368
00:51:07,000 --> 00:51:08,000
挺有意思的

1369
00:51:08,000 --> 00:51:09,000
大家可以去看一下

1370
00:51:09,000 --> 00:51:11,000
具体内容不剧透了

1371
00:51:11,000 --> 00:51:12,000
对

1372
00:51:12,000 --> 00:51:15,000
我不知道你怎么想这件事

1373
00:51:15,000 --> 00:51:18,000
其实我闹综演第一想到的是

1374
00:51:18,000 --> 00:51:27,000
当初我在那个电视上面用 apple 2 和 logo 语言操纵那个海归的时候

1375
00:51:27,000 --> 00:51:29,000
那个场景

1376
00:51:29,000 --> 00:51:32,000
对差不多他想的应该是类似的

1377
00:51:32,000 --> 00:51:36,000
只不过是做的那个 vr 就是虚拟现实的环境里面去

1378
00:51:36,000 --> 00:51:38,000
对然后我想就是因为

1379
00:51:38,000 --> 00:51:42,000
logo 本身也是一个比较有意思的 functional program language

1380
00:51:42,000 --> 00:51:47,000
然后也许将来的孩子们可以带着 vr 眼镜

1381
00:51:47,000 --> 00:51:53,000
然后用一种这样类似于 logo 的教学式的 scripting language

1382
00:51:53,000 --> 00:51:56,000
在一个 3 D 的世界里面操纵 3 D 的海归

1383
00:51:56,000 --> 00:52:00,000
或者说一个海归这个 metaphor 这么一个东西

1384
00:52:00,000 --> 00:52:06,000
然后去画一些比如说 3 D 的分形图形啊或者是对画 whatever 什么东西

1385
00:52:06,000 --> 00:52:07,000
感觉很

1386
00:52:07,000 --> 00:52:09,000
exciting

1387
00:52:12,000 --> 00:52:14,000
所以所以这个你

1388
00:52:14,000 --> 00:52:15,000
你在 skim

1389
00:52:15,000 --> 00:52:19,000
用 skim 在虚拟环境里面画这种物件

1390
00:52:19,000 --> 00:52:20,000
你觉得会怎么样

1391
00:52:21,000 --> 00:52:23,000
应该蛮酸爽的吧

1392
00:52:24,000 --> 00:52:27,000
你记得上次我给你发过一个应该有两个连接吧

1393
00:52:27,000 --> 00:52:31,000
是 youtube 的视频就是有人在那个 vr 眼镜里面

1394
00:52:31,000 --> 00:52:36,000
就 vr 那个虚拟世界里面实时的通过编辑应该是 javascript

1395
00:52:37,000 --> 00:52:43,000
这个代码来去操纵里面的物件的那些虚拟的物件的变化

1396
00:52:43,000 --> 00:52:44,000
改变周遭环境

1397
00:52:44,000 --> 00:52:47,000
对对对你还记得那个视频吗

1398
00:52:47,000 --> 00:52:49,000
这个应该这个过程还是蛮好蛮有意思的

1399
00:52:49,000 --> 00:52:54,000
他那个不太好的一方面一点就是他要他要就如果他要改变这块

1400
00:52:54,000 --> 00:52:57,000
他的 reload 的那个他就得刷新那个脚本

1401
00:52:57,000 --> 00:52:59,000
然后整个整个重汇一遍嘛整个环境

1402
00:52:59,000 --> 00:53:00,000
嗯

1403
00:53:00,000 --> 00:53:03,000
然后我知道用 skim 的话他可不做到一个增量的一个修改

1404
00:53:03,000 --> 00:53:06,000
因为大家之前那个你知道 lisp

1405
00:53:06,000 --> 00:53:10,000
就是当他说的那个最牛逼的功能就是可以在他运行中动态修改代码

1406
00:53:10,000 --> 00:53:13,000
然后在部分的执行嘛对吧

1407
00:53:13,000 --> 00:53:15,000
对数据和代码不分家

1408
00:53:15,000 --> 00:53:19,000
没错没错所以这个还是蛮值得期待的

1409
00:53:19,000 --> 00:53:23,000
嗯嗯

1410
00:53:23,000 --> 00:53:27,000
对其实这里可以顺便说一下就是我今天在

1411
00:53:27,000 --> 00:53:30,000
the verge 还是什么上面的

1412
00:53:30,000 --> 00:53:36,000
不对 asktechnica 上面看到了一个微软最新的

1413
00:53:36,000 --> 00:53:37,000
关于 hololens 的视频

1414
00:53:37,000 --> 00:53:43,000
然后里面就有那个一个怎么说类似于第一人生视角的

1415
00:53:43,000 --> 00:53:48,000
呃告诉你说你戴上 hololens 之后能看到的这么一个区域

1416
00:53:48,000 --> 00:53:55,000
然后对然后我就感受到了 laurence 的戴了 hololens 之后那种失落感

1417
00:53:55,000 --> 00:54:01,000
就真的差挺多的就是之前我不知道你可是要戴的吗

1418
00:54:01,000 --> 00:54:04,000
对我我脑补的这个 hololens 是戴上之后

1419
00:54:04,000 --> 00:54:06,000
你可以全市场看到的

1420
00:54:06,000 --> 00:54:10,000
然后其实当人们对当人们告诉我说这个市场其实很窄的时候

1421
00:54:10,000 --> 00:54:13,000
我没有一个主播内向他到底有多窄

1422
00:54:13,000 --> 00:54:17,000
但只有只有直到看了那个视频之后我才意识到我靠原来这么窄

1423
00:54:17,000 --> 00:54:25,000
这这个差别就是我之前想象的是一个留一个一个显示器大到把你包起来

1424
00:54:25,000 --> 00:54:29,000
你你坐在一个属于你自己的 v 型天文球里面这种感觉

1425
00:54:29,000 --> 00:54:34,000
但实际上他只不过是把一台显示器摆到你面前就是在你眼镜前面

1426
00:54:34,000 --> 00:54:35,000
就大概这样的感觉

1427
00:54:36,000 --> 00:54:37,000
大概那么大的地方

1428
00:54:37,000 --> 00:54:40,000
这实在是差别太大了

1429
00:54:40,000 --> 00:54:43,000
是你再也不能说这个什么取消显示器

1430
00:54:43,000 --> 00:54:48,000
然后整瓶都是这个编辑器窗口的这么一个愉快的想法了

1431
00:54:48,000 --> 00:54:54,000
对我所以我我必须说我收回自己说老人死的那个什么期待太高了

1432
00:54:54,000 --> 00:54:58,000
这这这个实际的实验效果连我都受不了

1433
00:54:58,000 --> 00:55:00,000
哈哈哈哈

1434
00:55:00,000 --> 00:55:03,000
所以所以他有说是因为什么原因实现不了

1435
00:55:03,000 --> 00:55:05,000
是因为这个光学元件的物理限制

1436
00:55:06,000 --> 00:55:08,000
还是说只是因为为了降低

1437
00:55:08,000 --> 00:55:11,000
因为他那个是带在头上是整一体机吧

1438
00:55:11,000 --> 00:55:14,000
没有一个单独插线的外接的设备

1439
00:55:14,000 --> 00:55:16,000
所以他要考虑这个什么供电啊

1440
00:55:16,000 --> 00:55:17,000
续航的问题吧

1441
00:55:17,000 --> 00:55:20,000
对我觉得其实就是技术还不成熟

1442
00:55:20,000 --> 00:55:25,000
但是那个视频主要是宣传那个 hollowance 在一个医院里面的一些用力的

1443
00:55:25,000 --> 00:55:30,000
比如说医生可以拿 hollowance 直接看骨头断裂的情况

1444
00:55:30,000 --> 00:55:34,000
就可以你可以看到那个屋子中间有一个心脏

1445
00:55:34,000 --> 00:55:35,000
然后你现在跳

1446
00:55:35,000 --> 00:55:36,000
然后你可以跳

1447
00:55:36,000 --> 00:55:38,000
你转着看这个心脏跳动的状况之类的

1448
00:55:38,000 --> 00:55:40,000
所以他没有解释说市场为什么这么窄

1449
00:55:40,000 --> 00:55:42,000
他只是怎么说呢

1450
00:55:42,000 --> 00:55:44,000
可能觉得自己之前吹有点猛了

1451
00:55:44,000 --> 00:55:48,000
所以让我们用这个视频的让大家明白一下

1452
00:55:48,000 --> 00:55:50,000
其实看到的效果只不过是这样

1453
00:55:50,000 --> 00:55:53,000
你们不要那个就是期待太高的感觉

1454
00:55:53,000 --> 00:56:01,000
有一点点 expectation control management 的一个一个一个感觉

1455
00:56:01,000 --> 00:56:05,000
不远现在来做这个又有什么用呢

1456
00:56:05,000 --> 00:56:08,000
他之前自己把那个东西吹的那么好

1457
00:56:08,000 --> 00:56:11,000
当时第一次出视频的时候

1458
00:56:11,000 --> 00:56:13,000
他发布了两次其实

1459
00:56:13,000 --> 00:56:16,000
就是说感觉这个比喻要吹破了

1460
00:56:16,000 --> 00:56:19,000
这个比喻话太大对吧

1461
00:56:19,000 --> 00:56:21,000
现在看果然话太大了

1462
00:56:21,000 --> 00:56:22,000
不过还是好总比没有强

1463
00:56:22,000 --> 00:56:24,000
毕竟是第一代产品

1464
00:56:24,000 --> 00:56:27,000
所以让他们迭代两年再说吧

1465
00:56:27,000 --> 00:56:31,000
黑微软的话你们留到 it 工作里面说

1466
00:56:31,000 --> 00:56:33,000
没有我没黑经常有人说我黑

1467
00:56:33,000 --> 00:56:34,000
经常有人说我黑了

1468
00:56:34,000 --> 00:56:37,000
其实我给他们还是蛮高信心

1469
00:56:37,000 --> 00:56:38,000
我觉得你刚才的话

1470
00:56:38,000 --> 00:56:43,000
你刚才的话在软狗耳朵听起来就已经是非常不就是黑了

1471
00:56:43,000 --> 00:56:44,000
对好吧

1472
00:56:44,000 --> 00:56:48,000
那你倒是拿出一个让我们经验的东西来看

1473
00:56:48,000 --> 00:56:50,000
他们会说

1474
00:56:50,000 --> 00:56:51,000
blah blah

1475
00:56:51,000 --> 00:56:52,000
黑科技 blah blah

1476
00:56:52,000 --> 00:56:55,000
微软做的事怎能叫 blah blah

1477
00:56:55,000 --> 00:56:58,000
从来都停留在什么 microsoft research 里面

1478
00:56:58,000 --> 00:56:59,000
不会拿出来的

1479
00:56:59,000 --> 00:57:01,000
那有什么用呢

1480
00:57:01,000 --> 00:57:02,000
嗯

1481
00:57:02,000 --> 00:57:04,000
不过其实从那个我

1482
00:57:04,000 --> 00:57:06,000
从那个完全从那个完全度来讲

1483
00:57:06,000 --> 00:57:08,000
我觉得其实这个已经蛮高的了

1484
00:57:08,000 --> 00:57:10,000
就是 hollow lens 一代嘛

1485
00:57:10,000 --> 00:57:11,000
嗯

1486
00:57:11,000 --> 00:57:12,000
对吧

1487
00:57:12,000 --> 00:57:14,000
所以其实我我还是挺挺乐观的

1488
00:57:14,000 --> 00:57:20,000
就是到他们在就希望他们能够保持这个速度往前去迭代

1489
00:57:20,000 --> 00:57:21,000
好

1490
00:57:21,000 --> 00:57:23,000
ok 那我们接下来可以进入正题了

1491
00:57:23,000 --> 00:57:26,000
今天的话题是 debug

1492
00:57:26,000 --> 00:57:29,000
用中文说就是除错于调试

1493
00:57:29,000 --> 00:57:31,000
嗯

1494
00:57:31,000 --> 00:57:34,000
我不知道 real 你你你经常 debug 吗

1495
00:57:34,000 --> 00:57:36,000
或者说你觉得 debug

1496
00:57:36,000 --> 00:57:40,000
你觉得你写代码的时候里面是 debug 时间多还是

1497
00:57:40,000 --> 00:57:42,000
真正写代码的时间多

1498
00:57:42,000 --> 00:57:45,000
嗯

1499
00:57:45,000 --> 00:57:47,000
还好吧

1500
00:57:47,000 --> 00:57:49,000
我 debug 时间不算多

1501
00:57:49,000 --> 00:57:52,000
对可能是两三成的样子

1502
00:57:52,000 --> 00:57:54,000
两三成

1503
00:57:54,000 --> 00:57:57,000
但是主要是因为我写的东西也不是特别复杂

1504
00:57:57,000 --> 00:57:58,000
就还还凑合

1505
00:57:58,000 --> 00:58:00,000
你太谦虚了

1506
00:58:00,000 --> 00:58:02,000
你可以直接说你写的东西是 bug free

1507
00:58:02,000 --> 00:58:03,000
哈哈哈

1508
00:58:03,000 --> 00:58:05,000
就是什么

1509
00:58:05,000 --> 00:58:12,000
就呃前两天我在呃一个网站叫什么

1510
00:58:12,000 --> 00:58:14,000
讲什么呢

1511
00:58:14,000 --> 00:58:15,000
就讲白板编程啊

1512
00:58:15,000 --> 00:58:20,000
讲面试应该是他讲说呃应该怎样去做白板面试

1513
00:58:20,000 --> 00:58:23,000
我们回头会把这个链接放在 show notes 里面

1514
00:58:23,000 --> 00:58:28,000
但是我印象里面比较我印象比较深的一句话就是他里面说呃程序员可以分为两种

1515
00:58:28,000 --> 00:58:31,000
一种是会先确认前条件

1516
00:58:31,000 --> 00:58:32,000
中止条件

1517
00:58:32,000 --> 00:58:33,000
编辑条件

1518
00:58:33,000 --> 00:58:35,000
以及不变的那一部分

1519
00:58:35,000 --> 00:58:37,000
然后写入正确的代码

1520
00:58:37,000 --> 00:58:40,000
呃另外一种是先编写代码

1521
00:58:40,000 --> 00:58:45,000
然后通过各种用力调试测试对程序进行调整

1522
00:58:45,000 --> 00:58:48,000
最后得到似乎正确的代码

1523
00:58:48,000 --> 00:58:50,000
就是可以分开不是 tdd 吗

1524
00:58:50,000 --> 00:58:51,000
哈哈哈

1525
00:58:51,000 --> 00:58:53,000
tdd 是哪一种

1526
00:58:53,000 --> 00:58:54,000
第一种还是第二种

1527
00:58:54,000 --> 00:58:55,000
就是后者

1528
00:58:55,000 --> 00:58:56,000
喂

1529
00:58:56,000 --> 00:58:58,000
第二种他说先编写代码

1530
00:58:58,000 --> 00:58:59,000
然后通过用力

1531
00:58:59,000 --> 00:59:00,000
嗯

1532
00:59:00,000 --> 00:59:01,000
嗯

1533
00:59:01,000 --> 00:59:03,000
tdd 应该是第一种

1534
00:59:03,000 --> 00:59:08,000
对 tdd 应该是一个一个的去确立呃编辑的

1535
00:59:08,000 --> 00:59:09,000
啊

1536
00:59:09,000 --> 00:59:10,000
对吧

1537
00:59:10,000 --> 00:59:16,000
然后他里面说他个人估计呃保守估计前者的开发效率至少是后者的十倍

1538
00:59:16,000 --> 00:59:20,000
因为前者不需要浪费大量时间在编码调试编码

1539
00:59:20,000 --> 00:59:23,000
这个极其耗时的循环上

1540
00:59:23,000 --> 00:59:24,000
我觉得说的有用到

1541
00:59:24,000 --> 00:59:25,000
写代码之前

1542
00:59:25,000 --> 00:59:28,000
敲键盘之前先动脑子想是不是

1543
00:59:28,000 --> 00:59:29,000
对

1544
00:59:29,000 --> 00:59:30,000
就包括在

1545
00:59:30,000 --> 00:59:35,000
一些刚学变成的人身上也会发现一个问题

1546
00:59:35,000 --> 00:59:36,000
就是发现一种现象

1547
00:59:36,000 --> 00:59:38,000
就是他认为啊

1548
00:59:38,000 --> 00:59:41,000
写代码的速度跟敲键盘的速度相关

1549
00:59:41,000 --> 00:59:43,000
其实并不是这样

1550
00:59:43,000 --> 00:59:44,000
就呃

1551
00:59:44,000 --> 00:59:45,000
我可以举两个例子

1552
00:59:45,000 --> 00:59:48,000
一个是我前啊

1553
00:59:48,000 --> 00:59:51,000
上上家公司里面的一个

1554
00:59:51,000 --> 00:59:53,000
60 多岁的程序员

1555
00:59:53,000 --> 00:59:58,000
他可能是从 callball 时代就写写程序

1556
00:59:58,000 --> 01:00:00,000
然后到 60 多岁还在做

1557
01:00:00,000 --> 01:00:02,000
那个高级顾问

1558
01:00:02,000 --> 01:00:03,000
众所周知

1559
01:00:03,000 --> 01:00:05,000
德国的退休年龄是 67 岁

1560
01:00:05,000 --> 01:00:08,000
所以以 60 岁的高龄还在写程序

1561
01:00:08,000 --> 01:00:11,000
然后他和很多德国人一样

1562
01:00:11,000 --> 01:00:13,000
只会用两个指头敲键板

1563
01:00:13,000 --> 01:00:14,000
你你很难想象吧

1564
01:00:14,000 --> 01:00:16,000
一个写了 30 年程序的人

1565
01:00:16,000 --> 01:00:18,000
只会用两个指头敲键板

1566
01:00:18,000 --> 01:00:20,000
但他的效率不比任何人慢

1567
01:00:20,000 --> 01:00:23,000
或者说他写出来的编码的

1568
01:00:23,000 --> 01:00:28,000
他写出来的程序的可靠性和效率并不比任何人差

1569
01:00:28,000 --> 01:00:29,000
嗯

1570
01:00:29,000 --> 01:00:30,000
然后反过来有另外一个意思

1571
01:00:30,000 --> 01:00:32,000
就是我上上家公司里面有一个

1572
01:00:32,000 --> 01:00:33,000
呃

1573
01:00:33,000 --> 01:00:35,000
啊

1574
01:00:35,000 --> 01:00:37,000
就不透露他的肤色了吧

1575
01:00:37,000 --> 01:00:40,000
但就有这么一个朋友

1576
01:00:40,000 --> 01:00:41,000
他经常会说

1577
01:00:41,000 --> 01:00:42,000
呃

1578
01:00:42,000 --> 01:00:43,000
每天开会的时候他会说啊

1579
01:00:43,000 --> 01:00:45,000
我还有一点点就完了

1580
01:00:45,000 --> 01:00:47,000
我 80%已经写完了

1581
01:00:47,000 --> 01:00:49,000
只剩下 20%只是一些

1582
01:00:49,000 --> 01:00:50,000
啊

1583
01:00:50,000 --> 01:00:51,000
细节需要调整一下

1584
01:00:51,000 --> 01:00:53,000
但是如果你仔细去看他这个

1585
01:00:53,000 --> 01:00:56,000
细节的调整到底是在干嘛的时候

1586
01:00:56,000 --> 01:00:58,000
他其实在大量的改变自己的代码

1587
01:00:58,000 --> 01:00:59,000
因为

1588
01:00:59,000 --> 01:01:00,000
他这个东西虽然写的很快

1589
01:01:00,000 --> 01:01:01,000
但根本就是写错了

1590
01:01:01,000 --> 01:01:02,000
好吧

1591
01:01:02,000 --> 01:01:07,000
所以这所谓的 20%20%其实占用了他整个开发的 80%的时间

1592
01:01:07,000 --> 01:01:09,000
他总觉得自己可能明天就可以写完

1593
01:01:09,000 --> 01:01:13,000
但其实明天会发现卧槽还是要后天和大午

1594
01:01:13,000 --> 01:01:14,000
嗯

1595
01:01:14,000 --> 01:01:15,000
对

1596
01:01:15,000 --> 01:01:19,000
所以我觉得 real 其实你刚才暗示了你是第一种

1597
01:01:19,000 --> 01:01:20,000
哈哈

1598
01:01:20,000 --> 01:01:21,000
好吧

1599
01:01:21,000 --> 01:01:23,000
我我我我觉得我是

1600
01:01:23,000 --> 01:01:25,000
就希望我希望是第一种吧

1601
01:01:25,000 --> 01:01:28,000
不知道这是不是真实的尽量呗

1602
01:01:28,000 --> 01:01:30,000
就有这么一个

1603
01:01:30,000 --> 01:01:32,000
就刚刚我说那个写代码这些先先弄脑子

1604
01:01:32,000 --> 01:01:34,000
但这个不是说来玩玩

1605
01:01:34,000 --> 01:01:35,000
就是

1606
01:01:35,000 --> 01:01:40,000
就我看到有很多人写代码的时候先反正先敲击行再说

1607
01:01:40,000 --> 01:01:42,000
再来想怎么弄啊怎么改

1608
01:01:42,000 --> 01:01:47,000
其实我看到很多那种所谓大神级程序员其实他是要先

1609
01:01:47,000 --> 01:01:48,000
先写代码

1610
01:01:48,000 --> 01:01:52,000
他才像好久好久在脑子里面构建一个大框架

1611
01:01:52,000 --> 01:01:55,000
步骤怎么样一些有些什么样至少要注意的点

1612
01:01:55,000 --> 01:01:56,000
他会想得比较清楚

1613
01:01:56,000 --> 01:01:57,000
然后才会动笔

1614
01:01:57,000 --> 01:02:01,000
再动动笔动动键盘慢慢慢慢的去敲

1615
01:02:01,000 --> 01:02:05,000
对对其实这跟写作文差不多写文章差不多吧

1616
01:02:05,000 --> 01:02:10,000
就是并不是说你要写东西就是你要一定要坐在书桌前面

1617
01:02:10,000 --> 01:02:11,000
然后打开稿纸

1618
01:02:11,000 --> 01:02:12,000
嗯

1619
01:02:12,000 --> 01:02:16,000
就像你要写程序并不是一定要先赶紧打开你的 ID

1620
01:02:16,000 --> 01:02:17,000
然后新建一个项目

1621
01:02:17,000 --> 01:02:21,000
然后写个写个妹函数出来

1622
01:02:21,000 --> 01:02:22,000
然后盯着他发呆

1623
01:02:22,000 --> 01:02:23,000
你要想写什么东西

1624
01:02:23,000 --> 01:02:26,000
你先在各种各样的时候去想你要写什么东西

1625
01:02:26,000 --> 01:02:29,000
洗澡的时候刷牙的时候走路的时候

1626
01:02:29,000 --> 01:02:31,000
跟女朋友聊天的时候

1627
01:02:31,000 --> 01:02:34,000
但是最后这种是非常不推荐的

1628
01:02:34,000 --> 01:02:35,000
我吃过苦好了

1629
01:02:35,000 --> 01:02:40,000
在这个时候你都已经可以在构想你要写什么了

1630
01:02:40,000 --> 01:02:43,000
然后等到你真正有一定把握的时候再出来写

1631
01:02:43,000 --> 01:02:45,000
这样要比你直接上来就劈一啪敲键盘

1632
01:02:45,000 --> 01:02:46,000
其实效率要高

1633
01:02:46,000 --> 01:02:47,000
我觉得

1634
01:02:47,000 --> 01:02:48,000
没错

1635
01:02:48,000 --> 01:02:53,000
所以以后如果比如说我就开一间软件公司是吧

1636
01:02:53,000 --> 01:02:55,000
要在除了把握软件公司之外

1637
01:02:55,000 --> 01:02:58,000
除了标配那些什么办公桌什么椅子之外

1638
01:02:58,000 --> 01:03:01,000
还得做一个冥想室

1639
01:03:01,000 --> 01:03:07,000
就像那个 CC 城曾经晒过他们公司有那个 power net 椅子

1640
01:03:07,000 --> 01:03:08,000
你可以躺着去

1641
01:03:08,000 --> 01:03:12,000
睡觉的时候你可以想程序吗

1642
01:03:12,000 --> 01:03:13,000
不能啊

1643
01:03:13,000 --> 01:03:14,000
睡着睡着了

1644
01:03:14,000 --> 01:03:16,000
得冥想在那打坐

1645
01:03:16,000 --> 01:03:20,000
我相信

1646
01:03:20,000 --> 01:03:24,000
但我是觉得至少我写成我写构思程序的时候

1647
01:03:24,000 --> 01:03:26,000
基本上都是在动的时候

1648
01:03:26,000 --> 01:03:28,000
就是身体一定要在做什么事情

1649
01:03:28,000 --> 01:03:33,000
比如说开车或者是骑自行车或者是走路之类的

1650
01:03:33,000 --> 01:03:35,000
就躺在一地方静静的待着

1651
01:03:35,000 --> 01:03:38,000
我是想不好事情

1652
01:03:38,000 --> 01:03:41,000
所以其实从这个角度来讲

1653
01:03:41,000 --> 01:03:44,000
我觉得什么 literate programming

1654
01:03:44,000 --> 01:03:45,000
这怎么讲

1655
01:03:45,000 --> 01:03:47,000
文化变成又来了

1656
01:03:47,000 --> 01:03:48,000
挺好的

1657
01:03:48,000 --> 01:03:52,000
它可以强迫你在写第一行代码之前

1658
01:03:52,000 --> 01:03:53,000
先把什么前因后果

1659
01:03:53,000 --> 01:03:55,000
背景

1660
01:03:55,000 --> 01:03:57,000
对先把整体思路讲写出来

1661
01:03:57,000 --> 01:04:00,000
然后你再顺着一个思路写一下代码

1662
01:04:00,000 --> 01:04:01,000
顺着一个思路写一下代码

1663
01:04:01,000 --> 01:04:02,000
这样

1664
01:04:02,000 --> 01:04:03,000
对

1665
01:04:03,000 --> 01:04:06,000
但是不管怎么说

1666
01:04:06,000 --> 01:04:09,000
或者说不管多强悍的程序员

1667
01:04:09,000 --> 01:04:14,000
他写出来程序终究是没有办法避免会有吧

1668
01:04:14,000 --> 01:04:16,000
所以这时候就需要 debar

1669
01:04:16,000 --> 01:04:20,000
我们不妨先来解释一下 debar 这个词是怎么来的

1670
01:04:20,000 --> 01:04:23,000
其实有一个美丽的都市传播

1671
01:04:23,000 --> 01:04:25,000
我相信可能大部分听众

1672
01:04:25,000 --> 01:04:27,000
此时也都会说出来

1673
01:04:27,000 --> 01:04:32,000
debar 是曾经有这么一位女程序员

1674
01:04:32,000 --> 01:04:35,000
她的名字叫做 Grace Hopper

1675
01:04:35,000 --> 01:04:40,000
格丽丝霍普这么一位美国海军准将

1676
01:04:40,000 --> 01:04:42,000
准将程序员

1677
01:04:42,000 --> 01:04:49,000
她曾经在 1950 年代的时候开发

1678
01:04:49,000 --> 01:04:52,000
应该是哈佛的一个

1679
01:04:52,000 --> 01:04:55,000
大型计算机项目的时候

1680
01:04:55,000 --> 01:04:57,000
去检测一个计算机的故障

1681
01:04:57,000 --> 01:05:00,000
然后她发现故障的原因是

1682
01:05:00,000 --> 01:05:02,000
一个鹅子

1683
01:05:02,000 --> 01:05:06,000
一只鹅子卡在一个继电器上面

1684
01:05:06,000 --> 01:05:09,000
然后这个继电器没有办法正确的被放下来

1685
01:05:09,000 --> 01:05:11,000
就是接触不良了

1686
01:05:11,000 --> 01:05:14,000
因此导致了整个计算机不工作

1687
01:05:14,000 --> 01:05:16,000
然后她把这个鹅子取出来

1688
01:05:16,000 --> 01:05:20,000
然后把这个鹅子粘在了那一天的这个故障记录上

1689
01:05:20,000 --> 01:05:22,000
然后写说这只 Moth

1690
01:05:22,000 --> 01:05:24,000
导致了整个继续故障

1691
01:05:24,000 --> 01:05:27,000
然后我 literally 把它 debug 了

1692
01:05:27,000 --> 01:05:29,000
这是 debug 这个词的由来

1693
01:05:29,000 --> 01:05:32,000
真正的除虫

1694
01:05:32,000 --> 01:05:38,000
但实际上虽然 Grace Hopper 使用了 debug 这个词

1695
01:05:38,000 --> 01:05:43,000
debug 这个词作为排除故障的纸带

1696
01:05:43,000 --> 01:05:47,000
早在 1940 年代左右就已经在其他领域

1697
01:05:47,000 --> 01:05:49,000
尤其是电子和机械领域

1698
01:05:49,000 --> 01:05:51,000
其实已经被人使用过了

1699
01:05:51,000 --> 01:05:57,000
所以 debug 这个词其实并不是 Grace Hopper 的发明

1700
01:05:57,000 --> 01:06:04,000
然后 debug 这个词真正成为一个排除错误的一个同义词

1701
01:06:04,000 --> 01:06:06,000
也是一直要到 1960 年代左右

1702
01:06:06,000 --> 01:06:09,000
才真正的在计算机界推广开来

1703
01:06:09,000 --> 01:06:13,000
就是我记得好像是 Wikipedia 那种文章说

1704
01:06:13,000 --> 01:06:19,000
直到 65 年还是哪一年才有一篇论文的第一页

1705
01:06:19,000 --> 01:06:20,000
直接使用了 debug 这个词

1706
01:06:20,000 --> 01:06:23,000
而且没有注视说这个没有加引号

1707
01:06:23,000 --> 01:06:25,000
也没有注视这个词到底什么意思

1708
01:06:25,000 --> 01:06:26,000
所以直到这个时候

1709
01:06:26,000 --> 01:06:29,000
debug 才真正的进入了计算机界的主流

1710
01:06:29,000 --> 01:06:33,000
OK 我们又考了一下谷

1711
01:06:33,000 --> 01:06:35,000
对

1712
01:06:35,000 --> 01:06:40,000
不如说一说你遇到过的比较有意思的吧

1713
01:06:40,000 --> 01:06:45,000
或者说你遇到过什么比较困扰你

1714
01:06:45,000 --> 01:06:47,000
或者比较有意思的吧

1715
01:06:47,000 --> 01:06:49,000
就上次我们那个串台啊

1716
01:06:50,000 --> 01:06:54,000
对 IPN 串台吧也是一个比较有意思的吧

1717
01:06:54,000 --> 01:06:56,000
我记得很多人猜测过

1718
01:06:56,000 --> 01:06:59,000
为什么我们要换很多

1719
01:06:59,000 --> 01:07:03,000
换了很多次 podcast 的 server

1720
01:07:03,000 --> 01:07:05,000
然后为什么要折腾来折腾去

1721
01:07:05,000 --> 01:07:07,000
有时候支持 podcast 勾端

1722
01:07:07,000 --> 01:07:09,000
有时候不支持 podcast 勾端

1723
01:07:09,000 --> 01:07:12,000
其实都是我们在这种解决这个 bug

1724
01:07:12,000 --> 01:07:15,000
不明白为什么会串台

1725
01:07:15,000 --> 01:07:18,000
对 然后为什么不能解决这个 bug

1726
01:07:18,000 --> 01:07:20,000
因为我们没有办法重现它

1727
01:07:20,000 --> 01:07:22,000
这个是一个很重要的事情

1728
01:07:22,000 --> 01:07:25,000
就是说你要去除一只虫

1729
01:07:25,000 --> 01:07:27,000
首先你得看到这只虫对吧

1730
01:07:27,000 --> 01:07:30,000
你得找到这个虫在哪是怎么发生的

1731
01:07:30,000 --> 01:07:32,000
一个生成的机制是怎么样子

1732
01:07:32,000 --> 01:07:34,000
什么条件下会触发它对吧

1733
01:07:34,000 --> 01:07:38,000
然后凡是那些你想找找不着

1734
01:07:38,000 --> 01:07:39,000
不知道怎么出发

1735
01:07:39,000 --> 01:07:41,000
不知道什么时候出现

1736
01:07:41,000 --> 01:07:42,000
你没办法重现那样的东西

1737
01:07:42,000 --> 01:07:44,000
我们基本上叫做 phantom bug 对吧

1738
01:07:44,000 --> 01:07:46,000
就是隐虫

1739
01:07:46,000 --> 01:07:47,000
隐虫

1740
01:07:47,000 --> 01:07:51,000
那个串台的 bug 之所以那么久都没有找到原因

1741
01:07:51,000 --> 01:07:53,000
一个最主要的问题就是

1742
01:07:53,000 --> 01:07:55,000
我们两个都没有办法重

1743
01:07:55,000 --> 01:07:59,000
不应该是我们三都没办法重现它

1744
01:07:59,000 --> 01:08:03,000
因为这个东西是要在特定的运营商的网络里面

1745
01:08:03,000 --> 01:08:06,000
就是长城宽带了

1746
01:08:06,000 --> 01:08:07,000
才会出现

1747
01:08:07,000 --> 01:08:11,000
然后偶尔在某些这个

1748
01:08:11,000 --> 01:08:13,000
这个什么移动啊

1749
01:08:13,000 --> 01:08:15,000
电信的运营商里面偶尔也会出现

1750
01:08:15,000 --> 01:08:16,000
但是好像

1751
01:08:16,000 --> 01:08:21,000
这就是跟那个电信或者这个他们的网络的结构有点关系的

1752
01:08:21,000 --> 01:08:25,000
因为它似乎不是一个全国统一的一个结构

1753
01:08:25,000 --> 01:08:27,000
所以就比较麻烦了

1754
01:08:27,000 --> 01:08:28,000
没错

1755
01:08:28,000 --> 01:08:33,000
就有人定义过说 debug 的过程其实就是

1756
01:08:33,000 --> 01:08:38,000
it's a process of confirming the many things that you believe are true

1757
01:08:38,000 --> 01:08:41,000
until you find one which is not true

1758
01:08:41,000 --> 01:08:43,000
就我们首先有两个障碍

1759
01:08:43,000 --> 01:08:44,000
第一个是我们

1760
01:08:44,000 --> 01:08:45,000
呃

1761
01:08:45,000 --> 01:08:46,000
呃

1762
01:08:46,000 --> 01:08:50,000
我们 believe true 的东西实在是太多了

1763
01:08:50,000 --> 01:08:51,000
呃

1764
01:08:51,000 --> 01:08:55,000
另外第二个就是我们没有办法通过一次

1765
01:08:55,000 --> 01:08:59,000
事例就就决定说这个东西肯定是 true

1766
01:08:59,000 --> 01:09:02,000
就我们自己都下载过了无数次 podcast

1767
01:09:02,000 --> 01:09:05,000
但是没有一次是可以呃

1768
01:09:05,000 --> 01:09:06,000
重现这个办法

1769
01:09:06,000 --> 01:09:08,000
因为对我而且对

1770
01:09:08,000 --> 01:09:10,000
而且即便你是用长城宽带

1771
01:09:10,000 --> 01:09:12,000
你也不是每次都会遇到这个办法

1772
01:09:12,000 --> 01:09:14,000
这是最让人头疼的一个问题

1773
01:09:15,000 --> 01:09:16,000
没错

1774
01:09:16,000 --> 01:09:17,000
yeah

1775
01:09:17,000 --> 01:09:18,000
呃

1776
01:09:18,000 --> 01:09:19,000
呃

1777
01:09:19,000 --> 01:09:22,000
我来说我遇到过一个比较痛苦的 bug 了

1778
01:09:22,000 --> 01:09:23,000
而且

1779
01:09:23,000 --> 01:09:24,000
ok

1780
01:09:24,000 --> 01:09:28,000
很遗憾的是这个 bug 直到今天我都没有解决它

1781
01:09:28,000 --> 01:09:29,000
我就离职了

1782
01:09:29,000 --> 01:09:30,000
呃

1783
01:09:30,000 --> 01:09:31,000
哈哈哈

1784
01:09:31,000 --> 01:09:32,000
来说一下

1785
01:09:32,000 --> 01:09:36,000
这是我心头心心里的一个一个一个一个一个痛

1786
01:09:36,000 --> 01:09:37,000
嗯

1787
01:09:37,000 --> 01:09:41,000
我的上一家公司是做博彩的

1788
01:09:41,000 --> 01:09:42,000
嗯

1789
01:09:42,000 --> 01:09:43,000
不用不用说这么高雅就是赌球了

1790
01:09:43,000 --> 01:09:44,000
嗯

1791
01:09:44,000 --> 01:09:45,000
对是赌球了

1792
01:09:45,000 --> 01:09:52,000
然后赌球的公司比较重视你的一件事情就是客户的呃就怎么说呢

1793
01:09:52,000 --> 01:09:57,000
就是客户会把钱存在我们公司网站上给你

1794
01:09:57,000 --> 01:09:58,000
嗯

1795
01:09:58,000 --> 01:10:09,000
但是有时候有一些使用 ios 设备的 chrome 用户就是如果一个用户使用 ios 上面的 chrome 访问我们公司的网站

1796
01:10:09,000 --> 01:10:11,000
然后登录我们公司的服务器

1797
01:10:11,000 --> 01:10:12,000
嗯

1798
01:10:12,000 --> 01:10:18,000
大概有呃万分之一到十万分之一的概率他会看到另外一个人的账户

1799
01:10:18,000 --> 01:10:19,000
啊

1800
01:10:19,000 --> 01:10:22,000
这是非常非常非常非常恐怖的一件事情不是吗

1801
01:10:22,000 --> 01:10:26,000
就你你登录了你自己的账号

1802
01:10:26,000 --> 01:10:27,000
结果看到另外一个人账号

1803
01:10:27,000 --> 01:10:30,000
此时你就会难道你心里不会产生一丝恐慌

1804
01:10:30,000 --> 01:10:33,000
就是卧槓的我的账户不是也被别人用了吗

1805
01:10:33,000 --> 01:10:34,000
然后

1806
01:10:34,000 --> 01:10:35,000
对啊

1807
01:10:35,000 --> 01:10:36,000
对啊

1808
01:10:36,000 --> 01:10:37,000
还没有钱哎

1809
01:10:37,000 --> 01:10:38,000
对啊

1810
01:10:38,000 --> 01:10:39,000
对啊

1811
01:10:39,000 --> 01:10:40,000
对啊

1812
01:10:40,000 --> 01:10:41,000
对啊

1813
01:10:41,000 --> 01:10:42,000
而且里面有钱哎

1814
01:10:42,000 --> 01:10:43,000
对而且里面有钱

1815
01:10:43,000 --> 01:10:45,000
而且而且有些人是

1816
01:10:45,000 --> 01:10:47,000
你登录哪天都换了人家的银行

1817
01:10:47,000 --> 01:10:48,000
哎

1818
01:10:48,000 --> 01:10:49,000
这个银行也经常出现

1819
01:10:49,000 --> 01:10:51,000
说什么去那个 atm 机取钱

1820
01:10:51,000 --> 01:10:55,000
你看操插进去看存款后面有八个零

1821
01:10:55,000 --> 01:10:57,000
对赶紧全都存出来对吧

1822
01:10:57,000 --> 01:10:58,000
赶紧全都取出来的

1823
01:10:58,000 --> 01:11:00,000
但这是非常恐怖的一个吧

1824
01:11:00,000 --> 01:11:01,000
然后

1825
01:11:02,000 --> 01:11:03,000
但是

1826
01:11:03,000 --> 01:11:09,000
我其实遇到了跟 ipn 创产问题一样的一样的困境就是我们我自己没有办法重来这个吧

1827
01:11:09,000 --> 01:11:10,000
只是有

1828
01:11:10,000 --> 01:11:11,000
大概

1830
01:11:41,000 --> 01:11:42,000
这个账户

1831
01:11:42,000 --> 01:11:43,000
呃

1832
01:11:43,000 --> 01:11:46,000
他们的登录过程有什么异常之处也找不到

1833
01:11:46,000 --> 01:11:47,000
而且

1834
01:11:47,000 --> 01:11:48,000
OK

1835
01:11:48,000 --> 01:11:52,000
而且比较悲惨的是这些人一旦把这个 bugbug 抱进来

1836
01:11:52,000 --> 01:11:55,000
我们就必须立刻先把他的公司先把他账户给封了

1837
01:11:55,000 --> 01:11:56,000
因为

1838
01:11:56,000 --> 01:11:57,000
说话他又

1839
01:11:57,000 --> 01:11:58,000
对

1840
01:11:58,000 --> 01:12:00,000
就听说他又再一次登录同一张

1841
01:12:00,000 --> 01:12:03,000
然后

1842
01:12:03,000 --> 01:12:08,000
一个可能的猜测是这个 bug 是由呃我们的 sessionreplication server 引起的

1843
01:12:08,000 --> 01:12:10,000
因为服务器是一个集群吧

1844
01:12:10,000 --> 01:12:11,000
呃

1845
01:12:11,000 --> 01:12:12,000
嗯

1846
01:12:12,000 --> 01:12:13,000
你要在这个服务器上登录

1847
01:12:13,000 --> 01:12:18,000
然后你的 session 信息需要被复制到另外一个服务器上的话

1848
01:12:18,000 --> 01:12:20,000
需要一个专门的 dedicated session

1849
01:12:20,000 --> 01:12:22,000
sessionreplication service

1850
01:12:22,000 --> 01:12:25,000
然后这个 service 是使用了一个比较老旧的

1851
01:12:26,000 --> 01:12:27,000
呃

1852
01:12:27,000 --> 01:12:28,000
那个库叫什么

1853
01:12:29,000 --> 01:12:32,000
一直想起来的是一个 java 的 sessionreplication

1854
01:12:32,000 --> 01:12:34,000
一个 java 的 in-memory database 的库

1855
01:12:34,000 --> 01:12:36,000
然后我们怀疑是这个库有问题

1856
01:12:36,000 --> 01:12:39,000
然后专门请了这个库的德德伯的

1857
01:12:39,000 --> 01:12:44,000
这个库的公司德国分部的人来排查也没弄出来

1858
01:12:44,000 --> 01:12:45,000
然后又把

1859
01:12:45,000 --> 01:12:48,000
又然后又在一个呃

1860
01:12:48,000 --> 01:12:52,000
用户报这个 bug 的时候把整个 server 的那个 hipdump 弄下来

1861
01:12:52,000 --> 01:12:54,000
然后开始分析

1862
01:12:54,000 --> 01:12:55,000
也没分析出来

1863
01:12:55,000 --> 01:12:58,000
最后实在实在实在实在实在没有办法

1864
01:12:58,000 --> 01:12:59,000
我出了一个搜主意

1865
01:12:59,000 --> 01:13:00,000
就是呃

1866
01:13:00,000 --> 01:13:04,000
嗅探那个用户的浏览器 agent

1867
01:13:04,000 --> 01:13:07,000
如果发现他是在 ios 上使用 chrome

1868
01:13:07,000 --> 01:13:08,000
就不让他用我们的网站上使用 chrome

1869
01:13:08,000 --> 01:13:09,000
就不让他用我们的网站上使用 chrome

1870
01:13:09,000 --> 01:13:10,000
就不让他用我们的网站上使用 chrome

1871
01:13:10,000 --> 01:13:11,000
说请你使用 safari

1872
01:13:11,000 --> 01:13:12,000
因为 safari 没有这个问题

1873
01:13:12,000 --> 01:13:13,000
呃

1874
01:13:13,000 --> 01:13:15,000
所以 safari 用户没有出现过这个问题

1875
01:13:15,000 --> 01:13:20,000
只有 i 就是 chrome 和 ios 有这么一个问题

1876
01:13:20,000 --> 01:13:23,000
对 chrome 上的 ios 上 chrome 有这么一个问题

1877
01:13:23,000 --> 01:13:26,000
所以问题也有可能出现在 chrome 上面对吧

1878
01:13:26,000 --> 01:13:27,000
但

1879
01:13:28,000 --> 01:13:29,000
但你不知道

1880
01:13:29,000 --> 01:13:30,000
你没法测试

1881
01:13:30,000 --> 01:13:31,000
我没有办法解释

1882
01:13:31,000 --> 01:13:32,000
对

1883
01:13:32,000 --> 01:13:35,000
这是一直困扰到我今天的一个一个一个 bug

1884
01:13:35,000 --> 01:13:37,000
我不是连接层的问题吗

1885
01:13:37,000 --> 01:13:38,000
我不知道啊

1886
01:13:38,000 --> 01:13:39,000
对

1887
01:13:39,000 --> 01:13:41,000
这个是没有办法去确切的回答的问题

1888
01:13:41,000 --> 01:13:42,000
我不知道啊

1889
01:13:42,000 --> 01:13:43,000
对

1890
01:13:43,000 --> 01:13:44,000
而且怎么说呢

1891
01:13:44,000 --> 01:13:47,000
就是其实大部分 bug 都是你搜一搜就可以搜到了对吧

1892
01:13:47,000 --> 01:13:49,000
就是再怎么隐秘的 bug 你

1893
01:13:49,000 --> 01:13:52,000
你很很少有可能你是第一个碰到他的人

1894
01:13:52,000 --> 01:13:54,000
但是我搜了一下

1895
01:13:54,000 --> 01:13:57,000
从没有看到过任何一个人有类似的这么一个问题

1896
01:13:57,000 --> 01:13:58,000
就

1897
01:13:58,000 --> 01:13:59,000
嗯

1898
01:13:59,000 --> 01:14:02,000
这实在是太非常非常伤感的人感觉

1899
01:14:02,000 --> 01:14:03,000
嗯

1900
01:14:03,000 --> 01:14:04,000
那我再问一下

1901
01:14:04,000 --> 01:14:05,000
你怎么看这个问题呢

1902
01:14:05,000 --> 01:14:06,000
嗯

1903
01:14:06,000 --> 01:14:08,000
这就是我最后一个感觉

1904
01:14:08,000 --> 01:14:11,000
所以到现在为止你也没有解决他也不知道为什么

1905
01:14:11,000 --> 01:14:12,000
没有解决没有不知道为什么

1906
01:14:12,000 --> 01:14:14,000
然后到现在为止这个网站

1907
01:14:14,000 --> 01:14:17,000
这公司的网站还是不允许使用 chrome

1908
01:14:17,000 --> 01:14:18,000
呃

1909
01:14:18,000 --> 01:14:19,000
呃

1910
01:14:19,000 --> 01:14:20,000
iOS 和 chrome 都

1911
01:14:20,000 --> 01:14:21,000
我觉得时间一久

1912
01:14:21,000 --> 01:14:23,000
可能过上三五年

1913
01:14:23,000 --> 01:14:25,000
如果没有人去看文档的话

1914
01:14:25,000 --> 01:14:26,000
没有人会

1915
01:14:26,000 --> 01:14:29,000
没有人会知道为什么要这样做

1916
01:14:29,000 --> 01:14:33,000
为什么要单单要把 iOS 和 chrome block 掉

1917
01:14:33,000 --> 01:14:35,000
哈哈哈

1918
01:14:35,000 --> 01:14:36,000
好吧

1919
01:14:36,000 --> 01:14:37,000
嗯

1920
01:14:37,000 --> 01:14:38,000
哇

1921
01:14:38,000 --> 01:14:39,000
我最大的秘密

1922
01:14:39,000 --> 01:14:40,000
嗯

1923
01:14:40,000 --> 01:14:42,000
这是这是我人生最悲伤的一个吧

1924
01:14:42,000 --> 01:14:43,000
哈哈哈

1925
01:14:43,000 --> 01:14:46,000
然后这个人们链条太长了

1926
01:14:46,000 --> 01:14:48,000
你你确实很难去

1927
01:14:48,000 --> 01:14:49,000
而且这个样本又不多的吧

1928
01:14:49,000 --> 01:14:50,000
只有三例是吧

1929
01:14:50,000 --> 01:14:51,000
对

1930
01:14:51,000 --> 01:14:54,000
就三到四个四个用户受到影响了吗

1931
01:14:54,000 --> 01:14:55,000
对啊

1932
01:14:55,000 --> 01:14:58,000
你这个时候或者说我们知道的只有四个

1933
01:14:58,000 --> 01:15:02,000
也很有可能什么一个宇宙首先打到你们那个服务器上

1934
01:15:02,000 --> 01:15:04,000
然后翻转了一个内存里面的一个比特位

1935
01:15:04,000 --> 01:15:05,000
然后导致这个 session

1936
01:15:05,000 --> 01:15:06,000
哈哈哈

1937
01:15:06,000 --> 01:15:08,000
复制的过程中这样的错误

1938
01:15:08,000 --> 01:15:09,000
你也很难说的

1939
01:15:09,000 --> 01:15:14,000
是也许对最后发现 bug 出在太阳黑子上面

1940
01:15:14,000 --> 01:15:16,000
我我能把它怎么样

1941
01:15:16,000 --> 01:15:18,000
哈哈哈

1942
01:15:18,000 --> 01:15:19,000
好吧

1943
01:15:19,000 --> 01:15:22,000
然后我在准备这期节目的时候专门去搜了一下

1944
01:15:22,000 --> 01:15:26,000
呃有哪些呃最奇怪或者最有趣的吧

1945
01:15:26,000 --> 01:15:30,000
呃库尔上面有这样一个问题就是 what's the hardest bug

1946
01:15:30,000 --> 01:15:31,000
you have ever debugged

1947
01:15:31,000 --> 01:15:34,000
然后排名第一的答案是呃一个财务器

1948
01:15:34,000 --> 01:15:39,000
呃一个在一个给索尼第一代索尼开发游戏的一个人

1949
01:15:39,000 --> 01:15:40,000
他遇到了这么一个 bug

1950
01:15:40,000 --> 01:15:46,000
就是呃这个游戏在你储存的时候

1951
01:15:46,000 --> 01:15:58,000
有非常小的几率会让你那个 ps 的存储卡上面的数据呃被被损坏

1952
01:15:58,000 --> 01:16:03,000
就是你存这个游戏的盘的时候有非常小的概率会导致你那个 memorycon

1953
01:16:03,000 --> 01:16:07,000
memorystick 上面所有的存档资料都消失了

1954
01:16:07,000 --> 01:16:08,000
对

1955
01:16:08,000 --> 01:16:09,000
对

1956
01:16:09,000 --> 01:16:10,000
对

1957
01:16:10,000 --> 01:16:14,000
那个年纪比较小的呃听众们可能不知道我在说什么

1958
01:16:14,000 --> 01:16:18,000
就是早期的 playstation 上面是有这么一个小小的

1959
01:16:18,000 --> 01:16:22,000
像 usb 插盘的呃 usb 盘的这么一个东西

1960
01:16:22,000 --> 01:16:24,000
呃叫做 memorystick

1961
01:16:24,000 --> 01:16:26,000
你把它插进 ps

1962
01:16:26,000 --> 01:16:28,000
索尼自家的 U 盘接口

1963
01:16:28,000 --> 01:16:31,000
呃不是 U 盘是那个 sd 卡的型号的接口

1964
01:16:31,000 --> 01:16:32,000
对

1965
01:16:32,000 --> 01:16:33,000
对

1966
01:16:33,000 --> 01:16:38,000
然后你把它插到你的 playstation 上面才可以把你的游戏存盘

1967
01:16:38,000 --> 01:16:41,000
然后这个存盘文件是你是你可以自己带在身上

1968
01:16:41,000 --> 01:16:45,000
然后这个游戏有可能把这个存盘就是整个盘给毁掉

1969
01:16:45,000 --> 01:16:48,000
也就意味着你不管玩什么游戏你所有存盘文件都不见了

1970
01:16:48,000 --> 01:16:49,000
这是很恐怖的一件事

1971
01:16:49,000 --> 01:16:58,000
然后他们的呃随着这个 deadline 逐步逼近他们的程序员非常恐慌

1972
01:16:58,000 --> 01:17:02,000
因为那个时候的 playstation 是没有 playstation network 这种东西的就是

1973
01:17:02,000 --> 01:17:10,000
你最终压了盘然后这个盘出去所有人玩如果有 bug 那是没有办法通过在线升级来来解决这个 bug

1974
01:17:10,000 --> 01:17:14,000
然后他们恐慌非常恐慌然后就开始一点点排排出错误

1975
01:17:14,000 --> 01:17:24,000
最后他们把游戏精简到了就是几乎什么都不干就是唯一的功能就是呃登录游戏呃然后存盘

1976
01:17:24,000 --> 01:17:31,000
即便在这种情况之下还是有一定的几率会有会可能损坏掉那个记忆卡

1977
01:17:31,000 --> 01:17:33,000
然后他们就疯了

1978
01:17:33,000 --> 01:17:35,000
嗯

1979
01:17:35,000 --> 01:17:46,000
直到直到有一天呃他发现一个人就是他们那个美工在呃他当时比较生气

1980
01:17:46,000 --> 01:17:48,000
然后他可能训斥了那个美工

1981
01:17:48,000 --> 01:17:54,000
然后那个美工比较 nervous 的去摆弄手柄的时候游戏正在存盘

1982
01:17:54,000 --> 01:17:57,000
然后此时记忆卡被 crap 掉了

1983
01:17:57,000 --> 01:17:58,000
然后他说什么

1984
01:17:58,000 --> 01:18:00,000
你 do it again

1985
01:18:00,000 --> 01:18:01,000
然后就

1986
01:18:01,000 --> 01:18:07,000
就是他们发现如果你在存盘的时候下意识的或者无意识的摆弄了那个手柄

1987
01:18:07,000 --> 01:18:11,000
你的记忆卡就会被抹除掉

1988
01:18:11,000 --> 01:18:17,000
最后他们发现这个这个故障是来自于呃怎么说呢

1989
01:18:17,000 --> 01:18:30,000
就是呃他们的他们的游戏在打他们游戏在运行的时候会把呃 ps 主机上面的一个精阵就是一个硬件的精阵

1990
01:18:30,000 --> 01:18:32,000
设成比较高的一个频率

1991
01:18:32,000 --> 01:18:46,000
然后在这个特定频率之下有可能这个精阵会呃干扰到主机上面的另外一个呃和手柄传输播导率相关的一个芯片

1992
01:18:46,000 --> 01:18:49,000
然后使得这个芯片产生了一个特定的 bug

1993
01:18:49,000 --> 01:18:51,000
然后这个 bug 会导致记忆卡损毁

1994
01:18:51,000 --> 01:18:56,000
这是对这是看起来非常曲折

1995
01:18:56,000 --> 01:18:58,000
然后让人家捏了一把汗的一个故事

1996
01:18:58,000 --> 01:18:59,000
推荐大家去读一读

1997
01:18:59,000 --> 01:19:05,000
因为你要遇到你说我们现代程序员要遇到这种级别的 bug 怎么办

1998
01:19:05,000 --> 01:19:09,000
那我觉得真的就就一头撞死酸了

1999
01:19:09,000 --> 01:19:15,000
我就呃就好像类似的 bug 其实在呃游戏论坛里面

2000
01:19:15,000 --> 01:19:18,000
游戏开发者论坛里面也经常可以看到

2001
01:19:18,000 --> 01:19:25,000
比如说曾经有过一个 bug 是呃在第一个场景里面

2002
01:19:25,000 --> 01:19:28,000
如果你把如果你用手柄

2003
01:19:28,000 --> 01:19:34,000
把相机视角转到呃角色的身后

2004
01:19:34,000 --> 01:19:36,000
整个游戏就会 crush

2005
01:19:36,000 --> 01:19:42,000
然后他们顶着这个 deadline 的压力测试了一个月都没有测出来

2006
01:19:42,000 --> 01:19:43,000
到底是为什么

2007
01:19:43,000 --> 01:19:51,000
最后他们的解决方法就是在第一个场景里面编程强制说呃相机只能保持在侧面的角度

2008
01:19:51,000 --> 01:19:56,000
然后一直到跑到安全的地方才让用户可以把那个视角转到背后

2009
01:19:56,000 --> 01:19:57,000
对

2010
01:19:57,000 --> 01:19:58,000
你像我这个人呢

2011
01:19:58,000 --> 01:20:00,000
他这种 bug 你你没有办法解决的时候

2012
01:20:00,000 --> 01:20:03,000
你都真的只能让他如果你有压力的话

2013
01:20:03,000 --> 01:20:04,000
你之前也不该干了吗

2014
01:20:04,000 --> 01:20:08,000
你直接进了那个 crumple ls 一样的

2015
01:20:08,000 --> 01:20:12,000
对这是这是一些比较 drama 的吧

2016
01:20:12,000 --> 01:20:16,000
但大部分时候我们遇到的 bug 其实没有这么没有那么复杂

2017
01:20:16,000 --> 01:20:18,000
我真真的是因为自己蠢了

2018
01:20:18,000 --> 01:20:19,000
不能怪别人

2019
01:20:19,000 --> 01:20:21,000
不能怪社会

2020
01:20:21,000 --> 01:20:23,000
没错

2021
01:20:23,000 --> 01:20:27,000
对其实呃大部分 bug 都可以通过一些比较基本的设计

2022
01:20:27,000 --> 01:20:29,000
基本的手段被发现了

2023
01:20:29,000 --> 01:20:31,000
就其实最基本的一个就是 read the code

2024
01:20:31,000 --> 01:20:34,000
就是把你刚刚写下的东西仔细读一遍

2025
01:20:34,000 --> 01:20:38,000
很多时候就已经可以发现这个 bug 到底何在

2026
01:20:38,000 --> 01:20:39,000
其实不一定

2027
01:20:39,000 --> 01:20:41,000
因为像会形成那个思维定时嘛

2028
01:20:41,000 --> 01:20:45,000
让你反而一直你反复读也看不出问题在哪里

2029
01:20:45,000 --> 01:20:48,000
比较经典就是那个就是那个叫什么来的

2030
01:20:48,000 --> 01:20:55,000
因为这像 c 啊 c++这种它不是那个叫做缩进式无影响的吧

2031
01:20:55,000 --> 01:20:56,000
对

2032
01:20:56,000 --> 01:20:57,000
那你写了一个 if

2033
01:20:57,000 --> 01:20:58,000
忘了打花贺号

2034
01:20:58,000 --> 01:21:02,000
那你觉得你缩进的后面一排一个 block 的代码

2035
01:21:02,000 --> 01:21:04,000
就应该说这个应该在这个 if 这里面啊

2036
01:21:04,000 --> 01:21:05,000
结果一看没花贺号

2037
01:21:05,000 --> 01:21:07,000
所以 D 行被执行

2038
01:21:07,000 --> 01:21:08,000
没错

2039
01:21:08,000 --> 01:21:13,000
哎我其实在研究生当助教的时候

2040
01:21:13,000 --> 01:21:15,000
遇到过一文遇到过这样一个案例

2041
01:21:15,000 --> 01:21:20,000
就是我当时在写那个写就反正写我的项目

2042
01:21:20,000 --> 01:21:25,000
然后呃我写不写的地方是学校一个计算机实验室

2043
01:21:25,000 --> 01:21:26,000
然后有两个项目

2044
01:21:26,000 --> 01:21:28,000
有一个德国小孩在那不是小孩

2045
01:21:28,000 --> 01:21:31,000
就反两个德国本科生在那边写程序

2046
01:21:31,000 --> 01:21:32,000
别人都走了

2047
01:21:32,000 --> 01:21:34,000
他们两个还坐在那搞

2048
01:21:34,000 --> 01:21:40,000
然后就他们终于忍不住了问我说你能过来看一看我们程序到底什么问题吗

2049
01:21:40,000 --> 01:21:41,000
然后看了一下

2050
01:21:41,000 --> 01:21:45,000
看了大概三分钟就说这里缺一个花贺号

2051
01:21:45,000 --> 01:21:47,000
然后他们两个疯了

2052
01:21:47,000 --> 01:21:50,000
说我们在这坐了四个小时

2053
01:21:50,000 --> 01:21:52,000
就是因为这个花贺号

2054
01:21:52,000 --> 01:21:54,000
哈哈哈

2055
01:21:54,000 --> 01:21:55,000
啊

2056
01:21:55,000 --> 01:21:56,000
所以所以就是这个话呢

2057
01:21:56,000 --> 01:22:02,000
就是遇到这种情况就是说呃有先不说这个缩进敏感是不是一件好事吧

2058
01:22:02,000 --> 01:22:03,000
至少你像那个沟语言

2059
01:22:03,000 --> 01:22:05,000
他不是有个那个自带的叫 go format

2060
01:22:05,000 --> 01:22:06,000
那个工具吗

2061
01:22:06,000 --> 01:22:10,000
可以帮你说标就是把代码重排成一个标准样式

2062
01:22:10,000 --> 01:22:13,000
但可以一眼看出这种比较愚蠢低级的错误吗

2063
01:22:13,000 --> 01:22:16,000
就上次那个你知道那个 heart

2064
01:22:16,000 --> 01:22:18,000
呃 heartbleed 就是那个 open ss

2065
01:22:18,000 --> 01:22:20,000
那个大 bug 出现了吗

2066
01:22:20,000 --> 01:22:22,000
其实也是因为类似的原因吗

2067
01:22:22,000 --> 01:22:24,000
还有个什么好像是一个 double return 吧

2068
01:22:24,000 --> 01:22:25,000
好像是嗯哼

2069
01:22:25,000 --> 01:22:31,000
然后没有没有没有看到就发现那个检查都根本就没有从来这么多年过去了

2070
01:22:31,000 --> 01:22:34,000
从来没有执行过那个安全性的检查的白搞

2071
01:22:34,000 --> 01:22:41,000
就是其实也是可以就是其实如果你自己自己看那个代码的原始的形状

2072
01:22:41,000 --> 01:22:43,000
你你不仔细去想

2073
01:22:43,000 --> 01:22:45,000
就我不告诉你这里有个明显的问题的话

2074
01:22:45,000 --> 01:22:47,000
你怎么也想不到那里会有这么一个状况

2075
01:22:47,000 --> 01:22:48,000
对不对

2076
01:22:48,000 --> 01:22:50,000
这个代码在公公开

2077
01:22:50,000 --> 01:22:52,000
就是它是开源的嘛

2078
01:22:52,000 --> 01:22:54,000
光天化日下存在了那么多年都没有人发现

2079
01:22:54,000 --> 01:22:55,000
所以我觉得

2080
01:22:55,000 --> 01:22:59,000
这个 recode 是最低效率的储存的手段

2081
01:22:59,000 --> 01:23:00,000
嗯

2082
01:23:00,000 --> 01:23:02,000
但是我觉得这个点可能是说

2083
01:23:02,000 --> 01:23:09,000
如果你有一个比较好的写一小段就回去 review 一下的习惯的话

2084
01:23:09,000 --> 01:23:15,000
其实是对于杜绝这样的 bug 出现是比较有有有意义的

2085
01:23:15,000 --> 01:23:17,000
但是不是每个人都有这个习惯

2086
01:23:17,000 --> 01:23:24,000
但可能这也就是为什么一些比较好的 ide 会动用静态分析器

2087
01:23:24,000 --> 01:23:26,000
或者 static analyzer 这种东西来

2088
01:23:26,000 --> 01:23:30,000
就是说在某种意义上是它帮你读你刚刚写下的代码

2089
01:23:30,000 --> 01:23:31,000
嗯

2090
01:23:31,000 --> 01:23:34,000
就判断一些就形认模式吗

2091
01:23:34,000 --> 01:23:35,000
或者行为之类的

2092
01:23:35,000 --> 01:23:36,000
没错

2093
01:23:36,000 --> 01:23:37,000
呃

2094
01:23:37,000 --> 01:23:39,000
于反正基本的问题解决

2095
01:23:39,000 --> 01:23:42,000
对大家喜欢 ide 的原因之一也就是它会

2096
01:23:42,000 --> 01:23:48,000
呃除了语法高谅之外会告诉你说这个地方看起来好像是不对的

2097
01:23:48,000 --> 01:23:49,000
嗯

2098
01:23:49,000 --> 01:23:50,000
嗯

2099
01:23:50,000 --> 01:23:53,000
就比如说那个 xcode 的比较高谅的代码

2100
01:23:53,000 --> 01:23:57,000
xcode 的 playground 其实就是在不停的静态分析你的代码

2101
01:23:57,000 --> 01:23:59,000
然后甚至动态运行它

2102
01:23:59,000 --> 01:24:00,000
然后

2103
01:24:00,000 --> 01:24:01,000
嗯

2104
01:24:01,000 --> 01:24:03,000
可以帮你及时发现自己写的代码

2105
01:24:03,000 --> 01:24:08,000
然后我们说这个最其实蛮常用的一个

2106
01:24:08,000 --> 01:24:12,000
除虫的手段就是打印除虫法

2107
01:24:12,000 --> 01:24:13,000
哈哈

2108
01:24:13,000 --> 01:24:14,000
对

2109
01:24:14,000 --> 01:24:16,000
the good old printf

2110
01:24:16,000 --> 01:24:17,000
哈哈

2111
01:24:17,000 --> 01:24:18,000
嗯

2112
01:24:18,000 --> 01:24:20,000
printf 是一个 c

2113
01:24:20,000 --> 01:24:21,000
系统标准函数嘛

2114
01:24:21,000 --> 01:24:22,000
c 名标准函数

2115
01:24:22,000 --> 01:24:24,000
就是打一个字符串的吧

2116
01:24:24,000 --> 01:24:25,000
然后一般做法怎么样子

2117
01:24:25,000 --> 01:24:38,000
这就是你在你觉得可能会出问题的那个那个区间打印一个你认为它应该是某一个数值或者是一个一个变量

2118
01:24:38,000 --> 01:24:43,000
然后看它是不是在那个时候确实是如你所料的那个数字

2119
01:24:43,000 --> 01:24:50,000
然后你可以当一次插多个打印点或者是打印多个这个变量或者是这个什么结构体之类的

2120
01:24:50,000 --> 01:24:51,000
然后看是不是如你所料的那个数字

2121
01:24:51,000 --> 01:24:52,000
然后看是不是如你所料的那个数字

2122
01:24:52,000 --> 01:24:53,000
就是有这个预期嘛

2123
01:24:53,000 --> 01:24:54,000
就是其实刚刚忘了说了

2124
01:24:54,000 --> 01:24:57,000
这就是整个过程就是说你形成一个假设

2125
01:24:57,000 --> 01:24:58,000
就假设代码在这里出了问题

2126
01:24:58,000 --> 01:25:00,000
然后你去验证那个假设是否成立

2127
01:25:00,000 --> 01:25:02,000
然后逐一排查的过程嘛

2128
01:25:02,000 --> 01:25:07,000
然后这个打印除虫法就是做了一个最最原始的方法

2129
01:25:07,000 --> 01:25:08,000
就这么一个一个过程

2130
01:25:08,000 --> 01:25:09,000
对

2131
01:25:09,000 --> 01:25:10,000
嗯

2132
01:25:10,000 --> 01:25:11,000
打印除虫法的第一步

2133
01:25:11,000 --> 01:25:13,000
是测试这个打印除虫法的

2134
01:25:13,000 --> 01:25:15,000
我是一个打印出中的大师

2135
01:25:15,000 --> 01:25:16,000
哈哈哈

2136
01:25:16,000 --> 01:25:17,000
呃

2137
01:25:17,000 --> 01:25:19,000
打印除虫法的第一层境界是

2138
01:25:19,000 --> 01:25:20,000
呃

2139
01:25:20,000 --> 01:25:20,000
检测这个代码的

2140
01:25:20,000 --> 01:25:21,000
呃

2141
01:25:21,000 --> 01:25:22,000
检测这个代码的第一层境界是

2142
01:25:22,000 --> 01:25:23,000
分支会不会被运行到

2143
01:25:23,000 --> 01:25:27,000
比如说我经常会在 JavaScript 里面

2144
01:25:27,000 --> 01:25:28,000
写 console log 1

2145
01:25:28,000 --> 01:25:29,000
然后下面一个分支

2146
01:25:29,000 --> 01:25:30,000
写 console log 2

2147
01:25:30,000 --> 01:25:32,000
然后再下面一个 console log 3

2148
01:25:32,000 --> 01:25:33,000
然后运行

2149
01:25:33,000 --> 01:25:35,000
然后去 console 里面看

2150
01:25:35,000 --> 01:25:36,000
说 123 是不是都打出来

2151
01:25:36,000 --> 01:25:37,000
如果没打出来的话

2152
01:25:37,000 --> 01:25:39,000
这段代码根本就没被运行

2153
01:25:39,000 --> 01:25:40,000
这个是最基本的叫做

2154
01:25:40,000 --> 01:25:41,000
怎么 control flow

2155
01:25:41,000 --> 01:25:43,000
控制流的检验

2156
01:25:43,000 --> 01:25:43,000
对

2157
01:25:43,000 --> 01:25:44,000
returability

2158
01:25:44,000 --> 01:25:46,000
然后第二层进阶

2159
01:25:46,000 --> 01:25:48,000
才是打印一个代码的值

2160
01:25:48,000 --> 01:25:50,000
打印一个变量的值

2161
01:25:50,000 --> 01:25:52,000
写 PHP 的或者什么

2162
01:25:52,000 --> 01:25:53,000
VarDump 的值

2163
01:25:53,000 --> 01:25:56,000
数值储存法的

2164
01:25:56,000 --> 01:25:57,000
打印数值储存法

2165
01:25:57,000 --> 01:25:59,000
对 没错

2166
01:25:59,000 --> 01:26:01,000
然后第三层进阶

2167
01:26:01,000 --> 01:26:03,000
可能就是在 printf 的时候

2168
01:26:03,000 --> 01:26:04,000
第三层进阶就是

2169
01:26:04,000 --> 01:26:06,000
代 debug 的 printf

2170
01:26:06,000 --> 01:26:08,000
就是在代码里面

2171
01:26:09,000 --> 01:26:10,000
定一个红 debug

2172
01:26:10,000 --> 01:26:13,000
if debug then printf

2173
01:26:13,000 --> 01:26:14,000
然后这个东西

2174
01:26:14,000 --> 01:26:17,000
printf 就此成为了

2175
01:26:17,000 --> 01:26:18,000
最终代码的一部分

2176
01:26:18,000 --> 01:26:20,000
你知道那个

2177
01:26:20,000 --> 01:26:22,000
打印储存法的

2178
01:26:22,000 --> 01:26:24,000
那个抓狂状态是怎么样了吗

2179
01:26:24,000 --> 01:26:25,000
就是 printf 括号开

2180
01:26:25,000 --> 01:26:27,000
那个引号开

2181
01:26:27,000 --> 01:26:28,000
what the fuck

2182
01:26:28,000 --> 01:26:29,000
why did this run here

2183
01:26:29,000 --> 01:26:33,000
然后问号

2184
01:26:33,000 --> 01:26:34,000
五个感变号

2185
01:26:34,000 --> 01:26:36,000
关引号

2186
01:26:36,000 --> 01:26:37,000
关括号

2187
01:26:37,000 --> 01:26:39,000
还忘了个分号打上去

2188
01:26:39,000 --> 01:26:42,000
比如说早期 Windows 的

2189
01:26:42,000 --> 01:26:44,000
Windows NT 还是 95 的原代码

2190
01:26:44,000 --> 01:26:44,000
爆出来之后

2191
01:26:44,000 --> 01:26:46,000
发现里面有很多的

2192
01:26:46,000 --> 01:26:47,000
那个 printf 的段落

2193
01:26:47,000 --> 01:26:49,000
都是在组周编译器

2194
01:26:49,000 --> 01:26:50,000
你说傻逼编译器

2195
01:26:50,000 --> 01:26:51,000
这里又弄错了

2196
01:26:51,000 --> 01:26:53,000
需要我手工来做什么

2197
01:26:53,000 --> 01:26:56,000
但其实打印储存法的

2198
01:26:56,000 --> 01:26:58,000
最麻烦的一点就是

2199
01:26:58,000 --> 01:26:59,000
它需要你重新

2200
01:26:59,000 --> 01:27:01,000
就如果是静态语言

2201
01:27:01,000 --> 01:27:03,000
它需要你重新编译一遍

2202
01:27:03,000 --> 01:27:05,000
编译重新重新

2203
01:27:05,000 --> 01:27:06,000
就是说什么

2204
01:27:06,000 --> 01:27:08,000
你插入一个打印语句之后

2205
01:27:08,000 --> 01:27:09,000
你得保存

2206
01:27:09,000 --> 01:27:10,000
然后编译

2207
01:27:10,000 --> 01:27:12,000
然后再执行

2208
01:27:12,000 --> 01:27:13,000
就每次都重新跑一遍

2209
01:27:13,000 --> 01:27:13,000
就比较

2210
01:27:13,000 --> 01:27:15,000
如果你那个

2211
01:27:15,000 --> 01:27:16,000
那个什么

2212
01:27:16,000 --> 01:27:18,000
工程项目比较大

2213
01:27:18,000 --> 01:27:20,000
然后那个编译时间比较长的话

2214
01:27:20,000 --> 01:27:21,000
你就哭死吧

2215
01:27:21,000 --> 01:27:22,000
没错

2216
01:27:22,000 --> 01:27:25,000
其实刚才说的三层境界

2217
01:27:25,000 --> 01:27:27,000
都是非常不推荐的

2218
01:27:27,000 --> 01:27:28,000
尤其是第三层境界

2219
01:27:28,000 --> 01:27:29,000
就是你

2220
01:27:29,000 --> 01:27:33,000
如果你真的需要检测 printf

2221
01:27:33,000 --> 01:27:34,000
或者是检测一个程序的输出

2222
01:27:34,000 --> 01:27:36,000
来验证它是否正确的话

2223
01:27:36,000 --> 01:27:38,000
比较

2224
01:27:38,000 --> 01:27:41,000
methodology 的方法是

2225
01:27:41,000 --> 01:27:44,000
用一个比如说 log 4 j

2226
01:27:44,000 --> 01:27:47,000
这样的库来输出

2227
01:27:47,000 --> 01:27:49,000
比较正统的

2228
01:27:50,000 --> 01:27:52,000
记录资料

2229
01:27:52,000 --> 01:27:55,000
然后你可以使用一些比较相对来说

2230
01:27:55,000 --> 01:27:56,000
比较高端的功能

2231
01:27:56,000 --> 01:27:59,000
比如说区分 log 的等级

2232
01:27:59,000 --> 01:28:01,000
是 warning 是 info 还是 debug

2233
01:28:01,000 --> 01:28:03,000
还是 error

2234
01:28:03,000 --> 01:28:06,000
然后可以记录下时间

2235
01:28:06,000 --> 01:28:08,000
然后可以有选择性的记录

2236
01:28:08,000 --> 01:28:13,000
比如说当时的站的情况

2237
01:28:13,000 --> 01:28:15,000
或者是堆的情况

2238
01:28:15,000 --> 01:28:17,000
或者是乃至于一个变量的值

2239
01:28:17,000 --> 01:28:20,000
千万不要简单的用 if debug

2240
01:28:20,000 --> 01:28:21,000
然后 printf

2241
01:28:21,000 --> 01:28:23,000
这种比较愚蠢的方式

2242
01:28:23,000 --> 01:28:31,000
所以比较高级的方式是什么

2243
01:28:31,000 --> 01:28:37,000
我们可以一项一项来总结

2244
01:28:37,000 --> 01:28:39,000
最简单的就是

2245
01:28:39,000 --> 01:28:46,000
最具有早期黑客精神的除错工具

2246
01:28:46,000 --> 01:28:50,000
其实叫 db

2247
01:28:50,000 --> 01:28:51,000
debug

2248
01:28:51,000 --> 01:28:53,000
db 这么一个小工具

2249
01:28:53,000 --> 01:29:00,000
有点类似于 DOS 时代的 debug.com

2250
01:29:00,000 --> 01:29:03,000
还是 debug.com

2251
01:29:03,000 --> 01:29:06,000
还是 debug.exe 程序

2252
01:29:06,000 --> 01:29:09,000
早期 DOS 下面有一个

2253
01:29:09,000 --> 01:29:11,000
可以让你直接输入汇编来写程序

2254
01:29:11,000 --> 01:29:13,000
乃至于调试其他程序的小程序

2255
01:29:13,000 --> 01:29:14,000
叫 debug.com

2256
01:29:14,000 --> 01:29:17,000
我不知道你有没有印象

2257
01:29:17,000 --> 01:29:18,000
你有没有用过

2258
01:29:18,000 --> 01:29:20,000
没什么

2259
01:29:20,000 --> 01:29:23,000
DOS 上面真的没有什么编程的经历

2260
01:29:23,000 --> 01:29:24,000
OK

2261
01:29:24,000 --> 01:29:28,000
就比 debug.com 的鼻祖

2262
01:29:28,000 --> 01:29:31,000
其实就是早期 unix 上面的一个工具

2263
01:29:31,000 --> 01:29:32,000
工具叫做 db

2264
01:29:32,000 --> 01:29:33,000
也就是 debug 的缩小

2265
01:29:33,000 --> 01:29:37,000
后来 GNU 出了一个 GNUDB

2266
01:29:37,000 --> 01:29:40,000
也就是现在最广为使用的 GDB

2267
01:29:40,000 --> 01:29:43,000
GDB 简单来说就是这么一个程序

2268
01:29:43,000 --> 01:29:47,000
你可以让这个程序替你运行你的程序

2269
01:29:47,000 --> 01:29:50,000
然后这个程序在运行的时候

2270
01:29:50,000 --> 01:29:52,000
一上来会暂停

2271
01:29:52,000 --> 01:29:55,000
或者说根据你调用它的方式不同

2272
01:29:55,000 --> 01:29:58,000
你可以让它一上来就暂停

2273
01:29:58,000 --> 01:29:59,000
然后告诉它说

2274
01:29:59,000 --> 01:30:01,000
这个程序运行到某一个特定行的时候

2275
01:30:01,000 --> 01:30:02,000
请你停下来

2276
01:30:02,000 --> 01:30:04,000
然后我要看一看这个程序

2277
01:30:04,000 --> 01:30:05,000
现在的状况是什么样

2278
01:30:05,000 --> 01:30:10,000
然后 GDB 也是在命令行下运行

2279
01:30:10,000 --> 01:30:11,000
运行的方法就是

2280
01:30:11,000 --> 01:30:14,000
你用你现在写 GDB

2281
01:30:14,000 --> 01:30:15,000
然后后面跟你

2282
01:30:15,000 --> 01:30:17,000
比如说你刚刚编译好的一个 C 程序

2283
01:30:17,000 --> 01:30:18,000
然后 C 程序的原码

2284
01:30:18,000 --> 01:30:19,000
和 C 程序的那个

2285
01:30:19,000 --> 01:30:20,000
中间的那个

2286
01:30:20,000 --> 01:30:22,000
中间的调试信息也全都在

2287
01:30:22,000 --> 01:30:24,000
存在当前目录之下

2288
01:30:24,000 --> 01:30:27,000
然后你用 GDB 调用你写好的程序

2289
01:30:27,000 --> 01:30:30,000
然后告诉 GDB 你要在哪断点

2290
01:30:30,000 --> 01:30:31,000
然后在哪调试

2291
01:30:31,000 --> 01:30:33,000
所有的指令都是通过键盘输入的

2292
01:30:33,000 --> 01:30:34,000
然后你比如说你停

2293
01:30:34,000 --> 01:30:35,000
你要设定断点

2294
01:30:35,000 --> 01:30:39,000
设定点你要说 break at line 31

2295
01:30:39,000 --> 01:30:40,000
比如说

2296
01:30:40,000 --> 01:30:41,000
然后为了简化

2297
01:30:41,000 --> 01:30:44,000
你可以把整个没有意义的

2298
01:30:45,000 --> 01:30:47,000
没有其意义的指令

2299
01:30:47,000 --> 01:30:48,000
简化为一个字母

2300
01:30:48,000 --> 01:30:49,000
比如说 B 31

2301
01:30:49,000 --> 01:30:50,000
就是说

2302
01:30:50,000 --> 01:30:51,000
在 31 这个地方放一段点

2303
01:30:51,000 --> 01:30:53,000
然后它运行到 31 的时候

2304
01:30:53,000 --> 01:30:55,000
会告诉你说 31 有了什么

2305
01:30:55,000 --> 01:30:57,000
我已经运行了 31 的

2306
01:30:57,000 --> 01:30:57,000
接下来要干什么

2307
01:30:57,000 --> 01:30:58,000
比如说你可以说

2308
01:31:01,000 --> 01:31:04,000
打印出某一个计算器的纸

2309
01:31:04,000 --> 01:31:06,000
整个过程有点像 Walmart

2310
01:31:06,000 --> 01:31:09,000
我应该反过来说

2311
01:31:09,000 --> 01:31:11,000
Walmart 的过程就有点像

2312
01:31:11,000 --> 01:31:15,000
这个使用一个命令行的这种编辑器

2313
01:31:15,000 --> 01:31:17,000
就是你输入一个指令

2314
01:31:17,000 --> 01:31:18,000
可以看到你周围有什么

2315
01:31:18,000 --> 01:31:19,000
然后你再输入一个指令

2316
01:31:19,000 --> 01:31:20,000
可以决定说你要做什么

2317
01:31:20,000 --> 01:31:23,000
所以我觉得用这个方法

2318
01:31:23,000 --> 01:31:27,000
比打印出中法最大最大的优点

2319
01:31:27,000 --> 01:31:29,000
就在于它不用每次去重新编译

2320
01:31:29,000 --> 01:31:31,000
对于你的程序

2321
01:31:31,000 --> 01:31:32,000
去加一个打印一句

2322
01:31:32,000 --> 01:31:33,000
然后又重新编译

2323
01:31:33,000 --> 01:31:37,000
跑一段进度出错的环节 section

2324
01:31:37,000 --> 01:31:39,000
然后再来判断

2325
01:31:39,000 --> 01:31:40,000
它这个是可以在

2326
01:31:40,000 --> 01:31:42,000
等于是在程序运行过程中

2327
01:31:42,000 --> 01:31:43,000
动态的去查看

2328
01:31:43,000 --> 01:31:44,000
它运行的环境

2329
01:31:44,000 --> 01:31:46,000
然后是否符合你的假设

2330
01:31:46,000 --> 01:31:47,000
对吧

2331
01:31:47,000 --> 01:31:47,000
没错

2332
01:31:47,000 --> 01:31:49,000
所以有了这样的一个计算机

2333
01:31:49,000 --> 01:31:52,000
我们就实现了一个非常重要的

2334
01:31:52,000 --> 01:31:54,000
软件开发的原则

2335
01:31:54,000 --> 01:31:55,000
Separation of Consent

2336
01:31:55,000 --> 01:31:57,000
就是你写下来的代码

2337
01:31:57,000 --> 01:31:59,000
应该只是用于实现

2338
01:31:59,000 --> 01:32:01,000
你真正想要实现的那些东西

2339
01:32:01,000 --> 01:32:04,000
而不是其中有一部分的功能

2340
01:32:04,000 --> 01:32:07,000
是用来让你检测这个程序

2341
01:32:07,000 --> 01:32:08,000
是不是在正确运行

2342
01:32:08,000 --> 01:32:13,000
这就是一个调试工具的意义

2343
01:32:13,000 --> 01:32:16,000
然后 GDP 其实直到今天都还有人用

2344
01:32:16,000 --> 01:32:19,000
而且在其他所有的语言里面

2345
01:32:19,000 --> 01:32:19,000
几乎没有人用过

2346
01:32:19,000 --> 01:32:21,000
几乎所有语言

2347
01:32:21,000 --> 01:32:22,000
这样有没有

2348
01:32:22,000 --> 01:32:25,000
在语言里面都有这么一个命令行

2349
01:32:25,000 --> 01:32:26,000
下面调试的工具

2350
01:32:26,000 --> 01:32:29,000
比如说 Python DB 叫做 PDB

2351
01:32:29,000 --> 01:32:33,000
然后还有 iPython

2352
01:32:33,000 --> 01:32:36,000
也有这么一个专门让人用来

2353
01:32:36,000 --> 01:32:39,000
做交互式的命令行下的 debug

2354
01:32:39,000 --> 01:32:42,000
工作的一个库叫做 IPDB

2355
01:32:42,000 --> 01:32:44,000
这些都是相当好的工具

2356
01:32:44,000 --> 01:32:46,000
Rail 你用过吗

2357
01:32:46,000 --> 01:32:49,000
你写 Python 会用 debug 吗

2358
01:32:49,000 --> 01:32:51,000
偶尔用

2359
01:32:51,000 --> 01:32:53,000
只有 20%的时间里面

2360
01:32:53,000 --> 01:32:55,000
对偶尔会用 Python DB

2361
01:32:55,000 --> 01:32:58,000
你觉得好用吗

2362
01:32:58,000 --> 01:33:00,000
看情况吧

2363
01:33:00,000 --> 01:33:01,000
有些情况是用不了的

2364
01:33:01,000 --> 01:33:02,000
我印象中

2365
01:33:02,000 --> 01:33:05,000
它得插入一个

2366
01:33:05,000 --> 01:33:07,000
Python DB 它在启动的时候

2367
01:33:07,000 --> 01:33:10,000
它得在某一个地方插入一个断点

2368
01:33:10,000 --> 01:33:10,000
引入 Python DB

2369
01:33:10,000 --> 01:33:14,000
然后进入 Python DB 环境的一个点

2370
01:33:14,000 --> 01:33:16,000
完了之后

2371
01:33:16,000 --> 01:33:17,000
你就回到正常运行了

2372
01:33:17,000 --> 01:33:18,000
然后你要如何

2373
01:33:18,000 --> 01:33:19,000
就不能

2374
01:33:19,000 --> 01:33:22,000
比较灵活的换到其他的断点里面

2375
01:33:22,000 --> 01:33:23,000
去检测另外一堆的状态

2376
01:33:23,000 --> 01:33:28,000
我觉得其实对我来说

2377
01:33:28,000 --> 01:33:30,000
命令行调试工具

2378
01:33:30,000 --> 01:33:32,000
包括不管是 PDB 也好

2379
01:33:32,000 --> 01:33:33,000
GDB 也好

2380
01:33:33,000 --> 01:33:35,000
最大的问题是

2381
01:33:35,000 --> 01:33:37,000
都太难记了

2382
01:33:37,000 --> 01:33:38,000
因为

2383
01:33:38,000 --> 01:33:39,000
太什么

2384
01:33:39,000 --> 01:33:41,000
太难记

2385
01:33:41,000 --> 01:33:43,000
就是所有指令都太难记住了

2386
01:33:43,000 --> 01:33:45,000
而且就每次用的时候

2387
01:33:45,000 --> 01:33:47,000
都要打开一个 manual 在那边查

2388
01:33:47,000 --> 01:33:48,000
说接下来我要干嘛

2389
01:33:48,000 --> 01:33:49,000
行

2390
01:33:49,000 --> 01:33:50,000
那显然是因为你用的还不够多

2391
01:33:50,000 --> 01:33:51,000
对

2392
01:33:51,000 --> 01:33:53,000
我可能跟你差不多

2393
01:33:53,000 --> 01:33:54,000
就是有百分之

2394
01:33:54,000 --> 01:33:55,000
最多有 20%的时间在 debug

2395
01:33:55,000 --> 01:33:56,000
然后在 debug 的时候

2396
01:33:56,000 --> 01:33:57,000
我就

2397
01:33:57,000 --> 01:33:58,000
就

2398
01:33:58,000 --> 01:34:00,000
可能大学的时候稍微好一点

2399
01:34:00,000 --> 01:34:02,000
大学的时候还能记住一部分指令

2400
01:34:02,000 --> 01:34:04,000
但是到现在真是

2401
01:34:04,000 --> 01:34:07,000
尤其尤其是在用一门

2402
01:34:07,000 --> 01:34:09,000
已经很长时间没有用过语言的时候

2403
01:34:09,000 --> 01:34:12,000
然后要用要去用一个命令行项的 debug

2404
01:34:12,000 --> 01:34:15,000
真的是要得亲命

2405
01:34:15,000 --> 01:34:17,000
所以这个时候你知道你需要什么吗

2406
01:34:17,000 --> 01:34:17,000
在这个时候你知道你需要什么吗

2407
01:34:17,000 --> 01:34:17,000
在这个时候你知道你需要什么吗

2408
01:34:17,000 --> 01:34:17,000
在这个时候你知道你需要什么吗

2409
01:34:17,000 --> 01:34:19,000
在这个时候你知道你需要什么吗

2410
01:34:19,000 --> 01:34:20,000
这个时候你需要 cheat sheet

2411
01:34:20,000 --> 01:34:22,000
啊

2412
01:34:22,000 --> 01:34:23,000
ok

2413
01:34:23,000 --> 01:34:24,000
作弊纸啊

2414
01:34:24,000 --> 01:34:27,000
你得打一张那个常用快捷键的东西

2415
01:34:27,000 --> 01:34:28,000
贴墙上

2416
01:34:28,000 --> 01:34:31,000
贴那个屏幕周围

2417
01:34:31,000 --> 01:34:32,000
能够一眼看得见

2418
01:34:32,000 --> 01:34:34,000
什么时候干

2419
01:34:34,000 --> 01:34:35,000
哪个指令

2420
01:34:35,000 --> 01:34:37,000
我现在其实桌子上专门有一个文件盒

2421
01:34:37,000 --> 01:34:40,000
是专门拿来放各种 cheat sheet

2422
01:34:40,000 --> 01:34:41,000
对啊

2423
01:34:41,000 --> 01:34:42,000
什么 sql cheat sheet

2424
01:34:42,000 --> 01:34:45,000
regular expression cheat sheet

2425
01:34:45,000 --> 01:34:47,000
vim cheat sheet

2426
01:34:47,000 --> 01:34:48,000
然后还有对

2427
01:34:48,000 --> 01:34:49,000
各种各样的

2428
01:34:49,000 --> 01:34:51,000
id 的 cheat sheet

2429
01:34:51,000 --> 01:34:53,000
现在这所有这些纸应该都已经发黄了吧

2430
01:34:53,000 --> 01:34:56,000
那效果又不是非常理想

2431
01:34:56,000 --> 01:34:58,000
对

2432
01:34:58,000 --> 01:35:01,000
我是有一个呃在桌面有个快捷方式

2433
01:35:01,000 --> 01:35:03,000
一个文件夹叫 cheat sheet

2434
01:35:03,000 --> 01:35:08,000
然后里面各种各样的常用的一些呃工具的一些 cheat sheet

2435
01:35:08,000 --> 01:35:10,000
包括什么编辑器的快捷键啊

2436
01:35:10,000 --> 01:35:13,000
gp 这个什么 status code 啊

2437
01:35:13,000 --> 01:35:17,000
这个文件夹我一直都有

2438
01:35:17,000 --> 01:35:18,000
而且这个文件夹没有了

2439
01:35:18,000 --> 01:35:19,000
你看嘛

2440
01:35:19,000 --> 01:35:22,000
这个文件夹被我命名为 flight manual

2441
01:35:22,000 --> 01:35:24,000
哈哈哈

2442
01:35:24,000 --> 01:35:25,000
飞行手册

2443
01:35:25,000 --> 01:35:28,000
对哈哈哈

2444
01:35:28,000 --> 01:35:29,000
这个不错

2445
01:35:29,000 --> 01:35:30,000
这个不错

2446
01:35:31,000 --> 01:35:31,000
对

2447
01:35:31,000 --> 01:35:33,000
但是怎么说呢

2448
01:35:34,000 --> 01:35:35,000
并没有什么乱

2449
01:35:35,000 --> 01:35:38,000
哈哈哈

2450
01:35:38,000 --> 01:35:41,000
最终我还是转向了至少在 debug 这件事情上

2451
01:35:41,000 --> 01:35:44,000
我还是转向了图形界面的 debug

2452
01:35:45,000 --> 01:35:46,000
ok

2453
01:35:46,000 --> 01:35:49,000
然后有些什么高级的介绍一下

2454
01:35:49,000 --> 01:35:50,000
也不算高级吧

2455
01:35:50,000 --> 01:35:53,000
就是至少比如说我们刚才介绍的这个鼻祖级的 gdb

2456
01:35:53,000 --> 01:35:58,000
其实它有一个呃图形化界面叫做 ddd

2457
01:35:58,000 --> 01:35:59,000
哈哈哈

2458
01:35:59,000 --> 01:36:06,000
ddd 对是一个 xwindow 的呃 xwindows 的 gdb 的前端

2459
01:36:06,000 --> 01:36:07,000
嗯

2460
01:36:07,000 --> 01:36:14,000
然后呃我上次用 ddd 可能也是在上一读研究生的时候

2461
01:36:14,000 --> 01:36:16,000
因为研究生毕业就再也没有写过 c 上去了

2462
01:36:16,000 --> 01:36:25,000
嗯嗯当时觉得 ddd 最大的一个卖点就是它可以把一些比较常用的数据结构呃用图形化的方式表现出来

2463
01:36:25,000 --> 01:36:27,000
比如说你写了一个单向链表

2464
01:36:28,000 --> 01:36:29,000
嗯

2465
01:36:29,000 --> 01:36:33,000
他分析了之后可以把你的链表用一个一个的方框画出来

2466
01:36:34,000 --> 01:36:35,000
然后告诉你说哦

2467
01:36:35,000 --> 01:36:42,000
这个链表的指针指向指向的那一个呃这个链表上的节点的指针指向的另外一个节点

2468
01:36:42,000 --> 01:36:43,000
然后诸如此类

2469
01:36:43,000 --> 01:36:44,000
呃

2470
01:36:44,000 --> 01:36:47,000
当然大部分时候它还是被拿来用呃

2471
01:36:48,000 --> 01:36:53,000
做那个 d 呃 db 就是至少 ddd 上面你可以用鼠标点了

2472
01:36:53,000 --> 01:36:56,000
你说我想在这一行设一个电锣断点

2473
01:36:56,000 --> 01:36:56,000
你点那一行

2474
01:36:56,000 --> 01:36:59,000
然后点一下设的设的就可以了

2475
01:36:59,000 --> 01:37:04,000
终于可以不用去记那些单个指令的这些 db 人命令了

2476
01:37:04,000 --> 01:37:07,000
对这是 ddd 最大的一个卖点

2477
01:37:07,000 --> 01:37:10,000
所以其实你看到哈这些情况下就说呢

2478
01:37:10,000 --> 01:37:13,000
就用的没有像编辑器那么勤快的功能

2479
01:37:13,000 --> 01:37:19,000
有一个图形的方式去让你不用技术快捷键还是挺好的

2480
01:37:19,000 --> 01:37:32,000
对我觉得其实一个独立的有图形界面的 db 配合一个专一的用来写程序的编辑器是一个挺好的组合

2481
01:37:32,000 --> 01:37:33,000
就呃

2482
01:37:33,000 --> 01:37:35,000
运用词的

2483
01:37:35,000 --> 01:37:39,000
运用词的哲学之一不都是呃做一件事情

2484
01:37:39,000 --> 01:37:41,000
而且对把这件事情做好

2485
01:37:41,000 --> 01:37:43,000
那我用一个编辑器

2486
01:37:43,000 --> 01:37:44,000
专门来写程序

2487
01:37:44,000 --> 01:37:47,000
然后用另外一个 db 专门来 db 其实也挺好

2488
01:37:47,000 --> 01:37:48,000
嗯

2489
01:37:48,000 --> 01:37:49,000
嗯

2490
01:37:49,000 --> 01:37:51,000
包括很多人会说啊

2491
01:37:51,000 --> 01:37:54,000
我想要把我的 vim 打造成一个 ide

2492
01:37:54,000 --> 01:38:01,000
但这其实在某种程度上就背离了 vim 当初被开发出来的一个应用场景

2493
01:38:01,000 --> 01:38:02,000
呃

2494
01:38:02,000 --> 01:38:07,000
你不如就好好的把它当做编辑器来用

2495
01:38:07,000 --> 01:38:09,000
然后等你真正需要去调试的时候

2496
01:38:09,000 --> 01:38:11,000
你跳到另外一个程序里面去调试就好了

2497
01:38:11,000 --> 01:38:13,000
因为嗯在 vim 里面

2498
01:38:13,000 --> 01:38:13,000
对

2499
01:38:13,000 --> 01:38:17,000
那你可能命令行的距离其实就只有一个 control 加 z 而已

2500
01:38:17,000 --> 01:38:18,000
不是

2501
01:38:18,000 --> 01:38:19,000
对

2502
01:38:19,000 --> 01:38:20,000
对

2503
01:38:20,000 --> 01:38:21,000
哎

2504
01:38:21,000 --> 01:38:22,000
说到这个 vim

2505
01:38:22,000 --> 01:38:24,000
我最近做了一个比较疯狂的事情

2506
01:38:24,000 --> 01:38:25,000
说来听听

2507
01:38:25,000 --> 01:38:27,000
我我已经系好安全带了

2508
01:38:27,000 --> 01:38:28,000
说来听听

2509
01:38:28,000 --> 01:38:34,000
我把那个就之前不是很多就是那个就得也代码颜色高亮吗

2510
01:38:34,000 --> 01:38:35,000
嗯

2511
01:38:35,000 --> 01:38:38,000
我把它调到最基本的模式了

2512
01:38:38,000 --> 01:38:42,000
就只会标出啊注释

2513
01:38:42,000 --> 01:38:43,000
用了鞋子

2514
01:38:43,000 --> 01:38:47,000
然后那个叫字符串

2515
01:38:47,000 --> 01:38:51,000
用的是一个另外的颜色

2516
01:38:51,000 --> 01:38:52,000
对

2517
01:38:52,000 --> 01:38:55,000
然后其他的那些高亮的颜色都关掉了

2518
01:38:55,000 --> 01:38:57,000
哈靠啊

2519
01:38:57,000 --> 01:38:58,000
哈哈哈

2520
01:38:58,000 --> 01:39:04,000
你们是不是有一个默认的 sim 叫做呃 green

2521
01:39:04,000 --> 01:39:05,000
还是叫什么

2522
01:39:05,000 --> 01:39:10,000
就是他对他用不同灰度的绿色来显示关键字

2523
01:39:10,000 --> 01:39:11,000
哎对我想问一个 vim 默认的 sim 叫做 green 吗?

2524
01:39:11,000 --> 01:39:12,000
对我想问一个 vim 默认的 sim 叫做 green 吗?

2525
01:39:12,000 --> 01:39:14,000
味的主题叫什么

2526
01:39:14,000 --> 01:39:16,000
就叫 default 吗

2527
01:39:16,000 --> 01:39:17,000
对就叫 default

2528
01:39:17,000 --> 01:39:19,000
啊 ok

2529
01:39:19,000 --> 01:39:26,000
我记得早期学到的比较重要的一个一个 trick 就是在呃

2530
01:39:26,000 --> 01:39:32,000
某些情况下你可能呃 SSH 到另外一台主机上边的时候

2531
01:39:32,000 --> 01:39:37,000
发现那台主机和你的中端模拟器的配色不匹配

2532
01:39:37,000 --> 01:39:40,000
然后你中端模拟器里面可能紫色特别特别的暗啊

2533
01:39:40,000 --> 01:39:43,000
或者是蓝色特别特别的暗

2534
01:39:43,000 --> 01:39:43,000
根本看不清楚

2535
01:39:43,000 --> 01:39:46,000
那个远端服务器上

2536
01:39:46,000 --> 01:39:47,000
这个代码到底是什么的时候

2537
01:39:47,000 --> 01:39:54,000
就在 Vim 里面打 set color sim flord

2538
01:39:54,000 --> 01:39:57,000
就是精灵灵主

2539
01:39:57,000 --> 01:39:59,000
这个字

2540
01:39:59,000 --> 01:40:02,000
然后在 99%的情况之下

2541
01:40:02,000 --> 01:40:04,000
它会使得你能够看清楚

2542
01:40:04,000 --> 01:40:08,000
在 default 的 sim 之下

2543
01:40:08,000 --> 01:40:09,000
看不清楚的代码

2544
01:40:09,000 --> 01:40:09,000
这是一个 trick

2545
01:40:09,000 --> 01:40:10,000
这是什么原理

2546
01:40:10,000 --> 01:40:12,000
没有什么原理

2547
01:40:12,000 --> 01:40:18,000
就是 flord 的 sim 的所有的颜色都比较鲜艳

2548
01:40:18,000 --> 01:40:20,000
可能是这个原因

2549
01:40:20,000 --> 01:40:22,000
明白

2550
01:40:22,000 --> 01:40:25,000
然后没有那些就是 dark blue 之类的一种颜色

2551
01:40:25,000 --> 01:40:27,000
会使得你的中端模拟器

2552
01:40:27,000 --> 01:40:30,000
如果色彩模式没有调对的话

2553
01:40:30,000 --> 01:40:35,000
会把远程服务器上的蓝色显示的特别暗

2554
01:40:35,000 --> 01:40:39,000
我到现在为止还没找到单色的

2555
01:40:39,000 --> 01:40:40,000
不过

2556
01:40:40,000 --> 01:40:44,000
反正我现在就是基于一个叫做 e-ink 的这个色

2557
01:40:44,000 --> 01:40:46,000
color scheme 改的

2558
01:40:46,000 --> 01:40:50,000
就是这个代码注释会是一个灰色的

2559
01:40:50,000 --> 01:40:51,000
就是浅一点的颜色

2560
01:40:51,000 --> 01:40:52,000
浅灰色

2561
01:40:52,000 --> 01:40:54,000
然后是鞋体的

2562
01:40:54,000 --> 01:40:57,000
然后那个字符串会是鞋体的

2563
01:40:57,000 --> 01:40:59,000
然后其他都是一个默认的黑色的字

2564
01:40:59,000 --> 01:41:01,000
没有其他颜色

2565
01:41:01,000 --> 01:41:06,000
那它叫 e-ink 吗

2566
01:41:06,000 --> 01:41:07,000
你还是有原因的

2567
01:41:08,000 --> 01:41:08,000
嗯

2568
01:41:08,000 --> 01:41:10,000
就有电子墨水的效果吗

2569
01:41:10,000 --> 01:41:10,000
对对对

2570
01:41:10,000 --> 01:41:10,000
我

2571
01:41:10,000 --> 01:41:13,000
说到这里你用了什么配色

2572
01:41:13,000 --> 01:41:21,000
我的配色是一个经过改动的 monokai

2573
01:41:21,000 --> 01:41:24,000
monokai 是不是很鲜艳那个版本

2574
01:41:24,000 --> 01:41:26,000
还好吧

2575
01:41:26,000 --> 01:41:29,000
我其实不是很清楚

2576
01:41:29,000 --> 01:41:32,000
这个编辑器配色的鲜艳的标准是什么

2577
01:41:32,000 --> 01:41:35,000
我反正现在用的是一个自己改过的 monokai

2578
01:41:35,000 --> 01:41:37,000
OK

2579
01:41:37,000 --> 01:41:39,000
然后 monokai 是一个暗的

2580
01:41:39,000 --> 01:41:40,000
暗的暗色的配色是什么呢

2581
01:41:40,000 --> 01:41:41,000
暗色背景的是吧

2582
01:41:41,000 --> 01:41:42,000
暗色背景

2583
01:41:42,000 --> 01:41:44,000
我以前一直在用 solarize

2584
01:41:44,000 --> 01:41:45,000
就是那个

2585
01:41:45,000 --> 01:41:48,000
那号称科学配色法

2586
01:41:48,000 --> 01:41:49,000
科学配色的 solarize

2587
01:41:49,000 --> 01:41:52,000
但是怎么说呢

2588
01:41:52,000 --> 01:41:53,000
就用过一段时间之后

2589
01:41:53,000 --> 01:42:02,000
我发现在墙在那个侧面设备的光线比较强的情况之下会很容易看不清楚

2590
01:42:02,000 --> 01:42:06,000
对它的那个 contrast 就是对比度是不高的

2591
01:42:06,000 --> 01:42:08,000
对比度比较低的

2592
01:42:08,000 --> 01:42:10,000
我觉得太注重了

2593
01:42:10,000 --> 01:42:11,000
我没感觉

2594
01:42:11,000 --> 01:42:12,000
因为漂亮是漂亮

2595
01:42:12,000 --> 01:42:16,000
但是用多了是感觉不是很好

2596
01:42:16,000 --> 01:42:21,000
然后 solarize 还有一个问题就是它在 256 色的情况之下

2597
01:42:21,000 --> 01:42:24,000
表现不是非常好

2598
01:42:24,000 --> 01:42:35,000
我试过很多很多方法试图让 vim 在 terminal 模式之下使用比较正确的或者比较养眼的 solarize 的配色

2599
01:42:35,000 --> 01:42:38,000
然后发现要改很多很多东西

2600
01:42:38,000 --> 01:42:39,000
首先你的

2601
01:42:40,000 --> 01:42:44,000
terminal 的那个 term 这个字符要改

2602
01:42:44,000 --> 01:42:46,000
这个这个这个场环境变量要改

2603
01:42:46,000 --> 01:42:50,000
然后 vim 里面的 sim 要改

2604
01:42:50,000 --> 01:42:52,000
color sim 要改

2605
01:42:52,000 --> 01:42:57,000
然后有可能你还要在 bash 一上来的时候运行一个脚本来设定某些

2606
01:42:57,000 --> 01:43:05,000
我不是非常清楚他到底干了什么那些一些 tricks 才可以把颜色设定的比较正确

2607
01:43:05,000 --> 01:43:06,000
这挺痛苦的

2608
01:43:06,000 --> 01:43:08,000
monokai 就没这个问题

2609
01:43:08,000 --> 01:43:09,000
嗯

2610
01:43:10,000 --> 01:43:18,000
呃 solarize 他那个的主要问题是他他默认的那个就是 terminal 那个 console 的色盘会跟其他的非常不一样

2611
01:43:18,000 --> 01:43:20,000
对他会逼着你去改那个色盘

2612
01:43:20,000 --> 01:43:25,000
你会把前 16 色改成完全另外一种场景

2613
01:43:25,000 --> 01:43:26,000
然后改了之后会有个问题

2614
01:43:26,000 --> 01:43:32,000
就是既然用别的那种非 solarize 的色盘的话就会有点问题

2615
01:43:32,000 --> 01:43:35,000
经常我们看那个字就看不见了

2616
01:43:35,000 --> 01:43:35,000
没错

2617
01:43:35,000 --> 01:43:36,000
就比如说你装

2618
01:43:36,000 --> 01:43:39,000
如果你用 solarize 的官方解决方案

2619
01:43:39,000 --> 01:43:40,000
把你的

2620
01:43:40,000 --> 01:43:44,000
那个 item 2 的调色盘改了

2621
01:43:44,000 --> 01:43:47,000
此时你在用比如说 brew

2622
01:43:47,000 --> 01:43:51,000
brew 有时候会用不同颜色来告诉你说这个 package 是下载完了啊

2623
01:43:51,000 --> 01:43:53,000
还是出错了之类的

2624
01:43:53,000 --> 01:43:55,000
此时你会发现所有这些颜色都变了

2625
01:43:55,000 --> 01:43:57,000
就可能本来是一个绿色对勾

2626
01:43:57,000 --> 01:43:59,000
现在变成了白色

2627
01:43:59,000 --> 01:44:01,000
对对非常不舒服

2628
01:44:01,000 --> 01:44:02,000
嗯

2629
01:44:04,000 --> 01:44:06,000
所以其实说到这里要

2630
01:44:06,000 --> 01:44:06,000
哎

2631
01:44:06,000 --> 01:44:08,000
刚才问那个你你用暗色背景的话

2632
01:44:08,000 --> 01:44:10,000
你在那个文档盒

2633
01:44:10,000 --> 01:44:11,000
嘴边时间切换的时候

2634
01:44:11,000 --> 01:44:14,000
眼睛不会觉得那个突然一明一暗吗

2635
01:44:14,000 --> 01:44:16,000
只有在月里会有这个问题

2636
01:44:16,000 --> 01:44:20,000
就是在深夜里面写在马上会有这个问题

2637
01:44:20,000 --> 01:44:20,000
不对啊

2638
01:44:20,000 --> 01:44:22,000
白天其实这个问题更更严重

2639
01:44:22,000 --> 01:44:27,000
因为就是你看白天做环境都是亮的吗

2640
01:44:27,000 --> 01:44:32,000
我觉得夜里比较夜里这种切换的场景的时候

2641
01:44:32,000 --> 01:44:33,000
你眼睛会疼

2642
01:44:33,000 --> 01:44:34,000
但是白天就还好

2643
01:44:34,000 --> 01:44:36,000
如果你的背景足够亮的话

2644
01:44:36,000 --> 01:44:38,000
白天这个问题就没有那么的突出吧

2645
01:44:38,000 --> 01:44:39,000
我觉得对

2646
01:44:39,000 --> 01:44:41,000
但是你你如果背景比较亮的话

2647
01:44:41,000 --> 01:44:43,000
你那个叫什么

2648
01:44:43,000 --> 01:44:46,000
你看那个黑色代码区就很成问题了

2649
01:44:46,000 --> 01:44:50,000
因为你这个时候是要放大你的瞳孔去 focus 到

2650
01:44:50,000 --> 01:44:53,000
那个因为暗色底的话

2651
01:44:53,000 --> 01:44:55,000
他字是是白的吗

2652
01:44:55,000 --> 01:44:56,000
这是亮色的

2653
01:44:56,000 --> 01:44:59,000
他的光线是比较少的

2654
01:44:59,000 --> 01:45:03,000
这个时候你要放大瞳孔才能够接受足够的光去辨识他

2655
01:45:03,000 --> 01:45:04,000
但与此同时呢

2656
01:45:04,000 --> 01:45:07,000
你的这个环境的光照是很高的

2657
01:45:07,000 --> 01:45:09,000
这个是有很多种周围的环境

2658
01:45:09,000 --> 01:45:11,000
你需要受到你的瞳孔里面去

2659
01:45:11,000 --> 01:45:14,000
其实对这个是挺眼睛是挺伤的

2660
01:45:14,000 --> 01:45:16,000
对会会会会引发眼目疲劳

2661
01:45:16,000 --> 01:45:17,000
我同同意的观点

2662
01:45:17,000 --> 01:45:18,000
不过啊

2663
01:45:18,000 --> 01:45:22,000
我可能另外一个原因就是我对这个事情不是特别敏感的

2664
01:45:22,000 --> 01:45:24,000
就是我有两个显示器

2665
01:45:24,000 --> 01:45:27,000
然后那个文档放在一个显示器上

2666
01:45:27,000 --> 01:45:28,000
编辑器在另外一个显示器

2667
01:45:28,000 --> 01:45:29,000
编辑器永远黑的

2668
01:45:31,000 --> 01:45:32,000
OK 就还就还好吧

2669
01:45:33,000 --> 01:45:35,000
啊

2670
01:45:35,000 --> 01:45:37,000
所以其实这点那个 solarize 是一个好处

2671
01:45:37,000 --> 01:45:39,000
就是它是有暗色和亮色

2672
01:45:39,000 --> 01:45:40,000
两个版本的

2673
01:45:40,000 --> 01:45:42,000
我的当时我会切换

2674
01:45:43,000 --> 01:45:47,000
因为切换是我的方言点就是我当时想到就是说

2675
01:45:47,000 --> 01:45:48,000
如果环境很暗

2676
01:45:48,000 --> 01:45:50,000
我就用那个暗色版本的环境很亮

2677
01:45:50,000 --> 01:45:51,000
我就用亮色版本

2678
01:45:51,000 --> 01:45:53,000
后来发现基本上都是很亮的环境

2679
01:45:53,000 --> 01:45:56,000
所以就一直是用那个亮色版本就 light 那个那个版本

2680
01:45:57,000 --> 01:46:00,000
我也我也在 vm 里面绑定过快捷键

2681
01:46:00,000 --> 01:46:03,000
就是按一下快按个 F 9 吧

2682
01:46:03,000 --> 01:46:03,000
我记得还是什么

2683
01:46:03,000 --> 01:46:08,000
对可以在亮色模式和暗色模式之间切换

2684
01:46:08,000 --> 01:46:09,000
但后来

2685
01:46:09,000 --> 01:46:11,000
我觉得还是觉得淡的算了

2686
01:46:11,000 --> 01:46:13,000
哈哈哈哈

2687
01:46:13,000 --> 01:46:15,000
OK 啊

2688
01:46:15,000 --> 01:46:19,000
所以还有刚才就是那个吐槽那个那个颜色的问题

2689
01:46:19,000 --> 01:46:22,000
就你不就你不觉得现在那种 terminal

2690
01:46:22,000 --> 01:46:24,000
或者是 console 这种东西

2691
01:46:24,000 --> 01:46:30,000
它处理这个色彩的方式都非常 ancient

2692
01:46:30,000 --> 01:46:32,000
非常原始了

2693
01:46:32,000 --> 01:46:33,000
都是历史遗留问题吧

2694
01:46:33,000 --> 01:46:37,000
我觉得就我们今天还在使用 terminal simulator

2695
01:46:37,000 --> 01:46:38,000
这件事情

2696
01:46:38,000 --> 01:46:39,000
其实

2697
01:46:39,000 --> 01:46:41,000
仔细想想就很不可思议了

2698
01:46:41,000 --> 01:46:42,000
啊

2699
01:46:42,000 --> 01:46:43,000
每个人都是

2700
01:46:43,000 --> 01:46:46,000
对每个人都知道 common line 非常非常重要

2701
01:46:46,000 --> 01:46:49,000
或是至少在目前 common line 的

2702
01:46:49,000 --> 01:46:52,000
还是没有被人扔到历史垃圾堆里

2703
01:46:52,000 --> 01:46:56,000
但从来没有一个人能够成功的重新发明一面轮子

2704
01:46:56,000 --> 01:46:57,000
然后吧

2705
01:46:57,000 --> 01:46:59,000
把 cli 做的好一点

2706
01:46:59,000 --> 01:47:01,000
对

2707
01:47:01,000 --> 01:47:03,000
就那个命令行本身我觉得是问题不大

2708
01:47:03,000 --> 01:47:06,000
但是就是我们现在那个实现方式真是太古老了

2709
01:47:06,000 --> 01:47:08,000
比如说刚才你说要实现那个文字

2710
01:47:08,000 --> 01:47:11,000
要通过那个输出字符字符来各种转译

2711
01:47:11,000 --> 01:47:15,000
然后甚至连最底层的你在那个啊

2712
01:47:15,000 --> 01:47:18,000
在 linux 上面去去做一个这个 console 接口

2713
01:47:18,000 --> 01:47:20,000
这样一个什么虚拟的那么 tty 设备

2714
01:47:20,000 --> 01:47:24,000
哇真是对我其实我指的就是这件事情

2715
01:47:24,000 --> 01:47:26,000
就是我们只居然还在使用这么古老的

2716
01:47:26,000 --> 01:47:31,000
可以追溯到 1970 年代的啊 terminal simulator

2717
01:47:33,000 --> 01:47:38,000
我可能这个地方还是可以给这个对历史不是特别大

2718
01:47:38,000 --> 01:47:40,000
我也不是属于的听众们介绍的

2719
01:47:40,000 --> 01:47:44,000
就是我们现在使用的那个黑黑的

2720
01:47:44,000 --> 01:47:47,000
我可以敲文字进去的学编程

2721
01:47:47,000 --> 01:47:51,000
莫名其妙一定都要用到这个 terminal

2722
01:47:51,000 --> 01:47:55,000
其实是在模拟 70 年代的电传打字机

2723
01:47:55,000 --> 01:47:58,000
如果你一定要追溯到远就是源头

2724
01:47:58,000 --> 01:48:02,000
在就是说在显示器这个东西出现之前

2725
01:48:02,000 --> 01:48:06,000
计算机是通过打印机就直接连在一个打印机上

2726
01:48:06,000 --> 01:48:07,000
往纸上输出东西

2727
01:48:08,000 --> 01:48:13,000
然后这个东西这个东西的最基本的运作机理

2728
01:48:13,000 --> 01:48:16,000
比如说 askymart 之类的这种东西

2729
01:48:16,000 --> 01:48:19,000
一直都原封不动的被继承到了今天

2730
01:48:19,000 --> 01:48:22,000
然后当显示器出现了之后

2731
01:48:22,000 --> 01:48:24,000
一开始也是只能像电传打字机一样

2732
01:48:24,000 --> 01:48:27,000
一次编辑一行的内容

2733
01:48:27,000 --> 01:48:28,000
然后这一行的内容编辑完了

2734
01:48:28,000 --> 01:48:30,000
你按下回车

2735
01:48:30,000 --> 01:48:35,000
呃才会把这一行的内容出现出现输出在显示器上

2736
01:48:35,000 --> 01:48:38,000
直到就是我们现在习惯的这种

2737
01:48:38,000 --> 01:48:39,000
你打开 Vim 之后

2738
01:48:39,000 --> 01:48:42,000
光标从呃

2739
01:48:42,000 --> 01:48:43,000
wait a second

2740
01:48:43,000 --> 01:48:45,000
还是在左上

2741
01:48:45,000 --> 01:48:48,000
光标从你当前行跳到左上

2742
01:48:48,000 --> 01:48:49,000
并且你可以跳到任意一行

2743
01:48:49,000 --> 01:48:50,000
这样你多按几次回车

2744
01:48:50,000 --> 01:48:51,000
你就可以跳到任意一行

2745
01:48:51,000 --> 01:48:55,000
然后再跳回来这种这种特性都已经是非常高端的特性了

2746
01:48:55,000 --> 01:49:00,000
在在这个呃单侧显示器的时代

2747
01:49:00,000 --> 01:49:03,000
就是你可以想象说早期单侧显示器的时代

2748
01:49:03,000 --> 01:49:06,000
那些电脑键盘上是没有方向键的

2749
01:49:06,000 --> 01:49:07,000
为什么呢

2750
01:49:07,000 --> 01:49:08,000
因为哈哈哈

2751
01:49:08,000 --> 01:49:09,000
你按下关键没有什么软硬

2752
01:49:09,000 --> 01:49:12,000
你根本不可能把光标跳到上面一行

2753
01:49:12,000 --> 01:49:12,000
或者下面一行

2754
01:49:12,000 --> 01:49:16,000
因为你的电脑就只理解当前行的内容

2755
01:49:16,000 --> 01:49:20,000
而我们现在使用的这样一个小的

2756
01:49:20,000 --> 01:49:22,000
Terminal Simulator 这么一个 APP

2757
01:49:22,000 --> 01:49:26,000
其实是在原封不动的模拟这些 70 年的技术

2758
01:49:26,000 --> 01:49:29,000
而我们对此也都是司空见惯的

2759
01:49:29,000 --> 01:49:31,000
从来没有人想过要把它

2760
01:49:31,000 --> 01:49:31,000
当然好吧

2761
01:49:31,000 --> 01:49:33,000
我必须承认说

2762
01:49:33,000 --> 01:49:37,000
Plan 9 其实是已经解决了这个问题的

2763
01:49:37,000 --> 01:49:39,000
但是就像我们知道的 Plan 9

2764
01:49:39,000 --> 01:49:40,000
因为它太好了

2765
01:49:40,000 --> 01:49:41,000
所以它不可能流行起来

2766
01:49:41,000 --> 01:49:45,000
这是一个悲伤的更新

2767
01:49:45,000 --> 01:49:48,000
Doomed to live in this ancient world

2768
01:49:48,000 --> 01:49:52,000
涂了好多草

2769
01:49:52,000 --> 01:49:55,000
这个绕得有点远

2770
01:49:55,000 --> 01:49:57,000
对 还是得把圈子兜回来

2771
01:49:57,000 --> 01:50:00,000
接着讲 Debugging 的事情

2772
01:50:00,000 --> 01:50:03,000
这个我们之后有时间再来探讨这个问题

2773
01:50:03,000 --> 01:50:06,000
其实还有挺多有意思的事情可以一起讨论

2774
01:50:06,000 --> 01:50:10,000
可能从另一方侧面讲说

2775
01:50:10,000 --> 01:50:14,000
为什么 Terminal Simulator 这么多年以来一直没有进展

2776
01:50:14,000 --> 01:50:17,000
一个原因也就是 Windows

2777
01:50:17,000 --> 01:50:21,000
或者说图形化界面实在是发展的太快了

2778
01:50:21,000 --> 01:50:23,000
人们没有时间停下来

2779
01:50:23,000 --> 01:50:31,000
回过头去好好地把命令行界面的承载容器改变一下

2780
01:50:31,000 --> 01:50:32,000
因为如果你要去问

2781
01:50:32,000 --> 01:50:36,000
这个世界上到底是使用 IDE 的写程序的人多

2782
01:50:36,000 --> 01:50:38,000
还是使用命令行写程序的人多

2783
01:50:38,000 --> 01:50:43,000
我觉得一个比较合理的推断是

2784
01:50:43,000 --> 01:50:46,000
肯定是用 IDE 写程序的人多

2785
01:50:46,000 --> 01:50:48,000
就是压倒性多数

2786
01:50:48,000 --> 01:50:53,000
压倒性 99%以上的人是在用 IDE 写程序的

2787
01:50:53,000 --> 01:50:54,000
想要反驳这件事情的人

2788
01:50:54,000 --> 01:50:58,000
首先要想到有很多人他不是专业的程序员

2789
01:50:58,000 --> 01:51:01,000
但他仍旧必须通过某种工具来编程序

2790
01:51:01,000 --> 01:51:04,000
你让他们去使用命令行是非常不人道的

2791
01:51:04,000 --> 01:51:06,000
比如说刚才

2792
01:51:06,000 --> 01:51:11,000
我们一开始提到研究脑科学的赵成博士

2793
01:51:11,000 --> 01:51:16,000
你为什么要逼他去用命令行写程序

2794
01:51:16,000 --> 01:51:18,000
或者是一些

2795
01:51:18,000 --> 01:51:24,000
乃至广义上写 office 里面的 VB script 的人

2796
01:51:24,000 --> 01:51:26,000
都可以在一种

2797
01:51:26,000 --> 01:51:26,000
对

2798
01:51:26,000 --> 01:51:28,000
使用比较

2799
01:51:28,000 --> 01:51:33,000
他所使用的工具都可以当作一种广义上的 IDE 来看待

2800
01:51:33,000 --> 01:51:33,000
对

2801
01:51:33,000 --> 01:51:34,000
没错

2802
01:51:34,000 --> 01:51:35,000
对

2803
01:51:36,000 --> 01:51:38,000
,那什么是 IDE 呢

2804
01:51:38,000 --> 01:51:41,000
有一个解法就是 integrate debugging environment

2805
01:51:41,000 --> 01:51:44,000
也就是 IDE 这个工具

2806
01:51:44,000 --> 01:51:48,000
最重要的功能之一就是帮助你 debug

2807
01:51:48,000 --> 01:51:50,000
还成主控环境

2808
01:51:50,000 --> 01:51:51,000
对

2809
01:51:51,000 --> 01:51:57,000
他把你的 editor 和项目管理工具和版本控制工具

2810
01:51:57,000 --> 01:52:03,000
以及最重要的一个 debug 工具集成在一起

2811
01:52:03,000 --> 01:52:06,000
才孕育出了这么一个非常好用的案件

2812
01:52:06,000 --> 01:52:08,000
就是这个 IDE 环境

2813
01:52:08,000 --> 01:52:17,000
所以 real 你是即便现在也是会在公司里面也不用 IDE 吗

2814
01:52:17,000 --> 01:52:20,000
这个问题有点绕

2815
01:52:20,000 --> 01:52:23,000
就是你现在仍旧哪怕是在工作的时候也不用 IDE 吗

2816
01:52:23,000 --> 01:52:26,000
我自己是不用 IDE 的

2817
01:52:26,000 --> 01:52:31,000
但我看有些其他的人他们会用一些东西去写

2818
01:52:31,000 --> 01:52:35,000
当然你知道现在因为现在写 app 是显学对吧

2819
01:52:35,000 --> 01:52:36,000
就是各种应用

2820
01:52:36,000 --> 01:52:39,000
这个时候你就不得不用什么比如说 xcode

2821
01:52:39,000 --> 01:52:41,000
你逃不掉的

2822
01:52:41,000 --> 01:52:45,000
然后 xcode 当然是一个比较极端的例子

2823
01:52:45,000 --> 01:52:47,000
他逼迫你用这个

2824
01:52:47,000 --> 01:52:48,000
对

2825
01:52:48,000 --> 01:52:50,000
但其他你也没得太多选

2826
01:52:50,000 --> 01:52:52,000
比如说你写 Java 应用

2827
01:52:52,000 --> 01:52:55,000
你跑不掉 Eclipse 和 JetBrain 之类的对吧

2828
01:52:55,000 --> 01:52:58,000
我觉得 Java 的可选的 IDE 还是蛮多的

2829
01:52:58,000 --> 01:53:01,000
但是可选的 IDE 是很多

2830
01:53:01,000 --> 01:53:03,000
但是他们都是用 IDE 写的

2831
01:53:03,000 --> 01:53:05,000
很少见用 Vim 写成这样的

2832
01:53:05,000 --> 01:53:05,000
很少见用 Vim 写成这样的

2833
01:53:05,000 --> 01:53:06,000
很少见用 Vim 写成这样的

2834
01:53:06,000 --> 01:53:13,000
因为是比较

2835
01:53:13,000 --> 01:53:14,000
对

2836
01:53:14,000 --> 01:53:17,000
然后还有就是 Visual Studio 这个系列的

2837
01:53:17,000 --> 01:53:22,000
基本上也是比较少用纯编辑器写的

2838
01:53:22,000 --> 01:53:25,000
我在直播上看到过一个说法

2839
01:53:25,000 --> 01:53:27,000
就是说

2840
01:53:27,000 --> 01:53:31,000
C-Shop 和 Java 之类的都是叫什么

2841
01:53:31,000 --> 01:53:33,000
面向 IDE 的编程语言

2842
01:53:33,000 --> 01:53:36,000
他们从设计之初就是考虑到这个字幕的

2843
01:53:36,000 --> 01:53:36,000
他们从设计之初就是考虑到这个字幕的

2844
01:53:36,000 --> 01:53:38,000
这个语言一定要在 IDE 里面被写

2845
01:53:38,000 --> 01:53:41,000
才比较正常

2846
01:53:41,000 --> 01:53:46,000
所以他们才不会去考虑什么

2847
01:53:46,000 --> 01:53:50,000
那个方法名称太长或者关键字太长之类的问题

2848
01:53:50,000 --> 01:53:52,000
反正有自动补齐嘛

2849
01:53:52,000 --> 01:53:56,000
没错比如说 integer 一定要写成 integer

2850
01:53:56,000 --> 01:54:00,000
不像 C 里面写个 int 或者是

2851
01:54:00,000 --> 01:54:03,000
比如一开始说到那个 printf

2852
01:54:03,000 --> 01:54:06,000
刚学编程的时候你想过 f 代表什么呢?

2853
01:54:06,000 --> 01:54:14,000
就是你刚才说的时候你说这个函数是系统的一个函数

2854
01:54:14,000 --> 01:54:16,000
它可以输出一个字幕串

2855
01:54:16,000 --> 01:54:17,000
当时其实我想纠正你说不对

2856
01:54:17,000 --> 01:54:20,000
输出字幕串是 puts

2857
01:54:20,000 --> 01:54:22,000
那个 s 才代表 string

2858
01:54:22,000 --> 01:54:26,000
而 printf 的 f 代表的其实是 format

2859
01:54:26,000 --> 01:54:31,000
就是 printf 这个函数最大的功能是让你输出一些内容

2860
01:54:31,000 --> 01:54:35,000
然后这个内容是有一个特定的 format

2861
01:54:35,000 --> 01:54:36,000
所以它叫

2862
01:54:36,000 --> 01:54:37,000
printf

2863
01:54:37,000 --> 01:54:40,000
但是如果是一个面向

2864
01:54:40,000 --> 01:54:42,000
ide 的编程源的话

2865
01:54:42,000 --> 01:54:46,000
它此处一定会不吝

2866
01:54:46,000 --> 01:54:48,000
字符数的

2867
01:54:48,000 --> 01:54:52,000
把这个方法命名为

2868
01:54:52,000 --> 01:54:58,000
output string with format

2869
01:54:58,000 --> 01:55:01,000
与此类似的比如说还有什么 sprintf

2870
01:55:01,000 --> 01:55:02,000
第一个 s 代表什么呢?

2871
01:55:02,000 --> 01:55:05,000
代表 string 就是

2872
01:55:05,000 --> 01:55:06,000
把 format 的

2873
01:55:06,000 --> 01:55:08,000
内容输出到另外一个字幕串

2874
01:55:08,000 --> 01:55:13,000
其实这些早期的黑客们为了节省时间

2875
01:55:13,000 --> 01:55:18,000
以及没有 ide 的状况

2876
01:55:18,000 --> 01:55:22,000
导致他们开发了这么一套非常

2877
01:55:22,000 --> 01:55:23,000
简略的语言

2878
01:55:23,000 --> 01:55:28,000
也对早期学编程的人造成了一定的障碍

2879
01:55:28,000 --> 01:55:31,000
有些人可能不是

2880
01:55:31,000 --> 01:55:34,000
不习惯那种一上来说我给你个例子

2881
01:55:34,000 --> 01:55:36,000
你先别管 321

2882
01:55:36,000 --> 01:55:37,000
你把它敲出来

2883
01:55:37,000 --> 01:55:39,000
然后做别的

2884
01:55:39,000 --> 01:55:41,000
一步一步学下去再说

2885
01:55:41,000 --> 01:55:42,000
他可能一上来就会说

2886
01:55:42,000 --> 01:55:45,000
就会想要明白说这个 main 到底是干什么

2887
01:55:45,000 --> 01:55:46,000
这个 int 到底是干什么

2888
01:55:46,000 --> 01:55:49,000
然后这个 printf 到底代表什么

2889
01:55:49,000 --> 01:55:52,000
然后如果他在一上来学的时候

2890
01:55:52,000 --> 01:55:56,000
这些在他看来非常基本的细节都找不到答案的话

2891
01:55:56,000 --> 01:55:58,000
他很快就没有兴趣了

2892
01:55:58,000 --> 01:56:01,000
我觉得我早期就是这样

2893
01:56:01,000 --> 01:56:04,000
有点那个看起来有点 cryptic 那个代码

2894
01:56:04,000 --> 01:56:06,000
对

2895
01:56:06,000 --> 01:56:07,000
密密闻

2896
01:56:07,000 --> 01:56:10,000
刚有点漏出了就是那些命名这么短

2897
01:56:10,000 --> 01:56:13,000
除了也没有 ide 的这个自动补齐的功能以外

2898
01:56:13,000 --> 01:56:14,000
还有一个更重要的点

2899
01:56:14,000 --> 01:56:17,000
刚刚我们讲的扯了那堆的 terminal 的关系

2900
01:56:17,000 --> 01:56:20,000
就是早期的那些 console 宽度比较有限

2901
01:56:20,000 --> 01:56:22,000
只有 80 个字符

2902
01:56:22,000 --> 01:56:24,000
60 个字符这样

2903
01:56:24,000 --> 01:56:26,000
他如果那个方法名特别长的话

2904
01:56:26,000 --> 01:56:28,000
他那一行就悲剧了

2905
01:56:28,000 --> 01:56:30,000
可能就写一个函数还写不完

2906
01:56:30,000 --> 01:56:32,000
调用还写不完

2907
01:56:32,000 --> 01:56:34,000
就这么一个考虑在里面

2908
01:56:34,000 --> 01:56:35,000
然后有了 ide

2909
01:56:35,000 --> 01:56:38,000
都是在这个故意的就是图形界面情况下

2910
01:56:38,000 --> 01:56:40,000
那个宽度就可以比较有限

2911
01:56:40,000 --> 01:56:42,000
就有这个富余了

2912
01:56:42,000 --> 01:56:46,000
而且像现在那个什么用的那个开发用的

2913
01:56:46,000 --> 01:56:49,000
屏幕动辄什么 1920 款甚至更多的吧

2914
01:56:49,000 --> 01:56:51,000
所以这个完全不是问题

2915
01:56:51,000 --> 01:56:52,000
没错

2916
01:56:52,000 --> 01:56:54,000
另外一个原因就是

2917
01:56:54,000 --> 01:56:57,000
早期的电传达的那个不是电传达的

2918
01:56:57,000 --> 01:56:59,000
早期的终端是一个

2919
01:56:59,000 --> 01:57:03,000
就是等于是只有一个键盘和一个显示器

2920
01:57:03,000 --> 01:57:05,000
然后你按一个键

2921
01:57:05,000 --> 01:57:09,000
这个键按下去的电讯号要先传到服务器上

2922
01:57:09,000 --> 01:57:10,000
然后再传回来

2923
01:57:10,000 --> 01:57:12,000
才会在你的终端显示器上

2924
01:57:12,000 --> 01:57:14,000
显示一个字符出来

2925
01:57:14,000 --> 01:57:15,000
这个过程是比较慢的

2926
01:57:15,000 --> 01:57:19,000
如果你把一个函数设计的太长的话

2927
01:57:19,000 --> 01:57:19,000
你可能

2928
01:57:19,000 --> 01:57:21,000
敲了一半发现自己

2929
01:57:21,000 --> 01:57:22,000
敲错了一个字符

2930
01:57:22,000 --> 01:57:23,000
然后要按

2931
01:57:23,000 --> 01:57:26,000
数着自己按回车的那个

2932
01:57:26,000 --> 01:57:29,000
次数然后算自己按到哪个

2933
01:57:29,000 --> 01:57:31,000
自己应该删到哪个字符停下来

2934
01:57:31,000 --> 01:57:33,000
这个过程是非常缓慢的

2935
01:57:33,000 --> 01:57:35,000
这个其实在现代

2936
01:57:35,000 --> 01:57:36,000
也能也能体会到

2937
01:57:36,000 --> 01:57:37,000
就这个过程

2938
01:57:37,000 --> 01:57:38,000
对

2939
01:57:38,000 --> 01:57:41,000
有时候你在使用终端显示

2940
01:57:41,000 --> 01:57:43,000
你就那个 SSH 的时候嘛

2941
01:57:43,000 --> 01:57:45,000
你就连一个比如说你现在在这个德国

2942
01:57:45,000 --> 01:57:47,000
你连一个

2943
01:57:47,000 --> 01:57:48,000
假设

2944
01:57:48,000 --> 01:57:49,000
新西兰的服务器

2945
01:57:49,000 --> 01:57:51,000
我有一段时间那个

2946
01:57:51,000 --> 01:57:52,000
服务器在日本

2947
01:57:52,000 --> 01:57:56,000
就这个状况非常

2948
01:57:56,000 --> 01:57:58,000
就你会发现打一个字

2949
01:57:58,000 --> 01:57:59,000
等一秒

2950
01:57:59,000 --> 01:58:00,000
才出现

2951
01:58:00,000 --> 01:58:01,000
再打一个字又等一秒才出现

2952
01:58:01,000 --> 01:58:04,000
也是因为这个 SSH 这种工具

2953
01:58:05,000 --> 01:58:06,000
还是就刚刚讲的

2954
01:58:06,000 --> 01:58:08,000
是来自历史这种

2955
01:58:08,000 --> 01:58:09,000
这种交互方式

2956
01:58:09,000 --> 01:58:11,000
就是你想就按我们正常一个想法

2957
01:58:11,000 --> 01:58:12,000
你在本地打个字

2958
01:58:12,000 --> 01:58:14,000
为什么会要等到服务器传过来确认

2959
01:58:14,000 --> 01:58:17,000
才会把它显示出来呢对不对

2960
01:58:17,000 --> 01:58:18,000
就很奇怪

2961
01:58:18,000 --> 01:58:20,000
这就是来自那些

2962
01:58:20,000 --> 01:58:21,000
legacy 的东西

2963
01:58:21,000 --> 01:58:25,000
对早期的一些智能终端也就有了这么一个

2964
01:58:25,000 --> 01:58:27,000
所谓的

2965
01:58:27,000 --> 01:58:28,000
local echo 的这么一个功能

2966
01:58:28,000 --> 01:58:30,000
就是你按了一个键

2967
01:58:30,000 --> 01:58:32,000
它现在本地帮你把它显示在

2968
01:58:32,000 --> 01:58:34,000
显示器上

2969
01:58:34,000 --> 01:58:35,000
然后等到那个

2970
01:58:35,000 --> 01:58:36,000
服务端

2971
01:58:36,000 --> 01:58:38,000
传回来确认字符的时候

2972
01:58:38,000 --> 01:58:40,000
你这边已经看到了

2973
01:58:40,000 --> 01:58:41,000
结果

2974
01:58:41,000 --> 01:58:45,000
这已经是早期的一个中间末期的卖点

2975
01:58:45,000 --> 01:58:48,000
对对说到这里就这里安利一个挺好用的工具

2976
01:58:48,000 --> 01:58:49,000
就是 Mosh

2977
01:58:49,000 --> 01:58:51,000
Mobile SSH

2978
01:58:51,000 --> 01:58:52,000
Mobile SSH

2979
01:58:52,000 --> 01:58:55,000
就它能够解决刚才说的那些问题

2980
01:58:55,000 --> 01:58:55,000
对

2981
01:58:55,000 --> 01:58:57,000
它是通过一个叫什么来的

2982
01:58:57,000 --> 01:58:58,000
MIT 做的吧

2983
01:58:58,000 --> 01:59:01,000
对 MIT 的一个学生做的

2984
01:59:01,000 --> 01:59:03,000
然后它这个工具就比较好

2985
01:59:03,000 --> 01:59:05,000
就解决那种在高研

2986
01:59:05,000 --> 01:59:06,000
在高研时

2987
01:59:06,000 --> 01:59:07,000
连接情况下

2988
01:59:07,000 --> 01:59:09,000
你用 SSH 那个刚才那个打一个字

2989
01:59:09,000 --> 01:59:11,000
等半天才会出现的那个问题

2990
01:59:11,000 --> 01:59:13,000
它通过一些叫做本地的

2991
01:59:13,000 --> 01:59:14,000
Predictive 的算法

2992
01:59:14,000 --> 01:59:15,000
就是预测性的算法

2993
01:59:15,000 --> 01:59:17,000
先把那些字给你打出来

2994
01:59:17,000 --> 01:59:18,000
然后等服务器再响应

2995
01:59:18,000 --> 01:59:20,000
服务器如果响应出来没错

2996
01:59:20,000 --> 01:59:22,000
它就按那个就不用改吧对吧

2997
01:59:22,000 --> 01:59:23,000
如果不想出来有问题

2998
01:59:23,000 --> 01:59:26,000
它可能再更新成服务器那个东西

2999
01:59:26,000 --> 01:59:27,000
所以有时候你会遇到会跳

3000
01:59:27,000 --> 01:59:29,000
但是说你至少能够保证你在

3001
01:59:29,000 --> 01:59:32,000
输入这个命令的过程中是比较

3002
01:59:32,000 --> 01:59:34,000
流畅的一个体验吧

3003
01:59:34,000 --> 01:59:34,000
对

3004
01:59:34,000 --> 01:59:36,000
而且它还很屌的一点就是

3005
01:59:36,000 --> 01:59:38,000
你用 Laptop 办公

3006
01:59:38,000 --> 01:59:40,000
然后你打到一半

3007
01:59:40,000 --> 01:59:42,000
把 Laptop 的盖子合上了

3008
01:59:42,000 --> 01:59:44,000
然后再打开

3009
01:59:44,000 --> 01:59:45,000
比如说你在咖啡馆你要弄个座位

3010
01:59:45,000 --> 01:59:48,000
然后如果你用普通的 SSH 的话

3011
01:59:48,000 --> 01:59:50,000
此时你就已经断掉了对吧

3012
01:59:50,000 --> 01:59:51,000
但如果你用 Mouse 的话

3013
01:59:51,000 --> 01:59:53,000
那 PCP 连接已经没有了嘛

3014
01:59:53,000 --> 01:59:54,000
对如果你用 Mouse 的话

3015
01:59:54,000 --> 01:59:56,000
它会自动帮你重新连起来

3016
01:59:56,000 --> 01:59:59,000
是非常非常爽的一件事

3017
01:59:59,000 --> 02:00:01,000
因为它底层是用那个 UDP 来实现

3018
02:00:01,000 --> 02:00:04,000
它是一个无连接的通信协议嘛

3019
02:00:04,000 --> 02:00:06,000
所以的话就可以让你 roaming 嘛

3020
02:00:06,000 --> 02:00:07,000
就是所谓的漫游

3021
02:00:07,000 --> 02:00:08,000
就可以换 IP 啊

3022
02:00:08,000 --> 02:00:10,000
换那些都可以实现的

3023
02:00:10,000 --> 02:00:12,000
然后就整个特别是在

3024
02:00:12,000 --> 02:00:13,000
现在这个什么

3025
02:00:13,000 --> 02:00:15,000
有些人在外面用 4 G 办公

3026
02:00:15,000 --> 02:00:17,000
就可能会遇到这种状况

3027
02:00:17,000 --> 02:00:18,000
就在 4 G

3028
02:00:18,000 --> 02:00:22,000
和 WiFi 之间切换的时候会遇到这种情况比较久

3029
02:00:22,000 --> 02:00:23,000
对

3030
02:00:23,000 --> 02:00:25,000
所以 In case you haven't

3031
02:00:25,000 --> 02:00:27,000
一定要用它

3032
02:00:27,000 --> 02:00:30,000
一定要去跟大家强烈安利

3033
02:00:30,000 --> 02:00:31,000
嗯

3034
02:00:33,000 --> 02:00:34,000
呃

3035
02:00:34,000 --> 02:00:37,000
所以你的同事们有在用 IDE 的吗

3036
02:00:38,000 --> 02:00:40,000
除了 Xcode 出来

3037
02:00:41,000 --> 02:00:43,000
那等等你现在写什么 Python 吗

3038
02:00:44,000 --> 02:00:46,000
我现在写 Go 啊

3039
02:00:46,000 --> 02:00:48,000
写 Go 的话一般还是用编辑器的多少头

3040
02:00:48,000 --> 02:00:49,000
用那个

3041
02:00:50,000 --> 02:00:51,000
IDE 的还是比较少

3042
02:00:52,000 --> 02:00:54,000
所以 Go 语言现在是没有一个

3043
02:00:55,000 --> 02:00:56,000
针定的

3044
02:00:57,000 --> 02:00:58,000
官方针定的

3045
02:00:58,000 --> 02:00:59,000
没有没有没有

3046
02:00:59,000 --> 02:01:01,000
有那个叫

3047
02:01:01,000 --> 02:01:02,000
那个 Rollpack

3048
02:01:02,000 --> 02:01:04,000
自己那个编辑器叫 Acme

3049
02:01:04,000 --> 02:01:07,000
就是我们介绍过的也是 Plan 9 的一部分

3050
02:01:08,000 --> 02:01:09,000
对对对

3051
02:01:09,000 --> 02:01:10,000
这个算是

3052
02:01:11,000 --> 02:01:11,000
就算了

3053
02:01:11,000 --> 02:01:12,000
就是算亲儿子了

3054
02:01:12,000 --> 02:01:13,000
但是其实

3055
02:01:14,000 --> 02:01:18,000
除了他和那个以前 Plan 9 那个就 Biosense 那几个人

3056
02:01:18,000 --> 02:01:20,000
在用这个之外好像外面的人用的比较少吧

3057
02:01:20,000 --> 02:01:22,000
因为他那个确实比较诡异

3058
02:01:23,000 --> 02:01:24,000
比较 hardcore

3059
02:01:25,000 --> 02:01:25,000
对对对

3060
02:01:25,000 --> 02:01:27,000
刚才我讲他是首先没有那个语法高量

3061
02:01:28,000 --> 02:01:30,000
然后他是一个 Proportional 方

3062
02:01:30,000 --> 02:01:31,000
就是等

3063
02:01:31,000 --> 02:01:32,000
就是非等宽字体的

3064
02:01:32,000 --> 02:01:33,000
一个环境

3065
02:01:34,000 --> 02:01:36,000
好像从没讨论过这个问题嘛

3066
02:01:36,000 --> 02:01:37,000
是比较奇怪的

3067
02:01:37,000 --> 02:01:40,000
然后还要记住左键右键中键点起来是什么感觉

3068
02:01:41,000 --> 02:01:43,000
对对对没错

3069
02:01:43,000 --> 02:01:45,000
之前我在知乎的时候

3070
02:01:45,000 --> 02:01:48,000
因为知乎之前很多是用那个 Python 写的嘛

3071
02:01:48,000 --> 02:01:52,000
我发现有几个同事是用那个叫做 PyCharm

3072
02:01:52,000 --> 02:01:53,000
对

3073
02:01:54,000 --> 02:01:57,000
这算是一个 Python 的

3074
02:01:57,000 --> 02:01:58,000
提升开发环境吧

3075
02:01:58,000 --> 02:01:59,000
就是 IDE 了

3076
02:01:59,000 --> 02:02:00,000
算是

3077
02:02:01,000 --> 02:02:03,000
他就对那些什么

3078
02:02:03,000 --> 02:02:04,000
Debugging 的时候

3079
02:02:04,000 --> 02:02:05,000
做的还可以

3080
02:02:06,000 --> 02:02:06,000
没错

3081
02:02:06,000 --> 02:02:09,000
PyCharm 最好用的地方就是 debugging

3082
02:02:10,000 --> 02:02:11,000
在 PyCharm 出现之前

3083
02:02:11,000 --> 02:02:15,000
Python 的官方

3084
02:02:16,000 --> 02:02:18,000
和 Python 的 de facto 的

3085
02:02:19,000 --> 02:02:20,000
最好的 IDE 是什么的

3086
02:02:20,000 --> 02:02:21,000
有吗

3087
02:02:22,000 --> 02:02:25,000
有吗

3088
02:02:25,000 --> 02:02:26,000
没有吧

3089
02:02:26,000 --> 02:02:27,000
Sype

3090
02:02:27,000 --> 02:02:29,000
Sype 也只是一个

3091
02:02:30,000 --> 02:02:30,000
编辑器而已

3092
02:02:31,000 --> 02:02:32,000
对啊

3093
02:02:32,000 --> 02:02:33,000
他不算 IDE

3094
02:02:33,000 --> 02:02:34,000
没有

3095
02:02:34,000 --> 02:02:37,000
动态语言基本上用 IDE 的会比较少

3096
02:02:38,000 --> 02:02:39,000
对

3097
02:02:39,000 --> 02:02:41,000
感觉那个时候大家好像都只是在用

3098
02:02:42,000 --> 02:02:42,000
某种

3099
02:02:43,000 --> 02:02:44,000
某种

3100
02:02:44,000 --> 02:02:49,000
能够组织一系列文件的比如是像那个

3101
02:02:50,000 --> 02:02:55,000
啊一时想不起来名字就在那个 sublime 出现之前大家都喜欢啊 text mate

3102
02:02:56,000 --> 02:02:56,000
对

3103
02:02:57,000 --> 02:03:00,000
还有那个 Mac 上很老的那个 BBEdit

3104
02:03:01,000 --> 02:03:02,000
啊 OK

3105
02:03:02,000 --> 02:03:02,000
你说那个

3106
02:03:03,000 --> 02:03:04,000
那个我从来没有用过

3107
02:03:05,000 --> 02:03:05,000
OK

3108
02:03:06,000 --> 02:03:08,000
我其实刚学

3109
02:03:08,000 --> 02:03:10,000
我刚学 Python 的时候用的是 edit plus

3110
02:03:11,000 --> 02:03:13,000
就是我曾经给你说过的

3111
02:03:14,000 --> 02:03:15,000
一个小红记事本的一个

3112
02:03:16,000 --> 02:03:18,000
icon 的 windows 上的编辑器

3113
02:03:18,000 --> 02:03:19,000
不知道现在还在不在

3114
02:03:20,000 --> 02:03:20,000
OK

3115
02:03:24,000 --> 02:03:25,000
然后

3116
02:03:25,000 --> 02:03:29,000
其实你看吧像比如现在你用写 Java script 的话好像没什么 IDE 可以用

3117
02:03:31,000 --> 02:03:32,000
Java script

3118
02:03:33,000 --> 02:03:34,000
Visual Studio Cloud

3119
02:03:35,000 --> 02:03:38,000
其实就是一个很少的很好的 Java script 的 IDE

3120
02:03:38,000 --> 02:03:40,000
他那个算 IDE 吗

3121
02:03:40,000 --> 02:03:42,000
还是算一个编辑器

3122
02:03:42,000 --> 02:03:43,000
好吧

3123
02:03:44,000 --> 02:03:49,000
Xcode 我觉得其实 Visual Studio Code 是一个介于

3124
02:03:50,000 --> 02:03:52,000
IDE 和编辑器之间的东西

3125
02:03:53,000 --> 02:03:55,000
因为 IDE 能做的事情他基本上都能做

3126
02:03:55,000 --> 02:03:56,000
比如组织一堆文件

3127
02:03:57,000 --> 02:03:59,000
然后设定一个

3128
02:03:59,000 --> 02:04:03,000
项目被执行时候的各种参数

3129
02:04:04,000 --> 02:04:05,000
以及 D 版

3130
02:04:06,000 --> 02:04:11,000
对其实现在你现在他出了一些很多比较新型的编辑器

3131
02:04:11,000 --> 02:04:14,000
其实都有或多或少带有一定的那个 IDE 的属性了

3132
02:04:15,000 --> 02:04:16,000
没错

3133
02:04:16,000 --> 02:04:18,000
就这种强化的编辑器

3134
02:04:18,000 --> 02:04:19,000
他是某种

3135
02:04:19,000 --> 02:04:20,000
介于

3136
02:04:20,000 --> 02:04:22,000
纯粹的文本编辑器和 IDE 之间的状态

3137
02:04:23,000 --> 02:04:23,000
我觉得这挺好

3138
02:04:23,000 --> 02:04:25,000
就轻量级的工具

3139
02:04:26,000 --> 02:04:27,000
嗯

3140
02:04:27,000 --> 02:04:27,000
没错

3141
02:04:28,000 --> 02:04:30,000
对啊

3142
02:04:30,000 --> 02:04:32,000
怎么我没有揣到 IDE 上去了

3143
02:04:33,000 --> 02:04:33,000
因为

3144
02:04:33,000 --> 02:04:35,000
IDE 是一个很重要的 debug 工具

3145
02:04:36,000 --> 02:04:37,000
啊 ok

3146
02:04:38,000 --> 02:04:39,000
对然后

3147
02:04:40,000 --> 02:04:41,000
刚才说到 JavaScript

3148
02:04:42,000 --> 02:04:42,000
其实大部分时候

3149
02:04:43,000 --> 02:04:47,000
给 JavaScript debug 的最好的工具就是浏览器本身

3150
02:04:48,000 --> 02:04:49,000
那个

3151
02:04:50,000 --> 02:04:51,000
开发者工具栏

3152
02:04:52,000 --> 02:04:52,000
没错

3153
02:04:52,000 --> 02:04:53,000
就在

3154
02:04:53,000 --> 02:04:55,000
在 IE 里面 F 12

3155
02:04:56,000 --> 02:04:58,000
没错在 IE

3156
02:04:58,000 --> 02:04:59,000
IE

3157
02:04:59,000 --> 02:05:01,000
是从 9 代才有 F 12 了

3158
02:05:01,000 --> 02:05:02,000
在

3159
02:05:02,000 --> 02:05:03,000
嗯哼

3160
02:05:03,000 --> 02:05:05,000
在 9 代出现之前

3161
02:05:05,000 --> 02:05:07,000
我们都只能 F 5

3162
02:05:07,000 --> 02:05:09,000
哈哈哈

3163
02:05:09,000 --> 02:05:10,000
算等一下

3164
02:05:11,000 --> 02:05:14,000
那个 F 5 算是网页版的打印

3165
02:05:14,000 --> 02:05:16,000
除从方法吧

3166
02:05:16,000 --> 02:05:19,000
没错 F 5 其实就是一个叫什么

3167
02:05:19,000 --> 02:05:21,000
刷新键

3168
02:05:21,000 --> 02:05:22,000
哈哈

3169
02:05:22,000 --> 02:05:23,000
reload

3170
02:05:24,000 --> 02:05:24,000
对

3171
02:05:25,000 --> 02:05:30,000
就跟那个什么加入打印语句之后重新 reload 一下看那个地方到底会不会出现那个东西吗

3172
02:05:31,000 --> 02:05:32,000
没错

3173
02:05:32,000 --> 02:05:33,000
然后这个

3174
02:05:33,000 --> 02:05:34,000
在网页里面就是

3175
02:05:35,000 --> 02:05:37,000
把那个 JavaScript 或者是 CSS

3176
02:05:37,000 --> 02:05:39,000
改一下看一下是不是在那个掌

3177
02:05:39,000 --> 02:05:44,000
如意料之内出现了那个位置然后打了那个东西出来

3178
02:05:44,000 --> 02:05:48,000
对那至于像什么 Liveguard 这种

3179
02:05:48,000 --> 02:05:52,000
帮你按 F 5 的工具就是你只要存在盘它就帮你按下 F 5

3180
02:05:52,000 --> 02:05:54,000
这个还叫什么

3181
02:05:54,000 --> 02:05:57,000
这个还挺高级的一个工具叫什么 auto refresh 是吧

3182
02:05:58,000 --> 02:05:58,000
对

3183
02:05:59,000 --> 02:06:01,000
其实这个就是 Live Programming 的一种形式嘛

3184
02:06:02,000 --> 02:06:03,000
对

3185
02:06:03,000 --> 02:06:03,000
我上次忘了说

3186
02:06:03,000 --> 02:06:09,000
它是那个什么是 Angular 还是 react 还是什么一个

3187
02:06:09,000 --> 02:06:11,000
反正这个前端工具的框架

3188
02:06:11,000 --> 02:06:14,000
它竟然还就是现在就流行说自带一个叫做

3189
02:06:15,000 --> 02:06:18,000
auto reload 的 server 就是一个 node.js 写的一个

3190
02:06:19,000 --> 02:06:20,000
一个一个一个

3191
02:06:20,000 --> 02:06:22,000
Server 然后它会插

3192
02:06:22,000 --> 02:06:26,000
往你那个网页里面代码插了一些一个一段特别的 JavaScript 代码然后它会

3193
02:06:27,000 --> 02:06:28,000
维持一个

3194
02:06:28,000 --> 02:06:29,000
叫什么来的

3195
02:06:30,000 --> 02:06:33,000
websocket 或者是 HGP 的长连接

3196
02:06:33,000 --> 02:06:35,000
然后探测到你那边

3197
02:06:35,000 --> 02:06:40,000
保持了那个东西之后它会通过那个长连接通知你的浏览器

3198
02:06:41,000 --> 02:06:42,000
自动刷新那个代码

3199
02:06:42,000 --> 02:06:44,000
我这个方法我看了一下我也是醉了

3200
02:06:44,000 --> 02:06:45,000
bracket 吧

3201
02:06:46,000 --> 02:06:47,000
你说的是 bracket 吗

3202
02:06:47,000 --> 02:06:48,000
就是那个写前端的

3203
02:06:49,000 --> 02:06:51,000
很多有好几个都是这种都是这个

3204
02:06:51,000 --> 02:06:53,000
这个框架的

3205
02:06:53,000 --> 02:06:56,000
一些帮助的工具都是通过这种方式来实现的

3206
02:06:56,000 --> 02:06:58,000
Espresso 也是这样的我记得

3207
02:07:01,000 --> 02:07:02,000
对没错

3208
02:07:02,000 --> 02:07:06,000
我还装了一个叫什么 ColdKit 我已经好久没有打开过了

3209
02:07:08,000 --> 02:07:11,000
然后后来是什么那个 Chrome 还是那个

3210
02:07:12,000 --> 02:07:15,000
横空出世带了一个叫做 Console 吧对这个工具

3211
02:07:15,000 --> 02:07:18,000
对其实是 Bepit 的一个工具

3212
02:07:18,000 --> 02:07:20,000
对叫做 Inspector 吧最早的那个东西

3213
02:07:21,000 --> 02:07:22,000
对然后就可以什么

3214
02:07:22,000 --> 02:07:23,000
就像

3215
02:07:23,000 --> 02:07:28,000
那个 debugger 那样可以动态修改网页中的某个结构

3216
02:07:28,000 --> 02:07:31,000
对而且可以让你停在某一行代码上

3217
02:07:31,000 --> 02:07:35,000
没错而且不用下断点实在是太人情了

3218
02:07:39,000 --> 02:07:39,000
我觉得

3219
02:07:40,000 --> 02:07:46,000
我记得当初切换到 Chrome 可能也就是因为这个 Inspector 的功能实在是要比

3220
02:07:46,000 --> 02:07:48,000
Firebug 强太多

3221
02:07:49,000 --> 02:07:54,000
然后就现在也是吧现在那个 Chrome 的那个开发者工具就是 Inspector

3222
02:07:54,000 --> 02:07:56,000
应该是在目前为止是在

3223
02:07:56,000 --> 02:07:57,000
像 Safari 啊

3224
02:07:58,000 --> 02:07:58,000
还有 Firefox

3225
02:07:58,000 --> 02:08:01,000
这个你们之间最强大的一个吧

3226
02:08:01,000 --> 02:08:05,000
我觉得是这样但是肯定有听众觉得不是这样的

3227
02:08:06,000 --> 02:08:08,000
但我反正最近也没有什么用

3228
02:08:09,000 --> 02:08:13,000
肯定是这个 Firefox 那个 Firebug 的死忠

3229
02:08:14,000 --> 02:08:18,000
不现在 Firefox 其实自带一个 debug 工具

3230
02:08:19,000 --> 02:08:20,000
不再需要

3231
02:08:20,000 --> 02:08:22,000
他就是把那个 Firebug 整合进去了嘛

3232
02:08:23,000 --> 02:08:24,000
OK

3233
02:08:24,000 --> 02:08:25,000
哦是这么来的

3234
02:08:26,000 --> 02:08:28,000
对对是这样的我没记错因为当时就是说

3235
02:08:29,000 --> 02:08:31,000
开发者都不愿意

3236
02:08:31,000 --> 02:08:33,000
那个用那个 Firefox 的就是

3237
02:08:34,000 --> 02:08:37,000
因为那个 Chrome 的开发者 Inspector 的工具实在太好用了嘛

3238
02:08:37,000 --> 02:08:40,000
他们说什么我这样就感觉到危机了呀

3239
02:08:40,000 --> 02:08:45,000
赶快把那个因为之前 Firebug 以前都是一个非官方第三方的插件嘛对吧

3240
02:08:45,000 --> 02:08:46,000
对

3241
02:08:46,000 --> 02:08:49,000
毕竟不是亲儿子嘛做起来没有那么顺手

3242
02:08:50,000 --> 02:08:50,000
然后来

3243
02:08:51,000 --> 02:08:53,000
不行看不下去了还是整合进来吧

3244
02:08:53,000 --> 02:08:54,000
然后

3245
02:08:54,000 --> 02:08:55,000
燃病卵

3246
02:08:56,000 --> 02:08:57,000
为时已晚

3247
02:08:57,000 --> 02:08:59,000
现在应该是 webkits

3248
02:08:59,000 --> 02:09:01,000
webkits

3249
02:09:01,000 --> 02:09:07,000
为基础的 browser 市占率强过 gecko 吧

3250
02:09:08,000 --> 02:09:09,000
对对对

3251
02:09:10,000 --> 02:09:14,000
现在不是还有那个你看那个叫做上次我们前一集谈论的那个 react native

3252
02:09:14,000 --> 02:09:16,000
这种逆天的玩意儿

3253
02:09:16,000 --> 02:09:18,000
他竟然能够在那个 Chrome 的那个

3254
02:09:18,000 --> 02:09:19,000
Inspector 里面

3255
02:09:20,000 --> 02:09:21,000
去

3256
02:09:21,000 --> 02:09:22,000
实时修改

3257
02:09:22,000 --> 02:09:24,000
跑在 iOS 上面的一个应用

3258
02:09:24,000 --> 02:09:25,000
你感兴趣吗

3259
02:09:25,000 --> 02:09:26,000
对实在是太

3260
02:09:28,000 --> 02:09:30,000
awesomeness full of awesome

3261
02:09:30,000 --> 02:09:31,000
对

3262
02:09:31,000 --> 02:09:33,000
就是之前那个 iOS 还要重新 reload

3263
02:09:34,000 --> 02:09:34,000
还要再传一下

3264
02:09:35,000 --> 02:09:35,000
传到那个

3265
02:09:35,000 --> 02:09:37,000
真机里面才可以

3266
02:09:37,000 --> 02:09:38,000
重试嘛对吧

3267
02:09:38,000 --> 02:09:41,000
他就可以通过远程的方法直接修改

3268
02:09:41,000 --> 02:09:43,000
Chrome 的一个状态然后能够

3269
02:09:43,000 --> 02:09:44,000
瞬间

3270
02:09:44,000 --> 02:09:45,000
同步到

3271
02:09:46,000 --> 02:09:46,000
不叫瞬间同步

3272
02:09:47,000 --> 02:09:47,000
他就是直接是

3273
02:09:48,000 --> 02:09:48,000
那个

3274
02:09:49,000 --> 02:09:50,000
怎么理解呢

3275
02:09:51,000 --> 02:09:55,000
就是 iOS 上面那个应用渲染的结构是来自于 Chrome 里面这个 Inspector 的结构

3276
02:09:56,000 --> 02:09:56,000
对

3277
02:09:57,000 --> 02:09:58,000
反正挺黑科技的

3278
02:09:59,000 --> 02:09:59,000
没错

3279
02:10:00,000 --> 02:10:01,000
总之

3280
02:10:01,000 --> 02:10:03,000
前端开发者实在是太幸福了相比之下

3281
02:10:03,000 --> 02:10:04,000
你看这些

3282
02:10:05,000 --> 02:10:08,000
做服务端的人就 debug 的实在是没有这么

3283
02:10:09,000 --> 02:10:11,000
称手的 debug 的工具

3284
02:10:13,000 --> 02:10:18,000
当然也跟问题的领域有关因为前端的东西是比较容易锁件机做得到的

3285
02:10:18,000 --> 02:10:20,000
而后端的东西很多时候是

3286
02:10:21,000 --> 02:10:23,000
没有什么东西是可以直观可见的

3287
02:10:24,000 --> 02:10:26,000
没有能力啊

3288
02:10:26,000 --> 02:10:27,000
对你做了一个

3289
02:10:30,000 --> 02:10:31,000
高并发

3290
02:10:31,000 --> 02:10:33,000
可以及时

3291
02:10:34,000 --> 02:10:35,000
适应

3292
02:10:35,000 --> 02:10:36,000
用户暴涨的这么一个服务

3293
02:10:37,000 --> 02:10:39,000
你怎么把它锁件机做得

3294
02:10:39,000 --> 02:10:40,000
就是整个

3295
02:10:41,000 --> 02:10:42,000
测试过程是没有办法

3296
02:10:43,000 --> 02:10:45,000
整个 debug 排查的过程是没有办法用一个

3297
02:10:46,000 --> 02:10:49,000
只需要按一个键就可以完成的工具来实现

3298
02:10:50,000 --> 02:10:54,000
对而且现在很多这种大的这种应用它都是跨系统的

3299
02:10:55,000 --> 02:10:56,000
这不是一个单一进程的东西

3300
02:10:56,000 --> 02:10:57,000
就是什么

3301
02:10:57,000 --> 02:10:58,000
来着

3302
02:10:58,000 --> 02:11:00,000
那个 Google 那个 App Engine

3303
02:11:00,000 --> 02:11:01,000
你知道吗

3304
02:11:01,000 --> 02:11:03,000
就是一个很好的云服务那个平台吗

3305
02:11:03,000 --> 02:11:04,000
但是不是最好

3306
02:11:04,000 --> 02:11:06,000
今年吧出了一个什么

3307
02:11:06,000 --> 02:11:07,000
叫做

3308
02:11:07,000 --> 02:11:09,000
好像是叫做 cloud debugging

3309
02:11:09,000 --> 02:11:10,000
云除虫

3310
02:11:11,000 --> 02:11:12,000
就是说

3311
02:11:12,000 --> 02:11:17,000
当你的应用程序跑在不止一台机器甚至不止一个数据中心的情况下

3312
02:11:17,000 --> 02:11:18,000
你怎么去统筹

3313
02:11:19,000 --> 02:11:21,000
多个进程多台机器

3314
02:11:21,000 --> 02:11:24,000
协作产生才能产生的一个 bug

3315
02:11:24,000 --> 02:11:26,000
其实想想还是挺蛋疼的

3316
02:11:27,000 --> 02:11:27,000
非常难

3317
02:11:28,000 --> 02:11:28,000
而且

3318
02:11:29,000 --> 02:11:29,000
呃

3319
02:11:31,000 --> 02:11:32,000
有时候

3320
02:11:32,000 --> 02:11:34,000
一个程序崩溃了

3321
02:11:34,000 --> 02:11:36,000
前端只需要简单的

3322
02:11:36,000 --> 02:11:37,000
把程序再跑一遍

3323
02:11:38,000 --> 02:11:38,000
可是后端

3324
02:11:39,000 --> 02:11:42,000
你可能你唯一能拿到的东西就是一个就是一个 dump

3325
02:11:43,000 --> 02:11:44,000
也就是这个程序

3326
02:11:44,000 --> 02:11:46,000
他挂掉的时候的那个车祸现场

3327
02:11:46,000 --> 02:11:47,000
然后你要像一个

3328
02:11:48,000 --> 02:11:50,000
像一个法警一样

3329
02:11:51,000 --> 02:11:54,000
法医一样

3330
02:11:54,000 --> 02:11:58,000
就试图通过现场一点点蛛丝马迹还原出这个

3331
02:11:59,000 --> 02:12:01,000
案情是怎么发生的然后

3332
02:12:01,000 --> 02:12:04,000
只能做一个数据叫什么 post mode

3333
02:12:04,000 --> 02:12:06,000
就是死后的这样一个尸检

3334
02:12:07,000 --> 02:12:09,000
你没有办法让整个车祸再发生一点

3335
02:12:09,000 --> 02:12:11,000
这是一这也是非常痛苦的

3336
02:12:11,000 --> 02:12:12,000
而且耗时的一件事

3337
02:12:13,000 --> 02:12:14,000
因为 cordump

3338
02:12:14,000 --> 02:12:16,000
不管是 cordump 还是 hipdump

3339
02:12:16,000 --> 02:12:18,000
还是整个环境的 memory dump

3340
02:12:18,000 --> 02:12:20,000
都是非常巨大而且

3341
02:12:21,000 --> 02:12:21,000
需要

3342
02:12:22,000 --> 02:12:22,000
非常

3343
02:12:23,000 --> 02:12:27,000
敏锐的观察力和精力才能搞定这件事

3344
02:12:28,000 --> 02:12:28,000
没错没错

3345
02:12:29,000 --> 02:12:30,000
而且一旦那种就是

3346
02:12:30,000 --> 02:12:31,000
你还不能

3347
02:12:31,000 --> 02:12:32,000
不能用什么打印

3348
02:12:32,000 --> 02:12:33,000
储存法因为

3349
02:12:34,000 --> 02:12:36,000
第一个你没法打印到某个具体的地方去

3350
02:12:36,000 --> 02:12:38,000
你可能就是用 syslog 要汇总

3351
02:12:38,000 --> 02:12:40,000
顺序都是错了

3352
02:12:40,000 --> 02:12:41,000
然后

3353
02:12:41,000 --> 02:12:42,000
各个机上的时间

3354
02:12:43,000 --> 02:12:44,000
他也不一定是完全同步的对吧

3355
02:12:46,000 --> 02:12:47,000
根本就没有什么卵可以打

3356
02:12:48,000 --> 02:12:48,000
对

3357
02:12:49,000 --> 02:12:50,000
再然后就是

3358
02:12:50,000 --> 02:12:53,000
如果你重启一个服务可能他那个

3359
02:12:54,000 --> 02:12:56,000
如果你是一个小的就是 microservice

3360
02:12:56,000 --> 02:12:59,000
微服务的价格可能还行重启一个服务问题不是很大

3361
02:12:59,000 --> 02:13:00,000
你要像现在很多什么

3362
02:13:01,000 --> 02:13:01,000
那个

3363
02:13:02,000 --> 02:13:03,000
游戏的那种

3364
02:13:04,000 --> 02:13:05,000
server 就是游戏的服务器

3365
02:13:06,000 --> 02:13:07,000
他可能光预热

3366
02:13:07,000 --> 02:13:09,000
数据集可能就要好几分钟重启

3367
02:13:10,000 --> 02:13:10,000
对

3368
02:13:11,000 --> 02:13:13,000
那就哭吧

3369
02:13:13,000 --> 02:13:14,000
没错

3370
02:13:15,000 --> 02:13:18,000
或者那些搞大数据分析的人你说他们怎么才能测试自己

3371
02:13:19,000 --> 02:13:22,000
写的这个东西对不对这个算法可能有一些

3372
02:13:22,000 --> 02:13:23,000
非常难以

3373
02:13:24,000 --> 02:13:26,000
解决的问题他们可能要等上

3374
02:13:26,000 --> 02:13:29,000
几个小时还是几天的时间把整个数据再跑一遍

3375
02:13:29,000 --> 02:13:30,000
这是唯一的方法

3376
02:13:31,000 --> 02:13:32,000
没有别的

3377
02:13:32,000 --> 02:13:33,000
可以动态去

3378
02:13:34,000 --> 02:13:34,000
调试的方法

3379
02:13:36,000 --> 02:13:37,000
所以其实最

3380
02:13:37,000 --> 02:13:39,000
最理想的那个状态是那个什么

3381
02:13:39,000 --> 02:13:40,000
而懒了那些那套东西吗

3382
02:13:41,000 --> 02:13:43,000
就二来里面他那些每个

3383
02:13:43,000 --> 02:13:46,000
他的小的子线子进程式可以

3384
02:13:46,000 --> 02:13:47,000
独立重启的

3385
02:13:47,000 --> 02:13:48,000
然后

3386
02:13:48,000 --> 02:13:50,000
可以他可以动态登录到那个

3387
02:13:50,000 --> 02:13:52,000
程序运行态里面去

3388
02:13:52,000 --> 02:13:55,000
动态修改局部代码然后局部重启

3389
02:13:55,000 --> 02:13:55,000
就是不用

3390
02:13:56,000 --> 02:13:58,000
不用重启整个那个程序

3391
02:13:58,000 --> 02:14:01,000
你局部肯肯更新一个函数啊更新一个

3392
02:14:01,000 --> 02:14:02,000
紫禁城

3393
02:14:02,000 --> 02:14:03,000
紫禁城

3394
02:14:03,000 --> 02:14:04,000
然后再跑起来

3395
02:14:05,000 --> 02:14:06,000
非常非常方便

3396
02:14:06,000 --> 02:14:06,000
牛逼

3397
02:14:08,000 --> 02:14:09,000
听似还不错

3398
02:14:10,000 --> 02:14:13,000
我是对儿子没有任何了解

3399
02:14:13,000 --> 02:14:15,000
不知道为什么没有任何兴趣

3400
02:14:17,000 --> 02:14:23,000
因为他那个其实运那个是就说到这个运营商级别的一个环境

3401
02:14:23,000 --> 02:14:25,000
他运营商你不可能说

3402
02:14:25,000 --> 02:14:28,000
我这个电话叫这个交换系统坏了

3403
02:14:28,000 --> 02:14:30,000
我把整个情机然后来

3404
02:14:30,000 --> 02:14:32,000
检修然后重启

3405
02:14:32,000 --> 02:14:35,000
尝试看有没有出错不可能因为你

3406
02:14:35,000 --> 02:14:37,000
你电话停机了那就是什么

3407
02:14:37,000 --> 02:14:39,000
会找造成重大

3408
02:14:39,000 --> 02:14:40,000
社会危机的

3409
02:14:40,000 --> 02:14:41,000
没错

3410
02:14:42,000 --> 02:14:44,000
那个是谁告诉你

3411
02:14:44,000 --> 02:14:46,000
爱丽心啊对啊

3412
02:14:50,000 --> 02:14:53,000
这个也是应该是最好的一个

3413
02:14:54,000 --> 02:14:55,000
可以除虫的环境

3414
02:14:56,000 --> 02:14:57,000
这其实像

3415
02:14:57,000 --> 02:14:59,000
大部分的其他的

3416
02:14:59,000 --> 02:15:02,000
这个语言写的代码都是不可以

3417
02:15:02,000 --> 02:15:04,000
那种局部除虫的吗

3418
02:15:05,000 --> 02:15:06,000
现在同一进程里面我

3419
02:15:06,000 --> 02:15:07,000
你都不可以的

3420
02:15:07,000 --> 02:15:11,000
Lisp 好像有部分是可以

3421
02:15:12,000 --> 02:15:15,000
至少最早的那个 Lisp 是可以登录进去可以改动态修改

3422
02:15:16,000 --> 02:15:17,000
就这个时候要求他是一个动态语言

3423
02:15:17,000 --> 02:15:18,000
对这是必须静态

3424
02:15:19,000 --> 02:15:20,000
就编译型语言就基本没戏了

3425
02:15:20,000 --> 02:15:23,000
就已经被排除在门槛之外

3426
02:15:23,000 --> 02:15:25,000
原理上就不支持这一点

3427
02:15:25,000 --> 02:15:27,000
动态语言其实也就比较少

3428
02:15:28,000 --> 02:15:28,000
主要是一些函数式的语言

3429
02:15:29,000 --> 02:15:30,000
有望支持这一点

3430
02:15:34,000 --> 02:15:40,000
然后后端的做后端的人或者做独立 app 的人

3431
02:15:40,000 --> 02:15:42,000
做一个比较需要

3432
02:15:42,000 --> 02:15:46,000
在一段时间里面查看这个程序

3433
02:15:46,000 --> 02:15:47,000
跑下来没有问题的人

3434
02:15:48,000 --> 02:15:53,000
可能还会用到一个 debug 的一个变种就叫做 profiler

3435
02:15:53,000 --> 02:15:54,000
profiling tool

3436
02:15:55,000 --> 02:15:56,000
这个东西可以

3437
02:15:57,000 --> 02:15:58,000
把一个程序

3438
02:15:59,000 --> 02:16:00,000
去包罗在一个

3439
02:16:01,000 --> 02:16:03,000
受到监控的运行环境里面

3440
02:16:03,000 --> 02:16:08,000
然后看这个看这个程序的运行过程中会不会有一些比如说

3441
02:16:08,000 --> 02:16:10,000
小英台卖呀或者是

3442
02:16:11,000 --> 02:16:12,000
内存泄漏啊之类的问题

3443
02:16:13,000 --> 02:16:16,000
这些东西也可以是一个广义上的

3444
02:16:16,000 --> 02:16:17,000
debug 的用途

3445
02:16:18,000 --> 02:16:20,000
比如说命令行下面有

3446
02:16:20,000 --> 02:16:21,000
叫 vagrant

3447
02:16:22,000 --> 02:16:23,000
是一个

3448
02:16:24,000 --> 02:16:25,000
其实是虚拟机吧

3449
02:16:25,000 --> 02:16:28,000
就是他会把一个 c 程序在这个虚拟机里面运行

3450
02:16:29,000 --> 02:16:29,000
然后

3451
02:16:29,000 --> 02:16:32,000
每运行一步就告诉你说这个

3452
02:16:32,000 --> 02:16:36,000
程序运行的运行到这儿是不是已经扔出了一个

3453
02:16:37,000 --> 02:16:39,000
比如说

3454
02:16:39,000 --> 02:16:41,000
已经没有办法被

3455
02:16:41,000 --> 02:16:43,000
找到的一个内存区域

3456
02:16:44,000 --> 02:16:45,000
又比如说

3457
02:16:45,000 --> 02:16:47,000
Scode 里面也有专门的 profiling tool

3458
02:16:48,000 --> 02:16:50,000
然后你可以让一个 app 在一段时间内运行

3459
02:16:50,000 --> 02:16:51,000
然后他会

3460
02:16:52,000 --> 02:16:58,000
甚至是用图形化的方式会告诉你说这流漏了几 kb 数据

3461
02:16:58,000 --> 02:16:58,000
然后一些

3462
02:16:59,000 --> 02:16:59,000
可能你

3463
02:17:00,000 --> 02:17:01,000
跑上

3464
02:17:02,000 --> 02:17:03,000
一两分钟没问题的 app

3465
02:17:03,000 --> 02:17:05,000
跑上一个小时之后就会

3466
02:17:05,000 --> 02:17:06,000
crash

3467
02:17:06,000 --> 02:17:08,000
你不知道为什么然后你用 profile 一看

3468
02:17:08,000 --> 02:17:09,000
他原来一直在泄漏程序

3469
02:17:10,000 --> 02:17:12,000
泄漏内存然后泄漏了一个小时之后

3470
02:17:12,000 --> 02:17:15,000
你的 iPad 终于没有内存了所以

3471
02:17:15,000 --> 02:17:16,000
他也就 crash

3472
02:17:19,000 --> 02:17:20,000
然后有时候就是

3473
02:17:21,000 --> 02:17:25,000
如果你写 iOSapp 的时候有时候你在调试过程中

3474
02:17:26,000 --> 02:17:28,000
框档给你跳了一大堆汇编代码

3475
02:17:29,000 --> 02:17:30,000
你说你这个时候应该怎么办

3476
02:17:31,000 --> 02:17:31,000
是吗

3477
02:17:32,000 --> 02:17:32,000
是吗

3478
02:17:32,000 --> 02:17:33,000
对啊

3479
02:17:33,000 --> 02:17:35,000
太惨了死了

3480
02:17:36,000 --> 02:17:38,000
所以我是不会

3481
02:17:38,000 --> 02:17:39,000
我是不会汇编

3482
02:17:41,000 --> 02:17:43,000
我也不能说会汇编吧但是

3483
02:17:43,000 --> 02:17:46,000
在这种情况下基本上你都知道

3484
02:17:46,000 --> 02:17:49,000
其实只要一步一步跳下去或者说

3485
02:17:49,000 --> 02:17:50,000
你只要

3486
02:17:50,000 --> 02:17:52,000
把断点设在一个比较

3487
02:17:54,000 --> 02:17:56,000
比较正常的地方然后一步一步跳

3488
02:17:56,000 --> 02:17:58,000
你找到自己要跳进汇编之前

3489
02:17:59,000 --> 02:18:00,000
那一步就知道问题出在哪

3490
02:18:01,000 --> 02:18:01,000
倒不是特别严重

3491
02:18:02,000 --> 02:18:03,000
其实我只是想说

3492
02:18:04,000 --> 02:18:06,000
有些 debugger 会

3493
02:18:06,000 --> 02:18:09,000
把你引领到这个地方就是刚才还是

3494
02:18:09,000 --> 02:18:11,000
高等语言突然一下子

3495
02:18:11,000 --> 02:18:12,000
跳到了这个汇编里面

3496
02:18:12,000 --> 02:18:14,000
你应该怎么办

3497
02:18:16,000 --> 02:18:16,000
对

3498
02:18:16,000 --> 02:18:17,000
这个情况下其实

3499
02:18:18,000 --> 02:18:20,000
我觉得还是有必要稍微学点

3500
02:18:21,000 --> 02:18:21,000
汇编

3501
02:18:21,000 --> 02:18:23,000
至少你不用知道

3502
02:18:23,000 --> 02:18:25,000
你不用把所有指令背下来你也不用

3503
02:18:25,000 --> 02:18:27,000
有能力

3504
02:18:27,000 --> 02:18:28,000
去

3505
02:18:29,000 --> 02:18:32,000
逆向工程或者是

3506
02:18:32,000 --> 02:18:34,000
纯用汇编来写一个

3507
02:18:34,000 --> 02:18:36,000
3 D 加速程序之类的

3508
02:18:36,000 --> 02:18:37,000
这些功能技巧

3509
02:18:38,000 --> 02:18:41,000
你至少要了解一些比如说 calling convention

3510
02:18:41,000 --> 02:18:42,000
是什么

3511
02:18:43,000 --> 02:18:44,000
cost stack 是什么

3512
02:18:45,000 --> 02:18:46,000
然后这些东西你可以

3513
02:18:47,000 --> 02:18:49,000
了解一些最基本的汇编的概念

3514
02:18:50,000 --> 02:18:51,000
对于 debug 其实也有帮助

3515
02:18:53,000 --> 02:18:53,000
所以今天

3516
02:18:53,000 --> 02:18:55,000
大概把

3517
02:18:55,000 --> 02:18:57,000
调试这一块

3518
02:18:57,000 --> 02:18:58,000
总结了一下

3519
02:18:59,000 --> 02:19:00,000
那

3520
02:19:00,000 --> 02:19:01,000
我觉得

3521
02:19:01,000 --> 02:19:03,000
调试技术不管在什么

3522
02:19:03,000 --> 02:19:06,000
重要还是

3523
02:19:06,000 --> 02:19:10,000
没有办法抵过养成一个良好的编程习惯

3524
02:19:10,000 --> 02:19:11,000
来得更重要一点

3525
02:19:11,000 --> 02:19:13,000
就比如我们前面也提到了

3526
02:19:14,000 --> 02:19:15,000
可以

3527
02:19:15,000 --> 02:19:18,000
程序员可以分为两种一种是先确定编辑条件然后写代码

3528
02:19:19,000 --> 02:19:21,000
另外一种是先写代码然后去找这个

3529
02:19:21,000 --> 02:19:25,000
让这个代码能够正确工作的编辑条件是什么

3530
02:19:25,000 --> 02:19:27,000
是两种截然不同的态度

3531
02:19:28,000 --> 02:19:29,000
也许后一种态度会是

3532
02:19:29,000 --> 02:19:29,000
让你

3533
02:19:30,000 --> 02:19:31,000
对于所有的

3534
02:19:31,000 --> 02:19:33,000
debug 工具都了如指掌但

3535
02:19:34,000 --> 02:19:36,000
从严格意义上来说还是

3536
02:19:36,000 --> 02:19:37,000
有前一种

3537
02:19:37,000 --> 02:19:39,000
习惯对你的帮助更大

3538
02:19:40,000 --> 02:19:41,000
行吗

3539
02:19:41,000 --> 02:19:41,000
那

3540
02:19:42,000 --> 02:19:45,000
这一期录了也有两个

3541
02:19:45,000 --> 02:19:46,000
多小时

3542
02:19:46,000 --> 02:19:48,000
可能最终剪出来没有那么多因为

3543
02:19:49,000 --> 02:19:51,000
我们中途也遇到了若干技术故障但

3544
02:19:52,000 --> 02:19:54,000
这一期总算也是达到了长度

3545
02:19:54,000 --> 02:19:57,000
我上一期发现你们的 IT 功论也在

3546
02:19:57,000 --> 02:19:59,000
也在拼长度

3547
02:19:59,000 --> 02:20:00,000
这样对吗

3548
02:20:00,000 --> 02:20:02,000
根本停不下来

3549
02:20:03,000 --> 02:20:06,000
到底发生什么我在听了

3550
02:20:06,000 --> 02:20:07,000
我其实一开始我就说

3551
02:20:07,000 --> 02:20:11,000
我考这期怎么看起来这么长就听出听了之后发现真的这么长

3552
02:20:12,000 --> 02:20:12,000
而且你们

3553
02:20:13,000 --> 02:20:16,000
很不习惯

3554
02:20:16,000 --> 02:20:17,000
呀

3555
02:20:17,000 --> 02:20:18,000
好了

3556
02:20:19,000 --> 02:20:19,000
那

3557
02:20:20,000 --> 02:20:25,000
您刚刚收听到的是 ipn podcast 网络旗下的 IT 技术节目那个火狗

3558
02:20:25,000 --> 02:20:25,000
花

3559
02:20:26,000 --> 02:20:27,000
ipn

3560
02:20:27,000 --> 02:20:29,000
旗下的其他六档 podcast

3561
02:20:29,000 --> 02:20:31,000
包括 softcore 技术主题节目

3562
02:20:31,000 --> 02:20:31,000
IT 公论

3563
02:20:32,000 --> 02:20:38,000
意料主题节目太一来了美食主题节目未知到艺术主题节目流行通信无主题节目无次元

3564
02:20:38,000 --> 02:20:39,000
故事主题节目

3565
02:20:39,000 --> 02:20:40,000
high story

3566
02:20:40,000 --> 02:20:41,000
以及

3567
02:20:42,000 --> 02:20:43,000
影像主题节目映像

3568
02:20:43,000 --> 02:20:44,000
同样欢迎收听

3569
02:20:47,000 --> 02:20:50,000
欢迎你为我们的节目捐款捐款地址是 ipn.li

3570
02:20:50,000 --> 02:20:51,000
cernopanic

3571
02:20:51,000 --> 02:20:52,000
donate

3572
02:20:52,000 --> 02:20:53,000
捐款金额随意

3573
02:20:53,000 --> 02:20:56,000
只要是能够被巴整出的证券书就可以

3574
02:20:56,000 --> 02:20:58,000
上一次我们的

3575
02:20:58,000 --> 02:20:59,000
上一次我

3576
02:20:59,000 --> 02:21:01,000
撒子毁了之后

3577
02:21:01,000 --> 02:21:07,000
恳求各位捐款然后好像的确有几笔捐进来但每笔都是 8 美元

3578
02:21:09,000 --> 02:21:10,000
非常感谢各位

3579
02:21:11,000 --> 02:21:17,000
虽然捐款不会为你带来什么不捐也不会是什么我们的口号是 no hard feelings

3580
02:21:17,000 --> 02:21:18,000
感谢你收听本期节目

3581
02:21:19,000 --> 02:21:19,000
下期再见

3582
02:21:20,000 --> 02:21:21,000
拜拜

