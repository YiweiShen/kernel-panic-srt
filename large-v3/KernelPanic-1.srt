1
00:00:00,000 --> 00:00:02,000
321 开始

2
00:00:02,000 --> 00:00:04,000
我们其实要做一下开场

3
00:00:04,000 --> 00:00:06,000
还是要怎么先介绍一下

4
00:00:06,000 --> 00:00:07,000
我有一个梗

5
00:00:07,000 --> 00:00:10,000
我想想

6
00:00:10,000 --> 00:00:12,000
北京时间百分号 H 点

7
00:00:12,000 --> 00:00:13,000
百分号 M 分

8
00:00:13,000 --> 00:00:16,000
您现在收听到的是内核恐慌

9
00:00:16,000 --> 00:00:18,000
这梗是什么

10
00:00:18,000 --> 00:00:21,000
就因为你别你看

11
00:00:21,000 --> 00:00:23,000
一般人一般做广播的时候

12
00:00:23,000 --> 00:00:27,000
人们会说北京时间 15 点 46 分

13
00:00:27,000 --> 00:00:29,000
然后我说

14
00:00:29,000 --> 00:00:30,000
北京时间

15
00:00:30,000 --> 00:00:32,000
但是你会意识到这是一款 podcast

16
00:00:32,000 --> 00:00:34,000
你根本不知道听众是在什么时候

17
00:00:34,000 --> 00:00:36,000
听这个 podcast

18
00:00:36,000 --> 00:00:37,000
所以我说北京时间

19
00:00:37,000 --> 00:00:38,000
然后愣一下

20
00:00:38,000 --> 00:00:40,000
百分号 H 点

21
00:00:40,000 --> 00:00:41,000
百分号 M 分

22
00:00:41,000 --> 00:00:42,000
所以这是一个 placeholder

23
00:00:42,000 --> 00:00:43,000
对吧

24
00:00:43,000 --> 00:00:43,000
对

25
00:00:43,000 --> 00:00:46,000
就是那个 date format

26
00:00:46,000 --> 00:00:47,000
百分之 H

27
00:00:47,000 --> 00:00:47,000
百分之

28
00:00:47,000 --> 00:00:48,000
百分号 H

29
00:00:48,000 --> 00:00:49,000
百分之 M

30
00:00:49,000 --> 00:00:50,000
这是什么

31
00:00:50,000 --> 00:00:52,000
String

32
00:00:52,000 --> 00:00:54,000
String time format

33
00:00:54,000 --> 00:00:56,000
大家好

34
00:00:56,000 --> 00:00:59,000
这里是我们新开的一档

35
00:00:59,000 --> 00:01:00,000
播客节目

36
00:01:00,000 --> 00:01:02,000
叫做内核恐慌

37
00:01:02,000 --> 00:01:03,000
Colonel Panic

38
00:01:03,000 --> 00:01:05,000
Colonel Panic

39
00:01:05,000 --> 00:01:07,000
然后这里的嘉宾呢

40
00:01:07,000 --> 00:01:09,000
就是我

41
00:01:09,000 --> 00:01:10,000
Rio 和以及吴涛

42
00:01:10,000 --> 00:01:12,000
大家可能听之前听 IT 功能的时候

43
00:01:12,000 --> 00:01:14,000
他已经来过几次了

44
00:01:14,000 --> 00:01:15,000
对

45
00:01:15,000 --> 00:01:17,000
其实咱们两个不能算嘉宾吧

46
00:01:17,000 --> 00:01:17,000
咱们两个应该算

47
00:01:17,000 --> 00:01:18,000
主播对吧

48
00:01:18,000 --> 00:01:19,000
理论上

49
00:01:19,000 --> 00:01:23,000
我们假如这个 podcast

50
00:01:23,000 --> 00:01:25,000
可以积累到足够多的听众的话

51
00:01:25,000 --> 00:01:26,000
我们应该会一直做下去

52
00:01:26,000 --> 00:01:27,000
所以我们都是 host

53
00:01:27,000 --> 00:01:28,000
对

54
00:01:28,000 --> 00:01:28,000
对

55
00:01:28,000 --> 00:01:28,000
对

56
00:01:28,000 --> 00:01:29,000
对

73
00:09:29,000 --> 00:09:29,000
就是桌面嘛

74
00:09:29,000 --> 00:09:31,000
就是 ubuntu 的跑桌面系统

75
00:09:31,000 --> 00:09:33,000
确实太折腾了

76
00:09:33,000 --> 00:09:34,000
对

77
00:09:34,000 --> 00:09:36,000
我觉得可能就是因为我

78
00:09:36,000 --> 00:09:38,000
不停的折腾它

79
00:09:38,000 --> 00:09:41,000
后来我是在 windows 里面装了一个虚拟机

80
00:09:41,000 --> 00:09:43,000
然后在虚拟机里面装了

81
00:09:43,000 --> 00:09:44,000
可能四五个 linux

82
00:09:44,000 --> 00:09:45,000
然后

83
00:09:45,000 --> 00:09:49,000
一开始是觉得

84
00:09:49,000 --> 00:09:54,000
怎么都不能找到一个可新的桌面环境

85
00:09:54,000 --> 00:09:56,000
到后来就变成了

86
00:09:56,000 --> 00:09:59,000
觉得怎么都不能找到一个可新的

87
00:09:59,000 --> 00:10:00,000
那个 windows manager

88
00:10:00,000 --> 00:10:05,000
就是我记得那个时候用用 i 3 还是用一个叫做

89
00:10:05,000 --> 00:10:08,000
E 吧

90
00:10:08,000 --> 00:10:09,000
enlightment 是不是

91
00:10:09,000 --> 00:10:11,000
不是 enlightment

92
00:10:11,000 --> 00:10:14,000
一直想不出来叫什么

93
00:10:14,000 --> 00:10:16,000
awesome 好像叫 awesome

94
00:10:16,000 --> 00:10:18,000
awesomeness

95
00:10:18,000 --> 00:10:20,000
对是一个 windows manager

96
00:10:20,000 --> 00:10:22,000
就是纯他支持纯键盘操作

97
00:10:22,000 --> 00:10:23,000
因为那个时候我

98
00:10:23,000 --> 00:10:28,000
对啊就试图找到一个纯键盘的桌面环境

99
00:10:28,000 --> 00:10:30,000
就是一个 linux 的桌面环境

100
00:10:30,000 --> 00:10:34,000
但后来就还是觉得还买台 mac

101
00:10:34,000 --> 00:10:37,000
我的问题倒不是那么

102
00:10:37,000 --> 00:10:38,000
就不是因为软件的原因

103
00:10:38,000 --> 00:10:41,000
我的因为是那个硬件的事情导致

104
00:10:41,000 --> 00:10:43,000
当时我用的就在跑

105
00:10:43,000 --> 00:10:46,000
ubuntu 的时候用的是一个 thinkpad

106
00:10:46,000 --> 00:10:48,000
然后就经常那个时候是大学上

107
00:10:48,000 --> 00:10:50,000
我要用那个什么一种特殊的

108
00:10:50,000 --> 00:10:53,000
无线认证的一种方式

109
00:10:53,000 --> 00:10:55,000
现在叫锐洁吧是不是

110
00:10:55,000 --> 00:10:56,000
对很多大学里面都有这个

111
00:10:56,000 --> 00:10:58,000
你是在国内的时候

112
00:10:58,000 --> 00:10:58,000
对对国内的时候

113
00:10:58,000 --> 00:11:02,000
就是当之前那个是还我们学校用的还不叫锐洁

114
00:11:02,000 --> 00:11:04,000
是一个什么其他的一个厂商的

115
00:11:04,000 --> 00:11:05,000
我忘了但是意思是差不多的

116
00:11:05,000 --> 00:11:07,000
就不是说像现在

117
00:11:07,000 --> 00:11:08,000
一样你可以连上

118
00:11:08,000 --> 00:11:09,000
还是要认证一下

119
00:11:09,000 --> 00:11:11,000
但是好像不需要装一个特殊的客户端

120
00:11:11,000 --> 00:11:15,000
你只用那个当时是他是针对 windows 开发的嘛

121
00:11:15,000 --> 00:11:18,000
然后你用 windows 那个自带的那个验证一下就可以了

122
00:11:18,000 --> 00:11:19,000
但是问题是

123
00:11:19,000 --> 00:11:23,000
我在那个 ubuntu 上用自带的那个 wifi stack

124
00:11:23,000 --> 00:11:25,000
是打死也验证不过了

125
00:11:25,000 --> 00:11:26,000
就非常非常折腾

126
00:11:26,000 --> 00:11:28,000
而且他好像每隔一段时间会升级一次

127
00:11:28,000 --> 00:11:28,000
就是我可能

128
00:11:28,000 --> 00:11:30,000
配好可能能用一次

129
00:11:30,000 --> 00:11:31,000
去图书馆吧

130
00:11:31,000 --> 00:11:32,000
比如说

131
00:11:32,000 --> 00:11:34,000
然后过个十天半个月

132
00:11:34,000 --> 00:11:36,000
然后发现又连不上了

133
00:11:36,000 --> 00:11:38,000
我就想啊 fuck this

134
00:11:38,000 --> 00:11:40,000
然后就买了一个 mac

135
00:11:40,000 --> 00:11:41,000
然后就

136
00:11:41,000 --> 00:11:42,000
就后来就

137
00:11:42,000 --> 00:11:43,000
后来就出国才买 mac

138
00:11:43,000 --> 00:11:46,000
就是也是因为类似的问题嘛

139
00:11:46,000 --> 00:11:47,000
OK

140
00:11:47,000 --> 00:11:50,000
我记得那个时候我刚到德国

141
00:11:50,000 --> 00:11:53,000
印象比较深的一件事情就是

142
00:11:53,000 --> 00:11:57,000
那个学校的计算机实验室门上贴着一个纸条

143
00:11:57,000 --> 00:11:58,000
写着我们不提供任何

144
00:11:58,000 --> 00:12:00,000
微软产品

145
00:12:00,000 --> 00:12:04,000
然后旁边一张纸条上面写着

146
00:12:04,000 --> 00:12:07,000
如果要下载那个 wifi 的

147
00:12:07,000 --> 00:12:09,000
认证客户端

148
00:12:09,000 --> 00:12:11,000
windows 请去这里

149
00:12:11,000 --> 00:12:12,000
linux 请去那里

150
00:12:12,000 --> 00:12:13,000
然后我就觉得哇

151
00:12:13,000 --> 00:12:16,000
linux 用户真是

152
00:12:16,000 --> 00:12:17,000
畅通无阻

153
00:12:17,000 --> 00:12:20,000
这点跟我在德国的另外一个学校遇到的以前也差不多

154
00:12:20,000 --> 00:12:21,000
当时

155
00:12:21,000 --> 00:12:22,000
我不是德国大了一年吗

156
00:12:22,000 --> 00:12:24,000
也是在另外一个学校交换

157
00:12:24,000 --> 00:12:25,000
是在他们的那个

158
00:12:25,000 --> 00:12:27,000
informatic 系

159
00:12:27,000 --> 00:12:28,000
对

160
00:12:28,000 --> 00:12:30,000
informatic

161
00:12:30,000 --> 00:12:33,000
就是德语的 computer science

162
00:12:33,000 --> 00:12:35,000
信息科学的

163
00:12:35,000 --> 00:12:36,000
对

164
00:12:36,000 --> 00:12:37,000
然后

165
00:12:37,000 --> 00:12:37,000
就是

166
00:12:37,000 --> 00:12:40,000
爱丁堡的

167
00:12:40,000 --> 00:12:43,000
计算机学院也叫做 informatic

168
00:12:43,000 --> 00:12:46,000
是 c 吧就是那个字母

169
00:12:46,000 --> 00:12:47,000
是 informatics

170
00:12:47,000 --> 00:12:48,000
对

171
00:12:48,000 --> 00:12:49,000
c s

172
00:12:49,000 --> 00:12:50,000
c s 不是 k

173
00:12:50,000 --> 00:12:51,000
不是 k

174
00:12:51,000 --> 00:12:53,000
我觉得还挺神奇的

175
00:12:53,000 --> 00:12:55,000
其实我觉得这个更合理啊

176
00:12:55,000 --> 00:12:56,000
computer science

177
00:12:56,000 --> 00:12:58,000
sounds weird

178
00:12:58,000 --> 00:12:59,000
informatic

179
00:12:59,000 --> 00:13:00,000
听起来比较屌

180
00:13:00,000 --> 00:13:02,000
信息学是吧

181
00:13:02,000 --> 00:13:03,000
对信息学

182
00:13:03,000 --> 00:13:04,000
信息学

183
00:13:04,000 --> 00:13:06,000
其实信息学在国内是不是跟

184
00:13:06,000 --> 00:13:08,000
其他的科目什么有点关系

185
00:13:08,000 --> 00:13:10,000
跟 computer science 不是严格一样

186
00:13:10,000 --> 00:13:14,000
信息学好像是什么情报信息专业

187
00:13:14,000 --> 00:13:16,000
他们做的事情是

188
00:13:16,000 --> 00:13:18,000
间谍那一类的

189
00:13:18,000 --> 00:13:20,000
对他们比较偏向于

190
00:13:22,000 --> 00:13:24,000
不那么计算机科学的部分

191
00:13:24,000 --> 00:13:26,000
就是信息传输啊

192
00:13:26,000 --> 00:13:28,000
还有什么

193
00:13:28,000 --> 00:13:30,000
乃至雷达之类的好像都有

194
00:13:30,000 --> 00:13:34,000
所以是一个更 hardcore 的一个科目

195
00:13:34,000 --> 00:13:36,000
对一个偏向于通讯的专业应该说

196
00:13:36,000 --> 00:13:37,000
OK

197
00:13:37,000 --> 00:13:38,000
刚刚说哪里了

198
00:13:38,000 --> 00:13:41,000
对我在那个德国的时候发现这个

199
00:13:41,000 --> 00:13:43,000
就德国的就是 lug 啊

200
00:13:43,000 --> 00:13:44,000
Linux unit group

201
00:13:44,000 --> 00:13:46,000
好像特别

202
00:13:46,000 --> 00:13:48,000
特别 hardcore

203
00:13:48,000 --> 00:13:51,000
就比较多而且他们会很坚持

204
00:13:51,000 --> 00:13:52,000
就很多事情他

205
00:13:52,000 --> 00:13:54,000
不想用这个

206
00:13:54,000 --> 00:13:56,000
付费或者是特别是微软的产品啊

207
00:13:56,000 --> 00:13:57,000
当时我在那个系的时候

208
00:13:57,000 --> 00:14:00,000
也是有一个有一个有一个门上面

209
00:14:00,000 --> 00:14:02,000
居时他们也是就是

210
00:14:02,000 --> 00:14:04,000
叫什么 technical support

211
00:14:04,000 --> 00:14:06,000
然后他们也是说 windows

212
00:14:06,000 --> 00:14:07,000
去另外那边玩

213
00:14:07,000 --> 00:14:10,000
然后这边只管那个 unix 那一系统

214
00:14:10,000 --> 00:14:13,000
对所以我觉得这挺不错的

215
00:14:13,000 --> 00:14:16,000
德国是这样就是如果你的政府部门

216
00:14:16,000 --> 00:14:20,000
开发什么软件这个东西只支持 windows

217
00:14:20,000 --> 00:14:22,000
立刻会有人去抱怨

218
00:14:22,000 --> 00:14:25,000
就是德国有一个德国报税可以在网上报税

219
00:14:25,000 --> 00:14:26,000
然后

220
00:14:26,000 --> 00:14:27,000
这个报税部门一开始是什么的

221
00:14:27,000 --> 00:14:29,000
一开始只有一个 windows 的软件

222
00:14:29,000 --> 00:14:31,000
后来被人抱怨

223
00:14:31,000 --> 00:14:33,000
他们不得不开发了一个 linux 的软件

224
00:14:33,000 --> 00:14:35,000
现在你在 linux 上面就可以报税

225
00:14:35,000 --> 00:14:37,000
但 mac 用户

226
00:14:37,000 --> 00:14:39,000
激情还是没有

227
00:14:39,000 --> 00:14:43,000
受到重视就是可能德国政府也觉得你既然有钱买得起 mac

228
00:14:43,000 --> 00:14:46,000
那就请你去花钱买那个 mac 下面的报税软件

229
00:14:46,000 --> 00:14:49,000
他是一个专业的客户端不是一个网页版吗

230
00:14:49,000 --> 00:14:50,000
是一个专业的客户端

231
00:14:50,000 --> 00:14:51,000
报税必须用一个专业的客户端

232
00:14:51,000 --> 00:14:53,000
这个客户端会

233
00:14:53,000 --> 00:14:57,000
做会用数字证书给你签名然后通过加密信道吧

234
00:14:57,000 --> 00:15:01,000
那个报税表单发给政府部门

235
00:15:01,000 --> 00:15:02,000
这么复杂

236
00:15:02,000 --> 00:15:04,000
加密大报税比较简单

237
00:15:04,000 --> 00:15:04,000
就是你

238
00:15:04,000 --> 00:15:06,000
他是

239
00:15:06,000 --> 00:15:08,000
就政府不提供任何这种官方的界面给你

240
00:15:08,000 --> 00:15:11,000
你可以用纸张的方式填表去报嘛

241
00:15:11,000 --> 00:15:14,000
然后但是其实大多数人还是找一个这种

242
00:15:14,000 --> 00:15:15,000
你刚才讲的那种软件

243
00:15:15,000 --> 00:15:16,000
但是那种软件也就是

244
00:15:16,000 --> 00:15:19,000
做那个软件的公司他同时有这种客户端版本

245
00:15:19,000 --> 00:15:21,000
比如说你可以装到你的这个

246
00:15:21,000 --> 00:15:23,000
mac 上可以装到你的 windows 上

247
00:15:23,000 --> 00:15:26,000
甚至还有那个 iPhone 就是 iOS 的版本

248
00:15:26,000 --> 00:15:27,000
但是我一直用的都是这个 iOS 版本

249
00:15:27,000 --> 00:15:29,000
就是他们的一个网页版

250
00:15:29,000 --> 00:15:31,000
但虽然很丑但是好歹能用

251
00:15:31,000 --> 00:15:31,000
而且

252
00:15:31,000 --> 00:15:32,000
我试了一下吧

253
00:15:32,000 --> 00:15:34,000
就是跨浏览器的这个

254
00:15:34,000 --> 00:15:36,000
兼容性还不错

255
00:15:36,000 --> 00:15:38,000
对也许这是更好的一种选择

256
00:15:38,000 --> 00:15:40,000
我不知道为什么德国人一定要

257
00:15:40,000 --> 00:15:43,000
要就是税务局一定要自己开发一个客户端

258
00:15:43,000 --> 00:15:45,000
你刚才都说他要加密那些很麻烦

259
00:15:45,000 --> 00:15:47,000
你知道加密

260
00:15:47,000 --> 00:15:49,000
我觉得有点 over engineering

261
00:15:49,000 --> 00:15:53,000
就是德国很多东西都是 over engineering

262
00:15:53,000 --> 00:15:54,000
It's Germany

263
00:15:54,000 --> 00:15:55,000
当然可能是比较

264
00:15:55,000 --> 00:15:57,000
可能是 make sense

265
00:15:57,000 --> 00:15:57,000
但不像法国

266
00:15:57,000 --> 00:15:59,000
很多东西是 over engineering 的

267
00:15:59,000 --> 00:16:01,000
而且非常奇贵

268
00:16:01,000 --> 00:16:06,000
我希望听众里面没有法国粉

269
00:16:06,000 --> 00:16:08,000
因为我是一个非常喜欢黑法的

270
00:16:08,000 --> 00:16:11,000
可能会经常听见我吐槽法国的这个那个

271
00:16:11,000 --> 00:16:14,000
德国人都黑法国人吧

272
00:16:14,000 --> 00:16:14,000
也不是德国

273
00:16:14,000 --> 00:16:17,000
我觉得德国应该也有喜欢法国的

274
00:16:17,000 --> 00:16:19,000
但我觉得主流是黑的吧

275
00:16:19,000 --> 00:16:23,000
黑法国是欧洲的

276
00:16:23,000 --> 00:16:26,000
你想就是这是谁说的

277
00:16:26,000 --> 00:16:27,000
这好像是 CC 诚说的

278
00:16:27,000 --> 00:16:27,000
说你想

279
00:16:27,000 --> 00:16:31,000
跟欧洲的任何一个国家建立起

280
00:16:31,000 --> 00:16:32,000
的陌生人建立

281
00:16:32,000 --> 00:16:33,000
迅速建立起友谊

282
00:16:33,000 --> 00:16:35,000
黑法国人就可以了

283
00:16:35,000 --> 00:16:36,000
对先黑一下法国人

284
00:16:36,000 --> 00:16:38,000
看看对方有没有反应的话

285
00:16:38,000 --> 00:16:39,000
很有可能就可以

286
00:16:39,000 --> 00:16:41,000
一起黑了

287
00:16:41,000 --> 00:16:41,000
对

288
00:16:41,000 --> 00:16:44,000
但是我觉得就是刚才你讲的那种方式

289
00:16:44,000 --> 00:16:46,000
用那种什么

290
00:16:46,000 --> 00:16:47,000
就是证书签名加密的方式

291
00:16:47,000 --> 00:16:48,000
确实是更安全的呀

292
00:16:48,000 --> 00:16:49,000
因为

293
00:16:49,000 --> 00:16:50,000
加拿大这种

294
00:16:50,000 --> 00:16:51,000
地方对安全也是

295
00:16:51,000 --> 00:16:52,000
我觉得他们是很水的

296
00:16:52,000 --> 00:16:54,000
很多事情

297
00:16:54,000 --> 00:16:55,000
都是可以

298
00:16:55,000 --> 00:16:56,000
很容易的

299
00:16:56,000 --> 00:16:57,000
不需要经过

300
00:16:57,000 --> 00:16:59,000
任何麻烦的就可以

301
00:16:59,000 --> 00:17:01,000
说一句就认到别人

302
00:17:01,000 --> 00:17:03,000
比如说那天我去

303
00:17:03,000 --> 00:17:04,000
我们不是

304
00:17:04,000 --> 00:17:08,000
这次回来搬了一个地方的新的地址吗

305
00:17:08,000 --> 00:17:09,000
然后就要去改

306
00:17:09,000 --> 00:17:10,000
比如说

307
00:17:10,000 --> 00:17:11,000
我改那个架构上的那个

308
00:17:11,000 --> 00:17:12,000
那个

309
00:17:12,000 --> 00:17:14,000
注册的地址

310
00:17:14,000 --> 00:17:15,000
我改我自己的

311
00:17:15,000 --> 00:17:16,000
然后去改我老婆的

312
00:17:16,000 --> 00:17:17,000
他有个网页可以

313
00:17:17,000 --> 00:17:19,000
可以输入你的那个架构的号

314
00:17:19,000 --> 00:17:20,000
然后一个

315
00:17:20,000 --> 00:17:21,000
六位数的

316
00:17:21,000 --> 00:17:23,000
密码就可以登录进去

317
00:17:23,000 --> 00:17:24,000
但是我老婆那个

318
00:17:24,000 --> 00:17:25,000
从来没有用过

319
00:17:25,000 --> 00:17:27,000
所以我也不知道那个六位数密码是多少

320
00:17:27,000 --> 00:17:29,000
然后我就打电话去那个

321
00:17:29,000 --> 00:17:30,000
我们这里管那个

322
00:17:30,000 --> 00:17:33,000
发架构的那个机构去问密码

323
00:17:33,000 --> 00:17:35,000
他就问了我一下那个架构的号码

324
00:17:35,000 --> 00:17:36,000
然后名字

325
00:17:36,000 --> 00:17:39,000
就把那个密码告诉我

326
00:17:39,000 --> 00:17:41,000
我觉得这可能这跟

327
00:17:41,000 --> 00:17:44,000
就是加拿大地网人心有关吧

328
00:17:44,000 --> 00:17:47,000
人和人之间有比较更多的信任

329
00:17:47,000 --> 00:17:49,000
对我特别是在我这个地方

330
00:17:49,000 --> 00:17:50,000
我觉得可能是属于这种

331
00:17:50,000 --> 00:17:52,000
非常高信任度的那种地区啊

332
00:17:52,000 --> 00:17:53,000
就是

333
00:17:53,000 --> 00:17:55,000
我知道有很多人

334
00:17:55,000 --> 00:17:57,000
他们他们住那种就是两层楼的那种

335
00:17:57,000 --> 00:17:59,000
那种 house 就是小别墅嘛

336
00:17:59,000 --> 00:18:00,000
然后

337
00:18:00,000 --> 00:18:01,000
他们出门是从来不锁门的

338
00:18:01,000 --> 00:18:02,000
就是你随便

339
00:18:02,000 --> 00:18:04,000
或者把钥匙藏在地毯下面

340
00:18:04,000 --> 00:18:06,000
我觉得有时候我小时候看美剧

341
00:18:06,000 --> 00:18:07,000
对对对

342
00:18:07,000 --> 00:18:08,000
把钥匙藏在地毯下面

343
00:18:08,000 --> 00:18:10,000
我都惊呆了

344
00:18:10,000 --> 00:18:12,000
对上次我也是

345
00:18:12,000 --> 00:18:13,000
我要去租一个房子

346
00:18:13,000 --> 00:18:14,000
他那个风景非常好

347
00:18:14,000 --> 00:18:17,000
在一个海边的一个小 house

348
00:18:17,000 --> 00:18:20,000
那个人那个房主是不在本地的

349
00:18:20,000 --> 00:18:22,000
他是远程电话给你说

350
00:18:22,000 --> 00:18:23,000
你去那个地方

351
00:18:23,000 --> 00:18:26,000
然后那个门口有一个什么花的

352
00:18:26,000 --> 00:18:27,000
花博

353
00:18:27,000 --> 00:18:28,000
对吧

354
00:18:28,000 --> 00:18:29,000
花博上面有把钥匙

355
00:18:29,000 --> 00:18:30,000
你把那个钥匙打开就可以进去了

356
00:18:30,000 --> 00:18:31,000
我说哈

357
00:18:31,000 --> 00:18:34,000
他说那你这样真的放心吗

358
00:18:34,000 --> 00:18:35,000
没事你看啊

359
00:18:35,000 --> 00:18:37,000
然后我就给他看

360
00:18:37,000 --> 00:18:38,000
就是看一个房子

361
00:18:38,000 --> 00:18:39,000
后来没租但是

362
00:18:39,000 --> 00:18:41,000
我觉得就在这个地方还是

363
00:18:41,000 --> 00:18:42,000
信任度是蛮高的

364
00:18:42,000 --> 00:18:44,000
那你也可能是因为这样

365
00:18:44,000 --> 00:18:45,000
才导致感觉说那些问题

366
00:18:45,000 --> 00:18:46,000
就很多这种

367
00:18:46,000 --> 00:18:47,000
所谓的

368
00:18:47,000 --> 00:18:49,000
我们在一个

369
00:18:49,000 --> 00:18:50,000
geek 看来就

370
00:18:50,000 --> 00:18:52,000
哇太不安全了

371
00:18:52,000 --> 00:18:53,000
但是他们觉得无所谓啊

372
00:18:53,000 --> 00:18:54,000
反正也没有

373
00:18:54,000 --> 00:18:56,000
也不会发生什么对吧

374
00:18:56,000 --> 00:18:57,000
对

375
00:18:57,000 --> 00:18:58,000
就是可能

376
00:18:58,000 --> 00:18:59,000
在

377
00:18:59,000 --> 00:19:02,000
在某些社会主义比老子看来

378
00:19:02,000 --> 00:19:06,000
这种小国寡民可能是非常理想的一种状态

379
00:19:06,000 --> 00:19:09,000
但是很遗憾我们在

380
00:19:09,000 --> 00:19:11,000
发达国家或者说某些发展中国家

381
00:19:11,000 --> 00:19:14,000
比如某个具有 10 多亿人口的泛民国家

382
00:19:14,000 --> 00:19:16,000
这是非常不现实的一件事情

383
00:19:16,000 --> 00:19:19,000
人们还是尽量注意安全的比较好

384
00:19:19,000 --> 00:19:20,000
我觉得在德国的时候

385
00:19:20,000 --> 00:19:21,000
我觉得他还是蛮注意安全的

386
00:19:21,000 --> 00:19:22,000
很多地方都是

387
00:19:22,000 --> 00:19:23,000
因为德国

388
00:19:23,000 --> 00:19:24,000
其实德国是人

389
00:19:24,000 --> 00:19:26,000
欧洲的人口第一大国

390
00:19:26,000 --> 00:19:27,000
对对对

391
00:19:27,000 --> 00:19:28,000
8000 多万 9000 万

392
00:19:28,000 --> 00:19:29,000
就

393
00:19:29,000 --> 00:19:32,000
法国是第一大国但是德国是人口最多的国家

394
00:19:32,000 --> 00:19:33,000
所以德国之间

395
00:19:33,000 --> 00:19:34,000
德国可能

396
00:19:34,000 --> 00:19:36,000
这种信任的

397
00:19:36,000 --> 00:19:37,000
状况稍微少一点

398
00:19:38,000 --> 00:19:42,000
对而且我相信还是有很多德国人会把钥匙藏在地上

399
00:19:42,000 --> 00:19:46,000
对而且还有一件事情我觉得很有意思就是

400
00:19:47,000 --> 00:19:51,000
你有开车在德国开汽车对吧

401
00:19:51,000 --> 00:19:52,000
对啊

402
00:19:52,000 --> 00:19:54,000
你那个邮箱是可以随便打开的吗

403
00:19:55,000 --> 00:19:56,000
可以

404
00:19:56,000 --> 00:19:59,000
我的不行但是大部分人的车的邮箱的

405
00:20:00,000 --> 00:20:02,000
我的邮箱需要在驾驶舱里面按一个键才可以打开

406
00:20:02,000 --> 00:20:04,000
所以德国的车也有这样的

407
00:20:04,000 --> 00:20:05,000
不不不

408
00:20:05,000 --> 00:20:08,000
德国大部分车的邮箱是按一下邮箱盖就会弹起来

409
00:20:08,000 --> 00:20:11,000
但是就是需要一个锁的机制吗

410
00:20:12,000 --> 00:20:13,000
不需要就是任何人都可以打开

411
00:20:13,000 --> 00:20:14,000
不就是这个事情很傻逼吗

412
00:20:17,000 --> 00:20:19,000
中国难道不是吗

413
00:20:19,000 --> 00:20:22,000
中国我开过的所有的车都是

414
00:20:22,000 --> 00:20:25,000
好的坏的都是有一个锁的机制的

415
00:20:25,000 --> 00:20:26,000
要不你从外面有钥匙打开

416
00:20:26,000 --> 00:20:28,000
要不是从那个驾驶舱按一个钮

417
00:20:28,000 --> 00:20:29,000
然后它才能够

418
00:20:29,000 --> 00:20:31,000
就是会有人偷油是吧

419
00:20:31,000 --> 00:20:32,000
这个是一个问题

420
00:20:32,000 --> 00:20:34,000
在中国就是最主要的问题

421
00:20:35,000 --> 00:20:36,000
但我觉得另外一个就是

422
00:20:36,000 --> 00:20:37,000
我觉得这样很不安全吗

423
00:20:38,000 --> 00:20:43,000
就是有如果不喜欢就是看你的话往你邮箱里面倒一点什么东西你车就毁了

424
00:20:44,000 --> 00:20:47,000
因为我知道上次有一个发生一件事情就是有一个

425
00:20:47,000 --> 00:20:49,000
我不知道他得罪了谁还是怎么样

426
00:20:49,000 --> 00:20:52,000
有人好像在他那个邮箱里面尿了一泡

427
00:20:53,000 --> 00:20:54,000
然后发动机就爆响了

428
00:20:55,000 --> 00:20:56,000
这是挺惨的

429
00:20:57,000 --> 00:20:59,000
我从来没有想过这个问题

430
00:20:59,000 --> 00:21:02,000
因为我女朋友的车就是按一下就会弹开的

431
00:21:02,000 --> 00:21:04,000
就是我觉得为什么会这样呢

432
00:21:04,000 --> 00:21:05,000
这不很奇怪吗

433
00:21:05,000 --> 00:21:07,000
但这也是可能从一个

434
00:21:07,000 --> 00:21:09,000
低信任度社会

435
00:21:09,000 --> 00:21:11,000
迁移到高信任度社会

436
00:21:11,000 --> 00:21:13,000
的一个 shock 之一吧

437
00:21:14,000 --> 00:21:15,000
就好像

438
00:21:15,000 --> 00:21:17,000
比如说 dash camera

439
00:21:18,000 --> 00:21:19,000
就是我们在 YouTube 上可以

440
00:21:20,000 --> 00:21:21,000
看到很多很多这个

441
00:21:22,000 --> 00:21:23,000
俄国或者是

442
00:21:23,000 --> 00:21:24,000
就是

443
00:21:24,000 --> 00:21:25,000
对对对

444
00:21:25,000 --> 00:21:26,000
他们那里也超多的

445
00:21:27,000 --> 00:21:30,000
大量的车祸的镜头是由 dash camera

446
00:21:30,000 --> 00:21:33,000
录下来的我相信中国好像现在也是非常有型

447
00:21:33,000 --> 00:21:35,000
碰瓷挡太多了

448
00:21:35,000 --> 00:21:37,000
叫什么行车记录仪

449
00:21:37,000 --> 00:21:38,000
但是你会觉得在

450
00:21:39,000 --> 00:21:45,000
就是高信任度的社会的国家这种东西是很少见的就为什么要把行车的东西录下来呢

451
00:21:45,000 --> 00:21:47,000
你怕别人撞了你不承认还是

452
00:21:48,000 --> 00:21:49,000
怕就是

453
00:21:49,000 --> 00:21:49,000
就是什么

454
00:21:50,000 --> 00:21:52,000
一定要撇清价值

455
00:21:52,000 --> 00:21:56,000
因为国内特别是现在碰瓷挡有比较多

456
00:21:56,000 --> 00:22:00,000
你撞了行车记录也能拍到非常很多搞笑而且恶心的事情

457
00:22:02,000 --> 00:22:05,000
对有时候我看行车记录录上来的东西我都会觉得非常 disturbing

458
00:22:06,000 --> 00:22:12,000
我老婆她说就是在我们上次不是回国待了一段时间她说也买一个要不带回加拿大去

459
00:22:12,000 --> 00:22:13,000
我说

460
00:22:13,000 --> 00:22:16,000
有必要吗加拿大人弄鞋管你到时候出了事情

461
00:22:16,000 --> 00:22:18,000
再找保险公司

462
00:22:18,000 --> 00:22:19,000
就按那个什么规则弄就好了

463
00:22:20,000 --> 00:22:21,000
根本没有这种虚

464
00:22:21,000 --> 00:22:26,000
而且从一个比较悲观但是从一个比较悲观的角度来看我觉得可能

465
00:22:26,000 --> 00:22:28,000
行车记录一会渐渐普及开来的因为

466
00:22:29,000 --> 00:22:31,000
整个世界的趋势是在

467
00:22:31,000 --> 00:22:33,000
渐渐走向不信任吧

468
00:22:33,000 --> 00:22:34,000
你觉得呢

469
00:22:36,000 --> 00:22:40,000
不我的想法倒是更简单我觉得有行车记录一还要包括

470
00:22:40,000 --> 00:22:45,000
就是心里只有你在驾驶的时候才会才会开启吗对吧然后他有些

471
00:22:46,000 --> 00:22:47,000
这些技术可以做到你是

472
00:22:48,000 --> 00:22:49,000
24 小时全天监控吗

473
00:22:50,000 --> 00:22:52,000
我觉得有的这个东西的话

474
00:22:52,000 --> 00:22:55,000
可以在某种程度上降低这个保险的费用

475
00:22:56,000 --> 00:23:02,000
就是如果把你强制要求你装上这个的话他可以说你装这个

476
00:23:02,000 --> 00:23:03,000
保险解办

477
00:23:03,000 --> 00:23:05,000
你不让这个保险加倍的

478
00:23:05,000 --> 00:23:08,000
你们为什么就是有更多的就虽然说

479
00:23:09,000 --> 00:23:15,000
我们比如我现在在的地方都属于这种整体社会成就比较高的但是我觉得这只是通过

480
00:23:15,000 --> 00:23:16,000
传统来

481
00:23:16,000 --> 00:23:18,000
的一个事情来保证的都好像你刚才讲这个

482
00:23:19,000 --> 00:23:22,000
这个社会上状况是在变化的所以如果有一些

483
00:23:22,000 --> 00:23:24,000
叫做什么机制的

484
00:23:25,000 --> 00:23:25,000
什么种

485
00:23:26,000 --> 00:23:30,000
可靠的机制来确保这一点我觉得是更好的一个方案

486
00:23:30,000 --> 00:23:31,000
就是我更相信

487
00:23:32,000 --> 00:23:33,000
机器而不是人

488
00:23:34,000 --> 00:23:40,000
我相信 Lawrence 如果在场的话因为会跳出来说他是更希望

489
00:23:40,000 --> 00:23:46,000
希望能够社会能够朝着更相信人的方向发展因为人才是最重要的但是人是不

490
00:23:47,000 --> 00:23:47,000
predictable

491
00:23:48,000 --> 00:23:49,000
人是

492
00:23:49,000 --> 00:23:50,000
人是

493
00:23:50,000 --> 00:23:53,000
Holy unreal

494
00:23:53,000 --> 00:23:55,000
看一个笑话说

495
00:23:55,000 --> 00:23:56,000
什么是成熟

496
00:23:56,000 --> 00:23:58,000
程序员是这样一种职业就是

497
00:23:58,000 --> 00:24:01,000
你坐在桌子前面面对着一个盒子

498
00:24:01,000 --> 00:24:05,000
然后非常痛恨自己不能像一台机器那样思考

499
00:24:06,000 --> 00:24:08,000
对程序员实际上是一个非常非人的职业

500
00:24:08,000 --> 00:24:12,000
然后这一点可能有时候会引起我的

501
00:24:12,000 --> 00:24:13,000
这个肉

502
00:24:14,000 --> 00:24:15,000
叫什么

503
00:24:15,000 --> 00:24:19,000
肉体的内核就是血肉的内核有时候也会有点恐慌

504
00:24:20,000 --> 00:24:21,000
我觉得自己越来越不像一个人

505
00:24:22,000 --> 00:24:24,000
所以其实大部分时间

506
00:24:24,000 --> 00:24:26,000
所谓 debug debug

507
00:24:26,000 --> 00:24:29,000
不是程序里的 bug debug 是你脑子里面的 bug 的

508
00:24:30,000 --> 00:24:30,000
对

509
00:24:31,000 --> 00:24:36,000
就是找出自己到底用哪一部他妈的图像一个机器那样所以导致了这个

510
00:24:37,000 --> 00:24:39,000
让你感到愤怒的 bug

511
00:24:39,000 --> 00:24:41,000
所以写程序一直就是一个异化的过程

512
00:24:42,000 --> 00:24:43,000
对你异化你自己

513
00:24:44,000 --> 00:24:45,000
你让自己

514
00:24:45,000 --> 00:24:48,000
摒除感情和情绪的影响

515
00:24:49,000 --> 00:24:50,000
变成一个

516
00:24:52,000 --> 00:24:53,000
好像扯得有点远了

517
00:24:53,000 --> 00:24:55,000
那行刚才讲到这里了

518
00:24:55,000 --> 00:24:58,000
今天那个一个主题是讲什么错误处理对吧

519
00:24:59,000 --> 00:25:02,000
对其实对其实刚才我们说到 bug

520
00:25:03,000 --> 00:25:04,000
bug 会

521
00:25:05,000 --> 00:25:09,000
导致程序不能正常运行或者导致一台机器不能正常运行

522
00:25:09,000 --> 00:25:11,000
然后此时就涉及到一个

523
00:25:14,000 --> 00:25:15,000
就是 exception

524
00:25:16,000 --> 00:25:17,000
handling 的机制

525
00:25:17,000 --> 00:25:19,000
那其实这是我们

526
00:25:19,000 --> 00:25:22,000
这一期节目想要讨论的一个主题

527
00:25:22,000 --> 00:25:22,000
就是

528
00:25:23,000 --> 00:25:25,000
嗯

529
00:25:25,000 --> 00:25:27,000
exception 应该怎样被 handle

530
00:25:27,000 --> 00:25:31,000
先说这个之前我们要先可能先解释一下就是

531
00:25:31,000 --> 00:25:38,000
如果这个大家是学这种更加低级的语言比如说 c 啊这种语言出来的时候是没有 exception 这个机制的

532
00:25:39,000 --> 00:25:40,000
嗯

533
00:25:40,000 --> 00:25:42,000
c 其实是

534
00:25:42,000 --> 00:25:44,000
你可以通过 setjump longjump 来

535
00:25:44,000 --> 00:25:50,000
你可以说他没有原生的他没有在语言的层面上支持 exception 这个概念

536
00:25:50,000 --> 00:25:53,000
然后就一般的错误处理是通过这个

537
00:25:53,000 --> 00:25:55,000
返回错误代码的方式来实现

538
00:25:56,000 --> 00:25:57,000
对

539
00:25:57,000 --> 00:25:57,000
嗯

540
00:25:59,000 --> 00:26:00,000
然后最近有些新的语言

541
00:26:01,000 --> 00:26:02,000
反而是就

542
00:26:02,000 --> 00:26:04,000
就抛弃了 exception 然后

543
00:26:04,000 --> 00:26:08,000
回归了 c 的这一点比如说我现在最近一直在用的这个 go 就是那个

544
00:26:08,000 --> 00:26:09,000
google 那个语言

545
00:26:10,000 --> 00:26:16,000
他是没有 exception 的就所有的都是其实他有一种但是用的非常少吧

546
00:26:16,000 --> 00:26:20,000
大部分时间是用那个就是 return error 这种方式来实现

547
00:26:22,000 --> 00:26:25,000
对我记得我在知乎上也回答过一个问题

548
00:26:26,000 --> 00:26:29,000
就是有人问 swift 为什么要 exception

549
00:26:29,000 --> 00:26:34,000
然后我就我其实我也是一个觉得 exception 是一个比较

550
00:26:35,000 --> 00:26:37,000
不那么有点 overrated

551
00:26:37,000 --> 00:26:38,000
这样一个功能

552
00:26:38,000 --> 00:26:42,000
所以你觉得这个 exception 的主要问题在哪里

553
00:26:43,000 --> 00:26:45,000
exception 有点像 goto

554
00:26:46,000 --> 00:26:47,000
要我说的话

555
00:26:47,000 --> 00:26:49,000
就是很多人把 exception 当 goto 用

556
00:26:50,000 --> 00:26:52,000
就如果发生了 exception 那你就

557
00:26:53,000 --> 00:26:54,000
呃有

558
00:26:54,000 --> 00:26:55,000
你此时你的成分

559
00:26:56,000 --> 00:26:57,000
就会有时候会产生一种

560
00:26:58,000 --> 00:26:59,000
不可预知的走向

561
00:27:01,000 --> 00:27:03,000
对我觉得这是最主要的问题就是为什么

562
00:27:04,000 --> 00:27:07,000
就为什么我觉得 exception 不是特别好

563
00:27:07,000 --> 00:27:08,000
这个原因也是因为就是

564
00:27:09,000 --> 00:27:09,000
就

565
00:27:09,000 --> 00:27:12,000
跟那个什么 goto is considered harmful 一样嘛

566
00:27:12,000 --> 00:27:16,000
exception 它会导致你之前预设的那个

567
00:27:16,000 --> 00:27:18,000
叫什么 control flow 控制流

568
00:27:18,000 --> 00:27:19,000
会变得很乱

569
00:27:20,000 --> 00:27:20,000
就是

570
00:27:21,000 --> 00:27:23,000
因为他一旦抛出 exception 他整个

571
00:27:23,000 --> 00:27:24,000
的那个

572
00:27:24,000 --> 00:27:25,000
程序运行的逻辑

573
00:27:26,000 --> 00:27:27,000
就不再是按照那个线性的往下走

574
00:27:28,000 --> 00:27:29,000
而是跳到另外一个地方

575
00:27:29,000 --> 00:27:31,000
或者跳到调用层或者更高层去了

576
00:27:31,000 --> 00:27:34,000
这样的话就会导致很多

577
00:27:34,000 --> 00:27:36,000
非常难以预料的

578
00:27:36,000 --> 00:27:36,000
那种

579
00:27:37,000 --> 00:27:38,000
场景的组合嘛

580
00:27:38,000 --> 00:27:39,000
对所以

581
00:27:39,000 --> 00:27:41,000
这样会导致很多问题

582
00:27:41,000 --> 00:27:43,000
对但是

583
00:27:43,000 --> 00:27:44,000
反过来

584
00:27:44,000 --> 00:27:45,000
exception 的支持者

585
00:27:46,000 --> 00:27:50,000
也会说这是一种 necessary evil

586
00:27:50,000 --> 00:27:52,000
或者他甚至就不是 evil 就是这是一种

587
00:27:53,000 --> 00:27:55,000
呃非常必要的功能

588
00:27:55,000 --> 00:27:56,000
就是

589
00:27:56,000 --> 00:27:57,000
他并不是

590
00:28:00,000 --> 00:28:01,000
他并不是一种

591
00:28:02,000 --> 00:28:05,000
错误他只是一种对于一种

592
00:28:05,000 --> 00:28:09,000
就是现实生活里面

593
00:28:09,000 --> 00:28:11,000
毕竟会出现的错误的

594
00:28:12,000 --> 00:28:14,000
不得不有的这么一种处理方式

595
00:28:14,000 --> 00:28:19,000
而且他们会说用返回值或者是

596
00:28:19,000 --> 00:28:25,000
像 objective-C 这样的 arrow pointer 的方式非常的原始古老

597
00:28:25,000 --> 00:28:26,000
而且

598
00:28:26,000 --> 00:28:27,000
会导致代码非常的永长

599
00:28:28,000 --> 00:28:29,000
对这也是确实是

600
00:28:29,000 --> 00:28:30,000
我有写

601
00:28:31,000 --> 00:28:33,000
最近写的 goal 也比较多遇到的一个问题啊就是

602
00:28:34,000 --> 00:28:35,000
之前

603
00:28:35,000 --> 00:28:38,000
因为 Python 是支持这个 exception 机制的

604
00:28:38,000 --> 00:28:40,000
很多错误都通过那种那个流走

605
00:28:40,000 --> 00:28:43,000
就是正常的逻辑流就正常走然后 exception

606
00:28:43,000 --> 00:28:45,000
就错误处理是走单独的一个方式走

607
00:28:46,000 --> 00:28:50,000
而且在 Python 里面这甚至是一种 pattern 就是 Python 推荐你

608
00:28:50,000 --> 00:28:51,000
用异常处理方式来

609
00:28:52,000 --> 00:28:52,000
处理错误

610
00:28:52,000 --> 00:28:54,000
来当做 logic flow control

611
00:28:54,000 --> 00:28:55,000
对

612
00:28:55,000 --> 00:28:56,000
就是它是

613
00:28:56,000 --> 00:28:57,000
把这个就是

614
00:28:57,000 --> 00:28:59,000
正常情况下的一个流

615
00:28:59,000 --> 00:28:59,000
是

616
00:29:00,000 --> 00:29:01,000
说的比较简单

617
00:29:01,000 --> 00:29:03,000
因为你不需要做很多这种错误处理

618
00:29:03,000 --> 00:29:03,000
就一旦

619
00:29:04,000 --> 00:29:06,000
出错你就直接抛出一层就跳到另外一层去处理

620
00:29:07,000 --> 00:29:08,000
但是你会看起来

621
00:29:08,000 --> 00:29:09,000
那个代码很

622
00:29:09,000 --> 00:29:10,000
简单漂亮

623
00:29:10,000 --> 00:29:11,000
同样的

624
00:29:11,000 --> 00:29:14,000
要完成同样的事情然后在过里面写就发现

625
00:29:14,000 --> 00:29:15,000
你每次

626
00:29:15,000 --> 00:29:16,000
调一个函数

627
00:29:17,000 --> 00:29:18,000
都要检查一个 if error

628
00:29:19,000 --> 00:29:19,000
不等于

629
00:29:19,000 --> 00:29:20,000
这个 Nil 怎么样

630
00:29:21,000 --> 00:29:21,000
对吧

631
00:29:21,000 --> 00:29:22,000
其实会

632
00:29:23,000 --> 00:29:24,000
这叫

633
00:29:24,000 --> 00:29:25,000
长话叫什么

634
00:29:25,000 --> 00:29:26,000
boilerplate

635
00:29:26,000 --> 00:29:27,000
对对对

636
00:29:27,000 --> 00:29:29,000
会出现大量这种其实没什么用但是

637
00:29:30,000 --> 00:29:31,000
又明明有意义的

638
00:29:31,000 --> 00:29:32,000
有意义的

639
00:29:33,000 --> 00:29:33,000
语句在里面

640
00:29:33,000 --> 00:29:36,000
对所以这牵涉的是一个还是跟他讲是一个

641
00:29:37,000 --> 00:29:38,000
怎么认知的问题啊

642
00:29:38,000 --> 00:29:39,000
就说

643
00:29:39,000 --> 00:29:41,000
比如像刚刚我们讲 Python 那种

644
00:29:41,000 --> 00:29:42,000
那种类型

645
00:29:42,000 --> 00:29:43,000
为代表的

646
00:29:43,000 --> 00:29:44,000
也不只是 Python 一种

647
00:29:44,000 --> 00:29:47,000
其实大多数支持 exception 的语言都是推荐你这种方式

648
00:29:48,000 --> 00:29:48,000
就是

649
00:29:48,000 --> 00:29:49,000
正常的

650
00:29:49,000 --> 00:29:50,000
control flow

651
00:29:50,000 --> 00:29:51,000
你用正常的 logic 思维去想

652
00:29:52,000 --> 00:29:54,000
然后异常的你就走那个 exception handling 就好了

653
00:29:55,000 --> 00:29:58,000
然后这个像 go 和 c 这一派就是说那你肯定是

654
00:29:59,000 --> 00:29:59,000
没有

655
00:29:59,000 --> 00:30:00,000
不就是

656
00:30:00,000 --> 00:30:07,000
错误是应该是你的那个逻辑的一部分就错误处理应该是你逻辑的一部分因为这结果这样才可能保证

657
00:30:07,000 --> 00:30:11,000
你的就出现任何情况你都是在可控那个范围内对吧

658
00:30:12,000 --> 00:30:15,000
所以我觉得他们都是代表两种完全不一样的思维

659
00:30:15,000 --> 00:30:18,000
他看单就是说你你习惯有哪个

660
00:30:18,000 --> 00:30:19,000
就看你自己去

661
00:30:19,000 --> 00:30:20,000
觉得了

662
00:30:20,000 --> 00:30:24,000
但是我觉得吧现在一般是我现在看法一般是这样子就是

663
00:30:24,000 --> 00:30:24,000
如果你

664
00:30:25,000 --> 00:30:26,000
你的这个程序是需要

665
00:30:28,000 --> 00:30:29,000
非常 robust

666
00:30:29,000 --> 00:30:35,000
非常就叫长时间不间断然后不出错不 crash 的工作的话就不出现那个 blue screen of death

667
00:30:35,000 --> 00:30:37,000
spinning beach ball of death

668
00:30:37,000 --> 00:30:38,000
这类的东西

669
00:30:39,000 --> 00:30:45,000
你还是可能要采用刚才像 c 呀 go 为代表这种类型就是把错误处理作为你的程序

670
00:30:46,000 --> 00:30:47,000
要考虑的每一步

671
00:30:47,000 --> 00:30:50,000
这样会导致这个代码很拥长很麻烦

672
00:30:50,000 --> 00:30:51,000
但是他确实会保

673
00:30:51,000 --> 00:30:52,000
会保证

674
00:30:52,000 --> 00:30:53,000
你的

675
00:30:53,000 --> 00:30:55,000
每一种情况都你的程序

676
00:30:55,000 --> 00:30:56,000
都是在一个可以预测的

677
00:30:57,000 --> 00:30:58,000
是一个可控的

678
00:30:59,000 --> 00:31:00,000
那个状态内的我觉得

679
00:31:01,000 --> 00:31:01,000
对但

680
00:31:01,000 --> 00:31:03,000
其实你说的就是

681
00:31:04,000 --> 00:31:06,000
但其实这是一种不可能的状态就是

682
00:31:07,000 --> 00:31:08,000
在

683
00:31:08,000 --> 00:31:10,000
几乎在所有的

684
00:31:10,000 --> 00:31:12,000
编程语言里面你都会

685
00:31:13,000 --> 00:31:16,000
遇到在几乎在所有比较现代的编程语言里面

686
00:31:16,000 --> 00:31:19,000
你都会遇到一种区分就是

687
00:31:19,000 --> 00:31:22,000
错误和异常的区分就是

688
00:31:22,000 --> 00:31:24,000
有一种异常是你可以控制的你可以预料到的

689
00:31:24,000 --> 00:31:25,000
比如说你去

690
00:31:26,000 --> 00:31:28,000
你要打开文件然后你发现这个文件不存在

691
00:31:28,000 --> 00:31:30,000
这是你可以预料到的异常

692
00:31:30,000 --> 00:31:32,000
可是有些异常是你预料不到的

693
00:31:32,000 --> 00:31:36,000
就是比如说像在 Java 里面有所谓

694
00:31:36,000 --> 00:31:38,000
这是我觉得

695
00:31:38,000 --> 00:31:40,000
这一直是我觉得 Java 非常二的一个特性

696
00:31:40,000 --> 00:31:42,000
就是有一个所谓 checked exception

697
00:31:43,000 --> 00:31:49,000
你在写一个方法的时候你要告诉方法的调用者这个方法可能抛出什么样的 exception

698
00:31:49,000 --> 00:31:51,000
这其实是一个看起来很美但是

699
00:31:52,000 --> 00:31:54,000
用起来非常不实际的这么一个功能

700
00:31:54,000 --> 00:31:55,000
就是在

701
00:31:55,000 --> 00:31:57,000
许多时候你是

702
00:31:57,000 --> 00:32:00,000
预料不到或者是作为一个会出错误的人

703
00:32:01,000 --> 00:32:03,000
你是没有办法完全的

704
00:32:03,000 --> 00:32:04,000
便利

705
00:32:04,000 --> 00:32:07,000
这一个方法可能出现的 exception 的情况

706
00:32:07,000 --> 00:32:10,000
其实也是导致了非常多的 anti pattern

707
00:32:10,000 --> 00:32:12,000
这个我觉得是

708
00:32:12,000 --> 00:32:15,000
为什么会是一个问题呢如果你用这种

709
00:32:15,000 --> 00:32:18,000
就是反悔错误的方法来处理为什么不能解决这个问题呢

710
00:32:19,000 --> 00:32:21,000
对你用反悔错误的

711
00:32:21,000 --> 00:32:22,000
就是我觉得

712
00:32:22,000 --> 00:32:23,000
用

713
00:32:23,000 --> 00:32:24,000
错误反悔指数

714
00:32:24,000 --> 00:32:26,000
其实是采用那种

715
00:32:26,000 --> 00:32:28,000
更为 pragmatical 的理念

716
00:32:28,000 --> 00:32:29,000
就是

717
00:32:30,000 --> 00:32:31,000
我处理所有我能预见到的错误

718
00:32:32,000 --> 00:32:34,000
如果这个错误我没有预见到

719
00:32:34,000 --> 00:32:35,000
那我就让它 crash 好了

720
00:32:37,000 --> 00:32:38,000
但是

721
00:32:38,000 --> 00:32:39,000
在很多

722
00:32:39,000 --> 00:32:40,000
也不是很多就是在

723
00:32:40,000 --> 00:32:42,000
部分编程语言里面

724
00:32:42,000 --> 00:32:45,000
人们会觉得我有 exception control

725
00:32:45,000 --> 00:32:50,000
我有这种机制在那我就会尽可能的让我的程序不要 crash

726
00:32:52,000 --> 00:32:53,000
我觉得很多 Java 程序都是这样

727
00:32:54,000 --> 00:32:56,000
我想想

728
00:32:56,000 --> 00:33:00,000
就起码我最近在写 go 的时候没有遇到说

729
00:33:00,000 --> 00:33:01,000
会有

730
00:33:01,000 --> 00:33:02,000
某一个

731
00:33:03,000 --> 00:33:05,000
错误没有处理到导致 crash 的

732
00:33:05,000 --> 00:33:07,000
这种状况发生

733
00:33:07,000 --> 00:33:08,000
对因为

734
00:33:08,000 --> 00:33:14,000
因为这种错误如一旦出现的话基本上我觉得 go 程序是处理不了 handle 不了的

735
00:33:14,000 --> 00:33:17,000
运行时把你一块内存把下来

736
00:33:17,000 --> 00:33:19,000
这个程序本身要怎么 handle

737
00:33:20,000 --> 00:33:23,000
那如果遇到这种情况下你用 exception handle 也是没有办法的

738
00:33:23,000 --> 00:33:24,000
就比如说那个 Java

739
00:33:25,000 --> 00:33:27,000
就是 Java 虚拟机那一层出了问题你上面能怎么办

740
00:33:28,000 --> 00:33:29,000
也是没有没有任何办法

741
00:33:29,000 --> 00:33:32,000
但是有时候我会有一种感觉就是

742
00:33:33,000 --> 00:33:34,000
我用黑账号程序

743
00:33:34,000 --> 00:33:35,000
这个

744
00:33:35,000 --> 00:33:38,000
不太好在第一期里面就树立这么多敌人

745
00:33:38,000 --> 00:33:39,000
就是在某些

746
00:33:39,000 --> 00:33:42,000
比较广为人知的程序里面

747
00:33:42,000 --> 00:33:48,000
程序员会产生这样的错觉就是我有一场处理机制那我几乎是可以处理一切一场的但其实

748
00:33:48,000 --> 00:33:49,000
并不是这样

749
00:33:50,000 --> 00:33:53,000
所以其实我觉得吧就是如果要实现

750
00:33:53,000 --> 00:34:00,000
那种所有的错误都被预测到的所有的错误都被处理过你可能是需要一些

751
00:34:00,000 --> 00:34:01,000
更加

752
00:34:01,000 --> 00:34:03,000
formal 的一些机制比如说你要去

753
00:34:04,000 --> 00:34:10,000
证明这个程序是无错但是这种情况在现实中是基本上是不可能实现的

754
00:34:10,000 --> 00:34:12,000
只有在一些

755
00:34:12,000 --> 00:34:15,000
非常受限的学术性的环境里面才可以

756
00:34:15,000 --> 00:34:16,000
或者说

757
00:34:16,000 --> 00:34:23,000
或者说你可以说我程序本身并不提供这样的机制但是我以赖于

758
00:34:23,000 --> 00:34:28,000
系统所提供的机制就是就像你说的你希望一个程序它稳定的运行

759
00:34:28,000 --> 00:34:29,000
那么

760
00:34:30,000 --> 00:34:32,000
尽量可能的不出错不 crash

761
00:34:32,000 --> 00:34:34,000
可是一旦 crash 怎么办呢你可以说那我

762
00:34:35,000 --> 00:34:37,000
把它做成一个 service

763
00:34:37,000 --> 00:34:38,000
然后

764
00:34:38,000 --> 00:34:41,000
那么我们都知道 Linux 或者是

765
00:34:41,000 --> 00:34:44,000
Windows 下面对于一个 service 的

766
00:34:45,000 --> 00:34:49,000
控制里面会有这样一项就是如果这个 servicecrash 了怎么办

767
00:34:49,000 --> 00:34:52,000
那 Windows 下面比如可以选说

768
00:34:53,000 --> 00:34:53,000
长期的

769
00:34:53,000 --> 00:34:58,000
尝试重新启动它并且如果尝试重新启动三次它仍旧 crash 的话

770
00:34:58,000 --> 00:34:59,000
那我就不再启动它了

771
00:34:59,000 --> 00:35:01,000
那其实这也是一种

772
00:35:01,000 --> 00:35:02,000
就是异常处理机制

773
00:35:02,000 --> 00:35:05,000
Linux 其实也是有类似的这样一个

774
00:35:06,000 --> 00:35:07,000
一个机制在里面

775
00:35:08,000 --> 00:35:12,000
这里就牵涉到 Linux 他们也常见的那个叫做

776
00:35:12,000 --> 00:35:13,000
你说 service 他们

777
00:35:15,000 --> 00:35:19,000
Demon 的概念然后 Demon 的话就会有相关的

778
00:35:19,000 --> 00:35:20,000
supervising

779
00:35:21,000 --> 00:35:22,000
的一个机制在里面

780
00:35:23,000 --> 00:35:24,000
你你有没有归

781
00:35:25,000 --> 00:35:27,000
最近关注那个 SystemD 这个话题

782
00:35:28,000 --> 00:35:28,000
看了好久

783
00:35:29,000 --> 00:35:30,000
对啊我觉得

784
00:35:31,000 --> 00:35:32,000
也挺扯的

785
00:35:32,000 --> 00:35:34,000
你对这个事情的态度是怎么样子

786
00:35:35,000 --> 00:35:36,000
我觉得 SystemD

787
00:35:36,000 --> 00:35:39,000
我也是觉得 SystemD 有一点激进了但是

788
00:35:40,000 --> 00:35:42,000
怎么说呢我觉得

789
00:35:43,000 --> 00:35:44,000
这一天迟早会来

790
00:35:45,000 --> 00:35:48,000
你觉得它激进的地方在哪里呢

791
00:35:48,000 --> 00:35:49,000
就是它试图把

792
00:35:50,000 --> 00:35:50,000
一些

793
00:35:51,000 --> 00:35:53,000
它试图把所有的

794
00:35:53,000 --> 00:35:53,000
Demon 的

795
00:35:53,000 --> 00:35:55,000
启动机制乃至于

796
00:35:55,000 --> 00:35:56,000
系统的启动机制

797
00:35:57,000 --> 00:35:58,000
军医化模块化

798
00:35:59,000 --> 00:36:00,000
然后

799
00:36:02,000 --> 00:36:04,000
就摒弃了很多传统就是

800
00:36:04,000 --> 00:36:05,000
我不知道你有没有

801
00:36:05,000 --> 00:36:08,000
读那篇文章就是 SystemD 的主要维护者之一

802
00:36:08,000 --> 00:36:09,000
他叫什么我忘了

803
00:36:09,000 --> 00:36:10,000
他好像是个德国人

804
00:36:11,000 --> 00:36:13,000
他在 blog 上发了一篇文章说

805
00:36:14,000 --> 00:36:15,000
因为他开发 SystemD

806
00:36:15,000 --> 00:36:17,000
已经受到了很多死亡威胁

807
00:36:17,000 --> 00:36:21,000
甚至是有些人在写很酸的文章在暗示

808
00:36:22,000 --> 00:36:23,000
要对他产生人身攻击

809
00:36:23,000 --> 00:36:24,000
或者是有人写了歌

810
00:36:25,000 --> 00:36:26,000
来嘲讽他

811
00:36:26,000 --> 00:36:28,000
恨不得他去死之类的

812
00:36:28,000 --> 00:36:29,000
就是你会发现

813
00:36:29,000 --> 00:36:32,000
这种问题居然可以导致就是

814
00:36:32,000 --> 00:36:34,000
非常 personal 的这么一个层面

815
00:36:35,000 --> 00:36:37,000
对这就扯远了

816
00:36:37,000 --> 00:36:39,000
这个故事的教训是什么

817
00:36:39,000 --> 00:36:40,000
不要激动一个程序员

818
00:36:40,000 --> 00:36:42,000
不要激动一群程序员

819
00:36:43,000 --> 00:36:45,000
不要像唐吉克德一样去

820
00:36:46,000 --> 00:36:47,000
但

821
00:36:47,000 --> 00:36:49,000
反过来

822
00:36:50,000 --> 00:36:51,000
你可以说

823
00:36:52,000 --> 00:36:53,000
就是因为

824
00:36:53,000 --> 00:36:54,000
他在这个问题上

825
00:36:54,000 --> 00:36:55,000
他对于这个问题

826
00:36:55,000 --> 00:36:56,000
有一个很大的反应

827
00:36:56,000 --> 00:36:57,000
体现出了

828
00:36:58,000 --> 00:36:59,000
SystemD

829
00:36:59,000 --> 00:37:01,000
到底是一个多么激进的项目

830
00:37:01,000 --> 00:37:04,000
我觉得可能我对他的一个

831
00:37:05,000 --> 00:37:07,000
现在我其实是没有太明确的

832
00:37:07,000 --> 00:37:11,000
反对或者是支持他的一个观点

833
00:37:11,000 --> 00:37:12,000
但是我觉得有一些是

834
00:37:12,000 --> 00:37:13,000
值得商榷的

835
00:37:14,000 --> 00:37:14,000
比如说

836
00:37:14,000 --> 00:37:18,000
他把那个就是 PID 1 的那一块做得那么

837
00:37:18,000 --> 00:37:19,000
种真的好吗

838
00:37:20,000 --> 00:37:23,000
对就是此时你会有一个想法就是

839
00:37:23,000 --> 00:37:26,000
跑在你的笔记本或者是跑在大型机上的

840
00:37:26,000 --> 00:37:28,000
很多 Linux 是跑在比如说像

841
00:37:28,000 --> 00:37:29,000
像 Beagle

842
00:37:29,000 --> 00:37:31,000
或者像

843
00:37:31,000 --> 00:37:32,000
路由器上面的

844
00:37:33,000 --> 00:37:33,000
Respair

845
00:37:33,000 --> 00:37:35,000
对或者路由器上面的

846
00:37:35,000 --> 00:37:38,000
那个地方的 Linux 真的要换用 SystemD 吗

847
00:37:38,000 --> 00:37:39,000
有意义吗

848
00:37:39,000 --> 00:37:40,000
好像也没有

849
00:37:40,000 --> 00:37:42,000
对现在我就觉得他

850
00:37:42,000 --> 00:37:44,000
但他自己的说法是说

851
00:37:44,000 --> 00:37:46,000
说我这个 SystemD 这个是一大块

852
00:37:47,000 --> 00:37:48,000
东西你可以挑其中的

853
00:37:49,000 --> 00:37:50,000
一小部分来用你不是要

854
00:37:51,000 --> 00:37:52,000
全部都用上

855
00:37:52,000 --> 00:37:52,000
这显得很

856
00:37:53,000 --> 00:37:54,000
这种种吗你可以

857
00:37:54,000 --> 00:37:55,000
只用一小坨

858
00:37:55,000 --> 00:37:57,000
但是我不知道他那种

859
00:37:57,000 --> 00:38:01,000
组织的机制还有那种思考的方式我觉得很容易会导致一种

860
00:38:02,000 --> 00:38:02,000
就是

861
00:38:03,000 --> 00:38:05,000
Unnecessary complexity 在里面

862
00:38:06,000 --> 00:38:08,000
对他会为了

863
00:38:08,000 --> 00:38:10,000
为了有这么一种比较均一的

864
00:38:11,000 --> 00:38:15,000
模式或者说为了有这样为了设计而去牺牲功能

865
00:38:15,000 --> 00:38:16,000
对

866
00:38:16,000 --> 00:38:18,000
然后

867
00:38:18,000 --> 00:38:22,000
我也有看其他的一些就是替代的那种就是

868
00:38:23,000 --> 00:38:25,000
PAD 的那个程序吗比如说

869
00:38:25,000 --> 00:38:28,000
像 DJB 他们那些比较轻量级简化的甚至

870
00:38:29,000 --> 00:38:32,000
就总共就只有可能不到 100 行 C 代码的一些

871
00:38:33,000 --> 00:38:35,000
这种 init 程序我觉得是更好的因为

872
00:38:36,000 --> 00:38:37,000
如果代码够少的话你可以

873
00:38:38,000 --> 00:38:41,000
就是穷举掉他所有可能出错的地方因为

874
00:38:41,000 --> 00:38:46,000
这个 PAD 是一个非常重要的程序如果他 crash 你这就只能 carnal panic 了

875
00:38:47,000 --> 00:38:48,000
但是

876
00:38:49,000 --> 00:38:50,000
如果你这个东西

877
00:38:50,000 --> 00:38:52,000
就代码量复杂了然后就刚才讲嘛

878
00:38:53,000 --> 00:38:57,000
你如果能出错的地方多了那肯定是不可避免的有些出错的地方

879
00:38:57,000 --> 00:38:59,000
然后这个出错会导致整个系统崩掉了

880
00:39:00,000 --> 00:39:00,000
所以

881
00:39:01,000 --> 00:39:03,000
如果有一个这种更加简洁的

882
00:39:03,000 --> 00:39:04,000
或甚至就是

883
00:39:04,000 --> 00:39:06,000
几十行不到 100 行代码的

884
00:39:06,000 --> 00:39:08,000
能够实现那你真的是可以用

885
00:39:09,000 --> 00:39:11,000
甚至你可以用这种机器这个

886
00:39:11,000 --> 00:39:12,000
就是

887
00:39:12,000 --> 00:39:16,000
就是证明的方法去证明这个程序可能会在哪个地方出错然后那些

888
00:39:16,000 --> 00:39:18,000
可能出错的地方你都已经顾及到了对吧

889
00:39:19,000 --> 00:39:21,000
你可以实现一个就是 100% reliable

890
00:39:22,000 --> 00:39:23,000
就只要你的硬件是不错的

891
00:39:23,000 --> 00:39:25,000
不出错的话就是软件可以保证 100%

892
00:39:26,000 --> 00:39:27,000
这个正常运行的

893
00:39:28,000 --> 00:39:33,000
但是如果你是太复杂的话你就做不到这一点这点我是觉得是有一点点问题的

894
00:39:34,000 --> 00:39:36,000
而且就是 systemd 的设计

895
00:39:37,000 --> 00:39:42,000
与 unix 的哲学就是 do one thing and do it well

896
00:39:42,000 --> 00:39:45,000
有点相悖悖倒而驰

897
00:39:46,000 --> 00:39:48,000
他试图实现很多事情然后吧

898
00:39:48,000 --> 00:39:50,000
很多功能集中在一个

899
00:39:50,000 --> 00:39:52,000
一个单一的程序里面

900
00:39:52,000 --> 00:39:52,000
或者他

901
00:39:53,000 --> 00:39:55,000
systemd 也不是一个单一的程序但是他

902
00:39:55,000 --> 00:39:57,000
试图以这样一种大一统的

903
00:39:57,000 --> 00:39:59,000
架构去解决一些

904
00:40:00,000 --> 00:40:01,000
呃

905
00:40:01,000 --> 00:40:04,000
源头和本质都非常易勾的问题

906
00:40:04,000 --> 00:40:05,000
对

907
00:40:05,000 --> 00:40:09,000
可能我觉得很多人对这个 systemd 的反感倒不是说

908
00:40:09,000 --> 00:40:10,000
但可能他

909
00:40:10,000 --> 00:40:11,000
就是不喜欢那种

910
00:40:11,000 --> 00:40:15,000
这种设计哲学是一个最主要的因素但是可能更多的一个是因为

911
00:40:16,000 --> 00:40:16,000
他

912
00:40:17,000 --> 00:40:18,000
用某种

913
00:40:19,000 --> 00:40:20,000
政治的方法

914
00:40:20,000 --> 00:40:22,000
在主流的发行版中

915
00:40:22,000 --> 00:40:23,000
他用了这个

916
00:40:24,000 --> 00:40:24,000
这个

917
00:40:24,000 --> 00:40:25,000
就正统的地位嘛

918
00:40:26,000 --> 00:40:29,000
对 debian 也换了好像也是即将支持

919
00:40:29,000 --> 00:40:30,000
对就 debian 8 嘛

920
00:40:30,000 --> 00:40:31,000
就 debian 8 里面他就会

921
00:40:31,000 --> 00:40:32,000
换成这个 systemd

922
00:40:33,000 --> 00:40:34,000
之前是在 launch

923
00:40:35,000 --> 00:40:35,000
作为一个

924
00:40:36,000 --> 00:40:38,000
debian 用户我现在还是

925
00:40:40,000 --> 00:40:41,000
不爽的

926
00:40:42,000 --> 00:40:45,000
但其实我觉得以我的

927
00:40:45,000 --> 00:40:47,000
水平来说这种

928
00:40:47,000 --> 00:40:49,000
改变可能对于我的影响是微乎其微的

929
00:40:49,000 --> 00:40:50,000
那个其实

930
00:40:51,000 --> 00:40:52,000
也比较简单

931
00:40:52,000 --> 00:40:54,000
我用的长河也比较简单

932
00:40:54,000 --> 00:40:55,000
那个主要的问题就是

933
00:40:55,000 --> 00:40:57,000
他的那个 upstart 的那个配置

934
00:40:58,000 --> 00:41:00,000
是不是一个完全的数据化的东西

935
00:41:00,000 --> 00:41:01,000
他里面有包含

936
00:41:01,000 --> 00:41:03,000
可以调用这个 shell 脚本嘛

937
00:41:05,000 --> 00:41:06,000
其实也是一个安全

938
00:41:07,000 --> 00:41:11,000
不光是这个问题就一旦你调那个 shell 脚本之后你这个整个东西就没有办法

939
00:41:12,000 --> 00:41:14,000
自动化来去分析或者是处理

940
00:41:15,000 --> 00:41:15,000
对

941
00:41:15,000 --> 00:41:16,000
他就

942
00:41:16,000 --> 00:41:17,000
打开了一个

943
00:41:17,000 --> 00:41:20,000
打开了一个 Pandora 盒子然后你就他就不再可控

944
00:41:20,000 --> 00:41:22,000
对就变成一个

945
00:41:22,000 --> 00:41:23,000
纯粹的叫做 descriptive

946
00:41:24,000 --> 00:41:27,000
描述性的配置文件变成一个 imperative

947
00:41:28,000 --> 00:41:28,000
叫什么

948
00:41:29,000 --> 00:41:31,000
叫可执行的配置文件这个变成就

949
00:41:32,000 --> 00:41:32,000
比较奇怪了

950
00:41:33,000 --> 00:41:35,000
而且你想最近不是又出了那个 shell

951
00:41:36,000 --> 00:41:36,000
等等

952
00:41:37,000 --> 00:41:37,000
反过来了吧

953
00:41:38,000 --> 00:41:43,000
为什么我记得 systemd 里面的 D 梦的描述文件是 descriptive

954
00:41:43,000 --> 00:41:43,000
是啊是啊

955
00:41:44,000 --> 00:41:44,000
systemd 是 descriptive

956
00:41:45,000 --> 00:41:46,000
upstart 不是啊

957
00:41:47,000 --> 00:41:47,000
OK

958
00:41:47,000 --> 00:41:50,000
upstart 是面子只是你可以嵌入这个比如你的 pre-start

959
00:41:51,000 --> 00:41:52,000
然后那么 post start

960
00:41:52,000 --> 00:41:55,000
之类的你可以加入一个钩子然后那个钩子可以直接调用

961
00:41:56,000 --> 00:41:59,000
你可以直接在那个配置文本里面嵌入这个脚本的

962
00:41:59,000 --> 00:42:00,000
执行的

963
00:42:00,000 --> 00:42:01,000
执行脚本的

964
00:42:01,000 --> 00:42:03,000
那就会导致各种各样的

965
00:42:03,000 --> 00:42:06,000
麻烦的就没有完全解决那个

966
00:42:07,000 --> 00:42:08,000
6 V 的那些问题嘛

967
00:42:09,000 --> 00:42:12,000
然后刚好最近不是出了那个 shell shock 吗

968
00:42:13,000 --> 00:42:14,000
那肯定现在是

969
00:42:14,000 --> 00:42:19,000
bash 这种老东西也是可能会有很多坑的所以

970
00:42:19,000 --> 00:42:20,000
bash 被 bash 了

971
00:42:20,000 --> 00:42:22,000
bashing bash

972
00:42:22,000 --> 00:42:23,000
对

973
00:42:23,000 --> 00:42:24,000
又扯远了

974
00:42:25,000 --> 00:42:28,000
对不过这可能就是 podcast 的

975
00:42:29,000 --> 00:42:32,000
本来要做一件事吧不停的扯远

976
00:42:33,000 --> 00:42:39,000
所以你觉得那个刚才讲那个我们在讲 exception handling 你说这个 exception 应该在哪一层处理

977
00:42:40,000 --> 00:42:42,000
这是一个很好的问题就是

978
00:42:42,000 --> 00:42:45,000
exception 其实是有不同层级的

979
00:42:45,000 --> 00:42:47,000
我觉得我可能

980
00:42:47,000 --> 00:42:50,000
在小时候用 windows 的时候

981
00:42:50,000 --> 00:42:51,000
这话说了

982
00:42:52,000 --> 00:42:53,000
对在以前用 windows 的时候

983
00:42:54,000 --> 00:42:57,000
非常恼人的一个错误提示就是

984
00:42:58,000 --> 00:42:59,000
一个红叉的

985
00:43:00,000 --> 00:43:02,000
popup 然后说严重错误

986
00:43:03,000 --> 00:43:03,000
冒号

987
00:43:04,000 --> 00:43:05,000
0 x

988
00:43:06,000 --> 00:43:07,000
某某某某地址的

989
00:43:08,000 --> 00:43:09,000
内容

990
00:43:09,000 --> 00:43:11,000
不应被访问之类的

991
00:43:11,000 --> 00:43:12,000
然后程序终止

992
00:43:13,000 --> 00:43:16,000
我觉得这其实非常愚蠢的一个错误提示就是

993
00:43:17,000 --> 00:43:20,000
我作为当时作为一个

994
00:43:20,000 --> 00:43:21,000
普通的用户

995
00:43:21,000 --> 00:43:23,000
我凭什么要去读这个

996
00:43:24,000 --> 00:43:25,000
16 进制的例子

997
00:43:25,000 --> 00:43:26,000
就是你这个

998
00:43:27,000 --> 00:43:29,000
popup 到底给我带来了什么呢

999
00:43:29,000 --> 00:43:30,000
什么也没有

1000
00:43:30,000 --> 00:43:32,000
你只是告诉我我的游戏不能玩了

1001
00:43:33,000 --> 00:43:36,000
所以你不如直接告诉我游戏不能玩了就好

1002
00:43:36,000 --> 00:43:40,000
产品经理偷懒吗没有去做这个事情

1003
00:43:40,000 --> 00:43:42,000
这个不应该暴露给用户

1004
00:43:42,000 --> 00:43:45,000
我相信这是 windows 的问题就是这种

1005
00:43:45,000 --> 00:43:46,000
严重的错误级别

1006
00:43:46,000 --> 00:43:50,000
这种就是现在我知道的这样的错误提示显示 windows 抛出来的

1007
00:43:50,000 --> 00:43:54,000
就是 windows 作为一个抢单试图任务的系统

1008
00:43:54,000 --> 00:43:57,000
可以探测到程序访问的不该访问的内存

1009
00:43:58,000 --> 00:44:00,000
所以他会抛出这样的错误提示来

1010
00:44:00,000 --> 00:44:01,000
OK

1011
00:44:02,000 --> 00:44:08,000
我相信这种情况就是我相信这种情况我在 macOS 10 上发生的话 macOS 10 会很简单的

1012
00:44:08,000 --> 00:44:09,000
让他 crush

1013
00:44:09,000 --> 00:44:13,000
然后跳出来一个对话框说你刚才的这个程序 crush 了

1014
00:44:13,000 --> 00:44:14,000
你要发送一个错误报告给 apple 吗

1015
00:44:15,000 --> 00:44:20,000
对啊现在 windows 不是这样子吗我好多年没有用

1016
00:44:20,000 --> 00:44:24,000
就咱们两个都不是 windows 所以我觉得这其实可能有点偏僻

1017
00:44:24,000 --> 00:44:29,000
不过其实我起码到 windows 7 的时候我还是有这个印象就 windows 上面

1018
00:44:29,000 --> 00:44:31,000
就一旦出了

1019
00:44:31,000 --> 00:44:32,000
任何

1020
00:44:32,000 --> 00:44:35,000
预料之外的事情他的那个错误提示都是非常的

1021
00:44:36,000 --> 00:44:37,000
用户不永好

1022
00:44:37,000 --> 00:44:39,000
highly user friendly

1023
00:44:40,000 --> 00:44:43,000
而且他一定要你点一下就是一定要跳出来告诉你啊这个玩意挂了

1024
00:44:44,000 --> 00:44:45,000
你确认吧

1025
00:44:45,000 --> 00:44:50,000
你点 OK 了是 windows 7 还是 vista 里面这个问题超严重就是他每次

1026
00:44:50,000 --> 00:44:51,000
出现任何

1027
00:44:51,000 --> 00:44:53,000
系统级别让你提示的东西他会

1028
00:44:53,000 --> 00:44:54,000
把

1029
00:44:54,000 --> 00:44:55,000
所有的都灰掉

1030
00:44:56,000 --> 00:44:57,000
只出现那个框

1031
00:44:58,000 --> 00:45:00,000
你没有办法去忽略他

1032
00:45:01,000 --> 00:45:02,000
然后就导致一个问题就是

1033
00:45:03,000 --> 00:45:09,000
普通用户他反正他也看不懂那个在说什么对吧然后那就点了你再多出几次之后他就

1034
00:45:09,000 --> 00:45:11,000
就点也不管他们说什么就会导致

1035
00:45:11,000 --> 00:45:12,000
他有一个

1036
00:45:12,000 --> 00:45:16,000
防止这个恶意程序的一种机制吗对吧我记得

1037
00:45:17,000 --> 00:45:18,000
是 vista 里面开始有的吧

1038
00:45:18,000 --> 00:45:20,000
但是因为这个他

1039
00:45:20,000 --> 00:45:22,000
他把用户训练的只要用的框就点 OK

1040
00:45:23,000 --> 00:45:25,000
所以其实那个机制的有了等于没有

1041
00:45:25,000 --> 00:45:28,000
你不断去烦用户说

1042
00:45:28,000 --> 00:45:32,000
这个程序会怎么样啊那个程序会怎么样这就是这个啊所有的都去死

1043
00:45:33,000 --> 00:45:33,000
不管

1044
00:45:33,000 --> 00:45:36,000
就好像不停的弹窗那么

1045
00:45:36,000 --> 00:45:39,000
用户养成的习惯就是一键弹窗立刻点关闭

1046
00:45:39,000 --> 00:45:42,000
对如果你不停跳对话框的用户的习惯就是

1047
00:45:42,000 --> 00:45:45,000
对话框出来不去读立刻点一个可以

1048
00:45:46,000 --> 00:45:47,000
让他最快消失的键

1049
00:45:47,000 --> 00:45:50,000
但其实现在我觉得就不管是在什么情况下

1050
00:45:50,000 --> 00:45:51,000
这是绝大多数用户的就是

1051
00:45:52,000 --> 00:45:53,000
第一反应了吧

1052
00:45:54,000 --> 00:45:57,000
对就我们黑 windows 的其实很多麦克用户也是这样的

1053
00:45:58,000 --> 00:46:01,000
不过这麦克上这个情况小的小一些哈就是

1054
00:46:02,000 --> 00:46:06,000
比如说起码他是从那个 10 点几开始搭那个那个叫什么玩意

1055
00:46:07,000 --> 00:46:07,000
那个

1056
00:46:07,000 --> 00:46:10,000
就你点一下他要经过他

1057
00:46:10,000 --> 00:46:13,000
去签名过的程序才可以正常使用那个

1058
00:46:13,000 --> 00:46:19,000
啊在那个 security settings 里面叫认证 authorize developer 之类的

1059
00:46:19,000 --> 00:46:20,000
那个功能

1060
00:46:20,000 --> 00:46:22,000
我看一下那个东西叫什么来着

1061
00:46:24,000 --> 00:46:25,000
呃

1062
00:46:25,000 --> 00:46:30,000
对就是 allow apps downloaded from 什么什么他有三个选项吗

1063
00:46:30,000 --> 00:46:32,000
他默认就是默认是

1064
00:46:33,000 --> 00:46:35,000
允许 app store 和这个

1065
00:46:35,000 --> 00:46:37,000
identify developers

1066
00:46:37,000 --> 00:46:37,000
anywhere

1067
00:46:38,000 --> 00:46:40,000
对就是基本上是我

1068
00:46:41,000 --> 00:46:43,000
好奇怪呀我居然没有改过这一项

1069
00:46:43,000 --> 00:46:44,000
你的默认是哪个

1070
00:46:45,000 --> 00:46:49,000
第二个就是 MAC app store and identify developers

1071
00:46:49,000 --> 00:46:49,000
对

1072
00:46:50,000 --> 00:46:52,000
你觉得你应该改哪一项

1073
00:46:53,000 --> 00:46:55,000
我竟然没有把它改成 anywhere 这是非常奇怪的

1074
00:46:56,000 --> 00:46:57,000
你为什么把它改成 anywhere

1075
00:46:58,000 --> 00:47:00,000
因为我觉得

1076
00:47:00,000 --> 00:47:01,000
这不是我不是在用

1077
00:47:02,000 --> 00:47:02,000
IOS

1078
00:47:03,000 --> 00:47:06,000
我知道我要干什么我作为一个程序员我知道我下载的

1079
00:47:07,000 --> 00:47:08,000
程序是什么

1080
00:47:08,000 --> 00:47:10,000
但至少是我认为我知道

1081
00:47:10,000 --> 00:47:12,000
所以你不要

1082
00:47:12,000 --> 00:47:15,000
stand in my way 然后告诉我不应该做什么

1083
00:47:15,000 --> 00:47:20,000
我觉得我就我就我知道有这三个选项然后我是故意留的这个

1084
00:47:20,000 --> 00:47:24,000
现在这个就是允许 app store 和这个受信任的开发者

1085
00:47:24,000 --> 00:47:30,000
然后这样有个好处就是我从网上下载了一个程序之后我可以很清楚的知道这个程序是被那个开发者

1086
00:47:31,000 --> 00:47:32,000
自己签过名的没

1087
00:47:33,000 --> 00:47:35,000
如果他是没有被签名的

1088
00:47:35,000 --> 00:47:36,000
他

1089
00:47:36,000 --> 00:47:38,000
然后我觉得他应该是有签名的话

1090
00:47:38,000 --> 00:47:41,000
他可能我下的那个版本可能会是一个

1091
00:47:41,000 --> 00:47:42,000
叫做什么

1092
00:47:42,000 --> 00:47:44,000
contaminated 版本

1093
00:47:45,000 --> 00:47:45,000
对

1094
00:47:46,000 --> 00:47:49,000
可是你不觉得这一点其实对于你这个

1095
00:47:49,000 --> 00:47:50,000
层级的程序

1096
00:47:50,000 --> 00:47:52,000
很无稽吗就是

1097
00:47:52,000 --> 00:47:54,000
你明明也会去用 bro

1098
00:47:55,000 --> 00:47:56,000
homebrew 或者是

1099
00:47:56,000 --> 00:47:58,000
其他的脚本

1100
00:47:58,000 --> 00:48:00,000
程序有时候这些脚本程序有些

1101
00:48:00,000 --> 00:48:02,000
有些安装包他同样是需要你速度的

1102
00:48:02,000 --> 00:48:04,000
那这种情况下你其实

1103
00:48:04,000 --> 00:48:06,000
这种程序是不会经过

1104
00:48:07,000 --> 00:48:10,000
Apple 的这一套认证机制

1105
00:48:10,000 --> 00:48:11,000
可是你照样会去运行

1106
00:48:12,000 --> 00:48:13,000
我 homebrew 我不用速度啊

1107
00:48:13,000 --> 00:48:15,000
我把他那个就是 user local 改成了

1108
00:48:16,000 --> 00:48:17,000
我自己属于我自己的

1109
00:48:17,000 --> 00:48:19,000
homebrew 是一个不好的语言

1110
00:48:20,000 --> 00:48:22,000
我意思是你可以去运行一些脚本

1111
00:48:23,000 --> 00:48:29,000
脚本程序而不仅仅是这种经过 Apple 打包的 bundle 程序

1112
00:48:29,000 --> 00:48:31,000
但那种程序的安全性是

1113
00:48:31,000 --> 00:48:33,000
不受这里的控制

1114
00:48:33,000 --> 00:48:34,000
所保护的

1115
00:48:34,000 --> 00:48:35,000
对

1116
00:48:35,000 --> 00:48:37,000
我想想我觉得是这样子就是

1117
00:48:38,000 --> 00:48:40,000
我知道我

1118
00:48:40,000 --> 00:48:42,000
大部分时候在做什么但是我不保证

1119
00:48:43,000 --> 00:48:45,000
有时候没睡醒的时候或者是快睡着的时候

1120
00:48:46,000 --> 00:48:48,000
做的事情都是一定是合乎逻辑的

1121
00:48:49,000 --> 00:48:49,000
所以

1122
00:48:49,000 --> 00:48:50,000
有这么一个安全性

1123
00:48:50,000 --> 00:48:51,000
我认为这个机制保护一下还是挺好的

1124
00:48:52,000 --> 00:48:54,000
然后要跳出这个机制其实也很简单

1125
00:48:54,000 --> 00:48:57,000
就是你双击执行那个 app 不行的话你就右键

1126
00:48:58,000 --> 00:49:01,000
调出那个 context menu 然后点 open 的话他就可以绕过

1127
00:49:02,000 --> 00:49:04,000
那个限制他会问你确认一下

1128
00:49:04,000 --> 00:49:06,000
那你就再二次确认一下就可以直接执行

1129
00:49:06,000 --> 00:49:07,000
你不需要

1130
00:49:07,000 --> 00:49:11,000
把这个选项调成 allow from anywhere

1131
00:49:11,000 --> 00:49:12,000
就沙上面比较大了

1132
00:49:13,000 --> 00:49:14,000
所以

1133
00:49:14,000 --> 00:49:15,000
就哪怕是

1134
00:49:16,000 --> 00:49:17,000
你知道你在干什么

1135
00:49:17,000 --> 00:49:18,000
就好像

1136
00:49:18,000 --> 00:49:25,000
就好像很多车你开车一样对吧你虽然认识怎么开但是我觉得有这么一种安全机制还是不错的

1137
00:49:26,000 --> 00:49:31,000
对我其实刚才是惊讶的是我这台电脑买来也有

1138
00:49:32,000 --> 00:49:33,000
两个月了

1139
00:49:33,000 --> 00:49:36,000
就是买了一台新的 mvp

1140
00:49:37,000 --> 00:49:37,000
然后

1141
00:49:38,000 --> 00:49:42,000
这两个月里面我居然从来没有改过它也没有察觉到任何不正常

1142
00:49:43,000 --> 00:49:43,000
或者说

1143
00:49:44,000 --> 00:49:44,000
察觉到任何不变

1144
00:49:45,000 --> 00:49:45,000
所以

1145
00:49:46,000 --> 00:49:48,000
说明两个问题对吧要不你就是用

1146
00:49:48,000 --> 00:49:50,000
用的第三方软件比较少

1147
00:49:50,000 --> 00:49:52,000
要么就是

1148
00:49:53,000 --> 00:49:53,000
就是

1149
00:49:54,000 --> 00:49:55,000
你遇到的都是那种

1150
00:49:55,000 --> 00:49:57,000
签名过的至少是

1151
00:49:57,000 --> 00:49:58,000
对

1152
00:49:58,000 --> 00:50:00,000
下载还证明了第 3 个问题就是

1153
00:50:01,000 --> 00:50:06,000
还证明了第 3 点就是其实你的选择是比较理智我有点太

1154
00:50:06,000 --> 00:50:07,000
over opening

1155
00:50:08,000 --> 00:50:08,000
对

1156
00:50:08,000 --> 00:50:08,000
就

1157
00:50:09,000 --> 00:50:14,000
我是就刚才讲了我们刚才也在讲不想折腾吗这也是其中一个就是

1158
00:50:15,000 --> 00:50:16,000
我之前还说了这么一个事情

1159
00:50:17,000 --> 00:50:18,000
就之前我打

1160
00:50:18,000 --> 00:50:20,000
那个在麦克上打中文输入法

1161
00:50:20,000 --> 00:50:25,000
对我一个叫做属虚管的一个一个对我用的对吧

1162
00:50:25,000 --> 00:50:30,000
对这如果有听众不知道的话数据管是中文界最好的输入法没有执意

1163
00:50:31,000 --> 00:50:34,000
然后免费为这个佛镇做广告对

1164
00:50:34,000 --> 00:50:41,000
在连那个连接我们可以放到这个里面不过那个东西其实还不算用特别友好他的那个

1165
00:50:41,000 --> 00:50:43,000
要改设置是要改配置文件的

1166
00:50:43,000 --> 00:50:46,000
但在麦克上面有一个

1167
00:50:46,000 --> 00:50:47,000
Gy 可以用的

1168
00:50:47,000 --> 00:50:47,000
对

1169
00:50:48,000 --> 00:50:49,000
对把那个也到时候连进去吧

1170
00:50:50,000 --> 00:50:51,000
但 anyway 我想说的是

1171
00:50:51,000 --> 00:50:57,000
我最近把那个数据管关掉了我开始用那个系统默认的那个拼音输入法就自带的那个

1172
00:50:57,000 --> 00:50:57,000
感觉怎样

1173
00:50:58,000 --> 00:50:58,000
现在还不错

1174
00:51:01,000 --> 00:51:05,000
就是我没有觉得效率有特别大的影响但一方面是因为我

1175
00:51:06,000 --> 00:51:10,000
最近打中文打的不多好其实也无所谓因为日常都是

1176
00:51:10,000 --> 00:51:12,000
英文的比较多然后

1177
00:51:12,000 --> 00:51:16,000
中文的话也就进线给你们发发邮件聊聊天之类的

1178
00:51:16,000 --> 00:51:16,000
是这样

1179
00:51:17,000 --> 00:51:18,000
而且我觉得是

1180
00:51:18,000 --> 00:51:21,000
这个数据管让我觉得很不爽的一点就是我在

1181
00:51:21,000 --> 00:51:22,000
输入

1182
00:51:22,000 --> 00:51:23,000
我不知道

1183
00:51:23,000 --> 00:51:27,000
自带的中文输入法有没有这个问题就是你在输入这个德语的叫 umlaut

1184
00:51:27,000 --> 00:51:28,000
的时候就是

1185
00:51:28,000 --> 00:51:30,000
有些字母上面要加两点

1186
00:51:31,000 --> 00:51:33,000
在这种情况下如果是麦克的

1187
00:51:34,000 --> 00:51:35,000
英文状态

1188
00:51:35,000 --> 00:51:36,000
可以通过

1189
00:51:36,000 --> 00:51:37,000
alt 加上 u

1190
00:51:38,000 --> 00:51:38,000
来输入

1191
00:51:38,000 --> 00:51:44,000
两点然后再按一个字母这样就可以形成这个字母上面加两点的这个

1192
00:51:44,000 --> 00:51:45,000
组合

1193
00:51:45,000 --> 00:51:46,000
但是在数据管里面是没有的

1194
00:51:46,000 --> 00:51:48,000
其实我一直想要给

1195
00:51:48,000 --> 00:51:50,000
佛镇提一个 bug request

1196
00:51:50,000 --> 00:51:51,000
因为

1197
00:51:52,000 --> 00:51:52,000
有些

1198
00:51:53,000 --> 00:51:54,000
组合键在

1199
00:51:54,000 --> 00:51:57,000
数据管下面是可以按出来的但是这个没有

1200
00:51:57,000 --> 00:51:59,000
所以他是因为有他被

1201
00:51:59,000 --> 00:52:00,000
占用了吗还是怎么样

1202
00:52:01,000 --> 00:52:05,000
应该不是吧就比如说在数据管下面你按 alt 加 a

1203
00:52:06,000 --> 00:52:08,000
你可以打出这个

1204
00:52:09,000 --> 00:52:09,000
是吧

1205
00:52:10,000 --> 00:52:12,000
不是 ap 应该是那个

1206
00:52:12,000 --> 00:52:15,000
挪威语的 o 就是 a 上面加一个圈

1207
00:52:15,000 --> 00:52:17,000
我不确定但应该是可以的

1208
00:52:18,000 --> 00:52:19,000
但是

1209
00:52:20,000 --> 00:52:23,000
但是在你要想打无门老的时候都不可以

1210
00:52:24,000 --> 00:52:29,000
我觉得他可能老是不是也是类似一种 ime 的方式来实现你看

1211
00:52:29,000 --> 00:52:30,000
无门老子

1212
00:52:30,000 --> 00:52:36,000
就是这种就是你先按一个键再按其他键然后这两个键组合成一个字母的

1213
00:52:36,000 --> 00:52:37,000
方式叫做 dead key

1214
00:52:38,000 --> 00:52:40,000
dead key 应该不是

1215
00:52:41,000 --> 00:52:45,000
dead key 应该是可以通过被 ime 改变的但是

1216
00:52:46,000 --> 00:52:47,000
我相信他是可以的

1217
00:52:48,000 --> 00:52:51,000
可以不去改系统既有的这种 dead key 设置

1218
00:52:51,000 --> 00:52:52,000
OK

1219
00:52:52,000 --> 00:52:55,000
我也没有做过这些东西我只是猜想吧

1220
00:52:55,000 --> 00:52:57,000
那你可以跟他提个 bug request

1221
00:52:58,000 --> 00:52:59,000
pull request

1222
00:52:59,000 --> 00:53:00,000
你自己改好了

1223
00:53:01,000 --> 00:53:01,000
bug request

1224
00:53:01,000 --> 00:53:03,000
我不知道我不知道怎么改

1225
00:53:03,000 --> 00:53:04,000
我太弱了

1226
00:53:05,000 --> 00:53:07,000
我相信

1227
00:53:07,000 --> 00:53:08,000
等等

1228
00:53:08,000 --> 00:53:09,000
数据管是用什么写的

1229
00:53:09,000 --> 00:53:10,000
c++

1230
00:53:11,000 --> 00:53:13,000
好问题我不知道

1231
00:53:13,000 --> 00:53:15,000
没有关注过

1232
00:53:16,000 --> 00:53:18,000
我昨天去面试的时候

1233
00:53:18,000 --> 00:53:20,000
对

1234
00:53:20,000 --> 00:53:21,000
听众朋友们我

1235
00:53:21,000 --> 00:53:22,000
作为一个

1236
00:53:22,000 --> 00:53:24,000
目前你们还不太了解的

1237
00:53:24,000 --> 00:53:25,000
主持人昨天我去

1238
00:53:26,000 --> 00:53:28,000
面试新工作就是在面试的时候

1239
00:53:28,000 --> 00:53:29,000
他们

1240
00:53:30,000 --> 00:53:32,000
给了我一个一道面试题

1241
00:53:32,000 --> 00:53:34,000
面试题里面写说

1242
00:53:34,000 --> 00:53:36,000
最好能用 C++解决

1243
00:53:37,000 --> 00:53:38,000
然后

1244
00:53:38,000 --> 00:53:40,000
我心里就流汗我说

1245
00:53:40,000 --> 00:53:46,000
这个招聘简历上可没写说一定要回 C++而且我真的是不会 C++然后我就说我气上

1246
00:53:47,000 --> 00:53:48,000
问我能用 parser

1247
00:53:48,000 --> 00:53:48,000
写吗

1248
00:53:49,000 --> 00:53:49,000
他们说可以

1249
00:53:50,000 --> 00:53:51,000
然后用一秒钟写出来

1250
00:53:51,000 --> 00:53:56,000
效率顿时就不一样了

1251
00:53:56,000 --> 00:53:57,000
对啊我觉得对

1252
00:53:58,000 --> 00:54:04,000
但是我也不是很骄傲因为我觉得如果能用能在 10 秒钟之内用 C++写出来可能更快

1253
00:54:04,000 --> 00:54:06,000
可能更会受到激赏

1254
00:54:06,000 --> 00:54:08,000
你对他用一秒写出来更爽

1255
00:54:09,000 --> 00:54:10,000
对啊

1256
00:54:10,000 --> 00:54:12,000
一秒可能夸张了可能三秒

1257
00:54:12,000 --> 00:54:14,000
毕竟要写一个

1258
00:54:14,000 --> 00:54:16,000
打几个字是吧

1259
00:54:16,000 --> 00:54:17,000
嗯

1260
00:54:17,000 --> 00:54:18,000
就是一个

1261
00:54:18,000 --> 00:54:19,000
你有在找工作吗

1262
00:54:19,000 --> 00:54:21,000
我没有岔开了不关你的

1263
00:54:21,000 --> 00:54:22,000
目前还没有啊

1264
00:54:23,000 --> 00:54:24,000
你想

1265
00:54:24,000 --> 00:54:25,000
你是什么时候毕业

1266
00:54:25,000 --> 00:54:27,000
理论上是明年吧

1267
00:54:29,000 --> 00:54:32,000
对我们的嘉宾主持 Rail 现在还在读博士

1268
00:54:32,000 --> 00:54:33,000
Rail 博士你好

1269
00:54:33,000 --> 00:54:34,000
candidate

1270
00:54:35,000 --> 00:54:36,000
还不算

1271
00:54:37,000 --> 00:54:38,000
对就是 doctor

1272
00:54:38,000 --> 00:54:40,000
博士生

1273
00:54:40,000 --> 00:54:42,000
doctor rail gonna be

1274
00:54:44,000 --> 00:54:45,000
北京时间

1275
00:54:46,000 --> 00:54:47,000
百分好

1276
00:54:47,000 --> 00:54:47,000
HTN

1277
00:54:48,000 --> 00:54:48,000
好 M 分

1278
00:54:49,000 --> 00:54:51,000
您现在收听到的是内核恐慌

1279
00:54:51,000 --> 00:54:52,000
有

1280
00:54:52,000 --> 00:54:53,000
Doctor rail gonna be

1281
00:54:54,000 --> 00:54:54,000
和

1282
00:54:54,000 --> 00:54:56,000
吴涛为你主持一款

1283
00:54:57,000 --> 00:55:00,000
普通人也能听懂但是普通人一般不会来听的 IT 播客节目

1284
00:55:01,000 --> 00:55:03,000
你确定普通人能听懂啊

1285
00:55:04,000 --> 00:55:07,000
程序员能够听懂但是程序员一般不听的播客节目

1286
00:55:08,000 --> 00:55:10,000
我们这样不好我觉得应该

1287
00:55:10,000 --> 00:55:15,000
要做成程序员能听懂的程序员来听普通人不会听的播客就好了

1288
00:55:16,000 --> 00:55:17,000
或者说

1289
00:55:17,000 --> 00:55:17,000
呃

1290
00:55:17,000 --> 00:55:21,000
程序员都喜欢听但是程序员甚至不一定能听懂的播客节目

1291
00:55:21,000 --> 00:55:23,000
那好失败感觉

1292
00:55:23,000 --> 00:55:27,000
No no no 这样会让程序员产生一种挫折感然后会

1293
00:55:27,000 --> 00:55:29,000
奋发图强去

1294
00:55:30,000 --> 00:55:31,000
去去

1295
00:55:31,000 --> 00:55:32,000
学到能够来

1296
00:55:32,000 --> 00:55:36,000
我们的节目的种种微小的错误的水平

1297
00:55:36,000 --> 00:55:38,000
这就是达到我们节目的目的了

1298
00:55:40,000 --> 00:55:42,000
所以怎样今天到此为止吗

1299
00:55:44,000 --> 00:55:45,000
我们录了多久

1300
00:55:45,000 --> 00:55:47,000
差不多一小时了

1301
00:55:47,000 --> 00:55:48,000
对

1302
00:55:48,000 --> 00:55:49,000
OK

1303
00:55:49,000 --> 00:55:51,000
对那我们还是控制在一小时内吧

1304
00:55:51,000 --> 00:55:53,000
OK 就这样戛然而止

1305
00:55:53,000 --> 00:55:54,000
那么

1306
00:55:54,000 --> 00:55:56,000
不知道各位听众听的中

1307
00:55:56,000 --> 00:55:57,000
那个字念假呀

1308
00:55:59,000 --> 00:56:00,000
不念假吗

1309
00:56:00,000 --> 00:56:03,000
我不知道我经常会念错字然后被

1310
00:56:03,000 --> 00:56:06,000
被听众那个指出啊这个字这么念

1311
00:56:08,000 --> 00:56:10,000
我希望是戛然而止

1312
00:56:10,000 --> 00:56:13,000
对假如你认为这个字有其他的念法

1313
00:56:13,000 --> 00:56:14,000
也请你

1314
00:56:14,000 --> 00:56:16,000
也欢迎你连同其他反馈告诉我们

1315
00:56:16,000 --> 00:56:18,000
我们的

1316
00:56:18,000 --> 00:56:21,000
对我们的 producer 是 Lawrence Lee

1317
00:56:21,000 --> 00:56:23,000
他会为我们剪辑今天的这款节目

1318
00:56:24,000 --> 00:56:27,000
我们还没有社交媒体啊

1319
00:56:28,000 --> 00:56:32,000
对暂时如果有反馈的话可以直接反馈 IT 公论

1320
00:56:32,000 --> 00:56:33,000
IT 公论的

1321
00:56:33,000 --> 00:56:37,000
Twitter 账号是 IT 公论的全拼

1322
00:56:37,000 --> 00:56:37,000
Twitter

1323
00:56:38,000 --> 00:56:39,000
我再模仿了二次

1324
00:56:39,000 --> 00:56:42,000
这个算了这个我做有一个邮箱地址吧到时候会

1325
00:56:43,000 --> 00:56:46,000
有一个就每个播客在 IPN 都会有一个邮箱的嘛

1326
00:56:46,000 --> 00:56:47,000
对但是

1327
00:56:47,000 --> 00:56:51,000
每一个播客会在 Twitter 或者是微博上面有自己的账号吗

1328
00:56:51,000 --> 00:56:51,000
下次吧

1329
00:56:52,000 --> 00:56:53,000
叮咚

1330
00:56:53,000 --> 00:56:59,000
等等等等等等不要下次了事实上在我剪辑播客的时候 Rail 已经效率非常高的把

1331
00:56:59,000 --> 00:57:03,000
内核恐慌的社交网络账号注册好了我们在

1332
00:57:03,000 --> 00:57:07,000
新浪微博和 Twitter 都是叫 KernelpanicFM

1333
00:57:07,000 --> 00:57:09,000
KernelpanicFM

1334
00:57:09,000 --> 00:57:13,000
KernelpanicFM

1335
00:57:14,000 --> 00:57:15,000
所以

1336
00:57:15,000 --> 00:57:21,000
观众朋友有任何反馈可以给我们写一个介绍邮件地址是 Kernelpanic

1337
00:57:21,000 --> 00:57:25,000
Kernelpanic

1338
00:57:25,000 --> 00:57:25,000
at

1339
00:57:26,000 --> 00:57:27,000
ipn.li

1340
00:57:28,000 --> 00:57:30,000
写在一起中间没有 dot 或者是 dash

1341
00:57:30,000 --> 00:57:32,000
不分档也没有下滑线

1342
00:57:32,000 --> 00:57:34,000
有点长

1343
00:57:35,000 --> 00:57:40,000
OK 那今天节目先到这里然后我们下期再见

1344
00:57:40,000 --> 00:57:41,000
OK

1345
00:57:41,000 --> 00:57:42,000
拜拜

