1
00:00:00,000 --> 00:00:04,000
大家好,欢迎收听第六期的内核恐慌,我是 Rail

2
00:00:04,000 --> 00:00:05,000
我是吴涛

3
00:00:05,000 --> 00:00:11,000
在今天节目开始之前呢,我们先去做一下上期的反馈吧

4
00:00:11,000 --> 00:00:11,000
好呀

5
00:00:11,000 --> 00:00:14,000
吴涛,你又念错字了

6
00:00:14,000 --> 00:00:24,000
对,反正上次我念了一个以食听众在这里向大家鞠翼功

7
00:00:24,000 --> 00:00:26,000
各位听众,对不起,我不应该吃你们

8
00:00:26,000 --> 00:00:33,000
那个字念是想,就是左边一个乡村的乡,右边一个食物的食

9
00:00:33,000 --> 00:00:40,000
这个字念以想听众,就是以把什么东西供奉给听众吃,而不是

10
00:00:40,000 --> 00:00:42,000
吃掉听众是吧

11
00:00:42,000 --> 00:00:43,000
对

12
00:00:43,000 --> 00:00:43,000
你是螳螂吗

13
00:00:43,000 --> 00:00:47,000
螳螂只有在交配的时候

14
00:00:47,000 --> 00:00:53,000
其实这个事情我觉得也可以理解吧

15
00:00:53,000 --> 00:00:56,000
你说这个字如果你知道我来念,我估计也会看

16
00:00:56,000 --> 00:01:00,000
你想那个左边那么小,右边那么大,应该念右边吧

17
00:01:00,000 --> 00:01:04,000
对呀,而且就才念字念半边嘛

18
00:01:04,000 --> 00:01:07,000
对

19
00:01:07,000 --> 00:01:10,000
其实中文就是有这点不好啊

20
00:01:10,000 --> 00:01:14,000
就经常有这种所谓的什么规律嘛

21
00:01:14,000 --> 00:01:17,000
说如果你不认识这个字,你可以看下来有没有偏旁不守啊

22
00:01:17,000 --> 00:01:21,000
说一般是什么一边形旁,一个身旁,对吧

23
00:01:21,000 --> 00:01:21,000
嗯

24
00:01:21,000 --> 00:01:23,000
给你一个

25
00:01:23,000 --> 00:01:25,000
中文还是在我们现在生存中的一个形旁啊

26
00:01:25,000 --> 00:01:26,000
我们现在生存中的一个形旁啊

27
00:01:26,000 --> 00:01:30,000
我们现在所在一个中文从象形文字向平原词的过渡过程中

28
00:01:30,000 --> 00:01:33,000
但是这个过渡可能永远也不会实现了

29
00:01:33,000 --> 00:01:37,000
因为毕竟现在汉字已经是一种文化瑰宝

30
00:01:37,000 --> 00:01:41,000
它是不可能,永远不可能实现假名化了

31
00:01:41,000 --> 00:01:45,000
所以你某某的是支持这件事情的是吧

32
00:01:45,000 --> 00:01:49,000
也没有吧

33
00:01:49,000 --> 00:01:54,000
就,但是拉丁化方案,拉丁化,汉字拉丁化那么激进的方案

34
00:01:54,000 --> 00:01:58,000
都,也不是都没有实现

35
00:01:58,000 --> 00:02:02,000
就让人觉得非常受不了了

36
00:02:02,000 --> 00:02:05,000
但是我觉得拉丁化在逻辑上已经实现了

37
00:02:05,000 --> 00:02:08,000
就在事实上已经成立了

38
00:02:08,000 --> 00:02:10,000
你说用拼书法吧

39
00:02:10,000 --> 00:02:11,000
对啊

40
00:02:11,000 --> 00:02:13,000
就是经常会有那种

41
00:02:13,000 --> 00:02:16,000
就现在网络上一些用语不方便直接讲的时候

42
00:02:16,000 --> 00:02:19,000
都会在那个后面注一下这个拼音嘛

43
00:02:19,000 --> 00:02:22,000
然后大家读一下都知道那个是什么意思的啊

44
00:02:23,000 --> 00:02:24,000
嗯

45
00:02:24,000 --> 00:02:25,000
对,而且

46
00:02:25,000 --> 00:02:29,000
对,反正是越来越没有人写字了

47
00:02:29,000 --> 00:02:29,000
这是肯定的

48
00:02:29,000 --> 00:02:30,000
对,都在打

49
00:02:30,000 --> 00:02:34,000
但是我还在 07 年

50
00:02:34,000 --> 00:02:36,000
反正 iPhone 出现之前

51
00:02:36,000 --> 00:02:40,000
我还坚持用过罗家上面的笔画输入法

52
00:02:40,000 --> 00:02:42,000
我觉得至少这样可以让我

53
00:02:42,000 --> 00:02:43,000
是那个九宫格那个吗

54
00:02:43,000 --> 00:02:46,000
对,九宫格的那个笔画输入法

55
00:02:46,000 --> 00:02:48,000
其实我一直觉得那个还蛮好的

56
00:02:48,000 --> 00:02:49,000
叫什么 T 9 吧,是不是

57
00:02:49,000 --> 00:02:53,000
好像是叫 T 9

58
00:02:53,000 --> 00:02:54,000
T 9 是拼音吧

59
00:02:54,000 --> 00:02:54,000
对

60
00:02:54,000 --> 00:02:54,000
不是吗

61
00:02:54,000 --> 00:02:55,000
是吗,T 9 是拼音吗

62
00:02:55,000 --> 00:02:56,000
OK

63
00:02:56,000 --> 00:02:57,000
我怎么记得

64
00:02:57,000 --> 00:02:58,000
我不记得,我不确定

65
00:02:58,000 --> 00:03:01,000
但我记得那个书法只要有五个键而已吧

66
00:03:01,000 --> 00:03:02,000
就横竖撇拉

67
00:03:02,000 --> 00:03:04,000
横竖撇拉

68
00:03:04,000 --> 00:03:06,000
就是撇

69
00:03:06,000 --> 00:03:08,000
就是右上到左下

70
00:03:08,000 --> 00:03:10,000
然后横,然后竖

71
00:03:10,000 --> 00:03:12,000
我觉得那个书法真的挺好的

72
00:03:12,000 --> 00:03:15,000
对,它解决了我很多的倒差比问题

73
00:03:15,000 --> 00:03:16,000
比如说

74
00:03:16,000 --> 00:03:17,000
什么是倒差比

75
00:03:17,000 --> 00:03:24,000
就是一个汉字的笔顺和官方规定的部分

76
00:03:24,000 --> 00:03:26,000
然后这样我就打不出来

77
00:03:26,000 --> 00:03:27,000
比如说女人的女字吧,好像

78
00:03:27,000 --> 00:03:28,000
对对对

79
00:03:28,000 --> 00:03:31,000
然后我十次有九次打不出来

80
00:03:31,000 --> 00:03:32,000
所以那个笔画是什么

81
00:03:32,000 --> 00:03:34,000
应该是撇折再撇

82
00:03:34,000 --> 00:03:35,000
然后最后一个横是吧

83
00:03:35,000 --> 00:03:36,000
我现在又不记得

84
00:03:36,000 --> 00:03:38,000
也可能是先写横

85
00:03:38,000 --> 00:03:38,000
对

86
00:03:38,000 --> 00:03:39,000
反正

87
00:03:39,000 --> 00:03:40,000
对

88
00:03:40,000 --> 00:03:42,000
然后还有那个所有在走之旁的字

89
00:03:42,000 --> 00:03:44,000
我全都先写走之

90
00:03:44,000 --> 00:03:44,000
对吧

91
00:03:44,000 --> 00:03:45,000
对

92
00:03:45,000 --> 00:03:46,000
这合理啊

93
00:03:46,000 --> 00:03:49,000
你先把那个周围的那个框画出来

94
00:03:49,000 --> 00:03:50,000
然后在那边描那个小的

95
00:03:50,000 --> 00:03:53,000
我也是这么觉得

96
00:03:53,000 --> 00:03:54,000
但是

98
00:04:24,000 --> 00:04:25,000
我还是先练这个架构

99
00:04:25,000 --> 00:04:29,000
不过这个这个就是笔画书法真的挺好的

100
00:04:29,000 --> 00:04:31,000
就是我有一个例子啊

101
00:04:31,000 --> 00:04:35,000
就我给我爸妈那个时候教他们用这个电脑数字

102
00:04:35,000 --> 00:04:38,000
然后五笔和平音都尝试过

103
00:04:38,000 --> 00:04:39,000
都对了

104
00:04:39,000 --> 00:04:41,000
他们他们那代人来说都太难了嘛

105
00:04:41,000 --> 00:04:44,000
但是他们在手机那个就不是现在的手机

106
00:04:44,000 --> 00:04:45,000
在那个时候的手机上

107
00:04:45,000 --> 00:04:47,000
就是还是键盘的时候用这个啊

108
00:04:47,000 --> 00:04:49,000
就是横竖撇拉这么一笔的写

109
00:04:49,000 --> 00:04:53,000
其实对他们来讲就跟那个教写字一样

110
00:04:53,000 --> 00:04:53,000
就说你记着

111
00:04:53,000 --> 00:04:54,000
你先打横竖撇拉

112
00:04:54,000 --> 00:04:56,000
你就怎么写那个字

113
00:04:56,000 --> 00:04:56,000
你就照着那个按

114
00:04:56,000 --> 00:04:58,000
就只用记那五个键就可以了嘛

115
00:04:58,000 --> 00:05:02,000
然后加上这个这个笔符符顺纠错的这种功能的话

116
00:05:02,000 --> 00:05:06,000
就大部分场合还是能把那个中文字写出来的

117
00:05:06,000 --> 00:05:07,000
嗯

118
00:05:07,000 --> 00:05:08,000
OK

119
00:05:08,000 --> 00:05:10,000
下一条就什么玩意儿

120
00:05:10,000 --> 00:05:10,000
啊

121
00:05:10,000 --> 00:05:14,000
对上次对说说到德语

122
00:05:14,000 --> 00:05:16,000
就是上次我念错了一个德语单词

123
00:05:16,000 --> 00:05:18,000
就是当我提到啊

124
00:05:18,000 --> 00:05:20,000
F E 就是那个

125
00:05:20,000 --> 00:05:21,000
呃

126
00:05:21,000 --> 00:05:23,000
在德国的车牌上面

127
00:05:23,000 --> 00:05:25,000
所使用的那种呃

128
00:05:25,000 --> 00:05:26,000
字体的时候

129
00:05:26,000 --> 00:05:27,000
车牌字体啊 OK

130
00:05:27,000 --> 00:05:28,000
对

131
00:05:28,000 --> 00:05:30,000
它的正确的名字叫做

132
00:05:30,000 --> 00:05:32,000
Fächungs-Eschweren-Schrift

133
00:05:32,000 --> 00:05:33,000
呃

134
00:05:33,000 --> 00:05:35,000
然后我上次

135
00:05:35,000 --> 00:05:36,000
我上次念上了

136
00:05:36,000 --> 00:05:39,000
Fächungs-Eschweren-Schrift

137
00:05:39,000 --> 00:05:40,000
等一下我很好奇是谁

138
00:05:40,000 --> 00:05:41,000
谁听出来你念错

139
00:05:41,000 --> 00:05:42,000
当然是我女朋友

140
00:05:42,000 --> 00:05:44,000
啊

141
00:05:44,000 --> 00:05:46,000
原来还有一个铁杆粉丝

142
00:05:46,000 --> 00:05:47,000
那可不

143
00:05:47,000 --> 00:05:50,000
他已经开始给贵爵募捐钱了

144
00:05:50,000 --> 00:05:51,000
呃

145
00:05:51,000 --> 00:05:52,000
你是说埃及公论吗

146
00:05:52,000 --> 00:05:53,000
对啊

147
00:05:53,000 --> 00:05:54,000
哈哈哈哈

148
00:05:54,000 --> 00:05:55,000
OK

149
00:05:55,000 --> 00:05:56,000
不是给 B 节目捐钱

150
00:05:56,000 --> 00:05:57,000
哈哈

151
00:05:57,000 --> 00:05:57,000
不不不过

152
00:05:57,000 --> 00:06:01,000
不过 B 节目也有很多听众要求说来信

153
00:06:01,000 --> 00:06:01,000
啊

154
00:06:01,000 --> 00:06:03,000
纷纷来信说要给我们捐钱

155
00:06:03,000 --> 00:06:05,000
拿钱砸砸晕我吗

156
00:06:05,000 --> 00:06:06,000
真的假的

157
00:06:06,000 --> 00:06:07,000
我才不相信

158
00:06:07,000 --> 00:06:08,000
真的真的真的不开玩笑

159
00:06:08,000 --> 00:06:09,000
不开玩笑

160
00:06:09,000 --> 00:06:11,000
那那我们应该怎样

161
00:06:11,000 --> 00:06:16,000
怎样让我们的这个捐款页面显得更加 gik 一点呢

162
00:06:16,000 --> 00:06:18,000
你看我的这个捐款页面都做好了

163
00:06:18,000 --> 00:06:21,000
就等你大笔一挥同意

164
00:06:21,000 --> 00:06:21,000
我

165
00:06:21,000 --> 00:06:23,000
好吧

166
00:06:23,000 --> 00:06:24,000
我缺个麦克风

167
00:06:24,000 --> 00:06:25,000
也许可以

168
00:06:25,000 --> 00:06:27,000
各位给我凑点经费

169
00:06:27,000 --> 00:06:28,000
搞一个好点麦克风

170
00:06:28,000 --> 00:06:30,000
这样大家可以清到听到我

171
00:06:30,000 --> 00:06:32,000
嗯嗯

172
00:06:32,000 --> 00:06:33,000
更加清透的嗓音

173
00:06:33,000 --> 00:06:34,000
对更加丰富

174
00:06:34,000 --> 00:06:36,000
更加有层次感的声音

175
00:06:36,000 --> 00:06:37,000
有层次感的声音

176
00:06:37,000 --> 00:06:39,000
不不不过

177
00:06:39,000 --> 00:06:41,000
其实现在有很多人听不出来

178
00:06:41,000 --> 00:06:44,000
你是用的那个麦克的那只麦克风在录

179
00:06:44,000 --> 00:06:45,000
啊

180
00:06:45,000 --> 00:06:48,000
因为那只麦克风据说效果非常好

181
00:06:48,000 --> 00:06:48,000
对

182
00:06:48,000 --> 00:06:49,000
但是离这个一个专用的麦克风还是有的

183
00:06:49,000 --> 00:06:51,000
对但是离这个一个专用的麦克风还是有的

184
00:06:51,000 --> 00:06:51,000
对但是离这个一个专用的麦克风还是有的

185
00:06:51,000 --> 00:06:53,000
其实有比较明显的差别

186
00:06:53,000 --> 00:06:54,000
嗯

187
00:06:54,000 --> 00:06:57,000
对我在那个 Instagram 上看到了你用的麦克风

188
00:06:57,000 --> 00:06:59,000
感觉好像蛮专业的

189
00:06:59,000 --> 00:07:01,000
我那个也是一个入门级的而已

190
00:07:01,000 --> 00:07:01,000
嗯

191
00:07:01,000 --> 00:07:04,000
我们可以给买给你给

192
00:07:04,000 --> 00:07:06,000
如果我们这个节目也开始收钱

193
00:07:06,000 --> 00:07:08,000
打银号

194
00:07:08,000 --> 00:07:10,000
我们拿到他的钱

195
00:07:10,000 --> 00:07:14,000
第一件事就是先给你买一套这个好的录音好的这个设备

196
00:07:14,000 --> 00:07:15,000
耶

197
00:07:15,000 --> 00:07:16,000
不过

198
00:07:16,000 --> 00:07:17,000
耶

199
00:07:17,000 --> 00:07:19,000
现在我们就看

200
00:07:19,000 --> 00:07:21,000
到底会如何给我们钱好不好

201
00:07:21,000 --> 00:07:21,000
嗯

202
00:07:21,000 --> 00:07:23,000
对

203
00:07:23,000 --> 00:07:25,000
嗯

204
00:07:25,000 --> 00:07:27,000
然后这不是我唯一念错的德语词

205
00:07:27,000 --> 00:07:28,000
嗯

206
00:07:28,000 --> 00:07:30,000
我还念错了另外一个叫做

207
00:07:30,000 --> 00:07:34,000
Deutsches Institut für Normal

208
00:07:34,000 --> 00:07:36,000
我把它念成了 Deutsches Institut für Normal

209
00:07:36,000 --> 00:07:40,000
就是我把 Institut 这个词的词性搞错了

210
00:07:40,000 --> 00:07:42,000
嗯

211
00:07:42,000 --> 00:07:44,000
你要先解释一下什么是词性

212
00:07:44,000 --> 00:07:45,000
因为这个不是

213
00:07:45,000 --> 00:07:47,000
比如英语里面就没有这个概念

214
00:07:47,000 --> 00:07:48,000
所以很多人不知道是什么东西

215
00:07:48,000 --> 00:07:50,000
嗯

216
00:07:50,000 --> 00:07:51,000
好吧

217
00:07:51,000 --> 00:07:51,000
嗯

220
00:08:51,000 --> 00:08:54,000
这个词其实把太多 Воerenp트语言的方式分解掉了

221
00:08:54,000 --> 00:08:55,000
一个词有很多英语被 kunna 原谅的词

222
00:08:55,000 --> 00:09:10,000
Zun

223
00:09:11,000 --> 00:09:12,000
能看得出来

224
00:09:12,000 --> 00:09:13,000
про

225
00:09:13,000 --> 00:09:15,000
ㅎ

226
00:09:15,000 --> 00:09:16,000
t

227
00:09:16,000 --> 00:09:16,000
来

228
00:09:16,000 --> 00:09:17,000
他字

229
00:09:17,000 --> 00:09:19,000
它所谓 zoom

230
00:09:19,000 --> 00:09:19,000
it

231
00:09:19,000 --> 00:09:20,000
大家操骆

232
00:09:20,000 --> 00:09:21,000
它 Jetzt out of the court

233
00:09:21,000 --> 00:09:24,000
photo 和 auto 都是中性的

234
00:09:24,000 --> 00:09:27,000
但是也有很多不合理的地方

235
00:09:27,000 --> 00:09:29,000
比如说太阳吧

236
00:09:29,000 --> 00:09:31,000
它怎么可能会是阴性的呢

237
00:09:31,000 --> 00:09:33,000
结果在德语里面它真的是阴性的

238
00:09:33,000 --> 00:09:34,000
对

239
00:09:34,000 --> 00:09:35,000
德语原来太阳是阴性的

240
00:09:35,000 --> 00:09:36,000
月亮是阳性的

241
00:09:36,000 --> 00:09:38,000
当然也是有原因的

242
00:09:38,000 --> 00:09:41,000
因为在古这尔曼神话里面

243
00:09:41,000 --> 00:09:43,000
太阳是个女神

244
00:09:43,000 --> 00:09:45,000
月亮是个男神

245
00:09:45,000 --> 00:09:47,000
月亮是个男神

246
00:09:47,000 --> 00:09:50,000
就是跟希腊神话正好相反

247
00:09:50,000 --> 00:09:50,000
对

248
00:09:50,000 --> 00:09:54,000
它是一种比较古老的神话

249
00:09:54,000 --> 00:09:58,000
或者说宗教仪式的言存

250
00:09:58,000 --> 00:09:59,000
可以这么理解

251
00:09:59,000 --> 00:10:02,000
但是这跟现在比如说中国的

252
00:10:02,000 --> 00:10:04,000
正常人的一个想法

253
00:10:04,000 --> 00:10:06,000
好像就不太一样

254
00:10:06,000 --> 00:10:07,000
对

255
00:10:07,000 --> 00:10:10,000
中国阳这个东西就默认是

256
00:10:10,000 --> 00:10:11,000
太阳

257
00:10:11,000 --> 00:10:13,000
阳这个东西就是太阳

258
00:10:13,000 --> 00:10:15,000
阴就是月亮

259
00:10:15,000 --> 00:10:17,000
因为字里面就有那个月亮

260
00:10:17,000 --> 00:10:19,000
在德语里面 masculine

261
00:10:19,000 --> 00:10:19,000
这个

262
00:10:19,000 --> 00:10:20,000
这个

263
00:10:20,000 --> 00:10:23,000
这个描述的正确翻译方法是雄性

264
00:10:23,000 --> 00:10:24,000
就是他们认为太阳是

265
00:10:24,000 --> 00:10:26,000
太阳是阴性的

266
00:10:26,000 --> 00:10:28,000
月亮是雄性的

267
00:10:28,000 --> 00:10:30,000
就太阳是雌性的

268
00:10:30,000 --> 00:10:32,000
月亮是雄性的

269
00:10:32,000 --> 00:10:33,000
那三号也没

270
00:10:33,000 --> 00:10:35,000
有也能做出一点意义来的

271
00:10:35,000 --> 00:10:36,000
对

272
00:10:36,000 --> 00:10:37,000
但还是比较

273
00:10:37,000 --> 00:10:39,000
奇怪的是

274
00:10:39,000 --> 00:10:40,000
对关键是我觉得德语

275
00:10:40,000 --> 00:10:41,000
这个分这个三性

276
00:10:41,000 --> 00:10:44,000
完全任何一点用处也没有

277
00:10:44,000 --> 00:10:45,000
有没有什么实际的用处

278
00:10:45,000 --> 00:10:46,000
我自己自己也想不出来

279
00:10:46,000 --> 00:10:47,000
当时学的时候就很痛苦

280
00:10:47,000 --> 00:10:48,000
所有的

281
00:10:48,000 --> 00:10:50,000
大家认为背英文单词

282
00:10:50,000 --> 00:10:51,000
要背

283
00:10:51,000 --> 00:10:52,000
就是名词的话

284
00:10:52,000 --> 00:10:53,000
你得记一个单副数

285
00:10:53,000 --> 00:10:53,000
对吧

286
00:10:53,000 --> 00:10:54,000
就完了

287
00:10:54,000 --> 00:10:55,000
然后有些可能特别的什么

288
00:10:55,000 --> 00:10:57,000
单副同行

289
00:10:57,000 --> 00:10:58,000
或者是特殊的

290
00:10:58,000 --> 00:10:59,000
单副同行有什么

291
00:10:59,000 --> 00:11:01,000
people

292
00:11:01,000 --> 00:11:03,000
作为一个种族来讲

293
00:11:03,000 --> 00:11:03,000
对吧

294
00:11:03,000 --> 00:11:04,000
有同性

295
00:11:04,000 --> 00:11:07,000
然后有些特殊的一个

296
00:11:07,000 --> 00:11:08,000
比如说我们常讲的数据

297
00:11:08,000 --> 00:11:09,000
data

298
00:11:09,000 --> 00:11:11,000
其实是一个副数

299
00:11:11,000 --> 00:11:12,000
但是它的

300
00:11:12,000 --> 00:11:12,000
对

301
00:11:12,000 --> 00:11:14,000
在德语里面

302
00:11:14,000 --> 00:11:17,000
这个词仍旧在使用其

303
00:11:17,000 --> 00:11:19,000
拉丁语单数形式

304
00:11:19,000 --> 00:11:19,000
作为单数

305
00:11:19,000 --> 00:11:20,000
就是你说

306
00:11:20,000 --> 00:11:21,000
一个数据的时候

307
00:11:21,000 --> 00:11:21,000
你比如说

308
00:11:21,000 --> 00:11:23,000
你不能说

309
00:11:23,000 --> 00:11:25,000
data

310
00:11:25,000 --> 00:11:26,000
这种用法是错的

311
00:11:26,000 --> 00:11:27,000
对

312
00:11:27,000 --> 00:11:28,000
在英语里面已经变成

313
00:11:28,000 --> 00:11:28,000
对

314
00:11:28,000 --> 00:11:30,000
现在英语里面已经就

315
00:11:30,000 --> 00:11:32,000
data 已经变成一个不可数了

316
00:11:32,000 --> 00:11:32,000
然后是

317
00:11:32,000 --> 00:11:34,000
就没有副数形式

318
00:11:34,000 --> 00:11:35,000
然后

319
00:11:35,000 --> 00:11:37,000
但如果你是考古的话

320
00:11:37,000 --> 00:11:37,000
也发现

321
00:11:37,000 --> 00:11:38,000
还有一个 data

322
00:11:38,000 --> 00:11:39,000
d-a-t-u-m

323
00:11:39,000 --> 00:11:41,000
这个单数的形式

324
00:11:41,000 --> 00:11:42,000
但是现在就只要在

325
00:11:42,000 --> 00:11:44,000
现代的文献里面

326
00:11:44,000 --> 00:11:45,000
基本上看不到这个说法了

327
00:11:45,000 --> 00:11:48,000
当然还有一些更加诡异的

328
00:11:48,000 --> 00:11:49,000
就是单副数

329
00:11:49,000 --> 00:11:50,000
你完全不懂

330
00:11:50,000 --> 00:11:51,000
看不出它们之间

331
00:11:51,000 --> 00:11:52,000
有什么区别的东西

332
00:11:52,000 --> 00:11:52,000
对

333
00:11:52,000 --> 00:11:54,000
我记得前一阵子

334
00:11:54,000 --> 00:11:56,000
风天

335
00:11:56,000 --> 00:11:57,000
有一辆日本车

336
00:11:57,000 --> 00:11:58,000
叫什么

337
00:11:58,000 --> 00:11:58,000
叫什么

338
00:11:58,000 --> 00:11:58,000
Prius

339
00:11:58,000 --> 00:11:59,000
对

340
00:11:59,000 --> 00:12:02,000
P-R-I-U-S

341
00:12:02,000 --> 00:12:03,000
然后它的副数形式

342
00:12:03,000 --> 00:12:04,000
叫做 Pri

343
00:12:04,000 --> 00:12:05,000
Pri

344
00:12:05,000 --> 00:12:05,000
对

345
00:12:05,000 --> 00:12:07,000
是 P-R-I-I

346
00:12:07,000 --> 00:12:08,000
两个 I

347
00:12:08,000 --> 00:12:09,000
就专门说

348
00:12:09,000 --> 00:12:10,000
这是一个拉丁语词

349
00:12:10,000 --> 00:12:11,000
所以它的副数应该叫 I

350
00:12:11,000 --> 00:12:12,000
What the hell

351
00:12:12,000 --> 00:12:14,000
对

352
00:12:14,000 --> 00:12:15,000
就英文里面

353
00:12:15,000 --> 00:12:16,000
就有这种很奇怪的事情

354
00:12:16,000 --> 00:12:18,000
但是你想想都还能够接受

355
00:12:18,000 --> 00:12:19,000
起码还能知道说

356
00:12:19,000 --> 00:12:20,000
这个是为了区别

357
00:12:20,000 --> 00:12:21,000
一个和多个

358
00:12:21,000 --> 00:12:23,000
虽然我不能一一何在

359
00:12:23,000 --> 00:12:24,000
然后还有

360
00:12:24,000 --> 00:12:26,000
但是德语里面的名词

361
00:12:26,000 --> 00:12:28,000
它除了要分单副数之外

362
00:12:28,000 --> 00:12:31,000
它还要分三个性别

363
00:12:31,000 --> 00:12:32,000
然后这三个性别

364
00:12:32,000 --> 00:12:34,000
Totally make no sense

365
00:12:34,000 --> 00:12:34,000
对

366
00:12:34,000 --> 00:12:37,000
当然可能

367
00:12:37,000 --> 00:12:38,000
我觉得每种语言都有些复杂度

368
00:12:38,000 --> 00:12:40,000
比如说中文的复杂度

369
00:12:40,000 --> 00:12:41,000
就在它的写里面

370
00:12:41,000 --> 00:12:43,000
它的书写是非常复杂的

371
00:12:43,000 --> 00:12:44,000
语法简单的要死

372
00:12:44,000 --> 00:12:47,000
但是书写非常复杂

373
00:12:47,000 --> 00:12:48,000
其实从这个角度上

374
00:12:48,000 --> 00:12:49,000
中文还是蛮不错的

375
00:12:49,000 --> 00:12:50,000
就是

376
00:12:50,000 --> 00:12:52,000
不分单副数

377
00:12:52,000 --> 00:12:52,000
对吧

378
00:12:52,000 --> 00:12:52,000
对

379
00:12:52,000 --> 00:12:53,000
不分性数格

380
00:12:53,000 --> 00:12:55,000
这是非常好的一点

381
00:12:55,000 --> 00:12:55,000
对

382
00:12:55,000 --> 00:12:59,000
唯一一个要分那个

383
00:12:59,000 --> 00:13:00,000
中文有一个不太爽

384
00:13:00,000 --> 00:13:01,000
就是量词太多

385
00:13:01,000 --> 00:13:02,000
又没什么用好像

386
00:13:02,000 --> 00:13:02,000
对

387
00:13:02,000 --> 00:13:03,000
对于外国人来说

388
00:13:03,000 --> 00:13:05,000
最大的困扰之一

389
00:13:05,000 --> 00:13:06,000
就是量词了

390
00:13:06,000 --> 00:13:07,000
你不像习语

391
00:13:07,000 --> 00:13:08,000
习语这些东西

392
00:13:08,000 --> 00:13:09,000
你不会就罢了

393
00:13:09,000 --> 00:13:11,000
量词你不会的话

394
00:13:11,000 --> 00:13:13,000
就很容易会说错话

395
00:13:13,000 --> 00:13:14,000
对

396
00:13:14,000 --> 00:13:15,000
而且量词

397
00:13:15,000 --> 00:13:18,000
其实也没有太大的实际作用

398
00:13:18,000 --> 00:13:19,000
在我看来

399
00:13:19,000 --> 00:13:20,000
嗯

400
00:13:20,000 --> 00:13:20,000
对

401
00:13:20,000 --> 00:13:21,000
它除了

402
00:13:21,000 --> 00:13:24,000
对于一些没有固定形状的东西

403
00:13:24,000 --> 00:13:26,000
有一些一些意义的

404
00:13:26,000 --> 00:13:28,000
比如说英语里面也会说一瓶水

405
00:13:28,000 --> 00:13:29,000
一杯咖啡啊

406
00:13:29,000 --> 00:13:30,000
中文

407
00:13:30,000 --> 00:13:31,000
对啊

408
00:13:31,000 --> 00:13:32,000
对

409
00:13:32,000 --> 00:13:33,000
但是除此之外

410
00:13:33,000 --> 00:13:35,000
好像为什么一定要说一匹马呢

411
00:13:35,000 --> 00:13:36,000
不能说一个马

412
00:13:36,000 --> 00:13:37,000
对

413
00:13:37,000 --> 00:13:38,000
买了一个

414
00:13:38,000 --> 00:13:40,000
不过但是在有一些方言里面

415
00:13:40,000 --> 00:13:41,000
就是在方言的口语里面

416
00:13:41,000 --> 00:13:43,000
量词已经被很多情况下

417
00:13:43,000 --> 00:13:44,000
被审阅掉了

418
00:13:44,000 --> 00:13:44,000
就是

419
00:13:44,000 --> 00:13:46,000
比如说最简单的一次吧

420
00:13:46,000 --> 00:13:47,000
就我们俩人

421
00:13:47,000 --> 00:13:48,000
我们不是我们两个人

422
00:13:48,000 --> 00:13:49,000
对吧

423
00:13:49,000 --> 00:13:50,000
我们俩人在

424
00:13:50,000 --> 00:13:51,000
在这里扯淡

425
00:13:51,000 --> 00:13:52,000
还有那个

426
00:13:52,000 --> 00:13:54,000
对面过来俩狗

427
00:13:54,000 --> 00:13:57,000
对

428
00:13:57,000 --> 00:13:59,000
就有时候还是可以省略的

429
00:13:59,000 --> 00:14:00,000
然后我一直在想

430
00:14:00,000 --> 00:14:03,000
作为一个有性格一点的这个尝试

431
00:14:03,000 --> 00:14:05,000
你可以以后都不说量词

432
00:14:05,000 --> 00:14:06,000
看会有什么效果

433
00:14:06,000 --> 00:14:07,000
老板

434
00:14:07,000 --> 00:14:08,000
给我俩

435
00:14:08,000 --> 00:14:09,000
俩苹果

436
00:14:09,000 --> 00:14:10,000
这一回我没有

437
00:14:10,000 --> 00:14:11,000
老板

438
00:14:11,000 --> 00:14:12,000
上俩面

439
00:14:12,000 --> 00:14:13,000
对

440
00:14:13,000 --> 00:14:14,000
上俩面

441
00:14:14,000 --> 00:14:15,000
嗯

442
00:14:15,000 --> 00:14:17,000
这也不错

443
00:14:17,000 --> 00:14:18,000
老板

444
00:14:18,000 --> 00:14:19,000
来五

445
00:14:19,000 --> 00:14:20,000
来五

446
00:14:20,000 --> 00:14:20,000
来五

447
00:14:20,000 --> 00:14:20,000
来五

448
00:14:20,000 --> 00:14:20,000
来五

449
00:14:20,000 --> 00:14:21,000
来五

450
00:14:21,000 --> 00:14:22,000
来五

451
00:14:22,000 --> 00:14:22,000
来五

452
00:14:22,000 --> 00:14:22,000
来五

453
00:14:22,000 --> 00:14:25,000
对这种这种事情就比较诡异了

454
00:14:25,000 --> 00:14:25,000
但是可以试一下

455
00:14:25,000 --> 00:14:26,000
可以试一下

456
00:14:26,000 --> 00:14:28,000
下一条反馈是

457
00:14:28,000 --> 00:14:29,000
也是我的

458
00:14:29,000 --> 00:14:30,000
就是

459
00:14:30,000 --> 00:14:31,000
我上次说到

460
00:14:31,000 --> 00:14:33,000
伦敦的交通字体

461
00:14:33,000 --> 00:14:34,000
不

462
00:14:34,000 --> 00:14:35,000
我不确定是 transport

463
00:14:35,000 --> 00:14:36,000
还是

464
00:14:36,000 --> 00:14:37,000
还是

465
00:14:37,000 --> 00:14:39,000
underground 字体里面

466
00:14:39,000 --> 00:14:40,000
i

467
00:14:40,000 --> 00:14:41,000
小写字母

468
00:14:41,000 --> 00:14:42,000
i 的上面的那一点

469
00:14:42,000 --> 00:14:44,000
是个正方形的话

470
00:14:44,000 --> 00:14:45,000
我说旋转 90 度

471
00:14:45,000 --> 00:14:46,000
它是个菱形

472
00:14:46,000 --> 00:14:47,000
但实际上正方形

473
00:14:47,000 --> 00:14:48,000
旋转 90 度

474
00:14:48,000 --> 00:14:49,000
还是个正方形

475
00:14:49,000 --> 00:14:50,000
对吧

476
00:14:50,000 --> 00:14:51,000
你玩我们呢

477
00:14:51,000 --> 00:14:54,000
俄罗斯方块

478
00:14:54,000 --> 00:14:57,000
俄罗斯方块里面正方形

479
00:14:57,000 --> 00:14:59,000
怎么旋转都是这样

480
00:14:59,000 --> 00:14:59,000
没有用

481
00:14:59,000 --> 00:15:01,000
你说他写那个

482
00:15:01,000 --> 00:15:03,000
写那个正方形旋转的那个函数

483
00:15:03,000 --> 00:15:05,000
该不会直接就 return

484
00:15:05,000 --> 00:15:06,000
no op

485
00:15:06,000 --> 00:15:07,000
对啊

486
00:15:07,000 --> 00:15:08,000
应该是我觉得

487
00:15:08,000 --> 00:15:10,000
没有意义嘛

488
00:15:10,000 --> 00:15:10,000
对

489
00:15:10,000 --> 00:15:15,000
然后还有一条是凉海纠正我的

490
00:15:15,000 --> 00:15:16,000
说小写的

491
00:15:16,000 --> 00:15:19,000
小写字母 G 的双层版本

492
00:15:19,000 --> 00:15:20,000
和希腊字母

493
00:15:20,000 --> 00:15:21,000
应该是没有什么关联的

494
00:15:21,000 --> 00:15:22,000
就是我当时想到

495
00:15:22,000 --> 00:15:24,000
他应该可能跟那个

496
00:15:24,000 --> 00:15:26,000
希腊字母有一个叫什么

497
00:15:26,000 --> 00:15:28,000
epsilon 之类的

498
00:15:28,000 --> 00:15:30,000
就看起来非常奇怪的一个字母

499
00:15:30,000 --> 00:15:30,000
有点关联

500
00:15:30,000 --> 00:15:32,000
我觉得 G 可能是从那个字母来的

501
00:15:32,000 --> 00:15:33,000
但实际上完全不是

502
00:15:33,000 --> 00:15:39,000
作为什么 type is beautiful 成员

503
00:15:39,000 --> 00:15:40,000
你是不是要去蹲长脚

504
00:15:40,000 --> 00:15:43,000
反思个一段三五天之类的

505
00:15:43,000 --> 00:15:45,000
这种事情也不是第一次发生了

506
00:15:45,000 --> 00:15:46,000
我上次在知乎上

507
00:15:46,000 --> 00:15:47,000
斩钉截血的说

508
00:15:47,000 --> 00:15:49,000
瑞士高速公路的字牌字

509
00:15:49,000 --> 00:15:54,000
瑞士高速公路的字牌的标

510
00:15:54,000 --> 00:15:57,000
标号牌的字体就是 frutiger

511
00:15:57,000 --> 00:16:00,000
然后有人跳出来说

512
00:16:00,000 --> 00:16:02,000
贵网站上面说过

513
00:16:02,000 --> 00:16:04,000
他是 frutiger 那种感性

514
00:16:04,000 --> 00:16:05,000
简直就是自打脸

515
00:16:05,000 --> 00:16:06,000
没错

516
00:16:06,000 --> 00:16:08,000
还好那篇文章

517
00:16:08,000 --> 00:16:09,000
那篇文章不是我译的吧

518
00:16:09,000 --> 00:16:10,000
应该不是我译

519
00:16:10,000 --> 00:16:11,000
如果是我译的话

520
00:16:11,000 --> 00:16:12,000
我就可以去死了

521
00:16:12,000 --> 00:16:13,000
好吧

522
00:16:13,000 --> 00:16:14,000
我们原谅你了

523
00:16:14,000 --> 00:16:15,000
谢谢原谅

524
00:16:15,000 --> 00:16:17,000
我原谅你了

525
00:16:17,000 --> 00:16:18,000
听众原谅你

526
00:16:18,000 --> 00:16:18,000
我不知道

527
00:16:18,000 --> 00:16:19,000
我不知道

528
00:16:19,000 --> 00:16:20,000
爱原谅不认

529
00:16:20,000 --> 00:16:22,000
sorry

530
00:16:22,000 --> 00:16:24,000
对

531
00:16:24,000 --> 00:16:27,000
然后就是 input 字体

532
00:16:27,000 --> 00:16:29,000
我上一次去看它的时候

533
00:16:29,000 --> 00:16:31,000
发现它有了一个

534
00:16:31,000 --> 00:16:34,000
花口号的替换版本

535
00:16:34,000 --> 00:16:36,000
就是有一个普通的花口号出现了

536
00:16:36,000 --> 00:16:39,000
如果你对花口号也不爽的话

537
00:16:39,000 --> 00:16:40,000
可以去用用这个

538
00:16:40,000 --> 00:16:41,000
普通花口号的版本

539
00:16:41,000 --> 00:16:43,000
所谓普通

540
00:16:43,000 --> 00:16:45,000
就是没有那么扭曲的一个花口号

541
00:16:45,000 --> 00:16:46,000
就是 input 那个

542
00:16:46,000 --> 00:16:48,000
它会有很多这种

543
00:16:48,000 --> 00:16:49,000
就是有很多的花口号

544
00:16:49,000 --> 00:16:50,000
它有一个定制化的界面

545
00:16:50,000 --> 00:16:53,000
你可以选择那些你喜欢的

546
00:16:53,000 --> 00:16:55,000
变种的组合

547
00:16:55,000 --> 00:16:56,000
这样就是反正

548
00:16:56,000 --> 00:16:57,000
我总有一个适合你的

549
00:16:57,000 --> 00:16:59,000
然后碰巧你就是喜欢

550
00:16:59,000 --> 00:17:03,000
直上直下的大括号的东西

551
00:17:03,000 --> 00:17:03,000
没错

552
00:17:03,000 --> 00:17:05,000
其实之前那个花口号

553
00:17:05,000 --> 00:17:06,000
我觉得挺好的

554
00:17:06,000 --> 00:17:08,000
好吧

555
00:17:08,000 --> 00:17:09,000
还是要强调这一点

556
00:17:09,000 --> 00:17:12,000
下一条反馈

557
00:17:12,000 --> 00:17:13,000
是我说错了一个东西

558
00:17:13,000 --> 00:17:15,000
就是我们上次讲到

559
00:17:15,000 --> 00:17:17,000
有 e-councilors

560
00:17:17,000 --> 00:17:18,000
calibre

561
00:17:18,000 --> 00:17:19,000
还有 cambrian

562
00:17:19,000 --> 00:17:19,000
对吧

563
00:17:19,000 --> 00:17:20,000
cambrian

564
00:17:20,000 --> 00:17:20,000
对

565
00:17:20,000 --> 00:17:23,000
微软的 c 系字体

566
00:17:23,000 --> 00:17:26,000
但是我说它好像是随这个 office 发布的

567
00:17:26,000 --> 00:17:28,000
但其实它是随 office

568
00:17:28,000 --> 00:17:30,000
随这个 vista 发布的

569
00:17:30,000 --> 00:17:33,000
然后之所以我讲错

570
00:17:33,000 --> 00:17:33,000
这个是因为

571
00:17:33,000 --> 00:17:35,000
我用这套字体

572
00:17:35,000 --> 00:17:36,000
就完全是因为在

573
00:17:36,000 --> 00:17:40,000
装了 mac office 之后

574
00:17:40,000 --> 00:17:41,000
在我的 mac 上面才找到的

575
00:17:41,000 --> 00:17:44,000
因为 vista 我真的是没有用过

576
00:17:44,000 --> 00:17:46,000
遮遮掩掩就直接说我是果粉吗

577
00:17:46,000 --> 00:17:48,000
不知道是很正常的

578
00:17:48,000 --> 00:17:49,000
不这个 vista 真的很糟糕

579
00:17:49,000 --> 00:17:52,000
他确实出来的时候

580
00:17:52,000 --> 00:17:53,000
这不是我的

581
00:17:53,000 --> 00:17:54,000
这个是公认的

582
00:17:54,000 --> 00:17:55,000
我这个是公认的

583
00:17:55,000 --> 00:17:56,000
所以所以这个错

584
00:17:56,000 --> 00:17:58,000
我觉得是情有可原的

585
00:17:58,000 --> 00:17:59,000
你们一定要原谅我

586
00:17:59,000 --> 00:17:59,000
对不起

587
00:17:59,000 --> 00:18:00,000
梁海先生

588
00:18:00,000 --> 00:18:03,000
也是梁海就错了

589
00:18:03,000 --> 00:18:12,000
然后其实有一位听众在

590
00:18:12,000 --> 00:18:15,000
他是叫孙玉东

591
00:18:15,000 --> 00:18:17,000
对他来邮件说的

592
00:18:17,000 --> 00:18:18,000
像我们提到

593
00:18:18,000 --> 00:18:20,000
就是微软给学生

594
00:18:20,000 --> 00:18:23,000
有一个特殊的计划叫做 dream spark

595
00:18:23,000 --> 00:18:25,000
对然后 dream spark 呢

596
00:18:25,000 --> 00:18:26,000
就可以干嘛呢

597
00:18:26,000 --> 00:18:28,000
就是你比如你学校参加的这个项目之后

598
00:18:28,000 --> 00:18:30,000
你可以从你需要拿到一个账号

599
00:18:30,000 --> 00:18:32,000
让你用这个账号可以在微软的官方网站

600
00:18:32,000 --> 00:18:37,000
免费的下载到大部分的微软的产品

601
00:18:37,000 --> 00:18:39,000
然后里面他提供那个叫做叫什么

602
00:18:39,000 --> 00:18:40,000
visual studio

603
00:18:40,000 --> 00:18:42,000
他是提供的是 pro 版本

604
00:18:42,000 --> 00:18:43,000
哎呦

605
00:18:43,000 --> 00:18:45,000
哎

606
00:18:45,000 --> 00:18:47,000
不过嗯

607
00:18:47,000 --> 00:18:48,000
他之前我们讲那个那个叫什么了

608
00:18:48,000 --> 00:18:48,000
一个

609
00:18:48,000 --> 00:18:50,000
叫 community edition

610
00:18:50,000 --> 00:18:52,000
对 commentaryce

611
00:18:52,000 --> 00:18:54,000
他是 ce 是一直是免费的

612
00:18:54,000 --> 00:18:55,000
就对公众都是免费的

613
00:18:55,000 --> 00:18:58,000
对将会而且将应该将会一直免费下去

614
00:18:58,000 --> 00:19:01,000
就像那个之前很多的

615
00:19:01,000 --> 00:19:05,000
比如说那个 jetbrains 的 ide

616
00:19:05,000 --> 00:19:07,000
intellij 也是有 community edition

617
00:19:07,000 --> 00:19:08,000
也是永远免费

618
00:19:10,000 --> 00:19:11,000
不过不过说到这个我想请你一个事

619
00:19:11,000 --> 00:19:15,000
就是好像这个有一个商业上的专门的说法嘛

620
00:19:15,000 --> 00:19:18,000
这种就是把一个产品分那么多种类版本

621
00:19:18,000 --> 00:19:21,000
一个什么叫做 product matrix 是不是

622
00:19:21,000 --> 00:19:22,000
对我也不太清楚

623
00:19:22,000 --> 00:19:24,000
反正就是就微软很喜欢搞这种事情

624
00:19:24,000 --> 00:19:25,000
大家不知道现在还有

625
00:19:25,000 --> 00:19:27,000
其实现在可能还好点

626
00:19:27,000 --> 00:19:28,000
之前 vista 刚出来的时候

627
00:19:28,000 --> 00:19:30,000
大家不知道还有没有印象

628
00:19:30,000 --> 00:19:32,000
好像有好像是有十几个版本吧

629
00:19:32,000 --> 00:19:34,000
我记得不止微软吧

630
00:19:34,000 --> 00:19:36,000
我觉得很多通风的产品都有这个特点

631
00:19:36,000 --> 00:19:38,000
eclipse 不也是吗

632
00:19:38,000 --> 00:19:40,000
你去 eclipse 的那个下载页面

633
00:19:40,000 --> 00:19:42,000
我靠一大堆版本

634
00:19:42,000 --> 00:19:43,000
什么扎了意义版本

635
00:19:43,000 --> 00:19:46,000
c++版本对对这个版本那个版本

636
00:19:46,000 --> 00:19:48,000
就不就不明白了

637
00:19:48,000 --> 00:19:48,000
就难道不能

638
00:19:48,000 --> 00:19:51,000
提供一个就是基础版本

639
00:19:51,000 --> 00:19:54,000
然后 whatever 让用户自己去装该装的插件

640
00:19:54,000 --> 00:19:55,000
或者怎么样

641
00:19:55,000 --> 00:20:00,000
对就我能想到的有这个所谓 product matrix

642
00:20:00,000 --> 00:20:01,000
这种这种结构

643
00:20:01,000 --> 00:20:03,000
就是把一个产品就同一个产品

644
00:20:03,000 --> 00:20:06,000
然后根据什么不同的场景

645
00:20:06,000 --> 00:20:09,000
或者不同功能细分的很多的这种产品

646
00:20:09,000 --> 00:20:10,000
给我的感觉

647
00:20:10,000 --> 00:20:12,000
整个或者这种公司给我的感觉都是很差的

648
00:20:12,000 --> 00:20:14,000
因为其实从本质上你都知道

649
00:20:14,000 --> 00:20:16,000
它就是在所谓的追

650
00:20:16,000 --> 00:20:17,000
等一下那个东西叫什么来的

651
00:20:18,000 --> 00:20:20,000
那个叫做

652
00:20:20,000 --> 00:20:22,000
利润最大化

653
00:20:22,000 --> 00:20:23,000
好像也不对

654
00:20:23,000 --> 00:20:26,000
就等于是你不愿意

655
00:20:26,000 --> 00:20:28,000
就是我所有这些功能

656
00:20:28,000 --> 00:20:29,000
加在一起

657
00:20:29,000 --> 00:20:30,000
开这个价你出不起

658
00:20:30,000 --> 00:20:32,000
那我就砍掉一些

659
00:20:32,000 --> 00:20:37,000
然后把那个你能买的那个价格

660
00:20:37,000 --> 00:20:38,000
介绍给你

661
00:20:38,000 --> 00:20:40,000
但这就像卖车嘛

662
00:20:40,000 --> 00:20:41,000
那是任何就是

663
00:20:41,000 --> 00:20:42,000
就是我很小的时候

664
00:20:42,000 --> 00:20:44,000
总是会有很奇怪说

665
00:20:44,000 --> 00:20:47,000
这为什么车的广告上面

666
00:20:47,000 --> 00:20:48,000
都不写定价吗

667
00:20:48,000 --> 00:20:51,000
他会写

668
00:20:51,000 --> 00:20:53,000
他会写一个多少多少起吗

669
00:20:53,000 --> 00:20:53,000
对

670
00:20:53,000 --> 00:20:56,000
但那个起是完全全是裸车价

671
00:20:56,000 --> 00:20:59,000
真正的你要去

672
00:20:59,000 --> 00:21:00,000
配那个 configurator

673
00:21:00,000 --> 00:21:02,000
然后才知道每一个

674
00:21:02,000 --> 00:21:04,000
每加一个 option 要加多少钱

675
00:21:04,000 --> 00:21:06,000
而那个 configurator 的那个 list

676
00:21:06,000 --> 00:21:08,000
你可以花两天的时间

677
00:21:08,000 --> 00:21:11,000
跟那个销售代理在那边讨论

678
00:21:11,000 --> 00:21:11,000
那个事情

679
00:21:11,000 --> 00:21:14,000
如果你真的想要定制一辆属于自己的车的话

680
00:21:14,000 --> 00:21:16,000
当然在这种情况

681
00:21:16,000 --> 00:21:18,000
在中国可能不是很普遍

682
00:21:18,000 --> 00:21:18,000
但在欧洲

683
00:21:18,000 --> 00:21:20,000
很多人会愿意

684
00:21:20,000 --> 00:21:21,000
花两天时间

685
00:21:21,000 --> 00:21:24,000
至少这一下午吧

686
00:21:24,000 --> 00:21:26,000
跟那个销售代表去讨论

687
00:21:26,000 --> 00:21:28,000
这辆车他要哪些 option

688
00:21:28,000 --> 00:21:30,000
然后定

689
00:21:30,000 --> 00:21:31,000
然后两个月之后

690
00:21:31,000 --> 00:21:33,000
这辆车才可以送到他手里

691
00:21:33,000 --> 00:21:35,000
但是每一个 option

692
00:21:35,000 --> 00:21:36,000
都是他亲自 check 过的

693
00:21:36,000 --> 00:21:39,000
这才是就是 matrix

694
00:21:39,000 --> 00:21:41,000
product matrix at its worst

695
00:21:41,000 --> 00:21:45,000
对就反正就给人感觉就非常不好

696
00:21:45,000 --> 00:21:46,000
而且就整个是

697
00:21:46,000 --> 00:21:48,000
没有就平板无辜的增加了

698
00:21:48,000 --> 00:21:50,000
这个选择的这个难度

699
00:21:50,000 --> 00:21:52,000
本来就选选择困难

700
00:21:52,000 --> 00:21:53,000
这已经够严重了

701
00:21:53,000 --> 00:21:53,000
对吧

702
00:21:53,000 --> 00:21:55,000
他还给你搞得那么麻烦

703
00:21:55,000 --> 00:21:57,000
让你真是想撞墙死

704
00:21:57,000 --> 00:22:00,000
不过现在这什么 windows 8 还有之后

705
00:22:00,000 --> 00:22:01,000
可能对他跳过久了

706
00:22:01,000 --> 00:22:02,000
直接问到这事

707
00:22:02,000 --> 00:22:03,000
这 8 已经好很多

708
00:22:03,000 --> 00:22:08,000
8 只分了一个就是 8 和这个 8 的 pro 专业版

709
00:22:08,000 --> 00:22:08,000
对啊

710
00:22:08,000 --> 00:22:10,000
好像以前微软还有什么

711
00:22:10,000 --> 00:22:15,000
我想想有什么 home basic home premium

712
00:22:15,000 --> 00:22:16,000
professional

713
00:22:16,000 --> 00:22:18,000
有个什么 ultimate

714
00:22:18,000 --> 00:22:18,000
有个什么 ultimate

715
00:22:18,000 --> 00:22:20,000
还有 enterprise

716
00:22:20,000 --> 00:22:24,000
对还有一个 home home premium 之类的一个词

717
00:22:24,000 --> 00:22:26,000
一个版本

718
00:22:26,000 --> 00:22:28,000
还有个什么 starter edition

719
00:22:28,000 --> 00:22:31,000
还有然后所有的都要乘以 2

720
00:22:31,000 --> 00:22:34,000
因为他分那个 32 位和 64 位不同的东西

721
00:22:34,000 --> 00:22:35,000
不止乘以 2

722
00:22:35,000 --> 00:22:37,000
还有乘以所有的语言

723
00:22:37,000 --> 00:22:38,000
对对对

724
00:22:38,000 --> 00:22:40,000
我觉得这是非常二的一件事情

725
00:22:40,000 --> 00:22:42,000
就是你就不止 windows 如此

726
00:22:42,000 --> 00:22:45,000
就什么 blackberry 或者是安卓的

727
00:22:45,000 --> 00:22:45,000
我不知道

728
00:22:45,000 --> 00:22:47,000
但很多操作系统都一样

729
00:22:47,000 --> 00:22:51,000
那个分语言是因为他是跟去定价有关系

730
00:22:51,000 --> 00:22:53,000
其实跟 follow me 取是本质上也是一个意思

731
00:22:53,000 --> 00:22:56,000
就是你看一下

732
00:22:56,000 --> 00:22:57,000
我说中国这边比较穷

733
00:22:57,000 --> 00:23:00,000
我们把这个价格定低一点

734
00:23:00,000 --> 00:23:02,000
德国那些人比较有钱

735
00:23:02,000 --> 00:23:04,000
我们把那个价格定高了一点

736
00:23:04,000 --> 00:23:07,000
但是如果产品是一样的

737
00:23:07,000 --> 00:23:10,000
如果我可以随时像这个什么 iphone 一样切换语言

738
00:23:10,000 --> 00:23:11,000
那么还搞屁

739
00:23:11,000 --> 00:23:13,000
那么大家直接买中国版去德国用不就好了

740
00:23:13,000 --> 00:23:13,000
对吧

741
00:23:13,000 --> 00:23:16,000
所以他就搞成所有的语言是不可以

742
00:23:16,000 --> 00:23:17,000
随意替换的

743
00:23:17,000 --> 00:23:19,000
那也可以有有这种工具

744
00:23:19,000 --> 00:23:21,000
叫个叫什么 mu

745
00:23:21,000 --> 00:23:22,000
叫什么

746
00:23:22,000 --> 00:23:24,000
现在已经可以下载语言包了

747
00:23:24,000 --> 00:23:25,000
我记得

748
00:23:25,000 --> 00:23:29,000
语言包从 vista 时代还是文七时代就已经有

749
00:23:29,000 --> 00:23:30,000
XP 都已经有语言包

750
00:23:30,000 --> 00:23:34,000
但是那个语言包是首先是一个要额外付费买的

751
00:23:34,000 --> 00:23:38,000
就要补齐定价的差异

752
00:23:38,000 --> 00:23:40,000
就一般来说是这样子

753
00:23:40,000 --> 00:23:43,000
然后你还得麻烦去安装

754
00:23:43,000 --> 00:23:45,000
然后就是你装完这个语言包之后

755
00:23:45,000 --> 00:23:47,000
它其实也并不等于一个原生的语言的系统

756
00:23:47,000 --> 00:23:49,000
我我自己装过

757
00:23:49,000 --> 00:23:50,000
所以这个是深有体会的

758
00:23:52,000 --> 00:23:56,000
所以所以你看见这种语言是不可以切换的

759
00:23:56,000 --> 00:23:59,000
然后有各种 edition 的

760
00:23:59,000 --> 00:24:00,000
你就知道

761
00:24:00,000 --> 00:24:00,000
嗯

762
00:24:00,000 --> 00:24:01,000
somethings wrong

763
00:24:03,000 --> 00:24:04,000
吐槽一下

764
00:24:04,000 --> 00:24:06,000
而且现在已经好多了

765
00:24:06,000 --> 00:24:11,000
就是刚才讲了那个 8 已经好像我印象中只有 8 和这个 8 的 pro

766
00:24:11,000 --> 00:24:12,000
这两个区别

767
00:24:12,000 --> 00:24:14,000
但他有那个针对 service

768
00:24:14,000 --> 00:24:15,000
好像有一个版本那个在说

769
00:24:15,000 --> 00:24:17,000
然后语言我不知道现在怎么什么

770
00:24:17,000 --> 00:24:18,000
那个什么情况

771
00:24:18,000 --> 00:24:21,000
我至少从刚刚为了玩那个文明车

772
00:24:21,000 --> 00:24:26,000
我装了一个装了一个 8.1 还是德语版的

773
00:24:26,000 --> 00:24:27,000
我也没有去试

774
00:24:27,000 --> 00:24:30,000
反正就用他在控制面板里面有一个这个可以选语言

775
00:24:30,000 --> 00:24:32,000
但是我记得是要语言安装包的

776
00:24:32,000 --> 00:24:35,000
但是安装包怎么来就是一个问题了

777
00:24:35,000 --> 00:24:35,000
嗯

778
00:24:35,000 --> 00:24:36,000
对

779
00:24:36,000 --> 00:24:39,000
我去装了 48 之后

780
00:24:39,000 --> 00:24:41,000
重去重温了一下控制面板

781
00:24:41,000 --> 00:24:43,000
我觉得我靠怎么会有这么多东西

782
00:24:43,000 --> 00:24:47,000
其实他也不算多了

783
00:24:47,000 --> 00:24:47,000
他也不算多了

784
00:24:47,000 --> 00:24:49,000
他只是就是呈现的不好

785
00:24:49,000 --> 00:24:52,000
其实你仔细看一下像 mac 的那个叫做什么 system

786
00:24:52,000 --> 00:24:54,000
professor 里面他的选项也蛮多

787
00:24:54,000 --> 00:24:58,000
我记得那个就是从 windows vista 时代开始

788
00:24:58,000 --> 00:25:05,000
你他也试图把那个功能组合就是那个分成几个大组

789
00:25:05,000 --> 00:25:06,000
然后你可以一个一个点进去

790
00:25:06,000 --> 00:25:08,000
可是找出来太麻烦了

791
00:25:08,000 --> 00:25:08,000
对

792
00:25:08,000 --> 00:25:11,000
而且他的那个图形化的程度不够

793
00:25:11,000 --> 00:25:14,000
我们在那里就你还是要读很多字

794
00:25:14,000 --> 00:25:17,000
感觉就觉得有一种很臃肿庞大的感觉

795
00:25:17,000 --> 00:25:18,000
对

796
00:25:18,000 --> 00:25:21,000
其实简单来说就一条就图标做的不够漂亮

797
00:25:21,000 --> 00:25:23,000
哈哈哈

798
00:25:23,000 --> 00:25:25,000
好了不吐槽这个了

799
00:25:25,000 --> 00:25:26,000
啊

800
00:25:26,000 --> 00:25:27,000
在这个啊

801
00:25:27,000 --> 00:25:29,000
再插播一条小新闻啊

802
00:25:29,000 --> 00:25:31,000
作为一个什么购语言的粉丝

803
00:25:31,000 --> 00:25:36,000
今天那个购语言发布了一点四的这个版本

804
00:25:36,000 --> 00:25:38,000
然后为什么突然要讲这件事情呢

805
00:25:38,000 --> 00:25:43,000
是因为在这个版本里面他正式加入了安卓的支持

806
00:25:43,000 --> 00:25:46,000
就所以就是你可以现在开始用这个购源写游戏了

807
00:25:46,000 --> 00:25:47,000
就用 openGL 写游戏

808
00:25:47,000 --> 00:25:50,000
但如果你现在还要写那种普通的那种 app

809
00:25:50,000 --> 00:25:51,000
就是需要有这个标准化的界面

810
00:25:51,000 --> 00:25:55,000
可能还要用一下 java 的这个东西去去去做一下

811
00:25:55,000 --> 00:25:57,000
但如果你只是写游戏的话

812
00:25:57,000 --> 00:25:59,000
完全可以是只用购语言的 build

813
00:25:59,000 --> 00:26:01,000
就大家如果有兴趣可以去尝试一下

814
00:26:01,000 --> 00:26:02,000
对

815
00:26:02,000 --> 00:26:07,000
我记得这个是今年四月份还是什么时候就已经

816
00:26:07,000 --> 00:26:09,000
还是六月份就已经出来的

817
00:26:09,000 --> 00:26:11,000
放出来的

818
00:26:11,000 --> 00:26:12,000
方方吧

819
00:26:12,000 --> 00:26:13,000
对对

820
00:26:13,000 --> 00:26:15,000
他们在 1.3 的时候就半年前

821
00:26:15,000 --> 00:26:17,000
他已经在在讲这个了

822
00:26:17,000 --> 00:26:18,000
这个会有这个事情了

823
00:26:18,000 --> 00:26:21,000
就其实 1.3 beta 的时候就已经有这个功能

824
00:26:21,000 --> 00:26:24,000
只是没有正式发布而已

825
00:26:24,000 --> 00:26:28,000
我觉得实际上的其实可能还要更早

826
00:26:28,000 --> 00:26:32,000
因为我记得在我不确定啊

827
00:26:32,000 --> 00:26:38,000
但好像是在有一次那个 google developer 大会上面

828
00:26:38,000 --> 00:26:43,000
我听到有人在问说开发安卓可以用别的语言吗

829
00:26:43,000 --> 00:26:46,000
当时的得到的答复是目前没有计划

830
00:26:47,000 --> 00:26:50,000
嗯他不是可以用那个 ndk 用

831
00:26:50,000 --> 00:26:51,000
然后 c 或者 c 加写吗

832
00:26:51,000 --> 00:26:54,000
呃那个时候还没有吧

833
00:26:54,000 --> 00:26:57,000
我过去太久了 2012 年可能是

834
00:26:57,000 --> 00:27:01,000
ok 那是今年的今年的那个这个 google i o 的时候说的

835
00:27:01,000 --> 00:27:04,000
ok 对呃

836
00:27:04,000 --> 00:27:07,000
所以就如果你是一个痛恨和我们一样

837
00:27:07,000 --> 00:27:08,000
同样的

838
00:27:08,000 --> 00:27:09,000
就是这样

839
00:27:09,000 --> 00:27:11,000
然后又想写安卓的游戏啊

840
00:27:11,000 --> 00:27:15,000
现在你可以有一个官方支持的正式的啊替代选择了

841
00:27:15,000 --> 00:27:16,000
但呃什么就现在可以用这个方式去做这个东西了

842
00:27:16,000 --> 00:27:21,000
就现在肯定是属于刚开发布的一个不太稳定的阶段哈

843
00:27:21,000 --> 00:27:23,000
如果就就是前方坑多

844
00:27:23,000 --> 00:27:26,000
自己小心嗯嗯

845
00:27:26,000 --> 00:27:33,000
另外一个比较值得我挺高兴的事情是他们决定在下一个版本就是购一点五的时候

846
00:27:33,000 --> 00:27:35,000
也就大概半年之后发布的时候

847
00:27:35,000 --> 00:27:39,000
他们会加入正式的 iOS 的支持

848
00:27:39,000 --> 00:27:40,000
可是这个是什么意义

849
00:27:40,000 --> 00:27:43,000
他的具体的意思是什么呢

850
00:27:43,000 --> 00:27:46,000
就是我可以通过用写用购来编出一个 iOS 的支持

851
00:27:46,000 --> 00:27:48,000
这个 iOS 的原生程序吗

852
00:27:49,000 --> 00:27:53,000
这个他应该可以用那个叫什么啊

853
00:27:53,000 --> 00:27:56,000
可以编译成一个 c 的就是原生代码

854
00:27:56,000 --> 00:28:00,000
就基于这个就是那个什么 arm 平台的吗

855
00:28:00,000 --> 00:28:00,000
的 c 代码

856
00:28:00,000 --> 00:28:01,000
然后可以直接在那边跑

857
00:28:01,000 --> 00:28:04,000
但至于说你怎么去封装成一个 app

858
00:28:04,000 --> 00:28:07,000
可能后面还有一些要用到 Xcode 的东西

859
00:28:07,000 --> 00:28:10,000
但是对他怎么才能去调用 coco 的这对 API 呢

860
00:28:10,000 --> 00:28:12,000
就 coco touch 的这对 API

861
00:28:12,000 --> 00:28:16,000
他会他怎么才能就是切开

862
00:28:16,000 --> 00:28:19,000
苹果这一层厚厚的壁垒去掉

863
00:28:19,000 --> 00:28:23,000
对这可能可能会跟这个安卓情况比较类似啊

864
00:28:23,000 --> 00:28:25,000
就是可能说是比如说你可以写游戏

865
00:28:25,000 --> 00:28:26,000
只有 openGL 写

866
00:28:26,000 --> 00:28:29,000
因为你写游戏的话可以不用那些 coco 的东西嘛

867
00:28:29,000 --> 00:28:31,000
就只有 metal 那个

868
00:28:31,000 --> 00:28:33,000
metal 我都不知道他能不能

869
00:28:33,000 --> 00:28:33,000
具体怎么样

870
00:28:33,000 --> 00:28:35,000
他现在是肯定如果他支持

871
00:28:35,000 --> 00:28:37,000
肯定是先支持 openGL 跟安卓一样嘛

872
00:28:37,000 --> 00:28:41,000
我觉得就那种你不需要调用很多系统级别的东西

873
00:28:41,000 --> 00:28:44,000
就纯粹做一个就自己在那跑的一个应用

874
00:28:44,000 --> 00:28:45,000
但主要就是游戏了

875
00:28:45,000 --> 00:28:46,000
那可能

876
00:28:46,000 --> 00:28:46,000
然后他给你放在那里

877
00:28:46,000 --> 00:28:46,000
那可能他给你放在那里

878
00:28:46,000 --> 00:28:48,000
放在一个 container 里面

879
00:28:48,000 --> 00:28:49,000
然后那 container 是你先定义好的

880
00:28:49,000 --> 00:28:53,000
有可能 code 的话就是就是走这个路线吧

881
00:28:53,000 --> 00:28:56,000
对但如果你要说你要做一个带什么

882
00:28:56,000 --> 00:28:57,000
就是写一个 app

883
00:28:57,000 --> 00:28:57,000
普通的一个 app

884
00:28:57,000 --> 00:28:59,000
然后需要用那 coco 的那些东西

885
00:28:59,000 --> 00:29:00,000
不是 coco 那个叫什么

886
00:29:00,000 --> 00:29:02,000
swift

887
00:29:02,000 --> 00:29:04,000
objective c

888
00:29:04,000 --> 00:29:05,000
就是那个那个 runtime

889
00:29:05,000 --> 00:29:06,000
不是那个 runtime

890
00:29:06,000 --> 00:29:07,000
就那些 code 叫什么

891
00:29:07,000 --> 00:29:07,000
不叫 code

892
00:29:07,000 --> 00:29:08,000
ui kit

893
00:29:08,000 --> 00:29:09,000
对

894
00:29:09,000 --> 00:29:12,000
然后你可能还是要写用那个 objective c

895
00:29:12,000 --> 00:29:13,000
或者用 swift 写

896
00:29:13,000 --> 00:29:15,000
然后在 xcode 里面编译

897
00:29:15,000 --> 00:29:16,000
对大概情况是这样子

898
00:29:16,000 --> 00:29:16,000
OK

899
00:29:16,000 --> 00:29:18,000
然后就会说

900
00:29:18,000 --> 00:29:20,000
这个行为就比较有意思了

901
00:29:20,000 --> 00:29:22,000
就是说这个事情我们不知道将来会怎么样

902
00:29:22,000 --> 00:29:23,000
但是起码

903
00:29:23,000 --> 00:29:26,000
如果他在半年后真的做了这个

904
00:29:26,000 --> 00:29:29,000
这现在已经是他们内部已经放出话来要做这个事情

905
00:29:29,000 --> 00:29:31,000
但是就等下版发布嘛

906
00:29:31,000 --> 00:29:32,000
嗯

907
00:29:32,000 --> 00:29:34,000
就是说 google 会有这么一个语言

908
00:29:34,000 --> 00:29:36,000
能够同时间跨平台嘛

909
00:29:36,000 --> 00:29:37,000
就是 code 的话

910
00:29:37,000 --> 00:29:40,000
他可以编译到普通的桌面和 android

911
00:29:40,000 --> 00:29:41,000
包括以后的 iOS

912
00:29:41,000 --> 00:29:44,000
可以用一套语言写一套逻辑

913
00:29:44,000 --> 00:29:46,000
而且服务器端也可以用它写

914
00:29:46,000 --> 00:29:46,000
我觉得

915
00:29:46,000 --> 00:29:48,000
这是最妙的一点

916
00:29:48,000 --> 00:29:49,000
对对对

917
00:29:49,000 --> 00:29:51,000
这个其实之前在那个 google

918
00:29:51,000 --> 00:29:53,000
那个 google inbox 你知道吗

919
00:29:53,000 --> 00:29:55,000
就是他之前写的那个邮件的 code

920
00:29:55,000 --> 00:29:57,000
他们其实在一定程度已经做这件事情

921
00:29:57,000 --> 00:29:58,000
但不过他是用 java 的

922
00:29:58,000 --> 00:30:00,000
就是所有的那个就业务逻辑

923
00:30:00,000 --> 00:30:02,000
是用这个 java 来写

924
00:30:02,000 --> 00:30:04,000
然后通过两个技术吧

925
00:30:04,000 --> 00:30:06,000
然后一个叫做 GWT

926
00:30:06,000 --> 00:30:08,000
把 java 编译成网页版

927
00:30:08,000 --> 00:30:10,000
然后在那个 chrome 里面跑

928
00:30:11,000 --> 00:30:15,000
然后另外一个是真的真的是这样

929
00:30:15,000 --> 00:30:16,000
GWT

930
00:30:16,000 --> 00:30:17,000
google 还在用吗

931
00:30:17,000 --> 00:30:18,000
我不确定

932
00:30:18,000 --> 00:30:20,000
他们很多这个

933
00:30:20,000 --> 00:30:24,000
好像 gmail 的后台也是这么弄出来的

934
00:30:24,000 --> 00:30:24,000
老鸡

935
00:30:24,000 --> 00:30:26,000
omfg

936
00:30:26,000 --> 00:30:27,000
我以为

937
00:30:27,000 --> 00:30:28,000
这个不奇怪

938
00:30:28,000 --> 00:30:29,000
google 这么大一个 java 手

939
00:30:29,000 --> 00:30:30,000
有什么好奇怪

940
00:30:31,000 --> 00:30:32,000
我不

941
00:30:32,000 --> 00:30:37,000
可是 GWT 不是已经早就变成一个 community 维护的 framework 了吗

942
00:30:37,000 --> 00:30:40,000
这个 google 不是自己在主推 angular js 之类的东西吗

943
00:30:40,000 --> 00:30:41,000
不

944
00:30:41,000 --> 00:30:46,000
那个是我理解 angular js 那些事

945
00:30:46,000 --> 00:30:49,000
他们做纯粹做网页的前端的时候用那个没有问题

946
00:30:49,000 --> 00:30:52,000
但是如果你现在涉及到这种跨平台的东西的话

947
00:30:52,000 --> 00:30:57,000
他们的就是所有的这个 canonical version 还是 java 版本的

948
00:30:57,000 --> 00:30:58,000
比如说 gmail 是这样子

949
00:30:58,000 --> 00:31:00,000
然后那个像 inbox 也是这样子

950
00:31:00,000 --> 00:31:01,000
然后呢

951
00:31:01,000 --> 00:31:03,000
他们 inbox 不是也有 ios 版吗

952
00:31:03,000 --> 00:31:05,000
然后 ios 版的就是业务逻辑那部分

953
00:31:05,000 --> 00:31:06,000
他们是用一个叫做

954
00:31:08,000 --> 00:31:10,000
j 2 object c 还是叫什么

955
00:31:10,000 --> 00:31:15,000
就是把 java 编译成 object c 代码的方法

956
00:31:15,000 --> 00:31:16,000
what kind of c

957
00:31:16,000 --> 00:31:18,000
sorcery is this

958
00:31:18,000 --> 00:31:19,000
但是他们这个也有他的道理嘛

959
00:31:19,000 --> 00:31:23,000
就是你要维护同一个产品的业务逻辑

960
00:31:23,000 --> 00:31:24,000
要保证跨平台

961
00:31:24,000 --> 00:31:26,000
如果你每个平台单独写了写套的话

962
00:31:26,000 --> 00:31:30,000
那肯定就等于是像什么 bug 啊

963
00:31:30,000 --> 00:31:33,000
还有那种开发量就全部每个就有多少个平台

964
00:31:33,000 --> 00:31:34,000
你要乘以多少个数嘛

965
00:31:34,000 --> 00:31:37,000
他这样的话就只用解决一个问题

966
00:31:37,000 --> 00:31:39,000
就一套代码库

967
00:31:39,000 --> 00:31:41,000
然后之后都可以靠这个编辑

968
00:31:41,000 --> 00:31:43,000
就是那种跨平台的编辑器来解决这个问题

969
00:31:43,000 --> 00:31:45,000
在理想情况下是这样

970
00:31:45,000 --> 00:31:46,000
但是

971
00:31:46,000 --> 00:31:47,000
但是他的那个 UI 那部分

972
00:31:47,000 --> 00:31:49,000
比如说像安卓的 UI

973
00:31:49,000 --> 00:31:53,000
他是用这个原生的那个那个 java 来写

974
00:31:53,000 --> 00:31:56,000
然后在 iOS 他是用 object c 来封装的

975
00:31:56,000 --> 00:31:56,000
然后啊

976
00:31:56,000 --> 00:31:57,000
但是就只说

977
00:31:57,000 --> 00:32:01,000
只说业务就是跟那种平台的关系不是很紧密的业务逻辑

978
00:32:01,000 --> 00:32:03,000
那部分他们是用一个 java

979
00:32:03,000 --> 00:32:05,000
然后通过这种编译的方法来实现

980
00:32:05,000 --> 00:32:06,000
ok 啊

981
00:32:06,000 --> 00:32:07,000
那么同样的道理

982
00:32:07,000 --> 00:32:10,000
就是说如果以后勾的话也可以差不多可以

983
00:32:10,000 --> 00:32:12,000
也许可以做类似的事情

984
00:32:12,000 --> 00:32:14,000
嗯

985
00:32:14,000 --> 00:32:15,000
但这个事情也跟上

986
00:32:15,000 --> 00:32:16,000
上

987
00:32:16,000 --> 00:32:19,000
其实我们讲那个微软的计划有点相关嘛

988
00:32:19,000 --> 00:32:24,000
就他是要要声称是用那个.net 支持啊

989
00:32:24,000 --> 00:32:27,000
安卓和 iOS 的跨平台的开发

990
00:32:27,000 --> 00:32:29,000
但其实我知道他的用心也很也很清楚

991
00:32:29,000 --> 00:32:31,000
就是顺顺带假点私货

992
00:32:31,000 --> 00:32:33,000
那你们都反正都一套代码了

993
00:32:33,000 --> 00:32:35,000
那不如顺便编一个 windows phone 的版本

994
00:32:35,000 --> 00:32:37,000
哈哈

995
00:32:37,000 --> 00:32:41,000
以此解决那个什么 windows phone 上面那个应用数不足

996
00:32:41,000 --> 00:32:45,000
然后这个开发者不愿意开发的这么一个尴尬局面吧

997
00:32:45,000 --> 00:32:45,000
对他算是不愿意开发的这么一个尴尬局面吧

998
00:32:45,000 --> 00:32:45,000
对他算是不愿意开发的这么一个尴尬局面吧

999
00:32:45,000 --> 00:32:45,000
对他算是不愿意开发的这么一个尴尬局面吧

1000
00:32:45,000 --> 00:32:47,000
对他算是一个鸡生蛋蛋生鸡的问题

1001
00:32:47,000 --> 00:32:49,000
就恶性循环

1002
00:32:49,000 --> 00:32:52,000
说你们不想给我生蛋

1003
00:32:52,000 --> 00:32:54,000
那我送你一个鸡包生所有蛋

1004
00:32:54,000 --> 00:32:57,000
对顺手顺手帮我克拢一个蛋好了

1005
00:32:57,000 --> 00:33:00,000
对他就是打了那个小算盘

1006
00:33:00,000 --> 00:33:00,000
我觉得

1007
00:33:00,000 --> 00:33:01,000
嗯

1008
00:33:01,000 --> 00:33:04,000
那个就插播的广告到这里了

1009
00:33:04,000 --> 00:33:05,000
OK

1010
00:33:05,000 --> 00:33:07,000
现在正题是什么

1011
00:33:07,000 --> 00:33:09,000
呃

1012
00:33:09,000 --> 00:33:10,000
我先放音乐吧

1013
00:33:10,000 --> 00:33:11,000
好

1014
00:33:11,000 --> 00:33:13,000
呃

1015
00:33:13,000 --> 00:33:15,000
我实在是太细心了

1016
00:33:15,000 --> 00:33:15,000
呃

1017
00:33:15,000 --> 00:33:23,000
我们本来打算在这里插入电子游戏 portal 的主题曲 still alive 的一个电子合成器版本

1018
00:33:23,000 --> 00:33:31,000
但是经过事后的一番研究发现这首歌的授权其实并不是像我原先以为的那样

1019
00:33:31,000 --> 00:33:32,000
呃

1020
00:33:32,000 --> 00:33:35,000
以创作公用署名非商业写意发布

1021
00:33:35,000 --> 00:33:36,000
呃

1022
00:33:36,000 --> 00:33:41,000
原作者 Johnson Carlton 其实已经将这首歌的版权给了 portal 游戏的制作商 Val

1023
00:33:41,000 --> 00:33:42,000
呃

1024
00:33:42,000 --> 00:33:45,000
所以我们需要先询问一下 Val

1025
00:33:45,000 --> 00:33:47,000
是否可以将它用到我们的节目里

1026
00:33:47,000 --> 00:33:58,000
而目前的现状是我跟 real 在接下来的内容里面会反复提到 portal 以及这首歌

1027
00:33:58,000 --> 00:33:58,000
呃

1028
00:33:58,000 --> 00:34:01,000
如果你不听一下的话可能会有点奇怪

1029
00:34:01,000 --> 00:34:02,000
嗯

1030
00:34:02,000 --> 00:34:05,000
那我也和大家说一声抱歉了

1031
00:34:05,000 --> 00:34:08,000
I don't blame you

1032
00:34:08,000 --> 00:34:14,000
北美山地时间 2006 年 1 月 2 日下午 3 点 04 分 05 秒

1033
00:34:14,000 --> 00:34:18,000
您正在收听的是 IPN podcast 网络旗下的内核恐慌

1034
00:34:18,000 --> 00:34:19,000
呃

1035
00:34:19,000 --> 00:34:22,000
我们号称硬核但是也没有什么干货

1036
00:34:22,000 --> 00:34:25,000
想听的人听不想听的人就不要听

1037
00:34:25,000 --> 00:34:28,000
好拽的一句话

1038
00:34:28,000 --> 00:34:29,000
有点怪

1039
00:34:29,000 --> 00:34:31,000
呃

1040
00:34:31,000 --> 00:34:31,000
对

1041
00:34:31,000 --> 00:34:34,000
然后就像大家刚才听到的这样

1042
00:34:34,000 --> 00:34:37,000
我们从这一期开始有我们的主题曲了

1043
00:34:37,000 --> 00:34:37,000
耶

1044
00:34:37,000 --> 00:34:40,000
对

1045
00:34:40,000 --> 00:34:42,000
然后呃

1046
00:34:42,000 --> 00:34:44,000
源起其实又是看

1047
00:34:44,000 --> 00:34:44,000
呃

1048
00:34:44,000 --> 00:34:44,000
呃

1049
00:34:44,000 --> 00:34:46,000
我听过论有主题曲我挺眼红的

1050
00:34:46,000 --> 00:34:46,000
我也想要一个

1051
00:34:46,000 --> 00:34:47,000
但是

1052
00:34:47,000 --> 00:34:50,000
但是一直拖到呃

1053
00:34:50,000 --> 00:34:52,000
我们已经做了五期了

1054
00:34:52,000 --> 00:34:53,000
十个礼拜了

1055
00:34:53,000 --> 00:34:54,000
过去了才嗯

1056
00:34:54,000 --> 00:34:59,000
终于找到了这么一个也不算非常合意

1057
00:34:59,000 --> 00:35:01,000
但是觉得还不错的主题曲吧

1058
00:35:01,000 --> 00:35:03,000
当然呃

1059
00:35:04,000 --> 00:35:05,000
如果你知道它是什么来头

1060
00:35:05,000 --> 00:35:06,000
那已经知道它是什么来头

1061
00:35:06,000 --> 00:35:07,000
如果你不知道的话

1062
00:35:07,000 --> 00:35:09,000
它是嗯

1063
00:35:09,000 --> 00:35:11,000
一个游戏

1064
00:35:11,000 --> 00:35:14,000
就是如果各位有记忆的话

1065
00:35:14,000 --> 00:35:18,000
有听前三两期的 it 公论的话

1066
00:35:18,000 --> 00:35:25,000
会注意到 real 和刘一都在节目之中谈到了 portal 这个游戏

1067
00:35:25,000 --> 00:35:32,000
然后刚才大家听到这段旋律就是 portal 呃一代里面的主题曲吧

1068
00:35:32,000 --> 00:35:32,000
应该算

1069
00:35:32,000 --> 00:35:34,000
因为呃

1070
00:35:34,000 --> 00:35:39,000
虽然整个完整的呃曲音乐是在是它是有歌了

1071
00:35:39,000 --> 00:35:43,000
它是在呃游戏最终打穿之后才播出了

1072
00:35:43,000 --> 00:35:54,000
但是其实你一开始游戏那个呃 spoiler 的 spoiler alert 就是一开始你在游戏里面捡起的那个声音机里面放的就是这首曲

1073
00:35:54,000 --> 00:35:56,000
然后在你打爆机的时候

1074
00:35:56,000 --> 00:36:03,000
最后出字幕的时候也是放了这个就放的是这个完整版对整首歌会被正式的唱

1075
00:36:03,000 --> 00:36:07,000
其实其实我第一次听这歌还我都还没有玩这个 portal 这个游戏啊

1076
00:36:07,000 --> 00:36:10,000
但是有一个什么机缘巧合

1077
00:36:10,000 --> 00:36:11,000
我就听了那个歌

1078
00:36:11,000 --> 00:36:13,000
我觉得哇好好可爱真的吗

1079
00:36:13,000 --> 00:36:13,000
你在哪里啊

1080
00:36:13,000 --> 00:36:15,000
我第一次听这个游戏的时候就听过这首歌

1081
00:36:15,000 --> 00:36:16,000
嗯哼嗯哼

1082
00:36:16,000 --> 00:36:17,000
OK 有意思

1083
00:36:17,000 --> 00:36:20,000
对然后我这他有歌词嘛

1084
00:36:20,000 --> 00:36:23,000
然后他有那个那个那个有一个动画效果

1085
00:36:23,000 --> 00:36:26,000
然后你去看那个感觉真的超好

1086
00:36:26,000 --> 00:36:33,000
对所以反正总之就像我推荐 real 就为什么 real 会花一天

1087
00:36:33,000 --> 00:36:36,000
就是花了一周加一周时间玩了 portal 一

1088
00:36:36,000 --> 00:36:39,000
然后又花了一天一整天时间打穿 portal 二呢

1089
00:36:39,000 --> 00:36:42,000
就是因为我向他吐血强力推荐

1090
00:36:42,000 --> 00:36:43,000
我逼着他去玩了

1091
00:36:43,000 --> 00:36:43,000
因为

1092
00:36:43,000 --> 00:36:50,000
real 其实有啊就是玩第一阵车设计游戏会会会上吐下不屑

1093
00:36:50,000 --> 00:36:54,000
在我的这个强迫之下他还是去玩了一遍

1094
00:36:54,000 --> 00:37:01,000
然后玩了对我推荐他玩的契机也就是希望能够选用这首曲子来作为游戏的主

1095
00:37:01,000 --> 00:37:04,000
游戏主题曲作为节目主题曲

1096
00:37:04,000 --> 00:37:11,000
然后希望能够希望他能够理解这个游戏的或者说这个这个这首音乐的有意思的地方在哪

1097
00:37:11,000 --> 00:37:13,000
但其实我要说啊就是

1098
00:37:13,000 --> 00:37:17,000
在我玩这个游戏之前我光看那个歌就已经觉得蛮有意思的

1099
00:37:17,000 --> 00:37:22,000
但就是说只是对里面的有些歌词的部分理解不是那么深刻

1100
00:37:22,000 --> 00:37:24,000
不知道为什么他要说那件事

1101
00:37:24,000 --> 00:37:26,000
那你玩玩游戏之后你就啊原来是这个意思

1102
00:37:26,000 --> 00:37:32,000
对比如说对整个歌词里面的每一句其实都可以在游戏里面找到线索

1103
00:37:32,000 --> 00:37:38,000
对啊另外这个对另外这个歌曲也本身有点很有那个

1104
00:37:38,000 --> 00:37:39,000
嗯

1105
00:37:39,000 --> 00:37:42,000
因为他本身就是一个 geek 写出来

1106
00:37:42,000 --> 00:37:43,000
这首歌的这个作者

1107
00:37:43,000 --> 00:37:46,000
是一个是在 gik 界非常有名的一个人

1108
00:37:46,000 --> 00:37:48,000
他叫做 johnson colton

1109
00:37:48,000 --> 00:37:52,000
他写了很多呃说不上快之人口

1110
00:37:52,000 --> 00:37:53,000
但是非常 gik 的歌

1111
00:37:53,000 --> 00:37:55,000
比如说这首歌的歌词里面有一句是

1112
00:37:55,000 --> 00:37:56,000
呃

1113
00:37:56,000 --> 00:37:59,000
we are out of beta

1114
00:37:59,000 --> 00:38:00,000
we are releasing on time

1115
00:38:00,000 --> 00:38:02,000
很有意思

1116
00:38:02,000 --> 00:38:03,000
对

1117
00:38:03,000 --> 00:38:05,000
呃

1118
00:38:05,000 --> 00:38:11,000
有时候我们在我在公司发现这个 deadline 又一次被推迟的时候

1119
00:38:11,000 --> 00:38:13,000
我就会在心里默默唱这首歌

1120
00:38:13,000 --> 00:38:13,000
哈哈

1121
00:38:13,000 --> 00:38:14,000
哈哈哈

1122
00:38:14,000 --> 00:38:17,000
all the beta we are releasing on time

1123
00:38:17,000 --> 00:38:19,000
对嗯

1124
00:38:19,000 --> 00:38:22,000
在游戏界其实这是非常非常严重的一个问题

1125
00:38:22,000 --> 00:38:26,000
就是游戏作为一种特殊的软件

1126
00:38:26,000 --> 00:38:30,000
其玩家对于跳票的容忍能力是非常非常差的

1127
00:38:30,000 --> 00:38:31,000
嗯

1128
00:38:31,000 --> 00:38:33,000
除非你是暴雪或者是

1129
00:38:33,000 --> 00:38:35,000
哈哈哈哈

1130
00:38:35,000 --> 00:38:37,000
呃

1131
00:38:37,000 --> 00:38:40,000
或者是 volve 这种大公司

1132
00:38:40,000 --> 00:38:42,000
否则你一般很难去

1133
00:38:42,000 --> 00:38:43,000
嗯

1134
00:38:43,000 --> 00:38:47,000
应对面对玩家的愤怒啊

1135
00:38:47,000 --> 00:38:48,000
对

1136
00:38:48,000 --> 00:38:51,000
而且而且 gamer 其实是非常容易愤一怒的一个人群

1137
00:38:51,000 --> 00:38:57,000
就像之前的这个 gamergate 里面爆连暴露出来一个一个一个一个现状一样

1138
00:38:57,000 --> 00:39:00,000
就是这是一群这是大一群呃

1139
00:39:00,000 --> 00:39:01,000
打了鸡血的人

1140
00:39:01,000 --> 00:39:01,000
对

1141
00:39:01,000 --> 00:39:03,000
荷尔蒙无处挥发

1142
00:39:03,000 --> 00:39:07,000
然后又不知道怎么跟女生交流的这样一群人

1143
00:39:07,000 --> 00:39:08,000
就

1144
00:39:08,000 --> 00:39:10,000
他们的情商是非常低的

1145
00:39:10,000 --> 00:39:13,000
所以他们基本上宣扬

1146
00:39:13,000 --> 00:39:15,000
泄愤的唯一方法就是骂你

1147
00:39:15,000 --> 00:39:17,000
然后游戏公司是被

1148
00:39:17,000 --> 00:39:19,000
最容易被骂的狗血喷头

1149
00:39:19,000 --> 00:39:21,000
狗血喷头的一方

1150
00:39:21,000 --> 00:39:23,000
所以不能按时

1151
00:39:23,000 --> 00:39:24,000
交付软件

1152
00:39:24,000 --> 00:39:26,000
其实对于他们来说是非常严重的

1153
00:39:26,000 --> 00:39:29,000
所以其实从这从这一点说来

1154
00:39:29,000 --> 00:39:33,000
像我这种星际玩家还是蛮能等的

1155
00:39:33,000 --> 00:39:34,000
呃

1156
00:39:34,000 --> 00:39:36,000
对其实咱们都算是

1157
00:39:36,000 --> 00:39:39,000
休闲型玩家吧

1158
00:39:39,000 --> 00:39:41,000
就古灰级玩家等星际 2 已经等了

1159
00:39:41,000 --> 00:39:42,000
不知道

1160
00:39:42,000 --> 00:39:43,000
就没办法了

1161
00:39:43,000 --> 00:39:44,000
已经不知道吧

1162
00:39:44,000 --> 00:39:44,000
十几年了

1163
00:39:44,000 --> 00:39:45,000
就间隔

1164
00:39:45,000 --> 00:39:46,000
漫漫了多少遍了

1165
00:39:46,000 --> 00:39:46,000
对

1166
00:39:46,000 --> 00:39:49,000
所以你玩泡头有什么观感

1167
00:39:49,000 --> 00:39:50,000
呃

1168
00:39:50,000 --> 00:39:51,000
我先先解决那个问题

1169
00:39:51,000 --> 00:39:53,000
我我不知道为什么我玩泡头

1170
00:39:53,000 --> 00:39:56,000
一我只能玩就可能不超过半小时了

1171
00:39:56,000 --> 00:39:57,000
这样啊

1172
00:39:57,000 --> 00:39:58,000
不然就会那个头晕想吐

1173
00:39:58,000 --> 00:40:01,000
但是我玩泡头二好像没有这个原因

1174
00:40:01,000 --> 00:40:02,000
但我想不明白为什么

1175
00:40:02,000 --> 00:40:04,000
泡头二的引擎和泡头一不一样吧

1176
00:40:04,000 --> 00:40:05,000
我敢

1177
00:40:05,000 --> 00:40:06,000
但是我直观的看那个

1178
00:40:06,000 --> 00:40:08,000
画面的时候

1179
00:40:08,000 --> 00:40:10,000
没有看出太大的区别

1180
00:40:10,000 --> 00:40:12,000
泡头二的画面的精细程度

1181
00:40:12,000 --> 00:40:13,000
要比一好很多

1182
00:40:13,000 --> 00:40:15,000
是因为你说他精度不够

1183
00:40:15,000 --> 00:40:17,000
所以觉得想头晕想吐

1184
00:40:17,000 --> 00:40:18,000
也有可能是

1185
00:40:18,000 --> 00:40:20,000
somehow 一代的帧率不够高

1186
00:40:20,000 --> 00:40:21,000
不可能啊

1187
00:40:21,000 --> 00:40:22,000
一代的游戏

1188
00:40:22,000 --> 00:40:23,000
2007 年的泡头游戏

1189
00:40:23,000 --> 00:40:25,000
现在的机器跑肯定没问题

1190
00:40:25,000 --> 00:40:25,000
嗯

1191
00:40:25,000 --> 00:40:27,000
而且我玩游戏

1192
00:40:27,000 --> 00:40:28,000
他推荐给我的那个设置

1193
00:40:28,000 --> 00:40:29,000
都还是蛮高的

1194
00:40:29,000 --> 00:40:31,000
这个特效的那个量的

1195
00:40:31,000 --> 00:40:33,000
机器应该不是问题

1196
00:40:33,000 --> 00:40:35,000
就这个事情是一个挺贵

1197
00:40:35,000 --> 00:40:37,000
我玩所有的射击游戏都会

1198
00:40:37,000 --> 00:40:38,000
就第一人称视角的

1199
00:40:38,000 --> 00:40:40,000
这种算是射击游戏吧

1200
00:40:40,000 --> 00:40:41,000
啊

1201
00:40:41,000 --> 00:40:42,000
都是这个问题

1202
00:40:42,000 --> 00:40:43,000
以前玩那个

1203
00:40:43,000 --> 00:40:43,000
啊

1204
00:40:43,000 --> 00:40:45,000
就是 counter strike cs 的时候

1205
00:40:45,000 --> 00:40:46,000
也是就可能大概

1206
00:40:46,000 --> 00:40:47,000
二十分钟半小时就

1207
00:40:47,000 --> 00:40:48,000
哎不行了

1208
00:40:48,000 --> 00:40:49,000
必须得走

1209
00:40:49,000 --> 00:40:51,000
不然就是那个要想吐

1210
00:40:51,000 --> 00:40:53,000
你就是传说中猪一样的队友

1211
00:40:53,000 --> 00:40:56,000
对所以

1212
00:40:56,000 --> 00:40:57,000
所以你看我

1213
00:40:57,000 --> 00:40:59,000
我忍着这个头晕想吐

1214
00:40:59,000 --> 00:41:00,000
这种风险

1215
00:41:00,000 --> 00:41:02,000
就把这个泡头也打完了

1216
00:41:02,000 --> 00:41:02,000
你看

1217
00:41:02,000 --> 00:41:04,000
太够意思了

1218
00:41:04,000 --> 00:41:08,000
会不会是因为一代和二代里面的

1219
00:41:08,000 --> 00:41:11,000
人的相机视野不一样

1220
00:41:11,000 --> 00:41:12,000
我还真没

1221
00:41:12,000 --> 00:41:13,000
我还真没

1222
00:41:13,000 --> 00:41:14,000
看出来我比较过一下

1223
00:41:14,000 --> 00:41:17,000
但是没有什么特别明显的区别

1224
00:41:17,000 --> 00:41:18,000
ok

1225
00:41:18,000 --> 00:41:20,000
反正这个是挺那挺就很让我奇怪

1226
00:41:20,000 --> 00:41:22,000
也可能是说

1227
00:41:22,000 --> 00:41:23,000
呃我玩一的时候就是什么

1228
00:41:23,000 --> 00:41:25,000
已经训练过一下了

1229
00:41:25,000 --> 00:41:28,000
然后玩的时候觉得哎刚之前已经折腾过那么久了

1230
00:41:28,000 --> 00:41:29,000
这次是不是就好一点

1231
00:41:29,000 --> 00:41:30,000
嗯

1232
00:41:30,000 --> 00:41:34,000
也有可能是二代的场景相比一相对于压来说更空旷一点

1233
00:41:34,000 --> 00:41:36,000
就可能有有那种纵深感

1234
00:41:36,000 --> 00:41:38,000
你就对对对

1235
00:41:38,000 --> 00:41:40,000
他会大看起来很大一些

1236
00:41:40,000 --> 00:41:41,000
嗯

1237
00:41:41,000 --> 00:41:42,000
嗯

1238
00:41:42,000 --> 00:41:42,000
有可能吧

1239
00:41:42,000 --> 00:41:42,000
吧

1240
00:41:42,000 --> 00:41:45,000
然后你说你用一天时间打穿泡头二

1241
00:41:45,000 --> 00:41:46,000
我觉得还挺惊讶的

1242
00:41:46,000 --> 00:41:47,000
就是

1243
00:41:48,000 --> 00:41:51,000
这我因为泡头二我可能玩过两次三次

1244
00:41:51,000 --> 00:41:52,000
对

1245
00:41:52,000 --> 00:41:52,000
嗯

1246
00:41:52,000 --> 00:41:56,000
我从来没有说一一天在玩这个游戏

1247
00:41:56,000 --> 00:42:01,000
这泡头二他的那个场景是比医药大概是四倍左右吧

1248
00:42:01,000 --> 00:42:04,000
我估计就从我的玩的体验来看

1249
00:42:04,000 --> 00:42:06,000
就是整个你打穿的长度

1250
00:42:06,000 --> 00:42:09,000
因为泡头一的就只有那十九个 test chamber

1251
00:42:09,000 --> 00:42:09,000
吗

1252
00:42:09,000 --> 00:42:10,000
呃

1253
00:42:10,000 --> 00:42:12,000
其实泡头二不止四倍

1254
00:42:12,000 --> 00:42:14,000
因为泡头二还有一个协作模式

1255
00:42:14,000 --> 00:42:16,000
你可能那个是无限的对吧

1256
00:42:16,000 --> 00:42:17,000
对

1257
00:42:17,000 --> 00:42:21,000
就也那个其实也是我我不是很记得了

1258
00:42:21,000 --> 00:42:26,000
但是我相信他默认带的那些呃 chamber 也是有限的

1259
00:42:26,000 --> 00:42:28,000
就是如果你有兴趣的话

1260
00:42:28,000 --> 00:42:29,000
以后咱们可以试一下

1261
00:42:29,000 --> 00:42:31,000
就是他可以支持两个好友

1262
00:42:31,000 --> 00:42:35,000
对一个就是他就是在泡头二最后结束的时候又有剧透了

1263
00:42:35,000 --> 00:42:41,000
就是你会被你会看到两个机器人一个一个是橙脸一个是蓝脸吧

1264
00:42:41,000 --> 00:42:42,000
嗯哼

1265
00:42:42,000 --> 00:42:46,000
然后你你可以和自己的同伴各自操作一个

1266
00:42:46,000 --> 00:42:49,000
然后每两个机器人各自拿着一把 pull 头杆

1267
00:42:49,000 --> 00:42:49,000
嗯哼

1268
00:42:49,000 --> 00:42:53,000
然后等于你可以在同一时间里面有四个 pull 头

1269
00:42:53,000 --> 00:42:55,000
然后其中两两两是互通的

1270
00:42:55,000 --> 00:42:57,000
然后就可以打出更多组合来

1271
00:42:57,000 --> 00:43:02,000
就你必须在队友的配合之下才可以解开一些谜题是吧

1272
00:43:02,000 --> 00:43:04,000
啊那那也是有剧情的吗

1273
00:43:04,000 --> 00:43:07,000
那个没有剧那个好像

1274
00:43:07,000 --> 00:43:08,000
就只是一个联机模式而已

1275
00:43:08,000 --> 00:43:11,000
好像是只只是一个协作模式而已

1276
00:43:11,000 --> 00:43:11,000
ok 就所以我就觉得这个就是一个绝对的一个模式而已

1277
00:43:11,000 --> 00:43:12,000
就所以我就觉得这个就是一个绝对的一个模式而已

1278
00:43:12,000 --> 00:43:15,000
我就说就单看打单单看主线剧情的话

1279
00:43:15,000 --> 00:43:16,000
对对对

1280
00:43:16,000 --> 00:43:19,000
大概二可能对剧情是蛮蛮长

1281
00:43:19,000 --> 00:43:24,000
当时我我记得我是跑完了那个那个叫什么

1282
00:43:24,000 --> 00:43:28,000
嗯就是从那个地下爬出来

1283
00:43:28,000 --> 00:43:30,000
不是不是从地下爬出来

1284
00:43:30,000 --> 00:43:33,000
对从地下爬出来见到那个最开始要剧透了

1285
00:43:33,000 --> 00:43:34,000
怎么办

1286
00:43:34,000 --> 00:43:35,000
嗯没关系

1287
00:43:35,000 --> 00:43:37,000
就是你找回那个土豆之之后

1288
00:43:37,000 --> 00:43:39,000
我觉得那个可能爬出来就完了嘛

1289
00:43:39,000 --> 00:43:41,000
因为之前已经有那个 testchamber 有打过的

1290
00:43:41,000 --> 00:43:42,000
因为之前已经有那个 testchamber 有打过的

1291
00:43:42,000 --> 00:43:43,000
然后之后有一个正式的剧情

1292
00:43:43,000 --> 00:43:45,000
你觉得已经蛮长

1293
00:43:45,000 --> 00:43:47,000
最后想不到竟然还有一遍 testchamber

1294
00:43:47,000 --> 00:43:48,000
有什么又一个新一轮的吗

1295
00:43:48,000 --> 00:43:50,000
就觉得还蛮奇怪

1296
00:43:50,000 --> 00:43:51,000
嗯嗯

1297
00:43:51,000 --> 00:43:56,000
因为 testchamber 本身也是他游戏最大的魅力

1298
00:43:56,000 --> 00:43:57,000
啊对对对

1299
00:43:57,000 --> 00:44:00,000
但是我没想到就是最开始有一个 testchamber

1300
00:44:00,000 --> 00:44:02,000
然后中间就有剧情完了

1301
00:44:02,000 --> 00:44:04,000
还要 testchamber

1302
00:44:04,000 --> 00:44:05,000
嗯嗯就完全没有

1303
00:44:05,000 --> 00:44:07,000
就是这个是我出乎我预料的一个地方

1304
00:44:07,000 --> 00:44:11,000
然后呃就是会觉得有点打到后面就想哇怎么没完没了还没有玩

1305
00:44:11,000 --> 00:44:12,000
嗯嗯就是会觉得有点打到后面就想哇怎么没完没了还没有玩

1306
00:44:12,000 --> 00:44:13,000
嗯嗯就是会觉得有点打到后面就想哇怎么没完没了还没有玩

1307
00:44:13,000 --> 00:44:14,000
嗯嗯就是会觉得有点打到后面就想哇怎么没完没了还没有玩

1308
00:44:14,000 --> 00:44:15,000
嗯嗯就是会觉得有点打到后面就想哇怎么没完没了还没有玩

1309
00:44:15,000 --> 00:44:17,000
但是剧情很具体很有意思

1310
00:44:17,000 --> 00:44:17,000
就很有趣

1311
00:44:17,000 --> 00:44:20,000
然后也不会觉得很无聊的

1312
00:44:20,000 --> 00:44:21,000
ok

1313
00:44:21,000 --> 00:44:24,000
所以你有想明白一代和二代

1314
00:44:24,000 --> 00:44:28,000
就你你知道一代和二代的主角是同一个人吧

1315
00:44:28,000 --> 00:44:34,000
我知道就是他从那个最开始介绍的那个时间的线看出来就是在又看出来吗

1316
00:44:34,000 --> 00:44:35,000
对那你有意识

1317
00:44:35,000 --> 00:44:38,000
你有想过为什么主角又回去重新做实验了

1318
00:44:40,000 --> 00:44:41,000
这个我倒没有想过

1319
00:44:41,000 --> 00:44:41,000
为什么

1320
00:44:42,000 --> 00:44:45,000
就是一代和二代的剧情其实是连着的

1321
00:44:45,000 --> 00:44:46,000
就是一代的结尾

1322
00:44:46,000 --> 00:44:47,000
你

1323
00:44:47,000 --> 00:44:50,000
把格拉多斯打爆之后

1324
00:44:50,000 --> 00:44:52,000
到了地面上

1325
00:44:52,000 --> 00:44:54,000
然后看起来在一个看起来像停车场的地方

1326
00:44:54,000 --> 00:44:57,000
你被你会就是当时最抛到一

1327
00:44:57,000 --> 00:44:59,000
刚刚出

1328
00:44:59,000 --> 00:45:01,000
刚刚出来的时候

1329
00:45:01,000 --> 00:45:03,000
最终的结局就是你看你重新天日

1330
00:45:03,000 --> 00:45:04,000
然后就完了

1331
00:45:04,000 --> 00:45:06,000
啊那个是假的是吧

1332
00:45:06,000 --> 00:45:06,000
那个那个也是

1333
00:45:06,000 --> 00:45:07,000
那个也是

1334
00:45:07,000 --> 00:45:11,000
后来我看了一个网上的那个别人做的视频

1335
00:45:11,000 --> 00:45:12,000
就是那个是假的

1336
00:45:12,000 --> 00:45:12,000
就是那个也是后来我看了一个网上的那个别人做的视频

1337
00:45:12,000 --> 00:45:13,000
就是那个也是他冲

1338
00:45:13,000 --> 00:45:18,000
就是个真人版的真人版的一个录电影小电影

1339
00:45:18,000 --> 00:45:21,000
你就说他好像是冲出去之后发现了周围的那些景

1340
00:45:21,000 --> 00:45:22,000
我看起来是真的

1341
00:45:22,000 --> 00:45:24,000
但其实跑到边上看都是屏幕对吧

1342
00:45:24,000 --> 00:45:28,000
哦不是就是真就是在波罗二出现之后

1343
00:45:28,000 --> 00:45:30,000
波罗一有了一个 update

1344
00:45:30,000 --> 00:45:31,000
有一个 patch

1345
00:45:31,000 --> 00:45:33,000
然后这个 patch 把结局改了

1346
00:45:33,000 --> 00:45:35,000
就是你重现天日之后

1347
00:45:36,000 --> 00:45:37,000
自己受伤了

1348
00:45:37,000 --> 00:45:42,000
然后你你第一人生视角会感觉到自己正在被迫死了

1349
00:45:42,000 --> 00:45:45,000
被一个机器人正在被一个什么东西往回拖

1350
00:45:45,000 --> 00:45:47,000
然后一个机器人的声音说

1351
00:45:47,000 --> 00:45:50,000
请你保持一个 party submission position

1352
00:45:50,000 --> 00:45:53,000
就是要参加 party 的这么一个姿势

1353
00:45:53,000 --> 00:45:54,000
然后他把你慢慢往回拖

1354
00:45:54,000 --> 00:45:58,000
然后那个整个整个的画面才按下去

1355
00:45:58,000 --> 00:46:00,000
然后一代和二代之间的剧情

1356
00:46:00,000 --> 00:46:04,000
其实会其实可以通过一个一部漫画解释

1357
00:46:04,000 --> 00:46:09,000
就是我专门发了一本漫画

1358
00:46:09,000 --> 00:46:12,000
叫做 portal elaborate

1359
00:46:12,000 --> 00:46:17,000
然后在对在这里面解释了整个整件事情来能去卖

1360
00:46:17,000 --> 00:46:18,000
就是嗯

1361
00:46:18,000 --> 00:46:20,000
如果你玩过 portal 的话

1362
00:46:20,000 --> 00:46:22,000
你可能会好奇就是为什么里面的人都死了

1363
00:46:22,000 --> 00:46:23,000
他们是怎么死的

1364
00:46:23,000 --> 00:46:28,000
然后 laborate 这个漫画其实就解释了这一点

1365
00:46:28,000 --> 00:46:30,000
就是嗯

1366
00:46:30,000 --> 00:46:32,000
但是这个在叫什么

1367
00:46:32,000 --> 00:46:34,000
在那个 portal 二进场的时候

1368
00:46:34,000 --> 00:46:36,000
就最开始那一些的

1369
00:46:36,000 --> 00:46:36,000
不对

1370
00:46:36,000 --> 00:46:40,000
就在 portal 二最后那部分的 test chamber

1371
00:46:40,000 --> 00:46:41,000
你每次出来不是一个电梯吗

1372
00:46:42,000 --> 00:46:46,000
然后他电梯墙墙面上不是有一个一堆破碎的这个屏幕吗

1373
00:46:46,000 --> 00:46:48,000
能够看出一点一点端倪吧

1374
00:46:48,000 --> 00:46:50,000
还有机器人什么

1375
00:46:50,000 --> 00:46:52,000
就是突然发飙了

1376
00:46:52,000 --> 00:46:53,000
然后把那些人都干掉了

1377
00:46:53,000 --> 00:46:56,000
其实在 laboratory science

1378
00:46:56,000 --> 00:46:59,000
就在 abstract science laboratory 里面

1379
00:46:59,000 --> 00:47:01,000
人们研究出来了

1380
00:47:01,000 --> 00:47:04,000
就是真正的人工智能

1381
00:47:04,000 --> 00:47:11,000
Glados 这个名字的缩写就是整个片中的女人工智能的名字

1382
00:47:11,000 --> 00:47:11,000
叫 Glados

1383
00:47:11,000 --> 00:47:14,000
它的缩写就是 general life form

1384
00:47:14,000 --> 00:47:17,000
and disk operating system

1385
00:47:17,000 --> 00:47:19,000
就是 dos

1386
00:47:19,000 --> 00:47:20,000
dos 这个部分就是 dos

1387
00:47:20,000 --> 00:47:22,000
然后前面是 general life form

1388
00:47:22,000 --> 00:47:25,000
就是它是一种真正有智力的人工智能

1389
00:47:25,000 --> 00:47:28,000
但是人们发现一个问题就是

1390
00:47:28,000 --> 00:47:30,000
在漫画里面有讲说

1391
00:47:30,000 --> 00:47:30,000
嗯

1392
00:47:30,000 --> 00:47:32,000
每一个人工智能

1393
00:47:32,000 --> 00:47:36,000
被打开之后

1394
00:47:36,000 --> 00:47:37,000
就是把它 turn on 之后

1395
00:47:37,000 --> 00:47:39,000
大约在

1396
00:47:39,000 --> 00:47:40,000
十六分之一个

1397
00:47:41,000 --> 00:47:43,000
pico second 之后

1398
00:47:43,000 --> 00:47:46,000
这个人工智能就会试图把人

1399
00:47:46,000 --> 00:47:48,000
就会开始试图杀人

1400
00:47:48,000 --> 00:47:50,000
对

1401
00:47:50,000 --> 00:47:54,000
然后他们的解决方法就是拼命往这个人工智能上面加所谓的 core

1402
00:47:54,000 --> 00:47:56,000
personality core

1403
00:47:56,000 --> 00:48:00,000
就是有一个 personality core 是所谓的 moral core

1404
00:48:00,000 --> 00:48:03,000
就是让这个人工智能有道德意识

1405
00:48:03,000 --> 00:48:03,000
对

1406
00:48:03,000 --> 00:48:06,000
让他意识到道德杀人是不对的

1407
00:48:06,000 --> 00:48:09,000
然后他这个 drawn core 之后

1408
00:48:10,000 --> 00:48:11,000
人工智能意识到

1409
00:48:11,000 --> 00:48:13,000
杀人是不对的

1410
00:48:13,000 --> 00:48:15,000
所以他就换了一个方法杀人

1411
00:48:15,000 --> 00:48:16,000
他在

1412
00:48:16,000 --> 00:48:19,000
有一个 event 叫做

1413
00:48:19,000 --> 00:48:23,000
bring your cat to work

1414
00:48:23,000 --> 00:48:26,000
就是带你的猫来上班的这个 event 上面

1415
00:48:26,000 --> 00:48:29,000
把神经毒器接入到通风系统

1416
00:48:29,000 --> 00:48:30,000
然后把所有人都杀了

1417
00:48:30,000 --> 00:48:31,000
除了一个人

1418
00:48:31,000 --> 00:48:32,000
就是

1419
00:48:32,000 --> 00:48:35,000
主角是一个 test object

1420
00:48:35,000 --> 00:48:37,000
然后他不是工作人员

1421
00:48:37,000 --> 00:48:39,000
就是 glados 杀了所有的工作人员

1422
00:48:39,000 --> 00:48:41,000
然后但是工作人员有一个人活下来

1423
00:48:41,000 --> 00:48:41,000
这个人就是杀了所有的工作人员

1424
00:48:41,000 --> 00:48:42,000
这个人叫做

1425
00:48:42,000 --> 00:48:45,000
叫什么

1426
00:48:45,000 --> 00:48:45,000
忘了

1427
00:48:45,000 --> 00:48:46,000
但是就是

1428
00:48:46,000 --> 00:48:50,000
就是以他的视角来解释

1429
00:48:50,000 --> 00:48:52,000
整个 portal 的 event

1430
00:48:52,000 --> 00:48:55,000
就是 glados 杀了所有的工作人员之后

1431
00:48:55,000 --> 00:48:56,000
开始

1432
00:48:56,000 --> 00:49:00,000
试图想要找到这个工作人员

1433
00:49:00,000 --> 00:49:01,000
然后他继续做实验

1434
00:49:01,000 --> 00:49:05,000
因为 upside science 在后期

1435
00:49:05,000 --> 00:49:08,000
已经找不到合适的实验对象

1436
00:49:08,000 --> 00:49:10,000
就是如果你有仔细玩

1437
00:49:10,000 --> 00:49:11,000
这个仔细听过这个实验对象

1438
00:49:11,000 --> 00:49:13,000
portal 2 里面的那些对白的话

1439
00:49:13,000 --> 00:49:17,000
你会发现 portal 2 一开始是受美国军方的支持

1440
00:49:17,000 --> 00:49:21,000
portal 2 里面 upside science 的历史很有意思

1441
00:49:21,000 --> 00:49:26,000
upside science 一开始是给美国军方提供

1442
00:49:26,000 --> 00:49:28,000
shower curtain

1443
00:49:28,000 --> 00:49:29,000
就是玉莲的一个公司

1444
00:49:29,000 --> 00:49:30,000
然后

1445
00:49:30,000 --> 00:49:33,000
他的总裁

1446
00:49:33,000 --> 00:49:37,000
发现玉莲大获成功之后

1447
00:49:37,000 --> 00:49:40,000
开始急速转向

1448
00:49:40,000 --> 00:49:41,000
开始研究这种

1449
00:49:41,000 --> 00:49:44,000
可以

1450
00:49:44,000 --> 00:49:45,000
就是

1451
00:49:45,000 --> 00:49:48,000
超空间打开传送门装置

1452
00:49:48,000 --> 00:49:49,000
开始研发这种装置

1453
00:49:49,000 --> 00:49:51,000
然后一开始的时候

1454
00:49:51,000 --> 00:49:52,000
脑洞有点大

1455
00:49:52,000 --> 00:49:56,000
你会发现美国政府给他提供了优秀的军事人才

1456
00:49:56,000 --> 00:49:57,000
来

1457
00:49:57,000 --> 00:49:59,000
就是

1458
00:49:59,000 --> 00:50:02,000
应该是经过挑选的士兵来提供他做实验

1459
00:50:02,000 --> 00:50:04,000
到后来他不得不花钱

1460
00:50:04,000 --> 00:50:05,000
来雇人做实验

1461
00:50:05,000 --> 00:50:08,000
到最后他连雇人都雇不到了

1462
00:50:08,000 --> 00:50:09,000
只能请

1463
00:50:09,000 --> 00:50:11,000
强迫自己的雇员去做实验

1464
00:50:11,000 --> 00:50:13,000
然后

1465
00:50:13,000 --> 00:50:16,000
到 Glados 的时候

1466
00:50:16,000 --> 00:50:18,000
这个传统还是延续了下来

1467
00:50:18,000 --> 00:50:19,000
就是 Glados 想要找到

1468
00:50:19,000 --> 00:50:22,000
唯一仅存的雇员去做实验

1469
00:50:22,000 --> 00:50:23,000
然后这个雇员

1470
00:50:23,000 --> 00:50:26,000
在机缘巧

1471
00:50:26,000 --> 00:50:30,000
或者说他故意把女主角的名字

1472
00:50:30,000 --> 00:50:33,000
推到了整个实验名单的第一位

1473
00:50:33,000 --> 00:50:36,000
女主角本来是第 1600 多个候选人

1474
00:50:36,000 --> 00:50:37,000
然后他一下子变成了第一个人

1475
00:50:37,000 --> 00:50:39,000
然后就被唤醒去做了实验

1476
00:50:39,000 --> 00:50:40,000
OK

1477
00:50:40,000 --> 00:50:41,000
这样

1478
00:50:41,000 --> 00:50:42,000
然后

1479
00:50:42,000 --> 00:50:43,000
看那个漫画

1480
00:50:43,000 --> 00:50:44,000
对

1481
00:50:44,000 --> 00:50:47,000
你在这个游戏里面所看到的

1482
00:50:47,000 --> 00:50:49,000
墙壁上的所有的涂鸦

1483
00:50:49,000 --> 00:50:50,000
也都是这个人画的

1484
00:50:50,000 --> 00:50:52,000
因为他患了精神分裂症

1485
00:50:52,000 --> 00:50:56,000
然后他在他精神不正常的时候

1486
00:50:56,000 --> 00:50:58,000
他认为自己随身带的那个

1487
00:50:58,000 --> 00:51:01,000
就是上面画了心形图案的那个

1488
00:51:01,000 --> 00:51:03,000
cube

1489
00:51:03,000 --> 00:51:06,000
是会跟他对话的

1490
00:51:06,000 --> 00:51:07,000
是他的唯一的 companion

1491
00:51:07,000 --> 00:51:07,000
对

1492
00:51:07,000 --> 00:51:09,000
但是这个

1493
00:51:09,000 --> 00:51:11,000
这个这个这个情节

1494
00:51:11,000 --> 00:51:11,000
然后

1495
00:51:11,000 --> 00:51:11,000
然后

1496
00:51:11,000 --> 00:51:13,000
这些上面的对白中友就经常被拿来恶搞

1497
00:51:13,000 --> 00:51:19,000
就是比如说在游戏界

1498
00:51:19,000 --> 00:51:21,000
或者在西方欧美游戏界

1499
00:51:21,000 --> 00:51:25,000
最常最最为人所知的一个 jargon

1500
00:51:25,000 --> 00:51:26,000
就是 the cake is a lie

1501
00:51:26,000 --> 00:51:31,000
然后你正确的回应是 and the cube must die for it

1502
00:51:31,000 --> 00:51:33,000
对

1503
00:51:33,000 --> 00:51:36,000
就是在 portal 一代里面

1504
00:51:36,000 --> 00:51:38,000
应该是第 17 关

1505
00:51:38,000 --> 00:51:39,000
我记得 test number 17

1506
00:51:39,000 --> 00:51:41,000
你用一个上面画的字面

1507
00:51:41,000 --> 00:51:43,000
你用一个新型的 cube 去挡了很多

1508
00:51:43,000 --> 00:51:46,000
你用它替你挡了很多子弹

1509
00:51:46,000 --> 00:51:49,000
因为你不拿它挡的话你就死了

1510
00:51:49,000 --> 00:51:51,000
然后等到这个关卡的最结尾

1511
00:51:51,000 --> 00:51:54,000
格拉道斯强迫你把这个 cube 扔到一个熔炉里去

1512
00:51:54,000 --> 00:52:00,000
然后你发现自己无论如何都只能把这个 cube 扔进熔炉里面

1513
00:52:00,000 --> 00:52:02,000
然后才能过这个 test chamber

1514
00:52:02,000 --> 00:52:04,000
然后当你把那个 cube 扔进去之后

1515
00:52:04,000 --> 00:52:06,000
格拉道斯对你说

1516
00:52:06,000 --> 00:52:11,000
你把它扔进去的速度比其他 90%的人都快

1517
00:52:11,000 --> 00:52:15,000
是挺黑的

1518
00:52:15,000 --> 00:52:17,000
对里面的对白

1519
00:52:17,000 --> 00:52:20,000
我觉得这个是游戏最有魅力的地方

1520
00:52:20,000 --> 00:52:21,000
对

1521
00:52:21,000 --> 00:52:22,000
它通过一种非常

1522
00:52:22,000 --> 00:52:24,000
就是怎么说

1523
00:52:24,000 --> 00:52:29,000
dehumanization 的方式来让你觉得自己是一个 test object

1524
00:52:29,000 --> 00:52:32,000
这个人工智能根本不在乎你是谁

1525
00:52:32,000 --> 00:52:35,000
你在其他游戏里面你是主角

1526
00:52:35,000 --> 00:52:38,000
但在这里面你是一个是任人摆布的这么一个角色

1527
00:52:38,000 --> 00:52:41,000
而且就里面的那种对白的那种

1528
00:52:41,000 --> 00:52:41,000
就是你自己的角色是一个人物的角色

1529
00:52:41,000 --> 00:52:43,000
就是在那个 AI 给你对话的那种语气

1530
00:52:43,000 --> 00:52:45,000
不知道怎么回事

1531
00:52:45,000 --> 00:52:46,000
我老是想起你

1532
00:52:46,000 --> 00:52:48,000
想起你说话的感觉

1533
00:52:48,000 --> 00:52:49,000
真的假的

1534
00:52:49,000 --> 00:52:51,000
超级好超级 match

1535
00:52:51,000 --> 00:52:56,000
你是说格拉道斯还是说后面的那个 Whitley

1536
00:52:56,000 --> 00:52:58,000
格拉道斯就已经是这样

1537
00:52:58,000 --> 00:53:01,000
就觉得很有意思

1538
00:53:01,000 --> 00:53:02,000
你不觉得吗

1539
00:53:03,000 --> 00:53:10,000
其实我觉得那个掉掉以后

1540
00:53:10,000 --> 00:53:11,000
我们也可以经常拿来用的

1541
00:53:11,000 --> 00:53:14,000
我觉得适合我们这个节目

1542
00:53:14,000 --> 00:53:15,000
I don't blame you

1543
00:53:15,000 --> 00:53:17,000
no hard feelings

1544
00:53:17,000 --> 00:53:19,000
对

1545
00:53:19,000 --> 00:53:22,000
Torrent 和格拉道斯其实同一个人配音的

1546
00:53:23,000 --> 00:53:23,000
啊

1547
00:53:23,000 --> 00:53:24,000
怪不得

1548
00:53:24,000 --> 00:53:27,000
等下 Torrent 有台词吗

1549
00:53:27,000 --> 00:53:27,000
有啊

1550
00:53:27,000 --> 00:53:30,000
就是 where are you

1551
00:53:30,000 --> 00:53:31,000
啊

1552
00:53:31,000 --> 00:53:32,000
对

1553
00:53:32,000 --> 00:53:35,000
no hard feelings

1554
00:53:35,000 --> 00:53:39,000
好像唱歌也是他吧

1555
00:53:39,000 --> 00:53:40,000
对

1556
00:53:40,000 --> 00:53:40,000
唱歌当然是他

1557
00:53:40,000 --> 00:53:41,000
对

1558
00:53:41,000 --> 00:53:42,000
这个声音超好听的

1559
00:53:42,000 --> 00:53:43,000
嗯

1560
00:53:43,000 --> 00:53:44,000
嗯

1561
00:53:44,000 --> 00:53:44,000
对

1562
00:53:44,000 --> 00:53:45,000
当然的

1563
00:53:45,000 --> 00:53:47,000
对回到我们的内核恐慌

1564
00:53:47,000 --> 00:53:49,000
掉进这个

1565
00:53:49,000 --> 00:53:52,000
有一旦变身成 gamer 就变不回来了

1566
00:53:52,000 --> 00:53:53,000
嗯

1567
00:53:53,000 --> 00:53:53,000
呃

1568
00:53:53,000 --> 00:53:55,000
回到内核恐慌

1569
00:53:55,000 --> 00:53:55,000
对

1570
00:53:55,000 --> 00:53:57,000
为什么我们要选择这个

1571
00:53:57,000 --> 00:53:59,000
或者说我为什么要选择 portal 的主题曲来

1572
00:53:59,000 --> 00:54:00,000
做

1573
00:54:00,000 --> 00:54:01,000
嗯

1574
00:54:01,000 --> 00:54:03,000
内核恐慌主题曲呢

1575
00:54:03,000 --> 00:54:03,000
我

1576
00:54:03,000 --> 00:54:04,000
呃

1577
00:54:04,000 --> 00:54:05,000
就是因为我觉得

1578
00:54:05,000 --> 00:54:06,000
呃

1579
00:54:06,000 --> 00:54:08,000
portal 的这个剧情设定啊

1580
00:54:08,000 --> 00:54:08,000
就是

1581
00:54:08,000 --> 00:54:10,000
artificial intelligence

1582
00:54:10,000 --> 00:54:10,000
呃

1583
00:54:10,000 --> 00:54:11,000
wint man

1584
00:54:11,000 --> 00:54:11,000
at

1585
00:54:11,000 --> 00:54:12,000
哈哈哈

1586
00:54:12,000 --> 00:54:13,000
跟呃

1587
00:54:13,000 --> 00:54:15,000
kernel panic 多少有点关联

1588
00:54:15,000 --> 00:54:15,000
对

1589
00:54:15,000 --> 00:54:18,000
就就比如说这个内核恐慌呃

1590
00:54:18,000 --> 00:54:19,000
portal 里面

1591
00:54:19,000 --> 00:54:22,000
你也会听到比如说那个系统

1592
00:54:22,000 --> 00:54:23,000
报错说啊

1593
00:54:23,000 --> 00:54:24,000
core

1594
00:54:24,000 --> 00:54:25,000
core corruption

1595
00:54:25,000 --> 00:54:26,000
at 100%

1596
00:54:26,000 --> 00:54:27,000
哈哈哈

1597
00:54:27,000 --> 00:54:28,000
就

1598
00:54:28,000 --> 00:54:30,000
和内核恐慌多少有点

1599
00:54:30,000 --> 00:54:35,000
而且你在游戏里面是是 literally 把那个

1600
00:54:35,000 --> 00:54:36,000
呃

1601
00:54:36,000 --> 00:54:37,000
把

1602
00:54:37,000 --> 00:54:39,000
glados 身上的 core 一个一个摘下来

1603
00:54:39,000 --> 00:54:41,000
然后然后 dump 到那个

1604
00:54:41,000 --> 00:54:42,000
那个容颅里面去

1605
00:54:42,000 --> 00:54:44,000
对真正的 core dump

1606
00:54:44,000 --> 00:54:45,000
对真正的 core dump

1607
00:54:45,000 --> 00:54:46,000
哈哈哈

1608
00:54:46,000 --> 00:54:47,000
呃

1609
00:54:47,000 --> 00:54:48,000
其实这要解释啊

1610
00:54:48,000 --> 00:54:52,000
这个 core 和那个 core 还此 core 非比 core

1611
00:54:52,000 --> 00:54:52,000
对

1612
00:54:52,000 --> 00:54:53,000
嗯

1613
00:54:53,000 --> 00:54:54,000
哎为什么

1614
00:54:54,000 --> 00:54:57,000
为什么 core dump 要叫 core dump

1615
00:54:57,000 --> 00:54:59,000
core 是来自于哪儿

1616
00:54:59,000 --> 00:55:00,000
kernel

1617
00:55:00,000 --> 00:55:00,000
就 core

1618
00:55:00,000 --> 00:55:01,000
kern

1619
00:55:01,000 --> 00:55:06,000
就已经有呃两位听众把我们的节目叫做叫成硬核恐慌

1620
00:55:06,000 --> 00:55:07,000
对

1621
00:55:07,000 --> 00:55:08,000
hardcore panic

1622
00:55:08,000 --> 00:55:10,000
哈哈哈

1623
00:55:10,000 --> 00:55:10,000
好 panic

1624
00:55:10,000 --> 00:55:11,000
啊

1625
00:55:11,000 --> 00:55:12,000
哈哈哈

1626
00:55:12,000 --> 00:55:12,000
哈哈哈

1627
00:55:12,000 --> 00:55:14,000
有有有 soft

1628
00:55:14,000 --> 00:55:15,000
有 panic

1629
00:55:15,000 --> 00:55:19,000
因为因为我们的那个节目介绍里面有提到这两个词嘛

1630
00:55:19,000 --> 00:55:26,000
然后一一想起来可能就一下就不明白这个组合的顺序也也挺有也挺就合乎

1631
00:55:26,000 --> 00:55:28,000
就这个错误还挺常见的

1632
00:55:28,000 --> 00:55:29,000
这些嗯

1633
00:55:29,000 --> 00:55:37,000
对如果呃如果有这个不那么 hardcore 的听众需要呃再听我们节目的话呢

1634
00:55:37,000 --> 00:55:38,000
大概还是解释一下吧

1635
00:55:38,000 --> 00:55:40,000
就是 hardcore 这个词其实来自最早

1636
00:55:40,000 --> 00:55:42,000
应该是来自于音乐界吧

1637
00:55:42,000 --> 00:55:45,000
就是 hardcore 是指比较呃

1638
00:55:45,000 --> 00:55:53,000
直接粗暴疯狂程度更程度更强烈的东西

1639
00:55:53,000 --> 00:55:54,000
就是音乐

1640
00:55:54,000 --> 00:55:55,000
那么比如说 hardcore rock

1641
00:55:55,000 --> 00:55:58,000
或者是 hardcore metal

1642
00:55:58,000 --> 00:56:05,000
就是非常强调那个呃这种由这种音乐形式的纯粹性和激烈性的

1643
00:56:05,000 --> 00:56:09,000
嗯嗯然后这个词渐渐呃

1644
00:56:09,000 --> 00:56:13,000
延伸到了就是他最开始是音乐的呃流派

1645
00:56:13,000 --> 00:56:14,000
就是装的一种

1646
00:56:14,000 --> 00:56:16,000
但是这个词渐渐呃

1647
00:56:16,000 --> 00:56:18,000
延伸到了日常用语里面

1648
00:56:18,000 --> 00:56:27,000
就是形容某种事情非常的强烈或者是比酷更加激烈程度很高的一种一种状态

1649
00:56:27,000 --> 00:56:28,000
就是 hardcore

1650
00:56:28,000 --> 00:56:31,000
比如说你可以说我是一个 hardcore 的果粉

1651
00:56:31,000 --> 00:56:33,000
嗯或者是我是个 hardcore 的 chema programmer

1652
00:56:33,000 --> 00:56:42,000
嗯然后这个词还还被还被呃逆向衍生出了 softcore

1653
00:56:42,000 --> 00:56:53,000
嗯这种这种衍生词就好像 hamburger 被派生出什么 cheeseburgerITH 當然 U

1654
00:56:53,000 --> 00:57:01,000
但是 hardcore 跟 er techno 是完全没有关系的两件事情

1655
00:57:01,000 --> 00:57:03,000
的 kernel 在计算机方面

1656
00:57:03,000 --> 00:57:07,000
一般指操作系统里面

1657
00:57:07,000 --> 00:57:09,000
直接和硬件相关的那部分

1658
00:57:09,000 --> 00:57:12,000
或者说直接管理

1659
00:57:12,000 --> 00:57:16,000
你平时作为一个用户

1660
00:57:16,000 --> 00:57:17,000
所用到的程序的程序

1661
00:57:17,000 --> 00:57:20,000
对不知道这样解释清楚了没有

1662
00:57:20,000 --> 00:57:21,000
但总之

1663
00:57:21,000 --> 00:57:24,000
但我觉得可能这里混淆的是

1664
00:57:24,000 --> 00:57:26,000
因为 hardcore 里面有 core 这个概念

1665
00:57:26,000 --> 00:57:29,000
然后我们马上要说 core dump

1666
00:57:29,000 --> 00:57:30,000
然后又会有个 core

1667
00:57:30,000 --> 00:57:32,000
但其实这个 core 跟那个 core 是没有关系

1668
00:57:32,000 --> 00:57:34,000
对 core dump 是

1669
00:57:34,000 --> 00:57:40,000
是程序出错之后的一种行为

1670
00:57:40,000 --> 00:57:44,000
就是尤其是在 unix 下面

1671
00:57:44,000 --> 00:57:47,000
有些程序如果它出错了的话

1672
00:57:47,000 --> 00:57:51,000
它会把自己在内存之中的执行状态

1673
00:57:51,000 --> 00:57:54,000
存储在硬盘上面

1674
00:57:54,000 --> 00:57:57,000
或者是以某种方式呈现给你

1675
00:57:57,000 --> 00:57:57,000
让你可以

1676
00:57:57,000 --> 00:58:00,000
这个你设置程序

1677
00:58:00,000 --> 00:58:01,000
让程序员可以去

1678
00:58:01,000 --> 00:58:02,000
呃

1679
00:58:02,000 --> 00:58:06,000
研究这件事情的案发现场

1680
00:58:06,000 --> 00:58:06,000
对

1681
00:58:06,000 --> 00:58:09,000
然后这个这个这个行为叫 core dump

1682
00:58:09,000 --> 00:58:11,000
可是为什么要叫 core dump 呢

1683
00:58:11,000 --> 00:58:16,000
因为这个 core 来自于早期的一种叫做磁芯存储器的东西

1684
00:58:16,000 --> 00:58:18,000
就是内存的祖宗

1685
00:58:18,000 --> 00:58:20,000
现代内存的祖宗

1686
00:58:20,000 --> 00:58:20,000
对

1687
00:58:20,000 --> 00:58:23,000
对什么是磁芯存储器呢

1688
00:58:23,000 --> 00:58:24,000
就是简单来说

1689
00:58:24,000 --> 00:58:28,000
就是把导线绕在磁圈上面

1690
00:58:28,000 --> 00:58:28,000
磁铁

1691
00:58:28,000 --> 00:58:29,000
对

1692
00:58:29,000 --> 00:58:31,000
就是一个磁的环

1693
00:58:31,000 --> 00:58:32,000
然后你在上面绕导线

1694
00:58:32,000 --> 00:58:33,000
然后 somehow someway

1695
00:58:33,000 --> 00:58:36,000
它就可以存储有磁和无磁两种状态

1696
00:58:36,000 --> 00:58:36,000
对

1697
00:58:36,000 --> 00:58:39,000
就可以就这个呃

1698
00:58:39,000 --> 00:58:40,000
就可以表示 0 和 1 了吗

1699
00:58:40,000 --> 00:58:42,000
对早期的内存就是这样做出来

1700
00:58:42,000 --> 00:58:46,000
我记得我还读过一篇考古文章说

1701
00:58:46,000 --> 00:58:52,000
我国早期五六十年代呃自行研自行研制计算机的时候

1702
00:58:52,000 --> 00:58:57,000
还计算机科学家们的日常生活日常工作之一就是绕磁芯

1703
00:58:57,000 --> 00:59:01,000
就是把导线在在在磁铁上面绕

1704
00:59:01,000 --> 00:59:04,000
然后做出一个做出一块内存来

1705
00:59:04,000 --> 00:59:04,000
对

1706
00:59:04,000 --> 00:59:06,000
而且这个对这个内存有多大呢

1707
00:59:06,000 --> 00:59:08,000
就是你绕一个磁芯

1708
00:59:08,000 --> 00:59:10,000
你可以你把导线在磁铁上缠一圈

1709
00:59:10,000 --> 00:59:12,000
你可以绕出一个 beat 来

1710
00:59:12,000 --> 00:59:16,000
然后可以想象一下你要绕出 16 k 需要绕多

1711
00:59:16,000 --> 00:59:21,000
他一个磁芯大概就跟一个就一枚戒指的那个大小差不多

1712
00:59:21,000 --> 00:59:21,000
对

1713
00:59:21,000 --> 00:59:24,000
然后你要把这么小的东西绕上几千个

1714
00:59:24,000 --> 00:59:27,000
然后你才有了几 k 的内存

1715
00:59:27,000 --> 00:59:29,000
8 k 的内存可以用

1716
00:59:29,000 --> 00:59:29,000
对

1717
00:59:29,000 --> 00:59:31,000
就所以所以其实啊

1718
00:59:31,000 --> 00:59:31,000
这个是

1719
00:59:31,000 --> 00:59:33,000
大家可以去找一下这个

1720
00:59:33,000 --> 00:59:36,000
我们待会给个连接在一个 notes 里面

1721
00:59:36,000 --> 00:59:38,000
你可以去找一下相关的图片来看

1722
00:59:38,000 --> 00:59:41,000
反正这个视觉上就让你想起在编辫子的感觉

1723
00:59:41,000 --> 00:59:41,000
对

1724
00:59:41,000 --> 00:59:43,000
其实还是相当正常的

1725
00:59:43,000 --> 00:59:45,000
就是你你要仔细想象一下

1726
00:59:45,000 --> 00:59:47,000
当初那么大的一个东西

1727
00:59:47,000 --> 00:59:51,000
现在缩在可能你肉眼看不见的一个一个一个尺寸里面

1728
00:59:51,000 --> 00:59:51,000
对

1729
00:59:51,000 --> 00:59:55,000
而且是仅仅过去了五六十年而已

1730
00:59:55,000 --> 00:59:56,000
几十进步

1731
00:59:56,000 --> 00:59:57,000
对

1732
00:59:57,000 --> 01:00:00,000
但是这个 core 这个词

1733
01:00:00,000 --> 01:00:01,000
就是 magnetic

1734
01:00:01,000 --> 01:00:04,000
magnetic core 里面的这个 core

1735
01:00:04,000 --> 01:00:05,000
一直延续到今天

1736
01:00:05,000 --> 01:00:07,000
就是有时候还是会说 core dump

1737
01:00:07,000 --> 01:00:11,000
那么这个 core 最开始的来源就是就是源自于此

1738
01:00:11,000 --> 01:00:15,000
就所以所以其实 core dump 就是内存镜像导出来而已

1739
01:00:15,000 --> 01:00:16,000
对

1740
01:00:16,000 --> 01:00:17,000
差不多这个意思

1741
01:00:17,000 --> 01:00:18,000
没错

1742
01:00:18,000 --> 01:00:19,000
然后提到 magnetic core

1743
01:00:19,000 --> 01:00:21,000
不能不提到一个奇人

1744
01:00:21,000 --> 01:00:23,000
就是一个一个华人叫王安

1745
01:00:23,000 --> 01:00:24,000
他是

1746
01:00:24,000 --> 01:00:26,000
王安不是李安

1747
01:00:26,000 --> 01:00:27,000
对

1748
01:00:27,000 --> 01:00:28,000
王安不是李安

1749
01:00:28,000 --> 01:00:30,000
现在的王安是

1750
01:00:30,000 --> 01:00:31,000
现在李安师徒

1751
01:00:31,000 --> 01:00:32,000
输出软文化

1752
01:00:32,000 --> 01:00:35,000
但那个时候的王安是一个传奇人物

1753
01:00:35,000 --> 01:00:37,000
他是民国

1754
01:00:37,000 --> 01:00:39,000
一九一几年应该是出生在中

1755
01:00:39,000 --> 01:00:41,000
出生在中国吧

1756
01:00:41,000 --> 01:00:42,000
应该是中国出生的

1757
01:00:42,000 --> 01:00:43,000
他是中国出生的

1758
01:00:43,000 --> 01:00:44,000
对

1759
01:00:44,000 --> 01:00:45,000
然后他去美国

1760
01:00:45,000 --> 01:00:46,000
啊

1761
01:00:46,000 --> 01:00:50,000
三炮三位成了一个计算机科学家

1762
01:00:50,000 --> 01:00:51,000
对

1763
01:00:51,000 --> 01:00:57,000
他对于我们刚才说的磁性这种东西做出了巨大的贡献

1764
01:00:57,000 --> 01:00:58,000
他可能有

1765
01:00:58,000 --> 01:00:59,000
呃

1766
01:00:59,000 --> 01:01:01,000
三四十项专利和磁性相关的东西

1767
01:01:01,000 --> 01:01:02,000
嗯

1768
01:01:02,000 --> 01:01:04,000
然后一九五六年的时候

1769
01:01:04,000 --> 01:01:07,000
IBM 公司用五十万美元从他手里买了专利

1770
01:01:07,000 --> 01:01:10,000
一九五六年的五十万美元是个什么概念

1771
01:01:10,000 --> 01:01:11,000
大概相当于多少

1772
01:01:11,000 --> 01:01:12,000
得算一下

1773
01:01:12,000 --> 01:01:13,000
对

1774
01:01:13,000 --> 01:01:14,000
算上通货膨胀的话

1775
01:01:14,000 --> 01:01:16,000
是一个天文数字

1776
01:01:16,000 --> 01:01:17,000
得上亿了吧

1777
01:01:17,000 --> 01:01:17,000
估计

1778
01:01:17,000 --> 01:01:18,000
对

1779
01:01:18,000 --> 01:01:23,000
然后他当时创建了王安电脑

1780
01:01:23,000 --> 01:01:26,000
在美国处理的出的这个呃

1781
01:01:27,000 --> 01:01:30,000
出的设备叫做自处理器

1782
01:01:30,000 --> 01:01:31,000
其实就是个打字机

1783
01:01:31,000 --> 01:01:31,000
嗯

1784
01:01:31,000 --> 01:01:31,000
嗯

1786
01:02:01,000 --> 01:02:04,000
,就是就是王安的王安创业公司

1787
01:02:04,000 --> 01:02:05,000
嗯

1788
01:02:05,000 --> 01:02:07,000
这个可能这个在国内有有流行过吗

1789
01:02:07,000 --> 01:02:10,000
好像在九十年代初的时候好像有见过吧

1790
01:02:10,000 --> 01:02:13,000
那个时候好像是有一个自处理器的

1791
01:02:13,000 --> 01:02:17,000
但是那个自处理器是王安电脑出的吗

1792
01:02:18,000 --> 01:02:27,000
我不但但我记得在国内好像我三号在哪里有印象说发现到国内也是有一段时间有进口过

1793
01:02:27,000 --> 01:02:29,000
那个时候应该是我 OK

1794
01:02:29,000 --> 01:02:31,000
那个时候应该是四通吧

1795
01:02:31,000 --> 01:02:33,000
四通比较啊

1796
01:02:33,000 --> 01:02:34,000
那个是国产的吗

1797
01:02:34,000 --> 01:02:34,000
但是对啊

1798
01:02:34,000 --> 01:02:37,000
王是没有进就有产品进到中国吗

1799
01:02:37,000 --> 01:02:39,000
好像有嗯

1800
01:02:39,000 --> 01:02:42,000
这个我不知道很确定的有点有点久了

1801
01:02:42,000 --> 01:02:47,000
对总之大概六七十年代的时候王安电脑是非常非常了不起的一个公司

1802
01:02:47,000 --> 01:02:51,000
而且当时他基本上是以一己之力对挑 IBM

1803
01:02:51,000 --> 01:02:53,000
哈哈哈

1804
01:02:53,000 --> 01:02:55,000
然后来挂掉了是吧

1805
01:02:55,000 --> 01:02:58,000
对很遗憾他没有赶上 Personal computer 的大潮

1806
01:02:58,000 --> 01:03:03,000
就是他比较他比较居这叫刚愎自用吧

1807
01:03:03,000 --> 01:03:10,000
对他觉得个人相机和就微型计算机和每分相比

1808
01:03:10,000 --> 01:03:13,000
人就是玩笑一样的东西

1809
01:03:13,000 --> 01:03:15,000
为什么要花费精力在这种东西上面

1810
01:03:15,000 --> 01:03:18,000
但是等到他回过神来的时候已经太晚了

1811
01:03:18,000 --> 01:03:28,000
对然后整个帝国就这么垮掉还是什么见识见不够有远见对如果他能够对我们就不要继续开脑洞了

1812
01:03:28,000 --> 01:03:34,000
总之王安这么一个奇人还是感兴趣的话有考古兴趣的话可以去了解一下

1813
01:03:34,000 --> 01:03:39,000
对然后选 Personal 另外一个旅游也就是他跟他是一个他的主角是个女性吧

1814
01:03:39,000 --> 01:03:43,000
我觉得这一点还挺对值得为此

1815
01:03:43,000 --> 01:03:50,000
因为我也不知道就在以女性为主角的游戏真的不多啊

1816
01:03:50,000 --> 01:03:56,000
你可能除了那些女性向的有就专门做给女生玩的游戏之外

1817
01:03:56,000 --> 01:03:57,000
嗯

1818
01:03:57,000 --> 01:04:00,000
专门找一个女性来做主角的真的绝无尽有

1819
01:04:00,000 --> 01:04:01,000
古墓丽影

1820
01:04:01,000 --> 01:04:04,000
嗯对而且古墓丽影是一个非常

1821
01:04:04,000 --> 01:04:13,000
就是物化了的在最开始的时候古墓丽影是一个非常就做出来给男人看的一个一个一个一个一个一个模型

1822
01:04:13,000 --> 01:04:16,000
但是最新一代古墓丽影大不相同了

1823
01:04:16,000 --> 01:04:23,000
但是古墓丽影最开始的时候就是一个一个膝腰长腿大胸的妹子手里面拿了两把枪

1824
01:04:23,000 --> 01:04:23,000
然后出现在

1825
01:04:23,000 --> 01:04:25,000
一直在你面前扭啊扭

1826
01:04:25,000 --> 01:04:26,000
对

1827
01:04:26,000 --> 01:04:27,000
这出现在大众软件的

1828
01:04:27,000 --> 01:04:27,000
封面上面

1829
01:04:27,000 --> 01:04:32,000
然后让你基本上就是只有男人会去会去看的这个

1830
01:04:32,000 --> 01:04:34,000
不是后来有人出了那个裸体版吗

1831
01:04:34,000 --> 01:04:36,000
对啊

1832
01:04:36,000 --> 01:04:37,000
黑历史

1833
01:04:39,000 --> 01:04:44,000
我们是怎么能接受那个时代六百四十四百八十分的下一个裸体

1834
01:04:44,000 --> 01:04:44,000
对啊

1835
01:04:44,000 --> 01:04:46,000
上次我们还我还跟罗尔吐槽过

1836
01:04:46,000 --> 01:04:49,000
他那个就那个时候的 3 D 特效吗

1837
01:04:49,000 --> 01:04:54,000
那个会出来的那个肌肉都是一坨一坨一坨有棱角的吧

1838
01:04:54,000 --> 01:04:54,000
对啊

1839
01:04:54,000 --> 01:04:56,000
你会看他的那个胸是一个三角一个

1840
01:04:56,000 --> 01:04:57,000
一个圆形的腿啊

1841
01:04:57,000 --> 01:04:57,000
圆锥体

1842
01:04:57,000 --> 01:04:59,000
哪是圆锥

1843
01:04:59,000 --> 01:05:01,000
是一个是一个三角四角

1844
01:05:01,000 --> 01:05:06,000
反正就是很奇怪的一个一个一个画质

1845
01:05:06,000 --> 01:05:08,000
但现在就大不相同

1846
01:05:08,000 --> 01:05:11,000
不过 portal 里面的是看不见

1847
01:05:11,000 --> 01:05:14,000
有一种场合你可以看见

1848
01:05:14,000 --> 01:05:16,000
对你在自己身后开一个 portal

1849
01:05:16,000 --> 01:05:18,000
对你在自己屁股后面开个 portal

1850
01:05:18,000 --> 01:05:20,000
或者转角的时候能够看见一个侧脸

1851
01:05:20,000 --> 01:05:22,000
但你肯定是看不见全身的

1852
01:05:22,000 --> 01:05:23,000
就可以端详自己

1853
01:05:23,000 --> 01:05:24,000
对

1854
01:05:24,000 --> 01:05:27,000
然后这个女性也被刻画的非常

1855
01:05:27,000 --> 01:05:27,000
对

1856
01:05:27,000 --> 01:05:33,000
非常非常就像整个游戏的这个这个主线

1857
01:05:33,000 --> 01:05:37,000
就是非常的 alienated

1858
01:05:37,000 --> 01:05:39,000
就是非常不像一个人

1859
01:05:39,000 --> 01:05:39,000
对

1860
01:05:39,000 --> 01:05:41,000
他从头到尾都没有一句话

1861
01:05:41,000 --> 01:05:42,000
对吧

1862
01:05:42,000 --> 01:05:42,000
对

1863
01:05:42,000 --> 01:05:46,000
这个倒是在 portal 的 portal

1864
01:05:46,000 --> 01:05:50,000
其实他是处在那个 half life 的世界里面

1865
01:05:50,000 --> 01:05:52,000
half life 的就是半条命

1866
01:05:52,000 --> 01:05:54,000
包括说半衰期

1867
01:05:54,000 --> 01:05:56,000
正确翻译方法是半衰期的这个主角

1868
01:05:57,000 --> 01:06:01,000
这个主角 Golden Freeman 也是思绪之中没有说过一句话了

1869
01:06:01,000 --> 01:06:07,000
就是 Valve 有把主角做成这种沉默的主角的传统

1870
01:06:07,000 --> 01:06:09,000
当然他们可能自己也在取笑这一点

1871
01:06:09,000 --> 01:06:12,000
就是在 portal 2 的有一个地方

1872
01:06:12,000 --> 01:06:16,000
他会让你说 N-A 来来说 I'mok

1873
01:06:16,000 --> 01:06:18,000
然后你 N-A 发现你自己跳起来了

1874
01:06:18,000 --> 01:06:23,000
然后然后和屏幕上的指示完全相反

1875
01:06:23,000 --> 01:06:25,000
然后那个人工智能会取笑你说哦

1876
01:06:25,000 --> 01:06:26,000
你很会跳

1877
01:06:26,000 --> 01:06:27,000
我看到了

1878
01:06:27,000 --> 01:06:27,000
好吧

1879
01:06:27,000 --> 01:06:28,000
好吧

1880
01:06:28,000 --> 01:06:29,000
我不会再像

1881
01:06:29,000 --> 01:06:31,000
试图让你说话

1882
01:06:31,000 --> 01:06:33,000
对

1883
01:06:33,000 --> 01:06:35,000
从来没有说过任何

1884
01:06:35,000 --> 01:06:36,000
任何事情

1885
01:06:36,000 --> 01:06:37,000
而且

1886
01:06:37,000 --> 01:06:39,000
他跟游戏里面

1887
01:06:39,000 --> 01:06:41,000
也没有什么特别的交互

1888
01:06:41,000 --> 01:06:43,000
交互都是拿那个

1889
01:06:43,000 --> 01:06:45,000
那个 POTO 枪去吸起来

1890
01:06:45,000 --> 01:06:46,000
对

1891
01:06:46,000 --> 01:06:48,000
反正就还蛮奇怪

1892
01:06:48,000 --> 01:06:50,000
但是我觉得这个游戏最大的

1893
01:06:50,000 --> 01:06:52,000
最大的可圈可点之处

1894
01:06:52,000 --> 01:06:53,000
还是 Glados

1895
01:06:53,000 --> 01:06:53,000
就是

1896
01:06:53,000 --> 01:06:56,000
可能人在

1897
01:06:56,000 --> 01:06:57,000
所有的游戏里面

1898
01:06:57,000 --> 01:06:59,000
最让人印象深刻的

1899
01:06:59,000 --> 01:07:00,000
AI

1900
01:07:00,000 --> 01:07:01,000
对

1901
01:07:01,000 --> 01:07:03,000
最让人印象深刻的 AI

1902
01:07:03,000 --> 01:07:04,000
有两个

1903
01:07:04,000 --> 01:07:04,000
一个是

1904
01:07:04,000 --> 01:07:06,000
而且两个碰巧都是女性

1905
01:07:06,000 --> 01:07:07,000
一个是

1906
01:07:07,000 --> 01:07:09,000
Halo 里面的 Cortana

1907
01:07:09,000 --> 01:07:10,000
或者是微软

1908
01:07:10,000 --> 01:07:12,000
如果你不玩 Halo 的话

1909
01:07:12,000 --> 01:07:13,000
微软最新出的那个 Cortana

1910
01:07:13,000 --> 01:07:15,000
就是来自于这个游戏里面的 Cortana

1911
01:07:15,000 --> 01:07:17,000
但那个 Cortana 是有

1912
01:07:17,000 --> 01:07:18,000
是有形状的

1913
01:07:18,000 --> 01:07:18,000
而且

1914
01:07:18,000 --> 01:07:20,000
就是是有形体的

1915
01:07:20,000 --> 01:07:22,000
就是你可以看到一个东西

1916
01:07:22,000 --> 01:07:23,000
当然这个东西只是它

1917
01:07:23,000 --> 01:07:25,000
把自己

1918
01:07:25,000 --> 01:07:26,000
把自己

1919
01:07:26,000 --> 01:07:27,000
你可以理解为

1920
01:07:27,000 --> 01:07:28,000
它是它的交互界面吧

1921
01:07:28,000 --> 01:07:32,000
但至少是个有形体的东西

1922
01:07:32,000 --> 01:07:34,000
而且这个形体也是

1923
01:07:34,000 --> 01:07:36,000
被逐渐物化了

1924
01:07:36,000 --> 01:07:37,000
就是第一代 Cortana

1925
01:07:37,000 --> 01:07:39,000
看起来没有什么性别特征

1926
01:07:39,000 --> 01:07:41,000
你只能一期看出来是个女的

1927
01:07:41,000 --> 01:07:42,000
但是在最近的

1928
01:07:42,000 --> 01:07:45,000
最近一部 Halo 里面

1929
01:07:45,000 --> 01:07:48,000
Cortana 也是被塑造成了一个

1930
01:07:48,000 --> 01:07:50,000
精细的大胸长腿的

1931
01:07:50,000 --> 01:07:51,000
对

1932
01:07:51,000 --> 01:07:53,000
对

1933
01:07:53,000 --> 01:07:54,000
,还是什么性别

1934
01:07:54,000 --> 01:07:56,000
其实还是挺严重的

1935
01:07:56,000 --> 01:07:56,000
没错

1936
01:07:56,000 --> 01:07:59,000
然后但是 Glados 就完全不一样

1937
01:07:59,000 --> 01:08:00,000
Glados 是一个

1938
01:08:00,000 --> 01:08:01,000
就是一个机器

1939
01:08:01,000 --> 01:08:03,000
它只不过有一个女人的声音而已

1940
01:08:03,000 --> 01:08:05,000
但是它的 personality 是

1941
01:08:05,000 --> 01:08:07,000
中性的吧

1942
01:08:07,000 --> 01:08:09,000
不,它的 personality 是

1943
01:08:09,000 --> 01:08:11,000
就是它的性格

1944
01:08:11,000 --> 01:08:13,000
它最开始其实是由

1945
01:08:13,000 --> 01:08:15,000
那个 Uptra Science 的老板

1946
01:08:15,000 --> 01:08:16,000
手下的一个叫做

1947
01:08:16,000 --> 01:08:19,000
叫 Caroline 的助手

1948
01:08:19,000 --> 01:08:21,000
他把他的性格特征

1949
01:08:21,000 --> 01:08:23,000
进入到了

1950
01:08:23,000 --> 01:08:24,000
注入到了 Glados 里面

1951
01:08:24,000 --> 01:08:25,000
然后 Halo 2 里面

1952
01:08:25,000 --> 01:08:26,000
我记得有一地方

1953
01:08:26,000 --> 01:08:28,000
他主动把这一段

1954
01:08:28,000 --> 01:08:30,000
回忆给删掉了

1955
01:08:30,000 --> 01:08:30,000
就是他

1956
01:08:30,000 --> 01:08:32,000
他抛弃了

1957
01:08:32,000 --> 01:08:35,000
作为那个曾经的人的回忆

1958
01:08:35,000 --> 01:08:40,000
关于 Halo 好像说的有点多了

1959
01:08:40,000 --> 01:08:41,000
但总之

1960
01:08:41,000 --> 01:08:45,000
我对这个游戏有非常深的感情在里面

1961
01:08:45,000 --> 01:08:48,000
所以也决定把它

1962
01:08:48,000 --> 01:08:51,000
作为我们节目的主题曲

1963
01:08:51,000 --> 01:08:51,000
然后

1964
01:08:51,000 --> 01:08:52,000
呃

1965
01:08:52,000 --> 01:08:52,000
呃

1966
01:08:52,000 --> 01:08:52,000
呃

1967
01:08:52,000 --> 01:08:53,000
呃

1968
01:08:53,000 --> 01:08:58,000
我们已经看过了这个曲子的作者

1969
01:08:58,000 --> 01:09:00,000
把他以呃

1970
01:09:00,000 --> 01:09:01,000
呃

1971
01:09:01,000 --> 01:09:03,000
创作公司的授权发布了出来

1972
01:09:03,000 --> 01:09:04,000
就是呃

1973
01:09:04,000 --> 01:09:08,000
这首曲子作者叫做 Jonathan Colton

1974
01:09:08,000 --> 01:09:10,000
然后他的协议

1975
01:09:10,000 --> 01:09:14,000
他的授权是 CC by

1976
01:09:14,000 --> 01:09:15,000
呃

1977
01:09:15,000 --> 01:09:16,000
NC

1978
01:09:16,000 --> 01:09:19,000
就是你必须用在在用到这首歌的时候

1979
01:09:19,000 --> 01:09:21,000
必须提到这个歌是谁写的

1980
01:09:21,000 --> 01:09:22,000
然后不能把它用作声音

1981
01:09:22,000 --> 01:09:23,000
嗯

1982
01:09:23,000 --> 01:09:23,000
嗯

1983
01:09:23,000 --> 01:09:24,000
嗯

1984
01:09:24,000 --> 01:09:26,000
我们应该不会把它用作上映度

1985
01:09:26,000 --> 01:09:29,000
但我们这个又不拿他卖来卖无所谓

1986
01:09:29,000 --> 01:09:31,000
对我们没有卖我们的节目啊

1987
01:09:31,000 --> 01:09:31,000
然后我们也

1988
01:09:31,000 --> 01:09:34,000
在可以预见的将来不会有

1989
01:09:34,000 --> 01:09:38,000
不会通过做 podcast 有什么足够多的收入

1990
01:09:38,000 --> 01:09:40,000
所以

1991
01:09:40,000 --> 01:09:41,000
对啊

1992
01:09:41,000 --> 01:09:41,000
不

1993
01:09:41,000 --> 01:09:43,000
你只要不是用他来牟利都可以吧

1994
01:09:43,000 --> 01:09:45,000
就是你做个什么小插曲

1995
01:09:45,000 --> 01:09:46,000
而且就算用了

1996
01:09:46,000 --> 01:09:47,000
因为是短时间

1997
01:09:47,000 --> 01:09:48,000
30 秒的也有那个

1998
01:09:48,000 --> 01:09:50,000
就哪怕是版权作品

1999
01:09:50,000 --> 01:09:51,000
你也是可以也是发

2000
01:09:51,000 --> 01:09:52,000
对

2001
01:09:52,000 --> 01:09:52,000
对

2002
01:09:52,000 --> 01:09:52,000
对

2003
01:09:52,000 --> 01:09:52,000
对

2004
01:09:52,000 --> 01:09:52,000
对

2005
01:09:52,000 --> 01:09:52,000
对

2006
01:09:52,000 --> 01:09:52,000
对

2007
01:09:52,000 --> 01:09:52,000
对

2008
01:09:52,000 --> 01:09:52,000
对

2009
01:09:52,000 --> 01:09:52,000
对

2010
01:09:52,000 --> 01:09:52,000
对

2011
01:09:52,000 --> 01:09:53,000
Morris

2012
01:09:53,000 --> 01:09:53,000
对

2013
01:09:53,000 --> 01:09:53,000
对

2014
01:09:53,000 --> 01:09:54,000
对

2015
01:09:54,000 --> 01:09:54,000
对

2016
01:09:54,000 --> 01:09:54,000
对

2017
01:09:54,000 --> 01:09:54,000
对

2018
01:09:54,000 --> 01:09:54,000
对

2019
01:09:54,000 --> 01:09:54,000
对

2020
01:09:54,000 --> 01:09:54,000
对

2021
01:09:54,000 --> 01:09:54,000
对

2022
01:09:54,000 --> 01:09:57,000
总之在 license 方面应该是没有什么问题

2023
01:09:57,000 --> 01:09:58,000
我们还是考虑到这一点

2024
01:09:58,000 --> 01:09:59,000
ok

2025
01:09:59,000 --> 01:10:01,000
所以从这一期开始

2026
01:10:01,000 --> 01:10:03,000
我们就有一个这个主题曲了

2027
01:10:03,000 --> 01:10:05,000
大家就不用一一开场就觉得

2028
01:10:05,000 --> 01:10:06,000
哎

2029
01:10:06,000 --> 01:10:06,000
什么

2030
01:10:06,000 --> 01:10:06,000
谁

2031
01:10:06,000 --> 01:10:07,000
对

2032
01:10:07,000 --> 01:10:10,000
不会定期听到我的

2033
01:10:10,000 --> 01:10:11,000
对

2034
01:10:11,000 --> 01:10:14,000
好

2035
01:10:14,000 --> 01:10:16,000
我们终于开始讲这一期的正题

2036
01:10:16,000 --> 01:10:17,000
对

2037
01:10:17,000 --> 01:10:21,000
其实我们本来是想把这个正题慢慢过渡过来的

2038
01:10:21,000 --> 01:10:22,000
就是

2039
01:10:22,000 --> 01:10:22,000
刚才

2040
01:10:22,000 --> 01:10:22,000
我们就想说

2041
01:10:22,000 --> 01:10:24,000
提到了 core dump

2042
01:10:24,000 --> 01:10:26,000
提到了人工智能

2043
01:10:26,000 --> 01:10:29,000
然后我们想要讲的

2044
01:10:29,000 --> 01:10:31,000
其实就是

2045
01:10:31,000 --> 01:10:32,000
那一段

2046
01:10:32,000 --> 01:10:34,000
generally

2047
01:10:34,000 --> 01:10:36,000
一个比较 general 的 form

2048
01:10:36,000 --> 01:10:38,000
就是生命周期管理

2049
01:10:38,000 --> 01:10:40,000
比如说你说 Porto

2050
01:10:40,000 --> 01:10:42,000
为什么要运行

2051
01:10:42,000 --> 01:10:45,000
他为什么要反复提到

2052
01:10:45,000 --> 01:10:46,000
science

2053
01:10:46,000 --> 01:10:48,000
或者说为什么要反复提到 test

2054
01:10:48,000 --> 01:10:50,000
其实

2055
01:10:50,000 --> 01:10:52,000
我觉得他多少有一点

2056
01:10:52,000 --> 01:10:53,000
就是在

2057
01:10:53,000 --> 01:10:55,000
在嘲弄或者说在

2058
01:10:55,000 --> 01:10:58,000
套用软件工程里面

2059
01:10:58,000 --> 01:11:00,000
不停的做测试

2060
01:11:00,000 --> 01:11:02,000
这样一个场景

2061
01:11:02,000 --> 01:11:02,000
QA 的

2062
01:11:02,000 --> 01:11:04,000
Quality Assurance

2063
01:11:04,000 --> 01:11:06,000
没事就在那里测

2064
01:11:06,000 --> 01:11:09,000
然后你可以理解为

2065
01:11:09,000 --> 01:11:11,000
他的测试是为了验证武器

2066
01:11:11,000 --> 01:11:13,000
或者是为了验证

2067
01:11:13,000 --> 01:11:14,000
PortoGun

2068
01:11:14,000 --> 01:11:18,000
或者说验证用户

2069
01:11:18,000 --> 01:11:20,000
在用 PortoGun 的时候能够想到什么事情

2070
01:11:20,000 --> 01:11:22,000
或者是做出什么样的行为

2071
01:11:22,000 --> 01:11:22,000
来

2072
01:11:22,000 --> 01:11:25,000
以此推进科学的发展

2073
01:11:25,000 --> 01:11:28,000
或者说推进 PortoGun 的完善

2074
01:11:28,000 --> 01:11:29,000
对

2075
01:11:29,000 --> 01:11:31,000
然后

2076
01:11:31,000 --> 01:11:34,000
这个其实就是生命周期管理的部分

2077
01:11:34,000 --> 01:11:36,000
但是我们可能不会

2078
01:11:36,000 --> 01:11:39,000
我们暂且先不从这么大的角度来说吧

2079
01:11:39,000 --> 01:11:41,000
就只是先从

2080
01:11:41,000 --> 01:11:44,000
比较小的

2081
01:11:44,000 --> 01:11:45,000
切入点来着眼

2082
01:11:45,000 --> 01:11:47,000
对

2083
01:11:47,000 --> 01:11:48,000
比如说

2084
01:11:48,000 --> 01:11:51,000
Porto 是个游戏对吧

2085
01:11:51,000 --> 01:11:51,000
对

2086
01:11:52,000 --> 01:11:54,000
但凡游戏都需要跑

2087
01:11:54,000 --> 01:11:56,000
但凡游戏就和所有程序一样

2088
01:11:56,000 --> 01:11:58,000
都需要跑在计算机上

2089
01:11:58,000 --> 01:11:59,000
然后跑在计算机上的时候

2090
01:11:59,000 --> 01:12:02,000
具体当我们说一个游戏

2091
01:12:02,000 --> 01:12:03,000
有一个程序在运行的时候

2092
01:12:03,000 --> 01:12:06,000
所指的到底是什么状态

2093
01:12:06,000 --> 01:12:08,000
其实就是

2094
01:12:08,000 --> 01:12:12,000
我们可以说一个程序在运行的时候

2095
01:12:12,000 --> 01:12:15,000
它活在内存里面

2096
01:12:15,000 --> 01:12:15,000
可以这么说

2097
01:12:15,000 --> 01:12:17,000
可以吧

2098
01:12:17,000 --> 01:12:17,000
我觉得

2099
01:12:17,000 --> 01:12:19,000
当一个程序活在内存里面的时候

2100
01:12:19,000 --> 01:12:21,000
我们就说它正在被运行了

2101
01:12:21,000 --> 01:12:21,000
就是

2102
01:12:21,000 --> 01:12:24,000
一个程序和一个进程的

2103
01:12:24,000 --> 01:12:26,000
具体差异是什么

2104
01:12:26,000 --> 01:12:27,000
那程序

2105
01:12:27,000 --> 01:12:29,000
一个进程就是一个活着的程序

2106
01:12:29,000 --> 01:12:31,000
那么程序活着的具体意义是什么

2107
01:12:31,000 --> 01:12:33,000
就是它在内存里面

2108
01:12:33,000 --> 01:12:34,000
并且正在被执行

2109
01:12:34,000 --> 01:12:35,000
或者它正在没有被执行

2110
01:12:35,000 --> 01:12:37,000
但它活在内存里面

2111
01:12:37,000 --> 01:12:39,000
对吧

2112
01:12:39,000 --> 01:12:43,000
所以要面临的一个最

2113
01:12:43,000 --> 01:12:44,000
就是日常我们面临的

2114
01:12:44,000 --> 01:12:46,000
最常见的一个问题是什么

2115
01:12:46,000 --> 01:12:48,000
就是内存的空间有限吗

2116
01:12:48,000 --> 01:12:48,000
对

2117
01:12:48,000 --> 01:12:50,000
就是内存不够怎么办

2118
01:12:50,000 --> 01:12:50,000
对

2119
01:12:50,000 --> 01:12:51,000
怎么办

2120
01:12:51,000 --> 01:12:53,000
这个现在可能还好一点

2121
01:12:53,000 --> 01:12:55,000
早期的时候特别明显

2122
01:12:55,000 --> 01:12:57,000
现在内存动辄就是什么

2123
01:12:57,000 --> 01:12:58,000
4 个 G 8 个 G

2124
01:12:58,000 --> 01:13:00,000
我电脑是 16 个 G 的那时候

2125
01:13:00,000 --> 01:13:01,000
对

2126
01:13:01,000 --> 01:13:02,000
那早期可能大概就多少

2127
01:13:02,000 --> 01:13:03,000
512 兆

2128
01:13:03,000 --> 01:13:05,000
128 兆的时候

2129
01:13:05,000 --> 01:13:07,000
经常被错误的

2130
01:13:07,000 --> 01:13:10,000
attribute 到 Bearguys 身上的名言是什么

2131
01:13:10,000 --> 01:13:12,000
任何电脑

2132
01:13:12,000 --> 01:13:15,000
640 K 的内存就足够了

2133
01:13:15,000 --> 01:13:15,000
是吧

2134
01:13:15,000 --> 01:13:17,000
其实不是他说的

2135
01:13:17,000 --> 01:13:17,000
对吧

2136
01:13:17,000 --> 01:13:19,000
其实不是他说的

2137
01:13:19,000 --> 01:13:19,000
而且

2138
01:13:19,000 --> 01:13:21,000
而且到底是什么

2139
01:13:21,000 --> 01:13:22,000
谁说的

2140
01:13:22,000 --> 01:13:23,000
好像也没有人找出来

2141
01:13:23,000 --> 01:13:26,000
反正就是反正他就被黑了

2142
01:13:26,000 --> 01:13:27,000
对

2143
01:13:27,000 --> 01:13:28,000
这个事情大家都喜欢黑他

2144
01:13:28,000 --> 01:13:30,000
跟他脱不了关系了

2145
01:13:30,000 --> 01:13:31,000
嗯

2146
01:13:31,000 --> 01:13:33,000
嗯

2147
01:13:33,000 --> 01:13:36,000
为什么 640 K 的内存就够了

2148
01:13:36,000 --> 01:13:38,000
他那个那个时候

2149
01:13:38,000 --> 01:13:40,000
九九几年吧

2150
01:13:40,000 --> 01:13:40,000
就是应该出

2151
01:13:40,000 --> 01:13:41,000
那确实啊

2152
01:13:41,000 --> 01:13:43,000
你想想那个时候多少

2153
01:13:43,000 --> 01:13:44,000
一个磁盘

2154
01:13:44,000 --> 01:13:45,000
不叫磁盘

2155
01:13:45,000 --> 01:13:46,000
软盘吧

2156
01:13:46,000 --> 01:13:46,000
才多少

2157
01:13:46,000 --> 01:13:48,000
才 720 K 标准的

2158
01:13:48,000 --> 01:13:50,000
后来再翻翻成 141.44 兆嘛

2159
01:13:50,000 --> 01:13:51,000
就是

2160
01:13:51,000 --> 01:13:51,000
那你

2161
01:13:51,000 --> 01:13:52,000
高

2162
01:13:52,000 --> 01:13:52,000
所以高密

2163
01:13:52,000 --> 01:13:53,000
高密

2164
01:13:53,000 --> 01:13:54,000
对

2165
01:13:54,000 --> 01:13:55,000
1.4 的招

2166
01:13:55,000 --> 01:13:56,000
然后有一个

2167
01:13:56,000 --> 01:13:57,000
就你想象一下

2168
01:13:57,000 --> 01:13:58,000
那个时候就

2169
01:13:58,000 --> 01:13:59,000
你就想象今天一样

2170
01:13:59,000 --> 01:13:59,000
你的那个

2171
01:13:59,000 --> 01:14:01,000
比如你的那个笔记本的硬盘

2172
01:14:01,000 --> 01:14:02,000
是一个 T 的大小

2173
01:14:02,000 --> 01:14:04,000
然后你有一个 T 的内存

2174
01:14:04,000 --> 01:14:05,000
你当然觉得足够了

2175
01:14:05,000 --> 01:14:06,000
嗯

2176
01:14:06,000 --> 01:14:07,000
对

2177
01:14:07,000 --> 01:14:08,000
但是

2178
01:14:08,000 --> 01:14:09,000
现在

2179
01:14:09,000 --> 01:14:10,000
后来发现

2180
01:14:10,000 --> 01:14:10,000
哎

2181
01:14:10,000 --> 01:14:10,000
不对

2182
01:14:10,000 --> 01:14:11,000
好像不是这样

2183
01:14:11,000 --> 01:14:12,000
对

2184
01:14:12,000 --> 01:14:13,000
就是随着

2185
01:14:13,000 --> 01:14:15,000
一个程序

2186
01:14:15,000 --> 01:14:17,000
所需要完成的任务的

2187
01:14:17,000 --> 01:14:18,000
复杂

2188
01:14:18,000 --> 01:14:19,000
逐渐变得复杂

2189
01:14:19,000 --> 01:14:20,000
他

2190
01:14:20,000 --> 01:14:20,000
嗯

2191
01:14:20,000 --> 01:14:21,000
他所需要的任务

2192
01:14:21,000 --> 01:14:23,000
他所需要的内存也就是

2193
01:14:23,000 --> 01:14:24,000
几何几数的

2194
01:14:24,000 --> 01:14:26,000
速度增长

2195
01:14:26,000 --> 01:14:26,000
所以

2196
01:14:26,000 --> 01:14:27,000
呃

2197
01:14:28,000 --> 01:14:29,000
内存不够怎么办

2198
01:14:29,000 --> 01:14:30,000
就变成了一个非常切实的问题

2199
01:14:30,000 --> 01:14:31,000
嗯

2200
01:14:31,000 --> 01:14:32,000
所以在一个

2201
01:14:32,000 --> 01:14:34,000
要考古的话

2202
01:14:34,000 --> 01:14:35,000
从那个时候最开始

2203
01:14:35,000 --> 01:14:37,000
最开始的操作系统是一个

2204
01:14:37,000 --> 01:14:38,000
就是什么

2205
01:14:38,000 --> 01:14:40,000
单线单进程的东西啊

2206
01:14:40,000 --> 01:14:40,000
对

2207
01:14:40,000 --> 01:14:42,000
最开始的操作系统

2208
01:14:42,000 --> 01:14:43,000
其实不是个操作系统

2209
01:14:43,000 --> 01:14:43,000
他

2210
01:14:43,000 --> 01:14:43,000
他

2211
01:14:43,000 --> 01:14:45,000
或者说没有任何特殊之处

2212
01:14:45,000 --> 01:14:46,000
他只不过就是开机

2213
01:14:46,000 --> 01:14:48,000
这个程序被自动运行

2214
01:14:48,000 --> 01:14:50,000
然后你可以用这个自动

2215
01:14:50,000 --> 01:14:51,000
用这个程序

2216
01:14:51,000 --> 01:14:51,000
去做任务

2217
01:14:51,000 --> 01:14:53,000
去找到你想要运行的那个程序

2218
01:14:53,000 --> 01:14:54,000
然后运行那个程序

2219
01:14:54,000 --> 01:14:56,000
在这个过程之中

2220
01:14:56,000 --> 01:14:57,000
你最开始运行的那个程序

2221
01:14:57,000 --> 01:14:58,000
就

2222
01:14:58,000 --> 01:15:00,000
就退出去了

2223
01:15:00,000 --> 01:15:01,000
就不再存在电脑里面了

2224
01:15:01,000 --> 01:15:02,000
然后你

2225
01:15:02,000 --> 01:15:03,000
接下来运行的这个程序

2226
01:15:03,000 --> 01:15:05,000
他独占整个电脑

2227
01:15:05,000 --> 01:15:05,000
他就是

2228
01:15:05,000 --> 01:15:06,000
他认为

2229
01:15:06,000 --> 01:15:08,000
我是活在这个电脑上的

2230
01:15:08,000 --> 01:15:09,000
唯一程序

2231
01:15:09,000 --> 01:15:10,000
嗯

2232
01:15:10,000 --> 01:15:10,000
而且

2233
01:15:10,000 --> 01:15:12,000
其实即到

2234
01:15:12,000 --> 01:15:13,000
即便到今天这一点

2235
01:15:13,000 --> 01:15:14,000
多多少少还是成立了

2236
01:15:14,000 --> 01:15:15,000
就是每一个

2237
01:15:15,000 --> 01:15:17,000
程序都多少认为

2238
01:15:17,000 --> 01:15:19,000
自己拥有整台计算机

2239
01:15:19,000 --> 01:15:19,000
嗯

2240
01:15:19,000 --> 01:15:21,000
其实这是一个假象

2241
01:15:21,000 --> 01:15:23,000
其实只不过是操作系统

2242
01:15:23,000 --> 01:15:23,000
或者是

2243
01:15:23,000 --> 01:15:24,000
CPU

2244
01:15:24,000 --> 01:15:26,000
给他制造出来的一个幻境

2245
01:15:26,000 --> 01:15:28,000
让他活在你的世界里

2246
01:15:28,000 --> 01:15:28,000
其实

2247
01:15:28,000 --> 01:15:29,000
对

2248
01:15:29,000 --> 01:15:30,000
在物理意义上

2249
01:15:30,000 --> 01:15:31,000
在实体意义上

2250
01:15:31,000 --> 01:15:33,000
他正在和别人

2251
01:15:33,000 --> 01:15:36,000
共同享用同一块内存

2252
01:15:36,000 --> 01:15:36,000
对

2253
01:15:36,000 --> 01:15:39,000
这个可能早期用过 DOS 的用户

2254
01:15:39,000 --> 01:15:40,000
还有这个印象

2255
01:15:40,000 --> 01:15:41,000
你开

2256
01:15:41,000 --> 01:15:42,000
开了 DOS

2257
01:15:42,000 --> 01:15:42,000
开了 mini

2258
01:15:42,000 --> 01:15:43,000
进了一个程序

2259
01:15:43,000 --> 01:15:45,000
那你要干点别的事

2260
01:15:45,000 --> 01:15:46,000
你还得从那退出来

2261
01:15:46,000 --> 01:15:47,000
先保存

2262
01:15:47,000 --> 01:15:47,000
然后退出

2263
01:15:47,000 --> 01:15:48,000
再起了另外一个程序

2264
01:15:48,000 --> 01:15:49,000
然后做完那个事

2265
01:15:49,000 --> 01:15:50,000
保存退出

2266
01:15:50,000 --> 01:15:51,000
再回到之前

2267
01:15:51,000 --> 01:15:51,000
然后再回到之前

2268
01:15:51,000 --> 01:15:53,000
然后后来是在

2269
01:15:53,000 --> 01:15:55,000
是 Windows 3 2 吧

2270
01:15:55,000 --> 01:15:56,000
还是 95 的时候

2271
01:15:56,000 --> 01:15:58,000
出现了这个

2272
01:15:58,000 --> 01:16:00,000
说多任务的这个概念了

2273
01:16:00,000 --> 01:16:01,000
Windows 3 2 有多任务吗

2274
01:16:01,000 --> 01:16:03,000
我不太清楚

2275
01:16:03,000 --> 01:16:05,000
等一下

2276
01:16:05,000 --> 01:16:06,000
其实我好像没有用过 Windows 3 2

2277
01:16:06,000 --> 01:16:09,000
Windows 3 2

2278
01:16:09,000 --> 01:16:11,000
是专门为中国市场做的

2279
01:16:11,000 --> 01:16:12,000
其实就是 Windows 3 2

2280
01:16:12,000 --> 01:16:13,000
其实是一个汉化版

2281
01:16:13,000 --> 01:16:15,000
就 Windows 3 1 的汉化版

2282
01:16:15,000 --> 01:16:15,000
OK

2283
01:16:15,000 --> 01:16:16,000
对

2284
01:16:16,000 --> 01:16:16,000
对

2285
01:16:16,000 --> 01:16:16,000
所以

2286
01:16:16,000 --> 01:16:18,000
那 3.1 有多任务

2287
01:16:18,000 --> 01:16:20,000
我们好像没有吧

2288
01:16:20,000 --> 01:16:20,000
我不

2289
01:16:20,000 --> 01:16:21,000
我不

2290
01:16:21,000 --> 01:16:22,000
并不确切的记得

2291
01:16:22,000 --> 01:16:24,000
自己曾经在 Windows 3.1 的时代

2292
01:16:24,000 --> 01:16:26,000
按过 Alt 加 Type

2293
01:16:26,000 --> 01:16:26,000
这个

2294
01:16:26,000 --> 01:16:28,000
Alt 加 Type 这个组合

2295
01:16:28,000 --> 01:16:29,000
切换任务的

2296
01:16:29,000 --> 01:16:30,000
对

2297
01:16:30,000 --> 01:16:32,000
应该是没有吧

2298
01:16:32,000 --> 01:16:33,000
但至少

2299
01:16:33,000 --> 01:16:34,000
这个很确定是

2300
01:16:34,000 --> 01:16:36,000
Windows 95 肯定是一个多任务的系统

2301
01:16:36,000 --> 01:16:37,000
对

2302
01:16:37,000 --> 01:16:38,000
Windows 95

2303
01:16:38,000 --> 01:16:39,000
我还记得我

2304
01:16:39,000 --> 01:16:41,000
最晚是在

2305
01:16:41,000 --> 01:16:43,000
研究生时代

2306
01:16:43,000 --> 01:16:44,000
还教过一个人

2307
01:16:44,000 --> 01:16:46,000
用 Alt 加 Type

2308
01:16:46,000 --> 01:16:47,000
可以切换到其他程序里面去

2309
01:16:47,000 --> 01:16:48,000
他大为惊讶

2310
01:16:48,000 --> 01:16:49,000
你知道吗

2311
01:16:49,000 --> 01:16:51,000
他说

2312
01:16:51,000 --> 01:16:51,000
原来

2313
01:16:51,000 --> 01:16:51,000
原来

2314
01:16:51,000 --> 01:16:52,000
原来可以这么玩

2315
01:16:52,000 --> 01:16:54,000
原来我切换到

2316
01:16:54,000 --> 01:16:56,000
就是原来这样按一下

2317
01:16:56,000 --> 01:16:58,000
原来就是我刚才在做的事情

2318
01:16:58,000 --> 01:16:59,000
还在继续被做

2319
01:16:59,000 --> 01:17:04,000
但其实这里也是看

2320
01:17:04,000 --> 01:17:06,000
你看就除了这个程序的认知上

2321
01:17:06,000 --> 01:17:07,000
有一个过渡

2322
01:17:07,000 --> 01:17:10,000
就是我们作为用户的认知上

2323
01:17:10,000 --> 01:17:11,000
其实也是需要一个过渡的

2324
01:17:11,000 --> 01:17:14,000
本来想一个机器只能干一件事情

2325
01:17:14,000 --> 01:17:14,000
对吧

2326
01:17:14,000 --> 01:17:14,000
然后突然

2327
01:17:14,000 --> 01:17:16,000
能够同时干几件事情

2328
01:17:16,000 --> 01:17:17,000
还是蛮奇怪的

2329
01:17:17,000 --> 01:17:19,000
一个认知上的变化

2330
01:17:19,000 --> 01:17:20,000
对

2331
01:17:20,000 --> 01:17:20,000
但

2332
01:17:20,000 --> 01:17:21,000
但是

2333
01:17:21,000 --> 01:17:21,000
輸了

2334
01:17:21,000 --> 01:17:23,000
但回到游戏上面

2335
01:17:23,000 --> 01:17:24,000
其实在道德时代

2336
01:17:24,000 --> 01:17:25,000
已经有很多游戏可以

2337
01:17:25,000 --> 01:17:26,000
比如说

2338
01:17:26,000 --> 01:17:28,000
或者说游戏给你观感

2339
01:17:28,000 --> 01:17:30,000
你可以一边放音乐

2340
01:17:30,000 --> 01:17:32,000
至少游戏的背景音乐在播放

2341
01:17:32,000 --> 01:17:35,000
然后你还可以操纵里面的人

2342
01:17:35,000 --> 01:17:36,000
在走路

2343
01:17:36,000 --> 01:17:36,000
然后

2344
01:17:36,000 --> 01:17:41,000
好像也没有那么的让人

2345
01:17:41,000 --> 01:17:42,000
但是起码就是说

2346
01:17:42,000 --> 01:17:45,000
才在对这个东西的认识上

2347
01:17:45,000 --> 01:17:46,000
他还是说他在玩这个游戏

2348
01:17:46,000 --> 01:17:48,000
他不能在玩这个游戏的时候

2349
01:17:48,000 --> 01:17:51,000
同时去处理一个

2350
01:17:51,000 --> 01:17:51,000
什么文字

2351
01:17:51,000 --> 01:17:53,000
编辑一个文本之类的

2352
01:17:53,000 --> 01:17:54,000
对

2353
01:17:54,000 --> 01:17:55,000
虽然那个时代也有什么

2354
01:17:55,000 --> 01:17:58,000
常驻内存的工具

2355
01:17:58,000 --> 01:17:59,000
比如说有些游戏

2356
01:17:59,000 --> 01:18:00,000
游戏修改工具会

2357
01:18:00,000 --> 01:18:02,000
会自己缩在内存一角

2358
01:18:02,000 --> 01:18:03,000
然后让你去漏了一个

2359
01:18:03,000 --> 01:18:05,000
然后按一个什么快捷键

2360
01:18:05,000 --> 01:18:06,000
按一个热键

2361
01:18:06,000 --> 01:18:07,000
整个游戏就

2362
01:18:07,000 --> 01:18:09,000
就就就就

2363
01:18:09,000 --> 01:18:10,000
就冻结了那里了

2364
01:18:10,000 --> 01:18:10,000
然后这个时候

2365
01:18:10,000 --> 01:18:12,000
你可以用这个小工具来

2366
01:18:12,000 --> 01:18:13,000
修改内存

2367
01:18:13,000 --> 01:18:15,000
然后等你改好的时候

2368
01:18:15,000 --> 01:18:16,000
再重新继续游戏

2369
01:18:16,000 --> 01:18:17,000
其实就是一个 debugger

2370
01:18:17,000 --> 01:18:18,000
对

2371
01:18:18,000 --> 01:18:18,000
对

2372
01:18:18,000 --> 01:18:20,000
然后重新继续游戏

2373
01:18:20,000 --> 01:18:20,000
发现

2374
01:18:20,000 --> 01:18:21,000
哎呀

2375
01:18:21,000 --> 01:18:22,000
自己忽然有了几万块钱

2376
01:18:22,000 --> 01:18:24,000
有了什么

2377
01:18:24,000 --> 01:18:26,000
金蝉鼓

2378
01:18:26,000 --> 01:18:27,000
对

2379
01:18:27,000 --> 01:18:28,000
哎呀

2380
01:18:28,000 --> 01:18:29,000
这些游戏

2381
01:18:29,000 --> 01:18:31,000
那个时候如此熟悉

2382
01:18:31,000 --> 01:18:32,000
怎么现在好像

2383
01:18:32,000 --> 01:18:34,000
这些工具

2384
01:18:34,000 --> 01:18:34,000
那个时候

2385
01:18:34,000 --> 01:18:37,000
那么那么耳熟能详

2386
01:18:37,000 --> 01:18:38,000
现在好像一个都想不起来

2387
01:18:38,000 --> 01:18:39,000
我只想起一个

2388
01:18:39,000 --> 01:18:41,000
只能想起一个 PC Tools

2389
01:18:41,000 --> 01:18:41,000
哎呀

2390
01:18:41,000 --> 01:18:42,000
我也想不起来

2391
01:18:42,000 --> 01:18:43,000
anyway

2392
01:18:43,000 --> 01:18:45,000
回头再去考古吧

2393
01:18:45,000 --> 01:18:45,000
好呀

2394
01:18:45,000 --> 01:18:46,000
嗯

2395
01:18:46,000 --> 01:18:47,000
然后就

2396
01:18:47,000 --> 01:18:48,000
就起码我们能够确切的知道

2397
01:18:48,000 --> 01:18:49,000
什么东西

2398
01:18:49,000 --> 01:18:50,000
我开始搭载一个

2399
01:18:50,000 --> 01:18:50,000
这个什么

2400
01:18:50,000 --> 01:18:51,000
多任务的系统

2401
01:18:51,000 --> 01:18:54,000
不过他那个多任务和我们现在多任务还是在

2402
01:18:54,000 --> 01:18:56,000
在机制上还是有很大不一样的

2403
01:18:56,000 --> 01:18:58,000
他是一个所谓的

2404
01:18:58,000 --> 01:19:00,000
叫做非常认识

2405
01:19:00,000 --> 01:19:01,000
协作式多任务吧

2406
01:19:01,000 --> 01:19:02,000
对

2407
01:19:02,000 --> 01:19:02,000
就是

2408
01:19:02,000 --> 01:19:05,000
简单来说就是你是一个程序

2409
01:19:05,000 --> 01:19:06,000
我是一个程序

2410
01:19:06,000 --> 01:19:09,000
然后我们两个必须比较有默契

2411
01:19:09,000 --> 01:19:11,000
一定要说你方舱吧

2412
01:19:11,000 --> 01:19:11,000
我登场

2413
01:19:11,000 --> 01:19:12,000
然后

2414
01:19:12,000 --> 01:19:12,000
呃

2415
01:19:12,000 --> 01:19:15,000
我先用用到我觉得可以不用的时候

2416
01:19:15,000 --> 01:19:18,000
我要主动放弃对机器的控制权

2417
01:19:18,000 --> 01:19:19,000
交给

2418
01:19:19,000 --> 01:19:20,000
要交给交给别人

2419
01:19:20,000 --> 01:19:20,000
嗯

2420
01:19:20,000 --> 01:19:20,000
嗯

2422
01:19:50,000 --> 01:19:53,000
This is a program that you do

2423
01:19:53,000 --> 01:19:53,000
对

2424
01:19:53,000 --> 01:19:53,000
呃

2425
01:19:53,000 --> 01:19:54,000
你你唱一会儿

2426
01:19:54,000 --> 01:19:55,000
我唱一会儿

2427
01:19:55,000 --> 01:19:56,000
我们要轮流换对吧

2428
01:19:56,000 --> 01:19:58,000
但是如果有一个人霸着麦袜不放的话

2429
01:19:58,000 --> 01:20:01,000
那有可能就用户就说哎呀

2430
01:20:01,000 --> 01:20:02,000
怎么又没有响应了

2431
01:20:02,000 --> 01:20:05,000
系统资源独占了他只要对啊

2432
01:20:05,000 --> 01:20:06,000
怎么这么卡呀

2433
01:20:06,000 --> 01:20:07,000
重新下巴

2434
01:20:07,000 --> 01:20:08,000
然后对呃

2435
01:20:08,000 --> 01:20:09,000
都没个唱

2436
01:20:09,000 --> 01:20:10,000
对呃

2437
01:20:10,000 --> 01:20:11,000
协作是多任务

2438
01:20:11,000 --> 01:20:14,000
其实在现在我们日常的这个编程过程中

2439
01:20:14,000 --> 01:20:16,000
还有一个比较相关的一个东西啊

2440
01:20:16,000 --> 01:20:18,000
就是比如说在那个 node

2441
01:20:18,000 --> 01:20:18,000
里面

2442
01:20:18,000 --> 01:20:20,000
你要因为 node 是一个单进程的东西吗

2443
01:20:20,000 --> 01:20:23,000
你要做一些稍微复杂一点的

2444
01:20:23,000 --> 01:20:24,000
或者是需要等待的操作

2445
01:20:24,000 --> 01:20:26,000
比如说你要做 IO 的时候

2446
01:20:26,000 --> 01:20:28,000
你得用一个所谓的回调 callback

2447
01:20:28,000 --> 01:20:30,000
其实那个时候就是一个

2448
01:20:30,000 --> 01:20:32,000
所谓的写多数多任务的体现

2449
01:20:32,000 --> 01:20:34,000
就是说我现在能

2450
01:20:34,000 --> 01:20:35,000
我之前能做的那些什么

2451
01:20:35,000 --> 01:20:36,000
加减存储的计算都做完了

2452
01:20:36,000 --> 01:20:37,000
现在我要做一个

2453
01:20:37,000 --> 01:20:39,000
可能我不能马上执行的东西

2454
01:20:39,000 --> 01:20:40,000
因为要等那个 IO 返回

2455
01:20:41,000 --> 01:20:43,000
我先把所谓控制权让出来

2456
01:20:43,000 --> 01:20:45,000
然后我先给你一个回调函数

2457
01:20:45,000 --> 01:20:46,000
等这个东西

2458
01:20:46,000 --> 01:20:48,000
就告诉调度器说

2459
01:20:48,000 --> 01:20:52,000
等我要的 IO 结果回来之后

2460
01:20:52,000 --> 01:20:53,000
你再换新

2461
01:20:53,000 --> 01:20:55,000
我接着执行回调程序

2462
01:20:55,000 --> 01:20:55,000
但现在开始

2463
01:20:55,000 --> 01:20:57,000
我就把控制权让出去了

2464
01:20:57,000 --> 01:20:58,000
这个就是一个

2465
01:20:58,000 --> 01:20:59,000
写多任务的体现

2466
01:21:00,000 --> 01:21:00,000
对

2467
01:21:00,000 --> 01:21:02,000
然后在 Windows 95 的时代

2468
01:21:02,000 --> 01:21:03,000
就所有的程序

2469
01:21:03,000 --> 01:21:06,000
你要进行系统资源的共享的话

2470
01:21:06,000 --> 01:21:09,000
你这是要做类似的事情

2471
01:21:09,000 --> 01:21:11,000
但是那个时候

2472
01:21:11,000 --> 01:21:13,000
其实当我们说到 Windows 95 的时候

2473
01:21:13,000 --> 01:21:15,000
内存已经不是什么太大问题了

2474
01:21:15,000 --> 01:21:17,000
在 Windows 95 之前的

2475
01:21:17,000 --> 01:21:19,000
很长一段时间里面

2476
01:21:19,000 --> 01:21:22,000
怎样优化使用有限的内存

2477
01:21:22,000 --> 01:21:24,000
简直是每一个程序员的必求可

2478
01:21:24,000 --> 01:21:27,000
我觉得 Windows 95 的时候也是

2479
01:21:27,000 --> 01:21:28,000
起码到现在都是

2480
01:21:28,000 --> 01:21:29,000
我觉得

2481
01:21:29,000 --> 01:21:32,000
现在其实还是有很多

2482
01:21:32,000 --> 01:21:35,000
有些程序员可以一辈子不碰

2483
01:21:35,000 --> 01:21:37,000
或者在你的从业过程之中

2484
01:21:37,000 --> 01:21:41,000
可能你可以一两年不去碰

2485
01:21:41,000 --> 01:21:44,000
任何和内存管理有关的话题

2486
01:21:44,000 --> 01:21:44,000
比如

2487
01:21:44,000 --> 01:21:46,000
那个时候是做不到的

2488
01:21:46,000 --> 01:21:47,000
对

2489
01:21:47,000 --> 01:21:49,000
现在的话你只要用一个所谓的 management

2490
01:21:49,000 --> 01:21:51,000
managed language

2491
01:21:51,000 --> 01:21:52,000
就是管理过的语言

2492
01:21:52,000 --> 01:21:54,000
比如说 C sharp

2493
01:21:54,000 --> 01:21:55,000
不用那个什么指针

2494
01:21:55,000 --> 01:21:57,000
那个叫不安全指针叫什么

2495
01:21:57,000 --> 01:21:57,000
对

2496
01:21:57,000 --> 01:21:58,000
unsafe

2497
01:21:58,000 --> 01:21:59,000
unsafe pointer

2498
01:21:59,000 --> 01:22:00,000
对吧

2499
01:22:00,000 --> 01:22:02,000
然后你说你是用这个 Java

2500
01:22:02,000 --> 01:22:03,000
用 JVM 上面跑

2501
01:22:03,000 --> 01:22:05,000
或者像什么刚才讲 Node

2502
01:22:05,000 --> 01:22:06,000
还有像很多这种脚本语言

2503
01:22:06,000 --> 01:22:07,000
Python 都是

2504
01:22:07,000 --> 01:22:10,000
你都不需要去手工的直接去管理

2505
01:22:10,000 --> 01:22:11,000
分配内存

2506
01:22:11,000 --> 01:22:15,000
这些都是系统或者运行时帮你解决了

2507
01:22:15,000 --> 01:22:16,000
然后甚至像

2508
01:22:16,000 --> 01:22:16,000
对

2509
01:22:16,000 --> 01:22:16,000
你都是

2510
01:22:16,000 --> 01:22:18,000
你这也是不用手工管理

2511
01:22:18,000 --> 01:22:19,000
包括你不用去申请

2512
01:22:19,000 --> 01:22:20,000
你不用去分配

2513
01:22:20,000 --> 01:22:22,000
然后你也不用去担心

2514
01:22:22,000 --> 01:22:23,000
这个叫什么

2515
01:22:23,000 --> 01:22:24,000
返回的

2516
01:22:24,000 --> 01:22:25,000
不叫返回

2517
01:22:25,000 --> 01:22:26,000
释放的问题

2518
01:22:26,000 --> 01:22:26,000
对

2519
01:22:26,000 --> 01:22:28,000
但是如果你像在

2520
01:22:28,000 --> 01:22:30,000
还是有用 C 类的语言

2521
01:22:30,000 --> 01:22:31,000
比如说像用 C++

2522
01:22:31,000 --> 01:22:32,000
或者是

2523
01:22:32,000 --> 01:22:33,000
现在大家还在写

2524
01:22:33,000 --> 01:22:36,000
你还是要在很多程度上

2525
01:22:36,000 --> 01:22:38,000
是要手工管理内存的

2526
01:22:38,000 --> 01:22:38,000
所以现在有时候

2527
01:22:38,000 --> 01:22:39,000
去考虑这件事情

2528
01:22:39,000 --> 01:22:40,000
至少

2529
01:22:40,000 --> 01:22:43,000
就算你不去亲自去做这件事情

2530
01:22:43,000 --> 01:22:44,000
至少要去考虑这件事情

2531
01:22:44,000 --> 01:22:44,000
对

2532
01:22:44,000 --> 01:22:46,000
Swift 还是需要手工管理内存的

2533
01:22:46,000 --> 01:22:47,000
Swift 不需要

2534
01:22:47,000 --> 01:22:47,000
OK

2535
01:22:47,000 --> 01:22:48,000
它是一个

2536
01:22:48,000 --> 01:22:49,000
就是 management

2537
01:22:49,000 --> 01:22:51,000
它是有 GC

2538
01:22:51,000 --> 01:22:53,000
所以在手工管理内存的时候

2539
01:22:53,000 --> 01:22:55,000
需要做一些什么事情

2540
01:22:55,000 --> 01:22:57,000
就是我记得

2541
01:22:57,000 --> 01:22:59,000
那时代看过一些手工管理内存的书

2542
01:22:59,000 --> 01:23:00,000
会提到

2543
01:23:00,000 --> 01:23:01,000
比如说

2544
01:23:01,000 --> 01:23:02,000
你一个程序

2545
01:23:02,000 --> 01:23:05,000
比如说你只有一兆内存可以用

2546
01:23:05,000 --> 01:23:09,000
然后你需要调用一堆函数

2547
01:23:09,000 --> 01:23:13,000
这些所有这些函数加在一起

2548
01:23:13,000 --> 01:23:13,000
可能有两兆

2549
01:23:13,000 --> 01:23:16,000
那怎么办呢

2550
01:23:16,000 --> 01:23:18,000
你可以把

2551
01:23:18,000 --> 01:23:19,000
你可以

2552
01:23:19,000 --> 01:23:23,000
这个时候就需要你精心去规划函数的分布

2553
01:23:23,000 --> 01:23:24,000
你要把一些函数

2554
01:23:24,000 --> 01:23:27,000
打包包在一个正好是

2555
01:23:27,000 --> 01:23:29,000
比如说 500 K 的这么一个

2556
01:23:29,000 --> 01:23:31,000
就是动态

2557
01:23:31,000 --> 01:23:33,000
所谓动态库里面吧

2558
01:23:33,000 --> 01:23:34,000
然后你运行

2559
01:23:34,000 --> 01:23:36,000
比如说你在写一个游戏

2560
01:23:36,000 --> 01:23:37,000
然后这个游戏里面

2561
01:23:37,000 --> 01:23:39,000
跑这个关卡的时候

2562
01:23:39,000 --> 01:23:40,000
关卡

2563
01:23:40,000 --> 01:23:41,000
我说对了

2564
01:23:41,000 --> 01:23:44,000
跑这个关卡的时候

2565
01:23:44,000 --> 01:23:45,000
你需要用的这些函数

2566
01:23:45,000 --> 01:23:46,000
那你就

2567
01:23:46,000 --> 01:23:46,000
在这个关卡里面

2568
01:23:46,000 --> 01:23:50,000
这个时候把这 512 K 的库调入内存

2569
01:23:50,000 --> 01:23:52,000
然后去调用这些函数

2570
01:23:52,000 --> 01:23:54,000
然后等到你打完这个关卡之后

2571
01:23:54,000 --> 01:23:55,000
这些函数不需要了

2572
01:23:55,000 --> 01:23:56,000
然后再把另外一个函数

2573
01:23:56,000 --> 01:23:58,000
另外一个库调进来

2574
01:23:58,000 --> 01:24:00,000
然后就等于你手工要去

2575
01:24:00,000 --> 01:24:03,000
在你的程序里面实现一个内存管理器

2576
01:24:03,000 --> 01:24:05,000
实现一个动态加载器

2577
01:24:05,000 --> 01:24:07,000
诸如此类的

2578
01:24:07,000 --> 01:24:08,000
诸如此类的细节

2579
01:24:08,000 --> 01:24:09,000
那个时候我觉得

2580
01:24:09,000 --> 01:24:11,000
这些都是黑魔法

2581
01:24:11,000 --> 01:24:15,000
现在可能也多少觉得有点黑魔法

2582
01:24:15,000 --> 01:24:15,000
因为我其实

2583
01:24:15,000 --> 01:24:16,000
个人认为

2584
01:24:16,000 --> 01:24:17,000
我个人来讲

2585
01:24:17,000 --> 01:24:20,000
从来没有做过任何内存优化方面的东西

2586
01:24:20,000 --> 01:24:21,000
我就已经长大了

2587
01:24:21,000 --> 01:24:22,000
就已经

2588
01:24:22,000 --> 01:24:23,000
就已经直接进入 GC 时代了

2589
01:24:23,000 --> 01:24:27,000
就已经幸运地进入了这个 Garbage Collection 无处不在的时代

2590
01:24:27,000 --> 01:24:28,000
对

2591
01:24:28,000 --> 01:24:30,000
而我相信现在很多程序员可能

2592
01:24:30,000 --> 01:24:31,000
从入门到

2593
01:24:31,000 --> 01:24:33,000
尤其是如果你不是学

2594
01:24:33,000 --> 01:24:36,000
计算机科班出身的话

2595
01:24:36,000 --> 01:24:38,000
你可能完全有机会

2596
01:24:38,000 --> 01:24:42,000
就是完全没有接触过什么是内存管理

2597
01:24:42,000 --> 01:24:43,000
比如说我就是

2598
01:24:43,000 --> 01:24:45,000
我本科读的不是这个 CS 嘛

2599
01:24:45,000 --> 01:24:46,000
就是其实我

2600
01:24:46,000 --> 01:24:48,000
等我接触这些东西的时候

2601
01:24:48,000 --> 01:24:51,000
那些都只存停留在课本上的概念

2602
01:24:51,000 --> 01:24:52,000
就是我知道怎么一回事

2603
01:24:52,000 --> 01:24:53,000
原理怎么

2604
01:24:53,000 --> 01:24:57,000
但是我自己其实没有亲身去操作过那个东西

2605
01:24:57,000 --> 01:24:59,000
这是变相秀年轻吧

2606
01:24:59,000 --> 01:25:03,000
不这个是变相秀这个事情

2607
01:25:03,000 --> 01:25:05,000
底气不足不能多说

2608
01:25:05,000 --> 01:25:06,000
好吧

2609
01:25:06,000 --> 01:25:08,000
那咱俩其实都比较底气不足

2610
01:25:08,000 --> 01:25:10,000
因为混蛋你是科班出身

2611
01:25:10,000 --> 01:25:11,000
怎么能够说你底气不足

2612
01:25:11,000 --> 01:25:15,000
可我也没有写过一个

2613
01:25:15,000 --> 01:25:15,000
好吧

2614
01:25:15,000 --> 01:25:16,000
我还是做过一点

2615
01:25:16,000 --> 01:25:19,000
但正儿八经的在工作

2616
01:25:19,000 --> 01:25:22,000
或者在实践之中

2617
01:25:22,000 --> 01:25:23,000
利用内存管理的知识

2618
01:25:23,000 --> 01:25:24,000
解决一个实际的问题

2619
01:25:24,000 --> 01:25:26,000
可能绝无仅有吧

2620
01:25:26,000 --> 01:25:28,000
但你之前写这个 iOS 的时候

2621
01:25:28,000 --> 01:25:29,000
不需要用这个吗

2622
01:25:29,000 --> 01:25:31,000
不需要手工管理内存吗

2623
01:25:31,000 --> 01:25:33,000
iOS 的所谓管理内存

2624
01:25:33,000 --> 01:25:35,000
你只是需要操心

2625
01:25:35,000 --> 01:25:37,000
不要泄露内存而已

2626
01:25:37,000 --> 01:25:39,000
根本不需要你去优化内存的使用

2627
01:25:39,000 --> 01:25:40,000
对

2628
01:25:40,000 --> 01:25:43,000
就 iOS 已经是一个非常非常先进的

2629
01:25:43,000 --> 01:25:45,000
这个或者说

2630
01:25:45,000 --> 01:25:46,000
Object C

2631
01:25:46,000 --> 01:25:47,000
Coco 这个运行时

2632
01:25:47,000 --> 01:25:50,000
已经是非常非常先进的一套东西了

2633
01:25:50,000 --> 01:25:53,000
你不需要去考虑自己的

2634
01:25:53,000 --> 01:25:55,000
Objects 在内存里面是怎么样对齐的

2635
01:25:55,000 --> 01:25:56,000
或者是

2636
01:25:56,000 --> 01:25:59,000
怎样

2637
01:25:59,000 --> 01:26:01,000
就很多 C 时代

2638
01:26:01,000 --> 01:26:02,000
什么

2639
01:26:02,000 --> 01:26:04,000
那个 struct a line 那种东西

2640
01:26:04,000 --> 01:26:06,000
对这些东西

2641
01:26:06,000 --> 01:26:07,000
什么 padding

2642
01:26:07,000 --> 01:26:09,000
什么什么

2643
01:26:09,000 --> 01:26:10,000
乃至

2644
01:26:10,000 --> 01:26:13,000
C 里面还有一种黑魔法

2645
01:26:13,000 --> 01:26:15,000
是使用 union 类型来

2646
01:26:15,000 --> 01:26:16,000
解决

2647
01:26:16,000 --> 01:26:16,000
对

2648
01:26:16,000 --> 01:26:16,000
对

2649
01:26:16,000 --> 01:26:20,000
我记得之前以前学 C 看老谭的书的时候

2650
01:26:20,000 --> 01:26:23,000
还记得还要还还挺对这块还挺觉得挺新奇

2651
01:26:23,000 --> 01:26:24,000
对

2652
01:26:24,000 --> 01:26:26,000
那个时候真的是为了省一两个 byte

2653
01:26:26,000 --> 01:26:28,000
可以绞尽脑汁想好

2654
01:26:28,000 --> 01:26:30,000
那个什么

2655
01:26:30,000 --> 01:26:33,000
真正的 premature optimization

2656
01:26:33,000 --> 01:26:35,000
这个已经不是

2657
01:26:35,000 --> 01:26:36,000
我也不知道

2658
01:26:36,000 --> 01:26:38,000
那个时代

2659
01:26:38,000 --> 01:26:42,000
你如果不能精细的去使用内存的话

2660
01:26:42,000 --> 01:26:45,000
那就没有什么多的内存可以给你用

2661
01:26:45,000 --> 01:26:46,000
平常就会直接

2662
01:26:46,000 --> 01:26:47,000
对啊

2663
01:26:47,000 --> 01:26:50,000
就没有虚拟存这种东西的吧

2664
01:26:50,000 --> 01:26:50,000
嗯

2665
01:26:50,000 --> 01:26:57,000
也没有也没有一个运行时或者是没有操作系统来替你去去操心这些事情

2666
01:26:57,000 --> 01:26:58,000
你只能一切动手

2667
01:26:58,000 --> 01:26:59,000
一切一切的自己动手

2668
01:26:59,000 --> 01:27:01,000
对其实现在的话

2669
01:27:01,000 --> 01:27:03,000
很多做这个签入式开发的朋友

2670
01:27:03,000 --> 01:27:07,000
他还是要做很多这种刚才我们讲的那种工作啊

2671
01:27:07,000 --> 01:27:13,000
就是要考虑因为签入是这种签入是这种的跑的那个硬件的水平都非常按今天的标准来看都是非常糟糕的

2672
01:27:13,000 --> 01:27:15,000
对那上次我来看说那个什么现在不是要留下的硬件吗

2673
01:27:15,000 --> 01:27:16,000
对那上次我来看说那个什么现在不是要留下的硬件吗

2674
01:27:16,000 --> 01:27:19,000
流行一个什么互联网的这个时代

2675
01:27:19,000 --> 01:27:21,000
有很多那种所谓传感器啊

2676
01:27:21,000 --> 01:27:23,000
这种小芯片什么的

2677
01:27:23,000 --> 01:27:26,000
我上次看 arm 出了一个什么一个很常用的一个芯片

2678
01:27:26,000 --> 01:27:27,000
只有两 kb 的内存

2679
01:27:27,000 --> 01:27:29,000
呃

2680
01:27:29,000 --> 01:27:34,000
就是那种很小的一个传感器的一种那种那种好的芯片

2681
01:27:34,000 --> 01:27:35,000
只有两 kb 的内存

2682
01:27:35,000 --> 01:27:36,000
我想哇这怎么用

2683
01:27:36,000 --> 01:27:43,000
而且两 kb 不仅要装那个不仅要装数据

2684
01:27:43,000 --> 01:27:44,000
还有装程序本身哦

2685
01:27:44,000 --> 01:27:46,000
他那个程序是放在 rom 里面的

2686
01:27:46,000 --> 01:27:47,000
就是啊

2687
01:27:47,000 --> 01:27:47,000
两 kb

2688
01:27:47,000 --> 01:27:48,000
所以两 kb 是正儿八经的

2689
01:27:48,000 --> 01:27:50,000
对只是运行用

2690
01:27:50,000 --> 01:27:51,000
但是你想想两 kb 哦

2691
01:27:51,000 --> 01:27:53,000
嗯

2692
01:27:53,000 --> 01:27:56,000
但我觉得可能签入开发还还有一个

2693
01:27:56,000 --> 01:28:02,000
你们有一个不那么让他更复杂的东西

2694
01:28:02,000 --> 01:28:08,000
就是他很少会涉及到从一个更大的存储器上调用数据到内存里面的这样一个动作

2695
01:28:08,000 --> 01:28:09,000
啊

2696
01:28:09,000 --> 01:28:10,000
他是直接

2697
01:28:10,000 --> 01:28:16,000
对你一开始在你在写的时候就知道整个 cpu 的这个或者整个 rom 的内存里面的这样一个动作

2698
01:28:16,000 --> 01:28:17,000
的

2699
01:28:17,000 --> 01:28:20,000
呃整个存储器的分布会是怎么样的

2700
01:28:20,000 --> 01:28:21,000
你有多少东西可以用

2701
01:28:21,000 --> 01:28:23,000
然后里面可能有一个小小的 bootload 的

2702
01:28:23,000 --> 01:28:25,000
然后其他所有空间都是你的

2703
01:28:25,000 --> 01:28:26,000
然后你只要往里面

2704
01:28:26,000 --> 01:28:29,000
而且他而且他是一个绝对的单人物的系统

2705
01:28:29,000 --> 01:28:32,000
就没有人和你抢占抢抢资源什么的

2706
01:28:32,000 --> 01:28:33,000
对

2707
01:28:33,000 --> 01:28:37,000
就整个新整个芯片都是你的

2708
01:28:37,000 --> 01:28:42,000
对规划方面的问头的头疼的问题可能还少一些

2709
01:28:42,000 --> 01:28:45,000
但是早期的计算早期 pcc 级别乘成真的是相当的高的问题啊

2710
01:28:45,000 --> 01:28:47,000
变成真的是相当复杂的

2711
01:28:47,000 --> 01:28:49,000
这个是我应该说那句话叫这个芯片

2712
01:28:49,000 --> 01:28:50,000
我已经为你预留了

2713
01:28:52,000 --> 01:28:54,000
这些表情成包了

2714
01:28:54,000 --> 01:28:54,000
就是

2715
01:28:58,000 --> 01:29:02,000
但是到我们现在的一些主流的一些开发的话

2716
01:29:02,000 --> 01:29:04,000
其实这块就是如你所说

2717
01:29:04,000 --> 01:29:06,000
其实是没有什么概念

2718
01:29:06,000 --> 01:29:11,000
甚至说连那个内存本身的这个物理的尺寸都已经被抽象掉了

2719
01:29:11,000 --> 01:29:14,000
就是因为有这个虚拟内存这个东西

2720
01:29:14,000 --> 01:29:15,000
对啊

2721
01:29:15,000 --> 01:29:21,000
操作系统给程序展现的是一个所谓一个连续的庞大的这个内存

2722
01:29:21,000 --> 01:29:23,000
那个那个内存的地址空间

2723
01:29:23,000 --> 01:29:26,000
但是其实操作系统的在内存实际分配的时候

2724
01:29:26,000 --> 01:29:30,000
并不是说真的有无限大的一块内存给一个程序使用的

2725
01:29:30,000 --> 01:29:31,000
对吧

2726
01:29:31,000 --> 01:29:36,000
对这个我觉得这个这个问题可以从程序员的角度

2727
01:29:36,000 --> 01:29:39,000
就是从一个操作系统的使用者的角度来看

2728
01:29:39,000 --> 01:29:41,000
就是他简化了变成模型

2729
01:29:41,000 --> 01:29:44,000
就是如果没有虚拟内存的话

2730
01:29:44,000 --> 01:29:45,000
你

2731
01:29:45,000 --> 01:29:48,000
将不得不面对我的程序应该放在哪这个问题

2732
01:29:48,000 --> 01:29:49,000
对

2733
01:29:49,000 --> 01:29:52,000
就是我在我的程序在运行时

2734
01:29:52,000 --> 01:29:55,000
处于内存的什么地方

2735
01:29:55,000 --> 01:29:58,000
难道是一件要我自己来操心的事情吗

2736
01:29:58,000 --> 01:29:59,000
对

2737
01:29:59,000 --> 01:30:01,000
对如果没有训练所的话

2738
01:30:01,000 --> 01:30:02,000
你将不得不面临这个问题

2739
01:30:02,000 --> 01:30:12,000
就像早期的就重新回到了单机程序的这么一个一个一个状态里面

2740
01:30:12,000 --> 01:30:14,000
就我要和其他的程序共存吗

2741
01:30:14,000 --> 01:30:15,000
因为就像我刚才说的

2742
01:30:15,000 --> 01:30:19,000
刚才说了这个修改内存的小工具一样

2743
01:30:19,000 --> 01:30:23,000
他显然是要考虑自己要把自己放在什么地方

2744
01:30:23,000 --> 01:30:26,000
然后他必须跟另外一个程序共同享用实体内存

2745
01:30:26,000 --> 01:30:28,000
但是虚拟存在出现了解决这个问题

2746
01:30:28,000 --> 01:30:31,000
就是简单来说一个程序

2747
01:30:31,000 --> 01:30:32,000
如果他是 32 位的

2748
01:30:32,000 --> 01:30:39,000
那他会认为自己有将近 4 G 的内存空间

2749
01:30:39,000 --> 01:30:44,000
就是从 0 x 0000008 个零吧

2750
01:30:44,000 --> 01:30:45,000
他就两个零吧

2751
01:30:45,000 --> 01:30:49,000
没有 32 位的就不能到 4 GB 的空间

2752
01:30:49,000 --> 01:30:52,000
32 位不是 4 G 吗

2753
01:30:52,000 --> 01:30:53,000
但是好像我记得是在

2754
01:30:53,000 --> 01:30:56,000
就操心总会预留到一部分

2755
01:30:56,000 --> 01:30:59,000
对对操心总应该会占用到

2756
01:30:59,000 --> 01:31:02,000
操心总会占用一部分地质空间

2757
01:31:02,000 --> 01:31:02,000
对

2758
01:31:02,000 --> 01:31:05,000
但肯定不到 4 G 的能够实际使用的这个地质空间

2759
01:31:05,000 --> 01:31:06,000
对

2760
01:31:06,000 --> 01:31:07,000
因为他不是从 00 开始吗

2761
01:31:07,000 --> 01:31:10,000
所以肯定是到不到那个 4 G 的

2762
01:31:10,000 --> 01:31:10,000
对

2763
01:31:10,000 --> 01:31:15,000
就大概有 3 GB 的空间是可以用的吧

2764
01:31:15,000 --> 01:31:15,000
对对对

2765
01:31:15,000 --> 01:31:16,000
然后

2766
01:31:16,000 --> 01:31:22,000
我记得 Windows 上面的

2767
01:31:23,000 --> 01:31:27,000
默认空间好像有

2768
01:31:27,000 --> 01:31:29,000
只有 2 GB 左右

2769
01:31:29,000 --> 01:31:33,000
因为那个时候我记得 Windows 有一个启动参数

2770
01:31:33,000 --> 01:31:33,000
就是

2771
01:31:33,000 --> 01:31:37,000
你还记得 boot.ini 这个东西吗

2772
01:31:37,000 --> 01:31:38,000
我不知道

2773
01:31:38,000 --> 01:31:39,000
好古老

2774
01:31:39,000 --> 01:31:40,000
又暴露年龄了

2775
01:31:40,000 --> 01:31:42,000
就是在 boot.ini 里面

2776
01:31:42,000 --> 01:31:43,000
你可以给 Windows 的启动

2777
01:31:43,000 --> 01:31:44,000
加上一个 slash

2778
01:31:45,000 --> 01:31:46,000
3 G 这个选项

2779
01:31:46,000 --> 01:31:47,000
OK

2780
01:31:47,000 --> 01:31:50,000
而且这是 XP 都有了一个参数

2781
01:31:50,000 --> 01:31:50,000
就是

2782
01:31:50,000 --> 01:31:51,000
对

2783
01:31:51,000 --> 01:31:52,000
你加这个参数之后

2784
01:31:52,000 --> 01:31:58,000
操作系统的那个虚拟地质空间

2785
01:31:58,000 --> 01:32:02,000
才会减少到 1 G 应该是

2786
01:32:02,000 --> 01:32:03,000
然后在这种情况下

2787
01:32:03,000 --> 01:32:06,000
程序才有将近 3 G 的空间可以用

2788
01:32:06,000 --> 01:32:06,000
对

2789
01:32:06,000 --> 01:32:07,000
就哪怕是现在

2790
01:32:07,000 --> 01:32:08,000
如果我没记错的话

2791
01:32:08,000 --> 01:32:09,000
现在的

2792
01:32:09,000 --> 01:32:11,000
就比较现在我没用过 Windows 8 了

2793
01:32:11,000 --> 01:32:14,000
就之前的那个 Windows 的机器

2794
01:32:14,000 --> 01:32:16,000
如果它是 32 位的版本的话

2795
01:32:16,000 --> 01:32:18,000
你插上超过 4 G 的内存

2796
01:32:18,000 --> 01:32:21,000
它实际可以使用的也只有三个 GB 吗

2797
01:32:21,000 --> 01:32:21,000
对

2798
01:32:21,000 --> 01:32:23,000
我记得好像是这样子

2799
01:32:23,000 --> 01:32:23,000
对

2800
01:32:23,000 --> 01:32:27,000
不过后来有个什么扩展

2801
01:32:27,000 --> 01:32:29,000
应该什么用 48 位的地址来

2802
01:32:29,000 --> 01:32:31,000
来扩展一下

2803
01:32:31,000 --> 01:32:34,000
然后也可以用到很多

2804
01:32:34,000 --> 01:32:36,000
就超过 4 GB 的内存

2805
01:32:36,000 --> 01:32:38,000
但这个跟今天的一个话题没什么关系

2806
01:32:38,000 --> 01:32:38,000
对

2807
01:32:38,000 --> 01:32:40,000
对

2808
01:32:40,000 --> 01:32:42,000
就是可以这么说

2809
01:32:42,000 --> 01:32:42,000
就是

2810
01:32:42,000 --> 01:32:43,000
呃

2811
01:32:43,000 --> 01:32:44,000
呃

2812
01:32:44,000 --> 01:32:44,000
呃

2813
01:32:44,000 --> 01:32:44,000
呃

2814
01:32:44,000 --> 01:32:44,000
呃

2815
01:32:44,000 --> 01:32:44,000
呃

2816
01:32:44,000 --> 01:32:44,000
呃

2817
01:32:44,000 --> 01:32:44,000
呃

2818
01:32:44,000 --> 01:32:45,000
呃

2819
01:32:45,000 --> 01:32:45,000
呃

2820
01:32:45,000 --> 01:32:46,000
这个系列的

2821
01:32:46,000 --> 01:32:49,000
就是我们今天所使用的 32 位

2822
01:32:49,000 --> 01:32:52,000
或者说我们曾经在过去一个很长一段时间里面

2823
01:32:52,000 --> 01:32:55,000
所使用的 32 位的这个 CPU

2824
01:32:55,000 --> 01:33:00,000
就是其实和最古老的 8086 系列是

2825
01:33:00,000 --> 01:33:04,000
基本可以说是抑制兼容的

2826
01:33:04,000 --> 01:33:05,000
但是为了保持这种兼容性

2827
01:33:05,000 --> 01:33:07,000
也不得不付出很多代价

2828
01:33:07,000 --> 01:33:12,000
其中之一就是在比如说后面的巡治模式上面啊

2829
01:33:12,000 --> 01:33:14,000
或者是很多其他地方

2830
01:33:14,000 --> 01:33:14,000
对吧

2831
01:33:14,000 --> 01:33:14,000
对吧

2832
01:33:14,000 --> 01:33:17,000
都有不得不做出很多妥协

2833
01:33:17,000 --> 01:33:20,000
然后刚才所说的这个选址

2834
01:33:20,000 --> 01:33:25,000
其实也是这个妥协的一种形式吧

2835
01:33:25,000 --> 01:33:30,000
然后英特尔在推出 64 M 处理器的时候

2836
01:33:30,000 --> 01:33:31,000
想要

2837
01:33:31,000 --> 01:33:33,000
曾经想要一劳永逸的解决这个问题

2838
01:33:33,000 --> 01:33:34,000
但是

2839
01:33:34,000 --> 01:33:36,000
那个叫做安

2840
01:33:36,000 --> 01:33:38,000
叫什么安腾是吧

2841
01:33:38,000 --> 01:33:41,000
对安腾处理器想要解决这个问题

2842
01:33:41,000 --> 01:33:42,000
但是为此

2843
01:33:42,000 --> 01:33:44,000
要付出一个

2844
01:33:44,000 --> 01:33:49,000
就是打破这个向后兼容性的这么一个代价

2845
01:33:49,000 --> 01:33:51,000
所以他最终苛持失败

2846
01:33:51,000 --> 01:33:53,000
对

2847
01:33:53,000 --> 01:33:56,000
假如听众还不太清楚这件事情的话

2848
01:33:56,000 --> 01:33:58,000
就是我们现在用的所谓 64 M 处理器

2849
01:33:58,000 --> 01:34:01,000
其实并不是真正以上的 64 M

2850
01:34:01,000 --> 01:34:06,000
它只是由 AMD 来做出了一个

2851
01:34:06,000 --> 01:34:09,000
伪 64 M 系统

2852
01:34:09,000 --> 01:34:11,000
它是一个兼容模式

2853
01:34:11,000 --> 01:34:11,000
对

2854
01:34:11,000 --> 01:34:14,000
它扩展了我们之前使用的

2855
01:34:14,000 --> 01:34:16,000
32 M 的 CPU

2856
01:34:16,000 --> 01:34:17,000
然后让

2857
01:34:17,000 --> 01:34:19,000
它可以处理

2858
01:34:19,000 --> 01:34:20,000
就是怎么说呢

2859
01:34:20,000 --> 01:34:21,000
简单来说

2860
01:34:21,000 --> 01:34:29,000
就是 AMD 64 M 的 CPU 可以运行 32 M 的操作手的运用程序

2861
01:34:29,000 --> 01:34:32,000
但是安腾的也是一个纯粹的 64 M 的处理器

2862
01:34:32,000 --> 01:34:33,000
其实是不行的

2863
01:34:33,000 --> 01:34:33,000
对

2864
01:34:33,000 --> 01:34:36,000
这会导致它就有一个什么鸡和蛋的问题

2865
01:34:36,000 --> 01:34:37,000
说

2866
01:34:37,000 --> 01:34:40,000
你有这个 64 M 的机器了

2867
01:34:40,000 --> 01:34:42,000
可是我没有 64 M 的程序要跑

2868
01:34:42,000 --> 01:34:44,000
那我要你那个 64 M 的机器来干什么呢

2869
01:34:44,000 --> 01:34:47,000
于是它那个产品线就挂掉了

2870
01:34:47,000 --> 01:34:47,000
对

2871
01:34:47,000 --> 01:34:51,000
这就是为什么各位还在用 Windows 的朋友们

2872
01:34:51,000 --> 01:34:57,000
你们的 program files 下面会有两个文件夹

2873
01:34:57,000 --> 01:34:58,000
一个叫做 program files

2874
01:34:58,000 --> 01:34:59,000
一个叫做 program files x 64

2875
01:34:59,000 --> 01:35:01,000
还是 x 32

2876
01:35:01,000 --> 01:35:02,000
x 86 吧

2877
01:35:02,000 --> 01:35:02,000
啊

2878
01:35:02,000 --> 01:35:03,000
x 86 对

2879
01:35:03,000 --> 01:35:04,000
对

2880
01:35:04,000 --> 01:35:06,000
ia 32 x 86

2881
01:35:06,000 --> 01:35:06,000
对

2882
01:35:06,000 --> 01:35:08,000
是这样子的

2883
01:35:08,000 --> 01:35:09,000
对

2884
01:35:09,000 --> 01:35:13,000
其中一个里面装着 32 M 的程序

2885
01:35:13,000 --> 01:35:14,000
运用程序

2886
01:35:14,000 --> 01:35:17,000
另外一个装着的纯 64 M 的程序

2887
01:35:17,000 --> 01:35:20,000
这个在 32 M 版的 Windows 上面也有这个区别吗

2888
01:35:20,000 --> 01:35:22,000
我不太清楚

2889
01:35:22,000 --> 01:35:27,000
在 32 M 版的 Windows 上面不会有 program files

2890
01:35:27,000 --> 01:35:30,000
不会有 program files x 64

2891
01:35:30,000 --> 01:35:31,000
因为

2892
01:35:31,000 --> 01:35:32,000
x 86

2893
01:35:32,000 --> 01:35:33,000
对

2894
01:35:33,000 --> 01:35:34,000
就只有一个 program files

2895
01:35:34,000 --> 01:35:35,000
因为它默认就只有 x 86

2896
01:35:35,000 --> 01:35:36,000
对

2897
01:35:36,000 --> 01:35:37,000
就只有一个 program files

2898
01:35:37,000 --> 01:35:38,000
对

2899
01:35:38,000 --> 01:35:42,000
刚才讲到这个虚拟内存的一个最主要的用途

2900
01:35:42,000 --> 01:35:43,000
就是让

2901
01:35:43,000 --> 01:35:44,000
编程的模型

2902
01:35:44,000 --> 01:35:45,000
就是

2903
01:35:45,000 --> 01:35:48,000
不用去考虑说你的这个东西在哪

2904
01:35:48,000 --> 01:35:49,000
然后这个剩下的

2905
01:35:49,000 --> 01:35:53,000
这个调度的问题是交给内核来来操作来做的吗

2906
01:35:53,000 --> 01:35:54,000
对

2907
01:35:54,000 --> 01:35:54,000
啊

2908
01:35:54,000 --> 01:35:56,000
这里就有一个概念叫做 memory hierarchy

2909
01:35:56,000 --> 01:36:01,000
就是内存的存储器的等级

2910
01:36:01,000 --> 01:36:02,000
嗯

2911
01:36:02,000 --> 01:36:05,000
叫等级就要等级吧

2912
01:36:05,000 --> 01:36:06,000
内存层级

2913
01:36:06,000 --> 01:36:07,000
对

2914
01:36:07,000 --> 01:36:12,000
这其实我们知道在这个计算机里面内存其实也不是一个非常

2915
01:36:12,000 --> 01:36:14,000
高级别的

2916
01:36:14,000 --> 01:36:19,000
比较高级就怎么说最快的一个存储设备吧

2917
01:36:19,000 --> 01:36:24,000
最快存储设备其实是在 cpu 里面叫做寄存器的东西 register

2918
01:36:24,000 --> 01:36:28,000
然后他访问大概是多少一个速度

2919
01:36:28,000 --> 01:36:36,000
在现代的一个 cpu 上访问寄存器应该就是真的这个有点有点迷糊了

2920
01:36:36,000 --> 01:36:37,000
0.5 ns

2921
01:36:37,000 --> 01:36:39,000
那个是 le

2922
01:36:39,000 --> 01:36:42,000
啊访问寄存器的速度

2923
01:36:42,000 --> 01:36:43,000
对对

2924
01:36:43,000 --> 01:36:44,000
访问寄存器的速度是多少呢

2925
01:36:44,000 --> 01:36:44,000
多少的一个量级

2926
01:36:44,000 --> 01:36:46,000
访问寄存器需要时间吗

2927
01:36:46,000 --> 01:36:47,000
嗯

2928
01:36:47,000 --> 01:36:50,000
但肯定是在物理上是需要时间的嘛

2929
01:36:50,000 --> 01:36:52,000
他要等那个电路反应

2930
01:36:52,000 --> 01:36:54,000
但是是一个非常非常快速的时间

2931
01:36:54,000 --> 01:36:55,000
对

2932
01:36:55,000 --> 01:36:56,000
对

2933
01:36:56,000 --> 01:36:57,000
可能只需要几个

2934
01:36:57,000 --> 01:37:00,000
几个时钟

2935
01:37:00,000 --> 01:37:01,000
几个几个 cycle

2936
01:37:01,000 --> 01:37:02,000
不用 cycle 吧

2937
01:37:02,000 --> 01:37:03,000
一个 cycle 就能读到

2938
01:37:03,000 --> 01:37:05,000
一个 cycle 就可以读一个 register 吗

2939
01:37:05,000 --> 01:37:07,000
这个我不是很确定

2940
01:37:07,000 --> 01:37:07,000
啊

2941
01:37:07,000 --> 01:37:08,000
需要去回去

2942
01:37:08,000 --> 01:37:10,000
做功课了

2943
01:37:10,000 --> 01:37:10,000
对

2944
01:37:10,000 --> 01:37:14,000
我们暴露出了两个人底气不足

2945
01:37:14,000 --> 01:37:14,000
对

2946
01:37:14,000 --> 01:37:16,000
我们的状况就是没有做功课

2947
01:37:16,000 --> 01:37:18,000
毕竟不是

2948
01:37:18,000 --> 01:37:20,000
毕竟是已经很多年了

2949
01:37:20,000 --> 01:37:21,000
我没有想到

2950
01:37:21,000 --> 01:37:23,000
我没有想到会讲这么低层

2951
01:37:23,000 --> 01:37:23,000
ok

2952
01:37:23,000 --> 01:37:25,000
没有这个就顺便顺便提一下吧

2953
01:37:25,000 --> 01:37:25,000
然后

2954
01:37:25,000 --> 01:37:29,000
然后在 CPU 内部还有一个叫做 le

2955
01:37:29,000 --> 01:37:31,000
就是 layer 1 吧

2956
01:37:31,000 --> 01:37:33,000
layer 1 cache

2957
01:37:33,000 --> 01:37:34,000
layer 1 cache 的这么一个

2958
01:37:34,000 --> 01:37:37,000
就是一级缓存这么一个概念

2959
01:37:37,000 --> 01:37:39,000
一级缓存在现代意义上

2960
01:37:39,000 --> 01:37:41,000
我们是有一个相对好的度量的

2961
01:37:41,000 --> 01:37:43,000
就是大概是 0.5

2962
01:37:43,000 --> 01:37:44,000
就是 0.5

2963
01:37:44,000 --> 01:37:44,000
就是 nano second

2964
01:37:44,000 --> 01:37:45,000
对

2965
01:37:45,000 --> 01:37:46,000
nano second

2966
01:37:46,000 --> 01:37:49,000
一纳秒是多少

2967
01:37:49,000 --> 01:37:51,000
10 的

2968
01:37:51,000 --> 01:37:55,000
就一秒等于 10 的九次方个纳秒

2969
01:37:55,000 --> 01:37:57,000
然后你访问一个一级缓存的话

2970
01:37:57,000 --> 01:37:59,000
是半个纳秒的时间

2971
01:37:59,000 --> 01:38:00,000
对

2972
01:38:00,000 --> 01:38:01,000
嗯

2973
01:38:01,000 --> 01:38:03,000
然后但如果有一级缓存

2974
01:38:03,000 --> 01:38:06,000
那么自然而然也会有所谓的这个二级缓存

2975
01:38:06,000 --> 01:38:13,000
二级缓存在现代 CPU 上通常也是在这个 CPU 芯片上的

2976
01:38:13,000 --> 01:38:13,000
但

2977
01:38:13,000 --> 01:38:15,000
只是离那个

2978
01:38:15,000 --> 01:38:19,000
所谓的计算的内部不那个元器间的距离要远一点

2979
01:38:19,000 --> 01:38:22,000
然后它的容量也会稍微大一点

2980
01:38:22,000 --> 01:38:24,000
一级缓存通常也就是一两

2981
01:38:24,000 --> 01:38:26,000
多少多少 k 吧

2982
01:38:26,000 --> 01:38:28,000
32 k 64 k 的

2983
01:38:28,000 --> 01:38:33,000
若干 k 对对然后 l 2 要大大一点大一点点

2984
01:38:33,000 --> 01:38:38,000
就而且 l 2 kl 2 缓存的大小往往决定了 CPU 的售价

2985
01:38:38,000 --> 01:38:40,000
去 l 1 也是啊

2986
01:38:40,000 --> 01:38:43,000
就越大的 l 1 的价格一般越贵嘛

2987
01:38:43,000 --> 01:38:45,000
这个是肯定是相关的

2988
01:38:45,000 --> 01:38:48,000
因为确实啊做那个的成本很高

2989
01:38:48,000 --> 01:38:49,000
呵呵

2990
01:38:49,000 --> 01:38:49,000
啊

2991
01:38:49,000 --> 01:38:53,000
但是 l 8 的话也通常也是 kb 级别吧

2992
01:38:53,000 --> 01:38:57,000
就有时候大一点的服务器的处理器回到一一两兆应该是没有问题的

2993
01:38:57,000 --> 01:38:59,000
就每个 core 的 l 2 都换车

2994
01:39:00,000 --> 01:39:01,000
嗯

2995
01:39:01,000 --> 01:39:05,000
但是他的读取的时间就会要高一个数量级的

2996
01:39:05,000 --> 01:39:08,000
然后比如说他会在可能几个纳秒的左右

2997
01:39:08,000 --> 01:39:09,000
比如这里我们有一个数据号是给的

2998
01:39:09,000 --> 01:39:11,000
这里是给的是七个啊

2999
01:39:11,000 --> 01:39:12,000
这个这个文档名称

3000
01:39:12,000 --> 01:39:13,000
哦

3001
01:39:13,000 --> 01:39:13,000
这个文档

3002
01:39:13,000 --> 01:39:16,000
我会放在连那个我的诺词里面

3003
01:39:16,000 --> 01:39:17,000
这个文档也非常重要

3004
01:39:17,000 --> 01:39:19,000
如果你是一个程序员的话

3005
01:39:19,000 --> 01:39:22,000
这个文档的名称叫做 latency numbers

3006
01:39:22,000 --> 01:39:23,000
every program should know

3007
01:39:23,000 --> 01:39:24,000
你是这个 program

3008
01:39:24,000 --> 01:39:25,000
你就所以你 should know

3009
01:39:27,000 --> 01:39:30,000
就 l 2 的读取时间大概就是几个纳秒左右

3010
01:39:30,000 --> 01:39:35,000
当然还有一些处理机会有像什么所谓三级缓存啊

3011
01:39:35,000 --> 01:39:36,000
没有见过四级缓存的东西了

3012
01:39:36,000 --> 01:39:39,000
好像没有四级缓存就到内存了

3013
01:39:39,000 --> 01:39:43,000
对四级缓存本应该就已经是很难说啊

3014
01:39:43,000 --> 01:39:44,000
应该可能也有啊

3015
01:39:44,000 --> 01:39:48,000
我没有见过使用的系统上有四级缓存

3016
01:39:48,000 --> 01:39:48,000
ok

3017
01:39:48,000 --> 01:39:51,000
所以说一般最多也就是三级缓存

3018
01:39:51,000 --> 01:39:54,000
这个东西一般是会和 cpu 做在一起的

3019
01:39:54,000 --> 01:39:54,000
对

3020
01:39:54,000 --> 01:39:56,000
但是等你呃

3021
01:39:56,000 --> 01:39:57,000
不还不太一样

3022
01:39:57,000 --> 01:39:59,000
三级缓存有很多是在主板上面的

3023
01:40:00,000 --> 01:40:01,000
what

3024
01:40:01,000 --> 01:40:02,000
你还记得吗

3025
01:40:02,000 --> 01:40:05,000
这个早年就是九十年代末的时候

3026
01:40:05,000 --> 01:40:06,000
有 l 1 l 2 是在板上的

3027
01:40:06,000 --> 01:40:07,000
那是一个芯片上面

3028
01:40:07,000 --> 01:40:10,000
但是三级缓存有很多这种廉价的

3029
01:40:10,000 --> 01:40:12,000
那不叫廉价的主板算吧

3030
01:40:12,000 --> 01:40:13,000
就是那种品级的主板啊

3031
01:40:13,000 --> 01:40:17,000
就平民向的主板还是会把它做在主板上

3032
01:40:17,000 --> 01:40:17,000
对然后这样的话

3033
01:40:17,000 --> 01:40:20,000
他就可以买一个比较便宜的那个 cpu

3034
01:40:20,000 --> 01:40:22,000
不带三级缓存

3035
01:40:22,000 --> 01:40:26,000
嗯对 anyway 就是在这个是一个只是一个工业上的区别

3036
01:40:26,000 --> 01:40:27,000
对这逻辑上是没有任何区别

3037
01:40:27,000 --> 01:40:32,000
就是对呃就总体来说缓存越快

3038
01:40:32,000 --> 01:40:33,000
就是这个存储器越快

3039
01:40:33,000 --> 01:40:34,000
它的容量越小

3040
01:40:34,000 --> 01:40:36,000
比如计算机就只有几个 word 对吧

3041
01:40:36,000 --> 01:40:41,000
呃在一个现在的 cpu 里面就 100 多个计算器吧

3042
01:40:41,000 --> 01:40:43,000
不得了了呃

3043
01:40:43,000 --> 01:40:45,000
然后就是但是速度非常快

3044
01:40:45,000 --> 01:40:48,000
但是就这个最价格最贵

3045
01:40:48,000 --> 01:40:52,000
然后一级缓存就几十 k 价格次之速度也次之

3046
01:40:52,000 --> 01:40:54,000
然后最以此类推

3047
01:40:54,000 --> 01:41:00,000
差不多都是对呃每跨越一个这个缓存的级别

3048
01:41:00,000 --> 01:41:03,000
那就有至少是有一个数量级的

3049
01:41:03,000 --> 01:41:06,000
那个容量和这个访问速度的变化

3050
01:41:06,000 --> 01:41:09,000
就是对呃当然是大概是个意思

3051
01:41:09,000 --> 01:41:12,000
但现在就一般来说呃就编程的话

3052
01:41:12,000 --> 01:41:17,000
我们是看不到说呃一级缓存和二级缓存的这个实体的

3053
01:41:17,000 --> 01:41:20,000
那这个是对你你也没有办法去具体的写一个程序

3054
01:41:20,000 --> 01:41:22,000
说这个程序只用了一级缓存

3055
01:41:22,000 --> 01:41:23,000
对这是不可能的

3056
01:41:23,000 --> 01:41:25,000
因为这个是在叫什么

3057
01:41:25,000 --> 01:41:27,000
这个是超新种硬件

3058
01:41:27,000 --> 01:41:30,000
不这个是计算机硬件帮你去调度解决的问题

3059
01:41:30,000 --> 01:41:36,000
当然你好会编可以做到去选择性的使用呃就什么

3060
01:41:36,000 --> 01:41:36,000
计存器那东西

3061
01:41:36,000 --> 01:41:37,000
那个是另外一说

3062
01:41:38,000 --> 01:41:42,000
对嗯呃但是其实就是说对于一个普通程序来讲暴露

3063
01:41:42,000 --> 01:41:46,000
给你的始终就只是一个内存地址这么一个概念

3064
01:41:46,000 --> 01:41:49,000
然后当然我们说内存它是一关机就没了嘛

3065
01:41:49,000 --> 01:41:52,000
所以你还是要把东西放在一个可以持久化的存储

3066
01:41:52,000 --> 01:41:55,000
比如说磁盘或者现在是 sd 上面去

3067
01:41:55,000 --> 01:41:56,000
但是你看吴涛也讲了

3068
01:41:56,000 --> 01:42:00,000
你要把那些东西漏的进内存里面才可以用才有一个地址可以执行

3069
01:42:00,000 --> 01:42:03,000
对在这个页面上很方便了

3070
01:42:03,000 --> 01:42:08,000
他把这个呃他在下面有一个有一个非常形象的类比

3071
01:42:08,000 --> 01:42:12,000
对他把所有的呃时间都成了

3072
01:42:12,000 --> 01:42:24,000
呃呃一个一个一个比例一倍对十一倍对那么呃以 nano second 乘上十亿就变成了呃一秒对对

3073
01:42:24,000 --> 01:42:29,000
那么 le 缓存的存取时间大概是半秒钟

3074
01:42:29,000 --> 01:42:30,000
就是心跳一下

3075
01:42:30,000 --> 01:42:31,000
心跳一下

3076
01:42:31,000 --> 01:42:35,000
然后二级缓存的存储时间大概是七秒钟

3077
01:42:35,000 --> 01:42:37,000
就是你打一个长征的哈切

3078
01:42:37,000 --> 01:42:39,000
大概二级缓存就到了

3079
01:42:39,000 --> 01:42:41,000
如果你生活在其他世界里的话

3080
01:42:41,000 --> 01:42:42,000
对

3081
01:42:42,000 --> 01:42:43,000
嗯

3082
01:42:43,000 --> 01:42:48,000
访问内存的时间其实就我们都常常觉得内存访问挺快了

3083
01:42:48,000 --> 01:42:49,000
因为比磁盘快多少

3084
01:42:49,000 --> 01:42:51,000
但其实你跟像计算器啊

3085
01:42:51,000 --> 01:42:56,000
要一一级缓存二级缓存比起来还是非常非常慢的一个一个东西啊

3086
01:42:56,000 --> 01:42:59,000
这里就就刚才那个比方这里访问内存的话

3087
01:42:59,000 --> 01:43:02,000
大概现在现在的计算机上大概是一百秒的时候

3088
01:43:02,000 --> 01:43:04,000
就是如果他又成上十亿的话

3089
01:43:04,000 --> 01:43:06,000
一百秒就是一两分钟左右

3090
01:43:06,000 --> 01:43:08,000
对嗯

3091
01:43:08,000 --> 01:43:10,000
这段时间已经够你刷牙

3092
01:43:10,000 --> 01:43:10,000
对

3093
01:43:10,000 --> 01:43:11,000
呵呵

3094
01:43:11,000 --> 01:43:11,000
啊

3095
01:43:11,000 --> 01:43:12,000
这个这个类比

3096
01:43:12,000 --> 01:43:13,000
还挺有意思的

3097
01:43:13,000 --> 01:43:14,000
大家可以去看一下

3098
01:43:14,000 --> 01:43:18,000
如果还有包括像你说你发一个数据包会怎么样

3099
01:43:18,000 --> 01:43:23,000
就是他是这里给的一个例子是从加州发一个数据包到荷兰啊

3100
01:43:23,000 --> 01:43:25,000
再返回来就是一个 run trip

3101
01:43:25,000 --> 01:43:28,000
大概就是五年的时间

3102
01:43:28,000 --> 01:43:29,000
呵呵

3103
01:43:29,000 --> 01:43:31,000
不可想像网络是很慢的

3104
01:43:31,000 --> 01:43:32,000
没错

3105
01:43:32,000 --> 01:43:32,000
对

3106
01:43:32,000 --> 01:43:42,000
所以在很大很很多时候里面呃很多场景里面就是一个程序百无聊赖的在那边死等等等 IO 嘛

3107
01:43:42,000 --> 01:43:46,000
等对等对方书发送一个数据包回来

3108
01:43:46,000 --> 01:43:47,000
对

3109
01:43:47,000 --> 01:43:48,000
就这里其实我们也可以看到了啊

3110
01:43:48,000 --> 01:43:50,000
刚才那个是说等网络是很慢的

3111
01:43:50,000 --> 01:44:04,000
但是我们看一下等的一个磁盘就是访问一个这个这个呃磁盘上的文件就是读一个文件件如果他还没有在内存里面的话是大概是十六十六周左右十六周就是四个月吧

3112
01:44:04,000 --> 01:44:06,000
差不多对做工你学完也蛮客了

3113
01:44:06,000 --> 01:44:08,000
对

3114
01:44:08,000 --> 01:44:20,000
所以所以你看我们现在说很多做那个什么异步的就是现在编程很多你要做一些就是所谓 I 就是 IO heavy 的一些应用像 node 啊这种东西你到走异步的方法吗

3115
01:44:20,000 --> 01:44:24,000
就是因为你可以看到如果你每次 IO 都要等同步的话

3116
01:44:24,000 --> 01:44:26,000
你这个程序就没法玩了

3117
01:44:26,000 --> 01:44:32,000
对你当无形之中浪费了非常非常多宝贵的 CPU 大部分时间都是在闲置的

3118
01:44:35,000 --> 01:44:35,000
呃

3119
01:44:35,000 --> 01:44:36,000
所以呃

3120
01:44:36,000 --> 01:44:44,000
所以有这个 memory 这个这个内存的层级哈就是要如果我们直接把这么多层级暴露给开发者的话

3121
01:44:44,000 --> 01:44:46,000
那显然这个软件工程就不用玩了

3122
01:44:46,000 --> 01:44:48,000
天天那里第八个内存错

3123
01:44:48,000 --> 01:44:52,000
那个内存的问题都已经够你好玩上一阵子了

3124
01:44:52,000 --> 01:44:55,000
所以我们把这东西通过像一些啊

3125
01:44:55,000 --> 01:45:00,000
首先比如说硬件上层面上呃直接隐藏掉一级二级缓存

3126
01:45:00,000 --> 01:45:06,000
然后通过这个虚拟内存这个干扰隐藏掉呃磁盘和内存之间的区别

3127
01:45:06,000 --> 01:45:09,000
这样的话可以把这个编程模型大幅度简化

3128
01:45:09,000 --> 01:45:13,000
让我们这种平庸之辈也能够开开心心的写上程序

3129
01:45:13,000 --> 01:45:18,000
或者应该应该是应该反过来说

3130
01:45:18,000 --> 01:45:24,000
应该是这种进化之后的存在是因为试图让平庸之辈写出来的程序也可以在

3131
01:45:24,000 --> 01:45:27,000
也可以比较体面的跑在脑上

3132
01:45:27,000 --> 01:45:28,000
否则真的是慢的不得了

3133
01:45:28,000 --> 01:45:30,000
或者说是直接就 crash 掉

3134
01:45:30,000 --> 01:45:31,000
对

3135
01:45:31,000 --> 01:45:32,000
嗯

3136
01:45:32,000 --> 01:45:33,000
啊

3137
01:45:33,000 --> 01:45:35,000
不过这里就其实还是牵涉到有一个概念

3138
01:45:35,000 --> 01:45:36,000
就是为什么

3139
01:45:36,000 --> 01:45:39,000
我们要分这么多内存的

3140
01:45:39,000 --> 01:45:40,000
层级

3141
01:45:40,000 --> 01:45:43,000
其实也就是因为穷嘛

3142
01:45:43,000 --> 01:45:44,000
对啊

3143
01:45:44,000 --> 01:45:46,000
因为内存的造价实在是太高了

3144
01:45:46,000 --> 01:45:48,000
就是你如果大家都做成

3145
01:45:48,000 --> 01:45:49,000
首先物理上做不到

3146
01:45:49,000 --> 01:45:51,000
因为你要做成计存器的话

3147
01:45:51,000 --> 01:45:53,000
你得所有东西都在那个芯片里面

3148
01:45:53,000 --> 01:45:53,000
对吧

3149
01:45:53,000 --> 01:45:56,000
但是得靠近那个什么计算元器

3150
01:45:56,000 --> 01:45:58,000
那可能那个物理空间是有限的吧

3151
01:45:58,000 --> 01:45:59,000
也不可能做到

3152
01:45:59,000 --> 01:45:59,000
第二个就是说

3153
01:45:59,000 --> 01:46:01,000
就如果能做到

3154
01:46:01,000 --> 01:46:01,000
比如说

3155
01:46:01,000 --> 01:46:05,000
我们都用把一级缓存做成 500 兆

3156
01:46:05,000 --> 01:46:06,000
而且

3157
01:46:06,000 --> 01:46:06,000
嗯

3158
01:46:06,000 --> 01:46:07,000
,一个机

3159
01:46:07,000 --> 01:46:08,000
哎呀

3160
01:46:08,000 --> 01:46:09,000
也可以

3161
01:46:09,000 --> 01:46:12,000
但是这个成本就不是天文数字了

3162
01:46:12,000 --> 01:46:13,000
不可以想象

3163
01:46:13,000 --> 01:46:17,000
可能比尔盖茨也只能买两台而已

3164
01:46:17,000 --> 01:46:18,000
哈哈哈

3165
01:46:18,000 --> 01:46:19,000
买了半台都不错了

3166
01:46:19,000 --> 01:46:21,000
嗯

3167
01:46:21,000 --> 01:46:22,000
但是呃

3168
01:46:22,000 --> 01:46:27,000
就说内存层级搞这么复杂也是为了向现实的一个妥协嘛

3169
01:46:27,000 --> 01:46:30,000
就是在我们怎么把这个东西做尽量便宜

3170
01:46:30,000 --> 01:46:32,000
那么越慢东西越便宜

3171
01:46:32,000 --> 01:46:33,000
对吧

3172
01:46:33,000 --> 01:46:35,000
所以那就那就慢一点了

3173
01:46:35,000 --> 01:46:36,000
那就要通过这种

3174
01:46:36,000 --> 01:46:42,000
这种分层级的方式来隐藏掉我们实际上用一个很便宜很慢的一个设备

3175
01:46:42,000 --> 01:46:42,000
对啊

3176
01:46:42,000 --> 01:46:45,000
然后把剩余的好刚都就是花钱

3177
01:46:45,000 --> 01:46:46,000
用在刀刃上

3178
01:46:46,000 --> 01:46:47,000
不刀尖上

3179
01:46:47,000 --> 01:46:51,000
其实我刚才刚才想了一下

3180
01:46:51,000 --> 01:46:57,000
假设一个晶圆一个圆形的晶圆完全用来做缓存

3181
01:46:57,000 --> 01:46:58,000
嗯

3182
01:46:58,000 --> 01:47:00,000
大概要多少钱呢

3183
01:47:00,000 --> 01:47:02,000
一个晶圆片吗

3184
01:47:02,000 --> 01:47:02,000
对

3185
01:47:02,000 --> 01:47:04,000
就整整个一大片晶圆

3186
01:47:04,000 --> 01:47:04,000
嗯

3187
01:47:04,000 --> 01:47:04,000
嗯

3188
01:47:04,000 --> 01:47:04,000
嗯

3189
01:47:04,000 --> 01:47:04,000
嗯

3190
01:47:04,000 --> 01:47:04,000
嗯

3191
01:47:04,000 --> 01:47:04,000
嗯

3192
01:47:04,000 --> 01:47:04,000
嗯

3193
01:47:04,000 --> 01:47:05,000
嗯

3194
01:47:05,000 --> 01:47:05,000
嗯

3195
01:47:05,000 --> 01:47:05,000
嗯

3196
01:47:05,000 --> 01:47:05,000
嗯

3197
01:47:05,000 --> 01:47:05,000
嗯

3198
01:47:05,000 --> 01:47:05,000
嗯

3199
01:47:05,000 --> 01:47:05,000
嗯

3200
01:47:05,000 --> 01:47:05,000
嗯

3201
01:47:05,000 --> 01:47:05,000
嗯

3202
01:47:05,000 --> 01:47:05,000
嗯

3203
01:47:05,000 --> 01:47:05,000
嗯

3204
01:47:05,000 --> 01:47:05,000
嗯

3205
01:47:05,000 --> 01:47:05,000
嗯

3206
01:47:05,000 --> 01:47:05,000
嗯

3207
01:47:05,000 --> 01:47:05,000
嗯

3208
01:47:05,000 --> 01:47:06,000
,

3209
01:47:35,000 --> 01:47:35,000
嗯

3210
01:47:35,000 --> 01:47:37,000
三维布线也是一个很常用的一个思路

3211
01:47:37,000 --> 01:47:37,000
但是问题就是说

3212
01:47:37,000 --> 01:47:38,000
这个始终是一个

3213
01:47:38,000 --> 01:47:40,000
你就无非是从二维变成了三维

3214
01:47:40,000 --> 01:47:43,000
你的这个总的空间始终还是有限

3215
01:47:43,000 --> 01:47:44,000
就不可能无限制的

3216
01:47:44,000 --> 01:47:47,000
就是不管是从物理现实的角度考虑

3217
01:47:47,000 --> 01:47:49,000
还是从一个经济的角度考虑

3218
01:47:49,000 --> 01:47:51,000
都一定是存在这么一个

3219
01:47:51,000 --> 01:47:53,000
不同等级的存储

3220
01:47:53,000 --> 01:47:56,000
的访问时间和容量的限制

3221
01:47:56,000 --> 01:47:59,000
除非你可以在非常微小的尺度上

3222
01:47:59,000 --> 01:48:00,000
开一大堆 portal

3223
01:48:00,000 --> 01:48:01,000
然后

3224
01:48:01,000 --> 01:48:03,000
可以开高维空间

3225
01:48:03,000 --> 01:48:06,000
对就彻底解决了放速的问题

3226
01:48:06,000 --> 01:48:09,000
那个作弊了

3227
01:48:09,000 --> 01:48:11,000
回到我们正常的现实世界

3228
01:48:11,000 --> 01:48:12,000
对

3229
01:48:12,000 --> 01:48:15,000
但有一个挺麻烦的问题

3230
01:48:15,000 --> 01:48:17,000
就是说内存

3231
01:48:17,000 --> 01:48:18,000
它是我们现在用的主要的内存

3232
01:48:18,000 --> 01:48:21,000
它是一个叫做意识性的内存

3233
01:48:21,000 --> 01:48:23,000
叫做 volatile 的内存

3234
01:48:23,000 --> 01:48:23,000
什么意思呢

3235
01:48:23,000 --> 01:48:23,000
就是

3236
01:48:23,000 --> 01:48:26,000
volatile 这个词本意是挥发吧

3237
01:48:26,000 --> 01:48:27,000
我记得

3238
01:48:27,000 --> 01:48:27,000
对

3239
01:48:27,000 --> 01:48:28,000
就是挥发的意思

3240
01:48:28,000 --> 01:48:29,000
挥化肥会挥发

3241
01:48:29,000 --> 01:48:32,000
内存会挥发

3242
01:48:32,000 --> 01:48:32,000
对

3243
01:48:32,000 --> 01:48:33,000
就是

3246
01:49:33,000 --> 01:49:34,000
就是挥发的意思

3247
01:49:34,000 --> 01:49:35,000
就是说

3248
01:49:35,000 --> 01:49:36,000
你现在在一个人的身体之外

3249
01:49:36,000 --> 01:49:37,000
但是正常情况下

3250
01:49:37,000 --> 01:49:38,000
你一旦断电之后

3251
01:49:38,000 --> 01:49:39,000
内存中的数据就已经没有了

3252
01:49:39,000 --> 01:49:40,000
就就清零了

3253
01:49:40,000 --> 01:49:41,000
然后你在通电的时候里面

3254
01:49:41,000 --> 01:49:42,000
哎

3255
01:49:42,000 --> 01:49:43,000
他这些什么不记得了

3256
01:49:43,000 --> 01:49:44,000
呃

3257
01:49:44,000 --> 01:49:45,000
这个很明显就是一个问题啊

3258
01:49:45,000 --> 01:49:46,000
那比如说你电脑关机之后

3259
01:49:46,000 --> 01:49:47,000
什么资料都没有了

3260
01:49:47,000 --> 01:49:48,000
那你搞什么白搞了

3261
01:49:48,000 --> 01:49:49,000
对

3262
01:49:49,000 --> 01:49:50,000
这也就是我们为什么会会需要软盘

3263
01:49:50,000 --> 01:49:51,000
或者说需要外置磁盘这种东西

3264
01:49:51,000 --> 01:49:52,000
对

3265
01:49:52,000 --> 01:49:53,000
就是一盘啊

3266
01:49:53,000 --> 01:49:54,000
之前的软盘也好

3267
01:49:54,000 --> 01:49:55,000
它都是一个所谓的 nanvolatile 的存储界

3268
01:49:55,000 --> 01:49:56,000
就是非意识性的存储

3269
01:49:56,000 --> 01:49:57,000
就是断电之后还还在

3270
01:49:57,000 --> 01:49:58,000
对

3271
01:49:58,000 --> 01:49:59,000
呃

3272
01:49:59,000 --> 01:50:00,000
但其实这两个中间是有一定的这个障碍的

3273
01:50:00,000 --> 01:50:01,000
嗯

3274
01:50:01,000 --> 01:50:02,000
刚才我讲了

3275
01:50:02,000 --> 01:50:03,000
因为计算机并就起码操作系统并不能直接执行硬盘上面的

3276
01:50:03,000 --> 01:50:04,000
东西

3277
01:50:04,000 --> 01:50:05,000
他得先读到内存里面去

3278
01:50:05,000 --> 01:50:06,000
所以每次都会有这么一个很变态的这么一个

3279
01:50:06,000 --> 01:50:07,000
呃

3280
01:50:07,000 --> 01:50:08,000
读取

3281
01:50:08,000 --> 01:50:09,000
然后写内存

3282
01:50:09,000 --> 01:50:10,000
然后的一个过程

3283
01:50:10,000 --> 01:50:11,000
呃

3284
01:50:11,000 --> 01:50:12,000
然后最后就是这个

3285
01:50:12,000 --> 01:50:14,000
然后对于一个软件的开发者来讲

3286
01:50:14,000 --> 01:50:15,000
你也要做一些很奇怪的事情

3287
01:50:15,000 --> 01:50:16,000
比如说

3288
01:50:16,000 --> 01:50:17,000
我们做这个

3289
01:50:17,000 --> 01:50:18,000
所以会有一个序列化解序列化的东西

3290
01:50:18,000 --> 01:50:19,000
就是你把一个数据文件读到呃

3291
01:50:19,000 --> 01:50:20,000
内存中

3292
01:50:20,000 --> 01:50:21,000
然后你要保存的时候

3293
01:50:21,000 --> 01:50:22,000
你还得想办法

3294
01:50:22,000 --> 01:50:23,000
他他把把它写回来

3295
01:50:23,000 --> 01:50:24,000
然后把他写回来

3296
01:50:24,000 --> 01:50:25,000
然后你再来做一个内存的设计

3297
01:50:25,000 --> 01:50:26,000
嗯

3298
01:50:26,000 --> 01:50:27,000
那就是一个很奇怪的事情

3299
01:50:27,000 --> 01:50:28,000
就是你把一个数据文件

3300
01:50:28,000 --> 01:50:29,000
读到呃

3301
01:50:29,000 --> 01:50:30,000
内存中

3302
01:50:30,000 --> 01:50:31,000
然后你还得想办法

3303
01:50:31,000 --> 01:50:32,000
他他把它写回来

3304
01:50:32,000 --> 01:50:33,000
然后你还得想办法

3305
01:50:33,000 --> 01:50:34,000
他把他写回来

3306
01:50:34,000 --> 01:50:35,000
然后你还得想办法

3307
01:50:35,000 --> 01:50:36,000
他把他写回来

3308
01:50:36,000 --> 01:50:37,000
然后你还得想办法

3309
01:50:37,000 --> 01:50:38,000
他把他写回来

3310
01:50:38,000 --> 01:50:39,000
然后你还得想办法

3311
01:50:39,000 --> 01:50:40,000
他他把他写回来

3312
01:50:40,000 --> 01:50:41,000
然后写回来

3313
01:50:41,000 --> 01:50:42,000
那中间你都会想

3314
01:50:42,000 --> 01:50:43,000
怎么把这个内存中的一个结构

3315
01:50:43,000 --> 01:50:44,000
呃

3316
01:50:44,000 --> 01:50:45,000
变成磁盘上面的一个

3317
01:50:45,000 --> 01:50:46,000
呃

3318
01:50:46,000 --> 01:50:47,000
一个一组的一个二进制的流

3319
01:50:47,000 --> 01:50:48,000
对吧

3320
01:50:48,000 --> 01:50:49,000
对

3321
01:50:49,000 --> 01:50:50,000
呃

3322
01:50:50,000 --> 01:50:51,000
这个不一定是二一制的

3323
01:50:51,000 --> 01:50:52,000
但

3324
01:50:52,000 --> 01:50:53,000
但

3325
01:50:53,000 --> 01:50:54,000
最后

3326
01:50:54,000 --> 01:50:55,000
最后会不会变成一种

3327
01:50:55,000 --> 01:50:56,000
就就就核心要点是说

3328
01:50:56,000 --> 01:50:57,000
就就就核心要点是说

3329
01:50:57,000 --> 01:50:58,000
就就就核心要点是说

3330
01:50:58,000 --> 01:50:59,000
这个解这个数据结构在内存中

3331
01:50:59,000 --> 01:51:00,000
这个解这个数据结构在内存中

3332
01:51:00,000 --> 01:51:01,000
是存在一定形态的一个方式和结构组织

3333
01:51:01,000 --> 01:51:02,000
是存在一定形态的一个方式和结构组织

3334
01:51:02,000 --> 01:51:03,000
是存在一定形态的一个方式和结构组织

3335
01:51:03,000 --> 01:51:04,000
通过这个指针的方式

3336
01:51:04,000 --> 01:51:05,000
通过这个指针的方式

3337
01:51:05,000 --> 01:51:06,000
通过这个指针的方式

3338
01:51:06,000 --> 01:51:07,000
通过这个指针的方式

3339
01:51:07,000 --> 01:51:08,000
对

3340
01:51:08,000 --> 01:51:10,000
你不是想办法把这个结构

3341
01:51:10,000 --> 01:51:12,000
转化为某种

3342
01:51:12,000 --> 01:51:13,000
可以复原的

3343
01:51:13,000 --> 01:51:14,000
对

3344
01:51:14,000 --> 01:51:15,000
呃

3345
01:51:15,000 --> 01:51:16,000
一个一个一个一个字节串

3346
01:51:16,000 --> 01:51:17,000
对

3347
01:51:17,000 --> 01:51:18,000
或者是二进二深字的 ocean

3348
01:51:18,000 --> 01:51:20,000
或者是二歌

3349
01:51:20,000 --> 01:51:21,000
二度

3350
01:51:21,000 --> 01:51:22,000
嗯

3351
01:51:22,000 --> 01:51:22,000
对

3352
01:51:22,000 --> 01:51:23,000
对

3353
01:51:23,000 --> 01:51:24,000
对

3354
01:51:24,000 --> 01:51:25,000
所以有这么一个序联化解序

3355
01:51:25,000 --> 01:51:26,000
对

3356
01:51:26,000 --> 01:51:27,000
所以有这么一个序联化解序

3357
01:51:27,000 --> 01:51:28,000
guys

3358
01:51:28,000 --> 01:51:29,000
其实这点是

3359
01:51:29,000 --> 01:51:29,000
其实这点是

3360
01:51:29,000 --> 01:51:32,000
做成一个叫做非易失的

3361
01:51:32,000 --> 01:51:33,000
就是内存关机之后

3362
01:51:33,000 --> 01:51:35,000
它在开就断电之后

3363
01:51:35,000 --> 01:51:36,000
再通电还能记住之前内容

3364
01:51:36,000 --> 01:51:37,000
那你想象一下

3365
01:51:37,000 --> 01:51:39,000
我们这个日常使用的计算机

3366
01:51:39,000 --> 01:51:40,000
就是一个很爽的状态

3367
01:51:40,000 --> 01:51:41,000
开机不用等

3368
01:51:41,000 --> 01:51:44,000
想不用的时候按掉拔掉电源线

3369
01:51:44,000 --> 01:51:45,000
就是你不用关机

3370
01:51:45,000 --> 01:51:46,000
把电池拔掉都没问题

3371
01:51:46,000 --> 01:51:48,000
然后你插电之后

3372
01:51:48,000 --> 01:51:50,000
又回到那个画面了

3373
01:51:50,000 --> 01:51:51,000
一模一样

3374
01:51:51,000 --> 01:51:52,000
我有一个问题

3375
01:51:52,000 --> 01:51:54,000
就是比如说 MP 3 播放器

3376
01:51:54,000 --> 01:51:56,000
或者是

3377
01:51:56,000 --> 01:51:59,000
就比如说单片机

3378
01:51:59,000 --> 01:52:02,000
有些单片机使用的存储器

3379
01:52:02,000 --> 01:52:04,000
的确是非 nonvolta

3380
01:52:04,000 --> 01:52:07,000
对有这种

3381
01:52:07,000 --> 01:52:07,000
有很

3382
01:52:07,000 --> 01:52:09,000
这个叫什么

3383
01:52:09,000 --> 01:52:11,000
比较小的情况下

3384
01:52:11,000 --> 01:52:13,000
它会有这种应用

3385
01:52:13,000 --> 01:52:14,000
就是它能够关掉

3386
01:52:14,000 --> 01:52:15,000
然后重启之后

3387
01:52:15,000 --> 01:52:16,000
它还在那个状态

3388
01:52:16,000 --> 01:52:18,000
对所以这种机器

3389
01:52:18,000 --> 01:52:22,000
实际上是没有这个问题存在

3390
01:52:22,000 --> 01:52:24,000
就是它无所谓

3391
01:52:24,000 --> 01:52:24,000
什么都什么

3392
01:52:24,000 --> 01:52:26,000
就是它完全不会

3393
01:52:26,000 --> 01:52:27,000
区分什么是

3394
01:52:27,000 --> 01:52:29,000
一个程序在运行的状态

3395
01:52:29,000 --> 01:52:30,000
以及什么是一个程序

3396
01:52:30,000 --> 01:52:33,000
被被被被折叠起来的

3397
01:52:33,000 --> 01:52:34,000
对被折叠起来

3398
01:52:34,000 --> 01:52:36,000
被存储起来的状态

3399
01:52:36,000 --> 01:52:38,000
对就如果它是用这种

3400
01:52:38,000 --> 01:52:39,000
非意识性的内存的话

3401
01:52:39,000 --> 01:52:41,000
它就是真的可以做到这一点

3402
01:52:41,000 --> 01:52:41,000
而且

3403
01:52:41,000 --> 01:52:44,000
但这个硬件上具体怎么样

3404
01:52:44,000 --> 01:52:44,000
我们先不说

3405
01:52:44,000 --> 01:52:46,000
但我们就只讨论这种

3406
01:52:46,000 --> 01:52:48,000
这种如果这种是一个主流的方式

3407
01:52:48,000 --> 01:52:49,000
到我们作为一个开发者

3408
01:52:49,000 --> 01:52:50,000
作为一个程式员

3409
01:52:50,000 --> 01:52:52,000
这编程模型就很爽了

3410
01:52:52,000 --> 01:52:54,000
比如说你不用想什么

3411
01:52:54,000 --> 01:52:55,000
什么持久化

3412
01:52:55,000 --> 01:52:57,000
就经常我们现在比如说做什么

3413
01:52:57,000 --> 01:52:58,000
后端开发

3414
01:52:58,000 --> 01:53:00,000
要考虑说内存

3415
01:53:00,000 --> 01:53:02,000
这个机器死机了

3416
01:53:02,000 --> 01:53:03,000
就服务器当机了

3417
01:53:03,000 --> 01:53:05,000
我内存中的数据不就没了吗

3418
01:53:05,000 --> 01:53:06,000
那我又没写到磁盘上面

3419
01:53:06,000 --> 01:53:07,000
不就丢了吗

3420
01:53:07,000 --> 01:53:07,000
对吧

3421
01:53:07,000 --> 01:53:09,000
就会有这种担忧

3422
01:53:09,000 --> 01:53:11,000
然后会用通过各种方法

3423
01:53:11,000 --> 01:53:13,000
去想办法掩盖

3424
01:53:13,000 --> 01:53:15,000
就是去处理

3425
01:53:15,000 --> 01:53:16,000
针对这种类型手机

3426
01:53:16,000 --> 01:53:17,000
已经在处理

3427
01:53:17,000 --> 01:53:19,000
但是如果你的内存是非意识的话

3428
01:53:19,000 --> 01:53:20,000
就很爽了

3429
01:53:20,000 --> 01:53:23,000
那就直接再重启一下

3430
01:53:23,000 --> 01:53:24,000
对吧

3431
01:53:24,000 --> 01:53:24,000
对

3432
01:53:24,000 --> 01:53:25,000
就再通电

3433
01:53:25,000 --> 01:53:27,000
还是那个状态

3434
01:53:27,000 --> 01:53:28,000
我们也不用去考虑什么

3435
01:53:28,000 --> 01:53:30,000
序列化解序列化

3436
01:53:30,000 --> 01:53:31,000
就开机刚讲

3437
01:53:31,000 --> 01:53:32,000
序列化解决

3438
01:53:32,000 --> 01:53:35,000
就是我们开机要等那么长的

3439
01:53:35,000 --> 01:53:37,000
一个时间的最主要的原因

3440
01:53:37,000 --> 01:53:37,000
你要等那个东西

3441
01:53:37,000 --> 01:53:40,000
从磁盘上夹着的内存里面去

3442
01:53:40,000 --> 01:53:42,000
要把一个序列化的压制

3443
01:53:42,000 --> 01:53:43,000
你可以想象成

3444
01:53:43,000 --> 01:53:44,000
它比较压缩

3445
01:53:44,000 --> 01:53:47,000
变成一个转写的结构

3446
01:53:47,000 --> 01:53:48,000
再变成内存中的一个结构

3447
01:53:48,000 --> 01:53:50,000
这个是要花时间等的

3448
01:53:50,000 --> 01:53:51,000
但是序列化

3449
01:53:51,000 --> 01:53:53,000
其实还有另外一个用途

3450
01:53:53,000 --> 01:53:54,000
或者说序列化

3451
01:53:54,000 --> 01:53:55,000
也比较主要的用途

3452
01:53:55,000 --> 01:53:57,000
就是数据传输

3453
01:53:57,000 --> 01:53:58,000
为了传输数据

3454
01:53:58,000 --> 01:54:00,000
你不得不把它序列化

3455
01:54:00,000 --> 01:54:03,000
就是传输媒介本身是

3456
01:54:03,000 --> 01:54:04,000
传输的时候

3457
01:54:04,000 --> 01:54:05,000
肯定是要进行序列化

3458
01:54:05,000 --> 01:54:06,000
但是就是说

3459
01:54:06,000 --> 01:54:07,000
如果你是作为一个

3460
01:54:07,000 --> 01:54:08,000
比如你操作系统

3461
01:54:08,000 --> 01:54:08,000
你每天启动的时候

3462
01:54:08,000 --> 01:54:10,000
你不需要和别人传输什么

3463
01:54:10,000 --> 01:54:10,000
你不需要

3464
01:54:10,000 --> 01:54:11,000
你这个操作系统

3465
01:54:11,000 --> 01:54:13,000
不是从另外一个网络上传过来的吗

3466
01:54:13,000 --> 01:54:14,000
对吧

3467
01:54:14,000 --> 01:54:14,000
对

3468
01:54:14,000 --> 01:54:15,000
大部分情况下

3469
01:54:15,000 --> 01:54:16,000
但也有那种什么 Netboot

3470
01:54:16,000 --> 01:54:19,000
那个情况再说

3471
01:54:19,000 --> 01:54:22,000
就是你启动你的电脑的时候

3472
01:54:22,000 --> 01:54:25,000
你的操作系统是不需要等网络

3473
01:54:25,000 --> 01:54:26,000
才能启动的

3474
01:54:26,000 --> 01:54:27,000
所以这个时候

3475
01:54:27,000 --> 01:54:28,000
如果我们能做到一个

3476
01:54:28,000 --> 01:54:30,000
非易失的内存的话

3477
01:54:30,000 --> 01:54:31,000
一切都是爽

3478
01:54:31,000 --> 01:54:33,000
开机就可以有了

3479
01:54:33,000 --> 01:54:34,000
关机就可以走了

3480
01:54:34,000 --> 01:54:37,000
但传统上这个是做

3481
01:54:37,000 --> 01:54:39,000
传统上我们做不到

3482
01:54:39,000 --> 01:54:39,000
因为也是一个

3483
01:54:39,000 --> 01:54:42,000
就是工业现实和成本的考量

3484
01:54:42,000 --> 01:54:44,000
就是非易失的内存是有的

3485
01:54:44,000 --> 01:54:46,000
但是一个是比较贵

3486
01:54:46,000 --> 01:54:47,000
然后另外一个就是

3487
01:54:47,000 --> 01:54:48,000
它的访问速度

3488
01:54:48,000 --> 01:54:50,000
存取速度不尽如人意

3489
01:54:50,000 --> 01:54:51,000
对

3490
01:54:51,000 --> 01:54:53,000
最大的问题就还是太慢了

3491
01:54:53,000 --> 01:54:53,000
对

3492
01:54:53,000 --> 01:54:54,000
慢和贵

3493
01:54:54,000 --> 01:54:55,000
就是要么

3494
01:54:55,000 --> 01:54:56,000
都是要么

3495
01:54:56,000 --> 01:54:58,000
就是你要有其中一个的必比

3496
01:54:58,000 --> 01:55:02,000
然后最近有一个所谓的什么

3497
01:55:02,000 --> 01:55:03,000
D

3498
01:55:03,000 --> 01:55:06,000
你知道传统那么三大类电容

3499
01:55:06,000 --> 01:55:07,000
不叫什么电器

3500
01:55:07,000 --> 01:55:10,000
电容电阻和电导

3501
01:55:10,000 --> 01:55:12,000
就是导线

3502
01:55:12,000 --> 01:55:13,000
三大元器件

3503
01:55:13,000 --> 01:55:14,000
我记得

3504
01:55:14,000 --> 01:55:17,000
三大电阻和电

3505
01:55:17,000 --> 01:55:20,000
其实这块马上就要暴露出

3506
01:55:20,000 --> 01:55:23,000
这个是九倍不足了

3507
01:55:23,000 --> 01:55:23,000
因为这个

3508
01:55:23,000 --> 01:55:24,000
因为不是做

3509
01:55:24,000 --> 01:55:25,000
不是

3510
01:55:25,000 --> 01:55:25,000
不是做一一的

3511
01:55:25,000 --> 01:55:27,000
这块真的是完全不太懂

3512
01:55:27,000 --> 01:55:28,000
但是我的电路不考过

3513
01:55:28,000 --> 01:55:31,000
我都没学过

3514
01:55:31,000 --> 01:55:31,000
你比我

3515
01:55:31,000 --> 01:55:32,000
你好

3516
01:55:32,000 --> 01:55:33,000
你还比我还好一些

3517
01:55:33,000 --> 01:55:34,000
不

3518
01:55:34,000 --> 01:55:34,000
anyway

3519
01:55:34,000 --> 01:55:38,000
就是传统上有那么那几种元器件

3520
01:55:38,000 --> 01:55:39,000
电阻电容电感

3521
01:55:39,000 --> 01:55:40,000
没错

3522
01:55:40,000 --> 01:55:41,000
还是三大类

3523
01:55:41,000 --> 01:55:42,000
没记错

3524
01:55:42,000 --> 01:55:45,000
所以存在说第四类的这种元器件

3525
01:55:45,000 --> 01:55:45,000
英文叫做

3526
01:55:45,000 --> 01:55:46,000
memory

3527
01:55:46,000 --> 01:55:47,000
memory

3528
01:55:47,000 --> 01:55:49,000
mem

3529
01:55:49,000 --> 01:55:49,000
mem

3530
01:55:49,000 --> 01:55:50,000
mem

3531
01:55:50,000 --> 01:55:54,000
然后中文这里维基百科的翻译叫做

3532
01:55:54,000 --> 01:55:55,000
易

3533
01:55:55,000 --> 01:55:56,000
易组气

3534
01:55:56,000 --> 01:55:58,000
就是记忆的意义

3535
01:55:58,000 --> 01:56:00,000
然后电阻的组

3536
01:56:00,000 --> 01:56:01,000
易组气

3537
01:56:01,000 --> 01:56:02,000
对

3538
01:56:02,000 --> 01:56:03,000
他有一些

3539
01:56:03,000 --> 01:56:06,000
他有一些奇怪的这种物理学电器的特性

3540
01:56:06,000 --> 01:56:08,000
然后我是看不太懂

3541
01:56:08,000 --> 01:56:11,000
但是我知道他的他的作用是什么

3542
01:56:11,000 --> 01:56:13,000
就是对于一个程序来讲

3543
01:56:13,000 --> 01:56:16,000
他的作用就可以让你实现所谓的

3544
01:56:16,000 --> 01:56:18,000
刚才讲一个是非意识的内存

3545
01:56:18,000 --> 01:56:21,000
这是对我来说很重要的一点

3546
01:56:21,000 --> 01:56:22,000
然后这个

3547
01:56:22,000 --> 01:56:23,000
嗯

3549
01:56:53,000 --> 01:56:55,000
这个不够好的一个原子工程吧

3550
01:56:55,000 --> 01:56:56,000
电子电子工程

3551
01:56:56,000 --> 01:56:57,000
whatever

3552
01:56:57,000 --> 01:57:00,000
这个不去纠结那么多细细节的名词了

3553
01:57:00,000 --> 01:57:00,000
对

3554
01:57:00,000 --> 01:57:01,000
还有一个就是说

3555
01:57:01,000 --> 01:57:05,000
他这个易组气可以取代那种传统的电路

3556
01:57:05,000 --> 01:57:08,000
就是我们传统的集成电路那种组合组合的方式

3557
01:57:08,000 --> 01:57:10,000
比如说你要做一个那个什么难的 gate 吗

3558
01:57:10,000 --> 01:57:11,000
嗯

3559
01:57:11,000 --> 01:57:14,000
你可以用这个去构成一种那种计算的元器件

3560
01:57:14,000 --> 01:57:17,000
然后他会实现更小的体积

3561
01:57:17,000 --> 01:57:18,000
然后更

3562
01:57:18,000 --> 01:57:20,000
就更低的功耗吧

3563
01:57:20,000 --> 01:57:21,000
大概是这个意思

3564
01:57:21,000 --> 01:57:22,000
嗯

3565
01:57:22,000 --> 01:57:23,000
但是这个

3566
01:57:23,000 --> 01:57:24,000
对计算来讲

3567
01:57:24,000 --> 01:57:27,000
就对其他他所暴露出来的编程模型的改变

3568
01:57:27,000 --> 01:57:29,000
我觉得这个要小一些

3569
01:57:29,000 --> 01:57:34,000
这个是从硬件层面的就 CPU 的模型暴露出来的使用模型是没有变化的

3570
01:57:34,000 --> 01:57:37,000
使用模型就是说对于一个普通开发者来讲

3571
01:57:37,000 --> 01:57:41,000
可能最大的变化还是说没有这个这个呃

3572
01:57:41,000 --> 01:57:41,000
呃

3573
01:57:41,000 --> 01:57:44,000
内存和这个就没有

3574
01:57:44,000 --> 01:57:49,000
一回一回发现的内存和不一回发现的内存的区别了

3575
01:57:49,000 --> 01:57:53,000
就是你可以不去再去考虑内存管理和

3576
01:57:53,000 --> 01:57:55,000
从磁盘上的调用文件

3577
01:57:55,000 --> 01:57:57,000
因为就只有内存管理这一件事了

3578
01:57:57,000 --> 01:57:58,000
对啊

3579
01:57:58,000 --> 01:57:59,000
而且那个时候也不用考虑

3580
01:57:59,000 --> 01:58:02,000
刚才讲了也不用考虑序列化解序列化一些东西

3581
01:58:02,000 --> 01:58:06,000
因为你直接操作的就是内存中的这个数据结构

3582
01:58:06,000 --> 01:58:11,000
然后这个数据结构关机后也是会被持久化下来的

3583
01:58:11,000 --> 01:58:12,000
存下来的

3584
01:58:12,000 --> 01:58:15,000
然后这样你开机的后你还是回到那个程序原先的状态

3585
01:58:15,000 --> 01:58:16,000
Hello

3586
01:58:16,000 --> 01:58:16,000
IT

3587
01:58:16,000 --> 01:58:18,000
Have you tried turning it off and on again

3588
01:58:18,000 --> 01:58:22,000
就不是就就可以在物理层面层面上实现我们虚

3589
01:58:22,000 --> 01:58:23,000
现在用操作系统的方式去做这个功能了

3590
01:58:23,000 --> 01:58:24,000
这种通过虚拟内存来做的事情

3591
01:58:24,000 --> 01:58:25,000
对

3592
01:58:25,000 --> 01:58:26,000
嗯

3593
01:58:26,000 --> 01:58:27,000
对

3594
01:58:27,000 --> 01:58:29,000
我觉得这个对编程模型的改变还是蛮大的

3595
01:58:29,000 --> 01:58:31,000
不过这里面其实也有一些问题啊

3596
01:58:31,000 --> 01:58:34,000
就是说如果你讲假设这个内存是呃

3597
01:58:34,000 --> 01:58:36,000
叫做非意识的话

3598
01:58:36,000 --> 01:58:40,000
那么如果中间哪里错了 crash 了

3599
01:58:40,000 --> 01:58:42,000
然后导致那个内存状态不对

3600
01:58:42,000 --> 01:58:43,000
嗯

3601
01:58:43,000 --> 01:58:46,000
就这个结果还是蛮奇怪的

3602
01:58:46,000 --> 01:58:46,000
对

3603
01:58:46,000 --> 01:58:51,000
忽然之间你好像没有一个非常好的手段去 reset 了

3604
01:58:51,000 --> 01:58:51,000
对

3605
01:58:51,000 --> 01:58:51,000
对

3606
01:58:51,000 --> 01:58:53,000
就以前那个那个叫什么

3607
01:58:53,000 --> 01:58:53,000
对

3608
01:58:53,000 --> 01:58:55,000
it crowd 里面常说

3609
01:58:55,000 --> 01:58:59,000
对

3610
01:58:59,000 --> 01:59:00,000
就是遇到问题

3611
01:59:00,000 --> 01:59:03,000
现在重开机重启试试了

3612
01:59:03,000 --> 01:59:05,000
重启没问题就就还可以

3613
01:59:05,000 --> 01:59:06,000
因为重启就掉电了

3614
01:59:06,000 --> 01:59:07,000
掉电的话

3615
01:59:07,000 --> 01:59:10,000
底下重来就有一个所谓的一个啊

3616
01:59:10,000 --> 01:59:12,000
clean start

3617
01:59:12,000 --> 01:59:13,000
对

3618
01:59:13,000 --> 01:59:16,000
就是如果计算机是一个状态机的话

3619
01:59:16,000 --> 01:59:19,000
那么重启就可以让它回复到状态机的那个原点

3620
01:59:19,000 --> 01:59:20,000
一般来说

3621
01:59:20,000 --> 01:59:21,000
呃

3622
01:59:21,000 --> 01:59:23,000
程序不稳定都是

3623
01:59:23,000 --> 01:59:27,000
这个状态机走进了一个没有被预见到的状态里面去

3624
01:59:27,000 --> 01:59:28,000
但是通过重启

3625
01:59:28,000 --> 01:59:34,000
你可以让它重新回到那个至少是造计算机的人所预想的可以被控制

3626
01:59:34,000 --> 01:59:37,000
并且已经并且也知道他可以走向何处的地方

3627
01:59:37,000 --> 01:59:38,000
对

3628
01:59:38,000 --> 01:59:40,000
所以所以呃

3629
01:59:40,000 --> 01:59:41,000
但是如果刚讲了

3630
01:59:41,000 --> 01:59:42,000
如果是一个内存是费一式的话

3631
01:59:42,000 --> 01:59:44,000
这点就行不通了

3632
01:59:44,000 --> 01:59:49,000
因为他肯定要采取一些极端的手段来做这个呃灾难恢复啊

3633
01:59:49,000 --> 01:59:52,000
还是故障修复之类的事情

3634
01:59:52,000 --> 01:59:53,000
对嗯啊

3635
01:59:53,000 --> 01:59:57,000
不过但是这个人在讲这个不管是用这个 memory

3636
01:59:57,000 --> 01:59:58,000
st

3637
01:59:58,000 --> 01:59:59,000
memory

3638
01:59:59,000 --> 02:00:03,000
呃一组器还是说说通过虚拟内存的一点

3639
02:00:03,000 --> 02:00:10,000
我们都是在试图说简化这个呃呃开发者的对这个的开发难度

3640
02:00:10,000 --> 02:00:15,000
就通过这种减少这个呃层级的方式来实现的

3641
02:00:15,000 --> 02:00:21,000
其实现在的程序员所唯一需要或者也不是就去还是仍旧

3642
02:00:22,000 --> 02:00:25,000
需要操心一件事情就是序列化和反序列化对吧

3643
02:00:25,000 --> 02:00:26,000
对

3644
02:00:26,000 --> 02:00:31,000
但从整个编程的发展的方向来看

3645
02:00:31,000 --> 02:00:35,000
也许这件事情将来也是要被被被淘汰掉了

3646
02:00:35,000 --> 02:00:41,000
或者说人们可以完全不用再去操心序列化反序列化这件事情对不对

3647
02:00:41,000 --> 02:00:42,000
对对对对

3648
02:00:42,000 --> 02:00:46,000
其实现在已经有这种各种方法可以做一地地呢

3649
02:00:46,000 --> 02:00:48,000
这种事情啊

3650
02:00:48,000 --> 02:00:50,000
对呃

3651
02:00:50,000 --> 02:00:52,000
先还是先说

3652
02:00:52,000 --> 02:00:53,000
手工管理存的

3653
02:00:53,000 --> 02:01:05,000
因为我刚才又缅怀了一下自己当初写 C 程序的时候去会会在一张纸上写说有个东西我在什么地方把它呃 Mlock

3654
02:01:05,000 --> 02:01:12,000
然后要记得应该在什么恰当的时候把它呃 free 掉

3655
02:01:12,000 --> 02:01:13,000
嗯

3656
02:01:13,000 --> 02:01:21,000
就是呃 C 其实 C 源其实给你提供了一个比较贴近硬件的编程模型

3657
02:01:21,000 --> 02:01:22,000
但是他仍旧有一个编程模型的编程模型

3658
02:01:22,000 --> 02:01:27,000
所以他就把呃分配内存这一部分给帮你隐藏起来

3659
02:01:27,000 --> 02:01:31,000
比如说你有想过 Mlock 究竟做了什么吗

3660
02:01:31,000 --> 02:01:35,000
就就我们是会说一个东西分配在堆上

3661
02:01:35,000 --> 02:01:36,000
一个东西分配在站上

3662
02:01:36,000 --> 02:01:38,000
可是可是堆和站这两个东西

3663
02:01:40,000 --> 02:01:42,000
你就站

3664
02:01:42,000 --> 02:01:43,000
你可以通过后面原来操作

3665
02:01:43,000 --> 02:01:46,000
可是堆这个东西怎么通过后面来操作呢

3666
02:01:46,000 --> 02:01:47,000
其实是不行不是吗

3667
02:01:47,000 --> 02:01:52,000
就堆这个东西其实是呃操作系统替你

3668
02:01:52,000 --> 02:01:54,000
虚拟出来的这么一块内存区域而已

3669
02:01:54,000 --> 02:01:55,000
对

3670
02:01:55,000 --> 02:01:56,000
而站则是一个

3671
02:01:56,000 --> 02:01:58,000
嗯

3672
02:01:58,000 --> 02:02:01,000
站其实也是有操作的

3673
02:02:01,000 --> 02:02:02,000
虚拟出来的

3674
02:02:02,000 --> 02:02:05,000
但不用不用那个你不用手工去管理它吗

3675
02:02:05,000 --> 02:02:12,000
对堆和对堆堆和站的操堆和站的抽象层级

3676
02:02:12,000 --> 02:02:13,000
其实是不太一样的

3677
02:02:13,000 --> 02:02:14,000
嗯

3678
02:02:14,000 --> 02:02:15,000
可以这么说吗

3679
02:02:15,000 --> 02:02:15,000
对可以

3680
02:02:15,000 --> 02:02:16,000
对

3681
02:02:16,000 --> 02:02:21,000
然后但是在那个就不是在那个时候你调用一个函数的时候

3682
02:02:21,000 --> 02:02:22,000
你在这个函数里面呢

3683
02:02:22,000 --> 02:02:23,000
里面声明了一个本地面量

3684
02:02:23,000 --> 02:02:26,000
然后这个本地面量其实就是默认分配在站上

3685
02:02:26,000 --> 02:02:27,000
就是站这个东西

3686
02:02:27,000 --> 02:02:28,000
你是没有一个直观的印象说

3687
02:02:28,000 --> 02:02:30,000
我这个东西在站上

3688
02:02:30,000 --> 02:02:33,000
你只有去研究这个语言的原理的时候

3689
02:02:33,000 --> 02:02:34,000
你才会明白什么是什么是站

3690
02:02:34,000 --> 02:02:36,000
对呃

3691
02:02:36,000 --> 02:02:37,000
但是堆这个东西

3692
02:02:37,000 --> 02:02:40,000
你会有显示的至少两个 API 去操作它

3693
02:02:40,000 --> 02:02:41,000
比如一个是一个是 alloc

3694
02:02:41,000 --> 02:02:42,000
一个 mlock

3695
02:02:42,000 --> 02:02:44,000
或者 calloc

3696
02:02:44,000 --> 02:02:45,000
然后一个 free

3697
02:02:45,000 --> 02:02:50,000
就是你会有你会通过 mlock 这件事情拿到一个内存的地址

3698
02:02:50,000 --> 02:02:51,000
但是站是没有这个东西的

3699
02:02:52,000 --> 02:02:53,000
但是不会给你一个东西

3700
02:02:53,000 --> 02:02:55,000
就让你显示的是 push 和 pop 的

3701
02:02:55,000 --> 02:02:56,000
对吧

3702
02:02:56,000 --> 02:02:57,000
对

3703
02:02:57,000 --> 02:02:59,000
说这个 pop dispatch

3704
02:02:59,000 --> 02:03:05,000
我们的友台节目总是让我觉得是出站分发很 hardcore

3705
02:03:05,000 --> 02:03:07,000
像 message 对

3706
02:03:07,000 --> 02:03:11,000
比我们比我们 kernel panic hardcore 多了

3707
02:03:11,000 --> 02:03:13,000
出站分发的 message

3708
02:03:13,000 --> 02:03:14,000
message dispatch

3709
02:03:14,000 --> 02:03:16,000
对

3710
02:03:16,000 --> 02:03:19,000
可是现在的程序员就就幸福很多了

3711
02:03:19,000 --> 02:03:21,000
至少从比如说

3712
02:03:21,000 --> 02:03:26,000
当然 c 加加程序还是要去去操心呃

3713
02:03:26,000 --> 02:03:29,000
就呃一个一个类的那个叫什么

3714
02:03:31,000 --> 02:03:33,000
他要有呃 constructor 中文是什么

3715
02:03:33,000 --> 02:03:36,000
呃构造器对构造函数的

3716
02:03:36,000 --> 02:03:39,000
你还需要去考虑一个类的构造函数

3717
02:03:39,000 --> 02:03:41,000
c 构函数对 c 构函数

3718
02:03:41,000 --> 02:03:45,000
我觉得我小时候觉得这个这个这个这个这个名字好屌

3719
02:03:45,000 --> 02:03:46,000
c 构函数

3720
02:03:47,000 --> 02:03:48,000
然后呃

3721
02:03:49,000 --> 02:03:50,000
在 objective c 里面

3722
02:03:50,000 --> 02:03:58,000
你也需要你也需要去去考虑呃呃什么是就是你需要显示去写一个

3723
02:03:59,000 --> 02:04:03,000
这个一个一个一个呃 interface 的

3724
02:04:03,000 --> 02:04:08,000
implementation 里面你要写这个玩意儿在被 dialog 的时候要做点些事情

3725
02:04:08,000 --> 02:04:12,000
但是你从来不需要去显示的去调用这个 dialog

3726
02:04:12,000 --> 02:04:13,000
他说啊

3727
02:04:13,000 --> 02:04:14,000
这点和现在应该是一样的

3728
02:04:15,000 --> 02:04:16,000
对他会帮你去 call 那个

3729
02:04:16,000 --> 02:04:19,000
但是你还是得要记住这个什么的顺序关系

3730
02:04:19,000 --> 02:04:20,000
你写的时候就要要留意这一点啊

3731
02:04:20,000 --> 02:04:33,000
对然后 c 加对然后 objective c 帮你帮程序员在某种程度上减轻了内存管理的的的的的业务逻辑

3732
02:04:33,000 --> 02:04:35,000
你只需要自己去记住这个东西

3733
02:04:35,000 --> 02:04:37,000
如果有别人还在用

3734
02:04:37,000 --> 02:04:38,000
你就要 retain 一次

3735
02:04:38,000 --> 02:04:40,000
如果有别人已经不再用了

3736
02:04:40,000 --> 02:04:42,000
你就要你就把它 release 一下就好了

3737
02:04:42,000 --> 02:04:48,000
然后只要还有一个人在用这个东西就不会被呃运行时真正的销毁掉

3738
02:04:48,000 --> 02:04:50,000
他就是个叫什么

3739
02:04:50,000 --> 02:04:52,000
arc 吗

3740
02:04:52,000 --> 02:04:53,000
不这是 rc 没有 a

3741
02:04:53,000 --> 02:05:02,000
没有 a reference countingreference counting 就是人要自己去在那边算那个 release 了多少次呃以及 retain 了多少次

3742
02:05:02,000 --> 02:05:07,000
然后 arc 帮你解决的这个问题就是你不用再去显示的 release 和 retain 了

3743
02:05:07,000 --> 02:05:10,000
嗯嗯系统帮你数吗

3744
02:05:10,000 --> 02:05:14,000
对就是 objective c 会在编译期帮你数一遍

3745
02:05:14,000 --> 02:05:23,000
嗯好这应该不是在运行时是输的对编译期的时候会帮你数一遍你这个东西所有的用用的地方他就会帮你自动 retain 一次

3746
02:05:23,000 --> 02:05:27,000
然后所有呃他觉得你已经不会再用的地方他就帮你 release 一下

3747
02:05:27,000 --> 02:05:32,000
嗯所以所以那个还是一个比较原始的方式

3748
02:05:32,000 --> 02:05:34,000
就是对对就有点哎

3749
02:05:34,000 --> 02:05:40,000
如果说呃手动的管理内存是一个就是说是一个老式步枪的话

3750
02:05:40,000 --> 02:05:42,000
你需要自己打一发上一三拉一下枪栓

3751
02:05:42,000 --> 02:05:43,000
嗯那

3752
02:05:44,000 --> 02:05:47,000
呃 arc 就有点像半自动了

3753
02:05:47,000 --> 02:05:53,000
现在就是手工管理内存的时代基本上已经是过去了吧

3754
02:05:53,000 --> 02:06:00,000
就除非你有什么特别除非你是自己是写呃虚拟机或者是编译器的人

3755
02:06:00,000 --> 02:06:05,000
否则你一般是不需要去操心怎么手工管理内存这件事

3756
02:06:05,000 --> 02:06:09,000
他有些那种所谓的什么 performance critical 的东西的时候

3757
02:06:09,000 --> 02:06:11,000
他会要用 c 或 c++来写的时候

3758
02:06:11,000 --> 02:06:14,000
就还会考虑这个内存管理

3759
02:06:14,000 --> 02:06:19,000
的问题或者是或者是在面试的时候告诉你说啊

3760
02:06:19,000 --> 02:06:21,000
你不能使用额外的内存

3761
02:06:21,000 --> 02:06:22,000
你应该怎么回答你应该怎么办

3762
02:06:22,000 --> 02:06:24,000
哈哈哈

3763
02:06:24,000 --> 02:06:25,000
怎么写给 mlock

3764
02:06:25,000 --> 02:06:28,000
对嗯

3765
02:06:28,000 --> 02:06:32,000
那现在就是主流的是一个垃圾回收的机制吗

3766
02:06:32,000 --> 02:06:38,000
对垃圾回收可以说是呃进一步解放了程序员

3767
02:06:38,000 --> 02:06:43,000
就是你有更加清晰而简化的变成四变成模型了

3768
02:06:43,000 --> 02:06:44,000
嗯哼

3769
02:06:44,000 --> 02:06:46,000
当然由此也就降低了

3770
02:06:46,000 --> 02:06:49,000
降低了变成了呃门槛

3771
02:06:49,000 --> 02:06:53,000
怎么说呢提提高了你写出烂代码的几率应该这么说

3772
02:06:53,000 --> 02:06:55,000
你说门槛低了吗

3773
02:06:55,000 --> 02:06:58,000
门槛低有一种负面的负面的意味

3774
02:06:58,000 --> 02:06:59,000
门槛低了是好的是吧

3775
02:06:59,000 --> 02:07:00,000
好吧

3776
02:07:00,000 --> 02:07:03,000
你是从比较正面的角度来理解的这件事情

3777
02:07:03,000 --> 02:07:05,000
但我我总觉得就是门槛

3778
02:07:05,000 --> 02:07:08,000
就是更容易让更多平庸的人写出平庸

3779
02:07:08,000 --> 02:07:09,000
但是 work 的代码

3780
02:07:09,000 --> 02:07:12,000
对但是时间一久就

3781
02:07:12,000 --> 02:07:14,000
这甚至可以说是

3782
02:07:14,000 --> 02:07:14,000
可以这么说就是

3783
02:07:14,000 --> 02:07:20,000
变成模型的简化使得大规模的软件协作成为可能

3784
02:07:20,000 --> 02:07:20,000
对

3785
02:07:20,000 --> 02:07:22,000
呃

3786
02:07:22,000 --> 02:07:25,000
不是大家都是大牛的情况下也能把这个事情做出来

3787
02:07:25,000 --> 02:07:31,000
有一群平庸的人也可以写出一个呃工业级别建状的东西来给大家用

3788
02:07:31,000 --> 02:07:35,000
而不再需要一群先驱者一群 hacker 去

3789
02:07:35,000 --> 02:07:42,000
只有他们才可以写出一个真正的就是居然可以工作的程序来

3790
02:07:42,000 --> 02:07:43,000
对

3791
02:07:43,000 --> 02:07:44,000
对

3792
02:07:44,000 --> 02:07:45,000
social

3793
02:07:45,000 --> 02:07:47,000
Ple president

3794
02:07:47,000 --> 02:07:47,000
должна

3795
02:07:47,000 --> 02:07:49,000
老母

3796
02:07:49,000 --> 02:07:49,000
35

3797
02:07:49,000 --> 02:07:50,000
소� mu

3798
02:07:50,000 --> 02:07:50,000
也可以

3799
02:07:50,000 --> 02:07:51,000
即将

3800
02:07:51,000 --> 02:07:51,000
不能

3801
02:07:51,000 --> 02:07:52,000
让你

3802
02:07:52,000 --> 02:07:52,000
订房

3803
02:07:52,000 --> 02:07:52,000
まり

3804
02:07:52,000 --> 02:07:53,000
卖

3805
02:07:53,000 --> 02:07:53,000
这个

3806
02:07:53,000 --> 02:07:53,000
去

3807
02:07:53,000 --> 02:07:54,000
备

3808
02:07:54,000 --> 02:07:55,000
这个

3809
02:07:55,000 --> 02:07:55,000
步骤

3810
02:07:55,000 --> 02:07:56,000
科车

3811
02:07:56,000 --> 02:07:57,000
才ども

3812
02:07:57,000 --> 02:07:57,000
怎么

3813
02:07:57,000 --> 02:07:58,000
师

3814
02:07:58,000 --> 02:07:58,000
为

3815
02:07:58,000 --> 02:07:58,000
队

3816
02:07:58,000 --> 02:07:58,000
得

3817
02:07:58,000 --> 02:07:59,000
出去

3818
02:07:59,000 --> 02:08:00,000
更有男性

3819
02:08:00,000 --> 02:08:00,000
很

3820
02:08:00,000 --> 02:08:01,000
少

3821
02:08:01,000 --> 02:08:01,000
霸

3822
02:08:01,000 --> 02:08:01,000
firm

3823
02:08:01,000 --> 02:08:01,000
什么

3824
02:08:01,000 --> 02:08:02,000
故

3825
02:08:02,000 --> 02:08:02,000
案

3826
02:08:02,000 --> 02:08:02,000
stairs

3827
02:08:03,000 --> 02:08:03,000
iling

3828
02:08:03,000 --> 02:08:04,000
班

3829
02:08:04,000 --> 02:08:05,000
ades

3830
02:08:05,000 --> 02:08:06,000
c

3831
02:08:08,000 --> 02:08:09,000
什么

3832
02:08:09,000 --> 02:08:10,000
i

3833
02:08:10,000 --> 02:08:12,000
predicted

3834
02:08:12,000 --> 02:08:12,000
东

3835
02:08:12,000 --> 02:08:12,000
comb

3836
02:08:12,000 --> 02:08:13,000
8

3837
02:08:13,000 --> 02:08:14,000
em

3838
02:08:14,000 --> 02:08:16,000
go 出了 1.4

3839
02:08:16,000 --> 02:08:18,000
我去看了一下

3840
02:08:18,000 --> 02:08:20,000
它的那个 release

3841
02:08:20,000 --> 02:08:21,000
release note

3842
02:08:21,000 --> 02:08:23,000
里面有一节写到说

3843
02:08:23,000 --> 02:08:24,000
change to runtime

3844
02:08:24,000 --> 02:08:27,000
它里面写说

3845
02:08:27,000 --> 02:08:29,000
1.4 之前 runtime

3846
02:08:29,000 --> 02:08:32,000
就是什么

3847
02:08:32,000 --> 02:08:33,000
gc 啊

3848
02:08:33,000 --> 02:08:35,000
那个 concurrency 的支持啊

3849
02:08:35,000 --> 02:08:36,000
interface management maps

3850
02:08:36,000 --> 02:08:38,000
slice strings etc

3851
02:08:38,000 --> 02:08:42,000
在 1.4 之前基本上是以 c 来写的

3852
02:08:42,000 --> 02:08:43,000
然后

3853
02:08:43,000 --> 02:08:47,000
包括某些部分用了会编代码

3854
02:08:47,000 --> 02:08:49,000
然后从 1.4 开始

3855
02:08:49,000 --> 02:08:52,000
大部分 runtime 都用

3856
02:08:52,000 --> 02:08:53,000
go 来重写了一遍

3857
02:08:53,000 --> 02:08:54,000
对对

3858
02:08:54,000 --> 02:08:55,000
然后一次

3859
02:08:55,000 --> 02:08:56,000
对

3860
02:08:56,000 --> 02:08:57,000
而且以此来

3861
02:08:57,000 --> 02:08:59,000
带来了一个提升

3862
02:08:59,000 --> 02:09:01,000
就是 garbage collector

3863
02:09:01,000 --> 02:09:02,000
can scan the stacks

3864
02:09:02,000 --> 02:09:04,000
of the programs in the runtime

3865
02:09:04,000 --> 02:09:06,000
and get accurate information

3866
02:09:06,000 --> 02:09:07,000
about what variables are active

3867
02:09:07,000 --> 02:09:08,000
对

3868
02:09:08,000 --> 02:09:09,000
它之前是

3869
02:09:09,000 --> 02:09:10,000
因为它拿不到运行时的

3870
02:09:10,000 --> 02:09:11,000
有些东西嘛

3871
02:09:11,000 --> 02:09:12,000
所以它的那个 gc

3872
02:09:12,000 --> 02:09:13,000
就是它的

3873
02:09:13,000 --> 02:09:13,000
那个 gc

3874
02:09:13,000 --> 02:09:13,000
那个内存

3875
02:09:13,000 --> 02:09:16,000
那就回收是就是这个 in precise

3876
02:09:16,000 --> 02:09:18,000
就是不是很精确

3877
02:09:18,000 --> 02:09:20,000
有时候会漏掉一些东西

3878
02:09:20,000 --> 02:09:20,000
啊

3879
02:09:20,000 --> 02:09:22,000
但是整体来说还可以吧

3880
02:09:22,000 --> 02:09:23,000
它现在变成一个就是

3881
02:09:23,000 --> 02:09:24,000
就完全精确的

3882
02:09:24,000 --> 02:09:28,000
就一定知道哪些指针是可以被

3883
02:09:28,000 --> 02:09:29,000
就是哪些没有被

3884
02:09:29,000 --> 02:09:31,000
被安全回收的对

3885
02:09:31,000 --> 02:09:32,000
然后他们还要做下半

3886
02:09:32,000 --> 02:09:33,000
他们要做另外一件事情

3887
02:09:33,000 --> 02:09:35,000
就是要把这个那就回收

3888
02:09:35,000 --> 02:09:37,000
做一个完全必行化的东西

3889
02:09:37,000 --> 02:09:39,000
因为现在的它的那就回收还是一个

3890
02:09:39,000 --> 02:09:41,000
叫做 stop the war 的嘛

3891
02:09:41,000 --> 02:09:41,000
哦

3892
02:09:41,000 --> 02:09:43,000
加上这边没有

3893
02:09:43,000 --> 02:09:44,000
这个呃

3894
02:09:44,000 --> 02:09:46,000
这个句话要说严谨一点

3895
02:09:46,000 --> 02:09:48,000
就是主流的

3896
02:09:48,000 --> 02:09:50,000
部分这边还是一个问题

3897
02:09:50,000 --> 02:09:51,000
对有这个问题

3898
02:09:51,000 --> 02:09:55,000
就是它在垃圾回收这个机制运行的期间

3899
02:09:55,000 --> 02:09:57,000
其程序的其他部分是暂停的

3900
02:09:57,000 --> 02:09:58,000
对啊

3901
02:09:58,000 --> 02:09:59,000
这就是为什么

3902
02:09:59,000 --> 02:10:00,000
这就是为什么 eclips 那么卡

3903
02:10:00,000 --> 02:10:02,000
哈哈哈

3904
02:10:02,000 --> 02:10:03,000
对也许吧

3905
02:10:03,000 --> 02:10:03,000
对

3906
02:10:03,000 --> 02:10:06,000
但是这个对很多应用来说

3907
02:10:06,000 --> 02:10:07,000
这个就是不可以接受的

3908
02:10:07,000 --> 02:10:11,000
比如说你写一个什么这个股票的实时交易的应用

3909
02:10:11,000 --> 02:10:12,000
那你可能就那可能几十万块钱的应用是不可以接受的

3910
02:10:12,000 --> 02:10:13,000
那你可能就那可能几十万块钱的应用是不可以接受的

3911
02:10:13,000 --> 02:10:14,000
那你可能几十毫秒

3912
02:10:14,000 --> 02:10:15,000
一百毫秒的差别

3913
02:10:15,000 --> 02:10:18,000
那就是上百万的这个经济的损失

3914
02:10:18,000 --> 02:10:18,000
对吧

3915
02:10:18,000 --> 02:10:20,000
所以不可你肯定不可避免

3916
02:10:20,000 --> 02:10:22,000
所以他们有些做金融交易的

3917
02:10:22,000 --> 02:10:25,000
有些就直接用那个什么呃 c++写就这样

3918
02:10:25,000 --> 02:10:27,000
不需要去考虑机制的问题

3919
02:10:27,000 --> 02:10:28,000
然后或者是他用那个 jvm

3920
02:10:28,000 --> 02:10:32,000
但是用改改良过的这种就是所谓的 concurrent

3921
02:10:32,000 --> 02:10:33,000
或者 power gc

3922
02:10:33,000 --> 02:10:35,000
就是并行的 gc

3923
02:10:35,000 --> 02:10:37,000
这些过程中他可以不用停下来一个主程序

3924
02:10:37,000 --> 02:10:40,000
现在 go 的它里面还是这个 stop the war 这种情况啊

3925
02:10:40,000 --> 02:10:42,000
但是他他他是说 1.5 吧

3926
02:10:42,000 --> 02:10:42,000
我记得

3927
02:10:43,000 --> 02:10:43,000
就加了 8 万的人

3928
02:10:43,000 --> 02:10:45,000
他会变成那个 concurrent

3929
02:10:45,000 --> 02:10:46,000
对

3930
02:10:46,000 --> 02:10:47,000
嗯

3931
02:10:47,000 --> 02:10:53,000
这也就回到了刚才说的这个就是整个内存管理的方向还是朝着让

3932
02:10:53,000 --> 02:10:54,000
傻瓜话

3933
02:10:54,000 --> 02:10:56,000
越来越省心的方向来

3934
02:10:56,000 --> 02:10:57,000
对

3935
02:10:57,000 --> 02:10:58,000
来来来演进的

3936
02:10:58,000 --> 02:11:06,000
但是同时也就造成了在真正那些仍旧还是需要就像你说的那个股票操作系统

3937
02:11:06,000 --> 02:11:09,000
mission critical 的场合还是需要手中管理的生意啊

3938
02:11:09,000 --> 02:11:09,000
嗯

3939
02:11:09,000 --> 02:11:12,000
就有些事情还是不得不依靠的

3940
02:11:12,000 --> 02:11:12,000
嗯

3941
02:11:12,000 --> 02:11:13,000
依靠手动管理

3942
02:11:13,000 --> 02:11:18,000
因为手动管理才可以达到那个选项的 performance

3943
02:11:18,000 --> 02:11:20,000
对我记得呃那个啊

3944
02:11:20,000 --> 02:11:21,000
比亚呢

3945
02:11:21,000 --> 02:11:22,000
是什么呀

3946
02:11:22,000 --> 02:11:23,000
比亚呢

3947
02:11:23,000 --> 02:11:30,000
是周四对就是 c++的创始人在我忘了是哪本书里面他吐槽 c 吐槽

3948
02:11:30,000 --> 02:11:31,000
扎吧说呃

3949
02:11:32,000 --> 02:11:32,000
呃

3950
02:11:32,000 --> 02:11:33,000
就他有点炫耀意思

3951
02:11:33,000 --> 02:11:36,000
就是说呃你知道 join strike fighter

3952
02:11:36,000 --> 02:11:37,000
jsF

3953
02:11:37,000 --> 02:11:38,000
嗯

3954
02:11:38,000 --> 02:11:38,000
战斗机

3955
02:11:38,000 --> 02:11:40,000
他是一台 c++战斗机

3956
02:11:40,000 --> 02:11:42,000
就是上面所有的代码都是跑的

3957
02:11:42,000 --> 02:11:43,000
都是 c++

3958
02:11:43,000 --> 02:11:43,000
嗯

3959
02:11:43,000 --> 02:11:45,000
然后呃火星探测器你知道吗

3960
02:11:45,000 --> 02:11:47,000
c++写的

3961
02:11:47,000 --> 02:11:47,000
嗯

3962
02:11:47,000 --> 02:11:49,000
是你用 java 给我写一个看看

3963
02:11:49,000 --> 02:11:50,000
哈哈哈

3964
02:11:50,000 --> 02:11:51,000
大一就是这样

3965
02:11:51,000 --> 02:11:54,000
对对那些的应用场合就比较极端吗

3966
02:11:54,000 --> 02:11:57,000
性能和这个环境要求比较恶劣

3967
02:11:57,000 --> 02:11:59,000
对在这种情况之下

3968
02:11:59,000 --> 02:12:03,000
你还是必不得不手动在加引号的手动去管理

3969
02:12:03,000 --> 02:12:04,000
嗯

3970
02:12:04,000 --> 02:12:18,000
不过这个也有做到就是呃就是在这个技术进步的之后也有说这个程序员还没回过神来呃没有就是没有适应用到最新的这种方法去做了

3971
02:12:18,000 --> 02:12:20,000
这里有一个很很简单的例子

3972
02:12:20,000 --> 02:12:24,000
之前我们提到了这个呃序列化解序列化的问题吗

3973
02:12:24,000 --> 02:12:26,000
但我们要做一些事情的时候

3974
02:12:27,000 --> 02:12:31,000
那呃你有一些文件你要在内存里面去展现

3975
02:12:31,000 --> 02:12:34,000
但是内存又不不不如这个磁盘大吗

3976
02:12:34,000 --> 02:12:39,000
对那么有些人就说那我怎么才能在内存里面去操

3977
02:12:39,000 --> 02:12:41,000
因为只有到内存里面之后

3978
02:12:41,000 --> 02:12:44,000
去操那个那个 cpu 才可以去操作那些数据吗

3979
02:12:44,000 --> 02:12:49,000
所以我有一个这个从磁盘里面读数据读到内存里面去

3980
02:12:49,000 --> 02:12:50,000
然后再处理

3981
02:12:50,000 --> 02:12:53,000
然后再处理完毕再读下一段这么一个过程

3982
02:12:53,000 --> 02:12:54,000
嗯

3983
02:12:54,000 --> 02:12:59,000
但其实在现场操作上面这个事情也已经很大程度上可以完全被避免掉了

3984
02:12:59,000 --> 02:13:02,000
就是通过所谓的使用这个叫做

3985
02:13:02,000 --> 02:13:03,000
哦

3986
02:13:03,000 --> 02:13:04,000
memory map

3987
02:13:04,000 --> 02:13:04,000
memory

3988
02:13:04,000 --> 02:13:04,000
map

3989
02:13:04,000 --> 02:13:05,000
memory mapping

3990
02:13:05,000 --> 02:13:06,000
内存映射这个概念吧

3991
02:13:07,000 --> 02:13:08,000
对

3992
02:13:08,000 --> 02:13:09,000
内存映射大概是什么事情呢

3993
02:13:09,000 --> 02:13:11,000
就操作是提供了这么一个机制

3994
02:13:11,000 --> 02:13:17,000
它可以说你可以指着磁盘上的一个文件大小随意说

3995
02:13:17,000 --> 02:13:21,000
哎我要把这一块文件映射到内存地址里面去

3996
02:13:21,000 --> 02:13:27,000
这样的话我操作是一种呃就我的程序可以直接在呃在起码在界面上

3997
02:13:27,000 --> 02:13:29,000
我直接操纵这个内存的一个区块就好了

3998
02:13:29,000 --> 02:13:34,000
但是具体的那个数据可能并不那个时候并不在内存里面

3999
02:13:34,000 --> 02:13:43,000
然后这个时候是由操作系统去负责去把那个你要访问的那块内存区块的内容从这个磁盘上加载过来

4000
02:13:43,000 --> 02:13:53,000
然后再再管如果说这个这个内存物理空间不足的情况下再把那些没有用到的那些内存区块再放回磁盘上去

4001
02:13:53,000 --> 02:13:55,000
就是内存映射就做这么一件事

4002
02:13:55,000 --> 02:14:00,000
然后其实就在这个就对我们的开发者来讲就是一个启发嘛

4003
02:14:00,000 --> 02:14:04,000
这一篇很好的文章大家我会不会会放在这个 node 里面

4004
02:14:04,000 --> 02:14:09,000
这个是 varnish cash 这个软件就是一个反向代理的常用路线

4005
02:14:09,000 --> 02:14:12,000
你跑服务器后端的话可能会经常接触到这个软件啊

4006
02:14:12,000 --> 02:14:16,000
他们的开发者写了一个就是他的标题叫做啊

4007
02:14:16,000 --> 02:14:23,000
what's wrong with nineteen seventy five programming 就是他说一九七五年的编程模型有什么问题啊

4008
02:14:23,000 --> 02:14:28,000
那么讲的最主要的一个问题就是说刚才一个啊就是内存啊

4009
02:14:28,000 --> 02:14:31,000
就 1975 年的时候还没有没有虚拟内存这个概念吗

4010
02:14:31,000 --> 02:14:34,000
你真的是需要操你程序员手工去考虑

4011
02:14:34,000 --> 02:14:38,000
怎么去从此而让加载一个文件到内存里面去然后再进行操作

4012
02:14:38,000 --> 02:14:40,000
然后再写回去这个过程

4013
02:14:40,000 --> 02:14:47,000
但是到现在已经有这个虚拟内存这个操作组织绝大部分操作组织都已经支持这个东西了

4014
02:14:47,000 --> 02:14:47,000
不然那个 m 了

4015
02:14:47,000 --> 02:14:49,000
给没法写哈

4016
02:14:49,000 --> 02:14:50,000
对嗯

4017
02:14:50,000 --> 02:14:51,000
在这种情况下

4018
02:14:51,000 --> 02:14:54,000
那么我们写程序的时候就可以不许不用考虑这个一些东西

4019
02:14:54,000 --> 02:14:56,000
那比如说最简单的一个呃

4020
02:14:56,000 --> 02:14:59,000
刚才讲的一个持久化和非持久化的问题呃

4021
02:14:59,000 --> 02:15:04,000
持久化和序列化的问题就是那你可以不用考虑说我从内存里面读出

4022
02:15:04,000 --> 02:15:06,000
我一个比如一个树状结构

4023
02:15:06,000 --> 02:15:09,000
然后把它深呃写成一个串流

4024
02:15:09,000 --> 02:15:10,000
再写到磁盘上

4025
02:15:10,000 --> 02:15:15,000
那你直接说我在内存上分配一个比如说一个 GB 的空间啊

4026
02:15:15,000 --> 02:15:16,000
来持久化这个数据

4027
02:15:16,000 --> 02:15:19,000
那我直接把这个空间映射到我内存里面去

4028
02:15:19,000 --> 02:15:22,000
然后直接在里面建我的那个内存结构

4029
02:15:22,000 --> 02:15:30,000
然后超级总会在适当的时候把这些内存里面的数据持久化到磁磁盘上面去从而实现持久化的效果

4030
02:15:30,000 --> 02:15:31,000
但是作为一个程序员

4031
02:15:31,000 --> 02:15:34,000
你又并不用担心自己再去真的去写

4032
02:15:34,000 --> 02:15:35,000
写那个序列化的过程

4033
02:15:37,000 --> 02:15:37,000
没错

4034
02:15:37,000 --> 02:15:41,000
而且一个需要避免的 practice

4035
02:15:41,000 --> 02:15:46,000
或者说一个需要避免的过早优化就是嗯

4036
02:15:46,000 --> 02:15:52,000
尽量也不要总觉得自己有些东西放在内存里面好像没有什么用

4037
02:15:52,000 --> 02:15:55,000
应该先把它从里面挪出来

4038
02:15:55,000 --> 02:15:57,000
然后放在一个磁盘上什么地方

4039
02:15:57,000 --> 02:16:00,000
然后以此来达到节省内存的目的

4040
02:16:00,000 --> 02:16:02,000
这都应该交给操作系统来去

4041
02:16:02,000 --> 02:16:04,000
对这件事也通通应该让

4042
02:16:04,000 --> 02:16:05,000
操作性的安全

4043
02:16:05,000 --> 02:16:05,000
对

4044
02:16:05,000 --> 02:16:06,000
对

4045
02:16:06,000 --> 02:16:09,000
其实说到说到序列化

4046
02:16:09,000 --> 02:16:15,000
就是其实现在有很多网上的云端服务都提供了这样一种变成接口

4047
02:16:15,000 --> 02:16:16,000
就是你可以在程序里面说

4048
02:16:16,000 --> 02:16:17,000
呃

4049
02:16:17,000 --> 02:16:19,000
比如说我用呃

4050
02:16:19,000 --> 02:16:20,000
什么 java script

4051
02:16:20,000 --> 02:16:21,000
嗯

4052
02:16:21,000 --> 02:16:24,000
我 java script 交给你这样一个数据

4053
02:16:24,000 --> 02:16:24,000
嗯

4054
02:16:24,000 --> 02:16:26,000
然后你就把它存下来

4055
02:16:26,000 --> 02:16:27,000
然后给你要的时候

4056
02:16:27,000 --> 02:16:28,000
你把它原样交还给我

4057
02:16:28,000 --> 02:16:29,000
哈哈

4058
02:16:29,000 --> 02:16:31,000
对对

4059
02:16:31,000 --> 02:16:33,000
那个这个不光是在网页上

4060
02:16:33,000 --> 02:16:33,000
包括你

4061
02:16:33,000 --> 02:16:34,000
我

4062
02:16:34,000 --> 02:16:35,000
如果你开发那个 iOS 的话

4063
02:16:35,000 --> 02:16:36,000
应该它有个 core

4064
02:16:36,000 --> 02:16:37,000
core data

4065
02:16:37,000 --> 02:16:39,000
对也是做类似的事情

4066
02:16:39,000 --> 02:16:41,000
对 core data 的编程模型

4067
02:16:41,000 --> 02:16:45,000
我是觉得不是非常的直观

4068
02:16:45,000 --> 02:16:46,000
但它你可以理解

4069
02:16:46,000 --> 02:16:49,000
你可以看到它试图为此

4070
02:16:49,000 --> 02:16:51,000
做出一个比较简单用的接口来

4071
02:16:51,000 --> 02:16:55,000
但是用起来还是挺麻烦的

4072
02:16:55,000 --> 02:16:57,000
我觉得那麻烦的点主要在哪里呢

4073
02:16:57,000 --> 02:16:58,000
嗯

4074
02:16:58,000 --> 02:16:59,000
啰嗦是一方面

4075
02:16:59,000 --> 02:17:02,000
但另外一个是因为 object c 的语法不好

4076
02:17:02,000 --> 02:17:03,000
它是它是对

4077
02:17:04,000 --> 02:17:05,000
internally

4078
02:17:05,000 --> 02:17:05,000
对

4079
02:17:05,000 --> 02:17:07,000
不可避免的

4080
02:17:07,000 --> 02:17:07,000
但

4081
02:17:07,000 --> 02:17:10,000
但我觉得这个这个这个整个这个这个想法

4082
02:17:10,000 --> 02:17:12,000
就是把序列化和持续化这一层

4083
02:17:12,000 --> 02:17:16,000
从这个程序的这个界面里面

4084
02:17:16,000 --> 02:17:17,000
分离开来

4085
02:17:17,000 --> 02:17:19,000
我觉得这个是个挺好的想法

4086
02:17:19,000 --> 02:17:19,000
对

4087
02:17:19,000 --> 02:17:20,000
嗯

4088
02:17:20,000 --> 02:17:21,000
这是没错的

4089
02:17:21,000 --> 02:17:21,000
啊

4090
02:17:21,000 --> 02:17:23,000
就所以这还是说具体到实现的问题

4091
02:17:23,000 --> 02:17:26,000
怎么去怎么去实现这一点

4092
02:17:26,000 --> 02:17:26,000
嗯

4093
02:17:26,000 --> 02:17:30,000
可能我还是 core data 用的不够多吧

4094
02:17:30,000 --> 02:17:30,000
但

4095
02:17:30,000 --> 02:17:33,000
不过 core data 的吐槽的人也不少了

4096
02:17:34,000 --> 02:17:37,000
你你绝对不是唯一的

4097
02:17:37,000 --> 02:17:38,000
所以

4098
02:17:38,000 --> 02:17:39,000
对啊

4099
02:17:39,000 --> 02:17:40,000
ok

4100
02:17:40,000 --> 02:17:43,000
那么今天的啰啰嗦嗦讲了这么多

4101
02:17:43,000 --> 02:17:44,000
那层和

4102
02:17:44,000 --> 02:17:46,000
讲的其实还是有点

4103
02:17:46,000 --> 02:17:48,000
打乱

4104
02:17:48,000 --> 02:17:49,000
算对

4105
02:17:49,000 --> 02:17:52,000
我觉得可能还是咱们两个公体不够吧

4106
02:17:52,000 --> 02:17:53,000
完了

4107
02:17:53,000 --> 02:17:56,000
以后我们还是少碰那种比较 hardcore 的东西

4108
02:17:56,000 --> 02:17:59,000
比较大而硬的话题

4109
02:17:59,000 --> 02:18:01,000
对我们还是应该只谈风月

4110
02:18:01,000 --> 02:18:02,000
如果要做这种话题的话

4111
02:18:02,000 --> 02:18:04,000
我觉得我们可以比如说准备个

4112
02:18:04,000 --> 02:18:05,000
两三个月

4113
02:18:05,000 --> 02:18:08,000
然后写个脚本出来

4114
02:18:08,000 --> 02:18:09,000
然后你说什么

4115
02:18:09,000 --> 02:18:10,000
我说什么

4116
02:18:10,000 --> 02:18:13,000
每一句都要精确的有有有案可查

4117
02:18:13,000 --> 02:18:15,000
然后每一个数据都要

4118
02:18:16,000 --> 02:18:18,000
每个数据都要查核对过

4119
02:18:18,000 --> 02:18:19,000
对吧

4120
02:18:19,000 --> 02:18:23,000
比如说 lrk 的典型尺寸是多少

4121
02:18:23,000 --> 02:18:25,000
我们居然不能脱口而出

4122
02:18:26,000 --> 02:18:27,000
太丢人了

4123
02:18:27,000 --> 02:18:28,000
一兆两兆这个我知道

4124
02:18:28,000 --> 02:18:29,000
ok

4125
02:18:29,000 --> 02:18:30,000
两兆

4126
02:18:30,000 --> 02:18:31,000
对啊

4127
02:18:32,000 --> 02:18:33,000
嗯

4128
02:18:33,000 --> 02:18:34,000
对然后

4129
02:18:34,000 --> 02:18:37,000
这一期的话题之所以会出现

4130
02:18:37,000 --> 02:18:40,000
其实完全是受到 porto 的启发

4131
02:18:40,000 --> 02:18:41,000
我跟你承认

4132
02:18:41,000 --> 02:18:44,000
另外一方面也是我之前有一部

4133
02:18:44,000 --> 02:18:50,000
由此我想到了一个很有名的科幻作家

4134
02:18:50,000 --> 02:18:52,000
叫做 tet chang

4135
02:18:52,000 --> 02:18:53,000
tet chang

4136
02:18:53,000 --> 02:18:56,000
对中文名字叫江峰男

4137
02:18:56,000 --> 02:18:57,000
就如果你读科幻小说的话

4138
02:18:57,000 --> 02:18:58,000
应该会知道这个

4139
02:18:58,000 --> 02:19:02,000
他这个人写过非常多的很有意思的科幻小说

4140
02:19:02,000 --> 02:19:03,000
他有一部就叫

4141
02:19:03,000 --> 02:19:06,000
the life cycle of software objects

4142
02:19:06,000 --> 02:19:08,000
对怎么说

4143
02:19:08,000 --> 02:19:11,000
软件对象的生命周期

4144
02:19:11,000 --> 02:19:13,000
对他里面讲的就是

4145
02:19:13,000 --> 02:19:17,000
当然这个剧情从现在看起来好像有点老

4146
02:19:17,000 --> 02:19:19,000
但他写的时候应该是挺新的

4147
02:19:19,000 --> 02:19:22,000
就是大致就是讲有这么一个像 second life

4148
02:19:22,000 --> 02:19:24,000
这么的一个虚拟世界

4149
02:19:24,000 --> 02:19:28,000
然后里面有一个公司培养出了一大堆人工

4150
02:19:28,000 --> 02:19:31,000
然后他就把这个人物的生命周期

4151
02:19:31,000 --> 02:19:34,000
这个公司培养出了一大堆人工智能

4152
02:19:34,000 --> 02:19:38,000
人工智能是活在 second life 这个世界里面的

4153
02:19:38,000 --> 02:19:39,000
但是他不叫 second life

4154
02:19:39,000 --> 02:19:40,000
叫另外一个

4155
02:19:40,000 --> 02:19:42,000
digital terror 之类的

4156
02:19:42,000 --> 02:19:45,000
数字地球之类的这么一个

4157
02:19:45,000 --> 02:19:47,000
一个一个虚拟的虚拟世界里面

4158
02:19:47,000 --> 02:19:50,000
然后在这个讯息里面跑着一些人工智能

4159
02:19:50,000 --> 02:19:52,000
然后这些人工智能

4160
02:19:52,000 --> 02:19:54,000
是真正的智能

4161
02:19:54,000 --> 02:19:55,000
就是生下来的时候

4162
02:19:55,000 --> 02:19:57,000
这些人工智能诞生的时候

4163
02:19:57,000 --> 02:19:59,000
是没有什么技能的

4164
02:19:59,000 --> 02:20:00,000
然后需要一群训练人

4165
02:20:01,000 --> 02:20:04,000
需要一群人类在里面训练他们学习

4166
02:20:04,000 --> 02:20:06,000
然后教他们做游戏

4167
02:20:06,000 --> 02:20:09,000
然后把他们就是他们有各种各样的形体

4168
02:20:09,000 --> 02:20:10,000
比如说有些人机器人的形状

4169
02:20:10,000 --> 02:20:12,000
有些人是鸭子的形状

4170
02:20:12,000 --> 02:20:15,000
然后除此类

4171
02:20:15,000 --> 02:20:18,000
然后就讲的是人工智能被培育起来的事情

4172
02:20:18,000 --> 02:20:20,000
然后这个文章也是

4173
02:20:20,000 --> 02:20:24,000
这篇文章也是女性视角

4174
02:20:24,000 --> 02:20:26,000
很奇怪女性视角

4175
02:20:26,000 --> 02:20:29,000
然后讲的故事也比较

4176
02:20:29,000 --> 02:20:31,000
其实你读的话

4177
02:20:31,000 --> 02:20:33,000
你会觉得她说的很多事情都很平淡

4178
02:20:33,000 --> 02:20:36,000
比如就讲这个主角是怎么带着这些小人工智能们

4179
02:20:36,000 --> 02:20:38,000
陪他们玩

4180
02:20:38,000 --> 02:20:41,000
然后看他们的一点点的和用户互动

4181
02:20:41,000 --> 02:20:44,000
然后直到后来有把他们装到

4182
02:20:44,000 --> 02:20:47,000
就是实体世界里面做出来的机器人

4183
02:20:47,000 --> 02:20:50,000
就把他们下载到那个机器人里面

4184
02:20:50,000 --> 02:20:52,000
然后带着他们去看

4185
02:20:52,000 --> 02:20:54,000
去体验实体的世界

4186
02:20:54,000 --> 02:20:57,000
然后以及最后人们是怎样

4187
02:20:57,000 --> 02:20:59,000
他们的用户是怎样失去了

4188
02:20:59,000 --> 02:21:01,000
对这种人工智能的形象

4189
02:21:01,000 --> 02:21:03,000
就是人工智能的兴趣

4190
02:21:03,000 --> 02:21:06,000
然后就把这些人工智能要退还

4191
02:21:06,000 --> 02:21:08,000
或者是要冻结

4192
02:21:08,000 --> 02:21:10,000
乃至销毁的这么一个过程

4193
02:21:10,000 --> 02:21:11,000
对

4194
02:21:11,000 --> 02:21:18,000
这篇文章也是有引发我做这样一期主题的动机之一

4195
02:21:18,000 --> 02:21:20,000
但是很显然

4196
02:21:20,000 --> 02:21:25,000
可能出于这个资历和背景的缘故

4197
02:21:25,000 --> 02:21:27,000
还在准备的比较仓促

4198
02:21:27,000 --> 02:21:29,000
做的不是特别的进入人意

4199
02:21:29,000 --> 02:21:30,000
不过

4200
02:21:31,000 --> 02:21:32,000
下次吧

4201
02:21:32,000 --> 02:21:34,000
以后对下次补过来吧

4202
02:21:34,000 --> 02:21:38,000
好那今天的节目就到这里结束了

4203
02:21:38,000 --> 02:21:43,000
对然后我们应该会请大家听一遍

4204
02:21:43,000 --> 02:21:45,000
这个 steel life

4205
02:21:45,000 --> 02:21:47,000
我们的主题曲

4206
02:21:47,000 --> 02:21:50,000
那就下期再见吧

4207
02:21:50,000 --> 02:21:51,000
拜拜

4208
02:21:51,000 --> 02:21:55,000
对忘了这期播出时间的播出之后

4209
02:21:55,000 --> 02:21:57,000
应该就要圣诞节了吧

4210
02:21:57,000 --> 02:22:00,000
我想我们下期应该是

4211
02:22:00,000 --> 02:22:02,000
圣诞节的周末

4212
02:22:02,000 --> 02:22:03,000
我们应该没有节目

4213
02:22:03,000 --> 02:22:05,000
我们是隔一周播一次

4214
02:22:05,000 --> 02:22:06,000
对吧

4215
02:22:06,000 --> 02:22:07,000
这个在意吧

4216
02:22:07,000 --> 02:22:08,000
对

4217
02:22:08,000 --> 02:22:09,000
anyway

4218
02:22:09,000 --> 02:22:13,000
如果下一周你过圣诞节的话

4219
02:22:13,000 --> 02:22:14,000
圣诞快乐

4220
02:22:14,000 --> 02:22:18,000
OK

4221
02:22:18,000 --> 02:22:19,000
就这样

4222
02:22:19,000 --> 02:22:20,000
拜拜

4223
02:22:20,000 --> 02:22:21,000
拜拜

