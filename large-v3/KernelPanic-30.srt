1
00:00:00,000 --> 00:00:02,000
欢迎收听 iPin Podcast 网络旗下的

2
00:00:02,000 --> 00:00:04,000
IT 技术题娱乐节目内核恐慌

3
00:00:04,000 --> 00:00:05,000
我们号称 hardcore

4
00:00:05,000 --> 00:00:06,000
但谁也没有干货

5
00:00:06,000 --> 00:00:07,000
想听人听

6
00:00:07,000 --> 00:00:08,000
不想听人就别听

7
00:00:08,000 --> 00:00:11,000
本节目的网址是 kernelpanic.fm

8
00:00:11,000 --> 00:00:14,000
我们推荐大家使用 Podcast 客户端订阅节目

9
00:00:14,000 --> 00:00:18,000
详情请访问 ipn.li.faq

10
00:00:18,000 --> 00:00:20,000
欢迎你为节目捐款

11
00:00:20,000 --> 00:00:23,000
捐款地址是 kernelpanic.fm

12
00:00:23,000 --> 00:00:24,000
slash donate

13
00:00:24,000 --> 00:00:25,000
捐款金额随意

14
00:00:25,000 --> 00:00:27,000
只要是 8 的正常数位就可以

15
00:00:27,000 --> 00:00:29,000
捐款不会为你带来什么

16
00:00:29,000 --> 00:00:30,000
不捐也不会让你失去什么

17
00:00:30,000 --> 00:00:31,000
我们的口号是

18
00:00:31,000 --> 00:00:33,000
show me a pull request

19
00:00:33,000 --> 00:00:35,000
or stfu

20
00:00:35,000 --> 00:00:37,000
这个是我在

21
00:00:37,000 --> 00:00:39,000
这个不是今天早上在一个

22
00:00:39,000 --> 00:00:42,000
T 恤上看到的

23
00:00:42,000 --> 00:00:44,000
上面是大大的一行字

24
00:00:44,000 --> 00:00:46,000
show me the pull request

25
00:00:46,000 --> 00:00:48,000
or shut fuck up

26
00:00:48,000 --> 00:00:51,000
应该是 send me the pull request

27
00:00:51,000 --> 00:00:54,000
说的也是

28
00:00:54,000 --> 00:00:56,000
为什么不是 send

29
00:00:56,000 --> 00:00:57,000
还是我看错了

30
00:00:57,000 --> 00:00:57,000
对呀

31
00:00:57,000 --> 00:00:57,000
anyway

32
00:00:57,000 --> 00:00:58,000
有可能

33
00:00:58,000 --> 00:00:59,000
有可能

34
00:00:59,000 --> 00:01:00,000
好吧

35
00:01:00,000 --> 00:01:05,000
我们进入听众反馈环节

36
00:01:05,000 --> 00:01:06,000
上一期我们讲了

37
00:01:06,000 --> 00:01:10,000
这个叫 windows 上面的一些问题

38
00:01:10,000 --> 00:01:12,000
对我们只是随口提了一下

39
00:01:12,000 --> 00:01:14,000
这个 mean gw 的问题

40
00:01:14,000 --> 00:01:17,000
结果就收到了至少两两封

41
00:01:17,000 --> 00:01:19,000
关于相关的反馈

42
00:01:19,000 --> 00:01:21,000
电台最喜欢用的词叫什么来的

43
00:01:21,000 --> 00:01:24,000
听众反馈如雪片般飞来的

44
00:01:24,000 --> 00:01:28,000
我们是听众反馈如铁板般

45
00:01:28,000 --> 00:01:29,000
咋的

46
00:01:29,000 --> 00:01:35,000
我们选择性的念两个相关的事

47
00:01:35,000 --> 00:01:37,000
第一个不全是有一小节

48
00:01:37,000 --> 00:01:40,000
对你来还是我来念

49
00:01:40,000 --> 00:01:40,000
行我来念

50
00:01:40,000 --> 00:01:44,000
因为叫饶敏华的朋友

51
00:01:44,000 --> 00:01:46,000
那个字念什么

52
00:01:46,000 --> 00:01:47,000
哪个字

53
00:01:47,000 --> 00:01:49,000
你是三个字都不认识吗

54
00:01:49,000 --> 00:01:50,000
中间那个字念什么

55
00:01:50,000 --> 00:01:52,000
上是下文敏

56
00:01:52,000 --> 00:01:52,000
ok

57
00:01:52,000 --> 00:01:54,000
因为我大学同学有一个

58
00:01:54,000 --> 00:01:55,000
华这不是黄花的华师的华师吗

59
00:01:55,000 --> 00:01:56,000
这不是黄花的华师的华师吗

60
00:01:56,000 --> 00:01:57,000
这不是黄花的华师的华师吗

61
00:01:57,000 --> 00:01:58,000
这不是黄花的华师的华师吗

62
00:01:58,000 --> 00:01:58,000
这不是黄花的华师的华师吗

63
00:01:58,000 --> 00:02:00,000
这不是念烟吗

64
00:02:00,000 --> 00:02:01,000
应该不念烟了

65
00:02:01,000 --> 00:02:02,000
火子吧

66
00:02:02,000 --> 00:02:03,000
那个念烟了

67
00:02:03,000 --> 00:02:03,000
对

68
00:02:03,000 --> 00:02:04,000
流烟

69
00:02:04,000 --> 00:02:05,000
但这个是华

70
00:02:05,000 --> 00:02:06,000
anyway

71
00:02:06,000 --> 00:02:08,000
名字就是一个代号

72
00:02:08,000 --> 00:02:12,000
他说热乌汤你们好

73
00:02:12,000 --> 00:02:14,000
用户反馈

74
00:02:14,000 --> 00:02:18,000
关于 minGW 的使用场景

75
00:02:18,000 --> 00:02:21,000
之前任职于国内某社交公司

76
00:02:21,000 --> 00:02:21,000
开发环境时

77
00:02:21,000 --> 00:02:23,000
Windows 不允许装虚拟机

78
00:02:23,000 --> 00:02:24,000
括号

79
00:02:24,000 --> 00:02:27,000
网管检测到虚拟机自动端口断网

80
00:02:27,000 --> 00:02:28,000
网管检测到虚拟机自动端口断网

81
00:02:28,000 --> 00:02:29,000
这什么样的变态感

82
00:02:29,000 --> 00:02:35,000
我觉得 B 公司的 IT 已经非常规模了

83
00:02:35,000 --> 00:02:37,000
但是这些人还有更规模的

84
00:02:37,000 --> 00:02:39,000
这个理由是什么

85
00:02:39,000 --> 00:02:45,000
你想

86
00:02:45,000 --> 00:02:46,000
他开发环境是 Windows

87
00:02:46,000 --> 00:02:48,000
运行环境是 Linux

88
00:02:48,000 --> 00:02:50,000
然后不准装虚拟机

89
00:02:50,000 --> 00:02:50,000
那怎么测试

90
00:02:50,000 --> 00:02:51,000
就直接在服务器上

91
00:02:51,000 --> 00:02:56,000
所以你要

92
00:02:56,000 --> 00:02:58,000
最近不是搞

93
00:02:58,000 --> 00:02:58,000
那个

94
00:02:58,000 --> 00:03:00,000
什么 Docker 的那个 container movement

95
00:03:00,000 --> 00:03:01,000
是吗

96
00:03:01,000 --> 00:03:02,000
我现在都在做

97
00:03:02,000 --> 00:03:03,000
对啊

98
00:03:03,000 --> 00:03:05,000
那你得在本机上用这个

99
00:03:05,000 --> 00:03:08,000
Windows 上还没有 Docker 吧

100
00:03:08,000 --> 00:03:08,000
应该

101
00:03:08,000 --> 00:03:11,000
我们只念了一句半话

102
00:03:11,000 --> 00:03:12,000
我等下演完再说吧

103
00:03:12,000 --> 00:03:12,000
对

104
00:03:12,000 --> 00:03:14,000
反正是很奇怪就是了

105
00:03:14,000 --> 00:03:16,000
然后他的开发源是 C++

106
00:03:16,000 --> 00:03:18,000
运行环境是 Linux

107
00:03:18,000 --> 00:03:19,000
5 X 11

108
00:03:19,000 --> 00:03:20,000
对

109
00:03:20,000 --> 00:03:21,000
这个很重要

110
00:03:21,000 --> 00:03:21,000
就是我

111
00:03:21,000 --> 00:03:22,000
因为我刚才在想

112
00:03:22,000 --> 00:03:25,000
我在公司其实也是不能在本机

113
00:03:25,000 --> 00:03:27,000
开发的

114
00:03:27,000 --> 00:03:28,000
我是远程平台的

115
00:03:28,000 --> 00:03:29,000
我可以从桌面到一个远程服务器上

116
00:03:29,000 --> 00:03:30,000
但是我有 X 11

117
00:03:30,000 --> 00:03:31,000
他没有

118
00:03:31,000 --> 00:03:32,000
OK

119
00:03:32,000 --> 00:03:34,000
而且跳板机网络隔离

120
00:03:34,000 --> 00:03:36,000
而且我不是 Vim 档

121
00:03:36,000 --> 00:03:38,000
背景招待完毕

122
00:03:38,000 --> 00:03:42,000
于是选用 Eclipse CDT 作为 Windows 上的 IDE

123
00:03:42,000 --> 00:03:43,000
作开发

124
00:03:43,000 --> 00:03:45,000
但是不可能使用 Windows 的 VC 编译器

125
00:03:45,000 --> 00:03:48,000
因为 VC 编译器能编译过

126
00:03:48,000 --> 00:03:49,000
GCC 不一定能过

127
00:03:49,000 --> 00:03:50,000
而且引用的库也不一样

128
00:03:50,000 --> 00:03:53,000
比如 Linux 的现成故事 Pthread

129
00:03:53,000 --> 00:03:55,000
Visual 4 G 家没这玩意儿

130
00:03:55,000 --> 00:03:58,000
于是最后的选择是 Eclipse CDT

131
00:03:58,000 --> 00:04:01,000
配 MIMGW 或者 SIGWIN

132
00:04:01,000 --> 00:04:04,000
另外一个例子是

133
00:04:04,000 --> 00:04:06,000
之前在实验室做图像算法

134
00:04:06,000 --> 00:04:09,000
采用一个新加的 OpenCV 的库

135
00:04:09,000 --> 00:04:13,000
Open Computer Vision 应该是

136
00:04:13,000 --> 00:04:14,000
视觉识别

137
00:04:14,000 --> 00:04:15,000
对 没错

138
00:04:15,000 --> 00:04:16,000
开发环境

139
00:04:16,000 --> 00:04:16,000
视觉

140
00:04:16,000 --> 00:04:18,000
开发环境也是 Windows

141
00:04:18,000 --> 00:04:20,000
加一个 Eclipse CDT

142
00:04:20,000 --> 00:04:21,000
加 MIMGW

143
00:04:21,000 --> 00:04:23,000
现在回想用 Ubuntu

144
00:04:23,000 --> 00:04:24,000
加 Eclipse CDT

145
00:04:24,000 --> 00:04:26,000
加 GCC 应该也可以

146
00:04:26,000 --> 00:04:27,000
但是当时的机器

147
00:04:27,000 --> 00:04:29,000
跑不动虚拟机

148
00:04:29,000 --> 00:04:31,000
我还是要吐槽一下

149
00:04:31,000 --> 00:04:32,000
这讲话实际上太奇怪了

150
00:04:32,000 --> 00:04:34,000
为什么是这样呢

151
00:04:34,000 --> 00:04:36,000
你开发一个在 Linux 上运行的

152
00:04:36,000 --> 00:04:37,000
C++的东西

153
00:04:37,000 --> 00:04:38,000
然后你开发环境是 Windows

154
00:04:38,000 --> 00:04:39,000
还不允许装虚拟机

155
00:04:39,000 --> 00:04:41,000
这 what the fuck

156
00:04:41,000 --> 00:04:42,000
是很病态

157
00:04:42,000 --> 00:04:47,000
然后 Eclipse CDT 是什么东西

158
00:04:47,000 --> 00:04:52,000
CDT 是 C Development

159
00:04:52,000 --> 00:04:55,000
什么的一个缩写吧

160
00:04:55,000 --> 00:04:56,000
应该是

161
00:04:56,000 --> 00:04:57,000
就是 Eclipse 的一个版

162
00:04:57,000 --> 00:04:57,000
对吧

163
00:04:57,000 --> 00:04:58,000
对

164
00:04:58,000 --> 00:04:59,000
对

165
00:04:59,000 --> 00:05:00,000
这针对 C 开发者用的

166
00:05:00,000 --> 00:05:01,000
对

167
00:05:01,000 --> 00:05:02,000
T 代表什么

168
00:05:02,000 --> 00:05:03,000
我还真不记得了

169
00:05:03,000 --> 00:05:04,000
Tooling 吧

170
00:05:04,000 --> 00:05:05,000
现场

171
00:05:05,000 --> 00:05:07,000
Toolkit 还是

172
00:05:07,000 --> 00:05:10,000
C Development Tooling

173
00:05:10,000 --> 00:05:11,000
我靠 我真的没记错

174
00:05:11,000 --> 00:05:15,000
C slash CD development Tooling

175
00:05:15,000 --> 00:05:17,000
所以 Eclipse 这个破玩意

176
00:05:17,000 --> 00:05:18,000
不管写加吗

177
00:05:18,000 --> 00:05:18,000
也要用

178
00:05:18,000 --> 00:05:20,000
写 C++也要用它

179
00:05:20,000 --> 00:05:21,000
不是也要用

180
00:05:21,000 --> 00:05:22,000
是你可以选择用

181
00:05:22,000 --> 00:05:27,000
因为你写 C++的可选择方案太多了

182
00:05:27,000 --> 00:05:27,000
可以用什么

183
00:05:27,000 --> 00:05:28,000
你用什么

184
00:05:28,000 --> 00:05:29,000
Xcode

185
00:05:29,000 --> 00:05:32,000
可能一时想不起来

186
00:05:32,000 --> 00:05:34,000
我第一想第一跳到脑海里

187
00:05:34,000 --> 00:05:36,000
居然是 Qt Designer

188
00:05:36,000 --> 00:05:39,000
对

189
00:05:39,000 --> 00:05:41,000
但 C++ID 实在是太多了

190
00:05:41,000 --> 00:05:44,000
所以选择用 Eclipse CDT

191
00:05:44,000 --> 00:05:48,000
也许是公司的限制是知道的

192
00:05:48,000 --> 00:05:51,000
对

193
00:05:51,000 --> 00:05:53,000
总之它回报了一个非常小众的

194
00:05:53,000 --> 00:05:55,000
这个 Ming GW 的试用场景

195
00:05:55,000 --> 00:05:57,000
我所以因为我们上期提到了说

196
00:05:57,000 --> 00:05:59,000
活人请回报一下

197
00:05:59,000 --> 00:06:01,000
如果你有 Ming GW 的话

198
00:06:01,000 --> 00:06:03,000
跟我们说一下到底是什么场景

199
00:06:03,000 --> 00:06:05,000
所以现在出现了一个这么奇葩的场景

200
00:06:05,000 --> 00:06:05,000
然后对啊

201
00:06:05,000 --> 00:06:09,000
这个场景左想右想还是太蛋疼了

202
00:06:09,000 --> 00:06:09,000
嗯

203
00:06:10,000 --> 00:06:13,000
如果我想想去这种公司工作

204
00:06:13,000 --> 00:06:16,000
还是辞职算了

205
00:06:16,000 --> 00:06:17,000
哈哈哈哈

206
00:06:17,000 --> 00:06:17,000
别这样

207
00:06:17,000 --> 00:06:19,000
OK

208
00:06:19,000 --> 00:06:20,000
第二点反馈

209
00:06:20,000 --> 00:06:26,000
上上期关于 WiFi 取代网线布线的反馈

210
00:06:26,000 --> 00:06:27,000
这个非常疼

211
00:06:27,000 --> 00:06:27,000
不推荐

212
00:06:27,000 --> 00:06:29,000
对网络有要求的人这样不信

213
00:06:29,000 --> 00:06:32,000
因为 2.1

214
00:06:32,000 --> 00:06:34,000
就像维特格斯兰一样

215
00:06:34,000 --> 00:06:39,000
每一个这个反馈点下面还要分子点

216
00:06:39,000 --> 00:06:40,000
2.1 点办公室

217
00:06:40,000 --> 00:06:43,000
现在在一个类似于重创空间的地方创业

218
00:06:43,000 --> 00:06:46,000
一栋楼有 20 到 30 家公司

219
00:06:46,000 --> 00:06:49,000
每家公司面积几平米到十来平米

220
00:06:49,000 --> 00:06:50,000
每次打开 WiFi 的时候

221
00:06:50,000 --> 00:06:53,000
都可以搜到不下 30 个 WiFi 信号源

222
00:06:53,000 --> 00:06:57,000
WiFi 2.4 G 虽然有 13 个信道

223
00:06:57,000 --> 00:06:57,000
但是要完全不下来的信号源

224
00:06:57,000 --> 00:06:59,000
完全做到不干扰的信道

225
00:06:59,000 --> 00:07:01,000
只有三个

226
00:07:01,000 --> 00:07:04,000
可以想象 2.4 G 信道空间会有多大干扰

227
00:07:04,000 --> 00:07:07,000
做过实验千元左右的国际品牌路由器

228
00:07:07,000 --> 00:07:10,000
2.4 G 的 WiFi 信道调优距离不到两米

229
00:07:10,000 --> 00:07:14,000
内网拼路由大概 50 到 300 ms 不等

230
00:07:15,000 --> 00:07:17,000
还会有大量的随机丢包

231
00:07:17,000 --> 00:07:18,000
另外附带的是

232
00:07:18,000 --> 00:07:21,000
我们现在所有的无线建筑都属于梦游状态

233
00:07:21,000 --> 00:07:23,000
采用 5 G 信号之后

234
00:07:23,000 --> 00:07:25,000
WiFi 信号质量好了很多

235
00:07:25,000 --> 00:07:27,000
但是随着各个公司的网管

236
00:07:27,000 --> 00:07:29,000
都在改用 5 G 信号的路由

237
00:07:29,000 --> 00:07:32,000
网络状况也是每况愈下

238
00:07:32,000 --> 00:07:35,000
2.2 点

239
00:07:35,000 --> 00:07:38,000
家里去年装修小三房

240
00:07:38,000 --> 00:07:39,000
什么是小三房

241
00:07:39,000 --> 00:07:40,000
给小三出来

242
00:07:40,000 --> 00:07:42,000
就是三房然后面积比较小

243
00:07:42,000 --> 00:07:45,000
采用的是无线网络部署

244
00:07:45,000 --> 00:07:49,000
在房间正中央放了一个小米路由器

245
00:07:49,000 --> 00:07:52,000
带硬盘做 NAS

246
00:07:52,000 --> 00:07:53,000
有几个结论

247
00:07:53,000 --> 00:07:56,000
A 5 G 信号穿墙比较点司机差

248
00:07:56,000 --> 00:08:00,000
B 卧室需要穿两堵墙只剩下两个信号

249
00:08:00,000 --> 00:08:02,000
而且会降频到只有 11 兆的连接速度

250
00:08:02,000 --> 00:08:03,000
而且丢包严重

251
00:08:03,000 --> 00:08:05,000
NAS 连接的速度不可接受

252
00:08:05,000 --> 00:08:08,000
C 在穿一堵墙的时候架设 WiFi 中继

253
00:08:08,000 --> 00:08:09,000
到卧室使用时

254
00:08:09,000 --> 00:08:12,000
还是只有 300 到 400 KB 左右的上传下载速度

255
00:08:12,000 --> 00:08:14,000
而且不稳定不可接受

256
00:08:14,000 --> 00:08:16,000
最后采用的方案是电力猫

257
00:08:16,000 --> 00:08:21,000
小米路由器直接插网线连墙上的电力猫

258
00:08:21,000 --> 00:08:24,000
卧室电源口放一个电力猫接收设备

259
00:08:24,000 --> 00:08:25,000
带 802.11 nm 的电力猫

260
00:08:25,000 --> 00:08:25,000
带 802.11 nm 的电力猫

261
00:08:25,000 --> 00:08:26,000
带 802.11 nm 加网线

262
00:08:26,000 --> 00:08:29,000
基本能够达到 5 兆左右的速度

263
00:08:29,000 --> 00:08:30,000
而且不丢包基本可以接受

264
00:08:30,000 --> 00:08:32,000
但是拷贝大东西的时候

265
00:08:32,000 --> 00:08:36,000
还是得把笔记本和路由器用千兆网线直连

266
00:08:36,000 --> 00:08:38,000
另外电力猫有个缺点

267
00:08:38,000 --> 00:08:40,000
发热量大的情况下容易死机

268
00:08:40,000 --> 00:08:43,000
深圳的夏天基本一个月充其一次

269
00:08:43,000 --> 00:08:46,000
所以这位听众和你在都在一起都在深圳

270
00:08:46,000 --> 00:08:50,000
另外国内小区 WiFi 信号的干扰也挺大

271
00:08:50,000 --> 00:08:52,000
现在家里三个电力猫

272
00:08:52,000 --> 00:08:53,000
一个 input 两个 output

273
00:08:53,000 --> 00:08:54,000
我家的热点有五个

274
00:08:54,000 --> 00:08:55,000
我家的热点有五个

275
00:08:55,000 --> 00:08:57,000
不过 WiFi 多了

276
00:08:57,000 --> 00:09:00,000
还是会给自己造成信号的干扰

277
00:09:00,000 --> 00:09:02,000
家里 PS 4 streaming 到 PSV 上

278
00:09:02,000 --> 00:09:04,000
使用 PS 4 主动 WiFi

279
00:09:04,000 --> 00:09:06,000
离得非常近都频繁掉线

280
00:09:06,000 --> 00:09:08,000
后来 PS 4 关闭主动 WiFi

281
00:09:08,000 --> 00:09:09,000
PS 4 连网线

282
00:09:09,000 --> 00:09:12,000
PSV 连电力猫的 WiFi

283
00:09:12,000 --> 00:09:13,000
情况好了很多

284
00:09:13,000 --> 00:09:16,000
推荐一下 Android 上的 WiFi 信号分析相关的 APP

285
00:09:16,000 --> 00:09:22,000
能够快速了解当前空间下的信号占用情况

286
00:09:22,000 --> 00:09:25,000
个人结论是能不网线就不网线吧

287
00:09:25,000 --> 00:09:28,000
OK 所以你对这一点有什么反馈呢

288
00:09:28,000 --> 00:09:30,000
有什么评论吗

289
00:09:30,000 --> 00:09:35,000
首先其实无限也没什么

290
00:09:35,000 --> 00:09:37,000
不得好的话问题不是很大

291
00:09:37,000 --> 00:09:38,000
他说那些情况

292
00:09:38,000 --> 00:09:43,000
我也去过很多这种什么叫 co-working space

293
00:09:43,000 --> 00:09:46,000
合作办公的空间

294
00:09:46,000 --> 00:09:48,000
确实看他们那个

295
00:09:48,000 --> 00:09:51,000
因为现在深圳这边很多这种孵化器

296
00:09:51,000 --> 00:09:54,000
中窗空间都是当二房东的

297
00:09:55,000 --> 00:09:57,000
这些人的意见也没有好感

298
00:09:57,000 --> 00:09:58,000
就是很多人对这个也不熟

299
00:09:58,000 --> 00:10:00,000
然后做的都挺差的

300
00:10:00,000 --> 00:10:01,000
公司也是这样子

301
00:10:01,000 --> 00:10:08,000
就是你要很多这种所谓的 IT 公司的这些技术部分都是非常差的

302
00:10:08,000 --> 00:10:11,000
所以这不是寨都的常态吗

303
00:10:11,000 --> 00:10:14,000
不全中国都基本上都这样

304
00:10:14,000 --> 00:10:17,000
就不是那个 WiFi 不得好的非常少

305
00:10:17,000 --> 00:10:19,000
就但是如果 WiFi 不得好的话

306
00:10:19,000 --> 00:10:22,000
其实这些问题都可以解决

307
00:10:22,000 --> 00:10:24,000
对但有很多前提条件

308
00:10:24,000 --> 00:10:25,000
就是说

309
00:10:25,000 --> 00:10:27,000
你要是那个需要整要整体规划嘛

310
00:10:27,000 --> 00:10:30,000
你不是说像他说那种一层二三十公司

311
00:10:30,000 --> 00:10:31,000
骂的各家都搞自己的

312
00:10:31,000 --> 00:10:32,000
那你就没得玩了

313
00:10:32,000 --> 00:10:33,000
对吧

314
00:10:33,000 --> 00:10:35,000
肯定是要那个要禁掉

315
00:10:35,000 --> 00:10:36,000
经营官人用对

316
00:10:36,000 --> 00:10:37,000
就要各禁掉

317
00:10:37,000 --> 00:10:40,000
各人用个人的那个那个 WiFi 热点的情况

318
00:10:40,000 --> 00:10:42,000
要那个统一去布

319
00:10:42,000 --> 00:10:47,000
然后要那个要根据那个内楼层的形状啊

320
00:10:47,000 --> 00:10:50,000
包括那些中间的隔墙的材质啊

321
00:10:50,000 --> 00:10:52,000
去考虑要不多少个点

322
00:10:52,000 --> 00:10:53,000
然后采用哪些东西

323
00:10:53,000 --> 00:10:55,000
就其实这里面学问

324
00:10:55,000 --> 00:10:58,000
还蛮多的就是要做好了是挺难

325
00:10:58,000 --> 00:10:59,000
但是做做好了

326
00:10:59,000 --> 00:11:04,000
现在现场布线的确是一个不是说你念完网络工程就可以搞定的事情

327
00:11:04,000 --> 00:11:05,000
真的有很多

328
00:11:05,000 --> 00:11:10,000
对不是说你你自己加俩加俩六点这个这个信号就好了

329
00:11:10,000 --> 00:11:12,000
就是你加了可能会反而更糟糕

330
00:11:12,000 --> 00:11:14,000
你要去考虑到各种各样的情况

331
00:11:14,000 --> 00:11:16,000
比方就是设备也是一个问题

332
00:11:16,000 --> 00:11:25,000
现在他说那些什么千元左右国际品牌路由器的这种就是办公楼这种密度的

333
00:11:25,000 --> 00:11:31,000
就几百人的那种也不不可能用这种这种千元几百万是家用的吗

334
00:11:31,000 --> 00:11:33,000
不可能用家用的一定要用企业级别的

335
00:11:33,000 --> 00:11:35,000
然后他里面的那些方法是不一样

336
00:11:35,000 --> 00:11:47,000
就像什么 CC 厂牌和 H 厂牌的那样就比较贵一个一个那个就普通的还不带这个 802.11 ac 的就 802.11 n 的吧

337
00:11:47,000 --> 00:11:50,000
我看最便宜的那种就还是得三四千一个

338
00:11:50,000 --> 00:11:54,000
然后如果你要上最新的 11 ac

339
00:11:54,000 --> 00:12:00,000
那所以什么 1900 照的那种企业级的无线那个 ap

340
00:12:00,000 --> 00:12:03,000
我看好像是最便宜的淘宝获得要六千多块钱吧

341
00:12:03,000 --> 00:12:04,000
一个对吧

342
00:12:04,000 --> 00:12:07,000
那你一层你一个覆盖的范围也就那么点嘛

343
00:12:07,000 --> 00:12:11,000
然后你一层楼看面积还得装上十几二十个对吧

344
00:12:11,000 --> 00:12:14,000
差不多小十万块钱光买一批就进去了

345
00:12:14,000 --> 00:12:15,000
完了你还得买 ac 对吧

346
00:12:15,000 --> 00:12:19,000
还要做那个那个就是

347
00:12:20,000 --> 00:12:24,000
千兆网就是那个 cat 51 的网

348
00:12:24,000 --> 00:12:26,000
就做那个 backbone 嘛对吧

349
00:12:26,000 --> 00:12:27,000
然后你还要不完之后

350
00:12:27,000 --> 00:12:29,000
你还要去在每个之间做那个叫

351
00:12:31,000 --> 00:12:32,000
roaming 就是卖油嘛

352
00:12:32,000 --> 00:12:36,000
你从你从一个 ap 切到另一个 ap 的时候

353
00:12:36,000 --> 00:12:37,000
中间连接不会断掉对吧

354
00:12:37,000 --> 00:12:38,000
在二层三层

355
00:12:38,000 --> 00:12:39,000
handover

356
00:12:39,000 --> 00:12:41,000
对 handover 很讲究的

357
00:12:41,000 --> 00:12:42,000
然后那个 2.4 G

358
00:12:42,000 --> 00:12:45,000
他说有那个三个不冲离的信号

359
00:12:45,000 --> 00:12:46,000
没错确实这样子

360
00:12:46,000 --> 00:12:49,000
那么你更要小心谨慎去做

361
00:12:49,000 --> 00:12:53,000
然后那个信号强度也不是说你开到最大是最好的

362
00:12:53,000 --> 00:12:53,000
你要根据周围的信号去做

363
00:12:53,000 --> 00:12:54,000
周围的情况来看

364
00:12:54,000 --> 00:12:59,000
就也可能要调到中或调到小才是能够更好的一个方案

365
00:12:59,000 --> 00:13:01,000
那现在 5 G 也是一样的

366
00:13:01,000 --> 00:13:03,000
就说 5 G 也有那几个信道

367
00:13:03,000 --> 00:13:05,000
他基本上不怎么互相干扰

368
00:13:05,000 --> 00:13:07,000
而且 5 G 有个好处

369
00:13:07,000 --> 00:13:08,000
他说他说的很对

370
00:13:08,000 --> 00:13:09,000
5 G 的信号穿墙

371
00:13:09,000 --> 00:13:10,000
性能比 2.4 G 差

372
00:13:10,000 --> 00:13:12,000
这就导致一个什么样的后果呢

373
00:13:12,000 --> 00:13:15,000
就破就使得 5 G 邻居之间

374
00:13:15,000 --> 00:13:17,000
比如说你刚才说他说家里还有一个情况

375
00:13:17,000 --> 00:13:20,000
就是 5 G 和 5 G 邻居之间的影响是比较小的

376
00:13:20,000 --> 00:13:22,000
因为基本上隔一度墙 5 G 信号就很弱了嘛

377
00:13:22,000 --> 00:13:23,000
隔两度的话

378
00:13:23,000 --> 00:13:25,000
你就可以就忽略不计了

379
00:13:25,000 --> 00:13:27,000
所以你在家里不 5 G 的话

380
00:13:27,000 --> 00:13:29,000
其实是更好的一个选择

381
00:13:29,000 --> 00:13:33,000
然后包括用那个 11 N 和 11 AC 区别也是蛮大的

382
00:13:33,000 --> 00:13:36,000
因为同样的这个这个信道带宽

383
00:13:36,000 --> 00:13:38,000
你用更快的这个标准

384
00:13:38,000 --> 00:13:41,000
在更短的时间内完全的数据的传输

385
00:13:41,000 --> 00:13:44,000
那你有更多的空闲出来给别人传输

386
00:13:44,000 --> 00:13:46,000
那个就是那个冲突的时间会更少嘛

387
00:13:46,000 --> 00:13:49,000
因为一旦冲突叫两个都要 back off

388
00:13:49,000 --> 00:13:50,000
然后重传嘛

389
00:13:50,000 --> 00:13:53,000
再然后就是这个设备的选择

390
00:13:53,000 --> 00:13:53,000
刚才吐槽

391
00:13:53,000 --> 00:13:53,000
对

392
00:13:53,000 --> 00:13:53,000
对

393
00:13:53,000 --> 00:13:56,000
他用那个千元左右的家用还没问题

394
00:13:56,000 --> 00:13:58,000
然后他说他家里用那个小米路由器

395
00:13:58,000 --> 00:14:01,000
小米路由器我看了好多这个测评

396
00:14:01,000 --> 00:14:05,000
都是那个信号非常差的代表

397
00:14:05,000 --> 00:14:07,000
为什么会用这个

398
00:14:07,000 --> 00:14:12,000
我觉得他把那个刚才那个办公室用那个千元左右的国际品牌路由器放家里

399
00:14:12,000 --> 00:14:13,000
5 G 还差不多

400
00:14:13,000 --> 00:14:15,000
然后小米的可以扔了是吧

401
00:14:15,000 --> 00:14:17,000
其实也不是说便宜都一定不好

402
00:14:17,000 --> 00:14:19,000
但是大部分的便宜的就盖

403
00:14:19,000 --> 00:14:21,000
你买到好的概率很少

404
00:14:21,000 --> 00:14:23,000
而且你没有人去做这种专业测评

405
00:14:23,000 --> 00:14:23,000
而且国内的测评都很少

406
00:14:23,000 --> 00:14:26,000
因为这种硬件测评他妈都被搞坏了

407
00:14:26,000 --> 00:14:29,000
就是全是枪文软文拿钱写的嘛

408
00:14:29,000 --> 00:14:31,000
就没有这样正是把你在做了

409
00:14:31,000 --> 00:14:32,000
那本叫什么

410
00:14:32,000 --> 00:14:35,000
我们只谈硬件的杂志叫什么来着

411
00:14:37,000 --> 00:14:38,000
有有有这种杂志

412
00:14:38,000 --> 00:14:40,000
微信好像就叫微信计算机吧

413
00:14:40,000 --> 00:14:41,000
就一本杂志

414
00:14:41,000 --> 00:14:43,000
然后封面上写着我们只谈硬件

415
00:14:43,000 --> 00:14:45,000
那个杂志那也是枪我满天飞的

416
00:14:45,000 --> 00:14:46,000
好吧

417
00:14:46,000 --> 00:14:49,000
不用想我记得我小时候才口碑还不错

418
00:14:49,000 --> 00:14:53,000
就我觉得国内其实真缺乏那种真正正正的就他大使是做

419
00:14:53,000 --> 00:14:59,000
那种某一个独立领域的这种呃很专业很有深度的测评的

420
00:14:59,000 --> 00:15:01,000
因为最近我遇到两件事

421
00:15:01,000 --> 00:15:04,000
最近我不是在买那种小的 pc 机来那种玩就是 nuc 嘛

422
00:15:04,000 --> 00:15:06,000
英特尔那个小的

423
00:15:06,000 --> 00:15:09,000
我发现国外有专门的波一个网站叫的 nuc blog

424
00:15:09,000 --> 00:15:14,000
他专门就只测评这么一个非常非常逆势的一个产品

425
00:15:14,000 --> 00:15:16,000
OK 就就很他会讲的很细

426
00:15:16,000 --> 00:15:20,000
然后说这个家用无线组网的话会想办法无线组网

427
00:15:20,000 --> 00:15:22,000
那有个叫 small net builder 吗

428
00:15:22,000 --> 00:15:23,000
上面会把那些

429
00:15:23,000 --> 00:15:29,000
就在就当然是他是美国的话应该是他会把那些在美国市场上卖的啊

430
00:15:29,000 --> 00:15:32,000
那些新的呃无线设备都会测得非常详细

431
00:15:32,000 --> 00:15:34,000
相对来说比较专业吗

432
00:15:34,000 --> 00:15:35,000
那国内找不到这种啊

433
00:15:35,000 --> 00:15:40,000
你只能听这个听那个各种公关文给你瞎逼逼的吧

434
00:15:40,000 --> 00:15:41,000
就基本上不可信了嘛

435
00:15:41,000 --> 00:15:43,000
但你买回来实际测的时候就很麻烦

436
00:15:43,000 --> 00:15:43,000
嗯

437
00:15:44,000 --> 00:15:51,000
我觉得可能在西方比较好的一点就是很多网站都会不是网站

438
00:15:51,000 --> 00:15:53,000
就是很多媒体都会提供付费

439
00:15:53,000 --> 00:15:54,000
嗯

440
00:15:54,000 --> 00:15:57,000
购买测评结果的父母

441
00:15:57,000 --> 00:16:04,000
德国有很多德国法国都有这样的网站就是他的测评给出来的

442
00:16:04,000 --> 00:16:05,000
然后他会给你个排名

443
00:16:05,000 --> 00:16:06,000
嗯

444
00:16:06,000 --> 00:16:10,000
然后但如果你想要知道具体这个排名是怎么得出来的

445
00:16:10,000 --> 00:16:12,000
你需要花几多元去买他的测评报告

446
00:16:12,000 --> 00:16:13,000
嗯

447
00:16:13,000 --> 00:16:14,000
国内

448
00:16:14,000 --> 00:16:15,000
对

449
00:16:15,000 --> 00:16:23,000
我觉得这个模式至少你可以相信他们基本上是不需要拿别人的钱

450
00:16:23,000 --> 00:16:23,000
然后

451
00:16:23,000 --> 00:16:27,000
就也可以做出相对独立的判断

452
00:16:27,000 --> 00:16:29,000
这个问题我觉得一下还解决不了在国内

453
00:16:29,000 --> 00:16:30,000
对

454
00:16:30,000 --> 00:16:31,000
就是这个国内不可能的

455
00:16:31,000 --> 00:16:33,000
就靠花钱看别人评论

456
00:16:33,000 --> 00:16:34,000
这是闻所未闻的事情

457
00:16:34,000 --> 00:16:36,000
怎么能接受呢

458
00:16:36,000 --> 00:16:37,000
对对

459
00:16:37,000 --> 00:16:38,000
说回这个事儿

460
00:16:38,000 --> 00:16:44,000
就是说那比如说你买了一个比较就是工业界工人比较好的那种

461
00:16:44,000 --> 00:16:47,000
一些设备的覆盖一个家里的

462
00:16:47,000 --> 00:16:48,000
但其实家里情况也比较特殊

463
00:16:48,000 --> 00:16:50,000
不同不同那个那个户型

464
00:16:50,000 --> 00:16:52,000
那个那个那个叫什么

465
00:16:52,000 --> 00:16:53,000
那个隔墙的结构

466
00:16:53,000 --> 00:16:54,000
不一样吧

467
00:16:54,000 --> 00:16:57,000
有些是那种就是有城中讲的那是钢筋的

468
00:16:57,000 --> 00:16:58,000
那效果就很差

469
00:16:58,000 --> 00:16:59,000
然后跟你摆位

470
00:16:59,000 --> 00:17:01,000
有关系对吧

471
00:17:01,000 --> 00:17:03,000
对对对这之类的事情

472
00:17:03,000 --> 00:17:06,000
让我们不要我我在现在住的地方是一个两房吧

473
00:17:06,000 --> 00:17:09,000
然后缅姐就还有那么大

474
00:17:09,000 --> 00:17:12,000
我就一个那个啊

475
00:17:12,000 --> 00:17:17,000
那个比较新的 5000 多有然后选的还不错的测过了

476
00:17:17,000 --> 00:17:19,000
然后就效果挺好的

477
00:17:19,000 --> 00:17:22,000
隔个墙我也能够有个二三十招

478
00:17:22,000 --> 00:17:22,000
因为我是还是我这个是一个很好的地方啊

479
00:17:22,000 --> 00:17:25,000
我这个设备还是 11 n 不是 11 ac 的吗

480
00:17:25,000 --> 00:17:26,000
OK

481
00:17:26,000 --> 00:17:31,000
11 n 的话三个 stream 顶天有 450 的理论值了吗

482
00:17:31,000 --> 00:17:36,000
你扣一下打个打个对折差不多也就那样二三十兆的速度了

483
00:17:36,000 --> 00:17:39,000
就其实还是挺不错的

484
00:17:39,000 --> 00:17:42,000
所以就是就里面还是有很多这种要有精

485
00:17:42,000 --> 00:17:48,000
就是这确实挺难的要有你要对这个这个这个东西要有技术上有足够的了解

486
00:17:48,000 --> 00:17:50,000
然后你要知道怎么去判断那些软文

487
00:17:50,000 --> 00:17:52,000
然后去看足够多的测评

488
00:17:52,000 --> 00:17:52,000
然后你也得一下

489
00:17:52,000 --> 00:17:55,000
那个从侧边买个合适的完了之后

490
00:17:55,000 --> 00:17:58,000
你再知道在家里怎么去选择一个合适的点

491
00:17:58,000 --> 00:17:59,000
因为不一定合适嘛

492
00:17:59,000 --> 00:18:02,000
你你还刚想那个信号最好最好的点可能没有网线接口

493
00:18:02,000 --> 00:18:03,000
你怎么办对吧

494
00:18:03,000 --> 00:18:08,000
然后他像他这种情况就是说如果是这个看起来他是有隔两堵墙的话就很麻烦

495
00:18:08,000 --> 00:18:13,000
因为他可能那个入户的地方不是在房间的中间的位置嘛

496
00:18:13,000 --> 00:18:14,000
就我的运气比较好

497
00:18:14,000 --> 00:18:17,000
我入户的位置可以刚好在整个房间的中心点

498
00:18:18,000 --> 00:18:20,000
就可以整个平均覆盖的到

499
00:18:20,000 --> 00:18:21,000
然后他那个就不行

500
00:18:21,000 --> 00:18:22,000
那就只能想

501
00:18:22,000 --> 00:18:26,000
就埋线的话就很糟糕

502
00:18:26,000 --> 00:18:29,000
就所以我就我觉得他那个话很早就能不限就不限吧

503
00:18:29,000 --> 00:18:31,000
但是我觉得这个看情况就是说

504
00:18:31,000 --> 00:18:33,000
如果就成本不是问题

505
00:18:33,000 --> 00:18:36,000
然后装修的方案也可以也还没有定死的话

506
00:18:36,000 --> 00:18:39,000
最好的方案就是说你在每个房间的那个顶部啊

507
00:18:39,000 --> 00:18:41,000
就不会跟那种西顶式的那种 AP

508
00:18:43,000 --> 00:18:45,000
然后做那个漫游的方案

509
00:18:45,000 --> 00:18:46,000
但这个成本就比较贵

510
00:18:46,000 --> 00:18:48,000
可能一个就三房的话

511
00:18:48,000 --> 00:18:51,000
家里家三房就是三个卧室加一个客厅嘛

512
00:18:51,000 --> 00:18:52,000
对吧

513
00:18:52,000 --> 00:18:55,000
就有四个房间你要布这个东西

514
00:18:55,000 --> 00:19:00,000
搞完这一套下来也得可能几千块钱挺贵的

515
00:19:00,000 --> 00:19:02,000
我觉得我是觉得从安全的角度讲

516
00:19:02,000 --> 00:19:05,000
不限至少要比无限安全一些

517
00:19:07,000 --> 00:19:08,000
安全的意思

518
00:19:08,000 --> 00:19:14,000
比如说首先在和平时代邻居不会来破你的无限

519
00:19:14,000 --> 00:19:15,000
在僵尸来

520
00:19:15,000 --> 00:19:16,000
现在无限很容易破吗

521
00:19:16,000 --> 00:19:17,000
还好吧

522
00:19:17,000 --> 00:19:20,000
现在用那个 WPA 2 应该还还可以

523
00:19:20,000 --> 00:19:22,000
换一种说法

524
00:19:22,000 --> 00:19:24,000
邻居不会说我我老婆怀孕了

525
00:19:24,000 --> 00:19:25,000
你把无限关一下

526
00:19:25,000 --> 00:19:29,000
哈哈哈哈

527
00:19:29,000 --> 00:19:32,000
他怎么知道是你呢

528
00:19:32,000 --> 00:19:34,000
对然后你如果买了网线的话

529
00:19:34,000 --> 00:19:35,000
就可以理直气壮的说

530
00:19:35,000 --> 00:19:37,000
我们家没有无限

531
00:19:37,000 --> 00:19:38,000
那很不方便啊

532
00:19:38,000 --> 00:19:44,000
现在设备对我反正我现在是基本上虽然我我现在有这个有线口可以用

533
00:19:44,000 --> 00:19:46,000
但我还是 PS 还是连着无限

534
00:19:46,000 --> 00:19:48,000
比如说对嘛

535
00:19:48,000 --> 00:19:48,000
对吧

536
00:19:48,000 --> 00:19:51,000
而且他他他家里的提醒也挺奇怪的

537
00:19:51,000 --> 00:19:52,000
他热点就五个

538
00:19:52,000 --> 00:19:55,000
我不明白为什么你这样有一个这个路由器情况下

539
00:19:55,000 --> 00:19:57,000
你还要加这么多个热点进去

540
00:19:57,000 --> 00:19:59,000
这不自己给自己找事吗

541
00:19:59,000 --> 00:20:01,000
但是要关掉那些干扰的热点

542
00:20:01,000 --> 00:20:03,000
是因为小米路由器吧

543
00:20:03,000 --> 00:20:04,000
那好啊

544
00:20:04,000 --> 00:20:05,000
我们我们不要继续吐槽

545
00:20:05,000 --> 00:20:06,000
这个听众

546
00:20:06,000 --> 00:20:07,000
我们把人家的名字说出来

547
00:20:07,000 --> 00:20:07,000
对不起

548
00:20:07,000 --> 00:20:08,000
饶先生

549
00:20:08,000 --> 00:20:09,000
我们这个对是不对

550
00:20:09,000 --> 00:20:14,000
应该那个不应该那个那个那个什么这个叉叉路由器那里应该逼掉

551
00:20:14,000 --> 00:20:16,000
哈哈哈好吧

552
00:20:17,000 --> 00:20:18,000
对呃呀

553
00:20:18,000 --> 00:20:19,000
no hot feelings

554
00:20:21,000 --> 00:20:26,000
下一则又是明 GW 哈

555
00:20:26,000 --> 00:20:27,000
这位叫

556
00:20:28,000 --> 00:20:29,000
这怎么念

557
00:20:29,000 --> 00:20:30,000
这字念窄语

558
00:20:33,000 --> 00:20:33,000
两位主播好

559
00:20:33,000 --> 00:20:37,000
然后他想补充一下对 Windows 下面明记的问题啊

560
00:20:37,000 --> 00:20:41,000
在 Windows 下用明 GW 人有很多

561
00:20:41,000 --> 00:20:43,000
其中一个是我原因很简单

562
00:20:43,000 --> 00:20:45,000
因为 Windows 下还在更新的

563
00:20:45,000 --> 00:20:50,000
而且免费的 Fortune 编译器基本只有明 GW 一个选项

564
00:20:50,000 --> 00:20:51,000
或者更严谨的说

565
00:20:51,000 --> 00:20:53,000
最流行的一个选项

566
00:20:53,000 --> 00:20:54,000
不要紧张

567
00:20:54,000 --> 00:20:57,000
为什么我还是用 Fortune 我的主主业是科学计算

568
00:20:57,000 --> 00:20:59,000
这是显示的使用

569
00:20:59,000 --> 00:21:03,000
包括大量学 C 语言的跟压根不想学编程的本科生在内

570
00:21:03,000 --> 00:21:05,000
走在影视的使用

571
00:21:05,000 --> 00:21:07,000
比如被学长推荐安装个 code

572
00:21:07,000 --> 00:21:09,000
冒号冒号 block

573
00:21:09,000 --> 00:21:11,000
这是 code block 是个 ID 100

574
00:21:11,000 --> 00:21:12,000
没记错了

575
00:21:12,000 --> 00:21:13,000
OK

576
00:21:13,000 --> 00:21:16,000
关于 Windows 你的终端仿真器

577
00:21:16,000 --> 00:21:18,000
我想两位也许是很久不用 Windows 了

578
00:21:18,000 --> 00:21:19,000
不了解是很正常的

579
00:21:19,000 --> 00:21:21,000
我依据个人的经历提几个哈

580
00:21:21,000 --> 00:21:26,000
有一个是 Git for Windows 里面带了一个 bash

581
00:21:26,000 --> 00:21:27,000
啊

582
00:21:27,000 --> 00:21:28,000
Git bash 对

583
00:21:28,000 --> 00:21:30,000
就是如果你在 Windows 上面装一个

584
00:21:30,000 --> 00:21:31,000
对对对

585
00:21:31,000 --> 00:21:33,000
如果你在 Windows 上面装一个 bash 的话

586
00:21:33,000 --> 00:21:34,000
它会给你提供一个命令行

587
00:21:34,000 --> 00:21:36,000
然后这个命令行其实是纯

588
00:21:37,000 --> 00:21:39,000
其实是个 shell

589
00:21:39,000 --> 00:21:41,000
就是一个 bash shell

590
00:21:41,000 --> 00:21:42,000
啊

591
00:21:42,000 --> 00:21:42,000
对

592
00:21:42,000 --> 00:21:45,000
因为 Git 离不开 shell 吗

593
00:21:45,000 --> 00:21:46,000
对

594
00:21:46,000 --> 00:21:50,000
就是 Github 的人觉得与其写一个图形界面

595
00:21:50,000 --> 00:21:51,000
不如让 Windows 上去

596
00:21:51,000 --> 00:21:56,000
比这 Windows 用户也用 Git 命令好

597
00:21:56,000 --> 00:21:58,000
跟 Github 有什么关系

598
00:21:58,000 --> 00:22:00,000
这个东西是 Github 做的

599
00:22:00,000 --> 00:22:01,000
啊

600
00:22:01,000 --> 00:22:02,000
OK

601
00:22:02,000 --> 00:22:05,000
如果比较习惯 bash 行为的人

602
00:22:05,000 --> 00:22:08,000
可以用那个做一个基本做一点基本的操作

603
00:22:08,000 --> 00:22:14,000
对于使用 command.exe 的人应该推荐一个叫做 commander

604
00:22:14,000 --> 00:22:19,000
网址是 commandercmder.net 的项目

605
00:22:19,000 --> 00:22:21,000
当然这个项目是

606
00:22:21,000 --> 00:22:25,000
conemu 的一个改进版

607
00:22:25,000 --> 00:22:28,000
conemu 是 c-o-n-e-m-u

608
00:22:28,000 --> 00:22:29,000
但的确很流行

609
00:22:29,000 --> 00:22:30,000
重点是开箱机用前美观

610
00:22:30,000 --> 00:22:31,000
哇

611
00:22:31,000 --> 00:22:32,000
这个还蛮难得的

612
00:22:32,000 --> 00:22:34,000
没记错的话

613
00:22:34,000 --> 00:22:37,000
应该是应该是也支持基本的 linux shell 命令

614
00:22:37,000 --> 00:22:39,000
比如说 list 之类的

615
00:22:39,000 --> 00:22:42,000
也可以在里面调用 power shell 以及 bash

616
00:22:43,000 --> 00:22:44,000
那就可以试一下

617
00:22:44,000 --> 00:22:45,000
OK

618
00:22:45,000 --> 00:22:49,000
conemu console emu 是一个 console emulation

619
00:22:49,000 --> 00:22:50,000
是一个有些

620
00:22:50,000 --> 00:22:51,000
你问过吧

621
00:22:51,000 --> 00:22:52,000
好像用过吧

622
00:22:52,000 --> 00:22:55,000
但我具体不记得长什么样了

623
00:22:55,000 --> 00:22:56,000
也有可能不是

624
00:22:56,000 --> 00:22:58,000
但是应该是一个

625
00:22:58,000 --> 00:23:00,000
用过这种东西

626
00:23:00,000 --> 00:23:01,000
我之前不是在 windows

627
00:23:01,000 --> 00:23:08,000
我之前不是在一个数据调研公司写的软件

628
00:23:08,000 --> 00:23:11,000
最后是要部署到 linux 服务器上的吗

629
00:23:11,000 --> 00:23:13,000
然后但是开发环境是 windows

630
00:23:13,000 --> 00:23:19,000
所以对我记得那个 conemu 是支持

631
00:23:19,000 --> 00:23:20,000
反正是个支持 tab

632
00:23:20,000 --> 00:23:21,000
然后

633
00:23:21,000 --> 00:23:23,000
好玩

634
00:23:23,000 --> 00:23:26,000
下面一则反馈就可有意思了

635
00:23:26,000 --> 00:23:29,000
这个一定要强烈推荐

636
00:23:29,000 --> 00:23:31,000
我们这简直是我们这一期的主题

637
00:23:31,000 --> 00:23:34,000
可以吐槽好久

638
00:23:34,000 --> 00:23:36,000
和他一起吐槽

639
00:23:36,000 --> 00:23:39,000
对应该说是引起共鸣

640
00:23:39,000 --> 00:23:42,000
对本期我们没有主题

641
00:23:42,000 --> 00:23:46,000
就这个还是要说明一下

642
00:23:46,000 --> 00:23:50,000
因为我周末要去意大利玩陪女朋友

643
00:23:50,000 --> 00:23:51,000
所以

644
00:23:51,000 --> 00:23:57,000
我们这期是以非常轻松幽默为主

645
00:23:57,000 --> 00:23:59,000
好吧

646
00:23:59,000 --> 00:24:00,000
我刚才想说

647
00:24:00,000 --> 00:24:03,000
我们毕竟是一个 it 主题娱乐节目

648
00:24:03,000 --> 00:24:03,000
没错

649
00:24:03,000 --> 00:24:06,000
我们是以听众反馈

650
00:24:06,000 --> 00:24:08,000
充填时间的一期节目

651
00:24:08,000 --> 00:24:09,000
我刚才想说

652
00:24:09,000 --> 00:24:15,000
这一封是我们每次都写很多反馈的老朋友

653
00:24:15,000 --> 00:24:17,000
叫做 polydiary

654
00:24:17,000 --> 00:24:17,000
对

655
00:24:17,000 --> 00:24:18,000
real 无头

656
00:24:18,000 --> 00:24:19,000
你们好

657
00:24:19,000 --> 00:24:20,000
首先还是感谢一下二位

658
00:24:20,000 --> 00:24:21,000
通过你们的

659
00:24:21,000 --> 00:24:25,000
节目的确让我了解了不少计算机方面的基础知识

660
00:24:25,000 --> 00:24:27,000
最新一期的 terminal emulator

661
00:24:27,000 --> 00:24:29,000
虽然我几乎没听懂在讲什么

662
00:24:29,000 --> 00:24:30,000
辛苦你了

663
00:24:30,000 --> 00:24:31,000
但是这种形式

664
00:24:31,000 --> 00:24:35,000
这种节目形式的好处就是可以一边听着也不耽误手头的事

665
00:24:35,000 --> 00:24:36,000
还好

666
00:24:36,000 --> 00:24:38,000
我们应该有一个 convention

667
00:24:38,000 --> 00:24:39,000
就是当你大声念的时候

668
00:24:39,000 --> 00:24:41,000
就是反馈的内容

669
00:24:41,000 --> 00:24:43,000
然后当你小声的时候

670
00:24:43,000 --> 00:24:44,000
我应该换一种 voice

671
00:24:44,000 --> 00:24:45,000
对

672
00:24:45,000 --> 00:24:46,000
换一种 voice

673
00:24:46,000 --> 00:24:47,000
来我现在开始

674
00:24:47,000 --> 00:24:50,000
我们为了表意清晰

675
00:24:50,000 --> 00:24:51,000
我们进入一个

676
00:24:51,000 --> 00:24:54,000
就是以后我念听众反馈都会用一种

677
00:24:54,000 --> 00:24:56,000
不是我这种日常说话的声音

678
00:24:56,000 --> 00:24:57,000
说用播音枪好了

679
00:24:57,000 --> 00:24:58,000
对

680
00:24:58,000 --> 00:25:01,000
这次的反馈是关于上一期命令行的

681
00:25:01,000 --> 00:25:06,000
是因为最近我决定把网站迁移到某云服务器上

682
00:25:06,000 --> 00:25:07,000
正好折腾了两天

683
00:25:07,000 --> 00:25:11,000
Linux 的 web 环境配置真的是无比的痛苦

684
00:25:11,000 --> 00:25:14,000
所以想说一下对命令行的看法和疑问

685
00:25:14,000 --> 00:25:16,000
当然是从外行的角度

686
00:25:16,000 --> 00:25:17,000
和大多数人一样

687
00:25:17,000 --> 00:25:21,000
我真正开始接触计算机也是从 windows 开始的

688
00:25:21,000 --> 00:25:23,000
对于命令行的了解

689
00:25:23,000 --> 00:25:25,000
基本上仅限于在 windows 命令提示符下

690
00:25:25,000 --> 00:25:28,000
拼一下域名或者 ipconfig

691
00:25:28,000 --> 00:25:31,000
看一下本期 ip 等简单操作

692
00:25:31,000 --> 00:25:33,000
对于 Linux 是完全陌生的

693
00:25:33,000 --> 00:25:39,000
之前在本机环境测试都是装一个 web

694
00:25:39,000 --> 00:25:41,000
集成 web 环境

695
00:25:41,000 --> 00:25:46,000
WAMP 是 windows based apache mysql php

696
00:25:46,000 --> 00:25:50,000
这是 lamp 的衍生

697
00:25:50,000 --> 00:25:56,000
然后所有的操作都可以通过图形界面的菜单

698
00:25:56,000 --> 00:25:58,000
或者编辑器来操作

699
00:25:58,000 --> 00:26:03,000
我最近才知道 Linux 都是需要用命令来操作这些简单事情

700
00:26:03,000 --> 00:26:06,000
我记得很多年前就听说过一些 Linux 系统

701
00:26:06,000 --> 00:26:10,000
比如 ubuntu 就已经实现了类似 windows 的图形界面

702
00:26:10,000 --> 00:26:13,000
而 mac os 也是基于 nxt 的

703
00:26:13,000 --> 00:26:15,000
这里说明一下这个是错的

704
00:26:15,000 --> 00:26:17,000
mac os 是基于 bsd 的

705
00:26:17,000 --> 00:26:20,000
我有点搞不懂的是

706
00:26:20,000 --> 00:26:25,000
为什么现在的服务器还普遍使用 xiao 命令行的操作方式

707
00:26:25,000 --> 00:26:27,000
而不是像 windows 那样远程登录过去

708
00:26:27,000 --> 00:26:29,000
直接用图形界面操作

709
00:26:29,000 --> 00:26:32,000
当然我也看到有的观点说是为了节省性能

710
00:26:32,000 --> 00:26:36,000
但是我觉得对于今天的硬件配置加一个图形界面

711
00:26:36,000 --> 00:26:37,000
这样的资源应该是微乎其微吧

712
00:26:37,000 --> 00:26:40,000
是不是有其他的原因呢

713
00:26:40,000 --> 00:26:44,000
还有就是我本来以为我使用的云服务已经实现了类似虚拟主机

714
00:26:44,000 --> 00:26:47,000
那样的 web 图形界面管理能力

715
00:26:47,000 --> 00:26:49,000
但是我发现完全不是那样

716
00:26:49,000 --> 00:26:50,000
实际上

717
00:26:50,000 --> 00:26:53,000
他们只是在硬件层面实现了弹性和虚拟化

718
00:26:53,000 --> 00:26:56,000
用户拿到的仍然是一个空白的系统

719
00:26:56,000 --> 00:26:58,000
一切需要自己配置

720
00:26:58,000 --> 00:27:01,000
虽然他们有云市场里面可以购买集成了的镜像

721
00:27:01,000 --> 00:27:02,000
但是我试了一下

722
00:27:02,000 --> 00:27:04,000
根本用不了

723
00:27:04,000 --> 00:27:06,000
而且客服根本就不恢复

724
00:27:06,000 --> 00:27:10,000
所以最后我只能自己按照他们的配置教程去做

725
00:27:10,000 --> 00:27:14,000
但是他们的文档明显是写给专业用户的

726
00:27:14,000 --> 00:27:15,000
比如说

727
00:27:15,000 --> 00:27:18,000
比如刚开始就说如何运行安装命令

728
00:27:18,000 --> 00:27:19,000
却不告诉你

729
00:27:19,000 --> 00:27:21,000
如何把安装包弄到服务器上

730
00:27:21,000 --> 00:27:24,000
最后我是从一个视频里面才找到办法

731
00:27:24,000 --> 00:27:27,000
用 Linux 自带的命令上传过去

732
00:27:27,000 --> 00:27:29,000
然后再用命令解压点点点

733
00:27:29,000 --> 00:27:31,000
最后配置好了程序跑几分钟

734
00:27:31,000 --> 00:27:33,000
MySQL 就挂了

735
00:27:33,000 --> 00:27:36,000
我根据错误提示从网上找解决方案

736
00:27:36,000 --> 00:27:38,000
结果发现有四五种可能

737
00:27:38,000 --> 00:27:40,000
而且也没有把原因说清楚

738
00:27:40,000 --> 00:27:42,000
最后都试过还是不行

739
00:27:42,000 --> 00:27:45,000
只能重启服务器维持几分钟

740
00:27:45,000 --> 00:27:46,000
好吧

741
00:27:46,000 --> 00:27:46,000
我就说多了

742
00:27:47,000 --> 00:27:48,000
基本上我的感受

743
00:27:49,000 --> 00:27:50,000
就像是一个小黑箱

744
00:27:50,000 --> 00:27:52,000
对于服务器来说

745
00:27:52,000 --> 00:27:54,000
也是一种神秘无形的存在

746
00:27:54,000 --> 00:27:56,000
只能通过一个小黑窗

747
00:27:56,000 --> 00:27:58,000
通过某种神秘的密码和他对话

748
00:27:58,000 --> 00:28:00,000
让人困惑和气愤的是

749
00:28:00,000 --> 00:28:02,000
为什么我所有步骤都做对了

750
00:28:02,000 --> 00:28:04,000
还是出各种问题

751
00:28:04,000 --> 00:28:05,000
或者已经能运行了

752
00:28:05,000 --> 00:28:07,000
还是会出一些小的错误

753
00:28:07,000 --> 00:28:10,000
这这么两天重置无数次之后

754
00:28:10,000 --> 00:28:12,000
我终于崩溃了

755
00:28:12,000 --> 00:28:15,000
所以最后我通过根据别人的提示

756
00:28:15,000 --> 00:28:17,000
用了一个云主机面板

757
00:28:17,000 --> 00:28:18,000
可以通过图形界面

758
00:28:19,000 --> 00:28:21,000
去做一些实际的操作了

759
00:28:21,000 --> 00:28:24,000
这件事让我意识到运维并不是一件容易的事

760
00:28:24,000 --> 00:28:25,000
但至于为什么会这样

761
00:28:25,000 --> 00:28:27,000
我还是有点不明白

762
00:28:27,000 --> 00:28:29,000
也许因为已经习惯了 windows

763
00:28:29,000 --> 00:28:31,000
这种图形化的直观操作方式

764
00:28:31,000 --> 00:28:34,000
或者像 smartphone 上的应用

765
00:28:34,000 --> 00:28:38,000
其实大部分工作开发人员都替你完成了

766
00:28:38,000 --> 00:28:40,000
而 Linux 这样的

767
00:28:40,000 --> 00:28:43,000
只能从一砖一瓦自己开始盖大楼

768
00:28:43,000 --> 00:28:47,000
要自己亲自踏过所有的坑才能跑起来

769
00:28:47,000 --> 00:28:49,000
我总觉得这不是一种理想的方式

770
00:28:49,000 --> 00:28:50,000
用一个例子来说

771
00:28:50,000 --> 00:28:52,000
我觉得微信大行其道

772
00:28:52,000 --> 00:28:53,000
其中有一个重要原因可能是

773
00:28:53,000 --> 00:28:55,000
它通过图形化的直观的

774
00:28:55,000 --> 00:28:58,000
人人都可以操作的方式

775
00:28:58,000 --> 00:29:01,000
完成了以前只有开发人员才能完成的工作

776
00:29:01,000 --> 00:29:05,000
直到现在一个没有任何编程基础的人

777
00:29:05,000 --> 00:29:08,000
想在 web 上做一个类似公众号的东西

778
00:29:08,000 --> 00:29:10,000
都是几乎不可能的

779
00:29:10,000 --> 00:29:13,000
所以就算是公众号早期的时候

780
00:29:13,000 --> 00:29:15,000
仅仅只有一个发布图文的功能

781
00:29:15,000 --> 00:29:19,000
几乎相当于 web 2.0 以前的技术学院的功能

782
00:29:19,000 --> 00:29:22,000
对平衡模式仍然吸引了大量用户

783
00:29:26,000 --> 00:29:28,000
后面就不用念了吧

784
00:29:28,000 --> 00:29:32,000
您现在收听到的是内核恐慌一档 real 卖萌的经过

785
00:29:32,000 --> 00:29:34,000
OK 现在签好自己的声音

786
00:29:34,000 --> 00:29:37,000
表示听众反馈环节结束

787
00:29:37,000 --> 00:29:40,000
其实你觉不觉得这个反馈代表了很多人的心声

788
00:29:40,000 --> 00:29:45,000
我觉得有点像在回顾自己的童年

789
00:29:45,000 --> 00:29:47,000
童年太早了吧你

790
00:29:47,000 --> 00:29:48,000
就差了

791
00:29:49,000 --> 00:29:50,000
20 年前呢

792
00:29:50,000 --> 00:29:53,000
就我们刚学接触 Linux 的时候

793
00:29:53,000 --> 00:29:55,000
差不多也经历过这种一种很

794
00:29:55,000 --> 00:29:56,000
怎么叫

795
00:29:56,000 --> 00:29:57,000
我用那个词

796
00:29:57,000 --> 00:29:57,000
太太叫

797
00:29:57,000 --> 00:30:00,000
让人困惑和气愤的时代

798
00:30:00,000 --> 00:30:02,000
对这篇 email 里面

799
00:30:02,000 --> 00:30:04,000
其实我当时有种

800
00:30:04,000 --> 00:30:05,000
冲动就是把它打印出来

801
00:30:05,000 --> 00:30:07,000
被假扮的感觉是不是

802
00:30:07,000 --> 00:30:08,000
不是把它打印出来

803
00:30:08,000 --> 00:30:10,000
然后把其中一些

804
00:30:10,000 --> 00:30:12,000
亮点的句子用这个

805
00:30:12,000 --> 00:30:14,000
荧光笔 highlight

806
00:30:14,000 --> 00:30:17,000
比如这个让人困惑和气愤的事

807
00:30:17,000 --> 00:30:18,000
对

808
00:30:18,000 --> 00:30:21,000
因为其实这则反馈其实我觉得

809
00:30:21,000 --> 00:30:22,000
相当有代表性

810
00:30:22,000 --> 00:30:23,000
因为其实我们自己

811
00:30:23,000 --> 00:30:27,000
起码我自己也是经历过他这个阶段

812
00:30:27,000 --> 00:30:29,000
这么摸索过来的嘛

813
00:30:29,000 --> 00:30:30,000
就是觉得

814
00:30:30,000 --> 00:30:30,000
就是

815
00:30:30,000 --> 00:30:32,000
这什么是跟什么

816
00:30:32,000 --> 00:30:35,000
一堆什么乱七八糟的玩意儿在屏幕跳来跳去对吧

817
00:30:35,000 --> 00:30:36,000
为什么这么难

818
00:30:36,000 --> 00:30:39,000
为什么不能点两下就搞定了

819
00:30:39,000 --> 00:30:40,000
但我觉得这个是

820
00:30:40,000 --> 00:30:42,000
这里有一个历史背景在哪

821
00:30:42,000 --> 00:30:46,000
就是我们的那个时代你必须去买杂志或者是

822
00:30:46,000 --> 00:30:48,000
看报纸上一篇

823
00:30:48,000 --> 00:30:53,000
受自主限制的文章来一步一步的去

824
00:30:53,000 --> 00:30:54,000
钻研怎么

825
00:30:54,000 --> 00:30:55,000
没有搜索引擎

826
00:30:55,000 --> 00:30:57,000
对但是

827
00:30:57,000 --> 00:31:00,000
现在这个时代还是会

828
00:31:00,000 --> 00:31:02,000
有这样同样的

829
00:31:02,000 --> 00:31:06,000
比如那个是最简单的那个时候不可能有什么一个

830
00:31:06,000 --> 00:31:08,000
virtual box 让你装一个 Linux

831
00:31:08,000 --> 00:31:12,000
然后你按一个快键切换出来就可以去查文档了

832
00:31:12,000 --> 00:31:14,000
这种事情是不存在的对吧

833
00:31:14,000 --> 00:31:16,000
就一台电脑装上就那个地方

834
00:31:16,000 --> 00:31:18,000
然后崩溃了你没有任何东西可以用对吧

835
00:31:18,000 --> 00:31:19,000
对

836
00:31:19,000 --> 00:31:21,000
而且那个时候我

837
00:31:21,000 --> 00:31:21,000
反正

838
00:31:21,000 --> 00:31:23,000
somehow 脑子一热吧

839
00:31:23,000 --> 00:31:27,000
windows 整个删掉了就

840
00:31:27,000 --> 00:31:28,000
就连一个

841
00:31:28,000 --> 00:31:32,000
想打游戏的就是非常挫折的时候

842
00:31:32,000 --> 00:31:38,000
想要打游戏都没有选择只能关机

843
00:31:38,000 --> 00:31:41,000
对我们但我觉得其实他这个

844
00:31:41,000 --> 00:31:42,000
有

845
00:31:42,000 --> 00:31:44,000
有几个方面但是我们这个可能展开来讨论

846
00:31:44,000 --> 00:31:47,000
但是我觉得首先有一点我要承认的就是说他

847
00:31:47,000 --> 00:31:48,000
说的这件事情

848
00:31:48,000 --> 00:31:49,000
从一个

849
00:31:49,000 --> 00:31:53,000
就如果我们把这个 Linux 服务器当成一个消费级别的产品来看

850
00:31:53,000 --> 00:31:57,000
就从他的产品感或者说这个易用性

851
00:31:57,000 --> 00:31:58,000
他确实是很差的

852
00:31:58,000 --> 00:32:01,000
这点我们要承认

853
00:32:01,000 --> 00:32:04,000
沿用那个上一期提到那个车的比喻

854
00:32:04,000 --> 00:32:06,000
Linux 卖给你的是坦克呀

855
00:32:06,000 --> 00:32:07,000
那里面一大堆

856
00:32:07,000 --> 00:32:09,000
而且是不保证能正常运行

857
00:32:09,000 --> 00:32:13,000
对里面搞不好你坐进去连方向盘都没有

858
00:32:13,000 --> 00:32:14,000
是两个操纵杆

859
00:32:14,000 --> 00:32:17,000
你得先明白同时推操纵杆是前进

860
00:32:17,000 --> 00:32:18,000
对

861
00:32:18,000 --> 00:32:20,000
一个前一个后就是转弯

862
00:32:20,000 --> 00:32:23,000
这跟就是你连方向盘的使用经验都没有了

863
00:32:23,000 --> 00:32:23,000
对吧

864
00:32:23,000 --> 00:32:24,000
没错

865
00:32:24,000 --> 00:32:25,000
这个

866
00:32:25,000 --> 00:32:28,000
这确实他不是一个他不是一个包装的

867
00:32:28,000 --> 00:32:29,000
当然也有现在有很多商业公司在做

868
00:32:29,000 --> 00:32:30,000
比如说

869
00:32:30,000 --> 00:32:32,000
就像我们觉得一项一些比较

870
00:32:32,000 --> 00:32:34,000
比较 user friendly

871
00:32:34,000 --> 00:32:37,000
就比较用户友好的这个 Linux 发行版

872
00:32:37,000 --> 00:32:38,000
他做的已经还

873
00:32:38,000 --> 00:32:41,000
就是在这方面做的已经比以前好多了

874
00:32:41,000 --> 00:32:43,000
以前那个时代真的是你要自己去

875
00:32:43,000 --> 00:32:45,000
下载一个这个什么 Table 回来

876
00:32:45,000 --> 00:32:48,000
解压编译然后选各种参数

877
00:32:48,000 --> 00:32:49,000
然后自己解决各种依赖对吧

878
00:32:49,000 --> 00:32:51,000
然后才能搞上一个软件

879
00:32:51,000 --> 00:32:53,000
那现在比如说

880
00:32:53,000 --> 00:32:55,000
大部分主流的发行版

881
00:32:55,000 --> 00:32:57,000
都有很成熟的这个包管理器

882
00:32:57,000 --> 00:32:59,000
然后你只要运行几条命令就连上网了

883
00:32:59,000 --> 00:33:00,000
就可以自动安装

884
00:33:00,000 --> 00:33:01,000
然后

885
00:33:01,000 --> 00:33:04,000
包括所有的依赖呀基本的配置都给你搞好了对吧

886
00:33:04,000 --> 00:33:06,000
其实已经比

887
00:33:06,000 --> 00:33:08,000
十几年前好得

888
00:33:08,000 --> 00:33:09,000
多多多了

889
00:33:09,000 --> 00:33:11,000
就从我们这些老用户的角度来看

890
00:33:11,000 --> 00:33:13,000
但是他说的一些问题确实存在

891
00:33:13,000 --> 00:33:14,000
特别是对于一种

892
00:33:14,000 --> 00:33:18,000
你刚从 windows 过来然后你也完全不理解这个

893
00:33:18,000 --> 00:33:19,000
这个命令行操作方式也不理解

894
00:33:19,000 --> 00:33:21,000
Linux 这些原理的话

895
00:33:21,000 --> 00:33:24,000
其实没有这个没有基础嘛

896
00:33:24,000 --> 00:33:26,000
你真的是很难去搞懂

897
00:33:26,000 --> 00:33:28,000
因为就是在

898
00:33:28,000 --> 00:33:31,000
命令行的界面有一个发现性比较差的一个问题

899
00:33:31,000 --> 00:33:32,000
就如果你不知道要做什么的话

900
00:33:32,000 --> 00:33:34,000
那你就不知道

901
00:33:34,000 --> 00:33:36,000
对你就根本就无处

902
00:33:36,000 --> 00:33:38,000
你不能东点点西看看对吧

903
00:33:38,000 --> 00:33:40,000
你看啥呢你都不知道

904
00:33:40,000 --> 00:33:41,000
这就是一个很

905
00:33:41,000 --> 00:33:45,000
自由开放的一个世界你都不知道该查什么

906
00:33:45,000 --> 00:33:47,000
然后也不像说

907
00:33:47,000 --> 00:33:48,000
有图形界面的话

908
00:33:48,000 --> 00:33:49,000
你可以知道看一下一共有多少个选项

909
00:33:49,000 --> 00:33:50,000
选项是干嘛的对吧

910
00:33:50,000 --> 00:33:53,000
他有一个这个逐渐学习的一个过程

911
00:33:53,000 --> 00:33:54,000
但是呢

912
00:33:54,000 --> 00:33:56,000
就说完这些问题之后

913
00:33:56,000 --> 00:33:58,000
其实就我自己的这种

914
00:33:58,000 --> 00:34:00,000
这种摸索学习的基因来看

915
00:34:00,000 --> 00:34:05,000
其实他这个问题的最核心的原因就是说

916
00:34:05,000 --> 00:34:07,000
他没有这个基础知识

917
00:34:07,000 --> 00:34:08,000
就是说

918
00:34:08,000 --> 00:34:10,000
还没有学会走

919
00:34:10,000 --> 00:34:11,000
就想学会跑

920
00:34:11,000 --> 00:34:12,000
我觉得应该这么说

921
00:34:12,000 --> 00:34:14,000
就是他是

922
00:34:14,000 --> 00:34:17,000
我觉得这个比喻可能非常的

923
00:34:17,000 --> 00:34:18,000
嗯

924
00:34:18,000 --> 00:34:20,000
嗯

925
00:34:20,000 --> 00:34:22,000
政治不正确但是

926
00:34:22,000 --> 00:34:24,000
应该说他比较像

927
00:34:24,000 --> 00:34:26,000
他是一条鱼他游惯了

928
00:34:26,000 --> 00:34:27,000
然后

929
00:34:27,000 --> 00:34:28,000
上岸之后他

930
00:34:28,000 --> 00:34:31,000
试图在一个没有水的地方用

931
00:34:31,000 --> 00:34:34,000
摆动尾的方式前进这是

932
00:34:34,000 --> 00:34:35,000
行不通的

933
00:34:35,000 --> 00:34:38,000
就是

934
00:34:38,000 --> 00:34:45,000
因为有那些 windows 的知识图形化的知识在那边你会想说沿用你

935
00:34:45,000 --> 00:34:49,000
曾经可行的方式去在一个崭新的环境里面工作

936
00:34:49,000 --> 00:34:50,000
这是

937
00:34:50,000 --> 00:34:51,000
对你必须先

938
00:34:51,000 --> 00:34:53,000
一个词叫安乐

939
00:34:53,000 --> 00:34:54,000
就是

940
00:34:54,000 --> 00:34:56,000
把一些东西忘掉

941
00:34:56,000 --> 00:34:56,000
就

942
00:34:56,000 --> 00:35:00,000
像学那个什么代集权一样

943
00:35:00,000 --> 00:35:02,000
忘掉自己所学的东西才可以

944
00:35:02,000 --> 00:35:05,000
重新开始去学一些新的东西

945
00:35:05,000 --> 00:35:06,000
对

946
00:35:06,000 --> 00:35:10,000
就是说你特别是你从那个一个故意图形界面

947
00:35:10,000 --> 00:35:14,000
转化成一个这个命令行界面这种是有本质就是范式转换了嘛

948
00:35:14,000 --> 00:35:16,000
你那些之前的经验是

949
00:35:16,000 --> 00:35:17,000
就行不通的

950
00:35:17,000 --> 00:35:18,000
然后

951
00:35:18,000 --> 00:35:20,000
那么就会

952
00:35:20,000 --> 00:35:22,000
那么一个正确的方法应该怎么样

953
00:35:22,000 --> 00:35:23,000
就是说

954
00:35:23,000 --> 00:35:26,000
你就是需要看一些更加基础更加底层东西

955
00:35:26,000 --> 00:35:27,000
因为一步一步看

956
00:35:27,000 --> 00:35:29,000
Linux 基本操作它的基本原理是怎么样子的

957
00:35:29,000 --> 00:35:32,000
他为什么会有这些东西对吧

958
00:35:32,000 --> 00:35:34,000
像我们之前讨论过很多这种问题

959
00:35:34,000 --> 00:35:35,000
他的这个命令行

960
00:35:35,000 --> 00:35:37,000
命令行界面是更早的图形界面出现的

961
00:35:38,000 --> 00:35:39,000
他的历史严格是什么样子

962
00:35:39,000 --> 00:35:41,000
那为什么我们在服务器上

963
00:35:41,000 --> 00:35:44,000
还是沿用这么一套东西有更多样的历史的原因

964
00:35:44,000 --> 00:35:44,000
或者

965
00:35:45,000 --> 00:35:47,000
一些这些更加务实的考虑

966
00:35:47,000 --> 00:35:49,000
就没有那么简单的一个

967
00:35:50,000 --> 00:35:51,000
那个

968
00:35:52,000 --> 00:35:54,000
就没有图形界面那么

969
00:35:54,000 --> 00:35:55,000
直观的

970
00:35:55,000 --> 00:35:56,000
可以用的界面嘛

971
00:35:56,000 --> 00:35:59,000
反正有句话说学者就是学哲学史

972
00:35:59,000 --> 00:36:01,000
其实你学操作系统至少 Linux 操作系统

973
00:36:02,000 --> 00:36:03,000
你其实是要学一遍 Linux 的历史

974
00:36:04,000 --> 00:36:06,000
这是绕不过去的一件事

975
00:36:06,000 --> 00:36:07,000
但其实

976
00:36:07,000 --> 00:36:10,000
但其实我觉得对很多这种新手来讲他是

977
00:36:11,000 --> 00:36:13,000
就起码我自己也有这个很经历

978
00:36:13,000 --> 00:36:14,000
我就是说

979
00:36:14,000 --> 00:36:14,000
我至少

980
00:36:15,000 --> 00:36:16,000
做这么一个非常简单的事情对吧

981
00:36:17,000 --> 00:36:17,000
我为什么要花

982
00:36:18,000 --> 00:36:22,000
一个月或者半年的时间去研究一遍这么底层的东西

983
00:36:22,000 --> 00:36:24,000
你学这个 Windows 的时候

984
00:36:24,000 --> 00:36:25,000
你不也花了这么多时间

985
00:36:25,000 --> 00:36:27,000
做同样的事情你就忘了吗

986
00:36:27,000 --> 00:36:28,000
对吧

987
00:36:28,000 --> 00:36:28,000
所以

988
00:36:28,000 --> 00:36:31,000
所以我觉得还是要先首先要把心态放对

989
00:36:31,000 --> 00:36:33,000
如果你要选择这条道路的话

990
00:36:34,000 --> 00:36:36,000
那你肯定是要先打一些就是要先读小学嘛

991
00:36:37,000 --> 00:36:38,000
最大的问题就是很多人

992
00:36:38,000 --> 00:36:39,000
高中的作业

993
00:36:39,000 --> 00:36:41,000
最大的问题是很多人可能就被

994
00:36:42,000 --> 00:36:43,000
被迫去做这件事情

995
00:36:43,000 --> 00:36:44,000
这并不是他主

996
00:36:45,000 --> 00:36:45,000
动的一个意愿

997
00:36:46,000 --> 00:36:46,000
比如说他

998
00:36:46,000 --> 00:36:47,000
比如说这位听众他

999
00:36:48,000 --> 00:36:52,000
的动机其实就很简单的是把网站迁移到另外一个云服务器上对吧

1000
00:36:52,000 --> 00:36:53,000
那

1001
00:36:53,000 --> 00:36:54,000
为什么就要

1002
00:36:55,000 --> 00:36:58,000
被逼着去折腾这么多是吧

1003
00:36:59,000 --> 00:37:03,000
对其实也有其他的选项只是说你没有选择那些更简单

1004
00:37:04,000 --> 00:37:05,000
有那个什么各种

1005
00:37:05,000 --> 00:37:10,000
什么不叫云服务器叫什么主机空间嘛对吧那些比较简单

1006
00:37:11,000 --> 00:37:14,000
他各种什么 PHP MyMeme 啊他都给你搞定了对吧你直接

1007
00:37:14,000 --> 00:37:20,000
配置复制过去就好也可以呀但是你自己选择的一条 hard way 那你肯定要默默你自己要想

1008
00:37:20,000 --> 00:37:22,000
要有一个心理准备嘛

1009
00:37:23,000 --> 00:37:26,000
然后他里面其实提到一些一个核心的问题就是为什么

1010
00:37:27,000 --> 00:37:28,000
这个

1011
00:37:28,000 --> 00:37:32,000
就是他说为什么现在的服务器还普遍使用 share 命令行的操作方式

1012
00:37:32,000 --> 00:37:36,000
而不是像 windows 那样远程都能够直接用图形界面操作

1013
00:37:39,000 --> 00:37:40,000
对当然是有原因的

1014
00:37:40,000 --> 00:37:43,000
就无言以对

1015
00:37:44,000 --> 00:37:45,000
我觉得要从我的

1016
00:37:45,000 --> 00:37:49,000
我先说我的一点我觉得就是因为命令行是个 universal 的东西

1017
00:37:49,000 --> 00:37:50,000
就是

1018
00:37:50,000 --> 00:37:51,000
呃

1019
00:37:52,000 --> 00:37:52,000
他是

1020
00:37:53,000 --> 00:37:55,000
像 Rail 最喜欢说的那句话一样他是一个

1021
00:37:55,000 --> 00:37:58,000
最大公约数

1022
00:37:59,000 --> 00:38:00,000
是这么说

1023
00:38:00,000 --> 00:38:04,000
最大公约数就是你在一台路由器上

1024
00:38:04,000 --> 00:38:06,000
错了最小公倍数

1025
00:38:06,000 --> 00:38:08,000
不不不最大公约数

1026
00:38:09,000 --> 00:38:14,000
就是任何一个机器任何一个数都有的那个部分嘛

1027
00:38:14,000 --> 00:38:16,000
所以当然是最大公约数

1028
00:38:16,000 --> 00:38:18,000
没有啊 windows 没有 share

1029
00:38:19,000 --> 00:38:20,000
windows server 没有 share

1030
00:38:20,000 --> 00:38:21,000
有的

1031
00:38:22,000 --> 00:38:23,000
power shell 算 share

1032
00:38:23,000 --> 00:38:26,000
我的意思是命令行这个东西基本上是可以

1033
00:38:26,000 --> 00:38:31,000
确定它在任何一个环境下都应该有的你可能比如说什么

1034
00:38:33,000 --> 00:38:35,000
Mac OS 9

1035
00:38:35,000 --> 00:38:36,000
或者是

1036
00:38:36,000 --> 00:38:37,000
BOS

1037
00:38:38,000 --> 00:38:38,000
可能没有命令行

1038
00:38:38,000 --> 00:38:39,000
但是

1039
00:38:39,000 --> 00:38:41,000
其他的基本上每个操作性都会有命令行

1040
00:38:42,000 --> 00:38:43,000
而且呢

1041
00:38:43,000 --> 00:38:44,000
呃

1042
00:38:44,000 --> 00:38:46,000
比如说你要给一个

1043
00:38:47,000 --> 00:38:48,000
呃

1044
00:38:48,000 --> 00:38:49,000
单片机变成

1045
00:38:49,000 --> 00:38:51,000
单片机上是不可能跑起来

1046
00:38:51,000 --> 00:38:52,000
图形界面的对吧

1047
00:38:53,000 --> 00:38:59,000
另一方面你要给一个比如说你要去调一些路由器上的东西路由器也不可能给你一个图形界面当然它有可能装一个

1048
00:38:59,000 --> 00:39:00,000
web 服务器但

1049
00:39:00,000 --> 00:39:01,000
但最多也就是那样

1050
00:39:02,000 --> 00:39:03,000
呃所以

1051
00:39:04,000 --> 00:39:06,000
为什么说

1052
00:39:06,000 --> 00:39:11,000
Linux 普遍还要使用 share 命令行的操作方式我觉得一方面就是这个

1053
00:39:11,000 --> 00:39:13,000
另一方面呢则是

1054
00:39:13,000 --> 00:39:16,000
使用图形界面是一种非常

1055
00:39:17,000 --> 00:39:18,000
效率低下的方式

1056
00:39:18,000 --> 00:39:22,000
就是可能这位听众现在还没有感觉到但是

1057
00:39:22,000 --> 00:39:24,000
如果用

1058
00:39:25,000 --> 00:39:30,000
借用这个通信领域的一个概念来说的话就是伤非常的

1059
00:39:32,000 --> 00:39:32,000
的低

1060
00:39:33,000 --> 00:39:34,000
信息伤非常的低

1061
00:39:35,000 --> 00:39:38,000
你你传挂一个窗口好吧这个窗口可能有

1062
00:39:38,000 --> 00:39:41,000
99%像素是对于我来说没有任何意义的

1063
00:39:41,000 --> 00:39:42,000
我唯一需要的就是那个

1064
00:39:43,000 --> 00:39:45,000
组成

1065
00:39:45,000 --> 00:39:47,000
输入命令行密码的窗口

1066
00:39:47,000 --> 00:39:48,000
的那个 text

1067
00:39:49,000 --> 00:39:50,000
text input

1068
00:39:50,000 --> 00:39:51,000
仅此而已对吧

1069
00:39:51,000 --> 00:39:54,000
那为什么不就直接告诉我说我应该输入命令行密码呢

1070
00:39:54,000 --> 00:39:56,000
用户名和密码呢

1071
00:39:57,000 --> 00:40:02,000
而且如果你每一台计算机都登录过去用图形界面操作的话

1072
00:40:03,000 --> 00:40:09,000
一方面每一台计算机的图形界面将会有细微的不同不管是设计上的还是

1073
00:40:10,000 --> 00:40:11,000
操作系统本身上的不同

1074
00:40:11,000 --> 00:40:18,000
这个会给你带来一个影响就是你会每登录到一个新服务器上就被迫去熟悉这个服务器的一些

1075
00:40:19,000 --> 00:40:21,000
特性比如说图标摆在哪或者是

1076
00:40:22,000 --> 00:40:24,000
字体渲染有些不一样的地方

1077
00:40:25,000 --> 00:40:27,000
但是在命令行下面没有这个问题

1078
00:40:27,000 --> 00:40:28,000
你不管

1079
00:40:28,000 --> 00:40:30,000
到哪里你用到的那个 shell

1080
00:40:31,000 --> 00:40:33,000
当然我们那些讲过了什么 bash

1081
00:40:33,000 --> 00:40:34,000
之类的

1082
00:40:34,000 --> 00:40:36,000
但是他们大同小异啊你只需要

1083
00:40:38,000 --> 00:40:41,000
敲几乎一样的一些命令就可以完成一模一样的

1084
00:40:42,000 --> 00:40:45,000
这个效率其实是要比图形界面高很多

1085
00:40:46,000 --> 00:40:50,000
对你刚才讲了一点技术上的原因啊那我讲几个另外一个维度的事情吧

1086
00:40:51,000 --> 00:40:57,000
就说首先你说如果那个 Linux 服务器用图形界面操作可不可以我觉得

1087
00:40:58,000 --> 00:41:01,000
技术上是可以可行的呀但是有一个问题在于

1088
00:41:01,000 --> 00:41:02,000
你去看一下

1089
00:41:03,000 --> 00:41:05,000
现在的 Linux 发行板

1090
00:41:05,000 --> 00:41:09,000
甚至都没有几个主流发行板是用的同一个图形界面

1091
00:41:10,000 --> 00:41:11,000
这个是一个泛指啊

1092
00:41:12,000 --> 00:41:13,000
包括很多东西比如说

1093
00:41:14,000 --> 00:41:18,000
就像比如乌帮图他的那个图形系统他底层替代那些

1094
00:41:18,000 --> 00:41:20,000
最开始的时候我们上次讲过是这个

1095
00:41:20,000 --> 00:41:24,000
Ulix 上面的图形系统是一个 X 11 的这个这套东西吧

1096
00:41:25,000 --> 00:41:27,000
但是那个很古老现在基本上

1097
00:41:27,000 --> 00:41:28,000
从 80 年代开始吧

1098
00:41:30,000 --> 00:41:31,000
对对然后现在其实

1099
00:41:31,000 --> 00:41:35,000
就各家有各家的玩法比如说那个 canonical

1100
00:41:35,000 --> 00:41:38,000
就是乌帮图的东西他写了一个叫做 Mir 的东西替代这一套

1101
00:41:39,000 --> 00:41:41,000
没有别家才用 Mir 啊对呀

1102
00:41:41,000 --> 00:41:41,000
对

1103
00:41:41,000 --> 00:41:43,000
Mir 那个子系统

1104
00:41:43,000 --> 00:41:47,000
就连这种底层的东西都没有办法统一

1105
00:41:47,000 --> 00:41:50,000
更不用说上面的一些什么桌面环境的比如说有什么

1106
00:41:50,000 --> 00:41:51,000
Gnome 啊

1107
00:41:51,000 --> 00:41:57,000
有 KDE 啊还有各种各种那种小的什么 LXDE 之前我们讲过的嘛

1108
00:41:58,000 --> 00:42:01,000
在整个就是 Ulix 这个环境里面

1109
00:42:01,000 --> 00:42:03,000
图形界面这个事情从来就没有统一过

1110
00:42:04,000 --> 00:42:08,000
但反而是这个命令行这件事情刚才你讲是一个 Universal 的一个 Interface

1111
00:42:09,000 --> 00:42:11,000
是一个相对来说比较统一的东西

1112
00:42:11,000 --> 00:42:11,000
对

1113
00:42:12,000 --> 00:42:17,000
对相对来说统一的就是他可能大东西还是在命令上面但是就不用说是

1114
00:42:17,000 --> 00:42:22,000
大家对这个命令对这个 shell 的理解都不一样起码大家的 shell 都是一个

1115
00:42:23,000 --> 00:42:24,000
sudo tty 的设备对吧

1116
00:42:25,000 --> 00:42:31,000
但是这个还是有一个共同的这个是一个历史包袱你可以怎么理解或者说是一个商业现实就这样的所以他不可能

1117
00:42:31,000 --> 00:42:36,000
像 windows 那样有一家商业公司或者像 macOS 的那个 server 那样

1118
00:42:37,000 --> 00:42:38,000
他因为是只有一家

1119
00:42:39,000 --> 00:42:41,000
商业公司在做这个事情他可以把这个图形界面做得很漂亮因为

1120
00:42:42,000 --> 00:42:43,000
就你真的比一下那个 macOS

1121
00:42:44,000 --> 00:42:48,000
那个 s 10 的那个 server 其实做得也挺好的也是通过图形化的方式来控制的

1122
00:42:48,000 --> 00:42:49,000
然后他的底层

1123
00:42:49,000 --> 00:42:52,000
也是就是一个 unix 的系统嘛

1124
00:42:52,000 --> 00:42:54,000
那基本上就可以达到我们就

1125
00:42:54,000 --> 00:42:54,000
这就

1126
00:42:55,000 --> 00:42:56,000
达到他

1127
00:42:56,000 --> 00:43:00,000
Polydery 的理想的情况就是底层还是 unix 系统但是面上有一个很

1128
00:43:00,000 --> 00:43:01,000
简单

1129
00:43:01,000 --> 00:43:06,000
和好用的图形系统去解决可以远程登录去解决这个问题我现在

1130
00:43:07,000 --> 00:43:08,000
正在这么干对吧

1131
00:43:08,000 --> 00:43:08,000
但是

1132
00:43:09,000 --> 00:43:10,000
有一个问题是绕不开的

1133
00:43:10,000 --> 00:43:11,000
就是刚才讲那个

1134
00:43:12,000 --> 00:43:15,000
那个商的问题图形界面能表达的东西就他毕竟

1135
00:43:16,000 --> 00:43:18,000
他的那个抽象的维度有限吗

1136
00:43:18,000 --> 00:43:20,000
他能表达的一些东西其实是

1137
00:43:20,000 --> 00:43:21,000
不是那么够用的

1138
00:43:22,000 --> 00:43:22,000
然后

1139
00:43:23,000 --> 00:43:25,000
会导致有些比较复杂的软件的

1140
00:43:26,000 --> 00:43:26,000
配置

1141
00:43:26,000 --> 00:43:29,000
如果用图形化的方式来表达他的话

1142
00:43:29,000 --> 00:43:35,000
那个那个简直不可以接受的麻烦或者是难难以开发难以实现难以维护难以理解

1143
00:43:36,000 --> 00:43:38,000
有时候反而用一个文本界面看下手册

1144
00:43:39,000 --> 00:43:40,000
可能是更加简单的一个方式

1145
00:43:41,000 --> 00:43:41,000
当然同样的

1146
00:43:42,000 --> 00:43:44,000
来说就对于这些不同各种各样的软件来讲

1147
00:43:45,000 --> 00:43:45,000
大部分的我们现在

1148
00:43:46,000 --> 00:43:48,000
那上面这种开源的那种软件

1149
00:43:48,000 --> 00:43:49,000
他都不可能

1150
00:43:49,000 --> 00:43:51,000
由于前面那个那个图形系统四分五裂的原因

1151
00:43:52,000 --> 00:43:53,000
不可能说基于那个来

1152
00:43:54,000 --> 00:43:57,000
去支持各个主流操作系统的这些图形系统

1153
00:43:57,000 --> 00:43:59,000
图形系统吗因为你知道

1154
00:43:59,000 --> 00:44:01,000
很多我们用的这些 Linux 上面的软件

1155
00:44:01,000 --> 00:44:03,000
他在开发最早版本的时候

1156
00:44:04,000 --> 00:44:06,000
这些后来图形界面都还没有诞生呢

1157
00:44:06,000 --> 00:44:08,000
对吧他怎么可能为他提供支持呢

1158
00:44:09,000 --> 00:44:09,000
所以

1159
00:44:10,000 --> 00:44:11,000
所以他一定是采用一种类似

1160
00:44:12,000 --> 00:44:14,000
于配置文件的方式去实现的

1161
00:44:14,000 --> 00:44:16,000
而配置文件一定是通过这种

1162
00:44:16,000 --> 00:44:17,000
命令行的方式去

1163
00:44:17,000 --> 00:44:19,000
去加载去搞他的嘛

1164
00:44:20,000 --> 00:44:21,000
再然后

1165
00:44:21,000 --> 00:44:24,000
就是这个自动化的过程

1166
00:44:24,000 --> 00:44:25,000
就现在其实

1167
00:44:26,000 --> 00:44:26,000
我们真的

1168
00:44:26,000 --> 00:44:28,000
就对于那种大规模部署而言

1169
00:44:29,000 --> 00:44:31,000
手工去操作

1170
00:44:31,000 --> 00:44:32,000
某一个

1171
00:44:32,000 --> 00:44:35,000
这个 Linux 服务器然后去手工安装软件

1172
00:44:35,000 --> 00:44:37,000
基本上已经成为历史了

1173
00:44:37,000 --> 00:44:39,000
现在都是做基于这个

1174
00:44:39,000 --> 00:44:41,000
虚拟机基于这种镜像的方式

1175
00:44:42,000 --> 00:44:43,000
去部署一个基础环境

1176
00:44:43,000 --> 00:44:45,000
然后再之后再用类似于像

1177
00:44:46,000 --> 00:44:47,000
像用那个

1178
00:44:47,000 --> 00:44:48,000
那个还有一个

1179
00:44:48,000 --> 00:44:49,000
之间的那个

1180
00:44:49,000 --> 00:44:51,000
后来的

1181
00:44:51,000 --> 00:44:51,000
对

1182
00:44:52,000 --> 00:44:53,000
对

1183
00:44:54,000 --> 00:44:57,000
那是早一代的这个运为自动化的一些工具吗

1184
00:44:57,000 --> 00:44:58,000
后来

1185
00:44:58,000 --> 00:45:00,000
现在我们在流行这个 container

1186
00:45:00,000 --> 00:45:01,000
之间我们也

1187
00:45:01,000 --> 00:45:02,000
几次见过聊过嘛

1188
00:45:03,000 --> 00:45:04,000
是用 container 的方式

1189
00:45:04,000 --> 00:45:06,000
就一定他都是自动化的

1190
00:45:06,000 --> 00:45:10,000
自动化就更不需要有图形界面去增加这个东西的复杂性了比如说你

1191
00:45:10,000 --> 00:45:11,000
点鼠标先点哪个键后点键

1192
00:45:12,000 --> 00:45:13,000
你这东西怎么自动化

1193
00:45:13,000 --> 00:45:15,000
你可以用什么

1194
00:45:15,000 --> 00:45:17,000
macro recorder 这种东西

1195
00:45:17,000 --> 00:45:18,000
录制

1196
00:45:18,000 --> 00:45:19,000
这是实在是太

1197
00:45:20,000 --> 00:45:21,000
太淡了

1198
00:45:22,000 --> 00:45:27,000
所以就不管是说从历史严格也好技术层面也好还是说现在的实际的

1199
00:45:27,000 --> 00:45:29,000
商业的就实际的

1200
00:45:29,000 --> 00:45:30,000
大规模操作来讲

1201
00:45:30,000 --> 00:45:32,000
Linux server

1202
00:45:33,000 --> 00:45:36,000
都不可能用图形化的方式去管理和配置

1203
00:45:36,000 --> 00:45:41,000
甚至我们可以说在过去的 15 年里面软件界渐渐走出了这个

1204
00:45:41,000 --> 00:45:41,000
图形界的

1205
00:45:42,000 --> 00:45:42,000
迷思

1206
00:45:42,000 --> 00:45:45,000
走向了这个

1207
00:45:45,000 --> 00:45:48,000
命令行 Ritual 的复兴道路

1208
00:45:48,000 --> 00:45:53,000
基本上现在任何一个新推出的工具或者是

1209
00:45:53,000 --> 00:45:58,000
比较有用实用的开发者面向开发者的工具基本上都会只给你一个

1210
00:45:58,000 --> 00:46:00,000
命令行的工具

1211
00:46:00,000 --> 00:46:03,000
然后在文档上也只会教你说这个东西

1212
00:46:04,000 --> 00:46:05,000
安装很简单

1213
00:46:05,000 --> 00:46:08,000
apt-get install

1214
00:46:08,000 --> 00:46:09,000
boole install

1215
00:46:10,000 --> 00:46:10,000
然后

1216
00:46:11,000 --> 00:46:11,000
就

1217
00:46:12,000 --> 00:46:12,000
,

1218
00:46:13,000 --> 00:46:13,000
比如说 Docker

1219
00:46:14,000 --> 00:46:15,000
Docker 的命令

1220
00:46:15,000 --> 00:46:18,000
Docker 基本上不可能给你一个开发出一个图形界面来的

1221
00:46:20,000 --> 00:46:22,000
那其实说回他这个情况

1222
00:46:22,000 --> 00:46:27,000
那如果说那我们刚才讲的这个现状是这样以后也不大可能改了他这种小白用户怎么办

1223
00:46:27,000 --> 00:46:28,000
看我讲两种出路

1224
00:46:29,000 --> 00:46:29,000
第一个就是说

1225
00:46:30,000 --> 00:46:31,000
你学

1226
00:46:31,000 --> 00:46:37,000
你真的花了时间学比如说后面提到说他他明显是装了一个 mySQL 跑网站应该是一个类似于这种

1227
00:46:38,000 --> 00:46:40,000
Wordpress 的一个类型的运用吧

1228
00:46:40,000 --> 00:46:41,000
他给他装了一个 mySQL

1229
00:46:41,000 --> 00:46:42,000
他竟然在

1230
00:46:42,000 --> 00:46:44,000
2015 年

1231
00:46:44,000 --> 00:46:45,000
自己把

1232
00:46:45,000 --> 00:46:48,000
安装到传到服务器上解压然后

1233
00:46:48,000 --> 00:46:49,000
在那个了

1234
00:46:49,000 --> 00:46:52,000
其实这个你明显就是用错了嘛因为现在大部分的主流的

1235
00:46:53,000 --> 00:46:54,000
发行板都自带这种

1236
00:46:55,000 --> 00:46:56,000
mySQL 的这种

1237
00:46:56,000 --> 00:47:01,000
这其实还是一个我刚才说的 unlearn 的问题因为在 windows 上面没有这个东西对吧

1238
00:47:02,000 --> 00:47:04,000
对没有包管你

1239
00:47:04,000 --> 00:47:06,000
windows 用户习惯的时候我应该从什么地方

1240
00:47:06,000 --> 00:47:07,000
当你一个

1241
00:47:07,000 --> 00:47:10,000
下载一个需要安装的东西然后我双击他安装对吧

1242
00:47:10,000 --> 00:47:16,000
当你用之他自定是去 windows 上装东西的时候你会自然而然产生这样的疑惑

1243
00:47:16,000 --> 00:47:18,000
这个安装猫从哪来对吧

1244
00:47:19,000 --> 00:47:20,000
对对对

1245
00:47:20,000 --> 00:47:26,000
所以其实他就完全搞错了嘛然后其实这个事情真的是可以很简单几行命令都搞

1246
00:47:27,000 --> 00:47:28,000
就搞定就是从我们看来

1247
00:47:29,000 --> 00:47:30,000
两三行命令就可以搞定你

1248
00:47:31,000 --> 00:47:32,000
中间不用做任何别的

1249
00:47:32,000 --> 00:47:35,000
麻烦的事情而且配置都自动给你配置好了

1250
00:47:35,000 --> 00:47:36,000
但是

1251
00:47:36,000 --> 00:47:37,000
因为你不知道

1252
00:47:37,000 --> 00:47:39,000
什么是正确的方式所以你就只好选择一个

1253
00:47:40,000 --> 00:47:41,000
错误的方式

1254
00:47:41,000 --> 00:47:42,000
就一路踩坑了

1255
00:47:42,000 --> 00:47:43,000
反过来说

1256
00:47:44,000 --> 00:47:50,000
就是我们前面那一期讲这个包管理的时候这位听众明显没有认真听

1257
00:47:53,000 --> 00:47:54,000
他都说了嘛

1258
00:47:54,000 --> 00:47:59,000
边听一边听也不耽误手头的事儿结果听着听着没记住

1259
00:48:00,000 --> 00:48:02,000
anyway

1260
00:48:02,000 --> 00:48:04,000
就说其实这种情况就是说其实完全可以

1261
00:48:04,000 --> 00:48:05,000
不用

1262
00:48:05,000 --> 00:48:08,000
绕过他这些码就我们连自己就我们这种对这个

1263
00:48:09,000 --> 00:48:10,000
这个过程很了解的

1264
00:48:10,000 --> 00:48:16,000
都不会说自己去下载一个麦西口的那个安装包再传到福西上手东去编译再配置吗一定是

1265
00:48:16,000 --> 00:48:19,000
20 年前做这样的事情吧现在不可能

1266
00:48:20,000 --> 00:48:21,000
对

1267
00:48:21,000 --> 00:48:22,000
还有一个出路

1268
00:48:22,000 --> 00:48:24,000
就现在也有一些

1269
00:48:24,000 --> 00:48:26,000
这个厂商在尝试就是说他现在我们

1270
00:48:26,000 --> 00:48:27,000
那个叫

1271
00:48:27,000 --> 00:48:28,000
我们不是什么

1272
00:48:28,000 --> 00:48:30,000
叉叉叉

1273
00:48:30,000 --> 00:48:31,000
as a service

1274
00:48:31,000 --> 00:48:33,000
就是什么什么作为一个服务

1275
00:48:33,000 --> 00:48:36,000
现在他的这个层级上就叫 infrastructure as a service

1276
00:48:36,000 --> 00:48:39,000
就是做一个服务你可以买一个虚拟的服务

1277
00:48:39,000 --> 00:48:40,000
一个所谓的云

1278
00:48:40,000 --> 00:48:41,000
云服务器一个虚拟机嘛

1279
00:48:42,000 --> 00:48:43,000
就是他给你这个一个就把

1280
00:48:44,000 --> 00:48:48,000
过去把这个硬件事情把它变成那个虚拟的一个环境但是你还是要去维护中间的事情

1281
00:48:48,000 --> 00:48:49,000
但是对于这种

1282
00:48:50,000 --> 00:48:53,000
很多应用或者这个东西并不是最合适的选择

1283
00:48:53,000 --> 00:48:56,000
你可能需要选择一个叫做我们叫做

1284
00:48:56,000 --> 00:48:57,000
pass

1285
00:48:57,000 --> 00:48:58,000
就是 platform as a service

1286
00:48:58,000 --> 00:49:00,000
这 platform 什么意思呢就是说

1287
00:49:00,000 --> 00:49:02,000
这个 platform 可以把底层的刚才讲的那些

1288
00:49:03,000 --> 00:49:04,000
底层是有什么

1289
00:49:04,000 --> 00:49:06,000
什么多少个虚拟机构成的

1290
00:49:06,000 --> 00:49:08,000
他们虚拟上跑什么软件

1291
00:49:08,000 --> 00:49:09,000
这些都可以藏起来

1292
00:49:10,000 --> 00:49:12,000
你不用管你这种上面跑上成了一个应用

1293
00:49:12,000 --> 00:49:13,000
别说你要跑一个博客对吧

1294
00:49:14,000 --> 00:49:14,000
你只要知道

1295
00:49:15,000 --> 00:49:15,000
怎么在

1296
00:49:16,000 --> 00:49:20,000
在一个 pass 平台上去安装或者是运行一个 wordpress 的应用就好了

1297
00:49:20,000 --> 00:49:21,000
这个东西的

1298
00:49:22,000 --> 00:49:28,000
难度是远远低于在 S 上你自己从头到尾装一个 mySQL 装一个这个

1299
00:49:28,000 --> 00:49:30,000
nginx 或者是 apache

1300
00:49:30,000 --> 00:49:34,000
再装一个 PHP 的解释器然后再配置各种各样的要简单得多的

1301
00:49:34,000 --> 00:49:38,000
但还有一个更高级的就是我们叫 SaaS 嘛就是你的 software as a service

1302
00:49:38,000 --> 00:49:39,000
对吧

1303
00:49:39,000 --> 00:49:39,000
之前也

1304
00:49:40,000 --> 00:49:41,000
我们像国外那个

1305
00:49:42,000 --> 00:49:46,000
一档也之前赞助过我们另外一档节目的那个那个平台叫 square space 嘛

1306
00:49:47,000 --> 00:49:49,000
他就把这个东西做成了一个这个软件做一个服务嘛

1307
00:49:49,000 --> 00:49:52,000
就是你不用管这个网站是怎么

1308
00:49:52,000 --> 00:49:54,000
怎么就不用管这个网站怎么

1309
00:49:54,000 --> 00:50:00,000
这个软件软件怎么安装的是你都不管怎么运行的你只要交钱每个月出这个几十几十块钱

1310
00:50:01,000 --> 00:50:03,000
他就给你一个账号你登那个账号就可以

1311
00:50:03,000 --> 00:50:06,000
用一个很傻瓜的话的方式去选择一个模板

1312
00:50:06,000 --> 00:50:10,000
填充你内容就可以了你这甚至都不是说需要在他那跑了什么软件

1313
00:50:10,000 --> 00:50:11,000
对吧

1314
00:50:11,000 --> 00:50:14,000
就是说在不同的层级上有不同的解决方案如果说

1315
00:50:14,000 --> 00:50:16,000
你的这个能力

1316
00:50:16,000 --> 00:50:21,000
或者说你对这个知识储备不足以在 S 这个最底层的平台上去做的话你可以往上走啊

1317
00:50:22,000 --> 00:50:23,000
对吧但是说

1318
00:50:23,000 --> 00:50:24,000
国内有没有这种

1319
00:50:25,000 --> 00:50:28,000
很好的这种 PaaS 甚至是 SaaS 的这种平台

1320
00:50:28,000 --> 00:50:31,000
这个是要待考的但是

1321
00:50:31,000 --> 00:50:37,000
呃起码在国外我们就从这个逻辑来讲有很多这种很成熟的选项是可以用的就是说国内

1322
00:50:37,000 --> 00:50:38,000
现在还没有

1323
00:50:38,000 --> 00:50:39,000
普及到那一步吧

1324
00:50:40,000 --> 00:50:40,000
因为

1325
00:50:41,000 --> 00:50:43,000
Ice 是一个相对来说比较成熟的一个

1326
00:50:43,000 --> 00:50:44,000
一个

1327
00:50:44,000 --> 00:50:46,000
在技术上大家是能够理解的

1328
00:50:46,000 --> 00:50:48,000
PaaS 和 SaaS 的话

1329
00:50:48,000 --> 00:50:49,000
都有

1330
00:50:49,000 --> 00:50:52,000
不可避免的一定程度的叫做 Winder Locking

1331
00:50:52,000 --> 00:50:54,000
就是叫供应商锁定

1332
00:50:54,000 --> 00:50:55,000
你那你用了这个之后

1333
00:50:55,000 --> 00:50:57,000
你就没法再迁移到别的地方了因为

1334
00:50:58,000 --> 00:50:59,000
因为他这个 software

1335
00:50:59,000 --> 00:51:01,000
就他这个软件的 service 的话

1336
00:51:01,000 --> 00:51:02,000
别家跟他不一样啊

1337
00:51:02,000 --> 00:51:04,000
你要换一家的时候你怎么办对吧

1338
00:51:04,000 --> 00:51:05,000
所以

1339
00:51:05,000 --> 00:51:08,000
你享受你所拥有的自由就越少

1340
00:51:09,000 --> 00:51:10,000
就你要做的事情

1341
00:51:10,000 --> 00:51:13,000
你要做的事情越少越简单当然是肯定从

1342
00:51:14,000 --> 00:51:15,000
易用性角度上是更好的但是

1343
00:51:16,000 --> 00:51:18,000
你同时你的灵活性就也就越差了你能够

1344
00:51:19,000 --> 00:51:22,000
迁移到别的地方的这种成本就越高

1345
00:51:22,000 --> 00:51:25,000
所以这个东西他是在不同的维度上有各有取舍的

1346
00:51:25,000 --> 00:51:26,000
所以你自己要想清楚

1347
00:51:26,000 --> 00:51:28,000
你是愿意花时间

1348
00:51:28,000 --> 00:51:30,000
花成本去学这个呢

1349
00:51:30,000 --> 00:51:31,000
还是说愿意

1350
00:51:31,000 --> 00:51:36,000
反正我要求也不高嘛对吧我就跑一个很简单的用一个 SaaS

1351
00:51:36,000 --> 00:51:37,000
或者 PaaS 就好了

1352
00:51:38,000 --> 00:51:39,000
所以

1353
00:51:40,000 --> 00:51:42,000
这件事情

1354
00:51:42,000 --> 00:51:43,000
就没有那么简单

1355
00:51:43,000 --> 00:51:48,000
包括后面他说那个微信大型的原因其实很简单如果你把微信视作一个软件的话

1356
00:51:48,000 --> 00:51:48,000
他就是一个 SaaS

1357
00:51:49,000 --> 00:51:50,000
公众账号

1358
00:51:51,000 --> 00:51:52,000
公众号不就是这么一个 SaaS 吗

1359
00:51:52,000 --> 00:51:52,000
过去

1360
00:51:53,000 --> 00:51:55,000
要开发一整套的这个技术跑在这些虚拟机上

1361
00:51:56,000 --> 00:51:59,000
你能完成现在公众号点击下能实现的东西但是

1362
00:52:00,000 --> 00:52:00,000
你也知道了

1363
00:52:00,000 --> 00:52:02,000
离开公众号离开微信你还有什么呢

1364
00:52:03,000 --> 00:52:06,000
对其实这位听众说

1365
00:52:06,000 --> 00:52:10,000
在一个没有任何变成技术的人想在 web 上做一个类似公众号的

1366
00:52:10,000 --> 00:52:16,000
东西其实几乎是不可能的我觉得其实是可能的你无非是申请一个比如说免费 blog 空间嘛不就是

1367
00:52:17,000 --> 00:52:17,000
但是

1368
00:52:17,000 --> 00:52:19,000
但是他就要自己去搭呀

1369
00:52:20,000 --> 00:52:22,000
对不免费 blog 空间不需要自己拿

1370
00:52:25,000 --> 00:52:27,000
就你去什么牛博网申请一个 blog 账号

1371
00:52:27,000 --> 00:52:28,000
有还是有的

1372
00:52:28,000 --> 00:52:29,000
什么博客

1373
00:52:29,000 --> 00:52:30,000
我就说现在

1374
00:52:30,000 --> 00:52:31,000
现在在国

1375
00:52:31,000 --> 00:52:32,000
监管很严的

1376
00:52:33,000 --> 00:52:34,000
我的点是说为什么

1377
00:52:35,000 --> 00:52:39,000
公众号早期的时候只有一个发布图文的功能仍然信了大量用户呢

1378
00:52:39,000 --> 00:52:40,000
是因为

1379
00:52:40,000 --> 00:52:42,000
本来就有大量用户啊

1380
00:52:42,000 --> 00:52:46,000
就微信是一个封闭的有大量用户的平台所以

1381
00:52:46,000 --> 00:52:48,000
你开公众号自然会有很多人来看

1382
00:52:49,000 --> 00:52:49,000
这是

1383
00:52:50,000 --> 00:52:53,000
这是这个平台独占性决定的而不是因为就是或者说他的

1384
00:52:54,000 --> 00:52:55,000
易用性只是一个次要的

1385
00:52:56,000 --> 00:52:57,000
因素

1386
00:52:57,000 --> 00:52:59,000
就我相信基本他把

1387
00:53:00,000 --> 00:53:04,000
就腾讯把微信号微信公众号的开设的

1388
00:53:04,000 --> 00:53:05,000
门槛

1389
00:53:05,000 --> 00:53:07,000
调得非常高还是会有很多人

1390
00:53:08,000 --> 00:53:09,000
打破头去做一个

1391
00:53:10,000 --> 00:53:12,000
公众号因为可以吸引大量用户

1392
00:53:14,000 --> 00:53:16,000
不过这里还是要说差一句嘴啊跟基础无关的

1393
00:53:17,000 --> 00:53:23,000
微信这个没错他确实把这个东西做得很简单然后确实能有大量的用户但是你要想清楚

1394
00:53:24,000 --> 00:53:27,000
这个用户可不是你的用户他可是微信的用户

1395
00:53:27,000 --> 00:53:29,000
so

1396
00:53:30,000 --> 00:53:31,000
叫什么那句话怎么说来着

1397
00:53:31,000 --> 00:53:33,000
就是 choose your own

1398
00:53:33,000 --> 00:53:34,000
drug

1399
00:53:34,000 --> 00:53:35,000
choose your own drug

1400
00:53:36,000 --> 00:53:38,000
选择自己的药物

1401
00:53:38,000 --> 00:53:40,000
choose your own poison

1402
00:53:40,000 --> 00:53:41,000
choose your own kuei

1403
00:53:42,000 --> 00:53:43,000
对

1404
00:53:44,000 --> 00:53:50,000
每一个选择都是有后果的你觉得你只要思前想后到底你能够接受什么

1405
00:53:50,000 --> 00:53:51,000
你能够投入什么

1406
00:53:51,000 --> 00:53:54,000
世界上的事情并不都是那么美好的

1407
00:53:54,000 --> 00:53:55,000
对

1408
00:53:55,000 --> 00:54:00,000
反正我觉得这篇这封读者来信之所以会引起我们非常热烈讨论也是因为这位

1409
00:54:00,000 --> 00:54:01,000
听众非常的

1410
00:54:02,000 --> 00:54:03,000
诚实

1411
00:54:04,000 --> 00:54:06,000
他没有去演示自己的

1412
00:54:07,000 --> 00:54:09,000
焦虑或者是

1413
00:54:10,000 --> 00:54:12,000
困惑我觉得这点很好

1414
00:54:13,000 --> 00:54:19,000
比如我觉得这让我感受深刻的这句话让人困惑和气愤的事情为

1415
00:54:19,000 --> 00:54:24,000
让人困惑和气愤的是为什么我所有步骤都做对了还是出个人问题

1416
00:54:26,000 --> 00:54:30,000
这就好像就好像小学的时候在

1417
00:54:30,000 --> 00:54:31,000
怪我了

1418
00:54:33,000 --> 00:54:35,000
怪我了

1419
00:54:35,000 --> 00:54:36,000
就好像小学的时候

1420
00:54:37,000 --> 00:54:39,000
听着老师讲的什么

1421
00:54:39,000 --> 00:54:42,000
东西或者说在学英语解题步骤是吧

1422
00:54:43,000 --> 00:54:44,000
一步一步来最后还是做不对为什么

1423
00:54:45,000 --> 00:54:48,000
这是为什么这个事业为什么这样对我不公平对吧

1424
00:54:49,000 --> 00:54:49,000
对

1425
00:54:51,000 --> 00:54:55,000
就其实就只说明一件事就是说你还没有真正的

1426
00:54:56,000 --> 00:54:57,000
理解这件事

1427
00:54:58,000 --> 00:54:59,000
然后

1428
00:54:59,000 --> 00:55:04,000
所以我觉得我可以推荐这位听众去系统的

1429
00:55:04,000 --> 00:55:09,000
看一下 Linux 相关的入门教材比如说国内很

1430
00:55:09,000 --> 00:55:11,000
我觉得他不一定有时间

1431
00:55:11,000 --> 00:55:13,000
现在去看他的那个工作

1432
00:55:13,000 --> 00:55:14,000
需求情况就说

1433
00:55:14,000 --> 00:55:16,000
其实不一定我刚刚我说了嘛

1434
00:55:16,000 --> 00:55:16,000
就是

1435
00:55:17,000 --> 00:55:19,000
系统的学习一下 Linux 的基础知识

1436
00:55:19,000 --> 00:55:20,000
只是一种选择

1437
00:55:20,000 --> 00:55:22,000
你可以选择别的方案

1438
00:55:22,000 --> 00:55:26,000
但只是说你考虑好你选择的后果是什么你要付出什么样的成本

1439
00:55:26,000 --> 00:55:27,000
以及你的代价是什么

1440
00:55:28,000 --> 00:55:30,000
真正的自由

1441
00:55:30,000 --> 00:55:32,000
肯定是要花成本的这个成本可能不止

1442
00:55:33,000 --> 00:55:35,000
体现在金钱上可能更多是体现在你的时间

1443
00:55:36,000 --> 00:55:37,000
你的精力的投入上面去

1444
00:55:37,000 --> 00:55:39,000
那你可以选择那些简单易用的方式

1445
00:55:39,000 --> 00:55:39,000
那你可以选择那些简单易用的方式

1446
00:55:39,000 --> 00:55:40,000
就好像为什么

1447
00:55:40,000 --> 00:55:41,000
你看那些

1448
00:55:42,000 --> 00:55:43,000
美观的纯熟的

1449
00:55:44,000 --> 00:55:46,000
图形界面总是要付费的对吧

1450
00:55:46,000 --> 00:55:49,000
而且我还想说一点就是

1451
00:55:49,000 --> 00:55:54,000
我觉得生活里面其实并不仅仅是运维或者是编程的

1452
00:55:54,000 --> 00:55:56,000
这个领域有这样让人

1453
00:55:56,000 --> 00:55:58,000
让这个刚入行的人来

1454
00:55:59,000 --> 00:56:02,000
或者是新手让人感觉到非常

1455
00:56:02,000 --> 00:56:05,000
困惑和痛苦的就是他为什么要这样对吧

1456
00:56:05,000 --> 00:56:06,000
那

1457
00:56:07,000 --> 00:56:09,000
答案就是历史人

1458
00:56:09,000 --> 00:56:14,000
历史严格就是有非常多的历史原因造成了他现在就是今天这个样子

1459
00:56:14,000 --> 00:56:15,000
比如说我记得

1460
00:56:16,000 --> 00:56:18,000
Linux 里面有一个函数叫 create

1461
00:56:19,000 --> 00:56:20,000
没有意义最后的没有意义

1462
00:56:21,000 --> 00:56:25,000
我第一次用那个函数的时候写了好多遍我说我靠为什么错了

1463
00:56:26,000 --> 00:56:31,000
最后一查手册这个函数名里面没有末尾的那个意义

1464
00:56:31,000 --> 00:56:33,000
create 没有意义

1465
00:56:33,000 --> 00:56:34,000
这件事情

1466
00:56:35,000 --> 00:56:36,000
就让我觉得

1467
00:56:36,000 --> 00:56:37,000
what the fuck

1468
00:56:37,000 --> 00:56:38,000
这世界

1469
00:56:38,000 --> 00:56:39,000
为什么

1470
00:56:39,000 --> 00:56:41,000
这些是 Linux 世界会是这样一个

1471
00:56:41,000 --> 00:56:42,000
破坏的状况

1472
00:56:43,000 --> 00:56:45,000
其实只是当年写那个函数的人

1473
00:56:46,000 --> 00:56:50,000
少打了一时手花没有打到那个意义

1474
00:56:50,000 --> 00:56:52,000
那个 unix hate

1475
00:56:52,000 --> 00:56:57,000
handbook 里面提到这件事说是因为当时的那个中间记忆特别慢

1476
00:56:58,000 --> 00:57:00,000
所以所有的命令都能短则短

1477
00:57:01,000 --> 00:57:02,000
那

1478
00:57:02,000 --> 00:57:06,000
应该不是这个原因吧如果这样的话我 close 为什么有意义

1479
00:57:07,000 --> 00:57:08,000
对啊

1480
00:57:09,000 --> 00:57:10,000
他那个人说了吗

1481
00:57:11,000 --> 00:57:12,000
打错了

1482
00:57:13,000 --> 00:57:14,000
他打错了

1483
00:57:15,000 --> 00:57:17,000
还有一个事你知道那个

1484
00:57:17,000 --> 00:57:18,000
在那个

1485
00:57:18,000 --> 00:57:21,000
HTTP 协议里面不是一个 referral 这个头吗

1486
00:57:23,000 --> 00:57:24,000
那个 referral 的拼写是错的

1487
00:57:25,000 --> 00:57:25,000
what

1488
00:57:26,000 --> 00:57:27,000
那个拼写是错的

1489
00:57:28,000 --> 00:57:30,000
那个 referral 应该只有一个

1490
00:57:30,000 --> 00:57:32,000
refer

1491
00:57:32,000 --> 00:57:34,000
er 吗应该只有一个 r

1492
00:57:35,000 --> 00:57:36,000
他写了两个

1493
00:57:36,000 --> 00:57:38,000
refer

1494
00:57:39,000 --> 00:57:40,000
referral

1495
00:57:42,000 --> 00:57:44,000
我想想

1496
00:57:44,000 --> 00:57:45,000
哪个是正确

1497
00:57:45,000 --> 00:57:46,000
我现在有点

1498
00:57:46,000 --> 00:57:47,000
回忆为之

1499
00:57:47,000 --> 00:57:49,000
英国拼法和美国拼法

1500
00:57:49,000 --> 00:57:53,000
没有那是一个那是一个那是一个对他多了一个 r 就是

1501
00:57:54,000 --> 00:57:57,000
正确的新法是 referral 对吧

1502
00:57:57,000 --> 00:57:59,000
但是他在就是 HTTP 协议制定的时候

1503
00:58:00,000 --> 00:58:02,000
错写成了 referral

1504
00:58:02,000 --> 00:58:03,000
Oh my fucking god

1505
00:58:04,000 --> 00:58:07,000
然后这个错误一直被保留到现在

1506
00:58:07,000 --> 00:58:08,000
你知道这让我想起什么吗那个

1507
00:58:09,000 --> 00:58:10,000
TMAX 的作者是个英国人吗

1508
00:58:10,000 --> 00:58:11,000
大概还是

1509
00:58:12,000 --> 00:58:14,000
anyway 反正你在 TMAX 的

1510
00:58:14,000 --> 00:58:16,000
配置文件里面写

1511
00:58:17,000 --> 00:58:20,000
颜色的时候一定要打 COL OUR

1512
00:58:20,000 --> 00:58:21,000
you know

1513
00:58:21,000 --> 00:58:23,000
一式拼法啊

1514
00:58:27,000 --> 00:58:29,000
对世界上很多事情都是这样的就是他有

1515
00:58:29,000 --> 00:58:31,000
他有他的历史严格他

1516
00:58:31,000 --> 00:58:37,000
成为今天这个让人困惑的让人质疑他为什么不能再简单一点的现状都是有他的原因

1517
00:58:37,000 --> 00:58:39,000
就为什么他这么不一致的

1518
00:58:39,000 --> 00:58:43,000
说到不一致哈下面的我们就开始了

1519
00:58:44,000 --> 00:58:49,000
上期我们讲到那个 windows 上那个叫 putty 的这么一个

1520
00:58:49,000 --> 00:58:51,000
Terminal emulator 的工具

1521
00:58:51,000 --> 00:58:53,000
然后我们把它念成

1522
00:58:53,000 --> 00:58:54,000
你也念 putty 吗

1523
00:58:55,000 --> 00:58:55,000
我想问的是

1524
00:58:56,000 --> 00:58:57,000
对我念的是 putty

1525
00:58:58,000 --> 00:58:58,000
对

1526
00:58:59,000 --> 00:59:00,000
put 嘛

1527
00:59:00,000 --> 00:59:02,000
put 加 ty 就是 putty 对吧

1528
00:59:03,000 --> 00:59:06,000
对啊多自然对吧

1529
00:59:06,000 --> 00:59:07,000
我在德国

1530
00:59:08,000 --> 00:59:08,000
德国

1531
00:59:08,000 --> 00:59:09,000
反正

1532
00:59:09,000 --> 00:59:11,000
不加 ty 的话只有一种念法

1533
00:59:11,000 --> 00:59:12,000
不可能念阿

1534
00:59:13,000 --> 00:59:14,000
对而且

1535
00:59:15,000 --> 00:59:20,000
说来我们就来这个其实后来有那个也是那个什么

1536
00:59:20,000 --> 00:59:23,000
听众反馈如雪盘盘飞来告诉我们说其实他念

1537
00:59:23,000 --> 00:59:24,000
我们念错了

1538
00:59:25,000 --> 00:59:25,000
他应该念

1539
00:59:26,000 --> 00:59:27,000
party

1540
00:59:28,000 --> 00:59:32,000
因为在那个美式英语里面至少那个

1541
00:59:32,000 --> 00:59:33,000
PU

1542
00:59:33,000 --> 00:59:38,000
他有他有念不是不是念不是 gut 吧那个肠子吧

1543
00:59:38,000 --> 00:59:38,000
不是念

1544
00:59:39,000 --> 00:59:39,000
是念 gut

1545
00:59:40,000 --> 00:59:41,000
所以

1546
00:59:41,000 --> 00:59:43,000
不是 putty 是

1547
00:59:43,000 --> 00:59:44,000
party

1548
00:59:44,000 --> 00:59:45,000
但虽然

1549
00:59:45,000 --> 00:59:46,000
虽然你不知道为什么

1550
00:59:46,000 --> 00:59:47,000
不是 part

1551
00:59:47,000 --> 00:59:48,000
对虽然 put

1552
00:59:48,000 --> 00:59:50,000
念 put 不是 part

1553
00:59:51,000 --> 00:59:52,000
不要问我为什么这就是

1554
00:59:52,000 --> 00:59:53,000
这个

1555
00:59:54,000 --> 00:59:54,000
高度

1556
00:59:54,000 --> 00:59:57,000
完全没有任何一致性可以可言的英文

1557
00:59:58,000 --> 00:59:59,000
要怪就怪法国人吧

1558
01:00:01,000 --> 01:00:03,000
但是为了一致性的我们还是准备念成

1559
01:00:03,000 --> 01:00:04,000
putty

1560
01:00:04,000 --> 01:00:05,000
what

1561
01:00:05,000 --> 01:00:06,000
以及

1562
01:00:06,000 --> 01:00:07,000
mikko

1563
01:00:07,000 --> 01:00:08,000
mikko

1564
01:00:09,000 --> 01:00:10,000
hdme

1565
01:00:12,000 --> 01:00:13,000
对还有哈滨

1566
01:00:13,000 --> 01:00:14,000
米街口

1567
01:00:14,000 --> 01:00:17,000
德国还是德语比较严谨我觉得

1568
01:00:17,000 --> 01:00:18,000
因为我们的

1569
01:00:19,000 --> 01:00:22,000
德德德德你们德国同事写那个

1570
01:00:22,000 --> 01:00:26,000
这些这个这个这个程序的时候会用德语命名还是英语命名

1571
01:00:28,000 --> 01:00:30,000
英语不好的就容易写德语

1572
01:00:30,000 --> 01:00:32,000
其实这个这一点在世界各地都一样

1573
01:00:32,000 --> 01:00:38,000
就日本人还会用那个罗马字的假名来命名变量你看他们的大

1574
01:00:38,000 --> 01:00:39,000
中文会用拼音是吧

1575
01:00:39,000 --> 01:00:40,000
你看他们的代码简直想死

1576
01:00:42,000 --> 01:00:48,000
就我们的代码很多里面也是一打开一大堆那个但我觉得德国人做这件事情我觉得很有那个就

1577
01:00:48,000 --> 01:00:51,000
起码拉丁字母的人做这件事情应该很自然而然吧

1578
01:00:52,000 --> 01:00:55,000
你说用德语来命名变量名

1579
01:00:55,000 --> 01:00:57,000
就看起来没有那么违和吧

1580
01:00:57,000 --> 01:01:03,000
对对对就不会很奇怪因为中文你用这个拼音命名就很奇怪因为有那个映射的问题

1581
01:01:03,000 --> 01:01:05,000
你看你要猜

1582
01:01:05,000 --> 01:01:07,000
因为有那个一字多音的问题吗

1583
01:01:07,000 --> 01:01:07,000
你要猜他到底是什么

1584
01:01:08,000 --> 01:01:08,000
什么玩意儿

1585
01:01:09,000 --> 01:01:10,000
那可能根据上下文的这个

1586
01:01:11,000 --> 01:01:12,000
语义你可以猜得出来

1587
01:01:12,000 --> 01:01:16,000
但德语完全没有这个问题啊而且你这个键盘又不存在输入法切换的问题

1588
01:01:16,000 --> 01:01:18,000
唯一需要注意的就是 coding

1589
01:01:19,000 --> 01:01:21,000
打开的时候很容易就出现了一个

1590
01:01:21,000 --> 01:01:23,000
零形中间一个问号

1591
01:01:24,000 --> 01:01:25,000
还好吧现在都是 unicode 了

1592
01:01:25,000 --> 01:01:26,000
没有还好

1593
01:01:26,000 --> 01:01:30,000
你们是 Windows 环境

1594
01:01:31,000 --> 01:01:32,000
那为什么有这个问题

1595
01:01:32,000 --> 01:01:34,000
有很多服务器还在跑旧版

1596
01:01:34,000 --> 01:01:35,000
long story

1597
01:01:35,000 --> 01:01:36,000
不要说这个

1598
01:01:36,000 --> 01:01:37,000
我觉得

1599
01:01:37,000 --> 01:01:38,000
我其实

1600
01:01:38,000 --> 01:01:40,000
泄露了公司商业机密

1601
01:01:41,000 --> 01:01:46,000
在上一个公司的原代码里面有很多地方我看到他判断那个

1602
01:01:49,000 --> 01:01:51,000
判断一个条件是否为真的时候他总是写

1603
01:01:52,000 --> 01:01:52,000
不等于 n

1604
01:01:53,000 --> 01:01:53,000
然后

1605
01:01:54,000 --> 01:01:56,000
我在改一段代码的时候我就写了一个

1606
01:01:56,000 --> 01:01:59,000
不去判断他是不是等于 n 而是判断他是不是

1607
01:02:01,000 --> 01:02:05,000
不去判断他是不是不等于 n 而是去判断他是不是等于 y

1608
01:02:05,000 --> 01:02:07,000
然后那个

1609
01:02:07,000 --> 01:02:09,000
之前维护这个代码的人就跟我说

1610
01:02:09,000 --> 01:02:09,000
千万不要这样写

1611
01:02:10,000 --> 01:02:12,000
因为在这个代码库里面有很多地方

1612
01:02:14,000 --> 01:02:15,000
和 n 相对的

1613
01:02:16,000 --> 01:02:17,000
是 j

1614
01:02:17,000 --> 01:02:19,000
而不是 y

1615
01:02:19,000 --> 01:02:21,000
是德语的呀

1616
01:02:22,000 --> 01:02:22,000
就

1617
01:02:22,000 --> 01:02:24,000
但是有些人是用 y 的

1618
01:02:24,000 --> 01:02:26,000
这里科普一下就是英文的 yes

1619
01:02:26,000 --> 01:02:27,000
是对德语的呀

1620
01:02:27,000 --> 01:02:28,000
j a

1621
01:02:28,000 --> 01:02:29,000
然后

1622
01:02:29,000 --> 01:02:31,000
我就说我靠

1623
01:02:32,000 --> 01:02:34,000
我之前以为这个在

1624
01:02:36,000 --> 01:02:37,000
等一下

1625
01:02:37,000 --> 01:02:40,000
如果这样的为什么为什么 n 是也是你们应该用 k 呀

1626
01:02:41,000 --> 01:02:41,000
9

1627
01:02:41,000 --> 01:02:42,000
用 9

1628
01:02:43,000 --> 01:02:44,000
不是 kine 而是 9

1629
01:02:45,000 --> 01:02:48,000
这也是让我觉得非常崩溃的一件事情

1630
01:02:50,000 --> 01:02:50,000
所以

1631
01:02:50,000 --> 01:02:54,000
所以你们你见过有同时用德文写这个秘密吗

1632
01:02:55,000 --> 01:02:55,000
有啊很多

1633
01:02:56,000 --> 01:02:58,000
就什么 schleife 啊什么

1634
01:02:59,000 --> 01:02:59,000
对

1635
01:02:59,000 --> 01:03:02,000
所以这个会影响你对代码的理解吗

1636
01:03:03,000 --> 01:03:03,000
我

1637
01:03:04,000 --> 01:03:05,000
还是说你现在已经这个

1638
01:03:05,000 --> 01:03:07,000
乃至里面中德

1639
01:03:07,000 --> 01:03:11,000
应得已经不已经那个自成流畅了我觉得我还可以吧

1640
01:03:11,000 --> 01:03:13,000
就目前我没有因为有

1641
01:03:14,000 --> 01:03:19,000
就你不觉得违和吗对我不会觉得违和但是我看到大段的用德语写的注释的时候我还是会揍

1642
01:03:19,000 --> 01:03:20,000
我一头我觉得

1643
01:03:22,000 --> 01:03:22,000
哎

1644
01:03:23,000 --> 01:03:23,000
何必

1645
01:03:25,000 --> 01:03:26,000
德国英文也不是那么好

1646
01:03:26,000 --> 01:03:27,000
其实很多人英文

1647
01:03:27,000 --> 01:03:29,000
非常差当然还是要比法国人好

1648
01:03:30,000 --> 01:03:32,000
哈哈哈哈

1649
01:03:32,000 --> 01:03:34,000
法国艺师

1650
01:03:35,000 --> 01:03:35,000
好吧

1651
01:03:37,000 --> 01:03:42,000
这个问题在中国就更加严重了我觉得就是起码我看到很多

1652
01:03:43,000 --> 01:03:44,000
大部分吧应该是

1653
01:03:46,000 --> 01:03:48,000
英文不那么好的人写注释都是

1654
01:03:49,000 --> 01:03:50,000
写的中文

1655
01:03:51,000 --> 01:03:52,000
或者拼音

1656
01:03:53,000 --> 01:03:53,000
对

1657
01:03:53,000 --> 01:03:55,000
如果是英文的话一定是残不认读的

1658
01:03:57,000 --> 01:04:01,000
也有人有问这么一件事就是说你一个中国的公司

1659
01:04:02,000 --> 01:04:05,000
程序员绝大部分都是中国人在可以遇见的未来也不可能招

1660
01:04:06,000 --> 01:04:07,000
外国程序员

1661
01:04:07,000 --> 01:04:09,000
你纠结个英文写注释算个啥

1662
01:04:09,000 --> 01:04:10,000
对吧

1663
01:04:10,000 --> 01:04:12,000
然后我进无言以对

1664
01:04:12,000 --> 01:04:13,000
说的也

1665
01:04:14,000 --> 01:04:20,000
对吧就是你看德国人也就一亿人吗为什么很多程序员理直气壮的在注释里面写德语

1666
01:04:20,000 --> 01:04:23,000
我们却我们世界五分之一的人口

1667
01:04:24,000 --> 01:04:25,000
却必须在注释里面写英文的

1668
01:04:26,000 --> 01:04:26,000
好像的确

1669
01:04:27,000 --> 01:04:29,000
好点还是世界第一大语言吧

1670
01:04:29,000 --> 01:04:30,000
从人数上来讲

1671
01:04:30,000 --> 01:04:31,000
的确有点道理

1672
01:04:34,000 --> 01:04:35,000
而且你看现在很多语言

1673
01:04:36,000 --> 01:04:37,000
接下来要谈到斯文

1674
01:04:37,000 --> 01:04:38,000
就在

1675
01:04:38,000 --> 01:04:41,000
就是在在原生级别支持用的口

1676
01:04:42,000 --> 01:04:46,000
对吧你既然可以用一毛扎一毛这来来做变量命

1677
01:04:46,000 --> 01:04:50,000
用用一口来写一些比较扯的这个

1678
01:04:50,000 --> 01:04:54,000
操作服务那为什么不能用中文用你的母语来写入式

1679
01:04:57,000 --> 01:05:01,000
也是我觉得从效率来讲可能还是好一点点

1680
01:05:01,000 --> 01:05:06,000
可能我一样考虑就是真的是编码的问题就是至少你用中文你想用

1681
01:05:07,000 --> 01:05:07,000
你用

1682
01:05:08,000 --> 01:05:09,000
brainfuck

1683
01:05:09,000 --> 01:05:12,000
特别是在 windows 上面的话你特别要注意这个

1684
01:05:13,000 --> 01:05:15,000
你想用 brainfuck 来写一段程序的话

1685
01:05:15,000 --> 01:05:17,000
你要想输出中文是非常累的

1686
01:05:21,000 --> 01:05:22,000
好吧

1687
01:05:24,000 --> 01:05:28,000
OK 今天的那个听众环节以及相关的

1688
01:05:30,000 --> 01:05:32,000
吐槽就到此为止

1689
01:05:32,000 --> 01:05:34,000
我们下面进入新闻

1690
01:05:34,000 --> 01:05:36,000
新闻环节

1691
01:05:36,000 --> 01:05:36,000
对

1692
01:05:37,000 --> 01:05:38,000
第一条新闻是挺

1693
01:05:38,000 --> 01:05:39,000
挺不错的

1694
01:05:41,000 --> 01:05:45,000
这些是上一期还是前一期我们提到了这个

1695
01:05:46,000 --> 01:05:48,000
有两个维多利亚秘密的模特

1696
01:05:48,000 --> 01:05:50,000
其实是程序员来的

1697
01:05:50,000 --> 01:05:53,000
去做了程序员不是他们本身是程序员

1698
01:05:54,000 --> 01:05:56,000
你那个是去做程序员我那个本来就是程序员

1699
01:05:57,000 --> 01:05:58,000
我说的是 Carly Klaus 你说的是

1700
01:05:59,000 --> 01:06:01,000
我说的是另外那个三组一发的吧

1701
01:06:02,000 --> 01:06:03,000
就是一个黑人女孩

1702
01:06:04,000 --> 01:06:06,000
他那个是本来是 iOS 开发者

1703
01:06:06,000 --> 01:06:09,000
后来去被发现就做了文明模特但是没做多久啊

1704
01:06:10,000 --> 01:06:12,000
那你你这边后来我也找到了

1705
01:06:13,000 --> 01:06:15,000
然后他就成为了女神

1706
01:06:15,000 --> 01:06:17,000
这个是另外一回事

1707
01:06:17,000 --> 01:06:18,000
这位

1708
01:06:18,000 --> 01:06:21,000
这个最近在国内非常火

1709
01:06:22,000 --> 01:06:24,000
因为他帮那个

1710
01:06:25,000 --> 01:06:26,000
华为

1711
01:06:27,000 --> 01:06:28,000
代言了一个表

1712
01:06:28,000 --> 01:06:29,000
然后

1713
01:06:29,000 --> 01:06:30,000
各种

1714
01:06:30,000 --> 01:06:31,000
就是

1715
01:06:31,000 --> 01:06:35,000
枪文段子在那个公众号里面推嘛然后我也看到了

1716
01:06:35,000 --> 01:06:36,000
但我们提到

1717
01:06:36,000 --> 01:06:37,000
这个

1718
01:06:37,000 --> 01:06:39,000
有做广告前一次就这段你可以略过了

1719
01:06:40,000 --> 01:06:41,000
不用解释为什么

1720
01:06:41,000 --> 01:06:43,000
后来

1721
01:06:44,000 --> 01:06:46,000
这我们关注他是因为因为别的事

1722
01:06:46,000 --> 01:06:47,000
是因为

1723
01:06:47,000 --> 01:06:48,000
他

1724
01:06:48,000 --> 01:06:50,000
跑去 space x

1725
01:06:50,000 --> 01:06:52,000
做秀去了

1726
01:06:53,000 --> 01:06:56,000
然后再一个什么

1727
01:06:56,000 --> 01:07:00,000
在我就是花街日报的封面有一个很帅很帅的

1728
01:07:01,000 --> 01:07:05,000
标题背后是 space x 的火箭声控前面是这边 kk

1729
01:07:05,000 --> 01:07:06,000
女神

1730
01:07:06,000 --> 01:07:09,000
穿着这个不是凯文卡利亚叫卡利克罗斯

1731
01:07:09,000 --> 01:07:10,000
德国人吗这个是

1732
01:07:11,000 --> 01:07:14,000
应该不是吧看信好像有点像

1733
01:07:14,000 --> 01:07:15,000
因为

1734
01:07:15,000 --> 01:07:18,000
然后拿着一个很帅的这个宇航员

1735
01:07:19,000 --> 01:07:19,000
他们拼

1736
01:07:19,000 --> 01:07:24,000
喷灰的美国国际他拿了其实是一个摩托头摩托车头盔我必须吐槽的是

1737
01:07:27,000 --> 01:07:29,000
他拿这个其实叫 jet

1738
01:07:30,000 --> 01:07:32,000
Jet 是人工车头盔

1739
01:07:32,000 --> 01:07:35,000
然后他穿的衣服也只是一个印尼星雕旗的

1740
01:07:36,000 --> 01:07:36,000
皮夹克

1741
01:07:36,000 --> 01:07:38,000
对

1742
01:07:38,000 --> 01:07:43,000
但其实我觉得为什么这些声音要单独拿出来讲就是我提着他体现的一种

1743
01:07:44,000 --> 01:07:45,000
呃

1744
01:07:45,000 --> 01:07:48,000
呃或者说就是美国现在科技圈比较

1745
01:07:49,000 --> 01:07:51,000
讲究的事儿就是这个性别平等吧

1746
01:07:52,000 --> 01:07:54,000
就是为什么我们之前讲

1747
01:07:54,000 --> 01:07:59,000
发火箭搞计算机写代码这些事情一定都是男人的事情的对吧

1748
01:07:59,000 --> 01:08:02,000
那我们也看一下这不是也有这个女人的事情而且有一个

1749
01:08:02,000 --> 01:08:03,000
怎么

1750
01:08:04,000 --> 01:08:05,000
漂亮然后身材

1751
01:08:05,000 --> 01:08:06,000
好漂亮的条件

1752
01:08:06,000 --> 01:08:07,000
对

1753
01:08:07,000 --> 01:08:08,000
对

1754
01:08:08,000 --> 01:08:09,000
什么东西

1755
01:08:09,000 --> 01:08:09,000
就是

1756
01:08:10,000 --> 01:08:12,000
就是已经黑化是说一个女孩身材好

1757
01:08:13,000 --> 01:08:15,000
就是条条是指身材

1758
01:08:15,000 --> 01:08:17,000
调直就是身材非常好

1759
01:08:17,000 --> 01:08:19,000
盘是指脸

1760
01:08:19,000 --> 01:08:21,000
盘量就是

1761
01:08:21,000 --> 01:08:23,000
盘量调直的妞

1762
01:08:24,000 --> 01:08:27,000
这是从早期我相信是从什么清末的黑化转移来

1763
01:08:28,000 --> 01:08:28,000
现在是

1764
01:08:29,000 --> 01:08:29,000
北京日常语

1765
01:08:31,000 --> 01:08:31,000
对

1766
01:08:31,000 --> 01:08:33,000
他就是一个典范吗

1767
01:08:34,000 --> 01:08:36,000
然后我觉得这是一个好的现象就是说

1768
01:08:36,000 --> 01:08:40,000
过去我们通常觉得这种比如说这种你想到一个什么

1769
01:08:40,000 --> 01:08:41,000
内衣模特

1770
01:08:42,000 --> 01:08:46,000
你脑子中浮现出来一定是一件事有一些很多在偏见的成分特别是我知道在

1771
01:08:47,000 --> 01:08:48,000
中国大部分

1772
01:08:48,000 --> 01:08:49,000
这个

1773
01:08:49,000 --> 01:08:51,000
屌丝男性的心目里面

1774
01:08:51,000 --> 01:08:53,000
会有一些这种固定的看法但其实

1775
01:08:54,000 --> 01:08:55,000
KK

1776
01:08:55,000 --> 01:08:57,000
他为什么我们

1777
01:08:58,000 --> 01:09:04,000
觉得这是一个很好的事就是他他代表了另外一种就是叫做又有头脑又有智慧又有身材又有脸蛋

1778
01:09:04,000 --> 01:09:06,000
还超级努力人家然后老朋友

1779
01:09:06,000 --> 01:09:09,000
你男朋友还特别有钱做什么

1780
01:09:10,000 --> 01:09:11,000
做什么

1781
01:09:11,000 --> 01:09:13,000
财团的一个二代吧

1782
01:09:13,000 --> 01:09:15,000
这种就叫做

1783
01:09:15,000 --> 01:09:17,000
我们估计叫做人生赢家

1784
01:09:17,000 --> 01:09:21,000
人生赢家不太对人生赢家有很多形式了

1785
01:09:23,000 --> 01:09:26,000
就又有头脑又很漂亮

1786
01:09:27,000 --> 01:09:29,000
我说我盘量调直脑子好使

1787
01:09:30,000 --> 01:09:31,000
行了吧

1788
01:09:32,000 --> 01:09:35,000
好吧对

1789
01:09:35,000 --> 01:09:36,000
就我觉得这个这个是

1790
01:09:36,000 --> 01:09:37,000
是非常好的一件事

1791
01:09:37,000 --> 01:09:38,000
他他会

1792
01:09:39,000 --> 01:09:43,000
在社会中树立其另外一种形象让这种形象会改变我们过去

1793
01:09:43,000 --> 01:09:48,000
对这种比如说内衣模特也好一种比较主就先人为主的成见吧

1794
01:09:49,000 --> 01:09:52,000
我相信这一点也许可以在

1795
01:09:53,000 --> 01:09:59,000
可以让我们的自尊后代在二三十年之后不会再面临我现在这样公司里面

1796
01:09:59,000 --> 01:10:01,000
可能七八十个人只有三个女生

1797
01:10:01,000 --> 01:10:02,000
的窘境

1798
01:10:04,000 --> 01:10:04,000
对

1799
01:10:05,000 --> 01:10:06,000
啊

1800
01:10:06,000 --> 01:10:08,000
对就是这样的

1801
01:10:08,000 --> 01:10:09,000
所以

1802
01:10:09,000 --> 01:10:12,000
在这种女生再多来一些越多越好

1803
01:10:13,000 --> 01:10:19,000
嗯接下来是下一则新闻就是比较重量级的了其实我们有点

1804
01:10:20,000 --> 01:10:21,000
错过了因为这是上周的新闻

1805
01:10:22,000 --> 01:10:27,000
现在已经有点稍微有点退热了但至少看到的时候我们还是比较

1806
01:10:27,000 --> 01:10:28,000
这时候我很兴奋

1807
01:10:29,000 --> 01:10:30,000
不知道你

1808
01:10:30,000 --> 01:10:36,000
因为苹果在 WBC 的时候说了吧那个 SWIFT 语言年底之后

1809
01:10:36,000 --> 01:10:37,000
之前要开源

1810
01:10:38,000 --> 01:10:39,000
他们赶在 12 月

1811
01:10:40,000 --> 01:10:40,000
初的时候

1812
01:10:41,000 --> 01:10:41,000
12 月上旬吧

1813
01:10:42,000 --> 01:10:43,000
终于把这个事情

1814
01:10:43,000 --> 01:10:44,000
对

1815
01:10:44,000 --> 01:10:46,000
所以你怎么看

1816
01:10:46,000 --> 01:10:48,000
当然很高兴了

1817
01:10:48,000 --> 01:10:49,000
就

1818
01:10:49,000 --> 01:10:49,000
呃

1819
01:10:50,000 --> 01:10:52,000
我终于可以在

1820
01:10:53,000 --> 01:10:57,000
家里面和公司里都用这种语言了

1821
01:10:57,000 --> 01:10:59,000
但怎么说呢反正要走的路还很远了

1822
01:11:00,000 --> 01:11:01,000
但这是一个很好的开始

1823
01:11:02,000 --> 01:11:04,000
为什么感觉好像某种

1824
01:11:04,000 --> 01:11:06,000
巨大重大事情的

1825
01:11:06,000 --> 01:11:11,000
发布宣言他他这次开源的细节还是要讨论一下

1826
01:11:11,000 --> 01:11:15,000
他这次当然除了我们之前过去理解了他会把这个

1827
01:11:16,000 --> 01:11:19,000
语言啊 compiler 这些相关的工具链开放出

1828
01:11:19,000 --> 01:11:21,000
开放出来之外

1829
01:11:21,000 --> 01:11:26,000
一个更加重要的是他可能是把那个叫做 Foundation 就是他的标准库

1830
01:11:27,000 --> 01:11:27,000
也

1831
01:11:28,000 --> 01:11:32,000
就至少他没有说要没有到现在没完成了没有没有全部完成了

1832
01:11:32,000 --> 01:11:36,000
但照他说会以后会用 SWIFT 逐渐写过来就是说因为以前的

1833
01:11:37,000 --> 01:11:37,000
那

1834
01:11:37,000 --> 01:11:39,000
真你你如果你做 iOS 开发

1835
01:11:40,000 --> 01:11:42,000
你现在要那个所以写一个

1836
01:11:42,000 --> 01:11:43,000
iOS 应用的话

1837
01:11:44,000 --> 01:11:46,000
你还是要有很多这种 object C 的那些 Foundation 的

1838
01:11:47,000 --> 01:11:50,000
那个那个库吗对吧你要调那个东西然后那个是闭源的

1839
01:11:50,000 --> 01:11:52,000
就私有的一个东西

1840
01:11:52,000 --> 01:11:53,000
但如果你把

1841
01:11:53,000 --> 01:11:56,000
没有这个标准库的话你光有一个语言其实

1842
01:11:56,000 --> 01:12:00,000
并没有什么用对简单来说这一次开源最大的一个

1843
01:12:00,000 --> 01:12:02,000
趋势就是

1844
01:12:02,000 --> 01:12:06,000
SWIFT 的这个语言和这和 COCO 乃至于

1845
01:12:06,000 --> 01:12:08,000
跟 OS X 的

1846
01:12:08,000 --> 01:12:12,000
这种非常紧密的偶合关系将会松弄

1847
01:12:13,000 --> 01:12:18,000
就导致 SWIFT 会获得更大的自由度可能将来会有一个比较标准的

1848
01:12:19,000 --> 01:12:21,000
比如说可能会有个标准的 IO 库对吧

1849
01:12:21,000 --> 01:12:22,000
不像现在就是

1850
01:12:22,000 --> 01:12:25,000
现在这个时间点

1851
01:12:25,000 --> 01:12:27,000
你想在 SWIFT

1852
01:12:27,000 --> 01:12:31,000
你想用 SWIFT 在 Linux 上开发一些程序的话你必须

1853
01:12:32,000 --> 01:12:33,000
做大量的

1854
01:12:34,000 --> 01:12:34,000
这个

1855
01:12:35,000 --> 01:12:35,000
操作性判断

1856
01:12:35,000 --> 01:12:36,000
如果是

1857
01:12:36,000 --> 01:12:38,000
OS X 的话你要调用一套

1858
01:12:39,000 --> 01:12:42,000
IO 函数而如果是 Linux 的话你会需要去调用另外一套函数

1859
01:12:43,000 --> 01:12:45,000
但是在将来很有可能这个就

1860
01:12:45,000 --> 01:12:48,000
就不再会是一个问题了因为可能那个

1861
01:12:48,000 --> 01:12:52,000
Corelib 的那帮人会做出一个跨平台的

1862
01:12:52,000 --> 01:12:52,000
我也不知道

1863
01:12:53,000 --> 01:12:53,000
Posix

1864
01:12:53,000 --> 01:12:54,000
Posix

1865
01:12:54,000 --> 01:12:57,000
标准库出来

1866
01:12:59,000 --> 01:13:04,000
这次发布的那个他们也有一些像工具链的话他们发布了两个

1867
01:13:04,000 --> 01:13:06,000
主要就是两个系统吧一个是针对 OS X

1868
01:13:06,000 --> 01:13:08,000
就是他肯定是自家平台了

1869
01:13:08,000 --> 01:13:09,000
你要支持的

1870
01:13:09,000 --> 01:13:11,000
他发布了一个针对 ubuntu

1871
01:13:12,000 --> 01:13:12,000
有两个发行版吧

1872
01:13:12,000 --> 01:13:16,000
14.04 那个 LTS 版本和最新的 15.

1873
01:13:17,000 --> 01:13:17,000
15.10

1874
01:13:17,000 --> 01:13:18,000
15.4

1875
01:13:18,000 --> 01:13:20,000
15.4

1876
01:13:20,000 --> 01:13:21,000
OK

1877
01:13:21,000 --> 01:13:25,000
的这个就是像编译器那些包就可以直接用的

1878
01:13:25,000 --> 01:13:28,000
这就是预先编译好的嘛

1879
01:13:28,000 --> 01:13:30,000
反正 Windows 暂时还是没戏的

1880
01:13:33,000 --> 01:13:34,000
应该不会支持

1881
01:13:34,000 --> 01:13:35,000
敌方平台吧我觉得

1882
01:13:36,000 --> 01:13:43,000
但这次也局限比较多因为他只发布了一个架构就是支持这个 x 64 架构的处理

1883
01:13:44,000 --> 01:13:45,000
这个指令机

1884
01:13:46,000 --> 01:13:47,000
不是说你想跑一个

1885
01:13:47,000 --> 01:13:50,000
开源的你想跑 ARM 上面

1886
01:13:51,000 --> 01:13:52,000
就好像没什么戏了

1887
01:13:52,000 --> 01:13:56,000
跑到 ARM 上面有我在邮件里面

1888
01:13:56,000 --> 01:14:00,000
我在邮件列表里面看到一个人修在做然后他目前

1889
01:14:00,000 --> 01:14:02,000
撞到了墙

1890
01:14:02,000 --> 01:14:03,000
但至少那个

1891
01:14:03,000 --> 01:14:05,000
肯定没有破坏方式

1892
01:14:06,000 --> 01:14:06,000
对对

1893
01:14:06,000 --> 01:14:08,000
所以所以这件事情还是挺

1894
01:14:08,000 --> 01:14:08,000
沮丧的

1895
01:14:09,000 --> 01:14:10,000
当然了

1896
01:14:10,000 --> 01:14:12,000
我觉得是早晚的事情

1897
01:14:13,000 --> 01:14:14,000
对总有人会去做的

1898
01:14:15,000 --> 01:14:17,000
现在就已经在这做

1899
01:14:17,000 --> 01:14:18,000
就已经有人在做了

1900
01:14:18,000 --> 01:14:21,000
而且他就他据他的说法他已经走了很远

1901
01:14:21,000 --> 01:14:23,000
就什么 IVM 没有问题

1902
01:14:23,000 --> 01:14:25,000
然后那个 Cmark 当然也没有问题

1903
01:14:26,000 --> 01:14:28,000
然后唯一跑不出来就是 swift 本身

1904
01:14:30,000 --> 01:14:33,000
我加入了里面的两个邮件列表

1905
01:14:33,000 --> 01:14:36,000
一个是 swiftdev

1906
01:14:36,000 --> 01:14:37,000
另外一个是 swiftuser

1907
01:14:38,000 --> 01:14:40,000
然后这两天的讨论还是比较热烈

1908
01:14:41,000 --> 01:14:43,000
有一个哥们在做

1909
01:14:43,000 --> 01:14:45,000
swift for android

1910
01:14:45,000 --> 01:14:47,000
而且好像是个中国人

1911
01:14:47,000 --> 01:14:49,000
对

1912
01:14:50,000 --> 01:14:55,000
然后我也是把那个代码都在公司和本机上都

1913
01:14:55,000 --> 01:14:59,000
就按照他的那个说明一步一步做下来

1914
01:14:59,000 --> 01:15:00,000
还是 ok 的吧

1915
01:15:01,000 --> 01:15:04,000
他这次发布的是 2.2 的版本

1916
01:15:04,000 --> 01:15:05,000
然后我看了一下

1917
01:15:06,000 --> 01:15:07,000
Xcode 里面自带那个是 2.1 吗

1918
01:15:10,000 --> 01:15:11,000
我已经很久没有开过 Xcode

1919
01:15:11,000 --> 01:15:12,000
应该是吧

1920
01:15:13,000 --> 01:15:17,000
对所以还是挺有意思他发布的一个更加实验性的版本

1921
01:15:17,000 --> 01:15:18,000
然后就

1922
01:15:18,000 --> 01:15:19,000
就他们生产

1923
01:15:19,000 --> 01:15:20,000
这是 master

1924
01:15:20,000 --> 01:15:22,000
就一只 master 和 stable

1925
01:15:22,000 --> 01:15:23,000
差别

1926
01:15:24,000 --> 01:15:28,000
对对这次还有一个很重要的事就是说因为过去苹果像开源

1927
01:15:28,000 --> 01:15:30,000
这个像 webkit 也好啊

1928
01:15:30,000 --> 01:15:31,000
还有那个叫

1929
01:15:33,000 --> 01:15:34,000
就是苹果之前那些开源产品

1930
01:15:34,000 --> 01:15:35,000
他不会把他们内容

1931
01:15:36,000 --> 01:15:37,000
内部的开发的

1932
01:15:37,000 --> 01:15:40,000
过程拿出来他只会说给你一个 code dump 对吧

1933
01:15:40,000 --> 01:15:40,000
就是

1934
01:15:41,000 --> 01:15:45,000
我们现在这个这个状态是这样子你拿去你自己研究怎么弄

1935
01:15:45,000 --> 01:15:47,000
但你看你从里面

1936
01:15:47,000 --> 01:15:48,000
你看不到

1937
01:15:48,000 --> 01:15:51,000
他是怎么一步一步得到他那个发布那个版本

1938
01:15:51,000 --> 01:15:52,000
这次就不一样了

1939
01:15:52,000 --> 01:15:59,000
这次他们是直接选择把那个 git 发布到那个 github 上面去做一个公开的一个 repository

1940
01:15:59,000 --> 01:16:00,000
就你可以看到

1941
01:16:01,000 --> 01:16:04,000
你可以根据那个 commit history 就是那个提交的那个历史记录

1942
01:16:04,000 --> 01:16:05,000
你可以看到最早的一个

1943
01:16:06,000 --> 01:16:08,000
那个提交是什么那个那个谁那个叫

1944
01:16:08,000 --> 01:16:09,000
叫什么

1945
01:16:09,000 --> 01:16:11,000
chris latner

1946
01:16:11,000 --> 01:16:13,000
对他怎么

1947
01:16:13,000 --> 01:16:19,000
从最开始第一个提交怎么一步一步把这个 swift 的这个这些东西打起来的那个历史过程这个是

1948
01:16:19,000 --> 01:16:23,000
这个应该是从来没有出现过的人类学研究的至宝

1949
01:16:24,000 --> 01:16:25,000
苹果学研究

1950
01:16:27,000 --> 01:16:33,000
对你可以看到苹果内部他们是至少在这个 team 就是 swift 那个 team 是怎么做研究怎么做开发

1951
01:16:33,000 --> 01:16:35,000
怎么做项目管理怎么去

1952
01:16:36,000 --> 01:16:41,000
这个代码怎么一步一步搞出来过去是看不到的就其实还挺有意思的

1953
01:16:42,000 --> 01:16:43,000
这也可能跟

1954
01:16:43,000 --> 01:16:44,000
最近这一两年

1955
01:16:45,000 --> 01:16:47,000
苹果整体上的一个开放的态度

1956
01:16:47,000 --> 01:16:49,000
还有点一个

1957
01:16:49,000 --> 01:16:50,000
契合吧

1958
01:16:50,000 --> 01:16:50,000
就还

1959
01:16:51,000 --> 01:16:52,000
比较难得可贵的一个机会

1960
01:16:53,000 --> 01:16:54,000
但有兴趣可以去看一下

1961
01:16:54,000 --> 01:16:59,000
然后这次发布的还有一个比较有趣的小东西叫做

1962
01:16:59,000 --> 01:17:03,000
swift package manager 就是 swift 员的官方

1963
01:17:03,000 --> 01:17:04,000
包管理器

1964
01:17:04,000 --> 01:17:05,000
为什么有趣呢

1965
01:17:06,000 --> 01:17:07,000
因为这个

1966
01:17:07,000 --> 01:17:10,000
这个东西是我们之前评论过的 max howell 写的

1967
01:17:11,000 --> 01:17:14,000
max howell 这个名字你不熟悉的话

1968
01:17:15,000 --> 01:17:16,000
max 上那个

1969
01:17:16,000 --> 01:17:18,000
著名的包管理器 homebrew 是他写的

1970
01:17:19,000 --> 01:17:23,000
他之前去面 google 讨论过他面 google 被拒的糗事

1971
01:17:24,000 --> 01:17:26,000
然后他是因为什么来的他是因为

1972
01:17:27,000 --> 01:17:28,000
在面试的时候

1973
01:17:29,000 --> 01:17:31,000
没有办法在白板上

1974
01:17:32,000 --> 01:17:35,000
写出手工写出翻转二叉数的算法

1975
01:17:36,000 --> 01:17:38,000
好吧就是我也写不出来

1976
01:17:40,000 --> 01:17:43,000
不能去过这种公司

1977
01:17:44,000 --> 01:17:48,000
所以他这次他后来他不是和我们说他后来去了苹果吗然后

1978
01:17:48,000 --> 01:17:54,000
你去苹果也不知道该干嘛现在就知道他是在花时间写这个 swift package manager 其实想来其实还

1979
01:17:54,000 --> 01:17:56,000
蛮合理的

1980
01:17:56,000 --> 01:17:58,000
做的挺好的

1981
01:17:58,000 --> 01:17:59,000
各尽其才

1982
01:18:00,000 --> 01:18:02,000
swift 这次发布的话

1983
01:18:02,000 --> 01:18:03,000
就是大家想怎么去用它

1984
01:18:04,000 --> 01:18:04,000
可能

1985
01:18:04,000 --> 01:18:05,000
很多人在设想上

1986
01:18:06,000 --> 01:18:07,000
一个场景就是说

1987
01:18:08,000 --> 01:18:09,000
现在不是这个

1988
01:18:09,000 --> 01:18:10,000
啊

1989
01:18:10,000 --> 01:18:11,000
叫什么

1990
01:18:11,000 --> 01:18:15,000
移动端和这个服务端的协同性比较要求比较高了吗对吧

1991
01:18:15,000 --> 01:18:17,000
对可能有一段代码需要在

1992
01:18:18,000 --> 01:18:22,000
客户端就跟之前写那个 webapp 是一样的吗比如说最简单的你要有一个

1993
01:18:22,000 --> 01:18:24,000
验证用户输入是否正确的

1994
01:18:25,000 --> 01:18:27,000
是否合法的一段代码

1995
01:18:27,000 --> 01:18:30,000
你可能会想在现在那个本地就是

1996
01:18:30,000 --> 01:18:31,000
客户端上跑

1997
01:18:31,000 --> 01:18:32,000
客户端是一个

1998
01:18:32,000 --> 01:18:35,000
网页的话就是在 javascript 里面跑

1999
01:18:35,000 --> 01:18:37,000
客户端是一个这个 iOS 应用

2000
01:18:38,000 --> 01:18:39,000
就是你用

2001
01:18:39,000 --> 01:18:39,000
OBJECT C 或者是

2002
01:18:40,000 --> 01:18:40,000
Swift 写嘛

2003
01:18:41,000 --> 01:18:42,000
如果客户端是一个

2004
01:18:42,000 --> 01:18:44,000
Android 应用你可能要用这个

2005
01:18:44,000 --> 01:18:45,000
Java 写对吧

2006
01:18:45,000 --> 01:18:46,000
但是

2007
01:18:46,000 --> 01:18:51,000
同样一段代码和逻辑你又希望在服务端重复一下因为你还是要以服务端验证的结果为准

2008
01:18:52,000 --> 01:18:52,000
因为客户端可能

2009
01:18:52,000 --> 01:18:53,000
谁他妈知道你会被

2010
01:18:54,000 --> 01:18:55,000
被搞了对吧

2011
01:18:55,000 --> 01:18:55,000
对

2012
01:18:56,000 --> 01:18:57,000
但

2013
01:18:57,000 --> 01:19:01,000
过去的话你如果做这个 OBJECT C

2014
01:19:01,000 --> 01:19:02,000
没有人在

2015
01:19:03,000 --> 01:19:04,000
服务器端用吧

2016
01:19:04,000 --> 01:19:05,000
已经没有人

2017
01:19:05,000 --> 01:19:07,000
在服务器端用 OBJECT C

2018
01:19:07,000 --> 01:19:08,000
对所以

2019
01:19:09,000 --> 01:19:15,000
你一定是说在服务器端用的一种语言 PHP 也好 JavaScript 也好 Python 也好 Ruby 也好

2020
01:19:15,000 --> 01:19:16,000
他的那个逻辑

2021
01:19:16,000 --> 01:19:17,000
你要在

2022
01:19:18,000 --> 01:19:23,000
客户端里面在复述就是重写一遍就是请容易找出两点不一致或者出错了

2023
01:19:24,000 --> 01:19:27,000
现在很多人想法就是说其实那这样我可能很多代码就可以共享了

2024
01:19:27,000 --> 01:19:28,000
那很多功能逻辑

2025
01:19:28,000 --> 01:19:30,000
如果根据这个

2026
01:19:30,000 --> 01:19:31,000
那个

2027
01:19:32,000 --> 01:19:34,000
对方这个设备的实际情况来考虑

2028
01:19:35,000 --> 01:19:37,000
是在客户端上运行还是在服务端运行对吧

2029
01:19:38,000 --> 01:19:38,000
比如说

2030
01:19:38,000 --> 01:19:39,000
比如说是一个

2031
01:19:40,000 --> 01:19:44,000
比较老的机型可能跑起来有点慢那我们在服务端算完之后直接给他结果好了对吧

2032
01:19:44,000 --> 01:19:45,000
对

2033
01:19:45,000 --> 01:19:46,000
那如果说

2034
01:19:46,000 --> 01:19:51,000
新的机型新的比较好我可能直接在客户端算完之后他可以有个更快的响应的速度吗

2035
01:19:52,000 --> 01:19:53,000
对这些东西

2036
01:19:53,000 --> 01:19:54,000
事情就可以做了

2037
01:19:54,000 --> 01:19:58,000
但是我后来想了一下这个事情怎么说始终是一个

2038
01:20:00,000 --> 01:20:02,000
很片面的事情

2039
01:20:02,000 --> 01:20:03,000
比如说

2040
01:20:03,000 --> 01:20:04,000
你现在你国内

2041
01:20:04,000 --> 01:20:05,000
假设你做一个

2042
01:20:05,000 --> 01:20:05,000
一个应用

2043
01:20:06,000 --> 01:20:08,000
那你说你个人或者你只做 iOS

2044
01:20:09,000 --> 01:20:13,000
问题不大但是基本上你要做一个稍微大领域你不可能只做 iOS 你还是要做安卓的嘛

2045
01:20:14,000 --> 01:20:15,000
对那

2046
01:20:15,000 --> 01:20:17,000
你是不是在安卓上怎么办

2047
01:20:17,000 --> 01:20:20,000
就是你的安卓应用是不是得写嘛对吧

2048
01:20:20,000 --> 01:20:22,000
这所以其实还是逃不掉那个问题

2049
01:20:23,000 --> 01:20:24,000
所以反而是现在那些

2050
01:20:24,000 --> 01:20:25,000
JavaScript

2051
01:20:25,000 --> 01:20:28,000
从这点上看可能生命力最强也是

2052
01:20:29,000 --> 01:20:31,000
反而是 JavaScript

2053
01:20:32,000 --> 01:20:35,000
对通过那个 react native 的方式来可能反而会好一点

2054
01:20:35,000 --> 01:20:36,000
丢丢吧

2055
01:20:37,000 --> 01:20:39,000
但是怎么说呢反正

2056
01:20:40,000 --> 01:20:43,000
你刚才说的问题现在机油的解决方案基本就是

2057
01:20:44,000 --> 01:20:45,000
比如说在

2058
01:20:45,000 --> 01:20:47,000
服务器端实现一套

2059
01:20:47,000 --> 01:20:50,000
逻辑然后生成客户端的代码

2060
01:20:51,000 --> 01:20:57,000
比如说服务器端是 Java 然后生成与这个逻辑一模一样的 JavaScript 然后部署到

2061
01:20:57,000 --> 01:20:58,000
客户端上

2062
01:20:58,000 --> 01:21:00,000
compile to javascript

2063
01:21:01,000 --> 01:21:02,000
对要么就是

2064
01:21:02,000 --> 01:21:03,000
这也是

2065
01:21:03,000 --> 01:21:04,000
这也是一种方案

2066
01:21:04,000 --> 01:21:05,000
但是

2067
01:21:05,000 --> 01:21:06,000
还是这样的

2068
01:21:06,000 --> 01:21:07,000
都用 JavaScript

2069
01:21:08,000 --> 01:21:12,000
然后如果你只做苹果如果你是这个

2070
01:21:14,000 --> 01:21:16,000
百分之一百二的过分的话你可以选择

2071
01:21:16,000 --> 01:21:18,000
也许在不远的将来可以选择只用 swift

2072
01:21:22,000 --> 01:21:22,000
但

2073
01:21:22,000 --> 01:21:25,000
但我觉得 swift 的用力并不仅仅限于此吧

2074
01:21:27,000 --> 01:21:30,000
所以你觉得在你的构想中还有什么其他用力可以

2075
01:21:30,000 --> 01:21:32,000
因为我觉得 swift 是作为一种

2076
01:21:33,000 --> 01:21:34,000
怎么说呢作为一种系统

2077
01:21:34,000 --> 01:21:35,000
系统级别语言而生的

2078
01:21:35,000 --> 01:21:38,000
其实系统级别的语言可以做的事情

2079
01:21:38,000 --> 01:21:40,000
远远超过 web 的范畴

2080
01:21:42,000 --> 01:21:44,000
比如说我觉得

2081
01:21:44,000 --> 01:21:46,000
叫什么 swift line 之类的

2082
01:21:46,000 --> 01:21:51,000
项目啊就是支持什么用 swift 来写命令行下面的工具啊

2083
01:21:51,000 --> 01:21:53,000
写一些

2084
01:21:53,000 --> 01:21:54,000
就跟 web 完全没有关系的东西

2085
01:21:55,000 --> 01:21:55,000
就替代 c 嘛

2086
01:21:56,000 --> 01:21:57,000
对它其实是一种

2087
01:21:58,000 --> 01:22:00,000
相对来说比较靠谱的系统级别的语言

2088
01:22:02,000 --> 01:22:03,000
当然我的意思是

2089
01:22:04,000 --> 01:22:04,000
他

2090
01:22:04,000 --> 01:22:05,000
可能

2091
01:22:06,000 --> 01:22:07,000
还达不到比如说

2092
01:22:07,000 --> 01:22:09,000
go 或者 cca 这样的

2093
01:22:10,000 --> 01:22:12,000
级别但是毕竟刚刚开始嘛

2094
01:22:13,000 --> 01:22:16,000
3.0 还没有还在 review

2095
01:22:16,000 --> 01:22:18,000
在下一个时日也许可以成长成一个

2096
01:22:19,000 --> 01:22:20,000
比较

2097
01:22:20,000 --> 01:22:21,000
既优雅

2098
01:22:22,000 --> 01:22:23,000
又性感的这么一个

2099
01:22:23,000 --> 01:22:24,000
编程语言

2100
01:22:24,000 --> 01:22:25,000
哈哈

2101
01:22:25,000 --> 01:22:31,000
这就要看那个叫做 adoption 嘛就是社区到底对他支持怎么样然后因为他毕竟

2102
01:22:32,000 --> 01:22:34,000
苹果他开放只是一些核心的组件嘛

2103
01:22:34,000 --> 01:22:40,000
那就像周边的那些第三方包啊第三方库还是要靠社区去发布和维护嘛

2104
01:22:40,000 --> 01:22:42,000
对所以看社区这个事情怎么想了

2105
01:22:43,000 --> 01:22:44,000
那这个让人想起那个

2106
01:22:44,000 --> 01:22:45,000
啊

2107
01:22:45,000 --> 01:22:46,000
到 net

2108
01:22:46,000 --> 01:22:47,000
call library

2109
01:22:48,000 --> 01:22:49,000
在去年

2110
01:22:49,000 --> 01:22:50,000
开源的时候的

2111
01:22:51,000 --> 01:22:53,000
类似的一些一些讨论

2112
01:22:53,000 --> 01:22:56,000
就是微软有这个愿景

2113
01:22:56,000 --> 01:22:58,000
现在很有趣啊微软和

2114
01:22:58,000 --> 01:22:59,000
apple 都在

2115
01:23:00,000 --> 01:23:02,000
github 上面有一个用户

2116
01:23:03,000 --> 01:23:04,000
这个还

2117
01:23:04,000 --> 01:23:06,000
github.com

2118
01:23:06,000 --> 01:23:07,000
apple

2119
01:23:07,000 --> 01:23:10,000
github.com

2120
01:23:11,000 --> 01:23:11,000
microsoft

2121
01:23:13,000 --> 01:23:14,000
挺违和的感觉

2122
01:23:14,000 --> 01:23:21,000
这么大人现在两家的主就是起码微软的也也现在说要拥抱

2123
01:23:21,000 --> 01:23:22,000
开源了吗对吧

2124
01:23:22,000 --> 01:23:24,000
他认识到这个

2125
01:23:24,000 --> 01:23:26,000
过去那套玩不玩不下去了

2126
01:23:27,000 --> 01:23:30,000
过去那套说 Linux 是 i 细胞的这个

2127
01:23:30,000 --> 01:23:33,000
不对他说他是说 Linux 是 i 细胞还是说

2128
01:23:33,000 --> 01:23:35,000
自由软件吗应该是开源软件

2129
01:23:35,000 --> 01:23:37,000
他说 GPL 是 i 细胞

2130
01:23:38,000 --> 01:23:39,000
GPL 确实是 i 细胞

2131
01:23:39,000 --> 01:23:40,000
哈哈哈哈

2132
01:23:41,000 --> 01:23:41,000
好吧

2133
01:23:42,000 --> 01:23:42,000
呃

2134
01:23:42,000 --> 01:23:43,000
对

2135
01:23:43,000 --> 01:23:44,000
就我刚说了

2136
01:23:45,000 --> 01:23:47,000
对和 Csharp 类似吧

2137
01:23:47,000 --> 01:23:49,000
Csharp 和 swift 都是

2138
01:23:50,000 --> 01:23:50,000
我觉得

2139
01:23:51,000 --> 01:23:52,000
蛮漂亮的女人

2140
01:23:52,000 --> 01:23:53,000
希望他们

2141
01:23:53,000 --> 01:23:56,000
就此被放飞之后可以有更大的作为了

2142
01:23:56,000 --> 01:23:57,000
而且

2143
01:23:57,000 --> 01:23:58,000
后面都有推手

2144
01:23:58,000 --> 01:24:00,000
比较大的财团对吧

2145
01:24:01,000 --> 01:24:03,000
我觉得前途应该是还是可以

2146
01:24:03,000 --> 01:24:06,000
可以观望一下

2147
01:24:06,000 --> 01:24:12,000
我个人我比较关心那个 swift 在写服务器端软件的应用

2148
01:24:13,000 --> 01:24:16,000
因为我之前用 go 写过一些乱七八糟小东西嘛

2149
01:24:16,000 --> 01:24:22,000
然后我这么想因为这两个语言的性质还是不太一样啊因为 go 他是一个相对来说

2150
01:24:22,000 --> 01:24:25,000
比较简单的语言就没有很多复杂特性然后

2151
01:24:26,000 --> 01:24:27,000
他支持了一些

2152
01:24:27,000 --> 01:24:29,000
他的他的他的一些选择是很

2153
01:24:30,000 --> 01:24:30,000
很

2154
01:24:31,000 --> 01:24:33,000
特殊的一种组合吧比如说他有

2155
01:24:33,000 --> 01:24:36,000
他是一个 gc 就是垃圾回收的语言然后他

2156
01:24:37,000 --> 01:24:37,000
对这个

2157
01:24:38,000 --> 01:24:39,000
就是并发的支持

2158
01:24:40,000 --> 01:24:42,000
比较良好对 web 的支持也比较不错

2159
01:24:42,000 --> 01:24:48,000
swift 的话现在就不太一样因为他是一个更加通用一点的语言然后他没有 gc 嘛他是用

2160
01:24:48,000 --> 01:24:51,000
那个技术器的 reference counting 的方式

2161
01:24:51,000 --> 01:24:52,000
来做内存管理

2162
01:24:53,000 --> 01:24:56,000
然后就没有 gc 的那个暂停的问题

2163
01:24:56,000 --> 01:24:58,000
另外他

2164
01:24:59,000 --> 01:25:01,000
起码在目前为止他没有对这个并发

2165
01:25:01,000 --> 01:25:02,000
做任何特殊的优化

2166
01:25:03,000 --> 01:25:05,000
对他的并发不是在语言层面上支持

2167
01:25:05,000 --> 01:25:07,000
对不是语言层面对并发的支持

2168
01:25:07,000 --> 01:25:09,000
他目前在 os 10 上

2169
01:25:10,000 --> 01:25:12,000
是依赖原定叫做 leap dispatch 嘛

2170
01:25:12,000 --> 01:25:13,000
就是一个 cool

2171
01:25:13,000 --> 01:25:14,000
然后来做

2172
01:25:14,000 --> 01:25:15,000
那么

2173
01:25:15,000 --> 01:25:16,000
那我如果那

2174
01:25:16,000 --> 01:25:18,000
一个自然而然的问题就是说

2175
01:25:18,000 --> 01:25:21,000
如果做高并发的这种 web 的

2176
01:25:21,000 --> 01:25:22,000
软件的话

2177
01:25:22,000 --> 01:25:24,000
或者服务器软件的话

2178
01:25:24,000 --> 01:25:28,000
这个 swift 怎么弄是说用那个像 event 的方式呢

2179
01:25:29,000 --> 01:25:33,000
还是说以后谁在实现一个轻量级的类似于 go 的那种

2180
01:25:33,000 --> 01:25:34,000
现成的方式

2181
01:25:34,000 --> 01:25:36,000
就现在都还是未知的吧

2182
01:25:36,000 --> 01:25:37,000
这一块我觉得

2183
01:25:37,000 --> 01:25:39,000
还

2184
01:25:39,000 --> 01:25:41,000
不太适合现在用它来写一些

2185
01:25:41,000 --> 01:25:42,000
服务器上的应用

2186
01:25:43,000 --> 01:25:49,000
即便 swift 3.0 也没有涵盖任何和 concurrence 相关的东西

2187
01:25:49,000 --> 01:25:52,000
对这个其实我觉得还蛮失望的因为毕竟

2188
01:25:52,000 --> 01:25:53,000
现在就是我们

2189
01:25:54,000 --> 01:25:57,000
一个大致的认同就是未来肯定是一个并发

2190
01:25:58,000 --> 01:25:58,000
并行要

2191
01:25:58,000 --> 01:25:59,000
特别考虑的时代

2192
01:26:00,000 --> 01:26:00,000
因为

2193
01:26:01,000 --> 01:26:03,000
那个每个核不会变得更快了

2194
01:26:03,000 --> 01:26:04,000
就会说变得更多

2195
01:26:04,000 --> 01:26:05,000
所以

2196
01:26:05,000 --> 01:26:08,000
怎么弄怎么去适应这个环境或者说

2197
01:26:08,000 --> 01:26:09,000
怎么降低

2198
01:26:10,000 --> 01:26:11,000
开发者

2199
01:26:11,000 --> 01:26:14,000
编写这种并发应用并行应用的难度

2200
01:26:14,000 --> 01:26:17,000
就是 swift 没有给出他自己的答案我觉得

2201
01:26:19,000 --> 01:26:21,000
总之这个燕子目前还是太嫩了

2202
01:26:22,000 --> 01:26:23,000
还是要观望一下吧

2203
01:26:25,000 --> 01:26:31,000
刚才说到那个 swift 3.0 他们明年年末就是从现在开始一年之后要发布的一个

2204
01:26:31,000 --> 01:26:32,000
大版本说是

2205
01:26:33,000 --> 01:26:34,000
我记得是在

2206
01:26:35,000 --> 01:26:36,000
2016 年秋天没有记错的话

2207
01:26:36,000 --> 01:26:37,000
反正就是一年以后了至少

2208
01:26:38,000 --> 01:26:39,000
然后

2209
01:26:39,000 --> 01:26:41,000
会有一些语言层面的变动其实

2210
01:26:42,000 --> 01:26:46,000
所以到现在为止出来那么多版本一直都在折腾这个语言层面的变化了

2211
01:26:47,000 --> 01:26:53,000
对其实从最开始的 demo 一直到现在这个语言特性已经有相当程度上的

2212
01:26:54,000 --> 01:26:55,000
变化如果你做一个

2213
01:26:56,000 --> 01:26:57,000
no undone 的对比的话

2214
01:26:57,000 --> 01:26:58,000
对

2215
01:26:58,000 --> 01:26:59,000
所以现在

2216
01:26:59,000 --> 01:27:03,000
3.0 也一样 3.0 有可能会给做出一些就是

2217
01:27:03,000 --> 01:27:05,000
直接打破向后兼容性的改动

2218
01:27:05,000 --> 01:27:07,000
一定的吧

2219
01:27:07,000 --> 01:27:09,000
对于一个新人来说这

2220
01:27:09,000 --> 01:27:10,000
这还是挺正常的

2221
01:27:11,000 --> 01:27:16,000
但是起码有这套工具链了然后我可以说我能够写一个

2222
01:27:16,000 --> 01:27:21,000
小应用出来玩一下然后丢到这个 Linux 服务器上一直跑着然后

2223
01:27:22,000 --> 01:27:22,000
因为我的这个

2224
01:27:23,000 --> 01:27:27,000
兴趣点还是在写那个服务端软件上面吧

2225
01:27:27,000 --> 01:27:29,000
以前不可能吧现在至少可能了

2226
01:27:30,000 --> 01:27:32,000
然后因为他这个还有 swift

2227
01:27:32,000 --> 01:27:33,000
他是写出来是一个

2228
01:27:34,000 --> 01:27:34,000
怎么说的

2229
01:27:34,000 --> 01:27:37,000
不带一个 runtime 他没有 gc 那套机制

2230
01:27:37,000 --> 01:27:38,000
他生成的那个

2231
01:27:38,000 --> 01:27:39,000
比较小

2232
01:27:40,000 --> 01:27:40,000
比如说

2233
01:27:40,000 --> 01:27:41,000
最简单

2234
01:27:41,000 --> 01:27:42,000
我们都写一个这个 print

2235
01:27:43,000 --> 01:27:44,000
hello world 这么一个应用

2236
01:27:44,000 --> 01:27:46,000
swift 编辑出来在

2237
01:27:46,000 --> 01:27:47,000
x 86 上

2238
01:27:47,000 --> 01:27:49,000
x 64 上就是一个

2239
01:27:49,000 --> 01:27:51,000
不到 10 k 的一个 banary 吧

2240
01:27:52,000 --> 01:27:53,000
但是你用 go 写的

2241
01:27:53,000 --> 01:27:57,000
出来就是一兆多两兆的一个 banary

2242
01:27:57,000 --> 01:28:00,000
因为它里面还包含了整个 go 的那个 runtime

2243
01:28:00,000 --> 01:28:01,000
go 是 battery included

2244
01:28:01,000 --> 01:28:02,000
就是有那个

2245
01:28:02,000 --> 01:28:04,000
runtime 有 gc 那套机制嘛

2246
01:28:04,000 --> 01:28:04,000
所以

2247
01:28:05,000 --> 01:28:07,000
如果你想写那些小的那种

2248
01:28:07,000 --> 01:28:11,000
就 utility 就工具型的应用的话 suit 也是一个非常不错的选择

2249
01:28:13,000 --> 01:28:16,000
好吧那个 swift 的事就先聊到这哈

2250
01:28:16,000 --> 01:28:19,000
还有一个重大的新闻就是我们

2251
01:28:19,000 --> 01:28:21,000
我也一直很关注的那种 let's encrypt

2252
01:28:21,000 --> 01:28:24,000
那个开放的

2253
01:28:25,000 --> 01:28:27,000
开放的

2254
01:28:27,000 --> 01:28:29,000
SSL 一个 CA

2255
01:28:29,000 --> 01:28:30,000
开始公测了

2256
01:28:31,000 --> 01:28:32,000
那个之前我们提到的

2257
01:28:32,000 --> 01:28:33,000
它是说

2258
01:28:33,000 --> 01:28:35,000
过去证书是要钱的嘛

2259
01:28:35,000 --> 01:28:39,000
那有些不要钱的那种 SSL 证书的发放商像那个 start ssl

2260
01:28:39,000 --> 01:28:41,000
它那基本也不是很好使

2261
01:28:41,000 --> 01:28:42,000
然后也很麻烦嘛

2262
01:28:43,000 --> 01:28:44,000
那 let's encrypt 要解决这个问题

2263
01:28:45,000 --> 01:28:47,000
让大家能免费的用上

2264
01:28:47,000 --> 01:28:48,000
这个 SSL 证书

2265
01:28:49,000 --> 01:28:49,000
加密

2266
01:28:50,000 --> 01:28:53,000
进行这个加密的 https 同性嘛

2267
01:28:53,000 --> 01:28:58,000
然后同时又可以把这个证书的生成啊替换啊自动化掉

2268
01:28:58,000 --> 01:28:59,000
它这个整套

2269
01:28:59,000 --> 01:29:01,000
这个机制是做这么一件事

2270
01:29:01,000 --> 01:29:02,000
之前

2271
01:29:02,000 --> 01:29:04,000
说是 9 月份开始发

2272
01:29:05,000 --> 01:29:06,000
公测啊

2273
01:29:06,000 --> 01:29:07,000
拖了到了 12 月份了

2274
01:29:08,000 --> 01:29:09,000
但是好歹开始用了

2275
01:29:10,000 --> 01:29:12,000
然后如果有兴趣的话大家可以去看一下

2276
01:29:13,000 --> 01:29:14,000
不介意现在马上

2277
01:29:14,000 --> 01:29:16,000
部署到生产环境里面去

2278
01:29:16,000 --> 01:29:20,000
可以在一些无关痛痒的地方

2279
01:29:20,000 --> 01:29:21,000
先弄一下吧

2280
01:29:22,000 --> 01:29:24,000
我记得那天

2281
01:29:24,000 --> 01:29:25,000
let's encrypt

2282
01:29:25,000 --> 01:29:29,000
开放公测的时候是谁在推特上说了一句说 let's encrypt 简直就是

2283
01:29:30,000 --> 01:29:31,000
科技权

2284
01:29:32,000 --> 01:29:34,000
全的王峰每次要

2285
01:29:34,000 --> 01:29:36,000
要上头条就

2286
01:29:36,000 --> 01:29:38,000
就遇到别的大新闻

2287
01:29:38,000 --> 01:29:43,000
上一次就是 swift 开源把这个 let's encrypt 公测的风头完全压下去

2288
01:29:44,000 --> 01:29:45,000
接下来的新闻

2289
01:29:46,000 --> 01:29:48,000
也是一门

2290
01:29:48,000 --> 01:29:50,000
一个语言的更新的新闻

2291
01:29:51,000 --> 01:29:52,000
我们真的要说它吗

2292
01:29:52,000 --> 01:29:53,000
说吧这点是很重要的

2293
01:29:56,000 --> 01:29:57,000
PHP 7

2294
01:29:58,000 --> 01:30:00,000
说出来都走音了

2295
01:30:01,000 --> 01:30:02,000
PHP 发布了

2296
01:30:02,000 --> 01:30:03,000
第七版

2297
01:30:03,000 --> 01:30:05,000
所以这版有什么变化

2298
01:30:07,000 --> 01:30:09,000
我不知道你的反应是什么我第一反应是 dafuck

2299
01:30:09,000 --> 01:30:11,000
PHP 6 怎么了

2300
01:30:11,000 --> 01:30:12,000
有 6 吗

2301
01:30:12,000 --> 01:30:14,000
有 6 吗为什么突然变成了 PHP 6

2302
01:30:14,000 --> 01:30:15,000
发布过 6 是吧

2303
01:30:16,000 --> 01:30:19,000
OK 原来你比我还那个

2304
01:30:19,000 --> 01:30:22,000
因为我知道我最后一次接受 PHP 它是 5.0 的时代

2305
01:30:23,000 --> 01:30:24,000
对所以也有些年头了

2306
01:30:25,000 --> 01:30:26,000
OK

2307
01:30:27,000 --> 01:30:27,000
好吧

2308
01:30:28,000 --> 01:30:29,000
PHP 4.0 是一坨屎

2309
01:30:29,000 --> 01:30:30,000
5.0 是

2310
01:30:31,000 --> 01:30:33,000
不那么臭的事

2311
01:30:33,000 --> 01:30:36,000
但是到什么 5.3 5.4 其实就还不错了

2312
01:30:36,000 --> 01:30:39,000
然后 PHP 6 其实是有点像

2313
01:30:40,000 --> 01:30:42,000
像 Python 3 吧有点

2314
01:30:42,000 --> 01:30:42,000
就是

2315
01:30:43,000 --> 01:30:45,000
PHP 6 试图试图解决了一个最大的

2316
01:30:45,000 --> 01:30:48,000
PHP 的痛点就是 unicode 支持

2317
01:30:48,000 --> 01:30:53,000
但是 PHP 6 一直难产因为这个跟他们的这个

2318
01:30:53,000 --> 01:30:54,000
核心开发者

2319
01:30:55,000 --> 01:30:55,000
这个

2320
01:30:55,000 --> 01:30:56,000
incompetent

2321
01:30:56,000 --> 01:30:57,000
无能

2322
01:30:57,000 --> 01:31:00,000
对这群人

2323
01:31:00,000 --> 01:31:00,000
不

2324
01:31:01,000 --> 01:31:01,000
他们无能

2325
01:31:01,000 --> 01:31:05,000
接下来我们要介绍的很可能不是能力上的无能

2326
01:31:05,000 --> 01:31:06,000
而是一个

2327
01:31:06,000 --> 01:31:07,000
制度上的无能

2328
01:31:08,000 --> 01:31:09,000
他们

2329
01:31:09,000 --> 01:31:15,000
6.0 一直做不出来然后被迫把给 6 开发的许多新特性

2330
01:31:16,000 --> 01:31:17,000
一点点 backport

2331
01:31:17,000 --> 01:31:19,000
到 PHP 5 里面

2332
01:31:19,000 --> 01:31:22,000
然后 PHP 5.3 5.4

2333
01:31:23,000 --> 01:31:23,000
乃至

2334
01:31:24,000 --> 01:31:27,000
接下来 whatever 的什么版本里面其实都有很多新特性是

2335
01:31:27,000 --> 01:31:29,000
来自于原本计划的 PHP 6

2336
01:31:29,000 --> 01:31:30,000
所以其实有 PHP 6 这个版本

2337
01:31:31,000 --> 01:31:32,000
发布过吗

2338
01:31:33,000 --> 01:31:34,000
他但是

2339
01:31:34,000 --> 01:31:36,000
问题就在于 PHP 6

2340
01:31:36,000 --> 01:31:39,000
从来没有一个正式的

2341
01:31:40,000 --> 01:31:41,000
我记得 2005

2342
01:31:42,000 --> 01:31:47,000
还是 06 年的时候他们希望 2009 年的时候大家都迁移到 PHP 6 上

2343
01:31:48,000 --> 01:31:49,000
也不可能

2344
01:31:50,000 --> 01:31:51,000
而

2345
01:31:51,000 --> 01:31:52,000
9 年之后我们

2346
01:31:52,000 --> 01:31:55,000
6 年之后我们看这扯淡去吧

2347
01:31:55,000 --> 01:31:57,000
绝大部分 PHP 程序员可能

2348
01:31:59,000 --> 01:31:59,000
连

2349
01:31:59,000 --> 01:32:00,000
5 和 6 之间

2350
01:32:01,000 --> 01:32:01,000
有什么差别都弄不清楚

2351
01:32:02,000 --> 01:32:07,000
那天连 5.0 5.1 5.2 5.3 的区别估计都

2352
01:32:08,000 --> 01:32:09,000
没有很多人解释的清楚

2353
01:32:10,000 --> 01:32:11,000
对

2354
01:32:11,000 --> 01:32:13,000
然后我觉得 PHP 程序员其实有一种

2355
01:32:14,000 --> 01:32:15,000
当然不是说亲爱的你

2356
01:32:16,000 --> 01:32:18,000
你这位 PHP 程序员

2357
01:32:18,000 --> 01:32:22,000
不要觉得被冒犯我们是说另外一些 PHP 程序员

2358
01:32:22,000 --> 01:32:25,000
他们在写 PHP 程序的时候

2359
01:32:26,000 --> 01:32:27,000
基本上就是

2360
01:32:27,000 --> 01:32:29,000
看到这个 warning

2361
01:32:30,000 --> 01:32:30,000
就

2362
01:32:31,000 --> 01:32:32,000
把 warning 关掉

2363
01:32:32,000 --> 01:32:34,000
然后

2364
01:32:34,000 --> 01:32:40,000
不管开发的时候有多少 warning 只要把 warning 关掉之后看不到 warning 他们就认为这个代码可以跑了

2365
01:32:40,000 --> 01:32:41,000
所以你给这些人

2366
01:32:42,000 --> 01:32:44,000
说什么这个特性下一版本就

2367
01:32:45,000 --> 01:32:46,000
就要废掉了简直是

2368
01:32:47,000 --> 01:32:49,000
让他们觉得不可接受一点

2369
01:32:51,000 --> 01:32:51,000
总之

2370
01:32:52,000 --> 01:32:53,000
我觉得就是这样就 PHP

2371
01:32:53,000 --> 01:32:55,000
PHP 程序员很多就是

2372
01:32:57,000 --> 01:32:58,000
白痴啊

2373
01:32:58,000 --> 01:33:00,000
你跟这些人讲道理讲不通

2374
01:33:01,000 --> 01:33:04,000
讲不清楚所以这个核心开发者也没有办法就是强势的去

2375
01:33:05,000 --> 01:33:06,000
推动这样一群人

2376
01:33:06,000 --> 01:33:10,000
推不动吧你想这么大规模的部署量了怎么可能呢

2377
01:33:10,000 --> 01:33:12,000
就好像 Python 图二转三一样

2378
01:33:13,000 --> 01:33:13,000
这么多年了

2379
01:33:13,000 --> 01:33:15,000
好像也没怎么成功吧

2380
01:33:16,000 --> 01:33:18,000
对所以就像我们在

2381
01:33:18,000 --> 01:33:21,000
就像或者说就像 Python 社区

2382
01:33:21,000 --> 01:33:25,000
不得不把很多 3 的信责性 backported 到 2.7 里面

2383
01:33:26,000 --> 01:33:28,000
PHP 也是嘛很多

2384
01:33:28,000 --> 01:33:30,000
6 个信责性 backported 到 PHP

2385
01:33:30,000 --> 01:33:32,000
但是这就有一个问题就是

2386
01:33:33,000 --> 01:33:34,000
更没有动力升级

2387
01:33:35,000 --> 01:33:35,000
对那

2388
01:33:35,000 --> 01:33:38,000
那新一代的 PHP NG 应该

2389
01:33:39,000 --> 01:33:39,000
用什么版本

2390
01:33:40,000 --> 01:33:44,000
然后去年的时候 PHP 社区有一个讨论就说

2391
01:33:44,000 --> 01:33:47,000
那新的 PHP NG 就叫 PHP 7 号

2392
01:33:48,000 --> 01:33:49,000
NG 就是 Next Generation

2393
01:33:50,000 --> 01:33:50,000
所以

2394
01:33:51,000 --> 01:33:53,000
新版的 PHP 就是 PHP 7

2395
01:33:53,000 --> 01:33:54,000
所以如果你

2396
01:33:55,000 --> 01:34:00,000
对这个 PHP 感兴趣的话然后你说现在有三个并存版本 5 6 和 7

2397
01:34:00,000 --> 01:34:01,000
我应该用哪个版本呢

2398
01:34:01,000 --> 01:34:02,000
答案是用 7

2399
01:34:03,000 --> 01:34:05,000
或者说我从 5 要迁移

2400
01:34:05,000 --> 01:34:07,000
我迁移到哪呢答案是迁移到 7

2401
01:34:07,000 --> 01:34:08,000
而不是到 6

2402
01:34:09,000 --> 01:34:10,000
因为 6

2403
01:34:11,000 --> 01:34:12,000
很有可能就

2404
01:34:12,000 --> 01:34:13,000
不再会继续

2405
01:34:14,000 --> 01:34:14,000
对

2406
01:34:14,000 --> 01:34:15,000
OK

2407
01:34:16,000 --> 01:34:20,000
所以总体来说那 7 到底有什么信责性是比较好的

2408
01:34:20,000 --> 01:34:21,000
好有意思的

2409
01:34:22,000 --> 01:34:24,000
语言层面上的信责性是

2410
01:34:25,000 --> 01:34:25,000
是

2411
01:34:25,000 --> 01:34:26,000
怎么说呢

2412
01:34:29,000 --> 01:34:30,000
好像有一些

2413
01:34:30,000 --> 01:34:32,000
是会弄坏现有代码

2414
01:34:32,000 --> 01:34:37,000
比如说就没有像他有兼容吗这个我已经有心理预期了无所谓

2415
01:34:37,000 --> 01:34:39,000
有什么好玩的特性但是

2416
01:34:39,000 --> 01:34:41,000
有一个好玩的特性是

2417
01:34:41,000 --> 01:34:44,000
The Spaceship Operator

2418
01:34:44,000 --> 01:34:46,000
太空船预算服

2419
01:34:47,000 --> 01:34:51,000
对他的写法是一个小约号一个等约号一个大约号

2420
01:34:52,000 --> 01:34:52,000
What

2421
01:34:52,000 --> 01:34:53,000
我觉得

2422
01:34:54,000 --> 01:34:56,000
我们现在可以拿出那个 PHP 的锤子来了

2423
01:34:56,000 --> 01:34:57,000
就是

2424
01:34:57,000 --> 01:35:00,000
两边都是起钉子

2425
01:35:00,000 --> 01:35:02,000
那个弯曲的

2426
01:35:02,000 --> 01:35:03,000
翘的锤子

2427
01:35:05,000 --> 01:35:06,000
有很多这样

2428
01:35:07,000 --> 01:35:08,000
无趣且无用的东西

2429
01:35:08,000 --> 01:35:09,000
我觉得就是

2430
01:35:09,000 --> 01:35:11,000
他这个 Space Ship Operator

2431
01:35:11,000 --> 01:35:12,000
其实就是一个

2432
01:35:15,000 --> 01:35:16,000
Comparator 运算服

2433
01:35:17,000 --> 01:35:18,000
就是他会

2434
01:35:18,000 --> 01:35:22,000
返回他左右两侧的参数之间的关系

2435
01:35:22,000 --> 01:35:23,000
如果是小的话就反

2436
01:35:23,000 --> 01:35:29,000
选返回-1 如果是相等的话就是返回 0 如果是大于的话就返回 1

2437
01:35:30,000 --> 01:35:31,000
对

2438
01:35:31,000 --> 01:35:32,000
What?

2439
01:35:32,000 --> 01:35:33,000
什么意思

2440
01:35:33,000 --> 01:35:34,000
是不是

2441
01:35:34,000 --> 01:35:36,000
对为什么要做出这样的东西来

2442
01:35:36,000 --> 01:35:37,000
对呀

2443
01:35:37,000 --> 01:35:37,000
就

2444
01:35:38,000 --> 01:35:39,000
你不知道吧

2445
01:35:39,000 --> 01:35:40,000
就

2446
01:35:40,000 --> 01:35:41,000
不可理喻

2447
01:35:41,000 --> 01:35:42,000
我觉得

2448
01:35:44,000 --> 01:35:44,000
好吧

2449
01:35:45,000 --> 01:35:47,000
好吧好吧我们从现在开始换回这个比较

2450
01:35:48,000 --> 01:35:50,000
比较客观的态度

2451
01:35:50,000 --> 01:35:53,000
另外一个新特性是比如说叫

2452
01:35:54,000 --> 01:35:56,000
他们官方名字叫什么来着

2453
01:35:56,000 --> 01:35:58,000
Now

2454
01:35:58,000 --> 01:35:59,000
Coalistic

2455
01:36:00,000 --> 01:36:01,000
之类的一个名字

2456
01:36:01,000 --> 01:36:02,000
就是

2457
01:36:02,000 --> 01:36:03,000
问号问号

2458
01:36:04,000 --> 01:36:05,000
OK 这回是做什么

2459
01:36:05,000 --> 01:36:06,000
问号问号的

2460
01:36:07,000 --> 01:36:12,000
因为写 PGP 的时候你经常会需要去判断一个值是不是

2461
01:36:12,000 --> 01:36:12,000
被设定了

2462
01:36:13,000 --> 01:36:14,000
你要调用一个函数叫做

2463
01:36:14,000 --> 01:36:15,000
Is Set

2464
01:36:16,000 --> 01:36:21,000
所谓被设定就是他不是未复职的状态

2465
01:36:21,000 --> 01:36:22,000
其实就是那个

2466
01:36:23,000 --> 01:36:24,000
Swift 里面那个

2467
01:36:24,000 --> 01:36:25,000
Optional Type

2468
01:36:26,000 --> 01:36:27,000
Optional Type

2469
01:36:27,000 --> 01:36:27,000
然后

2470
01:36:29,000 --> 01:36:29,000
这个

2471
01:36:30,000 --> 01:36:32,000
这个 Pattern 因为被用的太多了

2472
01:36:32,000 --> 01:36:33,000
所以他们专门做那个

2473
01:36:33,000 --> 01:36:35,000
这个运算服务就是

2474
01:36:36,000 --> 01:36:36,000
两个问号

2475
01:36:36,000 --> 01:36:41,000
比如说你前面写一个你要判断那个 Get query 里面 user 这个

2476
01:36:41,000 --> 01:36:42,000
Variable 是不是存在

2477
01:36:43,000 --> 01:36:44,000
你之前可能会写

2478
01:36:44,000 --> 01:36:45,000
Is Set

2479
01:36:45,000 --> 01:36:46,000
Get user

2480
01:36:47,000 --> 01:36:48,000
而现在你可以写

2481
01:36:48,000 --> 01:36:49,000
Get user

2482
01:36:49,000 --> 01:36:50,000
问号问号

2483
01:36:50,000 --> 01:36:53,000
如果没有设定的话后面有个缺乘式是 No one

2484
01:36:53,000 --> 01:36:54,000
比如说

2485
01:36:55,000 --> 01:36:58,000
这有点像那个 JavaScript 的一个常用的 Pattern 就是

2486
01:37:00,000 --> 01:37:01,000
A 等于 B

2487
01:37:02,000 --> 01:37:03,000
或者

2488
01:37:03,000 --> 01:37:04,000
C

2489
01:37:04,000 --> 01:37:07,000
如果 B 没有被设定的话 A 就会复给 C

2490
01:37:08,000 --> 01:37:09,000
大概是这样一个用途

2491
01:37:09,000 --> 01:37:14,000
那我问你如果说这个他前面判断是空的话那 Ethernet 等于什么

2492
01:37:16,000 --> 01:37:17,000
等于 Nobody

2493
01:37:19,000 --> 01:37:22,000
我刚才说如果 Get 里面 User

2494
01:37:23,000 --> 01:37:26,000
好吧写法是这样的$Get

2495
01:37:26,000 --> 01:37:29,000
然后那个 AreaAccessor 里面是 User

2496
01:37:30,000 --> 01:37:31,000
然后问号问号

2497
01:37:31,000 --> 01:37:32,000
后面写

2498
01:37:32,000 --> 01:37:33,000
一个字语出来 Nobody

2499
01:37:34,000 --> 01:37:36,000
所以意思就是如果前面这个 Get

2500
01:37:36,000 --> 01:37:37,000
Area 里面的这个

2501
01:37:38,000 --> 01:37:38,000
user

2502
01:37:38,000 --> 01:37:40,000
就是 Nobody

2503
01:37:41,000 --> 01:37:43,000
如果他设定的话就是那个值

2504
01:37:43,000 --> 01:37:44,000
有个但那个值是什么就不知道

2505
01:37:45,000 --> 01:37:46,000
没错

2506
01:37:47,000 --> 01:37:49,000
就他做了一个 Optional type 嘛其实

2507
01:37:50,000 --> 01:37:53,000
其实就是相当于 Lua 或者是 JavaScript 里面的

2508
01:37:54,000 --> 01:37:54,000
Or

2509
01:37:56,000 --> 01:37:56,000
Or

2510
01:37:56,000 --> 01:37:57,000
就是

2511
01:37:57,000 --> 01:37:58,000
写 Lua 也会有这样的

2512
01:37:59,000 --> 01:38:00,000
场景就是你会

2513
01:38:00,000 --> 01:38:03,000
不知道一个值是否为设定然后你要提供一个确诊值

2514
01:38:04,000 --> 01:38:05,000
然后 Lua 的写法就是

2515
01:38:05,000 --> 01:38:06,000
A or B

2516
01:38:07,000 --> 01:38:13,000
还不一样你那个 Or 的话他会对那个进行逻辑判断嘛但这也是非常奇怪一件事就是

2517
01:38:15,000 --> 01:38:18,000
你逻辑判断什么就是你达到那个值

2518
01:38:18,000 --> 01:38:23,000
A or B 他一定是前面 A 是为 False 的时候你才会执行 B 嘛对吧

2519
01:38:23,000 --> 01:38:24,000
然后得到 B 嘛

2520
01:38:24,000 --> 01:38:26,000
那么你怎么判断 A 为 False

2521
01:38:27,000 --> 01:38:28,000
A 为假呢

2522
01:38:28,000 --> 01:38:30,000
牵涉到一个那个叫什么

2523
01:38:30,000 --> 01:38:31,000
那个叫

2524
01:38:32,000 --> 01:38:38,000
这里有一个这个问题就是这个语言如果他的布尔运算符不只是

2525
01:38:38,000 --> 01:38:40,000
返回一个布尔类型的话

2526
01:38:41,000 --> 01:38:43,000
那这个就是可以这么滥用的

2527
01:38:43,000 --> 01:38:44,000
在

2528
01:38:44,000 --> 01:38:50,000
很多动态里面动态语言里面都是这样的他只要求前面那个值是一个 False 的值

2529
01:38:51,000 --> 01:38:51,000
False

2530
01:38:52,000 --> 01:38:53,000
False 就是 False 加 Y

2531
01:38:54,000 --> 01:38:56,000
False 就是类似于假的值他就可以

2532
01:38:57,000 --> 01:38:59,000
但其实这个是类型

2533
01:38:59,000 --> 01:39:01,000
不严谨的一种设计

2534
01:39:01,000 --> 01:39:04,000
基本上只有在弱类型的语言上可以用

2535
01:39:04,000 --> 01:39:04,000
好吧

2536
01:39:05,000 --> 01:39:06,000
不过

2537
01:39:06,000 --> 01:39:08,000
PHP 这种

2538
01:39:09,000 --> 01:39:16,000
这种叫什么呢这种这种语言设计的方式也是挺令人奇特的我们社区需要什么就加进去什么

2539
01:39:17,000 --> 01:39:17,000
完全不考虑

2540
01:39:18,000 --> 01:39:21,000
后果或者考虑这个统一性怎么样

2541
01:39:22,000 --> 01:39:28,000
我觉得这其实这就是我们这次要说的就是 PHP 的社区为什么会有今天这个问题

2542
01:39:28,000 --> 01:39:29,000
其实

2543
01:39:29,000 --> 01:39:33,000
最简单的原因就是 PHP 社区是一个没有

2544
01:39:33,000 --> 01:39:35,000
群龙无首

2545
01:39:36,000 --> 01:39:40,000
对他们缺乏一个像 Gouido 那样的所谓什么

2546
01:39:41,000 --> 01:39:44,000
Benevolent dictator for life

2547
01:39:44,000 --> 01:39:45,000
就是

2548
01:39:45,000 --> 01:39:46,000
对 for life

2549
01:39:47,000 --> 01:39:53,000
他们没有一个铁腕式的人物可以明确的说这个语言应该有一个什么样的明确的性格

2550
01:39:53,000 --> 01:39:57,000
很有趣的一点就是 PHP 开发者社区核心开发者社区

2551
01:39:58,000 --> 01:39:59,000
是否做新特性的

2552
01:39:59,000 --> 01:40:00,000
的时候他们是要投票的

2553
01:40:02,000 --> 01:40:07,000
就是你要做一个大的更改你需要获得三分之二的多数

2554
01:40:07,000 --> 01:40:09,000
才可以把这个大留感做

2555
01:40:09,000 --> 01:40:11,000
那就是 design by committee 吗

2556
01:40:12,000 --> 01:40:13,000
对

2557
01:40:13,000 --> 01:40:16,000
这个就导致那个现象就是很多平时

2558
01:40:16,000 --> 01:40:17,000
根本不 care 的人

2559
01:40:19,000 --> 01:40:19,000
你去

2560
01:40:19,000 --> 01:40:22,000
问他们投票的意见他们就会说过考做着干嘛

2561
01:40:22,000 --> 01:40:23,000
反不反

2562
01:40:24,000 --> 01:40:25,000
不做

2563
01:40:25,000 --> 01:40:26,000
然后就投反对票

2564
01:40:26,000 --> 01:40:29,000
很多比较新特性都是因为这些 erep

2565
01:40:29,000 --> 01:40:32,000
就没有拿到多数

2566
01:40:32,000 --> 01:40:35,000
然后就太死服中了

2567
01:40:35,000 --> 01:40:37,000
然后 2013 年的时候

2568
01:40:37,000 --> 01:40:38,000
有一个人就此写了一篇文章

2569
01:40:38,000 --> 01:40:41,000
题目也起得非常有趣

2570
01:40:41,000 --> 01:40:43,000
叫做 PHP 6

2571
01:40:43,000 --> 01:40:46,000
Pissing in the wind

2572
01:40:46,000 --> 01:40:50,000
逆风而尿

2573
01:40:50,000 --> 01:40:55,000
而且有意思的是

2574
01:40:55,000 --> 01:40:57,000
你在网上搜 PHP 6

2575
01:40:57,000 --> 01:41:00,000
如果语言设定是英语的话

2576
01:41:00,000 --> 01:41:02,000
这将是第一个结果

2577
01:41:02,000 --> 01:41:07,000
我觉得一个语言的混到今天

2578
01:41:07,000 --> 01:41:08,000
这一步也真是不容易

2579
01:41:08,000 --> 01:41:10,000
然后他提出一些观点

2580
01:41:10,000 --> 01:41:13,000
或者说他作为一个核心开发者

2581
01:41:13,000 --> 01:41:14,000
提出了一些洞见

2582
01:41:14,000 --> 01:41:19,000
就是说 PHP 核心开发者的社区

2583
01:41:19,000 --> 01:41:23,000
缺乏一种 clear vision

2584
01:41:23,000 --> 01:41:26,000
明确的眼界

2585
01:41:26,000 --> 01:41:29,000
所给这个语言导致的

2586
01:41:29,000 --> 01:41:33,000
所把语言带到了今天这个境里

2587
01:41:33,000 --> 01:41:34,000
其实都是

2588
01:41:34,000 --> 01:41:35,000
怎么说呢

2589
01:41:35,000 --> 01:41:35,000
咎由自取

2590
01:41:35,000 --> 01:41:37,000
然后他其中给了一个链接

2591
01:41:37,000 --> 01:41:41,000
就是他们 PHP core developer

2592
01:41:41,000 --> 01:41:43,000
内部的一个邮件列表里面的一些对话

2593
01:41:43,000 --> 01:41:47,000
首先这封邮件写的火气就非常大

2594
01:41:47,000 --> 01:41:51,000
然后他里面揭露一个问题

2595
01:41:51,000 --> 01:41:54,000
就是说连这个 PHP country 叫什么

2596
01:41:54,000 --> 01:41:54,000
Astmos

2597
01:41:54,000 --> 01:41:57,000
都没有一个明确的目标

2598
01:41:57,000 --> 01:41:59,000
就是 PHP 到底应该做成一个什么样的范式语言

2599
01:41:59,000 --> 01:42:02,000
对此有三种态度

2600
01:42:02,000 --> 01:42:04,000
然后一个是说我们 PHP 就应该做成 OO 的语言

2601
01:42:04,000 --> 01:42:06,000
就是面条都像的

2602
01:42:06,000 --> 01:42:08,000
然后另外一个就是我们应该明确的摒弃 OO

2603
01:42:08,000 --> 01:42:11,000
或者说提供一些 OO 的特性

2604
01:42:11,000 --> 01:42:14,000
但是语言本身应该是以 procedure 为主的

2605
01:42:14,000 --> 01:42:17,000
第三种就是说我们应该作为一个

2606
01:42:17,000 --> 01:42:18,000
做成像 CJ 那样的

2607
01:42:18,000 --> 01:42:20,000
就是一个什么范式都支持

2608
01:42:20,000 --> 01:42:22,000
但是这三个语言

2609
01:42:22,000 --> 01:42:24,000
走了

2610
01:42:24,000 --> 01:42:24,000
离此不远

2611
01:42:24,000 --> 01:42:26,000
做了个四部像出来

2612
01:42:26,000 --> 01:42:27,000
对

2613
01:42:27,000 --> 01:42:29,000
然后现在的现状基本上就是

2614
01:42:29,000 --> 01:42:31,000
每个人把自己想要的功能加进去

2615
01:42:31,000 --> 01:42:34,000
然后并且假设别人都愿意接受这个功能

2616
01:42:34,000 --> 01:42:37,000
才会导致社区进行这个样子

2617
01:42:37,000 --> 01:42:39,000
所以其实我有一个问题

2618
01:42:39,000 --> 01:42:43,000
就是 PHP 这个社区到底现在谁比较 powerful

2619
01:42:43,000 --> 01:42:44,000
能够说了算

2620
01:42:44,000 --> 01:42:45,000
没有

2621
01:42:45,000 --> 01:42:46,000
因为我觉得其实这件事情

2622
01:42:46,000 --> 01:42:51,000
Facebook 其实还蛮有这个发言权或影响力的

2623
01:42:51,000 --> 01:42:53,000
他们做的那个叫做什么来着

2624
01:42:53,000 --> 01:42:54,000
HHFM

2625
01:42:54,000 --> 01:42:54,000
然后

2626
01:42:54,000 --> 01:42:57,000
不是说性能屌渣天吗

2627
01:42:57,000 --> 01:43:00,000
然后他说我要这么干

2628
01:43:00,000 --> 01:43:03,000
我支持这个 ABCDE 这几个特性

2629
01:43:03,000 --> 01:43:04,000
我们觉得比较好

2630
01:43:04,000 --> 01:43:10,000
因为他们 Facebook 也是最大的商业的 PHP 的用户之一

2631
01:43:10,000 --> 01:43:12,000
就是真的还是至少如果不是最大

2632
01:43:12,000 --> 01:43:14,000
他至少是前 10 举个例子

2633
01:43:14,000 --> 01:43:17,000
他们对这个完全有足够的话语权去制定

2634
01:43:17,000 --> 01:43:19,000
就去给出这么一个 vision

2635
01:43:19,000 --> 01:43:24,000
应该有道理

2636
01:43:24,000 --> 01:43:24,000
但是

2637
01:43:24,000 --> 01:43:25,000
我也不知道

2638
01:43:25,000 --> 01:43:30,000
如果各位听众里面有在 PHP 核心开发者社区混的话

2639
01:43:30,000 --> 01:43:37,000
可以帮我们解释一下目前 PHP 的他们的 mentality 是怎么样的

2640
01:43:37,000 --> 01:43:40,000
那个 Zen 的现在还在吗

2641
01:43:40,000 --> 01:43:41,000
不知道

2642
01:43:41,000 --> 01:43:42,000
完全没感觉

2643
01:43:42,000 --> 01:43:45,000
反正没什么关系

2644
01:43:45,000 --> 01:43:48,000
就只能挺全好奇这个到底会怎么发展下去

2645
01:43:48,000 --> 01:43:53,000
所以如果你对八卦和开发人员怎么吵架

2646
01:43:53,000 --> 01:43:54,000
有兴趣的话

2647
01:43:54,000 --> 01:43:55,000
可以看看这两篇文章

2648
01:43:55,000 --> 01:44:00,000
就是一篇文章和这个一封邮件吧

2649
01:44:00,000 --> 01:44:02,000
应该说对还是挺有意思的

2650
01:44:04,000 --> 01:44:05,000
OK 好

2651
01:44:05,000 --> 01:44:08,000
那我们本期这是第几期

2652
01:44:08,000 --> 01:44:09,000
30 吧

2653
01:44:09,000 --> 01:44:10,000
哎

2654
01:44:10,000 --> 01:44:12,000
三十一来

2655
01:44:13,000 --> 01:44:15,000
咱们两个也是做了一年多了

2656
01:44:15,000 --> 01:44:18,000
渐渐 lost count

2657
01:44:20,000 --> 01:44:24,000
OK 感谢收听 IPM Podcast 网络旗下的 IT 技术主题娱乐节目

2658
01:44:24,000 --> 01:44:24,000
内容

2659
01:44:24,000 --> 01:44:25,000
我是笨蛋

2660
01:44:25,000 --> 01:44:26,000
chanting

2661
01:44:27,000 --> 01:44:27,000
ow

2662
01:44:28,000 --> 01:44:31,000
typark

2663
01:44:31,000 --> 01:44:34,000
parliament

2664
01:44:34,000 --> 01:44:37,000
acht

2665
01:44:37,000 --> 01:44:38,000
man

2666
01:44:38,000 --> 01:44:38,000
فرا

2667
01:44:38,000 --> 01:44:39,000
西

2668
01:44:39,000 --> 01:44:39,000
日

2669
01:44:40,000 --> 01:44:41,000
后

2670
01:44:42,000 --> 01:44:44,000
等等

2671
01:44:44,000 --> 01:44:45,000
来

2672
01:44:46,000 --> 01:44:48,000
小伙

2673
01:44:48,000 --> 01:44:49,000
C��悟

2674
01:44:49,000 --> 01:44:50,000
一

2675
01:44:51,000 --> 01:44:51,000
点

2676
01:44:52,000 --> 01:44:53,000
麦

2677
01:44:53,000 --> 01:44:54,000
J random

2678
01:44:54,000 --> 01:44:55,000
其他几档节目

2679
01:44:55,000 --> 01:44:56,000
爱听勿论

2680
01:44:56,000 --> 01:44:56,000
未知道

2681
01:44:56,000 --> 01:44:57,000
太一来了

2682
01:44:57,000 --> 01:44:58,000
流行通讯

2683
01:44:58,000 --> 01:44:59,000
high story

2684
01:44:59,000 --> 01:45:00,000
映影像

2685
01:45:00,000 --> 01:45:00,000
无次元

2686
01:45:00,000 --> 01:45:01,000
博物志

2687
01:45:01,000 --> 01:45:02,000
以及选美

2688
01:45:02,000 --> 01:45:04,000
我们下期节目再会

