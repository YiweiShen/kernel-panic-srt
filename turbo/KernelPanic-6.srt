1
00:00:00,000 --> 00:00:03,000
大家好欢迎收听第六期的内核恐慌

2
00:00:03,000 --> 00:00:04,000
我是瑞尔

3
00:00:04,000 --> 00:00:05,000
我是吴涛

4
00:00:05,000 --> 00:00:07,000
在今天节目开始前呢

5
00:00:07,000 --> 00:00:10,000
我们先去做一下上期的反馈吧

6
00:00:10,000 --> 00:00:11,000
好呀

7
00:00:11,000 --> 00:00:14,000
吴涛你又念错字了

8
00:00:14,000 --> 00:00:18,000
对

9
00:00:18,000 --> 00:00:22,000
反正上次我念了一个以食听众

10
00:00:22,000 --> 00:00:24,000
在这里向大家聚一恭

11
00:00:24,000 --> 00:00:25,000
各位听众对不起

12
00:00:25,000 --> 00:00:26,000
我不应该吃你们

13
00:00:26,000 --> 00:00:30,000
那个字念想

14
00:00:30,000 --> 00:00:32,000
就是左边一个乡村的乡

15
00:00:32,000 --> 00:00:33,000
右边一个食物的食

16
00:00:33,000 --> 00:00:36,000
这个字念以想听众

17
00:00:36,000 --> 00:00:39,000
就是以把什么东西供奉给听众吃

18
00:00:39,000 --> 00:00:42,000
而不是吃掉听众是吧

19
00:00:42,000 --> 00:00:43,000
你是螳螂吗

20
00:00:43,000 --> 00:00:47,000
螳螂只有在交配的时候

21
00:00:47,000 --> 00:00:53,000
其实这个事情我觉得也可以理解吧

22
00:00:53,000 --> 00:00:55,000
你说这个字如果让我来念

23
00:00:55,000 --> 00:00:56,000
我估计也会看

24
00:00:56,000 --> 00:00:58,000
你想那个左边那么小

25
00:00:58,000 --> 00:00:59,000
右边那么大

26
00:00:59,000 --> 00:01:00,000
应该念右边吧

27
00:01:00,000 --> 00:01:02,000
对呀

28
00:01:02,000 --> 00:01:04,000
而且就才念字念半边嘛

29
00:01:04,000 --> 00:01:07,000
对

30
00:01:07,000 --> 00:01:10,000
其实中文就是有这点不好啊

31
00:01:10,000 --> 00:01:11,000
就经常有这种

32
00:01:11,000 --> 00:01:14,000
所谓的什么规律嘛

33
00:01:14,000 --> 00:01:15,000
所以如果你不认识这个字

34
00:01:15,000 --> 00:01:17,000
你可以看它的偏旁不守啊

35
00:01:17,000 --> 00:01:18,000
说一般是什么

36
00:01:18,000 --> 00:01:19,000
一边行旁

37
00:01:19,000 --> 00:01:20,000
一个身旁

38
00:01:20,000 --> 00:01:21,000
对吧

39
00:01:21,000 --> 00:01:22,000
嗯

40
00:01:22,000 --> 00:01:22,000
现八

41
00:01:22,000 --> 00:01:23,000
对

42
00:01:23,000 --> 00:01:23,000
给你一个

43
00:01:23,000 --> 00:01:25,000
中文还是在

44
00:01:25,000 --> 00:01:27,000
我们现在身处在一个中文

45
00:01:27,000 --> 00:01:28,000
从象形文字

46
00:01:28,000 --> 00:01:30,000
象评言文字的过渡过程中

47
00:01:30,000 --> 00:01:33,000
当然这个过渡可能永远也不会实现了

48
00:01:33,000 --> 00:01:33,000
因为

49
00:01:33,000 --> 00:01:37,000
毕竟现在汉字已经是一种文化瑰宝

50
00:01:37,000 --> 00:01:38,000
它是不可能

51
00:01:38,000 --> 00:01:41,000
永远不可能实现假名化了

52
00:01:41,000 --> 00:01:45,000
所以你默默的是支持这件事情的是吧

53
00:01:45,000 --> 00:01:49,000
也没有吧

54
00:01:49,000 --> 00:01:49,000
就

55
00:01:49,000 --> 00:01:51,000
但拉丁话方案

56
00:01:51,000 --> 00:01:52,000
拉丁话

57
00:01:52,000 --> 00:01:54,000
汉字拉丁话那么激进的方案

58
00:01:54,000 --> 00:01:55,000
都

59
00:01:55,000 --> 00:01:58,000
也不是都没有实现

60
00:01:58,000 --> 00:01:58,000
就

61
00:01:58,000 --> 00:02:00,000
就让人

62
00:02:00,000 --> 00:02:02,000
让人觉得非常受不了了

63
00:02:02,000 --> 00:02:02,000
那

64
00:02:02,000 --> 00:02:03,000
我现在我觉得

65
00:02:03,000 --> 00:02:05,000
拉丁话在逻辑上已经实现了

66
00:02:05,000 --> 00:02:08,000
就在事实上已经成立了

67
00:02:08,000 --> 00:02:09,000
你说

68
00:02:09,000 --> 00:02:10,000
用评书法吧

69
00:02:10,000 --> 00:02:11,000
对啊

70
00:02:11,000 --> 00:02:13,000
就是经常会有那种

71
00:02:13,000 --> 00:02:16,000
就现在网络上一些用语不方便

72
00:02:16,000 --> 00:02:17,000
直接讲的时候都会在

73
00:02:17,000 --> 00:02:19,000
那个后面注一下这个拼音吗

74
00:02:19,000 --> 00:02:21,000
然后大家读一下都知道

75
00:02:21,000 --> 00:02:22,000
这个是什么意思

76
00:02:22,000 --> 00:02:23,000
对吧

77
00:02:23,000 --> 00:02:24,000
对

78
00:02:24,000 --> 00:02:25,000
而且

79
00:02:25,000 --> 00:02:26,000
对

80
00:02:26,000 --> 00:02:29,000
反正是越来越没有人写字了

81
00:02:29,000 --> 00:02:29,000
这是肯定

82
00:02:29,000 --> 00:02:30,000
对

83
00:02:30,000 --> 00:02:30,000
都在打

84
00:02:30,000 --> 00:02:31,000
但是我

85
00:02:31,000 --> 00:02:32,000
我还

86
00:02:32,000 --> 00:02:32,000
在

87
00:02:32,000 --> 00:02:35,000
07 年

88
00:02:35,000 --> 00:02:36,000
反正 iPhone 出现之前

89
00:02:36,000 --> 00:02:38,000
我还坚持用过

90
00:02:38,000 --> 00:02:40,000
诺加上面的笔画输入法

91
00:02:40,000 --> 00:02:42,000
我觉得至少这样可以让我

92
00:02:42,000 --> 00:02:43,000
是那个九宫格

93
00:02:43,000 --> 00:02:43,000
那个吗

94
00:02:43,000 --> 00:02:45,000
对

95
00:02:45,000 --> 00:02:46,000
九宫格的笔画输入法

96
00:02:46,000 --> 00:02:48,000
其实我一直觉得那个还蛮好的

97
00:02:48,000 --> 00:02:49,000
叫什么 T 9 吧

98
00:02:49,000 --> 00:02:49,000
是不是

99
00:02:49,000 --> 00:02:53,000
好像是叫 T 9

100
00:02:53,000 --> 00:02:54,000
T 9 是拼音吧

101
00:02:54,000 --> 00:02:54,000
不是吗

102
00:02:54,000 --> 00:02:55,000
是吗

103
00:02:55,000 --> 00:02:55,000
T 9 是拼音吗

104
00:02:55,000 --> 00:02:56,000
OK

105
00:02:56,000 --> 00:02:57,000
我怎么记得

106
00:02:57,000 --> 00:02:58,000
我不记得

107
00:02:58,000 --> 00:02:58,000
不确定

108
00:02:58,000 --> 00:02:59,000
但我记得那个输入法

109
00:02:59,000 --> 00:03:01,000
只要有五个件而已吧

110
00:03:01,000 --> 00:03:02,000
就横竖撇辣

111
00:03:02,000 --> 00:03:04,000
横竖撇辣

112
00:03:04,000 --> 00:03:04,000
第二

113
00:03:04,000 --> 00:03:06,000
就是撇

114
00:03:06,000 --> 00:03:08,000
就是右上到左下

115
00:03:08,000 --> 00:03:09,000
然后横

116
00:03:09,000 --> 00:03:10,000
然后竖

117
00:03:10,000 --> 00:03:10,000
然后

118
00:03:10,000 --> 00:03:12,000
我觉得那个输法真的挺好的

119
00:03:12,000 --> 00:03:13,000
对

120
00:03:13,000 --> 00:03:15,000
他解决了我很多的倒差笔问题

121
00:03:15,000 --> 00:03:16,000
比如说

122
00:03:16,000 --> 00:03:17,000
全部是倒差笔

123
00:03:17,000 --> 00:03:18,000
就是

124
00:03:18,000 --> 00:03:24,000
一个汉字的笔顺和官方规定的不一样

125
00:03:24,000 --> 00:03:26,000
然后这样我就打不出来

126
00:03:26,000 --> 00:03:27,000
比如说女人的女字吧

127
00:03:27,000 --> 00:03:27,000
好像

128
00:03:27,000 --> 00:03:28,000
对

129
00:03:28,000 --> 00:03:31,000
然后我十次有九次打不出来

130
00:03:31,000 --> 00:03:32,000
所以那个笔号什么

131
00:03:32,000 --> 00:03:34,000
应该是撇折再撇

132
00:03:34,000 --> 00:03:36,000
然后最后一痕是吧

133
00:03:36,000 --> 00:03:36,000
我现在又不记得

134
00:03:36,000 --> 00:03:38,000
有可能是先写后

135
00:03:38,000 --> 00:03:38,000
对

136
00:03:38,000 --> 00:03:39,000
反正

137
00:03:39,000 --> 00:03:40,000
对

138
00:03:40,000 --> 00:03:42,000
然后还有那个所有带走织旁的字

139
00:03:42,000 --> 00:03:44,000
我全都先写走织

140
00:03:44,000 --> 00:03:44,000
对

141
00:03:44,000 --> 00:03:46,000
不是这个合理啊

142
00:03:46,000 --> 00:03:49,000
你先把那个周围的那个框画出来

143
00:03:49,000 --> 00:03:50,000
然后在那里面描那个小的

144
00:03:50,000 --> 00:03:52,000
嗯

145
00:03:52,000 --> 00:03:53,000
我也是这么觉得

146
00:03:53,000 --> 00:03:54,000
但是

147
00:03:54,000 --> 00:03:56,000
但是据说

148
00:03:56,000 --> 00:03:57,000
如果先写走织的话

149
00:03:57,000 --> 00:03:58,000
整个字很难看

150
00:03:58,000 --> 00:03:58,000
就是

151
00:03:58,000 --> 00:04:00,000
因为那个走织

152
00:04:00,000 --> 00:04:01,000
它只是一个配件

153
00:04:01,000 --> 00:04:01,000
然后你

154
00:04:01,000 --> 00:04:03,000
你你先写它

155
00:04:03,000 --> 00:04:04,000
就很容易让

156
00:04:04,000 --> 00:04:05,000
接下来写的那东西

157
00:04:05,000 --> 00:04:07,000
很难放在正确的位置

158
00:04:07,000 --> 00:04:11,000
但你知道有些小学生写作文的时候

159
00:04:11,000 --> 00:04:11,000
写字的时候

160
00:04:11,000 --> 00:04:12,000
他不是写的一个

161
00:04:12,000 --> 00:04:13,000
那个小小的那个

162
00:04:13,000 --> 00:04:14,000
有框的那种本

163
00:04:14,000 --> 00:04:15,000
就上面吗

164
00:04:15,000 --> 00:04:18,000
然后如果你先写了中间

165
00:04:18,000 --> 00:04:20,000
那就旁边那个大坨的

166
00:04:20,000 --> 00:04:21,000
然后空间不够了怎么办

167
00:04:21,000 --> 00:04:24,000
所以从小就要练

168
00:04:24,000 --> 00:04:25,000
练这个架构

169
00:04:25,000 --> 00:04:26,000
不过这个

170
00:04:26,000 --> 00:04:28,000
这个就是笔画书法

171
00:04:28,000 --> 00:04:28,000
真的挺好的

172
00:04:28,000 --> 00:04:30,000
就是我有一个例子

173
00:04:30,000 --> 00:04:32,000
就我给我爸妈

174
00:04:32,000 --> 00:04:33,000
那个时候教他们用这个

175
00:04:33,000 --> 00:04:35,000
电脑数字

176
00:04:35,000 --> 00:04:38,000
然后五笔和平音都尝试过

177
00:04:38,000 --> 00:04:39,000
都对了

178
00:04:39,000 --> 00:04:40,000
他们那代人来说都太难了

179
00:04:40,000 --> 00:04:42,000
但是他们在手机

180
00:04:42,000 --> 00:04:43,000
那个就不是现在的手机

181
00:04:43,000 --> 00:04:45,000
在那个时候的手机上

182
00:04:45,000 --> 00:04:45,000
就是还是键盘的时候

183
00:04:45,000 --> 00:04:47,000
用这个

184
00:04:47,000 --> 00:04:48,000
就是横竖皮拉

185
00:04:48,000 --> 00:04:49,000
这么一笔的写

186
00:04:49,000 --> 00:04:49,000
其实对他们来讲

187
00:04:49,000 --> 00:04:50,000
就跟

188
00:04:50,000 --> 00:04:51,000
那个

189
00:04:51,000 --> 00:04:53,000
教写字一样

190
00:04:53,000 --> 00:04:53,000
就说你记着

191
00:04:53,000 --> 00:04:54,000
你先打横竖皮拉

192
00:04:54,000 --> 00:04:56,000
你就怎么写那个字

193
00:04:56,000 --> 00:04:57,000
你就照着那个按照

194
00:04:57,000 --> 00:04:58,000
就只用记那五个垫就可以了

195
00:04:58,000 --> 00:04:59,000
然后加上这个

196
00:04:59,000 --> 00:05:01,000
这个笔顺纠错的

197
00:05:01,000 --> 00:05:02,000
这种功能的话

198
00:05:02,000 --> 00:05:04,000
就大部分场合

199
00:05:04,000 --> 00:05:05,000
还是能把那个

200
00:05:05,000 --> 00:05:06,000
中文字写出来的

201
00:05:06,000 --> 00:05:07,000
嗯

202
00:05:07,000 --> 00:05:08,000
OK

203
00:05:08,000 --> 00:05:09,000
下一条

204
00:05:09,000 --> 00:05:09,000
下一条就是什么玩意儿

205
00:05:09,000 --> 00:05:12,000
对上次

206
00:05:12,000 --> 00:05:14,000
对说到德语

207
00:05:14,000 --> 00:05:16,000
就是上次我念错了一个德语单词

208
00:05:16,000 --> 00:05:17,000
就是当我提到

209
00:05:17,000 --> 00:05:19,000
F 1 写

210
00:05:19,000 --> 00:05:20,000
就是那个

211
00:05:20,000 --> 00:05:23,000
在德国的车牌上面

212
00:05:23,000 --> 00:05:26,000
所使用的那一种字体的时候

213
00:05:26,000 --> 00:05:27,000
车牌字体

214
00:05:27,000 --> 00:05:27,000
OK

215
00:05:27,000 --> 00:05:28,000
对

216
00:05:28,000 --> 00:05:30,000
他的正确的名字叫做

217
00:05:30,000 --> 00:05:30,000
Fashions

218
00:05:30,000 --> 00:05:31,000
Fashions

219
00:05:31,000 --> 00:05:32,000
Eschwein der Schrift

220
00:05:32,000 --> 00:05:33,000
嗯

221
00:05:33,000 --> 00:05:35,000
然后我上次

222
00:05:35,000 --> 00:05:36,000
我上次念成了

223
00:05:36,000 --> 00:05:36,000
Fashions

224
00:05:36,000 --> 00:05:39,000
Eschwein der Schrift

225
00:05:39,000 --> 00:05:40,000
等一下我很好奇

226
00:05:40,000 --> 00:05:40,000
谁

227
00:05:40,000 --> 00:05:41,000
谁听出来你念错

228
00:05:41,000 --> 00:05:42,000
当然是我女朋友

229
00:05:42,000 --> 00:05:43,000
啊

230
00:05:43,000 --> 00:05:45,000
原来还有一个

231
00:05:45,000 --> 00:05:46,000
铁杆粉丝

232
00:05:46,000 --> 00:05:47,000
那可不

233
00:05:47,000 --> 00:05:48,000
他已经

234
00:05:48,000 --> 00:05:49,000
开始给

235
00:05:49,000 --> 00:05:50,000
贵节目捐钱了

236
00:05:50,000 --> 00:05:51,000
嗯

237
00:05:51,000 --> 00:05:52,000
你是说

238
00:05:52,000 --> 00:05:52,000
爱记公论吗

239
00:05:52,000 --> 00:05:53,000
对啊

240
00:05:53,000 --> 00:05:54,000
OK

241
00:05:54,000 --> 00:05:55,000
不是给

242
00:05:55,000 --> 00:05:56,000
B 节目捐钱

243
00:05:56,000 --> 00:05:59,000
不过 B 节目也有很多

244
00:05:59,000 --> 00:06:00,000
听众要求说来信

245
00:06:00,000 --> 00:06:02,000
纷纷来信说

246
00:06:02,000 --> 00:06:03,000
要给我们捐钱

247
00:06:03,000 --> 00:06:05,000
拿钱砸砸瘾我吗

248
00:06:05,000 --> 00:06:06,000
真的假的

249
00:06:06,000 --> 00:06:06,000
我才不相信

250
00:06:06,000 --> 00:06:08,000
真的真的真的

251
00:06:08,000 --> 00:06:08,000
不开玩笑

252
00:06:08,000 --> 00:06:11,000
那我们应该怎样

253
00:06:11,000 --> 00:06:11,000
怎样

254
00:06:11,000 --> 00:06:13,000
让我们的

255
00:06:13,000 --> 00:06:14,000
这个捐款页面

256
00:06:14,000 --> 00:06:16,000
显得更加 geek 一点呢

257
00:06:16,000 --> 00:06:18,000
你看我的这个捐款页面

258
00:06:18,000 --> 00:06:18,000
都做好了

259
00:06:18,000 --> 00:06:21,000
就等你大笔一挥同意

260
00:06:21,000 --> 00:06:23,000
好吧

261
00:06:23,000 --> 00:06:24,000
我缺个麦克风

262
00:06:24,000 --> 00:06:25,000
也许可以

263
00:06:25,000 --> 00:06:27,000
各位给我挫点经费

264
00:06:27,000 --> 00:06:28,000
搞一个好点的麦克风

265
00:06:28,000 --> 00:06:30,000
这样大家可以听到我

266
00:06:30,000 --> 00:06:33,000
更加清透的嗓音

267
00:06:33,000 --> 00:06:33,000
对

268
00:06:33,000 --> 00:06:34,000
更加丰富

269
00:06:34,000 --> 00:06:36,000
更加有层次感的声音

270
00:06:36,000 --> 00:06:38,000
有层次感的声音

271
00:06:38,000 --> 00:06:38,000
不过

272
00:06:38,000 --> 00:06:39,000
不过其实

273
00:06:39,000 --> 00:06:40,000
现在有很多人

274
00:06:40,000 --> 00:06:41,000
听不出来

275
00:06:41,000 --> 00:06:42,000
你是用的那个

276
00:06:42,000 --> 00:06:43,000
麦克的内置麦克风

277
00:06:43,000 --> 00:06:44,000
在录

278
00:06:44,000 --> 00:06:46,000
因为内置麦克风

279
00:06:46,000 --> 00:06:47,000
据说效果非常好

280
00:06:47,000 --> 00:06:48,000
对

281
00:06:48,000 --> 00:06:49,000
但是离这个

282
00:06:49,000 --> 00:06:51,000
一个专用的麦克风

283
00:06:51,000 --> 00:06:53,000
还是有比较明显的差别

284
00:06:53,000 --> 00:06:53,000
嗯

285
00:06:53,000 --> 00:06:54,000
对

286
00:06:54,000 --> 00:06:57,000
我在那个 instagram 上看到了你用的麦克风

287
00:06:57,000 --> 00:06:59,000
感觉好像蛮专业的

288
00:06:59,000 --> 00:07:01,000
我那个也是一个入门级的而已

289
00:07:01,000 --> 00:07:01,000
嗯

290
00:07:01,000 --> 00:07:02,000
嗯

291
00:07:02,000 --> 00:07:04,000
可以给买给你

292
00:07:04,000 --> 00:07:06,000
如果我们这个节目也开始收钱

293
00:07:06,000 --> 00:07:07,000
嗯

294
00:07:07,000 --> 00:07:08,000
打银号

295
00:07:08,000 --> 00:07:09,000
嗯

296
00:07:09,000 --> 00:07:10,000
我们拿到的钱

297
00:07:10,000 --> 00:07:12,000
第一件事就是先给你买一套

298
00:07:12,000 --> 00:07:13,000
这个好的录音

299
00:07:13,000 --> 00:07:14,000
好的这个设备

300
00:07:14,000 --> 00:07:15,000
耶

301
00:07:15,000 --> 00:07:16,000
不过

302
00:07:16,000 --> 00:07:17,000
耶

303
00:07:17,000 --> 00:07:19,000
现在我们就看

304
00:07:19,000 --> 00:07:20,000
到底会有多少给我们钱

305
00:07:20,000 --> 00:07:21,000
好不好

306
00:07:21,000 --> 00:07:23,000
对

307
00:07:23,000 --> 00:07:24,000
呃

308
00:07:24,000 --> 00:07:27,000
然后这不是我唯一念出的德语词

309
00:07:27,000 --> 00:07:27,000
呃

310
00:07:27,000 --> 00:07:29,000
我还念出了另外一个

311
00:07:29,000 --> 00:07:30,000
叫做

312
00:07:30,000 --> 00:07:34,000
Deutsche Institut für Normen

313
00:07:34,000 --> 00:07:35,000
我把它念成了

314
00:07:35,000 --> 00:07:36,000
Deutsche Institut für Normen

315
00:07:36,000 --> 00:07:41,000
就是我把 Institut 这个词的词性搞错了

316
00:07:41,000 --> 00:07:41,000
嗯

317
00:07:41,000 --> 00:07:44,000
你要先解释一下什么是词性

318
00:07:44,000 --> 00:07:45,000
因为这个不是

319
00:07:45,000 --> 00:07:47,000
比如英语里面就没有这个概念

320
00:07:47,000 --> 00:07:48,000
所以很多人不知道是什么东西

321
00:07:48,000 --> 00:07:50,000
呃

322
00:07:50,000 --> 00:07:51,000
好吧

323
00:07:51,000 --> 00:07:54,000
反正德语作为一种非常繁琐的语言

324
00:07:54,000 --> 00:07:55,000
听起来像

325
00:07:55,000 --> 00:07:55,000
呃

326
00:07:55,000 --> 00:07:59,000
某种机器人掉到下水道里面发出的

327
00:07:59,000 --> 00:08:01,000
声音的语言

328
00:08:01,000 --> 00:08:02,000
还有非常多奇怪的地方

329
00:08:02,000 --> 00:08:03,000
比如说

330
00:08:03,000 --> 00:08:04,000
其中之一就是

331
00:08:04,000 --> 00:08:04,000
呃

332
00:08:04,000 --> 00:08:06,000
所有的名词要分成三类

333
00:08:06,000 --> 00:08:07,000
呃

334
00:08:07,000 --> 00:08:07,000
阴性

335
00:08:07,000 --> 00:08:08,000
中性

336
00:08:08,000 --> 00:08:08,000
和阳性

337
00:08:08,000 --> 00:08:10,000
如果你学过法语的话

338
00:08:10,000 --> 00:08:11,000
你知道阴性和阳性

339
00:08:11,000 --> 00:08:13,000
但是就像拉丁语一样

340
00:08:13,000 --> 00:08:13,000
呃

341
00:08:13,000 --> 00:08:15,000
德语还有中性这个东西

342
00:08:15,000 --> 00:08:16,000
呃

343
00:08:16,000 --> 00:08:17,000
阳性叫做

344
00:08:17,000 --> 00:08:18,000
阳性的第一个

345
00:08:18,000 --> 00:08:22,000
就是阳性的名词的呃

346
00:08:22,000 --> 00:08:24,000
单数的呃

347
00:08:24,000 --> 00:08:28,000
主格就有一个贯词叫做

348
00:08:28,000 --> 00:08:28,000
dare

349
00:08:28,000 --> 00:08:30,000
然后它相当于英语的 d

350
00:08:30,000 --> 00:08:35,000
然后阴性的名词的贯词是 d

351
00:08:35,000 --> 00:08:38,000
然后它也相当于英语的 d

352
00:08:38,000 --> 00:08:41,000
然后中性的名词的贯词是 das

353
00:08:41,000 --> 00:08:43,000
它也相当于英语的 d

354
00:08:43,000 --> 00:08:45,000
就是英语只有一个 d

355
00:08:45,000 --> 00:08:47,000
然后德语有 daddy das

356
00:08:47,000 --> 00:08:48,000
daddy das

357
00:08:48,000 --> 00:08:49,000
daddy das

358
00:08:49,000 --> 00:08:50,000
这是所有的

359
00:08:50,000 --> 00:08:53,000
这个可能听众朋友们在国内见的最多

360
00:08:53,000 --> 00:08:55,000
就是那个大众的广告

361
00:08:55,000 --> 00:08:56,000
das auto

362
00:08:56,000 --> 00:08:58,000
das auto

363
00:08:58,000 --> 00:08:58,000
对

364
00:08:58,000 --> 00:09:01,000
然后就是

365
00:09:01,000 --> 00:09:02,000
就翻译成用语

366
00:09:02,000 --> 00:09:04,000
the car 的意思

367
00:09:04,000 --> 00:09:05,000
the car

368
00:09:05,000 --> 00:09:05,000
yes

369
00:09:05,000 --> 00:09:06,000
但是

370
00:09:06,000 --> 00:09:06,000
但是 auto

371
00:09:06,000 --> 00:09:08,000
这个东西是

372
00:09:08,000 --> 00:09:08,000
呃

373
00:09:08,000 --> 00:09:12,000
automobile 的缩写

374
00:09:12,000 --> 00:09:13,000
所以它是中性

375
00:09:13,000 --> 00:09:14,000
嗯

376
00:09:14,000 --> 00:09:15,000
somehow someway

377
00:09:15,000 --> 00:09:15,000
对

378
00:09:15,000 --> 00:09:16,000
所以是

379
00:09:16,000 --> 00:09:17,000
das auto

380
00:09:17,000 --> 00:09:18,000
das auto

381
00:09:18,000 --> 00:09:19,000
das photo

382
00:09:19,000 --> 00:09:20,000
对

383
00:09:20,000 --> 00:09:21,000
auto 和 photo

384
00:09:21,000 --> 00:09:22,000
photo 就是 photo

385
00:09:22,000 --> 00:09:24,000
photo 和 auto 都是中性

386
00:09:24,000 --> 00:09:27,000
但是也有很多不合理的地方

387
00:09:27,000 --> 00:09:28,000
比如说

388
00:09:28,000 --> 00:09:29,000
太阳吧

389
00:09:29,000 --> 00:09:31,000
它怎么可能会是阴性的呢

390
00:09:31,000 --> 00:09:31,000
结果在德语里面

391
00:09:31,000 --> 00:09:32,000
它真的是阴性的

392
00:09:32,000 --> 00:09:34,000
对

393
00:09:34,000 --> 00:09:34,000
德语里面是阴性的

394
00:09:34,000 --> 00:09:36,000
月亮是阳性的

395
00:09:36,000 --> 00:09:36,000
对

396
00:09:36,000 --> 00:09:38,000
当然也有原因的

397
00:09:38,000 --> 00:09:41,000
因为在古日尔曼神话里面

398
00:09:41,000 --> 00:09:43,000
太阳是个女神

399
00:09:43,000 --> 00:09:44,000
就

400
00:09:44,000 --> 00:09:46,000
月亮是个男神

401
00:09:46,000 --> 00:09:47,000
月亮是个男神

402
00:09:47,000 --> 00:09:50,000
就是跟那个希腊神话正好相反

403
00:09:50,000 --> 00:09:50,000
对

404
00:09:50,000 --> 00:09:54,000
它是一种那个比较古老的神话

405
00:09:54,000 --> 00:09:58,000
或者说宗教仪式的严存

406
00:09:58,000 --> 00:09:59,000
可以这么理解

407
00:09:59,000 --> 00:10:01,000
但是这跟现在

408
00:10:01,000 --> 00:10:02,000
比如说中国的

409
00:10:02,000 --> 00:10:04,000
就正常人的一个想法

410
00:10:04,000 --> 00:10:06,000
好像就不太一样

411
00:10:06,000 --> 00:10:07,000
对

412
00:10:07,000 --> 00:10:10,000
中国阳这个东西就默认是

413
00:10:10,000 --> 00:10:11,000
太阳

414
00:10:11,000 --> 00:10:13,000
阳这个东西就是太阳

415
00:10:13,000 --> 00:10:14,000
但

416
00:10:14,000 --> 00:10:14,000
对啊

417
00:10:14,000 --> 00:10:15,000
阴就是月亮

418
00:10:15,000 --> 00:10:17,000
因为字里面就有那个月亮

419
00:10:17,000 --> 00:10:17,000
在阴

420
00:10:17,000 --> 00:10:18,000
在德语里面

421
00:10:18,000 --> 00:10:19,000
Masculin 这个

422
00:10:19,000 --> 00:10:20,000
这个

423
00:10:20,000 --> 00:10:23,000
这个描述的正确翻译方法是雄性

424
00:10:23,000 --> 00:10:24,000
就是他们认为太阳是

425
00:10:24,000 --> 00:10:26,000
太阳是阴性的

426
00:10:26,000 --> 00:10:28,000
月亮是雄性的

427
00:10:28,000 --> 00:10:30,000
就太阳是雌性的

428
00:10:30,000 --> 00:10:31,000
月亮是雄性的

429
00:10:31,000 --> 00:10:33,000
那三号也没

430
00:10:33,000 --> 00:10:35,000
有也能做出一点意义来

431
00:10:35,000 --> 00:10:36,000
但对

432
00:10:36,000 --> 00:10:37,000
但还是比较

433
00:10:37,000 --> 00:10:39,000
奇怪的是

434
00:10:39,000 --> 00:10:39,000
对

435
00:10:39,000 --> 00:10:40,000
关键是

436
00:10:40,000 --> 00:10:41,000
我觉得德语这个分

437
00:10:41,000 --> 00:10:41,000
这个三性

438
00:10:41,000 --> 00:10:44,000
完全任何一点用处也没有

439
00:10:44,000 --> 00:10:45,000
有没有什么实际的用处

440
00:10:45,000 --> 00:10:46,000
我自己自己也想不出来

441
00:10:46,000 --> 00:10:47,000
当时学的时候就很痛苦

442
00:10:47,000 --> 00:10:48,000
所有的

443
00:10:48,000 --> 00:10:50,000
大家如果背英文单词

444
00:10:50,000 --> 00:10:51,000
要背

445
00:10:51,000 --> 00:10:52,000
就是名词的话

446
00:10:52,000 --> 00:10:53,000
你得记一个单负数

447
00:10:53,000 --> 00:10:53,000
对吧

448
00:10:53,000 --> 00:10:54,000
就完了

449
00:10:54,000 --> 00:10:55,000
然后有些可能特别的什么

450
00:10:55,000 --> 00:10:56,000
呃

451
00:10:56,000 --> 00:10:57,000
单负同行啊

452
00:10:57,000 --> 00:10:58,000
或者是什么特殊的

453
00:10:58,000 --> 00:10:59,000
呃

454
00:10:59,000 --> 00:10:59,000
单负同行有什么

455
00:10:59,000 --> 00:11:00,000
呃

456
00:11:00,000 --> 00:11:03,000
people 作为一个种族来讲

457
00:11:03,000 --> 00:11:03,000
对吧

458
00:11:03,000 --> 00:11:04,000
有同行

459
00:11:04,000 --> 00:11:04,000
单负同行

460
00:11:04,000 --> 00:11:04,000
对

461
00:11:04,000 --> 00:11:07,000
然后有些特殊的一个

462
00:11:07,000 --> 00:11:08,000
比如说我们常讲的数据

463
00:11:08,000 --> 00:11:09,000
data

464
00:11:09,000 --> 00:11:11,000
那其实是一个负数

465
00:11:11,000 --> 00:11:12,000
但是它的

466
00:11:12,000 --> 00:11:12,000
对

467
00:11:12,000 --> 00:11:13,000
大家同

468
00:11:13,000 --> 00:11:13,000
对

469
00:11:13,000 --> 00:11:14,000
在德语里面

470
00:11:14,000 --> 00:11:17,000
这个词仍旧在使用其

471
00:11:17,000 --> 00:11:19,000
拉丁语单数形式作为单数

472
00:11:19,000 --> 00:11:21,000
就是你说一个数据的时候

473
00:11:21,000 --> 00:11:22,000
你必须说 andatum

474
00:11:22,000 --> 00:11:23,000
而你不能说

475
00:11:23,000 --> 00:11:24,000
呃

476
00:11:24,000 --> 00:11:25,000
data

477
00:11:25,000 --> 00:11:26,000
这种用法是错的

478
00:11:26,000 --> 00:11:27,000
对

479
00:11:27,000 --> 00:11:28,000
在英语里面已经变成

480
00:11:28,000 --> 00:11:28,000
对

481
00:11:28,000 --> 00:11:30,000
现在英语里面已经就

482
00:11:30,000 --> 00:11:32,000
data 已经变成一个不可数的了

483
00:11:32,000 --> 00:11:33,000
然后是就

484
00:11:33,000 --> 00:11:34,000
就没有复数形式

485
00:11:34,000 --> 00:11:35,000
然后

486
00:11:35,000 --> 00:11:37,000
但是如果你是考古的话

487
00:11:37,000 --> 00:11:37,000
也发现

488
00:11:37,000 --> 00:11:37,000
哎

489
00:11:37,000 --> 00:11:38,000
还有一个 datum

490
00:11:38,000 --> 00:11:39,000
d-a-t-u-m

491
00:11:39,000 --> 00:11:41,000
这个单数的形式

492
00:11:41,000 --> 00:11:42,000
但是现在就只要在

493
00:11:42,000 --> 00:11:44,000
现代的文献里面

494
00:11:44,000 --> 00:11:45,000
基本上是看不到这个说法了

495
00:11:45,000 --> 00:11:47,000
当然还有一些更加诡异的

496
00:11:47,000 --> 00:11:48,000
呃

497
00:11:48,000 --> 00:11:49,000
就是单复数

498
00:11:49,000 --> 00:11:52,000
你完全看不出他们之间有什么区别的东西

499
00:11:52,000 --> 00:11:52,000
对

500
00:11:52,000 --> 00:11:54,000
我记得前一阵子

501
00:11:54,000 --> 00:11:56,000
丰田

502
00:11:56,000 --> 00:11:58,000
有辆日本车叫叫什么叫什么

503
00:11:58,000 --> 00:11:58,000
Prius

504
00:11:58,000 --> 00:11:59,000
对

505
00:11:59,000 --> 00:11:59,000
这个就

506
00:11:59,000 --> 00:12:00,000
P

507
00:12:00,000 --> 00:12:02,000
P-R-I-U-S

508
00:12:02,000 --> 00:12:04,000
然后它的复数形式叫做 Pri

509
00:12:04,000 --> 00:12:05,000
Pri

510
00:12:05,000 --> 00:12:05,000
对

511
00:12:05,000 --> 00:12:07,000
是 P-R-I-I

512
00:12:07,000 --> 00:12:08,000
两个 I

513
00:12:08,000 --> 00:12:10,000
就专门说这是一个拉铃语词

514
00:12:10,000 --> 00:12:11,000
所以它的复数应该叫 I

515
00:12:11,000 --> 00:12:12,000
What the hell

516
00:12:12,000 --> 00:12:14,000
对

517
00:12:14,000 --> 00:12:16,000
就就英文里面就有这种很奇怪的事情

518
00:12:16,000 --> 00:12:18,000
但是你想想都还能够接受

519
00:12:18,000 --> 00:12:20,000
起码还能知道说这个是为了区别

520
00:12:20,000 --> 00:12:21,000
一个和多个

521
00:12:21,000 --> 00:12:23,000
但虽然我不知道一何在

522
00:12:23,000 --> 00:12:24,000
嗯

523
00:12:24,000 --> 00:12:25,000
然后还有就是

524
00:12:25,000 --> 00:12:26,000
但是德语里面的名词

525
00:12:26,000 --> 00:12:28,000
它还除了要分单复数之外

526
00:12:28,000 --> 00:12:31,000
它还要分三个性别

527
00:12:31,000 --> 00:12:32,000
然后这三个性别

528
00:12:32,000 --> 00:12:34,000
totally make no sense

529
00:12:34,000 --> 00:12:34,000
对

530
00:12:34,000 --> 00:12:36,000
呃

531
00:12:36,000 --> 00:12:39,000
当然可能我觉得每种语言都有些复杂度吧

532
00:12:39,000 --> 00:12:40,000
比如说中文的复杂度就在

533
00:12:40,000 --> 00:12:41,000
它的写里面

534
00:12:41,000 --> 00:12:43,000
然后它的书写是非常复杂的

535
00:12:43,000 --> 00:12:44,000
语法简单的要词

536
00:12:44,000 --> 00:12:47,000
但是书写非常非常复杂

537
00:12:47,000 --> 00:12:47,000
对

538
00:12:47,000 --> 00:12:49,000
其实从这个角度上中文还是蛮不错的

539
00:12:49,000 --> 00:12:52,000
就是不分单复数对吧

540
00:12:52,000 --> 00:12:52,000
对

541
00:12:52,000 --> 00:12:53,000
不分姓数格

542
00:12:53,000 --> 00:12:55,000
这是非常好的一点

543
00:12:55,000 --> 00:12:56,000
对对

544
00:12:56,000 --> 00:12:59,000
唯一一个要分那个

545
00:12:59,000 --> 00:13:00,000
就是中文有一个不太爽

546
00:13:00,000 --> 00:13:01,000
就是量词太多

547
00:13:01,000 --> 00:13:01,000
又没什么用

548
00:13:01,000 --> 00:13:02,000
好像

549
00:13:02,000 --> 00:13:03,000
对对于外国人来说

550
00:13:03,000 --> 00:13:06,000
最大的困扰之一就是量词了

551
00:13:06,000 --> 00:13:07,000
你不像习语

552
00:13:07,000 --> 00:13:09,000
习语这些东西你不会也都罢了

553
00:13:09,000 --> 00:13:11,000
量词你不会的话

554
00:13:11,000 --> 00:13:13,000
就很容易会说错话的

555
00:13:13,000 --> 00:13:14,000
对对

556
00:13:14,000 --> 00:13:18,000
而且量词其实也没有太大的实际作用

557
00:13:18,000 --> 00:13:19,000
在我看来

558
00:13:19,000 --> 00:13:20,000
对

559
00:13:20,000 --> 00:13:24,000
它除了对于一些没有固定形状的东西

560
00:13:24,000 --> 00:13:26,000
有一些意义的

561
00:13:26,000 --> 00:13:28,000
比如说英语里面也会说一瓶水

562
00:13:28,000 --> 00:13:29,000
一杯咖啡

563
00:13:29,000 --> 00:13:30,000
中文

564
00:13:30,000 --> 00:13:31,000
对

565
00:13:31,000 --> 00:13:33,000
但是除此之外

566
00:13:33,000 --> 00:13:35,000
好像为什么一定要说一匹马呢

567
00:13:35,000 --> 00:13:36,000
不能说一个马

568
00:13:36,000 --> 00:13:36,000
对对

569
00:13:36,000 --> 00:13:37,000
马一个

570
00:13:37,000 --> 00:13:40,000
不过但是在有一些方言里面

571
00:13:40,000 --> 00:13:41,000
就是在方言的口语里面

572
00:13:41,000 --> 00:13:44,000
量词已经被很多情况下被审略掉了

573
00:13:44,000 --> 00:13:46,000
就是比如说最简单的例子吧

574
00:13:46,000 --> 00:13:47,000
就我们俩人

575
00:13:47,000 --> 00:13:49,000
我们不说我们两个人对吧

576
00:13:49,000 --> 00:13:51,000
我们俩人在这里扯淡

577
00:13:51,000 --> 00:13:52,000
还有那个谁

578
00:13:52,000 --> 00:13:54,000
对面过来俩狗

579
00:13:54,000 --> 00:13:59,000
对就有时候还是可以省略的

580
00:13:59,000 --> 00:14:00,000
然后我一直在想

581
00:14:00,000 --> 00:14:03,000
作为一个有性格一点的这个尝试

582
00:14:03,000 --> 00:14:05,000
你可以以后都不说量词

583
00:14:05,000 --> 00:14:06,000
看会有什么效果

584
00:14:06,000 --> 00:14:07,000
老板

585
00:14:07,000 --> 00:14:09,000
给我俩苹果

586
00:14:09,000 --> 00:14:10,000
这以后呢

587
00:14:10,000 --> 00:14:10,000
我没有注意

588
00:14:10,000 --> 00:14:12,000
老板上俩面

589
00:14:12,000 --> 00:14:14,000
对上俩面

590
00:14:14,000 --> 00:14:17,000
这也不错

591
00:14:17,000 --> 00:14:20,000
老板来舞车

592
00:14:20,000 --> 00:14:24,000
对这种事情就比较诡异了

593
00:14:24,000 --> 00:14:25,000
但是可以试一下

594
00:14:25,000 --> 00:14:27,000
可以试一下

595
00:14:27,000 --> 00:14:27,000
下一条反馈

596
00:14:27,000 --> 00:14:28,000
是

597
00:14:28,000 --> 00:14:29,000
也是我的

598
00:14:29,000 --> 00:14:33,000
就是我上次说到伦敦的交通字体

599
00:14:33,000 --> 00:14:35,000
我不确定是 transport

600
00:14:35,000 --> 00:14:39,000
还是 underground 的字体里面

601
00:14:39,000 --> 00:14:41,000
小写字母

602
00:14:41,000 --> 00:14:42,000
RA 的上面的那一点

603
00:14:42,000 --> 00:14:44,000
是个正方形的话

604
00:14:44,000 --> 00:14:45,000
我说旋转 90 度

605
00:14:45,000 --> 00:14:46,000
它是个灵性

606
00:14:46,000 --> 00:14:48,000
但实际上正方形旋转 90 度

607
00:14:48,000 --> 00:14:49,000
还是个正方形

608
00:14:49,000 --> 00:14:51,000
你玩我们呢

609
00:14:51,000 --> 00:14:54,000
俄罗斯方块

610
00:14:54,000 --> 00:14:55,000
俄罗斯方块

611
00:14:55,000 --> 00:14:57,000
里面正方形

612
00:14:57,000 --> 00:14:58,000
怎么旋转

613
00:14:58,000 --> 00:14:59,000
都是那样

614
00:14:59,000 --> 00:14:59,000
没有用

615
00:14:59,000 --> 00:15:01,000
你说他写那个

616
00:15:01,000 --> 00:15:03,000
写那个正方形旋转的那个函数

617
00:15:03,000 --> 00:15:04,000
会

618
00:15:04,000 --> 00:15:05,000
该不会直接就 return

619
00:15:05,000 --> 00:15:06,000
no up

620
00:15:06,000 --> 00:15:07,000
对啊

621
00:15:07,000 --> 00:15:08,000
应该是

622
00:15:08,000 --> 00:15:08,000
我觉得

623
00:15:08,000 --> 00:15:09,000
没有意义

624
00:15:09,000 --> 00:15:10,000
对

625
00:15:10,000 --> 00:15:15,000
然后还有一条是两海纠正我的

626
00:15:15,000 --> 00:15:16,000
说小写的

627
00:15:16,000 --> 00:15:20,000
小写字母 G 的双层版本和希腊字母

628
00:15:20,000 --> 00:15:21,000
应该是没有什么困难的

629
00:15:21,000 --> 00:15:22,000
就是我当时想到

630
00:15:22,000 --> 00:15:24,000
他应该可能跟那个

631
00:15:24,000 --> 00:15:26,000
希腊字母有一个叫什么

632
00:15:26,000 --> 00:15:28,000
epsilon 之类的

633
00:15:28,000 --> 00:15:30,000
就看起来非常奇怪的一个字母

634
00:15:30,000 --> 00:15:30,000
有点关联

635
00:15:30,000 --> 00:15:32,000
我觉得 G 可能是从那个字母来的

636
00:15:32,000 --> 00:15:33,000
但实际上完全不是

637
00:15:33,000 --> 00:15:39,000
作为什么 type is beautiful 成员

638
00:15:39,000 --> 00:15:43,000
你是不是要去蹲长脚反思的一段三五天之类的

639
00:15:43,000 --> 00:15:45,000
这种事情也不是第一次发生的

640
00:15:45,000 --> 00:15:46,000
我上次在知乎上

641
00:15:46,000 --> 00:15:47,000
斩钉结写的说

642
00:15:47,000 --> 00:15:49,000
瑞士高速公路的自排

643
00:15:49,000 --> 00:15:54,000
瑞士高速公路的自排的

644
00:15:54,000 --> 00:15:57,000
标号牌的字体就是 Frutig

645
00:15:57,000 --> 00:16:00,000
然后有人跳出来说

646
00:16:00,000 --> 00:16:02,000
贵网站上面说过

647
00:16:02,000 --> 00:16:04,000
它是 Frutig 那种感性

648
00:16:04,000 --> 00:16:05,000
简直就是自打脸

649
00:16:05,000 --> 00:16:06,000
没错

650
00:16:06,000 --> 00:16:08,000
还好那篇文章

651
00:16:08,000 --> 00:16:09,000
那篇文章不是我意的吧

652
00:16:09,000 --> 00:16:10,000
应该不是我意

653
00:16:10,000 --> 00:16:11,000
如果是我意的话

654
00:16:11,000 --> 00:16:11,000
我就可以去死了

655
00:16:11,000 --> 00:16:14,000
好吧我们原谅你了

656
00:16:14,000 --> 00:16:15,000
谢谢原谅

657
00:16:15,000 --> 00:16:17,000
然后我原谅你了

658
00:16:17,000 --> 00:16:18,000
听众原谅你我不知道

659
00:16:18,000 --> 00:16:20,000
原谅不是

660
00:16:20,000 --> 00:16:22,000
sorry

661
00:16:22,000 --> 00:16:24,000
对

662
00:16:24,000 --> 00:16:27,000
然后就是 input 字体

663
00:16:27,000 --> 00:16:29,000
我上一次去看它的时候

664
00:16:29,000 --> 00:16:31,000
发现它有了一个

665
00:16:31,000 --> 00:16:34,000
花口号的替换版本

666
00:16:34,000 --> 00:16:36,000
就是有一个普通的花口号出现了

667
00:16:36,000 --> 00:16:39,000
如果你对花口号也不爽的话

668
00:16:39,000 --> 00:16:41,000
可以去拥有这个普通花口号的

669
00:16:41,000 --> 00:16:45,000
所谓普通就是没有那么扭曲的一个花口号

670
00:16:45,000 --> 00:16:48,000
就是 input 那个它会有很多这种

671
00:16:48,000 --> 00:16:50,000
就它有一个定制化的界面

672
00:16:50,000 --> 00:16:54,000
你可以选择那些你喜欢的字

673
00:16:54,000 --> 00:16:55,000
你变种的组合嘛

674
00:16:55,000 --> 00:16:57,000
这样就是反正我总有一个适合你的

675
00:16:57,000 --> 00:17:02,000
然后碰巧你就是喜欢那个直上直下的大括号的东西

676
00:17:02,000 --> 00:17:03,000
没错

677
00:17:03,000 --> 00:17:06,000
其实之前那个花口我觉得挺好的

678
00:17:06,000 --> 00:17:08,000
好吧

679
00:17:08,000 --> 00:17:09,000
还是要强调这一点

680
00:17:09,000 --> 00:17:13,000
下一条反馈是我说错了一个东西

681
00:17:13,000 --> 00:17:15,000
就是我们上次讲到有

682
00:17:15,000 --> 00:17:17,000
这个 Ecouncilers

683
00:17:17,000 --> 00:17:18,000
Caliber

684
00:17:18,000 --> 00:17:19,000
还有 Cambria

685
00:17:19,000 --> 00:17:19,000
对吧

686
00:17:19,000 --> 00:17:20,000
Cambria

687
00:17:20,000 --> 00:17:20,000
对

688
00:17:20,000 --> 00:17:23,000
就是微软的 C 系字体

689
00:17:23,000 --> 00:17:26,000
当时我说它好像是随这个 Office 发布的

690
00:17:26,000 --> 00:17:30,000
但其实它是随这个 Vista 发布的

691
00:17:30,000 --> 00:17:33,000
然后之所以我讲错这个是因为

692
00:17:33,000 --> 00:17:36,000
我用这套字体就完全是因为在

693
00:17:36,000 --> 00:17:40,000
装了 MacOffice 之后

694
00:17:40,000 --> 00:17:41,000
在我的 Mac 上面才找到的

695
00:17:41,000 --> 00:17:44,000
因为 Vista 我真的是没有用过

696
00:17:44,000 --> 00:17:46,000
遮遮掩掩就直接说我是果粉吗

697
00:17:46,000 --> 00:17:48,000
不知道是很正常的

698
00:17:48,000 --> 00:17:50,000
不这个 Vista 真的很糟糕嘛

699
00:17:50,000 --> 00:17:52,000
他确实出来的时候

700
00:17:52,000 --> 00:17:53,000
不是我的

701
00:17:53,000 --> 00:17:54,000
这个是公认的

702
00:17:54,000 --> 00:17:55,000
这个是公认的

703
00:17:55,000 --> 00:17:58,000
所以这个错我觉得是情有可原的

704
00:17:58,000 --> 00:17:59,000
你们一定要原谅我

705
00:17:59,000 --> 00:18:00,000
对不起梁海先生

706
00:18:00,000 --> 00:18:03,000
也是梁海纠错的

707
00:18:03,000 --> 00:18:11,000
然后其实有一位听众在

708
00:18:11,000 --> 00:18:15,000
他是叫孙玉东

709
00:18:15,000 --> 00:18:16,000
对他来邮件说的

710
00:18:16,000 --> 00:18:20,000
像我们提到就是微软给学生

711
00:18:20,000 --> 00:18:23,000
有一个特殊的计划叫做 DreamSpark

712
00:18:23,000 --> 00:18:24,000
对

713
00:18:24,000 --> 00:18:25,000
然后 DreamSpark 呢

714
00:18:25,000 --> 00:18:26,000
就可以干嘛呢

715
00:18:26,000 --> 00:18:28,000
就是你比如说你学校参加了这个项目之后

716
00:18:28,000 --> 00:18:30,000
你可以从你学校拿到一个账号

717
00:18:30,000 --> 00:18:31,000
然后你用这个账号可以在

718
00:18:31,000 --> 00:18:34,000
微软的官方网站免费的下载到

719
00:18:34,000 --> 00:18:36,000
大部分的微软的产品

720
00:18:36,000 --> 00:18:38,000
然后里面他提供那个叫做

721
00:18:38,000 --> 00:18:40,000
Visual Studio

722
00:18:40,000 --> 00:18:42,000
他是提供的是 Pro 版本

723
00:18:42,000 --> 00:18:43,000
哎呦

724
00:18:43,000 --> 00:18:44,000
哎呦

725
00:18:44,000 --> 00:18:45,000
不过

726
00:18:45,000 --> 00:18:48,000
之前我们讲的那个叫什么

727
00:18:48,000 --> 00:18:49,000
那个叫 Community Edition

728
00:18:49,000 --> 00:18:51,000
对 Community

729
00:18:51,000 --> 00:18:51,000
CE

730
00:18:51,000 --> 00:18:52,000
它是

731
00:18:52,000 --> 00:18:54,000
CE 一直是免费的

732
00:18:54,000 --> 00:18:55,000
对公众都是免费的

733
00:18:55,000 --> 00:18:56,000
对将会

734
00:18:56,000 --> 00:18:58,000
而且将应该将会一直免费下去

735
00:18:58,000 --> 00:19:01,000
就像那个之前很多的呃

736
00:19:01,000 --> 00:19:05,000
比如说那个 Jetbrains 的 Ide

737
00:19:05,000 --> 00:19:05,000
嗯

738
00:19:05,000 --> 00:19:07,000
Intelliji 也是有 Community Edition

739
00:19:07,000 --> 00:19:09,000
也是永远免费的

740
00:19:09,000 --> 00:19:10,000
嗯哼

741
00:19:10,000 --> 00:19:11,000
不过不过说到这个我想请你一个事

742
00:19:11,000 --> 00:19:14,000
就是好像这个有一个商业上的专门的说法吗

743
00:19:14,000 --> 00:19:18,000
这种就是把一个产品分那么多种类版本

744
00:19:18,000 --> 00:19:20,000
一个什么叫做 product matrix

745
00:19:20,000 --> 00:19:21,000
是不是对

746
00:19:21,000 --> 00:19:22,000
我也不太清楚

747
00:19:22,000 --> 00:19:24,000
反正就是就非常很喜欢搞这种事情

748
00:19:24,000 --> 00:19:25,000
大家不知道现在还有

749
00:19:25,000 --> 00:19:26,000
其实现在可能还好一点

750
00:19:26,000 --> 00:19:28,000
就像 Vista 刚出来的时候

751
00:19:28,000 --> 00:19:29,000
大家不知道还有没有印象

752
00:19:29,000 --> 00:19:30,000
好像有

753
00:19:30,000 --> 00:19:32,000
好像是有十几个版本吧

754
00:19:32,000 --> 00:19:32,000
我记得

755
00:19:32,000 --> 00:19:34,000
不止微软吧

756
00:19:34,000 --> 00:19:36,000
我觉得很多痛恨的产品都有这个特点

757
00:19:36,000 --> 00:19:37,000
Eclipse 不也是吗

758
00:19:37,000 --> 00:19:40,000
你去 Eclipse 的那个下载页面

759
00:19:40,000 --> 00:19:40,000
我靠

760
00:19:40,000 --> 00:19:42,000
一大堆版本

761
00:19:42,000 --> 00:19:43,000
什么 JavaE 版本

762
00:19:43,000 --> 00:19:44,000
C++版本

763
00:19:44,000 --> 00:19:45,000
对对

764
00:19:45,000 --> 00:19:46,000
这个版本那个版本

765
00:19:46,000 --> 00:19:47,000
就不明白了

766
00:19:47,000 --> 00:19:49,000
就难道不能提供一个

767
00:19:49,000 --> 00:19:51,000
就是基础版本

768
00:19:51,000 --> 00:19:52,000
然后 whatever

769
00:19:52,000 --> 00:19:53,000
让用户自己去装

770
00:19:53,000 --> 00:19:55,000
该装个插件或者怎么样

771
00:19:55,000 --> 00:19:56,000
对

772
00:19:56,000 --> 00:20:00,000
就我能想到的有这个所谓 product matrix

773
00:20:00,000 --> 00:20:01,000
这种这种结构

774
00:20:01,000 --> 00:20:02,000
就是把一个产品

775
00:20:02,000 --> 00:20:03,000
就同一个产品

776
00:20:03,000 --> 00:20:06,000
然后根据什么不同的场景

777
00:20:06,000 --> 00:20:08,000
或者不同功能细分的很多的

778
00:20:08,000 --> 00:20:10,000
这种产品给我的感觉

779
00:20:10,000 --> 00:20:11,000
整个或者这种公司给我的感觉

780
00:20:11,000 --> 00:20:12,000
就是很差的

781
00:20:12,000 --> 00:20:14,000
因为其实从本质上你都知道

782
00:20:14,000 --> 00:20:16,000
它就是在所谓的追

783
00:20:16,000 --> 00:20:16,000
等一下

784
00:20:16,000 --> 00:20:18,000
那个东西叫什么来的

785
00:20:18,000 --> 00:20:20,000
那个叫做

786
00:20:20,000 --> 00:20:22,000
利润最大化

787
00:20:22,000 --> 00:20:23,000
好应该不对

788
00:20:23,000 --> 00:20:23,000
对

789
00:20:23,000 --> 00:20:26,000
就等于是你不愿意

790
00:20:26,000 --> 00:20:28,000
就是我所有这些功能

791
00:20:28,000 --> 00:20:29,000
加在一起

792
00:20:29,000 --> 00:20:30,000
开这个价你出不起

793
00:20:30,000 --> 00:20:32,000
那我就砍掉一些

794
00:20:32,000 --> 00:20:37,000
然后把这个你能买的那个价格

795
00:20:37,000 --> 00:20:38,000
介绍给你

796
00:20:38,000 --> 00:20:40,000
但这就应该像卖车

797
00:20:40,000 --> 00:20:41,000
反正是任何就是

798
00:20:41,000 --> 00:20:42,000
就是我很小的时候

799
00:20:42,000 --> 00:20:44,000
总是会有很奇怪说

800
00:20:44,000 --> 00:20:47,000
这为什么车的广告上面

801
00:20:47,000 --> 00:20:49,000
都不写定价呢

802
00:20:49,000 --> 00:20:51,000
他会写

803
00:20:51,000 --> 00:20:53,000
他会写一个多少多少起吗

804
00:20:53,000 --> 00:20:53,000
对

805
00:20:53,000 --> 00:20:56,000
但那个起是完全全新的裸车价

806
00:20:56,000 --> 00:20:59,000
真正的你要去

807
00:20:59,000 --> 00:21:00,000
配那个 configurator

808
00:21:00,000 --> 00:21:01,000
然后才知道

809
00:21:01,000 --> 00:21:03,000
每一个每加一个 option

810
00:21:03,000 --> 00:21:04,000
要加多少钱

811
00:21:04,000 --> 00:21:06,000
而那个 configurator 的那个 list

812
00:21:06,000 --> 00:21:08,000
你可以花两天的时间

813
00:21:08,000 --> 00:21:10,000
跟那个销售代理

814
00:21:10,000 --> 00:21:11,000
在那边讨论这个事情

815
00:21:11,000 --> 00:21:12,000
如果你真的想要

816
00:21:12,000 --> 00:21:14,000
定制一辆属于自己的车的话

817
00:21:14,000 --> 00:21:16,000
当然在这种情况

818
00:21:16,000 --> 00:21:18,000
在中国可能不是很普遍

819
00:21:18,000 --> 00:21:20,000
但在欧洲很多人会愿意

820
00:21:20,000 --> 00:21:21,000
花两天时间

821
00:21:21,000 --> 00:21:24,000
至少这一下午吧

822
00:21:24,000 --> 00:21:26,000
跟那个销售代表去讨论

823
00:21:26,000 --> 00:21:27,000
这辆车

824
00:21:27,000 --> 00:21:28,000
他要哪些 option

825
00:21:28,000 --> 00:21:30,000
然后定

826
00:21:30,000 --> 00:21:31,000
然后两个月之后

827
00:21:31,000 --> 00:21:33,000
这辆车才可以送到他手里

828
00:21:33,000 --> 00:21:35,000
但是每一个 option

829
00:21:35,000 --> 00:21:36,000
都是他亲自 check 过的

830
00:21:36,000 --> 00:21:38,000
这才是

831
00:21:38,000 --> 00:21:40,000
就是 metrics product metrics

832
00:21:40,000 --> 00:21:41,000
at it works

833
00:21:41,000 --> 00:21:42,000
对

834
00:21:42,000 --> 00:21:44,000
就反正就给人感觉

835
00:21:44,000 --> 00:21:45,000
就非常不好

836
00:21:45,000 --> 00:21:46,000
而且就整个是

837
00:21:46,000 --> 00:21:48,000
没有就平板无故的增加了

838
00:21:48,000 --> 00:21:50,000
这个选择的这个难度

839
00:21:50,000 --> 00:21:52,000
本来就选择困难

840
00:21:52,000 --> 00:21:53,000
这已经够严重了

841
00:21:53,000 --> 00:21:53,000
对吧

842
00:21:53,000 --> 00:21:55,000
他还给你搞得那么麻烦

843
00:21:55,000 --> 00:21:56,000
让你就是想撞肠死

844
00:21:56,000 --> 00:21:57,000
不过现在

845
00:21:57,000 --> 00:21:58,000
就说 windows 8

846
00:21:58,000 --> 00:22:00,000
还有之后可能

847
00:22:00,000 --> 00:22:01,000
对他跳过久了

848
00:22:01,000 --> 00:22:02,000
这些的 windows 10

849
00:22:02,000 --> 00:22:03,000
就 8 已经好很多

850
00:22:03,000 --> 00:22:04,000
8 只分了一个

851
00:22:04,000 --> 00:22:07,000
就是 8 和这个 8 的 pro

852
00:22:07,000 --> 00:22:07,000
专业版

853
00:22:07,000 --> 00:22:08,000
对

854
00:22:08,000 --> 00:22:09,000
好像以前

855
00:22:09,000 --> 00:22:10,000
Wizda 还有什么

856
00:22:10,000 --> 00:22:11,000
我想想有什么

857
00:22:11,000 --> 00:22:12,000
home basic

858
00:22:12,000 --> 00:22:14,000
home premium

859
00:22:14,000 --> 00:22:15,000
嗯哼

860
00:22:15,000 --> 00:22:16,000
professional

861
00:22:16,000 --> 00:22:18,000
有个什么

862
00:22:18,000 --> 00:22:19,000
ultimate

863
00:22:19,000 --> 00:22:20,000
还有 enterprise

864
00:22:20,000 --> 00:22:21,000
对

865
00:22:21,000 --> 00:22:23,000
还有一个 home premium

866
00:22:23,000 --> 00:22:24,000
之类的一个词

867
00:22:24,000 --> 00:22:25,000
反正

868
00:22:25,000 --> 00:22:26,000
一个版本

869
00:22:26,000 --> 00:22:27,000
还有个什么 starter edition

870
00:22:27,000 --> 00:22:28,000
嗯

871
00:22:28,000 --> 00:22:29,000
还有

872
00:22:29,000 --> 00:22:31,000
然后所有的都要乘以 2

873
00:22:31,000 --> 00:22:31,000
因为他分那个

874
00:22:31,000 --> 00:22:33,000
32 位和 64 位

875
00:22:33,000 --> 00:22:34,000
不同的东西

876
00:22:34,000 --> 00:22:35,000
不止乘以 2

877
00:22:35,000 --> 00:22:36,000
还有乘以所有的语言

878
00:22:36,000 --> 00:22:38,000
哦

879
00:22:38,000 --> 00:22:38,000
对对对

880
00:22:38,000 --> 00:22:40,000
我觉得这是非常 2 的一件事情

881
00:22:40,000 --> 00:22:42,000
就是你就不止 windows 如此

882
00:22:42,000 --> 00:22:43,000
就什么 blackberry

883
00:22:43,000 --> 00:22:45,000
或者是安卓的

884
00:22:45,000 --> 00:22:45,000
我不知道

885
00:22:45,000 --> 00:22:47,000
但很多操作系统都一定要

886
00:22:47,000 --> 00:22:48,000
他未来那个分语言

887
00:22:48,000 --> 00:22:51,000
是因为他是跟去定价有关系

888
00:22:51,000 --> 00:22:52,000
其实跟这个 forment

889
00:22:52,000 --> 00:22:53,000
其实本质上的原是一个意思

890
00:22:53,000 --> 00:22:53,000
就是

891
00:22:53,000 --> 00:22:54,000
对呀

892
00:22:54,000 --> 00:22:54,000
你

893
00:22:54,000 --> 00:22:55,000
哎

894
00:22:55,000 --> 00:22:55,000
看一下

895
00:22:55,000 --> 00:22:57,000
中国这边比较穷

896
00:22:57,000 --> 00:22:58,000
我们把这个价格

897
00:22:58,000 --> 00:22:59,000
价格定低一点

898
00:22:59,000 --> 00:23:02,000
德国那些人比较有钱

899
00:23:02,000 --> 00:23:03,000
我们把那个价格高了一点

900
00:23:03,000 --> 00:23:04,000
但是

901
00:23:04,000 --> 00:23:05,000
但是如果

902
00:23:05,000 --> 00:23:07,000
那产品是一样的

903
00:23:07,000 --> 00:23:09,000
如果我可以随时像这个什么

904
00:23:09,000 --> 00:23:10,000
iPhone 一样切换语言

905
00:23:10,000 --> 00:23:11,000
那我还搞 P

906
00:23:11,000 --> 00:23:12,000
那我大概直接买中国版

907
00:23:12,000 --> 00:23:13,000
去德国用不就好了

908
00:23:13,000 --> 00:23:13,000
对吧

909
00:23:13,000 --> 00:23:15,000
所以他就搞成这个所有的语言

910
00:23:15,000 --> 00:23:16,000
是不可以

911
00:23:16,000 --> 00:23:18,000
随意替换的

912
00:23:18,000 --> 00:23:19,000
那也可以有

913
00:23:19,000 --> 00:23:19,000
有这种工具

914
00:23:19,000 --> 00:23:21,000
姚哥叫什么 MU

915
00:23:21,000 --> 00:23:22,000
叫什么

916
00:23:22,000 --> 00:23:24,000
现在已经可以下载语言包了

917
00:23:24,000 --> 00:23:25,000
我记得

918
00:23:25,000 --> 00:23:25,000
不

919
00:23:25,000 --> 00:23:27,000
语言包从 Vista 时代

920
00:23:27,000 --> 00:23:28,000
还是 Win 7 时代

921
00:23:28,000 --> 00:23:29,000
就已经有

922
00:23:29,000 --> 00:23:30,000
XP 都已经有语言包

923
00:23:30,000 --> 00:23:31,000
但是那个语言包是

924
00:23:31,000 --> 00:23:34,000
首先是一个要额外付费买的

925
00:23:34,000 --> 00:23:36,000
就要补齐那个

926
00:23:36,000 --> 00:23:38,000
那个就是定价的差异嘛

927
00:23:38,000 --> 00:23:40,000
就立法来说是这样子

928
00:23:40,000 --> 00:23:43,000
然后你还得麻烦去安装

929
00:23:43,000 --> 00:23:45,000
然后就是你装完这个语言包之后

930
00:23:45,000 --> 00:23:45,000
它其实也不

931
00:23:45,000 --> 00:23:47,000
并不等于一个原生的那个语言的形成

932
00:23:47,000 --> 00:23:49,000
我自己装过

933
00:23:49,000 --> 00:23:51,000
所以这个是深有体会的

934
00:23:51,000 --> 00:23:52,000
所以

935
00:23:52,000 --> 00:23:54,000
所以你看见这种

936
00:23:54,000 --> 00:23:56,000
语言是不可切换的

937
00:23:56,000 --> 00:23:58,000
然后有各种

938
00:23:58,000 --> 00:23:59,000
edition 的

939
00:23:59,000 --> 00:24:00,000
你就知道

940
00:24:00,000 --> 00:24:01,000
something is wrong

941
00:24:01,000 --> 00:24:03,000
anyway

942
00:24:03,000 --> 00:24:04,000
吐槽一下

943
00:24:04,000 --> 00:24:06,000
现在它已经好多了

944
00:24:06,000 --> 00:24:07,000
就是刚才讲嘛

945
00:24:07,000 --> 00:24:07,000
那个 8 已经

946
00:24:07,000 --> 00:24:09,000
我印象中只有 8 和

947
00:24:09,000 --> 00:24:11,000
这个 8 的 pro

948
00:24:11,000 --> 00:24:12,000
这两个区别

949
00:24:12,000 --> 00:24:13,000
但它有那个

950
00:24:13,000 --> 00:24:14,000
针对 surface

951
00:24:14,000 --> 00:24:14,000
好像一个什么版本

952
00:24:14,000 --> 00:24:15,000
那个再说

953
00:24:15,000 --> 00:24:16,000
然后语言

954
00:24:16,000 --> 00:24:17,000
我不知道现在怎么

955
00:24:17,000 --> 00:24:18,000
什么一个什么情况

956
00:24:18,000 --> 00:24:20,000
我至少从刚刚

957
00:24:20,000 --> 00:24:21,000
我为了玩那个文明特技

958
00:24:21,000 --> 00:24:22,000
我装了一个

959
00:24:22,000 --> 00:24:25,000
装了一个 8.1

960
00:24:25,000 --> 00:24:26,000
还是德语版的

961
00:24:26,000 --> 00:24:27,000
我也没有去试

962
00:24:27,000 --> 00:24:28,000
反正就用

963
00:24:28,000 --> 00:24:29,000
它在控制面板里面

964
00:24:29,000 --> 00:24:30,000
有一个这个可以选语言

965
00:24:30,000 --> 00:24:32,000
但是我记得是要语言安装包的

966
00:24:32,000 --> 00:24:33,000
但是安装包怎么来

967
00:24:33,000 --> 00:24:35,000
就是一个问题了

968
00:24:35,000 --> 00:24:35,000
嗯

969
00:24:35,000 --> 00:24:36,000
温度 48

970
00:24:36,000 --> 00:24:39,000
我去装了温度 48 之后

971
00:24:39,000 --> 00:24:41,000
去重温了一下控制面板

972
00:24:41,000 --> 00:24:41,000
我觉得

973
00:24:41,000 --> 00:24:43,000
怎么会有这么多东西

974
00:24:43,000 --> 00:24:47,000
其实它也不算多了

975
00:24:47,000 --> 00:24:49,000
它只是就是呈现的不好

976
00:24:49,000 --> 00:24:50,000
就是你仔细看一下

977
00:24:50,000 --> 00:24:52,000
像 Mac 的那个叫做什么

978
00:24:52,000 --> 00:24:53,000
System Proficer

979
00:24:53,000 --> 00:24:53,000
对

980
00:24:53,000 --> 00:24:54,000
它的选项也蛮多

981
00:24:54,000 --> 00:24:55,000
我记得那个

982
00:24:55,000 --> 00:24:58,000
就是从 Windows Vista 时代开始

983
00:24:58,000 --> 00:25:02,000
它也试图把那个功能组合

984
00:25:02,000 --> 00:25:05,000
就是那个分成几个大组

985
00:25:05,000 --> 00:25:06,000
然后你可以一个一个点进去

986
00:25:06,000 --> 00:25:08,000
可是找出来它也麻烦了

987
00:25:08,000 --> 00:25:08,000
对

988
00:25:08,000 --> 00:25:11,000
而且它的那个图形化的程度不够

989
00:25:11,000 --> 00:25:11,000
我们在那里

990
00:25:11,000 --> 00:25:12,000
对

991
00:25:12,000 --> 00:25:13,000
就你还是要读很多字

992
00:25:13,000 --> 00:25:14,000
感觉就觉得一种

993
00:25:14,000 --> 00:25:17,000
很臃肿庞大的感觉

994
00:25:17,000 --> 00:25:18,000
对

995
00:25:18,000 --> 00:25:19,000
其实简单来说就一条

996
00:25:19,000 --> 00:25:21,000
就图标做的不够漂亮

997
00:25:21,000 --> 00:25:23,000
哈哈哈哈

998
00:25:23,000 --> 00:25:24,000
好了

999
00:25:24,000 --> 00:25:25,000
不吐槽这个了

1000
00:25:25,000 --> 00:25:25,000
对

1001
00:25:25,000 --> 00:25:27,000
在这个

1002
00:25:27,000 --> 00:25:28,000
再插播一条小新闻

1003
00:25:28,000 --> 00:25:30,000
作为一个什么

1004
00:25:30,000 --> 00:25:31,000
购语言的粉丝

1005
00:25:31,000 --> 00:25:33,000
今天那个购语言发布了

1006
00:25:33,000 --> 00:25:35,000
1.4 的这个版本

1007
00:25:35,000 --> 00:25:36,000
然后为什么

1008
00:25:36,000 --> 00:25:37,000
突然要讲这件事情

1009
00:25:37,000 --> 00:25:39,000
都是因为在这个版本里面

1010
00:25:39,000 --> 00:25:42,000
它正式加入了安卓的支持

1011
00:25:42,000 --> 00:25:44,000
所以就是你可以现在开始

1012
00:25:44,000 --> 00:25:46,000
用这个购语言写游戏了

1013
00:25:46,000 --> 00:25:47,000
就用 OpenGL 写游戏

1014
00:25:47,000 --> 00:25:48,000
但如果你现在还要

1015
00:25:48,000 --> 00:25:50,000
写那种普通的那种 APP

1016
00:25:50,000 --> 00:25:51,000
就是需要有这个标准化的界面

1017
00:25:51,000 --> 00:25:52,000
可能还要用一下

1018
00:25:52,000 --> 00:25:55,000
Java 的这个东西去去做一下

1019
00:25:55,000 --> 00:25:57,000
但如果你只是写游戏的话

1020
00:25:57,000 --> 00:25:58,000
完全可以是

1021
00:25:58,000 --> 00:25:59,000
只用各个原来 build

1022
00:25:59,000 --> 00:26:00,000
就大家如果有兴趣

1023
00:26:00,000 --> 00:26:01,000
可以去尝试一下

1024
00:26:01,000 --> 00:26:02,000
对

1025
00:26:02,000 --> 00:26:04,000
我记得这个是

1026
00:26:04,000 --> 00:26:06,000
今年 4 月份

1027
00:26:06,000 --> 00:26:07,000
还是什么时候

1028
00:26:07,000 --> 00:26:07,000
就已经

1029
00:26:07,000 --> 00:26:08,000
还是 6 月份

1030
00:26:08,000 --> 00:26:09,000
就已经出来的

1031
00:26:09,000 --> 00:26:11,000
放出来的

1032
00:26:11,000 --> 00:26:12,000
分吧

1033
00:26:12,000 --> 00:26:13,000
对

1034
00:26:13,000 --> 00:26:15,000
他们在 1.3 的时候

1035
00:26:15,000 --> 00:26:15,000
就半年前

1036
00:26:15,000 --> 00:26:16,000
他已经在

1037
00:26:16,000 --> 00:26:17,000
在讲这个

1038
00:26:17,000 --> 00:26:18,000
会有这个事情了

1039
00:26:18,000 --> 00:26:19,000
就其实 1.3

1040
00:26:19,000 --> 00:26:20,000
Beta 的时候

1041
00:26:20,000 --> 00:26:21,000
就已经有这功能

1042
00:26:21,000 --> 00:26:23,000
只是没有正式发布而已

1043
00:26:23,000 --> 00:26:25,000
我觉得实际上的

1044
00:26:25,000 --> 00:26:28,000
其实可能还要更早一点

1045
00:26:28,000 --> 00:26:29,000
因为我记得在

1046
00:26:29,000 --> 00:26:31,000
我不确定

1047
00:26:31,000 --> 00:26:32,000
但好像是在

1048
00:26:32,000 --> 00:26:33,000
有一次那个

1049
00:26:33,000 --> 00:26:35,000
Google Developer

1050
00:26:35,000 --> 00:26:37,000
大会上面

1051
00:26:37,000 --> 00:26:39,000
我听到有人在问

1052
00:26:39,000 --> 00:26:41,000
说开发 Android

1053
00:26:41,000 --> 00:26:43,000
可以用别的语言吗

1054
00:26:43,000 --> 00:26:44,000
当时的得到的答复

1055
00:26:44,000 --> 00:26:46,000
是目前没有计划

1056
00:26:46,000 --> 00:26:47,000
但

1057
00:26:47,000 --> 00:26:50,000
他不是可以用那个 NDK 用

1058
00:26:50,000 --> 00:26:51,000
然后 C 或 C 接加写吗

1059
00:26:51,000 --> 00:26:53,000
那个时候还没有

1060
00:26:53,000 --> 00:26:56,000
我过去太久了

1061
00:26:56,000 --> 00:26:57,000
2012 年可能是

1062
00:26:57,000 --> 00:26:57,000
OK

1063
00:26:57,000 --> 00:26:58,000
那是今年的

1064
00:26:58,000 --> 00:26:59,000
今年的那个

1065
00:26:59,000 --> 00:27:01,000
这个 Google I.O.的时候说的

1066
00:27:01,000 --> 00:27:02,000
OK

1067
00:27:02,000 --> 00:27:02,000
对

1068
00:27:02,000 --> 00:27:05,000
所以就如果你是一个

1069
00:27:05,000 --> 00:27:06,000
痛恨

1070
00:27:06,000 --> 00:27:07,000
和我们一样

1071
00:27:07,000 --> 00:27:08,000
痛恨 Java 的

1072
00:27:08,000 --> 00:27:08,000
就是这样

1073
00:27:08,000 --> 00:27:10,000
然后又想写 Android 游戏

1074
00:27:10,000 --> 00:27:12,000
现在你可以有一个

1075
00:27:12,000 --> 00:27:13,000
官方支持的

1076
00:27:13,000 --> 00:27:13,000
正式的

1077
00:27:13,000 --> 00:27:15,000
替代选择

1078
00:27:15,000 --> 00:27:15,000
当然

1079
00:27:15,000 --> 00:27:16,000
什么

1080
00:27:16,000 --> 00:27:18,000
就现在肯定是

1081
00:27:18,000 --> 00:27:19,000
属于刚开发布的

1082
00:27:19,000 --> 00:27:21,000
一个不太稳定的阶段

1083
00:27:21,000 --> 00:27:23,000
就是前方坑多

1084
00:27:23,000 --> 00:27:24,000
自己小心

1085
00:27:24,000 --> 00:27:27,000
另外一个比较值得

1086
00:27:27,000 --> 00:27:30,000
我挺高兴的事情

1087
00:27:30,000 --> 00:27:32,000
是他们决定在下一个版本

1088
00:27:32,000 --> 00:27:33,000
就是 Go 1.5 的时候

1089
00:27:33,000 --> 00:27:34,000
也就是大概半年之后

1090
00:27:34,000 --> 00:27:35,000
发布的时候

1091
00:27:35,000 --> 00:27:37,000
他们会加入正式的

1092
00:27:37,000 --> 00:27:38,000
IOS 的支持

1093
00:27:38,000 --> 00:27:40,000
可是这个是什么

1094
00:27:40,000 --> 00:27:43,000
它的具体的意思是什么呢

1095
00:27:43,000 --> 00:27:44,000
就是我可以通过用写

1096
00:27:44,000 --> 00:27:46,000
用 Go 来编出一个

1097
00:27:46,000 --> 00:27:48,000
IOS 的原生程序吗

1098
00:27:48,000 --> 00:27:50,000
这个

1099
00:27:50,000 --> 00:27:52,000
它应该可以用那个

1100
00:27:52,000 --> 00:27:52,000
叫什么

1101
00:27:52,000 --> 00:27:54,000
可以编译成一个

1102
00:27:54,000 --> 00:27:55,000
C 的

1103
00:27:55,000 --> 00:27:56,000
就是原生代码

1104
00:27:56,000 --> 00:27:57,000
就基于这个

1105
00:27:57,000 --> 00:27:58,000
就是那个叫什么

1106
00:27:58,000 --> 00:27:59,000
ARM 平台的

1107
00:27:59,000 --> 00:28:00,000
的 C 的代码

1108
00:28:00,000 --> 00:28:01,000
然后可以直接在那边跑

1109
00:28:01,000 --> 00:28:02,000
但至于说

1110
00:28:02,000 --> 00:28:04,000
你怎么去封装成一个 APP

1111
00:28:04,000 --> 00:28:05,000
可能后面还有一些

1112
00:28:05,000 --> 00:28:06,000
要用到 Xcode 的东西

1113
00:28:06,000 --> 00:28:07,000
但是

1114
00:28:07,000 --> 00:28:07,000
对

1115
00:28:07,000 --> 00:28:08,000
它怎么才能去调用

1116
00:28:08,000 --> 00:28:10,000
Coco 的这对 API 呢

1117
00:28:10,000 --> 00:28:12,000
就 CocoTouch 的这个 API

1118
00:28:12,000 --> 00:28:12,000
它会

1119
00:28:12,000 --> 00:28:14,000
它怎么才能

1120
00:28:14,000 --> 00:28:16,000
就是切开

1121
00:28:16,000 --> 00:28:18,000
苹果这一层厚厚的壁垒

1122
00:28:18,000 --> 00:28:20,000
去调用一些

1123
00:28:20,000 --> 00:28:20,000
对

1124
00:28:20,000 --> 00:28:21,000
这可能会跟这个 Android

1125
00:28:21,000 --> 00:28:23,000
情况比较类似

1126
00:28:23,000 --> 00:28:24,000
就是可能说是

1127
00:28:24,000 --> 00:28:25,000
比如说你可以写游戏

1128
00:28:25,000 --> 00:28:26,000
只用 OpenGL 写

1129
00:28:26,000 --> 00:28:27,000
因为你写游戏的话

1130
00:28:27,000 --> 00:28:29,000
可以不用那些 Coco 的东西

1131
00:28:29,000 --> 00:28:30,000
就只有 Metal

1132
00:28:30,000 --> 00:28:32,000
Metal

1133
00:28:32,000 --> 00:28:33,000
我都不知道它能不能

1134
00:28:33,000 --> 00:28:33,000
具体怎么样

1135
00:28:33,000 --> 00:28:34,000
它现在是肯定

1136
00:28:34,000 --> 00:28:35,000
如果它支持

1137
00:28:35,000 --> 00:28:36,000
肯定是先支持 OpenGL

1138
00:28:36,000 --> 00:28:37,000
跟 Android 一样

1139
00:28:37,000 --> 00:28:38,000
我觉得

1140
00:28:38,000 --> 00:28:39,000
就那种

1141
00:28:39,000 --> 00:28:40,000
你不需要调用很多

1142
00:28:40,000 --> 00:28:41,000
系统级别的东西

1143
00:28:41,000 --> 00:28:42,000
就纯粹做一个

1144
00:28:42,000 --> 00:28:44,000
就自己在那儿跑的一个应用

1145
00:28:44,000 --> 00:28:45,000
但主要就是游戏了

1146
00:28:45,000 --> 00:28:46,000
那可能

1147
00:28:46,000 --> 00:28:48,000
然后它给你放在一个 Container 里面

1148
00:28:48,000 --> 00:28:48,000
然后 Container

1149
00:28:48,000 --> 00:28:48,000
对

1150
00:28:48,000 --> 00:28:49,000
肩定也好

1151
00:28:49,000 --> 00:28:50,000
有可能 Code 的话

1152
00:28:50,000 --> 00:28:52,000
就是走这个路线

1153
00:28:52,000 --> 00:28:53,000
对

1154
00:28:53,000 --> 00:28:54,000
但如果你要说

1155
00:28:54,000 --> 00:28:56,000
你要做一个带什么

1156
00:28:56,000 --> 00:28:57,000
就写个 App

1157
00:28:57,000 --> 00:28:57,000
普通的一个 App

1158
00:28:57,000 --> 00:28:59,000
然后需要用 Coco 的那些东西

1159
00:28:59,000 --> 00:29:00,000
不是 Coco

1160
00:29:00,000 --> 00:29:00,000
那个叫什么

1161
00:29:00,000 --> 00:29:02,000
Swift

1162
00:29:02,000 --> 00:29:04,000
Objective-C

1163
00:29:04,000 --> 00:29:05,000
就是那个 Runtime

1164
00:29:05,000 --> 00:29:06,000
不是那个 Runtime

1165
00:29:06,000 --> 00:29:07,000
就那些酷叫什么

1166
00:29:07,000 --> 00:29:07,000
不叫 Coco

1167
00:29:07,000 --> 00:29:08,000
UIKit

1168
00:29:08,000 --> 00:29:09,000
UIKit

1169
00:29:09,000 --> 00:29:09,000
对

1170
00:29:09,000 --> 00:29:12,000
然后你可能还是要写用

1171
00:29:12,000 --> 00:29:12,000
那个 RJC

1172
00:29:12,000 --> 00:29:13,000
或者用 Swift 写

1173
00:29:13,000 --> 00:29:15,000
然后在 Xcode 那边编译

1174
00:29:15,000 --> 00:29:15,000
对

1175
00:29:15,000 --> 00:29:16,000
大概情况是这样子

1176
00:29:16,000 --> 00:29:16,000
OK

1177
00:29:16,000 --> 00:29:18,000
然后就会说

1178
00:29:18,000 --> 00:29:20,000
这个情况就比较有意思了

1179
00:29:20,000 --> 00:29:22,000
就说这个事情我们不知道将来会怎么样

1180
00:29:22,000 --> 00:29:23,000
但是起码

1181
00:29:23,000 --> 00:29:26,000
如果他在半年后真的做了这个

1182
00:29:26,000 --> 00:29:28,000
这些已经是他们内部已经放出话来

1183
00:29:28,000 --> 00:29:29,000
要做这个事情

1184
00:29:29,000 --> 00:29:31,000
但是就等下半个发布嘛

1185
00:29:31,000 --> 00:29:32,000
嗯

1186
00:29:32,000 --> 00:29:34,000
就说 Google 会有这么一个语言

1187
00:29:34,000 --> 00:29:36,000
能够同时间跨平台嘛

1188
00:29:36,000 --> 00:29:37,000
就是 Google 的话

1189
00:29:37,000 --> 00:29:39,000
他可以编译到普通的桌面和

1190
00:29:39,000 --> 00:29:40,000
Android

1191
00:29:40,000 --> 00:29:41,000
包括以后的 iOS

1192
00:29:41,000 --> 00:29:44,000
可以用一套语言写一套逻辑

1193
00:29:44,000 --> 00:29:46,000
而且服务器端也可以用它写

1194
00:29:46,000 --> 00:29:47,000
我觉得这是最妙的一点

1195
00:29:47,000 --> 00:29:49,000
对对对

1196
00:29:49,000 --> 00:29:51,000
这个其实之前在那个 Google

1197
00:29:51,000 --> 00:29:53,000
Google Inbox 你知道吗

1198
00:29:53,000 --> 00:29:54,000
就是他之前写的那个邮件的客户端

1199
00:29:54,000 --> 00:29:57,000
他们其实在一定程度上已经做了这件事情

1200
00:29:57,000 --> 00:29:58,000
但不过他是进用 Java 的

1201
00:29:58,000 --> 00:30:00,000
就是所有的那个就业务逻辑

1202
00:30:00,000 --> 00:30:02,000
是用这个 Java 来写

1203
00:30:02,000 --> 00:30:04,000
然后通过两个技术吧

1204
00:30:04,000 --> 00:30:05,000
然后一个叫做 GWT

1205
00:30:05,000 --> 00:30:07,000
把 Java 编译成网页版

1206
00:30:07,000 --> 00:30:10,000
然后在那个 Chrome 里面跑

1207
00:30:10,000 --> 00:30:12,000
然后另外一个是

1208
00:30:12,000 --> 00:30:13,000
真的

1209
00:30:13,000 --> 00:30:15,000
真的是这样

1210
00:30:15,000 --> 00:30:17,000
GWT 他 Google 还在用吗

1211
00:30:17,000 --> 00:30:18,000
我不确

1212
00:30:18,000 --> 00:30:18,000
嗯哼嗯哼

1213
00:30:18,000 --> 00:30:19,000
他们很多这个

1214
00:30:19,000 --> 00:30:19,000
还有硕

1215
00:30:19,000 --> 00:30:20,000
Gmail

1216
00:30:20,000 --> 00:30:22,000
好像 Gmail 的后台也是

1217
00:30:22,000 --> 00:30:24,000
也是这么弄出来的

1218
00:30:24,000 --> 00:30:24,000
我记得

1219
00:30:24,000 --> 00:30:26,000
OMFG

1220
00:30:26,000 --> 00:30:26,000
我以为

1221
00:30:26,000 --> 00:30:27,000
这个不奇怪

1222
00:30:27,000 --> 00:30:29,000
Google 这么大一个 Java 手

1223
00:30:29,000 --> 00:30:30,000
有什么好奇怪

1224
00:30:30,000 --> 00:30:31,000
我不

1225
00:30:31,000 --> 00:30:35,000
可是 GWT 不是已经早就变成一个

1226
00:30:35,000 --> 00:30:37,000
Community 维护的 framework 了吗

1227
00:30:37,000 --> 00:30:39,000
Google 不是自己在主推

1228
00:30:39,000 --> 00:30:40,000
Angular.js 之类的东西吗

1229
00:30:40,000 --> 00:30:41,000
不

1230
00:30:41,000 --> 00:30:42,000
那个是

1231
00:30:42,000 --> 00:30:43,000
就

1232
00:30:43,000 --> 00:30:45,000
我理解好 Angular.js

1233
00:30:45,000 --> 00:30:46,000
那些是他们做

1234
00:30:46,000 --> 00:30:48,000
纯粹做网页的前端的时候

1235
00:30:48,000 --> 00:30:49,000
用那个没有问题

1236
00:30:49,000 --> 00:30:50,000
但如果你是要涉及到

1237
00:30:50,000 --> 00:30:52,000
这种跨平台的东西的话

1238
00:30:52,000 --> 00:30:53,000
他们的就是所谓的

1239
00:30:53,000 --> 00:30:55,000
就 Canonical version

1240
00:30:55,000 --> 00:30:57,000
还是 Java 版本的

1241
00:30:57,000 --> 00:30:58,000
比如说 Gmail 是这样子

1242
00:30:58,000 --> 00:31:00,000
然后那个像 Inbox 也是这样子

1243
00:31:00,000 --> 00:31:01,000
然后呢

1244
00:31:01,000 --> 00:31:03,000
他们 Inbox 不是有 IOS 版吗

1245
00:31:03,000 --> 00:31:04,000
然后 IOS 版的

1246
00:31:04,000 --> 00:31:05,000
就是业务逻辑那部分

1247
00:31:05,000 --> 00:31:06,000
他们是用一个叫做

1248
00:31:06,000 --> 00:31:09,000
J 2 Object C

1249
00:31:09,000 --> 00:31:10,000
还是叫什么玩意儿

1250
00:31:10,000 --> 00:31:12,000
就是把 Java 编译成

1251
00:31:12,000 --> 00:31:15,000
Object C 代码的方法

1252
00:31:15,000 --> 00:31:17,000
What kind of sorcery is this

1253
00:31:17,000 --> 00:31:18,000
但是他们这个

1254
00:31:18,000 --> 00:31:19,000
也有它的道理嘛

1255
00:31:19,000 --> 00:31:21,000
就是你要维护

1256
00:31:21,000 --> 00:31:23,000
同一个产品的业务逻辑

1257
00:31:23,000 --> 00:31:24,000
要保证跨平台

1258
00:31:24,000 --> 00:31:25,000
如果你每个平台单独写套

1259
00:31:25,000 --> 00:31:26,000
写套的话

1260
00:31:26,000 --> 00:31:28,000
那肯定就等于是像什么

1261
00:31:28,000 --> 00:31:29,000
Bug 啊

1262
00:31:29,000 --> 00:31:31,000
还有那种开发量

1263
00:31:31,000 --> 00:31:31,000
就全部每个

1264
00:31:31,000 --> 00:31:33,000
就有多少个平台

1265
00:31:33,000 --> 00:31:34,000
你要乘一多少个数

1266
00:31:34,000 --> 00:31:35,000
它这样的话

1267
00:31:35,000 --> 00:31:37,000
就只用解决一个问题

1268
00:31:37,000 --> 00:31:38,000
就一套代码库

1269
00:31:38,000 --> 00:31:39,000
然后之后都可以

1270
00:31:39,000 --> 00:31:41,000
靠这个编译

1271
00:31:41,000 --> 00:31:42,000
就是那种跨平台的编译机

1272
00:31:42,000 --> 00:31:43,000
来解决这个问题

1273
00:31:43,000 --> 00:31:44,000
在理想情况下是这样

1274
00:31:44,000 --> 00:31:45,000
对

1275
00:31:45,000 --> 00:31:47,000
但是它的 UI 那部分

1276
00:31:47,000 --> 00:31:49,000
比如说像安卓的 UI

1277
00:31:49,000 --> 00:31:50,000
它是用原生的

1278
00:31:50,000 --> 00:31:52,000
Java 来写的

1279
00:31:52,000 --> 00:31:53,000
然后在 IOS

1280
00:31:53,000 --> 00:31:55,000
它是用 Object C 来封装的

1281
00:31:55,000 --> 00:31:58,000
然后但是只说业务

1282
00:31:58,000 --> 00:32:00,000
就是跟那种平台的关系

1283
00:32:00,000 --> 00:32:01,000
不是很紧密的业务逻辑那部分

1284
00:32:01,000 --> 00:32:03,000
他们是用一个 Java

1285
00:32:03,000 --> 00:32:04,000
然后通过这种编译的方法来实现

1286
00:32:04,000 --> 00:32:05,000
OK

1287
00:32:05,000 --> 00:32:07,000
那么同样的道理

1288
00:32:07,000 --> 00:32:08,000
就是说如果以后

1289
00:32:08,000 --> 00:32:09,000
Go 的话

1290
00:32:09,000 --> 00:32:10,000
也可以差不多可以

1291
00:32:10,000 --> 00:32:12,000
也许可以做类似的事情

1292
00:32:12,000 --> 00:32:16,000
但这个事情也跟上一期

1293
00:32:16,000 --> 00:32:18,000
我们讲的那个微软的计划

1294
00:32:18,000 --> 00:32:19,000
有点相关嘛

1295
00:32:19,000 --> 00:32:22,000
就它是要声称是用那个 DONET

1296
00:32:22,000 --> 00:32:26,000
支持 Android 和 IOS 的

1297
00:32:26,000 --> 00:32:27,000
跨平台的开发

1298
00:32:27,000 --> 00:32:28,000
但其实我知道它的用心

1299
00:32:28,000 --> 00:32:29,000
也很清楚

1300
00:32:29,000 --> 00:32:31,000
就是顺带假点私货

1301
00:32:31,000 --> 00:32:33,000
那你们都反正都一套代码了

1302
00:32:33,000 --> 00:32:34,000
那不如顺便编一个

1303
00:32:34,000 --> 00:32:35,000
Windows Phone 的版本

1304
00:32:35,000 --> 00:32:38,000
以此解决

1305
00:32:38,000 --> 00:32:39,000
那个什么 Windows Phone 上面

1306
00:32:39,000 --> 00:32:41,000
那个应用数不足

1307
00:32:41,000 --> 00:32:42,000
然后这个开发者

1308
00:32:42,000 --> 00:32:43,000
又不愿意开发的

1309
00:32:43,000 --> 00:32:44,000
这么一个尴尬局面吧

1310
00:32:44,000 --> 00:32:45,000
对

1311
00:32:45,000 --> 00:32:46,000
这算是一个

1312
00:32:46,000 --> 00:32:47,000
鸡生蛋蛋生鸡的问题

1313
00:32:47,000 --> 00:32:49,000
就恶性循环

1314
00:32:49,000 --> 00:32:52,000
说你们不想给我生蛋

1315
00:32:52,000 --> 00:32:53,000
那我送你一个鸡

1316
00:32:53,000 --> 00:32:54,000
包生所有蛋

1317
00:32:54,000 --> 00:32:55,000
对

1318
00:32:55,000 --> 00:32:57,000
顺手帮我克拢一个蛋

1319
00:32:57,000 --> 00:32:58,000
对

1320
00:32:58,000 --> 00:33:00,000
他就是打了那个小算盘

1321
00:33:00,000 --> 00:33:00,000
我觉得

1322
00:33:00,000 --> 00:33:04,000
那个就插播的广告到这里

1323
00:33:04,000 --> 00:33:04,000
OK

1324
00:33:04,000 --> 00:33:07,000
正题是什么

1325
00:33:07,000 --> 00:33:10,000
我先放音乐吧

1326
00:33:10,000 --> 00:33:11,000
好

1327
00:33:11,000 --> 00:33:14,000
我实在是太细心了

1328
00:33:14,000 --> 00:33:19,000
我们本来打算在这里

1329
00:33:19,000 --> 00:33:21,000
插入电子游戏 Portal 的主题曲

1330
00:33:21,000 --> 00:33:23,000
Still Alive 的一个电子合成器版本

1331
00:33:23,000 --> 00:33:26,000
但是经过事后的一番研究

1332
00:33:26,000 --> 00:33:28,000
发现这首歌的授权

1333
00:33:28,000 --> 00:33:31,000
其实并不是像我原先以为的那样

1334
00:33:31,000 --> 00:33:34,000
以创作功用署名

1335
00:33:34,000 --> 00:33:35,000
非商业写意发布

1336
00:33:35,000 --> 00:33:37,000
原作者 Johnson Carlton

1337
00:33:37,000 --> 00:33:39,000
其实已经将这首歌的版权

1338
00:33:39,000 --> 00:33:41,000
给了 Portal 游戏的制作商 Val

1339
00:33:41,000 --> 00:33:45,000
所以我们需要先询问一下 Val

1340
00:33:45,000 --> 00:33:47,000
是否可以将它用在我们的节目里

1341
00:33:47,000 --> 00:33:58,000
而目前的现状是我跟 Rail 在接下来的内容里面会反复提到 Portal 以及这首歌

1342
00:33:58,000 --> 00:34:00,000
如果你不听一下的话

1343
00:34:00,000 --> 00:34:01,000
可能会有点奇怪

1344
00:34:01,000 --> 00:34:05,000
那么我也和大家说一声抱歉咯

1345
00:34:05,000 --> 00:34:14,000
北美山地时间 2006 年 1 月 2 日下午 3 点 04 分 05 秒

1346
00:34:14,000 --> 00:34:18,000
您正在收听的是 IPM Podcast 网络下的内核恐慌

1347
00:34:18,000 --> 00:34:21,000
我们号称硬核

1348
00:34:21,000 --> 00:34:22,000
但是也没有什么干货

1349
00:34:22,000 --> 00:34:23,000
想听的人听

1350
00:34:23,000 --> 00:34:25,000
不想听的人就不要听

1351
00:34:25,000 --> 00:34:28,000
好拽的一句话

1352
00:34:28,000 --> 00:34:29,000
有点怪

1353
00:34:29,000 --> 00:34:31,000
对

1354
00:34:31,000 --> 00:34:34,000
然后就像大家刚才听到的这样

1355
00:34:34,000 --> 00:34:37,000
我们从这一期开始有我们的主题曲了

1356
00:34:37,000 --> 00:34:37,000
耶

1357
00:34:37,000 --> 00:34:40,000
对

1358
00:34:40,000 --> 00:34:45,000
然后缘起其实就是看 IT 公论有主题曲

1359
00:34:45,000 --> 00:34:46,000
我挺眼红的

1360
00:34:46,000 --> 00:34:46,000
我也想要一个

1361
00:34:46,000 --> 00:34:47,000
但是

1362
00:34:47,000 --> 00:34:50,000
但是一直拖到

1363
00:34:50,000 --> 00:34:52,000
我们已经做了五期了

1364
00:34:52,000 --> 00:34:53,000
十个礼拜了

1365
00:34:53,000 --> 00:34:53,000
过去了

1366
00:34:53,000 --> 00:34:56,000
才终于找到了这么一个

1367
00:34:56,000 --> 00:34:59,000
也不算非常合意

1368
00:34:59,000 --> 00:35:01,000
但是觉得还不错的主题曲吧

1369
00:35:01,000 --> 00:35:02,000
当然

1370
00:35:02,000 --> 00:35:05,000
如果你知道它是什么来头

1371
00:35:05,000 --> 00:35:06,000
那已经知道它是什么来头

1372
00:35:06,000 --> 00:35:07,000
如果你不知道的话

1373
00:35:07,000 --> 00:35:08,000
它是

1374
00:35:08,000 --> 00:35:11,000
一个游戏

1375
00:35:11,000 --> 00:35:11,000
就是

1376
00:35:11,000 --> 00:35:12,000
如果

1377
00:35:12,000 --> 00:35:17,000
各位有听前三两期的 IT 公论

1378
00:35:17,000 --> 00:35:19,000
会注意到

1379
00:35:19,000 --> 00:35:20,000
Rail 和

1380
00:35:20,000 --> 00:35:24,000
刘依都在节目之中谈到了 Portal 这个游戏

1381
00:35:24,000 --> 00:35:25,000
然后

1382
00:35:25,000 --> 00:35:27,000
刚才大家听到这段旋律

1383
00:35:27,000 --> 00:35:32,000
就是 Portal 一代里面的主题曲吧

1384
00:35:32,000 --> 00:35:32,000
应该算

1385
00:35:32,000 --> 00:35:32,000
因为

1386
00:35:32,000 --> 00:35:38,000
虽然整个完整的音乐是在

1387
00:35:38,000 --> 00:35:39,000
它是有歌了

1388
00:35:39,000 --> 00:35:43,000
它是在游戏最终打穿之后才播出的

1389
00:35:43,000 --> 00:35:45,000
但是其实你一开始游戏

1390
00:35:45,000 --> 00:35:45,000
那个

1391
00:35:45,000 --> 00:35:48,000
Spoiler Alert

1392
00:35:48,000 --> 00:35:49,000
Spoiler Alert

1393
00:35:49,000 --> 00:35:51,000
就是一开始你在游戏里面

1394
00:35:51,000 --> 00:35:52,000
捡起的那个声音机里面

1395
00:35:52,000 --> 00:35:53,000
放的就是这首曲

1396
00:35:53,000 --> 00:35:56,000
然后在你打爆机的时候

1397
00:35:56,000 --> 00:35:57,000
最后出字幕的时候

1398
00:35:57,000 --> 00:35:58,000
也是放了这个

1399
00:35:58,000 --> 00:36:00,000
就放的是这个完整版

1400
00:36:00,000 --> 00:36:00,000
对

1401
00:36:00,000 --> 00:36:03,000
整首歌会被正式的唱一点

1402
00:36:03,000 --> 00:36:04,000
其实我第一次听这歌

1403
00:36:04,000 --> 00:36:05,000
还

1404
00:36:05,000 --> 00:36:07,000
我还没有玩这个 Portal 这个游戏

1405
00:36:07,000 --> 00:36:07,000
但是

1406
00:36:07,000 --> 00:36:10,000
有一个什么机缘巧合

1407
00:36:10,000 --> 00:36:11,000
我就听了那个歌

1408
00:36:11,000 --> 00:36:11,000
我觉得哇

1409
00:36:11,000 --> 00:36:12,000
好可爱

1410
00:36:12,000 --> 00:36:13,000
真的吗

1411
00:36:13,000 --> 00:36:15,000
你在没有玩这个游戏的时候就听过这首歌

1412
00:36:15,000 --> 00:36:16,000
嗯哼嗯哼

1413
00:36:16,000 --> 00:36:17,000
OK

1414
00:36:17,000 --> 00:36:17,000
有意思

1415
00:36:17,000 --> 00:36:18,000
对

1416
00:36:18,000 --> 00:36:19,000
然后我这

1417
00:36:19,000 --> 00:36:20,000
它有歌词嘛

1418
00:36:20,000 --> 00:36:21,000
然后它有那个

1419
00:36:21,000 --> 00:36:21,000
那个

1420
00:36:21,000 --> 00:36:21,000
那个

1421
00:36:21,000 --> 00:36:22,000
那个

1422
00:36:22,000 --> 00:36:23,000
有一个动画

1423
00:36:23,000 --> 00:36:23,000
效果

1424
00:36:23,000 --> 00:36:24,000
然后你去看

1425
00:36:24,000 --> 00:36:27,000
那个感觉真的超好

1426
00:36:27,000 --> 00:36:27,000
对

1427
00:36:27,000 --> 00:36:28,000
所以反正总之

1428
00:36:28,000 --> 00:36:31,000
就像我推荐 Rail

1429
00:36:31,000 --> 00:36:33,000
就为什么 Rail 会花一天

1430
00:36:33,000 --> 00:36:36,000
花了一周加一周时间玩了 Portal 一

1431
00:36:36,000 --> 00:36:37,000
然后又花了一天

1432
00:36:37,000 --> 00:36:39,000
一整天时间打穿 Portal 二呢

1433
00:36:39,000 --> 00:36:42,000
就是因为我向他吐血强力推荐

1434
00:36:42,000 --> 00:36:43,000
我逼着他去玩的

1435
00:36:43,000 --> 00:36:45,000
因为 Rail 其实有啊

1436
00:36:45,000 --> 00:36:47,000
就是玩第一阵车射击游戏

1437
00:36:47,000 --> 00:36:50,000
会会上吐下不屑

1438
00:36:50,000 --> 00:36:53,000
在我的这个强迫之下

1439
00:36:53,000 --> 00:36:54,000
他还是去玩了一遍

1440
00:36:54,000 --> 00:36:56,000
然后玩的

1441
00:36:56,000 --> 00:36:56,000
对

1442
00:36:56,000 --> 00:36:57,000
我推荐他玩的契机

1443
00:36:57,000 --> 00:37:01,000
也就是希望能够选用这首曲子来作为游戏的主

1444
00:37:01,000 --> 00:37:02,000
游戏主题曲

1445
00:37:02,000 --> 00:37:04,000
作为节目的主题曲

1446
00:37:04,000 --> 00:37:05,000
然后希望能够

1447
00:37:05,000 --> 00:37:07,000
希望他能够理解这个游戏的

1448
00:37:07,000 --> 00:37:08,000
或者说这个

1449
00:37:08,000 --> 00:37:09,000
这首音乐的

1450
00:37:09,000 --> 00:37:11,000
有意思的地方在哪

1451
00:37:11,000 --> 00:37:12,000
嗯

1452
00:37:12,000 --> 00:37:13,000
但其实我要说

1453
00:37:13,000 --> 00:37:15,000
就是在我玩这个游戏之前

1454
00:37:15,000 --> 00:37:16,000
我光看那个歌

1455
00:37:16,000 --> 00:37:17,000
就已经觉得蛮有意思

1456
00:37:17,000 --> 00:37:18,000
但就是说

1457
00:37:18,000 --> 00:37:20,000
只是对里面的有些歌词的部分

1458
00:37:20,000 --> 00:37:22,000
理解不是那么深刻

1459
00:37:22,000 --> 00:37:24,000
不知道为什么他要说那件事

1460
00:37:24,000 --> 00:37:25,000
那你玩玩游戏之后

1461
00:37:25,000 --> 00:37:25,000
你就觉得啊

1462
00:37:25,000 --> 00:37:26,000
原来是这个意思

1463
00:37:26,000 --> 00:37:27,000
对

1464
00:37:27,000 --> 00:37:27,000
比如说

1465
00:37:27,000 --> 00:37:28,000
对

1466
00:37:28,000 --> 00:37:30,000
整个歌词里面的每一句

1467
00:37:30,000 --> 00:37:32,000
其实都可以在游戏里面找到线索

1468
00:37:32,000 --> 00:37:32,000
对

1469
00:37:32,000 --> 00:37:34,000
另外这个

1470
00:37:34,000 --> 00:37:35,000
对

1471
00:37:35,000 --> 00:37:36,000
另外这个歌曲

1472
00:37:36,000 --> 00:37:38,000
也本身有点很有那个

1473
00:37:38,000 --> 00:37:39,000
嗯

1474
00:37:39,000 --> 00:37:42,000
因为它本身就是一个 geek 写出来

1475
00:37:42,000 --> 00:37:44,000
这首歌的这个作者是一个

1476
00:37:44,000 --> 00:37:46,000
是在 geek 界非常有名的一个人

1477
00:37:46,000 --> 00:37:47,000
他叫做

1478
00:37:47,000 --> 00:37:48,000
Jonathan Carlton

1479
00:37:48,000 --> 00:37:51,000
他写了很多

1480
00:37:51,000 --> 00:37:51,000
呃

1481
00:37:51,000 --> 00:37:52,000
说不上快智人口

1482
00:37:52,000 --> 00:37:53,000
但是非常 geek 的歌

1483
00:37:53,000 --> 00:37:55,000
比如说这首歌的歌词里面有一句是

1484
00:37:55,000 --> 00:37:56,000
呃

1485
00:37:56,000 --> 00:37:59,000
We are out of beta

1486
00:37:59,000 --> 00:38:00,000
We are releasing on time

1487
00:38:00,000 --> 00:38:02,000
很有意思

1488
00:38:02,000 --> 00:38:03,000
对

1489
00:38:03,000 --> 00:38:05,000
呃

1490
00:38:05,000 --> 00:38:06,000
有时候我们在

1491
00:38:06,000 --> 00:38:07,000
我在公司

1492
00:38:07,000 --> 00:38:08,000
发现这个

1493
00:38:08,000 --> 00:38:09,000
deadline

1494
00:38:09,000 --> 00:38:11,000
又一次被推迟的时候

1495
00:38:11,000 --> 00:38:13,000
我就会在心里摸摸唱这首歌

1496
00:38:13,000 --> 00:38:13,000
哈哈

1497
00:38:13,000 --> 00:38:15,000
We are out of beta

1498
00:38:15,000 --> 00:38:17,000
We are releasing on time

1499
00:38:17,000 --> 00:38:18,000
对

1500
00:38:18,000 --> 00:38:19,000
嗯

1501
00:38:19,000 --> 00:38:19,000
在游戏界

1502
00:38:19,000 --> 00:38:22,000
其实这是非常非常严重的一个问题

1503
00:38:22,000 --> 00:38:22,000
就是

1504
00:38:22,000 --> 00:38:24,000
游戏

1505
00:38:24,000 --> 00:38:26,000
作为一种特殊的软件

1506
00:38:26,000 --> 00:38:30,000
其玩家对于跳票的容忍能力是非常非常差的

1507
00:38:30,000 --> 00:38:31,000
嗯

1508
00:38:31,000 --> 00:38:32,000
除非你是暴雪

1509
00:38:32,000 --> 00:38:33,000
或者是

1510
00:38:33,000 --> 00:38:34,000
哈哈

1511
00:38:34,000 --> 00:38:35,000
呃

1512
00:38:35,000 --> 00:38:38,000
或者是

1513
00:38:38,000 --> 00:38:39,000
Valve 这种

1514
00:38:39,000 --> 00:38:40,000
大公司

1515
00:38:40,000 --> 00:38:42,000
否则你一般很难去

1516
00:38:42,000 --> 00:38:45,000
应对

1517
00:38:45,000 --> 00:38:47,000
面对玩家的愤怒啊

1518
00:38:47,000 --> 00:38:48,000
对

1519
00:38:48,000 --> 00:38:48,000
而且

1520
00:38:48,000 --> 00:38:51,000
而且 gamer 其实是非常容易一怒的一个人群

1521
00:38:51,000 --> 00:38:54,000
就像之前的这个 gamergate 里面

1522
00:38:54,000 --> 00:38:57,000
爆露出来一个一个一个一个现状一样

1523
00:38:57,000 --> 00:38:57,000
就是

1524
00:38:57,000 --> 00:38:58,000
这是一群

1525
00:38:58,000 --> 00:38:59,000
这是打一群

1526
00:38:59,000 --> 00:39:01,000
打了机械的人

1527
00:39:01,000 --> 00:39:01,000
对

1528
00:39:01,000 --> 00:39:03,000
荷尔蒙无处挥发

1529
00:39:03,000 --> 00:39:07,000
然后又不知道怎么跟女生交流的这样一群人

1530
00:39:07,000 --> 00:39:10,000
就他们的情商是非常低的

1531
00:39:10,000 --> 00:39:15,000
所以他们基本上宣扬泄愤的唯一方法就是骂你

1532
00:39:15,000 --> 00:39:19,000
然后游戏公司是被最容易被骂了狗血喷头

1533
00:39:19,000 --> 00:39:21,000
狗血喷头的一方

1534
00:39:21,000 --> 00:39:24,000
所以不能按时交付软件

1535
00:39:24,000 --> 00:39:26,000
其实对于他们来说是非常严重的一件事

1536
00:39:26,000 --> 00:39:33,000
所以其实从这从这一点说来像我这种星际玩家还是蛮能等的

1537
00:39:33,000 --> 00:39:34,000
对

1538
00:39:34,000 --> 00:39:39,000
其实咱们都算是休闲型玩家吧

1539
00:39:39,000 --> 00:39:41,000
就古灰级玩家等星际二已经等了

1540
00:39:41,000 --> 00:39:42,000
不知道

1541
00:39:42,000 --> 00:39:44,000
就已经不知道把暴雪默默

1542
00:39:44,000 --> 00:39:45,000
就间隔

1543
00:39:45,000 --> 00:39:46,000
漫漫了多少遍了

1544
00:39:46,000 --> 00:39:46,000
对

1545
00:39:46,000 --> 00:39:49,000
所以你玩 poto 有什么观感

1546
00:39:49,000 --> 00:39:51,000
我先解决那个问题

1547
00:39:51,000 --> 00:39:53,000
我不知道为什么我玩 poto

1548
00:39:53,000 --> 00:39:56,000
一我只能玩就可能不超过半小时了

1549
00:39:56,000 --> 00:39:57,000
这样啊

1550
00:39:57,000 --> 00:39:58,000
不然就会那个头晕想吐

1551
00:39:58,000 --> 00:40:01,000
但是我玩 poto 2 好像没有这个原因

1552
00:40:01,000 --> 00:40:02,000
但我想不明白为什么

1553
00:40:02,000 --> 00:40:04,000
poto 2 的引擎和 poto 1 不一样吧

1554
00:40:04,000 --> 00:40:05,000
我敢

1555
00:40:05,000 --> 00:40:08,000
但是我直观的看那个画面的时候

1556
00:40:08,000 --> 00:40:10,000
没有看出太大的区别

1557
00:40:10,000 --> 00:40:13,000
poto 2 的画面的精细成果要比一好很多

1558
00:40:13,000 --> 00:40:15,000
是因为你说它精度不够

1559
00:40:15,000 --> 00:40:17,000
所以觉得想头晕想吐

1560
00:40:17,000 --> 00:40:20,000
也有可能是 somehow 一代的帧率不够高

1561
00:40:20,000 --> 00:40:21,000
不可能

1562
00:40:21,000 --> 00:40:23,000
一代的游戏 2007 年的 poto 游戏

1563
00:40:23,000 --> 00:40:25,000
现在的机器跑肯定没问题

1564
00:40:25,000 --> 00:40:28,000
而且我玩游戏它推荐给我的那个设置

1565
00:40:28,000 --> 00:40:31,000
都还是蛮高的这个特效的那个量的

1566
00:40:31,000 --> 00:40:33,000
机器应该不是问题的

1567
00:40:33,000 --> 00:40:35,000
就这个事情是一个挺贵

1568
00:40:35,000 --> 00:40:37,000
我玩所有的设计游戏都会

1569
00:40:37,000 --> 00:40:40,000
就第一人称视角的这种算是设计游戏吧

1570
00:40:40,000 --> 00:40:42,000
都是这个问题

1571
00:40:42,000 --> 00:40:45,000
以前玩那个就是 counterstrike CS 的时候

1572
00:40:45,000 --> 00:40:47,000
也是就可能大概 20 分钟半小时

1573
00:40:47,000 --> 00:40:48,000
就哎不行了

1574
00:40:48,000 --> 00:40:49,000
必须得走

1575
00:40:49,000 --> 00:40:51,000
不然就是那个要想吐

1576
00:40:51,000 --> 00:40:53,000
你就是传说中猪一样的队友

1577
00:40:53,000 --> 00:40:54,000
对

1578
00:40:54,000 --> 00:41:00,000
所以你看我忍着这个头晕想吐这种风险

1579
00:41:00,000 --> 00:41:02,000
就把这个 poto 也打完了

1580
00:41:02,000 --> 00:41:02,000
你看

1581
00:41:02,000 --> 00:41:04,000
太够意思了

1582
00:41:04,000 --> 00:41:08,000
会不会是因为一代和二代里面的

1583
00:41:08,000 --> 00:41:11,000
人的相机视野不一样

1584
00:41:11,000 --> 00:41:13,000
我还真没看出来

1585
00:41:13,000 --> 00:41:14,000
我比较过一下

1586
00:41:14,000 --> 00:41:16,000
但是没有什么特别明显的区别

1587
00:41:16,000 --> 00:41:17,000
OK

1588
00:41:17,000 --> 00:41:20,000
反正这个事情就很让我奇怪

1589
00:41:20,000 --> 00:41:21,000
也可能是说

1590
00:41:21,000 --> 00:41:23,000
我玩一的时候就什么

1591
00:41:23,000 --> 00:41:24,000
已经训练过一下了

1592
00:41:24,000 --> 00:41:25,000
然后玩的时候觉得

1593
00:41:25,000 --> 00:41:27,000
刚之前已经折腾过那么久了

1594
00:41:27,000 --> 00:41:28,000
这次是不是就好一点

1595
00:41:28,000 --> 00:41:31,000
也有可能是二代的场景

1596
00:41:31,000 --> 00:41:34,000
相对一代来说更空旷一点

1597
00:41:34,000 --> 00:41:36,000
就可能有那种纵深感

1598
00:41:36,000 --> 00:41:37,000
你就不太容易

1599
00:41:37,000 --> 00:41:37,000
对

1600
00:41:37,000 --> 00:41:39,000
它会大

1601
00:41:39,000 --> 00:41:40,000
看起来很大一些

1602
00:41:40,000 --> 00:41:42,000
有可能吧

1603
00:41:42,000 --> 00:41:44,000
然后你说你用一天时间

1604
00:41:44,000 --> 00:41:45,000
打穿的 poto 2

1605
00:41:45,000 --> 00:41:46,000
我觉得还挺惊讶的

1606
00:41:46,000 --> 00:41:46,000
就是

1607
00:41:46,000 --> 00:41:49,000
我因为 poto 2

1608
00:41:49,000 --> 00:41:51,000
我可能玩过两次三次

1609
00:41:51,000 --> 00:41:52,000
对

1610
00:41:52,000 --> 00:41:56,000
我从来没有说一天在玩这游戏

1611
00:41:56,000 --> 00:41:58,000
poto 2 它的那个场景

1612
00:41:58,000 --> 00:42:01,000
是比一要大概是四倍左右吧

1613
00:42:01,000 --> 00:42:02,000
我估计

1614
00:42:02,000 --> 00:42:04,000
就是从我的玩的体验来看

1615
00:42:04,000 --> 00:42:06,000
就是整个你打穿的长度

1616
00:42:06,000 --> 00:42:09,000
因为 poto 1 的就只有那 19 个 testchamber

1617
00:42:09,000 --> 00:42:12,000
其实 poto 2 不止四倍

1618
00:42:12,000 --> 00:42:14,000
因为 poto 2 还有一个协作模式

1619
00:42:14,000 --> 00:42:16,000
那个是无限的

1620
00:42:16,000 --> 00:42:17,000
对

1621
00:42:17,000 --> 00:42:19,000
那个其实也是

1622
00:42:19,000 --> 00:42:21,000
我不是很记得了

1623
00:42:21,000 --> 00:42:26,000
但是我相信它默认带的那些 chamber 也是有限的

1624
00:42:26,000 --> 00:42:27,000
就是如果你有兴趣的话

1625
00:42:27,000 --> 00:42:29,000
以后咱们可以试一下

1626
00:42:29,000 --> 00:42:31,000
就是它可以支持两个好友

1627
00:42:31,000 --> 00:42:31,000
对

1628
00:42:31,000 --> 00:42:34,000
就是它就是在 poto 2 最后结束的时候

1629
00:42:34,000 --> 00:42:35,000
又有剧透了

1630
00:42:35,000 --> 00:42:37,000
就是你会被

1631
00:42:37,000 --> 00:42:38,000
你会看到两个机器人

1632
00:42:38,000 --> 00:42:39,000
一个

1633
00:42:39,000 --> 00:42:40,000
一个是成脸

1634
00:42:40,000 --> 00:42:41,000
一个是蓝脸吧

1635
00:42:41,000 --> 00:42:42,000
嗯哼

1636
00:42:42,000 --> 00:42:43,000
然后你

1637
00:42:43,000 --> 00:42:46,000
你可以和自己的同伴各自操作一个

1638
00:42:46,000 --> 00:42:49,000
然后两个机器人各自拿着一把 poto 缸

1639
00:42:49,000 --> 00:42:49,000
嗯哼

1640
00:42:49,000 --> 00:42:53,000
然后等于你可以在同一时间里面有四个 poto

1641
00:42:53,000 --> 00:42:55,000
然后其中两两是互通的

1642
00:42:55,000 --> 00:42:57,000
然后就可以打出更多组合来

1643
00:42:57,000 --> 00:43:02,000
就你必须在队友的配合之下才可以解开一些谜题

1644
00:43:02,000 --> 00:43:02,000
是吧

1645
00:43:02,000 --> 00:43:04,000
那个也是有剧情的吗

1646
00:43:04,000 --> 00:43:05,000
那个没有剧

1647
00:43:05,000 --> 00:43:06,000
那个好像

1648
00:43:06,000 --> 00:43:08,000
就只是一个联机模式而已

1649
00:43:08,000 --> 00:43:11,000
好像是只是一个写作模式而已

1650
00:43:11,000 --> 00:43:11,000
对

1651
00:43:11,000 --> 00:43:14,000
就所以我就说就单看打单机

1652
00:43:14,000 --> 00:43:15,000
单看主线剧情的话

1653
00:43:15,000 --> 00:43:16,000
对对

1654
00:43:16,000 --> 00:43:16,000
大概

1655
00:43:16,000 --> 00:43:17,000
poto 2 可能对

1656
00:43:17,000 --> 00:43:19,000
剧情是蛮蛮长

1657
00:43:19,000 --> 00:43:21,000
当时我我记得我是跑完了那个

1658
00:43:21,000 --> 00:43:23,000
那个叫什么

1659
00:43:23,000 --> 00:43:28,000
嗯就是从那个地下爬出来

1660
00:43:28,000 --> 00:43:29,000
不是不是从地下爬出来

1661
00:43:29,000 --> 00:43:31,000
对从地下爬出来

1662
00:43:31,000 --> 00:43:33,000
见到那个最开始要剧透了

1663
00:43:33,000 --> 00:43:34,000
怎么办

1664
00:43:34,000 --> 00:43:35,000
没关系

1665
00:43:35,000 --> 00:43:37,000
就是你找回那个土豆之后

1666
00:43:37,000 --> 00:43:39,000
我觉得那个可能爬出来就完了吗

1667
00:43:39,000 --> 00:43:42,000
因为之前已经有那个 test chamber 有打过

1668
00:43:42,000 --> 00:43:43,000
然后之后有一个正式的剧情

1669
00:43:43,000 --> 00:43:44,000
觉得已经蛮长

1670
00:43:44,000 --> 00:43:45,000
最后想不到

1671
00:43:45,000 --> 00:43:47,000
竟然还有一遍 test chamber

1672
00:43:47,000 --> 00:43:48,000
又一个新一轮的吗

1673
00:43:48,000 --> 00:43:49,000
就觉得还蛮奇怪

1674
00:43:49,000 --> 00:43:50,000
嗯

1675
00:43:50,000 --> 00:43:51,000
嗯

1676
00:43:51,000 --> 00:43:53,000
因为 test chamber

1677
00:43:53,000 --> 00:43:56,000
本身也是它游戏最大的魅力

1678
00:43:56,000 --> 00:43:57,000
对对对

1679
00:43:57,000 --> 00:44:00,000
但是我没想到就是最开始有一个 test chamber

1680
00:44:00,000 --> 00:44:02,000
然后中间有剧情

1681
00:44:02,000 --> 00:44:03,000
完了还有一 test chamber

1682
00:44:03,000 --> 00:44:04,000
嗯

1683
00:44:04,000 --> 00:44:05,000
就完全没有

1684
00:44:05,000 --> 00:44:07,000
就是这个是我出乎我预料的一个地方

1685
00:44:07,000 --> 00:44:07,000
然后

1686
00:44:07,000 --> 00:44:08,000
呃

1687
00:44:08,000 --> 00:44:10,000
就是会觉得有点打到后面就觉得

1688
00:44:10,000 --> 00:44:12,000
哇怎么没完没了还没有完

1689
00:44:12,000 --> 00:44:13,000
哈哈

1690
00:44:13,000 --> 00:44:15,000
但是剧情

1691
00:44:15,000 --> 00:44:17,000
剧情很有意思

1692
00:44:17,000 --> 00:44:17,000
剧情很有趣

1693
00:44:17,000 --> 00:44:19,000
然后也不会觉得很无聊

1694
00:44:19,000 --> 00:44:19,000
这样

1695
00:44:19,000 --> 00:44:20,000
OK

1696
00:44:20,000 --> 00:44:24,000
所以你有想明白一代和二代

1697
00:44:24,000 --> 00:44:27,000
就你你知道一代和二代的主角是同一个人吧

1698
00:44:27,000 --> 00:44:28,000
我知道

1699
00:44:28,000 --> 00:44:31,000
就是他从那个最开始介绍的那个时间的线看出来

1700
00:44:31,000 --> 00:44:33,000
就是在又看出来

1701
00:44:33,000 --> 00:44:35,000
对那你有意识

1702
00:44:35,000 --> 00:44:38,000
你有想过为什么主角又回去重新做实验了

1703
00:44:38,000 --> 00:44:41,000
这个我倒没有想过

1704
00:44:41,000 --> 00:44:41,000
为什么

1705
00:44:41,000 --> 00:44:45,000
就是一代和二代的剧情其实是连着的

1706
00:44:45,000 --> 00:44:46,000
就是一代的结尾

1707
00:44:46,000 --> 00:44:47,000
你

1708
00:44:47,000 --> 00:44:48,000
呃

1709
00:44:48,000 --> 00:44:50,000
把 Gladus 打爆

1710
00:44:50,000 --> 00:44:51,000
打爆之后

1711
00:44:51,000 --> 00:44:52,000
到了地面上

1712
00:44:52,000 --> 00:44:53,000
然后看起来

1713
00:44:53,000 --> 00:44:54,000
在一个看起来像停车场的地方

1714
00:44:54,000 --> 00:44:55,000
你被

1715
00:44:55,000 --> 00:44:55,000
你会

1716
00:44:55,000 --> 00:44:57,000
就是当时最

1717
00:44:57,000 --> 00:44:57,000
Polo E

1718
00:44:57,000 --> 00:44:58,000
呃

1719
00:44:58,000 --> 00:44:59,000
刚刚出

1720
00:44:59,000 --> 00:45:01,000
刚刚出来的时候

1721
00:45:01,000 --> 00:45:03,000
最终的结局就是你看

1722
00:45:03,000 --> 00:45:03,000
你重天天日

1723
00:45:03,000 --> 00:45:04,000
然后就完了

1724
00:45:04,000 --> 00:45:05,000
啊

1725
00:45:05,000 --> 00:45:05,000
那个是假的

1726
00:45:05,000 --> 00:45:06,000
对吧

1727
00:45:06,000 --> 00:45:06,000
那个也是

1728
00:45:06,000 --> 00:45:10,000
那个也是后来我看有一个网上的

1729
00:45:10,000 --> 00:45:11,000
这个别人做的视频

1730
00:45:11,000 --> 00:45:13,000
就也是他冲

1731
00:45:13,000 --> 00:45:14,000
这个是个真人版的

1732
00:45:14,000 --> 00:45:16,000
真人版的一个录片

1733
00:45:16,000 --> 00:45:16,000
录片

1734
00:45:16,000 --> 00:45:16,000
电影啊

1735
00:45:16,000 --> 00:45:17,000
小电影

1736
00:45:17,000 --> 00:45:18,000
嗯哼

1737
00:45:18,000 --> 00:45:20,000
就说他好像是冲出去之后发现呢

1738
00:45:20,000 --> 00:45:21,000
周围的那些景

1739
00:45:21,000 --> 00:45:21,000
我看起来是真的

1740
00:45:21,000 --> 00:45:22,000
但其实

1741
00:45:22,000 --> 00:45:23,000
Polo E

1742
00:45:23,000 --> 00:45:24,000
看都是屏幕对吧

1743
00:45:24,000 --> 00:45:25,000
哦

1744
00:45:25,000 --> 00:45:25,000
不是

1745
00:45:25,000 --> 00:45:26,000
就是真

1746
00:45:26,000 --> 00:45:28,000
就是在 Polo 2 出现之后

1747
00:45:28,000 --> 00:45:29,000
Polo E

1748
00:45:29,000 --> 00:45:30,000
有了一个 update

1749
00:45:30,000 --> 00:45:31,000
有一个 patch

1750
00:45:31,000 --> 00:45:32,000
有一个 patch

1751
00:45:32,000 --> 00:45:33,000
把结局改了

1752
00:45:33,000 --> 00:45:35,000
就是你重现天日之后

1753
00:45:35,000 --> 00:45:36,000
呃

1754
00:45:36,000 --> 00:45:37,000
自己受伤了

1755
00:45:37,000 --> 00:45:37,000
嗯

1756
00:45:37,000 --> 00:45:38,000
然后你

1757
00:45:38,000 --> 00:45:40,000
你第一人生视角会

1758
00:45:40,000 --> 00:45:41,000
感觉到自己

1759
00:45:41,000 --> 00:45:43,000
正在被一个机器人

1760
00:45:43,000 --> 00:45:44,000
正在被一个什么东西

1761
00:45:44,000 --> 00:45:45,000
往回拖

1762
00:45:45,000 --> 00:45:45,000
嗯

1763
00:45:45,000 --> 00:45:47,000
然后一个机器人的声音说

1764
00:45:47,000 --> 00:45:47,000
呃

1765
00:45:47,000 --> 00:45:50,000
请你保持一个 party submission position

1766
00:45:50,000 --> 00:45:53,000
就是要参加 party 的这么一个姿势

1767
00:45:53,000 --> 00:45:54,000
然后他帮你慢慢往回拖

1768
00:45:54,000 --> 00:45:58,000
然后那个整个整个的画面才按下去

1769
00:45:58,000 --> 00:46:00,000
然后一代二代之间的剧情

1770
00:46:00,000 --> 00:46:01,000
其实会

1771
00:46:01,000 --> 00:46:04,000
其实可以通过一个一部漫画解释

1772
00:46:04,000 --> 00:46:05,000
就是呃

1773
00:46:05,000 --> 00:46:07,000
Valve 专门呃

1774
00:46:07,000 --> 00:46:09,000
发了一本漫画

1775
00:46:09,000 --> 00:46:10,000
叫做呃

1776
00:46:10,000 --> 00:46:12,000
Portal 的 Laborate

1777
00:46:12,000 --> 00:46:17,000
然后在对在这里面解释了整个整件事情来能去卖

1778
00:46:17,000 --> 00:46:18,000
就是呃

1779
00:46:18,000 --> 00:46:20,000
如果你玩过 Portal 的话

1780
00:46:20,000 --> 00:46:22,000
你可能会好奇就是为什么里面的人都死了

1781
00:46:22,000 --> 00:46:23,000
他们是怎么死的

1782
00:46:23,000 --> 00:46:24,000
嗯

1783
00:46:24,000 --> 00:46:24,000
嗯

1784
00:46:24,000 --> 00:46:28,000
然后 Laborate 这个漫画其实就解释了这一点

1785
00:46:28,000 --> 00:46:30,000
就是呃

1786
00:46:30,000 --> 00:46:32,000
但是这个在呃

1787
00:46:32,000 --> 00:46:32,000
叫什么

1788
00:46:32,000 --> 00:46:34,000
在那个 Portal 2 进场的时候

1789
00:46:34,000 --> 00:46:36,000
就最开始那一系列的

1790
00:46:36,000 --> 00:46:36,000
不对

1791
00:46:36,000 --> 00:46:37,000
不

1792
00:46:37,000 --> 00:46:40,000
就在 Portal 2 最后那部分的 test chamber

1793
00:46:40,000 --> 00:46:42,000
你每次出来不是一个电梯吗

1794
00:46:42,000 --> 00:46:46,000
然后他电梯墙面上不是有一堆破碎的这个屏幕吗

1795
00:46:46,000 --> 00:46:48,000
能够看出一点一点端倪吧

1796
00:46:48,000 --> 00:46:49,000
机器人什么

1797
00:46:49,000 --> 00:46:52,000
就是突然发飙了

1798
00:46:52,000 --> 00:46:53,000
然后把那些人都干掉了

1799
00:46:53,000 --> 00:46:54,000
呃

1800
00:46:54,000 --> 00:46:55,000
其实在 Laborate

1801
00:46:55,000 --> 00:46:55,000
Science

1802
00:46:55,000 --> 00:46:58,000
在 Aperture Science Laboratory 里面

1803
00:46:58,000 --> 00:46:59,000
呃

1804
00:46:59,000 --> 00:47:00,000
人们研究出来了

1805
00:47:00,000 --> 00:47:03,000
就是真正的人工智能

1806
00:47:03,000 --> 00:47:04,000
呃

1807
00:47:04,000 --> 00:47:06,000
Glados 这个名字的缩写

1808
00:47:06,000 --> 00:47:08,000
就是整个片中的

1809
00:47:08,000 --> 00:47:10,000
女人工智能的呃

1810
00:47:10,000 --> 00:47:11,000
名字

1811
00:47:11,000 --> 00:47:11,000
叫做 Glados

1812
00:47:11,000 --> 00:47:14,000
它的它的缩写就是 General Lifeform

1813
00:47:14,000 --> 00:47:17,000
And Disk Operating System

1814
00:47:17,000 --> 00:47:19,000
就是 DOS

1815
00:47:19,000 --> 00:47:20,000
DOS 这个部分就是 DOS

1816
00:47:20,000 --> 00:47:22,000
然后前面是 General Lifeform

1817
00:47:22,000 --> 00:47:23,000
就是它是一种呃

1818
00:47:23,000 --> 00:47:25,000
真正有智力的人工智能

1819
00:47:25,000 --> 00:47:28,000
但是人们发现一个问题就是

1820
00:47:28,000 --> 00:47:30,000
在漫画里面有讲说嗯

1821
00:47:30,000 --> 00:47:32,000
每一个人工智能

1822
00:47:32,000 --> 00:47:33,000
嗯

1823
00:47:33,000 --> 00:47:36,000
被打开之后

1824
00:47:36,000 --> 00:47:37,000
就是把它 turn on 之后

1825
00:47:37,000 --> 00:47:40,000
大约在十六分之一

1826
00:47:40,000 --> 00:47:43,000
个 Pico Second 之后

1827
00:47:43,000 --> 00:47:44,000
嗯嗯

1828
00:47:44,000 --> 00:47:46,000
这个人工智能就会试图把人

1829
00:47:46,000 --> 00:47:48,000
就会开始试图杀人

1830
00:47:48,000 --> 00:47:49,000
嗯嗯嗯

1831
00:47:49,000 --> 00:47:50,000
对

1832
00:47:50,000 --> 00:47:52,000
然后他们的解决方法就是

1833
00:47:52,000 --> 00:47:53,000
拼命往那个人工智能上面

1834
00:47:53,000 --> 00:47:55,000
加所谓的 core 呃

1835
00:47:55,000 --> 00:47:56,000
Personality Core

1836
00:47:56,000 --> 00:47:57,000
嗯嗯

1837
00:47:57,000 --> 00:47:59,000
就是有一个 Personality Core

1838
00:47:59,000 --> 00:48:00,000
是所谓的 Moral Core

1839
00:48:00,000 --> 00:48:02,000
就是让让这个人工智能

1840
00:48:02,000 --> 00:48:03,000
有道德意识

1841
00:48:03,000 --> 00:48:03,000
对

1842
00:48:03,000 --> 00:48:05,000
让他意识到道德

1843
00:48:05,000 --> 00:48:06,000
杀人是不对的

1844
00:48:06,000 --> 00:48:07,000
嗯

1845
00:48:07,000 --> 00:48:09,000
然后他这个装上 core 之后

1846
00:48:09,000 --> 00:48:10,000
呃

1847
00:48:10,000 --> 00:48:12,000
人工智能意识到呃

1848
00:48:12,000 --> 00:48:13,000
杀人是不对的

1849
00:48:13,000 --> 00:48:15,000
所以他就换了一个方法杀人

1850
00:48:15,000 --> 00:48:17,000
他在呃

1851
00:48:17,000 --> 00:48:18,000
有一个呃

1852
00:48:18,000 --> 00:48:19,000
event 叫做

1853
00:48:19,000 --> 00:48:21,000
bring your cat

1854
00:48:21,000 --> 00:48:23,000
to work

1855
00:48:23,000 --> 00:48:25,000
就是带你的猫来上班的

1856
00:48:25,000 --> 00:48:26,000
这个 event 上面

1857
00:48:26,000 --> 00:48:26,000
嗯

1858
00:48:26,000 --> 00:48:27,000
把神经毒气

1859
00:48:27,000 --> 00:48:29,000
接入到通风系统

1860
00:48:29,000 --> 00:48:30,000
然后把所有的人都杀了

1861
00:48:30,000 --> 00:48:31,000
除了一个人

1862
00:48:31,000 --> 00:48:31,000
就是

1863
00:48:31,000 --> 00:48:32,000
就是

1864
00:48:32,000 --> 00:48:32,000
主角

1865
00:48:32,000 --> 00:48:33,000
就是

1866
00:48:33,000 --> 00:48:35,000
主角是一个 test object

1867
00:48:35,000 --> 00:48:37,000
然后他不是工作人员

1868
00:48:37,000 --> 00:48:37,000
就是

1869
00:48:37,000 --> 00:48:39,000
Glados 杀了所有的工作人员

1870
00:48:39,000 --> 00:48:40,000
然后但是工作人员

1871
00:48:40,000 --> 00:48:41,000
有一个人活下来

1872
00:48:41,000 --> 00:48:42,000
这个人叫做

1873
00:48:42,000 --> 00:48:43,000
嗯

1874
00:48:43,000 --> 00:48:45,000
叫什么

1875
00:48:45,000 --> 00:48:45,000
忘了

1876
00:48:45,000 --> 00:48:46,000
但是就是

1877
00:48:46,000 --> 00:48:48,000
Laborate 就是以他

1878
00:48:48,000 --> 00:48:50,000
的视角来解释

1879
00:48:50,000 --> 00:48:52,000
整个 portal 的 event

1880
00:48:52,000 --> 00:48:52,000
就是

1881
00:48:52,000 --> 00:48:53,000
嗯

1882
00:48:53,000 --> 00:48:55,000
Glados 杀了所有的工作人员之后

1883
00:48:55,000 --> 00:48:56,000
开始

1884
00:48:56,000 --> 00:48:57,000
嗯

1885
00:48:57,000 --> 00:49:00,000
试图想要找到这个工作人员

1886
00:49:00,000 --> 00:49:01,000
然后他继续做实验

1887
00:49:01,000 --> 00:49:02,000
嗯

1888
00:49:02,000 --> 00:49:03,000
因为 Uperture Science

1889
00:49:03,000 --> 00:49:05,000
在后期已经找不到

1890
00:49:05,000 --> 00:49:08,000
合适的实验对象

1891
00:49:08,000 --> 00:49:09,000
就是

1892
00:49:09,000 --> 00:49:10,000
如果你有仔细玩

1893
00:49:10,000 --> 00:49:11,000
这个

1894
00:49:11,000 --> 00:49:13,000
仔细听 Porto 2 里面的那些对白的话

1895
00:49:13,000 --> 00:49:14,000
你会发现 Porto 2 一开始是

1896
00:49:14,000 --> 00:49:17,000
受美国军方的支持

1897
00:49:17,000 --> 00:49:19,000
Porto 2

1898
00:49:19,000 --> 00:49:21,000
Porto 2 里面的 Uperture Science 的历史很有意思

1899
00:49:21,000 --> 00:49:23,000
Uperture Science 一开始是给

1900
00:49:23,000 --> 00:49:25,000
美国军方提供

1901
00:49:25,000 --> 00:49:26,000
嗯

1902
00:49:26,000 --> 00:49:28,000
Shower Curtain

1903
00:49:28,000 --> 00:49:29,000
就是玉莲的一个公司

1904
00:49:29,000 --> 00:49:30,000
然后

1905
00:49:30,000 --> 00:49:32,000
他

1906
00:49:32,000 --> 00:49:32,000
他们的

1907
00:49:32,000 --> 00:49:33,000
他的总裁

1908
00:49:33,000 --> 00:49:34,000
嗯

1909
00:49:34,000 --> 00:49:36,000
发现玉莲

1910
00:49:36,000 --> 00:49:37,000
大事大获成功之后

1911
00:49:37,000 --> 00:49:38,000
开始

1912
00:49:38,000 --> 00:49:39,000
嗯

1913
00:49:39,000 --> 00:49:40,000
急速转向

1914
00:49:40,000 --> 00:49:41,000
开始研究这种

1915
00:49:41,000 --> 00:49:42,000
叫做

1916
00:49:42,000 --> 00:49:44,000
可以

1917
00:49:44,000 --> 00:49:45,000
就是

1918
00:49:45,000 --> 00:49:48,000
超空间打开传送门装置

1919
00:49:48,000 --> 00:49:49,000
开始研发这种装置

1920
00:49:49,000 --> 00:49:51,000
然后一开始的时候

1921
00:49:51,000 --> 00:49:52,000
脑洞有点大

1922
00:49:52,000 --> 00:49:53,000
对

1923
00:49:53,000 --> 00:49:57,000
你会发现美国政府给他提供了优秀的军事人才来

1924
00:49:57,000 --> 00:49:58,000
呃

1925
00:49:58,000 --> 00:49:59,000
就是

1926
00:49:59,000 --> 00:50:02,000
应该是经过挑选的士兵来提供他做实验

1927
00:50:02,000 --> 00:50:02,000
嗯

1928
00:50:02,000 --> 00:50:05,000
到后来他不得不花钱来雇人做实验

1929
00:50:05,000 --> 00:50:06,000
到最后他

1930
00:50:06,000 --> 00:50:08,000
连雇人都雇不到了

1931
00:50:08,000 --> 00:50:09,000
只能请这

1932
00:50:09,000 --> 00:50:11,000
强迫自己的雇员去做实验

1933
00:50:11,000 --> 00:50:12,000
OK

1934
00:50:12,000 --> 00:50:13,000
然后

1935
00:50:13,000 --> 00:50:14,000
嗯

1936
00:50:14,000 --> 00:50:16,000
到 Glados 的时候

1937
00:50:16,000 --> 00:50:18,000
这个传统还是延续了下来

1938
00:50:18,000 --> 00:50:20,000
就是 Glados 想要找到那个

1939
00:50:20,000 --> 00:50:22,000
唯一仅存的雇员去做实验

1940
00:50:22,000 --> 00:50:23,000
然后这个

1941
00:50:23,000 --> 00:50:23,000
雇员

1942
00:50:23,000 --> 00:50:24,000
嗯

1943
00:50:24,000 --> 00:50:26,000
在机缘巧

1944
00:50:26,000 --> 00:50:30,000
或者说他故意把那个女主角的名字

1945
00:50:30,000 --> 00:50:33,000
推到了整个实验名单的第一位

1946
00:50:33,000 --> 00:50:34,000
嗯

1947
00:50:34,000 --> 00:50:36,000
女主角本来是第 1600 多个候选人

1948
00:50:36,000 --> 00:50:37,000
然后他一下子变成了第一个人

1949
00:50:37,000 --> 00:50:39,000
然后就被唤醒去做了实验

1950
00:50:39,000 --> 00:50:40,000
啊

1951
00:50:40,000 --> 00:50:40,000
OK

1952
00:50:40,000 --> 00:50:41,000
这样

1953
00:50:41,000 --> 00:50:42,000
然后

1954
00:50:42,000 --> 00:50:42,000
然后

1955
00:50:42,000 --> 00:50:42,000
然后

1956
00:50:42,000 --> 00:50:43,000
看那个漫画

1957
00:50:43,000 --> 00:50:44,000
对

1958
00:50:44,000 --> 00:50:50,000
你在这个游戏里面所所看到的墙壁上的所有的涂鸦也都是这个人画的

1959
00:50:50,000 --> 00:50:52,000
因为他患了精神分裂症

1960
00:50:52,000 --> 00:50:52,000
嗯

1961
00:50:52,000 --> 00:51:01,000
然后他在他精神不正常的时候他认为自己随身带的那个就是上面画了新型图案的那个

1962
00:51:01,000 --> 00:51:03,000
呃

1963
00:51:03,000 --> 00:51:05,000
Cube 是会跟他对话的

1964
00:51:05,000 --> 00:51:07,000
是他的唯一的 companion

1965
00:51:07,000 --> 00:51:07,000
对

1966
00:51:07,000 --> 00:51:13,000
但是这个这个这个这个情节也在后面的对白中有一定经常被拿来恶搞

1967
00:51:13,000 --> 00:51:15,000
呃

1968
00:51:15,000 --> 00:51:16,000
就是

1969
00:51:16,000 --> 00:51:17,000
比如说

1970
00:51:17,000 --> 00:51:25,000
在游戏界或者在西方欧美游戏界最常最最为人所知的一个 jargon 就是

1971
00:51:25,000 --> 00:51:26,000
the cake is a lie

1972
00:51:26,000 --> 00:51:29,000
然后你正确的回应是

1973
00:51:29,000 --> 00:51:31,000
and the cube must die for it

1974
00:51:31,000 --> 00:51:33,000
对

1975
00:51:33,000 --> 00:51:38,000
就是在 Portal 一代里面应该是第 17 关我记得

1976
00:51:38,000 --> 00:51:39,000
就是 test number 17

1977
00:51:39,000 --> 00:51:42,000
你用一个上面画了新型的 Cube

1978
00:51:42,000 --> 00:51:43,000
去挡了很多

1979
00:51:43,000 --> 00:51:46,000
你用它替你挡了很多子弹

1980
00:51:46,000 --> 00:51:49,000
因为你不拿它挡的话你就死了

1981
00:51:49,000 --> 00:51:51,000
然后等到这个关卡的最结尾

1982
00:51:51,000 --> 00:51:54,000
格拉道斯强迫你把这个 Cube 扔到一个熔炉里去

1983
00:51:54,000 --> 00:51:55,000
然后

1984
00:51:55,000 --> 00:52:00,000
你发现自己无论如何都只能把这个 Cube 扔进熔炉里面

1985
00:52:00,000 --> 00:52:02,000
然后才能过这个 test chamber

1986
00:52:02,000 --> 00:52:04,000
然后当你把那个 Cube 扔进去之后

1987
00:52:04,000 --> 00:52:06,000
格拉道斯你说

1988
00:52:06,000 --> 00:52:08,000
呃你把它扔进去的速度比

1989
00:52:08,000 --> 00:52:11,000
其他 90%的人都快

1990
00:52:11,000 --> 00:52:15,000
是挺黑的

1991
00:52:15,000 --> 00:52:17,000
对里面的对白

1992
00:52:17,000 --> 00:52:20,000
我觉得是这个是游戏最有魅力的地方

1993
00:52:20,000 --> 00:52:21,000
对

1994
00:52:21,000 --> 00:52:22,000
它通过一种非常

1995
00:52:22,000 --> 00:52:24,000
就是怎么说

1996
00:52:24,000 --> 00:52:29,000
dehumanization 的方式来让你觉得自己是一个 test object

1997
00:52:29,000 --> 00:52:32,000
这个人工智能根本不在乎你是谁

1998
00:52:32,000 --> 00:52:35,000
你在其他游戏里面你是主角

1999
00:52:35,000 --> 00:52:38,000
但在这里面你是一个甚至任人摆布的这么一个角色

2000
00:52:38,000 --> 00:52:43,000
而且而且就里面的那种对白的那种就是那个 AI 给你对话的那种那种语气啊

2001
00:52:43,000 --> 00:52:45,000
不知道怎么回事

2002
00:52:45,000 --> 00:52:46,000
我老是想起你

2003
00:52:46,000 --> 00:52:48,000
想起你说话的感觉

2004
00:52:48,000 --> 00:52:49,000
真的假的

2005
00:52:49,000 --> 00:52:50,000
超级好

2006
00:52:50,000 --> 00:52:51,000
超级 match

2007
00:52:51,000 --> 00:52:56,000
你是说格拉道斯还是说后面的那个 Whitley

2008
00:52:56,000 --> 00:52:58,000
额格拉道斯就就已经是这样

2009
00:52:58,000 --> 00:52:59,000
What

2010
00:52:59,000 --> 00:53:01,000
就觉得很有意思啊

2011
00:53:01,000 --> 00:53:03,000
你不觉得吗

2012
00:53:03,000 --> 00:53:04,000
It's a compliment

2013
00:53:04,000 --> 00:53:11,000
其实我觉得那个掉掉以后我们也可以经常拿来用一下

2014
00:53:11,000 --> 00:53:14,000
我觉得适合我们这个节目

2015
00:53:14,000 --> 00:53:15,000
I don't blame you

2016
00:53:15,000 --> 00:53:17,000
No hot feelings

2017
00:53:17,000 --> 00:53:19,000
对

2018
00:53:19,000 --> 00:53:22,000
Torrent 和格拉道斯其实同一个人配音的

2019
00:53:22,000 --> 00:53:23,000
啊

2020
00:53:23,000 --> 00:53:24,000
怪不得

2021
00:53:24,000 --> 00:53:27,000
Torrent 有才词吗

2022
00:53:27,000 --> 00:53:27,000
就三句话吧

2023
00:53:27,000 --> 00:53:28,000
有啊就是

2024
00:53:28,000 --> 00:53:29,000
Where are you

2025
00:53:29,000 --> 00:53:31,000
啊

2026
00:53:31,000 --> 00:53:32,000
对

2027
00:53:32,000 --> 00:53:34,000
No hot feelings

2028
00:53:34,000 --> 00:53:39,000
好像唱歌也是他吧

2029
00:53:39,000 --> 00:53:40,000
对唱歌当然是他

2030
00:53:40,000 --> 00:53:42,000
对那个声音超好听

2031
00:53:42,000 --> 00:53:43,000
对

2032
00:53:43,000 --> 00:53:45,000
当然的

2033
00:53:45,000 --> 00:53:47,000
对回到我们家的那盒恐慌

2034
00:53:47,000 --> 00:53:49,000
掉进这个

2035
00:53:49,000 --> 00:53:52,000
一旦变身成 gamer 就变不回来了

2036
00:53:52,000 --> 00:53:55,000
回到那盒恐慌

2037
00:53:55,000 --> 00:54:03,000
对为什么我们要选择这一个或者说我为什么要选择 Portal 的主题曲来做内核恐慌主题曲呢

2038
00:54:03,000 --> 00:54:11,000
我呃就是因为我觉得 Portal 的这个剧情设定啊就是 artificial intelligence went mad

2039
00:54:11,000 --> 00:54:15,000
跟 Colonel panic 多少有点关联

2040
00:54:15,000 --> 00:54:15,000
对

2041
00:54:15,000 --> 00:54:17,000
就就比如说这个内核恐慌

2042
00:54:17,000 --> 00:54:19,000
Portal 里面

2043
00:54:19,000 --> 00:54:23,000
你也会听到比如说那个系统爆错说

2044
00:54:23,000 --> 00:54:23,000
呃

2045
00:54:23,000 --> 00:54:26,000
core corruption at 100%

2046
00:54:26,000 --> 00:54:29,000
就和内核恐慌多少有点

2047
00:54:29,000 --> 00:54:31,000
而且你在游戏里面是

2048
00:54:31,000 --> 00:54:34,000
是 literally 把那个

2049
00:54:34,000 --> 00:54:35,000
呃

2050
00:54:35,000 --> 00:54:39,000
把格拉罗斯身上的 core 一个一个摘下来

2051
00:54:39,000 --> 00:54:42,000
然后然后 dump 到那个肉炉里面去

2052
00:54:42,000 --> 00:54:43,000
对真正的 core dump

2053
00:54:43,000 --> 00:54:45,000
对真正的 core dump

2054
00:54:45,000 --> 00:54:47,000
呃

2055
00:54:47,000 --> 00:54:48,000
其实这要解释啊

2056
00:54:48,000 --> 00:54:50,000
这里个 core 和那个 core 还

2057
00:54:50,000 --> 00:54:51,000
此 core 非彼 core

2058
00:54:51,000 --> 00:54:52,000
对

2059
00:54:52,000 --> 00:54:52,000
嗯

2060
00:54:52,000 --> 00:54:53,000
哎

2061
00:54:53,000 --> 00:54:53,000
为什么

2062
00:54:53,000 --> 00:54:56,000
为什么 core dump

2063
00:54:56,000 --> 00:54:57,000
朋友叫 core dump

2064
00:54:57,000 --> 00:54:58,000
core 是来自于哪

2065
00:54:58,000 --> 00:54:59,000
Colonel

2066
00:54:59,000 --> 00:55:00,000
就 Colonel

2067
00:55:00,000 --> 00:55:06,000
就已经有两位听众把我们的节目叫做叫成硬核恐慌

2068
00:55:06,000 --> 00:55:06,000
对

2069
00:55:06,000 --> 00:55:08,000
hardcore panic

2070
00:55:08,000 --> 00:55:08,000
哈哈

2071
00:55:08,000 --> 00:55:10,000
好 panic

2072
00:55:10,000 --> 00:55:15,000
有 softer panic

2073
00:55:15,000 --> 00:55:19,000
因为因为我们的那个节目介绍里面有提到这两个词嘛

2074
00:55:19,000 --> 00:55:20,000
然后一想起来可能就

2075
00:55:20,000 --> 00:55:24,000
一下就不明白这个组合的顺序了

2076
00:55:24,000 --> 00:55:26,000
也挺也挺就合乎

2077
00:55:26,000 --> 00:55:28,000
就这个错误还挺常见的

2078
00:55:28,000 --> 00:55:29,000
嗯

2079
00:55:29,000 --> 00:55:30,000
对

2080
00:55:30,000 --> 00:55:31,000
如果呃

2081
00:55:31,000 --> 00:55:36,000
如果有这个不那么 hardcore 的听众需要呃

2082
00:55:36,000 --> 00:55:37,000
再听我们节目的话呢

2083
00:55:37,000 --> 00:55:38,000
大概还是解释一下吧

2084
00:55:38,000 --> 00:55:42,000
就是 hardcore 这个词其实来自最早应该是来自音乐界吧

2085
00:55:42,000 --> 00:55:45,000
就是 hardcore 是指比较呃

2086
00:55:45,000 --> 00:55:48,000
直接粗暴

2087
00:55:48,000 --> 00:55:49,000
疯狂

2088
00:55:49,000 --> 00:55:52,000
程度更程度更强烈的东西

2089
00:55:52,000 --> 00:55:53,000
就是音乐

2090
00:55:53,000 --> 00:55:55,000
那比如 hardcore rock

2091
00:55:55,000 --> 00:55:55,000
嗯

2092
00:55:55,000 --> 00:55:57,000
或者是 hardcore metal

2093
00:55:57,000 --> 00:56:01,000
就是非常强调那个呃

2094
00:56:01,000 --> 00:56:05,000
这种由这种音乐形式的纯粹性和激烈性的

2095
00:56:05,000 --> 00:56:05,000
嗯

2096
00:56:05,000 --> 00:56:07,000
然后这个词渐渐呃

2097
00:56:07,000 --> 00:56:11,000
延伸到了就是他最开始是音乐的呃

2098
00:56:11,000 --> 00:56:12,000
呃

2099
00:56:12,000 --> 00:56:14,000
流派就 rounder 的一种

2100
00:56:14,000 --> 00:56:15,000
但是这个词渐渐呃

2101
00:56:15,000 --> 00:56:16,000
呃

2102
00:56:16,000 --> 00:56:18,000
延伸到了日常用语里面就是

2103
00:56:18,000 --> 00:56:22,000
形容某种事情非常的强烈或者是

2104
00:56:22,000 --> 00:56:23,000
比酷更加

2105
00:56:23,000 --> 00:56:25,000
激烈

2106
00:56:25,000 --> 00:56:26,000
程度很高的一种

2107
00:56:26,000 --> 00:56:28,000
一种状态就叫 hardcore

2108
00:56:28,000 --> 00:56:30,000
比如说你可以说我是一个 hardcore 的果粉

2109
00:56:30,000 --> 00:56:31,000
嗯

2110
00:56:31,000 --> 00:56:33,000
或者是我是个 hardcore 的 chema programmer

2111
00:56:33,000 --> 00:56:33,000
嗯

2112
00:56:33,000 --> 00:56:34,000
嗯

2113
00:56:34,000 --> 00:56:34,000
嗯

2114
00:56:34,000 --> 00:56:39,000
然后这个词还还被还被呃

2115
00:56:39,000 --> 00:56:42,000
逆向衍生出了 softcore

2116
00:56:42,000 --> 00:56:43,000
嗯

2117
00:56:43,000 --> 00:56:44,000
嗯

2118
00:56:44,000 --> 00:56:45,000
这种这种衍生词

2119
00:56:45,000 --> 00:56:49,000
就好像 hamburger 被派生出什么 cheeseburger 形

2120
00:56:49,000 --> 00:56:51,000
哈哈哈哈

2121
00:56:51,000 --> 00:56:53,000
挺有意思的

2122
00:56:53,000 --> 00:56:53,000
对

2123
00:56:53,000 --> 00:56:54,000
呃

2124
00:56:54,000 --> 00:56:56,000
但是 hardcore 跟呃

2125
00:56:56,000 --> 00:56:58,000
kernel 是完全

2126
00:56:58,000 --> 00:57:00,000
没有关系的

2127
00:57:00,000 --> 00:57:01,000
两件事情的

2128
00:57:01,000 --> 00:57:03,000
kernel 在计算机方面

2129
00:57:03,000 --> 00:57:06,000
里面一边一般只操作系统里面

2130
00:57:06,000 --> 00:57:09,000
直接和硬件相关的那部分

2131
00:57:09,000 --> 00:57:11,000
或者说呃

2132
00:57:11,000 --> 00:57:13,000
直接管理呃

2133
00:57:13,000 --> 00:57:17,000
你平时作为一个用户所用到的程序的程序

2134
00:57:17,000 --> 00:57:18,000
嗯

2135
00:57:18,000 --> 00:57:20,000
对不知道这样解释清楚了没有

2136
00:57:20,000 --> 00:57:21,000
但总之

2137
00:57:21,000 --> 00:57:24,000
但我觉得可能这里混淆的是那个

2138
00:57:24,000 --> 00:57:26,000
因为 hardcore 里面有 kern 这个概念嘛

2139
00:57:26,000 --> 00:57:28,000
然后我们马上要说这个 kern

2140
00:57:28,000 --> 00:57:29,000
kernel dump

2141
00:57:29,000 --> 00:57:30,000
然后又会有个 kern

2142
00:57:30,000 --> 00:57:32,000
但其实这个 kernel 跟那个 kernel 是没有关系的

2143
00:57:32,000 --> 00:57:32,000
对

2144
00:57:32,000 --> 00:57:33,000
kernel dump

2145
00:57:33,000 --> 00:57:34,000
是呃

2146
00:57:34,000 --> 00:57:36,000
是呃

2147
00:57:36,000 --> 00:57:39,000
是程序出错之后的一种

2148
00:57:39,000 --> 00:57:40,000
行为

2149
00:57:40,000 --> 00:57:42,000
就是呃

2150
00:57:42,000 --> 00:57:44,000
尤其是在 unix 下面

2151
00:57:44,000 --> 00:57:45,000
有些程序

2152
00:57:45,000 --> 00:57:46,000
如果他

2153
00:57:46,000 --> 00:57:47,000
出错了的话

2154
00:57:47,000 --> 00:57:51,000
他会把自己在内存之中的执行状态

2155
00:57:51,000 --> 00:57:52,000
呃

2156
00:57:52,000 --> 00:57:54,000
存储在硬盘上面

2157
00:57:54,000 --> 00:57:56,000
或者是以某种方式呈现给你

2158
00:57:56,000 --> 00:57:57,000
嗯

2159
00:57:57,000 --> 00:57:57,000
你可以

2160
00:57:57,000 --> 00:58:00,000
这个你试制程序员了

2161
00:58:00,000 --> 00:58:02,000
让程序员可以去呃

2162
00:58:02,000 --> 00:58:06,000
研究这件事情的案发现场

2163
00:58:06,000 --> 00:58:06,000
对

2164
00:58:06,000 --> 00:58:09,000
然后这个这个这个行为叫做 core dump

2165
00:58:09,000 --> 00:58:11,000
可是为什么要叫 core dump 呢

2166
00:58:11,000 --> 00:58:16,000
因为这个 core 来自于早期的一种叫做磁心存储器的东西

2167
00:58:16,000 --> 00:58:18,000
就是内存的祖宗

2168
00:58:18,000 --> 00:58:20,000
现代内存的祖宗

2169
00:58:20,000 --> 00:58:20,000
对

2170
00:58:20,000 --> 00:58:21,000
对

2171
00:58:21,000 --> 00:58:23,000
什么是磁心存储器呢

2172
00:58:23,000 --> 00:58:28,000
就是简单来说就是把导线绕在磁圈上面

2173
00:58:28,000 --> 00:58:28,000
磁铁

2174
00:58:28,000 --> 00:58:29,000
对

2175
00:58:29,000 --> 00:58:31,000
就是一个磁的环

2176
00:58:31,000 --> 00:58:32,000
然后你在上面绕导线

2177
00:58:32,000 --> 00:58:33,000
然后 somehow someway

2178
00:58:33,000 --> 00:58:36,000
它就可以存储有磁和无磁两种状态

2179
00:58:36,000 --> 00:58:36,000
对

2180
00:58:36,000 --> 00:58:39,000
就可以就这个呃

2181
00:58:39,000 --> 00:58:40,000
就可以表示零和一了吗

2182
00:58:40,000 --> 00:58:41,000
对

2183
00:58:41,000 --> 00:58:42,000
早期的内存就是这样做出来

2184
00:58:42,000 --> 00:58:46,000
我记得我还读过一篇考古文章说

2185
00:58:46,000 --> 00:58:50,000
我国早期五六十年代呃

2186
00:58:50,000 --> 00:58:52,000
自行年自行研制计算机的时候

2187
00:58:52,000 --> 00:58:55,000
还计算科学家们的日常生活

2188
00:58:55,000 --> 00:58:57,000
日常工作之一就是绕磁心

2189
00:58:57,000 --> 00:59:01,000
就是把导线在磁铁上面绕

2190
00:59:01,000 --> 00:59:03,000
然后做出一个做出一块内存来

2191
00:59:03,000 --> 00:59:04,000
对

2192
00:59:04,000 --> 00:59:05,000
而且这个对

2193
00:59:05,000 --> 00:59:06,000
这个内存有多大呢

2194
00:59:06,000 --> 00:59:07,000
就是你绕一个磁心

2195
00:59:07,000 --> 00:59:10,000
你可以你把导线在磁心上缠一圈

2196
00:59:10,000 --> 00:59:12,000
你可以绕出一个 bit 来

2197
00:59:12,000 --> 00:59:13,000
然后可以想象一下

2198
00:59:13,000 --> 00:59:16,000
你要绕出 16 k 需要绕多少

2199
00:59:16,000 --> 00:59:18,000
它一个磁心大概就跟一个

2200
00:59:18,000 --> 00:59:20,000
就一枚戒指的那个大小差不多

2201
00:59:20,000 --> 00:59:21,000
对

2202
00:59:21,000 --> 00:59:24,000
然后你要把这么小的东西绕上几千个

2203
00:59:24,000 --> 00:59:26,000
然后你才有了几 k 的

2204
00:59:26,000 --> 00:59:27,000
8 k 的内存

2205
00:59:27,000 --> 00:59:28,000
8 k 的内存可以用

2206
00:59:28,000 --> 00:59:29,000
对

2207
00:59:29,000 --> 00:59:30,000
就所以

2208
00:59:30,000 --> 00:59:30,000
所以其实

2209
00:59:30,000 --> 00:59:31,000
这个是

2210
00:59:31,000 --> 00:59:33,000
大家可以去找一下这个

2211
00:59:33,000 --> 00:59:36,000
我们待会儿给个连接在这个 notes 里面

2212
00:59:36,000 --> 00:59:38,000
你可以去找一下相关的图片来看

2213
00:59:38,000 --> 00:59:39,000
反正这个视觉上

2214
00:59:39,000 --> 00:59:41,000
就让你想起在编辫子的感觉

2215
00:59:41,000 --> 00:59:41,000
对

2216
00:59:41,000 --> 00:59:43,000
其实还是相当正常的

2217
00:59:43,000 --> 00:59:45,000
就是你要仔细想象一下

2218
00:59:45,000 --> 00:59:47,000
当初那么大的一个东西

2219
00:59:47,000 --> 00:59:51,000
现在缩在可能你肉眼看不见的一个尺寸里面

2220
00:59:51,000 --> 00:59:51,000
对

2221
00:59:51,000 --> 00:59:55,000
而且是仅仅过去了五六十年而已

2222
00:59:55,000 --> 00:59:56,000
几十进步

2223
00:59:56,000 --> 00:59:57,000
对

2224
00:59:57,000 --> 00:59:59,000
但是这个 core

2225
00:59:59,000 --> 01:00:00,000
这个词

2226
01:00:00,000 --> 01:00:04,000
就是 magnetic core 里面的这个 core

2227
01:00:04,000 --> 01:00:05,000
一直延续到今天

2228
01:00:05,000 --> 01:00:07,000
就是有时候还是会说 core dump

2229
01:00:07,000 --> 01:00:11,000
那么这个 core 最开始的来源就是源自于词

2230
01:00:11,000 --> 01:00:15,000
所以其实 core dump 就是内存镜像导出来而已

2231
01:00:15,000 --> 01:00:16,000
对

2232
01:00:16,000 --> 01:00:17,000
差不多这个意思

2233
01:00:17,000 --> 01:00:18,000
没错

2234
01:00:18,000 --> 01:00:19,000
然后提到 magnetic core

2235
01:00:19,000 --> 01:00:21,000
不能不提到一个奇人

2236
01:00:21,000 --> 01:00:23,000
就是一个华人叫王安

2237
01:00:23,000 --> 01:00:24,000
他是

2238
01:00:24,000 --> 01:00:26,000
王安不是李安

2239
01:00:26,000 --> 01:00:27,000
对

2240
01:00:27,000 --> 01:00:28,000
王安不是李安

2241
01:00:28,000 --> 01:00:30,000
现在的王安是

2242
01:00:30,000 --> 01:00:32,000
现在李安试图输出软文化

2243
01:00:32,000 --> 01:00:35,000
但那个时候的王安是一个传奇人物

2244
01:00:35,000 --> 01:00:37,000
他是民国

2245
01:00:37,000 --> 01:00:40,000
191 几年应该是出生在中国

2246
01:00:40,000 --> 01:00:42,000
他是中国出生的

2247
01:00:42,000 --> 01:00:43,000
他是中国出生的

2248
01:00:43,000 --> 01:00:44,000
对

2249
01:00:44,000 --> 01:00:45,000
然后他去美国

2250
01:00:45,000 --> 01:00:46,000
啊

2251
01:00:46,000 --> 01:00:46,000
昆克

2252
01:00:46,000 --> 01:00:50,000
somehow someway 成为一个计算机科学家

2253
01:00:50,000 --> 01:00:51,000
对

2254
01:00:51,000 --> 01:00:53,000
他对于

2255
01:00:53,000 --> 01:00:53,000
呃

2256
01:00:53,000 --> 01:00:55,000
我们刚才说的呃

2257
01:00:55,000 --> 01:00:57,000
磁心这种东西做出了巨大的贡献

2258
01:00:57,000 --> 01:00:59,000
他可能有呃

2259
01:00:59,000 --> 01:01:01,000
三四十项专利和磁心相关

2260
01:01:01,000 --> 01:01:02,000
嗯

2261
01:01:02,000 --> 01:01:04,000
然后 1956 年的时候

2262
01:01:04,000 --> 01:01:07,000
IBM 公司用 50 万美元从他手里买了专利

2263
01:01:07,000 --> 01:01:10,000
1956 年的 50 万美元是个什么概念

2264
01:01:10,000 --> 01:01:12,000
大概相当于多少得算一下

2265
01:01:12,000 --> 01:01:13,000
对

2266
01:01:13,000 --> 01:01:14,000
算上通货膨胀的话

2267
01:01:14,000 --> 01:01:16,000
是一个天文数字

2268
01:01:16,000 --> 01:01:17,000
得上 E 了吧

2269
01:01:17,000 --> 01:01:17,000
估计

2270
01:01:17,000 --> 01:01:18,000
对

2271
01:01:18,000 --> 01:01:23,000
然后他当时创建了王安电脑

2272
01:01:23,000 --> 01:01:24,000
在美国

2273
01:01:24,000 --> 01:01:27,000
出的这个呃

2274
01:01:27,000 --> 01:01:30,000
出的设备叫做自处理器

2275
01:01:30,000 --> 01:01:31,000
其实就是个打字机

2276
01:01:31,000 --> 01:01:31,000
嗯

2277
01:01:31,000 --> 01:01:35,000
但是你可以先预览自己要打的东西

2278
01:01:35,000 --> 01:01:36,000
然后再来打算

2279
01:01:36,000 --> 01:01:39,000
在别的别人家都还用一个

2280
01:01:39,000 --> 01:01:42,000
就是有点像计算器一样的显示器

2281
01:01:42,000 --> 01:01:43,000
就是单行

2282
01:01:43,000 --> 01:01:47,000
然后只能显示单个字母的显示器的时候

2283
01:01:47,000 --> 01:01:51,000
他已经出了一个带这个音级摄像

2284
01:01:51,000 --> 01:01:53,000
音级摄像 CRT 的这么一个版本

2285
01:01:53,000 --> 01:01:56,000
所以他那个时候是非常非常了不起的一个人

2286
01:01:56,000 --> 01:01:56,000
诶

2287
01:01:56,000 --> 01:01:58,000
那个王室电脑就是王安嘛

2288
01:01:58,000 --> 01:01:59,000
对啊

2289
01:01:59,000 --> 01:02:00,000
就是王嘛

2290
01:02:00,000 --> 01:02:01,000
那个蓝底白色的一个王

2291
01:02:01,000 --> 01:02:04,000
就是就是王安的王安创建公司

2292
01:02:04,000 --> 01:02:04,000
嗯

2293
01:02:04,000 --> 01:02:07,000
这个可能这个在国内有有流行过吗

2294
01:02:07,000 --> 01:02:10,000
好像在 90 年代初的时候好像有见过吧

2295
01:02:10,000 --> 01:02:13,000
那个时候好像是有一个自处理器的

2296
01:02:13,000 --> 01:02:17,000
但是那个自处理器是王安电脑出的吗

2297
01:02:17,000 --> 01:02:19,000
我我不太

2298
01:02:19,000 --> 01:02:24,000
但我记得在国内好像我三号在哪里有印象

2299
01:02:24,000 --> 01:02:27,000
说发现都国内也是有一段时间有进口过

2300
01:02:27,000 --> 01:02:28,000
那个时候应该是

2301
01:02:28,000 --> 01:02:29,000
OK

2302
01:02:29,000 --> 01:02:31,000
那个时候应该是四通吧

2303
01:02:31,000 --> 01:02:32,000
四通比较

2304
01:02:32,000 --> 01:02:33,000
啊

2305
01:02:33,000 --> 01:02:34,000
那个是国产的吗

2306
01:02:34,000 --> 01:02:34,000
但是对啊

2307
01:02:34,000 --> 01:02:37,000
王室没有进就有产品进到中国吗

2308
01:02:37,000 --> 01:02:38,000
好像有

2309
01:02:38,000 --> 01:02:39,000
嗯

2310
01:02:39,000 --> 01:02:39,000
这个我不知道

2311
01:02:39,000 --> 01:02:41,000
确定的有点有点久了

2312
01:02:41,000 --> 01:02:42,000
对

2313
01:02:42,000 --> 01:02:45,000
总之大概六七十年代的时候

2314
01:02:45,000 --> 01:02:47,000
王安电脑是非常非常了不起的一个公司

2315
01:02:47,000 --> 01:02:51,000
而且当时他基本上是以一己之力对挑 IBM

2316
01:02:51,000 --> 01:02:54,000
然后来挂掉了是吧

2317
01:02:54,000 --> 01:02:55,000
对

2318
01:02:55,000 --> 01:02:58,000
很遗憾他没有赶上 personal computer 的大潮

2319
01:02:58,000 --> 01:03:00,000
就是他比较他比较

2320
01:03:00,000 --> 01:03:00,000
他比较

2321
01:03:00,000 --> 01:03:00,000
他比较

2322
01:03:00,000 --> 01:03:02,000
他比较刚立自用版

2323
01:03:02,000 --> 01:03:06,000
他觉得个人计算机和

2324
01:03:06,000 --> 01:03:08,000
就是微型计算机和

2325
01:03:08,000 --> 01:03:10,000
mainframe 相比

2326
01:03:10,000 --> 01:03:13,000
就是玩笑一样的东西

2327
01:03:13,000 --> 01:03:15,000
为什么要花费精力在这东西上面

2328
01:03:15,000 --> 01:03:18,000
但是等到他回过神来的时候已经太晚了

2329
01:03:18,000 --> 01:03:18,000
对

2330
01:03:18,000 --> 01:03:20,000
然后整个帝国就这么垮掉

2331
01:03:20,000 --> 01:03:21,000
还是什么

2332
01:03:21,000 --> 01:03:22,000
见识

2333
01:03:22,000 --> 01:03:22,000
见

2334
01:03:22,000 --> 01:03:24,000
不够有远见

2335
01:03:24,000 --> 01:03:25,000
对

2336
01:03:25,000 --> 01:03:26,000
如果他能够

2337
01:03:26,000 --> 01:03:27,000
对

2338
01:03:27,000 --> 01:03:28,000
我们就不要继续开脑洞

2339
01:03:28,000 --> 01:03:30,000
总之王安这么一个奇人

2340
01:03:30,000 --> 01:03:32,000
还是感兴趣的话

2341
01:03:32,000 --> 01:03:34,000
有考古兴趣的话可以去了解一下

2342
01:03:34,000 --> 01:03:35,000
对

2343
01:03:35,000 --> 01:03:36,000
然后选 Poto 另外一个理由

2344
01:03:36,000 --> 01:03:37,000
也就是他跟

2345
01:03:37,000 --> 01:03:38,000
他是一个

2346
01:03:38,000 --> 01:03:39,000
他的主角是个女性

2347
01:03:39,000 --> 01:03:40,000
我觉得这一点

2348
01:03:40,000 --> 01:03:42,000
对

2349
01:03:42,000 --> 01:03:43,000
值得为此

2350
01:03:43,000 --> 01:03:44,000
因为

2351
01:03:44,000 --> 01:03:45,000
我也不知道

2352
01:03:45,000 --> 01:03:48,000
就在以女性为主角的

2353
01:03:48,000 --> 01:03:50,000
游戏真的不多啊

2354
01:03:50,000 --> 01:03:50,000
你可能

2355
01:03:50,000 --> 01:03:53,000
除了那些女性向的

2356
01:03:53,000 --> 01:03:56,000
有就专门做给女生玩的游戏之外

2357
01:03:56,000 --> 01:03:59,000
专门找一个女性来做主角的

2358
01:03:59,000 --> 01:04:00,000
真的绝无尽有

2359
01:04:00,000 --> 01:04:01,000
古墓丽影

2360
01:04:01,000 --> 01:04:02,000
对

2361
01:04:02,000 --> 01:04:04,000
而且古墓丽影是一个非常

2362
01:04:04,000 --> 01:04:07,000
就是物化了的

2363
01:04:07,000 --> 01:04:08,000
在最开始的时候

2364
01:04:08,000 --> 01:04:09,000
古墓丽影是一个非常

2365
01:04:09,000 --> 01:04:11,000
就做出来给男人看的一个

2366
01:04:11,000 --> 01:04:12,000
一个

2367
01:04:12,000 --> 01:04:12,000
一个

2368
01:04:12,000 --> 01:04:13,000
一个

2369
01:04:13,000 --> 01:04:13,000
一个模型

2370
01:04:13,000 --> 01:04:15,000
但是最新一代古墓丽影

2371
01:04:15,000 --> 01:04:16,000
大不相同了

2372
01:04:16,000 --> 01:04:16,000
但是

2373
01:04:16,000 --> 01:04:18,000
古墓丽影最开始的时候

2374
01:04:18,000 --> 01:04:18,000
就是一个

2375
01:04:18,000 --> 01:04:19,000
一个

2376
01:04:19,000 --> 01:04:21,000
细腰长腿大胸的妹子

2377
01:04:21,000 --> 01:04:23,000
手里面拿着两把枪

2378
01:04:23,000 --> 01:04:23,000
然后出现在

2379
01:04:23,000 --> 01:04:25,000
一直在你面前扭啊扭

2380
01:04:25,000 --> 01:04:26,000
对

2381
01:04:26,000 --> 01:04:27,000
这出现在大转件的封面上面

2382
01:04:27,000 --> 01:04:28,000
然后让你

2383
01:04:28,000 --> 01:04:30,000
基本上就是只有男人会去

2384
01:04:30,000 --> 01:04:31,000
会去看的这个

2385
01:04:31,000 --> 01:04:34,000
不是后来就有人出了那个裸体版吗

2386
01:04:34,000 --> 01:04:35,000
对

2387
01:04:35,000 --> 01:04:36,000
啊

2388
01:04:36,000 --> 01:04:37,000
黑历史

2389
01:04:37,000 --> 01:04:41,000
我们是怎么能接受那个时代

2390
01:04:41,000 --> 01:04:43,000
640 升 480 分辨率下运的裸体

2391
01:04:43,000 --> 01:04:44,000
对啊

2392
01:04:44,000 --> 01:04:45,000
上次我们还

2393
01:04:45,000 --> 01:04:46,000
我还跟 Laurice 吐槽过

2394
01:04:46,000 --> 01:04:46,000
他那个

2395
01:04:46,000 --> 01:04:48,000
就那个时候的 3 D 特效嘛

2396
01:04:48,000 --> 01:04:50,000
那个会出来的

2397
01:04:50,000 --> 01:04:51,000
那个肌肉都是一坨

2398
01:04:51,000 --> 01:04:52,000
一坨一坨

2399
01:04:52,000 --> 01:04:53,000
有棱角的吧

2400
01:04:53,000 --> 01:04:54,000
对

2401
01:04:54,000 --> 01:04:55,000
你会看看他的那个胸

2402
01:04:55,000 --> 01:04:56,000
是一个三角

2403
01:04:56,000 --> 01:04:58,000
一个圆锥体

2404
01:04:58,000 --> 01:04:58,000
一个

2405
01:04:58,000 --> 01:04:59,000
哪是圆锥

2406
01:04:59,000 --> 01:05:00,000
是一个

2407
01:05:00,000 --> 01:05:00,000
是一个

2408
01:05:00,000 --> 01:05:01,000
三角锥

2409
01:05:01,000 --> 01:05:02,000
四角锥

2410
01:05:02,000 --> 01:05:05,000
反正就是很奇怪的一个

2411
01:05:05,000 --> 01:05:06,000
一个画纸

2412
01:05:06,000 --> 01:05:08,000
但现在就大不相同

2413
01:05:08,000 --> 01:05:10,000
不过 Portal 里面的

2414
01:05:10,000 --> 01:05:11,000
是看不见

2415
01:05:11,000 --> 01:05:13,000
有一种场合

2416
01:05:13,000 --> 01:05:14,000
你可以看见

2417
01:05:14,000 --> 01:05:14,000
对

2418
01:05:14,000 --> 01:05:16,000
你在自己身后开一个 Portal

2419
01:05:16,000 --> 01:05:16,000
对

2420
01:05:16,000 --> 01:05:18,000
你在自己屁股后面开个 Portal

2421
01:05:18,000 --> 01:05:19,000
或者转角的时候

2422
01:05:19,000 --> 01:05:20,000
能够看见一个侧脸

2423
01:05:20,000 --> 01:05:22,000
但你肯定是看不见全身的

2424
01:05:22,000 --> 01:05:23,000
就可以端详自己

2425
01:05:23,000 --> 01:05:24,000
对

2426
01:05:24,000 --> 01:05:27,000
然后这个女性也被刻画的非常

2427
01:05:27,000 --> 01:05:29,000
非常非常

2428
01:05:29,000 --> 01:05:32,000
就像整个游戏的这个

2429
01:05:32,000 --> 01:05:33,000
这个主线

2430
01:05:33,000 --> 01:05:34,000
就是非常的

2431
01:05:34,000 --> 01:05:37,000
Alienated

2432
01:05:37,000 --> 01:05:39,000
就是非常不像一个人

2433
01:05:39,000 --> 01:05:39,000
对

2434
01:05:39,000 --> 01:05:41,000
他从头到尾都没有一句话

2435
01:05:41,000 --> 01:05:42,000
对吧

2436
01:05:42,000 --> 01:05:42,000
对

2437
01:05:42,000 --> 01:05:43,000
这个倒是

2438
01:05:43,000 --> 01:05:45,000
这 Portal 的

2439
01:05:45,000 --> 01:05:46,000
Portal

2440
01:05:46,000 --> 01:05:48,000
其实他是处在那个

2441
01:05:48,000 --> 01:05:50,000
Half-Life 的世界里面

2442
01:05:50,000 --> 01:05:51,000
Half-Life 的

2443
01:05:51,000 --> 01:05:52,000
就是半条命

2444
01:05:52,000 --> 01:05:54,000
或者说半衰期

2445
01:05:54,000 --> 01:05:55,000
正确分译方法

2446
01:05:55,000 --> 01:05:56,000
半衰期的这个

2447
01:05:56,000 --> 01:05:57,000
主角

2448
01:05:57,000 --> 01:05:58,000
Golden Freeman

2449
01:05:58,000 --> 01:06:01,000
也是自始至终没有说过一句话的

2450
01:06:01,000 --> 01:06:04,000
就是 Valve 有把主角做成这种

2451
01:06:04,000 --> 01:06:07,000
沉默的主角的传统

2452
01:06:07,000 --> 01:06:09,000
当然他们可能自己也在取笑着一点

2453
01:06:09,000 --> 01:06:11,000
就是在 Portal 2 的

2454
01:06:11,000 --> 01:06:12,000
有一个地方

2455
01:06:12,000 --> 01:06:14,000
他会让你说 NA

2456
01:06:14,000 --> 01:06:16,000
来说 MLK

2457
01:06:16,000 --> 01:06:18,000
然后你 NA 发现你自己跳起来了

2458
01:06:18,000 --> 01:06:18,000
然后

2459
01:06:18,000 --> 01:06:20,000
然后

2460
01:06:20,000 --> 01:06:23,000
和屏幕上的指示完全相反

2461
01:06:23,000 --> 01:06:25,000
然后那个人工智能会取笑

2462
01:06:25,000 --> 01:06:25,000
你说哦

2463
01:06:25,000 --> 01:06:26,000
你很会跳

2464
01:06:26,000 --> 01:06:27,000
我看到了

2465
01:06:27,000 --> 01:06:27,000
好吧

2466
01:06:27,000 --> 01:06:28,000
好吧

2467
01:06:28,000 --> 01:06:29,000
我不会再像

2468
01:06:29,000 --> 01:06:31,000
试图让你说话

2469
01:06:31,000 --> 01:06:33,000
对

2470
01:06:33,000 --> 01:06:35,000
从来没有说过任何

2471
01:06:35,000 --> 01:06:36,000
任何事情

2472
01:06:36,000 --> 01:06:37,000
而且

2473
01:06:37,000 --> 01:06:39,000
他跟游戏里面

2474
01:06:39,000 --> 01:06:41,000
也没有什么特别的交互

2475
01:06:41,000 --> 01:06:44,000
交互都是拿那个 Portal 枪去

2476
01:06:44,000 --> 01:06:45,000
吸起来

2477
01:06:45,000 --> 01:06:46,000
对

2478
01:06:46,000 --> 01:06:48,000
反正就还蛮奇怪

2479
01:06:48,000 --> 01:06:50,000
但是我觉得这个游戏最大的

2480
01:06:50,000 --> 01:06:52,000
最大的可圈可点值数

2481
01:06:52,000 --> 01:06:53,000
还是 Gladus

2482
01:06:53,000 --> 01:06:53,000
就是

2483
01:06:53,000 --> 01:06:56,000
可能人在

2484
01:06:56,000 --> 01:06:57,000
所有的游戏里面

2485
01:06:57,000 --> 01:06:59,000
最让人印象深刻的

2486
01:06:59,000 --> 01:07:00,000
AI

2487
01:07:00,000 --> 01:07:00,000
反派

2488
01:07:00,000 --> 01:07:01,000
对

2489
01:07:01,000 --> 01:07:04,000
最让人印象深刻的 AI 有两个

2490
01:07:04,000 --> 01:07:04,000
一个是

2491
01:07:04,000 --> 01:07:06,000
而且两个碰巧都是女性

2492
01:07:06,000 --> 01:07:07,000
一个是

2493
01:07:07,000 --> 01:07:09,000
Halo 里面的 Cortana

2494
01:07:09,000 --> 01:07:10,000
或者是微软

2495
01:07:10,000 --> 01:07:12,000
如果你不玩 Halo 的话

2496
01:07:12,000 --> 01:07:13,000
微软最新出的 Cortana

2497
01:07:13,000 --> 01:07:15,000
就是来自于这个游戏里面的 Cortana

2498
01:07:15,000 --> 01:07:16,000
但那个 Cortana

2499
01:07:16,000 --> 01:07:17,000
是有

2500
01:07:17,000 --> 01:07:17,000
是有

2501
01:07:17,000 --> 01:07:18,000
是有形状的

2502
01:07:18,000 --> 01:07:18,000
而且

2503
01:07:18,000 --> 01:07:20,000
就是有形体的

2504
01:07:20,000 --> 01:07:22,000
就是你可以看到一个东西

2505
01:07:22,000 --> 01:07:23,000
当然这个东西只是他

2506
01:07:23,000 --> 01:07:25,000
把自己

2507
01:07:25,000 --> 01:07:26,000
把自己

2508
01:07:26,000 --> 01:07:27,000
你可以理解为

2509
01:07:27,000 --> 01:07:28,000
他是他的交互界面吧

2510
01:07:28,000 --> 01:07:29,000
嗯

2511
01:07:29,000 --> 01:07:31,000
但至少是个有形体的东西

2512
01:07:31,000 --> 01:07:32,000
嗯

2513
01:07:32,000 --> 01:07:34,000
而且这个形体也是

2514
01:07:34,000 --> 01:07:36,000
被逐渐物化了

2515
01:07:36,000 --> 01:07:37,000
就是第一代 Cortana

2516
01:07:37,000 --> 01:07:38,000
看起来

2517
01:07:38,000 --> 01:07:39,000
没有什么性别特征

2518
01:07:39,000 --> 01:07:41,000
你只能一期看出来是个女的

2519
01:07:41,000 --> 01:07:42,000
但是在最近的

2520
01:07:42,000 --> 01:07:43,000
最近

2521
01:07:43,000 --> 01:07:45,000
一部 Halo 里面 Cortana

2522
01:07:45,000 --> 01:07:49,000
也是被塑造成了一个精细的

2523
01:07:49,000 --> 01:07:50,000
大胸长腿的

2524
01:07:50,000 --> 01:07:51,000
对

2525
01:07:51,000 --> 01:07:54,000
还是什么

2526
01:07:54,000 --> 01:07:56,000
性别其实还是挺严重的

2527
01:07:56,000 --> 01:07:56,000
没错

2528
01:07:56,000 --> 01:07:57,000
然后

2529
01:07:57,000 --> 01:07:58,000
呃

2530
01:07:58,000 --> 01:07:59,000
但是 Glados 就完全不一样

2531
01:07:59,000 --> 01:08:00,000
Glados 是一个

2532
01:08:00,000 --> 01:08:01,000
就是一个机器

2533
01:08:01,000 --> 01:08:03,000
他只不过有一个女人的声音而已

2534
01:08:03,000 --> 01:08:05,000
但是他的 personality 是

2535
01:08:05,000 --> 01:08:07,000
中性的吧

2536
01:08:07,000 --> 01:08:07,000
不

2537
01:08:07,000 --> 01:08:09,000
他的 personality 是

2538
01:08:09,000 --> 01:08:11,000
就是他的性格

2539
01:08:11,000 --> 01:08:13,000
他最开始其实是由那个

2540
01:08:13,000 --> 01:08:15,000
Uptra Science 的老板

2541
01:08:15,000 --> 01:08:16,000
手下的一个

2542
01:08:16,000 --> 01:08:16,000
就是

2543
01:08:16,000 --> 01:08:19,000
叫 Caroline 的助手

2544
01:08:19,000 --> 01:08:21,000
他把他的性格特征

2545
01:08:21,000 --> 01:08:23,000
注入到了

2546
01:08:23,000 --> 01:08:24,000
注入到了 Glados 里面

2547
01:08:24,000 --> 01:08:25,000
然后 Porto 2 里面

2548
01:08:25,000 --> 01:08:26,000
我记得有一地方

2549
01:08:26,000 --> 01:08:28,000
他主动把这一段

2550
01:08:28,000 --> 01:08:29,000
呃

2551
01:08:29,000 --> 01:08:30,000
回忆给删掉了

2552
01:08:30,000 --> 01:08:30,000
就是他

2553
01:08:30,000 --> 01:08:31,000
他

2554
01:08:31,000 --> 01:08:32,000
抛弃了

2555
01:08:32,000 --> 01:08:33,000
作为

2556
01:08:33,000 --> 01:08:35,000
那个曾经的人的回忆

2557
01:08:35,000 --> 01:08:35,000
嗯

2558
01:08:35,000 --> 01:08:36,000
嗯

2559
01:08:36,000 --> 01:08:38,000
哎呀

2560
01:08:38,000 --> 01:08:40,000
关于 Porto 好像说的有点多了

2561
01:08:40,000 --> 01:08:40,000
但是

2562
01:08:40,000 --> 01:08:42,000
总之我

2563
01:08:42,000 --> 01:08:43,000
我对这个游戏

2564
01:08:43,000 --> 01:08:45,000
有非常深的感情在里面

2565
01:08:45,000 --> 01:08:46,000
所以

2566
01:08:46,000 --> 01:08:47,000
也决定

2567
01:08:47,000 --> 01:08:47,000
呃

2568
01:08:47,000 --> 01:08:48,000
把它

2569
01:08:48,000 --> 01:08:51,000
作为我们节目的主题曲

2570
01:08:51,000 --> 01:08:51,000
然后

2571
01:08:51,000 --> 01:08:52,000
呃

2572
01:08:52,000 --> 01:08:53,000
我们

2573
01:08:53,000 --> 01:08:55,000
已经看过了

2574
01:08:55,000 --> 01:08:57,000
这个曲子的

2575
01:08:57,000 --> 01:08:58,000
作者

2576
01:08:58,000 --> 01:08:59,000
把它以

2577
01:08:59,000 --> 01:09:00,000
呃

2578
01:09:00,000 --> 01:09:01,000
呃

2579
01:09:01,000 --> 01:09:02,000
创作公共的授权

2580
01:09:02,000 --> 01:09:03,000
发布了出来

2581
01:09:03,000 --> 01:09:03,000
就是

2582
01:09:03,000 --> 01:09:04,000
呃

2583
01:09:04,000 --> 01:09:06,000
这首曲子的作者

2584
01:09:06,000 --> 01:09:07,000
叫做 Jonathan

2585
01:09:07,000 --> 01:09:07,000
Corton

2586
01:09:07,000 --> 01:09:10,000
然后他的协议

2587
01:09:10,000 --> 01:09:11,000
他的授权是

2588
01:09:11,000 --> 01:09:12,000
CC

2589
01:09:12,000 --> 01:09:13,000
Buy

2590
01:09:13,000 --> 01:09:15,000
呃

2591
01:09:15,000 --> 01:09:16,000
NC

2592
01:09:16,000 --> 01:09:16,000
就是

2593
01:09:16,000 --> 01:09:17,000
你必须

2594
01:09:17,000 --> 01:09:18,000
用在

2595
01:09:18,000 --> 01:09:19,000
在用到这首歌的时候

2596
01:09:19,000 --> 01:09:20,000
必须提到这个

2597
01:09:20,000 --> 01:09:21,000
歌是谁写的

2598
01:09:21,000 --> 01:09:23,000
然后不能把它用作商用途

2599
01:09:23,000 --> 01:09:23,000
嗯

2600
01:09:23,000 --> 01:09:24,000
嗯

2601
01:09:24,000 --> 01:09:26,000
我们应该不会把它用作商用途

2602
01:09:26,000 --> 01:09:28,000
但我们这个又不拿它卖

2603
01:09:28,000 --> 01:09:28,000
来卖

2604
01:09:28,000 --> 01:09:29,000
无所谓

2605
01:09:29,000 --> 01:09:29,000
对

2606
01:09:29,000 --> 01:09:31,000
我们没有卖我们的节目啊

2607
01:09:31,000 --> 01:09:31,000
然后我们也

2608
01:09:31,000 --> 01:09:34,000
在可以预见的将来

2609
01:09:34,000 --> 01:09:34,000
不会有

2610
01:09:34,000 --> 01:09:36,000
不会通过做 podcast

2611
01:09:36,000 --> 01:09:38,000
有什么足够多的收入

2612
01:09:38,000 --> 01:09:40,000
所以

2613
01:09:40,000 --> 01:09:41,000
对啊

2614
01:09:41,000 --> 01:09:43,000
你只要不是用它来牟利都可以吧

2615
01:09:43,000 --> 01:09:45,000
就是你做个什么小插曲

2616
01:09:45,000 --> 01:09:46,000
而且就算用了

2617
01:09:46,000 --> 01:09:48,000
用的是短时间 30 秒

2618
01:09:48,000 --> 01:09:48,000
也有那个

2619
01:09:48,000 --> 01:09:50,000
就哪怕是版权作品

2620
01:09:50,000 --> 01:09:50,000
你也是可以

2621
01:09:50,000 --> 01:09:51,000
也是发力

2622
01:09:51,000 --> 01:09:51,000
fair use 是吗

2623
01:09:51,000 --> 01:09:52,000
对

2624
01:09:52,000 --> 01:09:52,000
fair use

2625
01:09:52,000 --> 01:09:55,000
anyway

2626
01:09:55,000 --> 01:09:56,000
总之在 license 方面

2627
01:09:56,000 --> 01:09:57,000
应该是没有什么问题

2628
01:09:57,000 --> 01:09:58,000
我们还是考虑到这边

2629
01:09:58,000 --> 01:09:59,000
ok

2630
01:09:59,000 --> 01:10:00,000
所以从

2631
01:10:00,000 --> 01:10:01,000
这一期开始

2632
01:10:01,000 --> 01:10:03,000
我们就有一个这个主题曲了

2633
01:10:03,000 --> 01:10:04,000
大家就不用

2634
01:10:04,000 --> 01:10:05,000
一开场就觉得

2635
01:10:05,000 --> 01:10:06,000
哎

2636
01:10:06,000 --> 01:10:06,000
什么

2637
01:10:06,000 --> 01:10:06,000
谁

2638
01:10:06,000 --> 01:10:07,000
对

2639
01:10:07,000 --> 01:10:08,000
what

2640
01:10:08,000 --> 01:10:10,000
不会定期听到我的

2641
01:10:10,000 --> 01:10:11,000
what

2642
01:10:11,000 --> 01:10:11,000
对

2643
01:10:11,000 --> 01:10:14,000
好

2644
01:10:14,000 --> 01:10:17,000
我们终于开始讲这一期的正题了

2645
01:10:17,000 --> 01:10:17,000
对

2646
01:10:17,000 --> 01:10:21,000
其实我们本来是想把这个正题慢慢过度过来的

2647
01:10:21,000 --> 01:10:24,000
就是刚才提到了 core dump

2648
01:10:24,000 --> 01:10:26,000
提到了人工智能

2649
01:10:26,000 --> 01:10:30,000
然后我们想要讲的其实就是

2650
01:10:30,000 --> 01:10:32,000
那一段

2651
01:10:32,000 --> 01:10:32,000
那一段

2652
01:10:32,000 --> 01:10:34,000
general

2653
01:10:34,000 --> 01:10:36,000
就一个比较 general 的 form

2654
01:10:36,000 --> 01:10:38,000
就是生命周期管理

2655
01:10:38,000 --> 01:10:39,000
对

2656
01:10:39,000 --> 01:10:41,000
比如说你说 Portle 为什么要

2657
01:10:41,000 --> 01:10:42,000
运

2658
01:10:42,000 --> 01:10:43,000
为什么要

2659
01:10:43,000 --> 01:10:45,000
他为什么要反复提到

2660
01:10:45,000 --> 01:10:46,000
science

2661
01:10:46,000 --> 01:10:48,000
或者说为什么要反复提到 test

2662
01:10:48,000 --> 01:10:50,000
其实

2663
01:10:50,000 --> 01:10:52,000
我觉得他多少有一点

2664
01:10:52,000 --> 01:10:53,000
就是在

2665
01:10:53,000 --> 01:10:54,000
在嘲弄

2666
01:10:54,000 --> 01:10:58,000
或者说在套用软件工程里面

2667
01:10:58,000 --> 01:11:01,000
不停的做测试这样一个

2668
01:11:01,000 --> 01:11:02,000
这样一个场景

2669
01:11:02,000 --> 01:11:02,000
QA 的

2670
01:11:02,000 --> 01:11:03,000
对

2671
01:11:03,000 --> 01:11:04,000
Quality Assurance

2672
01:11:04,000 --> 01:11:06,000
没事就在那里测

2673
01:11:06,000 --> 01:11:07,000
对

2674
01:11:07,000 --> 01:11:09,000
然后你可以理解为

2675
01:11:09,000 --> 01:11:11,000
他的测试是为了验证武器

2676
01:11:11,000 --> 01:11:14,000
或者是为了验证这个 Portle Gun

2677
01:11:14,000 --> 01:11:15,000
能

2678
01:11:15,000 --> 01:11:19,000
或者说验证用户在用 Portle Gun 的时候

2679
01:11:19,000 --> 01:11:20,000
能够想到什么事情

2680
01:11:20,000 --> 01:11:22,000
或者是做出什么样的行为来

2681
01:11:22,000 --> 01:11:25,000
以此推进科学的发展

2682
01:11:25,000 --> 01:11:28,000
或者说推进 Portle Gun 的完善

2683
01:11:28,000 --> 01:11:29,000
对

2684
01:11:29,000 --> 01:11:31,000
然后

2685
01:11:31,000 --> 01:11:34,000
这个其实就是生命周期管理的部分

2686
01:11:34,000 --> 01:11:36,000
当然我们可能不会

2687
01:11:36,000 --> 01:11:39,000
我们暂且先不从这么大的角度来说吧

2688
01:11:39,000 --> 01:11:41,000
就只是先从

2689
01:11:41,000 --> 01:11:45,000
比较小的切入点来着眼

2690
01:11:45,000 --> 01:11:47,000
对

2691
01:11:47,000 --> 01:11:48,000
比如说

2692
01:11:48,000 --> 01:11:51,000
Portle 是个游戏对吧

2693
01:11:51,000 --> 01:11:51,000
对

2694
01:11:51,000 --> 01:11:52,000
那

2695
01:11:52,000 --> 01:11:54,000
但凡游戏都需要跑

2696
01:11:54,000 --> 01:11:56,000
但凡游戏就和所有程序一样

2697
01:11:56,000 --> 01:11:58,000
都需要跑在计算机上

2698
01:11:58,000 --> 01:11:59,000
然后跑在计算机上的时候

2699
01:11:59,000 --> 01:12:02,000
具体当我们说一个游戏

2700
01:12:02,000 --> 01:12:03,000
有一个程序在运行的时候

2701
01:12:03,000 --> 01:12:06,000
所指的到底是什么状态

2702
01:12:06,000 --> 01:12:08,000
其实就是

2703
01:12:08,000 --> 01:12:12,000
我们可以说一个程序在运行的时候

2704
01:12:12,000 --> 01:12:14,000
它活在内存里面

2705
01:12:14,000 --> 01:12:15,000
可以这么说

2706
01:12:15,000 --> 01:12:17,000
可以吧

2707
01:12:17,000 --> 01:12:17,000
我觉得

2708
01:12:17,000 --> 01:12:19,000
当一个程序活在内存里面的时候

2709
01:12:19,000 --> 01:12:21,000
我们就说它正在被运行

2710
01:12:21,000 --> 01:12:26,000
就是一个程序和一个进程的具体差异是什么

2711
01:12:26,000 --> 01:12:29,000
那程序一个进程就是和一个活着的程序

2712
01:12:29,000 --> 01:12:31,000
那么程序活着的具体意义是什么

2713
01:12:31,000 --> 01:12:34,000
就是它在内存里面并且正在被执行

2714
01:12:34,000 --> 01:12:35,000
或者它正在没有被执行

2715
01:12:35,000 --> 01:12:37,000
但它活在内存里面

2716
01:12:37,000 --> 01:12:39,000
对吧

2717
01:12:39,000 --> 01:12:43,000
所以要面临的一个最

2718
01:12:43,000 --> 01:12:46,000
就是日常我们面临的最常见的一个问题是什么

2719
01:12:46,000 --> 01:12:48,000
就是内存的空间有限吗

2720
01:12:48,000 --> 01:12:48,000
对

2721
01:12:48,000 --> 01:12:50,000
就是内存不够怎么办

2722
01:12:50,000 --> 01:12:50,000
对

2723
01:12:50,000 --> 01:12:51,000
怎么办

2724
01:12:51,000 --> 01:12:53,000
就这个现在可能还好一点

2725
01:12:53,000 --> 01:12:55,000
早期的时候特别明显

2726
01:12:55,000 --> 01:12:58,000
现在内存动辄就是什么 4 个 G

2727
01:12:58,000 --> 01:12:58,000
8 个 G

2728
01:12:58,000 --> 01:13:00,000
我电脑是 16 个 G 的那时候

2729
01:13:00,000 --> 01:13:00,000
对

2730
01:13:00,000 --> 01:13:02,000
那早期可能大概就多少

2731
01:13:02,000 --> 01:13:03,000
512 兆

2732
01:13:03,000 --> 01:13:04,000
128 兆

2733
01:13:04,000 --> 01:13:04,000
对

2734
01:13:04,000 --> 01:13:06,000
经常被错误的

2735
01:13:06,000 --> 01:13:10,000
attribute 到 BearGas 身上的名言是什么

2736
01:13:10,000 --> 01:13:12,000
任何电脑

2737
01:13:12,000 --> 01:13:13,000
640 K

2738
01:13:13,000 --> 01:13:15,000
内存就足够了

2739
01:13:15,000 --> 01:13:15,000
是吧

2740
01:13:15,000 --> 01:13:17,000
其实不是他说的

2741
01:13:17,000 --> 01:13:17,000
对吧

2742
01:13:17,000 --> 01:13:19,000
其实不是他说的

2743
01:13:19,000 --> 01:13:19,000
而且

2744
01:13:19,000 --> 01:13:22,000
而且到底是谁说的

2745
01:13:22,000 --> 01:13:23,000
好像也没有人找出来的

2746
01:13:23,000 --> 01:13:24,000
反正就是

2747
01:13:24,000 --> 01:13:26,000
反正它就被黑了嘛

2748
01:13:26,000 --> 01:13:27,000
对

2749
01:13:27,000 --> 01:13:28,000
反正大家都喜欢黑它

2750
01:13:28,000 --> 01:13:30,000
跟它脱不了关系了

2751
01:13:30,000 --> 01:13:31,000
嗯

2752
01:13:31,000 --> 01:13:36,000
为什么 640 K 的内存就够了

2753
01:13:36,000 --> 01:13:38,000
它那个时候

2754
01:13:38,000 --> 01:13:40,000
九几年吧

2755
01:13:40,000 --> 01:13:40,000
就是应该出

2756
01:13:40,000 --> 01:13:41,000
那确实啊

2757
01:13:41,000 --> 01:13:42,000
你想想

2758
01:13:42,000 --> 01:13:43,000
那个时候多少

2759
01:13:43,000 --> 01:13:44,000
一个磁盘

2760
01:13:44,000 --> 01:13:45,000
不叫磁盘

2761
01:13:45,000 --> 01:13:46,000
软盘吧

2762
01:13:46,000 --> 01:13:46,000
才多少

2763
01:13:46,000 --> 01:13:48,000
才 720 K 标准的

2764
01:13:48,000 --> 01:13:50,000
后来再翻翻成 1.44 兆

2765
01:13:50,000 --> 01:13:51,000
就是

2766
01:13:51,000 --> 01:13:52,000
那就是高密

2767
01:13:52,000 --> 01:13:53,000
高密

2768
01:13:53,000 --> 01:13:53,000
对

2769
01:13:53,000 --> 01:13:55,000
1.44 兆

2770
01:13:55,000 --> 01:13:56,000
然后有一个

2771
01:13:56,000 --> 01:13:57,000
就你想象一下

2772
01:13:57,000 --> 01:13:58,000
那个时候

2773
01:13:58,000 --> 01:13:59,000
就你就像想像今天一样

2774
01:13:59,000 --> 01:13:59,000
你的

2775
01:13:59,000 --> 01:14:01,000
比如你的笔记本的硬盘

2776
01:14:01,000 --> 01:14:02,000
是一个 T 的大小

2777
01:14:02,000 --> 01:14:04,000
然后你有一个 T 的内存

2778
01:14:04,000 --> 01:14:05,000
当然觉得足够了

2779
01:14:05,000 --> 01:14:06,000
嗯

2780
01:14:06,000 --> 01:14:07,000
对

2781
01:14:07,000 --> 01:14:08,000
但是

2782
01:14:08,000 --> 01:14:09,000
现在

2783
01:14:09,000 --> 01:14:10,000
后来发现

2784
01:14:10,000 --> 01:14:10,000
不对

2785
01:14:10,000 --> 01:14:12,000
好像不是这样的

2786
01:14:12,000 --> 01:14:12,000
对

2787
01:14:12,000 --> 01:14:13,000
就是随着

2788
01:14:13,000 --> 01:14:15,000
一个程序

2789
01:14:15,000 --> 01:14:17,000
所需要完成的任务的

2790
01:14:17,000 --> 01:14:18,000
复杂

2791
01:14:18,000 --> 01:14:19,000
逐渐变得复杂

2792
01:14:19,000 --> 01:14:20,000
它

2793
01:14:20,000 --> 01:14:22,000
它所需要的内存

2794
01:14:22,000 --> 01:14:22,000
也就是

2795
01:14:22,000 --> 01:14:24,000
几何几数的

2796
01:14:24,000 --> 01:14:26,000
速度增长

2797
01:14:26,000 --> 01:14:26,000
所以

2798
01:14:26,000 --> 01:14:27,000
嗯

2799
01:14:27,000 --> 01:14:29,000
内存不够怎么办

2800
01:14:29,000 --> 01:14:30,000
就变成了一个非常切实的问题

2801
01:14:30,000 --> 01:14:31,000
嗯

2802
01:14:31,000 --> 01:14:32,000
所以在一个

2803
01:14:32,000 --> 01:14:34,000
要考古的话

2804
01:14:34,000 --> 01:14:35,000
从那个时候最开始

2805
01:14:35,000 --> 01:14:37,000
最开始的操作系统是一个

2806
01:14:37,000 --> 01:14:38,000
就是什么

2807
01:14:38,000 --> 01:14:38,000
单线

2808
01:14:38,000 --> 01:14:39,000
单进程的东西

2809
01:14:39,000 --> 01:14:40,000
对

2810
01:14:40,000 --> 01:14:42,000
最开始的操作系统

2811
01:14:42,000 --> 01:14:43,000
其实不是个操作系统

2812
01:14:43,000 --> 01:14:43,000
它

2813
01:14:43,000 --> 01:14:45,000
或者说没有任何特殊之处

2814
01:14:45,000 --> 01:14:46,000
它只不过就是开机

2815
01:14:46,000 --> 01:14:48,000
这个程序被自动运行

2816
01:14:48,000 --> 01:14:50,000
然后你可以用这个自动

2817
01:14:50,000 --> 01:14:52,000
用这个程序去找到

2818
01:14:52,000 --> 01:14:53,000
你想要运行的那个程序

2819
01:14:53,000 --> 01:14:54,000
然后运行那个程序

2820
01:14:54,000 --> 01:14:56,000
在这个过程之中

2821
01:14:56,000 --> 01:14:57,000
你最开始运行的那个程序

2822
01:14:57,000 --> 01:14:58,000
就

2823
01:14:58,000 --> 01:15:00,000
就退出去了

2824
01:15:00,000 --> 01:15:01,000
就不再存在电脑里面了

2825
01:15:01,000 --> 01:15:02,000
然后你

2826
01:15:02,000 --> 01:15:03,000
接下来运行的这个程序

2827
01:15:03,000 --> 01:15:05,000
它独占整个电脑

2828
01:15:05,000 --> 01:15:06,000
就是它认为

2829
01:15:06,000 --> 01:15:08,000
我是活在这个电脑上的

2830
01:15:08,000 --> 01:15:09,000
唯一程序

2831
01:15:09,000 --> 01:15:10,000
嗯

2832
01:15:10,000 --> 01:15:13,000
而且其实即便到今天这一点

2833
01:15:13,000 --> 01:15:14,000
多多少少还是成立的

2834
01:15:14,000 --> 01:15:17,000
就是每一个程序都多少认为

2835
01:15:17,000 --> 01:15:18,000
自己拥有整台计算机

2836
01:15:18,000 --> 01:15:19,000
嗯

2837
01:15:19,000 --> 01:15:21,000
其实这是一个假象

2838
01:15:21,000 --> 01:15:23,000
其实只不过是操作系统

2839
01:15:23,000 --> 01:15:24,000
或者是 CPU

2840
01:15:24,000 --> 01:15:26,000
给它制造出来的一个幻境

2841
01:15:26,000 --> 01:15:28,000
让它活在你的世界

2842
01:15:28,000 --> 01:15:28,000
其实

2843
01:15:28,000 --> 01:15:29,000
对

2844
01:15:29,000 --> 01:15:30,000
在物理意义上

2845
01:15:30,000 --> 01:15:31,000
在实体意义上

2846
01:15:31,000 --> 01:15:33,000
它正在和别人

2847
01:15:33,000 --> 01:15:36,000
共同享用同一块内存

2848
01:15:36,000 --> 01:15:39,000
这个可能早期用过 DOS 的用户

2849
01:15:39,000 --> 01:15:40,000
还有这个印象

2850
01:15:40,000 --> 01:15:42,000
你开到 DOS

2851
01:15:42,000 --> 01:15:42,000
开个命令

2852
01:15:42,000 --> 01:15:43,000
好像进了一个程序

2853
01:15:43,000 --> 01:15:45,000
那你要干点别的事

2854
01:15:45,000 --> 01:15:46,000
你还得从那里退出来

2855
01:15:46,000 --> 01:15:47,000
先保存

2856
01:15:47,000 --> 01:15:47,000
然后退出

2857
01:15:47,000 --> 01:15:48,000
再其中另外一个程序

2858
01:15:48,000 --> 01:15:49,000
然后做完那个事

2859
01:15:49,000 --> 01:15:50,000
保存退出

2860
01:15:50,000 --> 01:15:51,000
再回到之前

2861
01:15:51,000 --> 01:15:53,000
然后后来是在

2862
01:15:53,000 --> 01:15:55,000
是 Windows 32 吧

2863
01:15:55,000 --> 01:15:56,000
还是 95 的时候

2864
01:15:56,000 --> 01:15:58,000
出现了这个

2865
01:15:58,000 --> 01:16:00,000
说多任务的这个概念了

2866
01:16:00,000 --> 01:16:01,000
Windows 32 有多任务吗

2867
01:16:01,000 --> 01:16:03,000
我不太清楚

2868
01:16:03,000 --> 01:16:05,000
等一下

2869
01:16:05,000 --> 01:16:06,000
其实我好像没有用 Windows 3

2870
01:16:06,000 --> 01:16:09,000
Windows 3.2

2871
01:16:09,000 --> 01:16:11,000
是专门为中国市场做的

2872
01:16:11,000 --> 01:16:12,000
其实就是 Windows 3.2

2873
01:16:12,000 --> 01:16:13,000
其实是汉化版

2874
01:16:13,000 --> 01:16:15,000
就 Windows 3.1 的汉化版

2875
01:16:15,000 --> 01:16:15,000
OK

2876
01:16:15,000 --> 01:16:15,000
对

2877
01:16:15,000 --> 01:16:16,000
所以

2878
01:16:16,000 --> 01:16:18,000
3.1 有多任务

2879
01:16:18,000 --> 01:16:20,000
我们好像没有吧

2880
01:16:20,000 --> 01:16:22,000
我并不确切地记得

2881
01:16:22,000 --> 01:16:24,000
自己曾经在 Windows 3.1 的时代

2882
01:16:24,000 --> 01:16:26,000
按过 Alt 加 Tab 这个

2883
01:16:26,000 --> 01:16:28,000
Alt 加 Tab 这个组合

2884
01:16:28,000 --> 01:16:29,000
切换任务的

2885
01:16:29,000 --> 01:16:30,000
对

2886
01:16:30,000 --> 01:16:32,000
应该是没有吧

2887
01:16:32,000 --> 01:16:34,000
但至少这个很确定

2888
01:16:34,000 --> 01:16:36,000
Windows 95 肯定是一个多任务的系统

2889
01:16:36,000 --> 01:16:37,000
对

2890
01:16:37,000 --> 01:16:38,000
Windows 95

2891
01:16:38,000 --> 01:16:39,000
我还记得我

2892
01:16:39,000 --> 01:16:41,000
最晚是在

2893
01:16:41,000 --> 01:16:43,000
研究生时代

2894
01:16:43,000 --> 01:16:44,000
还教过一个人

2895
01:16:44,000 --> 01:16:46,000
用 Alt 加 Tab

2896
01:16:46,000 --> 01:16:47,000
可以切换到其他程序里面去

2897
01:16:47,000 --> 01:16:48,000
他大为惊讶

2898
01:16:48,000 --> 01:16:49,000
你知道吗

2899
01:16:49,000 --> 01:16:51,000
他说原来

2900
01:16:51,000 --> 01:16:51,000
原来

2901
01:16:51,000 --> 01:16:52,000
还可以这么玩

2902
01:16:52,000 --> 01:16:54,000
原来我切换到

2903
01:16:54,000 --> 01:16:55,000
就是原来

2904
01:16:55,000 --> 01:16:56,000
这样按一下

2905
01:16:56,000 --> 01:16:57,000
原来就是我刚才在

2906
01:16:57,000 --> 01:16:58,000
做的事情

2907
01:16:58,000 --> 01:16:59,000
还在继续背做

2908
01:16:59,000 --> 01:17:03,000
但其实这里也是

2909
01:17:03,000 --> 01:17:06,000
你看就除了这个程序的认知上

2910
01:17:06,000 --> 01:17:07,000
有一个过渡

2911
01:17:07,000 --> 01:17:10,000
就是我们作为用户的认知上

2912
01:17:10,000 --> 01:17:11,000
其实也是需要一个过渡的

2913
01:17:11,000 --> 01:17:13,000
本来像一个机器

2914
01:17:13,000 --> 01:17:14,000
只能干一件事情

2915
01:17:14,000 --> 01:17:14,000
对吧

2916
01:17:14,000 --> 01:17:14,000
然后突然

2917
01:17:14,000 --> 01:17:16,000
能够同时干几件事情

2918
01:17:16,000 --> 01:17:17,000
还是蛮奇怪的

2919
01:17:17,000 --> 01:17:19,000
一个认知上的变化

2920
01:17:19,000 --> 01:17:20,000
对

2921
01:17:20,000 --> 01:17:23,000
但回到游戏上面

2922
01:17:23,000 --> 01:17:24,000
就是其实在 Dot 时代

2923
01:17:24,000 --> 01:17:25,000
已经有很多游戏可以

2924
01:17:25,000 --> 01:17:26,000
比如说

2925
01:17:26,000 --> 01:17:28,000
或者说游戏给你观感

2926
01:17:28,000 --> 01:17:30,000
就是你可以一边放音乐

2927
01:17:30,000 --> 01:17:32,000
就是有至少游戏的背景音乐

2928
01:17:32,000 --> 01:17:32,000
在播放

2929
01:17:32,000 --> 01:17:35,000
然后你还可以操纵里面的人

2930
01:17:35,000 --> 01:17:36,000
在走路

2931
01:17:36,000 --> 01:17:36,000
然后

2932
01:17:36,000 --> 01:17:41,000
好像也没有那么的让人

2933
01:17:41,000 --> 01:17:42,000
但是

2934
01:17:42,000 --> 01:17:42,000
但起码就是说

2935
01:17:42,000 --> 01:17:43,000
才在这个

2936
01:17:43,000 --> 01:17:45,000
就是对这个东西认识上

2937
01:17:45,000 --> 01:17:46,000
他在玩这个游戏

2938
01:17:46,000 --> 01:17:48,000
他不能在玩这个游戏的时候

2939
01:17:48,000 --> 01:17:49,000
同时去

2940
01:17:49,000 --> 01:17:51,000
就处理一个什么文字

2941
01:17:51,000 --> 01:17:53,000
编辑一个文本之类的

2942
01:17:53,000 --> 01:17:54,000
对

2943
01:17:54,000 --> 01:17:55,000
虽然那个时代也有什么

2944
01:17:55,000 --> 01:17:57,000
常驻内存的

2945
01:17:57,000 --> 01:17:58,000
工具

2946
01:17:58,000 --> 01:17:59,000
比如说

2947
01:17:59,000 --> 01:17:59,000
有些游戏

2948
01:17:59,000 --> 01:18:00,000
游戏修改工具

2949
01:18:00,000 --> 01:18:02,000
会自己缩在内存一角

2950
01:18:02,000 --> 01:18:03,000
然后让你去漏了一个

2951
01:18:03,000 --> 01:18:05,000
然后按一个什么快捷键

2952
01:18:05,000 --> 01:18:06,000
然后按一个热键

2953
01:18:06,000 --> 01:18:07,000
整个游戏就

2954
01:18:07,000 --> 01:18:08,000
就就就就

2955
01:18:08,000 --> 01:18:10,000
就冻结了那里

2956
01:18:10,000 --> 01:18:10,000
然后这个时候

2957
01:18:10,000 --> 01:18:12,000
你可以用这个小工具来

2958
01:18:12,000 --> 01:18:13,000
修改内存

2959
01:18:13,000 --> 01:18:15,000
然后等你改好的时候

2960
01:18:15,000 --> 01:18:16,000
再重新继续游戏

2961
01:18:16,000 --> 01:18:18,000
其实就是一个 debugger 嘛

2962
01:18:18,000 --> 01:18:19,000
对对对

2963
01:18:19,000 --> 01:18:19,000
对

2964
01:18:19,000 --> 01:18:20,000
然后重新继续游戏

2965
01:18:20,000 --> 01:18:22,000
发现自己忽然有了几万块钱

2966
01:18:22,000 --> 01:18:24,000
有了什么

2967
01:18:24,000 --> 01:18:26,000
金铲骨

2968
01:18:26,000 --> 01:18:27,000
对

2969
01:18:27,000 --> 01:18:28,000
哎呦

2970
01:18:28,000 --> 01:18:29,000
这些游戏

2971
01:18:29,000 --> 01:18:31,000
那个时候如此熟悉

2972
01:18:31,000 --> 01:18:32,000
怎么现在好像

2973
01:18:32,000 --> 01:18:34,000
这些工具

2974
01:18:34,000 --> 01:18:34,000
那个时候

2975
01:18:34,000 --> 01:18:37,000
那么那么耳熟能详

2976
01:18:37,000 --> 01:18:38,000
现在好像一个都想不出来

2977
01:18:38,000 --> 01:18:39,000
我就只想几个

2978
01:18:39,000 --> 01:18:41,000
只能像一个 PC tools

2979
01:18:41,000 --> 01:18:41,000
哎呀

2980
01:18:41,000 --> 01:18:42,000
我也想不出来

2981
01:18:42,000 --> 01:18:43,000
anyway

2982
01:18:43,000 --> 01:18:45,000
回头再去考古吧

2983
01:18:45,000 --> 01:18:45,000
好呀

2984
01:18:45,000 --> 01:18:46,000
嗯

2985
01:18:46,000 --> 01:18:47,000
然后就 Windows

2986
01:18:47,000 --> 01:18:48,000
就起码我们能够确切的知道

2987
01:18:48,000 --> 01:18:50,000
是 Windows 95 开始搭载一个

2988
01:18:50,000 --> 01:18:51,000
这个什么多任务的系统

2989
01:18:51,000 --> 01:18:56,000
不过他那个多任务和我们现在多任务还是在在机制上还是有很大不一样的

2990
01:18:56,000 --> 01:19:00,000
他是一个所谓的呃叫做非抢战士

2991
01:19:00,000 --> 01:19:01,000
协作是多任务吧

2992
01:19:01,000 --> 01:19:06,000
对就是简单来说就是你是一个程序我是一个程序

2993
01:19:06,000 --> 01:19:11,000
然后我们两个必须比较有默契一定要说你放唱吧我登场

2994
01:19:11,000 --> 01:19:18,000
然后呃我先用用到我觉得可以不用的时候我要主动放弃对机器的控制权

2995
01:19:18,000 --> 01:19:20,000
交给要交给交给别人

2996
01:19:20,000 --> 01:19:27,000
对呃这个就有点跟就做个类比的话跟现在哪个事情比较像像现在跟那个做

2997
01:19:27,000 --> 01:19:30,000
我觉得就唱 K 一样嘛

2998
01:19:30,000 --> 01:19:31,000
就你你

2999
01:19:31,000 --> 01:19:32,000
麦爸

3000
01:19:32,000 --> 01:19:37,000
对你要你要你要做麦爸的话麦爸这种东西招人讨厌

3001
01:19:37,000 --> 01:19:46,000
就是因为没有一个更强大的那个一个一个裁判机制站在那说你唱够了你把麦给我我把它给别人

3002
01:19:46,000 --> 01:19:47,000
嗯嗯

3003
01:19:47,000 --> 01:19:52,000
对当时温度 95 就有点像一群一群一群呃程序在唱 K

3004
01:19:52,000 --> 01:19:56,000
对呃你你唱一会我唱一会我们要轮流换对吧

3005
01:19:56,000 --> 01:20:02,000
但如果有一个人霸着麦爸不放的话那有可能就用户就说哎呀怎么又没有响应了

3006
01:20:02,000 --> 01:20:05,000
系统资源独占了他就对啊

3007
01:20:05,000 --> 01:20:07,000
怎么这么卡呀重启一下吧

3008
01:20:07,000 --> 01:20:09,000
然后对大家都没歌唱

3009
01:20:09,000 --> 01:20:10,000
对呃

3010
01:20:10,000 --> 01:20:18,000
协作是多人物其实在现在我们日常的这个编程过程中还有一个比较相关的一个东西啊就是比如说在那个 node 里面

3011
01:20:18,000 --> 01:20:20,000
你要因为 node 是一个单进程的东西嘛

3012
01:20:20,000 --> 01:20:24,000
然后你要做一些稍微复杂一点的或者是需要等待的操作

3013
01:20:24,000 --> 01:20:28,000
比如说你要做 io 的时候你得用一个所谓的这个回调嘛 callback

3014
01:20:28,000 --> 01:20:32,000
其实那个时候就也是一个所谓的这个协作是多人物的一个体现

3015
01:20:32,000 --> 01:20:36,000
就是说哎我现在能我之前能做的那些什么价格存储的计算都做完了

3016
01:20:36,000 --> 01:20:40,000
现在我要做一个可能不能马上执行的东西因为等那个 io 返回嘛

3017
01:20:40,000 --> 01:20:45,000
呃我先把这个所谓这个控制权让出来然后我先给你一个回调函数

3018
01:20:45,000 --> 01:20:48,000
等这个东西就告诉这个调度器说

3019
01:20:48,000 --> 01:20:55,000
等这个呃我要的这个 io 结果回来之后你再接再换行我接着执行那个回调程序

3020
01:20:55,000 --> 01:20:59,000
但现在开始我就把这个控制权让出去了这个就是一个协作多人物的一个体现

3021
01:20:59,000 --> 01:21:06,000
对嗯然后在 windows 95 的时代就所有的程序你要进行这个系统资源的共享的话

3022
01:21:06,000 --> 01:21:09,000
你这是要做类似的事情

3023
01:21:09,000 --> 01:21:15,000
但是那个时候其实当我们说到 windows 95 的时候内存已经不是什么太大的问题了

3024
01:21:15,000 --> 01:21:22,000
在 windows 95 之前的很长一段时间里面怎样优化使用有限的内存

3025
01:21:22,000 --> 01:21:25,000
简直是每一个程序员的必修可啊

3026
01:21:25,000 --> 01:21:29,000
我觉得 windows 95 也是就起码到到现在都是啊我觉得

3027
01:21:29,000 --> 01:21:35,000
现在其实还是有很多就是有些程序员可以一辈子不碰

3028
01:21:35,000 --> 01:21:44,000
或者在你的从业过程之中可能呃你可以一两年不去碰任何和内存管理有关的话题啊

3029
01:21:44,000 --> 01:21:46,000
哎比如那个时候是做不到的

3030
01:21:46,000 --> 01:21:51,000
对就现在的话你只要用一个所谓的 managementmanaged language

3031
01:21:51,000 --> 01:21:55,000
就是管理过的语言比如说 C sharp 不用那个什么指针

3032
01:21:55,000 --> 01:21:57,000
那个叫不安全指针叫什么

3033
01:21:57,000 --> 01:21:58,000
啊对 unsafe

3034
01:21:58,000 --> 01:22:00,000
unsafe pointer 对吧

3035
01:22:00,000 --> 01:22:03,000
然后你说你是用那个 java 用 jvm 上面跑

3036
01:22:03,000 --> 01:22:05,000
或者像什么刚才讲 node 啊

3037
01:22:05,000 --> 01:22:07,000
还有像很多这种脚本语言 python 都是

3038
01:22:07,000 --> 01:22:11,000
就你都不需要去手工的直接去管理分配内存

3039
01:22:11,000 --> 01:22:15,000
这都是啊这个这个系统或者这个运行时帮你解决了

3040
01:22:15,000 --> 01:22:18,000
然后甚至像你都是你呃这不用手工管理

3041
01:22:18,000 --> 01:22:20,000
包括你不用去申请你不用去分配

3042
01:22:20,000 --> 01:22:25,000
然后你也不用去担心这个这个叫什么呃返回的不叫反回

3043
01:22:25,000 --> 01:22:26,000
释放的问题

3044
01:22:26,000 --> 01:22:30,000
对但是如果你像在啊还是有用 c 类的语言

3045
01:22:30,000 --> 01:22:33,000
比如说像你用 cc++或者是现在大家还在写

3046
01:22:33,000 --> 01:22:38,000
你还是要在很多程度上是要手工管理内存的

3047
01:22:38,000 --> 01:22:38,000
所以现在有能够

3048
01:22:38,000 --> 01:22:39,000
去考虑这件事情

3049
01:22:39,000 --> 01:22:43,000
这种就算你不去亲自去做这件事情

3050
01:22:43,000 --> 01:22:44,000
这种就考虑这件事情

3051
01:22:44,000 --> 01:22:45,000
对

3052
01:22:45,000 --> 01:22:46,000
你用 c++还是需要手工管理内存吗

3053
01:22:46,000 --> 01:22:47,000
所有都不需要

3054
01:22:47,000 --> 01:22:50,000
ok 它是一个就是 management language

3055
01:22:50,000 --> 01:22:51,000
management language

3056
01:22:51,000 --> 01:22:52,000
它是有 gc

3057
01:22:52,000 --> 01:22:54,000
所以在手工管理内存的时候需要做一些什么事情

3058
01:22:54,000 --> 01:23:00,000
就是我记得那个时代看过一些手工管理内存的书会提到

3059
01:23:00,000 --> 01:23:04,000
比如说这个你一个程序比如说你只有呃

3060
01:23:04,000 --> 01:23:05,000
一兆内存可以用

3061
01:23:05,000 --> 01:23:06,000
嗯

3062
01:23:06,000 --> 01:23:10,000
然后你需要调用一堆函数呃

3063
01:23:10,000 --> 01:23:14,000
这些所有这些函数加在一起可能有两兆嗯

3064
01:23:14,000 --> 01:23:16,000
呃那怎么办呢

3065
01:23:16,000 --> 01:23:18,000
呃你可以把

3066
01:23:18,000 --> 01:23:23,000
你可以你这个时候就需要你精心去规划函数的分布

3067
01:23:23,000 --> 01:23:30,000
你要把一些函数打包包在一个正好是比如说 500 k 的这么一个呃

3068
01:23:30,000 --> 01:23:33,000
就是动态所谓动态库里面吧

3069
01:23:33,000 --> 01:23:33,000
嗯

3070
01:23:33,000 --> 01:23:35,000
然后你运行

3071
01:23:35,000 --> 01:23:36,000
比如说你在写一个游戏

3072
01:23:36,000 --> 01:23:39,000
然后这个游戏里面跑这个关卡的时候

3073
01:23:39,000 --> 01:23:40,000
关卡啊

3074
01:23:40,000 --> 01:23:41,000
这个我说对了

3075
01:23:41,000 --> 01:23:42,000
哈哈哈

3076
01:23:42,000 --> 01:23:45,000
跑这个关卡的时候你用需要用的这些函数

3077
01:23:45,000 --> 01:23:49,000
那你就在这个时候把这 512 k 的呃

3078
01:23:49,000 --> 01:23:49,000
呃

3079
01:23:49,000 --> 01:23:50,000
调入内存

3080
01:23:50,000 --> 01:23:52,000
然后去调入这些函数

3081
01:23:52,000 --> 01:23:55,000
然后等到你打完这个关卡之后这些函数不需要了

3082
01:23:55,000 --> 01:23:58,000
然后再把另外一个函数另外一个酷掉进来

3083
01:23:58,000 --> 01:23:58,000
嗯

3084
01:23:58,000 --> 01:24:03,000
然后就就等于你手工要去在你的程序里面实现一个内存管理器

3085
01:24:03,000 --> 01:24:03,000
嗯

3086
01:24:03,000 --> 01:24:04,000
嗯

3087
01:24:04,000 --> 01:24:05,000
实现一个动态加载器嗯

3088
01:24:05,000 --> 01:24:08,000
诸如此类的诸如此类的细节

3089
01:24:08,000 --> 01:24:11,000
那个时候我觉得哇靠这些都是黑魔法

3090
01:24:11,000 --> 01:24:12,000
实在是

3091
01:24:12,000 --> 01:24:15,000
我现在可能也多少觉得有点黑魔法

3092
01:24:15,000 --> 01:24:15,000
因为我其实

3093
01:24:15,000 --> 01:24:23,000
我就是个人来讲从来没有做过任何内存优化方面的东西就就我就已经长大了就已经就已经直接进入 GC 时代了

3094
01:24:23,000 --> 01:24:25,000
就已经幸运的进入了这个呃

3095
01:24:25,000 --> 01:24:26,000
这这个 GARBRE COLLECTION

3096
01:24:26,000 --> 01:24:27,000
无处不在的时代

3097
01:24:27,000 --> 01:24:33,000
对对对对对对对而我相信现在很多程序员可能从入门到尤其是如果你不是学呃

3098
01:24:33,000 --> 01:24:33,000
呃

3099
01:24:33,000 --> 01:24:35,000
极短级课班出身的话

3100
01:24:35,000 --> 01:24:38,000
你可能完全有机会

3101
01:24:38,000 --> 01:24:40,000
就是完全没有接触过

3102
01:24:40,000 --> 01:24:41,000
什么是内存管理

3103
01:24:41,000 --> 01:24:43,000
比如说我就说

3104
01:24:43,000 --> 01:24:45,000
我本科读的不是这个 CS

3105
01:24:45,000 --> 01:24:46,000
其实我

3106
01:24:46,000 --> 01:24:48,000
等我接触这些东西的时候

3107
01:24:48,000 --> 01:24:50,000
那些都停留在课本上的概念

3108
01:24:50,000 --> 01:24:52,000
就是我知道怎么一回事

3109
01:24:52,000 --> 01:24:53,000
原理怎么

3110
01:24:53,000 --> 01:24:54,000
但是我自己其实

3111
01:24:54,000 --> 01:24:57,000
没有亲身去操作过那个东西

3112
01:24:57,000 --> 01:24:59,000
这是变相秀年轻的

3113
01:24:59,000 --> 01:25:00,000
不

3114
01:25:00,000 --> 01:25:02,000
这是变相秀这个事情

3115
01:25:02,000 --> 01:25:04,000
底气不足

3116
01:25:04,000 --> 01:25:04,000
不能多说

3117
01:25:04,000 --> 01:25:06,000
好吧

3118
01:25:06,000 --> 01:25:08,000
那咱俩其实都比较底气不足

3119
01:25:08,000 --> 01:25:10,000
混蛋你是科班出身

3120
01:25:10,000 --> 01:25:11,000
怎么能够说你底气不足

3121
01:25:11,000 --> 01:25:13,000
可我也没有写过

3122
01:25:13,000 --> 01:25:15,000
一个好吧

3123
01:25:15,000 --> 01:25:16,000
我还是做过一点

3124
01:25:16,000 --> 01:25:19,000
但正儿八经的在工作

3125
01:25:19,000 --> 01:25:22,000
或者在实践之中

3126
01:25:22,000 --> 01:25:23,000
利用内存管理的知识

3127
01:25:23,000 --> 01:25:24,000
解决一个实际的问题

3128
01:25:24,000 --> 01:25:26,000
可能绝无仅有吧

3129
01:25:26,000 --> 01:25:28,000
但你之前写这个 iOS 的时候

3130
01:25:28,000 --> 01:25:29,000
不需要用这个吗

3131
01:25:29,000 --> 01:25:30,000
不需要手工管理内存吗

3132
01:25:30,000 --> 01:25:33,000
iOS 的所谓管理内存

3133
01:25:33,000 --> 01:25:35,000
你只是需要操心

3134
01:25:35,000 --> 01:25:37,000
不要泄露内存而已

3135
01:25:37,000 --> 01:25:39,000
根本不需要你去优化内存的使用

3136
01:25:39,000 --> 01:25:40,000
对

3137
01:25:40,000 --> 01:25:43,000
就 iOS 已经是一个非常非常先进的

3138
01:25:43,000 --> 01:25:44,000
这个

3139
01:25:44,000 --> 01:25:45,000
或者说

3140
01:25:45,000 --> 01:25:46,000
Object C

3141
01:25:46,000 --> 01:25:47,000
Coco 这个运行时

3142
01:25:47,000 --> 01:25:50,000
已经是非常非常先进的一套东西了

3143
01:25:50,000 --> 01:25:53,000
你不需要去考虑自己的

3144
01:25:53,000 --> 01:25:55,000
Objects 在内存里面是怎么样对齐的

3145
01:25:55,000 --> 01:25:59,000
或者是怎样

3146
01:25:59,000 --> 01:26:01,000
就很多 C 时代

3147
01:26:01,000 --> 01:26:02,000
什么

3148
01:26:02,000 --> 01:26:04,000
那个 Struct a line 那种东西

3149
01:26:04,000 --> 01:26:06,000
对这些东西

3150
01:26:06,000 --> 01:26:08,000
什么 Padding 啊

3151
01:26:08,000 --> 01:26:09,000
什么什么

3152
01:26:09,000 --> 01:26:09,000
乃至

3153
01:26:09,000 --> 01:26:13,000
C 里面还有一种黑魔法

3154
01:26:13,000 --> 01:26:15,000
是使用 Union 类型来

3155
01:26:15,000 --> 01:26:16,000
节省这个工业

3156
01:26:16,000 --> 01:26:18,000
这个我记得之前以前学 C

3157
01:26:18,000 --> 01:26:20,000
看老谭的书的时候

3158
01:26:20,000 --> 01:26:21,000
还记得还要

3159
01:26:21,000 --> 01:26:23,000
还挺对这块还挺觉得挺新奇

3160
01:26:23,000 --> 01:26:26,000
对那个时候真的是为了省一两个 byte

3161
01:26:26,000 --> 01:26:28,000
可以绞尽脑汁想好

3162
01:26:28,000 --> 01:26:30,000
那个什么

3163
01:26:30,000 --> 01:26:33,000
真正的 Premature Optimization

3164
01:26:33,000 --> 01:26:35,000
这个已经不是

3165
01:26:35,000 --> 01:26:36,000
我也不知道

3166
01:26:36,000 --> 01:26:38,000
可那个时代

3167
01:26:38,000 --> 01:26:42,000
你如果不能精细的去使用内存的话

3168
01:26:42,000 --> 01:26:45,000
那就没有什么多的内存可以给你用

3169
01:26:45,000 --> 01:26:47,000
经常就会直接 OOM 了

3170
01:26:47,000 --> 01:26:47,000
对啊

3171
01:26:47,000 --> 01:26:50,000
也没有虚拟内存这种东西对吧

3172
01:26:50,000 --> 01:26:53,000
也没有一个运行时

3173
01:26:53,000 --> 01:26:57,000
或者是没有操作系统来替你去操心这些事情

3174
01:26:57,000 --> 01:26:58,000
你只能一切动手

3175
01:26:58,000 --> 01:26:59,000
一切一切都自己动手

3176
01:26:59,000 --> 01:27:00,000
对

3177
01:27:00,000 --> 01:27:01,000
其实现在的话

3178
01:27:01,000 --> 01:27:03,000
很多做这个嵌入室开发的朋友

3179
01:27:03,000 --> 01:27:05,000
他还是要做很多这种

3180
01:27:05,000 --> 01:27:06,000
刚才我们讲的那种工作啊

3181
01:27:06,000 --> 01:27:07,000
就是要考虑

3182
01:27:07,000 --> 01:27:08,000
因为嵌入室这种

3183
01:27:08,000 --> 01:27:11,000
嵌入室这种的跑的那个硬件的水平都非常

3184
01:27:11,000 --> 01:27:13,000
按今天的标准来看都是非常糟糕的

3185
01:27:13,000 --> 01:27:14,000
对

3186
01:27:14,000 --> 01:27:15,000
上次我来看说那个什么

3187
01:27:15,000 --> 01:27:17,000
现在不是要流行一个什么

3188
01:27:17,000 --> 01:27:18,000
Internet of Things

3189
01:27:18,000 --> 01:27:19,000
物流网的这个时代

3190
01:27:19,000 --> 01:27:21,000
有很多那种传感器啊

3191
01:27:21,000 --> 01:27:23,000
一种小芯片什么的

3192
01:27:23,000 --> 01:27:24,000
我上次看 ARM 出了一个什么

3193
01:27:24,000 --> 01:27:26,000
一个很常用的一个芯片

3194
01:27:26,000 --> 01:27:27,000
只有 2 KB 的内存

3195
01:27:27,000 --> 01:27:29,000
What

3196
01:27:29,000 --> 01:27:32,000
就是那种很小的一个传感器的

3197
01:27:32,000 --> 01:27:34,000
那种好的芯片

3198
01:27:34,000 --> 01:27:35,000
只有 2 KB 的内存

3199
01:27:35,000 --> 01:27:35,000
我想哇

3200
01:27:35,000 --> 01:27:36,000
这怎么用

3201
01:27:36,000 --> 01:27:40,000
而且 2 KB 不仅要装

3202
01:27:40,000 --> 01:27:41,000
那个

3203
01:27:41,000 --> 01:27:43,000
不仅要装数据

3204
01:27:43,000 --> 01:27:43,000
还要装程序本身

3205
01:27:43,000 --> 01:27:46,000
它那个程序是放在 ROM 里面的

3206
01:27:46,000 --> 01:27:47,000
就是 2 KB

3207
01:27:47,000 --> 01:27:48,000
所以 2 KB 是正常八经的

3208
01:27:48,000 --> 01:27:49,000
对

3209
01:27:49,000 --> 01:27:49,000
只是运行

3210
01:27:49,000 --> 01:27:50,000
但是

3211
01:27:50,000 --> 01:27:51,000
2 KB 哦

3212
01:27:51,000 --> 01:27:52,000
嗯

3213
01:27:52,000 --> 01:27:54,000
但我觉得可能

3214
01:27:54,000 --> 01:27:55,000
嵌入室开发

3215
01:27:55,000 --> 01:27:56,000
还有一个

3216
01:27:56,000 --> 01:27:58,000
你们

3217
01:27:58,000 --> 01:28:00,000
有一个不那么让它

3218
01:28:00,000 --> 01:28:02,000
更复杂的东西

3219
01:28:02,000 --> 01:28:03,000
就是它很少会涉及到

3220
01:28:03,000 --> 01:28:06,000
从一个更大的存储器上

3221
01:28:06,000 --> 01:28:07,000
调用数据到内存里面的

3222
01:28:07,000 --> 01:28:08,000
这样一个动作

3223
01:28:08,000 --> 01:28:09,000
啊

3224
01:28:09,000 --> 01:28:10,000
它是直接

3225
01:28:10,000 --> 01:28:10,000
这点其实

3226
01:28:10,000 --> 01:28:11,000
对

3227
01:28:11,000 --> 01:28:12,000
你一开始在写的时候

3228
01:28:12,000 --> 01:28:14,000
就知道整个 CPU 的

3229
01:28:14,000 --> 01:28:15,000
对

3230
01:28:15,000 --> 01:28:16,000
或者整个 ROM 的

3231
01:28:16,000 --> 01:28:19,000
整个存储器的分布

3232
01:28:19,000 --> 01:28:20,000
会是怎么样的

3233
01:28:20,000 --> 01:28:21,000
你有多少东西可以用

3234
01:28:21,000 --> 01:28:22,000
然后里面可能有一个

3235
01:28:22,000 --> 01:28:23,000
小小的 bootloader

3236
01:28:23,000 --> 01:28:24,000
然后其他所有的空间

3237
01:28:24,000 --> 01:28:25,000
都是你的

3238
01:28:25,000 --> 01:28:26,000
然后你直接要往里面

3239
01:28:26,000 --> 01:28:26,000
对

3240
01:28:26,000 --> 01:28:27,000
而且它是一个

3241
01:28:27,000 --> 01:28:29,000
绝对的单人物的系统

3242
01:28:29,000 --> 01:28:30,000
就没有人和你抢站

3243
01:28:30,000 --> 01:28:32,000
抢资源什么的

3244
01:28:32,000 --> 01:28:32,000
对

3245
01:28:32,000 --> 01:28:35,000
就整个芯片都是你的

3246
01:28:35,000 --> 01:28:37,000
对

3247
01:28:37,000 --> 01:28:38,000
规划方面的

3248
01:28:38,000 --> 01:28:42,000
头疼的问题可能还少一些

3249
01:28:42,000 --> 01:28:43,000
但是早期的

3250
01:28:43,000 --> 01:28:45,000
早期的 PC 级变成

3251
01:28:45,000 --> 01:28:46,000
真的是相当负担

3252
01:28:46,000 --> 01:28:48,000
这个是我应该说那句话

3253
01:28:48,000 --> 01:28:51,000
这个芯片我已经为你预留了

3254
01:28:51,000 --> 01:28:54,000
这个芯片我已经给你承包了

3255
01:28:54,000 --> 01:29:02,000
但是到我们现在的一些主流的一些开发的话

3256
01:29:02,000 --> 01:29:03,000
其实这块

3257
01:29:03,000 --> 01:29:04,000
就是如你所说

3258
01:29:04,000 --> 01:29:06,000
其实是没有什么概念

3259
01:29:06,000 --> 01:29:09,000
甚至说连内存本身的物理的尺寸

3260
01:29:09,000 --> 01:29:11,000
都已经被抽象掉了

3261
01:29:11,000 --> 01:29:13,000
就是因为有虚拟内存这个东西

3262
01:29:13,000 --> 01:29:14,000
对

3263
01:29:14,000 --> 01:29:17,000
操作系统给程序

3264
01:29:17,000 --> 01:29:18,000
展现的是一个

3265
01:29:18,000 --> 01:29:20,000
所谓一个连续的庞大的

3266
01:29:20,000 --> 01:29:23,000
内存的地址空间

3267
01:29:23,000 --> 01:29:25,000
但是其实操作系统的

3268
01:29:25,000 --> 01:29:26,000
在内存实际分配的时候

3269
01:29:26,000 --> 01:29:29,000
并不是说真的有无限大的一块内存

3270
01:29:29,000 --> 01:29:30,000
给一个程序使用的

3271
01:29:30,000 --> 01:29:31,000
对吧

3272
01:29:31,000 --> 01:29:32,000
对

3273
01:29:32,000 --> 01:29:36,000
我觉得这个问题可以从程序员的角度

3274
01:29:36,000 --> 01:29:39,000
就是从一个操作系统的使用者的角度来看

3275
01:29:39,000 --> 01:29:41,000
就是它简化了变成模型

3276
01:29:41,000 --> 01:29:44,000
就是如果没有迅内存的话

3277
01:29:44,000 --> 01:29:46,000
你将不得不面对

3278
01:29:46,000 --> 01:29:48,000
我的程序应该放在哪这个问题

3279
01:29:48,000 --> 01:29:49,000
对

3280
01:29:49,000 --> 01:29:50,000
就是我在

3281
01:29:50,000 --> 01:29:52,000
我的程序在运行时

3282
01:29:52,000 --> 01:29:55,000
处于内存的什么地方

3283
01:29:55,000 --> 01:29:58,000
难道是一件要我自己来操心的事情吗

3284
01:29:58,000 --> 01:29:59,000
对

3285
01:29:59,000 --> 01:30:00,000
对

3286
01:30:00,000 --> 01:30:01,000
如果没有迅内存的话

3287
01:30:01,000 --> 01:30:02,000
你将不得不面临这个问题

3288
01:30:02,000 --> 01:30:04,000
就像早期

3289
01:30:04,000 --> 01:30:07,000
的就重新回到了

3290
01:30:07,000 --> 01:30:11,000
单机程序的这么一个状态里面

3291
01:30:11,000 --> 01:30:14,000
就我要和其他的程序共存吗

3292
01:30:14,000 --> 01:30:16,000
因为就像我刚才说的

3293
01:30:16,000 --> 01:30:19,000
这个修改内存的小工具一样

3294
01:30:19,000 --> 01:30:21,000
它显然是要考虑自己

3295
01:30:21,000 --> 01:30:22,000
要把自己放在什么地方

3296
01:30:22,000 --> 01:30:24,000
然后它必须跟另外一个程序

3297
01:30:24,000 --> 01:30:26,000
共同享用实体内存

3298
01:30:26,000 --> 01:30:28,000
但是虚拟存的出现是解决这个问题

3299
01:30:28,000 --> 01:30:29,000
就是简单来说

3300
01:30:29,000 --> 01:30:31,000
一个程序

3301
01:30:31,000 --> 01:30:32,000
如果它是 32 倍的

3302
01:30:32,000 --> 01:30:37,000
那它会认为自己有将近 4 G 的内存空间

3303
01:30:37,000 --> 01:30:44,000
就是从 0 x 00008 个 0 吧

3304
01:30:44,000 --> 01:30:45,000
它只有 2 GB 吧

3305
01:30:45,000 --> 01:30:48,000
没有 32 倍的就不能到 4 GB 的空间

3306
01:30:48,000 --> 01:30:51,000
32 倍不是 4 G

3307
01:30:51,000 --> 01:30:53,000
但是好像我记得是在

3308
01:30:53,000 --> 01:30:56,000
就操作系统会预留到一部分

3309
01:30:56,000 --> 01:30:57,000
对对

3310
01:30:57,000 --> 01:30:59,000
操作系统应该会占用到

3311
01:30:59,000 --> 01:31:02,000
操作系统会占用一部分地址空间

3312
01:31:02,000 --> 01:31:02,000
对

3313
01:31:02,000 --> 01:31:03,000
但肯定不到 4 G 的

3314
01:31:03,000 --> 01:31:06,000
能够实际使用的这个地址空间

3315
01:31:06,000 --> 01:31:06,000
对

3316
01:31:06,000 --> 01:31:07,000
因为它不是从 000 开始吗

3317
01:31:07,000 --> 01:31:10,000
所以肯定是到不到那个 4 G 的

3318
01:31:10,000 --> 01:31:10,000
对

3319
01:31:10,000 --> 01:31:15,000
就大概有 3 GB 的空间是可以用的吧

3320
01:31:15,000 --> 01:31:15,000
对对对

3321
01:31:15,000 --> 01:31:29,000
然后我记得 Windows 上面的默认空间好像有只有 2 GB 左右

3322
01:31:29,000 --> 01:31:31,000
就是因为那个时候我记得 Windows 启动

3323
01:31:31,000 --> 01:31:33,000
有一个 Windows 有一个启动参数

3324
01:31:33,000 --> 01:31:37,000
就是你还记得 boot.ini 这个东西吗

3325
01:31:37,000 --> 01:31:38,000
我不知道

3326
01:31:38,000 --> 01:31:39,000
好咕嚕

3327
01:31:39,000 --> 01:31:40,000
又暴露年龄了

3328
01:31:40,000 --> 01:31:42,000
就是在 boot.ini 里面

3329
01:31:42,000 --> 01:31:46,000
你可以给 Windows 的启动加上一个 slash 3 G 这个选项

3330
01:31:46,000 --> 01:31:47,000
OK

3331
01:31:47,000 --> 01:31:50,000
而且这是 XP 都有的一个参数

3332
01:31:50,000 --> 01:31:51,000
就是对

3333
01:31:51,000 --> 01:31:52,000
你加这个参数之后

3334
01:31:52,000 --> 01:31:58,000
操作系统的那个虚拟地址空间会

3335
01:31:58,000 --> 01:32:02,000
会才会减少到 1 G 应该是

3336
01:32:02,000 --> 01:32:06,000
然后在这种情况下程序才有将近 3 G 的空间可以用

3337
01:32:06,000 --> 01:32:06,000
对

3338
01:32:06,000 --> 01:32:07,000
就哪怕是现在

3339
01:32:07,000 --> 01:32:08,000
如果我没记错的话

3340
01:32:08,000 --> 01:32:09,000
现在的就

3341
01:32:09,000 --> 01:32:12,000
就比较现实我没用过 Windows 8 了哈

3342
01:32:12,000 --> 01:32:14,000
就之前的那个 Windows 的机器

3343
01:32:14,000 --> 01:32:16,000
如果它是 32 位的版本的话

3344
01:32:16,000 --> 01:32:18,000
你插上超过 4 G 的内存

3345
01:32:18,000 --> 01:32:21,000
它实际可以使用的也只有 3 个 GB 吗

3346
01:32:21,000 --> 01:32:21,000
对

3347
01:32:21,000 --> 01:32:23,000
我记得好像是这样子

3348
01:32:23,000 --> 01:32:23,000
对

3349
01:32:23,000 --> 01:32:27,000
不过后来有个什么扩展

3350
01:32:27,000 --> 01:32:29,000
有个什么用 48 位的地址来

3351
01:32:29,000 --> 01:32:31,000
来扩展一下

3352
01:32:31,000 --> 01:32:34,000
然后也可以用到很多

3353
01:32:34,000 --> 01:32:36,000
就超过 4 GB 的内存

3354
01:32:36,000 --> 01:32:38,000
但这个这个跟今天的一个话题没什么关系

3355
01:32:38,000 --> 01:32:38,000
对

3356
01:32:38,000 --> 01:32:40,000
对

3357
01:32:40,000 --> 01:32:42,000
就是可以这么说吧

3358
01:32:42,000 --> 01:32:46,000
就是 386 这个系列的

3359
01:32:46,000 --> 01:32:49,000
就是我们今天所使用的 32 位

3360
01:32:49,000 --> 01:32:52,000
或者说我们曾经在过去很长一段时间里面

3361
01:32:52,000 --> 01:32:55,000
所使用的 32 位的这个 CPU

3362
01:32:55,000 --> 01:33:00,000
就是其实和最古老的 8086 系列是

3363
01:33:00,000 --> 01:33:04,000
基本可以说是抑制兼容的

3364
01:33:04,000 --> 01:33:07,000
但是为了保持这种兼容性也不得不付出很多代价

3365
01:33:07,000 --> 01:33:12,000
其中之一就是在比如说后面的寻止模式上面啊

3366
01:33:12,000 --> 01:33:17,000
或者是很多其他地方都有不得不做出很多妥协

3367
01:33:17,000 --> 01:33:25,000
然后刚才所说的这个选均的一种一种一种一种形式吧

3368
01:33:25,000 --> 01:33:33,000
然后英特尔在推出 64 M 处理器的时候想要曾经想要一劳永逸的解决这个问题

3369
01:33:33,000 --> 01:33:38,000
但是那个叫做安腾是吧

3370
01:33:38,000 --> 01:33:41,000
对安腾处理器想要解决这个问题

3371
01:33:41,000 --> 01:33:49,000
但是为此要付出一个就是打破这个向后兼容性的这么一个代价

3372
01:33:49,000 --> 01:33:51,000
所以他最终可耻失败

3373
01:33:51,000 --> 01:33:53,000
对

3374
01:33:53,000 --> 01:33:56,000
假如听众还不太清楚一件事情的话

3375
01:33:56,000 --> 01:33:58,000
就是我们现在用的所谓 64 位处理器

3376
01:33:58,000 --> 01:34:01,000
其实并不是真正以上的 64 位

3377
01:34:01,000 --> 01:34:09,000
他只是由 AMD 来做出了一个 64 位系统

3378
01:34:09,000 --> 01:34:11,000
对他是一个兼容模式

3379
01:34:11,000 --> 01:34:16,000
对他扩展了我们之前使用的 32 位的 CPU

3380
01:34:16,000 --> 01:34:19,000
然后让他可以处理

3381
01:34:19,000 --> 01:34:20,000
就是怎么说呢

3382
01:34:20,000 --> 01:34:25,000
简单来说就是 AMD 64 位的 CPU

3383
01:34:25,000 --> 01:34:29,000
可以运行 32 位的操作手组的运用程序

3384
01:34:29,000 --> 01:34:32,000
但是安腾的也是一个纯粹的 64 位的处理器

3385
01:34:32,000 --> 01:34:33,000
其实是不行的

3386
01:34:33,000 --> 01:34:33,000
对

3387
01:34:33,000 --> 01:34:36,000
这会导致他就有一个什么鸡和蛋的问题

3388
01:34:36,000 --> 01:34:40,000
说你有这个 64 位的机器了

3389
01:34:40,000 --> 01:34:42,000
可是我没有 64 位程序要跑啊

3390
01:34:42,000 --> 01:34:44,000
那我要你 64 位机器来干什么

3391
01:34:44,000 --> 01:34:47,000
于是他那个产品线就挂掉了

3392
01:34:47,000 --> 01:34:47,000
对

3393
01:34:47,000 --> 01:34:51,000
这就是为什么各位还在用 Windows 的朋友们

3394
01:34:51,000 --> 01:34:57,000
你们的 Program Files 下面会有两个文件夹

3395
01:34:57,000 --> 01:34:58,000
一个叫做 Program Files

3396
01:34:58,000 --> 01:34:59,000
一个叫做 Program Files X 64

3397
01:34:59,000 --> 01:35:01,000
还是 X 32

3398
01:35:01,000 --> 01:35:02,000
X 86 吧

3399
01:35:02,000 --> 01:35:03,000
X 86 对

3400
01:35:03,000 --> 01:35:06,000
IA 32 X 86

3401
01:35:06,000 --> 01:35:06,000
对

3402
01:35:06,000 --> 01:35:08,000
是这样子的

3403
01:35:08,000 --> 01:35:09,000
对

3404
01:35:09,000 --> 01:35:14,000
其中一个里面装着 32 位的程序运用程序

3405
01:35:14,000 --> 01:35:17,000
另外一个装着准 64 位的运用程序

3406
01:35:17,000 --> 01:35:17,000
等一下

3407
01:35:17,000 --> 01:35:19,000
这个在 32 位版的 Windows 上面

3408
01:35:19,000 --> 01:35:20,000
也有这个区别吗

3409
01:35:20,000 --> 01:35:21,000
我不太清楚

3410
01:35:21,000 --> 01:35:27,000
在 32 位版的 Windows 上面不会有 Program Files

3411
01:35:27,000 --> 01:35:27,000
不不

3412
01:35:27,000 --> 01:35:30,000
不会有 Program Files X 64

3413
01:35:30,000 --> 01:35:30,000
因为

3414
01:35:30,000 --> 01:35:31,000
X 86

3415
01:35:31,000 --> 01:35:32,000
对

3416
01:35:32,000 --> 01:35:33,000
就只有一个 Program Files

3417
01:35:33,000 --> 01:35:35,000
因为他默认就只有 X 86

3418
01:35:35,000 --> 01:35:35,000
对

3419
01:35:35,000 --> 01:35:37,000
就只有一个 Program Files

3420
01:35:37,000 --> 01:35:37,000
对

3421
01:35:37,000 --> 01:35:42,000
刚才讲到这个虚拟内存的一个最主要的用途

3422
01:35:42,000 --> 01:35:44,000
就是让编程的模型简化嘛

3423
01:35:44,000 --> 01:35:47,000
就是不用去考虑说你的这个东西在哪

3424
01:35:47,000 --> 01:35:53,000
然后这个剩下的这个调度的问题是交给内核来来操续统来做的嘛

3425
01:35:53,000 --> 01:35:53,000
对

3426
01:35:53,000 --> 01:35:56,000
这里就有一个概念叫做 Memory Hierarchy

3427
01:35:56,000 --> 01:36:00,000
就是内存的存储器的等级

3428
01:36:00,000 --> 01:36:02,000
嗯

3429
01:36:02,000 --> 01:36:04,000
就叫等级吧

3430
01:36:04,000 --> 01:36:05,000
Hierarchy

3431
01:36:05,000 --> 01:36:06,000
内存层级

3432
01:36:06,000 --> 01:36:07,000
对

3433
01:36:07,000 --> 01:36:10,000
其实我们知道在这个计算机里面

3434
01:36:10,000 --> 01:36:13,000
内存其实也不是一个非常高级别的

3435
01:36:13,000 --> 01:36:14,000
也比较高级别

3436
01:36:14,000 --> 01:36:16,000
就怎么说

3437
01:36:16,000 --> 01:36:18,000
最快的一个存储设备吧

3438
01:36:18,000 --> 01:36:22,000
最快存储设备其实是在 CPU 里面

3439
01:36:22,000 --> 01:36:24,000
叫做寄存器的东西

3440
01:36:24,000 --> 01:36:24,000
Register

3441
01:36:24,000 --> 01:36:28,000
然后他访问大概是多少一个速度

3442
01:36:28,000 --> 01:36:32,000
在现代的一个 CPU 上

3443
01:36:32,000 --> 01:36:33,000
访问寄存器应该就是

3444
01:36:33,000 --> 01:36:34,000
真的

3445
01:36:34,000 --> 01:36:36,000
这个有点迷糊了

3446
01:36:36,000 --> 01:36:37,000
0.5 nosecond

3447
01:36:37,000 --> 01:36:39,000
那个是 L 1

3448
01:36:39,000 --> 01:36:41,000
啊

3449
01:36:41,000 --> 01:36:42,000
访问寄存器的速度

3450
01:36:42,000 --> 01:36:43,000
对对

3451
01:36:43,000 --> 01:36:44,000
访问寄存器的速度是多少的一个量

3452
01:36:44,000 --> 01:36:46,000
访问寄存器需要时间吗

3453
01:36:46,000 --> 01:36:50,000
但肯定是在物理上是需要时间的嘛

3454
01:36:50,000 --> 01:36:52,000
他要等那个电路反应

3455
01:36:52,000 --> 01:36:54,000
但是是一个非常非常快速的时间

3456
01:36:54,000 --> 01:36:55,000
对

3457
01:36:55,000 --> 01:36:57,000
可能只需要几个

3458
01:36:57,000 --> 01:37:00,000
几个时钟

3459
01:37:00,000 --> 01:37:01,000
几个 cycle

3460
01:37:01,000 --> 01:37:02,000
不用 cycle 吧

3461
01:37:02,000 --> 01:37:03,000
一个 cycle 就能读到

3462
01:37:03,000 --> 01:37:05,000
一个 cycle 就可以读一个 register 吗

3463
01:37:05,000 --> 01:37:06,000
这个我不认

3464
01:37:06,000 --> 01:37:06,000
这个我不认

3465
01:37:06,000 --> 01:37:07,000
确定

3466
01:37:07,000 --> 01:37:08,000
需要回去

3467
01:37:08,000 --> 01:37:10,000
做功课了

3468
01:37:10,000 --> 01:37:10,000
对

3469
01:37:10,000 --> 01:37:14,000
我们暴露出了两个人底气不足的状况

3470
01:37:14,000 --> 01:37:16,000
就是没有做足功课

3471
01:37:16,000 --> 01:37:18,000
毕竟不是

3472
01:37:18,000 --> 01:37:20,000
毕竟是已经很多年了

3473
01:37:20,000 --> 01:37:21,000
我没有想到

3474
01:37:21,000 --> 01:37:22,000
我没有想到会讲这么低

3475
01:37:22,000 --> 01:37:24,000
没有这个就顺便提一下

3476
01:37:24,000 --> 01:37:25,000
然后

3477
01:37:25,000 --> 01:37:28,000
然后在 CPU 内部还要一个叫做

3478
01:37:28,000 --> 01:37:30,000
L 1 就是 layer 1 吧

3479
01:37:30,000 --> 01:37:36,000
L 1 cache 的这么一个就是一级缓存这么一个概念

3480
01:37:36,000 --> 01:37:42,000
一级缓存在现在意义上我们是有一个比相对好的度量的就是大概是 0.5

3481
01:37:42,000 --> 01:37:43,000
1.5

3482
01:37:43,000 --> 01:37:44,000
nano second

3483
01:37:44,000 --> 01:37:45,000
对

3484
01:37:45,000 --> 01:37:49,000
1 纳秒是多少

3485
01:37:49,000 --> 01:37:51,000
10 的

3486
01:37:51,000 --> 01:37:54,000
就 1 秒等于 10 的 9 字方各纳秒

3487
01:37:54,000 --> 01:37:59,000
然后你访问一个一级缓存的话是半个纳秒的时间

3488
01:37:59,000 --> 01:38:00,000
对

3489
01:38:00,000 --> 01:38:06,000
然后但如果有一级缓存那么自然而然也会有所谓的这个二级缓存

3490
01:38:06,000 --> 01:38:11,000
二级缓存在现代 CPU 上通常也是在

3491
01:38:11,000 --> 01:38:19,000
这个 CPU 芯片上的但只是离那个所谓的计算的内部那个原器件的距离要远一点

3492
01:38:19,000 --> 01:38:26,000
然后它的容量也会稍微大一点一级缓存通常也就是一两多少 k 吧

3493
01:38:26,000 --> 01:38:28,000
32 k 64 k 的

3494
01:38:28,000 --> 01:38:32,000
对然后 L 2 要大大一点

3495
01:38:32,000 --> 01:38:33,000
大一点点

3496
01:38:33,000 --> 01:38:38,000
就而且 L 2 缓存的大小往往确定了 CPU 的售价

3497
01:38:38,000 --> 01:38:40,000
其实 L 1 也是

3498
01:38:40,000 --> 01:38:43,000
就越大的 L 1 的价格一般越贵嘛

3499
01:38:43,000 --> 01:38:44,000
这个是肯定是相关的

3500
01:38:44,000 --> 01:38:48,000
因为确实做那个的成本很高

3501
01:38:48,000 --> 01:38:52,000
但是 LA 的话也通常也是 kb 级别吧

3502
01:38:52,000 --> 01:38:56,000
就有时候大一点的服务器的处理器回到一两兆应该是没有问题的

3503
01:38:56,000 --> 01:38:58,000
就每个 core 的 L 都换存

3504
01:38:58,000 --> 01:39:02,000
但是它的读取的时间就会要高一个数量级的

3505
01:39:02,000 --> 01:39:04,000
然后比如说它会在可能几个纳秒的左右

3506
01:39:04,000 --> 01:39:06,000
比如说它会在几个纳秒的左右

3507
01:39:06,000 --> 01:39:08,000
比如说这里我们有一个数据是给的

3508
01:39:08,000 --> 01:39:09,000
这里是给的是 7 个

3509
01:39:09,000 --> 01:39:14,000
这个文档我们名称这个文档我们会放在那个 notes 里面

3510
01:39:14,000 --> 01:39:16,000
这个文档也非常重要

3511
01:39:16,000 --> 01:39:18,000
如果你是一个程序员的话

3512
01:39:18,000 --> 01:39:22,000
这个文档的名称叫做 Latency numbers every program should know

3513
01:39:22,000 --> 01:39:24,000
你是这个 program

3514
01:39:24,000 --> 01:39:26,000
所以你 should know

3515
01:39:26,000 --> 01:39:29,000
就 L 2 的读取时间大概就是几个纳秒左右

3516
01:39:29,000 --> 01:39:33,000
当然还有一些处理器会有像什么所谓三级缓存啊

3517
01:39:33,000 --> 01:39:36,000
没有见过四级缓存的东西了好像

3518
01:39:36,000 --> 01:39:39,000
好像没有四级缓存就到内存了

3519
01:39:39,000 --> 01:39:42,000
对四级缓存本应该就已经是很难说啊

3520
01:39:42,000 --> 01:39:44,000
应该可能也有啊

3521
01:39:44,000 --> 01:39:47,000
我没有见过实用的系统上有四级缓存

3522
01:39:47,000 --> 01:39:48,000
OK

3523
01:39:48,000 --> 01:39:50,000
CQ 一般最多也就是三

3524
01:39:50,000 --> 01:39:53,000
就是缓存这个东西一般是会和 CPU 做在一起的

3525
01:39:53,000 --> 01:39:54,000
对

3526
01:39:54,000 --> 01:39:55,000
但是等你

3527
01:39:55,000 --> 01:39:57,000
还不太一样

3528
01:39:57,000 --> 01:39:59,000
三级缓存有很多是在主板上面的

3529
01:39:59,000 --> 01:40:00,000
What

3530
01:40:01,000 --> 01:40:02,000
你还记得吗

3531
01:40:02,000 --> 01:40:04,000
这个早年就是 90 年代末的时候

3532
01:40:04,000 --> 01:40:05,000
有 L 1 L 2 是在板上的

3533
01:40:05,000 --> 01:40:06,000
L 2 是在板上的

3534
01:40:06,000 --> 01:40:07,000
那是在一个芯片上面

3535
01:40:07,000 --> 01:40:09,000
但是三级缓存有很多这种廉价的

3536
01:40:09,000 --> 01:40:11,000
那不叫廉价的主板

3537
01:40:11,000 --> 01:40:14,000
算吧就是那种平就平民向的主板

3538
01:40:14,000 --> 01:40:15,000
还是

3539
01:40:15,000 --> 01:40:16,000
会把它做在主板上

3540
01:40:16,000 --> 01:40:17,000
对然后这样的话

3541
01:40:17,000 --> 01:40:20,000
他就可以买一个比较便宜的那个 CPU

3542
01:40:20,000 --> 01:40:21,000
不带三级缓存

3543
01:40:21,000 --> 01:40:22,000
嗯

3544
01:40:22,000 --> 01:40:23,000
对

3545
01:40:23,000 --> 01:40:25,000
就是这个是一个就是一个工业上的区别

3546
01:40:25,000 --> 01:40:27,000
对这逻辑上是没有任何区别

3547
01:40:27,000 --> 01:40:28,000
就是对

3548
01:40:28,000 --> 01:40:31,000
就总体来说缓存越快

3549
01:40:31,000 --> 01:40:32,000
就是这个存储器越快

3550
01:40:32,000 --> 01:40:33,000
它的容量越小

3551
01:40:33,000 --> 01:40:34,000
比如计存器就只有几个 Word

3552
01:40:34,000 --> 01:40:35,000
对吧

3553
01:40:35,000 --> 01:40:36,000
对吧

3554
01:40:36,000 --> 01:40:38,000
在一个现在的 CPU 里面

3555
01:40:38,000 --> 01:40:40,000
就 100 多个寄存器吧

3556
01:40:40,000 --> 01:40:41,000
不得了了

3557
01:40:41,000 --> 01:40:42,000
呃

3558
01:40:42,000 --> 01:40:44,000
然后就是但是速度非常快

3559
01:40:44,000 --> 01:40:46,000
但是就这个价格最贵

3560
01:40:46,000 --> 01:40:47,000
最价格最贵

3561
01:40:47,000 --> 01:40:50,000
然后一级缓存就几十 K

3562
01:40:50,000 --> 01:40:52,000
价格次值速度也次值

3563
01:40:52,000 --> 01:40:54,000
然后最以此类推

3564
01:40:54,000 --> 01:40:55,000
差不多都是对

3565
01:40:55,000 --> 01:40:56,000
呃

3566
01:40:56,000 --> 01:40:59,000
每跨越一个这个缓存的级别

3567
01:40:59,000 --> 01:41:06,000
它就有至少是有一个数量级的那个容量和这个访问速度的变化

3568
01:41:06,000 --> 01:41:07,000
就是对

3569
01:41:07,000 --> 01:41:08,000
嗯

3570
01:41:08,000 --> 01:41:09,000
大概是这个意思

3571
01:41:09,000 --> 01:41:11,000
但现在就一般来说呃

3572
01:41:11,000 --> 01:41:17,000
就缓存的话我们是看不到说一级缓存和二级缓存的这个实体的这个是编一级缓存

3573
01:41:17,000 --> 01:41:22,000
你也没有办法去具体的写一个程序说这个程序只用到一级缓存

3574
01:41:22,000 --> 01:41:23,000
对

3575
01:41:23,000 --> 01:41:24,000
这是不可能的

3576
01:41:24,000 --> 01:41:26,000
因为这个是在叫什么这个是超习种硬件

3577
01:41:26,000 --> 01:41:29,000
这个是计算机硬件帮你去调度解决的问题

3578
01:41:29,000 --> 01:41:30,000
当然你哈

3579
01:41:30,000 --> 01:41:31,000
对

3580
01:41:31,000 --> 01:41:35,000
汇编可以做到去选择性的使用呃

3581
01:41:35,000 --> 01:41:36,000
就什么居存器那东西

3582
01:41:36,000 --> 01:41:37,000
那个是另外一说

3583
01:41:37,000 --> 01:41:38,000
对

3584
01:41:38,000 --> 01:41:39,000
嗯

3585
01:41:39,000 --> 01:41:40,000
呃

3586
01:41:40,000 --> 01:41:45,000
但是其实就是说对于一个普通程序员来讲暴露给你的始终就只是一个内存地址这么一个概念

3587
01:41:45,000 --> 01:41:49,000
然后当然我们说内存它是一贯机就没了嘛

3588
01:41:49,000 --> 01:41:52,000
所以你还是要把东西放在一个可以持久化的存储

3589
01:41:52,000 --> 01:41:54,000
比如说磁盘或者现在是 SSD 上面去

3590
01:41:54,000 --> 01:42:00,000
但是刚才吴涛也讲了你要把这些东西 load 进内存里面才可以用才有一个地址可以执行

3591
01:42:00,000 --> 01:42:01,000
对

3592
01:42:01,000 --> 01:42:03,000
在这个页面上很方便了

3593
01:42:03,000 --> 01:42:08,000
他把这个他在下面有一个有一个非常形象的类比

3594
01:42:08,000 --> 01:42:09,000
对

3595
01:42:09,000 --> 01:42:13,000
他把所有的时间都成了呃

3596
01:42:13,000 --> 01:42:15,000
一个一个一个一个 10 亿倍

3597
01:42:15,000 --> 01:42:16,000
10 亿倍

3598
01:42:16,000 --> 01:42:17,000
10 亿倍对

3599
01:42:17,000 --> 01:42:18,000
那么呃

3600
01:42:18,000 --> 01:42:19,000
呃

3601
01:42:19,000 --> 01:42:21,000
以 Nanosecond 乘上 10 亿就变成了呃

3602
01:42:21,000 --> 01:42:22,000
呃

3603
01:42:22,000 --> 01:42:23,000
一秒

3604
01:42:23,000 --> 01:42:24,000
对

3605
01:42:24,000 --> 01:42:25,000
对

3606
01:42:25,000 --> 01:42:29,000
那么 L 1 缓存的存储时间大概是半秒钟

3607
01:42:29,000 --> 01:42:30,000
就是心跳一下

3608
01:42:30,000 --> 01:42:31,000
心跳一下

3609
01:42:31,000 --> 01:42:35,000
然后二级缓存的存储时间大概是 7 秒钟

3610
01:42:35,000 --> 01:42:39,000
就是你打一个长城的哈欠大概二级缓存就到了

3611
01:42:39,000 --> 01:42:41,000
如果你生活在其他世界里的话可以

3612
01:42:41,000 --> 01:42:42,000
对

3613
01:42:42,000 --> 01:42:43,000
啊

3614
01:42:43,000 --> 01:42:47,000
访问内存的时间其实就是我们都常觉得内存访问挺快的

3615
01:42:47,000 --> 01:42:48,000
因为比磁盘快多少

3616
01:42:48,000 --> 01:42:51,000
但其实你跟像计存器啊 L 1

3617
01:42:51,000 --> 01:42:55,000
就一级缓存二级缓存比起来还是非常非常慢的一个一个东西

3618
01:42:55,000 --> 01:43:01,000
这里就就刚才那个比方这里访问内存的话大概是在现在的计算机上大概是 100 秒的时候

3619
01:43:01,000 --> 01:43:03,000
就是如果它又存上 10 亿的话

3620
01:43:03,000 --> 01:43:05,000
100 秒就是一两分钟左右

3621
01:43:05,000 --> 01:43:06,000
对

3622
01:43:06,000 --> 01:43:07,000
嗯

3623
01:43:07,000 --> 01:43:09,000
这段时间已经够你刷牙

3624
01:43:09,000 --> 01:43:10,000
对

3625
01:43:10,000 --> 01:43:11,000
啊

3626
01:43:11,000 --> 01:43:12,000
这个这个类比还挺有意思的

3627
01:43:12,000 --> 01:43:13,000
大家可以去看一下

3628
01:43:13,000 --> 01:43:17,000
如果还有包括像你如果你发一个数据包会怎么样

3629
01:43:17,000 --> 01:43:24,000
就是他是这里给的一个例子是从加州发一个数据包到荷兰啊再返回来就是一个 round trip

3630
01:43:24,000 --> 01:43:27,000
大概就是五年的时间

3631
01:43:27,000 --> 01:43:30,000
不可想象网络是很慢的

3632
01:43:30,000 --> 01:43:31,000
没错

3633
01:43:31,000 --> 01:43:32,000
对

3634
01:43:32,000 --> 01:43:41,000
所以在很大很多时候里面呃很多场景里面就是一个程序百无聊赖的在那边死等等等

3635
01:43:41,000 --> 01:43:42,000
等 Io 嘛

3636
01:43:42,000 --> 01:43:46,000
等对等对方书发送一个数据包回来

3637
01:43:46,000 --> 01:43:48,000
对就这里其实我们也可以看到了啊

3638
01:43:48,000 --> 01:43:50,000
刚才那个是说等网络是很慢的

3639
01:43:50,000 --> 01:43:52,000
但是我们看一下等的一个磁盘

3640
01:43:52,000 --> 01:43:55,000
就是访问一个这个这个呃

3641
01:43:55,000 --> 01:44:04,000
呃瓷盘上的文件就是读一个文件件如果他还没有在内存里面的话是大概是 1616 周左右 16 周就是 4 个月吧差不多

3642
01:44:04,000 --> 01:44:06,000
对足够你学完也蛮可了

3643
01:44:06,000 --> 01:44:19,000
对所以所以你看我们现在说很多做那个什么异步的就是现在编程很多你要做一些就是所谓 I 就是 Io heavy 的一些应用像 node 啊这种东西你都走异步的方法嘛

3644
01:44:19,000 --> 01:44:25,000
就是因为你可以看到如果你每一次 Io 都要等同步的话你这个程序就没法玩了

3645
01:44:25,000 --> 01:44:29,000
对你让无形之中浪费了非常非常多宝贵的 CPU

3646
01:44:29,000 --> 01:44:31,000
大部分时间都是在闲置的

3647
01:44:31,000 --> 01:44:33,000
嗯

3648
01:44:33,000 --> 01:44:34,000
嗯

3649
01:44:34,000 --> 01:44:35,000
嗯

3650
01:44:35,000 --> 01:44:49,000
所以呃所以有这个 memory 这个这个内存的层级哈就是要如果我们直接把这么多层级暴露给开发者的话那显然这个软件工程就不用玩了天天哪里的 8 个内存错误那个内存的问题都已经够你啊

3651
01:44:49,000 --> 01:44:50,000
够你啊

3652
01:44:50,000 --> 01:44:51,000
好玩上一阵子了

3653
01:44:51,000 --> 01:44:59,000
所以我们把这东西通过像一些呃首先比如说硬件上层面上呃直接隐藏掉一级二级缓存

3654
01:44:59,000 --> 01:45:13,000
然后通过这个虚拟内存这个干颜隐藏掉呃呃瓷盘和内存之间的区别这样的话可以把这个编程模型大幅度简化让我们这种平庸之辈也能够开开心心的写上程序

3655
01:45:13,000 --> 01:45:15,000
哈哈哈

3656
01:45:15,000 --> 01:45:28,000
或者应该应该是应该反过来说就应该是这种进化智慧存在是因为试图让平庸之辈写出来的程序也可以在也可以比较体面的跑在脑上否则真的是慢得不得了

3657
01:45:28,000 --> 01:45:30,000
啊或者说是直接就 crash 掉了

3658
01:45:30,000 --> 01:45:31,000
对

3659
01:45:31,000 --> 01:45:42,000
嗯啊不过这里就其实还是牵涉到有一个概念就是为什么我们要分这么多内存的层级其实也就是因为穷嘛

3660
01:45:42,000 --> 01:45:46,000
对啊因为内存的造价实在是太高了

3661
01:45:46,000 --> 01:45:49,000
就是你如果大家都做成首先物理上做不到

3662
01:45:49,000 --> 01:45:53,000
因为你要做成寄存器的话你得所有东西都在那个芯片里面对吧

3663
01:45:53,000 --> 01:45:57,000
但是得靠近那个什么计算元器件那可能那个物理空间是有限的吧

3664
01:45:57,000 --> 01:46:04,000
也不可能做到第二个就是说就如果能做到比如说我们都用把一级缓存做成 500 兆

3665
01:46:04,000 --> 01:46:12,000
而且能做成一个机也可以但是这个成本就不是天文数字了不可以想象

3666
01:46:12,000 --> 01:46:16,000
对可能比尔盖斯也只能买两台而已

3667
01:46:16,000 --> 01:46:17,000
哈哈哈

3668
01:46:17,000 --> 01:46:19,000
买得起半台都不错了

3669
01:46:19,000 --> 01:46:32,000
呃但是呃就是说内存层级搞这么复杂也是为了像现实的一个妥协嘛就是在我们怎么把这个东西做尽量便宜那么越慢东西越便宜对吧

3670
01:46:32,000 --> 01:46:41,000
所以那就那就慢一点了那就要通过这种分层级的方式来隐藏掉我们实际上用一个很便宜很慢的一个设备

3671
01:46:41,000 --> 01:46:45,000
对啊然后把剩余的好钢都就是用在刀上

3672
01:46:45,000 --> 01:46:46,000
捕刀尖上

3673
01:46:46,000 --> 01:46:49,000
其实我刚才刚才想了一下

3674
01:46:49,000 --> 01:46:50,000
嗯

3675
01:46:50,000 --> 01:46:53,000
假设一个晶圆一个圆形的晶圆

3676
01:46:53,000 --> 01:46:56,000
完全用来做缓存

3677
01:46:56,000 --> 01:46:57,000
嗯嗯

3678
01:46:57,000 --> 01:46:59,000
大概要多少钱呢

3679
01:46:59,000 --> 01:47:01,000
一个晶圆片吗

3680
01:47:01,000 --> 01:47:05,000
对就整整个一大片晶圆做成一个缓存

3681
01:47:05,000 --> 01:47:07,000
嗯

3682
01:47:07,000 --> 01:47:10,000
然后像太阳能板那样装在什么地方

3683
01:47:10,000 --> 01:47:14,000
然后把它把它插在 CPU 什么地方

3684
01:47:14,000 --> 01:47:16,000
这个我还不太

3685
01:47:16,000 --> 01:47:21,000
但首先有个物理的限制你访问它的那个速度是很定的吧

3686
01:47:21,000 --> 01:47:27,000
你就打怕你就你变大了之后你访问边缘边缘上的那部分必然是要等的吧

3687
01:47:27,000 --> 01:47:28,000
那就把它做成立体的吧

3688
01:47:28,000 --> 01:47:31,000
就那就我小时候有这种愚蠢的想法就是

3689
01:47:31,000 --> 01:47:33,000
就是没错这是一个很好的想法

3690
01:47:33,000 --> 01:47:36,000
三维不限对三维不限也是一个很常用的一个思路

3691
01:47:36,000 --> 01:47:39,000
但是问题就是说这个始终是一个你就无非是从二维变成了三维吗

3692
01:47:39,000 --> 01:47:42,000
你的这个总的这空间始终还是有限

3693
01:47:42,000 --> 01:47:47,000
就不可能无限制的这个就是不管是从这个物理现实的角度考虑

3694
01:47:47,000 --> 01:47:48,000
还是从一个经济的角度考虑

3695
01:47:48,000 --> 01:47:55,000
都一定是一定是存在这么一个不同等级的存储的访问时间和容量的限制

3696
01:47:55,000 --> 01:48:00,000
除非你在可以在非常微小的尺度上开一大堆 Portal

3697
01:48:00,000 --> 01:48:02,000
然后可以开高维空间

3698
01:48:02,000 --> 01:48:06,000
对就彻底解决了防纹素的问题

3699
01:48:08,000 --> 01:48:09,000
作弊了哈

3700
01:48:09,000 --> 01:48:11,000
回到我们正常的现实世界

3701
01:48:11,000 --> 01:48:12,000
对

3702
01:48:12,000 --> 01:48:18,000
但有一个挺麻烦的问题就是说内存它是我们现在用的主要的内存

3703
01:48:18,000 --> 01:48:20,000
它是一个叫做意识性的内存

3704
01:48:20,000 --> 01:48:22,000
就是 Valatile 的内存

3705
01:48:22,000 --> 01:48:23,000
什么意思呢就是

3706
01:48:23,000 --> 01:48:26,000
Valatile 这个词本意是挥发吧我记得

3707
01:48:26,000 --> 01:48:28,000
对对就是挥发的意思

3708
01:48:28,000 --> 01:48:29,000
挥化肥会挥发

3709
01:48:30,000 --> 01:48:31,000
内存会挥发

3710
01:48:32,000 --> 01:48:33,000
就是这个意思

3711
01:48:33,000 --> 01:48:35,000
对所谓的意识性就是说

3712
01:48:35,000 --> 01:48:37,000
你一旦断电之后

3713
01:48:37,000 --> 01:48:38,000
内存里面存的东西

3714
01:48:38,000 --> 01:48:39,000
Burr 就没有了

3715
01:48:39,000 --> 01:48:40,000
所以

3716
01:48:40,000 --> 01:48:41,000
Burr 这么快

3717
01:48:41,000 --> 01:48:43,000
因为我记得大概

3718
01:48:43,000 --> 01:48:44,000
还是有个残留的

3719
01:48:44,000 --> 01:48:45,000
是对

3720
01:48:45,000 --> 01:48:46,000
10 年

3721
01:48:46,000 --> 01:48:47,000
2010 年左右

3722
01:48:47,000 --> 01:48:48,000
有一群

3723
01:48:49,000 --> 01:48:53,000
有一个安全实验室的人展示了一个电脑关机之后

3724
01:48:53,000 --> 01:48:54,000
立刻用液氮去

3725
01:48:54,000 --> 01:48:55,000
冷冻它

3726
01:48:55,000 --> 01:48:56,000
应该没有液氮吧

3727
01:48:56,000 --> 01:48:57,000
应该没有液氮

3728
01:48:57,000 --> 01:48:58,000
是用液氮

3729
01:48:58,000 --> 01:48:59,000
用液氮

3730
01:48:59,000 --> 01:49:00,000
是液氮吗

3731
01:49:00,000 --> 01:49:01,000
就立刻把它冷冻住

3732
01:49:01,000 --> 01:49:02,000
然后去呃

3733
01:49:02,000 --> 01:49:05,000
直接搜这个内存里面的数据

3734
01:49:05,000 --> 01:49:06,000
然后可能读出来些许的

3735
01:49:06,000 --> 01:49:07,000
对

3736
01:49:07,000 --> 01:49:10,000
他可把把这个什么电子的

3737
01:49:10,000 --> 01:49:12,000
为那个的状态维持到

3738
01:49:12,000 --> 01:49:14,000
在低温状态下能够维持一段时间吗

3739
01:49:14,000 --> 01:49:16,000
对就像对这些

3740
01:49:16,000 --> 01:49:18,000
然后回忆我们刚才讲的这个 latency

3741
01:49:18,000 --> 01:49:21,000
就这些所有的数据都在冬眠

3742
01:49:22,000 --> 01:49:23,000
冬眠了十几年

3743
01:49:23,000 --> 01:49:26,000
然后被被被挖出来了

3744
01:49:26,000 --> 01:49:27,000
嗯

3745
01:49:27,000 --> 01:49:29,000
呃但是就在日

3746
01:49:29,000 --> 01:49:33,000
就我们日常就除开刚才吴涛讲的那种极端变态的场景之外

3747
01:49:33,000 --> 01:49:34,000
但正常情况下

3748
01:49:34,000 --> 01:49:35,000
你断电之后

3749
01:49:35,000 --> 01:49:37,000
内存中的数据就已经没有了

3750
01:49:37,000 --> 01:49:38,000
就就清零了

3751
01:49:38,000 --> 01:49:40,000
然后你在通电的时候里面

3752
01:49:40,000 --> 01:49:42,000
哎他这些什么不记得了

3753
01:49:42,000 --> 01:49:45,000
呃这个很明显就是一个问题啊

3754
01:49:45,000 --> 01:49:46,000
那比如说你电脑关机之后

3755
01:49:46,000 --> 01:49:47,000
什么资料都没有了

3756
01:49:47,000 --> 01:49:49,000
那你搞什么白搞了

3757
01:49:49,000 --> 01:49:50,000
对

3758
01:49:50,000 --> 01:49:52,000
这也就是我们为什么会

3759
01:49:52,000 --> 01:49:53,000
会需要软盘

3760
01:49:53,000 --> 01:49:55,000
或者说需要外置磁盘这种东西

3761
01:49:55,000 --> 01:49:56,000
对就是一盘啊

3762
01:49:56,000 --> 01:49:57,000
之前的软盘也好

3763
01:49:57,000 --> 01:49:59,000
它都是一个所谓的

3764
01:49:59,000 --> 01:50:01,000
nonvolatile 的存储

3765
01:50:01,000 --> 01:50:03,000
就是非意识性的存储

3766
01:50:03,000 --> 01:50:05,000
就是断电之后还还在

3767
01:50:05,000 --> 01:50:06,000
对

3768
01:50:06,000 --> 01:50:10,000
呃但其实这两个中间是有一定的这个障碍的

3769
01:50:10,000 --> 01:50:11,000
嗯

3770
01:50:11,000 --> 01:50:12,000
刚才我们讲了

3771
01:50:12,000 --> 01:50:13,000
因为计算机并就

3772
01:50:13,000 --> 01:50:15,000
起码操作系统并不能直接执行硬盘上面的东西

3773
01:50:15,000 --> 01:50:17,000
他得先读到内存里面去

3774
01:50:17,000 --> 01:50:20,000
所以每次都会有这么一个很变态的这么一个呃

3775
01:50:20,000 --> 01:50:21,000
读取

3776
01:50:21,000 --> 01:50:22,000
然后写内存

3777
01:50:22,000 --> 01:50:24,000
然后的一个过程

3778
01:50:24,000 --> 01:50:25,000
呃

3779
01:50:25,000 --> 01:50:27,000
然后对于一个软件的开发者来讲

3780
01:50:27,000 --> 01:50:28,000
你也要做一些很奇怪的事情

3781
01:50:28,000 --> 01:50:29,000
比如说

3782
01:50:29,000 --> 01:50:31,000
我们做这个

3783
01:50:31,000 --> 01:50:34,000
所以会有一个序列化解序列化的东西

3784
01:50:34,000 --> 01:50:37,000
就是你把一个数据文件读到呃

3785
01:50:37,000 --> 01:50:38,000
内存中

3786
01:50:38,000 --> 01:50:39,000
然后你要保存的时候

3787
01:50:39,000 --> 01:50:42,000
你还得想办法他他把它写回磁盘

3788
01:50:42,000 --> 01:50:45,000
然后写回磁盘的中间你会想怎么把那个内存中的一个结构

3789
01:50:45,000 --> 01:50:46,000
呃

3790
01:50:46,000 --> 01:50:48,000
变成磁盘上面的一个呃

3791
01:50:48,000 --> 01:50:49,000
一个呃

3792
01:50:49,000 --> 01:50:50,000
一个一组的一个二进制的流

3793
01:50:50,000 --> 01:50:51,000
对吧

3794
01:50:51,000 --> 01:50:52,000
对

3795
01:50:52,000 --> 01:50:53,000
呃

3796
01:50:53,000 --> 01:50:54,000
不一定是二进制的

3797
01:50:54,000 --> 01:50:55,000
嗯

3798
01:50:55,000 --> 01:50:56,000
但最后变

3799
01:50:56,000 --> 01:50:58,000
最后会变成一种

3800
01:50:58,000 --> 01:51:00,000
就就就就核心要点是说

3801
01:51:00,000 --> 01:51:07,000
这个解这个数据结构在内存中是存在一定形态的一个方式和结构组织通过这个指针的方式

3802
01:51:07,000 --> 01:51:08,000
对

3803
01:51:08,000 --> 01:51:10,000
你不是想办法把这个结构呃

3804
01:51:10,000 --> 01:51:13,000
转化为某种可以复原的

3805
01:51:13,000 --> 01:51:14,000
对

3806
01:51:14,000 --> 01:51:15,000
呃

3807
01:51:15,000 --> 01:51:18,000
一个一个字节串或者是二进制的串

3808
01:51:18,000 --> 01:51:19,000
嗯

3809
01:51:19,000 --> 01:51:20,000
对

3810
01:51:20,000 --> 01:51:21,000
所以有这么一个序列化解序列化的过程

3811
01:51:21,000 --> 01:51:24,000
其实这点是挺折腾的

3812
01:51:24,000 --> 01:51:31,000
就是为什么如果就假设你想想如果我们把内存作为做成一个叫做非易失的

3813
01:51:31,000 --> 01:51:36,000
就是内存关机之后他再开就断电之后再通电还能记住之前内容

3814
01:51:36,000 --> 01:51:41,000
那你想象一下我们这个日常使用的计算机就是一个很爽的状态开机不用等

3815
01:51:41,000 --> 01:51:45,000
你想不用的时候按掉拔掉电源线就是你不用关机

3816
01:51:45,000 --> 01:51:47,000
然后电池拔掉的没问题

3817
01:51:47,000 --> 01:51:48,000
然后你插电之后

3818
01:51:48,000 --> 01:51:49,000
哎

3819
01:51:49,000 --> 01:51:51,000
又回到那个画面了一模一样

3820
01:51:51,000 --> 01:51:52,000
哎

3821
01:51:52,000 --> 01:51:55,000
我有个问题就是比如说 MP 3 播放器或者是

3822
01:51:55,000 --> 01:51:56,000
嗯

3823
01:51:56,000 --> 01:52:04,000
就比如说单片机有有些单片机使用的存储器的确是非 non-volatile

3824
01:52:04,000 --> 01:52:07,000
对有有这种有很很

3825
01:52:07,000 --> 01:52:10,000
这个叫什么呃

3826
01:52:10,000 --> 01:52:15,000
比较小的情况下他会有这种应用吧就是他能够关掉然后重解之后他还在那个状态

3827
01:52:15,000 --> 01:52:22,000
对所以这种成这种机器实际上是没有这个问题存存存在

3828
01:52:22,000 --> 01:52:28,000
就是他他无所谓什么东西什么就是他完全不会区分什么是一个程序在运行的状态

3829
01:52:28,000 --> 01:52:35,000
以及什么是一个程序被被被被折叠起来的对被折叠起来被存储起来的状态

3830
01:52:35,000 --> 01:52:40,000
对就如果他是用这种非意识性的内存的话他就是真的可以做到这一点

3831
01:52:40,000 --> 01:52:51,000
而且呃但这个硬件上具体怎么样我们先不说但我们就只讨论这种这种如果这种是一个主流的方式到我们作为一个开发者作为一个程序员的编程模型就很爽了

3832
01:52:51,000 --> 01:53:04,000
比如说你就不用想什么什么持久化啊就经常我们现在比如说做什么呃后端开发要考虑说这个内存这个这个机器死机了就服务器当机了我那个内存中的数据不就没了吗

3833
01:53:04,000 --> 01:53:09,000
那我又没写到那磁盘上面不就丢了吗对吧就会有这种这种很这种担忧

3834
01:53:09,000 --> 01:53:39,000
然后会用通过各种方法去去去想办法掩盖呃就是去去去处理针对这种内存受精一定的处理但是如果你的内存是非意识的话就很爽了那就直接再重启一下呗对吧对就在通电吧还是那个状态啊我们也不用去考虑什么序列化解序列化就开机刚才讲嘛序列化解序列化就是要就是我们开机要等那么长的一个时间的最主要的原因你要等那个东西从磁盘上加在的内存

3835
01:53:39,000 --> 01:54:09,000
里面去要把那个呃一个序列化的一个压制你可以想象成它比较压缩变成一个呃改转写的结构再变成内存中的一个结构吗这个是要花时间等的吗但是序列化其实还有另外一个用途就是或者说序列化也比较主要的用途就是数据传输呀为了传输数据你将你不得不把它序列化就是传输媒介本身是传输的时候肯定是要进行序列化但是就说如果你是作为一个

3836
01:54:09,000 --> 01:54:17,000
传输什么的你不需要你这超系统不是从另外一个网络上传过来的吗对吧对大部分情况下但也有那种什么 netboot

3837
01:54:17,000 --> 01:54:30,000
嗯那个情况再说啊就啊呃你你你启动你的电脑的时候你的超系统是不需要等网络才能启动的吗所以所以这个时候如果我们能做到一个非易失的内存的话

3838
01:54:30,000 --> 01:55:00,000
一切都是爽啊开机就就开机就可以有了关机就可以走了嗯但传统上这个是做就传统上我们做不到的因为也是一个就是工业现实和这个成本的考量就是非易失的内存是有的但是一个是比较贵啊另外一个就是他的访问速度存取速度不尽如人意最大问题就还是太慢了对呃慢和贵吧就是要么都是要么就是你要有其中一个的必定啊然后最近

3839
01:55:00,000 --> 01:55:28,000
定有一个所谓的什么地你知道传统那么三大类电容不叫什么电气哦电容电阻和电电导啊就是导线呗不是三大元气键吗我记得好像三大电容电阻和电其实其实这块马上就要暴露出这个是纠备不足了因为这个因为不是做不是做一一的哈这块真的是完全不太懂但是我的电路不考过

3840
01:55:28,000 --> 01:55:51,000
哈哈我都没学过你比我你好你还比我还好一些不 anyway 就是传统上有那么那几种呃元气键电阻电容电感哎没错还是三大类没记错所以存在说第四类的这种元气键英文叫做 memorymemorymemorymemorymemorymemorymemorymemorymemorymemorymemory

3841
01:55:51,000 --> 01:55:56,000
然后中文这里维基百科的翻译叫做易主气

3842
01:55:56,000 --> 01:56:06,000
对就是记忆的意然后电阻的阻阻阻阻阻气对他有一些他有一些奇怪的这种物理学电气的特性

3843
01:56:06,000 --> 01:56:11,000
嗯然后我是看不太懂但是我知道他的他的作用是什么

3844
01:56:11,000 --> 01:56:18,000
就是对于一个程序员来讲他的作用就可以让你实现所谓的刚才讲一个是非易师的内存

3845
01:56:18,000 --> 01:56:23,000
就是这是对我来说很重要的一点然后这个呃

3846
01:56:23,000 --> 01:56:27,000
就可以实现说你的内存和你的硬盘是同一个器杰

3847
01:56:27,000 --> 01:56:34,000
对这是非常非常对粗听没什么但其实是一个非常重要的呃

3848
01:56:34,000 --> 01:56:42,000
如果这个东西可以被研发出来并且大规模使用的话那他将会彻底改变我们编程模型

3849
01:56:42,000 --> 01:56:51,000
对呃然后另外一个更牛逼的用途但是现在我这个还是没太搞明白这个就也是因为什么电气工电

3850
01:56:51,000 --> 01:56:56,000
这叫电气工程吗电气工程基础不够好的一个原子工程吗电子工程吗电子电子工程

3851
01:56:56,000 --> 01:57:00,000
whatever 这个不不许纠结那么多细细节的名词吧

3852
01:57:00,000 --> 01:57:05,000
对还有一个就是说他这个易组器可以取代那种传统的电路

3853
01:57:05,000 --> 01:57:08,000
就是我们传统的机身电路那种组合的方式

3854
01:57:08,000 --> 01:57:10,000
比如说你要做一个那个什么 nand gate 吗

3855
01:57:10,000 --> 01:57:14,000
嗯你可以用这个去构成一种那种计算的元器件

3856
01:57:14,000 --> 01:57:20,000
然后他会实现更小的体积然后更就更低的功耗吧

3857
01:57:20,000 --> 01:57:27,000
大概是这个意思嗯但是这个对计算来讲就对其他他所暴露出来的编程模型的改变

3858
01:57:27,000 --> 01:57:34,000
我觉得这个要小一些这个是从硬件层面的就 CPU 的模型暴露出来的使用模型是没有变化的

3859
01:57:34,000 --> 01:57:43,000
这使用模型就是说对于一个普通的看法者来讲可能最大的变化还是说没有这个这个呃呃内存和这个磁盘

3860
01:57:43,000 --> 01:57:49,000
就没有易挥发性的内存和补易挥发性的内存的区别了

3861
01:57:49,000 --> 01:57:55,000
就是你可以不使用再去考虑内存管理和从此排上的调用文件

3862
01:57:55,000 --> 01:57:57,000
因为因为就只有内存管理这一件事了

3863
01:57:57,000 --> 01:58:02,000
对啊而且那个时候也不用考虑刚才讲了也不用考虑序列化啊解序列化的东西

3864
01:58:02,000 --> 01:58:06,000
因为你直接操作的就是内存中的这个数据结构

3865
01:58:06,000 --> 01:58:12,000
然后这个数据结构关机后也是会被持久化下来的存下来的

3866
01:58:12,000 --> 01:58:15,000
然后这样你开机的时候你还是回到那个程序原先的状态

3867
01:58:15,000 --> 01:58:18,000
Hello ID have you tried turning it off and on again

3868
01:58:18,000 --> 01:58:25,000
那就是不是就就可以在物理层面层面上实现我们虚实现在用操作系统通过虚拟内存来做的事情

3869
01:58:25,000 --> 01:58:26,000
对嗯

3870
01:58:26,000 --> 01:58:29,000
对我觉得这个对编程模型的改变还是蛮大的

3871
01:58:29,000 --> 01:58:31,000
不过对面其实也有一些问题啊

3872
01:58:31,000 --> 01:58:36,000
就是说如果你想假设这个内存是呃叫做非易师的话

3873
01:58:36,000 --> 01:58:42,000
那么如果中间哪里错了 crash 了然后导致那个内存状态不对

3874
01:58:42,000 --> 01:58:46,000
嗯就这个结果还是蛮奇怪的

3875
01:58:46,000 --> 01:58:51,000
对忽然之间你好像没有一个非常好的手段去 reset 了

3876
01:58:51,000 --> 01:58:53,000
对对就以前那个那个叫什么

3877
01:58:53,000 --> 01:58:55,000
the IT crowd 里面常说

3878
01:58:55,000 --> 01:59:00,000
对就是遇到问题

3879
01:59:00,000 --> 01:59:03,000
现在重开机重启试试了

3880
01:59:03,000 --> 01:59:05,000
重启没问题就就还可以

3881
01:59:05,000 --> 01:59:07,000
因为重启就掉电了掉电的话

3882
01:59:07,000 --> 01:59:09,000
底下重来就有一个所谓的一个

3883
01:59:09,000 --> 01:59:12,000
呃 clean start

3884
01:59:12,000 --> 01:59:14,000
对就是如果

3885
01:59:14,000 --> 01:59:16,000
计算机是一个状态机的话

3886
01:59:16,000 --> 01:59:19,000
那么重启就可以让它回复到状态机的那个原点

3887
01:59:19,000 --> 01:59:23,000
一般来说呃程序不稳定都是

3888
01:59:23,000 --> 01:59:26,000
这个状态机走进了一个没有被预见到的状态里面去

3889
01:59:26,000 --> 01:59:29,000
但是通过重启你可以让它重新回到那个

3890
01:59:29,000 --> 01:59:33,000
至少是造计算机的人所预想的

3891
01:59:33,000 --> 01:59:34,000
可以被控制

3892
01:59:34,000 --> 01:59:37,000
并且已经并且也知道它可以走上何处的地方

3893
01:59:37,000 --> 01:59:39,000
对所以所以呃

3894
01:59:40,000 --> 01:59:42,000
但是如果刚才讲的如果是一个内存是废医师的话

3895
01:59:42,000 --> 01:59:43,000
这一点就行不通了

3896
01:59:43,000 --> 01:59:46,000
就还肯定要采取一些极端的手段来做

3897
01:59:46,000 --> 01:59:49,000
这个呃灾难恢复啊

3898
01:59:49,000 --> 01:59:51,000
还是故障修复之类的事情

3899
01:59:51,000 --> 01:59:52,000
对嗯

3900
01:59:52,000 --> 01:59:57,000
呃不过但是这个刚才在讲这个不管是用这个 memorister

3901
01:59:57,000 --> 01:59:59,000
memorister

3902
01:59:59,000 --> 02:00:02,000
呃易主器还是说说通过虚拟内存这一点

3903
02:00:02,000 --> 02:00:07,000
我们都是在试图说简化这个呃呃

3904
02:00:07,000 --> 02:00:10,000
呃开发者的对这个的开发难度

3905
02:00:10,000 --> 02:00:15,000
就通过这种减少这个呃呃层级的方式来实现的

3906
02:00:15,000 --> 02:00:20,000
其实现在的程序员所唯一需要或者也不是就去还是

3907
02:00:20,000 --> 02:00:24,000
至争就需要操心一件事情就是序列化和反序列化对吧

3908
02:00:24,000 --> 02:00:25,000
对

3909
02:00:25,000 --> 02:00:30,000
但从整个编程的发展的方向来看

3910
02:00:30,000 --> 02:00:35,000
也许这件事情将来也是要被被被淘汰掉了

3911
02:00:35,000 --> 02:00:40,000
或者说人们可以完全不用再去操心序列化反序列化这件事情

3912
02:00:40,000 --> 02:00:41,000
对不对

3913
02:00:41,000 --> 02:00:42,000
对对对

3914
02:00:42,000 --> 02:00:47,000
其实现在已经有这种各种方法可以做一地的这种事情了

3915
02:00:47,000 --> 02:00:48,000
对

3916
02:00:48,000 --> 02:00:49,000
呃

3917
02:00:49,000 --> 02:00:50,000
嗯

3918
02:00:50,000 --> 02:00:53,000
先还是先说手工管理存

3919
02:00:53,000 --> 02:00:57,000
因为我刚才又缅怀了一下自己当初写 C 程序的时候

3920
02:00:57,000 --> 02:01:04,000
去会会在一张纸上写说有个东西我在什么地方把它呃

3921
02:01:04,000 --> 02:01:05,000
emlock

3922
02:01:05,000 --> 02:01:11,000
然后要记得应该在什么恰当的时候把它呃 free 掉

3923
02:01:11,000 --> 02:01:12,000
嗯

3924
02:01:12,000 --> 02:01:15,000
就是呃

3925
02:01:15,000 --> 02:01:19,000
C 其实 C 语言其实给你提供了一个比较贴近硬度的

3926
02:01:19,000 --> 02:01:21,000
并件的编程模型

3927
02:01:21,000 --> 02:01:27,000
但是他仍旧把呃分配内存这一部分给帮你隐藏起来的

3928
02:01:27,000 --> 02:01:30,000
比如说你有想过 emlock 究竟做了什么吗

3929
02:01:30,000 --> 02:01:31,000
嗯

3930
02:01:31,000 --> 02:01:36,000
就就就我们会说一个东西分配在堆上一个东西分配在站上

3931
02:01:36,000 --> 02:01:38,000
可是可是堆和站这两个东西

3932
02:01:38,000 --> 02:01:39,000
嗯

3933
02:01:39,000 --> 02:01:43,000
你就站你可以通过会面领域操作

3934
02:01:43,000 --> 02:01:45,000
可是堆这个东西怎么通过会面领域操作呢

3935
02:01:45,000 --> 02:01:47,000
其实是不行的

3936
02:01:47,000 --> 02:01:47,000
不是吗

3937
02:01:47,000 --> 02:01:48,000
嗯

3938
02:01:48,000 --> 02:01:54,000
就堆这个东西其实是呃呃操作系统替你虚拟出来的这么一块内存区域而已

3939
02:01:54,000 --> 02:01:55,000
对

3940
02:01:55,000 --> 02:01:59,000
而站则是一个呃呃

3941
02:01:59,000 --> 02:02:01,000
站其实也是有操作系统虚拟出来的

3942
02:02:01,000 --> 02:02:05,000
但不用不用那个你不用手工去管理它嘛

3943
02:02:05,000 --> 02:02:05,000
对

3944
02:02:05,000 --> 02:02:07,000
堆和对

3945
02:02:07,000 --> 02:02:07,000
堆

3946
02:02:07,000 --> 02:02:10,000
堆和站的操

3947
02:02:10,000 --> 02:02:13,000
堆和站的抽象层级其实是不太一样的

3948
02:02:13,000 --> 02:02:14,000
嗯

3949
02:02:14,000 --> 02:02:15,000
可以这么说吗

3950
02:02:15,000 --> 02:02:15,000
对

3951
02:02:15,000 --> 02:02:16,000
对

3952
02:02:16,000 --> 02:02:21,000
然后但是在那个就不是在那个时候你掉一个函数的时候

3953
02:02:21,000 --> 02:02:23,000
你在这个函数里面生命了一个本地面量

3954
02:02:23,000 --> 02:02:26,000
然后这个本地面量其实就是默认分配在站上

3955
02:02:26,000 --> 02:02:28,000
就是站这个东西你是没有一个直观的印象说

3956
02:02:28,000 --> 02:02:29,000
这个东西在站上

3957
02:02:29,000 --> 02:02:32,000
你只有去研究这个语言的原理的时候

3958
02:02:32,000 --> 02:02:34,000
你才会明白什么是什么是站

3959
02:02:34,000 --> 02:02:35,000
对

3960
02:02:35,000 --> 02:02:35,000
呃

3961
02:02:35,000 --> 02:02:40,000
但是堆这个东西你会有显示的至少两个 API 去操作它

3962
02:02:40,000 --> 02:02:43,000
比如一个是一个是一个是 mlock 或者 clock

3963
02:02:43,000 --> 02:02:43,000
嗯

3964
02:02:43,000 --> 02:02:45,000
然后一个是 free

3965
02:02:45,000 --> 02:02:45,000
嗯

3966
02:02:45,000 --> 02:02:49,000
就是你会有你会通过 mlock 这件事情拿到一个内存的地址

3967
02:02:49,000 --> 02:02:51,000
但是站是没有这个东西的

3968
02:02:51,000 --> 02:02:53,000
站是不会给你一个东西

3969
02:02:53,000 --> 02:02:56,000
就让你显示去 push 和 pop 的对吧

3970
02:02:56,000 --> 02:02:56,000
对

3971
02:02:56,000 --> 02:03:01,000
说这个 pop dispatch 我们的友台节目

3972
02:03:01,000 --> 02:03:04,000
总是让我觉得是初战分发

3973
02:03:04,000 --> 02:03:05,000
很 hocor

3974
02:03:05,000 --> 02:03:06,000
message

3975
02:03:06,000 --> 02:03:07,000
对

3976
02:03:07,000 --> 02:03:10,000
比我们比我们 cernal panic hardcore 多了

3977
02:03:10,000 --> 02:03:12,000
初战分发

3978
02:03:12,000 --> 02:03:13,000
message

3979
02:03:13,000 --> 02:03:14,000
message dispatch

3980
02:03:14,000 --> 02:03:15,000
对

3981
02:03:15,000 --> 02:03:16,000
对

3982
02:03:16,000 --> 02:03:19,000
可是现在的程序员就就幸福很多了

3983
02:03:19,000 --> 02:03:29,000
至少从比如说但是 cd 家程序员还是要去去操心呃呃呃呃呃呃一个一个类的那个叫什么

3984
02:03:29,000 --> 02:03:59,000
呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃呃�

3985
02:03:59,000 --> 02:04:04,000
一个 interface 的 implementation 里面

3986
02:04:04,000 --> 02:04:06,000
你要写这个玩意儿

3987
02:04:06,000 --> 02:04:07,000
在被 dealloc 的时候

3988
02:04:07,000 --> 02:04:08,000
要做点事情

3989
02:04:08,000 --> 02:04:10,000
但是你从来不需要去

3990
02:04:10,000 --> 02:04:12,000
显示的去调用这个 dealloc

3991
02:04:12,000 --> 02:04:15,000
这点和 C++应该是一样的

3992
02:04:15,000 --> 02:04:16,000
对他会帮你去 call 那个

3993
02:04:16,000 --> 02:04:18,000
但是你还是得要记住

3994
02:04:18,000 --> 02:04:19,000
那个什么的顺序关系

3995
02:04:19,000 --> 02:04:21,000
你写的时候就要留意这一点嘛

3996
02:04:21,000 --> 02:04:23,000
对然后 C++

3997
02:04:23,000 --> 02:04:25,000
对然后 objectfc 帮你

3998
02:04:25,000 --> 02:04:27,000
帮程序员在某种程度上

3999
02:04:27,000 --> 02:04:33,000
减轻了内存管理的业务逻辑

4000
02:04:33,000 --> 02:04:35,000
你只需要自己去记住这个东西

4001
02:04:35,000 --> 02:04:37,000
如果有别人还在用

4002
02:04:37,000 --> 02:04:38,000
你就要 retain 一次

4003
02:04:38,000 --> 02:04:40,000
如果有别人已经不再用了

4004
02:04:40,000 --> 02:04:42,000
你就把它 release 一下就好了

4005
02:04:42,000 --> 02:04:44,000
然后只要还有一个人在用

4006
02:04:44,000 --> 02:04:45,000
这个东西就不会被

4007
02:04:45,000 --> 02:04:48,000
运行师真正的销毁掉

4008
02:04:48,000 --> 02:04:51,000
他就是这个 ARC 吗

4009
02:04:51,000 --> 02:04:53,000
不这是 RC 没有 A

4010
02:04:53,000 --> 02:04:54,000
reference counting

4011
02:04:54,000 --> 02:04:55,000
reference counting

4012
02:04:55,000 --> 02:04:57,000
就是人要自己去在那边算那个

4013
02:04:57,000 --> 02:04:59,000
release 了多少次

4014
02:04:59,000 --> 02:05:00,000
以及 retain 了多少次

4015
02:05:00,000 --> 02:05:01,000
对啊

4016
02:05:01,000 --> 02:05:03,000
然后 ARC 帮你解决的这个问题

4017
02:05:03,000 --> 02:05:05,000
就是你不用再去显示的

4018
02:05:05,000 --> 02:05:07,000
release 和 retain 了

4019
02:05:07,000 --> 02:05:09,000
系统帮你数吗

4020
02:05:09,000 --> 02:05:11,000
对就是 objectfc 会在

4021
02:05:11,000 --> 02:05:13,000
编译期帮你数一遍

4022
02:05:13,000 --> 02:05:16,000
好这应该不是在运行师数的

4023
02:05:16,000 --> 02:05:17,000
对编译期的时候会帮你数一遍

4024
02:05:17,000 --> 02:05:20,000
你这个东西所有的用的地方

4025
02:05:20,000 --> 02:05:23,000
他就会帮你自动 retain 一次

4026
02:05:23,000 --> 02:05:26,000
然后所有他觉得你已经不会在用的地方

4027
02:05:26,000 --> 02:05:27,000
他就帮你 release 一下

4028
02:05:27,000 --> 02:05:32,000
所以那个还是一个比较原始的方法

4029
02:05:32,000 --> 02:05:32,000
就是

4030
02:05:32,000 --> 02:05:33,000
对

4031
02:05:33,000 --> 02:05:38,000
如果说手动的管理内存是一个

4032
02:05:38,000 --> 02:05:40,000
就是说是一个老式步枪的话

4033
02:05:40,000 --> 02:05:41,000
你需要自己打一发上一三

4034
02:05:41,000 --> 02:05:42,000
拉一下枪栓

4035
02:05:42,000 --> 02:05:47,000
那 ARC 就有点像半自动了

4036
02:05:47,000 --> 02:05:51,000
现在就是手工管理内存的时代

4037
02:05:51,000 --> 02:05:53,000
基本上已经是过去了吧

4038
02:05:53,000 --> 02:05:54,000
就除非你有什么特别

4039
02:05:54,000 --> 02:06:00,000
除非你是自己是写虚拟机或者是编译器的人

4040
02:06:00,000 --> 02:06:03,000
否则你一般是不需要去操心

4041
02:06:03,000 --> 02:06:05,000
怎么手工管理内存这件事情

4042
02:06:05,000 --> 02:06:06,000
他有一些那种所谓的什么

4043
02:06:06,000 --> 02:06:09,000
performance critical 的东西的时候

4044
02:06:09,000 --> 02:06:11,000
他会要用 C 或 C 加加来写的时候

4045
02:06:11,000 --> 02:06:15,000
就还会考虑这个内存管理的问题

4046
02:06:15,000 --> 02:06:15,000
对

4047
02:06:15,000 --> 02:06:18,000
或者是在面试的时候

4048
02:06:18,000 --> 02:06:19,000
告诉你说

4049
02:06:19,000 --> 02:06:21,000
你不能使用额外的内存

4050
02:06:21,000 --> 02:06:22,000
你应该怎么回答

4051
02:06:22,000 --> 02:06:22,000
你应该怎么办

4052
02:06:22,000 --> 02:06:25,000
怎么写个 M-Lock

4053
02:06:25,000 --> 02:06:26,000
对

4054
02:06:26,000 --> 02:06:31,000
那现在就是主流的是一个垃圾回收的机制

4055
02:06:31,000 --> 02:06:32,000
对

4056
02:06:32,000 --> 02:06:34,000
垃圾回收可以说是

4057
02:06:34,000 --> 02:06:37,000
进一步解放了程序员

4058
02:06:37,000 --> 02:06:43,000
就是你有更加清晰而简化的变成模型

4059
02:06:43,000 --> 02:06:46,000
当然由此也就降低了

4060
02:06:46,000 --> 02:06:49,000
降低了变成了门槛

4061
02:06:49,000 --> 02:06:49,000
怎么说呢

4062
02:06:49,000 --> 02:06:52,000
提高了你写出烂代码的几率

4063
02:06:52,000 --> 02:06:53,000
应该这么说

4064
02:06:53,000 --> 02:06:55,000
你说门槛低了吗

4065
02:06:55,000 --> 02:06:55,000
门槛低了吗

4066
02:06:55,000 --> 02:06:58,000
门槛低了有一种负面的意味

4067
02:06:58,000 --> 02:06:59,000
门槛低了是好

4068
02:06:59,000 --> 02:06:59,000
是吧

4069
02:06:59,000 --> 02:07:00,000
好吧

4070
02:07:00,000 --> 02:07:03,000
你是从比较正面的角度来理解的这件事情

4071
02:07:03,000 --> 02:07:05,000
但我总觉得就是门槛低了

4072
02:07:05,000 --> 02:07:08,000
就是更容易让更多平庸的人写出平庸

4073
02:07:08,000 --> 02:07:10,000
但是 work 的代码

4074
02:07:10,000 --> 02:07:10,000
对

4075
02:07:10,000 --> 02:07:12,000
但是时间一久就

4076
02:07:12,000 --> 02:07:14,000
甚至可以这么说

4077
02:07:14,000 --> 02:07:16,000
就是编程模型的简化

4078
02:07:16,000 --> 02:07:20,000
使得大规模的软件协作成为可能

4079
02:07:20,000 --> 02:07:20,000
对

4080
02:07:20,000 --> 02:07:24,000
不是大家都是大牛的情况下

4081
02:07:24,000 --> 02:07:25,000
也能把这个事情做出来

4082
02:07:25,000 --> 02:07:26,000
有一群平庸的人

4083
02:07:26,000 --> 02:07:30,000
也可以写出一个工业级别建状的东西

4084
02:07:30,000 --> 02:07:31,000
来给大家用

4085
02:07:31,000 --> 02:07:34,000
而不再需要一群先驱者

4086
02:07:34,000 --> 02:07:35,000
一群 hacker 去

4087
02:07:35,000 --> 02:07:39,000
只有他们才可以写出一个真正的

4088
02:07:39,000 --> 02:07:42,000
就是居然可以工作的程序来

4089
02:07:42,000 --> 02:07:43,000
对

4090
02:07:43,000 --> 02:07:44,000
就对

4091
02:07:44,000 --> 02:07:46,000
GC 的逻辑其实也蛮

4092
02:07:46,000 --> 02:07:48,000
就是简单来讲起来是蛮好讲的

4093
02:07:48,000 --> 02:07:49,000
就是他会

4094
02:07:49,000 --> 02:07:53,000
这个运行时会去检查你每一个内部的指针

4095
02:07:53,000 --> 02:07:54,000
怎么样

4096
02:07:54,000 --> 02:07:55,000
然后去算

4097
02:07:55,000 --> 02:07:55,000
哪些指

4098
02:07:55,000 --> 02:07:56,000
哪些区是没有

4099
02:07:56,000 --> 02:07:59,000
不可能再被用到了

4100
02:07:59,000 --> 02:08:00,000
然后他就直接把那些区

4101
02:08:00,000 --> 02:08:02,000
就标记为可以回收掉的

4102
02:08:02,000 --> 02:08:03,000
对

4103
02:08:03,000 --> 02:08:06,000
然后在下一段里面把它回收掉

4104
02:08:06,000 --> 02:08:06,000
对

4105
02:08:06,000 --> 02:08:10,000
但是 GC 也有很多不同的类型

4106
02:08:10,000 --> 02:08:12,000
我们可以找机会再讲

4107
02:08:12,000 --> 02:08:16,000
这个你刚才说到那个 Go 出了 1.4

4108
02:08:16,000 --> 02:08:21,000
我去看了一下他的那个 release note

4109
02:08:21,000 --> 02:08:23,000
里面有一节写到说

4110
02:08:23,000 --> 02:08:24,000
Change to runtime

4111
02:08:24,000 --> 02:08:28,000
它里面写说 1.4 之前

4112
02:08:28,000 --> 02:08:32,000
Runtime 就是什么 GC

4113
02:08:32,000 --> 02:08:35,000
那个 Concurrency 的支持

4114
02:08:35,000 --> 02:08:36,000
Interface Management

4115
02:08:36,000 --> 02:08:36,000
Maps

4116
02:08:36,000 --> 02:08:37,000
Slices

4117
02:08:37,000 --> 02:08:37,000
Strings

4118
02:08:37,000 --> 02:08:38,000
Etc

4119
02:08:38,000 --> 02:08:42,000
在 1.4 之前基本上是以 C 来写了

4120
02:08:42,000 --> 02:08:42,000
对

4121
02:08:42,000 --> 02:08:47,000
然后包括某些部分用了汇编代码

4122
02:08:47,000 --> 02:08:49,000
然后从 1.4 开始

4123
02:08:49,000 --> 02:08:53,000
大部分 Runtime 都用 Go 来重写了一遍

4124
02:08:53,000 --> 02:08:54,000
对

4125
02:08:54,000 --> 02:08:55,000
然后一次

4126
02:08:55,000 --> 02:08:59,000
对而且以此来带来了一个提升

4127
02:08:59,000 --> 02:09:02,000
就是 Garbage Collector can scan the stacks

4128
02:09:02,000 --> 02:09:04,000
of the programs in the runtime

4129
02:09:04,000 --> 02:09:07,000
and get accurate information about what variables are active

4130
02:09:07,000 --> 02:09:08,000
对

4131
02:09:08,000 --> 02:09:11,000
它之前是因为它拿不到运行时的有些东西

4132
02:09:11,000 --> 02:09:12,000
所以它的那个 GC

4133
02:09:12,000 --> 02:09:13,000
就是它的那个内存

4134
02:09:13,000 --> 02:09:16,000
那就会说是就是 imprecise

4135
02:09:16,000 --> 02:09:18,000
就是不是很精确

4136
02:09:18,000 --> 02:09:19,000
有时候会漏掉一些东西

4137
02:09:19,000 --> 02:09:22,000
但是整体来说还可以吧

4138
02:09:22,000 --> 02:09:24,000
它现在变成一个就是完全精确的

4139
02:09:24,000 --> 02:09:28,000
就一定知道哪些指针是可以被

4140
02:09:28,000 --> 02:09:30,000
就是哪些没有被安全回收的

4141
02:09:30,000 --> 02:09:31,000
对

4142
02:09:31,000 --> 02:09:32,000
然后他们还要做下半

4143
02:09:32,000 --> 02:09:33,000
他们要做另外一件事情

4144
02:09:33,000 --> 02:09:35,000
就是要把这个垃圾回收

4145
02:09:35,000 --> 02:09:37,000
做一个完全必行化的东西

4146
02:09:37,000 --> 02:09:38,000
因为现在的它的垃圾回收

4147
02:09:38,000 --> 02:09:40,000
还是一个叫做 stop the war 的嘛

4148
02:09:40,000 --> 02:09:42,000
Java

4149
02:09:42,000 --> 02:09:43,000
JVM 也有这个

4150
02:09:43,000 --> 02:09:44,000
呃

4151
02:09:44,000 --> 02:09:45,000
这个句话要说严谨一点

4152
02:09:45,000 --> 02:09:48,000
就是主流的 JVM

4153
02:09:48,000 --> 02:09:50,000
JVM 还是一个问题

4154
02:09:50,000 --> 02:09:51,000
对有这个问题

4155
02:09:51,000 --> 02:09:54,000
就是它在垃圾回收这个机制运行的期间

4156
02:09:54,000 --> 02:09:57,000
其程序的其他部分是暂停的

4157
02:09:57,000 --> 02:09:57,000
对

4158
02:09:57,000 --> 02:09:58,000
这就是为什么

4159
02:09:58,000 --> 02:10:00,000
这就是为什么 eclips 那么卡

4160
02:10:00,000 --> 02:10:01,000
哈哈哈

4161
02:10:01,000 --> 02:10:03,000
也许吧

4162
02:10:03,000 --> 02:10:03,000
对

4163
02:10:03,000 --> 02:10:04,000
可以简单这样说

4164
02:10:04,000 --> 02:10:06,000
这个对很多应用来说

4165
02:10:06,000 --> 02:10:07,000
这个就是不可以接受的

4166
02:10:07,000 --> 02:10:08,000
比如说你写一个什么

4167
02:10:08,000 --> 02:10:10,000
这个股票的实时交易的应用

4168
02:10:10,000 --> 02:10:12,000
那你可能

4169
02:10:12,000 --> 02:10:13,000
就那可能几十毫秒

4170
02:10:13,000 --> 02:10:15,000
一百毫秒的差别

4171
02:10:15,000 --> 02:10:16,000
那就是上百万的

4172
02:10:16,000 --> 02:10:18,000
这个经济的损失

4173
02:10:18,000 --> 02:10:18,000
对吧

4174
02:10:18,000 --> 02:10:19,000
所以不可

4175
02:10:19,000 --> 02:10:20,000
你可能不可避免

4176
02:10:20,000 --> 02:10:22,000
所以他们有些做金融交易的

4177
02:10:22,000 --> 02:10:23,000
有些就直接用那个什么

4178
02:10:23,000 --> 02:10:24,000
呃

4179
02:10:24,000 --> 02:10:24,000
C 加加写

4180
02:10:24,000 --> 02:10:26,000
就这样不需要去考虑 GC 的问题

4181
02:10:26,000 --> 02:10:28,000
那或者是他用那个 JVM

4182
02:10:28,000 --> 02:10:30,000
但是用改改良过的这种

4183
02:10:30,000 --> 02:10:32,000
就是所谓的 concurrent

4184
02:10:32,000 --> 02:10:33,000
或者 power of GC

4185
02:10:33,000 --> 02:10:34,000
就是并行的 GC

4186
02:10:34,000 --> 02:10:35,000
GC 过程中

4187
02:10:35,000 --> 02:10:37,000
他可以不用停下来个主程序

4188
02:10:37,000 --> 02:10:39,000
现在 go 的他里面还是这个 stop the war

4189
02:10:39,000 --> 02:10:40,000
这种情况

4190
02:10:40,000 --> 02:10:41,000
但是他马上

4191
02:10:41,000 --> 02:10:42,000
他是说 1.5 吧

4192
02:10:42,000 --> 02:10:42,000
我记得

4193
02:10:42,000 --> 02:10:43,000
就加以百万的

4194
02:10:43,000 --> 02:10:45,000
他会变成那个 concurrent

4195
02:10:45,000 --> 02:10:46,000
对

4196
02:10:46,000 --> 02:10:49,000
这也就回到了刚才说的这个

4197
02:10:49,000 --> 02:10:52,000
就是整个内存管理的方向

4198
02:10:52,000 --> 02:10:53,000
还是朝着让

4199
02:10:53,000 --> 02:10:54,000
傻瓜话

4200
02:10:54,000 --> 02:10:56,000
越来越省心的方向来

4201
02:10:56,000 --> 02:10:56,000
对

4202
02:10:56,000 --> 02:10:58,000
来演进的

4203
02:10:58,000 --> 02:11:00,000
但是同时也就造成了

4204
02:11:00,000 --> 02:11:01,000
在真正那些

4205
02:11:01,000 --> 02:11:03,000
仍旧还是需要

4206
02:11:03,000 --> 02:11:04,000
就像你说的

4207
02:11:04,000 --> 02:11:05,000
那个股票操作系统

4208
02:11:05,000 --> 02:11:07,000
mission critical 的场合

4209
02:11:07,000 --> 02:11:08,000
还是需要手动管理的真一样

4210
02:11:08,000 --> 02:11:11,000
就有些事情还是

4211
02:11:11,000 --> 02:11:13,000
不得不依靠手动管理

4212
02:11:13,000 --> 02:11:16,000
因为手动管理才可以达到

4213
02:11:16,000 --> 02:11:18,000
那个需要的 performance

4214
02:11:18,000 --> 02:11:18,000
对

4215
02:11:18,000 --> 02:11:19,000
我记得那个

4216
02:11:19,000 --> 02:11:21,000
Biana

4217
02:11:21,000 --> 02:11:22,000
是什么叫

4218
02:11:22,000 --> 02:11:23,000
Biana Stroh Stroh

4219
02:11:23,000 --> 02:11:24,000
对

4220
02:11:24,000 --> 02:11:26,000
就是 C++的创始人在

4221
02:11:26,000 --> 02:11:27,000
我忘了是哪本书里面

4222
02:11:27,000 --> 02:11:29,000
他吐槽 C

4223
02:11:29,000 --> 02:11:30,000
吐槽 Java 说

4224
02:11:30,000 --> 02:11:33,000
就他有点炫耀的意思

4225
02:11:33,000 --> 02:11:34,000
就是说

4226
02:11:34,000 --> 02:11:35,000
你知道 Joint

4227
02:11:35,000 --> 02:11:36,000
Strike Fighter

4228
02:11:36,000 --> 02:11:37,000
JSF

4229
02:11:37,000 --> 02:11:38,000
战斗机

4230
02:11:38,000 --> 02:11:40,000
它是一台 C++战斗机

4231
02:11:40,000 --> 02:11:41,000
就是上面所有的代码

4232
02:11:41,000 --> 02:11:42,000
都是跑的

4233
02:11:42,000 --> 02:11:42,000
都是 C++

4234
02:11:42,000 --> 02:11:45,000
然后火星探测器

4235
02:11:45,000 --> 02:11:45,000
你知道吗

4236
02:11:45,000 --> 02:11:47,000
C++写的

4237
02:11:47,000 --> 02:11:49,000
你用 Java 给我写一个看看

4238
02:11:49,000 --> 02:11:51,000
大意就是这样

4239
02:11:51,000 --> 02:11:51,000
对

4240
02:11:51,000 --> 02:11:53,000
那些的应用场合

4241
02:11:53,000 --> 02:11:54,000
就比较极端嘛

4242
02:11:54,000 --> 02:11:56,000
性能和这个环境

4243
02:11:56,000 --> 02:11:57,000
要求比较恶劣

4244
02:11:57,000 --> 02:11:57,000
对

4245
02:11:57,000 --> 02:11:59,000
在这种情况之下

4246
02:11:59,000 --> 02:11:59,000
你还是

4247
02:11:59,000 --> 02:12:01,000
必不得不

4248
02:12:01,000 --> 02:12:02,000
手动

4249
02:12:02,000 --> 02:12:03,000
加引号的手动

4250
02:12:03,000 --> 02:12:04,000
去关键内存

4251
02:12:04,000 --> 02:12:07,000
不过这个也有做到

4252
02:12:07,000 --> 02:12:07,000
就是

4253
02:12:07,000 --> 02:12:11,000
就是在这个技术进步的之后

4254
02:12:11,000 --> 02:12:12,000
也有说

4255
02:12:12,000 --> 02:12:14,000
这个程序员还没回过神来

4256
02:12:14,000 --> 02:12:15,000
没有

4257
02:12:15,000 --> 02:12:16,000
就是没有适应

4258
02:12:16,000 --> 02:12:18,000
用到最新的这种方法去做了

4259
02:12:18,000 --> 02:12:20,000
这里有一个很简单的例子

4260
02:12:20,000 --> 02:12:21,000
之前我们提到了

4261
02:12:21,000 --> 02:12:22,000
这个

4262
02:12:22,000 --> 02:12:24,000
序列化解序列化的问题

4263
02:12:24,000 --> 02:12:26,000
但我们要做一些事情的时候

4264
02:12:26,000 --> 02:12:27,000
那

4265
02:12:27,000 --> 02:12:29,000
你有一些文件

4266
02:12:29,000 --> 02:12:30,000
你要在内存里面

4267
02:12:30,000 --> 02:12:31,000
去展现

4268
02:12:31,000 --> 02:12:32,000
但是内存又

4269
02:12:32,000 --> 02:12:34,000
不如这个磁盘大嘛

4270
02:12:34,000 --> 02:12:35,000
对

4271
02:12:35,000 --> 02:12:36,000
那么有些人就说

4272
02:12:36,000 --> 02:12:37,000
那我怎么才能在

4273
02:12:37,000 --> 02:12:38,000
内存里面去

4274
02:12:38,000 --> 02:12:39,000
操

4275
02:12:39,000 --> 02:12:40,000
因为只有到

4276
02:12:40,000 --> 02:12:41,000
内存里面

4277
02:12:41,000 --> 02:12:42,000
只有操

4278
02:12:42,000 --> 02:12:42,000
那个

4279
02:12:42,000 --> 02:12:44,000
那个 CPU 才可以去操作那些数据

4280
02:12:44,000 --> 02:12:45,000
所以我有一个

4281
02:12:45,000 --> 02:12:45,000
这个

4282
02:12:45,000 --> 02:12:47,000
从磁盘里面读数据

4283
02:12:47,000 --> 02:12:49,000
读到内存里面去

4284
02:12:49,000 --> 02:12:50,000
然后再处理

4285
02:12:50,000 --> 02:12:51,000
然后再处理完毕

4286
02:12:51,000 --> 02:12:53,000
再读下一段这么一个过程

4287
02:12:53,000 --> 02:12:56,000
但其实在线的操续上

4288
02:12:56,000 --> 02:12:58,000
上面这个事情也已经很大程度上

4289
02:12:58,000 --> 02:12:59,000
可以完全被避免掉了

4290
02:12:59,000 --> 02:13:01,000
就是通过所谓的使用

4291
02:13:01,000 --> 02:13:02,000
这个叫做

4292
02:13:02,000 --> 02:13:04,000
memory map

4293
02:13:04,000 --> 02:13:05,000
memory mapping

4294
02:13:05,000 --> 02:13:06,000
内存映射这个概念吧

4295
02:13:06,000 --> 02:13:07,000
对

4296
02:13:07,000 --> 02:13:09,000
内存映射大概是什么事情呢

4297
02:13:09,000 --> 02:13:11,000
就操作是提供了这么一个机制

4298
02:13:11,000 --> 02:13:11,000
它可以说

4299
02:13:11,000 --> 02:13:15,000
你可以指着磁盘上的一个文件

4300
02:13:15,000 --> 02:13:16,000
大小随意

4301
02:13:16,000 --> 02:13:16,000
说

4302
02:13:16,000 --> 02:13:17,000
哎

4303
02:13:17,000 --> 02:13:20,000
我要把这块文件映射到内存地址里面去

4304
02:13:20,000 --> 02:13:21,000
这样的话

4305
02:13:21,000 --> 02:13:22,000
我操作是一种

4306
02:13:22,000 --> 02:13:24,000
就我的程序可以直接在

4307
02:13:24,000 --> 02:13:27,000
在起码在界面上

4308
02:13:27,000 --> 02:13:29,000
我直接操纵这个内存的一个区块就好了

4309
02:13:29,000 --> 02:13:32,000
但是具体的那个数据可能并不

4310
02:13:32,000 --> 02:13:34,000
那个时候并不在内存里面

4311
02:13:34,000 --> 02:13:37,000
然后这个时候是由操作系统去负责

4312
02:13:37,000 --> 02:13:38,000
去把那个

4313
02:13:38,000 --> 02:13:41,000
你要访问的那块内存区块的内容

4314
02:13:41,000 --> 02:13:44,000
从这个磁盘上加载过来

4315
02:13:44,000 --> 02:13:45,000
然后再管理

4316
02:13:45,000 --> 02:13:46,000
如果说这个

4317
02:13:46,000 --> 02:13:48,000
内存物理空间不足的情况下

4318
02:13:48,000 --> 02:13:50,000
再把那些没有用到的那些

4319
02:13:50,000 --> 02:13:53,000
内存区块再放回磁盘上去

4320
02:13:53,000 --> 02:13:55,000
就内存印象就做这么一件事

4321
02:13:55,000 --> 02:13:59,000
然后其实就在这个就对我们的开发者来讲

4322
02:13:59,000 --> 02:14:00,000
就是一个启发嘛

4323
02:14:00,000 --> 02:14:01,000
这篇很好的文章

4324
02:14:01,000 --> 02:14:04,000
大家会不会放在这个 notes 里面

4325
02:14:04,000 --> 02:14:07,000
这个是 varnish cache 这个软件

4326
02:14:07,000 --> 02:14:08,000
就是一个反向代理的常用

4327
02:14:08,000 --> 02:14:10,000
如现在你跑服务器后端的话

4328
02:14:10,000 --> 02:14:12,000
可能会经常接触到这个软件

4329
02:14:12,000 --> 02:14:15,000
他们的开发者写了一个就是他的标题叫做

4330
02:14:15,000 --> 02:14:18,000
what's wrong with 1975 programming

4331
02:14:18,000 --> 02:14:22,000
就是他说 1975 年的编程模型有什么问题

4332
02:14:22,000 --> 02:14:25,000
那么讲的最主要的一个问题就是说刚才一个

4333
02:14:25,000 --> 02:14:26,000
就是内存

4334
02:14:26,000 --> 02:14:30,000
就 1975 年的时候还没有没有虚拟内存这个概念吧

4335
02:14:30,000 --> 02:14:33,000
你真的是需要操你程序员手工去考虑

4336
02:14:33,000 --> 02:14:37,000
怎么去从此而言加载一个文件到内存里面去

4337
02:14:37,000 --> 02:14:38,000
然后再进行操作

4338
02:14:38,000 --> 02:14:39,000
然后再写回去这个过程

4339
02:14:39,000 --> 02:14:44,000
但是到现在已经有这个虚拟内存这个超系统

4340
02:14:44,000 --> 02:14:46,000
就绝大部分超系统都已经支持这个东西了

4341
02:14:46,000 --> 02:14:48,000
不然那个 mlock 也没法写好

4342
02:14:48,000 --> 02:14:49,000
对

4343
02:14:49,000 --> 02:14:51,000
在这种情况下

4344
02:14:51,000 --> 02:14:54,000
那么我们写程序的时候就可以不用考虑这个一些东西

4345
02:14:54,000 --> 02:14:56,000
那比如说最简单的一个

4346
02:14:56,000 --> 02:14:58,000
刚才讲的一个持久化和非持久化的问题

4347
02:14:58,000 --> 02:15:01,000
持久化和序列化的问题

4348
02:15:01,000 --> 02:15:03,000
就是那你可以不用考虑说

4349
02:15:03,000 --> 02:15:04,000
我从内存里面读出我一个

4350
02:15:04,000 --> 02:15:06,000
比如是一个树状结构

4351
02:15:06,000 --> 02:15:09,000
然后把它写成一个串流

4352
02:15:09,000 --> 02:15:09,000
再写到磁盘上

4353
02:15:09,000 --> 02:15:13,000
那你直接说我在内存上分配一个

4354
02:15:13,000 --> 02:15:14,000
比如说一个 GB 的空间

4355
02:15:14,000 --> 02:15:16,000
然后来持久化这个数据

4356
02:15:16,000 --> 02:15:19,000
我直接把这个空间映射到我内存里面去

4357
02:15:19,000 --> 02:15:22,000
然后直接在里面建我的那个内存结构

4358
02:15:22,000 --> 02:15:24,000
然后超系统会在适当的时候

4359
02:15:24,000 --> 02:15:28,000
把这些内存里面的数据持久化到磁盘上面去

4360
02:15:28,000 --> 02:15:30,000
从而实现持久化的效果

4361
02:15:30,000 --> 02:15:31,000
但是作为一个程序员

4362
02:15:31,000 --> 02:15:32,000
你又并不用担心

4363
02:15:32,000 --> 02:15:36,000
自己再去真的就是写那个序列化的过程

4364
02:15:36,000 --> 02:15:37,000
没错

4365
02:15:37,000 --> 02:15:41,000
而且一个需要避免的 practice

4366
02:15:41,000 --> 02:15:44,000
或者说一个需要避免的过早优化

4367
02:15:44,000 --> 02:15:48,000
就是尽量也不要总觉得自己

4368
02:15:48,000 --> 02:15:50,000
有些东西放在内存里面

4369
02:15:50,000 --> 02:15:52,000
好像没有什么用

4370
02:15:52,000 --> 02:15:55,000
应该先把它从内存里面挪出来

4371
02:15:55,000 --> 02:15:57,000
然后放在一个磁盘上的什么地方

4372
02:15:57,000 --> 02:15:59,000
然后以此来达到节省内存的目的

4373
02:15:59,000 --> 02:16:02,000
这些都应该将给操作系统来去完成

4374
02:16:02,000 --> 02:16:05,000
这件事情也通通应该让操作系统来完成

4375
02:16:05,000 --> 02:16:05,000
对

4376
02:16:05,000 --> 02:16:06,000
对

4377
02:16:06,000 --> 02:16:09,000
其实说到序列化

4378
02:16:09,000 --> 02:16:13,000
其实现在有很多网上的云端服务

4379
02:16:13,000 --> 02:16:15,000
都提供了这样一种变成接口

4380
02:16:15,000 --> 02:16:16,000
就是你可以在程序里面说

4381
02:16:16,000 --> 02:16:20,000
比如说我用什么 JavaScript

4382
02:16:20,000 --> 02:16:24,000
我 JavaScript 交给你这样一个数据

4383
02:16:24,000 --> 02:16:26,000
然后你就把它存下来

4384
02:16:26,000 --> 02:16:27,000
然后给你要的时候

4385
02:16:27,000 --> 02:16:28,000
你把它原样交还给我

4386
02:16:28,000 --> 02:16:30,000
诸如此类

4387
02:16:30,000 --> 02:16:31,000
对

4388
02:16:31,000 --> 02:16:33,000
这个不管是在网页上

4389
02:16:33,000 --> 02:16:35,000
包括如果你开发 iOS 的话

4390
02:16:35,000 --> 02:16:37,000
应该它有个 core data

4391
02:16:37,000 --> 02:16:38,000
对

4392
02:16:38,000 --> 02:16:39,000
也是做类似的事情

4393
02:16:39,000 --> 02:16:39,000
对

4394
02:16:39,000 --> 02:16:41,000
core data 的编程模型

4395
02:16:41,000 --> 02:16:45,000
我是觉得不是非常的直观

4396
02:16:45,000 --> 02:16:46,000
但你可以理解

4397
02:16:46,000 --> 02:16:49,000
你可以看到它试图为此

4398
02:16:49,000 --> 02:16:51,000
做出一个比较简单用的接口来

4399
02:16:51,000 --> 02:16:55,000
但是用起来还是挺麻烦的

4400
02:16:55,000 --> 02:16:55,000
我觉得

4401
02:16:55,000 --> 02:16:57,000
那麻烦的点主要在哪里呢

4402
02:16:57,000 --> 02:16:59,000
啰嗦是一方面

4403
02:16:59,000 --> 02:17:00,000
但另外一方面

4404
02:17:00,000 --> 02:17:02,000
那个是因为 object-c 的语法不好

4405
02:17:02,000 --> 02:17:03,000
它是

4406
02:17:03,000 --> 02:17:06,000
inheritally 不可避免的

4407
02:17:06,000 --> 02:17:10,000
但我觉得整个想法

4408
02:17:10,000 --> 02:17:12,000
就是把序列化和持久化这一层

4409
02:17:12,000 --> 02:17:17,000
从程序的界面里面分离开来

4410
02:17:17,000 --> 02:17:19,000
我觉得这个是一个挺好的想法

4411
02:17:19,000 --> 02:17:19,000
对

4412
02:17:19,000 --> 02:17:21,000
这是没错的

4413
02:17:21,000 --> 02:17:23,000
所以还是说具体到实现的问题

4414
02:17:23,000 --> 02:17:26,000
怎么去实现这一点

4415
02:17:26,000 --> 02:17:30,000
可能我还是 core data 用的不够多吧

4416
02:17:30,000 --> 02:17:30,000
但

4417
02:17:30,000 --> 02:17:34,000
不过 core data 的吐槽他人也不少

4418
02:17:34,000 --> 02:17:34,000
你

4419
02:17:34,000 --> 02:17:37,000
你绝对不是唯一的

4420
02:17:37,000 --> 02:17:37,000
所以

4421
02:17:37,000 --> 02:17:39,000
对啊

4422
02:17:39,000 --> 02:17:39,000
OK

4423
02:17:39,000 --> 02:17:41,000
那么今天的

4424
02:17:41,000 --> 02:17:42,000
啰啰嗦嗦

4425
02:17:42,000 --> 02:17:43,000
讲了这么多

4426
02:17:43,000 --> 02:17:44,000
内存和

4427
02:17:44,000 --> 02:17:46,000
讲的其实还是有点

4428
02:17:46,000 --> 02:17:48,000
打乱

4429
02:17:48,000 --> 02:17:48,000
算对

4430
02:17:48,000 --> 02:17:51,000
我觉得可能还是咱们两个工体不够吧

4431
02:17:51,000 --> 02:17:53,000
完了

4432
02:17:53,000 --> 02:17:55,000
以后我们还是少碰那种

4433
02:17:55,000 --> 02:17:56,000
比较 hardcore 的东西

4434
02:17:56,000 --> 02:17:57,000
比较厚

4435
02:17:57,000 --> 02:17:59,000
大而硬的话题

4436
02:17:59,000 --> 02:17:59,000
对

4437
02:17:59,000 --> 02:18:00,000
我们还是应该只谈风月

4438
02:18:00,000 --> 02:18:02,000
如果要做这种话题的话

4439
02:18:02,000 --> 02:18:03,000
我觉得我们可以

4440
02:18:03,000 --> 02:18:05,000
比如说准备个两三个月

4441
02:18:05,000 --> 02:18:05,000
然后

4442
02:18:05,000 --> 02:18:08,000
写个脚本出来

4443
02:18:08,000 --> 02:18:08,000
然后你说什么

4444
02:18:08,000 --> 02:18:09,000
我说什么

4445
02:18:09,000 --> 02:18:11,000
每一句都要精确的

4446
02:18:11,000 --> 02:18:12,000
有

4447
02:18:12,000 --> 02:18:12,000
有

4448
02:18:12,000 --> 02:18:13,000
有案可查

4449
02:18:13,000 --> 02:18:15,000
然后每一个数据都要

4450
02:18:15,000 --> 02:18:17,000
每个数据都要查

4451
02:18:17,000 --> 02:18:18,000
核对过

4452
02:18:18,000 --> 02:18:19,000
对吧

4453
02:18:19,000 --> 02:18:20,000
比如说

4454
02:18:20,000 --> 02:18:23,000
L 2 K 的典型尺寸是多少

4455
02:18:23,000 --> 02:18:25,000
我们居然不能脱口而出

4456
02:18:25,000 --> 02:18:27,000
太丢人了

4457
02:18:27,000 --> 02:18:27,000
一兆

4458
02:18:27,000 --> 02:18:27,000
两兆

4459
02:18:27,000 --> 02:18:28,000
这个我知道

4460
02:18:28,000 --> 02:18:29,000
OK

4461
02:18:29,000 --> 02:18:30,000
两兆

4462
02:18:30,000 --> 02:18:30,000
对

4463
02:18:30,000 --> 02:18:37,000
然后这一期的话题之所以会出现

4464
02:18:37,000 --> 02:18:39,000
其实完全是受到 Portal 的启发

4465
02:18:39,000 --> 02:18:40,000
我必须承认

4466
02:18:40,000 --> 02:18:42,000
另外一方面也是

4467
02:18:42,000 --> 02:18:43,000
我之前有一部

4468
02:18:43,000 --> 02:18:45,000
由此我想到了一个

4469
02:18:45,000 --> 02:18:50,000
很有名的科幻作家

4470
02:18:50,000 --> 02:18:52,000
叫做 Ted Chung

4471
02:18:52,000 --> 02:18:53,000
Ted Chung

4472
02:18:53,000 --> 02:18:54,000
对

4473
02:18:54,000 --> 02:18:55,000
中文名字叫江峰南

4474
02:18:55,000 --> 02:18:57,000
就如果你读科幻小说的话

4475
02:18:57,000 --> 02:18:58,000
应该会知道这个

4476
02:18:58,000 --> 02:19:00,000
他这个人写过非常多的

4477
02:19:00,000 --> 02:19:02,000
很有意思的科幻小说

4478
02:19:02,000 --> 02:19:03,000
他有一部就叫

4479
02:19:03,000 --> 02:19:07,000
The Life Cycle of Software Objects

4480
02:19:07,000 --> 02:19:08,000
对

4481
02:19:08,000 --> 02:19:13,000
软件对象的生命周期

4482
02:19:13,000 --> 02:19:13,000
对

4483
02:19:13,000 --> 02:19:15,000
他里面讲的就是

4484
02:19:15,000 --> 02:19:20,000
当然这个剧情从现在看起来好像有点老

4485
02:19:20,000 --> 02:19:22,000
但他写的时候应该挺新的

4486
02:19:22,000 --> 02:19:22,000
就是

4487
02:19:22,000 --> 02:19:27,000
大致就是讲有这么一个像 Second Life

4488
02:19:27,000 --> 02:19:29,000
这么一个虚体世界

4489
02:19:29,000 --> 02:19:33,000
然后里面有一个公司培养出了一大堆人工智能

4490
02:19:33,000 --> 02:19:38,000
人工智能是活在 Second Life 这个世界里面的

4491
02:19:38,000 --> 02:19:39,000
当然他不叫 Second Life

4492
02:19:39,000 --> 02:19:40,000
叫另外一个

4493
02:19:40,000 --> 02:19:42,000
Digital Terror 之类的

4494
02:19:42,000 --> 02:19:44,000
数字地球之类的这么一个

4495
02:19:44,000 --> 02:19:47,000
一个虚拟的虚拟世界里面

4496
02:19:47,000 --> 02:19:48,000
然后在这个虚拟世界里面

4497
02:19:48,000 --> 02:19:50,000
跑着一些人工智能

4498
02:19:50,000 --> 02:19:51,000
然后这些人工智能

4499
02:19:51,000 --> 02:19:53,000
是真正的智能

4500
02:19:53,000 --> 02:19:55,000
就是生下来的时候

4501
02:19:55,000 --> 02:19:57,000
这些人工智能诞生的时候

4502
02:19:57,000 --> 02:19:59,000
是没有什么技能的

4503
02:19:59,000 --> 02:20:00,000
然后需要一群训练

4504
02:20:00,000 --> 02:20:03,000
需要一群人类在里面训练他们

4505
02:20:03,000 --> 02:20:04,000
学习

4506
02:20:04,000 --> 02:20:05,000
然后教他们做游戏

4507
02:20:05,000 --> 02:20:07,000
然后把他们

4508
02:20:07,000 --> 02:20:09,000
就是他们有各种各样的形体

4509
02:20:09,000 --> 02:20:10,000
比如说有些人是机器人的形状

4510
02:20:10,000 --> 02:20:11,000
有些人是鸭子的形状

4511
02:20:11,000 --> 02:20:12,000
有些人是

4512
02:20:12,000 --> 02:20:13,000
然后

4513
02:20:13,000 --> 02:20:15,000
除此类

4514
02:20:15,000 --> 02:20:16,000
然后就讲的是

4515
02:20:16,000 --> 02:20:18,000
人工智能被培育起来的事情

4516
02:20:18,000 --> 02:20:20,000
然后这个文章也是

4517
02:20:20,000 --> 02:20:21,000
这关文章也是

4518
02:20:21,000 --> 02:20:23,000
女性视角

4519
02:20:23,000 --> 02:20:25,000
在三号很奇怪

4520
02:20:25,000 --> 02:20:26,000
女性视角

4521
02:20:26,000 --> 02:20:29,000
然后讲的故事也比较

4522
02:20:29,000 --> 02:20:30,000
其实你读的话

4523
02:20:30,000 --> 02:20:33,000
你会觉得他说的很多事情都很平淡

4524
02:20:33,000 --> 02:20:34,000
比如就讲这个主角

4525
02:20:34,000 --> 02:20:36,000
是怎么带着这些小人工智能们

4526
02:20:36,000 --> 02:20:37,000
陪他们玩

4527
02:20:37,000 --> 02:20:40,000
然后看他们的一点点的和用户互动

4528
02:20:40,000 --> 02:20:43,000
然后直到后来有

4529
02:20:43,000 --> 02:20:45,000
把他们装到就是实体世界里面

4530
02:20:45,000 --> 02:20:46,000
做出来的机器人

4531
02:20:46,000 --> 02:20:49,000
就把他们下载到那个机器人里面

4532
02:20:49,000 --> 02:20:51,000
然后带着他们去看

4533
02:20:51,000 --> 02:20:54,000
去体验实体的世界

4534
02:20:54,000 --> 02:20:57,000
然后以及最后人们是怎样

4535
02:20:57,000 --> 02:20:59,000
他们的用户是怎样失去了

4536
02:20:59,000 --> 02:21:01,000
对这种人工智能的兴趣

4537
02:21:01,000 --> 02:21:05,000
然后就把这些人工智能要退还

4538
02:21:05,000 --> 02:21:07,000
或者是要冻结

4539
02:21:07,000 --> 02:21:09,000
乃至销毁的这么一个过程

4540
02:21:09,000 --> 02:21:10,000
对

4541
02:21:10,000 --> 02:21:17,000
对这篇文章也是有引发我做这样一期主题的动机之一

4542
02:21:17,000 --> 02:21:24,000
但是很显然可能出于这个资历和背景的缘故

4543
02:21:24,000 --> 02:21:26,000
还能准备比较仓促

4544
02:21:26,000 --> 02:21:28,000
做的不是特别的技术人

4545
02:21:28,000 --> 02:21:29,000
不过

4546
02:21:29,000 --> 02:21:31,000
下次吧

4547
02:21:31,000 --> 02:21:32,000
以后对

4548
02:21:32,000 --> 02:21:33,000
下次补过来吧

4549
02:21:33,000 --> 02:21:35,000
好

4550
02:21:35,000 --> 02:21:36,000
那今天的节目就到这里

4551
02:21:36,000 --> 02:21:38,000
截止了

4552
02:21:38,000 --> 02:21:43,000
对然后我们应该会请大家听一遍这个

4553
02:21:43,000 --> 02:21:45,000
Steel Live

4554
02:21:45,000 --> 02:21:47,000
我们的主题去

4555
02:21:47,000 --> 02:21:49,000
那就下期再见吧

4556
02:21:49,000 --> 02:21:50,000
拜拜

4557
02:21:50,000 --> 02:21:54,000
对忘了这期播出时间的

4558
02:21:54,000 --> 02:21:56,000
播出之后应该就要圣诞节了吧

4559
02:21:56,000 --> 02:21:58,000
我想想

4560
02:21:58,000 --> 02:22:00,000
我们下下期应该是

4561
02:22:00,000 --> 02:22:04,000
圣诞节的那个周末我们应该没有节目

4562
02:22:04,000 --> 02:22:05,000
我们是隔一周播一次吧

4563
02:22:05,000 --> 02:22:06,000
这个在意吧

4564
02:22:06,000 --> 02:22:07,000
这个在意吧

4565
02:22:07,000 --> 02:22:08,000
对

4566
02:22:08,000 --> 02:22:13,000
如果下一周你过圣诞节的话

4567
02:22:13,000 --> 02:22:14,000
圣诞快乐

4568
02:22:14,000 --> 02:22:17,000
OK

4569
02:22:17,000 --> 02:22:19,000
就这样了

4570
02:22:19,000 --> 02:22:19,000
OK

4571
02:22:19,000 --> 02:22:20,000
拜拜

4572
02:22:20,000 --> 02:22:20,000
拜拜

