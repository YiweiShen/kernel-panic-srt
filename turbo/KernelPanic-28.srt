1
00:00:00,000 --> 00:00:03,000
欢迎收听 IPM Podcast 网络习下的 IT 技术主题娱乐节目

2
00:00:03,000 --> 00:00:04,000
内核恐慌

3
00:00:04,000 --> 00:00:05,000
我们号称 hardcore

4
00:00:05,000 --> 00:00:06,000
但是也没有干货

5
00:00:06,000 --> 00:00:07,000
想听的人听

6
00:00:07,000 --> 00:00:08,000
不想听的人就别听

7
00:00:08,000 --> 00:00:11,000
本节目的网址是 colonopanic.fm

8
00:00:11,000 --> 00:00:13,000
我们推荐大家使用 Podcast 客户端订阅我们的节目

9
00:00:13,000 --> 00:00:16,000
详情请访问 ipm.li.faq

10
00:00:16,000 --> 00:00:18,000
欢迎你为本节目捐款

11
00:00:18,000 --> 00:00:22,000
捐款地址是 colonopanic.fm.donate

12
00:00:22,000 --> 00:00:23,000
捐款金额随意

13
00:00:23,000 --> 00:00:25,000
只要是 8 的正正数倍就可以

14
00:00:25,000 --> 00:00:26,000
捐款不会为你带来什么

15
00:00:26,000 --> 00:00:28,000
不捐也不会往你失去什么

16
00:00:28,000 --> 00:00:30,000
这句话算不好了

17
00:00:30,000 --> 00:00:31,000
成了个密码

18
00:00:31,000 --> 00:00:33,000
你们上期 IT 课论里面

19
00:00:33,000 --> 00:00:34,000
为什么要插这句话

20
00:00:34,000 --> 00:00:34,000
非常突兀

21
00:00:34,000 --> 00:00:35,000
我觉得

22
00:00:35,000 --> 00:00:37,000
anyway

23
00:00:37,000 --> 00:00:39,000
我们的口号是

24
00:00:39,000 --> 00:00:42,000
It's easier to port a shell

25
00:00:42,000 --> 00:00:44,000
than a shell script

26
00:00:44,000 --> 00:00:45,000
from Larry Wall

27
00:00:45,000 --> 00:00:48,000
对

28
00:00:48,000 --> 00:00:50,000
所以我们这一期又有主题了

29
00:00:50,000 --> 00:00:52,000
不过在进入主题之前

30
00:00:52,000 --> 00:00:54,000
我们先来做一下

31
00:00:54,000 --> 00:00:55,000
上一期的听众反馈

32
00:00:55,000 --> 00:00:58,000
首先是我们的热心听众

33
00:00:58,000 --> 00:01:00,000
Chap Law 先生

34
00:01:00,000 --> 00:01:03,000
远在澳大利亚

35
00:01:03,000 --> 00:01:05,000
为我们写来的听众反馈

36
00:01:05,000 --> 00:01:05,000
说

37
00:01:05,000 --> 00:01:06,000
二位前辈好

38
00:01:06,000 --> 00:01:08,000
第 27 期提到了

39
00:01:08,000 --> 00:01:09,000
用 QQ 发来码的问题

40
00:01:09,000 --> 00:01:11,000
二位似乎在疑惑

41
00:01:11,000 --> 00:01:12,000
什么场景需要这么做

42
00:01:12,000 --> 00:01:13,000
一个典型的例子

43
00:01:13,000 --> 00:01:15,000
就是 group assignment

44
00:01:15,000 --> 00:01:16,000
虽然我本课不在国内

45
00:01:16,000 --> 00:01:17,000
不了解国内音乐校的细节

46
00:01:17,000 --> 00:01:19,000
不过如果不用 Git

47
00:01:19,000 --> 00:01:20,000
而且没有推而求其次

48
00:01:20,000 --> 00:01:23,000
使用丢丢盒等同步盘的话

49
00:01:23,000 --> 00:01:25,000
组员共享

50
00:01:25,000 --> 00:01:26,000
这是什么东西

51
00:01:26,000 --> 00:01:31,000
这是晚营教会我使用的

52
00:01:31,000 --> 00:01:32,000
dropbox 的昵称

53
00:01:32,000 --> 00:01:33,000
丢丢

54
00:01:33,000 --> 00:01:37,000
组员共享代码

55
00:01:37,000 --> 00:01:39,000
只有使用 QQ 这种门槛交 V 的方式

56
00:01:39,000 --> 00:01:44,000
然而即使在国外效果情况也不能说理想

57
00:01:44,000 --> 00:01:46,000
我校虽然有顶级大牛

58
00:01:46,000 --> 00:01:52,000
本科必设就是给 GHC 添加 LMVM 后端

59
00:01:52,000 --> 00:01:54,000
也还是有人不会用 Git

60
00:01:54,000 --> 00:01:55,000
做 group assignment 的时候

61
00:01:55,000 --> 00:01:58,000
把代码从自己的 Eclipse

62
00:01:58,000 --> 00:02:01,000
拷贝到 bitbucket 的网页编辑器

63
00:02:01,000 --> 00:02:04,000
不经意间就三番五次覆盖掉别人的成果

64
00:02:04,000 --> 00:02:06,000
以我一届本科生的前见

65
00:02:06,000 --> 00:02:08,000
这大概与计算机课程覆盖面太广

66
00:02:08,000 --> 00:02:10,000
与其他学科相比

67
00:02:10,000 --> 00:02:13,000
稍欠系统性也有关系

68
00:02:13,000 --> 00:02:15,000
如果以理工划分

69
00:02:15,000 --> 00:02:17,000
计算机是既有理又有工

70
00:02:17,000 --> 00:02:18,000
除了计算理论

71
00:02:18,000 --> 00:02:22,000
PLT 等非常形式化理论化的东西

72
00:02:22,000 --> 00:02:24,000
也有例如 Git 这样

73
00:02:24,000 --> 00:02:25,000
乍一看非常的脏

74
00:02:25,000 --> 00:02:29,000
但是考虑了很多因素的 best practice

75
00:02:29,000 --> 00:02:32,000
当然指望学校覆盖这么多内容也不现实

76
00:02:32,000 --> 00:02:34,000
毕竟这是一个非常依赖个人修行的行业

77
00:02:34,000 --> 00:02:36,000
诸布本节目也没有

78
00:02:36,000 --> 00:02:38,000
所以这让我想起

79
00:02:38,000 --> 00:02:40,000
今天我们后面要提到一个小插曲

80
00:02:40,000 --> 00:02:42,000
就是为什么说

81
00:02:42,000 --> 00:02:45,000
就是这个马农

82
00:02:45,000 --> 00:02:46,000
就是什么

83
00:02:46,000 --> 00:02:48,000
不能把马农称为软件工程师的一个原因

84
00:02:48,000 --> 00:02:52,000
programmers stop calling yourself engineers

85
00:02:52,000 --> 00:02:56,000
如果说你对这些工具流程都没有一个很

86
00:02:56,000 --> 00:02:59,000
或者说其实这怎么说

87
00:02:59,000 --> 00:03:00,000
可能要反过来讲

88
00:03:00,000 --> 00:03:01,000
就是像那种

89
00:03:01,000 --> 00:03:04,000
就是你叫 computer science 的学校

90
00:03:04,000 --> 00:03:08,000
他可能很多人会觉得这种工具层面的东西跟这个 science

91
00:03:08,000 --> 00:03:10,000
其实并没有什么太多的关系对吧

92
00:03:10,000 --> 00:03:14,000
然后他会觉得或多或少的会在这个层面上轻视这个东西

93
00:03:14,000 --> 00:03:16,000
因为觉得都是脏子

94
00:03:16,000 --> 00:03:20,000
对他不是叫做非核心的东西吗

95
00:03:20,000 --> 00:03:22,000
而且就是属于叫什么来的

96
00:03:22,000 --> 00:03:24,000
绩效教的东西

97
00:03:24,000 --> 00:03:26,000
不应该是大学教的东西

98
00:03:26,000 --> 00:03:29,000
其实我觉得这个就不太对

99
00:03:29,000 --> 00:03:31,000
因为如果说你真的是想做工程的话

100
00:03:31,000 --> 00:03:34,000
你真的要做 software engineer 的话

101
00:03:34,000 --> 00:03:38,000
你很大想像一个什么传统建筑行业的人

102
00:03:38,000 --> 00:03:39,000
或者就是建筑工程师

103
00:03:39,000 --> 00:03:42,000
你会让他说他不会用那些什么那些工具

104
00:03:42,000 --> 00:03:43,000
比如什么仪器

105
00:03:43,000 --> 00:03:45,000
还有那个梁那种架子

106
00:03:45,000 --> 00:03:47,000
什么测灰用的那些东西

107
00:03:47,000 --> 00:03:47,000
对吧

108
00:03:47,000 --> 00:03:49,000
你肯定是要学这些基本的操作的

109
00:03:49,000 --> 00:03:52,000
就是我还记得像哪怕是学物理的话

110
00:03:52,000 --> 00:03:55,000
你他学会用各种各样的这个叫什么来的

111
00:03:55,000 --> 00:03:57,000
游标卡尺啊

112
00:03:57,000 --> 00:03:59,000
或者是更高级的一些工具

113
00:03:59,000 --> 00:03:59,000
对吧

114
00:03:59,000 --> 00:04:01,000
那是高中物理吧

115
00:04:01,000 --> 00:04:04,000
我觉得其实物理学的分野已经很明显了

116
00:04:04,000 --> 00:04:06,000
有些理论物理学家真的是完全不做实验的

117
00:04:06,000 --> 00:04:08,000
你看那个 TPBT 里面

118
00:04:08,000 --> 00:04:09,000
Shelon 不是也一直在嘲笑

119
00:04:09,000 --> 00:04:11,000
动手做实验

120
00:04:11,000 --> 00:04:12,000
对啊

121
00:04:12,000 --> 00:04:19,000
我觉得其实就是有这个理论和实践的分野的学科

122
00:04:19,000 --> 00:04:21,000
可能都会有这种多多少少的

123
00:04:21,000 --> 00:04:25,000
就是做纯理论的人会轻视需要动手做实践的人

124
00:04:25,000 --> 00:04:27,000
因为其实有理论就够了嘛

125
00:04:27,000 --> 00:04:34,000
但你刚才说的那个建筑又是完全一个比较不一样的东西

126
00:04:34,000 --> 00:04:36,000
因为建筑本身就是从实践而来的

127
00:04:36,000 --> 00:04:39,000
建筑没有什么纯理论的东西

128
00:04:39,000 --> 00:04:42,000
或者说有但没有那么脱离现实的纯理论

129
00:04:42,000 --> 00:04:46,000
他不会研究真空中的纯球形建筑

130
00:04:46,000 --> 00:04:46,000
对吧

131
00:04:46,000 --> 00:04:52,000
但是以后我们造那个 spaceship 的时候就需要考虑这个问题了

132
00:04:52,000 --> 00:04:54,000
真空中的球形建筑

133
00:04:54,000 --> 00:04:54,000
不就是水滴吗

134
00:04:54,000 --> 00:04:55,000
不是水滴

135
00:04:55,000 --> 00:04:57,000
是那个啊

136
00:04:57,000 --> 00:04:58,000
Dance Star

137
00:04:58,000 --> 00:05:00,000
死星和那个一切的轮廟塞

138
00:05:00,000 --> 00:05:03,000
对

139
00:05:03,000 --> 00:05:06,000
所以我的观点其实很简单

140
00:05:06,000 --> 00:05:08,000
就是很多现在也很多学校也在分这个东西嘛

141
00:05:08,000 --> 00:05:11,000
他分这个计算机科学系和计算机工程系

142
00:05:11,000 --> 00:05:13,000
或者说软件工程系

143
00:05:13,000 --> 00:05:17,000
所以如果你们这个这个里面带有工程这个

144
00:05:17,000 --> 00:05:23,000
但是又不去对这个学生进行系统化的这种像这种代码管理工具的培训

145
00:05:23,000 --> 00:05:24,000
编辑器的培训

146
00:05:24,000 --> 00:05:26,000
ID 的使用培训

147
00:05:26,000 --> 00:05:27,000
你不去教这些 best practices

148
00:05:27,000 --> 00:05:31,000
我觉得你是不配去叫自己是一个工程系的嘛

149
00:05:31,000 --> 00:05:31,000
对

150
00:05:31,000 --> 00:05:32,000
这是肯定的

151
00:05:32,000 --> 00:05:34,000
但是如果你做纯理论的话

152
00:05:34,000 --> 00:05:41,000
又会觉得说学那些系统而微的工具的时间还是挺

153
00:05:41,000 --> 00:05:43,000
好像有点浪费

154
00:05:43,000 --> 00:05:45,000
我觉得我上方有这种印象

155
00:05:45,000 --> 00:05:49,000
就是有些学计算机的人他之所以不懂那些具体的工具

156
00:05:49,000 --> 00:05:53,000
乃至于学计算机科学的人不会修计算机也是因为就是

157
00:05:53,000 --> 00:05:55,000
他是工具吗

158
00:05:55,000 --> 00:05:57,000
太太耗时间了

159
00:05:57,000 --> 00:06:01,000
对所以我觉得就说呃

160
00:06:01,000 --> 00:06:04,000
纯理论的也 theoretical 的研究也好

161
00:06:04,000 --> 00:06:05,000
培训啊 research 啊

162
00:06:05,000 --> 00:06:06,000
这点完全没有问题

163
00:06:06,000 --> 00:06:10,000
但是如果说你还是指望你的毕业生有能够在就业市场上

164
00:06:10,000 --> 00:06:11,000
起码本科哈

165
00:06:11,000 --> 00:06:12,000
你说这个博士研究生

166
00:06:12,000 --> 00:06:13,000
你说你不指望他

167
00:06:13,000 --> 00:06:17,000
你不去管他们的就业在那个职场

168
00:06:17,000 --> 00:06:19,000
就是做马龙这个方向的职业

169
00:06:19,000 --> 00:06:21,000
呃其实我觉得情有可原啊

170
00:06:21,000 --> 00:06:26,000
但是如果说你是一个本科本科的一个教学目标

171
00:06:26,000 --> 00:06:29,000
然后你说把这些完全就踢掉不不看

172
00:06:29,000 --> 00:06:30,000
我觉得是其实是有问题的

173
00:06:30,000 --> 00:06:33,000
就从务实的角度来讲

174
00:06:33,000 --> 00:06:37,000
还是从这个对这些人的未来的就业的情况来讲

175
00:06:37,000 --> 00:06:39,000
我觉得这个是有有欠考虑

176
00:06:39,000 --> 00:06:40,000
没错啊

177
00:06:40,000 --> 00:06:42,000
然后如果你真的这么干了

178
00:06:42,000 --> 00:06:46,000
就不要叫自己的毕业生是 software engineer

179
00:06:46,000 --> 00:06:47,000
这种 title 好了

180
00:06:47,000 --> 00:06:49,000
对

181
00:06:49,000 --> 00:06:50,000
嗯

182
00:06:50,000 --> 00:06:52,000
下一则听这种反馈啊

183
00:06:52,000 --> 00:06:53,000
这个

184
00:06:53,000 --> 00:06:53,000
呃

185
00:06:53,000 --> 00:06:55,000
这个他先揪了我们一个错

186
00:06:55,000 --> 00:06:56,000
呃

187
00:06:56,000 --> 00:06:59,000
上次上期我们提到了那个那个叫做 let's encrypt

188
00:06:59,000 --> 00:07:02,000
那个一个叫 SSL 的这么一个服务吧

189
00:07:02,000 --> 00:07:05,000
他的 founder 记得 university of michigan

190
00:07:05,000 --> 00:07:08,000
是密歇根大学不是密歇根州立大学啊

191
00:07:08,000 --> 00:07:09,000
这个应该是我说错了

192
00:07:09,000 --> 00:07:10,000
嗯

193
00:07:10,000 --> 00:07:11,000
意思最快

194
00:07:11,000 --> 00:07:14,000
所以就美国这个学校也是挺搞挺有意思的

195
00:07:14,000 --> 00:07:15,000
他会有这个 michigan state

196
00:07:15,000 --> 00:07:17,000
或者 university of michigan 这样

197
00:07:17,000 --> 00:07:20,000
两种比较坑的

198
00:07:20,000 --> 00:07:25,000
对你看武汉大学和湖北大学就是就是两所大学对吧

199
00:07:25,000 --> 00:07:25,000
没有人搞混

200
00:07:25,000 --> 00:07:30,000
但是为什么不不不不这个是不这个数呃

201
00:07:30,000 --> 00:07:35,000
如果可以比了应该是湖北大学和湖北省力大学的区别

202
00:07:35,000 --> 00:07:36,000
呃

203
00:07:36,000 --> 00:07:37,000
ok

204
00:07:37,000 --> 00:07:42,000
对因为没有一个城市叫做 michigan

205
00:07:42,000 --> 00:07:42,000
对这是

206
00:07:42,000 --> 00:07:45,000
接着念这则听众反馈啊

207
00:07:45,000 --> 00:07:46,000
呃

208
00:07:46,000 --> 00:07:49,000
本来只想随手回复一下这个小小的口误

209
00:07:49,000 --> 00:07:54,000
反正也要发邮件不多说几句感想括号废话

210
00:07:54,000 --> 00:07:58,000
那盒恐慌我是从第一期开始听的

211
00:07:58,000 --> 00:08:00,000
追的热情不亚于追翻和美剧

212
00:08:00,000 --> 00:08:01,000
哇

213
00:08:01,000 --> 00:08:02,000
这么高的评价

214
00:08:02,000 --> 00:08:03,000
真是不胜惶恐

215
00:08:03,000 --> 00:08:05,000
呃

216
00:08:05,000 --> 00:08:06,000
早晨上班

217
00:08:06,000 --> 00:08:08,000
单位和公寓之间 commute 很久

218
00:08:08,000 --> 00:08:11,000
经常在路上消化各种 podcast 节目

219
00:08:11,000 --> 00:08:14,000
阿基公论和内核恐慌真是一级不辣

220
00:08:14,000 --> 00:08:15,000
哎

221
00:08:15,000 --> 00:08:15,000
连对了

222
00:08:15,000 --> 00:08:16,000
有

223
00:08:16,000 --> 00:08:22,000
有时候听到有意思的片段都是一个人戴着耳机坐在车上傻笑

224
00:08:22,000 --> 00:08:23,000
哎呀

225
00:08:23,000 --> 00:08:28,000
这种随身便携还只能独享的愉悦真是迷样自豪呢

226
00:08:28,000 --> 00:08:29,000
这位同学

227
00:08:29,000 --> 00:08:31,000
你这个中毒蛮深的

228
00:08:31,000 --> 00:08:33,000
真的不用怀疑

229
00:08:33,000 --> 00:08:35,000
不用考虑一下邻座的感受吗

230
00:08:35,000 --> 00:08:36,000
哈哈哈哈

231
00:08:36,000 --> 00:08:37,000
OK

232
00:08:37,000 --> 00:08:38,000
这三天哈

233
00:08:38,000 --> 00:08:41,000
哎我是从事交互行交互设计行业的

234
00:08:41,000 --> 00:08:43,000
所以对设计啦产品啦

235
00:08:43,000 --> 00:08:44,000
MVP 啦

236
00:08:44,000 --> 00:08:45,000
相关的话题更感兴趣

237
00:08:45,000 --> 00:08:48,000
其他篇开发的内容也能接受

238
00:08:48,000 --> 00:08:51,000
之前是从 CS 转行过来的

239
00:08:51,000 --> 00:08:58,000
心里多少有点没能继续坚持走马的阳光大道不动摇的遗憾

240
00:08:58,000 --> 00:08:59,000
不对啊

241
00:08:59,000 --> 00:09:00,000
你这选对方向呢

242
00:09:00,000 --> 00:09:00,000
我觉得

243
00:09:00,000 --> 00:09:05,000
于是靠听播客了解大家都在干嘛

244
00:09:05,000 --> 00:09:06,000
讨论什么

245
00:09:06,000 --> 00:09:10,000
维系你看我还是很积极关注技术的安全感

246
00:09:10,000 --> 00:09:13,000
特别喜欢邀请了嘉宾的几期

247
00:09:13,000 --> 00:09:16,000
消极姐木窑老师 Vilo 还有最近的 ELDA

248
00:09:16,000 --> 00:09:19,000
感联系各位爹

249
00:09:19,000 --> 00:09:23,000
然后提供上门学生客户的那段销售

250
00:09:23,000 --> 00:09:28,000
虽是不一样的领域但都会对自己思考问题解决问题的方式有启发

251
00:09:28,000 --> 00:09:30,000
对我来说已经很可贵了

252
00:09:30,000 --> 00:09:32,000
这个我还是蛮蛮欣慰的

253
00:09:32,000 --> 00:09:34,000
这个我还是蛮蛮蛮欣慰的

254
00:09:34,000 --> 00:09:35,000
嗯

255
00:09:35,000 --> 00:09:36,000
接着你

256
00:09:36,000 --> 00:09:36,000
呃

257
00:09:36,000 --> 00:09:41,000
李如意这个文青有时会把爱奇功论的气氛弄成辩论会

258
00:09:41,000 --> 00:09:44,000
我各种 WiFi 都觉得这是要剑拔奴章了

259
00:09:44,000 --> 00:09:46,000
可能是我多虑了呢

260
00:09:46,000 --> 00:09:47,000
呃

261
00:09:47,000 --> 00:09:49,000
这个我要插话确实是多虑了

262
00:09:49,000 --> 00:09:50,000
呃

263
00:09:50,000 --> 00:09:53,000
相较而言内和恐慌就和谐得多

264
00:09:53,000 --> 00:09:57,000
果然程序员是天底下最可爱无害的神般存在

265
00:09:57,000 --> 00:10:00,000
有进有退有分寸还特自然

266
00:10:00,000 --> 00:10:02,000
不管怎样我还是爱你们所有人

267
00:10:02,000 --> 00:10:04,000
包括很有逼格

268
00:10:04,000 --> 00:10:06,000
括号就是褒义的

269
00:10:06,000 --> 00:10:07,000
李如意

270
00:10:07,000 --> 00:10:08,000
最后我呃

271
00:10:08,000 --> 00:10:11,000
其实我本来想说要是有靠谱湾区

272
00:10:11,000 --> 00:10:12,000
南马农

273
00:10:12,000 --> 00:10:17,000
愿意每周末出来泡个咖啡店图书馆

274
00:10:17,000 --> 00:10:19,000
做做自己想做的 side project

275
00:10:19,000 --> 00:10:22,000
觉得有个设计师一起也不赖

276
00:10:22,000 --> 00:10:23,000
请联系我

277
00:10:23,000 --> 00:10:27,000
不过我觉得这样被误解成 hr 的概率太大

278
00:10:27,000 --> 00:10:29,000
而且听上去总有

279
00:10:29,000 --> 00:10:32,000
总是不像好人有种无耻的猥琐感

280
00:10:32,000 --> 00:10:33,000
你是算了吧

281
00:10:33,000 --> 00:10:34,000
这挺好的

282
00:10:34,000 --> 00:10:35,000
我觉得挺好的

283
00:10:35,000 --> 00:10:36,000
你们这个自己组组合吧

284
00:10:36,000 --> 00:10:38,000
对他强调这个弯曲南马农

285
00:10:38,000 --> 00:10:40,000
所以这应该是个妹子

286
00:10:40,000 --> 00:10:41,000
对为什么要一定是南马农

287
00:10:41,000 --> 00:10:42,000
是不是是个女生吧

288
00:10:42,000 --> 00:10:43,000
可能

289
00:10:43,000 --> 00:10:45,000
嗯

290
00:10:45,000 --> 00:10:46,000
好吧

291
00:10:46,000 --> 00:10:47,000
嗯

292
00:10:47,000 --> 00:10:48,000
还是说

293
00:10:48,000 --> 00:10:51,000
诸内和恐慌越做越棒

294
00:10:51,000 --> 00:10:53,000
达到新闻联播的境界

295
00:10:53,000 --> 00:10:54,000
嘣嘣嘣嘣嘣

296
00:10:54,000 --> 00:10:55,000
是指风雨

297
00:10:55,000 --> 00:10:56,000
哈哈哈哈

298
00:10:56,000 --> 00:11:00,000
当然是指风雨无阻的任性和权威性咯

299
00:11:00,000 --> 00:11:02,000
又没鼓励没写固定排笔句

300
00:11:02,000 --> 00:11:04,000
某碗暴喜不报忧

301
00:11:04,000 --> 00:11:05,000
嗯

302
00:11:05,000 --> 00:11:07,000
我这样也蛮开心的哈

303
00:11:07,000 --> 00:11:10,000
就确实这个节目能够给大家带来

304
00:11:10,000 --> 00:11:14,000
一点点这个快乐的时光哈

305
00:11:14,000 --> 00:11:15,000
然后觉得还有所启发

306
00:11:15,000 --> 00:11:16,000
这个其实对我

307
00:11:16,000 --> 00:11:18,000
我个人觉得是个挺高的评价的

308
00:11:18,000 --> 00:11:19,000
听起来好激烫

309
00:11:19,000 --> 00:11:20,000
然后

310
00:11:20,000 --> 00:11:21,000
对

311
00:11:21,000 --> 00:11:24,000
然后我还是这个叫什么

312
00:11:24,000 --> 00:11:27,000
很纠结这个为什么只限南马农呢

313
00:11:27,000 --> 00:11:28,000
就没有女马农吗

314
00:11:28,000 --> 00:11:29,000
你们这是要

315
00:11:29,000 --> 00:11:30,000
要玩

316
00:11:30,000 --> 00:11:34,000
昨天我女朋友跟我说那个维密有一个模特

317
00:11:34,000 --> 00:11:37,000
升了纽约大学去学编程了

318
00:11:37,000 --> 00:11:39,000
然后他还成了一个基建会

319
00:11:39,000 --> 00:11:44,000
是那个黑人女孩子吗

320
00:11:44,000 --> 00:11:46,000
我没有看说什么长得超正

321
00:11:46,000 --> 00:11:49,000
然后那个毅然解约去学编程

322
00:11:49,000 --> 00:11:53,000
还要每年支持 N 个女生去学编程之类的一个

323
00:11:53,000 --> 00:11:54,000
我知道就是那个

324
00:11:54,000 --> 00:11:56,000
他是哪个学校

325
00:11:56,000 --> 00:11:58,000
他是做那个 LS 开发的

326
00:11:58,000 --> 00:12:04,000
然后就是业余做一下这个维多米亚的秘密的模特

327
00:12:04,000 --> 00:12:06,000
身材超赞

328
00:12:06,000 --> 00:12:08,000
然后就是哇

329
00:12:08,000 --> 00:12:09,000
这就是

330
00:12:09,000 --> 00:12:10,000
我去读完节目去看一下

331
00:12:10,000 --> 00:12:11,000
马农女神好不好

332
00:12:11,000 --> 00:12:12,000
这个是

333
00:12:12,000 --> 00:12:14,000
之前那个什么

334
00:12:14,000 --> 00:12:15,000
直呼上也有一个

335
00:12:15,000 --> 00:12:17,000
来也有一个模特女孩子

336
00:12:17,000 --> 00:12:18,000
后来就学排放了吧

337
00:12:18,000 --> 00:12:19,000
我记得

338
00:12:19,000 --> 00:12:22,000
然后后来还搞了一个创业项目是做

339
00:12:22,000 --> 00:12:25,000
是做一个什么订阅器来的

340
00:12:25,000 --> 00:12:26,000
我忘了

341
00:12:26,000 --> 00:12:27,000
OK

342
00:12:27,000 --> 00:12:30,000
找到那个链接加到收脑资料

343
00:12:30,000 --> 00:12:31,000
那

344
00:12:31,000 --> 00:12:36,000
就我们只有这两封反馈吧

345
00:12:36,000 --> 00:12:37,000
应该是

346
00:12:37,000 --> 00:12:39,000
对

347
00:12:39,000 --> 00:12:40,000
对

348
00:12:40,000 --> 00:12:41,000
其实还有一个比较简短的

349
00:12:41,000 --> 00:12:43,000
就是有位听众给我们写信来说

350
00:12:43,000 --> 00:12:45,000
推荐了一篇文章叫做

351
00:12:45,000 --> 00:12:48,000
programmers should stop call themselves engineers

352
00:12:48,000 --> 00:12:50,000
是来自于那个 telegram

353
00:12:50,000 --> 00:12:53,000
the atlantic sorry

354
00:12:53,000 --> 00:12:56,000
报纸网站上的一篇文章

355
00:12:56,000 --> 00:12:59,000
这篇文章其实我前两周也看过了

356
00:12:59,000 --> 00:13:00,000
就是他

357
00:13:00,000 --> 00:13:02,000
因为他曾经在 hacker news 上出现

358
00:13:02,000 --> 00:13:10,000
然后其大意就是说这个工程师是一个非常高大上的 title

359
00:13:10,000 --> 00:13:15,000
其实他就按照这篇文章的这个调子来说

360
00:13:15,000 --> 00:13:17,000
工程师是一个非常庄严

361
00:13:17,000 --> 00:13:21,000
一个让人可以信赖

362
00:13:21,000 --> 00:13:24,000
然后门槛非常高的这么一个 title

363
00:13:24,000 --> 00:13:27,000
而这些 tech industry

364
00:13:27,000 --> 00:13:30,000
就是我们这些搞电脑这帮人

365
00:13:30,000 --> 00:13:31,000
总是会

366
00:13:31,000 --> 00:13:33,000
总是希望把自己

367
00:13:33,000 --> 00:13:36,000
总是会使用什么 software engineer 这种 title

368
00:13:36,000 --> 00:13:39,000
然后这样的 title 实际上是在给 engineer 抹黑

369
00:13:39,000 --> 00:13:42,000
因为很多 software 是非常不可靠的

370
00:13:42,000 --> 00:13:44,000
就他原句里面有句话

371
00:13:44,000 --> 00:13:48,000
我记得就是许多软件服务在今天

372
00:13:48,000 --> 00:13:49,000
其实已经成了 infrastructure

373
00:13:49,000 --> 00:13:53,000
但是他们却远远不如传统的 infrastructure 可靠

374
00:13:53,000 --> 00:13:56,000
比如说对

375
00:13:56,000 --> 00:13:58,000
我其实我可以理解这种像他的这种说法

376
00:13:58,000 --> 00:13:59,000
比如说 Facebook

377
00:13:59,000 --> 00:14:02,000
对于很多人来说 Facebook 或者 iMessage

378
00:14:02,000 --> 00:14:05,000
已经全都是非常每天离不开的东西了

379
00:14:05,000 --> 00:14:08,000
但是就今天明天什么时候

380
00:14:08,000 --> 00:14:11,000
莫名其妙的 Facebook 就要 outrage 一下

381
00:14:11,000 --> 00:14:13,000
什么 outrage

382
00:14:13,000 --> 00:14:14,000
outage 一下

383
00:14:14,000 --> 00:14:15,000
推特也是对吧

384
00:14:15,000 --> 00:14:17,000
你很难想象在一个

385
00:14:17,000 --> 00:14:21,000
在一个翻来国家或一天的晚停电

386
00:14:21,000 --> 00:14:25,000
但至少推特也有一阶段就是这样

387
00:14:25,000 --> 00:14:27,000
但现在的像 Facebook Google

388
00:14:27,000 --> 00:14:29,000
Google 这些都 outrage 基本上很少了吧

389
00:14:29,000 --> 00:14:30,000
对

390
00:14:30,000 --> 00:14:32,000
相对来说是比较少

391
00:14:32,000 --> 00:14:33,000
它也不是大面积的

392
00:14:33,000 --> 00:14:34,000
对

393
00:14:34,000 --> 00:14:38,000
但我的意思就是从统计学的角度来看

394
00:14:38,000 --> 00:14:44,000
他们还是要比传统的 infrastructure 要来得那么频繁一点

395
00:14:44,000 --> 00:14:46,000
那倒不一定吧

396
00:14:46,000 --> 00:14:48,000
我觉得这个看你怎么去

397
00:14:48,000 --> 00:14:51,000
你要考虑一个叫什么量级的问题

398
00:14:51,000 --> 00:14:54,000
比如说你见过哪一栋楼

399
00:14:54,000 --> 00:14:57,000
每天有 11 人在同时使用它

400
00:14:57,000 --> 00:14:58,000
没有吧

401
00:14:58,000 --> 00:14:59,000
好吧

402
00:14:59,000 --> 00:15:00,000
好吧

403
00:15:00,000 --> 00:15:01,000
对

404
00:15:01,000 --> 00:15:05,000
所以这个我觉得你如果要考虑这个可靠性的话

405
00:15:05,000 --> 00:15:07,000
得考虑它的这个使用评测啊

406
00:15:07,000 --> 00:15:08,000
还有那些问题啊

407
00:15:08,000 --> 00:15:09,000
嗯

408
00:15:09,000 --> 00:15:11,000
还有要像那些就

409
00:15:11,000 --> 00:15:14,000
建筑的豆腐缸豆腐渣工程也不好

410
00:15:14,000 --> 00:15:16,000
那些也不是工程师干出来的吗

411
00:15:16,000 --> 00:15:17,000
对吧

412
00:15:17,000 --> 00:15:18,000
所以也不尽然

413
00:15:18,000 --> 00:15:19,000
好吧

414
00:15:19,000 --> 00:15:20,000
反正是一个论调

415
00:15:20,000 --> 00:15:22,000
然后大家可以去看一看这篇文章

416
00:15:22,000 --> 00:15:23,000
我觉得还行

417
00:15:23,000 --> 00:15:24,000
挺有意思

418
00:15:24,000 --> 00:15:25,000
对

419
00:15:25,000 --> 00:15:26,000
OK

420
00:15:26,000 --> 00:15:28,000
现在进入我们这个新闻环节

421
00:15:28,000 --> 00:15:29,000
对

422
00:15:29,000 --> 00:15:30,000
其实就两条新闻

423
00:15:30,000 --> 00:15:31,000
对

424
00:15:31,000 --> 00:15:34,000
因为我们两个最近都没有怎么看新闻

425
00:15:34,000 --> 00:15:35,000
你忙什么

426
00:15:35,000 --> 00:15:37,000
我反正是在忙着打 Fault

427
00:15:37,000 --> 00:15:39,000
你打什么

428
00:15:40,000 --> 00:15:41,000
辐射 4

429
00:15:41,000 --> 00:15:42,000
刚出来的

430
00:15:42,000 --> 00:15:43,000
好吧

431
00:15:43,000 --> 00:15:44,000
那个是一个什么

432
00:15:44,000 --> 00:15:45,000
设计游戏吗

433
00:15:47,000 --> 00:15:48,000
设计游戏

434
00:15:48,000 --> 00:15:49,000
是个

435
00:15:51,000 --> 00:15:56,000
反乌托邦的大灾难之后的 RPG

436
00:15:56,000 --> 00:15:57,000
RPG

437
00:15:57,000 --> 00:15:59,000
史诗版的游戏

438
00:15:59,000 --> 00:16:00,000
对

439
00:16:00,000 --> 00:16:02,000
就出到 4 了应该差不多是这样

440
00:16:02,000 --> 00:16:04,000
不是史诗应该不会出到 4

441
00:16:04,000 --> 00:16:05,000
对

442
00:16:07,000 --> 00:16:09,000
所以我就只看了两则新闻

443
00:16:09,000 --> 00:16:10,000
等一下

444
00:16:10,000 --> 00:16:11,000
你只打 Fault

445
00:16:11,000 --> 00:16:13,000
没有打 Legacy of the Void

446
00:16:13,000 --> 00:16:14,000
Legacy of the Void

447
00:16:17,000 --> 00:16:18,000
他们是从头前出来的

448
00:16:18,000 --> 00:16:19,000
但是迄今为止

449
00:16:19,000 --> 00:16:21,000
我刚刚只把 Legacy of the Void

450
00:16:21,000 --> 00:16:24,000
第一关玩了大概两分钟

451
00:16:24,000 --> 00:16:27,000
然后就一直在打 Fault

452
00:16:27,000 --> 00:16:28,000
好吧

453
00:16:28,000 --> 00:16:29,000
你是个叛徒

454
00:16:30,000 --> 00:16:31,000
sorry

455
00:16:32,000 --> 00:16:33,000
好吧

456
00:16:33,000 --> 00:16:34,000
你有玩吗

457
00:16:34,000 --> 00:16:35,000
我还没买

458
00:16:35,000 --> 00:16:36,000
因为自己比较忙吗

459
00:16:36,000 --> 00:16:37,000
然后也没空去玩游戏

460
00:16:37,000 --> 00:16:38,000
OK

461
00:16:38,000 --> 00:16:39,000
讲新闻吧

462
00:16:39,000 --> 00:16:40,000
第一则是什么

463
00:16:40,000 --> 00:16:41,000
其实这个是旧闻了

464
00:16:42,000 --> 00:16:43,000
这个应该是在

465
00:16:43,000 --> 00:16:44,000
这是两周之前的事情吧

466
00:16:44,000 --> 00:16:46,000
这是一周多之前的事情

467
00:16:46,000 --> 00:16:47,000
不止我

468
00:16:47,000 --> 00:16:50,000
我觉得这个东西我好像好几个月前就已经看到过了

469
00:16:51,000 --> 00:16:52,000
What

470
00:16:53,000 --> 00:16:54,000
I think

471
00:16:54,000 --> 00:16:55,000
难道

472
00:16:55,000 --> 00:16:56,000
那 anyway

473
00:16:56,000 --> 00:16:59,000
对反正这个东西也许是一周之前才正式有了自己的网站

474
00:16:59,000 --> 00:17:01,000
然后有了 FAQ 什么的

475
00:17:01,000 --> 00:17:02,000
OK

476
00:17:02,000 --> 00:17:03,000
对

477
00:17:03,000 --> 00:17:08,000
总之它是一个来自于 Google 的移动编程框架

478
00:17:09,000 --> 00:17:11,000
名字叫做 Flutter

479
00:17:11,000 --> 00:17:13,000
F-L-U-T-T-E-R

480
00:17:15,000 --> 00:17:19,000
它最大的特点大概就是使用 Dart language 来写

481
00:17:19,000 --> 00:17:24,000
可以支持你的用 Dart language 来写移动短定

482
00:17:24,000 --> 00:17:26,000
所以这样做有什么好处呢

483
00:17:30,000 --> 00:17:31,000
如果你看看 Android 的话

484
00:17:31,000 --> 00:17:32,000
以后也许不用写 Java

485
00:17:32,000 --> 00:17:34,000
但是 Dart 比 Java 好吗

486
00:17:36,000 --> 00:17:37,000
我觉得它是好一些的吧

487
00:17:37,000 --> 00:17:38,000
因为

488
00:17:40,000 --> 00:17:42,000
有什么语言能比 Java 还长

489
00:17:43,000 --> 00:17:44,000
C++

490
00:17:44,000 --> 00:17:45,000
PHP

491
00:17:46,000 --> 00:17:47,000
JavaScript

492
00:17:47,000 --> 00:17:49,000
对

493
00:17:49,000 --> 00:17:52,000
但 Dart 跟 JavaScript 可能

494
00:17:53,000 --> 00:17:54,000
Dart 可以 compile intoJavaScript

495
00:17:55,000 --> 00:17:56,000
但 anyway

496
00:17:56,000 --> 00:17:57,000
语言不是我们的重点

497
00:17:57,000 --> 00:17:59,000
但我的意思是

498
00:18:00,000 --> 00:18:02,000
它最大的卖点就是使用

499
00:18:02,000 --> 00:18:04,000
可以使用 Java 之外的语言来写 Android

500
00:18:04,000 --> 00:18:05,000
而且它

501
00:18:06,000 --> 00:18:10,000
它其实是本质上是一个跨平台的框架

502
00:18:10,000 --> 00:18:16,000
它可以把写出来的程序编译成 IOS 的程序

503
00:18:17,000 --> 00:18:19,000
然后也可以在 Android 上跑

504
00:18:20,000 --> 00:18:22,000
那 Windows Phone 我目前还没有印象的

505
00:18:22,000 --> 00:18:24,000
应该将来可能也会支持

506
00:18:25,000 --> 00:18:27,000
其实说到 Android

507
00:18:27,000 --> 00:18:30,000
其实用 Skala 也可以写开发 Android 应用吧

508
00:18:30,000 --> 00:18:33,000
理论上是可以的

509
00:18:33,000 --> 00:18:35,000
而且好像是有框架的

510
00:18:36,000 --> 00:18:37,000
对只是说

511
00:18:37,000 --> 00:18:39,000
反正你不关注 Vivo 更不关注

512
00:18:39,000 --> 00:18:40,000
都是太流行好像

513
00:18:41,000 --> 00:18:42,000
对

514
00:18:42,000 --> 00:18:47,000
然后 Flutter 也采用了一些类似于 Facebook 的

515
00:18:49,000 --> 00:18:54,000
叫什么来着 Reactive 的相似的设计模式

516
00:18:54,000 --> 00:18:56,000
然后可以支持你比较

517
00:18:56,000 --> 00:19:01,000
是用这种类似 Functional Reactive 的方式来写它的界面

518
00:19:02,000 --> 00:19:04,000
所以 Flutter 算什么

519
00:19:04,000 --> 00:19:06,000
算是 Google 的亲儿子了

520
00:19:07,000 --> 00:19:08,000
应该是吧

521
00:19:08,000 --> 00:19:09,000
看这个意思

522
00:19:09,000 --> 00:19:11,000
但是 Dart 其实一直搞不懂

523
00:19:11,000 --> 00:19:14,000
他们是到底是要主推这个还是怎么样

524
00:19:14,000 --> 00:19:18,000
因为之前说是要把 Dart 做进 Chrome 里面

525
00:19:18,000 --> 00:19:19,000
就直接支持这个语言了

526
00:19:20,000 --> 00:19:22,000
但后来好像这个计划就取消了

527
00:19:22,000 --> 00:19:25,000
所以给外界的信心好像不是很足的

528
00:19:25,000 --> 00:19:28,000
对我觉得 Google 可能

529
00:19:28,000 --> 00:19:35,000
如果 Go Language 是亲定的后端语言的话

530
00:19:35,000 --> 00:19:41,000
前端或者是更比较没那么工业级别的使用

531
00:19:41,000 --> 00:19:45,000
这种类似于脚本的更快的更易于执行的语言

532
00:19:45,000 --> 00:19:46,000
应该是 Dart 吧

533
00:19:46,000 --> 00:19:48,000
但总觉得背后的推力不够

534
00:19:48,000 --> 00:19:52,000
他没有再努力的去 PR 这件事情

535
00:19:52,000 --> 00:19:53,000
对啊

536
00:19:53,000 --> 00:19:54,000
所以我觉得很可能

537
00:19:54,000 --> 00:19:56,000
因为 Google 经常出这种

538
00:19:56,000 --> 00:19:57,000
觉得听起来还不错

539
00:19:57,000 --> 00:19:59,000
挺酷的一个项目

540
00:19:59,000 --> 00:20:01,000
然后他过过一段时间就不推

541
00:20:01,000 --> 00:20:03,000
然后这个项目就又死翘翘了

542
00:20:03,000 --> 00:20:04,000
这种这也不是第一次了

543
00:20:04,000 --> 00:20:07,000
但我觉得在 Google 这边有一个魔咒

544
00:20:07,000 --> 00:20:09,000
就是他们努力推的东西一般都不会成功

545
00:20:09,000 --> 00:20:11,000
比如说 Google Plus

546
00:20:11,000 --> 00:20:13,000
或者是

547
00:20:14,000 --> 00:20:15,000
对或者是什么

548
00:20:15,000 --> 00:20:18,000
之前胎死腹中的一出来

549
00:20:18,000 --> 00:20:19,000
哇哦所有人都惊呆了

550
00:20:19,000 --> 00:20:21,000
然后最后死掉的那种叫什么

551
00:20:21,000 --> 00:20:22,000
干嘛用的

552
00:20:22,000 --> 00:20:25,000
号称要代替电子邮件的那个东西

553
00:20:25,000 --> 00:20:26,000
Google Wave

554
00:20:26,000 --> 00:20:30,000
Google Wave 不也是一顿狂推

555
00:20:30,000 --> 00:20:31,000
然后就完蛋了

556
00:20:31,000 --> 00:20:34,000
所以他们可能也学会了闷声发大财的这个

557
00:20:34,000 --> 00:20:35,000
不行

558
00:20:35,000 --> 00:20:37,000
我觉得最近这个节目里面这个哈梗太多了

559
00:20:37,000 --> 00:20:38,000
应该借一项

560
00:20:38,000 --> 00:20:44,000
然后不推的东西反而会慢慢活起来

561
00:20:44,000 --> 00:20:46,000
所以你看好这个吗

562
00:20:46,000 --> 00:20:47,000
这个 Flutter

563
00:20:49,000 --> 00:20:50,000
我也不知道

564
00:20:50,000 --> 00:20:53,000
我现在已经没有再写过移动多样的东西了

565
00:20:53,000 --> 00:20:54,000
所以

566
00:20:54,000 --> 00:20:56,000
你已经放弃作为移动开发者了吗

567
00:20:57,000 --> 00:20:58,000
没有

568
00:20:58,000 --> 00:21:00,000
我还是在看 Swift 相关的东西

569
00:21:00,000 --> 00:21:02,000
放弃 Android 开发者

570
00:21:03,000 --> 00:21:04,000
对

571
00:21:04,000 --> 00:21:05,000
好吧

572
00:21:05,000 --> 00:21:06,000
阵营不同嘛

573
00:21:06,000 --> 00:21:07,000
屁股就另脑了

574
00:21:07,000 --> 00:21:08,000
所以我对他没有意见

575
00:21:08,000 --> 00:21:10,000
只是让大家知道一下

576
00:21:10,000 --> 00:21:11,000
有这么一个东西是吧

577
00:21:11,000 --> 00:21:12,000
然后

578
00:21:12,000 --> 00:21:14,000
是不是坑明年再说

579
00:21:14,000 --> 00:21:15,000
你们可以先跳进去

580
00:21:15,000 --> 00:21:16,000
是不是坑

581
00:21:16,000 --> 00:21:17,000
你跳了告诉我

582
00:21:17,000 --> 00:21:18,000
哈哈哈

583
00:21:18,000 --> 00:21:20,000
这个不错

584
00:21:20,000 --> 00:21:21,000
对

585
00:21:21,000 --> 00:21:24,000
然后这条新闻就是

586
00:21:24,000 --> 00:21:25,000
比较有意思的

587
00:21:25,000 --> 00:21:26,000
一个网站

588
00:21:26,000 --> 00:21:30,000
数字 0.2

589
00:21:30,000 --> 00:21:31,000
数字 3

590
00:21:31,000 --> 00:21:33,000
然后有 15 个数字 0

591
00:21:33,000 --> 00:21:35,000
0.0.0.0.0.0.0.4

592
00:21:35,000 --> 00:21:36,000
对

593
00:21:36,000 --> 00:21:38,000
这个理论上

594
00:21:38,000 --> 00:21:39,000
就是

595
00:21:39,000 --> 00:21:41,000
你看名字其实也大概猜到了吧

596
00:21:41,000 --> 00:21:43,000
这个是讲一个 floating point

597
00:21:43,000 --> 00:21:44,000
福点数的一个网站

598
00:21:44,000 --> 00:21:45,000
对

599
00:21:45,000 --> 00:21:46,000
如果你遇到了这个问题的话

600
00:21:46,000 --> 00:21:47,000
你一定会立刻明白

601
00:21:47,000 --> 00:21:48,000
这到底是

602
00:21:48,000 --> 00:21:49,000
是一个什么梗

603
00:21:49,000 --> 00:21:50,000
但如果你不知道的话

604
00:21:50,000 --> 00:21:51,000
欢迎你

605
00:21:51,000 --> 00:21:52,000
就是

606
00:21:52,000 --> 00:21:54,000
如果你朋友手边有电脑的话

607
00:21:54,000 --> 00:21:55,000
不妨去看一看

608
00:21:55,000 --> 00:21:56,000
不妨去看一看

609
00:21:56,000 --> 00:21:59,000
它是一个讲解福点运算的网站

610
00:21:59,000 --> 00:22:00,000
就是

611
00:22:00,000 --> 00:22:02,000
在有些语言里面

612
00:22:02,000 --> 00:22:04,000
有些非常坑爹的语言里面

613
00:22:04,000 --> 00:22:08,000
如果你去计算 0.1 加 0.2 的话

614
00:22:08,000 --> 00:22:10,000
结果将会是 0.3

615
00:22:10,000 --> 00:22:12,000
跟这 15 个 0

616
00:22:12,000 --> 00:22:13,000
然后 4

617
00:22:13,000 --> 00:22:14,000
对

618
00:22:14,000 --> 00:22:15,000
就是它不是一个

619
00:22:15,000 --> 00:22:17,000
你理想中的

620
00:22:17,000 --> 00:22:19,000
然后究其原因是为什么呢

621
00:22:19,000 --> 00:22:20,000
就是

622
00:22:20,000 --> 00:22:21,000
这篇

623
00:22:21,000 --> 00:22:22,000
这个网站想要告诉你

624
00:22:22,000 --> 00:22:23,000
它来自于一个

625
00:22:24,000 --> 00:22:25,000
这个

626
00:22:25,000 --> 00:22:26,000
对

627
00:22:26,000 --> 00:22:27,000
他们工

628
00:22:27,000 --> 00:22:28,000
这是他们工程界的错

629
00:22:28,000 --> 00:22:30,000
他们工程界定了这么一个

630
00:22:30,000 --> 00:22:32,000
IE 754 标准

631
00:22:32,000 --> 00:22:33,000
然后这个标准里面

632
00:22:33,000 --> 00:22:35,000
规定了计算机应该怎样二进制

633
00:22:35,000 --> 00:22:37,000
来表达福点数

634
00:22:37,000 --> 00:22:39,000
就是表达带小数点数的非语言

635
00:22:39,000 --> 00:22:40,000
数的非语言

636
00:22:40,000 --> 00:22:42,000
然后这个标准

637
00:22:42,000 --> 00:22:44,000
如果你严格去按照它实施的话

638
00:22:44,000 --> 00:22:46,000
那你最终就会得出 0.3

639
00:22:46,000 --> 00:22:47,000
15 个 0

640
00:22:47,000 --> 00:22:48,000
然后一个 4

641
00:22:48,000 --> 00:22:50,000
这种诡异的 0.1 加 0.2 的答

642
00:22:50,000 --> 00:22:51,000
就是一个

643
00:22:51,000 --> 00:22:55,000
0.3 的近四值而非确切值

644
00:22:55,000 --> 00:22:57,000
因为你又没有办法

645
00:22:57,000 --> 00:22:59,000
在二进制的里面表示

646
00:22:59,000 --> 00:23:02,000
就没办法在二进制里面精确表示 0.3

647
00:23:02,000 --> 00:23:03,000
对

648
00:23:03,000 --> 00:23:04,000
在二进制里面

649
00:23:04,000 --> 00:23:06,000
其实这是一个 general 的问题

650
00:23:06,000 --> 00:23:08,000
就是在你采用什么样的数字

651
00:23:08,000 --> 00:23:10,000
就会产生什么样的问题

652
00:23:10,000 --> 00:23:12,000
比如说如果我们采用 11 进制的话

653
00:23:12,000 --> 00:23:16,000
那 1 分之 1 就是一个可以被表达出来的

654
00:23:16,000 --> 00:23:17,000
等一下

655
00:23:17,000 --> 00:23:18,000
如果你采用 11 进制

656
00:23:18,000 --> 00:23:21,000
只能表达 1 分之 1 精确的吧

657
00:23:22,000 --> 00:23:23,000
对

658
00:23:23,000 --> 00:23:24,000
如果你用 11 进制的话

659
00:23:24,000 --> 00:23:25,000
你就可以表达 1 分之 1

660
00:23:25,000 --> 00:23:27,000
1 分之 2 之类的这种数字

661
00:23:27,000 --> 00:23:28,000
非常精确的吧

662
00:23:28,000 --> 00:23:29,000
0.102

663
00:23:29,000 --> 00:23:30,000
但如果你用 10 进制的话

664
00:23:30,000 --> 00:23:33,000
1 分之 1 和 1 分之 2 就是一个无限循环小数

665
00:23:33,000 --> 00:23:34,000
对吧

666
00:23:34,000 --> 00:23:35,000
对对对

667
00:23:35,000 --> 00:23:37,000
你用 11 分之 2 没有办法表达

668
00:23:37,000 --> 00:23:38,000
为什么不能

669
00:23:38,000 --> 00:23:39,000
0.2 不就是 11 分之 2 吗

670
00:23:39,000 --> 00:23:41,000
0.1 是 10 进制的

671
00:23:41,000 --> 00:23:44,000
10 进制的 0.1 是 10 分之 1

672
00:23:44,000 --> 00:23:47,000
我明白你

673
00:23:47,000 --> 00:23:48,000
0.1 的意思

674
00:23:48,000 --> 00:23:53,000
0.11 进制下的 0.1 不就是 10 进制下面的 11 分之 1 吗

675
00:23:53,000 --> 00:23:55,000
对没错

676
00:23:55,000 --> 00:23:56,000
对没错

677
00:23:56,000 --> 00:23:57,000
不对对对对对

678
00:23:57,000 --> 00:23:58,000
理解了你说的是这个意思

679
00:23:58,000 --> 00:23:59,000
OK

680
00:23:59,000 --> 00:24:00,000
没错

681
00:24:00,000 --> 00:24:01,000
然后对

682
00:24:01,000 --> 00:24:08,000
所以在 2 进制下面就有很多 10 进制的数字是没有办法表达为一个 2 进制下面的整数的

683
00:24:08,000 --> 00:24:11,000
就整的这个分数

684
00:24:12,000 --> 00:24:13,000
听得有点 raw

685
00:24:13,000 --> 00:24:14,000
但 you get point

686
00:24:14,000 --> 00:24:16,000
就 0.1 可以表达 0.5

687
00:24:16,000 --> 00:24:18,000
但是 0.6 就没办法表达了

688
00:24:18,000 --> 00:24:19,000
就大概这个意思

689
00:24:19,000 --> 00:24:22,000
对

690
00:24:22,000 --> 00:24:25,000
对所以在实际的一些编程语言里面怎么处理

691
00:24:25,000 --> 00:24:31,000
然后这个网页上就给了一个相对来说比较详细的例表会出现什么样的状况

692
00:24:32,000 --> 00:24:33,000
对

693
00:24:33,000 --> 00:24:35,000
然后就你可以使用什么样的

694
00:24:35,000 --> 00:24:39,000
你在遇到什么样的语言的时候可能会得到什么样的结果

695
00:24:39,000 --> 00:24:41,000
以及你怎样解决这些问题

696
00:24:41,000 --> 00:24:45,000
比如说有些语言里面像 cshop 之类的都有什么 decimal cool

697
00:24:45,000 --> 00:24:50,000
就是专门用来解决这个任意精度的实际制数的问题

698
00:24:50,000 --> 00:24:59,000
你可能会问为什么不把这个任意实际制精度的数字做成一个默认的数字的实现

699
00:24:59,000 --> 00:25:00,000
有些语言是这样的

700
00:25:00,000 --> 00:25:01,000
但另外一些语言不是这样的

701
00:25:01,000 --> 00:25:04,000
因为根据使用场景这个 cool 可能会非常的慢

702
00:25:04,000 --> 00:25:07,000
而有些时候你是不需要这个购买

703
00:25:07,000 --> 00:25:20,000
就一般是这样这个金融的系统里面要算设计到钱的都会有那种任意精度的实际制的一个包去处理这些钱的数目对吧

704
00:25:20,000 --> 00:25:21,000
没错

705
00:25:21,000 --> 00:25:22,000
没错

706
00:25:22,000 --> 00:25:28,000
但然后其他的一些就为了追求效率就是用这个浮点型来表示

707
00:25:28,000 --> 00:25:32,000
然后浮点型在现在的计算机上一般有两种长度

708
00:25:32,000 --> 00:25:35,000
一种是叫做 float 是 32 位长的

709
00:25:35,000 --> 00:25:38,000
然后另外一个是叫做 double 是 64 位长的

710
00:25:38,000 --> 00:25:39,000
精度的话

711
00:25:39,000 --> 00:25:41,000
double 应该有 53 位的精度

712
00:25:41,000 --> 00:25:43,000
53 个 bit 的精度吧

713
00:25:43,000 --> 00:25:44,000
对

714
00:25:44,000 --> 00:25:50,000
53 个 digit 的精度应该是

715
00:25:50,000 --> 00:25:53,000
你是说小数点后面的

716
00:25:53,000 --> 00:25:54,000
不管是小数点前

717
00:25:54,000 --> 00:25:57,000
因为那个浮点数那个小数点是可以浮动的

718
00:25:57,000 --> 00:25:59,000
它精度就是代表它有效数字那一部分

719
00:25:59,000 --> 00:26:00,000
对

720
00:26:00,000 --> 00:26:01,000
没错

721
00:26:01,000 --> 00:26:02,000
是这样

722
00:26:02,000 --> 00:26:05,000
然后 float 的话应该只有好像只有多少

723
00:26:05,000 --> 00:26:07,000
28 个

724
00:26:07,000 --> 00:26:08,000
728 位

725
00:26:08,000 --> 00:26:09,000
27 吧

726
00:26:09,000 --> 00:26:12,000
我想想一位的符号

727
00:26:12,000 --> 00:26:14,000
它有 27 个 bit

728
00:26:14,000 --> 00:26:17,000
但是它是实际的表示成那个叫做

729
00:26:17,000 --> 00:26:18,000
对对你说说 range

730
00:26:18,000 --> 00:26:22,000
对它的那个它表达出的那个有效的数字

731
00:26:22,000 --> 00:26:24,000
好像只有 8 位还是 9 位

732
00:26:24,000 --> 00:26:25,000
就 8 个有效数字

733
00:26:25,000 --> 00:26:27,000
还是 9 个有效数字很小的一个数

734
00:26:27,000 --> 00:26:28,000
反正对对对

735
00:26:28,000 --> 00:26:30,000
然后在实际语言之中就会

736
00:26:30,000 --> 00:26:32,000
就这个跟编程其实会有点关系

737
00:26:32,000 --> 00:26:37,000
就是说如果你要做一个这个浮点数的加减乘除的话

738
00:26:37,000 --> 00:26:38,000
你要特别小心这一点

739
00:26:38,000 --> 00:26:41,000
特别是你用 float 这种 32 位的精度的

740
00:26:41,000 --> 00:26:44,000
32 位这种这种窄的浮点数的时候

741
00:26:44,000 --> 00:26:45,000
很容易用的

742
00:26:45,000 --> 00:26:46,000
就发现你累

743
00:26:46,000 --> 00:26:47,000
比如说你做一个累加对吧

744
00:26:47,000 --> 00:26:49,000
你加完之后发现

745
00:26:49,000 --> 00:26:51,000
这个跟你预想的这个出入怎么那么大

746
00:26:51,000 --> 00:26:54,000
就是因为浮点数这个精度在作怪

747
00:26:54,000 --> 00:26:55,000
就你设想一下

748
00:26:55,000 --> 00:26:57,000
你加一个特别大的一个数字

749
00:26:57,000 --> 00:26:59,000
加上一个特别小的一个数字

750
00:26:59,000 --> 00:27:00,000
两加起来

751
00:27:00,000 --> 00:27:02,000
因为精度的问题可能直接就无效了

752
00:27:02,000 --> 00:27:05,000
但是如果说你有很多很多特别小的数字

753
00:27:05,000 --> 00:27:06,000
累加起来

754
00:27:06,000 --> 00:27:08,000
你再加了一个特别大的数字里面去

755
00:27:08,000 --> 00:27:12,000
你这个这个物质这个这个精度的牺牲导致的误差

756
00:27:12,000 --> 00:27:14,000
会当然是会主要累积的嘛

757
00:27:14,000 --> 00:27:15,000
对

758
00:27:15,000 --> 00:27:18,000
所以这个面是有很多坑爹的事情

759
00:27:18,000 --> 00:27:19,000
对

760
00:27:19,000 --> 00:27:20,000
所以有一个 rule of thumb

761
00:27:20,000 --> 00:27:22,000
就是如果能够不使用是浮点数的话

762
00:27:22,000 --> 00:27:24,000
尽量不要使用浮点数

763
00:27:24,000 --> 00:27:26,000
就是在早期

764
00:27:26,000 --> 00:27:28,000
早期学员程的时候应该学到了一点

765
00:27:28,000 --> 00:27:30,000
刚才说除了这个解决方案

766
00:27:30,000 --> 00:27:32,000
除了说用一个这个叫做 dicimal

767
00:27:32,000 --> 00:27:38,000
就是实际制的这个无限就是无限精度的一个酷去表达

768
00:27:38,000 --> 00:27:40,000
就是一个任意精度的数字

769
00:27:40,000 --> 00:27:42,000
还有一个方法就是用一个叫做 rational

770
00:27:42,000 --> 00:27:44,000
就是分数的形式或者 fraction

771
00:27:44,000 --> 00:27:46,000
它这个原理就比较简单了

772
00:27:46,000 --> 00:27:49,000
它说我没有办法通过这个

773
00:27:49,000 --> 00:27:51,000
我没有办法除尽

774
00:27:51,000 --> 00:27:52,000
那我干脆不除好了

775
00:27:52,000 --> 00:27:53,000
直接就按分子分母

776
00:27:53,000 --> 00:27:55,000
大家还记得小学学那个吗

777
00:27:55,000 --> 00:27:57,000
怎么去两个分数相乘的时候

778
00:27:57,000 --> 00:27:58,000
分数相乘的时候那个方法

779
00:27:58,000 --> 00:28:00,000
就是在程序上实现同样的原理

780
00:28:00,000 --> 00:28:02,000
最终得出来的结果还是一个分数

781
00:28:02,000 --> 00:28:04,000
就是几分之多少分之多少

782
00:28:04,000 --> 00:28:07,000
当然那个多少和分子和分母都可能会比较大

783
00:28:07,000 --> 00:28:11,000
但你可以通过消减什么公因数公约数的方法

784
00:28:11,000 --> 00:28:14,000
去把它尽量说成一个最大公约数

785
00:28:14,000 --> 00:28:18,000
我已经至少两次一听到你在 IT 公里面

786
00:28:18,000 --> 00:28:20,000
试出说什么最大公约数

787
00:28:20,000 --> 00:28:22,000
我每次都记不住到底是哪个是哪个

788
00:28:22,000 --> 00:28:26,000
对应该是最大公约数和最大公约数

789
00:28:26,000 --> 00:28:28,000
最小公倍数

790
00:28:28,000 --> 00:28:29,000
最小公倍数

791
00:28:29,000 --> 00:28:30,000
对对对对差不多

792
00:28:30,000 --> 00:28:32,000
然后具体是哪个我也忘了

793
00:28:32,000 --> 00:28:33,000
这些像吧

794
00:28:33,000 --> 00:28:35,000
比较有意思的是

795
00:28:35,000 --> 00:28:37,000
在有些就是我们常见的语言里面

796
00:28:37,000 --> 00:28:39,000
它实现还有点奇怪

797
00:28:39,000 --> 00:28:40,000
比如说这个

798
00:28:40,000 --> 00:28:43,000
这个这个

799
00:28:43,000 --> 00:28:44,000
C 可能还比较简

800
00:28:44,000 --> 00:28:46,000
为什么 PHP 里面

801
00:28:46,000 --> 00:28:49,000
0.1 加 0.2 出来是 0.3 呢

802
00:28:49,000 --> 00:28:52,000
然后发现 PHP 这门世界上最强大的语言

803
00:28:52,000 --> 00:28:57,000
它偷偷的把这个 0.315 个 04

804
00:28:57,000 --> 00:29:01,000
这么一个辅典数转化成了一个字符串

805
00:29:01,000 --> 00:29:03,000
然后把它变为 0.3

806
00:29:05,000 --> 00:29:06,000
太强大了

807
00:29:06,000 --> 00:29:08,000
然后我不知道这个

808
00:29:08,000 --> 00:29:09,000
MySQL 里面这个是怎么做的

809
00:29:09,000 --> 00:29:10,000
它这个原理是什么

810
00:29:10,000 --> 00:29:13,000
应该还是用的这种就是折中的办法吧

811
00:29:13,000 --> 00:29:14,000
就是四手

812
00:29:14,000 --> 00:29:15,000
不是四手五入的方法

813
00:29:16,000 --> 00:29:18,000
要看 SQL 是怎么实现的

814
00:29:18,000 --> 00:29:19,000
因为 SQL

815
00:29:20,000 --> 00:29:21,000
SQL

816
00:29:21,000 --> 00:29:23,000
SQL 规范肯定是没有定义

817
00:29:23,000 --> 00:29:24,000
SQL 规范没有说

818
00:29:24,000 --> 00:29:26,000
但是 MySQL 实现了 0.3

819
00:29:27,000 --> 00:29:28,000
对

820
00:29:28,000 --> 00:29:29,000
是个好问题

821
00:29:29,000 --> 00:29:30,000
然后在

822
00:29:31,000 --> 00:29:33,000
Python 里面有点意思

823
00:29:33,000 --> 00:29:34,000
Python 里面是

824
00:29:34,000 --> 00:29:35,000
如果你把它打印出来

825
00:29:35,000 --> 00:29:37,000
它是一个 0.3

826
00:29:37,000 --> 00:29:38,000
对吧

827
00:29:38,000 --> 00:29:39,000
对

828
00:29:39,000 --> 00:29:40,000
但是实际上那个数值

829
00:29:40,000 --> 00:29:41,000
应该还是 0.3

830
00:29:41,000 --> 00:29:42,000
004 的

831
00:29:42,000 --> 00:29:44,000
所以会有一个算法去告诉说

832
00:29:44,000 --> 00:29:46,000
你要打印的这个值

833
00:29:46,000 --> 00:29:50,000
它是一个某一个更短的

834
00:29:50,000 --> 00:29:53,000
小数的近视值

835
00:29:53,000 --> 00:29:55,000
然后它会默认去把它近视值

836
00:29:55,000 --> 00:29:56,000
这个 Python 的方法也是用

837
00:29:56,000 --> 00:29:58,000
跟 PHP 一样的

838
00:29:58,000 --> 00:30:00,000
就是通过转换成字符串的形式

839
00:30:00,000 --> 00:30:01,000
去做这个事

840
00:30:01,000 --> 00:30:02,000
对

841
00:30:02,000 --> 00:30:06,000
然后在 Python 3 里面这一点被纠正

842
00:30:06,000 --> 00:30:08,000
不要做这些莫名其妙优化

843
00:30:08,000 --> 00:30:09,000
因为

844
00:30:09,000 --> 00:30:11,000
其实如果一个用户看到的值

845
00:30:11,000 --> 00:30:13,000
和它的实际的值不一样的话

846
00:30:13,000 --> 00:30:14,000
这是有可能出麻烦的

847
00:30:14,000 --> 00:30:15,000
对

848
00:30:15,000 --> 00:30:16,000
所以在实际使用中

849
00:30:16,000 --> 00:30:18,000
比如说你们做一些什么

850
00:30:18,000 --> 00:30:19,000
举个简单例子

851
00:30:19,000 --> 00:30:21,000
你要做一个工业的一个什么测量

852
00:30:21,000 --> 00:30:23,000
它读出来的这个数值

853
00:30:23,000 --> 00:30:27,000
它可能是一个浮点数的时候

854
00:30:27,000 --> 00:30:29,000
他们是怎么去判断

855
00:30:29,000 --> 00:30:34,000
就是比如说你要判断这个值是否是大于或者小于某个值的时候

856
00:30:34,000 --> 00:30:37,000
是要算上一个在合适的精度范围内吗

857
00:30:37,000 --> 00:30:38,000
还是怎么样

858
00:30:38,000 --> 00:30:43,000
工业上面一般会有一个指定的精确范围

859
00:30:43,000 --> 00:30:46,000
但不同工业不一样

860
00:30:46,000 --> 00:30:48,000
但不过大部分都是小数点之后三位

861
00:30:48,000 --> 00:30:54,000
就是说你在编程的时候你要判断两个浮点数的大小的时候

862
00:30:54,000 --> 00:30:55,000
你怎么办

863
00:30:55,000 --> 00:30:56,000
是

864
00:30:56,000 --> 00:31:00,000
你说要判断两个浮点数的相等于否

865
00:31:00,000 --> 00:31:02,000
还是大小不是很好判断

866
00:31:02,000 --> 00:31:03,000
就

867
00:31:03,000 --> 00:31:04,000
就其实

868
00:31:04,000 --> 00:31:07,000
其实我觉得用判断两个浮点数是否相等这件事情

869
00:31:07,000 --> 00:31:11,000
但是判断这件事情本身就是跟你的初衷是有这个常识是有相悖的

870
00:31:11,000 --> 00:31:14,000
除非你特别理解这个 IE 754 到底怎么一回事

871
00:31:14,000 --> 00:31:15,000
对

872
00:31:15,000 --> 00:31:16,000
对

873
00:31:16,000 --> 00:31:19,000
在计算机的世界里面浮点数是非常棘手的一个东西

874
00:31:19,000 --> 00:31:20,000
反正对

875
00:31:20,000 --> 00:31:22,000
所以一般的话应该是两个数

876
00:31:22,000 --> 00:31:24,000
要判断两个数是否相近

877
00:31:24,000 --> 00:31:25,000
应该是用 A-B

878
00:31:25,000 --> 00:31:28,000
然后算它的差值是不是在某一个

879
00:31:28,000 --> 00:31:30,000
然后看其差值是不是在一个

880
00:31:30,000 --> 00:31:31,000
对

881
00:31:31,000 --> 00:31:34,000
就有点像工业里面造两零件

882
00:31:34,000 --> 00:31:36,000
然后看两零件是不是合乎要求

883
00:31:36,000 --> 00:31:38,000
那就要看它的偏差是不是

884
00:31:38,000 --> 00:31:41,000
在一个可接受的范围之内

885
00:31:41,000 --> 00:31:42,000
范围内的

886
00:31:42,000 --> 00:31:43,000
对

887
00:31:43,000 --> 00:31:44,000
这个还是蛮坑的反正

888
00:31:44,000 --> 00:31:46,000
万万的数量

889
00:31:46,000 --> 00:31:49,000
你看这就是计算机科学和计算机工程群的差

890
00:31:49,000 --> 00:31:50,000
工程的区

891
00:31:50,000 --> 00:31:53,000
OK

892
00:31:53,000 --> 00:31:55,000
in theory there's no difference

893
00:31:55,000 --> 00:31:56,000
in practical

894
00:31:56,000 --> 00:31:58,000
我想那句话怎么说

895
00:31:58,000 --> 00:32:01,000
in theory there's no difference between theory and practical

896
00:32:01,000 --> 00:32:03,000
in practical there is

897
00:32:03,000 --> 00:32:04,000
不是不是

898
00:32:04,000 --> 00:32:08,000
叫做 in theory there's no difference between theory and practice

899
00:32:08,000 --> 00:32:09,000
practice

900
00:32:09,000 --> 00:32:10,000
practice ok

901
00:32:10,000 --> 00:32:11,000
in practice there is

902
00:32:11,000 --> 00:32:18,000
那今天的主题就是比较 in practice 的一个东西

903
00:32:18,000 --> 00:32:22,000
主题是命令行

904
00:32:22,000 --> 00:32:23,000
嗯哼

905
00:32:23,000 --> 00:32:24,000
对

906
00:32:24,000 --> 00:32:26,000
这也是这是我们上期提到的吗

907
00:32:26,000 --> 00:32:27,000
还是上上期提到的一个主题

908
00:32:27,000 --> 00:32:29,000
反正某一期你承诺过

909
00:32:29,000 --> 00:32:30,000
对你就要讲

910
00:32:30,000 --> 00:32:31,000
对

911
00:32:31,000 --> 00:32:35,000
然后其实这个主题也的确是挺值得说的

912
00:32:35,000 --> 00:32:38,000
因为尤其是对于初学者来说

913
00:32:38,000 --> 00:32:44,000
或者是对于正在朝这条路上越走越远的人来说

914
00:32:44,000 --> 00:32:49,000
命令好像是一个绕不开的话题

915
00:32:49,000 --> 00:32:50,000
就基本上

916
00:32:50,000 --> 00:32:54,000
其实我觉得这个我要先问一个问题

917
00:32:54,000 --> 00:33:01,000
现在很多这种新就是新人们好像他们学电脑都不用都直接开过命令行了

918
00:33:01,000 --> 00:33:04,000
或者很多用 windows 的人都基本不用命令行了

919
00:33:04,000 --> 00:33:07,000
但是我觉得将来还是会早晚有一天你会撞上

920
00:33:07,000 --> 00:33:11,000
所以你觉得他们还是会把这课给补上是吧

921
00:33:11,000 --> 00:33:12,000
对

922
00:33:12,000 --> 00:33:15,000
其实这也是一个值得讨论的话题

923
00:33:15,000 --> 00:33:18,000
就是在我们小时候

924
00:33:18,000 --> 00:33:28,000
在大家就至少在 windows 或者 dots 微软的操作系统用户的早期的同年记忆里面

925
00:33:28,000 --> 00:33:32,000
计算机开机是不会自动进入图形界面的同学们

926
00:33:32,000 --> 00:33:40,000
就是像你们这些饱受溺爱的 Mac 用户一开机就可以看到一个闪闪发光的大苹果

927
00:33:40,000 --> 00:33:42,000
然后一进去就有鼠标用

928
00:33:42,000 --> 00:33:46,000
这种事情在至少 90 年代的中国是不可想象的

929
00:33:46,000 --> 00:33:48,000
对

930
00:33:48,000 --> 00:33:49,000
在 windows

931
00:33:49,000 --> 00:33:51,000
开机先写一个 bios screen 对吧

932
00:33:51,000 --> 00:33:52,000
对

933
00:33:52,000 --> 00:33:53,000
然后进到那个 cdots 里面

934
00:33:53,000 --> 00:33:55,000
你可以听到那个熟悉的磁盘字简的声音

935
00:33:55,000 --> 00:33:59,000
对对我们应该把磁盘字简的声音拿来当我们的开头取用

936
00:33:59,000 --> 00:34:03,000
对那个怎么形成一个开头取用

937
00:34:03,000 --> 00:34:07,000
就像那个 atp 一样

938
00:34:07,000 --> 00:34:09,000
他们用那个调水淋漆的声音

939
00:34:09,000 --> 00:34:14,000
我们可以用磁盘字简的声音来当开头取用

940
00:34:14,000 --> 00:34:15,000
好吧

941
00:34:15,000 --> 00:34:22,000
终于找到一个符合本节目主旨的这么一个声音的特质了

942
00:34:22,000 --> 00:34:23,000
我是在那个辐射寺里面

943
00:34:23,000 --> 00:34:26,000
因为辐射寺里面经常需要去黑一些那个 terminal

944
00:34:26,000 --> 00:34:28,000
然后那个 terminal 有个特别的声音

945
00:34:28,000 --> 00:34:30,000
我是听那个声音的时候想到

946
00:34:30,000 --> 00:34:32,000
ok

947
00:34:32,000 --> 00:34:34,000
然后对

948
00:34:34,000 --> 00:34:39,000
然后我们在 90 年代的时候需要开机看到一个 bios 字简

949
00:34:39,000 --> 00:34:41,000
然后屏幕清零

950
00:34:41,000 --> 00:34:44,000
左上角出现一个闪烁的 c 冒号

951
00:34:44,000 --> 00:34:46,000
反斜杠大于号

952
00:34:46,000 --> 00:34:47,000
然后一个闪烁的目标

953
00:34:47,000 --> 00:34:49,000
等一下 90 年代你就看到 c 了吗

954
00:34:49,000 --> 00:34:50,000
应该是 a 或者是 b 吧

955
00:34:50,000 --> 00:34:52,000
对

956
00:34:52,000 --> 00:34:54,000
a 冒号

957
00:34:54,000 --> 00:34:55,000
反斜杠大于号

958
00:34:55,000 --> 00:34:56,000
大于号

959
00:34:56,000 --> 00:34:57,000
没错

960
00:34:57,000 --> 00:34:59,000
i see

961
00:34:59,000 --> 00:35:01,000
我没有那么没有那么 hard call

962
00:35:01,000 --> 00:35:04,000
我觉得我小时候就在我的那个

963
00:35:04,000 --> 00:35:06,000
你一来就有磁盘

964
00:35:06,000 --> 00:35:07,000
就硬盘

965
00:35:07,000 --> 00:35:09,000
中华学习机之后的电脑

966
00:35:09,000 --> 00:35:11,000
其实我遇到的已经大部分都是带磁盘的

967
00:35:12,000 --> 00:35:13,000
想想

968
00:35:13,000 --> 00:35:14,000
对

969
00:35:14,000 --> 00:35:17,000
你没用过那种叫做无盘工作站吗

970
00:35:17,000 --> 00:35:18,000
无盘工作站是

971
00:35:18,000 --> 00:35:19,000
就那个时候磁盘很贵嘛

972
00:35:19,000 --> 00:35:20,000
联网了之后才有的

973
00:35:20,000 --> 00:35:22,000
不

974
00:35:22,000 --> 00:35:25,000
就我知道就是有些那种以前那种叫做什么来的

975
00:35:25,000 --> 00:35:26,000
叫机房吧

976
00:35:26,000 --> 00:35:27,000
对

977
00:35:27,000 --> 00:35:29,000
它不是每台电脑都有磁盘的

978
00:35:29,000 --> 00:35:30,000
我知道

979
00:35:30,000 --> 00:35:32,000
但我的意思是我第一次接触计算机

980
00:35:32,000 --> 00:35:34,000
就接触 IBM PC 兼容机

981
00:35:34,000 --> 00:35:37,000
应该是在我爸单位的那个一个一个秘书室类似的这么一个地方

982
00:35:37,000 --> 00:35:38,000
然后那个那个那个那个

983
00:35:38,000 --> 00:35:39,000
那个那个那个那个那个那个电脑不仅有磁盘还有还有游戏的上面

984
00:35:39,000 --> 00:35:55,000
所以我第一次接触到 C 冒号反斜杠应大约号应该是在那天的那

985
00:35:55,000 --> 00:35:57,000
那你那个还你运气还是蛮好的

986
00:35:57,000 --> 00:36:02,000
对在此之前我只能在那个中华学习机上用一个录音带的那个读取的东西

987
00:36:02,000 --> 00:36:05,000
但是中华学习机反正没有那个就是 Apple II 嘛

988
00:36:05,000 --> 00:36:07,000
反正没有磁盘的感觉

989
00:36:07,000 --> 00:36:10,000
所以就没有那个盘幅的感觉

990
00:36:10,000 --> 00:36:11,000
OK

991
00:36:11,000 --> 00:36:15,000
所以进到 C 之后要怎么进图形机面

992
00:36:15,000 --> 00:36:16,000
还差个 WIN 吧是不是

993
00:36:16,000 --> 00:36:17,000
对你要打 WIN 回车

994
00:36:17,000 --> 00:36:19,000
然后才可以进 Windows

995
00:36:19,000 --> 00:36:21,000
是什么 Windows 3.1

996
00:36:21,000 --> 00:36:24,000
Windows 3.2

997
00:36:24,000 --> 00:36:26,000
Windows 3.2 是简体中文版的

998
00:36:26,000 --> 00:36:27,000
Windows 3.1 只有

999
00:36:27,000 --> 00:36:28,000
对在世界其他一般是

1000
00:36:28,000 --> 00:36:30,000
这个版本特别短命

1001
00:36:30,000 --> 00:36:31,000
对

1002
00:36:31,000 --> 00:36:33,000
Windows 3.1 或者 Windows 3.2 是那个

1003
00:36:33,000 --> 00:36:36,000
Windows 95 之前世界上最流行的 Windows 版本

1004
00:36:36,000 --> 00:36:38,000
嗯

1005
00:36:38,000 --> 00:36:39,000
嗯

1006
00:36:39,000 --> 00:36:42,000
这个施法兴和演过一部电影叫什么来着

1007
00:36:42,000 --> 00:36:44,000
谎言语

1008
00:36:44,000 --> 00:36:45,000
真实谎言

1009
00:36:45,000 --> 00:36:46,000
真实的谎言里面

1010
00:36:46,000 --> 00:36:48,000
那个呃

1011
00:36:48,000 --> 00:36:49,000
它潜入一个

1012
00:36:49,000 --> 00:36:52,000
反正是阿拉伯语的这么一个机构里面

1013
00:36:52,000 --> 00:36:57,000
然后那个 Windows 3.2 的上面显示的是阿拉伯语的 Windows

1014
00:36:57,000 --> 00:36:59,000
我挺惊讶的

1015
00:36:59,000 --> 00:37:00,000
对印象很深刻

1016
00:37:00,000 --> 00:37:04,000
所以在那个时代是开机不默认进图形界面的

1017
00:37:04,000 --> 00:37:05,000
I don't know

1018
00:37:05,000 --> 00:37:06,000
所以那是一个非常

1019
00:37:06,000 --> 00:37:07,000
对

1020
00:37:07,000 --> 00:37:08,000
哎

1021
00:37:08,000 --> 00:37:10,000
那个记得我还记得有一个就是当时就是

1022
00:37:10,000 --> 00:37:13,000
就是图形界面还没有完全普及

1023
00:37:13,000 --> 00:37:14,000
或者说有些机器太古老

1024
00:37:14,000 --> 00:37:16,000
它跑那个图形界面会比较慢嘛

1025
00:37:16,000 --> 00:37:20,000
但是还用那个叫做命令行的文件管理软件

1026
00:37:20,000 --> 00:37:22,000
叫什么来的

1027
00:37:22,000 --> 00:37:23,000
什么 commander

1028
00:37:23,000 --> 00:37:24,000
totalcommander

1029
00:37:24,000 --> 00:37:25,000
totalcommander

1030
00:37:25,000 --> 00:37:26,000
对

1031
00:37:26,000 --> 00:37:27,000
pc toolstotalcommander

1032
00:37:27,000 --> 00:37:31,000
还有好多东西都是命令行下面的一个命令行界面

1033
00:37:31,000 --> 00:37:32,000
就是命令叫什么

1034
00:37:32,000 --> 00:37:34,000
有一个专门名字来形容这种东西

1035
00:37:34,000 --> 00:37:37,000
CEY 就是 command line user interface

1036
00:37:37,000 --> 00:37:39,000
就是它它虽然不是图形界面的

1037
00:37:39,000 --> 00:37:43,000
但是它是用各种各样的符号来组成一个可以点的窗口

1038
00:37:43,000 --> 00:37:45,000
可以像

1039
00:37:45,000 --> 00:37:46,000
有鼠标可以用

1040
00:37:46,000 --> 00:37:47,000
对

1041
00:37:47,000 --> 00:37:50,000
然后鼠标就是一个一大块字符

1042
00:37:50,000 --> 00:37:51,000
一个字符

1043
00:37:51,000 --> 00:37:52,000
就是那个

1044
00:37:52,000 --> 00:37:53,000
就

1045
00:37:53,000 --> 00:37:54,000
嗯

1046
00:37:54,000 --> 00:37:56,000
它一个是个 80 乘以 24 个字符的一个窗口嘛

1047
00:37:56,000 --> 00:37:57,000
对

1048
00:37:57,000 --> 00:37:59,000
然后鼠标就像站一格

1049
00:37:59,000 --> 00:38:00,000
一个字符的位置

1050
00:38:00,000 --> 00:38:01,000
对

1051
00:38:01,000 --> 00:38:02,000
然后挪动鼠标的时候

1052
00:38:02,000 --> 00:38:04,000
屏幕上就有一个大黑块来挪动

1053
00:38:05,000 --> 00:38:08,000
其实在好多 Linux 安装界面里面

1054
00:38:08,000 --> 00:38:10,000
还是可以看到这种东西

1055
00:38:10,000 --> 00:38:11,000
appetitudes

1056
00:38:11,000 --> 00:38:12,000
嗯

1057
00:38:13,000 --> 00:38:14,000
然后

1058
00:38:14,000 --> 00:38:15,000
其实

1059
00:38:15,000 --> 00:38:17,000
Linux 上面的这种工具

1060
00:38:17,000 --> 00:38:18,000
一般

1061
00:38:18,000 --> 00:38:19,000
很多是基于

1062
00:38:19,000 --> 00:38:20,000
叫 Nkers

1063
00:38:20,000 --> 00:38:21,000
Nkers

1064
00:38:21,000 --> 00:38:22,000
Nkers

1065
00:38:22,000 --> 00:38:23,000
Nkers 这个包来写的嘛

1066
00:38:23,000 --> 00:38:24,000
然后还挺长

1067
00:38:24,000 --> 00:38:25,000
就

1068
00:38:25,000 --> 00:38:26,000
还算长用吧

1069
00:38:26,000 --> 00:38:27,000
至少

1070
00:38:27,000 --> 00:38:28,000
嗯

1071
00:38:28,000 --> 00:38:31,000
我们在节目最后会介绍一些类似这种工具

1072
00:38:31,000 --> 00:38:33,000
那这里就先放一放

1073
00:38:33,000 --> 00:38:34,000
对扯远了

1074
00:38:34,000 --> 00:38:36,000
反正在那个时候你可能

1075
00:38:36,000 --> 00:38:40,000
呃你打开电脑会会你有一个明确的想法说今天我要干什么

1076
00:38:40,000 --> 00:38:48,000
然后根据你要干什么你要决定说是在这个 DOS 的命令行呃提命提示服务下面打入打比如说

1077
00:38:48,000 --> 00:38:50,000
嗯

1078
00:38:50,000 --> 00:38:51,000
PAL

1079
00:38:51,000 --> 00:38:52,000
或者是

1080
00:38:52,000 --> 00:38:54,000
CNC

1081
00:38:54,000 --> 00:38:56,000
还是打 WIN

1082
00:38:56,000 --> 00:38:59,000
因为如果你要玩游戏的话你可能不需要那个图形界面的操绣

1083
00:38:59,000 --> 00:39:02,000
你只需要打入那个游戏的名字

1084
00:39:02,000 --> 00:39:03,000
然后游戏就会独占整个台计算机

1085
00:39:03,000 --> 00:39:08,000
然后把所有大富翁的那个启动名是不是 rich 啊我记得

1086
00:39:08,000 --> 00:39:09,000
我记得

1087
00:39:09,000 --> 00:39:10,000
对对对没错

1088
00:39:10,000 --> 00:39:12,000
还有还有三国啊

1089
00:39:12,000 --> 00:39:14,000
那个什么战功全英传啊之类的

1090
00:39:14,000 --> 00:39:18,000
你都需要在那个盘服下面输入这个

1091
00:39:18,000 --> 00:39:20,000
金庸群侠传还是这样吧

1092
00:39:20,000 --> 00:39:22,000
对金庸群侠传也是

1093
00:39:22,000 --> 00:39:25,000
就在那个时候很多人都记

1094
00:39:25,000 --> 00:39:27,000
先见先见不要忘了这个

1095
00:39:27,000 --> 00:39:28,000
PAL 我刚才说完

1096
00:39:28,000 --> 00:39:29,000
嗯

1097
00:39:29,000 --> 00:39:30,000
然后那个

1098
00:39:30,000 --> 00:39:32,000
PAL 是什么还是

1099
00:39:32,000 --> 00:39:34,000
PALADIN 就是那个

1100
00:39:34,000 --> 00:39:38,000
这个游戏的英文名很奇怪的叫做 PALADIN 之类的

1101
00:39:38,000 --> 00:39:40,000
就是十字军的那个词

1102
00:39:40,000 --> 00:39:41,000
还是我记错了

1103
00:39:41,000 --> 00:39:42,000
为什么会这样

1104
00:39:42,000 --> 00:39:43,000
对我也不知道

1105
00:39:43,000 --> 00:39:44,000
我觉得很奇怪

1106
00:39:44,000 --> 00:39:47,000
然后反正在那个时代后很多人不学电脑

1107
00:39:47,000 --> 00:39:49,000
或者说没有那么 tech savvy

1108
00:39:49,000 --> 00:39:52,000
乃至于很多小孩子可能打开电脑

1109
00:39:52,000 --> 00:39:53,000
唯一会做的一件事情

1110
00:39:53,000 --> 00:39:56,000
就是在那个命令后面输入这个游戏的名字

1111
00:39:56,000 --> 00:39:57,000
然后按回车

1112
00:39:57,000 --> 00:40:00,000
这就已经算是懂电脑的表象

1113
00:40:00,000 --> 00:40:03,000
对这大概就是相当于在 Windows 下面

1114
00:40:03,000 --> 00:40:04,000
你会按开始菜单

1115
00:40:04,000 --> 00:40:05,000
就是这种感觉

1116
00:40:05,000 --> 00:40:07,000
对

1117
00:40:07,000 --> 00:40:14,000
后来 1995 年有了 Windows 95 整个世界才进入一个开机默认

1118
00:40:14,000 --> 00:40:16,000
进图形界面的时代

1119
00:40:16,000 --> 00:40:17,000
当然苹果用户另外

1120
00:40:17,000 --> 00:40:21,000
但我们至少我们小时候都不是苹果

1121
00:40:21,000 --> 00:40:23,000
你知道

1122
00:40:23,000 --> 00:40:24,000
你是吧

1123
00:40:24,000 --> 00:40:26,000
你不是从苹果机开始起家的

1124
00:40:26,000 --> 00:40:27,000
但是

1125
00:40:27,000 --> 00:40:30,000
但是 Apple II 开机也不是进图形界面的样

1126
00:40:30,000 --> 00:40:31,000
对

1127
00:40:31,000 --> 00:40:32,000
Apple II 还是一个

1128
00:40:32,000 --> 00:40:36,000
就除非我意思是除非你是 Macintosh 或者你是 Apple II 的用户

1129
00:40:36,000 --> 00:40:37,000
你想说是 Apple II 的用户

1130
00:40:37,000 --> 00:40:41,000
那你肯定不会跟我们是同一个阶级的人好吗

1131
00:40:41,000 --> 00:40:42,000
所以

1132
00:40:42,000 --> 00:40:43,000
对

1133
00:40:43,000 --> 00:40:47,000
在普通人的童年里面

1134
00:40:47,000 --> 00:40:48,000
在中国普通人的童年里面

1135
00:40:48,000 --> 00:40:52,000
很少有人会接触到一开机就进入图形界面的电脑

1136
00:40:52,000 --> 00:40:55,000
当然这是我们那个时代

1137
00:40:55,000 --> 00:40:57,000
现在很多人可能你

1138
00:40:57,000 --> 00:41:01,000
我相信我们的听众里面很多人已经在 Windows 95 发布会之后出生的了

1139
00:41:01,000 --> 00:41:02,000
所以

1140
00:41:02,000 --> 00:41:06,000
OK

1141
00:41:06,000 --> 00:41:07,000
Yeah

1142
00:41:07,000 --> 00:41:08,000
Come on

1143
00:41:08,000 --> 00:41:09,000
Go on

1144
00:41:09,000 --> 00:41:11,000
The hard code truth

1145
00:41:12,000 --> 00:41:14,000
那接着讲历史吧

1146
00:41:14,000 --> 00:41:18,000
这个命令行的历史要追根溯源其实还蛮久远的

1147
00:41:18,000 --> 00:41:19,000
对

1148
00:41:19,000 --> 00:41:21,000
其实这是一个非常自然的事情

1149
00:41:21,000 --> 00:41:23,000
就是在早期

1150
00:41:23,000 --> 00:41:26,000
早到什么时候就是在 50 年代 60 年代

1151
00:41:26,000 --> 00:41:29,000
根本世界上根本没有人想过要在

1152
00:41:29,000 --> 00:41:33,000
要能够实时的在屏幕上画出一个图形

1153
00:41:33,000 --> 00:41:35,000
然后你去操作它这种事情

1154
00:41:35,000 --> 00:41:37,000
虽然那个时候电视已经问世了

1155
00:41:37,000 --> 00:41:38,000
嗯

1156
00:41:38,000 --> 00:41:39,000
嗯

1157
00:41:39,000 --> 00:41:41,000
等等电视是什么时候问世

1158
00:41:41,000 --> 00:41:43,000
1955 几年

1159
00:41:43,000 --> 00:41:44,000
问世

1160
00:41:44,000 --> 00:41:45,000
对

1161
00:41:45,000 --> 00:41:46,000
然后

1162
00:41:46,000 --> 00:41:48,000
或者说 1955 年开始普及了

1163
00:41:48,000 --> 00:41:50,000
但是 1955 几年的计算机却没有采计

1164
00:41:50,000 --> 00:41:53,000
电视来做来做他们的显示终端

1165
00:41:53,000 --> 00:41:56,000
而是采用一种叫做 teletype 的东西

1166
00:41:56,000 --> 00:41:59,000
我们现在一般翻译成电传打字机

1167
00:41:59,000 --> 00:42:00,000
嗯

1168
00:42:00,000 --> 00:42:01,000
嗯

1169
00:42:01,000 --> 00:42:02,000
它

1170
00:42:02,000 --> 00:42:03,000
顾名思义嘛

1171
00:42:03,000 --> 00:42:06,000
就是可以用电

1172
00:42:06,000 --> 00:42:10,000
可以用可以远程传输数据的打字机

1173
00:42:10,000 --> 00:42:12,000
打字机的意思就是你按一个键

1174
00:42:12,000 --> 00:42:14,000
然后你前面有一个纸

1175
00:42:14,000 --> 00:42:15,000
纸滚

1176
00:42:15,000 --> 00:42:16,000
然后这个纸滚

1177
00:42:16,000 --> 00:42:17,000
这个滚动的纸

1178
00:42:17,000 --> 00:42:19,000
纸卷上面会显示出你打字

1179
00:42:19,000 --> 00:42:22,000
然后这个电传打字机是呃

1180
00:42:22,000 --> 00:42:25,000
teletype 就是由 teletype 公司所制造的

1181
00:42:25,000 --> 00:42:27,000
然后 teletype 公司所制造的一些机器

1182
00:42:27,000 --> 00:42:29,000
在 50 年代末 60 年代初的时候

1183
00:42:29,000 --> 00:42:32,000
是基本上是遍布整个呃

1184
00:42:32,000 --> 00:42:35,000
西方世界就是这尤其是美国

1185
00:42:35,000 --> 00:42:37,000
基本上每一个呃

1186
00:42:37,000 --> 00:42:40,000
每个大学每一个机构都会有

1187
00:42:40,000 --> 00:42:43,000
因为这个东西真的是非常非常的

1188
00:42:43,000 --> 00:42:46,000
在那个时候就像一个像什么

1189
00:42:46,000 --> 00:42:49,000
像有可以类比为今天的什么东西呢

1190
00:42:49,000 --> 00:42:51,000
这电子游戒

1191
00:42:51,000 --> 00:42:55,000
其实就是有点像今天的笔记本电脑吧

1192
00:42:55,000 --> 00:42:59,000
就是基本上可以用到的地方非常多

1193
00:42:59,000 --> 00:43:01,000
然后嗯

1194
00:43:01,000 --> 00:43:05,000
有点少有点尊严的地方都会弄弄上去

1195
00:43:05,000 --> 00:43:08,000
其实你有用过这个电传输数据这种实体吗

1196
00:43:08,000 --> 00:43:10,000
没有我还没有老到这个地步

1197
00:43:10,000 --> 00:43:12,000
我只在那个得意之博物博里面见过

1198
00:43:12,000 --> 00:43:14,000
你用过

1199
00:43:14,000 --> 00:43:16,000
我也只是在电影或者是这个博物馆里面见过

1200
00:43:16,000 --> 00:43:18,000
其实并没有用过这个东西

1201
00:43:18,000 --> 00:43:19,000
对

1202
00:43:19,000 --> 00:43:21,000
然后我印象最深刻的应该是用这个

1203
00:43:21,000 --> 00:43:24,000
就是那个传那个叫做 stock tick

1204
00:43:24,000 --> 00:43:25,000
就是股票的

1205
00:43:25,000 --> 00:43:28,000
因为这以前的那种股票交易所

1206
00:43:28,000 --> 00:43:30,000
他可能是用这种电商打字机

1207
00:43:30,000 --> 00:43:32,000
然后用一个很长的那个纸带打出来

1208
00:43:32,000 --> 00:43:34,000
那个股票的价钱嘛

1209
00:43:34,000 --> 00:43:35,000
实时报价嘛

1210
00:43:35,000 --> 00:43:38,000
那只只见过这种用力啊

1211
00:43:38,000 --> 00:43:40,000
就是其他用力还真的蛮少见

1212
00:43:40,000 --> 00:43:41,000
嗯

1213
00:43:41,000 --> 00:43:49,000
然后在我记得我是在以前读一篇就是讲操绣的历史文章里面说那个作者

1214
00:43:49,000 --> 00:43:51,000
当时他还是一个中学生

1215
00:43:51,000 --> 00:43:57,000
然后他们学编程方法是呃先在一张纸上仔细写下自己想要写的程序

1216
00:43:57,000 --> 00:43:59,000
好像是 Fortune 还是 Pascal 的程序

1217
00:43:59,000 --> 00:44:05,000
然后第二天拿这张纸去呃学校的图书馆的一间房子里面

1218
00:44:05,000 --> 00:44:11,000
然后把自己的这个程序输入到一个打孔机上

1219
00:44:11,000 --> 00:44:13,000
打孔机会呃

1220
00:44:13,000 --> 00:44:17,000
根据你按下的键来把一个打孔纸带嗯

1221
00:44:17,000 --> 00:44:18,000
打上孔

1222
00:44:18,000 --> 00:44:23,000
然后把这些打孔打好孔的卡片放到一个呃电传打字机的输入槽里面

1223
00:44:23,000 --> 00:44:25,000
然后这个电传打字机可以把嗯

1224
00:44:25,000 --> 00:44:29,000
可以把这些打孔的嗯

1225
00:44:29,000 --> 00:44:30,000
卡

1226
00:44:30,000 --> 00:44:31,000
这些打了孔的卡片

1227
00:44:31,000 --> 00:44:37,000
利用这个呃电传打字机的调制几条器

1228
00:44:37,000 --> 00:44:38,000
连上电话

1229
00:44:38,000 --> 00:44:40,000
然后输入到远端的一台计算机上

1230
00:44:40,000 --> 00:44:43,000
帮你输入结执行你的程序

1231
00:44:43,000 --> 00:44:46,000
然后再把这个结果传回来呃

1232
00:44:46,000 --> 00:44:50,000
呃对整个过程我还是觉得读的就是觉得非常的惊悚

1233
00:44:50,000 --> 00:44:53,000
因为你会很难想象说我靠写这么一个程序

1234
00:44:53,000 --> 00:44:54,000
不是 print hello work

1235
00:44:54,000 --> 00:44:57,000
在那个时候可能是需要两天的这件事情

1236
00:44:57,000 --> 00:44:59,000
嗯

1237
00:44:59,000 --> 00:45:01,000
对而且刚才提到一个细节

1238
00:45:01,000 --> 00:45:06,000
就是他一个电传打字机会需要跟远端的一台电脑联络对吧

1239
00:45:06,000 --> 00:45:07,000
嗯

1240
00:45:07,000 --> 00:45:14,000
但是只有一个问题就是在在贝尔实验室嗯

1241
00:45:14,000 --> 00:45:15,000
不是贝尔实验室

1242
00:45:15,000 --> 00:45:19,000
就电话是由贝尔公司发明是由贝尔发明的对吧

1243
00:45:19,000 --> 00:45:21,000
但是有些人会说他是爱医生发明的

1244
00:45:21,000 --> 00:45:26,000
但是就是如果你没有被这个中学课文骗过骗到的话

1245
00:45:26,000 --> 00:45:28,000
电脑电话其实是贝尔发明的

1246
00:45:28,000 --> 00:45:30,000
然后贝尔成立的贝尔公司

1247
00:45:30,000 --> 00:45:31,000
贝尔公司

1248
00:45:31,000 --> 00:45:35,000
呃贝尔公司到 1981 年还是哪一年为止

1249
00:45:35,000 --> 00:45:36,000
一直都是美国一个独

1250
00:45:36,000 --> 00:45:39,000
占垄断的这么一个电话公司

1251
00:45:39,000 --> 00:45:41,000
就是如果你在美国使用电话的话

1252
00:45:41,000 --> 00:45:42,000
那你使用的一定是贝尔公司服务

1253
00:45:42,000 --> 00:45:45,000
然后就是 90 年代的中国电信

1254
00:45:45,000 --> 00:45:46,000
没错就是那种感觉

1255
00:45:46,000 --> 00:45:51,000
所以我们通过读历史就知道这个电信公司永远是邪恶的

1256
00:45:51,000 --> 00:45:56,000
在 60 年的时候贝尔公司有这么一条规定

1257
00:45:56,000 --> 00:45:59,000
就是我的电话线路只能用来打电话

1258
00:45:59,000 --> 00:46:01,000
你不能在上面传输其他电信号

1259
00:46:02,000 --> 00:46:04,000
呃这就意味着你不能说我把电话拆了

1260
00:46:04,000 --> 00:46:06,000
然后把它连到电通打字机上

1261
00:46:06,000 --> 00:46:10,000
然后让这台电通打字机和另外一台电通打字机联络

1262
00:46:10,000 --> 00:46:11,000
那怎么办呢

1263
00:46:11,000 --> 00:46:13,000
呃人们有这么一个方法

1264
00:46:13,000 --> 00:46:15,000
就是用一个呃

1265
00:46:15,000 --> 00:46:16,000
用一个小盒子

1266
00:46:16,000 --> 00:46:19,000
然后这小盒子上面有两个圆形的

1267
00:46:19,000 --> 00:46:25,000
用这个呃皮呃人造格包起来的这么一个两个基座

1268
00:46:25,000 --> 00:46:27,000
然后你可以把电话拿起来

1269
00:46:27,000 --> 00:46:28,000
拨一个号

1270
00:46:28,000 --> 00:46:30,000
然后把这个电话放在这个基座上

1271
00:46:30,000 --> 00:46:32,000
这样电话的两个听筒呃

1272
00:46:32,000 --> 00:46:34,000
呃一边对着一个麦克风

1273
00:46:34,000 --> 00:46:37,000
就是呃听筒对着麦克风

1274
00:46:37,000 --> 00:46:39,000
然后电话的听筒呢

1275
00:46:39,000 --> 00:46:41,000
则对着那个小盒上面的扬声器

1276
00:46:41,000 --> 00:46:46,000
这样小盒子可以把电通打字机的电信号

1277
00:46:46,000 --> 00:46:47,000
转化为声音信号

1278
00:46:47,000 --> 00:46:48,000
就是如果你用过拨号上网

1279
00:46:48,000 --> 00:46:52,000
他就那种滴滴滴滴滴滴滴滴滴滴滴滴滴那种那种

1280
00:46:52,000 --> 00:46:53,000
那种声音

1281
00:46:53,000 --> 00:46:56,000
然后这个信号被电话用声音讯号

1282
00:46:56,000 --> 00:46:58,000
用模拟的声音讯号传到远端

1283
00:46:58,000 --> 00:47:00,000
然后远端再把它转化为二进制信号

1284
00:47:00,000 --> 00:47:01,000
为二进制信号

1285
00:47:01,000 --> 00:47:02,000
这么一个过程

1286
00:47:02,000 --> 00:47:06,000
这这也是一个非常有意思的东西

1287
00:47:06,000 --> 00:47:08,000
然后这个东西一直使用到

1288
00:47:08,000 --> 00:47:09,000
70 年代初

1289
00:47:09,000 --> 00:47:15,000
贝尔公司去除了限制

1290
00:47:15,000 --> 00:47:16,000
人们才渐渐的可以

1291
00:47:16,000 --> 00:47:19,000
不再用这种非常原始古老的

1292
00:47:19,000 --> 00:47:23,000
用声音来传递二进制信息的

1293
00:47:23,000 --> 00:47:25,000
这叫什么

1294
00:47:25,000 --> 00:47:28,000
Acoustic Coupler

1295
00:47:28,000 --> 00:47:29,000
对

1296
00:47:29,000 --> 00:47:30,000
Acoustic Coupler

1297
00:47:30,000 --> 00:47:31,000
声音

1298
00:47:31,000 --> 00:47:32,000
Acoustic

1299
00:47:32,000 --> 00:47:33,000
Acoustic Coupler

1300
00:47:33,000 --> 00:47:35,000
那叫什么呢

1301
00:47:35,000 --> 00:47:38,000
声音连接器

1302
00:47:38,000 --> 00:47:40,000
声音连接器

1303
00:47:40,000 --> 00:47:41,000
其实这个

1304
00:47:41,000 --> 00:47:44,000
其实现在讲的还是蛮酷的

1305
00:47:44,000 --> 00:47:44,000
就感觉

1306
00:47:44,000 --> 00:47:45,000
刚好今天我看到一则

1307
00:47:45,000 --> 00:47:48,000
一则新闻

1308
00:47:48,000 --> 00:47:49,000
就是说现在有一些

1309
00:47:49,000 --> 00:47:51,000
有个广告做追踪

1310
00:47:51,000 --> 00:47:52,000
Ad Tracking

1311
00:47:52,000 --> 00:47:54,000
他就说现在有一种

1312
00:47:54,000 --> 00:47:56,000
很暗黑的科技

1313
00:47:56,000 --> 00:47:57,000
就是电视的广告里面

1314
00:47:57,000 --> 00:47:59,000
它会指出一种高频的声波

1315
00:47:59,000 --> 00:48:01,000
就是这个人耳是听不见的

1316
00:48:01,000 --> 00:48:03,000
然后这个高频的声波

1317
00:48:03,000 --> 00:48:04,000
是可以被手机的麦克风

1318
00:48:04,000 --> 00:48:05,000
捕捉到

1319
00:48:05,000 --> 00:48:07,000
然后他上面手机上会跑一个应用

1320
00:48:07,000 --> 00:48:08,000
去监听麦克风

1321
00:48:08,000 --> 00:48:09,000
听到这个声音

1322
00:48:09,000 --> 00:48:11,000
他从而知道你是否在看哪个电视

1323
00:48:11,000 --> 00:48:13,000
节目

1324
00:48:13,000 --> 00:48:14,000
天哪

1325
00:48:14,000 --> 00:48:15,000
简直是 1984

1326
00:48:15,000 --> 00:48:18,000
但是你想想

1327
00:48:18,000 --> 00:48:19,000
这个原理

1328
00:48:19,000 --> 00:48:20,000
其实就跟刚才讲的

1329
00:48:20,000 --> 00:48:22,000
一个 Acoustic Coupler

1330
00:48:22,000 --> 00:48:22,000
其实是差不多

1331
00:48:22,000 --> 00:48:24,000
就是叫声学连接

1332
00:48:24,000 --> 00:48:26,000
就是我们现在有 WiFi

1333
00:48:26,000 --> 00:48:27,000
通过无线电的信号

1334
00:48:27,000 --> 00:48:28,000
去传输这个信息的

1335
00:48:28,000 --> 00:48:29,000
它这个玩意儿

1336
00:48:29,000 --> 00:48:31,000
是用一个声波的信号

1337
00:48:31,000 --> 00:48:32,000
去传输这个信息的

1338
00:48:32,000 --> 00:48:35,000
然后只是说因为为了

1339
00:48:35,000 --> 00:48:36,000
这个传输的效果好

1340
00:48:36,000 --> 00:48:37,000
他把这个扬声

1341
00:48:37,000 --> 00:48:38,000
就是收发

1342
00:48:38,000 --> 00:48:39,000
就收发端嘛

1343
00:48:39,000 --> 00:48:40,000
简单来讲

1344
00:48:40,000 --> 00:48:41,000
就麦克风是一个收端

1345
00:48:41,000 --> 00:48:44,000
然后这个扬声器是一个发送端嘛

1346
00:48:44,000 --> 00:48:45,000
然后它是

1347
00:48:45,000 --> 00:48:46,000
它是因为你这个电话机

1348
00:48:46,000 --> 00:48:47,000
是有麦克风扬声器

1349
00:48:47,000 --> 00:48:48,000
它可以发

1350
00:48:48,000 --> 00:48:49,000
可以收嘛

1351
00:48:49,000 --> 00:48:51,000
你那个 Acoustic Coupler

1352
00:48:51,000 --> 00:48:53,000
也是有这个扬声器和麦克风

1353
00:48:53,000 --> 00:48:54,000
也是收和发嘛

1354
00:48:54,000 --> 00:48:55,000
两个反转对接

1355
00:48:55,000 --> 00:48:57,000
不就刚好成了一个连通的回路了吗

1356
00:48:57,000 --> 00:48:58,000
没错

1357
00:48:58,000 --> 00:49:00,000
就听起来是蛮帅的

1358
00:49:00,000 --> 00:49:00,000
没错

1359
00:49:00,000 --> 00:49:01,000
太帅了

1360
00:49:01,000 --> 00:49:05,000
然后后来就说

1361
00:49:05,000 --> 00:49:06,000
那可以直接接电了

1362
00:49:06,000 --> 00:49:07,000
就意思是说

1363
00:49:07,000 --> 00:49:09,000
从无线变有线了

1364
00:49:09,000 --> 00:49:10,000
直接插管子

1365
00:49:10,000 --> 00:49:12,000
插线

1366
00:49:12,000 --> 00:49:14,000
后来的这个调整条系

1367
00:49:14,000 --> 00:49:16,000
就可以自己去进行播号

1368
00:49:16,000 --> 00:49:19,000
然后直接把音频信号转号为

1369
00:49:19,000 --> 00:49:19,000
这个

1370
00:49:19,000 --> 00:49:21,000
直接把电信号转号为

1371
00:49:21,000 --> 00:49:22,000
音频信号

1372
00:49:22,000 --> 00:49:24,000
所以其实这个 Acoustic Coupler

1373
00:49:24,000 --> 00:49:26,000
和这个我们理解的 Modem

1374
00:49:26,000 --> 00:49:27,000
其实本质上是

1375
00:49:27,000 --> 00:49:29,000
做同样的事情的

1376
00:49:29,000 --> 00:49:29,000
对吧

1377
00:49:29,000 --> 00:49:31,000
只是说他们接入方式不一样而已

1378
00:49:31,000 --> 00:49:31,000
Acoustic Coupler

1379
00:49:31,000 --> 00:49:33,000
应该是 Modem 的一个部件

1380
00:49:33,000 --> 00:49:33,000
就是

1381
00:49:33,000 --> 00:49:34,000
对对

1382
00:49:34,000 --> 00:49:37,000
就是代替这个导线的那个部件

1383
00:49:37,000 --> 00:49:37,000
对

1384
00:49:37,000 --> 00:49:39,000
就是后来的 Modem

1385
00:49:39,000 --> 00:49:40,000
可以直接通过一个分线头

1386
00:49:40,000 --> 00:49:41,000
插在电话线上

1387
00:49:41,000 --> 00:49:42,000
就是 Modem

1388
00:49:42,000 --> 00:49:44,000
其实本身就是电话的线路的一个

1389
00:49:44,000 --> 00:49:46,000
那叫什么 RJ 32 这个标准

1390
00:49:46,000 --> 00:49:47,000
RJ 多少

1391
00:49:47,000 --> 00:49:48,000
RJ 45 是网线的

1392
00:49:48,000 --> 00:49:50,000
对 RJ 45 是网线

1393
00:49:50,000 --> 00:49:51,000
RJ 32

1394
00:49:51,000 --> 00:49:52,000
应该是 32

1395
00:49:52,000 --> 00:49:53,000
是电话键

1396
00:49:53,000 --> 00:49:53,000
小的那个电话键

1397
00:49:53,000 --> 00:49:55,000
这叫什么

1398
00:49:55,000 --> 00:49:56,000
查一下

1399
00:49:56,000 --> 00:49:57,000
你查吧

1400
00:49:57,000 --> 00:49:59,000
Teliphonline

1401
00:49:59,000 --> 00:49:59,000
水晶头

1402
00:49:59,000 --> 00:50:07,000
RJ 是叫做 register jack

1403
00:50:07,000 --> 00:50:12,000
然后 RJ 11

1404
00:50:12,000 --> 00:50:14,000
对 RJ 11

1405
00:50:14,000 --> 00:50:14,000
OK

1406
00:50:14,000 --> 00:50:15,000
对

1407
00:50:15,000 --> 00:50:16,000
这个是我们就

1408
00:50:16,000 --> 00:50:17,000
RJ 32 有这个东西吗

1409
00:50:17,000 --> 00:50:19,000
可能没有

1410
00:50:19,000 --> 00:50:19,000
记错了

1411
00:50:19,000 --> 00:50:21,000
有 RJ 11

1412
00:50:21,000 --> 00:50:23,000
RJ 14

1413
00:50:23,000 --> 00:50:24,000
RJ 25

1414
00:50:24,000 --> 00:50:26,000
然后对

1415
00:50:26,000 --> 00:50:27,000
就是这么一些

1416
00:50:27,000 --> 00:50:29,000
然后 RJ 45 就是我们常说的这个双脚线

1417
00:50:29,000 --> 00:50:31,000
就是网线的标准头了

1418
00:50:31,000 --> 00:50:32,000
嗯

1419
00:50:32,000 --> 00:50:33,000
它会宽一些

1420
00:50:33,000 --> 00:50:35,000
应该是有多少帧来在里面

1421
00:50:35,000 --> 00:50:35,000
4 个

1422
00:50:35,000 --> 00:50:37,000
4 个帧

1423
00:50:37,000 --> 00:50:38,000
网线是 8 个帧吧

1424
00:50:38,000 --> 00:50:38,000
对

1425
00:50:38,000 --> 00:50:39,000
网线是对嘛

1426
00:50:39,000 --> 00:50:39,000
对

1427
00:50:39,000 --> 00:50:42,000
然后这个应该是 4 个帧吧

1428
00:50:42,000 --> 00:50:43,000
RJ 11

1429
00:50:43,000 --> 00:50:44,000
具体也不太多

1430
00:50:44,000 --> 00:50:45,000
嗯

1431
00:50:45,000 --> 00:50:45,000
诶

1432
00:50:45,000 --> 00:50:47,000
其实现在我看也有很多这个

1433
00:50:47,000 --> 00:50:49,000
就是那个 RJ 45

1434
00:50:49,000 --> 00:50:50,000
因为它那个线头多嘛

1435
00:50:50,000 --> 00:50:52,000
它就是可以当电话线用的嘛

1436
00:50:52,000 --> 00:50:55,000
然后还可以留几个来做一个摆照的头

1437
00:50:55,000 --> 00:50:57,000
所以很多这种写字楼啊

1438
00:50:57,000 --> 00:50:59,000
或者是家里装修的时候

1439
00:50:59,000 --> 00:51:00,000
他就说为了方便

1440
00:51:00,000 --> 00:51:02,000
就不单独布这个电话线的槽

1441
00:51:02,000 --> 00:51:04,000
然后就直接走一个网线就好了

1442
00:51:04,000 --> 00:51:04,000
对

1443
00:51:04,000 --> 00:51:06,000
但是如果你现在要装修房子

1444
00:51:06,000 --> 00:51:07,000
我强烈不建议这么干

1445
00:51:07,000 --> 00:51:08,000
首先第一个

1446
00:51:08,000 --> 00:51:10,000
你不需要真的需要电话机了

1447
00:51:10,000 --> 00:51:10,000
对吧

1448
00:51:10,000 --> 00:51:11,000
现在都是用手机

1449
00:51:11,000 --> 00:51:13,000
第二个就是如果你那么干了之后

1450
00:51:13,000 --> 00:51:14,000
你那个网线

1451
00:51:14,000 --> 00:51:16,000
哪怕是你说什么超无论的线

1452
00:51:16,000 --> 00:51:20,000
最后最终也只能跑百兆的这个速度了

1453
00:51:20,000 --> 00:51:21,000
我现在租房子就是

1454
00:51:21,000 --> 00:51:23,000
我现在女朋友租房子就是有那个

1455
00:51:23,000 --> 00:51:25,000
每一间房子里面都有

1456
00:51:25,000 --> 00:51:28,000
两个那个网线的借口

1457
00:51:28,000 --> 00:51:29,000
好鸡肋

1458
00:51:29,000 --> 00:51:31,000
就一个是电话

1459
00:51:31,000 --> 00:51:32,000
一个是走网

1460
00:51:32,000 --> 00:51:32,000
没有

1461
00:51:32,000 --> 00:51:33,000
两个都是蓝

1462
00:51:33,000 --> 00:51:36,000
就有一个在储藏室里面

1463
00:51:36,000 --> 00:51:38,000
有一个装电话线的槽

1464
00:51:38,000 --> 00:51:39,000
然后那个槽上面有一个

1465
00:51:39,000 --> 00:51:42,000
总于房间有自己的一个 HUB

1466
00:51:42,000 --> 00:51:47,000
然后这个 HUB 分了八根线到每个屋子

1467
00:51:47,000 --> 00:51:48,000
没有两根

1468
00:51:48,000 --> 00:51:50,000
所以其实并没有什么用

1469
00:51:50,000 --> 00:51:51,000
就是说你还是用了 WiFi

1470
00:51:51,000 --> 00:51:52,000
是吧

1471
00:51:52,000 --> 00:51:52,000
对

1472
00:51:52,000 --> 00:51:52,000
没错

1473
00:51:52,000 --> 00:51:55,000
淘汰掉技术

1474
00:51:55,000 --> 00:51:56,000
就像我们现在在

1475
00:51:56,000 --> 00:51:57,000
在那个装修办公室

1476
00:51:57,000 --> 00:51:59,000
然后

1477
00:51:59,000 --> 00:52:01,000
一个新的办公室

1478
00:52:01,000 --> 00:52:03,000
也是要不线那些

1479
00:52:03,000 --> 00:52:05,000
其实都准备完全不走网线

1480
00:52:05,000 --> 00:52:06,000
都是走无线

1481
00:52:06,000 --> 00:52:07,000
对

1482
00:52:07,000 --> 00:52:09,000
纯 WiFi 网络

1483
00:52:09,000 --> 00:52:09,000
嗯

1484
00:52:09,000 --> 00:52:10,000
扯远了

1485
00:52:10,000 --> 00:52:10,000
对

1486
00:52:10,000 --> 00:52:11,000
接着说历史

1487
00:52:11,000 --> 00:52:12,000
回到电传打字机

1488
00:52:12,000 --> 00:52:15,000
我们一下子越过了 50 年的历史

1489
00:52:15,000 --> 00:52:16,000
好跳啊

1490
00:52:16,000 --> 00:52:17,000
对

1491
00:52:17,000 --> 00:52:19,000
总之这个电传打字机的模样

1492
00:52:19,000 --> 00:52:21,000
非常 50 年代

1493
00:52:21,000 --> 00:52:24,000
就是欢迎各位听众去点开

1494
00:52:24,000 --> 00:52:26,000
这个 show notes 里面的链接

1495
00:52:26,000 --> 00:52:27,000
看一看电传打字机

1496
00:52:27,000 --> 00:52:28,000
到底是一个什么样的

1497
00:52:28,000 --> 00:52:29,000
一个什么样子

1498
00:52:29,000 --> 00:52:30,000
但是最大

1499
00:52:30,000 --> 00:52:33,000
我们跟这一期节目有关的重点

1500
00:52:33,000 --> 00:52:34,000
就是这个电传打字机

1501
00:52:34,000 --> 00:52:36,000
通常只会在一行上面工作

1502
00:52:36,000 --> 00:52:38,000
就是不管你输入还是输出

1503
00:52:38,000 --> 00:52:40,000
你得到的结果一般都只有一行

1504
00:52:40,000 --> 00:52:42,000
当然输出有可能有很多行

1505
00:52:42,000 --> 00:52:43,000
但输入基本上就是一行

1506
00:52:43,000 --> 00:52:45,000
你一行是什么意思

1507
00:52:45,000 --> 00:52:49,000
一行就是这个电传打字机上面

1508
00:52:49,000 --> 00:52:52,000
你最常只能输入固定字符

1509
00:52:52,000 --> 00:52:53,000
一般是 80 个

1510
00:52:53,000 --> 00:52:53,000
对

1511
00:52:53,000 --> 00:52:57,000
然后如果你输到这还没完的话

1512
00:52:57,000 --> 00:52:59,000
你要么要告诉电传打字机

1513
00:52:59,000 --> 00:53:02,000
我还要再输入一行

1514
00:53:02,000 --> 00:53:04,000
然后你要输入一个特别的符号

1515
00:53:04,000 --> 00:53:07,000
所以这个时候你要按一个什么

1516
00:53:07,000 --> 00:53:09,000
按一个就相当于 backslash 的键

1517
00:53:09,000 --> 00:53:11,000
反正是上面的一个实体键

1518
00:53:11,000 --> 00:53:13,000
OK

1519
00:53:13,000 --> 00:53:14,000
要不然你就得按回车了

1520
00:53:14,000 --> 00:53:16,000
就是回车就是把这一行

1521
00:53:16,000 --> 00:53:18,000
当前行的东西输出出去

1522
00:53:18,000 --> 00:53:20,000
但这个时候你是告诉的是

1523
00:53:20,000 --> 00:53:21,000
电传打字机

1524
00:53:21,000 --> 00:53:23,000
是我要输入多于一行

1525
00:53:23,000 --> 00:53:25,000
还是说告诉那个远端

1526
00:53:25,000 --> 00:53:26,000
你要输入多于一行

1527
00:53:26,000 --> 00:53:28,000
是告诉电传打字机

1528
00:53:28,000 --> 00:53:30,000
就是电传打的机会把你当前

1529
00:53:30,000 --> 00:53:31,000
整个行

1530
00:53:31,000 --> 00:53:32,000
就是它有一个 buffer

1531
00:53:32,000 --> 00:53:33,000
你可以理解

1532
00:53:33,000 --> 00:53:35,000
它会把你当前行 buffer 里面的东西

1533
00:53:35,000 --> 00:53:37,000
传输出去

1534
00:53:37,000 --> 00:53:39,000
但是这个 buffer 有多长

1535
00:53:39,000 --> 00:53:42,000
是 buffer 应该是要比一行的长度长的

1536
00:53:42,000 --> 00:53:43,000
但是不管怎么说

1537
00:53:43,000 --> 00:53:45,000
它的具体表现就是

1538
00:53:45,000 --> 00:53:47,000
通常大部分情况

1539
00:53:47,000 --> 00:53:48,000
只会输入一行

1540
00:53:48,000 --> 00:53:51,000
你想想那个场景还是蛮搞笑的

1541
00:53:51,000 --> 00:53:53,000
你打了打了打一个迷你超过一样的

1542
00:53:53,000 --> 00:53:54,000
你还说

1543
00:53:54,000 --> 00:53:56,000
那我再打一下

1544
00:53:56,000 --> 00:53:59,000
没错就是这个感觉

1545
00:53:59,000 --> 00:54:04,000
然后这个特征

1546
00:54:04,000 --> 00:54:11,000
也就造就了我们接下来 60 年的计算机历史里面

1547
00:54:11,000 --> 00:54:12,000
几乎所有人

1548
00:54:12,000 --> 00:54:17,000
至少所有需要学写程序的人都会面临的一个问题

1549
00:54:17,000 --> 00:54:19,000
就是什么是命令行

1550
00:54:19,000 --> 00:54:23,000
就是 common line line 这个东西就来自于词

1551
00:54:23,000 --> 00:54:26,000
就是因为早次一点上打的机场就只允许你

1552
00:54:26,000 --> 00:54:28,000
针对当前行来操作

1553
00:54:28,000 --> 00:54:28,000
就是

1554
00:54:28,000 --> 00:54:30,000
所以不是命令行

1555
00:54:30,000 --> 00:54:31,000
是命令一行

1556
00:54:31,000 --> 00:54:31,000
对

1557
00:54:31,000 --> 00:54:33,000
就是一个命令行

1558
00:54:33,000 --> 00:54:34,000
就有时候你会好奇说

1559
00:54:34,000 --> 00:54:39,000
为什么写程序不能是从屏幕上的任何地方开始

1560
00:54:39,000 --> 00:54:42,000
为什么一定要是在左上角或者左下角

1561
00:54:42,000 --> 00:54:44,000
或者然后输入一行命令

1562
00:54:44,000 --> 00:54:45,000
然后按回车呢

1563
00:54:45,000 --> 00:54:48,000
来自于回车键到底是怎么来的

1564
00:54:48,000 --> 00:54:49,000
为什么会回车键

1565
00:54:49,000 --> 00:54:50,000
而不是一个

1566
00:54:50,000 --> 00:54:52,000
这种东西

1567
00:54:52,000 --> 00:54:53,000
而不是一个什么

1568
00:54:53,000 --> 00:54:56,000
比如说开始输入或者开始执行这样的键

1569
00:54:56,000 --> 00:54:59,000
那其实也是从这来的

1570
00:54:59,000 --> 00:55:00,000
对

1571
00:55:00,000 --> 00:55:02,000
然后

1572
00:55:02,000 --> 00:55:04,000
teletype 这个词

1573
00:55:04,000 --> 00:55:06,000
对于我们一直延续到今天的影响

1574
00:55:06,000 --> 00:55:07,000
还有一个就是 tty

1575
00:55:07,000 --> 00:55:08,000
就是

1576
00:55:08,000 --> 00:55:09,000
我不知道你

1577
00:55:09,000 --> 00:55:12,000
但是我在开始接触 Linux 的时候

1578
00:55:12,000 --> 00:55:13,000
经常会好奇说

1579
00:55:13,000 --> 00:55:15,000
tty 到底是一个什么东西的缩写

1580
00:55:15,000 --> 00:55:17,000
这很难猜出来对吧

1581
00:55:17,000 --> 00:55:19,000
它其实 teletype 的缩写

1582
00:55:19,000 --> 00:55:20,000
一直延续到今天

1583
00:55:20,000 --> 00:55:21,000
包括你

1584
00:55:21,000 --> 00:55:22,000
你面对的这台

1585
00:55:23,000 --> 00:55:24,000
Mac 电脑

1586
00:55:24,000 --> 00:55:26,000
或者是你手上的 Android

1587
00:55:26,000 --> 00:55:28,000
或者是你 iPhone

1588
00:55:28,000 --> 00:55:29,000
其实都有 tty 这个东西

1589
00:55:29,000 --> 00:55:29,000
对吧

1590
00:55:29,000 --> 00:55:33,000
就是在 device slash tty

1591
00:55:33,000 --> 00:55:35,000
哪怕你打开你的 iterm

1592
00:55:35,000 --> 00:55:37,000
上面都会显示说

1593
00:55:37,000 --> 00:55:39,000
last login

1594
00:55:39,000 --> 00:55:40,000
11 月 11 号

1595
00:55:40,000 --> 00:55:41,000
18 点 46 分

1596
00:55:41,000 --> 00:55:43,000
然后 on tty

1597
00:55:43,000 --> 00:55:43,000
s 000

1598
00:55:43,000 --> 00:55:46,000
所以其实你要解释一下

1599
00:55:46,000 --> 00:55:47,000
这个我们现在

1600
00:55:47,000 --> 00:55:48,000
操作程度里面

1601
00:55:48,000 --> 00:55:49,000
这个 device tty

1602
00:55:49,000 --> 00:55:50,000
到底是它的一个作用是什么

1603
00:55:50,000 --> 00:55:54,000
slash device slash tty

1604
00:55:54,000 --> 00:55:55,000
其实是一个

1605
00:55:55,000 --> 00:55:59,000
用软件模拟出来的

1606
00:55:59,000 --> 00:56:00,000
一个电传打字机的中端

1607
00:56:00,000 --> 00:56:01,000
就是你可以

1608
00:56:01,000 --> 00:56:03,000
它其实应该叫做 ptty

1609
00:56:03,000 --> 00:56:03,000
对吧

1610
00:56:03,000 --> 00:56:05,000
sudo tty

1611
00:56:05,000 --> 00:56:06,000
sudo tty

1612
00:56:06,000 --> 00:56:06,000
对

1613
00:56:06,000 --> 00:56:07,000
就是一个伪中端

1614
00:56:07,000 --> 00:56:09,000
就是它不是一个真正的

1615
00:56:09,000 --> 00:56:10,000
电传打字机的实体

1616
00:56:10,000 --> 00:56:12,000
而是你的计算机

1617
00:56:12,000 --> 00:56:14,000
想象出来的

1618
00:56:14,000 --> 00:56:15,000
它的

1619
00:56:15,000 --> 00:56:19,000
它可以支配的诸多电传打字机之一

1620
00:56:19,000 --> 00:56:21,000
但它的作用是

1621
00:56:21,000 --> 00:56:22,000
它的实际作用是什么

1622
00:56:22,000 --> 00:56:23,000
它的作用是输入和输入

1623
00:56:23,000 --> 00:56:29,000
就是说你打的键盘

1624
00:56:29,000 --> 00:56:30,000
是通过这个 tty 这个设备

1625
00:56:30,000 --> 00:56:32,000
进入到 kernel 的

1626
00:56:32,000 --> 00:56:34,000
然后 kernel 给你 print 回来的东西

1627
00:56:34,000 --> 00:56:36,000
也是通过这个 tty 设备传回来的

1628
00:56:36,000 --> 00:56:36,000
是

1629
00:56:36,000 --> 00:56:37,000
就是你可以这么理解

1630
00:56:37,000 --> 00:56:38,000
你可以这么理解

1631
00:56:38,000 --> 00:56:39,000
比如说我是一台 mainframe

1632
00:56:39,000 --> 00:56:41,000
然后我有输入 standardout

1633
00:56:41,000 --> 00:56:42,000
和 standarderror

1634
00:56:42,000 --> 00:56:43,000
和 standardinput

1635
00:56:43,000 --> 00:56:45,000
然后同时

1636
00:56:45,000 --> 00:56:45,000
与此同时

1637
00:56:45,000 --> 00:56:46,000
我有很多个 tty

1638
00:56:46,000 --> 00:56:49,000
我连接了很多个实体的

1639
00:56:49,000 --> 00:56:51,000
机械的电子的电传打字机

1640
00:56:51,000 --> 00:56:52,000
然后我现在说好

1641
00:56:52,000 --> 00:56:55,000
我要把我的 standardinput

1642
00:56:55,000 --> 00:56:57,000
连接到 tty 1 上

1643
00:56:57,000 --> 00:57:00,000
那么此时 tty 1 上输入什么

1644
00:57:00,000 --> 00:57:03,000
我就会把它接到我的 standardinput 上

1645
00:57:03,000 --> 00:57:05,000
然后我说我的 standardoutput

1646
00:57:05,000 --> 00:57:07,000
需要输入到 tty 4 上面

1647
00:57:07,000 --> 00:57:11,000
那我比如说 tty 1

1648
00:57:11,000 --> 00:57:12,000
刚才说几

1649
00:57:12,000 --> 00:57:14,000
tty 1 告诉我说 printhello world

1650
00:57:14,000 --> 00:57:17,000
然后我说 standardoutput 在 tty 4 上

1651
00:57:17,000 --> 00:57:20,000
那么 tty 4 这些电传打的机上

1652
00:57:20,000 --> 00:57:21,000
就会输出 hello world

1653
00:57:21,000 --> 00:57:23,000
对

1654
00:57:23,000 --> 00:57:24,000
它就相当于

1655
00:57:24,000 --> 00:57:24,000
对

1656
00:57:24,000 --> 00:57:28,000
就相当于一个标准的输入输出设备

1657
00:57:28,000 --> 00:57:30,000
然后只不过是用软件来模拟

1658
00:57:30,000 --> 00:57:33,000
然后键盘的这个世界

1659
00:57:33,000 --> 00:57:35,000
被操作系统的一个驱动捕捉到

1660
00:57:35,000 --> 00:57:38,000
也是转化到 tty 的一个输入上面去

1661
00:57:38,000 --> 00:57:39,000
再传给那盒

1662
00:57:39,000 --> 00:57:40,000
对

1663
00:57:40,000 --> 00:57:41,000
如果你要使用这个

1664
00:57:41,000 --> 00:57:44,000
terminal simulate

1665
00:57:44,000 --> 00:57:46,000
emulator

1666
00:57:46,000 --> 00:57:48,000
如果你使用这个中端模拟器的话

1667
00:57:48,000 --> 00:57:52,000
但是其他的一些东西也不是这样

1668
00:57:52,000 --> 00:57:53,000
比如说游戏肯定不是这样

1669
00:57:53,000 --> 00:57:55,000
游戏就是直接扫描

1670
00:57:55,000 --> 00:58:00,000
键盘产生的中断或者是 whatever it works

1671
00:58:00,000 --> 00:58:02,000
但是跟 tty 没有关系

1672
00:58:02,000 --> 00:58:04,000
ok 对

1673
00:58:04,000 --> 00:58:08,000
然后到 198 几年的时候

1674
00:58:08,000 --> 00:58:12,000
DEC 是 DEC 的全名叫做卖证

1675
00:58:12,000 --> 00:58:15,000
Digital Equipment Corporation

1676
00:58:15,000 --> 00:58:17,000
对数字设备公司

1677
00:58:17,000 --> 00:58:23,000
研发出的这种就是用二级

1678
00:58:23,000 --> 00:58:26,000
用阴极射线显示管做成了这个

1679
00:58:26,000 --> 00:58:30,000
所谓的单色显示器的 terminal

1680
00:58:30,000 --> 00:58:32,000
我们才渐渐淘汰了

1681
00:58:32,000 --> 00:58:34,000
人类才渐渐淘汰了

1682
00:58:34,000 --> 00:58:36,000
tty 这种东西

1683
00:58:36,000 --> 00:58:37,000
但是

1684
00:58:37,000 --> 00:58:40,000
就是砸到纸袋上的那种 tty

1685
00:58:40,000 --> 00:58:41,000
终于你有了一个

1686
00:58:41,000 --> 00:58:45,000
就相当于玻璃做的这么一个电传档的机

1687
00:58:45,000 --> 00:58:48,000
所以其实他们之前那个还是挺废纸的

1688
00:58:48,000 --> 00:58:49,000
是吧

1689
00:58:49,000 --> 00:58:50,000
对相当废纸

1690
00:58:50,000 --> 00:58:53,000
宅男废纸

1691
00:58:53,000 --> 00:58:55,000
你为什么也想到了这个

1692
00:58:55,000 --> 00:58:57,000
我根本也想说宅男废纸

1693
00:58:57,000 --> 00:58:59,000
那个时代已经过去了

1694
00:58:59,000 --> 00:59:00,000
对

1695
00:59:00,000 --> 00:59:02,000
对

1696
00:59:02,000 --> 00:59:03,000
然后这个

1697
00:59:03,000 --> 00:59:07,000
这个玻璃的 tty 其实就

1698
00:59:07,000 --> 00:59:09,000
简单来说替代了一个打印机的作用

1699
00:59:09,000 --> 00:59:10,000
没错

1700
00:59:10,000 --> 00:59:14,000
替代了打印机的输出

1701
00:59:14,000 --> 00:59:15,000
然后输入的话

1702
00:59:15,000 --> 00:59:18,000
最大的优点就是你终于可以改自己的输入

1703
00:59:18,000 --> 00:59:21,000
早期的电传打字机

1704
00:59:21,000 --> 00:59:22,000
你要打错一个字符

1705
00:59:22,000 --> 00:59:23,000
你是改不了的

1706
00:59:23,000 --> 00:59:25,000
输错了怎么办

1707
00:59:25,000 --> 00:59:26,000
这也是一个我的问题

1708
00:59:26,000 --> 00:59:29,000
我也不知道那个时候输错了到底是怎么办

1709
00:59:29,000 --> 00:59:30,000
你也许有一个键允许你说

1710
00:59:30,000 --> 00:59:32,000
这行废料

1711
00:59:32,000 --> 00:59:33,000
你回退到某一个地方

1712
00:59:33,000 --> 00:59:35,000
然后你再重新打

1713
00:59:35,000 --> 00:59:36,000
就是那 CtrlK 吗

1714
00:59:36,000 --> 00:59:38,000
对

1715
00:59:38,000 --> 00:59:38,000
就是

1716
00:59:38,000 --> 00:59:44,000
我相信电传打字机上应该还是有 backspace

1717
00:59:44,000 --> 00:59:47,000
backspace 按下去的话到底会具体做什么

1718
00:59:47,000 --> 00:59:50,000
它不可能抹掉一个已经打好的字符

1719
00:59:50,000 --> 00:59:50,000
对吧

1720
00:59:50,000 --> 00:59:52,000
我觉得应该是把内行

1721
00:59:52,000 --> 00:59:54,000
kill 掉

1722
00:59:54,000 --> 00:59:56,000
然后再起一行新的重新来过

1723
00:59:56,000 --> 01:00:00,000
这是唯一合理的方式

1724
01:00:00,000 --> 01:00:01,000
对

1725
01:00:01,000 --> 01:00:02,000
anyway

1726
01:00:02,000 --> 01:00:03,000
这也不是重点

1727
01:00:03,000 --> 01:00:07,000
但最大的一个要点就是

1728
01:00:07,000 --> 01:00:09,000
这个玻璃的 terminal

1729
01:00:09,000 --> 01:00:13,000
虽然表面上看它是可以改的

1730
01:00:13,000 --> 01:00:15,000
然后可以多行显示的

1731
01:00:15,000 --> 01:00:16,000
但它本质上在

1732
01:00:16,000 --> 01:00:23,000
最底端它还是在模拟电传打字机和主机交互信息的方式

1733
01:00:23,000 --> 01:00:31,000
也就是说电传打字机连接到的主机并不知道它自己连接到的是一个屏幕还是一个电传打字

1734
01:00:31,000 --> 01:00:32,000
对

1735
01:00:32,000 --> 01:00:39,000
然后最广为流行的电传打字机的型号就是 Teletype Model 33

1736
01:00:39,000 --> 01:00:42,000
Teletype Model 33 ASR

1737
01:00:42,000 --> 01:00:47,000
然后我们熟知并且爱大的账单大门先生

1738
01:00:47,000 --> 01:00:55,000
就是在这台电脑上开始了它的第一次编程之旅

1739
01:00:55,000 --> 01:00:57,000
对

1740
01:00:57,000 --> 01:01:03,000
然后第一台电传打字机的所使用的

1741
01:01:03,000 --> 01:01:09,000
我们刚才提到这个 Aucoustic Coupler 的速率是 300 bits per second

1742
01:01:09,000 --> 01:01:12,000
各位可以想象一下这个速度

1743
01:01:12,000 --> 01:01:14,000
300 bits 除以 8

1744
01:01:14,000 --> 01:01:15,000
我想想

1745
01:01:15,000 --> 01:01:16,000
不等一下

1746
01:01:16,000 --> 01:01:16,000
bits

1747
01:01:16,000 --> 01:01:19,000
bits 除以 8 得到 byte

1748
01:01:19,000 --> 01:01:19,000
对

1749
01:01:19,000 --> 01:01:20,000
我量

1750
01:01:20,000 --> 01:01:23,000
38240

1751
01:01:23,000 --> 01:01:26,000
算一下

1752
01:01:26,000 --> 01:01:28,000
300 除以 8 需要

1753
01:01:28,000 --> 01:01:30,000
37.5 byte per second

1754
01:01:30,000 --> 01:01:32,000
每秒就可以打

1755
01:01:32,000 --> 01:01:37,000
它差不多 38 个字符的速率

1756
01:01:37,000 --> 01:01:37,000
对

1757
01:01:37,000 --> 01:01:39,000
就是我们这我们今天的 show note

1758
01:01:39,000 --> 01:01:45,000
如果用这个 300 bps 的这个 modem 来传输的话

1759
01:01:45,000 --> 01:01:46,000
大概

1760
01:01:46,000 --> 01:01:48,000
大概一两小时了

1761
01:01:48,000 --> 01:01:48,000
没错

1762
01:01:48,000 --> 01:01:50,000
这是台湖思语

1763
01:01:50,000 --> 01:01:52,000
对

1764
01:01:52,000 --> 01:01:56,000
这种感觉就像在那个辐射里面看那个 terminal 上一号一号

1765
01:01:56,000 --> 01:01:58,000
会蹦字的感觉

1766
01:01:58,000 --> 01:01:59,000
对

1767
01:01:59,000 --> 01:02:03,000
这个也是一个就是科幻片常用的一个梗

1768
01:02:03,000 --> 01:02:05,000
就是那个字是一行一行

1769
01:02:05,000 --> 01:02:07,000
就是一个一个一个字出现的嘛

1770
01:02:07,000 --> 01:02:11,000
这个一定是从当年他们那个电传打字机内获得灵感

1771
01:02:11,000 --> 01:02:13,000
看着那个字一个一个莫名其冒出来

1772
01:02:13,000 --> 01:02:15,000
觉得很有一种科技感

1773
01:02:15,000 --> 01:02:15,000
是吧

1774
01:02:15,000 --> 01:02:15,000
其实

1775
01:02:15,000 --> 01:02:17,000
根本就是技术性

1776
01:02:17,000 --> 01:02:17,000
对

1777
01:02:17,000 --> 01:02:20,000
就下次

1778
01:02:20,000 --> 01:02:22,000
就下次求这种什么

1779
01:02:22,000 --> 01:02:25,000
这个科幻片再也不要用这种特效了

1780
01:02:25,000 --> 01:02:26,000
那实在是太 low 了

1781
01:02:26,000 --> 01:02:31,000
就我的第一台猫是我的第一只猫是 28.8 k 的

1782
01:02:31,000 --> 01:02:34,000
14.428.8 k

1783
01:02:34,000 --> 01:02:34,000
k

1784
01:02:34,000 --> 01:02:35,000
k

1785
01:02:35,000 --> 01:02:35,000
对

1786
01:02:35,000 --> 01:02:37,000
然后这个就只有 300

1787
01:02:37,000 --> 01:02:39,000
这台猫是 0.3 k

1788
01:02:39,000 --> 01:02:41,000
0.3 k

1789
01:02:41,000 --> 01:02:42,000
就是这样

1790
01:02:42,000 --> 01:02:44,000
对

1791
01:02:44,000 --> 01:02:49,000
上 bbs 都显得卡

1792
01:02:49,000 --> 01:02:50,000
上 bbs

1793
01:02:50,000 --> 01:02:53,000
那个时候真的是 bbs 没有什么

1794
01:02:53,000 --> 01:02:56,000
我相信那个时候的 bbs 根本不存在

1795
01:02:56,000 --> 01:02:57,000
还没有网络嘛

1796
01:02:58,000 --> 01:02:59,000
还没有网络对

1797
01:02:59,000 --> 01:03:01,000
早期的 bbs 根本就是转信站嘛

1798
01:03:01,000 --> 01:03:04,000
就是你在离线状态下写好信

1799
01:03:04,000 --> 01:03:05,000
读好信

1800
01:03:05,000 --> 01:03:06,000
然后连线

1801
01:03:06,000 --> 01:03:08,000
把所有需要收和发的信

1802
01:03:08,000 --> 01:03:10,000
一次性收和发

1803
01:03:10,000 --> 01:03:11,000
然后再离线

1804
01:03:11,000 --> 01:03:13,000
再读你刚才收到了什么

1805
01:03:13,000 --> 01:03:14,000
然后写你要写的

1806
01:03:14,000 --> 01:03:17,000
其实只是离散那种状态

1807
01:03:17,000 --> 01:03:21,000
像现在这种 instant messenger 真是不可想象的东西

1808
01:03:21,000 --> 01:03:22,000
对

1809
01:03:22,000 --> 01:03:23,000
对

1810
01:03:23,000 --> 01:03:27,000
然后时光光阴仍然

1811
01:03:27,000 --> 01:03:29,000
我们来到了 UNIX 时代

1812
01:03:29,000 --> 01:03:36,000
在贝尔实验室和 MIT 和通用电器里面的

1813
01:03:36,000 --> 01:03:38,000
通用电器的实验室里面出现了一种操作系统

1814
01:03:38,000 --> 01:03:40,000
叫做 Multics

1815
01:03:40,000 --> 01:03:44,000
Multiple Time

1816
01:03:44,000 --> 01:03:47,000
就是什么多用户分时系统这么一个东西

1817
01:03:47,000 --> 01:03:49,000
然后它的后

1818
01:03:49,000 --> 01:03:49,000
对

1819
01:03:49,000 --> 01:03:52,000
在那个时代还是使用电台卡子机的

1820
01:03:52,000 --> 01:03:54,000
但是到了 UNIX 时代

1821
01:03:54,000 --> 01:03:56,000
基本上已经全都切换到了这个

1822
01:03:56,000 --> 01:03:59,000
就是带显示器的 terminal

1823
01:03:59,000 --> 01:04:02,000
然后在 terminal 时代呢

1824
01:04:02,000 --> 01:04:04,000
terminal 出现时代

1825
01:04:04,000 --> 01:04:08,000
人们延续了这个 Multics 里面的一个概念

1826
01:04:08,000 --> 01:04:10,000
就是这个 shell 的概念

1827
01:04:10,000 --> 01:04:11,000
然后

1828
01:04:11,000 --> 01:04:14,000
要不你来解释一下什么是 shell

1829
01:04:14,000 --> 01:04:15,000
shell 跟 kernel 的关系

1830
01:04:15,000 --> 01:04:18,000
我们节目叫做 kernel panic

1831
01:04:18,000 --> 01:04:20,000
但是我们这一期在讲 shell

1832
01:04:20,000 --> 01:04:21,000
然后了解了关系

1833
01:04:21,000 --> 01:04:22,000
对

1834
01:04:22,000 --> 01:04:24,000
因为既然有内核

1835
01:04:24,000 --> 01:04:26,000
有核的话就会有一个核吧

1836
01:04:26,000 --> 01:04:30,000
核是执行那些实际的程序的

1837
01:04:30,000 --> 01:04:31,000
可以这么说吧

1838
01:04:31,000 --> 01:04:33,000
然后 shell 其实就是给用户

1839
01:04:33,000 --> 01:04:34,000
用于

1840
01:04:34,000 --> 01:04:38,000
就用于用户和这个内核交互的一个工具

1841
01:04:38,000 --> 01:04:38,000
对吧

1842
01:04:38,000 --> 01:04:39,000
对

1843
01:04:39,000 --> 01:04:39,000
这有点

1844
01:04:39,000 --> 01:04:40,000
然后 shell 的

1845
01:04:40,000 --> 01:04:41,000
你说

1846
01:04:41,000 --> 01:04:45,000
然后 shell 的主要的功能就是什么呢

1847
01:04:45,000 --> 01:04:47,000
就是让用户输入命令

1848
01:04:47,000 --> 01:04:50,000
然后传给 kernel 去执行

1849
01:04:50,000 --> 01:04:55,000
然后再把这个执行的结果再展示给用户吧

1850
01:04:55,000 --> 01:04:58,000
就通过这个 tty 这个电传打字机接口

1851
01:04:58,000 --> 01:04:59,000
对

1852
01:04:59,000 --> 01:05:06,000
我觉得 shell 这个名字其实最开始的时候我接触会觉得它有点迷惑性

1853
01:05:06,000 --> 01:05:15,000
因为 shell 在它的锁纸上面其实是专门指这个跟用户输入输出

1854
01:05:15,000 --> 01:05:18,000
乃至执行脚本的这么一个小工具

1855
01:05:18,000 --> 01:05:20,000
然后这个工具它跑起来的时候

1856
01:05:20,000 --> 01:05:24,000
会让你可以通过命令行来跟内核打交道

1857
01:05:24,000 --> 01:05:25,000
但实际上

1858
01:05:25,000 --> 01:05:30,000
就是如果你去专门追究它这个名字的话

1859
01:05:30,000 --> 01:05:32,000
kernel 跑在这个核心层

1860
01:05:32,000 --> 01:05:36,000
但并不是所有跑在外层的都是 shell

1861
01:05:36,000 --> 01:05:36,000
对吧

1862
01:05:36,000 --> 01:05:38,000
对

1863
01:05:38,000 --> 01:05:39,000
因为还有 user space

1864
01:05:39,000 --> 01:05:40,000
还有其他一些程序

1865
01:05:40,000 --> 01:05:42,000
这些程序可能不会直接跟你打交道

1866
01:05:42,000 --> 01:05:44,000
也可能会跟你打交道

1867
01:05:44,000 --> 01:05:45,000
但是他们在跟你打交道的时候

1868
01:05:45,000 --> 01:05:48,000
并不会被称为 shell

1869
01:05:48,000 --> 01:05:51,000
如果早期比较迷惑的那件事情

1870
01:05:51,000 --> 01:05:52,000
但是

1871
01:05:52,000 --> 01:05:55,000
所以 shell 类比于图形层的话

1872
01:05:55,000 --> 01:05:56,000
应该是属于哪一层

1873
01:05:56,000 --> 01:05:59,000
应该是属于这个 goo 的那些

1874
01:05:59,000 --> 01:06:03,000
那些组件那一层应该是

1875
01:06:03,000 --> 01:06:05,000
对应该可以理解

1876
01:06:05,000 --> 01:06:07,000
大致可以这么对应起来

1877
01:06:07,000 --> 01:06:11,000
但是当然这个 goo 的层级

1878
01:06:11,000 --> 01:06:12,000
哪至于抽象的复杂程度

1879
01:06:12,000 --> 01:06:15,000
都要比 shell 要高的多的多

1880
01:06:16,000 --> 01:06:17,000
对

1881
01:06:17,000 --> 01:06:19,000
然后早期的 shell 也是面向行的

1882
01:06:19,000 --> 01:06:22,000
因为 shell 的一个功用

1883
01:06:22,000 --> 01:06:24,000
就是让你在 terminal 上

1884
01:06:24,000 --> 01:06:26,000
可以跟远程机交互

1885
01:06:26,000 --> 01:06:28,000
而所有的交互都

1886
01:06:29,000 --> 01:06:30,000
因为早期电传脑的影响

1887
01:06:30,000 --> 01:06:32,000
被限制为一行一行

1888
01:06:32,000 --> 01:06:33,000
所以在早期的 shell 里面

1889
01:06:33,000 --> 01:06:34,000
你也是大部分时候

1890
01:06:34,000 --> 01:06:36,000
你会通过一行来输入命令

1891
01:06:37,000 --> 01:06:38,000
UNIX 早期作者之一

1892
01:06:38,000 --> 01:06:40,000
就是我们上一期提到

1893
01:06:40,000 --> 01:06:42,000
大名鼎鼎的 Kentumberson

1894
01:06:42,000 --> 01:06:44,000
他在写 UNIX 的时候

1895
01:06:44,000 --> 01:06:47,000
也沿用了 shell 的称呼

1896
01:06:47,000 --> 01:06:50,000
但是 Kentumberson 所写的 shell

1897
01:06:50,000 --> 01:06:54,000
要比 multi 的 shell 多很多特征

1898
01:06:54,000 --> 01:06:55,000
比如说一个最早期的

1899
01:06:55,000 --> 01:06:57,000
最重要的特征之一

1900
01:06:57,000 --> 01:07:02,000
就是所谓的输入输出重定项

1901
01:07:02,000 --> 01:07:02,000
对吧

1902
01:07:02,000 --> 01:07:05,000
我们不管是到次用户还是

1903
01:07:05,000 --> 01:07:07,000
另一个次用户一定都很熟悉

1904
01:07:07,000 --> 01:07:09,000
如果你用命令好的话

1905
01:07:09,000 --> 01:07:10,000
你一定会知道

1906
01:07:10,000 --> 01:07:11,000
你可以把一个文件的内容

1907
01:07:11,000 --> 01:07:14,000
当做某一个命令的输入

1908
01:07:14,000 --> 01:07:15,000
传给这个命令

1909
01:07:15,000 --> 01:07:17,000
或者把命令的输出

1910
01:07:17,000 --> 01:07:18,000
转化为一个文件

1911
01:07:18,000 --> 01:07:19,000
对吧

1912
01:07:19,000 --> 01:07:20,000
然后这个特征是通过大约号

1913
01:07:20,000 --> 01:07:21,000
小约号的实现

1914
01:07:21,000 --> 01:07:23,000
然后这个功能

1915
01:07:23,000 --> 01:07:24,000
在最开始的时候

1916
01:07:24,000 --> 01:07:25,000
就是 Kentumberson 所写的

1917
01:07:25,000 --> 01:07:26,000
第一代的

1918
01:07:26,000 --> 01:07:28,000
UNIX shell 的一个功能

1919
01:07:28,000 --> 01:07:29,000
这是 1971 年的事情

1920
01:07:29,000 --> 01:07:33,000
所以你每次在做输入重定项的时候

1921
01:07:33,000 --> 01:07:37,000
你就在使用一个 1971 年就有的一个功能

1922
01:07:37,000 --> 01:07:39,000
想想还是挺特别的

1923
01:07:42,000 --> 01:07:45,000
然后后期 Kentumberson 的 shell 也多了

1924
01:07:45,000 --> 01:07:47,000
就是 pipe 这只功能

1925
01:07:47,000 --> 01:07:49,000
就是我们今天会

1926
01:07:49,000 --> 01:07:49,000
管道服务

1927
01:07:49,000 --> 01:07:53,000
会经常说命令行最强大的工程之一

1928
01:07:53,000 --> 01:07:54,000
就是管道服务

1929
01:07:54,000 --> 01:07:54,000
对吧

1930
01:07:54,000 --> 01:07:55,000
你可以把一个功能

1931
01:07:55,000 --> 01:07:57,000
你可以把一个命令的输出

1932
01:07:57,000 --> 01:07:59,000
也是重定项对

1933
01:07:59,000 --> 01:08:02,000
通过管道服务

1934
01:08:02,000 --> 01:08:04,000
重定项到另外一个程序的输入

1935
01:08:04,000 --> 01:08:07,000
然后这个特征也是在 Kentumberson

1936
01:08:07,000 --> 01:08:10,000
所写的 shell 里面就已经出现了

1937
01:08:10,000 --> 01:08:12,000
然后 1979 年的时候

1938
01:08:12,000 --> 01:08:16,000
UNIX 的 version 7

1939
01:08:16,000 --> 01:08:18,000
简称 V 7 发布了

1940
01:08:18,000 --> 01:08:22,000
然后在随着 V 7 从搭载的 shell

1941
01:08:22,000 --> 01:08:23,000
叫做 BoreShell

1942
01:08:23,000 --> 01:08:28,000
作者应该是 Aggle 语言的作者之一

1943
01:08:28,000 --> 01:08:30,000
叫做 Stefan Bore

1944
01:08:30,000 --> 01:08:33,000
为什么这个 shell

1945
01:08:33,000 --> 01:08:35,000
没有被叫做 Bshell

1946
01:08:35,000 --> 01:08:39,000
就是他直接就延续了 Kentumberson

1947
01:08:39,000 --> 01:08:41,000
所写的 shell 的名字

1948
01:08:41,000 --> 01:08:41,000
叫做 SH

1949
01:08:41,000 --> 01:08:43,000
然后

1950
01:08:43,000 --> 01:08:46,000
因为它是向后兼容的

1951
01:08:46,000 --> 01:08:49,000
Bash 也是向后兼容的

1952
01:08:49,000 --> 01:08:50,000
但可能在这个时候

1953
01:08:50,000 --> 01:08:53,000
给 shell 重明明的风气还没有流行起来

1954
01:08:53,000 --> 01:08:54,000
我觉得

1955
01:08:54,000 --> 01:08:57,000
所以直到今天

1956
01:08:57,000 --> 01:09:02,000
BoreShell 一直也是世界上最为广泛使用的 shell 之一

1957
01:09:02,000 --> 01:09:06,000
因为 System V 7 是一个非常成功的 UNIX 版本

1958
01:09:06,000 --> 01:09:08,000
很多后世的 UNIX 的变种

1959
01:09:08,000 --> 01:09:10,000
也都是以 System V 7 为远蓝本的

1960
01:09:10,000 --> 01:09:13,000
直到今天包括你的

1961
01:09:13,000 --> 01:09:16,000
包括你的手上的 Mac

1962
01:09:16,000 --> 01:09:18,000
你面前的 Mac

1963
01:09:18,000 --> 01:09:20,000
你手上的 iPhone

1964
01:09:20,000 --> 01:09:21,000
还有你的 Android

1965
01:09:21,000 --> 01:09:24,000
全都有 slash bin slash SH

1966
01:09:24,000 --> 01:09:24,000
这个东西

1967
01:09:24,000 --> 01:09:27,000
这个东西是从 1979 年开始就已经存在于

1968
01:09:27,000 --> 01:09:29,000
很多很多计算机系统里面

1969
01:09:29,000 --> 01:09:32,000
对

1970
01:09:32,000 --> 01:09:32,000
然后

1971
01:09:32,000 --> 01:09:38,000
然后从 System V 7 开始

1972
01:09:38,000 --> 01:09:41,000
我们有了 PauseX 标准

1973
01:09:41,000 --> 01:09:47,000
然后 PauseX 标准也定义说 shell 必须存在于 slash bin slash SH 下面

1974
01:09:47,000 --> 01:09:51,000
然后所有符合标准的 shell 也会被叫做 SH

1975
01:09:51,000 --> 01:09:56,000
所以也就是说当某人说 shell 是 sh compatible 的时候

1976
01:09:56,000 --> 01:10:03,000
他会他所指的意思实际上就是指跟我们刚才提到这三种 shell 是互相介绍的

1977
01:10:03,000 --> 01:10:10,000
但如果你一定要非常精确的说一个 shell 是符合 PauseX 的所有标准的话

1978
01:10:10,000 --> 01:10:13,000
你应该说它是 PauseX shell

1979
01:10:15,000 --> 01:10:21,000
然后在 1978 年的时候又开始了另外一个 shell 的研发工作

1980
01:10:21,000 --> 01:10:25,000
这个作者是另外一位

1981
01:10:25,000 --> 01:10:27,000
我们之前也提到过的 Billy Joy

1982
01:10:27,000 --> 01:10:30,000
然后他 Billy Joy 写过什么呢

1983
01:10:30,000 --> 01:10:31,000
快速问他

1984
01:10:31,000 --> 01:10:32,000
Billy Joy 写过什么

1985
01:10:32,000 --> 01:10:35,000
Vi

1986
01:10:35,000 --> 01:10:37,000
不是 Vi

1987
01:10:37,000 --> 01:10:38,000
是 VI

1988
01:10:38,000 --> 01:10:40,000
就是最早期的 V

1989
01:10:40,000 --> 01:10:44,000
编辑器

1990
01:10:44,000 --> 01:10:46,000
他还写了一个 shell 叫做 Seashell

1991
01:10:46,000 --> 01:10:49,000
然后 Seashell 的一个卖点就是

1992
01:10:49,000 --> 01:10:53,000
shell 这个东西就是我们如果不用

1993
01:10:53,000 --> 01:10:54,000
如果你不用 C shell 的话

1994
01:10:54,000 --> 01:10:58,000
你会感觉到 shell 的语法跟 C 离得很远

1995
01:10:58,000 --> 01:11:00,000
但是在 C shell 诞生的那个年代

1996
01:11:00,000 --> 01:11:03,000
UNIX 基本上全都是用 C 来写的

1997
01:11:03,000 --> 01:11:06,000
UNIX 不管是用户程序还是 UNIX 本身都是用 C 来写的

1998
01:11:06,000 --> 01:11:16,000
所以 C shell 的一个设计的理念就是希望能够让 shell 的语法尽量接近于 C 的语法

1999
01:11:16,000 --> 01:11:21,000
当然我们在今天来看可能 C shell 的语法并不那么接近 C

2000
01:11:21,000 --> 01:11:27,000
但是在 80 年代你会觉得我靠这个东西真的是跟写 C 语言太接近了

2001
01:11:27,000 --> 01:11:30,000
但是我

2002
01:11:30,000 --> 01:11:36,000
但是今天我们会觉得说我靠为什么一个语言一个 shell script

2003
01:11:36,000 --> 01:11:39,000
需要写的跟 C 一样这不是自军反导

2004
01:11:39,000 --> 01:11:42,000
但在那个时代如果你在电脑上只有 C

2005
01:11:42,000 --> 01:11:44,000
你也只学过 C 的话

2006
01:11:44,000 --> 01:11:48,000
你会觉得可以用像写 C 语言的一样来写 shell script

2007
01:11:48,000 --> 01:11:49,000
是很爽的一件事情

2008
01:11:50,000 --> 01:11:53,000
然后 C shell 的有很多会非常多的创新

2009
01:11:53,000 --> 01:11:55,000
比如说 history

2010
01:11:55,000 --> 01:11:59,000
就是你现在在命令行下面打 history

2011
01:11:59,000 --> 01:12:01,000
你会看到自己输入过的所有的命令

2012
01:12:01,000 --> 01:12:03,000
以及你比如说你打

2013
01:12:03,000 --> 01:12:04,000
$

2014
01:12:04,000 --> 01:12:12,000
感叹号你会重复前一条命令

2015
01:12:12,000 --> 01:12:15,000
乃至于你打比如说$下滑线

2016
01:12:15,000 --> 01:12:17,000
会会把刚才上一条命令的

2017
01:12:17,000 --> 01:12:20,000
最后一个参数

2018
01:12:20,000 --> 01:12:21,000
argument

2019
01:12:21,000 --> 01:12:21,000
重新用完

2020
01:12:21,000 --> 01:12:24,000
这一切都是源自于 C shell

2021
01:12:24,000 --> 01:12:28,000
是 C shell 创造的这个 history 这个东西

2022
01:12:28,000 --> 01:12:31,000
然后也是从 C shell 开始人们有 drop control

2023
01:12:31,000 --> 01:12:36,000
就是你在 Dots 下面可能没有遇到过这种东西

2024
01:12:36,000 --> 01:12:39,000
就是 Dots 早期不是多任务的吧

2025
01:12:39,000 --> 01:12:41,000
你不可能在 Dots 下面

2026
01:12:41,000 --> 01:12:41,000
不是

2027
01:12:41,000 --> 01:12:43,000
整个那个可以把它 suspend

2028
01:12:43,000 --> 01:12:46,000
但是在 unix 下面

2029
01:12:46,000 --> 01:12:48,000
你从很早很早的时候就可以开始

2030
01:12:48,000 --> 01:12:51,000
比如说你正在解压缩一什么东西

2031
01:12:51,000 --> 01:12:53,000
然后它需要一段时间

2032
01:12:53,000 --> 01:12:55,000
你可以 nctr 加 z 让它进入后台

2033
01:12:55,000 --> 01:12:57,000
然后用 BG 让它在后台继续执行

2034
01:12:57,000 --> 01:12:59,000
然后应该在前台做一些别的什么东西

2035
01:12:59,000 --> 01:13:02,000
然后你可以同时进行很多这样的工作

2036
01:13:02,000 --> 01:13:06,000
比如说我现在用 VIM 习惯就是写到一半

2037
01:13:06,000 --> 01:13:07,000
然后 ctr 加 z

2038
01:13:07,000 --> 01:13:08,000
然后去干点别的

2039
01:13:08,000 --> 01:13:12,000
然后在 FG 把 VIM 弄回来对吧

2040
01:13:12,000 --> 01:13:17,000
然后这个功能也是在 C shell 里面被 BillyJoy 实现的

2041
01:13:17,000 --> 01:13:18,000
我一直有点好奇

2042
01:13:18,000 --> 01:13:19,000
刚才那个场景

2043
01:13:19,000 --> 01:13:25,000
我一般是说在开一个窗口或者 tab 来实现的

2044
01:13:25,000 --> 01:13:29,000
就是用那个就放入后台这个的话

2045
01:13:29,000 --> 01:13:30,000
还真的挺少用

2046
01:13:30,000 --> 01:13:30,000
OK

2047
01:13:30,000 --> 01:13:31,000
我还蛮常用的

2048
01:13:31,000 --> 01:13:32,000
但如果说你的

2049
01:13:32,000 --> 01:13:34,000
你这个系统是一个单

2050
01:13:34,000 --> 01:13:36,000
如果你是一个远程系统的话

2051
01:13:36,000 --> 01:13:37,000
比如说

2052
01:13:37,000 --> 01:13:38,000
然后你只能

2053
01:13:38,000 --> 01:13:40,000
就你再开一个窗口也可以

2054
01:13:40,000 --> 01:13:42,000
但你再开个 SSH 连接

2055
01:13:42,000 --> 01:13:43,000
可能会要等一下

2056
01:13:43,000 --> 01:13:44,000
对这个问题和解法

2057
01:13:44,000 --> 01:13:45,000
其实就是三种

2058
01:13:45,000 --> 01:13:46,000
一多任务

2059
01:13:46,000 --> 01:13:47,000
二 tmax

2060
01:13:47,000 --> 01:13:50,000
就是所谓的 terminal multiplexing

2061
01:13:50,000 --> 01:13:52,000
就是终端奉用

2062
01:13:52,000 --> 01:13:53,000
你可以在一个终端里面

2063
01:13:53,000 --> 01:13:55,000
开很多小终端的窗口

2064
01:13:55,000 --> 01:13:58,000
这也是一个比较重要的奇迹引巧

2065
01:13:58,000 --> 01:13:58,000
就一定要学起来

2066
01:13:58,000 --> 01:14:00,000
然后再第三个方式

2067
01:14:00,000 --> 01:14:02,000
就是你再建立一个连接好

2068
01:14:02,000 --> 01:14:05,000
然后个人是比较清纔于

2069
01:14:05,000 --> 01:14:06,000
这个第一种

2070
01:14:06,000 --> 01:14:07,000
因为一个时间只做一件事情

2071
01:14:07,000 --> 01:14:10,000
就会比较好一些

2072
01:14:10,000 --> 01:14:12,000
OK

2073
01:14:12,000 --> 01:14:13,000
这个看来我也养成这个习惯

2074
01:14:13,000 --> 01:14:15,000
会比较顺畅一些

2075
01:14:15,000 --> 01:14:18,000
而且其实就是早期有很多

2076
01:14:18,000 --> 01:14:20,000
我也曾经试图把 VAM 配置成一个 IE

2077
01:14:20,000 --> 01:14:24,000
因为在 VAM 里面就直接执行程序

2078
01:14:24,000 --> 01:14:25,000
或者是什么

2079
01:14:25,000 --> 01:14:26,000
其实这是徒劳

2080
01:14:26,000 --> 01:14:26,000
对

2081
01:14:26,000 --> 01:14:30,000
那你为什么不直接干脆把 VAM 挂起来

2082
01:14:30,000 --> 01:14:32,000
然后在命令行下面做你该做的事情

2083
01:14:32,000 --> 01:14:33,000
然后该回去的时候回去

2084
01:14:33,000 --> 01:14:33,000
对吧

2085
01:14:33,000 --> 01:14:34,000
就

2086
01:14:34,000 --> 01:14:37,000
这边又这边

2087
01:14:37,000 --> 01:14:38,000
然后回到我们历史课

2088
01:14:38,000 --> 01:14:40,000
这次的历史真的要讲好久

2089
01:14:40,000 --> 01:14:43,000
刚才说 C-Shield

2090
01:14:43,000 --> 01:14:46,000
C-Shield 还有一些别的一些新的创新

2091
01:14:46,000 --> 01:14:48,000
比如说 Tools notation

2092
01:14:48,000 --> 01:14:53,000
就是你在你的 home 进入加目录

2093
01:14:53,000 --> 01:14:54,000
你的比如说你的 home

2094
01:14:54,000 --> 01:14:58,000
你的目录是 slash home slash taw

2095
01:14:58,000 --> 01:15:01,000
然后我可以用一个不按号来代替这个目录

2096
01:15:01,000 --> 01:15:03,000
诸如此类的

2097
01:15:03,000 --> 01:15:04,000
还有什么 drawing

2098
01:15:04,000 --> 01:15:08,000
就是比如说你要在同一行上面运行两个程序

2099
01:15:08,000 --> 01:15:10,000
你可以用一个分号把它们分开

2100
01:15:10,000 --> 01:15:12,000
说运行第一个再运行第二个

2101
01:15:12,000 --> 01:15:14,000
或者你可以用两个 ampersand 把他们连起来

2102
01:15:14,000 --> 01:15:17,000
就是说如果第一个成功了才运行第二

2103
01:15:17,000 --> 01:15:19,000
或者你可以用两个

2104
01:15:19,000 --> 01:15:19,000
对

2105
01:15:19,000 --> 01:15:21,000
用一个 pipe

2106
01:15:21,000 --> 01:15:25,000
比如说只有第一个失败了才会运行第二之类的

2107
01:15:25,000 --> 01:15:27,000
这些代表 ore

2108
01:15:27,000 --> 01:15:27,000
对

2109
01:15:27,000 --> 01:15:31,000
这些都是在 C-Shield 里面发明

2110
01:15:31,000 --> 01:15:33,000
这个跟 C 很像对吧

2111
01:15:33,000 --> 01:15:34,000
ampersand

2112
01:15:34,000 --> 01:15:34,000
ampersand

2113
01:15:34,000 --> 01:15:35,000
pipepipe

2114
01:15:35,000 --> 01:15:36,000
都是原来的 C 的

2115
01:15:37,000 --> 01:15:38,000
对

2116
01:15:38,000 --> 01:15:39,000
然后到了 1980 年的时候

2117
01:15:39,000 --> 01:15:41,000
我们有了 K-Shield

2118
01:15:41,000 --> 01:15:42,000
corn-Shield

2119
01:15:42,000 --> 01:15:47,000
是在这个时候应该是贝尔实验室

2120
01:15:47,000 --> 01:15:49,000
专门为 UNIX 发现

2121
01:15:49,000 --> 01:15:55,000
然后这个时候恰逢所谓的 UNIX Great War

2122
01:15:55,000 --> 01:15:58,000
是在 UNIX 的史上历史上曾出现过一系列的

2123
01:15:58,000 --> 01:16:06,000
因为版权法和商业化的引发了一系列诉讼和口水账

2124
01:16:06,000 --> 01:16:13,000
因此也是因此形式一片大好的 UNIX 分裂了

2125
01:16:13,000 --> 01:16:17,000
给了这些什么微软这种公司的可乘之机

2126
01:16:17,000 --> 01:16:21,000
在这个时代出现了 K-Shield

2127
01:16:21,000 --> 01:16:23,000
就是 Corn-Shield

2128
01:16:23,000 --> 01:16:25,000
他的作者叫做什么 Corn

2129
01:16:25,000 --> 01:16:26,000
对

2130
01:16:26,000 --> 01:16:28,000
他是以 DavidCorn

2131
01:16:28,000 --> 01:16:30,000
以 Corn 来命名的

2132
01:16:30,000 --> 01:16:33,000
然后 Corn 也有一些新的

2133
01:16:33,000 --> 01:16:35,000
也有一些创新

2134
01:16:35,000 --> 01:16:36,000
但是没有 C 上那么多

2135
01:16:36,000 --> 01:16:41,000
而且 K-Shield 从来没有流行起来

2136
01:16:41,000 --> 01:16:45,000
只有 UNIX 的一些官方版本还在用

2137
01:16:45,000 --> 01:16:48,000
就是那个时候 BSD 就专门避免使用它

2138
01:16:48,000 --> 01:16:52,000
因为 K-Shield 原码当时是没有自然发放的

2139
01:16:52,000 --> 01:16:54,000
然后当 Linux 兴起的时候

2140
01:16:54,000 --> 01:16:56,000
K-Shield 更是没有人理

2141
01:16:56,000 --> 01:16:59,000
他们直接就用了 Gino 的 Bash

2142
01:16:59,000 --> 01:17:01,000
对

2143
01:17:01,000 --> 01:17:03,000
然后当 Linux 兴起的时候

2144
01:17:03,000 --> 01:17:08,000
自由人家基金会也专门把 SH 重新开发了一遍

2145
01:17:08,000 --> 01:17:09,000
可以理解

2146
01:17:09,000 --> 01:17:11,000
然后把他命名为 BornAgain Shell

2147
01:17:11,000 --> 01:17:14,000
就专门来凑 Bash 这个词

2148
01:17:14,000 --> 01:17:20,000
BashDen 英语里面是司打

2149
01:17:20,000 --> 01:17:22,000
还是之类的一个词

2150
01:17:22,000 --> 01:17:26,000
我是也是在接受 Bash 很久之后才意识到

2151
01:17:26,000 --> 01:17:27,000
它居然是一个英语名词

2152
01:17:27,000 --> 01:17:32,000
而不是一个命令之类的

2153
01:17:32,000 --> 01:17:36,000
我们来看一下他的官方试义是什么

2154
01:17:36,000 --> 01:17:38,000
Bash

2155
01:17:38,000 --> 01:17:40,000
Strike hard and the violin

2156
01:17:40,000 --> 01:17:41,000
对

2157
01:17:41,000 --> 01:17:42,000
凶狠的撕打

2158
01:17:42,000 --> 01:17:44,000
凶狠的击打

2159
01:17:44,000 --> 01:17:46,000
有两个字叫暴咒

2160
01:17:46,000 --> 01:17:47,000
OK

2161
01:17:47,000 --> 01:17:51,000
各位使用这个暴咒

2162
01:17:51,000 --> 01:17:55,000
暴咒外壳

2163
01:17:55,000 --> 01:17:57,000
暴咒外壳

2164
01:17:57,000 --> 01:18:02,000
暴咒外壳是我们目前计算机世界里面最常见的一个外壳

2165
01:18:02,000 --> 01:18:06,000
如果你是用 OS 10 的话

2166
01:18:06,000 --> 01:18:07,000
或者你是用一个 Linux 的话

2167
01:18:07,000 --> 01:18:09,000
你很有可能是在用 Bash

2168
01:18:09,000 --> 01:18:10,000
当然不一定

2169
01:18:10,000 --> 01:18:16,000
因为 Ubuntu 在前一阵子把他的默认 Shell 改成了 Dash

2170
01:18:16,000 --> 01:18:18,000
Wait a second

2171
01:18:18,000 --> 01:18:19,000
又改回来了

2172
01:18:19,000 --> 01:18:19,000
没有

2173
01:18:19,000 --> 01:18:20,000
是这样的

2174
01:18:20,000 --> 01:18:20,000
不是 Ubuntu

2175
01:18:20,000 --> 01:18:21,000
是 Debian

2176
01:18:21,000 --> 01:18:21,000
对

2177
01:18:21,000 --> 01:18:24,000
Debian 把脚本执行的 Shell

2178
01:18:24,000 --> 01:18:26,000
转化成了 Dash

2179
01:18:26,000 --> 01:18:27,000
但是用户所使用的

2180
01:18:27,000 --> 01:18:27,000
就是那个

2181
01:18:27,000 --> 01:18:29,000
slashbin slashshell 的

2182
01:18:29,000 --> 01:18:30,000
实际是 Dash 提供的

2183
01:18:30,000 --> 01:18:31,000
然后对

2184
01:18:31,000 --> 01:18:34,000
但是用户所使用的这个 login shell 还是 Bash

2185
01:18:34,000 --> 01:18:35,000
应该是这样

2186
01:18:35,000 --> 01:18:36,000
对

2187
01:18:36,000 --> 01:18:38,000
Bash

2188
01:18:38,000 --> 01:18:43,000
Bash 集中了这个原有的 Bshell

2189
01:18:43,000 --> 01:18:45,000
然后 Cshell 和 Kshell 的优点

2190
01:18:45,000 --> 01:18:47,000
这就是为什么我们刚才提到

2191
01:18:47,000 --> 01:18:48,000
提各家之所长

2192
01:18:48,000 --> 01:18:48,000
对

2193
01:18:48,000 --> 01:18:50,000
这就是为什么我们刚才提到的大部分功能

2194
01:18:50,000 --> 01:18:52,000
你会说我的 shell 里面也有

2195
01:18:52,000 --> 01:18:55,000
你不需要使用 Cshell 才有 dropcontrol

2196
01:18:55,000 --> 01:18:55,000
为什么

2197
01:18:55,000 --> 01:18:58,000
就是因为 Bash 把 dropcontrol 也挪过

2198
01:18:58,000 --> 01:18:59,000
也移植过来

2199
01:18:59,000 --> 01:19:00,000
对吧

2200
01:19:00,000 --> 01:19:05,000
但是大部分这些 shell 在如果是一个脚本

2201
01:19:05,000 --> 01:19:07,000
你写一个 shell 脚本

2202
01:19:07,000 --> 01:19:08,000
然后在之前写说

2203
01:19:08,000 --> 01:19:11,000
hashbound

2204
01:19:11,000 --> 01:19:11,000
然后 slashbin

2205
01:19:11,000 --> 01:19:13,000
slashashashash 的话

2206
01:19:13,000 --> 01:19:16,000
他们还是会默认去伪装

2207
01:19:16,000 --> 01:19:18,000
把自己伪装成一个 shell

2208
01:19:18,000 --> 01:19:21,000
然后只提供 shell 能够提供的系统

2209
01:19:21,000 --> 01:19:22,000
对

2210
01:19:22,000 --> 01:19:23,000
基本功能

2211
01:19:23,000 --> 01:19:23,000
就不提供一些

2212
01:19:23,000 --> 01:19:26,000
比如说 Bash 的一些特定的语法

2213
01:19:26,000 --> 01:19:26,000
这样

2214
01:19:26,000 --> 01:19:27,000
对

2215
01:19:27,000 --> 01:19:31,000
然后在这个 System 5 release 4

2216
01:19:31,000 --> 01:19:36,000
也是就是 UNIX 的历史上一个非常重要的版本

2217
01:19:36,000 --> 01:19:39,000
里面又出现了一个叫做 Armquist shell

2218
01:19:39,000 --> 01:19:42,000
然后它的缩写就是 ash

2219
01:19:42,000 --> 01:19:44,000
然后它的设计理念是说

2220
01:19:44,000 --> 01:19:46,000
要把这个 shell 做得尽量精巧

2221
01:19:46,000 --> 01:19:48,000
简单

2222
01:19:48,000 --> 01:19:57,000
后来这个 Armquist shell 也被进一步改进

2223
01:19:57,000 --> 01:19:59,000
就形成了 dash

2224
01:19:59,000 --> 01:20:00,000
我们刚才提到 dash 这个东西

2225
01:20:00,000 --> 01:20:02,000
它是一个比较竞见版的 shell

2226
01:20:02,000 --> 01:20:06,000
专门拿来运行脚本程序

2227
01:20:06,000 --> 01:20:07,000
可以这么理解

2228
01:20:07,000 --> 01:20:09,000
dash 那个 d 是 debian 吗

2229
01:20:09,000 --> 01:20:11,000
debianash 应该是这么来的

2230
01:20:11,000 --> 01:20:13,000
对

2231
01:20:13,000 --> 01:20:14,000
我记得应该是这样的

2232
01:20:14,000 --> 01:20:17,000
就是前面有 ashash

2233
01:20:17,000 --> 01:20:20,000
然后是 dash 叫 debian

2234
01:20:20,000 --> 01:20:22,000
debianarmquist shell

2235
01:20:22,000 --> 01:20:23,000
对

2236
01:20:23,000 --> 01:20:25,000
它也是为了凑这个

2237
01:20:25,000 --> 01:20:26,000
凑

2238
01:20:26,000 --> 01:20:27,000
dash

2239
01:20:27,000 --> 01:20:28,000
dash 是一个

2240
01:20:28,000 --> 01:20:29,000
就是什么呢

2241
01:20:29,000 --> 01:20:31,000
冲快速前冲

2242
01:20:31,000 --> 01:20:31,000
小跑

2243
01:20:31,000 --> 01:20:32,000
对

2244
01:20:32,000 --> 01:20:34,000
小跑外壳

2245
01:20:34,000 --> 01:20:35,000
刚才我们介绍了猛击外壳

2246
01:20:35,000 --> 01:20:37,000
然后有小跑外壳

2247
01:20:37,000 --> 01:20:38,000
暴揍外壳

2248
01:20:38,000 --> 01:20:39,000
对对

2249
01:20:39,000 --> 01:20:40,000
暴揍外壳

2250
01:20:40,000 --> 01:20:42,000
小跑

2251
01:20:42,000 --> 01:20:43,000
小跑

2252
01:20:43,000 --> 01:20:44,000
小跑

2253
01:20:44,000 --> 01:20:45,000
OK

2254
01:20:45,000 --> 01:20:48,000
就还有其实还有一些比较不常见

2255
01:20:48,000 --> 01:20:50,000
比较诡异的事要提一下可能

2256
01:20:50,000 --> 01:20:53,000
比如说 p sh

2257
01:20:53,000 --> 01:20:54,000
pearl shell

2258
01:20:54,000 --> 01:20:58,000
就是你可以在 shell 里面使用 pearl 这种奇怪的语言

2259
01:20:58,000 --> 01:21:01,000
来完成一些普通 sh

2260
01:21:01,000 --> 01:21:02,000
做不到的事情

2261
01:21:02,000 --> 01:21:04,000
或者是 yash

2262
01:21:04,000 --> 01:21:06,000
yash

2263
01:21:06,000 --> 01:21:07,000
yash

2264
01:21:07,000 --> 01:21:08,000
yash

2265
01:21:08,000 --> 01:21:09,000
yash

2266
01:21:09,000 --> 01:21:10,000
yash

2267
01:21:10,000 --> 01:21:12,000
是一个 palsic compliant command line shell

2268
01:21:12,000 --> 01:21:13,000
written by

2269
01:21:13,000 --> 01:21:15,000
Watana Beyouki

2270
01:21:15,000 --> 01:21:16,000
一个日本人

2271
01:21:16,000 --> 01:21:22,000
他的实现的初衷是教大家用 c 语言来写一个 shell

2272
01:21:22,000 --> 01:21:23,000
本来是一个教学项目

2273
01:21:23,000 --> 01:21:24,000
后来又被

2274
01:21:24,000 --> 01:21:27,000
后来又重新改写了

2275
01:21:27,000 --> 01:21:31,000
目的是要成为最 palsic 兼容那个 shell

2276
01:21:31,000 --> 01:21:35,000
世界上最 palsic compliant shell in the world

2277
01:21:35,000 --> 01:21:36,000
对

2278
01:21:36,000 --> 01:21:38,000
都不知道这张是好事还是坏事

2279
01:21:38,000 --> 01:21:39,000
what's the point

2280
01:21:39,000 --> 01:21:42,000
所以这就是为什么没有人用 yash 的原因

2281
01:21:44,000 --> 01:21:45,000
对

2282
01:21:45,000 --> 01:21:49,000
刚才提到一个重要概念就是 sh compatible

2283
01:21:49,000 --> 01:21:51,000
就是你会说

2284
01:21:51,000 --> 01:21:52,000
兼容 shell

2285
01:21:52,000 --> 01:21:53,000
你会说

2286
01:21:53,000 --> 01:21:54,000
就是这个 shell 是特指

2287
01:21:54,000 --> 01:21:56,000
不是一泛指的一个 shell

2288
01:21:56,000 --> 01:21:59,000
是特指最开始那个最早版本的 shell

2289
01:21:59,000 --> 01:22:00,000
没错

2290
01:22:01,000 --> 01:22:02,000
就兼容那个是什么意思

2291
01:22:02,000 --> 01:22:04,000
这也是我们推荐

2292
01:22:04,000 --> 01:22:07,000
在这里我们要推荐 stack exchange

2293
01:22:07,000 --> 01:22:11,000
unix 的板块上面的一个答案写得非常好

2294
01:22:11,000 --> 01:22:14,000
然后这个答案里面还顺带的介绍了在不同系统里面

2295
01:22:14,000 --> 01:22:17,000
这个 binsh 所指向的东西是什么

2296
01:22:17,000 --> 01:22:20,000
比如说他说在 Solaris 10 里面

2297
01:22:20,000 --> 01:22:25,000
可能 binsh 就是默认的 original born shell

2298
01:22:25,000 --> 01:22:31,000
然后你可能在这个 linux 里面可能会是 genio bash

2299
01:22:31,000 --> 01:22:35,000
然后你在 openbs 里面可能会是 ksh 93

2300
01:22:35,000 --> 01:22:37,000
和 pausing extensions

2301
01:22:37,000 --> 01:22:39,000
whatever it means

2302
01:22:39,000 --> 01:22:42,000
答案也是推荐大家读一读

2303
01:22:43,000 --> 01:22:44,000
好了

2304
01:22:44,000 --> 01:22:46,000
大概历史就讲到这儿

2305
01:22:46,000 --> 01:22:48,000
然后我们讲现状了吗

2306
01:22:48,000 --> 01:22:59,000
时光期且快进到 2010 年

2307
01:22:59,000 --> 01:23:03,000
或者说 21 世纪的第一个时间已经过去了

2308
01:23:03,000 --> 01:23:05,000
我们还是在使用 shell

2309
01:23:05,000 --> 01:23:07,000
除了今天我不知道 Rail 你

2310
01:23:07,000 --> 01:23:12,000
但是我所使用 shell 是一个叫做 zshell 的东西

2311
01:23:12,000 --> 01:23:14,000
我也是

2312
01:23:14,000 --> 01:23:21,000
我这里可能要说一下刚才提了各种各样的乱七八糟的 shell 有好几种

2313
01:23:21,000 --> 01:23:26,000
但其实经过这么多年这个系统就变成了

2314
01:23:26,000 --> 01:23:27,000
大浪逃杀

2315
01:23:27,000 --> 01:23:29,000
现在剩下的也就那么几个了

2316
01:23:29,000 --> 01:23:33,000
一个是绝大多数的 linux 发行版

2317
01:23:33,000 --> 01:23:37,000
和这个像 west 也是默认识用的这个 bash

2318
01:23:37,000 --> 01:23:43,000
然后有一小撮 shell 死忠粉在兼持上的一个 z

2319
01:23:43,000 --> 01:23:45,000
z

2320
01:23:45,000 --> 01:23:46,000
z 是吗

2321
01:23:46,000 --> 01:23:47,000
z

2322
01:23:47,000 --> 01:23:48,000
z

2323
01:23:48,000 --> 01:23:52,000
还有就是在一些精简系统上或者是嵌入式系统上

2324
01:23:52,000 --> 01:23:53,000
像这个

2325
01:23:53,000 --> 01:23:56,000
像一个 busybox 里面自带的那个

2326
01:23:56,000 --> 01:23:57,000
应该是 ash

2327
01:23:57,000 --> 01:23:58,000
那个是 ash

2328
01:23:58,000 --> 01:24:01,000
就是在比较减普通的

2329
01:24:01,000 --> 01:24:03,000
或者说功能比较低价的

2330
01:24:03,000 --> 01:24:05,000
不需要经常交互的操作性能里面

2331
01:24:05,000 --> 01:24:07,000
基本上就提供一个 ash to go

2332
01:24:07,000 --> 01:24:08,000
对

2333
01:24:08,000 --> 01:24:09,000
就是复杂度比较

2334
01:24:09,000 --> 01:24:11,000
那个的复杂度也比较低嘛

2335
01:24:11,000 --> 01:24:13,000
适合在那种资源比较有限的系统上实现

2336
01:24:13,000 --> 01:24:14,000
对

2337
01:24:14,000 --> 01:24:16,000
先说这个 westen

2338
01:24:16,000 --> 01:24:18,000
因为我们这个常用的主机都是这个

2339
01:24:18,000 --> 01:24:22,000
OS 10 现在的版本里面起码是自带两个 shell 的

2340
01:24:22,000 --> 01:24:23,000
一个是 bash

2341
01:24:23,000 --> 01:24:25,000
一个是 z

2342
01:24:25,000 --> 01:24:26,000
对

2343
01:24:26,000 --> 01:24:27,000
有一个什么问题呢

2344
01:24:27,000 --> 01:24:30,000
因为 bash 从 4.0 开始

2345
01:24:30,000 --> 01:24:31,000
对

2346
01:24:31,000 --> 01:24:33,000
OS 10 自带的版本

2347
01:24:33,000 --> 01:24:34,000
bash 的版本特别老

2348
01:24:34,000 --> 01:24:39,000
原因是因为 bash 4.0 开始他们切换到 GPL v 3 吧应该是

2349
01:24:39,000 --> 01:24:41,000
对

2350
01:24:41,000 --> 01:24:42,000
对

2351
01:24:42,000 --> 01:24:43,000
的这个这个授权协议

2352
01:24:43,000 --> 01:24:47,000
然后这个跟 OS 10 这个商业不开源产品是有冲突的

2353
01:24:47,000 --> 01:24:50,000
所以他们的就是 OS 10 搭载的这个 bash

2354
01:24:50,000 --> 01:24:52,000
可能永远只能停留在 3 点

2355
01:24:52,000 --> 01:24:56,000
就是大版本号是 3 的这个版本系列

2356
01:24:56,000 --> 01:24:59,000
没有办法再进步到这个 4 了

2357
01:24:59,000 --> 01:25:00,000
对

2358
01:25:00,000 --> 01:25:01,000
就是

2359
01:25:01,000 --> 01:25:02,000
呃

2360
01:25:02,000 --> 01:25:03,000
West 10 还自带了一个 zash 嘛

2361
01:25:03,000 --> 01:25:05,000
zash 使用的应该是 bsd 协议吧

2362
01:25:05,000 --> 01:25:06,000
zash

2363
01:25:06,000 --> 01:25:07,000
bsd 协议吧

2364
01:25:07,000 --> 01:25:08,000
确认一下

2365
01:25:08,000 --> 01:25:09,000
确认一下

2366
01:25:09,000 --> 01:25:10,000
确认一下

2367
01:25:10,000 --> 01:25:11,000
我记得是 bsd 协议

2368
01:25:11,000 --> 01:25:13,000
对

2369
01:25:13,000 --> 01:25:17,000
zash 是 mit 协议的

2370
01:25:17,000 --> 01:25:19,000
类 mit 协议的

2371
01:25:19,000 --> 01:25:22,000
就是它更灵活一些嘛

2372
01:25:22,000 --> 01:25:23,000
啊

2373
01:25:23,000 --> 01:25:27,000
所以就 OS 10 还是可以就是继续搭载它最新版本

2374
01:25:27,000 --> 01:25:30,000
就基本上 OS 10 搭载的最新版本都

2375
01:25:30,000 --> 01:25:32,000
比大家的版本

2376
01:25:32,000 --> 01:25:35,000
比最新版本基本都只差一两个小版本好

2377
01:25:35,000 --> 01:25:36,000
嗯

2378
01:25:36,000 --> 01:25:37,000
挺好

2379
01:25:37,000 --> 01:25:39,000
而且 zash 也更新不是那么轻吧

2380
01:25:39,000 --> 01:25:40,000
所以还还好

2381
01:25:40,000 --> 01:25:41,000
对

2382
01:25:41,000 --> 01:25:43,000
最新一版的 Z 是 5.1

2383
01:25:43,000 --> 01:25:45,000
2015 年 8 月 30

2384
01:25:45,000 --> 01:25:46,000
两个月前了

2385
01:25:46,000 --> 01:25:47,000
嗯

2386
01:25:47,000 --> 01:25:48,000
嗯

2387
01:25:48,000 --> 01:25:50,000
然后如果你还是坚持要用 bash 的话

2388
01:25:50,000 --> 01:25:53,000
基本上非常推荐你的一点是

2389
01:25:53,000 --> 01:25:54,000
可以 homebrew 再装

2390
01:25:54,000 --> 01:25:56,000
赶紧用 homebrew 装一个新版的 bash

2391
01:25:56,000 --> 01:25:58,000
就如果你是一个初学者的话

2392
01:25:58,000 --> 01:26:00,000
然后你可能暂时说我要保守一点

2393
01:26:00,000 --> 01:26:06,000
先从一个原流比较古早的东西开入手的话

2394
01:26:06,000 --> 01:26:11,000
因为我相信大部分的 Linux 的这个教程上面也会用 bash

2395
01:26:11,000 --> 01:26:12,000
作为主要的教学工具

2396
01:26:12,000 --> 01:26:13,000
那你可以

2397
01:26:13,000 --> 01:26:14,000
对

2398
01:26:14,000 --> 01:26:15,000
因为模型是那个嘛

2399
01:26:15,000 --> 01:26:16,000
所以最好是先

2400
01:26:16,000 --> 01:26:18,000
所以 zash 的来历是什么

2401
01:26:18,000 --> 01:26:20,000
zash 的来历是怎么样

2402
01:26:20,000 --> 01:26:28,000
zash 是 1990 年的时候的一个叫做 Paul Foster

2403
01:26:28,000 --> 01:26:29,000
Foster

2404
01:26:29,000 --> 01:26:32,000
Foster 是那个

2405
01:26:32,000 --> 01:26:33,000
你为什么要笑

2406
01:26:33,000 --> 01:26:37,000
Hero of the Storm 里面一个奇失救的哥们

2407
01:26:37,000 --> 01:26:42,000
他是在摩世线里面应该是在 Hinterland

2408
01:26:42,000 --> 01:26:47,000
新特兰的那个施救城邦里面的主管

2409
01:26:47,000 --> 01:26:48,000
叫做 Foster

2410
01:26:48,000 --> 01:26:49,000
OK

2411
01:26:49,000 --> 01:26:50,000
Paul Foster

2412
01:26:50,000 --> 01:26:51,000
是一个学人

2413
01:26:51,000 --> 01:26:56,000
脑中浮现出了一个矮人骑在施救上打电脑的场景

2414
01:26:56,000 --> 01:26:59,000
然后他在 1990 年的时候读普林斯顿

2415
01:26:59,000 --> 01:27:01,000
他是一个学生

2416
01:27:01,000 --> 01:27:02,000
他是一个学生

2417
01:27:02,000 --> 01:27:05,000
然后他的导师叫做少忠

2418
01:27:05,000 --> 01:27:07,000
一个华人

2419
01:27:07,000 --> 01:27:08,000
是个好

2420
01:27:08,000 --> 01:27:09,000
是个华人

2421
01:27:09,000 --> 01:27:14,000
然后少忠的登陆名叫做 ZSH

2422
01:27:14,000 --> 01:27:16,000
是中少对吧

2423
01:27:16,000 --> 01:27:18,000
先名后姓

2424
01:27:18,000 --> 01:27:20,000
然后他觉得这个名字很屌

2425
01:27:20,000 --> 01:27:25,000
就用 Zshell 来当做自己写这个 shell 的名字

2426
01:27:25,000 --> 01:27:27,000
ZSH 来当做自己写这个 shell 的名字

2427
01:27:27,000 --> 01:27:32,000
然后但是 Zshell 和 Cshell 也是押韵的对吧

2428
01:27:32,000 --> 01:27:33,000
对

2429
01:27:33,000 --> 01:27:34,000
是这么来的

2430
01:27:34,000 --> 01:27:39,000
然后他出于某种原因把它做得非常的复杂又强大

2431
01:27:39,000 --> 01:27:43,000
我觉得肯定是就觉得已经到了 90 年代的

2432
01:27:43,000 --> 01:27:47,000
我们应该给这个古老的与时俱进

2433
01:27:47,000 --> 01:27:49,000
所以做了非常多的优化

2434
01:27:49,000 --> 01:27:55,000
比如说他提供了 extensive 的这个

2435
01:27:55,000 --> 01:27:58,000
输入提示

2436
01:27:58,000 --> 01:28:00,000
就是你在输入一个命令的话

2437
01:28:00,000 --> 01:28:02,000
你在 bash 下面按 tab

2438
01:28:02,000 --> 01:28:04,000
你可能只会得到

2439
01:28:04,000 --> 01:28:06,000
tab

2440
01:28:06,000 --> 01:28:07,000
ok

2441
01:28:07,000 --> 01:28:11,000
在 bash 下面输入一个命令的一半按 tab

2442
01:28:11,000 --> 01:28:14,000
他会补权到什么地方为止

2443
01:28:14,000 --> 01:28:16,000
补权到他能够

2444
01:28:16,000 --> 01:28:18,000
第一个字符

2445
01:28:18,000 --> 01:28:20,000
就是有奇异的第一个字符

2446
01:28:20,000 --> 01:28:22,000
会补权到第一个奇异为止

2447
01:28:22,000 --> 01:28:26,000
然后 Zshell 则会列出所有可能的命令

2448
01:28:26,000 --> 01:28:30,000
在你当前行下面列出所有可能的命令

2449
01:28:30,000 --> 01:28:35,000
然后 Zshell 还会就像 Google 一样会问你说

2450
01:28:35,000 --> 01:28:37,000
如果你输错了一个命令的话

2451
01:28:37,000 --> 01:28:40,000
他会问你说你是不是想要执行另外一个命令

2452
01:28:40,000 --> 01:28:41,000
但有时候这个挺讨厌的

2453
01:28:41,000 --> 01:28:42,000
但是

2454
01:28:42,000 --> 01:28:44,000
就还带这个 autocorrection

2455
01:28:44,000 --> 01:28:45,000
stellingcorrection 功能

2456
01:28:45,000 --> 01:28:47,000
当然我们现在都用 fuck 了

2457
01:28:47,000 --> 01:28:50,000
如果我们待会提到 fuck 这个东西

2458
01:28:50,000 --> 01:28:54,000
然后他还可以做一些比较神的事情

2459
01:28:54,000 --> 01:28:58,000
比如说你要 scp 到一个远端的服务器上

2460
01:28:58,000 --> 01:29:03,000
在 bash 里面你必须记住远端的服务器的命令

2461
01:29:03,000 --> 01:29:05,000
那个路径是什么

2462
01:29:05,000 --> 01:29:06,000
路径

2463
01:29:06,000 --> 01:29:08,000
但是在 Zshell 里面你需要不停的按 tab

2464
01:29:08,000 --> 01:29:11,000
他会帮你补权远程服务器上的路径

2465
01:29:11,000 --> 01:29:12,000
这也是很屌

2466
01:29:12,000 --> 01:29:13,000
实用又很屌

2467
01:29:13,000 --> 01:29:15,000
非常的黑毛发

2468
01:29:15,000 --> 01:29:18,000
另外就是我个人最喜欢的一点

2469
01:29:18,000 --> 01:29:22,000
就是他可以在屏幕的右侧显示一个 promote

2470
01:29:22,000 --> 01:29:24,000
在右侧有一个提示符

2471
01:29:24,000 --> 01:29:25,000
这个还

2472
01:29:25,000 --> 01:29:28,000
对标准状态下一般都只有在左侧提示

2473
01:29:28,000 --> 01:29:34,000
因为字符串的补齐的方式是这样子

2474
01:29:34,000 --> 01:29:37,000
然后如果你在右端上你要做一些额外的事情

2475
01:29:37,000 --> 01:29:38,000
要 redraw 之类的

2476
01:29:38,000 --> 01:29:39,000
对吧

2477
01:29:39,000 --> 01:29:40,000
对

2478
01:29:40,000 --> 01:29:43,000
有时候有那些不那么重要的信息

2479
01:29:43,000 --> 01:29:45,000
你放在右边还是比较好

2480
01:29:45,000 --> 01:29:48,000
比如说我现在在右边放当前的时间

2481
01:29:48,000 --> 01:29:49,000
用户名主机

2482
01:29:49,000 --> 01:29:54,000
然后是 Python Virtual Environment 的名称

2483
01:29:54,000 --> 01:29:55,000
对

2484
01:29:55,000 --> 01:29:56,000
对

2485
01:29:56,000 --> 01:30:00,000
然后左边就只放目录和大约号提示符

2486
01:30:00,000 --> 01:30:02,000
我觉得还蛮方便

2487
01:30:02,000 --> 01:30:05,000
所以这里其实要说一点

2488
01:30:05,000 --> 01:30:08,000
就是说刚才讲的 ZShell 的大部分这种高级特性

2489
01:30:08,000 --> 01:30:12,000
其实在后来的新版本的 bash 里面

2490
01:30:12,000 --> 01:30:16,000
也通过各种各样的方式能够逐渐实现了

2491
01:30:16,000 --> 01:30:17,000
对

2492
01:30:17,000 --> 01:30:19,000
所以在 feature 就是什么呢

2493
01:30:19,000 --> 01:30:21,000
就是在特性的完成度上

2494
01:30:21,000 --> 01:30:25,000
现代版本的 ZShell 和现代版本的 bash 是相差不大

2495
01:30:25,000 --> 01:30:26,000
对

2496
01:30:26,000 --> 01:30:30,000
但是在 90 年代 ZShell 的很多特性是现在的

2497
01:30:30,000 --> 01:30:33,000
是那个时候的 bash 用户不可想象

2498
01:30:33,000 --> 01:30:34,000
不可想象

2499
01:30:34,000 --> 01:30:41,000
这就是为什么从 90 年代开始有了一大堆这个 ZShell

2500
01:30:41,000 --> 01:30:47,000
然后一直到今天在大概在 2010 年前后出现了一个做

2501
01:30:47,000 --> 01:30:50,000
叫做 All my ZShell 的项目

2502
01:30:50,000 --> 01:30:56,000
这是一个由社区维护的 ZShell 的配置和插件的一个集合

2503
01:30:56,000 --> 01:30:57,000
对

2504
01:30:57,000 --> 01:30:59,000
就是如果你去装一个 All my ZShell 的话

2505
01:30:59,000 --> 01:31:02,000
你可以很多很多东西就只需要改一个小小的配置文件

2506
01:31:02,000 --> 01:31:04,000
里面的一行就可以用到

2507
01:31:05,000 --> 01:31:10,000
你就可以有个很帅很酷的这么一个就是命令行的提示符

2508
01:31:10,000 --> 01:31:13,000
对比如说它里面提供了几百种主题

2509
01:31:13,000 --> 01:31:18,000
随便改一改你会觉得你会就会让这个不明就里人看到

2510
01:31:18,000 --> 01:31:22,000
我可能在搞什么这是这是什么东西看起来好多位

2511
01:31:23,000 --> 01:31:24,000
当然

2512
01:31:24,000 --> 01:31:25,000
所以我有一个问题问你

2513
01:31:25,000 --> 01:31:28,000
就是为什么你要从 bash 切换到 ZShell

2514
01:31:28,000 --> 01:31:32,000
其实我其实我犹豫过很久

2515
01:31:32,000 --> 01:31:37,000
就是我这个在两者之间反复跳跃了很多次

2516
01:31:38,000 --> 01:31:39,000
OK

2517
01:31:39,000 --> 01:31:42,000
但是你的你最终最终要去做这个选择的原因是什么

2518
01:31:42,000 --> 01:31:47,000
最终选择的原因还是因为它的心特性太多了

2519
01:31:47,000 --> 01:31:51,000
或者说对于我来说它的 killer feature

2520
01:31:51,000 --> 01:31:53,000
就是右边的 promote

2521
01:31:54,000 --> 01:31:55,000
对

2522
01:31:55,000 --> 01:31:57,000
这个好像在 bash 里面还现在为止的还比较难实现

2523
01:31:57,000 --> 01:31:58,000
对

2524
01:31:58,000 --> 01:31:59,000
在 bash 里面也是不可能做到这一样

2525
01:32:00,000 --> 01:32:03,000
其他的其实也没什么

2526
01:32:03,000 --> 01:32:08,000
因为我现在的特状况其实是我在办公室会用 bash

2527
01:32:08,000 --> 01:32:10,000
在公司时会用 bash

2528
01:32:10,000 --> 01:32:12,000
然后回到家用 ZShell

2529
01:32:13,000 --> 01:32:17,000
其实这两个的语法在大部分情况下是尖用的

2530
01:32:17,000 --> 01:32:19,000
在 99%情况下你是感觉不到差别的

2531
01:32:19,000 --> 01:32:22,000
只是有时候你在 ZShell 下面会觉得非常方便

2532
01:32:22,000 --> 01:32:24,000
比如说刚才提到命令的问题

2533
01:32:24,000 --> 01:32:26,000
你在 bash 下面你可能要 type 很多次

2534
01:32:26,000 --> 01:32:29,000
然后才能找到自己需要找到那个

2535
01:32:29,000 --> 01:32:31,000
但是在 ZShell 下面你可能再 type 一次

2536
01:32:31,000 --> 01:32:33,000
然后看一看你就知道你要要什么

2537
01:32:33,000 --> 01:32:35,000
但是除此之外

2538
01:32:35,000 --> 01:32:39,000
其实 ZShell 的带来的改进并没有太多

2539
01:32:40,000 --> 01:32:41,000
应该怎么说

2540
01:32:41,000 --> 01:32:44,000
在公司里面我基本不会觉得这里

2541
01:32:44,000 --> 01:32:46,000
如果我是在用 ZShell 就好了

2542
01:32:46,000 --> 01:32:50,000
这就是为什么后来我曾经很多次切换回 bash

2543
01:32:50,000 --> 01:32:52,000
就在自己的电脑上面

2544
01:32:52,000 --> 01:32:58,000
因为总觉得 ZShell 是一个 no standard 的东西

2545
01:32:58,000 --> 01:33:02,000
就要加引号 ZShell 当然也非常常见

2546
01:33:02,000 --> 01:33:07,000
但是没有像 bash 那么到处都有

2547
01:33:07,000 --> 01:33:08,000
对吧

2548
01:33:08,000 --> 01:33:10,000
那我为什么要依赖于这种

2549
01:33:10,000 --> 01:33:13,000
其实没有那么多便利的东西呢

2550
01:33:13,000 --> 01:33:14,000
但后来还是觉得

2551
01:33:14,000 --> 01:33:16,000
可好能方便一点方便一点

2552
01:33:16,000 --> 01:33:17,000
何必呢

2553
01:33:18,000 --> 01:33:22,000
我从 bash 去看到 ZShell 的原因比较简单

2554
01:33:22,000 --> 01:33:25,000
就是我当时做了一个 bash 的一个 promote

2555
01:33:25,000 --> 01:33:28,000
一个小脚本吧

2556
01:33:28,000 --> 01:33:30,000
就是制定义这个

2557
01:33:30,000 --> 01:33:33,000
就是自己定制化这个 bash 的提示符

2558
01:33:33,000 --> 01:33:35,000
然后发现这个 bash

2559
01:33:35,000 --> 01:33:37,000
就是那个 bash powerline

2560
01:33:37,000 --> 01:33:39,000
在那个 github 上

2561
01:33:39,000 --> 01:33:42,000
应该是被新标的最多的一个 repository 吧

2562
01:33:43,000 --> 01:33:44,000
就可以实现比如说

2563
01:33:44,000 --> 01:33:48,000
以一种看起来还挺帅的方式显示

2564
01:33:48,000 --> 01:33:50,000
比如说如果你这个目录是有 git 的话

2565
01:33:50,000 --> 01:33:53,000
它会显示那个 git 的这个 branch 的名字

2566
01:33:53,000 --> 01:33:56,000
它会显示说你有多少个 committed

2567
01:33:56,000 --> 01:33:57,000
你有多少个 committed

2568
01:33:57,000 --> 01:34:01,000
就是 ahead 或者是 behind 远端

2569
01:34:01,000 --> 01:34:02,000
然后它可以显示

2570
01:34:02,000 --> 01:34:05,000
根据你上一条命令的执行的结果

2571
01:34:05,000 --> 01:34:06,000
是正常还是异常

2572
01:34:06,000 --> 01:34:08,000
它会显示是绿色或者是红色

2573
01:34:08,000 --> 01:34:12,000
这样一些比较花巧的功能吧

2574
01:34:12,000 --> 01:34:13,000
OK

2575
01:34:13,000 --> 01:34:15,000
然后在做的过程中就发现

2576
01:34:15,000 --> 01:34:18,000
其实那个 bash 的那些语法是比较坑爹的

2577
01:34:18,000 --> 01:34:21,000
就很就比较首先不是太一致

2578
01:34:21,000 --> 01:34:23,000
然后也不太好记

2579
01:34:23,000 --> 01:34:24,000
每次都要去折腾半天

2580
01:34:24,000 --> 01:34:26,000
到底怎么去写去查半天

2581
01:34:26,000 --> 01:34:27,000
到底怎么去写那个

2582
01:34:27,000 --> 01:34:29,000
就是它语法比较 inconsistent

2583
01:34:29,000 --> 01:34:33,000
然后 zash 的那个就会好很多

2584
01:34:33,000 --> 01:34:35,000
所以我最后就切到 zash 上面

2585
01:34:35,000 --> 01:34:37,000
但还有一个很重要的原因就是

2586
01:34:37,000 --> 01:34:40,000
刚才讲的那个 Western 自带的 zash 版本比较新

2587
01:34:40,000 --> 01:34:42,000
然后我又是

2588
01:34:42,000 --> 01:34:44,000
我现在遵循的一个哲学就是

2589
01:34:44,000 --> 01:34:46,000
能不折腾就折腾

2590
01:34:46,000 --> 01:34:48,000
我不想再 homebrew 再装一遍 bash 的

2591
01:34:48,000 --> 01:34:50,000
然后再剃掉这样

2592
01:34:50,000 --> 01:34:51,000
对没错

2593
01:34:51,000 --> 01:34:52,000
对其实我刚才想说的一点也是

2594
01:34:52,000 --> 01:35:03,000
就是 zash 有很多它设立之初想要达成的目的之一就是用 zash 写的 showscript

2595
01:35:03,000 --> 01:35:08,000
或者说用使用了 zash 的扩展

2596
01:35:08,000 --> 01:35:14,000
而不是纯粹的 showsh compatible 的 showscript

2597
01:35:14,000 --> 01:35:20,000
应该要为 bash 写的更易读更易写

2598
01:35:20,000 --> 01:35:23,000
而且更优雅一点

2599
01:35:23,000 --> 01:35:26,000
应该可以应该应该应该使用优雅这个词在这

2600
01:35:26,000 --> 01:35:28,000
但是很遗憾这一点并没有铺开来

2601
01:35:28,000 --> 01:35:32,000
就是这世界上大部分的 showscript 还是要么是 shell

2602
01:35:32,000 --> 01:35:33,000
要么是 bash

2603
01:35:33,000 --> 01:35:38,000
还是很少有人在用写 zsh 的 showscript

2604
01:35:38,000 --> 01:35:40,000
可能要为 c 实的还要是

2605
01:35:40,000 --> 01:35:42,000
其实如果写 script 的话

2606
01:35:42,000 --> 01:35:47,000
其实还是有最精简的 shell 的语法会通用性会强一点

2607
01:35:47,000 --> 01:35:48,000
对

2608
01:35:48,000 --> 01:35:52,000
但是很多人会觉得说比如说 bash 的一些扩展

2609
01:35:52,000 --> 01:35:57,000
比如说双方括号

2610
01:35:57,000 --> 01:36:02,000
要比单括号要能够表达的语义时间更多一些

2611
01:36:02,000 --> 01:36:03,000
对吧

2612
01:36:03,000 --> 01:36:04,000
所以很多人会选择用 shell

2613
01:36:04,000 --> 01:36:06,000
用 bash 来写 shell script

2614
01:36:06,000 --> 01:36:10,000
但是这个数目还是要远远多于

2615
01:36:10,000 --> 01:36:13,000
用 zshowscript

2616
01:36:13,000 --> 01:36:15,000
这一点还是挺遗憾的

2617
01:36:15,000 --> 01:36:16,000
那倒是

2618
01:36:17,000 --> 01:36:21,000
其实除了这些比较正统的 shell 之外

2619
01:36:21,000 --> 01:36:23,000
也有一些比较新的尝试

2620
01:36:23,000 --> 01:36:24,000
最近几年出现的

2621
01:36:24,000 --> 01:36:27,000
就是说为什么要有那么多的历史包袱

2622
01:36:27,000 --> 01:36:29,000
假如我们不考虑下后兼容性的话

2623
01:36:29,000 --> 01:36:33,000
对如果抛开 pashsh compatibility 这个历史包袱的话

2624
01:36:33,000 --> 01:36:36,000
那今天的 shell 真是可以各种各样

2625
01:36:36,000 --> 01:36:37,000
对

2626
01:36:37,000 --> 01:36:40,000
其中比较著名的就是这个叫做 fish 的吧

2627
01:36:40,000 --> 01:36:41,000
这个鱼

2628
01:36:41,000 --> 01:36:42,000
鱼壳

2629
01:36:42,000 --> 01:36:44,000
算是用的最多一个

2630
01:36:44,000 --> 01:36:46,000
最著名的 shell 不兼容

2631
01:36:46,000 --> 01:36:48,000
sh 不兼容的 shell

2632
01:36:48,000 --> 01:36:49,000
对对对

2633
01:36:49,000 --> 01:36:52,000
所以你有日常在用吗

2634
01:36:52,000 --> 01:36:57,000
我有一段时间才把它用当做主力 shell 来用

2635
01:36:57,000 --> 01:36:58,000
它确实挺方便的

2636
01:36:58,000 --> 01:36:59,000
它很多

2637
01:36:59,000 --> 01:37:01,000
很多这个 modern feature

2638
01:37:01,000 --> 01:37:03,000
很多现代的特性

2639
01:37:03,000 --> 01:37:06,000
比如说就是有这个语法高量的 mini 行

2640
01:37:06,000 --> 01:37:07,000
对你会这个输入的行

2641
01:37:07,000 --> 01:37:10,000
有时候你会产生一种我在用一个 IDE

2642
01:37:10,000 --> 01:37:11,000
的这样做觉

2643
01:37:11,000 --> 01:37:12,000
就是比如说你打一个

2644
01:37:12,000 --> 01:37:14,000
你打个 LS

2645
01:37:14,000 --> 01:37:17,000
然后他会把 LS 所能显示的所有的参数

2646
01:37:17,000 --> 01:37:20,000
所能使用的所有的参数显示在你当前行的下面

2647
01:37:20,000 --> 01:37:22,000
对

2648
01:37:22,000 --> 01:37:26,000
然后他就是还有一些像那个自动补齐的下拉列表啊

2649
01:37:26,000 --> 01:37:29,000
还有各种各样的这种一些很好的特性

2650
01:37:29,000 --> 01:37:30,000
甚至还有一个

2651
01:37:30,000 --> 01:37:32,000
他好像是一个网页版本的什么东西来的

2652
01:37:32,000 --> 01:37:36,000
他的那个主题是可以通过 CSS

2653
01:37:36,000 --> 01:37:39,000
还是什么的东西来配这个

2654
01:37:39,000 --> 01:37:40,000
对对对

2655
01:37:40,000 --> 01:37:42,000
他的配色也是这个很功能

2656
01:37:42,000 --> 01:37:43,000
说到配色要讲

2657
01:37:43,000 --> 01:37:45,000
要讲那个 256 色那些

2658
01:37:45,000 --> 01:37:49,000
其实在 shell 里面打出有颜色的字这件事来说还是挺麻烦的

2659
01:37:49,000 --> 01:37:53,000
对有时候你可能会觉得说我现在已经 60 年过去的

2660
01:37:53,000 --> 01:37:57,000
我居然还是不能在终端之下

2661
01:37:57,000 --> 01:37:59,000
很方便的搞出颜色

2662
01:37:59,000 --> 01:38:03,000
让用户看到我希望能看到的颜色就这么难

2663
01:38:03,000 --> 01:38:04,000
这是对

2664
01:38:04,000 --> 01:38:07,000
就是要也要吐槽的一件事

2665
01:38:07,000 --> 01:38:08,000
对就如果你就使用 item

2666
01:38:08,000 --> 01:38:11,000
然后你要想让 item 看起来漂亮一点的话

2667
01:38:11,000 --> 01:38:12,000
你一定会折腾

2668
01:38:12,000 --> 01:38:14,000
你一定折腾过这个配色方案这个东西

2669
01:38:14,000 --> 01:38:15,000
但是如果你折腾的话

2670
01:38:15,000 --> 01:38:18,000
你会觉得我靠这真是一个巨大的坑

2671
01:38:18,000 --> 01:38:21,000
就是 unix 的

2672
01:38:21,000 --> 01:38:24,000
这个话题我们估计这里不能展开

2673
01:38:24,000 --> 01:38:25,000
对没有办法展开

2674
01:38:25,000 --> 01:38:30,000
你会觉得我靠为什么历史的枷锁一直到 60 年的号叶还套在我的头上

2675
01:38:30,000 --> 01:38:36,000
我为什么要去在意什么 16 色 256 色之类的东西

2676
01:38:36,000 --> 01:38:37,000
没错

2677
01:38:37,000 --> 01:38:39,000
而在 Fish 这边就没有这个问题了

2678
01:38:39,000 --> 01:38:41,000
你想用什么颜色就用什么颜色

2679
01:38:41,000 --> 01:38:45,000
因为他不需要去做监重性的这种东西

2680
01:38:45,000 --> 01:38:46,000
对

2681
01:38:46,000 --> 01:38:47,000
当然了除开我们刚才

2682
01:38:47,000 --> 01:38:53,000
就刚才讲的以上所有 shale 都是一个叫做类 unix 系统的上面使用的 shale

2683
01:38:53,000 --> 01:38:57,000
但其实还有一些大家比较常见的 shale

2684
01:38:57,000 --> 01:38:58,000
但更没有提

2685
01:38:58,000 --> 01:38:59,000
DOS Promote

2686
01:38:59,000 --> 01:39:01,000
其实我们刚才说过

2687
01:39:01,000 --> 01:39:03,000
但是这个东西

2688
01:39:03,000 --> 01:39:07,000
首先 DOS Promote 从来不会把自己叫做一个把自己称为一个 shale

2689
01:39:07,000 --> 01:39:09,000
叫做 shale

2690
01:39:09,000 --> 01:39:10,000
它叫 promotion

2691
01:39:10,000 --> 01:39:11,000
然后

2692
01:39:11,000 --> 01:39:13,000
然后这个东西怎么进行在现在的 windows 里面

2693
01:39:13,000 --> 01:39:16,000
你打开这个开始菜单搜索 cmd

2694
01:39:16,000 --> 01:39:19,000
它就会出来一个命令号

2695
01:39:19,000 --> 01:39:21,000
它中文叫什么来的

2696
01:39:21,000 --> 01:39:22,000
这叫 DOS 命令号

2697
01:39:22,000 --> 01:39:23,000
这叫命令号窗口吧

2698
01:39:23,000 --> 01:39:24,000
就中文版的

2699
01:39:24,000 --> 01:39:25,000
中文版的就是导司

2700
01:39:25,000 --> 01:39:27,000
是吗

2701
01:39:27,000 --> 01:39:28,000
OK

2702
01:39:28,000 --> 01:39:31,000
然后你打开就会出现一个黑不垃圾的窗口

2703
01:39:31,000 --> 01:39:34,000
然后进可能里面最多人跑的两条命令

2704
01:39:34,000 --> 01:39:37,000
一个是叫做 IPConfig

2705
01:39:37,000 --> 01:39:39,000
看自己的这个 IP 地址

2706
01:39:39,000 --> 01:39:41,000
然后第二就是 Ping

2707
01:39:41,000 --> 01:39:43,000
然后第三可能还是就是那个了

2708
01:39:43,000 --> 01:39:44,000
就是 nslookup

2709
01:39:44,000 --> 01:39:45,000
对

2710
01:39:45,000 --> 01:39:46,000
查 DNS 运动

2711
01:39:46,000 --> 01:39:48,000
这些比较常有 DR

2712
01:39:48,000 --> 01:39:50,000
列表的一些作用

2713
01:39:50,000 --> 01:39:54,000
这个可能现在用越来越少

2714
01:39:54,000 --> 01:39:55,000
讲讲还挺讽刺的

2715
01:39:55,000 --> 01:39:57,000
你在这样一个时代

2716
01:39:57,000 --> 01:40:03,000
检测自己能不能连接到另外一台计算机的最常见的方法

2717
01:40:03,000 --> 01:40:10,000
居然还是就是有能使用一个源自于电传导司机时代的一个特征

2718
01:40:10,000 --> 01:40:18,000
一个命令号窗口来输入一台输入一个 70 年代的工具的名字

2719
01:40:18,000 --> 01:40:20,000
历史的包袱还是很纯重

2720
01:40:20,000 --> 01:40:21,000
没错

2721
01:40:21,000 --> 01:40:25,000
就是在过去的四五十年里面居然没有一个方法能够替代它

2722
01:40:25,000 --> 01:40:26,000
嗯

2723
01:40:26,000 --> 01:40:27,000
对

2724
01:40:27,000 --> 01:40:33,000
但也有一些像 Windows 上也有一些比较晚近的新鲜的东西了

2725
01:40:33,000 --> 01:40:35,000
这个叫做 PowerShell

2726
01:40:35,000 --> 01:40:38,000
PowerShell 应该是在 Windows 7 吧

2727
01:40:38,000 --> 01:40:39,000
还是 Vista 的时候才有机

2728
01:40:39,000 --> 01:40:42,000
那你觉得 NT 时代就已经开始研发了

2729
01:40:42,000 --> 01:40:44,000
我没有用过 NT

2730
01:40:44,000 --> 01:40:47,000
我印象中只有在 Vista 或者 Windows 7 里面见过它

2731
01:40:47,000 --> 01:40:49,000
然后 PowerShell 是什么东西呢

2732
01:40:49,000 --> 01:40:50,000
就是一个

2733
01:40:50,000 --> 01:40:53,000
就 Windows 在早期会觉得说

2734
01:40:53,000 --> 01:40:56,000
我靠这个故意难道不是一统天下的东西吗

2735
01:40:56,000 --> 01:40:58,000
我为什么要去搞命令行这一统

2736
01:40:58,000 --> 01:41:02,000
但是后来他们意识到命令行其实生命

2737
01:41:02,000 --> 01:41:03,000
命令行像野草一样

2738
01:41:03,000 --> 01:41:04,000
或者就像

2739
01:41:04,000 --> 01:41:06,000
像底层的

2740
01:41:06,000 --> 01:41:07,000
就命令行还是非常有用的

2741
01:41:07,000 --> 01:41:09,000
像细菌一样会永远活着

2742
01:41:09,000 --> 01:41:10,000
对吧

2743
01:41:10,000 --> 01:41:11,000
那他们发现没办法

2744
01:41:11,000 --> 01:41:14,000
我们也得搞一个程序员能用的那个行

2745
01:41:14,000 --> 01:41:15,000
但是他们最后

2746
01:41:15,000 --> 01:41:19,000
对我想讲这个是 Windows NT 的那个服务器的那些延伸过来

2747
01:41:19,000 --> 01:41:21,000
因为当时好像他们提了一个口号是说

2748
01:41:21,000 --> 01:41:23,000
所有能够在

2749
01:41:23,000 --> 01:41:25,000
就所有通过图形界面能做的

2750
01:41:25,000 --> 01:41:27,000
对这个 Windows NT 的操作

2751
01:41:27,000 --> 01:41:29,000
都可以通过命令行的方式来执行

2752
01:41:29,000 --> 01:41:31,000
然后这个命令行就是 PowerShell

2753
01:41:31,000 --> 01:41:34,000
然后他们就搞出 PowerShell 一种

2754
01:41:34,000 --> 01:41:37,000
这个东西当然跟 SH 是不兼容的

2755
01:41:37,000 --> 01:41:39,000
好

2756
01:41:39,000 --> 01:41:40,000
我就讲吧

2757
01:41:40,000 --> 01:41:41,000
怎么可能

2758
01:41:41,000 --> 01:41:43,000
但是这个东西的语法是非常

2759
01:41:43,000 --> 01:41:46,000
就学习

2760
01:41:46,000 --> 01:41:48,000
学习曲线是比较陡

2761
01:41:48,000 --> 01:41:50,000
他首先区分大小姐

2762
01:41:50,000 --> 01:41:53,000
就你把它做成 Vacial Basic 多好

2763
01:41:53,000 --> 01:41:55,000
不区分大小姐

2764
01:41:55,000 --> 01:41:56,000
首先区分大小姐

2765
01:41:56,000 --> 01:42:04,000
其次他的很多参数和做许多事情的这个方法都非常的啰嗦

2766
01:42:04,000 --> 01:42:08,000
他可能他希望把很多事情做得很正统

2767
01:42:08,000 --> 01:42:10,000
或者很有条理

2768
01:42:10,000 --> 01:42:18,000
但其结果就是如果你有这个 Unix Shell 的背景的话

2769
01:42:18,000 --> 01:42:21,000
你会觉得这套东西是啰嗦到一个境界

2770
01:42:21,000 --> 01:42:24,000
但是我不知道纯粹的微软程序员会怎么下

2771
01:42:24,000 --> 01:42:26,000
可能会感官会不一样

2772
01:42:27,000 --> 01:42:29,000
不过他真的有一个好处就刚刚我说了

2773
01:42:29,000 --> 01:42:34,000
因为他的设计原则是说所有图形界面能做事情他都能做

2774
01:42:34,000 --> 01:42:37,000
所以他的就是 feature completeness

2775
01:42:37,000 --> 01:42:39,000
就是这个功能的完整性

2776
01:42:39,000 --> 01:42:42,000
是目前所有 Share 里面最强大的

2777
01:42:42,000 --> 01:42:45,000
就是你可以完全抛弃这个图形界面

2778
01:42:45,000 --> 01:42:52,000
然后通过这个 share 的方式去改变一个 Windows NT 的服务器的任何一个部分

2779
01:42:52,000 --> 01:42:53,000
对吧

2780
01:42:53,000 --> 01:42:58,000
因为在 Unix 里面有一个哲学就是纯文本至上

2781
01:42:58,000 --> 01:43:03,000
在 Unix 里面在不同命令之间流淌的纯文本

2782
01:43:03,000 --> 01:43:05,000
流可能是你唯一能够依赖的东西

2783
01:43:05,000 --> 01:43:07,000
但是在 Windows 的 PowerShell 里面

2784
01:43:07,000 --> 01:43:10,000
很多东西它已经不再是纯文本的东西了

2785
01:43:10,000 --> 01:43:12,000
它是基于对象的

2786
01:43:12,000 --> 01:43:14,000
它是一个 structured object

2787
01:43:14,000 --> 01:43:18,000
你可以在两个命令之间传递一个 object

2788
01:43:18,000 --> 01:43:21,000
这在 Links 里面是不可想象的

2789
01:43:21,000 --> 01:43:24,000
结构化的数据传输

2790
01:43:24,000 --> 01:43:28,000
而不是基于文本的数据传输

2791
01:43:28,000 --> 01:43:29,000
对

2792
01:43:29,000 --> 01:43:31,000
这在 Links 里面你即便能做到

2793
01:43:31,000 --> 01:43:34,000
也是要通过一大堆什么 TR

2794
01:43:34,000 --> 01:43:37,000
什么 AUK 之类的来实现

2795
01:43:37,000 --> 01:43:38,000
就可靠性很差

2796
01:43:38,000 --> 01:43:39,000
简单来讲

2797
01:43:39,000 --> 01:43:40,000
就灵活性很强

2798
01:43:40,000 --> 01:43:41,000
但可靠性很差

2799
01:43:41,000 --> 01:43:43,000
判断各种 edge case

2800
01:43:43,000 --> 01:43:44,000
比较麻烦

2801
01:43:44,000 --> 01:43:46,000
然后 PowerShell 就完全没有这个问题

2802
01:43:46,000 --> 01:43:49,000
因为它可以传输一个结构化的对象

2803
01:43:49,000 --> 01:43:51,000
保证不需要经过这个序列化

2804
01:43:51,000 --> 01:43:53,000
反序列化造成的种种问题

2805
01:43:53,000 --> 01:43:58,000
可以直接去 access 里面的某一个 property

2806
01:43:58,000 --> 01:44:03,000
而且它是被自上而下设计出来的这么一个 Shell

2807
01:44:03,000 --> 01:44:05,000
它的语法虽然说你可能觉得啰嗦

2808
01:44:05,000 --> 01:44:07,000
但是还有一个好算是比较规整

2809
01:44:07,000 --> 01:44:08,000
就是 regular

2810
01:44:08,000 --> 01:44:09,000
你可以举一反三

2811
01:44:09,000 --> 01:44:11,000
不像 Linux

2812
01:44:11,000 --> 01:44:12,000
像德语一样

2813
01:44:12,000 --> 01:44:13,000
好吧

2814
01:44:13,000 --> 01:44:14,000
不像英语

2815
01:44:14,000 --> 01:44:16,000
你不需要不停的去 RTFM

2816
01:44:16,000 --> 01:44:18,000
你不需要不停的去看音标

2817
01:44:18,000 --> 01:44:19,000
对吧

2818
01:44:19,000 --> 01:44:20,000
对

2819
01:44:20,000 --> 01:44:21,000
你去记住各种特例

2820
01:44:21,000 --> 01:44:22,000
到底怎么样

2821
01:44:22,000 --> 01:44:24,000
会比较痛苦一些

2822
01:44:25,000 --> 01:44:26,000
对

2823
01:44:26,000 --> 01:44:30,000
刚才讲了那么多 Shell 的来龙去脉的种种好吃

2824
01:44:30,000 --> 01:44:32,000
其实我们有一个核心的要探讨的问题就是

2825
01:44:32,000 --> 01:44:33,000
为什么要用 Shell

2826
01:44:33,000 --> 01:44:34,000
为什么要用命令行

2827
01:44:34,000 --> 01:44:36,000
其实这才是本期的重点

2828
01:44:36,000 --> 01:44:38,000
不过你对 Shell 的

2829
01:44:38,000 --> 01:44:39,000
重点估计只有五分钟

2830
01:44:39,000 --> 01:44:40,000
对

2831
01:44:40,000 --> 01:44:41,000
两种去脉

2832
01:44:41,000 --> 01:44:42,000
如果你已经了如指掌的话

2833
01:44:42,000 --> 01:44:46,000
前面的部分真的是可以自己去看书可能会比较快一点

2834
01:44:46,000 --> 01:44:49,000
但是我们做了这么多历史的铺垫

2835
01:44:49,000 --> 01:44:52,000
介绍了这么多咋去咋去咋去

2836
01:44:52,000 --> 01:44:57,000
只想要强调说命令行的生命力在今天还是非常旺盛

2837
01:44:57,000 --> 01:45:00,000
所以为什么要用命令行

2838
01:45:00,000 --> 01:45:03,000
因为它在哪

2839
01:45:03,000 --> 01:45:06,000
它在哪

2840
01:45:06,000 --> 01:45:07,000
不一定你要用

2841
01:45:07,000 --> 01:45:08,000
它的魅力在哪

2842
01:45:08,000 --> 01:45:09,000
为什么

2843
01:45:09,000 --> 01:45:14,000
首先我觉得命令行是非常简单的一件事情

2844
01:45:14,000 --> 01:45:16,000
就是你在写

2845
01:45:16,000 --> 01:45:17,000
Define 简单

2846
01:45:17,000 --> 01:45:23,000
你在使用一个 60 年代开始就已经在被使用的技术

2847
01:45:23,000 --> 01:45:25,000
它是非常的易于理解

2848
01:45:25,000 --> 01:45:28,000
它简单的一个特征

2849
01:45:28,000 --> 01:45:31,000
比如说你自然在单一时间

2850
01:45:31,000 --> 01:45:34,000
只能在屏幕的单一地方输入一个字符

2851
01:45:34,000 --> 01:45:35,000
对吧

2852
01:45:35,000 --> 01:45:36,000
不像

2853
01:45:36,000 --> 01:45:38,000
天生单任务系统

2854
01:45:38,000 --> 01:45:39,000
没错

2855
01:45:39,000 --> 01:45:42,000
不像你在使用一个图形界面的时候

2856
01:45:42,000 --> 01:45:43,000
你有鼠标

2857
01:45:43,000 --> 01:45:45,000
你会想要说

2858
01:45:45,000 --> 01:45:46,000
你要找一个按钮

2859
01:45:46,000 --> 01:45:49,000
但是你的目光你在搜索这个按钮的时候

2860
01:45:49,000 --> 01:45:51,000
你会看到很多其他东西

2861
01:45:51,000 --> 01:45:52,000
命令行不是

2862
01:45:52,000 --> 01:45:53,000
命令行就空大了

2863
01:45:53,000 --> 01:45:54,000
那个东西在那摆着

2864
01:45:54,000 --> 01:45:55,000
然后你要是想不起来的话

2865
01:45:55,000 --> 01:45:56,000
你就想不起来

2866
01:45:56,000 --> 01:45:57,000
然后你要去找的话

2867
01:45:57,000 --> 01:45:58,000
你很有可能

2868
01:45:58,000 --> 01:45:59,000
你就

2869
01:45:59,000 --> 01:46:00,000
你要么找

2870
01:46:00,000 --> 01:46:01,000
你可以直接找到你要找的东西

2871
01:46:01,000 --> 01:46:03,000
要么你就完全找不到

2872
01:46:03,000 --> 01:46:04,000
对吧

2873
01:46:04,000 --> 01:46:06,000
所以这个是缺点

2874
01:46:06,000 --> 01:46:08,000
它的可发现性比较差

2875
01:46:08,000 --> 01:46:12,000
任何事情都是双眼键

2876
01:46:12,000 --> 01:46:15,000
使用图形界面的时候

2877
01:46:15,000 --> 01:46:17,000
我经常会觉得

2878
01:46:17,000 --> 01:46:18,000
distracted

2879
01:46:18,000 --> 01:46:19,000
就是

2880
01:46:19,000 --> 01:46:22,000
因为屏幕上太多的这种

2881
01:46:22,000 --> 01:46:23,000
因为屏幕上

2882
01:46:23,000 --> 01:46:24,000
的小广告

2883
01:46:24,000 --> 01:46:25,000
屏幕上会显示着很多

2884
01:46:25,000 --> 01:46:26,000
你此时用不到

2885
01:46:26,000 --> 01:46:28,000
但是你很有可能

2886
01:46:28,000 --> 01:46:29,000
在下一秒就要用到

2887
01:46:29,000 --> 01:46:30,000
那东西

2888
01:46:30,000 --> 01:46:31,000
嗯

2889
01:46:31,000 --> 01:46:32,000
但你又不可能

2890
01:46:32,000 --> 01:46:34,000
或者说目前还没有一个软件

2891
01:46:34,000 --> 01:46:39,000
会把所有的菜单和工具条

2892
01:46:39,000 --> 01:46:43,000
全都做成隐藏式的或者浮动式

2893
01:46:43,000 --> 01:46:45,000
因为这个是如果那样的话

2894
01:46:45,000 --> 01:46:47,000
你又需要去动一下鼠标

2895
01:46:47,000 --> 01:46:48,000
他们才会弹出来

2896
01:46:48,000 --> 01:46:51,000
或者是你需要去按一个什么东西

2897
01:46:51,000 --> 01:46:52,000
反正总

2898
01:46:52,000 --> 01:46:54,000
所有这些都会让你觉得命令

2899
01:46:54,000 --> 01:46:57,000
这个图形界面固然方便

2900
01:46:57,000 --> 01:47:00,000
但是有时候也特别的啰嗦

2901
01:47:00,000 --> 01:47:01,000
命令好像不一样

2902
01:47:01,000 --> 01:47:03,000
你可能你所要做的两件事情

2903
01:47:03,000 --> 01:47:06,000
就是敲命令和按回车

2904
01:47:06,000 --> 01:47:08,000
或者说你所要做的两件事情

2905
01:47:08,000 --> 01:47:10,000
就是输入和输出

2906
01:47:10,000 --> 01:47:13,000
然后所有这些东西都是在一个特定的地方

2907
01:47:13,000 --> 01:47:14,000
完成的

2908
01:47:14,000 --> 01:47:17,000
然后你需要关注的点也就是只有那么一点

2909
01:47:17,000 --> 01:47:18,000
嗯

2910
01:47:18,000 --> 01:47:19,000
对

2911
01:47:19,000 --> 01:47:23,000
再来就是我觉得其实命令行下面的工具

2912
01:47:23,000 --> 01:47:25,000
要更切重要还一点

2913
01:47:25,000 --> 01:47:26,000
比如说

2914
01:47:26,000 --> 01:47:27,000
比如说 Git

2915
01:47:27,000 --> 01:47:29,000
要看 Git 的 reversion history

2916
01:47:29,000 --> 01:47:31,000
我基本上只会用 Tick

2917
01:47:31,000 --> 01:47:34,000
就我不是没有用过其他的什么 sourced tray

2918
01:47:34,000 --> 01:47:39,000
或者是 atlasian 出的网页版工具

2919
01:47:39,000 --> 01:47:40,000
叫什么来的

2920
01:47:40,000 --> 01:47:41,000
我不记得

2921
01:47:41,000 --> 01:47:43,000
但是所有这些看 Git revision 的工具

2922
01:47:43,000 --> 01:47:45,000
感觉都没有 Tick 方便

2923
01:47:45,000 --> 01:47:46,000
嗯

2924
01:47:46,000 --> 01:47:50,000
而打开 Tick 的步骤

2925
01:47:50,000 --> 01:47:52,000
也就是输出 Tick 按回车而已

2926
01:47:52,000 --> 01:47:53,000
没有什么

2927
01:47:53,000 --> 01:47:54,000
就一步之遥

2928
01:47:54,000 --> 01:47:56,000
然后你离开也只有一步之遥

2929
01:47:56,000 --> 01:47:58,000
不需要去点一个工具

2930
01:47:58,000 --> 01:47:59,000
点一个图标

2931
01:47:59,000 --> 01:48:00,000
然后看它运行

2932
01:48:00,000 --> 01:48:02,000
然后选入选 Repository 之类的

2933
01:48:02,000 --> 01:48:04,000
对吧

2934
01:48:04,000 --> 01:48:05,000
嗯

2935
01:48:05,000 --> 01:48:06,000
嗯

2936
01:48:06,000 --> 01:48:08,000
就我觉得命令行下面很多工具都比较短小

2937
01:48:08,000 --> 01:48:09,000
然后切荣耀

2938
01:48:09,000 --> 01:48:10,000
这是

2939
01:48:10,000 --> 01:48:11,000
所以

2940
01:48:11,000 --> 01:48:12,000
所以其实这句话

2941
01:48:12,000 --> 01:48:14,000
你刚才讲是中文

2942
01:48:14,000 --> 01:48:15,000
翻译成英文

2943
01:48:15,000 --> 01:48:17,000
其实在 unix 的这个

2944
01:48:17,000 --> 01:48:20,000
因为 unix 大部分是一个命令行驱动的工具

2945
01:48:20,000 --> 01:48:21,000
就是室内系统的对吧

2946
01:48:21,000 --> 01:48:24,000
他们追求的这么一个设计哲学叫做

2947
01:48:24,000 --> 01:48:26,000
Do one thing and do it well

2948
01:48:26,000 --> 01:48:27,000
对就是这样

2949
01:48:27,000 --> 01:48:30,000
有一个工具只做一件事

2950
01:48:30,000 --> 01:48:32,000
并且把这件事做到极致

2951
01:48:32,000 --> 01:48:34,000
然后比如说刚才讲的这个 Tick

2952
01:48:34,000 --> 01:48:36,000
它可以去浏览这个

2953
01:48:36,000 --> 01:48:39,000
一个 Git 的 Repository 的情况

2954
01:48:39,000 --> 01:48:42,000
还有其他各种各样的小工具

2955
01:48:42,000 --> 01:48:44,000
它可以去比如说可以去

2956
01:48:44,000 --> 01:48:46,000
列表一个目录的内容啊

2957
01:48:46,000 --> 01:48:48,000
或者是在一个文件里面查找东西啊

2958
01:48:48,000 --> 01:48:50,000
它都是些很小的一个步骤

2959
01:48:50,000 --> 01:48:51,000
然后呢

2960
01:48:51,000 --> 01:48:55,000
因为有于命令行的这个管道的功能

2961
01:48:55,000 --> 01:48:59,000
它可以使得两个程序之间配合

2962
01:48:59,000 --> 01:49:01,000
比如说上一个程序的输入

2963
01:49:01,000 --> 01:49:03,000
输出变成下一个程序的输入

2964
01:49:03,000 --> 01:49:06,000
然后这个这个链条是可以扩得无限长的

2965
01:49:06,000 --> 01:49:09,000
他们之间存在一个叫做可组合性

2966
01:49:09,000 --> 01:49:12,000
就是说如果你的是一个工具箱里面

2967
01:49:12,000 --> 01:49:14,000
有锤子有钉子

2968
01:49:14,000 --> 01:49:17,000
还有吧有锤子有扳手这些东西之外

2969
01:49:17,000 --> 01:49:21,000
它还能组合成一些一套完整的工具链

2970
01:49:21,000 --> 01:49:24,000
使得你可以完成各种各样比较复杂

2971
01:49:24,000 --> 01:49:27,000
或者更加灵活的去应对工作场景

2972
01:49:27,000 --> 01:49:30,000
所以就是工具的这个完善性

2973
01:49:30,000 --> 01:49:32,000
每一个工具的这个小巧可靠

2974
01:49:32,000 --> 01:49:34,000
以及它们之间的相互组合性

2975
01:49:34,000 --> 01:49:39,000
我觉得这个是命令行这个生态最大的魅力所在

2976
01:49:39,000 --> 01:49:40,000
没错

2977
01:49:40,000 --> 01:49:42,000
而反过来在这个图形界面之下

2978
01:49:42,000 --> 01:49:45,000
你就没有这样的概念存在

2979
01:49:45,000 --> 01:49:50,000
就是你你你怎么那样才能把一个图形界面的工具的输出

2980
01:49:50,000 --> 01:49:52,000
转入到另外一个图形界面的工具的输入里面

2981
01:49:52,000 --> 01:49:54,000
你看你 copy and paste

2982
01:49:54,000 --> 01:49:55,000
也有

2983
01:49:55,000 --> 01:49:56,000
对 copy and paste

2984
01:49:56,000 --> 01:49:57,000
或者叫做 drag and drop

2985
01:49:57,000 --> 01:49:58,000
或者是拖拉

2986
01:49:58,000 --> 01:50:00,000
对但这些是没有办法自动化的

2987
01:50:00,000 --> 01:50:01,000
没有办法自动化的

2988
01:50:01,000 --> 01:50:06,000
没有办法同时说我永远要把自动化这些倒不是一个问题

2989
01:50:06,000 --> 01:50:07,000
我觉得最主要的问题就是说

2990
01:50:07,000 --> 01:50:15,000
它们因为图形化的这个内容的传递之间不存在这个一个叫做

2991
01:50:15,000 --> 01:50:17,000
Universal interface

2992
01:50:17,000 --> 01:50:18,000
Universal interface

2993
01:50:18,000 --> 01:50:20,000
就同一的接口就是这个文本 text

2994
01:50:20,000 --> 01:50:21,000
它不就图形化的界面

2995
01:50:21,000 --> 01:50:25,000
它不存在这么一个一个通用的一个接口

2996
01:50:25,000 --> 01:50:28,000
使得并不是任意两个程序之间的这个输出

2997
01:50:28,000 --> 01:50:32,000
都是可以直接 drag and drop 来组合的

2998
01:50:32,000 --> 01:50:34,000
所以必须说你开发了

2999
01:50:34,000 --> 01:50:37,000
假设好你在 photoshop 里面编辑了一个图片

3000
01:50:37,000 --> 01:50:40,000
然后你要导入到另外一个工具里面去做一个进一步的处理

3001
01:50:40,000 --> 01:50:44,000
你得把它变成一个文件

3002
01:50:44,000 --> 01:50:49,000
然后再 hopefully 你的那个下一个环节的工具

3003
01:50:49,000 --> 01:50:51,000
能够打开上一个环节

3004
01:50:51,000 --> 01:50:53,000
这个工具生成的图片

3005
01:50:53,000 --> 01:50:54,000
然后导入到自己的这个里面

3006
01:50:54,000 --> 01:50:56,000
然后再做进一步的操作

3007
01:50:56,000 --> 01:50:57,000
对吧

3008
01:50:57,000 --> 01:51:01,000
所以这里就有一个

3009
01:51:01,000 --> 01:51:04,000
这个 composability

3010
01:51:04,000 --> 01:51:06,000
这个合成性的问题会比稍微差一些

3011
01:51:06,000 --> 01:51:08,000
但这只是一个我们理解通常状况

3012
01:51:08,000 --> 01:51:13,000
但也有很好的这个合成性相对还不错的这么一个环境

3013
01:51:13,000 --> 01:51:16,000
比如说在现在的 iOS 上面就有

3014
01:51:16,000 --> 01:51:18,000
因为这个它没有文件系统暴露出来

3015
01:51:18,000 --> 01:51:20,000
也没有密链行暴露出来给你用

3016
01:51:20,000 --> 01:51:25,000
所以这个上下游的配合是你必须要考

3017
01:51:25,000 --> 01:51:26,000
作为这个系统的设计者

3018
01:51:26,000 --> 01:51:28,000
你必须要考虑的一个问题

3019
01:51:28,000 --> 01:51:31,000
那现在就是说你可以分享到某一个应用里面去

3020
01:51:31,000 --> 01:51:32,000
对吧

3021
01:51:32,000 --> 01:51:36,000
你如果那个应用它刚好能够接受这么一个图片格式

3022
01:51:36,000 --> 01:51:37,000
或者文件格式也好

3023
01:51:37,000 --> 01:51:39,000
它是其实能够把这个链条传下去的

3024
01:51:39,000 --> 01:51:43,000
只是说由于还是那个问题吧

3025
01:51:43,000 --> 01:51:46,000
就不存在这个 text as universal interface

3026
01:51:46,000 --> 01:51:47,000
这么一个核心要件

3027
01:51:47,000 --> 01:51:48,000
同时也不存在一个强有一个机构

3028
01:51:48,000 --> 01:51:51,000
来要求所有的程序都必须实践一下

3029
01:51:51,000 --> 01:51:54,000
这个跟其他程序交互的接口

3030
01:51:54,000 --> 01:51:58,000
所以这个整个还是相对来说比较难一点

3031
01:51:58,000 --> 01:52:01,000
然后我觉得可能命令行对我来说

3032
01:52:01,000 --> 01:52:05,000
另外一个好处就是它可以表述一些比较复杂的一个概念

3033
01:52:05,000 --> 01:52:10,000
比如说因为有这个 shell 语法的存在

3034
01:52:10,000 --> 01:52:14,000
它其实是一个它是一个叫做 turing complete language

3035
01:52:14,000 --> 01:52:16,000
它是一个完整的编程语言对吧

3036
01:52:16,000 --> 01:52:19,000
所以其实里面可以做一些相对来说很复杂的

3037
01:52:19,000 --> 01:52:21,000
或者更加抽象的一些操作

3038
01:52:21,000 --> 01:52:25,000
而这些操作通过点点鼠标这种图形化的方式是比较难办到的

3039
01:52:25,000 --> 01:52:28,000
比如说很多人都遇到过这个难题

3040
01:52:28,000 --> 01:52:32,000
你一个目录里面就假设考虑文件的情况下

3041
01:52:32,000 --> 01:52:35,000
你要批量改一堆文件的文件名

3042
01:52:35,000 --> 01:52:38,000
比如前面加一个前缀或者去掉一个后缀这种事情

3043
01:52:38,000 --> 01:52:40,000
你不借助一些特殊的工具

3044
01:52:40,000 --> 01:52:44,000
在这个图形界面里面是很难实现这一点的

3045
01:52:44,000 --> 01:52:46,000
不可能一个一个点鼠标去改对吧

3046
01:52:46,000 --> 01:52:49,000
但是在命令行下面你其实因为有这个语法的

3047
01:52:49,000 --> 01:52:51,000
这个一个编程语言的存在

3048
01:52:51,000 --> 01:52:56,000
你只是可以对这些文本做一些很高级的操作

3049
01:52:56,000 --> 01:52:59,000
然后把这些操作变成一个实际可以执行的代码

3050
01:52:59,000 --> 01:53:01,000
然后这个代码可能就雕用一个

3051
01:53:01,000 --> 01:53:05,000
比如说 Move 修改文件名的这么一个命令去执行它

3052
01:53:05,000 --> 01:53:08,000
所以这里面也是一个很重要的问题

3053
01:53:08,000 --> 01:53:11,000
但可能现在图形界面里面最接近这个的

3054
01:53:11,000 --> 01:53:13,000
应该是就是像 OS 10 自带的

3055
01:53:13,000 --> 01:53:14,000
叫做 Automator

3056
01:53:14,000 --> 01:53:18,000
自动化的一个工具

3057
01:53:18,000 --> 01:53:19,000
那个图标是一个机器人

3058
01:53:19,000 --> 01:53:21,000
白色的机器人拿着一个黑色的枪

3059
01:53:21,000 --> 01:53:22,000
还是什么的

3060
01:53:22,000 --> 01:53:23,000
你把这个管子吧

3061
01:53:23,000 --> 01:53:24,000
不是枪

3062
01:53:24,000 --> 01:53:25,000
管子对

3063
01:53:25,000 --> 01:53:26,000
黑色的管子

3064
01:53:26,000 --> 01:53:27,000
对

3065
01:53:27,000 --> 01:53:28,000
Pipe

3066
01:53:28,000 --> 01:53:29,000
你可以做一些组合

3067
01:53:29,000 --> 01:53:30,000
但是

3068
01:53:30,000 --> 01:53:32,000
1 万个卖人物没有医院的会用

3069
01:53:32,000 --> 01:53:33,000
这个就是很重要的

3070
01:53:33,000 --> 01:53:34,000
就是高

3071
01:53:34,000 --> 01:53:36,000
高阶 OS 10 的用法

3072
01:53:36,000 --> 01:53:38,000
用户才会去理解

3073
01:53:38,000 --> 01:53:40,000
或者使用到的这么一个场景

3074
01:53:40,000 --> 01:53:41,000
5 Ware 也会用到

3075
01:53:41,000 --> 01:53:42,000
然后他们也做了一些功能

3076
01:53:42,000 --> 01:53:43,000
其实也蛮强大的

3077
01:53:43,000 --> 01:53:45,000
比如说他可以批量的从一个

3078
01:53:45,000 --> 01:53:47,000
假设

3079
01:53:47,000 --> 01:53:50,000
假设一个 PDF 文件里面抽取出多少页

3080
01:53:50,000 --> 01:53:53,000
然后再把这些页批量的转化成一个图片文件

3081
01:53:53,000 --> 01:53:55,000
然后再单独出现在某个地方

3082
01:53:55,000 --> 01:53:56,000
对吧

3083
01:53:56,000 --> 01:53:59,000
或者是批量的去修改一些图片文件

3084
01:53:59,000 --> 01:54:01,000
比如说转换格式啊

3085
01:54:01,000 --> 01:54:02,000
改变文件大小啊

3086
01:54:02,000 --> 01:54:03,000
再压缩啊

3087
01:54:03,000 --> 01:54:04,000
这种

3088
01:54:04,000 --> 01:54:05,000
对

3089
01:54:05,000 --> 01:54:06,000
他也可以有

3090
01:54:06,000 --> 01:54:08,000
但是他学习曲线还是比较陡峭的

3091
01:54:08,000 --> 01:54:09,000
没错

3092
01:54:09,000 --> 01:54:10,000
当然了

3093
01:54:10,000 --> 01:54:11,000
命令行有他自己的缺点了

3094
01:54:11,000 --> 01:54:13,000
比如刚才讲的这个

3095
01:54:13,000 --> 01:54:15,000
就发现性比较差

3096
01:54:15,000 --> 01:54:18,000
就是如果你不知道有一个功能可以用什么方式来实行

3097
01:54:18,000 --> 01:54:19,000
你就是不知道怎么用

3098
01:54:19,000 --> 01:54:20,000
没有人会告诉你

3099
01:54:20,000 --> 01:54:22,000
不像在图形前面里面

3100
01:54:22,000 --> 01:54:24,000
你必须去点到处点到处是

3101
01:54:24,000 --> 01:54:25,000
对吧

3102
01:54:25,000 --> 01:54:27,000
对你可以大概找得到他在哪里

3103
01:54:27,000 --> 01:54:28,000
如果命令行里面你找不

3104
01:54:28,000 --> 01:54:29,000
你不知道他在哪

3105
01:54:29,000 --> 01:54:30,000
你去真的是

3106
01:54:30,000 --> 01:54:31,000
你不知道他是什么

3107
01:54:31,000 --> 01:54:32,000
你真的就不知道去哪里找

3108
01:54:32,000 --> 01:54:33,000
当然

3109
01:54:33,000 --> 01:54:36,000
也个笨办法就是一个一个去读这个 menu

3110
01:54:36,000 --> 01:54:37,000
读手册嘛

3111
01:54:37,000 --> 01:54:38,000
但是

3112
01:54:38,000 --> 01:54:41,000
但有些 cash 家是有些有些点子是

3113
01:54:41,000 --> 01:54:43,000
如果你没有人告诉你的话

3114
01:54:43,000 --> 01:54:44,000
你就是不知道了

3115
01:54:44,000 --> 01:54:45,000
对吧

3116
01:54:45,000 --> 01:54:46,000
比如说

3117
01:54:46,000 --> 01:54:47,000
需要实践

3118
01:54:47,000 --> 01:54:48,000
需要去累积

3119
01:54:48,000 --> 01:54:49,000
对

3120
01:54:49,000 --> 01:54:50,000
你会需要真的有一个传承

3121
01:54:50,000 --> 01:54:51,000
有一个师傅去告诉你

3122
01:54:51,000 --> 01:54:52,000
这个东西就是这样

3123
01:54:52,000 --> 01:54:53,000
你得这么用

3124
01:54:53,000 --> 01:54:54,000
不然就是不行

3125
01:54:54,000 --> 01:54:55,000
比如说

3126
01:54:55,000 --> 01:55:00,000
从命令行到 Linux 转换的过程中

3127
01:55:00,000 --> 01:55:02,000
你可能会遇到一个问题

3128
01:55:02,000 --> 01:55:04,000
就是怎么样改名一个文件

3129
01:55:04,000 --> 01:55:05,000
对吧

3130
01:55:05,000 --> 01:55:07,000
你会发现 Linux 没有 rename 这个功能

3131
01:55:07,000 --> 01:55:08,000
你会说

3132
01:55:08,000 --> 01:55:10,000
我靠怎么会改文件这种东西

3133
01:55:10,000 --> 01:55:11,000
是做不到的

3134
01:55:11,000 --> 01:55:12,000
这不可能吧

3135
01:55:12,000 --> 01:55:13,000
但是直到有人告诉你说

3136
01:55:13,000 --> 01:55:14,000
对

3137
01:55:14,000 --> 01:55:15,000
你要 move

3138
01:55:15,000 --> 01:55:16,000
就是

3139
01:55:16,000 --> 01:55:17,000
你要移动一个文件

3140
01:55:17,000 --> 01:55:19,000
把一个东西

3141
01:55:19,000 --> 01:55:21,000
把一个东西从 A 移动到 B 的工具

3142
01:55:21,000 --> 01:55:22,000
也可以完成

3143
01:55:22,000 --> 01:55:25,000
把一个东西从 A 命名为 B

3144
01:55:25,000 --> 01:55:26,000
这是

3145
01:55:26,000 --> 01:55:28,000
这是一个需要有人告诉你的这件事情

3146
01:55:28,000 --> 01:55:29,000
对吧

3147
01:55:30,000 --> 01:55:31,000
类似的例子还有什么

3148
01:55:31,000 --> 01:55:33,000
比如说你在 Dots 上面

3149
01:55:33,000 --> 01:55:35,000
你我觉得什么 Copy

3150
01:55:35,000 --> 01:55:36,000
新点

3151
01:55:36,000 --> 01:55:37,000
Copy

3152
01:55:37,000 --> 01:55:38,000
新点

3153
01:55:38,000 --> 01:55:40,000
TXT

3154
01:55:40,000 --> 01:55:41,000
空格

3155
01:55:41,000 --> 01:55:42,000
新点

3156
01:55:42,000 --> 01:55:43,000
EXT

3157
01:55:43,000 --> 01:55:45,000
你可以批量的把所有的

3158
01:55:45,000 --> 01:55:47,000
纯文本文件转换为 EXT

3159
01:55:47,000 --> 01:55:49,000
但在 Linux 下面这是做不到的

3160
01:55:49,000 --> 01:55:50,000
对吧

3161
01:55:50,000 --> 01:55:51,000
你会说我靠为什么

3162
01:55:51,000 --> 01:55:53,000
就得有一人跟你解释

3163
01:55:53,000 --> 01:55:56,000
就是这个 Linux 下面的这个所谓

3164
01:55:56,000 --> 01:55:59,000
Shell Extension

3165
01:55:59,000 --> 01:56:01,000
这个叫什么

3166
01:56:01,000 --> 01:56:03,000
interpolation

3167
01:56:03,000 --> 01:56:04,000
扩展

3168
01:56:04,000 --> 01:56:05,000
对

3169
01:56:05,000 --> 01:56:06,000
明连行扩展

3170
01:56:06,000 --> 01:56:07,000
跟 Dots 下面的机制是不一样的

3171
01:56:07,000 --> 01:56:08,000
对吧

3172
01:56:08,000 --> 01:56:11,000
这很多东西都要自己去弄明白

3173
01:56:13,000 --> 01:56:14,000
这也是

3174
01:56:14,000 --> 01:56:16,000
所以现在其实有网络也好

3175
01:56:16,000 --> 01:56:19,000
因为如果之前我们当时用命令

3176
01:56:19,000 --> 01:56:22,000
好像说只能看杂志上面一个小 tips 的区域

3177
01:56:22,000 --> 01:56:23,000
对吧

3178
01:56:23,000 --> 01:56:24,000
就非常有限的

3179
01:56:24,000 --> 01:56:25,000
也没办法搜索

3180
01:56:25,000 --> 01:56:26,000
对

3181
01:56:26,000 --> 01:56:27,000
现在就是有很多这种网站

3182
01:56:27,000 --> 01:56:29,000
它会由那种叫做那种

3183
01:56:29,000 --> 01:56:31,000
这种小摘要的形式去告诉你说

3184
01:56:31,000 --> 01:56:32,000
有这么一个功能

3185
01:56:32,000 --> 01:56:33,000
你可以用怎么方

3186
01:56:33,000 --> 01:56:36,000
哪几个命令组合可以实现这么一个功能

3187
01:56:36,000 --> 01:56:37,000
比如说像什么

3188
01:56:37,000 --> 01:56:38,000
这种叫做 Compon Life Food

3189
01:56:38,000 --> 01:56:39,000
这么一个网站

3190
01:56:39,000 --> 01:56:40,000
就可以做类似的事

3191
01:56:40,000 --> 01:56:41,000
对

3192
01:56:41,000 --> 01:56:42,000
我觉得那个时候学 Linux

3193
01:56:42,000 --> 01:56:44,000
真的是用生命在学

3194
01:56:44,000 --> 01:56:45,000
可我们要

3195
01:56:45,000 --> 01:56:47,000
帮着把自己的那个

3196
01:56:47,000 --> 01:56:49,000
心爱的游戏分区

3197
01:56:49,000 --> 01:56:50,000
搞丢的危险

3198
01:56:50,000 --> 01:56:51,000
装一个 Linux

3199
01:56:51,000 --> 01:56:52,000
然后要买

3200
01:56:52,000 --> 01:56:57,000
要从书店里面买 Linux 的教程

3201
01:56:57,000 --> 01:57:00,000
然后要看着杂志上面的文章一点一点学

3202
01:57:00,000 --> 01:57:02,000
不像现在我开个虚拟机

3203
01:57:02,000 --> 01:57:03,000
然后另外开个浏览器

3204
01:57:03,000 --> 01:57:06,000
简直是非一样的一日前里可以学会

3205
01:57:06,000 --> 01:57:09,000
我们那个时候需要一个月才能学会的东西

3206
01:57:10,000 --> 01:57:11,000
对

3207
01:57:13,000 --> 01:57:16,000
这个节目的最后我们介绍一些

3208
01:57:16,000 --> 01:57:18,000
我觉得我们觉得还挺有用的

3209
01:57:18,000 --> 01:57:19,000
这种密典箱小工具

3210
01:57:19,000 --> 01:57:20,000
就可能很多人

3211
01:57:20,000 --> 01:57:22,000
有些可能知道

3212
01:57:22,000 --> 01:57:24,000
但不一定每个你都知道

3213
01:57:24,000 --> 01:57:25,000
对吧

3214
01:57:25,000 --> 01:57:27,000
所以讲一下大概有什么好玩的

3215
01:57:27,000 --> 01:57:28,000
先说

3216
01:57:28,000 --> 01:57:30,000
就是这个我们之前提到过

3217
01:57:30,000 --> 01:57:31,000
在讲包管理器的时候

3218
01:57:31,000 --> 01:57:32,000
提到过

3219
01:57:32,000 --> 01:57:34,000
在 OS 上有个叫做 HomeBrew 的东西

3220
01:57:34,000 --> 01:57:35,000
可以帮你解决

3221
01:57:35,000 --> 01:57:37,000
怎么去新增这种

3222
01:57:37,000 --> 01:57:38,000
命令航工具的一个困惑

3223
01:57:38,000 --> 01:57:39,000
这个是要必装的

3224
01:57:39,000 --> 01:57:40,000
Meta

3225
01:57:40,000 --> 01:57:41,000
Meta Command Line 2

3226
01:57:41,000 --> 01:57:42,000
对

3227
01:57:42,000 --> 01:57:44,000
但这个不属于命令航工具本身

3228
01:57:44,000 --> 01:57:45,000
我们就先略过

3229
01:57:45,000 --> 01:57:47,000
下面开始我们一个人介绍一个

3230
01:57:47,000 --> 01:57:48,000
好

3231
01:57:48,000 --> 01:57:49,000
我先来一个

3232
01:57:49,000 --> 01:57:51,000
LL Cat

3233
01:57:51,000 --> 01:57:53,000
就是干嘛

3234
01:57:53,000 --> 01:57:54,000
这是干嘛

3235
01:57:54,000 --> 01:57:55,000
unix 上面有 cat

3236
01:57:55,000 --> 01:57:56,000
对吧

3237
01:57:56,000 --> 01:57:57,000
就是没有 dog

3238
01:57:57,000 --> 01:57:58,000
但是有 cat

3239
01:57:58,000 --> 01:57:59,000
cat 是

3240
01:57:59,000 --> 01:58:00,000
猫是干嘛用的

3241
01:58:00,000 --> 01:58:02,000
猫是输出用的

3242
01:58:02,000 --> 01:58:04,000
其实挺

3243
01:58:04,000 --> 01:58:05,000
猫的作用是说

3244
01:58:05,000 --> 01:58:06,000
它

3245
01:58:06,000 --> 01:58:08,000
从它的

3246
01:58:08,000 --> 01:58:09,000
把它的输入

3247
01:58:09,000 --> 01:58:10,000
打到输出里

3248
01:58:10,000 --> 01:58:12,000
你可以把一个文件的内容

3249
01:58:12,000 --> 01:58:13,000
输出到

3250
01:58:13,000 --> 01:58:15,000
standard out 上面

3251
01:58:15,000 --> 01:58:16,000
然后那么

3252
01:58:16,000 --> 01:58:17,000
对

3253
01:58:17,000 --> 01:58:18,000
LL Cat 是什么呢

3254
01:58:18,000 --> 01:58:19,000
是

3255
01:58:19,000 --> 01:58:20,000
是一个可以

3256
01:58:20,000 --> 01:58:21,000
把你的输出

3257
01:58:21,000 --> 01:58:23,000
用彩虹的颜色

3258
01:58:23,000 --> 01:58:25,000
输出到这个

3259
01:58:25,000 --> 01:58:29,000
把你的输入用彩虹的颜色输出到 standard out 上面

3260
01:58:29,000 --> 01:58:30,000
就是

3261
01:58:30,000 --> 01:58:33,000
在一个支持多彩的这个 shell 里面

3262
01:58:33,000 --> 01:58:35,000
shell emulator 里面

3263
01:58:35,000 --> 01:58:36,000
它可以把

3264
01:58:36,000 --> 01:58:39,000
字符按照这个

3265
01:58:39,000 --> 01:58:41,000
固定的色谱

3266
01:58:41,000 --> 01:58:44,000
用这个红色黄色黄色的

3267
01:58:44,000 --> 01:58:45,000
是黄色黄色的

3268
01:58:45,000 --> 01:58:46,000
这是所有颜色输出出来

3269
01:58:46,000 --> 01:58:47,000
也就是说

3270
01:58:47,000 --> 01:58:49,000
你可能你不用

3271
01:58:49,000 --> 01:58:50,000
你用普通的 cat 的话

3272
01:58:50,000 --> 01:58:53,000
你只会输入一个单字的东西

3273
01:58:53,000 --> 01:58:54,000
但你用 LLcat 的话

3274
01:58:54,000 --> 01:58:58,000
你的整个输出都会显得多彩

3275
01:58:59,000 --> 01:59:02,000
所以这是一个有趣而无用的

3276
01:59:02,000 --> 01:59:03,000
有趣而无用的

3277
01:59:03,000 --> 01:59:04,000
命令行工具对吧

3278
01:59:04,000 --> 01:59:05,000
类似的我还有很多

3279
01:59:05,000 --> 01:59:07,000
比如说那个 SL

3280
01:59:07,000 --> 01:59:10,000
就如果你把 LS 打成 SL 的话

3281
01:59:10,000 --> 01:59:11,000
它会出一个

3282
01:59:11,000 --> 01:59:13,000
出连火车还是什么东西

3283
01:59:13,000 --> 01:59:15,000
就是说你有答错了

3284
01:59:15,000 --> 01:59:16,000
这种感觉

3285
01:59:18,000 --> 01:59:19,000
对

3286
01:59:19,000 --> 01:59:21,000
刚刚也提到个这个叫做 TIG 的工具

3287
01:59:21,000 --> 01:59:22,000
就 Git 大家都知道

3288
01:59:22,000 --> 01:59:24,000
是一个容易做原代码管理的

3289
01:59:24,000 --> 01:59:25,000
一个命令行工具

3290
01:59:25,000 --> 01:59:28,000
然后 TIG 就是把 Git 反过来写

3291
01:59:28,000 --> 01:59:29,000
的话它是一个

3292
01:59:29,000 --> 01:59:32,000
GNCURSE 的一个

3293
01:59:32,000 --> 01:59:35,000
显示 Revision History 的图形界面

3294
01:59:35,000 --> 01:59:36,000
对非常有用

3295
01:59:36,000 --> 01:59:37,000
就不止 Revision History

3296
01:59:37,000 --> 01:59:38,000
它可以显示很多东西

3297
01:59:38,000 --> 01:59:40,000
其实在里面还可以做一些比较

3298
01:59:40,000 --> 01:59:41,000
常用的操作

3299
01:59:41,000 --> 01:59:42,000
比如说

3300
01:59:42,000 --> 01:59:45,000
就 Git 的大部分功能都可以在 TIG 里面实现了

3301
01:59:45,000 --> 01:59:46,000
对

3302
01:59:46,000 --> 01:59:47,000
对

3303
01:59:47,000 --> 01:59:48,000
所以这是一个挺好用的工具

3304
01:59:48,000 --> 01:59:49,000
有很多人说

3305
01:59:49,000 --> 01:59:52,000
很多人从 SVN 迁过来

3306
01:59:52,000 --> 01:59:53,000
特别是 Windows 上面程序

3307
01:59:53,000 --> 01:59:54,000
他可能觉得

3308
01:59:54,000 --> 01:59:57,000
哎呀这个 Git 的没有很好的图形化工具

3309
01:59:57,000 --> 01:59:58,000
怎么办

3310
01:59:58,000 --> 01:59:59,000
其实是有的

3311
01:59:59,000 --> 02:00:00,000
像那么 SourceTrack 刚才提到过了

3312
02:00:00,000 --> 02:00:02,000
但是像我们这种死中的粉

3313
02:00:02,000 --> 02:00:08,000
还是习惯于说用这种基于命令行的一个基于文本窗口的工具

3314
02:00:08,000 --> 02:00:09,000
然后 TIG 是一个很好的选择

3315
02:00:09,000 --> 02:00:15,000
我觉得 Git 也是一个奇葩到没有办法做出一个好用的命令行图形界面的工具

3316
02:00:15,000 --> 02:00:19,000
很多人还是用的挺好的

3317
02:00:19,000 --> 02:00:21,000
只是说很多高级功能

3318
02:00:21,000 --> 02:00:22,000
就好像说

3319
02:00:22,000 --> 02:00:24,000
就好像我说的一样

3320
02:00:24,000 --> 02:00:25,000
刚才那个

3321
02:00:25,000 --> 02:00:27,000
为什么选择命令行的原因是一样的

3322
02:00:27,000 --> 02:00:28,000
Git 就有很多高级功能

3323
02:00:28,000 --> 02:00:30,000
只可能在通过文本

3324
02:00:30,000 --> 02:00:32,000
就是命令行的方式表述出来

3325
02:00:32,000 --> 02:00:34,000
因为用图形方式表述实在是太费劲

3326
02:00:34,000 --> 02:00:36,000
对我觉得用图形界面表述出来

3327
02:00:36,000 --> 02:00:38,000
就是操作 Git 数的话

3328
02:00:38,000 --> 02:00:41,000
我其实能够想到的最符合直觉的一种方法

3329
02:00:41,000 --> 02:00:46,000
就是你可以直接去拖拽 Branch 里面的节点

3330
02:00:46,000 --> 02:00:49,000
然后让它在你想要去的那个地方停留下来

3331
02:00:49,000 --> 02:00:50,000
然后松手

3332
02:00:50,000 --> 02:00:55,000
然后图形界面的工具就自动帮你完成对应的 Git 操作

3333
02:00:55,000 --> 02:00:58,000
这个才是最符合直觉化的一个实现

3334
02:00:58,000 --> 02:01:01,000
现有的大部分的图形工具

3335
02:01:01,000 --> 02:01:04,000
只不过是把那些命令行的命令封装成一个一个按钮

3336
02:01:04,000 --> 02:01:07,000
你还是没有办法直接看到

3337
02:01:07,000 --> 02:01:09,000
执行这些命令之后

3338
02:01:09,000 --> 02:01:10,000
那个 sauce trick 会变成什么样子

3339
02:01:10,000 --> 02:01:17,000
还有就是可组合性和表达的抽象层级的问题

3340
02:01:17,000 --> 02:01:22,000
始终那种可视化的抽象层级是要相比语言描述的

3341
02:01:22,000 --> 02:01:24,000
还是要低很多的

3342
02:01:24,000 --> 02:01:25,000
低吗

3343
02:01:25,000 --> 02:01:28,000
低一个 order

3344
02:01:28,000 --> 02:01:31,000
下一个你有什么介绍的

3345
02:01:31,000 --> 02:01:35,000
我可以介绍 Causse

3346
02:01:35,000 --> 02:01:40,000
又是一个有权没有什么用

3347
02:01:40,000 --> 02:01:43,000
Causse 有一个变种叫做 Causse

3348
02:01:43,000 --> 02:01:46,000
就是你 brew install Causse 之后

3349
02:01:46,000 --> 02:01:47,000
你会得到两个 million

3350
02:01:47,000 --> 02:01:48,000
一个叫 Causse

3351
02:01:48,000 --> 02:01:49,000
就 Causse

3352
02:01:49,000 --> 02:01:52,000
然后结果就是它会把你的输出

3353
02:01:52,000 --> 02:01:54,000
包裹到一个漫画的那种

3354
02:01:54,000 --> 02:01:55,000
输入

3355
02:01:55,000 --> 02:01:56,000
对

3356
02:01:56,000 --> 02:01:59,000
它会把你的输入包裹到一个漫画的那种想

3357
02:01:59,000 --> 02:02:01,000
或者是说的气泡框里面

3358
02:02:01,000 --> 02:02:02,000
对

3359
02:02:02,000 --> 02:02:04,000
然后下面画一头牛

3360
02:02:04,000 --> 02:02:05,000
这就是这个用途

3361
02:02:05,000 --> 02:02:06,000
就是牛说

3362
02:02:06,000 --> 02:02:07,000
对

3363
02:02:07,000 --> 02:02:09,000
然后另外有个工具叫做 Fortune

3364
02:02:09,000 --> 02:02:11,000
就是跟你说一句

3365
02:02:11,000 --> 02:02:15,000
其实就是那种中餐馆里面的小 cookie 里面

3366
02:02:15,000 --> 02:02:16,000
Fortune cookie

3367
02:02:16,000 --> 02:02:18,000
一个小纸条大概是那个意思

3368
02:02:18,000 --> 02:02:20,000
然后它会跟你说很多名人名言

3369
02:02:20,000 --> 02:02:23,000
然后你把 Fortune 重定下到 Causse

3370
02:02:23,000 --> 02:02:27,000
它就会把名人名言包裹到一个 bubble 里面

3371
02:02:27,000 --> 02:02:29,000
然后让牛说主

3372
02:02:29,000 --> 02:02:32,000
就是那个中餐馆的小 cookie 这个事情

3373
02:02:32,000 --> 02:02:34,000
应该是只有在国外的人才会知道这个梗

3374
02:02:34,000 --> 02:02:35,000
对

3375
02:02:35,000 --> 02:02:36,000
就是在国外的中餐馆

3376
02:02:36,000 --> 02:02:37,000
Somehow someway

3377
02:02:37,000 --> 02:02:40,000
会提供一种非常特别的

3378
02:02:40,000 --> 02:02:43,000
在你结账的时候会给你一个小 cookie

3379
02:02:43,000 --> 02:02:46,000
然后 cookie 其实是非常难吃的一种饼干

3380
02:02:46,000 --> 02:02:47,000
只不过这个 cookie

3381
02:02:47,000 --> 02:02:48,000
那我觉得还挺好吃的

3382
02:02:48,000 --> 02:02:49,000
What

3383
02:02:49,000 --> 02:02:52,000
我头一次遇到喜欢吃 Fortune cookie 的人

3384
02:02:52,000 --> 02:02:54,000
脆脆的嘛

3385
02:02:54,000 --> 02:02:55,000
挺好吃的

3386
02:02:55,000 --> 02:02:58,000
然后这个 Fortune cookie 它是空心的对吧

3387
02:02:58,000 --> 02:02:59,000
空心的

3388
02:02:59,000 --> 02:03:01,000
然后你把它打开里面有一个小纸条

3389
02:03:01,000 --> 02:03:02,000
上面有句话

3390
02:03:02,000 --> 02:03:03,000
上面会

3391
02:03:03,000 --> 02:03:05,000
对有时候是中英文的

3392
02:03:05,000 --> 02:03:06,000
这种自在的德国

3393
02:03:06,000 --> 02:03:08,000
绝大部分都是中英文的

3394
02:03:08,000 --> 02:03:09,000
英德文的

3395
02:03:09,000 --> 02:03:11,000
就是一边是英文一边是德文

3396
02:03:11,000 --> 02:03:13,000
在北美就是中英文的

3397
02:03:13,000 --> 02:03:15,000
对会给你一句小格言

3398
02:03:15,000 --> 02:03:16,000
比如什么

3399
02:03:16,000 --> 02:03:17,000
你举个例子

3400
02:03:17,000 --> 02:03:19,000
一时想不起来什么

3401
02:03:19,000 --> 02:03:21,000
我一时想不起来

3402
02:03:21,000 --> 02:03:24,000
反正就是有一种

3403
02:03:25,000 --> 02:03:26,000
这什么真言

3404
02:03:26,000 --> 02:03:27,000
不是什么言

3405
02:03:27,000 --> 02:03:28,000
是真言

3406
02:03:28,000 --> 02:03:29,000
那个叫什么

3407
02:03:29,000 --> 02:03:32,000
就是它会讲一个看似很有道理的一句话

3408
02:03:32,000 --> 02:03:33,000
但实在是没有什么卵用

3409
02:03:33,000 --> 02:03:35,000
会讲一句有趣而无用的话

3410
02:03:35,000 --> 02:03:37,000
对差不多这个意思

3411
02:03:37,000 --> 02:03:41,000
Fortune 这个软件差不多是干类似的事情

3412
02:03:41,000 --> 02:03:47,000
下面一个挺有用的一个命令行工具

3413
02:03:47,000 --> 02:03:48,000
就是 MTR

3414
02:03:49,000 --> 02:03:50,000
这个是干嘛

3415
02:03:50,000 --> 02:03:52,000
这可能做网络

3416
02:03:52,000 --> 02:03:54,000
或者是你对网络状况

3417
02:03:54,000 --> 02:03:56,000
比如这个要这个有有研究

3418
02:03:56,000 --> 02:03:58,000
就是互联合计算机网络

3419
02:03:58,000 --> 02:04:00,000
有研究的人会经常用到

3420
02:04:00,000 --> 02:04:01,000
有两个工具

3421
02:04:01,000 --> 02:04:02,000
一个叫 tristroot

3422
02:04:02,000 --> 02:04:03,000
一个叫 ping 嘛

3423
02:04:03,000 --> 02:04:05,000
ping 是测这个延迟

3424
02:04:05,000 --> 02:04:07,000
然后 tristroot 是测这个你跳转的

3425
02:04:07,000 --> 02:04:10,000
你从你的电脑到另外一个服务器之间

3426
02:04:10,000 --> 02:04:13,000
要经过哪些这种中间的路由

3427
02:04:13,000 --> 02:04:15,000
或者是这个网关

3428
02:04:15,000 --> 02:04:16,000
对吧

3429
02:04:16,000 --> 02:04:19,000
然后 mtr 是把这两个工具的功能合二为一

3430
02:04:19,000 --> 02:04:22,000
并且一种更加友善和有用的方式

3431
02:04:22,000 --> 02:04:25,000
汇报出来的一个这种网络

3432
02:04:25,000 --> 02:04:28,000
诊断工具集合

3433
02:04:28,000 --> 02:04:29,000
对

3434
02:04:29,000 --> 02:04:32,000
Mats Traceroute

3435
02:04:32,000 --> 02:04:34,000
Mats 的 traceroute

3436
02:04:34,000 --> 02:04:35,000
对

3437
02:04:35,000 --> 02:04:36,000
那是作者

3438
02:04:36,000 --> 02:04:37,000
对

3439
02:04:37,000 --> 02:04:39,000
那你现在下一个

3440
02:04:39,000 --> 02:04:41,000
那你接下一个叫做 pray

3441
02:04:41,000 --> 02:04:42,000
你介绍一下是什么

3442
02:04:42,000 --> 02:04:46,000
pray 和 ipython 我想放在一起介绍

3443
02:04:46,000 --> 02:04:47,000
就是

3444
02:04:47,000 --> 02:04:50,000
python 的用户一定要使用 ipython 这个东西

3445
02:04:50,000 --> 02:04:51,000
而不是使用 python

3446
02:04:51,000 --> 02:04:54,000
默认给你装老掉牙的 idol

3447
02:04:54,000 --> 02:04:56,000
ipython 是一个

3448
02:04:56,000 --> 02:04:59,000
既可以在命令行方下面跑

3449
02:04:59,000 --> 02:05:02,000
也可以有一个专属的网页版本

3450
02:05:02,000 --> 02:05:08,000
或者乃至于一个基于 qt 的图形界面的一个全功能 python 笔记本

3451
02:05:09,000 --> 02:05:12,000
你可以在里面运行 python 的程序

3452
02:05:12,000 --> 02:05:15,000
你可以在里面尝试 python 的各种新功能

3453
02:05:15,000 --> 02:05:20,000
而且你的每一次输入和每一次输出都会被记在 in 和 out 两个 area 里面

3454
02:05:20,000 --> 02:05:22,000
你可以随时去查询

3455
02:05:22,000 --> 02:05:24,000
然后还内置了很多其他的功能

3456
02:05:24,000 --> 02:05:26,000
比如说什么语法高亮

3457
02:05:26,000 --> 02:05:29,000
那个

3458
02:05:29,000 --> 02:05:31,000
call stack

3459
02:05:31,000 --> 02:05:34,000
backtrace

3460
02:05:34,000 --> 02:05:36,000
backtrace

3461
02:05:36,000 --> 02:05:37,000
backtrace

3462
02:05:37,000 --> 02:05:39,000
然后 pray 就是

3463
02:05:39,000 --> 02:05:41,000
Ruby 的 ipython

3464
02:05:41,000 --> 02:05:43,000
ipython

3465
02:05:43,000 --> 02:05:44,000
ok

3466
02:05:44,000 --> 02:05:45,000
非常有用

3467
02:05:45,000 --> 02:05:46,000
刚才讲到 ipython

3468
02:05:46,000 --> 02:05:48,000
我还推荐一个叫做 bpython

3469
02:05:48,000 --> 02:05:49,000
就是 ab 的 b

3470
02:05:49,000 --> 02:05:50,000
bpython

3471
02:05:50,000 --> 02:05:55,000
ipython 它也是一个 python 的一个叫做 reple

3472
02:05:55,000 --> 02:05:57,000
read evaluate print loop

3473
02:05:57,000 --> 02:05:58,000
这么一个工具

3474
02:05:58,000 --> 02:06:00,000
bpython 是一个替代的 reple

3475
02:06:00,000 --> 02:06:02,000
然后它的好处是什么呢

3476
02:06:02,000 --> 02:06:04,000
首先它有语法高亮

3477
02:06:04,000 --> 02:06:05,000
就对 python 语法

3478
02:06:05,000 --> 02:06:08,000
它是敲的每一行语法高亮的

3479
02:06:08,000 --> 02:06:11,000
它的多行模式也比较支持比 ipython 要好

3480
02:06:11,000 --> 02:06:13,000
然后它觉得最有用的功能

3481
02:06:13,000 --> 02:06:16,000
它会对你打的标准库里面的函数

3482
02:06:16,000 --> 02:06:19,000
它是有类似于一个 ID

3483
02:06:19,000 --> 02:06:21,000
它是有提示函数的一个签名

3484
02:06:21,000 --> 02:06:23,000
以及每个参数是干什么用的

3485
02:06:23,000 --> 02:06:24,000
ok

3486
02:06:24,000 --> 02:06:25,000
就非常好用

3487
02:06:25,000 --> 02:06:28,000
而且它的没有 ipython 那么功能丰富

3488
02:06:28,000 --> 02:06:32,000
它是一个更加轻量级的这么一个 reple

3489
02:06:32,000 --> 02:06:34,000
ipython 我相信

3490
02:06:34,000 --> 02:06:37,000
如果你是要做一些科学计算

3491
02:06:37,000 --> 02:06:41,000
或者是生物信息学之类的

3492
02:06:41,000 --> 02:06:42,000
做科研

3493
02:06:42,000 --> 02:06:43,000
基本上是

3494
02:06:43,000 --> 02:06:45,000
人手必装的一个东西

3495
02:06:45,000 --> 02:06:46,000
对

3496
02:06:46,000 --> 02:06:49,000
我再介绍一个叫做 ipurf 3

3497
02:06:49,000 --> 02:06:52,000
这也是一个做网络性能的测试的工具

3498
02:06:52,000 --> 02:06:54,000
就是说假设你想测

3499
02:06:54,000 --> 02:06:56,000
比如你们家刚刚装修房子

3500
02:06:56,000 --> 02:06:59,000
你想测这个装修师傅给你装的网线

3501
02:06:59,000 --> 02:07:02,000
是否达到千兆的一个速度

3502
02:07:02,000 --> 02:07:03,000
对吧

3503
02:07:03,000 --> 02:07:04,000
你怎么办

3504
02:07:04,000 --> 02:07:05,000
你找两台电脑都插上网线

3505
02:07:05,000 --> 02:07:06,000
对吧

3506
02:07:06,000 --> 02:07:09,000
然后再一头运行 ipython 3 的一个 server

3507
02:07:09,000 --> 02:07:12,000
然后再另外一头运行 ipython 3 的一个客户端

3508
02:07:12,000 --> 02:07:13,000
一个 client

3509
02:07:13,000 --> 02:07:15,000
然后把这个 client 指向那个 server

3510
02:07:15,000 --> 02:07:19,000
它就会在这两端发起一个这个一个连接

3511
02:07:19,000 --> 02:07:24,000
然后测试这个连接能最能最大以多快的速度传输

3512
02:07:24,000 --> 02:07:25,000
对吧

3513
02:07:25,000 --> 02:07:26,000
ok

3514
02:07:26,000 --> 02:07:29,000
就是可以测试这个网络连通速度的这么一个小工具

3515
02:07:29,000 --> 02:07:30,000
这 3 是一个最新的版本

3516
02:07:30,000 --> 02:07:32,000
还有一个 ipypurf

3517
02:07:32,000 --> 02:07:34,000
没有数字就是默认是 2 这个版本

3518
02:07:34,000 --> 02:07:35,000
相对老一点

3519
02:07:35,000 --> 02:07:37,000
就看你的发行板的区别

3520
02:07:38,000 --> 02:07:39,000
ok

3521
02:07:39,000 --> 02:07:41,000
那接下来我再介绍一个 tmux

3522
02:07:41,000 --> 02:07:42,000
就是刚才已经提到了

3523
02:07:42,000 --> 02:07:44,000
是一个终端复用器

3524
02:07:44,000 --> 02:07:46,000
就是你可能连接到一个远程的计算机上

3525
02:07:46,000 --> 02:07:47,000
或者说你在本地

3526
02:07:47,000 --> 02:07:49,000
然后你开了一个 terminal 窗口

3527
02:07:49,000 --> 02:07:52,000
你会觉得说我还想做另外一件事情

3528
02:07:52,000 --> 02:07:53,000
怎么办

3529
02:07:53,000 --> 02:07:55,000
那一个选择是再开一个窗口

3530
02:07:55,000 --> 02:07:56,000
或者再建立一个连接

3531
02:07:56,000 --> 02:08:00,000
而比较好的一个方法就是

3532
02:08:00,000 --> 02:08:02,000
复用你当前已经建立了一个连接

3533
02:08:02,000 --> 02:08:05,000
可以装 tmux 这个东西

3534
02:08:05,000 --> 02:08:08,000
它可以通过一些组合键

3535
02:08:08,000 --> 02:08:11,000
让你在一个 terminal 的窗口里面

3536
02:08:11,000 --> 02:08:13,000
开很多个其他 terminal 的窗口

3537
02:08:13,000 --> 02:08:15,000
可能描述比较抽象

3538
02:08:15,000 --> 02:08:18,000
但如果你去 tmux 的网站上看一下

3539
02:08:18,000 --> 02:08:20,000
你会明白这个什么意思

3540
02:08:20,000 --> 02:08:22,000
其实这个有个最大的好处你知道是什么吧

3541
02:08:22,000 --> 02:08:25,000
就是它可以保持你的一个登录状态

3542
02:08:25,000 --> 02:08:27,000
就是你保持程序的一线状态

3543
02:08:27,000 --> 02:08:29,000
对你可以在异裁机器上

3544
02:08:29,000 --> 02:08:31,000
用 tmux 来执行一个命令

3545
02:08:31,000 --> 02:08:34,000
然后 detach from the tmux

3546
02:08:34,000 --> 02:08:37,000
就可以直接关掉和机器的连接

3547
02:08:37,000 --> 02:08:38,000
对

3548
02:08:38,000 --> 02:08:41,000
但是这个时候在你刚才起到的进程

3549
02:08:41,000 --> 02:08:43,000
它是不会退出的

3550
02:08:43,000 --> 02:08:45,000
因为正常情况下你断掉一个连接之后

3551
02:08:45,000 --> 02:08:46,000
那个进程就退出了

3552
02:08:46,000 --> 02:08:48,000
除非你之前什么

3553
02:08:48,000 --> 02:08:50,000
因为很复杂的操作

3554
02:08:50,000 --> 02:08:52,000
因为很复杂的操作

3555
02:08:52,000 --> 02:08:53,000
disown

3556
02:08:53,000 --> 02:08:54,000
先 background

3557
02:08:54,000 --> 02:08:55,000
然后 disown

3558
02:08:55,000 --> 02:08:59,000
然后你才不会在你退出的时候终止这个程序

3559
02:08:59,000 --> 02:09:01,000
但一般人不会那么干

3560
02:09:01,000 --> 02:09:02,000
对

3561
02:09:02,000 --> 02:09:03,000
除非你事后想到

3562
02:09:04,000 --> 02:09:05,000
对

3563
02:09:05,000 --> 02:09:06,000
所以你用这个

3564
02:09:06,000 --> 02:09:07,000
如果用 tmux 的话

3565
02:09:07,000 --> 02:09:08,000
它是你退出的时候

3566
02:09:08,000 --> 02:09:09,000
它是直接断掉和 tmux

3567
02:09:09,000 --> 02:09:12,000
这个 master 进程的连接

3568
02:09:12,000 --> 02:09:15,000
它还会继续接管你在里面 launch 的那些子进程

3569
02:09:15,000 --> 02:09:17,000
然后等你回家再连上这个时候

3570
02:09:17,000 --> 02:09:19,000
你可以用 tmux 空格 a

3571
02:09:19,000 --> 02:09:22,000
就是 attach 这个参数

3572
02:09:22,000 --> 02:09:25,000
重新连回之前的 tmux 的 master 进程

3573
02:09:25,000 --> 02:09:30,000
这个时候你会看到和你断开之前一模一样的这么远端登录的界面

3574
02:09:30,000 --> 02:09:35,000
而你之前在执行的可能程序可能执行时间比较长的话

3575
02:09:35,000 --> 02:09:38,000
它是不会受任何影响的

3576
02:09:38,000 --> 02:09:39,000
对

3577
02:09:39,000 --> 02:09:42,000
然后另外一个用力就是比如说你是一个实验室的学生

3578
02:09:42,000 --> 02:09:44,000
然后你实验室里面有台电脑

3579
02:09:44,000 --> 02:09:46,000
然后你的工作办公室里面有台电脑

3580
02:09:46,000 --> 02:09:49,000
你需要在实验室里面观测一些数据

3581
02:09:49,000 --> 02:09:50,000
然后输入到电脑上

3582
02:09:50,000 --> 02:09:53,000
然后你要么用远程周边对吧

3583
02:09:53,000 --> 02:09:54,000
要么就是 tmux

3584
02:09:54,000 --> 02:10:00,000
然后在实验室的电脑上看到的东西会实时显示在你办公室的电脑上

3585
02:10:00,000 --> 02:10:01,000
也挺有用

3586
02:10:01,000 --> 02:10:02,000
对

3587
02:10:02,000 --> 02:10:04,000
当然 tmux 还有一个人

3588
02:10:04,000 --> 02:10:08,000
还有一个兄弟叫做 screen 就是屏幕那个词的

3589
02:10:08,000 --> 02:10:12,000
早期的一个中端服用

3590
02:10:12,000 --> 02:10:15,000
那 screen 的特性没有 tmux 的那么强大好用

3591
02:10:15,000 --> 02:10:19,000
现在就基本上都推荐大家用 tmux 会好一些了

3592
02:10:19,000 --> 02:10:20,000
screen 太古老了

3593
02:10:20,000 --> 02:10:24,000
而且 screen 好像不能分 type

3594
02:10:24,000 --> 02:10:26,000
可以分 type

3595
02:10:26,000 --> 02:10:29,000
它最早的版本是不能左右分屏

3596
02:10:29,000 --> 02:10:30,000
对

3597
02:10:30,000 --> 02:10:32,000
就是不能 splitview

3598
02:10:32,000 --> 02:10:35,000
但现在新版本是可以的了

3599
02:10:35,000 --> 02:10:36,000
OK

3600
02:10:36,000 --> 02:10:38,000
但只是因为搭载 screen 一般都是比较老旧的版本嘛

3601
02:10:38,000 --> 02:10:40,000
所以这个就很难保证

3602
02:10:40,000 --> 02:10:42,000
就 tmux 的特性大概会好一些

3603
02:10:42,000 --> 02:10:43,000
没错

3604
02:10:43,000 --> 02:10:45,000
没错

3605
02:10:45,000 --> 02:10:46,000
我在

3606
02:10:46,000 --> 02:10:47,000
tmux 还有一个很高级的功能

3607
02:10:47,000 --> 02:10:48,000
你一直没有说

3608
02:10:48,000 --> 02:10:49,000
还 screen 也有这个功能

3609
02:10:49,000 --> 02:10:53,000
就是可以做 pair programming

3610
02:10:53,000 --> 02:10:54,000
对没错

3611
02:10:54,000 --> 02:10:56,000
就是可以两个人连到同一

3612
02:10:56,000 --> 02:10:57,000
你可以看着别人的输入

3613
02:10:57,000 --> 02:10:58,000
对

3614
02:10:58,000 --> 02:11:01,000
两个人分别从自己的机器系列连到同一台服务器

3615
02:11:01,000 --> 02:11:04,000
然后调用一个 tmux 的一个终端

3616
02:11:04,000 --> 02:11:07,000
互相可以看见对方在那个里面打什么

3617
02:11:07,000 --> 02:11:11,000
也可以就是进行一对一的这么一种辅导式的教学

3618
02:11:11,000 --> 02:11:13,000
只不过容易打架

3619
02:11:13,000 --> 02:11:16,000
这个就是你要自己约定好到底是谁教谁学吧

3620
02:11:16,000 --> 02:11:17,000
对吧

3621
02:11:17,000 --> 02:11:18,000
最好用协同一下

3622
02:11:18,000 --> 02:11:21,000
对就是两个做这种 pair programming

3623
02:11:21,000 --> 02:11:23,000
绝对编程对吧

3624
02:11:23,000 --> 02:11:25,000
pair programming 的时候比较有用的一个工具

3625
02:11:25,000 --> 02:11:28,000
我再介绍一个叫做 tree

3626
02:11:28,000 --> 02:11:30,000
就是竖那个工具

3627
02:11:30,000 --> 02:11:31,000
这个是干嘛用的呢

3628
02:11:31,000 --> 02:11:34,000
就是说你在命令行里面

3629
02:11:34,000 --> 02:11:35,000
你要去

3630
02:11:35,000 --> 02:11:38,000
你要去叫做 navigate file system

3631
02:11:38,000 --> 02:11:40,000
就是你要在文件系统里面去看来看东西

3632
02:11:40,000 --> 02:11:41,000
到底哪个文件在哪

3633
02:11:41,000 --> 02:11:43,000
你在哪个结构里面对吧

3634
02:11:43,000 --> 02:11:45,000
经常常用的是 list

3635
02:11:45,000 --> 02:11:47,000
就是或者就是 list

3636
02:11:47,000 --> 02:11:50,000
就是列表一个目录里面的文件

3637
02:11:50,000 --> 02:11:52,000
但 list 一般只能列一层嘛

3638
02:11:52,000 --> 02:11:54,000
就是你只能看当前

3639
02:11:54,000 --> 02:11:56,000
或者某个指定目录下面的这个文件列表

3640
02:11:56,000 --> 02:11:59,000
但是你是看不到这个整个文件

3641
02:11:59,000 --> 02:12:01,000
因为文件系统是一个整个是个竖状结构嘛

3642
02:12:01,000 --> 02:12:04,000
你是不能用 list 看到整个一个竖状结构怎么样子的

3643
02:12:04,000 --> 02:12:08,000
然后 tree 这个小工具就可以做这个事

3644
02:12:08,000 --> 02:12:10,000
他会把这个文件系统

3645
02:12:10,000 --> 02:12:12,000
从你指定的层开始

3646
02:12:12,000 --> 02:12:15,000
以一个竖的形式把它打印到这个

3647
02:12:15,000 --> 02:12:17,000
这个终端窗口上面去

3648
02:12:17,000 --> 02:12:20,000
那你可以比较直观的看到你的这个

3649
02:12:20,000 --> 02:12:25,000
比如整个这个代码的工程目录里面的文件结构是怎么样子

3650
02:12:25,000 --> 02:12:26,000
就还比较有用

3651
02:12:26,000 --> 02:12:31,000
那我也来顺便推荐一个 midnight commander

3652
02:12:31,000 --> 02:12:32,000
就是 ok

3653
02:12:32,000 --> 02:12:39,000
因为这也是从 tree 想到的就是 total commander 是 dots 时代

3654
02:12:39,000 --> 02:12:42,000
乃至 windows 时代非常受欢迎的一个文件关系工具

3655
02:12:42,000 --> 02:12:48,000
后来有好事者把它移植成了一个 commodeline interface 的这么一个东西

3656
02:12:48,000 --> 02:12:50,000
就是你输入 mc

3657
02:12:50,000 --> 02:12:56,000
就会出现一个类似于 total commander 的一个全屏的工具

3658
02:12:56,000 --> 02:12:58,000
也是 ncurse

3659
02:12:58,000 --> 02:13:01,000
然后里面也有什么比如说列出当前命令数

3660
02:13:01,000 --> 02:13:05,000
批量拷贝批量重用名之类的工具

3661
02:13:05,000 --> 02:13:10,000
然后如果你是一个熟练的 total commander 用户的话

3662
02:13:10,000 --> 02:13:13,000
你会发现里面很多很多的操作是一模一样

3663
02:13:14,000 --> 02:13:15,000
对

3664
02:13:15,000 --> 02:13:17,000
而且这个东西最大的一个特征它是跨平台的

3665
02:13:17,000 --> 02:13:21,000
就是它在 linux 和 dots 上面都有

3666
02:13:21,000 --> 02:13:22,000
ok

3667
02:13:22,000 --> 02:13:23,000
蛮特别

3668
02:13:23,000 --> 02:13:24,000
这还挺帅

3669
02:13:24,000 --> 02:13:29,000
那我推荐另外一个系统管理用的工具叫做 htop

3670
02:13:29,000 --> 02:13:34,000
就很多系统很多这个 unix 里面都有一个内建的命令叫 top

3671
02:13:34,000 --> 02:13:37,000
然后它会列它会以一个 ncurse 的方式列出

3672
02:13:38,000 --> 02:13:41,000
当前系统里面正在活跃的进程

3673
02:13:41,000 --> 02:13:44,000
以及一些系统的状态比如说这个 cpu 的占用啊

3674
02:13:44,000 --> 02:13:49,000
这个就是各个用户内核态各自在有多少比例啊

3675
02:13:49,000 --> 02:13:51,000
内存的使用状况啊

3676
02:13:51,000 --> 02:13:54,000
活跃的一些进程的使用资源的情况啊这些

3677
02:13:54,000 --> 02:13:57,000
但是 top 的一个主要问题就是它展示的是一个单色

3678
02:13:57,000 --> 02:14:00,000
而且就不不法操作不方便的一个介绍

3679
02:14:00,000 --> 02:14:01,000
能够好看

3680
02:14:01,000 --> 02:14:02,000
不好看也不好用

3681
02:14:02,000 --> 02:14:03,000
对

3682
02:14:03,000 --> 02:14:06,000
那 htop 就是一个 top 的就是一个改良版

3683
02:14:06,000 --> 02:14:11,000
它可以以一种更加直观一种的方式展现出这个 top 展现的所有内容

3684
02:14:11,000 --> 02:14:16,000
并且它比如说它会展示在就某种情况下它会展示这个 cpu

3685
02:14:16,000 --> 02:14:21,000
它会用一种进度调的方式去表示这个 cpu 的实际占用比例

3686
02:14:21,000 --> 02:14:25,000
以及这个内存的占用情况

3687
02:14:25,000 --> 02:14:28,000
而且它下面的那个那个就是进程列表

3688
02:14:28,000 --> 02:14:30,000
它会也有各种各样的高级功能

3689
02:14:30,000 --> 02:14:33,000
比如它可以以一个竖状的结构展示这个进程列表

3690
02:14:33,000 --> 02:14:35,000
而不是一个单纯的

3691
02:14:35,000 --> 02:14:38,000
对就是非常建议大家都

3692
02:14:38,000 --> 02:14:43,000
这是我每次装新系统的时候都必装的一个软件

3693
02:14:43,000 --> 02:14:46,000
大致的作用跟大家看到那个叫做 Activity Monitor

3694
02:14:46,000 --> 02:14:48,000
在 Western 这个功能是差不多的

3695
02:14:48,000 --> 02:14:50,000
只不过是在命令行下面

3696
02:14:50,000 --> 02:14:51,000
每次

3697
02:14:51,000 --> 02:15:00,000
然后很多人做他们的那个当前命令行的截图都会专门找一个窗口开这个

3698
02:15:00,000 --> 02:15:03,000
也算是一个线线级的软件

3699
02:15:03,000 --> 02:15:04,000
对

3700
02:15:04,000 --> 02:15:05,000
OK

3701
02:15:05,000 --> 02:15:10,000
那我来推荐一个

3702
02:15:10,000 --> 02:15:12,000
我来推荐一个命令

3703
02:15:12,000 --> 02:15:14,000
叫做 Open

3704
02:15:14,000 --> 02:15:15,000
或者是

3705
02:15:15,000 --> 02:15:20,000
或者说我来推荐一组在 OAS 10 上面

3706
02:15:20,000 --> 02:15:23,000
在命令行下面工作的时候

3707
02:15:23,000 --> 02:15:28,000
你可能会出现一些比如说你要把命令某一个文件的内容

3708
02:15:28,000 --> 02:15:34,000
或者是某些输出弄到系统剪贴板上的场景

3709
02:15:34,000 --> 02:15:40,000
或者你需要把系统的剪贴板的内容输入到某一个命令的输入里面

3710
02:15:40,000 --> 02:15:43,000
或者你需要利用系统级的一个工具

3711
02:15:43,000 --> 02:15:45,000
比如说你要打开一个 PDF

3712
02:15:45,000 --> 02:15:46,000
怎么办呢

3713
02:15:46,000 --> 02:15:49,000
你可以用首先

3714
02:15:49,000 --> 02:15:51,000
剪贴板的话

3715
02:15:51,000 --> 02:15:55,000
你可以用 PBCopy 和 PBPaste 的两个功能

3716
02:15:55,000 --> 02:15:56,000
两个命令

3717
02:15:56,000 --> 02:16:01,000
分别可以把这个剪贴板里面的东西拷贝或者是粘贴出来

3718
02:16:01,000 --> 02:16:03,000
而如果你想打开某一个文件的话

3719
02:16:03,000 --> 02:16:05,000
你可以用 Open 这个命令

3720
02:16:05,000 --> 02:16:08,000
比如说你想要在 Finder 里面观察当前的目录

3721
02:16:08,000 --> 02:16:10,000
你可以 Open 空格点

3722
02:16:10,000 --> 02:16:13,000
就可以打开

3723
02:16:13,000 --> 02:16:15,000
就可以在 Finder 里面打开当前的目录

3724
02:16:15,000 --> 02:16:19,000
如果你想要打开当前的目录下面所有的 PDF 文件

3725
02:16:19,000 --> 02:16:22,000
你可以打 Open 新.PDF

3726
02:16:22,000 --> 02:16:25,000
系统会自动调用 Preview

3727
02:16:25,000 --> 02:16:27,000
或者是 Adobe Reader

3728
02:16:27,000 --> 02:16:30,000
取决于你选择的默议程序是什么

3729
02:16:30,000 --> 02:16:32,000
来打开所有的 PDF 文件

3730
02:16:32,000 --> 02:16:34,000
算是一个小 Tim

3731
02:16:34,000 --> 02:16:38,000
那个 PBCopy 和 PBPaste 用法

3732
02:16:38,000 --> 02:16:40,000
可能还要再解释一下

3733
02:16:40,000 --> 02:16:47,000
就是 PBCopy 这个命令的输入

3734
02:16:47,000 --> 02:16:52,000
你需要把你的程序的输出重定向给 PBCopy

3735
02:16:52,000 --> 02:16:53,000
对

3736
02:16:53,000 --> 02:16:55,000
它是指

3737
02:16:55,000 --> 02:16:57,000
从它的输

3738
02:16:57,000 --> 02:16:59,000
把它的输入复制到系统解决板里面

3739
02:16:59,000 --> 02:17:01,000
然后 PBPaste 就刚好反过来

3740
02:17:01,000 --> 02:17:04,000
它是把它的系统解决板那种导到它的输出里面去

3741
02:17:04,000 --> 02:17:09,000
所以用法肯定就是说是从 PB 导入

3742
02:17:09,000 --> 02:17:11,000
就是内容导到 PBCopy 里面去

3743
02:17:11,000 --> 02:17:13,000
然后从 PBPaste 里面导出

3744
02:17:13,000 --> 02:17:14,000
这么一个管道的用法

3745
02:17:14,000 --> 02:17:16,000
比如说你在网页上选中了一段话

3746
02:17:16,000 --> 02:17:18,000
然后你要把这段话排序

3747
02:17:18,000 --> 02:17:21,000
你可以先选中这段话

3748
02:17:21,000 --> 02:17:23,000
按 Command C

3749
02:17:23,000 --> 02:17:26,000
然后在命令行下面打 PBPaste Pipe

3750
02:17:26,000 --> 02:17:28,000
Sort Pipe PPCopy

3751
02:17:28,000 --> 02:17:33,000
然后你就把简天八点的内容排序

3752
02:17:33,000 --> 02:17:35,000
大概是这么一个管道

3753
02:17:35,000 --> 02:17:36,000
行

3754
02:17:36,000 --> 02:17:38,000
这个命令就介绍到这里

3755
02:17:38,000 --> 02:17:40,000
以上介绍的所有命令

3756
02:17:40,000 --> 02:17:42,000
除了刚才讲的

3757
02:17:42,000 --> 02:17:44,000
OS 10 原生的 PBCopy

3758
02:17:44,000 --> 02:17:45,000
PBPaste Open 之外

3759
02:17:45,000 --> 02:17:47,000
都需要你额外装

3760
02:17:47,000 --> 02:17:49,000
都不是系统自带的

3761
02:17:49,000 --> 02:17:52,000
你就需要通过比如说 HomeBrew 的方式去自己装

3762
02:17:52,000 --> 02:17:54,000
如果你是其他类 Unix 系统的话

3763
02:17:54,000 --> 02:17:58,000
你可以用你自己的包管理器去装工具

3764
02:17:58,000 --> 02:17:59,000
对

3765
02:17:59,000 --> 02:18:02,000
那我们今天的节目就到此为止了

3766
02:18:02,000 --> 02:18:03,000
好

3767
02:18:03,000 --> 02:18:05,000
真的说了好多

3768
02:18:05,000 --> 02:18:08,000
这真是可以拆成两期的节目

3769
02:18:08,000 --> 02:18:10,000
好吧

3770
02:18:10,000 --> 02:18:14,000
反正关于命令行的所谓 Command Line Foo

3771
02:18:14,000 --> 02:18:16,000
Command Line 空腹的这个东西

3772
02:18:16,000 --> 02:18:19,000
真是说之不尽

3773
02:18:19,000 --> 02:18:23,000
不妨推荐大家去 Command Line Foo

3774
02:18:23,000 --> 02:18:25,000
这个名是怎么来的

3775
02:18:25,000 --> 02:18:29,000
就是因为外国人不明白空腹这个词是什么意思

3776
02:18:29,000 --> 02:18:32,000
他们会把某些东西的技巧叫做什么什么腹

3777
02:18:32,000 --> 02:18:35,000
比如说搜 Google 的技巧叫做 Google 腹

3778
02:18:35,000 --> 02:18:38,000
然后 Command Line 的技巧叫做 Command Line 腹

3779
02:18:38,000 --> 02:18:40,000
然后 Command Line Foo

3780
02:18:40,000 --> 02:18:46,000
然后你可以在这里面找到很多很多实用的命令行的 tips

3781
02:18:46,000 --> 02:18:47,000
好吧

3782
02:18:47,000 --> 02:18:51,000
感谢收听 IPM Podcasts 网络旗下的 IT 技术主题娱乐节目

3783
02:18:51,000 --> 02:18:54,000
我们号称我们叫内核恐慌

3784
02:18:54,000 --> 02:18:55,000
我们号称 Hotcore

3785
02:18:55,000 --> 02:18:56,000
但是也没有干货

3786
02:18:56,000 --> 02:18:58,000
想听人听不想听人别听

3787
02:18:58,000 --> 02:19:00,000
你可以为本节目捐款

3788
02:19:00,000 --> 02:19:02,000
捐款地址是 CernalPanic.fm

3789
02:19:02,000 --> 02:19:03,000
slash donate

3790
02:19:03,000 --> 02:19:04,000
捐款结合随意

3791
02:19:04,000 --> 02:19:05,000
这种是 8 的证证如备就可以了

3792
02:19:05,000 --> 02:19:07,000
捐款不会为你带来什么

3793
02:19:07,000 --> 02:19:08,000
不捐也不会让你失去什么

3794
02:19:08,000 --> 02:19:10,000
我们的口号是 No hot feelings

3795
02:19:10,000 --> 02:19:12,000
如果你有任何反馈

3796
02:19:12,000 --> 02:19:16,000
欢迎发邮件到 CernalPanic at IPN.li

3797
02:19:16,000 --> 02:19:19,000
同时也欢迎收听 IPM 旗下几档节目

3798
02:19:19,000 --> 02:19:20,000
爱听公论

3799
02:19:20,000 --> 02:19:21,000
没知道太一来了

3800
02:19:21,000 --> 02:19:22,000
流行通讯

3801
02:19:22,000 --> 02:19:23,000
HiStory

3802
02:19:23,000 --> 02:19:26,000
映影像无资源不物质选美

3803
02:19:26,000 --> 02:19:28,000
我们下期节目再会

3804
02:19:28,000 --> 02:19:50,000
我发 часов

3805
02:19:50,000 --> 02:19:51,000
auch

3806
02:19:51,000 --> 02:19:52,000
buld

