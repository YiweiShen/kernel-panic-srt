1
00:00:00,000 --> 00:00:04,000
欢迎收听 IPN Podcast 的网络旗下的 IT 技术主题节目

2
00:00:04,000 --> 00:00:06,000
技术主题娱乐节目

3
00:00:06,000 --> 00:00:07,000
内核恐慌

4
00:00:07,000 --> 00:00:08,000
我们号称 Hudcore

5
00:00:08,000 --> 00:00:09,000
但是没有干货

6
00:00:09,000 --> 00:00:10,000
想听的人听

7
00:00:10,000 --> 00:00:11,000
不想听的人就别听

8
00:00:11,000 --> 00:00:14,000
内核恐慌的网址是 ipn.li

9
00:00:14,000 --> 00:00:15,000
slash kernelpanic

10
00:00:15,000 --> 00:00:18,000
我们推荐大家使用 Podcast 客户端订阅我们的节目

11
00:00:18,000 --> 00:00:20,000
如果您不知道该用哪一个客户端

12
00:00:20,000 --> 00:00:22,000
欢迎访问 ipn.li

13
00:00:22,000 --> 00:00:23,000
slash faq

14
00:00:23,000 --> 00:00:26,000
同样欢迎你为我们的节目捐款

15
00:00:26,000 --> 00:00:27,000
捐款地址是 ipn.li

16
00:00:27,000 --> 00:00:28,000
slash kernelpanic

17
00:00:28,000 --> 00:00:29,000
slash donate

18
00:00:29,000 --> 00:00:31,000
捐款结合随意

19
00:00:31,000 --> 00:00:33,000
只要是能够被八整处的正有数的客

20
00:00:33,000 --> 00:00:35,000
捐款不会为你带来什么

21
00:00:35,000 --> 00:00:37,000
不决也不会让你失去什么

22
00:00:37,000 --> 00:00:39,000
我们口号是 No Hot Feelings

23
00:00:39,000 --> 00:00:42,000
好了

24
00:00:42,000 --> 00:00:46,000
今天是第 21 期节目

25
00:00:46,000 --> 00:00:48,000
您嗓子怎么样

26
00:00:48,000 --> 00:00:50,000
还凑合现在

27
00:00:50,000 --> 00:00:51,000
你怎么样

28
00:00:51,000 --> 00:00:57,000
这段不是故意加的吧

29
00:00:57,000 --> 00:00:59,000
这段千万要抹掉

30
00:00:59,000 --> 00:01:03,000
我在女朋友的悉心照料之下

31
00:01:03,000 --> 00:01:04,000
现在已经好了九成

32
00:01:04,000 --> 00:01:05,000
但是剩下一成

33
00:01:05,000 --> 00:01:06,000
总是在

34
00:01:06,000 --> 00:01:08,000
总是一直困扰着我

35
00:01:08,000 --> 00:01:09,000
就是说句话还是会咳嗽一下

36
00:01:09,000 --> 00:01:11,000
然后就会产生那种

37
00:01:11,000 --> 00:01:15,000
第一句话前面说的比较平缓

38
00:01:15,000 --> 00:01:16,000
后面越说越急

39
00:01:16,000 --> 00:01:17,000
说之后开始咳了

40
00:01:17,000 --> 00:01:18,000
没气是吧

41
00:01:18,000 --> 00:01:20,000
对我发现这个状况

42
00:01:20,000 --> 00:01:22,000
这上次感冒了好像一直就这叫什么来的

43
00:01:22,000 --> 00:01:24,000
知识管炎对吧

44
00:01:24,000 --> 00:01:24,000
对

45
00:01:24,000 --> 00:01:28,000
其实就是咽炎转化成知识管炎

46
00:01:28,000 --> 00:01:29,000
这怎么算

47
00:01:29,000 --> 00:01:30,000
同病相连

48
00:01:30,000 --> 00:01:32,000
还是说什么

49
00:01:32,000 --> 00:01:33,000
隔空传染

50
00:01:33,000 --> 00:01:36,000
对

51
00:01:36,000 --> 00:01:38,000
这病毒现在已经可以电子化了

52
00:01:38,000 --> 00:01:39,000
然后数据

53
00:01:39,000 --> 00:01:40,000
digitalize

54
00:01:40,000 --> 00:01:41,000
然后传到那边

55
00:01:41,000 --> 00:01:42,000
或者你传给

56
00:01:42,000 --> 00:01:43,000
real virus

57
00:01:43,000 --> 00:01:45,000
spread across cybernet

58
00:01:45,000 --> 00:01:52,000
生物能不能真的有一天

59
00:01:52,000 --> 00:01:53,000
以数字化的形式存在

60
00:01:53,000 --> 00:01:55,000
理论上可以吧

61
00:01:55,000 --> 00:01:57,000
就是那边探测一下 DNA

62
00:01:57,000 --> 00:01:59,000
然后这边合成一下

63
00:01:59,000 --> 00:02:00,000
不是出来了吗

64
00:02:00,000 --> 00:02:01,000
maker movement

65
00:02:01,000 --> 00:02:01,000
对吧

66
00:02:01,000 --> 00:02:02,000
搞个 3 D 打印机

67
00:02:02,000 --> 00:02:04,000
直接打印病毒出来

68
00:02:04,000 --> 00:02:06,000
你说的是传输生命

69
00:02:06,000 --> 00:02:09,000
我想的是能不能就让生命

70
00:02:09,000 --> 00:02:09,000
就这么生活

71
00:02:09,000 --> 00:02:11,000
生存在网络上

72
00:02:11,000 --> 00:02:14,000
就不用再转化为一个实体

73
00:02:14,000 --> 00:02:17,000
这个就那天我们还在那个

74
00:02:17,000 --> 00:02:19,000
IT 公论里面聊这个事情

75
00:02:19,000 --> 00:02:21,000
说要实现这一点

76
00:02:21,000 --> 00:02:23,000
我们先要解决一些哲学上的问题

77
00:02:23,000 --> 00:02:25,000
什么叫生存是不是

78
00:02:25,000 --> 00:02:26,000
对吧

79
00:02:26,000 --> 00:02:28,000
什么叫意识

80
00:02:28,000 --> 00:02:29,000
对不对

81
00:02:29,000 --> 00:02:31,000
现在其实这个问题有答案了吗

82
00:02:31,000 --> 00:02:32,000
我现在还没有看到

83
00:02:32,000 --> 00:02:33,000
有一个什么确切的

84
00:02:33,000 --> 00:02:34,000
靠谱的解吧

85
00:02:34,000 --> 00:02:35,000
不知道

86
00:02:35,000 --> 00:02:39,000
我觉得下次你们可以请脑科学博士

87
00:02:39,000 --> 00:02:40,000
赵辰上一次你们的解释

88
00:02:40,000 --> 00:02:43,000
OK

89
00:02:43,000 --> 00:02:44,000
好吧

90
00:02:44,000 --> 00:02:47,000
那我们先

91
00:02:47,000 --> 00:02:51,000
想一想上一期的反馈

92
00:02:51,000 --> 00:02:52,000
好

93
00:02:52,000 --> 00:02:54,000
我有一个反馈

94
00:02:54,000 --> 00:02:57,000
有一位叫做 Dainmark 的朋友

95
00:02:57,000 --> 00:02:59,000
在微博上给我们留了个言

96
00:02:59,000 --> 00:03:01,000
他这个消息这么说的

97
00:03:01,000 --> 00:03:02,000
有个问题想问 real

98
00:03:02,000 --> 00:03:04,000
在看不到圆满的情况下

99
00:03:04,000 --> 00:03:09,000
如何知道 onepassword 不是一个密码专业盗窃器呢

100
00:03:09,000 --> 00:03:12,000
以上其测试的语言来说

101
00:03:12,000 --> 00:03:14,000
我们只能把成绩当作一个黑箱

102
00:03:14,000 --> 00:03:16,000
给一些输入来观察输出

103
00:03:16,000 --> 00:03:19,000
但是我们并不能证明打引号

104
00:03:19,000 --> 00:03:21,000
它是可信的

105
00:03:21,000 --> 00:03:24,000
也就是说实际上是我们选择相信 onepassword

106
00:03:24,000 --> 00:03:30,000
想请问 real 是依据哪些因素认为 onepassword 可信的呢

107
00:03:30,000 --> 00:03:32,000
然后他的第二个问题是说

108
00:03:32,000 --> 00:03:36,000
是否 real 只在 onepassword 存储

109
00:03:36,000 --> 00:03:38,000
安全等级较低的密码

110
00:03:38,000 --> 00:03:43,000
那能问一下安全等级较高的信息

111
00:03:43,000 --> 00:03:45,000
比如财户相关的 real 会数字化吗

112
00:03:45,000 --> 00:03:46,000
如果会的话

113
00:03:46,000 --> 00:03:48,000
real 的方案是什么

114
00:03:48,000 --> 00:03:50,000
这里集中解答一下

115
00:03:50,000 --> 00:03:55,000
就是首先我已经不用 onepassword 的

116
00:03:55,000 --> 00:03:57,000
其实我也没怎么用过

117
00:03:57,000 --> 00:04:01,000
他就是当时就有买还是很久以前了

118
00:04:02,000 --> 00:04:04,000
还是他的 2.0 还是 2.0 几的版本

119
00:04:04,000 --> 00:04:05,000
我买过

120
00:04:05,000 --> 00:04:06,000
然后用了一下

121
00:04:06,000 --> 00:04:09,000
觉得还凑合吧

122
00:04:09,000 --> 00:04:12,000
然后后来苹果的 Kitchen

123
00:04:12,000 --> 00:04:14,000
不是出了 iCloudKitchen 吗

124
00:04:14,000 --> 00:04:16,000
就是可以跟 iCloud 通过

125
00:04:16,000 --> 00:04:21,000
同步到你的其他的 iOS 设备或者是 Mac 上面

126
00:04:21,000 --> 00:04:23,000
然后选择全部都存在 Kitchen 里面

127
00:04:23,000 --> 00:04:27,000
然后绝大部分信息都是数字化的

128
00:04:27,000 --> 00:04:30,000
然后一些比较机密的什么银行卡

129
00:04:30,000 --> 00:04:31,000
账号密码之类的

130
00:04:31,000 --> 00:04:33,000
也是存在 Kitchen 里面的

131
00:04:33,000 --> 00:04:34,000
所以刚才那个问题是说

132
00:04:34,000 --> 00:04:36,000
如果没有圆码的话

133
00:04:36,000 --> 00:04:39,000
你怎么去选择相信 onepassword

134
00:04:39,000 --> 00:04:41,000
或者是 Kitchen 的安全性呢

135
00:04:41,000 --> 00:04:44,000
正确答案是你没法缺行

136
00:04:44,000 --> 00:04:45,000
因为你没有圆代码

137
00:04:45,000 --> 00:04:46,000
对吧

138
00:04:46,000 --> 00:04:48,000
也不不介然吧

139
00:04:48,000 --> 00:04:51,000
你可以你可以自己弄一个中年人攻击

140
00:04:51,000 --> 00:04:53,000
你可以把自己的路由器

141
00:04:53,000 --> 00:04:55,000
你可以秀探自己的路由器

142
00:04:55,000 --> 00:04:58,000
然后看他到底在和哪些网站联络

143
00:04:58,000 --> 00:04:59,000
通信对吧

144
00:04:59,000 --> 00:04:59,000
对

145
00:04:59,000 --> 00:05:01,000
这个还是当做黑盒来处理

146
00:05:01,000 --> 00:05:02,000
去观察他的输入输出

147
00:05:02,000 --> 00:05:04,000
或者说你做再彻底一点

148
00:05:04,000 --> 00:05:08,000
你去反编译他的可知性文件

149
00:05:08,000 --> 00:05:10,000
看他有在哪些地方调用网络

150
00:05:10,000 --> 00:05:12,000
然后你足够牛逼的话

151
00:05:12,000 --> 00:05:13,000
应该能反解出来说

152
00:05:13,000 --> 00:05:14,000
他在哪些地方的时候

153
00:05:14,000 --> 00:05:15,000
哪些时候传输了

154
00:05:15,000 --> 00:05:17,000
这个传输之前做了些什么东西

155
00:05:17,000 --> 00:05:21,000
但是我相信绝大部分理智的正常人

156
00:05:21,000 --> 00:05:23,000
是不会去做这件事情的

157
00:05:23,000 --> 00:05:24,000
如果你足够多疑的话

158
00:05:24,000 --> 00:05:27,000
那就是如果你 paranaly 到这个程度的话

159
00:05:27,000 --> 00:05:31,000
那基本上你肯定不会使用任何密码管理软件了

160
00:05:31,000 --> 00:05:31,000
比如我

161
00:05:31,000 --> 00:05:34,000
但是应该是说

162
00:05:34,000 --> 00:05:37,000
如果你需要这个层级的确信的话

163
00:05:37,000 --> 00:05:39,000
要么你就学那个 Richard Stallman

164
00:05:39,000 --> 00:05:42,000
就是你要用的所有软件

165
00:05:42,000 --> 00:05:44,000
我做的就是所有软件

166
00:05:44,000 --> 00:05:46,000
包括像那个硬件的 BIOS

167
00:05:46,000 --> 00:05:48,000
那个就是那个什么

168
00:05:48,000 --> 00:05:50,000
其他的中间都不说了

169
00:05:50,000 --> 00:05:51,000
什么操作系统

170
00:05:51,000 --> 00:05:52,000
应用程序

171
00:05:52,000 --> 00:05:54,000
都必须要是开源的

172
00:05:54,000 --> 00:05:56,000
你才能够去确保每个东西

173
00:05:56,000 --> 00:05:58,000
然后你对硬件的要求也是有高优势

174
00:05:58,000 --> 00:05:59,000
你必须用那种所谓的

175
00:05:59,000 --> 00:06:01,000
就是 open hardware

176
00:06:01,000 --> 00:06:04,000
就是不要有那种常有私有代码的那种硬件

177
00:06:04,000 --> 00:06:05,000
就包括某一个

178
00:06:05,000 --> 00:06:09,000
比如说现在很多这个用硬盘或者 SSD

179
00:06:09,000 --> 00:06:10,000
上面不会有很多芯片吗

180
00:06:10,000 --> 00:06:11,000
对吧

181
00:06:11,000 --> 00:06:11,000
嗯

182
00:06:11,000 --> 00:06:13,000
你的那些芯片的要求

183
00:06:13,000 --> 00:06:15,000
也是要求他们能开源的

184
00:06:15,000 --> 00:06:16,000
能知道你他在里面在做什么

185
00:06:16,000 --> 00:06:18,000
你这个时候你才可以

186
00:06:18,000 --> 00:06:21,000
就是你在有所有的圆满的基础下

187
00:06:21,000 --> 00:06:22,000
你才可以确信的说

188
00:06:22,000 --> 00:06:24,000
这个机器没有做你

189
00:06:24,000 --> 00:06:25,000
你不想要他做的事情

190
00:06:25,000 --> 00:06:27,000
但是我觉得 Richard Stallman

191
00:06:27,000 --> 00:06:29,000
是用 happy hacking keyboard 了吧

192
00:06:29,000 --> 00:06:32,000
对他接一个

193
00:06:32,000 --> 00:06:33,000
如果是的话

194
00:06:33,000 --> 00:06:36,000
happy hacking keyboard 的 controller 是必远的

195
00:06:36,000 --> 00:06:37,000
是吗

196
00:06:37,000 --> 00:06:38,000
是

197
00:06:38,000 --> 00:06:40,000
所以这又存在一个漏洞了

198
00:06:40,000 --> 00:06:41,000
对吧

199
00:06:41,000 --> 00:06:42,000
你不确定他那个

200
00:06:42,000 --> 00:06:43,000
那个那个键盘里面有没有

201
00:06:43,000 --> 00:06:44,000
那个 keylogger

202
00:06:44,000 --> 00:06:46,000
就是键盘记录器对吧

203
00:06:46,000 --> 00:06:47,000
对

204
00:06:47,000 --> 00:06:48,000
这又是一个不确定因素

205
00:06:48,000 --> 00:06:49,000
所以其实你看

206
00:06:49,000 --> 00:06:51,000
在现代这种情况下

207
00:06:51,000 --> 00:06:53,000
你要求说每个步骤都是被

208
00:06:53,000 --> 00:06:54,000
可以被 audited

209
00:06:54,000 --> 00:06:55,000
就是可审计的

210
00:06:55,000 --> 00:06:57,000
基本是不现实的

211
00:06:57,000 --> 00:06:58,000
对是非常非常难的一件事情

212
00:06:58,000 --> 00:06:59,000
对

213
00:06:59,000 --> 00:07:00,000
那这个时候怎么办呢

214
00:07:00,000 --> 00:07:03,000
那你只能选择相信一些人

215
00:07:03,000 --> 00:07:05,000
或者是一个人了

216
00:07:05,000 --> 00:07:06,000
这个时候就可以

217
00:07:06,000 --> 00:07:07,000
你可以选择说

218
00:07:07,000 --> 00:07:08,000
你相信苹果呢

219
00:07:08,000 --> 00:07:10,000
还是相信 one password 呢

220
00:07:10,000 --> 00:07:11,000
当然你选择相信 one password

221
00:07:11,000 --> 00:07:14,000
你刚刚跑的又是 Mac 系统的话

222
00:07:14,000 --> 00:07:15,000
你最后还是得选择相信苹果

223
00:07:15,000 --> 00:07:15,000
对吧

224
00:07:15,000 --> 00:07:17,000
所以我的策略就比较简单了

225
00:07:17,000 --> 00:07:18,000
那我就相信苹果好了

226
00:07:18,000 --> 00:07:21,000
with a leap of faith

227
00:07:21,000 --> 00:07:21,000
对

228
00:07:21,000 --> 00:07:23,000
像信上帝一样的

229
00:07:23,000 --> 00:07:24,000
没错

230
00:07:24,000 --> 00:07:25,000
苹果叫嘛

231
00:07:25,000 --> 00:07:26,000
那个拜一拜

232
00:07:26,000 --> 00:07:26,000
对

233
00:07:26,000 --> 00:07:29,000
就是这个时候你就只能选择相信

234
00:07:29,000 --> 00:07:32,000
然后为什么我选择相信苹果呢

235
00:07:32,000 --> 00:07:33,000
这个流也很简单

236
00:07:33,000 --> 00:07:33,000
因为这个什么

237
00:07:33,000 --> 00:07:35,000
他已经把这个牛逼吹出去了

238
00:07:35,000 --> 00:07:36,000
对吧

239
00:07:36,000 --> 00:07:39,000
就是我们不销售这个用户隐私信息

240
00:07:39,000 --> 00:07:41,000
我们也不支付后门

241
00:07:41,000 --> 00:07:42,000
我们也不做一些什么

242
00:07:42,000 --> 00:07:43,000
对用户有害的事情

243
00:07:43,000 --> 00:07:46,000
因为我比较缺行的点是

244
00:07:46,000 --> 00:07:50,000
如果被人爆出来说苹果有意在那个 kitchen 里面

245
00:07:50,000 --> 00:07:52,000
或者其他 Mac 里面做了什么手脚

246
00:07:52,000 --> 00:07:54,000
最后被人发现的话

247
00:07:54,000 --> 00:07:56,000
他对他的这个叫做商欲

248
00:07:56,000 --> 00:08:02,000
就讲说我们这个在这个在会计上是有这么一个概念

249
00:08:02,000 --> 00:08:03,000
叫做商欲

250
00:08:03,000 --> 00:08:03,000
叫 goodwill

251
00:08:03,000 --> 00:08:05,000
就是公司的品牌

252
00:08:05,000 --> 00:08:07,000
这个东西的这些东西的价值

253
00:08:07,000 --> 00:08:09,000
如果苹果被发现

254
00:08:09,000 --> 00:08:12,000
他故意比如说因为 NSA 给他下了

255
00:08:12,000 --> 00:08:14,000
给他什么秘密法令

256
00:08:14,000 --> 00:08:16,000
他就在电话里面做什么手脚

257
00:08:16,000 --> 00:08:17,000
如果他真的这么做了

258
00:08:17,000 --> 00:08:20,000
我相信对他商业是非常大的损失

259
00:08:20,000 --> 00:08:21,000
这个损失通常是以多少

260
00:08:21,000 --> 00:08:23,000
billion dollars

261
00:08:23,000 --> 00:08:25,000
就是 10 亿美元为单位的极价

262
00:08:25,000 --> 00:08:27,000
对所以这个时候

263
00:08:27,000 --> 00:08:32,000
我相信在如此大的压力下

264
00:08:32,000 --> 00:08:37,000
以及从他们这么多年坚持下道德观念来看

265
00:08:37,000 --> 00:08:40,000
我觉得我相信他们是可以的

266
00:08:40,000 --> 00:08:42,000
但至于说你信不信

267
00:08:42,000 --> 00:08:44,000
请你自己做自己的选择

268
00:08:44,000 --> 00:08:44,000
和判断

269
00:08:44,000 --> 00:08:47,000
对比如说我就选择不信

270
00:08:47,000 --> 00:08:49,000
因为这世界上没有什么东西是可信

271
00:08:49,000 --> 00:08:53,000
我不是故意跟你探完调

272
00:08:53,000 --> 00:08:53,000
但

273
00:08:53,000 --> 00:08:56,000
Richard Fokstorman 你好

274
00:08:56,000 --> 00:08:58,000
我们来握一个

275
00:08:58,000 --> 00:09:01,000
对

276
00:09:01,000 --> 00:09:03,000
我反正我也顺便说说自己的选择吧

277
00:09:03,000 --> 00:09:04,000
就我

278
00:09:04,000 --> 00:09:07,000
我是不用任何密码管理人员

279
00:09:07,000 --> 00:09:10,000
所以你的密码是靠一套机制来实现的

280
00:09:10,000 --> 00:09:11,000
对

281
00:09:11,000 --> 00:09:15,000
我有一套比较详尽的密码存储和管理机制

282
00:09:15,000 --> 00:09:15,000
然后

283
00:09:15,000 --> 00:09:18,000
你什么大脑自带密码生成期

284
00:09:18,000 --> 00:09:20,000
对我曾经在支付上写一个给达

285
00:09:20,000 --> 00:09:23,000
反正简单的来说就是密码要分三层

286
00:09:23,000 --> 00:09:29,000
最基本的密码是一个大概一两年换一次密码

287
00:09:29,000 --> 00:09:34,000
然后这个密码可以是在所有这些网站上都一样的

288
00:09:34,000 --> 00:09:35,000
比如说什么

289
00:09:35,000 --> 00:09:40,000
你想要下载一个 SQL Developer

290
00:09:40,000 --> 00:09:43,000
从 Oracle 网站上下一个 SQL Developer

291
00:09:43,000 --> 00:09:43,000
你可以

292
00:09:43,000 --> 00:09:46,000
它强迫你注册

293
00:09:46,000 --> 00:09:47,000
然后你

294
00:09:47,000 --> 00:09:49,000
此时你可以选择去下一个什么

295
00:09:49,000 --> 00:09:51,000
BugMeNot 之类的

296
00:09:51,000 --> 00:09:52,000
浏览器插件

297
00:09:52,000 --> 00:09:54,000
它自动帮你填一个已经有人注册过的

298
00:09:54,000 --> 00:09:56,000
弱密码

299
00:09:56,000 --> 00:10:00,000
另外一个选择就是你自己维护一个非常弱的密码

300
00:10:00,000 --> 00:10:04,000
然后基本上最低级的这一层密码

301
00:10:04,000 --> 00:10:05,000
我就是用一个

302
00:10:05,000 --> 00:10:06,000
一直用一个最一样的

303
00:10:08,000 --> 00:10:11,000
第二层密码是每个网站不一样

304
00:10:12,000 --> 00:10:13,000
而且

305
00:10:13,000 --> 00:10:16,000
但是有一部分是一样的

306
00:10:16,000 --> 00:10:20,000
这个是比如一些比较重要的网站

307
00:10:20,000 --> 00:10:24,000
比如像什么知乎或者是微博之类的

308
00:10:24,000 --> 00:10:26,000
这种跟你的 identity 相关的东西

309
00:10:26,000 --> 00:10:30,000
然后这些密码有一套生成机制

310
00:10:30,000 --> 00:10:32,000
就是我看到它的网址或者是

311
00:10:32,000 --> 00:10:34,000
一般是看到网址的时候

312
00:10:34,000 --> 00:10:37,000
会想到这个密码应该是怎么构建的

313
00:10:37,000 --> 00:10:39,000
然后第三层密码就是什么网银的密码

314
00:10:39,000 --> 00:10:40,000
信用卡的密码

315
00:10:40,000 --> 00:10:42,000
或者是

316
00:10:42,000 --> 00:10:46,000
什么报税的税务局的密码之类的

317
00:10:46,000 --> 00:10:48,000
这个密码是每个网站都不一样

318
00:10:48,000 --> 00:10:51,000
而且跟网站本身没有关系

319
00:10:51,000 --> 00:10:54,000
而且我自己有时候必须去看一个 reminder

320
00:10:54,000 --> 00:10:55,000
才能看出来

321
00:10:55,000 --> 00:10:56,000
才能想起来

322
00:10:56,000 --> 00:10:59,000
所以你还是记录了密码在某一个地方

323
00:10:59,000 --> 00:11:00,000
对吧

324
00:11:00,000 --> 00:11:03,000
但我只记录了这个密码的 salt

325
00:11:03,000 --> 00:11:04,000
你可以理解吗

326
00:11:04,000 --> 00:11:07,000
hint 吧应该是

327
00:11:07,000 --> 00:11:08,000
salt 就是那个

328
00:11:08,000 --> 00:11:10,000
就是看到这个

329
00:11:10,000 --> 00:11:12,000
看到这一串东西

330
00:11:12,000 --> 00:11:15,000
我才能够重新构建出那个密码

331
00:11:15,000 --> 00:11:15,000
这么一个

332
00:11:15,000 --> 00:11:16,000
对

333
00:11:16,000 --> 00:11:20,000
salt 是你已经有一个密码

334
00:11:20,000 --> 00:11:23,000
然后你通过加这个 salt 这个言

335
00:11:23,000 --> 00:11:24,000
变成一个新密码去输入的

336
00:11:24,000 --> 00:11:25,000
是吧

337
00:11:25,000 --> 00:11:26,000
你是这么一个过程

338
00:11:26,000 --> 00:11:28,000
ok 你说对

339
00:11:28,000 --> 00:11:29,000
好

340
00:11:29,000 --> 00:11:32,000
因为我在那个纸上写了 salt 这次

341
00:11:32,000 --> 00:11:34,000
所以我一直叫 salt

342
00:11:34,000 --> 00:11:35,000
你说的没错

343
00:11:35,000 --> 00:11:36,000
只能说是一种

344
00:11:36,000 --> 00:11:37,000
是个 hint

345
00:11:37,000 --> 00:11:38,000
对是个提示

346
00:11:38,000 --> 00:11:39,000
那你想起来密码是什么

347
00:11:39,000 --> 00:11:40,000
对

348
00:11:40,000 --> 00:11:41,000
然后最重要的是

349
00:11:41,000 --> 00:11:42,000
比如说什么

350
00:11:42,000 --> 00:11:43,000
飞流直下 3000 尺

351
00:11:43,000 --> 00:11:44,000
是不是

352
00:11:44,000 --> 00:11:46,000
没有那么弱

353
00:11:46,000 --> 00:11:48,000
或者说我文学素颜

354
00:11:48,000 --> 00:11:48,000
没有那么高

355
00:11:48,000 --> 00:11:51,000
但最重要的是

356
00:11:51,000 --> 00:11:53,000
就是第二层和第三层密码

357
00:11:53,000 --> 00:11:54,000
要比第一层密码

358
00:11:54,000 --> 00:11:55,000
换得更勤快一些

359
00:11:55,000 --> 00:11:57,000
就是一层密码

360
00:11:57,000 --> 00:11:58,000
可能两个月就要换一次

361
00:11:58,000 --> 00:11:59,000
ok

362
00:11:59,000 --> 00:12:00,000
这是比较重要

363
00:12:00,000 --> 00:12:02,000
但是这是一个 paranoid

364
00:12:02,000 --> 00:12:04,000
人才会需要做的事情

365
00:12:04,000 --> 00:12:06,000
对

366
00:12:06,000 --> 00:12:08,000
另外就是所有能够

367
00:12:08,000 --> 00:12:09,000
采用两部

368
00:12:09,000 --> 00:12:10,000
叫什么

369
00:12:10,000 --> 00:12:11,000
双部验证

370
00:12:11,000 --> 00:12:12,000
对

371
00:12:12,000 --> 00:12:13,000
两部验证的网站

372
00:12:13,000 --> 00:12:14,000
一定要使用两部验证

373
00:12:14,000 --> 00:12:17,000
两部验证是手机上做的

374
00:12:17,000 --> 00:12:17,000
是吧

375
00:12:17,000 --> 00:12:18,000
用那个什么

376
00:12:18,000 --> 00:12:19,000
Google Authenticator

377
00:12:19,000 --> 00:12:19,000
还是用什么

378
00:12:19,000 --> 00:12:21,000
对

379
00:12:21,000 --> 00:12:22,000
我是用 Google Authenticator

380
00:12:22,000 --> 00:12:24,000
然后 BattleNet 有一个

381
00:12:24,000 --> 00:12:24,000
然后

382
00:12:24,000 --> 00:12:26,000
对

383
00:12:26,000 --> 00:12:27,000
然后部分德国银行

384
00:12:27,000 --> 00:12:28,000
会给你一个卡

385
00:12:28,000 --> 00:12:29,000
这个卡上可以按那个

386
00:12:29,000 --> 00:12:31,000
那个是

387
00:12:31,000 --> 00:12:31,000
蛮爽

388
00:12:31,000 --> 00:12:33,000
叫做密码器

389
00:12:33,000 --> 00:12:33,000
对

390
00:12:33,000 --> 00:12:34,000
对对对

391
00:12:34,000 --> 00:12:36,000
中国很多现在银行也有了

392
00:12:36,000 --> 00:12:38,000
我觉得那个其实是比较安全的一个

393
00:12:38,000 --> 00:12:40,000
选择

394
00:12:40,000 --> 00:12:40,000
对对对

395
00:12:40,000 --> 00:12:42,000
我的那个密码管理方法上

396
00:12:42,000 --> 00:12:44,000
我在同一个支付问题下

397
00:12:44,000 --> 00:12:45,000
我也有答好

398
00:12:45,000 --> 00:12:46,000
我们都有在那里

399
00:12:46,000 --> 00:12:48,000
到时候把那个连接贴出来吧

400
00:12:48,000 --> 00:12:48,000
我的就是

401
00:12:48,000 --> 00:12:50,000
我的比你更机器化

402
00:12:50,000 --> 00:12:52,000
然后更做的更绝

403
00:12:52,000 --> 00:12:53,000
就是所有的策略都是一样的

404
00:12:53,000 --> 00:12:55,000
每个网站都是随机生成的密码

405
00:12:55,000 --> 00:12:56,000
我自己都不知道

406
00:12:56,000 --> 00:12:57,000
必须用密码管理去看

407
00:12:57,000 --> 00:13:00,000
但此时就是

408
00:13:00,000 --> 00:13:03,000
你可能会选择在省

409
00:13:03,000 --> 00:13:05,000
你必须在省心和

410
00:13:05,000 --> 00:13:09,000
有安全感之间

411
00:13:09,000 --> 00:13:10,000
找到一个

412
00:13:10,000 --> 00:13:11,000
找到一个 balance

413
00:13:11,000 --> 00:13:12,000
我的方法

414
00:13:12,000 --> 00:13:14,000
肯定不适合任何人的

415
00:13:14,000 --> 00:13:14,000
对

416
00:13:14,000 --> 00:13:16,000
我的也肯定不适合任何人

417
00:13:16,000 --> 00:13:18,000
因为太麻烦了

418
00:13:18,000 --> 00:13:21,000
但是我是不介意麻烦的

419
00:13:21,000 --> 00:13:21,000
然后

420
00:13:21,000 --> 00:13:25,000
然后你刚才说是

421
00:13:25,000 --> 00:13:26,000
你是有些网站是共享

422
00:13:26,000 --> 00:13:27,000
一个密码的吗

423
00:13:27,000 --> 00:13:28,000
对

424
00:13:28,000 --> 00:13:31,000
我都是每个都是不同的密码的

425
00:13:31,000 --> 00:13:31,000
对

426
00:13:31,000 --> 00:13:32,000
从这个角度讲

427
00:13:32,000 --> 00:13:33,000
你标

428
00:13:33,000 --> 00:13:34,000
你要比我安全一些

429
00:13:34,000 --> 00:13:34,000
但

430
00:13:34,000 --> 00:13:35,000
没错

431
00:13:35,000 --> 00:13:36,000
而且我连每个

432
00:13:36,000 --> 00:13:37,000
每个的邮箱账号都是不一样的

433
00:13:37,000 --> 00:13:39,000
就每个注册账号的邮箱

434
00:13:39,000 --> 00:13:39,000
都是不一样

435
00:13:39,000 --> 00:13:40,000
对

436
00:13:40,000 --> 00:13:41,000
我觉得这个是为了

437
00:13:41,000 --> 00:13:42,000
最变态的一点

438
00:13:42,000 --> 00:13:44,000
它有一个自己的

439
00:13:44,000 --> 00:13:45,000
Google Apps

440
00:13:45,000 --> 00:13:46,000
是吧

441
00:13:46,000 --> 00:13:47,000
对

442
00:13:47,000 --> 00:13:49,000
然后它给每一个网站

443
00:13:49,000 --> 00:13:50,000
都有一个自己不同的用物名

444
00:13:50,000 --> 00:13:52,000
然后导致有时候

445
00:13:52,000 --> 00:13:53,000
我会想要在这个网站上

446
00:13:53,000 --> 00:13:55,000
给他分享一个什么东西

447
00:13:55,000 --> 00:13:56,000
然后他告诉我

448
00:13:56,000 --> 00:13:56,000
他得先问我是哪个账号

449
00:13:56,000 --> 00:13:58,000
那个网站

450
00:13:58,000 --> 00:13:59,000
另外一个

451
00:13:59,000 --> 00:14:00,000
然后我就犯

452
00:14:00,000 --> 00:14:00,000
对

453
00:14:00,000 --> 00:14:02,000
因为为什么要这么做

454
00:14:02,000 --> 00:14:04,000
其实除了在一个安全上

455
00:14:04,000 --> 00:14:05,000
还有一个就是

456
00:14:05,000 --> 00:14:06,000
一个匿名性的问题

457
00:14:06,000 --> 00:14:07,000
就是很多

458
00:14:07,000 --> 00:14:08,000
现在很多网站

459
00:14:08,000 --> 00:14:10,000
它是可以通过

460
00:14:10,000 --> 00:14:11,000
你使用同一个账号

461
00:14:11,000 --> 00:14:12,000
判断出

462
00:14:12,000 --> 00:14:13,000
你在那个网站

463
00:14:13,000 --> 00:14:15,000
用了另外一个什么服务

464
00:14:15,000 --> 00:14:15,000
对吧

465
00:14:15,000 --> 00:14:17,000
就不希望这样被他们

466
00:14:17,000 --> 00:14:18,000
通过交叉

467
00:14:18,000 --> 00:14:19,000
比对账号的方法

468
00:14:19,000 --> 00:14:19,000
tracking 到

469
00:14:19,000 --> 00:14:21,000
因为有很多

470
00:14:21,000 --> 00:14:23,000
其实我们可以讲一下

471
00:14:23,000 --> 00:14:24,000
之前很多人

472
00:14:24,000 --> 00:14:26,000
账号被泄露出去的原因

473
00:14:26,000 --> 00:14:27,000
也比较简单

474
00:14:27,000 --> 00:14:28,000
就是很多人

475
00:14:28,000 --> 00:14:29,000
都是用同样一个账号

476
00:14:29,000 --> 00:14:30,000
比如你就某一个

477
00:14:30,000 --> 00:14:31,000
固定的邮箱地址

478
00:14:31,000 --> 00:14:33,000
或者是你的手机号码

479
00:14:33,000 --> 00:14:33,000
或者是某个人

480
00:14:33,000 --> 00:14:34,000
固定一个 ID

481
00:14:34,000 --> 00:14:35,000
对吧

482
00:14:35,000 --> 00:14:36,000
然后一套固定的密码

483
00:14:36,000 --> 00:14:37,000
注册多个账号

484
00:14:38,000 --> 00:14:39,000
就是刚才你说的

485
00:14:39,000 --> 00:14:39,000
第一层

486
00:14:39,000 --> 00:14:41,000
有这种不怎么安全的东西

487
00:14:41,000 --> 00:14:43,000
然后其中某一个服务

488
00:14:43,000 --> 00:14:45,000
被人脱库了

489
00:14:45,000 --> 00:14:46,000
就是所谓

490
00:14:46,000 --> 00:14:49,000
它的密码用户账号的

491
00:14:49,000 --> 00:14:50,000
数据库那张表

492
00:14:50,000 --> 00:14:51,000
被人爆出来

493
00:14:51,000 --> 00:14:52,000
这样的话

494
00:14:52,000 --> 00:14:54,000
别人拿到信息之后

495
00:14:54,000 --> 00:14:55,000
他可以挨个去试

496
00:14:55,000 --> 00:14:56,000
常见的网站上

497
00:14:56,000 --> 00:14:57,000
你同一个账号

498
00:14:57,000 --> 00:14:57,000
同一个密码

499
00:14:57,000 --> 00:14:59,000
有没有注册

500
00:14:59,000 --> 00:15:00,000
其他同类的服务

501
00:15:00,000 --> 00:15:00,000
对吧

502
00:15:00,000 --> 00:15:01,000
就可以一次连带

503
00:15:01,000 --> 00:15:03,000
攻陷你的好多这种东西

504
00:15:03,000 --> 00:15:04,000
所以我就可以

505
00:15:04,000 --> 00:15:06,000
从根源上阻断这一点

506
00:15:06,000 --> 00:15:07,000
第一个

507
00:15:07,000 --> 00:15:07,000
你没办法

508
00:15:07,000 --> 00:15:10,000
把我的不同的网站的账号

509
00:15:10,000 --> 00:15:11,000
能够串起来

510
00:15:11,000 --> 00:15:11,000
第二个

511
00:15:11,000 --> 00:15:13,000
就算你发现

512
00:15:13,000 --> 00:15:14,000
我的账号

513
00:15:14,000 --> 00:15:16,000
是这个人用了这个账号

514
00:15:16,000 --> 00:15:17,000
是等于那个人

515
00:15:17,000 --> 00:15:18,000
在那个账号上面去

516
00:15:18,000 --> 00:15:19,000
你从用同一个密码去试

517
00:15:19,000 --> 00:15:20,000
也是不行的

518
00:15:20,000 --> 00:15:21,000
因为每个密码都是不一样的

519
00:15:21,000 --> 00:15:25,000
然后我跟你有一点不一样

520
00:15:25,000 --> 00:15:27,000
就是我不怎么去更换密码

521
00:15:27,000 --> 00:15:31,000
我不会说隔三差

522
00:15:31,000 --> 00:15:32,000
我去换它一轮

523
00:15:32,000 --> 00:15:33,000
就是比较不平凡

524
00:15:33,000 --> 00:15:34,000
也换

525
00:15:34,000 --> 00:15:35,000
但是不是非常平凡

526
00:15:35,000 --> 00:15:37,000
因为我的理念是这样子的

527
00:15:37,000 --> 00:15:40,000
就是按照我这种用法

528
00:15:40,000 --> 00:15:41,000
和注意事项的结果

529
00:15:41,000 --> 00:15:43,000
如果这样密码被泄露

530
00:15:43,000 --> 00:15:45,000
一般是因为对方网站被脱苦了

531
00:15:45,000 --> 00:15:46,000
这个时候你换不换密码

532
00:15:46,000 --> 00:15:47,000
是没有任何区别的

533
00:15:47,000 --> 00:15:54,000
因为我的确是有道理

534
00:15:54,000 --> 00:15:54,000
对

535
00:15:54,000 --> 00:15:57,000
然后就我已经很麻烦了

536
00:15:57,000 --> 00:15:59,000
我就不想再给自己添更多的麻烦

537
00:15:59,000 --> 00:16:02,000
然后关于两部验证

538
00:16:02,000 --> 00:16:02,000
我也是就说

539
00:16:02,000 --> 00:16:04,000
基本上就是重要的服务

540
00:16:04,000 --> 00:16:06,000
就其实提供两部验证的

541
00:16:06,000 --> 00:16:07,000
基本上是重要的服务

542
00:16:07,000 --> 00:16:08,000
对

543
00:16:08,000 --> 00:16:11,000
然后就基本上有两部验证的

544
00:16:11,000 --> 00:16:11,000
我都开了

545
00:16:11,000 --> 00:16:12,000
然后我在

546
00:16:12,000 --> 00:16:14,000
那个 iOS 上装了一个

547
00:16:14,000 --> 00:16:16,000
叫做 Authi 的一个应用

548
00:16:16,000 --> 00:16:19,000
之前也问那个 Google Authenticator

549
00:16:19,000 --> 00:16:20,000
发现它不太好使

550
00:16:20,000 --> 00:16:22,000
就是那个界面也比较糟糕

551
00:16:22,000 --> 00:16:26,000
然后 Authi 会稍微好一点点

552
00:16:26,000 --> 00:16:28,000
其实当年最主要的原因是

553
00:16:28,000 --> 00:16:30,000
Authi 有一个 Mac

554
00:16:30,000 --> 00:16:32,000
就是 OS 10 的一个应用

555
00:16:32,000 --> 00:16:35,000
它理论上是可以通过蓝牙

556
00:16:35,000 --> 00:16:37,000
和你手机上 Authi 连接

557
00:16:37,000 --> 00:16:38,000
这样的话

558
00:16:38,000 --> 00:16:40,000
你就不用打开手机

559
00:16:40,000 --> 00:16:42,000
就能通过电脑上

560
00:16:42,000 --> 00:16:43,000
Authi 的插件

561
00:16:43,000 --> 00:16:47,000
直接把一般是一个六位数的数字

562
00:16:47,000 --> 00:16:48,000
读出来

563
00:16:48,000 --> 00:16:51,000
后来我发现其实不行的

564
00:16:51,000 --> 00:16:53,000
就是那个是要求手机上

565
00:16:53,000 --> 00:16:55,000
Authi 是在工作状态才可以的

566
00:16:55,000 --> 00:16:57,000
所以最终你还是得开一个

567
00:16:57,000 --> 00:17:00,000
手机上的 Authi

568
00:17:00,000 --> 00:17:01,000
然后再开电脑上 Authi

569
00:17:01,000 --> 00:17:02,000
去跟它蓝牙共享

570
00:17:02,000 --> 00:17:03,000
这样比较麻烦

571
00:17:03,000 --> 00:17:05,000
最后这样还是就直接在手机上

572
00:17:05,000 --> 00:17:08,000
六位数也不是特别麻烦

573
00:17:08,000 --> 00:17:08,000
对吧

574
00:17:08,000 --> 00:17:09,000
就是可以数一下

575
00:17:09,000 --> 00:17:10,000
还可以

576
00:17:10,000 --> 00:17:14,000
然后后来那个 iOS 8 还是 7

577
00:17:14,000 --> 00:17:15,000
不是有的那个叫做

578
00:17:15,000 --> 00:17:17,000
Notification Center

579
00:17:17,000 --> 00:17:19,000
不是有的那个 Today

580
00:17:19,000 --> 00:17:20,000
Today 什么

581
00:17:20,000 --> 00:17:22,000
Today Extension 还是叫什么呢

582
00:17:22,000 --> 00:17:24,000
就是从顶上

583
00:17:24,000 --> 00:17:24,000
对

584
00:17:24,000 --> 00:17:25,000
Today View

585
00:17:25,000 --> 00:17:25,000
对

586
00:17:25,000 --> 00:17:26,000
从顶上拉下来

587
00:17:26,000 --> 00:17:28,000
然后 Authi 它加了这么一个功能

588
00:17:28,000 --> 00:17:29,000
就是它可以直接在里面

589
00:17:29,000 --> 00:17:30,000
加个快捷访问

590
00:17:30,000 --> 00:17:32,000
就可以直接拉下来

591
00:17:32,000 --> 00:17:33,000
翻到 Authi 的那一栏

592
00:17:33,000 --> 00:17:35,000
然后点击某一个账号进去

593
00:17:35,000 --> 00:17:36,000
再输入一下这个密码

594
00:17:36,000 --> 00:17:37,000
或者验一下指纹

595
00:17:37,000 --> 00:17:40,000
就可以直接取到那个六位数的

596
00:17:40,000 --> 00:17:41,000
那个验证码了

597
00:17:41,000 --> 00:17:42,000
对吧

598
00:17:42,000 --> 00:17:42,000
所以这样的话

599
00:17:42,000 --> 00:17:44,000
就是还是比较方便

600
00:17:44,000 --> 00:17:48,000
然后还有一种方式

601
00:17:48,000 --> 00:17:52,000
就是用一个硬件的 USB 设备

602
00:17:52,000 --> 00:17:54,000
一个早期叫什么

603
00:17:54,000 --> 00:17:55,000
国内大家都很熟

604
00:17:55,000 --> 00:17:56,000
叫做 U-Dun

605
00:17:56,000 --> 00:17:57,000
对

606
00:17:57,000 --> 00:17:57,000
U-Dun

607
00:17:57,000 --> 00:17:59,000
银行的弄

608
00:17:59,000 --> 00:18:00,000
它其实还有好几种形式

609
00:18:00,000 --> 00:18:02,000
不光是有 USB 的

610
00:18:02,000 --> 00:18:04,000
就 USB 的都有好几种

611
00:18:04,000 --> 00:18:05,000
第一种是最传统的

612
00:18:05,000 --> 00:18:05,000
那个

613
00:18:05,000 --> 00:18:08,000
我记得当年是工行吧

614
00:18:08,000 --> 00:18:09,000
我可以办了第一个 U-Dun

615
00:18:09,000 --> 00:18:10,000
就插上去

616
00:18:10,000 --> 00:18:10,000
它里面是

617
00:18:10,000 --> 00:18:12,000
其实就是内置一个

618
00:18:12,000 --> 00:18:14,000
私钥了

619
00:18:14,000 --> 00:18:14,000
对

620
00:18:14,000 --> 00:18:15,000
不是

621
00:18:15,000 --> 00:18:15,000
它是一个私钥

622
00:18:15,000 --> 00:18:16,000
私钥信用器

623
00:18:16,000 --> 00:18:18,000
它就是一个内置的私钥

624
00:18:18,000 --> 00:18:20,000
没有密码信用器

625
00:18:20,000 --> 00:18:21,000
没有密码信用器

626
00:18:21,000 --> 00:18:23,000
它是验证那个系统用的

627
00:18:23,000 --> 00:18:24,000
如果我们理解没错

628
00:18:24,000 --> 00:18:24,000
应该是这样

629
00:18:24,000 --> 00:18:26,000
它就是给签名用的

630
00:18:26,000 --> 00:18:27,000
然后那个私钥

631
00:18:27,000 --> 00:18:29,000
它是一个叫做 HSM

632
00:18:29,000 --> 00:18:33,000
Hardware Security Module

633
00:18:33,000 --> 00:18:34,000
应该是叫这个名字

634
00:18:34,000 --> 00:18:35,000
OK

635
00:18:35,000 --> 00:18:39,000
因为我们当时有一个同学在研究

636
00:18:39,000 --> 00:18:40,000
他说里面是一个

637
00:18:40,000 --> 00:18:42,000
或者他的意思是

638
00:18:42,000 --> 00:18:43,000
每次给出来的私钥

639
00:18:43,000 --> 00:18:47,000
只是所有可能私钥之中一种

640
00:18:47,000 --> 00:18:47,000
就是

641
00:18:47,000 --> 00:18:48,000
这么高级

642
00:18:48,000 --> 00:18:48,000
对

643
00:18:48,000 --> 00:18:49,000
OK

644
00:18:49,000 --> 00:18:51,000
反正

645
00:18:51,000 --> 00:18:51,000
反正

646
00:18:51,000 --> 00:18:52,000
就是逻辑上应该这样

647
00:18:52,000 --> 00:18:53,000
它里面是一个

648
00:18:53,000 --> 00:18:54,000
只有那个硬件

649
00:18:54,000 --> 00:18:57,000
本身才知道的一个秘密

650
00:18:57,000 --> 00:18:57,000
然后这个秘密是

651
00:18:57,000 --> 00:18:59,000
不能通过 USB 这口读取的

652
00:18:59,000 --> 00:19:00,000
它只能说

653
00:19:00,000 --> 00:19:01,000
你提供一个东西

654
00:19:01,000 --> 00:19:02,000
给它帮你验证

655
00:19:02,000 --> 00:19:03,000
帮你做一个签名

656
00:19:03,000 --> 00:19:04,000
然后这个签名

657
00:19:04,000 --> 00:19:05,000
再返回到你电脑里面

658
00:19:05,000 --> 00:19:06,000
再传输给对方网站

659
00:19:06,000 --> 00:19:08,000
然后那个

660
00:19:08,000 --> 00:19:09,000
应该是

661
00:19:09,000 --> 00:19:10,000
对

662
00:19:10,000 --> 00:19:11,000
然后那边可以通过

663
00:19:11,000 --> 00:19:12,000
这个签名验证

664
00:19:12,000 --> 00:19:13,000
确实是经过这个私钥

665
00:19:13,000 --> 00:19:16,000
签名过的东西

666
00:19:16,000 --> 00:19:16,000
这么大个

667
00:19:16,000 --> 00:19:17,000
这么一个过程

668
00:19:17,000 --> 00:19:18,000
对

669
00:19:18,000 --> 00:19:20,000
然后还有一种

670
00:19:20,000 --> 00:19:22,000
是 USB 的

671
00:19:22,000 --> 00:19:23,000
不是 USB

672
00:19:23,000 --> 00:19:24,000
就是刚才你说的

673
00:19:24,000 --> 00:19:25,000
那种密码器

674
00:19:25,000 --> 00:19:25,000
就是一个

675
00:19:25,000 --> 00:19:28,000
它不需要通 USB 接口来插的

676
00:19:28,000 --> 00:19:30,000
它就是一个

677
00:19:30,000 --> 00:19:31,000
叫 RC

678
00:19:31,000 --> 00:19:33,000
美国内建公司

679
00:19:33,000 --> 00:19:34,000
它有一个小的

680
00:19:34,000 --> 00:19:35,000
一个挂钥匙

681
00:19:35,000 --> 00:19:36,000
穿上一个小东西

682
00:19:36,000 --> 00:19:37,000
有个小屏幕

683
00:19:37,000 --> 00:19:38,000
它就是

684
00:19:38,000 --> 00:19:39,000
就是那个

685
00:19:39,000 --> 00:19:41,000
RC 的硬件版本

686
00:19:41,000 --> 00:19:41,000
它每隔

687
00:19:41,000 --> 00:19:42,000
可能 15 秒 30 秒

688
00:19:42,000 --> 00:19:44,000
它会换一个数字

689
00:19:44,000 --> 00:19:45,000
然后这个数字

690
00:19:45,000 --> 00:19:46,000
它那个顺序

691
00:19:46,000 --> 00:19:47,000
那个 sequence

692
00:19:47,000 --> 00:19:49,000
就是内串数字的顺序

693
00:19:49,000 --> 00:19:50,000
是既定的

694
00:19:50,000 --> 00:19:51,000
然后这么可以通过

695
00:19:51,000 --> 00:19:52,000
那个当前的时间来

696
00:19:52,000 --> 00:19:53,000
来判定

697
00:19:53,000 --> 00:19:55,000
就可以对方服务器上

698
00:19:55,000 --> 00:19:56,000
也知道说

699
00:19:56,000 --> 00:19:57,000
这个时候是不是

700
00:19:57,000 --> 00:19:57,000
这个数字

701
00:19:57,000 --> 00:19:58,000
就这个 sequence

702
00:19:58,000 --> 00:19:59,000
就可以通过这个

703
00:19:59,000 --> 00:20:00,000
就是一个随机数列

704
00:20:00,000 --> 00:20:01,000
对

705
00:20:01,000 --> 00:20:02,000
其实我刚才想说

706
00:20:02,000 --> 00:20:04,000
就是另外一种形式

707
00:20:04,000 --> 00:20:05,000
就是要求你一定要

708
00:20:05,000 --> 00:20:06,000
插入电脑里面

709
00:20:06,000 --> 00:20:07,000
而不是一个

710
00:20:07,000 --> 00:20:07,000
就 USB 的

711
00:20:07,000 --> 00:20:08,000
就是

712
00:20:08,000 --> 00:20:08,000
对

713
00:20:08,000 --> 00:20:09,000
就是

714
00:20:09,000 --> 00:20:10,000
就是要求你一定要

715
00:20:10,000 --> 00:20:11,000
插入电脑

716
00:20:11,000 --> 00:20:11,000
对

717
00:20:11,000 --> 00:20:12,000
但这种有个问题

718
00:20:12,000 --> 00:20:13,000
就是现在不是很多

719
00:20:13,000 --> 00:20:15,000
这个手机了

720
00:20:15,000 --> 00:20:16,000
没有 USB 接口怎么办

721
00:20:16,000 --> 00:20:17,000
后来上次

722
00:20:17,000 --> 00:20:18,000
我看他们有一种

723
00:20:18,000 --> 00:20:20,000
另外的一些方案

724
00:20:20,000 --> 00:20:22,000
就是那个是可以插 USB 口

725
00:20:22,000 --> 00:20:23,000
也可以通过一个

726
00:20:23,000 --> 00:20:25,000
那个音频的接口

727
00:20:25,000 --> 00:20:26,000
就是那个耳机线

728
00:20:26,000 --> 00:20:26,000
耳机插

729
00:20:26,000 --> 00:20:27,000
耳机插线

730
00:20:27,000 --> 00:20:28,000
然后插到手机上

731
00:20:28,000 --> 00:20:30,000
然后他那个银行软件

732
00:20:30,000 --> 00:20:31,000
做了一个什么特殊的协议

733
00:20:31,000 --> 00:20:32,000
通过这个播放

734
00:20:32,000 --> 00:20:34,000
一个声音

735
00:20:34,000 --> 00:20:35,000
就是就猫

736
00:20:35,000 --> 00:20:35,000
就猫嘛

737
00:20:35,000 --> 00:20:36,000
那个大家记得

738
00:20:36,000 --> 00:20:37,000
那个以前

739
00:20:37,000 --> 00:20:37,000
那个播放上网的猫

740
00:20:37,000 --> 00:20:39,000
嘖嘖嘖嘖嘖嘖

741
00:20:39,000 --> 00:20:39,000
那个声音

742
00:20:39,000 --> 00:20:40,000
对吧

743
00:20:40,000 --> 00:20:40,000
对

744
00:20:40,000 --> 00:20:41,000
他就是通过那个东西来

745
00:20:41,000 --> 00:20:44,000
通过那个语音

746
00:20:44,000 --> 00:20:45,000
来编买一串那个数字信息

747
00:20:45,000 --> 00:20:48,000
他这个就是用了一样的原理

748
00:20:48,000 --> 00:20:49,000
就通过那个

749
00:20:49,000 --> 00:20:50,000
那个手机的耳机

750
00:20:50,000 --> 00:20:51,000
那个接口

751
00:20:51,000 --> 00:20:53,000
去输出一段声音

752
00:20:53,000 --> 00:20:54,000
然后那个声音是包含

753
00:20:54,000 --> 00:20:56,000
一些特殊的编买过的

754
00:20:56,000 --> 00:20:57,000
这个私钥的

755
00:20:57,000 --> 00:20:59,000
那些认证的信息的

756
00:20:59,000 --> 00:21:00,000
然后德国还有种方法

757
00:21:00,000 --> 00:21:02,000
就是他会在屏幕上

758
00:21:02,000 --> 00:21:03,000
不停的闪烁一组

759
00:21:03,000 --> 00:21:05,000
二进这个文样

760
00:21:05,000 --> 00:21:08,000
然后你用他的那个密码生成器

761
00:21:08,000 --> 00:21:10,000
背后有一个

762
00:21:10,000 --> 00:21:11,000
类似摄像头

763
00:21:11,000 --> 00:21:12,000
或者说应该不是

764
00:21:12,000 --> 00:21:13,000
就是一个感光元件

765
00:21:13,000 --> 00:21:13,000
OK

766
00:21:13,000 --> 00:21:16,000
然后你把那个感光元件

767
00:21:16,000 --> 00:21:17,000
hold 在屏幕的上方

768
00:21:17,000 --> 00:21:19,000
然后等一会之后

769
00:21:19,000 --> 00:21:22,000
这个密码生器就会识别出来

770
00:21:22,000 --> 00:21:23,000
然后生成一个密码

771
00:21:23,000 --> 00:21:26,000
这个好可惜

772
00:21:26,000 --> 00:21:27,000
好吧

773
00:21:27,000 --> 00:21:28,000
但这样不是很费电吗

774
00:21:28,000 --> 00:21:29,000
那个密码器

775
00:21:29,000 --> 00:21:30,000
密码器就像我说的

776
00:21:30,000 --> 00:21:32,000
它只是一个感光元件而已

777
00:21:32,000 --> 00:21:33,000
就是它要求

778
00:21:33,000 --> 00:21:36,000
密码器需要有供电

779
00:21:36,000 --> 00:21:36,000
才可以识别

780
00:21:36,000 --> 00:21:36,000
对

781
00:21:36,000 --> 00:21:38,000
密码器是装电池的

782
00:21:38,000 --> 00:21:38,000
对啊

783
00:21:38,000 --> 00:21:39,000
这样电池不就费得很快

784
00:21:39,000 --> 00:21:40,000
还好吧

785
00:21:40,000 --> 00:21:43,000
我前四年前

786
00:21:43,000 --> 00:21:44,000
申请的一个

787
00:21:44,000 --> 00:21:45,000
scanner

788
00:21:45,000 --> 00:21:46,000
现在还能用

789
00:21:46,000 --> 00:21:47,000
而且这个 scanner

790
00:21:47,000 --> 00:21:49,000
要求你当时要把银行卡插进去

791
00:21:49,000 --> 00:21:51,000
对吧

792
00:21:51,000 --> 00:21:51,000
好吧

793
00:21:51,000 --> 00:21:52,000
那个 RSA

794
00:21:52,000 --> 00:21:54,000
那个密码器

795
00:21:54,000 --> 00:21:55,000
也是就是一个小电池

796
00:21:55,000 --> 00:21:56,000
可以用好几年了

797
00:21:56,000 --> 00:21:56,000
这样

798
00:21:56,000 --> 00:21:58,000
但是过了几年

799
00:21:58,000 --> 00:21:58,000
它就会

800
00:21:58,000 --> 00:21:59,000
它有一个有效期

801
00:21:59,000 --> 00:22:00,000
Xpire

802
00:22:00,000 --> 00:22:00,000
就是过了

803
00:22:00,000 --> 00:22:01,000
就跟那个什么

804
00:22:01,000 --> 00:22:03,000
SSL 证书一样

805
00:22:03,000 --> 00:22:04,000
有个有效期

806
00:22:04,000 --> 00:22:05,000
过了就作废了

807
00:22:05,000 --> 00:22:07,000
瑞士银行

808
00:22:07,000 --> 00:22:08,000
发的那个密码生存器

809
00:22:08,000 --> 00:22:09,000
也是就是一张信用卡

810
00:22:09,000 --> 00:22:10,000
然后信用卡里面

811
00:22:10,000 --> 00:22:11,000
有个肯定有一块电池

812
00:22:11,000 --> 00:22:12,000
因为它上面

813
00:22:12,000 --> 00:22:13,000
可以显示一个数字

814
00:22:13,000 --> 00:22:15,000
然后我不计那个电池

815
00:22:15,000 --> 00:22:16,000
可以一直用到这个卡

816
00:22:16,000 --> 00:22:17,000
作废为止

817
00:22:17,000 --> 00:22:17,000
所以

818
00:22:17,000 --> 00:22:18,000
对啊

819
00:22:18,000 --> 00:22:20,000
一般就是三五年这样子

820
00:22:20,000 --> 00:22:22,000
上次那个就是 RSA

821
00:22:22,000 --> 00:22:23,000
这间公司

822
00:22:23,000 --> 00:22:24,000
不是被黑了吗

823
00:22:24,000 --> 00:22:25,000
就是好多

824
00:22:25,000 --> 00:22:27,000
那个国内的企业

825
00:22:27,000 --> 00:22:27,000
也因为那个

826
00:22:27,000 --> 00:22:28,000
要全部换一轮

827
00:22:28,000 --> 00:22:29,000
那个

828
00:22:29,000 --> 00:22:31,000
那个发出去的生存器

829
00:22:31,000 --> 00:22:32,000
我记得好像有这么一个事

830
00:22:32,000 --> 00:22:36,000
所以安全还是挺难的

831
00:22:36,000 --> 00:22:36,000
一件事情

832
00:22:36,000 --> 00:22:37,000
对一会儿

833
00:22:37,000 --> 00:22:38,000
新闻环节里面

834
00:22:38,000 --> 00:22:39,000
我明明也要聊一聊

835
00:22:39,000 --> 00:22:41,000
最近的这个 hacking team

836
00:22:41,000 --> 00:22:41,000
对

837
00:22:41,000 --> 00:22:42,000
其实

838
00:22:42,000 --> 00:22:43,000
对

839
00:22:43,000 --> 00:22:44,000
其实那个说到这里

840
00:22:44,000 --> 00:22:45,000
也顺便聊一下

841
00:22:45,000 --> 00:22:45,000
就是

842
00:22:45,000 --> 00:22:48,000
你用那个登录服务器

843
00:22:48,000 --> 00:22:49,000
SSH 登录服务器

844
00:22:49,000 --> 00:22:50,000
你是用密码

845
00:22:50,000 --> 00:22:51,000
还是用那个证书

846
00:22:52,000 --> 00:22:53,000
用证书呀

847
00:22:53,000 --> 00:22:53,000
不是证书

848
00:22:53,000 --> 00:22:54,000
Key

849
00:22:54,000 --> 00:22:54,000
就是

850
00:22:54,000 --> 00:22:55,000
就用 private key 吗

851
00:22:55,000 --> 00:22:56,000
对

852
00:22:56,000 --> 00:22:57,000
然后我基本上

853
00:22:57,000 --> 00:22:58,000
我的那些服务器的话

854
00:22:58,000 --> 00:23:00,000
都是禁掉密码登录

855
00:23:00,000 --> 00:23:01,000
然后用 Key 的

856
00:23:01,000 --> 00:23:02,000
我只有 root 是这样

857
00:23:02,000 --> 00:23:03,000
其实我觉得

858
00:23:03,000 --> 00:23:04,000
只有 root 是这样

859
00:23:04,000 --> 00:23:04,000
好吧

860
00:23:04,000 --> 00:23:06,000
你还有其他账户吗

861
00:23:06,000 --> 00:23:06,000
有

862
00:23:06,000 --> 00:23:06,000
我

863
00:23:06,000 --> 00:23:07,000
你难道平时

864
00:23:07,000 --> 00:23:09,000
用 root 账户登录吗

865
00:23:09,000 --> 00:23:09,000
不是

866
00:23:09,000 --> 00:23:09,000
不是

867
00:23:09,000 --> 00:23:10,000
就你其他账户

868
00:23:10,000 --> 00:23:12,000
可以用密码登录吗

869
00:23:12,000 --> 00:23:12,000
我其他账户

870
00:23:12,000 --> 00:23:13,000
可以用密码登录

871
00:23:13,000 --> 00:23:14,000
因为有时候

872
00:23:14,000 --> 00:23:16,000
比如说临时抓了一个 iPad

873
00:23:16,000 --> 00:23:18,000
必须 SSH 连上去

874
00:23:18,000 --> 00:23:19,000
怎么办

875
00:23:19,000 --> 00:23:20,000
那个

876
00:23:20,000 --> 00:23:22,000
那其他账户可以速度吗

877
00:23:22,000 --> 00:23:23,000
可以

878
00:23:23,000 --> 00:23:25,000
那你跟 root 没有密码

879
00:23:25,000 --> 00:23:27,000
有什么区别呢

880
00:23:27,000 --> 00:23:28,000
说也是

881
00:23:28,000 --> 00:23:29,000
对吧

882
00:23:29,000 --> 00:23:30,000
你说那个 iPad

883
00:23:30,000 --> 00:23:31,000
那个方案可以在

884
00:23:31,000 --> 00:23:34,000
其实正确的用 Key 的

885
00:23:34,000 --> 00:23:35,000
就是密钥的认证的方法

886
00:23:35,000 --> 00:23:36,000
是每一个设备

887
00:23:36,000 --> 00:23:38,000
有自己的一个私钥公钥

888
00:23:38,000 --> 00:23:39,000
一套

889
00:23:39,000 --> 00:23:39,000
对

890
00:23:39,000 --> 00:23:41,000
但有时候是拿不到

891
00:23:41,000 --> 00:23:41,000
这样一个设备

892
00:23:41,000 --> 00:23:42,000
怎么办

893
00:23:42,000 --> 00:23:44,000
也是

894
00:23:44,000 --> 00:23:46,000
还是给现实给贵了

895
00:23:46,000 --> 00:23:46,000
是吧

896
00:23:46,000 --> 00:23:46,000
对

897
00:23:46,000 --> 00:23:49,000
其实我觉得私钥公钥

898
00:23:49,000 --> 00:23:52,000
这套方法是挺方便的

899
00:23:52,000 --> 00:23:54,000
因为用私钥解决了

900
00:23:54,000 --> 00:23:55,000
这个密码和认证

901
00:23:55,000 --> 00:23:56,000
两个问题

902
00:23:56,000 --> 00:23:59,000
就身份认证和密码登陆两个问题

903
00:23:59,000 --> 00:24:00,000
就是你现在那个

904
00:24:00,000 --> 00:24:02,000
你去一个

905
00:24:02,000 --> 00:24:03,000
这个开一个

906
00:24:03,000 --> 00:24:05,000
就一个普通的网络服务

907
00:24:05,000 --> 00:24:06,000
注册一个账号

908
00:24:06,000 --> 00:24:07,000
他还让你输账号

909
00:24:07,000 --> 00:24:08,000
还得输密码

910
00:24:08,000 --> 00:24:08,000
对吧

911
00:24:08,000 --> 00:24:08,000
多麻烦

912
00:24:08,000 --> 00:24:10,000
你用那个私钥

913
00:24:10,000 --> 00:24:11,000
直接给他公钥就好了

914
00:24:11,000 --> 00:24:12,000
而且他永远不知道

915
00:24:12,000 --> 00:24:13,000
你的私钥是什么

916
00:24:13,000 --> 00:24:13,000
没错

917
00:24:13,000 --> 00:24:14,000
所以

918
00:24:14,000 --> 00:24:17,000
就是之前有很多尝试

919
00:24:17,000 --> 00:24:17,000
像那个什么

920
00:24:17,000 --> 00:24:18,000
最近一次应该是

921
00:24:18,000 --> 00:24:19,000
Mozilla

922
00:24:19,000 --> 00:24:20,000
搞那个叫什么

923
00:24:20,000 --> 00:24:23,000
Secure ID

924
00:24:23,000 --> 00:24:24,000
还是什么之类的东西

925
00:24:24,000 --> 00:24:25,000
还是 Persona

926
00:24:25,000 --> 00:24:27,000
我忘了

927
00:24:27,000 --> 00:24:28,000
忘了名字了

928
00:24:28,000 --> 00:24:28,000
反正就是

929
00:24:28,000 --> 00:24:30,000
想把这个

930
00:24:30,000 --> 00:24:31,000
这一类的

931
00:24:31,000 --> 00:24:32,000
比较方便

932
00:24:32,000 --> 00:24:33,000
和安全的系统

933
00:24:33,000 --> 00:24:35,000
去替换掉这个密码

934
00:24:35,000 --> 00:24:36,000
但是这个

935
00:24:36,000 --> 00:24:36,000
我觉得可能

936
00:24:36,000 --> 00:24:38,000
对大多数来讲

937
00:24:38,000 --> 00:24:39,000
理解起这个

938
00:24:39,000 --> 00:24:40,000
私钥工钥加密

939
00:24:40,000 --> 00:24:41,000
这么一个过程

940
00:24:41,000 --> 00:24:42,000
或者说任何一套

941
00:24:42,000 --> 00:24:43,000
其他非密码的

942
00:24:43,000 --> 00:24:44,000
这么一个替代方案

943
00:24:44,000 --> 00:24:45,000
可能还是有点成本的

944
00:24:45,000 --> 00:24:46,000
所以并没有

945
00:24:46,000 --> 00:24:48,000
大规模推动起来

946
00:24:49,000 --> 00:24:50,000
不过倒是在一些

947
00:24:50,000 --> 00:24:51,000
什么程序员的

948
00:24:51,000 --> 00:24:54,000
一些社区里面

949
00:24:54,000 --> 00:24:55,000
其中的也不多

950
00:24:55,000 --> 00:24:56,000
很少用

951
00:24:56,000 --> 00:24:57,000
我觉得最显著的是

952
00:24:57,000 --> 00:24:58,000
你知道有一家

953
00:24:58,000 --> 00:24:59,000
专门生成

954
00:24:59,000 --> 00:25:00,000
给人生成免费

955
00:25:00,000 --> 00:25:02,000
SS 证书的网站

956
00:25:02,000 --> 00:25:04,000
叫 StartSSL 吗

957
00:25:04,000 --> 00:25:06,000
好像听过吧

958
00:25:06,000 --> 00:25:06,000
它的

959
00:25:06,000 --> 00:25:08,000
就是它是要登录

960
00:25:08,000 --> 00:25:09,000
账号才能有一个

961
00:25:09,000 --> 00:25:10,000
有一个账号系统的

962
00:25:10,000 --> 00:25:12,000
它就是通过

963
00:25:12,000 --> 00:25:15,000
客户端的证书来实现

964
00:25:15,000 --> 00:25:16,000
它没有一个账号密码

965
00:25:16,000 --> 00:25:17,000
的那个概念

966
00:25:17,000 --> 00:25:20,000
这是我用的

967
00:25:20,000 --> 00:25:20,000
唯一一家

968
00:25:20,000 --> 00:25:22,000
通过这种

969
00:25:22,000 --> 00:25:23,000
可不可以流浪器证书的方式

970
00:25:23,000 --> 00:25:24,000
来实现登录

971
00:25:24,000 --> 00:25:27,000
这个其实我总说

972
00:25:27,000 --> 00:25:29,000
我觉得要一个人

973
00:25:29,000 --> 00:25:30,000
接受抢口令和

974
00:25:30,000 --> 00:25:33,000
验证码这件事情

975
00:25:33,000 --> 00:25:34,000
有时候已经很难了

976
00:25:34,000 --> 00:25:35,000
我不知道

977
00:25:35,000 --> 00:25:36,000
因为咱们接受的人

978
00:25:36,000 --> 00:25:37,000
可能平时都比较

979
00:25:37,000 --> 00:25:38,000
tax savvy

980
00:25:38,000 --> 00:25:41,000
但其实很多很多用户

981
00:25:41,000 --> 00:25:42,000
都不知道

982
00:25:42,000 --> 00:25:43,000
验证码到底是

983
00:25:43,000 --> 00:25:44,000
拿来干什么用的

984
00:25:44,000 --> 00:25:46,000
你说哪个验证码

985
00:25:46,000 --> 00:25:48,000
就是那个防止

986
00:25:48,000 --> 00:25:49,000
就是图灵测试验证码

987
00:25:49,000 --> 00:25:50,000
人机测试

988
00:25:50,000 --> 00:25:51,000
对

989
00:25:51,000 --> 00:25:52,000
在这种情况下

990
00:25:52,000 --> 00:25:53,000
你要向他解释

991
00:25:53,000 --> 00:25:54,000
什么是公药私药

992
00:25:54,000 --> 00:25:55,000
以及它为什么更安全

993
00:25:55,000 --> 00:25:56,000
其实是

994
00:25:56,000 --> 00:25:56,000
对了

995
00:25:56,000 --> 00:25:58,000
所以还是一个教育的问题

996
00:25:58,000 --> 00:25:59,000
对

997
00:25:59,000 --> 00:26:00,000
也许我觉得

998
00:26:00,000 --> 00:26:01,000
可能过两三代人

999
00:26:01,000 --> 00:26:02,000
会觉得公药私药

1000
00:26:02,000 --> 00:26:04,000
是一个非常天经意义的概念

1001
00:26:04,000 --> 00:26:05,000
就好像药什么锁样

1002
00:26:05,000 --> 00:26:07,000
就非常容易理解

1003
00:26:07,000 --> 00:26:08,000
你竟然这么乐观

1004
00:26:08,000 --> 00:26:10,000
过两三代人就可以了

1005
00:26:10,000 --> 00:26:11,000
两三代还不够吗

1006
00:26:11,000 --> 00:26:12,000
Oh my god

1007
00:26:12,000 --> 00:26:15,000
不要高估群众的智商

1008
00:26:15,000 --> 00:26:18,000
你这个句话太经营主义了

1009
00:26:18,000 --> 00:26:19,000
要不要抹掉

1010
00:26:19,000 --> 00:26:21,000
不要

1011
00:26:21,000 --> 00:26:22,000
帮他们来批我

1012
00:26:22,000 --> 00:26:23,000
好吧

1013
00:26:23,000 --> 00:26:24,000
好

1014
00:26:24,000 --> 00:26:26,000
那么接下来

1015
00:26:26,000 --> 00:26:28,000
就进入新闻环节吧

1016
00:26:28,000 --> 00:26:31,000
不如就接着刚才的话头

1017
00:26:31,000 --> 00:26:33,000
说最近这一次

1018
00:26:33,000 --> 00:26:34,000
比较严重的一个

1019
00:26:34,000 --> 00:26:36,000
一个安全事件

1020
00:26:36,000 --> 00:26:37,000
应该说

1021
00:26:37,000 --> 00:26:38,000
这个事件严重到

1022
00:26:38,000 --> 00:26:40,000
严重的程度就是

1023
00:26:40,000 --> 00:26:42,000
可以关乎你我

1024
00:26:42,000 --> 00:26:45,000
怎么说呢

1025
00:26:45,000 --> 00:26:47,000
先介绍一下怎么回事吧

1026
00:26:47,000 --> 00:26:47,000
对

1027
00:26:47,000 --> 00:26:49,000
有一个安全公司

1028
00:26:49,000 --> 00:26:51,000
它这个公司的名字叫做

1029
00:26:51,000 --> 00:26:52,000
Hacking Team

1030
00:26:52,000 --> 00:26:53,000
就好像

1031
00:26:53,000 --> 00:26:55,000
什么黑客小分队

1032
00:26:55,000 --> 00:26:55,000
对

1033
00:26:55,000 --> 00:26:56,000
有家客栈

1034
00:26:56,000 --> 00:26:57,000
它的名字叫做

1035
00:26:57,000 --> 00:26:59,000
有间客栈一样

1036
00:26:59,000 --> 00:27:01,000
然后这个安全公司

1037
00:27:01,000 --> 00:27:02,000
这个 Hacking Team

1038
00:27:02,000 --> 00:27:03,000
就叫做 Hacking Team

1039
00:27:03,000 --> 00:27:04,000
然后 Hacking Team

1040
00:27:04,000 --> 00:27:06,000
这家公司被黑了

1041
00:27:06,000 --> 00:27:07,000
多福

1042
00:27:07,000 --> 00:27:09,000
它不叫 Hacking Team

1043
00:27:09,000 --> 00:27:10,000
叫 Hack Team

1044
00:27:10,000 --> 00:27:12,000
对

1045
00:27:12,000 --> 00:27:12,000
然后 Hacking Team

1046
00:27:12,000 --> 00:27:13,000
Mishacked

1047
00:27:13,000 --> 00:27:15,000
然后首先

1048
00:27:15,000 --> 00:27:17,000
这家公司是以什么为生呢

1049
00:27:17,000 --> 00:27:18,000
他们其实就是

1050
00:27:18,000 --> 00:27:20,000
专门搞破解

1051
00:27:20,000 --> 00:27:22,000
但是

1052
00:27:22,000 --> 00:27:24,000
他搞破解之后

1053
00:27:24,000 --> 00:27:25,000
不会告诉那些

1054
00:27:25,000 --> 00:27:26,000
被破解了的

1055
00:27:26,000 --> 00:27:28,000
或者是被黑了的网站

1056
00:27:28,000 --> 00:27:29,000
或者公司

1057
00:27:29,000 --> 00:27:30,000
说你们的产品有问题

1058
00:27:30,000 --> 00:27:33,000
而是把这些漏洞藏起来

1059
00:27:33,000 --> 00:27:35,000
放在他们的货架上

1060
00:27:35,000 --> 00:27:35,000
对

1061
00:27:35,000 --> 00:27:37,000
放在那货架上

1062
00:27:37,000 --> 00:27:38,000
然后包起来

1063
00:27:38,000 --> 00:27:39,000
卖给这些

1064
00:27:39,000 --> 00:27:40,000
比如说 NSA

1065
00:27:40,000 --> 00:27:42,000
或者是

1066
00:27:42,000 --> 00:27:43,000
也许中国人

1067
00:27:43,000 --> 00:27:44,000
也有他们的客户

1068
00:27:44,000 --> 00:27:46,000
或者是一些商业间谍

1069
00:27:46,000 --> 00:27:46,000
会说

1070
00:27:46,000 --> 00:27:49,000
就是世界各国政府

1071
00:27:49,000 --> 00:27:51,000
和这种大机构

1072
00:27:51,000 --> 00:27:52,000
对

1073
00:27:52,000 --> 00:27:52,000
等一下

1074
00:27:52,000 --> 00:27:54,000
他们不是直接卖这些

1075
00:27:54,000 --> 00:27:55,000
这些破解

1076
00:27:55,000 --> 00:27:57,000
他是卖打包的服务

1077
00:27:57,000 --> 00:27:57,000
好像是

1078
00:27:57,000 --> 00:27:58,000
对

1079
00:27:58,000 --> 00:28:01,000
部分漏洞是会卖出去

1080
00:28:01,000 --> 00:28:02,000
如果你只买服务的话

1081
00:28:02,000 --> 00:28:04,000
你会需要

1082
00:28:04,000 --> 00:28:05,000
你付的钱少一点

1083
00:28:05,000 --> 00:28:06,000
但是如果你要把整个

1084
00:28:06,000 --> 00:28:07,000
这个总是知识产权

1085
00:28:07,000 --> 00:28:08,000
加以后买药方

1086
00:28:08,000 --> 00:28:09,000
对

1087
00:28:09,000 --> 00:28:11,000
那是要花很大很大一笔钱

1088
00:28:11,000 --> 00:28:12,000
没错

1089
00:28:12,000 --> 00:28:15,000
然后他们靠这个赚钱

1090
00:28:15,000 --> 00:28:18,000
攒了 400 GB 的数据

1091
00:28:18,000 --> 00:28:20,000
当然后来有消息说

1092
00:28:20,000 --> 00:28:21,000
这个 400 GB 里面

1093
00:28:21,000 --> 00:28:22,000
很多很多都是 email

1094
00:28:22,000 --> 00:28:23,000
就没什么用

1095
00:28:23,000 --> 00:28:24,000
没有啊

1096
00:28:24,000 --> 00:28:25,000
email 很有用的

1097
00:28:25,000 --> 00:28:27,000
好吧

1098
00:28:27,000 --> 00:28:29,000
各种机密都在 email 里面暴露

1099
00:28:29,000 --> 00:28:31,000
在数据方面

1100
00:28:31,000 --> 00:28:33,000
就是在 400 GB 里面

1101
00:28:33,000 --> 00:28:34,000
有很多只是数据

1102
00:28:34,000 --> 00:28:36,000
而真正和方法相关的部分

1103
00:28:36,000 --> 00:28:38,000
可能只有几百兆

1104
00:28:38,000 --> 00:28:38,000
但是无论如何

1105
00:28:38,000 --> 00:28:41,000
这里面全都是非常非常机密的信息

1106
00:28:41,000 --> 00:28:45,000
然后这一些数据全都被黑了

1107
00:28:45,000 --> 00:28:46,000
然后被放在了网上

1108
00:28:46,000 --> 00:28:49,000
就现在你我他都可以去搞下来

1109
00:28:49,000 --> 00:28:53,000
所以你下载了吗

1110
00:28:53,000 --> 00:28:54,000
没有啊

1111
00:28:54,000 --> 00:28:56,000
何必呢

1112
00:28:56,000 --> 00:28:58,000
400 GB 我硬盘都装不下了

1113
00:28:58,000 --> 00:28:58,000
400 GB

1114
00:28:58,000 --> 00:29:01,000
现在随便一个小硬盘都能可以啊

1115
00:29:01,000 --> 00:29:01,000
我

1116
00:29:01,000 --> 00:29:03,000
除非你全都是 SSD

1117
00:29:03,000 --> 00:29:05,000
我的 SSD 是装不下

1118
00:29:05,000 --> 00:29:06,000
我的 SSD 就 512

1119
00:29:06,000 --> 00:29:08,000
然后还装了一堆游戏

1120
00:29:08,000 --> 00:29:09,000
所以买个那个什么吧

1121
00:29:09,000 --> 00:29:10,000
那个

1122
00:29:10,000 --> 00:29:11,000
YG

1123
00:29:11,000 --> 00:29:11,000
YG

1124
00:29:11,000 --> 00:29:12,000
有啊

1125
00:29:12,000 --> 00:29:12,000
但

1126
00:29:12,000 --> 00:29:14,000
何必装作能用的东西是不是

1127
00:29:14,000 --> 00:29:15,000
装了很多

1128
00:29:15,000 --> 00:29:17,000
觉得自己会看的

1129
00:29:17,000 --> 00:29:18,000
其实根本不会看的东西

1130
00:29:18,000 --> 00:29:20,000
不要想歪了

1131
00:29:20,000 --> 00:29:21,000
我是说电子数

1132
00:29:21,000 --> 00:29:24,000
好吧

1133
00:29:24,000 --> 00:29:29,000
然后在所有这些已经被吓得

1134
00:29:29,000 --> 00:29:30,000
已经被破解

1135
00:29:30,000 --> 00:29:32,000
被爆出来的工具里面

1136
00:29:32,000 --> 00:29:34,000
有一个比较严重的漏洞

1137
00:29:34,000 --> 00:29:35,000
是在 flash 上面

1138
00:29:35,000 --> 00:29:37,000
就是臭名昭著的 flash

1139
00:29:37,000 --> 00:29:39,000
竟然只有一个

1140
00:29:39,000 --> 00:29:39,000
我也很吃惊

1141
00:29:39,000 --> 00:29:42,000
或者说目前被发现的只有一个

1142
00:29:42,000 --> 00:29:44,000
是一个非常严重的 flash

1143
00:29:44,000 --> 00:29:45,000
zero day

1144
00:29:45,000 --> 00:29:47,000
然后他最大的问题是

1145
00:29:47,000 --> 00:29:48,000
他可以让任何网站

1146
00:29:48,000 --> 00:29:51,000
这个网站上面有 flash 的话

1147
00:29:51,000 --> 00:29:54,000
可以让你在访问这个网站

1148
00:29:54,000 --> 00:29:55,000
并且运行这个 flash 的时候

1149
00:29:55,000 --> 00:29:58,000
在你的机器上

1150
00:29:58,000 --> 00:29:59,000
以管理员权限

1151
00:29:59,000 --> 00:30:02,000
执行任何他想执行的代码

1152
00:30:02,000 --> 00:30:03,000
是一件

1153
00:30:03,000 --> 00:30:05,000
就你可能听起来没有什么

1154
00:30:05,000 --> 00:30:09,000
但你硬盘上所有的短信

1155
00:30:09,000 --> 00:30:11,000
邮件

1156
00:30:11,000 --> 00:30:12,000
验照

1157
00:30:12,000 --> 00:30:14,000
总之你就裸分了

1158
00:30:14,000 --> 00:30:14,000
对

1159
00:30:14,000 --> 00:30:16,000
全都跟把

1160
00:30:16,000 --> 00:30:18,000
就全都跟那个

1161
00:30:18,000 --> 00:30:19,000
就像陈冠希

1162
00:30:19,000 --> 00:30:23,000
无辜的把他的电脑交给

1163
00:30:23,000 --> 00:30:24,000
修理电脑的人一样

1164
00:30:24,000 --> 00:30:26,000
暴露在这个网站下面

1165
00:30:26,000 --> 00:30:32,000
然后当然紧急的 patch 也已经出来了

1166
00:30:32,000 --> 00:30:34,000
但是我相信很多人还是没有装

1167
00:30:34,000 --> 00:30:36,000
所以如果你听到这里的话

1168
00:30:36,000 --> 00:30:38,000
最好赶紧去装一下

1169
00:30:38,000 --> 00:30:39,000
真的是

1170
00:30:39,000 --> 00:30:40,000
为了自己好

1171
00:30:40,000 --> 00:30:46,000
所以这件事情怎么说呢

1172
00:30:46,000 --> 00:30:47,000
就是说

1173
00:30:47,000 --> 00:30:49,000
就之前大家都知道

1174
00:30:49,000 --> 00:30:52,000
说这些安全漏洞是可以私下买卖交易

1175
00:30:52,000 --> 00:30:55,000
然后可以用来去黑进别人电脑

1176
00:30:55,000 --> 00:30:58,000
当然可能大家都抱着一个缴信心

1177
00:30:58,000 --> 00:31:00,000
觉得谁来搞我

1178
00:31:00,000 --> 00:31:02,000
我又不是什么重要人物是吧

1179
00:31:02,000 --> 00:31:02,000
对

1180
00:31:02,000 --> 00:31:04,000
但我觉得这次暴露就是

1181
00:31:04,000 --> 00:31:07,000
让我吃惊的是原来

1182
00:31:07,000 --> 00:31:08,000
可以有这么

1183
00:31:08,000 --> 00:31:10,000
这么多

1184
00:31:10,000 --> 00:31:11,000
这么惊人的

1185
00:31:11,000 --> 00:31:15,000
海量的数据

1186
00:31:15,000 --> 00:31:16,000
可以供人购买

1187
00:31:16,000 --> 00:31:17,000
我以前总觉得

1188
00:31:17,000 --> 00:31:18,000
对吧

1189
00:31:18,000 --> 00:31:21,000
所以大家都以前觉得只看到个 B 3 一脚

1190
00:31:21,000 --> 00:31:21,000
是吧

1191
00:31:21,000 --> 00:31:23,000
现在看到 B 3 的半截

1192
00:31:23,000 --> 00:31:26,000
其实上面还有更庞大的生态链

1193
00:31:26,000 --> 00:31:27,000
我们是看不到的

1194
00:31:27,000 --> 00:31:29,000
不小心撑了一个深水夹带

1195
00:31:29,000 --> 00:31:30,000
然后哇靠

1196
00:31:30,000 --> 00:31:31,000
居然扶上来这么多

1197
00:31:31,000 --> 00:31:32,000
特碎的兵

1198
00:31:32,000 --> 00:31:33,000
对

1199
00:31:33,000 --> 00:31:36,000
但是呢

1200
00:31:36,000 --> 00:31:37,000
有什么问题呢

1201
00:31:37,000 --> 00:31:37,000
就是

1202
00:31:37,000 --> 00:31:41,000
这些还是我公开用的

1203
00:31:41,000 --> 00:31:45,000
就在它做成商业化的产品的之前

1204
00:31:45,000 --> 00:31:47,000
已经有很多人受害了

1205
00:31:47,000 --> 00:31:47,000
你不知道而已

1206
00:31:47,000 --> 00:31:48,000
我们有

1207
00:31:48,000 --> 00:31:50,000
我可能这个时候

1208
00:31:50,000 --> 00:31:51,000
我们在录音

1209
00:31:51,000 --> 00:31:51,000
对吧

1210
00:31:51,000 --> 00:31:52,000
说就是谁在监控

1211
00:31:52,000 --> 00:31:54,000
我们也很难讲

1212
00:31:54,000 --> 00:31:54,000
对

1213
00:31:54,000 --> 00:31:56,000
在报出来的数据里面

1214
00:31:56,000 --> 00:31:57,000
报出来的资料里面

1215
00:31:57,000 --> 00:32:00,000
有据称 hacking team

1216
00:32:00,000 --> 00:32:01,000
有在所有的

1217
00:32:01,000 --> 00:32:03,000
几乎所有的 Windows 客户端上

1218
00:32:03,000 --> 00:32:04,000
安装远程桌面的方法

1219
00:32:04,000 --> 00:32:06,000
包括 Windows 4

1220
00:32:06,000 --> 00:32:08,000
就是你在用手机

1221
00:32:08,000 --> 00:32:10,000
你手机上显示什么

1222
00:32:10,000 --> 00:32:12,000
可能已经有人可以去看了

1223
00:32:12,000 --> 00:32:14,000
只不过他从来没有看过而已

1224
00:32:14,000 --> 00:32:16,000
还没来得去看一下

1225
00:32:16,000 --> 00:32:16,000
对

1226
00:32:16,000 --> 00:32:18,000
前一阵子那个

1227
00:32:18,000 --> 00:32:20,000
Vikileaks 爆出来

1228
00:32:20,000 --> 00:32:22,000
从施洛德到梅克尔

1229
00:32:22,000 --> 00:32:23,000
每一任德国总理

1230
00:32:23,000 --> 00:32:25,000
全都被 NNIC 协定了

1231
00:32:25,000 --> 00:32:26,000
就政府要的人

1232
00:32:26,000 --> 00:32:27,000
肯定是操不掉的

1233
00:32:27,000 --> 00:32:28,000
这点什么都不用想

1234
00:32:28,000 --> 00:32:30,000
只是说我们现在

1235
00:32:30,000 --> 00:32:31,000
关注我们这种

1236
00:32:31,000 --> 00:32:33,000
什么小老百姓的吧

1237
00:32:33,000 --> 00:32:33,000
对

1238
00:32:33,000 --> 00:32:34,000
然后里面可能

1239
00:32:34,000 --> 00:32:36,000
也有一部分的

1240
00:32:36,000 --> 00:32:38,000
手段就来自于这次被爆出来的

1241
00:32:38,000 --> 00:32:39,000
hacking team

1242
00:32:39,000 --> 00:32:41,000
所开发的技术

1243
00:32:41,000 --> 00:32:41,000
对

1244
00:32:41,000 --> 00:32:43,000
这都是综合性的工程

1245
00:32:43,000 --> 00:32:44,000
就是说他

1246
00:32:44,000 --> 00:32:45,000
就是可能 hacking team

1247
00:32:45,000 --> 00:32:46,000
他掌握了一部分的

1248
00:32:46,000 --> 00:32:47,000
这么一些漏洞

1249
00:32:47,000 --> 00:32:47,000
对吧

1250
00:32:47,000 --> 00:32:48,000
还有一些其他的

1251
00:32:48,000 --> 00:32:51,000
更资深或藏的更好的

1252
00:32:51,000 --> 00:32:54,000
这种组织

1253
00:32:54,000 --> 00:32:54,000
或者个人

1254
00:32:54,000 --> 00:32:56,000
比如说 NNIC

1255
00:32:56,000 --> 00:32:56,000
对吧

1256
00:32:56,000 --> 00:32:57,000
他们自己有一套

1257
00:32:57,000 --> 00:32:59,000
手上的所有的核武器

1258
00:32:59,000 --> 00:33:00,000
对

1259
00:33:00,000 --> 00:33:01,000
这种东西

1260
00:33:01,000 --> 00:33:03,000
然后这些东西爆出来的

1261
00:33:03,000 --> 00:33:04,000
危害在哪里

1262
00:33:04,000 --> 00:33:05,000
就好像

1263
00:33:05,000 --> 00:33:06,000
怎么说呢

1264
00:33:06,000 --> 00:33:08,000
突然有一些人告诉你说

1265
00:33:08,000 --> 00:33:10,000
就大家过去都不知道

1266
00:33:10,000 --> 00:33:11,000
这个原子弹怎么造

1267
00:33:11,000 --> 00:33:11,000
对吧

1268
00:33:11,000 --> 00:33:13,000
我告诉你原子弹

1269
00:33:13,000 --> 00:33:14,000
是这么这么这么造

1270
00:33:14,000 --> 00:33:16,000
而且造这个原子弹

1271
00:33:16,000 --> 00:33:17,000
不怎么麻烦

1272
00:33:17,000 --> 00:33:18,000
不怎么费钱

1273
00:33:18,000 --> 00:33:21,000
你只有有了图纸就可以上了

1274
00:33:21,000 --> 00:33:22,000
不像说你真的造一个原子弹

1275
00:33:22,000 --> 00:33:23,000
你有了图纸

1276
00:33:23,000 --> 00:33:24,000
你可能不一定有

1277
00:33:24,000 --> 00:33:25,000
那个什么离心机

1278
00:33:25,000 --> 00:33:27,000
你可能还提炼不出来

1279
00:33:27,000 --> 00:33:28,000
那么高纯度的

1280
00:33:28,000 --> 00:33:29,000
什么放弃性物质

1281
00:33:29,000 --> 00:33:30,000
对吧

1282
00:33:30,000 --> 00:33:31,000
像这种软件的原子弹

1283
00:33:31,000 --> 00:33:32,000
核武器

1284
00:33:32,000 --> 00:33:34,000
拿来就可以用了

1285
00:33:34,000 --> 00:33:35,000
对

1286
00:33:35,000 --> 00:33:36,000
所以

1287
00:33:36,000 --> 00:33:38,000
反正就是大家

1288
00:33:38,000 --> 00:33:39,000
就最后这段时间

1289
00:33:39,000 --> 00:33:41,000
就只好自求多福了

1290
00:33:41,000 --> 00:33:42,000
因为爆出来之后

1291
00:33:42,000 --> 00:33:45,000
公开了这些东西之后

1292
00:33:45,000 --> 00:33:47,000
好人坏人都会用它的

1293
00:33:47,000 --> 00:33:48,000
然后你也不知道

1294
00:33:48,000 --> 00:33:49,000
谁会对你有利

1295
00:33:49,000 --> 00:33:50,000
谁会对你不利

1296
00:33:50,000 --> 00:33:50,000
对不对

1297
00:33:50,000 --> 00:33:51,000
没错

1298
00:33:51,000 --> 00:33:52,000
所以我觉得这次

1299
00:33:52,000 --> 00:33:54,000
出来的最

1300
00:33:54,000 --> 00:33:56,000
我最关心的一件问题

1301
00:33:56,000 --> 00:33:56,000
就是

1302
00:33:56,000 --> 00:33:57,000
比如说我用苹果

1303
00:33:57,000 --> 00:33:58,000
这个系统

1304
00:33:58,000 --> 00:33:58,000
对吧

1305
00:33:58,000 --> 00:33:59,000
我就关心

1306
00:33:59,000 --> 00:34:00,000
Apple

1307
00:34:00,000 --> 00:34:01,000
他会不会专门派一个什么

1308
00:34:01,000 --> 00:34:03,000
专门搞一个小组的人

1309
00:34:03,000 --> 00:34:04,000
去研究

1310
00:34:04,000 --> 00:34:05,000
这里面爆出来

1311
00:34:05,000 --> 00:34:06,000
这些公开的漏洞

1312
00:34:06,000 --> 00:34:07,000
马上把它

1313
00:34:07,000 --> 00:34:08,000
跟他相关的相关收好

1314
00:34:08,000 --> 00:34:11,000
这也是一个 Liple Face

1315
00:34:11,000 --> 00:34:11,000
你永远不知道

1316
00:34:11,000 --> 00:34:12,000
不

1317
00:34:12,000 --> 00:34:14,000
我觉得作为一家

1318
00:34:14,000 --> 00:34:16,000
你只能选择相似吗

1319
00:34:16,000 --> 00:34:17,000
不是他应该做的

1320
00:34:17,000 --> 00:34:19,000
就是把这个事情

1321
00:34:19,000 --> 00:34:20,000
作为他的一个

1322
00:34:20,000 --> 00:34:21,000
叫什么

1323
00:34:21,000 --> 00:34:23,000
核心药物

1324
00:34:23,000 --> 00:34:23,000
提上一次

1325
00:34:23,000 --> 00:34:24,000
马上去

1326
00:34:24,000 --> 00:34:25,000
你那些是他们会重视

1327
00:34:25,000 --> 00:34:26,000
虽然那肯定会

1328
00:34:26,000 --> 00:34:26,000
对

1329
00:34:26,000 --> 00:34:27,000
但不确定

1330
00:34:27,000 --> 00:34:28,000
你现在他不知道

1331
00:34:28,000 --> 00:34:29,000
他没有

1332
00:34:29,000 --> 00:34:29,000
他没有支声

1333
00:34:29,000 --> 00:34:30,000
对吧

1334
00:34:30,000 --> 00:34:31,000
这是我的 Liple Face

1335
00:34:31,000 --> 00:34:33,000
我是 I hope

1336
00:34:33,000 --> 00:34:34,000
能 do that

1337
00:34:34,000 --> 00:34:35,000
但是

1338
00:34:35,000 --> 00:34:37,000
但是不一定

1339
00:34:37,000 --> 00:34:38,000
所以就看

1340
00:34:38,000 --> 00:34:39,000
最近

1341
00:34:39,000 --> 00:34:40,000
而且他们修

1342
00:34:40,000 --> 00:34:42,000
就他们去分析一个漏洞

1343
00:34:42,000 --> 00:34:43,000
然后去修

1344
00:34:43,000 --> 00:34:44,000
打不定

1345
00:34:44,000 --> 00:34:44,000
还要测试

1346
00:34:44,000 --> 00:34:46,000
再放给大众

1347
00:34:46,000 --> 00:34:47,000
中间还要这么一场

1348
00:34:47,000 --> 00:34:49,000
至少可能有这么一两周

1349
00:34:49,000 --> 00:34:50,000
或者一两个月的那种过程

1350
00:34:50,000 --> 00:34:50,000
对吧

1351
00:34:50,000 --> 00:34:52,000
所以在这段时间内

1352
00:34:52,000 --> 00:34:55,000
大家还是都处于在裸奔的状态

1353
00:34:55,000 --> 00:34:55,000
对

1354
00:34:55,000 --> 00:34:56,000
所以

1355
00:34:56,000 --> 00:34:57,000
真的是

1356
00:34:57,000 --> 00:34:59,000
安全是很难

1357
00:34:59,000 --> 00:35:00,000
很难的

1358
00:35:00,000 --> 00:35:02,000
就从某种意义上来说

1359
00:35:02,000 --> 00:35:03,000
以后的

1360
00:35:03,000 --> 00:35:04,000
所谓的

1361
00:35:04,000 --> 00:35:05,000
真正意义上的安全

1362
00:35:05,000 --> 00:35:06,000
就只能是少部分

1363
00:35:06,000 --> 00:35:08,000
特权阶级

1364
00:35:08,000 --> 00:35:09,000
或者特别有钱的人

1365
00:35:09,000 --> 00:35:10,000
能够享受的服务了

1366
00:35:10,000 --> 00:35:11,000
因为你看

1367
00:35:11,000 --> 00:35:13,000
有这么多人花钱来搞你

1368
00:35:13,000 --> 00:35:13,000
对吧

1369
00:35:13,000 --> 00:35:14,000
但怎么办

1370
00:35:14,000 --> 00:35:15,000
你怎么花钱

1371
00:35:15,000 --> 00:35:15,000
你得有钱

1372
00:35:15,000 --> 00:35:16,000
顾得起私人兵

1373
00:35:16,000 --> 00:35:18,000
私人雇佣军才可以

1374
00:35:18,000 --> 00:35:19,000
对

1375
00:35:19,000 --> 00:35:19,000
对对

1376
00:35:19,000 --> 00:35:20,000
不上次那个谁

1377
00:35:20,000 --> 00:35:22,000
是希拉里克伦顿

1378
00:35:22,000 --> 00:35:24,000
他不在进行美国总统吗

1379
00:35:24,000 --> 00:35:24,000
嗯

1380
00:35:24,000 --> 00:35:25,000
然后后来就有

1381
00:35:25,000 --> 00:35:26,000
就很多报道

1382
00:35:26,000 --> 00:35:27,000
去去

1383
00:35:27,000 --> 00:35:28,000
去把他的那过去

1384
00:35:28,000 --> 00:35:30,000
说他在当那个

1385
00:35:30,000 --> 00:35:33,000
他当国务卿还是什么来的

1386
00:35:33,000 --> 00:35:34,000
反正是 Secretary State

1387
00:35:34,000 --> 00:35:35,000
应该是国务卿

1388
00:35:35,000 --> 00:35:36,000
国务卿对

1389
00:35:36,000 --> 00:35:36,000
对

1390
00:35:36,000 --> 00:35:38,000
然后期间

1391
00:35:38,000 --> 00:35:41,000
他竟然在自己家里

1392
00:35:41,000 --> 00:35:43,000
地下室搞了一个

1393
00:35:43,000 --> 00:35:44,000
mail server

1394
00:35:44,000 --> 00:35:45,000
邮件服务器

1395
00:35:45,000 --> 00:35:46,000
去跑他自己的私人邮件

1396
00:35:46,000 --> 00:35:49,000
然后他的目的也比较简单

1397
00:35:49,000 --> 00:35:49,000
就是避开

1398
00:35:49,000 --> 00:35:50,000
因为如果他用工

1399
00:35:50,000 --> 00:35:51,000
那个政府

1400
00:35:51,000 --> 00:35:53,000
就是白宫的邮件服务器

1401
00:35:53,000 --> 00:35:53,000
他

1402
00:35:53,000 --> 00:35:54,000
他

1403
00:35:54,000 --> 00:35:54,000
不是

1404
00:35:54,000 --> 00:35:56,000
那个被审查是肯定的

1405
00:35:56,000 --> 00:35:57,000
他会被 archive

1406
00:35:57,000 --> 00:35:58,000
会被存档

1407
00:35:58,000 --> 00:35:58,000
然后以后可能会

1408
00:35:58,000 --> 00:35:59,000
会被翻出来

1409
00:35:59,000 --> 00:36:00,000
做出一些对他不利的东西吧

1410
00:36:00,000 --> 00:36:02,000
所以他就

1411
00:36:02,000 --> 00:36:03,000
搞了个自己的私服

1412
00:36:03,000 --> 00:36:05,000
然后自己的一些

1413
00:36:05,000 --> 00:36:06,000
在上面跑船器

1414
00:36:06,000 --> 00:36:09,000
自己在邮件上面玩

1415
00:36:09,000 --> 00:36:10,000
一些东西

1416
00:36:10,000 --> 00:36:11,000
然后后来就说

1417
00:36:11,000 --> 00:36:11,000
卧槽

1418
00:36:11,000 --> 00:36:12,000
那还得了

1419
00:36:12,000 --> 00:36:14,000
就像白宫的那些邮件服务器

1420
00:36:14,000 --> 00:36:15,000
得通过 ASA

1421
00:36:15,000 --> 00:36:17,000
得专门派一小队人

1422
00:36:17,000 --> 00:36:17,000
在里帮他盯着

1423
00:36:17,000 --> 00:36:19,000
好歹还好一点

1424
00:36:19,000 --> 00:36:21,000
他放自己家里

1425
00:36:21,000 --> 00:36:21,000
谁给他盯着

1426
00:36:21,000 --> 00:36:25,000
所以我还是蛮震惊的

1427
00:36:25,000 --> 00:36:27,000
竟然还有这种玩法

1428
00:36:27,000 --> 00:36:29,000
不过还好

1429
00:36:29,000 --> 00:36:30,000
一般通过邮件交流

1430
00:36:30,000 --> 00:36:31,000
也不是什么

1431
00:36:31,000 --> 00:36:34,000
特别要紧的国家机密

1432
00:36:34,000 --> 00:36:35,000
那种活用专门

1433
00:36:35,000 --> 00:36:35,000
专线

1434
00:36:35,000 --> 00:36:36,000
所谓的

1435
00:36:36,000 --> 00:36:37,000
还凑合

1436
00:36:37,000 --> 00:36:39,000
但是这种知道这种消息

1437
00:36:39,000 --> 00:36:41,000
还是挺不容易的

1438
00:36:41,000 --> 00:36:42,000
这也回到了那个什么

1439
00:36:42,000 --> 00:36:44,000
刚才我们开场

1440
00:36:44,000 --> 00:36:44,000
提到那个

1441
00:36:44,000 --> 00:36:46,000
你到底相信谁是吧

1442
00:36:46,000 --> 00:36:48,000
其实正确答案是

1443
00:36:48,000 --> 00:36:49,000
Trust No One

1444
00:36:49,000 --> 00:36:51,000
但是做不到嘛

1445
00:36:51,000 --> 00:36:54,000
这是 X-Star 里面

1446
00:36:54,000 --> 00:36:56,000
那个主角叫什么

1447
00:36:56,000 --> 00:36:56,000
Ted Fox

1448
00:36:56,000 --> 00:36:57,000
Fox Ted

1449
00:36:57,000 --> 00:37:00,000
他叫什么来着

1450
00:37:00,000 --> 00:37:01,000
Murder

1451
00:37:01,000 --> 00:37:04,000
Murder 他的开机密码

1452
00:37:04,000 --> 00:37:05,000
就是 Trust No One

1453
00:37:05,000 --> 00:37:07,000
你现在知道了

1454
00:37:07,000 --> 00:37:10,000
就是你正确的方法

1455
00:37:10,000 --> 00:37:11,000
是 Trust No One

1456
00:37:11,000 --> 00:37:12,000
但是其实做不到

1457
00:37:12,000 --> 00:37:13,000
我相信这个心理上

1458
00:37:13,000 --> 00:37:16,000
99.99%的人都做不到

1459
00:37:16,000 --> 00:37:19,000
因为你要 Trust No One 的话

1460
00:37:19,000 --> 00:37:20,000
就像刚才我说的

1461
00:37:20,000 --> 00:37:22,000
从硬件底层开始

1462
00:37:22,000 --> 00:37:23,000
每一个步骤

1463
00:37:23,000 --> 00:37:25,000
都要经过你自己的验证

1464
00:37:25,000 --> 00:37:25,000
对

1465
00:37:25,000 --> 00:37:28,000
其实是不现实的

1466
00:37:28,000 --> 00:37:30,000
所以只能选择

1467
00:37:30,000 --> 00:37:31,000
相信一帮人

1468
00:37:31,000 --> 00:37:33,000
然后至于说

1469
00:37:33,000 --> 00:37:35,000
你相信他之后

1470
00:37:35,000 --> 00:37:36,000
会发生什么

1471
00:37:36,000 --> 00:37:37,000
那就只能

1472
00:37:37,000 --> 00:37:39,000
天知道了

1473
00:37:39,000 --> 00:37:40,000
对

1474
00:37:40,000 --> 00:37:41,000
当然我觉得也不用

1475
00:37:41,000 --> 00:37:44,000
特别过分的去怀疑

1476
00:37:44,000 --> 00:37:46,000
怀疑

1477
00:37:46,000 --> 00:37:48,000
怀疑这些人吧

1478
00:37:48,000 --> 00:37:49,000
或者怀疑一品公司

1479
00:37:49,000 --> 00:37:49,000
或者说怀疑

1480
00:37:49,000 --> 00:37:50,000
Whatever 哪个人

1481
00:37:50,000 --> 00:37:51,000
因为你

1482
00:37:51,000 --> 00:37:53,000
你活在现代社会里面

1483
00:37:53,000 --> 00:37:54,000
完全不相信任何人

1484
00:37:54,000 --> 00:37:55,000
其实只是一个

1485
00:37:55,000 --> 00:37:57,000
美好的愿景和假象

1486
00:37:57,000 --> 00:37:58,000
你是做不到

1487
00:37:58,000 --> 00:37:59,000
我觉得

1488
00:37:59,000 --> 00:38:01,000
我觉得这是这样子的

1489
00:38:01,000 --> 00:38:04,000
现在这些系统

1490
00:38:04,000 --> 00:38:06,000
已经太复杂了

1491
00:38:06,000 --> 00:38:08,000
你没有可能

1492
00:38:08,000 --> 00:38:11,000
从一个比较高的

1493
00:38:11,000 --> 00:38:12,000
可行度的情况下

1494
00:38:12,000 --> 00:38:13,000
确保这个体系

1495
00:38:13,000 --> 00:38:13,000
不出任何问题

1496
00:38:13,000 --> 00:38:15,000
这就是不现实的

1497
00:38:15,000 --> 00:38:15,000
就好像你说

1498
00:38:15,000 --> 00:38:16,000
指望

1499
00:38:16,000 --> 00:38:17,000
我要这个软件

1500
00:38:17,000 --> 00:38:17,000
没有 bug

1501
00:38:17,000 --> 00:38:20,000
不太现实

1502
00:38:20,000 --> 00:38:23,000
这个时候怎么办

1503
00:38:23,000 --> 00:38:24,000
你只能说

1504
00:38:24,000 --> 00:38:25,000
就全都相信了

1505
00:38:25,000 --> 00:38:26,000
对

1506
00:38:26,000 --> 00:38:27,000
我觉得复杂度

1507
00:38:27,000 --> 00:38:28,000
固然是一方面

1508
00:38:28,000 --> 00:38:29,000
另一方面是

1509
00:38:29,000 --> 00:38:30,000
你在生活中已经

1510
00:38:30,000 --> 00:38:32,000
你在现代社会里面

1511
00:38:32,000 --> 00:38:33,000
已经选择相信很多人了

1512
00:38:33,000 --> 00:38:34,000
对吧

1513
00:38:34,000 --> 00:38:35,000
或者说无条件的

1514
00:38:35,000 --> 00:38:36,000
去信任很多人

1515
00:38:36,000 --> 00:38:36,000
甚至很多人

1516
00:38:36,000 --> 00:38:37,000
你根本就不认识

1517
00:38:37,000 --> 00:38:38,000
根本就不知道他叫什么

1518
00:38:38,000 --> 00:38:39,000
比如说

1519
00:38:39,000 --> 00:38:40,000
你上公车

1520
00:38:40,000 --> 00:38:41,000
你搭乘飞机的时候

1521
00:38:41,000 --> 00:38:42,000
你就把生命

1522
00:38:42,000 --> 00:38:44,000
交给了机长的手里

1523
00:38:44,000 --> 00:38:44,000
不是吗

1524
00:38:44,000 --> 00:38:46,000
然后你在银行存钱的时候

1525
00:38:46,000 --> 00:38:47,000
不光是机长

1526
00:38:47,000 --> 00:38:49,000
还有什么各种航空公司

1527
00:38:49,000 --> 00:38:49,000
对

1528
00:38:49,000 --> 00:38:50,000
地勤人员

1529
00:38:50,000 --> 00:38:51,000
飞机制造舱

1530
00:38:51,000 --> 00:38:52,000
然后雷达

1531
00:38:52,000 --> 00:38:53,000
天气

1532
00:38:53,000 --> 00:38:54,000
还有什么上帝

1533
00:38:54,000 --> 00:38:56,000
不会砸个鸟过来

1534
00:38:56,000 --> 00:38:57,000
撞死你

1535
00:38:57,000 --> 00:38:58,000
对

1536
00:38:58,000 --> 00:38:59,000
这之类的

1537
00:38:59,000 --> 00:39:00,000
所以活着就要

1538
00:39:00,000 --> 00:39:02,000
有时候就是被迫

1539
00:39:02,000 --> 00:39:03,000
要盲目相信一些人

1540
00:39:03,000 --> 00:39:04,000
Life is risky

1541
00:39:04,000 --> 00:39:05,000
Yeah

1542
00:39:05,000 --> 00:39:10,000
为什么忽然觉得好沉重

1543
00:39:10,000 --> 00:39:11,000
没有啊

1544
00:39:11,000 --> 00:39:12,000
就是大家都知道

1545
00:39:12,000 --> 00:39:14,000
就是这个人生就是有风险

1546
00:39:14,000 --> 00:39:15,000
你坐家里还指不定

1547
00:39:15,000 --> 00:39:16,000
天啊

1548
00:39:16,000 --> 00:39:16,000
掉个东西什么

1549
00:39:16,000 --> 00:39:17,000
把你房子砸垮

1550
00:39:17,000 --> 00:39:18,000
把你砸死

1551
00:39:18,000 --> 00:39:19,000
对吧

1552
00:39:19,000 --> 00:39:20,000
就好像今天

1553
00:39:20,000 --> 00:39:22,000
刚刚我今天中午吃饭的时候

1554
00:39:22,000 --> 00:39:24,000
Apple Watch 忽然震了一下

1555
00:39:24,000 --> 00:39:27,000
然后他就手腕了一看说

1556
00:39:27,000 --> 00:39:30,000
我住的这个地方叫 Franc

1557
00:39:30,000 --> 00:39:31,000
说 Franc

1558
00:39:31,000 --> 00:39:31,000
说 Franc

1559
00:39:31,000 --> 00:39:31,000
地区有一个

1560
00:39:31,000 --> 00:39:32,000
有一个枪

1561
00:39:32,000 --> 00:39:34,000
发生了枪击案

1562
00:39:34,000 --> 00:39:34,000
What

1563
00:39:34,000 --> 00:39:36,000
我说 What

1564
00:39:36,000 --> 00:39:38,000
然后赶紧进去看

1565
00:39:38,000 --> 00:39:38,000
看细则

1566
00:39:38,000 --> 00:39:40,000
就在离我 50 公里的地方

1567
00:39:40,000 --> 00:39:41,000
有一个

1568
00:39:41,000 --> 00:39:43,000
有一个人

1569
00:39:43,000 --> 00:39:46,000
他开着一辆银色的

1570
00:39:46,000 --> 00:39:47,000
Mercedes 的

1571
00:39:47,000 --> 00:39:48,000
Cabriel

1572
00:39:48,000 --> 00:39:50,000
敞篷跑车

1573
00:39:50,000 --> 00:39:50,000
对

1574
00:39:50,000 --> 00:39:52,000
在路边停下

1575
00:39:52,000 --> 00:39:53,000
问路边一个老太太

1576
00:39:53,000 --> 00:39:56,000
82 岁老太太一些事

1577
00:39:56,000 --> 00:39:57,000
问完之后

1578
00:39:57,000 --> 00:39:58,000
老太太往回走的过程中

1579
00:39:58,000 --> 00:39:59,000
他掏出枪来

1580
00:39:59,000 --> 00:40:00,000
把老太太打死了

1581
00:40:00,000 --> 00:40:01,000
What

1582
00:40:01,000 --> 00:40:01,000
神经病了

1583
00:40:01,000 --> 00:40:02,000
我不知道

1584
00:40:02,000 --> 00:40:06,000
然后他开了大概 10 公里左右

1585
00:40:06,000 --> 00:40:08,000
又杀死了一个

1586
00:40:08,000 --> 00:40:10,000
在路边骑自行车的人

1587
00:40:10,000 --> 00:40:11,000
所以他什么反社会人格

1588
00:40:11,000 --> 00:40:12,000
我不知道

1589
00:40:12,000 --> 00:40:13,000
这是今天才发生的事情

1590
00:40:13,000 --> 00:40:14,000
所以我可能一会儿

1591
00:40:14,000 --> 00:40:15,000
看下新闻才知道

1592
00:40:15,000 --> 00:40:16,000
具体发生了什么

1593
00:40:16,000 --> 00:40:17,000
但怎么说

1594
00:40:17,000 --> 00:40:18,000
就是非来横祸不是吗

1595
00:40:18,000 --> 00:40:20,000
而且离你这么近

1596
00:40:20,000 --> 00:40:21,000
就离我这么近

1597
00:40:21,000 --> 00:40:22,000
50 公里之外

1598
00:40:22,000 --> 00:40:22,000
对

1599
00:40:22,000 --> 00:40:23,000
是有我每天

1600
00:40:23,000 --> 00:40:24,000
不是每天

1601
00:40:24,000 --> 00:40:28,000
但以前老反于某地和某地之间

1602
00:40:28,000 --> 00:40:28,000
每天会

1603
00:40:28,000 --> 00:40:30,000
为什么总要说每天

1604
00:40:30,000 --> 00:40:32,000
经常会经过这么一个地方

1605
00:40:32,000 --> 00:40:33,000
就是

1606
00:40:33,000 --> 00:40:35,000
看着高斯公路上的牌子

1607
00:40:35,000 --> 00:40:35,000
记着这个名字

1608
00:40:35,000 --> 00:40:36,000
然后忽然今天

1609
00:40:36,000 --> 00:40:38,000
那儿发生了一次枪击案

1610
00:40:38,000 --> 00:40:39,000
就是这种感觉

1611
00:40:39,000 --> 00:40:40,000
所以就是

1612
00:40:40,000 --> 00:40:41,000
你可能什么

1613
00:40:41,000 --> 00:40:43,000
出门被车撞死

1614
00:40:43,000 --> 00:40:43,000
然后遇到个疯子

1615
00:40:43,000 --> 00:40:45,000
你给崩了

1616
00:40:45,000 --> 00:40:47,000
然后喝水可能被淹死

1617
00:40:47,000 --> 00:40:48,000
就呛死之类的

1618
00:40:49,000 --> 00:40:51,000
反正你知道做任何事情

1619
00:40:51,000 --> 00:40:52,000
不管你做

1620
00:40:52,000 --> 00:40:53,000
还是不做任何事情

1621
00:40:53,000 --> 00:40:54,000
你总是会有机会

1622
00:40:54,000 --> 00:40:56,000
遇到这种小概率事件的

1623
00:40:56,000 --> 00:40:57,000
对

1624
00:40:57,000 --> 00:40:58,000
所以其实信息方面的

1625
00:40:58,000 --> 00:40:59,000
信息安全方面的风险

1626
00:40:59,000 --> 00:41:01,000
还是必须要承担一点

1627
00:41:01,000 --> 00:41:02,000
对

1628
00:41:02,000 --> 00:41:02,000
一样

1629
00:41:02,000 --> 00:41:04,000
你这么想一下

1630
00:41:04,000 --> 00:41:05,000
你可能觉得也就安心了

1631
00:41:05,000 --> 00:41:06,000
释然一点

1632
00:41:06,000 --> 00:41:06,000
对

1633
00:41:06,000 --> 00:41:08,000
没错

1634
00:41:08,000 --> 00:41:09,000
OK

1635
00:41:09,000 --> 00:41:11,000
那么过渡到下一条新闻

1636
00:41:11,000 --> 00:41:13,000
这条新闻比较振奋

1637
00:41:13,000 --> 00:41:14,000
就是

1638
00:41:14,000 --> 00:41:15,000
就是老文了吧

1639
00:41:15,000 --> 00:41:16,000
就已经上

1640
00:41:16,000 --> 00:41:18,000
两周前的了

1641
00:41:18,000 --> 00:41:18,000
对

1642
00:41:18,000 --> 00:41:21,000
开发了

1643
00:41:21,000 --> 00:41:23,000
蛮大马算

1644
00:41:23,000 --> 00:41:24,000
其实有七年

1645
00:41:24,000 --> 00:41:27,000
但是去年 2 月 26 日才

1646
00:41:27,000 --> 00:41:28,000
Public Beta 的

1647
00:41:28,000 --> 00:41:28,000
这个

1648
00:41:28,000 --> 00:41:30,000
来自于 Github 的

1649
00:41:30,000 --> 00:41:31,000
Atom

1650
00:41:31,000 --> 00:41:32,000
编辑器

1651
00:41:32,000 --> 00:41:34,000
什么今天

1652
00:41:34,000 --> 00:41:35,000
6 月 25 日

1653
00:41:35,000 --> 00:41:37,000
终于发布了 1.0 版

1654
00:41:37,000 --> 00:41:39,000
这也是个什么

1655
00:41:39,000 --> 00:41:41,000
1.0 就是一个里程碑了

1656
00:41:41,000 --> 00:41:41,000
对

1657
00:41:41,000 --> 00:41:42,000
当然

1658
00:41:42,000 --> 00:41:44,000
这是 Github 这种

1659
00:41:44,000 --> 00:41:45,000
比较负责的公司

1660
00:41:45,000 --> 00:41:47,000
会把 1.0 版这么

1661
00:41:47,000 --> 00:41:49,000
这么及时的试出来

1662
00:41:49,000 --> 00:41:51,000
你像当初 Google Mail

1663
00:41:51,000 --> 00:41:52,000
背它了多久

1664
00:41:52,000 --> 00:41:55,000
好多好多好多年

1665
00:41:55,000 --> 00:41:56,000
对

1666
00:41:56,000 --> 00:41:57,000
十年又没有

1667
00:41:57,000 --> 00:41:59,000
差不多吧

1668
00:41:59,000 --> 00:42:01,000
难以相信

1669
00:42:01,000 --> 00:42:01,000
对

1670
00:42:01,000 --> 00:42:03,000
所以 1.0 版有什么特别的

1671
00:42:03,000 --> 00:42:06,000
其实也没有什么特别

1672
00:42:06,000 --> 00:42:06,000
我仔细看了一下

1673
00:42:06,000 --> 00:42:07,000
就是

1674
00:42:07,000 --> 00:42:08,000
他们

1675
00:42:08,000 --> 00:42:11,000
从 Public

1676
00:42:11,000 --> 00:42:12,000
Release

1677
00:42:12,000 --> 00:42:13,000
一直到现在

1678
00:42:13,000 --> 00:42:15,000
历经了 155 次 Release

1679
00:42:15,000 --> 00:42:17,000
就是过去的这一年

1680
00:42:17,000 --> 00:42:17,000
多一点里面

1681
00:42:17,000 --> 00:42:18,000
有 155 次 Release

1682
00:42:18,000 --> 00:42:19,000
每一次都有 Change list

1683
00:42:19,000 --> 00:42:21,000
然后现在就是

1684
00:42:21,000 --> 00:42:21,000
他们

1685
00:42:21,000 --> 00:42:22,000
整个

1686
00:42:22,000 --> 00:42:24,000
编辑器的

1687
00:42:24,000 --> 00:42:26,000
核心

1688
00:42:26,000 --> 00:42:26,000
那个

1689
00:42:26,000 --> 00:42:27,000
可以扩展的那一部分

1690
00:42:27,000 --> 00:42:28,000
就是 API 那一部分

1691
00:42:28,000 --> 00:42:29,000
已经被

1692
00:42:29,000 --> 00:42:30,000
正式 Trick 了

1693
00:42:30,000 --> 00:42:30,000
这也是

1694
00:42:30,000 --> 00:42:32,000
它发布

1695
00:42:32,000 --> 00:42:33,000
1.0 版的主要原因

1696
00:42:33,000 --> 00:42:34,000
然后

1697
00:42:34,000 --> 00:42:35,000
其实我想说的是

1698
00:42:35,000 --> 00:42:36,000
就是它有一个视频

1699
00:42:36,000 --> 00:42:36,000
很有意思

1700
00:42:36,000 --> 00:42:36,000
它

1701
00:42:36,000 --> 00:42:38,000
用一台

1702
00:42:38,000 --> 00:42:40,000
用那种 60 年的手法

1703
00:42:40,000 --> 00:42:41,000
就是如果你看过一个视频

1704
00:42:41,000 --> 00:42:42,000
叫做

1705
00:42:42,000 --> 00:42:45,000
Prediction of

1706
00:42:45,000 --> 00:42:47,000
Home Computers

1707
00:42:47,000 --> 00:42:48,000
之类的这么一个

1708
00:42:48,000 --> 00:42:50,000
60 年代做的

1709
00:42:50,000 --> 00:42:52,000
未来

1710
00:42:52,000 --> 00:42:52,000
关于未来

1711
00:42:52,000 --> 00:42:54,000
家用电脑的展望视频的话

1712
00:42:54,000 --> 00:42:55,000
这个视频跟那个视频

1713
00:42:55,000 --> 00:42:57,000
是相呼应的那种感觉

1714
00:42:57,000 --> 00:42:58,000
对

1715
00:42:58,000 --> 00:43:00,000
那个 60 年的视频里面

1716
00:43:00,000 --> 00:43:00,000
说

1717
00:43:00,000 --> 00:43:02,000
已经假想了

1718
00:43:02,000 --> 00:43:03,000
将来的人们回家

1719
00:43:03,000 --> 00:43:04,000
一回家就会开大脑

1720
00:43:04,000 --> 00:43:05,000
然后

1721
00:43:05,000 --> 00:43:06,000
可以在

1722
00:43:06,000 --> 00:43:07,000
多个显示器上

1723
00:43:07,000 --> 00:43:08,000
处理表格

1724
00:43:08,000 --> 00:43:09,000
然后可以通过一个

1725
00:43:09,000 --> 00:43:11,000
巨大的电视屏幕

1726
00:43:11,000 --> 00:43:12,000
一样的东西

1727
00:43:12,000 --> 00:43:13,000
和一个滚轮

1728
00:43:13,000 --> 00:43:16,000
滚球应该说

1729
00:43:16,000 --> 00:43:17,000
之类的

1730
00:43:17,000 --> 00:43:19,000
会以旋钮之类的东西来

1731
00:43:19,000 --> 00:43:20,000
在线购物

1732
00:43:20,000 --> 00:43:21,000
那个时候

1733
00:43:21,000 --> 00:43:23,000
已经全都想到了这些

1734
00:43:23,000 --> 00:43:24,000
然后这个

1735
00:43:24,000 --> 00:43:25,000
Atom 1.0 的

1736
00:43:25,000 --> 00:43:26,000
渲转视频

1737
00:43:26,000 --> 00:43:26,000
就是

1738
00:43:26,000 --> 00:43:28,000
拍的也不算

1739
00:43:28,000 --> 00:43:30,000
就是用那种风格

1740
00:43:30,000 --> 00:43:30,000
拍了一个

1741
00:43:30,000 --> 00:43:32,000
一家人

1742
00:43:32,000 --> 00:43:33,000
围绕着这么一个

1743
00:43:33,000 --> 00:43:35,000
专用的 Atom 控制台

1744
00:43:35,000 --> 00:43:35,000
上面

1745
00:43:35,000 --> 00:43:36,000
洗碗码的过程

1746
00:43:36,000 --> 00:43:38,000
还蛮值得一看的

1747
00:43:38,000 --> 00:43:40,000
这个什么

1748
00:43:40,000 --> 00:43:41,000
程序员的恶趣味

1749
00:43:41,000 --> 00:43:42,000
没错

1750
00:43:42,000 --> 00:43:44,000
然后可以顺带来提一下

1751
00:43:44,000 --> 00:43:44,000
就是那个

1752
00:43:44,000 --> 00:43:45,000
Visual Studio

1753
00:43:45,000 --> 00:43:46,000
Code

1754
00:43:46,000 --> 00:43:47,000
也发布了

1755
00:43:47,000 --> 00:43:48,000
0.500

1756
00:43:48,000 --> 00:43:50,000
其实这几个

1757
00:43:50,000 --> 00:43:51,000
我一直搞不清楚

1758
00:43:51,000 --> 00:43:52,000
就是 Facebook

1759
00:43:52,000 --> 00:43:53,000
之前不是也搞了一个

1760
00:43:53,000 --> 00:43:54,000
叫

1761
00:43:54,000 --> 00:43:56,000
Nucleus

1762
00:43:56,000 --> 00:43:56,000
对吧

1763
00:43:56,000 --> 00:43:59,000
Nucleus

1764
00:43:59,000 --> 00:44:00,000
也是基于

1765
00:44:00,000 --> 00:44:01,000
Electro

1766
00:44:01,000 --> 00:44:02,000
不是吗

1767
00:44:02,000 --> 00:44:04,000
对

1768
00:44:04,000 --> 00:44:05,000
就是基于

1769
00:44:05,000 --> 00:44:07,000
电子

1770
00:44:07,000 --> 00:44:08,000
对

1771
00:44:08,000 --> 00:44:08,000
对

1772
00:44:08,000 --> 00:44:11,000
反正就是基于

1773
00:44:11,000 --> 00:44:12,000
Web 技术

1774
00:44:12,000 --> 00:44:13,000
做了三款浏览器了

1775
00:44:13,000 --> 00:44:14,000
Atom 是一个

1776
00:44:14,000 --> 00:44:15,000
什么

1777
00:44:15,000 --> 00:44:16,000
算是第一个

1778
00:44:16,000 --> 00:44:16,000
正统吧

1779
00:44:16,000 --> 00:44:17,000
对

1780
00:44:17,000 --> 00:44:18,000
有那个 Nucleus

1781
00:44:18,000 --> 00:44:18,000
然后有那个

1782
00:44:18,000 --> 00:44:19,000
Visual Studio

1783
00:44:19,000 --> 00:44:21,000
Code

1784
00:44:21,000 --> 00:44:22,000
最近

1785
00:44:22,000 --> 00:44:23,000
也是今年出的

1786
00:44:23,000 --> 00:44:24,000
还有什么

1787
00:44:24,000 --> 00:44:24,000
Slack

1788
00:44:24,000 --> 00:44:28,000
Slack 是那个

1789
00:44:28,000 --> 00:44:28,000
什么

1790
00:44:28,000 --> 00:44:30,000
协同软件吧

1791
00:44:31,000 --> 00:44:31,000
啊

1792
00:44:31,000 --> 00:44:32,000
他也是

1793
00:44:32,000 --> 00:44:33,000
基于

1794
00:44:33,000 --> 00:44:34,000
那个

1795
00:44:34,000 --> 00:44:34,000
和谐的吧

1796
00:44:34,000 --> 00:44:35,000
对

1797
00:44:35,000 --> 00:44:36,000
一个是

1798
00:44:36,000 --> 00:44:37,000
怎么说他自己

1799
00:44:37,000 --> 00:44:38,000
好像叫自己

1800
00:44:38,000 --> 00:44:38,000
Messaging

1801
00:44:38,000 --> 00:44:40,000
Messaging App

1802
00:44:40,000 --> 00:44:42,000
就是一个团队

1803
00:44:42,000 --> 00:44:42,000
协作软件

1804
00:44:42,000 --> 00:44:43,000
但实际上他也是

1805
00:44:43,000 --> 00:44:44,000
从那个 Electron 改

1806
00:44:44,000 --> 00:44:45,000
我记得 Lawrence

1807
00:44:45,000 --> 00:44:47,000
还给咱俩发过

1808
00:44:47,000 --> 00:44:48,000
Invitation

1809
00:44:48,000 --> 00:44:48,000
想想

1810
00:44:48,000 --> 00:44:50,000
我有装

1811
00:44:50,000 --> 00:44:50,000
我有装

1812
00:44:50,000 --> 00:44:51,000
我没装

1813
00:44:51,000 --> 00:44:52,000
用了一下

1814
00:44:52,000 --> 00:44:53,000
其实你一看就知道

1815
00:44:53,000 --> 00:44:55,000
这其实是一个

1816
00:44:55,000 --> 00:44:56,000
WebView

1817
00:44:56,000 --> 00:44:57,000
封装起来的

1818
00:44:57,000 --> 00:44:57,000
壳子

1819
00:44:57,000 --> 00:44:59,000
比那个

1820
00:44:59,000 --> 00:45:00,000
过去 WebView

1821
00:45:00,000 --> 00:45:01,000
可能做的要

1822
00:45:01,000 --> 00:45:01,000
稍微原深一点

1823
00:45:01,000 --> 00:45:02,000
但是

1824
00:45:02,000 --> 00:45:03,000
毕竟还是不改

1825
00:45:03,000 --> 00:45:04,000
它那个本质

1826
00:45:04,000 --> 00:45:05,000
对

1827
00:45:05,000 --> 00:45:07,000
当然这些本质是什么呢

1828
00:45:07,000 --> 00:45:08,000
比如说

1829
00:45:08,000 --> 00:45:09,000
我先问一下

1830
00:45:09,000 --> 00:45:10,000
Atom 1.0

1831
00:45:10,000 --> 00:45:12,000
能打开一个 20 兆的文件吗

1832
00:45:12,000 --> 00:45:13,000
不知道

1833
00:45:13,000 --> 00:45:14,000
我还没装

1834
00:45:14,000 --> 00:45:16,000
那似乎还是不行

1835
00:45:16,000 --> 00:45:17,000
是吧

1836
00:45:17,000 --> 00:45:17,000
OK

1837
00:45:17,000 --> 00:45:18,000
虽然也不太

1838
00:45:18,000 --> 00:45:19,000
可能有 20 兆的

1839
00:45:19,000 --> 00:45:21,000
一个程序的代码

1840
00:45:21,000 --> 00:45:21,000
但是

1841
00:45:21,000 --> 00:45:22,000
嗯

1842
00:45:22,000 --> 00:45:23,000
吧

1843
00:45:23,000 --> 00:45:25,000
毕竟还是有这么一个限制

1844
00:45:25,000 --> 00:45:26,000
嗯

1845
00:45:26,000 --> 00:45:27,000
然后

1846
00:45:27,000 --> 00:45:30,000
这些东西都有一个

1847
00:45:30,000 --> 00:45:31,000
问题

1848
00:45:31,000 --> 00:45:32,000
就是比较臃肿

1849
00:45:32,000 --> 00:45:33,000
对

1850
00:45:33,000 --> 00:45:34,000
比较占益资源嘛

1851
00:45:34,000 --> 00:45:35,000
应该说

1852
00:45:35,000 --> 00:45:35,000
对

1853
00:45:35,000 --> 00:45:36,000
虽然说现在什么

1854
00:45:36,000 --> 00:45:39,000
硬件资源比较丰富

1855
00:45:39,000 --> 00:45:39,000
但是

1856
00:45:39,000 --> 00:45:40,000
我总觉得哈

1857
00:45:40,000 --> 00:45:41,000
就这么浪费

1858
00:45:41,000 --> 00:45:44,000
好像也不是一个特别好的事

1859
00:45:44,000 --> 00:45:45,000
嗯

1860
00:45:45,000 --> 00:45:46,000
但

1861
00:45:46,000 --> 00:45:47,000
做一个编辑器

1862
00:45:47,000 --> 00:45:47,000
竟然要

1863
00:45:47,000 --> 00:45:49,000
外照

1864
00:45:49,000 --> 00:45:50,000
的内存

1865
00:45:50,000 --> 00:45:51,000
才能跑起来

1866
00:45:51,000 --> 00:45:53,000
觉得就有点过了

1867
00:45:53,000 --> 00:45:54,000
是

1868
00:45:54,000 --> 00:45:55,000
对

1869
00:45:55,000 --> 00:45:58,000
这就是为什么一些古老的

1870
00:45:58,000 --> 00:46:00,000
用 C 写的编辑器

1871
00:46:00,000 --> 00:46:02,000
可以一直获到晶铁

1872
00:46:02,000 --> 00:46:04,000
什么 VI 啊

1873
00:46:04,000 --> 00:46:05,000
EMEX 啊

1874
00:46:05,000 --> 00:46:06,000
还挺好的

1875
00:46:06,000 --> 00:46:08,000
所以

1876
00:46:08,000 --> 00:46:09,000
其实你看好

1877
00:46:09,000 --> 00:46:10,000
这一类的东西吗

1878
00:46:10,000 --> 00:46:11,000
就是把那种 web 的技术

1879
00:46:11,000 --> 00:46:12,000
跑在客户端

1880
00:46:12,000 --> 00:46:15,000
跑在原生的皮里面

1881
00:46:15,000 --> 00:46:17,000
然后假装自己是原生一用

1882
00:46:17,000 --> 00:46:18,000
嗯

1883
00:46:18,000 --> 00:46:20,000
其实 Lawrence 前

1884
00:46:20,000 --> 00:46:22,000
上一期节目里面

1885
00:46:22,000 --> 00:46:23,000
说什么 web app

1886
00:46:23,000 --> 00:46:24,000
is for animals 的时候

1887
00:46:24,000 --> 00:46:24,000
我就想

1888
00:46:24,000 --> 00:46:27,000
把这个 web app

1889
00:46:27,000 --> 00:46:28,000
封装成一个

1890
00:46:28,000 --> 00:46:30,000
原生 app 的这种东西

1891
00:46:30,000 --> 00:46:31,000
有应该怎么讲

1892
00:46:31,000 --> 00:46:33,000
这个我觉得跟 web app

1893
00:46:33,000 --> 00:46:34,000
可能还

1894
00:46:34,000 --> 00:46:35,000
就我们传统意义

1895
00:46:35,000 --> 00:46:35,000
认为的 web app

1896
00:46:35,000 --> 00:46:36,000
可能还不太一样

1897
00:46:36,000 --> 00:46:37,000
就是

1898
00:46:37,000 --> 00:46:38,000
传统意义上 web app

1899
00:46:38,000 --> 00:46:40,000
可能还是在浏览器里面

1900
00:46:40,000 --> 00:46:40,000
然后

1901
00:46:40,000 --> 00:46:42,000
它的

1902
00:46:42,000 --> 00:46:43,000
其实我觉得这个界线

1903
00:46:43,000 --> 00:46:44,000
主要在哪里

1904
00:46:44,000 --> 00:46:45,000
就是它的这个

1905
00:46:45,000 --> 00:46:47,000
在离线状态下的行为

1906
00:46:47,000 --> 00:46:48,000
就起码

1907
00:46:48,000 --> 00:46:49,000
这些几个应用

1908
00:46:49,000 --> 00:46:49,000
都是说

1909
00:46:49,000 --> 00:46:50,000
它的本

1910
00:46:50,000 --> 00:46:51,000
本初是为

1911
00:46:51,000 --> 00:46:52,000
单机

1912
00:46:52,000 --> 00:46:53,000
或者离线状态

1913
00:46:53,000 --> 00:46:54,000
自己运行的

1914
00:46:54,000 --> 00:46:57,000
这种情况设计的

1915
00:46:57,000 --> 00:46:58,000
它不牵涉到说

1916
00:46:58,000 --> 00:46:59,000
很多 web app

1917
00:46:59,000 --> 00:47:00,000
它没有做这个

1918
00:47:00,000 --> 00:47:01,000
叫做 app cache

1919
00:47:01,000 --> 00:47:03,000
和这个 offline mode

1920
00:47:03,000 --> 00:47:04,000
的情况下

1921
00:47:04,000 --> 00:47:05,000
那完全没法用

1922
00:47:05,000 --> 00:47:05,000
那种情况

1923
00:47:05,000 --> 00:47:06,000
就这个

1924
00:47:06,000 --> 00:47:07,000
我觉得还是有很大区别

1925
00:47:07,000 --> 00:47:09,000
好吧

1926
00:47:09,000 --> 00:47:10,000
我觉得最大的区别

1927
00:47:10,000 --> 00:47:11,000
还是在于

1928
00:47:11,000 --> 00:47:12,000
那个 chrome

1929
00:47:12,000 --> 00:47:13,000
就是在于

1930
00:47:13,000 --> 00:47:13,000
那个 vib

1931
00:47:13,000 --> 00:47:15,000
那个框架上

1932
00:47:15,000 --> 00:47:16,000
你在用 web app 的时候

1933
00:47:16,000 --> 00:47:16,000
你会

1934
00:47:16,000 --> 00:47:17,000
有一个明确的

1935
00:47:17,000 --> 00:47:19,000
心理预期

1936
00:47:19,000 --> 00:47:20,000
说我

1937
00:47:20,000 --> 00:47:21,000
正在浏览器里面

1938
00:47:21,000 --> 00:47:22,000
使用一个东西

1939
00:47:22,000 --> 00:47:23,000
这个东西不是 native 的

1940
00:47:23,000 --> 00:47:24,000
不是 native 的

1941
00:47:24,000 --> 00:47:25,000
不是 native 的

1942
00:47:25,000 --> 00:47:28,000
我觉得至少我会有这样一种

1943
00:47:28,000 --> 00:47:29,000
默默的心理暗示

1944
00:47:29,000 --> 00:47:30,000
但是我觉得

1945
00:47:30,000 --> 00:47:30,000
这也就是为什么

1946
00:47:30,000 --> 00:47:32,000
Google 要把

1947
00:47:32,000 --> 00:47:32,000
那个

1948
00:47:32,000 --> 00:47:34,000
chrome apps

1949
00:47:34,000 --> 00:47:36,000
单独拎出来

1950
00:47:36,000 --> 00:47:38,000
放成一个

1951
00:47:38,000 --> 00:47:40,000
独立于浏览器之外的

1952
00:47:40,000 --> 00:47:41,000
窗口

1953
00:47:41,000 --> 00:47:44,000
放在一个独立于浏览器之外的窗口里面

1954
00:47:44,000 --> 00:47:45,000
让用户来用

1955
00:47:45,000 --> 00:47:47,000
我觉得它就是试图

1956
00:47:47,000 --> 00:47:48,000
打破这种 chrome

1957
00:47:48,000 --> 00:47:50,000
但是效果也

1958
00:47:50,000 --> 00:47:51,000
脱枷锁嘛

1959
00:47:51,000 --> 00:47:52,000
对

1960
00:47:52,000 --> 00:47:53,000
效果还是不适合

1961
00:47:53,000 --> 00:47:56,000
所以你看到像那个 atom 这种

1962
00:47:56,000 --> 00:47:57,000
编辑器的时候

1963
00:47:57,000 --> 00:47:57,000
你用的时候

1964
00:47:57,000 --> 00:47:58,000
你会觉得它是一个

1965
00:47:58,000 --> 00:48:00,000
非原生的东西吗

1966
00:48:00,000 --> 00:48:02,000
我觉得这种感觉已经非常淡化

1967
00:48:02,000 --> 00:48:03,000
就

1968
00:48:03,000 --> 00:48:05,000
因为我为了准备这一期的节目

1969
00:48:05,000 --> 00:48:07,000
又打开那个

1970
00:48:07,000 --> 00:48:09,000
创新版的 Mirul Studio Code

1971
00:48:09,000 --> 00:48:10,000
然后用一下

1972
00:48:10,000 --> 00:48:11,000
就感觉还是

1973
00:48:11,000 --> 00:48:12,000
就你感觉不到

1974
00:48:12,000 --> 00:48:13,000
它除了在那个

1975
00:48:13,000 --> 00:48:15,000
UI 风格上

1976
00:48:15,000 --> 00:48:18,000
跟你的系统格格不入之外

1977
00:48:18,000 --> 00:48:20,000
你感觉不到

1978
00:48:20,000 --> 00:48:22,000
它是一个网页应用

1979
00:48:22,000 --> 00:48:23,000
对不对

1980
00:48:23,000 --> 00:48:26,000
格格不入也没有

1981
00:48:26,000 --> 00:48:26,000
我必须说

1982
00:48:26,000 --> 00:48:27,000
但

1983
00:48:27,000 --> 00:48:28,000
它风格很不一样

1984
00:48:28,000 --> 00:48:32,000
或者说

1985
00:48:32,000 --> 00:48:33,000
我在用 Visual Studio 的时候

1986
00:48:33,000 --> 00:48:36,000
心里面就带了这样一个预期

1987
00:48:36,000 --> 00:48:36,000
我就说

1988
00:48:36,000 --> 00:48:37,000
这是 Visual 做的东西

1989
00:48:37,000 --> 00:48:38,000
它风格

1990
00:48:38,000 --> 00:48:39,000
本来就不一样

1991
00:48:39,000 --> 00:48:40,000
对

1992
00:48:40,000 --> 00:48:40,000
它不可能一样

1993
00:48:40,000 --> 00:48:41,000
但

1994
00:48:41,000 --> 00:48:43,000
当然你说的又到

1995
00:48:43,000 --> 00:48:44,000
但话说回来

1996
00:48:44,000 --> 00:48:46,000
风格跟原生的

1997
00:48:46,000 --> 00:48:48,000
不一样的原生 APP

1998
00:48:48,000 --> 00:48:50,000
风格跟

1999
00:48:50,000 --> 00:48:52,000
默认的

2000
00:48:52,000 --> 00:48:53,000
苹果风格不一样的原生 APP

2001
00:48:53,000 --> 00:48:54,000
其实也很多

2002
00:48:54,000 --> 00:48:54,000
对

2003
00:48:54,000 --> 00:48:56,000
所以其实说到底就是说

2004
00:48:56,000 --> 00:48:57,000
Web

2005
00:48:57,000 --> 00:48:58,000
叫什么来着

2006
00:48:58,000 --> 00:49:00,000
Web

2007
00:49:00,000 --> 00:49:01,000
App

2008
00:49:01,000 --> 00:49:02,000
本身

2009
00:49:02,000 --> 00:49:04,000
并不代表一个

2010
00:49:04,000 --> 00:49:06,000
比较糟糕的体验

2011
00:49:06,000 --> 00:49:07,000
是这个意思吗

2012
00:49:07,000 --> 00:49:08,000
就是它有的一些技术

2013
00:49:08,000 --> 00:49:09,000
我是这么觉得

2014
00:49:09,000 --> 00:49:10,000
是可以实现出一个

2015
00:49:10,000 --> 00:49:12,000
比较原生的体验的

2016
00:49:12,000 --> 00:49:13,000
当然说我们资源站页上

2017
00:49:13,000 --> 00:49:14,000
这个事情先不讲

2018
00:49:14,000 --> 00:49:16,000
就是说在交互上

2019
00:49:16,000 --> 00:49:17,000
还有包括这个给人的感觉上

2020
00:49:17,000 --> 00:49:18,000
是可以做到比较好的

2021
00:49:18,000 --> 00:49:19,000
就之前

2022
00:49:19,000 --> 00:49:21,000
就说这个 Web

2023
00:49:21,000 --> 00:49:21,000
App

2024
00:49:21,000 --> 00:49:22,000
不好用

2025
00:49:22,000 --> 00:49:23,000
纯粹是因为他们做的

2026
00:49:23,000 --> 00:49:23,000
不够好

2027
00:49:23,000 --> 00:49:25,000
OK

2028
00:49:25,000 --> 00:49:25,000
那我们可以

2029
00:49:25,000 --> 00:49:27,000
暂时

2030
00:49:27,000 --> 00:49:28,000
把这个

2031
00:49:28,000 --> 00:49:29,000
浏览器的新闻

2032
00:49:29,000 --> 00:49:30,000
放在一边

2033
00:49:30,000 --> 00:49:31,000
将来如果

2034
00:49:31,000 --> 00:49:32,000
Visual Studio Code

2035
00:49:32,000 --> 00:49:33,000
也出了 1.0 的话

2036
00:49:33,000 --> 00:49:34,000
我们就来

2037
00:49:34,000 --> 00:49:35,000
后续报

2038
00:49:35,000 --> 00:49:36,000
OK

2039
00:49:36,000 --> 00:49:39,000
好吧

2040
00:49:39,000 --> 00:49:41,000
那下一条新闻

2041
00:49:41,000 --> 00:49:41,000
这是你

2042
00:49:41,000 --> 00:49:42,000
你写的吧

2043
00:49:42,000 --> 00:49:43,000
对

2044
00:49:43,000 --> 00:49:46,000
这个事情还挺有意思的

2045
00:49:46,000 --> 00:49:47,000
就是之前我们讲

2046
00:49:47,000 --> 00:49:50,000
阿迪工人们经常讲的

2047
00:49:50,000 --> 00:49:52,000
Oculus Rift

2048
00:49:52,000 --> 00:49:55,000
3 D 的虚拟现实眼镜

2049
00:49:55,000 --> 00:49:59,000
他开发者叫做 John Carmack

2050
00:49:59,000 --> 00:50:01,000
大家都应该比较熟悉了

2051
00:50:01,000 --> 00:50:05,000
他在上周还是前周

2052
00:50:05,000 --> 00:50:06,000
也是差不多

2053
00:50:06,000 --> 00:50:07,000
也是上黑二十几号的时候

2054
00:50:07,000 --> 00:50:11,000
在 Google 讨论组里面

2055
00:50:11,000 --> 00:50:12,000
发了这么一条信息

2056
00:50:12,000 --> 00:50:15,000
就是他在琢磨着用 Racket

2057
00:50:15,000 --> 00:50:16,000
Racket 是一个

2058
00:50:16,000 --> 00:50:20,000
Schem 语言的一个实现

2059
00:50:20,000 --> 00:50:22,000
然后 Schem 是一种 Lisp

2060
00:50:22,000 --> 00:50:24,000
它是 Lisp 1

2061
00:50:24,000 --> 00:50:24,000
对

2062
00:50:24,000 --> 00:50:27,000
然后他觉得用 Racket

2063
00:50:27,000 --> 00:50:28,000
或者是 Schem 这个语言

2064
00:50:28,000 --> 00:50:31,000
给 VR 环境里面做一个

2065
00:50:31,000 --> 00:50:32,000
怎么说呢

2066
00:50:32,000 --> 00:50:34,000
叫做教学语言

2067
00:50:34,000 --> 00:50:35,000
可以怎么讲

2068
00:50:35,000 --> 00:50:36,000
教学环境

2069
00:50:36,000 --> 00:50:39,000
它叫做 Scripting Environment

2070
00:50:39,000 --> 00:50:40,000
就是脚本环境

2071
00:50:40,000 --> 00:50:41,000
什么意思呢

2072
00:50:41,000 --> 00:50:42,000
就是你可以在

2073
00:50:42,000 --> 00:50:45,000
通过写这个 Schem 代码

2074
00:50:45,000 --> 00:50:46,000
在虚拟世界里面

2075
00:50:46,000 --> 00:50:48,000
构建出一些组件出来

2076
00:50:48,000 --> 00:50:49,000
比如可以看到

2077
00:50:49,000 --> 00:50:51,000
就像大积木一样

2078
00:50:51,000 --> 00:50:51,000
做一些事情

2079
00:50:51,000 --> 00:50:53,000
然后他发了一篇

2080
00:50:53,000 --> 00:50:56,000
非常长的文章去讲

2081
00:50:56,000 --> 00:50:58,000
他就为什么会选择

2082
00:50:58,000 --> 00:50:59,000
这个 Schem

2083
00:50:59,000 --> 00:51:00,000
还有一些什么其他

2084
00:51:00,000 --> 00:51:03,000
关于搭建这个环境的

2085
00:51:03,000 --> 00:51:04,000
一些事情

2086
00:51:04,000 --> 00:51:04,000
我把那个连接

2087
00:51:04,000 --> 00:51:05,000
放到那个 Show Notes 里面

2088
00:51:05,000 --> 00:51:06,000
但我觉得这个事情

2089
00:51:06,000 --> 00:51:07,000
大家还挺好

2090
00:51:07,000 --> 00:51:08,000
挺有意思

2091
00:51:08,000 --> 00:51:09,000
大家可以去看一下

2092
00:51:09,000 --> 00:51:10,000
具体内容

2093
00:51:10,000 --> 00:51:11,000
现在不剧透了

2094
00:51:11,000 --> 00:51:11,000
对

2095
00:51:11,000 --> 00:51:16,000
我不知道你怎么想这件事

2096
00:51:16,000 --> 00:51:17,000
我其实问到这个原因

2097
00:51:17,000 --> 00:51:18,000
第一想到的是

2098
00:51:18,000 --> 00:51:21,000
当初我在那个电视上面

2099
00:51:21,000 --> 00:51:25,000
用 Apple 2 和 Logo 源

2100
00:51:25,000 --> 00:51:27,000
操纵那个海龟的时候

2101
00:51:27,000 --> 00:51:29,000
那个场景

2102
00:51:29,000 --> 00:51:30,000
就是

2103
00:51:30,000 --> 00:51:30,000
对

2104
00:51:30,000 --> 00:51:30,000
对

2105
00:51:30,000 --> 00:51:31,000
差不多

2106
00:51:31,000 --> 00:51:32,000
他想的应该是类似的应用

2107
00:51:32,000 --> 00:51:33,000
只不过是做到那个 VR

2108
00:51:33,000 --> 00:51:35,000
就是虚拟现实的环境里面去

2109
00:51:35,000 --> 00:51:36,000
对

2110
00:51:36,000 --> 00:51:37,000
然后我想就是

2111
00:51:37,000 --> 00:51:40,000
因为 Logo 本身也是一个比较有意思的

2112
00:51:40,000 --> 00:51:41,000
Functional Program Language

2113
00:51:41,000 --> 00:51:42,000
然后

2114
00:51:42,000 --> 00:51:46,000
也许将来的孩子们可以戴着 VR

2115
00:51:46,000 --> 00:51:47,000
眼镜

2116
00:51:47,000 --> 00:51:50,000
然后用一种这样类似于 Logo 的

2117
00:51:50,000 --> 00:51:51,000
教学式的

2118
00:51:51,000 --> 00:51:53,000
Scripting Language

2119
00:51:53,000 --> 00:51:55,000
在一个 3 D 的世界里面操纵

2120
00:51:55,000 --> 00:51:56,000
3 D 的海龟

2121
00:51:56,000 --> 00:51:58,000
或者说一个海龟

2122
00:51:58,000 --> 00:51:59,000
这个 metaphor

2123
00:51:59,000 --> 00:52:00,000
这么一个东西

2124
00:52:00,000 --> 00:52:02,000
然后去画一些比如说 3 D 的分形图形

2125
00:52:02,000 --> 00:52:04,000
或者说

2126
00:52:04,000 --> 00:52:05,000
对

2127
00:52:05,000 --> 00:52:06,000
画 whatever 什么东西

2128
00:52:06,000 --> 00:52:08,000
感觉很 exciting

2129
00:52:08,000 --> 00:52:12,000
所以

2130
00:52:12,000 --> 00:52:13,000
所以这个

2131
00:52:13,000 --> 00:52:15,000
你在 Scheme

2132
00:52:15,000 --> 00:52:17,000
用 Scheme 在虚拟环境里面

2133
00:52:17,000 --> 00:52:18,000
画这种物件

2134
00:52:18,000 --> 00:52:19,000
你觉得会怎么样

2135
00:52:19,000 --> 00:52:22,000
应该蛮酸爽的吧

2136
00:52:22,000 --> 00:52:26,000
你是不是上次我给你发过一个

2137
00:52:26,000 --> 00:52:27,000
应该有两个连接吧

2138
00:52:27,000 --> 00:52:28,000
是 YouTube 的视频

2139
00:52:28,000 --> 00:52:31,000
就是有人在 VR 眼镜里面

2140
00:52:31,000 --> 00:52:33,000
就 VR 虚拟世界里面

2141
00:52:33,000 --> 00:52:35,000
实时的通过编辑

2142
00:52:35,000 --> 00:52:38,000
应该是 JavaScript 的代码

2143
00:52:38,000 --> 00:52:40,000
来去操纵里面的物件的

2144
00:52:40,000 --> 00:52:42,000
那些虚拟的物件的变化

2145
00:52:42,000 --> 00:52:43,000
改变周遭环境

2146
00:52:43,000 --> 00:52:44,000
对

2147
00:52:44,000 --> 00:52:46,000
你还记得那个视频吗

2148
00:52:46,000 --> 00:52:49,000
这个过程还是蛮有意思的

2149
00:52:49,000 --> 00:52:50,000
它那个不太好的一点

2150
00:52:50,000 --> 00:52:51,000
就是它要

2151
00:52:51,000 --> 00:52:53,000
如果它要改变这块

2152
00:52:53,000 --> 00:52:54,000
它得 reload

2153
00:52:54,000 --> 00:52:56,000
它得刷新脚本

2154
00:52:56,000 --> 00:52:58,000
然后整个重绘一遍

2155
00:52:58,000 --> 00:52:58,000
整个环境

2156
00:52:58,000 --> 00:53:01,000
然后我知道用 Scheme 的话

2157
00:53:01,000 --> 00:53:03,000
它可不做到一个增量的修改

2158
00:53:03,000 --> 00:53:04,000
因为大家之前

2159
00:53:04,000 --> 00:53:05,000
你知道 Lisp

2160
00:53:05,000 --> 00:53:07,000
它刚才说的最牛逼的功能

2161
00:53:07,000 --> 00:53:09,000
就是可以在它运行中

2162
00:53:09,000 --> 00:53:10,000
动态修改代码

2163
00:53:10,000 --> 00:53:12,000
然后在部分的执行

2164
00:53:12,000 --> 00:53:13,000
对吧

2165
00:53:13,000 --> 00:53:13,000
对

2166
00:53:13,000 --> 00:53:15,000
数据和代码部分

2167
00:53:15,000 --> 00:53:16,000
没错

2168
00:53:16,000 --> 00:53:16,000
没错

2169
00:53:16,000 --> 00:53:20,000
所以这个还是蛮值得期待的

2170
00:53:20,000 --> 00:53:24,000
对

2171
00:53:24,000 --> 00:53:26,000
其实这里可以顺便说一下

2172
00:53:26,000 --> 00:53:27,000
就是我今天在

2173
00:53:27,000 --> 00:53:30,000
The Verge 还是什么上面

2174
00:53:30,000 --> 00:53:31,000
不对

2175
00:53:31,000 --> 00:53:33,000
Arstestica 上面看到了一个

2176
00:53:33,000 --> 00:53:37,000
微软最新的关于 HoloLens 的视频

2177
00:53:37,000 --> 00:53:44,000
然后里面就有那个一个怎么说类似于低人声视角的告诉你说

2178
00:53:44,000 --> 00:53:47,000
你戴上 HoloLens 之后能看到的这么一个区域

2179
00:53:47,000 --> 00:53:50,000
然后对

2180
00:53:50,000 --> 00:53:55,000
然后我就感受到了 Lawrence 的戴了 HoloLens 之后的那种失落感

2181
00:53:55,000 --> 00:53:58,000
就真的差挺多的

2182
00:53:58,000 --> 00:54:00,000
就是之前我不知道你

2183
00:54:00,000 --> 00:54:01,000
可是比较窄的吧

2184
00:54:01,000 --> 00:54:02,000
对

2185
00:54:02,000 --> 00:54:04,000
我脑补的这个 HoloLens 是戴上之后

2186
00:54:04,000 --> 00:54:06,000
你可以全市场看到的

2187
00:54:06,000 --> 00:54:07,000
然后当人们

2188
00:54:07,000 --> 00:54:08,000
对

2189
00:54:08,000 --> 00:54:10,000
当人们告诉我说这个市场其实很窄的时候

2190
00:54:10,000 --> 00:54:12,000
我没有一个主播内向它到底有多窄

2191
00:54:12,000 --> 00:54:15,000
但只有直到看了那个视频之后

2192
00:54:15,000 --> 00:54:16,000
我才意识到

2193
00:54:16,000 --> 00:54:17,000
哇靠原来这么窄

2194
00:54:17,000 --> 00:54:19,000
这个差别就是

2195
00:54:19,000 --> 00:54:21,000
我之前想象的是一个

2196
00:54:21,000 --> 00:54:23,000
一个显示器大的

2197
00:54:23,000 --> 00:54:25,000
我把你包起来

2198
00:54:25,000 --> 00:54:29,000
你坐在一个属于你自己的 V 型天文球里面这种感觉

2199
00:54:29,000 --> 00:54:33,000
但实际上它只不过是把一台显示器摆到你面前

2200
00:54:33,000 --> 00:54:35,000
就是在你眼镜前面

2201
00:54:35,000 --> 00:54:36,000
就大概那么大的地方

2202
00:54:36,000 --> 00:54:38,000
这实在是差别太大了

2203
00:54:38,000 --> 00:54:43,000
再也不能说这个什么取消显示器

2204
00:54:43,000 --> 00:54:47,000
然后整屏都是这个边界器窗口的这么一个愉快的想法了

2205
00:54:47,000 --> 00:54:48,000
对

2206
00:54:48,000 --> 00:54:53,000
所以我必须收回自己说 Lawrence 的那个什么期待太高了

2207
00:54:53,000 --> 00:54:57,000
这个实际的实验效果连我都受不了

2208
00:54:57,000 --> 00:55:03,000
所以他有说是因为什么原因实现不了

2209
00:55:03,000 --> 00:55:06,000
是因为这个光学元件的物理限制

2210
00:55:06,000 --> 00:55:08,000
还是说只是因为为了降低

2211
00:55:08,000 --> 00:55:11,000
因为它那个是带在头上是整一体机

2212
00:55:11,000 --> 00:55:13,000
没有一个单独插线的外接的设备

2213
00:55:13,000 --> 00:55:17,000
所以他要考虑这个什么供电啊续航的问题吧

2214
00:55:17,000 --> 00:55:20,000
对我觉得其实就是技术还不成熟

2215
00:55:20,000 --> 00:55:25,000
但是那个视频主要是宣传那个 HoloLens 在一个医院里面的一些用力的

2216
00:55:25,000 --> 00:55:29,000
比如说医生可以拿 HoloLens 直接看骨头断裂的情况

2217
00:55:29,000 --> 00:55:34,000
就可以你可以看到那个屋子中间有一个心脏

2218
00:55:34,000 --> 00:55:35,000
然后你心脏在跳

2219
00:55:35,000 --> 00:55:38,000
然后你可以转着看这个心脏跳动的状况之类的

2220
00:55:38,000 --> 00:55:40,000
所以他没有解释说市场为什么这么窄

2221
00:55:40,000 --> 00:55:42,000
他只是怎么说呢

2222
00:55:42,000 --> 00:55:44,000
可能觉得自己之前吹有点猛了

2223
00:55:44,000 --> 00:55:48,000
所以用这个视频的让大家明白一下

2224
00:55:48,000 --> 00:55:50,000
其实看到的效果只不过是这样

2225
00:55:50,000 --> 00:55:53,000
你们不要那个就是期待太高的感觉

2226
00:55:53,000 --> 00:56:00,000
有一点点 expectation control management 的一个感觉

2227
00:56:00,000 --> 00:56:04,000
我远远现在来做这个又有什么用呢

2228
00:56:04,000 --> 00:56:08,000
他之前自己把那个东西吹得那么好

2229
00:56:08,000 --> 00:56:11,000
当时那个第一次出那个视频的时候

2230
00:56:11,000 --> 00:56:13,000
就是他发了发布了两次嘛

2231
00:56:13,000 --> 00:56:16,000
其实就说感觉这个鼻翼要吹破了

2232
00:56:16,000 --> 00:56:19,000
这个鼻翼画太大对吧

2233
00:56:19,000 --> 00:56:20,000
现在看果仰画太大了

2234
00:56:20,000 --> 00:56:22,000
不过还是好总比没有强嘛

2235
00:56:22,000 --> 00:56:24,000
这个毕竟是第一代产品

2236
00:56:24,000 --> 00:56:27,000
所以让他们迭代两年再说吧

2237
00:56:27,000 --> 00:56:31,000
黑微软的话你们留到 IT 工作里面说

2238
00:56:31,000 --> 00:56:32,000
没有没有我没黑

2239
00:56:32,000 --> 00:56:33,000
经常有人说我黑

2240
00:56:33,000 --> 00:56:35,000
经常有人说我黑软

2241
00:56:35,000 --> 00:56:37,000
其实我给他们还是蛮高兴兴

2242
00:56:37,000 --> 00:56:38,000
我觉得你刚才的话

2243
00:56:38,000 --> 00:56:42,000
你刚才的话在软狗耳朵听起来就已经是非常不少

2244
00:56:42,000 --> 00:56:42,000
就是黑他们

2245
00:56:42,000 --> 00:56:43,000
对

2246
00:56:43,000 --> 00:56:47,000
好吧那那你倒是拿出一个让我们经验的东西来看

2247
00:56:47,000 --> 00:56:49,000
他们会说

2248
00:56:49,000 --> 00:56:51,000
blah blah

2249
00:56:51,000 --> 00:56:52,000
黑科技

2250
00:56:52,000 --> 00:56:52,000
blah blah

2251
00:56:52,000 --> 00:56:54,000
微软做的事

2252
00:56:54,000 --> 00:56:55,000
怎能叫 blah blah

2253
00:56:55,000 --> 00:56:58,000
从来都停留在什么 microsoft research 里面

2254
00:56:58,000 --> 00:56:59,000
不会拿出来的

2255
00:56:59,000 --> 00:57:01,000
那有什么用呢

2256
00:57:01,000 --> 00:57:04,000
不过其实从那个完全

2257
00:57:04,000 --> 00:57:05,000
从那个完全度来讲

2258
00:57:05,000 --> 00:57:06,000
我觉得其实

2259
00:57:06,000 --> 00:57:08,000
这个已经蛮高的了

2260
00:57:08,000 --> 00:57:10,000
就是 HoloLens 一代嘛

2261
00:57:10,000 --> 00:57:14,000
所以其实我还是挺乐观的

2262
00:57:14,000 --> 00:57:16,000
就是到他们在

2263
00:57:16,000 --> 00:57:17,000
就希望他们能够保持

2264
00:57:17,000 --> 00:57:20,000
这个速度往前去迭代好

2265
00:57:20,000 --> 00:57:21,000
OK

2266
00:57:21,000 --> 00:57:22,000
那我们接下来可以进入正题了

2267
00:57:22,000 --> 00:57:25,000
今天的话题是 debug

2268
00:57:25,000 --> 00:57:28,000
用中文说就是除错于调试

2269
00:57:28,000 --> 00:57:32,000
我不知道 Rail 你

2270
00:57:32,000 --> 00:57:34,000
你经常 debug 吗

2271
00:57:34,000 --> 00:57:35,000
或者说你觉得 debug

2272
00:57:35,000 --> 00:57:39,000
你觉得你写代码的时候里面是 debug 时间多

2273
00:57:39,000 --> 00:57:42,000
还是真正写代码的时间多

2274
00:57:42,000 --> 00:57:46,000
还好吧

2275
00:57:46,000 --> 00:57:48,000
我 debug 时间不算多

2276
00:57:48,000 --> 00:57:49,000
对

2277
00:57:49,000 --> 00:57:53,000
可能是两三成的样子

2278
00:57:53,000 --> 00:57:54,000
两三成

2279
00:57:54,000 --> 00:57:57,000
主要是因为我写的东西也不是特别复杂

2280
00:57:57,000 --> 00:57:58,000
就还凑合

2281
00:57:58,000 --> 00:57:59,000
你太谦虚了

2282
00:57:59,000 --> 00:58:01,000
你可以直接说你写的东西是 bug free

2283
00:58:01,000 --> 00:58:04,000
就是什么

2284
00:58:04,000 --> 00:58:08,000
就前两天我在

2285
00:58:08,000 --> 00:58:11,000
一个网站叫什么

2286
00:58:11,000 --> 00:58:13,000
讲什么

2287
00:58:13,000 --> 00:58:15,000
讲白板编程

2288
00:58:15,000 --> 00:58:16,000
讲面试应该是

2289
00:58:16,000 --> 00:58:19,000
他讲说应该怎样去做白板面试

2290
00:58:19,000 --> 00:58:22,000
我们回头会把这个链接放在 show notes 里面

2291
00:58:22,000 --> 00:58:24,000
但是我印象里面比较

2292
00:58:24,000 --> 00:58:26,000
我印象比较深的一句话就是他里面说

2293
00:58:26,000 --> 00:58:27,000
程序员可以分为两种

2294
00:58:27,000 --> 00:58:31,000
一种是会先确认前条件

2295
00:58:31,000 --> 00:58:33,000
中置条件

2296
00:58:33,000 --> 00:58:33,000
边界条件

2297
00:58:33,000 --> 00:58:36,000
以及不变的那一部分

2298
00:58:36,000 --> 00:58:37,000
然后写入正确的代码

2299
00:58:37,000 --> 00:58:41,000
另外一种是先编写代码

2300
00:58:41,000 --> 00:58:43,000
然后通过各种用力

2301
00:58:43,000 --> 00:58:45,000
调试测试

2302
00:58:45,000 --> 00:58:46,000
对程序进行调整

2303
00:58:46,000 --> 00:58:48,000
最后得到似乎正确的代码

2304
00:58:48,000 --> 00:58:49,000
就是可以分

2305
00:58:49,000 --> 00:58:51,000
那不是 TDD 吗

2306
00:58:51,000 --> 00:58:54,000
TDD 是哪一种

2307
00:58:54,000 --> 00:58:55,000
第一种还是第二种

2308
00:58:55,000 --> 00:58:56,000
就是后者

2309
00:58:56,000 --> 00:58:59,000
第二种他说先编写代码

2310
00:58:59,000 --> 00:59:01,000
然后通过用力

2311
00:59:01,000 --> 00:59:03,000
TDD 应该是第一种

2312
00:59:03,000 --> 00:59:06,000
对 TDD 应该是一个一个的确立

2313
00:59:06,000 --> 00:59:10,000
然后他里面说

2314
00:59:10,000 --> 00:59:11,000
他个人估计

2315
00:59:11,000 --> 00:59:15,000
保守估计前者的开发效率

2316
00:59:15,000 --> 00:59:16,000
至少是后者的十倍

2317
00:59:16,000 --> 00:59:18,000
因为前者不需要浪费大量时间

2318
00:59:18,000 --> 00:59:20,000
在编码调试编码

2319
00:59:20,000 --> 00:59:22,000
这个极其耗时的循环上

2320
00:59:22,000 --> 00:59:24,000
我觉得说有运动

2321
00:59:24,000 --> 00:59:25,000
写代码之前

2322
00:59:25,000 --> 00:59:27,000
敲键盘之前先动脑子响

2323
00:59:27,000 --> 00:59:29,000
对

2324
00:59:29,000 --> 00:59:33,000
就包括在一些钢学本上

2325
00:59:33,000 --> 00:59:35,000
的人身上也会发现一个问题

2326
00:59:35,000 --> 00:59:36,000
就是发现一种现象

2327
00:59:36,000 --> 00:59:37,000
就是他认为

2328
00:59:37,000 --> 00:59:39,000
写代码的速度

2329
00:59:39,000 --> 00:59:40,000
跟敲键盘的速度相关

2330
00:59:40,000 --> 00:59:42,000
其实并不是这样

2331
00:59:42,000 --> 00:59:45,000
就我可以举两个例子

2332
00:59:45,000 --> 00:59:50,000
一个是我前上上家公司里面

2333
00:59:50,000 --> 00:59:53,000
一个 60 多岁的程序员

2334
00:59:53,000 --> 00:59:55,000
他可能是从 Cobble 时代

2335
00:59:55,000 --> 00:59:58,000
就写程序

2336
00:59:58,000 --> 00:59:59,000
然后到 60 多岁

2337
00:59:59,000 --> 01:00:02,000
还在做那个高级顾问

2338
01:00:02,000 --> 01:00:03,000
众所周知是德国的

2339
01:00:03,000 --> 01:00:04,000
催修年龄是 67 岁

2340
01:00:04,000 --> 01:00:06,000
所以你 60 岁的高龄

2341
01:00:06,000 --> 01:00:07,000
还在写程序

2342
01:00:07,000 --> 01:00:10,000
然后他和很多德国人一样

2343
01:00:10,000 --> 01:00:12,000
只会用两个指头敲键板

2344
01:00:12,000 --> 01:00:14,000
你很难想象吧

2345
01:00:14,000 --> 01:00:16,000
一个写了 30 年程序的人

2346
01:00:16,000 --> 01:00:17,000
只会用两个指头敲键板

2347
01:00:17,000 --> 01:00:20,000
但他的效率不比任何人慢

2348
01:00:20,000 --> 01:00:23,000
或者说他写出来的编码的

2349
01:00:23,000 --> 01:00:26,000
他写出来的程序的可靠性和效率

2350
01:00:26,000 --> 01:00:27,000
并不比任何人差

2351
01:00:27,000 --> 01:00:30,000
然后反过来有另外一个例子

2352
01:00:30,000 --> 01:00:32,000
就是我上的家公司里面有一个

2353
01:00:32,000 --> 01:00:37,000
不透过他的肤色

2354
01:00:37,000 --> 01:00:39,000
有这么一个朋友

2355
01:00:39,000 --> 01:00:41,000
他经常会说

2356
01:00:41,000 --> 01:00:42,000
每天开会的时候

2357
01:00:42,000 --> 01:00:44,000
他会说我还有一点点就完了

2358
01:00:44,000 --> 01:00:46,000
我 80%已经写完了

2359
01:00:46,000 --> 01:00:47,000
只剩 20%

2360
01:00:47,000 --> 01:00:50,000
只是一些细节需要调整一下

2361
01:00:50,000 --> 01:00:52,000
但是如果你仔细看

2362
01:00:52,000 --> 01:00:54,000
他这个细节的调整

2363
01:00:54,000 --> 01:00:55,000
到底是在干嘛的时候

2364
01:00:55,000 --> 01:00:57,000
他其实在大量的改变自己的代码

2365
01:00:57,000 --> 01:01:00,000
因为他里面有很多东西虽然写得很快

2366
01:01:00,000 --> 01:01:01,000
但根本都是写错了好吗

2367
01:01:01,000 --> 01:01:04,000
所以这所谓的 20%

2368
01:01:04,000 --> 01:01:07,000
其实占用了他整个开发的 80%的时间

2369
01:01:07,000 --> 01:01:09,000
他总觉得自己可能明天就会写完

2370
01:01:09,000 --> 01:01:10,000
但其实明天会发现

2371
01:01:10,000 --> 01:01:12,000
卧靠还需要后天和大后天

2372
01:01:12,000 --> 01:01:15,000
对

2373
01:01:15,000 --> 01:01:16,000
所以我觉得 Rio

2374
01:01:16,000 --> 01:01:18,000
其实你刚才暗示了你是第一种

2375
01:01:18,000 --> 01:01:21,000
好吧

2376
01:01:21,000 --> 01:01:23,000
其实我是

2377
01:01:23,000 --> 01:01:25,000
就起码我希望是第一种

2378
01:01:25,000 --> 01:01:27,000
不知道这是不是真实

2379
01:01:27,000 --> 01:01:27,000
尽量

2380
01:01:27,000 --> 01:01:29,000
就有这么一个

2381
01:01:29,000 --> 01:01:31,000
就刚刚我说写代码

2382
01:01:31,000 --> 01:01:32,000
先弄脑子

2383
01:01:32,000 --> 01:01:34,000
但这个不是说来玩玩

2384
01:01:34,000 --> 01:01:38,000
我看到有很多人写代码的时候

2385
01:01:38,000 --> 01:01:40,000
反正先敲几行再说

2386
01:01:40,000 --> 01:01:41,000
再来想怎么弄个

2387
01:01:41,000 --> 01:01:42,000
怎么改

2388
01:01:42,000 --> 01:01:44,000
其实我看到很多那种

2389
01:01:44,000 --> 01:01:46,000
所谓大神级程序员

2390
01:01:46,000 --> 01:01:48,000
其实他是要先写代码

2391
01:01:48,000 --> 01:01:50,000
他才想好久好久

2392
01:01:50,000 --> 01:01:51,000
跟脑子里面构建一个大框架

2393
01:01:51,000 --> 01:01:53,000
然后步骤怎么样

2394
01:01:53,000 --> 01:01:53,000
有些什么样

2395
01:01:53,000 --> 01:01:54,000
至少要注意点

2396
01:01:54,000 --> 01:01:56,000
他会想得比较清楚

2397
01:01:56,000 --> 01:01:57,000
然后才会动笔

2398
01:01:57,000 --> 01:01:58,000
再动笔

2399
01:01:58,000 --> 01:01:59,000
动键盘

2400
01:01:59,000 --> 01:02:01,000
慢慢慢慢的去敲

2401
01:02:01,000 --> 01:02:02,000
对

2402
01:02:02,000 --> 01:02:05,000
其实这跟写文章差不多

2403
01:02:05,000 --> 01:02:08,000
就是并不是说你要写东西

2404
01:02:08,000 --> 01:02:10,000
就是你要一定要坐在书桌前面

2405
01:02:10,000 --> 01:02:10,000
然后打开稿纸

2406
01:02:10,000 --> 01:02:14,000
就像你要写程序

2407
01:02:14,000 --> 01:02:16,000
并不是一定要先赶紧打开你的 IDE

2408
01:02:16,000 --> 01:02:17,000
然后新建一个项目

2409
01:02:17,000 --> 01:02:21,000
然后写个冥的函数出来

2410
01:02:21,000 --> 01:02:22,000
然后盯着他发呆

2411
01:02:22,000 --> 01:02:23,000
你要想写什么东西

2412
01:02:23,000 --> 01:02:26,000
你先在各种各样的时候去想

2413
01:02:26,000 --> 01:02:26,000
你要写什么东西

2414
01:02:26,000 --> 01:02:28,000
洗澡的时候

2415
01:02:28,000 --> 01:02:28,000
刷牙的时候

2416
01:02:28,000 --> 01:02:29,000
走路的时候

2417
01:02:29,000 --> 01:02:31,000
跟女朋友聊天的时候

2418
01:02:31,000 --> 01:02:34,000
但是最后这种是非常不推荐的

2419
01:02:34,000 --> 01:02:35,000
我吃过苦好了

2420
01:02:35,000 --> 01:02:37,000
在这个时候

2421
01:02:37,000 --> 01:02:40,000
你已经可以再构想你要写什么了

2422
01:02:40,000 --> 01:02:42,000
然后等到你真正有一定把握的时候

2423
01:02:42,000 --> 01:02:43,000
再出来写

2424
01:02:43,000 --> 01:02:44,000
这样要比你直接上来的 PiPiPi

2425
01:02:44,000 --> 01:02:46,000
乔点盘其实效率要高

2426
01:02:46,000 --> 01:02:47,000
我觉得

2427
01:02:47,000 --> 01:02:48,000
没错

2428
01:02:48,000 --> 01:02:49,000
所以以后

2429
01:02:49,000 --> 01:02:50,000
就是如果

2430
01:02:50,000 --> 01:02:51,000
比如说

2431
01:02:51,000 --> 01:02:53,000
我就开一间软件公司

2432
01:02:53,000 --> 01:02:54,000
是吧

2433
01:02:54,000 --> 01:02:55,000
要在那个什么

2434
01:02:55,000 --> 01:02:57,000
除了标配的什么办公桌

2435
01:02:57,000 --> 01:02:58,000
什么椅子之外

2436
01:02:58,000 --> 01:03:00,000
还得做一个冥想室

2437
01:03:00,000 --> 01:03:03,000
就像那个

2438
01:03:03,000 --> 01:03:05,000
4 C 城曾经晒过

2439
01:03:05,000 --> 01:03:06,000
他们公司有那个

2440
01:03:06,000 --> 01:03:07,000
PowerNet 椅子

2441
01:03:07,000 --> 01:03:08,000
你可以躺着

2442
01:03:08,000 --> 01:03:09,000
睡觉的

2443
01:03:09,000 --> 01:03:10,000
睡觉的时候

2444
01:03:10,000 --> 01:03:12,000
你可以想程序吗

2445
01:03:12,000 --> 01:03:13,000
不能啊

2446
01:03:13,000 --> 01:03:14,000
睡着睡着了

2447
01:03:14,000 --> 01:03:16,000
得迷想在那打坐

2448
01:03:16,000 --> 01:03:17,000
那个残忠的那种

2449
01:03:17,000 --> 01:03:18,000
OK

2450
01:03:18,000 --> 01:03:20,000
我相信

2451
01:03:20,000 --> 01:03:22,000
但我是觉得

2452
01:03:22,000 --> 01:03:23,000
至少我写程序

2453
01:03:23,000 --> 01:03:24,000
我写构思程序的时候

2454
01:03:24,000 --> 01:03:26,000
基本上都是在动的时候

2455
01:03:26,000 --> 01:03:27,000
就是身体一定要在

2456
01:03:27,000 --> 01:03:28,000
做什么事情

2457
01:03:28,000 --> 01:03:28,000
比如说开车

2458
01:03:28,000 --> 01:03:30,000
或者是骑自行车

2459
01:03:30,000 --> 01:03:31,000
或者是

2460
01:03:31,000 --> 01:03:33,000
走路之类的

2461
01:03:33,000 --> 01:03:34,000
就躺着

2462
01:03:34,000 --> 01:03:35,000
在一地方静着待着

2463
01:03:35,000 --> 01:03:36,000
我是

2464
01:03:36,000 --> 01:03:38,000
想不好事情

2465
01:03:38,000 --> 01:03:40,000
所以其实

2466
01:03:40,000 --> 01:03:41,000
从这个角度来讲

2467
01:03:41,000 --> 01:03:42,000
我觉得那个什么

2468
01:03:42,000 --> 01:03:44,000
literate programming

2469
01:03:44,000 --> 01:03:45,000
这东西讲的

2470
01:03:45,000 --> 01:03:46,000
文化变成又来了

2471
01:03:46,000 --> 01:03:48,000
挺好的

2472
01:03:48,000 --> 01:03:50,000
就是它可以强迫你

2473
01:03:50,000 --> 01:03:51,000
在写第一行代码之前

2474
01:03:51,000 --> 01:03:52,000
先把这个什么

2475
01:03:52,000 --> 01:03:53,000
前一后果

2476
01:03:53,000 --> 01:03:55,000
背景

2477
01:03:55,000 --> 01:03:55,000
对

2478
01:03:55,000 --> 01:03:56,000
先把这个整体思路

2479
01:03:56,000 --> 01:03:57,000
讲写出来

2480
01:03:57,000 --> 01:03:58,000
然后你再

2481
01:03:58,000 --> 01:03:59,000
顺着一个思路

2482
01:03:59,000 --> 01:04:00,000
写一行代码

2483
01:04:00,000 --> 01:04:00,000
顺着一个思路

2484
01:04:00,000 --> 01:04:01,000
写一行代码这样

2485
01:04:01,000 --> 01:04:02,000
对

2486
01:04:02,000 --> 01:04:05,000
但是呢

2487
01:04:05,000 --> 01:04:06,000
不管怎么说

2488
01:04:06,000 --> 01:04:07,000
或者说

2489
01:04:07,000 --> 01:04:09,000
不管多强悍的程序员

2490
01:04:09,000 --> 01:04:10,000
他写出来的程序

2491
01:04:10,000 --> 01:04:12,000
终究是没有办法

2492
01:04:12,000 --> 01:04:13,000
避免会有 bar

2493
01:04:13,000 --> 01:04:15,000
所以这时候就需要

2494
01:04:15,000 --> 01:04:17,000
我们不妨先来解释一下

2495
01:04:17,000 --> 01:04:19,000
这个 debar 这个词是怎么来的

2496
01:04:19,000 --> 01:04:20,000
就

2497
01:04:20,000 --> 01:04:21,000
其实有一个

2498
01:04:21,000 --> 01:04:23,000
美丽的都市传说

2499
01:04:23,000 --> 01:04:25,000
相信可能大部分听众

2500
01:04:25,000 --> 01:04:26,000
此事也都会

2501
01:04:26,000 --> 01:04:27,000
说出来

2502
01:04:27,000 --> 01:04:27,000
说

2503
01:04:27,000 --> 01:04:29,000
debar 是曾经

2504
01:04:29,000 --> 01:04:31,000
有这么一位

2505
01:04:31,000 --> 01:04:32,000
女程序员

2506
01:04:32,000 --> 01:04:33,000
她的名字叫做

2507
01:04:33,000 --> 01:04:35,000
Grace Hopper

2508
01:04:35,000 --> 01:04:36,000
格里斯霍普

2509
01:04:36,000 --> 01:04:37,000
这么一位

2510
01:04:37,000 --> 01:04:39,000
美国海军准将

2511
01:04:39,000 --> 01:04:42,000
准将程序员

2512
01:04:42,000 --> 01:04:44,000
他曾经在

2513
01:04:44,000 --> 01:04:47,000
1950 年代的时候

2514
01:04:47,000 --> 01:04:48,000
开发

2515
01:04:48,000 --> 01:04:52,000
应该是哈佛的一个

2516
01:04:52,000 --> 01:04:54,000
大型计算机项目的时候

2517
01:04:54,000 --> 01:04:57,000
去检测一个计算机的故障

2518
01:04:57,000 --> 01:04:58,000
然后他发现

2519
01:04:58,000 --> 01:05:00,000
故障的原因是

2520
01:05:00,000 --> 01:05:02,000
一个鹅子

2521
01:05:02,000 --> 01:05:03,000
一只鹅子

2522
01:05:03,000 --> 01:05:04,000
卡在一个

2523
01:05:04,000 --> 01:05:05,000
计电器上面

2524
01:05:05,000 --> 01:05:07,000
然后这个计电器

2525
01:05:07,000 --> 01:05:08,000
没有办法正确的

2526
01:05:08,000 --> 01:05:09,000
被放下来

2527
01:05:09,000 --> 01:05:11,000
就是接触不良了

2528
01:05:11,000 --> 01:05:12,000
因此导致了

2529
01:05:12,000 --> 01:05:14,000
整个计算机不工作

2530
01:05:14,000 --> 01:05:16,000
然后他把这个鹅子取出来

2531
01:05:16,000 --> 01:05:17,000
然后把这个鹅子

2532
01:05:17,000 --> 01:05:18,000
粘在了那一天的

2533
01:05:18,000 --> 01:05:20,000
这个故障记录上

2534
01:05:20,000 --> 01:05:20,000
然后写说

2535
01:05:20,000 --> 01:05:21,000
这只 Moth

2536
01:05:21,000 --> 01:05:23,000
导致了整个机器故障

2537
01:05:23,000 --> 01:05:25,000
然后我 literally

2538
01:05:25,000 --> 01:05:26,000
我 debug 了

2539
01:05:26,000 --> 01:05:26,000
对

2540
01:05:26,000 --> 01:05:27,000
这是这个 debug

2541
01:05:27,000 --> 01:05:28,000
这个词的由来

2542
01:05:28,000 --> 01:05:29,000
但

2543
01:05:29,000 --> 01:05:31,000
就真正的出重

2544
01:05:31,000 --> 01:05:32,000
对

2545
01:05:32,000 --> 01:05:34,000
但实际上呢

2546
01:05:34,000 --> 01:05:34,000
虽然

2547
01:05:34,000 --> 01:05:36,000
Grace Hopper

2548
01:05:36,000 --> 01:05:38,000
使用了 debug 这个词

2549
01:05:38,000 --> 01:05:39,000
debug 这个词

2550
01:05:39,000 --> 01:05:40,000
作为

2551
01:05:40,000 --> 01:05:42,000
作为排除故障的指代

2552
01:05:42,000 --> 01:05:45,000
早在 1940 年代左右

2553
01:05:45,000 --> 01:05:46,000
就已经在

2554
01:05:46,000 --> 01:05:47,000
其他领域

2555
01:05:47,000 --> 01:05:49,000
就是尤其是电子和机械领域

2556
01:05:49,000 --> 01:05:49,000
就已经

2557
01:05:49,000 --> 01:05:51,000
其实已经被人使用过

2558
01:05:51,000 --> 01:05:51,000
所以

2559
01:05:51,000 --> 01:05:52,000
debug 这个词

2560
01:05:52,000 --> 01:05:53,000
其实并不是

2561
01:05:53,000 --> 01:05:57,000
Grace Hopper 的发明

2562
01:05:57,000 --> 01:05:58,000
然后

2563
01:05:58,000 --> 01:05:59,000
debug 这个词

2564
01:05:59,000 --> 01:06:00,000
真正成为一个

2565
01:06:00,000 --> 01:06:03,000
排除错误的一个同义词

2566
01:06:03,000 --> 01:06:06,000
也是一直要到 1960 年代左右

2567
01:06:06,000 --> 01:06:09,000
才真正的在计算机械推广开来

2568
01:06:09,000 --> 01:06:09,000
就是

2569
01:06:09,000 --> 01:06:11,000
我记得好像是

2570
01:06:11,000 --> 01:06:12,000
Wikipedia 那种文章说

2571
01:06:12,000 --> 01:06:14,000
一直到 65 年

2572
01:06:14,000 --> 01:06:15,000
还是哪一年

2573
01:06:15,000 --> 01:06:18,000
才有一篇论文的第一页

2574
01:06:18,000 --> 01:06:20,000
直接使用了 debug 这个词

2575
01:06:20,000 --> 01:06:21,000
而且没有注视说

2576
01:06:21,000 --> 01:06:22,000
没有加引号

2577
01:06:22,000 --> 01:06:24,000
也没有注视这个词

2578
01:06:24,000 --> 01:06:24,000
到底是什么意思

2579
01:06:24,000 --> 01:06:25,000
所以直到这个时候

2580
01:06:25,000 --> 01:06:27,000
debug 才真正的进入了

2581
01:06:27,000 --> 01:06:28,000
计算机械界的主要

2582
01:06:28,000 --> 01:06:31,000
OK

2583
01:06:31,000 --> 01:06:32,000
我们又考虑一下古

2584
01:06:32,000 --> 01:06:34,000
对

2585
01:06:34,000 --> 01:06:36,000
不如说一说

2586
01:06:36,000 --> 01:06:39,000
你遇到过的比较有意思的吧

2587
01:06:39,000 --> 01:06:40,000
或者说

2588
01:06:40,000 --> 01:06:43,000
你遇到过什么

2589
01:06:43,000 --> 01:06:44,000
比较困扰你

2590
01:06:44,000 --> 01:06:45,000
或者比较有意思的吧

2591
01:06:45,000 --> 01:06:49,000
就上次我们那个串台啊

2592
01:06:49,000 --> 01:06:50,000
对

2593
01:06:50,000 --> 01:06:52,000
IPN 串台吧

2594
01:06:52,000 --> 01:06:53,000
也是一个比较有意思的吧

2595
01:06:53,000 --> 01:06:54,000
对

2596
01:06:54,000 --> 01:06:54,000
我记得

2597
01:06:54,000 --> 01:06:56,000
很多人猜测过

2598
01:06:56,000 --> 01:06:58,000
为什么我们要换很多

2599
01:06:58,000 --> 01:07:00,000
换了很多次

2600
01:07:00,000 --> 01:07:02,000
podcast 的 server

2601
01:07:02,000 --> 01:07:04,000
然后为什么要折腾来折腾去

2602
01:07:04,000 --> 01:07:06,000
有时候支持这个 podcast 的勾端

2603
01:07:06,000 --> 01:07:08,000
有时候不支持那个 podcast 的勾端

2604
01:07:08,000 --> 01:07:11,000
其实都是我们在这种解决这个 bug

2605
01:07:11,000 --> 01:07:13,000
不明白为什么会串台

2606
01:07:13,000 --> 01:07:15,000
对

2607
01:07:15,000 --> 01:07:17,000
然后为什么不能解决这个 bug

2608
01:07:17,000 --> 01:07:19,000
主要是因为我们没有办法重现它

2609
01:07:19,000 --> 01:07:21,000
这个是一个很重要的事情

2610
01:07:21,000 --> 01:07:24,000
就是说你要去除一只虫

2611
01:07:24,000 --> 01:07:26,000
首先你得看到这只虫

2612
01:07:26,000 --> 01:07:26,000
对吧

2613
01:07:26,000 --> 01:07:28,000
你得找到这个虫在哪

2614
01:07:28,000 --> 01:07:29,000
是怎么发生的

2615
01:07:29,000 --> 01:07:31,000
一个生成的机制是怎么样子

2616
01:07:31,000 --> 01:07:33,000
什么条件下会触发它

2617
01:07:33,000 --> 01:07:33,000
对吧

2618
01:07:33,000 --> 01:07:35,000
然后凡是那些

2619
01:07:35,000 --> 01:07:38,000
你想找找不着

2620
01:07:38,000 --> 01:07:39,000
不知道怎么触发

2621
01:07:39,000 --> 01:07:40,000
不知道什么时候出现

2622
01:07:40,000 --> 01:07:42,000
你没办法重现那样的东西

2623
01:07:42,000 --> 01:07:43,000
我们今晚叫做 phantombug

2624
01:07:43,000 --> 01:07:43,000
对吧

2625
01:07:43,000 --> 01:07:44,000
就是隐虫

2626
01:07:44,000 --> 01:07:46,000
隐虫

2627
01:07:46,000 --> 01:07:48,000
上次那个串台的 bug

2628
01:07:48,000 --> 01:07:50,000
之所以那么久都没有找到原因

2629
01:07:50,000 --> 01:07:52,000
一个最主要的问题就是

2630
01:07:52,000 --> 01:07:55,000
我们两个都没有办法重

2631
01:07:55,000 --> 01:07:56,000
不应该是我们三

2632
01:07:56,000 --> 01:07:57,000
都没办法重现它

2633
01:07:57,000 --> 01:08:01,000
因为这个东西是要在特定的

2634
01:08:01,000 --> 01:08:03,000
运营商的网络里面

2635
01:08:03,000 --> 01:08:05,000
就是长城宽带

2636
01:08:05,000 --> 01:08:07,000
才会出现

2637
01:08:07,000 --> 01:08:09,000
然后偶尔在某些

2638
01:08:09,000 --> 01:08:11,000
这个什么

2639
01:08:11,000 --> 01:08:12,000
移动

2640
01:08:12,000 --> 01:08:14,000
电信的运营商里面

2641
01:08:14,000 --> 01:08:15,000
偶尔也会出现

2642
01:08:15,000 --> 01:08:16,000
但是好像

2643
01:08:16,000 --> 01:08:17,000
这个就是跟那个电信

2644
01:08:17,000 --> 01:08:18,000
或者这个

2645
01:08:18,000 --> 01:08:21,000
他们的网络的结构有点关系的

2646
01:08:21,000 --> 01:08:23,000
因为它似乎不是一个全国统一的

2647
01:08:23,000 --> 01:08:25,000
一个结构

2648
01:08:25,000 --> 01:08:26,000
所以就比较麻烦了

2649
01:08:26,000 --> 01:08:27,000
没错

2650
01:08:27,000 --> 01:08:30,000
有人定义过说

2651
01:08:30,000 --> 01:08:31,000
debug 的过程

2652
01:08:31,000 --> 01:08:32,000
其实就是

2653
01:08:32,000 --> 01:08:35,000
is a process of confirming

2654
01:08:35,000 --> 01:08:36,000
the many things

2655
01:08:36,000 --> 01:08:38,000
that you believe are true

2656
01:08:38,000 --> 01:08:41,000
until you find one which is not true

2657
01:08:41,000 --> 01:08:43,000
我们首先有两个障碍

2658
01:08:43,000 --> 01:08:43,000
第一个是

2659
01:08:43,000 --> 01:08:44,000
我们

2660
01:08:44,000 --> 01:08:48,000
我们 believe true 的东西

2661
01:08:48,000 --> 01:08:49,000
实在是太多了

2662
01:08:49,000 --> 01:08:51,000
另外第二个就是

2663
01:08:51,000 --> 01:08:55,000
我们没有办法通过一次

2664
01:08:55,000 --> 01:08:57,000
视力就决定说

2665
01:08:57,000 --> 01:08:59,000
这个东西肯定是 true

2666
01:08:59,000 --> 01:09:01,000
就我们自己都下载过了

2667
01:09:01,000 --> 01:09:02,000
无数次的 podcast

2668
01:09:02,000 --> 01:09:04,000
但是没有一次是可以

2669
01:09:04,000 --> 01:09:05,000
呃

2670
01:09:05,000 --> 01:09:06,000
重现这个 bug

2671
01:09:06,000 --> 01:09:06,000
因为

2672
01:09:06,000 --> 01:09:07,000
对

2673
01:09:07,000 --> 01:09:08,000
而且

2674
01:09:08,000 --> 01:09:08,000
对

2675
01:09:08,000 --> 01:09:10,000
而且即便你是用长生困带

2676
01:09:10,000 --> 01:09:12,000
你也不是每次都会遇到这个 bug

2677
01:09:12,000 --> 01:09:13,000
这是最让人头等一个

2678
01:09:13,000 --> 01:09:15,000
没错

2679
01:09:15,000 --> 01:09:16,000
yeah

2680
01:09:16,000 --> 01:09:17,000
嗯

2681
01:09:17,000 --> 01:09:19,000
我来说一个

2682
01:09:19,000 --> 01:09:21,000
我遇到过一个比较痛苦的 bug

2683
01:09:21,000 --> 01:09:22,000
而且

2684
01:09:22,000 --> 01:09:23,000
OK

2685
01:09:23,000 --> 01:09:24,000
很遗憾的是

2686
01:09:24,000 --> 01:09:25,000
这个 bug

2687
01:09:25,000 --> 01:09:27,000
直到今天我都没有解决它

2688
01:09:27,000 --> 01:09:29,000
我就离职了

2689
01:09:29,000 --> 01:09:30,000
呃

2690
01:09:30,000 --> 01:09:32,000
来说一下

2691
01:09:32,000 --> 01:09:33,000
这是我心头

2692
01:09:33,000 --> 01:09:34,000
心里的一个

2693
01:09:34,000 --> 01:09:35,000
一个一个痛

2694
01:09:35,000 --> 01:09:36,000
嗯

2695
01:09:36,000 --> 01:09:39,000
我的上一家公司是做博彩的

2696
01:09:40,000 --> 01:09:41,000
嗯

2697
01:09:41,000 --> 01:09:44,000
不用说这么高雅

2698
01:09:44,000 --> 01:09:45,000
就是赌球吧

2699
01:09:45,000 --> 01:09:46,000
对

2700
01:09:46,000 --> 01:09:47,000
是赌球的

2701
01:09:47,000 --> 01:09:48,000
然后赌球的公司比较重视

2702
01:09:48,000 --> 01:09:50,000
你的一件事情就是

2703
01:09:50,000 --> 01:09:51,000
客户的

2704
01:09:51,000 --> 01:09:53,000
呃

2705
01:09:53,000 --> 01:09:54,000
就怎么说呢

2706
01:09:54,000 --> 01:09:56,000
就是客户会把钱存在我们公司的网站上

2707
01:09:56,000 --> 01:09:58,000
呃

2708
01:09:58,000 --> 01:09:58,000
呃

2709
01:09:58,000 --> 01:10:00,000
但是

2710
01:10:00,000 --> 01:10:01,000
有时候

2711
01:10:01,000 --> 01:10:03,000
有一些使用

2712
01:10:03,000 --> 01:10:04,000
iOS 设备的

2713
01:10:04,000 --> 01:10:06,000
Chrome 用户

2714
01:10:06,000 --> 01:10:09,000
就是如果一个用户使用 iOS 上面的 Chrome

2715
01:10:09,000 --> 01:10:11,000
访问我们公司的网站

2716
01:10:11,000 --> 01:10:11,000
嗯

2717
01:10:11,000 --> 01:10:13,000
然后登陆我们公司的服务器

2718
01:10:13,000 --> 01:10:16,000
大概有呃

2719
01:10:16,000 --> 01:10:20,000
万分之一到十万分之一的概率

2720
01:10:20,000 --> 01:10:22,000
他会看到另外一个人的账户

2721
01:10:22,000 --> 01:10:23,000
啊

2722
01:10:23,000 --> 01:10:27,000
这是非常非常非常非常恐怖的一件事情

2723
01:10:27,000 --> 01:10:27,000
不是吗

2724
01:10:27,000 --> 01:10:30,000
就你你登陆了你自己的账号

2725
01:10:30,000 --> 01:10:32,000
结果看到另外一个账号

2726
01:10:32,000 --> 01:10:35,000
此时你就会难道你心里不会产生一丝恐慌

2727
01:10:35,000 --> 01:10:38,000
就是沃康的我的账户不是也被别人用了吗

2728
01:10:38,000 --> 01:10:39,000
然后

2729
01:10:39,000 --> 01:10:40,000
对啊

2730
01:10:40,000 --> 01:10:40,000
对啊

2731
01:10:40,000 --> 01:10:41,000
还里面有钱

2732
01:10:41,000 --> 01:10:43,000
对而且里面有钱

2733
01:10:43,000 --> 01:10:45,000
而且而且有些人是

2734
01:10:45,000 --> 01:10:45,000
突然你登陆

2735
01:10:45,000 --> 01:10:47,000
哪天都换了人家的银行

2736
01:10:47,000 --> 01:10:47,000
哎

2737
01:10:47,000 --> 01:10:48,000
这好像银行也经常出现

2738
01:10:48,000 --> 01:10:51,000
说什么去那个 ATM 机取钱

2739
01:10:51,000 --> 01:10:51,000
一看操

2740
01:10:51,000 --> 01:10:54,000
你去看存款后面有八个零

2741
01:10:54,000 --> 01:10:55,000
对

2742
01:10:55,000 --> 01:10:56,000
赶紧全都存出来

2743
01:10:56,000 --> 01:10:56,000
对吧

2744
01:10:56,000 --> 01:10:57,000
赶紧全都取出来

2745
01:10:57,000 --> 01:11:00,000
这是非常恐怖的一个网站

2746
01:11:00,000 --> 01:11:00,000
然后

2747
01:11:00,000 --> 01:11:02,000
但是

2748
01:11:02,000 --> 01:11:07,000
我其实遇到的跟 IPN 创台问题一样的困境

2749
01:11:07,000 --> 01:11:09,000
就是我自己没有办法重现这个网站

2750
01:11:09,000 --> 01:11:09,000
只是有

2751
01:11:09,000 --> 01:11:10,000
大概

2752
01:11:10,000 --> 01:11:12,000
呃

2753
01:11:12,000 --> 01:11:15,000
四到五个比较有良知的用户

2754
01:11:15,000 --> 01:11:15,000
呃

2755
01:11:15,000 --> 01:11:16,000
遇到这种情况

2756
01:11:16,000 --> 01:11:17,000
立刻截了图

2757
01:11:17,000 --> 01:11:18,000
然后

2758
01:11:18,000 --> 01:11:19,000
退出那个账户

2759
01:11:19,000 --> 01:11:20,000
然后把截图发给我们

2760
01:11:20,000 --> 01:11:20,000
说

2761
01:11:20,000 --> 01:11:21,000
有这么一个

2762
01:11:21,000 --> 01:11:23,000
有这么一个 accent 在

2763
01:11:23,000 --> 01:11:25,000
然后第一件事情出现的时候

2764
01:11:25,000 --> 01:11:26,000
呃

2765
01:11:26,000 --> 01:11:28,000
基本上就已经鸡飞狗跳了

2766
01:11:28,000 --> 01:11:29,000
然后后面又出现了三次

2767
01:11:29,000 --> 01:11:30,000
然后

2768
01:11:30,000 --> 01:11:33,000
大概有那么四五个人

2769
01:11:33,000 --> 01:11:35,000
连续不断的去尝试

2770
01:11:35,000 --> 01:11:36,000
重现这个网站

2771
01:11:36,000 --> 01:11:37,000
没有做到

2772
01:11:37,000 --> 01:11:41,000
然后又开始尝试着分析这些人的账户

2773
01:11:41,000 --> 01:11:42,000
呃

2774
01:11:42,000 --> 01:11:44,000
他们的登陆过程有什么异常之处

2775
01:11:44,000 --> 01:11:45,000
也找不到

2776
01:11:45,000 --> 01:11:46,000
而且

2777
01:11:46,000 --> 01:11:46,000
OK

2778
01:11:46,000 --> 01:11:48,000
而且比较悲惨的是

2779
01:11:48,000 --> 01:11:49,000
这些人一旦

2780
01:11:49,000 --> 01:11:51,000
把这个 bug 抱进来

2781
01:11:51,000 --> 01:11:53,000
我们就必须立刻先把他的公司

2782
01:11:53,000 --> 01:11:55,000
先把他的账户给封了

2783
01:11:55,000 --> 01:11:55,000
因为

2784
01:11:55,000 --> 01:11:57,000
比安全的话

2785
01:11:57,000 --> 01:11:58,000
对

2786
01:11:58,000 --> 01:12:00,000
就说他又再一次登陆到同一掌握

2787
01:12:00,000 --> 01:12:01,000
然后

2788
01:12:01,000 --> 01:12:04,000
一个可能的猜测是

2789
01:12:04,000 --> 01:12:05,000
这个 bug 是由

2790
01:12:05,000 --> 01:12:05,000
呃

2791
01:12:05,000 --> 01:12:08,000
我们的 session replication server 引起的

2792
01:12:08,000 --> 01:12:08,000
因为

2793
01:12:08,000 --> 01:12:10,000
服务器是一个集群嘛

2794
01:12:10,000 --> 01:12:11,000
呃

2795
01:12:11,000 --> 01:12:13,000
你要在这个服务器上登陆

2796
01:12:13,000 --> 01:12:16,000
然后你的 session 信息需要被

2797
01:12:16,000 --> 01:12:17,000
复制到另外一个服务器上的话

2798
01:12:17,000 --> 01:12:18,000
需要一个

2799
01:12:18,000 --> 01:12:20,000
专门的 dedicated session

2800
01:12:20,000 --> 01:12:22,000
session replication service

2801
01:12:22,000 --> 01:12:25,000
然后那个 service 使用了一个比较老旧的

2802
01:12:25,000 --> 01:12:26,000
呃

2803
01:12:26,000 --> 01:12:27,000
那个酷叫什么

2804
01:12:27,000 --> 01:12:30,000
一直想起来的

2805
01:12:30,000 --> 01:12:31,000
是一个 java 的 session replication

2806
01:12:31,000 --> 01:12:34,000
一个 java 的 in-memory database 的酷

2807
01:12:34,000 --> 01:12:35,000
然后

2808
01:12:35,000 --> 01:12:36,000
我们回忆是这个酷有问题

2809
01:12:36,000 --> 01:12:38,000
然后专门请了这个酷的

2810
01:12:38,000 --> 01:12:39,000
德国的

2811
01:12:39,000 --> 01:12:42,000
这个酷的公司的德国分部的人来排查

2812
01:12:42,000 --> 01:12:43,000
也没弄出来

2813
01:12:43,000 --> 01:12:45,000
然后又把

2814
01:12:45,000 --> 01:12:46,000
然后又在一个

2815
01:12:46,000 --> 01:12:47,000
呃

2816
01:12:47,000 --> 01:12:49,000
用户爆这个 bug 的时候

2817
01:12:49,000 --> 01:12:51,000
把整个 server 的那个 heap dump

2818
01:12:51,000 --> 01:12:52,000
弄下来

2819
01:12:52,000 --> 01:12:53,000
然后开始分析

2820
01:12:53,000 --> 01:12:54,000
嗯

2821
01:12:54,000 --> 01:12:55,000
也没分析出来

2822
01:12:55,000 --> 01:12:58,000
最后实在实在实在实在没有办法

2823
01:12:58,000 --> 01:12:59,000
我出了一个 soul 主意

2824
01:12:59,000 --> 01:13:00,000
就是呃

2825
01:13:00,000 --> 01:13:03,000
秀探那个用户的浏览器 agent

2826
01:13:03,000 --> 01:13:06,000
如果发现他是在 iOS 上使用 chrome

2827
01:13:06,000 --> 01:13:07,000
就

2828
01:13:07,000 --> 01:13:09,000
不让他用我们的网站说

2829
01:13:09,000 --> 01:13:10,000
请你使用 safari

2830
01:13:10,000 --> 01:13:12,000
因为 safari 没有这个问题

2831
01:13:12,000 --> 01:13:13,000
呃

2832
01:13:13,000 --> 01:13:15,000
所以 safari 用户没有出现过这个问题

2833
01:13:15,000 --> 01:13:16,000
只有 iOS

2834
01:13:16,000 --> 01:13:19,000
就是 chrome 和 iOS 有这么一个问题

2835
01:13:19,000 --> 01:13:20,000
对

2836
01:13:20,000 --> 01:13:21,000
chrome 上的

2837
01:13:21,000 --> 01:13:23,000
呃 iOS 上 chrome 有这么一个问题

2838
01:13:23,000 --> 01:13:25,000
所以问题也有可能是会在 chrome 上面

2839
01:13:25,000 --> 01:13:25,000
对吧

2840
01:13:25,000 --> 01:13:26,000
但

2841
01:13:26,000 --> 01:13:29,000
对你不知道

2842
01:13:29,000 --> 01:13:30,000
你没法测试

2843
01:13:30,000 --> 01:13:31,000
我没有办法解释

2844
01:13:31,000 --> 01:13:31,000
对

2845
01:13:31,000 --> 01:13:35,000
就是一直困扰到我今天的一个一个 bug

2846
01:13:35,000 --> 01:13:38,000
就不是连接层的问题吗

2847
01:13:38,000 --> 01:13:39,000
我不知道啊

2848
01:13:39,000 --> 01:13:41,000
对

2849
01:13:41,000 --> 01:13:44,000
这个是没有办法去确切的回答的问题

2850
01:13:44,000 --> 01:13:44,000
我不知道啊

2851
01:13:44,000 --> 01:13:45,000
对

2852
01:13:45,000 --> 01:13:46,000
而且怎么说呢

2853
01:13:46,000 --> 01:13:50,000
就是其实大部分 bug 都是你搜一搜就可以搜到的对吧

2854
01:13:50,000 --> 01:13:51,000
就再怎么隐秘的 bug

2855
01:13:51,000 --> 01:13:52,000
你

2856
01:13:52,000 --> 01:13:53,000
你很

2857
01:13:53,000 --> 01:13:55,000
很少有可能你是第一个碰到他的人

2858
01:13:55,000 --> 01:14:01,000
但是我搜一下从没有看到过任何一个人有类似的这么一个问题

2859
01:14:01,000 --> 01:14:02,000
就

2860
01:14:02,000 --> 01:14:03,000
嗯

2861
01:14:03,000 --> 01:14:06,000
这实在是太非常非常伤感的人感

2862
01:14:06,000 --> 01:14:10,000
所以到现在为止你也没有解决他也不知道为什么

2863
01:14:10,000 --> 01:14:12,000
没有解决没有不知道为什么

2864
01:14:12,000 --> 01:14:13,000
然后到现在为止这个网站

2865
01:14:13,000 --> 01:14:16,000
这个公司的网站还是不允许使用 chrome

2866
01:14:16,000 --> 01:14:17,000
呃

2867
01:14:17,000 --> 01:14:19,000
iOS 和 chrome 都录

2868
01:14:19,000 --> 01:14:21,000
我觉得时间一九

2869
01:14:21,000 --> 01:14:22,000
可能过上三五年

2870
01:14:22,000 --> 01:14:24,000
如果没有人去看文档的话

2871
01:14:24,000 --> 01:14:25,000
没有人会

2872
01:14:25,000 --> 01:14:27,000
没有人会知道为什么要这样做

2873
01:14:27,000 --> 01:14:30,000
为什么要单单要吧

2874
01:14:30,000 --> 01:14:32,000
iOS 和 chrome 都被 block 掉

2875
01:14:32,000 --> 01:14:35,000
好吧

2876
01:14:35,000 --> 01:14:37,000
哇

2877
01:14:37,000 --> 01:14:38,000
the greatest mysteries

2878
01:14:38,000 --> 01:14:41,000
这是这是我人生最悲伤的一个吧

2879
01:14:41,000 --> 01:14:44,000
然后

2880
01:14:44,000 --> 01:14:45,000
这个呢

2881
01:14:45,000 --> 01:14:46,000
链条太长了

2882
01:14:46,000 --> 01:14:47,000
你确实很难去

2883
01:14:47,000 --> 01:14:49,000
而且这个样板又不多

2884
01:14:49,000 --> 01:14:51,000
只有三例是吧

2885
01:14:51,000 --> 01:14:51,000
对

2886
01:14:51,000 --> 01:14:54,000
就三到四个用户受到影响了

2887
01:14:54,000 --> 01:14:55,000
对啊

2888
01:14:55,000 --> 01:14:56,000
你这个时候

2889
01:14:56,000 --> 01:14:57,000
或者说我们知道了只有四个

2890
01:14:57,000 --> 01:15:00,000
也很有可能什么一个宇宙

2891
01:15:00,000 --> 01:15:02,000
是先打到你们那个服务器上

2892
01:15:02,000 --> 01:15:04,000
翻转了一个内存里面的一个比特位

2893
01:15:04,000 --> 01:15:06,000
然后导致这个 session

2894
01:15:06,000 --> 01:15:08,000
复制的过程中出现了错误

2895
01:15:08,000 --> 01:15:09,000
你也很难说的

2896
01:15:09,000 --> 01:15:10,000
是

2897
01:15:10,000 --> 01:15:11,000
也许对

2898
01:15:11,000 --> 01:15:14,000
最后发现 bug 出在太阳黑子上面

2899
01:15:14,000 --> 01:15:16,000
我能把它怎么样

2900
01:15:16,000 --> 01:15:19,000
好吧

2901
01:15:19,000 --> 01:15:21,000
然后我在准备这期节目的时候

2902
01:15:21,000 --> 01:15:22,000
专门去搜一下

2903
01:15:22,000 --> 01:15:26,000
有哪些最奇怪或者最有趣的 bug

2904
01:15:26,000 --> 01:15:28,000
Kura 上面有这样一个问题

2905
01:15:28,000 --> 01:15:31,000
就是 what's the hardest bug you have ever debugged

2906
01:15:31,000 --> 01:15:33,000
然后排名第一的答案是

2907
01:15:33,000 --> 01:15:35,000
一个在

2908
01:15:35,000 --> 01:15:36,000
一个给索尼

2909
01:15:36,000 --> 01:15:38,000
第一代索尼开发游戏的一个人

2910
01:15:38,000 --> 01:15:40,000
他遇到了这么一个 bug

2911
01:15:40,000 --> 01:15:40,000
就是

2912
01:15:40,000 --> 01:15:43,000
这个游戏

2913
01:15:43,000 --> 01:15:45,000
在你储存的时候

2914
01:15:45,000 --> 01:15:54,000
有非常小的几率会让你那个 ps 的存储卡上面的数据

2915
01:15:54,000 --> 01:15:55,000
呃

2916
01:15:55,000 --> 01:15:57,000
被被损坏

2917
01:15:57,000 --> 01:16:00,000
就是你存这个游戏的盘的时候

2918
01:16:00,000 --> 01:16:03,000
有非常小的概率会导致你那个 memory card

2919
01:16:03,000 --> 01:16:06,000
memory stick 上面所有的存档资料都消失掉

2920
01:16:06,000 --> 01:16:07,000
对

2921
01:16:07,000 --> 01:16:08,000
对

2922
01:16:08,000 --> 01:16:09,000
对

2923
01:16:09,000 --> 01:16:10,000
那个年纪比较小的

2924
01:16:10,000 --> 01:16:11,000
呃

2925
01:16:11,000 --> 01:16:13,000
听众们可能不知道我在说什么

2926
01:16:13,000 --> 01:16:17,000
就是早期的 playstation 上面是有这么一个小小的

2927
01:16:17,000 --> 01:16:19,000
小 USB 插盘的呃

2928
01:16:19,000 --> 01:16:22,000
USB 盘的这么一个东西呃

2929
01:16:22,000 --> 01:16:23,000
呃叫做 memory stick

2930
01:16:23,000 --> 01:16:26,000
你把它插进 ps

2931
01:16:26,000 --> 01:16:28,000
索尼自家的 U 盘接口

2932
01:16:28,000 --> 01:16:31,000
而不是 U 盘是那个 SD 卡的型号的接口

2933
01:16:31,000 --> 01:16:31,000
对

2934
01:16:31,000 --> 01:16:35,000
然后你把它插到你的 playstation 上面

2935
01:16:35,000 --> 01:16:37,000
才可以把你的游戏存盘

2936
01:16:37,000 --> 01:16:40,000
然后这个存盘文件是你可以自己带在身上

2937
01:16:40,000 --> 01:16:43,000
然后这个游戏有可能把这个存盘

2938
01:16:43,000 --> 01:16:44,000
这整个盘给毁掉

2939
01:16:44,000 --> 01:16:46,000
也就意味着你不管玩什么游戏

2940
01:16:46,000 --> 01:16:48,000
你所有存盘文件都不见了

2941
01:16:48,000 --> 01:16:49,000
这是很恐怖的一件事

2942
01:16:49,000 --> 01:16:52,000
然后他们的呃

2943
01:16:52,000 --> 01:16:56,000
随着这个 deadline 逐步逼近

2944
01:16:56,000 --> 01:16:58,000
他们的程序员非常恐慌

2945
01:16:58,000 --> 01:17:01,000
因为那个时候的 playstation 是没有 playstationnetwork

2946
01:17:01,000 --> 01:17:01,000
这种东西的

2947
01:17:01,000 --> 01:17:03,000
就是你最终压了盘

2948
01:17:03,000 --> 01:17:04,000
然后这个盘出去

2949
01:17:04,000 --> 01:17:05,000
所有人玩如果有 bug

2950
01:17:05,000 --> 01:17:08,000
那是没有办法通过在线升级来

2951
01:17:08,000 --> 01:17:09,000
来解决这个 bug

2952
01:17:09,000 --> 01:17:11,000
然后他们恐慌

2953
01:17:11,000 --> 01:17:12,000
非常恐慌

2954
01:17:12,000 --> 01:17:14,000
然后就开始一点点排出错误

2955
01:17:14,000 --> 01:17:16,000
最后他们把游戏精简到了

2956
01:17:16,000 --> 01:17:18,000
就是几乎什么都不干

2957
01:17:18,000 --> 01:17:20,000
就是唯一的功能就是

2958
01:17:20,000 --> 01:17:22,000
登陆游戏

2959
01:17:22,000 --> 01:17:24,000
然后存盘

2960
01:17:24,000 --> 01:17:26,000
即便在这种情况之下

2961
01:17:26,000 --> 01:17:28,000
还是有一定的几率会有

2962
01:17:28,000 --> 01:17:30,000
会可能损坏掉这个记忆卡

2963
01:17:30,000 --> 01:17:32,000
然后他们就疯了

2964
01:17:32,000 --> 01:17:37,000
直到有一天

2965
01:17:37,000 --> 01:17:40,000
他发现一个人

2966
01:17:40,000 --> 01:17:41,000
就是他们那个美工

2967
01:17:41,000 --> 01:17:42,000
在

2968
01:17:42,000 --> 01:17:46,000
他当时比较生气

2969
01:17:46,000 --> 01:17:47,000
然后他可能

2970
01:17:47,000 --> 01:17:48,000
训斥了那个美工

2971
01:17:48,000 --> 01:17:49,000
然后那个美工比较

2972
01:17:49,000 --> 01:17:52,000
Nervous 的去摆弄手柄的时候

2973
01:17:52,000 --> 01:17:54,000
游戏正在存盘

2974
01:17:54,000 --> 01:17:57,000
然后此时记忆卡被 corrupt 掉了

2975
01:17:57,000 --> 01:17:58,000
然后他说什么

2976
01:17:58,000 --> 01:18:00,000
你 do it again

2977
01:18:00,000 --> 01:18:02,000
然后就是他们发现

2978
01:18:02,000 --> 01:18:03,000
如果你在存盘的时候

2979
01:18:03,000 --> 01:18:04,000
下意识的

2980
01:18:04,000 --> 01:18:06,000
或者说无意识的摆弄了那个手柄

2981
01:18:06,000 --> 01:18:10,000
你的记忆卡就会被抹除掉

2982
01:18:10,000 --> 01:18:12,000
最后他们发现这个

2983
01:18:12,000 --> 01:18:14,000
这个故障是来自于

2984
01:18:14,000 --> 01:18:17,000
怎么说呢

2985
01:18:17,000 --> 01:18:18,000
就是他们的

2986
01:18:18,000 --> 01:18:21,000
他们的游戏在

2987
01:18:21,000 --> 01:18:23,000
他们游戏在运行的时候

2988
01:18:23,000 --> 01:18:27,000
会把 PS 主机上面的一个

2989
01:18:27,000 --> 01:18:28,000
精震

2990
01:18:28,000 --> 01:18:30,000
就是一个硬件的精震

2991
01:18:30,000 --> 01:18:32,000
射成比较高的一个频率

2992
01:18:32,000 --> 01:18:35,000
然后在这个特定频率之下

2993
01:18:35,000 --> 01:18:38,000
有可能这个精震会干扰到

2994
01:18:38,000 --> 01:18:40,000
主机上面的另外一个

2995
01:18:40,000 --> 01:18:46,000
和手柄传输播导率相关的一个芯片

2996
01:18:46,000 --> 01:18:49,000
然后使得这个芯片产生一个特定的 bug

2997
01:18:49,000 --> 01:18:51,000
然后这个 bug 会导致记忆卡损毁

2998
01:18:51,000 --> 01:18:52,000
这是

2999
01:18:52,000 --> 01:18:54,000
对

3000
01:18:54,000 --> 01:18:56,000
这是看起来非常取决

3001
01:18:56,000 --> 01:18:58,000
然后让人家捏了一把汗的一个故事

3002
01:18:58,000 --> 01:19:00,000
推荐大家去读一读

3003
01:19:00,000 --> 01:19:01,000
那么你要遇到

3004
01:19:01,000 --> 01:19:03,000
你说我们现代程序员

3005
01:19:03,000 --> 01:19:05,000
要遇到这种级别的 bug 怎么办

3006
01:19:05,000 --> 01:19:08,000
我觉得真的就

3007
01:19:08,000 --> 01:19:09,000
一头撞死算了

3008
01:19:09,000 --> 01:19:12,000
就好像类似的 bug

3009
01:19:12,000 --> 01:19:15,000
其实在游戏论坛里面

3010
01:19:15,000 --> 01:19:16,000
游戏开发者论坛里面

3011
01:19:16,000 --> 01:19:18,000
也经常可以看到

3012
01:19:18,000 --> 01:19:20,000
比如说曾经有过一个 bug 是

3013
01:19:20,000 --> 01:19:26,000
在第一个场景里面

3014
01:19:26,000 --> 01:19:28,000
如果你用手柄

3015
01:19:28,000 --> 01:19:31,000
把相机视角

3016
01:19:31,000 --> 01:19:34,000
转到角色的身后

3017
01:19:34,000 --> 01:19:36,000
整个游戏就会 crush

3018
01:19:36,000 --> 01:19:37,000
然后他们

3019
01:19:37,000 --> 01:19:41,000
顶着这个 deadline 的压力测试了

3020
01:19:41,000 --> 01:19:42,000
一个月都没有测出来

3021
01:19:42,000 --> 01:19:42,000
到底是为什么

3022
01:19:42,000 --> 01:19:44,000
最后他们的解决方法就是

3023
01:19:44,000 --> 01:19:46,000
在第一个场景里面

3024
01:19:46,000 --> 01:19:48,000
编程强制说

3025
01:19:48,000 --> 01:19:51,000
相机只能保持在侧边的角度

3026
01:19:51,000 --> 01:19:53,000
然后一直到跑到安全的地方

3027
01:19:53,000 --> 01:19:56,000
才让用户可以把视角转到背后

3028
01:19:56,000 --> 01:19:57,000
对

3029
01:19:57,000 --> 01:19:58,000
你像这种 bug

3030
01:19:58,000 --> 01:19:59,000
你没有办法解决的时候

3031
01:19:59,000 --> 01:20:01,000
你都真的只能绕开它

3032
01:20:01,000 --> 01:20:02,000
如果你有压力的话

3033
01:20:02,000 --> 01:20:04,000
你之前也被干了吗

3034
01:20:04,000 --> 01:20:05,000
你直接进了那个

3035
01:20:05,000 --> 01:20:07,000
Crumple iOS 一样的

3036
01:20:07,000 --> 01:20:08,000
对

3037
01:20:08,000 --> 01:20:11,000
这是一些比较 drama 的 bug

3038
01:20:11,000 --> 01:20:12,000
但大部分时候

3039
01:20:12,000 --> 01:20:13,000
我们遇到的 bug

3040
01:20:13,000 --> 01:20:15,000
其实没有那么复杂

3041
01:20:15,000 --> 01:20:17,000
真的是因为自己蠢了

3042
01:20:17,000 --> 01:20:18,000
不能怪别人

3043
01:20:18,000 --> 01:20:20,000
不能怪社会

3044
01:20:20,000 --> 01:20:21,000
没错

3045
01:20:21,000 --> 01:20:23,000
对

3046
01:20:23,000 --> 01:20:23,000
其实

3047
01:20:23,000 --> 01:20:25,000
大部分 bug

3048
01:20:25,000 --> 01:20:27,000
都可以通过一些比较

3049
01:20:27,000 --> 01:20:28,000
基本的手段被发现

3050
01:20:28,000 --> 01:20:30,000
其实最基本的一个

3051
01:20:30,000 --> 01:20:31,000
就是 read the code

3052
01:20:31,000 --> 01:20:33,000
就是把你刚刚写下的东西

3053
01:20:33,000 --> 01:20:34,000
仔细读一遍

3054
01:20:34,000 --> 01:20:36,000
很多时候就已经可以发现

3055
01:20:36,000 --> 01:20:37,000
这个 bug

3056
01:20:37,000 --> 01:20:38,000
到底核杂

3057
01:20:38,000 --> 01:20:39,000
其实不一定

3058
01:20:39,000 --> 01:20:42,000
因为像会形成思维定势

3059
01:20:42,000 --> 01:20:43,000
让你反而

3060
01:20:43,000 --> 01:20:44,000
你反复读

3061
01:20:44,000 --> 01:20:45,000
也看不出问题在哪里

3062
01:20:45,000 --> 01:20:46,000
比较经典

3063
01:20:46,000 --> 01:20:46,000
就是那个

3064
01:20:46,000 --> 01:20:48,000
就是那个叫什么

3065
01:20:48,000 --> 01:20:50,000
因为像 C

3066
01:20:50,000 --> 01:20:51,000
C 加

3067
01:20:51,000 --> 01:20:52,000
他不是那个

3068
01:20:52,000 --> 01:20:55,000
缩近是无影响的吗

3069
01:20:55,000 --> 01:20:56,000
对

3070
01:20:56,000 --> 01:20:57,000
你写了一个 if

3071
01:20:57,000 --> 01:20:58,000
忘了打花和号

3072
01:20:58,000 --> 01:20:59,000
你觉得你缩近了

3073
01:20:59,000 --> 01:21:00,000
后面一排

3074
01:21:00,000 --> 01:21:02,000
一个 block 代码

3075
01:21:02,000 --> 01:21:02,000
就应该说

3076
01:21:02,000 --> 01:21:04,000
应该在这个衣服这里面

3077
01:21:04,000 --> 01:21:05,000
结果一看没花个号

3078
01:21:05,000 --> 01:21:07,000
只有第一行被执行

3079
01:21:07,000 --> 01:21:08,000
没错

3080
01:21:08,000 --> 01:21:11,000
我其实在研究生

3081
01:21:11,000 --> 01:21:12,000
当助教的时候

3082
01:21:12,000 --> 01:21:14,000
遇到过

3083
01:21:14,000 --> 01:21:15,000
遇到过这样一个案例

3084
01:21:15,000 --> 01:21:16,000
就是

3085
01:21:16,000 --> 01:21:18,000
我当时在写

3086
01:21:18,000 --> 01:21:20,000
反正写我的项目

3087
01:21:20,000 --> 01:21:20,000
然后

3088
01:21:20,000 --> 01:21:22,000
我写过写

3089
01:21:22,000 --> 01:21:23,000
写项目的地方是

3090
01:21:23,000 --> 01:21:25,000
学校的一个计算机实验室

3091
01:21:25,000 --> 01:21:27,000
然后有两个德国小孩

3092
01:21:27,000 --> 01:21:27,000
在那

3093
01:21:27,000 --> 01:21:28,000
不是小孩

3094
01:21:28,000 --> 01:21:28,000
就反正

3095
01:21:28,000 --> 01:21:29,000
两个德国本科生

3096
01:21:29,000 --> 01:21:30,000
在那边写程序

3097
01:21:30,000 --> 01:21:32,000
别人都走了

3098
01:21:32,000 --> 01:21:33,000
他们两个还坐在那搞

3099
01:21:33,000 --> 01:21:34,000
然后

3100
01:21:34,000 --> 01:21:36,000
最后他们终于忍不住了

3101
01:21:36,000 --> 01:21:37,000
问我说

3102
01:21:37,000 --> 01:21:38,000
你能过来看一看

3103
01:21:38,000 --> 01:21:39,000
我们程序到底有什么问题

3104
01:21:39,000 --> 01:21:41,000
然后看了一下

3105
01:21:41,000 --> 01:21:41,000
看了大概

3106
01:21:41,000 --> 01:21:44,000
三分钟就说

3107
01:21:44,000 --> 01:21:45,000
这里缺一个花号

3108
01:21:45,000 --> 01:21:47,000
然后他们两个疯了

3109
01:21:47,000 --> 01:21:47,000
说

3110
01:21:47,000 --> 01:21:50,000
我们在这坐了四个小时

3111
01:21:50,000 --> 01:21:51,000
就是因为这个花问号

3112
01:21:51,000 --> 01:21:55,000
所以

3113
01:21:55,000 --> 01:21:57,000
遇到这种情况

3114
01:21:57,000 --> 01:21:58,000
就是说

3115
01:21:58,000 --> 01:22:00,000
先不说这个缩近敏感

3116
01:22:00,000 --> 01:22:01,000
是不是一些好事吧

3117
01:22:01,000 --> 01:22:03,000
至少像那个 Go 语言

3118
01:22:03,000 --> 01:22:04,000
它不是有个自带

3119
01:22:04,000 --> 01:22:05,000
Go format

3120
01:22:05,000 --> 01:22:05,000
那个工具

3121
01:22:05,000 --> 01:22:07,000
可以帮你说

3122
01:22:07,000 --> 01:22:10,000
就是把代码重排成一个标准样式

3123
01:22:10,000 --> 01:22:11,000
这样可以一眼看出这种

3124
01:22:11,000 --> 01:22:13,000
比较愚蠢低级的错误

3125
01:22:13,000 --> 01:22:14,000
就上次

3126
01:22:14,000 --> 01:22:15,000
你知道

3127
01:22:15,000 --> 01:22:17,000
那个 heartbleed

3128
01:22:17,000 --> 01:22:18,000
就是那个 OpenSSL

3129
01:22:18,000 --> 01:22:20,000
那个大 bug 出现了

3130
01:22:20,000 --> 01:22:22,000
其实也是因为类似的原因

3131
01:22:22,000 --> 01:22:22,000
还有个什么

3132
01:22:22,000 --> 01:22:23,000
好像是一个 double return

3133
01:22:23,000 --> 01:22:27,000
然后没有看到

3134
01:22:27,000 --> 01:22:28,000
就发现那个检查

3135
01:22:28,000 --> 01:22:29,000
都根本就没有

3136
01:22:29,000 --> 01:22:31,000
从来这么多年过去了

3137
01:22:31,000 --> 01:22:32,000
从来没有执行过

3138
01:22:32,000 --> 01:22:33,000
那个安全性的检查

3139
01:22:33,000 --> 01:22:34,000
白搞

3140
01:22:34,000 --> 01:22:36,000
其实也是可以

3141
01:22:36,000 --> 01:22:36,000
就是

3142
01:22:36,000 --> 01:22:37,000
其实如果你自己

3143
01:22:37,000 --> 01:22:39,000
看那个代码的

3144
01:22:39,000 --> 01:22:40,000
原始的形状

3145
01:22:40,000 --> 01:22:43,000
你不仔细去想

3146
01:22:43,000 --> 01:22:44,000
就我不告诉你

3147
01:22:44,000 --> 01:22:45,000
这里有个明显的问题的话

3148
01:22:45,000 --> 01:22:46,000
你怎么也想不到

3149
01:22:46,000 --> 01:22:47,000
哪里会有这么一个状况

3150
01:22:47,000 --> 01:22:48,000
对不对

3151
01:22:48,000 --> 01:22:50,000
这个代码在公开

3152
01:22:50,000 --> 01:22:51,000
它是开源的

3153
01:22:51,000 --> 01:22:52,000
光天花

3154
01:22:52,000 --> 01:22:54,000
存在了那么多年都没有人发现

3155
01:22:54,000 --> 01:22:56,000
所以我觉得 read code

3156
01:22:56,000 --> 01:22:57,000
是最低效率的

3157
01:22:57,000 --> 01:22:59,000
储存的时候的

3158
01:22:59,000 --> 01:23:01,000
但是我觉得这个点

3159
01:23:01,000 --> 01:23:01,000
可能是说

3160
01:23:01,000 --> 01:23:03,000
如果你有一个

3161
01:23:03,000 --> 01:23:05,000
比较好的

3162
01:23:05,000 --> 01:23:07,000
写一小段

3163
01:23:07,000 --> 01:23:09,000
就回去 review 一下的习惯的话

3164
01:23:09,000 --> 01:23:11,000
其实是对于杜绝

3165
01:23:11,000 --> 01:23:13,000
这样的 bug 出现

3166
01:23:13,000 --> 01:23:14,000
是比较有意义的

3167
01:23:14,000 --> 01:23:15,000
但是不是每个人

3168
01:23:15,000 --> 01:23:17,000
都有这个习惯

3169
01:23:17,000 --> 01:23:18,000
但可能这也就是

3170
01:23:18,000 --> 01:23:19,000
为什么一些比较

3171
01:23:19,000 --> 01:23:20,000
好的 ID

3172
01:23:20,000 --> 01:23:24,000
会动用静态分析器

3173
01:23:24,000 --> 01:23:25,000
或者 static analyzer

3174
01:23:25,000 --> 01:23:26,000
这种东西来

3175
01:23:26,000 --> 01:23:27,000
比如说在某种意义上

3176
01:23:27,000 --> 01:23:29,000
是它帮你读

3177
01:23:29,000 --> 01:23:30,000
你刚刚写下的代码

3178
01:23:30,000 --> 01:23:34,000
就判断一些模式

3179
01:23:34,000 --> 01:23:35,000
或者行为之类的

3180
01:23:35,000 --> 01:23:36,000
没错

3181
01:23:36,000 --> 01:23:39,000
反正基本的问题解决

3182
01:23:39,000 --> 01:23:41,000
大家喜欢 IDE 的原因之一

3183
01:23:41,000 --> 01:23:42,000
就是它会

3184
01:23:42,000 --> 01:23:45,000
除了预法高量的之外

3185
01:23:45,000 --> 01:23:45,000
会告诉你说

3186
01:23:45,000 --> 01:23:47,000
这个地方看起来

3187
01:23:47,000 --> 01:23:47,000
好像是不对的

3188
01:23:47,000 --> 01:23:52,000
比如说那个

3189
01:23:52,000 --> 01:23:54,000
Xcode 的 playground

3190
01:23:54,000 --> 01:23:55,000
其实就是在不停的

3191
01:23:55,000 --> 01:23:57,000
静态分析你的代码

3192
01:23:57,000 --> 01:23:58,000
然后甚至动态的运行

3193
01:23:58,000 --> 01:24:01,000
然后可以帮你及时

3194
01:24:01,000 --> 01:24:02,000
发现自己系列代码

3195
01:24:02,000 --> 01:24:05,000
然后我们说这个

3196
01:24:05,000 --> 01:24:07,000
其实蛮常用的一个

3197
01:24:07,000 --> 01:24:09,000
除虫的手段

3198
01:24:09,000 --> 01:24:11,000
就是打印除虫法

3199
01:24:11,000 --> 01:24:13,000
对

3200
01:24:13,000 --> 01:24:15,000
The good old printf

3201
01:24:15,000 --> 01:24:19,000
printf 是一个

3202
01:24:19,000 --> 01:24:21,000
系统标准函数

3203
01:24:21,000 --> 01:24:22,000
C 名标准函数

3204
01:24:22,000 --> 01:24:23,000
打印一个字符串

3205
01:24:23,000 --> 01:24:23,000
对吧

3206
01:24:23,000 --> 01:24:25,000
然后一般做法怎么样子

3207
01:24:25,000 --> 01:24:26,000
就是你在

3208
01:24:26,000 --> 01:24:29,000
你觉得可能会出问题的

3209
01:24:29,000 --> 01:24:31,000
那个区间

3210
01:24:31,000 --> 01:24:32,000
打印一个

3211
01:24:32,000 --> 01:24:35,000
你认为它应该是某一个

3212
01:24:35,000 --> 01:24:38,000
数值或者是一个变量

3213
01:24:38,000 --> 01:24:39,000
然后看它是不是

3214
01:24:39,000 --> 01:24:41,000
在那个时候

3215
01:24:41,000 --> 01:24:42,000
确实是如今所料的

3216
01:24:42,000 --> 01:24:42,000
那个数字

3217
01:24:42,000 --> 01:24:43,000
然后你可以

3218
01:24:43,000 --> 01:24:45,000
当一次插多个打印点

3219
01:24:45,000 --> 01:24:48,000
或者是打印多个变量

3220
01:24:48,000 --> 01:24:50,000
或者是什么结构体之类的

3221
01:24:50,000 --> 01:24:52,000
然后看是否如你预期

3222
01:24:52,000 --> 01:24:53,000
就是

3223
01:24:53,000 --> 01:24:54,000
尤其是刚刚忘了说的

3224
01:24:54,000 --> 01:24:55,000
就整个过程就是说

3225
01:24:55,000 --> 01:24:57,000
你形成一个假设

3226
01:24:57,000 --> 01:24:59,000
就假设代码在这里出的问题

3227
01:24:59,000 --> 01:25:00,000
然后你去验证那个假设

3228
01:25:00,000 --> 01:25:00,000
是否成立

3229
01:25:00,000 --> 01:25:02,000
然后逐一排查的过程

3230
01:25:02,000 --> 01:25:04,000
然后打印除虫法

3231
01:25:04,000 --> 01:25:07,000
就是做了一个最原始的方法

3232
01:25:07,000 --> 01:25:08,000
就是这么一个过程

3233
01:25:08,000 --> 01:25:09,000
对

3234
01:25:09,000 --> 01:25:10,000
打印除虫法

3235
01:25:10,000 --> 01:25:12,000
第一步是测试

3236
01:25:12,000 --> 01:25:13,000
这个打印除虫法

3237
01:25:13,000 --> 01:25:15,000
我是一个打印除虫的大师

3238
01:25:15,000 --> 01:25:19,000
打印除虫法的第一层境界是

3239
01:25:19,000 --> 01:25:22,000
检测这个代码分支

3240
01:25:22,000 --> 01:25:23,000
会不会被运行到

3241
01:25:23,000 --> 01:25:26,000
比如说我经常会在

3242
01:25:26,000 --> 01:25:27,000
JavaScript 里面写

3243
01:25:27,000 --> 01:25:28,000
console log 1

3244
01:25:28,000 --> 01:25:29,000
然后下面一个分支

3245
01:25:29,000 --> 01:25:30,000
写 console log 2

3246
01:25:30,000 --> 01:25:32,000
然后再下面一个 console log 3

3247
01:25:32,000 --> 01:25:33,000
然后运行

3248
01:25:33,000 --> 01:25:35,000
然后去 console 里面看

3249
01:25:35,000 --> 01:25:36,000
说 123 是不是都打出来

3250
01:25:36,000 --> 01:25:37,000
如果没打出来

3251
01:25:37,000 --> 01:25:39,000
这段代码根本就没被运行

3252
01:25:39,000 --> 01:25:40,000
这个是最基本的叫做

3253
01:25:40,000 --> 01:25:41,000
什么 control flow

3254
01:25:41,000 --> 01:25:43,000
控制流的检验

3255
01:25:43,000 --> 01:25:43,000
对

3256
01:25:43,000 --> 01:25:44,000
reachability

3257
01:25:44,000 --> 01:25:47,000
然后第二层境界才是

3258
01:25:47,000 --> 01:25:48,000
打印一个代码的值

3259
01:25:48,000 --> 01:25:50,000
打印一个变量的值

3260
01:25:50,000 --> 01:25:53,000
写 PHP 或者什么 wire dump

3261
01:25:53,000 --> 01:25:55,000
数值除虫法

3262
01:25:55,000 --> 01:25:57,000
打印数值除虫法

3263
01:25:57,000 --> 01:25:59,000
对没错

3264
01:25:59,000 --> 01:26:01,000
然后第三层境界可能就是

3265
01:26:01,000 --> 01:26:03,000
在 printf 的时候

3266
01:26:03,000 --> 01:26:04,000
第三层境界就是

3267
01:26:04,000 --> 01:26:06,000
代 debug 的 printf

3268
01:26:06,000 --> 01:26:08,000
就是在代码里面

3269
01:26:08,000 --> 01:26:10,000
定一个红 debug

3270
01:26:10,000 --> 01:26:13,000
if debug then printf

3271
01:26:13,000 --> 01:26:14,000
然后这个东西

3272
01:26:14,000 --> 01:26:17,000
printf 就此成为了

3273
01:26:17,000 --> 01:26:18,000
最终代码的一部分

3274
01:26:18,000 --> 01:26:22,000
你知道打印除虫法的

3275
01:26:22,000 --> 01:26:24,000
抓狂状态是怎么样的吗

3276
01:26:24,000 --> 01:26:25,000
就是 printf 括号开

3277
01:26:25,000 --> 01:26:27,000
引号开

3278
01:26:27,000 --> 01:26:28,000
what the fuck

3279
01:26:28,000 --> 01:26:30,000
why didn't this run here

3280
01:26:30,000 --> 01:26:33,000
然后问号

3281
01:26:33,000 --> 01:26:34,000
五个感染号

3282
01:26:34,000 --> 01:26:36,000
关引号

3283
01:26:36,000 --> 01:26:37,000
关括号

3284
01:26:37,000 --> 01:26:39,000
还忘了个分号打上去

3285
01:26:39,000 --> 01:26:40,000
对

3286
01:26:40,000 --> 01:26:41,000
比如说早期

3287
01:26:41,000 --> 01:26:42,000
windows 的

3288
01:26:42,000 --> 01:26:43,000
windows NT

3289
01:26:43,000 --> 01:26:44,000
还是 95 的原代码

3290
01:26:44,000 --> 01:26:44,000
爆出来之后

3291
01:26:44,000 --> 01:26:46,000
我发现里面有很多的

3292
01:26:46,000 --> 01:26:47,000
printf 的段落

3293
01:26:47,000 --> 01:26:48,000
都是在

3294
01:26:48,000 --> 01:26:49,000
诅咒编译器

3295
01:26:49,000 --> 01:26:50,000
傻逼编译器

3296
01:26:50,000 --> 01:26:51,000
这里又弄错了

3297
01:26:51,000 --> 01:26:52,000
希望我们

3298
01:26:52,000 --> 01:26:53,000
受空来做什么什么

3299
01:26:53,000 --> 01:26:55,000
但其实

3300
01:26:55,000 --> 01:26:56,000
打印除虫法的

3301
01:26:56,000 --> 01:26:57,000
最麻烦的一点

3302
01:26:57,000 --> 01:26:58,000
就是它

3303
01:26:58,000 --> 01:26:59,000
需要你重新

3304
01:26:59,000 --> 01:27:01,000
就如果是静态语言

3305
01:27:01,000 --> 01:27:03,000
它需要你重新编译一遍

3306
01:27:03,000 --> 01:27:04,000
编译

3307
01:27:04,000 --> 01:27:04,000
重新

3308
01:27:04,000 --> 01:27:05,000
就是

3309
01:27:05,000 --> 01:27:06,000
就是什么

3310
01:27:06,000 --> 01:27:08,000
你插入一个打印语句之后

3311
01:27:08,000 --> 01:27:09,000
你得保存

3312
01:27:09,000 --> 01:27:10,000
然后编译

3313
01:27:10,000 --> 01:27:12,000
然后再执行

3314
01:27:12,000 --> 01:27:13,000
就每次要重新跑一遍

3315
01:27:13,000 --> 01:27:13,000
就比较

3316
01:27:13,000 --> 01:27:15,000
如果你那个

3317
01:27:15,000 --> 01:27:16,000
那个什么

3318
01:27:16,000 --> 01:27:18,000
工程上比较大

3319
01:27:18,000 --> 01:27:18,000
然后那个

3320
01:27:18,000 --> 01:27:20,000
编程时间比较长的话

3321
01:27:20,000 --> 01:27:21,000
你就哭死吧

3322
01:27:21,000 --> 01:27:22,000
没错

3323
01:27:22,000 --> 01:27:25,000
其实刚才说的三层境界

3324
01:27:25,000 --> 01:27:26,000
都是非常不

3325
01:27:26,000 --> 01:27:27,000
非常不推荐的

3326
01:27:27,000 --> 01:27:28,000
尤其是第三层境界

3327
01:27:28,000 --> 01:27:28,000
就是

3328
01:27:28,000 --> 01:27:29,000
你

3329
01:27:29,000 --> 01:27:31,000
如果你真的需要

3330
01:27:31,000 --> 01:27:33,000
检测 printf

3331
01:27:33,000 --> 01:27:34,000
或者是检测一个程序的输出

3332
01:27:34,000 --> 01:27:36,000
来验证它是否正确的话

3333
01:27:36,000 --> 01:27:38,000
比较

3334
01:27:38,000 --> 01:27:39,000
比较

3335
01:27:39,000 --> 01:27:41,000
methodology 的方法是

3336
01:27:41,000 --> 01:27:43,000
用一个

3337
01:27:43,000 --> 01:27:43,000
比如说

3338
01:27:43,000 --> 01:27:44,000
log 4 j 这样的

3339
01:27:44,000 --> 01:27:45,000
酷

3340
01:27:45,000 --> 01:27:47,000
来输出比较

3341
01:27:47,000 --> 01:27:49,000
正统的

3342
01:27:49,000 --> 01:27:51,000
记录资料

3343
01:27:51,000 --> 01:27:52,000
然后你可以

3344
01:27:52,000 --> 01:27:54,000
使用一些比较

3345
01:27:54,000 --> 01:27:55,000
相对来说

3346
01:27:55,000 --> 01:27:56,000
比较高端的功能

3347
01:27:56,000 --> 01:27:57,000
比如说

3348
01:27:57,000 --> 01:27:58,000
区分这个

3349
01:27:58,000 --> 01:27:59,000
log 的等级

3350
01:27:59,000 --> 01:28:00,000
是 warning

3351
01:28:00,000 --> 01:28:00,000
是 info

3352
01:28:00,000 --> 01:28:01,000
还是 debug

3353
01:28:01,000 --> 01:28:01,000
还是

3354
01:28:01,000 --> 01:28:03,000
arrow

3355
01:28:03,000 --> 01:28:05,000
然后可以记录下

3356
01:28:05,000 --> 01:28:06,000
时间

3357
01:28:06,000 --> 01:28:06,000
然后可以

3358
01:28:06,000 --> 01:28:08,000
有选择性的记录

3359
01:28:08,000 --> 01:28:09,000
比如说

3360
01:28:09,000 --> 01:28:11,000
当时的

3361
01:28:11,000 --> 01:28:12,000
这个

3362
01:28:12,000 --> 01:28:13,000
站的情况

3363
01:28:13,000 --> 01:28:14,000
或者是

3364
01:28:14,000 --> 01:28:15,000
堆的情况

3365
01:28:15,000 --> 01:28:15,000
或者是

3366
01:28:15,000 --> 01:28:16,000
乃至于一个

3367
01:28:16,000 --> 01:28:17,000
变量的值

3368
01:28:17,000 --> 01:28:18,000
千万不要

3369
01:28:18,000 --> 01:28:19,000
简单的那种

3370
01:28:19,000 --> 01:28:20,000
if

3371
01:28:20,000 --> 01:28:20,000
debug

3372
01:28:20,000 --> 01:28:21,000
printf

3373
01:28:21,000 --> 01:28:22,000
这种

3374
01:28:22,000 --> 01:28:23,000
比较愚蠢的方式

3375
01:28:23,000 --> 01:28:30,000
所以

3376
01:28:30,000 --> 01:28:31,000
比较高级的方式

3377
01:28:31,000 --> 01:28:31,000
是什么

3378
01:28:31,000 --> 01:28:35,000
我们可以

3379
01:28:35,000 --> 01:28:36,000
一项一项

3380
01:28:36,000 --> 01:28:37,000
来总结

3381
01:28:37,000 --> 01:28:38,000
最简单的

3382
01:28:38,000 --> 01:28:39,000
就是

3383
01:28:39,000 --> 01:28:40,000
我最

3384
01:28:40,000 --> 01:28:43,000
最具有

3385
01:28:43,000 --> 01:28:45,000
早期黑客精神的

3386
01:28:45,000 --> 01:28:46,000
除错工具

3387
01:28:46,000 --> 01:28:47,000
就是

3388
01:28:47,000 --> 01:28:49,000
其实叫

3389
01:28:49,000 --> 01:28:50,000
DB

3390
01:28:50,000 --> 01:28:51,000
DB

3391
01:28:51,000 --> 01:28:52,000
DB

3392
01:28:52,000 --> 01:28:53,000
这么一个小工具

3393
01:28:53,000 --> 01:28:56,000
有点

3394
01:28:56,000 --> 01:28:57,000
类似于

3395
01:28:57,000 --> 01:28:57,000
DOS 时代的

3396
01:28:57,000 --> 01:28:58,000
那个

3397
01:28:58,000 --> 01:29:00,000
debug.com

3398
01:29:00,000 --> 01:29:02,000
还是

3399
01:29:02,000 --> 01:29:03,000
debug.com

3400
01:29:03,000 --> 01:29:04,000
还是

3401
01:29:04,000 --> 01:29:05,000
debug.exe

3402
01:29:05,000 --> 01:29:06,000
程序

3403
01:29:06,000 --> 01:29:07,000
就

3404
01:29:07,000 --> 01:29:08,000
早期

3405
01:29:08,000 --> 01:29:09,000
DOS 下面有一个

3406
01:29:09,000 --> 01:29:09,000
可以让你

3407
01:29:09,000 --> 01:29:10,000
直接输入

3408
01:29:10,000 --> 01:29:11,000
汇编来写程序

3409
01:29:11,000 --> 01:29:11,000
乃至于

3410
01:29:11,000 --> 01:29:12,000
调试其他

3411
01:29:12,000 --> 01:29:12,000
程序的

3412
01:29:12,000 --> 01:29:13,000
小程序

3413
01:29:13,000 --> 01:29:14,000
debug.com

3414
01:29:14,000 --> 01:29:15,000
我不知道

3415
01:29:15,000 --> 01:29:16,000
你有没有

3416
01:29:16,000 --> 01:29:17,000
你有没有印象

3417
01:29:17,000 --> 01:29:18,000
你有没有用过

3418
01:29:18,000 --> 01:29:20,000
没什么

3419
01:29:20,000 --> 01:29:21,000
DOS 上面

3420
01:29:21,000 --> 01:29:21,000
真的没有

3421
01:29:21,000 --> 01:29:22,000
什么

3422
01:29:22,000 --> 01:29:22,000
编程的

3423
01:29:22,000 --> 01:29:23,000
经历

3424
01:29:23,000 --> 01:29:23,000
对

3425
01:29:23,000 --> 01:29:24,000
OK

3426
01:29:24,000 --> 01:29:25,000
就

3427
01:29:25,000 --> 01:29:26,000
比

3428
01:29:26,000 --> 01:29:26,000
这个

3429
01:29:26,000 --> 01:29:27,000
debug.com

3430
01:29:27,000 --> 01:29:28,000
你的鼻祖

3431
01:29:28,000 --> 01:29:28,000
其实就是

3432
01:29:28,000 --> 01:29:29,000
早期

3433
01:29:29,000 --> 01:29:30,000
UNIX 下面的

3434
01:29:30,000 --> 01:29:31,000
一个工具

3435
01:29:31,000 --> 01:29:32,000
叫做 DB

3436
01:29:32,000 --> 01:29:33,000
也就是

3437
01:29:33,000 --> 01:29:33,000
debug 的缩计

3438
01:29:33,000 --> 01:29:35,000
后来 GNU 出了一个

3439
01:29:35,000 --> 01:29:36,000
GNUDB

3440
01:29:36,000 --> 01:29:38,000
也就是现在

3441
01:29:38,000 --> 01:29:39,000
最广为

3442
01:29:39,000 --> 01:29:40,000
使用的 GDB

3443
01:29:40,000 --> 01:29:41,000
GDB

3444
01:29:41,000 --> 01:29:42,000
简单来说

3445
01:29:42,000 --> 01:29:43,000
就是这么一个

3446
01:29:43,000 --> 01:29:43,000
程序

3447
01:29:43,000 --> 01:29:45,000
你可以让

3448
01:29:45,000 --> 01:29:45,000
这个程序

3449
01:29:45,000 --> 01:29:46,000
替你运行

3450
01:29:46,000 --> 01:29:47,000
你的程序

3451
01:29:47,000 --> 01:29:47,000
然后

3452
01:29:47,000 --> 01:29:49,000
这个程序

3453
01:29:49,000 --> 01:29:50,000
在运行的时候

3454
01:29:50,000 --> 01:29:51,000
一上升会

3455
01:29:51,000 --> 01:29:52,000
会暂停

3456
01:29:52,000 --> 01:29:53,000
或者说

3457
01:29:53,000 --> 01:29:54,000
根据你

3458
01:29:54,000 --> 01:29:55,000
调用它的方式不同

3459
01:29:55,000 --> 01:29:57,000
你可以让

3460
01:29:57,000 --> 01:29:57,000
它一上来

3461
01:29:57,000 --> 01:29:58,000
就暂停

3462
01:29:58,000 --> 01:29:59,000
然后告诉他说

3463
01:29:59,000 --> 01:30:00,000
这个程序

3464
01:30:00,000 --> 01:30:01,000
运行到某一个

3465
01:30:01,000 --> 01:30:01,000
特定行的时候

3466
01:30:01,000 --> 01:30:03,000
请你停下来

3467
01:30:03,000 --> 01:30:03,000
然后我要看一看

3468
01:30:03,000 --> 01:30:04,000
这个程序

3469
01:30:04,000 --> 01:30:05,000
现在的状况

3470
01:30:05,000 --> 01:30:05,000
是什么

3471
01:30:05,000 --> 01:30:08,000
然后 GDB

3472
01:30:08,000 --> 01:30:09,000
也是在

3473
01:30:09,000 --> 01:30:10,000
命令行下运行

3474
01:30:10,000 --> 01:30:11,000
运行的方法

3475
01:30:11,000 --> 01:30:11,000
就是

3476
01:30:11,000 --> 01:30:13,000
你用

3477
01:30:13,000 --> 01:30:14,000
你现在写 GDB

3478
01:30:14,000 --> 01:30:15,000
然后后面跟你

3479
01:30:15,000 --> 01:30:15,000
比如说你刚刚

3480
01:30:15,000 --> 01:30:16,000
编译好的一个

3481
01:30:16,000 --> 01:30:17,000
C 程序

3482
01:30:17,000 --> 01:30:18,000
然后 C 程序的原版

3483
01:30:18,000 --> 01:30:19,000
和 C 程序的

3484
01:30:19,000 --> 01:30:19,000
那个

3485
01:30:19,000 --> 01:30:21,000
中间的调试信息

3486
01:30:21,000 --> 01:30:22,000
也全都在

3487
01:30:22,000 --> 01:30:23,000
存在当前目录之下

3488
01:30:23,000 --> 01:30:24,000
然后你用 GDB

3489
01:30:24,000 --> 01:30:26,000
调用你

3490
01:30:26,000 --> 01:30:27,000
写好

3491
01:30:27,000 --> 01:30:27,000
程序

3492
01:30:27,000 --> 01:30:28,000
然后告诉 GDB

3493
01:30:28,000 --> 01:30:29,000
你要在哪断点

3494
01:30:29,000 --> 01:30:30,000
然后在哪调试

3495
01:30:30,000 --> 01:30:31,000
所有的指令

3496
01:30:31,000 --> 01:30:32,000
都是通过键盘输入的

3497
01:30:32,000 --> 01:30:33,000
然后你

3498
01:30:33,000 --> 01:30:34,000
比如说你停

3499
01:30:34,000 --> 01:30:34,000
你要

3500
01:30:34,000 --> 01:30:35,000
射击点

3501
01:30:35,000 --> 01:30:36,000
你要说

3502
01:30:36,000 --> 01:30:37,000
break

3503
01:30:37,000 --> 01:30:38,000
atline

3504
01:30:38,000 --> 01:30:39,000
31

3505
01:30:39,000 --> 01:30:40,000
比如说

3506
01:30:40,000 --> 01:30:41,000
然后为了简化

3507
01:30:41,000 --> 01:30:42,000
你可以把整个

3508
01:30:42,000 --> 01:30:44,000
没有意义的

3509
01:30:44,000 --> 01:30:46,000
没有其意义的

3510
01:30:46,000 --> 01:30:47,000
指令

3511
01:30:47,000 --> 01:30:48,000
简化为一个字幕

3512
01:30:48,000 --> 01:30:48,000
比如说

3513
01:30:48,000 --> 01:30:49,000
be 31

3514
01:30:49,000 --> 01:30:49,000
就是说

3515
01:30:49,000 --> 01:30:50,000
在 31 这个地方

3516
01:30:50,000 --> 01:30:51,000
放一段点

3517
01:30:51,000 --> 01:30:53,000
然后它运行到 31 的时候

3518
01:30:53,000 --> 01:30:53,000
会告诉你说

3519
01:30:53,000 --> 01:30:55,000
31 有了什么

3520
01:30:55,000 --> 01:30:57,000
我已经运行到 31 的

3521
01:30:57,000 --> 01:30:57,000
接下来

3522
01:30:57,000 --> 01:30:57,000
我干什么

3523
01:30:57,000 --> 01:30:58,000
比如说你可以说

3524
01:30:58,000 --> 01:31:02,000
打印出某一个

3525
01:31:02,000 --> 01:31:03,000
计算器的

3526
01:31:03,000 --> 01:31:04,000
指来

3527
01:31:04,000 --> 01:31:05,000
整个过程

3528
01:31:05,000 --> 01:31:05,000
有点像

3529
01:31:05,000 --> 01:31:06,000
玩 mad

3530
01:31:06,000 --> 01:31:08,000
我应该

3531
01:31:08,000 --> 01:31:09,000
反过来说

3532
01:31:09,000 --> 01:31:10,000
玩 mad 的过程

3533
01:31:10,000 --> 01:31:11,000
就有点像

3534
01:31:11,000 --> 01:31:14,000
使用一个命令行的

3535
01:31:14,000 --> 01:31:15,000
这种编辑器

3536
01:31:15,000 --> 01:31:16,000
就你输入一个指令

3537
01:31:16,000 --> 01:31:18,000
可以看到你周围有什么

3538
01:31:18,000 --> 01:31:19,000
然后你再输入一个指令

3539
01:31:19,000 --> 01:31:20,000
可以决定说

3540
01:31:20,000 --> 01:31:21,000
你要做什么

3541
01:31:21,000 --> 01:31:22,000
所以我觉得

3542
01:31:22,000 --> 01:31:23,000
用这个方法

3543
01:31:23,000 --> 01:31:25,000
比打印出柱法

3544
01:31:25,000 --> 01:31:27,000
最大最大的优点

3545
01:31:27,000 --> 01:31:27,000
就在于

3546
01:31:27,000 --> 01:31:28,000
它不用每次去

3547
01:31:28,000 --> 01:31:29,000
重新编译

3548
01:31:29,000 --> 01:31:31,000
对你的程序

3549
01:31:31,000 --> 01:31:32,000
去加一个打印

3550
01:31:32,000 --> 01:31:33,000
然后又重新编译

3551
01:31:33,000 --> 01:31:34,000
跑一段

3552
01:31:34,000 --> 01:31:35,000
进到出错

3553
01:31:35,000 --> 01:31:37,000
环节 section

3554
01:31:37,000 --> 01:31:39,000
再来判断

3555
01:31:39,000 --> 01:31:40,000
它这个是可以在

3556
01:31:40,000 --> 01:31:41,000
等于是在

3557
01:31:41,000 --> 01:31:42,000
程序运行过程中

3558
01:31:42,000 --> 01:31:43,000
动态的去查看

3559
01:31:43,000 --> 01:31:44,000
它运行的环境

3560
01:31:44,000 --> 01:31:45,000
然后是否符合

3561
01:31:45,000 --> 01:31:46,000
你的假设

3562
01:31:46,000 --> 01:31:47,000
对吧

3563
01:31:47,000 --> 01:31:47,000
没错

3564
01:31:47,000 --> 01:31:50,000
所以有了这样的工具

3565
01:31:50,000 --> 01:31:51,000
我们就实现了

3566
01:31:51,000 --> 01:31:52,000
一个非常重要的

3567
01:31:52,000 --> 01:31:54,000
软件开发的原则

3568
01:31:54,000 --> 01:31:55,000
Seperation of Concern

3569
01:31:55,000 --> 01:31:57,000
就是你写下来的代码

3570
01:31:57,000 --> 01:31:59,000
应该只是用于实现

3571
01:31:59,000 --> 01:32:01,000
你真正想要实现的

3572
01:32:01,000 --> 01:32:01,000
那些东西

3573
01:32:01,000 --> 01:32:03,000
而不是其中

3574
01:32:03,000 --> 01:32:04,000
有一部分的功能

3575
01:32:04,000 --> 01:32:06,000
是用来让你

3576
01:32:06,000 --> 01:32:07,000
检测这个程序

3577
01:32:07,000 --> 01:32:08,000
是不是在正确运行

3578
01:32:08,000 --> 01:32:11,000
这就是一个

3579
01:32:11,000 --> 01:32:13,000
调试工具的意义

3580
01:32:13,000 --> 01:32:15,000
然后 GDP

3581
01:32:15,000 --> 01:32:16,000
其实直到今天

3582
01:32:16,000 --> 01:32:16,000
都还有人用

3583
01:32:16,000 --> 01:32:19,000
而且在其他所有的语言里面

3584
01:32:19,000 --> 01:32:21,000
几乎所有的语言

3585
01:32:21,000 --> 01:32:22,000
这样有没有

3586
01:32:22,000 --> 01:32:23,000
的语言里面

3587
01:32:23,000 --> 01:32:24,000
都有这么一个

3588
01:32:24,000 --> 01:32:26,000
命令行下面调试的工具

3589
01:32:26,000 --> 01:32:28,000
比如说 PythonDB

3590
01:32:28,000 --> 01:32:30,000
叫做 PDB

3591
01:32:30,000 --> 01:32:31,000
然后还有

3592
01:32:31,000 --> 01:32:34,000
iPython 也有这么一个

3593
01:32:34,000 --> 01:32:36,000
专门让人用来

3594
01:32:36,000 --> 01:32:38,000
做交互式的命令行下的

3595
01:32:38,000 --> 01:32:41,000
debug 工作的一个酷

3596
01:32:41,000 --> 01:32:42,000
叫做 IPDB

3597
01:32:42,000 --> 01:32:43,000
这些都是相当好的工具

3598
01:32:43,000 --> 01:32:46,000
Rail 你用过吗

3599
01:32:46,000 --> 01:32:47,000
你写 Python

3600
01:32:47,000 --> 01:32:48,000
会用 debugger

3601
01:32:48,000 --> 01:32:51,000
偶尔用那个

3602
01:32:51,000 --> 01:32:53,000
只有 20%的时间里面

3603
01:32:53,000 --> 01:32:54,000
对

3604
01:32:54,000 --> 01:32:55,000
偶尔会用 PDB

3605
01:32:55,000 --> 01:32:55,000
但

3606
01:32:55,000 --> 01:32:58,000
你觉得好用吗

3607
01:32:58,000 --> 01:33:00,000
看情况

3608
01:33:00,000 --> 01:33:00,000
它有些情况

3609
01:33:00,000 --> 01:33:01,000
是用不了的

3610
01:33:01,000 --> 01:33:02,000
我印象中

3611
01:33:02,000 --> 01:33:02,000
就是

3612
01:33:02,000 --> 01:33:05,000
它得插入一个

3613
01:33:05,000 --> 01:33:06,000
就 PDB

3614
01:33:06,000 --> 01:33:07,000
它在启动的时候

3615
01:33:07,000 --> 01:33:08,000
它得在某一个地方

3616
01:33:08,000 --> 01:33:10,000
插入一个断点

3617
01:33:10,000 --> 01:33:10,000
引入 PDB

3618
01:33:10,000 --> 01:33:11,000
然后执行

3619
01:33:11,000 --> 01:33:14,000
进入 PDB 环境

3620
01:33:14,000 --> 01:33:14,000
那个点

3621
01:33:14,000 --> 01:33:16,000
完了之后

3622
01:33:16,000 --> 01:33:17,000
你就回到正常运行了

3623
01:33:17,000 --> 01:33:18,000
然后你要如何

3624
01:33:18,000 --> 01:33:20,000
就不能比较灵活的

3625
01:33:20,000 --> 01:33:21,000
换到其他的

3626
01:33:21,000 --> 01:33:22,000
断点里面

3627
01:33:22,000 --> 01:33:23,000
去检测另外一堆的状态

3628
01:33:23,000 --> 01:33:27,000
我觉得

3629
01:33:27,000 --> 01:33:28,000
其实对我来说

3630
01:33:28,000 --> 01:33:30,000
命令行调试工具

3631
01:33:30,000 --> 01:33:32,000
包括不管是 PDB 也好

3632
01:33:32,000 --> 01:33:33,000
GDB 也好

3633
01:33:33,000 --> 01:33:35,000
最大的问题是

3634
01:33:35,000 --> 01:33:37,000
都太难记了

3635
01:33:37,000 --> 01:33:38,000
因为

3636
01:33:38,000 --> 01:33:39,000
太什么

3637
01:33:39,000 --> 01:33:41,000
太难记

3638
01:33:41,000 --> 01:33:42,000
就是所有的指令

3639
01:33:42,000 --> 01:33:43,000
都太难记住了

3640
01:33:43,000 --> 01:33:43,000
而且

3641
01:33:43,000 --> 01:33:45,000
就每次用的时候

3642
01:33:45,000 --> 01:33:46,000
都要打开一个 manual

3643
01:33:46,000 --> 01:33:47,000
在那边查

3644
01:33:47,000 --> 01:33:48,000
说接下来我要干嘛

3645
01:33:48,000 --> 01:33:49,000
那显

3646
01:33:49,000 --> 01:33:50,000
是因为你用的

3647
01:33:50,000 --> 01:33:51,000
还不够多吗

3648
01:33:51,000 --> 01:33:51,000
对

3649
01:33:51,000 --> 01:33:52,000
我可能跟你差不多

3650
01:33:52,000 --> 01:33:53,000
就是有百分之

3651
01:33:53,000 --> 01:33:55,000
最多有百分之二十的时间

3652
01:33:55,000 --> 01:33:55,000
在 DB

3653
01:33:55,000 --> 01:33:56,000
然后在 DB

3654
01:33:56,000 --> 01:33:56,000
的时候

3655
01:33:56,000 --> 01:33:57,000
就

3656
01:33:57,000 --> 01:33:59,000
可能大学的时候

3657
01:33:59,000 --> 01:34:00,000
稍微好一点

3658
01:34:00,000 --> 01:34:00,000
大学的时候

3659
01:34:00,000 --> 01:34:02,000
还能记住

3660
01:34:02,000 --> 01:34:02,000
一个份指令

3661
01:34:02,000 --> 01:34:03,000
但是到现在真是

3662
01:34:03,000 --> 01:34:07,000
尤其是在用一门

3663
01:34:07,000 --> 01:34:08,000
已经很长时间

3664
01:34:08,000 --> 01:34:09,000
没有用过里面的时候

3665
01:34:09,000 --> 01:34:10,000
然后要用

3666
01:34:10,000 --> 01:34:11,000
要去用一个命令行向

3667
01:34:11,000 --> 01:34:12,000
那 DB

3668
01:34:12,000 --> 01:34:12,000
真的是

3669
01:34:12,000 --> 01:34:14,000
要了亲命

3670
01:34:14,000 --> 01:34:15,000
所以

3671
01:34:15,000 --> 01:34:16,000
这个时候你知道

3672
01:34:16,000 --> 01:34:17,000
你需要什么吗

3673
01:34:17,000 --> 01:34:20,000
这个时候你需要 cheat sheet

3674
01:34:20,000 --> 01:34:22,000
啊

3675
01:34:22,000 --> 01:34:22,000
OK

3676
01:34:22,000 --> 01:34:24,000
作弊纸啊

3677
01:34:24,000 --> 01:34:25,000
你得打一张

3678
01:34:25,000 --> 01:34:27,000
那个常用快捷键的东西

3679
01:34:27,000 --> 01:34:28,000
贴墙上

3680
01:34:28,000 --> 01:34:30,000
贴那个屏幕周围

3681
01:34:30,000 --> 01:34:32,000
能够一眼看得见

3682
01:34:32,000 --> 01:34:33,000
什么时候

3683
01:34:33,000 --> 01:34:34,000
该按哪个指令

3684
01:34:34,000 --> 01:34:36,000
我以前其实桌子上

3685
01:34:36,000 --> 01:34:37,000
专门有一个文件盒

3686
01:34:37,000 --> 01:34:39,000
是专门拿来放各种 cheat sheet

3687
01:34:39,000 --> 01:34:41,000
对啊

3688
01:34:41,000 --> 01:34:42,000
什么 SQL cheat sheet

3689
01:34:42,000 --> 01:34:45,000
Regular expression 的 cheat sheet

3690
01:34:45,000 --> 01:34:46,000
Vim cheat sheet

3691
01:34:46,000 --> 01:34:48,000
然后还有

3692
01:34:48,000 --> 01:34:48,000
对

3693
01:34:48,000 --> 01:34:50,000
各种各样 IDE 的 cheat sheet

3694
01:34:50,000 --> 01:34:52,000
现在所有这些纸

3695
01:34:52,000 --> 01:34:53,000
应该已经发黄了吧

3696
01:34:53,000 --> 01:34:56,000
效果又不是非常低

3697
01:34:56,000 --> 01:34:56,000
过来去了

3698
01:34:56,000 --> 01:34:57,000
对

3699
01:34:57,000 --> 01:34:59,000
我是有一个

3700
01:34:59,000 --> 01:35:01,000
在桌面有一个快捷方式

3701
01:35:01,000 --> 01:35:03,000
一个文件夹叫 cheat sheet

3702
01:35:03,000 --> 01:35:04,000
然后里面各种各样的

3703
01:35:04,000 --> 01:35:08,000
常用的一些工具的一些 cheat sheets

3704
01:35:08,000 --> 01:35:10,000
包括什么编辑器的快捷键啊

3705
01:35:10,000 --> 01:35:13,000
GP 这个什么 status code 啊

3706
01:35:13,000 --> 01:35:15,000
这个文件夹我一直都有

3707
01:35:15,000 --> 01:35:22,000
而且这个文件夹被我命名为 flight manual

3708
01:35:22,000 --> 01:35:25,000
飞行手册

3709
01:35:25,000 --> 01:35:25,000
对

3710
01:35:25,000 --> 01:35:29,000
这个不错

3711
01:35:29,000 --> 01:35:30,000
这个不错

3712
01:35:30,000 --> 01:35:31,000
对

3713
01:35:31,000 --> 01:35:33,000
但是怎么说呢

3714
01:35:33,000 --> 01:35:35,000
并没有什么卵

3715
01:35:35,000 --> 01:35:39,000
最终我还是转向了

3716
01:35:39,000 --> 01:35:40,000
至少在 debug 这件事情上

3717
01:35:40,000 --> 01:35:44,000
我还是转向了图形界面的 debugger

3718
01:35:44,000 --> 01:35:46,000
OK

3719
01:35:46,000 --> 01:35:49,000
然后有些什么高级的介绍一下

3720
01:35:49,000 --> 01:35:50,000
也不算高级吧

3721
01:35:50,000 --> 01:35:51,000
就是至少

3722
01:35:51,000 --> 01:35:52,000
比如说我们刚才介绍了这个

3723
01:35:52,000 --> 01:35:53,000
鼻祖级的 GDB

3724
01:35:53,000 --> 01:35:54,000
其实它有一个

3725
01:35:54,000 --> 01:35:58,000
图形化界面叫做 DDD

3726
01:35:58,000 --> 01:36:00,000
DDD

3727
01:36:00,000 --> 01:36:01,000
对

3728
01:36:01,000 --> 01:36:06,000
是一个 Xwindows 的 GDB 的前端

3729
01:36:06,000 --> 01:36:07,000
然后

3730
01:36:07,000 --> 01:36:11,000
我上次用 DDD

3731
01:36:11,000 --> 01:36:14,000
可能也是在上读研究生的时候

3732
01:36:14,000 --> 01:36:16,000
因为研究生毕业就再也没有写过 C 上去

3733
01:36:16,000 --> 01:36:19,000
当时觉得 DD 最大的一个卖点

3734
01:36:19,000 --> 01:36:23,000
就是它可以把一些比较常用的数据结构

3735
01:36:23,000 --> 01:36:25,000
用图形化的方式表现出来

3736
01:36:25,000 --> 01:36:27,000
比如说你写了一个单向链表

3737
01:36:27,000 --> 01:36:30,000
它分析了之后

3738
01:36:30,000 --> 01:36:31,000
可以把你的链表

3739
01:36:31,000 --> 01:36:33,000
用一个一个的方框画出来

3740
01:36:33,000 --> 01:36:35,000
然后告诉你说

3741
01:36:35,000 --> 01:36:36,000
这个链表的指针指向了

3742
01:36:36,000 --> 01:36:38,000
指向了那一个

3743
01:36:38,000 --> 01:36:42,000
这个链表上的节点的指针指向了另外一个节点

3744
01:36:42,000 --> 01:36:43,000
然后诸如此类

3745
01:36:43,000 --> 01:36:46,000
当然大部分时候它还是被拿来用

3746
01:36:46,000 --> 01:36:50,000
做那个 debugger

3747
01:36:50,000 --> 01:36:52,000
就是至少在 DD 上面

3748
01:36:52,000 --> 01:36:53,000
你可以用鼠标点了

3749
01:36:53,000 --> 01:36:56,000
你说我想在这一行设一个电断点

3750
01:36:56,000 --> 01:36:56,000
点那一行

3751
01:36:56,000 --> 01:36:59,000
然后点一下设的设的就可以了

3752
01:36:59,000 --> 01:37:04,000
终于可以不用去记那些单个指令的这些第一版人命令了

3753
01:37:04,000 --> 01:37:05,000
对

3754
01:37:05,000 --> 01:37:06,000
这是 DD 最大的一个卖点

3755
01:37:06,000 --> 01:37:09,000
所以其实你看到这些情况下

3756
01:37:09,000 --> 01:37:13,000
就用的没有像编辑器那么勤快的功能

3757
01:37:13,000 --> 01:37:18,000
有一个图形的方式去让你不用技术快捷键还是挺好的

3758
01:37:18,000 --> 01:37:20,000
对

3759
01:37:20,000 --> 01:37:24,000
我觉得其实一个独立的有图形界面的 debugger

3760
01:37:24,000 --> 01:37:28,000
配合一个专一的用来写程序的编辑器

3761
01:37:28,000 --> 01:37:32,000
是一个挺好的组合

3762
01:37:32,000 --> 01:37:38,000
就 Linux 的哲学之一不就是做一件事情

3763
01:37:38,000 --> 01:37:39,000
对

3764
01:37:39,000 --> 01:37:41,000
把这件事情做好

3765
01:37:41,000 --> 01:37:44,000
那我用一个编辑器专门来写程序

3766
01:37:44,000 --> 01:37:46,000
然后用另外一个 debugger 专门来 debug

3767
01:37:46,000 --> 01:37:47,000
其实也挺好的

3768
01:37:47,000 --> 01:37:51,000
包括很多人会说

3769
01:37:51,000 --> 01:37:54,000
我想要把我的 Vim 打造成一个 IDE

3770
01:37:54,000 --> 01:37:59,000
但这其实在某种程度上就背离了 Vim

3771
01:37:59,000 --> 01:38:01,000
当初被刊发出来的一个应用场景

3772
01:38:01,000 --> 01:38:07,000
你不如就好好的把它当作编辑器来用

3773
01:38:07,000 --> 01:38:09,000
然后等你真正需要去调试的时候

3774
01:38:09,000 --> 01:38:11,000
你跳到另外一个程序的文具调试就好了

3775
01:38:11,000 --> 01:38:15,000
因为在 Vim 里面你跟命令行的距离

3776
01:38:15,000 --> 01:38:17,000
其实就只有一个 Ctrl 加 Z 而已

3777
01:38:17,000 --> 01:38:17,000
不是

3778
01:38:17,000 --> 01:38:19,000
对

3779
01:38:19,000 --> 01:38:22,000
说到 Vim

3780
01:38:22,000 --> 01:38:24,000
我最近做了一个比较疯狂的事情

3781
01:38:24,000 --> 01:38:25,000
说来听听

3782
01:38:25,000 --> 01:38:27,000
我已经系好安全带了

3783
01:38:27,000 --> 01:38:27,000
说来听听

3784
01:38:27,000 --> 01:38:30,000
我把那个

3785
01:38:30,000 --> 01:38:31,000
就之前不是很多

3786
01:38:31,000 --> 01:38:32,000
就是那个

3787
01:38:32,000 --> 01:38:34,000
代码颜色高亮嘛

3788
01:38:34,000 --> 01:38:38,000
我把它调到最基本的模式了

3789
01:38:38,000 --> 01:38:42,000
就只会标出注释

3790
01:38:42,000 --> 01:38:43,000
用的鞋铁

3791
01:38:43,000 --> 01:38:47,000
然后那个叫字符串

3792
01:38:47,000 --> 01:38:51,000
用的是一个另外的颜色

3793
01:38:51,000 --> 01:38:51,000
对

3794
01:38:51,000 --> 01:38:55,000
然后其他的那些高亮的颜色都关掉了

3795
01:38:55,000 --> 01:38:56,000
Hotcore

3796
01:38:56,000 --> 01:39:01,000
Vim 里面是不是有一个默认的 SIM 叫做

3797
01:39:01,000 --> 01:39:03,000
Green

3798
01:39:03,000 --> 01:39:05,000
还是叫什么

3799
01:39:05,000 --> 01:39:10,000
就是它用不同灰度的绿色来显示关键字

3800
01:39:10,000 --> 01:39:11,000
对

3801
01:39:11,000 --> 01:39:12,000
我想问

3802
01:39:12,000 --> 01:39:14,000
Vim 默认的主题叫什么

3803
01:39:14,000 --> 01:39:15,000
就叫 Default 吗

3804
01:39:15,000 --> 01:39:16,000
对

3805
01:39:16,000 --> 01:39:24,000
我记得早期学到的比较重要的一个 Trick

3806
01:39:24,000 --> 01:39:28,000
就是在某些情况下

3807
01:39:28,000 --> 01:39:32,000
你可能 SSH 到另外一台主机上面的时候

3808
01:39:32,000 --> 01:39:37,000
发现那台主机和你的中端模拟器的配色不匹配

3809
01:39:37,000 --> 01:39:40,000
然后你中端模拟器里面可能紫色特别特别的暗

3810
01:39:40,000 --> 01:39:43,000
或者是蓝色特别特别的暗

3811
01:39:43,000 --> 01:39:43,000
根本看不清楚

3812
01:39:43,000 --> 01:39:47,000
那个远端服务器上这个代码到底是什么的时候

3813
01:39:47,000 --> 01:39:54,000
就在 Vim 里面打 setcolor simflord

3814
01:39:54,000 --> 01:39:57,000
就是精灵灵主

3815
01:39:57,000 --> 01:39:59,000
这个 SIM

3816
01:39:59,000 --> 01:40:02,000
然后在 99%的情况下

3817
01:40:02,000 --> 01:40:04,000
它会使得你能够看清楚

3818
01:40:04,000 --> 01:40:09,000
在 Default 的 SIM 之下看不清楚的代码

3819
01:40:09,000 --> 01:40:09,000
这是一个 Trick

3820
01:40:09,000 --> 01:40:10,000
这是什么原理

3821
01:40:10,000 --> 01:40:12,000
没有什么原理

3822
01:40:12,000 --> 01:40:14,000
就是黑色的问题

3823
01:40:14,000 --> 01:40:18,000
就是 Flord 的 SIM 的所有的颜色都比较鲜艳

3824
01:40:18,000 --> 01:40:20,000
可能是这个原理

3825
01:40:20,000 --> 01:40:21,000
对

3826
01:40:21,000 --> 01:40:22,000
明白

3827
01:40:22,000 --> 01:40:25,000
然后没有那些就是 Dark Blue 之类的一种颜色

3828
01:40:25,000 --> 01:40:27,000
会使得你的中端模拟器

3829
01:40:27,000 --> 01:40:30,000
如果那个色彩模式没有调队的话

3830
01:40:30,000 --> 01:40:35,000
会把那个远程服务器上的蓝色显示的特别暗

3831
01:40:35,000 --> 01:40:39,000
我到现在为止还没找到那个单色的

3832
01:40:39,000 --> 01:40:43,000
不过反正我现在就是基于一个叫做 eink 的

3833
01:40:43,000 --> 01:40:44,000
这个色

3834
01:40:44,000 --> 01:40:46,000
color scheme 改的

3835
01:40:46,000 --> 01:40:50,000
就是这个代码注视会是一个灰色的

3836
01:40:50,000 --> 01:40:51,000
就是浅一点的颜色

3837
01:40:51,000 --> 01:40:52,000
浅灰色

3838
01:40:52,000 --> 01:40:54,000
然后是鞋体的

3839
01:40:54,000 --> 01:40:57,000
然后那个字符串会是鞋体的

3840
01:40:57,000 --> 01:40:59,000
然后其他都是一个默认的黑色的字

3841
01:40:59,000 --> 01:41:01,000
没有其他颜色

3842
01:41:01,000 --> 01:41:02,000
Hurcore

3843
01:41:02,000 --> 01:41:06,000
那它叫 eink 吗

3844
01:41:06,000 --> 01:41:07,000
你还是有原因的

3845
01:41:07,000 --> 01:41:08,000
嗯

3846
01:41:08,000 --> 01:41:10,000
就有电子默设的效果

3847
01:41:10,000 --> 01:41:13,000
说到这里你用了什么配色

3848
01:41:13,000 --> 01:41:20,000
我的配色是一个经过改动的 monokai

3849
01:41:20,000 --> 01:41:23,000
monokai 是不是很鲜呀

3850
01:41:23,000 --> 01:41:24,000
那个版本

3851
01:41:24,000 --> 01:41:26,000
还好吧

3852
01:41:26,000 --> 01:41:32,000
我其实不是很清楚这个编辑器配色的鲜艳的标准是什么

3853
01:41:32,000 --> 01:41:35,000
但我发生现在用的是一个自己改过的 monokai

3854
01:41:35,000 --> 01:41:37,000
ok

3855
01:41:37,000 --> 01:41:41,000
然后 monokai 是一个暗的暗色背景的是吧

3856
01:41:41,000 --> 01:41:42,000
是暗色背景

3857
01:41:42,000 --> 01:41:43,000
我以前一直在用 solarize

3858
01:41:43,000 --> 01:41:46,000
就是那个号称

3859
01:41:46,000 --> 01:41:47,000
科学配色法

3860
01:41:47,000 --> 01:41:49,000
科学配色的 solarize

3861
01:41:49,000 --> 01:41:52,000
但是怎么说呢

3862
01:41:52,000 --> 01:41:53,000
就用过一段时间之后

3863
01:41:53,000 --> 01:41:55,000
我发现在强

3864
01:41:55,000 --> 01:42:00,000
在那个侧面射过来的光线比较强的情况下

3865
01:42:00,000 --> 01:42:01,000
会很容易看不清楚

3866
01:42:01,000 --> 01:42:06,000
它的那个 contrast 就是对比度是不高的

3867
01:42:06,000 --> 01:42:08,000
对比度比较低的

3868
01:42:08,000 --> 01:42:10,000
我觉得太注重美感了

3869
01:42:10,000 --> 01:42:12,000
漂亮是漂亮

3870
01:42:12,000 --> 01:42:15,000
但是用多了是感觉不是很好

3871
01:42:15,000 --> 01:42:17,000
然后 solarize 还有一个问题

3872
01:42:17,000 --> 01:42:20,000
就是它在 256 色的情况下

3873
01:42:20,000 --> 01:42:23,000
表现不是非常好

3874
01:42:23,000 --> 01:42:25,000
我试过很多很多方法

3875
01:42:25,000 --> 01:42:27,000
试图让 Vim 在

3876
01:42:27,000 --> 01:42:30,000
terminal 模式之下

3877
01:42:30,000 --> 01:42:32,000
使用比较正确的

3878
01:42:32,000 --> 01:42:35,000
或者比较养眼的 solarize 的配色

3879
01:42:35,000 --> 01:42:38,000
然后发现要改很多很多东西

3880
01:42:38,000 --> 01:42:44,000
首先你的 terminal 的那个 term 这个字符要改

3881
01:42:44,000 --> 01:42:46,000
这个环境变脸要改

3882
01:42:46,000 --> 01:42:50,000
然后 Vim 里面的 sim 要改

3883
01:42:50,000 --> 01:42:51,000
color sim 要改

3884
01:42:51,000 --> 01:42:54,000
然后有可能你还要在 bash 一上来的时候

3885
01:42:54,000 --> 01:42:56,000
运行一个脚本来设定某些

3886
01:42:56,000 --> 01:42:59,000
我不是非常清楚

3887
01:42:59,000 --> 01:43:00,000
它到底干了什么

3888
01:43:00,000 --> 01:43:02,000
那些一些 tricks

3889
01:43:02,000 --> 01:43:05,000
才可以把颜色设定的比较正确

3890
01:43:05,000 --> 01:43:06,000
这挺痛苦的

3891
01:43:06,000 --> 01:43:07,000
monica 也没这个问题

3892
01:43:07,000 --> 01:43:12,000
Solarize 它那个的主要问题是

3893
01:43:12,000 --> 01:43:15,000
它默认的那个就是 terminal

3894
01:43:15,000 --> 01:43:18,000
那个 console 的色盘会跟其他的非常不一样

3895
01:43:18,000 --> 01:43:20,000
对它会逼着你去改那个色盘

3896
01:43:20,000 --> 01:43:25,000
你会把前 16 色改成完全另外一份场景

3897
01:43:25,000 --> 01:43:26,000
然后改了之后会有个问题

3898
01:43:26,000 --> 01:43:30,000
就是接用别的那种非 Solarize 的色盘的话

3899
01:43:30,000 --> 01:43:31,000
就会有点问题

3900
01:43:31,000 --> 01:43:34,000
经常那个字就看不见

3901
01:43:34,000 --> 01:43:35,000
没错

3902
01:43:35,000 --> 01:43:36,000
就比如说你装

3903
01:43:36,000 --> 01:43:39,000
如果你用 Solarize 的官方解决方案

3904
01:43:39,000 --> 01:43:44,000
把你的那个 iterm 2 的调色盘改了

3905
01:43:44,000 --> 01:43:46,000
此时你在用比如说 brew

3906
01:43:46,000 --> 01:43:49,000
brew 有时候会用不同颜色来告诉你说

3907
01:43:49,000 --> 01:43:51,000
这个 package 是下载完了

3908
01:43:51,000 --> 01:43:53,000
还是出错了之类的

3909
01:43:53,000 --> 01:43:55,000
此时你会发现所有这些颜色都变了

3910
01:43:55,000 --> 01:43:57,000
就可能本来是一个绿色的对抗

3911
01:43:57,000 --> 01:43:58,000
现在变成了白色

3912
01:43:58,000 --> 01:44:01,000
对非常不舒服

3913
01:44:01,000 --> 01:44:06,000
所以其实说到这里要

3914
01:44:06,000 --> 01:44:08,000
刚才问那个你用暗色背景的话

3915
01:44:08,000 --> 01:44:11,000
你在那个文档和嘴边之间切换的时候

3916
01:44:11,000 --> 01:44:14,000
眼睛不会觉得突然一明一暗

3917
01:44:14,000 --> 01:44:16,000
只有在院里会有这个问题

3918
01:44:16,000 --> 01:44:19,000
就是在深夜里面写在马上会有这个问题

3919
01:44:19,000 --> 01:44:22,000
不对啊白天其实这个问题更严重

3920
01:44:22,000 --> 01:44:26,000
因为其实你看白天之后环境都是亮的

3921
01:44:26,000 --> 01:44:28,000
我觉得夜里比较

3922
01:44:28,000 --> 01:44:32,000
夜里这种切换的场景的时候

3923
01:44:32,000 --> 01:44:33,000
你眼睛会疼

3924
01:44:33,000 --> 01:44:34,000
但是白天就还好

3925
01:44:34,000 --> 01:44:35,000
如果你的背景足够亮的话

3926
01:44:35,000 --> 01:44:38,000
白天这个问题就没有那么突出

3927
01:44:38,000 --> 01:44:38,000
我觉得

3928
01:44:38,000 --> 01:44:41,000
对但是你如果背景比较亮的话

3929
01:44:41,000 --> 01:44:42,000
你那个叫什么

3930
01:44:42,000 --> 01:44:46,000
你看那个黑色代码区就很成问题了

3931
01:44:46,000 --> 01:44:49,000
因为你这个时候是要放大你的瞳孔去 focus 到

3932
01:44:49,000 --> 01:44:53,000
那个因为暗色底的话

3933
01:44:53,000 --> 01:44:55,000
它字是白的嘛

3934
01:44:55,000 --> 01:44:56,000
字是亮色的

3935
01:44:56,000 --> 01:44:59,000
它的光线是比较少的

3936
01:44:59,000 --> 01:45:00,000
这个时候你要放大瞳孔

3937
01:45:00,000 --> 01:45:02,000
才能够接受到足够的光去辨识它

3938
01:45:02,000 --> 01:45:04,000
但与此同时呢

3939
01:45:04,000 --> 01:45:07,000
你的这个环境的光照是很高的

3940
01:45:07,000 --> 01:45:09,000
这个是有很多这种周围的环境

3941
01:45:09,000 --> 01:45:11,000
你刚射到你的瞳孔里面去

3942
01:45:11,000 --> 01:45:12,000
其实对这个是挺

3943
01:45:12,000 --> 01:45:14,000
眼睛是挺伤的

3944
01:45:14,000 --> 01:45:16,000
对会会引发眼目皮了

3945
01:45:16,000 --> 01:45:17,000
我同意的观点

3946
01:45:17,000 --> 01:45:20,000
不过我可能另外一个原因

3947
01:45:20,000 --> 01:45:22,000
就是我对这个事情不是特别敏感的

3948
01:45:22,000 --> 01:45:24,000
就是我有两个显示器

3949
01:45:24,000 --> 01:45:27,000
然后那个文档放在一个显示器上

3950
01:45:27,000 --> 01:45:28,000
编辑在另外一个显示器上

3951
01:45:28,000 --> 01:45:29,000
编辑永远是黑的

3952
01:45:29,000 --> 01:45:31,000
OK

3953
01:45:31,000 --> 01:45:32,000
就还好吧

3954
01:45:32,000 --> 01:45:37,000
所以其实这点那个 Solaris 的一个好处

3955
01:45:37,000 --> 01:45:40,000
就是它是有暗色和亮色两个版本的

3956
01:45:40,000 --> 01:45:40,000
对

3957
01:45:40,000 --> 01:45:42,000
我的当时的方案就是说

3958
01:45:42,000 --> 01:45:44,000
你会结合案是不是

3959
01:45:44,000 --> 01:45:45,000
我的方案里面就是

3960
01:45:45,000 --> 01:45:48,000
我当时想到就说如果环境很暗

3961
01:45:48,000 --> 01:45:50,000
我就用那个暗色版本的

3962
01:45:50,000 --> 01:45:50,000
环境很亮

3963
01:45:50,000 --> 01:45:51,000
我就用亮色版本

3964
01:45:51,000 --> 01:45:52,000
后来发现

3965
01:45:52,000 --> 01:45:53,000
基本上都是很亮的环境

3966
01:45:53,000 --> 01:45:55,000
所以就一直是用那个亮色版本

3967
01:45:55,000 --> 01:45:57,000
就 light 那个版本

3968
01:45:57,000 --> 01:46:00,000
我也在 VIM 里面绑定过快捷键

3969
01:46:00,000 --> 01:46:01,000
就是按一下

3970
01:46:01,000 --> 01:46:03,000
按个 F 9 吧

3971
01:46:03,000 --> 01:46:03,000
我记得是什么

3972
01:46:03,000 --> 01:46:07,000
可以在亮色模式和暗色模式之间切换

3973
01:46:07,000 --> 01:46:10,000
但后来还是觉得弹道

3974
01:46:10,000 --> 01:46:11,000
算了

3975
01:46:11,000 --> 01:46:14,000
OK

3976
01:46:14,000 --> 01:46:17,000
所以还有刚才就是吐槽

3977
01:46:17,000 --> 01:46:18,000
那个颜色的问题

3978
01:46:18,000 --> 01:46:22,000
你不觉得现在那种 Terminal

3979
01:46:22,000 --> 01:46:23,000
或者 Council

3980
01:46:23,000 --> 01:46:23,000
这种东西

3981
01:46:23,000 --> 01:46:26,000
它处理这个色彩

3982
01:46:26,000 --> 01:46:28,000
那些方式都非常

3983
01:46:28,000 --> 01:46:30,000
Ancient

3984
01:46:30,000 --> 01:46:31,000
非常原始

3985
01:46:31,000 --> 01:46:33,000
都是历史移动问题

3986
01:46:33,000 --> 01:46:33,000
我觉得

3987
01:46:33,000 --> 01:46:37,000
就我们今天还在使用 Terminal Simulator

3988
01:46:37,000 --> 01:46:38,000
这件事情

3989
01:46:38,000 --> 01:46:41,000
其实仔细想想就很不可思议了

3990
01:46:41,000 --> 01:46:42,000
每个人都

3991
01:46:42,000 --> 01:46:44,000
对

3992
01:46:44,000 --> 01:46:45,000
每个人都知道 Command Line

3993
01:46:45,000 --> 01:46:46,000
非常非常重要

3994
01:46:46,000 --> 01:46:49,000
或是至少在目前 Command Line 的

3995
01:46:49,000 --> 01:46:52,000
还是没有被人扔到历史垃圾堆里

3996
01:46:52,000 --> 01:46:56,000
但从来没有一个人能够成功的重新发明一遍轮子

3997
01:46:56,000 --> 01:46:58,000
然后把 CLI 做得好一点

3998
01:46:58,000 --> 01:47:03,000
就那个命令行本身我觉得是问题不大

3999
01:47:03,000 --> 01:47:05,000
但是就是我们现在那个实现方式

4000
01:47:05,000 --> 01:47:06,000
真是太古老了

4001
01:47:06,000 --> 01:47:08,000
比如说刚才你说要实现那个文字

4002
01:47:08,000 --> 01:47:11,000
要通过那个输出字符来各种转译

4003
01:47:11,000 --> 01:47:13,000
然后甚至连最底层的

4004
01:47:13,000 --> 01:47:18,000
你在 Linux 上面去做一个 Console 接口

4005
01:47:18,000 --> 01:47:20,000
这样一个什么虚拟的 TTY 设备

4006
01:47:20,000 --> 01:47:21,000
哇真是

4007
01:47:21,000 --> 01:47:22,000
对

4008
01:47:22,000 --> 01:47:24,000
其实我指的就是这件事情

4009
01:47:24,000 --> 01:47:26,000
就是我们居然还在使用这么古老的

4010
01:47:26,000 --> 01:47:30,000
可以追溯到 1970 年代的 Terminal Simulator

4011
01:47:30,000 --> 01:47:37,000
可能这个地方还是可以给这个对历史不是特别

4012
01:47:37,000 --> 01:47:40,000
当然我也不是特别属于的听众们介绍的

4013
01:47:40,000 --> 01:47:46,000
就是我们现在使用的那个黑黑的可以敲文字进去的

4014
01:47:46,000 --> 01:47:50,000
学编程莫名其妙一定都要用到这个 Terminal

4015
01:47:50,000 --> 01:47:55,000
其实是在模拟 70 年代的电传打字机

4016
01:47:55,000 --> 01:47:57,000
如果你一定要追溯到远就是源头

4017
01:47:57,000 --> 01:48:01,000
在就是说在显示器这个东西出现之前

4018
01:48:01,000 --> 01:48:06,000
计算机是通过打印机就直接连在一个打印机上

4019
01:48:06,000 --> 01:48:07,000
往纸上输出东西

4020
01:48:07,000 --> 01:48:09,000
然后这个东西

4021
01:48:09,000 --> 01:48:13,000
这个东西的最基本的运作机里

4022
01:48:13,000 --> 01:48:16,000
比如说 ASCII 码之类的这种东西

4023
01:48:16,000 --> 01:48:19,000
一直都原封不动的被继承到了今天

4024
01:48:19,000 --> 01:48:22,000
然后当显示器出现了之后

4025
01:48:22,000 --> 01:48:24,000
一开始也是只能像电传打字机一样

4026
01:48:24,000 --> 01:48:27,000
一次编辑一行的内容

4027
01:48:27,000 --> 01:48:28,000
然后这一行的内容编辑完了

4028
01:48:28,000 --> 01:48:35,000
你按一下回车才会把这一行的内容输出在显示器上

4029
01:48:35,000 --> 01:48:38,000
直到就是我们现在习惯的这种 VIM

4030
01:48:38,000 --> 01:48:40,000
你打开 VIM 之后光标从

4031
01:48:40,000 --> 01:48:42,000
wait a second

4032
01:48:42,000 --> 01:48:43,000
光标还是在左上

4033
01:48:43,000 --> 01:48:47,000
光标从你当前好像跳到左上

4034
01:48:47,000 --> 01:48:49,000
并且你可以跳到任意一行

4035
01:48:49,000 --> 01:48:50,000
这样你多按几次回车

4036
01:48:50,000 --> 01:48:51,000
你就可以跳到任意一行

4037
01:48:51,000 --> 01:48:53,000
然后再跳回来这种特性

4038
01:48:53,000 --> 01:48:55,000
都已经是非常高端的特性了

4039
01:48:55,000 --> 01:48:59,000
在单侧显示器的时代

4040
01:48:59,000 --> 01:49:03,000
你可以想象说早期单侧显示器的时代

4041
01:49:03,000 --> 01:49:05,000
那些电脑键盘上是没有方向键的

4042
01:49:05,000 --> 01:49:07,000
为什么呢

4043
01:49:07,000 --> 01:49:09,000
因为你按下方向键没有什么锁

4044
01:49:09,000 --> 01:49:12,000
你根本不可能把光标跳到上面一行

4045
01:49:12,000 --> 01:49:12,000
或者下面一行

4046
01:49:12,000 --> 01:49:16,000
因为你的电脑就只理解当前行的内容

4047
01:49:16,000 --> 01:49:20,000
而我们现在使用了这样一个小的

4048
01:49:20,000 --> 01:49:22,000
Terminal Simulator 这么一个 APP

4049
01:49:22,000 --> 01:49:25,000
其实是在原封不动的模拟这些 70 年的技术

4050
01:49:25,000 --> 01:49:29,000
而我们对此也都是司空见惯的

4051
01:49:29,000 --> 01:49:31,000
就从来没有人想过要把它

4052
01:49:31,000 --> 01:49:31,000
但是好吧

4053
01:49:31,000 --> 01:49:33,000
我必须承认说

4054
01:49:33,000 --> 01:49:37,000
Plan 9 其实是已经解决了这个问题的

4055
01:49:37,000 --> 01:49:39,000
但是就像我们知道的 Plan 9

4056
01:49:39,000 --> 01:49:40,000
因为它太好了

4057
01:49:40,000 --> 01:49:41,000
所以它不可能流行起来

4058
01:49:41,000 --> 01:49:43,000
我们就

4059
01:49:43,000 --> 01:49:45,000
这是一个非常的更新

4060
01:49:45,000 --> 01:49:48,000
Doomed to live in this ancient world

4061
01:49:48,000 --> 01:49:52,000
土了好多草

4062
01:49:52,000 --> 01:49:55,000
这个绕得有点远

4063
01:49:55,000 --> 01:49:57,000
对 还是得把圈子兜回来

4064
01:49:57,000 --> 01:50:00,000
我们接着讲那个 Debugging 的事情

4065
01:50:00,000 --> 01:50:03,000
这个我们之后有时间再来探讨这个问题

4066
01:50:03,000 --> 01:50:06,000
其实还有挺多有意思的事情可以去讨论

4067
01:50:06,000 --> 01:50:10,000
可能从另一方侧面讲说

4068
01:50:10,000 --> 01:50:13,000
为什么 Terminal Simulator 这么多年以来

4069
01:50:13,000 --> 01:50:14,000
一直没有进展

4070
01:50:14,000 --> 01:50:17,000
一个原因也就是 Windows

4071
01:50:17,000 --> 01:50:21,000
或者说图形化界面实在是发展的太快了

4072
01:50:21,000 --> 01:50:23,000
人们没有时间的火停下来

4073
01:50:23,000 --> 01:50:31,000
回过头去好好的把命令行界面的承载容器改变一下

4074
01:50:31,000 --> 01:50:32,000
因为如果你要去问

4075
01:50:32,000 --> 01:50:36,000
这个世界上到底是使用 IDE 的写程序的人多

4076
01:50:36,000 --> 01:50:38,000
还是使用命令行写程序的人多

4077
01:50:38,000 --> 01:50:43,000
我觉得一个比较合理的推断是

4078
01:50:43,000 --> 01:50:46,000
肯定是用 IDE 的写程序的人多

4079
01:50:46,000 --> 01:50:47,000
就是使用一个

4080
01:50:47,000 --> 01:50:48,000
压倒性多数

4081
01:50:48,000 --> 01:50:51,000
对 压倒性 99%以上的人

4082
01:50:51,000 --> 01:50:53,000
是在用 IDE 写程序的

4083
01:50:53,000 --> 01:50:54,000
想要反驳这件事情的人

4084
01:50:54,000 --> 01:50:56,000
首先要想到有很多人

4085
01:50:56,000 --> 01:50:58,000
他不是专业的程序员

4086
01:50:58,000 --> 01:51:01,000
但他仍旧必须通过某种工具来编程序

4087
01:51:01,000 --> 01:51:04,000
你让他们去使用命令行是非常不人道了

4088
01:51:04,000 --> 01:51:04,000
好吗

4089
01:51:04,000 --> 01:51:07,000
比如说刚才节目一开始提到

4090
01:51:07,000 --> 01:51:11,000
研究脑科学的赵晨博士

4091
01:51:11,000 --> 01:51:15,000
你为什么要逼他去用命令行写程序呢

4092
01:51:15,000 --> 01:51:15,000
对吧

4093
01:51:15,000 --> 01:51:19,000
或者是一些乃至广义上的

4094
01:51:19,000 --> 01:51:24,000
写这个 Office 里面的 VB script 的人

4095
01:51:24,000 --> 01:51:25,000
都可以在一种

4096
01:51:25,000 --> 01:51:27,000
对 使用比较

4097
01:51:27,000 --> 01:51:33,000
他所使用的工具都可以当做一种广义上的 IDE 来看待

4098
01:51:33,000 --> 01:51:33,000
对

4099
01:51:33,000 --> 01:51:34,000
对

4100
01:51:34,000 --> 01:51:38,000
那什么是 IDE 呢

4101
01:51:38,000 --> 01:51:39,000
有一个解法就是

4102
01:51:39,000 --> 01:51:41,000
Integrated Debug Environment

4103
01:51:41,000 --> 01:51:43,000
也就是 IDE 这个工具

4104
01:51:43,000 --> 01:51:46,000
最重要的工程之一就是帮助你 DEBug

4105
01:51:46,000 --> 01:51:49,000
集成主扣环境

4106
01:51:49,000 --> 01:51:50,000
对

4107
01:51:50,000 --> 01:51:57,000
他把你的 Editor 和项目管理工具和版本控制工具

4108
01:51:57,000 --> 01:52:02,000
以及最重要的一个 Debug 工具集成在一起

4109
01:52:02,000 --> 01:52:07,000
才孕育出了这么一个非常好用的 IDE 环境

4110
01:52:07,000 --> 01:52:11,000
所以 Rail 你是

4111
01:52:11,000 --> 01:52:17,000
即便现在也是会在公司里面也不用 IDE 的吗

4112
01:52:17,000 --> 01:52:20,000
这个问题有点绕

4113
01:52:20,000 --> 01:52:21,000
就是你现在仍旧

4114
01:52:21,000 --> 01:52:23,000
哪怕是在工作的时候也不用 IDE 吗

4115
01:52:23,000 --> 01:52:26,000
我自己是不用 IDE 的

4116
01:52:26,000 --> 01:52:28,000
但我看有些其他的人

4117
01:52:28,000 --> 01:52:31,000
他们会用一些东西去写

4118
01:52:31,000 --> 01:52:31,000
当然你知道

4119
01:52:31,000 --> 01:52:32,000
现在因为

4120
01:52:32,000 --> 01:52:34,000
现在没有写 APP 是显学

4121
01:52:34,000 --> 01:52:35,000
对吧

4122
01:52:35,000 --> 01:52:36,000
就是各种应用显学

4123
01:52:36,000 --> 01:52:38,000
这个时候你就不得不用这个什么

4124
01:52:38,000 --> 01:52:39,000
比如说 Xcode

4125
01:52:39,000 --> 01:52:41,000
你逃不掉的

4126
01:52:41,000 --> 01:52:42,000
对

4127
01:52:42,000 --> 01:52:45,000
然后 Xcode 当然是一个比较极端的例子

4128
01:52:45,000 --> 01:52:47,000
他逼迫你用这个

4129
01:52:47,000 --> 01:52:47,000
对

4130
01:52:47,000 --> 01:52:50,000
但其他你也没得太多选

4131
01:52:50,000 --> 01:52:52,000
比如说你写这个 Java 应用

4132
01:52:52,000 --> 01:52:55,000
你跑不掉 Eclipse 或 Jetbrain 之类的

4133
01:52:55,000 --> 01:52:56,000
对吧

4134
01:52:56,000 --> 01:52:56,000
不

4135
01:52:56,000 --> 01:52:59,000
我觉得 Java 的可选的 IDE 还是蛮多的

4136
01:52:59,000 --> 01:53:01,000
但是可选的 IDE 是很多

4137
01:53:01,000 --> 01:53:03,000
但是他们都是用 IDE 写的

4138
01:53:03,000 --> 01:53:07,000
很少见用 VIM 写 Java 的人

4139
01:53:07,000 --> 01:53:10,000
用 VIM 写 Xcode 的人

4140
01:53:10,000 --> 01:53:12,000
是比较

4141
01:53:12,000 --> 01:53:13,000
对

4142
01:53:13,000 --> 01:53:17,000
然后还有就是那个 Visual Studio 这个系列的

4143
01:53:17,000 --> 01:53:22,000
基本上也是比较少用这个纯编辑器写的

4144
01:53:22,000 --> 01:53:23,000
对

4145
01:53:23,000 --> 01:53:25,000
我在知乎上看到过一个说法

4146
01:53:25,000 --> 01:53:26,000
就是说

4147
01:53:26,000 --> 01:53:30,000
Cshop 和 Java 之类的都是叫什么

4148
01:53:30,000 --> 01:53:33,000
面向 IDE 的变成语言

4149
01:53:33,000 --> 01:53:35,000
就是他们从设计之初

4150
01:53:35,000 --> 01:53:38,000
就是考虑到这个语言一定要在 IDE 里面被写

4151
01:53:38,000 --> 01:53:41,000
才比较正常

4152
01:53:41,000 --> 01:53:44,000
所以他们才不会去考虑什么

4153
01:53:44,000 --> 01:53:48,000
那个方法的名称太长啊

4154
01:53:48,000 --> 01:53:49,000
或者是关键字太长啊

4155
01:53:49,000 --> 01:53:50,000
之类的问题

4156
01:53:50,000 --> 01:53:50,000
对

4157
01:53:50,000 --> 01:53:51,000
反正有自动补齐嘛

4158
01:53:51,000 --> 01:53:53,000
没错

4159
01:53:53,000 --> 01:53:55,000
比如说 integer 一定要写上 integer

4160
01:53:55,000 --> 01:53:55,000
不像

4161
01:53:55,000 --> 01:53:58,000
不像 C 里面写个 int

4162
01:53:58,000 --> 01:53:59,000
或者是

4163
01:53:59,000 --> 01:54:01,000
C 里面

4164
01:54:01,000 --> 01:54:03,000
比如一开始说到那个 printf

4165
01:54:03,000 --> 01:54:05,000
就刚学编程的时候

4166
01:54:05,000 --> 01:54:06,000
你想过 f 代表什么吧

4167
01:54:06,000 --> 01:54:11,000
就是你刚才说的时候

4168
01:54:11,000 --> 01:54:13,000
你说这个函数是

4169
01:54:13,000 --> 01:54:14,000
是系统的一个函数

4170
01:54:14,000 --> 01:54:15,000
它可以输出一个字符串

4171
01:54:15,000 --> 01:54:17,000
当时其实我想纠正你说

4172
01:54:17,000 --> 01:54:17,000
不对

4173
01:54:17,000 --> 01:54:20,000
输出字符串是 puts

4174
01:54:20,000 --> 01:54:21,000
那个 s 才代表 strain

4175
01:54:21,000 --> 01:54:25,000
而 printf 的 f 代表的

4176
01:54:25,000 --> 01:54:26,000
其实是 format

4177
01:54:26,000 --> 01:54:29,000
就是 printf 这个函数最大的功能

4178
01:54:29,000 --> 01:54:31,000
是让你输出一些内容

4179
01:54:31,000 --> 01:54:32,000
然后这个内容是

4180
01:54:32,000 --> 01:54:35,000
有一个特定的 format

4181
01:54:35,000 --> 01:54:37,000
所以它叫 printf

4182
01:54:37,000 --> 01:54:39,000
但是如果是一个面向

4183
01:54:39,000 --> 01:54:42,000
IDE 的编程员的话

4184
01:54:42,000 --> 01:54:44,000
它此处一定会不令

4185
01:54:44,000 --> 01:54:47,000
字符竖的

4186
01:54:47,000 --> 01:54:50,000
把这个方法命名为

4187
01:54:50,000 --> 01:54:54,000
output string with format

4188
01:54:54,000 --> 01:54:54,000
对

4189
01:54:54,000 --> 01:54:59,000
与此类似的

4190
01:54:59,000 --> 01:55:00,000
比如说还有什么 sprintf

4191
01:55:00,000 --> 01:55:02,000
第一个 s 代表什么呢

4192
01:55:02,000 --> 01:55:03,000
代表 strain

4193
01:55:03,000 --> 01:55:06,000
就是把 format 的内容

4194
01:55:06,000 --> 01:55:08,000
输出到另外一个字符串

4195
01:55:08,000 --> 01:55:12,000
其实这些早期的黑客们

4196
01:55:12,000 --> 01:55:13,000
为了节省时间

4197
01:55:13,000 --> 01:55:18,000
以及没有 IDE 的状况

4198
01:55:18,000 --> 01:55:20,000
导致于导致他们开发了

4199
01:55:20,000 --> 01:55:23,000
这么一套非常简略的语言

4200
01:55:23,000 --> 01:55:25,000
也对早期学编程的人

4201
01:55:25,000 --> 01:55:27,000
造成了很一定的障碍

4202
01:55:27,000 --> 01:55:29,000
就是有些人他可能不是

4203
01:55:29,000 --> 01:55:33,000
不习惯那种一上来说

4204
01:55:33,000 --> 01:55:34,000
我给你个例子

4205
01:55:34,000 --> 01:55:35,000
你先别管 321

4206
01:55:35,000 --> 01:55:37,000
你把它敲出来

4207
01:55:37,000 --> 01:55:38,000
然后做别的

4208
01:55:38,000 --> 01:55:40,000
一步一步学下去再说

4209
01:55:40,000 --> 01:55:42,000
他可能一上来就会说

4210
01:55:42,000 --> 01:55:43,000
就会想要明白说

4211
01:55:43,000 --> 01:55:44,000
这个 main 到底是干什么

4212
01:55:44,000 --> 01:55:46,000
这个 int 到底是干什么

4213
01:55:46,000 --> 01:55:47,000
然后这个 printf 的 f

4214
01:55:47,000 --> 01:55:48,000
到底代表什么

4215
01:55:48,000 --> 01:55:51,000
然后如果他在

4216
01:55:51,000 --> 01:55:52,000
一上来学的时候

4217
01:55:52,000 --> 01:55:54,000
这些在他看来非常

4218
01:55:54,000 --> 01:55:56,000
基本的细节都找不到答案的话

4219
01:55:56,000 --> 01:55:58,000
他很快就没有兴趣了

4220
01:55:58,000 --> 01:55:59,000
我觉得我早期就是这样

4221
01:55:59,000 --> 01:56:02,000
有点那个看起来

4222
01:56:02,000 --> 01:56:04,000
有点 cryptic 那个代码

4223
01:56:04,000 --> 01:56:05,000
对

4224
01:56:05,000 --> 01:56:07,000
密文

4225
01:56:07,000 --> 01:56:08,000
刚才有点露出了

4226
01:56:08,000 --> 01:56:10,000
就是那些命名这么短

4227
01:56:10,000 --> 01:56:11,000
除了也没有 IDE 的

4228
01:56:11,000 --> 01:56:12,000
这个自动补习的功能以外

4229
01:56:12,000 --> 01:56:14,000
还有一个更重要的点

4230
01:56:14,000 --> 01:56:15,000
刚才我们讲

4231
01:56:15,000 --> 01:56:17,000
扯了那堆的 terminal 关系

4232
01:56:17,000 --> 01:56:18,000
就是早期的那些 console

4233
01:56:18,000 --> 01:56:20,000
宽度比较有限

4234
01:56:20,000 --> 01:56:22,000
只有 80 个字符

4235
01:56:22,000 --> 01:56:22,000
对没错

4236
01:56:22,000 --> 01:56:24,000
是 60 个字符这样

4237
01:56:24,000 --> 01:56:25,000
他如果那个方法名

4238
01:56:25,000 --> 01:56:26,000
特别长的话

4239
01:56:26,000 --> 01:56:28,000
他那一行就被拒了

4240
01:56:28,000 --> 01:56:30,000
一行可能就写一个函数

4241
01:56:30,000 --> 01:56:31,000
还写不完

4242
01:56:31,000 --> 01:56:31,000
调用还写不完

4243
01:56:31,000 --> 01:56:32,000
对

4244
01:56:32,000 --> 01:56:34,000
就这么一个考虑在里面

4245
01:56:34,000 --> 01:56:35,000
那后来有了 IDE

4246
01:56:35,000 --> 01:56:36,000
都是在这个

4247
01:56:36,000 --> 01:56:38,000
故意的图形界面情况下

4248
01:56:38,000 --> 01:56:40,000
那个宽度就可以比较有限

4249
01:56:40,000 --> 01:56:42,000
就有这个富裕了

4250
01:56:42,000 --> 01:56:44,000
而且像现在那个什么

4251
01:56:44,000 --> 01:56:46,000
用的那个开发用的屏幕

4252
01:56:46,000 --> 01:56:48,000
动辄什么 1920 款

4253
01:56:48,000 --> 01:56:49,000
算是更多

4254
01:56:49,000 --> 01:56:49,000
对吧

4255
01:56:49,000 --> 01:56:50,000
所以这个完全不是问题

4256
01:56:50,000 --> 01:56:52,000
没错

4257
01:56:52,000 --> 01:56:54,000
另外一个原因就是

4258
01:56:54,000 --> 01:56:55,000
早期的电传

4259
01:56:55,000 --> 01:56:59,000
早期的中端是一个

4260
01:56:59,000 --> 01:57:01,000
就是等于是

4261
01:57:01,000 --> 01:57:02,000
只有一个键盘和一个显示器

4262
01:57:02,000 --> 01:57:04,000
然后你按一个键

4263
01:57:04,000 --> 01:57:06,000
这个键要

4264
01:57:06,000 --> 01:57:07,000
这个键按下去的电讯号

4265
01:57:07,000 --> 01:57:09,000
先传到服务器上

4266
01:57:09,000 --> 01:57:10,000
然后再传回来

4267
01:57:10,000 --> 01:57:11,000
才会在你的中端显示器上

4268
01:57:11,000 --> 01:57:13,000
显示一个字符出来

4269
01:57:13,000 --> 01:57:15,000
这个过程是比较慢的

4270
01:57:15,000 --> 01:57:19,000
如果你把一个函数设计的太长的话

4271
01:57:19,000 --> 01:57:22,000
你可能敲到一半发现自己敲错了一个字符

4272
01:57:22,000 --> 01:57:26,000
然后要按数着自己按回车的那个次数

4273
01:57:26,000 --> 01:57:28,000
然后算自己按到的一个

4274
01:57:28,000 --> 01:57:31,000
自己应该删到的一个字符停下来

4275
01:57:31,000 --> 01:57:32,000
这个过程是非常缓慢的

4276
01:57:32,000 --> 01:57:33,000
所以

4277
01:57:33,000 --> 01:57:36,000
这个其实在现在我也能体会到

4278
01:57:36,000 --> 01:57:37,000
就这个过程

4279
01:57:37,000 --> 01:57:38,000
对

4280
01:57:38,000 --> 01:57:40,000
有时候你在使用中端显示

4281
01:57:40,000 --> 01:57:42,000
你就那个 SSH 的时候

4282
01:57:42,000 --> 01:57:43,000
你就连一个

4283
01:57:43,000 --> 01:57:45,000
比如说你现在在这个德国

4284
01:57:45,000 --> 01:57:49,000
你连一个假设新西兰的服务器

4285
01:57:49,000 --> 01:57:49,000
对

4286
01:57:49,000 --> 01:57:50,000
我有一段时间

4287
01:57:50,000 --> 01:57:52,000
那个服务器在日本

4288
01:57:52,000 --> 01:57:54,000
就这个状况非常

4289
01:57:54,000 --> 01:57:56,000
就你会发现

4290
01:57:56,000 --> 01:57:57,000
打一个字

4291
01:57:57,000 --> 01:57:59,000
等一秒才出现

4292
01:57:59,000 --> 01:57:59,000
对

4293
01:57:59,000 --> 01:58:00,000
再打一个字

4294
01:58:00,000 --> 01:58:01,000
又等一秒才出现

4295
01:58:01,000 --> 01:58:04,000
也是因为这个 SSH 这种工具

4296
01:58:04,000 --> 01:58:06,000
还是就刚刚讲的

4297
01:58:06,000 --> 01:58:09,000
是来自历史这种交后方式

4298
01:58:09,000 --> 01:58:11,000
就是你想就按我们正常一个想法

4299
01:58:11,000 --> 01:58:13,000
你在本地打个字

4300
01:58:13,000 --> 01:58:14,000
为什么会要等到服务器传过来

4301
01:58:14,000 --> 01:58:16,000
确认它会把它显示出来呢

4302
01:58:16,000 --> 01:58:17,000
对不对

4303
01:58:17,000 --> 01:58:18,000
就很奇怪

4304
01:58:18,000 --> 01:58:20,000
这就是来自那些

4305
01:58:20,000 --> 01:58:21,000
legacy 的东西

4306
01:58:21,000 --> 01:58:22,000
对

4307
01:58:22,000 --> 01:58:23,000
早期的一些智能终端

4308
01:58:23,000 --> 01:58:25,000
也就有了这么一个

4309
01:58:25,000 --> 01:58:27,000
所谓的

4310
01:58:27,000 --> 01:58:29,000
local echo 的这么一个功能

4311
01:58:29,000 --> 01:58:30,000
就是你按了一个键

4312
01:58:30,000 --> 01:58:32,000
它先在本地帮你把它显示在

4313
01:58:32,000 --> 01:58:33,000
显示器上

4314
01:58:33,000 --> 01:58:36,000
然后等到那个服务端

4315
01:58:36,000 --> 01:58:38,000
传回来的确认字符的时候

4316
01:58:38,000 --> 01:58:40,000
你这边已经看到结果了

4317
01:58:40,000 --> 01:58:42,000
这已经是早期的一个

4318
01:58:42,000 --> 01:58:43,000
中端末期的卖点

4319
01:58:43,000 --> 01:58:45,000
对对

4320
01:58:45,000 --> 01:58:47,000
说到这里就这里安利一个挺好用的工具

4321
01:58:47,000 --> 01:58:48,000
叫做 MOSH

4322
01:58:48,000 --> 01:58:50,000
MOSH

4323
01:58:50,000 --> 01:58:52,000
MOSH

4324
01:58:52,000 --> 01:58:54,000
就是它能够解决刚才说的那些问题

4325
01:58:54,000 --> 01:58:55,000
对

4326
01:58:55,000 --> 01:58:57,000
它是通过一个叫什么来的

4327
01:58:57,000 --> 01:58:58,000
MIT 做的吧

4328
01:58:58,000 --> 01:58:59,000
对

4329
01:58:59,000 --> 01:59:00,000
MIT 的一个学生做的

4330
01:59:00,000 --> 01:59:03,000
然后它这个工具就比较好

4331
01:59:03,000 --> 01:59:06,000
就解决那种在高延迟连接情况下

4332
01:59:06,000 --> 01:59:09,000
你用 SSH 那个刚才那个打一个字

4333
01:59:09,000 --> 01:59:10,000
等半天才会出现的那个问题

4334
01:59:10,000 --> 01:59:12,000
还通过一些叫做本地的

4335
01:59:12,000 --> 01:59:14,000
predictive 的算法

4336
01:59:14,000 --> 01:59:15,000
就是预测性的算法

4337
01:59:15,000 --> 01:59:16,000
先把那些字给打出来

4338
01:59:16,000 --> 01:59:18,000
然后等服务器的响应

4339
01:59:18,000 --> 01:59:20,000
那服务器如果响应出来没错

4340
01:59:20,000 --> 01:59:21,000
它就按那个就不用改吧

4341
01:59:21,000 --> 01:59:22,000
对吧

4342
01:59:22,000 --> 01:59:23,000
如果会想出来有问题

4343
01:59:23,000 --> 01:59:25,000
它可能再更新成服务器那个东西

4344
01:59:25,000 --> 01:59:27,000
所以有时候你会觉得会跳

4345
01:59:27,000 --> 01:59:31,000
但是说你至少能够保证你在输入这个命令的过程中

4346
01:59:31,000 --> 01:59:33,000
是比较流畅的一个体验

4347
01:59:33,000 --> 01:59:34,000
对

4348
01:59:34,000 --> 01:59:36,000
而且它还很屌的一点

4349
01:59:36,000 --> 01:59:38,000
就是你用 laptop 办公

4350
01:59:38,000 --> 01:59:40,000
然后你打到一半

4351
01:59:40,000 --> 01:59:42,000
把 laptop 盖子合上了

4352
01:59:42,000 --> 01:59:43,000
然后再打开

4353
01:59:43,000 --> 01:59:45,000
比如说你在咖啡馆你要挪个座位

4354
01:59:45,000 --> 01:59:48,000
然后如果你用普通的 SSH 的话

4355
01:59:48,000 --> 01:59:49,000
此时你就已经断掉了

4356
01:59:49,000 --> 01:59:50,000
对吧

4357
01:59:50,000 --> 01:59:51,000
但如果你用 MOS 的话

4358
01:59:51,000 --> 01:59:51,000
对

4359
01:59:51,000 --> 01:59:52,000
PCP 连接已经没有了

4360
01:59:52,000 --> 01:59:53,000
对

4361
01:59:53,000 --> 01:59:54,000
如果你用 MOS 的话

4362
01:59:54,000 --> 01:59:56,000
它自动帮你重新连起来

4363
01:59:56,000 --> 01:59:58,000
是非常爽的一点

4364
01:59:58,000 --> 01:59:59,000
对

4365
01:59:59,000 --> 02:00:01,000
因为它底层是用那个 UDP 来实现

4366
02:00:01,000 --> 02:00:02,000
它是一个无连接的

4367
02:00:02,000 --> 02:00:04,000
无连接的通讯协议

4368
02:00:04,000 --> 02:00:05,000
这样的话就可以让你

4369
02:00:05,000 --> 02:00:06,000
就是 Roaming 嘛

4370
02:00:06,000 --> 02:00:07,000
就所有的漫游

4371
02:00:07,000 --> 02:00:08,000
就可以换 IP 啊

4372
02:00:08,000 --> 02:00:10,000
换那些都可以实现的

4373
02:00:10,000 --> 02:00:11,000
然后就整个

4374
02:00:11,000 --> 02:00:13,000
特别是在现在这个什么

4375
02:00:13,000 --> 02:00:15,000
有些人在外面用 4 G 办公

4376
02:00:15,000 --> 02:00:16,000
就可能会遇到这种状况

4377
02:00:16,000 --> 02:00:19,000
就在 4 G 和 WiFi 之间切换的时候

4378
02:00:19,000 --> 02:00:21,000
会遇到这种情况比较久

4379
02:00:21,000 --> 02:00:22,000
对

4380
02:00:22,000 --> 02:00:25,000
所以 In case you haven't

4381
02:00:25,000 --> 02:00:26,000
一定要用它

4382
02:00:26,000 --> 02:00:27,000
一定要去

4383
02:00:27,000 --> 02:00:28,000
就跟大家

4384
02:00:28,000 --> 02:00:29,000
常列

4385
02:00:29,000 --> 02:00:30,000
常列安利

4386
02:00:30,000 --> 02:00:36,000
所以你的同事们

4387
02:00:36,000 --> 02:00:37,000
有在用 IDE 的吗

4388
02:00:37,000 --> 02:00:39,000
除了 Xcode 出来

4389
02:00:39,000 --> 02:00:41,000
等等

4390
02:00:41,000 --> 02:00:42,000
你现在写什么

4391
02:00:42,000 --> 02:00:43,000
Python 吗

4392
02:00:43,000 --> 02:00:46,000
我现在写 Go 啊

4393
02:00:46,000 --> 02:00:47,000
写 Go 的话

4394
02:00:47,000 --> 02:00:48,000
一般还是用编辑器的多少

4395
02:00:48,000 --> 02:00:49,000
用那个

4396
02:00:49,000 --> 02:00:51,000
IDE 的还是比较少

4397
02:00:51,000 --> 02:00:53,000
所以 Go 语言

4398
02:00:53,000 --> 02:00:54,000
现在是没有一个

4399
02:00:54,000 --> 02:00:56,000
亲定的

4400
02:00:56,000 --> 02:00:58,000
官方亲定的

4401
02:00:58,000 --> 02:00:58,000
没有

4402
02:00:58,000 --> 02:00:59,000
没有

4403
02:00:59,000 --> 02:01:00,000
有那个

4404
02:01:00,000 --> 02:01:01,000
那个叫

4405
02:01:01,000 --> 02:01:02,000
那个 RowPack

4406
02:01:02,000 --> 02:01:03,000
自己那个编辑器叫

4407
02:01:03,000 --> 02:01:04,000
Acme

4408
02:01:04,000 --> 02:01:05,000
Acme

4409
02:01:05,000 --> 02:01:06,000
就我们介绍过

4410
02:01:06,000 --> 02:01:07,000
也是 Plan 9 的一部分

4411
02:01:07,000 --> 02:01:08,000
对

4412
02:01:08,000 --> 02:01:10,000
然后这个算是

4413
02:01:10,000 --> 02:01:12,000
就算是亲儿子了

4414
02:01:12,000 --> 02:01:13,000
但是其实

4415
02:01:13,000 --> 02:01:16,000
除了他和那个以前 Plan 9

4416
02:01:16,000 --> 02:01:17,000
那个就 Belosense 那几个人

4417
02:01:17,000 --> 02:01:18,000
在用这个

4418
02:01:18,000 --> 02:01:20,000
好像外面的人用的比较少

4419
02:01:20,000 --> 02:01:22,000
因为他那个确实比较诡异

4420
02:01:22,000 --> 02:01:24,000
比较 Hardcore

4421
02:01:24,000 --> 02:01:25,000
对

4422
02:01:25,000 --> 02:01:26,000
刚才我讲的

4423
02:01:26,000 --> 02:01:27,000
他是首先没有语法高亮

4424
02:01:27,000 --> 02:01:30,000
然后他是一个 Proportional Fund

4425
02:01:30,000 --> 02:01:33,000
就是非等宽字体的一个环境

4426
02:01:33,000 --> 02:01:35,000
实际上从没讨论过这个问题

4427
02:01:35,000 --> 02:01:37,000
是比较奇怪的

4428
02:01:37,000 --> 02:01:38,000
然后还要记住

4429
02:01:38,000 --> 02:01:41,000
左键右键中键点起来是什么感觉

4430
02:01:41,000 --> 02:01:42,000
对

4431
02:01:42,000 --> 02:01:43,000
没错

4432
02:01:43,000 --> 02:01:45,000
之前我在知乎的时候

4433
02:01:45,000 --> 02:01:46,000
因为知乎之前很多是用那个

4434
02:01:46,000 --> 02:01:47,000
Python 写的

4435
02:01:47,000 --> 02:01:50,000
我发现有几个同事

4436
02:01:50,000 --> 02:01:52,000
是用那个叫做 PyCharm

4437
02:01:52,000 --> 02:01:53,000
对

4438
02:01:53,000 --> 02:01:56,000
这算是一个 Python 的

4439
02:01:56,000 --> 02:01:58,000
基层开发环境

4440
02:01:58,000 --> 02:01:59,000
就是 IDE 了

4441
02:01:59,000 --> 02:02:00,000
算是

4442
02:02:00,000 --> 02:02:02,000
他就对那些什么

4443
02:02:02,000 --> 02:02:04,000
Debugging 的时候

4444
02:02:04,000 --> 02:02:05,000
好像做的还可以

4445
02:02:05,000 --> 02:02:06,000
没错

4446
02:02:06,000 --> 02:02:08,000
PyCharm 最好用的地方

4447
02:02:08,000 --> 02:02:09,000
就是 Debugging

4448
02:02:09,000 --> 02:02:09,000
应该说

4449
02:02:09,000 --> 02:02:11,000
在 PyCharm 出现之前

4450
02:02:11,000 --> 02:02:14,000
Python 的官方

4451
02:02:14,000 --> 02:02:18,000
和 Python 的 de facto 的

4452
02:02:18,000 --> 02:02:20,000
最好的 ID 是什么的

4453
02:02:20,000 --> 02:02:21,000
有吗

4454
02:02:21,000 --> 02:02:25,000
有吗

4455
02:02:25,000 --> 02:02:26,000
没有吧

4456
02:02:26,000 --> 02:02:27,000
Cype

4457
02:02:27,000 --> 02:02:30,000
Cype 也只是一个编辑器而已

4458
02:02:30,000 --> 02:02:31,000
对

4459
02:02:31,000 --> 02:02:33,000
他不算 ID

4460
02:02:33,000 --> 02:02:34,000
没有 ID

4461
02:02:34,000 --> 02:02:35,000
就动态语言

4462
02:02:35,000 --> 02:02:37,000
基本上用 ID 的会比较少

4463
02:02:37,000 --> 02:02:38,000
对

4464
02:02:38,000 --> 02:02:40,000
感觉那个时候

4465
02:02:40,000 --> 02:02:42,000
大家好像都只是在用某种

4466
02:02:42,000 --> 02:02:47,000
某种能够组织一系列文件的

4467
02:02:47,000 --> 02:02:48,000
比如是像那个

4468
02:02:48,000 --> 02:02:51,000
一时想不起来的名字

4469
02:02:51,000 --> 02:02:53,000
就在那个 Sublime 出现之前

4470
02:02:53,000 --> 02:02:54,000
大家都喜欢

4471
02:02:54,000 --> 02:02:55,000
TextMate

4472
02:02:55,000 --> 02:02:56,000
对

4473
02:02:56,000 --> 02:02:59,000
还有那个 Mac 上很老的

4474
02:02:59,000 --> 02:03:00,000
那个 BBedit

4475
02:03:00,000 --> 02:03:02,000
OK

4476
02:03:02,000 --> 02:03:03,000
你说那个

4477
02:03:03,000 --> 02:03:04,000
那个我从来没有用过

4478
02:03:04,000 --> 02:03:05,000
OK

4479
02:03:05,000 --> 02:03:07,000
我其实刚学

4480
02:03:07,000 --> 02:03:09,000
我刚刚学 Python 的时候

4481
02:03:09,000 --> 02:03:11,000
用的是 edit plus

4482
02:03:11,000 --> 02:03:12,000
就是我曾经给你说过的

4483
02:03:12,000 --> 02:03:15,000
一个小红既视本的一个

4484
02:03:15,000 --> 02:03:18,000
Icon 的 Windows 上的编辑器

4485
02:03:18,000 --> 02:03:19,000
不知道现在还在不在

4486
02:03:19,000 --> 02:03:20,000
OK

4487
02:03:20,000 --> 02:03:21,000
对

4488
02:03:21,000 --> 02:03:24,000
然后

4489
02:03:24,000 --> 02:03:26,000
其实你看

4490
02:03:26,000 --> 02:03:26,000
像

4491
02:03:26,000 --> 02:03:28,000
比如现在你用写 JavaScript 的话

4492
02:03:28,000 --> 02:03:29,000
好像没什么 ID 可以用

4493
02:03:29,000 --> 02:03:32,000
JavaScript

4494
02:03:32,000 --> 02:03:34,000
Visual Studio Code

4495
02:03:34,000 --> 02:03:36,000
其实就是一个很少的

4496
02:03:36,000 --> 02:03:38,000
很好的 JavaScript 的 ID

4497
02:03:38,000 --> 02:03:40,000
他那个算 IDE 吗

4498
02:03:40,000 --> 02:03:42,000
还是就是算一个编辑器

4499
02:03:42,000 --> 02:03:42,000
好吧

4500
02:03:42,000 --> 02:03:45,000
Xcode

4501
02:03:45,000 --> 02:03:47,000
我觉得其实 Visual Studio Code

4502
02:03:47,000 --> 02:03:49,000
是一个介于

4503
02:03:49,000 --> 02:03:52,000
IDE 和编辑器之间的东西

4504
02:03:52,000 --> 02:03:54,000
因为 IDE 能做的事情

4505
02:03:54,000 --> 02:03:55,000
他基本上都能做

4506
02:03:55,000 --> 02:03:56,000
比如组织一堆文件

4507
02:03:56,000 --> 02:04:00,000
然后设定一个项目

4508
02:04:00,000 --> 02:04:03,000
被执行时候的各种参数

4509
02:04:03,000 --> 02:04:05,000
以及 DiBa

4510
02:04:05,000 --> 02:04:07,000
对

4511
02:04:07,000 --> 02:04:07,000
其实现在

4512
02:04:07,000 --> 02:04:09,000
你现在他出的一些

4513
02:04:09,000 --> 02:04:11,000
很多比较新型的编辑器

4514
02:04:11,000 --> 02:04:12,000
其实都有或多或少

4515
02:04:12,000 --> 02:04:14,000
带有一定的 ID 的属性了

4516
02:04:14,000 --> 02:04:15,000
没错

4517
02:04:15,000 --> 02:04:17,000
就是这种强化的编辑器

4518
02:04:17,000 --> 02:04:19,000
它是某种

4519
02:04:19,000 --> 02:04:21,000
介于纯粹的文本编辑器

4520
02:04:21,000 --> 02:04:22,000
和 ID 之间的状态

4521
02:04:22,000 --> 02:04:23,000
我觉得这个挺好

4522
02:04:23,000 --> 02:04:25,000
就轻量级的工具

4523
02:04:25,000 --> 02:04:26,000
挺好

4524
02:04:26,000 --> 02:04:27,000
没错

4525
02:04:27,000 --> 02:04:29,000
对

4526
02:04:29,000 --> 02:04:32,000
怎么我没有传到 ID 上去了

4527
02:04:32,000 --> 02:04:34,000
因为 ID 是一个很重要的

4528
02:04:34,000 --> 02:04:35,000
D-Buy 工具

4529
02:04:35,000 --> 02:04:37,000
对

4530
02:04:37,000 --> 02:04:38,000
对

4531
02:04:38,000 --> 02:04:38,000
然后

4532
02:04:38,000 --> 02:04:41,000
刚才说了 JavaScript

4533
02:04:41,000 --> 02:04:42,000
其实大部分时候

4534
02:04:42,000 --> 02:04:44,000
给 JavaScript

4535
02:04:44,000 --> 02:04:46,000
Debug 的最好的工具

4536
02:04:46,000 --> 02:04:48,000
就是浏览器本身

4537
02:04:48,000 --> 02:04:49,000
那个

4538
02:04:49,000 --> 02:04:51,000
开发者工具栏

4539
02:04:51,000 --> 02:04:52,000
没错

4540
02:04:52,000 --> 02:04:53,000
就在

4541
02:04:53,000 --> 02:04:54,000
在 IE 里面

4542
02:04:54,000 --> 02:04:55,000
F 12

4543
02:04:55,000 --> 02:04:57,000
没错

4544
02:04:57,000 --> 02:04:57,000
在 IE

4545
02:04:57,000 --> 02:05:01,000
IE 是从 9 代才有 F 12

4546
02:05:01,000 --> 02:05:02,000
在

4547
02:05:02,000 --> 02:05:04,000
在 9 代出现之前

4548
02:05:04,000 --> 02:05:06,000
我们都只能 F 5

4549
02:05:06,000 --> 02:05:10,000
算了

4550
02:05:10,000 --> 02:05:10,000
等一下

4551
02:05:10,000 --> 02:05:12,000
那个 F 5 算是

4552
02:05:12,000 --> 02:05:14,000
网页版的打印

4553
02:05:14,000 --> 02:05:15,000
出售方法

4554
02:05:15,000 --> 02:05:16,000
没错

4555
02:05:16,000 --> 02:05:18,000
F 5 其实就是一个

4556
02:05:18,000 --> 02:05:19,000
叫什么

4557
02:05:19,000 --> 02:05:19,000
刷新件

4558
02:05:19,000 --> 02:05:20,000
对

4559
02:05:20,000 --> 02:05:23,000
reload

4560
02:05:23,000 --> 02:05:24,000
对

4561
02:05:24,000 --> 02:05:26,000
就跟那个什么

4562
02:05:26,000 --> 02:05:28,000
加入打印语句之后

4563
02:05:28,000 --> 02:05:28,000
重新 reload 一下

4564
02:05:28,000 --> 02:05:29,000
看那个地方

4565
02:05:29,000 --> 02:05:30,000
到底会不会出现

4566
02:05:30,000 --> 02:05:30,000
那个东西吗

4567
02:05:30,000 --> 02:05:31,000
没错

4568
02:05:31,000 --> 02:05:34,000
然后这个网页里面

4569
02:05:34,000 --> 02:05:34,000
就是

4570
02:05:34,000 --> 02:05:36,000
把那个 JavaScript

4571
02:05:36,000 --> 02:05:37,000
或者是 CSS

4572
02:05:37,000 --> 02:05:38,000
请你们改一下

4573
02:05:38,000 --> 02:05:38,000
看一下

4574
02:05:38,000 --> 02:05:39,000
是不是在那个

4575
02:05:39,000 --> 02:05:41,000
如意料之内

4576
02:05:41,000 --> 02:05:42,000
出现的一个位置

4577
02:05:42,000 --> 02:05:44,000
然后打了那个东西出来

4578
02:05:44,000 --> 02:05:45,000
对

4579
02:05:45,000 --> 02:05:46,000
乃至于像什么

4580
02:05:46,000 --> 02:05:47,000
LiveGuard 这种

4581
02:05:47,000 --> 02:05:49,000
帮你按 F 5 的工具

4582
02:05:49,000 --> 02:05:50,000
就是你只要存在盘

4583
02:05:50,000 --> 02:05:52,000
它就帮你按下 F 5

4584
02:05:52,000 --> 02:05:54,000
这个还叫什么

4585
02:05:54,000 --> 02:05:55,000
这个还挺高级的一个工具

4586
02:05:55,000 --> 02:05:56,000
叫什么

4587
02:05:56,000 --> 02:05:57,000
Auto Refresh

4588
02:05:57,000 --> 02:05:57,000
对

4589
02:05:57,000 --> 02:05:59,000
其实这个就是

4590
02:05:59,000 --> 02:06:01,000
LiveProgramming 的一种形式

4591
02:06:01,000 --> 02:06:02,000
对

4592
02:06:02,000 --> 02:06:04,000
我上次汪老师那个

4593
02:06:04,000 --> 02:06:05,000
什么是 Angular

4594
02:06:05,000 --> 02:06:06,000
还是

4595
02:06:06,000 --> 02:06:07,000
是 React

4596
02:06:07,000 --> 02:06:08,000
还是什么一个

4597
02:06:08,000 --> 02:06:09,000
反正现在一个

4598
02:06:09,000 --> 02:06:11,000
前端工具的框架

4599
02:06:11,000 --> 02:06:12,000
它竟然还

4600
02:06:12,000 --> 02:06:13,000
就是现在就流行说

4601
02:06:13,000 --> 02:06:14,000
自带一个叫做

4602
02:06:14,000 --> 02:06:17,000
Auto Reload 的 Server

4603
02:06:17,000 --> 02:06:17,000
就是一个 Node.js

4604
02:06:17,000 --> 02:06:18,000
写的一个

4605
02:06:18,000 --> 02:06:19,000
一个

4606
02:06:19,000 --> 02:06:20,000
一个

4607
02:06:20,000 --> 02:06:21,000
一个 Server

4608
02:06:21,000 --> 02:06:21,000
然后它会插

4609
02:06:21,000 --> 02:06:23,000
往你那个网页里面代码

4610
02:06:23,000 --> 02:06:24,000
插一些

4611
02:06:24,000 --> 02:06:26,000
一段特别的 JavaScript 代码

4612
02:06:26,000 --> 02:06:26,000
然后它会

4613
02:06:26,000 --> 02:06:27,000
维持一个

4614
02:06:27,000 --> 02:06:30,000
叫什么来的

4615
02:06:30,000 --> 02:06:31,000
Web Socket

4616
02:06:31,000 --> 02:06:32,000
或者是 HGP 的

4617
02:06:32,000 --> 02:06:33,000
长连接

4618
02:06:33,000 --> 02:06:35,000
然后探测到你那边

4619
02:06:35,000 --> 02:06:36,000
保持着那个东西之后

4620
02:06:36,000 --> 02:06:37,000
它会通过那个

4621
02:06:37,000 --> 02:06:38,000
传令街通知服务器

4622
02:06:38,000 --> 02:06:39,000
手动

4623
02:06:39,000 --> 02:06:40,000
通知你的浏览器

4624
02:06:40,000 --> 02:06:41,000
自动刷新

4625
02:06:41,000 --> 02:06:42,000
那个代码

4626
02:06:42,000 --> 02:06:43,000
我这个方法

4627
02:06:43,000 --> 02:06:43,000
我看了一下

4628
02:06:43,000 --> 02:06:44,000
我也是醉了

4629
02:06:44,000 --> 02:06:45,000
Bracket 吧

4630
02:06:45,000 --> 02:06:47,000
就是你说的是 Bracket

4631
02:06:47,000 --> 02:06:48,000
就是那个写前端

4632
02:06:48,000 --> 02:06:49,000
就很多

4633
02:06:49,000 --> 02:06:50,000
有好几个都是这种

4634
02:06:50,000 --> 02:06:51,000
都是这个

4635
02:06:51,000 --> 02:06:53,000
这个框架的

4636
02:06:53,000 --> 02:06:55,000
一些帮助的工具

4637
02:06:55,000 --> 02:06:56,000
都是从这种方式来实现的

4638
02:06:56,000 --> 02:06:58,000
Espresso 也是这样的

4639
02:06:58,000 --> 02:06:59,000
我记得

4640
02:06:59,000 --> 02:07:01,000
对

4641
02:07:01,000 --> 02:07:01,000
对

4642
02:07:01,000 --> 02:07:02,000
没错

4643
02:07:02,000 --> 02:07:04,000
我想还装了一个

4644
02:07:04,000 --> 02:07:05,000
叫什么 ColdKit

4645
02:07:05,000 --> 02:07:06,000
我已经好久没有打开过

4646
02:07:06,000 --> 02:07:08,000
然后后来是什么

4647
02:07:08,000 --> 02:07:09,000
那个 Chrome

4648
02:07:09,000 --> 02:07:11,000
还是那个

4649
02:07:11,000 --> 02:07:13,000
横空出世带了一个叫做

4650
02:07:13,000 --> 02:07:14,000
Console

4651
02:07:14,000 --> 02:07:14,000
对

4652
02:07:14,000 --> 02:07:15,000
这个工具

4653
02:07:15,000 --> 02:07:15,000
对

4654
02:07:15,000 --> 02:07:16,000
其实是 BadKit

4655
02:07:16,000 --> 02:07:17,000
这个工具

4656
02:07:17,000 --> 02:07:18,000
对

4657
02:07:18,000 --> 02:07:19,000
叫做 Inspector

4658
02:07:19,000 --> 02:07:21,000
最早的那个东西

4659
02:07:21,000 --> 02:07:21,000
对

4660
02:07:21,000 --> 02:07:22,000
然后就可以什么

4661
02:07:22,000 --> 02:07:23,000
就像

4662
02:07:23,000 --> 02:07:24,000
那个

4663
02:07:24,000 --> 02:07:25,000
Debugger 那样

4664
02:07:25,000 --> 02:07:26,000
可以动态修改

4665
02:07:26,000 --> 02:07:28,000
网页中的网络结构

4666
02:07:28,000 --> 02:07:28,000
对

4667
02:07:28,000 --> 02:07:31,000
而且可以让你停在某一行代码上

4668
02:07:31,000 --> 02:07:32,000
没错

4669
02:07:32,000 --> 02:07:33,000
而且不用理由

4670
02:07:33,000 --> 02:07:35,000
下段点实在是太人情话

4671
02:07:35,000 --> 02:07:38,000
没错

4672
02:07:38,000 --> 02:07:39,000
对

4673
02:07:39,000 --> 02:07:39,000
我觉得

4674
02:07:39,000 --> 02:07:42,000
我记得当初切换到 Chrome

4675
02:07:42,000 --> 02:07:43,000
可能也就是因为

4676
02:07:43,000 --> 02:07:45,000
这个 Inspector 的功能

4677
02:07:45,000 --> 02:07:46,000
实在是要比

4678
02:07:46,000 --> 02:07:48,000
Firebug 强太多

4679
02:07:48,000 --> 02:07:49,000
然后

4680
02:07:49,000 --> 02:07:51,000
就现在也是吧

4681
02:07:51,000 --> 02:07:52,000
现在那个 Chrome 的

4682
02:07:52,000 --> 02:07:53,000
那个开发者工具

4683
02:07:53,000 --> 02:07:54,000
就是 Inspector

4684
02:07:54,000 --> 02:07:55,000
应该是在

4685
02:07:55,000 --> 02:07:56,000
目前为止是在

4686
02:07:56,000 --> 02:07:57,000
像 Safari

4687
02:07:57,000 --> 02:07:58,000
还有 Firefox

4688
02:07:58,000 --> 02:08:00,000
这个你们之间

4689
02:08:00,000 --> 02:08:01,000
最强大的一个吧

4690
02:08:01,000 --> 02:08:03,000
我觉得是这样

4691
02:08:03,000 --> 02:08:04,000
但是肯定有听众觉得

4692
02:08:04,000 --> 02:08:05,000
不是这样的

4693
02:08:05,000 --> 02:08:05,000
但

4694
02:08:05,000 --> 02:08:07,000
但我反正最近

4695
02:08:07,000 --> 02:08:08,000
也没有什么用

4696
02:08:08,000 --> 02:08:10,000
肯定是这个 Firefox

4697
02:08:10,000 --> 02:08:11,000
那个 Firebug 的

4698
02:08:11,000 --> 02:08:13,000
Firebug 的死忠

4699
02:08:13,000 --> 02:08:14,000
不

4700
02:08:14,000 --> 02:08:15,000
现在 Firefox

4701
02:08:15,000 --> 02:08:17,000
其实那自带一个

4702
02:08:17,000 --> 02:08:18,000
Debug 工具

4703
02:08:18,000 --> 02:08:18,000
就

4704
02:08:18,000 --> 02:08:19,000
不再

4705
02:08:19,000 --> 02:08:20,000
就是那个

4706
02:08:20,000 --> 02:08:21,000
他就是把那个 Firebug

4707
02:08:21,000 --> 02:08:22,000
整合进去了嘛

4708
02:08:22,000 --> 02:08:23,000
OK

4709
02:08:23,000 --> 02:08:25,000
是这么来的

4710
02:08:25,000 --> 02:08:25,000
我记得

4711
02:08:25,000 --> 02:08:26,000
对对

4712
02:08:26,000 --> 02:08:27,000
是这样的

4713
02:08:27,000 --> 02:08:27,000
我没记错

4714
02:08:27,000 --> 02:08:28,000
因为当时就是说

4715
02:08:28,000 --> 02:08:31,000
开发者都不愿意

4716
02:08:31,000 --> 02:08:33,000
那个用那个 Firefox 的

4717
02:08:33,000 --> 02:08:35,000
就是因为那个 Chrome 的

4718
02:08:35,000 --> 02:08:35,000
开发者

4719
02:08:35,000 --> 02:08:37,000
Inspector 工具实在太好用了嘛

4720
02:08:37,000 --> 02:08:38,000
然后他们就什么

4721
02:08:38,000 --> 02:08:40,000
我这样就感觉到危机了呀

4722
02:08:40,000 --> 02:08:41,000
赶快把那个

4723
02:08:41,000 --> 02:08:42,000
因为之前 Firebug

4724
02:08:42,000 --> 02:08:43,000
以前都是一个非官方

4725
02:08:43,000 --> 02:08:44,000
第三方的插件嘛

4726
02:08:44,000 --> 02:08:45,000
对吧

4727
02:08:45,000 --> 02:08:46,000
对

4728
02:08:46,000 --> 02:08:47,000
对

4729
02:08:47,000 --> 02:08:48,000
毕竟不是亲儿子嘛

4730
02:08:48,000 --> 02:08:48,000
做起来

4731
02:08:48,000 --> 02:08:49,000
没有那么顺手

4732
02:08:49,000 --> 02:08:50,000
然后后来

4733
02:08:50,000 --> 02:08:51,000
不行

4734
02:08:51,000 --> 02:08:52,000
看不下去了

4735
02:08:52,000 --> 02:08:53,000
还是整合进来吧

4736
02:08:53,000 --> 02:08:54,000
没错

4737
02:08:54,000 --> 02:08:55,000
然后燃并卵

4738
02:08:55,000 --> 02:08:56,000
对

4739
02:08:56,000 --> 02:08:57,000
为时已晚

4740
02:08:57,000 --> 02:08:58,000
现在应该是

4741
02:08:58,000 --> 02:08:58,000
并没有

4742
02:08:58,000 --> 02:09:05,000
以 WebKit 为基础的 browser

4743
02:09:05,000 --> 02:09:07,000
市场率强过该口吧

4744
02:09:07,000 --> 02:09:08,000
对

4745
02:09:08,000 --> 02:09:11,000
现在不是还有那个

4746
02:09:11,000 --> 02:09:11,000
你看那个叫做

4747
02:09:11,000 --> 02:09:13,000
上次我们前几次讨论的

4748
02:09:13,000 --> 02:09:14,000
那个 React Native

4749
02:09:14,000 --> 02:09:16,000
这种逆天的玩意儿

4750
02:09:16,000 --> 02:09:17,000
它竟然能够在

4751
02:09:17,000 --> 02:09:18,000
Chrome 的

4752
02:09:18,000 --> 02:09:20,000
那个 Inspector 里面

4753
02:09:20,000 --> 02:09:22,000
去实时修改

4754
02:09:22,000 --> 02:09:24,000
跑在 iOS 上面的一个应用

4755
02:09:24,000 --> 02:09:25,000
你感谢吗

4756
02:09:25,000 --> 02:09:25,000
对

4757
02:09:25,000 --> 02:09:26,000
实在是太

4758
02:09:26,000 --> 02:09:28,000
awesomeness

4759
02:09:28,000 --> 02:09:29,000
full of awesome

4760
02:09:29,000 --> 02:09:30,000
对

4761
02:09:30,000 --> 02:09:31,000
因为以前那个

4762
02:09:31,000 --> 02:09:32,000
那个 iOS 的

4763
02:09:32,000 --> 02:09:33,000
还要重新 reload

4764
02:09:33,000 --> 02:09:34,000
还要再传一下

4765
02:09:34,000 --> 02:09:35,000
传到那个

4766
02:09:35,000 --> 02:09:36,000
真机里面

4767
02:09:36,000 --> 02:09:37,000
才可以从事嘛

4768
02:09:37,000 --> 02:09:38,000
对吧

4769
02:09:38,000 --> 02:09:39,000
它就可以通过

4770
02:09:39,000 --> 02:09:40,000
远程的方法

4771
02:09:40,000 --> 02:09:40,000
直接修改

4772
02:09:40,000 --> 02:09:42,000
Chrome 的名字

4773
02:09:42,000 --> 02:09:42,000
有没有一个状态

4774
02:09:42,000 --> 02:09:43,000
然后能够

4775
02:09:43,000 --> 02:09:44,000
瞬间

4776
02:09:44,000 --> 02:09:45,000
同步到

4777
02:09:45,000 --> 02:09:46,000
不叫瞬间同步

4778
02:09:46,000 --> 02:09:47,000
它就是直接是

4779
02:09:47,000 --> 02:09:48,000
那个

4780
02:09:48,000 --> 02:09:50,000
什么理解呢

4781
02:09:50,000 --> 02:09:51,000
就是 iOS 上面

4782
02:09:51,000 --> 02:09:52,000
那个应用渲染的结构

4783
02:09:52,000 --> 02:09:54,000
是来自于 Chrome 里面

4784
02:09:54,000 --> 02:09:55,000
这个 Inspector 的结构

4785
02:09:55,000 --> 02:09:56,000
对

4786
02:09:56,000 --> 02:09:59,000
反正挺黑科技的

4787
02:09:59,000 --> 02:09:59,000
没错

4788
02:09:59,000 --> 02:10:01,000
总之

4789
02:10:01,000 --> 02:10:02,000
前端开发者

4790
02:10:02,000 --> 02:10:02,000
实在是太幸福了

4791
02:10:02,000 --> 02:10:03,000
相比之下

4792
02:10:03,000 --> 02:10:04,000
你看这些

4793
02:10:04,000 --> 02:10:06,000
做服务端的人

4794
02:10:06,000 --> 02:10:07,000
就 debug 的

4795
02:10:07,000 --> 02:10:08,000
是实在是没有这么

4796
02:10:08,000 --> 02:10:10,000
趁手的

4797
02:10:10,000 --> 02:10:11,000
debug 的工具

4798
02:10:11,000 --> 02:10:13,000
当然也跟

4799
02:10:13,000 --> 02:10:15,000
也跟问题的领域有关

4800
02:10:15,000 --> 02:10:16,000
因为前端的东西

4801
02:10:16,000 --> 02:10:17,000
是比较容易

4802
02:10:17,000 --> 02:10:18,000
锁箭基索的

4803
02:10:18,000 --> 02:10:19,000
而后端的东西

4804
02:10:19,000 --> 02:10:20,000
很多时候是

4805
02:10:20,000 --> 02:10:21,000
没有什么东西

4806
02:10:21,000 --> 02:10:23,000
是可以直观可见的

4807
02:10:23,000 --> 02:10:23,000
不是吧

4808
02:10:23,000 --> 02:10:25,000
没有能力

4809
02:10:25,000 --> 02:10:26,000
对

4810
02:10:26,000 --> 02:10:28,000
你做了一个

4811
02:10:28,000 --> 02:10:30,000
高并发

4812
02:10:30,000 --> 02:10:31,000
可以

4813
02:10:31,000 --> 02:10:33,000
及时

4814
02:10:33,000 --> 02:10:34,000
适应

4815
02:10:34,000 --> 02:10:36,000
用户暴涨

4816
02:10:36,000 --> 02:10:36,000
这么一个服务

4817
02:10:36,000 --> 02:10:38,000
你怎么把它

4818
02:10:38,000 --> 02:10:39,000
锁箭基索的

4819
02:10:39,000 --> 02:10:40,000
就是整个

4820
02:10:40,000 --> 02:10:42,000
测试过程

4821
02:10:42,000 --> 02:10:42,000
是没有办法

4822
02:10:42,000 --> 02:10:44,000
整个排查的过程

4823
02:10:44,000 --> 02:10:45,000
是没有办法用一个

4824
02:10:45,000 --> 02:10:47,000
只需要按一个键

4825
02:10:47,000 --> 02:10:48,000
就可以完成的工具

4826
02:10:48,000 --> 02:10:49,000
来实现

4827
02:10:49,000 --> 02:10:50,000
对

4828
02:10:50,000 --> 02:10:51,000
而且现在很多这种

4829
02:10:51,000 --> 02:10:53,000
大的这种应用

4830
02:10:53,000 --> 02:10:54,000
它都是跨系统的

4831
02:10:54,000 --> 02:10:55,000
这不是一个

4832
02:10:55,000 --> 02:10:56,000
单一进程的东西

4833
02:10:56,000 --> 02:10:57,000
就叫什么

4834
02:10:57,000 --> 02:10:58,000
来着

4835
02:10:58,000 --> 02:10:59,000
Google

4836
02:10:59,000 --> 02:11:00,000
App Engine

4837
02:11:00,000 --> 02:11:00,000
你知道吗

4838
02:11:00,000 --> 02:11:01,000
跑的渔服

4839
02:11:01,000 --> 02:11:02,000
那个平台

4840
02:11:02,000 --> 02:11:02,000
对

4841
02:11:02,000 --> 02:11:03,000
当时不是

4842
02:11:03,000 --> 02:11:05,000
今年出了一个什么

4843
02:11:05,000 --> 02:11:06,000
叫做

4844
02:11:06,000 --> 02:11:08,000
好像是叫做

4845
02:11:08,000 --> 02:11:09,000
cloud debugging

4846
02:11:09,000 --> 02:11:10,000
叫做云除虫

4847
02:11:10,000 --> 02:11:12,000
就是说

4848
02:11:12,000 --> 02:11:13,000
当你的应用程序

4849
02:11:13,000 --> 02:11:15,000
跑在不止一台机器

4850
02:11:15,000 --> 02:11:16,000
甚至不止一个

4851
02:11:16,000 --> 02:11:16,000
数据中心

4852
02:11:16,000 --> 02:11:17,000
现在情况下

4853
02:11:17,000 --> 02:11:18,000
你怎么去统筹

4854
02:11:18,000 --> 02:11:19,000
多个进程

4855
02:11:19,000 --> 02:11:20,000
多台机器

4856
02:11:20,000 --> 02:11:23,000
协作才能产生的

4857
02:11:23,000 --> 02:11:24,000
一个 buzz

4858
02:11:24,000 --> 02:11:26,000
其实相信还是挺蛋疼的

4859
02:11:26,000 --> 02:11:27,000
非常蛋疼

4860
02:11:27,000 --> 02:11:28,000
而且

4861
02:11:28,000 --> 02:11:32,000
有时候

4862
02:11:32,000 --> 02:11:34,000
一个程序崩溃了

4863
02:11:34,000 --> 02:11:36,000
前端只需要简单的

4864
02:11:36,000 --> 02:11:37,000
把程序再跑一遍

4865
02:11:37,000 --> 02:11:38,000
可是后端

4866
02:11:38,000 --> 02:11:40,000
你可能唯一能拿到的东西

4867
02:11:40,000 --> 02:11:41,000
就是一个

4868
02:11:41,000 --> 02:11:42,000
就是一个 dump

4869
02:11:42,000 --> 02:11:44,000
也就是这个程序

4870
02:11:44,000 --> 02:11:45,000
他挂掉的时候

4871
02:11:45,000 --> 02:11:46,000
那个车祸现场

4872
02:11:46,000 --> 02:11:47,000
然后你要像一个

4873
02:11:47,000 --> 02:11:50,000
像一个法警一样

4874
02:11:50,000 --> 02:11:52,000
法医

4875
02:11:52,000 --> 02:11:53,000
还原真相

4876
02:11:53,000 --> 02:11:53,000
就是

4877
02:11:53,000 --> 02:11:56,000
就试图通过现场的

4878
02:11:56,000 --> 02:11:57,000
一点点蛛丝马迹

4879
02:11:57,000 --> 02:11:58,000
还原出这个

4880
02:11:58,000 --> 02:12:00,000
案情是怎么发生的

4881
02:12:00,000 --> 02:12:01,000
然后

4882
02:12:01,000 --> 02:12:03,000
只能做一个

4883
02:12:03,000 --> 02:12:04,000
数据叫什么 post mode

4884
02:12:04,000 --> 02:12:06,000
就是死后的

4885
02:12:06,000 --> 02:12:07,000
这样一个尸检

4886
02:12:07,000 --> 02:12:08,000
你没有办法让

4887
02:12:08,000 --> 02:12:10,000
整个车祸再发生一点

4888
02:12:10,000 --> 02:12:11,000
这也是非常痛苦的

4889
02:12:11,000 --> 02:12:12,000
而且耗时的一件事

4890
02:12:12,000 --> 02:12:14,000
因为 core dump

4891
02:12:14,000 --> 02:12:15,000
不管是 core dump

4892
02:12:15,000 --> 02:12:16,000
还是 hip dump

4893
02:12:16,000 --> 02:12:18,000
还是整个环境

4894
02:12:18,000 --> 02:12:18,000
memory dump

4895
02:12:18,000 --> 02:12:20,000
都是非常巨大

4896
02:12:20,000 --> 02:12:22,000
而且需要非常

4897
02:12:22,000 --> 02:12:26,000
敏锐的观察力和精力

4898
02:12:26,000 --> 02:12:27,000
才能搞定一些事

4899
02:12:27,000 --> 02:12:28,000
没错

4900
02:12:28,000 --> 02:12:30,000
而且你遇到那种

4901
02:12:30,000 --> 02:12:31,000
就是你还不能用

4902
02:12:31,000 --> 02:12:32,000
那什么打印

4903
02:12:32,000 --> 02:12:33,000
储存法

4904
02:12:33,000 --> 02:12:34,000
因为第一个

4905
02:12:34,000 --> 02:12:35,000
你没法打印到某一个

4906
02:12:35,000 --> 02:12:36,000
具体的地方去

4907
02:12:36,000 --> 02:12:37,000
你可能就这么 syslog

4908
02:12:37,000 --> 02:12:38,000
要汇总

4909
02:12:38,000 --> 02:12:40,000
顺序都是错的

4910
02:12:40,000 --> 02:12:42,000
然后各个机上面的时间

4911
02:12:42,000 --> 02:12:44,000
它也不一定是完全同步的

4912
02:12:44,000 --> 02:12:44,000
对吧

4913
02:12:44,000 --> 02:12:45,000
对

4914
02:12:45,000 --> 02:12:47,000
根本就没有什么卵可以打

4915
02:12:47,000 --> 02:12:48,000
对

4916
02:12:48,000 --> 02:12:50,000
再然后就是

4917
02:12:50,000 --> 02:12:52,000
如果你重启一个服务

4918
02:12:52,000 --> 02:12:53,000
可能它

4919
02:12:53,000 --> 02:12:55,000
如果你是一个小

4920
02:12:55,000 --> 02:12:56,000
就是 micro service

4921
02:12:56,000 --> 02:12:57,000
就微服务的价格

4922
02:12:57,000 --> 02:12:57,000
可能还行

4923
02:12:57,000 --> 02:12:58,000
重启一个服务

4924
02:12:58,000 --> 02:12:59,000
问题不是很大

4925
02:12:59,000 --> 02:13:00,000
你要像现在很多

4926
02:13:00,000 --> 02:13:03,000
什么写游戏的那种

4927
02:13:03,000 --> 02:13:04,000
server

4928
02:13:04,000 --> 02:13:05,000
就是游戏的服务器

4929
02:13:05,000 --> 02:13:06,000
它可能光预热

4930
02:13:06,000 --> 02:13:08,000
这个数据集

4931
02:13:08,000 --> 02:13:10,000
可能就要好几分钟重启一次

4932
02:13:10,000 --> 02:13:10,000
对

4933
02:13:10,000 --> 02:13:13,000
那就哭吧

4934
02:13:13,000 --> 02:13:14,000
没错

4935
02:13:14,000 --> 02:13:17,000
或者那些搞大数据分析的人

4936
02:13:17,000 --> 02:13:18,000
你说他们怎么才能测试自己

4937
02:13:18,000 --> 02:13:20,000
写这个东西

4938
02:13:20,000 --> 02:13:20,000
对

4939
02:13:20,000 --> 02:13:22,000
这个算法可能有一些

4940
02:13:22,000 --> 02:13:25,000
非常容易解决的问题

4941
02:13:25,000 --> 02:13:27,000
他们可能要等上几个小时

4942
02:13:27,000 --> 02:13:28,000
那是几天的时间

4943
02:13:28,000 --> 02:13:29,000
把整个数据再跑一遍

4944
02:13:29,000 --> 02:13:30,000
就这是唯一的方法

4945
02:13:30,000 --> 02:13:31,000
就没有别的

4946
02:13:31,000 --> 02:13:34,000
可以动态去调试的方法

4947
02:13:34,000 --> 02:13:38,000
所以其实最理想的状态

4948
02:13:38,000 --> 02:13:40,000
是什么 erlan 的那套东西

4949
02:13:40,000 --> 02:13:42,000
就 erlan 里面

4950
02:13:42,000 --> 02:13:43,000
它那些每个

4951
02:13:43,000 --> 02:13:45,000
它的小的紫禁程式

4952
02:13:45,000 --> 02:13:47,000
可以独立重启的

4953
02:13:47,000 --> 02:13:50,000
然后它可以动态登陆到

4954
02:13:50,000 --> 02:13:52,000
程序运行态里面去

4955
02:13:52,000 --> 02:13:53,000
动态修改局部代码

4956
02:13:53,000 --> 02:13:55,000
然后局部重启

4957
02:13:55,000 --> 02:13:55,000
就是不用

4958
02:13:55,000 --> 02:13:58,000
不用重启整个程序

4959
02:13:58,000 --> 02:14:00,000
你局部可能更新一个函数

4960
02:14:00,000 --> 02:14:02,000
更新一个紫禁程

4961
02:14:02,000 --> 02:14:02,000
那紫禁程

4962
02:14:02,000 --> 02:14:05,000
然后再跑起来

4963
02:14:05,000 --> 02:14:06,000
非常方便

4964
02:14:06,000 --> 02:14:07,000
非常牛逼的

4965
02:14:07,000 --> 02:14:07,000
OK

4966
02:14:07,000 --> 02:14:09,000
听起来不错

4967
02:14:09,000 --> 02:14:10,000
所以你呢

4968
02:14:10,000 --> 02:14:12,000
我是对 erlan 没有任何了解

4969
02:14:12,000 --> 02:14:14,000
而且不知道为什么

4970
02:14:14,000 --> 02:14:15,000
也没有任何兴趣

4971
02:14:15,000 --> 02:14:18,000
因为它那个

4972
02:14:18,000 --> 02:14:19,000
其实运

4973
02:14:19,000 --> 02:14:20,000
那个是就所谓的

4974
02:14:20,000 --> 02:14:22,000
这个运营商级别的

4975
02:14:22,000 --> 02:14:22,000
一个环境

4976
02:14:22,000 --> 02:14:24,000
就是它运营商

4977
02:14:24,000 --> 02:14:25,000
比如说你不可能说

4978
02:14:25,000 --> 02:14:26,000
我这个电话

4979
02:14:26,000 --> 02:14:28,000
这个交换系统坏了

4980
02:14:28,000 --> 02:14:29,000
我来把整个停机

4981
02:14:29,000 --> 02:14:31,000
然后来检修

4982
02:14:31,000 --> 02:14:32,000
然后重启

4983
02:14:32,000 --> 02:14:33,000
尝试看有没有出从错

4984
02:14:33,000 --> 02:14:34,000
不可能

4985
02:14:34,000 --> 02:14:36,000
因为你电话停机了

4986
02:14:36,000 --> 02:14:37,000
那就是什么

4987
02:14:37,000 --> 02:14:40,000
会造成重大社会危机的

4988
02:14:40,000 --> 02:14:41,000
没错

4989
02:14:41,000 --> 02:14:42,000
对吧

4990
02:14:42,000 --> 02:14:43,000
而是谁告诉你

4991
02:14:43,000 --> 02:14:43,000
爱立信

4992
02:14:43,000 --> 02:14:45,000
爱立信

4993
02:14:45,000 --> 02:14:45,000
对

4994
02:14:45,000 --> 02:14:46,000
erickson language

4995
02:14:46,000 --> 02:14:51,000
这个也是

4996
02:14:51,000 --> 02:14:53,000
应该是最好的一个

4997
02:14:53,000 --> 02:14:55,000
可以出从的环境

4998
02:14:55,000 --> 02:14:59,000
这其实上大部分的其他的

4999
02:14:59,000 --> 02:15:01,000
这个语言写的代码

5000
02:15:01,000 --> 02:15:02,000
都是不可以

5001
02:15:02,000 --> 02:15:04,000
那种局部出从的

5002
02:15:04,000 --> 02:15:04,000
就是

5003
02:15:04,000 --> 02:15:06,000
所以在统一进程里面

5004
02:15:06,000 --> 02:15:07,000
我也都不可以的

5005
02:15:07,000 --> 02:15:11,000
Lisp 好像有部分是可以

5006
02:15:11,000 --> 02:15:13,000
至少最早的那个 Lisp

5007
02:15:13,000 --> 02:15:14,000
是可以登录进去

5008
02:15:14,000 --> 02:15:15,000
可以改动态修改

5009
02:15:15,000 --> 02:15:16,000
就这个时候要求

5010
02:15:16,000 --> 02:15:17,000
它是一个动态语言

5011
02:15:17,000 --> 02:15:17,000
对

5012
02:15:17,000 --> 02:15:18,000
就是静态

5013
02:15:18,000 --> 02:15:19,000
就编译型语言

5014
02:15:19,000 --> 02:15:20,000
就基本没戏了

5015
02:15:20,000 --> 02:15:22,000
就已经被排除在门槛之外

5016
02:15:22,000 --> 02:15:22,000
不用再下方

5017
02:15:22,000 --> 02:15:25,000
原理上就不支持这一点

5018
02:15:25,000 --> 02:15:26,000
是吧

5019
02:15:26,000 --> 02:15:27,000
动态语言其实也就比较少

5020
02:15:27,000 --> 02:15:29,000
主要是一些函数式的语言

5021
02:15:29,000 --> 02:15:31,000
有望支持这一点

5022
02:15:31,000 --> 02:15:33,000
对

5023
02:15:33,000 --> 02:15:37,000
然后后端的

5024
02:15:37,000 --> 02:15:38,000
做后端的人

5025
02:15:38,000 --> 02:15:40,000
或者说做独立 APP 的人

5026
02:15:40,000 --> 02:15:41,000
或者做一个比较

5027
02:15:41,000 --> 02:15:44,000
需要在一段时间里面

5028
02:15:44,000 --> 02:15:46,000
查看这个程序

5029
02:15:46,000 --> 02:15:47,000
跑起来有没有问题的人

5030
02:15:47,000 --> 02:15:49,000
可能还会用到一个

5031
02:15:49,000 --> 02:15:51,000
debug 的一个变种

5032
02:15:51,000 --> 02:15:52,000
就叫做

5033
02:15:52,000 --> 02:15:53,000
profiler

5034
02:15:53,000 --> 02:15:54,000
或者 profiling tool

5035
02:15:54,000 --> 02:15:56,000
就这个东西可以

5036
02:15:56,000 --> 02:15:56,000
可以

5037
02:15:56,000 --> 02:15:59,000
把一个程序

5038
02:15:59,000 --> 02:16:00,000
包落在一个

5039
02:16:00,000 --> 02:16:03,000
受到监控的运行环境里面

5040
02:16:03,000 --> 02:16:04,000
然后看这个

5041
02:16:04,000 --> 02:16:06,000
看这个程序的运行过程中

5042
02:16:06,000 --> 02:16:07,000
会不会有一些

5043
02:16:07,000 --> 02:16:08,000
比如说

5044
02:16:08,000 --> 02:16:09,000
响应太慢

5045
02:16:09,000 --> 02:16:10,000
或者是

5046
02:16:10,000 --> 02:16:12,000
内存信用

5047
02:16:12,000 --> 02:16:12,000
之类的问题

5048
02:16:12,000 --> 02:16:14,000
这些东西也可以

5049
02:16:14,000 --> 02:16:16,000
是一个广义上的

5050
02:16:16,000 --> 02:16:17,000
debug 的用途

5051
02:16:17,000 --> 02:16:19,000
比如说

5052
02:16:19,000 --> 02:16:20,000
命令行下面有

5053
02:16:20,000 --> 02:16:21,000
叫 Vagrant

5054
02:16:21,000 --> 02:16:23,000
是一个

5055
02:16:23,000 --> 02:16:25,000
其实是虚拟机吧

5056
02:16:25,000 --> 02:16:26,000
就是它会把一个

5057
02:16:26,000 --> 02:16:27,000
C 程序

5058
02:16:27,000 --> 02:16:28,000
在这个虚拟机里面运行

5059
02:16:28,000 --> 02:16:29,000
然后

5060
02:16:29,000 --> 02:16:30,000
每运行一步就告诉

5061
02:16:30,000 --> 02:16:31,000
说这个

5062
02:16:31,000 --> 02:16:33,000
程序运行的

5063
02:16:33,000 --> 02:16:34,000
运行到这儿

5064
02:16:34,000 --> 02:16:34,000
有没有

5065
02:16:34,000 --> 02:16:36,000
是不是已经扔出了一个

5066
02:16:36,000 --> 02:16:38,000
比如说

5067
02:16:38,000 --> 02:16:39,000
已经被

5068
02:16:39,000 --> 02:16:41,000
已经没有办法被

5069
02:16:41,000 --> 02:16:42,000
找到的一个

5070
02:16:42,000 --> 02:16:43,000
一个内存区域

5071
02:16:43,000 --> 02:16:45,000
又比如说

5072
02:16:45,000 --> 02:16:46,000
S Code 里面也有

5073
02:16:46,000 --> 02:16:47,000
专门的

5074
02:16:47,000 --> 02:16:47,000
Profiling Tool

5075
02:16:47,000 --> 02:16:48,000
然后你可以让你

5076
02:16:48,000 --> 02:16:49,000
一个 App

5077
02:16:49,000 --> 02:16:50,000
在一段时间里面运行

5078
02:16:50,000 --> 02:16:51,000
然后它会

5079
02:16:51,000 --> 02:16:54,000
甚至是用图形化的方式

5080
02:16:54,000 --> 02:16:54,000
会告诉你说

5081
02:16:54,000 --> 02:16:55,000
这流漏了

5082
02:16:55,000 --> 02:16:56,000
一几 KB 数据

5083
02:16:56,000 --> 02:16:58,000
这流漏了几 KB 数据

5084
02:16:58,000 --> 02:16:58,000
然后一些

5085
02:16:58,000 --> 02:16:59,000
可能你

5086
02:16:59,000 --> 02:17:01,000
跑上

5087
02:17:01,000 --> 02:17:02,000
一两分钟

5088
02:17:02,000 --> 02:17:03,000
没问题的

5089
02:17:03,000 --> 02:17:04,000
跑上一个小时之后

5090
02:17:04,000 --> 02:17:05,000
就会

5091
02:17:05,000 --> 02:17:06,000
Crash

5092
02:17:06,000 --> 02:17:06,000
你不知道为什么

5093
02:17:06,000 --> 02:17:07,000
然后你用 Profile

5094
02:17:07,000 --> 02:17:08,000
一看

5095
02:17:08,000 --> 02:17:09,000
它原来一直在

5096
02:17:09,000 --> 02:17:10,000
泄漏了内存

5097
02:17:10,000 --> 02:17:12,000
然后泄漏了一个小时之后

5098
02:17:12,000 --> 02:17:13,000
你的 iPad

5099
02:17:13,000 --> 02:17:14,000
终于没有内存了

5100
02:17:14,000 --> 02:17:15,000
所以

5101
02:17:15,000 --> 02:17:16,000
它也就

5102
02:17:16,000 --> 02:17:16,000
Crash

5103
02:17:16,000 --> 02:17:17,000
对

5104
02:17:17,000 --> 02:17:18,000
没错

5105
02:17:18,000 --> 02:17:20,000
然后有时候就是

5106
02:17:20,000 --> 02:17:22,000
如果你写

5107
02:17:22,000 --> 02:17:23,000
IOS App 的时候

5108
02:17:23,000 --> 02:17:23,000
有时候

5109
02:17:23,000 --> 02:17:25,000
你在调试过程中

5110
02:17:25,000 --> 02:17:25,000
它会

5111
02:17:25,000 --> 02:17:27,000
哐当给你

5112
02:17:27,000 --> 02:17:27,000
跳了一大堆

5113
02:17:27,000 --> 02:17:28,000
会编带吗

5114
02:17:28,000 --> 02:17:29,000
你说你这个时候

5115
02:17:29,000 --> 02:17:30,000
应该怎么办

5116
02:17:30,000 --> 02:17:32,000
是吗

5117
02:17:32,000 --> 02:17:32,000
是

5118
02:17:32,000 --> 02:17:33,000
对

5119
02:17:33,000 --> 02:17:34,000
太惨了

5120
02:17:34,000 --> 02:17:34,000
死了

5121
02:17:34,000 --> 02:17:38,000
所以我是不会

5122
02:17:38,000 --> 02:17:40,000
我是不会会编的

5123
02:17:40,000 --> 02:17:42,000
我也不能说会会编吧

5124
02:17:42,000 --> 02:17:42,000
但是

5125
02:17:42,000 --> 02:17:45,000
在这种情况之下

5126
02:17:45,000 --> 02:17:46,000
基本上你都知道

5127
02:17:46,000 --> 02:17:48,000
你其实只要一步一步跳下去

5128
02:17:48,000 --> 02:17:49,000
或者说

5129
02:17:49,000 --> 02:17:50,000
你只要

5130
02:17:50,000 --> 02:17:51,000
把断点设在一个

5131
02:17:51,000 --> 02:17:51,000
比较

5132
02:17:51,000 --> 02:17:52,000
比较

5133
02:17:52,000 --> 02:17:55,000
比较正常的地方

5134
02:17:55,000 --> 02:17:55,000
然后一步一步跳

5135
02:17:55,000 --> 02:17:57,000
你找到自己

5136
02:17:57,000 --> 02:17:59,000
要跳进会编之前的那一步

5137
02:17:59,000 --> 02:18:00,000
就知道问题出在哪

5138
02:18:00,000 --> 02:18:01,000
倒不是特别的严重

5139
02:18:01,000 --> 02:18:03,000
其实我只是想说

5140
02:18:03,000 --> 02:18:05,000
有些 debug 会

5141
02:18:05,000 --> 02:18:07,000
把你引领到这个地方

5142
02:18:07,000 --> 02:18:10,000
就是刚才还是高等语言

5143
02:18:10,000 --> 02:18:11,000
突然一下子跳到了

5144
02:18:11,000 --> 02:18:12,000
这个会编语

5145
02:18:12,000 --> 02:18:14,000
你应该怎么办

5146
02:18:14,000 --> 02:18:16,000
对

5147
02:18:16,000 --> 02:18:17,000
这个情况下

5148
02:18:17,000 --> 02:18:17,000
其实

5149
02:18:17,000 --> 02:18:19,000
我觉得还是有必要

5150
02:18:19,000 --> 02:18:21,000
稍微学一点会编的

5151
02:18:21,000 --> 02:18:22,000
就至少你不用知道

5152
02:18:22,000 --> 02:18:24,000
你不用把所有的指令背下来

5153
02:18:24,000 --> 02:18:31,000
你也不用有能力去逆向工程

5154
02:18:31,000 --> 02:18:37,000
或者是纯用的汇编来写一个 3 D 加速程序之类的这些功能

5155
02:18:37,000 --> 02:18:37,000
技巧

5156
02:18:37,000 --> 02:18:39,000
你至少要了解一些

5157
02:18:39,000 --> 02:18:39,000
比如说

5158
02:18:39,000 --> 02:18:40,000
Calling Convention

5159
02:18:40,000 --> 02:18:42,000
是什么

5160
02:18:42,000 --> 02:18:45,000
就 Costec 是什么

5161
02:18:45,000 --> 02:18:49,000
然后这些东西你可以了解一些最基本的汇编的概念

5162
02:18:49,000 --> 02:18:52,000
那对于 debug 其实也有帮助

5163
02:18:52,000 --> 02:18:58,000
所以今天大概把调试这一块总结一下

5164
02:18:58,000 --> 02:18:59,000
纵览一下

5165
02:18:59,000 --> 02:19:05,000
那我觉得调试技术不管在怎么重要

5166
02:19:05,000 --> 02:19:11,000
还是没有办法抵过养成一个良好的编程习惯来的更重要一点

5167
02:19:11,000 --> 02:19:13,000
就比如说我们前面也提到

5168
02:19:13,000 --> 02:19:16,000
就可以程序可以说两种

5169
02:19:16,000 --> 02:19:18,000
一种是先确定编辑条件

5170
02:19:18,000 --> 02:19:18,000
然后写代码

5171
02:19:18,000 --> 02:19:20,000
另外一种是先写代码

5172
02:19:20,000 --> 02:19:21,000
然后去找这个

5173
02:19:21,000 --> 02:19:24,000
让这个代码能够正确工作的编辑条件

5174
02:19:24,000 --> 02:19:25,000
是什么

5175
02:19:25,000 --> 02:19:27,000
是两种截然不同的态度

5176
02:19:27,000 --> 02:19:33,000
那也许后一种态度会让你对于所有的 debug 工具都撩如指掌

5177
02:19:33,000 --> 02:19:35,000
但从严格意义上来说

5178
02:19:35,000 --> 02:19:40,000
还是有前一种习惯对你的帮助跟打理

5179
02:19:40,000 --> 02:19:41,000
行吗

5180
02:19:41,000 --> 02:19:46,000
那这一期录了也有两个多小时

5181
02:19:46,000 --> 02:19:48,000
可能最终剪出来没有那么多

5182
02:19:48,000 --> 02:19:51,000
因为我们中途也遇到了若干技术故障

5183
02:19:51,000 --> 02:19:54,000
但这一期总算也是达到了长度

5184
02:19:54,000 --> 02:19:59,000
我上一期发现你们的 IT 公论也在偏长度

5185
02:19:59,000 --> 02:20:00,000
这样对吗

5186
02:20:00,000 --> 02:20:03,000
根本听不下来

5187
02:20:03,000 --> 02:20:06,000
到底发生了什么我在听的时候

5188
02:20:06,000 --> 02:20:07,000
我其实一开始的时候我就说

5189
02:20:07,000 --> 02:20:09,000
我靠这一期怎么看起来这么长

5190
02:20:09,000 --> 02:20:11,000
结果听了之后发现真的这么长

5191
02:20:11,000 --> 02:20:12,000
而且你们

5192
02:20:12,000 --> 02:20:14,000
好吧

5193
02:20:14,000 --> 02:20:15,000
很不习惯

5194
02:20:15,000 --> 02:20:18,000
好了

5195
02:20:18,000 --> 02:20:24,000
那您刚刚收听到的是 IPN Podcast 的网络旗下的 IT 技术主题节目

5196
02:20:24,000 --> 02:20:25,000
内火恐慌

5197
02:20:25,000 --> 02:20:29,000
IPN 旗下的其他六档 Podcast

5198
02:20:29,000 --> 02:20:31,000
包括 Softcore 技术主题节目

5199
02:20:31,000 --> 02:20:31,000
IT 公论

5200
02:20:31,000 --> 02:20:33,000
意料主题节目

5201
02:20:33,000 --> 02:20:33,000
太一来了

5202
02:20:33,000 --> 02:20:34,000
美食主题节目

5203
02:20:34,000 --> 02:20:35,000
未知道

5204
02:20:35,000 --> 02:20:36,000
艺术主题节目

5205
02:20:36,000 --> 02:20:36,000
流行通信

5206
02:20:36,000 --> 02:20:37,000
无主题节目

5207
02:20:37,000 --> 02:20:38,000
无资源

5208
02:20:38,000 --> 02:20:39,000
故事主题节目

5209
02:20:39,000 --> 02:20:40,000
High Story

5210
02:20:40,000 --> 02:20:43,000
以及影像主题节目

5211
02:20:43,000 --> 02:20:43,000
影像

5212
02:20:43,000 --> 02:20:45,000
同样欢迎收听

5213
02:20:45,000 --> 02:20:48,000
欢迎你为我们的节目捐款

5214
02:20:48,000 --> 02:20:49,000
捐款地址是

5215
02:20:49,000 --> 02:20:50,000
ipn.li

5216
02:20:50,000 --> 02:20:50,000
slash

5217
02:20:50,000 --> 02:20:51,000
curnalpanic

5218
02:20:51,000 --> 02:20:51,000
slash

5219
02:20:51,000 --> 02:20:52,000
donate

5220
02:20:52,000 --> 02:20:53,000
捐款金额随意

5221
02:20:53,000 --> 02:20:56,000
只要是能够被 8 整除了正点数就可以

5222
02:20:56,000 --> 02:20:58,000
上一次我们的

5223
02:20:58,000 --> 02:20:59,000
上一次我

5224
02:20:59,000 --> 02:21:01,000
嗓子毁了之后

5225
02:21:01,000 --> 02:21:03,000
恳求各位捐款

5226
02:21:03,000 --> 02:21:06,000
然后好像的确有几笔捐进来

5227
02:21:06,000 --> 02:21:07,000
但每一笔都是 8 美元

5228
02:21:07,000 --> 02:21:10,000
非常感谢各位

5229
02:21:10,000 --> 02:21:12,000
虽然

5230
02:21:12,000 --> 02:21:12,000
捐款不会

5231
02:21:12,000 --> 02:21:13,000
不会为你带来什么

5232
02:21:13,000 --> 02:21:14,000
不觉得也不会

5233
02:21:14,000 --> 02:21:15,000
是什么

5234
02:21:15,000 --> 02:21:16,000
我们的口号是

5235
02:21:16,000 --> 02:21:17,000
know hard feelings

5236
02:21:17,000 --> 02:21:19,000
感谢你收听本期节目

5237
02:21:19,000 --> 02:21:20,000
下期再见

5238
02:21:20,000 --> 02:21:20,000
拜拜

