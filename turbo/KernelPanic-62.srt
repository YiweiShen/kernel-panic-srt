1
00:00:00,000 --> 00:00:02,000
您正在收听内核恐慌

2
00:00:02,000 --> 00:00:05,000
一档大致以计算机科技为主题的娱乐 podcast

3
00:00:05,000 --> 00:00:06,000
我们号称硬核

4
00:00:06,000 --> 00:00:08,000
但是也没有什么干货

5
00:00:08,000 --> 00:00:08,000
想听人听

6
00:00:08,000 --> 00:00:10,000
不想听人就别听

7
00:00:10,000 --> 00:00:12,000
我们的网址是 pan.icu

8
00:00:12,000 --> 00:00:15,000
您可以在网站上找到订阅我们节目的方法

9
00:00:15,000 --> 00:00:17,000
以及联络我们的方式

10
00:00:17,000 --> 00:00:18,000
我是武涛

11
00:00:18,000 --> 00:00:19,000
我是 Rail

12
00:00:19,000 --> 00:00:20,000
今天节目开始前

13
00:00:20,000 --> 00:00:23,000
我们做一个简单的 follow up

14
00:00:23,000 --> 00:00:24,000
好久没有做 follow up 了

15
00:00:24,000 --> 00:00:28,000
是针对上一期

16
00:00:28,000 --> 00:00:31,000
这个叫淫湿的光猫内提到的几个问题

17
00:00:31,000 --> 00:00:33,000
我随便说一下后续

18
00:00:33,000 --> 00:00:34,000
第一个就是说

19
00:00:34,000 --> 00:00:35,000
那个淫湿光猫案

20
00:00:35,000 --> 00:00:38,000
算是告破一半

21
00:00:38,000 --> 00:00:39,000
什么个一办法

22
00:00:39,000 --> 00:00:41,000
就是我发出去之后

23
00:00:41,000 --> 00:00:45,000
有我的那个光猫的生产厂家的朋友

24
00:00:45,000 --> 00:00:47,000
找过来跟我确认过

25
00:00:47,000 --> 00:00:47,000
那个猫

26
00:00:47,000 --> 00:00:49,000
那个那个那个叫

27
00:00:49,000 --> 00:00:52,000
那首师确实是他们光猫里面的设备发出来的

28
00:00:52,000 --> 00:00:53,000
不是外面的设备

29
00:00:53,000 --> 00:00:55,000
也不是我的机器网站里面其他设备发出来

30
00:00:55,000 --> 00:00:57,000
他们在他们的那个测试环境里面

31
00:00:57,000 --> 00:00:59,000
也浮现了这个东西

32
00:00:59,000 --> 00:01:03,000
然后那个产生那个诗的选项也找到了

33
00:01:03,000 --> 00:01:04,000
就是那个环路检测

34
00:01:04,000 --> 00:01:05,000
所以我猜对了

35
00:01:05,000 --> 00:01:06,000
对你猜对了

36
00:01:06,000 --> 00:01:08,000
他没他不是每 10 秒发一个包吗

37
00:01:08,000 --> 00:01:10,000
那就用于环路检测了

38
00:01:10,000 --> 00:01:11,000
但是呢

39
00:01:11,000 --> 00:01:14,000
就是没有找到这个东西是谁写的

40
00:01:14,000 --> 00:01:16,000
也不知道为什么是这首师

41
00:01:16,000 --> 00:01:21,000
我说过的光猫型号是上海贝尔阿尔卡特生产制造的

42
00:01:21,000 --> 00:01:24,000
所以目前也不知道是贝尔的工程师干的

43
00:01:24,000 --> 00:01:25,000
还是阿卡的工程师干的

44
00:01:25,000 --> 00:01:28,000
还是说上海贝尔阿卡特后来的工程师干的

45
00:01:28,000 --> 00:01:29,000
目前找不到人

46
00:01:29,000 --> 00:01:31,000
因为也不知道这个 former 到底谁写的

47
00:01:31,000 --> 00:01:32,000
就可能也比较久远

48
00:01:32,000 --> 00:01:34,000
暴露了他们没有 version control 是吧

49
00:01:34,000 --> 00:01:36,000
或者说就是找我那个朋友

50
00:01:36,000 --> 00:01:39,000
他不是做那块开发的嘛

51
00:01:39,000 --> 00:01:39,000
所以他也不清楚

52
00:01:39,000 --> 00:01:41,000
但没有这个权限去查看

53
00:01:41,000 --> 00:01:42,000
那个到底这个是谁

54
00:01:42,000 --> 00:01:43,000
谁 committed 进去了

55
00:01:43,000 --> 00:01:44,000
我也不知道他们有没有

56
00:01:44,000 --> 00:01:45,000
有可能是没有的

57
00:01:45,000 --> 00:01:45,000
对吧

58
00:01:45,000 --> 00:01:46,000
这个我就不清楚了

59
00:01:46,000 --> 00:01:47,000
他们内部的问题

60
00:01:47,000 --> 00:01:48,000
但就说至少

61
00:01:48,000 --> 00:01:50,000
我说这个算是告破了一半

62
00:01:50,000 --> 00:01:51,000
就是说找到了这个源头

63
00:01:51,000 --> 00:01:54,000
找到了他这个是干嘛用的

64
00:01:54,000 --> 00:01:55,000
但是不知道是谁写进去的

65
00:01:55,000 --> 00:01:56,000
以及为什么是这首诗

66
00:01:56,000 --> 00:01:57,000
对吧

67
00:01:57,000 --> 00:01:58,000
OK

68
00:01:58,000 --> 00:01:59,000
这是第一个 follow

69
00:01:59,000 --> 00:02:00,000
这个 flop 这段次

70
00:02:00,000 --> 00:02:02,000
我们不是花了很长时间在讨论

71
00:02:02,000 --> 00:02:03,000
到底能不能够用

72
00:02:03,000 --> 00:02:05,000
已有房子里面

73
00:02:05,000 --> 00:02:07,000
用于接电视的那个同轴电缆

74
00:02:07,000 --> 00:02:11,000
来延伸这个 wifi 的信号的那个距离

75
00:02:11,000 --> 00:02:12,000
对吧

76
00:02:12,000 --> 00:02:13,000
目前来看呢

77
00:02:13,000 --> 00:02:15,000
有两种观点

78
00:02:15,000 --> 00:02:17,000
我们到时候也把这两个连接

79
00:02:17,000 --> 00:02:20,000
是一个 super user 上面的这个回答放进去

80
00:02:20,000 --> 00:02:22,000
就是说正常你直接接

81
00:02:22,000 --> 00:02:23,000
就是上次我说那个方法

82
00:02:23,000 --> 00:02:25,000
你直接把那根同轴电缆

83
00:02:25,000 --> 00:02:27,000
就墙里面的一个同轴电缆

84
00:02:27,000 --> 00:02:28,000
给电视用的

85
00:02:28,000 --> 00:02:31,000
当成 wifi 天线来延长是不行的

86
00:02:31,000 --> 00:02:31,000
因为它的电阻不对

87
00:02:31,000 --> 00:02:34,000
那个这个同轴电缆的电阻

88
00:02:34,000 --> 00:02:36,000
电阻好像说是

89
00:02:36,000 --> 00:02:36,000
等我确认一下

90
00:02:36,000 --> 00:02:39,000
好像是 75 欧姆吧

91
00:02:39,000 --> 00:02:39,000
应该是

92
00:02:39,000 --> 00:02:41,000
对 75 欧的电阻

93
00:02:41,000 --> 00:02:44,000
但是 wifi 天线的那个

94
00:02:44,000 --> 00:02:45,000
就是那个叫

95
00:02:45,000 --> 00:02:46,000
这个专业名词我也找到了

96
00:02:46,000 --> 00:02:47,000
叫做溃线

97
00:02:47,000 --> 00:02:52,000
就是这个这个就是延长 wifi 的天线

98
00:02:52,000 --> 00:02:56,000
那个那个那个导线的电阻是 50 欧

99
00:02:56,000 --> 00:02:58,000
所以正常你直接接上去

100
00:02:58,000 --> 00:02:59,000
肯定是不行的

101
00:02:59,000 --> 00:03:00,000
因为信号很快就衰减了

102
00:03:00,000 --> 00:03:01,000
但是呢

103
00:03:01,000 --> 00:03:03,000
有一种设备

104
00:03:03,000 --> 00:03:05,000
是可以转化一下

105
00:03:05,000 --> 00:03:07,000
就是它在那个通透电缆

106
00:03:07,000 --> 00:03:08,000
两端都接上一个

107
00:03:08,000 --> 00:03:09,000
类似于转接器一样的东西

108
00:03:09,000 --> 00:03:12,000
可以把一个 wifi 的信号

109
00:03:12,000 --> 00:03:14,000
转成那个通透电缆

110
00:03:14,000 --> 00:03:16,000
类似于你可以想象

111
00:03:16,000 --> 00:03:17,000
它是一个放弹或者怎么样

112
00:03:17,000 --> 00:03:19,000
然后把它传达到另外一端

113
00:03:19,000 --> 00:03:20,000
最后再解码出来

114
00:03:20,000 --> 00:03:22,000
然后再重新转配 wifi 能用的

115
00:03:22,000 --> 00:03:23,000
就这种东西是有的

116
00:03:23,000 --> 00:03:24,000
但这个设备有点贵

117
00:03:24,000 --> 00:03:26,000
而且国内我在淘宝

118
00:03:26,000 --> 00:03:27,000
在天猫

119
00:03:27,000 --> 00:03:28,000
在京东上都没有找到

120
00:03:28,000 --> 00:03:30,000
但是在亚马逊上好像是有的

121
00:03:30,000 --> 00:03:32,000
那个东西叫做 mocha

122
00:03:32,000 --> 00:03:33,000
M-O-C-A

123
00:03:33,000 --> 00:03:34,000
我不知道这个

124
00:03:34,000 --> 00:03:36,000
这个是什么那个缩写

125
00:03:36,000 --> 00:03:38,000
然后我还发现一个

126
00:03:38,000 --> 00:03:39,000
特别好玩的东西叫做

127
00:03:39,000 --> 00:03:41,000
Wi-Fi over coax

128
00:03:41,000 --> 00:03:44,000
就是专门干那件事情的

129
00:03:44,000 --> 00:03:47,000
就是专门在用那个通桌电缆

130
00:03:47,000 --> 00:03:49,000
延长 Wi-Fi 信号的一个解决方案

131
00:03:49,000 --> 00:03:51,000
刚刚说就是要用到

132
00:03:51,000 --> 00:03:52,000
刚才那些东西

133
00:03:52,000 --> 00:03:53,000
所以就解决这个

134
00:03:53,000 --> 00:03:54,000
电阻不匹配的问题

135
00:03:54,000 --> 00:03:57,000
大家如果生活在国外

136
00:03:57,000 --> 00:03:58,000
然后你那个房子

137
00:03:58,000 --> 00:04:00,000
每面没有走网线

138
00:04:00,000 --> 00:04:01,000
只有这个通桌电缆

139
00:04:01,000 --> 00:04:02,000
你就是想解决

140
00:04:02,000 --> 00:04:03,000
这个信号的问题的话

141
00:04:03,000 --> 00:04:04,000
你可以去亚马逊上搜一下

142
00:04:04,000 --> 00:04:05,000
叫做 mocha

143
00:04:05,000 --> 00:04:06,000
M-O-C-A

144
00:04:06,000 --> 00:04:08,000
那个 M-C-A

145
00:04:08,000 --> 00:04:09,000
都大写欧式小写

146
00:04:09,000 --> 00:04:09,000
这么一个设备

147
00:04:09,000 --> 00:04:12,000
它可以完成这个东西

148
00:04:12,000 --> 00:04:15,000
然后我们也在我们的听众群里面

149
00:04:15,000 --> 00:04:17,000
就是 Telegram 的听众群里面

150
00:04:17,000 --> 00:04:18,000
有在海外的听众朋友

151
00:04:18,000 --> 00:04:19,000
他确实也买了

152
00:04:19,000 --> 00:04:19,000
用过这个东西

153
00:04:19,000 --> 00:04:20,000
好像效果还不错

154
00:04:20,000 --> 00:04:21,000
能够达到千兆吧

155
00:04:21,000 --> 00:04:22,000
他应该说是

156
00:04:22,000 --> 00:04:24,000
如果你不是一定要延长

157
00:04:24,000 --> 00:04:25,000
这个 Wi-Fi 信号的话

158
00:04:25,000 --> 00:04:27,000
可以直接把网线

159
00:04:27,000 --> 00:04:28,000
转到通桌电缆上

160
00:04:28,000 --> 00:04:30,000
就那个转接头非常简陋

161
00:04:30,000 --> 00:04:33,000
但是 JustWork 也是可以的

162
00:04:33,000 --> 00:04:33,000
对

163
00:04:33,000 --> 00:04:34,000
就这种方案也是可行的

164
00:04:34,000 --> 00:04:35,000
但就具体怎么操作

165
00:04:35,000 --> 00:04:37,000
大家可能要去自己研究

166
00:04:37,000 --> 00:04:37,000
这些

167
00:04:37,000 --> 00:04:39,000
因为我房子里面有通桌电缆

168
00:04:39,000 --> 00:04:41,000
但我实在是不想搞它

169
00:04:41,000 --> 00:04:42,000
OK

170
00:04:42,000 --> 00:04:44,000
OK

171
00:04:44,000 --> 00:04:45,000
就是 Full Up

172
00:04:45,000 --> 00:04:47,000
那今天我们开始今天的正题

173
00:04:47,000 --> 00:04:48,000
今天有点特别

174
00:04:48,000 --> 00:04:51,000
我们好久好久没有邀请过嘉宾的

175
00:04:51,000 --> 00:04:54,000
今天我们邀请到一位重磅嘉宾

176
00:04:54,000 --> 00:04:56,000
就是我们的老朋友

177
00:04:56,000 --> 00:04:58,000
这期我们又是跪着路了

178
00:04:58,000 --> 00:04:58,000
可以说

179
00:04:58,000 --> 00:05:01,000
最近我们邀请到我的一个好朋友

180
00:05:01,000 --> 00:05:04,000
是就是大家可能很多人都用过

181
00:05:04,000 --> 00:05:08,000
这个网络开发调试工具 Search 的作者

182
00:05:08,000 --> 00:05:09,000
林亚诚

183
00:05:09,000 --> 00:05:10,000
亚诚你好

184
00:05:10,000 --> 00:05:12,000
两位老师好

185
00:05:12,000 --> 00:05:15,000
要不亚诚你稍微简单介绍一下自己

186
00:05:15,000 --> 00:05:19,000
我觉得可能我自己的软件的收众

187
00:05:19,000 --> 00:05:21,000
和你们的听众

188
00:05:21,000 --> 00:05:22,000
其实应该覆盖边挺大的

189
00:05:22,000 --> 00:05:25,000
所以还需要再介绍一下吗

190
00:05:25,000 --> 00:05:27,000
我也不知道该怎么样去介绍

191
00:05:27,000 --> 00:05:29,000
东西应该是不用介绍的

192
00:05:29,000 --> 00:05:31,000
但是大家应该对你这个人还是不太熟悉

193
00:05:31,000 --> 00:05:33,000
就是你有什么可以给听众朋友们分享

194
00:05:33,000 --> 00:05:35,000
就是介绍一下自己的

195
00:05:35,000 --> 00:05:36,000
对

196
00:05:36,000 --> 00:05:37,000
然后有什么

197
00:05:37,000 --> 00:05:38,000
有什么我们想知道

198
00:05:38,000 --> 00:05:39,000
我们会接着再

199
00:05:39,000 --> 00:05:41,000
再代替听众来提问的

200
00:05:41,000 --> 00:05:42,000
行

201
00:05:42,000 --> 00:05:44,000
那我就简单的说一下

202
00:05:44,000 --> 00:05:46,000
把剩下的口令提问吧

203
00:05:46,000 --> 00:05:47,000
我现在的身份的话

204
00:05:47,000 --> 00:05:50,000
就是专职的 iOS 的独立开发者

205
00:05:50,000 --> 00:05:52,000
然后之前的话

206
00:05:52,000 --> 00:05:55,000
主要是创业者的一个身份

207
00:05:55,000 --> 00:05:59,000
干过很多一些很标准的一些创业的事情

208
00:05:59,000 --> 00:06:02,000
甚至还做过一些像技术猎头这样的一些

209
00:06:02,000 --> 00:06:05,000
和技术都已经快越来越没相关的一些事情

210
00:06:05,000 --> 00:06:07,000
然后反正从 15 年开始

211
00:06:07,000 --> 00:06:10,000
然后变成了一个专职的独立开发者

212
00:06:10,000 --> 00:06:14,000
现在的话主要的产品是 SERGE 和 L-PASS 两款

213
00:06:14,000 --> 00:06:15,000
然后同时的话

214
00:06:15,000 --> 00:06:17,000
还有一些客户的项目

215
00:06:17,000 --> 00:06:18,000
作为技术顾问去参与

216
00:06:18,000 --> 00:06:19,000
大概就这些

217
00:06:19,000 --> 00:06:22,000
L-PASS 这个可能很多人不知道

218
00:06:22,000 --> 00:06:23,000
是一个密码管理器

219
00:06:23,000 --> 00:06:27,000
是应该是比那个 1 Password 要好用的

220
00:06:27,000 --> 00:06:27,000
好谢谢

221
00:06:27,000 --> 00:06:29,000
但这个相对来说比较小众

222
00:06:29,000 --> 00:06:30,000
但我密码管理器

223
00:06:30,000 --> 00:06:32,000
我记得我们之前节目里面

224
00:06:32,000 --> 00:06:33,000
还有单独讲过一起

225
00:06:33,000 --> 00:06:34,000
不过那个时候你还没有写

226
00:06:34,000 --> 00:06:37,000
所以我们如果下次再聊的时候

227
00:06:37,000 --> 00:06:39,000
可以到时候再专门介绍一下

228
00:06:39,000 --> 00:06:41,000
但虽然今天我们邀请了亚诚

229
00:06:41,000 --> 00:06:43,000
但是我们今天也不聊 SERGE

230
00:06:43,000 --> 00:06:44,000
也不聊 L-PASS

231
00:06:44,000 --> 00:06:46,000
甚至也不聊这个

232
00:06:46,000 --> 00:06:48,000
可以最后有一点相关

233
00:06:48,000 --> 00:06:50,000
但是甚至也不主要聊独立开发

234
00:06:50,000 --> 00:06:52,000
今天我们其实是要聊苹果

235
00:06:52,000 --> 00:06:52,000
对不对

236
00:06:52,000 --> 00:06:54,000
其实这个事也比较简单

237
00:06:54,000 --> 00:06:56,000
是因为目前我们三个里面

238
00:06:56,000 --> 00:06:56,000
只有亚诚

239
00:06:56,000 --> 00:06:59,000
现在你是买了那个 M 1 芯片的

240
00:06:59,000 --> 00:07:00,000
MacBook Pro 对吧

241
00:07:00,000 --> 00:07:01,000
对是的

242
00:07:01,000 --> 00:07:03,000
好像是我就比较急

243
00:07:03,000 --> 00:07:05,000
所以你是在发布的那一天

244
00:07:05,000 --> 00:07:06,000
就是可以定的时候

245
00:07:06,000 --> 00:07:07,000
第一时间定的吧

246
00:07:07,000 --> 00:07:07,000
对

247
00:07:07,000 --> 00:07:09,000
而且我当时第一时间定了之后

248
00:07:09,000 --> 00:07:12,000
由于它标准配置是 8 G 内存

249
00:07:12,000 --> 00:07:14,000
要定制版才能是 16 G 内存

250
00:07:14,000 --> 00:07:17,000
定制了之后会使得发货周期延迟到

251
00:07:17,000 --> 00:07:19,000
我印象中正常发货时间

252
00:07:19,000 --> 00:07:21,000
应该是 20 号还是 19 号左右

253
00:07:21,000 --> 00:07:23,000
我特别急的又等不了

254
00:07:23,000 --> 00:07:25,000
然后拖了一个 Apple 的朋友

255
00:07:25,000 --> 00:07:26,000
让他帮我查了一下

256
00:07:26,000 --> 00:07:27,000
现在实体店的库存

257
00:07:27,000 --> 00:07:29,000
发现离我家比较近的一家店

258
00:07:29,000 --> 00:07:31,000
还有 16 G 的一个高配版

259
00:07:31,000 --> 00:07:33,000
我就立刻跑到店里去

260
00:07:33,000 --> 00:07:34,000
现场拿了它回来

261
00:07:34,000 --> 00:07:36,000
然后把原来的订单给取消了

262
00:07:36,000 --> 00:07:37,000
这里有个小知识

263
00:07:37,000 --> 00:07:39,000
就是说我们通常认为苹果店里面

264
00:07:39,000 --> 00:07:42,000
只有那种所谓的标配版

265
00:07:42,000 --> 00:07:42,000
对吧

266
00:07:42,000 --> 00:07:44,000
他比如说通常他苹果他在网站上

267
00:07:44,000 --> 00:07:45,000
他给一个 Mac 的配置

268
00:07:45,000 --> 00:07:47,000
他会给一个低配和一个高配

269
00:07:47,000 --> 00:07:48,000
这两个都是标准配置

270
00:07:48,000 --> 00:07:50,000
你不用去定制

271
00:07:50,000 --> 00:07:52,000
就可以直接在店里买到的

272
00:07:52,000 --> 00:07:52,000
对吧

273
00:07:52,000 --> 00:07:53,000
但是这次好像有点不一样

274
00:07:53,000 --> 00:07:53,000
对不对

275
00:07:53,000 --> 00:07:55,000
就是因为他的两个标准配置

276
00:07:55,000 --> 00:07:56,000
都只有 8 G 那次

277
00:07:56,000 --> 00:07:58,000
然后 16 G 理论上

278
00:07:58,000 --> 00:07:59,000
按照官网的逻辑

279
00:07:59,000 --> 00:08:01,000
你是需要定制才可以选择

280
00:08:01,000 --> 00:08:01,000
对

281
00:08:01,000 --> 00:08:02,000
是的

282
00:08:02,000 --> 00:08:03,000
但是其实我和朋友聊了一下

283
00:08:03,000 --> 00:08:05,000
他说一般的话

284
00:08:05,000 --> 00:08:08,000
店里面会被大概 5 台左右的顶配机器

285
00:08:08,000 --> 00:08:10,000
就是每家店都会有这么一个储备

286
00:08:10,000 --> 00:08:11,000
所以说的话

287
00:08:11,000 --> 00:08:12,000
如果就是不确定的话

288
00:08:12,000 --> 00:08:14,000
可以提前去他们官网上

289
00:08:14,000 --> 00:08:15,000
找的那个店的

290
00:08:15,000 --> 00:08:16,000
一个店的直接的

291
00:08:16,000 --> 00:08:17,000
不打他们的店的电话

292
00:08:17,000 --> 00:08:18,000
然后打电话去问一下

293
00:08:18,000 --> 00:08:20,000
他们现在有没有高配的库存

294
00:08:20,000 --> 00:08:22,000
然后再过去直接就可以购买

295
00:08:22,000 --> 00:08:24,000
所以他们应对的这个场景

296
00:08:24,000 --> 00:08:25,000
就是一个土豪走进苹果店

297
00:08:25,000 --> 00:08:27,000
说我要你们店里最好的电脑

298
00:08:27,000 --> 00:08:28,000
你给我拿一台出来

299
00:08:28,000 --> 00:08:28,000
对

300
00:08:28,000 --> 00:08:30,000
我感觉应该是这个意思吧

301
00:08:30,000 --> 00:08:32,000
他比如说你去买那个顶配

302
00:08:32,000 --> 00:08:34,000
他我记得就是这一次的

303
00:08:34,000 --> 00:08:36,000
这个 M 1 的 MacBook

304
00:08:36,000 --> 00:08:39,000
他能选的只有是内存是可以变质

305
00:08:39,000 --> 00:08:41,000
就是标配的 8 G 和高配的 16 G

306
00:08:41,000 --> 00:08:43,000
然后唯一能选的就是那个 SSD 的配置了

307
00:08:43,000 --> 00:08:44,000
对吧

308
00:08:44,000 --> 00:08:44,000
那这个 SSD 的

309
00:08:44,000 --> 00:08:47,000
他的那个高配的能最多是配到哪里

310
00:08:47,000 --> 00:08:48,000
他店里面那台

311
00:08:48,000 --> 00:08:51,000
电里的机器我记得都是 1 TB 的

312
00:08:51,000 --> 00:08:53,000
就是这次三个选项

313
00:08:53,000 --> 00:08:54,000
512 1 T 和 2 T

314
00:08:54,000 --> 00:08:56,000
我印象中全是 1 T

315
00:08:56,000 --> 00:08:57,000
没有 2 T 的那个机器

316
00:08:57,000 --> 00:09:00,000
所以其实也没有真的到最顶那个

317
00:09:00,000 --> 00:09:03,000
就是所有的加到最大最贵的那款

318
00:09:03,000 --> 00:09:04,000
他还是没有的

319
00:09:04,000 --> 00:09:05,000
对

320
00:09:05,000 --> 00:09:06,000
而且颜色也只有深空灰

321
00:09:06,000 --> 00:09:09,000
就深空灰的 16 G 的 1 TB 的机器

322
00:09:09,000 --> 00:09:11,000
这个机器好像是有个三次台左右

323
00:09:11,000 --> 00:09:13,000
你颜色也没得选

324
00:09:13,000 --> 00:09:15,000
如果你拿这个 16 G 的配置的话

325
00:09:15,000 --> 00:09:16,000
对

326
00:09:16,000 --> 00:09:16,000
是的

327
00:09:16,000 --> 00:09:16,000
没错

328
00:09:16,000 --> 00:09:18,000
所以但是本来我就是要选的话

329
00:09:18,000 --> 00:09:19,000
就选深空灰

330
00:09:19,000 --> 00:09:20,000
所以说这个倒是无所谓

331
00:09:20,000 --> 00:09:20,000
就刚好是吧

332
00:09:20,000 --> 00:09:22,000
就他们其实还是有一些这个大数据

333
00:09:22,000 --> 00:09:23,000
去支撑这个决策

334
00:09:23,000 --> 00:09:25,000
说一般买这种配置的人

335
00:09:25,000 --> 00:09:26,000
他不会选那种比较

336
00:09:26,000 --> 00:09:28,000
比较骚气的颜色

337
00:09:28,000 --> 00:09:29,000
而且这次其实那个颜色

338
00:09:29,000 --> 00:09:31,000
只有深空灰和银色

339
00:09:31,000 --> 00:09:33,000
都是两个比较保守和传统的颜色

340
00:09:33,000 --> 00:09:34,000
也没够太大的区别

341
00:09:34,000 --> 00:09:37,000
SKO 数量是要比较简单的是吧

342
00:09:37,000 --> 00:09:38,000
对

343
00:09:38,000 --> 00:09:39,000
是的

344
00:09:39,000 --> 00:09:40,000
OK

345
00:09:40,000 --> 00:09:42,000
所以其实对土豪

346
00:09:42,000 --> 00:09:43,000
还是没有那么的友好

347
00:09:43,000 --> 00:09:43,000
对吧

348
00:09:43,000 --> 00:09:45,000
不能说我想买啥买啥

349
00:09:45,000 --> 00:09:47,000
你给我最顶的那个

350
00:09:47,000 --> 00:09:47,000
我不在乎钱

351
00:09:47,000 --> 00:09:49,000
Money is not an issue 的时候

352
00:09:49,000 --> 00:09:50,000
也没有买

353
00:09:50,000 --> 00:09:51,000
也还是得去网上定制

354
00:09:51,000 --> 00:09:53,000
我觉得要是真土豪的话

355
00:09:53,000 --> 00:09:55,000
可能不会在意是 M 1

356
00:09:55,000 --> 00:09:56,000
还是什么

357
00:09:56,000 --> 00:09:57,000
直接来一个 Mac Pro

358
00:09:57,000 --> 00:09:59,000
就直接带走了是吧

359
00:09:59,000 --> 00:10:01,000
这好像是个误欠件

360
00:10:01,000 --> 00:10:03,000
土豪 stereotype

361
00:10:03,000 --> 00:10:06,000
所以目前你看

362
00:10:06,000 --> 00:10:07,000
就是我们网上看了一些

363
00:10:07,000 --> 00:10:10,000
各种媒体网站的测评

364
00:10:10,000 --> 00:10:12,000
但是我们聊一聊

365
00:10:12,000 --> 00:10:14,000
你实际使用下来的感受

366
00:10:14,000 --> 00:10:15,000
就是跟他们测评的

367
00:10:15,000 --> 00:10:16,000
你觉得有多大差异吗

368
00:10:16,000 --> 00:10:18,000
这个其实我作为

369
00:10:18,000 --> 00:10:20,000
最早就参与到

370
00:10:20,000 --> 00:10:22,000
ARM 芯片版本的

371
00:10:22,000 --> 00:10:24,000
Apple 的开发的开发者来说

372
00:10:24,000 --> 00:10:25,000
因为 DTK 我早拿到了

373
00:10:25,000 --> 00:10:28,000
对你是有 DTK 的

374
00:10:28,000 --> 00:10:28,000
对是的

375
00:10:28,000 --> 00:10:29,000
但是 DTK 的话

376
00:10:29,000 --> 00:10:30,000
由于受协议限制

377
00:10:30,000 --> 00:10:31,000
我也没有

378
00:10:31,000 --> 00:10:32,000
我还没有仔细去看

379
00:10:32,000 --> 00:10:33,000
在现在这个状态下

380
00:10:33,000 --> 00:10:35,000
我还能不能给他

381
00:10:35,000 --> 00:10:37,000
公开的发表一些 review

382
00:10:37,000 --> 00:10:37,000
一些意见

383
00:10:37,000 --> 00:10:40,000
我想一想

384
00:10:40,000 --> 00:10:41,000
我觉得应该

385
00:10:41,000 --> 00:10:42,000
没什么太大问题吧

386
00:10:42,000 --> 00:10:45,000
所以这个是有 NDA 的

387
00:10:45,000 --> 00:10:45,000
是吧

388
00:10:45,000 --> 00:10:46,000
DTK 是有 NDA 的

389
00:10:46,000 --> 00:10:47,000
对这是有 NDA 的

390
00:10:47,000 --> 00:10:48,000
他官方提的是

391
00:10:48,000 --> 00:10:49,000
我不可以在

392
00:10:49,000 --> 00:10:50,000
Public 的常数

393
00:10:50,000 --> 00:10:51,000
去进行 review

394
00:10:51,000 --> 00:10:54,000
但是好像我没有仔细看

395
00:10:54,000 --> 00:10:55,000
他有没有一个期限

396
00:10:55,000 --> 00:10:56,000
就到什么时间解禁

397
00:10:56,000 --> 00:10:57,000
好像是没有的

398
00:10:57,000 --> 00:11:01,000
那我为了避免踩到这个坑里

399
00:11:01,000 --> 00:11:02,000
我还是尽量就不提他吧

400
00:11:02,000 --> 00:11:02,000
OK

401
00:11:02,000 --> 00:11:04,000
我们就假装他不存在

402
00:11:04,000 --> 00:11:05,000
对我们谈论他

403
00:11:05,000 --> 00:11:06,000
但这并不是一个 review

404
00:11:06,000 --> 00:11:07,000
明白

405
00:11:07,000 --> 00:11:09,000
我就是在想打这个擦边球

406
00:11:09,000 --> 00:11:12,000
就是之前通过用 DTK 的时候

407
00:11:12,000 --> 00:11:13,000
我就能感受到

408
00:11:13,000 --> 00:11:16,000
这个苹果的这个 ARM 芯片

409
00:11:16,000 --> 00:11:17,000
这个 A 系列芯片的话

410
00:11:17,000 --> 00:11:18,000
很有可能

411
00:11:18,000 --> 00:11:20,000
他之后出来的正式产品

412
00:11:20,000 --> 00:11:21,000
会更牛逼

413
00:11:21,000 --> 00:11:22,000
就是原来已经

414
00:11:22,000 --> 00:11:24,000
其实很牛逼了

415
00:11:24,000 --> 00:11:26,000
但是那个等到一个

416
00:11:26,000 --> 00:11:27,000
但是那块芯片的话

417
00:11:27,000 --> 00:11:28,000
是 ALRZ

418
00:11:28,000 --> 00:11:30,000
是那个 iPad 之前用的芯片

419
00:11:30,000 --> 00:11:31,000
所以的话

420
00:11:31,000 --> 00:11:33,000
那么如果他本身就是为移动设备

421
00:11:33,000 --> 00:11:35,000
为低功耗设备设计的

422
00:11:35,000 --> 00:11:37,000
那如果是在这种基础上

423
00:11:37,000 --> 00:11:38,000
在为 MacBook

424
00:11:38,000 --> 00:11:40,000
或者 MacBook Pro 的话

425
00:11:40,000 --> 00:11:43,000
然后去更优化的设计一款芯片

426
00:11:43,000 --> 00:11:45,000
那他出来的效果应该是非常劲爆的

427
00:11:45,000 --> 00:11:47,000
然后确实的话

428
00:11:47,000 --> 00:11:48,000
从这几天的一个

429
00:11:48,000 --> 00:11:50,000
不管是测试还是实用来说

430
00:11:50,000 --> 00:11:53,000
都非常的让我感觉很兴奋

431
00:11:53,000 --> 00:11:54,000
这确实是一个

432
00:11:54,000 --> 00:11:56,000
可能有划时代意义的产品的

433
00:11:56,000 --> 00:11:57,000
这么一个进步

434
00:11:57,000 --> 00:11:59,000
就按我们这个行业里面的话说

435
00:11:59,000 --> 00:12:02,000
就是一屁股挤爆了这个英特尔的牙膏

436
00:12:02,000 --> 00:12:02,000
对吧

437
00:12:02,000 --> 00:12:02,000
对

438
00:12:02,000 --> 00:12:04,000
我自己的话说是

439
00:12:04,000 --> 00:12:05,000
不是把英特尔按在地板上摩擦

440
00:12:05,000 --> 00:12:07,000
这地板已经快按穿了

441
00:12:07,000 --> 00:12:09,000
已经按出了一个棺材来了

442
00:12:09,000 --> 00:12:11,000
可以把英特尔的盖棺定论了

443
00:12:11,000 --> 00:12:12,000
已经

444
00:12:12,000 --> 00:12:14,000
我们看到网上的测评

445
00:12:14,000 --> 00:12:15,000
看性能基本上都说是这种

446
00:12:15,000 --> 00:12:18,000
我们能看墙上的定语

447
00:12:18,000 --> 00:12:19,000
都是什么 massive improvement

448
00:12:19,000 --> 00:12:20,000
都非常

449
00:12:20,000 --> 00:12:22,000
就是通常是吊打的

450
00:12:22,000 --> 00:12:23,000
至少我们看到那个数字

451
00:12:23,000 --> 00:12:24,000
跑分的

452
00:12:24,000 --> 00:12:25,000
跑分有很多指标

453
00:12:25,000 --> 00:12:26,000
我们看最常见的几个

454
00:12:26,000 --> 00:12:27,000
什么 kickbench

455
00:12:27,000 --> 00:12:30,000
什么 spec 那些

456
00:12:30,000 --> 00:12:31,000
对

457
00:12:31,000 --> 00:12:33,000
都是可能提高了百分之七八十

458
00:12:33,000 --> 00:12:35,000
这种这种级别的性能的提升

459
00:12:35,000 --> 00:12:38,000
而且很多网站的论述就是

460
00:12:38,000 --> 00:12:39,000
一开始我们是怀疑的

461
00:12:39,000 --> 00:12:41,000
一开始我们是非常抵触的

462
00:12:41,000 --> 00:12:43,000
不愿意相信这个结果的

463
00:12:43,000 --> 00:12:45,000
但是实际上手之后

464
00:12:45,000 --> 00:12:45,000
哇靠

465
00:12:45,000 --> 00:12:46,000
原来真的这么香

466
00:12:46,000 --> 00:12:47,000
对

467
00:12:47,000 --> 00:12:47,000
关键是就是说

468
00:12:47,000 --> 00:12:50,000
它在这种提供这种性能

469
00:12:50,000 --> 00:12:53,000
这么大幅度性能提升的情况下

470
00:12:53,000 --> 00:12:54,000
是基于什么呢

471
00:12:54,000 --> 00:12:55,000
是不发烫

472
00:12:55,000 --> 00:12:57,000
对吧按那个我看他们测评的方法

473
00:12:57,000 --> 00:12:59,000
那个评论的员也说是

474
00:12:59,000 --> 00:13:01,000
风扇基本不怎么转

475
00:13:01,000 --> 00:13:01,000
或者听不到

476
00:13:01,000 --> 00:13:04,000
然后特别是像那个 MacBook Air

477
00:13:04,000 --> 00:13:05,000
这款它根本就没有风扇

478
00:13:05,000 --> 00:13:08,000
而且续航能力还非常的恐怖

479
00:13:08,000 --> 00:13:08,000
就相关的

480
00:13:08,000 --> 00:13:11,000
如果说你在那个风扇又不转

481
00:13:11,000 --> 00:13:12,000
又不就不怎么发热的情况下

482
00:13:12,000 --> 00:13:14,000
你从命的能耗是低的

483
00:13:14,000 --> 00:13:15,000
那电池不变的情况

484
00:13:15,000 --> 00:13:15,000
你能耗变低

485
00:13:15,000 --> 00:13:17,000
你续航就起来变长了

486
00:13:17,000 --> 00:13:18,000
但是我没有想到会有那么长

487
00:13:18,000 --> 00:13:18,000
对吧

488
00:13:18,000 --> 00:13:20,000
对这个我其实都还有一个疑问

489
00:13:20,000 --> 00:13:21,000
这个 Mac Pro

490
00:13:21,000 --> 00:13:23,000
这个多的这个风扇拿来干嘛的

491
00:13:23,000 --> 00:13:25,000
我现在就没有能让它转起来过

492
00:13:25,000 --> 00:13:27,000
但它在转吗

493
00:13:27,000 --> 00:13:29,000
就是你确定它是一直在转

494
00:13:29,000 --> 00:13:31,000
还是说需要才转

495
00:13:31,000 --> 00:13:34,000
我贴上去看感受的时候

496
00:13:34,000 --> 00:13:36,000
应该是与非常低的频率在转的

497
00:13:36,000 --> 00:13:40,000
就是你基本上是完全感受不到它在转

498
00:13:40,000 --> 00:13:41,000
但实际上它确实在转

499
00:13:41,000 --> 00:13:44,000
它转的意义可能就是为了提供一个压力

500
00:13:44,000 --> 00:13:46,000
让灰尘不要进去

501
00:13:46,000 --> 00:13:46,000
That's it

502
00:13:46,000 --> 00:13:48,000
不是为了散热

503
00:13:48,000 --> 00:13:49,000
可能真的是

504
00:13:49,000 --> 00:13:50,000
或者就还为了一个

505
00:13:50,000 --> 00:13:51,000
他就

506
00:13:51,000 --> 00:13:52,000
因为这样

507
00:13:52,000 --> 00:13:53,000
他这个就叫什么来着

508
00:13:53,000 --> 00:13:55,000
就是热工程是吧

509
00:13:55,000 --> 00:13:56,000
还是热力学什么样的

510
00:13:56,000 --> 00:13:58,000
就是他得维持一个平衡

511
00:13:58,000 --> 00:13:58,000
就是那个

512
00:13:58,000 --> 00:14:00,000
热动力学你想说

513
00:14:00,000 --> 00:14:01,000
Chermal Dynamics

514
00:14:01,000 --> 00:14:03,000
我只知道以前那个

515
00:14:03,000 --> 00:14:07,000
校那些去清华读这个热工程的

516
00:14:07,000 --> 00:14:07,000
热动力什么

517
00:14:07,000 --> 00:14:09,000
热能学的这些行李

518
00:14:09,000 --> 00:14:10,000
他们都是烧锅炉

519
00:14:10,000 --> 00:14:11,000
对吧

520
00:14:11,000 --> 00:14:14,000
但其实这个东西是可以用到很多场景的

521
00:14:14,000 --> 00:14:17,000
烧锅炉只是一个比较大型的使用场景

522
00:14:17,000 --> 00:14:17,000
对吧

523
00:14:17,000 --> 00:14:19,000
包括你现在做芯片也好

524
00:14:19,000 --> 00:14:20,000
烧锅炉很难的

525
00:14:20,000 --> 00:14:21,000
Come on

526
00:14:21,000 --> 00:14:24,000
它可能是以这么低的一个赚数的话

527
00:14:24,000 --> 00:14:26,000
就已经能够把它维持得很好了

528
00:14:26,000 --> 00:14:27,000
平衡了

529
00:14:27,000 --> 00:14:27,000
对

530
00:14:27,000 --> 00:14:28,000
因为那个

531
00:14:28,000 --> 00:14:30,000
同样是这个

532
00:14:30,000 --> 00:14:32,000
这个 M 1 芯片的那个 MacBook Air

533
00:14:32,000 --> 00:14:33,000
它是完全被动

534
00:14:33,000 --> 00:14:34,000
然后我们看到

535
00:14:34,000 --> 00:14:35,000
因为昨天那个 iFixit

536
00:14:35,000 --> 00:14:37,000
出那个拆解图了

537
00:14:37,000 --> 00:14:38,000
就他把那个打开看了一下

538
00:14:38,000 --> 00:14:40,000
那那个 MacBook Air 里面

539
00:14:40,000 --> 00:14:43,000
它只是只是有一块比较大的那个散热片

540
00:14:43,000 --> 00:14:44,000
对吧

541
00:14:44,000 --> 00:14:45,000
但是完全没有

542
00:14:45,000 --> 00:14:46,000
没有那个风扇

543
00:14:46,000 --> 00:14:48,000
它也可以完成这么一个

544
00:14:48,000 --> 00:14:50,000
就是不是那种高负载

545
00:14:50,000 --> 00:14:52,000
不是那种持续高负载状况下的散热

546
00:14:52,000 --> 00:14:54,000
那照理说

547
00:14:54,000 --> 00:14:56,000
这个 MacBook Pro 有一个小风扇

548
00:14:56,000 --> 00:14:58,000
它能够低速的运转

549
00:14:58,000 --> 00:14:58,000
能够

550
00:14:58,000 --> 00:15:01,000
也能够很快的实现这个热的平衡

551
00:15:01,000 --> 00:15:02,000
对

552
00:15:02,000 --> 00:15:05,000
而且这个和英特尔的机器比起来真的是天壤之别

553
00:15:05,000 --> 00:15:07,000
我第二轮测试的时候

554
00:15:07,000 --> 00:15:08,000
是测试去编译代码

555
00:15:08,000 --> 00:15:10,000
然后看它们的性能怎么样

556
00:15:10,000 --> 00:15:12,000
我两台英特尔的机器

557
00:15:12,000 --> 00:15:13,000
一台是 MacBook Pro

558
00:15:13,000 --> 00:15:15,000
一台是 MacBook Air

559
00:15:15,000 --> 00:15:17,000
都是才开始编译第一轮到一半的时候

560
00:15:17,000 --> 00:15:19,000
风扇就已经基本上到满转了

561
00:15:19,000 --> 00:15:21,000
就已经进入很吵的状态了

562
00:15:21,000 --> 00:15:23,000
就是那种战斗机来袭的感觉

563
00:15:23,000 --> 00:15:23,000
对

564
00:15:23,000 --> 00:15:24,000
是的

565
00:15:24,000 --> 00:15:27,000
然后那个 M 1 的那台 MacBook Pro 的话

566
00:15:27,000 --> 00:15:28,000
三次测完了之后

567
00:15:28,000 --> 00:15:31,000
我摸它就感觉温度几乎没有提升

568
00:15:31,000 --> 00:15:34,000
就还是那种室温的状态

569
00:15:34,000 --> 00:15:35,000
对

570
00:15:35,000 --> 00:15:35,000
是的

571
00:15:35,000 --> 00:15:39,000
就让人感觉这已经是黑科技一样的一个存在了

572
00:15:39,000 --> 00:15:41,000
因为我们知道 MacBook 是前几代的时候

573
00:15:41,000 --> 00:15:43,000
换过一个更薄的外壳

574
00:15:43,000 --> 00:15:44,000
以前是

575
00:15:44,000 --> 00:15:45,000
就是以前不是那个 Type-C 接口

576
00:15:45,000 --> 00:15:45,000
对吧

577
00:15:45,000 --> 00:15:46,000
以前是那个

578
00:15:46,000 --> 00:15:48,000
就是 Type-A 接口的时候

579
00:15:48,000 --> 00:15:50,000
它那个时候大家都会抱怨说

580
00:15:50,000 --> 00:15:52,000
有时候如果用的太猛

581
00:15:52,000 --> 00:15:54,000
它那个底部会比较烫

582
00:15:54,000 --> 00:15:55,000
Type-C MacBook Pro

583
00:15:55,000 --> 00:15:58,000
那个有独立显卡和这个 CPU 的两个热源

584
00:15:58,000 --> 00:16:00,000
后来它换到了

585
00:16:00,000 --> 00:16:02,000
现在就是这个外形的

586
00:16:02,000 --> 00:16:03,000
就是薄薄的

587
00:16:03,000 --> 00:16:05,000
然后边上是那个 Type-C 接口的时候

588
00:16:05,000 --> 00:16:06,000
就更烫了

589
00:16:06,000 --> 00:16:07,000
就是 Intel 的时候

590
00:16:07,000 --> 00:16:07,000
对吧

591
00:16:07,000 --> 00:16:07,000
我们到

592
00:16:07,000 --> 00:16:09,000
如果你放在膝盖上的话

593
00:16:09,000 --> 00:16:09,000
它是有这个

594
00:16:09,000 --> 00:16:11,000
他们那个说法叫什么来的

595
00:16:11,000 --> 00:16:12,000
火腿肠肩蛋

596
00:16:12,000 --> 00:16:12,000
对不对

597
00:16:12,000 --> 00:16:17,000
而且我还听过一个说法

598
00:16:17,000 --> 00:16:21,000
就是对于那个现在的四口的那个 MacBook Pro

599
00:16:21,000 --> 00:16:22,000
你要给它充电的话

600
00:16:22,000 --> 00:16:24,000
是应该要插固定插右边

601
00:16:24,000 --> 00:16:25,000
还是固定插左边

602
00:16:25,000 --> 00:16:27,000
这样去减少它那一侧的发热

603
00:16:27,000 --> 00:16:28,000
才能平衡

604
00:16:28,000 --> 00:16:28,000
对

605
00:16:28,000 --> 00:16:30,000
我们上一期好像结束

606
00:16:30,000 --> 00:16:31,000
结尾的时候谈到这个了

607
00:16:31,000 --> 00:16:33,000
就是你要是从一边插的话

608
00:16:33,000 --> 00:16:34,000
它会特别烫

609
00:16:34,000 --> 00:16:35,000
因为它有一个叫什么

610
00:16:35,000 --> 00:16:36,000
那个电压管理模块

611
00:16:36,000 --> 00:16:38,000
是在某一边

612
00:16:38,000 --> 00:16:39,000
然后会导致升温

613
00:16:39,000 --> 00:16:40,000
然后升温就会降频

614
00:16:40,000 --> 00:16:41,000
然后性能也会受影响

615
00:16:41,000 --> 00:16:43,000
现在 Apple 把这个锅

616
00:16:43,000 --> 00:16:44,000
就完全的丢给了 Intel

617
00:16:44,000 --> 00:16:45,000
告诉大家好

618
00:16:45,000 --> 00:16:46,000
不是我们做的烂

619
00:16:46,000 --> 00:16:47,000
对

620
00:16:47,000 --> 00:16:49,000
所以就这件事情证明了之前

621
00:16:49,000 --> 00:16:51,000
那个有几个问题

622
00:16:51,000 --> 00:16:52,000
就是苹果我们不是老实说

623
00:16:52,000 --> 00:16:55,000
它最近 Mac 这几代就迭代都非常的慢

624
00:16:55,000 --> 00:16:55,000
然后就是非常的

625
00:16:55,000 --> 00:16:57,000
就不让人满意

626
00:16:57,000 --> 00:16:58,000
但最后我们的锅

627
00:16:58,000 --> 00:17:00,000
现在可以明确的说是 Intel 的锅

628
00:17:00,000 --> 00:17:00,000
对不对

629
00:17:00,000 --> 00:17:01,000
真像大白

630
00:17:01,000 --> 00:17:05,000
亚诚我记得你也有买垃圾桶的 Mac Pro

631
00:17:05,000 --> 00:17:06,000
是不是

632
00:17:06,000 --> 00:17:08,000
就是第一代的 Mac Pro Pro

633
00:17:08,000 --> 00:17:09,000
对

634
00:17:09,000 --> 00:17:11,000
那是 13 年的那个型号了

635
00:17:11,000 --> 00:17:12,000
垃圾桶的话

636
00:17:12,000 --> 00:17:12,000
对

637
00:17:12,000 --> 00:17:13,000
垃圾桶总共就一代

638
00:17:13,000 --> 00:17:14,000
没有

639
00:17:14,000 --> 00:17:14,000
没有

640
00:17:14,000 --> 00:17:15,000
之后也没有

641
00:17:15,000 --> 00:17:17,000
前无古人后来着

642
00:17:17,000 --> 00:17:18,000
它更新过一次 CPU 好像

643
00:17:18,000 --> 00:17:21,000
我记得好像只是小型号的

644
00:17:21,000 --> 00:17:22,000
就是可能是加了一个选项吧

645
00:17:22,000 --> 00:17:24,000
反正都是 13 年的那一款

646
00:17:24,000 --> 00:17:25,000
对

647
00:17:25,000 --> 00:17:26,000
你没有大改过

648
00:17:26,000 --> 00:17:26,000
对

649
00:17:26,000 --> 00:17:28,000
在汽车的书里面叫 Facelift

650
00:17:28,000 --> 00:17:29,000
小改款

651
00:17:29,000 --> 00:17:30,000
小改对吧

652
00:17:30,000 --> 00:17:31,000
不是大改

653
00:17:31,000 --> 00:17:33,000
然后就是当时它不是那个

654
00:17:33,000 --> 00:17:34,000
那个垃圾桶

655
00:17:34,000 --> 00:17:35,000
它出来的时候说是

656
00:17:35,000 --> 00:17:37,000
最后他们的

657
00:17:37,000 --> 00:17:38,000
不是要做了一个媒体

658
00:17:38,000 --> 00:17:40,000
邀请那些就是 Mac 的那种专业媒体

659
00:17:40,000 --> 00:17:42,000
去开了一个小会

660
00:17:42,000 --> 00:17:44,000
说他们之前那个设计是

661
00:17:44,000 --> 00:17:45,000
叫什么

662
00:17:45,000 --> 00:17:47,000
遇到了这个 thermal constraint

663
00:17:47,000 --> 00:17:48,000
就是遇到了热能的限制

664
00:17:48,000 --> 00:17:50,000
其实这个锅也是英特尔的

665
00:17:50,000 --> 00:17:50,000
对吧

666
00:17:50,000 --> 00:17:53,000
因为或者说是加上这个 AMD 的

667
00:17:53,000 --> 00:17:54,000
因为那个显卡也是个散热大货

668
00:17:54,000 --> 00:17:55,000
就是他没有想到

669
00:17:55,000 --> 00:17:58,000
就是说你们竟然不能够按照

670
00:17:58,000 --> 00:18:02,000
我们预期的这个提升这个功耗

671
00:18:02,000 --> 00:18:05,000
就是叫做每单位功耗的性能

672
00:18:05,000 --> 00:18:07,000
导致我们不能在这么小的空间里面

673
00:18:07,000 --> 00:18:09,000
用一个单一的风扇

674
00:18:09,000 --> 00:18:12,000
完成整个设备的散热

675
00:18:12,000 --> 00:18:14,000
所以导致我们产品的这个

676
00:18:14,000 --> 00:18:14,000
Fone Factor

677
00:18:14,000 --> 00:18:17,000
这个外观外形和整体的这个形态

678
00:18:17,000 --> 00:18:20,000
没有办法支撑你不断的后续的迭代

679
00:18:20,000 --> 00:18:22,000
这口锅已经毫无疑问的

680
00:18:22,000 --> 00:18:24,000
坐实的落到了英特尔和 AMD 头上

681
00:18:24,000 --> 00:18:26,000
英特尔是显卡

682
00:18:26,000 --> 00:18:28,000
是 CPU

683
00:18:28,000 --> 00:18:29,000
然后 AMD 是因为显卡

684
00:18:29,000 --> 00:18:31,000
反正都是你们的

685
00:18:31,000 --> 00:18:32,000
对

686
00:18:32,000 --> 00:18:33,000
因为我们现在看到确实也是

687
00:18:33,000 --> 00:18:33,000
现在你说

688
00:18:33,000 --> 00:18:34,000
因为我亚神

689
00:18:34,000 --> 00:18:36,000
好像我看到你买了最近

690
00:18:36,000 --> 00:18:37,000
那个什么新初段几台显卡

691
00:18:37,000 --> 00:18:39,000
你看到那种显卡都是一颗大卡

692
00:18:39,000 --> 00:18:41,000
然后上面三个风扇对吧

693
00:18:41,000 --> 00:18:43,000
然后一转起来也是非常响的

694
00:18:43,000 --> 00:18:43,000
对

695
00:18:43,000 --> 00:18:44,000
电磁炉是

696
00:18:44,000 --> 00:18:48,000
然后我们看到这次就是 M 1 芯片

697
00:18:48,000 --> 00:18:51,000
不光是这个 CPU 的那个性能爆表

698
00:18:51,000 --> 00:18:52,000
GPU 的性能也是把

699
00:18:52,000 --> 00:18:54,000
但它是集成显卡

700
00:18:54,000 --> 00:18:56,000
它的集成的显卡的这个性能

701
00:18:56,000 --> 00:18:57,000
也是把英特尔的那个叫

702
00:18:57,000 --> 00:19:00,000
时代的那个就是 Iris 吧

703
00:19:00,000 --> 00:19:02,000
也是按在地板上磨穿对吧

704
00:19:02,000 --> 00:19:04,000
它提升的好像还不止

705
00:19:04,000 --> 00:19:06,000
不是不是说百分之几十这种提高

706
00:19:06,000 --> 00:19:09,000
它是提高了三两三倍吧

707
00:19:09,000 --> 00:19:10,000
我记得那个大概数字是

708
00:19:10,000 --> 00:19:13,000
对那个图形性能我倒是没有仔细测试了

709
00:19:13,000 --> 00:19:16,000
因为那个确实不是我了解的东西

710
00:19:16,000 --> 00:19:17,000
然后我看了的话

711
00:19:17,000 --> 00:19:18,000
别人的评测的话

712
00:19:18,000 --> 00:19:20,000
很多是视频博主去评测

713
00:19:20,000 --> 00:19:22,000
他去进行视频编辑的时候的一个性能

714
00:19:22,000 --> 00:19:24,000
只不过由于那个 M 1

715
00:19:24,000 --> 00:19:27,000
他自己有那个 H 265 的那个硬解码吧

716
00:19:27,000 --> 00:19:30,000
所以说这个好像这个评测一点不太公平

717
00:19:30,000 --> 00:19:31,000
这个事情要吐槽一下

718
00:19:31,000 --> 00:19:34,000
包括这个我记得最开始爆出这件事情

719
00:19:34,000 --> 00:19:36,000
做了一个显示的对比

720
00:19:36,000 --> 00:19:38,000
是那个叫做 Jonathan Morris

721
00:19:38,000 --> 00:19:40,000
他在 YouTube 上做了一个

722
00:19:40,000 --> 00:19:42,000
好像是两三分钟的短评吧

723
00:19:42,000 --> 00:19:48,000
他评的是输出一段这个 H 265 的这个视频

724
00:19:48,000 --> 00:19:51,000
就是他是做那个视频博主

725
00:19:51,000 --> 00:19:51,000
对吧

726
00:19:51,000 --> 00:19:53,000
他说我有一个原始视频

727
00:19:53,000 --> 00:19:53,000
我编辑好了

728
00:19:53,000 --> 00:19:55,000
我要输出成那个叫成片

729
00:19:55,000 --> 00:19:57,000
要流出来成一个 H 265

730
00:19:57,000 --> 00:19:58,000
可以给大家播放的一个文件

731
00:19:58,000 --> 00:20:00,000
他现在那个他的

732
00:20:00,000 --> 00:20:01,000
好像他的 iMac Pro 吧

733
00:20:01,000 --> 00:20:03,000
上面开始点

734
00:20:03,000 --> 00:20:06,000
然后已经那边就已经开始在转码输出了

735
00:20:06,000 --> 00:20:06,000
对吧

736
00:20:06,000 --> 00:20:11,000
然后他说这个时候他拿出他刚买的这个 iPhone 12 的这个 mini

737
00:20:11,000 --> 00:20:13,000
然后说我那个再给你磨叽半天

738
00:20:13,000 --> 00:20:17,000
说来现在我们开始在这个 iPhonemini 上面去做同样的事情

739
00:20:17,000 --> 00:20:21,000
结果那个时候已经那个 iMac 已经跑了可能一两分钟了

740
00:20:21,000 --> 00:20:22,000
对吧

741
00:20:22,000 --> 00:20:23,000
然后这个他才开后面点

742
00:20:23,000 --> 00:20:28,000
然后这个时候 iPhonemini 还是比他那个 iMac 先完成这个转码工作

743
00:20:28,000 --> 00:20:30,000
那看起来是很 impressive

744
00:20:30,000 --> 00:20:30,000
对不对

745
00:20:30,000 --> 00:20:32,000
但是这个事情刚才就说亚诚讲的

746
00:20:32,000 --> 00:20:33,000
他不是太公平

747
00:20:33,000 --> 00:20:38,000
原因是在于说一个是用专用硬件去做输出

748
00:20:38,000 --> 00:20:39,000
另外一个是用那个 CPU 去压

749
00:20:39,000 --> 00:20:40,000
那肯定是不能比的

750
00:20:40,000 --> 00:20:41,000
对

751
00:20:41,000 --> 00:20:44,000
只不过说到不公平这事的话

752
00:20:44,000 --> 00:20:47,000
我们之前大家就比 CPU 性能的时候

753
00:20:47,000 --> 00:20:51,000
其实现在拿来和 M 1 比的东西都是拿 iMac Pro

754
00:20:51,000 --> 00:20:54,000
Mac Pro 这种顶级的桌面端的 CPU 去比了

755
00:20:54,000 --> 00:20:57,000
移动端的根本就早就已经不知道甩到哪里去了

756
00:20:57,000 --> 00:21:00,000
就是如果有功耗限制的肯定都是比不过的

757
00:21:00,000 --> 00:21:01,000
对吧

758
00:21:01,000 --> 00:21:03,000
但只有找那种不太受功耗限制的

759
00:21:03,000 --> 00:21:05,000
因为像 iMac Pro

760
00:21:05,000 --> 00:21:08,000
就桌面级 CPU 它都是工的都是几十三百瓦的这种

761
00:21:08,000 --> 00:21:10,000
对因为我自己对比的时候

762
00:21:10,000 --> 00:21:15,000
我是测的是我的 iMac Pro 和我的之前的 19 款的 iMac MacBook Air

763
00:21:15,000 --> 00:21:17,000
iMac MacBook Air 的话

764
00:21:17,000 --> 00:21:18,000
它那个 CPU 是比较弱了

765
00:21:18,000 --> 00:21:19,000
是两核的

766
00:21:19,000 --> 00:21:22,000
但是相比现在的 MacBook Air 的话

767
00:21:22,000 --> 00:21:25,000
相当于这是一个一年前的完全同价格的一个产品

768
00:21:25,000 --> 00:21:26,000
拿来比较

769
00:21:26,000 --> 00:21:28,000
然后我记得测试结果的话

770
00:21:28,000 --> 00:21:31,000
在 M 1 上面的编译时间大概是四十秒

771
00:21:31,000 --> 00:21:35,000
到了 MacBook Air 上面的话是大概接近两百六十秒

772
00:21:35,000 --> 00:21:38,000
是这么一个翻这么多倍的差距

773
00:21:38,000 --> 00:21:40,000
就是六倍对吧

774
00:21:40,000 --> 00:21:41,000
对没错

775
00:21:41,000 --> 00:21:44,000
就是我在做这个测试的时候

776
00:21:44,000 --> 00:21:45,000
我到后面我真的都不想等

777
00:21:45,000 --> 00:21:47,000
MacBook Air 测三次的结果了

778
00:21:47,000 --> 00:21:48,000
太漫长了

779
00:21:48,000 --> 00:21:50,000
那个 Air 还是有风扇的对吧

780
00:21:50,000 --> 00:21:51,000
我记得它有一个小风扇

781
00:21:51,000 --> 00:21:52,000
对是的

782
00:21:52,000 --> 00:21:55,000
而且风扇已经赚到最响了

783
00:21:55,000 --> 00:21:56,000
但你这个也是有风扇

784
00:21:56,000 --> 00:21:59,000
但是如果说你是拿这个 M 1 的 Air 比

785
00:21:59,000 --> 00:22:01,000
我相信这个结果也不会差得太远

786
00:22:01,000 --> 00:22:03,000
因为我们看它的那个测评结果

787
00:22:03,000 --> 00:22:07,000
一般好像说是八分钟以上才会那个 throttle

788
00:22:07,000 --> 00:22:08,000
就是降频限速嘛

789
00:22:08,000 --> 00:22:08,000
没错

790
00:22:08,000 --> 00:22:10,000
所以来这次的话

791
00:22:10,000 --> 00:22:14,000
这次这个 Air 和 Pro 的其实是一个定位还挺奇怪的两个产品

792
00:22:14,000 --> 00:22:17,000
就是感觉好像到底该买 Pro 还是买 Air 的话很难选

793
00:22:17,000 --> 00:22:18,000
就你可以解释一下

794
00:22:18,000 --> 00:22:21,000
你为什么选择买 Pro 不买 Air 吗

795
00:22:21,000 --> 00:22:23,000
因为就从猜术上来说

796
00:22:23,000 --> 00:22:24,000
好像差的并不多

797
00:22:24,000 --> 00:22:26,000
它的屏幕首先是差不多的是吧

798
00:22:26,000 --> 00:22:28,000
我印象中好像没有区别

799
00:22:28,000 --> 00:22:31,000
所有的技术都是一样的

800
00:22:31,000 --> 00:22:32,000
对而且这次不一样

801
00:22:32,000 --> 00:22:34,000
以前他们那个就上一代

802
00:22:34,000 --> 00:22:35,000
就是英特尔芯片的那个 Air

803
00:22:35,000 --> 00:22:37,000
它那个屏幕不是所谓的那个 P 3

804
00:22:37,000 --> 00:22:39,000
那个广色域的屏幕吗

805
00:22:39,000 --> 00:22:40,000
但这次它连这个也升上来了

806
00:22:40,000 --> 00:22:42,000
对我记得我之前

807
00:22:42,000 --> 00:22:44,000
我购买之前看过那个

808
00:22:44,000 --> 00:22:45,000
今天学习功课的时候

809
00:22:45,000 --> 00:22:48,000
发现好像没有什么屏幕上

810
00:22:48,000 --> 00:22:49,000
有人提到过会有区别

811
00:22:49,000 --> 00:22:51,000
我自己买 Pro 的话

812
00:22:51,000 --> 00:22:54,000
是想再给 Touch Bar 一个机会

813
00:22:54,000 --> 00:22:58,000
因为我在这台 Air 之前的那台的话

814
00:22:58,000 --> 00:22:59,000
也是一台 MacBook Pro

815
00:22:59,000 --> 00:23:01,000
但那个 Touch Bar 用的我非常造型

816
00:23:01,000 --> 00:23:02,000
就是经常的我会

817
00:23:02,000 --> 00:23:04,000
想要有一个功能键的时候

818
00:23:04,000 --> 00:23:05,000
要么摸不到它在哪里

819
00:23:05,000 --> 00:23:06,000
特别是 Escape 键

820
00:23:06,000 --> 00:23:08,000
或者是它直接死意料

821
00:23:08,000 --> 00:23:10,000
所以说就非常的难受

822
00:23:10,000 --> 00:23:11,000
所以这次想着

823
00:23:11,000 --> 00:23:13,000
既然要换的话

824
00:23:13,000 --> 00:23:14,000
那我就再给你

825
00:23:14,000 --> 00:23:15,000
顺便给 Pro 一个机会

826
00:23:15,000 --> 00:23:17,000
你的上一代那个 Pro 的是

827
00:23:17,000 --> 00:23:19,000
没有独立的物理的

828
00:23:19,000 --> 00:23:21,000
Escape 键的那款对吧

829
00:23:21,000 --> 00:23:21,000
对是的

830
00:23:21,000 --> 00:23:24,000
那是最早发布的那一款的 Touch Bar

831
00:23:24,000 --> 00:23:26,000
它后来是出过一款

832
00:23:26,000 --> 00:23:28,000
有单独的 Escape 键

833
00:23:28,000 --> 00:23:30,000
同时有 Touch Bar 的 MacBook Pro

834
00:23:30,000 --> 00:23:31,000
我记得对不对

835
00:23:31,000 --> 00:23:31,000
对就是上一款

836
00:23:31,000 --> 00:23:33,000
就是 19 年更新那一代了

837
00:23:33,000 --> 00:23:34,000
是 19 还是哪一年

838
00:23:34,000 --> 00:23:34,000
不记得的反正

839
00:23:34,000 --> 00:23:35,000
就这一代和上一代

840
00:23:35,000 --> 00:23:37,000
在这个方面是一模一样

841
00:23:37,000 --> 00:23:39,000
就是今年年初那一代

842
00:23:39,000 --> 00:23:40,000
应该是

843
00:23:40,000 --> 00:23:41,000
就今年的

844
00:23:41,000 --> 00:23:44,000
就是只要如果你现在去苹果店买

845
00:23:44,000 --> 00:23:46,000
然后你说你要这个英特尔芯片的

846
00:23:46,000 --> 00:23:47,000
MacBook Pro

847
00:23:47,000 --> 00:23:51,000
它都是同时有物理的 Escape 键和 Touch Bar

848
00:23:51,000 --> 00:23:55,000
所以你是我遇到的第一个

849
00:23:55,000 --> 00:23:57,000
好像还不太反感这个 Touch Bar 的人

850
00:23:57,000 --> 00:23:58,000
但是你刚才说

851
00:23:58,000 --> 00:23:59,000
其实体验也不是很好

852
00:23:59,000 --> 00:24:01,000
我其实是很反感的

853
00:24:01,000 --> 00:24:01,000
对

854
00:24:01,000 --> 00:24:02,000
我刚才想说

855
00:24:02,000 --> 00:24:04,000
就是你用第一代 Touch Bar

856
00:24:04,000 --> 00:24:05,000
你觉得很不爽

857
00:24:05,000 --> 00:24:06,000
然后你说

858
00:24:06,000 --> 00:24:08,000
想要再给第二代 Touch Bar

859
00:24:08,000 --> 00:24:09,000
一个机会

860
00:24:09,000 --> 00:24:10,000
对

861
00:24:10,000 --> 00:24:12,000
这个思路就比较

862
00:24:12,000 --> 00:24:13,000
那就比较奇怪

863
00:24:13,000 --> 00:24:13,000
是吧

864
00:24:13,000 --> 00:24:13,000
就是 Pro 啊

865
00:24:13,000 --> 00:24:16,000
这就是真的自身果粉吧

866
00:24:16,000 --> 00:24:18,000
而且可能可以算吧

867
00:24:18,000 --> 00:24:20,000
就是因为既然要换电脑了

868
00:24:20,000 --> 00:24:21,000
那就多带来一点变化

869
00:24:21,000 --> 00:24:23,000
多带来点不一样的去体验

870
00:24:23,000 --> 00:24:23,000
是吧

871
00:24:23,000 --> 00:24:25,000
这个我觉得也可以理解

872
00:24:25,000 --> 00:24:27,000
因为有一个很显著的区别

873
00:24:27,000 --> 00:24:27,000
就是说

874
00:24:27,000 --> 00:24:33,000
英特尔芯片的 MacBook Pro 的 Touch Bar

875
00:24:33,000 --> 00:24:35,000
是用 T 2 芯片来驱动的

876
00:24:35,000 --> 00:24:37,000
它有一个单独的一个 Bridge OS

877
00:24:37,000 --> 00:24:38,000
来驱动它

878
00:24:38,000 --> 00:24:38,000
对吧

879
00:24:38,000 --> 00:24:41,000
就导致各种各样的通讯的问题

880
00:24:41,000 --> 00:24:42,000
我们都看到

881
00:24:42,000 --> 00:24:43,000
都已经看到各种什么死机

882
00:24:43,000 --> 00:24:45,000
什么没反应

883
00:24:45,000 --> 00:24:47,000
都已经很多吐槽了

884
00:24:47,000 --> 00:24:50,000
但这次 M 1 的 Touch Bar

885
00:24:50,000 --> 00:24:51,000
照我的理解

886
00:24:51,000 --> 00:24:52,000
首先 M 1

887
00:24:52,000 --> 00:24:54,000
已经把 T 2 的所有功能整合

888
00:24:54,000 --> 00:24:55,000
在 M 1 里面

889
00:24:55,000 --> 00:24:56,000
没有单独的一个 T 2 芯片了

890
00:24:56,000 --> 00:24:58,000
我的理解应该也不存在

891
00:24:58,000 --> 00:25:00,000
所谓的 Bridge OS 了

892
00:25:00,000 --> 00:25:00,000
对吧

893
00:25:00,000 --> 00:25:02,000
它应该就是在 M 1 芯片里面

894
00:25:02,000 --> 00:25:03,000
单独自己在内核里面跑的

895
00:25:03,000 --> 00:25:08,000
那所以有可能说这样就可以解决

896
00:25:08,000 --> 00:25:09,000
Touch Bar 之间各种

897
00:25:09,000 --> 00:25:10,000
响应失灵

898
00:25:10,000 --> 00:25:11,000
什么死机的问题

899
00:25:11,000 --> 00:25:11,000
对不对

900
00:25:11,000 --> 00:25:12,000
对

901
00:25:12,000 --> 00:25:14,000
因为这事情之前和这个我们自己

902
00:25:14,000 --> 00:25:15,000
时下聊过

903
00:25:15,000 --> 00:25:17,000
就是从我自己观察的话

904
00:25:17,000 --> 00:25:18,000
就在旧版的设备上

905
00:25:18,000 --> 00:25:20,000
T 2 的芯片用的是 USB 总线

906
00:25:20,000 --> 00:25:23,000
和整个 CPU 进行通信

907
00:25:23,000 --> 00:25:26,000
按照我们自己之前的经验来说的话

908
00:25:26,000 --> 00:25:28,000
USB 的总线的可靠性

909
00:25:28,000 --> 00:25:30,000
一般来说可能是没那么高的

910
00:25:30,000 --> 00:25:32,000
就是它还是会在某种情况下就闪断了

911
00:25:32,000 --> 00:25:35,000
然后说会不会是因为这样的一个原因

912
00:25:35,000 --> 00:25:36,000
导致 Touch Bar 之间的时候

913
00:25:36,000 --> 00:25:37,000
就突然就死机了

914
00:25:37,000 --> 00:25:39,000
或者是 T 2 怎么就不灵了

915
00:25:39,000 --> 00:25:40,000
所以说我也是在想试一下

916
00:25:40,000 --> 00:25:43,000
所以你想再给它一个机会看一下

917
00:25:43,000 --> 00:25:43,000
对吧

918
00:25:43,000 --> 00:25:43,000
对

919
00:25:43,000 --> 00:25:43,000
是的

920
00:25:43,000 --> 00:25:44,000
对

921
00:25:44,000 --> 00:25:46,000
看它这是不是也是因得而得过

922
00:25:46,000 --> 00:25:50,000
那如果说我们刨开这个不稳定性和死机

923
00:25:50,000 --> 00:25:52,000
这种因素来看

924
00:25:52,000 --> 00:25:53,000
Touch Bar 本身

925
00:25:53,000 --> 00:25:56,000
你觉得它的这个实用性还是可以的

926
00:25:56,000 --> 00:25:58,000
我觉得也不太好说

927
00:25:58,000 --> 00:26:01,000
就是它虽然说看上去直观上来说

928
00:26:01,000 --> 00:26:03,000
它把很多操作放在键盘上

929
00:26:03,000 --> 00:26:05,000
这样我能够直接这样的操作的话

930
00:26:05,000 --> 00:26:06,000
是一个提升

931
00:26:06,000 --> 00:26:07,000
但它有一个扣分项就是

932
00:26:07,000 --> 00:26:09,000
假如说我本身

933
00:26:09,000 --> 00:26:11,000
我自己会定了很多 FM 的功能键

934
00:26:11,000 --> 00:26:12,000
有特定的作用

935
00:26:12,000 --> 00:26:13,000
我如果是键盘的话

936
00:26:13,000 --> 00:26:14,000
我能摸到那个键在那里

937
00:26:14,000 --> 00:26:16,000
我很多时候可以忙打

938
00:26:16,000 --> 00:26:17,000
就直接对按上去的

939
00:26:17,000 --> 00:26:18,000
但是如果是 Touch Bar

940
00:26:18,000 --> 00:26:19,000
我完全按不到

941
00:26:19,000 --> 00:26:21,000
我必须得低头去看到底在哪

942
00:26:21,000 --> 00:26:21,000
按上去

943
00:26:21,000 --> 00:26:22,000
对这个问题

944
00:26:22,000 --> 00:26:24,000
我觉得是没有办法通过任何软件

945
00:26:24,000 --> 00:26:26,000
和这个就是什么优化来实现

946
00:26:26,000 --> 00:26:27,000
因为它就是一个很物理的东西

947
00:26:27,000 --> 00:26:28,000
对吧

948
00:26:28,000 --> 00:26:29,000
你能不能通过触感

949
00:26:29,000 --> 00:26:30,000
对是的

950
00:26:30,000 --> 00:26:31,000
来摸到那个东西

951
00:26:31,000 --> 00:26:32,000
因为 Touch Bar 最核心的

952
00:26:32,000 --> 00:26:35,000
就是说它把 FM 内排键的功能

953
00:26:35,000 --> 00:26:37,000
变成了一个随时可以定义

954
00:26:37,000 --> 00:26:39,000
它叫 context aware

955
00:26:39,000 --> 00:26:41,000
就是说根据使用环境

956
00:26:41,000 --> 00:26:42,000
比如你切了某一个 APP

957
00:26:42,000 --> 00:26:44,000
到前台

958
00:26:44,000 --> 00:26:46,000
它 Touch Bar 的功能就不一样

959
00:26:46,000 --> 00:26:46,000
对不对

960
00:26:46,000 --> 00:26:47,000
但这个就导致

961
00:26:47,000 --> 00:26:48,000
你没办法说

962
00:26:48,000 --> 00:26:50,000
此时你不看 Touch Bar 的时候

963
00:26:50,000 --> 00:26:51,000
它会怎么样

964
00:26:51,000 --> 00:26:52,000
你是不知道的

965
00:26:52,000 --> 00:26:53,000
对

966
00:26:53,000 --> 00:26:54,000
而且还带来的另外一个问题

967
00:26:54,000 --> 00:26:55,000
就是误触

968
00:26:55,000 --> 00:26:56,000
就是我可能会不注意

969
00:26:56,000 --> 00:26:57,000
就碰到它

970
00:26:57,000 --> 00:26:59,000
就把什么词性就调不对了

971
00:26:59,000 --> 00:27:01,000
我记得 Touch Bar 刚出来的时候

972
00:27:01,000 --> 00:27:02,000
我发过一条推

973
00:27:02,000 --> 00:27:04,000
就说我花 20 年的时间

974
00:27:04,000 --> 00:27:07,000
学习怎样不看键盘来打字

975
00:27:07,000 --> 00:27:09,000
Touch Bar 出来之后

976
00:27:09,000 --> 00:27:11,000
我又反过来需要看键盘

977
00:27:11,000 --> 00:27:13,000
这个就让人感觉很逆

978
00:27:13,000 --> 00:27:14,000
历史潮流

979
00:27:14,000 --> 00:27:16,000
所以我觉得 Touch Bar 这个东西

980
00:27:16,000 --> 00:27:17,000
真的是有点像苹果

981
00:27:17,000 --> 00:27:19,000
就是为了做的不一样

982
00:27:19,000 --> 00:27:21,000
强行做出来一个不一样的东西

983
00:27:21,000 --> 00:27:23,000
然后感觉说不定

984
00:27:23,000 --> 00:27:25,000
之后希望他能改鞋归正吧

985
00:27:25,000 --> 00:27:28,000
但是你还是用金钱支持了他

986
00:27:28,000 --> 00:27:29,000
你用脚投票说

987
00:27:29,000 --> 00:27:30,000
你们还接着我在这条鞋路上

988
00:27:30,000 --> 00:27:31,000
越走越远吧

989
00:27:31,000 --> 00:27:32,000
对

990
00:27:32,000 --> 00:27:33,000
好像是

991
00:27:33,000 --> 00:27:34,000
你这样说的话

992
00:27:34,000 --> 00:27:37,000
我还是怀在一个比较

993
00:27:37,000 --> 00:27:38,000
裹粉的心态

994
00:27:38,000 --> 00:27:39,000
希望再给他一次机会

995
00:27:39,000 --> 00:27:40,000
是我自己的问题

996
00:27:40,000 --> 00:27:41,000
不是他的问题吧

997
00:27:41,000 --> 00:27:44,000
但现在这两天用下来感觉好像不是我的问题

998
00:27:44,000 --> 00:27:45,000
OK

999
00:27:45,000 --> 00:27:47,000
好

1000
00:27:47,000 --> 00:27:48,000
那我们到时候再关注一下

1001
00:27:48,000 --> 00:27:52,000
就是这次 M 1 的 Maple Pro 普及开后

1002
00:27:52,000 --> 00:27:54,000
首先我们看确实是不是说

1003
00:27:54,000 --> 00:27:56,000
Touch Bar 的各种不稳定问题

1004
00:27:56,000 --> 00:28:00,000
可以归丢过于 Bridge OS 和 USB 的不稳定性

1005
00:28:00,000 --> 00:28:02,000
如果这个问题解决之后

1006
00:28:02,000 --> 00:28:03,000
我们再来看

1007
00:28:03,000 --> 00:28:08,000
刨除到这种导致极大扣分的负面因素之后

1008
00:28:08,000 --> 00:28:10,000
Touch Bar 本身它能不能够打动消费者

1009
00:28:10,000 --> 00:28:12,000
除了这个 Touch Bar 之外

1010
00:28:12,000 --> 00:28:15,000
这回的这个 M 1 芯片的 MacBook Pro 和 MacBook Air

1011
00:28:15,000 --> 00:28:19,000
它唯一的区别就只有在外形和重量上了

1012
00:28:19,000 --> 00:28:19,000
好像是

1013
00:28:19,000 --> 00:28:22,000
因为那个不管是就是接口也是一样的

1014
00:28:22,000 --> 00:28:23,000
屏幕是一样的

1015
00:28:23,000 --> 00:28:26,000
甚至连这个 WiFi 天线的数量都是两根都是一样的

1016
00:28:26,000 --> 00:28:26,000
对吧

1017
00:28:26,000 --> 00:28:28,000
SSD 也是一样的

1018
00:28:28,000 --> 00:28:30,000
那个触摸板都是一样的

1019
00:28:30,000 --> 00:28:30,000
对

1020
00:28:30,000 --> 00:28:32,000
这件事情给人感觉就是

1021
00:28:32,000 --> 00:28:35,000
Apple 应该是把直接把原来的英特尔的版本就拿过来

1022
00:28:35,000 --> 00:28:37,000
换了个新换了个主板

1023
00:28:37,000 --> 00:28:39,000
大概其他的没有什么大的改进

1024
00:28:39,000 --> 00:28:40,000
就直接拿出来主板了

1025
00:28:40,000 --> 00:28:44,000
好像在 mini 上这件事情会更显著一些

1026
00:28:44,000 --> 00:28:47,000
就至少我们看那个 iMacFX 昨天的拆解图

1027
00:28:47,000 --> 00:28:52,000
它打开来看我们来对比跟上一代有英特尔的这个芯片的 MacBook Pro

1028
00:28:52,000 --> 00:28:53,000
它确实是一模一样的

1029
00:28:53,000 --> 00:28:54,000
连那个

1030
00:28:54,000 --> 00:28:58,000
他们说那个就是连那个 CPU 风扇的型号都是一模一样的

1031
00:28:58,000 --> 00:29:03,000
没错而且 mini 的话好像据说会额外空出来很多空间

1032
00:29:03,000 --> 00:29:07,000
就是明明可以做的更小的更精简的一个设备

1033
00:29:07,000 --> 00:29:09,000
对它其实里面就是半空了已经

1034
00:29:09,000 --> 00:29:12,000
对当时 Rail 问我要不要买 mini

1035
00:29:12,000 --> 00:29:14,000
我觉得这肯定不能买

1036
00:29:14,000 --> 00:29:16,000
这明明可以做的更小

1037
00:29:16,000 --> 00:29:18,000
然后一定要塞在既有个壳子里面

1038
00:29:18,000 --> 00:29:21,000
那我宁可等更小的下一代

1039
00:29:21,000 --> 00:29:23,000
下一代也不一定变得更小

1040
00:29:23,000 --> 00:29:24,000
可能变得更 powerful 了

1041
00:29:24,000 --> 00:29:27,000
就是下次给你一个 Mac mini Pro 之类的这种

1042
00:29:27,000 --> 00:29:29,000
对不管怎么说

1043
00:29:29,000 --> 00:29:30,000
那这一代显然没有下载好

1044
00:29:30,000 --> 00:29:32,000
对这句话永远是对的

1045
00:29:32,000 --> 00:29:34,000
但是早买早享受

1046
00:29:34,000 --> 00:29:35,000
这也是有道理

1047
00:29:35,000 --> 00:29:37,000
我以前特别深刻

1048
00:29:37,000 --> 00:29:38,000
因为我当时是买的

1049
00:29:38,000 --> 00:29:42,000
你们记不记得苹果是在 12 年发布的第一款

1050
00:29:42,000 --> 00:29:43,000
那个 Retina 的 MacBook Pro

1051
00:29:43,000 --> 00:29:44,000
15 寸的那一款

1052
00:29:44,000 --> 00:29:46,000
它当时还是搭载的独立显卡

1053
00:29:46,000 --> 00:29:48,000
还是这个 NVIDIA 的

1054
00:29:48,000 --> 00:29:49,000
应该是多少来的

1055
00:29:49,000 --> 00:29:51,000
什么 GG 00 M 好像是

1056
00:29:51,000 --> 00:29:54,000
对那一代我应该也是买了的

1057
00:29:54,000 --> 00:29:57,000
我都是第一个去吃第一代螃蟹的

1058
00:29:57,000 --> 00:30:00,000
那你遇到质量问题了吗

1059
00:30:00,000 --> 00:30:02,000
我好像不记得我遇到什么问题

1060
00:30:02,000 --> 00:30:04,000
我记得我对台那台 MacBook

1061
00:30:04,000 --> 00:30:05,000
当时还各方面挺满意的

1062
00:30:05,000 --> 00:30:07,000
说回来这个 M 1

1063
00:30:07,000 --> 00:30:09,000
因为你没有买 mini

1064
00:30:09,000 --> 00:30:11,000
然后因为你有 DTK

1065
00:30:11,000 --> 00:30:12,000
所以我们目前

1066
00:30:12,000 --> 00:30:14,000
苹果目前还没有公布到底说

1067
00:30:14,000 --> 00:30:16,000
那个 DTK 它是租给你们用

1068
00:30:16,000 --> 00:30:16,000
对吧

1069
00:30:16,000 --> 00:30:17,000
当时也说的很明确

1070
00:30:17,000 --> 00:30:19,000
那个东西产品不是属于你的

1071
00:30:19,000 --> 00:30:19,000
对

1072
00:30:19,000 --> 00:30:20,000
到时候你还得退回去

1073
00:30:20,000 --> 00:30:20,000
对

1074
00:30:20,000 --> 00:30:22,000
但是不知道退回去之后

1075
00:30:22,000 --> 00:30:23,000
然后呢

1076
00:30:23,000 --> 00:30:24,000
因为你是为那个付了钱的

1077
00:30:24,000 --> 00:30:25,000
对吧

1078
00:30:25,000 --> 00:30:25,000
对

1079
00:30:25,000 --> 00:30:26,000
当然那个钱的话

1080
00:30:26,000 --> 00:30:28,000
它说的是一个 program fee

1081
00:30:28,000 --> 00:30:30,000
是加入这个计划的钱

1082
00:30:30,000 --> 00:30:31,000
它和买这个设备

1083
00:30:31,000 --> 00:30:32,000
根本就没有任何的关系

1084
00:30:32,000 --> 00:30:33,000
所以说

1085
00:30:33,000 --> 00:30:35,000
它即使要求你收回去

1086
00:30:35,000 --> 00:30:36,000
然后什么也不说

1087
00:30:36,000 --> 00:30:38,000
你也是没有办法

1088
00:30:38,000 --> 00:30:39,000
说去抱怨这件事情

1089
00:30:39,000 --> 00:30:41,000
但是好像据说

1090
00:30:41,000 --> 00:30:43,000
按照当年 PowerPC

1091
00:30:43,000 --> 00:30:45,000
这个迁移的那个时候的事情的话

1092
00:30:45,000 --> 00:30:46,000
苹果之后

1093
00:30:46,000 --> 00:30:47,000
你还回去的时候

1094
00:30:47,000 --> 00:30:48,000
是会还给

1095
00:30:48,000 --> 00:30:50,000
是会再换给你一个

1096
00:30:50,000 --> 00:30:52,000
市售的一个正式版的一个产品的

1097
00:30:52,000 --> 00:30:53,000
现在开发者

1098
00:30:53,000 --> 00:30:55,000
大家都还挺期待这件事情

1099
00:30:55,000 --> 00:30:57,000
当时它是给了一个

1100
00:30:57,000 --> 00:30:59,000
好像英特尔版本的 iMac

1101
00:30:59,000 --> 00:31:01,000
给那些就是尝试的开发者

1102
00:31:01,000 --> 00:31:03,000
但是可能这件事情不太好比

1103
00:31:03,000 --> 00:31:04,000
因为当时那个苹果开发者的数量

1104
00:31:04,000 --> 00:31:05,000
还是非常少的

1105
00:31:05,000 --> 00:31:05,000
对吧

1106
00:31:05,000 --> 00:31:07,000
至少跟现在不是一个数量

1107
00:31:07,000 --> 00:31:08,000
可能差两个数量

1108
00:31:08,000 --> 00:31:09,000
也要估计

1109
00:31:09,000 --> 00:31:10,000
那现在就是说

1110
00:31:10,000 --> 00:31:11,000
有这么多人的情况下

1111
00:31:11,000 --> 00:31:14,000
估计不能送 iMac 了吧

1112
00:31:14,000 --> 00:31:15,000
有点贵

1113
00:31:15,000 --> 00:31:16,000
能送一个 Mac mini 回来

1114
00:31:16,000 --> 00:31:17,000
就已经不错了

1115
00:31:17,000 --> 00:31:18,000
对

1116
00:31:18,000 --> 00:31:20,000
我觉得可能送一个 M 1 的 mini

1117
00:31:20,000 --> 00:31:21,000
应该算一下价值上

1118
00:31:21,000 --> 00:31:22,000
应该是差不多的

1119
00:31:22,000 --> 00:31:24,000
因为现在它 M 1 的那个 Mac mini

1120
00:31:24,000 --> 00:31:25,000
它标配是多少钱

1121
00:31:25,000 --> 00:31:27,000
好像就是 600 刀差不多是吧

1122
00:31:27,000 --> 00:31:29,000
599 还是 699 来的

1123
00:31:29,000 --> 00:31:30,000
好像差不多

1124
00:31:30,000 --> 00:31:31,000
反正是这个价位上

1125
00:31:31,000 --> 00:31:33,000
但要是这样比的话

1126
00:31:33,000 --> 00:31:35,000
现在开发者

1127
00:31:35,000 --> 00:31:36,000
虽然说可能比原来多了很多

1128
00:31:36,000 --> 00:31:37,000
比如说多 10 倍

1129
00:31:37,000 --> 00:31:39,000
那它苹果的市值也翻 10 倍了

1130
00:31:39,000 --> 00:31:39,000
是吧

1131
00:31:39,000 --> 00:31:40,000
那也可以

1132
00:31:40,000 --> 00:31:44,000
他也不能赔钱给你

1133
00:31:44,000 --> 00:31:44,000
我的意思就是说

1134
00:31:44,000 --> 00:31:46,000
他可能就是让点力

1135
00:31:46,000 --> 00:31:47,000
比如说我这个不怎么赚钱

1136
00:31:47,000 --> 00:31:48,000
你算吧

1137
00:31:48,000 --> 00:31:49,000
如果说我们查一下

1138
00:31:49,000 --> 00:31:50,000
现在 Mac mini

1139
00:31:50,000 --> 00:31:53,000
这个官方售价是多少钱

1140
00:31:53,000 --> 00:31:53,000
对吧

1141
00:31:53,000 --> 00:31:54,000
M 1 的刚好 699

1142
00:31:54,000 --> 00:31:56,000
你交的开发者

1143
00:31:56,000 --> 00:31:58,000
那个费用差不多是 500 刀

1144
00:31:58,000 --> 00:31:58,000
对吧

1145
00:31:58,000 --> 00:31:59,000
那我们知道苹果

1146
00:31:59,000 --> 00:32:00,000
大概是通常来说

1147
00:32:00,000 --> 00:32:04,000
是 30%的利润率

1148
00:32:04,000 --> 00:32:05,000
那差不多这个 mini

1149
00:32:05,000 --> 00:32:06,000
可能成本也就是

1150
00:32:06,000 --> 00:32:08,000
三四百刀的样子

1151
00:32:08,000 --> 00:32:09,000
那减掉物流成本

1152
00:32:09,000 --> 00:32:10,000
估计能打得住

1153
00:32:10,000 --> 00:32:11,000
我估计

1154
00:32:11,000 --> 00:32:12,000
实在不行的

1155
00:32:12,000 --> 00:32:14,000
我觉得给开发者

1156
00:32:14,000 --> 00:32:15,000
一个折扣券什么的

1157
00:32:15,000 --> 00:32:16,000
能够抵消一下

1158
00:32:16,000 --> 00:32:18,000
你自己去买的时候的借格

1159
00:32:18,000 --> 00:32:20,000
我觉得其实也已经很不错了

1160
00:32:20,000 --> 00:32:21,000
第五年

1161
00:32:21,000 --> 00:32:23,000
Apple Developer 年费

1162
00:32:23,000 --> 00:32:24,000
也可以

1163
00:32:24,000 --> 00:32:25,000
对也可以

1164
00:32:25,000 --> 00:32:26,000
也是个方案

1165
00:32:26,000 --> 00:32:28,000
或者给那个

1166
00:32:28,000 --> 00:32:30,000
给那个就是 App Store 的

1167
00:32:30,000 --> 00:32:31,000
那个 Gift Card

1168
00:32:31,000 --> 00:32:32,000
你可以去店里买东西

1169
00:32:32,000 --> 00:32:32,000
也行

1170
00:32:32,000 --> 00:32:34,000
对

1171
00:32:34,000 --> 00:32:34,000
那就和

1172
00:32:34,000 --> 00:32:35,000
其实就和底前

1173
00:32:35,000 --> 00:32:36,000
差不多一个意思

1174
00:32:36,000 --> 00:32:36,000
对

1175
00:32:36,000 --> 00:32:37,000
但你自由一点

1176
00:32:37,000 --> 00:32:38,000
你不一定说一定

1177
00:32:38,000 --> 00:32:39,000
假设你不想要 mini

1178
00:32:39,000 --> 00:32:40,000
你只想要个 Air

1179
00:32:40,000 --> 00:32:41,000
对吧

1180
00:32:41,000 --> 00:32:42,000
他给你选择

1181
00:32:42,000 --> 00:32:43,000
选择多一些

1182
00:32:43,000 --> 00:32:43,000
是的

1183
00:32:43,000 --> 00:32:45,000
这个还挺期待

1184
00:32:45,000 --> 00:32:46,000
到时候会怎么样

1185
00:32:46,000 --> 00:32:47,000
但如果说到时候

1186
00:32:47,000 --> 00:32:48,000
真的换回来一个 mini

1187
00:32:48,000 --> 00:32:49,000
你可以拿它来做

1188
00:32:49,000 --> 00:32:50,000
这个什么

1189
00:32:50,000 --> 00:32:51,000
编译主机用

1190
00:32:51,000 --> 00:32:51,000
对吧

1191
00:32:51,000 --> 00:32:52,000
对可以

1192
00:32:52,000 --> 00:32:54,000
倒是没问题的

1193
00:32:54,000 --> 00:32:56,000
因为毕竟比你那个 iMac Pro 的

1194
00:32:56,000 --> 00:32:57,000
那个编译性能要好

1195
00:32:57,000 --> 00:32:58,000
对啊

1196
00:32:58,000 --> 00:32:59,000
我现在都在犹豫

1197
00:32:59,000 --> 00:33:01,000
我要不要干脆拿个 mini

1198
00:33:01,000 --> 00:33:03,000
来把我这个 iMac Pro 给替代算了

1199
00:33:03,000 --> 00:33:05,000
就把那个 iMac Pro 给出了

1200
00:33:05,000 --> 00:33:06,000
然后换一个那个什么

1201
00:33:06,000 --> 00:33:09,000
Pro XDR Display 回来

1202
00:33:09,000 --> 00:33:11,000
接上那个 Mac mini

1203
00:33:11,000 --> 00:33:11,000
对

1204
00:33:11,000 --> 00:33:13,000
但是那个显示器的价格

1205
00:33:13,000 --> 00:33:14,000
又变成了一个阻碍

1206
00:33:14,000 --> 00:33:15,000
等一下

1207
00:33:15,000 --> 00:33:16,000
他们说是什么来的

1208
00:33:16,000 --> 00:33:20,000
就是那个显示器的那个支架的价钱

1209
00:33:20,000 --> 00:33:21,000
是要比那个 mini 贵的

1210
00:33:21,000 --> 00:33:22,000
对

1211
00:33:22,000 --> 00:33:24,000
是那个支架的比 mini 还贵

1212
00:33:24,000 --> 00:33:25,000
对

1213
00:33:25,000 --> 00:33:27,000
所以我去店里买的时候

1214
00:33:27,000 --> 00:33:29,000
我又仔细的端详了一下那个支架

1215
00:33:29,000 --> 00:33:32,000
它做的确实是很优雅的

1216
00:33:32,000 --> 00:33:34,000
很 fancy 的

1217
00:33:34,000 --> 00:33:34,000
有一种

1218
00:33:34,000 --> 00:33:36,000
很贵

1219
00:33:36,000 --> 00:33:37,000
跑车的感觉

1220
00:33:37,000 --> 00:33:37,000
是不是

1221
00:33:37,000 --> 00:33:38,000
对

1222
00:33:38,000 --> 00:33:39,000
是的

1223
00:33:39,000 --> 00:33:41,000
那你要买吗

1224
00:33:41,000 --> 00:33:42,000
我觉得还是值那个钱

1225
00:33:42,000 --> 00:33:45,000
我觉得想来想

1226
00:33:45,000 --> 00:33:45,000
冷静一下

1227
00:33:45,000 --> 00:33:49,000
还是等着它二代出现 M 2 这样的芯片的时候

1228
00:33:49,000 --> 00:33:49,000
再迁移吧

1229
00:33:49,000 --> 00:33:51,000
确实现在在 M 1 上

1230
00:33:51,000 --> 00:33:54,000
要完全拿来作为一个工作开发环境的话

1231
00:33:54,000 --> 00:33:56,000
可能还会稍微有一点障碍

1232
00:33:56,000 --> 00:33:57,000
这种情况下的话

1233
00:33:57,000 --> 00:33:58,000
就没有必要这样

1234
00:33:58,000 --> 00:34:00,000
不要强行换过去了

1235
00:34:00,000 --> 00:34:00,000
那刚好

1236
00:34:00,000 --> 00:34:02,000
那我们就刚才聊完了硬件好了

1237
00:34:02,000 --> 00:34:04,000
我们就过渡到说这个软件的问题

1238
00:34:04,000 --> 00:34:06,000
就是目前你用下来

1239
00:34:06,000 --> 00:34:07,000
在日常生活中

1240
00:34:07,000 --> 00:34:08,000
我们分两类吧

1241
00:34:08,000 --> 00:34:09,000
就首先说

1242
00:34:09,000 --> 00:34:10,000
你的工作上

1243
00:34:10,000 --> 00:34:12,000
如果用它会遇到什么样的障碍

1244
00:34:12,000 --> 00:34:12,000
然后说是

1245
00:34:12,000 --> 00:34:13,000
如果你日常

1246
00:34:13,000 --> 00:34:15,000
就是日常消遣

1247
00:34:15,000 --> 00:34:16,000
用它会遇到什么样的问题

1248
00:34:16,000 --> 00:34:17,000
我们先做工作这块吧

1249
00:34:17,000 --> 00:34:18,000
就是说

1250
00:34:18,000 --> 00:34:19,000
你说还是有一些工具链

1251
00:34:19,000 --> 00:34:21,000
不够那么完善的

1252
00:34:21,000 --> 00:34:21,000
对吧

1253
00:34:21,000 --> 00:34:22,000
就主要是哪些

1254
00:34:22,000 --> 00:34:23,000
是的

1255
00:34:23,000 --> 00:34:25,000
就是如果是苹果自己相关的

1256
00:34:25,000 --> 00:34:27,000
Xcode 相关的这些东西的话

1257
00:34:27,000 --> 00:34:28,000
几乎都毫无问题

1258
00:34:28,000 --> 00:34:29,000
所有东西都

1259
00:34:29,000 --> 00:34:30,000
它都把你已经想好了

1260
00:34:30,000 --> 00:34:32,000
你就顶多是调点参数

1261
00:34:32,000 --> 00:34:33,000
改些参数就行了

1262
00:34:33,000 --> 00:34:34,000
然后的话

1263
00:34:34,000 --> 00:34:36,000
最多的话就是 Brow

1264
00:34:36,000 --> 00:34:38,000
就是那些命令行下面的话

1265
00:34:38,000 --> 00:34:38,000
一些工具

1266
00:34:38,000 --> 00:34:39,000
本身的话

1267
00:34:39,000 --> 00:34:41,000
这次做的这个兼容层

1268
00:34:41,000 --> 00:34:42,000
是非常完美的

1269
00:34:42,000 --> 00:34:43,000
就是英特尔的

1270
00:34:43,000 --> 00:34:45,000
二进制在机器上执行

1271
00:34:45,000 --> 00:34:46,000
不会有任何的问题

1272
00:34:46,000 --> 00:34:48,000
但是一旦遇到像

1273
00:34:48,000 --> 00:34:49,000
Batch Script 这样的脚本的时候

1274
00:34:49,000 --> 00:34:51,000
就可能会出问题了

1275
00:34:51,000 --> 00:34:52,000
然后特别是

1276
00:34:52,000 --> 00:34:53,000
当它需要去编译

1277
00:34:53,000 --> 00:34:54,000
本地编译一些

1278
00:34:54,000 --> 00:34:56,000
那个代码出来

1279
00:34:56,000 --> 00:34:57,000
然后去运行的时候

1280
00:34:57,000 --> 00:34:57,000
就会出问题

1281
00:34:57,000 --> 00:34:59,000
但其实这个事情

1282
00:34:59,000 --> 00:35:01,000
有一个很简单的解决方法

1283
00:35:01,000 --> 00:35:02,000
你把你整个 terminal

1284
00:35:02,000 --> 00:35:03,000
就是 iTerm

1285
00:35:03,000 --> 00:35:04,000
或者是官方的 terminal

1286
00:35:04,000 --> 00:35:07,000
用特定的一个指令

1287
00:35:07,000 --> 00:35:08,000
去执行了之后

1288
00:35:08,000 --> 00:35:09,000
让它直接

1289
00:35:09,000 --> 00:35:10,000
让整个 terminal

1290
00:35:10,000 --> 00:35:11,000
运行英特尔的框架之下

1291
00:35:11,000 --> 00:35:12,000
这样的话

1292
00:35:12,000 --> 00:35:13,000
它去执行的

1293
00:35:13,000 --> 00:35:14,000
下面的直进层

1294
00:35:14,000 --> 00:35:15,000
Bash

1295
00:35:15,000 --> 00:35:16,000
然后和 Script 的话

1296
00:35:16,000 --> 00:35:18,000
都会延续着

1297
00:35:18,000 --> 00:35:19,000
它的母进层的

1298
00:35:19,000 --> 00:35:19,000
这么一个

1299
00:35:19,000 --> 00:35:20,000
副进层的

1300
00:35:20,000 --> 00:35:21,000
这么一个设置

1301
00:35:21,000 --> 00:35:22,000
所以说就是

1302
00:35:22,000 --> 00:35:23,000
以虚拟的方式去运行

1303
00:35:23,000 --> 00:35:25,000
所以说可以消灭掉

1304
00:35:25,000 --> 00:35:26,000
很多很多的问题

1305
00:35:26,000 --> 00:35:27,000
这里可能要解释一下

1306
00:35:27,000 --> 00:35:28,000
就是说

1307
00:35:28,000 --> 00:35:29,000
首先默认情况下

1308
00:35:29,000 --> 00:35:32,000
在 M 1 的 Mac 上面

1309
00:35:32,000 --> 00:35:34,000
你开的任何程序

1310
00:35:34,000 --> 00:35:35,000
它有两种程序

1311
00:35:35,000 --> 00:35:36,000
一种是原生的

1312
00:35:36,000 --> 00:35:36,000
ARM

1313
00:35:36,000 --> 00:35:40,000
就是 ARM 指令级的这种程序

1314
00:35:40,000 --> 00:35:40,000
然后就是所谓的

1315
00:35:40,000 --> 00:35:41,000
这种叫 native

1316
00:35:41,000 --> 00:35:42,000
我们叫原生

1317
00:35:42,000 --> 00:35:42,000
对吧

1318
00:35:42,000 --> 00:35:43,000
还有一种就是

1319
00:35:43,000 --> 00:35:45,000
用 Intel 的指令

1320
00:35:45,000 --> 00:35:46,000
但是是通过

1321
00:35:46,000 --> 00:35:48,000
Rosetta 2 的模拟层

1322
00:35:48,000 --> 00:35:49,000
来实现的

1323
00:35:49,000 --> 00:35:49,000
对吧

1324
00:35:49,000 --> 00:35:50,000
Emulation

1325
00:35:50,000 --> 00:35:51,000
就是用

1326
00:35:51,000 --> 00:35:53,000
在一个 ARM 的芯片上

1327
00:35:53,000 --> 00:35:54,000
模拟运行

1328
00:35:54,000 --> 00:35:54,000
X 86 的指令

1329
00:35:54,000 --> 00:35:56,000
然后来跑

1330
00:35:56,000 --> 00:35:57,000
原来那些旧的

1331
00:35:57,000 --> 00:35:58,000
Intel 的那些

1332
00:35:58,000 --> 00:35:59,000
指令级的程序

1333
00:35:59,000 --> 00:36:00,000
不做任何修改

1334
00:36:00,000 --> 00:36:00,000
对

1335
00:36:00,000 --> 00:36:01,000
是的

1336
00:36:01,000 --> 00:36:01,000
然后你的

1337
00:36:01,000 --> 00:36:03,000
目前的状况是说

1338
00:36:03,000 --> 00:36:06,000
如果你用那些原生的

1339
00:36:06,000 --> 00:36:07,000
有的话

1340
00:36:07,000 --> 00:36:08,000
是没有任何问题的

1341
00:36:08,000 --> 00:36:09,000
但如果说原生

1342
00:36:09,000 --> 00:36:11,000
它原来是 Intel 的

1343
00:36:11,000 --> 00:36:12,000
这个指令级的程序

1344
00:36:12,000 --> 00:36:13,000
你最好还是用

1345
00:36:13,000 --> 00:36:14,000
Rosetta 2 的方式

1346
00:36:14,000 --> 00:36:15,000
来驱动它

1347
00:36:15,000 --> 00:36:17,000
会比较好一些

1348
00:36:17,000 --> 00:36:18,000
就是它如果本身

1349
00:36:18,000 --> 00:36:19,000
是二进制的分发

1350
00:36:19,000 --> 00:36:21,000
然后是 Intel 的代码

1351
00:36:21,000 --> 00:36:22,000
你就直接当它

1352
00:36:22,000 --> 00:36:24,000
就是一个原生程序

1353
00:36:24,000 --> 00:36:25,000
用起来没有任何的问题

1354
00:36:25,000 --> 00:36:27,000
这个兼用程序做得非常好

1355
00:36:27,000 --> 00:36:27,000
但这个时候

1356
00:36:27,000 --> 00:36:29,000
它还是通过模拟的方式

1357
00:36:29,000 --> 00:36:30,000
来执行的

1358
00:36:30,000 --> 00:36:30,000
对吧

1359
00:36:30,000 --> 00:36:32,000
因为它不是原生的一个 ARM 程序

1360
00:36:32,000 --> 00:36:32,000
对

1361
00:36:32,000 --> 00:36:34,000
它只是以此 CPU 性能上

1362
00:36:34,000 --> 00:36:35,000
会有损耗

1363
00:36:35,000 --> 00:36:36,000
另外我观察的话

1364
00:36:36,000 --> 00:36:37,000
它的内存占用上

1365
00:36:37,000 --> 00:36:39,000
几乎是它在 Intel 设备上的两倍

1366
00:36:39,000 --> 00:36:41,000
可能是要涉及到

1367
00:36:41,000 --> 00:36:42,000
虚拟的一个方式的话

1368
00:36:42,000 --> 00:36:44,000
它有一些特定的一些损耗

1369
00:36:44,000 --> 00:36:45,000
可能要翻译一些指令

1370
00:36:45,000 --> 00:36:47,000
要缓存起来可能

1371
00:36:47,000 --> 00:36:47,000
对 是的

1372
00:36:47,000 --> 00:36:48,000
所以的话

1373
00:36:48,000 --> 00:36:51,000
就是一个内存和 CPU 的一个问题

1374
00:36:51,000 --> 00:36:52,000
但是不会影响你工作

1375
00:36:52,000 --> 00:36:53,000
所以但是的话

1376
00:36:53,000 --> 00:36:55,000
就是会直接跑不起来的程序的话

1377
00:36:55,000 --> 00:36:57,000
主要都是一些特别复杂的

1378
00:36:57,000 --> 00:36:59,000
然后脚本类型的

1379
00:36:59,000 --> 00:37:00,000
因为脚本类型的话

1380
00:37:00,000 --> 00:37:02,000
它会导致你这个翻译的机制

1381
00:37:02,000 --> 00:37:03,000
你不知道你现在该去工作

1382
00:37:03,000 --> 00:37:05,000
你该对这个脚本

1383
00:37:05,000 --> 00:37:06,000
进行一些特定的一些

1384
00:37:06,000 --> 00:37:07,000
兼容性的一些事情

1385
00:37:07,000 --> 00:37:10,000
所以就它就整个就 break 掉了

1386
00:37:10,000 --> 00:37:11,000
你的意思就是说脚本

1387
00:37:11,000 --> 00:37:13,000
就是它是以 ARM 的方式来运行的

1388
00:37:13,000 --> 00:37:15,000
但是开发者是在

1389
00:37:15,000 --> 00:37:16,000
这个 X 86 的整理性上实现

1390
00:37:16,000 --> 00:37:17,000
所以导致这里面

1391
00:37:17,000 --> 00:37:18,000
有点冲突的地方

1392
00:37:18,000 --> 00:37:20,000
对 是的 没错

1393
00:37:20,000 --> 00:37:21,000
就比如说你是

1394
00:37:21,000 --> 00:37:22,000
它直接靠一个脚本

1395
00:37:22,000 --> 00:37:24,000
去编译出一段代码

1396
00:37:24,000 --> 00:37:25,000
编译的那些各种参数

1397
00:37:25,000 --> 00:37:26,000
和命令的话

1398
00:37:26,000 --> 00:37:28,000
都是为 X 86 环境设计的

1399
00:37:28,000 --> 00:37:30,000
然后这个时候你去执行的话

1400
00:37:30,000 --> 00:37:30,000
整个 bash

1401
00:37:30,000 --> 00:37:31,000
整个 terminal

1402
00:37:31,000 --> 00:37:32,000
这个环境

1403
00:37:32,000 --> 00:37:33,000
全都是在 ARM 的状态下

1404
00:37:33,000 --> 00:37:34,000
它运到脚本

1405
00:37:34,000 --> 00:37:36,000
脚本里面自然的各种命令

1406
00:37:36,000 --> 00:37:37,000
就和它出问题了

1407
00:37:37,000 --> 00:37:38,000
它就没把这些进行下去了

1408
00:37:38,000 --> 00:37:41,000
就可能连参数都不支持了

1409
00:37:41,000 --> 00:37:42,000
比一下也是 X 86 特有的参数

1410
00:37:42,000 --> 00:37:43,000
对 是的

1411
00:37:43,000 --> 00:37:45,000
但是如果你把整个 terminal

1412
00:37:45,000 --> 00:37:46,000
都是使用 ARCH 指令

1413
00:37:46,000 --> 00:37:49,000
让它以虚拟环境的话

1414
00:37:49,000 --> 00:37:50,000
去执行的话

1415
00:37:50,000 --> 00:37:52,000
后面的整个这一套

1416
00:37:52,000 --> 00:37:53,000
它就全部都对上了

1417
00:37:53,000 --> 00:37:54,000
所以说它又能用起来了

1418
00:37:54,000 --> 00:37:56,000
就是连整个 terminal

1419
00:37:56,000 --> 00:37:57,000
都运行在 Rosetta 2 的

1420
00:37:57,000 --> 00:37:58,000
X 86 的环境设计

1421
00:37:58,000 --> 00:38:00,000
所以它下面

1422
00:38:00,000 --> 00:38:01,000
启动了所有的脚本

1423
00:38:01,000 --> 00:38:01,000
它也认为

1424
00:38:01,000 --> 00:38:03,000
它还是在一个 X 86 的

1425
00:38:03,000 --> 00:38:04,000
芯片上运行

1426
00:38:04,000 --> 00:38:05,000
所以就不会出任何问题

1427
00:38:05,000 --> 00:38:07,000
然后因为 Rosetta 2 的

1428
00:38:07,000 --> 00:38:09,000
模拟层又做得特别好

1429
00:38:09,000 --> 00:38:09,000
所以目前来看

1430
00:38:09,000 --> 00:38:11,000
兼容性上是可以得到保证的

1431
00:38:11,000 --> 00:38:12,000
对 是的

1432
00:38:12,000 --> 00:38:13,000
OK 那你有没有留意到

1433
00:38:13,000 --> 00:38:15,000
它用 Rosetta 2 来模拟

1434
00:38:15,000 --> 00:38:16,000
运行 X 86 的这些

1435
00:38:16,000 --> 00:38:18,000
不管是脚本也好

1436
00:38:18,000 --> 00:38:18,000
还是一些

1437
00:38:18,000 --> 00:38:19,000
比如说像 Dropbox

1438
00:38:19,000 --> 00:38:20,000
它还没有改

1439
00:38:20,000 --> 00:38:20,000
对吧

1440
00:38:20,000 --> 00:38:21,000
这种原原本的程序

1441
00:38:21,000 --> 00:38:22,000
除了刚才你提到

1442
00:38:22,000 --> 00:38:25,000
内存占用比较大的问题之外

1443
00:38:25,000 --> 00:38:26,000
它性能损耗大概有多少

1444
00:38:26,000 --> 00:38:27,000
你能感受得到吗

1445
00:38:27,000 --> 00:38:28,000
UI 程序的话

1446
00:38:28,000 --> 00:38:29,000
几乎感受不到

1447
00:38:29,000 --> 00:38:31,000
就是你可能感觉

1448
00:38:31,000 --> 00:38:32,000
点开的时候

1449
00:38:32,000 --> 00:38:33,000
稍微它慢了一点

1450
00:38:33,000 --> 00:38:34,000
就是可能慢了

1451
00:38:34,000 --> 00:38:35,000
那么一秒不到的一个时间

1452
00:38:35,000 --> 00:38:36,000
但是我不确定

1453
00:38:36,000 --> 00:38:37,000
这是心理作用

1454
00:38:37,000 --> 00:38:40,000
还是它真的是慢的一个作用

1455
00:38:40,000 --> 00:38:42,000
有可能是今天我们要说到的

1456
00:38:42,000 --> 00:38:43,000
后面那个问题导致的

1457
00:38:43,000 --> 00:38:44,000
对吧

1458
00:38:44,000 --> 00:38:45,000
是的

1459
00:38:45,000 --> 00:38:49,000
然后根据别人的评测结果来看的话

1460
00:38:49,000 --> 00:38:50,000
即使是在虚拟层上运行的

1461
00:38:50,000 --> 00:38:51,000
那个速度的话

1462
00:38:51,000 --> 00:38:52,000
都比在原来的

1463
00:38:52,000 --> 00:38:53,000
英特尔的机器上

1464
00:38:53,000 --> 00:38:54,000
原生运行还快

1465
00:38:54,000 --> 00:38:56,000
这个实在是太可怕了

1466
00:38:56,000 --> 00:38:57,000
对

1467
00:38:57,000 --> 00:38:58,000
这个是我觉得

1468
00:38:58,000 --> 00:39:00,000
最让我们吃惊的一个地方

1469
00:39:00,000 --> 00:39:03,000
它在一个 M 1 芯片上

1470
00:39:03,000 --> 00:39:05,000
模拟运行 X 86 的指令

1471
00:39:05,000 --> 00:39:08,000
还比在 X 86 的原生的那个

1472
00:39:08,000 --> 00:39:10,000
这个机器上去运行还要快

1473
00:39:10,000 --> 00:39:12,000
因为这个 M 1 芯片的这个性能提升

1474
00:39:12,000 --> 00:39:13,000
足够大嘛

1475
00:39:13,000 --> 00:39:13,000
对吧

1476
00:39:13,000 --> 00:39:14,000
然后它模拟损好

1477
00:39:14,000 --> 00:39:16,000
比如说它 M 1 比那个

1478
00:39:16,000 --> 00:39:18,000
上一代 X 86 的性能提高了 70%

1479
00:39:18,000 --> 00:39:19,000
然后那模拟损好

1480
00:39:19,000 --> 00:39:21,000
可能只有 20%或者是 30%

1481
00:39:21,000 --> 00:39:21,000
那算下来

1482
00:39:21,000 --> 00:39:23,000
我还是有 40%的提高

1483
00:39:23,000 --> 00:39:24,000
对不对

1484
00:39:24,000 --> 00:39:26,000
这个真的是把英特尔摸穿

1485
00:39:26,000 --> 00:39:28,000
踢板摸穿了

1486
00:39:28,000 --> 00:39:29,000
是的

1487
00:39:29,000 --> 00:39:31,000
这个就让人感觉

1488
00:39:31,000 --> 00:39:32,000
就是说怀疑人生了

1489
00:39:32,000 --> 00:39:33,000
英特尔到底这么多年

1490
00:39:33,000 --> 00:39:34,000
他现在最近在干什么

1491
00:39:34,000 --> 00:39:36,000
真的是没有对比

1492
00:39:36,000 --> 00:39:36,000
就没有伤害

1493
00:39:36,000 --> 00:39:39,000
就你在 Apple 搞出这个东西

1494
00:39:39,000 --> 00:39:39,000
这之前

1495
00:39:39,000 --> 00:39:42,000
你是不知道英特尔是

1496
00:39:42,000 --> 00:39:43,000
已经老太隆终

1497
00:39:43,000 --> 00:39:44,000
到了什么地步

1498
00:39:44,000 --> 00:39:45,000
是的

1499
00:39:45,000 --> 00:39:47,000
虽然我们经常会调侃牙膏厂

1500
00:39:47,000 --> 00:39:49,000
但是我们可能心里面

1501
00:39:49,000 --> 00:39:50,000
总会有一个想法说

1502
00:39:50,000 --> 00:39:52,000
可能现在芯片发展

1503
00:39:52,000 --> 00:39:52,000
的确是到了

1504
00:39:52,000 --> 00:39:54,000
就是到了这个瓶颈了

1505
00:39:54,000 --> 00:39:55,000
我们老实说

1506
00:39:55,000 --> 00:39:56,000
这个摩尔定律到头了

1507
00:39:56,000 --> 00:39:57,000
对不对

1508
00:39:57,000 --> 00:39:58,000
然后新闻说

1509
00:39:58,000 --> 00:39:59,000
来看我吊打你一下

1510
00:39:59,000 --> 00:40:00,000
对

1511
00:40:00,000 --> 00:40:03,000
只不过在新的 M 1 上面的话

1512
00:40:03,000 --> 00:40:05,000
还是能发现一些不一样的东西

1513
00:40:05,000 --> 00:40:06,000
有一些可能是在

1514
00:40:06,000 --> 00:40:07,000
本来在 X 86 结构上

1515
00:40:07,000 --> 00:40:10,000
我们已经熟悉了十几年

1516
00:40:10,000 --> 00:40:11,000
几十年的一些东西

1517
00:40:11,000 --> 00:40:12,000
它现在在苹果这里

1518
00:40:12,000 --> 00:40:13,000
被颠覆了

1519
00:40:13,000 --> 00:40:15,000
比如说我发现的话

1520
00:40:15,000 --> 00:40:16,000
可能有这几个

1521
00:40:16,000 --> 00:40:19,000
一个是根据最新的拆解结果

1522
00:40:19,000 --> 00:40:19,000
看的话

1523
00:40:19,000 --> 00:40:21,000
新的 WiFi 和蓝牙芯片

1524
00:40:21,000 --> 00:40:23,000
已经不再是一个高通的

1525
00:40:23,000 --> 00:40:24,000
一个独立的一个设备了

1526
00:40:24,000 --> 00:40:26,000
在原来的 iMac 上的话

1527
00:40:26,000 --> 00:40:26,000
我理解的话

1528
00:40:26,000 --> 00:40:28,000
它应该还是在

1529
00:40:28,000 --> 00:40:29,000
PCIe 总线上的一个设备吧

1530
00:40:29,000 --> 00:40:33,000
它老的苹果的 Mac 方案的 WiFi 方案

1531
00:40:33,000 --> 00:40:35,000
一般都是接博通的方案

1532
00:40:35,000 --> 00:40:36,000
博通的单独给它做一块卡

1533
00:40:36,000 --> 00:40:36,000
对

1534
00:40:36,000 --> 00:40:37,000
但是这个事情

1535
00:40:37,000 --> 00:40:39,000
好像也不是苹果先发明的

1536
00:40:39,000 --> 00:40:40,000
因为我记得

1537
00:40:40,000 --> 00:40:41,000
如果没去做的话

1538
00:40:41,000 --> 00:40:42,000
英特尔是

1539
00:40:42,000 --> 00:40:43,000
就是最近两年

1540
00:40:43,000 --> 00:40:44,000
做了一个技术

1541
00:40:44,000 --> 00:40:45,000
就是它把 WiFi 的

1542
00:40:45,000 --> 00:40:46,000
主要就是

1543
00:40:46,000 --> 00:40:48,000
WiFi 它分两个

1544
00:40:48,000 --> 00:40:50,000
一个是叫做

1545
00:40:50,000 --> 00:40:51,000
physical layer

1546
00:40:51,000 --> 00:40:51,000
物理层

1547
00:40:51,000 --> 00:40:52,000
就包括什么

1548
00:40:52,000 --> 00:40:54,000
无线信号的

1549
00:40:54,000 --> 00:40:55,000
桥质解条那一套东西

1550
00:40:55,000 --> 00:40:56,000
它单独还有一个东西

1551
00:40:56,000 --> 00:40:57,000
但是它的逻辑

1552
00:40:57,000 --> 00:40:58,000
就是什么协议

1553
00:40:58,000 --> 00:41:00,000
控制那层

1554
00:41:00,000 --> 00:41:00,000
它就已经做到了

1555
00:41:00,000 --> 00:41:02,000
英特尔的芯片里面去

1556
00:41:02,000 --> 00:41:03,000
所以你现在去买一些

1557
00:41:03,000 --> 00:41:04,000
比较最新的

1558
00:41:04,000 --> 00:41:06,000
最新的英特尔的移动笔记本

1559
00:41:06,000 --> 00:41:07,000
你会发现

1560
00:41:07,000 --> 00:41:09,000
它也是在芯片组里面

1561
00:41:09,000 --> 00:41:11,000
就是在英特尔的芯片里面完成的

1562
00:41:11,000 --> 00:41:12,000
就这个事情也是一样的

1563
00:41:12,000 --> 00:41:13,000
明白

1564
00:41:13,000 --> 00:41:17,000
以后都是变成那种独立的

1565
00:41:17,000 --> 00:41:19,000
我们以前还搞

1566
00:41:19,000 --> 00:41:20,000
就拆卡

1567
00:41:20,000 --> 00:41:21,000
比如说我们给一个老的 Mac

1568
00:41:21,000 --> 00:41:23,000
换上比如说 WiFi 6 的

1569
00:41:23,000 --> 00:41:26,000
WiFi 卡也是可行的

1570
00:41:26,000 --> 00:41:27,000
但以后就越来越不可行的

1571
00:41:27,000 --> 00:41:28,000
就是因为它是集成在

1572
00:41:28,000 --> 00:41:29,000
CPU 里面到了

1573
00:41:29,000 --> 00:41:30,000
对

1574
00:41:30,000 --> 00:41:31,000
有一个更

1575
00:41:31,000 --> 00:41:32,000
其他的更直观的

1576
00:41:32,000 --> 00:41:32,000
就是那个

1577
00:41:32,000 --> 00:41:33,000
Facetime 的摄像头

1578
00:41:33,000 --> 00:41:34,000
原来的话

1579
00:41:34,000 --> 00:41:35,000
Facetime 摄像头

1580
00:41:35,000 --> 00:41:36,000
也是靠

1581
00:41:36,000 --> 00:41:37,000
USB 总线接入的

1582
00:41:37,000 --> 00:41:39,000
现在在新的 M 1 设备上

1583
00:41:39,000 --> 00:41:41,000
我在系统信息里面看

1584
00:41:41,000 --> 00:41:42,000
USB 总线上

1585
00:41:42,000 --> 00:41:43,000
模仿上是干干净净的

1586
00:41:43,000 --> 00:41:44,000
什么设备都没有

1587
00:41:44,000 --> 00:41:45,000
所以说明这些内置的

1588
00:41:45,000 --> 00:41:46,000
这些设备的话

1589
00:41:46,000 --> 00:41:47,000
很有可能现在都是

1590
00:41:47,000 --> 00:41:48,000
苹果自己的一些

1591
00:41:48,000 --> 00:41:50,000
特殊的一些实现

1592
00:41:50,000 --> 00:41:51,000
去直接就和

1593
00:41:51,000 --> 00:41:52,000
主信片去通讯了

1594
00:41:52,000 --> 00:41:54,000
而不再是一些标准的

1595
00:41:54,000 --> 00:41:54,000
像我们是

1596
00:41:54,000 --> 00:41:56,000
熟悉的这些方式

1597
00:41:56,000 --> 00:41:57,000
它叫做 SoC

1598
00:41:57,000 --> 00:41:58,000
System Check

1599
00:41:58,000 --> 00:41:59,000
这个整合度是非常

1600
00:41:59,000 --> 00:42:01,000
令人吃惊的

1601
00:42:01,000 --> 00:42:01,000
另外还有一个

1602
00:42:01,000 --> 00:42:03,000
比较有趣的事情

1603
00:42:03,000 --> 00:42:05,000
就是当你的 M 1 设备

1604
00:42:05,000 --> 00:42:06,000
如果它真的

1605
00:42:06,000 --> 00:42:07,000
整个系统坏了之后

1606
00:42:07,000 --> 00:42:08,000
你怎么样去

1607
00:42:08,000 --> 00:42:09,000
让它恢复这个事情

1608
00:42:09,000 --> 00:42:10,000
变得也很

1609
00:42:10,000 --> 00:42:11,000
有点

1610
00:42:11,000 --> 00:42:12,000
稍微有点奇怪

1611
00:42:12,000 --> 00:42:13,000
就原来的话

1612
00:42:13,000 --> 00:42:14,000
我们的电脑

1613
00:42:14,000 --> 00:42:15,000
不管是台式机也好

1614
00:42:15,000 --> 00:42:16,000
比这本也好

1615
00:42:16,000 --> 00:42:17,000
坏了的话

1616
00:42:17,000 --> 00:42:18,000
像 Mac 的话

1617
00:42:18,000 --> 00:42:19,000
是进度恢复模式

1618
00:42:19,000 --> 00:42:20,000
从网上重新下

1619
00:42:20,000 --> 00:42:22,000
然后像是

1620
00:42:22,000 --> 00:42:23,000
或者的话

1621
00:42:23,000 --> 00:42:24,000
更传统的方式

1622
00:42:24,000 --> 00:42:25,000
就是拿 U 盘

1623
00:42:25,000 --> 00:42:26,000
或者是光区光盘

1624
00:42:26,000 --> 00:42:27,000
重新去装

1625
00:42:27,000 --> 00:42:28,000
整个操作系统

1626
00:42:28,000 --> 00:42:30,000
现在在新的 M 1 设备上

1627
00:42:30,000 --> 00:42:31,000
当如果你出现了

1628
00:42:31,000 --> 00:42:33,000
真正彻底死掉的设备

1629
00:42:33,000 --> 00:42:34,000
彻底死掉

1630
00:42:34,000 --> 00:42:34,000
开不开的时候

1631
00:42:34,000 --> 00:42:35,000
你要做的事情是

1632
00:42:35,000 --> 00:42:37,000
再找一台 Mac

1633
00:42:37,000 --> 00:42:38,000
把它两个连起来

1634
00:42:38,000 --> 00:42:39,000
然后把那台 Mac

1635
00:42:39,000 --> 00:42:41,000
按照特定的开机方式

1636
00:42:41,000 --> 00:42:42,000
让它进 DFU 模式

1637
00:42:42,000 --> 00:42:43,000
然后在这边的 Mac 上

1638
00:42:43,000 --> 00:42:44,000
去刷它

1639
00:42:44,000 --> 00:42:46,000
就像刷一个 iPhone 一样

1640
00:42:46,000 --> 00:42:48,000
它不能自举了

1641
00:42:48,000 --> 00:42:48,000
对

1642
00:42:48,000 --> 00:42:49,000
我还没有试过

1643
00:42:49,000 --> 00:42:49,000
但是不知道

1644
00:42:49,000 --> 00:42:51,000
是否拿一个

1645
00:42:51,000 --> 00:42:52,000
可启动的 U 盘上去之后

1646
00:42:52,000 --> 00:42:54,000
能够从 U 盘去启动

1647
00:42:54,000 --> 00:42:56,000
根据之前 DTK 的

1648
00:42:56,000 --> 00:42:57,000
一些经验的话

1649
00:42:57,000 --> 00:42:57,000
就是

1650
00:42:57,000 --> 00:42:59,000
那个时候是不行的

1651
00:42:59,000 --> 00:43:01,000
唯一的恢复方法

1652
00:43:01,000 --> 00:43:02,000
就是我再拿一台 Mac

1653
00:43:02,000 --> 00:43:03,000
然后把它接上来

1654
00:43:03,000 --> 00:43:04,000
当成一个设备

1655
00:43:04,000 --> 00:43:06,000
然后把它刷一遍系统

1656
00:43:06,000 --> 00:43:07,000
所以听到这里

1657
00:43:07,000 --> 00:43:08,000
其实我们已经猜出了

1658
00:43:08,000 --> 00:43:10,000
DTK 你是遇到了什么问题

1659
00:43:10,000 --> 00:43:11,000
还需要做这种操作

1660
00:43:11,000 --> 00:43:13,000
虽然我们能识论它

1661
00:43:13,000 --> 00:43:15,000
但是我们推测出来

1662
00:43:15,000 --> 00:43:16,000
应该是这么一个结果

1663
00:43:16,000 --> 00:43:16,000
对

1664
00:43:16,000 --> 00:43:17,000
我没有对它紧简直语

1665
00:43:17,000 --> 00:43:23,000
刚才说到了软件

1666
00:43:23,000 --> 00:43:24,000
你的

1667
00:43:24,000 --> 00:43:25,000
就是供应具软件

1668
00:43:25,000 --> 00:43:26,000
没什么遇到问题

1669
00:43:26,000 --> 00:43:27,000
就是你日常需要

1670
00:43:27,000 --> 00:43:28,000
用的一些软件上面

1671
00:43:28,000 --> 00:43:29,000
有遇到什么问题吗

1672
00:43:29,000 --> 00:43:30,000
就是不管是原生运行的

1673
00:43:30,000 --> 00:43:32,000
还是需要模拟运行的

1674
00:43:32,000 --> 00:43:33,000
应该是完全没遇到

1675
00:43:33,000 --> 00:43:34,000
首先是因为

1676
00:43:34,000 --> 00:43:35,000
我用的软件的话

1677
00:43:35,000 --> 00:43:37,000
大家直接开发者的话

1678
00:43:37,000 --> 00:43:38,000
都更新速度非常快

1679
00:43:38,000 --> 00:43:40,000
基本上日常用到的像

1680
00:43:40,000 --> 00:43:40,000
Bear

1681
00:43:40,000 --> 00:43:42,000
Syns 这些的话

1682
00:43:42,000 --> 00:43:43,000
都已经专门是配

1683
00:43:43,000 --> 00:43:44,000
已经是原生代码的

1684
00:43:44,000 --> 00:43:46,000
那个版本都已经出来了

1685
00:43:46,000 --> 00:43:47,000
所以说没有任何问题

1686
00:43:47,000 --> 00:43:49,000
然后有一些稍微的

1687
00:43:49,000 --> 00:43:50,000
旧一点的程序

1688
00:43:50,000 --> 00:43:51,000
你像 Jobbox

1689
00:43:51,000 --> 00:43:52,000
Spotify

1690
00:43:52,000 --> 00:43:53,000
这些的话

1691
00:43:53,000 --> 00:43:54,000
就靠金融层

1692
00:43:54,000 --> 00:43:55,000
那去你划的运行

1693
00:43:55,000 --> 00:43:56,000
也没有任何问题

1694
00:43:56,000 --> 00:43:57,000
而且我相信这些

1695
00:43:57,000 --> 00:43:59,000
他们也会比较快的

1696
00:43:59,000 --> 00:44:01,000
把那个 MV 版本的

1697
00:44:01,000 --> 00:44:01,000
就是做出来

1698
00:44:01,000 --> 00:44:02,000
因为他们

1699
00:44:02,000 --> 00:44:04,000
还是要做这个原生的

1700
00:44:04,000 --> 00:44:05,000
比较在乎用户体验

1701
00:44:05,000 --> 00:44:05,000
那些公司

1702
00:44:05,000 --> 00:44:06,000
是的

1703
00:44:06,000 --> 00:44:07,000
而且其实整个

1704
00:44:07,000 --> 00:44:08,000
迁移过程的话

1705
00:44:08,000 --> 00:44:10,000
其实工作量并不大

1706
00:44:10,000 --> 00:44:11,000
都是比较烦

1707
00:44:11,000 --> 00:44:12,000
主要是各种参数的

1708
00:44:12,000 --> 00:44:13,000
一些兼容性的

1709
00:44:13,000 --> 00:44:14,000
一些小修小条的一些问题

1710
00:44:14,000 --> 00:44:15,000
没有什么需要你

1711
00:44:15,000 --> 00:44:17,000
彻底去颠覆原来

1712
00:44:17,000 --> 00:44:18,000
架构重构

1713
00:44:18,000 --> 00:44:18,000
这样的一些事情

1714
00:44:18,000 --> 00:44:21,000
因为你自己也有几个程序

1715
00:44:21,000 --> 00:44:23,000
是很快就 Port 到了

1716
00:44:23,000 --> 00:44:24,000
这个 MV 上面去

1717
00:44:24,000 --> 00:44:24,000
好像这个过程中

1718
00:44:24,000 --> 00:44:27,000
我理解应该也是比较平滑的

1719
00:44:27,000 --> 00:44:28,000
没有遇到什么太大的问题

1720
00:44:28,000 --> 00:44:28,000
是的

1721
00:44:28,000 --> 00:44:31,000
就基本上就是几个依赖库

1722
00:44:31,000 --> 00:44:32,000
然后把它拿来之后

1723
00:44:32,000 --> 00:44:33,000
调整一下

1724
00:44:33,000 --> 00:44:34,000
它的一些编译参数

1725
00:44:34,000 --> 00:44:35,000
在 Amazon 能编译出来

1726
00:44:35,000 --> 00:44:37,000
然后至于我自己的代码的话

1727
00:44:37,000 --> 00:44:38,000
主要是一个 Xcode

1728
00:44:38,000 --> 00:44:39,000
Xcode 这些的话

1729
00:44:39,000 --> 00:44:41,000
就基本上是点两下

1730
00:44:41,000 --> 00:44:42,000
搞定

1731
00:44:42,000 --> 00:44:46,000
这就一直在苹果生态体系里面

1732
00:44:46,000 --> 00:44:47,000
它是比较舒服的

1733
00:44:47,000 --> 00:44:49,000
它已经帮你把所有的问题都解决了

1734
00:44:49,000 --> 00:44:51,000
然后你只用点点就好了

1735
00:44:51,000 --> 00:44:52,000
对

1736
00:44:52,000 --> 00:44:54,000
一方面是它帮解决了

1737
00:44:54,000 --> 00:44:56,000
但另外一方面就是本身的话

1738
00:44:56,000 --> 00:44:58,000
Mac 和 iOS 的开发者生态

1739
00:44:58,000 --> 00:44:59,000
就是打通的

1740
00:44:59,000 --> 00:45:01,000
大家基本上写的代码的话

1741
00:45:01,000 --> 00:45:01,000
除了一些

1742
00:45:01,000 --> 00:45:03,000
因为用的一些专用户不一样

1743
00:45:03,000 --> 00:45:03,000
它不兼容

1744
00:45:03,000 --> 00:45:04,000
实际上本身

1745
00:45:04,000 --> 00:45:06,000
大部分你在 Mac 上的代码

1746
00:45:06,000 --> 00:45:08,000
在 iOS 上也是能用的

1747
00:45:08,000 --> 00:45:09,000
所以说它就自己就

1748
00:45:09,000 --> 00:45:11,000
本身就不存在

1749
00:45:11,000 --> 00:45:12,000
这个前一的这么一个障碍

1750
00:45:12,000 --> 00:45:14,000
所以你在实际的

1751
00:45:14,000 --> 00:45:15,000
比如说我们现在

1752
00:45:15,000 --> 00:45:16,000
你做了两款

1753
00:45:16,000 --> 00:45:17,000
SURGE 的

1754
00:45:17,000 --> 00:45:19,000
就是 iOS 版

1755
00:45:19,000 --> 00:45:20,000
和 LPass 的 iOS 版

1756
00:45:20,000 --> 00:45:21,000
现在都可以

1757
00:45:21,000 --> 00:45:22,000
就理论上

1758
00:45:22,000 --> 00:45:24,000
你就可以在 Mac 上

1759
00:45:24,000 --> 00:45:25,000
去下这个 iOS 版来用

1760
00:45:25,000 --> 00:45:26,000
只是说它的界面

1761
00:45:26,000 --> 00:45:27,000
可能没有为 Mac 单独优化

1762
00:45:27,000 --> 00:45:28,000
对

1763
00:45:28,000 --> 00:45:29,000
然后碰巧刚好

1764
00:45:29,000 --> 00:45:30,000
这两个软件

1765
00:45:30,000 --> 00:45:31,000
都是有单独的

1766
00:45:31,000 --> 00:45:32,000
为 Mac 优化

1767
00:45:32,000 --> 00:45:34,000
算是功能上也有比较大的

1768
00:45:34,000 --> 00:45:35,000
不一样的

1769
00:45:35,000 --> 00:45:36,000
这个 Mac 版本

1770
00:45:36,000 --> 00:45:37,000
所以好像也没有什么必要

1771
00:45:37,000 --> 00:45:39,000
是的

1772
00:45:39,000 --> 00:45:40,000
但而且让人感觉

1773
00:45:40,000 --> 00:45:41,000
Apple 这件事情

1774
00:45:41,000 --> 00:45:42,000
做的还挺细心的

1775
00:45:42,000 --> 00:45:44,000
就是本来以为

1776
00:45:44,000 --> 00:45:45,000
它大概是做了这么样

1777
00:45:45,000 --> 00:45:45,000
之后

1778
00:45:45,000 --> 00:45:47,000
你起起来就像原来

1779
00:45:47,000 --> 00:45:48,000
我们的虚拟机一样

1780
00:45:48,000 --> 00:45:49,000
然后你可以在里面

1781
00:45:49,000 --> 00:45:51,000
用上面大部分的 UI 功能

1782
00:45:51,000 --> 00:45:51,000
就已经还是一个

1783
00:45:51,000 --> 00:45:52,000
不错的一个情况了

1784
00:45:52,000 --> 00:45:54,000
比如说我自己

1785
00:45:54,000 --> 00:45:55,000
开发 SURGE 的时候

1786
00:45:55,000 --> 00:45:57,000
虚拟机里面的 SURGE

1787
00:45:57,000 --> 00:45:58,000
是肯定没有办法

1788
00:45:58,000 --> 00:45:59,000
启动 Network Extension

1789
00:45:59,000 --> 00:46:00,000
这个网络扩展

1790
00:46:00,000 --> 00:46:01,000
去接管我 Mac 的

1791
00:46:01,000 --> 00:46:03,000
那个网络的

1792
00:46:03,000 --> 00:46:04,000
但是现在我发现

1793
00:46:04,000 --> 00:46:05,000
神奇的是

1794
00:46:05,000 --> 00:46:06,000
就是在 Apple 上面

1795
00:46:06,000 --> 00:46:07,000
你下了 SURGE 之后

1796
00:46:07,000 --> 00:46:08,000
你用 SURGE 的 iOS 版

1797
00:46:08,000 --> 00:46:10,000
它在 iOS 的这么一个

1798
00:46:10,000 --> 00:46:11,000
模拟器

1799
00:46:11,000 --> 00:46:12,000
这么一个虚拟环境下

1800
00:46:12,000 --> 00:46:13,000
你启动了之后

1801
00:46:13,000 --> 00:46:14,000
它能够对接上系统

1802
00:46:14,000 --> 00:46:16,000
Mac 系统上的 N 1

1803
00:46:16,000 --> 00:46:17,000
扩展这一套的

1804
00:46:17,000 --> 00:46:18,000
所有的逻辑

1805
00:46:18,000 --> 00:46:19,000
然后把整个系统的

1806
00:46:19,000 --> 00:46:21,000
VPN 给接管

1807
00:46:21,000 --> 00:46:23,000
这个是让我也很惊艳的

1808
00:46:23,000 --> 00:46:24,000
一件事情

1809
00:46:24,000 --> 00:46:27,000
也就是说不用怎么改

1810
00:46:27,000 --> 00:46:28,000
iOS 的这个版本

1811
00:46:28,000 --> 00:46:29,000
也可以去操作

1812
00:46:29,000 --> 00:46:31,000
Mac 一些底层的

1813
00:46:31,000 --> 00:46:31,000
一些系统扩展

1814
00:46:31,000 --> 00:46:33,000
没错

1815
00:46:33,000 --> 00:46:34,000
因为它这些扩展的话

1816
00:46:34,000 --> 00:46:36,000
它的 extension 的话

1817
00:46:36,000 --> 00:46:37,000
它在 Mac 上和 iOS 上

1818
00:46:37,000 --> 00:46:39,000
它的接口是完全一样的

1819
00:46:39,000 --> 00:46:40,000
有很多扩展的接口

1820
00:46:40,000 --> 00:46:41,000
都是完全一样的

1821
00:46:41,000 --> 00:46:41,000
像

1822
00:46:41,000 --> 00:46:43,000
就像我看

1823
00:46:43,000 --> 00:46:45,000
Net Extension Filter Data Provider

1824
00:46:45,000 --> 00:46:47,000
就是当时跟那个

1825
00:46:47,000 --> 00:46:48,000
我们接下来要聊的话题

1826
00:46:48,000 --> 00:46:49,000
比较相关的

1827
00:46:49,000 --> 00:46:50,000
那个新闻里面的时候

1828
00:46:50,000 --> 00:46:51,000
我注意到它的

1829
00:46:51,000 --> 00:46:53,000
availability 是

1830
00:46:53,000 --> 00:46:54,000
比如说它写会

1831
00:46:54,000 --> 00:46:56,000
它会写说 iOS 9.0

1832
00:46:56,000 --> 00:46:58,000
Mac OS 10.15

1833
00:46:58,000 --> 00:47:01,000
然后加上 Mac Catalyst 13 以上

1834
00:47:01,000 --> 00:47:03,000
就是它会说

1835
00:47:03,000 --> 00:47:04,000
这个 class 的

1836
00:47:04,000 --> 00:47:05,000
或者这个 API 的

1837
00:47:05,000 --> 00:47:06,000
整个接口

1838
00:47:06,000 --> 00:47:07,000
在这三个版本里面

1839
00:47:07,000 --> 00:47:09,000
是完全一样的

1840
00:47:09,000 --> 00:47:10,000
所以它迁移成本

1841
00:47:10,000 --> 00:47:11,000
应该是蛮小的

1842
00:47:11,000 --> 00:47:12,000
没错

1843
00:47:12,000 --> 00:47:13,000
但是就是让人感觉

1844
00:47:13,000 --> 00:47:16,000
它也既然去花了这个心去

1845
00:47:16,000 --> 00:47:17,000
还是要花这个心去

1846
00:47:17,000 --> 00:47:17,000
做这个事情

1847
00:47:17,000 --> 00:47:19,000
也是挺不容易的

1848
00:47:19,000 --> 00:47:20,000
它可以不接

1849
00:47:20,000 --> 00:47:22,000
然后就导致这种用不了

1850
00:47:22,000 --> 00:47:23,000
对

1851
00:47:23,000 --> 00:47:24,000
它也可以完全不接

1852
00:47:24,000 --> 00:47:25,000
其实一般来说

1853
00:47:25,000 --> 00:47:26,000
用户不会太在意过

1854
00:47:26,000 --> 00:47:27,000
E 这件事情

1855
00:47:27,000 --> 00:47:29,000
它也要求你改写

1856
00:47:29,000 --> 00:47:30,000
像 Microsoft

1857
00:47:30,000 --> 00:47:31,000
不就直接会

1858
00:47:31,000 --> 00:47:33,000
Windows 就会要求你

1859
00:47:33,000 --> 00:47:35,000
你就再写一遍了

1860
00:47:35,000 --> 00:47:36,000
对

1861
00:47:36,000 --> 00:47:36,000
从他们来看

1862
00:47:36,000 --> 00:47:39,000
这个时候反倒是说

1863
00:47:39,000 --> 00:47:40,000
苹果对这个跨平台

1864
00:47:40,000 --> 00:47:42,000
兼顾性做的还蛮好的

1865
00:47:42,000 --> 00:47:43,000
但它都是自己的

1866
00:47:43,000 --> 00:47:45,000
这个控制的底层系统

1867
00:47:45,000 --> 00:47:45,000
没错

1868
00:47:45,000 --> 00:47:47,000
就是我看起来

1869
00:47:47,000 --> 00:47:47,000
它还挺用力的

1870
00:47:47,000 --> 00:47:49,000
会去推荐事情的

1871
00:47:49,000 --> 00:47:50,000
因为我一开始以为的话

1872
00:47:50,000 --> 00:47:52,000
就是可能我在 iOS 的 Apple 里面

1873
00:47:52,000 --> 00:47:54,000
它如果在 Mac 虚拟环境下

1874
00:47:54,000 --> 00:47:56,000
我一些获取系统配置

1875
00:47:56,000 --> 00:47:58,000
系统参数的一些函数

1876
00:47:58,000 --> 00:48:00,000
应该是能拿到的是 Mac 的一些参数

1877
00:48:00,000 --> 00:48:01,000
这才是比较合理的

1878
00:48:01,000 --> 00:48:02,000
结果我发现

1879
00:48:02,000 --> 00:48:04,000
其实 Apple 对这个进行了一个造假

1880
00:48:04,000 --> 00:48:08,000
我在一个 Mac 设备上面

1881
00:48:08,000 --> 00:48:08,000
如果是 iOS

1882
00:48:08,000 --> 00:48:10,000
这么一种运行的方式的话

1883
00:48:10,000 --> 00:48:13,000
我拿到的设备信息是 iPad 14

1884
00:48:13,000 --> 00:48:14,000
对

1885
00:48:14,000 --> 00:48:15,000
14 多少亿

1886
00:48:15,000 --> 00:48:17,000
它会欺骗你是吧

1887
00:48:17,000 --> 00:48:17,000
对

1888
00:48:17,000 --> 00:48:20,000
让你以为它是在一个 iPad 上运行的

1889
00:48:20,000 --> 00:48:21,000
对

1890
00:48:21,000 --> 00:48:22,000
没错

1891
00:48:22,000 --> 00:48:25,000
操作系统版本是 14.1 还是 14.0

1892
00:48:25,000 --> 00:48:26,000
就是它完全的去虚拟化

1893
00:48:26,000 --> 00:48:28,000
造假出了一套 iOS 环境

1894
00:48:28,000 --> 00:48:29,000
让你整个应用

1895
00:48:29,000 --> 00:48:31,000
相信你真的是在一个 iOS 上面去运行

1896
00:48:31,000 --> 00:48:32,000
对

1897
00:48:32,000 --> 00:48:33,000
这里其实就

1898
00:48:33,000 --> 00:48:35,000
我们就很自然的说到这件事情了

1899
00:48:35,000 --> 00:48:36,000
就是说当时

1900
00:48:36,000 --> 00:48:38,000
大家都在担心嘛

1901
00:48:38,000 --> 00:48:39,000
就是说这个

1902
00:48:39,000 --> 00:48:42,000
就是换成 ARM 这个指令机后的

1903
00:48:42,000 --> 00:48:43,000
这个 M 1

1904
00:48:43,000 --> 00:48:44,000
上面很多

1905
00:48:44,000 --> 00:48:47,000
很多原生的这个 X 86 的软件不就运行不了了吗

1906
00:48:47,000 --> 00:48:48,000
那怎么办呢

1907
00:48:48,000 --> 00:48:50,000
不会面临这个软件荒吗

1908
00:48:50,000 --> 00:48:52,000
那其实我们看目前它的提供了两个解决方案

1909
00:48:52,000 --> 00:48:53,000
一个就是说通过那些 Rosetta 2

1910
00:48:53,000 --> 00:48:55,000
来模拟运行 X 86

1911
00:48:55,000 --> 00:48:57,000
目前来看这个质量还是非常好的

1912
00:48:57,000 --> 00:48:59,000
基本上没有什么大的问题

1913
00:48:59,000 --> 00:49:01,000
然后就是说你还可以

1914
00:49:01,000 --> 00:49:04,000
拿这个 iOS 上面的软件库

1915
00:49:04,000 --> 00:49:06,000
直接在 Mac 上不做

1916
00:49:06,000 --> 00:49:07,000
基本上不做什么修改

1917
00:49:07,000 --> 00:49:09,000
就在 Mac 上面去运行

1918
00:49:09,000 --> 00:49:11,000
这个就是说又提供了一个

1919
00:49:11,000 --> 00:49:14,000
就是说它是提供了一个单从功能性来讲

1920
00:49:14,000 --> 00:49:15,000
它其实提供了一个超级

1921
00:49:15,000 --> 00:49:15,000
对吧

1922
00:49:15,000 --> 00:49:18,000
它除了能运行 Mac 本身的那些历史的软件

1923
00:49:18,000 --> 00:49:22,000
能运行专门为 M 1 这个芯片优化过的

1924
00:49:22,000 --> 00:49:25,000
这个 Native 的这个这个 Mac 的软件

1925
00:49:25,000 --> 00:49:26,000
还可以运行

1926
00:49:26,000 --> 00:49:28,000
本来在 iOS 上面运行

1927
00:49:28,000 --> 00:49:31,000
没有想到过会在 Mac 上跑的这种软件

1928
00:49:31,000 --> 00:49:33,000
它其实是集了三个平台的好处

1929
00:49:33,000 --> 00:49:34,000
对

1930
00:49:34,000 --> 00:49:34,000
是的

1931
00:49:34,000 --> 00:49:35,000
Trinity

1932
00:49:35,000 --> 00:49:36,000
Sun 80

1933
00:49:36,000 --> 00:49:38,000
这个非常

1934
00:49:38,000 --> 00:49:40,000
那有一个问题

1935
00:49:40,000 --> 00:49:42,000
就是说可能打岔问一下

1936
00:49:42,000 --> 00:49:44,000
就是说因为你自己也是这个

1937
00:49:44,000 --> 00:49:46,000
这个 iOS 这个程序的开发者

1938
00:49:46,000 --> 00:49:51,000
它这样的话会不会导致你的这个产品的布局和这个

1939
00:49:51,000 --> 00:49:53,000
包括这个定价策略会有一些影响

1940
00:49:53,000 --> 00:49:54,000
对

1941
00:49:54,000 --> 00:49:54,000
是的

1942
00:49:54,000 --> 00:49:56,000
我也在思考这个问题

1943
00:49:56,000 --> 00:50:01,000
然后现在觉得暂时还没有那个就是一个比较明确的一个结论吧

1944
00:50:01,000 --> 00:50:04,000
但是确实是未来会需要更多去考虑的一个事情

1945
00:50:04,000 --> 00:50:06,000
Surge 这种比较特殊

1946
00:50:06,000 --> 00:50:08,000
就可能还相当来说比较清晰点

1947
00:50:08,000 --> 00:50:12,000
因为至少我们看到这个 Surge 的 iOS 版和这个 Surge 的这个 Mac 版

1948
00:50:12,000 --> 00:50:14,000
它在功能上有比较显著的区别

1949
00:50:14,000 --> 00:50:18,000
比如说这个这个路由模式这个是只有 Mac 版才有的

1950
00:50:18,000 --> 00:50:18,000
对吧

1951
00:50:18,000 --> 00:50:21,000
iOS 版目前是基于因为为平台限制是没法提供的

1952
00:50:21,000 --> 00:50:21,000
是的

1953
00:50:21,000 --> 00:50:25,000
那但是如果你是直接把 iOS 版在 Mac 上运行

1954
00:50:25,000 --> 00:50:26,000
因为你根本那边就没有这个代码

1955
00:50:26,000 --> 00:50:30,000
所以它也是没有这个这种比如路由模式这种增强性的功能的

1956
00:50:30,000 --> 00:50:30,000
对不对

1957
00:50:30,000 --> 00:50:32,000
所以这个相当来说有这种差异性的地方

1958
00:50:32,000 --> 00:50:35,000
但是对于这个 AirPods 来说就比较尴尬

1959
00:50:35,000 --> 00:50:36,000
因为它的功能其实是差不多的

1960
00:50:36,000 --> 00:50:39,000
也没有说有平台这种排他性

1961
00:50:39,000 --> 00:50:41,000
但 AirPods 可能不太合适来比

1962
00:50:41,000 --> 00:50:43,000
因为 AirPods 本来它不是靠这个

1963
00:50:43,000 --> 00:50:47,000
卖这个本身这个授权来来来盈利的

1964
00:50:47,000 --> 00:50:47,000
对不对

1965
00:50:47,000 --> 00:50:48,000
它是靠订阅

1966
00:50:48,000 --> 00:50:49,000
对是的

1967
00:50:49,000 --> 00:50:51,000
对于现在主流是订阅制的话

1968
00:50:51,000 --> 00:50:53,000
其实就不存在的问题

1969
00:50:53,000 --> 00:50:55,000
本来用户就是买一份订阅

1970
00:50:55,000 --> 00:50:56,000
然后在所有平台上就可以用

1971
00:50:56,000 --> 00:50:57,000
所以说你把 iOS

1972
00:50:57,000 --> 00:50:59,000
你非要拿 iOS 版本在 Mac 上用的话

1973
00:50:59,000 --> 00:51:00,000
那作者其实

1974
00:51:00,000 --> 00:51:01,000
他也不拦你对吧

1975
00:51:01,000 --> 00:51:02,000
你爱怎么用

1976
00:51:02,000 --> 00:51:03,000
不会拦你爱怎么样

1977
00:51:03,000 --> 00:51:05,000
但你比如说像 Synth 这样的话

1978
00:51:05,000 --> 00:51:08,000
是按单平台独立去购买的话

1979
00:51:08,000 --> 00:51:10,000
就会有点尴尬这个事情

1980
00:51:10,000 --> 00:51:13,000
Mac 版的原生应用的用户体验

1981
00:51:13,000 --> 00:51:16,000
比起 iOS 版来说还是挺差距非常大的

1982
00:51:16,000 --> 00:51:19,000
就毕竟是个模拟器是什么

1983
00:51:19,000 --> 00:51:20,000
你永远你所有的操作

1984
00:51:20,000 --> 00:51:21,000
都是在那么一个虚拟化的

1985
00:51:21,000 --> 00:51:23,000
那么一个小窗口里面干的

1986
00:51:23,000 --> 00:51:24,000
和你在 Mac 上面的话

1987
00:51:24,000 --> 00:51:25,000
各种丰富的

1988
00:51:25,000 --> 00:51:27,000
就交货还是差别很大

1989
00:51:27,000 --> 00:51:28,000
对差别还是很大的

1990
00:51:28,000 --> 00:51:30,000
所以说我觉得对开发者来说

1991
00:51:30,000 --> 00:51:31,000
应该是不太

1992
00:51:31,000 --> 00:51:33,000
不会太 care 的一件事情

1993
00:51:33,000 --> 00:51:35,000
就不会说因为你能在我上面用了之后

1994
00:51:35,000 --> 00:51:38,000
我就收入减少了

1995
00:51:38,000 --> 00:51:39,000
或者是我就很担心

1996
00:51:39,000 --> 00:51:39,000
怎么样的

1997
00:51:39,000 --> 00:51:41,000
我觉得到时候也不会拆成问题

1998
00:51:41,000 --> 00:51:42,000
对

1999
00:51:42,000 --> 00:51:44,000
我觉得可能主要还是像避免

2000
00:51:44,000 --> 00:51:45,000
或者说如何

2001
00:51:45,000 --> 00:51:46,000
苹果如何才能避免

2002
00:51:46,000 --> 00:51:49,000
就是 iPad 这种比较尴尬的一个状态

2003
00:51:49,000 --> 00:51:50,000
比如说我们现在看到

2004
00:51:50,000 --> 00:51:53,000
就是说很多国内的软件也好

2005
00:51:53,000 --> 00:51:54,000
像是国外的软件

2006
00:51:54,000 --> 00:51:55,000
其实也相对好一点

2007
00:51:55,000 --> 00:51:56,000
但是其实也有这个问题

2008
00:51:56,000 --> 00:51:59,000
就是说它要么就是没有 iPad 版

2009
00:51:59,000 --> 00:52:00,000
因为我记得好像是

2010
00:52:00,000 --> 00:52:03,000
Instagram 到现在还是没有 iPad 版对吧

2011
00:52:03,000 --> 00:52:05,000
没有肯定没有

2012
00:52:05,000 --> 00:52:05,000
对

2013
00:52:05,000 --> 00:52:08,000
你要强行在 iPad 上运行

2014
00:52:08,000 --> 00:52:09,000
iPhone 版也行

2015
00:52:09,000 --> 00:52:09,000
对吧

2016
00:52:09,000 --> 00:52:10,000
就是变成一个很小的窗口

2017
00:52:10,000 --> 00:52:12,000
或者你用两倍的方式

2018
00:52:12,000 --> 00:52:13,000
把它扩大

2019
00:52:13,000 --> 00:52:15,000
然后像国内的有些软件

2020
00:52:15,000 --> 00:52:17,000
就是说它有 iPad 版

2021
00:52:17,000 --> 00:52:18,000
但 iPad 版明显

2022
00:52:18,000 --> 00:52:20,000
你看就是基本上没有怎么用心去做

2023
00:52:20,000 --> 00:52:21,000
就随便重新

2024
00:52:21,000 --> 00:52:22,000
就放大了一下

2025
00:52:22,000 --> 00:52:23,000
放大了一下

2026
00:52:23,000 --> 00:52:25,000
就是很粗暴

2027
00:52:25,000 --> 00:52:27,000
比如说我记得印象最深刻的

2028
00:52:27,000 --> 00:52:28,000
像京东对吧

2029
00:52:28,000 --> 00:52:30,000
京东这个 APP 我用的比较多

2030
00:52:30,000 --> 00:52:31,000
有时候买东西看什么

2031
00:52:31,000 --> 00:52:32,000
有时候 iPad 上在手边

2032
00:52:32,000 --> 00:52:33,000
我就直接在 iPad 上用

2033
00:52:33,000 --> 00:52:36,000
它连那个就是横屏转过来都不支持

2034
00:52:36,000 --> 00:52:38,000
就只能在 iPad 上竖屏

2035
00:52:38,000 --> 00:52:40,000
但我刚好就是有那个外接键盘

2036
00:52:40,000 --> 00:52:42,000
我的 iPad 大部分都是横屏的状态

2037
00:52:42,000 --> 00:52:42,000
我觉得很尴尬

2038
00:52:42,000 --> 00:52:44,000
我每次用的时候还得把脑袋斜过

2039
00:52:44,000 --> 00:52:46,000
斜个 90 度去看它

2040
00:52:46,000 --> 00:52:48,000
我已经放弃了

2041
00:52:48,000 --> 00:52:50,000
我直接就用那 Safari 在浏览器里面用

2042
00:52:50,000 --> 00:52:52,000
对

2043
00:52:52,000 --> 00:52:53,000
然后我就在想

2044
00:52:53,000 --> 00:52:57,000
就是说这种 iOS app 可以在 Mac 上运行

2045
00:52:57,000 --> 00:52:58,000
是可以了

2046
00:52:58,000 --> 00:53:01,000
但会不会有开发者单独为这件事情去优化

2047
00:53:01,000 --> 00:53:04,000
我觉得还是一个非常存疑的事情

2048
00:53:04,000 --> 00:53:08,000
就是如果不解决付费的或者用户数量的问题

2049
00:53:08,000 --> 00:53:09,000
可能还是比较难

2050
00:53:09,000 --> 00:53:14,000
你说 iPad 觉得用户数肯定还是比 Mac 觉得用户数要多一些的

2051
00:53:14,000 --> 00:53:17,000
但即便如此厂商还是觉得 iPad 厂商没有那么重要

2052
00:53:17,000 --> 00:53:18,000
就不管

2053
00:53:18,000 --> 00:53:20,000
那 Mac 上面就更不用想了

2054
00:53:20,000 --> 00:53:20,000
对

2055
00:53:20,000 --> 00:53:22,000
它其实得从另外一个角度

2056
00:53:22,000 --> 00:53:24,000
可以从另外一个角度来看这件事情的话

2057
00:53:24,000 --> 00:53:28,000
就是对于我们这种开发者是本身就有多平台的软件存在的

2058
00:53:28,000 --> 00:53:32,000
所以说会出现互相平台之间抢占这么的一个问题

2059
00:53:32,000 --> 00:53:34,000
但是对于更多的可能开发者来说

2060
00:53:34,000 --> 00:53:36,000
它根本就没有 Mac 版本

2061
00:53:36,000 --> 00:53:40,000
所以说它是凭空的话多了一部分市场和用户

2062
00:53:40,000 --> 00:53:42,000
对于它来说这绝对是一个好消息

2063
00:53:42,000 --> 00:53:45,000
或者说它再做一点点简单的适配调整

2064
00:53:45,000 --> 00:53:49,000
能够比较低成本的去支持 Mac

2065
00:53:49,000 --> 00:53:50,000
它其实也还可以的

2066
00:53:50,000 --> 00:53:54,000
只要不让它完全在为 Mac 单独定制一套

2067
00:53:54,000 --> 00:53:55,000
那就很麻烦了

2068
00:53:55,000 --> 00:53:57,000
对是的没错

2069
00:53:57,000 --> 00:53:59,000
对因为这里就不得不吐槽一下

2070
00:53:59,000 --> 00:54:02,000
我们日常用的这个推特的官方客户端

2071
00:54:02,000 --> 00:54:03,000
在 Mac 上面

2072
00:54:03,000 --> 00:54:04,000
它本质上也是一个 iOS 版

2073
00:54:04,000 --> 00:54:08,000
它通过那个叫什么 catalyst 的方式来运行

2074
00:54:08,000 --> 00:54:09,000
我觉得就是 catalyst

2075
00:54:09,000 --> 00:54:13,000
对所以说可能 catalyst 稍微简单解释一下

2076
00:54:13,000 --> 00:54:14,000
如果有朋友不太熟悉

2077
00:54:14,000 --> 00:54:20,000
catalyst 是一套在 X 86 的

2078
00:54:20,000 --> 00:54:22,000
芯片上的 Mac 上面

2079
00:54:22,000 --> 00:54:24,000
需要开发者做一些处理

2080
00:54:24,000 --> 00:54:28,000
才能够把一个 iOS 软件变成

2081
00:54:28,000 --> 00:54:30,000
Mac 上可以运行的这么一套方案

2082
00:54:30,000 --> 00:54:30,000
对吧

2083
00:54:30,000 --> 00:54:30,000
对是的

2084
00:54:30,000 --> 00:54:32,000
和这个对比起来

2085
00:54:32,000 --> 00:54:35,000
那显然是在 M 1 芯片的

2086
00:54:35,000 --> 00:54:36,000
Rosetta 2 的差别

2087
00:54:36,000 --> 00:54:37,000
没有

2088
00:54:37,000 --> 00:54:41,000
Rosetta 它是在 M 1 上运行

2089
00:54:41,000 --> 00:54:42,000
X 86 的 Mac 程序

2090
00:54:42,000 --> 00:54:43,000
对吧

2091
00:54:43,000 --> 00:54:45,000
这个是那个 catalyst 是在

2092
00:54:45,000 --> 00:54:47,000
X 86 的 Mac 上运行 iOS 的程序

2093
00:54:47,000 --> 00:54:48,000
对吧

2094
00:54:48,000 --> 00:54:49,000
然后现在就是说你可以

2095
00:54:49,000 --> 00:54:51,000
就那个时候还是要

2096
00:54:51,000 --> 00:54:52,000
这两个事情都是要

2097
00:54:52,000 --> 00:54:54,000
就 Rosetta 是不需要开发者介入的

2098
00:54:54,000 --> 00:54:55,000
然后 catalyst 是需要开发者

2099
00:54:55,000 --> 00:54:56,000
做一些操作的

2100
00:54:56,000 --> 00:54:57,000
然后像还有一个

2101
00:54:57,000 --> 00:54:59,000
不需要开发者做

2102
00:54:59,000 --> 00:55:00,000
一个默认操作的

2103
00:55:00,000 --> 00:55:01,000
就是说

2104
00:55:01,000 --> 00:55:03,000
直接在 M 1 芯片的 Mac 上面

2105
00:55:03,000 --> 00:55:05,000
去运行 iOS 的程序

2106
00:55:05,000 --> 00:55:06,000
那我觉得像

2107
00:55:06,000 --> 00:55:07,000
比如说像推特这种客户端

2108
00:55:07,000 --> 00:55:09,000
这种做的这种调性

2109
00:55:09,000 --> 00:55:11,000
那你还不如不要那个

2110
00:55:11,000 --> 00:55:11,000
catalyst

2111
00:55:11,000 --> 00:55:13,000
你直接在 M 1 上去运行

2112
00:55:13,000 --> 00:55:14,000
一个 iOS 版本

2113
00:55:14,000 --> 00:55:15,000
可能效果还好一点

2114
00:55:15,000 --> 00:55:16,000
Wait a second

2115
00:55:16,000 --> 00:55:18,000
推特的客户端你在用吗

2116
00:55:18,000 --> 00:55:19,000
我有在用

2117
00:55:19,000 --> 00:55:20,000
非常难用

2118
00:55:20,000 --> 00:55:23,000
我都已经完全忘记这件事情

2119
00:55:23,000 --> 00:55:24,000
对我就忘了用网页

2120
00:55:24,000 --> 00:55:25,000
因为在 Mac 上面

2121
00:55:25,000 --> 00:55:26,000
刷推的时间

2122
00:55:26,000 --> 00:55:27,000
可能也没有那么多

2123
00:55:27,000 --> 00:55:29,000
就可能发推的时间

2124
00:55:29,000 --> 00:55:30,000
要比刷推的时间多

2125
00:55:30,000 --> 00:55:32,000
对发推会比较多一些

2126
00:55:32,000 --> 00:55:33,000
它毕竟还是有

2127
00:55:33,000 --> 00:55:34,000
那个系统级别的整合

2128
00:55:34,000 --> 00:55:36,000
比如说你在一个网页上

2129
00:55:36,000 --> 00:55:37,000
你要 share 到推特的话

2130
00:55:37,000 --> 00:55:38,000
你有两个方案

2131
00:55:38,000 --> 00:55:39,000
一不就是说

2132
00:55:39,000 --> 00:55:40,000
你手工编辑复制

2133
00:55:40,000 --> 00:55:41,000
那个叫什么

2134
00:55:41,000 --> 00:55:43,000
URL 到推特里面去发

2135
00:55:43,000 --> 00:55:44,000
也可以

2136
00:55:44,000 --> 00:55:46,000
但是如果它有那个

2137
00:55:46,000 --> 00:55:48,000
虽然说是一个 catalyst

2138
00:55:48,000 --> 00:55:49,000
改的一个 APP

2139
00:55:49,000 --> 00:55:50,000
但好歹它会提供

2140
00:55:50,000 --> 00:55:51,000
在 share sheet 里面

2141
00:55:51,000 --> 00:55:53,000
分享那个菜单里面

2142
00:55:53,000 --> 00:55:54,000
提供说分享到推特

2143
00:55:54,000 --> 00:55:56,000
你可以做一些相对的操作

2144
00:55:56,000 --> 00:55:57,000
就我还是比较

2145
00:55:57,000 --> 00:55:59,000
白印这一套便利性的

2146
00:55:59,000 --> 00:56:01,000
我从来没有用过这个功能

2147
00:56:01,000 --> 00:56:03,000
就是 share to Twitter 这样

2148
00:56:03,000 --> 00:56:06,000
我还是在继续用推特 bolt

2149
00:56:06,000 --> 00:56:07,000
但推特 bolt 的话

2150
00:56:07,000 --> 00:56:08,000
现在受那个 API

2151
00:56:08,000 --> 00:56:09,000
影响比较大了

2152
00:56:09,000 --> 00:56:11,000
就是它那边推特

2153
00:56:11,000 --> 00:56:12,000
没有给很多数据回来

2154
00:56:12,000 --> 00:56:14,000
很多的那些别人的回复

2155
00:56:14,000 --> 00:56:14,000
什么的患者

2156
00:56:14,000 --> 00:56:15,000
你拿推特 bolt

2157
00:56:15,000 --> 00:56:16,000
从第三方客户端

2158
00:56:16,000 --> 00:56:17,000
根本看不见

2159
00:56:17,000 --> 00:56:18,000
所以说推特 bolt

2160
00:56:18,000 --> 00:56:19,000
也就刷刷 timeline

2161
00:56:19,000 --> 00:56:20,000
对 因为最近

2162
00:56:20,000 --> 00:56:22,000
这两年推特的

2163
00:56:22,000 --> 00:56:24,000
产品本身的改动

2164
00:56:24,000 --> 00:56:25,000
还是比较大的

2165
00:56:25,000 --> 00:56:25,000
你看它最近

2166
00:56:25,000 --> 00:56:26,000
出了一个新的

2167
00:56:26,000 --> 00:56:27,000
那叫 fleet

2168
00:56:27,000 --> 00:56:28,000
什么功能

2169
00:56:28,000 --> 00:56:29,000
越发操弹了

2170
00:56:29,000 --> 00:56:32,000
说白一点

2171
00:56:32,000 --> 00:56:33,000
就是越发操弹了

2172
00:56:33,000 --> 00:56:34,000
就是它

2173
00:56:34,000 --> 00:56:35,000
这些新功能

2174
00:56:35,000 --> 00:56:37,000
都还没有在 API 的层面上

2175
00:56:37,000 --> 00:56:39,000
体现给第三方

2176
00:56:39,000 --> 00:56:40,000
开发者去接入

2177
00:56:40,000 --> 00:56:42,000
所以你要去跟原生客户端

2178
00:56:42,000 --> 00:56:43,000
去竞争

2179
00:56:43,000 --> 00:56:44,000
这个 feature rich

2180
00:56:44,000 --> 00:56:45,000
那肯定是比不上的

2181
00:56:45,000 --> 00:56:47,000
就是这里你作用户

2182
00:56:47,000 --> 00:56:48,000
你就必须得想说

2183
00:56:48,000 --> 00:56:49,000
那你怎么办

2184
00:56:49,000 --> 00:56:51,000
那我就属于

2185
00:56:51,000 --> 00:56:51,000
那尽量用原生

2186
00:56:51,000 --> 00:56:52,000
还是原生

2187
00:56:52,000 --> 00:56:53,000
反正捏着鼻子用

2188
00:56:53,000 --> 00:56:54,000
对

2189
00:56:54,000 --> 00:56:58,000
现在差不多就是

2190
00:56:58,000 --> 00:56:59,000
M 1 的 Mac 的问题

2191
00:56:59,000 --> 00:57:00,000
就聊到这里

2192
00:57:00,000 --> 00:57:01,000
因为也是

2193
00:57:01,000 --> 00:57:02,000
你是刚拿到差不多

2194
00:57:02,000 --> 00:57:03,000
还没有一个星期

2195
00:57:03,000 --> 00:57:04,000
有一个星期了吗

2196
00:57:04,000 --> 00:57:05,000
没有一个星期

2197
00:57:05,000 --> 00:57:06,000
应该就三天

2198
00:57:06,000 --> 00:57:07,000
四天都是左右的样子

2199
00:57:07,000 --> 00:57:08,000
对

2200
00:57:08,000 --> 00:57:09,000
就可能接下来

2201
00:57:09,000 --> 00:57:10,000
可能看我们目前看

2202
00:57:10,000 --> 00:57:12,000
性能是没有问题的

2203
00:57:12,000 --> 00:57:13,000
然后不管是原生性能

2204
00:57:13,000 --> 00:57:14,000
就是报表

2205
00:57:14,000 --> 00:57:14,000
然后模拟性能

2206
00:57:14,000 --> 00:57:16,000
还是超越原来

2207
00:57:16,000 --> 00:57:18,000
兼容性目前来看都还好

2208
00:57:18,000 --> 00:57:19,000
但是可能还是有些

2209
00:57:19,000 --> 00:57:20,000
小小的这种

2210
00:57:20,000 --> 00:57:21,000
不尽人力的地方

2211
00:57:21,000 --> 00:57:22,000
但是我相信

2212
00:57:22,000 --> 00:57:23,000
过个半年一年

2213
00:57:23,000 --> 00:57:25,000
等到它明年出第二代的

2214
00:57:25,000 --> 00:57:28,000
这个 Mac 的处理

2215
00:57:28,000 --> 00:57:29,000
就是可能 MR

2216
00:57:29,000 --> 00:57:30,000
比如说

2217
00:57:30,000 --> 00:57:30,000
举个例子

2218
00:57:30,000 --> 00:57:31,000
的时候

2219
00:57:31,000 --> 00:57:32,000
大家再去买

2220
00:57:32,000 --> 00:57:33,000
可能到时候

2221
00:57:33,000 --> 00:57:34,000
一个是有新的

2222
00:57:34,000 --> 00:57:36,000
这种外形的机器了

2223
00:57:36,000 --> 00:57:36,000
另外就是说

2224
00:57:36,000 --> 00:57:37,000
这些兼容性的问题

2225
00:57:37,000 --> 00:57:39,000
基本上也都解决了

2226
00:57:39,000 --> 00:57:40,000
该转原生的

2227
00:57:40,000 --> 00:57:41,000
都转原生的

2228
00:57:41,000 --> 00:57:42,000
然后该模拟

2229
00:57:42,000 --> 00:57:43,000
如果还有问题的

2230
00:57:43,000 --> 00:57:44,000
可能也都修掉了

2231
00:57:44,000 --> 00:57:44,000
对吧

2232
00:57:44,000 --> 00:57:45,000
然后那个时候

2233
00:57:45,000 --> 00:57:47,000
大家再去换一个问题

2234
00:57:47,000 --> 00:57:47,000
就不是很大的

2235
00:57:47,000 --> 00:57:49,000
我这里还想问一下两位

2236
00:57:49,000 --> 00:57:51,000
你们用你们现在的

2237
00:57:51,000 --> 00:57:52,000
Intel 的 MacBook

2238
00:57:52,000 --> 00:57:53,000
有觉得在

2239
00:57:53,000 --> 00:57:55,000
就是电池状态下

2240
00:57:55,000 --> 00:57:56,000
开盖之后

2241
00:57:56,000 --> 00:57:57,000
到解锁这个过程

2242
00:57:57,000 --> 00:57:58,000
非常的痛苦吗

2243
00:57:58,000 --> 00:58:01,000
首先我现在没有用 Mac

2244
00:58:01,000 --> 00:58:02,000
我现在是用它

2245
00:58:02,000 --> 00:58:02,000
Mini

2246
00:58:02,000 --> 00:58:03,000
是 X 86

2247
00:58:03,000 --> 00:58:05,000
所以我只能告诉你说

2248
00:58:05,000 --> 00:58:06,000
换醒那个过程

2249
00:58:06,000 --> 00:58:07,000
肯定不是非常的快

2250
00:58:07,000 --> 00:58:08,000
还是要等一下下

2251
00:58:08,000 --> 00:58:10,000
我好像基本上

2252
00:58:10,000 --> 00:58:11,000
不怎么关盖

2253
00:58:11,000 --> 00:58:13,000
好的

2254
00:58:13,000 --> 00:58:16,000
我唤醒的过程

2255
00:58:16,000 --> 00:58:16,000
就是按一下

2256
00:58:16,000 --> 00:58:17,000
随便按一下键盘

2257
00:58:17,000 --> 00:58:18,000
什么键

2258
00:58:18,000 --> 00:58:18,000
或者敲一下书标

2259
00:58:18,000 --> 00:58:19,000
这样

2260
00:58:19,000 --> 00:58:19,000
好了

2261
00:58:19,000 --> 00:58:20,000
明白了

2262
00:58:20,000 --> 00:58:22,000
就是我最近几年的

2263
00:58:22,000 --> 00:58:23,000
这个感受上来说

2264
00:58:23,000 --> 00:58:25,000
我的 MacBook

2265
00:58:25,000 --> 00:58:25,000
我每次

2266
00:58:25,000 --> 00:58:27,000
每次打开它的盖子

2267
00:58:27,000 --> 00:58:28,000
盖的时候

2268
00:58:28,000 --> 00:58:29,000
都感觉非常的痛苦

2269
00:58:29,000 --> 00:58:31,000
黑屏可能就会

2270
00:58:31,000 --> 00:58:33,000
黑个一到两秒

2271
00:58:33,000 --> 00:58:33,000
甚至有的时候

2272
00:58:33,000 --> 00:58:34,000
不知道为什么卡个五六秒

2273
00:58:34,000 --> 00:58:36,000
也是经常常见的事情

2274
00:58:36,000 --> 00:58:37,000
然后亮了之后

2275
00:58:37,000 --> 00:58:38,000
整个 UI 也是卡住的

2276
00:58:38,000 --> 00:58:40,000
然后书密码也是没有反应

2277
00:58:40,000 --> 00:58:41,000
然后进了桌面之后

2278
00:58:41,000 --> 00:58:43,000
可能也还得再卡一段时间

2279
00:58:43,000 --> 00:58:44,000
才能恢复正常

2280
00:58:44,000 --> 00:58:46,000
后面我在推特上

2281
00:58:46,000 --> 00:58:47,000
也大概问了一下

2282
00:58:47,000 --> 00:58:49,000
好像有很大部分用户

2283
00:58:49,000 --> 00:58:50,000
也是有同样的问题

2284
00:58:50,000 --> 00:58:52,000
但是好像有另外一部分用户

2285
00:58:52,000 --> 00:58:53,000
好像又没有遇到这样的问题

2286
00:58:53,000 --> 00:58:54,000
我还挺奇怪

2287
00:58:54,000 --> 00:58:56,000
这个问题到底是怎么造成的

2288
00:58:56,000 --> 00:58:58,000
我好像没有遇到

2289
00:58:58,000 --> 00:59:00,000
就是在我绝无仅有的几次

2290
00:59:00,000 --> 00:59:02,000
把它带着到处走的过程中

2291
00:59:02,000 --> 00:59:03,000
就是可能一天

2292
00:59:03,000 --> 00:59:04,000
比如说要开个会

2293
00:59:04,000 --> 00:59:06,000
然后频繁关核十来次

2294
00:59:06,000 --> 00:59:09,000
好像没有发生过这样的事情

2295
00:59:09,000 --> 00:59:11,000
但是你刚才说

2296
00:59:11,000 --> 00:59:12,000
你要输密码

2297
00:59:12,000 --> 00:59:14,000
就是我知道是

2298
00:59:14,000 --> 00:59:15,000
有些人用手表解锁的话

2299
00:59:15,000 --> 00:59:17,000
就是他那个免密码解锁的时候

2300
00:59:17,000 --> 00:59:18,000
会遇到这样的情况

2301
00:59:18,000 --> 00:59:21,000
但是我好像没有遇到过

2302
00:59:21,000 --> 00:59:24,000
因为这里面有一个机制的问题

2303
00:59:24,000 --> 00:59:24,000
是这样

2304
00:59:24,000 --> 00:59:26,000
就是说首先你取决于它是

2305
00:59:26,000 --> 00:59:29,000
就我们讲系统休眠和系统睡眠

2306
00:59:29,000 --> 00:59:30,000
它不是一个概念

2307
00:59:30,000 --> 00:59:32,000
我们好像之前某些节目里面提到过

2308
00:59:32,000 --> 00:59:34,000
所谓这个 sleep

2309
00:59:34,000 --> 00:59:37,000
就是说就是它的内存是不断电的

2310
00:59:37,000 --> 00:59:39,000
就是你整个内存还是在

2311
00:59:39,000 --> 00:59:42,000
整个系统的镜像还是在内存里面

2312
00:59:42,000 --> 00:59:43,000
你只要打开它

2313
00:59:43,000 --> 00:59:45,000
可能比较快的去跟得上

2314
00:59:45,000 --> 00:59:46,000
但如果你是休眠

2315
00:59:46,000 --> 00:59:48,000
它就存在这边有一个

2316
00:59:48,000 --> 00:59:51,000
所谓的深度休眠和浅度休眠问题了

2317
00:59:51,000 --> 00:59:52,000
就是你真的这个 hybernic

2318
00:59:52,000 --> 00:59:53,000
休眠的时候

2319
00:59:53,000 --> 00:59:57,000
它的内存的镜像是写到磁盘的

2320
00:59:57,000 --> 00:59:59,000
这个时候就是说

2321
00:59:59,000 --> 01:00:01,000
哪怕你整个系统没电

2322
01:00:01,000 --> 01:00:03,000
或者是你电池没有用光了

2323
01:00:03,000 --> 01:00:05,000
它在唤醒的时候

2324
01:00:05,000 --> 01:00:07,000
还是能够把之前的状态给唤醒回来

2325
01:00:07,000 --> 01:00:10,000
但是取决于你电脑有没有插电

2326
01:00:10,000 --> 01:00:12,000
以及你电池的剩余状态

2327
01:00:12,000 --> 01:00:15,000
它内存是有可能会掉电的

2328
01:00:15,000 --> 01:00:18,000
这个时候如果你在打开唤醒的话

2329
01:00:18,000 --> 01:00:23,000
它等于要先从 SSD 上把内存里面的

2330
01:00:23,000 --> 01:00:24,000
原来的镜像读回来

2331
01:00:24,000 --> 01:00:27,000
就是你看我现在内存都是 16 个 G 对吧

2332
01:00:27,000 --> 01:00:29,000
可能把至少 8 个 G 以上

2333
01:00:29,000 --> 01:00:30,000
开发者 16 个 G 可能是标配

2334
01:00:30,000 --> 01:00:32,000
如果你是叫什么来的

2335
01:00:32,000 --> 01:00:34,000
台式机可能是

2336
01:00:34,000 --> 01:00:36,000
但台式机不会拔电

2337
01:00:36,000 --> 01:00:36,000
应该问题

2338
01:00:36,000 --> 01:00:38,000
没有这个不存在这个问题

2339
01:00:38,000 --> 01:00:39,000
就是说如果是笔记本的话

2340
01:00:39,000 --> 01:00:43,000
就是说假设我们就以 16 个 G 的内存

2341
01:00:43,000 --> 01:00:44,000
经常要都读回来的话

2342
01:00:44,000 --> 01:00:48,000
其实你算一下它的存储到内存带宽

2343
01:00:48,000 --> 01:00:50,000
本来就要读 16 个 G 就要那么长时间

2344
01:00:50,000 --> 01:00:55,000
然后再上电再自检再引导起来系统

2345
01:00:55,000 --> 01:00:57,000
就不是说从新开始 boot

2346
01:00:57,000 --> 01:00:58,000
就是说恢复之前那个动态

2347
01:00:58,000 --> 01:00:59,000
它肯定是需要一个时间的

2348
01:00:59,000 --> 01:01:01,000
但是其实我们讨论的

2349
01:01:01,000 --> 01:01:04,000
好多这篇写二篇文章的解释

2350
01:01:04,000 --> 01:01:05,000
就是和这个其实真的没有关系

2351
01:01:05,000 --> 01:01:06,000
因为的话

2352
01:01:06,000 --> 01:01:08,000
现在在最新的 MacBook 里面

2353
01:01:08,000 --> 01:01:09,000
它的机制是

2354
01:01:09,000 --> 01:01:11,000
一旦核盖修明了之后

2355
01:01:11,000 --> 01:01:12,000
它就动进

2356
01:01:12,000 --> 01:01:14,000
它就先把内存

2357
01:01:14,000 --> 01:01:17,000
dump 一份到固态存储上

2358
01:01:17,000 --> 01:01:19,000
保证断电之后的问题

2359
01:01:19,000 --> 01:01:21,000
然后除非电池彻底耗尽

2360
01:01:21,000 --> 01:01:22,000
一点电都没有了

2361
01:01:22,000 --> 01:01:24,000
你都是从标准的

2362
01:01:24,000 --> 01:01:26,000
从 RAM 上直接唤醒的这种模式

2363
01:01:26,000 --> 01:01:27,000
而不会去走休眠那种模式

2364
01:01:27,000 --> 01:01:28,000
就只要是电池有电

2365
01:01:28,000 --> 01:01:30,000
它的内存是不会掉电的

2366
01:01:30,000 --> 01:01:31,000
对 是的

2367
01:01:31,000 --> 01:01:32,000
要不说话

2368
01:01:32,000 --> 01:01:34,000
因为现在 16 G 那么大读回来

2369
01:01:34,000 --> 01:01:36,000
很明显你能看到一个进度条

2370
01:01:36,000 --> 01:01:37,000
在那走进度条的

2371
01:01:37,000 --> 01:01:39,000
那个速度是太慢了

2372
01:01:39,000 --> 01:01:39,000
对

2373
01:01:39,000 --> 01:01:41,000
你说只是说

2374
01:01:41,000 --> 01:01:43,000
哪怕是内存没有掉电情况下

2375
01:01:43,000 --> 01:01:44,000
它的唤醒也是非常慢的

2376
01:01:44,000 --> 01:01:45,000
对吧

2377
01:01:45,000 --> 01:01:46,000
对 是的

2378
01:01:46,000 --> 01:01:48,000
这个我自己做了一个猜想

2379
01:01:48,000 --> 01:01:50,000
就是不确定这个猜想是对的

2380
01:01:50,000 --> 01:01:51,000
就是在如果

2381
01:01:51,000 --> 01:01:53,000
我就有一个习惯

2382
01:01:53,000 --> 01:01:54,000
就是因为我的 MacBook

2383
01:01:54,000 --> 01:01:55,000
不是主力的工作机

2384
01:01:55,000 --> 01:01:56,000
所以说我可能把它放在

2385
01:01:56,000 --> 01:01:57,000
盖个一两天

2386
01:01:57,000 --> 01:01:58,000
我都可能不会用一次

2387
01:01:58,000 --> 01:01:59,000
然后这时候才打开

2388
01:01:59,000 --> 01:02:01,000
然后如果是在

2389
01:02:01,000 --> 01:02:02,000
Intel 的设备上的话

2390
01:02:02,000 --> 01:02:04,000
你在休眠的状态下的话

2391
01:02:04,000 --> 01:02:06,000
整个 CPU 是彻底不活跃的

2392
01:02:06,000 --> 01:02:08,000
所以说你在打开那一瞬间

2393
01:02:08,000 --> 01:02:09,000
有很多的 APP

2394
01:02:09,000 --> 01:02:10,000
它的代码的话

2395
01:02:10,000 --> 01:02:11,000
它有很多的 timery 计时器

2396
01:02:11,000 --> 01:02:13,000
要触发一些各种各样的事情

2397
01:02:13,000 --> 01:02:14,000
这个时候你

2398
01:02:14,000 --> 01:02:16,000
这个盖盒的越久

2399
01:02:16,000 --> 01:02:18,000
不用的时间越长

2400
01:02:18,000 --> 01:02:19,000
各种的 timers 就堆的越多

2401
01:02:19,000 --> 01:02:20,000
至于这一瞬间

2402
01:02:20,000 --> 01:02:22,000
堆积的任务在处理

2403
01:02:22,000 --> 01:02:22,000
对吧

2404
01:02:22,000 --> 01:02:22,000
对

2405
01:02:22,000 --> 01:02:23,000
全部都出来了

2406
01:02:23,000 --> 01:02:24,000
然后就要去处理

2407
01:02:24,000 --> 01:02:25,000
然后就会导致

2408
01:02:25,000 --> 01:02:27,000
这一个时间是非常卡的

2409
01:02:27,000 --> 01:02:27,000
然后现在

2410
01:02:27,000 --> 01:02:29,000
我测试了一下

2411
01:02:29,000 --> 01:02:30,000
新的 M 1 的 MacBook 的话

2412
01:02:30,000 --> 01:02:32,000
它整个 CPU 的盒

2413
01:02:32,000 --> 01:02:33,000
在后台是

2414
01:02:33,000 --> 01:02:34,000
一直会

2415
01:02:34,000 --> 01:02:35,000
有间断的去

2416
01:02:35,000 --> 01:02:36,000
唤醒整个系统

2417
01:02:36,000 --> 01:02:37,000
然后去工作的

2418
01:02:37,000 --> 01:02:38,000
就和 iPhone 一样

2419
01:02:38,000 --> 01:02:40,000
就是它不是完全的一个

2420
01:02:40,000 --> 01:02:41,000
彻底休眠的一个状态

2421
01:02:41,000 --> 01:02:43,000
就是它所有的后台任务

2422
01:02:43,000 --> 01:02:44,000
都是在一直运行的

2423
01:02:44,000 --> 01:02:45,000
对

2424
01:02:45,000 --> 01:02:46,000
所以你就不会在

2425
01:02:46,000 --> 01:02:47,000
另一时刻

2426
01:02:47,000 --> 01:02:49,000
会有这么大量的一个任务量

2427
01:02:49,000 --> 01:02:49,000
堆过来

2428
01:02:49,000 --> 01:02:50,000
然后非要在那一刻

2429
01:02:50,000 --> 01:02:51,000
全部解决掉

2430
01:02:51,000 --> 01:02:52,000
你说这个

2431
01:02:52,000 --> 01:02:53,000
我想起一个事

2432
01:02:53,000 --> 01:02:57,000
就是你在 M 1 的 MacBook Pro 上面

2433
01:02:57,000 --> 01:02:58,000
你去它的叫

2434
01:02:58,000 --> 01:03:00,000
System Preferences

2435
01:03:00,000 --> 01:03:01,000
就是系统设置里面

2436
01:03:01,000 --> 01:03:03,000
找到能源

2437
01:03:03,000 --> 01:03:04,000
就是 Energy Saver

2438
01:03:04,000 --> 01:03:05,000
就是节能那个选项之后

2439
01:03:05,000 --> 01:03:06,000
它还会有那个选项

2440
01:03:06,000 --> 01:03:07,000
叫做 PowerNap

2441
01:03:07,000 --> 01:03:08,000
那个选项给你吗

2442
01:03:08,000 --> 01:03:09,000
没有了

2443
01:03:09,000 --> 01:03:10,000
我看过

2444
01:03:10,000 --> 01:03:11,000
它那个选项已经取消了

2445
01:03:11,000 --> 01:03:12,000
可能就这个问题导致的

2446
01:03:12,000 --> 01:03:13,000
PowerNap 是

2447
01:03:13,000 --> 01:03:14,000
我觉得是 10 点几

2448
01:03:14,000 --> 01:03:16,000
引进的一个新特性

2449
01:03:16,000 --> 01:03:17,000
就是说

2450
01:03:17,000 --> 01:03:18,000
它可以让你

2451
01:03:18,000 --> 01:03:20,000
那个 Mac 在待机

2452
01:03:20,000 --> 01:03:21,000
或者休眠状态下

2453
01:03:21,000 --> 01:03:23,000
它还是隔三差五的

2454
01:03:23,000 --> 01:03:24,000
唤醒一下

2455
01:03:24,000 --> 01:03:25,000
然后来处理一下

2456
01:03:25,000 --> 01:03:25,000
比如说是

2457
01:03:25,000 --> 01:03:27,000
做这个 Time Machine 的备份

2458
01:03:27,000 --> 01:03:29,000
它说是检查邮件

2459
01:03:29,000 --> 01:03:30,000
或者是 iCloud

2460
01:03:30,000 --> 01:03:31,000
去推送处理

2461
01:03:31,000 --> 01:03:31,000
对吧

2462
01:03:31,000 --> 01:03:32,000
但是这个是仅限于

2463
01:03:32,000 --> 01:03:33,000
我的理解

2464
01:03:33,000 --> 01:03:34,000
仅限于苹果的

2465
01:03:34,000 --> 01:03:35,000
第一方的这些应用

2466
01:03:35,000 --> 01:03:36,000
它当时要求一个东西

2467
01:03:36,000 --> 01:03:37,000
就是

2468
01:03:37,000 --> 01:03:38,000
那些应用必须得支持

2469
01:03:38,000 --> 01:03:39,000
叫做 Timer

2470
01:03:39,000 --> 01:03:41,000
就是合并吧

2471
01:03:41,000 --> 01:03:42,000
因为我们知道

2472
01:03:42,000 --> 01:03:43,000
它的那些 Timer 是

2473
01:03:43,000 --> 01:03:44,000
就是各自

2474
01:03:44,000 --> 01:03:45,000
各自 APP

2475
01:03:45,000 --> 01:03:47,000
各自的 Timer 的节奏

2476
01:03:47,000 --> 01:03:48,000
它可能不一定在一起

2477
01:03:48,000 --> 01:03:49,000
它当时为了支持

2478
01:03:49,000 --> 01:03:50,000
这个 PowerNap

2479
01:03:50,000 --> 01:03:51,000
那些应用

2480
01:03:51,000 --> 01:03:52,000
如果你想要在

2481
01:03:52,000 --> 01:03:54,000
PowerNap 期间

2482
01:03:54,000 --> 01:03:55,000
就是用户核盖期间

2483
01:03:55,000 --> 01:03:56,000
还能做一些

2484
01:03:56,000 --> 01:03:56,000
后台更新的话

2485
01:03:56,000 --> 01:03:58,000
你必须满足一些前提条件

2486
01:03:58,000 --> 01:03:59,000
其中还有一个

2487
01:03:59,000 --> 01:04:01,000
就是说你必须能够支持

2488
01:04:01,000 --> 01:04:02,000
把你的 Timer 能够合并

2489
01:04:02,000 --> 01:04:03,000
比如说你本来是定时定的是

2490
01:04:03,000 --> 01:04:05,000
比如说三分五十秒后

2491
01:04:05,000 --> 01:04:07,000
唤醒一个事件

2492
01:04:07,000 --> 01:04:08,000
你要去运行

2493
01:04:08,000 --> 01:04:09,000
但是因为

2494
01:04:09,000 --> 01:04:11,000
如果你要在 Parnap

2495
01:04:11,000 --> 01:04:11,000
就是说

2496
01:04:11,000 --> 01:04:14,000
你必须牺牲掉准确性

2497
01:04:14,000 --> 01:04:15,000
它系统有可能说

2498
01:04:15,000 --> 01:04:17,000
我在三分二十秒的时候

2499
01:04:17,000 --> 01:04:17,000
就把你唤醒

2500
01:04:17,000 --> 01:04:20,000
或者是在四分十秒的时候

2501
01:04:20,000 --> 01:04:20,000
才把你唤醒

2502
01:04:20,000 --> 01:04:22,000
因为我要考虑

2503
01:04:22,000 --> 01:04:24,000
把尽可能多的 Timer 时间

2504
01:04:24,000 --> 01:04:26,000
合并到一个 Nap 的周期

2505
01:04:26,000 --> 01:04:27,000
我就只用唤醒一次

2506
01:04:27,000 --> 01:04:28,000
因为每次唤醒

2507
01:04:28,000 --> 01:04:29,000
都要比较大的能耗

2508
01:04:29,000 --> 01:04:34,000
所以在 M 1 的芯片上

2509
01:04:34,000 --> 01:04:35,000
不存在这个问题

2510
01:04:35,000 --> 01:04:36,000
因为它没有

2511
01:04:36,000 --> 01:04:37,000
Parnap 的功能

2512
01:04:37,000 --> 01:04:38,000
因为它的后台

2513
01:04:38,000 --> 01:04:39,000
它不是有什么

2514
01:04:39,000 --> 01:04:42,000
四个小的小核心

2515
01:04:42,000 --> 01:04:43,000
就是 Efficiency Core

2516
01:04:43,000 --> 01:04:44,000
高效率的核

2517
01:04:44,000 --> 01:04:44,000
对吧

2518
01:04:44,000 --> 01:04:46,000
所以它会一直在后台运行

2519
01:04:46,000 --> 01:04:48,000
所以不需要 Nap

2520
01:04:48,000 --> 01:04:49,000
就跟你的手机

2521
01:04:49,000 --> 01:04:50,000
跟你的 iPhone

2522
01:04:50,000 --> 01:04:51,000
跟你的 iPad 一样

2523
01:04:51,000 --> 01:04:52,000
它其实是一直在后面

2524
01:04:52,000 --> 01:04:53,000
有待机状态在运行的

2525
01:04:53,000 --> 01:04:55,000
那就不存在说

2526
01:04:55,000 --> 01:04:56,000
我需要合并 Timer 这个问题

2527
01:04:56,000 --> 01:04:57,000
那你只要

2528
01:04:57,000 --> 01:04:59,000
你不过分的去使用

2529
01:04:59,000 --> 01:05:01,000
它还是会让你去

2530
01:05:01,000 --> 01:05:03,000
完成这些 Timer 的功能的

2531
01:05:03,000 --> 01:05:04,000
那也就不会导致你说

2532
01:05:04,000 --> 01:05:04,000
开盖以后

2533
01:05:04,000 --> 01:05:07,000
导致可能上一个 Nap 周期

2534
01:05:07,000 --> 01:05:08,000
累积的那些 Timer 事件

2535
01:05:08,000 --> 01:05:09,000
一下都冒出来

2536
01:05:09,000 --> 01:05:10,000
我马上要处理了

2537
01:05:10,000 --> 01:05:11,000
对吧

2538
01:05:11,000 --> 01:05:11,000
对

2539
01:05:11,000 --> 01:05:13,000
而且 PowerNap 选项的话

2540
01:05:13,000 --> 01:05:15,000
我记得默认设置情况下

2541
01:05:15,000 --> 01:05:17,000
在电池的情况下

2542
01:05:17,000 --> 01:05:18,000
是关掉的

2543
01:05:18,000 --> 01:05:19,000
就是你得自己去

2544
01:05:19,000 --> 01:05:20,000
电源设置里面

2545
01:05:20,000 --> 01:05:21,000
去允许它在电池的情况下

2546
01:05:21,000 --> 01:05:22,000
执行 PowerNap

2547
01:05:22,000 --> 01:05:23,000
对

2548
01:05:23,000 --> 01:05:25,000
如果你是一个电池

2549
01:05:25,000 --> 01:05:26,000
比如说你是一个笔记本

2550
01:05:26,000 --> 01:05:27,000
你是带电池的

2551
01:05:27,000 --> 01:05:29,000
它在简单选项里面

2552
01:05:29,000 --> 01:05:30,000
会有两个 type

2553
01:05:30,000 --> 01:05:31,000
一个是电池模式

2554
01:05:31,000 --> 01:05:32,000
一个是就是

2555
01:05:32,000 --> 01:05:34,000
就是插电源线的模式

2556
01:05:34,000 --> 01:05:35,000
插电线的模式

2557
01:05:35,000 --> 01:05:36,000
里面那个 PowerNap 默认是开的

2558
01:05:36,000 --> 01:05:38,000
然后插那个电池模式

2559
01:05:38,000 --> 01:05:39,000
它默认是关的

2560
01:05:39,000 --> 01:05:40,000
你得手拿开才能完成

2561
01:05:40,000 --> 01:05:41,000
因为它还是要费电

2562
01:05:41,000 --> 01:05:42,000
对吧

2563
01:05:42,000 --> 01:05:44,000
但是它现在如果是 M 1 的话

2564
01:05:44,000 --> 01:05:45,000
就完全不给这个选项了

2565
01:05:45,000 --> 01:05:47,000
我就有那么自信

2566
01:05:47,000 --> 01:05:48,000
即便是这样

2567
01:05:48,000 --> 01:05:48,000
还是不会费电

2568
01:05:48,000 --> 01:05:49,000
对不对

2569
01:05:49,000 --> 01:05:50,000
没错

2570
01:05:50,000 --> 01:05:51,000
对

2571
01:05:51,000 --> 01:05:52,000
所以现在如果有

2572
01:05:52,000 --> 01:05:53,000
Intel 的 MacBook 的用户

2573
01:05:53,000 --> 01:05:54,000
可以尝试一下

2574
01:05:54,000 --> 01:05:55,000
把那个选项勾上之后

2575
01:05:55,000 --> 01:05:56,000
能不能缓解

2576
01:05:56,000 --> 01:05:58,000
就是缓醒了之后

2577
01:05:58,000 --> 01:05:59,000
会卡顿的问题

2578
01:05:59,000 --> 01:06:00,000
就至少它通过

2579
01:06:00,000 --> 01:06:02,000
那个牺牲一些电量的方式

2580
01:06:02,000 --> 01:06:04,000
来减缓

2581
01:06:04,000 --> 01:06:04,000
最后

2582
01:06:04,000 --> 01:06:07,000
同意打开唤醒

2583
01:06:07,000 --> 01:06:07,000
然后全部

2584
01:06:07,000 --> 01:06:09,000
timers 时间都跑出来

2585
01:06:09,000 --> 01:06:10,000
要爱个处理的问题

2586
01:06:10,000 --> 01:06:11,000
对吧

2587
01:06:11,000 --> 01:06:11,000
对

2588
01:06:11,000 --> 01:06:13,000
但有另外一个问题

2589
01:06:13,000 --> 01:06:14,000
就是我曾经遇到过

2590
01:06:14,000 --> 01:06:15,000
原来的 MacBook

2591
01:06:15,000 --> 01:06:17,000
就是我明明是休眠

2592
01:06:17,000 --> 01:06:18,000
就盖上盖

2593
01:06:18,000 --> 01:06:19,000
然后就带着出去旅行

2594
01:06:19,000 --> 01:06:20,000
或者怎么样了

2595
01:06:20,000 --> 01:06:21,000
然后到母翼第一打开

2596
01:06:21,000 --> 01:06:23,000
整个电池就 0%

2597
01:06:23,000 --> 01:06:24,000
完全耗尽的这种情况的

2598
01:06:24,000 --> 01:06:25,000
对

2599
01:06:25,000 --> 01:06:25,000
没电了

2600
01:06:25,000 --> 01:06:26,000
我有遇到过这种情况

2601
01:06:26,000 --> 01:06:28,000
对

2602
01:06:28,000 --> 01:06:30,000
这个好像他们说过一个原因

2603
01:06:30,000 --> 01:06:31,000
就是我不知道是不是这个情况

2604
01:06:31,000 --> 01:06:33,000
就是因为你在背包里面的

2605
01:06:33,000 --> 01:06:36,000
那个盒盖的话

2606
01:06:36,000 --> 01:06:37,000
它是竖直的

2607
01:06:37,000 --> 01:06:39,000
如果说你没有夹紧的话

2608
01:06:39,000 --> 01:06:40,000
比如说你竖把比较空

2609
01:06:40,000 --> 01:06:42,000
然后你抖一抖

2610
01:06:42,000 --> 01:06:43,000
它是有可能在那个过程中

2611
01:06:43,000 --> 01:06:44,000
就把那个盖打开了

2612
01:06:44,000 --> 01:06:45,000
就不断打开

2613
01:06:45,000 --> 01:06:46,000
不断关上

2614
01:06:46,000 --> 01:06:47,000
盖子变成打开的状态

2615
01:06:47,000 --> 01:06:48,000
对

2616
01:06:48,000 --> 01:06:49,000
就它又变成又在运行

2617
01:06:49,000 --> 01:06:50,000
我真理不太可能

2618
01:06:50,000 --> 01:06:51,000
因为我背的是一个

2619
01:06:51,000 --> 01:06:52,000
就是那种

2620
01:06:52,000 --> 01:06:53,000
呃

2621
01:06:53,000 --> 01:06:54,000
带专门夹层的包

2622
01:06:54,000 --> 01:06:56,000
它会把整个 MacBook

2623
01:06:56,000 --> 01:06:56,000
就整

2624
01:06:56,000 --> 01:06:58,000
非常紧的包裹起来

2625
01:06:58,000 --> 01:06:59,000
但我还是遇到过这种问题

2626
01:06:59,000 --> 01:07:00,000
就是

2627
01:07:00,000 --> 01:07:01,000
呃

2628
01:07:01,000 --> 01:07:01,000
下班的时候

2629
01:07:01,000 --> 01:07:03,000
把电脑放进去

2630
01:07:03,000 --> 01:07:03,000
然后去健身

2631
01:07:03,000 --> 01:07:04,000
然后回到家里面

2632
01:07:04,000 --> 01:07:05,000
再打开

2633
01:07:05,000 --> 01:07:07,000
电脑已经没电了

2634
01:07:07,000 --> 01:07:07,000
这样

2635
01:07:07,000 --> 01:07:09,000
可能是后台有什么程序

2636
01:07:09,000 --> 01:07:09,000
阻止了

2637
01:07:09,000 --> 01:07:11,000
强行阻止了休眠

2638
01:07:11,000 --> 01:07:12,000
这样的一个事情

2639
01:07:12,000 --> 01:07:13,000
然后它实际是运行的

2640
01:07:13,000 --> 01:07:14,000
有可能

2641
01:07:14,000 --> 01:07:14,000
对

2642
01:07:14,000 --> 01:07:15,000
或者是出现了一个 bug

2643
01:07:15,000 --> 01:07:17,000
根本就没有进到休眠状态

2644
01:07:17,000 --> 01:07:19,000
然后一直都是在那个尝试进入休眠

2645
01:07:19,000 --> 01:07:22,000
然后不断的去这个耗能的一个状态

2646
01:07:22,000 --> 01:07:23,000
也有可能

2647
01:07:23,000 --> 01:07:23,000
对吧

2648
01:07:23,000 --> 01:07:24,000
但是呢

2649
01:07:24,000 --> 01:07:27,000
我们目前都知道这个锅可以甩给英特尔了

2650
01:07:27,000 --> 01:07:28,000
哈哈

2651
01:07:28,000 --> 01:07:29,000
是的

2652
01:07:29,000 --> 01:07:30,000
这个也一切甩了吧

2653
01:07:30,000 --> 01:07:32,000
因为 M 1 没有这个问题了

2654
01:07:32,000 --> 01:07:32,000
对

2655
01:07:32,000 --> 01:07:33,000
没这个问题了

2656
01:07:33,000 --> 01:07:34,000
我什么时候都来跑

2657
01:07:34,000 --> 01:07:36,000
我只是变得跑的慢了一点而已

2658
01:07:36,000 --> 01:07:37,000
对

2659
01:07:37,000 --> 01:07:39,000
不过你刚才说到这个这个 timer 的这个问题

2660
01:07:39,000 --> 01:07:40,000
如果我在想

2661
01:07:40,000 --> 01:07:41,000
假设苹果

2662
01:07:41,000 --> 01:07:43,000
假设如果确实问题是如你所说

2663
01:07:43,000 --> 01:07:46,000
那么一个的导致的开机的时候

2664
01:07:46,000 --> 01:07:47,000
会比较

2665
01:07:47,000 --> 01:07:48,000
就英特尔的那个

2666
01:07:48,000 --> 01:07:49,000
麦克服开机会比较

2667
01:07:49,000 --> 01:07:51,000
就是揭开盖会比较慢的话

2668
01:07:51,000 --> 01:07:53,000
他其实可以等一下

2669
01:07:53,000 --> 01:07:55,000
再启动那些 timer 事件的处理

2670
01:07:55,000 --> 01:07:56,000
也还是可以解决这个问题吧

2671
01:07:56,000 --> 01:07:59,000
好像从架构上来说会比较难

2672
01:07:59,000 --> 01:08:01,000
因为那已经是那个程序

2673
01:08:01,000 --> 01:08:03,000
自己的一个代码的一部分的逻辑了

2674
01:08:03,000 --> 01:08:04,000
你这个时候

2675
01:08:04,000 --> 01:08:06,000
你要是强行的把那部分程序

2676
01:08:06,000 --> 01:08:08,000
全部给 sleep 做

2677
01:08:08,000 --> 01:08:10,000
然后就只把 kernel 唤醒

2678
01:08:10,000 --> 01:08:12,000
只把那个 UI 的进程

2679
01:08:12,000 --> 01:08:13,000
和这种事情唤醒的话

2680
01:08:13,000 --> 01:08:14,000
好像想起来

2681
01:08:14,000 --> 01:08:16,000
想想还是一个很复杂的事情

2682
01:08:16,000 --> 01:08:18,000
就会导致比如说你打开之后

2683
01:08:18,000 --> 01:08:19,000
那个程序没有响应的

2684
01:08:19,000 --> 01:08:22,000
虽然说它不影响你其他系统的性能

2685
01:08:22,000 --> 01:08:24,000
但是那个程序本身没响应

2686
01:08:24,000 --> 01:08:25,000
会导致你说你这个东西是不是挂掉了

2687
01:08:25,000 --> 01:08:26,000
对

2688
01:08:26,000 --> 01:08:28,000
而且系统很有可能

2689
01:08:28,000 --> 01:08:28,000
系统的某些东西

2690
01:08:28,000 --> 01:08:30,000
要非得依靠某个程序

2691
01:08:30,000 --> 01:08:31,000
某个结果怎么样的东西

2692
01:08:31,000 --> 01:08:32,000
你把它 sleep 出来

2693
01:08:32,000 --> 01:08:33,000
那系统也卡住了

2694
01:08:33,000 --> 01:08:35,000
然后大家就互相锁死

2695
01:08:35,000 --> 01:08:35,000
对

2696
01:08:35,000 --> 01:08:39,000
我们把这个 surege 给 sleep 住

2697
01:08:39,000 --> 01:08:40,000
然后打开

2698
01:08:40,000 --> 01:08:41,000
没网了

2699
01:08:41,000 --> 01:08:43,000
就完蛋了

2700
01:08:43,000 --> 01:08:44,000
对

2701
01:08:44,000 --> 01:08:47,000
然后那边要检查 OCSP 的进球

2702
01:08:47,000 --> 01:08:49,000
然后就互相就死云

2703
01:08:49,000 --> 01:08:49,000
完了卡住了

2704
01:08:49,000 --> 01:08:51,000
所以看起来也不太可信

2705
01:08:51,000 --> 01:08:53,000
就这个机和弹的问题很难解决

2706
01:08:53,000 --> 01:08:54,000
对

2707
01:08:54,000 --> 01:08:55,000
说到这个开机

2708
01:08:55,000 --> 01:08:57,000
你用那个手表解锁了

2709
01:08:57,000 --> 01:08:59,000
这个 M 1 的这个 MacBook Pro 吗

2710
01:08:59,000 --> 01:09:00,000
我没有

2711
01:09:00,000 --> 01:09:01,000
因为我的手表的话

2712
01:09:01,000 --> 01:09:03,000
只是健身的时候在

2713
01:09:03,000 --> 01:09:05,000
所以日常的话我都没有戴手表

2714
01:09:05,000 --> 01:09:06,000
平时你不戴的

2715
01:09:06,000 --> 01:09:06,000
对

2716
01:09:06,000 --> 01:09:08,000
而且 M 1 的话有那个指纹

2717
01:09:08,000 --> 01:09:09,000
所以说我也不得

2718
01:09:09,000 --> 01:09:10,000
看牙齿和我一样

2719
01:09:10,000 --> 01:09:12,000
我基本上很少戴 Apple Watch

2720
01:09:12,000 --> 01:09:13,000
现在不去健身了

2721
01:09:13,000 --> 01:09:15,000
连这个机会都没有了

2722
01:09:15,000 --> 01:09:16,000
就放在那吃灰

2723
01:09:16,000 --> 01:09:16,000
OK

2724
01:09:16,000 --> 01:09:18,000
因为我平时还是戴的

2725
01:09:18,000 --> 01:09:19,000
但是因为戴一段时间

2726
01:09:19,000 --> 01:09:20,000
就会它背后那个圈

2727
01:09:20,000 --> 01:09:21,000
会压在手上

2728
01:09:21,000 --> 01:09:22,000
压上一个印子

2729
01:09:22,000 --> 01:09:24,000
那部分皮肤会非常的

2730
01:09:24,000 --> 01:09:25,000
痒

2731
01:09:25,000 --> 01:09:26,000
就是难受

2732
01:09:26,000 --> 01:09:26,000
痒

2733
01:09:26,000 --> 01:09:28,000
然后我就摘掉了

2734
01:09:28,000 --> 01:09:29,000
也是出门

2735
01:09:29,000 --> 01:09:31,000
就是我需要走步的时候

2736
01:09:31,000 --> 01:09:32,000
才戴上它

2737
01:09:32,000 --> 01:09:34,000
就这个问题还是比较难解释

2738
01:09:34,000 --> 01:09:36,000
那其实也是去健身房

2739
01:09:36,000 --> 01:09:36,000
对

2740
01:09:36,000 --> 01:09:38,000
之前遇到的问题就是说

2741
01:09:38,000 --> 01:09:40,000
我老是经常性的解锁不了

2742
01:09:40,000 --> 01:09:41,000
这个 Apple Watch

2743
01:09:41,000 --> 01:09:42,000
就是它

2744
01:09:42,000 --> 01:09:43,000
你看到它的尝试解锁

2745
01:09:43,000 --> 01:09:44,000
对吧

2746
01:09:44,000 --> 01:09:44,000
那我是 Mac mini

2747
01:09:44,000 --> 01:09:47,000
然后它过了几秒

2748
01:09:47,000 --> 01:09:48,000
我说

2749
01:09:48,000 --> 01:09:49,000
这几秒时间

2750
01:09:49,000 --> 01:09:51,000
我已经足够我输入密码

2751
01:09:51,000 --> 01:09:52,000
完成登录的过程了

2752
01:09:52,000 --> 01:09:52,000
对吧

2753
01:09:52,000 --> 01:09:53,000
但是它还没有解锁

2754
01:09:53,000 --> 01:09:55,000
最后它还告诉我失败了

2755
01:09:55,000 --> 01:09:56,000
我还是得输入密码

2756
01:09:56,000 --> 01:09:58,000
就这个可靠性非常低

2757
01:09:58,000 --> 01:09:59,000
对

2758
01:09:59,000 --> 01:10:00,000
这个对于苹果来说

2759
01:10:00,000 --> 01:10:01,000
真的太常见的一件事情了

2760
01:10:01,000 --> 01:10:01,000
是吧

2761
01:10:01,000 --> 01:10:02,000
各种的这种

2762
01:10:02,000 --> 01:10:04,000
只要涉及到两个设备

2763
01:10:04,000 --> 01:10:05,000
不在一个一起的这种

2764
01:10:05,000 --> 01:10:07,000
感觉这个 bug 的发生率

2765
01:10:07,000 --> 01:10:08,000
有 50%的这么高

2766
01:10:08,000 --> 01:10:10,000
我是十次

2767
01:10:10,000 --> 01:10:11,000
有七次可能都解不开

2768
01:10:11,000 --> 01:10:13,000
碰运气能解锁开

2769
01:10:13,000 --> 01:10:14,000
可能两三次这种

2770
01:10:14,000 --> 01:10:16,000
你的是第几代的

2771
01:10:16,000 --> 01:10:16,000
那个 Watch

2772
01:10:16,000 --> 01:10:18,000
就五代

2773
01:10:18,000 --> 01:10:19,000
不是最新这个

2774
01:10:19,000 --> 01:10:20,000
但是也是比较新的

2775
01:10:20,000 --> 01:10:21,000
对

2776
01:10:21,000 --> 01:10:23,000
那个应该是没问题的

2777
01:10:23,000 --> 01:10:25,000
因为原来一二代的时候

2778
01:10:25,000 --> 01:10:26,000
确实是好像实现方式

2779
01:10:26,000 --> 01:10:27,000
整个都是不一样的

2780
01:10:27,000 --> 01:10:29,000
那个成功率就是非常低

2781
01:10:29,000 --> 01:10:30,000
我就是一代的

2782
01:10:30,000 --> 01:10:32,000
可能就是太老了

2783
01:10:32,000 --> 01:10:33,000
无它就是太老了

2784
01:10:33,000 --> 01:10:33,000
对

2785
01:10:33,000 --> 01:10:35,000
我当时是开发 AirPods 的时候

2786
01:10:35,000 --> 01:10:36,000
我专门看

2787
01:10:36,000 --> 01:10:36,000
适配了 Watch

2788
01:10:36,000 --> 01:10:38,000
然后让 Watch 可以解锁

2789
01:10:38,000 --> 01:10:39,000
然后就发现

2790
01:10:39,000 --> 01:10:40,000
我那个原来的最早的那一代

2791
01:10:40,000 --> 01:10:41,000
应该是零代了

2792
01:10:41,000 --> 01:10:42,000
S 0

2793
01:10:42,000 --> 01:10:43,000
就不行了

2794
01:10:43,000 --> 01:10:43,000
对

2795
01:10:43,000 --> 01:10:44,000
那个真的不行

2796
01:10:44,000 --> 01:10:45,000
那个成功率就低到

2797
01:10:45,000 --> 01:10:47,000
可能 5%不到的

2798
01:10:47,000 --> 01:10:49,000
这么低的一个成功率

2799
01:10:49,000 --> 01:10:50,000
直接放弃了

2800
01:10:50,000 --> 01:10:52,000
内代机器真的非常非常慢

2801
01:10:52,000 --> 01:10:53,000
就是那个

2802
01:10:53,000 --> 01:10:54,000
低频性好急

2803
01:10:54,000 --> 01:10:54,000
然后

2804
01:10:54,000 --> 01:10:56,000
那个处理器也不行

2805
01:10:56,000 --> 01:10:57,000
续航也不行

2806
01:10:57,000 --> 01:10:58,000
然后

2807
01:10:58,000 --> 01:10:58,000
哎

2808
01:10:58,000 --> 01:10:59,000
挺坑的

2809
01:10:59,000 --> 01:11:00,000
是的

2810
01:11:00,000 --> 01:11:01,000
然后换到 5 代了之后

2811
01:11:01,000 --> 01:11:02,000
就发现成功率

2812
01:11:02,000 --> 01:11:03,000
在测试的时候

2813
01:11:03,000 --> 01:11:06,000
是达到了 99%左右

2814
01:11:06,000 --> 01:11:07,000
但是在日常的使用中

2815
01:11:07,000 --> 01:11:09,000
确实很多时候也会出现

2816
01:11:09,000 --> 01:11:09,000
就不知道怎么

2817
01:11:09,000 --> 01:11:11,000
它就不工作了

2818
01:11:11,000 --> 01:11:13,000
可能依赖于蓝牙的

2819
01:11:13,000 --> 01:11:15,000
那个 2.4 G 环境

2820
01:11:15,000 --> 01:11:16,000
可能还是有些奖励

2821
01:11:16,000 --> 01:11:17,000
因为现在 2.4 G 环境

2822
01:11:17,000 --> 01:11:17,000
确实

2823
01:11:17,000 --> 01:11:18,000
特别是在城市里面

2824
01:11:18,000 --> 01:11:19,000
是比较糟糕的

2825
01:11:19,000 --> 01:11:20,000
然后说

2826
01:11:20,000 --> 01:11:21,000
不管你再怎么努力

2827
01:11:21,000 --> 01:11:23,000
你解决不了这个

2828
01:11:23,000 --> 01:11:25,000
无线这个射频的问题的话

2829
01:11:25,000 --> 01:11:26,000
它可能还是

2830
01:11:26,000 --> 01:11:27,000
没有办法实现

2831
01:11:27,000 --> 01:11:29,000
就是说稳定可靠的解锁

2832
01:11:29,000 --> 01:11:29,000
对

2833
01:11:29,000 --> 01:11:30,000
但这个锅好像

2834
01:11:30,000 --> 01:11:31,000
也有一个

2835
01:11:31,000 --> 01:11:33,000
可以甩给英特尔的可能

2836
01:11:33,000 --> 01:11:35,000
就是我之前做过一些

2837
01:11:35,000 --> 01:11:37,000
蓝牙的一些开发

2838
01:11:37,000 --> 01:11:38,000
然后你会发现

2839
01:11:38,000 --> 01:11:39,000
就是其实整个

2840
01:11:39,000 --> 01:11:40,000
MacOS 和 iOS 的

2841
01:11:40,000 --> 01:11:41,000
那个蓝牙协议站

2842
01:11:41,000 --> 01:11:43,000
还是经常会出现问题

2843
01:11:43,000 --> 01:11:44,000
整个协议站崩掉的

2844
01:11:44,000 --> 01:11:46,000
所以是不是也是

2845
01:11:46,000 --> 01:11:47,000
Mac 上面的

2846
01:11:47,000 --> 01:11:47,000
和原来

2847
01:11:47,000 --> 01:11:49,000
原来在老架构上面

2848
01:11:49,000 --> 01:11:50,000
和蓝牙的通讯

2849
01:11:50,000 --> 01:11:51,000
不是那么顺畅

2850
01:11:51,000 --> 01:11:52,000
然后它出问题了

2851
01:11:52,000 --> 01:11:55,000
然后在 M 1 的芯片上面

2852
01:11:55,000 --> 01:11:56,000
也把这个问题修好了

2853
01:11:56,000 --> 01:11:58,000
也是有可能的一种理论

2854
01:11:58,000 --> 01:11:59,000
也有可能

2855
01:11:59,000 --> 01:12:00,000
就是之前它是用

2856
01:12:00,000 --> 01:12:02,000
它的之前蓝牙和 WiFi

2857
01:12:02,000 --> 01:12:03,000
应该都是博通的方案

2858
01:12:03,000 --> 01:12:04,000
就是在 Mac 上面

2859
01:12:04,000 --> 01:12:04,000
对

2860
01:12:04,000 --> 01:12:06,000
那这次他改用自己的方案

2861
01:12:06,000 --> 01:12:08,000
说不定也有可能

2862
01:12:08,000 --> 01:12:10,000
你可以关注一下

2863
01:12:10,000 --> 01:12:10,000
就是你之后

2864
01:12:10,000 --> 01:12:12,000
试试节奏几次看一下

2865
01:12:12,000 --> 01:12:13,000
好

2866
01:12:13,000 --> 01:12:13,000
没问题

2867
01:12:13,000 --> 01:12:15,000
但我觉得最重要

2868
01:12:15,000 --> 01:12:16,000
就是这个问题

2869
01:12:16,000 --> 01:12:17,000
可能还是得靠

2870
01:12:17,000 --> 01:12:17,000
不管是从安全性

2871
01:12:17,000 --> 01:12:19,000
还是可靠性上

2872
01:12:19,000 --> 01:12:20,000
还是得看

2873
01:12:20,000 --> 01:12:21,000
就是

2874
01:12:21,000 --> 01:12:23,000
是从 iPhone 11

2875
01:12:23,000 --> 01:12:24,000
开始搭载了

2876
01:12:24,000 --> 01:12:25,000
U 1 的

2877
01:12:25,000 --> 01:12:28,000
Ultra Wideband 的东西

2878
01:12:28,000 --> 01:12:29,000
看能不能解决

2879
01:12:29,000 --> 01:12:30,000
因为一个是可以解决

2880
01:12:30,000 --> 01:12:31,000
通讯可靠性

2881
01:12:31,000 --> 01:12:32,000
因为它是超宽态

2882
01:12:32,000 --> 01:12:33,000
它是可以同时

2883
01:12:33,000 --> 01:12:34,000
在多个频段上

2884
01:12:34,000 --> 01:12:35,000
发几个消息

2885
01:12:35,000 --> 01:12:36,000
就不用再

2886
01:12:36,000 --> 01:12:38,000
等蓝牙的一个跳频

2887
01:12:38,000 --> 01:12:39,000
2.4 G 那么弄

2888
01:12:39,000 --> 01:12:40,000
而且它有距离

2889
01:12:40,000 --> 01:12:41,000
就是说

2890
01:12:41,000 --> 01:12:43,000
它可以更加安全可靠的判断

2891
01:12:43,000 --> 01:12:44,000
是不是你这个表

2892
01:12:44,000 --> 01:12:46,000
刚好在 MacBook 的旁边

2893
01:12:46,000 --> 01:12:47,000
我就可以有更大的

2894
01:12:47,000 --> 01:12:50,000
信任空间

2895
01:12:50,000 --> 01:12:51,000
说那肯定是你本人

2896
01:12:51,000 --> 01:12:53,000
在解锁这个东西

2897
01:12:53,000 --> 01:12:54,000
而不是说通过这种

2898
01:12:54,000 --> 01:12:54,000
就是什么

2899
01:12:54,000 --> 01:12:56,000
relay 攻击的方式来做的

2900
01:12:56,000 --> 01:12:58,000
对没错

2901
01:12:58,000 --> 01:12:59,000
但是这个好像

2902
01:12:59,000 --> 01:13:00,000
还是一个遥远的现实

2903
01:13:00,000 --> 01:13:02,000
这个只在 iPhone 上

2904
01:13:02,000 --> 01:13:03,000
目前装载了

2905
01:13:03,000 --> 01:13:05,000
Watch 和 Mac 上都还没有

2906
01:13:05,000 --> 01:13:06,000
Watch 上面看

2907
01:13:06,000 --> 01:13:07,000
主要是空间的限制

2908
01:13:07,000 --> 01:13:09,000
怎么能够实现说

2909
01:13:09,000 --> 01:13:10,000
把再微缩一下

2910
01:13:10,000 --> 01:13:11,000
或者直接整

2911
01:13:11,000 --> 01:13:13,000
表上它还不是 SoC

2912
01:13:13,000 --> 01:13:15,000
它是叫做 SOP

2913
01:13:15,000 --> 01:13:16,000
System and Package

2914
01:13:16,000 --> 01:13:19,000
就是它整个系统

2915
01:13:19,000 --> 01:13:21,000
都封装在一个 package 里面去了

2916
01:13:21,000 --> 01:13:24,000
然后就是它整合都是比 M 1 还要高的

2917
01:13:24,000 --> 01:13:25,000
所以说到时候

2918
01:13:25,000 --> 01:13:26,000
如果它把 U 1 整合进去

2919
01:13:26,000 --> 01:13:28,000
我觉得应该也是有可能性的

2920
01:13:28,000 --> 01:13:29,000
但只是说功耗

2921
01:13:29,000 --> 01:13:30,000
这些天线怎么弄

2922
01:13:30,000 --> 01:13:31,000
我不太清楚

2923
01:13:31,000 --> 01:13:34,000
但是我希望是能够实现的

2924
01:13:34,000 --> 01:13:36,000
然后 U 1 应该上 Mac 上

2925
01:13:36,000 --> 01:13:37,000
都还没有对吧

2926
01:13:37,000 --> 01:13:38,000
哪怕是 M 1 的 Mac 上

2927
01:13:38,000 --> 01:13:39,000
也是没有的

2928
01:13:39,000 --> 01:13:40,000
对都没有

2929
01:13:40,000 --> 01:13:42,000
说不定 M 2 可能就有了

2930
01:13:42,000 --> 01:13:43,000
应该是

2931
01:13:43,000 --> 01:13:43,000
按时间的话

2932
01:13:43,000 --> 01:13:45,000
应该是到了一个 GAMU

2933
01:13:45,000 --> 01:13:45,000
GAMU

2934
01:13:45,000 --> 01:13:46,000
我去该进行大成级的

2935
01:13:46,000 --> 01:13:47,000
这么一个实验了

2936
01:13:47,000 --> 01:13:48,000
对啊

2937
01:13:48,000 --> 01:13:50,000
而且它要整合在芯片里面

2938
01:13:50,000 --> 01:13:51,000
它也比较好做

2939
01:13:51,000 --> 01:13:52,000
都是在自己的

2940
01:13:52,000 --> 01:13:54,000
不管是安全性上

2941
01:13:54,000 --> 01:13:56,000
还是说空间上面

2942
01:13:56,000 --> 01:13:57,000
都比较好弄

2943
01:13:57,000 --> 01:13:58,000
对吧

2944
01:13:58,000 --> 01:13:58,000
我觉得

2945
01:13:58,000 --> 01:13:59,000
而且这个场景很合适

2946
01:13:59,000 --> 01:14:00,000
对吧

2947
01:14:00,000 --> 01:14:01,000
用这个表或者手机

2948
01:14:01,000 --> 01:14:04,000
靠近一个你的 Mac 就解锁了

2949
01:14:04,000 --> 01:14:05,000
其实还是很方便的

2950
01:14:05,000 --> 01:14:07,000
就是不用做什么操作

2951
01:14:07,000 --> 01:14:07,000
对

2952
01:14:07,000 --> 01:14:08,000
我今天才从你学习了

2953
01:14:08,000 --> 01:14:11,000
原来 U 1 是可以拿来传输数据的

2954
01:14:11,000 --> 01:14:12,000
我原来的理解的话

2955
01:14:12,000 --> 01:14:14,000
以为它只能去标定一个方向

2956
01:14:14,000 --> 01:14:16,000
把这个方向是它的物理特性导致的

2957
01:14:16,000 --> 01:14:16,000
传输数据

2958
01:14:16,000 --> 01:14:17,000
它只要能够传输信号

2959
01:14:17,000 --> 01:14:18,000
都是可以传输数据的

2960
01:14:18,000 --> 01:14:20,000
而且我理解它那个带宽还比较高

2961
01:14:20,000 --> 01:14:21,000
因为它可用的

2962
01:14:21,000 --> 01:14:23,000
就是那个无线的频段会比较宽

2963
01:14:23,000 --> 01:14:26,000
所以我觉得 U 1 如果内置到

2964
01:14:26,000 --> 01:14:27,000
iPad

2965
01:14:27,000 --> 01:14:30,000
甚至是这个 Mac 里面

2966
01:14:30,000 --> 01:14:30,000
它甚至

2967
01:14:30,000 --> 01:14:31,000
你知道我们现在用那个叫什么

2968
01:14:31,000 --> 01:14:32,000
Sidecar

2969
01:14:32,000 --> 01:14:33,000
对吧

2970
01:14:33,000 --> 01:14:34,000
就是通过

2971
01:14:34,000 --> 01:14:35,000
是通过 WiFi 来实现的

2972
01:14:35,000 --> 01:14:37,000
它是通过 5 G 的一个 WiFi 来实现的

2973
01:14:37,000 --> 01:14:37,000
对

2974
01:14:37,000 --> 01:14:38,000
应该是 WiFi

2975
01:14:38,000 --> 01:14:39,000
对

2976
01:14:39,000 --> 01:14:40,000
如果它用 U 1 的话

2977
01:14:40,000 --> 01:14:42,000
还可以把那个 WiFi 的带宽解放出来

2978
01:14:42,000 --> 01:14:43,000
其实还是更好的一个方案

2979
01:14:43,000 --> 01:14:44,000
对

2980
01:14:44,000 --> 01:14:44,000
是的

2981
01:14:44,000 --> 01:14:46,000
是一个我们希望的未来

2982
01:14:46,000 --> 01:14:47,000
对

2983
01:14:47,000 --> 01:14:48,000
Anyway

2984
01:14:48,000 --> 01:14:49,000
这个就是 M

2985
01:14:49,000 --> 01:14:52,000
就是未来的这个苹果的这个 Mac

2986
01:14:52,000 --> 01:14:53,000
几代设的还是非常值得期待的

2987
01:14:53,000 --> 01:14:55,000
那大家可以去买一点这个苹果股票

2988
01:14:55,000 --> 01:14:58,000
反正我是买的

2989
01:14:58,000 --> 01:14:59,000
你也买的好像

2990
01:14:59,000 --> 01:15:00,000
我先卖微镜

2991
01:15:00,000 --> 01:15:01,000
对

2992
01:15:01,000 --> 01:15:03,000
OK

2993
01:15:03,000 --> 01:15:05,000
今天我们前半部分叫

2994
01:15:05,000 --> 01:15:05,000
我们叫什么

2995
01:15:05,000 --> 01:15:06,000
寓意先扬

2996
01:15:06,000 --> 01:15:06,000
对吧

2997
01:15:06,000 --> 01:15:08,000
先表现了一顿这个苹果的这个

2998
01:15:08,000 --> 01:15:09,000
这个

2999
01:15:09,000 --> 01:15:11,000
这个硬件

3000
01:15:11,000 --> 01:15:12,000
现在我们开始吐槽模式

3001
01:15:12,000 --> 01:15:13,000
很招在后面

3002
01:15:13,000 --> 01:15:13,000
对

3003
01:15:13,000 --> 01:15:15,000
就是在聊的第二个话题

3004
01:15:15,000 --> 01:15:16,000
其实是跟

3005
01:15:16,000 --> 01:15:17,000
其实是相当来说

3006
01:15:17,000 --> 01:15:18,000
一个比较糟糕的一个

3007
01:15:18,000 --> 01:15:20,000
或者是比较难解决的一个事情

3008
01:15:20,000 --> 01:15:23,000
这对叫什么

3009
01:15:23,000 --> 01:15:24,000
我不知道这个中文名叫什么

3010
01:15:24,000 --> 01:15:25,000
我就是这个

3011
01:15:25,000 --> 01:15:27,000
这个缩写叫做 OCSP

3012
01:15:27,000 --> 01:15:29,000
它的全名叫做

3013
01:15:29,000 --> 01:15:32,000
Online Certificate Status Protocol

3014
01:15:32,000 --> 01:15:33,000
叫什么

3015
01:15:33,000 --> 01:15:35,000
在线证书状态协议

3016
01:15:35,000 --> 01:15:37,000
大概这么翻译一下吧

3017
01:15:37,000 --> 01:15:38,000
要不压情

3018
01:15:38,000 --> 01:15:39,000
你给我们先解释一下

3019
01:15:39,000 --> 01:15:41,000
因为这个是一个开发者专门用的东西

3020
01:15:41,000 --> 01:15:42,000
你给我们解释一下

3021
01:15:42,000 --> 01:15:43,000
这个东西是干嘛用的

3022
01:15:43,000 --> 01:15:44,000
为什么它会

3023
01:15:44,000 --> 01:15:45,000
这次变成一个很大的问题

3024
01:15:45,000 --> 01:15:46,000
行

3025
01:15:46,000 --> 01:15:49,000
然后其实这个 OCSP 这个东西的话

3026
01:15:49,000 --> 01:15:51,000
本身的话和应用的话

3027
01:15:51,000 --> 01:15:52,000
它只是正好被套用在这了

3028
01:15:52,000 --> 01:15:55,000
它本身不是为了解决应用安全性的

3029
01:15:55,000 --> 01:15:56,000
这么一个问题

3030
01:15:56,000 --> 01:15:58,000
它解决的问题是什么呢

3031
01:15:58,000 --> 01:16:01,000
是就是在原来的传统的证书体系下

3032
01:16:01,000 --> 01:16:04,000
证书可能更常见的场景是 HTPS 网站

3033
01:16:04,000 --> 01:16:05,000
我们当我们访证一个网站的时候

3034
01:16:05,000 --> 01:16:07,000
网站要通过各种的加密手段

3035
01:16:07,000 --> 01:16:10,000
给我们出示一个合理有效的证书

3036
01:16:10,000 --> 01:16:11,000
我们两万一才知道

3037
01:16:11,000 --> 01:16:12,000
我们连接到了一个

3038
01:16:12,000 --> 01:16:13,000
这个网站是真实的

3039
01:16:13,000 --> 01:16:14,000
不是别人造假的

3040
01:16:14,000 --> 01:16:16,000
然后这么一个情况

3041
01:16:16,000 --> 01:16:17,000
但是这个情况就会出现

3042
01:16:17,000 --> 01:16:19,000
我的运营商也好

3043
01:16:19,000 --> 01:16:20,000
或者其他 whatever

3044
01:16:20,000 --> 01:16:22,000
什么样的情况都行

3045
01:16:22,000 --> 01:16:23,000
导致我把证书表现泄露出去了

3046
01:16:23,000 --> 01:16:26,000
我需要有一个措施能够补救

3047
01:16:26,000 --> 01:16:28,000
然后能够把我泄露出去

3048
01:16:28,000 --> 01:16:30,000
这个证书给它注销掉

3049
01:16:30,000 --> 01:16:33,000
所以说就有各种各样的方式

3050
01:16:33,000 --> 01:16:34,000
去进行叫做证书吊销

3051
01:16:34,000 --> 01:16:37,000
就这个 OCSP 就是用来吊销证书用的

3052
01:16:37,000 --> 01:16:38,000
对吧

3053
01:16:38,000 --> 01:16:38,000
对是的

3054
01:16:38,000 --> 01:16:40,000
OCSP 就是来吊销证书的一种方式

3055
01:16:40,000 --> 01:16:41,000
最早的时候

3056
01:16:41,000 --> 01:16:44,000
应该是用来叫 CRL 的一种方式去吊销

3057
01:16:44,000 --> 01:16:46,000
CRL 就是定期的系统去

3058
01:16:46,000 --> 01:16:48,000
或者是浏览器去查一个地方

3059
01:16:48,000 --> 01:16:50,000
然后给你返回一大个列表

3060
01:16:50,000 --> 01:16:52,000
哪个证书是被吊销了的

3061
01:16:52,000 --> 01:16:54,000
你记得你不要再相信它了

3062
01:16:54,000 --> 01:16:56,000
但这个东西就是越堆越大

3063
01:16:56,000 --> 01:16:56,000
越堆越大

3064
01:16:56,000 --> 01:16:59,000
现在大家这么多网站这么多东西

3065
01:16:59,000 --> 01:17:00,000
它只扔不减

3066
01:17:00,000 --> 01:17:01,000
对是的

3067
01:17:01,000 --> 01:17:03,000
然后就搞的这个事情

3068
01:17:03,000 --> 01:17:04,000
就会感觉看起来很不优雅

3069
01:17:04,000 --> 01:17:06,000
然后 OCSP 的话

3070
01:17:06,000 --> 01:17:07,000
其实也挺简单的

3071
01:17:07,000 --> 01:17:08,000
就是每次访问的时候

3072
01:17:08,000 --> 01:17:10,000
我再去找一个测定的

3073
01:17:10,000 --> 01:17:12,000
我相信的服务区去问一下

3074
01:17:12,000 --> 01:17:14,000
然后说这个证书

3075
01:17:14,000 --> 01:17:15,000
还有没有被吊销掉

3076
01:17:15,000 --> 01:17:15,000
对

3077
01:17:15,000 --> 01:17:16,000
它有没有被吊销掉

3078
01:17:16,000 --> 01:17:17,000
然后服务区就说 OK

3079
01:17:17,000 --> 01:17:17,000
没问题

3080
01:17:17,000 --> 01:17:18,000
然后我就

3081
01:17:18,000 --> 01:17:20,000
我本地就放心就可以了

3082
01:17:20,000 --> 01:17:22,000
然后可能会再加上一些缓存机制

3083
01:17:22,000 --> 01:17:25,000
就是比如说只有几天才会访问一次

3084
01:17:25,000 --> 01:17:27,000
这个可能有点

3085
01:17:27,000 --> 01:17:27,000
我们做个

3086
01:17:27,000 --> 01:17:29,000
刚才那个很技术的一个描述

3087
01:17:29,000 --> 01:17:31,000
但我们做一个比较形象的一个比喻

3088
01:17:31,000 --> 01:17:32,000
就好像我们现在说

3089
01:17:32,000 --> 01:17:34,000
是你去拿一个美国签证

3090
01:17:34,000 --> 01:17:36,000
它虽然发给你的一个签证

3091
01:17:36,000 --> 01:17:37,000
你拿到的那个所谓的 Visa

3092
01:17:37,000 --> 01:17:39,000
那张纸贴在你的户头上了

3093
01:17:39,000 --> 01:17:39,000
对吧

3094
01:17:39,000 --> 01:17:42,000
但是你实际上要去美国之前

3095
01:17:42,000 --> 01:17:45,000
还是得在一个美国官方指定的一个网站上

3096
01:17:45,000 --> 01:17:46,000
去注册一下

3097
01:17:46,000 --> 01:17:47,000
说我要来美国了

3098
01:17:47,000 --> 01:17:49,000
虽然你之前给我发过这个签证

3099
01:17:49,000 --> 01:17:51,000
但是你现在我再确认一下

3100
01:17:51,000 --> 01:17:52,000
我能不能来这次

3101
01:17:52,000 --> 01:17:52,000
对吧

3102
01:17:52,000 --> 01:17:54,000
差不多这个 OCSP 就是说

3103
01:17:54,000 --> 01:17:55,000
这个确认这个过程

3104
01:17:55,000 --> 01:17:56,000
可以这样解释

3105
01:17:56,000 --> 01:17:58,000
我觉得 OCSP 更像那种

3106
01:17:58,000 --> 01:18:00,000
就是比如说你买了一瓶酒

3107
01:18:00,000 --> 01:18:02,000
然后酒上有一个什么防伪标签

3108
01:18:02,000 --> 01:18:04,000
然后说你打电话到某某地方

3109
01:18:04,000 --> 01:18:05,000
查这个标签是不是真的

3110
01:18:05,000 --> 01:18:07,000
类似于这样一个东西

3111
01:18:07,000 --> 01:18:07,000
对

3112
01:18:07,000 --> 01:18:09,000
这个解释好像非常的合适

3113
01:18:09,000 --> 01:18:11,000
几乎是一模一样的一个机制

3114
01:18:11,000 --> 01:18:12,000
因为就是 OCSP 的

3115
01:18:12,000 --> 01:18:14,000
它那个验证的那个网址

3116
01:18:14,000 --> 01:18:15,000
实际上是在证书内部

3117
01:18:15,000 --> 01:18:16,000
就是它翻译证书的时候

3118
01:18:16,000 --> 01:18:17,000
就告诉你

3119
01:18:17,000 --> 01:18:18,000
你要是想查这个证书的真伪

3120
01:18:18,000 --> 01:18:19,000
你要去哪哪查

3121
01:18:19,000 --> 01:18:20,000
对

3122
01:18:20,000 --> 01:18:24,000
所以它这次我们就苹果

3123
01:18:24,000 --> 01:18:26,000
这次遇到的一个问题是说

3124
01:18:26,000 --> 01:18:29,000
因为这个新发的这个 MacOS Big Sur

3125
01:18:29,000 --> 01:18:32,000
这个 11 版本 11 的这个新系统

3126
01:18:32,000 --> 01:18:36,000
大规模的人去通过 OCSP 的方式

3127
01:18:36,000 --> 01:18:38,000
去查这个应用证书

3128
01:18:38,000 --> 01:18:40,000
因为你从已经换了新系统

3129
01:18:40,000 --> 01:18:41,000
然后你都要去

3130
01:18:41,000 --> 01:18:42,000
你开每一个程序的时候

3131
01:18:42,000 --> 01:18:44,000
都要先检查一遍这个东西

3132
01:18:44,000 --> 01:18:47,000
导致苹果的这个 OCSP 服务器被

3133
01:18:47,000 --> 01:18:49,000
等于是他自己被自己 DDoS 了

3134
01:18:49,000 --> 01:18:50,000
拒绝服务攻击了

3135
01:18:50,000 --> 01:18:51,000
导致它缓慢

3136
01:18:51,000 --> 01:18:53,000
然后导致所有人

3137
01:18:53,000 --> 01:18:55,000
所有的这个 Mac 程序都启动不了

3138
01:18:55,000 --> 01:18:57,000
就因为都在等这个查询的结果

3139
01:18:57,000 --> 01:18:58,000
那就这里面可能有个

3140
01:18:58,000 --> 01:19:00,000
挑选的地方就在于

3141
01:19:00,000 --> 01:19:02,000
为什么每次启动 Mac 程序

3142
01:19:02,000 --> 01:19:04,000
之前需要去检查一下这个证书

3143
01:19:04,000 --> 01:19:06,000
就苹果做这个东西的目的是什么

3144
01:19:06,000 --> 01:19:08,000
这个的话最早的时候

3145
01:19:08,000 --> 01:19:10,000
其实就是一种安全的机制

3146
01:19:10,000 --> 01:19:12,000
就是这个类似的机制的话

3147
01:19:12,000 --> 01:19:15,000
就是在可能公众一般理解起来

3148
01:19:15,000 --> 01:19:17,000
更简单的一个说法叫数字签名

3149
01:19:17,000 --> 01:19:18,000
在 Windows 上也有

3150
01:19:18,000 --> 01:19:21,000
可能背后逻辑是这样的

3151
01:19:21,000 --> 01:19:22,000
就是因为有恶意软件

3152
01:19:22,000 --> 01:19:24,000
那么我就要求你们每个人

3153
01:19:24,000 --> 01:19:25,000
分发软件的时候

3154
01:19:25,000 --> 01:19:27,000
必须都给这个软件加上一个签名

3155
01:19:27,000 --> 01:19:29,000
就是这个所谓的证书

3156
01:19:29,000 --> 01:19:29,000
对吧

3157
01:19:29,000 --> 01:19:31,000
就你签完名得到一个证书

3158
01:19:31,000 --> 01:19:31,000
对

3159
01:19:31,000 --> 01:19:33,000
我才能认为这个软件是一个

3160
01:19:33,000 --> 01:19:34,000
相对安全的软件

3161
01:19:34,000 --> 01:19:36,000
我才能允许你打开

3162
01:19:36,000 --> 01:19:38,000
然后背后对心的逻辑就是

3163
01:19:38,000 --> 01:19:41,000
这个证书的获取是有一定的门槛和难度的

3164
01:19:41,000 --> 01:19:42,000
对于 Mac 来说的话

3165
01:19:42,000 --> 01:19:43,000
就是你的证书

3166
01:19:43,000 --> 01:19:45,000
就是你的苹果开发者账号证书

3167
01:19:45,000 --> 01:19:48,000
首先你要付钱才能买到要 99 刀

3168
01:19:48,000 --> 01:19:51,000
你对于 99 刀这么一个成本上来说的话

3169
01:19:51,000 --> 01:19:54,000
假如说你要非常大的广泛的去撒网的话的话

3170
01:19:54,000 --> 01:19:56,000
你想每一个分发都用不同的证书

3171
01:19:56,000 --> 01:19:58,000
几乎是不可能接受的一个成本

3172
01:19:58,000 --> 01:20:01,000
另外就是你在注册账号的时候

3173
01:20:01,000 --> 01:20:02,000
是需要提供信息的

3174
01:20:02,000 --> 01:20:03,000
支付的时候也是需要

3175
01:20:03,000 --> 01:20:05,000
暴露你的支付的信息的

3176
01:20:05,000 --> 01:20:08,000
假如说真的是之后需要跟你求后算账

3177
01:20:08,000 --> 01:20:09,000
你是个恶意软件

3178
01:20:09,000 --> 01:20:11,000
那么是有证据可以去追寻的

3179
01:20:11,000 --> 01:20:13,000
就抓到你本人对吧

3180
01:20:13,000 --> 01:20:15,000
比如说 Surg 我们是可以找得到

3181
01:20:15,000 --> 01:20:16,000
苹果是找得到你在哪的

3182
01:20:16,000 --> 01:20:16,000
对吧

3183
01:20:16,000 --> 01:20:17,000
对是的

3184
01:20:17,000 --> 01:20:18,000
你在哪里注册

3185
01:20:18,000 --> 01:20:20,000
你的法律主体是什么都能找得到

3186
01:20:20,000 --> 01:20:23,000
就这个证据是包含着这些信息

3187
01:20:23,000 --> 01:20:23,000
对是的

3188
01:20:23,000 --> 01:20:26,000
除非从苹果给你认证过

3189
01:20:26,000 --> 01:20:29,000
你是不可能自己伪造一个默认情况下

3190
01:20:29,000 --> 01:20:31,000
被苹果设备信任的证书的

3191
01:20:31,000 --> 01:20:33,000
对这个是算法层面决定的

3192
01:20:33,000 --> 01:20:35,000
当然这个你应该比我懂得多

3193
01:20:35,000 --> 01:20:36,000
你可以给大家克服

3194
01:20:36,000 --> 01:20:39,000
这个我们下次再解释

3195
01:20:39,000 --> 01:20:41,000
但是我们从实用性的解释的时候

3196
01:20:41,000 --> 01:20:46,000
就说你是不可能伪造一个苹果签发给你的证书的

3197
01:20:46,000 --> 01:20:47,000
这个是这两个人是可以保证的

3198
01:20:47,000 --> 01:20:48,000
那么对

3199
01:20:48,000 --> 01:20:53,000
在这个证书技术上再做 OCSP 的原因是

3200
01:20:53,000 --> 01:20:56,000
我猜想是不是说苹果认为

3201
01:20:56,000 --> 01:20:59,000
我即使发给你一个可信的证书

3202
01:20:59,000 --> 01:21:00,000
但是你作为一个开发者

3203
01:21:00,000 --> 01:21:03,000
也有可能拿这个证书来分发恶意软件

3204
01:21:03,000 --> 01:21:03,000
对不对

3205
01:21:03,000 --> 01:21:04,000
对是的

3206
01:21:04,000 --> 01:21:06,000
或者说你先翻发了一个正常软件

3207
01:21:06,000 --> 01:21:08,000
但是你可能潜伏一段时间

3208
01:21:08,000 --> 01:21:11,000
才启用你软件里面的恶意的功能

3209
01:21:11,000 --> 01:21:13,000
这个时候苹果需要一个手段说

3210
01:21:13,000 --> 01:21:16,000
即便我签发了一个可信的证书

3211
01:21:16,000 --> 01:21:18,000
给这个软件的开发者

3212
01:21:18,000 --> 01:21:20,000
他用这个证书给他的程序签了名

3213
01:21:20,000 --> 01:21:23,000
我也要有一个所谓的叫 Kill Switch

3214
01:21:23,000 --> 01:21:24,000
对吧

3215
01:21:24,000 --> 01:21:24,000
就是库克上

3216
01:21:24,000 --> 01:21:26,000
听不口的黑

3217
01:21:26,000 --> 01:21:26,000
按个键

3218
01:21:26,000 --> 01:21:27,000
老板键

3219
01:21:27,000 --> 01:21:28,000
老板键说禁止这个软件

3220
01:21:28,000 --> 01:21:31,000
在苹果设备上运行

3221
01:21:31,000 --> 01:21:33,000
因为它现在是一个恶意软件

3222
01:21:33,000 --> 01:21:34,000
它有一些隐藏的功能

3223
01:21:34,000 --> 01:21:35,000
我们当时是不知道的

3224
01:21:35,000 --> 01:21:36,000
没错

3225
01:21:36,000 --> 01:21:36,000
是的

3226
01:21:36,000 --> 01:21:37,000
这是一种可能

3227
01:21:37,000 --> 01:21:38,000
还有另外一种可能是

3228
01:21:38,000 --> 01:21:39,000
比如说开发者

3229
01:21:39,000 --> 01:21:40,000
他不小心把它证书泄漏了

3230
01:21:40,000 --> 01:21:42,000
然后被公众所知道

3231
01:21:42,000 --> 01:21:43,000
这个时候大家谁都可以用的

3232
01:21:43,000 --> 01:21:45,000
那这也是需要把它阻销掉

3233
01:21:45,000 --> 01:21:46,000
你把钥匙丢了

3234
01:21:46,000 --> 01:21:47,000
需要整个

3235
01:21:47,000 --> 01:21:48,000
导致整个楼都要换锁

3236
01:21:48,000 --> 01:21:50,000
是的

3237
01:21:50,000 --> 01:21:52,000
这个 OCSP 其实是为了

3238
01:21:52,000 --> 01:21:53,000
从本质上来讲

3239
01:21:53,000 --> 01:21:56,000
它还是为了保障用户的安全性考虑

3240
01:21:56,000 --> 01:21:59,000
所以说在每次一个应用程序

3241
01:21:59,000 --> 01:22:01,000
起动之前都去检查一下

3242
01:22:01,000 --> 01:22:02,000
这个应用程序签评的证书

3243
01:22:02,000 --> 01:22:05,000
是否被吊销过了

3244
01:22:05,000 --> 01:22:05,000
如果它被吊销过的话

3245
01:22:05,000 --> 01:22:06,000
这个程序就不能启动

3246
01:22:06,000 --> 01:22:07,000
对吧

3247
01:22:07,000 --> 01:22:09,000
其实还有一点偏差

3248
01:22:09,000 --> 01:22:10,000
就是它也不是每次

3249
01:22:10,000 --> 01:22:11,000
系统都会检查

3250
01:22:11,000 --> 01:22:13,000
一般它还是有一个时间的缓存

3251
01:22:13,000 --> 01:22:14,000
隔一段时间

3252
01:22:14,000 --> 01:22:15,000
可能一两天

3253
01:22:15,000 --> 01:22:17,000
我到这没有具体测了

3254
01:22:17,000 --> 01:22:17,000
可能是几天

3255
01:22:17,000 --> 01:22:18,000
可能是几个小时

3256
01:22:18,000 --> 01:22:19,000
这么一个时间

3257
01:22:19,000 --> 01:22:20,000
然后它就会需要

3258
01:22:20,000 --> 01:22:21,000
重新去检查一下

3259
01:22:21,000 --> 01:22:24,000
而且甚至有可能

3260
01:22:24,000 --> 01:22:25,000
当然这个也是推测

3261
01:22:25,000 --> 01:22:25,000
不能确定

3262
01:22:25,000 --> 01:22:27,000
苹果压根没有考虑

3263
01:22:27,000 --> 01:22:30,000
OCSP 在 App 包的验证上

3264
01:22:30,000 --> 01:22:31,000
这件事情

3265
01:22:31,000 --> 01:22:32,000
因为整个系统

3266
01:22:32,000 --> 01:22:33,000
关于证书

3267
01:22:33,000 --> 01:22:35,000
数字签名的验证的东西

3268
01:22:35,000 --> 01:22:35,000
都是用的是

3269
01:22:35,000 --> 01:22:37,000
同一套公优体系

3270
01:22:37,000 --> 01:22:40,000
然后在开发者上面的话

3271
01:22:40,000 --> 01:22:41,000
应该是 security free mark

3272
01:22:41,000 --> 01:22:43,000
然后这套体系的话

3273
01:22:43,000 --> 01:22:44,000
既会没有拿来验证

3274
01:22:44,000 --> 01:22:46,000
HTPS 你访问的网站

3275
01:22:46,000 --> 01:22:47,000
是否是合理法的

3276
01:22:47,000 --> 01:22:48,000
也会来验证

3277
01:22:48,000 --> 01:22:51,000
开发者签名的应用包

3278
01:22:51,000 --> 01:22:52,000
是否是合法的

3279
01:22:52,000 --> 01:22:53,000
所以说他可能

3280
01:22:53,000 --> 01:22:54,000
也根本没有想那么多细节

3281
01:22:54,000 --> 01:22:55,000
就直接把那个东西

3282
01:22:55,000 --> 01:22:56,000
搬过来在这用了

3283
01:22:56,000 --> 01:22:57,000
OK

3284
01:22:57,000 --> 01:22:58,000
如果你电脑是在

3285
01:22:58,000 --> 01:23:00,000
没联网的状态下

3286
01:23:00,000 --> 01:23:01,000
这个 OCSP

3287
01:23:01,000 --> 01:23:02,000
它是可以直接

3288
01:23:02,000 --> 01:23:03,000
就直接失败

3289
01:23:03,000 --> 01:23:04,000
其实是不影响你其中的

3290
01:23:04,000 --> 01:23:05,000
对不对

3291
01:23:05,000 --> 01:23:05,000
对

3292
01:23:05,000 --> 01:23:06,000
这其实是 OCSP

3293
01:23:06,000 --> 01:23:08,000
协议本身设计的时候

3294
01:23:08,000 --> 01:23:08,000
我们就有问题

3295
01:23:08,000 --> 01:23:09,000
但这个问题

3296
01:23:09,000 --> 01:23:10,000
好像从理论上

3297
01:23:10,000 --> 01:23:11,000
我印象中之前讨论

3298
01:23:11,000 --> 01:23:12,000
是不可能解决的

3299
01:23:12,000 --> 01:23:14,000
就是假如说黑客

3300
01:23:14,000 --> 01:23:14,000
恶意的

3301
01:23:14,000 --> 01:23:16,000
他能够控制你的链路

3302
01:23:16,000 --> 01:23:17,000
他能阻止你的查询

3303
01:23:17,000 --> 01:23:18,000
那怎么办

3304
01:23:18,000 --> 01:23:19,000
就不准你去检查

3305
01:23:19,000 --> 01:23:20,000
OCSP 对吧

3306
01:23:20,000 --> 01:23:21,000
对

3307
01:23:21,000 --> 01:23:24,000
你因为不太能够说

3308
01:23:24,000 --> 01:23:25,000
你这个 OCSP 访问失败

3309
01:23:25,000 --> 01:23:26,000
我就不允许继续

3310
01:23:26,000 --> 01:23:28,000
因为访问失败

3311
01:23:28,000 --> 01:23:28,000
这件事情

3312
01:23:28,000 --> 01:23:29,000
太多因素了

3313
01:23:29,000 --> 01:23:29,000
对

3314
01:23:29,000 --> 01:23:31,000
太多因素了

3315
01:23:31,000 --> 01:23:32,000
在网络上各种方面

3316
01:23:32,000 --> 01:23:33,000
都还是可能的

3317
01:23:33,000 --> 01:23:34,000
我自己观察的话

3318
01:23:34,000 --> 01:23:36,000
是系统会重视五次

3319
01:23:36,000 --> 01:23:38,000
你如果这个连接失败的话

3320
01:23:38,000 --> 01:23:38,000
他会在后台

3321
01:23:38,000 --> 01:23:39,000
自动重视五次

3322
01:23:39,000 --> 01:23:40,000
如果五次之后

3323
01:23:40,000 --> 01:23:41,000
都还是无法访问的话

3324
01:23:41,000 --> 01:23:43,000
他就不管了

3325
01:23:43,000 --> 01:23:43,000
他就继续运行

3326
01:23:43,000 --> 01:23:44,000
那所以这里面

3327
01:23:44,000 --> 01:23:45,000
有个非常简单

3328
01:23:45,000 --> 01:23:46,000
直白的问题了

3329
01:23:46,000 --> 01:23:47,000
就是说

3330
01:23:47,000 --> 01:23:48,000
如果他 OCSP 检查

3331
01:23:48,000 --> 01:23:49,000
默认就是说

3332
01:23:49,000 --> 01:23:50,000
如果网络不通的情况下

3333
01:23:50,000 --> 01:23:52,000
他也能够就放过

3334
01:23:52,000 --> 01:23:53,000
不检查

3335
01:23:53,000 --> 01:23:54,000
然后就让这次先集中

3336
01:23:54,000 --> 01:23:55,000
以后再说

3337
01:23:55,000 --> 01:23:56,000
它是不会影响用户使用的

3338
01:23:56,000 --> 01:23:58,000
那为什么这次会导致

3339
01:23:58,000 --> 01:23:59,000
这么大规模的

3340
01:23:59,000 --> 01:24:00,000
又不能启动呢

3341
01:24:00,000 --> 01:24:01,000
它的问题在于

3342
01:24:01,000 --> 01:24:03,000
他没有服务器直接说

3343
01:24:03,000 --> 01:24:04,000
我不行了

3344
01:24:04,000 --> 01:24:05,000
而是服务器被 DDoS

3345
01:24:05,000 --> 01:24:06,000
没有响应

3346
01:24:06,000 --> 01:24:06,000
所以说

3347
01:24:06,000 --> 01:24:08,000
在等着他服务器说话

3348
01:24:08,000 --> 01:24:09,000
OK

3349
01:24:09,000 --> 01:24:10,000
这个代表就非常傻

3350
01:24:10,000 --> 01:24:12,000
如果说你正常加个什么

3351
01:24:12,000 --> 01:24:12,000
加个 Timer

3352
01:24:12,000 --> 01:24:13,000
有一个 Timer

3353
01:24:13,000 --> 01:24:14,000
比如说五秒之后

3354
01:24:14,000 --> 01:24:15,000
还没有成功

3355
01:24:15,000 --> 01:24:16,000
你就直接放弃了

3356
01:24:16,000 --> 01:24:17,000
就是其实也不会导致

3357
01:24:17,000 --> 01:24:18,000
这么多的问题

3358
01:24:18,000 --> 01:24:18,000
对吧

3359
01:24:18,000 --> 01:24:19,000
但实际上等待五秒

3360
01:24:19,000 --> 01:24:21,000
也是相当长的一件事

3361
01:24:21,000 --> 01:24:22,000
Timer 应该是有的

3362
01:24:22,000 --> 01:24:23,000
我觉得应该不止五秒

3363
01:24:23,000 --> 01:24:25,000
可能那个 Timer

3364
01:24:25,000 --> 01:24:26,000
我没有实际遇到

3365
01:24:26,000 --> 01:24:27,000
它真正当机的

3366
01:24:27,000 --> 01:24:28,000
那个时间那个事情了

3367
01:24:28,000 --> 01:24:29,000
就是我没有观测到

3368
01:24:29,000 --> 01:24:30,000
它的倒计是多少秒

3369
01:24:30,000 --> 01:24:32,000
但是应该不止五秒

3370
01:24:32,000 --> 01:24:33,000
而且我觉得

3371
01:24:33,000 --> 01:24:34,000
这可能真的是一个

3372
01:24:34,000 --> 01:24:35,000
第一世界

3373
01:24:35,000 --> 01:24:36,000
没有考虑到的问题吧

3374
01:24:36,000 --> 01:24:37,000
对于苹果的工程师

3375
01:24:37,000 --> 01:24:39,000
坐在苹果的网络里面

3376
01:24:39,000 --> 01:24:40,000
从来都不会觉得

3377
01:24:40,000 --> 01:24:41,000
执行一个网络请求

3378
01:24:41,000 --> 01:24:43,000
那个堵塞的执行

3379
01:24:43,000 --> 01:24:44,000
一个网络请求会

3380
01:24:44,000 --> 01:24:44,000
还能失败

3381
01:24:44,000 --> 01:24:45,000
对还能失败

3382
01:24:45,000 --> 01:24:46,000
还能卡住

3383
01:24:46,000 --> 01:24:48,000
这不就几毫秒的事情吧

3384
01:24:48,000 --> 01:24:49,000
有什么关系呢

3385
01:24:49,000 --> 01:24:50,000
对关系就是说

3386
01:24:50,000 --> 01:24:51,000
如果它是直接失败

3387
01:24:51,000 --> 01:24:52,000
反而对了

3388
01:24:52,000 --> 01:24:53,000
反而如果是直接失败

3389
01:24:53,000 --> 01:24:54,000
就是网络不通的情况下

3390
01:24:54,000 --> 01:24:55,000
它反而也不会出

3391
01:24:55,000 --> 01:24:56,000
什么大大问题

3392
01:24:56,000 --> 01:24:56,000
它处于这种

3393
01:24:56,000 --> 01:24:58,000
对直接 502 之类的

3394
01:24:58,000 --> 01:24:59,000
就可以了

3395
01:24:59,000 --> 01:25:01,000
对但这是属于那种

3396
01:25:01,000 --> 01:25:01,000
就是它那边

3397
01:25:01,000 --> 01:25:03,000
服务器响应非常非常慢

3398
01:25:03,000 --> 01:25:04,000
大家说我还

3399
01:25:04,000 --> 01:25:05,000
我还正在努力中

3400
01:25:05,000 --> 01:25:06,000
对吧

3401
01:25:06,000 --> 01:25:07,000
你不要放弃

3402
01:25:07,000 --> 01:25:08,000
这种感觉

3403
01:25:08,000 --> 01:25:08,000
就很

3404
01:25:08,000 --> 01:25:10,000
但即便是这样

3405
01:25:10,000 --> 01:25:12,000
即便是这种失败场景

3406
01:25:12,000 --> 01:25:12,000
它如果说

3407
01:25:12,000 --> 01:25:14,000
它是就是这个 OCSP

3408
01:25:14,000 --> 01:25:14,000
它是一个

3409
01:25:14,000 --> 01:25:15,000
我们说什么的

3410
01:25:15,000 --> 01:25:16,000
叫做异步的

3411
01:25:16,000 --> 01:25:17,000
就是说它

3412
01:25:17,000 --> 01:25:18,000
它检查 OCSP 和

3413
01:25:18,000 --> 01:25:21,000
和这个让你启动 APP

3414
01:25:21,000 --> 01:25:21,000
它是两个

3415
01:25:21,000 --> 01:25:24,000
不需要前后有依赖关系的

3416
01:25:24,000 --> 01:25:25,000
这个逻辑步骤

3417
01:25:25,000 --> 01:25:26,000
它其实也不会导致

3418
01:25:26,000 --> 01:25:27,000
这个问题

3419
01:25:27,000 --> 01:25:27,000
对吧

3420
01:25:27,000 --> 01:25:28,000
就是说你启动是启动的

3421
01:25:28,000 --> 01:25:29,000
能检查检查

3422
01:25:29,000 --> 01:25:30,000
你可以下次再

3423
01:25:30,000 --> 01:25:32,000
告诉我这个结果

3424
01:25:32,000 --> 01:25:33,000
或者说你检查好了之后

3425
01:25:33,000 --> 01:25:34,000
你弹个小窗出来

3426
01:25:34,000 --> 01:25:35,000
说这个程序

3427
01:25:35,000 --> 01:25:36,000
刚才我检查失败了

3428
01:25:36,000 --> 01:25:37,000
但是你已经把它打开了

3429
01:25:37,000 --> 01:25:38,000
我现在警告你说

3430
01:25:38,000 --> 01:25:39,000
这个已经被调下了

3431
01:25:39,000 --> 01:25:39,000
可能有问题

3432
01:25:39,000 --> 01:25:40,000
你赶紧推出来

3433
01:25:40,000 --> 01:25:40,000
对吧

3434
01:25:40,000 --> 01:25:41,000
也是可以的

3435
01:25:41,000 --> 01:25:41,000
对

3436
01:25:41,000 --> 01:25:43,000
但是它连这个也没有做

3437
01:25:43,000 --> 01:25:45,000
对

3438
01:25:45,000 --> 01:25:46,000
而且这个问题的话

3439
01:25:46,000 --> 01:25:47,000
可能导致了

3440
01:25:47,000 --> 01:25:49,000
在国内绝大部分用户

3441
01:25:49,000 --> 01:25:50,000
他觉得 Mac 缓慢的

3442
01:25:50,000 --> 01:25:51,000
一个很大的问题

3443
01:25:51,000 --> 01:25:52,000
就有的时候

3444
01:25:52,000 --> 01:25:53,000
我们会打开我们的 Mac

3445
01:25:53,000 --> 01:25:54,000
然后剪开个 App

3446
01:25:54,000 --> 01:25:55,000
或者看那图标

3447
01:25:55,000 --> 01:25:56,000
在那谈谈谈谈谈

3448
01:25:56,000 --> 01:25:57,000
谈个 10 秒

3449
01:25:57,000 --> 01:25:58,000
其实一直在跳

3450
01:25:58,000 --> 01:25:58,000
对吧

3451
01:25:58,000 --> 01:25:58,000
对

3452
01:25:58,000 --> 01:26:01,000
不是一个很罕见的事情

3453
01:26:01,000 --> 01:26:03,000
就是在检查这个证数

3454
01:26:03,000 --> 01:26:04,000
它网络不长

3455
01:26:04,000 --> 01:26:05,000
对

3456
01:26:05,000 --> 01:26:05,000
所以就是说

3457
01:26:05,000 --> 01:26:06,000
这本质上是一个

3458
01:26:06,000 --> 01:26:08,000
软件架构设计的失误

3459
01:26:08,000 --> 01:26:10,000
再加上网络技术设施

3460
01:26:10,000 --> 01:26:12,000
因为一些外部

3461
01:26:12,000 --> 01:26:13,000
或者是不可预测的因素

3462
01:26:13,000 --> 01:26:15,000
导致变得缓慢

3463
01:26:15,000 --> 01:26:16,000
而不是完全不可用的情况下

3464
01:26:16,000 --> 01:26:18,000
双重压力

3465
01:26:18,000 --> 01:26:19,000
导致的一个用户

3466
01:26:19,000 --> 01:26:21,000
使用体验的重大的问题

3467
01:26:21,000 --> 01:26:21,000
对

3468
01:26:21,000 --> 01:26:22,000
是的

3469
01:26:22,000 --> 01:26:23,000
所以就是还是要把

3470
01:26:23,000 --> 01:26:24,000
这个苹果的架构的

3471
01:26:24,000 --> 01:26:25,000
就是负责这块架构的人

3472
01:26:25,000 --> 01:26:27,000
拖出来打板子才行

3473
01:26:27,000 --> 01:26:27,000
对

3474
01:26:27,000 --> 01:26:28,000
我觉得很可能就是

3475
01:26:28,000 --> 01:26:30,000
之前没有想过这件事情

3476
01:26:30,000 --> 01:26:31,000
在他们那儿

3477
01:26:31,000 --> 01:26:32,000
从来没有遇到过这件事情

3478
01:26:32,000 --> 01:26:33,000
那这个坑埋在那儿

3479
01:26:33,000 --> 01:26:34,000
就一直没人管

3480
01:26:34,000 --> 01:26:35,000
其实这个坑

3481
01:26:35,000 --> 01:26:37,000
应该埋了相当长的时间了

3482
01:26:37,000 --> 01:26:38,000
很大

3483
01:26:38,000 --> 01:26:39,000
很多年以前

3484
01:26:39,000 --> 01:26:41,000
就已经是这么一个工作方式

3485
01:26:41,000 --> 01:26:42,000
这引入 LCSB

3486
01:26:42,000 --> 01:26:43,000
我记得应该是至少

3487
01:26:43,000 --> 01:26:45,000
可能是三到五个版本以前了

3488
01:26:45,000 --> 01:26:45,000
对吧

3489
01:26:45,000 --> 01:26:46,000
大版本以前了

3490
01:26:46,000 --> 01:26:46,000
对

3491
01:26:46,000 --> 01:26:47,000
我作为开发者

3492
01:26:47,000 --> 01:26:49,000
我自己观察后台请求

3493
01:26:49,000 --> 01:26:50,000
我早就是看到后台

3494
01:26:50,000 --> 01:26:52,000
不断的就是 OCSB 的请求

3495
01:26:52,000 --> 01:26:53,000
会在就会有在

3496
01:26:53,000 --> 01:26:54,000
一直在那个进行的

3497
01:26:54,000 --> 01:26:56,000
OCSB 是会直接

3498
01:26:56,000 --> 01:26:57,000
发到开发者那里去的吗

3499
01:26:57,000 --> 01:26:58,000
不是会发到开发者

3500
01:26:58,000 --> 01:27:00,000
他发的应该是

3501
01:27:00,000 --> 01:27:02,000
证书的那个颁发者那里去查

3502
01:27:02,000 --> 01:27:02,000
应该是

3503
01:27:02,000 --> 01:27:04,000
我从设置上面看网络流量

3504
01:27:04,000 --> 01:27:05,000
我是能看到它的评持的

3505
01:27:05,000 --> 01:27:06,000
你是从中间沿着角度去看它

3506
01:27:06,000 --> 01:27:07,000
对

3507
01:27:07,000 --> 01:27:07,000
是的

3508
01:27:07,000 --> 01:27:08,000
我能看到它的请求

3509
01:27:08,000 --> 01:27:09,000
然后因为它那个请求

3510
01:27:09,000 --> 01:27:10,000
本身是 HTP

3511
01:27:10,000 --> 01:27:11,000
是明文的

3512
01:27:11,000 --> 01:27:12,000
所以说你能看到它们的信息

3513
01:27:12,000 --> 01:27:14,000
所以这也是导致这一次

3514
01:27:14,000 --> 01:27:16,000
大家对它在隐私方面的

3515
01:27:16,000 --> 01:27:16,000
一个泄露上的

3516
01:27:16,000 --> 01:27:17,000
一个批评的一个原因

3517
01:27:19,000 --> 01:27:20,000
是不可用吗

3518
01:27:20,000 --> 01:27:21,000
这个还是说是一个

3519
01:27:21,000 --> 01:27:22,000
用户体验的问题

3520
01:27:22,000 --> 01:27:23,000
可能相对来说

3521
01:27:23,000 --> 01:27:26,000
如果它把这个架构改一下

3522
01:27:26,000 --> 01:27:27,000
比如说它做成一步的

3523
01:27:27,000 --> 01:27:27,000
对吧

3524
01:27:27,000 --> 01:27:29,000
不需要跟那个启动

3525
01:27:29,000 --> 01:27:31,000
这个启动应用程序之间

3526
01:27:31,000 --> 01:27:32,000
产生一个绑定关系

3527
01:27:32,000 --> 01:27:33,000
那可能也还好

3528
01:27:33,000 --> 01:27:36,000
但可能这更要紧的是

3529
01:27:36,000 --> 01:27:38,000
就是说它在 OCSB 检查过程中

3530
01:27:38,000 --> 01:27:40,000
暴露出来的一些

3531
01:27:40,000 --> 01:27:42,000
更侵犯隐私的事情

3532
01:27:42,000 --> 01:27:43,000
比如说它说我们

3533
01:27:43,000 --> 01:27:44,000
我现在不太清楚

3534
01:27:44,000 --> 01:27:45,000
是不是这么一回事

3535
01:27:45,000 --> 01:27:47,000
我看到的这个说法是说

3536
01:27:47,000 --> 01:27:49,000
它在 OCSB 请求室

3537
01:27:49,000 --> 01:27:51,000
通过 HTTP 名文发送的

3538
01:27:51,000 --> 01:27:52,000
没有走 HTPS

3539
01:27:52,000 --> 01:27:54,000
这个供我们目前主流的

3540
01:27:54,000 --> 01:27:57,000
只要是通过这个互联网传输的信息

3541
01:27:57,000 --> 01:27:59,000
都尽可能加密的方式来做

3542
01:27:59,000 --> 01:28:01,000
这种做法是违背的

3543
01:28:01,000 --> 01:28:02,000
就是其一

3544
01:28:02,000 --> 01:28:03,000
第二就是说

3545
01:28:03,000 --> 01:28:04,000
它在这个名文的

3546
01:28:04,000 --> 01:28:06,000
这个 OCSB 的请求里面

3547
01:28:06,000 --> 01:28:09,000
还附带了你

3548
01:28:09,000 --> 01:28:10,000
就是它要检查

3549
01:28:10,000 --> 01:28:11,000
那个 APP 的一个哈希

3550
01:28:11,000 --> 01:28:12,000
这个所谓的哈希

3551
01:28:12,000 --> 01:28:14,000
就是说可以唯一判定说

3552
01:28:14,000 --> 01:28:16,000
你是否在

3553
01:28:16,000 --> 01:28:17,000
不是哈希是 SN

3554
01:28:17,000 --> 01:28:18,000
是那个证书的 SN

3555
01:28:18,000 --> 01:28:20,000
证书的 SN 是证书的序列号

3556
01:28:20,000 --> 01:28:20,000
对吧

3557
01:28:20,000 --> 01:28:21,000
对 是的

3558
01:28:21,000 --> 01:28:22,000
但是这个序列号是

3559
01:28:22,000 --> 01:28:23,000
证书唯一的

3560
01:28:23,000 --> 01:28:24,000
对

3561
01:28:24,000 --> 01:28:25,000
假设我有一个证书和

3562
01:28:25,000 --> 01:28:27,000
APP 之间的彩虹表的话

3563
01:28:27,000 --> 01:28:28,000
我是可以反查出来

3564
01:28:28,000 --> 01:28:29,000
这是哪个 APP 的

3565
01:28:29,000 --> 01:28:30,000
都是公开信息

3566
01:28:30,000 --> 01:28:30,000
对吧

3567
01:28:30,000 --> 01:28:31,000
比如说 Surge

3568
01:28:31,000 --> 01:28:31,000
对

3569
01:28:31,000 --> 01:28:32,000
它会有一个 SN

3570
01:28:32,000 --> 01:28:32,000
对吧

3571
01:28:32,000 --> 01:28:33,000
它发了这个 SN 过去

3572
01:28:33,000 --> 01:28:34,000
但如果我只要

3573
01:28:34,000 --> 01:28:36,000
假设我是这个 SP

3574
01:28:36,000 --> 01:28:37,000
或者任何一个中间人

3575
01:28:37,000 --> 01:28:38,000
网络中间人

3576
01:28:38,000 --> 01:28:39,000
我观察到了这个

3577
01:28:39,000 --> 01:28:41,000
明文的 HTPS 的流量

3578
01:28:41,000 --> 01:28:42,000
然后我看到的是

3579
01:28:42,000 --> 01:28:44,000
一个 IP 地址

3580
01:28:44,000 --> 01:28:45,000
就是这个原 IP 地址

3581
01:28:45,000 --> 01:28:46,000
它发向了苹果的

3582
01:28:46,000 --> 01:28:47,000
一个 UCSP 的服务器

3583
01:28:47,000 --> 01:28:49,000
有一个明文的这个包

3584
01:28:49,000 --> 01:28:50,000
包里面含有这个 SN

3585
01:28:50,000 --> 01:28:51,000
那我可以

3586
01:28:51,000 --> 01:28:52,000
百分之百

3587
01:28:52,000 --> 01:28:53,000
精确的都是结论说

3588
01:28:53,000 --> 01:28:54,000
这个 IP 的人

3589
01:28:54,000 --> 01:28:55,000
在用 Surge

3590
01:28:55,000 --> 01:28:56,000
开发者证书

3591
01:28:56,000 --> 01:28:57,000
签发的东西

3592
01:28:57,000 --> 01:28:57,000
对

3593
01:28:57,000 --> 01:28:58,000
但是 Surge

3594
01:28:58,000 --> 01:28:58,000
开发者证书

3595
01:28:58,000 --> 01:28:59,000
因为它只签发了两个东西

3596
01:28:59,000 --> 01:29:00,000
就是 Surge

3597
01:29:00,000 --> 01:29:01,000
和这个 LPass

3598
01:29:01,000 --> 01:29:02,000
这两个 APP

3599
01:29:02,000 --> 01:29:03,000
那它肯定是在用

3600
01:29:03,000 --> 01:29:04,000
其中的两个之一

3601
01:29:04,000 --> 01:29:04,000
对吧

3602
01:29:04,000 --> 01:29:05,000
对 没错

3603
01:29:05,000 --> 01:29:08,000
然后由于绝大部分的

3604
01:29:08,000 --> 01:29:10,000
我们刨开什么微软

3605
01:29:10,000 --> 01:29:11,000
那些什么大公司

3606
01:29:11,000 --> 01:29:13,000
就正常一些中小开发者

3607
01:29:13,000 --> 01:29:13,000
他可能一个

3608
01:29:13,000 --> 01:29:15,000
正确就只开发一个 APP

3609
01:29:15,000 --> 01:29:15,000
其实我们可以

3610
01:29:15,000 --> 01:29:17,000
基本上可以精确的定位到

3611
01:29:17,000 --> 01:29:18,000
这个人是不是在用 Surge

3612
01:29:18,000 --> 01:29:19,000
或者这个人是不是在用

3613
01:29:19,000 --> 01:29:20,000
某某某什么软件

3614
01:29:20,000 --> 01:29:21,000
对吧

3615
01:29:21,000 --> 01:29:22,000
有些比较稍微敏感一点

3616
01:29:22,000 --> 01:29:23,000
敏感一点软件

3617
01:29:23,000 --> 01:29:24,000
就是我们是可以

3618
01:29:24,000 --> 01:29:25,000
明确的知道这件事情的

3619
01:29:25,000 --> 01:29:26,000
对 是的

3620
01:29:26,000 --> 01:29:28,000
所以从这个角度来讲

3621
01:29:28,000 --> 01:29:30,000
这个明文的 OCSP 的请求

3622
01:29:30,000 --> 01:29:32,000
它的确是泄露了用户的隐私

3623
01:29:32,000 --> 01:29:33,000
这个说法是没错的

3624
01:29:33,000 --> 01:29:33,000
对吧

3625
01:29:33,000 --> 01:29:35,000
对 这个说法是没错的

3626
01:29:35,000 --> 01:29:36,000
我们也看到就是

3627
01:29:36,000 --> 01:29:38,000
但这是一篇

3628
01:29:38,000 --> 01:29:41,000
这个是一篇博客里面

3629
01:29:41,000 --> 01:29:42,000
它有专门去解释

3630
01:29:42,000 --> 01:29:45,000
整个底层原理怎么回事

3631
01:29:45,000 --> 01:29:46,000
我们会把这期的

3632
01:29:46,000 --> 01:29:48,000
show notes 里面会贴出这篇

3633
01:29:48,000 --> 01:29:49,000
这文章的连接

3634
01:29:49,000 --> 01:29:50,000
大家可以去

3635
01:29:50,000 --> 01:29:50,000
如果感兴趣

3636
01:29:50,000 --> 01:29:51,000
这个技术世界

3637
01:29:51,000 --> 01:29:52,000
可以去点击来看

3638
01:29:52,000 --> 01:29:53,000
但我们也看到

3639
01:29:53,000 --> 01:29:54,000
就是隔了可能几天之后

3640
01:29:54,000 --> 01:29:56,000
苹果出了一个官方的

3641
01:29:56,000 --> 01:29:57,000
算是一个回应

3642
01:29:57,000 --> 01:29:58,000
它在它的这个

3643
01:29:58,000 --> 01:30:00,000
它的这个 support 配置里面

3644
01:30:00,000 --> 01:30:00,000
叫做

3645
01:30:00,000 --> 01:30:02,000
Safely open apps on your Mac

3646
01:30:02,000 --> 01:30:03,000
就是说在你的

3647
01:30:03,000 --> 01:30:04,000
Mac 是安全的

3648
01:30:04,000 --> 01:30:06,000
打开启应用程序里面

3649
01:30:06,000 --> 01:30:08,000
最下面加了一个 section

3650
01:30:08,000 --> 01:30:09,000
叫做

3651
01:30:09,000 --> 01:30:10,000
叫做这个

3652
01:30:10,000 --> 01:30:12,000
Piracy protection

3653
01:30:12,000 --> 01:30:12,000
隐私保护

3654
01:30:12,000 --> 01:30:13,000
它说

3655
01:30:13,000 --> 01:30:14,000
它做了家里一段话

3656
01:30:14,000 --> 01:30:15,000
它给了三个方法

3657
01:30:15,000 --> 01:30:17,000
它说在明年

3658
01:30:17,000 --> 01:30:19,000
我们会增加几个变化

3659
01:30:19,000 --> 01:30:20,000
一个是说

3660
01:30:20,000 --> 01:30:21,000
通过加密的协议

3661
01:30:21,000 --> 01:30:22,000
去传输这个

3662
01:30:22,000 --> 01:30:24,000
这个 OCSP 的请求

3663
01:30:24,000 --> 01:30:24,000
对吧

3664
01:30:24,000 --> 01:30:25,000
这是其一

3665
01:30:25,000 --> 01:30:26,000
第二就是说

3666
01:30:26,000 --> 01:30:28,000
它有更强的保护措施

3667
01:30:28,000 --> 01:30:29,000
去解决

3668
01:30:29,000 --> 01:30:29,000
刚才我们讲的

3669
01:30:29,000 --> 01:30:30,000
就是说

3670
01:30:30,000 --> 01:30:31,000
如果服务端不可用

3671
01:30:31,000 --> 01:30:33,000
就是各种失败的原因

3672
01:30:33,000 --> 01:30:34,000
出现

3673
01:30:34,000 --> 01:30:35,000
就尽量

3674
01:30:35,000 --> 01:30:37,000
尽量避免

3675
01:30:37,000 --> 01:30:38,000
由于服务器

3676
01:30:38,000 --> 01:30:39,000
或者网络不可用

3677
01:30:39,000 --> 01:30:40,000
而导致不法启动

3678
01:30:40,000 --> 01:30:41,000
这个应用的情况

3679
01:30:41,000 --> 01:30:42,000
对吧

3680
01:30:42,000 --> 01:30:43,000
然后就是说

3681
01:30:43,000 --> 01:30:44,000
还给用户一个选项

3682
01:30:44,000 --> 01:30:45,000
说用户可以

3683
01:30:45,000 --> 01:30:46,000
opt out

3684
01:30:46,000 --> 01:30:46,000
就是可以

3685
01:30:46,000 --> 01:30:48,000
不要这些安全保护措施

3686
01:30:48,000 --> 01:30:50,000
就彻底的保护这个隐私

3687
01:30:50,000 --> 01:30:50,000
对吧

3688
01:30:50,000 --> 01:30:51,000
我就是要罗问

3689
01:30:51,000 --> 01:30:51,000
我就是像

3690
01:30:51,000 --> 01:30:53,000
要像 Windows 一样

3691
01:30:53,000 --> 01:30:54,000
对

3692
01:30:54,000 --> 01:30:55,000
我就不想检查

3693
01:30:55,000 --> 01:30:55,000
对吧

3694
01:30:55,000 --> 01:30:57,000
我就不想给你苹果知道

3695
01:30:57,000 --> 01:30:58,000
我在运行什么样的程序

3696
01:30:58,000 --> 01:30:59,000
虽然说这个说法

3697
01:30:59,000 --> 01:31:00,000
我觉得

3698
01:31:00,000 --> 01:31:01,000
有点奇怪

3699
01:31:01,000 --> 01:31:02,000
就是说

3700
01:31:02,000 --> 01:31:03,000
你都在用苹果的软件

3701
01:31:03,000 --> 01:31:04,000
硬件系统了

3702
01:31:04,000 --> 01:31:05,000
你不想让苹果知道

3703
01:31:05,000 --> 01:31:06,000
这个是不可能的

3704
01:31:06,000 --> 01:31:07,000
对吧

3705
01:31:07,000 --> 01:31:08,000
苹果如果要想知道

3706
01:31:08,000 --> 01:31:09,000
它总有各种方法知道

3707
01:31:09,000 --> 01:31:10,000
你跟它

3708
01:31:10,000 --> 01:31:11,000
你在这里做文章

3709
01:31:11,000 --> 01:31:12,000
是没有用的

3710
01:31:12,000 --> 01:31:14,000
但是我们来看

3711
01:31:14,000 --> 01:31:15,000
就是虽然苹果还没有公布

3712
01:31:15,000 --> 01:31:17,000
它说它具体的解决方案是什么

3713
01:31:17,000 --> 01:31:17,000
那我们

3714
01:31:17,000 --> 01:31:19,000
我们这是一个

3715
01:31:19,000 --> 01:31:20,000
毕竟是个技术节目

3716
01:31:20,000 --> 01:31:21,000
我们来想想

3717
01:31:21,000 --> 01:31:21,000
有哪些方法

3718
01:31:21,000 --> 01:31:22,000
可以避免这个问题

3719
01:31:22,000 --> 01:31:23,000
那首先来看

3720
01:31:23,000 --> 01:31:24,000
我们先说

3721
01:31:24,000 --> 01:31:25,000
刚才也提到了

3722
01:31:25,000 --> 01:31:25,000
就是说

3723
01:31:25,000 --> 01:31:27,000
把这个 OCSP 检查

3724
01:31:27,000 --> 01:31:28,000
和 App 启动的

3725
01:31:28,000 --> 01:31:29,000
这个两个过程

3726
01:31:29,000 --> 01:31:30,000
独立开来

3727
01:31:30,000 --> 01:31:32,000
不要做成是像

3728
01:31:32,000 --> 01:31:34,000
如果因为 OCSP 检查失败

3729
01:31:34,000 --> 01:31:35,000
就就是没有结果

3730
01:31:35,000 --> 01:31:37,000
或者是还在进行中

3731
01:31:37,000 --> 01:31:38,000
就要等它结果才能启动

3732
01:31:38,000 --> 01:31:39,000
这个明显是不合理的

3733
01:31:39,000 --> 01:31:40,000
对吧

3734
01:31:40,000 --> 01:31:40,000
对

3735
01:31:40,000 --> 01:31:41,000
所以就是要

3736
01:31:41,000 --> 01:31:42,000
它

3737
01:31:42,000 --> 01:31:43,000
就 OCSP 它是一个

3738
01:31:43,000 --> 01:31:44,000
应该是一个

3739
01:31:44,000 --> 01:31:47,000
在背景后台去运行的一个东西

3740
01:31:47,000 --> 01:31:49,000
然后前台应用在

3741
01:31:49,000 --> 01:31:50,000
还是正常执行

3742
01:31:50,000 --> 01:31:51,000
不用等待任何网络请求

3743
01:31:51,000 --> 01:31:52,000
然后后来

3744
01:31:52,000 --> 01:31:54,000
如果你 OCSP 检查结果

3745
01:31:54,000 --> 01:31:55,000
你告诉我说

3746
01:31:55,000 --> 01:31:56,000
要不就下次不能用

3747
01:31:56,000 --> 01:31:57,000
或者是你这次不能用

3748
01:31:57,000 --> 01:31:58,000
你直接弹个窗

3749
01:31:58,000 --> 01:31:59,000
或者是给个什么提示

3750
01:31:59,000 --> 01:32:00,000
然后把那个

3751
01:32:00,000 --> 01:32:02,000
那个 APP freeze 住

3752
01:32:02,000 --> 01:32:02,000
也可以对吧

3753
01:32:02,000 --> 01:32:03,000
或者是强行

3754
01:32:03,000 --> 01:32:04,000
杀掉它退出

3755
01:32:04,000 --> 01:32:05,000
给个提示也行

3756
01:32:05,000 --> 01:32:07,000
这种方法就比较简单

3757
01:32:07,000 --> 01:32:09,000
其实我更关心的就是说

3758
01:32:09,000 --> 01:32:10,000
那是否

3759
01:32:10,000 --> 01:32:11,000
或者说如何通过一个

3760
01:32:11,000 --> 01:32:13,000
加密的协议来传输

3761
01:32:13,000 --> 01:32:15,000
这个 OCSP 的检查

3762
01:32:15,000 --> 01:32:16,000
或者说从技术上

3763
01:32:16,000 --> 01:32:17,000
有没有可能就是说

3764
01:32:17,000 --> 01:32:19,000
就是哪怕是我用明文传输

3765
01:32:19,000 --> 01:32:22,000
但是不会泄露用户的

3766
01:32:22,000 --> 01:32:24,000
在用哪个证书的

3767
01:32:24,000 --> 01:32:25,000
或者是在用哪个 APP 的

3768
01:32:25,000 --> 01:32:26,000
这么一个信息

3769
01:32:26,000 --> 01:32:28,000
其实这个问题

3770
01:32:28,000 --> 01:32:29,000
它之所以

3771
01:32:29,000 --> 01:32:31,000
就是 OCSP 有这个问题

3772
01:32:31,000 --> 01:32:34,000
就是因为 OCSP 本是最早就是为 HTPS

3773
01:32:34,000 --> 01:32:36,000
这个请求来设计的

3774
01:32:36,000 --> 01:32:39,000
因为我当我去访问 HTPS 的时候

3775
01:32:39,000 --> 01:32:40,000
这是一个加密连接

3776
01:32:40,000 --> 01:32:42,000
我要去验证这个证出是否有效

3777
01:32:42,000 --> 01:32:45,000
然后我要去执行 OCSP 请求

3778
01:32:45,000 --> 01:32:46,000
如果这个 OCSP 请求

3779
01:32:46,000 --> 01:32:48,000
也是 HTPS 的话

3780
01:32:48,000 --> 01:32:50,000
那它这个请求又该谁来检查呢

3781
01:32:50,000 --> 01:32:51,000
集合弹的问题

3782
01:32:51,000 --> 01:32:52,000
这个说法当然

3783
01:32:52,000 --> 01:32:53,000
我觉得逻辑上是可以理解

3784
01:32:53,000 --> 01:32:54,000
但我觉得

3785
01:32:54,000 --> 01:32:56,000
如果我们不去追求那么的

3786
01:32:56,000 --> 01:32:57,000
百分之百完美的话

3787
01:32:57,000 --> 01:32:59,000
这个我觉得也不是不可以接受

3788
01:32:59,000 --> 01:33:01,000
就是如果说 OCSP 的请求

3789
01:33:01,000 --> 01:33:03,000
它不是每次都要检查的话

3790
01:33:03,000 --> 01:33:04,000
就是如果它可以像

3791
01:33:04,000 --> 01:33:06,000
就是网页的 HTPS 的建设

3792
01:33:06,000 --> 01:33:06,000
也可以议步的话

3793
01:33:06,000 --> 01:33:07,000
它完全可以

3794
01:33:07,000 --> 01:33:09,000
就是说我检查 OCSP 的

3795
01:33:09,000 --> 01:33:12,000
那个 HTPS 请求的 OCSP

3796
01:33:12,000 --> 01:33:13,000
我可以不做

3797
01:33:13,000 --> 01:33:14,000
或者说是我等下次

3798
01:33:14,000 --> 01:33:16,000
或者说等这个

3799
01:33:16,000 --> 01:33:18,000
或者议步来做也可以

3800
01:33:18,000 --> 01:33:19,000
至少让我保证

3801
01:33:19,000 --> 01:33:20,000
这一次的 OCSP 请求

3802
01:33:20,000 --> 01:33:21,000
是可以完成的

3803
01:33:21,000 --> 01:33:22,000
然后我们再来看

3804
01:33:22,000 --> 01:33:24,000
你那个 OCSP 请求

3805
01:33:24,000 --> 01:33:26,000
就是它是两个英国的 OCSP

3806
01:33:26,000 --> 01:33:29,000
它不需要一定是同时完成

3807
01:33:29,000 --> 01:33:31,000
对这个从我的理解上来说的话

3808
01:33:31,000 --> 01:33:33,000
是当时是在 1999 年

3809
01:33:33,000 --> 01:33:35,000
那个时候对隐私的保护的重要性

3810
01:33:35,000 --> 01:33:37,000
没有现在这么强

3811
01:33:37,000 --> 01:33:38,000
然后本身的话

3812
01:33:38,000 --> 01:33:40,000
你通过访问 HTPS 的话

3813
01:33:40,000 --> 01:33:41,000
你通过在列路上

3814
01:33:41,000 --> 01:33:43,000
已经 SNI 已经泄露出

3815
01:33:43,000 --> 01:33:44,000
你的那个访问的域名了

3816
01:33:44,000 --> 01:33:45,000
所以说这个事情

3817
01:33:45,000 --> 01:33:46,000
你访问哪个网站

3818
01:33:46,000 --> 01:33:47,000
这些已经暴露了

3819
01:33:47,000 --> 01:33:48,000
对加不加密

3820
01:33:48,000 --> 01:33:49,000
好像走不走的 HTPS

3821
01:33:49,000 --> 01:33:52,000
关于在 OCSP 请求上的话

3822
01:33:52,000 --> 01:33:53,000
只涉及安全性的问题

3823
01:33:53,000 --> 01:33:54,000
不涉及隐私性的问题

3824
01:33:54,000 --> 01:33:56,000
安全性的问题的话

3825
01:33:56,000 --> 01:33:57,000
在响应结果上

3826
01:33:57,000 --> 01:33:58,000
本身就已经被证书的

3827
01:33:58,000 --> 01:33:59,000
那个数字签名给解决了

3828
01:33:59,000 --> 01:34:01,000
所以说你加 HTPS

3829
01:34:01,000 --> 01:34:02,000
是解决隐私问题

3830
01:34:02,000 --> 01:34:03,000
在 1999 年那个时候

3831
01:34:03,000 --> 01:34:04,000
估计大家

3832
01:34:04,000 --> 01:34:07,000
一是它本身在 TPS 的 SNI 上

3833
01:34:07,000 --> 01:34:08,000
就已经泄露过一次了

3834
01:34:08,000 --> 01:34:09,000
然后二是

3835
01:34:09,000 --> 01:34:11,000
也没有这么特别的去关注

3836
01:34:11,000 --> 01:34:12,000
这个隐私上

3837
01:34:12,000 --> 01:34:13,000
要这么保护的一个事情

3838
01:34:13,000 --> 01:34:14,000
所以说就没有考虑一件事

3839
01:34:14,000 --> 01:34:15,000
这是我的理解

3840
01:34:15,000 --> 01:34:16,000
因为它毕竟

3841
01:34:16,000 --> 01:34:17,000
它是一个 online 的事情

3842
01:34:17,000 --> 01:34:18,000
就是说你一定要联网

3843
01:34:18,000 --> 01:34:19,000
然后你才要

3844
01:34:19,000 --> 01:34:20,000
你本来就要发的东西

3845
01:34:20,000 --> 01:34:22,000
哪怕我不通过 SSP 的看

3846
01:34:22,000 --> 01:34:23,000
我直接看你连去了

3847
01:34:23,000 --> 01:34:25,000
假如我是个中间人

3848
01:34:25,000 --> 01:34:27,000
我直接看你连去了哪个目标的 IP

3849
01:34:27,000 --> 01:34:28,000
我也知道你去访问了什么网站

3850
01:34:28,000 --> 01:34:29,000
对吧

3851
01:34:29,000 --> 01:34:31,000
这个场景跟这个 APP 上面指动

3852
01:34:31,000 --> 01:34:32,000
因为你有些 APP

3853
01:34:32,000 --> 01:34:33,000
你可以是不用联网的

3854
01:34:33,000 --> 01:34:34,000
你就是本地启动一个

3855
01:34:34,000 --> 01:34:36,000
比如说我前面一个随便

3856
01:34:36,000 --> 01:34:37,000
某某某 APP

3857
01:34:37,000 --> 01:34:38,000
但它本来也不需要联网

3858
01:34:38,000 --> 01:34:38,000
对吧

3859
01:34:38,000 --> 01:34:40,000
它就我在本地启动

3860
01:34:40,000 --> 01:34:41,000
但是却通过

3861
01:34:41,000 --> 01:34:43,000
OCSP 这个东西泄露出

3862
01:34:43,000 --> 01:34:44,000
我在开什么程序

3863
01:34:44,000 --> 01:34:45,000
这就很奇怪了

3864
01:34:45,000 --> 01:34:45,000
对不对

3865
01:34:45,000 --> 01:34:45,000
对

3866
01:34:45,000 --> 01:34:47,000
所以就是我的核心观点

3867
01:34:47,000 --> 01:34:48,000
就是苹果偷懒了

3868
01:34:48,000 --> 01:34:49,000
它没想那么多

3869
01:34:49,000 --> 01:34:50,000
就把那边

3870
01:34:50,000 --> 01:34:51,000
现存那个东西

3871
01:34:51,000 --> 01:34:52,000
就拿过来就用了

3872
01:34:52,000 --> 01:34:53,000
没有根本没有考虑过

3873
01:34:53,000 --> 01:34:54,000
这些事情

3874
01:34:54,000 --> 01:34:56,000
你完全可以把整个

3875
01:34:56,000 --> 01:34:57,000
OCSP 验证这一套

3876
01:34:57,000 --> 01:34:58,000
搞到本地之行

3877
01:34:58,000 --> 01:34:59,000
定期在这个

3878
01:34:59,000 --> 01:35:01,000
MacOS 里面更新一套

3879
01:35:01,000 --> 01:35:04,000
苹果从 root certificate 到

3880
01:35:04,000 --> 01:35:08,000
具体到每一个 APP 的证书

3881
01:35:08,000 --> 01:35:09,000
这么一套验证链

3882
01:35:09,000 --> 01:35:11,000
然后你把这个整个验证过程

3883
01:35:11,000 --> 01:35:12,000
放在本地里完成就可以

3884
01:35:12,000 --> 01:35:14,000
这其实就是原来传统的 CRL

3885
01:35:14,000 --> 01:35:16,000
就是提前我把哪些

3886
01:35:16,000 --> 01:35:17,000
被吊销了的东西

3887
01:35:17,000 --> 01:35:18,000
先全部下滑

3888
01:35:18,000 --> 01:35:18,000
在这等着

3889
01:35:18,000 --> 01:35:20,000
然后我只用更新这个就行了

3890
01:35:20,000 --> 01:35:21,000
这个面临的最主要的

3891
01:35:21,000 --> 01:35:23,000
一个限制

3892
01:35:23,000 --> 01:35:24,000
就是说这个列表道理有多大

3893
01:35:24,000 --> 01:35:25,000
我是不知道的

3894
01:35:25,000 --> 01:35:26,000
但如果想来

3895
01:35:26,000 --> 01:35:28,000
这种在 APP 上面

3896
01:35:28,000 --> 01:35:29,000
被吊销证书的情况

3897
01:35:29,000 --> 01:35:30,000
应该还是比较少的

3898
01:35:30,000 --> 01:35:31,000
也不像 web

3899
01:35:31,000 --> 01:35:33,000
它是一个完全开放的状态

3900
01:35:33,000 --> 01:35:35,000
在 Mac 上几乎没有听说过

3901
01:35:35,000 --> 01:35:37,000
有哪个知名的软件

3902
01:35:37,000 --> 01:35:38,000
或者没有见过哪个软件

3903
01:35:38,000 --> 01:35:40,000
或者是安全的什么东西

3904
01:35:40,000 --> 01:35:41,000
被出现过吊销证书的情况

3905
01:35:41,000 --> 01:35:43,000
其实在 iOS 上会很常见

3906
01:35:43,000 --> 01:35:44,000
就是 iOS 的话

3907
01:35:44,000 --> 01:35:47,000
有很多一些黑色产业

3908
01:35:47,000 --> 01:35:48,000
什么的滥用企业分发

3909
01:35:48,000 --> 01:35:50,000
然后去分发了很多的应用

3910
01:35:50,000 --> 01:35:52,000
然后他们一旦苹果

3911
01:35:52,000 --> 01:35:54,000
把他们的企业证书吊销了之后

3912
01:35:54,000 --> 01:35:54,000
就会靠 CSP

3913
01:35:54,000 --> 01:35:56,000
把证书给注销了

3914
01:35:56,000 --> 01:35:56,000
这样的话

3915
01:35:56,000 --> 01:35:57,000
用户的设备上

3916
01:35:57,000 --> 01:35:58,000
那个英勇就直接打开了

3917
01:35:58,000 --> 01:36:00,000
核心就是

3918
01:36:00,000 --> 01:36:02,000
苹果之前没有仔细想过这件事

3919
01:36:02,000 --> 01:36:04,000
没有去仔细考虑

3920
01:36:04,000 --> 01:36:05,000
把证书体系

3921
01:36:05,000 --> 01:36:06,000
用在应用包检查上面

3922
01:36:06,000 --> 01:36:07,000
这些细节上会不会导致问题

3923
01:36:07,000 --> 01:36:08,000
但是如果就是

3924
01:36:08,000 --> 01:36:10,000
它好好的想了

3925
01:36:10,000 --> 01:36:12,000
我该怎么样去做这套逻辑

3926
01:36:12,000 --> 01:36:12,000
做这个流程的话

3927
01:36:12,000 --> 01:36:14,000
应该是有非常多的方案

3928
01:36:14,000 --> 01:36:15,000
能够做出一套

3929
01:36:15,000 --> 01:36:16,000
既保证隐私

3930
01:36:16,000 --> 01:36:18,000
又安全又稳定的一个结果的

3931
01:36:18,000 --> 01:36:20,000
在目前它不用它做任何

3932
01:36:20,000 --> 01:36:21,000
就是额外的工作

3933
01:36:21,000 --> 01:36:23,000
只是简单的把这个

3934
01:36:23,000 --> 01:36:24,000
ocsp

3935
01:36:24,000 --> 01:36:27,000
ocsp.apple.com 这个网站

3936
01:36:27,000 --> 01:36:30,000
强制通过这个 htps 去访问

3937
01:36:30,000 --> 01:36:31,000
也可以解决这个隐私保护

3938
01:36:31,000 --> 01:36:32,000
和不泄露的问题

3939
01:36:32,000 --> 01:36:33,000
你只有苹果知道吗

3940
01:36:33,000 --> 01:36:35,000
中间人是不知道的吗

3941
01:36:35,000 --> 01:36:35,000
对

3942
01:36:35,000 --> 01:36:37,000
理论上应该没问题

3943
01:36:37,000 --> 01:36:39,000
但是从开发者的角度的话

3944
01:36:39,000 --> 01:36:40,000
系统架构上

3945
01:36:40,000 --> 01:36:41,000
我觉得可能会有问题

3946
01:36:41,000 --> 01:36:43,000
因为它本身就把这些东西的

3947
01:36:43,000 --> 01:36:46,000
功能性已经划分成块了

3948
01:36:46,000 --> 01:36:47,000
那么就是那个进程

3949
01:36:47,000 --> 01:36:49,000
可能本身就没办法去再

3950
01:36:49,000 --> 01:36:50,000
自行 htps 了

3951
01:36:50,000 --> 01:36:51,000
不然它就会产生一个循环

3952
01:36:51,000 --> 01:36:53,000
所以我觉得最后结果肯定就是

3953
01:36:53,000 --> 01:36:55,000
它整个机制可能都完全

3954
01:36:55,000 --> 01:36:56,000
给颠覆掉

3955
01:36:56,000 --> 01:36:57,000
然后重新重新一套

3956
01:36:57,000 --> 01:36:58,000
专门为检查 App 证书的

3957
01:36:58,000 --> 01:36:59,000
那种一套体系

3958
01:36:59,000 --> 01:37:01,000
就是既不依赖现有的

3959
01:37:01,000 --> 01:37:03,000
这个 htps 的这个证书体系

3960
01:37:03,000 --> 01:37:05,000
但又可以同时保证安全

3961
01:37:05,000 --> 01:37:05,000
对

3962
01:37:05,000 --> 01:37:06,000
应该是

3963
01:37:06,000 --> 01:37:07,000
就是我觉得就是

3964
01:37:07,000 --> 01:37:08,000
这事可以值得就是

3965
01:37:08,000 --> 01:37:09,000
专门花精力

3966
01:37:09,000 --> 01:37:11,000
就是好好的重新做一套

3967
01:37:11,000 --> 01:37:12,000
而不是就是脱个懒

3968
01:37:12,000 --> 01:37:14,000
然后把 htps 里边的东西

3969
01:37:14,000 --> 01:37:15,000
拿个就直接用

3970
01:37:15,000 --> 01:37:16,000
那它其实如果

3971
01:37:16,000 --> 01:37:16,000
因为我们知道

3972
01:37:16,000 --> 01:37:19,000
它苹果那个都是有自带证书

3973
01:37:19,000 --> 01:37:21,000
它其实用那个 root 证书

3974
01:37:21,000 --> 01:37:22,000
给所有的设备签发一个

3975
01:37:22,000 --> 01:37:24,000
苹果专用的证书

3976
01:37:24,000 --> 01:37:26,000
然后用这个证书去签名

3977
01:37:26,000 --> 01:37:27,000
这个 htps

3978
01:37:27,000 --> 01:37:29,000
那个 ocsp 的请求

3979
01:37:29,000 --> 01:37:30,000
然后再发给加密的时候

3980
01:37:30,000 --> 01:37:31,000
再发给苹果也是可以的

3981
01:37:31,000 --> 01:37:33,000
就这个还是比较简单的

3982
01:37:33,000 --> 01:37:33,000
对

3983
01:37:33,000 --> 01:37:33,000
是的

3984
01:37:33,000 --> 01:37:35,000
就是这样这种改动

3985
01:37:35,000 --> 01:37:36,000
其实很简单

3986
01:37:36,000 --> 01:37:37,000
就是改两下就是改好了

3987
01:37:37,000 --> 01:37:38,000
但是如果要改的话

3988
01:37:38,000 --> 01:37:40,000
那干脆从头再来

3989
01:37:40,000 --> 01:37:40,000
是不是

3990
01:37:40,000 --> 01:37:42,000
就把所有这些事情都考虑清楚

3991
01:37:42,000 --> 01:37:43,000
因为现在的话

3992
01:37:43,000 --> 01:37:45,000
我们可能有隐私问题

3993
01:37:45,000 --> 01:37:47,000
还有就是堵塞问题

3994
01:37:47,000 --> 01:37:48,000
那个隐私问题

3995
01:37:48,000 --> 01:37:49,000
倒是其实确实混淆一下

3996
01:37:49,000 --> 01:37:50,000
怎么样一下的话

3997
01:37:50,000 --> 01:37:51,000
就能够解决了

3998
01:37:51,000 --> 01:37:53,000
那堵塞问题要解决的话

3999
01:37:53,000 --> 01:37:53,000
就一步吗

4000
01:37:53,000 --> 01:37:54,000
对一步

4001
01:37:54,000 --> 01:37:55,000
我在考虑一步的话

4002
01:37:55,000 --> 01:37:57,000
可能没那么简单

4003
01:37:57,000 --> 01:37:59,000
那一步第一次启动的话

4004
01:37:59,000 --> 01:38:00,000
必须得是同步的

4005
01:38:00,000 --> 01:38:01,000
要不是画一个恶意软件

4006
01:38:01,000 --> 01:38:02,000
它已经起来了

4007
01:38:02,000 --> 01:38:03,000
它该干的坏事都干完了

4008
01:38:03,000 --> 01:38:05,000
你现在一步结果来了

4009
01:38:05,000 --> 01:38:06,000
再把它吊销

4010
01:38:06,000 --> 01:38:08,000
你这个已经赶不上这个时间了

4011
01:38:08,000 --> 01:38:08,000
这个是一个问题

4012
01:38:08,000 --> 01:38:10,000
就是你要不要阻止

4013
01:38:10,000 --> 01:38:12,000
或者说你要多大程度上去阻止

4014
01:38:12,000 --> 01:38:14,000
第一个程序

4015
01:38:14,000 --> 01:38:15,000
或者说

4016
01:38:15,000 --> 01:38:15,000
其实你想

4017
01:38:15,000 --> 01:38:16,000
本来这个 OCSP

4018
01:38:16,000 --> 01:38:18,000
就是一个滞后的解决方案

4019
01:38:18,000 --> 01:38:18,000
不管是你说

4020
01:38:18,000 --> 01:38:20,000
你及时去查询

4021
01:38:20,000 --> 01:38:21,000
它也是一个滞后的方案

4022
01:38:21,000 --> 01:38:22,000
因为你始终是要等到

4023
01:38:22,000 --> 01:38:24,000
你发现这个程序

4024
01:38:24,000 --> 01:38:25,000
它是恶意软件之后

4025
01:38:25,000 --> 01:38:27,000
你再才能够去吊销

4026
01:38:27,000 --> 01:38:27,000
它的证书

4027
01:38:27,000 --> 01:38:28,000
然后再通过 OCSP

4028
01:38:28,000 --> 01:38:29,000
发布出去这个东西

4029
01:38:29,000 --> 01:38:31,000
所以我觉得你去

4030
01:38:31,000 --> 01:38:32,000
这个时候你去追求

4031
01:38:32,000 --> 01:38:33,000
所谓的这个及时性

4032
01:38:33,000 --> 01:38:34,000
其实好像意义不是特别大

4033
01:38:34,000 --> 01:38:35,000
对 没错

4034
01:38:35,000 --> 01:38:35,000
是的

4035
01:38:35,000 --> 01:38:38,000
而且现在其实在 10.15

4036
01:38:38,000 --> 01:38:39,000
还是 10.14 开始

4037
01:38:39,000 --> 01:38:41,000
已经又加了新的一层

4038
01:38:41,000 --> 01:38:42,000
那个 No-Renignation

4039
01:38:42,000 --> 01:38:43,000
那个公正的一个机制

4040
01:38:43,000 --> 01:38:46,000
那个和这个证书又是独立的

4041
01:38:46,000 --> 01:38:48,000
这个机制跟 OCSP 还不一样吗

4042
01:38:48,000 --> 01:38:49,000
你这个我一直没有搞明白

4043
01:38:49,000 --> 01:38:50,000
这顺便可以解释一下

4044
01:38:50,000 --> 01:38:52,000
这个证书的这个机制的话

4045
01:38:52,000 --> 01:38:54,000
是持续存在的

4046
01:38:54,000 --> 01:38:55,000
就是这个每次

4047
01:38:55,000 --> 01:38:57,000
用那个超雄启动

4048
01:38:57,000 --> 01:38:57,000
那个程序的话

4049
01:38:57,000 --> 01:38:59,000
就好像或者是隔一段时间

4050
01:38:59,000 --> 01:39:00,000
都会要去检查

4051
01:39:00,000 --> 01:39:01,000
这证书是不是有效

4052
01:39:01,000 --> 01:39:01,000
然后从此出发

4053
01:39:01,000 --> 01:39:03,000
OCSP 可以动态率掉效

4054
01:39:03,000 --> 01:39:04,000
那个的话

4055
01:39:04,000 --> 01:39:05,000
只在入口检查

4056
01:39:05,000 --> 01:39:06,000
而且那个是针对

4057
01:39:06,000 --> 01:39:08,000
每一个应用包

4058
01:39:08,000 --> 01:39:09,000
就是我每一次开发者

4059
01:39:09,000 --> 01:39:10,000
发布一个包

4060
01:39:10,000 --> 01:39:11,000
都需要把那个包

4061
01:39:11,000 --> 01:39:13,000
丢到苹果的服务区上去

4062
01:39:13,000 --> 01:39:14,000
先做一次

4063
01:39:14,000 --> 01:39:16,000
hash 和各种安全性的检查

4064
01:39:16,000 --> 01:39:17,000
然后它生成一个

4065
01:39:17,000 --> 01:39:18,000
有效的一个签名

4066
01:39:18,000 --> 01:39:19,000
叫做 Ticket

4067
01:39:19,000 --> 01:39:20,000
然后拿给我

4068
01:39:20,000 --> 01:39:22,000
我附在应用包里面

4069
01:39:22,000 --> 01:39:23,000
然后下发给用户

4070
01:39:23,000 --> 01:39:24,000
然后用户打开

4071
01:39:24,000 --> 01:39:25,000
这个应用包的时候

4072
01:39:25,000 --> 01:39:26,000
会检查这个 Ticket

4073
01:39:26,000 --> 01:39:27,000
是否是有效的

4074
01:39:27,000 --> 01:39:29,000
一种是本地的精彩检查

4075
01:39:29,000 --> 01:39:31,000
同时也像服务器会检查

4076
01:39:31,000 --> 01:39:31,000
这个 Ticket

4077
01:39:31,000 --> 01:39:32,000
是不是有效的

4078
01:39:32,000 --> 01:39:34,000
然后如果是有效的话

4079
01:39:34,000 --> 01:39:34,000
才允许

4080
01:39:34,000 --> 01:39:35,000
允许

4081
01:39:35,000 --> 01:39:36,000
你说的那个就是

4082
01:39:36,000 --> 01:39:37,000
这个 notarization

4083
01:39:37,000 --> 01:39:38,000
那个服务

4084
01:39:38,000 --> 01:39:38,000
对吧

4085
01:39:38,000 --> 01:39:39,000
就它这个过程

4086
01:39:39,000 --> 01:39:39,000
是做这件事情

4087
01:39:39,000 --> 01:39:39,000
对

4088
01:39:39,000 --> 01:39:41,000
它其实是两个层面东西

4089
01:39:41,000 --> 01:39:41,000
比如说

4090
01:39:41,000 --> 01:39:43,000
OCSP 检查的是证书

4091
01:39:43,000 --> 01:39:44,000
但是这个证书是签发

4092
01:39:44,000 --> 01:39:45,000
给某一个

4093
01:39:45,000 --> 01:39:46,000
开发者账号的

4094
01:39:46,000 --> 01:39:47,000
然后这个开发账号

4095
01:39:47,000 --> 01:39:48,000
可以开发很多个 APP 出来

4096
01:39:48,000 --> 01:39:49,000
然后它

4097
01:39:49,000 --> 01:39:50,000
它所有的检查

4098
01:39:50,000 --> 01:39:50,000
都是检查

4099
01:39:50,000 --> 01:39:51,000
这个证书会怎么样

4100
01:39:51,000 --> 01:39:53,000
但是 notarization

4101
01:39:53,000 --> 01:39:55,000
是针对于

4102
01:39:55,000 --> 01:39:56,000
这个开发者

4103
01:39:56,000 --> 01:39:58,000
开发的单个应用程序而言的

4104
01:39:58,000 --> 01:39:59,000
单个二定制

4105
01:39:59,000 --> 01:40:00,000
每个二定制

4106
01:40:00,000 --> 01:40:01,000
都需要单独的取出银钱

4107
01:40:01,000 --> 01:40:02,000
我也在思考

4108
01:40:02,000 --> 01:40:03,000
这两种方式

4109
01:40:03,000 --> 01:40:04,000
它到底是

4110
01:40:04,000 --> 01:40:05,000
为什么要搞这么一种

4111
01:40:05,000 --> 01:40:06,000
搞这么新的

4112
01:40:06,000 --> 01:40:07,000
这么一场

4113
01:40:07,000 --> 01:40:09,000
它涉及这两个机制的

4114
01:40:09,000 --> 01:40:09,000
用意

4115
01:40:09,000 --> 01:40:10,000
或者 notarization

4116
01:40:10,000 --> 01:40:11,000
主要解决什么样的问题

4117
01:40:11,000 --> 01:40:12,000
它说是检查

4118
01:40:12,000 --> 01:40:14,000
这个恶意软件

4119
01:40:14,000 --> 01:40:14,000
对吧

4120
01:40:14,000 --> 01:40:15,000
我想的话

4121
01:40:15,000 --> 01:40:16,000
可能有这么几个优势

4122
01:40:16,000 --> 01:40:17,000
一是这样的话

4123
01:40:17,000 --> 01:40:18,000
你每次提交的时候

4124
01:40:18,000 --> 01:40:19,000
它其实现在

4125
01:40:19,000 --> 01:40:20,000
是有个要求的

4126
01:40:20,000 --> 01:40:22,000
就是你要满足以下的

4127
01:40:22,000 --> 01:40:23,000
一些新的

4128
01:40:23,000 --> 01:40:24,000
一些系统的安全特性

4129
01:40:24,000 --> 01:40:25,000
这个安全特性的话

4130
01:40:25,000 --> 01:40:26,000
随着时间的推进

4131
01:40:26,000 --> 01:40:27,000
它的要求

4132
01:40:27,000 --> 01:40:28,000
会变得越来越严格

4133
01:40:28,000 --> 01:40:29,000
然后比如说

4134
01:40:29,000 --> 01:40:30,000
像现在的一些

4135
01:40:30,000 --> 01:40:31,000
hardened

4136
01:40:31,000 --> 01:40:32,000
一些 run time 的

4137
01:40:32,000 --> 01:40:33,000
一些各种限制

4138
01:40:33,000 --> 01:40:34,000
你必须得启动了

4139
01:40:34,000 --> 01:40:36,000
这些安全保护之后

4140
01:40:36,000 --> 01:40:37,000
它才给你发这个

4141
01:40:37,000 --> 01:40:39,000
才给你通过这么一个公证

4142
01:40:39,000 --> 01:40:41,000
然后所以说

4143
01:40:41,000 --> 01:40:43,000
它会能够主动的去控制

4144
01:40:43,000 --> 01:40:44,000
去鞭策开发者

4145
01:40:44,000 --> 01:40:45,000
你赶快把这些

4146
01:40:45,000 --> 01:40:46,000
新的安全特性

4147
01:40:46,000 --> 01:40:46,000
都给我做上

4148
01:40:46,000 --> 01:40:47,000
要不是的话

4149
01:40:47,000 --> 01:40:48,000
你就别

4150
01:40:48,000 --> 01:40:50,000
大家就用起来会很麻烦

4151
01:40:50,000 --> 01:40:51,000
然后另外一方面的话

4152
01:40:51,000 --> 01:40:53,000
就是可能会考虑到

4153
01:40:53,000 --> 01:40:54,000
有些开发者

4154
01:40:54,000 --> 01:40:55,000
他偶然发了一个版本

4155
01:40:55,000 --> 01:40:57,000
那个版本是带有

4156
01:40:57,000 --> 01:40:57,000
恶意软件的

4157
01:40:57,000 --> 01:40:58,000
或者是他有什么样

4158
01:40:58,000 --> 01:40:59,000
严重漏洞的

4159
01:40:59,000 --> 01:41:01,000
不用把证数都杀掉

4160
01:41:01,000 --> 01:41:02,000
只能干掉那个版本

4161
01:41:02,000 --> 01:41:02,000
就可以了

4162
01:41:02,000 --> 01:41:04,000
你把证数一杀掉

4163
01:41:04,000 --> 01:41:06,000
这个可能影响的效果

4164
01:41:06,000 --> 01:41:07,000
就可能威力太大了

4165
01:41:07,000 --> 01:41:08,000
比如说 Google

4166
01:41:08,000 --> 01:41:09,000
假如说 Kroom 的某个版本

4167
01:41:09,000 --> 01:41:10,000
带来

4168
01:41:10,000 --> 01:41:11,000
不小心带来个恶意报

4169
01:41:11,000 --> 01:41:12,000
你这把 Google 的证数一杀

4170
01:41:12,000 --> 01:41:13,000
这个感觉

4171
01:41:13,000 --> 01:41:14,000
这个互联网可能都得杀了

4172
01:41:14,000 --> 01:41:15,000
公正是解决

4173
01:41:15,000 --> 01:41:16,000
就是说是那种

4174
01:41:16,000 --> 01:41:19,000
不是这个开发者主观故意

4175
01:41:19,000 --> 01:41:20,000
而是因为疏忽

4176
01:41:20,000 --> 01:41:22,000
或者是因为一些什么原因

4177
01:41:22,000 --> 01:41:23,000
别的原因导致说

4178
01:41:23,000 --> 01:41:25,000
他某一个版本的 APP 有问题

4179
01:41:25,000 --> 01:41:26,000
但是整个开发者认输

4180
01:41:26,000 --> 01:41:28,000
还是安全的

4181
01:41:28,000 --> 01:41:28,000
对

4182
01:41:28,000 --> 01:41:30,000
我觉得应该

4183
01:41:30,000 --> 01:41:31,000
这个应该是这样

4184
01:41:31,000 --> 01:41:32,000
我理解就是说 Notarist

4185
01:41:32,000 --> 01:41:33,000
它还有一个作用

4186
01:41:33,000 --> 01:41:34,000
就是说

4187
01:41:34,000 --> 01:41:35,000
因为我们知道

4188
01:41:35,000 --> 01:41:37,000
并不是所有的

4189
01:41:37,000 --> 01:41:38,000
这个 Mac 上面的用程序

4190
01:41:38,000 --> 01:41:39,000
都是通过这个 Mac App Store

4191
01:41:39,000 --> 01:41:40,000
发发

4192
01:41:40,000 --> 01:41:41,000
其实我们用的大部分

4193
01:41:41,000 --> 01:41:42,000
就是第三方的软件

4194
01:41:42,000 --> 01:41:43,000
都不是通过

4195
01:41:43,000 --> 01:41:46,000
这个 Mac App Store 发布的

4196
01:41:46,000 --> 01:41:48,000
所以苹果是不知道

4197
01:41:48,000 --> 01:41:50,000
你的这个 APP 到底有

4198
01:41:50,000 --> 01:41:51,000
他没有机会知道

4199
01:41:51,000 --> 01:41:53,000
你下载的这个第三方的 APP

4200
01:41:53,000 --> 01:41:54,000
到底有没有包含恶意程序

4201
01:41:54,000 --> 01:41:55,000
就是哪怕他知道

4202
01:41:55,000 --> 01:41:56,000
他也没法去对比

4203
01:41:56,000 --> 01:41:56,000
因为他不知道

4204
01:41:56,000 --> 01:41:57,000
你电脑上装了什么东西

4205
01:41:57,000 --> 01:42:00,000
那么通过这个 Notarization

4206
01:42:00,000 --> 01:42:01,000
这个公正的机制

4207
01:42:01,000 --> 01:42:03,000
他其实是强迫开发者

4208
01:42:03,000 --> 01:42:04,000
必须上传一份

4209
01:42:04,000 --> 01:42:05,000
到他那里去流档

4210
01:42:05,000 --> 01:42:08,000
然后他发现这个恶意版本之后

4211
01:42:08,000 --> 01:42:09,000
他可以直接跟

4212
01:42:09,000 --> 01:42:10,000
从他的库里面去比对

4213
01:42:10,000 --> 01:42:13,000
说这个版本是否在我这里公正过

4214
01:42:13,000 --> 01:42:14,000
如果被公正过

4215
01:42:14,000 --> 01:42:15,000
他就有可能被分发到

4216
01:42:15,000 --> 01:42:16,000
其他地方去

4217
01:42:16,000 --> 01:42:17,000
那我可以通过这个公正书

4218
01:42:17,000 --> 01:42:18,000
或者那个时候

4219
01:42:18,000 --> 01:42:19,000
那个时候 Ticket

4220
01:42:19,000 --> 01:42:19,000
对吧

4221
01:42:19,000 --> 01:42:20,000
来查到说

4222
01:42:20,000 --> 01:42:22,000
他在哪些这个 Mac 上用过

4223
01:42:22,000 --> 01:42:23,000
我可以去估算

4224
01:42:23,000 --> 01:42:26,000
这个安全问题的影响范围

4225
01:42:26,000 --> 01:42:27,000
没错

4226
01:42:27,000 --> 01:42:28,000
甚至我也可以直接去

4227
01:42:28,000 --> 01:42:29,000
拿到这一份之后

4228
01:42:29,000 --> 01:42:31,000
我好去分析他的代码

4229
01:42:31,000 --> 01:42:32,000
他到底是干了什么样的

4230
01:42:32,000 --> 01:42:33,000
一些坏事

4231
01:42:33,000 --> 01:42:35,000
所以是通过这个

4232
01:42:35,000 --> 01:42:36,000
其实解决了 Mac App Store

4233
01:42:36,000 --> 01:42:38,000
就是应用商店提供的

4234
01:42:38,000 --> 01:42:39,000
一种安全特性

4235
01:42:39,000 --> 01:42:40,000
但是又不需要强制

4236
01:42:40,000 --> 01:42:42,000
大家都必须通过

4237
01:42:42,000 --> 01:42:43,000
这个应用商店去发程序

4238
01:42:43,000 --> 01:42:44,000
对 没错

4239
01:42:44,000 --> 01:42:47,000
目前这两重机制上

4240
01:42:47,000 --> 01:42:48,000
一个是在用户

4241
01:42:48,000 --> 01:42:49,000
开发者账号层面

4242
01:42:49,000 --> 01:42:51,000
一个是在每个单个应用的层面

4243
01:42:51,000 --> 01:42:52,000
双重保护机制

4244
01:42:52,000 --> 01:42:53,000
这个都是属于

4245
01:42:53,000 --> 01:42:53,000
这个叫什么

4246
01:42:53,000 --> 01:42:54,000
Gatekeeper

4247
01:42:54,000 --> 01:42:55,000
那个要管的事情

4248
01:42:55,000 --> 01:42:56,000
就这个来看

4249
01:42:56,000 --> 01:42:58,000
目前 Mac 上面的整个安全性

4250
01:42:58,000 --> 01:43:00,000
还是比较有保障的

4251
01:43:00,000 --> 01:43:01,000
对吧

4252
01:43:01,000 --> 01:43:01,000
因为这个事情

4253
01:43:01,000 --> 01:43:03,000
我印象特别深刻

4254
01:43:03,000 --> 01:43:04,000
你知道就是在

4255
01:43:04,000 --> 01:43:05,000
你知道在中国

4256
01:43:05,000 --> 01:43:07,000
你要用网银

4257
01:43:07,000 --> 01:43:08,000
其实现在消费者

4258
01:43:08,000 --> 01:43:09,000
基本上都是用手机银行

4259
01:43:09,000 --> 01:43:10,000
没有太大的问题

4260
01:43:10,000 --> 01:43:12,000
都会通过这个 App Store

4261
01:43:12,000 --> 01:43:13,000
你只要不做越狱

4262
01:43:13,000 --> 01:43:15,000
不做几个什么这个事情

4263
01:43:15,000 --> 01:43:17,000
都还是能够保证你的安全

4264
01:43:17,000 --> 01:43:19,000
但是在企业银行

4265
01:43:19,000 --> 01:43:20,000
你还是要用

4266
01:43:20,000 --> 01:43:22,000
所谓 Windows 的程序

4267
01:43:22,000 --> 01:43:25,000
然后去下银行的客户端

4268
01:43:25,000 --> 01:43:27,000
然后非常搞笑的就是

4269
01:43:27,000 --> 01:43:28,000
那些客户端的安装程序

4270
01:43:28,000 --> 01:43:29,000
我看了一下

4271
01:43:29,000 --> 01:43:30,000
十有八九

4272
01:43:30,000 --> 01:43:33,000
是通过 HDP 名文去传输的

4273
01:43:33,000 --> 01:43:34,000
而且它下回来那个东西

4274
01:43:34,000 --> 01:43:37,000
Windows 上也是有签名的机制的

4275
01:43:37,000 --> 01:43:37,000
对吧

4276
01:43:37,000 --> 01:43:39,000
但是你看它都是位置开发者

4277
01:43:39,000 --> 01:43:42,000
就感觉这些安全素养

4278
01:43:42,000 --> 01:43:43,000
还是有一个需要

4279
01:43:43,000 --> 01:43:45,000
极大的提高的各个方面

4280
01:43:45,000 --> 01:43:46,000
安全素养实际上是

4281
01:43:46,000 --> 01:43:48,000
是需要厂商来倒逼的

4282
01:43:48,000 --> 01:43:49,000
我觉得在就是

4283
01:43:49,000 --> 01:43:50,000
在倒逼开发者

4284
01:43:50,000 --> 01:43:52,000
做到比较安全的这一点上

4285
01:43:52,000 --> 01:43:55,000
苹果实际上是业界先锋

4286
01:43:55,000 --> 01:43:55,000
没错

4287
01:43:55,000 --> 01:43:57,000
苹果特别能逼开发者

4288
01:43:57,000 --> 01:43:58,000
无论就不可能说

4289
01:43:58,000 --> 01:43:59,000
我们下一个 Windows

4290
01:43:59,000 --> 01:44:01,000
死了什么某一个版本更新

4291
01:44:01,000 --> 01:44:03,000
然后强势加一个

4292
01:44:03,000 --> 01:44:03,000
那个安全学校

4293
01:44:03,000 --> 01:44:06,000
那默认你如果是未知开发者

4294
01:44:06,000 --> 01:44:07,000
就没有通过签名的

4295
01:44:07,000 --> 01:44:08,000
我根本就不给你运行

4296
01:44:08,000 --> 01:44:10,000
它根本就不敢加这种选项

4297
01:44:10,000 --> 01:44:10,000
对不对

4298
01:44:10,000 --> 01:44:11,000
地球就炸了

4299
01:44:11,000 --> 01:44:13,000
这种事也只有苹果

4300
01:44:13,000 --> 01:44:14,000
现在能够推得动

4301
01:44:14,000 --> 01:44:15,000
其他人好像不敢

4302
01:44:15,000 --> 01:44:17,000
对

4303
01:44:17,000 --> 01:44:17,000
就是说这个安全性

4304
01:44:17,000 --> 01:44:18,000
我觉得还是

4305
01:44:18,000 --> 01:44:20,000
还是有比较好的保障的

4306
01:44:20,000 --> 01:44:20,000
那只是说

4307
01:44:20,000 --> 01:44:21,000
在实现细节上

4308
01:44:21,000 --> 01:44:22,000
我觉得确实还有很多

4309
01:44:22,000 --> 01:44:24,000
刚才我们讨论的

4310
01:44:24,000 --> 01:44:26,000
很多比较简单的

4311
01:44:26,000 --> 01:44:27,000
就可以改进的空间

4312
01:44:27,000 --> 01:44:29,000
那其实还是可以更好的

4313
01:44:29,000 --> 01:44:31,000
避免出现我们今天讨论的

4314
01:44:31,000 --> 01:44:32,000
各种各样的问题

4315
01:44:32,000 --> 01:44:33,000
对

4316
01:44:33,000 --> 01:44:34,000
但其实这个讨论的话

4317
01:44:34,000 --> 01:44:36,000
会有两个方面

4318
01:44:36,000 --> 01:44:36,000
一个方面的话

4319
01:44:36,000 --> 01:44:38,000
就刚刚我们说的隐私问题

4320
01:44:38,000 --> 01:44:39,000
另外一个方面

4321
01:44:39,000 --> 01:44:40,000
大家会有一种感觉

4322
01:44:40,000 --> 01:44:43,000
就是像最早那篇文章的标题

4323
01:44:43,000 --> 01:44:45,000
Your computer isn't yours

4324
01:44:45,000 --> 01:44:46,000
你的电脑不是你的

4325
01:44:46,000 --> 01:44:49,000
那我就是我是否是我作为用户

4326
01:44:49,000 --> 01:44:52,000
上市了我对我的设备的完全的控制权

4327
01:44:52,000 --> 01:44:52,000
这么一件事情

4328
01:44:52,000 --> 01:44:54,000
技术经营这个圈子那边

4329
01:44:54,000 --> 01:44:55,000
或者我们说说

4330
01:44:55,000 --> 01:44:56,000
你懂安全这个东西

4331
01:44:56,000 --> 01:44:57,000
你知道怎么回事

4332
01:44:57,000 --> 01:44:58,000
你会觉得

4333
01:44:58,000 --> 01:45:00,000
我不应该把这些信息

4334
01:45:00,000 --> 01:45:01,000
都泄露给苹果

4335
01:45:01,000 --> 01:45:02,000
但是其实从

4336
01:45:02,000 --> 01:45:02,000
我觉得

4337
01:45:02,000 --> 01:45:04,000
其实从普通人的角度来讲

4338
01:45:04,000 --> 01:45:05,000
普通人是没有这个能力

4339
01:45:05,000 --> 01:45:06,000
去分辨这些细节的

4340
01:45:06,000 --> 01:45:07,000
必须要有一个

4341
01:45:07,000 --> 01:45:09,000
了解这个事情的厂商

4342
01:45:09,000 --> 01:45:10,000
他信任过的这个厂商

4343
01:45:10,000 --> 01:45:11,000
去完成这个事情

4344
01:45:11,000 --> 01:45:12,000
如果这个世界上

4345
01:45:12,000 --> 01:45:13,000
还有什么大企业

4346
01:45:13,000 --> 01:45:14,000
可以让你相信的话

4347
01:45:14,000 --> 01:45:15,000
可能苹果上面

4348
01:45:15,000 --> 01:45:16,000
属于属于

4349
01:45:16,000 --> 01:45:19,000
屈指可数的几个之一

4350
01:45:19,000 --> 01:45:19,000
应该是

4351
01:45:19,000 --> 01:45:21,000
这句话是非常深刻的

4352
01:45:21,000 --> 01:45:22,000
一个果粉

4353
01:45:22,000 --> 01:45:24,000
只有最骨子里的果粉

4354
01:45:24,000 --> 01:45:25,000
才会说出来

4355
01:45:25,000 --> 01:45:29,000
其实就是从普通人心理

4356
01:45:29,000 --> 01:45:31,000
也可能还是能理解的

4357
01:45:31,000 --> 01:45:32,000
就是我买了一台电脑

4358
01:45:32,000 --> 01:45:32,000
这是我的电脑

4359
01:45:32,000 --> 01:45:33,000
我想运行什么程序

4360
01:45:33,000 --> 01:45:34,000
你苹果凭什么

4361
01:45:34,000 --> 01:45:35,000
有权限插手

4362
01:45:35,000 --> 01:45:36,000
说你不让我运行它

4363
01:45:36,000 --> 01:45:38,000
只是可以理解这种心理

4364
01:45:38,000 --> 01:45:39,000
当然我不认同

4365
01:45:39,000 --> 01:45:40,000
这样的说法

4366
01:45:40,000 --> 01:45:41,000
但是我从一个

4367
01:45:41,000 --> 01:45:43,000
魔鬼呆人的角度来说

4368
01:45:43,000 --> 01:45:44,000
我要反驳的话

4369
01:45:44,000 --> 01:45:45,000
我说那你实际上

4370
01:45:45,000 --> 01:45:46,000
你开的车也是一样的

4371
01:45:46,000 --> 01:45:47,000
虽然你的车

4372
01:45:47,000 --> 01:45:49,000
不能左右你

4373
01:45:49,000 --> 01:45:50,000
能去哪

4374
01:45:50,000 --> 01:45:51,000
不能去哪

4375
01:45:51,000 --> 01:45:52,000
但实际上你的车

4376
01:45:52,000 --> 01:45:53,000
买回来之后

4377
01:45:53,000 --> 01:45:54,000
你自己也是修不了的

4378
01:45:54,000 --> 01:45:55,000
就别说

4379
01:45:55,000 --> 01:45:58,000
你可能能换一些内饰

4380
01:45:58,000 --> 01:45:59,000
但 that's it

4381
01:45:59,000 --> 01:46:01,000
就是现在的

4382
01:46:01,000 --> 01:46:02,000
包括很多 4 S 店

4383
01:46:02,000 --> 01:46:03,000
都是修不了你的车的

4384
01:46:03,000 --> 01:46:05,000
改车是违法的

4385
01:46:05,000 --> 01:46:06,000
中国是不能上路的

4386
01:46:06,000 --> 01:46:07,000
对

4387
01:46:07,000 --> 01:46:08,000
是的

4388
01:46:08,000 --> 01:46:10,000
这个法规的倒在其次

4389
01:46:10,000 --> 01:46:12,000
这很多 4 S 店

4390
01:46:12,000 --> 01:46:13,000
实际上也是修不了你的车的

4391
01:46:13,000 --> 01:46:14,000
你就比如说

4392
01:46:14,000 --> 01:46:14,000
现在奥迪

4393
01:46:14,000 --> 01:46:16,000
或者是宝马之类的车

4394
01:46:16,000 --> 01:46:17,000
你到 4 S 店

4395
01:46:17,000 --> 01:46:18,000
你说我的车有什么问题

4396
01:46:18,000 --> 01:46:19,000
他往你测一下

4397
01:46:19,000 --> 01:46:20,000
他能做的就是

4398
01:46:20,000 --> 01:46:22,000
把你换那个零件寄回去

4399
01:46:22,000 --> 01:46:23,000
然后换一个新的过来

4400
01:46:23,000 --> 01:46:24,000
that's it

4401
01:46:24,000 --> 01:46:25,000
他已经失去了

4402
01:46:25,000 --> 01:46:27,000
能够帮你维修车辆的

4403
01:46:27,000 --> 01:46:28,000
这样一个作用了

4404
01:46:28,000 --> 01:46:30,000
就我觉得这本质上

4405
01:46:30,000 --> 01:46:33,000
是一个权利和责任的

4406
01:46:33,000 --> 01:46:34,000
一个分摊的问题

4407
01:46:34,000 --> 01:46:34,000
就是说

4408
01:46:34,000 --> 01:46:35,000
没错

4409
01:46:35,000 --> 01:46:36,000
如果从绝对的说

4410
01:46:36,000 --> 01:46:37,000
我要有自主权的情况下

4411
01:46:37,000 --> 01:46:39,000
美国不在讲什么

4412
01:46:39,000 --> 01:46:41,000
叫做 right to repair

4413
01:46:41,000 --> 01:46:42,000
就好像是那些

4414
01:46:42,000 --> 01:46:43,000
美国农民都比较强势

4415
01:46:43,000 --> 01:46:45,000
他要买什么高级的拖拉机

4416
01:46:45,000 --> 01:46:45,000
他坏了

4417
01:46:45,000 --> 01:46:46,000
他要修

4418
01:46:46,000 --> 01:46:46,000
对吧

4419
01:46:46,000 --> 01:46:48,000
他如果拖拉机要送去

4420
01:46:48,000 --> 01:46:49,000
这个 Jung Deere 原厂

4421
01:46:49,000 --> 01:46:50,000
再修

4422
01:46:50,000 --> 01:46:51,000
再给他发回来

4423
01:46:51,000 --> 01:46:53,000
那这个作物就烂在地里了

4424
01:46:53,000 --> 01:46:54,000
这个明显是不可以接受的

4425
01:46:54,000 --> 01:46:55,000
对吧

4426
01:46:55,000 --> 01:46:56,000
这个我觉得完全是可以理解的

4427
01:46:56,000 --> 01:46:57,000
但是其实像你说

4428
01:46:57,000 --> 01:46:58,000
像那种

4429
01:46:58,000 --> 01:46:58,000
对于普通来说

4430
01:46:58,000 --> 01:46:59,000
你说一个电脑

4431
01:46:59,000 --> 01:47:01,000
或者说一个手机

4432
01:47:01,000 --> 01:47:01,000
对吧

4433
01:47:01,000 --> 01:47:03,000
你就如果突然不能用的话

4434
01:47:03,000 --> 01:47:04,000
你对你来说

4435
01:47:04,000 --> 01:47:05,000
好像也没有那么大的

4436
01:47:05,000 --> 01:47:06,000
一个损失

4437
01:47:06,000 --> 01:47:08,000
但是更主要的就是说

4438
01:47:08,000 --> 01:47:09,000
如果厂商说

4439
01:47:09,000 --> 01:47:11,000
允许开放很多接口

4440
01:47:11,000 --> 01:47:12,000
让你去做一些底层的修改

4441
01:47:12,000 --> 01:47:13,000
或者马上像苹果

4442
01:47:13,000 --> 01:47:15,000
这次他说给他一个选项

4443
01:47:15,000 --> 01:47:16,000
可以让你 opt out

4444
01:47:16,000 --> 01:47:17,000
可以放弃这些安全保护

4445
01:47:17,000 --> 01:47:19,000
但最终你被黑了

4446
01:47:19,000 --> 01:47:21,000
你的资产被盗了

4447
01:47:21,000 --> 01:47:21,000
或者说假设

4448
01:47:21,000 --> 01:47:23,000
你前里面有 1000 个比特币

4449
01:47:23,000 --> 01:47:24,000
假设

4450
01:47:24,000 --> 01:47:24,000
随便确定

4451
01:47:24,000 --> 01:47:26,000
然后你又把这个安全

4452
01:47:26,000 --> 01:47:26,000
然后关掉

4453
01:47:26,000 --> 01:47:27,000
然后你说你比特币偷偷

4454
01:47:27,000 --> 01:47:28,000
你怪谁呢

4455
01:47:28,000 --> 01:47:29,000
你还是会去怪苹果

4456
01:47:29,000 --> 01:47:29,000
对不对

4457
01:47:29,000 --> 01:47:30,000
你说你这个安全

4458
01:47:30,000 --> 01:47:32,000
做的怎么这么早

4459
01:47:32,000 --> 01:47:32,000
但这个时候就

4460
01:47:32,000 --> 01:47:33,000
你就明显就是说

4461
01:47:33,000 --> 01:47:34,000
你的权利和责任

4462
01:47:34,000 --> 01:47:35,000
是没有对等的

4463
01:47:35,000 --> 01:47:37,000
对于绝大多数那种

4464
01:47:37,000 --> 01:47:38,000
不是那么懂技术的

4465
01:47:38,000 --> 01:47:40,000
也不知道那些安全措施

4466
01:47:40,000 --> 01:47:42,000
应该如何去日常践行的

4467
01:47:42,000 --> 01:47:44,000
哪怕是说对于我们这种懂行的人

4468
01:47:44,000 --> 01:47:46,000
你每天要去想各种各样的安全措施

4469
01:47:46,000 --> 01:47:47,000
各种各样的牺牲

4470
01:47:47,000 --> 01:47:48,000
各种各样的便利

4471
01:47:48,000 --> 01:47:49,000
你也很心累

4472
01:47:49,000 --> 01:47:51,000
就是我觉得从日常学来讲

4473
01:47:51,000 --> 01:47:51,000
你还是

4474
01:47:51,000 --> 01:47:53,000
我愿意放弃一些

4475
01:47:53,000 --> 01:47:55,000
所谓的我自己的一些权利

4476
01:47:55,000 --> 01:47:56,000
去换取说

4477
01:47:56,000 --> 01:47:58,000
有人去帮我 take care

4478
01:47:58,000 --> 01:47:59,000
有人把这个事情给我搞定

4479
01:47:59,000 --> 01:48:02,000
我甚至愿意为此付出更高的

4480
01:48:02,000 --> 01:48:03,000
这个价格

4481
01:48:03,000 --> 01:48:05,000
这个就是这个溢价的地方在这里

4482
01:48:05,000 --> 01:48:06,000
那为什么我现在不想去用安卓

4483
01:48:06,000 --> 01:48:07,000
不想用 windows

4484
01:48:07,000 --> 01:48:09,000
你说安卓不好用吗

4485
01:48:09,000 --> 01:48:09,000
其实也不是

4486
01:48:09,000 --> 01:48:11,000
安卓都做的挺好的

4487
01:48:11,000 --> 01:48:13,000
windows 也跑得很流畅

4488
01:48:13,000 --> 01:48:13,000
都没有问题

4489
01:48:13,000 --> 01:48:14,000
但我还是不想用

4490
01:48:14,000 --> 01:48:15,000
就是因为我觉得

4491
01:48:15,000 --> 01:48:17,000
没有人去帮我盯着这一块

4492
01:48:17,000 --> 01:48:18,000
对

4493
01:48:18,000 --> 01:48:19,000
所以我觉得还是要一些

4494
01:48:19,000 --> 01:48:20,000
成年人的想法

4495
01:48:20,000 --> 01:48:22,000
就是说你的权利和责任的使用

4496
01:48:22,000 --> 01:48:23,000
是对等的

4497
01:48:23,000 --> 01:48:23,000
对

4498
01:48:23,000 --> 01:48:23,000
是的

4499
01:48:23,000 --> 01:48:25,000
而且我觉得还有个底线

4500
01:48:25,000 --> 01:48:27,000
就是如果你真的觉得

4501
01:48:27,000 --> 01:48:27,000
你要是你的

4502
01:48:27,000 --> 01:48:30,000
其实你现在也是有办法的

4503
01:48:30,000 --> 01:48:31,000
虽然麻烦一点

4504
01:48:31,000 --> 01:48:31,000
进恢复模式

4505
01:48:31,000 --> 01:48:32,000
把 SIP 关了

4506
01:48:32,000 --> 01:48:33,000
把各种东西改了

4507
01:48:33,000 --> 01:48:35,000
也能够绕过这个限制

4508
01:48:35,000 --> 01:48:36,000
裸奔去了

4509
01:48:36,000 --> 01:48:37,000
对

4510
01:48:37,000 --> 01:48:37,000
你也是能够

4511
01:48:37,000 --> 01:48:38,000
甚至不行

4512
01:48:38,000 --> 01:48:39,000
你把 MacOS 删了是吧

4513
01:48:39,000 --> 01:48:40,000
你装个 windows

4514
01:48:40,000 --> 01:48:41,000
那也是你的 MacBook

4515
01:48:41,000 --> 01:48:42,000
也能用

4516
01:48:42,000 --> 01:48:43,000
就不要买 Mac

4517
01:48:43,000 --> 01:48:45,000
装个 Linux

4518
01:48:45,000 --> 01:48:46,000
买个 PC 多好

4519
01:48:46,000 --> 01:48:47,000
又便宜又好用

4520
01:48:47,000 --> 01:48:47,000
对

4521
01:48:47,000 --> 01:48:48,000
对

4522
01:48:48,000 --> 01:48:49,000
那篇文章的一个论点

4523
01:48:49,000 --> 01:48:50,000
就是你在 M 1

4524
01:48:50,000 --> 01:48:52,000
Mac 出来之前

4525
01:48:52,000 --> 01:48:53,000
你是可以选择

4526
01:48:53,000 --> 01:48:54,000
比如说我装个 Linux

4527
01:48:54,000 --> 01:48:54,000
我装个 Ubuntu

4528
01:48:54,000 --> 01:48:55,000
都是可以的

4529
01:48:55,000 --> 01:48:55,000
对吧

4530
01:48:55,000 --> 01:48:56,000
这个硬件上面

4531
01:48:56,000 --> 01:48:57,000
我装什么操作

4532
01:48:57,000 --> 01:48:58,000
是完全 OK 的

4533
01:48:58,000 --> 01:49:00,000
但是从 M 1 Mac 之后

4534
01:49:00,000 --> 01:49:01,000
你除了装 MacOS 之外

4535
01:49:01,000 --> 01:49:02,000
也没有办法装别人了

4536
01:49:02,000 --> 01:49:03,000
但你可以不用 Mac

4537
01:49:03,000 --> 01:49:04,000
没有人逼着你们 Mac

4538
01:49:04,000 --> 01:49:05,000
对不对

4539
01:49:05,000 --> 01:49:06,000
所以这个也很扯

4540
01:49:06,000 --> 01:49:07,000
对

4541
01:49:07,000 --> 01:49:09,000
而且现在好像据说

4542
01:49:09,000 --> 01:49:10,000
苹果也在考虑

4543
01:49:10,000 --> 01:49:13,000
正在和开放出来 M 1 的设备

4544
01:49:13,000 --> 01:49:14,000
也能装起来操作系统

4545
01:49:14,000 --> 01:49:15,000
但是这可能就是一个

4546
01:49:15,000 --> 01:49:16,000
比较大的工程

4547
01:49:16,000 --> 01:49:17,000
问题是谁

4548
01:49:17,000 --> 01:49:18,000
谁会去适配呢

4549
01:49:18,000 --> 01:49:18,000
微软吗

4550
01:49:18,000 --> 01:49:19,000
微软做一个

4551
01:49:19,000 --> 01:49:20,000
把 Windows on ARM

4552
01:49:20,000 --> 01:49:21,000
移植过来

4553
01:49:21,000 --> 01:49:23,000
我觉得 Linux

4554
01:49:23,000 --> 01:49:24,000
一定会出一个 M 1

4555
01:49:24,000 --> 01:49:26,000
或者说 Apple Silicon 的版本

4556
01:49:26,000 --> 01:49:28,000
我觉得微软也不是没有可能

4557
01:49:28,000 --> 01:49:29,000
现在微软不是苹果的

4558
01:49:29,000 --> 01:49:30,000
这家合作伙伴

4559
01:49:30,000 --> 01:49:31,000
开发者了

4560
01:49:31,000 --> 01:49:33,000
微软他现在是

4561
01:49:33,000 --> 01:49:34,000
他的那个 ARM

4562
01:49:34,000 --> 01:49:36,000
生态是依赖高通

4563
01:49:36,000 --> 01:49:37,000
高通不是出了

4564
01:49:37,000 --> 01:49:38,000
他最近是发了一个什么来的

4565
01:49:38,000 --> 01:49:39,000
X 吧

4566
01:49:39,000 --> 01:49:40,000
还是 Pro X

4567
01:49:40,000 --> 01:49:41,000
就是那个

4568
01:49:41,000 --> 01:49:42,000
Surfacebook 还是 Surface

4569
01:49:42,000 --> 01:49:43,000
就要 Surface

4570
01:49:43,000 --> 01:49:44,000
就也是一个

4571
01:49:44,000 --> 01:49:45,000
就他出

4572
01:49:45,000 --> 01:49:46,000
他对我讲自己那套

4573
01:49:46,000 --> 01:49:47,000
就是两用的

4574
01:49:47,000 --> 01:49:47,000
那个

4575
01:49:47,000 --> 01:49:49,000
那个便携电脑

4576
01:49:49,000 --> 01:49:50,000
他就好像就用的是

4577
01:49:50,000 --> 01:49:51,000
高通的那个处理器

4578
01:49:51,000 --> 01:49:53,000
但是你看现在苹果

4579
01:49:53,000 --> 01:49:53,000
如果能够

4580
01:49:53,000 --> 01:49:56,000
把其他厂商打成这样的话

4581
01:49:56,000 --> 01:49:57,000
那微软之后

4582
01:49:57,000 --> 01:49:58,000
会不会也觉得

4583
01:49:58,000 --> 01:49:59,000
就那干脆硬件上

4584
01:49:59,000 --> 01:49:59,000
我就硬件了

4585
01:49:59,000 --> 01:50:00,000
也包括

4586
01:50:00,000 --> 01:50:01,000
我也来加注

4587
01:50:01,000 --> 01:50:02,000
苹果的这个 ARM 生态

4588
01:50:02,000 --> 01:50:03,000
对

4589
01:50:03,000 --> 01:50:04,000
反正我又不靠

4590
01:50:04,000 --> 01:50:05,000
慢慢硬件赚钱

4591
01:50:05,000 --> 01:50:05,000
对吧

4592
01:50:05,000 --> 01:50:06,000
我就慢慢软件

4593
01:50:06,000 --> 01:50:07,000
然后如果我能够在

4594
01:50:07,000 --> 01:50:09,000
这个 M 1 的 Mac

4595
01:50:09,000 --> 01:50:10,000
那何乐而不为呢

4596
01:50:10,000 --> 01:50:11,000
对啊

4597
01:50:11,000 --> 01:50:11,000
是啊

4598
01:50:11,000 --> 01:50:12,000
也是有可能的

4599
01:50:12,000 --> 01:50:15,000
这个事情是太 crazy 了

4600
01:50:15,000 --> 01:50:16,000
你就十年前

4601
01:50:16,000 --> 01:50:17,000
你都不敢想象说

4602
01:50:17,000 --> 01:50:18,000
啊

4603
01:50:18,000 --> 01:50:20,000
这个微软还要去给苹果

4604
01:50:20,000 --> 01:50:22,000
适配一下系统

4605
01:50:22,000 --> 01:50:23,000
这是什么情况呢

4606
01:50:23,000 --> 01:50:24,000
说到十年前

4607
01:50:24,000 --> 01:50:25,000
这个十年前

4608
01:50:25,000 --> 01:50:26,000
那个 Windows Guide

4609
01:50:26,000 --> 01:50:27,000
这次又出来了

4610
01:50:27,000 --> 01:50:29,000
在苹果发布会上

4611
01:50:29,000 --> 01:50:30,000
对对

4612
01:50:30,000 --> 01:50:32,000
是那个 PC vs Mac

4613
01:50:32,000 --> 01:50:33,000
那个广告里面

4614
01:50:33,000 --> 01:50:34,000
那个 PC 吗

4615
01:50:34,000 --> 01:50:34,000
对

4616
01:50:34,000 --> 01:50:36,000
稍微有点发胖

4617
01:50:36,000 --> 01:50:38,000
但是还是风采不见当年

4618
01:50:38,000 --> 01:50:39,000
我有读过一个报道

4619
01:50:39,000 --> 01:50:41,000
就说这个广告里面两个人

4620
01:50:41,000 --> 01:50:42,000
就是这个

4621
01:50:42,000 --> 01:50:43,000
这个 Windows Guide

4622
01:50:43,000 --> 01:50:44,000
实际上是一个

4623
01:50:44,000 --> 01:50:46,000
是一个 Mac 的铁粉

4624
01:50:46,000 --> 01:50:48,000
而那个 Mac Guide

4625
01:50:48,000 --> 01:50:50,000
实际上对电脑一窍不通

4626
01:50:50,000 --> 01:50:52,000
可能是个 Windows 用户

4627
01:50:52,000 --> 01:50:52,000
对吧

4628
01:50:52,000 --> 01:50:54,000
对

4629
01:50:54,000 --> 01:50:56,000
这个才是真的果粉

4630
01:50:56,000 --> 01:50:59,000
为了愿意支持这个理解

4631
01:50:59,000 --> 01:51:00,000
然后牺牲自己

4632
01:51:00,000 --> 01:51:02,000
来出演这个坏人

4633
01:51:02,000 --> 01:51:03,000
牺牲自己的心象

4634
01:51:03,000 --> 01:51:05,000
然后来换取苹果的高大

4635
01:51:05,000 --> 01:51:07,000
那也换取了一些美元

4636
01:51:07,000 --> 01:51:07,000
我觉得

4637
01:51:07,000 --> 01:51:09,000
主要是美元比较像

4638
01:51:09,000 --> 01:51:10,000
那可肯定的

4639
01:51:10,000 --> 01:51:12,000
OK

4640
01:51:12,000 --> 01:51:14,000
那好啊

4641
01:51:14,000 --> 01:51:15,000
那今天我们就这个

4642
01:51:15,000 --> 01:51:17,000
对苹果的 M 1 芯片

4643
01:51:17,000 --> 01:51:19,000
和这个 OCSP 的问题

4644
01:51:19,000 --> 01:51:20,000
展开了这个

4645
01:51:20,000 --> 01:51:21,000
深入而友好的讨论

4646
01:51:21,000 --> 01:51:23,000
那也非常感谢

4647
01:51:23,000 --> 01:51:25,000
雅成来我们这个节目做客

4648
01:51:25,000 --> 01:51:27,000
感谢两位的邀请

4649
01:51:27,000 --> 01:51:28,000
我们这还有机会的话

4650
01:51:28,000 --> 01:51:30,000
雅成也可以常来我们节目

4651
01:51:30,000 --> 01:51:31,000
再聊聊其他的一些事情

4652
01:51:31,000 --> 01:51:32,000
我们可以比如说

4653
01:51:32,000 --> 01:51:33,000
聊聊主力开发者呀

4654
01:51:33,000 --> 01:51:35,000
来聊 SURG 呀

4655
01:51:35,000 --> 01:51:36,000
之类的事情

4656
01:51:36,000 --> 01:51:36,000
行

4657
01:51:36,000 --> 01:51:37,000
好的

4658
01:51:37,000 --> 01:51:39,000
还是感觉有很多蛋可以扯的

4659
01:51:39,000 --> 01:51:40,000
对对对

4660
01:51:40,000 --> 01:51:41,000
那好

4661
01:51:41,000 --> 01:51:42,000
我们今天的节目

4662
01:51:42,000 --> 01:51:43,000
就先到这里了

4663
01:51:43,000 --> 01:51:45,000
您刚刚收听到的节目

4664
01:51:45,000 --> 01:51:46,000
是内核恐慌

4665
01:51:46,000 --> 01:51:47,000
一档尽量贴近

4666
01:51:47,000 --> 01:51:48,000
计算机科技主题的

4667
01:51:48,000 --> 01:51:49,000
娱乐 podcast

4668
01:51:49,000 --> 01:51:51,000
我们号称硬核

4669
01:51:51,000 --> 01:51:52,000
但是也没有什么干货

4670
01:51:52,000 --> 01:51:52,000
想听听

4671
01:51:52,000 --> 01:51:53,000
不想听就别听

4672
01:51:53,000 --> 01:51:55,000
我们的网址是

4673
01:51:55,000 --> 01:51:56,000
pan.icu

4674
01:51:56,000 --> 01:51:58,000
您可以在网站上

4675
01:51:58,000 --> 01:51:59,000
找到订阅我们的

4676
01:51:59,000 --> 01:51:59,000
节目的方法

4677
01:51:59,000 --> 01:52:01,000
以及联网我们节目的方式

4678
01:52:01,000 --> 01:52:02,000
如果您期待我们

4679
01:52:02,000 --> 01:52:03,000
更频繁的更新

4680
01:52:03,000 --> 01:52:04,000
欢迎您到

4681
01:52:04,000 --> 01:52:05,000
爱发店我们捐款

4682
01:52:05,000 --> 01:52:06,000
捐款地址

4683
01:52:06,000 --> 01:52:06,000
可以在

4684
01:52:06,000 --> 01:52:07,000
爱发

4685
01:52:07,000 --> 01:52:09,000
可以在我们的网站上找到

4686
01:52:09,000 --> 01:52:10,000
先发店

4687
01:52:10,000 --> 01:52:10,000
后随更

4688
01:52:10,000 --> 01:52:11,000
文明随更

4689
01:52:11,000 --> 01:52:12,000
从你做起

4690
01:52:12,000 --> 01:52:13,000
如果您觉得意欲未尽

4691
01:52:13,000 --> 01:52:14,000
也欢迎您去收听

4692
01:52:14,000 --> 01:52:15,000
Rail 和黄海姐

4693
01:52:15,000 --> 01:52:16,000
主持的节目

4694
01:52:16,000 --> 01:52:17,000
风头圈

4695
01:52:17,000 --> 01:52:18,000
Rail 和任宁

4696
01:52:18,000 --> 01:52:19,000
主持的节目

4697
01:52:19,000 --> 01:52:20,000
提前怀旧

4698
01:52:20,000 --> 01:52:20,000
以及基本步

4699
01:52:20,000 --> 01:52:21,000
无套主持的

4700
01:52:21,000 --> 01:52:22,000
自谈自唱

4701
01:52:23,000 --> 01:52:23,000
拜拜

4702
01:52:23,000 --> 01:52:24,000
拜拜

