1
00:00:00,000 --> 00:00:00,000
大家好

2
00:00:00,000 --> 00:00:04,000
欢迎收听第七期的内核恐慌

3
00:00:04,000 --> 00:00:04,000
我是 Rail

4
00:00:04,000 --> 00:00:05,000
我是吴涛

5
00:00:05,000 --> 00:00:07,000
哎呀终于第七期了

6
00:00:07,000 --> 00:00:08,000
其实我很喜欢数字

7
00:00:08,000 --> 00:00:15,000
其实今天这期节目的时间会比较奇怪

8
00:00:15,000 --> 00:00:17,000
我们是提前了很久

9
00:00:17,000 --> 00:00:18,000
你们听到的时候应该是

10
00:00:18,000 --> 00:00:20,000
圣诞节是后了

11
00:00:20,000 --> 00:00:23,000
你吴涛解释一下为什么要这么干

12
00:00:23,000 --> 00:00:25,000
因为在这个神秘的时间点

13
00:00:25,000 --> 00:00:28,000
我们还没有办法得到足够的

14
00:00:28,000 --> 00:00:30,000
听众反馈

15
00:00:30,000 --> 00:00:33,000
我们相信我们在上一期里面

16
00:00:33,000 --> 00:00:35,000
遇到了犯了很多很低级的错误

17
00:00:35,000 --> 00:00:37,000
有可能是非常常识性的错误

18
00:00:37,000 --> 00:00:39,000
但是在目前这个

19
00:00:39,000 --> 00:00:42,000
Time Space 的 Point 上面

20
00:00:42,000 --> 00:00:44,000
我们还没有这些反馈信息

21
00:00:44,000 --> 00:00:47,000
所以我们这一期暂时先不做 Fallup

22
00:00:47,000 --> 00:00:49,000
但是我保证下期

23
00:00:49,000 --> 00:00:51,000
大家会听到我们两个在这边

24
00:00:51,000 --> 00:00:53,000
怎么说

25
00:00:53,000 --> 00:00:54,000
痛哭流泪

26
00:00:54,000 --> 00:00:58,000
垂胸顿足的

27
00:00:58,000 --> 00:01:01,000
道歉说我们犯了一些低级的错误

28
00:01:01,000 --> 00:01:02,000
包括上一期以及这一期

29
00:01:02,000 --> 00:01:09,000
所以这一期我们的主题是什么

30
00:01:09,000 --> 00:01:10,000
Package Management

31
00:01:10,000 --> 00:01:16,000
其实有一点点像上一期的主题的自然延伸

32
00:01:16,000 --> 00:01:18,000
就是上一期我们讨论了软件

33
00:01:18,000 --> 00:01:21,000
或者说程序生命周期的管理

34
00:01:21,000 --> 00:01:26,000
主要还是从比较小的一个主演点入手

35
00:01:26,000 --> 00:01:27,000
就是那主要是

36
00:01:27,000 --> 00:01:30,000
其实我一开始只是想谈内存管理

37
00:01:30,000 --> 00:01:31,000
但是没有想到后面撤到那么多

38
00:01:31,000 --> 00:01:33,000
那这一期的内容

39
00:01:33,000 --> 00:01:34,000
其实就是

40
00:01:34,000 --> 00:01:37,000
当你的软件写出来

41
00:01:37,000 --> 00:01:38,000
或者说你在写软件的时候

42
00:01:38,000 --> 00:01:41,000
你会需要用到叙叙多多内部外部的工具

43
00:01:41,000 --> 00:01:43,000
并且你希望你的软件可以以某种

44
00:01:43,000 --> 00:01:46,000
比较方便的方式被别人使用

45
00:01:46,000 --> 00:01:49,000
那你就需要把它包装起来

46
00:01:49,000 --> 00:01:52,000
我们这一期主要讨论就是这个问题

47
00:01:52,000 --> 00:01:56,000
所以在开始之前

48
00:01:56,000 --> 00:01:57,000
我们要先解释一下什么叫做

49
00:01:57,000 --> 00:01:59,000
这个概念是 Package Management

50
00:01:59,000 --> 00:01:59,000
对

51
00:01:59,000 --> 00:02:05,000
Package 实际上是一个非常泛泛的称呼

52
00:02:05,000 --> 00:02:08,000
就是它是一个指涉非常不清楚的词

53
00:02:08,000 --> 00:02:10,000
在很多不同语境之下会有很多不同的意义

54
00:02:10,000 --> 00:02:11,000
比如说

55
00:02:11,000 --> 00:02:15,000
以 OS 10 来说

56
00:02:15,000 --> 00:02:16,000
Package 可以是指

57
00:02:16,000 --> 00:02:18,000
比如说一个 Application Bundle

58
00:02:18,000 --> 00:02:19,000
可以是一个 Package

59
00:02:19,000 --> 00:02:20,000
对吧

60
00:02:20,000 --> 00:02:21,000
然后

61
00:02:21,000 --> 00:02:23,000
但是与此同时

62
00:02:23,000 --> 00:02:25,000
你又可以通过一种叫做

63
00:02:25,000 --> 00:02:29,000
.pkg 的文件来安装一个程序

64
00:02:29,000 --> 00:02:33,000
然后那个.pkg 文件也是一个 Package

65
00:02:33,000 --> 00:02:33,000
对

66
00:02:33,000 --> 00:02:34,000
有点

67
00:02:34,000 --> 00:02:36,000
就在不同的语境下

68
00:02:36,000 --> 00:02:38,000
Package 的概念就是有点

69
00:02:38,000 --> 00:02:40,000
比较不清晰的

70
00:02:40,000 --> 00:02:41,000
对

71
00:02:41,000 --> 00:02:45,000
然后 Jar 程序员可能会非常习惯于一个 package

72
00:02:45,000 --> 00:02:47,000
就是一个 Jar file

73
00:02:47,000 --> 00:02:48,000
或者是一个 WAR file

74
00:02:48,000 --> 00:02:52,000
然后它既可以只拿来

75
00:02:52,000 --> 00:02:55,000
可以拿来用第三方库

76
00:02:55,000 --> 00:02:58,000
也可以指自己写出来的什么东西

77
00:02:58,000 --> 00:03:01,000
在部署的时候所打包成的一个文件

78
00:03:01,000 --> 00:03:02,000
对

79
00:03:02,000 --> 00:03:04,000
就是在对开发的时候

80
00:03:04,000 --> 00:03:06,000
我们讲的 package 和部署的时候 package

81
00:03:06,000 --> 00:03:08,000
就其实又不是同一个

82
00:03:08,000 --> 00:03:09,000
就相关的

83
00:03:09,000 --> 00:03:10,000
但并不完全一致

84
00:03:10,000 --> 00:03:11,000
对

85
00:03:11,000 --> 00:03:13,000
那什么是开发时的 package 呢

86
00:03:13,000 --> 00:03:15,000
对

87
00:03:15,000 --> 00:03:17,000
这个要解释一下吧

88
00:03:17,000 --> 00:03:18,000
就大概可以理解为

89
00:03:18,000 --> 00:03:20,000
你要写一个软件

90
00:03:20,000 --> 00:03:22,000
然后你需要依赖

91
00:03:22,000 --> 00:03:23,000
你不是从

92
00:03:23,000 --> 00:03:26,000
从头到尾都是用全部自己写

93
00:03:26,000 --> 00:03:27,000
你肯定要用到别人的一些什么

94
00:03:27,000 --> 00:03:28,000
第三方的代码

95
00:03:28,000 --> 00:03:32,000
或者是你那个语言的原生的标准库里面那些东西

96
00:03:32,000 --> 00:03:34,000
然后这些

97
00:03:34,000 --> 00:03:35,000
你要用的那些东西

98
00:03:35,000 --> 00:03:37,000
大概可以理解为一个 package

99
00:03:37,000 --> 00:03:39,000
这个时候你只要去调用那些 package

100
00:03:39,000 --> 00:03:41,000
才能完成你这个软件的功能

101
00:03:41,000 --> 00:03:41,000
对

102
00:03:41,000 --> 00:03:43,000
我记得小时候写程序

103
00:03:43,000 --> 00:03:46,000
如果需要用到别人的第三方代码

104
00:03:46,000 --> 00:03:48,000
我就直接把那代码拷贝一遍

105
00:03:48,000 --> 00:03:50,000
粘贴到我的文件里就可以了

106
00:03:50,000 --> 00:03:52,000
对的什么

107
00:03:52,000 --> 00:03:53,000
这是 package management

108
00:03:53,000 --> 00:03:54,000
done run

109
00:03:54,000 --> 00:04:00,000
不过其实在今天我们做的很多事情

110
00:04:00,000 --> 00:04:00,000
跟这个

111
00:04:00,000 --> 00:04:03,000
其实在本质上也是很类似的

112
00:04:03,000 --> 00:04:04,000
就把别人的代码

113
00:04:04,000 --> 00:04:06,000
挪到自己的代码库里面去

114
00:04:06,000 --> 00:04:07,000
这样可以保证

115
00:04:07,000 --> 00:04:11,000
以后你就不用再管别人

116
00:04:11,000 --> 00:04:11,000
他怎么改他

117
00:04:11,000 --> 00:04:13,000
反正你有一份副本了

118
00:04:13,000 --> 00:04:15,000
在你的本地的这个目录里面去

119
00:04:15,000 --> 00:04:16,000
对吧

120
00:04:16,000 --> 00:04:16,000
对

121
00:04:16,000 --> 00:04:17,000
现在的 package management

122
00:04:17,000 --> 00:04:20,000
或者说在开发时的 package management

123
00:04:20,000 --> 00:04:21,000
所解决的问题就是

124
00:04:21,000 --> 00:04:23,000
怎样让你不尽量

125
00:04:23,000 --> 00:04:26,000
怎样让你尽量不 dirty 的去

126
00:04:26,000 --> 00:04:28,000
去拷贝别人的文件

127
00:04:28,000 --> 00:04:30,000
到你的工程里面去

128
00:04:30,000 --> 00:04:33,000
就如果你需要依赖别人的代码

129
00:04:33,000 --> 00:04:36,000
而通过简单的复制粘贴

130
00:04:36,000 --> 00:04:37,000
像我们童年做的那样的话

131
00:04:37,000 --> 00:04:41,000
那假如对方升级了一下他的一个功能

132
00:04:41,000 --> 00:04:42,000
你怎么用呢

133
00:04:42,000 --> 00:04:43,000
你还要再拷贝

134
00:04:43,000 --> 00:04:44,000
再粘贴一遍

135
00:04:44,000 --> 00:04:47,000
这还不是最痛苦的部分

136
00:04:47,000 --> 00:04:48,000
最痛苦的部分是

137
00:04:48,000 --> 00:04:52,000
假如你想要把别人的裤扔出去的时候

138
00:04:52,000 --> 00:04:54,000
有可能你会非常苦恼的发现

139
00:04:54,000 --> 00:04:57,000
你已经不记得哪一部分是你拷贝

140
00:04:57,000 --> 00:04:59,000
复制粘贴进来的

141
00:04:59,000 --> 00:05:00,000
而哪一部分是你自己写的

142
00:05:00,000 --> 00:05:03,000
这个要什么

143
00:05:03,000 --> 00:05:05,000
要有这个版本管理才能发现

144
00:05:05,000 --> 00:05:06,000
要回去找那个 log

145
00:05:06,000 --> 00:05:07,000
对

146
00:05:07,000 --> 00:05:09,000
而在你发明版本管理

147
00:05:09,000 --> 00:05:11,000
自己发明一个版本管理系统之前

148
00:05:11,000 --> 00:05:13,000
你可能已经会先发现

149
00:05:13,000 --> 00:05:15,000
这个原来世界上有 package management

150
00:05:15,000 --> 00:05:16,000
这种东西

151
00:05:16,000 --> 00:05:18,000
对

152
00:05:18,000 --> 00:05:21,000
然后另外一个我们常说的状态

153
00:05:21,000 --> 00:05:22,000
就是说在部署的时候

154
00:05:22,000 --> 00:05:24,000
就所谓把软件分发给

155
00:05:24,000 --> 00:05:26,000
如果你是卖给消费者的话

156
00:05:26,000 --> 00:05:27,000
你是分发给别人

157
00:05:27,000 --> 00:05:30,000
或者是你是像我部署的服务器的软件的话

158
00:05:30,000 --> 00:05:32,000
你是要怎么把它弄

159
00:05:32,000 --> 00:05:34,000
导腾到这个服务器上去运行

160
00:05:34,000 --> 00:05:37,000
这个时候的这个要求又有点不一样

161
00:05:37,000 --> 00:05:39,000
这个时候我们要求

162
00:05:39,000 --> 00:05:41,000
这个 package 是尽可能的

163
00:05:41,000 --> 00:05:42,000
是什么

164
00:05:42,000 --> 00:05:43,000
可重复的

165
00:05:43,000 --> 00:05:45,000
就是你整个 deploy 的这个过程

166
00:05:45,000 --> 00:05:46,000
应该是可以重复的

167
00:05:46,000 --> 00:05:47,000
对

168
00:05:47,000 --> 00:05:50,000
那这个这么说可能稍微有点抽象

169
00:05:50,000 --> 00:05:52,000
但是如果你是一个 Windows 用户的话

170
00:05:52,000 --> 00:05:55,000
你可能会习惯于安装什么软件

171
00:05:55,000 --> 00:06:00,000
就是打开一个安装软件的 install 的 dxe

172
00:06:00,000 --> 00:06:02,000
然后还是或者叫 setup.dxe

173
00:06:02,000 --> 00:06:04,000
然后你一路回车

174
00:06:04,000 --> 00:06:07,000
执行一个叫做 setup visa 的东西

175
00:06:07,000 --> 00:06:10,000
然后指定一个安装的目标路径

176
00:06:10,000 --> 00:06:10,000
对

177
00:06:10,000 --> 00:06:12,000
然后它会把所有东西

178
00:06:12,000 --> 00:06:14,000
给你塞到那个目标下面之后

179
00:06:14,000 --> 00:06:15,000
然后你去那个目标找

180
00:06:15,000 --> 00:06:17,000
就可以找到你要运行的程序

181
00:06:17,000 --> 00:06:19,000
所以在 Windows 世界里面

182
00:06:19,000 --> 00:06:20,000
我们安装程序的过程

183
00:06:20,000 --> 00:06:22,000
是用一个程序去安装另一个程序

184
00:06:22,000 --> 00:06:24,000
或者说你为了安装你的程序

185
00:06:24,000 --> 00:06:26,000
你必须创建另外一个

186
00:06:26,000 --> 00:06:27,000
你用另外一个程序

187
00:06:27,000 --> 00:06:30,000
把你的程序打包在一个 package 里面

188
00:06:30,000 --> 00:06:32,000
然后交给别人

189
00:06:32,000 --> 00:06:35,000
别人再同样要利用另外一个程序

190
00:06:35,000 --> 00:06:36,000
来解压你的程序

191
00:06:36,000 --> 00:06:40,000
然后把它安装到你对方的电脑下面

192
00:06:40,000 --> 00:06:41,000
对

193
00:06:41,000 --> 00:06:44,000
这个就跟在 OS-10 上面的

194
00:06:44,000 --> 00:06:46,000
常用的安装方式还不太一样

195
00:06:46,000 --> 00:06:47,000
刚才你也讲了

196
00:06:47,000 --> 00:06:51,000
就是只是比如说我们通常的一种方式是通过一个 DMG 的镜像

197
00:06:51,000 --> 00:06:53,000
或者是转到一个.zip 的压缩包

198
00:06:53,000 --> 00:06:57,000
然后解压出来一个.app 的这么一个目录吧

199
00:06:57,000 --> 00:06:59,000
然后这个目录整个是一个完整的程序

200
00:06:59,000 --> 00:07:03,000
你直接把它拖到你的 application 的 folder 里面

201
00:07:03,000 --> 00:07:04,000
这个事情就算完成了

202
00:07:04,000 --> 00:07:05,000
嗯哼

203
00:07:05,000 --> 00:07:08,000
所以但是刚才你说那种 Windows 上面安装的方式

204
00:07:08,000 --> 00:07:09,000
在 OS-10 下的对比

205
00:07:09,000 --> 00:07:13,000
就是你之前也提到那个.pkg 那种方式运行一个脚本

206
00:07:13,000 --> 00:07:16,000
然后把那些文件塞到你的系统的各个角落

207
00:07:16,000 --> 00:07:16,000
对

208
00:07:16,000 --> 00:07:18,000
主要来说

209
00:07:18,000 --> 00:07:26,000
其实我们说 Mac 下面把一个.app 的文件拖到你的 application 下面

210
00:07:26,000 --> 00:07:27,000
就可以得到这个

211
00:07:27,000 --> 00:07:30,000
或者说以这种方式你就完成了安装

212
00:07:30,000 --> 00:07:33,000
这种安装是一种仅仅是一次拷贝而已

213
00:07:33,000 --> 00:07:37,000
你安装一个程序的方法就是通过拷贝

214
00:07:37,000 --> 00:07:39,000
而什么是.app 呢

215
00:07:39,000 --> 00:07:46,000
就是可能我觉得这是一种不同的封装层级的思路的体现

216
00:07:46,000 --> 00:07:52,000
就是在 Mac 下面所谓 app 文件实际上只是一个 folder 而已

217
00:07:52,000 --> 00:07:53,000
它只是一个文件夹而已

218
00:07:53,000 --> 00:07:56,000
但如果你把它改名成了.app

219
00:07:56,000 --> 00:08:00,000
并且在里面加上一个叫做 info.plist 文件

220
00:08:00,000 --> 00:08:04,000
Mac 就会试图把它作为一个整体处理

221
00:08:04,000 --> 00:08:10,000
就是你不能很方便的直接打开它的看到那个 app 目录里面的内容

222
00:08:10,000 --> 00:08:12,000
但是你如果右键可以叫什么

223
00:08:12,000 --> 00:08:14,000
叫 show content

224
00:08:14,000 --> 00:08:16,000
show package content

225
00:08:16,000 --> 00:08:19,000
对这个功能就可以把它当成目录展开了

226
00:08:19,000 --> 00:08:26,000
这个是我们在分发给消费者的时候的一种分发时候的 package

227
00:08:26,000 --> 00:08:28,000
然后如果在服务端的话

228
00:08:28,000 --> 00:08:34,000
这种方式就非常非常多的不同的安装方式了

229
00:08:34,000 --> 00:08:37,000
我们待会讲到不同的发行版的时候一个一个说吧

230
00:08:37,000 --> 00:08:37,000
对

231
00:08:37,000 --> 00:08:44,000
所以其实你们看到我们在 package management 的两个不同的应用场合

232
00:08:44,000 --> 00:08:47,000
但其实他们还是有一丁的共性的

233
00:08:47,000 --> 00:08:49,000
就比如说至少我们要求说

234
00:08:49,000 --> 00:08:54,000
我们能够清楚的知道我们安装的是什么版本的一个 package

235
00:08:54,000 --> 00:08:54,000
对吧

236
00:08:54,000 --> 00:08:54,000
对

237
00:08:54,000 --> 00:08:59,000
我们知道有什么方法可以能够删掉它能够重复的安装

238
00:08:59,000 --> 00:09:01,000
对

239
00:09:01,000 --> 00:09:04,000
或者说比如说你把某一个文件修改

240
00:09:04,000 --> 00:09:05,000
就是意外修改了

241
00:09:05,000 --> 00:09:07,000
你能够把那个东西再拿回来

242
00:09:07,000 --> 00:09:12,000
还有就是说你安装的多个 package 之间

243
00:09:12,000 --> 00:09:15,000
最好不要互相有影响

244
00:09:15,000 --> 00:09:15,000
对吧

245
00:09:15,000 --> 00:09:17,000
比如说我安装了 A 这个包

246
00:09:17,000 --> 00:09:19,000
那我在安装 B 这个包

247
00:09:19,000 --> 00:09:20,000
他们会不会冲突啊

248
00:09:20,000 --> 00:09:21,000
我们最好能避免这种事情

249
00:09:21,000 --> 00:09:24,000
就是这是一些基本的需求吧

250
00:09:24,000 --> 00:09:24,000
对

251
00:09:24,000 --> 00:09:26,000
你在用 Windows 的时候

252
00:09:26,000 --> 00:09:28,000
有没有感觉到

253
00:09:28,000 --> 00:09:32,000
Windows 安装程序的过程是一个很神秘的过程

254
00:09:32,000 --> 00:09:34,000
或者是很复杂的过程

255
00:09:34,000 --> 00:09:36,000
其实我到现在

256
00:09:36,000 --> 00:09:39,000
我到今天为止也一直不是很清楚他们到底在做什么

257
00:09:39,000 --> 00:09:41,000
我想想有些什么事我能想得起的

258
00:09:41,000 --> 00:09:47,000
就主程序他们就作为一个就是常见的 Windows

259
00:09:47,000 --> 00:09:50,000
就符合 Windows 规范的安装程序

260
00:09:50,000 --> 00:09:54,000
他是把自己塞到那个叫 C 下面的 program files

261
00:09:54,000 --> 00:09:57,000
然后建一个自己公司的名字的目录

262
00:09:57,000 --> 00:10:00,000
他在下面建一个你这个程序的名字的目录

263
00:10:00,000 --> 00:10:02,000
然后再把东西放进去吧

264
00:10:02,000 --> 00:10:06,000
包括你的那些什么需要依赖的软件库啊

265
00:10:06,000 --> 00:10:08,000
还有什么静态文件对吧

266
00:10:08,000 --> 00:10:09,000
都放到那里面去

267
00:10:09,000 --> 00:10:12,000
然后还要加什么就是用户配置

268
00:10:12,000 --> 00:10:14,000
写到什么注册表里面对不对

269
00:10:14,000 --> 00:10:18,000
现在 Windows 8 里面好像又有一点什么不一样

270
00:10:18,000 --> 00:10:20,000
有个什么 apps data 这个目录了

271
00:10:20,000 --> 00:10:23,000
What 所以 Windows 8 要保持注册表吗

272
00:10:23,000 --> 00:10:24,000
都不可能吧

273
00:10:24,000 --> 00:10:26,000
注册表是 Windows 核心技术一部分

274
00:10:26,000 --> 00:10:29,000
这个不太清楚距离怎么样子

275
00:10:29,000 --> 00:10:32,000
但是我上次在虚拟机里面装的时候

276
00:10:32,000 --> 00:10:34,000
是发现有这么一些新的

277
00:10:34,000 --> 00:10:37,000
就是新是相对于之前 Windows XP

278
00:10:37,000 --> 00:10:39,000
或者是 Windows 7 的时代的东西

279
00:10:39,000 --> 00:10:42,000
但这个因为我不是这个 Windows 中毒用

280
00:10:42,000 --> 00:10:43,000
我也不太清楚他怎么也会说

281
00:10:43,000 --> 00:10:46,000
app data 会不会是 app 在运行时产生的数据呢

282
00:10:46,000 --> 00:10:47,000
有可能

283
00:10:47,000 --> 00:10:49,000
那个是什么 data

284
00:10:49,000 --> 00:10:51,000
我记得有个什么 data roaming folder

285
00:10:51,000 --> 00:10:53,000
是拿来做这件事情的

286
00:10:53,000 --> 00:10:54,000
ok

287
00:10:54,000 --> 00:10:54,000
anyway

288
00:10:54,000 --> 00:10:55,000
我也不算你说

289
00:10:55,000 --> 00:10:58,000
但其实我觉得目前让我觉得

290
00:10:58,000 --> 00:11:00,000
回想起来很疑惑的一点就是

291
00:11:00,000 --> 00:11:03,000
Windows 安装过程之中

292
00:11:03,000 --> 00:11:06,000
所产生的那些数据

293
00:11:06,000 --> 00:11:10,000
有时候在有些安装程序里面

294
00:11:10,000 --> 00:11:11,000
是可以看到的

295
00:11:11,000 --> 00:11:13,000
而另外一些安装程序里面是看不到的

296
00:11:13,000 --> 00:11:15,000
就比如说我记得

297
00:11:15,000 --> 00:11:17,000
Windows 在安装的时候会

298
00:11:17,000 --> 00:11:18,000
跳出来一个列表

299
00:11:18,000 --> 00:11:19,000
然后不停地告诉你

300
00:11:19,000 --> 00:11:21,000
哪个些文件被考到哪个地方

301
00:11:21,000 --> 00:11:24,000
然后最后可以重新的去审查一遍

302
00:11:24,000 --> 00:11:27,000
这个安装程序到底干了些什么

303
00:11:27,000 --> 00:11:29,000
当然我相信 99%的人不会这么做

304
00:11:29,000 --> 00:11:31,000
但是他提供了这种可能性

305
00:11:31,000 --> 00:11:33,000
而另外一些安装程序

306
00:11:33,000 --> 00:11:34,000
好像从来到尾就

307
00:11:34,000 --> 00:11:36,000
就一直 next

308
00:11:36,000 --> 00:11:36,000
对

309
00:11:36,000 --> 00:11:37,000
而且对

310
00:11:37,000 --> 00:11:39,000
有一个很著名的现象就是

311
00:11:39,000 --> 00:11:41,000
进度条从 0 到 99%需要

312
00:11:41,000 --> 00:11:43,000
大概一秒钟

313
00:11:43,000 --> 00:11:45,000
然后从 99%到 100%需要 10 分钟

314
00:11:45,000 --> 00:11:48,000
没算好

315
00:11:48,000 --> 00:11:49,000
对

316
00:11:49,000 --> 00:11:51,000
刚才你讲那个 WinApp 那种形式

317
00:11:51,000 --> 00:11:52,000
它是有一种

318
00:11:52,000 --> 00:11:53,000
我记得印象中是有一种

319
00:11:53,000 --> 00:11:56,000
专门的那种生成

320
00:11:56,000 --> 00:11:58,000
安装程序的程序

321
00:11:58,000 --> 00:11:58,000
对

322
00:11:58,000 --> 00:12:01,000
其实就是不同的 installer 的供应商

323
00:12:01,000 --> 00:12:02,000
不同而已

324
00:12:02,000 --> 00:12:05,000
然后之前有这种很常用的那种 installer

325
00:12:05,000 --> 00:12:08,000
就是可以让你有一个列表框

326
00:12:08,000 --> 00:12:10,000
显示每一个步骤在干嘛

327
00:12:10,000 --> 00:12:14,000
但其实这个是非常用户不友好的一个东西

328
00:12:14,000 --> 00:12:16,000
作为一个普通用户

329
00:12:16,000 --> 00:12:17,000
你为什么要知道 WinApp

330
00:12:17,000 --> 00:12:19,000
装了多少个文件在哪个位置

331
00:12:19,000 --> 00:12:19,000
是吧

332
00:12:19,000 --> 00:12:23,000
这个对你来说是没有什么实际价值的信息

333
00:12:23,000 --> 00:12:25,000
但除非你有什么洁癖之外

334
00:12:25,000 --> 00:12:26,000
说你卸载的时候

335
00:12:26,000 --> 00:12:31,000
一定要逐个对照着那个列表把那个文件一个一个删掉

336
00:12:31,000 --> 00:12:33,000
这还是一个约定

337
00:12:33,000 --> 00:12:34,000
我也不知道

338
00:12:34,000 --> 00:12:37,000
就有时候 Windows 上面提供的过渡信息

339
00:12:37,000 --> 00:12:40,000
在有些人看来是好事

340
00:12:40,000 --> 00:12:41,000
是一种

341
00:12:41,000 --> 00:12:45,000
是一种他时刻要看到电脑在做什么

342
00:12:45,000 --> 00:12:47,000
而反过来你给他一台

343
00:12:47,000 --> 00:12:54,000
比较不那么 intrusive 的操作系统的话

344
00:12:54,000 --> 00:12:57,000
他会觉得这操作系统怎么这么安静

345
00:12:57,000 --> 00:13:00,000
我在用你

346
00:13:00,000 --> 00:13:01,000
你给我点回应好吗

347
00:13:01,000 --> 00:13:04,000
就比如说我记得刚刚学那个 Linux 命令行的时候

348
00:13:04,000 --> 00:13:08,000
执行的命令

349
00:13:08,000 --> 00:13:10,000
他什么都不告诉你

350
00:13:10,000 --> 00:13:11,000
他就完了

351
00:13:11,000 --> 00:13:12,000
默认是

352
00:13:12,000 --> 00:13:14,000
默认这种状态是

353
00:13:14,000 --> 00:13:15,000
没什么可做的

354
00:13:15,000 --> 00:13:16,000
所以他就什么也不说

355
00:13:16,000 --> 00:13:19,000
这让我觉得当时非常的难以忍受

356
00:13:19,000 --> 00:13:21,000
因为在道子下面

357
00:13:21,000 --> 00:13:21,000
不管干嘛

358
00:13:21,000 --> 00:13:22,000
他都会告诉你

359
00:13:22,000 --> 00:13:22,000
我干了什么

360
00:13:22,000 --> 00:13:24,000
没什么可干的

361
00:13:24,000 --> 00:13:25,000
就算没什么可干的

362
00:13:25,000 --> 00:13:27,000
他也告诉你说没什么可干的

363
00:13:27,000 --> 00:13:28,000
对

364
00:13:28,000 --> 00:13:29,000
但切换到

365
00:13:29,000 --> 00:13:30,000
刚刚切换到 Linux

366
00:13:30,000 --> 00:13:31,000
就觉得哇好酷

367
00:13:31,000 --> 00:13:32,000
不习惯

368
00:13:32,000 --> 00:13:33,000
所以我觉得这可能也是

369
00:13:33,000 --> 00:13:36,000
那个什么 Unix 用户和

370
00:13:36,000 --> 00:13:39,000
或者类 Unix 系统的用户和

371
00:13:39,000 --> 00:13:42,000
那个 Windows 或 DOS 用户的本质区别吧

372
00:13:42,000 --> 00:13:46,000
就是可能用类 Unix 用户就觉得

373
00:13:46,000 --> 00:13:48,000
你们这个事情做了就好了

374
00:13:48,000 --> 00:13:49,000
只要没出什么问题

375
00:13:49,000 --> 00:13:50,000
就别来烦我

376
00:13:50,000 --> 00:13:52,000
但我还有别的烦心的事多着呢

377
00:13:52,000 --> 00:13:53,000
对吧

378
00:13:53,000 --> 00:13:55,000
然后因为他们很多都是

379
00:13:55,000 --> 00:13:57,000
所以早期都是什么专业用户啊

380
00:13:57,000 --> 00:13:58,000
或者这种程序员

381
00:13:58,000 --> 00:13:59,000
他知道在干嘛

382
00:13:59,000 --> 00:14:02,000
然后也知道结果是怎么样子

383
00:14:02,000 --> 00:14:03,000
但是像 DOS 啊

384
00:14:03,000 --> 00:14:06,000
问的这种面向消费者的

385
00:14:06,000 --> 00:14:09,000
他可能需要一些什么存在感

386
00:14:09,000 --> 00:14:10,000
他需要知道

387
00:14:10,000 --> 00:14:13,000
我花 20 刀买了这个程序

388
00:14:13,000 --> 00:14:14,000
他干嘛了呢

389
00:14:14,000 --> 00:14:14,000
最后对吧

390
00:14:14,000 --> 00:14:15,000
对

391
00:14:15,000 --> 00:14:17,000
有回应是用户友好的一种表现

392
00:14:17,000 --> 00:14:19,000
但没有回应则是

393
00:14:19,000 --> 00:14:21,000
pragmatical 的一种表现

394
00:14:21,000 --> 00:14:23,000
可以这么说

395
00:14:23,000 --> 00:14:26,000
我不确定是不是一定用户友好的

396
00:14:26,000 --> 00:14:27,000
有可能说那有些人

397
00:14:27,000 --> 00:14:29,000
就不要来烦我

398
00:14:29,000 --> 00:14:30,000
就割忙

399
00:14:30,000 --> 00:14:32,000
至少对于一个初学者来说

400
00:14:32,000 --> 00:14:35,000
没有回应其实是一个非常费解的

401
00:14:35,000 --> 00:14:35,000
behavior

402
00:14:35,000 --> 00:14:38,000
你必须要一上来就跟他说

403
00:14:38,000 --> 00:14:41,000
这个程序如果没有回应的话

404
00:14:41,000 --> 00:14:42,000
意味着他没有

405
00:14:42,000 --> 00:14:43,000
他认为自己没有什么可做的

406
00:14:43,000 --> 00:14:45,000
或者是他完成了该做的事情

407
00:14:45,000 --> 00:14:46,000
他就没有什么回应

408
00:14:46,000 --> 00:14:47,000
他只有

409
00:14:47,000 --> 00:14:49,000
他唯一有回应的时候就是报错

410
00:14:49,000 --> 00:14:51,000
对

411
00:14:51,000 --> 00:14:54,000
这是两种不同的这个思想

412
00:14:54,000 --> 00:14:56,000
觉得就看场景

413
00:14:56,000 --> 00:14:57,000
或者看你的这个应用吧

414
00:14:57,000 --> 00:14:58,000
有时候

415
00:14:58,000 --> 00:15:01,000
我的感觉倾向于就是

416
00:15:01,000 --> 00:15:03,000
你用一个新的软件

417
00:15:03,000 --> 00:15:05,000
或者是新的产品的时候

418
00:15:05,000 --> 00:15:07,000
你可能需要了解一下一些具体的状况

419
00:15:07,000 --> 00:15:08,000
但这肯定也是

420
00:15:08,000 --> 00:15:09,000
你可以从另一个角度说

421
00:15:09,000 --> 00:15:10,000
这个是产品做的不好

422
00:15:10,000 --> 00:15:12,000
需要我了解这么多细节

423
00:15:12,000 --> 00:15:13,000
其实没必要

424
00:15:13,000 --> 00:15:13,000
对吧

425
00:15:13,000 --> 00:15:15,000
但另外一种就是说

426
00:15:15,000 --> 00:15:17,000
反正你这个工作就好了

427
00:15:17,000 --> 00:15:18,000
不要那么多废话

428
00:15:18,000 --> 00:15:19,000
对

429
00:15:19,000 --> 00:15:21,000
对

430
00:15:21,000 --> 00:15:22,000
说回到我们的

431
00:15:22,000 --> 00:15:26,000
这个 package management 的话题上来

432
00:15:26,000 --> 00:15:26,000
就是

433
00:15:26,000 --> 00:15:28,000
还有一个问题

434
00:15:28,000 --> 00:15:29,000
Windows 上面

435
00:15:29,000 --> 00:15:31,000
当时一直让我疑惑的是

436
00:15:31,000 --> 00:15:33,000
假如一个程序同时需要

437
00:15:33,000 --> 00:15:36,000
一个库的两个版本

438
00:15:36,000 --> 00:15:37,000
Windows 到底是怎么解决的呢

439
00:15:37,000 --> 00:15:40,000
这不是没法解决吗

440
00:15:40,000 --> 00:15:41,000
他们后来

441
00:15:41,000 --> 00:15:43,000
才会出现那个叫做什么 DLLHell

442
00:15:43,000 --> 00:15:43,000
对

443
00:15:43,000 --> 00:15:46,000
那 DLLHell 具体来说

444
00:15:46,000 --> 00:15:47,000
其实就是

445
00:15:47,000 --> 00:15:51,000
A 软件需要某一个库的

446
00:15:51,000 --> 00:15:53,000
假版本

447
00:15:53,000 --> 00:15:55,000
B 软件需要这个库的 E 版本

448
00:15:55,000 --> 00:15:57,000
那 Windows 会同时保留

449
00:15:57,000 --> 00:15:58,000
假以两个版本

450
00:15:58,000 --> 00:15:58,000
对不对

451
00:15:58,000 --> 00:16:01,000
应该是这样的

452
00:16:01,000 --> 00:16:03,000
那假以两版本的差别在哪

453
00:16:03,000 --> 00:16:05,000
是在用户名

454
00:16:05,000 --> 00:16:06,000
这个文件名上

455
00:16:06,000 --> 00:16:07,000
有一个版本号的差别吗

456
00:16:07,000 --> 00:16:09,000
这个我不太清楚

457
00:16:09,000 --> 00:16:10,000
Windows 怎么具体怎么做

458
00:16:10,000 --> 00:16:11,000
但是这个在不同

459
00:16:11,000 --> 00:16:13,000
就在不同的这种

460
00:16:13,000 --> 00:16:16,000
环境里面都是存在的

461
00:16:16,000 --> 00:16:17,000
就是这个最麻烦的问题

462
00:16:17,000 --> 00:16:18,000
是因为同一个软件

463
00:16:18,000 --> 00:16:19,000
不同版本

464
00:16:19,000 --> 00:16:20,000
它可能是互不兼容的嘛

465
00:16:20,000 --> 00:16:22,000
然后如果

466
00:16:22,000 --> 00:16:23,000
就你刚才说的情况

467
00:16:23,000 --> 00:16:24,000
其实还好了

468
00:16:24,000 --> 00:16:26,000
就是它 A 程序的时候

469
00:16:26,000 --> 00:16:27,000
它掉 A 假版本好了

470
00:16:27,000 --> 00:16:28,000
B 程序掉 E 版本

471
00:16:28,000 --> 00:16:29,000
互相不冲突

472
00:16:29,000 --> 00:16:32,000
比较坑的是这种

473
00:16:32,000 --> 00:16:34,000
是比如说你自己要写一个 A 程序

474
00:16:34,000 --> 00:16:36,000
然后你可能需要这个

475
00:16:36,000 --> 00:16:38,000
某个库的 1.0 版本

476
00:16:38,000 --> 00:16:42,000
然后你同时还要使用另外一个库的

477
00:16:42,000 --> 00:16:44,000
另外一个库 B 吧

478
00:16:44,000 --> 00:16:47,000
然后 B 它可能需要这个

479
00:16:47,000 --> 00:16:49,000
同样你依赖的那个库的 1.2 版本

480
00:16:49,000 --> 00:16:51,000
这个时候你就很坑了

481
00:16:51,000 --> 00:16:53,000
你就是要同时支持不同的

482
00:16:53,000 --> 00:16:56,000
在同一个程序里面

483
00:16:56,000 --> 00:16:58,000
你要依赖同一个软件库的不同的版本

484
00:16:58,000 --> 00:17:02,000
就是会出现这种交叉

485
00:17:02,000 --> 00:17:03,000
还有这种

486
00:17:03,000 --> 00:17:03,000
这种

487
00:17:03,000 --> 00:17:07,000
这个怎么形容比较好

488
00:17:07,000 --> 00:17:08,000
循环依赖

489
00:17:08,000 --> 00:17:10,000
也不叫循环

490
00:17:10,000 --> 00:17:11,000
会是什么

491
00:17:11,000 --> 00:17:12,000
对

492
00:17:12,000 --> 00:17:13,000
有可能会是循环

493
00:17:13,000 --> 00:17:14,000
对对

494
00:17:14,000 --> 00:17:16,000
反正就很糟糕嘛

495
00:17:16,000 --> 00:17:16,000
这样

496
00:17:16,000 --> 00:17:17,000
对

497
00:17:17,000 --> 00:17:19,000
脑中立刻出现了一个

498
00:17:19,000 --> 00:17:21,000
一个错综复杂的树状图

499
00:17:21,000 --> 00:17:25,000
如果是个树还好啦

500
00:17:25,000 --> 00:17:27,000
对它就有可能是

501
00:17:27,000 --> 00:17:28,000
不会有 circular reference

502
00:17:28,000 --> 00:17:29,000
对它可能是个永相图

503
00:17:29,000 --> 00:17:31,000
就很搞死

504
00:17:31,000 --> 00:17:32,000
对

505
00:17:32,000 --> 00:17:32,000
对

506
00:17:32,000 --> 00:17:33,000
对

507
00:17:33,000 --> 00:17:36,000
那 Linux 上面就没有 dependency help

508
00:17:36,000 --> 00:17:37,000
就没有 DHL help

509
00:17:37,000 --> 00:17:38,000
其实也有吧

510
00:17:38,000 --> 00:17:40,000
其实也是有的

511
00:17:40,000 --> 00:17:42,000
是现在我们大部分用的发行版

512
00:17:42,000 --> 00:17:45,000
它都是通过这个原生的

513
00:17:45,000 --> 00:17:46,000
它们一般每个发行版

514
00:17:46,000 --> 00:17:47,000
会自带一个包管的系统

515
00:17:47,000 --> 00:17:49,000
然后那个包管的系统

516
00:17:49,000 --> 00:17:51,000
会想办法去解决这些冲突啊

517
00:17:51,000 --> 00:17:53,000
这些之类的问题

518
00:17:53,000 --> 00:17:56,000
而且那个发行版的维护者

519
00:17:56,000 --> 00:17:58,000
他在打包的时候

520
00:17:58,000 --> 00:18:00,000
他也会考虑说这个问题

521
00:18:00,000 --> 00:18:00,000
比如说你

522
00:18:00,000 --> 00:18:01,000
他比如

523
00:18:01,000 --> 00:18:03,000
这个拿 Dibon 来举例子吧

524
00:18:03,000 --> 00:18:04,000
他可能

525
00:18:04,000 --> 00:18:06,000
我发行的这个版本里面

526
00:18:06,000 --> 00:18:07,000
我把所有的都测过

527
00:18:07,000 --> 00:18:08,000
他们互相安装

528
00:18:08,000 --> 00:18:10,000
应该是没有问题的

529
00:18:10,000 --> 00:18:13,000
当然你如果有那种不同版本的

530
00:18:13,000 --> 00:18:15,000
这种酷的需求的话

531
00:18:15,000 --> 00:18:16,000
他会通过不同的文件名

532
00:18:16,000 --> 00:18:17,000
不同的路径来实现

533
00:18:17,000 --> 00:18:19,000
具体来说

534
00:18:19,000 --> 00:18:20,000
其实就是

535
00:18:20,000 --> 00:18:24,000
假如在 Linux 上面有一个

536
00:18:24,000 --> 00:18:28,000
就是和 Windows 一模一样的困境的话

537
00:18:28,000 --> 00:18:32,000
Linux 会支持你

538
00:18:32,000 --> 00:18:34,000
链接到不同版本的酷上面

539
00:18:34,000 --> 00:18:36,000
而这些酷

540
00:18:36,000 --> 00:18:38,000
每个酷会有一个默认的版本

541
00:18:39,000 --> 00:18:40,000
对

542
00:18:40,000 --> 00:18:42,000
一般会是用

543
00:18:42,000 --> 00:18:43,000
会用那个吧

544
00:18:43,000 --> 00:18:44,000
会用那个软链接

545
00:18:44,000 --> 00:18:46,000
会用一个符号链接来实现

546
00:18:46,000 --> 00:18:50,000
因为就有时候我在用

547
00:18:50,000 --> 00:18:52,000
Debian 的时候

548
00:18:52,000 --> 00:18:54,000
需要升级某一个

549
00:18:54,000 --> 00:18:57,000
我想要的工具到某一个侧的版本

550
00:18:57,000 --> 00:18:57,000
比如说 Ginbar

551
00:18:57,000 --> 00:18:59,000
然后

552
00:18:59,000 --> 00:19:03,000
使用其内置的包管理工具

553
00:19:03,000 --> 00:19:04,000
升级的时候

554
00:19:04,000 --> 00:19:04,000
包管理工具说

555
00:19:04,000 --> 00:19:07,000
这个东西依赖于那个东西

556
00:19:07,000 --> 00:19:07,000
但是

557
00:19:07,000 --> 00:19:10,000
那个东西的版本已经过旧了

558
00:19:10,000 --> 00:19:12,000
所以你需要一起升级那个东西

559
00:19:12,000 --> 00:19:13,000
如果说好玩

560
00:19:13,000 --> 00:19:14,000
那就一起升级它

561
00:19:14,000 --> 00:19:16,000
可是升级的时候又会说

562
00:19:16,000 --> 00:19:17,000
这个东西会安装

563
00:19:17,000 --> 00:19:18,000
那个

564
00:19:18,000 --> 00:19:22,000
就是 B 会再安装 C 的另外一个版本

565
00:19:22,000 --> 00:19:23,000
而 C 另外一个版本

566
00:19:23,000 --> 00:19:26,000
在你这边会跟 D 的什么东西冲突

567
00:19:26,000 --> 00:19:27,000
然后我就觉得

568
00:19:27,000 --> 00:19:30,000
怎么也是有这样的问题

569
00:19:30,000 --> 00:19:31,000
所以这样

570
00:19:31,000 --> 00:19:32,000
你其实在各个平台之下都是

571
00:19:32,000 --> 00:19:34,000
都是很难避免的

572
00:19:34,000 --> 00:19:35,000
可以说

573
00:19:35,000 --> 00:19:35,000
对

574
00:19:35,000 --> 00:19:38,000
其实我一直有一点想不明

575
00:19:38,000 --> 00:19:39,000
比如说

576
00:19:39,000 --> 00:19:40,000
为什么我们

577
00:19:40,000 --> 00:19:43,000
这一点可能在 Linux 上面比较明显

578
00:19:43,000 --> 00:19:45,000
就是我们经常会

579
00:19:45,000 --> 00:19:46,000
你装一个软件

580
00:19:46,000 --> 00:19:46,000
你会发现

581
00:19:46,000 --> 00:19:48,000
它会依赖一堆其他乱七八糟的

582
00:19:48,000 --> 00:19:51,000
其他的软件或者是酷

583
00:19:51,000 --> 00:19:55,000
然后 Linux 的大部分的发行版们的做法

584
00:19:55,000 --> 00:19:55,000
是说

585
00:19:55,000 --> 00:19:57,000
这个我们发行版做的时候

586
00:19:57,000 --> 00:19:58,000
就会把这个东西考虑好

587
00:19:58,000 --> 00:19:59,000
他们之间的依赖关系

588
00:19:59,000 --> 00:20:01,000
然后我们会告诉你

589
00:20:01,000 --> 00:20:01,000
怎么去

590
00:20:01,000 --> 00:20:04,000
会一套算法去解决这个依赖问题

591
00:20:04,000 --> 00:20:06,000
但其实你会发现

592
00:20:06,000 --> 00:20:08,000
这个时候你也会遇到那种情况

593
00:20:08,000 --> 00:20:09,000
就是如果你升级了某一个

594
00:20:09,000 --> 00:20:11,000
它没有被发行版

595
00:20:11,000 --> 00:20:15,000
在那个版本支持的时候

596
00:20:15,000 --> 00:20:16,000
你就没有办法升级

597
00:20:16,000 --> 00:20:17,000
你那猫很大的风险

598
00:20:17,000 --> 00:20:18,000
去打破这个

599
00:20:18,000 --> 00:20:19,000
或者用自己编译的包

600
00:20:19,000 --> 00:20:21,000
那我就不明白了

601
00:20:21,000 --> 00:20:22,000
为什么在现在

602
00:20:22,000 --> 00:20:25,000
你直接装一个染卷

603
00:20:25,000 --> 00:20:27,000
你把所有的依赖都打包好

604
00:20:27,000 --> 00:20:29,000
不要去和别人共享

605
00:20:29,000 --> 00:20:30,000
不就好了吗

606
00:20:30,000 --> 00:20:32,000
这个我觉得还是出于一个

607
00:20:32,000 --> 00:20:36,000
节省空间的考虑吧

608
00:20:36,000 --> 00:20:39,000
就如果你打包进去

609
00:20:39,000 --> 00:20:41,000
你自己需要的那个库

610
00:20:41,000 --> 00:20:42,000
而这个库其实很多很多

611
00:20:42,000 --> 00:20:43,000
其他程序都需要

612
00:20:43,000 --> 00:20:45,000
你总要找出一个界限吧

613
00:20:45,000 --> 00:20:45,000
就是哪

614
00:20:45,000 --> 00:20:48,000
到具体到什么库上

615
00:20:48,000 --> 00:20:50,000
你是一定要自己打包进去的

616
00:20:50,000 --> 00:20:53,000
这个是有这么一个问题

617
00:20:53,000 --> 00:20:56,000
就是如果这个的理由

618
00:20:56,000 --> 00:20:57,000
是因为为了节省空间的话

619
00:20:57,000 --> 00:21:00,000
那在现代硬件条件下

620
00:21:00,000 --> 00:21:01,000
根本就已经不成立了

621
00:21:01,000 --> 00:21:02,000
你现在磁盘

622
00:21:02,000 --> 00:21:04,000
你动则多少

623
00:21:04,000 --> 00:21:05,000
一两个梯对吧

624
00:21:05,000 --> 00:21:06,000
其实那个程序

625
00:21:06,000 --> 00:21:07,000
多大点空间

626
00:21:07,000 --> 00:21:08,000
不但并不仅仅是存储空间

627
00:21:08,000 --> 00:21:09,000
还有传输空间

628
00:21:09,000 --> 00:21:10,000
你需要考虑进去

629
00:21:10,000 --> 00:21:13,000
假如说我对啊

630
00:21:13,000 --> 00:21:15,000
我这个包从事无巨细

631
00:21:15,000 --> 00:21:16,000
从 Lip-C 一直到

632
00:21:16,000 --> 00:21:18,000
所有我可能用到的包

633
00:21:18,000 --> 00:21:20,000
我全都打包在一起

634
00:21:20,000 --> 00:21:22,000
就给用户下载

635
00:21:22,000 --> 00:21:24,000
这个好像有点二吧

636
00:21:24,000 --> 00:21:28,000
虽然是这么说

637
00:21:28,000 --> 00:21:30,000
但是其实你看在 OS 10 下面的

638
00:21:30,000 --> 00:21:32,000
大部分也是这么干的呀

639
00:21:32,000 --> 00:21:34,000
对吧

640
00:21:34,000 --> 00:21:36,000
其实倒是他们

641
00:21:36,000 --> 00:21:38,000
我后来也专门去想过这个问题

642
00:21:38,000 --> 00:21:39,000
也看了一些别人的说法

643
00:21:39,000 --> 00:21:41,000
其实有一个事情

644
00:21:41,000 --> 00:21:42,000
倒是我觉得是可以理解的

645
00:21:42,000 --> 00:21:44,000
就是因为你知道

646
00:21:44,000 --> 00:21:45,000
Linux 这种开放的系统吗

647
00:21:45,000 --> 00:21:49,000
他希望如果你在使用某个软件

648
00:21:49,000 --> 00:21:50,000
某个软件库的时候

649
00:21:50,000 --> 00:21:51,000
发现了有问题

650
00:21:51,000 --> 00:21:52,000
你可以去修正它

651
00:21:52,000 --> 00:21:54,000
那么他希望你把这个修正

652
00:21:54,000 --> 00:21:55,000
比如这个 bug fix

653
00:21:55,000 --> 00:21:56,000
能够也

654
00:21:56,000 --> 00:21:58,000
因为你做 bug fix

655
00:21:58,000 --> 00:21:58,000
其实在

656
00:21:58,000 --> 00:22:00,000
从某种意义上来说

657
00:22:00,000 --> 00:22:02,000
是在帮助编写这个软件

658
00:22:02,000 --> 00:22:03,000
对吧

659
00:22:03,000 --> 00:22:05,000
那么他希望把这种成果

660
00:22:05,000 --> 00:22:06,000
这种劳动的工作

661
00:22:06,000 --> 00:22:07,000
不要浪费掉

662
00:22:07,000 --> 00:22:08,000
就是你能够

663
00:22:08,000 --> 00:22:10,000
在你使用那个版本修正之后

664
00:22:10,000 --> 00:22:11,000
你也像他的这个上游

665
00:22:11,000 --> 00:22:12,000
就是这个

666
00:22:12,000 --> 00:22:12,000
Obscreen

667
00:22:12,000 --> 00:22:14,000
原作者那里

668
00:22:14,000 --> 00:22:16,000
能够把这个整合进去

669
00:22:16,000 --> 00:22:17,000
这样的话

670
00:22:17,000 --> 00:22:19,000
大家都可以享受到

671
00:22:19,000 --> 00:22:20,000
你修改这个 bug fix

672
00:22:20,000 --> 00:22:22,000
带来的好处

673
00:22:22,000 --> 00:22:22,000
对

674
00:22:22,000 --> 00:22:25,000
但我是觉得

675
00:22:25,000 --> 00:22:26,000
就是这是一种

676
00:22:26,000 --> 00:22:29,000
人为我为人人的精神状态

677
00:22:29,000 --> 00:22:29,000
对对对

678
00:22:29,000 --> 00:22:30,000
我就说这个

679
00:22:30,000 --> 00:22:30,000
他们的

680
00:22:30,000 --> 00:22:32,000
就是究其原因

681
00:22:32,000 --> 00:22:33,000
他们的理念就是这样子

682
00:22:33,000 --> 00:22:34,000
那么同样的道理

683
00:22:34,000 --> 00:22:36,000
如果每个程序

684
00:22:36,000 --> 00:22:37,000
都是打包自己的

685
00:22:37,000 --> 00:22:39,000
依赖的那东西

686
00:22:39,000 --> 00:22:40,000
那么他肯定会出现

687
00:22:40,000 --> 00:22:42,000
比如说同样你的这个

688
00:22:42,000 --> 00:22:43,000
两个程序会依赖

689
00:22:43,000 --> 00:22:44,000
比如说同一个

690
00:22:44,000 --> 00:22:46,000
OpenSSL 的这个包

691
00:22:46,000 --> 00:22:46,000
对吧

692
00:22:46,000 --> 00:22:47,000
然后他可能是依赖了

693
00:22:47,000 --> 00:22:48,000
不同的版本

694
00:22:48,000 --> 00:22:51,000
但是可能比如说他 OpenSSL 发现一个安全漏洞

695
00:22:51,000 --> 00:22:54,000
然后某个系统升级的时候就把它升了

696
00:22:54,000 --> 00:22:56,000
但是如果你用的是自己打包到包的话

697
00:22:56,000 --> 00:22:59,000
那你可能你必须再重新发布一下你这个软件

698
00:22:59,000 --> 00:23:02,000
你这个才会有那个安全补丁打上去

699
00:23:02,000 --> 00:23:04,000
但如果你把这个事情交给系统来做

700
00:23:04,000 --> 00:23:05,000
就是说这个系统说

701
00:23:05,000 --> 00:23:10,000
我把这个整个你们需要用到的 OpenSSL 这个包的补丁都打了

702
00:23:10,000 --> 00:23:11,000
你们只要重启一下

703
00:23:11,000 --> 00:23:13,000
就重新这个 app 关掉重新启动一下

704
00:23:13,000 --> 00:23:16,000
就可以享受到这个带来的安全的好处

705
00:23:16,000 --> 00:23:19,000
而不是说要等每一个开发者重新去做一遍

706
00:23:19,000 --> 00:23:22,000
就这里其实也是有一定的劳动力上面的节省

707
00:23:22,000 --> 00:23:25,000
对所以说其实这是一个取舍

708
00:23:25,000 --> 00:23:26,000
有一个取舍在里面

709
00:23:26,000 --> 00:23:28,000
有个 Trad off

710
00:23:28,000 --> 00:23:30,000
就是你要么选择

711
00:23:30,000 --> 00:23:34,000
同时发布更多的依赖

712
00:23:34,000 --> 00:23:39,000
来避免用户可能产生的包冲突的问题

713
00:23:39,000 --> 00:23:45,000
而另一方面你也可以选择尽量减少自己所发布的软件

714
00:23:45,000 --> 00:23:49,000
其内置的内部包括的依赖

715
00:23:49,000 --> 00:23:54,000
连来享受这种有一个平台吧

716
00:23:54,000 --> 00:24:01,000
加密号平台在那边的便捷和稳定性或者说安全性

717
00:24:01,000 --> 00:24:06,000
对这也可以看到就是刚才讲这两种不同的思路和这个做法

718
00:24:06,000 --> 00:24:09,000
就一般像那种像什么商用的

719
00:24:09,000 --> 00:24:11,000
就是消费者级别用的

720
00:24:11,000 --> 00:24:13,000
然后是为了简单方便

721
00:24:13,000 --> 00:24:15,000
然后互相不冲突的话会采用

722
00:24:15,000 --> 00:24:19,000
像刚才讲的把所有的东西都打包到自己里面去

723
00:24:19,000 --> 00:24:23,000
然后你就依赖于一个比较稳定的系统提供里的一些包

724
00:24:23,000 --> 00:24:25,000
像 Mac 上面就这样子

725
00:24:25,000 --> 00:24:26,000
Windows 上面应该很多也是这样子的

726
00:24:26,000 --> 00:24:28,000
因为它要减少这个下载的体积

727
00:24:28,000 --> 00:24:30,000
刚才你说这是一个原因之一

728
00:24:30,000 --> 00:24:32,000
但是像 Linux 这种发行版

729
00:24:32,000 --> 00:24:35,000
它很多就是说我们整个系统都是开源的

730
00:24:35,000 --> 00:24:35,000
对吧

731
00:24:35,000 --> 00:24:37,000
那我们肯定是希望能够把这种

732
00:24:37,000 --> 00:24:42,000
就是能够把各种合力都集中起来

733
00:24:42,000 --> 00:24:43,000
就不要大家都去自己搞一份了

734
00:24:43,000 --> 00:24:48,000
对但实际上现在 Linux 社区面临的一个问题是

735
00:24:48,000 --> 00:24:51,000
Linux 已经越来越不是一种

736
00:24:51,000 --> 00:24:55,000
人人为我为人人的模型了

737
00:24:55,000 --> 00:24:59,000
就是有很多的企业级的用户在用 Linux

738
00:24:59,000 --> 00:25:04,000
而从来他们基本上是不会去考虑或者是有这个利益

739
00:25:04,000 --> 00:25:09,000
所以驱使让他们能够把自己的某些修正反馈给上游的

740
00:25:09,000 --> 00:25:14,000
对于他们来说 Linux 最重要的就是不要有冲突

741
00:25:14,000 --> 00:25:16,000
然后部署起来简单快捷好用

742
00:25:16,000 --> 00:25:19,000
就能够稳定可靠的运行就好了

743
00:25:19,000 --> 00:25:23,000
不要我才不会跟你扯那些什么回不回馈到上游去

744
00:25:23,000 --> 00:25:23,000
是不是

745
00:25:23,000 --> 00:25:24,000
对没错

746
00:25:24,000 --> 00:25:28,000
其实这个行为是会被谴责的吧

747
00:25:28,000 --> 00:25:29,000
也不是吧

748
00:25:29,000 --> 00:25:34,000
因为毕竟你看很多 Linux 发行商 Red Hat 直流

749
00:25:34,000 --> 00:25:38,000
他们其实很大一部分工作或者很大一部分利润的来源

750
00:25:38,000 --> 00:25:41,000
就来自于对于企业级用户提供支持

751
00:25:41,000 --> 00:25:47,000
所以其实是有人来付钱让他们来做事让用户满意的

752
00:25:47,000 --> 00:25:51,000
对对就是还是根据你这个需求来

753
00:25:51,000 --> 00:25:54,000
就是说如果你需求是稳定可靠的话

754
00:25:54,000 --> 00:25:56,000
你可能要考虑一下采取刚才那种方式

755
00:25:56,000 --> 00:26:04,000
就是你宁可放弃别人帮你修复了这个 bug 带来的好处

756
00:26:04,000 --> 00:26:07,000
你也要说我不管了那个风险太大了

757
00:26:07,000 --> 00:26:07,000
对吧

758
00:26:07,000 --> 00:26:08,000
你改一改

759
00:26:08,000 --> 00:26:09,000
我说不定我这个应用就 crash 了

760
00:26:09,000 --> 00:26:10,000
对

761
00:26:10,000 --> 00:26:12,000
还是追求那个是第一目标

762
00:26:12,000 --> 00:26:15,000
不过这里说到 Linux

763
00:26:15,000 --> 00:26:19,000
我们可以这里就顺便提一下

764
00:26:19,000 --> 00:26:23,000
就是在大部分的这种比较大的 Linux 发行版

765
00:26:23,000 --> 00:26:25,000
它都有自己的一个一套系统吧

766
00:26:25,000 --> 00:26:27,000
一套这个什么包管理系统

767
00:26:27,000 --> 00:26:27,000
对

768
00:26:27,000 --> 00:26:31,000
然后这里可能比较著名的两个

769
00:26:31,000 --> 00:26:36,000
一个是以 Debian 为首的那个叫 DB 那个体系

770
00:26:36,000 --> 00:26:39,000
然后一个是 Red Hat 为头的叫什么 RPM

771
00:26:39,000 --> 00:26:44,000
对 RPM 最开始是 Red Hat Package Management 的缩写吧

772
00:26:44,000 --> 00:26:52,000
但后来现在好像是 somehow 缩写变了变成就叫 RPM Package Management System

773
00:26:52,000 --> 00:26:58,000
就是它变成了一个像 GNO 那样的叫什么 Recursive Recursive Acronym

774
00:26:58,000 --> 00:27:00,000
对对对

775
00:27:00,000 --> 00:27:02,000
就不是很久了

776
00:27:02,000 --> 00:27:05,000
那么其实有一个问题

777
00:27:05,000 --> 00:27:10,000
我其实是没有怎么接触过这个 RPM 这套体系的

778
00:27:10,000 --> 00:27:14,000
因为我大部分都是在 Debian 或者是 Ubuntu 系统上面用

779
00:27:14,000 --> 00:27:16,000
所以我觉得用 Debian 还挺顺手的

780
00:27:16,000 --> 00:27:19,000
就我不知道你有没有接触过 RPM 这套

781
00:27:19,000 --> 00:27:23,000
在进入目前的公司之前也是从来没有接触过 RPM

782
00:27:23,000 --> 00:27:25,000
或者说接触过但非常有限

783
00:27:25,000 --> 00:27:28,000
但是我们公司目前在用 CentOS

784
00:27:28,000 --> 00:27:34,000
所以在服务器的环境上面的确是在跑 RPM

785
00:27:34,000 --> 00:27:40,000
但我的所有的私人的包括 VPS 或者是讯息全都是 Debian

786
00:27:40,000 --> 00:27:47,000
所以我也可以说算是一个 Debian 的阵营的人吧

787
00:27:47,000 --> 00:27:49,000
就其实挺可笑的

788
00:27:49,000 --> 00:27:52,000
就是 Debian 和 RPM 都可以有 Flymore

789
00:27:52,000 --> 00:27:55,000
这个还是很大的一个坑

790
00:27:55,000 --> 00:27:56,000
对

791
00:27:56,000 --> 00:28:00,000
知乎上之前有一个也是就这个坑吧

792
00:28:00,000 --> 00:28:04,000
有写的就是两边都有支持 Debian 这一派的

793
00:28:04,000 --> 00:28:06,000
然后有支持 RPM 这一派的

794
00:28:06,000 --> 00:28:07,000
他们在那边吵

795
00:28:07,000 --> 00:28:08,000
但是他们在那边吵

796
00:28:08,000 --> 00:28:11,000
这个也不是中国首次了

797
00:28:11,000 --> 00:28:15,000
也就是什么很多国外地方就已经吵过

798
00:28:15,000 --> 00:28:19,000
然后中国的 Ninux 的区域早就吵过无数遍

799
00:28:19,000 --> 00:28:21,000
不过最近就是前一阵子吧

800
00:28:21,000 --> 00:28:22,000
知乎上又在吵这个事

801
00:28:22,000 --> 00:28:25,000
但是因为我自己个人并没有什么太多的经验呢

802
00:28:25,000 --> 00:28:28,000
所以我觉得没什么特别感觉

803
00:28:28,000 --> 00:28:29,000
如果今天没有什么经验

804
00:28:29,000 --> 00:28:31,000
我们可以直接跳过这个话题

805
00:28:31,000 --> 00:28:37,000
对总结来说就是我的印象好像是做运维的一方

806
00:28:37,000 --> 00:28:40,000
好像会比较偏向于 RPM

807
00:28:40,000 --> 00:28:41,000
对

808
00:28:41,000 --> 00:28:44,000
然后做开发的这一方会觉得 Debian 比较好

809
00:28:44,000 --> 00:28:46,000
因为 RPM 比较强调于

810
00:28:46,000 --> 00:28:48,000
怎么说呢

811
00:28:48,000 --> 00:28:52,000
就是强调一个包一定要来自于 upstream

812
00:28:52,000 --> 00:28:53,000
然后一定要正统

813
00:28:53,000 --> 00:28:56,000
然后一定不能是 patch 过的

814
00:28:56,000 --> 00:28:57,000
嗯

815
00:28:57,000 --> 00:28:58,000
嗯

816
00:28:58,000 --> 00:28:59,000
然后嗯

817
00:28:59,000 --> 00:29:04,000
就是企业级的部署用 RPM 相对来说无痛一点

818
00:29:04,000 --> 00:29:08,000
而 Debian 包的优点则是它相对来说一般比较新

819
00:29:08,000 --> 00:29:09,000
嗯

820
00:29:09,000 --> 00:29:12,000
然后它可以在包里面加上 patch

821
00:29:12,000 --> 00:29:13,000
然后

822
00:29:13,000 --> 00:29:15,000
就其实我作为一个用户

823
00:29:15,000 --> 00:29:16,000
我看了这么久

824
00:29:16,000 --> 00:29:17,000
我的理解就是说

825
00:29:17,000 --> 00:29:18,000
呃

826
00:29:18,000 --> 00:29:19,000
因为作为开发者

827
00:29:19,000 --> 00:29:23,000
你可能会经常需要一些比较稍微新一点的工具对吧

828
00:29:23,000 --> 00:29:24,000
对

829
00:29:24,000 --> 00:29:27,000
你需要用的一些呃比较方便安装的东西

830
00:29:27,000 --> 00:29:30,000
但是就是 Debian 可以让你比较方便的安装

831
00:29:30,000 --> 00:29:31,000
也不做最新吧

832
00:29:31,000 --> 00:29:33,000
或者是较新的版本

833
00:29:33,000 --> 00:29:35,000
然后能够也比较方便的就做一些修改

834
00:29:35,000 --> 00:29:36,000
然后再发布出去

835
00:29:36,000 --> 00:29:37,000
对

836
00:29:37,000 --> 00:29:38,000
RPM 的话你刚才讲就是

837
00:29:38,000 --> 00:29:40,000
首先它包的数量

838
00:29:40,000 --> 00:29:43,000
应该是比 Debian 的包要少的多

839
00:29:43,000 --> 00:29:44,000
小心说话

840
00:29:44,000 --> 00:29:45,000
说不定就好不定咋

841
00:29:45,000 --> 00:29:46,000
OK

842
00:29:46,000 --> 00:29:47,000
我我应该

843
00:29:47,000 --> 00:29:50,000
但这点我是看到就是在草的两边

844
00:29:50,000 --> 00:29:51,000
对这个事情都没有异议的

845
00:29:51,000 --> 00:29:53,000
这个应该还是比较安全的一个说法

846
00:29:53,000 --> 00:29:54,000
OK

847
00:29:54,000 --> 00:29:55,000
啊

848
00:29:55,000 --> 00:29:57,000
然后就说但是它每一个就是

849
00:29:57,000 --> 00:29:59,000
它有的包的那个就是

850
00:29:59,000 --> 00:30:00,000
是

851
00:30:00,000 --> 00:30:02,000
如果它有这个包是有的话

852
00:30:02,000 --> 00:30:03,000
它是做的不错

853
00:30:03,000 --> 00:30:04,000
就是稳定可靠

854
00:30:04,000 --> 00:30:05,000
对

855
00:30:05,000 --> 00:30:06,000
而且反复经过很多次测试

856
00:30:06,000 --> 00:30:08,000
就我听过一个版本

857
00:30:08,000 --> 00:30:11,000
就说所谓 Debian 的 Stable

858
00:30:11,000 --> 00:30:14,000
就是 Debian 的 Stable 版本

859
00:30:14,000 --> 00:30:16,000
其中的测试其实也不是很多

860
00:30:16,000 --> 00:30:19,000
就真的不算不得真的是 Stable

861
00:30:19,000 --> 00:30:22,000
里面还是比较不稳定的

862
00:30:22,000 --> 00:30:23,000
不

863
00:30:23,000 --> 00:30:24,000
那个 Debian 的哲学其实也很简单

864
00:30:24,000 --> 00:30:25,000
它也不叫什么测试

865
00:30:25,000 --> 00:30:27,000
就是它先测一测

866
00:30:27,000 --> 00:30:28,000
然后放到那个什么

867
00:30:28,000 --> 00:30:31,000
Unstable 吧还是哪里

868
00:30:31,000 --> 00:30:32,000
然后再到 Testing 里面

869
00:30:32,000 --> 00:30:34,000
再看看有什么 Bug

870
00:30:34,000 --> 00:30:35,000
没有稳定的话

871
00:30:35,000 --> 00:30:37,000
这再就挪到那个 Stable 里面去了吧

872
00:30:37,000 --> 00:30:38,000
应该是这么一个流程

873
00:30:38,000 --> 00:30:40,000
因为它本来就是一个

874
00:30:40,000 --> 00:30:42,000
并不是像 Red Hat 的那种

875
00:30:42,000 --> 00:30:45,000
有这种企业能够去专门去做这种事情

876
00:30:45,000 --> 00:30:48,000
还是靠这个大家这个维护者

877
00:30:48,000 --> 00:30:50,000
虽然有很多很多去做一个做

878
00:30:50,000 --> 00:30:54,000
还是一个比较相对松散吧我觉得

879
00:30:54,000 --> 00:30:55,000
对

880
00:30:55,000 --> 00:30:58,000
对对说到这个 Debian 的发行版后面

881
00:30:58,000 --> 00:31:00,000
好像的确没有一个

882
00:31:00,000 --> 00:31:03,000
一个一个怎么说财团在支持

883
00:31:03,000 --> 00:31:05,000
对那就是 Debian 是一个就靠社区嘛

884
00:31:05,000 --> 00:31:06,000
对

885
00:31:06,000 --> 00:31:10,000
就不像那个 Red Hat 人还有这个公司的商业支持

886
00:31:10,000 --> 00:31:12,000
但就这里有问题就是说

887
00:31:12,000 --> 00:31:15,000
到底商业支持能到什么程度

888
00:31:15,000 --> 00:31:17,000
或者是他支持的是不是刚好你需要的

889
00:31:17,000 --> 00:31:18,000
这就是另外一回事

890
00:31:18,000 --> 00:31:21,000
但反正就是只要你肯花钱

891
00:31:21,000 --> 00:31:22,000
问题总是可以解决的

892
00:31:22,000 --> 00:31:24,000
现在问题是说没钱的就怎么办

893
00:31:24,000 --> 00:31:25,000
对

894
00:31:25,000 --> 00:31:30,000
那就有这么两个问题

895
00:31:30,000 --> 00:31:33,000
还有一个叫 YAM 是哪里面的

896
00:31:33,000 --> 00:31:36,000
YAM 是就是这么说吧

897
00:31:36,000 --> 00:31:39,000
就是 apt 是 Debian 的高层

898
00:31:39,000 --> 00:31:44,000
Debian 包系统就是最底层的工具是 D package

899
00:31:44,000 --> 00:31:48,000
然后 rpm 包的管理器就叫 rpm

900
00:31:48,000 --> 00:31:51,000
但是 apt 是基于 D package 的一个比较高的工具

901
00:31:51,000 --> 00:31:56,000
它会去帮你做什么 dependency management 之类的

902
00:31:56,000 --> 00:32:06,000
而 YAM 和 Zipper 则是分别来自于 Red Hat 和 SUSE 的两个基于 rpm 管理工具的高层工具

903
00:32:06,000 --> 00:32:07,000
OK

904
00:32:07,000 --> 00:32:08,000
对

905
00:32:08,000 --> 00:32:09,000
对

906
00:32:09,000 --> 00:32:11,000
这个也是一个挺有趣的一个事情

907
00:32:11,000 --> 00:32:15,000
就是他们我们会把这个包管理分的层级分的很细

908
00:32:15,000 --> 00:32:18,000
就像你说有些底层的工具去做一些最基础的事情

909
00:32:18,000 --> 00:32:20,000
然后上面高层工具去做一些

910
00:32:20,000 --> 00:32:24,000
把这个整个流程变得没有那么繁琐

911
00:32:24,000 --> 00:32:27,000
然后界面对用户友好那么一丁点的事情

912
00:32:27,000 --> 00:32:28,000
对

913
00:32:28,000 --> 00:32:30,000
但我觉得这个友好的其实就是

914
00:32:30,000 --> 00:32:31,000
不是一丁点

915
00:32:31,000 --> 00:32:32,000
因为

916
00:32:32,000 --> 00:32:33,000
比如说

917
00:32:33,000 --> 00:32:34,000
很多的

918
00:32:34,000 --> 00:32:35,000
这一套工具

919
00:32:35,000 --> 00:32:36,000
apt 这套工具

920
00:32:36,000 --> 00:32:40,000
可以帮你自动去分析这个包需要依赖于哪些东西

921
00:32:40,000 --> 00:32:45,000
然后自动帮你给出一个解决依赖的解决方案

922
00:32:45,000 --> 00:32:47,000
对

923
00:32:47,000 --> 00:32:51,000
如果你自己要一个一个用这个 dpackage 的工具去搞的话

924
00:32:51,000 --> 00:32:52,000
或者 rpm 自己去弄的话

925
00:32:52,000 --> 00:32:54,000
其实非常非常繁琐

926
00:32:54,000 --> 00:32:55,000
我记得

927
00:32:55,000 --> 00:32:56,000
对

928
00:32:56,000 --> 00:32:57,000
我刚上大学的时候

929
00:32:57,000 --> 00:33:00,000
白弄 linux 的当时的疑点之一就是

930
00:33:00,000 --> 00:33:02,000
安装程序真的一定要用 rpm 吗

931
00:33:02,000 --> 00:33:03,000
然后

932
00:33:03,000 --> 00:33:07,000
为什么就不能有一个什么东西给我

933
00:33:07,000 --> 00:33:09,000
然后我双击一下就安好了

934
00:33:09,000 --> 00:33:10,000
那

935
00:33:10,000 --> 00:33:12,000
现在还是不能

936
00:33:12,000 --> 00:33:14,000
你还是得敲几个命

937
00:33:14,000 --> 00:33:16,000
命令然后让他安装这个和那个

938
00:33:16,000 --> 00:33:18,000
你得知道那个命令是什么

939
00:33:18,000 --> 00:33:20,000
然后你得知道那个命令的参数怎么样

940
00:33:20,000 --> 00:33:21,000
然后

941
00:33:21,000 --> 00:33:23,000
就如果一切正常

942
00:33:23,000 --> 00:33:24,000
在大部分情况下应该是一切正常

943
00:33:24,000 --> 00:33:26,000
他能够顺利的给你安装完没问题

944
00:33:26,000 --> 00:33:28,000
但如果他报错了

945
00:33:28,000 --> 00:33:29,000
然后你怎么办

946
00:33:29,000 --> 00:33:30,000
对

947
00:33:30,000 --> 00:33:32,000
但这个时候就是经验就要 kick in 了

948
00:33:32,000 --> 00:33:34,000
经验就要拍照

949
00:33:34,000 --> 00:33:35,000
对

950
00:33:35,000 --> 00:33:36,000
我有这样一个印象

951
00:33:36,000 --> 00:33:38,000
就是在早期 windows

952
00:33:38,000 --> 00:33:40,000
在 windows 上面安装程序

953
00:33:40,000 --> 00:33:42,000
或者说在 Mac 上面安装程序

954
00:33:42,000 --> 00:33:45,000
远远方便于在 links 上面

955
00:33:45,000 --> 00:33:47,000
但是从某一个时间点开始

956
00:33:47,000 --> 00:33:49,000
我

957
00:33:49,000 --> 00:33:51,000
somehow 得到的这种印象

958
00:33:51,000 --> 00:33:54,000
就是在 links 上面得到我想要的工具

959
00:33:54,000 --> 00:33:55,000
反而要比 windows 上面简单了

960
00:33:55,000 --> 00:33:56,000
因为

961
00:33:56,000 --> 00:33:57,000
嗯

962
00:33:57,000 --> 00:33:58,000
links 比如说 debian 吧

963
00:33:58,000 --> 00:34:01,000
我想要用什么东西

964
00:34:01,000 --> 00:34:02,000
然后

965
00:34:02,000 --> 00:34:03,000
比如说我在网上看

966
00:34:03,000 --> 00:34:04,000
别人说啊

967
00:34:04,000 --> 00:34:05,000
这个工具很好用

968
00:34:05,000 --> 00:34:08,000
然后我就直接 appicage

969
00:34:08,000 --> 00:34:09,000
然后 search

970
00:34:09,000 --> 00:34:10,000
我要找的东西

971
00:34:10,000 --> 00:34:11,000
在哪儿

972
00:34:11,000 --> 00:34:12,000
然后 appicat install

973
00:34:12,000 --> 00:34:13,000
我有了

974
00:34:13,000 --> 00:34:14,000
可是在 windows 上面

975
00:34:14,000 --> 00:34:15,000
就要去先去网站

976
00:34:15,000 --> 00:34:16,000
下载一个东西

977
00:34:16,000 --> 00:34:17,000
然后双击那个文件

978
00:34:17,000 --> 00:34:18,000
然后一路 next

979
00:34:18,000 --> 00:34:23,000
然后最后才要去双击什么一个快捷方式之类的

980
00:34:23,000 --> 00:34:24,000
才可以运行我需要的东西

981
00:34:24,000 --> 00:34:25,000
对对

982
00:34:25,000 --> 00:34:26,000
就是在某一个时间点

983
00:34:26,000 --> 00:34:28,000
Linux 社区

984
00:34:28,000 --> 00:34:29,000
或者 Linux 文化

985
00:34:29,000 --> 00:34:35,000
创造出了这么一种自动化安装某一个傻瓜性

986
00:34:35,000 --> 00:34:38,000
傻瓜是一条龙安装软件的功能

987
00:34:38,000 --> 00:34:39,000
对

988
00:34:39,000 --> 00:34:41,000
而或者你可以从某种角度这么讲

989
00:34:41,000 --> 00:34:44,000
就是我们现在包括 iOS 上面那个 app store 也好

990
00:34:44,000 --> 00:34:46,000
还是在 Mac 上面的 app store 也好

991
00:34:46,000 --> 00:34:49,000
还包括 windows 现在也在他们也有个 windowsapp store 里面

992
00:34:49,000 --> 00:34:54,000
其实他们做的事情就是把 Linux 这种包管理器

993
00:34:54,000 --> 00:34:57,000
就各个发行板的包管理器的功能

994
00:34:57,000 --> 00:35:01,000
通过一种图形化的方式比较友好的呈现给普通消费者

995
00:35:01,000 --> 00:35:04,000
而不是说只是像我们这种维护什么后端的

996
00:35:04,000 --> 00:35:07,000
或者用 Ninux 的这种小众的 geek 用户

997
00:35:07,000 --> 00:35:08,000
对没错

998
00:35:08,000 --> 00:35:09,000
所以从这个意义上

999
00:35:09,000 --> 00:35:12,000
蒋零 4 对于人类的最大贡献之一

1000
00:35:12,000 --> 00:35:18,000
就是发明了 app store 的某种 geek 方式

1001
00:35:18,000 --> 00:35:21,000
某种 hardcore 形式

1002
00:35:21,000 --> 00:35:24,000
所以就是我们刚刚现在讲

1003
00:35:24,000 --> 00:35:28,000
现在在谈的这些各种发行板的就是包管理器的话

1004
00:35:28,000 --> 00:35:32,000
就是其实我们就等同一次在讲某个发行板的 app store 一样

1005
00:35:32,000 --> 00:35:33,000
没错

1006
00:35:33,000 --> 00:35:35,000
然后对我觉得你刚才说的那点很好

1007
00:35:35,000 --> 00:35:38,000
就是之前最开始我接触 Linux

1008
00:35:38,000 --> 00:35:42,000
就是确实是非常对普通用户不友好

1009
00:35:42,000 --> 00:35:43,000
因为那个时候也不是特别熟悉

1010
00:35:43,000 --> 00:35:44,000
然后就慢慢去摸索

1011
00:35:44,000 --> 00:35:46,000
有些东西完全不懂

1012
00:35:46,000 --> 00:35:48,000
就是概念上都不一样

1013
00:35:48,000 --> 00:35:51,000
跟 windows 上面的那种逻辑

1014
00:35:51,000 --> 00:35:54,000
那种你对这个世界的认知都是不一样的

1015
00:35:54,000 --> 00:35:56,000
后来它慢慢改

1016
00:35:56,000 --> 00:35:57,000
我印象中大概是在

1017
00:35:57,000 --> 00:35:59,000
就我拿一个 ubuntu

1018
00:35:59,000 --> 00:36:00,000
这个有可能

1019
00:36:00,000 --> 00:36:02,000
因为它有那个年份的时间比较清楚

1020
00:36:02,000 --> 00:36:05,000
我觉得大概是在 ubuntu 9 和 10

1021
00:36:05,000 --> 00:36:07,000
大概之后就是 10 年左右开始

1022
00:36:07,000 --> 00:36:11,000
所以在起码跟我个人使用的经验来讲

1023
00:36:11,000 --> 00:36:14,000
在 ubuntu 这种就是 debbit 系统上安装程序

1024
00:36:14,000 --> 00:36:16,000
是一个相当还蛮愉悦的体验

1025
00:36:17,000 --> 00:36:20,000
就是越来越少遇到包管理器

1026
00:36:20,000 --> 00:36:22,000
不能帮你解决的这种版本冲突的时候

1027
00:36:22,000 --> 00:36:24,000
就现在基本上很少遇得到

1028
00:36:24,000 --> 00:36:28,000
对其实可以感受到它的整个工具

1029
00:36:28,000 --> 00:36:31,000
有一套慢慢磨合好的这样一个过程在里面

1030
00:36:31,000 --> 00:36:32,000
对对

1031
00:36:32,000 --> 00:36:36,000
不过但是这里还是有一个小小的代价

1032
00:36:36,000 --> 00:36:38,000
就是刚才你讲你说

1033
00:36:38,000 --> 00:36:41,000
现在有什么去一个在 apt 里面搜一下

1034
00:36:41,000 --> 00:36:43,000
然后装个软件很方便

1035
00:36:43,000 --> 00:36:45,000
但问题是说这个是有前提的

1036
00:36:45,000 --> 00:36:48,000
前提就是首先这个软件得是在 apt

1037
00:36:48,000 --> 00:36:50,000
那个仓库里面能找到的

1038
00:36:50,000 --> 00:36:51,000
就是有人把它提交上去了

1039
00:36:51,000 --> 00:36:53,000
要么是这个软件的作者也好

1040
00:36:53,000 --> 00:36:55,000
要么是一个第三方的这个发行版的

1041
00:36:55,000 --> 00:36:57,000
这个维护的人员把它加进去了

1042
00:36:57,000 --> 00:37:01,000
但如果你要找一个不是在那里面的程序的话

1043
00:37:01,000 --> 00:37:03,000
就这个过程还是蛮辛苦的

1044
00:37:03,000 --> 00:37:05,000
对这个就比较算有一个

1045
00:37:05,000 --> 00:37:09,000
算有一个叫什么积攒动量的过程

1046
00:37:09,000 --> 00:37:14,000
就是当你这个软件包管理系统大到的一个一定程度

1047
00:37:14,000 --> 00:37:20,000
那么你可以理解为任何一个不会在这个 apt source

1048
00:37:20,000 --> 00:37:23,000
就是 apt 的原仓库之中出现的软件

1049
00:37:23,000 --> 00:37:26,000
都不是什么太大或者是值得你去信赖的软件

1050
00:37:26,000 --> 00:37:30,000
因为你说这个要小心

1051
00:37:30,000 --> 00:37:32,000
因为有些很小众的软件

1052
00:37:32,000 --> 00:37:35,000
它可能只是因为作者也没怎么去维护它

1053
00:37:35,000 --> 00:37:37,000
因为可能比较简单或者是没爱好

1054
00:37:37,000 --> 00:37:38,000
对或者是比较偏壮一点

1055
00:37:38,000 --> 00:37:39,000
这就是一个问题

1056
00:37:39,000 --> 00:37:44,000
就是如果这个软件简单到不需要 apt 来安装的话

1057
00:37:44,000 --> 00:37:48,000
那你很可能安装它的过程也不会比使用 apt

1058
00:37:48,000 --> 00:37:49,000
安装其他人间复杂多少

1059
00:37:49,000 --> 00:37:54,000
对这是一个这个是一个不错的这个 argument

1060
00:37:54,000 --> 00:37:56,000
但是有些是也软件挺复杂

1061
00:37:56,000 --> 00:37:58,000
这个我印象还蛮深的

1062
00:37:58,000 --> 00:38:00,000
就是我不知道有段时间

1063
00:38:00,000 --> 00:38:03,000
我在经常折腾一些视频的东西

1064
00:38:03,000 --> 00:38:07,000
然后你知道在 Linux 处理视频到目前为止

1065
00:38:07,000 --> 00:38:09,000
还不是一个比较好的体验

1066
00:38:09,000 --> 00:38:11,000
所以它在这一块还是比较弱的

1067
00:38:11,000 --> 00:38:13,000
那比如说最简单一个例子

1068
00:38:13,000 --> 00:38:16,000
你要重新封装像 MP 4 啊

1069
00:38:16,000 --> 00:38:17,000
这些视频的一些格式

1070
00:38:17,000 --> 00:38:19,000
它会用到一些软件包

1071
00:38:19,000 --> 00:38:20,000
然后这些软件包呢

1072
00:38:20,000 --> 00:38:22,000
因为一个是因为版权的原因

1073
00:38:22,000 --> 00:38:25,000
它不能够直接提供这个二进制的发行版

1074
00:38:25,000 --> 00:38:29,000
另外一个就是它的有些可能用到的这种代码

1075
00:38:29,000 --> 00:38:34,000
它可能跟某一个 Linux 发行版的这个授权协议有点不兼容

1076
00:38:34,000 --> 00:38:37,000
就是它就处于这种比较尴尬的状态

1077
00:38:37,000 --> 00:38:38,000
就是爹娘都不爱

1078
00:38:38,000 --> 00:38:41,000
你就发行版的维护者没法把它装

1079
00:38:41,000 --> 00:38:42,000
没法把它加进去

1080
00:38:42,000 --> 00:38:44,000
因为有这个这个软件协议的问题

1081
00:38:44,000 --> 00:38:47,000
然后它自己就没有没有没有没有办法提供二进制的版本

1082
00:38:47,000 --> 00:38:49,000
你得自己去下载圆满来包

1083
00:38:49,000 --> 00:38:50,000
因为有那个法律的问题

1084
00:38:50,000 --> 00:38:51,000
对

1085
00:38:51,000 --> 00:38:53,000
就遇到这种情况你就很很沮丧

1086
00:38:53,000 --> 00:38:54,000
你作为一个用户的话

1087
00:38:54,000 --> 00:38:55,000
你只能想办法说啊好吧

1088
00:38:55,000 --> 00:38:58,000
那我做梦做怎么去把这个

1089
00:38:58,000 --> 00:39:01,000
就是它的 source 抓回来

1090
00:39:01,000 --> 00:39:04,000
然后根据它的手册一个去安装

1091
00:39:04,000 --> 00:39:06,000
这里就是提到这么一个概念

1092
00:39:06,000 --> 00:39:11,000
就是说从安装别人给你包好的软件包

1093
00:39:11,000 --> 00:39:16,000
和是从这个直接那个软件的原始出处去下载它的原文件回来

1094
00:39:16,000 --> 00:39:18,000
从自己自行编译安装

1095
00:39:18,000 --> 00:39:20,000
这是两种比较大的区别吧

1096
00:39:20,000 --> 00:39:21,000
对

1097
00:39:21,000 --> 00:39:23,000
这是这可能也是当初从

1098
00:39:23,000 --> 00:39:26,000
Windows 切换到 Linux 上面的一个很大的迷思

1099
00:39:26,000 --> 00:39:30,000
就是当时我的理解是在 Linux 上面

1100
00:39:30,000 --> 00:39:32,000
你要安装一个程序的唯一方法

1101
00:39:32,000 --> 00:39:35,000
就是先找到这个程序的原代码

1102
00:39:35,000 --> 00:39:37,000
然后自己在 Linux 上面编译它

1103
00:39:37,000 --> 00:39:41,000
但是我一方面觉得这个反向法是太酷了

1104
00:39:41,000 --> 00:39:44,000
然后另一方面又觉得这不是有一点就是

1105
00:39:44,000 --> 00:39:46,000
你不觉得太 creezy

1106
00:39:46,000 --> 00:39:47,000
就为什么呢

1107
00:39:47,000 --> 00:39:50,000
为什么你不能给我一个已经编译好的二练程序

1108
00:39:50,000 --> 00:39:51,000
让我来运行呢

1109
00:39:51,000 --> 00:39:52,000
对

1110
00:39:52,000 --> 00:39:54,000
这里其实又有涉及到另外一个问题

1111
00:39:54,000 --> 00:39:57,000
就是有些人会觉得我要有原代码

1112
00:39:57,000 --> 00:39:59,000
然后因为你知道很多软件在编译的时候

1113
00:39:59,000 --> 00:40:00,000
就会有各种各样的选项

1114
00:40:00,000 --> 00:40:03,000
有的人会觉得说我装这个软件

1115
00:40:03,000 --> 00:40:06,000
我只需要编译我需要的那一部分功能

1116
00:40:06,000 --> 00:40:07,000
然后我不需要那部分功能

1117
00:40:07,000 --> 00:40:09,000
我就不编译

1118
00:40:09,000 --> 00:40:12,000
这样我的代码会出来结果会小

1119
00:40:12,000 --> 00:40:14,000
然后可能运行的会快一点

1120
00:40:14,000 --> 00:40:16,000
或者说更从一个务实的角度来说

1121
00:40:16,000 --> 00:40:18,000
如果我这个软件包里面没有那些

1122
00:40:18,000 --> 00:40:19,000
我不需要的用于的代码

1123
00:40:19,000 --> 00:40:21,000
那么是不是我可以在某种程度上

1124
00:40:21,000 --> 00:40:25,000
减小我的安全的这个叫做暴露的被攻击的面

1125
00:40:25,000 --> 00:40:26,000
对吧

1126
00:40:26,000 --> 00:40:27,000
对

1127
00:40:27,000 --> 00:40:29,000
这也是一种想法

1128
00:40:29,000 --> 00:40:30,000
然后另外一种想法就是说

1129
00:40:30,000 --> 00:40:33,000
如果每一个软件你都要根据你自己的方法

1130
00:40:33,000 --> 00:40:37,000
去定义一遍这个安装的编译的选项

1131
00:40:37,000 --> 00:40:40,000
那么会导致同一个软件所有的安装的选项

1132
00:40:40,000 --> 00:40:43,000
安装的最终结果都是有一点点不一样的

1133
00:40:43,000 --> 00:40:46,000
这个的话会导致支持起来

1134
00:40:46,000 --> 00:40:48,000
就是软件做的要给你提供一定的支持

1135
00:40:48,000 --> 00:40:52,000
或者是你要除错起来就非常困难

1136
00:40:52,000 --> 00:40:56,000
因为别人很可能没有办法在它编译的结果上重现你的问题

1137
00:40:56,000 --> 00:40:57,000
对

1138
00:40:57,000 --> 00:40:59,000
cannot reproduce won't fix

1139
00:40:59,000 --> 00:41:02,000
这是所有的软件维护者最喜欢选的一个选项

1140
00:41:02,000 --> 00:41:03,000
对

1141
00:41:03,000 --> 00:41:07,000
所以这里其实也看就是在自由灵活和这个

1142
00:41:07,000 --> 00:41:08,000
就是你要什么

1143
00:41:08,000 --> 00:41:15,000
你要定制化和你要用这种大众产品的之间也是有一个取舍的

1144
00:41:15,000 --> 00:41:18,000
这个取舍就是说定制化当然好处刚才也讲了

1145
00:41:18,000 --> 00:41:24,000
比如说有可能更安全可能性能更好可能更灵活对吧

1146
00:41:24,000 --> 00:41:27,000
但是你要牺牲的就是这个可维护性

1147
00:41:27,000 --> 00:41:29,000
另外一个讲究就是说大众产品说

1148
00:41:29,000 --> 00:41:31,000
那我大家都用一个版本有个问题的话

1149
00:41:31,000 --> 00:41:33,000
我们都在这个一个版本里面修

1150
00:41:33,000 --> 00:41:35,000
就一个编译方式出来修

1151
00:41:35,000 --> 00:41:36,000
修好大家都能够受益对吧

1152
00:41:36,000 --> 00:41:39,000
所以这是一个也是两种不同的思路吧

1153
00:41:39,000 --> 00:41:40,000
对

1154
00:41:40,000 --> 00:41:47,000
但是其实并不是所有的包裹管理器都是从这个二进制的

1155
00:41:47,000 --> 00:41:49,000
其实大部分都不是二进制的方式吧

1156
00:41:49,000 --> 00:41:51,000
现在很难说了

1157
00:41:51,000 --> 00:41:52,000
一半一半

1158
00:41:52,000 --> 00:41:53,000
一半一半吧

1159
00:41:53,000 --> 00:41:55,000
但至少在 BSD 上面

1160
00:41:55,000 --> 00:41:57,000
BSD 的 Ports

1161
00:41:57,000 --> 00:42:01,000
基本上还全都是以获得圆满的方式

1162
00:42:01,000 --> 00:42:05,000
现编译的方式来安装软件的

1163
00:42:05,000 --> 00:42:06,000
对

1164
00:42:06,000 --> 00:42:10,000
这些点我觉得其实当时我接触的时候觉得还是蛮特别的

1165
00:42:10,000 --> 00:42:13,000
就是因为首先一个就是 BSD 的

1166
00:42:13,000 --> 00:42:15,000
就以那个 FreeBSD 这个例子来说

1167
00:42:15,000 --> 00:42:16,000
因为我以前用过

1168
00:42:16,000 --> 00:42:19,000
就它那个叫做 Ports System

1169
00:42:19,000 --> 00:42:21,000
就比较它做的比较好

1170
00:42:21,000 --> 00:42:24,000
因为首先这个 FreeBSD 这个系统整个维护的比较好

1171
00:42:24,000 --> 00:42:27,000
因为它是一个它不像 Linux 这种是一个

1172
00:42:27,000 --> 00:42:29,000
以内核和这个 User Space

1173
00:42:29,000 --> 00:42:33,000
UserLand 是分开的

1174
00:42:33,000 --> 00:42:35,000
对它是两波人在维护

1175
00:42:35,000 --> 00:42:38,000
然后这个发行版是说要把这两个包在一起

1176
00:42:38,000 --> 00:42:39,000
然后给你一个定制的产品

1177
00:42:39,000 --> 00:42:42,000
但就会导致很多各种各样极奇怪怪的发行版

1178
00:42:42,000 --> 00:42:45,000
你会导致各种各样的什么包管理的问题

1179
00:42:45,000 --> 00:42:49,000
但 FreeBSD 这个起码它是有一套人马在维护的

1180
00:42:49,000 --> 00:42:51,000
然后它可以确保说

1181
00:42:51,000 --> 00:42:53,000
它给你的这套 Port

1182
00:42:53,000 --> 00:42:54,000
这个 Port File

1183
00:42:54,000 --> 00:42:56,000
你是一定可以在你那些机械上编译成功

1184
00:42:56,000 --> 00:42:57,000
然后装上的

1185
00:42:57,000 --> 00:42:58,000
对

1186
00:42:58,000 --> 00:43:03,000
其实 Linux 的生态有一点像就是有一个人

1187
00:43:03,000 --> 00:43:05,000
或者有个人马做出了这么一个 Kernel 来

1188
00:43:05,000 --> 00:43:07,000
然后围绕这个 Kernel

1189
00:43:07,000 --> 00:43:10,000
围绕这个 Kernel 有一些人在上面插各种各样的插件

1190
00:43:10,000 --> 00:43:13,000
然后会造成

1191
00:43:13,000 --> 00:43:16,000
其实我倒觉得 Linux 在这方面

1192
00:43:16,000 --> 00:43:22,000
它的所谓 Kernel Space 和 User Space 的分野是比较模糊的

1193
00:43:22,000 --> 00:43:25,000
Linux 真正意义上的 Kernel

1194
00:43:25,000 --> 00:43:26,000
其实只有那么一点点

1195
00:43:26,000 --> 00:43:30,000
而后面外面很大一个外围都是 UserLand

1196
00:43:30,000 --> 00:43:31,000
可以这么理解

1197
00:43:31,000 --> 00:43:33,000
而在 BSD 这边则

1198
00:43:33,000 --> 00:43:35,000
你可以说每一个 BSD 发行版

1199
00:43:35,000 --> 00:43:40,000
都有一个明确的 Kernel Space 和一个明确的 UserLand

1200
00:43:40,000 --> 00:43:43,000
而且他们都是同一帮人

1201
00:43:43,000 --> 00:43:44,000
对

1202
00:43:44,000 --> 00:43:45,000
而且是同一帮人

1203
00:43:45,000 --> 00:43:46,000
这个很重要

1204
00:43:46,000 --> 00:43:49,000
而且版本号好像是比较一致的

1205
00:43:49,000 --> 00:43:50,000
不像你在一个 Linux 下面

1206
00:43:50,000 --> 00:43:53,000
你可能有一个软件的版本特别新

1207
00:43:53,000 --> 00:43:56,000
而另外其他部分则基本上是

1208
00:43:56,000 --> 00:43:59,000
可能要倒退那么两三年的水平

1209
00:43:59,000 --> 00:44:08,000
而在 BSD 上面你会基本上在每一个发行版里面拿到比较年份相近的一批工具

1210
00:44:09,000 --> 00:44:10,000
对

1211
00:44:10,000 --> 00:44:12,000
但是我也很久没有用过 BSD 了

1212
00:44:12,000 --> 00:44:17,000
其实现在我们看从实际使用的情况来看

1213
00:44:17,000 --> 00:44:20,000
也是就是 BSD 的市场份额应该是比较小了已经

1214
00:44:20,000 --> 00:44:21,000
对

1215
00:44:21,000 --> 00:44:23,000
而且因为我有一个比较明显的例子

1216
00:44:23,000 --> 00:44:28,000
就是上一节目我们不是提到一个叫做 Varnish 的反向代理缓存软件

1217
00:44:28,000 --> 00:44:29,000
对

1218
00:44:29,000 --> 00:44:32,000
它本来最开始的时候是在 FreeBSD 上写的

1219
00:44:32,000 --> 00:44:35,000
那个开发者也是 FreeBSD 的内核开发者之一

1220
00:44:35,000 --> 00:44:38,000
然后后来发现他们在做商业化的时候

1221
00:44:38,000 --> 00:44:41,000
其实大部分人都是在 Linux 上面跑他们的系统的

1222
00:44:41,000 --> 00:44:46,000
然后他们现在连做新的那些扩展的功能都是先考虑

1223
00:44:46,000 --> 00:44:48,000
或者是只考虑 Linux 版本了

1224
00:44:48,000 --> 00:44:50,000
然后 FreeBSD 那边都已经不怎么管

1225
00:44:50,000 --> 00:44:51,000
对

1226
00:44:51,000 --> 00:44:54,000
这也是一个多少有点可惜的现状吧

1227
00:44:54,000 --> 00:44:55,000
对

1228
00:44:55,000 --> 00:45:00,000
因为其实如果 FreeBSD 流行像 Linux 上面流行的话

1229
00:45:00,000 --> 00:45:02,000
那我们如果这些 Mac 用会就比较爽

1230
00:45:02,000 --> 00:45:05,000
那就是 BSD 内核它切换起来

1231
00:45:05,000 --> 00:45:07,000
就是包括一些那种系统调用啊

1232
00:45:07,000 --> 00:45:09,000
还有这种软件的包啊

1233
00:45:09,000 --> 00:45:11,000
还有这种这种包括很多这种规范啊

1234
00:45:11,000 --> 00:45:13,000
行为方式都是比较接近的嘛

1235
00:45:13,000 --> 00:45:14,000
对

1236
00:45:14,000 --> 00:45:15,000
会爽一点

1237
00:45:15,000 --> 00:45:17,000
但其实现在就比较糟糕了

1238
00:45:17,000 --> 00:45:20,000
比如说我们现在跑服务器上面大部分都是 Linux

1239
00:45:20,000 --> 00:45:24,000
但是 Mac 上面又是另外就是 BSD 的内核嘛

1240
00:45:24,000 --> 00:45:27,000
这样的话就经常会不 match

1241
00:45:27,000 --> 00:45:30,000
你要搞一下这个还是挺折腾的

1242
00:45:30,000 --> 00:45:31,000
对

1243
00:45:31,000 --> 00:45:34,000
我觉得不管怎么说 Mac 作为一套

1244
00:45:34,000 --> 00:45:37,000
或者是 Darwin 这个东西作为一套 Free

1245
00:45:37,000 --> 00:45:39,000
作为一套 BSD 系统

1246
00:45:39,000 --> 00:45:44,000
还是可以从开源界受益的

1247
00:45:44,000 --> 00:45:46,000
这点已经是很不错的了

1248
00:45:46,000 --> 00:45:49,000
就无论至少我们有

1249
00:45:49,000 --> 00:45:51,000
至少我们有第三方工具可以用

1250
00:45:51,000 --> 00:45:54,000
就至少我们有 Linux 上面的很多很多工具

1251
00:45:54,000 --> 00:45:58,000
可以通过 Homebrew 或者是 Mac ports 来直接拿来用

1252
00:45:58,000 --> 00:46:00,000
这已经是很好的一点了

1253
00:46:00,000 --> 00:46:03,000
反观 Linux 用户可能就没有那么幸运

1254
00:46:03,000 --> 00:46:07,000
这里就说到了在 Esset 上面的

1255
00:46:07,000 --> 00:46:11,000
就除了官方苹果 App Store 之外

1256
00:46:11,000 --> 00:46:15,000
我们还其实有很古老的最早的叫做 Fink

1257
00:46:15,000 --> 00:46:16,000
对

1258
00:46:16,000 --> 00:46:18,000
这么一个包管理器 F-I-N-K

1259
00:46:18,000 --> 00:46:19,000
对 Fink

1260
00:46:19,000 --> 00:46:20,000
这个其实我自己是没有用的

1261
00:46:20,000 --> 00:46:21,000
我也没有用过

1262
00:46:21,000 --> 00:46:22,000
我只是听说过

1263
00:46:22,000 --> 00:46:23,000
对

1264
00:46:23,000 --> 00:46:24,000
听说过咱们两个

1265
00:46:24,000 --> 00:46:25,000
对在用 Mac ports 的时候

1266
00:46:25,000 --> 00:46:27,000
听说过说已经

1267
00:46:27,000 --> 00:46:28,000
就是什么

1268
00:46:28,000 --> 00:46:29,000
deprecated

1269
00:46:29,000 --> 00:46:30,000
It's a better thing

1270
00:46:30,000 --> 00:46:31,000
forget about thing

1271
00:46:31,000 --> 00:46:32,000
use Mac ports

1272
00:46:32,000 --> 00:46:33,000
OK

1273
00:46:33,000 --> 00:46:37,000
对所以我接触到在 Mac 上面用的这种类似

1274
00:46:37,000 --> 00:46:38,000
Linux 包管理器

1275
00:46:38,000 --> 00:46:40,000
其实就是从 Mac ports 开始的

1276
00:46:40,000 --> 00:46:42,000
然后 Mac ports 又是可以

1277
00:46:42,000 --> 00:46:43,000
因为你看名字看得出来

1278
00:46:43,000 --> 00:46:45,000
它是那种 Port 系统

1279
00:46:45,000 --> 00:46:46,000
就是跟 BSD 的 Port

1280
00:46:46,000 --> 00:46:48,000
是有一点点相似之处的

1281
00:46:48,000 --> 00:46:49,000
我觉得

1282
00:46:49,000 --> 00:46:51,000
很大程度上是同一套系统

1283
00:46:51,000 --> 00:46:53,000
只不过 BSDPort

1284
00:46:53,000 --> 00:46:54,000
如果我

1285
00:46:54,000 --> 00:46:55,000
当然我的 BSD

1286
00:46:55,000 --> 00:46:57,000
可能我已经有三五年没碰过 BSD

1287
00:46:57,000 --> 00:46:59,000
但如果我的 BSD

1288
00:46:59,000 --> 00:47:01,000
知识没有欺骗我的话

1289
00:47:01,000 --> 00:47:02,000
BSD 上面的 Port

1290
00:47:02,000 --> 00:47:03,000
其实就是一个 make 法

1291
00:47:03,000 --> 00:47:08,000
就是你要进到那个 Port 的怎么录下面

1292
00:47:08,000 --> 00:47:10,000
然后手动运行 make

1293
00:47:10,000 --> 00:47:11,000
make install 之类的

1294
00:47:11,000 --> 00:47:16,000
然后 Mac ports 跟这套系统唯一差别就是

1295
00:47:16,000 --> 00:47:18,000
Mac port 会自动帮你运行 make

1296
00:47:18,000 --> 00:47:19,000
make 这个过程

1297
00:47:19,000 --> 00:47:20,000
仅此而已

1298
00:47:20,000 --> 00:47:21,000
对

1299
00:47:21,000 --> 00:47:22,000
就是它

1300
00:47:22,000 --> 00:47:25,000
你整个你下回来的还是软件的原始代码

1301
00:47:25,000 --> 00:47:27,000
然后你要去通过这个手工编译

1302
00:47:27,000 --> 00:47:29,000
但这编译之前你要先装一些

1303
00:47:29,000 --> 00:47:30,000
什么编译器啊

1304
00:47:30,000 --> 00:47:31,000
那些是另外的基础需求

1305
00:47:31,000 --> 00:47:32,000
这些都是

1306
00:47:32,000 --> 00:47:33,000
对

1307
00:47:33,000 --> 00:47:34,000
然后

1308
00:47:34,000 --> 00:47:36,000
然后 Mac ports 唯一的

1309
00:47:37,000 --> 00:47:39,000
特点就是它是用 TCL

1310
00:47:39,000 --> 00:47:41,000
把整套编译和安装的过程

1311
00:47:41,000 --> 00:47:42,000
帮你自动化的

1312
00:47:42,000 --> 00:47:43,000
然后当时还有一个优点就是

1313
00:47:43,000 --> 00:47:49,000
但是还有一个优点就是当时有一些那个苹果的员工在直接的贡献这个系统

1314
00:47:49,000 --> 00:47:51,000
所以他们有很大的优势

1315
00:47:51,000 --> 00:47:53,000
就他们知道自己干什么

1316
00:47:53,000 --> 00:47:55,000
而且他们可以做的比较

1317
00:47:55,000 --> 00:47:56,000
比较

1318
00:47:56,000 --> 00:47:57,000
比较

1319
00:47:57,000 --> 00:47:58,000
比较

1320
00:47:58,000 --> 00:47:59,000
比较

1321
00:47:59,000 --> 00:48:00,000
对

1322
00:48:00,000 --> 00:48:02,000
其实就在相当长一段时间里面

1323
00:48:02,000 --> 00:48:05,000
那个 OS 10 的用户就做软件开发者的话

1324
00:48:05,000 --> 00:48:08,000
或多或少的也会接触到这个 Mac ports 这个系统

1325
00:48:08,000 --> 00:48:09,000
要么你自己写一点

1326
00:48:09,000 --> 00:48:10,000
要么就装别人的东西

1327
00:48:10,000 --> 00:48:13,000
不过在我有限的记忆里面

1328
00:48:13,000 --> 00:48:16,000
Mac ports 的使用体验并不是特别好

1329
00:48:16,000 --> 00:48:21,000
因为经常会有这种各种各样的问题导致安装不成功啊编译失败

1330
00:48:21,000 --> 00:48:24,000
然后这个时候会就会进入一个比较混乱的状态

1331
00:48:24,000 --> 00:48:27,000
你要去找那个你要去看那个它的那个 port file

1332
00:48:27,000 --> 00:48:30,000
然后去看安装到哪一步了哪一步失败了

1333
00:48:30,000 --> 00:48:32,000
要清理哪些垃圾文件怎么怎么的

1334
00:48:32,000 --> 00:48:35,000
对它的用户界面不是那么的友好

1335
00:48:35,000 --> 00:48:36,000
嗯哼

1336
00:48:36,000 --> 00:48:37,000
嗯

1337
00:48:37,000 --> 00:48:40,000
所以后来就有一个叫做这个 Homebrew

1338
00:48:40,000 --> 00:48:42,000
我们通常简称它叫 brew

1339
00:48:42,000 --> 00:48:43,000
横空出世啊

1340
00:48:43,000 --> 00:48:44,000
对

1341
00:48:44,000 --> 00:48:47,000
然后一刀解决了这个问题

1342
00:48:47,000 --> 00:48:50,000
然后现在基本上 Mac ports 也是被淘汰掉了

1343
00:48:50,000 --> 00:48:51,000
嗯

1344
00:48:51,000 --> 00:48:52,000
还是有一

1345
00:48:52,000 --> 00:48:53,000
对怎么说呢

1346
00:48:53,000 --> 00:48:56,000
就是 Mac ports 还是有一批死忠的拥躬在那边用

1347
00:48:56,000 --> 00:48:59,000
然后他们会觉得 Homebrew 就有点像

1348
00:48:59,000 --> 00:49:02,000
就像所有沾染了 Ruby 的东西一样

1349
00:49:02,000 --> 00:49:05,000
都是一群喝了酷 kis 的

1350
00:49:05,000 --> 00:49:09,000
喝了酷 kis 的这个这个这个小屁孩们在那边闹

1351
00:49:09,000 --> 00:49:10,000
说这个比较好

1352
00:49:10,000 --> 00:49:11,000
嗯哼

1353
00:49:11,000 --> 00:49:13,000
所以这你提到了

1354
00:49:13,000 --> 00:49:16,000
就是刚才你讲那个 Mac ports 的那 port file

1355
00:49:16,000 --> 00:49:19,000
那 port file 是用 TCL 脚本来写的

1356
00:49:19,000 --> 00:49:20,000
嗯

1357
00:49:20,000 --> 00:49:21,000
然后 Homebrew

1358
00:49:21,000 --> 00:49:22,000
TCL 脚本

1359
00:49:22,000 --> 00:49:23,000
嗯

1360
00:49:23,000 --> 00:49:24,000
是吗

1361
00:49:24,000 --> 00:49:25,000
你就

1362
00:49:25,000 --> 00:49:26,000
应该是应该是没做的

1363
00:49:26,000 --> 00:49:27,000
呃

1364
00:49:27,000 --> 00:49:28,000
Mac port profile 是 TCL 写的

1365
00:49:28,000 --> 00:49:29,000
对

1366
00:49:29,000 --> 00:49:32,000
然后这个 Homebrew 的这个安装的

1367
00:49:32,000 --> 00:49:34,000
它他们叫一个 formula 对吧

1368
00:49:34,000 --> 00:49:37,000
是一个 Ruby 的 class 文件其实是

1369
00:49:37,000 --> 00:49:39,000
嗯

1370
00:49:39,000 --> 00:49:42,000
因为其实我个人对 Ruby 没什么特别感觉

1371
00:49:42,000 --> 00:49:43,000
我不知道你觉得怎么样

1372
00:49:43,000 --> 00:49:44,000
呃

1373
00:49:44,000 --> 00:49:47,000
具体的 Homebrew 的 formula 上面

1374
00:49:47,000 --> 00:49:48,000
它其实你可以把它理解

1375
00:49:48,000 --> 00:49:49,000
当成一做

1376
00:49:49,000 --> 00:49:51,000
当成一门 DSL 来学习嘛

1377
00:49:51,000 --> 00:49:52,000
所以嗯

1378
00:49:52,000 --> 00:49:53,000
对对就是这样的

1379
00:49:53,000 --> 00:49:56,000
你可以完全不懂那个 Ruby 里面的那个

1380
00:49:56,000 --> 00:49:59,000
那个什么两个竖线中间加一个

1381
00:49:59,000 --> 00:50:00,000
呃

1382
00:50:00,000 --> 00:50:01,000
变量名到底是什么意思

1383
00:50:01,000 --> 00:50:04,000
你也可以去操作 Homebrew 的 formula

1384
00:50:04,000 --> 00:50:06,000
已经一糊涂画瓢嘛

1385
00:50:06,000 --> 00:50:07,000
嗯

1386
00:50:07,000 --> 00:50:09,000
所以它其实是把它做的相当

1387
00:50:09,000 --> 00:50:10,000
呃

1388
00:50:10,000 --> 00:50:12,000
傻瓜化的这么一个一个一个一个 formula

1389
00:50:12,000 --> 00:50:13,000
我刚刚写

1390
00:50:13,000 --> 00:50:16,000
就我记得你还在推特上问过我说

1391
00:50:16,000 --> 00:50:19,000
你难道没有那个写过自己的 formula 吗

1392
00:50:19,000 --> 00:50:21,000
我当时很很很老实

1393
00:50:21,000 --> 00:50:23,000
而且很骄傲的说没有

1394
00:50:23,000 --> 00:50:24,000
哈哈哈哈

1395
00:50:24,000 --> 00:50:26,000
我都还写过一两

1396
00:50:26,000 --> 00:50:27,000
哎

1397
00:50:27,000 --> 00:50:28,000
还是两三个

1398
00:50:28,000 --> 00:50:29,000
对但后来我也写了

1399
00:50:29,000 --> 00:50:32,000
但我觉得就是即便像我这样对 Ruby

1400
00:50:32,000 --> 00:50:33,000
其实没有什么太深了解的人

1401
00:50:33,000 --> 00:50:35,000
也是可以呃

1402
00:50:35,000 --> 00:50:39,000
驾轻就熟的去去去操作一个 formula

1403
00:50:39,000 --> 00:50:40,000
方案的

1404
00:50:40,000 --> 00:50:42,000
所以不是很不是没有什么太大问题

1405
00:50:43,000 --> 00:50:44,000
对

1406
00:50:44,000 --> 00:50:45,000
呃

1407
00:50:45,000 --> 00:50:46,000
不过说回来这个 Homebrew 本身哈

1408
00:50:46,000 --> 00:50:48,000
就是我觉得他就现在他 Homebrew

1409
00:50:48,000 --> 00:50:50,000
已经现在就是这个

1410
00:50:50,000 --> 00:50:51,000
这个 OS 的这种

1411
00:50:51,000 --> 00:50:53,000
那么继承事实的

1412
00:50:53,000 --> 00:50:54,000
官

1413
00:50:54,000 --> 00:50:56,000
打引号的官方这个

1414
00:50:56,000 --> 00:50:57,000
呃

1415
00:50:57,000 --> 00:50:58,000
包管理器了吧

1416
00:50:58,000 --> 00:50:59,000
因为

1417
00:50:59,000 --> 00:51:03,000
你如果你现在去关注一下 GitHub 上面的那些各种软件

1418
00:51:03,000 --> 00:51:06,000
你会发现他只要涉及到呃

1419
00:51:06,000 --> 00:51:09,000
跟 Ostin 有关的大部分会选用 Homebrew 的方式

1420
00:51:09,000 --> 00:51:13,000
对而且尤其是新工具会倾向于去提供一个 Homebrew formula

1421
00:51:13,000 --> 00:51:16,000
比如我们上次提到的那个 NailVib

1422
00:51:16,000 --> 00:51:19,000
就提供一个 Homebrew 的 type

1423
00:51:19,000 --> 00:51:20,000
嗯哼

1424
00:51:20,000 --> 00:51:21,000
对

1425
00:51:21,000 --> 00:51:23,000
所以所以这里就有一个延伸的问题就是

1426
00:51:23,000 --> 00:51:30,000
就是你觉得为什么 Homebrew 会在如此短的时间内完全就替代掉了 Mac ports

1427
00:51:30,000 --> 00:51:31,000
呃

1428
00:51:31,000 --> 00:51:37,000
因为这个和当和当年那个 Mac ports 取代 Fink 还是蛮大区别

1429
00:51:37,000 --> 00:51:41,000
当时我记得印象中 Mac ports 和 Fink 还是共存过相当长一段时间的

1430
00:51:41,000 --> 00:51:48,000
我觉得第一是他把提供一个新软件的门槛降低了

1431
00:51:48,000 --> 00:51:49,000
嗯

1432
00:51:49,000 --> 00:51:50,000
因为呃

1433
00:51:50,000 --> 00:51:52,000
Ruby 的强项就是写一个 DSL 嘛

1434
00:51:52,000 --> 00:51:55,000
然后他用的这种 DSL 使得你呃

1435
00:51:55,000 --> 00:51:56,000
呃

1436
00:51:56,000 --> 00:51:59,000
发布一个新的软件到呃

1437
00:51:59,000 --> 00:52:03,000
Homebrew repository 的过程变得荒唐的简单

1438
00:52:03,000 --> 00:52:04,000
对

1439
00:52:04,000 --> 00:52:05,000
嗯

1440
00:52:05,000 --> 00:52:06,000
嗯

1441
00:52:06,000 --> 00:52:08,000
而而 Mac ports 他因为用 TCL

1442
00:52:08,000 --> 00:52:11,000
TCL 毕竟是一个从来没有大动作的

1443
00:52:11,000 --> 00:52:12,000
比较小种的也

1444
00:52:12,000 --> 00:52:15,000
然后你写他还是还是需要花一点脑筋的

1445
00:52:15,000 --> 00:52:18,000
你要必须去明白他是一个什么样的用作原理

1446
00:52:18,000 --> 00:52:19,000
对

1447
00:52:19,000 --> 00:52:24,000
然后我觉得还有一个可能会成为一个决定性因素的是

1448
00:52:24,000 --> 00:52:26,000
Homebrew 给你一种虚假的安全感

1449
00:52:26,000 --> 00:52:30,000
就是你每次 brew 安装什么东西你不需要速度

1450
00:52:30,000 --> 00:52:32,000
呃

1451
00:52:32,000 --> 00:52:33,000
前提是

1452
00:52:33,000 --> 00:52:35,000
其实你安装的时候用的速度对吧

1453
00:52:35,000 --> 00:52:36,000
对吧

1454
00:52:36,000 --> 00:52:40,000
你要把那个 user local 设定为你自己账户可独写

1455
00:52:40,000 --> 00:52:41,000
对啊

1456
00:52:41,000 --> 00:52:42,000
但是一般来说

1457
00:52:42,000 --> 00:52:43,000
就是他推荐的一种方式

1458
00:52:43,000 --> 00:52:47,000
对一般来说每一个就是如果你默认安装一台新电脑默认

1459
00:52:47,000 --> 00:52:49,000
直接用他的安装脚本去安装 Homebrew 的话

1460
00:52:49,000 --> 00:52:51,000
他就自动会帮你这样做

1461
00:52:51,000 --> 00:52:52,000
哦现在已经是这样了吗

1462
00:52:52,000 --> 00:52:53,000
应该是这样的吧

1463
00:52:53,000 --> 00:52:56,000
我反正安装这台新的呃

1464
00:52:56,000 --> 00:52:57,000
新的呃

1465
00:52:57,000 --> 00:52:58,000
新的

1466
00:52:58,000 --> 00:53:05,000
macbook 的时候好像是完全没有自己去改他会推他会推他会推荐你这么干我记得确实是这样

1467
00:53:05,000 --> 00:53:07,000
OK

1468
00:53:07,000 --> 00:53:08,000
但我不太确定是不是他会默认吧

1469
00:53:08,000 --> 00:53:11,000
就他可能会在安装过程中问问你要不要这样干

1470
00:53:11,000 --> 00:53:14,000
然后你应该我也是就是草率的打了一个歪

1471
00:53:14,000 --> 00:53:15,000
嗯

1472
00:53:15,000 --> 00:53:16,000
对

1473
00:53:16,000 --> 00:53:17,000
呃

1474
00:53:17,000 --> 00:53:22,000
其实有一点我一直在想啊就是 github 对这个 Homebrew 的帮助有多大

1475
00:53:22,000 --> 00:53:24,000
其实我觉得这个应该是挺关键的

1476
00:53:24,000 --> 00:53:25,000
那应该说是相等大

1477
00:53:25,000 --> 00:53:26,000
因为

1478
00:53:26,000 --> 00:53:27,000
对

1479
00:53:27,000 --> 00:53:33,000
就是你刚才说它是一个 de facto 继承试词的软件包安装工具

1480
00:53:33,000 --> 00:53:37,000
我就想说它其实仅只是对程序员这样而言而已

1481
00:53:37,000 --> 00:53:38,000
呃

1482
00:53:38,000 --> 00:53:40,000
但但正是因为此

1483
00:53:40,000 --> 00:53:41,000
呃

1484
00:53:41,000 --> 00:53:45,000
几乎每一个稍微有点自尊的程序员肯定都会去搞搞 github

1485
00:53:45,000 --> 00:53:47,000
然后 Homebrew 就是在 github

1486
00:53:47,000 --> 00:53:48,000
对

1487
00:53:48,000 --> 00:53:51,000
对这点我觉得就是跟那个像 macpost 很不一样

1488
00:53:51,000 --> 00:53:54,000
macpost 那些我都不知道那那 portfile 文件从哪里来的

1489
00:53:54,000 --> 00:53:55,000
然后怎么去提交

1490
00:53:55,000 --> 00:53:58,000
然后整个看了一下那个网站也做得很丑对吧

1491
00:53:58,000 --> 00:54:02,000
但是 Homebrew 不一样它所有的这个那个所谓的他们叫 formula

1492
00:54:02,000 --> 00:54:05,000
就是我们类似于 makefile 或者 portfile 的东西

1493
00:54:05,000 --> 00:54:10,000
它都是整个包是放在这个 github 上面的

1494
00:54:10,000 --> 00:54:14,000
然后 github 是比较友好的一个工具嘛

1495
00:54:14,000 --> 00:54:16,000
对程序员来说至少

1496
00:54:16,000 --> 00:54:17,000
然后都会大家觉得

1497
00:54:17,000 --> 00:54:19,000
诶那我给你添加

1498
00:54:19,000 --> 00:54:20,000
我就是 fork 一下你这个嘛

1499
00:54:20,000 --> 00:54:21,000
然后把这个加进去

1500
00:54:21,000 --> 00:54:24,000
然后再给你发一个这个 pool request

1501
00:54:24,000 --> 00:54:26,000
这个东西就算搞定了对吧

1502
00:54:26,000 --> 00:54:28,000
整个流程是非常方便的

1503
00:54:28,000 --> 00:54:29,000
所以这里其实

1504
00:54:29,000 --> 00:54:32,000
呃就说我们要说要做 UI 做得好

1505
00:54:32,000 --> 00:54:34,000
但一个 UI 是广义上的

1506
00:54:34,000 --> 00:54:37,000
不只是说用户最终消费者我们看到一个按钮

1507
00:54:37,000 --> 00:54:39,000
这个就应该就是叫 UX

1508
00:54:39,000 --> 00:54:40,000
就是 User experience

1509
00:54:40,000 --> 00:54:41,000
对

1510
00:54:41,000 --> 00:54:42,000
用户体验非常好

1511
00:54:42,000 --> 00:54:44,000
这个叫对

1512
00:54:44,000 --> 00:54:46,000
这个用户就是我们那种 geek 的宅传续

1513
00:54:46,000 --> 00:54:49,000
对我们的友好的话

1514
00:54:49,000 --> 00:54:51,000
我们也更加乐意去给他什么添砖加网

1515
00:54:51,000 --> 00:54:53,000
你刚才说的这点很好

1516
00:54:53,000 --> 00:54:55,000
就是当你打开

1517
00:54:55,000 --> 00:54:58,000
homebrew 的页面的时候

1518
00:54:58,000 --> 00:54:59,000
它会用

1519
00:54:59,000 --> 00:55:01,000
一上来就告诉你

1520
00:55:01,000 --> 00:55:03,000
一上来给你讲一个展示给你这个工具

1521
00:55:03,000 --> 00:55:04,000
能干嘛

1522
00:55:04,000 --> 00:55:05,000
给你讲一个例子

1523
00:55:05,000 --> 00:55:06,000
给你讲一个故事

1524
00:55:06,000 --> 00:55:08,000
然后用大字

1525
00:55:08,000 --> 00:55:13,000
用一读的简单的文字告诉你这个工具是干嘛

1526
00:55:13,000 --> 00:55:15,000
这工具呃呃呃呃

1527
00:55:15,000 --> 00:55:16,000
怎样安装怎样使用

1528
00:55:16,000 --> 00:55:18,000
感性能的话去干这个

1529
00:55:18,000 --> 00:55:19,000
对

1530
00:55:19,000 --> 00:55:20,000
而反观 macpost

1531
00:55:20,000 --> 00:55:21,000
你打开它网页

1532
00:55:21,000 --> 00:55:24,000
它网页是一个很典型的这种呃呃

1533
00:55:24,000 --> 00:55:29,000
门户网站的感觉就是一上来密密麻麻一大堆信息

1534
00:55:29,000 --> 00:55:30,000
呃什么

1535
00:55:30,000 --> 00:55:31,000
不叫他说什么

1536
00:55:31,000 --> 00:55:32,000
documentation

1537
00:55:32,000 --> 00:55:33,000
update

1538
00:55:33,000 --> 00:55:34,000
recent news

1539
00:55:34,000 --> 00:55:36,000
blah blah blah blah

1540
00:55:36,000 --> 00:55:37,000
你想要干嘛

1541
00:55:37,000 --> 00:55:39,000
你想要知道这个工具到底是干嘛的

1542
00:55:39,000 --> 00:55:40,000
你不知道

1543
00:55:40,000 --> 00:55:41,000
对对

1544
00:55:41,000 --> 00:55:43,000
所以其实

1545
00:55:43,000 --> 00:55:44,000
所以刚才你提到好

1546
00:55:44,000 --> 00:55:45,000
就是说那个什么

1547
00:55:45,000 --> 00:55:46,000
我们都讲那个什么

1548
00:55:46,000 --> 00:55:48,000
那个 cool a drinking kit

1549
00:55:48,000 --> 00:55:51,000
其实这个我觉得是所有的呃

1550
00:55:51,000 --> 00:55:53,000
开发者包括这个产品经理都要

1551
00:55:53,000 --> 00:55:55,000
产品经理都要都要学习的一个东西

1552
00:55:55,000 --> 00:55:57,000
就怎么把这个叫做我们

1553
00:55:57,000 --> 00:55:59,000
这个其实有个专门的叫做叫做什么

1554
00:55:59,000 --> 00:56:01,000
user landing 吧还是叫什么

1555
00:56:01,000 --> 00:56:04,000
呃就是就是第一批用户

1556
00:56:04,000 --> 00:56:06,000
当用户第一眼目睹你的产品的时候

1557
00:56:06,000 --> 00:56:07,000
你给他一个什么样的印象

1558
00:56:07,000 --> 00:56:10,000
对就是在用户已经知道有你这么一个东西

1559
00:56:10,000 --> 00:56:11,000
但是还不知道怎么用的时候

1560
00:56:11,000 --> 00:56:14,000
你怎么让他能够快速的去上手

1561
00:56:14,000 --> 00:56:16,000
那么让他这个过程变得比较爽

1562
00:56:16,000 --> 00:56:19,000
我觉得这个是可能是 Ruby 社区

1563
00:56:19,000 --> 00:56:21,000
就是 Ruby 或者 real 这个社区

1564
00:56:21,000 --> 00:56:25,000
给整个其他软件生这个社区的一个最大的

1565
00:56:25,000 --> 00:56:27,000
呃叫什么呃

1566
00:56:27,000 --> 00:56:28,000
财富吧

1567
00:56:28,000 --> 00:56:29,000
就他们展示了这一点

1568
00:56:29,000 --> 00:56:32,000
就是让一个哪怕他只是对这个有兴趣

1569
00:56:32,000 --> 00:56:35,000
但是可能并不知道一些具体的细节的人

1570
00:56:35,000 --> 00:56:36,000
也能够很快的上手

1571
00:56:36,000 --> 00:56:39,000
然后之后再去想办法去摸清那些细节嘛

1572
00:56:39,000 --> 00:56:40,000
对

1573
00:56:40,000 --> 00:56:43,000
而不是说你先上来甩给他一个啊

1574
00:56:43,000 --> 00:56:45,000
我这个什么很高冷的形象

1575
00:56:45,000 --> 00:56:48,000
然后你看不懂就自己去吃屎吧

1576
00:56:48,000 --> 00:56:50,000
这样这样就不太好

1577
00:56:50,000 --> 00:56:53,000
以这种姿态能最终取得成功的人

1578
00:56:53,000 --> 00:56:56,000
在矿谷至今只有 Linux

1579
00:56:56,000 --> 00:56:58,000
Linux Twitter 的一个人吧

1580
00:56:58,000 --> 00:57:00,000
哈哈哈哈

1581
00:57:00,000 --> 00:57:02,000
所以是不是我们节目的姿态要放低

1582
00:57:02,000 --> 00:57:03,000
哈哈哈哈

1583
00:57:03,000 --> 00:57:05,000
哈哈哈哈

1584
00:57:05,000 --> 00:57:06,000
哎呀

1585
00:57:06,000 --> 00:57:07,000
好了

1586
00:57:07,000 --> 00:57:08,000
下次放低一点

1587
00:57:08,000 --> 00:57:09,000
嗯啊

1588
00:57:09,000 --> 00:57:11,000
那接着说这个 Homebrew 这个事啊

1589
00:57:11,000 --> 00:57:12,000
啊

1590
00:57:12,000 --> 00:57:13,000
啊

1591
00:57:13,000 --> 00:57:14,000
所以就现在我们看到就是基本上那些新的包啊

1592
00:57:14,000 --> 00:57:15,000
最新的版本

1593
00:57:15,000 --> 00:57:16,000
他们

1594
00:57:16,000 --> 00:57:17,000
而因为用户很多嘛

1595
00:57:17,000 --> 00:57:19,000
然后他大家都会为他去贡献啊

1596
00:57:19,000 --> 00:57:20,000
去除错啊

1597
00:57:20,000 --> 00:57:22,000
就使得他变成一个很良性的一个循环

1598
00:57:22,000 --> 00:57:23,000
对

1599
00:57:23,000 --> 00:57:25,000
就是你作为一个新软件的作者

1600
00:57:25,000 --> 00:57:27,000
或者你要用的一个软件里面没有

1601
00:57:27,000 --> 00:57:28,000
你会想想想想想

1602
00:57:28,000 --> 00:57:29,000
啊我去 Homebrew 里面找一下

1603
00:57:29,000 --> 00:57:30,000
如果没有

1604
00:57:30,000 --> 00:57:32,000
我就去提交这个 formula

1605
00:57:32,000 --> 00:57:33,000
然后把那个提交的 formula

1606
00:57:33,000 --> 00:57:36,000
也加回到这个这个 upstream 上面去

1607
00:57:36,000 --> 00:57:38,000
然后这样别人也可以因此而收益

1608
00:57:38,000 --> 00:57:39,000
所以其实到今天的话

1609
00:57:39,000 --> 00:57:40,000
其实到今天的话

1610
00:57:40,000 --> 00:57:43,000
像 Ls 上面这个 Homebrew 的包管理器

1611
00:57:43,000 --> 00:57:46,000
基本上已经可以在某种程度上达到了

1612
00:57:46,000 --> 00:57:49,000
在 Linux 上面做的比较好的那些包管理器的那种规模

1613
00:57:49,000 --> 00:57:50,000
或者是效果

1614
00:57:50,000 --> 00:57:53,000
对而且 Homebrew 甚至还被 port 到 Linux 上面

1615
00:57:53,000 --> 00:57:54,000
我觉得当时就有只听

1616
00:57:54,000 --> 00:57:56,000
刚听到这个新闻的时候

1617
00:57:56,000 --> 00:57:59,000
我觉得还挺吃惊的就是 Linux 上面

1618
00:57:59,000 --> 00:58:01,000
我们在 Mac 上面用 Homebrew

1619
00:58:01,000 --> 00:58:03,000
是因为 Mac 上面没有 App to Get

1620
00:58:03,000 --> 00:58:05,000
或者是没有 YAM

1621
00:58:05,000 --> 00:58:10,000
而为什么今天这个时代还居然要把 Homebrew 这种

1622
00:58:10,000 --> 00:58:13,000
因为没有所以不得不造出来工具

1623
00:58:13,000 --> 00:58:19,000
backport 到你们那边已经比较成熟的解决方案的地方

1624
00:58:19,000 --> 00:58:22,000
这也让我挺吃惊的

1625
00:58:22,000 --> 00:58:26,000
但仔细想想就是 Homebrew 的理念其实是相当先进的吧

1626
00:58:26,000 --> 00:58:27,000
可以这么说

1627
00:58:27,000 --> 00:58:28,000
对对

1628
00:58:28,000 --> 00:58:31,000
而且它的整个就刚才就讲了我们这个整个用户体验是蛮非常友好的嘛

1629
00:58:31,000 --> 00:58:33,000
就是让大家能够很快上手

1630
00:58:33,000 --> 00:58:35,000
这其实我觉得也是一个很好的类比

1631
00:58:35,000 --> 00:58:36,000
比如说那个 formular

1632
00:58:36,000 --> 00:58:37,000
刚才讲的

1633
00:58:37,000 --> 00:58:38,000
有些个 DSL 的一个 Ruby 的文件

1634
00:58:38,000 --> 00:58:39,000
对

1635
00:58:39,000 --> 00:58:40,000
你可以写起来

1636
00:58:40,000 --> 00:58:41,000
你可以就我

1637
00:58:41,000 --> 00:58:43,000
你看一下就大概知道它的干嘛

1638
00:58:43,000 --> 00:58:44,000
但我到现在为止也没搞懂

1639
00:58:44,000 --> 00:58:46,000
这个怎么去自己编

1640
00:58:46,000 --> 00:58:48,000
搞一个什么 debend package 出来

1641
00:58:48,000 --> 00:58:50,000
然后能够很方便的发布出去

1642
00:58:50,000 --> 00:58:52,000
就是这个过程还是蛮繁琐

1643
00:58:52,000 --> 00:58:53,000
对

1644
00:58:53,000 --> 00:58:58,000
而且 Homebrew 更优雅加引号的一点就是

1645
00:58:58,000 --> 00:59:03,000
就是它是它跟 Git 结合的非常紧密

1646
00:59:03,000 --> 00:59:06,000
它本身 host 在 Github 上面就不用说了

1647
00:59:06,000 --> 00:59:16,000
而这个 Homebrew 本身的升级也只不过是一个 Gitpool 的某种被包装过的 Gitpool 而已

1648
00:59:16,000 --> 00:59:23,000
就是它这个工具本身就是以一套版本管理系统的方式

1649
00:59:23,000 --> 00:59:27,000
以一个经过版本管理的软件

1650
00:59:27,000 --> 00:59:31,000
repost 的形式出现在电脑上的

1651
00:59:31,000 --> 00:59:36,000
它需要升级的时候就只需要从它的 upstream 上更新一下就可以了

1652
00:59:36,000 --> 00:59:40,000
这个也是挺优雅的一个部分吧

1653
00:59:40,000 --> 00:59:41,000
对

1654
00:59:41,000 --> 00:59:42,000
对

1655
00:59:42,000 --> 00:59:50,000
所以刚才讲的那么都是根据某一个操作系统上面而选择的不同的这个包管理器

1656
00:59:50,000 --> 00:59:52,000
比如说刚才讲的 debend 上面有没有一个 apt

1657
00:59:52,000 --> 00:59:55,000
然后 rpm 系统的话是 yam

1658
00:59:55,000 --> 00:59:57,000
然后有 bsd 的 ports

1659
00:59:57,000 --> 01:00:00,000
然后 mac 上面现在最新的是这个 Homebrew

1660
01:00:00,000 --> 01:00:02,000
下面我们接下来要跑

1661
01:00:02,000 --> 01:00:04,000
你刻意跳过的 windows

1662
01:00:04,000 --> 01:00:06,000
啊 windows

1663
01:00:06,000 --> 01:00:07,000
windows 有吗

1664
01:00:07,000 --> 01:00:08,000
有啊有啊有啊

1665
01:00:08,000 --> 01:00:09,000
有什么

1666
01:00:09,000 --> 01:00:10,000
有什么

1667
01:00:10,000 --> 01:00:12,000
看来你真是应验了我们听众的一句话

1668
01:00:12,000 --> 01:00:13,000
就是对 windows 的了解

1669
01:00:13,000 --> 01:00:15,000
连大学毕业生都不辱

1670
01:00:15,000 --> 01:00:18,000
那肯定啊已经彻底放弃好多年了

1671
01:00:18,000 --> 01:00:19,000
对对对

1672
01:00:19,000 --> 01:00:22,000
我其实很惭愧的就是我也是现学现卖

1673
01:00:22,000 --> 01:00:29,000
也是因为前阵子去关注那个.net 的开源才注意到的

1674
01:00:29,000 --> 01:00:30,000
就是 windows 下面有一叫做

1675
01:00:30,000 --> 01:00:32,000
啊不确定这应该怎么念

1676
01:00:32,000 --> 01:00:34,000
Nugget

1677
01:00:34,000 --> 01:00:35,000
Nugget

1678
01:00:35,000 --> 01:00:36,000
Nugget

1679
01:00:36,000 --> 01:00:37,000
Nugget

1680
01:00:37,000 --> 01:00:38,000
Nugget

1681
01:00:38,000 --> 01:00:39,000
OK

1682
01:00:39,000 --> 01:00:40,000
基块嘛

1683
01:00:40,000 --> 01:00:41,000
OK

1684
01:00:42,000 --> 01:00:43,000
和基块协音

1685
01:00:43,000 --> 01:00:46,000
总之它就是 Nugget 就是一个

1686
01:00:47,000 --> 01:00:53,000
包括.net 平台在内的专门为微软开发而研发了一套

1687
01:00:53,000 --> 01:00:54,000
嗯

1688
01:00:54,000 --> 01:00:56,000
Package Manager

1689
01:00:56,000 --> 01:00:57,000
就是

1690
01:00:57,000 --> 01:00:59,000
等一下等一下它是跑在命令行下面的吗

1691
01:00:59,000 --> 01:01:00,000
它有一个命令行界面

1692
01:01:00,000 --> 01:01:02,000
然后也有一个图形界面

1693
01:01:02,000 --> 01:01:03,000
as always

1694
01:01:03,000 --> 01:01:04,000
对

1695
01:01:04,000 --> 01:01:05,000
Windows 程序怎么可能没有图形界面

1696
01:01:05,000 --> 01:01:06,000
你让 Windows 成员怎么活

1697
01:01:06,000 --> 01:01:10,000
对我就在想它怎么怎么会有这种需求

1698
01:01:10,000 --> 01:01:11,000
他们不是都直接在那个什么

1699
01:01:12,000 --> 01:01:14,000
跑一个这个什么 GUI 的东西

1700
01:01:14,000 --> 01:01:17,000
然后做个很很很很

1701
01:01:17,000 --> 01:01:19,000
五百个按钮的软件

1702
01:01:19,000 --> 01:01:20,000
好好好

1703
01:01:20,000 --> 01:01:22,000
此处省去对 Windows 成员的冷嘲热讽

1704
01:01:22,000 --> 01:01:24,000
冷嘲热讽五千字

1705
01:01:24,000 --> 01:01:25,000
嗯

1706
01:01:25,000 --> 01:01:26,000
总之这个

1707
01:01:26,000 --> 01:01:27,000
谁在用呢

1708
01:01:27,000 --> 01:01:28,000
我从

1709
01:01:28,000 --> 01:01:29,000
所有微软程序员

1710
01:01:29,000 --> 01:01:31,000
所有现在 up to date 的微软程序员都在用

1711
01:01:31,000 --> 01:01:32,000
应该

1712
01:01:32,000 --> 01:01:33,000
OK

1713
01:01:33,000 --> 01:01:34,000
所以他们是一个

1714
01:01:34,000 --> 01:01:35,000
怎么办

1715
01:01:35,000 --> 01:01:36,000
parallel universe

1716
01:01:36,000 --> 01:01:37,000
我们不知道

1717
01:01:37,000 --> 01:01:38,000
对

1718
01:01:38,000 --> 01:01:39,000
在这个平行宇宙里面

1719
01:01:39,000 --> 01:01:40,000
比如说什么 JQuery 啊

1720
01:01:40,000 --> 01:01:41,000
或者是

1721
01:01:42,000 --> 01:01:43,000
它真的可以

1722
01:01:43,000 --> 01:01:44,000
对

1723
01:01:44,000 --> 01:01:45,000
JQuery 之类的东西你都可以通过

1724
01:01:45,000 --> 01:01:48,000
在那个 Nugget 的图形界面之下

1725
01:01:48,000 --> 01:01:49,000
搜 JQuery

1726
01:01:49,000 --> 01:01:50,000
然后点一下 install

1727
01:01:50,000 --> 01:01:51,000
它就帮你装好了

1728
01:01:51,000 --> 01:01:52,000
虽然

1729
01:01:52,000 --> 01:01:53,000
天哪

1730
01:01:53,000 --> 01:01:54,000
对

1731
01:01:54,000 --> 01:01:55,000
而且它就

1732
01:01:55,000 --> 01:01:56,000
它可能有三

1733
01:01:56,000 --> 01:01:58,000
两三万个那个 package 的已经

1734
01:01:59,000 --> 01:02:00,000
那还不挺大规模的

1735
01:02:00,000 --> 01:02:03,000
这个是有什么微软官方的维护

1736
01:02:03,000 --> 01:02:04,000
对啊

1737
01:02:04,000 --> 01:02:05,000
这是微软官方做的嘛

1738
01:02:05,000 --> 01:02:06,000
官方加持

1739
01:02:06,000 --> 01:02:07,000
Holy

1740
01:02:07,000 --> 01:02:08,000
Really

1741
01:02:08,000 --> 01:02:10,000
而且在那个

1742
01:02:10,000 --> 01:02:11,000
你安装了

1743
01:02:11,000 --> 01:02:12,000
嗯

1744
01:02:12,000 --> 01:02:14,000
Dotnet 在

1745
01:02:14,000 --> 01:02:15,000
嗯

1746
01:02:15,000 --> 01:02:16,000
MacOS 上的那个

1747
01:02:16,000 --> 01:02:17,000
Homebrew 工具之后

1748
01:02:17,000 --> 01:02:19,000
你就有了 Nugget

1749
01:02:19,000 --> 01:02:21,000
哈哈哈哈哈哈

1750
01:02:21,000 --> 01:02:23,000
等一下

1751
01:02:23,000 --> 01:02:25,000
Nugget 这个是不是一个脏话

1752
01:02:25,000 --> 01:02:26,000
不是吧

1753
01:02:26,000 --> 01:02:28,000
Nigger 是脏话

1754
01:02:28,000 --> 01:02:29,000
Nugget 不是吧

1755
01:02:29,000 --> 01:02:34,000
微软不会蠢到这么正直不正确的

1756
01:02:34,000 --> 01:02:36,000
这个时候叫寄出 Urban Dict

1757
01:02:36,000 --> 01:02:38,000
Nugget

1758
01:02:38,000 --> 01:02:41,000
A person with no arms or legs

1759
01:02:41,000 --> 01:02:43,000
鸡块嘛

1760
01:02:43,000 --> 01:02:44,000
就一个人

1761
01:02:44,000 --> 01:02:45,000
把一个人

1762
01:02:45,000 --> 01:02:46,000
这是人棍吗

1763
01:02:46,000 --> 01:02:47,000
人质啊

1764
01:02:47,000 --> 01:02:48,000
人棍

1765
01:02:48,000 --> 01:02:49,000
人棍

1766
01:02:49,000 --> 01:02:50,000
我忘记了

1767
01:02:50,000 --> 01:02:51,000
就是那个吕后做的那件事嘛

1768
01:02:51,000 --> 01:02:52,000
是吗

1769
01:02:52,000 --> 01:02:53,000
对啊

1770
01:02:53,000 --> 01:02:54,000
不是中

1771
01:02:54,000 --> 01:02:55,000
那叫人质是吧

1772
01:02:55,000 --> 01:02:56,000
那是人质吧

1773
01:02:56,000 --> 01:02:57,000
好吧

1774
01:02:57,000 --> 01:02:58,000
嗯

1775
01:02:58,000 --> 01:02:59,000
Anyway

1776
01:02:59,000 --> 01:03:00,000
可以

1777
01:03:00,000 --> 01:03:01,000
Anyway

1778
01:03:01,000 --> 01:03:02,000
反正从 Nugget 上面你可以

1779
01:03:03,000 --> 01:03:04,000
嗯

1780
01:03:04,000 --> 01:03:05,000
下载比如什么

1781
01:03:05,000 --> 01:03:06,000
JQuery 啊

1782
01:03:06,000 --> 01:03:07,000
呃

1783
01:03:07,000 --> 01:03:08,000
包括 SP.NET

1784
01:03:08,000 --> 01:03:09,000
的 MVC

1785
01:03:09,000 --> 01:03:10,000
呃

1786
01:03:10,000 --> 01:03:14,000
甚至还有很多什么 Boot Drive

1787
01:03:14,000 --> 01:03:15,000
好像也可以从上面下下来

1788
01:03:15,000 --> 01:03:16,000
我记得

1789
01:03:16,000 --> 01:03:18,000
就是面积针对前端的吗

1790
01:03:18,000 --> 01:03:19,000
还是

1791
01:03:19,000 --> 01:03:20,000
针对一切开发者

1792
01:03:20,000 --> 01:03:21,000
OK

1793
01:03:21,000 --> 01:03:22,000
因为等下你举的几个例子

1794
01:03:22,000 --> 01:03:24,000
就是跟前端开发有关系的

1795
01:03:24,000 --> 01:03:25,000
嗯

1796
01:03:26,000 --> 01:03:27,000
还是说你暴露了

1797
01:03:27,000 --> 01:03:29,000
你是在上面做前端开发这件事

1798
01:03:29,000 --> 01:03:34,000
我在上面做了很简单的 Windows 用户

1799
01:03:34,000 --> 01:03:37,000
Windows 编程摸底而已

1800
01:03:37,000 --> 01:03:39,000
没有在上面做过任何开发

1801
01:03:39,000 --> 01:03:40,000
哈哈

1802
01:03:40,000 --> 01:03:41,000
哈哈

1803
01:03:41,000 --> 01:03:42,000
哈哈

1804
01:03:42,000 --> 01:03:43,000
嗯

1805
01:03:43,000 --> 01:03:44,000
好吧

1806
01:03:44,000 --> 01:03:45,000
这个反正我也没问过

1807
01:03:45,000 --> 01:03:46,000
就没法

1808
01:03:46,000 --> 01:03:47,000
没法

1809
01:03:47,000 --> 01:03:48,000
接着讨论下去

1810
01:03:48,000 --> 01:03:49,000
它到底怎么样

1811
01:03:49,000 --> 01:03:51,000
总之有这么一个东西存在就是

1812
01:03:51,000 --> 01:03:52,000
对啊

1813
01:03:52,000 --> 01:03:54,000
刚才我们讲的就是基于每一个各个操作系统

1814
01:03:54,000 --> 01:03:55,000
或者是这个 Linux

1815
01:03:55,000 --> 01:03:59,000
Linux 发行版本的这个包管理工具的一些相关的情况

1816
01:03:59,000 --> 01:04:00,000
嗯

1817
01:04:00,000 --> 01:04:02,000
现在我们要切换到另外一个比较重要

1818
01:04:02,000 --> 01:04:05,000
也是我们吐槽比较多的

1819
01:04:05,000 --> 01:04:10,000
就是基于各个语言的这个这包管理的东西了

1820
01:04:10,000 --> 01:04:11,000
对啊

1821
01:04:11,000 --> 01:04:12,000
这里有一个比较显著的区别啊

1822
01:04:12,000 --> 01:04:14,000
就是刚才讲的那些像

1823
01:04:14,000 --> 01:04:15,000
嗯

1824
01:04:15,000 --> 01:04:16,000
HomeBrew 也好

1825
01:04:16,000 --> 01:04:17,000
还是这个 Debian 也好

1826
01:04:17,000 --> 01:04:21,000
就它很大程度上是为了这个我们讲部署的时候用的嘛

1827
01:04:21,000 --> 01:04:23,000
部署就是可能最终用我自己安装

1828
01:04:23,000 --> 01:04:26,000
或者是我们把它弄到服务机上运行的时候

1829
01:04:26,000 --> 01:04:28,000
这样去的一个用法

1830
01:04:28,000 --> 01:04:29,000
然后呃

1831
01:04:29,000 --> 01:04:32,000
包括你用 HomeBrew 安装的很多这种所谓的命令行软件

1832
01:04:32,000 --> 01:04:34,000
你是作为它的一个用户

1833
01:04:34,000 --> 01:04:35,000
你不是作为它的开发者去安装的

1834
01:04:35,000 --> 01:04:36,000
当然也有例外

1835
01:04:36,000 --> 01:04:37,000
嗯

1836
01:04:37,000 --> 01:04:39,000
其实这是一个比较大的

1837
01:04:39,000 --> 01:04:41,000
比较明显而

1838
01:04:41,000 --> 01:04:44,000
但是目前还没有人做出来的区别吧

1839
01:04:44,000 --> 01:04:47,000
就是你通过一个包管理工具

1840
01:04:47,000 --> 01:04:52,000
安装的一个东西有可能是有一个直接可执行文件的

1841
01:04:52,000 --> 01:04:53,000
呃

1842
01:04:53,000 --> 01:04:54,000
这么一套东西

1843
01:04:54,000 --> 01:04:55,000
也有可能它仅仅是一个

1844
01:04:55,000 --> 01:04:56,000
Lib

1845
01:04:56,000 --> 01:04:57,000
对吧

1846
01:04:57,000 --> 01:04:58,000
Library

1847
01:04:58,000 --> 01:04:59,000
对吧

1848
01:04:59,000 --> 01:05:00,000
就有很多这种情况

1849
01:05:00,000 --> 01:05:01,000
对啊

1850
01:05:01,000 --> 01:05:03,000
在我的有限认知里面好像

1851
01:05:03,000 --> 01:05:04,000
HomeBrew

1852
01:05:04,000 --> 01:05:07,000
其实是对此有一个比较模糊的

1853
01:05:07,000 --> 01:05:10,000
而且是一个很很稍微有点绕人的概念的

1854
01:05:10,000 --> 01:05:12,000
就是有些东西是所谓 Cask only

1855
01:05:12,000 --> 01:05:15,000
就 HomeBrew 有自己一套 jargon 对吧

1856
01:05:15,000 --> 01:05:17,000
虽然我对此也不非常理解

1857
01:05:17,000 --> 01:05:18,000
对它有一套

1858
01:05:18,000 --> 01:05:20,000
就是比如说它因为它整个酿

1859
01:05:20,000 --> 01:05:24,000
借用了这个酿丝酒的这么一套术语

1860
01:05:24,000 --> 01:05:25,000
与会的

1861
01:05:25,000 --> 01:05:26,000
对

1862
01:05:26,000 --> 01:05:27,000
比如说 Cask 就是一个酒桶

1863
01:05:27,000 --> 01:05:31,000
然后你从 Cask 里面 Pour 出来什么东西

1864
01:05:31,000 --> 01:05:35,000
就然后在自己 Brew 这个套其实就是类比

1865
01:05:35,000 --> 01:05:39,000
或者说它把整个编译的过程类比为发酵的过程

1866
01:05:39,000 --> 01:05:42,000
而 Cask only 的意思就是这套东西是不发酵的

1867
01:05:42,000 --> 01:05:44,000
这套东西只是存在酒桶里面

1868
01:05:44,000 --> 01:05:45,000
嗯

1869
01:05:45,000 --> 01:05:47,000
发酵

1870
01:05:47,000 --> 01:05:48,000
啊 OK

1871
01:05:48,000 --> 01:05:49,000
我有念错字了

1872
01:05:49,000 --> 01:05:50,000
Sorry

1873
01:05:50,000 --> 01:05:52,000
我先纠正了免得你又被

1874
01:05:52,000 --> 01:05:53,000
被

1875
01:05:53,000 --> 01:05:54,000
被

1876
01:05:54,000 --> 01:05:55,000
呃

1877
01:05:55,000 --> 01:05:56,000
对它有那个

1878
01:05:56,000 --> 01:05:58,000
就当然有个事情刚才没有解释啊

1879
01:05:58,000 --> 01:05:59,000
它有这个就

1880
01:05:59,000 --> 01:06:02,000
就像我们讲那个 Debian 的包一般是发行的二进制版本

1881
01:06:02,000 --> 01:06:03,000
对

1882
01:06:03,000 --> 01:06:05,000
然后 Ports 是一般是发行圆满嘛

1883
01:06:05,000 --> 01:06:07,000
而 HomeBrew 的话其实是比较诡异的

1884
01:06:07,000 --> 01:06:08,000
就是它

1885
01:06:08,000 --> 01:06:09,000
就是它

1886
01:06:09,000 --> 01:06:10,000
两种都有

1887
01:06:10,000 --> 01:06:12,000
它两种都支持应该说

1888
01:06:12,000 --> 01:06:13,000
对

1889
01:06:13,000 --> 01:06:14,000
然后它会有

1890
01:06:14,000 --> 01:06:17,000
大概有不同的语词去描述它

1891
01:06:17,000 --> 01:06:21,000
我记得它的二进制版本是叫做 Bottle

1892
01:06:21,000 --> 01:06:22,000
就是瓶子

1893
01:06:22,000 --> 01:06:23,000
对

1894
01:06:23,000 --> 01:06:25,000
这个逻辑你想想很简单

1895
01:06:25,000 --> 01:06:27,000
就是你编译的过程是在 Brew 发酵嘛

1896
01:06:27,000 --> 01:06:28,000
对

1897
01:06:28,000 --> 01:06:29,000
发酵完了就就是一个成品的酒吧

1898
01:06:29,000 --> 01:06:30,000
已经装瓶了

1899
01:06:30,000 --> 01:06:31,000
就是你叫装瓶

1900
01:06:31,000 --> 01:06:32,000
然后就直接可以给别人用了

1901
01:06:32,000 --> 01:06:33,000
就是它是有这么一个概念

1902
01:06:33,000 --> 01:06:36,000
然后但是它对于很多那种软件

1903
01:06:36,000 --> 01:06:38,000
软件就不方便装瓶的

1904
01:06:38,000 --> 01:06:40,000
一个是可能因为法律的问题

1905
01:06:40,000 --> 01:06:41,000
或者是因为版权的问题

1906
01:06:41,000 --> 01:06:42,000
它没办法装瓶的

1907
01:06:42,000 --> 01:06:43,000
没办法编辑的

1908
01:06:43,000 --> 01:06:45,000
或者甚至最简单的情况就是这个东西

1909
01:06:45,000 --> 01:06:46,000
它根本就不是拿来用的

1910
01:06:46,000 --> 01:06:49,000
它只是拿来作为一种一个建筑材料而已

1911
01:06:49,000 --> 01:06:50,000
对

1912
01:06:50,000 --> 01:06:52,000
它就会直接发布这个 Source

1913
01:06:52,000 --> 01:06:53,000
对

1914
01:06:53,000 --> 01:06:58,000
这个我想想能够比较明显那个 Fmpeg

1915
01:06:58,000 --> 01:06:59,000
Fmpg

1916
01:06:59,000 --> 01:07:00,000
这个工具

1917
01:07:00,000 --> 01:07:02,000
它就是发布的圆码

1918
01:07:02,000 --> 01:07:03,000
然后你要自己编译的

1919
01:07:03,000 --> 01:07:05,000
但是你像 Vim

1920
01:07:05,000 --> 01:07:07,000
MacVim 好像是它是弄成一个 Bottle 了

1921
01:07:07,000 --> 01:07:08,000
我记得

1922
01:07:08,000 --> 01:07:09,000
MacVim 是 Bottle 吗

1923
01:07:09,000 --> 01:07:11,000
如果我没记错的话

1924
01:07:11,000 --> 01:07:12,000
应该是这样子

1925
01:07:12,000 --> 01:07:14,000
我总记得 MacVim 也是要编译的

1926
01:07:14,000 --> 01:07:15,000
是吗

1927
01:07:15,000 --> 01:07:16,000
那可能我记错

1928
01:07:16,000 --> 01:07:17,000
它有很多这种是 Bottle 过的

1929
01:07:17,000 --> 01:07:19,000
你可以发现安装很快

1930
01:07:19,000 --> 01:07:21,000
也不需要没有编译的过程

1931
01:07:21,000 --> 01:07:29,000
继续说我们这个和编程语言相关的包管理系统

1932
01:07:29,000 --> 01:07:30,000
对

1933
01:07:30,000 --> 01:07:32,000
这里就可能比较奇特的一个事情

1934
01:07:32,000 --> 01:07:35,000
就是具体上某个语言来讲

1935
01:07:35,000 --> 01:07:39,000
它还有通常是有自己的一套包管理器

1936
01:07:39,000 --> 01:07:40,000
然后这个包管理器

1937
01:07:40,000 --> 01:07:45,000
要解决的绝大部分场合是作为

1938
01:07:45,000 --> 01:07:48,000
就为了帮助开发者写程序的时候用的

1939
01:07:48,000 --> 01:07:49,000
对

1940
01:07:49,000 --> 01:07:50,000
对 这么说安全吧

1941
01:07:50,000 --> 01:07:51,000
我相信

1942
01:07:51,000 --> 01:07:52,000
你现在是安全的吧

1943
01:07:52,000 --> 01:07:53,000
但就是

1944
01:07:53,000 --> 01:07:56,000
其实这里也有一个很有趣的事实

1945
01:07:56,000 --> 01:07:57,000
就是

1946
01:07:57,000 --> 01:08:00,000
不管是 Python 也好还是 Ruby 也好

1947
01:08:00,000 --> 01:08:02,000
有很多包

1948
01:08:02,000 --> 01:08:04,000
其实它不是拿来

1949
01:08:04,000 --> 01:08:06,000
不是帮你提供一个开发工具的

1950
01:08:06,000 --> 01:08:07,000
它是拿来

1951
01:08:07,000 --> 01:08:08,000
它就是提供一个命令行工具

1952
01:08:08,000 --> 01:08:10,000
对 它是给你提供一个命令行工具的

1953
01:08:10,000 --> 01:08:15,000
比如说我很喜欢一个叫做 Law Cat

1954
01:08:15,000 --> 01:08:19,000
它的效果是把你

1955
01:08:19,000 --> 01:08:22,000
你可以把任何字符串 Python 给它

1956
01:08:22,000 --> 01:08:25,000
然后它把你 Python 进去的那个字符串

1957
01:08:25,000 --> 01:08:27,000
以七彩的形式显示在屏幕上

1958
01:08:27,000 --> 01:08:29,000
所以你可以用

1959
01:08:29,000 --> 01:08:30,000
比如说你可以 Call Say

1960
01:08:30,000 --> 01:08:33,000
就是 Link 上有一个有趣的小工具

1961
01:08:33,000 --> 01:08:36,000
就是牛说工具

1962
01:08:36,000 --> 01:08:38,000
它在屏幕上显示一头牛

1963
01:08:38,000 --> 01:08:39,000
然后这个牛会

1964
01:08:39,000 --> 01:08:42,000
头上会冒出来一个气泡框

1965
01:08:42,000 --> 01:08:44,000
然后里面写着你要想说的话

1966
01:08:44,000 --> 01:08:46,000
然后你先把你要说的话

1967
01:08:46,000 --> 01:08:47,000
Cat 进 Call Say

1968
01:08:47,000 --> 01:08:49,000
然后再 Cat 进 Law Cat

1969
01:08:49,000 --> 01:08:53,000
然后最终的结果就是一个七彩的牛

1970
01:08:53,000 --> 01:08:55,000
说了一句七彩的话

1971
01:08:55,000 --> 01:08:57,000
这个东西就是用 NPI

1972
01:08:57,000 --> 01:08:58,000
就是用

1973
01:08:58,000 --> 01:08:59,000
好 fancy 啊

1974
01:08:59,000 --> 01:09:00,000
对 就是用 Jam 来发布的

1975
01:09:00,000 --> 01:09:03,000
它本质就只是给你提供一个额外的工具而已

1976
01:09:03,000 --> 01:09:04,000
对对

1977
01:09:04,000 --> 01:09:05,000
对对

1978
01:09:05,000 --> 01:09:08,000
就所以就是刚才我说要特别限定一下

1979
01:09:08,000 --> 01:09:10,000
就是说只能说是大部分场合包管的

1980
01:09:10,000 --> 01:09:13,000
其实是为了做这个开发用的工具

1981
01:09:13,000 --> 01:09:15,000
但是其实你看也听到有这种场合是

1982
01:09:15,000 --> 01:09:18,000
它那个本来就是拿来发布成一个可知

1983
01:09:18,000 --> 01:09:21,000
面向最终用户使用的一个工具

1984
01:09:21,000 --> 01:09:23,000
所以这里面这界限不是那么清晰

1985
01:09:23,000 --> 01:09:24,000
啊

1986
01:09:24,000 --> 01:09:26,000
只能说是一个大概的这么一个分类

1987
01:09:26,000 --> 01:09:29,000
而且你比较难的很难去一刀切

1988
01:09:29,000 --> 01:09:35,000
有些说我就要硬行在我的包管理系统里面提供

1989
01:09:35,000 --> 01:09:39,000
比如说 Jam as a tool 和 Jam as a library 的区别

1990
01:09:39,000 --> 01:09:41,000
因为有些是两者都提供

1991
01:09:41,000 --> 01:09:43,000
对对对

1992
01:09:43,000 --> 01:09:46,000
它提供了一个让你调试的工具

1993
01:09:46,000 --> 01:09:47,000
比如说对吧

1994
01:09:47,000 --> 01:09:48,000
对

1995
01:09:48,000 --> 01:09:49,000
你可以很方便的启动它

1996
01:09:49,000 --> 01:09:51,000
但是它主要作用还是提供一个库

1997
01:09:51,000 --> 01:09:56,000
比如 Pray 或者是 iPython 这种

1998
01:09:56,000 --> 01:09:59,000
它既是一个工具它又是一套库

1999
01:09:59,000 --> 01:10:00,000
对还是不懂

2000
01:10:00,000 --> 01:10:03,000
Software is hard

2001
01:10:03,000 --> 01:10:04,000
So confusing

2002
01:10:04,000 --> 01:10:06,000
好

2003
01:10:06,000 --> 01:10:08,000
那现在我们就来

2004
01:10:08,000 --> 01:10:10,000
就我们先着眼来讲

2005
01:10:10,000 --> 01:10:12,000
就我们先不讲那个

2006
01:10:12,000 --> 01:10:17,000
用这种某一个语言独特的包管理系

2007
01:10:17,000 --> 01:10:19,000
来发布命令行工具的这么一个情况

2008
01:10:19,000 --> 01:10:24,000
我们就先只看用它来做这个开发者的事情的时候

2009
01:10:24,000 --> 01:10:26,000
会有一些什么样的东西啊

2010
01:10:26,000 --> 01:10:27,000
我们还是按语言来分吧

2011
01:10:27,000 --> 01:10:28,000
对

2012
01:10:28,000 --> 01:10:30,000
加马程式员吴他同学

2013
01:10:30,000 --> 01:10:32,000
请你开始吐槽

2014
01:10:32,000 --> 01:10:33,000
开启你的吐槽模式

2015
01:10:34,000 --> 01:10:35,000
Maven

2016
01:10:35,000 --> 01:10:42,000
所以 Maven 为什么会给你带着这么惨痛的感觉

2017
01:10:42,000 --> 01:10:45,000
其实 Maven 没有真正的伤害过我

2018
01:10:46,000 --> 01:10:47,000
但是

2019
01:10:47,000 --> 01:10:49,000
那你为什么这么仇视它

2020
01:10:49,000 --> 01:10:51,000
公司里面

2021
01:10:51,000 --> 01:10:57,000
公司至少因为 Maven 的一些零零总总的事情

2022
01:10:58,000 --> 01:11:02,000
在我的印象里面可能有两次推迟过 release

2023
01:11:03,000 --> 01:11:05,000
就 release 推迟一天其实是非常

2024
01:11:06,000 --> 01:11:10,000
并不是什么天塌下来的灾难性事件

2025
01:11:10,000 --> 01:11:12,000
但至少也是让所有人不爽的一件事

2026
01:11:12,000 --> 01:11:13,000
因为你不是做游戏的对吧

2027
01:11:13,000 --> 01:11:14,000
我们不是做游戏的

2028
01:11:14,000 --> 01:11:18,000
我们是做比游戏更海洛因的东西的

2029
01:11:18,000 --> 01:11:19,000
但对

2030
01:11:19,000 --> 01:11:20,000
anyway 不重要

2031
01:11:20,000 --> 01:11:21,000
但

2032
01:11:21,000 --> 01:11:24,000
就是推迟一天的话

2033
01:11:24,000 --> 01:11:26,000
意味着首先运维人员要

2034
01:11:26,000 --> 01:11:28,000
从鸡飞狗跳

2035
01:11:28,000 --> 01:11:29,000
鸡飞狗跳 24 小时

2036
01:11:29,000 --> 01:11:31,000
变成鸡飞狗跳 48 小时

2037
01:11:31,000 --> 01:11:34,000
然后开发人员呢

2038
01:11:34,000 --> 01:11:38,000
也会因为发布的被推迟

2039
01:11:38,000 --> 01:11:39,000
而不得不

2040
01:11:39,000 --> 01:11:41,000
要么临时被抓壮钉去解决

2041
01:11:41,000 --> 01:11:44,000
导致这个推迟的问题

2042
01:11:44,000 --> 01:11:49,000
要么就因为这一次发布不能及时运行

2043
01:11:49,000 --> 01:11:51,000
而不及时进行

2044
01:11:51,000 --> 01:11:54,000
而得不到一些比较宝贵的资源

2045
01:11:54,000 --> 01:11:55,000
比如说 QA

2046
01:11:55,000 --> 01:11:57,000
比如说 Staging Server 之类的

2047
01:11:57,000 --> 01:12:00,000
因为所有这些 Server 都还在备战状态

2048
01:12:00,000 --> 01:12:06,000
备战状态就是要去迎合这个发布的 deadline

2049
01:12:06,000 --> 01:12:10,000
而 Maven 至少已经导致过两次这样的

2050
01:12:10,000 --> 01:12:14,000
在我看来已经是事故的事故级别的问题

2051
01:12:14,000 --> 01:12:15,000
OK

2052
01:12:15,000 --> 01:12:19,000
而另外一方面 Maven 在使用的时候

2053
01:12:19,000 --> 01:12:24,000
本身你也会觉得一阵阵的蛋疼了真是

2054
01:12:24,000 --> 01:12:26,000
对我又问一个问题

2055
01:12:26,000 --> 01:12:28,000
是不是还是要手工写 XML

2056
01:12:28,000 --> 01:12:29,000
是的

2057
01:12:29,000 --> 01:12:32,000
欢迎来到 1995 年

2058
01:12:34,000 --> 01:12:35,000
我能领解你的头

2059
01:12:35,000 --> 01:12:36,000
而且

2060
01:12:36,000 --> 01:12:39,000
当然你可以说

2061
01:12:39,000 --> 01:12:40,000
你可以站出来说

2062
01:12:40,000 --> 01:12:43,000
你可以用各种各样的图形界面去管理 XML

2063
01:12:43,000 --> 01:12:44,000
生存它

2064
01:12:44,000 --> 01:12:45,000
但

2065
01:12:45,000 --> 01:12:46,000
对啊

2066
01:12:46,000 --> 01:12:48,000
有句名言是 XML 就像 violence

2067
01:12:48,000 --> 01:12:49,000
XML 就像暴力

2068
01:12:49,000 --> 01:12:51,000
如果它不能解决

2069
01:12:51,000 --> 01:12:53,000
如果它不能解决你的问题

2070
01:12:53,000 --> 01:12:55,000
那一定是你用的还不够多

2071
01:12:55,000 --> 01:12:57,000
哈哈哈

2072
01:13:01,000 --> 01:13:02,000
好吧

2073
01:13:02,000 --> 01:13:05,000
所以但是 Maven 其实是一个比较

2074
01:13:05,000 --> 01:13:07,000
就是在 Java 这个开发圈里面是一个

2075
01:13:07,000 --> 01:13:10,000
比较什么通用常见的一个方案了吗

2076
01:13:10,000 --> 01:13:13,000
可能我一半程序员会反驳你的看法

2077
01:13:13,000 --> 01:13:17,000
但要我说 Maven 其实是一种

2078
01:13:19,000 --> 01:13:23,000
一个过早优化的典型

2079
01:13:23,000 --> 01:13:24,000
可以这么说吗

2080
01:13:25,000 --> 01:13:26,000
为什么这么说呢

2081
01:13:26,000 --> 01:13:28,000
因为比如说 Maven

2082
01:13:28,000 --> 01:13:29,000
一个 Maven Project

2083
01:13:29,000 --> 01:13:35,000
一上来就强制你使用一种特定的项目的格式

2084
01:13:35,000 --> 01:13:37,000
就是你所有的包

2085
01:13:37,000 --> 01:13:39,000
文件的格式

2086
01:13:39,000 --> 01:13:41,000
就是你组织员那码的格式

2087
01:13:41,000 --> 01:13:43,000
在所有的 Maven Project 里面是一模一样的

2088
01:13:43,000 --> 01:13:45,000
就 Directory Layout

2089
01:13:45,000 --> 01:13:46,000
Directory Layout

2090
01:13:46,000 --> 01:13:47,000
就是一上来要有一个 Source

2091
01:13:47,000 --> 01:13:48,000
Source 里面有 Main

2092
01:13:48,000 --> 01:13:49,000
Main 里面要有

2093
01:13:49,000 --> 01:13:50,000
Sorry

2094
01:13:50,000 --> 01:13:51,000
Main

2095
01:13:51,000 --> 01:13:52,000
对

2096
01:13:52,000 --> 01:13:53,000
Main 里面有一个 Main

2097
01:13:53,000 --> 01:13:54,000
然后有一个 Test

2098
01:13:54,000 --> 01:13:58,000
然后 Main 和 Test 下面的所有的文件结构要一模一样

2099
01:13:58,000 --> 01:13:59,000
嗯

2100
01:13:59,000 --> 01:14:00,000
对

2101
01:14:00,000 --> 01:14:01,000
总之是

2102
01:14:01,000 --> 01:14:02,000
其实这个没什么

2103
01:14:02,000 --> 01:14:04,000
这个有这个规范是好事吗

2104
01:14:04,000 --> 01:14:07,000
我不觉得这个是一个特别不好的一个事情

2105
01:14:07,000 --> 01:14:08,000
嗯

2106
01:14:08,000 --> 01:14:12,000
但是在你仅仅想要写一些比较小的东西的时候

2107
01:14:12,000 --> 01:14:17,000
你就会觉得这种强加于你的结构是非常让人不爽的

2108
01:14:17,000 --> 01:14:18,000
对

2109
01:14:18,000 --> 01:14:19,000
我觉得这就是问题所在的

2110
01:14:19,000 --> 01:14:21,000
你为什么要用家把写一个很小的东西呢

2111
01:14:21,000 --> 01:14:23,000
因为为什么我有个脚本语言去写

2112
01:14:23,000 --> 01:14:24,000
好吧

2113
01:14:24,000 --> 01:14:25,000
嗯

2114
01:14:25,000 --> 01:14:26,000
嗯

2115
01:14:26,000 --> 01:14:29,000
这里有个审美观念的的的的的问题在里面

2116
01:14:29,000 --> 01:14:37,000
就是你可以说 Main 是一种专门为了企业级应用而推出的呃一种硬性的解决方案

2117
01:14:37,000 --> 01:14:40,000
就是他通过呃呃

2118
01:14:40,000 --> 01:14:43,000
用常繁琐的配置

2119
01:14:43,000 --> 01:14:44,000
嗯

2120
01:14:44,000 --> 01:14:45,000
嗯

2121
01:14:45,000 --> 01:14:49,000
强制夹在你身上的工序

2122
01:14:49,000 --> 01:14:51,000
保证了你是一个可以被替换的的事情

2123
01:14:51,000 --> 01:14:53,000
因为不管你是谁

2124
01:14:53,000 --> 01:14:56,000
你只要用 Main 那么你能做的东西就都是可以预定的

2125
01:14:56,000 --> 01:14:58,000
而都是可以预见到的

2126
01:14:58,000 --> 01:15:01,000
而不像你说比如说早期的洪荒时代在用 ant 的时候

2127
01:15:01,000 --> 01:15:04,000
你可能你的 ant file 可能是一个天数一样的东西

2128
01:15:04,000 --> 01:15:09,000
你的接手者是没有办法去去理解你去去去替代你了

2129
01:15:09,000 --> 01:15:10,000
对

2130
01:15:10,000 --> 01:15:18,000
但是反过来我会觉得就像我对所有的带有 enterprise 的字样的东西天生的反感一样

2131
01:15:18,000 --> 01:15:23,000
这是一种你我很难说他到底错在哪儿

2132
01:15:23,000 --> 01:15:26,000
但我就觉得他不是我希望的那样

2133
01:15:26,000 --> 01:15:29,000
但如果你是抱着这种心态的话

2134
01:15:29,000 --> 01:15:31,000
你是不是不应该写 java 程序呢

2135
01:15:31,000 --> 01:15:32,000
嗯

2136
01:15:32,000 --> 01:15:34,000
嗯

2137
01:15:34,000 --> 01:15:36,000
因为 java 就是为 enterprise 这种场景

2138
01:15:36,000 --> 01:15:42,000
对我只能说我是为了谋生不得不做这件事情的

2139
01:15:42,000 --> 01:15:46,000
但就像所有的就像 Paul Graham 说过的那句话一样

2140
01:15:46,000 --> 01:15:49,000
就是他在他知道的所有程序里面

2141
01:15:49,000 --> 01:15:52,000
在他认识的十个在他能想出的

2142
01:15:52,000 --> 01:15:53,000
原话我不太记得

2143
01:15:53,000 --> 01:15:56,000
反正单一就是说在他能想到的十个扎要程序里面

2144
01:15:56,000 --> 01:16:01,000
有九个不是出于自愿的目的而去写扎

2145
01:16:01,000 --> 01:16:03,000
对

2146
01:16:03,000 --> 01:16:04,000
我可能也是

2147
01:16:04,000 --> 01:16:06,000
嗯

2148
01:16:06,000 --> 01:16:07,000
嗯

2149
01:16:07,000 --> 01:16:08,000
嗯

2150
01:16:08,000 --> 01:16:09,000
当然我明白

2151
01:16:09,000 --> 01:16:10,000
生活所迫

2152
01:16:10,000 --> 01:16:11,000
对

2153
01:16:11,000 --> 01:16:12,000
而且这也

2154
01:16:12,000 --> 01:16:13,000
这

2155
01:16:13,000 --> 01:16:15,000
我觉得这可能也是我辞职的原因之一吧

2156
01:16:15,000 --> 01:16:16,000
就是

2157
01:16:16,000 --> 01:16:17,000
嗯

2158
01:16:17,000 --> 01:16:18,000
去去去寻找更绿的

2159
01:16:18,000 --> 01:16:19,000
哥不干了

2160
01:16:19,000 --> 01:16:21,000
对去寻找更绿的草坪的动机之一

2161
01:16:21,000 --> 01:16:24,000
也就是我终于受够了 java 这一套

2162
01:16:24,000 --> 01:16:25,000
嗯

2163
01:16:25,000 --> 01:16:26,000
对

2164
01:16:26,000 --> 01:16:27,000
而且

2165
01:16:27,000 --> 01:16:32,000
所以这里要所以这里要打要要要插问一句你下一份工作是准备写什么

2166
01:16:32,000 --> 01:16:33,000
可能是拍子

2167
01:16:33,000 --> 01:16:34,000
应该是拍子

2168
01:16:34,000 --> 01:16:35,000
OK

2169
01:16:35,000 --> 01:16:36,000
拍子呢

2170
01:16:36,000 --> 01:16:37,000
C++然后

2171
01:16:37,000 --> 01:16:40,000
Java 可能会成为一个选项

2172
01:16:40,000 --> 01:16:45,000
但应该不是必须的至少目前我掌握的状资料是这样的

2173
01:16:45,000 --> 01:16:46,000
OK

2174
01:16:46,000 --> 01:16:47,000
对

2175
01:16:47,000 --> 01:16:48,000
嗯

2176
01:16:48,000 --> 01:16:53,000
好那 Java 那边除了 Maven 这一个比较你比较沮丧的这个包管理器之外

2177
01:16:53,000 --> 01:16:54,000
还有什么其他选项

2178
01:16:54,000 --> 01:16:56,000
Java 有其他的别的选项吗

2179
01:16:56,000 --> 01:16:57,000
没有吗

2180
01:16:57,000 --> 01:16:58,000
嗯

2181
01:16:58,000 --> 01:16:59,000
应该是有的

2182
01:16:59,000 --> 01:17:15,000
但 Maven 基本上可以视为任何一个比较上了规模的企业机应用的开发企业都不得不或者说都会选择的一个解决方案

2183
01:17:15,000 --> 01:17:21,000
因为围绕着 Maven 产生出了一套还是相对来说比较成熟的生态系统

2184
01:17:21,000 --> 01:17:24,000
就每一个都很繁琐每一个都很丑陋

2185
01:17:24,000 --> 01:17:31,000
但是搭载在一起的时候他在 50%的时间里面还是可以做事的

2186
01:17:31,000 --> 01:17:34,000
好吧

2187
01:17:34,000 --> 01:17:41,000
就所以这是一个大家都知道很不爽但是大家都知道起码这个不爽是可以预期的对吧

2188
01:17:41,000 --> 01:17:43,000
有多不爽也就那样了

2189
01:17:43,000 --> 01:17:47,000
网上有一幅漫画我觉得一定要放在我们的 show notes 里面

2190
01:17:47,000 --> 01:17:49,000
嗯哼响读者

2191
01:17:49,000 --> 01:17:50,000
对

2192
01:17:50,000 --> 01:17:57,000
大意就是你大意是一个你采用 Maven 之后的生产率曲线

2193
01:17:57,000 --> 01:18:01,000
刚刚开始这个曲线是有一点点向上的

2194
01:18:01,000 --> 01:18:06,000
就是刚刚采用 Maven 之后你会觉得哇一切包都精英有条

2195
01:18:06,000 --> 01:18:08,000
好美好

2196
01:18:08,000 --> 01:18:11,000
就是 Maven 还有一个特点就是他的

2197
01:18:11,000 --> 01:18:19,000
他给你预先定义了一套非常永长繁琐啰嗦的那个编译步骤

2198
01:18:19,000 --> 01:18:23,000
你比如说你可以运行 Maven clean 就是帮你删掉所有东西

2199
01:18:23,000 --> 01:18:28,000
然后 Maven test 就是帮你从 precompile compile

2200
01:18:28,000 --> 01:18:32,000
然后 assembly 然后 distribute

2201
01:18:32,000 --> 01:18:35,000
诸如此类整了一套全都跑下来

2202
01:18:35,000 --> 01:18:37,000
然后自动帮你运行测试

2203
01:18:37,000 --> 01:18:39,000
你会觉得自己的生产力好像提高了

2204
01:18:39,000 --> 01:18:41,000
因为一切都尽可能自动化

2205
01:18:41,000 --> 01:18:44,000
但是好景不长

2206
01:18:44,000 --> 01:18:50,000
当某一个时间你遭遇到某一个安装包的依赖冲突问题的时候

2207
01:18:50,000 --> 01:18:54,000
你会发现你已经失去了对整个项目的控制

2208
01:18:54,000 --> 01:18:56,000
然后整个情况直转直下

2209
01:18:56,000 --> 01:19:01,000
然后生产力曲线就跌落了一个万劫不复的深渊

2210
01:19:01,000 --> 01:19:07,000
你会发现我把整个 project 已经怎么说 Mavenized

2211
01:19:07,000 --> 01:19:12,000
然后在这个感觉这个时候好像得到癌症感染一样

2212
01:19:12,000 --> 01:19:15,000
对我已经骑虎难下再也回不去了

2213
01:19:17,000 --> 01:19:20,000
所以还有一个什么还能够恢复的阶段吗

2214
01:19:20,000 --> 01:19:24,000
好像那幅漫画里面是没有恢复的阶段

2215
01:19:24,000 --> 01:19:26,000
所以就直接死了

2216
01:19:26,000 --> 01:19:31,000
而且在有一个就像我上次提到过一个 tumblr 的一个

2217
01:19:31,000 --> 01:19:35,000
以 gif 网站以 gif 动画为主的 tumblr

2218
01:19:35,000 --> 01:19:39,000
叫做 devops reactions

2219
01:19:39,000 --> 01:19:41,000
里面就有一个

2220
01:19:41,000 --> 01:19:48,000
有一期就是讲 Maven 的认定如何令人痛苦的

2221
01:19:48,000 --> 01:19:53,000
很简单就是一个人在雨中流泪

2222
01:19:53,000 --> 01:19:56,000
然后另外一个人从后面贴近他的耳朵说

2223
01:19:56,000 --> 01:19:58,000
好像是

2224
01:19:58,000 --> 01:19:59,000
好像是

2225
01:19:59,000 --> 01:20:02,000
大概是

2226
01:20:03,000 --> 01:20:05,000
大概是

2227
01:20:05,000 --> 01:20:07,000
大概是说了这么一句话

2228
01:20:07,000 --> 01:20:09,000
然后这个 gif 的标题就是

2229
01:20:09,000 --> 01:20:13,000
得知项目里面需要用到 Maven

2230
01:20:13,000 --> 01:20:14,000
好吧

2231
01:20:14,000 --> 01:20:18,000
好吧

2232
01:20:18,000 --> 01:20:21,000
这个我们知道你的痛苦了

2233
01:20:21,000 --> 01:20:22,000
不过我马上就要解脱了

2234
01:20:22,000 --> 01:20:23,000
还有一礼拜

2235
01:20:23,000 --> 01:20:25,000
而且各位听到这个

2236
01:20:25,000 --> 01:20:26,000
听到这些节目的时候

2237
01:20:26,000 --> 01:20:27,000
我已经解脱了

2238
01:20:27,000 --> 01:20:28,000
我已经解脱了

2239
01:20:28,000 --> 01:20:31,000
我已经开开心心的在意大利游玩

2240
01:20:31,000 --> 01:20:32,000
好吧

2241
01:20:32,000 --> 01:20:34,000
好吧

2242
01:20:34,000 --> 01:20:39,000
就说到 java 要说一个相关的语言

2243
01:20:39,000 --> 01:20:41,000
就是这边叫做 scala 的语言

2244
01:20:41,000 --> 01:20:43,000
或者说 next generation java

2245
01:20:43,000 --> 01:20:47,000
我觉得不能这么说

2246
01:20:47,000 --> 01:20:50,000
因为它并不是它的一个超级首先

2247
01:20:50,000 --> 01:20:52,000
它是怎么说

2248
01:20:52,000 --> 01:20:54,000
scala 的目的就是取代现有的 java

2249
01:20:54,000 --> 01:20:58,000
成为下一代的企业级应用的标准语言

2250
01:20:58,000 --> 01:21:00,000
我觉得这件事情是不会发生的

2251
01:21:00,000 --> 01:21:01,000
对你觉得不会发生

2252
01:21:01,000 --> 01:21:04,000
但至少我在我这边

2253
01:21:04,000 --> 01:21:06,000
在我看到的新闻里面

2254
01:21:06,000 --> 01:21:07,000
scala 这是 scala 的目标

2255
01:21:07,000 --> 01:21:09,000
而且欧盟也的确

2256
01:21:09,000 --> 01:21:12,000
欧盟给 scala 扔了很多很多钱

2257
01:21:12,000 --> 01:21:13,000
因为 scala 是某种意义上

2258
01:21:13,000 --> 01:21:14,000
是一个欧洲语言

2259
01:21:14,000 --> 01:21:18,000
它是德国人开发瑞士人制造

2260
01:21:18,000 --> 01:21:20,000
德国人开发瑞士人制造

2261
01:21:20,000 --> 01:21:22,000
基本上是你所能得到的

2262
01:21:22,000 --> 01:21:24,000
变成语言里面最复杂的一种可能性

2263
01:21:24,000 --> 01:21:26,000
对

2264
01:21:26,000 --> 01:21:27,000
就为什么我讲

2265
01:21:27,000 --> 01:21:30,000
scala 不可能替代 java 成为主流

2266
01:21:30,000 --> 01:21:32,000
我觉得这个在工业定性上

2267
01:21:32,000 --> 01:21:33,000
就已经有这点

2268
01:21:33,000 --> 01:21:34,000
光说一点吧

2269
01:21:34,000 --> 01:21:36,000
他那个 scala 的语言规范

2270
01:21:36,000 --> 01:21:38,000
叫一个大铺头的书

2271
01:21:38,000 --> 01:21:40,000
才能讲得清楚

2272
01:21:40,000 --> 01:21:41,000
才能讲得完

2273
01:21:41,000 --> 01:21:42,000
然后我觉得这个世界上

2274
01:21:42,000 --> 01:21:43,000
能够跟他比的

2275
01:21:43,000 --> 01:21:45,000
估计只有 C++了

2276
01:21:45,000 --> 01:21:46,000
对

2277
01:21:46,000 --> 01:21:47,000
CNX 的现状就是没有任何一个

2278
01:21:47,000 --> 01:21:49,000
纠正我

2279
01:21:49,000 --> 01:21:50,000
如果说错的话

2280
01:21:50,000 --> 01:21:52,000
世界上没有任何一个

2281
01:21:52,000 --> 01:21:57,000
CNX 编译器是完全可以符合

2282
01:21:57,000 --> 01:21:58,000
CNX 标准的

2283
01:21:58,000 --> 01:22:00,000
是不是这样

2284
01:22:00,000 --> 01:22:02,000
我觉得应该是吧

2285
01:22:02,000 --> 01:22:03,000
OK

2286
01:22:03,000 --> 01:22:04,000
对

2287
01:22:04,000 --> 01:22:05,000
然后 scala 也是一个

2288
01:22:05,000 --> 01:22:06,000
就是属于一个

2289
01:22:06,000 --> 01:22:12,000
就我在我的心目中归类是把它归于 C++同类复杂度的语言

2290
01:22:12,000 --> 01:22:15,000
但是他确实有很多这种很爽的语言特性

2291
01:22:15,000 --> 01:22:17,000
但这不是这次讨论的重点

2292
01:22:17,000 --> 01:22:22,000
但是要提到他是因为要说他的一个包管理器叫做 SBT

2293
01:22:22,000 --> 01:22:23,000
SBT

2294
01:22:23,000 --> 01:22:24,000
傻变态

2295
01:22:24,000 --> 01:22:28,000
还好你没有选择另外一种更

2296
01:22:28,000 --> 01:22:31,000
那么他特别在哪呢

2297
01:22:31,000 --> 01:22:33,000
他特别在于他的

2298
01:22:33,000 --> 01:22:34,000
你知道你心里

2299
01:22:34,000 --> 01:22:35,000
Maven 你是要写这个 XML 吗

2300
01:22:35,000 --> 01:22:36,000
对

2301
01:22:36,000 --> 01:22:39,000
那你知道 XML 本来就不是拿给人写的吗

2302
01:22:39,000 --> 01:22:40,000
对吧

2303
01:22:40,000 --> 01:22:43,000
因为他本来是要给机器生成系统去的

2304
01:22:43,000 --> 01:22:49,000
SBT 的这个文件是一个 scala 的 DSL

2305
01:22:49,000 --> 01:22:50,000
你可以这么想

2306
01:22:50,000 --> 01:22:51,000
嗯哼

2307
01:22:51,000 --> 01:22:54,000
对他是相就比 XML 是绝对要简洁很多的

2308
01:22:54,000 --> 01:22:55,000
不过呢

2309
01:22:55,000 --> 01:22:57,000
他作为一个 DSL 呢

2310
01:22:57,000 --> 01:22:59,000
他也有他自己的问题

2311
01:22:59,000 --> 01:23:00,000
就是你首先得知道

2312
01:23:00,000 --> 01:23:02,000
你能够在这里面写什么

2313
01:23:02,000 --> 01:23:03,000
不能在里面写什么

2314
01:23:03,000 --> 01:23:05,000
就是你要用 SBT 这个包管理器

2315
01:23:05,000 --> 01:23:08,000
首先你得比较熟悉的理解

2316
01:23:08,000 --> 01:23:11,000
Skala 那套复杂回色的语言规范怎么一回事

2317
01:23:11,000 --> 01:23:13,000
OK

2318
01:23:13,000 --> 01:23:17,000
Skala 里面反正有很多很难忘闻生意的东西

2319
01:23:17,000 --> 01:23:18,000
这个我是知道的

2320
01:23:18,000 --> 01:23:19,000
对因为他是一个

2321
01:23:19,000 --> 01:23:22,000
你能够在这里面写的语言

2322
01:23:22,000 --> 01:23:24,000
你可以这么想吧

2323
01:23:24,000 --> 01:23:25,000
嗯

2324
01:23:25,000 --> 01:23:26,000
很难说吧

2325
01:23:26,000 --> 01:23:29,000
作者毕竟也是 JVM 的

2326
01:23:29,000 --> 01:23:30,000
但是

2327
01:23:30,000 --> 01:23:31,000
对

2328
01:23:31,000 --> 01:23:35,000
你可以理解他是一个工业界和学术界都双修的大牛吧

2329
01:23:35,000 --> 01:23:36,000
对

2330
01:23:36,000 --> 01:23:37,000
因为这个人起码到现在为止

2331
01:23:37,000 --> 01:23:40,000
他是待在这个大学里面教书嘛

2332
01:23:40,000 --> 01:23:41,000
对

2333
01:23:41,000 --> 01:23:43,000
待在他美丽的瑞士小城洛桑

2334
01:23:43,000 --> 01:23:45,000
每天看着日内瓦湖

2335
01:23:45,000 --> 01:23:46,000
然后写写编辑器

2336
01:23:46,000 --> 01:23:48,000
好悠闲的生活

2337
01:23:48,000 --> 01:23:49,000
教教课

2338
01:23:49,000 --> 01:23:50,000
对他在那个

2339
01:23:50,000 --> 01:23:51,000
洛桑理工

2340
01:23:51,000 --> 01:23:52,000
对

2341
01:23:52,000 --> 01:23:55,000
他的联邦理工洛桑飞院

2342
01:23:55,000 --> 01:23:56,000
对

2343
01:23:56,000 --> 01:23:58,000
然后他应该是在 Coursera

2344
01:23:58,000 --> 01:24:01,000
应该是在 Coursera 上面教一门公开课

2345
01:24:01,000 --> 01:24:02,000
对

2346
01:24:02,000 --> 01:24:03,000
Functional programming

2347
01:24:03,000 --> 01:24:07,000
Functional programming principles in Scala

2348
01:24:07,000 --> 01:24:08,000
OK

2349
01:24:08,000 --> 01:24:09,000
Martin Odetsky

2350
01:24:09,000 --> 01:24:10,000
对

2351
01:24:10,000 --> 01:24:11,000
在这个大牛哈

2352
01:24:11,000 --> 01:24:12,000
嗯

2353
01:24:12,000 --> 01:24:13,000
德语一口音

2354
01:24:13,000 --> 01:24:14,000
长得一口德语和音很重的

2355
01:24:14,000 --> 01:24:15,000
长

2356
01:24:15,000 --> 01:24:16,000
长了一张德国人的领

2357
01:24:16,000 --> 01:24:17,000
嗯

2358
01:24:17,000 --> 01:24:20,000
但在在瑞士的法语去教书

2359
01:24:20,000 --> 01:24:21,000
对

2360
01:24:21,000 --> 01:24:22,000
很奇怪的是

2361
01:24:22,000 --> 01:24:23,000
嗯

2362
01:24:23,000 --> 01:24:24,000
啊

2363
01:24:24,000 --> 01:24:25,000
SBT 的他的

2364
01:24:25,000 --> 01:24:28,000
就我当时学 SCA 的时候就是用它来编译东西嘛

2365
01:24:28,000 --> 01:24:29,000
他能够也

2366
01:24:29,000 --> 01:24:30,000
他可以支持加文

2367
01:24:30,000 --> 01:24:31,000
纯 JV 的项目也可以

2368
01:24:31,000 --> 01:24:33,000
然后 SCALA 加文混合项目的也可以

2369
01:24:33,000 --> 01:24:35,000
就给我感觉他那套

2370
01:24:35,000 --> 01:24:36,000
就是这个文件

2371
01:24:36,000 --> 01:24:39,000
就是那个那个配置文件还是比较好写了

2372
01:24:39,000 --> 01:24:41,000
就起码比 Maven 好多了

2373
01:24:41,000 --> 01:24:42,000
我觉得

2374
01:24:42,000 --> 01:24:44,000
但吐槽的刚刚也吐了

2375
01:24:44,000 --> 01:24:46,000
就是我对这个东西的理解就

2376
01:24:46,000 --> 01:24:48,000
因为我没有用它用过来

2377
01:24:48,000 --> 01:24:49,000
只是它用它学习而已

2378
01:24:49,000 --> 01:24:51,000
没有用什么作为大规模的应用

2379
01:24:51,000 --> 01:24:53,000
所以不太清楚具体使用的时候会怎么样

2380
01:24:53,000 --> 01:24:54,000
但是

2381
01:24:54,000 --> 01:24:58,000
据 SBT 的用户的描述来讲

2382
01:24:58,000 --> 01:25:00,000
应该是比 Maven 之流要好

2383
01:25:00,000 --> 01:25:02,000
Maven 之流要好很多的

2384
01:25:02,000 --> 01:25:03,000
OK

2385
01:25:03,000 --> 01:25:07,000
你确定你说的 DSL 好写是真的吗

2386
01:25:07,000 --> 01:25:10,000
因为我们现在看这个 SBT 教程上面的一段

2387
01:25:10,000 --> 01:25:11,000
就是

2388
01:25:11,000 --> 01:25:12,000
哇这是什么

2389
01:25:12,000 --> 01:25:13,000
为什么一个 build 要

2390
01:25:13,000 --> 01:25:14,000
object

2391
01:25:14,000 --> 01:25:16,000
hellobuild extendsbuild

2392
01:25:16,000 --> 01:25:19,000
就在 build 的文件里面居然要用到继承

2393
01:25:19,000 --> 01:25:24,000
或者说非常显示的写出继承关系来

2394
01:25:24,000 --> 01:25:26,000
这个原理也很简单

2395
01:25:26,000 --> 01:25:27,000
就好像在 Java 里面

2396
01:25:27,000 --> 01:25:28,000
你没有办法不写一个 class

2397
01:25:28,000 --> 01:25:29,000
进行一个程序一样

2398
01:25:29,000 --> 01:25:32,000
你在 Skala 里面

2399
01:25:32,000 --> 01:25:33,000
你至少

2400
01:25:33,000 --> 01:25:34,000
对你在 Skala 里面

2401
01:25:34,000 --> 01:25:35,000
你至少得有一个 object

2402
01:25:35,000 --> 01:25:36,000
就是 inSkala

2403
01:25:36,000 --> 01:25:37,000
everything is an object

2404
01:25:37,000 --> 01:25:39,000
object 在 Skala 里面相当于

2405
01:25:39,000 --> 01:25:40,000
如果没记错

2406
01:25:40,000 --> 01:25:41,000
相当于 singleton 吧

2407
01:25:41,000 --> 01:25:43,000
对对对

2408
01:25:43,000 --> 01:25:44,000
差不多这个概念

2409
01:25:44,000 --> 01:25:45,000
OK

2410
01:25:45,000 --> 01:25:49,000
然后为什么 settings 这个东西前面要有

2411
01:25:49,000 --> 01:25:51,000
override lazy walls

2412
01:25:51,000 --> 01:25:56,000
这个时候你就要去研究 Skala 这个语言

2413
01:25:56,000 --> 01:25:57,000
到底本身怎么一回事

2414
01:25:57,000 --> 01:25:58,000
你还得理解它

2415
01:25:58,000 --> 01:25:59,000
这个本身

2416
01:25:59,000 --> 01:26:00,000
就是说它的门槛是蛮高的

2417
01:26:00,000 --> 01:26:02,000
然后但一旦你入了门之后

2418
01:26:02,000 --> 01:26:05,000
which is a long long time

2419
01:26:05,000 --> 01:26:08,000
一旦你入了门之后

2420
01:26:08,000 --> 01:26:11,000
就之后还是写起来还行反正

2421
01:26:11,000 --> 01:26:13,000
就那套 DS 一旦学会之后

2422
01:26:13,000 --> 01:26:16,000
你能够以一个非常简练的方式把它写出来

2423
01:26:16,000 --> 01:26:18,000
但难度在于你要达到那个简练方式

2424
01:26:18,000 --> 01:26:19,000
你得先读它

2425
01:26:19,000 --> 01:26:22,000
啃那本那个 Skala 的那本书

2426
01:26:22,000 --> 01:26:24,000
你只要啃上个什么小半年了

2427
01:26:24,000 --> 01:26:25,000
对

2428
01:26:25,000 --> 01:26:27,000
对

2429
01:26:27,000 --> 01:26:30,000
那用那个来管理 Java 的这个

2430
01:26:30,000 --> 01:26:34,000
这个这个这个这个 project 也是可以的

2431
01:26:34,000 --> 01:26:36,000
但是我很怀疑这件事情的可行之处

2432
01:26:36,000 --> 01:26:38,000
因为它确实实在太难学了

2433
01:26:38,000 --> 01:26:40,000
嗯嗯

2434
01:26:40,000 --> 01:26:47,000
我是觉得它应该像很多很多欧盟看好的所有其他项目一样

2435
01:26:47,000 --> 01:26:52,000
因为过度的繁琐而最后被抛弃在历史的车轮下面

2436
01:26:52,000 --> 01:26:54,000
很有感的

2437
01:26:54,000 --> 01:26:55,000
对

2438
01:26:55,000 --> 01:27:00,000
所以我们就那也这或者从另外一个角度理解也是

2439
01:27:00,000 --> 01:27:06,000
呃我们这些选择了 go 或者选择了更多更更更更简单的

2440
01:27:06,000 --> 01:27:07,000
嗯

2441
01:27:07,000 --> 01:27:09,000
的呃菜鸟们的一种

2442
01:27:09,000 --> 01:27:10,000
嗯

2443
01:27:10,000 --> 01:27:11,000
无望的西技吧

2444
01:27:11,000 --> 01:27:13,000
也许它最后还是会像 Java 一样

2445
01:27:13,000 --> 01:27:14,000
take over the world

2446
01:27:15,000 --> 01:27:17,000
像世界家一样盘踞在这个

2447
01:27:18,000 --> 01:27:19,000
呃

2448
01:27:19,000 --> 01:27:21,000
TIOBE 的那个盘行榜上

2449
01:27:21,000 --> 01:27:23,000
中年阴魂不散

2450
01:27:23,000 --> 01:27:24,000
也不是没有可能啊

2451
01:27:24,000 --> 01:27:26,000
现在比如说你像像推特

2452
01:27:26,000 --> 01:27:29,000
Hitr 还有一些什么重度用户都在用这个写它的后台

2453
01:27:29,000 --> 01:27:31,000
那也这种也是可以

2454
01:27:31,000 --> 01:27:32,000
嗯

2455
01:27:32,000 --> 01:27:35,000
就如果它出现了我觉得也也不难理解嘛

2456
01:27:35,000 --> 01:27:36,000
嗯

2457
01:27:36,000 --> 01:27:37,000
嗯

2458
01:27:37,000 --> 01:27:41,000
好下面要进入一个终于我们两个都可以共同吐槽的一个特色

2459
01:27:41,000 --> 01:27:42,000
哈哈

2460
01:27:42,000 --> 01:27:43,000
Python

2461
01:27:43,000 --> 01:27:46,000
也就是你的下一份工作要做的事情

2462
01:27:46,000 --> 01:27:52,000
不要以为你从 Java 里面那个那个什么你你你你泽里面挣脱出来你就爽了

2463
01:27:52,000 --> 01:27:55,000
Python 里面坑坑也不少我跟你讲

2464
01:27:55,000 --> 01:27:57,000
对刚出龙坛又是虎穴

2465
01:27:57,000 --> 01:27:58,000
对

2466
01:27:58,000 --> 01:28:02,000
Python 这个问题其实也是怎么讲历史遗留问题比较多吧

2467
01:28:02,000 --> 01:28:03,000
嗯

2468
01:28:03,000 --> 01:28:04,000
就首先啊

2469
01:28:04,000 --> 01:28:06,000
就这个事情是蛮讽刺的哈

2470
01:28:06,000 --> 01:28:09,000
就是 Python 我们都知道它有一个哲学嘛

2471
01:28:09,000 --> 01:28:14,000
就是 There is one and hopefully only one obvious way to do things

2472
01:28:14,000 --> 01:28:16,000
对然后一边高举的东西

2473
01:28:16,000 --> 01:28:19,000
高唱的这个句号号一边出了 Python 2 和 Python 3

2474
01:28:19,000 --> 01:28:25,000
然后又有了 setup tools 和 Pip

2475
01:28:25,000 --> 01:28:27,000
不止啊还多着呢

2476
01:28:27,000 --> 01:28:29,000
最开始有这个有 setup tools

2477
01:28:29,000 --> 01:28:31,000
有 distill your tools

2478
01:28:31,000 --> 01:28:32,000
有 Pip

2479
01:28:32,000 --> 01:28:33,000
有 buildout

2480
01:28:33,000 --> 01:28:34,000
这就算是比较老的

2481
01:28:34,000 --> 01:28:35,000
buildout 是啥

2482
01:28:35,000 --> 01:28:36,000
怎么会

2483
01:28:36,000 --> 01:28:39,000
我会给你解释这是一个很神奇的存在

2484
01:28:39,000 --> 01:28:40,000
OK

2485
01:28:40,000 --> 01:28:43,000
嗯然后后来有大家后来觉得这个事情玩不下去了

2486
01:28:43,000 --> 01:28:44,000
后来又出现那个叫什么

2487
01:28:44,000 --> 01:28:46,000
啊

2488
01:28:46,000 --> 01:28:47,000
distill your tools

2489
01:28:47,000 --> 01:28:48,000
OK

2490
01:28:48,000 --> 01:28:50,000
所以你看这个这个标榜者这里

2491
01:28:50,000 --> 01:28:56,000
这一个标榜只有通常一个正确的方式做事的语言

2492
01:28:56,000 --> 01:29:00,000
有着五六七八种包管理工具

2493
01:29:00,000 --> 01:29:03,000
对有这五六七八种不同的做事的方式

2494
01:29:03,000 --> 01:29:06,000
而且他们互相之间是不太兼容的

2495
01:29:06,000 --> 01:29:07,000
不兼容的

2496
01:29:07,000 --> 01:29:11,000
嗯但我觉得这也可能也不能完全怪 Python

2497
01:29:11,000 --> 01:29:13,000
他的设计理念

2498
01:29:13,000 --> 01:29:18,000
并不能保证他所确认的那种方式就是大家最喜欢的

2499
01:29:18,000 --> 01:29:23,000
或者是大家最觉得与时俱进的方式

2500
01:29:23,000 --> 01:29:25,000
对所以其实这就是一个跟你讲嘛

2501
01:29:25,000 --> 01:29:27,000
是一个历史一个遗留的问题

2502
01:29:27,000 --> 01:29:28,000
因为他嗯

2503
01:29:28,000 --> 01:29:29,000
刚才提到那些工具

2504
01:29:29,000 --> 01:29:30,000
他出现的是

2505
01:29:30,000 --> 01:29:32,000
就是他的最开始的版本出现都比较早

2506
01:29:32,000 --> 01:29:35,000
其实在过去这么十几年中

2507
01:29:35,000 --> 01:29:37,000
我们对这个包管理的很多认识啊

2508
01:29:37,000 --> 01:29:39,000
包括这个网络技术设施

2509
01:29:39,000 --> 01:29:41,000
其实发生过很大很大的这个变化

2510
01:29:41,000 --> 01:29:43,000
但是他那些工具呢

2511
01:29:43,000 --> 01:29:46,000
就没有太跟得上时代吧

2512
01:29:46,000 --> 01:29:47,000
你可以这么想

2513
01:29:47,000 --> 01:29:49,000
而且另外一个比较显著的问题是说

2514
01:29:49,000 --> 01:29:51,000
因为 Python 它通常是在

2515
01:29:51,000 --> 01:29:55,000
Winux 发行版里面作为系统组件之一发行的

2516
01:29:55,000 --> 01:29:58,000
那么这就导致一个很严重的问题就是

2517
01:29:58,000 --> 01:30:00,000
如果那个系统发行版不升级的话

2518
01:30:00,000 --> 01:30:02,000
那个绑定的 Python

2519
01:30:02,000 --> 01:30:04,000
Python 的版本也是不升级的

2520
01:30:04,000 --> 01:30:06,000
这样在实际使用的时候

2521
01:30:06,000 --> 01:30:11,000
就会出现一个非常多的不同的版本要支持

2522
01:30:11,000 --> 01:30:13,000
而这个互相之间

2523
01:30:13,000 --> 01:30:15,000
不同版本他们之间的坚容性又是有问题的

2524
01:30:15,000 --> 01:30:16,000
嗯

2525
01:30:16,000 --> 01:30:17,000
所以在这么一个

2526
01:30:17,000 --> 01:30:19,000
就是说在漫长的历史成果中

2527
01:30:19,000 --> 01:30:20,000
散落下这么多版本

2528
01:30:20,000 --> 01:30:22,000
然后你作为一个包管理器的编写者

2529
01:30:22,000 --> 01:30:25,000
你也去很难说能够能个什么

2530
01:30:25,000 --> 01:30:27,000
one thing to fix them all

2531
01:30:27,000 --> 01:30:28,000
对吧

2532
01:30:28,000 --> 01:30:29,000
对

2533
01:30:29,000 --> 01:30:30,000
嗯对

2534
01:30:30,000 --> 01:30:32,000
但是这并不能改变我们要吐出

2535
01:30:32,000 --> 01:30:33,000
吐出这件事实啊

2536
01:30:33,000 --> 01:30:34,000
因为他确实就是很糟糕

2537
01:30:34,000 --> 01:30:36,000
对

2538
01:30:36,000 --> 01:30:38,000
他 Python 的这个每个

2539
01:30:38,000 --> 01:30:41,000
Python 他自己有一个这个发行的这个一个

2540
01:30:41,000 --> 01:30:42,000
一个渠道吧

2541
01:30:42,000 --> 01:30:44,000
就是他自己会有可以官方下载

2542
01:30:44,000 --> 01:30:46,000
但是更多的时候我们用的是从系统里面自带的

2543
01:30:46,000 --> 01:30:49,000
他每个系统里面自带的就是某一个版本

2544
01:30:49,000 --> 01:30:52,000
他会标准库里面会有这么一个叫做 setup tool 是吧

2545
01:30:52,000 --> 01:30:53,000
对

2546
01:30:53,000 --> 01:30:54,000
对

2547
01:30:54,000 --> 01:30:58,000
然后这个东西的命令行的体现应该是叫什么 easy install

2548
01:30:58,000 --> 01:30:59,000
easy install

2549
01:30:59,000 --> 01:31:00,000
easy underline install

2550
01:31:00,000 --> 01:31:01,000
对

2551
01:31:01,000 --> 01:31:06,000
他的问题是他只能 install 不能 uninstall

2552
01:31:06,000 --> 01:31:10,000
你会发现

2553
01:31:10,000 --> 01:31:11,000
你会发现 easy install

2554
01:31:11,000 --> 01:31:12,000
好简单好方便啊

2555
01:31:12,000 --> 01:31:14,000
那怎么 easy uninstall

2556
01:31:14,000 --> 01:31:15,000
好像没有这个命令

2557
01:31:15,000 --> 01:31:18,000
easy install

2558
01:31:18,000 --> 01:31:20,000
hard manually uninstall

2559
01:31:20,000 --> 01:31:21,000
对

2560
01:31:21,000 --> 01:31:22,000
对

2561
01:31:22,000 --> 01:31:24,000
就你会觉得这个就很奇怪

2562
01:31:24,000 --> 01:31:26,000
你怎么能只进不出呢

2563
01:31:26,000 --> 01:31:28,000
这会导致有什么样的后果

2564
01:31:28,000 --> 01:31:30,000
你装完之后没法重来

2565
01:31:30,000 --> 01:31:32,000
没法说装错了删掉

2566
01:31:32,000 --> 01:31:37,000
因为他一旦装了之后大概整个东西就就赖死在你的那个系统的面目了

2567
01:31:37,000 --> 01:31:41,000
除非你自己挨个分析他们那个安装的脚本的语句

2568
01:31:41,000 --> 01:31:42,000
看原码

2569
01:31:42,000 --> 01:31:43,000
看他到底装到哪里去了

2570
01:31:43,000 --> 01:31:45,000
然后一个一个去手中搞

2571
01:31:45,000 --> 01:31:47,000
就觉得这怎么这么变态

2572
01:31:47,000 --> 01:31:48,000
对吧

2573
01:31:48,000 --> 01:31:50,000
他很无辜告诉你说

2574
01:31:50,000 --> 01:31:51,000
我不是跟你说了吗

2575
01:31:51,000 --> 01:31:53,000
我只是负责 easy install 而已

2576
01:31:53,000 --> 01:31:55,000
只有 easy install 而已

2577
01:31:55,000 --> 01:31:59,000
这个感觉就很像中国的很多这种流氓软件是吧

2578
01:31:59,000 --> 01:32:00,000
很方便的装上去

2579
01:32:00,000 --> 01:32:02,000
管沙不管买

2580
01:32:02,000 --> 01:32:03,000
就什么

2581
01:32:03,000 --> 01:32:04,000
这不叫一件事安装

2582
01:32:04,000 --> 01:32:05,000
你就五件事安装

2583
01:32:05,000 --> 01:32:07,000
你不装他都给你装了

2584
01:32:07,000 --> 01:32:10,000
但是发装的时候就没法回头了

2585
01:32:10,000 --> 01:32:12,000
对有这么一个问题

2586
01:32:12,000 --> 01:32:13,000
而且他

2587
01:32:13,000 --> 01:32:15,000
而且他这个 easy install

2588
01:32:15,000 --> 01:32:18,000
他并不支持全部的

2589
01:32:18,000 --> 01:32:19,000
去 Python 的安装

2590
01:32:19,000 --> 01:32:20,000
安装的这个保很多

2591
01:32:20,000 --> 01:32:22,000
你发现装办件报错

2592
01:32:22,000 --> 01:32:23,000
装不了不支持这个格式

2593
01:32:23,000 --> 01:32:26,000
他因为他也是对软件包的这种

2594
01:32:26,000 --> 01:32:27,000
所谓的这个 layout

2595
01:32:27,000 --> 01:32:28,000
或者这种封装方式

2596
01:32:28,000 --> 01:32:30,000
包括那些文件里面要填什么

2597
01:32:30,000 --> 01:32:32,000
什么 meta 的信息

2598
01:32:32,000 --> 01:32:33,000
他都是有一些要求的

2599
01:32:33,000 --> 01:32:34,000
但是并不是所有

2600
01:32:34,000 --> 01:32:38,000
因为因为这个四分五列的这么一个生态圈的状况

2601
01:32:38,000 --> 01:32:42,000
并不是所有的软件包都是觉得要用这个方式来写的

2602
01:32:42,000 --> 01:32:46,000
而且据我所知应该大部分人都不用那个方式来写的

2603
01:32:46,000 --> 01:32:52,000
对我记得当年听说 Guito 是什么 dictator 的时候

2604
01:32:52,000 --> 01:32:54,000
我心里还觉得我靠有个 dictator

2605
01:32:54,000 --> 01:32:57,000
难道不会站出来管一管这件事情吗

2606
01:32:57,000 --> 01:32:59,000
但事实上

2607
01:32:59,000 --> 01:33:00,000
有一些一个不管事的

2608
01:33:00,000 --> 01:33:04,000
对在我们对如果对比一下 Python 社区和 Ruby 社区的时候

2609
01:33:04,000 --> 01:33:06,000
就会发现 Ruby 的

2610
01:33:06,000 --> 01:33:10,000
虽然我们默默鄙视着 Ruby 社区的人

2611
01:33:10,000 --> 01:33:12,000
但是 Ruby 社区有一点好

2612
01:33:12,000 --> 01:33:15,000
就是当 Mats 说一句

2613
01:33:15,000 --> 01:33:16,000
大家升级到 2.0 吧

2614
01:33:16,000 --> 01:33:18,000
所有人都升级 2.0

2615
01:33:18,000 --> 01:33:22,000
而我们现在我记得刚刚前几天还收到一封邮件

2616
01:33:22,000 --> 01:33:27,000
让我们在投票说你觉得 Python 3 是一个错误吗

2617
01:33:27,000 --> 01:33:29,000
必然是

2618
01:33:29,000 --> 01:33:31,000
现在的状况来看

2619
01:33:31,000 --> 01:33:32,000
对

2620
01:33:32,000 --> 01:33:34,000
Python 3 本意是好的

2621
01:33:34,000 --> 01:33:36,000
但目前的现状毫无疑问是否错误

2622
01:33:36,000 --> 01:33:39,000
Python 语言吐槽的地方也可以

2623
01:33:39,000 --> 01:33:41,000
这个单独在吐槽

2624
01:33:41,000 --> 01:33:43,000
直接吐槽它的发布工具

2625
01:33:43,000 --> 01:33:45,000
所以这其实也是体现了这一个问题

2626
01:33:45,000 --> 01:33:49,000
就是 Python 还有一句口号叫做 Batteries included

2627
01:33:49,000 --> 01:33:51,000
叫什么自带电池

2628
01:33:51,000 --> 01:33:54,000
就是它这个标准库里面自带了 setup tool

2629
01:33:54,000 --> 01:33:56,000
这么一个标准的安装包

2630
01:33:56,000 --> 01:34:00,000
但是就和它的标准库里面其他很多 Batteries 一样

2631
01:34:00,000 --> 01:34:02,000
它们都是 Dead on arrival

2632
01:34:02,000 --> 01:34:04,000
已经至少是 5 年旧的电池了

2633
01:34:04,000 --> 01:34:06,000
而且装进去的时候根本没有

2634
01:34:06,000 --> 01:34:07,000
直接没电

2635
01:34:07,000 --> 01:34:11,000
装进去的时候根本没有做这个绝缘

2636
01:34:11,000 --> 01:34:14,000
导致你拿到机器拆开之后

2637
01:34:14,000 --> 01:34:16,000
发现电池已经烂在里面了

2638
01:34:16,000 --> 01:34:19,000
那个电池电降已经跑出来的感觉

2639
01:34:19,000 --> 01:34:20,000
对

2640
01:34:20,000 --> 01:34:22,000
就是他们带了一个很烂的工具

2641
01:34:22,000 --> 01:34:23,000
然后没法用

2642
01:34:23,000 --> 01:34:24,000
然后后来有人想办法

2643
01:34:24,000 --> 01:34:26,000
那我们再解决吧

2644
01:34:26,000 --> 01:34:27,000
后来就出了这个什么

2645
01:34:27,000 --> 01:34:28,000
也对我们这么说

2646
01:34:28,000 --> 01:34:30,000
我这么说其实不对

2647
01:34:30,000 --> 01:34:32,000
但是为了把这个故事讲下去就这么说吧

2648
01:34:32,000 --> 01:34:34,000
后来就出了什么 Distuteal

2649
01:34:34,000 --> 01:34:35,000
这么一个工具

2650
01:34:35,000 --> 01:34:38,000
说试图解决 setup tools 的各种问题

2651
01:34:38,000 --> 01:34:41,000
但其实后来也发现也没解决掉

2652
01:34:41,000 --> 01:34:44,000
然后又多了这么一个碎片吧

2653
01:34:44,000 --> 01:34:46,000
又把多了一个工具要支持

2654
01:34:46,000 --> 01:34:49,000
然后 Distuteal 也不是特别友好

2655
01:34:49,000 --> 01:34:50,000
我觉得

2656
01:34:51,000 --> 01:34:52,000
我的印象是

2657
01:34:52,000 --> 01:34:55,000
我几乎从来没有怎么用过 Distuteal

2658
01:34:55,000 --> 01:34:56,000
Trust me 你肯定用过

2659
01:34:56,000 --> 01:34:57,000
只是你不知道而已

2660
01:34:57,000 --> 01:34:58,000
What

2661
01:34:58,000 --> 01:34:59,000
他 3 号应该和 setup tool

2662
01:34:59,000 --> 01:35:02,000
有点这种扯无亲到外面的关系

2663
01:35:02,000 --> 01:35:04,000
最新的说法是这两个东西要融合了

2664
01:35:04,000 --> 01:35:07,000
就是在他们

2665
01:35:07,000 --> 01:35:09,000
叫在催生出第三个怪胎来是吗

2666
01:35:09,000 --> 01:35:11,000
对就是因为他们

2667
01:35:11,000 --> 01:35:12,000
就是 setup tools 那帮人

2668
01:35:12,000 --> 01:35:14,000
和 Distuteal 这帮人开发的

2669
01:35:14,000 --> 01:35:15,000
后来发现不行啊

2670
01:35:15,000 --> 01:35:18,000
这我们各自为政搞一套

2671
01:35:18,000 --> 01:35:19,000
新版本

2672
01:35:19,000 --> 01:35:20,000
首先和自己过去不见容

2673
01:35:20,000 --> 01:35:21,000
然后和对方不见容

2674
01:35:21,000 --> 01:35:23,000
这本本就二变四了嘛

2675
01:35:23,000 --> 01:35:24,000
对吧就很沮丧

2676
01:35:24,000 --> 01:35:25,000
所以后来他们说

2677
01:35:25,000 --> 01:35:28,000
算了我们还是合作一把

2678
01:35:28,000 --> 01:35:30,000
所以以后的那个什么 Distuteal 2

2679
01:35:30,000 --> 01:35:32,000
和 setup tools 的下一个版本

2680
01:35:32,000 --> 01:35:34,000
对下一个版本应该是融合在一起的

2681
01:35:34,000 --> 01:35:35,000
然后具体叫什么

2682
01:35:35,000 --> 01:35:36,000
我现在已经不知道了

2683
01:35:36,000 --> 01:35:38,000
我已经放弃理解他们的行为了

2684
01:35:38,000 --> 01:35:41,000
我已经 beyond my comprehension

2685
01:35:42,000 --> 01:35:43,000
OK

2686
01:35:43,000 --> 01:35:45,000
但是那个美好的局面还没有出现

2687
01:35:45,000 --> 01:35:46,000
对实际上我到目前为止

2688
01:35:46,000 --> 01:35:48,000
还是一个挺令人沮丧的情况

2689
01:35:48,000 --> 01:35:50,000
后来也有人受不了了

2690
01:35:50,000 --> 01:35:52,000
就是出现了一个大牛吧

2691
01:35:52,000 --> 01:35:53,000
名字忘了

2692
01:35:53,000 --> 01:35:55,000
他写了这个叫 PEEP 的工具

2693
01:35:55,000 --> 01:35:56,000
PIP

2694
01:35:56,000 --> 01:35:58,000
对其实你刚才说

2695
01:35:58,000 --> 01:36:00,000
我们要一起吐槽 Python

2696
01:36:00,000 --> 01:36:01,000
我心里默默低咕一句

2697
01:36:01,000 --> 01:36:03,000
我现在其实不需要这么吐槽 Python

2698
01:36:03,000 --> 01:36:04,000
我也是

2699
01:36:04,000 --> 01:36:05,000
我已经放弃了

2700
01:36:05,000 --> 01:36:06,000
我把 painful 的部分

2701
01:36:06,000 --> 01:36:08,000
我把 painful 的部分就默默绕过了

2702
01:36:08,000 --> 01:36:10,000
比如说我会用 python

2703
01:36:11,000 --> 01:36:12,000
就是 pythonz

2704
01:36:12,000 --> 01:36:14,000
装好几个版本的 python

2705
01:36:14,000 --> 01:36:17,000
然后每次跑什么东西的时候

2706
01:36:17,000 --> 01:36:19,000
就选择一个 python

2707
01:36:19,000 --> 01:36:21,000
然后在如果需要什么 package 的话

2708
01:36:21,000 --> 01:36:23,000
用 PEEP 在那个

2709
01:36:24,000 --> 01:36:26,000
在该版本的 python 之下

2710
01:36:26,000 --> 01:36:29,000
装只供该版本的 python 使用的 package

2711
01:36:29,000 --> 01:36:31,000
你是这样要玩

2712
01:36:31,000 --> 01:36:33,000
好像也没有什么太痛苦的部分

2713
01:36:33,000 --> 01:36:35,000
那你肯定是装的还不够多

2714
01:36:35,000 --> 01:36:37,000
总会装多了总会遇到坑的

2715
01:36:37,000 --> 01:36:38,000
这个是一定的

2716
01:36:38,000 --> 01:36:39,000
因为这个当年

2717
01:36:39,000 --> 01:36:42,000
这个之前我前几年在知乎工作的时候

2718
01:36:42,000 --> 01:36:44,000
就有遇到这个比较令人沮丧的状况

2719
01:36:44,000 --> 01:36:47,000
因为我们用了那个 python 的包

2720
01:36:47,000 --> 01:36:48,000
比较多比较杂

2721
01:36:48,000 --> 01:36:50,000
然后确实是挺痛苦的

2722
01:36:50,000 --> 01:36:52,000
一定是我还没有遇到企业级

2723
01:36:52,000 --> 01:36:56,000
我还没有进入到企业级 python 的世界

2724
01:36:56,000 --> 01:36:57,000
对对

2725
01:36:57,000 --> 01:36:59,000
不过我的解决方案比你更加决绝

2726
01:36:59,000 --> 01:37:01,000
首先我现在已经不在知乎了

2727
01:37:01,000 --> 01:37:03,000
已经离职好久了

2728
01:37:03,000 --> 01:37:07,000
然后另外我也不再写 python 相关的东西了

2729
01:37:07,000 --> 01:37:09,000
就全面转向 go 和 node

2730
01:37:09,000 --> 01:37:10,000
ok

2731
01:37:10,000 --> 01:37:12,000
就直接避免了这个问题

2732
01:37:12,000 --> 01:37:15,000
你现在在搞学术的时候用的是什么工具

2733
01:37:15,000 --> 01:37:20,000
我这 node 你敢信吗

2734
01:37:20,000 --> 01:37:22,000
node

2735
01:37:22,000 --> 01:37:23,000
seriously

2736
01:37:23,000 --> 01:37:25,000
因为要做一个 demo

2737
01:37:25,000 --> 01:37:28,000
然后这个场景比较适合在浏览器里面搞

2738
01:37:28,000 --> 01:37:29,000
ok

2739
01:37:29,000 --> 01:37:30,000
所以就 javascript

2740
01:37:30,000 --> 01:37:33,000
然后必然就跟 node 车不较关系了

2741
01:37:33,000 --> 01:37:35,000
这个你之后再说

2742
01:37:35,000 --> 01:37:37,000
先接着说回 python 这个东西

2743
01:37:37,000 --> 01:37:40,000
就有人也受不了各种四分五六局面

2744
01:37:40,000 --> 01:37:42,000
他又搞出一个又不见

2745
01:37:42,000 --> 01:37:43,000
不也不见又不见

2746
01:37:43,000 --> 01:37:44,000
不也不不见

2747
01:37:44,000 --> 01:37:46,000
就大部分情况下兼容

2748
01:37:46,000 --> 01:37:48,000
只有小部分时候不兼容的工具叫 peep

2749
01:37:48,000 --> 01:37:49,000
PIP

2750
01:37:49,000 --> 01:37:50,000
嗯

2751
01:37:50,000 --> 01:37:51,000
叫 pipe 还是 peep

2752
01:37:51,000 --> 01:37:52,000
peep 吧

2753
01:37:52,000 --> 01:37:53,000
peep 吧

2754
01:37:53,000 --> 01:37:54,000
我一般念 peep

2755
01:37:54,000 --> 01:37:58,000
他的好处就是他支持 uninstall

2756
01:37:58,000 --> 01:37:59,000
耶

2757
01:37:59,000 --> 01:38:00,000
这是非常

2758
01:38:01,000 --> 01:38:05,000
一个包裹那期终于加入的一个 uninstall 的功能也好耶

2759
01:38:05,000 --> 01:38:06,000
耶

2760
01:38:07,000 --> 01:38:09,000
这听起来有点奇怪

2761
01:38:09,000 --> 01:38:10,000
对 为什么好像有点

2762
01:38:10,000 --> 01:38:11,000
对啊

2763
01:38:11,000 --> 01:38:12,000
难道不是

2764
01:38:12,000 --> 01:38:13,000
很吵热放

2765
01:38:13,000 --> 01:38:14,000
对

2766
01:38:14,000 --> 01:38:16,000
普通用户已经用了十几年的功能

2767
01:38:16,000 --> 01:38:17,000
呃

2768
01:38:17,000 --> 01:38:18,000
peep 有什么好呢

2769
01:38:18,000 --> 01:38:19,000
就是他首先支持啊

2770
01:38:19,000 --> 01:38:21,000
支持支持这个卸载

2771
01:38:21,000 --> 01:38:23,000
这个是很大的一个进步

2772
01:38:23,000 --> 01:38:25,000
然后第二个我觉得比较重要的

2773
01:38:25,000 --> 01:38:28,000
他支持一个所谓的版本冻结

2774
01:38:28,000 --> 01:38:29,000
啊

2775
01:38:29,000 --> 01:38:30,000
就是 peep freeze

2776
01:38:30,000 --> 01:38:31,000
这个

2777
01:38:31,000 --> 01:38:33,000
对你可以装好一对包之后

2778
01:38:33,000 --> 01:38:34,000
你可以说好

2779
01:38:34,000 --> 01:38:35,000
我这个我这个什么

2780
01:38:35,000 --> 01:38:38,000
我这个开发环境搭建好了

2781
01:38:38,000 --> 01:38:40,000
看一下有什么版本的包裹实际来的

2782
01:38:40,000 --> 01:38:41,000
然后就 peep freeze 一下

2783
01:38:41,000 --> 01:38:43,000
然后就返回一个列表

2784
01:38:43,000 --> 01:38:45,000
说你当前装了哪些呃

2785
01:38:45,000 --> 01:38:46,000
python 的这个包

2786
01:38:46,000 --> 01:38:48,000
然后那个包是哪些版本对吧

2787
01:38:48,000 --> 01:38:50,000
啊

2788
01:38:50,000 --> 01:38:51,000
你申请一个列表

2789
01:38:51,000 --> 01:38:53,000
下次你再用那个列表

2790
01:38:53,000 --> 01:38:54,000
然后再 peep 再装一遍

2791
01:38:54,000 --> 01:38:58,000
他就会按照那个列表一行一行的去给你装对应的版本就好了

2792
01:38:58,000 --> 01:39:00,000
就 hopefully it works

2793
01:39:00,000 --> 01:39:05,000
而且以我有限的 hobbylist 的经验来看

2794
01:39:05,000 --> 01:39:07,000
基本上 99%的时间它是 works

2795
01:39:07,000 --> 01:39:08,000
对啊

2796
01:39:08,000 --> 01:39:11,000
当然这也是因为你在国外你不知道中国人民的痛苦

2797
01:39:11,000 --> 01:39:17,000
可是我听说贵网站接下来是机密

2798
01:39:17,000 --> 01:39:25,000
机密那种听众请勿互相泄露就是贵站难道不是内部直接 VPN 翻墙了吗

2799
01:39:25,000 --> 01:39:28,000
呃但是你知道即便是这样翻墙

2800
01:39:28,000 --> 01:39:30,000
网络也是不稳定的吗

2801
01:39:30,000 --> 01:39:34,000
就是你如果用到东西是网络的话

2802
01:39:34,000 --> 01:39:36,000
你首先要假设一点网络是可以随时断掉的

2803
01:39:36,000 --> 01:39:39,000
它可能会在你最不希望它断的时间断掉

2804
01:39:39,000 --> 01:39:41,000
ok 莫非定律

2805
01:39:41,000 --> 01:39:43,000
对基本上是这样

2806
01:39:43,000 --> 01:39:45,000
如果你一旦做了什么企业的运维之后

2807
01:39:45,000 --> 01:39:47,000
你发现这个件事情是一定成立的

2808
01:39:47,000 --> 01:39:52,000
对而其实这就是有一次 maven 导致我们呃

2809
01:39:52,000 --> 01:39:56,000
发布推迟的原因之一就是我们的 nexus 挂掉了

2810
01:39:56,000 --> 01:39:57,000
啊

2811
01:39:57,000 --> 01:39:59,000
不是不是连不上网络而是 nexus 挂掉了

2812
01:39:59,000 --> 01:40:01,000
就 nexus 是呃

2813
01:40:01,000 --> 01:40:03,000
maven 这套系统里面的一个

2814
01:40:03,000 --> 01:40:07,000
或者说支持 maven 系统很重要的一个特征

2815
01:40:07,000 --> 01:40:11,000
就是你可以呃自定义一个包管理服务器

2816
01:40:11,000 --> 01:40:12,000
嗯

2817
01:40:12,000 --> 01:40:19,000
然后把你生你写好的软件呃做为一个原挂在这个

2818
01:40:19,000 --> 01:40:21,000
呃包管理器包管理服务器上

2819
01:40:21,000 --> 01:40:25,000
然后当你在发布新产新的软件的时候

2820
01:40:25,000 --> 01:40:26,000
嗯

2821
01:40:26,000 --> 01:40:28,000
你已经做好那些组件可以就像其他任用

2822
01:40:28,000 --> 01:40:29,000
从其他任何源一样

2823
01:40:30,000 --> 01:40:31,000
嗯

2824
01:40:31,000 --> 01:40:33,000
从你自己的服务器上面呃下载下来

2825
01:40:33,000 --> 01:40:36,000
然后成为呃发布好的系统软件的一部分

2826
01:40:36,000 --> 01:40:38,000
但是如果这个服务器挂掉了

2827
01:40:38,000 --> 01:40:41,000
那也就意味着整个发布过程将无法进行

2828
01:40:41,000 --> 01:40:44,000
然后有一次我们的 Nexus 服务器就挂了

2829
01:40:44,000 --> 01:40:46,000
所以你们这也是有什么 single point of failure

2830
01:40:46,000 --> 01:40:47,000
单点失败了

2831
01:40:47,000 --> 01:40:48,000
对

2832
01:40:48,000 --> 01:40:53,000
把所有的鸡蛋放在一个篮子里是非常愚蠢的一件事

2833
01:40:53,000 --> 01:40:54,000
但对

2834
01:40:54,000 --> 01:40:55,000
当然

2835
01:40:55,000 --> 01:40:56,000
对

2836
01:40:56,000 --> 01:40:58,000
但其实刚才讲的

2837
01:40:58,000 --> 01:40:59,000
I don't blame you

2838
01:40:59,000 --> 01:41:06,000
刚才讲的那些就是 Python 那三个三大工具吧

2839
01:41:06,000 --> 01:41:08,000
他们都依赖于同样一个东西

2840
01:41:08,000 --> 01:41:11,000
叫做 Pypi

2841
01:41:11,000 --> 01:41:12,000
叫 Pypi

2842
01:41:12,000 --> 01:41:14,000
叫 Python Package Index

2843
01:41:14,000 --> 01:41:15,000
对

2844
01:41:15,000 --> 01:41:16,000
Python Package Index

2845
01:41:16,000 --> 01:41:17,000
对

2846
01:41:17,000 --> 01:41:18,000
我不知道到 Pypi 叫 Pyp

2847
01:41:18,000 --> 01:41:19,000
我觉得叫 Pypi 吧

2848
01:41:19,000 --> 01:41:20,000
Pypi 吧

2849
01:41:20,000 --> 01:41:21,000
Pypi 是另外一个东西

2850
01:41:21,000 --> 01:41:23,000
Pypi 又是另外一个东西了

2851
01:41:23,000 --> 01:41:24,000
对

2852
01:41:24,000 --> 01:41:25,000
这里就不说

2853
01:41:25,000 --> 01:41:27,000
先讲 Pypi 吧

2854
01:41:27,000 --> 01:41:29,000
Pypi 呢

2855
01:41:29,000 --> 01:41:29,000
是一个什么

2856
01:41:29,000 --> 01:41:32,000
就是它是一个 Python 这个

2857
01:41:32,000 --> 01:41:34,000
这个 foundation

2858
01:41:34,000 --> 01:41:37,000
Python Software Foundation 维护的一个中央服务器

2859
01:41:37,000 --> 01:41:39,000
就是你们那个 Nexus 差不多

2860
01:41:39,000 --> 01:41:40,000
但是它是通过网络访问的

2861
01:41:40,000 --> 01:41:43,000
然后你每次 Pypi install

2862
01:41:43,000 --> 01:41:43,000
或者 Distit

2863
01:41:43,000 --> 01:41:45,000
去什么 easy install 的时候

2864
01:41:45,000 --> 01:41:46,000
它都要去那里

2865
01:41:46,000 --> 01:41:47,000
去下载

2866
01:41:47,000 --> 01:41:48,000
搜一遍

2867
01:41:48,000 --> 01:41:50,000
你那个要中央的那种名字

2868
01:41:50,000 --> 01:41:52,000
然后在哪里找到那个位置去下载回来

2869
01:41:52,000 --> 01:41:53,000
不知道

2870
01:41:53,000 --> 01:41:54,000
它应该是传到那里一个服务器

2871
01:41:54,000 --> 01:41:55,000
直接下载回来

2872
01:41:55,000 --> 01:41:57,000
它有一个 FTP 服务器

2873
01:41:57,000 --> 01:41:57,000
你可以这么想

2874
01:41:57,000 --> 01:42:00,000
然后它经常挂掉

2875
01:42:00,000 --> 01:42:02,000
OK

2876
01:42:02,000 --> 01:42:03,000
它挂掉的

2877
01:42:03,000 --> 01:42:06,000
就它挂掉的这个概率之频繁

2878
01:42:06,000 --> 01:42:08,000
这是令我唐勿接受

2879
01:42:08,000 --> 01:42:11,000
是在你们公司挂掉

2880
01:42:11,000 --> 01:42:12,000
就是在你

2881
01:42:12,000 --> 01:42:14,000
你从你们公司访问的时候挂掉

2882
01:42:14,000 --> 01:42:14,000
不不不

2883
01:42:14,000 --> 01:42:15,000
它自己就挂掉了

2884
01:42:15,000 --> 01:42:16,000
所有人都不能访问

2885
01:42:16,000 --> 01:42:17,000
What

2886
01:42:17,000 --> 01:42:18,000
真的真的

2887
01:42:18,000 --> 01:42:19,000
前几年的时候

2888
01:42:19,000 --> 01:42:21,000
这个事情超级严重

2889
01:42:21,000 --> 01:42:21,000
OK

2890
01:42:21,000 --> 01:42:24,000
也是因为就两个原因

2891
01:42:24,000 --> 01:42:25,000
它自己已经想挂掉

2892
01:42:25,000 --> 01:42:26,000
一个是我们访问它的网络的情况

2893
01:42:26,000 --> 01:42:27,000
经常会挂掉

2894
01:42:27,000 --> 01:42:29,000
你知道有段时间 Python 到

2895
01:42:29,000 --> 01:42:31,000
org.com

2896
01:42:31,000 --> 01:42:34,000
这个网站是被封掉了吗

2897
01:42:34,000 --> 01:42:34,000
对

2898
01:42:34,000 --> 01:42:36,000
现在也是被封掉了

2899
01:42:36,000 --> 01:42:37,000
不然它为什么要在

2900
01:42:37,000 --> 01:42:38,000
加个中文

2901
01:42:38,000 --> 01:42:41,000
首页上面出现中文的下载两个字

2902
01:42:41,000 --> 01:42:43,000
但这就不是你们觉得很奇怪吗

2903
01:42:43,000 --> 01:42:44,000
你都被封掉了

2904
01:42:44,000 --> 01:42:46,000
你出现中文也有什么用

2905
01:42:46,000 --> 01:42:47,000
这是 parody

2906
01:42:47,000 --> 01:42:48,000
就是

2907
01:42:48,000 --> 01:42:49,000
它故意

2908
01:42:49,000 --> 01:42:50,000
我觉得这就是

2909
01:42:50,000 --> 01:42:51,000
它一个技术

2910
01:42:51,000 --> 01:42:53,000
从一个技术社区来表达

2911
01:42:53,000 --> 01:42:56,000
对于某些政府行为的

2912
01:42:56,000 --> 01:42:56,000
微弱的反抗

2913
01:42:56,000 --> 01:42:57,000
Whatever

2914
01:42:57,000 --> 01:42:58,000
就是

2915
01:42:58,000 --> 01:42:58,000
对

2916
01:42:58,000 --> 01:43:00,000
这个就不懂

2917
01:43:00,000 --> 01:43:00,000
秀武姿态吗

2918
01:43:00,000 --> 01:43:01,000
对

2919
01:43:01,000 --> 01:43:02,000
反正就是双重原因

2920
01:43:02,000 --> 01:43:04,000
它自己本身也不是很稳定

2921
01:43:04,000 --> 01:43:06,000
它自己的 availability 也不是很高

2922
01:43:06,000 --> 01:43:07,000
加上网络的原因

2923
01:43:07,000 --> 01:43:09,000
导致我们经常访问不了它

2924
01:43:09,000 --> 01:43:09,000
所以

2925
01:43:09,000 --> 01:43:14,000
大部分用 Python 做生产的公司也好

2926
01:43:14,000 --> 01:43:15,000
团队也好

2927
01:43:15,000 --> 01:43:17,000
基本上都自己在本内部局

2928
01:43:17,000 --> 01:43:19,000
维护了一个 PyPy 的镜像

2929
01:43:19,000 --> 01:43:20,000
OK

2930
01:43:20,000 --> 01:43:21,000
简单说就是把 PyPy

2931
01:43:21,000 --> 01:43:22,000
很大吗

2932
01:43:22,000 --> 01:43:23,000
你不一定

2933
01:43:23,000 --> 01:43:24,000
你不一定需要全部的

2934
01:43:24,000 --> 01:43:26,000
你只需要你常用的那些

2935
01:43:26,000 --> 01:43:27,000
你只需要 OK

2936
01:43:27,000 --> 01:43:29,000
可是你怎么知道哪些常用

2937
01:43:29,000 --> 01:43:30,000
它是这种它有一种

2938
01:43:30,000 --> 01:43:31,000
这个做的还比较不错

2939
01:43:31,000 --> 01:43:32,000
就是有这个

2940
01:43:32,000 --> 01:43:35,000
就因为 PyPy 经常挂掉

2941
01:43:35,000 --> 01:43:36,000
所以有人写出这种工具

2942
01:43:36,000 --> 01:43:40,000
可以很方便的让你在自己的服务器上架设一个镜像

2943
01:43:40,000 --> 01:43:42,000
然后这个镜像可以说

2944
01:43:42,000 --> 01:43:43,000
就代理嘛

2945
01:43:43,000 --> 01:43:45,000
就是你设置一下你装的时候

2946
01:43:45,000 --> 01:43:48,000
他会先去这个镜像服务器上找

2947
01:43:48,000 --> 01:43:49,000
如果他找不到

2948
01:43:49,000 --> 01:43:53,000
他会让这个镜像服务器去 PyPy 的官方

2949
01:43:53,000 --> 01:43:54,000
去把那个抓了回镜像服务器

2950
01:43:54,000 --> 01:43:55,000
这样下次的话

2951
01:43:55,000 --> 01:43:57,000
你就在那个镜像服务器上有了嘛

2952
01:43:57,000 --> 01:43:59,000
就是人也是一个缓存代理的意思

2953
01:43:59,000 --> 01:44:00,000
对

2954
01:44:00,000 --> 01:44:01,000
对

2955
01:44:01,000 --> 01:44:04,000
就是就到了这种程度了

2956
01:44:04,000 --> 01:44:06,000
当然不过从这个可用性的角度来讲

2957
01:44:06,000 --> 01:44:09,000
你有一个本地的这个镜像也是好的

2958
01:44:09,000 --> 01:44:12,000
就可以避免网络和你们遇到那种情况

2959
01:44:12,000 --> 01:44:13,000
单点失败嘛

2960
01:44:13,000 --> 01:44:15,000
OK

2961
01:44:15,000 --> 01:44:18,000
但是事情还是没有结束

2962
01:44:18,000 --> 01:44:20,000
为什么呢

2963
01:44:20,000 --> 01:44:23,000
因为不管是 Easy Install 也好

2964
01:44:23,000 --> 01:44:25,000
Dist Util 也好

2965
01:44:25,000 --> 01:44:27,000
Pip 也好

2966
01:44:27,000 --> 01:44:32,000
他们基本上不能安装非纯 Python 的包

2967
01:44:32,000 --> 01:44:35,000
Python 作为一个

2968
01:44:35,000 --> 01:44:36,000
Python 作为一个

2969
01:44:36,000 --> 01:44:38,000
这个多少有点强人所难了

2970
01:44:38,000 --> 01:44:39,000
说实话呢

2971
01:44:39,000 --> 01:44:41,000
这个就要解释为什么嘛

2972
01:44:41,000 --> 01:44:43,000
为什么要出现这种一个应用场景

2973
01:44:43,000 --> 01:44:48,000
就是说首先是因为 Python 语言本身是一个比较归宿的语言

2974
01:44:48,000 --> 01:44:53,000
它是一个简式型不带 GIT 的语言

2975
01:44:53,000 --> 01:44:54,000
大部分情况下

2976
01:44:54,000 --> 01:44:58,000
对或者说它的 GIT 支持的特征还不够全面

2977
01:44:58,000 --> 01:44:59,000
对简单来说就是慢

2978
01:44:59,000 --> 01:45:02,000
那么导致它做很多事情的时候就不能

2979
01:45:02,000 --> 01:45:04,000
都需要 Native PyName

2980
01:45:04,000 --> 01:45:07,000
对不能用原生的 Python 的这个代码来实现

2981
01:45:07,000 --> 01:45:08,000
要用这个

2982
01:45:08,000 --> 01:45:10,000
比如用 C 或者 C++来实现

2983
01:45:10,000 --> 01:45:14,000
然后通过一个那种什么 Bridge 的方式

2984
01:45:14,000 --> 01:45:16,000
再通过 Python 去调用它

2985
01:45:16,000 --> 01:45:22,000
比如说最常见的两个这种例子是一个叫做 Numeric Py

2986
01:45:22,000 --> 01:45:23,000
Numeric Py

2987
01:45:23,000 --> 01:45:25,000
是做数值计算的

2988
01:45:25,000 --> 01:45:27,000
比如说什么矩增运算

2989
01:45:27,000 --> 01:45:30,000
另外一个叫做 Python Image Library

2990
01:45:30,000 --> 01:45:32,000
然后这个是干嘛

2991
01:45:32,000 --> 01:45:34,000
就处理图像的

2992
01:45:34,000 --> 01:45:34,000
OK

2993
01:45:34,000 --> 01:45:37,000
就处理图像其实用图还蛮多的

2994
01:45:37,000 --> 01:45:39,000
比如说你做一个搜教网站

2995
01:45:39,000 --> 01:45:41,000
你要用户传个头像上来

2996
01:45:41,000 --> 01:45:42,000
你得想办法检查一下

2997
01:45:42,000 --> 01:45:43,000
压缩一下对吧

2998
01:45:43,000 --> 01:45:45,000
你就用这个 PIL

2999
01:45:45,000 --> 01:45:50,000
PIL 说实话已经好像曾经非常喜欢它

3000
01:45:50,000 --> 01:45:53,000
但是现在好像已经有一阵子从来没有用过

3001
01:45:53,000 --> 01:45:54,000
爱不起来了是吧

3002
01:45:54,000 --> 01:45:55,000
对

3003
01:45:55,000 --> 01:45:56,000
我理解你

3004
01:45:56,000 --> 01:45:57,000
Numeric Py 也是

3005
01:45:57,000 --> 01:46:00,000
其实有一阵子我非常痴迷于在 Mac 上面

3006
01:46:00,000 --> 01:46:03,000
时刻保持一个

3007
01:46:03,000 --> 01:46:04,000
iPython

3008
01:46:04,000 --> 01:46:07,000
iPython 的 QT 版本的 console 在跑

3009
01:46:07,000 --> 01:46:12,000
因为用 QT 你可以内联显示很多很酷

3010
01:46:12,000 --> 01:46:14,000
就有点像 Mathematica

3011
01:46:14,000 --> 01:46:18,000
或者是 Maple 的那种感觉

3012
01:46:18,000 --> 01:46:21,000
就是你潇洒的写下几行代码

3013
01:46:21,000 --> 01:46:22,000
真正的科学计算环境

3014
01:46:22,000 --> 01:46:23,000
对

3015
01:46:23,000 --> 01:46:24,000
冒出一个图表来

3016
01:46:24,000 --> 01:46:27,000
我当时有一个非常痴迷于

3017
01:46:27,000 --> 01:46:29,000
一定要保持我的 Mac 上面跑

3018
01:46:29,000 --> 01:46:29,000
就是这么一个东西

3019
01:46:29,000 --> 01:46:30,000
但是

3020
01:46:30,000 --> 01:46:31,000
其实现在也很多人这么用

3021
01:46:31,000 --> 01:46:34,000
他现在那个 iPython 出了一个叫做 Notebook

3022
01:46:34,000 --> 01:46:35,000
对

3023
01:46:35,000 --> 01:46:35,000
其实

3024
01:46:35,000 --> 01:46:38,000
Python Notebook 是网页版的

3025
01:46:38,000 --> 01:46:39,000
但我就痴迷于

3026
01:46:39,000 --> 01:46:42,000
一定要有一个原生的图形界面的这么一个东西

3027
01:46:42,000 --> 01:46:44,000
它不就是为了解决这个跨平台的问题吗

3028
01:46:44,000 --> 01:46:46,000
看起来非常高大上主要是

3029
01:46:46,000 --> 01:46:47,000
简单一点

3030
01:46:47,000 --> 01:46:48,000
但是后来

3031
01:46:48,000 --> 01:46:48,000
对

3032
01:46:48,000 --> 01:46:49,000
但是后来我

3033
01:46:49,000 --> 01:46:55,000
因为我在 Github 上面维护了一个小 Note

3034
01:46:55,000 --> 01:47:00,000
就是怎样解决一些安装一台新 Mac 的时候

3035
01:47:00,000 --> 01:47:03,000
需要面对的小问题

3036
01:47:03,000 --> 01:47:05,000
然后我写在这个

3037
01:47:05,000 --> 01:47:12,000
我在 iPython QT 版本的这一段 Note 里面

3038
01:47:12,000 --> 01:47:13,000
倾注了大量的心血

3039
01:47:13,000 --> 01:47:16,000
然后最后最后最后的时候

3040
01:47:16,000 --> 01:47:17,000
我绝望在里面写说

3041
01:47:17,000 --> 01:47:21,000
这一切都需要太多努力了

3042
01:47:21,000 --> 01:47:24,000
还是直接 give it up

3043
01:47:24,000 --> 01:47:27,000
and useiPython notebook instead

3044
01:47:27,000 --> 01:47:29,000
好吧

3045
01:47:29,000 --> 01:47:30,000
明白了

3046
01:47:30,000 --> 01:47:31,000
OK

3047
01:47:31,000 --> 01:47:32,000
就说回来这个好东西

3048
01:47:32,000 --> 01:47:34,000
就是说前面的几个工具

3049
01:47:34,000 --> 01:47:35,000
setup tool

3050
01:47:35,000 --> 01:47:35,000
thisutile

3051
01:47:35,000 --> 01:47:37,000
还有 peep 都不能解决

3052
01:47:37,000 --> 01:47:38,000
不能很好地解决

3053
01:47:38,000 --> 01:47:40,000
这个就带有这种 C binding

3054
01:47:40,000 --> 01:47:42,000
或者这种其他语言 binding 的

3055
01:47:42,000 --> 01:47:44,000
Python 的包的安装

3056
01:47:44,000 --> 01:47:46,000
这个时候你有两种方案

3057
01:47:46,000 --> 01:47:48,000
就是像 Python Image Library

3058
01:47:48,000 --> 01:47:49,000
这种巨无霸的

3059
01:47:49,000 --> 01:47:50,000
因为它很大嘛

3060
01:47:50,000 --> 01:47:51,000
这种巨无霸

3061
01:47:51,000 --> 01:47:54,000
它通常给你提供一个官方的安装包

3062
01:47:54,000 --> 01:47:56,000
当然你就装上

3063
01:47:56,000 --> 01:47:57,000
你就用那个官方安装包

3064
01:47:57,000 --> 01:47:58,000
通常是一个比较靠谱的办法

3065
01:47:58,000 --> 01:48:00,000
但是如果你就想

3066
01:48:00,000 --> 01:48:02,000
从某种方式去把这个东西管理起来

3067
01:48:02,000 --> 01:48:04,000
或者是能够办法自动化起来

3068
01:48:04,000 --> 01:48:06,000
就没有办法能够帮到你了

3069
01:48:06,000 --> 01:48:09,000
所以后来就有另外一个工具

3070
01:48:09,000 --> 01:48:10,000
叫做 buildout

3071
01:48:10,000 --> 01:48:11,000
这个你估计没有用过

3072
01:48:11,000 --> 01:48:13,000
其实我之前也没有听说过

3073
01:48:13,000 --> 01:48:15,000
我也是去了知乎之后

3074
01:48:15,000 --> 01:48:17,000
发现还有这么一个东西

3075
01:48:17,000 --> 01:48:20,000
这个东西来源其实还挺古老的

3076
01:48:20,000 --> 01:48:25,000
你知道 Python 在 web 1.9 的时代

3077
01:48:25,000 --> 01:48:29,000
出现过一个叫做 zoop 的这么一个机构

3078
01:48:29,000 --> 01:48:31,000
你不知道你有印象没

3079
01:48:31,000 --> 01:48:32,000
ZOP

3080
01:48:32,000 --> 01:48:33,000
我知道

3081
01:48:33,000 --> 01:48:34,000
对我知道

3082
01:48:34,000 --> 01:48:39,000
而且号称 zoop 是当时如日中天的这么一个

3083
01:48:39,000 --> 01:48:43,000
一个史诗级伟大的酷

3084
01:48:43,000 --> 01:48:44,000
对

3085
01:48:44,000 --> 01:48:45,000
是这样吗

3086
01:48:45,000 --> 01:48:45,000
它是一个

3087
01:48:45,000 --> 01:48:47,000
它是一个

3088
01:48:47,000 --> 01:48:50,000
说它是 CMS 好像不太严谨

3089
01:48:50,000 --> 01:48:51,000
它

3090
01:48:51,000 --> 01:48:53,000
其实算是

3091
01:48:53,000 --> 01:48:54,000
就算一个 framework

3092
01:48:54,000 --> 01:48:55,000
toolkit

3093
01:48:55,000 --> 01:48:56,000
它自称一个 toolkit

3094
01:48:56,000 --> 01:48:57,000
对

3095
01:48:57,000 --> 01:49:00,000
它是一个本来是用来建一个 CMS 的一个 framework

3096
01:49:00,000 --> 01:49:02,000
确实可以这么理解

3097
01:49:02,000 --> 01:49:04,000
但是后来它就越来越臃肿

3098
01:49:04,000 --> 01:49:05,000
已经可以做很多事情了

3099
01:49:05,000 --> 01:49:08,000
然后 buildout 的这个工具

3100
01:49:08,000 --> 01:49:09,000
其实就是最开始

3101
01:49:09,000 --> 01:49:10,000
如果我没记错的话

3102
01:49:10,000 --> 01:49:15,000
就是 zoop 那帮人为了解决他们那个巨无霸的 framework 的安装和

3103
01:49:15,000 --> 01:49:17,000
这个开发的问题

3104
01:49:17,000 --> 01:49:19,000
就写出来的这么一个工具

3105
01:49:19,000 --> 01:49:22,000
然后这个工具的特色是什么呢

3106
01:49:22,000 --> 01:49:25,000
它能支持这种带

3107
01:49:25,000 --> 01:49:29,000
Native binding 的 Python 的包的安装

3108
01:49:29,000 --> 01:49:31,000
因为这里说起来就要提另外一件事情

3109
01:49:31,000 --> 01:49:33,000
就是比如说这个 Python Image Library

3110
01:49:33,000 --> 01:49:35,000
它虽然说是一个非纯

3111
01:49:35,000 --> 01:49:37,000
就它虽然说需要有 Native binding

3112
01:49:37,000 --> 01:49:38,000
它当你安装的时候

3113
01:49:38,000 --> 01:49:41,000
并不是安装它自己本身这么简单

3114
01:49:41,000 --> 01:49:44,000
你还得再装一些其他的什么 C 的一些 cube

3115
01:49:44,000 --> 01:49:46,000
比如什么 Live PNG 啊

3116
01:49:46,000 --> 01:49:46,000
什么乱七八糟的

3117
01:49:46,000 --> 01:49:49,000
然后在 Linux 上面这些话

3118
01:49:49,000 --> 01:49:50,000
你就要通过

3119
01:49:50,000 --> 01:49:52,000
就在你装这个 PIL 之前

3120
01:49:52,000 --> 01:49:55,000
你还得用什么 apt 或者是 Yarm 的方式

3121
01:49:55,000 --> 01:49:58,000
把那些的依赖给先给装上去

3122
01:49:58,000 --> 01:50:01,000
然后你再可以再装这个 Python Image Library

3123
01:50:01,000 --> 01:50:01,000
才可以成功

3124
01:50:01,000 --> 01:50:02,000
对

3125
01:50:02,000 --> 01:50:03,000
然后这样的话

3126
01:50:03,000 --> 01:50:06,000
就其实手工操作是非常繁琐

3127
01:50:06,000 --> 01:50:08,000
和容易出错的一个过程

3128
01:50:08,000 --> 01:50:08,000
你可以

3129
01:50:08,000 --> 01:50:09,000
如果你不信

3130
01:50:09,000 --> 01:50:10,000
你可以去试一下

3131
01:50:10,000 --> 01:50:13,000
我对此还是有所提问的

3132
01:50:13,000 --> 01:50:13,000
因为装

3133
01:50:13,000 --> 01:50:16,000
就像我说的 iPython 的 Qt Console

3134
01:50:16,000 --> 01:50:18,000
其实也是这么一个过程

3135
01:50:18,000 --> 01:50:19,000
你首先要用包管理工具

3136
01:50:19,000 --> 01:50:23,000
去安装一些 Library

3137
01:50:23,000 --> 01:50:25,000
然后再安装

3138
01:50:25,000 --> 01:50:25,000
对啊

3139
01:50:25,000 --> 01:50:26,000
Qt 之类的

3140
01:50:26,000 --> 01:50:27,000
然后再去

3141
01:50:27,000 --> 01:50:30,000
再用 Python 去安装对应的组件

3142
01:50:30,000 --> 01:50:31,000
然后还有什么

3143
01:50:31,000 --> 01:50:32,000
ZeroMQ 之类的东西

3144
01:50:32,000 --> 01:50:34,000
都要一个一个都装上

3145
01:50:34,000 --> 01:50:34,000
对对对

3146
01:50:34,000 --> 01:50:36,000
其实我当时在知识用的时候

3147
01:50:36,000 --> 01:50:38,000
也是因为就是最主要原因

3148
01:50:38,000 --> 01:50:40,000
就是尝试用那个 ZeroMQ

3149
01:50:40,000 --> 01:50:42,000
要装一些 C 的东西

3150
01:50:42,000 --> 01:50:43,000
对

3151
01:50:43,000 --> 01:50:45,000
然后 Buildo 就可以用一个

3152
01:50:45,000 --> 01:50:45,000
这种方式

3153
01:50:45,000 --> 01:50:46,000
它就可以解决

3154
01:50:46,000 --> 01:50:48,000
它可以指定一些脚本

3155
01:50:48,000 --> 01:50:50,000
在你安装某个包之前

3156
01:50:50,000 --> 01:50:52,000
你可以先声明它依赖哪些

3157
01:50:52,000 --> 01:50:54,000
非 Python 的东西

3158
01:50:54,000 --> 01:50:55,000
然后系统先帮你安装好

3159
01:50:55,000 --> 01:50:57,000
比如说支持一个 apt 什么的

3160
01:50:57,000 --> 01:50:58,000
帮你装好

3161
01:50:58,000 --> 01:50:58,000
然后你再装

3162
01:50:58,000 --> 01:51:00,000
然后再报那个过程

3163
01:51:00,000 --> 01:51:02,000
但是 Buildo 是一个神一样的存在

3164
01:51:02,000 --> 01:51:03,000
你知道吗

3165
01:51:03,000 --> 01:51:04,000
当时

3166
01:51:04,000 --> 01:51:04,000
现在我不知道情况

3167
01:51:04,000 --> 01:51:05,000
会不会好转一些

3168
01:51:05,000 --> 01:51:06,000
当时我用的时候

3169
01:51:06,000 --> 01:51:07,000
我想去学它

3170
01:51:07,000 --> 01:51:08,000
就是一个三无产品

3171
01:51:08,000 --> 01:51:09,000
就你刷它网上之后

3172
01:51:09,000 --> 01:51:10,000
你知道

3173
01:51:10,000 --> 01:51:11,000
没有文档

3174
01:51:11,000 --> 01:51:13,000
没有官方文档

3175
01:51:13,000 --> 01:51:15,000
所有的人找到的

3176
01:51:15,000 --> 01:51:16,000
都是只有网上

3177
01:51:16,000 --> 01:51:18,000
吸吸拉了一些教程

3178
01:51:18,000 --> 01:51:19,000
然后你不知道这个东西

3179
01:51:19,000 --> 01:51:20,000
最开始

3180
01:51:20,000 --> 01:51:21,000
不知道是谁在维护的

3181
01:51:21,000 --> 01:51:22,000
因为它现在没有

3182
01:51:22,000 --> 01:51:24,000
没有说这个东西是找

3183
01:51:24,000 --> 01:51:25,000
你就不知道去找谁

3184
01:51:25,000 --> 01:51:26,000
它有一个 main list

3185
01:51:26,000 --> 01:51:27,000
那 that's all

3186
01:51:27,000 --> 01:51:28,000
那's it

3187
01:51:28,000 --> 01:51:29,000
就是你没有办法再去

3188
01:51:29,000 --> 01:51:29,000
等等

3189
01:51:29,000 --> 01:51:31,000
三无产品

3190
01:51:31,000 --> 01:51:32,000
我们可以定义一下

3191
01:51:32,000 --> 01:51:33,000
三无产品到底是哪三无

3192
01:51:33,000 --> 01:51:34,000
没有文档是肯定的

3193
01:51:34,000 --> 01:51:35,000
没有文档

3194
01:51:35,000 --> 01:51:38,000
没有这个稳定的开发者

3195
01:51:38,000 --> 01:51:39,000
然后你出了问题

3196
01:51:39,000 --> 01:51:40,000
不知道去哪里

3197
01:51:40,000 --> 01:51:40,000
我问

3198
01:51:40,000 --> 01:51:44,000
无文档

3199
01:51:44,000 --> 01:51:45,000
无稳定维护者

3200
01:51:45,000 --> 01:51:46,000
还有一个无

3201
01:51:46,000 --> 01:51:48,000
就是不知道去哪里问问题

3202
01:51:48,000 --> 01:51:49,000
就是出了问题找谁

3203
01:51:49,000 --> 01:51:50,000
不知道

3204
01:51:50,000 --> 01:51:51,000
无社区

3205
01:51:51,000 --> 01:51:51,000
对

3206
01:51:51,000 --> 01:51:53,000
然后就发现

3207
01:51:53,000 --> 01:51:53,000
哇

3208
01:51:53,000 --> 01:51:54,000
这也可以

3209
01:51:54,000 --> 01:51:56,000
而且这既然是

3210
01:51:56,000 --> 01:51:58,000
我所知道的

3211
01:51:58,000 --> 01:51:59,000
能够解决这个 python

3212
01:51:59,000 --> 01:52:00,000
这种

3213
01:52:00,000 --> 01:52:03,000
就是安装非纯 python 包的

3214
01:52:03,000 --> 01:52:04,000
唯一的一个比较好的

3215
01:52:04,000 --> 01:52:05,000
能用的工具

3216
01:52:05,000 --> 01:52:06,000
都不能说它好了

3217
01:52:06,000 --> 01:52:07,000
能用的自动工具

3218
01:52:07,000 --> 01:52:08,000
对

3219
01:52:08,000 --> 01:52:09,000
然后它的体验

3220
01:52:09,000 --> 01:52:10,000
是相当

3221
01:52:10,000 --> 01:52:11,000
使用体验实际上都糟糕的

3222
01:52:11,000 --> 01:52:12,000
它的配置文件

3223
01:52:12,000 --> 01:52:13,000
是一个点

3224
01:52:13,000 --> 01:52:15,000
INI 的文件

3225
01:52:15,000 --> 01:52:15,000
What

3226
01:52:15,000 --> 01:52:17,000
然后你需要再

3227
01:52:17,000 --> 01:52:18,000
开发者是什么背景

3228
01:52:18,000 --> 01:52:18,000
Zoop

3229
01:52:18,000 --> 01:52:19,000
你自己想想

3230
01:52:19,000 --> 01:52:20,000
这么古老的

3231
01:52:20,000 --> 01:52:21,000
Ancient 的东西

3232
01:52:21,000 --> 01:52:23,000
就有出现这种情况

3233
01:52:23,000 --> 01:52:24,000
也不奇怪了

3234
01:52:24,000 --> 01:52:24,000
就还好

3235
01:52:24,000 --> 01:52:24,000
还好

3236
01:52:24,000 --> 01:52:26,000
可不是太糟糕

3237
01:52:26,000 --> 01:52:27,000
但糟糕的是

3238
01:52:27,000 --> 01:52:28,000
你需要在这个

3239
01:52:28,000 --> 01:52:29,000
INI 文件里面

3240
01:52:29,000 --> 01:52:30,000
INI 文件的格式

3241
01:52:30,000 --> 01:52:30,000
它你想

3242
01:52:30,000 --> 01:52:31,000
应该也很明白

3243
01:52:31,000 --> 01:52:33,000
就是有它分几个

3244
01:52:33,000 --> 01:52:33,000
一小节

3245
01:52:33,000 --> 01:52:34,000
一个 section

3246
01:52:34,000 --> 01:52:35,000
每个 section

3247
01:52:35,000 --> 01:52:36,000
是一个放过号

3248
01:52:36,000 --> 01:52:37,000
不要分开

3249
01:52:37,000 --> 01:52:38,000
有个 section

3250
01:52:38,000 --> 01:52:39,000
INI 不管怎么说

3251
01:52:39,000 --> 01:52:40,000
还是要比 XML 好

3252
01:52:40,000 --> 01:52:41,000
对

3253
01:52:41,000 --> 01:52:42,000
还是比 XML 要好一点

3254
01:52:42,000 --> 01:52:43,000
但是

3255
01:52:43,000 --> 01:52:44,000
他们把这个

3256
01:52:44,000 --> 01:52:45,000
已经用到了极致了

3257
01:52:45,000 --> 01:52:47,000
然后每个 section 里面

3258
01:52:47,000 --> 01:52:48,000
它是一个

3259
01:52:48,000 --> 01:52:49,000
就是 key value 的

3260
01:52:49,000 --> 01:52:51,000
一个 pair

3261
01:52:51,000 --> 01:52:51,000
一个对

3262
01:52:51,000 --> 01:52:52,000
就是一个

3263
01:52:52,000 --> 01:52:53,000
一个主件

3264
01:52:53,000 --> 01:52:54,000
然后它们有个竖直

3265
01:52:54,000 --> 01:52:56,000
为了解决

3266
01:52:56,000 --> 01:52:57,000
build 到的中间的

3267
01:52:57,000 --> 01:52:58,000
各种问题

3268
01:52:58,000 --> 01:52:59,000
你需要在里面插入

3269
01:52:59,000 --> 01:53:02,000
用一些很诡异的方法

3270
01:53:02,000 --> 01:53:04,000
去写版本字符串

3271
01:53:04,000 --> 01:53:06,000
你需要在里面插入

3272
01:53:06,000 --> 01:53:08,000
这个 shell 脚本

3273
01:53:08,000 --> 01:53:11,000
在 INI 里面插入 shell 脚本

3274
01:53:11,000 --> 01:53:12,000
这是什么黑魔法

3275
01:53:12,000 --> 01:53:14,000
所以你知道

3276
01:53:14,000 --> 01:53:14,000
build 到是多么一个

3277
01:53:14,000 --> 01:53:16,000
惨痛的存在了吧

3278
01:53:16,000 --> 01:53:16,000
对

3279
01:53:16,000 --> 01:53:17,000
Holy

3280
01:53:17,000 --> 01:53:19,000
就是我一直对它

3281
01:53:19,000 --> 01:53:21,000
吐槽不能

3282
01:53:21,000 --> 01:53:22,000
但是又不得不用的

3283
01:53:22,000 --> 01:53:23,000
一个可能

3284
01:53:23,000 --> 01:53:24,000
令人沮丧的攻击

3285
01:53:24,000 --> 01:53:27,000
可是我刚刚在 build out

3286
01:53:27,000 --> 01:53:29,000
我刚刚在 github 上面

3287
01:53:29,000 --> 01:53:29,000
发现 build out

3288
01:53:29,000 --> 01:53:30,000
slashbuild out

3289
01:53:30,000 --> 01:53:31,000
这个 reportory

3290
01:53:31,000 --> 01:53:33,000
什么话

3291
01:53:33,000 --> 01:53:34,000
对

3292
01:53:34,000 --> 01:53:35,000
这难道是

3293
01:53:35,000 --> 01:53:36,000
他们官方的酷吗

3294
01:53:36,000 --> 01:53:37,000
所以它已经去了

3295
01:53:37,000 --> 01:53:38,000
去了 github 了

3296
01:53:38,000 --> 01:53:40,000
所以可能事情

3297
01:53:40,000 --> 01:53:40,000
有所好转

3298
01:53:40,000 --> 01:53:42,000
有可能

3299
01:53:42,000 --> 01:53:43,000
好吧

3300
01:53:43,000 --> 01:53:45,000
但起码你可以去

3301
01:53:45,000 --> 01:53:46,000
它的这个什么

3302
01:53:46,000 --> 01:53:47,000
buildout.org

3303
01:53:47,000 --> 01:53:48,000
这个网站

3304
01:53:48,000 --> 01:53:49,000
你可以发现

3305
01:53:49,000 --> 01:53:50,000
它有一个 learn

3306
01:53:50,000 --> 01:53:51,000
这个选项

3307
01:53:51,000 --> 01:53:53,000
里面就是一堆 tutorial

3308
01:53:53,000 --> 01:53:54,000
然后完了

3309
01:53:54,000 --> 01:53:57,000
然后它教你

3310
01:53:57,000 --> 01:53:59,000
用它的唯一的方式

3311
01:53:59,000 --> 01:54:00,000
就是给你一堆例子

3312
01:54:00,000 --> 01:54:06,000
而且在 github 里面的

3313
01:54:06,000 --> 01:54:08,000
贡献最多的这个人

3314
01:54:08,000 --> 01:54:10,000
叫做 Jim Fulton

3315
01:54:10,000 --> 01:54:13,000
他显示的工作地点

3316
01:54:13,000 --> 01:54:15,000
是 Zoap Corporation

3317
01:54:15,000 --> 01:54:18,000
所以有可能他就是

3318
01:54:18,000 --> 01:54:20,000
你一直苦苦在寻找的

3319
01:54:20,000 --> 01:54:21,000
主要维护者

3320
01:54:21,000 --> 01:54:22,000
对啊

3321
01:54:22,000 --> 01:54:22,000
因为这个 build out

3322
01:54:22,000 --> 01:54:23,000
是他写的嘛

3323
01:54:23,000 --> 01:54:23,000
最开始的时候

3324
01:54:23,000 --> 01:54:26,000
但是我相当确定

3325
01:54:26,000 --> 01:54:26,000
应该没有

3326
01:54:26,000 --> 01:54:28,000
他没有在更新这个东西了

3327
01:54:28,000 --> 01:54:29,000
OK

3328
01:54:29,000 --> 01:54:32,000
所以这是一个半死不活的项目

3329
01:54:32,000 --> 01:54:33,000
靠着社区

3330
01:54:33,000 --> 01:54:34,000
也不知道谁在维护

3331
01:54:34,000 --> 01:54:35,000
Anyway

3332
01:54:35,000 --> 01:54:38,000
就像游魂一样的软件

3333
01:54:38,000 --> 01:54:38,000
对

3334
01:54:38,000 --> 01:54:39,000
但是你又不得不用它

3335
01:54:39,000 --> 01:54:41,000
而且你发现

3336
01:54:41,000 --> 01:54:42,000
Thumb Out

3337
01:54:42,000 --> 01:54:44,000
你竟然能够用它来

3338
01:54:44,000 --> 01:54:45,000
还能用

3339
01:54:45,000 --> 01:54:48,000
所以软件不在新

3340
01:54:48,000 --> 01:54:49,000
能用就行吗

3341
01:54:49,000 --> 01:54:52,000
但是其实很多可能

3342
01:54:52,000 --> 01:54:53,000
今天会出问题

3343
01:54:53,000 --> 01:54:55,000
不过它还有一些比较令人

3344
01:54:55,000 --> 01:54:56,000
就是对于一个

3345
01:54:56,000 --> 01:54:57,000
这么古老的软件

3346
01:54:57,000 --> 01:55:00,000
它有些令人蛮惊艳的特性的

3347
01:55:00,000 --> 01:55:01,000
比如说刚才讲的

3348
01:55:01,000 --> 01:55:02,000
那些什么 PIP

3349
01:55:02,000 --> 01:55:03,000
那些工具啊

3350
01:55:03,000 --> 01:55:04,000
就是经常那个 Pipe

3351
01:55:04,000 --> 01:55:06,000
那个主战挂了

3352
01:55:06,000 --> 01:55:07,000
不就下不了了吗

3353
01:55:07,000 --> 01:55:08,000
build out

3354
01:55:08,000 --> 01:55:09,000
它竟然有自带的这种

3355
01:55:09,000 --> 01:55:11,000
本地缓存机制

3356
01:55:11,000 --> 01:55:11,000
你知道吗

3357
01:55:11,000 --> 01:55:14,000
就是你一旦下载过某一个

3358
01:55:14,000 --> 01:55:15,000
安装用过

3359
01:55:15,000 --> 01:55:16,000
refer 过某个版本

3360
01:55:16,000 --> 01:55:17,000
它会把那个版本的

3361
01:55:17,000 --> 01:55:18,000
这个原码

3362
01:55:18,000 --> 01:55:20,000
就从 Pipe

3363
01:55:20,000 --> 01:55:20,000
或者是某个地方

3364
01:55:20,000 --> 01:55:21,000
抓回来的

3365
01:55:21,000 --> 01:55:22,000
在你本地的

3366
01:55:22,000 --> 01:55:23,000
它管理的一个

3367
01:55:23,000 --> 01:55:24,000
一个隐藏的目录下面

3368
01:55:24,000 --> 01:55:25,000
去存起来

3369
01:55:25,000 --> 01:55:27,000
这样你下次装它的

3370
01:55:27,000 --> 01:55:28,000
你下次再运行 build out 的时候

3371
01:55:28,000 --> 01:55:30,000
它就不用再去网上抓

3372
01:55:30,000 --> 01:55:31,000
而且直接把那层

3373
01:55:31,000 --> 01:55:32,000
里面复制一份过来就好了

3374
01:55:32,000 --> 01:55:33,000
OK

3375
01:55:33,000 --> 01:55:34,000
为什么毫不惊讶呢

3376
01:55:34,000 --> 01:55:35,000
因为妹妹也有这个功能

3377
01:55:35,000 --> 01:55:36,000
对对

3378
01:55:36,000 --> 01:55:37,000
但是你想

3379
01:55:37,000 --> 01:55:38,000
它是一个多古老的软件

3380
01:55:38,000 --> 01:55:39,000
但是有这种功能

3381
01:55:39,000 --> 01:55:41,000
还是相当不错的

3382
01:55:41,000 --> 01:55:42,000
挺好的一个事情

3383
01:55:42,000 --> 01:55:44,000
但是它的使用体验

3384
01:55:44,000 --> 01:55:45,000
实在是太糟糕了

3385
01:55:45,000 --> 01:55:47,000
好

3386
01:55:47,000 --> 01:55:49,000
我对 Python 的吐槽

3387
01:55:49,000 --> 01:55:52,000
就为了不要拉太多仇恨

3388
01:55:52,000 --> 01:55:53,000
吐槽到此为止

3389
01:55:53,000 --> 01:55:55,000
还好吧

3390
01:55:55,000 --> 01:55:57,000
只要我们是保持自黑的姿态

3391
01:55:57,000 --> 01:55:59,000
应该就不会招来太多的

3392
01:55:59,000 --> 01:56:00,000
不要黑别人

3393
01:56:00,000 --> 01:56:01,000
黑自己就行了

3394
01:56:01,000 --> 01:56:02,000
对

3395
01:56:02,000 --> 01:56:04,000
而我们来看一看敌对阵营

3396
01:56:04,000 --> 01:56:06,000
不不不

3397
01:56:06,000 --> 01:56:08,000
现在我已经叛逃了

3398
01:56:08,000 --> 01:56:10,000
我已经加入了这个阵营

3399
01:56:10,000 --> 01:56:11,000
Node

3400
01:56:11,000 --> 01:56:13,000
这个 JavaScript 的

3401
01:56:13,000 --> 01:56:15,000
你觉得 Node 是敌对阵营吗

3402
01:56:15,000 --> 01:56:15,000
我不觉得

3403
01:56:15,000 --> 01:56:17,000
我觉得 Node 是兄弟阵营

3404
01:56:17,000 --> 01:56:17,000
不是吗

3405
01:56:17,000 --> 01:56:18,000
你那敌对阵营是哪里

3406
01:56:18,000 --> 01:56:19,000
Ruby

3407
01:56:19,000 --> 01:56:20,000
敌对阵营那是 Ruby 了

3408
01:56:20,000 --> 01:56:22,000
其实 Ruby 我不是很熟

3409
01:56:22,000 --> 01:56:23,000
我也不熟

3410
01:56:23,000 --> 01:56:24,000
但至少

3411
01:56:24,000 --> 01:56:26,000
JAM 这个

3412
01:56:26,000 --> 01:56:28,000
包裹女系统

3413
01:56:28,000 --> 01:56:29,000
在我有限的使用经验里面

3414
01:56:29,000 --> 01:56:32,000
要比 Python 的体验好很多

3415
01:56:32,000 --> 01:56:33,000
首先那只有一套对吧

3416
01:56:34,000 --> 01:56:37,000
不像 Python 那种四分五列的

3417
01:56:37,000 --> 01:56:38,000
搞五套出来

3418
01:56:38,000 --> 01:56:39,000
对

3419
01:56:39,000 --> 01:56:41,000
Ruby 社区不管怎么说

3420
01:56:41,000 --> 01:56:42,000
最好的一点就是团结

3421
01:56:42,000 --> 01:56:44,000
就是我们 Python 社区做不到的

3422
01:56:44,000 --> 01:56:45,000
对

3423
01:56:45,000 --> 01:56:47,000
就是我觉得他们更加乐于

3424
01:56:47,000 --> 01:56:51,000
去为了达成一个共识吧

3425
01:56:51,000 --> 01:56:52,000
去改变自己

3426
01:56:52,000 --> 01:56:53,000
对

3427
01:56:53,000 --> 01:56:54,000
这点是挺好的

3428
01:56:54,000 --> 01:56:56,000
所以 JAM 的体验

3429
01:56:56,000 --> 01:56:57,000
我其实体验不多的

3430
01:56:57,000 --> 01:56:59,000
你有什么体验吗

3431
01:56:59,000 --> 01:57:01,000
我老实说

3432
01:57:01,000 --> 01:57:03,000
我也不是特别多

3433
01:57:03,000 --> 01:57:03,000
只不过

3434
01:57:03,000 --> 01:57:07,000
Ruby 简直是

3435
01:57:07,000 --> 01:57:08,000
你接触一点

3436
01:57:08,000 --> 01:57:10,000
稍微新一点的东西

3437
01:57:10,000 --> 01:57:12,000
是绕不开那个工具吗

3438
01:57:12,000 --> 01:57:12,000
那最简单的

3439
01:57:12,000 --> 01:57:13,000
刚才讲

3440
01:57:13,000 --> 01:57:14,000
上面提到那个

3441
01:57:14,000 --> 01:57:15,000
Home Bruce Ruby 的

3442
01:57:15,000 --> 01:57:16,000
你必须要

3443
01:57:16,000 --> 01:57:17,000
对 Home Bruce Ruby 的

3444
01:57:17,000 --> 01:57:17,000
然后

3445
01:57:17,000 --> 01:57:20,000
比如说写那个

3446
01:57:20,000 --> 01:57:21,000
iOS 的

3447
01:57:21,000 --> 01:57:22,000
iOS 上面的包裹的工具

3448
01:57:22,000 --> 01:57:24,000
或者 Object C 的包裹的工具

3449
01:57:24,000 --> 01:57:26,000
Cocoapods

3450
01:57:26,000 --> 01:57:28,000
也是 Ruby 写的

3451
01:57:28,000 --> 01:57:28,000
What

3452
01:57:28,000 --> 01:57:29,000
Yes

3453
01:57:29,000 --> 01:57:30,000
我没有说错

3454
01:57:30,000 --> 01:57:33,000
Cocoapod 本身是一个 Ruby Jam

3455
01:57:33,000 --> 01:57:34,000
很神奇吧

3456
01:57:34,000 --> 01:57:35,000
OK

3457
01:57:35,000 --> 01:57:37,000
那它其实跟 Home Bruce 的形式

3458
01:57:37,000 --> 01:57:38,000
比较类似了吗

3459
01:57:38,000 --> 01:57:39,000
就它的 Cocoapod

3460
01:57:39,000 --> 01:57:40,000
一个 Pod 文件

3461
01:57:40,000 --> 01:57:42,000
也是一个 Ruby 的文件吗

3462
01:57:42,000 --> 01:57:45,000
应该是这样的吧

3463
01:57:45,000 --> 01:57:46,000
我忘了

3464
01:57:46,000 --> 01:57:47,000
我忘了 Pod

3465
01:57:47,000 --> 01:57:49,000
你证明说我还真

3466
01:57:49,000 --> 01:57:51,000
Podfile 的语法

3467
01:57:51,000 --> 01:57:52,000
是 Ruby 的语法吗

3468
01:57:52,000 --> 01:57:53,000
还是一个 JSON

3469
01:57:53,000 --> 01:57:54,000
还是一个什么东西

3470
01:57:54,000 --> 01:57:55,000
它是一个

3471
01:57:55,000 --> 01:57:57,000
也是用 Ruby 写的

3472
01:57:57,000 --> 01:57:57,000
那个

3473
01:57:57,000 --> 01:57:58,000
DSL

3474
01:57:58,000 --> 01:57:59,000
DSL

3475
01:57:59,000 --> 01:58:00,000
这个 Ruby 开发者

3476
01:58:00,000 --> 01:58:01,000
最喜欢做的事情

3477
01:58:01,000 --> 01:58:03,000
就是写 DSL

3478
01:58:03,000 --> 01:58:03,000
对

3479
01:58:03,000 --> 01:58:04,000
Ruby 毕竟是一个

3480
01:58:04,000 --> 01:58:06,000
非常适合写 DSL

3481
01:58:06,000 --> 01:58:06,000
也这也不能怪

3482
01:58:06,000 --> 01:58:07,000
你知道这句话

3483
01:58:07,000 --> 01:58:08,000
我听的最首的地方

3484
01:58:08,000 --> 01:58:09,000
是在哪里吗

3485
01:58:09,000 --> 01:58:09,000
哪

3486
01:58:09,000 --> 01:58:10,000
Scala

3487
01:58:10,000 --> 01:58:12,000
Scala 写 DSL

3488
01:58:12,000 --> 01:58:12,000
对

3489
01:58:12,000 --> 01:58:14,000
Ruby 写 DSL

3490
01:58:14,000 --> 01:58:14,000
你还觉得

3491
01:58:14,000 --> 01:58:15,000
从人看出来一眼

3492
01:58:15,000 --> 01:58:16,000
就能看出它是一个 Ruby 的文件

3493
01:58:16,000 --> 01:58:17,000
Scala 写 DSL

3494
01:58:17,000 --> 01:58:18,000
My ass

3495
01:58:18,000 --> 01:58:19,000
你听我解释

3496
01:58:19,000 --> 01:58:21,000
就是说你说 Ruby 写 DSL

3497
01:58:21,000 --> 01:58:21,000
它还有一些东西

3498
01:58:21,000 --> 01:58:22,000
是很明显的

3499
01:58:22,000 --> 01:58:23,000
Ruby 的语法

3500
01:58:23,000 --> 01:58:24,000
很记在里面

3501
01:58:24,000 --> 01:58:24,000
对吧

3502
01:58:24,000 --> 01:58:26,000
你可以看出它是一个 class

3503
01:58:26,000 --> 01:58:27,000
然后它那个什么

3504
01:58:27,000 --> 01:58:28,000
block 的语法

3505
01:58:28,000 --> 01:58:30,000
就是很鲜明的特点

3506
01:58:30,000 --> 01:58:30,000
对吧

3507
01:58:30,000 --> 01:58:32,000
Scala 写出来 DSL

3508
01:58:32,000 --> 01:58:33,000
你甚至看不出它

3509
01:58:33,000 --> 01:58:34,000
有时候你不仔细看

3510
01:58:34,000 --> 01:58:35,000
你还看不出它是 Scala

3511
01:58:35,000 --> 01:58:38,000
这是它的优点还是缺点

3512
01:58:38,000 --> 01:58:39,000
我总觉得越听越像缺点

3513
01:58:39,000 --> 01:58:40,000
这都是

3514
01:58:40,000 --> 01:58:41,000
就是优点就是说

3515
01:58:41,000 --> 01:58:43,000
它能够可以让你

3516
01:58:43,000 --> 01:58:44,000
定义一些很诡异的语法

3517
01:58:44,000 --> 01:58:45,000
它的原编程能力非常强大

3518
01:58:45,000 --> 01:58:46,000
对

3519
01:58:46,000 --> 01:58:46,000
缺点也就是

3520
01:58:46,000 --> 01:58:48,000
它可以编得连

3521
01:58:48,000 --> 01:58:50,000
编得连亲爹都不认识

3522
01:58:50,000 --> 01:58:50,000
对

3523
01:58:50,000 --> 01:58:53,000
就是 Scala 那种写的 DSL

3524
01:58:53,000 --> 01:58:54,000
就是如果你不知道

3525
01:58:54,000 --> 01:58:56,000
这个 DSL 的这个实现方式

3526
01:58:56,000 --> 01:58:57,000
或者模板是怎么样子

3527
01:58:57,000 --> 01:58:59,000
你根本别想往下写下去

3528
01:58:59,000 --> 01:59:01,000
这根本不现实

3529
01:59:01,000 --> 01:59:02,000
对

3530
01:59:02,000 --> 01:59:03,000
有这种情况发生

3531
01:59:03,000 --> 01:59:06,000
还有什么呢

3532
01:59:06,000 --> 01:59:09,000
我前两天还用了一个什么东西

3533
01:59:09,000 --> 01:59:09,000
对不对

3534
01:59:09,000 --> 01:59:10,000
Rick File

3535
01:59:10,000 --> 01:59:11,000
Rick File

3536
01:59:11,000 --> 01:59:12,000
这种

3537
01:59:12,000 --> 01:59:16,000
也可以理解为 DSL

3538
01:59:16,000 --> 01:59:18,000
它本身也是一个 DSL

3539
01:59:18,000 --> 01:59:18,000
说实话

3540
01:59:18,000 --> 01:59:20,000
Rick File 这种

3541
01:59:20,000 --> 01:59:22,000
或者说 Rick 这个工具

3542
01:59:22,000 --> 01:59:24,000
在很多开源工具里面

3543
01:59:24,000 --> 01:59:25,000
已经取代了

3544
01:59:25,000 --> 01:59:26,000
Make

3545
01:59:26,000 --> 01:59:32,000
或者是其他一些更加冷屁的工具

3546
01:59:32,000 --> 01:59:32,000
对

3547
01:59:32,000 --> 01:59:33,000
这个我有意思

3548
01:59:33,000 --> 01:59:35,000
成为了一种默认的安装工具

3549
01:59:35,000 --> 01:59:37,000
或者是默认的执行工具

3550
01:59:37,000 --> 01:59:38,000
我觉得这个也挺有意思的

3551
01:59:38,000 --> 01:59:38,000
对

3552
01:59:38,000 --> 01:59:40,000
就比如说前两天

3553
01:59:40,000 --> 01:59:42,000
我在 Stack Overflow 上面

3554
01:59:42,000 --> 01:59:44,000
获得了风滚草勋章

3555
01:59:44,000 --> 01:59:49,000
就是提问了一个问题

3556
01:59:49,000 --> 01:59:50,000
没有人关注

3557
01:59:50,000 --> 01:59:52,000
没有人 Upload

3558
01:59:52,000 --> 01:59:53,000
没有人回答

3559
01:59:53,000 --> 01:59:54,000
这叫风滚草

3560
01:59:54,000 --> 01:59:56,000
持续过了一个星期

3561
01:59:56,000 --> 01:59:57,000
对

3562
01:59:57,000 --> 01:59:59,000
然后你就会获得风滚草勋章

3563
01:59:59,000 --> 02:00:02,000
因为你提这个问题实在是太小众了

3564
02:00:02,000 --> 02:00:03,000
没有人去管

3565
02:00:03,000 --> 02:00:06,000
三无问题是吧

3566
02:00:06,000 --> 02:00:06,000
对

3567
02:00:06,000 --> 02:00:10,000
然后一个兄弟非常热心的来帮我

3568
02:00:10,000 --> 02:00:15,000
然后折腾出了一个 GitRepository

3569
02:00:15,000 --> 02:00:17,000
说你看我做了一个活生生的例子

3570
02:00:17,000 --> 02:00:18,000
你去试试吧

3571
02:00:18,000 --> 02:00:20,000
然后我兴高踩的 APDX

3572
02:00:20,000 --> 02:00:21,000
跑过去看

3573
02:00:21,000 --> 02:00:23,000
里面是个 Rick File

3574
02:00:23,000 --> 02:00:26,000
相关问题是一个 Swift 的问题

3575
02:00:26,000 --> 02:00:30,000
但最后他 somehow 给了我一个 Rick File 的解决方案

3576
02:00:30,000 --> 02:00:31,000
而且

3577
02:00:31,000 --> 02:00:34,000
对他默认我是能理解这个东西

3578
02:00:34,000 --> 02:00:39,000
然后我愚蠢莽撞的 Rick 了一下

3579
02:00:39,000 --> 02:00:41,000
然后出错了

3580
02:00:41,000 --> 02:00:44,000
理解你的痛苦了

3581
02:00:44,000 --> 02:00:48,000
就不懂 Ruby 脊柱心

3582
02:00:48,000 --> 02:00:50,000
就是到处被人欺负的感觉

3583
02:00:50,000 --> 02:00:51,000
好吧

3584
02:00:51,000 --> 02:00:54,000
那什么 Ruby 的吐槽

3585
02:00:54,000 --> 02:00:55,000
我没法吐

3586
02:00:55,000 --> 02:00:55,000
因为我不用

3587
02:00:55,000 --> 02:00:56,000
然后我也不胜手

3588
02:00:56,000 --> 02:00:58,000
Ruby 没有什么可吐槽的

3589
02:00:58,000 --> 02:00:58,000
说实话真的

3590
02:00:58,000 --> 02:00:59,000
好

3591
02:00:59,000 --> 02:01:02,000
现在我们来说另外一个敌对阵

3592
02:01:02,000 --> 02:01:03,000
Node

3593
02:01:03,000 --> 02:01:06,000
Node 有一个很不错

3594
02:01:06,000 --> 02:01:07,000
就在我看来

3595
02:01:07,000 --> 02:01:10,000
在这些主流的动态语言里

3596
02:01:10,000 --> 02:01:11,000
动态语言里面

3597
02:01:11,000 --> 02:01:14,000
比较好的实现的一个包管理器

3598
02:01:14,000 --> 02:01:16,000
这个叫 NPM

3599
02:01:16,000 --> 02:01:19,000
其实他都甚至都不完全是一个包管理器

3600
02:01:19,000 --> 02:01:20,000
他还能做一些别的事

3601
02:01:20,000 --> 02:01:24,000
什么那个运行态的东西

3602
02:01:24,000 --> 02:01:25,000
部署他也能做

3603
02:01:25,000 --> 02:01:26,000
其实还挺好的

3604
02:01:26,000 --> 02:01:30,000
不过我觉得他有点像一个 configuration tool

3605
02:01:30,000 --> 02:01:30,000
有点

3606
02:01:30,000 --> 02:01:31,000
对对

3607
02:01:31,000 --> 02:01:33,000
他的范畴有点还不太一样

3608
02:01:33,000 --> 02:01:35,000
但是这个先不去纠结这些细节

3609
02:01:35,000 --> 02:01:38,000
但是就说他作为这个包管理器的这个优点

3610
02:01:38,000 --> 02:01:40,000
我觉得还是比较明显的

3611
02:01:40,000 --> 02:01:41,000
就他干净

3612
02:01:41,000 --> 02:01:43,000
这干净什么意思呢

3613
02:01:43,000 --> 02:01:46,000
就是我们用这个 PIV 安装也好

3614
02:01:46,000 --> 02:01:47,000
还是 Ruby Gem 安装也好

3615
02:01:47,000 --> 02:01:49,000
默认是安装进系统目录的

3616
02:01:49,000 --> 02:01:51,000
换句话说

3617
02:01:51,000 --> 02:01:53,000
你只要没什么事

3618
02:01:53,000 --> 02:01:54,000
你只要在这里装一个了

3619
02:01:54,000 --> 02:01:55,000
你的系统

3620
02:01:55,000 --> 02:01:56,000
你的系统那个

3621
02:01:56,000 --> 02:01:58,000
就系统的 Python 那个包的目录

3622
02:01:58,000 --> 02:02:00,000
就已经被打引号的污染了

3623
02:02:00,000 --> 02:02:03,000
你没法再回到之前那个状态了

3624
02:02:03,000 --> 02:02:05,000
特别是你用了 Python 那种

3625
02:02:05,000 --> 02:02:06,000
只可 install

3626
02:02:06,000 --> 02:02:07,000
不可 uninstall 的状态的

3627
02:02:07,000 --> 02:02:09,000
这种工具的情况下

3628
02:02:09,000 --> 02:02:10,000
诶

3629
02:02:10,000 --> 02:02:11,000
GEM 可以 uninstall 吗

3630
02:02:11,000 --> 02:02:11,000
可以

3631
02:02:11,000 --> 02:02:12,000
GEM 等等

3632
02:02:12,000 --> 02:02:13,000
GEM 当然可以 uninstall

3633
02:02:13,000 --> 02:02:17,000
而且 GEM 是可以装在本身的那个

3634
02:02:17,000 --> 02:02:18,000
local

3635
02:02:18,000 --> 02:02:19,000
project 下面

3636
02:02:19,000 --> 02:02:20,000
Jam room 或者是本地

3637
02:02:20,000 --> 02:02:21,000
直接装在

3638
02:02:21,000 --> 02:02:23,000
直接装在那个 windows 下面的

3639
02:02:23,000 --> 02:02:26,000
但是它的默认也是装到那个系统吧

3640
02:02:26,000 --> 02:02:27,000
是吗

3641
02:02:27,000 --> 02:02:28,000
默认

3642
02:02:28,000 --> 02:02:29,000
我记得是这样子

3643
02:02:29,000 --> 02:02:32,000
就系统可能是说一个用户嘛

3644
02:02:32,000 --> 02:02:33,000
或者是你用 sudo 的话

3645
02:02:33,000 --> 02:02:35,000
就是系统的根里面那些什么

3646
02:02:35,000 --> 02:02:36,000
user local 里面

3647
02:02:36,000 --> 02:02:36,000
等等

3648
02:02:36,000 --> 02:02:38,000
这不是一个非常

3649
02:02:38,000 --> 02:02:39,000
就是

3650
02:02:39,000 --> 02:02:41,000
如果你用 bundler 的话

3651
02:02:41,000 --> 02:02:43,000
bundler 本身是一个 GEM

3652
02:02:43,000 --> 02:02:47,000
然后你用 bundler 来管理你的 GEM 依赖的话

3653
02:02:47,000 --> 02:02:49,000
bundler 默认是安装在当前目录下的

3654
02:02:49,000 --> 02:02:50,000
啊

3655
02:02:50,000 --> 02:02:51,000
OK

3656
02:02:51,000 --> 02:02:55,000
就如果你只要用一个他给的那个

3657
02:02:55,000 --> 02:02:57,000
不是他给的

3658
02:02:57,000 --> 02:02:57,000
就是他

3659
02:02:57,000 --> 02:03:02,000
如果你用 bundler 这个 GEM 来管理你的项目的依赖的 GEM 的话

3660
02:03:02,000 --> 02:03:04,000
which is

3661
02:03:04,000 --> 02:03:06,000
industry standard

3662
02:03:06,000 --> 02:03:10,000
就是几乎每一个好一点的 Ruby 项目

3663
02:03:10,000 --> 02:03:11,000
几乎都是用 bundler 的

3664
02:03:11,000 --> 02:03:11,000
OK

3665
02:03:11,000 --> 02:03:14,000
然后你就不会去污染你的全局 GEM

3666
02:03:14,000 --> 02:03:17,000
所以还是有一个 best practice 在那里了

3667
02:03:17,000 --> 02:03:17,000
对

3668
02:03:17,000 --> 02:03:18,000
有一个 best practice

3669
02:03:18,000 --> 02:03:18,000
OK

3670
02:03:18,000 --> 02:03:19,000
不像我

3671
02:03:19,000 --> 02:03:19,000
不像

3672
02:03:19,000 --> 02:03:20,000
不像

3673
02:03:20,000 --> 02:03:20,000
笔阵营

3674
02:03:20,000 --> 02:03:22,000
我已经不是了

3675
02:03:22,000 --> 02:03:23,000
我已经宣布脱离了

3676
02:03:23,000 --> 02:03:24,000
好吧

3677
02:03:24,000 --> 02:03:25,000
OK

3678
02:03:25,000 --> 02:03:27,000
讲回 node 的这个东西

3679
02:03:27,000 --> 02:03:27,000
NPM

3680
02:03:27,000 --> 02:03:29,000
就它是默认

3681
02:03:29,000 --> 02:03:31,000
是装在当前目录上面的

3682
02:03:31,000 --> 02:03:32,000
就是你可能每个工程

3683
02:03:32,000 --> 02:03:35,000
每个项目是一个有一个自己的一个 node 的 module

3684
02:03:35,000 --> 02:03:36,000
这么一个目录

3685
02:03:36,000 --> 02:03:37,000
然后你在里面执行

3686
02:03:37,000 --> 02:03:39,000
npm install 的之后

3687
02:03:39,000 --> 02:03:41,000
它装的所有东西都会在默认在那里面

3688
02:03:41,000 --> 02:03:43,000
然后如果你是要装在系统级别的话

3689
02:03:43,000 --> 02:03:47,000
你这要加一个就杠 G global 这个选项

3690
02:03:47,000 --> 02:03:49,000
它才会装到你的这个加目录

3691
02:03:49,000 --> 02:03:52,000
或者是你速度的情况下装到你的系统级别的目录里面去

3692
02:03:52,000 --> 02:03:58,000
说它在一开始就鼓励一种就是所谓分完全分离嘛

3693
02:03:58,000 --> 02:04:02,000
就是我觉得他们觉得磁盘空间的损失算不得什么

3694
02:04:02,000 --> 02:04:04,000
重点是不要互相干扰

3695
02:04:04,000 --> 02:04:07,000
所以这个就就是从这种方式

3696
02:04:07,000 --> 02:04:09,000
当然它有自己的原因

3697
02:04:09,000 --> 02:04:12,000
就是因为在所有的这个软件包里面

3698
02:04:12,000 --> 02:04:16,000
可能 node 的软件包的版本跳跃是最快的

3699
02:04:16,000 --> 02:04:21,000
我上个月装的一个什么开发一个软件的版本

3700
02:04:21,000 --> 02:04:23,000
用的一个库可能是 0.2 点几

3701
02:04:23,000 --> 02:04:25,000
我这个月升级看就已经 1.2 点几

3702
02:04:25,000 --> 02:04:26,000
对

3703
02:04:26,000 --> 02:04:30,000
如果你想最快最短在最短时间之内

3704
02:04:30,000 --> 02:04:33,000
在屏幕上获得最多的数据流

3705
02:04:33,000 --> 02:04:36,000
并且多多少少能让人看得懂的话

3706
02:04:36,000 --> 02:04:38,000
那请执行 npm update

3707
02:04:38,000 --> 02:04:40,000
对

3708
02:04:40,000 --> 02:04:43,000
所以也是因为这个这个残酷的现实

3709
02:04:43,000 --> 02:04:46,000
使得这个可能我是这么猜的

3710
02:04:46,000 --> 02:04:50,000
就是这个 node 社区必须要把这种版本依赖

3711
02:04:50,000 --> 02:04:53,000
就是这个要就本就是叫什么 contained

3712
02:04:53,000 --> 02:04:55,000
就是要对就局部化

3713
02:04:55,000 --> 02:04:58,000
因为一旦安装权就这个事没法玩了

3714
02:04:58,000 --> 02:04:58,000
对

3715
02:04:58,000 --> 02:05:01,000
这是他们拥抱改变的那种方式

3716
02:05:01,000 --> 02:05:01,000
对

3717
02:05:01,000 --> 02:05:02,000
然后他们这个

3718
02:05:02,000 --> 02:05:04,000
而且他们对这个版本的

3719
02:05:04,000 --> 02:05:06,000
刚才我们讲那个交叉依赖解决的也很好

3720
02:05:06,000 --> 02:05:09,000
就是他是说用我说的那种方式

3721
02:05:09,000 --> 02:05:12,000
就是各个包去用装自己的依赖

3722
02:05:12,000 --> 02:05:14,000
互相不要干扰

3723
02:05:14,000 --> 02:05:15,000
就是同样

3724
02:05:15,000 --> 02:05:16,000
这就是一个最简单的例子

3725
02:05:16,000 --> 02:05:19,000
我写这个程序叫 A

3726
02:05:19,000 --> 02:05:20,000
然后他依赖 B

3727
02:05:20,000 --> 02:05:21,000
然后也依赖 C

3728
02:05:21,000 --> 02:05:24,000
然后就依赖我的程序 A

3729
02:05:24,000 --> 02:05:25,000
依赖 B 和 C 这两个包

3730
02:05:25,000 --> 02:05:26,000
然后这个 C 这个包

3731
02:05:26,000 --> 02:05:27,000
他又依赖于 B

3732
02:05:27,000 --> 02:05:30,000
但是可能是依赖于 B 的另外一个较早

3733
02:05:30,000 --> 02:05:31,000
或者较新的版本

3734
02:05:31,000 --> 02:05:33,000
那个 NPM 解决方案就是说

3735
02:05:33,000 --> 02:05:36,000
那我这个程序装的时候

3736
02:05:36,000 --> 02:05:38,000
我写我要这个 B 的包的这个版本

3737
02:05:38,000 --> 02:05:39,000
我要 C 的包的那个版本

3738
02:05:39,000 --> 02:05:41,000
然后他就会去装这个 B

3739
02:05:41,000 --> 02:05:42,000
然后就会把这个在

3740
02:05:42,000 --> 02:05:44,000
我当前目录的 Node Module 里面

3741
02:05:44,000 --> 02:05:47,000
这个有一个名目录名字是 B 这个包的名字

3742
02:05:47,000 --> 02:05:48,000
有一个名字是 C 的包的名字

3743
02:05:48,000 --> 02:05:50,000
然后你进到这个 Node Module

3744
02:05:50,000 --> 02:05:52,000
然后 B 那个包的那个名字的目录里面

3745
02:05:52,000 --> 02:05:56,000
就你发现他又是一个带有 Node Module 的一个包

3746
02:05:56,000 --> 02:05:58,000
所以他就是在每一个包里面

3747
02:05:58,000 --> 02:06:03,000
他都是独立的一个 Node Package 的层级

3748
02:06:03,000 --> 02:06:03,000
关系在里面

3749
02:06:03,000 --> 02:06:06,000
就不会出现说我依赖 A

3750
02:06:06,000 --> 02:06:07,000
我依赖 B

3751
02:06:07,000 --> 02:06:09,000
我也依赖 C

3752
02:06:09,000 --> 02:06:10,000
C 又依赖 B 的另外一个版本

3753
02:06:10,000 --> 02:06:12,000
这种交叉依赖都会对我导致的影响

3754
02:06:12,000 --> 02:06:15,000
对我来说我是看不见 C 依赖了什么东西的

3755
02:06:15,000 --> 02:06:17,000
对

3756
02:06:17,000 --> 02:06:19,000
就这点是我觉得他做的比较好的地方

3757
02:06:19,000 --> 02:06:21,000
就是整个是很干净

3758
02:06:21,000 --> 02:06:23,000
就很这个明确很干净

3759
02:06:23,000 --> 02:06:26,000
而且是就是局域化的

3760
02:06:26,000 --> 02:06:30,000
而且他的这个删除也很简单

3761
02:06:30,000 --> 02:06:31,000
你不想用了

3762
02:06:31,000 --> 02:06:33,000
你直接把那个 Node Module 里面的那些东西清掉就好了

3763
02:06:33,000 --> 02:06:38,000
对就不会在你操作系统的其他任何地方留下垃圾

3764
02:06:38,000 --> 02:06:39,000
如果你有洁片的话

3765
02:06:39,000 --> 02:06:42,000
这点是相当令人解放的一件事情

3766
02:06:42,000 --> 02:06:43,000
对

3767
02:06:43,000 --> 02:06:45,000
这也跟 JavaScript 的特性有关

3768
02:06:45,000 --> 02:06:48,000
就 JavaScript 它不是一种

3769
02:06:48,000 --> 02:06:51,000
严格意义上的为

3770
02:06:51,000 --> 02:06:59,000
联合不同系统组建的 Glue Language 而出现的

3771
02:06:59,000 --> 02:06:59,000
对

3772
02:06:59,000 --> 02:07:00,000
对

3773
02:07:00,000 --> 02:07:02,000
然后他的

3774
02:07:02,000 --> 02:07:03,000
其实这也出了一个问题

3775
02:07:03,000 --> 02:07:06,000
就是 JavaScript 有 Native Keebonding

3776
02:07:06,000 --> 02:07:09,000
Native Binding 需要 Compile 的情况出现吗

3777
02:07:09,000 --> 02:07:10,000
应该是有的

3778
02:07:10,000 --> 02:07:12,000
比如说我经常安装的时候

3779
02:07:12,000 --> 02:07:15,000
他会捡他会去运行一下 C 的什么 Compile

3780
02:07:15,000 --> 02:07:16,000
在装什么东西

3781
02:07:16,000 --> 02:07:18,000
但是具体他在做什么我也不是太清楚

3782
02:07:18,000 --> 02:07:19,000
OK

3783
02:07:19,000 --> 02:07:20,000
因为我印象里面

3784
02:07:20,000 --> 02:07:25,000
JavaScript 的 NPM 社区极端到连什么 MySQL 的二进制代码都要

3785
02:07:25,000 --> 02:07:29,000
二进制的协议都要写一个 JavaScript 的版本

3786
02:07:29,000 --> 02:07:30,000
What

3787
02:07:30,000 --> 02:07:32,000
就不要去调用 C 库

3788
02:07:32,000 --> 02:07:33,000
这是为什么呢

3789
02:07:33,000 --> 02:07:34,000
不能调用 C 库吗

3790
02:07:34,000 --> 02:07:36,000
我不太确定

3791
02:07:36,000 --> 02:07:39,000
就你诈问我 JavaScript 怎么调用 C 库

3792
02:07:39,000 --> 02:07:40,000
但是对

3793
02:07:40,000 --> 02:07:41,000
确实有一点

3794
02:07:41,000 --> 02:07:43,000
他们是很愿意把所有东西都用 JavaScript 重新写一遍

3795
02:07:43,000 --> 02:07:44,000
这里面其实是有好处的

3796
02:07:44,000 --> 02:07:45,000
比如说对

3797
02:07:45,000 --> 02:07:47,000
你可以只用到那个 V 8 的那个

3798
02:07:47,000 --> 02:07:48,000
如果你那种那边跑

3799
02:07:48,000 --> 02:07:50,000
你可以用 V 8 的 JIT 的特性对吧

3800
02:07:50,000 --> 02:07:53,000
然后你可以调试那些出错都很方便

3801
02:07:53,000 --> 02:07:55,000
然后你包括

3802
02:07:55,000 --> 02:07:58,000
当然管理起来也会很方便嘛

3803
02:07:58,000 --> 02:07:59,000
嗯

3804
02:07:59,000 --> 02:08:00,000
你选极端主义者

3805
02:08:00,000 --> 02:08:00,000
对

3806
02:08:00,000 --> 02:08:04,000
然后那个 NPM 他在每一个包的里面

3807
02:08:04,000 --> 02:08:07,000
他那个这个 package.json 这个文件也很简单

3808
02:08:07,000 --> 02:08:09,000
就是你把一些常见东西写进来

3809
02:08:09,000 --> 02:08:10,000
然后依赖关系进来

3810
02:08:10,000 --> 02:08:13,000
然后 NPM 这个命令行的工具也是比较强大的

3811
02:08:13,000 --> 02:08:18,000
他能他甚至连那种连你的版本号的写法都有快捷命令

3812
02:08:18,000 --> 02:08:19,000
帮你去搞定

3813
02:08:19,000 --> 02:08:23,000
他们就遵从这个叫做 semantic version 这个做法嘛

3814
02:08:23,000 --> 02:08:25,000
就是你看 A.B.C

3815
02:08:25,000 --> 02:08:26,000
然后 A 是大版本号

3816
02:08:26,000 --> 02:08:28,000
说变了 API 肯定变了

3817
02:08:28,000 --> 02:08:29,000
然后 B 是小版本号

3818
02:08:29,000 --> 02:08:30,000
是一个变的话

3819
02:08:30,000 --> 02:08:34,000
肯定是肯定是有很多各种新增内容

3820
02:08:34,000 --> 02:08:35,000
但是应该是下下兼容的

3821
02:08:35,000 --> 02:08:38,000
然后 C 是这个小的小升级

3822
02:08:38,000 --> 02:08:41,000
什么 bugfix 之类不影响接口的这种情况

3823
02:08:41,000 --> 02:08:42,000
嗯

3824
02:08:42,000 --> 02:08:45,000
对他连这个都已经忘你考虑好了

3825
02:08:45,000 --> 02:08:50,000
而且如果你这个 NPM 的包是在一个 Git 里面的 reposter 里面的话

3826
02:08:50,000 --> 02:08:52,000
他甚至你做完 NPM version

3827
02:08:52,000 --> 02:08:55,000
然后 patch 或者是 miner 这种命令之后

3828
02:08:55,000 --> 02:08:58,000
就是把那个命令版本号升级一位

3829
02:08:58,000 --> 02:09:02,000
他连那个 Git 的 tag 的事情都帮你做好了

3830
02:09:02,000 --> 02:09:03,000
哇哦

3831
02:09:03,000 --> 02:09:04,000
真是贴心

3832
02:09:04,000 --> 02:09:06,000
对就是简直就是贴心小棉

3833
02:09:06,000 --> 02:09:08,000
非常方便

3834
02:09:08,000 --> 02:09:09,000
用起来很爽

3835
02:09:09,000 --> 02:09:13,000
而且也从一个侧面反映了 NPM 的社区

3836
02:09:13,000 --> 02:09:14,000
其实是一个非常有活力的社区

3837
02:09:14,000 --> 02:09:16,000
不管多少人怎么样

3838
02:09:16,000 --> 02:09:17,000
整个世界都在嘲笑他们

3839
02:09:17,000 --> 02:09:18,000
对

3840
02:09:18,000 --> 02:09:20,000
但可能就是因为这种受嫩者的姿态

3841
02:09:20,000 --> 02:09:23,000
迫使他们紧紧团结到了一起

3842
02:09:23,000 --> 02:09:23,000
对

3843
02:09:23,000 --> 02:09:27,000
NPM 社区就是惹见开发界的犹太人

3844
02:09:27,000 --> 02:09:29,000
对

3845
02:09:29,000 --> 02:09:32,000
反正整个来说这个 NPM 的体验

3846
02:09:32,000 --> 02:09:34,000
是我目前用过所有的这种

3847
02:09:34,000 --> 02:09:39,000
就是语言原声的包管理器里面体验最好的一个吧

3848
02:09:39,000 --> 02:09:41,000
那你可能是我咕噜寡没见过更好的

3849
02:09:41,000 --> 02:09:44,000
我也真的没有见过更好的

3850
02:09:44,000 --> 02:09:47,000
更好的可能就只能是什么

3851
02:09:47,000 --> 02:09:48,000
图形化的

3852
02:09:48,000 --> 02:09:50,000
然后给最终用胡用的

3853
02:09:50,000 --> 02:09:52,000
对

3854
02:09:52,000 --> 02:09:55,000
所以这个是 NPM 的一个挺好的地方

3855
02:09:55,000 --> 02:09:59,000
现在再说一个现在本人的大爱

3856
02:09:59,000 --> 02:10:01,000
Go 里面是怎么做的这件事情

3857
02:10:01,000 --> 02:10:02,000
Go 传教士

3858
02:10:02,000 --> 02:10:03,000
Real 同学又来了

3859
02:10:03,000 --> 02:10:06,000
其实你知道 Go 里面怎么做这件事情吗

3860
02:10:06,000 --> 02:10:07,000
GoGet 吗

3861
02:10:07,000 --> 02:10:08,000
不是吗

3862
02:10:08,000 --> 02:10:08,000
对

3863
02:10:08,000 --> 02:10:10,000
但是它的哲学就是蛮奇怪的

3864
02:10:10,000 --> 02:10:12,000
就通常你讲前面我们提到几个像

3865
02:10:12,000 --> 02:10:15,000
比如说 Java 也好

3866
02:10:15,000 --> 02:10:16,000
Python 也好

3867
02:10:16,000 --> 02:10:17,000
Node 也好

3868
02:10:17,000 --> 02:10:18,000
还有 Ruby Jam 也好

3869
02:10:18,000 --> 02:10:20,000
他们都有一个所谓的

3870
02:10:20,000 --> 02:10:26,000
这个所谓官方正式认可的这么一个集中发布软件包的渠道

3871
02:10:26,000 --> 02:10:26,000
对吧

3872
02:10:26,000 --> 02:10:27,000
对

3873
02:10:27,000 --> 02:10:28,000
有一个 Repository 在那边

3874
02:10:28,000 --> 02:10:29,000
对

3875
02:10:29,000 --> 02:10:30,000
而 Go 是没有的

3876
02:10:30,000 --> 02:10:30,000
对

3877
02:10:30,000 --> 02:10:31,000
Go 是没有的

3878
02:10:31,000 --> 02:10:36,000
Go 是完全是一个去中心化的一个发布方式

3879
02:10:36,000 --> 02:10:40,000
然后就会导致一些很奇怪的一些状况

3880
02:10:40,000 --> 02:10:43,000
比如说我们通常一个包的名字

3881
02:10:43,000 --> 02:10:44,000
你要引用它的时候

3882
02:10:44,000 --> 02:10:46,000
在比如说在 Python 里面

3883
02:10:46,000 --> 02:10:47,000
你就是比如说 import

3884
02:10:47,000 --> 02:10:49,000
JSON 就好了

3885
02:10:49,000 --> 02:10:49,000
对吧

3886
02:10:49,000 --> 02:10:50,000
那可能用官方标准的

3887
02:10:50,000 --> 02:10:52,000
你可以用 import 的一个

3888
02:10:52,000 --> 02:10:53,000
JSON 这个例子不好

3889
02:10:53,000 --> 02:10:55,000
另外一举个什么例子

3890
02:10:55,000 --> 02:10:56,000
request 的吧

3891
02:10:56,000 --> 02:10:57,000
这个这个

3892
02:10:57,000 --> 02:10:58,000
一个 import request

3893
02:10:58,000 --> 02:10:59,000
你就整理好了

3894
02:10:59,000 --> 02:11:00,000
这个他

3895
02:11:00,000 --> 02:11:02,000
你在用的时候和他的

3896
02:11:02,000 --> 02:11:05,000
你和怎么拿到它是一个完全分离的过程

3897
02:11:05,000 --> 02:11:05,000
对吧

3898
02:11:05,000 --> 02:11:07,000
你是在 people install request

3899
02:11:07,000 --> 02:11:10,000
他去那个 pipe 上面下载回来

3900
02:11:10,000 --> 02:11:12,000
但你并不知道他到底是在哪

3901
02:11:12,000 --> 02:11:13,000
然后你就用的时候

3902
02:11:13,000 --> 02:11:15,000
你也不需要关心这个东西

3903
02:11:15,000 --> 02:11:16,000
本来是 host 在哪里的

3904
02:11:16,000 --> 02:11:17,000
但 Go 里面不一样

3905
02:11:17,000 --> 02:11:21,000
Go 里面的 import 的那个路径

3906
02:11:21,000 --> 02:11:24,000
就是官方认可的方式

3907
02:11:24,000 --> 02:11:27,000
就是你的那个原代码库的路径

3908
02:11:27,000 --> 02:11:28,000
就是比如说

3909
02:11:28,000 --> 02:11:30,000
所以它和 Repository 相关的

3910
02:11:30,000 --> 02:11:31,000
它不能做到

3911
02:11:31,000 --> 02:11:33,000
比如说我自己有一个 GitHub 的目录

3912
02:11:33,000 --> 02:11:35,000
我是 github.com

3913
02:11:35,000 --> 02:11:37,000
写看 realbar 下面一个什么软件

3914
02:11:37,000 --> 02:11:39,000
就是我的一个 go 的软件

3915
02:11:39,000 --> 02:11:42,000
我就直接要把那一段写到

3916
02:11:42,000 --> 02:11:44,000
那个 go 的原程序里面去

3917
02:11:44,000 --> 02:11:46,000
这样我就可以

3918
02:11:46,000 --> 02:11:49,000
就如果我要引用某一个其他软件

3919
02:11:49,000 --> 02:11:51,000
我也得把它的那个 repository 的地址

3920
02:11:51,000 --> 02:11:53,000
放到那个路径里面去

3921
02:11:53,000 --> 02:11:56,000
然后 go get 这个东西有个黑魔法

3922
02:11:56,000 --> 02:12:01,000
就是它能够自动识别常见的包管里的地址

3923
02:12:01,000 --> 02:12:02,000
比如它知道 GitHub 怎么去取

3924
02:12:02,000 --> 02:12:04,000
它知道那个 bitbucket 怎么去取

3925
02:12:04,000 --> 02:12:07,000
它知道那个什么 mercury 那些东西怎么去取

3926
02:12:07,000 --> 02:12:10,000
然后它会自动的给通过这个路径

3927
02:12:10,000 --> 02:12:12,000
去找到那个 repository

3928
02:12:12,000 --> 02:12:12,000
下载回来

3929
02:12:12,000 --> 02:12:15,000
放到你本地的一个约定好的那个路径里面去

3930
02:12:15,000 --> 02:12:17,000
然后这样就把这个事情完成了

3931
02:12:17,000 --> 02:12:20,000
而且它是这个所谓的是一个 recursive 的一个过程

3932
02:12:20,000 --> 02:12:23,000
就是比如说我我要去 go get 一个包

3933
02:12:23,000 --> 02:12:26,000
比如大家在 GitHub 上面某一个

3934
02:12:26,000 --> 02:12:27,000
负斜杠 bar 这个包

3935
02:12:27,000 --> 02:12:29,000
然后这个负斜杠 bar 这个包

3936
02:12:29,000 --> 02:12:31,000
它有引用的负斜杠 spam 这个包

3937
02:12:31,000 --> 02:12:35,000
它会连带的把那些东西也拿回来

3938
02:12:35,000 --> 02:12:37,000
因为它能够分析到里面的 import path

3939
02:12:37,000 --> 02:12:38,000
它能够知道缺什么

3940
02:12:38,000 --> 02:12:40,000
然后它也知道因为那个 import path

3941
02:12:40,000 --> 02:12:42,000
就是你的那个 get 项目的地址

3942
02:12:42,000 --> 02:12:44,000
或者是那个 hg 项目的地址

3943
02:12:44,000 --> 02:12:45,000
它就能够去到那里

3944
02:12:45,000 --> 02:12:47,000
就把所有东西给你抓回来

3945
02:12:47,000 --> 02:12:52,000
所以它通过一种非常复杂的方式

3946
02:12:52,000 --> 02:12:56,000
使得一个包的 repository

3947
02:12:56,000 --> 02:12:58,000
somehow 成为了它的命名空间的一部分

3948
02:12:58,000 --> 02:13:00,000
对 没错 就这样的

3949
02:13:00,000 --> 02:13:01,000
有意思

3950
02:13:01,000 --> 02:13:05,000
那你觉得这种做法是闲得淡疼呢

3951
02:13:05,000 --> 02:13:07,000
还是自有其道的素材

3952
02:13:07,000 --> 02:13:08,000
这个怎么说呢

3953
02:13:08,000 --> 02:13:09,000
就是有好

3954
02:13:09,000 --> 02:13:11,000
就肯定是有好处有坏处

3955
02:13:11,000 --> 02:13:12,000
好处就是简单嘛

3956
02:13:12,000 --> 02:13:14,000
就是首先它我们讲的

3957
02:13:14,000 --> 02:13:17,000
它不是一个集中化的东西

3958
02:13:17,000 --> 02:13:18,000
它可是一个分布式的东西

3959
02:13:18,000 --> 02:13:19,000
它没有一个所谓

3960
02:13:19,000 --> 02:13:21,000
它不能说你给它一个包的名字

3961
02:13:21,000 --> 02:13:23,000
它默认去哪个地方去找

3962
02:13:23,000 --> 02:13:24,000
然后帮你下载回来

3963
02:13:24,000 --> 02:13:24,000
对吧

3964
02:13:24,000 --> 02:13:26,000
因为它没有这么一个中央存储的地方

3965
02:13:26,000 --> 02:13:28,000
所以它只能把这种方式

3966
02:13:28,000 --> 02:13:30,000
把这个地址的信息隐藏

3967
02:13:30,000 --> 02:13:36,000
就这个嵌入到这个包的原代码里面去

3968
02:13:36,000 --> 02:13:37,000
然后通过这种工具

3969
02:13:37,000 --> 02:13:40,000
这种勾给这种工具去把这个事情帮你解决了

3970
02:13:40,000 --> 02:13:42,000
但是它不好的地方其实也很明显了

3971
02:13:42,000 --> 02:13:43,000
比如说最简单一个例子

3972
02:13:43,000 --> 02:13:45,000
我用了一个包

3973
02:13:45,000 --> 02:13:48,000
然后我 fork 了它

3974
02:13:48,000 --> 02:13:50,000
就它的官方功能不太好

3975
02:13:50,000 --> 02:13:50,000
我 fork 了它

3976
02:13:50,000 --> 02:13:51,000
然后我要改的时候

3977
02:13:51,000 --> 02:13:53,000
你就会发现很痛苦

3978
02:13:53,000 --> 02:13:55,000
因为你改的时候就会必然

3979
02:13:55,000 --> 02:13:57,000
你 fork 的时候会必然改变它的那个 import 路径

3980
02:13:57,000 --> 02:13:58,000
对

3981
02:13:58,000 --> 02:14:02,000
但是如果你面又 import 自己的

3982
02:14:02,000 --> 02:14:03,000
或者别人又 import 你的时候

3983
02:14:03,000 --> 02:14:08,000
你也去改相关 import 到你的那个包的软件

3984
02:14:08,000 --> 02:14:10,000
才能够使得你的这个修改

3985
02:14:10,000 --> 02:14:12,000
能够被别人看见

3986
02:14:12,000 --> 02:14:20,000
所以它 somehow 增加了软件包维护的难度

3987
02:14:20,000 --> 02:14:22,000
对就有点这里有点小不爽嘛

3988
02:14:22,000 --> 02:14:25,000
就是你得去手工改一下那个 import 路径

3989
02:14:25,000 --> 02:14:26,000
如果你 fork 之后

3990
02:14:26,000 --> 02:14:29,000
如果你 fork 没有被这个 merge 回去的话

3991
02:14:29,000 --> 02:14:33,000
就是说你做了一个本地的不兼容的 fork

3992
02:14:33,000 --> 02:14:35,000
然后另外一个问题就是说

3993
02:14:35,000 --> 02:14:36,000
你会发现

3994
02:14:36,000 --> 02:14:39,000
整个过程中没有出现版本这个概念

3995
02:14:39,000 --> 02:14:42,000
比如说你可以在 python 也好

3996
02:14:42,000 --> 02:14:43,000
还是那个 npm 也好

3997
02:14:43,000 --> 02:14:44,000
你去安装一个包的时候

3998
02:14:44,000 --> 02:14:46,000
它会告诉你安装了什么版本

3999
02:14:46,000 --> 02:14:46,000
对吧

4000
02:14:46,000 --> 02:14:49,000
对它甚至可以告诉你说

4001
02:14:49,000 --> 02:14:52,000
请尽量安装接近于那一个版本的版本

4002
02:14:52,000 --> 02:14:53,000
我觉得这个还挺

4003
02:14:53,000 --> 02:14:53,000
对

4004
02:14:53,000 --> 02:14:55,000
就是它有一个中央存在

4005
02:14:55,000 --> 02:14:57,000
它会有这个包的名字

4006
02:14:57,000 --> 02:14:57,000
然后有这个版本号

4007
02:14:57,000 --> 02:14:59,000
包有历史的版本号

4008
02:14:59,000 --> 02:15:00,000
它会记录下来

4009
02:15:00,000 --> 02:15:01,000
然后它你可以说

4010
02:15:01,000 --> 02:15:01,000
我可以指定

4011
02:15:01,000 --> 02:15:03,000
说 2.0

4012
02:15:03,000 --> 02:15:04,000
2.x 版本都可以

4013
02:15:04,000 --> 02:15:05,000
或者我一定 2.1

4014
02:15:05,000 --> 02:15:06,000
或者一定 2.5

4015
02:15:06,000 --> 02:15:07,000
或者一定 2.5.5

4016
02:15:07,000 --> 02:15:07,000
对吧

4017
02:15:07,000 --> 02:15:08,000
你都可以这么去指

4018
02:15:08,000 --> 02:15:10,000
或者说不高于某个版本的版本

4019
02:15:10,000 --> 02:15:12,000
这也是采用这个

4020
02:15:12,000 --> 02:15:14,000
所谓 semitic versioning 的一个优点

4021
02:15:14,000 --> 02:15:14,000
对

4022
02:15:14,000 --> 02:15:15,000
对没错

4023
02:15:15,000 --> 02:15:16,000
你可以做了诸如此类

4024
02:15:16,000 --> 02:15:18,000
基于 convention 的事情

4025
02:15:18,000 --> 02:15:18,000
对

4026
02:15:18,000 --> 02:15:21,000
go 里面完全没有版本的概念

4027
02:15:21,000 --> 02:15:23,000
go 里面所有东西都是一个

4028
02:15:23,000 --> 02:15:24,000
就是一个 git

4029
02:15:24,000 --> 02:15:25,000
就是一个 repositor 地址

4030
02:15:25,000 --> 02:15:26,000
完了

4031
02:15:26,000 --> 02:15:28,000
然后他们的说法是说

4032
02:15:28,000 --> 02:15:31,000
如果你发布了一个包

4033
02:15:31,000 --> 02:15:32,000
你就不要改它的接口

4034
02:15:32,000 --> 02:15:33,000
forever

4035
02:15:33,000 --> 02:15:37,000
这个有点太过了

4036
02:15:37,000 --> 02:15:38,000
太任性了吧

4037
02:15:38,000 --> 02:15:40,000
这简直就是

4038
02:15:40,000 --> 02:15:41,000
google 就是这么任性

4039
02:15:41,000 --> 02:15:41,000
对

4040
02:15:41,000 --> 02:15:43,000
简直就是任性

4041
02:15:43,000 --> 02:15:44,000
这哪里是任性

4042
02:15:44,000 --> 02:15:45,000
简直就是强硬

4043
02:15:45,000 --> 02:15:45,000
好不好

4044
02:15:45,000 --> 02:15:46,000
嗯

4045
02:15:46,000 --> 02:15:47,000
然后

4046
02:15:47,000 --> 02:15:49,000
其实然后他们的这个说法

4047
02:15:49,000 --> 02:15:49,000
也很简单

4048
02:15:49,000 --> 02:15:50,000
就是如果你做了一个

4049
02:15:50,000 --> 02:15:52,000
就是什么

4050
02:15:52,000 --> 02:15:54,000
接口不兼容的改进

4051
02:15:54,000 --> 02:15:57,000
那么请用一个新的 import 的地址

4052
02:15:57,000 --> 02:15:58,000
这个我觉得有点

4053
02:15:58,000 --> 02:16:00,000
那为什么不能再

4054
02:16:00,000 --> 02:16:02,000
就让它更进一步

4055
02:16:02,000 --> 02:16:03,000
就直接指定

4056
02:16:03,000 --> 02:16:04,000
这个 repositor 的 branch

4057
02:16:04,000 --> 02:16:05,000
对

4058
02:16:05,000 --> 02:16:07,000
这个是很多人要吐槽的地方

4059
02:16:07,000 --> 02:16:09,000
就说那为什么不支持

4060
02:16:09,000 --> 02:16:10,000
那我直接说

4061
02:16:10,000 --> 02:16:11,000
因为可以 tag 嘛

4062
02:16:11,000 --> 02:16:11,000
对吧

4063
02:16:11,000 --> 02:16:12,000
我可以 tag 某一个版本

4064
02:16:12,000 --> 02:16:13,000
这样也可以啊

4065
02:16:13,000 --> 02:16:14,000
但是你想想

4066
02:16:14,000 --> 02:16:16,000
按理说还蛮合理的

4067
02:16:16,000 --> 02:16:16,000
对吧

4068
02:16:16,000 --> 02:16:18,000
但问题出在哪呢

4069
02:16:18,000 --> 02:16:21,000
问题出在 go 也没有指定一个

4070
02:16:21,000 --> 02:16:24,000
默认的软件控制的

4071
02:16:24,000 --> 02:16:25,000
包括软件 version control

4072
02:16:25,000 --> 02:16:26,000
version control 的东西

4073
02:16:26,000 --> 02:16:27,000
就说比如说

4074
02:16:27,000 --> 02:16:28,000
git 里面有 branch 的概念

4075
02:16:28,000 --> 02:16:30,000
然后这个 mercury 里面

4076
02:16:30,000 --> 02:16:31,000
有这个 branch 的概念

4077
02:16:31,000 --> 02:16:32,000
scv 有吗

4078
02:16:32,000 --> 02:16:34,000
也有好像

4079
02:16:34,000 --> 02:16:35,000
有创

4080
02:16:35,000 --> 02:16:35,000
scv

4081
02:16:35,000 --> 02:16:37,000
csv

4082
02:16:37,000 --> 02:16:38,000
sorry

4083
02:16:38,000 --> 02:16:40,000
svs

4084
02:16:40,000 --> 02:16:40,000
是错

4085
02:16:40,000 --> 02:16:40,000
不好意思

4086
02:16:40,000 --> 02:16:42,000
csv 是

4087
02:16:42,000 --> 02:16:43,000
cvs

4088
02:16:43,000 --> 02:16:44,000
comma separated

4089
02:16:44,000 --> 02:16:45,000
对

4090
02:16:45,000 --> 02:16:46,000
挖矿机

4091
02:16:46,000 --> 02:16:47,000
csv

4092
02:16:47,000 --> 02:16:49,000
csv 不支持对吧

4093
02:16:49,000 --> 02:16:50,000
还有 subversion

4094
02:16:50,000 --> 02:16:52,000
它里面也什么有 tag 的概念

4095
02:16:52,000 --> 02:16:53,000
就很

4096
02:16:53,000 --> 02:16:53,000
subversion

4097
02:16:53,000 --> 02:16:54,000
subversion

4098
02:16:54,000 --> 02:16:55,000
subversion

4099
02:16:55,000 --> 02:16:55,000
其实是有 branch 的

4100
02:16:55,000 --> 02:16:57,000
不过这 branch 是非常重要的

4101
02:16:57,000 --> 02:16:57,000
就有 branch

4102
02:16:57,000 --> 02:16:58,000
对

4103
02:16:58,000 --> 02:17:00,000
就是说其实你要具兼容

4104
02:17:00,000 --> 02:17:01,000
那个没有这些东西

4105
02:17:01,000 --> 02:17:03,000
就是最最基础的

4106
02:17:03,000 --> 02:17:04,000
你只有一个 url 而已

4107
02:17:04,000 --> 02:17:06,000
就你不能去指定其他东西

4108
02:17:06,000 --> 02:17:08,000
而且因为 go get

4109
02:17:08,000 --> 02:17:11,000
也是封装了那些命令行工具而已

4110
02:17:11,000 --> 02:17:13,000
就是包括封装了 get

4111
02:17:13,000 --> 02:17:14,000
封装了 hg

4112
02:17:14,000 --> 02:17:16,000
封装了那个什么 subversion

4113
02:17:16,000 --> 02:17:18,000
是什么命令

4114
02:17:18,000 --> 02:17:21,000
svn

4115
02:17:21,000 --> 02:17:21,000
svn

4116
02:17:21,000 --> 02:17:21,000
对

4117
02:17:21,000 --> 02:17:23,000
它封装那些命令的调用

4118
02:17:23,000 --> 02:17:26,000
它也没有办法去强制说

4119
02:17:26,000 --> 02:17:30,000
你能用个一个什么样的方法去

4120
02:17:30,000 --> 02:17:32,000
大家在不同的版本库之间

4121
02:17:32,000 --> 02:17:34,000
用不同的方法管理软件版本的

4122
02:17:34,000 --> 02:17:37,000
也能够指定同一个版本出来

4123
02:17:37,000 --> 02:17:38,000
对吧

4124
02:17:38,000 --> 02:17:40,000
所以其实就变得这个很难

4125
02:17:40,000 --> 02:17:42,000
你知道凡事一旦变成分布式

4126
02:17:42,000 --> 02:17:45,000
没有一个中央集权的东西

4127
02:17:45,000 --> 02:17:47,000
就变得很难解决

4128
02:17:47,000 --> 02:17:48,000
对

4129
02:17:48,000 --> 02:17:49,000
这也是其中之一

4130
02:17:49,000 --> 02:17:51,000
所以现在有一些

4131
02:17:51,000 --> 02:17:53,000
就是社区来的一些方法

4132
02:17:53,000 --> 02:17:53,000
就是说

4133
02:17:53,000 --> 02:17:56,000
那我们不要

4134
02:17:56,000 --> 02:17:59,000
这就为了解决这个

4135
02:17:59,000 --> 02:18:00,000
刚才你说这个版本管理的问题

4136
02:18:00,000 --> 02:18:01,000
我们要指定某个版本

4137
02:18:01,000 --> 02:18:05,000
我们不简单的直接用 go get

4138
02:18:05,000 --> 02:18:07,000
我们是说写一个文件

4139
02:18:07,000 --> 02:18:11,000
声明我需要哪一个软件的哪一个版本

4140
02:18:11,000 --> 02:18:12,000
通过一个 branch 也好

4141
02:18:12,000 --> 02:18:13,000
还是通过这个 get tag

4142
02:18:13,000 --> 02:18:15,000
或者什么方式也好

4143
02:18:15,000 --> 02:18:16,000
把它写在一起

4144
02:18:16,000 --> 02:18:18,000
然后我再通过这个第三方的

4145
02:18:18,000 --> 02:18:19,000
社区维护的工具

4146
02:18:19,000 --> 02:18:22,000
去安装这个软件版本

4147
02:18:22,000 --> 02:18:23,000
而不是用这个官方的

4148
02:18:23,000 --> 02:18:24,000
这个 go get 的这种形式

4149
02:18:24,000 --> 02:18:26,000
OK

4150
02:18:26,000 --> 02:18:30,000
那具体来说有什么样的工具

4151
02:18:30,000 --> 02:18:31,000
有一个比较常见的

4152
02:18:31,000 --> 02:18:32,000
一个叫 go dep

4153
02:18:32,000 --> 02:18:33,000
go dep

4154
02:18:33,000 --> 02:18:35,000
就是 go dependency 的

4155
02:18:35,000 --> 02:18:36,000
go dependency

4156
02:18:36,000 --> 02:18:37,000
对对没有一个工具

4157
02:18:37,000 --> 02:18:38,000
还有一些其他

4158
02:18:38,000 --> 02:18:41,000
就在这一块 go 里面

4159
02:18:41,000 --> 02:18:43,000
就社区里面还是有三四个选项吧

4160
02:18:43,000 --> 02:18:45,000
就看我不知道之后会怎么样

4161
02:18:45,000 --> 02:18:46,000
但现在 go dep

4162
02:18:46,000 --> 02:18:47,000
这个是一个比较

4163
02:18:47,000 --> 02:18:48,000
用的比较多的一个工具

4164
02:18:48,000 --> 02:18:51,000
然后另外一个要解决的问题

4165
02:18:51,000 --> 02:18:52,000
就是说

4166
02:18:52,000 --> 02:18:52,000
如果你分布式

4167
02:18:52,000 --> 02:18:54,000
你也没有一个

4168
02:18:54,000 --> 02:18:56,000
集中存储代码的地方

4169
02:18:56,000 --> 02:18:57,000
那同样的

4170
02:18:57,000 --> 02:18:58,000
你也不能保证

4171
02:18:58,000 --> 02:18:58,000
那个代码

4172
02:18:58,000 --> 02:19:00,000
你今天在那

4173
02:19:00,000 --> 02:19:00,000
明天还在那

4174
02:19:00,000 --> 02:19:00,000
对吧

4175
02:19:00,000 --> 02:19:01,000
那个人可能就直接

4176
02:19:01,000 --> 02:19:03,000
把他的 get 项目删除了

4177
02:19:03,000 --> 02:19:04,000
对吧

4178
02:19:04,000 --> 02:19:05,000
之前也有遇到过什么

4179
02:19:05,000 --> 02:19:06,000
那个什么 Y 啊

4180
02:19:06,000 --> 02:19:07,000
还有那几个人

4181
02:19:07,000 --> 02:19:09,000
他从网上消失的时候

4182
02:19:09,000 --> 02:19:10,000
连带着把他的那个什么

4183
02:19:10,000 --> 02:19:12,000
github 账号也给清掉了

4184
02:19:12,000 --> 02:19:15,000
这样如果你依赖了他代码

4185
02:19:15,000 --> 02:19:15,000
你发现哇

4186
02:19:15,000 --> 02:19:16,000
没了怎么办

4187
02:19:16,000 --> 02:19:17,000
没错

4188
02:19:17,000 --> 02:19:18,000
对

4189
02:19:18,000 --> 02:19:20,000
所以这其实是一个比较

4190
02:19:20,000 --> 02:19:21,000
在这种分布式的场合下

4191
02:19:21,000 --> 02:19:22,000
一个比较推荐的方式

4192
02:19:22,000 --> 02:19:25,000
就是说你把你需要依赖代码

4193
02:19:25,000 --> 02:19:26,000
也加入你的版本

4194
02:19:26,000 --> 02:19:28,000
D 的版本控制里面去

4195
02:19:28,000 --> 02:19:28,000
对

4196
02:19:28,000 --> 02:19:29,000
然后这样的话

4197
02:19:29,000 --> 02:19:30,000
有一些什么难度呢

4198
02:19:30,000 --> 02:19:32,000
就是那你要想办法

4199
02:19:32,000 --> 02:19:33,000
你怎么去分离你自己写代码

4200
02:19:33,000 --> 02:19:35,000
和你依赖的代码的

4201
02:19:35,000 --> 02:19:36,000
这个历史的版本的管理

4202
02:19:36,000 --> 02:19:38,000
你最好是能够区别开来

4203
02:19:38,000 --> 02:19:38,000
对吧

4204
02:19:38,000 --> 02:19:39,000
这样可以分别升级嘛

4205
02:19:39,000 --> 02:19:41,000
对

4206
02:19:41,000 --> 02:19:42,000
这也就无形中增加了

4207
02:19:42,000 --> 02:19:45,000
你对要求你对版本管理系统

4208
02:19:45,000 --> 02:19:47,000
又要有足够多的知识

4209
02:19:47,000 --> 02:19:49,000
而相比之下

4210
02:19:49,000 --> 02:19:53,000
其他的语言就可以比较专心的

4211
02:19:53,000 --> 02:19:54,000
放在开发上面

4212
02:19:54,000 --> 02:19:54,000
对

4213
02:19:54,000 --> 02:19:56,000
但其实这个怎么来说

4214
02:19:56,000 --> 02:19:57,000
从总体来

4215
02:19:57,000 --> 02:19:58,000
可用心的角度来讲

4216
02:19:58,000 --> 02:19:59,000
这个反而是好的

4217
02:19:59,000 --> 02:20:00,000
因为这样的话

4218
02:20:00,000 --> 02:20:01,000
你就可以确保

4219
02:20:01,000 --> 02:20:03,000
你只要拿到这个软件包

4220
02:20:03,000 --> 02:20:04,000
然后这个软件包里面的

4221
02:20:04,000 --> 02:20:06,000
所有依赖是通过这种方式

4222
02:20:06,000 --> 02:20:06,000
来管理的

4223
02:20:06,000 --> 02:20:07,000
就是你把它 check 进

4224
02:20:07,000 --> 02:20:09,000
你的本地的代码库里面

4225
02:20:09,000 --> 02:20:11,000
那么你拿到这个代码库里面

4226
02:20:11,000 --> 02:20:12,000
就知道它是一个完整的

4227
02:20:12,000 --> 02:20:13,000
就是你可以用代码库

4228
02:20:13,000 --> 02:20:15,000
编译出来一个最终的结果

4229
02:20:15,000 --> 02:20:16,000
不需要去再经过

4230
02:20:16,000 --> 02:20:17,000
一个网络的下载的

4231
02:20:17,000 --> 02:20:18,000
这么一个过程

4232
02:20:18,000 --> 02:20:19,000
OK

4233
02:20:19,000 --> 02:20:20,000
所以如果你要用

4234
02:20:20,000 --> 02:20:22,000
你要为世界的终结

4235
02:20:22,000 --> 02:20:23,000
做准备的话

4236
02:20:23,000 --> 02:20:25,000
那基本上跟我来编辑

4237
02:20:25,000 --> 02:20:26,000
对

4238
02:20:26,000 --> 02:20:27,000
所以就是它是一个

4239
02:20:27,000 --> 02:20:28,000
你可以看到

4240
02:20:28,000 --> 02:20:29,000
刚才我们这一系列的主题

4241
02:20:29,000 --> 02:20:31,000
都是一个无中心的

4242
02:20:31,000 --> 02:20:33,000
这么一个诉求

4243
02:20:33,000 --> 02:20:35,000
所以从这一点来讲

4244
02:20:35,000 --> 02:20:37,000
它跟 Git 的想法

4245
02:20:37,000 --> 02:20:39,000
其实还是蛮不谋而合的

4246
02:20:39,000 --> 02:20:39,000
对

4247
02:20:39,000 --> 02:20:41,000
Git 说我不要什么

4248
02:20:41,000 --> 02:20:43,000
SVN 和 SASV

4249
02:20:43,000 --> 02:20:44,000
都是需要有个中央服务器

4250
02:20:44,000 --> 02:20:45,000
你才可以 check in

4251
02:20:45,000 --> 02:20:48,000
才可以同步软件的代码

4252
02:20:48,000 --> 02:20:49,000
但是 Git 不需要

4253
02:20:49,000 --> 02:20:50,000
你可以本地修改

4254
02:20:50,000 --> 02:20:51,000
本地 commit

4255
02:20:51,000 --> 02:20:52,000
对吧

4256
02:20:52,000 --> 02:20:53,000
Go 的话也是这样

4257
02:20:53,000 --> 02:20:55,000
本地编译

4258
02:20:55,000 --> 02:20:55,000
本地出结果

4259
02:20:55,000 --> 02:20:56,000
对吧

4260
02:20:56,000 --> 02:20:57,000
就比较好一点

4261
02:20:57,000 --> 02:21:01,000
当然代价也就是用起来会比较繁琐

4262
02:21:01,000 --> 02:21:02,000
而且在

4263
02:21:02,000 --> 02:21:05,000
就是 Go 官方是对这个事情是没有说法的

4264
02:21:05,000 --> 02:21:07,000
就是说你们自己想办法解决

4265
02:21:07,000 --> 02:21:07,000
我们不管

4266
02:21:07,000 --> 02:21:10,000
因为这里面有个很务实的情况

4267
02:21:10,000 --> 02:21:13,000
就是因为 Go 的大部分开发者还是 Google

4268
02:21:13,000 --> 02:21:14,000
Google 的一些工程师

4269
02:21:14,000 --> 02:21:20,000
然后他们 Google 内部是用一个非常复杂先进的 build 的系统

4270
02:21:20,000 --> 02:21:21,000
在写程序

4271
02:21:21,000 --> 02:21:21,000
哪怕是

4272
02:21:21,000 --> 02:21:23,000
但是他们是跨语言的

4273
02:21:23,000 --> 02:21:27,000
所以他们也不用 GoGit 来装程序

4274
02:21:27,000 --> 02:21:30,000
所以 GoGit 到底是做给谁用的

4275
02:21:30,000 --> 02:21:32,000
如果不吃自己狗食的话

4276
02:21:32,000 --> 02:21:33,000
那么他们是

4277
02:21:33,000 --> 02:21:34,000
开发条是用吗

4278
02:21:34,000 --> 02:21:35,000
就是你可以

4279
02:21:35,000 --> 02:21:37,000
因为它大部分时候还是可以用的

4280
02:21:37,000 --> 02:21:39,000
你不是说你每天要 GoGit 一遍对吧

4281
02:21:39,000 --> 02:21:40,000
你 GoGit 回到一个版本

4282
02:21:40,000 --> 02:21:42,000
它大部分时候还是稳定可靠的

4283
02:21:42,000 --> 02:21:43,000
因为它还是鼓励说

4284
02:21:43,000 --> 02:21:45,000
这个 API 要尽量稳定可靠嘛

4285
02:21:45,000 --> 02:21:49,000
所以拿回来大部分时候还是可用的

4286
02:21:49,000 --> 02:21:51,000
只是说当你要正式发布的时候

4287
02:21:51,000 --> 02:21:53,000
你最好把你的依赖那些

4288
02:21:53,000 --> 02:21:54,000
通过刚才我讲的那些方法

4289
02:21:54,000 --> 02:21:56,000
check 到你本地的一个目录里面去

4290
02:21:56,000 --> 02:21:58,000
这样的话会稳定

4291
02:21:58,000 --> 02:21:59,000
就可靠性会好一些嘛

4292
02:21:59,000 --> 02:22:00,000
OK

4293
02:22:00,000 --> 02:22:02,000
嗯

4294
02:22:02,000 --> 02:22:02,000
对

4295
02:22:02,000 --> 02:22:03,000
但所以也是就是说

4296
02:22:03,000 --> 02:22:07,000
因为 Go 它官方没有一个说法

4297
02:22:07,000 --> 02:22:08,000
也没有一个

4298
02:22:08,000 --> 02:22:10,000
他们自己内部也用的东西

4299
02:22:10,000 --> 02:22:12,000
他们内部用的也不是开源的嘛

4300
02:22:12,000 --> 02:22:14,000
也不是一个商业系统

4301
02:22:14,000 --> 02:22:17,000
所以就没有办法把它给我们共享

4302
02:22:17,000 --> 02:22:18,000
就是给我们也用不了

4303
02:22:18,000 --> 02:22:19,000
太复杂了

4304
02:22:19,000 --> 02:22:20,000
对

4305
02:22:20,000 --> 02:22:25,000
这个其实 Souch 跟苹果这边的阵营差不多

4306
02:22:25,000 --> 02:22:26,000
苹果也是

4307
02:22:26,000 --> 02:22:28,000
不管 Object-C 还是 Swift

4308
02:22:28,000 --> 02:22:31,000
其实都没有一个官方的版本

4309
02:22:31,000 --> 02:22:33,000
包管的系统

4310
02:22:33,000 --> 02:22:34,000
嗯哼

4311
02:22:34,000 --> 02:22:34,000
嗯

4312
02:22:34,000 --> 02:22:35,000
CocoPos

4313
02:22:35,000 --> 02:22:37,000
虽然是

4314
02:22:37,000 --> 02:22:38,000
目前的

4315
02:22:38,000 --> 02:22:40,000
既成事实的

4316
02:22:40,000 --> 02:22:40,000
包管的系统

4317
02:22:40,000 --> 02:22:41,000
但

4318
02:22:41,000 --> 02:22:43,000
好像官方也没有

4319
02:22:43,000 --> 02:22:45,000
表现出任何态度

4320
02:22:45,000 --> 02:22:45,000
是支持他

4321
02:22:45,000 --> 02:22:47,000
还是觉得

4322
02:22:47,000 --> 02:22:48,000
可能要拿出来

4323
02:22:48,000 --> 02:22:49,000
要自己另做一套的

4324
02:22:49,000 --> 02:22:51,000
苹果应该不会管

4325
02:22:51,000 --> 02:22:52,000
这种事情吧

4326
02:22:52,000 --> 02:22:52,000
我觉得

4327
02:22:52,000 --> 02:22:53,000
嗯

4328
02:22:53,000 --> 02:22:55,000
我觉得对于开发者来说

4329
02:22:55,000 --> 02:22:56,000
这个东西

4330
02:22:56,000 --> 02:22:58,000
其实还是蛮重要的

4331
02:22:58,000 --> 02:22:59,000
这肯定好不怀疑

4332
02:22:59,000 --> 02:23:00,000
但问题是说

4333
02:23:00,000 --> 02:23:01,000
苹果会觉得

4334
02:23:01,000 --> 02:23:02,000
这个事情很重要

4335
02:23:02,000 --> 02:23:04,000
我很欢迎

4336
02:23:04,000 --> 02:23:05,000
嗯

4337
02:23:05,000 --> 02:23:06,000
我是觉得

4338
02:23:06,000 --> 02:23:08,000
上次 WWDC 之后

4339
02:23:08,000 --> 02:23:11,000
苹果既然对开发者有了这么难得一次的微笑

4340
02:23:11,000 --> 02:23:14,000
那也许接下来有些事情也是可以梦想的

4341
02:23:14,000 --> 02:23:15,000
那是吗

4342
02:23:15,000 --> 02:23:17,000
那你我强烈建议你听一下

4343
02:23:17,000 --> 02:23:18,000
还没

4344
02:23:18,000 --> 02:23:19,000
应该是明天发布的

4345
02:23:19,000 --> 02:23:21,000
IT 功能第 131 期

4346
02:23:21,000 --> 02:23:24,000
看一下苹果对开发者的真实的 i 度是什么

4347
02:23:24,000 --> 02:23:24,000
啊

4348
02:23:24,000 --> 02:23:25,000
好吧

4349
02:23:25,000 --> 02:23:25,000
嗯

4350
02:23:25,000 --> 02:23:28,000
感觉又要被泼冷水了

4351
02:23:28,000 --> 02:23:28,000
对

4352
02:23:28,000 --> 02:23:30,000
今年的那个 YouTube 的 Ravind

4353
02:23:30,000 --> 02:23:33,000
somehow 泼冷水泼了很久

4354
02:23:33,000 --> 02:23:33,000
为什么

4355
02:23:33,000 --> 02:23:37,000
就 YouTube 年末的时候会有 Ravind 的视频嘛

4356
02:23:37,000 --> 02:23:40,000
就是隶属那个今年知名的

4357
02:23:40,000 --> 02:23:41,000
Ravind 的吧

4358
02:23:41,000 --> 02:23:41,000
比较

4359
02:23:41,000 --> 02:23:42,000
那个动词应该是

4360
02:23:42,000 --> 02:23:43,000
Sorry

4361
02:23:43,000 --> 02:23:44,000
对

4362
02:23:44,000 --> 02:23:45,000
Rewind

4363
02:23:45,000 --> 02:23:45,000
Rawind

4364
02:23:45,000 --> 02:23:45,000
Sorry

4365
02:23:45,000 --> 02:23:47,000
我记得应该是念 Rewind

4366
02:23:47,000 --> 02:23:48,000
动词的情况下

4367
02:23:48,000 --> 02:23:48,000
Rewind

4368
02:23:48,000 --> 02:23:49,000
Rewind

4369
02:23:49,000 --> 02:23:50,000
Anyway

4370
02:23:50,000 --> 02:23:50,000
嗯

4371
02:23:50,000 --> 02:23:51,000
对

4372
02:23:51,000 --> 02:23:54,000
然后它里面会隶属今年的

4373
02:23:54,000 --> 02:23:54,000
Rewind

4374
02:23:54,000 --> 02:23:56,000
比较知名的视频

4375
02:23:56,000 --> 02:23:59,000
然后把它们以某种方式重新拍一遍

4376
02:23:59,000 --> 02:24:00,000
然后在里面

4377
02:24:00,000 --> 02:24:02,000
因为今年冰桶挑战很出名嘛

4378
02:24:02,000 --> 02:24:02,000
OK

4379
02:24:02,000 --> 02:24:05,000
然后在里面有大量那个知名人士互相

4380
02:24:05,000 --> 02:24:06,000
泼冷水

4381
02:24:06,000 --> 02:24:06,000
泼水

4382
02:24:06,000 --> 02:24:07,000
泼冰水

4383
02:24:07,000 --> 02:24:08,000
泼冰水的情节

4384
02:24:08,000 --> 02:24:12,000
然后难道明天我又被泼冰水了

4385
02:24:12,000 --> 02:24:16,000
不过刚才今天刚才前面讲了这么多

4386
02:24:16,000 --> 02:24:20,000
就是各个语言自己本身的一些包管理的机制也好

4387
02:24:20,000 --> 02:24:21,000
一些软件也好

4388
02:24:21,000 --> 02:24:23,000
其实我一直有一个问题

4389
02:24:23,000 --> 02:24:28,000
为什么没有一个能够跨语言解决这个问题的工具呢

4390
02:24:28,000 --> 02:24:34,000
就是我们为什么每个语言出来都要自己再重复这么一套很麻烦啰嗦的事情

4391
02:24:34,000 --> 02:24:35,000
然后

4392
02:24:35,000 --> 02:24:39,000
要把这个已经解决的问题再解决一遍呢

4393
02:24:39,000 --> 02:24:42,000
嗯

4394
02:24:42,000 --> 02:24:45,000
如果你要说这个的话

4395
02:24:45,000 --> 02:24:49,000
那我觉得 Nugget 可能是一个这样的工具吧

4396
02:24:49,000 --> 02:24:49,000
做什么

4397
02:24:49,000 --> 02:24:59,000
因为你觉得 Nugget 并不限定于是专门为 Cshop 或者是专门为.NET 平台所做的一个包管理工具啊

4398
02:24:59,000 --> 02:25:03,000
他他你像我刚才说的他可以他可以拿到 JQuery 这种东西

4399
02:25:03,000 --> 02:25:05,000
啊这个我没有异意

4400
02:25:05,000 --> 02:25:12,000
但我是说比如说像啊那个这个什么 Node 的那些 NPM 他只能装 JataScript 的包嘛

4401
02:25:12,000 --> 02:25:14,000
然后 Ruby 也只能装 Ruby 的包嘛

4402
02:25:14,000 --> 02:25:21,000
就是说在现在流行的那些东西都是根据各个语言那个独特的一些系统

4403
02:25:21,000 --> 02:25:24,000
并不能有一个通用的系统解决他们之间的问题

4404
02:25:24,000 --> 02:25:26,000
你是说如果 Nugget 这种方式流行起来

4405
02:25:26,000 --> 02:25:29,000
我们也可以用 Nugget 装那个 JataScript 的包

4406
02:25:29,000 --> 02:25:32,000
然后用 Nugget 装 Go 的包吗

4407
02:25:32,000 --> 02:25:32,000
还是怎么样

4408
02:25:32,000 --> 02:25:40,000
可是反过来我的理解是有些语言的部分

4409
02:25:40,000 --> 02:25:45,000
包也是可以通过比如说 App 之类的东西来安装的

4410
02:25:45,000 --> 02:25:46,000
对对对

4411
02:25:46,000 --> 02:25:48,000
但是如果朝这个方向发展的话

4412
02:25:48,000 --> 02:25:53,000
你是不是就可以说那整个系统平台上干脆只有一个包管理系统

4413
02:25:53,000 --> 02:26:01,000
它既负责软件安装又负责所有语言的相关包的安装就可以了呢

4414
02:26:01,000 --> 02:26:03,000
那我觉得其实对于 C 语言来说

4415
02:26:03,000 --> 02:26:06,000
C 语言没有一个既成实实的安装包

4416
02:26:06,000 --> 02:26:07,000
对对安装包管理系统对吧

4417
02:26:07,000 --> 02:26:07,000
对

4418
02:26:07,000 --> 02:26:09,000
那可是反过来说

4419
02:26:09,000 --> 02:26:11,000
你可以说任何一个 aptv 也好

4420
02:26:11,000 --> 02:26:13,000
那个 yum 也好

4421
02:26:13,000 --> 02:26:20,000
你在安装那些 develop 的 dev 或者是 develop 包的时候

4422
02:26:20,000 --> 02:26:23,000
你不就已经安装了这个语言

4423
02:26:23,000 --> 02:26:26,000
C 语言所需要的投文件吗

4424
02:26:26,000 --> 02:26:28,000
那也许一个语言发展到足足壮大的时候

4425
02:26:28,000 --> 02:26:36,000
它也许就可以通过一个泛用的 package manager 来解决这个问题了

4426
02:26:36,000 --> 02:26:41,000
嗯其实还是一个就是说这个不够成熟的表现嘛

4427
02:26:41,000 --> 02:26:44,000
对应该是这样的

4428
02:26:44,000 --> 02:26:49,000
但参差不齐乃是生活之美的来源是这么说吗

4429
02:26:49,000 --> 02:26:59,000
确实但嗯我不确定这在程序语言这一套就在包管理系统上是不是一定是好的

4430
02:26:59,000 --> 02:27:05,000
但是每次跨一个语言都要重新学习一遍还是蛮高成本的一件事情吧

4431
02:27:05,000 --> 02:27:05,000
我觉得

4432
02:27:05,000 --> 02:27:08,000
这就是 polyglot 的宿命

4433
02:27:08,000 --> 02:27:10,000
好悲伤

4434
02:27:10,000 --> 02:27:15,000
如果你只会渣渣的话也许就没有所有这些痛苦了

4435
02:27:15,000 --> 02:27:18,000
你会生活在一种无知的幸福里面

4436
02:27:18,000 --> 02:27:19,000
这是一个悲伤的故事

4437
02:27:19,000 --> 02:27:24,000
好吧已经两个半小时了

4438
02:27:24,000 --> 02:27:25,000
好今天

4439
02:27:25,000 --> 02:27:26,000
就结束吧

4440
02:27:26,000 --> 02:27:30,000
对今天我们的吐槽那就到这里为止吧

4441
02:27:30,000 --> 02:27:35,000
对我们今天的主题是 package management system

4442
02:27:35,000 --> 02:27:39,000
其实我们本来还想就这个话题延伸到比如说

4443
02:27:39,000 --> 02:27:40,000
部署啊

4444
02:27:40,000 --> 02:27:43,000
做好的包怎样部署到服务器上

4445
02:27:43,000 --> 02:27:46,000
以及围绕着部署所产生的一系列问题

4446
02:27:46,000 --> 02:27:49,000
比如说部署并不简简简简简简单单的是

4447
02:27:49,000 --> 02:27:53,000
把一个 binary 扔到服务器上去运行这么简单

4448
02:27:53,000 --> 02:27:55,000
当然对于某些构成学员来说这是可能的

4449
02:27:55,000 --> 02:27:59,000
但对于我们其他的熟民来说

4450
02:27:59,000 --> 02:28:02,000
这里面还是有很多学问所在

4451
02:28:02,000 --> 02:28:06,000
但是今天我们也没有时间展开了

4452
02:28:06,000 --> 02:28:07,000
所以还是下次吧

4453
02:28:07,000 --> 02:28:08,000
下次找机会吧

4454
02:28:08,000 --> 02:28:10,000
就明年再说了

4455
02:28:10,000 --> 02:28:12,000
See you in 2015

4456
02:28:12,000 --> 02:28:14,000
Yes

4457
02:28:14,000 --> 02:28:17,000
就是各位听到我们这一期节目的时候

4458
02:28:17,000 --> 02:28:19,000
应该还有两三天就要新年了

4459
02:28:19,000 --> 02:28:21,000
那也在这里祝大家新年快乐

4460
02:28:21,000 --> 02:28:22,000
嗯

4461
02:28:22,000 --> 02:28:23,000
嗯

4462
02:28:23,000 --> 02:28:24,000
嗯

4463
02:28:24,000 --> 02:28:24,000
嗯

4464
02:28:24,000 --> 02:28:24,000
好吧

4465
02:28:24,000 --> 02:28:26,000
我们下期再见

4466
02:28:26,000 --> 02:28:30,000
连同这前两期的所有的 feedback

4467
02:28:30,000 --> 02:28:32,000
明年再见

4468
02:28:32,000 --> 02:28:33,000
我写着新年的新气象

4469
02:28:33,000 --> 02:28:33,000
对

4470
02:28:33,000 --> 02:28:34,000
嗯

4471
02:28:34,000 --> 02:28:39,000
重新来做一期新的内核恐慌

4472
02:28:39,000 --> 02:28:39,000
嗯

4473
02:28:39,000 --> 02:28:40,000
OK

4474
02:28:40,000 --> 02:28:42,000
我们今天做了七期嘛

4475
02:28:42,000 --> 02:28:42,000
不错

4476
02:28:42,000 --> 02:28:42,000
唉呀

4477
02:28:42,000 --> 02:28:44,000
ne

4478
02:28:44,000 --> 02:28:45,000
看 datos

4479
02:28:45,000 --> 02:28:45,000
newspapers

4480
02:28:45,000 --> 02:29:04,000
的

4481
02:29:04,000 --> 02:29:05,000
cell

4482
02:29:05,000 --> 02:29:06,000
事情

4483
02:29:06,000 --> 02:29:06,000
确

4484
02:29:06,000 --> 02:29:08,000
其

4485
02:29:08,000 --> 02:29:08,000
互

4486
02:29:08,000 --> 02:29:08,000
ej

4487
02:29:08,000 --> 02:29:09,000
你

4488
02:29:09,000 --> 02:29:09,000
é

