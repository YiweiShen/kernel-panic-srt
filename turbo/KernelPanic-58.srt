1
00:00:00,000 --> 00:00:02,000
3 2 1 开始

2
00:00:02,000 --> 00:00:26,000
大家好 今天是 2020 年的 5 月 26 号

3
00:00:26,000 --> 00:00:28,000
也是自谈自唱的第 126 期

4
00:00:28,000 --> 00:00:31,000
您正在收听内核恐慌一档大志

5
00:00:31,000 --> 00:00:34,000
以算科系为主题的娱乐 podcast

6
00:00:34,000 --> 00:00:35,000
我们号称硬核

7
00:00:35,000 --> 00:00:36,000
但是也没有什么干货

8
00:00:36,000 --> 00:00:37,000
想听听不想听就别听

9
00:00:37,000 --> 00:00:41,000
这是我们的第 58 期

10
00:00:41,000 --> 00:00:42,000
是啊

11
00:00:42,000 --> 00:00:44,000
这同时也是我们自谈自唱

12
00:00:44,000 --> 00:00:48,000
和内核恐慌串台的自谈自串的第 9 期

13
00:00:48,000 --> 00:00:51,000
自谈自唱是全球首家

14
00:00:51,000 --> 00:00:53,000
用华语制作的字体盘音主题播客节目

15
00:00:53,000 --> 00:00:56,000
我是主播文川西畔动音区 Eric

16
00:00:56,000 --> 00:00:58,000
我是主播黄埔江面清真

17
00:00:58,000 --> 00:01:01,000
我是乌涛

18
00:01:01,000 --> 00:01:02,000
我是瑞尔

19
00:01:02,000 --> 00:01:04,000
哇 我们都串了 97 了呀

20
00:01:04,000 --> 00:01:06,000
对呀

21
00:01:06,000 --> 00:01:08,000
然后我们上一期是

22
00:01:08,000 --> 00:01:10,000
嗯 一年之前录的

23
00:01:10,000 --> 00:01:12,000
我们串了 97 了

24
00:01:12,000 --> 00:01:14,000
我们都还没有那个 title

25
00:01:14,000 --> 00:01:16,000
就是你们前面那个很枯炫的那个 title

26
00:01:16,000 --> 00:01:18,000
我们曾经有过

27
00:01:18,000 --> 00:01:19,000
但是我们觉得太 awkward

28
00:01:19,000 --> 00:01:20,000
所以我们放弃了

29
00:01:20,000 --> 00:01:24,000
距离上次自谈自创第 8 期

30
00:01:24,000 --> 00:01:26,000
那期是叫什么

31
00:01:26,000 --> 00:01:27,000
人造千年重

32
00:01:27,000 --> 00:01:29,000
哇 那是令和元年

33
00:01:29,000 --> 00:01:29,000
对吧

34
00:01:29,000 --> 00:01:31,000
2019 年的 5 月 14 号

35
00:01:31,000 --> 00:01:33,000
刚好是整整一年

36
00:01:33,000 --> 00:01:35,000
在这一年里面

37
00:01:35,000 --> 00:01:37,000
我们的自谈自唱

38
00:01:37,000 --> 00:01:40,000
从第 99 期更新到到 126 期

39
00:01:40,000 --> 00:01:41,000
内核同欢呢

40
00:01:41,000 --> 00:01:43,000
从第 55 期更新到了第 58 期

41
00:01:43,000 --> 00:01:44,000
是吧

42
00:01:44,000 --> 00:01:48,000
沧海商店

43
00:01:48,000 --> 00:01:49,000
中间经历了多少巨变

44
00:01:49,000 --> 00:01:51,000
人家都两位数变三位数了

45
00:01:51,000 --> 00:01:53,000
我们还缓慢的爬行

46
00:01:53,000 --> 00:01:54,000
我们总共更新了 37

47
00:01:54,000 --> 00:01:58,000
但是你们很厉害呀

48
00:01:58,000 --> 00:02:00,000
你们图标也变了

49
00:02:00,000 --> 00:02:02,000
那个域名也变了

50
00:02:02,000 --> 00:02:04,000
然后连官网的字体都换掉了

51
00:02:04,000 --> 00:02:05,000
对 我们这个是

52
00:02:05,000 --> 00:02:06,000
应该是 2020 年

53
00:02:06,000 --> 00:02:08,000
有什么改头画面了

54
00:02:08,000 --> 00:02:08,000
之前

55
00:02:08,000 --> 00:02:10,000
我们功夫都用在节目之外了

56
00:02:10,000 --> 00:02:10,000
应该说

57
00:02:10,000 --> 00:02:12,000
这叫看得见的地方

58
00:02:12,000 --> 00:02:13,000
听不见的地方

59
00:02:13,000 --> 00:02:16,000
说实话

60
00:02:16,000 --> 00:02:18,000
我现在打那个趴你哭

61
00:02:18,000 --> 00:02:20,000
还是感觉很有违和感

62
00:02:20,000 --> 00:02:20,000
知道吗

63
00:02:20,000 --> 00:02:21,000
为什么

64
00:02:21,000 --> 00:02:22,000
都不挺好的吗

65
00:02:22,000 --> 00:02:24,000
趴你哭多好呀

66
00:02:24,000 --> 00:02:25,000
好怪

67
00:02:25,000 --> 00:02:27,000
听起来很日本嘛

68
00:02:27,000 --> 00:02:29,000
然后这个点阵字

69
00:02:29,000 --> 00:02:31,000
看起来还感觉挺好的

70
00:02:31,000 --> 00:02:31,000
不过

71
00:02:31,000 --> 00:02:33,000
对 点阵字呢

72
00:02:33,000 --> 00:02:35,000
就是因为上次听了你们

73
00:02:35,000 --> 00:02:36,000
应该是最新一期节目吧

74
00:02:36,000 --> 00:02:37,000
就是第一毛题

75
00:02:37,000 --> 00:02:38,000
还是前一期

76
00:02:38,000 --> 00:02:40,000
因为我们是前一期了

77
00:02:40,000 --> 00:02:40,000
已经是

78
00:02:40,000 --> 00:02:41,000
对 前一期了

79
00:02:41,000 --> 00:02:41,000
太好

80
00:02:41,000 --> 00:02:42,000
你们那个速度比较快

81
00:02:42,000 --> 00:02:44,000
然后我就说

82
00:02:44,000 --> 00:02:46,000
我之前本来一直想换的嘛

83
00:02:46,000 --> 00:02:46,000
然后

84
00:02:46,000 --> 00:02:48,000
就是因为之前

85
00:02:48,000 --> 00:02:51,000
我们是先换的这个 logo

86
00:02:51,000 --> 00:02:52,000
先换的那个像素点

87
00:02:52,000 --> 00:02:53,000
也不叫像素点

88
00:02:53,000 --> 00:02:54,000
那个叫什么

89
00:02:54,000 --> 00:02:55,000
我叫 LED 灯

90
00:02:55,000 --> 00:02:57,000
这个风格的 logo

91
00:02:57,000 --> 00:02:58,000
那里玩的是吧

92
00:02:58,000 --> 00:02:58,000
对

93
00:02:58,000 --> 00:03:00,000
当时我就想说

94
00:03:00,000 --> 00:03:02,000
那干脆拿这个风格

95
00:03:02,000 --> 00:03:03,000
把这个正文字也换了

96
00:03:03,000 --> 00:03:05,000
不是有这个 web font 吗

97
00:03:05,000 --> 00:03:06,000
但是后来转捏一想

98
00:03:06,000 --> 00:03:08,000
中文字体的 web font

99
00:03:08,000 --> 00:03:09,000
马上就劝退了

100
00:03:09,000 --> 00:03:11,000
因为都知道这个体积会比较

101
00:03:11,000 --> 00:03:12,000
比较惊人

102
00:03:12,000 --> 00:03:12,000
对吧

103
00:03:12,000 --> 00:03:15,000
然后来听你们前一期节目

104
00:03:15,000 --> 00:03:16,000
找这个 web 来聊的时候

105
00:03:16,000 --> 00:03:17,000
我在想

106
00:03:17,000 --> 00:03:20,000
如果是纯点症的

107
00:03:20,000 --> 00:03:22,000
那不就没有这个体积问题了吗

108
00:03:22,000 --> 00:03:23,000
因为我简单算了一下

109
00:03:23,000 --> 00:03:23,000
这个数

110
00:03:23,000 --> 00:03:23,000
对吧

111
00:03:23,000 --> 00:03:24,000
假设我是一个

112
00:03:24,000 --> 00:03:26,000
10 像素

113
00:03:26,000 --> 00:03:27,000
乘以 10 像素的汉字

114
00:03:27,000 --> 00:03:29,000
那么一个像

115
00:03:29,000 --> 00:03:30,000
就算我不压缩的情况下

116
00:03:30,000 --> 00:03:31,000
我一个汉

117
00:03:31,000 --> 00:03:32,000
一个方块

118
00:03:32,000 --> 00:03:33,000
就是 100 个 bit

119
00:03:33,000 --> 00:03:34,000
100 个 bit

120
00:03:34,000 --> 00:03:35,000
除以 8 才多少

121
00:03:35,000 --> 00:03:37,000
不到 20 个

122
00:03:37,000 --> 00:03:38,000
这个 byte

123
00:03:38,000 --> 00:03:39,000
对吧

124
00:03:39,000 --> 00:03:40,000
算下来

125
00:03:40,000 --> 00:03:42,000
然后再稍微压缩一下

126
00:03:42,000 --> 00:03:43,000
应该是可以接受的吗

127
00:03:43,000 --> 00:03:44,000
但是问题是丁某

128
00:03:44,000 --> 00:03:46,000
他不是真正的点症

129
00:03:46,000 --> 00:03:47,000
他其实还是使用字

130
00:03:47,000 --> 00:03:49,000
这就是我遇到的第一个问题

131
00:03:49,000 --> 00:03:50,000
就是后来发现

132
00:03:50,000 --> 00:03:51,000
是没有办法

133
00:03:51,000 --> 00:03:51,000
是真的使用

134
00:03:51,000 --> 00:03:52,000
在这个

135
00:03:52,000 --> 00:03:53,000
web font

136
00:03:53,000 --> 00:03:54,000
真的是没有办法

137
00:03:54,000 --> 00:03:55,000
使用点症字体的

138
00:03:55,000 --> 00:03:56,000
就好像跟威力那期

139
00:03:56,000 --> 00:03:57,000
你们也聊了

140
00:03:57,000 --> 00:03:59,000
就是那个 Windows 的

141
00:03:59,000 --> 00:04:00,000
自带的系统字体

142
00:04:00,000 --> 00:04:01,000
它有好几个

143
00:04:01,000 --> 00:04:03,000
都是有内签点症的

144
00:04:03,000 --> 00:04:03,000
对

145
00:04:03,000 --> 00:04:05,000
所谓的中易送体

146
00:04:05,000 --> 00:04:05,000
对

147
00:04:05,000 --> 00:04:08,000
包括之前就是在古早时期的

148
00:04:08,000 --> 00:04:10,000
这个 Linux 系统里面

149
00:04:10,000 --> 00:04:11,000
有那个叫文泉艺

150
00:04:11,000 --> 00:04:13,000
那个那套有东西

151
00:04:13,000 --> 00:04:13,000
你知道吧

152
00:04:13,000 --> 00:04:14,000
应该是 PCF 吗

153
00:04:14,000 --> 00:04:16,000
这个格式我不知道

154
00:04:16,000 --> 00:04:17,000
我就说就是文泉艺

155
00:04:17,000 --> 00:04:18,000
他们当时也做过

156
00:04:18,000 --> 00:04:18,000
就是那种

157
00:04:18,000 --> 00:04:19,000
他做过那个

158
00:04:19,000 --> 00:04:19,000
就是

159
00:04:19,000 --> 00:04:21,000
他叫他叫他叫

160
00:04:21,000 --> 00:04:22,000
他叫他叫开源吗

161
00:04:22,000 --> 00:04:22,000
我不知道

162
00:04:22,000 --> 00:04:24,000
就是免费的这种

163
00:04:24,000 --> 00:04:25,000
就自由的这种

164
00:04:25,000 --> 00:04:26,000
中文点证字

165
00:04:26,000 --> 00:04:27,000
他做的一个高质量的

166
00:04:27,000 --> 00:04:28,000
当时是

167
00:04:28,000 --> 00:04:29,000
应该是

168
00:04:29,000 --> 00:04:31,000
中文互联网上比较早的

169
00:04:31,000 --> 00:04:31,000
那种就是

170
00:04:31,000 --> 00:04:32,000
crowdsourcing 的项目

171
00:04:32,000 --> 00:04:37,000
他当时我记得是做了一个网页

172
00:04:37,000 --> 00:04:38,000
那个时候还挺不容易的

173
00:04:38,000 --> 00:04:39,000
那个时候网页技术都比较落后

174
00:04:39,000 --> 00:04:42,000
他们用通过网页的方式

175
00:04:42,000 --> 00:04:43,000
让大家去拆这个字

176
00:04:43,000 --> 00:04:44,000
然后点这个像素点

177
00:04:44,000 --> 00:04:46,000
然后就是

178
00:04:46,000 --> 00:04:48,000
那边也有一套点证字

179
00:04:48,000 --> 00:04:49,000
但是呢

180
00:04:49,000 --> 00:04:51,000
这些都是没有办法用到

181
00:04:51,000 --> 00:04:52,000
那个 webfront 里面的

182
00:04:52,000 --> 00:04:53,000
因为 webfront

183
00:04:53,000 --> 00:04:55,000
目前主流的几个格式

184
00:04:55,000 --> 00:04:56,000
就最开始的

185
00:04:56,000 --> 00:04:56,000
EOT

186
00:04:56,000 --> 00:04:57,000
叫做 embedded

187
00:04:57,000 --> 00:04:58,000
open type

188
00:04:58,000 --> 00:04:58,000
对吧

189
00:04:58,000 --> 00:05:00,000
后来的这个 svg

190
00:05:00,000 --> 00:05:01,000
包括在目前最新的

191
00:05:01,000 --> 00:05:03,000
那个 wolf 和那个 wolf 2

192
00:05:03,000 --> 00:05:03,000
对吧

193
00:05:03,000 --> 00:05:05,000
他们在那个生成的时候

194
00:05:05,000 --> 00:05:07,000
就直接是不支持这个内签点证

195
00:05:07,000 --> 00:05:09,000
所以这条路就是断掉的

196
00:05:09,000 --> 00:05:11,000
那所以你上期

197
00:05:11,000 --> 00:05:12,000
这个 webfront 里他做那个

198
00:05:12,000 --> 00:05:13,000
也是一个

199
00:05:13,000 --> 00:05:15,000
就是折中的方案

200
00:05:15,000 --> 00:05:16,000
就是用矢量来

201
00:05:16,000 --> 00:05:19,000
模拟点证的那种风格

202
00:05:19,000 --> 00:05:20,000
对吧

203
00:05:20,000 --> 00:05:21,000
但是你看

204
00:05:21,000 --> 00:05:22,000
比如说这种其实还是有用的

205
00:05:22,000 --> 00:05:22,000
就是

206
00:05:22,000 --> 00:05:25,000
虽然说不是一个真正的点证

207
00:05:25,000 --> 00:05:25,000
就是我要

208
00:05:25,000 --> 00:05:27,000
我要表达一个

209
00:05:27,000 --> 00:05:29,000
10 个像素乘以 10 个像素的字

210
00:05:29,000 --> 00:05:31,000
我并不能真的只用 100 个

211
00:05:31,000 --> 00:05:33,000
bit 就可以实现

212
00:05:33,000 --> 00:05:34,000
但是因为

213
00:05:34,000 --> 00:05:36,000
极度简化过的

214
00:05:36,000 --> 00:05:37,000
那个

215
00:05:37,000 --> 00:05:38,000
那个就是

216
00:05:38,000 --> 00:05:39,000
微点证

217
00:05:39,000 --> 00:05:40,000
就是矢量

218
00:05:40,000 --> 00:05:41,000
矢量点证

219
00:05:41,000 --> 00:05:42,000
它其实是一个

220
00:05:42,000 --> 00:05:43,000
各种各样的小方块

221
00:05:43,000 --> 00:05:44,000
对吧

222
00:05:44,000 --> 00:05:45,000
小方块的就有个好处

223
00:05:45,000 --> 00:05:46,000
它就什么

224
00:05:46,000 --> 00:05:46,000
没有这个什么

225
00:05:46,000 --> 00:05:48,000
背赛而曲线

226
00:05:48,000 --> 00:05:48,000
那些转角

227
00:05:48,000 --> 00:05:49,000
什么的

228
00:05:49,000 --> 00:05:50,000
它的那个点

229
00:05:50,000 --> 00:05:51,000
就比较少

230
00:05:51,000 --> 00:05:52,000
没错

231
00:05:52,000 --> 00:05:54,000
你想要说个道理吧

232
00:05:54,000 --> 00:05:54,000
OK

233
00:05:54,000 --> 00:05:56,000
就是确实就拿

234
00:05:56,000 --> 00:05:56,000
这个 webfront

235
00:05:56,000 --> 00:05:57,000
他拿这个

236
00:05:57,000 --> 00:05:58,000
他给了我一个

237
00:05:58,000 --> 00:05:59,000
这个 DMode

238
00:05:59,000 --> 00:05:59,000
DTF

239
00:05:59,000 --> 00:06:01,000
然后我把它转成那个

240
00:06:01,000 --> 00:06:02,000
那个 Wolf 2

241
00:06:02,000 --> 00:06:04,000
Wolf 2 是 Wolf 的那个升级版

242
00:06:04,000 --> 00:06:05,000
它的压缩比例又提高了

243
00:06:05,000 --> 00:06:06,000
百分之

244
00:06:06,000 --> 00:06:07,000
好像 20 左右

245
00:06:07,000 --> 00:06:08,000
应该是

246
00:06:08,000 --> 00:06:08,000
那其实我

247
00:06:08,000 --> 00:06:09,000
我压完之后

248
00:06:09,000 --> 00:06:11,000
他当时给的是一套

249
00:06:11,000 --> 00:06:11,000
这个就是

250
00:06:11,000 --> 00:06:13,000
还在 beta 中的

251
00:06:13,000 --> 00:06:13,000
这个 DMode 的

252
00:06:13,000 --> 00:06:14,000
这个文件给我

253
00:06:14,000 --> 00:06:15,000
我压完之后

254
00:06:15,000 --> 00:06:19,000
其实也就才不到 500 KB 的那个大小

255
00:06:19,000 --> 00:06:20,000
那挺好的

256
00:06:20,000 --> 00:06:21,000
对对对

257
00:06:21,000 --> 00:06:21,000
就 500 KB

258
00:06:21,000 --> 00:06:22,000
可能在

259
00:06:22,000 --> 00:06:24,000
比如在五年前

260
00:06:24,000 --> 00:06:25,000
可能还是一个

261
00:06:25,000 --> 00:06:27,000
有一点纠结的这个尺寸

262
00:06:27,000 --> 00:06:28,000
因为毕竟还是网络要下载

263
00:06:28,000 --> 00:06:29,000
要带宽不高的情况下

264
00:06:29,000 --> 00:06:31,000
但现在在 500 KB

265
00:06:31,000 --> 00:06:32,000
我们这个有四级网络

266
00:06:32,000 --> 00:06:33,000
马上五级网络

267
00:06:33,000 --> 00:06:33,000
对吧

268
00:06:33,000 --> 00:06:35,000
又是这个光线入户都还挺多的

269
00:06:35,000 --> 00:06:36,000
500 KB 的话

270
00:06:36,000 --> 00:06:40,000
你其实你在这个 Instagram 上刷一张图

271
00:06:40,000 --> 00:06:42,000
估计都不止 500 KB 了

272
00:06:42,000 --> 00:06:42,000
对吧

273
00:06:42,000 --> 00:06:44,000
很多这个网页你加载一个

274
00:06:44,000 --> 00:06:47,000
这个什么 JavaScript 的这个库

275
00:06:47,000 --> 00:06:49,000
那可能都是差不多那个水平

276
00:06:49,000 --> 00:06:50,000
所以完全可以接受

277
00:06:50,000 --> 00:06:51,000
所以我就想

278
00:06:51,000 --> 00:06:52,000
那其实是可以的

279
00:06:52,000 --> 00:06:54,000
我就换上这个

280
00:06:54,000 --> 00:06:56,000
把我们的这个官网的

281
00:06:56,000 --> 00:06:57,000
那个 webfont

282
00:06:57,000 --> 00:06:59,000
就换上了这个 DMode 作为主

283
00:06:59,000 --> 00:07:00,000
然后这样设了一些

284
00:07:00,000 --> 00:07:02,000
这个系统自带的一些 backup

285
00:07:02,000 --> 00:07:04,000
就是如果因为某种原因

286
00:07:04,000 --> 00:07:05,000
你的这个系统

287
00:07:05,000 --> 00:07:06,000
你的那个

288
00:07:06,000 --> 00:07:08,000
你浪览器不够现代

289
00:07:08,000 --> 00:07:09,000
或者是你用的这个

290
00:07:09,000 --> 00:07:10,000
那个什么插件

291
00:07:10,000 --> 00:07:11,000
禁用那个 webfont 的话

292
00:07:11,000 --> 00:07:14,000
那你还是会推到你系统默怨的那些字体

293
00:07:14,000 --> 00:07:17,000
所以就整个下来就风格就还不错

294
00:07:17,000 --> 00:07:22,000
用这种假的点阵的话

295
00:07:22,000 --> 00:07:24,000
其实是史料

296
00:07:24,000 --> 00:07:27,000
但是你这样用容易用

297
00:07:27,000 --> 00:07:28,000
要不然的话你点阵

298
00:07:28,000 --> 00:07:30,000
真点阵的话

299
00:07:30,000 --> 00:07:31,000
你那个字号不好弄

300
00:07:31,000 --> 00:07:32,000
对

301
00:07:32,000 --> 00:07:33,000
就是有这个问题

302
00:07:33,000 --> 00:07:33,000
真的点阵的话

303
00:07:33,000 --> 00:07:35,000
你一个字号要一套点阵

304
00:07:35,000 --> 00:07:38,000
反而这种假点阵的话

305
00:07:38,000 --> 00:07:38,000
你可以就是

306
00:07:38,000 --> 00:07:40,000
你可以随意缩放

307
00:07:40,000 --> 00:07:41,000
反而更好

308
00:07:41,000 --> 00:07:42,000
是是是

309
00:07:42,000 --> 00:07:44,000
因为如果用真点阵的话

310
00:07:44,000 --> 00:07:44,000
缩放的话

311
00:07:44,000 --> 00:07:45,000
因为其实现在

312
00:07:45,000 --> 00:07:47,000
我想想

313
00:07:47,000 --> 00:07:49,000
我们至少在英特尔出那个

314
00:07:49,000 --> 00:07:51,000
还有 MD 吧

315
00:07:51,000 --> 00:07:53,000
出下一代的那个显卡之前

316
00:07:53,000 --> 00:07:54,000
我们目前所用的这个

317
00:07:54,000 --> 00:07:56,000
就是就是显卡

318
00:07:56,000 --> 00:07:57,000
这个包括内嵌的

319
00:07:57,000 --> 00:07:58,000
还是独立的

320
00:07:58,000 --> 00:07:59,000
包括手机上的也好

321
00:07:59,000 --> 00:08:03,000
他都不能做我们叫做这个整数倍缩放

322
00:08:03,000 --> 00:08:04,000
什么意思呢

323
00:08:04,000 --> 00:08:05,000
就是比如说我要

324
00:08:05,000 --> 00:08:07,000
我用现在都是用的这个什么

325
00:08:07,000 --> 00:08:07,000
所谓高分

326
00:08:07,000 --> 00:08:08,000
高清屏

327
00:08:08,000 --> 00:08:09,000
什么 2 x 3 x 的

328
00:08:09,000 --> 00:08:10,000
什么意思

329
00:08:10,000 --> 00:08:12,000
就是相对于相对于一个像素点

330
00:08:12,000 --> 00:08:13,000
他我们之前讨论过

331
00:08:13,000 --> 00:08:16,000
是用可能是用四个物理点

332
00:08:16,000 --> 00:08:17,000
或者是九个物理点

333
00:08:17,000 --> 00:08:17,000
就是二乘一二

334
00:08:17,000 --> 00:08:20,000
或者三乘一三的这个这个格子来做

335
00:08:20,000 --> 00:08:22,000
所谓的这个整数倍缩放

336
00:08:22,000 --> 00:08:23,000
什么意思呢

337
00:08:23,000 --> 00:08:25,000
就是说假设我是一个这个 4 K 的屏幕

338
00:08:25,000 --> 00:08:25,000
对不对

339
00:08:25,000 --> 00:08:27,000
然后但是你想

340
00:08:27,000 --> 00:08:28,000
那个 4 K 游戏

341
00:08:28,000 --> 00:08:30,000
他有很多这个特效不是显卡的

342
00:08:30,000 --> 00:08:31,000
数理能跟不上

343
00:08:31,000 --> 00:08:33,000
所以很多时候他只能用这个

344
00:08:33,000 --> 00:08:36,000
就放这个 1080 来的这个分辨率

345
00:08:36,000 --> 00:08:38,000
来来来显示这个游戏

346
00:08:38,000 --> 00:08:39,000
对吧

347
00:08:39,000 --> 00:08:41,000
但是 1080 分辨率

348
00:08:41,000 --> 00:08:42,000
但是你又是 4 K

349
00:08:42,000 --> 00:08:44,000
4 K 就刚好是四个 1080 的屏幕的

350
00:08:44,000 --> 00:08:45,000
那个拼

351
00:08:45,000 --> 00:08:46,000
就是在填字格拼起来

352
00:08:46,000 --> 00:08:46,000
对吧

353
00:08:46,000 --> 00:08:48,000
那这就有个问题了

354
00:08:48,000 --> 00:08:49,000
那一个 1080 像素点

355
00:08:49,000 --> 00:08:52,000
是对应四个这个 4 K 的像素点

356
00:08:52,000 --> 00:08:53,000
就我们通常想

357
00:08:53,000 --> 00:08:55,000
那肯定就是说把那四个物理像素点

358
00:08:55,000 --> 00:08:59,000
都渲染成这个一个这个逻辑像素点的那个颜色

359
00:08:59,000 --> 00:09:00,000
那这样不就看起来

360
00:09:00,000 --> 00:09:02,000
虽然说是 4 K 的屏幕

361
00:09:02,000 --> 00:09:05,000
但看起来还是 1080 的那个清晰

362
00:09:05,000 --> 00:09:05,000
那么锐利对不对

363
00:09:05,000 --> 00:09:08,000
但其实并不是这样子的

364
00:09:08,000 --> 00:09:10,000
因为现在主的显卡都是叫做它叫什么

365
00:09:10,000 --> 00:09:11,000
Linear 的这种

366
00:09:11,000 --> 00:09:13,000
那个词叫什么来的

367
00:09:13,000 --> 00:09:14,000
Interpolate

368
00:09:14,000 --> 00:09:15,000
对 Interpolate

369
00:09:15,000 --> 00:09:17,000
就是它就会去插值

370
00:09:17,000 --> 00:09:19,000
插值就算了

371
00:09:19,000 --> 00:09:19,000
比如说我要

372
00:09:19,000 --> 00:09:20,000
如果你想象一下这么一个场景

373
00:09:20,000 --> 00:09:22,000
你说你这个 1080 的屏幕上

374
00:09:22,000 --> 00:09:23,000
从左到右是一个

375
00:09:23,000 --> 00:09:27,000
从白到黑的一个渐进的一个过渡

376
00:09:27,000 --> 00:09:28,000
对吧

377
00:09:28,000 --> 00:09:28,000
正常的话

378
00:09:28,000 --> 00:09:31,000
如果说你是这个在 4 K 屏幕上显示

379
00:09:31,000 --> 00:09:33,000
那你说你每一个线条绘制两遍

380
00:09:33,000 --> 00:09:34,000
就是每一数

381
00:09:34,000 --> 00:09:34,000
每一数

382
00:09:34,000 --> 00:09:35,000
你就绘制两遍

383
00:09:35,000 --> 00:09:36,000
对不对

384
00:09:36,000 --> 00:09:37,000
但其实并不是这样

385
00:09:37,000 --> 00:09:37,000
它还是要

386
00:09:37,000 --> 00:09:38,000
在 4 K 上

387
00:09:38,000 --> 00:09:42,000
它是要算出那两条 1080 的中间值是怎么样子

388
00:09:42,000 --> 00:09:44,000
然后再把那个中间值绘制在那个 4 K 的那个

389
00:09:44,000 --> 00:09:46,000
多出来的那个像素

390
00:09:46,000 --> 00:09:48,000
那一数的这个像素上面的去

391
00:09:48,000 --> 00:09:50,000
那在这个网页的

392
00:09:50,000 --> 00:09:51,000
上面其实有类似的问题

393
00:09:51,000 --> 00:09:53,000
就是说我本来说

394
00:09:53,000 --> 00:09:54,000
我有一个这个

395
00:09:54,000 --> 00:09:57,000
比如说是这个 10×10 像素的这个点证字

396
00:09:57,000 --> 00:09:59,000
但我能不能渲染到这个 20×20

397
00:09:59,000 --> 00:10:00,000
这个分辨率上去

398
00:10:00,000 --> 00:10:01,000
其实做不到的

399
00:10:01,000 --> 00:10:01,000
对不对

400
00:10:01,000 --> 00:10:03,000
OK

401
00:10:03,000 --> 00:10:04,000
在这个情况下

402
00:10:04,000 --> 00:10:05,000
就刚才 Eric 说那个问题

403
00:10:05,000 --> 00:10:08,000
就是说你反而用这种微点证

404
00:10:08,000 --> 00:10:11,000
就是用矢量来模拟的

405
00:10:11,000 --> 00:10:11,000
反而更好

406
00:10:11,000 --> 00:10:12,000
它可以缩放一点

407
00:10:12,000 --> 00:10:13,000
但是我遇到一个问题

408
00:10:13,000 --> 00:10:15,000
就是现在这网页的 CSS 里面

409
00:10:15,000 --> 00:10:16,000
那个宽度

410
00:10:16,000 --> 00:10:20,000
它有可能我不是按这个整数像素来定的那个宽度

411
00:10:20,000 --> 00:10:22,000
它可能比如说是一个百分比

412
00:10:22,000 --> 00:10:23,000
百分比之后

413
00:10:23,000 --> 00:10:24,000
它算出来

414
00:10:24,000 --> 00:10:26,000
它最后还是要落实到

415
00:10:26,000 --> 00:10:26,000
它的这个叫什么

416
00:10:26,000 --> 00:10:28,000
Rasterize 的时候

417
00:10:28,000 --> 00:10:29,000
Rasterize 什么叫

418
00:10:29,000 --> 00:10:30,000
三格化的时候

419
00:10:30,000 --> 00:10:31,000
的时候

420
00:10:31,000 --> 00:10:32,000
它还是会变成

421
00:10:32,000 --> 00:10:36,000
要变成一个具体的到哪一个像素点的坐标

422
00:10:36,000 --> 00:10:36,000
上去

423
00:10:36,000 --> 00:10:38,000
有时候如果你是按百分比的话

424
00:10:38,000 --> 00:10:39,000
它不就除不进

425
00:10:39,000 --> 00:10:41,000
它就有这个小数

426
00:10:41,000 --> 00:10:42,000
那么就变成了

427
00:10:42,000 --> 00:10:42,000
就说

428
00:10:42,000 --> 00:10:45,000
这个就结合到我们之前几期谈过的

429
00:10:45,000 --> 00:10:46,000
那个次像素平滑的问题对吧

430
00:10:46,000 --> 00:10:46,000
对

431
00:10:46,000 --> 00:10:48,000
以前是就是说灰度平滑

432
00:10:48,000 --> 00:10:48,000
就是说

433
00:10:48,000 --> 00:10:50,000
我先还是一个像素

434
00:10:50,000 --> 00:10:51,000
我不考虑这个

435
00:10:51,000 --> 00:10:53,000
LCD 屏幕这个

436
00:10:53,000 --> 00:10:54,000
这个紫像素的结构

437
00:10:54,000 --> 00:10:55,000
我直接按灰度平滑

438
00:10:55,000 --> 00:10:58,000
比如说我们现在在这个 iOS 设备上面

439
00:10:58,000 --> 00:10:59,000
都是这样子的

440
00:10:59,000 --> 00:10:59,000
对吧

441
00:10:59,000 --> 00:11:00,000
它是没有这个次像素平滑

442
00:11:00,000 --> 00:11:01,000
都是灰度平滑的话

443
00:11:01,000 --> 00:11:03,000
这样的话就相当来说还好一点

444
00:11:03,000 --> 00:11:04,000
它就最多是在

445
00:11:04,000 --> 00:11:05,000
左边一个像素

446
00:11:05,000 --> 00:11:05,000
或右边一个像素

447
00:11:05,000 --> 00:11:06,000
或者它如果它觉得

448
00:11:06,000 --> 00:11:07,000
这个应该是两个像素之间

449
00:11:07,000 --> 00:11:09,000
那它可能在这个灰度上面

450
00:11:09,000 --> 00:11:10,000
做一些这个这个平均

451
00:11:10,000 --> 00:11:11,000
对不对

452
00:11:11,000 --> 00:11:14,000
但是就会导致我这个丁毛点正体

453
00:11:14,000 --> 00:11:16,000
本来我想的效果是

454
00:11:16,000 --> 00:11:18,000
应该是非常边缘锐利

455
00:11:18,000 --> 00:11:20,000
我把它那个叫做像素的

456
00:11:20,000 --> 00:11:21,000
那个字体的尺寸调好的

457
00:11:21,000 --> 00:11:22,000
它边应该是非常锐利的

458
00:11:22,000 --> 00:11:24,000
但是因为由于这个

459
00:11:24,000 --> 00:11:27,000
非整数的这个宽度的问题

460
00:11:27,000 --> 00:11:29,000
它可能那个字的那一数

461
00:11:29,000 --> 00:11:31,000
比如说它旗帜的那个位置

462
00:11:31,000 --> 00:11:32,000
它在排版引擎

463
00:11:32,000 --> 00:11:34,000
加上那个三个画之后算出来

464
00:11:34,000 --> 00:11:36,000
它是在这个从左到右

465
00:11:36,000 --> 00:11:38,000
第 32.57 个像素点

466
00:11:38,000 --> 00:11:41,000
那个时候在开始绘制

467
00:11:41,000 --> 00:11:41,000
这个时候怎么办

468
00:11:41,000 --> 00:11:43,000
那样就是你还会看到

469
00:11:43,000 --> 00:11:44,000
就是说在有些地方

470
00:11:44,000 --> 00:11:46,000
它的那个这个字的边缘

471
00:11:46,000 --> 00:11:49,000
是有一层这个那个叫什么

472
00:11:49,000 --> 00:11:51,000
就是灰灰灰的那种感觉的

473
00:11:51,000 --> 00:11:53,000
如果说你是有这个次像素平滑

474
00:11:53,000 --> 00:11:55,000
然后你这个人眼睛又比较敏感

475
00:11:55,000 --> 00:11:57,000
或者是这个你的屏幕素质

476
00:11:57,000 --> 00:11:58,000
是有一点问题的话

477
00:11:58,000 --> 00:12:00,000
你看到它可能边上有一点那种

478
00:12:00,000 --> 00:12:01,000
就叫那个彩边

479
00:12:01,000 --> 00:12:03,000
对彩边那个空间太平

480
00:12:03,000 --> 00:12:04,000
那种常见的问题

481
00:12:04,000 --> 00:12:07,000
所以还是挺头疼的这个事情

482
00:12:07,000 --> 00:12:07,000
对

483
00:12:07,000 --> 00:12:10,000
毕竟你是假点证

484
00:12:10,000 --> 00:12:11,000
对对对

485
00:12:11,000 --> 00:12:12,000
就假点证的问题

486
00:12:12,000 --> 00:12:13,000
但是就是说

487
00:12:13,000 --> 00:12:14,000
刚才你说的那个缩放的问题

488
00:12:14,000 --> 00:12:16,000
其实这里还是有一点技巧的

489
00:12:16,000 --> 00:12:16,000
就并不是说

490
00:12:16,000 --> 00:12:19,000
我因为是这个真实量

491
00:12:19,000 --> 00:12:20,000
微点证

492
00:12:20,000 --> 00:12:21,000
就可以自由缩放了

493
00:12:21,000 --> 00:12:23,000
其实也我要达到刚才那种

494
00:12:23,000 --> 00:12:24,000
就是 pixel to pixel

495
00:12:24,000 --> 00:12:26,000
就是像素点对像素点的

496
00:12:26,000 --> 00:12:28,000
那种清晰和锐利的话

497
00:12:28,000 --> 00:12:29,000
其实还是有讲究的

498
00:12:29,000 --> 00:12:31,000
比如说这个我用的那个证问题

499
00:12:31,000 --> 00:12:32,000
是 Demo 的

500
00:12:32,000 --> 00:12:33,000
Demo 其实只有两个尺寸

501
00:12:33,000 --> 00:12:35,000
就是 7 像素和 9 像素

502
00:12:35,000 --> 00:12:35,000
对吧

503
00:12:35,000 --> 00:12:38,000
7 像素假设它其实是因为有一个像素的留白的话

504
00:12:38,000 --> 00:12:42,000
它其实是 8 像素宽和 10 像素宽的这么一个字体

505
00:12:42,000 --> 00:12:43,000
对吧

506
00:12:43,000 --> 00:12:45,000
这样你在 CSS 里面设置的时候

507
00:12:45,000 --> 00:12:46,000
你就要设置成

508
00:12:46,000 --> 00:12:49,000
正常你应该设置成 10 个像素

509
00:12:49,000 --> 00:12:49,000
对不对

510
00:12:49,000 --> 00:12:52,000
但是因为 10 个像素实在是太小了

511
00:12:52,000 --> 00:12:52,000
就是那个

512
00:12:52,000 --> 00:12:56,000
就是因为现在很多屏幕的那个 famility 挺高的

513
00:12:56,000 --> 00:12:57,000
就是而且手机上

514
00:12:57,000 --> 00:12:58,000
你强制设置 10 个像素

515
00:12:58,000 --> 00:12:59,000
它也比较小

516
00:12:59,000 --> 00:13:01,000
所以我就设置成了 15

517
00:13:01,000 --> 00:13:03,000
15 你想不就出无尽了吧

518
00:13:03,000 --> 00:13:03,000
对不对

519
00:13:03,000 --> 00:13:05,000
你必须把它量子化

520
00:13:05,000 --> 00:13:06,000
它其实是可以的

521
00:13:06,000 --> 00:13:08,000
因为我看目前我们大部分人用的

522
00:13:08,000 --> 00:13:09,000
这个不管是笔记本也好

523
00:13:09,000 --> 00:13:10,000
还是这个

524
00:13:10,000 --> 00:13:10,000
就至少 Mac

525
00:13:10,000 --> 00:13:12,000
Mac 现在应该已经没有这个

526
00:13:12,000 --> 00:13:15,000
非 retina 屏幕的 Mac 在销售了

527
00:13:15,000 --> 00:13:15,000
对吧

528
00:13:16,000 --> 00:13:17,000
销售肯定没有了

529
00:13:17,000 --> 00:13:19,000
但使用肯定还是有的

530
00:13:19,000 --> 00:13:21,000
而且你要考虑到外接显示器这个问题

531
00:13:21,000 --> 00:13:23,000
就是至少是所有的 Mac

532
00:13:23,000 --> 00:13:25,000
就是新机和这个所有的这个

533
00:13:25,000 --> 00:13:27,000
就是目前应该在世的这个

534
00:13:27,000 --> 00:13:27,000
这个 LS 设备

535
00:13:27,000 --> 00:13:28,000
应该都是这个

536
00:13:28,000 --> 00:13:29,000
所谓的高分屏

537
00:13:29,000 --> 00:13:31,000
就是 retina 屏幕

538
00:13:31,000 --> 00:13:31,000
对不对

539
00:13:31,000 --> 00:13:33,000
那么就有两种了

540
00:13:33,000 --> 00:13:34,000
我们一种是

541
00:13:34,000 --> 00:13:36,000
就是常见的 Mac 都是这个 2 X 的

542
00:13:36,000 --> 00:13:36,000
对吧

543
00:13:36,000 --> 00:13:37,000
然后还有这个

544
00:13:37,000 --> 00:13:38,000
那个叫什么

545
00:13:38,000 --> 00:13:38,000
iPhone

546
00:13:38,000 --> 00:13:39,000
这个什么

547
00:13:39,000 --> 00:13:40,000
11 Pro

548
00:13:40,000 --> 00:13:42,000
它是那个 3 倍的

549
00:13:42,000 --> 00:13:43,000
3 X 的

550
00:13:43,000 --> 00:13:43,000
对对

551
00:13:43,000 --> 00:13:45,000
但 3 X 的话就相对来说

552
00:13:45,000 --> 00:13:46,000
我就那个

553
00:13:46,000 --> 00:13:47,000
相对来说我也没有那个设备

554
00:13:47,000 --> 00:13:49,000
所以我都是 2 X 的设备

555
00:13:49,000 --> 00:13:50,000
我觉得只是 15 个像素

556
00:13:50,000 --> 00:13:52,000
15 个像素的逻辑

557
00:13:52,000 --> 00:13:55,000
其实对应 30 个像素的物理

558
00:13:55,000 --> 00:13:55,000
对不对

559
00:13:55,000 --> 00:13:59,000
OK 30 个像素的物理除以 10 个像素的这个丁毛的点阵体

560
00:13:59,000 --> 00:14:01,000
不是刚好也能 13 倍吗

561
00:14:01,000 --> 00:14:04,000
所以它最小的最小工倍数

562
00:14:04,000 --> 00:14:04,000
对对对

563
00:14:04,000 --> 00:14:08,000
搞个这个这个它能够能够整除的地方就还挺好的

564
00:14:08,000 --> 00:14:09,000
但是问题就来了

565
00:14:09,000 --> 00:14:10,000
我后来我想起来了

566
00:14:10,000 --> 00:14:16,000
你记不记得那个你们有买最新的那个 MacBook Pro 的笔记本吗

567
00:14:16,000 --> 00:14:17,000
就最近两三年的

568
00:14:17,000 --> 00:14:21,000
特别是 13 寸的那个那个机器

569
00:14:21,000 --> 00:14:21,000
没有

570
00:14:21,000 --> 00:14:22,000
想买没有

571
00:14:22,000 --> 00:14:24,000
没有人给我们捐款

572
00:14:24,000 --> 00:14:25,000
就是那个

573
00:14:25,000 --> 00:14:29,000
对这个我们忘了在节目里面说了

574
00:14:29,000 --> 00:14:30,000
请大家给我们捐款

575
00:14:30,000 --> 00:14:32,000
详情请借我们

576
00:14:32,000 --> 00:14:34,000
没有人用爱给我们发电

577
00:14:34,000 --> 00:14:37,000
说回来说回来

578
00:14:37,000 --> 00:14:41,000
就是就是 13 寸那个机型的那个屏幕的那个

579
00:14:41,000 --> 00:14:43,000
那个那个面板的分辨率是

580
00:14:43,000 --> 00:14:46,000
我记得是 2560 乘以 1600

581
00:14:46,000 --> 00:14:47,000
应该是这样

582
00:14:47,000 --> 00:14:50,000
就是它的逻辑是 1280 乘以 800

583
00:14:50,000 --> 00:14:51,000
1280 乘以 800

584
00:14:51,000 --> 00:14:55,000
在当下其实是一个非常窄的一个显示的面积对不对

585
00:14:55,000 --> 00:14:57,000
所以呢

586
00:14:57,000 --> 00:15:01,000
苹果后来应该我记得应该是在前几年开始吧

587
00:15:01,000 --> 00:15:06,000
就应该就是最近这一代就是那个就是把就是蝴蝶键盘那一代开始

588
00:15:06,000 --> 00:15:13,000
它的那个出厂默认设置 13 寸的那个 MacBook 的那个默认的分辨率

589
00:15:13,000 --> 00:15:17,000
它并不是点对点的那个清晰的

590
00:15:17,000 --> 00:15:20,000
它用了一个就它的默认值是一个缩放的

591
00:15:20,000 --> 00:15:27,000
就是它缩放出来应该是个 1440 乘以 900 的这么一个逻辑的分辨率

592
00:15:27,000 --> 00:15:30,000
但其实它的物理上它并除不进嘛

593
00:15:30,000 --> 00:15:32,000
你就 2560 除以这个 1440 除不进的

594
00:15:32,000 --> 00:15:34,000
因为 2600 刚好是 1280 的两倍嘛

595
00:15:34,000 --> 00:15:37,000
所以它虽然说是逻辑上的这个二叉

596
00:15:37,000 --> 00:15:39,000
但它物理上并不是

597
00:15:39,000 --> 00:15:41,000
它只是没有点到点

598
00:15:41,000 --> 00:15:44,000
就它推荐的那个设置没有点到点

599
00:15:44,000 --> 00:15:45,000
对对对

600
00:15:45,000 --> 00:15:47,000
它现在我已经完全不点对点了呀

601
00:15:47,000 --> 00:15:48,000
所有的

602
00:15:48,000 --> 00:15:50,000
但我都是调到点到点的

603
00:15:50,000 --> 00:15:52,000
比如我现在这台 15 寸的

604
00:15:52,000 --> 00:15:54,000
我不用它默认的那个缩放

605
00:15:54,000 --> 00:15:57,000
我就会改成正好是两倍的那个分辨率

606
00:15:57,000 --> 00:16:00,000
对因为 15 寸它原生的这个点对点分辨率

607
00:16:00,000 --> 00:16:01,000
应该是 1440 宽的嘛

608
00:16:01,000 --> 00:16:02,000
对吧

609
00:16:02,000 --> 00:16:05,000
但它推荐你设的是 1680 x 1050 的

610
00:16:05,000 --> 00:16:06,000
对对对

611
00:16:06,000 --> 00:16:08,000
它都是变成我们叫做 Scaled Mode

612
00:16:08,000 --> 00:16:09,000
就是缩放模式对不对

613
00:16:09,000 --> 00:16:12,000
对它可以让你的屏幕看起来容量更大一点

614
00:16:12,000 --> 00:16:13,000
对对对

615
00:16:13,000 --> 00:16:15,000
因为它就是要展示更多的内容嘛

616
00:16:15,000 --> 00:16:16,000
但是其实这样是会影响

617
00:16:16,000 --> 00:16:19,000
它可以让你的视力下降更快一点

618
00:16:19,000 --> 00:16:21,000
其实应该绝大部分是看不出来的

619
00:16:21,000 --> 00:16:24,000
但是如果说你对这个点对点那种有洁癖的话

620
00:16:24,000 --> 00:16:27,000
比如说我们如果要强行用这个低毛点阵

621
00:16:27,000 --> 00:16:29,000
要点对点的话

622
00:16:29,000 --> 00:16:30,000
你在这两个

623
00:16:30,000 --> 00:16:33,000
就是你在最新的这个 MacBook 笔记本上是实现不了的

624
00:16:33,000 --> 00:16:34,000
对吧

625
00:16:34,000 --> 00:16:35,000
因为它默认值不是那样子的

626
00:16:35,000 --> 00:16:37,000
所以我都是把那个默认值调

627
00:16:37,000 --> 00:16:42,000
我都是手动把它改成这个 2 x 的那个点对点的模式

628
00:16:42,000 --> 00:16:44,000
这样我看起来那些才正常嘛

629
00:16:44,000 --> 00:16:45,000
但这样的后果就是说

630
00:16:45,000 --> 00:16:49,000
你的可显示的这个实际面积感觉就变小了嘛

631
00:16:49,000 --> 00:16:51,000
就字更大嘛

632
00:16:51,000 --> 00:16:52,000
对对对对

633
00:16:52,000 --> 00:16:52,000
嗯

634
00:16:52,000 --> 00:16:54,000
它的设置不是就是选

635
00:16:54,000 --> 00:16:56,000
你要么选较大文字

636
00:16:56,000 --> 00:16:58,000
要么选更多空间嘛

637
00:16:58,000 --> 00:16:59,000
对对对

638
00:16:59,000 --> 00:17:00,000
字很小的空间更大嘛

639
00:17:00,000 --> 00:17:01,000
是的

640
00:17:01,000 --> 00:17:05,000
那他们那个系统设置就只能这样选嘛

641
00:17:05,000 --> 00:17:05,000
对

642
00:17:05,000 --> 00:17:07,000
那这样就会很影响

643
00:17:07,000 --> 00:17:08,000
就本来之前吧

644
00:17:08,000 --> 00:17:10,000
你说你只是你做设计的人有这个问题

645
00:17:10,000 --> 00:17:12,000
你把那个这个调一下

646
00:17:12,000 --> 00:17:15,000
你这样看出交付的作品还是这个点对点清晰的

647
00:17:15,000 --> 00:17:15,000
对不对

648
00:17:15,000 --> 00:17:18,000
但现在这个默认值变成这个 Scare Mode

649
00:17:18,000 --> 00:17:20,000
就是说你哪怕你交付的作品是点对点清晰的

650
00:17:20,000 --> 00:17:23,000
最后你就是用户炫看到的时候

651
00:17:23,000 --> 00:17:25,000
它其实也是被这个 scale 掉了

652
00:17:25,000 --> 00:17:27,000
所以这个事情我觉得挺扯的

653
00:17:27,000 --> 00:17:29,000
所以他的意思就是你别纠结这个事情

654
00:17:29,000 --> 00:17:31,000
已经触破了视觉极限了

655
00:17:31,000 --> 00:17:32,000
是吧

656
00:17:32,000 --> 00:17:33,000
iOS 设备的话没有办法了

657
00:17:33,000 --> 00:17:35,000
iOS 至少目前还是清晰的

658
00:17:35,000 --> 00:17:39,000
我觉得他的意思其实是普通用户根本不应该操心这些事情

659
00:17:39,000 --> 00:17:40,000
对呀

660
00:17:40,000 --> 00:17:42,000
但是就是这还是一个 compromise

661
00:17:42,000 --> 00:17:45,000
就是说在这个显卡的这个处理能力

662
00:17:45,000 --> 00:17:48,000
面板的这个这个叫什么

663
00:17:48,000 --> 00:17:51,000
就是这个显示就是显卡到面板的连接带宽

664
00:17:51,000 --> 00:17:56,000
以及这个面板的实际的这个工艺的限制的情况下

665
00:17:56,000 --> 00:17:58,000
做出了这么一个 compromise

666
00:17:58,000 --> 00:18:00,000
但我觉得这毕竟不是这个长远之计

667
00:18:00,000 --> 00:18:03,000
我又想起来

668
00:18:03,000 --> 00:18:07,000
因为我实际主力机是 27 寸的 iMac

669
00:18:07,000 --> 00:18:09,000
是 5 K 的屏

670
00:18:09,000 --> 00:18:11,000
那个显卡是想

671
00:18:11,000 --> 00:18:14,000
可以看得出来它很吃力你知道吗

672
00:18:14,000 --> 00:18:17,000
我可以感觉到显卡很吃力

673
00:18:17,000 --> 00:18:18,000
这个构型容易

674
00:18:18,000 --> 00:18:21,000
5 K 的屏你渲染的时候得多大

675
00:18:21,000 --> 00:18:24,000
你想想那个 5 K 的屏你抓一个屏

676
00:18:24,000 --> 00:18:26,000
抓一个屏出来

677
00:18:26,000 --> 00:18:28,000
一个 PNG 文件的话

678
00:18:28,000 --> 00:18:29,000
这个也是超大的

679
00:18:29,000 --> 00:18:32,000
那个还是就是无损压缩的

680
00:18:32,000 --> 00:18:33,000
都可能有好几招了

681
00:18:33,000 --> 00:18:34,000
对啊

682
00:18:34,000 --> 00:18:36,000
anyway 就说回那个丁毛

683
00:18:36,000 --> 00:18:37,000
丁毛点证

684
00:18:37,000 --> 00:18:39,000
就所以就当时我们就

685
00:18:39,000 --> 00:18:40,000
我就试了一下

686
00:18:40,000 --> 00:18:41,000
我就感觉效果还行

687
00:18:41,000 --> 00:18:44,000
然后我就跟这个威力说这个事

688
00:18:44,000 --> 00:18:46,000
然后他还帮我们做了很多其他的事情

689
00:18:46,000 --> 00:18:48,000
因为丁毛他应该是我

690
00:18:48,000 --> 00:18:50,000
如果我们据说应该是我们是

691
00:18:50,000 --> 00:18:52,000
应该是我们网站应该是第一个

692
00:18:52,000 --> 00:18:54,000
正式商用的

693
00:18:54,000 --> 00:18:56,000
贵网站是第一个正式商用的

694
00:18:56,000 --> 00:18:57,000
对对对

695
00:18:57,000 --> 00:19:00,000
然后他就就其实遇到了很多问题

696
00:19:00,000 --> 00:19:02,000
比如说你像我们上一次节目的时候

697
00:19:02,000 --> 00:19:06,000
不是有这个讨论这个令和这个这个盒子吗

698
00:19:06,000 --> 00:19:07,000
对不对

699
00:19:07,000 --> 00:19:07,000
嗯

700
00:19:07,000 --> 00:19:09,000
他做了吧我记得

701
00:19:09,000 --> 00:19:11,000
对那个令和次丁毛里面

702
00:19:11,000 --> 00:19:13,000
他唯一做了两个令和

703
00:19:13,000 --> 00:19:15,000
就是合在一起的

704
00:19:15,000 --> 00:19:16,000
但这个时候其实已经很为难了

705
00:19:16,000 --> 00:19:17,000
对不对

706
00:19:17,000 --> 00:19:19,000
一个石像素乘以石像素点

707
00:19:19,000 --> 00:19:22,000
你要强行三两个按字进去

708
00:19:22,000 --> 00:19:24,000
我看了一下反正也是比较勉强

709
00:19:24,000 --> 00:19:25,000
那时候我还鼓动这个威力说

710
00:19:25,000 --> 00:19:28,000
那你要不要去把这个挑战一下极限

711
00:19:28,000 --> 00:19:30,000
把前面那几个都做完

712
00:19:30,000 --> 00:19:31,000
那个叫什么招和对吧

713
00:19:31,000 --> 00:19:32,000
从招和开始

714
00:19:32,000 --> 00:19:35,000
他说不做了不做了

715
00:19:35,000 --> 00:19:37,000
九像素做招和

716
00:19:37,000 --> 00:19:38,000
我天哪

717
00:19:38,000 --> 00:19:39,000
这个还不是最难的

718
00:19:39,000 --> 00:19:40,000
还有那个

719
00:19:40,000 --> 00:19:42,000
就是那个日文那个诸事会社

720
00:19:42,000 --> 00:19:45,000
我觉得做大政可能还可以想象

721
00:19:45,000 --> 00:19:46,000
做其他的

722
00:19:46,000 --> 00:19:47,000
Oh my God

723
00:19:47,000 --> 00:19:49,000
那就是灰色者

724
00:19:49,000 --> 00:19:51,000
不要说这些了

725
00:19:51,000 --> 00:19:53,000
但是不要说盒子

726
00:19:53,000 --> 00:19:56,000
就写一个和这个什么雷霆万军

727
00:19:56,000 --> 00:19:57,000
那个都已经写了

728
00:19:57,000 --> 00:19:58,000
一坨一坨的

729
00:19:58,000 --> 00:19:59,000
对对

730
00:19:59,000 --> 00:20:02,000
就这个我就担心怕那个不易赌

731
00:20:02,000 --> 00:20:04,000
然后我就套上之后

732
00:20:04,000 --> 00:20:07,000
我就做了一个这个 usability test

733
00:20:07,000 --> 00:20:07,000
就是找

734
00:20:07,000 --> 00:20:10,000
主要是找我太太来试了一下

735
00:20:10,000 --> 00:20:12,000
我就把我们有一期节目的那个

736
00:20:12,000 --> 00:20:13,000
那个就 summary

737
00:20:13,000 --> 00:20:14,000
就是那个叫什么

738
00:20:14,000 --> 00:20:15,000
节目简介

739
00:20:15,000 --> 00:20:15,000
他有一段话

740
00:20:15,000 --> 00:20:16,000
写了一段话

741
00:20:16,000 --> 00:20:18,000
就是五十七期节目有一段话

742
00:20:18,000 --> 00:20:19,000
我先把那个点

743
00:20:19,000 --> 00:20:21,000
就换上他那些就是点的点都调好

744
00:20:21,000 --> 00:20:22,000
然后我让他来读那段话

745
00:20:22,000 --> 00:20:25,000
基本上就还挺挺超乎我意外的

746
00:20:25,000 --> 00:20:26,000
就是还基本上没有出他们差错

747
00:20:26,000 --> 00:20:27,000
嗯

748
00:20:27,000 --> 00:20:28,000
就是一人性还是很好的

749
00:20:28,000 --> 00:20:29,000
对对对

750
00:20:29,000 --> 00:20:29,000
而且呢

751
00:20:29,000 --> 00:20:33,000
主要是你放在这个有上下文之类的话

752
00:20:33,000 --> 00:20:33,000
没错

753
00:20:33,000 --> 00:20:33,000
没错

754
00:20:33,000 --> 00:20:34,000
可以猜嘛

755
00:20:34,000 --> 00:20:34,000
对吧

756
00:20:34,000 --> 00:20:36,000
有语境的话就可以猜

757
00:20:36,000 --> 00:20:37,000
而且我用的是那个酒

758
00:20:37,000 --> 00:20:38,000
酒香素那卡

759
00:20:38,000 --> 00:20:39,000
酒香素那卡相对来说

760
00:20:39,000 --> 00:20:40,000
还是看得清楚一些的

761
00:20:40,000 --> 00:20:42,000
酒香素那款呢

762
00:20:42,000 --> 00:20:42,000
如果没有上下文

763
00:20:42,000 --> 00:20:43,000
确实有点难度了

764
00:20:43,000 --> 00:20:44,000
嗯

765
00:20:44,000 --> 00:20:46,000
就关键是有语境的话就好

766
00:20:46,000 --> 00:20:46,000
是的

767
00:20:46,000 --> 00:20:47,000
是的

768
00:20:47,000 --> 00:20:47,000
所以我就想

769
00:20:47,000 --> 00:20:47,000
哎

770
00:20:47,000 --> 00:20:50,000
反正我们这个网站看的也不多

771
00:20:50,000 --> 00:20:50,000
对吧

772
00:20:50,000 --> 00:20:51,000
因为大部分都是在这个

773
00:20:51,000 --> 00:20:54,000
就是订阅订阅在这个

774
00:20:54,000 --> 00:20:54,000
这个

775
00:20:54,000 --> 00:20:56,000
这个播客客户端里面去

776
00:20:56,000 --> 00:20:58,000
去去看的

777
00:20:58,000 --> 00:21:00,000
也不会说经常去我们网页翻来翻去

778
00:21:00,000 --> 00:21:00,000
对吧

779
00:21:00,000 --> 00:21:02,000
所以我想那不刚好

780
00:21:02,000 --> 00:21:04,000
我们这个网页还可以做的这个风格

781
00:21:04,000 --> 00:21:05,000
这个别致一点

782
00:21:05,000 --> 00:21:06,000
反正也不怎么常读它

783
00:21:06,000 --> 00:21:07,000
对吧

784
00:21:07,000 --> 00:21:07,000
也没几个字

785
00:21:07,000 --> 00:21:08,000
其实

786
00:21:08,000 --> 00:21:08,000
对

787
00:21:08,000 --> 00:21:09,000
也不像我

788
00:21:09,000 --> 00:21:10,000
你们还要发这个

789
00:21:10,000 --> 00:21:11,000
你们官网这个

790
00:21:11,000 --> 00:21:13,000
这个 type 官网还要发很多这个播文什么的

791
00:21:13,000 --> 00:21:17,000
我们一般就一期节目可能不到 100 个字的这个看字

792
00:21:17,000 --> 00:21:17,000
对吧

793
00:21:17,000 --> 00:21:18,000
完全没有问题

794
00:21:18,000 --> 00:21:21,000
所以每期节目来来看的人也就 100 个吧

795
00:21:21,000 --> 00:21:23,000
我很怀疑

796
00:21:23,000 --> 00:21:24,000
我很怀疑

797
00:21:24,000 --> 00:21:25,000
对

798
00:21:25,000 --> 00:21:25,000
anyway

799
00:21:25,000 --> 00:21:26,000
就是就这样的话

800
00:21:26,000 --> 00:21:28,000
我就把那个第一码用起来

801
00:21:28,000 --> 00:21:30,000
然后但是其实我们还遇到了其他很大

802
00:21:30,000 --> 00:21:31,000
其他很多问题

803
00:21:31,000 --> 00:21:31,000
比如说

804
00:21:31,000 --> 00:21:32,000
嗯

805
00:21:32,000 --> 00:21:35,000
我们上次不是也是讨论这个

806
00:21:35,000 --> 00:21:35,000
那期节目

807
00:21:35,000 --> 00:21:36,000
除了讨论

808
00:21:36,000 --> 00:21:37,000
有讨论日本的地方

809
00:21:37,000 --> 00:21:41,000
就很多那个叫 show notes 里面有很多这个日文的这个符号

810
00:21:41,000 --> 00:21:45,000
然后刚好这个第一码里面

811
00:21:45,000 --> 00:21:48,000
威利他也做了那个日文的那些什么就是

812
00:21:48,000 --> 00:21:49,000
对他有做的

813
00:21:49,000 --> 00:21:50,000
对对就看我

814
00:21:50,000 --> 00:21:52,000
效果还挺好的超乎我的意料

815
00:21:52,000 --> 00:21:55,000
后来他他交付给我的就是为了提还是为了这个体积的原因吗

816
00:21:55,000 --> 00:21:59,000
我就说我们大概的应该不会讲不会也不会打

817
00:21:59,000 --> 00:22:02,000
主要是哈也不会用这个什么阿拉伯文和西伯来文吧

818
00:22:02,000 --> 00:22:03,000
就把那几个符号给去掉了

819
00:22:03,000 --> 00:22:07,000
然后我问威利说他应该是没有韩文的部分的

820
00:22:07,000 --> 00:22:09,000
因为韩文好像挺坑的

821
00:22:09,000 --> 00:22:10,000
就是比较难做

822
00:22:10,000 --> 00:22:13,000
但我们想一下好像我们官方也没有韩文

823
00:22:13,000 --> 00:22:15,000
那这个也就过去了

824
00:22:15,000 --> 00:22:16,000
但是又遇到另外一个问题

825
00:22:16,000 --> 00:22:18,000
就是我们毕竟是一个对吧

826
00:22:18,000 --> 00:22:20,000
面向这个周老人程序员的一个节目

827
00:22:20,000 --> 00:22:26,000
所以有两期节目是有贴代码的

828
00:22:26,000 --> 00:22:27,000
有一小段代码

829
00:22:27,000 --> 00:22:32,000
那么我就需要一个等宽的这个这个拉丁字符吗

830
00:22:32,000 --> 00:22:34,000
然后威利就帮我们调了一个这个

831
00:22:34,000 --> 00:22:38,000
最开始是用的一个就是气象素吗

832
00:22:38,000 --> 00:22:40,000
但就是有些这个还是有些问题

833
00:22:40,000 --> 00:22:43,000
然后后来他就帮我们定制了一个这个

834
00:22:43,000 --> 00:22:45,000
啊等宽的这个点证字

835
00:22:45,000 --> 00:22:50,000
但是就不是这个那个严格跟中文有那个等比的关系了

836
00:22:50,000 --> 00:22:51,000
但你试下还好

837
00:22:51,000 --> 00:22:53,000
因为我不需要跟中文配配对用

838
00:22:53,000 --> 00:22:57,000
然后另外一个场景就是我们不是之前

839
00:22:57,000 --> 00:23:00,000
呃每期节目五套都会有一句 slogan 嘛

840
00:23:00,000 --> 00:23:02,000
那句 slogan 在我们

841
00:23:02,000 --> 00:23:03,000
本期的口号是

842
00:23:03,000 --> 00:23:03,000
对对对对

843
00:23:03,000 --> 00:23:05,000
我们那个那个 slogan 在排版上

844
00:23:05,000 --> 00:23:06,000
在网页上排版

845
00:23:06,000 --> 00:23:08,000
那句 slogan 是邪体排的

846
00:23:08,000 --> 00:23:09,000
嗯

847
00:23:09,000 --> 00:23:13,000
所以威利又给我们定制了一套邪体字的这个

848
00:23:13,000 --> 00:23:16,000
这个丁毛点证的就是这个英文英文字符啊

849
00:23:16,000 --> 00:23:18,000
啊当时因为有一个事情过于疯狂

850
00:23:18,000 --> 00:23:21,000
我们就是只是在微信上简单聊了一下

851
00:23:21,000 --> 00:23:23,000
这个事情并没有真的发生

852
00:23:23,000 --> 00:23:25,000
威利说他其实中文也有邪体的

853
00:23:25,000 --> 00:23:30,000
哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈

854
00:23:30,000 --> 00:23:32,000
所以这个鞋底是威利做的是吧

855
00:23:32,000 --> 00:23:33,000
是威利做的

856
00:23:33,000 --> 00:23:34,000
其实还可以嘛

857
00:23:34,000 --> 00:23:34,000
嗯

858
00:23:34,000 --> 00:23:36,000
这也就是调了几次的

859
00:23:36,000 --> 00:23:38,000
啊就是是拉丁字幕的鞋底

860
00:23:38,000 --> 00:23:40,000
我想知道它是自动生成的

861
00:23:40,000 --> 00:23:41,000
就是这是一个程序生成的

862
00:23:41,000 --> 00:23:44,000
还是他一个一个自己去排的

863
00:23:44,000 --> 00:23:44,000
一个一个点

864
00:23:44,000 --> 00:23:47,000
最开始是那个程序生成

865
00:23:47,000 --> 00:23:48,000
其实就不是那个不是鞋底

866
00:23:48,000 --> 00:23:51,000
是那个叫做那个那个奥利克是不是

867
00:23:51,000 --> 00:23:54,000
不是以他来个是真鞋底吗

868
00:23:54,000 --> 00:23:55,000
我有个伪鞋底就直接把那个点子

869
00:23:55,000 --> 00:23:56,000
那个

870
00:23:56,000 --> 00:23:57,000
拉斜了

871
00:23:57,000 --> 00:23:58,000
最开始是那个

872
00:23:58,000 --> 00:24:00,000
就当时我都没有没有留意到这个问题

873
00:24:00,000 --> 00:24:02,000
因为我都忘了我们有

874
00:24:02,000 --> 00:24:03,000
有用鞋底的地方了

875
00:24:03,000 --> 00:24:04,000
因为最近几个没有用

876
00:24:04,000 --> 00:24:09,000
得归无套说了那么多口号都被你忘了

877
00:24:09,000 --> 00:24:11,000
中文用鞋底是异端啊

878
00:24:11,000 --> 00:24:13,000
中文用鞋底的地方应该用海底吗

879
00:24:13,000 --> 00:24:13,000
不是不是

880
00:24:13,000 --> 00:24:15,000
就是我们口号都是英文的嘛

881
00:24:15,000 --> 00:24:16,000
对啊

882
00:24:16,000 --> 00:24:17,000
所以就是只是英文的部分

883
00:24:17,000 --> 00:24:19,000
但是我我开始没有意识到

884
00:24:19,000 --> 00:24:22,000
后来是我把那个那个丁卯 web

885
00:24:22,000 --> 00:24:23,000
就是部署成

886
00:24:23,000 --> 00:24:24,000
放到放到网上去

887
00:24:24,000 --> 00:24:27,000
然后让威乐威力来看那个效果的时候

888
00:24:27,000 --> 00:24:27,000
他发现了

889
00:24:27,000 --> 00:24:29,000
然后他说这个鞋底好像是有点问题

890
00:24:29,000 --> 00:24:30,000
他就修了一下

891
00:24:30,000 --> 00:24:32,000
那给了我单独的一个

892
00:24:32,000 --> 00:24:34,000
就之前给了我单独的一个这个叫做

893
00:24:34,000 --> 00:24:35,000
叫做叫丁击吗

894
00:24:35,000 --> 00:24:36,000
丁击扣的

895
00:24:36,000 --> 00:24:38,000
可是那个等宽的

896
00:24:38,000 --> 00:24:41,000
后来又做了这个丁击的这个 Italics

897
00:24:41,000 --> 00:24:44,000
但这这两个都是只包含这个拉丁和这个

898
00:24:44,000 --> 00:24:47,000
这个就是常用符号那部分了

899
00:24:47,000 --> 00:24:48,000
就其他都中文肯定没有办法

900
00:24:48,000 --> 00:24:49,000
做鞋底

901
00:24:49,000 --> 00:24:51,000
这个这么小的这个情况下

902
00:24:51,000 --> 00:24:53,000
但其实你看那个鞋底的话

903
00:24:53,000 --> 00:24:55,000
他的那个一毒性就要比那个

904
00:24:55,000 --> 00:24:58,000
就是正普通的那个正常版本就要差好多了

905
00:24:58,000 --> 00:24:59,000
那肯定的

906
00:24:59,000 --> 00:25:00,000
就抖吧

907
00:25:00,000 --> 00:25:03,000
就真鞋底的可毒性是要差的

908
00:25:03,000 --> 00:25:05,000
但是伪鞋底那个之前的一毒性还是还是挺不错的

909
00:25:05,000 --> 00:25:08,000
很奇怪

910
00:25:08,000 --> 00:25:09,000
对不对

911
00:25:09,000 --> 00:25:12,000
就是这个网页啊

912
00:25:12,000 --> 00:25:13,000
看习惯了以后

913
00:25:13,000 --> 00:25:15,000
反而就已经习惯到这个点证

914
00:25:15,000 --> 00:25:16,000
看习惯了反而呢

915
00:25:16,000 --> 00:25:23,000
就看比如说咱们那个自弹自串的第三期那个表情符号超清晰的

916
00:25:23,000 --> 00:25:27,000
反差感特别强烈是不是

917
00:25:27,000 --> 00:25:27,000
对

918
00:25:27,000 --> 00:25:32,000
这个太魔幻了

919
00:25:32,000 --> 00:25:35,000
就是反正我们目前就还挺满意这个显示效果的

920
00:25:35,000 --> 00:25:37,000
虽然说就刚才有说如果你仔细看的话

921
00:25:37,000 --> 00:25:38,000
有一些这个

922
00:25:38,000 --> 00:25:40,000
但根据你浏览器宽度

923
00:25:40,000 --> 00:25:42,000
因为它那个那个分栏是自适应的嘛

924
00:25:42,000 --> 00:25:46,000
在某些宽度下面它就会出现那个那个叫做灰边的问题

925
00:25:46,000 --> 00:25:47,000
但是有些情况下

926
00:25:47,000 --> 00:25:48,000
如果你刚好

927
00:25:48,000 --> 00:25:49,000
差好

928
00:25:49,000 --> 00:25:51,000
那分栏出来都是整数倍的这个像素

929
00:25:51,000 --> 00:25:52,000
就不出现这个

930
00:25:52,000 --> 00:25:54,000
就是这个定位

931
00:25:54,000 --> 00:25:55,000
就是半个像素的

932
00:25:55,000 --> 00:25:57,000
或者是小于一个像素的情况下

933
00:25:57,000 --> 00:25:58,000
它的那个

934
00:25:58,000 --> 00:26:00,000
每个边缘都是非常锐利清晰的

935
00:26:00,000 --> 00:26:02,000
它还要加这个新号

936
00:26:02,000 --> 00:26:06,000
就是你前提是你在一个真的可以点对点显示的

937
00:26:06,000 --> 00:26:08,000
这个 2 X 或者 3 X 屏幕上才可以

938
00:26:08,000 --> 00:26:08,000
对吧

939
00:26:08,000 --> 00:26:09,000
因为刚才讲了

940
00:26:09,000 --> 00:26:11,000
这个 Mac 的那个问题

941
00:26:11,000 --> 00:26:12,000
其实你特别在意

942
00:26:12,000 --> 00:26:13,000
如果你特别在意这个

943
00:26:13,000 --> 00:26:16,000
就是显示器

944
00:26:16,000 --> 00:26:18,000
或者说是这个应该

945
00:26:18,000 --> 00:26:20,000
其实这个应该是浏览器带来的

946
00:26:20,000 --> 00:26:21,000
这个次像素渲染

947
00:26:21,000 --> 00:26:24,000
或者是其他的一些这个抗锯齿渲染效果

948
00:26:24,000 --> 00:26:26,000
你可以在 CSS 里把它关掉

949
00:26:26,000 --> 00:26:26,000
关掉

950
00:26:26,000 --> 00:26:27,000
没有用了

951
00:26:27,000 --> 00:26:29,000
关掉不解决刚才那个问题

952
00:26:29,000 --> 00:26:31,000
可以一定程度上缓解

953
00:26:31,000 --> 00:26:33,000
因为 CSS 里面

954
00:26:33,000 --> 00:26:34,000
至少很多浏览器都支持

955
00:26:34,000 --> 00:26:35,000
就是这个

956
00:26:35,000 --> 00:26:37,000
Anti-Alias 的这个设置

957
00:26:37,000 --> 00:26:38,000
我知道

958
00:26:38,000 --> 00:26:38,000
我试过

959
00:26:38,000 --> 00:26:40,000
那个效果比较糟糕

960
00:26:40,000 --> 00:26:42,000
这个还是跟底层操作的相关

961
00:26:42,000 --> 00:26:44,000
就是你在 Mac 和 Windows 上

962
00:26:44,000 --> 00:26:46,000
不能使用同样的 CSS 规则

963
00:26:46,000 --> 00:26:47,000
来达到同样的效果

964
00:26:47,000 --> 00:26:48,000
这是最大的问题

965
00:26:48,000 --> 00:26:51,000
可以把那个几个浏览器兼容的 CSS 圈写上

966
00:26:51,000 --> 00:26:52,000
它只要不冲突的话

967
00:26:52,000 --> 00:26:53,000
都可以多写上

968
00:26:53,000 --> 00:26:54,000
就啰嗦一点

969
00:26:54,000 --> 00:26:54,000
不是

970
00:26:54,000 --> 00:26:57,000
就是你用同样的规则

971
00:26:57,000 --> 00:26:58,000
在 Mac 和 Windows 上

972
00:26:58,000 --> 00:26:59,000
得到效果是不一样的

973
00:26:59,000 --> 00:27:00,000
这是最大的问题

974
00:27:00,000 --> 00:27:00,000
对对对

975
00:27:00,000 --> 00:27:02,000
就是关掉次向速频滑

976
00:27:02,000 --> 00:27:03,000
这个事情

977
00:27:03,000 --> 00:27:04,000
各家的实现上

978
00:27:04,000 --> 00:27:06,000
都是问题比较多的

979
00:27:06,000 --> 00:27:06,000
对

980
00:27:06,000 --> 00:27:07,000
所以因为这个事情

981
00:27:07,000 --> 00:27:07,000
也不是一个

982
00:27:07,000 --> 00:27:08,000
就常见的

983
00:27:08,000 --> 00:27:10,000
CSS 规则里面有一条

984
00:27:10,000 --> 00:27:11,000
就是好像叫

985
00:27:11,000 --> 00:27:12,000
Text Rendering

986
00:27:12,000 --> 00:27:13,000
还是叫 Font Rendering

987
00:27:13,000 --> 00:27:13,000
还有

988
00:27:13,000 --> 00:27:15,000
然后它现在有两个

989
00:27:15,000 --> 00:27:17,000
应该是 Mozilla 和 WebKit

990
00:27:17,000 --> 00:27:18,000
各有一个实现

991
00:27:18,000 --> 00:27:18,000
但这两个实现

992
00:27:18,000 --> 00:27:20,000
最后得到的效果都是

993
00:27:20,000 --> 00:27:22,000
就在 Mac 上好很多

994
00:27:22,000 --> 00:27:23,000
但是在 Windows 上

995
00:27:23,000 --> 00:27:25,000
就还是 11 拖

996
00:27:25,000 --> 00:27:25,000
对对

997
00:27:25,000 --> 00:27:27,000
反正这个问题是比较多的

998
00:27:27,000 --> 00:27:28,000
所以就刚才

999
00:27:28,000 --> 00:27:30,000
那个曾宇说这条

1000
00:27:30,000 --> 00:27:31,000
我其实我在开发的时候

1001
00:27:31,000 --> 00:27:32,000
我就试过了

1002
00:27:32,000 --> 00:27:32,000
那个效果是比

1003
00:27:32,000 --> 00:27:34,000
反正一个是不一致

1004
00:27:34,000 --> 00:27:34,000
一个就是说

1005
00:27:34,000 --> 00:27:35,000
其实挺糟糕的

1006
00:27:35,000 --> 00:27:36,000
而且也不能解决

1007
00:27:36,000 --> 00:27:37,000
刚才说的

1008
00:27:37,000 --> 00:27:38,000
比如说你的那个屏幕

1009
00:27:38,000 --> 00:27:40,000
不是那个点对点

1010
00:27:40,000 --> 00:27:40,000
导致的这个问题

1011
00:27:40,000 --> 00:27:41,000
这个是你不断

1012
00:27:41,000 --> 00:27:42,000
软件怎么调都调不了的

1013
00:27:42,000 --> 00:27:43,000
因为一个是你在

1014
00:27:43,000 --> 00:27:44,000
那个操作系统

1015
00:27:44,000 --> 00:27:45,000
本身的设置的问题

1016
00:27:45,000 --> 00:27:46,000
这个你是改不了

1017
00:27:46,000 --> 00:27:46,000
用户设置的

1018
00:27:46,000 --> 00:27:47,000
对吧

1019
00:27:47,000 --> 00:27:49,000
我又不能检测到说

1020
00:27:49,000 --> 00:27:50,000
这个用户说是

1021
00:27:50,000 --> 00:27:50,000
这个不是点对点

1022
00:27:50,000 --> 00:27:52,000
我弹个弹窗说

1023
00:27:52,000 --> 00:27:53,000
你这个不是点对点

1024
00:27:53,000 --> 00:27:53,000
你赶紧把那个点

1025
00:27:53,000 --> 00:27:54,000
你给弄回来

1026
00:27:54,000 --> 00:27:54,000
对吧

1027
00:27:54,000 --> 00:27:55,000
这也不现实

1028
00:27:55,000 --> 00:27:59,000
然后就是在做完

1029
00:27:59,000 --> 00:28:00,000
这一套之后

1030
00:28:00,000 --> 00:28:01,000
我就在

1031
00:28:01,000 --> 00:28:03,000
这应该是前两周吧

1032
00:28:03,000 --> 00:28:05,000
就在刷那个 hacker news

1033
00:28:05,000 --> 00:28:06,000
结果发现上面

1034
00:28:06,000 --> 00:28:08,000
竟然有人在搞

1035
00:28:08,000 --> 00:28:10,000
这个 xp.css

1036
00:28:10,000 --> 00:28:11,000
什么意思

1037
00:28:11,000 --> 00:28:14,000
他要用 css 来复原

1038
00:28:14,000 --> 00:28:15,000
当初的这个

1039
00:28:15,000 --> 00:28:17,000
windows xp 时代

1040
00:28:17,000 --> 00:28:18,000
就是那个什么

1041
00:28:18,000 --> 00:28:20,000
640 x 480 像素的

1042
00:28:20,000 --> 00:28:21,000
那个显示屏

1043
00:28:21,000 --> 00:28:22,000
那种压现

1044
00:28:22,000 --> 00:28:23,000
那种就是

1045
00:28:23,000 --> 00:28:24,000
那种像素感

1046
00:28:24,000 --> 00:28:26,000
不是我们现在追求的那种

1047
00:28:26,000 --> 00:28:27,000
其实也算是了

1048
00:28:27,000 --> 00:28:28,000
只是说可能不是

1049
00:28:28,000 --> 00:28:29,000
他是从英文

1050
00:28:29,000 --> 00:28:31,000
那个事件来做的

1051
00:28:31,000 --> 00:28:32,000
他也提到了说

1052
00:28:32,000 --> 00:28:33,000
怎么用这个 webfund

1053
00:28:33,000 --> 00:28:35,000
来实现这种像素的感

1054
00:28:35,000 --> 00:28:36,000
对吧

1055
00:28:36,000 --> 00:28:36,000
包括是

1056
00:28:36,000 --> 00:28:37,000
就是

1057
00:28:37,000 --> 00:28:39,000
你真还原当年的

1058
00:28:39,000 --> 00:28:40,000
那个 windows

1059
00:28:40,000 --> 00:28:40,000
这个

1060
00:28:40,000 --> 00:28:42,000
这个常用的那几个字体

1061
00:28:42,000 --> 00:28:43,000
比如说像

1062
00:28:43,000 --> 00:28:43,000
Vadana

1063
00:28:43,000 --> 00:28:44,000
像 Vadana

1064
00:28:44,000 --> 00:28:45,000
Georgia

1065
00:28:45,000 --> 00:28:46,000
像那个 Times

1066
00:28:46,000 --> 00:28:47,000
New Roman

1067
00:28:47,000 --> 00:28:47,000
这些

1068
00:28:47,000 --> 00:28:50,000
在关掉这个

1069
00:28:50,000 --> 00:28:51,000
次像素平滑的

1070
00:28:51,000 --> 00:28:51,000
那个

1071
00:28:51,000 --> 00:28:53,000
情况下

1072
00:28:53,000 --> 00:28:54,000
实现出点对点

1073
00:28:54,000 --> 00:28:55,000
渲染的感觉

1074
00:28:55,000 --> 00:28:55,000
对吧

1075
00:28:55,000 --> 00:28:56,000
但是他其实没有

1076
00:28:56,000 --> 00:28:56,000
他是用

1077
00:28:56,000 --> 00:28:57,000
也是用这个

1078
00:28:57,000 --> 00:28:57,000
因为刚才讲的

1079
00:28:57,000 --> 00:28:58,000
那个 webfund

1080
00:28:58,000 --> 00:28:59,000
他其实不支持

1081
00:28:59,000 --> 00:29:01,000
这个真像素字体

1082
00:29:01,000 --> 00:29:02,000
都是也是微像素

1083
00:29:02,000 --> 00:29:03,000
也是用

1084
00:29:03,000 --> 00:29:03,000
那个丁

1085
00:29:03,000 --> 00:29:05,000
丁毛的类似的手法

1086
00:29:05,000 --> 00:29:06,000
就是把它做成

1087
00:29:06,000 --> 00:29:07,000
矢量字

1088
00:29:07,000 --> 00:29:07,000
但是是

1089
00:29:07,000 --> 00:29:08,000
那 trace 出来的点

1090
00:29:08,000 --> 00:29:10,000
就是比较整数的

1091
00:29:10,000 --> 00:29:10,000
这样的

1092
00:29:10,000 --> 00:29:12,000
他在 rendering

1093
00:29:12,000 --> 00:29:13,000
在 rasterize 过后

1094
00:29:13,000 --> 00:29:13,000
都得到的

1095
00:29:13,000 --> 00:29:14,000
还是一个像素化的

1096
00:29:14,000 --> 00:29:15,000
感觉的

1097
00:29:15,000 --> 00:29:17,000
我看到有两个

1098
00:29:17,000 --> 00:29:18,000
案例在做这件事情

1099
00:29:18,000 --> 00:29:19,000
回答我们可以把

1100
00:29:19,000 --> 00:29:20,000
这两个案例

1101
00:29:20,000 --> 00:29:21,000
放到这个 show notes 里面

1102
00:29:21,000 --> 00:29:22,000
大家有兴趣的话

1103
00:29:22,000 --> 00:29:23,000
可以点来看一下

1104
00:29:23,000 --> 00:29:24,000
但是我就觉得

1105
00:29:24,000 --> 00:29:25,000
因为他当然一个是因为

1106
00:29:25,000 --> 00:29:26,000
拉丁字符的

1107
00:29:26,000 --> 00:29:27,000
那个数量比较少

1108
00:29:27,000 --> 00:29:28,000
而且他那个点

1109
00:29:28,000 --> 00:29:30,000
也比较好弄嘛

1110
00:29:30,000 --> 00:29:30,000
就是他的还原

1111
00:29:30,000 --> 00:29:32,000
效果还是比较高的

1112
00:29:32,000 --> 00:29:33,000
后来我想了一下说

1113
00:29:33,000 --> 00:29:34,000
那我能不能还原出

1114
00:29:34,000 --> 00:29:35,000
这个比如说

1115
00:29:35,000 --> 00:29:36,000
我不还原

1116
00:29:36,000 --> 00:29:37,000
这个 windows XP

1117
00:29:37,000 --> 00:29:38,000
那种比较难的情况下

1118
00:29:38,000 --> 00:29:39,000
我就还原一个

1119
00:29:39,000 --> 00:29:40,000
这个以前那个叫什么

1120
00:29:40,000 --> 00:29:42,000
DOS 下面的那种

1121
00:29:42,000 --> 00:29:43,000
什么 UCDOS

1122
00:29:43,000 --> 00:29:45,000
那个中文 DOS 环境

1123
00:29:45,000 --> 00:29:45,000
那种感觉行不行

1124
00:29:45,000 --> 00:29:46,000
对吧

1125
00:29:46,000 --> 00:29:48,000
但是就是因为刚才

1126
00:29:48,000 --> 00:29:49,000
那个不能严格

1127
00:29:49,000 --> 00:29:50,000
点对点的那个问题

1128
00:29:50,000 --> 00:29:51,000
可能还不太好实现

1129
00:29:51,000 --> 00:29:53,000
我们现在反正还在研究吧

1130
00:29:53,000 --> 00:29:54,000
这个吴涛也在

1131
00:29:54,000 --> 00:29:55,000
最近最近也在做

1132
00:29:55,000 --> 00:29:56,000
类似风格的事情

1133
00:29:56,000 --> 00:29:58,000
所以我们都

1134
00:29:58,000 --> 00:29:59,000
刚好抽到一块了

1135
00:29:59,000 --> 00:30:00,000
对

1136
00:30:00,000 --> 00:30:01,000
现在其实网上

1137
00:30:01,000 --> 00:30:02,000
有好多那种

1138
00:30:02,000 --> 00:30:02,000
在网页里面

1139
00:30:02,000 --> 00:30:03,000
跑一个操作系统

1140
00:30:03,000 --> 00:30:04,000
就是跑一个古老的

1141
00:30:04,000 --> 00:30:05,000
拟针操作系统的

1142
00:30:05,000 --> 00:30:06,000
那个效果

1143
00:30:06,000 --> 00:30:07,000
他们用的那个字体

1144
00:30:07,000 --> 00:30:08,000
也差不多吧

1145
00:30:08,000 --> 00:30:09,000
就是虽然不是完全一致

1146
00:30:09,000 --> 00:30:10,000
但也是那种

1147
00:30:10,000 --> 00:30:11,000
就是古早的

1148
00:30:11,000 --> 00:30:13,000
PC

1149
00:30:13,000 --> 00:30:14,000
IBM PC 机里面

1150
00:30:14,000 --> 00:30:15,000
那个内嵌的那种

1151
00:30:15,000 --> 00:30:16,000
ROM 的字体

1152
00:30:16,000 --> 00:30:18,000
那个还是比较好的

1153
00:30:18,000 --> 00:30:20,000
你刚才用 Canvas

1154
00:30:20,000 --> 00:30:22,000
直接把字体的渲染结果

1155
00:30:22,000 --> 00:30:22,000
画出来

1156
00:30:22,000 --> 00:30:24,000
你说这个思路倒是可以

1157
00:30:24,000 --> 00:30:25,000
就是用那个

1158
00:30:25,000 --> 00:30:25,000
就是那个

1159
00:30:25,000 --> 00:30:28,000
HTML 5 那个 Canvas 那套 API

1160
00:30:28,000 --> 00:30:28,000
对

1161
00:30:28,000 --> 00:30:29,000
然后直接在里面

1162
00:30:29,000 --> 00:30:30,000
画那个点

1163
00:30:30,000 --> 00:30:31,000
直接往上画

1164
00:30:31,000 --> 00:30:32,000
但这样就有个问题

1165
00:30:32,000 --> 00:30:33,000
你那个文字就不可选了

1166
00:30:33,000 --> 00:30:34,000
至少我们现在做的

1167
00:30:34,000 --> 00:30:35,000
这种伪像素感

1168
00:30:35,000 --> 00:30:36,000
它其实每个字

1169
00:30:36,000 --> 00:30:37,000
都是可以

1170
00:30:37,000 --> 00:30:39,000
都是非常 accessible 的

1171
00:30:39,000 --> 00:30:39,000
对

1172
00:30:39,000 --> 00:30:41,000
他们做那个

1173
00:30:41,000 --> 00:30:42,000
拟针操作系统的

1174
00:30:42,000 --> 00:30:44,000
这帮人是无所谓

1175
00:30:44,000 --> 00:30:45,000
这件事的

1176
00:30:45,000 --> 00:30:46,000
但是如果你想要说

1177
00:30:46,000 --> 00:30:47,000
我要做一个

1178
00:30:47,000 --> 00:30:48,000
伪操作系统的风格

1179
00:30:48,000 --> 00:30:49,000
同时又实际上是一个

1180
00:30:49,000 --> 00:30:51,000
accessible 的 website

1181
00:30:51,000 --> 00:30:52,000
那的确实非常难

1182
00:30:52,000 --> 00:30:54,000
至少你不能保证跨平台

1183
00:30:54,000 --> 00:30:55,000
对

1184
00:30:55,000 --> 00:30:56,000
就这个就比较坑一点

1185
00:30:56,000 --> 00:30:58,000
但我想一下

1186
00:30:58,000 --> 00:30:59,000
如果我的要求

1187
00:30:59,000 --> 00:31:00,000
不是那么高

1188
00:31:00,000 --> 00:31:02,000
我只是要求尽可能的

1189
00:31:02,000 --> 00:31:03,000
像素的对齐

1190
00:31:03,000 --> 00:31:03,000
就包括解决

1191
00:31:03,000 --> 00:31:05,000
比如说现在我们

1192
00:31:05,000 --> 00:31:06,000
首页

1193
00:31:06,000 --> 00:31:06,000
它是一个

1194
00:31:06,000 --> 00:31:07,000
用最新的

1195
00:31:07,000 --> 00:31:09,000
CSS 3 的 Grid

1196
00:31:09,000 --> 00:31:10,000
就是 Grid

1197
00:31:10,000 --> 00:31:12,000
就是网格排布

1198
00:31:12,000 --> 00:31:13,000
包括它不叫

1199
00:31:13,000 --> 00:31:13,000
它比如说

1200
00:31:13,000 --> 00:31:14,000
比如说我默认打开

1201
00:31:14,000 --> 00:31:16,000
是一个三栏

1202
00:31:16,000 --> 00:31:17,000
三栏

1203
00:31:17,000 --> 00:31:17,000
三栏

1204
00:31:17,000 --> 00:31:19,000
对

1205
00:31:19,000 --> 00:31:20,000
三栏就比较难除

1206
00:31:20,000 --> 00:31:21,000
这就可能导致

1207
00:31:21,000 --> 00:31:22,000
刚才我说的

1208
00:31:22,000 --> 00:31:23,000
边缘有灰度

1209
00:31:23,000 --> 00:31:25,000
因为半个像素的问题

1210
00:31:25,000 --> 00:31:25,000
对不对

1211
00:31:25,000 --> 00:31:26,000
但如果说

1212
00:31:26,000 --> 00:31:27,000
有一个什么

1213
00:31:27,000 --> 00:31:28,000
我不用三栏

1214
00:31:28,000 --> 00:31:29,000
我就用一栏

1215
00:31:29,000 --> 00:31:29,000
或者两栏

1216
00:31:29,000 --> 00:31:30,000
就双栏

1217
00:31:30,000 --> 00:31:31,000
或者是四栏

1218
00:31:31,000 --> 00:31:32,000
一定通过

1219
00:31:32,000 --> 00:31:34,000
GefSql 来实现的话

1220
00:31:34,000 --> 00:31:36,000
那也可能实现说

1221
00:31:36,000 --> 00:31:37,000
我能够指定到

1222
00:31:37,000 --> 00:31:38,000
像素级别的宽度

1223
00:31:38,000 --> 00:31:39,000
那至少你说

1224
00:31:39,000 --> 00:31:41,000
在不同系统上

1225
00:31:41,000 --> 00:31:41,000
它有一定的初

1226
00:31:41,000 --> 00:31:42,000
它至少

1227
00:31:42,000 --> 00:31:43,000
它多一个像素

1228
00:31:43,000 --> 00:31:43,000
小个像素

1229
00:31:43,000 --> 00:31:44,000
它至少还是个整数倍

1230
00:31:44,000 --> 00:31:45,000
应该还是可以做的

1231
00:31:45,000 --> 00:31:47,000
我觉得有一些这个机会

1232
00:31:47,000 --> 00:31:51,000
所以就这个是我们

1233
00:31:51,000 --> 00:31:54,000
官网改头换面

1234
00:31:54,000 --> 00:31:55,000
其实就是都是在

1235
00:31:55,000 --> 00:31:57,000
听了你们前一期节目的

1236
00:31:57,000 --> 00:31:58,000
这个鼓噪下面实现的

1237
00:31:58,000 --> 00:31:59,000
当然这里也非常感谢

1238
00:31:59,000 --> 00:32:00,000
Willy

1239
00:32:00,000 --> 00:32:02,000
帮这个过程中

1240
00:32:02,000 --> 00:32:04,000
非常尽心尽力

1241
00:32:04,000 --> 00:32:05,000
帮我们做了那么多的

1242
00:32:05,000 --> 00:32:06,000
这个定制画

1243
00:32:06,000 --> 00:32:07,000
然后我们也是

1244
00:32:07,000 --> 00:32:09,000
第一个吃了这个螃蟹的人

1245
00:32:09,000 --> 00:32:10,000
现在好像

1246
00:32:10,000 --> 00:32:12,000
把网站做成 Ritual 风格

1247
00:32:12,000 --> 00:32:12,000
是一个

1248
00:32:12,000 --> 00:32:14,000
桑花是个潮流

1249
00:32:14,000 --> 00:32:15,000
就是包括在

1250
00:32:15,000 --> 00:32:17,000
在文艺界也是有

1251
00:32:17,000 --> 00:32:17,000
那个

1252
00:32:17,000 --> 00:32:18,000
怎么叫文艺界

1253
00:32:18,000 --> 00:32:20,000
我想的说在设计界

1254
00:32:20,000 --> 00:32:22,000
也是现在好像兴起了

1255
00:32:22,000 --> 00:32:23,000
那个 Ritual wave

1256
00:32:23,000 --> 00:32:24,000
这样一个风潮

1257
00:32:24,000 --> 00:32:25,000
尽力一直都流行

1258
00:32:25,000 --> 00:32:26,000
Ritual

1259
00:32:26,000 --> 00:32:27,000
对呀

1260
00:32:27,000 --> 00:32:28,000
复古风

1261
00:32:28,000 --> 00:32:29,000
但最近比如说

1262
00:32:29,000 --> 00:32:30,000
那个蒸汽波

1263
00:32:30,000 --> 00:32:31,000
Vipo Y

1264
00:32:31,000 --> 00:32:32,000
好像是这个名字

1265
00:32:32,000 --> 00:32:34,000
就是特别流行

1266
00:32:34,000 --> 00:32:36,000
90 年代的日本流行音乐

1267
00:32:36,000 --> 00:32:37,000
配上那种什么

1268
00:32:37,000 --> 00:32:39,000
美超女战士

1269
00:32:39,000 --> 00:32:41,000
或者是超出宿要赛的动画片

1270
00:32:41,000 --> 00:32:43,000
然后

1271
00:32:43,000 --> 00:32:44,000
现在各种各样的音乐

1272
00:32:44,000 --> 00:32:45,000
全都被

1273
00:32:45,000 --> 00:32:46,000
就是整成那个风格

1274
00:32:46,000 --> 00:32:49,000
之前那个

1275
00:32:49,000 --> 00:32:50,000
我在顺便提一个打个岔的事

1276
00:32:50,000 --> 00:32:51,000
就是那个

1277
00:32:51,000 --> 00:32:53,000
叫做班代

1278
00:32:53,000 --> 00:32:54,000
中文叫什么

1279
00:32:54,000 --> 00:32:54,000
百代

1280
00:32:54,000 --> 00:32:56,000
百代是吧

1281
00:32:56,000 --> 00:32:57,000
百代在

1282
00:32:57,000 --> 00:32:59,000
应该是去年

1283
00:32:59,000 --> 00:33:00,000
年末的时候

1284
00:33:00,000 --> 00:33:02,000
把他之前的一些老的

1285
00:33:02,000 --> 00:33:02,000
那个

1286
00:33:02,000 --> 00:33:04,000
就小时候我们看了那动画片

1287
00:33:04,000 --> 00:33:05,000
全部给放 YouTube 上面去了

1288
00:33:05,000 --> 00:33:07,000
然后我就去追了一遍

1289
00:33:07,000 --> 00:33:07,000
那个

1290
00:33:07,000 --> 00:33:08,000
那个叫什么来的

1291
00:33:08,000 --> 00:33:11,000
魔神英雄传吧

1292
00:33:11,000 --> 00:33:12,000
应该是

1293
00:33:12,000 --> 00:33:13,000
那个字典传吧

1294
00:33:13,000 --> 00:33:13,000
是那个

1295
00:33:13,000 --> 00:33:14,000
有个

1296
00:33:14,000 --> 00:33:15,000
这边有个山

1297
00:33:15,000 --> 00:33:17,000
山有一圈彩虹

1298
00:33:17,000 --> 00:33:17,000
什么

1299
00:33:17,000 --> 00:33:18,000
创建山对吧

1300
00:33:18,000 --> 00:33:19,000
然后有好多彩虹

1301
00:33:19,000 --> 00:33:21,000
我把那个又看了一遍

1302
00:33:21,000 --> 00:33:22,000
应该是一个

1303
00:33:22,000 --> 00:33:23,000
他驾驶一个

1304
00:33:23,000 --> 00:33:24,000
类似像高达一样的机甲

1305
00:33:24,000 --> 00:33:25,000
对对对

1306
00:33:25,000 --> 00:33:25,000
类高达

1307
00:33:25,000 --> 00:33:26,000
龙嘛

1308
00:33:26,000 --> 00:33:27,000
还有一个龙嘛

1309
00:33:27,000 --> 00:33:27,000
骑着龙

1310
00:33:27,000 --> 00:33:29,000
我觉得他好像有个

1311
00:33:29,000 --> 00:33:30,000
有个女主的那个名字

1312
00:33:30,000 --> 00:33:31,000
叫 Kimiko

1313
00:33:31,000 --> 00:33:32,000
对不对

1314
00:33:32,000 --> 00:33:32,000
是那个

1315
00:33:32,000 --> 00:33:34,000
日本的一个女巫的一个名字

1316
00:33:34,000 --> 00:33:34,000
对

1317
00:33:34,000 --> 00:33:35,000
那个时候

1318
00:33:35,000 --> 00:33:36,000
这个动画片小时候好火的

1319
00:33:36,000 --> 00:33:38,000
就我们班有一个女生

1320
00:33:38,000 --> 00:33:38,000
就叫 Kimiko

1321
00:33:38,000 --> 00:33:39,000
我给你

1322
00:33:39,000 --> 00:33:39,000
对

1323
00:33:39,000 --> 00:33:43,000
我当时应该是上小学吧

1324
00:33:43,000 --> 00:33:43,000
对吧

1325
00:33:43,000 --> 00:33:44,000
小学几年节播

1326
00:33:44,000 --> 00:33:46,000
反正就是那个时候

1327
00:33:46,000 --> 00:33:46,000
特别火

1328
00:33:46,000 --> 00:33:48,000
一到那个播出的时候

1329
00:33:48,000 --> 00:33:49,000
就手机电视机里面看

1330
00:33:49,000 --> 00:33:50,000
半年空巷

1331
00:33:50,000 --> 00:33:51,000
而且你放到现在来看

1332
00:33:51,000 --> 00:33:53,000
他是做了那个高薪虫制

1333
00:33:53,000 --> 00:33:53,000
不啊

1334
00:33:53,000 --> 00:33:53,000
不知道怎么

1335
00:33:53,000 --> 00:33:55,000
反正看起来那个 YouTube 上面的效果

1336
00:33:55,000 --> 00:33:57,000
还挺清楚的

1337
00:33:57,000 --> 00:33:57,000
那我就追了一遍

1338
00:33:57,000 --> 00:33:59,000
而且这个片特别坑

1339
00:33:59,000 --> 00:34:00,000
他好像有

1340
00:34:00,000 --> 00:34:01,000
有三部

1341
00:34:01,000 --> 00:34:02,000
然后都烂尾了

1342
00:34:02,000 --> 00:34:03,000
就没有播完

1343
00:34:03,000 --> 00:34:04,000
不知道为什么

1344
00:34:04,000 --> 00:34:05,000
是在中国没有播完

1345
00:34:05,000 --> 00:34:06,000
还是没有画完

1346
00:34:06,000 --> 00:34:07,000
就 YouTube 上也没有

1347
00:34:07,000 --> 00:34:09,000
就我不知道怎么回事

1348
00:34:09,000 --> 00:34:10,000
有可能是没有画完

1349
00:34:10,000 --> 00:34:11,000
有可能是没有画完

1350
00:34:11,000 --> 00:34:11,000
这就很可

1351
00:34:11,000 --> 00:34:12,000
然后这个故事到处

1352
00:34:12,000 --> 00:34:13,000
就我那天是

1353
00:34:13,000 --> 00:34:14,000
他是先放的第一部

1354
00:34:14,000 --> 00:34:16,000
他是一周更一集嘛

1355
00:34:16,000 --> 00:34:18,000
一集也就十来二十分钟的样子

1356
00:34:18,000 --> 00:34:20,000
然后我最多第一季

1357
00:34:20,000 --> 00:34:22,000
还差两三集啊

1358
00:34:22,000 --> 00:34:23,000
可能就追完了

1359
00:34:23,000 --> 00:34:24,000
他就放第二部了

1360
00:34:24,000 --> 00:34:24,000
然后我说

1361
00:34:24,000 --> 00:34:25,000
然后呢

1362
00:34:25,000 --> 00:34:27,000
然后呢

1363
00:34:27,000 --> 00:34:30,000
需要付费解锁

1364
00:34:30,000 --> 00:34:31,000
没有啊

1365
00:34:31,000 --> 00:34:32,000
他也没有这个选项啊

1366
00:34:32,000 --> 00:34:33,000
他是为了卖那个

1367
00:34:33,000 --> 00:34:34,000
卖手办

1368
00:34:34,000 --> 00:34:36,000
他相信就在出那个

1369
00:34:36,000 --> 00:34:36,000
那个那个

1370
00:34:36,000 --> 00:34:36,000
那个那个

1371
00:34:36,000 --> 00:34:38,000
那个手办嘛

1372
00:34:38,000 --> 00:34:38,000
哦

1373
00:34:38,000 --> 00:34:39,000
OK

1374
00:34:39,000 --> 00:34:40,000
我想起来了

1375
00:34:40,000 --> 00:34:41,000
他们的机甲非常 Q 版

1376
00:34:41,000 --> 00:34:42,000
是吧

1377
00:34:42,000 --> 00:34:42,000
对

1378
00:34:42,000 --> 00:34:43,000
他们其实

1379
00:34:43,000 --> 00:34:44,000
就是整个这个动画片

1380
00:34:44,000 --> 00:34:45,000
都是那种萌系的

1381
00:34:45,000 --> 00:34:46,000
也比较萌系

1382
00:34:46,000 --> 00:34:47,000
就 Q 系

1383
00:34:47,000 --> 00:34:48,000
就特别搞笑的那种啊

1384
00:34:48,000 --> 00:34:48,000
对

1385
00:34:48,000 --> 00:34:49,000
二手是 Q 版

1386
00:34:49,000 --> 00:34:50,000
跟 Q 版高达一样

1387
00:34:50,000 --> 00:34:51,000
对对对对

1388
00:34:51,000 --> 00:34:52,000
我当时

1389
00:34:52,000 --> 00:34:53,000
当时我应该是小时候

1390
00:34:53,000 --> 00:34:54,000
最喜欢的动画片

1391
00:34:54,000 --> 00:34:55,000
那个应该能排到前三吧

1392
00:34:55,000 --> 00:34:56,000
天哪

1393
00:34:56,000 --> 00:34:57,000
所以就就又在

1394
00:34:57,000 --> 00:34:58,000
你就在那里

1395
00:34:58,000 --> 00:34:59,000
那个 Vlog 一下

1396
00:34:59,000 --> 00:35:00,000
而他的音乐

1397
00:35:00,000 --> 00:35:01,000
我觉得他还挺好听的

1398
00:35:01,000 --> 00:35:02,000
就是一直

1399
00:35:02,000 --> 00:35:03,000
现在都还记得

1400
00:35:03,000 --> 00:35:03,000
那个

1401
00:35:03,000 --> 00:35:05,000
感觉这期节目播出之后

1402
00:35:05,000 --> 00:35:07,000
这个视频的点击量会大增

1403
00:35:07,000 --> 00:35:08,000
哈哈哈哈

1404
00:35:08,000 --> 00:35:09,000
就一看都是

1405
00:35:09,000 --> 00:35:09,000
都是这个

1406
00:35:09,000 --> 00:35:10,000
我们 IP 连过去

1407
00:35:10,000 --> 00:35:12,000
我们那个 referral 过去的

1408
00:35:12,000 --> 00:35:12,000
对不对

1409
00:35:12,000 --> 00:35:14,000
Machineau 等渡る

1410
00:35:14,000 --> 00:35:14,000
对吧

1411
00:35:14,000 --> 00:35:15,000
他们那个叫

1412
00:35:15,000 --> 00:35:15,000
对对对

1413
00:35:15,000 --> 00:35:16,000
渡る

1414
00:35:16,000 --> 00:35:17,000
渡る是什么意思

1415
00:35:17,000 --> 00:35:18,000
男主的名字

1416
00:35:18,000 --> 00:35:19,000
渡る是男主的名字

1417
00:35:19,000 --> 00:35:20,000
就一般写成

1418
00:35:20,000 --> 00:35:21,000
汉字那个度

1419
00:35:21,000 --> 00:35:22,000
度

1420
00:35:22,000 --> 00:35:23,000
渡江的度

1421
00:35:23,000 --> 00:35:24,000
就渡边

1422
00:35:24,000 --> 00:35:25,000
度的那个度

1423
00:35:25,000 --> 00:35:26,000
对吧

1424
00:35:26,000 --> 00:35:26,000
对

1425
00:35:26,000 --> 00:35:27,000
就是他的名字

1426
00:35:27,000 --> 00:35:27,000
对

1427
00:35:27,000 --> 00:35:28,000
反反这个

1428
00:35:28,000 --> 00:35:29,000
这个就是最近不是在

1429
00:35:29,000 --> 00:35:30,000
什么

1430
00:35:30,000 --> 00:35:31,000
怀旧考古吗

1431
00:35:31,000 --> 00:35:32,000
特别多这种情况

1432
00:35:32,000 --> 00:35:32,000
对不对

1433
00:35:32,000 --> 00:35:34,000
然后那个最近也是在

1434
00:35:34,000 --> 00:35:35,000
那个商场里面

1435
00:35:35,000 --> 00:35:36,000
应该是疫情之前

1436
00:35:36,000 --> 00:35:38,000
商场也看到很多那种

1437
00:35:38,000 --> 00:35:39,000
国产复古的

1438
00:35:39,000 --> 00:35:39,000
你知道吧

1439
00:35:39,000 --> 00:35:41,000
你们记得上海有那个

1440
00:35:41,000 --> 00:35:42,000
大白兔奶汤

1441
00:35:42,000 --> 00:35:43,000
嗯

1442
00:35:43,000 --> 00:35:45,000
这已经很久了吧

1443
00:35:45,000 --> 00:35:47,000
这个十年前就出现了

1444
00:35:47,000 --> 00:35:48,000
没有

1445
00:35:48,000 --> 00:35:48,000
没有

1446
00:35:48,000 --> 00:35:48,000
他最近

1447
00:35:48,000 --> 00:35:49,000
我一次

1448
00:35:49,000 --> 00:35:50,000
我可能在其他地方有

1449
00:35:50,000 --> 00:35:51,000
但是我是

1450
00:35:51,000 --> 00:35:52,000
应该是去年

1451
00:35:52,000 --> 00:35:53,000
就是 19 年

1452
00:35:53,000 --> 00:35:54,000
下半年在深圳才看到

1453
00:35:54,000 --> 00:35:56,000
他搞了一整个展厅的

1454
00:35:56,000 --> 00:35:57,000
那种复古的

1455
00:35:57,000 --> 00:35:58,000
而且其实你仔细翻

1456
00:35:58,000 --> 00:36:00,000
那个时候的排版和设计

1457
00:36:00,000 --> 00:36:01,000
我觉得他做的还蛮好的

1458
00:36:01,000 --> 00:36:01,000
是啊

1459
00:36:01,000 --> 00:36:03,000
就是大白兔奶汤那套的

1460
00:36:03,000 --> 00:36:03,000
这个设计

1461
00:36:03,000 --> 00:36:04,000
当然不知道

1462
00:36:04,000 --> 00:36:04,000
不知道是谁做的

1463
00:36:04,000 --> 00:36:05,000
可以去

1464
00:36:05,000 --> 00:36:07,000
可以去找一期节目

1465
00:36:07,000 --> 00:36:08,000
你们可以去考一下古

1466
00:36:08,000 --> 00:36:09,000
这个当时是谁做的

1467
00:36:09,000 --> 00:36:10,000
那个字体的

1468
00:36:10,000 --> 00:36:11,000
这个设计啊

1469
00:36:11,000 --> 00:36:12,000
他那个全部都定制的

1470
00:36:12,000 --> 00:36:13,000
因为那个时候还没有

1471
00:36:13,000 --> 00:36:15,000
没有什么数字化设计的

1472
00:36:15,000 --> 00:36:16,000
手工化的呀

1473
00:36:16,000 --> 00:36:17,000
那个时候美术字的

1474
00:36:17,000 --> 00:36:20,000
美术字和平面设计的功底

1475
00:36:20,000 --> 00:36:22,000
虽然条件非常简陋

1476
00:36:22,000 --> 00:36:25,000
但是最终水质是非常高的

1477
00:36:25,000 --> 00:36:26,000
在 90 年代电脑普及之后

1478
00:36:26,000 --> 00:36:28,000
就是这个个人桌面出版

1479
00:36:28,000 --> 00:36:30,000
毁了平面设计可以说

1480
00:36:30,000 --> 00:36:32,000
出自滥造

1481
00:36:32,000 --> 00:36:35,000
低端的走法

1482
00:36:35,000 --> 00:36:36,000
哎呀

1483
00:36:36,000 --> 00:36:38,000
当年就是所有的师傅

1484
00:36:38,000 --> 00:36:39,000
都有手上功夫的呀

1485
00:36:39,000 --> 00:36:42,000
就是后来就都用电脑了

1486
00:36:42,000 --> 00:36:43,000
大家就没有手上功夫了

1487
00:36:43,000 --> 00:36:44,000
对

1488
00:36:44,000 --> 00:36:44,000
那个时候我去

1489
00:36:44,000 --> 00:36:46,000
我跟老师去做校刊吧

1490
00:36:46,000 --> 00:36:49,000
做初中还是高中校刊

1491
00:36:49,000 --> 00:36:50,000
去一个印刷厂

1492
00:36:50,000 --> 00:36:51,000
那个师傅的手艺

1493
00:36:51,000 --> 00:36:53,000
真的令人叹为观觉

1494
00:36:53,000 --> 00:36:55,000
就是从一个简听画那种

1495
00:36:55,000 --> 00:36:57,000
就是他实际上是一张

1496
00:36:57,000 --> 00:36:58,000
一本很厚的书

1497
00:36:58,000 --> 00:36:59,000
然后里面每页都是那种

1498
00:36:59,000 --> 00:37:00,000
半透明的简听画

1499
00:37:00,000 --> 00:37:03,000
然后他从上面踩一下

1500
00:37:03,000 --> 00:37:04,000
然后贴在一个板上

1501
00:37:04,000 --> 00:37:05,000
然后问你这样行不行

1502
00:37:05,000 --> 00:37:06,000
然后再去排版

1503
00:37:06,000 --> 00:37:07,000
然后最后把他印出来

1504
00:37:07,000 --> 00:37:10,000
那个手艺真的让人非常叹肤了

1505
00:37:10,000 --> 00:37:11,000
那绝对是

1506
00:37:11,000 --> 00:37:13,000
就是你看现在一个人

1507
00:37:13,000 --> 00:37:13,000
敲键盘

1508
00:37:13,000 --> 00:37:14,000
晃鼠标

1509
00:37:14,000 --> 00:37:15,000
做出来排版

1510
00:37:15,000 --> 00:37:17,000
那感受是完全不一样的

1511
00:37:17,000 --> 00:37:17,000
是一种

1512
00:37:17,000 --> 00:37:19,000
有那种降义的冲击在里面

1513
00:37:19,000 --> 00:37:21,000
就好像你看一个什么

1514
00:37:21,000 --> 00:37:23,000
看一个什么 letterpress 的

1515
00:37:23,000 --> 00:37:24,000
letterpress 的那种

1516
00:37:24,000 --> 00:37:26,000
那种印刷机一样

1517
00:37:26,000 --> 00:37:28,000
就是赏心悦目

1518
00:37:28,000 --> 00:37:29,000
不像现在

1519
00:37:29,000 --> 00:37:31,000
那时候都是剪刀功夫

1520
00:37:31,000 --> 00:37:32,000
剪紧贴贴

1521
00:37:32,000 --> 00:37:33,000
都是

1522
00:37:33,000 --> 00:37:34,000
对

1523
00:37:34,000 --> 00:37:35,000
对

1524
00:37:35,000 --> 00:37:36,000
就是那天

1525
00:37:36,000 --> 00:37:37,000
我就是在逛商场的时候

1526
00:37:37,000 --> 00:37:38,000
看到大白兔

1527
00:37:38,000 --> 00:37:39,000
他搞的那套东西

1528
00:37:39,000 --> 00:37:40,000
然后我就仔细

1529
00:37:40,000 --> 00:37:41,000
其实小时候

1530
00:37:41,000 --> 00:37:42,000
就是光吃糖

1531
00:37:42,000 --> 00:37:44,000
也没在意包装纸

1532
00:37:44,000 --> 00:37:45,000
但那个时候

1533
00:37:45,000 --> 00:37:47,000
他卖到糖里面的包装纸

1534
00:37:47,000 --> 00:37:49,000
因为我估计应该是成本

1535
00:37:49,000 --> 00:37:50,000
和工艺的考虑

1536
00:37:50,000 --> 00:37:53,000
它其实不是特别的清晰

1537
00:37:53,000 --> 00:37:56,000
他现在他都是全用最新的工艺

1538
00:37:56,000 --> 00:37:58,000
做出原来的图样

1539
00:37:58,000 --> 00:37:59,000
所以你仔细看

1540
00:37:59,000 --> 00:37:59,000
他非常

1541
00:37:59,000 --> 00:38:00,000
就是在现代工艺下面

1542
00:38:00,000 --> 00:38:02,000
他非常清楚

1543
00:38:02,000 --> 00:38:03,000
然后边缘

1544
00:38:03,000 --> 00:38:04,000
那些就做得非常好

1545
00:38:04,000 --> 00:38:04,000
我觉得这个

1546
00:38:04,000 --> 00:38:06,000
仔细看配色

1547
00:38:06,000 --> 00:38:07,000
都搭得挺棒的

1548
00:38:07,000 --> 00:38:08,000
大白兔的兔毛

1549
00:38:08,000 --> 00:38:09,000
看得一样

1550
00:38:09,000 --> 00:38:11,000
有毛

1551
00:38:11,000 --> 00:38:12,000
没有毛

1552
00:38:12,000 --> 00:38:15,000
高清版大白兔

1553
00:38:15,000 --> 00:38:17,000
有一个版本是有毛的

1554
00:38:17,000 --> 00:38:17,000
对

1555
00:38:17,000 --> 00:38:19,000
特别搞笑

1556
00:38:19,000 --> 00:38:21,000
等等

1557
00:38:21,000 --> 00:38:23,000
我们这期节目聊啥

1558
00:38:23,000 --> 00:38:25,000
就被你扯到哪去了

1559
00:38:25,000 --> 00:38:28,000
不过我们内核恐慌

1560
00:38:28,000 --> 00:38:31,000
这次作为丁毛点真体的案例

1561
00:38:31,000 --> 00:38:35,000
我其实已经在我们的 Type 会员的

1562
00:38:35,000 --> 00:38:37,000
5 月份这一期里面介绍了

1563
00:38:37,000 --> 00:38:40,000
所以大家如果在会刊里面

1564
00:38:40,000 --> 00:38:41,000
也可以看到

1565
00:38:41,000 --> 00:38:44,000
我们这次改版后的内核恐慌的

1566
00:38:44,000 --> 00:38:45,000
这个网页的效果

1567
00:38:45,000 --> 00:38:46,000
感谢

1568
00:38:46,000 --> 00:38:46,000
感谢

1569
00:38:46,000 --> 00:38:47,000
感谢推荐

1570
00:38:47,000 --> 00:38:48,000
我们回去看一下

1571
00:38:48,000 --> 00:38:50,000
这个能有多少个点击过来

1572
00:38:50,000 --> 00:38:57,000
所以刚才讲了那么多

1573
00:38:57,000 --> 00:38:59,000
这个与主题有关的事情

1574
00:38:59,000 --> 00:39:00,000
我们这期节目的聊什么

1575
00:39:00,000 --> 00:39:01,000
还算是有关

1576
00:39:01,000 --> 00:39:03,000
勉强跟牵扯上

1577
00:39:03,000 --> 00:39:03,000
OK

1578
00:39:03,000 --> 00:39:04,000
好的

1579
00:39:04,000 --> 00:39:06,000
那是不是今天的主题

1580
00:39:06,000 --> 00:39:07,000
我们今天主题讲什么

1581
00:39:07,000 --> 00:39:09,000
我想想

1582
00:39:09,000 --> 00:39:10,000
这个怎么描述

1583
00:39:10,000 --> 00:39:11,000
其实今天这个主题

1584
00:39:11,000 --> 00:39:13,000
跟我们之前串谈的好几次节目

1585
00:39:13,000 --> 00:39:15,000
都是有或多或少的关联

1586
00:39:15,000 --> 00:39:16,000
千丝万有关联

1587
00:39:16,000 --> 00:39:17,000
那当然了

1588
00:39:17,000 --> 00:39:19,000
我这个都是想好的

1589
00:39:19,000 --> 00:39:21,000
想很长时间酝酿的

1590
00:39:21,000 --> 00:39:22,000
都是有计划的

1591
00:39:22,000 --> 00:39:23,000
对不对

1592
00:39:23,000 --> 00:39:24,000
明明之中

1593
00:39:24,000 --> 00:39:25,000
早已进去

1594
00:39:25,000 --> 00:39:25,000
当然计划没有变化快

1595
00:39:25,000 --> 00:39:28,000
Eric 君是非常用心的

1596
00:39:28,000 --> 00:39:29,000
就像我们两个

1597
00:39:29,000 --> 00:39:31,000
每次来都是像打酱油一样

1598
00:39:31,000 --> 00:39:33,000
我们都是很欢乐的打酱油

1599
00:39:33,000 --> 00:39:34,000
对

1600
00:39:34,000 --> 00:39:36,000
我们是双重捧根

1601
00:39:36,000 --> 00:39:38,000
但是你们很能说

1602
00:39:38,000 --> 00:39:39,000
对

1603
00:39:39,000 --> 00:39:41,000
我们是之前串谈所讲过

1604
00:39:41,000 --> 00:39:43,000
unicode 的各种问题

1605
00:39:43,000 --> 00:39:44,000
然后包括应该

1606
00:39:44,000 --> 00:39:46,000
最开始的一期也讲过

1607
00:39:46,000 --> 00:39:46,000
什么

1608
00:39:46,000 --> 00:39:49,000
你在键盘上按下一个按键

1609
00:39:49,000 --> 00:39:49,000
那个字

1610
00:39:49,000 --> 00:39:51,000
出现在屏幕上的整个过程

1611
00:39:51,000 --> 00:39:51,000
对吧

1612
00:39:51,000 --> 00:39:53,000
但其实今天讲的这个话题

1613
00:39:53,000 --> 00:39:55,000
跟这两件事情

1614
00:39:55,000 --> 00:39:57,000
或多或少是有一定关系的

1615
00:39:57,000 --> 00:39:57,000
对吧

1616
00:39:57,000 --> 00:39:57,000
就是说

1617
00:39:57,000 --> 00:39:59,000
文件系统

1618
00:39:59,000 --> 00:40:00,000
大家如果还知道

1619
00:40:00,000 --> 00:40:02,000
什么叫文件系统的话

1620
00:40:02,000 --> 00:40:02,000
现在应该很多

1621
00:40:02,000 --> 00:40:04,000
00 后没有用

1622
00:40:04,000 --> 00:40:06,000
BC 或者 Bike 的话

1623
00:40:06,000 --> 00:40:08,000
Mobile First Generation

1624
00:40:08,000 --> 00:40:08,000
对

1625
00:40:08,000 --> 00:40:10,000
就是 Mobile First

1626
00:40:10,000 --> 00:40:11,000
这一代应该一期

1627
00:40:11,000 --> 00:40:12,000
不知道什么是文件系统

1628
00:40:12,000 --> 00:40:13,000
文件系统

1629
00:40:13,000 --> 00:40:14,000
就是你打开

1630
00:40:14,000 --> 00:40:16,000
所谓的资源管理器

1631
00:40:16,000 --> 00:40:16,000
对吧

1632
00:40:16,000 --> 00:40:17,000
能看到那个东西

1633
00:40:17,000 --> 00:40:18,000
反正如果你在

1634
00:40:18,000 --> 00:40:19,000
像我跟吴涛

1635
00:40:19,000 --> 00:40:22,000
这个装团的人

1636
00:40:22,000 --> 00:40:23,000
就还知道

1637
00:40:23,000 --> 00:40:24,000
还可以有一个命令行

1638
00:40:24,000 --> 00:40:24,000
对吧

1639
00:40:24,000 --> 00:40:26,000
能看到这个路径

1640
00:40:26,000 --> 00:40:27,000
什么什么的

1641
00:40:27,000 --> 00:40:27,000
对

1642
00:40:27,000 --> 00:40:28,000
但文件系统

1643
00:40:28,000 --> 00:40:29,000
我们不是聊它

1644
00:40:29,000 --> 00:40:30,000
本来那些其他各种各样的

1645
00:40:30,000 --> 00:40:31,000
怎么用

1646
00:40:31,000 --> 00:40:32,000
我们只聊一个事情

1647
00:40:32,000 --> 00:40:34,000
就是文件系统

1648
00:40:34,000 --> 00:40:35,000
怎么命名的问题

1649
00:40:35,000 --> 00:40:36,000
就是一个文件

1650
00:40:36,000 --> 00:40:37,000
到底它可以叫什么

1651
00:40:37,000 --> 00:40:38,000
嗯

1652
00:40:38,000 --> 00:40:40,000
然后其实我们

1653
00:40:40,000 --> 00:40:42,000
也可以扩展到

1654
00:40:42,000 --> 00:40:43,000
就其他的嘛

1655
00:40:43,000 --> 00:40:44,000
就是关于各种原代码

1656
00:40:44,000 --> 00:40:46,000
还有那些语言

1657
00:40:46,000 --> 00:40:46,000
嗯

1658
00:40:46,000 --> 00:40:48,000
就是我们会涉及到

1659
00:40:48,000 --> 00:40:49,000
这个命名的事情

1660
00:40:49,000 --> 00:40:50,000
对

1661
00:40:50,000 --> 00:40:51,000
英文它叫什么

1662
00:40:51,000 --> 00:40:52,000
Naming Convention

1663
00:40:52,000 --> 00:40:53,000
是吧

1664
00:40:53,000 --> 00:40:54,000
它叫命名规则

1665
00:40:54,000 --> 00:40:56,000
其实会有各种各样的

1666
00:40:56,000 --> 00:40:57,000
命名规则

1667
00:40:57,000 --> 00:40:57,000
对

1668
00:40:57,000 --> 00:40:58,000
嗯

1669
00:40:58,000 --> 00:41:00,000
但是像

1670
00:41:00,000 --> 00:41:02,000
因为我们大家都是 Mac 用户吧

1671
00:41:02,000 --> 00:41:04,000
Mac 几乎都没有规定

1672
00:41:04,000 --> 00:41:06,000
就不会存在这个事情

1673
00:41:06,000 --> 00:41:07,000
但是以前在很早很早

1674
00:41:07,000 --> 00:41:09,000
以前我们在学命令行

1675
00:41:09,000 --> 00:41:10,000
还在学 DOS 的时候

1676
00:41:10,000 --> 00:41:11,000
有各种各样的

1677
00:41:11,000 --> 00:41:12,000
那个制度要遵守

1678
00:41:12,000 --> 00:41:13,000
对吧

1679
00:41:13,000 --> 00:41:14,000
对啊

1680
00:41:14,000 --> 00:41:14,000
那时候

1681
00:41:14,000 --> 00:41:16,000
你们还记得

1682
00:41:16,000 --> 00:41:17,000
比如说 8.3 规则吗

1683
00:41:17,000 --> 00:41:18,000
对

1684
00:41:18,000 --> 00:41:19,000
这个是

1685
00:41:19,000 --> 00:41:20,000
这个要

1686
00:41:20,000 --> 00:41:20,000
我想想一下

1687
00:41:20,000 --> 00:41:22,000
这个等要在

1688
00:41:22,000 --> 00:41:25,000
Windows 95 之前时代的

1689
00:41:25,000 --> 00:41:27,000
应该是 Windows 3.2 时代的时候

1690
00:41:27,000 --> 00:41:28,000
大家要遵守的一个事情

1691
00:41:28,000 --> 00:41:29,000
对不对

1692
00:41:29,000 --> 00:41:31,000
从 Windows 3.1 开始支持了

1693
00:41:31,000 --> 00:41:32,000
长文件名应该是

1694
00:41:32,000 --> 00:41:33,000
但是为了向下兼容

1695
00:41:33,000 --> 00:41:34,000
或者说

1696
00:41:34,000 --> 00:41:36,000
对

1697
00:41:36,000 --> 00:41:38,000
它做了一套向下兼容的方案

1698
00:41:38,000 --> 00:41:39,000
就是它这个文件名

1699
00:41:39,000 --> 00:41:40,000
在 DOS 下面显示的时候

1700
00:41:40,000 --> 00:41:41,000
还是会显示成 8.3

1701
00:41:41,000 --> 00:41:44,000
还是用一个波浪号来显示

1702
00:41:44,000 --> 00:41:46,000
一个波浪号加一个数字

1703
00:41:46,000 --> 00:41:47,000
你们要跟大家解释

1704
00:41:47,000 --> 00:41:48,000
什么叫 8.3 好吧

1705
00:41:48,000 --> 00:41:49,000
Anyone

1706
00:41:49,000 --> 00:41:51,000
其实我觉得要解释 8.3

1707
00:41:51,000 --> 00:41:52,000
先要解释什么是扩展名

1708
00:41:52,000 --> 00:41:53,000
因为其实 Mac 上

1709
00:41:53,000 --> 00:41:54,000
比如说怎么现在 Mac 上面

1710
00:41:54,000 --> 00:41:55,000
默认的情况下

1711
00:41:55,000 --> 00:41:56,000
还是不显示这个扩展名的

1712
00:41:56,000 --> 00:41:57,000
对不对

1713
00:41:57,000 --> 00:42:00,000
因为 Mac 其实即使没有扩展名

1714
00:42:00,000 --> 00:42:01,000
也可以也成立

1715
00:42:01,000 --> 00:42:02,000
就是在 Mac 上面

1716
00:42:02,000 --> 00:42:03,000
那是 Windows 不行

1717
00:42:03,000 --> 00:42:04,000
是这样的

1718
00:42:04,000 --> 00:42:05,000
是这么来的

1719
00:42:05,000 --> 00:42:07,000
扩展名这个东西

1720
00:42:07,000 --> 00:42:08,000
最早实际上是 70 年代的

1721
00:42:08,000 --> 00:42:09,000
一个发明

1722
00:42:09,000 --> 00:42:12,000
当时操作人的 CPM 应该叫

1723
00:42:12,000 --> 00:42:14,000
Ctrl 什么

1724
00:42:14,000 --> 00:42:15,000
DC 是 Ctrl

1725
00:42:15,000 --> 00:42:16,000
我只记得 C 是 Ctrl

1726
00:42:16,000 --> 00:42:17,000
CPM

1727
00:42:17,000 --> 00:42:18,000
就是 DOS

1728
00:42:18,000 --> 00:42:20,000
DOS 是从 CPM 抄过来了

1729
00:42:20,000 --> 00:42:21,000
相当于

1730
00:42:21,000 --> 00:42:22,000
然后 CPM 有扩展名这一项

1731
00:42:22,000 --> 00:42:24,000
因为 CPM 的创

1732
00:42:24,000 --> 00:42:26,000
就是创始人认为

1733
00:42:26,000 --> 00:42:27,000
在和文件相关的

1734
00:42:27,000 --> 00:42:29,000
所有的原数据里面

1735
00:42:29,000 --> 00:42:31,000
类型数据是最重要的

1736
00:42:31,000 --> 00:42:32,000
所以类型数据

1737
00:42:32,000 --> 00:42:33,000
应该是文件名的一部分

1738
00:42:33,000 --> 00:42:35,000
其实这里是一个哲学问题

1739
00:42:35,000 --> 00:42:36,000
就是说一个文件的扩展名

1740
00:42:36,000 --> 00:42:37,000
它其实是定义

1741
00:42:37,000 --> 00:42:38,000
这个文件是一个什么样的

1742
00:42:38,000 --> 00:42:39,000
种类

1743
00:42:39,000 --> 00:42:40,000
对不对

1744
00:42:40,000 --> 00:42:41,000
然后这个种类

1745
00:42:41,000 --> 00:42:42,000
这个信息是否是应该

1746
00:42:42,000 --> 00:42:44,000
体现在这个名字里面

1747
00:42:44,000 --> 00:42:44,000
还是说体现在

1748
00:42:44,000 --> 00:42:46,000
一个什么别的地方

1749
00:42:46,000 --> 00:42:47,000
比如说刚才

1750
00:42:47,000 --> 00:42:48,000
Eric 也提到

1751
00:42:48,000 --> 00:42:49,000
其实 Mac 里面

1752
00:42:49,000 --> 00:42:49,000
你不用扩展名

1753
00:42:49,000 --> 00:42:50,000
也还可以

1754
00:42:50,000 --> 00:42:50,000
对吧

1755
00:42:50,000 --> 00:42:52,000
它因为它有一些别的方法

1756
00:42:52,000 --> 00:42:52,000
可以判断

1757
00:42:52,000 --> 00:42:54,000
这个文件是一个

1758
00:42:54,000 --> 00:42:55,000
什么样的类型的文件

1759
00:42:55,000 --> 00:42:55,000
比如说我们

1760
00:42:55,000 --> 00:42:57,000
厂界那个方式

1761
00:42:57,000 --> 00:42:57,000
有一个什么

1762
00:42:57,000 --> 00:42:59,000
Magic Number

1763
00:42:59,000 --> 00:42:59,000
对吧

1764
00:42:59,000 --> 00:43:00,000
就是在文件开头

1765
00:43:00,000 --> 00:43:01,000
可能有几个字

1766
00:43:01,000 --> 00:43:02,000
Mac

1767
00:43:02,000 --> 00:43:04,000
我想 Mac 是怎么实现的

1768
00:43:04,000 --> 00:43:05,000
Mac 在

1769
00:43:05,000 --> 00:43:06,000
资源

1770
00:43:06,000 --> 00:43:07,000
它一个叫

1771
00:43:07,000 --> 00:43:08,000
中文叫什么

1772
00:43:08,000 --> 00:43:09,000
资源 X

1773
00:43:09,000 --> 00:43:09,000
它一个 Fork

1774
00:43:09,000 --> 00:43:12,000
就在很早以前

1775
00:43:12,000 --> 00:43:13,000
这个就更复杂

1776
00:43:13,000 --> 00:43:14,000
Fork 好像是经典

1777
00:43:14,000 --> 00:43:17,000
就是 Mac Classic 里面

1778
00:43:17,000 --> 00:43:17,000
那个概念

1779
00:43:17,000 --> 00:43:17,000
对

1780
00:43:17,000 --> 00:43:18,000
就 Classic

1781
00:43:18,000 --> 00:43:18,000
对

1782
00:43:18,000 --> 00:43:20,000
因为你 OS 10 后面

1783
00:43:20,000 --> 00:43:21,000
又不一样了

1784
00:43:21,000 --> 00:43:22,000
因为 OS 10 本质上

1785
00:43:22,000 --> 00:43:23,000
是个 UNIX

1786
00:43:23,000 --> 00:43:24,000
UNIX 的哲学就是

1787
00:43:24,000 --> 00:43:25,000
这个文件

1788
00:43:25,000 --> 00:43:26,000
是不是可执行文件

1789
00:43:26,000 --> 00:43:27,000
那我让它可执行

1790
00:43:27,000 --> 00:43:28,000
给它可执行的权限

1791
00:43:28,000 --> 00:43:29,000
它就是可执行文件了

1792
00:43:29,000 --> 00:43:31,000
That's it

1793
00:43:31,000 --> 00:43:33,000
然后 UNIX 实际上

1794
00:43:33,000 --> 00:43:34,000
是不把原数据

1795
00:43:34,000 --> 00:43:35,000
不把文件类型

1796
00:43:35,000 --> 00:43:35,000
是什么

1797
00:43:35,000 --> 00:43:36,000
这个原数据

1798
00:43:36,000 --> 00:43:37,000
存在任何地方的

1799
00:43:37,000 --> 00:43:38,000
就 UNIX

1800
00:43:38,000 --> 00:43:39,000
你们上面

1801
00:43:39,000 --> 00:43:40,000
专门有一个命令

1802
00:43:40,000 --> 00:43:40,000
叫 File

1803
00:43:40,000 --> 00:43:41,000
你用 File

1804
00:43:41,000 --> 00:43:43,000
它是一个启发式的探针

1805
00:43:43,000 --> 00:43:44,000
它会去看这个文件

1806
00:43:44,000 --> 00:43:44,000
看起来像什么

1807
00:43:44,000 --> 00:43:45,000
去猜

1808
00:43:45,000 --> 00:43:46,000
That's it

1809
00:43:46,000 --> 00:43:47,000
那就是怎么判断

1810
00:43:47,000 --> 00:43:48,000
一个文件像什么

1811
00:43:48,000 --> 00:43:49,000
就是它有很多方法

1812
00:43:49,000 --> 00:43:51,000
就是如果不看文件名的情况下

1813
00:43:51,000 --> 00:43:52,000
就是说你看

1814
00:43:52,000 --> 00:43:53,000
可以看文件头部

1815
00:43:53,000 --> 00:43:54,000
它通常一些

1816
00:43:54,000 --> 00:43:55,000
这种文件格式

1817
00:43:55,000 --> 00:43:56,000
它在头部都会有些

1818
00:43:56,000 --> 00:43:57,000
特殊的一个标记

1819
00:43:57,000 --> 00:43:58,000
或者一个什么结构

1820
00:43:58,000 --> 00:43:58,000
对吧

1821
00:43:58,000 --> 00:43:59,000
它会说这是一个图片

1822
00:43:59,000 --> 00:44:01,000
这是一个什么 word 文档

1823
00:44:01,000 --> 00:44:03,000
这是一个什么

1824
00:44:03,000 --> 00:44:05,000
MP 3 的一个音频

1825
00:44:05,000 --> 00:44:05,000
举个例子

1826
00:44:05,000 --> 00:44:06,000
是这样

1827
00:44:06,000 --> 00:44:08,000
后来还衍生

1828
00:44:08,000 --> 00:44:09,000
就因此而衍生出了一些

1829
00:44:09,000 --> 00:44:11,000
所谓 polyglot 文件

1830
00:44:11,000 --> 00:44:12,000
这个文件

1831
00:44:12,000 --> 00:44:14,000
同时是很多种东西

1832
00:44:14,000 --> 00:44:15,000
比如说它同时一张照片

1833
00:44:15,000 --> 00:44:16,000
然后同时

1834
00:44:16,000 --> 00:44:17,000
然后又是一个

1835
00:44:17,000 --> 00:44:18,000
RR 压缩文档

1836
00:44:18,000 --> 00:44:20,000
对

1837
00:44:20,000 --> 00:44:21,000
这种就是属于

1838
00:44:21,000 --> 00:44:23,000
专门制作出来的

1839
00:44:23,000 --> 00:44:23,000
这种

1840
00:44:23,000 --> 00:44:24,000
hack

1841
00:44:24,000 --> 00:44:27,000
但其实说回来

1842
00:44:27,000 --> 00:44:28,000
就是说

1843
00:44:28,000 --> 00:44:29,000
Windows 里面

1844
00:44:29,000 --> 00:44:30,000
采取了一个方案

1845
00:44:30,000 --> 00:44:30,000
就是说

1846
00:44:30,000 --> 00:44:32,000
Windows 上没有像

1847
00:44:32,000 --> 00:44:33,000
类似刚才你说

1848
00:44:33,000 --> 00:44:33,000
那个 file 这个命

1849
00:44:33,000 --> 00:44:34,000
它其实没有对应的东西

1850
00:44:34,000 --> 00:44:35,000
对吧

1851
00:44:35,000 --> 00:44:35,000
它就说

1852
00:44:35,000 --> 00:44:35,000
我怎么知道

1853
00:44:35,000 --> 00:44:36,000
这个文件是个什么

1854
00:44:36,000 --> 00:44:37,000
是个什么

1855
00:44:37,000 --> 00:44:38,000
东西

1856
00:44:38,000 --> 00:44:39,000
是个什么种类

1857
00:44:39,000 --> 00:44:40,000
你告诉我

1858
00:44:40,000 --> 00:44:42,000
有用户告诉他

1859
00:44:42,000 --> 00:44:42,000
对

1860
00:44:42,000 --> 00:44:43,000
你告诉我

1861
00:44:43,000 --> 00:44:44,000
你在这个名字

1862
00:44:44,000 --> 00:44:45,000
最后加个

1863
00:44:45,000 --> 00:44:46,000
你说点 JPG

1864
00:44:46,000 --> 00:44:47,000
那可能就是一个压缩的图片

1865
00:44:47,000 --> 00:44:48,000
对吧

1866
00:44:48,000 --> 00:44:49,000
你要是个点 MP 3

1867
00:44:49,000 --> 00:44:51,000
那可能就是一个音频文件

1868
00:44:51,000 --> 00:44:51,000
对吧

1869
00:44:51,000 --> 00:44:52,000
你要是点个 MP 4

1870
00:44:52,000 --> 00:44:53,000
那就是个视频

1871
00:44:53,000 --> 00:44:54,000
对不对

1872
00:44:54,000 --> 00:44:55,000
然后就

1873
00:44:55,000 --> 00:44:55,000
就如此了

1874
00:44:55,000 --> 00:44:58,000
所以搞了这么一套扩展名

1875
00:44:58,000 --> 00:44:58,000
这么一个概念

1876
00:44:58,000 --> 00:44:59,000
来描述这件事情

1877
00:44:59,000 --> 00:45:00,000
然后

1878
00:45:00,000 --> 00:45:02,000
DOS 我记得当时

1879
00:45:02,000 --> 00:45:02,000
8.3 是因为

1880
00:45:02,000 --> 00:45:03,000
它只能存

1881
00:45:03,000 --> 00:45:05,000
11 个字符宽

1882
00:45:05,000 --> 00:45:05,000
对吧

1883
00:45:05,000 --> 00:45:06,000
8 个名字

1884
00:45:06,000 --> 00:45:08,000
加一个点

1885
00:45:08,000 --> 00:45:08,000
再加

1886
00:45:08,000 --> 00:45:10,000
三个字母的扩展名

1887
00:45:10,000 --> 00:45:11,000
就齐活了

1888
00:45:11,000 --> 00:45:12,000
最多就这样

1889
00:45:12,000 --> 00:45:15,000
所以当时的文件名

1890
00:45:15,000 --> 00:45:17,000
最多只能是 8 个字符

1891
00:45:17,000 --> 00:45:18,000
然后扩展名

1892
00:45:18,000 --> 00:45:20,000
最多也就只有三个字符

1893
00:45:20,000 --> 00:45:21,000
就是 DOS 里面

1894
00:45:21,000 --> 00:45:23,000
它的限制非常严格

1895
00:45:23,000 --> 00:45:25,000
所以就简称 8.3

1896
00:45:25,000 --> 00:45:27,000
其实我当时

1897
00:45:27,000 --> 00:45:29,000
我一再想不起来

1898
00:45:29,000 --> 00:45:30,000
就是说最多三个

1899
00:45:30,000 --> 00:45:30,000
那其实当时

1900
00:45:30,000 --> 00:45:32,000
一个或者两个用得多吗

1901
00:45:32,000 --> 00:45:33,000
点 C

1902
00:45:33,000 --> 00:45:34,000
兄弟

1903
00:45:34,000 --> 00:45:35,000
对

1904
00:45:35,000 --> 00:45:36,000
点 H

1905
00:45:36,000 --> 00:45:40,000
你都不用投

1906
00:45:40,000 --> 00:45:43,000
明白

1907
00:45:43,000 --> 00:45:43,000
明白

1908
00:45:43,000 --> 00:45:46,000
所以现在就是讲

1909
00:45:46,000 --> 00:45:48,000
我们今天讲这个命名

1910
00:45:48,000 --> 00:45:49,000
那命名的话

1911
00:45:49,000 --> 00:45:50,000
首先是一个文件名的

1912
00:45:50,000 --> 00:45:51,000
程度问题

1913
00:45:51,000 --> 00:45:52,000
对吧

1914
00:45:52,000 --> 00:45:54,000
所以现在刚才说的

1915
00:45:54,000 --> 00:45:54,000
像 DOS

1916
00:45:54,000 --> 00:45:57,000
它的限制的是

1917
00:45:57,000 --> 00:45:58,000
只能有 8 个字符

1918
00:45:58,000 --> 00:45:59,000
然后后面

1919
00:45:59,000 --> 00:46:00,000
到 Windows 后面

1920
00:46:00,000 --> 00:46:01,000
最多是

1921
00:46:01,000 --> 00:46:03,000
就可以有 255 个字符

1922
00:46:03,000 --> 00:46:05,000
多长也可以

1923
00:46:05,000 --> 00:46:06,000
然后扩展名的话

1924
00:46:06,000 --> 00:46:08,000
好像像

1925
00:46:08,000 --> 00:46:09,000
后面 4 个字母

1926
00:46:09,000 --> 00:46:10,000
也可以的

1927
00:46:10,000 --> 00:46:10,000
对吧

1928
00:46:10,000 --> 00:46:11,000
反正 Unix 的话

1929
00:46:11,000 --> 00:46:12,000
是随便的

1930
00:46:12,000 --> 00:46:12,000
都无所谓的

1931
00:46:12,000 --> 00:46:14,000
有几个字母

1932
00:46:14,000 --> 00:46:15,000
都无所谓

1933
00:46:15,000 --> 00:46:16,000
对吧

1934
00:46:16,000 --> 00:46:17,000
Unix 实际上

1935
00:46:17,000 --> 00:46:19,000
也没有扩展名

1936
00:46:19,000 --> 00:46:19,000
这个概念

1937
00:46:19,000 --> 00:46:21,000
只不过后来

1938
00:46:21,000 --> 00:46:21,000
扩展名

1939
00:46:21,000 --> 00:46:25,000
这一套东西

1940
00:46:25,000 --> 00:46:26,000
归根结底

1941
00:46:26,000 --> 00:46:27,000
还是有意义的

1942
00:46:27,000 --> 00:46:28,000
因为

1943
00:46:28,000 --> 00:46:30,000
人不可能去查看

1944
00:46:30,000 --> 00:46:31,000
文件的额外的

1945
00:46:31,000 --> 00:46:32,000
Metadata

1946
00:46:32,000 --> 00:46:32,000
人只能

1947
00:46:32,000 --> 00:46:34,000
能看到的

1948
00:46:34,000 --> 00:46:34,000
基本上就是一个

1949
00:46:34,000 --> 00:46:36,000
文件名

1950
00:46:36,000 --> 00:46:36,000
所以文件名

1951
00:46:36,000 --> 00:46:36,000
作为

1952
00:46:36,000 --> 00:46:37,000
扩展名

1953
00:46:37,000 --> 00:46:38,000
作为它一套

1954
00:46:38,000 --> 00:46:39,000
还是有意义的

1955
00:46:39,000 --> 00:46:40,000
所以在后面

1956
00:46:40,000 --> 00:46:42,000
Unix 和 Mac 之类

1957
00:46:42,000 --> 00:46:43,000
也其实也都

1958
00:46:43,000 --> 00:46:45,000
怎么说

1959
00:46:45,000 --> 00:46:46,000
从善如流

1960
00:46:46,000 --> 00:46:46,000
随大流

1961
00:46:46,000 --> 00:46:48,000
把扩展名

1962
00:46:48,000 --> 00:46:50,000
当成了文件的

1963
00:46:50,000 --> 00:46:51,000
类型判断

1964
00:46:51,000 --> 00:46:52,000
机制的一部分

1965
00:46:52,000 --> 00:46:53,000
但是

1966
00:46:53,000 --> 00:46:54,000
归根结底

1967
00:46:54,000 --> 00:46:55,000
Linux 上面

1968
00:46:55,000 --> 00:46:56,000
实际上是没有

1969
00:46:56,000 --> 00:46:57,000
扩展名字概念的

1970
00:46:57,000 --> 00:46:57,000
就跟 Mac 一样

1971
00:46:57,000 --> 00:46:59,000
其实你们想不想

1972
00:46:59,000 --> 00:47:00,000
这可能是

1973
00:47:00,000 --> 00:47:01,000
这个叫什么来的

1974
00:47:01,000 --> 00:47:03,000
就是图形界面的

1975
00:47:03,000 --> 00:47:04,000
一个问题

1976
00:47:04,000 --> 00:47:05,000
还是怎么着

1977
00:47:05,000 --> 00:47:06,000
就是你在一个

1978
00:47:06,000 --> 00:47:08,000
纯命令行的界面下面

1979
00:47:08,000 --> 00:47:09,000
CLI

1980
00:47:09,000 --> 00:47:09,000
我们叫

1981
00:47:09,000 --> 00:47:10,000
Command Interface

1982
00:47:10,000 --> 00:47:11,000
交互的方式是

1983
00:47:11,000 --> 00:47:12,000
一定是一个

1984
00:47:12,000 --> 00:47:14,000
你叫什么

1985
00:47:14,000 --> 00:47:14,000
动兵结构

1986
00:47:14,000 --> 00:47:15,000
对吧

1987
00:47:15,000 --> 00:47:15,000
我记得说

1988
00:47:15,000 --> 00:47:16,000
一千千千个命令

1989
00:47:16,000 --> 00:47:17,000
然后图形什么样的

1990
00:47:17,000 --> 00:47:17,000
一个参数

1991
00:47:17,000 --> 00:47:18,000
就是那个参数

1992
00:47:18,000 --> 00:47:19,000
就是那个文件名

1993
00:47:19,000 --> 00:47:21,000
这个时候你已经知道了

1994
00:47:21,000 --> 00:47:22,000
你要用什么东西

1995
00:47:22,000 --> 00:47:23,000
去处理

1996
00:47:23,000 --> 00:47:24,000
后面那个兵语

1997
00:47:24,000 --> 00:47:26,000
那个文件

1998
00:47:26,000 --> 00:47:27,000
但其实你在

1999
00:47:27,000 --> 00:47:28,000
比如说 Windows 里面

2000
00:47:28,000 --> 00:47:29,000
你是要有一个

2001
00:47:29,000 --> 00:47:30,000
这么一个概念

2002
00:47:30,000 --> 00:47:31,000
就是比如你在

2003
00:47:31,000 --> 00:47:32,000
资源管理器里面

2004
00:47:32,000 --> 00:47:34,000
你双击一个图片

2005
00:47:34,000 --> 00:47:35,000
你的想法是把它打开

2006
00:47:35,000 --> 00:47:36,000
对吧

2007
00:47:36,000 --> 00:47:36,000
这个时候

2008
00:47:36,000 --> 00:47:37,000
你有个暗含的假设

2009
00:47:37,000 --> 00:47:38,000
是说

2010
00:47:38,000 --> 00:47:39,000
你用什么把它打开

2011
00:47:39,000 --> 00:47:40,000
这里存在一个

2012
00:47:40,000 --> 00:47:42,000
就是绑定的一个关系

2013
00:47:42,000 --> 00:47:42,000
对不对

2014
00:47:42,000 --> 00:47:43,000
它不是一个动兵

2015
00:47:43,000 --> 00:47:44,000
对

2016
00:47:44,000 --> 00:47:46,000
Windows 打开文件的机制

2017
00:47:46,000 --> 00:47:47,000
也是跟那个

2018
00:47:47,000 --> 00:47:48,000
扩展名相关的

2019
00:47:48,000 --> 00:47:50,000
它在注册表里面

2020
00:47:50,000 --> 00:47:51,000
把所有的扩展名

2021
00:47:51,000 --> 00:47:53,000
对应了一个打开工具

2022
00:47:53,000 --> 00:47:54,000
所以就很蠢

2023
00:47:54,000 --> 00:47:55,000
很死板

2024
00:47:55,000 --> 00:47:56,000
就这里面

2025
00:47:56,000 --> 00:47:57,000
就是一个哲学问题

2026
00:47:57,000 --> 00:47:58,000
是你先想到了

2027
00:47:58,000 --> 00:47:59,000
用什么工具

2028
00:47:59,000 --> 00:48:00,000
你先想到

2029
00:48:00,000 --> 00:48:01,000
用什么东西打开

2030
00:48:01,000 --> 00:48:02,000
然后你再去找那个文件

2031
00:48:02,000 --> 00:48:03,000
还是说

2032
00:48:03,000 --> 00:48:04,000
你先找到那个文件

2033
00:48:04,000 --> 00:48:04,000
然后你要

2034
00:48:04,000 --> 00:48:05,000
你要用这个

2035
00:48:05,000 --> 00:48:06,000
你要用

2036
00:48:06,000 --> 00:48:08,000
你要打开这个文件

2037
00:48:08,000 --> 00:48:08,000
然后再想

2038
00:48:08,000 --> 00:48:09,000
这个文件

2039
00:48:09,000 --> 00:48:10,000
是对应的

2040
00:48:10,000 --> 00:48:11,000
是一个什么工具

2041
00:48:11,000 --> 00:48:11,000
来打开

2042
00:48:11,000 --> 00:48:12,000
就这里面

2043
00:48:12,000 --> 00:48:12,000
我觉得

2044
00:48:12,000 --> 00:48:14,000
有一个逻辑的

2045
00:48:14,000 --> 00:48:15,000
前后的一个关系

2046
00:48:15,000 --> 00:48:15,000
对吧

2047
00:48:15,000 --> 00:48:18,000
而且像 Mac 的话

2048
00:48:18,000 --> 00:48:19,000
它没有扩展名

2049
00:48:19,000 --> 00:48:20,000
是因为它其实是

2050
00:48:20,000 --> 00:48:22,000
它是那个 GUI 图形

2051
00:48:22,000 --> 00:48:24,000
然后它把这些东西

2052
00:48:24,000 --> 00:48:26,000
都不用写在

2053
00:48:26,000 --> 00:48:28,000
就是不用当成扩展名

2054
00:48:28,000 --> 00:48:30,000
写在文件名里面

2055
00:48:30,000 --> 00:48:30,000
我就说

2056
00:48:30,000 --> 00:48:31,000
就老的那个 Mac

2057
00:48:31,000 --> 00:48:32,000
它们是

2058
00:48:32,000 --> 00:48:33,000
它用那个 Fork

2059
00:48:33,000 --> 00:48:34,000
就是那个 ResourceFork

2060
00:48:34,000 --> 00:48:35,000
资源差

2061
00:48:35,000 --> 00:48:37,000
它其实是写在文件里头的

2062
00:48:37,000 --> 00:48:38,000
这个概念

2063
00:48:38,000 --> 00:48:39,000
可能要

2064
00:48:39,000 --> 00:48:41,000
要给大家解释一下

2065
00:48:41,000 --> 00:48:41,000
这个东西

2066
00:48:41,000 --> 00:48:42,000
其实很

2067
00:48:42,000 --> 00:48:43,000
除非你对这个底层

2068
00:48:43,000 --> 00:48:44,000
非常了解

2069
00:48:44,000 --> 00:48:45,000
不然其实你

2070
00:48:45,000 --> 00:48:46,000
根本不会想到

2071
00:48:46,000 --> 00:48:47,000
这么一个结构

2072
00:48:47,000 --> 00:48:47,000
就是这个

2073
00:48:47,000 --> 00:48:48,000
这个 ResourceFork

2074
00:48:48,000 --> 00:48:49,000
到底是个啥

2075
00:48:49,000 --> 00:48:51,000
其实你这么想

2076
00:48:51,000 --> 00:48:52,000
你创建了一个

2077
00:48:52,000 --> 00:48:54,000
空白的一个文本文件

2078
00:48:54,000 --> 00:48:54,000
对吧

2079
00:48:54,000 --> 00:48:56,000
然后这个文本文件

2080
00:48:56,000 --> 00:48:57,000
在一个最普通

2081
00:48:57,000 --> 00:48:58,000
那个文件系统里面

2082
00:48:58,000 --> 00:48:58,000
它能记录啥

2083
00:48:58,000 --> 00:48:59,000
这个文件叫什么名字

2084
00:48:59,000 --> 00:49:00,000
对吧

2085
00:49:00,000 --> 00:49:01,000
有些原数据

2086
00:49:01,000 --> 00:49:02,000
什么时候创建的

2087
00:49:02,000 --> 00:49:03,000
有多大尺寸

2088
00:49:03,000 --> 00:49:04,000
然后就是文件的

2089
00:49:04,000 --> 00:49:05,000
这个所谓的内容了

2090
00:49:05,000 --> 00:49:06,000
假如空的话

2091
00:49:06,000 --> 00:49:07,000
就是一个零字节的

2092
00:49:07,000 --> 00:49:08,000
就是零长的一个内容

2093
00:49:08,000 --> 00:49:09,000
那这个时候

2094
00:49:09,000 --> 00:49:11,000
你会想说

2095
00:49:11,000 --> 00:49:12,000
那这个文件

2096
00:49:12,000 --> 00:49:12,000
是什么类型

2097
00:49:12,000 --> 00:49:13,000
这个信息

2098
00:49:13,000 --> 00:49:14,000
到底存在哪里的问题

2099
00:49:14,000 --> 00:49:14,000
对吧

2100
00:49:14,000 --> 00:49:16,000
刚才我们开始讲了

2101
00:49:16,000 --> 00:49:17,000
这个 DOS 和

2102
00:49:17,000 --> 00:49:18,000
这个 Windows 的方案

2103
00:49:18,000 --> 00:49:19,000
是说存在

2104
00:49:19,000 --> 00:49:20,000
这个文件的扩展名里面

2105
00:49:20,000 --> 00:49:20,000
对吧

2106
00:49:20,000 --> 00:49:21,000
就是最后那个点的

2107
00:49:21,000 --> 00:49:22,000
后面那个

2108
00:49:22,000 --> 00:49:23,000
就是文件的扩展名

2109
00:49:23,000 --> 00:49:23,000
那这个信息

2110
00:49:23,000 --> 00:49:24,000
就已经包含了

2111
00:49:24,000 --> 00:49:26,000
然后这个 MacOS

2112
00:49:26,000 --> 00:49:27,000
就是不是我们现在

2113
00:49:27,000 --> 00:49:28,000
就叫做 MacOS 10

2114
00:49:28,000 --> 00:49:29,000
这么一个版本

2115
00:49:29,000 --> 00:49:30,000
而是说比如说

2116
00:49:30,000 --> 00:49:32,000
MacOS 789

2117
00:49:32,000 --> 00:49:32,000
这个时候

2118
00:49:32,000 --> 00:49:34,000
它其实在文件系统里面

2119
00:49:34,000 --> 00:49:37,000
有一个专门存储

2120
00:49:37,000 --> 00:49:38,000
这种原信息的

2121
00:49:38,000 --> 00:49:39,000
原数据的地方

2122
00:49:39,000 --> 00:49:40,000
这个地方叫做

2123
00:49:40,000 --> 00:49:41,000
叫做这个资源差

2124
00:49:41,000 --> 00:49:42,000
ResourceFork

2125
00:49:42,000 --> 00:49:43,000
这个实现信息

2126
00:49:43,000 --> 00:49:44,000
也比较磨叽

2127
00:49:44,000 --> 00:49:45,000
就是它是在

2128
00:49:45,000 --> 00:49:46,000
独立于这个文件

2129
00:49:46,000 --> 00:49:47,000
本身之外的

2130
00:49:47,000 --> 00:49:47,000
一个地方

2131
00:49:47,000 --> 00:49:48,000
去存储这个信息的

2132
00:49:48,000 --> 00:49:49,000
有了这个东西之后

2133
00:49:49,000 --> 00:49:50,000
那你能够在

2134
00:49:50,000 --> 00:49:50,000
有没有这个扩展名

2135
00:49:50,000 --> 00:49:51,000
其实已经不重要了

2136
00:49:51,000 --> 00:49:51,000
对不对

2137
00:49:51,000 --> 00:49:53,000
因为这个文件的类型

2138
00:49:53,000 --> 00:49:54,000
是存在那个原数据

2139
00:49:54,000 --> 00:49:55,000
那个资源差里面的

2140
00:49:55,000 --> 00:49:56,000
它这样的对应

2141
00:49:56,000 --> 00:49:57,000
就比较灵活

2142
00:49:57,000 --> 00:49:58,000
对

2143
00:49:58,000 --> 00:49:59,000
但这样就是有一个代价

2144
00:49:59,000 --> 00:50:00,000
就是它其实

2145
00:50:00,000 --> 00:50:01,000
首先它跟别的系统的

2146
00:50:01,000 --> 00:50:02,000
兼容性就比较差

2147
00:50:02,000 --> 00:50:03,000
你把一个文件从

2148
00:50:03,000 --> 00:50:04,000
但那个时候

2149
00:50:04,000 --> 00:50:05,000
没有什么网络

2150
00:50:05,000 --> 00:50:06,000
可能这种情况

2151
00:50:06,000 --> 00:50:07,000
倒不是特别常出现

2152
00:50:07,000 --> 00:50:08,000
但你知道现在

2153
00:50:08,000 --> 00:50:09,000
比如说你要把这个文件

2154
00:50:09,000 --> 00:50:10,000
比如说从那个

2155
00:50:10,000 --> 00:50:11,000
经典版的 MacOS

2156
00:50:11,000 --> 00:50:12,000
发到一个

2157
00:50:12,000 --> 00:50:14,000
这个 Windows XP 上面

2158
00:50:14,000 --> 00:50:15,000
或者 Windows 9 上面去

2159
00:50:15,000 --> 00:50:16,000
这个时候那个资源差

2160
00:50:16,000 --> 00:50:18,000
是一个 MacOS 的实现细节

2161
00:50:18,000 --> 00:50:19,000
它在 Windows 上面

2162
00:50:19,000 --> 00:50:20,000
是没有的

2163
00:50:20,000 --> 00:50:21,000
这个时候你怎么办

2164
00:50:21,000 --> 00:50:22,000
所以经常会把

2165
00:50:22,000 --> 00:50:24,000
这个 Mac 的文件

2166
00:50:24,000 --> 00:50:25,000
烤到 Windows 上

2167
00:50:25,000 --> 00:50:26,000
会多出来一套东西

2168
00:50:26,000 --> 00:50:27,000
对吧

2169
00:50:27,000 --> 00:50:29,000
包括你现在用那个

2170
00:50:29,000 --> 00:50:30,000
我们可能下期节目讲

2171
00:50:30,000 --> 00:50:32,000
NAS 的时候

2172
00:50:32,000 --> 00:50:33,000
就是我们之前

2173
00:50:33,000 --> 00:50:34,000
不是有去讲过 NAS

2174
00:50:34,000 --> 00:50:35,000
但其实没有提到这个问题

2175
00:50:35,000 --> 00:50:36,000
比如说

2176
00:50:36,000 --> 00:50:37,000
因为现在基本上

2177
00:50:37,000 --> 00:50:37,000
所有 NAS 系统

2178
00:50:37,000 --> 00:50:39,000
都是以这个 Linux 系统

2179
00:50:39,000 --> 00:50:41,000
或者是 Windows 系统为主的

2180
00:50:41,000 --> 00:50:44,000
你一个 Mac 的客户端

2181
00:50:44,000 --> 00:50:45,000
去访问这个 NAS 的时候

2182
00:50:45,000 --> 00:50:47,000
那它的那个资源差

2183
00:50:47,000 --> 00:50:48,000
又变成什么了

2184
00:50:48,000 --> 00:50:48,000
对吧

2185
00:50:48,000 --> 00:50:50,000
就变成两个文件

2186
00:50:50,000 --> 00:50:50,000
一个文件

2187
00:50:50,000 --> 00:50:52,000
不止过两个文件

2188
00:50:52,000 --> 00:50:52,000
有一个文件

2189
00:50:52,000 --> 00:50:54,000
是描述它原数据信息的

2190
00:50:54,000 --> 00:50:55,000
然后那个文件

2191
00:50:55,000 --> 00:50:56,000
在其他系统上

2192
00:50:56,000 --> 00:50:56,000
是没有用的

2193
00:50:56,000 --> 00:50:58,000
就跟拉子一样的

2194
00:50:58,000 --> 00:50:58,000
只有 Mac 能用

2195
00:50:58,000 --> 00:51:00,000
所以就是

2196
00:51:00,000 --> 00:51:02,000
从别的那个

2197
00:51:02,000 --> 00:51:03,000
超大型的角度来看

2198
00:51:03,000 --> 00:51:04,000
这个 Mac 的用户

2199
00:51:04,000 --> 00:51:06,000
就是一个到处乱下垃圾的

2200
00:51:06,000 --> 00:51:06,000
这么一个人

2201
00:51:06,000 --> 00:51:07,000
对吧

2202
00:51:07,000 --> 00:51:08,000
我觉得两方

2203
00:51:08,000 --> 00:51:09,000
两方互相都看

2204
00:51:09,000 --> 00:51:10,000
对方不是也吧

2205
00:51:10,000 --> 00:51:11,000
Windows 不是会留下

2206
00:51:11,000 --> 00:51:12,000
那个什么 Sumnal

2207
00:51:12,000 --> 00:51:13,000
Mac 也会啊

2208
00:51:13,000 --> 00:51:14,000
有那个 DS

2209
00:51:14,000 --> 00:51:15,000
叫什么

2210
00:51:15,000 --> 00:51:15,000
DS Store 吧

2211
00:51:15,000 --> 00:51:16,000
对

2212
00:51:16,000 --> 00:51:16,000
那个也是一个

2213
00:51:16,000 --> 00:51:18,000
就是点 DS Store 开始

2214
00:51:18,000 --> 00:51:19,000
一个文件

2215
00:51:19,000 --> 00:51:20,000
会多一个出来

2216
00:51:20,000 --> 00:51:21,000
每个文件

2217
00:51:21,000 --> 00:51:21,000
都会有一个

2218
00:51:21,000 --> 00:51:22,000
非常烦人的

2219
00:51:22,000 --> 00:51:24,000
像 SUNA 一样的

2220
00:51:24,000 --> 00:51:25,000
很烦人

2221
00:51:25,000 --> 00:51:25,000
对

2222
00:51:25,000 --> 00:51:27,000
车车远了

2223
00:51:27,000 --> 00:51:29,000
就是这些都是考古了

2224
00:51:29,000 --> 00:51:30,000
对吧

2225
00:51:30,000 --> 00:51:30,000
其实包括这个

2226
00:51:30,000 --> 00:51:31,000
今年的 MacOS

2227
00:51:31,000 --> 00:51:32,000
我相信应该我们

2228
00:51:32,000 --> 00:51:33,000
你们有谁用过

2229
00:51:33,000 --> 00:51:35,000
今天版 MacOS 吗

2230
00:51:35,000 --> 00:51:35,000
我是没用过

2231
00:51:35,000 --> 00:51:36,000
我用过

2232
00:51:36,000 --> 00:51:36,000
我只在

2233
00:51:36,000 --> 00:51:38,000
我只在虚拟器

2234
00:51:38,000 --> 00:51:38,000
跑过

2235
00:51:38,000 --> 00:51:39,000
OK

2236
00:51:39,000 --> 00:51:41,000
然后这个

2237
00:51:41,000 --> 00:51:42,000
Windows

2238
00:51:42,000 --> 00:51:45,000
95 之前的版本

2239
00:51:45,000 --> 00:51:45,000
这个我们应该

2240
00:51:45,000 --> 00:51:46,000
都用过

2241
00:51:46,000 --> 00:51:47,000
我们都用过

2242
00:51:47,000 --> 00:51:47,000
对

2243
00:51:47,000 --> 00:51:49,000
我当年还用 WPS

2244
00:51:49,000 --> 00:51:50,000
排版的

2245
00:51:50,000 --> 00:51:52,000
WPS 是图形版

2246
00:51:52,000 --> 00:51:53,000
还是 DOS 版

2247
00:51:53,000 --> 00:51:54,000
DOS 版的

2248
00:51:54,000 --> 00:51:56,000
UC DOS 进去的

2249
00:51:56,000 --> 00:51:57,000
用智能 ABC

2250
00:51:57,000 --> 00:51:58,000
WPS

2251
00:51:58,000 --> 00:51:59,000
暴露了年龄

2252
00:51:59,000 --> 00:52:00,000
我们都是用过

2253
00:52:00,000 --> 00:52:01,000
那个时代软件

2254
00:52:01,000 --> 00:52:03,000
而且还不是

2255
00:52:03,000 --> 00:52:04,000
Wizig 的

2256
00:52:04,000 --> 00:52:05,000
都是要预览

2257
00:52:05,000 --> 00:52:06,000
预览再预览

2258
00:52:06,000 --> 00:52:06,000
等等

2259
00:52:06,000 --> 00:52:07,000
那个时代

2260
00:52:07,000 --> 00:52:08,000
除了 WPS

2261
00:52:08,000 --> 00:52:09,000
还有一个

2262
00:52:09,000 --> 00:52:11,000
CLI 界面下的

2263
00:52:11,000 --> 00:52:12,000
排版工具

2264
00:52:12,000 --> 00:52:14,000
CCDE 还是叫什么

2265
00:52:14,000 --> 00:52:14,000
对

2266
00:52:14,000 --> 00:52:15,000
对

2267
00:52:15,000 --> 00:52:16,000
CCDE 还是叫什么

2268
00:52:16,000 --> 00:52:17,000
四个字母

2269
00:52:17,000 --> 00:52:18,000
对

2270
00:52:18,000 --> 00:52:18,000
没错

2271
00:52:18,000 --> 00:52:18,000
是的

2272
00:52:18,000 --> 00:52:19,000
有的

2273
00:52:19,000 --> 00:52:21,000
但是我没有主要

2274
00:52:21,000 --> 00:52:22,000
我没用过那个

2275
00:52:22,000 --> 00:52:22,000
我知道

2276
00:52:22,000 --> 00:52:23,000
但是没用过

2277
00:52:23,000 --> 00:52:24,000
其实你

2278
00:52:24,000 --> 00:52:26,000
那个时候还是蛮高级的

2279
00:52:26,000 --> 00:52:26,000
那个时候

2280
00:52:26,000 --> 00:52:27,000
因为不能所见

2281
00:52:27,000 --> 00:52:28,000
记所得

2282
00:52:28,000 --> 00:52:29,000
就是纯字符

2283
00:52:29,000 --> 00:52:30,000
界面的情况下

2284
00:52:30,000 --> 00:52:31,000
你其实是在写

2285
00:52:31,000 --> 00:52:31,000
Markdown

2286
00:52:31,000 --> 00:52:32,000
差不多这种感觉

2287
00:52:32,000 --> 00:52:32,000
对不对

2288
00:52:32,000 --> 00:52:33,000
是的

2289
00:52:33,000 --> 00:52:33,000
然后我们

2290
00:52:33,000 --> 00:52:34,000
做个花边

2291
00:52:34,000 --> 00:52:35,000
都要脑补的

2292
00:52:35,000 --> 00:52:36,000
对

2293
00:52:36,000 --> 00:52:37,000
我查到了

2294
00:52:37,000 --> 00:52:38,000
CCDE 是一款

2295
00:52:38,000 --> 00:52:39,000
中文字表处理软件

2296
00:52:39,000 --> 00:52:41,000
问是 1988 年

2297
00:52:41,000 --> 00:52:42,000
由原北京

2298
00:52:42,000 --> 00:52:45,000
钱维天电子技术研究所开发

2299
00:52:45,000 --> 00:52:46,000
主要开发者是朱崇军

2300
00:52:46,000 --> 00:52:48,000
软件在 DOS 时代

2301
00:52:48,000 --> 00:52:49,000
曾经是中国最流行的文字处理

2302
00:52:49,000 --> 00:52:51,000
电子表格软件之一

2303
00:52:51,000 --> 00:52:51,000
1998 年之后

2304
00:52:51,000 --> 00:52:52,000
出现了

2305
00:52:52,000 --> 00:52:54,000
甚至出现了基于 Windows 版本

2306
00:52:54,000 --> 00:52:56,000
连续多年

2307
00:52:56,000 --> 00:52:57,000
是中国最畅销的软件之一

2308
00:52:57,000 --> 00:53:00,000
是全国计算机等级考试

2309
00:53:00,000 --> 00:53:01,000
以及国内不少计算机

2310
00:53:01,000 --> 00:53:02,000
教育培训的指定内容

2311
00:53:02,000 --> 00:53:03,000
我的天哪

2312
00:53:03,000 --> 00:53:04,000
你们想想

2313
00:53:04,000 --> 00:53:06,000
我用那个打印过

2314
00:53:06,000 --> 00:53:08,000
连那个真式打印机

2315
00:53:08,000 --> 00:53:09,000
打过东西

2316
00:53:09,000 --> 00:53:10,000
就打过文档

2317
00:53:10,000 --> 00:53:11,000
确实还用过这个东西

2318
00:53:11,000 --> 00:53:13,000
非常上股的感觉

2319
00:53:13,000 --> 00:53:15,000
后来 WPS

2320
00:53:15,000 --> 00:53:16,000
这里面写了

2321
00:53:16,000 --> 00:53:17,000
老对手 WPS

2322
00:53:17,000 --> 00:53:19,000
借助中国政府采购计划

2323
00:53:19,000 --> 00:53:20,000
会恢复的生机

2324
00:53:20,000 --> 00:53:22,000
但 CCED 市场就萎缩了

2325
00:53:22,000 --> 00:53:22,000
等等

2326
00:53:22,000 --> 00:53:24,000
2010 年 2 月份

2327
00:53:24,000 --> 00:53:26,000
CCED 2000 版发行

2328
00:53:26,000 --> 00:53:28,000
天哪

2329
00:53:28,000 --> 00:53:29,000
Oh my god

2330
00:53:29,000 --> 00:53:30,000
我要去收一套

2331
00:53:30,000 --> 00:53:31,000
真正

2332
00:53:31,000 --> 00:53:33,000
要怀

2333
00:53:33,000 --> 00:53:35,000
要看那个怀笑旧的

2334
00:53:35,000 --> 00:53:35,000
至少

2335
00:53:35,000 --> 00:53:36,000
等一下

2336
00:53:36,000 --> 00:53:37,000
怎么扯到那里去

2337
00:53:37,000 --> 00:53:38,000
说回来

2338
00:53:38,000 --> 00:53:39,000
说回来

2339
00:53:39,000 --> 00:53:41,000
就其实这几个

2340
00:53:41,000 --> 00:53:43,000
我们刚才提的那几个

2341
00:53:43,000 --> 00:53:44,000
古早的操作系统线

2342
00:53:44,000 --> 00:53:46,000
其实基本上都没有了

2343
00:53:46,000 --> 00:53:48,000
我们现在目前主流用的

2344
00:53:48,000 --> 00:53:49,000
还是这个 Windows 的

2345
00:53:49,000 --> 00:53:51,000
应该是 Windows 10

2346
00:53:51,000 --> 00:53:51,000
对吧

2347
00:53:51,000 --> 00:53:54,000
或者是至少是 8 以后的吧

2348
00:53:54,000 --> 00:53:55,000
8 和 10 这种

2349
00:53:55,000 --> 00:53:58,000
和这个 Linux 桌面

2350
00:53:58,000 --> 00:53:58,000
现在还有人用吗

2351
00:53:58,000 --> 00:53:59,000
其实还比较少

2352
00:53:59,000 --> 00:54:00,000
所以这个先不算

2353
00:54:00,000 --> 00:54:03,000
然后就是这个 Mac 了

2354
00:54:03,000 --> 00:54:04,000
MacOS 10 应该是准确的

2355
00:54:04,000 --> 00:54:06,000
现在叫 MacOS 了

2356
00:54:06,000 --> 00:54:08,000
所以这两个系统

2357
00:54:08,000 --> 00:54:08,000
我们其实

2358
00:54:08,000 --> 00:54:10,000
它给的我们限制

2359
00:54:10,000 --> 00:54:11,000
其实就没有那么多了

2360
00:54:11,000 --> 00:54:12,000
其实你可以是

2361
00:54:12,000 --> 00:54:13,000
我记得文件名

2362
00:54:13,000 --> 00:54:15,000
可以起到多少来的

2363
00:54:15,000 --> 00:54:16,000
长度啊

2364
00:54:16,000 --> 00:54:16,000
你说

2365
00:54:16,000 --> 00:54:17,000
对

2366
00:54:17,000 --> 00:54:18,000
长度是可以很长的了

2367
00:54:18,000 --> 00:54:18,000
已经

2368
00:54:18,000 --> 00:54:19,000
但扩展名这个事情

2369
00:54:19,000 --> 00:54:20,000
在各个系统上面

2370
00:54:20,000 --> 00:54:21,000
我现在都基本上都保证下了

2371
00:54:21,000 --> 00:54:23,000
不管是在 Linux 上面

2372
00:54:23,000 --> 00:54:25,000
还是在 MacOS 上面

2373
00:54:25,000 --> 00:54:26,000
还是在现在 Windows 上面

2374
00:54:26,000 --> 00:54:28,000
就基本上扩展名这个事情

2375
00:54:28,000 --> 00:54:29,000
都已经成为一个

2376
00:54:29,000 --> 00:54:30,000
约定俗成的东西了

2377
00:54:30,000 --> 00:54:31,000
但只是说

2378
00:54:31,000 --> 00:54:32,000
就刚才说那个区域

2379
00:54:32,000 --> 00:54:33,000
就是它默认

2380
00:54:33,000 --> 00:54:35,000
是在图形界面下

2381
00:54:35,000 --> 00:54:36,000
它是展示

2382
00:54:36,000 --> 00:54:37,000
还是不展示扩展名的问题

2383
00:54:37,000 --> 00:54:38,000
应该我记得 Windows

2384
00:54:38,000 --> 00:54:39,000
目前默认

2385
00:54:39,000 --> 00:54:40,000
应该是不展示的

2386
00:54:40,000 --> 00:54:43,000
Mac 也是默认不展示的

2387
00:54:43,000 --> 00:54:45,000
然后 Linux 的桌面

2388
00:54:45,000 --> 00:54:45,000
我就不知道了

2389
00:54:45,000 --> 00:54:46,000
因为太多了

2390
00:54:46,000 --> 00:54:48,000
然后也不常用

2391
00:54:48,000 --> 00:54:49,000
所以就这两个都是

2392
00:54:49,000 --> 00:54:50,000
默认不展示

2393
00:54:50,000 --> 00:54:50,000
就变得很尴尬

2394
00:54:50,000 --> 00:54:51,000
对不对

2395
00:54:51,000 --> 00:54:53,000
本来这个东西是为了说

2396
00:54:53,000 --> 00:54:54,000
刚才吴涛也讲了

2397
00:54:54,000 --> 00:54:56,000
是为了让用户一眼

2398
00:54:56,000 --> 00:54:57,000
能看出这个文件

2399
00:54:57,000 --> 00:54:58,000
是个什么类型的东西

2400
00:54:58,000 --> 00:54:58,000
对吧

2401
00:54:58,000 --> 00:55:02,000
但其实因为有了图标

2402
00:55:02,000 --> 00:55:03,000
就是 File Icon

2403
00:55:03,000 --> 00:55:04,000
就是文件类型的图标

2404
00:55:04,000 --> 00:55:05,000
和它

2405
00:55:05,000 --> 00:55:07,000
因为如果你按那个叫什么

2406
00:55:07,000 --> 00:55:08,000
多列排布的

2407
00:55:08,000 --> 00:55:08,000
其实不知道多列

2408
00:55:08,000 --> 00:55:09,000
就是那个

2409
00:55:09,000 --> 00:55:10,000
按列排布

2410
00:55:10,000 --> 00:55:10,000
按列

2411
00:55:10,000 --> 00:55:11,000
按列排布

2412
00:55:11,000 --> 00:55:12,000
它有可能多个

2413
00:55:12,000 --> 00:55:13,000
它是应该是表格式

2414
00:55:13,000 --> 00:55:14,000
表格式的

2415
00:55:14,000 --> 00:55:15,000
它有一栏

2416
00:55:15,000 --> 00:55:15,000
它本来就会显示

2417
00:55:15,000 --> 00:55:16,000
这个文件是什么类型

2418
00:55:16,000 --> 00:55:19,000
所以就有了

2419
00:55:19,000 --> 00:55:20,000
这两个

2420
00:55:20,000 --> 00:55:21,000
大概一个是文件图标

2421
00:55:21,000 --> 00:55:22,000
一个是文件类型

2422
00:55:22,000 --> 00:55:24,000
单独有一列显示的情况下

2423
00:55:24,000 --> 00:55:26,000
这个文件名的扩展名

2424
00:55:26,000 --> 00:55:27,000
其实又变得不重要了

2425
00:55:27,000 --> 00:55:27,000
对不对

2426
00:55:27,000 --> 00:55:29,000
那其实当初就不要搞扩展名

2427
00:55:29,000 --> 00:55:29,000
对

2428
00:55:29,000 --> 00:55:30,000
就好像 Windows

2429
00:55:30,000 --> 00:55:33,000
后来就默认隐藏扩展名

2430
00:55:33,000 --> 00:55:33,000
对吧

2431
00:55:33,000 --> 00:55:34,000
刚装好

2432
00:55:34,000 --> 00:55:34,000
对

2433
00:55:34,000 --> 00:55:36,000
默认是会隐藏扩展名

2434
00:55:36,000 --> 00:55:38,000
从 XP 开始就默认隐藏了

2435
00:55:38,000 --> 00:55:38,000
应该是

2436
00:55:38,000 --> 00:55:39,000
之后还是 Windows 7

2437
00:55:39,000 --> 00:55:40,000
98 开始

2438
00:55:40,000 --> 00:55:42,000
我就觉得扩展名

2439
00:55:42,000 --> 00:55:43,000
是一个很蠢的一个办法

2440
00:55:43,000 --> 00:55:45,000
而且它特别死板

2441
00:55:45,000 --> 00:55:45,000
就刚才说

2442
00:55:45,000 --> 00:55:47,000
它和应用程式化

2443
00:55:47,000 --> 00:55:48,000
只能一对一

2444
00:55:48,000 --> 00:55:51,000
像 Mac 系统

2445
00:55:51,000 --> 00:55:52,000
它是不用这个的

2446
00:55:52,000 --> 00:55:52,000
它甚至

2447
00:55:52,000 --> 00:55:54,000
因为它通过图标来体现

2448
00:55:54,000 --> 00:55:56,000
甚至它那个

2449
00:55:56,000 --> 00:55:57,000
它那个资源 Fog 的话

2450
00:55:57,000 --> 00:55:59,000
它因为有更详细的定义

2451
00:55:59,000 --> 00:56:00,000
它还可以

2452
00:56:00,000 --> 00:56:01,000
同样

2453
00:56:01,000 --> 00:56:02,000
比如说是

2454
00:56:02,000 --> 00:56:03,000
Illustrator 的

2455
00:56:03,000 --> 00:56:04,000
AI 的一个文件

2456
00:56:04,000 --> 00:56:05,000
它那个图标

2457
00:56:05,000 --> 00:56:06,000
可以体现出

2458
00:56:06,000 --> 00:56:08,000
AI 的版本的不同

2459
00:56:08,000 --> 00:56:09,000
就是它

2460
00:56:09,000 --> 00:56:11,000
它可以体现在图标上面

2461
00:56:11,000 --> 00:56:12,000
就同样都是点 AI

2462
00:56:12,000 --> 00:56:14,000
但是有个是显示的 AI

2463
00:56:14,000 --> 00:56:14,000
比如说是 5

2464
00:56:14,000 --> 00:56:16,000
一个显示 AI 8 这种

2465
00:56:16,000 --> 00:56:16,000
对

2466
00:56:16,000 --> 00:56:16,000
没错

2467
00:56:16,000 --> 00:56:19,000
因为它 Fog 可以分叉

2468
00:56:19,000 --> 00:56:22,000
可以加好多内容进去的

2469
00:56:22,000 --> 00:56:23,000
然后这个东西

2470
00:56:23,000 --> 00:56:24,000
只要体现在图标上

2471
00:56:24,000 --> 00:56:25,000
就是一样

2472
00:56:25,000 --> 00:56:27,000
然后最后给用户的信息

2473
00:56:27,000 --> 00:56:27,000
是一样的

2474
00:56:27,000 --> 00:56:28,000
对于用户来讲

2475
00:56:28,000 --> 00:56:30,000
这的确就是一个 AI 的

2476
00:56:30,000 --> 00:56:32,000
这个版本的一个文件

2477
00:56:32,000 --> 00:56:33,000
它达到了个效果

2478
00:56:33,000 --> 00:56:34,000
并不一定要用

2479
00:56:34,000 --> 00:56:35,000
比如说这个三个字母

2480
00:56:35,000 --> 00:56:37,000
还得让用户去

2481
00:56:37,000 --> 00:56:38,000
得记这个三个字母

2482
00:56:38,000 --> 00:56:39,000
是还对应什么东西

2483
00:56:39,000 --> 00:56:40,000
所以它其实

2484
00:56:40,000 --> 00:56:41,000
如果这么来看

2485
00:56:41,000 --> 00:56:43,000
它文件扩展名

2486
00:56:43,000 --> 00:56:44,000
这个事情

2487
00:56:44,000 --> 00:56:45,000
它其实是字符界面

2488
00:56:45,000 --> 00:56:46,000
向图标界面过渡

2489
00:56:46,000 --> 00:56:48,000
这个时期的一个

2490
00:56:48,000 --> 00:56:48,000
一个副产物

2491
00:56:48,000 --> 00:56:49,000
对吧

2492
00:56:49,000 --> 00:56:51,000
因为在那个字符界面下面

2493
00:56:51,000 --> 00:56:53,000
你是没有图标来告诉你

2494
00:56:53,000 --> 00:56:55,000
和这个文件是什么类型

2495
00:56:55,000 --> 00:56:56,000
也没有这个多列的

2496
00:56:56,000 --> 00:56:58,000
这种就是就是附属信息

2497
00:56:58,000 --> 00:56:58,000
的展示

2498
00:56:58,000 --> 00:57:00,000
因为那个字符界面

2499
00:57:00,000 --> 00:57:00,000
一般的那个比较窄

2500
00:57:00,000 --> 00:57:02,000
就那个栏比较窄

2501
00:57:02,000 --> 00:57:03,000
所以这种情况下

2502
00:57:03,000 --> 00:57:05,000
在这个过渡时期

2503
00:57:05,000 --> 00:57:07,000
把这个文件扩展名

2504
00:57:07,000 --> 00:57:08,000
这个概念给保留下了

2505
00:57:08,000 --> 00:57:09,000
但其实到现在发现

2506
00:57:09,000 --> 00:57:11,000
其实已经完全没有作用了

2507
00:57:11,000 --> 00:57:11,000
对不对

2508
00:57:11,000 --> 00:57:12,000
就刚才是反效果

2509
00:57:12,000 --> 00:57:14,000
Mac 他之所以要用这个扩展名

2510
00:57:14,000 --> 00:57:16,000
就是完全屈服于

2511
00:57:16,000 --> 00:57:17,000
这个网络时代信息

2512
00:57:17,000 --> 00:57:19,000
这个文件交换的时候

2513
00:57:19,000 --> 00:57:21,000
必须要屈服于

2514
00:57:21,000 --> 00:57:23,000
这个 Windows 的这个蠢的办法

2515
00:57:23,000 --> 00:57:24,000
比那个更强势一些

2516
00:57:24,000 --> 00:57:25,000
有的人更多

2517
00:57:25,000 --> 00:57:27,000
所以这个就很

2518
00:57:27,000 --> 00:57:29,000
就是一个典型的

2519
00:57:29,000 --> 00:57:30,000
就是像低看起的

2520
00:57:30,000 --> 00:57:31,000
一个典型的案例

2521
00:57:31,000 --> 00:57:33,000
就我们很多东西

2522
00:57:33,000 --> 00:57:33,000
就是好的技术

2523
00:57:33,000 --> 00:57:35,000
并没有得到发现

2524
00:57:35,000 --> 00:57:36,000
大家都是用一个

2525
00:57:36,000 --> 00:57:37,000
很蠢的技术

2526
00:57:37,000 --> 00:57:38,000
然后再流行起来

2527
00:57:38,000 --> 00:57:38,000
对

2528
00:57:38,000 --> 00:57:40,000
刚才还说到就是说

2529
00:57:40,000 --> 00:57:41,000
因为现在这个图形界面

2530
00:57:41,000 --> 00:57:42,000
都是默认隐藏

2531
00:57:42,000 --> 00:57:43,000
这个文件扩展名的

2532
00:57:43,000 --> 00:57:46,000
他其实有一个比较重要的点

2533
00:57:46,000 --> 00:57:47,000
就是说

2534
00:57:47,000 --> 00:57:50,000
比如说你在 Windows 里面

2535
00:57:50,000 --> 00:57:51,000
还是 Mac 里面

2536
00:57:51,000 --> 00:57:51,000
默认情况下

2537
00:57:51,000 --> 00:57:53,000
你要改一个文件的名字

2538
00:57:53,000 --> 00:57:53,000
你怎么改

2539
00:57:53,000 --> 00:57:55,000
你就是选择那个文件

2540
00:57:55,000 --> 00:57:56,000
要不你右键点击改名

2541
00:57:56,000 --> 00:57:57,000
或者是你就像我们这种

2542
00:57:57,000 --> 00:58:00,000
键盘比较数六的人

2543
00:58:00,000 --> 00:58:01,000
你就直接按回车

2544
00:58:01,000 --> 00:58:02,000
他就可以改名了

2545
00:58:02,000 --> 00:58:02,000
对不对

2546
00:58:02,000 --> 00:58:04,000
然后这个时候

2547
00:58:04,000 --> 00:58:05,000
因为它不显示

2548
00:58:05,000 --> 00:58:07,000
这个文件的扩展名

2549
00:58:07,000 --> 00:58:09,000
你默认改就是所谓的文件名

2550
00:58:09,000 --> 00:58:11,000
就是狭义的文件名

2551
00:58:11,000 --> 00:58:12,000
就是不含扩展那部分的

2552
00:58:12,000 --> 00:58:13,000
前缀那部分

2553
00:58:13,000 --> 00:58:14,000
但其实如果说

2554
00:58:14,000 --> 00:58:16,000
你像我们都喜欢

2555
00:58:16,000 --> 00:58:17,000
比如说我至少是这样子

2556
00:58:17,000 --> 00:58:18,000
我不知道你们能默认说是怎么

2557
00:58:18,000 --> 00:58:20,000
我一定会把那个文件

2558
00:58:20,000 --> 00:58:21,000
这个扩展名展示出来

2559
00:58:21,000 --> 00:58:22,000
我不知道为什么保留这个习惯

2560
00:58:22,000 --> 00:58:23,000
但是就是看起来

2561
00:58:23,000 --> 00:58:24,000
因为我可能

2562
00:58:24,000 --> 00:58:25,000
有可能是因为我要

2563
00:58:25,000 --> 00:58:27,000
经常在这个

2564
00:58:27,000 --> 00:58:29,000
字符界面和

2565
00:58:29,000 --> 00:58:30,000
这个图形界面

2566
00:58:30,000 --> 00:58:31,000
间切换嘛

2567
00:58:31,000 --> 00:58:33,000
所以还是有这个需求

2568
00:58:33,000 --> 00:58:34,000
看到那个文件

2569
00:58:34,000 --> 00:58:35,000
扩展名是什么的

2570
00:58:35,000 --> 00:58:36,000
那这种情况下呢

2571
00:58:36,000 --> 00:58:38,000
你如果要改名

2572
00:58:38,000 --> 00:58:40,000
它其实也有很多小技巧的

2573
00:58:40,000 --> 00:58:41,000
比如说我现在试一下

2574
00:58:41,000 --> 00:58:43,000
给你们看好

2575
00:58:43,000 --> 00:58:45,000
我记得应该是这样子

2576
00:58:45,000 --> 00:58:46,000
比如说我现在打开一个 Mac

2577
00:58:46,000 --> 00:58:47,000
我要改一个文件名

2578
00:58:47,000 --> 00:58:49,000
然后这个时候我是显示的一个

2579
00:58:49,000 --> 00:58:51,000
是显示带扩展名的文件名

2580
00:58:51,000 --> 00:58:53,000
我要点我按回车

2581
00:58:53,000 --> 00:58:56,000
它默认会把文件名的部分给我选中

2582
00:58:56,000 --> 00:58:58,000
但是扩展名是保留是点

2583
00:58:58,000 --> 00:59:00,000
扩展名和那个点的部分是不动的

2584
00:59:00,000 --> 00:59:01,000
什么意思呢

2585
00:59:01,000 --> 00:59:06,000
就是说它不想让用户错误的更改掉这个扩展名

2586
00:59:06,000 --> 00:59:07,000
对把文件类型手感

2587
00:59:07,000 --> 00:59:08,000
对对对

2588
00:59:08,000 --> 00:59:10,000
因为其实虽然说我们刚才讲

2589
00:59:10,000 --> 00:59:11,000
虽然说这个文件类型不重要

2590
00:59:11,000 --> 00:59:15,000
但是如果说你用户明确的说

2591
00:59:15,000 --> 00:59:17,000
我要把这个文件改成那个类型

2592
00:59:17,000 --> 00:59:18,000
比如说很简单一个道理

2593
00:59:18,000 --> 00:59:20,000
你现在去网站上下载一张图片回来

2594
00:59:20,000 --> 00:59:21,000
还有可能他在那个

2595
00:59:21,000 --> 00:59:24,000
因为现在很多那个网站的那个图片

2596
00:59:24,000 --> 00:59:25,000
他本来就没有想给你下载

2597
00:59:25,000 --> 00:59:25,000
对吧

2598
00:59:25,000 --> 00:59:27,000
他的那个文件秘密也不是按照这个

2599
00:59:27,000 --> 00:59:29,000
什么有扩展名的方式来弄

2600
00:59:29,000 --> 00:59:31,000
你就下载就是一个普通空白的文件

2601
00:59:31,000 --> 00:59:31,000
对吧

2602
00:59:31,000 --> 00:59:32,000
但这个时候

2603
00:59:32,000 --> 00:59:35,000
因为那个是一个外部系统来的一个文件

2604
00:59:35,000 --> 00:59:38,000
我的这个母系统又不知道这个文件是个什么东西

2605
00:59:38,000 --> 00:59:40,000
他就会显示一个叫做什么

2606
00:59:40,000 --> 00:59:42,000
一个 generic file

2607
00:59:42,000 --> 00:59:44,000
一个通用的一个文件放在那里

2608
00:59:44,000 --> 00:59:45,000
不知道是它是个啥

2609
00:59:45,000 --> 00:59:46,000
不知道是个图片

2610
00:59:46,000 --> 00:59:47,000
也不知道是个视频

2611
00:59:47,000 --> 00:59:48,000
也不知道是个音乐还是什么东西

2612
00:59:48,000 --> 00:59:48,000
对不对

2613
00:59:48,000 --> 00:59:49,000
这个时候我就说

2614
00:59:49,000 --> 00:59:51,000
我要强行给他加一个扩展名

2615
00:59:51,000 --> 00:59:53,000
告诉我这个系统说

2616
00:59:53,000 --> 00:59:55,000
你把它当做一个图片

2617
00:59:55,000 --> 00:59:58,000
或者你把它当做一个音频

2618
00:59:58,000 --> 00:59:58,000
对吧

2619
00:59:58,000 --> 01:00:00,000
然后你在做对应的事情

2620
01:00:00,000 --> 01:00:01,000
这个时候我就不知道

2621
01:00:01,000 --> 01:00:03,000
这个什么时候能启动

2622
01:00:03,000 --> 01:00:05,000
那个类似于这个 file 这个机制

2623
01:00:05,000 --> 01:00:06,000
去探测这个文件

2624
01:00:06,000 --> 01:00:07,000
是个什么样的类型

2625
01:00:07,000 --> 01:00:07,000
对

2626
01:00:07,000 --> 01:00:09,000
这里面其实还是有很多讲究的

2627
01:00:09,000 --> 01:00:10,000
所以呢

2628
01:00:10,000 --> 01:00:12,000
从 DOS Windows 转过去

2629
01:00:12,000 --> 01:00:13,000
在用 Mac 的时候

2630
01:00:13,000 --> 01:00:14,000
在 Mac 当年

2631
01:00:14,000 --> 01:00:16,000
就因为它无所谓扩展名

2632
01:00:16,000 --> 01:00:17,000
扩展名可以随便改

2633
01:00:17,000 --> 01:00:20,000
然后这个对于我们

2634
01:00:20,000 --> 01:00:21,000
从 DOS 转过去

2635
01:00:21,000 --> 01:00:22,000
就觉得哇

2636
01:00:22,000 --> 01:00:22,000
这个都能改

2637
01:00:22,000 --> 01:00:23,000
太恐怕了

2638
01:00:23,000 --> 01:00:24,000
你说这

2639
01:00:24,000 --> 01:00:24,000
我想到一个问题

2640
01:00:24,000 --> 01:00:25,000
就是 Mac 上面

2641
01:00:25,000 --> 01:00:27,000
有时候会出现

2642
01:00:27,000 --> 01:00:28,000
比如说

2643
01:00:28,000 --> 01:00:29,000
一个文件

2644
01:00:29,000 --> 01:00:30,000
它没有扩展名

2645
01:00:30,000 --> 01:00:32,000
然后 Mac 会自动去

2646
01:00:32,000 --> 01:00:33,000
试图去猜这个文件

2647
01:00:33,000 --> 01:00:34,000
是什么

2648
01:00:34,000 --> 01:00:35,000
就是尤其是在

2649
01:00:35,000 --> 01:00:36,000
你按下空格的时候

2650
01:00:36,000 --> 01:00:37,000
然后这就导致了

2651
01:00:37,000 --> 01:00:38,000
很多人在

2652
01:00:38,000 --> 01:00:40,000
尤其是

2653
01:00:40,000 --> 01:00:41,000
就是对电脑系统

2654
01:00:41,000 --> 01:00:43,000
不是那么在行的人

2655
01:00:43,000 --> 01:00:45,000
会经常

2656
01:00:45,000 --> 01:00:47,000
我觉得我遇到这个问题

2657
01:00:47,000 --> 01:00:48,000
就是会有人

2658
01:00:48,000 --> 01:00:48,000
给你很多

2659
01:00:48,000 --> 01:00:49,000
没有扩展名的文件

2660
01:00:49,000 --> 01:00:51,000
在它的电脑上

2661
01:00:51,000 --> 01:00:52,000
显示一切正常了

2662
01:00:52,000 --> 01:00:53,000
但到这儿就不行了

2663
01:00:53,000 --> 01:00:53,000
因为没有扩展名

2664
01:00:53,000 --> 01:00:54,000
对

2665
01:00:54,000 --> 01:00:55,000
这个时候其实发现

2666
01:00:55,000 --> 01:00:56,000
如果一旦

2667
01:00:56,000 --> 01:00:57,000
一旦涉及到

2668
01:00:57,000 --> 01:00:58,000
这个文件的交换

2669
01:00:58,000 --> 01:01:00,000
这个有个扩展名

2670
01:01:00,000 --> 01:01:01,000
明确的规定

2671
01:01:01,000 --> 01:01:01,000
这个文件

2672
01:01:01,000 --> 01:01:03,000
是什么样的

2673
01:01:03,000 --> 01:01:04,000
这个类型

2674
01:01:04,000 --> 01:01:05,000
然后至少缩小

2675
01:01:05,000 --> 01:01:05,000
一个范围

2676
01:01:05,000 --> 01:01:07,000
然后我们再去处理

2677
01:01:07,000 --> 01:01:08,000
还是会容易很多的

2678
01:01:08,000 --> 01:01:08,000
对

2679
01:01:08,000 --> 01:01:10,000
有很多事情

2680
01:01:10,000 --> 01:01:10,000
你会觉得说

2681
01:01:10,000 --> 01:01:11,000
这样是方便的用户

2682
01:01:11,000 --> 01:01:12,000
但实际上会

2683
01:01:12,000 --> 01:01:14,000
会苦的开发者

2684
01:01:14,000 --> 01:01:15,000
这是

2685
01:01:15,000 --> 01:01:17,000
这是一个两面的问题

2686
01:01:17,000 --> 01:01:18,000
这个所有的软件生涯

2687
01:01:18,000 --> 01:01:19,000
不是都这么干的吗

2688
01:01:19,000 --> 01:01:19,000
都是这样的

2689
01:01:19,000 --> 01:01:20,000
方便用户

2690
01:01:20,000 --> 01:01:21,000
对

2691
01:01:21,000 --> 01:01:23,000
要关着用户的

2692
01:01:23,000 --> 01:01:24,000
是的

2693
01:01:24,000 --> 01:01:27,000
好吧

2694
01:01:27,000 --> 01:01:29,000
那我们文件名的长度

2695
01:01:29,000 --> 01:01:29,000
差不多就这样

2696
01:01:29,000 --> 01:01:30,000
我们我觉得

2697
01:01:30,000 --> 01:01:31,000
这个扩展名的坑太深了

2698
01:01:31,000 --> 01:01:32,000
哎呀

2699
01:01:32,000 --> 01:01:33,000
这个都每次讲不好

2700
01:01:33,000 --> 01:01:34,000
我们本来今天重点

2701
01:01:34,000 --> 01:01:35,000
不是讲这个的

2702
01:01:35,000 --> 01:01:35,000
嗯

2703
01:01:35,000 --> 01:01:37,000
讲了这么久这个坑

2704
01:01:37,000 --> 01:01:38,000
对呀

2705
01:01:38,000 --> 01:01:39,000
对

2706
01:01:39,000 --> 01:01:41,000
下面我们来谈

2707
01:01:41,000 --> 01:01:41,000
更大一个坑

2708
01:01:41,000 --> 01:01:43,000
就是文件名

2709
01:01:43,000 --> 01:01:45,000
命名是否允许

2710
01:01:45,000 --> 01:01:46,000
包含空格的问题

2711
01:01:46,000 --> 01:01:46,000
哎呀

2712
01:01:46,000 --> 01:01:48,000
这个事情就特别扯了

2713
01:01:48,000 --> 01:01:48,000
因为大家也知道

2714
01:01:48,000 --> 01:01:50,000
我们所有的这些系统的话

2715
01:01:50,000 --> 01:01:53,000
都是从西方语言过来的嘛

2716
01:01:53,000 --> 01:01:55,000
那像西文的话

2717
01:01:55,000 --> 01:01:56,000
他们都是按词分写的

2718
01:01:56,000 --> 01:01:57,000
词和词之中

2719
01:01:57,000 --> 01:01:58,000
这些都是有空格的嘛

2720
01:01:58,000 --> 01:01:59,000
嗯

2721
01:01:59,000 --> 01:02:02,000
我记得 DOS 的文件名

2722
01:02:02,000 --> 01:02:03,000
是不允许有空格的吧

2723
01:02:03,000 --> 01:02:05,000
应该是不允许的

2724
01:02:05,000 --> 01:02:06,000
嗯

2725
01:02:06,000 --> 01:02:08,000
我一点不太记不清楚了

2726
01:02:08,000 --> 01:02:09,000
有可能是不清楚了

2727
01:02:09,000 --> 01:02:09,000
所以就是我

2728
01:02:09,000 --> 01:02:10,000
我学电脑开始

2729
01:02:10,000 --> 01:02:12,000
就是从 DOS 进来的

2730
01:02:12,000 --> 01:02:14,000
所以哪怕直到现在

2731
01:02:14,000 --> 01:02:15,000
我自己起文件名

2732
01:02:15,000 --> 01:02:17,000
还是不习惯

2733
01:02:17,000 --> 01:02:18,000
学名用空格

2734
01:02:18,000 --> 01:02:19,000
我会经历

2735
01:02:19,000 --> 01:02:20,000
比如用什么

2736
01:02:20,000 --> 01:02:20,000
呃

2737
01:02:20,000 --> 01:02:21,000
用 hyphen

2738
01:02:21,000 --> 01:02:22,000
用连字符

2739
01:02:22,000 --> 01:02:24,000
或者下话线来写

2740
01:02:24,000 --> 01:02:25,000
啊

2741
01:02:25,000 --> 01:02:25,000
OK

2742
01:02:25,000 --> 01:02:26,000
我上次看一个视频

2743
01:02:26,000 --> 01:02:27,000
就是一个

2744
01:02:27,000 --> 01:02:28,000
他叫什么

2745
01:02:28,000 --> 01:02:30,000
他叫 8 bit guy

2746
01:02:30,000 --> 01:02:32,000
就是他在他的视频里面

2747
01:02:32,000 --> 01:02:35,000
教你装一个呃

2748
01:02:35,000 --> 01:02:37,000
macOS classic 的操作系统

2749
01:02:37,000 --> 01:02:39,000
然后他很自然而然的

2750
01:02:39,000 --> 01:02:41,000
把那个呃

2751
01:02:41,000 --> 01:02:42,000
主硬盘命名为了

2752
01:02:42,000 --> 01:02:44,000
命名为啊

2753
01:02:44,000 --> 01:02:46,000
iMac 空格 HD

2754
01:02:46,000 --> 01:02:47,000
然后我就我就想

2755
01:02:47,000 --> 01:02:48,000
我就感叹说

2756
01:02:48,000 --> 01:02:49,000
果然是祖传 Mac 用户

2757
01:02:49,000 --> 01:02:50,000
从来不会在意

2758
01:02:50,000 --> 01:02:52,000
这个文件名里面

2759
01:02:52,000 --> 01:02:52,000
可以有用

2760
01:02:52,000 --> 01:02:54,000
能不能有空格这种问题

2761
01:02:54,000 --> 01:02:57,000
你要是这种古早的

2762
01:02:57,000 --> 01:02:58,000
Windows 用户

2763
01:02:58,000 --> 01:02:58,000
你绝对不可能

2764
01:02:58,000 --> 01:02:59,000
做出这种事了

2765
01:02:59,000 --> 01:03:00,000
就是把一个文件

2766
01:03:00,000 --> 01:03:01,000
对

2767
01:03:01,000 --> 01:03:02,000
命名为一个

2768
01:03:02,000 --> 01:03:03,000
带空格的名字

2769
01:03:03,000 --> 01:03:05,000
因为有空格

2770
01:03:05,000 --> 01:03:06,000
会有什么问题呢

2771
01:03:06,000 --> 01:03:09,000
就是在早年的这个呃

2772
01:03:09,000 --> 01:03:09,000
命令行

2773
01:03:09,000 --> 01:03:12,000
就是字符界面的时候啊

2774
01:03:12,000 --> 01:03:13,000
他比如说我要处理

2775
01:03:13,000 --> 01:03:14,000
就比如说我们想象

2776
01:03:14,000 --> 01:03:15,000
一个什么场景

2777
01:03:15,000 --> 01:03:16,000
就是复制吧

2778
01:03:16,000 --> 01:03:16,000
我要把这个

2779
01:03:16,000 --> 01:03:17,000
假设我有一个文件

2780
01:03:17,000 --> 01:03:19,000
叫做 a.txt

2781
01:03:19,000 --> 01:03:21,000
我要把它复制为 b.txt

2782
01:03:21,000 --> 01:03:22,000
我直接就叫什么

2783
01:03:22,000 --> 01:03:23,000
就是这个 cp

2784
01:03:23,000 --> 01:03:23,000
就 copy

2785
01:03:23,000 --> 01:03:24,000
对吧

2786
01:03:24,000 --> 01:03:25,000
然后 a.txt

2787
01:03:25,000 --> 01:03:26,000
然后到这个目标

2788
01:03:26,000 --> 01:03:27,000
是 b.txt

2789
01:03:27,000 --> 01:03:28,000
就是完成了

2790
01:03:28,000 --> 01:03:28,000
对不对

2791
01:03:28,000 --> 01:03:30,000
但你发现这三个部分

2792
01:03:30,000 --> 01:03:30,000
一个主语

2793
01:03:30,000 --> 01:03:31,000
两个宾语

2794
01:03:31,000 --> 01:03:32,000
对吧

2795
01:03:32,000 --> 01:03:33,000
这个动词

2796
01:03:33,000 --> 01:03:35,000
一个动词

2797
01:03:35,000 --> 01:03:35,000
对

2798
01:03:35,000 --> 01:03:36,000
然后两个这个 object

2799
01:03:36,000 --> 01:03:37,000
两个目标的时候

2800
01:03:37,000 --> 01:03:39,000
你发现他用什么分格呢

2801
01:03:39,000 --> 01:03:39,000
用空格分格

2802
01:03:39,000 --> 01:03:40,000
对不对

2803
01:03:40,000 --> 01:03:40,000
这个时候你说

2804
01:03:40,000 --> 01:03:42,000
那我的文件是

2805
01:03:42,000 --> 01:03:43,000
刚好是 a 空格 b

2806
01:03:43,000 --> 01:03:44,000
这个时候怎么办

2807
01:03:44,000 --> 01:03:45,000
就很尴尬

2808
01:03:45,000 --> 01:03:45,000
对不对

2809
01:03:45,000 --> 01:03:48,000
但其实也是有解决方案的

2810
01:03:48,000 --> 01:03:50,000
就是说你把那个

2811
01:03:50,000 --> 01:03:51,000
带空格的名

2812
01:03:51,000 --> 01:03:52,000
文件名

2813
01:03:52,000 --> 01:03:53,000
用引号引起来

2814
01:03:53,000 --> 01:03:54,000
不就好了吗

2815
01:03:54,000 --> 01:03:54,000
对吧

2816
01:03:54,000 --> 01:03:56,000
那其实你也可以就是 copy 空格

2817
01:03:56,000 --> 01:03:57,000
然后引号开

2818
01:03:57,000 --> 01:03:58,000
就是引号

2819
01:03:58,000 --> 01:04:00,000
然后 a 空格 b.txt

2820
01:04:00,000 --> 01:04:01,000
然后引号

2821
01:04:01,000 --> 01:04:02,000
然后就下一个目标

2822
01:04:02,000 --> 01:04:03,000
比如 c.txt

2823
01:04:03,000 --> 01:04:04,000
其实也是可以的

2824
01:04:04,000 --> 01:04:05,000
对不对

2825
01:04:05,000 --> 01:04:07,000
但只是说就增加了一个麻烦

2826
01:04:07,000 --> 01:04:10,000
但其实我觉得这个还不是最坑爹的

2827
01:04:10,000 --> 01:04:12,000
就算我个人觉得就是说

2828
01:04:12,000 --> 01:04:13,000
你可以允许空格

2829
01:04:13,000 --> 01:04:16,000
但是最好是就是不鼓励使用空格

2830
01:04:16,000 --> 01:04:17,000
虽然说像 Mac 的这个超

2831
01:04:17,000 --> 01:04:19,000
目前的 Mac 超级里面

2832
01:04:19,000 --> 01:04:22,000
大量的使用了这个空格的这么一个

2833
01:04:22,000 --> 01:04:23,000
因为一旦涉及到空格

2834
01:04:23,000 --> 01:04:26,000
你那个文件名就必须要用引号

2835
01:04:26,000 --> 01:04:27,000
引号的话就有时候会导致

2836
01:04:27,000 --> 01:04:28,000
比如说自动不期的一些问题

2837
01:04:28,000 --> 01:04:30,000
还有就包括有一些这种

2838
01:04:30,000 --> 01:04:31,000
有些这个兼容性的问题

2839
01:04:31,000 --> 01:04:34,000
比如说我们真采用这个 xarx

2840
01:04:34,000 --> 01:04:35,000
就是有一个命令

2841
01:04:35,000 --> 01:04:37,000
它可以说你把这个前面的

2842
01:04:37,000 --> 01:04:39,000
那个程序的输入全部作为

2843
01:04:39,000 --> 01:04:41,000
这个命令的参数来执行

2844
01:04:41,000 --> 01:04:43,000
这么一个辅助的一个命令

2845
01:04:43,000 --> 01:04:44,000
这个它是怎么判断前面

2846
01:04:44,000 --> 01:04:45,000
你输入了哪些参数给它

2847
01:04:45,000 --> 01:04:47,000
它就说有个空格分隔开的

2848
01:04:47,000 --> 01:04:48,000
那些都是各种各样的参数

2849
01:04:48,000 --> 01:04:48,000
对吧

2850
01:04:48,000 --> 01:04:50,000
如果你的文件名刚好又是个空格

2851
01:04:50,000 --> 01:04:50,000
你怎么办呢

2852
01:04:50,000 --> 01:04:54,000
就得你说那我就改一个来分隔服

2853
01:04:54,000 --> 01:04:55,000
来分隔这个参数

2854
01:04:55,000 --> 01:04:56,000
就不要用空格分隔参数了

2855
01:04:56,000 --> 01:04:57,000
那我用一个什么

2856
01:04:57,000 --> 01:04:58,000
比如说是这个就是零

2857
01:04:58,000 --> 01:04:59,000
就是 ASCII

2858
01:04:59,000 --> 01:05:01,000
说零的那个字符

2859
01:05:01,000 --> 01:05:03,000
那个 no 那个字符来分隔

2860
01:05:03,000 --> 01:05:04,000
这个前面的参数

2861
01:05:04,000 --> 01:05:05,000
也可以对不对

2862
01:05:05,000 --> 01:05:07,000
但是就是这个东西就很

2863
01:05:07,000 --> 01:05:08,000
就就很不自然了

2864
01:05:08,000 --> 01:05:09,000
但我觉得

2865
01:05:09,000 --> 01:05:12,000
其实就用空格的最麻烦的问题

2866
01:05:12,000 --> 01:05:14,000
到前面那个都是说只是麻烦

2867
01:05:14,000 --> 01:05:16,000
还不是说不至于说

2868
01:05:16,000 --> 01:05:18,000
完全不能用

2869
01:05:18,000 --> 01:05:20,000
用空格作为在文件名里面

2870
01:05:20,000 --> 01:05:21,000
最坑爹的事情是

2871
01:05:21,000 --> 01:05:24,000
你到底连续用了几个空格

2872
01:05:24,000 --> 01:05:28,000
就是 A 空格 B.txt

2873
01:05:28,000 --> 01:05:29,000
这是一个文件

2874
01:05:29,000 --> 01:05:32,000
A 空格空格 B.txt

2875
01:05:32,000 --> 01:05:33,000
这是另外一个文件

2876
01:05:33,000 --> 01:05:33,000
对不对

2877
01:05:33,000 --> 01:05:37,000
是在一个非等宽的字体的显示环境之下

2878
01:05:37,000 --> 01:05:37,000
非常严重的问题

2879
01:05:37,000 --> 01:05:38,000
对啊

2880
01:05:38,000 --> 01:05:39,000
就你我不知道

2881
01:05:39,000 --> 01:05:41,000
就是说在非等宽的情况下

2882
01:05:41,000 --> 01:05:41,000
那个 A 和 B

2883
01:05:41,000 --> 01:05:42,000
它可能不是一个宽度

2884
01:05:42,000 --> 01:05:44,000
A 和 B 可能还看不得出来

2885
01:05:44,000 --> 01:05:45,000
比如说 A 和小写字母的

2886
01:05:45,000 --> 01:05:46,000
这个 I

2887
01:05:46,000 --> 01:05:47,000
就是在非等宽的情况

2888
01:05:47,000 --> 01:05:48,000
它肯定是不一样宽的

2889
01:05:48,000 --> 01:05:49,000
这个时候

2890
01:05:49,000 --> 01:05:52,000
你说它中间到底间隔了几个空格

2891
01:05:52,000 --> 01:05:53,000
你去数吗

2892
01:05:53,000 --> 01:05:53,000
难道

2893
01:05:53,000 --> 01:05:54,000
或者如果说

2894
01:05:54,000 --> 01:05:55,000
如果你说一两个的区别

2895
01:05:55,000 --> 01:05:56,000
可能还比较明显

2896
01:05:56,000 --> 01:05:57,000
对吧

2897
01:05:57,000 --> 01:05:58,000
五个和六个的区别

2898
01:05:58,000 --> 01:05:58,000
你能看得出来

2899
01:05:58,000 --> 01:06:01,000
但这个其实你用下滑线

2900
01:06:01,000 --> 01:06:02,000
或者用 hyphen

2901
01:06:02,000 --> 01:06:04,000
其实面临的问题是一样的

2902
01:06:04,000 --> 01:06:06,000
我觉得关键的问题还是在于

2903
01:06:06,000 --> 01:06:09,000
空格它作为一个特殊的字符

2904
01:06:09,000 --> 01:06:11,000
它其实是有别的作用

2905
01:06:11,000 --> 01:06:12,000
含义的

2906
01:06:12,000 --> 01:06:13,000
它作为分格服用的

2907
01:06:13,000 --> 01:06:13,000
对

2908
01:06:13,000 --> 01:06:15,000
一旦你要把它容纳到文件名里

2909
01:06:15,000 --> 01:06:18,000
你可能要引入别的机制来保护它

2910
01:06:18,000 --> 01:06:19,000
比如你要加引号

2911
01:06:19,000 --> 01:06:20,000
就 Escape 嘛

2912
01:06:20,000 --> 01:06:21,000
转译嘛

2913
01:06:21,000 --> 01:06:22,000
那这样子的话就是

2914
01:06:22,000 --> 01:06:24,000
文件名还能不能用引号呢

2915
01:06:24,000 --> 01:06:25,000
对

2916
01:06:25,000 --> 01:06:28,000
所以就是你必须要引入别的机制

2917
01:06:28,000 --> 01:06:28,000
对

2918
01:06:28,000 --> 01:06:31,000
Escape 机制在文字上面是非常非常弹疼的

2919
01:06:31,000 --> 01:06:35,000
就是 Windows 自从支持这个文件名没有空格之后

2920
01:06:35,000 --> 01:06:38,000
Windows 最知名的一个带空格的文件名

2921
01:06:38,000 --> 01:06:39,000
大家想想是什么

2922
01:06:39,000 --> 01:06:41,000
Program 空格 Files

2923
01:06:41,000 --> 01:06:41,000
真的

2924
01:06:41,000 --> 01:06:42,000
Fuck me

2925
01:06:42,000 --> 01:06:42,000
真的

2926
01:06:42,000 --> 01:06:44,000
每次要进入这个路径

2927
01:06:44,000 --> 01:06:45,000
真的是

2928
01:06:45,000 --> 01:06:46,000
他

2929
01:06:46,000 --> 01:06:47,000
这么说吧

2930
01:06:47,000 --> 01:06:49,000
Unix 能有空格

2931
01:06:49,000 --> 01:06:51,000
但是 Unix 支持用 backslash 做 Escape

2932
01:06:51,000 --> 01:06:52,000
对吧

2933
01:06:52,000 --> 01:06:52,000
你打文件

2934
01:06:52,000 --> 01:06:53,000
你打文件名

2935
01:06:53,000 --> 01:06:54,000
打了一半

2936
01:06:54,000 --> 01:06:55,000
你发现有个空格

2937
01:06:55,000 --> 01:06:56,000
那你 backslash 空格就好了

2938
01:06:56,000 --> 01:06:57,000
Windows 呢

2939
01:06:57,000 --> 01:07:02,000
你要回到一开始的这个参数的最开始

2940
01:07:02,000 --> 01:07:03,000
最前面

2941
01:07:03,000 --> 01:07:04,000
给它加一个双引号

2942
01:07:04,000 --> 01:07:06,000
而 Windows 的这个 Tab

2943
01:07:06,000 --> 01:07:08,000
Tab Auto Completion

2944
01:07:08,000 --> 01:07:11,000
它虽然会帮你加上双引号

2945
01:07:11,000 --> 01:07:11,000
但是它非常的蠢

2946
01:07:11,000 --> 01:07:13,000
就是你在用的时候

2947
01:07:13,000 --> 01:07:13,000
你会觉得

2948
01:07:13,000 --> 01:07:14,000
啊

2949
01:07:14,000 --> 01:07:15,000
蠢死了

2950
01:07:15,000 --> 01:07:16,000
而且

2951
01:07:16,000 --> 01:07:18,000
而且 Windows 它也没有像那个

2952
01:07:18,000 --> 01:07:19,000
就是它

2953
01:07:19,000 --> 01:07:21,000
就是那个叫做 Lie Editor

2954
01:07:21,000 --> 01:07:21,000
就是那个

2955
01:07:21,000 --> 01:07:22,000
mini 行

2956
01:07:22,000 --> 01:07:23,000
内行的编辑器的时候

2957
01:07:23,000 --> 01:07:24,000
它是

2958
01:07:24,000 --> 01:07:24,000
我记得

2959
01:07:24,000 --> 01:07:25,000
它有

2960
01:07:25,000 --> 01:07:26,000
它有那个功能吗

2961
01:07:26,000 --> 01:07:27,000
就是跳一个

2962
01:07:27,000 --> 01:07:28,000
一个 word

2963
01:07:28,000 --> 01:07:28,000
一个 word

2964
01:07:28,000 --> 01:07:29,000
Alt 加 F 是吧

2965
01:07:29,000 --> 01:07:30,000
没有

2966
01:07:30,000 --> 01:07:31,000
Alt 加 F

2967
01:07:31,000 --> 01:07:31,000
Alt 加 W

2968
01:07:31,000 --> 01:07:32,000
全都没有

2969
01:07:32,000 --> 01:07:34,000
就比如说你想写一个剧长的

2970
01:07:34,000 --> 01:07:35,000
什么 C

2971
01:07:35,000 --> 01:07:37,000
C 写杠写杠

2972
01:07:37,000 --> 01:07:37,000
Program

2973
01:07:37,000 --> 01:07:38,000
这个

2974
01:07:38,000 --> 01:07:39,000
就说你发现

2975
01:07:39,000 --> 01:07:40,000
我要回

2976
01:07:40,000 --> 01:07:42,000
你想要回到行手

2977
01:07:42,000 --> 01:07:43,000
只能按 home

2978
01:07:43,000 --> 01:07:44,000
你不能按 Ctrl 加 A

2979
01:07:44,000 --> 01:07:45,000
之类的

2980
01:07:45,000 --> 01:07:45,000
那你之后来

2981
01:07:45,000 --> 01:07:46,000
从第一个

2982
01:07:46,000 --> 01:07:47,000
慢慢用这个箭头

2983
01:07:47,000 --> 01:07:49,000
再挪到那个对应的那个位置

2984
01:07:49,000 --> 01:07:50,000
加引号

2985
01:07:50,000 --> 01:07:50,000
C 前面

2986
01:07:50,000 --> 01:07:50,000
对

2987
01:07:50,000 --> 01:07:51,000
你看那些

2988
01:07:51,000 --> 01:07:52,000
一纸缠

2989
01:07:52,000 --> 01:07:53,000
就德国有些很老的程序

2990
01:07:53,000 --> 01:07:54,000
一纸缠

2991
01:07:54,000 --> 01:07:56,000
然后修改文件名的时候

2992
01:07:56,000 --> 01:07:57,000
要按

2993
01:07:57,000 --> 01:07:58,000
按那个后退键

2994
01:07:58,000 --> 01:07:59,000
按

2995
01:07:59,000 --> 01:08:00,000
按上那么二三十四

2996
01:08:00,000 --> 01:08:01,000
你看它的时候

2997
01:08:01,000 --> 01:08:02,000
你就真的会

2998
01:08:02,000 --> 01:08:03,000
替它着急啊

2999
01:08:03,000 --> 01:08:03,000
Oh my God

3000
01:08:03,000 --> 01:08:06,000
所以可能一种德国人

3001
01:08:06,000 --> 01:08:07,000
做事严谨的感觉

3002
01:08:07,000 --> 01:08:07,000
就是这

3003
01:08:07,000 --> 01:08:09,000
摩扬功啊

3004
01:08:09,000 --> 01:08:10,000
按给你们听一下

3005
01:08:10,000 --> 01:08:15,000
是这种感觉

3006
01:08:15,000 --> 01:08:17,000
请问键盘什么牌子

3007
01:08:17,000 --> 01:08:17,000
对

3008
01:08:17,000 --> 01:08:18,000
对

3009
01:08:18,000 --> 01:08:19,000
所以就刚才那个 backslash

3010
01:08:19,000 --> 01:08:20,000
其实又就是那个叫做

3011
01:08:20,000 --> 01:08:22,000
backslash 叫什么

3012
01:08:22,000 --> 01:08:23,000
我一直搞不清楚

3013
01:08:23,000 --> 01:08:24,000
哪个是斜杠

3014
01:08:24,000 --> 01:08:25,000
哪个是反斜杠

3015
01:08:25,000 --> 01:08:25,000
反斜杠

3016
01:08:25,000 --> 01:08:27,000
backslash 是反斜杠

3017
01:08:27,000 --> 01:08:28,000
等一下

3018
01:08:28,000 --> 01:08:30,000
斜杠是从哪

3019
01:08:30,000 --> 01:08:32,000
从右上到左下

3020
01:08:32,000 --> 01:08:32,000
OK

3021
01:08:32,000 --> 01:08:34,000
右上到左下

3022
01:08:34,000 --> 01:08:35,000
这个是斜杠

3023
01:08:35,000 --> 01:08:35,000
对吧

3024
01:08:35,000 --> 01:08:37,000
斜杠青年是斜杠青年

3025
01:08:37,000 --> 01:08:38,000
反斜杠青年

3026
01:08:38,000 --> 01:08:40,000
反斜杠青年

3027
01:08:40,000 --> 01:08:41,000
是用 backslash

3028
01:08:41,000 --> 01:08:43,000
做斜杠青年的斜杠青年

3029
01:08:43,000 --> 01:08:44,000
哎呦

3030
01:08:44,000 --> 01:08:47,000
斜杠这个

3031
01:08:47,000 --> 01:08:49,000
右上到左下的是正斜杠

3032
01:08:49,000 --> 01:08:51,000
左上到右下的是反斜杠

3033
01:08:51,000 --> 01:08:52,000
对

3034
01:08:52,000 --> 01:08:54,000
我问的这个问题有点抬杠

3035
01:08:54,000 --> 01:08:55,000
这实际上是一个

3036
01:08:55,000 --> 01:08:56,000
怎么说

3037
01:08:56,000 --> 01:08:58,000
右撇子的世界的偏见

3038
01:08:58,000 --> 01:09:00,000
因为右撇子在砍人的时候会

3039
01:09:00,000 --> 01:09:02,000
自然而言从右上举起来

3040
01:09:02,000 --> 01:09:04,000
然后朝左下削下去

3041
01:09:04,000 --> 01:09:04,000
对吧

3042
01:09:04,000 --> 01:09:06,000
为什么一定要砍人呢

3043
01:09:06,000 --> 01:09:07,000
这 slash 嘛

3044
01:09:07,000 --> 01:09:09,000
slash 这个动作不是劈砍的意思吗

3045
01:09:09,000 --> 01:09:11,000
slash 是从

3046
01:09:11,000 --> 01:09:11,000
就是你把

3047
01:09:11,000 --> 01:09:13,000
你把你的手举起来

3048
01:09:13,000 --> 01:09:14,000
你的惯用手举起来

3049
01:09:14,000 --> 01:09:16,000
肯定是朝右上举的呀

3050
01:09:16,000 --> 01:09:16,000
对

3051
01:09:16,000 --> 01:09:16,000
然后呢

3052
01:09:16,000 --> 01:09:17,000
然后劈

3053
01:09:17,000 --> 01:09:20,000
劈下来是朝左下劈的吧

3054
01:09:20,000 --> 01:09:21,000
就是

3055
01:09:21,000 --> 01:09:22,000
我这么说吧

3056
01:09:22,000 --> 01:09:23,000
就是在网址里面

3057
01:09:23,000 --> 01:09:24,000
那个斜杠是正斜杠

3058
01:09:24,000 --> 01:09:25,000
对吧

3059
01:09:25,000 --> 01:09:25,000
正斜杠对

3060
01:09:25,000 --> 01:09:28,000
然后 windows 的路径

3061
01:09:28,000 --> 01:09:29,000
是反斜杠吧

3062
01:09:29,000 --> 01:09:29,000
对

3063
01:09:29,000 --> 01:09:31,000
windows 的路径是反斜杠的

3064
01:09:31,000 --> 01:09:33,000
这实际上也是一个很有意思的

3065
01:09:33,000 --> 01:09:33,000
叫什么

3066
01:09:33,000 --> 01:09:35,000
路径依赖问题

3067
01:09:35,000 --> 01:09:38,000
因为 unix 最开始是用斜杠

3068
01:09:38,000 --> 01:09:40,000
作为那个路径分割服的

3069
01:09:40,000 --> 01:09:42,000
而 DOS 一开始是

3070
01:09:42,000 --> 01:09:44,000
DOS 1.0 是没有路径这个概念的

3071
01:09:44,000 --> 01:09:45,000
所以

3072
01:09:45,000 --> 01:09:46,000
也是后来加的

3073
01:09:46,000 --> 01:09:46,000
对

3074
01:09:46,000 --> 01:09:52,000
他们就是继承了当时 CPM 的那个斜杠

3075
01:09:52,000 --> 01:09:54,000
作为 flag 的这个

3076
01:09:54,000 --> 01:09:55,000
命令参数

3077
01:09:55,000 --> 01:09:56,000
作为参数的用法

3078
01:09:56,000 --> 01:09:59,000
然后等到他们需要加入这个路径的时候

3079
01:09:59,000 --> 01:10:01,000
那就用了反斜杠

3080
01:10:01,000 --> 01:10:03,000
因为斜杠已经被用掉了

3081
01:10:03,000 --> 01:10:04,000
对吧

3082
01:10:04,000 --> 01:10:04,000
对

3083
01:10:04,000 --> 01:10:05,000
这就造成了另外一个问题

3084
01:10:05,000 --> 01:10:06,000
就是你用这个

3085
01:10:06,000 --> 01:10:07,000
我们讲用 backslash

3086
01:10:07,000 --> 01:10:08,000
这个叫 quoting

3087
01:10:08,000 --> 01:10:11,000
就是保护那个空格的时候

3088
01:10:11,000 --> 01:10:13,000
你发现好像没法保护

3089
01:10:13,000 --> 01:10:13,000
对吧

3090
01:10:13,000 --> 01:10:15,000
因为我的那个斜杠有别的用途

3091
01:10:15,000 --> 01:10:16,000
对

3092
01:10:16,000 --> 01:10:17,000
太坑跌了

3093
01:10:17,000 --> 01:10:18,000
但现在的主流的操作系统

3094
01:10:18,000 --> 01:10:19,000
就是

3095
01:10:19,000 --> 01:10:21,000
还是就是最新的

3096
01:10:21,000 --> 01:10:22,000
比如像 windows 10 和 MacOS

3097
01:10:22,000 --> 01:10:24,000
都是允许使用空格

3098
01:10:24,000 --> 01:10:25,000
而且是允许使用任意多个空格

3099
01:10:25,000 --> 01:10:26,000
就是连续也可以

3100
01:10:26,000 --> 01:10:27,000
对吧

3101
01:10:27,000 --> 01:10:29,000
所以就会出现我刚才说的那个问题

3102
01:10:29,000 --> 01:10:29,000
就是

3103
01:10:29,000 --> 01:10:31,000
你非要搞事的话

3104
01:10:31,000 --> 01:10:33,000
你说起个文件名

3105
01:10:33,000 --> 01:10:33,000
对吧

3106
01:10:33,000 --> 01:10:35,000
隐藏后缀

3107
01:10:35,000 --> 01:10:35,000
对吧

3108
01:10:35,000 --> 01:10:37,000
然后又起个文件名

3109
01:10:37,000 --> 01:10:38,000
A 空格

3110
01:10:38,000 --> 01:10:38,000
又隐藏后缀

3111
01:10:38,000 --> 01:10:39,000
对吧

3112
01:10:39,000 --> 01:10:40,000
又起个文件名

3113
01:10:40,000 --> 01:10:41,000
A 空格

3114
01:10:41,000 --> 01:10:42,000
又隐藏后缀

3115
01:10:42,000 --> 01:10:42,000
你发现

3116
01:10:42,000 --> 01:10:43,000
这个文件夹怎么全都是文件夹

3117
01:10:43,000 --> 01:10:44,000
都叫 A

3118
01:10:44,000 --> 01:10:44,000
对不对

3119
01:10:44,000 --> 01:10:46,000
全此空格文件

3120
01:10:46,000 --> 01:10:49,000
还有空白的文件

3121
01:10:49,000 --> 01:10:49,000
更猛

3122
01:10:49,000 --> 01:10:49,000
对吧

3123
01:10:49,000 --> 01:10:50,000
这个也很有意思

3124
01:10:50,000 --> 01:10:51,000
但所以我觉得

3125
01:10:51,000 --> 01:10:53,000
就是允许空格是可以的

3126
01:10:53,000 --> 01:10:54,000
但是我觉得

3127
01:10:54,000 --> 01:10:56,000
就是能不写空格的时候

3128
01:10:56,000 --> 01:10:56,000
尽量不写空格

3129
01:10:56,000 --> 01:10:57,000
避免太多那种坑了

3130
01:10:57,000 --> 01:11:02,000
所以文件名

3131
01:11:02,000 --> 01:11:04,000
就是允许空格还好

3132
01:11:04,000 --> 01:11:05,000
但是你在编程的时候

3133
01:11:05,000 --> 01:11:07,000
那些标制符

3134
01:11:07,000 --> 01:11:08,000
标师符

3135
01:11:08,000 --> 01:11:08,000
标师符

3136
01:11:08,000 --> 01:11:10,000
标师符

3137
01:11:10,000 --> 01:11:13,000
那标师符的话

3138
01:11:13,000 --> 01:11:14,000
就肯定不能有空格

3139
01:11:14,000 --> 01:11:15,000
对吧

3140
01:11:15,000 --> 01:11:18,000
那就会变成两个标

3141
01:11:18,000 --> 01:11:19,000
两个符号了

3142
01:11:19,000 --> 01:11:20,000
identifier

3143
01:11:20,000 --> 01:11:21,000
对

3144
01:11:21,000 --> 01:11:22,000
那里可以相对好理解

3145
01:11:22,000 --> 01:11:24,000
就是说那里至少有个明确的语

3146
01:11:24,000 --> 01:11:25,000
跟写字是一样的

3147
01:11:25,000 --> 01:11:27,000
你知道你写的是两个 word

3148
01:11:27,000 --> 01:11:28,000
它不是一个 word

3149
01:11:28,000 --> 01:11:29,000
那肯定要用一个东西来分

3150
01:11:29,000 --> 01:11:31,000
空格分格天经地义

3151
01:11:31,000 --> 01:11:33,000
在西文里面还是这样子

3152
01:11:33,000 --> 01:11:34,000
所以呢

3153
01:11:34,000 --> 01:11:35,000
在

3154
01:11:35,000 --> 01:11:37,000
在编程的时候

3155
01:11:37,000 --> 01:11:39,000
就开始各种类啊

3156
01:11:39,000 --> 01:11:40,000
各种函数啊

3157
01:11:40,000 --> 01:11:42,000
就开始大家要连起来嘛

3158
01:11:42,000 --> 01:11:42,000
嗯

3159
01:11:42,000 --> 01:11:46,000
就于是就有各种各样的这个写法了

3160
01:11:46,000 --> 01:11:47,000
对

3161
01:11:47,000 --> 01:11:49,000
现在最流行的应该就是那种 camel case 吧

3162
01:11:49,000 --> 01:11:50,000
对吧

3163
01:11:50,000 --> 01:11:51,000
呃

3164
01:11:51,000 --> 01:11:53,000
camel case 和下化线

3165
01:11:53,000 --> 01:11:55,000
取决于你干嘛吧

3166
01:11:55,000 --> 01:11:56,000
现在什么 kibab case

3167
01:11:56,000 --> 01:11:59,000
camel case 和那个 snake case

3168
01:11:59,000 --> 01:12:00,000
各有用处的

3169
01:12:00,000 --> 01:12:01,000
来来来

3170
01:12:01,000 --> 01:12:02,000
跟大家解释一下

3171
01:12:02,000 --> 01:12:03,000
这是什么意思吗

3172
01:12:03,000 --> 01:12:04,000
对吧

3173
01:12:04,000 --> 01:12:05,000
先要讲这个场景是什么

3174
01:12:05,000 --> 01:12:05,000
对不对

3175
01:12:05,000 --> 01:12:07,000
就是说为什么有这个需求

3176
01:12:07,000 --> 01:12:08,000
就是说你因为

3177
01:12:08,000 --> 01:12:11,000
因为不能用空格去分格这个

3178
01:12:11,000 --> 01:12:13,000
就是编程里面的一个一个一个一个一个

3179
01:12:13,000 --> 01:12:14,000
一个一个词

3180
01:12:14,000 --> 01:12:14,000
一个标示符

3181
01:12:14,000 --> 01:12:15,000
对吧

3182
01:12:15,000 --> 01:12:16,000
你不能用空格分格

3183
01:12:16,000 --> 01:12:17,000
至少应该我觉得

3184
01:12:17,000 --> 01:12:19,000
目前主流的编程语言

3185
01:12:19,000 --> 01:12:20,000
都是不支持这个点的

3186
01:12:20,000 --> 01:12:22,000
你甚至你也不能用引号

3187
01:12:22,000 --> 01:12:22,000
对吧

3188
01:12:22,000 --> 01:12:23,000
不能加引号

3189
01:12:23,000 --> 01:12:24,000
以号是一个特殊符号

3190
01:12:24,000 --> 01:12:24,000
你也不能用

3191
01:12:24,000 --> 01:12:25,000
对吧

3192
01:12:25,000 --> 01:12:26,000
所以你要去说

3193
01:12:26,000 --> 01:12:27,000
那我要分格

3194
01:12:27,000 --> 01:12:28,000
比如说 hello word

3195
01:12:28,000 --> 01:12:30,000
这两个写在一起的时候怎么办

3196
01:12:30,000 --> 01:12:32,000
那通常的一种做法就是说

3197
01:12:32,000 --> 01:12:34,000
把这两个字就是连起来一起写

3198
01:12:34,000 --> 01:12:35,000
但是 hello

3199
01:12:35,000 --> 01:12:36,000
这个 h 是大写

3200
01:12:36,000 --> 01:12:38,000
然后这个 word 的 w 是大写

3201
01:12:38,000 --> 01:12:39,000
对吧

3202
01:12:39,000 --> 01:12:40,000
这个叫做什么来的

3203
01:12:40,000 --> 01:12:41,000
camel case

3204
01:12:41,000 --> 01:12:42,000
camel case

3205
01:12:42,000 --> 01:12:43,000
驼峰时

3206
01:12:43,000 --> 01:12:44,000
等等

3207
01:12:44,000 --> 01:12:45,000
camel case

3208
01:12:45,000 --> 01:12:46,000
camel case 和 pasco

3209
01:12:46,000 --> 01:12:47,000
第一个应该是小写的

3210
01:12:47,000 --> 01:12:47,000
对

3211
01:12:47,000 --> 01:12:48,000
第一个一定要小写

3212
01:12:48,000 --> 01:12:49,000
才叫 camel case

3213
01:12:49,000 --> 01:12:50,000
第一个大写的话

3214
01:12:50,000 --> 01:12:51,000
就 pasco case

3215
01:12:51,000 --> 01:12:53,000
但这个区别其实好像

3216
01:12:53,000 --> 01:12:54,000
加拿来讲的不多

3217
01:12:54,000 --> 01:12:55,000
对大家一般还是讲

3218
01:12:55,000 --> 01:12:56,000
就是说是

3219
01:12:56,000 --> 01:12:57,000
就是手字母大写

3220
01:12:57,000 --> 01:12:58,000
我们都是这样

3221
01:12:58,000 --> 01:12:58,000
对吧

3222
01:12:58,000 --> 01:12:58,000
对

3223
01:12:58,000 --> 01:12:59,000
比如说购源里面

3224
01:12:59,000 --> 01:13:01,000
那个大写小写是有语义的区别的

3225
01:13:01,000 --> 01:13:02,000
member function

3226
01:13:02,000 --> 01:13:03,000
实际上是 camel

3227
01:13:03,000 --> 01:13:04,000
实际上是 pasco case

3228
01:13:04,000 --> 01:13:06,000
但是很多人会说那是 camel case

3229
01:13:06,000 --> 01:13:07,000
camel case

3230
01:13:07,000 --> 01:13:08,000
就是说你看怎么去理解

3231
01:13:08,000 --> 01:13:10,000
这个它的那个定义是啥

3232
01:13:10,000 --> 01:13:10,000
就是说

3233
01:13:10,000 --> 01:13:12,000
你只是说就大写

3234
01:13:12,000 --> 01:13:15,000
就是有这个词的

3235
01:13:15,000 --> 01:13:16,000
这个手字母大写

3236
01:13:16,000 --> 01:13:17,000
这种这一类

3237
01:13:17,000 --> 01:13:17,000
你都叫 camel case

3238
01:13:17,000 --> 01:13:18,000
它也说得过去

3239
01:13:18,000 --> 01:13:20,000
那只是说因为在购源里面

3240
01:13:20,000 --> 01:13:22,000
它的第一个字母是大写和小写

3241
01:13:22,000 --> 01:13:23,000
会影响到它这个

3242
01:13:23,000 --> 01:13:25,000
这个这个标识符的

3243
01:13:25,000 --> 01:13:26,000
这个就是 visibility 的可见性

3244
01:13:26,000 --> 01:13:28,000
所以这个人他就说

3245
01:13:28,000 --> 01:13:29,000
那作用欲

3246
01:13:29,000 --> 01:13:31,000
我就不好去单独去给它起一个名字

3247
01:13:31,000 --> 01:13:32,000
所以就只能就说

3248
01:13:32,000 --> 01:13:33,000
这一类都叫都叫 camel case

3249
01:13:33,000 --> 01:13:34,000
好吧

3250
01:13:34,000 --> 01:13:36,000
那你可以说 pasco case

3251
01:13:36,000 --> 01:13:38,000
实际上是 camel case 的一个

3252
01:13:38,000 --> 01:13:39,000
一个一个特例

3253
01:13:39,000 --> 01:13:41,000
就小驼峰和大驼峰

3254
01:13:41,000 --> 01:13:42,000
如果小所谓的小驼峰

3255
01:13:42,000 --> 01:13:42,000
就是

3256
01:13:42,000 --> 01:13:45,000
小字母是小写

3257
01:13:45,000 --> 01:13:45,000
但是中

3258
01:13:45,000 --> 01:13:47,000
后面的那个词

3259
01:13:47,000 --> 01:13:50,000
那那个第二个单词的那个字母是大写

3260
01:13:50,000 --> 01:13:50,000
就小驼峰

3261
01:13:50,000 --> 01:13:51,000
对对对

3262
01:13:51,000 --> 01:13:52,000
然后大驼峰的话

3263
01:13:52,000 --> 01:13:54,000
就是联手字母也大写

3264
01:13:54,000 --> 01:13:55,000
那这样的话

3265
01:13:55,000 --> 01:13:57,000
也可以叫做那个 pasca

3266
01:13:57,000 --> 01:13:58,000
就 pasca

3267
01:13:58,000 --> 01:14:01,000
他是从 pasca 语言来的

3268
01:14:01,000 --> 01:14:02,000
对

3269
01:14:02,000 --> 01:14:04,000
但这里就有一个更坑爹的事情了

3270
01:14:04,000 --> 01:14:04,000
就是说

3271
01:14:04,000 --> 01:14:05,000
我考你们一个

3272
01:14:05,000 --> 01:14:07,000
就其实有很多人有分歧的

3273
01:14:08,000 --> 01:14:09,000
缩略词

3274
01:14:09,000 --> 01:14:11,000
全大写的时候应该怎么办是吗

3275
01:14:11,000 --> 01:14:12,000
对怎么办

3276
01:14:12,000 --> 01:14:13,000
URL

3277
01:14:13,000 --> 01:14:14,000
URL

3278
01:14:14,000 --> 01:14:16,000
基本上那个都大家都基本上都是

3279
01:14:16,000 --> 01:14:17,000
如果是在厨所

3280
01:14:17,000 --> 01:14:18,000
不然很多都是小写

3281
01:14:18,000 --> 01:14:19,000
或者是这个

3282
01:14:19,000 --> 01:14:21,000
但也是一个要值得讨论的问题

3283
01:14:21,000 --> 01:14:22,000
这个还不是最坑的

3284
01:14:22,000 --> 01:14:23,000
最坑是这种

3285
01:14:23,000 --> 01:14:25,000
比如说是 IP 地址

3286
01:14:25,000 --> 01:14:26,000
IP address

3287
01:14:26,000 --> 01:14:27,000
我写成一个字的时候

3288
01:14:27,000 --> 01:14:28,000
怎么这么大小写

3289
01:14:28,000 --> 01:14:29,000
IP 两个字

3290
01:14:29,000 --> 01:14:31,000
两个字母必须大写吧

3291
01:14:31,000 --> 01:14:32,000
通常来讲的话

3292
01:14:32,000 --> 01:14:34,000
那不就变成 pascaux 吗

3293
01:14:34,000 --> 01:14:37,000
不是

3294
01:14:37,000 --> 01:14:38,000
这里就很坑的

3295
01:14:38,000 --> 01:14:39,000
在这个问题的这里

3296
01:14:39,000 --> 01:14:40,000
就是说

3297
01:14:40,000 --> 01:14:42,000
我们先不考虑购语言这种比较特殊

3298
01:14:42,000 --> 01:14:45,000
他对那个手字母大小写有这个语意的区别之外

3299
01:14:45,000 --> 01:14:48,000
就是说假设是完全没有语意区别的情况下

3300
01:14:48,000 --> 01:14:49,000
他其实也有也有讲究的

3301
01:14:49,000 --> 01:14:50,000
就是说

3302
01:14:50,000 --> 01:14:51,000
比如说是

3303
01:14:51,000 --> 01:14:52,000
I 大写

3304
01:14:52,000 --> 01:14:53,000
P 小写

3305
01:14:53,000 --> 01:14:56,000
A 大写的 IP address

3306
01:14:56,000 --> 01:14:56,000
还是说

3307
01:14:56,000 --> 01:14:58,000
IPA 都大写

3308
01:14:58,000 --> 01:15:00,000
然后 address 的后面那个出手字母的都小写

3309
01:15:00,000 --> 01:15:01,000
这是一种写法

3310
01:15:01,000 --> 01:15:01,000
对吧

3311
01:15:01,000 --> 01:15:03,000
还有就是 IP 多小写

3312
01:15:03,000 --> 01:15:04,000
然后 A 大写

3313
01:15:04,000 --> 01:15:05,000
然后 address 的小写

3314
01:15:05,000 --> 01:15:06,000
这种情况下

3315
01:15:06,000 --> 01:15:06,000
对吧

3316
01:15:06,000 --> 01:15:08,000
就是你发现没

3317
01:15:08,000 --> 01:15:11,000
他有很多这种不太明确的地方

3318
01:15:11,000 --> 01:15:12,000
然后这种

3319
01:15:12,000 --> 01:15:15,000
你说这个 IP address 还比较简单

3320
01:15:15,000 --> 01:15:15,000
对吧

3321
01:15:15,000 --> 01:15:16,000
但如果是刚好是

3322
01:15:16,000 --> 01:15:17,000
这种算是算是算是算梭略词

3323
01:15:17,000 --> 01:15:18,000
IP 是个梭略词

3324
01:15:18,000 --> 01:15:21,000
它是 internet protocol 的这个梭略

3325
01:15:21,000 --> 01:15:23,000
如果说我要写

3326
01:15:23,000 --> 01:15:25,000
IPURL address

3327
01:15:25,000 --> 01:15:26,000
怎么办

3328
01:15:26,000 --> 01:15:28,000
没有

3329
01:15:28,000 --> 01:15:29,000
这好像这个

3330
01:15:29,000 --> 01:15:31,000
就是跟你的环境

3331
01:15:31,000 --> 01:15:32,000
跟那个语言有关系

3332
01:15:32,000 --> 01:15:33,000
然后有些

3333
01:15:33,000 --> 01:15:34,000
他还是有习惯的

3334
01:15:34,000 --> 01:15:35,000
比如说

3335
01:15:35,000 --> 01:15:37,000
这个叫手字母缩写

3336
01:15:37,000 --> 01:15:40,000
如果超过是三个

3337
01:15:40,000 --> 01:15:41,000
或三个以上的话

3338
01:15:41,000 --> 01:15:44,000
那么把后面几个字母小写

3339
01:15:44,000 --> 01:15:46,000
就是有那样的语言

3340
01:15:46,000 --> 01:15:48,000
是啊

3341
01:15:48,000 --> 01:15:49,000
所以我就说这个事情

3342
01:15:49,000 --> 01:15:51,000
其实是一个相对来说

3343
01:15:51,000 --> 01:15:53,000
首先中文里面不存在这个问题

3344
01:15:53,000 --> 01:15:55,000
因为只有西文有大小写这个概念

3345
01:15:55,000 --> 01:15:58,000
然后在西文大小写里面

3346
01:15:58,000 --> 01:16:00,000
这种就会经常导致各种

3347
01:16:00,000 --> 01:16:02,000
所谓的叫做盛战

3348
01:16:02,000 --> 01:16:04,000
各种坚持

3349
01:16:04,000 --> 01:16:06,000
一定要某一种写法才对

3350
01:16:06,000 --> 01:16:07,000
另外一种某种写法

3351
01:16:07,000 --> 01:16:10,000
才更合理的这种争论

3352
01:16:10,000 --> 01:16:12,000
是一直都存在

3353
01:16:12,000 --> 01:16:14,000
而且我估计在我们死后

3354
01:16:14,000 --> 01:16:15,000
它应该还是会继续存在的

3355
01:16:15,000 --> 01:16:18,000
其实它怎么大小写

3356
01:16:18,000 --> 01:16:21,000
还是由这个 API 的设计者

3357
01:16:21,000 --> 01:16:23,000
他当时拍脑袋想的吧

3358
01:16:23,000 --> 01:16:25,000
因为我们这边有 web 开发者

3359
01:16:25,000 --> 01:16:27,000
那个 xmlhttprequest 里面

3360
01:16:27,000 --> 01:16:29,000
就是 xml 全大写

3361
01:16:29,000 --> 01:16:31,000
但 http 又不是全大写

3362
01:16:31,000 --> 01:16:32,000
是吧

3363
01:16:32,000 --> 01:16:33,000
很奇怪对不对

3364
01:16:33,000 --> 01:16:37,000
所以这个完全是看开发者

3365
01:16:37,000 --> 01:16:38,000
当时他拍脑袋

3366
01:16:38,000 --> 01:16:40,000
他觉得这样写比较优雅

3367
01:16:40,000 --> 01:16:40,000
他就这么写

3368
01:16:40,000 --> 01:16:42,000
看心情

3369
01:16:42,000 --> 01:16:45,000
没有今天我们讲的是命名规则

3370
01:16:45,000 --> 01:16:46,000
像这种东西

3371
01:16:46,000 --> 01:16:48,000
很多时候就是有规则

3372
01:16:48,000 --> 01:16:50,000
有的地方是没规则

3373
01:16:50,000 --> 01:16:51,000
然后一个语言里面

3374
01:16:51,000 --> 01:16:52,000
他有时候定了一个规则

3375
01:16:52,000 --> 01:16:53,000
他自己都不同意

3376
01:16:53,000 --> 01:16:55,000
经常会有这种事情

3377
01:16:55,000 --> 01:16:56,000
对每个公司

3378
01:16:56,000 --> 01:16:57,000
他有自己的 convention

3379
01:16:57,000 --> 01:16:59,000
毕竟它是一个 convention

3380
01:16:59,000 --> 01:17:01,000
就是它还是一种约定

3381
01:17:01,000 --> 01:17:05,000
他没有一种很强制的机制去约束他

3382
01:17:05,000 --> 01:17:07,000
比如说如果有一个什么机器检测的机制

3383
01:17:07,000 --> 01:17:09,000
禁止他做某件事情

3384
01:17:09,000 --> 01:17:13,000
那他可能这个规则才会非常的强力的

3385
01:17:13,000 --> 01:17:14,000
然后 comply 不过是吧

3386
01:17:14,000 --> 01:17:16,000
对

3387
01:17:16,000 --> 01:17:19,000
但从实用主义角度来讲

3388
01:17:19,000 --> 01:17:20,000
你为这个

3389
01:17:20,000 --> 01:17:22,000
因为你用 chamel case 要解决什么

3390
01:17:22,000 --> 01:17:25,000
问题是解决不能用空格分词

3391
01:17:25,000 --> 01:17:25,000
也没有

3392
01:17:25,000 --> 01:17:28,000
就是说也让我们后面会讲用下滑线

3393
01:17:28,000 --> 01:17:29,000
也是一个办法

3394
01:17:29,000 --> 01:17:30,000
就如果再不能用空格也不用下滑线的

3395
01:17:30,000 --> 01:17:32,000
因为我认为下滑线是一个空格的变种

3396
01:17:32,000 --> 01:17:33,000
对吧

3397
01:17:33,000 --> 01:17:33,000
OK

3398
01:17:33,000 --> 01:17:36,000
那不能用空格也不能用下滑线的情况下

3399
01:17:36,000 --> 01:17:39,000
你要用这个大小写来展示词与词基的区别

3400
01:17:39,000 --> 01:17:40,000
那很现眼

3401
01:17:40,000 --> 01:17:41,000
这种情况下

3402
01:17:41,000 --> 01:17:44,000
你就不应该把那种全大写的词

3403
01:17:44,000 --> 01:17:46,000
都真的全大写

3404
01:17:46,000 --> 01:17:47,000
在后你看不清楚哪个

3405
01:17:47,000 --> 01:17:48,000
它的那个边界在哪里

3406
01:17:48,000 --> 01:17:49,000
就好像刚才你说那个

3407
01:17:49,000 --> 01:17:51,000
XML HTTP request 的情况下

3408
01:17:51,000 --> 01:17:51,000
对吧

3409
01:17:51,000 --> 01:17:53,000
那 XML HTTP 这是一个东西

3410
01:17:53,000 --> 01:17:54,000
还是两个东西

3411
01:17:54,000 --> 01:17:55,000
对吧

3412
01:17:55,000 --> 01:17:56,000
原教育的那种

3413
01:17:56,000 --> 01:17:57,000
那种 camel case

3414
01:17:57,000 --> 01:18:00,000
还是比较适合阅读的

3415
01:18:00,000 --> 01:18:01,000
虽然说看起来比较丑

3416
01:18:01,000 --> 01:18:01,000
对吧

3417
01:18:01,000 --> 01:18:04,000
为什么 XML 是这么一种写法

3418
01:18:04,000 --> 01:18:04,000
就好奇怪

3419
01:18:04,000 --> 01:18:05,000
感觉怪怪的

3420
01:18:05,000 --> 01:18:07,000
但从读的角度来讲

3421
01:18:07,000 --> 01:18:09,000
或者从分词的这个角度来看

3422
01:18:09,000 --> 01:18:10,000
对吧

3423
01:18:10,000 --> 01:18:12,000
你还是要去找到它那个东西的本质是什么

3424
01:18:12,000 --> 01:18:13,000
它本质不是为了好看

3425
01:18:13,000 --> 01:18:15,000
它本质是为了 clarity

3426
01:18:15,000 --> 01:18:16,000
为了清晰

3427
01:18:16,000 --> 01:18:16,000
对吧

3428
01:18:16,000 --> 01:18:17,000
OK

3429
01:18:17,000 --> 01:18:19,000
那就是一种命名方式

3430
01:18:19,000 --> 01:18:20,000
第二种命名方式就讲

3431
01:18:20,000 --> 01:18:21,000
空格是肯定不行的

3432
01:18:21,000 --> 01:18:23,000
那为什么我说下滑线是空格的一个变种的

3433
01:18:23,000 --> 01:18:24,000
因为下滑线

3434
01:18:24,000 --> 01:18:27,000
它其实就是空格那里

3435
01:18:27,000 --> 01:18:29,000
那个位置变成了一条线

3436
01:18:29,000 --> 01:18:30,000
然后下滑线

3437
01:18:30,000 --> 01:18:31,000
然后下滑线其实

3438
01:18:31,000 --> 01:18:34,000
有一个区别是比较要紧的

3439
01:18:34,000 --> 01:18:38,000
就是在用鼠标双击选词的时候

3440
01:18:38,000 --> 01:18:40,000
下滑线它不会把那个词断开

3441
01:18:40,000 --> 01:18:42,000
这个其实挺蛮有用的

3442
01:18:42,000 --> 01:18:43,000
比如说什么意思

3443
01:18:43,000 --> 01:18:44,000
就是说

3444
01:18:44,000 --> 01:18:46,000
你想象 hello word

3445
01:18:46,000 --> 01:18:47,000
如果你是空格断开

3446
01:18:47,000 --> 01:18:49,000
它肯定你点击

3447
01:18:49,000 --> 01:18:50,000
我们默认是双击是选一个词

3448
01:18:50,000 --> 01:18:51,000
对吧

3449
01:18:51,000 --> 01:18:51,000
一个 word

3450
01:18:51,000 --> 01:18:53,000
那应该只会选到 hello

3451
01:18:53,000 --> 01:18:54,000
然后它选不到后面那个 word

3452
01:18:54,000 --> 01:18:56,000
但如果说你用下滑线

3453
01:18:56,000 --> 01:18:57,000
把 hello word 连起来之后

3454
01:18:57,000 --> 01:19:00,000
你在大多数的图形界面

3455
01:19:00,000 --> 01:19:01,000
你用双击的方式去选这个词

3456
01:19:01,000 --> 01:19:02,000
它会把整个 hello 下滑线

3457
01:19:02,000 --> 01:19:03,000
或者都圈起来

3458
01:19:03,000 --> 01:19:05,000
都高亮选择起来

3459
01:19:05,000 --> 01:19:05,000
对不对

3460
01:19:05,000 --> 01:19:08,000
就这个其实还是蛮有用的

3461
01:19:08,000 --> 01:19:10,000
这交互设计为了优化

3462
01:19:10,000 --> 01:19:12,000
这种字不穿

3463
01:19:12,000 --> 01:19:12,000
想这么做

3464
01:19:12,000 --> 01:19:14,000
对

3465
01:19:14,000 --> 01:19:15,000
就它避免了

3466
01:19:15,000 --> 01:19:16,000
大小写的争端

3467
01:19:16,000 --> 01:19:17,000
这个时候你怎么就大小写

3468
01:19:17,000 --> 01:19:19,000
就全看你的心情了

3469
01:19:19,000 --> 01:19:21,000
因为它跟语意和分词

3470
01:19:21,000 --> 01:19:23,000
都不影响了

3471
01:19:23,000 --> 01:19:24,000
你都可以比如说

3472
01:19:24,000 --> 01:19:24,000
刚才那个词

3473
01:19:24,000 --> 01:19:27,000
XML 下滑线

3474
01:19:27,000 --> 01:19:28,000
HTTP 下滑线 Request

3475
01:19:28,000 --> 01:19:29,000
你都可以这么写

3476
01:19:29,000 --> 01:19:29,000
对不对

3477
01:19:29,000 --> 01:19:30,000
其实是不影响这个了

3478
01:19:30,000 --> 01:19:32,000
那现在就是好看的问题了

3479
01:19:32,000 --> 01:19:34,000
不过理论上讲

3480
01:19:34,000 --> 01:19:36,000
就是用下滑线的话

3481
01:19:36,000 --> 01:19:37,000
就没那么碍野

3482
01:19:37,000 --> 01:19:37,000
说实话

3483
01:19:37,000 --> 01:19:41,000
就既有空格的空间感

3484
01:19:41,000 --> 01:19:43,000
然后也没那么碍野

3485
01:19:43,000 --> 01:19:44,000
然后因为它是在下滑线

3486
01:19:44,000 --> 01:19:46,000
所以它这个名字叫 Snake Case

3487
01:19:46,000 --> 01:19:47,000
就像是蛇

3488
01:19:47,000 --> 01:19:50,000
在弹在地上

3489
01:19:50,000 --> 01:19:50,000
地上爬

3490
01:19:50,000 --> 01:19:55,000
我觉得这几个名字都超形象的

3491
01:19:55,000 --> 01:19:56,000
像这个下滑线叫 Smake

3492
01:19:56,000 --> 01:19:58,000
名字符叫 Kibab

3493
01:19:58,000 --> 01:19:59,000
对吧

3494
01:19:59,000 --> 01:20:00,000
烤肉烤串

3495
01:20:00,000 --> 01:20:02,000
不是烤串可以啥意思

3496
01:20:02,000 --> 01:20:02,000
对吧

3497
01:20:02,000 --> 01:20:03,000
就像一个串

3498
01:20:03,000 --> 01:20:06,000
穿着上面好多这个什么肉叉烧一样

3499
01:20:06,000 --> 01:20:08,000
这种感觉

3500
01:20:08,000 --> 01:20:10,000
这一看就是这个吃货取的

3501
01:20:10,000 --> 01:20:12,000
这个东西有中文翻译吗

3502
01:20:12,000 --> 01:20:13,000
就肉夹馍对不对

3503
01:20:13,000 --> 01:20:15,000
就是肉夹馍

3504
01:20:15,000 --> 01:20:16,000
肉夹馍

3505
01:20:16,000 --> 01:20:16,000
自门意义上

3506
01:20:16,000 --> 01:20:19,000
DunaKibab 是旋转烧烤的意思

3507
01:20:19,000 --> 01:20:19,000
Duna 是

3508
01:20:19,000 --> 01:20:21,000
Duna 是旋转

3509
01:20:21,000 --> 01:20:22,000
Kibab 是烧烤

3510
01:20:22,000 --> 01:20:26,000
然后连的起叫

3511
01:20:26,000 --> 01:20:28,000
Kibab

3512
01:20:28,000 --> 01:20:31,000
实际上是 DunaKibab 的简称

3513
01:20:31,000 --> 01:20:33,000
就是土耳其烤肉的简称

3514
01:20:33,000 --> 01:20:35,000
但是就是在 Kibab 这个词

3515
01:20:35,000 --> 01:20:37,000
在进入这个英语语系里面

3516
01:20:37,000 --> 01:20:39,000
它其实就是我们理解的那个串

3517
01:20:39,000 --> 01:20:40,000
对

3518
01:20:40,000 --> 01:20:41,000
烤啊

3519
01:20:41,000 --> 01:20:42,000
不是串

3520
01:20:42,000 --> 01:20:44,000
Duna 是旋转

3521
01:20:44,000 --> 01:20:44,000
Kibab 是烤

3522
01:20:44,000 --> 01:20:47,000
Kibab 是烤的意思

3523
01:20:47,000 --> 01:20:47,000
对

3524
01:20:47,000 --> 01:20:50,000
对但是就是我就说你在那个就是英语里面

3525
01:20:50,000 --> 01:20:52,000
烤的语意是说

3526
01:20:52,000 --> 01:20:55,000
对它这个东西语意变成了 Sashlik

3527
01:20:55,000 --> 01:20:55,000
对

3528
01:20:55,000 --> 01:20:56,000
就是

3529
01:20:56,000 --> 01:20:58,000
变成一个串着一起的东西

3530
01:20:58,000 --> 01:20:58,000
对

3531
01:20:58,000 --> 01:21:01,000
像竹签穿起来这样一个东西

3532
01:21:01,000 --> 01:21:03,000
就是有一个罐在中间很细

3533
01:21:03,000 --> 01:21:05,000
然后上面有一堆这个更宽的一个物件

3534
01:21:05,000 --> 01:21:07,000
这个就是英文里面的这个 Kibab

3535
01:21:07,000 --> 01:21:11,000
目前它展示了这个也是这个 Kibab case 的这个意思吗

3536
01:21:11,000 --> 01:21:12,000
对

3537
01:21:12,000 --> 01:21:14,000
这个叫 Caltry

3538
01:21:14,000 --> 01:21:16,000
Caltry case

3539
01:21:16,000 --> 01:21:18,000
Try 这个字其实还是蛮新香

3540
01:21:18,000 --> 01:21:20,000
这要是日本人来起的话

3541
01:21:20,000 --> 01:21:22,000
就会变成那个鸟串烧

3542
01:21:22,000 --> 01:21:23,000
串鸟烧

3543
01:21:23,000 --> 01:21:24,000
鸟串烧

3544
01:21:24,000 --> 01:21:24,000
对

3545
01:21:24,000 --> 01:21:26,000
但 Kibab case 有个问题

3546
01:21:26,000 --> 01:21:27,000
就是它并不是所有的这个

3547
01:21:27,000 --> 01:21:29,000
语言都支持

3548
01:21:29,000 --> 01:21:30,000
因为因为横线

3549
01:21:30,000 --> 01:21:32,000
就是不是用下话简

3550
01:21:32,000 --> 01:21:33,000
是用那个连字符

3551
01:21:33,000 --> 01:21:34,000
或者叫减号

3552
01:21:34,000 --> 01:21:34,000
对吧

3553
01:21:34,000 --> 01:21:35,000
它其实有别的含义

3554
01:21:35,000 --> 01:21:37,000
那可能是 A 减 B 的

3555
01:21:37,000 --> 01:21:37,000
也就是 Kibab

3556
01:21:37,000 --> 01:21:38,000
然后杠这个 case

3557
01:21:38,000 --> 01:21:39,000
它可能是一个

3558
01:21:39,000 --> 01:21:41,000
它认为你要执行一个这个

3559
01:21:41,000 --> 01:21:43,000
就数学的这个减的一个操作

3560
01:21:43,000 --> 01:21:45,000
所以这个其实在很多原委

3561
01:21:45,000 --> 01:21:47,000
其实是不支持这种方式的

3562
01:21:47,000 --> 01:21:49,000
Kibab case 最常见的就是在 CSS 里面

3563
01:21:49,000 --> 01:21:50,000
很啰嗦

3564
01:21:50,000 --> 01:21:51,000
对

3565
01:21:51,000 --> 01:21:52,000
这也是因为 CSS

3566
01:21:52,000 --> 01:21:54,000
其实不进行计算的一个原因导致的

3567
01:21:54,000 --> 01:21:54,000
对不对

3568
01:21:54,000 --> 01:21:55,000
它没有这个 compute

3569
01:21:55,000 --> 01:21:56,000
除非用那个 Calk

3570
01:21:56,000 --> 01:21:57,000
它是要空格

3571
01:21:57,000 --> 01:21:59,000
CSS 现在不是支持 Calk 吗

3572
01:21:59,000 --> 01:22:01,000
所以你在 Calk 里面

3573
01:22:01,000 --> 01:22:02,000
你要想写减号的话

3574
01:22:02,000 --> 01:22:04,000
减号前后一定要有空格

3575
01:22:04,000 --> 01:22:04,000
对

3576
01:22:04,000 --> 01:22:06,000
而且这空格不能被压缩掉

3577
01:22:06,000 --> 01:22:07,000
对

3578
01:22:07,000 --> 01:22:09,000
不像有些空格可以压缩

3579
01:22:09,000 --> 01:22:10,000
就是那个

3580
01:22:10,000 --> 01:22:10,000
叫什么

3581
01:22:10,000 --> 01:22:12,000
叫做语意敏感的空格

3582
01:22:12,000 --> 01:22:13,000
对

3583
01:22:13,000 --> 01:22:15,000
这个其实也挺不和谐

3584
01:22:15,000 --> 01:22:19,000
这是你看

3585
01:22:19,000 --> 01:22:21,000
就是它其实这种历史背景的原因

3586
01:22:21,000 --> 01:22:22,000
过去没有运算

3587
01:22:22,000 --> 01:22:24,000
那所以我用这个下下线

3588
01:22:24,000 --> 01:22:25,000
用这个叫什么

3589
01:22:25,000 --> 01:22:26,000
这不叫减号

3590
01:22:26,000 --> 01:22:26,000
叫这个

3591
01:22:26,000 --> 01:22:29,000
横线其实没有什么区别

3592
01:22:29,000 --> 01:22:29,000
对不对

3593
01:22:29,000 --> 01:22:30,000
但是后来发现

3594
01:22:30,000 --> 01:22:32,000
你现在要运算了吗

3595
01:22:32,000 --> 01:22:32,000
怎么办

3596
01:22:32,000 --> 01:22:33,000
对

3597
01:22:33,000 --> 01:22:34,000
这其实一切都是

3598
01:22:34,000 --> 01:22:36,000
都是一个路径依赖的功能

3599
01:22:36,000 --> 01:22:37,000
假如当初键盘设计的时候

3600
01:22:37,000 --> 01:22:40,000
能明确区分连字符和减号

3601
01:22:40,000 --> 01:22:41,000
现在可能也就不会

3602
01:22:41,000 --> 01:22:42,000
没有这个问题了

3603
01:22:42,000 --> 01:22:42,000
所以

3604
01:22:42,000 --> 01:22:44,000
我觉得也区分不了吧

3605
01:22:44,000 --> 01:22:44,000
这个很难

3606
01:22:44,000 --> 01:22:46,000
对于人来说

3607
01:22:46,000 --> 01:22:49,000
在我们人类在非常自然的情况下

3608
01:22:49,000 --> 01:22:51,000
是不会去考虑一个符号的语意

3609
01:22:51,000 --> 01:22:52,000
跟这个符号的表现

3610
01:22:52,000 --> 01:22:52,000
是可以分开的

3611
01:22:52,000 --> 01:22:53,000
这个问题

3612
01:22:53,000 --> 01:22:55,000
就我们看到一个

3613
01:22:55,000 --> 01:22:55,000
不精确的物种

3614
01:22:55,000 --> 01:22:56,000
对

3615
01:22:56,000 --> 01:22:57,000
我们看到一个短横

3616
01:22:57,000 --> 01:22:58,000
一定会根据上下文来判断

3617
01:22:58,000 --> 01:22:59,000
它到底是个减号

3618
01:22:59,000 --> 01:23:00,000
还是一个 hyphen 的对吧

3619
01:23:00,000 --> 01:23:02,000
但是计算机没有这个功能

3620
01:23:02,000 --> 01:23:04,000
那其实这个是阿拉伯人的问题

3621
01:23:04,000 --> 01:23:04,000
对不对

3622
01:23:04,000 --> 01:23:06,000
为什么用短横来表示减

3623
01:23:06,000 --> 01:23:09,000
你用一个更加特殊的符号

3624
01:23:09,000 --> 01:23:10,000
来表示减

3625
01:23:10,000 --> 01:23:11,000
不就更好吗

3626
01:23:11,000 --> 01:23:13,000
这是阿拉伯人发明的吗

3627
01:23:13,000 --> 01:23:13,000
是吧

3628
01:23:13,000 --> 01:23:15,000
那我们现在这个

3629
01:23:15,000 --> 01:23:16,000
加减层除

3630
01:23:16,000 --> 01:23:16,000
这个四个符号

3631
01:23:16,000 --> 01:23:18,000
什么时候开始确定这个标准

3632
01:23:18,000 --> 01:23:20,000
就成号至少不是非常不同意的

3633
01:23:20,000 --> 01:23:21,000
历史上成号

3634
01:23:21,000 --> 01:23:23,000
有很多很多种表示方法

3635
01:23:23,000 --> 01:23:25,000
成号我们只会在那个地方

3636
01:23:25,000 --> 01:23:27,000
就只会在成号里面用

3637
01:23:27,000 --> 01:23:28,000
日常的这个

3638
01:23:28,000 --> 01:23:29,000
这个叫什么

3639
01:23:29,000 --> 01:23:30,000
日常排版里面并不会用

3640
01:23:30,000 --> 01:23:31,000
我只是抛出一个想法

3641
01:23:31,000 --> 01:23:33,000
因为中国古代也不是用减号的

3642
01:23:33,000 --> 01:23:34,000
对吧

3643
01:23:34,000 --> 01:23:37,000
中国古代减号是啥

3644
01:23:37,000 --> 01:23:39,000
所有人都卡了

3645
01:23:39,000 --> 01:23:41,000
对自己国家有的话这么不了解

3646
01:23:41,000 --> 01:23:42,000
你看看你们

3647
01:23:42,000 --> 01:23:44,000
九张算数对不对

3648
01:23:44,000 --> 01:23:48,000
现在阿拉伯人其实不用阿拉伯数字

3649
01:23:48,000 --> 01:23:49,000
阿拉伯数字实际上是

3650
01:23:49,000 --> 01:23:51,000
是西方对印度数字一套

3651
01:23:51,000 --> 01:23:51,000
一套

3652
01:23:51,000 --> 01:23:52,000
对呀

3653
01:23:52,000 --> 01:23:53,000
称呼

3654
01:23:53,000 --> 01:23:55,000
所以我怀疑阿拉伯人其实也不是用减号

3655
01:23:55,000 --> 01:23:56,000
所以你不能把锅

3656
01:23:56,000 --> 01:23:57,000
栽了阿拉伯人头上

3657
01:23:57,000 --> 01:23:58,000
阿拉伯兄弟们已经背了太多锅了

3658
01:23:58,000 --> 01:23:59,000
好的

3659
01:23:59,000 --> 01:24:01,000
那就是 whoever 发明这套东西的时候

3660
01:24:01,000 --> 01:24:03,000
他就没就没想过这个

3661
01:24:03,000 --> 01:24:04,000
不许你这么想

3662
01:24:04,000 --> 01:24:07,000
加减层除那四个符号里面

3663
01:24:07,000 --> 01:24:08,000
除了加和层

3664
01:24:08,000 --> 01:24:09,000
其他两个都是有起义的问题的

3665
01:24:09,000 --> 01:24:11,000
除如果你是用那个除还好

3666
01:24:11,000 --> 01:24:13,000
就是如果这斜杠除也是有这个问题的

3667
01:24:13,000 --> 01:24:15,000
那就是还是减号的问题比较多了

3668
01:24:15,000 --> 01:24:16,000
对吧

3669
01:24:16,000 --> 01:24:17,000
反过来说

3670
01:24:17,000 --> 01:24:18,000
现在英语键盘上

3671
01:24:18,000 --> 01:24:20,000
就是我有时候觉得挺不可思议的

3672
01:24:20,000 --> 01:24:23,000
打字机键盘上居然没有乘号这个符号

3673
01:24:23,000 --> 01:24:25,000
就当初发明打字机的人

3674
01:24:25,000 --> 01:24:26,000
会认为 X 和

3675
01:24:26,000 --> 01:24:28,000
你用 X 来替代乘号就好了

3676
01:24:28,000 --> 01:24:31,000
这是真的路径依赖导致了很多问题

3677
01:24:31,000 --> 01:24:32,000
那你要说这个键盘的话

3678
01:24:32,000 --> 01:24:36,000
当年的键盘连那个小写字母 O 和数字 0

3679
01:24:36,000 --> 01:24:38,000
都可以用一个键位

3680
01:24:38,000 --> 01:24:38,000
对

3681
01:24:38,000 --> 01:24:39,000
那个可以理解吧

3682
01:24:39,000 --> 01:24:42,000
因为造个打字机机器这个那么复杂

3683
01:24:42,000 --> 01:24:43,000
能少一个还是能省不少

3684
01:24:43,000 --> 01:24:45,000
在机械打字机的时代

3685
01:24:45,000 --> 01:24:47,000
诚号跟 X 的话那还不一样

3686
01:24:47,000 --> 01:24:50,000
赋予这个字符以一个固定的语意

3687
01:24:50,000 --> 01:24:54,000
其实我觉得是很计算机时代的一个事情

3688
01:24:54,000 --> 01:24:54,000
因为很晚近

3689
01:24:54,000 --> 01:24:57,000
因为机器才需要去识别这些事情

3690
01:24:57,000 --> 01:25:03,000
人是一个通过语境和上下文来判断符号意义的动物

3691
01:25:03,000 --> 01:25:05,000
他不是要背下来这个符号

3692
01:25:05,000 --> 01:25:08,000
或者说他根本就不可能知道一个符号

3693
01:25:08,000 --> 01:25:10,000
在抽象的一种数据结构里面是一个什么东西

3694
01:25:10,000 --> 01:25:12,000
他只是看到它

3695
01:25:12,000 --> 01:25:12,000
他才知道

3696
01:25:12,000 --> 01:25:14,000
这该死的神经网络对吧

3697
01:25:14,000 --> 01:25:16,000
好了我们不讲这个东西了

3698
01:25:16,000 --> 01:25:18,000
我们一会接着回来讲我们的空格的事情

3699
01:25:18,000 --> 01:25:22,000
另外常见的一个命名就是我们各种网站的

3700
01:25:22,000 --> 01:25:25,000
这个 URL 的 URL 是不能有空格的

3701
01:25:25,000 --> 01:25:26,000
我想想

3702
01:25:26,000 --> 01:25:29,000
URL 的空格会被编码掉

3703
01:25:29,000 --> 01:25:30,000
被转移掉

3704
01:25:30,000 --> 01:25:31,000
变成是多少

3705
01:25:31,000 --> 01:25:32,000
20%

3706
01:25:32,000 --> 01:25:34,000
20%

3707
01:25:34,000 --> 01:25:38,000
然后就是我们常见的这个所谓用户名对吧

3708
01:25:38,000 --> 01:25:40,000
这个其实我们或者比如说你 Twitter 的这个

3709
01:25:40,000 --> 01:25:41,000
我们叫 Handle 对吧

3710
01:25:41,000 --> 01:25:45,000
邮件的这个邮箱的那个就是那个 at

3711
01:25:45,000 --> 01:25:47,000
前面那部分也是不能有空格的

3712
01:25:47,000 --> 01:25:48,000
通常是这样子

3713
01:25:48,000 --> 01:25:49,000
为什么呢

3714
01:25:49,000 --> 01:25:50,000
因为就看他说那个问题

3715
01:25:50,000 --> 01:25:55,000
你什么时候才能确定他是不是一个完整的词

3716
01:25:55,000 --> 01:25:56,000
对吧

3717
01:25:56,000 --> 01:25:57,000
跟刚才那个 identifier 其实是一样的

3718
01:25:57,000 --> 01:25:59,000
这两个其实他本质上都是一个 identifier 对不对

3719
01:25:59,000 --> 01:26:00,000
标识符

3720
01:26:00,000 --> 01:26:04,000
那么显然也是不能有空格的

3721
01:26:04,000 --> 01:26:06,000
那就是你得想是说那就可以用下号线

3722
01:26:06,000 --> 01:26:09,000
就基本上下号线都是可以用的对吧

3723
01:26:09,000 --> 01:26:11,000
但就是说那个就是横线或者是减号

3724
01:26:11,000 --> 01:26:13,000
或者你叫连字符也好

3725
01:26:13,000 --> 01:26:14,000
这个能不能用

3726
01:26:14,000 --> 01:26:16,000
其实就取决于各个系统了

3727
01:26:16,000 --> 01:26:21,000
这个段词总是一个很纠结的事情

3728
01:26:21,000 --> 01:26:24,000
因为西方他们必须要用一个空格段词

3729
01:26:24,000 --> 01:26:26,000
然后遇到不能用空格的时候

3730
01:26:26,000 --> 01:26:27,000
他们就老纠结了

3731
01:26:27,000 --> 01:26:29,000
想办法不能解决方案吧

3732
01:26:29,000 --> 01:26:32,000
现在那个 Twitter 的那个

3733
01:26:32,000 --> 01:26:33,000
那个用那个 hashtag

3734
01:26:33,000 --> 01:26:35,000
那个标签

3735
01:26:35,000 --> 01:26:37,000
那个也是好烦的

3736
01:26:37,000 --> 01:26:41,000
现在他们那个 API 有时候认那个标签的话

3737
01:26:41,000 --> 01:26:49,000
也是得手工加空格才会认当这一个标签

3738
01:26:49,000 --> 01:26:52,000
因为他不知道你端到哪个地方

3739
01:26:52,000 --> 01:26:53,000
他不知道呀

3740
01:26:53,000 --> 01:26:54,000
对呀

3741
01:26:54,000 --> 01:26:56,000
他现在有一些优化吧

3742
01:26:56,000 --> 01:27:00,000
就如果你输入一些很明显是标点符号的

3743
01:27:00,000 --> 01:27:01,000
或者是特殊符号的字符

3744
01:27:01,000 --> 01:27:02,000
他会给你断开

3745
01:27:02,000 --> 01:27:04,000
至少我知道汉语的那些标点

3746
01:27:04,000 --> 01:27:05,000
他都会给你断开

3747
01:27:05,000 --> 01:27:07,000
你说到这个

3748
01:27:07,000 --> 01:27:09,000
我想起来 Twitter 的那个 hashtag

3749
01:27:09,000 --> 01:27:10,000
好像不支持汉语

3750
01:27:10,000 --> 01:27:12,000
就是你的 tag 里面不能有汉语

3751
01:27:12,000 --> 01:27:13,000
没有他跟那个呀

3752
01:27:13,000 --> 01:27:15,000
他跟用户名是一样的

3753
01:27:15,000 --> 01:27:16,000
推出用户名也不能有汉语

3754
01:27:16,000 --> 01:27:17,000
你只能用下话线

3755
01:27:17,000 --> 01:27:19,000
哦

3756
01:27:19,000 --> 01:27:21,000
所以他本知道你说

3757
01:27:21,000 --> 01:27:23,000
你回到刚才那个问题吧

3758
01:27:23,000 --> 01:27:25,000
就是说这个 hashtag

3759
01:27:25,000 --> 01:27:27,000
这个 tag 本身是个什么东西

3760
01:27:27,000 --> 01:27:27,000
他就是一个 identify

3761
01:27:27,000 --> 01:27:29,000
如果说他是一个 identify

3762
01:27:29,000 --> 01:27:30,000
你想到在编程里面

3763
01:27:30,000 --> 01:27:31,000
你什么时候

3764
01:27:31,000 --> 01:27:34,000
你是不是觉得那些地方都不能用这个减号

3765
01:27:34,000 --> 01:27:34,000
对不对

3766
01:27:34,000 --> 01:27:35,000
那其实也是一个道理

3767
01:27:35,000 --> 01:27:36,000
嗯

3768
01:27:36,000 --> 01:27:38,000
嗯

3769
01:27:38,000 --> 01:27:39,000
到时中文语境下面

3770
01:27:39,000 --> 01:27:41,000
这问题就比较

3771
01:27:41,000 --> 01:27:42,000
比较奇怪了

3772
01:27:42,000 --> 01:27:43,000
你说微博他是用两个

3773
01:27:43,000 --> 01:27:44,000
他其实把那个

3774
01:27:44,000 --> 01:27:47,000
那么这个这个警号件当成引号来用

3775
01:27:47,000 --> 01:27:47,000
对不对

3776
01:27:47,000 --> 01:27:49,000
就是两个圈起来的才是

3777
01:27:49,000 --> 01:27:50,000
因为中文不分词嘛

3778
01:27:50,000 --> 01:27:52,000
你不加个后面

3779
01:27:52,000 --> 01:27:54,000
你不知道这个刷到什么

3780
01:27:54,000 --> 01:27:55,000
到什么地方结束嘛

3781
01:27:55,000 --> 01:27:56,000
对问题就来了呀

3782
01:27:56,000 --> 01:27:57,000
就是那

3783
01:27:57,000 --> 01:27:58,000
我是警号

3784
01:27:58,000 --> 01:27:59,000
标签

3785
01:27:59,000 --> 01:28:00,000
警号标签

3786
01:28:00,000 --> 01:28:01,000
警号

3787
01:28:01,000 --> 01:28:02,000
这个时候算啥

3788
01:28:02,000 --> 01:28:04,000
你说配对问题是吗

3789
01:28:04,000 --> 01:28:05,000
对配对问题嘛

3790
01:28:05,000 --> 01:28:06,000
就是有这个问题了

3791
01:28:06,000 --> 01:28:07,000
这是另外一个

3792
01:28:07,000 --> 01:28:08,000
还有嵌套问题是吧

3793
01:28:08,000 --> 01:28:09,000
对对对对

3794
01:28:09,000 --> 01:28:12,000
因为引号其实也是一个非常坑爹的事情

3795
01:28:12,000 --> 01:28:15,000
正常说我们引号是有这个开引号

3796
01:28:15,000 --> 01:28:17,000
关引号的区别的吧

3797
01:28:17,000 --> 01:28:17,000
对对吧

3798
01:28:17,000 --> 01:28:19,000
为了打字机

3799
01:28:19,000 --> 01:28:21,000
我们为了省那个建位

3800
01:28:21,000 --> 01:28:23,000
我们又合爱为一只搞一个了

3801
01:28:23,000 --> 01:28:24,000
对不对

3802
01:28:24,000 --> 01:28:25,000
对呀

3803
01:28:25,000 --> 01:28:27,000
所以我们这个做字体排应的就生物痛绝的

3804
01:28:27,000 --> 01:28:29,000
千万不要用傻瓜引号

3805
01:28:29,000 --> 01:28:30,000
结果都是打字机惹的祸

3806
01:28:30,000 --> 01:28:32,000
对呀

3807
01:28:32,000 --> 01:28:32,000
就是为了

3808
01:28:32,000 --> 01:28:34,000
也不叫他打字机惹的祸吧

3809
01:28:34,000 --> 01:28:36,000
就是为了省钱

3810
01:28:36,000 --> 01:28:36,000
导致他

3811
01:28:36,000 --> 01:28:38,000
都是没钱

3812
01:28:38,000 --> 01:28:41,000
所以微博那个双警号

3813
01:28:41,000 --> 01:28:44,000
他就是你把它想成引号的用法来用就行了

3814
01:28:44,000 --> 01:28:45,000
或者想成是

3815
01:28:45,000 --> 01:28:46,000
数名号都不算

3816
01:28:46,000 --> 01:28:47,000
数名号是两个是不一样的嘛

3817
01:28:47,000 --> 01:28:50,000
就引号的这种方式来用就可以了嘛

3818
01:28:50,000 --> 01:28:51,000
所以其实我觉得以后

3819
01:28:51,000 --> 01:28:55,000
要发明什么新的方式的这种 quoting 的方式的时候

3820
01:28:55,000 --> 01:28:56,000
一定要配对啊

3821
01:28:56,000 --> 01:28:58,000
就是不要用这个引号来引了

3822
01:28:58,000 --> 01:29:00,000
你就用这个数名号好了

3823
01:29:00,000 --> 01:29:00,000
对吧

3824
01:29:00,000 --> 01:29:03,000
或者用那个方括号来引号

3825
01:29:03,000 --> 01:29:03,000
对

3826
01:29:03,000 --> 01:29:04,000
各种括号

3827
01:29:04,000 --> 01:29:06,000
因为基本上括号都是肯定是有方

3828
01:29:06,000 --> 01:29:08,000
有这个有这个开关两个的嘛

3829
01:29:08,000 --> 01:29:09,000
嗯

3830
01:29:09,000 --> 01:29:12,000
然后还得让他自动配对

3831
01:29:12,000 --> 01:29:14,000
然后还允许嵌套是吧

3832
01:29:14,000 --> 01:29:16,000
大括号小括号中括号

3833
01:29:16,000 --> 01:29:17,000
对对对

3834
01:29:17,000 --> 01:29:19,000
这样发现就你在写 lisp

3835
01:29:19,000 --> 01:29:23,000
所以就不用去数那个缩进

3836
01:29:23,000 --> 01:29:24,000
或者怎么样是吧

3837
01:29:24,000 --> 01:29:24,000
对啊

3838
01:29:24,000 --> 01:29:26,000
就完全藐视缩进啊

3839
01:29:26,000 --> 01:29:28,000
缩进本来就很反人了呀

3840
01:29:28,000 --> 01:29:29,000
就是说你凭什么

3841
01:29:29,000 --> 01:29:32,000
你凭什么判断这一行前面有十个空格

3842
01:29:32,000 --> 01:29:32,000
对

3843
01:29:32,000 --> 01:29:34,000
你凭什么要求我写程序

3844
01:29:34,000 --> 01:29:36,000
还要带着一把油油卡尺

3845
01:29:36,000 --> 01:29:38,000
哈哈哈哈

3846
01:29:38,000 --> 01:29:41,000
就是一条 python 梗

3847
01:29:41,000 --> 01:29:44,000
回头我们把这个链接放在

3848
01:29:44,000 --> 01:29:45,000
shinno 次里面

3849
01:29:45,000 --> 01:29:48,000
吓死我了

3850
01:29:48,000 --> 01:29:48,000
不过啊

3851
01:29:48,000 --> 01:29:50,000
现在 Camel Case 啊

3852
01:29:50,000 --> 01:29:52,000
就把这个词越练越长了

3853
01:29:52,000 --> 01:29:55,000
现在特别是那个什么 objectc

3854
01:29:55,000 --> 01:29:57,000
咱们那种都落落缩缩的语言

3855
01:29:57,000 --> 01:29:57,000
哇

3856
01:29:57,000 --> 01:29:59,000
它这个名字超长的

3857
01:29:59,000 --> 01:30:00,000
那个 API 的名字

3858
01:30:00,000 --> 01:30:01,000
那简直了

3859
01:30:01,000 --> 01:30:02,000
就我之前是不知道啊

3860
01:30:02,000 --> 01:30:02,000
就是我

3861
01:30:02,000 --> 01:30:03,000
比如说我们现在很多

3862
01:30:03,000 --> 01:30:05,000
你用的这个 iOS 的手机 app

3863
01:30:05,000 --> 01:30:05,000
很多

3864
01:30:05,000 --> 01:30:07,000
现在很开始变少

3865
01:30:07,000 --> 01:30:09,000
就是以前都是这个时候的

3866
01:30:09,000 --> 01:30:10,000
objectc 这个语言写的

3867
01:30:10,000 --> 01:30:11,000
然后

3868
01:30:11,000 --> 01:30:13,000
但现在有 swift 这个语言写

3869
01:30:13,000 --> 01:30:13,000
可能会好一些

3870
01:30:13,000 --> 01:30:16,000
objectc 那个语言的命名规则

3871
01:30:16,000 --> 01:30:17,000
但是太奇怪了

3872
01:30:17,000 --> 01:30:18,000
他就要把一个 API 的

3873
01:30:18,000 --> 01:30:20,000
那个全部写全

3874
01:30:20,000 --> 01:30:21,000
一个 API 的一个

3875
01:30:21,000 --> 01:30:22,000
一个叫什么

3876
01:30:22,000 --> 01:30:23,000
一个参数

3877
01:30:23,000 --> 01:30:26,000
就是五个单词写全

3878
01:30:26,000 --> 01:30:26,000
对

3879
01:30:26,000 --> 01:30:27,000
它的 method signature

3880
01:30:27,000 --> 01:30:28,000
就是叫什么

3881
01:30:28,000 --> 01:30:30,000
方法签名

3882
01:30:30,000 --> 01:30:30,000
是非常长的

3883
01:30:30,000 --> 01:30:32,000
就你认为它就是一个函数名吗

3884
01:30:32,000 --> 01:30:33,000
你可以这么理解

3885
01:30:33,000 --> 01:30:33,000
对吧

3886
01:30:33,000 --> 01:30:33,000
对

3887
01:30:33,000 --> 01:30:35,000
这个函数名都是要写全

3888
01:30:35,000 --> 01:30:36,000
我们通常都是

3889
01:30:36,000 --> 01:30:38,000
不是按我们过去 c 的那个

3890
01:30:38,000 --> 01:30:39,000
都是都写非常简短

3891
01:30:39,000 --> 01:30:39,000
对吧

3892
01:30:39,000 --> 01:30:42,000
c 它是可以把单词缩写吗

3893
01:30:42,000 --> 01:30:44,000
这一切都要归功于 smalltalk

3894
01:30:44,000 --> 01:30:46,000
就 smalltalk 就是这一套

3895
01:30:46,000 --> 01:30:47,000
就是一个参数

3896
01:30:47,000 --> 01:30:48,000
有两个名字

3897
01:30:48,000 --> 01:30:50,000
一个是外调用者看到的名字

3898
01:30:50,000 --> 01:30:52,000
另外一个是参数内部看到的名字

3899
01:30:52,000 --> 01:30:53,000
这个其实

3900
01:30:53,000 --> 01:30:54,000
我觉得非常合理的

3901
01:30:54,000 --> 01:30:55,000
就哪怕现在 swift

3902
01:30:55,000 --> 01:30:57,000
你看它还是继承了这一套

3903
01:30:57,000 --> 01:30:59,000
就这个东西还是蛮有用的

3904
01:30:59,000 --> 01:30:59,000
而且

3905
01:30:59,000 --> 01:31:01,000
怎么说呢

3906
01:31:01,000 --> 01:31:02,000
我觉得

3907
01:31:02,000 --> 01:31:03,000
Mac

3908
01:31:03,000 --> 01:31:06,000
就是 objectc 和 java 一样

3909
01:31:06,000 --> 01:31:07,000
就是一个重度

3910
01:31:07,000 --> 01:31:08,000
依赖于 idee 的语言

3911
01:31:08,000 --> 01:31:10,000
你没有做母权的话

3912
01:31:10,000 --> 01:31:12,000
你拿来写这个真的是非常自找古实的件事

3913
01:31:12,000 --> 01:31:15,000
但是如果你有自动普权的话

3914
01:31:15,000 --> 01:31:16,000
那文件名多长也就无所谓了

3915
01:31:16,000 --> 01:31:17,000
他想的是说

3916
01:31:17,000 --> 01:31:20,000
你可以直接读到这个参数

3917
01:31:20,000 --> 01:31:21,000
或者这个函数名的时候

3918
01:31:21,000 --> 01:31:22,000
你就从它这个名字

3919
01:31:22,000 --> 01:31:23,000
就能一脸看出来

3920
01:31:23,000 --> 01:31:24,000
这个函数是干啥

3921
01:31:24,000 --> 01:31:28,000
他会把这个东西的功能定义的非常清晰

3922
01:31:28,000 --> 01:31:28,000
对吧

3923
01:31:28,000 --> 01:31:31,000
但不像我们之前在上古时代

3924
01:31:31,000 --> 01:31:32,000
unix 那个时候写这个 c

3925
01:31:32,000 --> 01:31:34,000
都写的非常短的文件名

3926
01:31:34,000 --> 01:31:35,000
这个函数名

3927
01:31:35,000 --> 01:31:36,000
比如说什么

3928
01:31:36,000 --> 01:31:37,000
从这个 terminal 去个字

3929
01:31:37,000 --> 01:31:39,000
他是 getch 的

3930
01:31:39,000 --> 01:31:40,000
他连那个 character 的

3931
01:31:40,000 --> 01:31:41,000
你说我们正常写那个 character

3932
01:31:41,000 --> 01:31:43,000
你说 character

3933
01:31:43,000 --> 01:31:45,000
这个是几个单字母的词

3934
01:31:45,000 --> 01:31:46,000
比较长吧

3935
01:31:46,000 --> 01:31:47,000
你知道写个 car 吧

3936
01:31:47,000 --> 01:31:48,000
就 char 对吧

3937
01:31:48,000 --> 01:31:49,000
他连那个黑牙都比较

3938
01:31:49,000 --> 01:31:50,000
他直接 getch

3939
01:31:50,000 --> 01:31:51,000
对吧

3940
01:31:51,000 --> 01:31:52,000
你自己猜 ch 后面是个啥

3941
01:31:52,000 --> 01:31:53,000
对

3942
01:31:53,000 --> 01:31:54,000
这实际上也是一个

3943
01:31:54,000 --> 01:31:56,000
这实际上还是一个路径依赖的问题

3944
01:31:56,000 --> 01:31:56,000
就是

3945
01:31:56,000 --> 01:31:59,000
你想大型机在 60 年代那个时代

3946
01:31:59,000 --> 01:32:04,000
你每次连上主机去写程序的时候

3947
01:32:04,000 --> 01:32:06,000
你会希望自己的按的键

3948
01:32:06,000 --> 01:32:08,000
需要按的键越少越好

3949
01:32:08,000 --> 01:32:10,000
因为就像现在我有时候

3950
01:32:10,000 --> 01:32:12,000
所有人都 work from home

3951
01:32:12,000 --> 01:32:12,000
对吧

3952
01:32:12,000 --> 01:32:14,000
你有时候连公司的那个虚拟机

3953
01:32:14,000 --> 01:32:15,000
还是会觉得慢

3954
01:32:15,000 --> 01:32:16,000
你打一个键

3955
01:32:16,000 --> 01:32:18,000
我们好像有期节目聊着有问题

3956
01:32:18,000 --> 01:32:19,000
就是你按一个键之后

3957
01:32:19,000 --> 01:32:20,000
多久之内

3958
01:32:20,000 --> 01:32:21,000
获不到

3959
01:32:21,000 --> 01:32:22,000
得不到延迟

3960
01:32:22,000 --> 01:32:23,000
你个人就会非常焦躁

3961
01:32:23,000 --> 01:32:26,000
你会觉得整个思路被打断了

3962
01:32:26,000 --> 01:32:27,000
那我现在就经常会遇到这种状况

3963
01:32:27,000 --> 01:32:28,000
那我现在就希望说

3964
01:32:28,000 --> 01:32:29,000
我靠

3965
01:32:29,000 --> 01:32:30,000
敢跟你使用 mosh

3966
01:32:30,000 --> 01:32:31,000
mosh

3967
01:32:31,000 --> 01:32:32,000
有道理

3968
01:32:32,000 --> 01:32:34,000
但是我要连公司的虚拟机

3969
01:32:34,000 --> 01:32:37,000
这个过程是没有办法用 mosh 来实现的

3970
01:32:37,000 --> 01:32:39,000
对我要先连到公司的

3971
01:32:39,000 --> 01:32:39,000
virtual machine

3972
01:32:39,000 --> 01:32:40,000
然后再从 virtual machine

3973
01:32:40,000 --> 01:32:41,000
上 mosh

3974
01:32:41,000 --> 01:32:43,000
到公司内部的远程

3975
01:32:43,000 --> 01:32:45,000
这个过程就没有什么延迟了

3976
01:32:45,000 --> 01:32:46,000
对吧

3977
01:32:46,000 --> 01:32:47,000
所以就 60 年代的时候

3978
01:32:47,000 --> 01:32:48,000
人们写程序

3979
01:32:48,000 --> 01:32:49,000
当然会希望说

3980
01:32:49,000 --> 01:32:51,000
需要输入字符越少越好

3981
01:32:51,000 --> 01:32:53,000
而且是那些很常用的底层的功能

3982
01:32:53,000 --> 01:32:55,000
它可能会被反复掉用

3983
01:32:55,000 --> 01:32:56,000
然后他刚才你说

3984
01:32:56,000 --> 01:32:56,000
那个 small talk

3985
01:32:56,000 --> 01:32:59,000
它有内外的区别力的机制

3986
01:32:59,000 --> 01:33:00,000
但其实在 C 里面

3987
01:33:00,000 --> 01:33:01,000
应该是之前是没有的

3988
01:33:01,000 --> 01:33:02,000
对吧

3989
01:33:02,000 --> 01:33:02,000
对

3990
01:33:02,000 --> 01:33:04,000
它就是你要会反复掉用

3991
01:33:04,000 --> 01:33:04,000
如果你的文件

3992
01:33:04,000 --> 01:33:06,000
那个函数名太长的话

3993
01:33:06,000 --> 01:33:08,000
其实会反复浪费掉很多

3994
01:33:08,000 --> 01:33:09,000
这个字节去存储

3995
01:33:09,000 --> 01:33:10,000
这个调用到这个

3996
01:33:10,000 --> 01:33:12,000
这个 entry point 在哪里

3997
01:33:12,000 --> 01:33:12,000
对

3998
01:33:12,000 --> 01:33:14,000
而到了 objectfc

3999
01:33:14,000 --> 01:33:16,000
或者是 java 的时代

4000
01:33:16,000 --> 01:33:17,000
那基本上所有的人

4001
01:33:17,000 --> 01:33:18,000
都在本地客户端

4002
01:33:18,000 --> 01:33:19,000
都是都是

4003
01:33:19,000 --> 01:33:20,000
不会省了一个字节的

4004
01:33:20,000 --> 01:33:21,000
后客户端

4005
01:33:21,000 --> 01:33:23,000
因为响应都是在本地的

4006
01:33:23,000 --> 01:33:24,000
所以你就不会说

4007
01:33:24,000 --> 01:33:27,000
需要有把名字弄短

4008
01:33:27,000 --> 01:33:27,000
那个需求

4009
01:33:27,000 --> 01:33:28,000
对吧

4010
01:33:28,000 --> 01:33:31,000
只有奇葩的 php 是

4011
01:33:31,000 --> 01:33:32,000
是个

4012
01:33:32,000 --> 01:33:34,000
实际上最好的语言

4013
01:33:34,000 --> 01:33:34,000
你说什么

4014
01:33:34,000 --> 01:33:37,000
只有奇葩的 php

4015
01:33:37,000 --> 01:33:38,000
是用这个

4016
01:33:38,000 --> 01:33:39,000
函数名的长度

4017
01:33:39,000 --> 01:33:40,000
作为一个 hash

4018
01:33:40,000 --> 01:33:43,000
你能想象吗

4019
01:33:43,000 --> 01:33:44,000
这是一个让人

4020
01:33:44,000 --> 01:33:45,000
匪夷所思的决定

4021
01:33:45,000 --> 01:33:46,000
所以 php 的函数名

4022
01:33:46,000 --> 01:33:47,000
有长有短

4023
01:33:47,000 --> 01:33:50,000
是故意有长有短的

4024
01:33:50,000 --> 01:33:51,000
不可思议

4025
01:33:51,000 --> 01:33:53,000
但是就是说回来

4026
01:33:53,000 --> 01:33:53,000
就是

4027
01:33:53,000 --> 01:33:55,000
但是 objectfc 的

4028
01:33:55,000 --> 01:33:55,000
那个

4029
01:33:55,000 --> 01:33:57,000
那个函数名

4030
01:33:57,000 --> 01:33:57,000
真的是

4031
01:33:57,000 --> 01:33:59,000
就是过于长了

4032
01:33:59,000 --> 01:34:00,000
就是即便是在

4033
01:34:00,000 --> 01:34:01,000
现在的目光的

4034
01:34:01,000 --> 01:34:02,000
这个观点来看

4035
01:34:02,000 --> 01:34:02,000
还是过于长

4036
01:34:02,000 --> 01:34:04,000
我觉得对于写 java 的人来说

4037
01:34:04,000 --> 01:34:05,000
真的不算什么

4038
01:34:05,000 --> 01:34:06,000
就很啰嗦

4039
01:34:06,000 --> 01:34:07,000
真的

4040
01:34:07,000 --> 01:34:08,000
java 里面也有

4041
01:34:08,000 --> 01:34:09,000
很啰嗦的

4042
01:34:09,000 --> 01:34:09,000
函数名

4043
01:34:09,000 --> 01:34:10,000
不要太多

4044
01:34:10,000 --> 01:34:11,000
至少 java 的那些

4045
01:34:11,000 --> 01:34:12,000
有些这个参数

4046
01:34:12,000 --> 01:34:13,000
你每个参数

4047
01:34:13,000 --> 01:34:14,000
都要写参数名

4048
01:34:14,000 --> 01:34:15,000
不用吧

4049
01:34:15,000 --> 01:34:16,000
不用

4050
01:34:16,000 --> 01:34:16,000
那倒不用

4051
01:34:16,000 --> 01:34:17,000
那 objectfc 要写的

4052
01:34:17,000 --> 01:34:19,000
对吧

4053
01:34:19,000 --> 01:34:19,000
objectfc

4054
01:34:19,000 --> 01:34:21,000
他那个每个 method

4055
01:34:21,000 --> 01:34:22,000
他还会把那个

4056
01:34:22,000 --> 01:34:22,000
用那个冒号

4057
01:34:22,000 --> 01:34:23,000
就连起来

4058
01:34:23,000 --> 01:34:24,000
就是他后面

4059
01:34:24,000 --> 01:34:25,000
带了一个参数

4060
01:34:25,000 --> 01:34:25,000
对啊

4061
01:34:25,000 --> 01:34:26,000
就是

4062
01:34:26,000 --> 01:34:28,000
然后这个串的超长

4063
01:34:28,000 --> 01:34:28,000
超长的

4064
01:34:28,000 --> 01:34:29,000
那个是函数签名的一部分

4065
01:34:29,000 --> 01:34:31,000
这个是可以理解的

4066
01:34:31,000 --> 01:34:32,000
就好像

4067
01:34:32,000 --> 01:34:33,000
c 语言的函数签名

4068
01:34:33,000 --> 01:34:35,000
其实也要把函数的类型

4069
01:34:35,000 --> 01:34:36,000
带上的

4070
01:34:36,000 --> 01:34:36,000
只不过

4071
01:34:36,000 --> 01:34:37,000
不像 objectfc

4072
01:34:37,000 --> 01:34:38,000
写的非常显示

4073
01:34:38,000 --> 01:34:40,000
就是你必须显示的

4074
01:34:40,000 --> 01:34:41,000
告诉对方

4075
01:34:41,000 --> 01:34:43,000
我要调用的这个方法里面

4076
01:34:43,000 --> 01:34:43,000
这个参数

4077
01:34:43,000 --> 01:34:44,000
叫这个名字

4078
01:34:44,000 --> 01:34:46,000
但是在有些函数里面

4079
01:34:46,000 --> 01:34:48,000
比如说 java 的函数签名

4080
01:34:48,000 --> 01:34:49,000
实际上也是包含类型的

4081
01:34:49,000 --> 01:34:50,000
就是

4082
01:34:50,000 --> 01:34:52,000
你必须写出类型来

4083
01:34:52,000 --> 01:34:52,000
而 objectfc

4084
01:34:52,000 --> 01:34:54,000
是不用写出类型来的

4085
01:34:54,000 --> 01:34:55,000
但是他要写出那个别名来

4086
01:34:55,000 --> 01:34:57,000
OK

4087
01:34:57,000 --> 01:34:57,000
那至少

4088
01:34:57,000 --> 01:34:59,000
我们可以讨论另外一个事情

4089
01:34:59,000 --> 01:34:59,000
就是假设你还是

4090
01:34:59,000 --> 01:35:01,000
就是我们任何

4091
01:35:01,000 --> 01:35:02,000
还是要把那个写的净

4092
01:35:02,000 --> 01:35:02,000
可能清晰

4093
01:35:02,000 --> 01:35:03,000
为准

4094
01:35:03,000 --> 01:35:04,000
但有个限度

4095
01:35:04,000 --> 01:35:05,000
这个限度在哪里的问题

4096
01:35:05,000 --> 01:35:06,000
比如说这个

4097
01:35:06,000 --> 01:35:07,000
我们这个 show notes

4098
01:35:07,000 --> 01:35:08,000
今天给的这个例子

4099
01:35:08,000 --> 01:35:09,000
这个是一个苹果的

4100
01:35:09,000 --> 01:35:10,000
一个 api

4101
01:35:10,000 --> 01:35:12,000
是 app kit 的什么

4102
01:35:12,000 --> 01:35:12,000
ns

4103
01:35:12,000 --> 01:35:13,000
ats

4104
01:35:13,000 --> 01:35:14,000
type setter

4105
01:35:14,000 --> 01:35:15,000
里面有一个

4106
01:35:15,000 --> 01:35:19,000
我要念一下这个函数的

4107
01:35:19,000 --> 01:35:20,000
先深吸一口气

4108
01:35:20,000 --> 01:35:21,000
请深吸一口气

4109
01:35:21,000 --> 01:35:22,000
我先深吸一口气

4110
01:35:22,000 --> 01:35:23,000
你们请听好了

4111
01:35:23,000 --> 01:35:26,000
should break line

4112
01:35:26,000 --> 01:35:27,000
by hyphenate

4113
01:35:27,000 --> 01:35:30,000
before character at index

4114
01:35:30,000 --> 01:35:31,000
hyphenating

4115
01:35:31,000 --> 01:35:33,000
你要加 ing

4116
01:35:33,000 --> 01:35:34,000
对

4117
01:35:34,000 --> 01:35:34,000
hyphenating

4118
01:35:34,000 --> 01:35:36,000
但我先测量一下

4119
01:35:36,000 --> 01:35:36,000
这个

4120
01:35:36,000 --> 01:35:38,000
这个以共有

4121
01:35:38,000 --> 01:35:39,000
掏出你的

4122
01:35:39,000 --> 01:35:40,000
作为一个 python 程序员

4123
01:35:40,000 --> 01:35:41,000
掏出你的游标卡尺来

4124
01:35:41,000 --> 01:35:43,000
50 个字

4125
01:35:43,000 --> 01:35:43,000
OK

4126
01:35:43,000 --> 01:35:44,000
假设

4127
01:35:44,000 --> 01:35:45,000
当然肯定

4128
01:35:45,000 --> 01:35:46,000
当然吴涛也说了

4129
01:35:46,000 --> 01:35:47,000
这个因为都是图形界面

4130
01:35:47,000 --> 01:35:47,000
不存在这个问题

4131
01:35:47,000 --> 01:35:48,000
假设你在这个

4132
01:35:48,000 --> 01:35:50,000
纯字符界面

4133
01:35:50,000 --> 01:35:52,000
你是一个 80 x 25 行宽的

4134
01:35:52,000 --> 01:35:53,000
这么一个

4135
01:35:53,000 --> 01:35:54,000
这么一个

4136
01:35:54,000 --> 01:35:56,000
编辑器的窗口里面

4137
01:35:56,000 --> 01:35:57,000
这 50 个字

4138
01:35:57,000 --> 01:35:58,000
就已经干掉一整行了

4139
01:35:58,000 --> 01:35:58,000
对吧

4140
01:35:58,000 --> 01:35:59,000
你还不用干别的

4141
01:35:59,000 --> 01:36:00,000
对

4142
01:36:00,000 --> 01:36:01,000
这还不是 coco 最长的

4143
01:36:01,000 --> 01:36:03,000
show notes 里面

4144
01:36:03,000 --> 01:36:03,000
大家看那个

4145
01:36:03,000 --> 01:36:05,000
API 名最长选手权了吗

4146
01:36:05,000 --> 01:36:06,000
你们打开那一页看看

4147
01:36:06,000 --> 01:36:07,000
你看

4148
01:36:07,000 --> 01:36:08,000
你会发

4149
01:36:08,000 --> 01:36:08,000
你打开那个看到

4150
01:36:08,000 --> 01:36:09,000
你会发现最长是

4151
01:36:09,000 --> 01:36:11,000
java 和 windows.net

4152
01:36:11,000 --> 01:36:12,000
对

4153
01:36:12,000 --> 01:36:13,000
还是 downet

4154
01:36:13,000 --> 01:36:13,000
比较

4155
01:36:13,000 --> 01:36:14,000
没有

4156
01:36:14,000 --> 01:36:15,000
最关键是什么呢

4157
01:36:15,000 --> 01:36:17,000
像 coco 啊

4158
01:36:17,000 --> 01:36:18,000
像 objectc

4159
01:36:18,000 --> 01:36:18,000
他啰嗦

4160
01:36:18,000 --> 01:36:19,000
就啰嗦

4161
01:36:19,000 --> 01:36:20,000
也就算了

4162
01:36:20,000 --> 01:36:21,000
但是因为他啰嗦

4163
01:36:21,000 --> 01:36:23,000
他是因为他不缩写词

4164
01:36:23,000 --> 01:36:24,000
然后他都还很有语意

4165
01:36:24,000 --> 01:36:26,000
所以读起来呢

4166
01:36:26,000 --> 01:36:27,000
还算是 OK 的

4167
01:36:27,000 --> 01:36:28,000
你不像那个 downet

4168
01:36:28,000 --> 01:36:31,000
他即使写那么长了

4169
01:36:31,000 --> 01:36:32,000
他看不懂他什么意思

4170
01:36:32,000 --> 01:36:33,000
还带缩写

4171
01:36:33,000 --> 01:36:34,000
他带了缩写

4172
01:36:34,000 --> 01:36:35,000
还看不懂什么

4173
01:36:35,000 --> 01:36:36,000
而且还很啰嗦

4174
01:36:36,000 --> 01:36:36,000
你看那个

4175
01:36:36,000 --> 01:36:38,000
就比如说这个例子

4176
01:36:38,000 --> 01:36:40,000
那个 103 个字母

4177
01:36:40,000 --> 01:36:41,000
那个那什么鬼

4178
01:36:41,000 --> 01:36:44,000
我觉得 coco 还有 coco 的 api

4179
01:36:44,000 --> 01:36:45,000
还有一点很有意思

4180
01:36:45,000 --> 01:36:47,000
就是或者说导致了

4181
01:36:47,000 --> 01:36:50,000
间接导致了他名字比较长的一点

4182
01:36:50,000 --> 01:36:51,000
就是他会用什么

4183
01:36:51,000 --> 01:36:52,000
should

4184
01:36:52,000 --> 01:36:53,000
did

4185
01:36:53,000 --> 01:36:55,000
来表示 before 和 after

4186
01:36:55,000 --> 01:36:57,000
就在别的 api 里面

4187
01:36:57,000 --> 01:36:58,000
比如说什么

4188
01:36:58,000 --> 01:37:01,000
窗口 load

4189
01:37:01,000 --> 01:37:01,000
这一点是

4190
01:37:01,000 --> 01:37:03,000
别的 api 会叫做

4191
01:37:03,000 --> 01:37:04,000
before windows load

4192
01:37:04,000 --> 01:37:06,000
或者是 after windows load

4193
01:37:06,000 --> 01:37:08,000
然后在 coco 这里呢

4194
01:37:08,000 --> 01:37:10,000
叫做 windows should be loaded

4195
01:37:10,000 --> 01:37:13,000
或者是 windows did load

4196
01:37:13,000 --> 01:37:15,000
这个还蛮有意思的

4197
01:37:15,000 --> 01:37:16,000
算是 coco 一套

4198
01:37:16,000 --> 01:37:18,000
就哪怕现在 Swift

4199
01:37:18,000 --> 01:37:18,000
也是这样的

4200
01:37:18,000 --> 01:37:20,000
但我有一时候在想

4201
01:37:20,000 --> 01:37:22,000
这个是不是跟另外当时

4202
01:37:22,000 --> 01:37:23,000
他们诞生那个背景

4203
01:37:23,000 --> 01:37:25,000
有一个思潮有关系

4204
01:37:25,000 --> 01:37:26,000
就是你们还记得那个叫

4205
01:37:26,000 --> 01:37:28,000
Apple Script

4206
01:37:28,000 --> 01:37:29,000
那个语言吗

4207
01:37:29,000 --> 01:37:29,000
嗯

4208
01:37:29,000 --> 01:37:31,000
就他是他的那个语言

4209
01:37:31,000 --> 01:37:32,000
就是完全

4210
01:37:32,000 --> 01:37:34,000
就像自然语言嘛

4211
01:37:34,000 --> 01:37:35,000
嗯

4212
01:37:35,000 --> 01:37:37,000
对所谓自然语言描述这个东西

4213
01:37:37,000 --> 01:37:38,000
那么他就会什么描述呢

4214
01:37:38,000 --> 01:37:38,000
就是说

4215
01:37:38,000 --> 01:37:40,000
就全部都是用这个

4216
01:37:40,000 --> 01:37:41,000
我们现在都是用什么符号

4217
01:37:41,000 --> 01:37:43,000
来表达一些特殊的语义的地方

4218
01:37:43,000 --> 01:37:44,000
他都尽可能用这个

4219
01:37:44,000 --> 01:37:45,000
啊

4220
01:37:45,000 --> 01:37:46,000
英文来来表述

4221
01:37:46,000 --> 01:37:47,000
甚至连这个

4222
01:37:47,000 --> 01:37:48,000
比如说定义参数啊

4223
01:37:48,000 --> 01:37:49,000
定义函数

4224
01:37:49,000 --> 01:37:50,000
这些都是用这种方式来做

4225
01:37:50,000 --> 01:37:52,000
他其实可能跟那个时候的那种思潮

4226
01:37:52,000 --> 01:37:53,000
有一定的关系

4227
01:37:53,000 --> 01:37:53,000
但是你说

4228
01:37:53,000 --> 01:37:55,000
Shield 和 Deed

4229
01:37:55,000 --> 01:37:56,000
会比 before 和 after

4230
01:37:56,000 --> 01:37:58,000
更贴近人的使用习惯吗

4231
01:37:58,000 --> 01:37:59,000
我觉得不见得了

4232
01:37:59,000 --> 01:38:00,000
不不

4233
01:38:00,000 --> 01:38:02,000
before after 跟 Shield

4234
01:38:02,000 --> 01:38:03,000
这个肯定是语意上是不一样的

4235
01:38:03,000 --> 01:38:04,000
这个是个判断

4236
01:38:04,000 --> 01:38:04,000
对不对

4237
01:38:04,000 --> 01:38:05,000
他说 Shield

4238
01:38:05,000 --> 01:38:06,000
就是说你会得到一个是

4239
01:38:06,000 --> 01:38:07,000
还是不是

4240
01:38:07,000 --> 01:38:08,000
但你 before 和 after

4241
01:38:08,000 --> 01:38:10,000
他得到的一个结果

4242
01:38:10,000 --> 01:38:10,000
不是一个 bully 吗

4243
01:38:10,000 --> 01:38:13,000
就是要得出一个不耳直

4244
01:38:13,000 --> 01:38:13,000
对吧

4245
01:38:13,000 --> 01:38:14,000
对

4246
01:38:14,000 --> 01:38:14,000
他得到

4247
01:38:14,000 --> 01:38:16,000
他其实是做一个逻辑判断

4248
01:38:16,000 --> 01:38:16,000
就是说你这个时候

4249
01:38:16,000 --> 01:38:18,000
是得到一个是还是否

4250
01:38:18,000 --> 01:38:18,000
对吧

4251
01:38:18,000 --> 01:38:20,000
但是如果你是 before break line

4252
01:38:20,000 --> 01:38:21,000
你得到这个什么东西

4253
01:38:21,000 --> 01:38:21,000
你是看不出来的

4254
01:38:21,000 --> 01:38:24,000
问题是我说的这个 API 是一个

4255
01:38:24,000 --> 01:38:26,000
比如说它是在写

4256
01:38:26,000 --> 01:38:27,000
你在写 GUI 的时候

4257
01:38:27,000 --> 01:38:28,000
你要写一个函数

4258
01:38:28,000 --> 01:38:30,000
这个函数应该在窗口

4259
01:38:30,000 --> 01:38:31,000
被绘制之前调用

4260
01:38:31,000 --> 01:38:32,000
OK

4261
01:38:32,000 --> 01:38:34,000
这个函数名在 OS 10 里面

4262
01:38:34,000 --> 01:38:35,000
叫做

4263
01:38:35,000 --> 01:38:35,000
那就叫 before

4264
01:38:35,000 --> 01:38:37,000
Shield present

4265
01:38:37,000 --> 01:38:37,000
比如说

4266
01:38:37,000 --> 01:38:41,000
但是在别的变成员里面

4267
01:38:41,000 --> 01:38:42,000
它可能就叫 before drawing

4268
01:38:42,000 --> 01:38:43,000
之类的

4269
01:38:43,000 --> 01:38:45,000
那可能就是语意的问题了

4270
01:38:45,000 --> 01:38:46,000
就是你怎么去定义这个东西

4271
01:38:46,000 --> 01:38:48,000
就是总体来讲

4272
01:38:48,000 --> 01:38:49,000
他还是想维持一个

4273
01:38:49,000 --> 01:38:50,000
就是所谓的这个

4274
01:38:50,000 --> 01:38:51,000
真正意义上的可读性

4275
01:38:51,000 --> 01:38:52,000
可读什么意思

4276
01:38:52,000 --> 01:38:53,000
就是你用嘴去念

4277
01:38:53,000 --> 01:38:54,000
那个东西

4278
01:38:54,000 --> 01:38:56,000
他还是得到了一些

4279
01:38:56,000 --> 01:38:57,000
这个一些概念的

4280
01:38:57,000 --> 01:38:58,000
对

4281
01:38:58,000 --> 01:39:00,000
这个东西就是说

4282
01:39:00,000 --> 01:39:02,000
不一定是适合

4283
01:39:02,000 --> 01:39:03,000
比如说假设你是一个

4284
01:39:03,000 --> 01:39:04,000
非英语母语的人

4285
01:39:04,000 --> 01:39:04,000
比如说中国

4286
01:39:04,000 --> 01:39:06,000
中国很多程序员就这样

4287
01:39:06,000 --> 01:39:06,000
为什么老说

4288
01:39:06,000 --> 01:39:07,000
这个中国程序员做的

4289
01:39:07,000 --> 01:39:09,000
这个 API 比较

4290
01:39:09,000 --> 01:39:10,000
比较奇怪

4291
01:39:10,000 --> 01:39:10,000
对吧

4292
01:39:10,000 --> 01:39:12,000
因为他鬼色难懂

4293
01:39:12,000 --> 01:39:12,000
对

4294
01:39:12,000 --> 01:39:12,000
他难懂

4295
01:39:12,000 --> 01:39:13,000
他根本他

4296
01:39:13,000 --> 01:39:14,000
他脑子那边

4297
01:39:14,000 --> 01:39:15,000
不是用那套英文

4298
01:39:15,000 --> 01:39:16,000
那个逻辑来思考的

4299
01:39:16,000 --> 01:39:18,000
所以你怎么可能要求他

4300
01:39:18,000 --> 01:39:19,000
得出一套

4301
01:39:19,000 --> 01:39:21,000
should break a line

4302
01:39:21,000 --> 01:39:22,000
by hevernating before character

4303
01:39:22,000 --> 01:39:22,000
的 index

4304
01:39:22,000 --> 01:39:23,000
这种语句出来

4305
01:39:23,000 --> 01:39:24,000
他肯定不会这么做

4306
01:39:24,000 --> 01:39:24,000
对不对

4307
01:39:24,000 --> 01:39:27,000
所以我们只好写文一文了

4308
01:39:27,000 --> 01:39:27,000
不不不

4309
01:39:27,000 --> 01:39:29,000
中国程序员最大的特点

4310
01:39:29,000 --> 01:39:30,000
不是用拼音缩写吗

4311
01:39:30,000 --> 01:39:34,000
包括很多政府网站都是

4312
01:39:34,000 --> 01:39:35,000
政府网站缩写为

4313
01:39:35,000 --> 01:39:37,000
ZFWZ

4314
01:39:37,000 --> 01:39:39,000
Oh my god

4315
01:39:39,000 --> 01:39:40,000
这也是对

4316
01:39:40,000 --> 01:39:42,000
这也是一个很有意思的

4317
01:39:42,000 --> 01:39:42,000
一个事情

4318
01:39:42,000 --> 01:39:44,000
就是说如果他不用拼音缩写

4319
01:39:44,000 --> 01:39:45,000
他还能用啥

4320
01:39:45,000 --> 01:39:48,000
你说我先把那个翻译一层英文

4321
01:39:48,000 --> 01:39:50,000
对

4322
01:39:50,000 --> 01:39:51,000
这好吧

4323
01:39:51,000 --> 01:39:54,000
我承认刚才我有点英语本位主义了

4324
01:39:54,000 --> 01:39:54,000
不就是

4325
01:39:54,000 --> 01:39:56,000
不也不是说英语本位主义

4326
01:39:56,000 --> 01:39:59,000
其实我觉得在那个就是纯这个技术

4327
01:39:59,000 --> 01:40:00,000
范文成本里面去

4328
01:40:00,000 --> 01:40:01,000
其实是应该英语本位主义的

4329
01:40:01,000 --> 01:40:04,000
因为你的那个所有的那个底层的那些逻辑

4330
01:40:04,000 --> 01:40:06,000
都是英文的方式来命名的

4331
01:40:06,000 --> 01:40:07,000
对不对

4332
01:40:07,000 --> 01:40:08,000
这个毫无疑意吗

4333
01:40:08,000 --> 01:40:08,000
没有问题

4334
01:40:08,000 --> 01:40:10,000
你要针到底层的话是二进制

4335
01:40:10,000 --> 01:40:11,000
就我觉得

4336
01:40:11,000 --> 01:40:12,000
不是

4337
01:40:12,000 --> 01:40:13,000
我就说在

4338
01:40:13,000 --> 01:40:14,000
在那个

4339
01:40:14,000 --> 01:40:16,000
你还比如说你还是会讲这个 console

4340
01:40:16,000 --> 01:40:18,000
你会讲 device

4341
01:40:18,000 --> 01:40:19,000
你会讲这个什么 sockey

4342
01:40:19,000 --> 01:40:21,000
这些这些还是逃不掉的

4343
01:40:21,000 --> 01:40:24,000
就是现在的那些操作系统

4344
01:40:24,000 --> 01:40:26,000
软件系统的那些构建单元

4345
01:40:26,000 --> 01:40:28,000
它还是以这个英文来命名为主的

4346
01:40:28,000 --> 01:40:29,000
你看我说那个东西

4347
01:40:29,000 --> 01:40:30,000
虽然说确实有事

4348
01:40:30,000 --> 01:40:32,000
你是有这个巨饼

4349
01:40:32,000 --> 01:40:32,000
对吧

4350
01:40:32,000 --> 01:40:33,000
你有套接字

4351
01:40:33,000 --> 01:40:33,000
对吧

4352
01:40:33,000 --> 01:40:35,000
但是你不会真的去写这几个字

4353
01:40:35,000 --> 01:40:37,000
你还是写这些 handle

4354
01:40:37,000 --> 01:40:38,000
HDL

4355
01:40:38,000 --> 01:40:40,000
或者是这个 socket 的

4356
01:40:40,000 --> 01:40:41,000
就比如 window handle

4357
01:40:41,000 --> 01:40:42,000
这是一个 windows

4358
01:40:42,000 --> 01:40:43,000
windows 编程

4359
01:40:43,000 --> 01:40:43,000
对对对

4360
01:40:43,000 --> 01:40:45,000
我就说这种底层的概念是英文的

4361
01:40:45,000 --> 01:40:47,000
那么你基于它构建的东西

4362
01:40:47,000 --> 01:40:49,000
你就肯定还是以这个英文来描述它

4363
01:40:49,000 --> 01:40:50,000
你猜

4364
01:40:50,000 --> 01:40:51,000
这条逻辑

4365
01:40:51,000 --> 01:40:52,000
这个才自洽

4366
01:40:52,000 --> 01:40:52,000
才通顺

4367
01:40:52,000 --> 01:40:53,000
对吧

4368
01:40:53,000 --> 01:40:54,000
这个是没有

4369
01:40:54,000 --> 01:40:55,000
这个我觉得是毫无疑问的

4370
01:40:55,000 --> 01:40:56,000
问题是出在刚才你说

4371
01:40:56,000 --> 01:40:58,000
那个就不能放话

4372
01:40:58,000 --> 01:40:59,000
比如说你说那个 1 月 2 月里面

4373
01:40:59,000 --> 01:41:00,000
它是说这个

4374
01:41:00,000 --> 01:41:03,000
我们随便想一个政府网站

4375
01:41:03,000 --> 01:41:04,000
今日公告

4376
01:41:04,000 --> 01:41:04,000
对吧

4377
01:41:04,000 --> 01:41:08,000
它可能是 JRG

4378
01:41:08,000 --> 01:41:09,000
对吧

4379
01:41:09,000 --> 01:41:11,000
那你说那肯定是这么写

4380
01:41:11,000 --> 01:41:13,000
那它说 Today's News

4381
01:41:13,000 --> 01:41:13,000
它不会

4382
01:41:13,000 --> 01:41:14,000
对吧

4383
01:41:14,000 --> 01:41:15,000
它没有一个底层

4384
01:41:15,000 --> 01:41:16,000
没有一个 foundation

4385
01:41:16,000 --> 01:41:17,000
去给你构建这个东西

4386
01:41:17,000 --> 01:41:19,000
所以就那个不成立

4387
01:41:19,000 --> 01:41:21,000
所以就说这两个情况

4388
01:41:21,000 --> 01:41:22,000
我觉得还是不一样

4389
01:41:22,000 --> 01:41:24,000
就是说如果你能够讨论的

4390
01:41:24,000 --> 01:41:25,000
那个最小的那个单位

4391
01:41:25,000 --> 01:41:27,000
或者就是说就是常用的单位

4392
01:41:27,000 --> 01:41:29,000
它是一个什么样的语言描述的

4393
01:41:29,000 --> 01:41:31,000
你可能起上构建东西

4394
01:41:31,000 --> 01:41:32,000
还是要以这个为主

4395
01:41:32,000 --> 01:41:35,000
就好像哪怕你用文言编程的时候

4396
01:41:35,000 --> 01:41:36,000
那除非你把底层的这个什么

4397
01:41:36,000 --> 01:41:38,000
就是巨饼和这个套节字

4398
01:41:38,000 --> 01:41:40,000
都用文言来描述

4399
01:41:40,000 --> 01:41:41,000
不然你就很尴尬

4400
01:41:41,000 --> 01:41:44,000
知乎上不是有一个答案

4401
01:41:44,000 --> 01:41:46,000
说如果就是问题是什么

4402
01:41:46,000 --> 01:41:49,000
如果计算机是中国人发明的

4403
01:41:49,000 --> 01:41:50,000
那么底层会是什么样的

4404
01:41:50,000 --> 01:41:51,000
其实他就把那

4405
01:41:51,000 --> 01:41:54,000
把周易的那套话术套进去了

4406
01:41:54,000 --> 01:41:55,000
阴阳这样

4407
01:41:55,000 --> 01:41:56,000
对对对对

4408
01:41:56,000 --> 01:41:58,000
所以所以我觉得就是说

4409
01:41:58,000 --> 01:41:59,000
你要去评价这个做法

4410
01:41:59,000 --> 01:42:00,000
合不合理的时候

4411
01:42:00,000 --> 01:42:02,000
你都是不能单点来看

4412
01:42:02,000 --> 01:42:03,000
你可能是要成体系的来看

4413
01:42:03,000 --> 01:42:05,000
那现在的这个情况

4414
01:42:05,000 --> 01:42:07,000
就是说计算机的所有的底层的

4415
01:42:07,000 --> 01:42:10,000
这个体系都是以英语为

4416
01:42:10,000 --> 01:42:12,000
为这个主体来构建的

4417
01:42:12,000 --> 01:42:13,000
那你没有办法了

4418
01:42:13,000 --> 01:42:16,000
你就只能跟着这样写了

4419
01:42:16,000 --> 01:42:19,000
不知道有没有什么大神

4420
01:42:19,000 --> 01:42:21,000
可以做一个兼容 UNIX 的

4421
01:42:21,000 --> 01:42:24,000
完全从最底层开始

4422
01:42:24,000 --> 01:42:25,000
就由中文构建的操作

4423
01:42:25,000 --> 01:42:27,000
Chinix

4424
01:42:27,000 --> 01:42:28,000
Chinix

4425
01:42:28,000 --> 01:42:30,000
不行

4426
01:42:30,000 --> 01:42:32,000
我说这个的时候就已经输了

4427
01:42:32,000 --> 01:42:32,000
对不对

4428
01:42:32,000 --> 01:42:33,000
为什么会这么写

4429
01:42:33,000 --> 01:42:36,000
一定要用中文来描述这个东西

4430
01:42:36,000 --> 01:42:39,000
没有必要

4431
01:42:39,000 --> 01:42:42,000
我觉得那个趋势是融合

4432
01:42:42,000 --> 01:42:45,000
就是融合出一种杂柔的

4433
01:42:45,000 --> 01:42:46,000
杂柔的

4434
01:42:46,000 --> 01:42:47,000
对你看那个

4435
01:42:47,000 --> 01:42:48,000
什么什么

4436
01:42:48,000 --> 01:42:50,000
那种比较好的科幻片里面

4437
01:42:50,000 --> 01:42:52,000
未来都是中西文夹合

4438
01:42:52,000 --> 01:42:53,000
科里奥利语

4439
01:42:53,000 --> 01:42:55,000
就网上线所谓的这种什么

4440
01:42:55,000 --> 01:42:58,000
00 后用的那种网络缩写语

4441
01:42:58,000 --> 01:42:59,000
它不就是用那种

4442
01:42:59,000 --> 01:43:02,000
英语的单词和汉语拼音的缩写

4443
01:43:02,000 --> 01:43:03,000
给它混在一起

4444
01:43:03,000 --> 01:43:05,000
然后再用一个手字母缩写

4445
01:43:05,000 --> 01:43:07,000
就这种例子非常的多

4446
01:43:07,000 --> 01:43:09,000
什么 NMSL 这种的

4447
01:43:09,000 --> 01:43:12,000
这种当然是完全的

4448
01:43:12,000 --> 01:43:14,000
这个是汉语拼音的手字母

4449
01:43:14,000 --> 01:43:15,000
还有一些就是

4450
01:43:15,000 --> 01:43:16,000
既用了英语的

4451
01:43:16,000 --> 01:43:18,000
因为现在有些英语单词

4452
01:43:18,000 --> 01:43:19,000
就像那个泰国网友

4453
01:43:19,000 --> 01:43:21,000
泰国网友反击的时候说

4454
01:43:21,000 --> 01:43:23,000
NMSL needs

4455
01:43:23,000 --> 01:43:25,000
你妈死了 needs

4456
01:43:25,000 --> 01:43:27,000
这就是一个很简单的

4457
01:43:27,000 --> 01:43:30,000
科幼二语的例子

4458
01:43:30,000 --> 01:43:38,000
我们来聊这个特殊字符

4459
01:43:38,000 --> 01:43:39,000
刚才讲了一个空格

4460
01:43:39,000 --> 01:43:39,000
这个特殊字符

4461
01:43:39,000 --> 01:43:41,000
其实可能是比较常见

4462
01:43:41,000 --> 01:43:43,000
其实还有很多其他的特殊字符

4463
01:43:43,000 --> 01:43:46,000
不能在很多地方使用的

4464
01:43:46,000 --> 01:43:46,000
对吧

4465
01:43:46,000 --> 01:43:47,000
主要是 Windows

4466
01:43:47,000 --> 01:43:49,000
它那个限制很多

4467
01:43:49,000 --> 01:43:50,000
像 Mac 都没有

4468
01:43:50,000 --> 01:43:52,000
你在 Windows 里面

4469
01:43:52,000 --> 01:43:54,000
命名一个非法的文件的时候

4470
01:43:54,000 --> 01:43:55,000
它会跳出来一个对话框

4471
01:43:55,000 --> 01:43:57,000
里面苦口婆心的告诉你

4472
01:43:57,000 --> 01:43:58,000
哪些文件是

4473
01:43:58,000 --> 01:43:59,000
哪些复发是不能用的

4474
01:43:59,000 --> 01:44:01,000
一大堆

4475
01:44:01,000 --> 01:44:02,000
这个还蛮贴心的

4476
01:44:02,000 --> 01:44:03,000
我觉得

4477
01:44:03,000 --> 01:44:04,000
这个我觉得很好

4478
01:44:04,000 --> 01:44:05,000
就是像 Mac 那种过于自由

4479
01:44:05,000 --> 01:44:06,000
我觉得是有问题的

4480
01:44:06,000 --> 01:44:07,000
就是最好建议你

4481
01:44:07,000 --> 01:44:08,000
不要这样干

4482
01:44:08,000 --> 01:44:09,000
那就是说你

4483
01:44:09,000 --> 01:44:10,000
直接禁止你这么干

4484
01:44:10,000 --> 01:44:11,000
不更好

4485
01:44:11,000 --> 01:44:12,000
但是 Mac 现在也会

4486
01:44:12,000 --> 01:44:13,000
跳出一个对话框

4487
01:44:13,000 --> 01:44:16,000
其实 Mac 也是有禁止字符的

4488
01:44:16,000 --> 01:44:19,000
Mac 其实是不能用那个冒号

4489
01:44:19,000 --> 01:44:24,000
唯一一个不能用的就是在文件名里面是不让用冒号的

4490
01:44:24,000 --> 01:44:25,000
如果你要改冒号的时候

4491
01:44:25,000 --> 01:44:27,000
它会跳出一个对话框

4492
01:44:27,000 --> 01:44:28,000
然后提醒你

4493
01:44:28,000 --> 01:44:29,000
但是他说的

4494
01:44:29,000 --> 01:44:32,000
他说那句话就是比就比 Windows 说的就很温柔

4495
01:44:32,000 --> 01:44:38,000
他说请尝试使用字符较少或不含标点符号的名称

4496
01:44:38,000 --> 01:44:39,000
远点算不算标点符号

4497
01:44:39,000 --> 01:44:40,000
对吧

4498
01:44:40,000 --> 01:44:41,000
这就很奇怪了

4499
01:44:41,000 --> 01:44:41,000
对不对

4500
01:44:41,000 --> 01:44:42,000
因为其实是可以用的

4501
01:44:42,000 --> 01:44:43,000
对你在 Mac

4502
01:44:43,000 --> 01:44:44,000
对

4503
01:44:44,000 --> 01:44:44,000
对

4504
01:44:44,000 --> 01:44:46,000
其实要想一下

4505
01:44:46,000 --> 01:44:47,000
就是为什么

4506
01:44:47,000 --> 01:44:48,000
就即便可以用

4507
01:44:48,000 --> 01:44:51,000
我觉得还是不建议使用这些特殊字符作为文件

4508
01:44:51,000 --> 01:44:52,000
其实有很多比较实际的问题

4509
01:44:52,000 --> 01:44:55,000
比如说这里我们这个 show notes 能列了几个

4510
01:44:55,000 --> 01:44:56,000
就是这个大于号

4511
01:44:56,000 --> 01:44:57,000
小于号

4512
01:44:57,000 --> 01:44:57,000
对吧

4513
01:44:57,000 --> 01:45:01,000
因为这个在就是类于 UNIX 的系统下面

4514
01:45:01,000 --> 01:45:03,000
它就有这个管道重定向的

4515
01:45:03,000 --> 01:45:04,000
它都有其他的特殊意义

4516
01:45:04,000 --> 01:45:05,000
你这样用了之后

4517
01:45:05,000 --> 01:45:07,000
那别人要调用

4518
01:45:07,000 --> 01:45:09,000
或者是要指向你这个文件的时候

4519
01:45:09,000 --> 01:45:11,000
就必须用这个 coding 或打引号的方法

4520
01:45:11,000 --> 01:45:14,000
就其实会增加比较多的麻烦

4521
01:45:14,000 --> 01:45:15,000
对吧

4522
01:45:15,000 --> 01:45:17,000
包括这个 bar 这个 pipe 这个字符

4523
01:45:17,000 --> 01:45:18,000
其实也是

4524
01:45:18,000 --> 01:45:19,000
可以用监控号吗

4525
01:45:19,000 --> 01:45:21,000
UNIX 你没可以用监控号做文件名吗

4526
01:45:21,000 --> 01:45:23,000
可以啊

4527
01:45:23,000 --> 01:45:25,000
你就引起来吗

4528
01:45:25,000 --> 01:45:25,000
OK

4529
01:45:25,000 --> 01:45:27,000
就现在都是这样子

4530
01:45:27,000 --> 01:45:28,000
就是你要往一边写

4531
01:45:28,000 --> 01:45:30,000
理论上都是可行的

4532
01:45:30,000 --> 01:45:31,000
它唯一阻挡你的地方

4533
01:45:31,000 --> 01:45:34,000
无非就是在那个资源管理器的时候弄一个

4534
01:45:34,000 --> 01:45:36,000
但是你自己非要写个程序

4535
01:45:36,000 --> 01:45:37,000
去生成这么一个文件名

4536
01:45:37,000 --> 01:45:39,000
然后再把它放到文词盘上面去

4537
01:45:39,000 --> 01:45:40,000
这个都是可行的

4538
01:45:40,000 --> 01:45:42,000
因为文件系统本身

4539
01:45:42,000 --> 01:45:43,000
它没有这个限制

4540
01:45:43,000 --> 01:45:44,000
不让你存这个东西

4541
01:45:44,000 --> 01:45:45,000
OK

4542
01:45:45,000 --> 01:45:47,000
就他说还就是一个数字

4543
01:45:47,000 --> 01:45:48,000
但我就说从

4544
01:45:48,000 --> 01:45:51,000
对从实用主义的这个观念来讲

4545
01:45:51,000 --> 01:45:52,000
就是尽量去避免这些

4546
01:45:52,000 --> 01:45:54,000
从一出问题的字符会比较好

4547
01:45:54,000 --> 01:45:55,000
那所以其实就回到了

4548
01:45:55,000 --> 01:45:57,000
最开始的那个命名规则了

4549
01:45:57,000 --> 01:46:02,000
就是说如何命名你的这个文件会导致减少问题

4550
01:46:02,000 --> 01:46:03,000
就是不要用标点符号其实是最好的

4551
01:46:03,000 --> 01:46:05,000
任何标

4552
01:46:05,000 --> 01:46:06,000
任何标点符号包括空格

4553
01:46:06,000 --> 01:46:07,000
是最好的

4554
01:46:07,000 --> 01:46:10,000
那个下话线不算

4555
01:46:10,000 --> 01:46:11,000
你要抬杠了

4556
01:46:11,000 --> 01:46:12,000
空格是标点符号吗

4557
01:46:12,000 --> 01:46:12,000
对

4558
01:46:12,000 --> 01:46:15,000
这个标点其实是指的是英语

4559
01:46:15,000 --> 01:46:17,000
英语世界里的标点

4560
01:46:17,000 --> 01:46:18,000
对对对

4561
01:46:18,000 --> 01:46:19,000
中文的话都完全不成的这个问题

4562
01:46:19,000 --> 01:46:20,000
比如说什么

4563
01:46:20,000 --> 01:46:21,000
你要用中文的书名号

4564
01:46:21,000 --> 01:46:22,000
根本就

4565
01:46:22,000 --> 01:46:25,000
就计算不认为它是个特殊符号

4566
01:46:25,000 --> 01:46:25,000
对吧

4567
01:46:25,000 --> 01:46:26,000
这没什么区别

4568
01:46:26,000 --> 01:46:27,000
对

4569
01:46:27,000 --> 01:46:29,000
主要还是因为英语的这个标点符号

4570
01:46:29,000 --> 01:46:30,000
就日常书写中的标点符号

4571
01:46:30,000 --> 01:46:35,000
也被这个程序代码借用来表达了很多特殊的意义

4572
01:46:35,000 --> 01:46:36,000
对

4573
01:46:36,000 --> 01:46:36,000
是的

4574
01:46:36,000 --> 01:46:36,000
是的

4575
01:46:36,000 --> 01:46:40,000
我记得当初刚学编程的时候

4576
01:46:40,000 --> 01:46:40,000
有些

4577
01:46:40,000 --> 01:46:43,000
就有些同学会很疑惑

4578
01:46:43,000 --> 01:46:44,000
为什么英文的

4579
01:46:44,000 --> 01:46:47,000
就是他输入法只装中文输入法

4580
01:46:47,000 --> 01:46:48,000
然后再用中文

4581
01:46:48,000 --> 01:46:49,000
为什么用中文的标点符号

4582
01:46:49,000 --> 01:46:50,000
就看起来跟英文的一模一样

4583
01:46:50,000 --> 01:46:52,000
但是在程序就跑不起来

4584
01:46:52,000 --> 01:46:53,000
这是一个非常

4585
01:46:53,000 --> 01:46:54,000
疑惑的问题

4586
01:46:54,000 --> 01:46:56,000
会困扰初学者的问题

4587
01:46:56,000 --> 01:46:58,000
特别是在那个只有十个像素

4588
01:46:58,000 --> 01:46:59,000
所以十个像素宽的时候

4589
01:46:59,000 --> 01:47:00,000
到底这个中文引号

4590
01:47:00,000 --> 01:47:03,000
中文这个这个括号和英文括号有啥区别

4591
01:47:03,000 --> 01:47:04,000
看不太出来

4592
01:47:04,000 --> 01:47:05,000
就很坑

4593
01:47:05,000 --> 01:47:07,000
所以就是又变成之前

4594
01:47:07,000 --> 01:47:09,000
Unicode 那个玄学的问题

4595
01:47:09,000 --> 01:47:11,000
两个看起来一样的符号

4596
01:47:11,000 --> 01:47:12,000
它应该是一个马尾

4597
01:47:12,000 --> 01:47:15,000
是不是一个深坑

4598
01:47:15,000 --> 01:47:16,000
是

4599
01:47:16,000 --> 01:47:18,000
不过我每次看到这个反斜杠

4600
01:47:18,000 --> 01:47:22,000
就想到日文 Windows 的那个日元符号

4601
01:47:22,000 --> 01:47:23,000
那个是为什么

4602
01:47:23,000 --> 01:47:26,000
因为是因为他刚好是把那个马尾给占了

4603
01:47:26,000 --> 01:47:26,000
所以

4604
01:47:26,000 --> 01:47:27,000
对

4605
01:47:27,000 --> 01:47:29,000
就 ASC 里面借用了

4606
01:47:29,000 --> 01:47:30,000
为什么会借用到这个呢

4607
01:47:30,000 --> 01:47:33,000
就他们那时候一拍脑袋

4608
01:47:33,000 --> 01:47:34,000
就觉得好像说

4609
01:47:34,000 --> 01:47:36,000
这个反斜杠不用

4610
01:47:36,000 --> 01:47:36,000
然后呢

4611
01:47:36,000 --> 01:47:38,000
日本人要用那个

4612
01:47:38,000 --> 01:47:39,000
要用日元符号码

4613
01:47:39,000 --> 01:47:41,000
所以呢

4614
01:47:41,000 --> 01:47:45,000
就在这个马尾上面放上了这个日元符号码

4615
01:47:45,000 --> 01:47:49,000
这个日元符号是在那个 ASC 里的那个头 128 个里面的吗

4616
01:47:49,000 --> 01:47:49,000
对

4617
01:47:49,000 --> 01:47:50,000
哦

4618
01:47:50,000 --> 01:47:51,000
我知道了

4619
01:47:51,000 --> 01:47:52,000
就是占了反斜杠的位置

4620
01:47:52,000 --> 01:47:55,000
所以当年的话就是日本的那个系统

4621
01:47:55,000 --> 01:47:57,000
他就打不出反斜杠的

4622
01:47:57,000 --> 01:47:59,000
就只能打日元符号

4623
01:47:59,000 --> 01:48:00,000
这叫什么来的

4624
01:48:00,000 --> 01:48:02,000
这个以日本为代表的东亚文化

4625
01:48:02,000 --> 01:48:06,000
试图对欧美这个主导的这个什么什么的一个一个一个突破

4626
01:48:06,000 --> 01:48:07,000
对吧

4627
01:48:07,000 --> 01:48:08,000
逆袭

4628
01:48:08,000 --> 01:48:10,000
唯一成功的一次

4629
01:48:10,000 --> 01:48:10,000
对

4630
01:48:10,000 --> 01:48:12,000
因为

4631
01:48:12,000 --> 01:48:15,000
因为其实你看在基本上所有的编码里面

4632
01:48:15,000 --> 01:48:17,000
那个 ASC 里都是作为一个神圣不可动摇的一个基础

4633
01:48:17,000 --> 01:48:18,000
对啊

4634
01:48:18,000 --> 01:48:20,000
而且我觉得他们脑子很奇怪

4635
01:48:20,000 --> 01:48:21,000
如果要换的话

4636
01:48:21,000 --> 01:48:24,000
也也应该把就是把美元符号换成日元符号吗

4637
01:48:24,000 --> 01:48:25,000
对吧

4638
01:48:25,000 --> 01:48:26,000
那么为什么要就

4639
01:48:26,000 --> 01:48:27,000
那不行啊

4640
01:48:27,000 --> 01:48:29,000
那那那那时候美国爸爸就不开心

4641
01:48:29,000 --> 01:48:31,000
这还是不可能的吧

4642
01:48:31,000 --> 01:48:31,000
我觉得吧

4643
01:48:31,000 --> 01:48:35,000
日元符号换成美元符号比换掉后 backslash 更不可取啊

4644
01:48:35,000 --> 01:48:38,000
那个时候美元是多重要的一个东西

4645
01:48:38,000 --> 01:48:39,000
现在很重要吧

4646
01:48:39,000 --> 01:48:43,000
所以他们当时肯定是觉得说这个反鞋杆很不重要

4647
01:48:43,000 --> 01:48:45,000
不重要嘛

4648
01:48:45,000 --> 01:48:45,000
所以呢

4649
01:48:45,000 --> 01:48:46,000
就把这个挪掉了

4650
01:48:46,000 --> 01:48:47,000
结果谁知道呢

4651
01:48:47,000 --> 01:48:49,000
Windows 把这个反鞋杆来做录进了

4652
01:48:49,000 --> 01:48:54,000
结果日本的 Windows 的满满眼都是日元符号

4653
01:48:54,000 --> 01:48:55,000
都是钱

4654
01:48:55,000 --> 01:48:55,000
对

4655
01:48:55,000 --> 01:48:56,000
啊

4656
01:48:56,000 --> 01:48:57,000
等一下等一下

4657
01:48:57,000 --> 01:48:59,000
刚才万杰说了一个就是

4658
01:48:59,000 --> 01:49:02,000
在 Mac 里面的唯一一个不让用的是冒号吗

4659
01:49:02,000 --> 01:49:03,000
对吧

4660
01:49:03,000 --> 01:49:05,000
其实这个冒号啊

4661
01:49:05,000 --> 01:49:06,000
呃

4662
01:49:06,000 --> 01:49:08,000
是我们这平时用在 GUI

4663
01:49:08,000 --> 01:49:11,000
就是在图形界面上不让用冒号的

4664
01:49:11,000 --> 01:49:11,000
嗯

4665
01:49:11,000 --> 01:49:14,000
因为是他们那个路径其实用的是冒号对吧

4666
01:49:14,000 --> 01:49:16,000
所以是他那个路径的保留字

4667
01:49:16,000 --> 01:49:18,000
其实就是老翻译的里面

4668
01:49:18,000 --> 01:49:20,000
等一下我试一下

4669
01:49:20,000 --> 01:49:22,000
命令行面是可以用冒号的

4670
01:49:22,000 --> 01:49:24,000
在命令行是可以用冒号的对吧

4671
01:49:24,000 --> 01:49:28,000
然后在图形界面是可以用斜杠的

4672
01:49:28,000 --> 01:49:30,000
但是同样一个文件名

4673
01:49:30,000 --> 01:49:33,000
在命令行里面这个斜杠会变成冒号

4674
01:49:33,000 --> 01:49:35,000
诶

4675
01:49:35,000 --> 01:49:39,000
等一下我刚才在命令行里面建了一个带冒号的文件

4676
01:49:39,000 --> 01:49:42,000
然后在图形界面看它变成了一个斜杠

4677
01:49:42,000 --> 01:49:43,000
对

4678
01:49:43,000 --> 01:49:44,000
嗯

4679
01:49:44,000 --> 01:49:45,000
就交替了

4680
01:49:45,000 --> 01:49:47,000
对

4681
01:49:47,000 --> 01:49:48,000
是反着的

4682
01:49:48,000 --> 01:49:48,000
嗯

4683
01:49:48,000 --> 01:49:49,000
诶

4684
01:49:49,000 --> 01:49:50,000
为什么是会这样的

4685
01:49:50,000 --> 01:49:53,000
因为冒号在 GUI 里面有别的作用吗

4686
01:49:53,000 --> 01:49:55,000
我靠太生气了

4687
01:49:55,000 --> 01:49:57,000
冒号在图形界面有什么用啊

4688
01:49:57,000 --> 01:50:00,000
在图形界面里面是不让用冒号的文件名

4689
01:50:00,000 --> 01:50:03,000
那他那他为什么要写这双斜杠呢

4690
01:50:03,000 --> 01:50:05,000
这个很难理解啊

4691
01:50:05,000 --> 01:50:11,000
反正现在你现在 Mac 的处理方式就是图形界面和和这个命令行里面

4692
01:50:11,000 --> 01:50:12,000
冒号和斜杠是反着的

4693
01:50:12,000 --> 01:50:14,000
互相替代

4694
01:50:14,000 --> 01:50:17,000
因为在早期的 Finder 里面

4695
01:50:17,000 --> 01:50:22,000
早期的 Finder 里面的这个路径是用冒号隔开的

4696
01:50:22,000 --> 01:50:23,000
诶

4697
01:50:23,000 --> 01:50:23,000
真的我

4698
01:50:23,000 --> 01:50:26,000
真的会反过来

4699
01:50:26,000 --> 01:50:26,000
诶

4700
01:50:26,000 --> 01:50:27,000
我第一次知道有这个事情

4701
01:50:27,000 --> 01:50:30,000
就是我在 Finder 里面建一个 Full

4702
01:50:30,000 --> 01:50:31,000
斜杠 Bar

4703
01:50:31,000 --> 01:50:33,000
在 Terminal 里面显示为

4704
01:50:33,000 --> 01:50:35,000
Terminal 显示为 Full 冒号 Bar

4705
01:50:35,000 --> 01:50:37,000
我不跟你说了

4706
01:50:37,000 --> 01:50:38,000
我再说一遍

4707
01:50:38,000 --> 01:50:44,000
就是在老的 Finder 就是老的系统里面就是 classical 的这个 Mac 里面

4708
01:50:44,000 --> 01:50:48,000
Finder 的路径的分割服

4709
01:50:48,000 --> 01:50:48,000
是用冒号

4710
01:50:48,000 --> 01:50:49,000
路径分割

4711
01:50:49,000 --> 01:50:51,000
Windows 是反斜杠嘛

4712
01:50:51,000 --> 01:50:52,000
在 Finder 里面是冒号

4713
01:50:52,000 --> 01:50:53,000
OK

4714
01:50:53,000 --> 01:50:55,000
果然是一个用过 classicMac 的人

4715
01:50:55,000 --> 01:50:58,000
我怪不得我就说

4716
01:50:58,000 --> 01:51:03,000
所以这是老 Mac 系统里面唯一一个的这个预留字

4717
01:51:03,000 --> 01:51:04,000
OK

4718
01:51:04,000 --> 01:51:06,000
明白明白

4719
01:51:06,000 --> 01:51:10,000
所以直到现在为止 Mac 也是只不让用

4720
01:51:10,000 --> 01:51:13,000
然后这个它会跟斜杆转移

4721
01:51:13,000 --> 01:51:13,000
OK

4722
01:51:13,000 --> 01:51:18,000
但现在其实已经没有再有这个 classicMac 了

4723
01:51:18,000 --> 01:51:18,000
对吧

4724
01:51:18,000 --> 01:51:22,000
所以这个转移其实完全没有什么现实意义了

4725
01:51:22,000 --> 01:51:26,000
它就变成这个图形界面的一个 Finder 的一个那个 Spec

4726
01:51:26,000 --> 01:51:27,000
OK

4727
01:51:27,000 --> 01:51:29,000
这个很有意思

4728
01:51:29,000 --> 01:51:30,000
这样我想起了

4729
01:51:30,000 --> 01:51:30,000
Windows

4730
01:51:30,000 --> 01:51:34,000
Windows 其实除了文件名不能用特殊字符之外

4731
01:51:34,000 --> 01:51:36,000
还不能用一些特殊保留字

4732
01:51:36,000 --> 01:51:39,000
比如说你不能把一个文件名叫做 Kong

4733
01:51:39,000 --> 01:51:40,000
Kong 是因为什么

4734
01:51:40,000 --> 01:51:42,000
是因为那个串口的一种意思

4735
01:51:42,000 --> 01:51:44,000
Kong 是 Console 吧

4736
01:51:44,000 --> 01:51:47,000
然后还有什么 PRN 还是 PNT

4737
01:51:47,000 --> 01:51:48,000
还有 Aux

4738
01:51:48,000 --> 01:51:49,000
Auxiliary

4739
01:51:49,000 --> 01:51:50,000
对也不行

4740
01:51:50,000 --> 01:51:51,000
对

4741
01:51:51,000 --> 01:51:52,000
这个当时是为什么

4742
01:51:52,000 --> 01:51:53,000
我记得有这个事

4743
01:51:53,000 --> 01:51:55,000
但我忘了原因是什么了

4744
01:51:55,000 --> 01:51:56,000
Kong 是 Console

4745
01:51:56,000 --> 01:51:58,000
就是你要是打 CopyCon

4746
01:51:58,000 --> 01:52:00,000
然后 Kong 格 Target.txt

4747
01:52:00,000 --> 01:52:01,000
你就可以输入

4748
01:52:01,000 --> 01:52:04,000
从那个 Console 上输入字符

4749
01:52:04,000 --> 01:52:08,000
然后把它存成 Target.txt

4750
01:52:08,000 --> 01:52:11,000
就是 Con 实际上是 Console 的一个 RM

4751
01:52:11,000 --> 01:52:13,000
有特殊意义的这个名字

4752
01:52:13,000 --> 01:52:14,000
对吧

4753
01:52:14,000 --> 01:52:14,000
对

4754
01:52:14,000 --> 01:52:16,000
它不是不能存在这个文件名字

4755
01:52:16,000 --> 01:52:16,000
对

4756
01:52:16,000 --> 01:52:19,000
相当于一个相当于 Terminal 里面的保留字了

4757
01:52:19,000 --> 01:52:22,000
对

4758
01:52:22,000 --> 01:52:23,000
但这个还蛮不

4759
01:52:23,000 --> 01:52:25,000
我觉得这个还蛮不合理的

4760
01:52:25,000 --> 01:52:26,000
这个其实很常用

4761
01:52:26,000 --> 01:52:27,000
这个

4762
01:52:27,000 --> 01:52:30,000
就它要为了解决这个问题

4763
01:52:30,000 --> 01:52:33,000
直接禁掉了好几个比较简短的名字

4764
01:52:33,000 --> 01:52:34,000
那你如果这样

4765
01:52:34,000 --> 01:52:36,000
你还不如直接用一个什么特殊符号

4766
01:52:36,000 --> 01:52:38,000
引起来

4767
01:52:38,000 --> 01:52:39,000
或者你在前面加一个

4768
01:52:39,000 --> 01:52:41,000
你在前面加一个 Escape 也可以

4769
01:52:41,000 --> 01:52:43,000
要不然是下滑线 Aux

4770
01:52:43,000 --> 01:52:44,000
都要比 Aux 好吧

4771
01:52:44,000 --> 01:52:47,000
或者是就是你用

4772
01:52:47,000 --> 01:52:49,000
你反正已经有那么多特殊字符不能用了

4773
01:52:49,000 --> 01:52:49,000
对吧

4774
01:52:49,000 --> 01:52:52,000
你就把用一个特殊字符来作为一个前缀了

4775
01:52:52,000 --> 01:52:56,000
或者用比如说美元符号这种情况

4776
01:52:56,000 --> 01:52:56,000
对吧

4777
01:52:56,000 --> 01:52:59,000
因为基本上不会有人把文件名名为

4778
01:52:59,000 --> 01:53:02,000
美元符号开头的文件名吧

4779
01:53:02,000 --> 01:53:02,000
用哪儿呢

4780
01:53:02,000 --> 01:53:03,000
也难说

4781
01:53:03,000 --> 01:53:05,000
你说所以呀

4782
01:53:05,000 --> 01:53:05,000
那个时候

4783
01:53:05,000 --> 01:53:08,000
假如我们来做系统的话

4784
01:53:08,000 --> 01:53:10,000
就是当时这种选择

4785
01:53:10,000 --> 01:53:11,000
肯定有它不合理的

4786
01:53:11,000 --> 01:53:12,000
那个这个傻逼的地方

4787
01:53:12,000 --> 01:53:13,000
对吧

4788
01:53:13,000 --> 01:53:14,000
但是肯定有很多情况也是有

4789
01:53:14,000 --> 01:53:16,000
不得已而为之的办法

4790
01:53:16,000 --> 01:53:19,000
Legacy

4791
01:53:19,000 --> 01:53:22,000
路径依赖真的可以解释很多问题

4792
01:53:22,000 --> 01:53:23,000
对啊

4793
01:53:23,000 --> 01:53:24,000
你看你说这个刚才讲

4794
01:53:24,000 --> 01:53:25,000
为什么 MacOS 现在里面

4795
01:53:25,000 --> 01:53:27,000
你用一个反鞋杠会变成

4796
01:53:27,000 --> 01:53:29,000
在图形界面

4797
01:53:29,000 --> 01:53:31,000
字符界面会变成冒号对吧

4798
01:53:31,000 --> 01:53:32,000
然后这个冒号

4799
01:53:32,000 --> 01:53:33,000
这边又反过来

4800
01:53:33,000 --> 01:53:37,000
不就是因为和这个 ClassicMac 要兼容吗

4801
01:53:37,000 --> 01:53:39,000
这个也是非常

4802
01:53:39,000 --> 01:53:41,000
而且因为我们原来

4803
01:53:41,000 --> 01:53:43,000
我自己原来是最早学到此的

4804
01:53:43,000 --> 01:53:46,000
我是打死我也不会敢在一个文件名

4805
01:53:46,000 --> 01:53:47,000
用斜杠的

4806
01:53:47,000 --> 01:53:47,000
说什么

4807
01:53:47,000 --> 01:53:51,000
会出问题

4808
01:53:51,000 --> 01:53:51,000
多恐怖的件事情

4809
01:53:51,000 --> 01:53:52,000
然后

4810
01:53:52,000 --> 01:53:55,000
然后现在在 Mac 居然可以用斜杠

4811
01:53:55,000 --> 01:53:57,000
就首先这是第一个意外

4812
01:53:57,000 --> 01:53:58,000
然后我再用这个

4813
01:53:58,000 --> 01:54:00,000
命令行再去看一下

4814
01:54:00,000 --> 01:54:01,000
发现变成冒号了

4815
01:54:01,000 --> 01:54:02,000
就变成第二个意外

4816
01:54:02,000 --> 01:54:03,000
就疯掉了

4817
01:54:03,000 --> 01:54:04,000
所以它到底那个情况

4818
01:54:04,000 --> 01:54:06,000
那到底它存的是冒号

4819
01:54:06,000 --> 01:54:07,000
还存的是斜杠的

4820
01:54:07,000 --> 01:54:07,000
就是在

4821
01:54:07,000 --> 01:54:09,000
这么描述这件事情

4822
01:54:09,000 --> 01:54:11,000
应该也还是以图

4823
01:54:11,000 --> 01:54:12,000
以字符界面的为准吧

4824
01:54:12,000 --> 01:54:14,000
就只是说

4825
01:54:14,000 --> 01:54:15,000
发现它是个显示的问题

4826
01:54:15,000 --> 01:54:15,000
真的

4827
01:54:15,000 --> 01:54:19,000
UNIX 上面的文件名是存在哪的

4828
01:54:19,000 --> 01:54:20,000
是存在 iNode 上的吧

4829
01:54:20,000 --> 01:54:24,000
应该是吧

4830
01:54:24,000 --> 01:54:25,000
看那个文件系统

4831
01:54:25,000 --> 01:54:26,000
所以你要用一个

4832
01:54:26,000 --> 01:54:29,000
你要去文件系统里面

4833
01:54:29,000 --> 01:54:29,000
看这个东西

4834
01:54:29,000 --> 01:54:30,000
到底是底层

4835
01:54:30,000 --> 01:54:31,000
是被存成的哪一个字符

4836
01:54:31,000 --> 01:54:32,000
是吧

4837
01:54:32,000 --> 01:54:32,000
对对对

4838
01:54:32,000 --> 01:54:34,000
我很好奇这件事情

4839
01:54:34,000 --> 01:54:35,000
它到底存在那里存的是啥

4840
01:54:35,000 --> 01:54:37,000
我压冒号

4841
01:54:37,000 --> 01:54:39,000
我也赌

4842
01:54:39,000 --> 01:54:40,000
应该是冒号

4843
01:54:40,000 --> 01:54:43,000
我也觉得应该是冒号

4844
01:54:43,000 --> 01:54:43,000
对

4845
01:54:43,000 --> 01:54:45,000
斜杠只是给你们这些

4846
01:54:45,000 --> 01:54:47,000
愚蠢的人类看一看而已

4847
01:54:47,000 --> 01:54:49,000
斜杠 is illusion

4848
01:54:49,000 --> 01:54:50,000
追寻它底层

4849
01:54:50,000 --> 01:54:51,000
到底是什么字符

4850
01:54:51,000 --> 01:54:53,000
这个问题就留给 Rail

4851
01:54:53,000 --> 01:54:55,000
当做他的课后作业了

4852
01:54:55,000 --> 01:55:00,000
好的

4853
01:55:00,000 --> 01:55:03,000
所以你看

4854
01:55:03,000 --> 01:55:04,000
如果这种情况发生

4855
01:55:04,000 --> 01:55:05,000
就是你们想怎么办

4856
01:55:05,000 --> 01:55:06,000
就是会发生什么事情

4857
01:55:06,000 --> 01:55:08,000
这个也是一个小作业

4858
01:55:08,000 --> 01:55:12,000
Mac 上可以的文件名

4859
01:55:12,000 --> 01:55:13,000
往 Windows 上

4860
01:55:13,000 --> 01:55:15,000
比如拿个 U 盘复制过去

4861
01:55:15,000 --> 01:55:16,000
或者是反过来

4862
01:55:16,000 --> 01:55:18,000
Windows 上可以有的文件名

4863
01:55:18,000 --> 01:55:19,000
往 Mac 上复制

4864
01:55:19,000 --> 01:55:19,000
会发生什么

4865
01:55:19,000 --> 01:55:21,000
它会把你改掉

4866
01:55:21,000 --> 01:55:22,000
还是会报错

4867
01:55:22,000 --> 01:55:25,000
它不会报错

4868
01:55:25,000 --> 01:55:26,000
它会自动把你改掉

4869
01:55:26,000 --> 01:55:28,000
就是直接越主带袍了

4870
01:55:28,000 --> 01:55:29,000
说你只能这么干

4871
01:55:29,000 --> 01:55:29,000
对吧

4872
01:55:29,000 --> 01:55:30,000
改掉是什么意思

4873
01:55:30,000 --> 01:55:32,000
它会替换掉

4874
01:55:32,000 --> 01:55:33,000
我有个问题

4875
01:55:33,000 --> 01:55:35,000
就比如说我现在有一个 U 盘

4876
01:55:35,000 --> 01:55:38,000
然后我把 Mac 上一个包含了

4877
01:55:38,000 --> 01:55:39,000
Windows 非法字符的文件

4878
01:55:39,000 --> 01:55:41,000
考过去了

4879
01:55:41,000 --> 01:55:43,000
然后我这 U 盘插到 Windows 上

4880
01:55:43,000 --> 01:55:45,000
它的资源管理器看起来是什么样的

4881
01:55:45,000 --> 01:55:47,000
在非法的边缘试探

4882
01:55:47,000 --> 01:55:49,000
直接炸了

4883
01:55:49,000 --> 01:55:51,000
你自己试一下

4884
01:55:51,000 --> 01:55:56,000
比如说我要整一个

4885
01:55:56,000 --> 01:55:58,000
你整一个 U 盘的这个 Aux

4886
01:55:58,000 --> 01:55:59,000
COM 1

4887
01:55:59,000 --> 01:55:59,000
COM 2

4888
01:55:59,000 --> 01:56:00,000
COM 3

4889
01:56:00,000 --> 01:56:02,000
COM 的 LPT 1 都放进去

4890
01:56:02,000 --> 01:56:03,000
然后你怎么办

4891
01:56:03,000 --> 01:56:04,000
然后拿到文字上去

4892
01:56:04,000 --> 01:56:05,000
无法打开

4893
01:56:05,000 --> 01:56:07,000
不可以打开这个文件

4894
01:56:07,000 --> 01:56:08,000
就不可以打开

4895
01:56:08,000 --> 01:56:08,000
那是后来的吗

4896
01:56:08,000 --> 01:56:09,000
就我首先

4897
01:56:09,000 --> 01:56:11,000
我还能不能看到这文件呢

4898
01:56:11,000 --> 01:56:12,000
这文件是在

4899
01:56:12,000 --> 01:56:13,000
直接在我的 U 盘上

4900
01:56:13,000 --> 01:56:14,000
就是看不到了吗

4901
01:56:14,000 --> 01:56:15,000
是怎么样的

4902
01:56:15,000 --> 01:56:17,000
不知道

4903
01:56:17,000 --> 01:56:19,000
我们可以做个实验室

4904
01:56:19,000 --> 01:56:20,000
还是会被转移掉呢

4905
01:56:20,000 --> 01:56:21,000
还是

4906
01:56:21,000 --> 01:56:23,000
那个符号可以转移

4907
01:56:23,000 --> 01:56:25,000
但是像 Windows 的那几个

4908
01:56:25,000 --> 01:56:28,000
就不可能存在的文件名

4909
01:56:28,000 --> 01:56:30,000
你肯定就比较尴尬了

4910
01:56:30,000 --> 01:56:31,000
就让我想起来

4911
01:56:31,000 --> 01:56:32,000
那个 VimRC

4912
01:56:32,000 --> 01:56:35,000
如果你手工创建一个

4913
01:56:35,000 --> 01:56:36,000
以点开头的文件的话

4914
01:56:36,000 --> 01:56:37,000
是做不到的

4915
01:56:37,000 --> 01:56:39,000
但是你可以通过编辑器

4916
01:56:39,000 --> 01:56:41,000
把它另存为这样一个文件

4917
01:56:41,000 --> 01:56:42,000
在 Windows 里面是可以的

4918
01:56:42,000 --> 01:56:44,000
点开头的文件

4919
01:56:44,000 --> 01:56:45,000
在 Unix 下面

4920
01:56:45,000 --> 01:56:47,000
它是叫做隐藏文件的意思

4921
01:56:47,000 --> 01:56:48,000
就是隐藏的

4922
01:56:48,000 --> 01:56:49,000
Listing 是看不见

4923
01:56:49,000 --> 01:56:50,000
Mac 也是吗

4924
01:56:50,000 --> 01:56:50,000
对

4925
01:56:50,000 --> 01:56:51,000
MacOS

4926
01:56:51,000 --> 01:56:52,000
MacOS

4927
01:56:52,000 --> 01:56:52,000
他继承了

4928
01:56:52,000 --> 01:56:54,000
这 Unix 那套逻辑

4929
01:56:54,000 --> 01:56:55,000
他也是用了这个东西的

4930
01:56:55,000 --> 01:56:57,000
Unix 在早期的时候

4931
01:56:57,000 --> 01:56:58,000
没有隐藏文件这个概念

4932
01:56:58,000 --> 01:56:59,000
它只不过在

4933
01:56:59,000 --> 01:57:00,000
比如说你在 LS

4934
01:57:00,000 --> 01:57:01,000
或者是在什么的时候

4935
01:57:01,000 --> 01:57:04,000
它默认会跳过那些点和点点

4936
01:57:04,000 --> 01:57:06,000
因为代表本级不如

4937
01:57:06,000 --> 01:57:06,000
和上级不如

4938
01:57:06,000 --> 01:57:08,000
所以有些人就发现

4939
01:57:08,000 --> 01:57:10,000
那我直接把文件一点

4940
01:57:10,000 --> 01:57:11,000
点叉叉叉

4941
01:57:11,000 --> 01:57:11,000
对

4942
01:57:11,000 --> 01:57:13,000
它就不会列出来了

4943
01:57:13,000 --> 01:57:16,000
所以就是为了不写代码

4944
01:57:16,000 --> 01:57:17,000
为了损事

4945
01:57:17,000 --> 01:57:17,000
为了损事

4946
01:57:17,000 --> 01:57:18,000
想出来的一个 hack

4947
01:57:18,000 --> 01:57:19,000
对

4948
01:57:19,000 --> 01:57:20,000
其实也好了

4949
01:57:20,000 --> 01:57:21,000
这种为了损事

4950
01:57:21,000 --> 01:57:24,000
至少我觉得还有个什么客观的理由

4951
01:57:24,000 --> 01:57:24,000
对吧

4952
01:57:24,000 --> 01:57:26,000
COME 1 怎么一回事

4953
01:57:26,000 --> 01:57:26,000
就是这个

4954
01:57:26,000 --> 01:57:29,000
这很过分

4955
01:57:29,000 --> 01:57:30,000
你知道吗

4956
01:57:30,000 --> 01:57:30,000
始终不能忘回

4957
01:57:30,000 --> 01:57:31,000
因为有更好的选择

4958
01:57:31,000 --> 01:57:32,000
对

4959
01:57:32,000 --> 01:57:33,000
还要这样

4960
01:57:33,000 --> 01:57:34,000
这个 COME

4961
01:57:34,000 --> 01:57:36,000
从 12356789

4962
01:57:36,000 --> 01:57:40,000
然后还有 LT

4963
01:57:40,000 --> 01:57:42,000
LPT 的 12356789

4964
01:57:42,000 --> 01:57:43,000
都是不能用打

4965
01:57:43,000 --> 01:57:43,000
LT 是什么

4966
01:57:43,000 --> 01:57:44,000
是打印机

4967
01:57:44,000 --> 01:57:45,000
那个什么接口吗

4968
01:57:45,000 --> 01:57:46,000
还是什么玩意儿

4969
01:57:46,000 --> 01:57:47,000
LT 好像是打印机

4970
01:57:47,000 --> 01:57:49,000
但反正我记得

4971
01:57:49,000 --> 01:57:51,000
就当年那个真是打印机

4972
01:57:51,000 --> 01:57:52,000
有这个接口是这样子

4973
01:57:52,000 --> 01:57:53,000
对

4974
01:57:53,000 --> 01:57:56,000
OK

4975
01:57:56,000 --> 01:57:57,000
终于可以聊大小学的问题了

4976
01:57:57,000 --> 01:58:00,000
又是一个深深的坑

4977
01:58:00,000 --> 01:58:03,000
我先理一下

4978
01:58:03,000 --> 01:58:03,000
现在是什么一个情况

4979
01:58:03,000 --> 01:58:04,000
就是说

4980
01:58:04,000 --> 01:58:06,000
我们都

4981
01:58:06,000 --> 01:58:07,000
我们不考古了

4982
01:58:07,000 --> 01:58:09,000
就只聊现在这个文件系统

4983
01:58:09,000 --> 01:58:10,000
现在这个操作系统

4984
01:58:10,000 --> 01:58:12,000
在 Mac 上面

4985
01:58:12,000 --> 01:58:13,000
默认情况下

4986
01:58:13,000 --> 01:58:14,000
是可以

4987
01:58:14,000 --> 01:58:15,000
叫什么来的

4988
01:58:15,000 --> 01:58:16,000
区分

4989
01:58:16,000 --> 01:58:17,000
这里要先讲两个概念

4990
01:58:17,000 --> 01:58:19,000
什么叫大小写敏感

4991
01:58:19,000 --> 01:58:20,000
和大小写保留

4992
01:58:20,000 --> 01:58:21,000
对吧

4993
01:58:21,000 --> 01:58:22,000
这两个概念是什么意思

4994
01:58:22,000 --> 01:58:23,000
就是说

4995
01:58:23,000 --> 01:58:24,000
假设我写这个

4996
01:58:24,000 --> 01:58:26,000
AB

4997
01:58:26,000 --> 01:58:28,000
然后 A 大写 B 小写

4998
01:58:28,000 --> 01:58:29,000
和写 AB

4999
01:58:29,000 --> 01:58:30,000
都小写的情况下

5000
01:58:30,000 --> 01:58:31,000
它是

5001
01:58:31,000 --> 01:58:32,000
应该是一个文件

5002
01:58:32,000 --> 01:58:33,000
还是两个文件的问题

5003
01:58:33,000 --> 01:58:34,000
如果说它两个是

5004
01:58:34,000 --> 01:58:36,000
你认为它是两个

5005
01:58:36,000 --> 01:58:36,000
是一个文件

5006
01:58:36,000 --> 01:58:37,000
它说明这个系统

5007
01:58:37,000 --> 01:58:38,000
是大小写不敏感

5008
01:58:38,000 --> 01:58:39,000
对吧

5009
01:58:39,000 --> 01:58:39,000
因为它认为

5010
01:58:39,000 --> 01:58:41,000
它是同等的一个东西

5011
01:58:41,000 --> 01:58:41,000
这个时候

5012
01:58:41,000 --> 01:58:42,000
比如说我们从

5013
01:58:42,000 --> 01:58:43,000
从这个

5014
01:58:43,000 --> 01:58:44,000
从这个实现的逻辑来讲

5015
01:58:44,000 --> 01:58:45,000
你可以认为说

5016
01:58:45,000 --> 01:58:46,000
那存的时候

5017
01:58:46,000 --> 01:58:46,000
都是把

5018
01:58:46,000 --> 01:58:48,000
这个东西转移成

5019
01:58:48,000 --> 01:58:49,000
这个小写

5020
01:58:49,000 --> 01:58:50,000
然后存在文件系统里面去

5021
01:58:50,000 --> 01:58:51,000
或者是

5022
01:58:51,000 --> 01:58:51,000
都是

5023
01:58:51,000 --> 01:58:51,000
都是

5024
01:58:51,000 --> 01:58:53,000
做成大写

5025
01:58:53,000 --> 01:58:53,000
存在文件系统里面去

5026
01:58:53,000 --> 01:58:54,000
这个不重要

5027
01:58:54,000 --> 01:58:54,000
但是

5028
01:58:54,000 --> 01:58:55,000
比如 DOS

5029
01:58:55,000 --> 01:58:56,000
DOS 的标准操作

5030
01:58:56,000 --> 01:58:58,000
好像全都是大写

5031
01:58:58,000 --> 01:58:59,000
大写

5032
01:58:59,000 --> 01:58:59,000
对对对

5033
01:58:59,000 --> 01:59:00,000
就是这个是

5034
01:59:00,000 --> 01:59:01,000
就是敏不敏感的问题

5035
01:59:01,000 --> 01:59:02,000
这个

5036
01:59:02,000 --> 01:59:03,000
保不保留

5037
01:59:03,000 --> 01:59:03,000
或者叫

5038
01:59:03,000 --> 01:59:04,000
因为你们叫做

5039
01:59:04,000 --> 01:59:04,000
preserving

5040
01:59:04,000 --> 01:59:06,000
就是 case preserving

5041
01:59:06,000 --> 01:59:06,000
的问题

5042
01:59:06,000 --> 01:59:07,000
就是说

5043
01:59:07,000 --> 01:59:08,000
虽然你可以不敏感

5044
01:59:08,000 --> 01:59:09,000
但是你也可以保留

5045
01:59:09,000 --> 01:59:10,000
这个的区别

5046
01:59:10,000 --> 01:59:11,000
就是什么意思

5047
01:59:11,000 --> 01:59:12,000
你还是知道

5048
01:59:12,000 --> 01:59:13,000
说这个

5049
01:59:13,000 --> 01:59:14,000
虽然说 A

5050
01:59:14,000 --> 01:59:15,000
大 A 小 B

5051
01:59:15,000 --> 01:59:16,000
和小 A 小 B

5052
01:59:16,000 --> 01:59:17,000
都是

5053
01:59:17,000 --> 01:59:19,000
都是你认为是等价的

5054
01:59:19,000 --> 01:59:19,000
但是你还是把

5055
01:59:19,000 --> 01:59:20,000
这个大 A 小 B

5056
01:59:20,000 --> 01:59:21,000
给存下来了

5057
01:59:21,000 --> 01:59:23,000
对吧

5058
01:59:23,000 --> 01:59:24,000
抄只是照抄而已

5059
01:59:24,000 --> 01:59:25,000
但是还是把它

5060
01:59:25,000 --> 01:59:26,000
单的一样的

5061
01:59:26,000 --> 01:59:27,000
对

5062
01:59:27,000 --> 01:59:27,000
所以这里面

5063
01:59:27,000 --> 01:59:29,000
我就一直没想明白

5064
01:59:29,000 --> 01:59:29,000
这个事情

5065
01:59:29,000 --> 01:59:30,000
就是说

5066
01:59:30,000 --> 01:59:31,000
既然大小鞋

5067
01:59:31,000 --> 01:59:35,000
都不敏感了

5068
01:59:35,000 --> 01:59:35,000
对吧

5069
01:59:35,000 --> 01:59:37,000
你为什么还要保留呢

5070
01:59:37,000 --> 01:59:37,000
就其实没什么用

5071
01:59:37,000 --> 01:59:39,000
我觉得是为了客户

5072
01:59:39,000 --> 01:59:40,000
用户方面

5073
01:59:40,000 --> 01:59:42,000
因为用户有时候

5074
01:59:42,000 --> 01:59:42,000
就看起来

5075
01:59:42,000 --> 01:59:42,000
对

5076
01:59:42,000 --> 01:59:44,000
这就是拉丁字母

5077
01:59:44,000 --> 01:59:45,000
本位的表现

5078
01:59:45,000 --> 01:59:47,000
因为使用拉丁字母的人

5079
01:59:47,000 --> 01:59:49,000
他们有大鞋和小鞋

5080
01:59:49,000 --> 01:59:50,000
但是他们在

5081
01:59:50,000 --> 01:59:52,000
他们脑海中

5082
01:59:52,000 --> 01:59:54,000
对这个大鞋和小鞋的区分的

5083
01:59:54,000 --> 01:59:55,000
语义的识别能力

5084
01:59:55,000 --> 01:59:56,000
会相对弱一点

5085
01:59:56,000 --> 01:59:57,000
他们会认为

5086
01:59:57,000 --> 01:59:58,000
他们是一样的

5087
01:59:58,000 --> 02:00:00,000
意思上是一样的

5088
02:00:00,000 --> 02:00:00,000
对

5089
02:00:00,000 --> 02:00:02,000
形式上写的不一样

5090
02:00:02,000 --> 02:00:04,000
其实跟 unicode 的问题

5091
02:00:04,000 --> 02:00:05,000
是有点类似的

5092
02:00:05,000 --> 02:00:05,000
对吧

5093
02:00:05,000 --> 02:00:07,000
而且刚才也不说了

5094
02:00:07,000 --> 02:00:09,000
各种什么 camel case

5095
02:00:09,000 --> 02:00:09,000
这种东西

5096
02:00:09,000 --> 02:00:10,000
其实它大小鞋

5097
02:00:10,000 --> 02:00:13,000
只是为了容易读

5098
02:00:13,000 --> 02:00:14,000
对吧

5099
02:00:14,000 --> 02:00:15,000
意思其实是一样的

5100
02:00:15,000 --> 02:00:15,000
对

5101
02:00:15,000 --> 02:00:18,000
所以就是看起来好看而已

5102
02:00:18,000 --> 02:00:21,000
然后还是单做一个东西

5103
02:00:21,000 --> 02:00:22,000
但这些这里

5104
02:00:22,000 --> 02:00:23,000
其实是在不同语境下面

5105
02:00:23,000 --> 02:00:25,000
这个东西是有非常大的区别的

5106
02:00:25,000 --> 02:00:25,000
虽然说我们

5107
02:00:25,000 --> 02:00:26,000
我们就回到刚才

5108
02:00:26,000 --> 02:00:27,000
那个 camel case

5109
02:00:27,000 --> 02:00:27,000
那个地方

5110
02:00:27,000 --> 02:00:28,000
那个讲的是什么

5111
02:00:28,000 --> 02:00:29,000
那个讲的是 identify

5112
02:00:29,000 --> 02:00:30,000
就是识别符

5113
02:00:30,000 --> 02:00:31,000
对吧

5114
02:00:31,000 --> 02:00:33,000
在绝大多数语言里面

5115
02:00:33,000 --> 02:00:33,000
这个识别符

5116
02:00:33,000 --> 02:00:35,000
都是大小学敏感的

5117
02:00:35,000 --> 02:00:35,000
就是刚才说

5118
02:00:35,000 --> 02:00:37,000
这个大 A 小 B 和小 A 小 B

5119
02:00:37,000 --> 02:00:38,000
它明显是

5120
02:00:38,000 --> 02:00:39,000
它可以是两个

5121
02:00:39,000 --> 02:00:40,000
它是两个不同的

5122
02:00:40,000 --> 02:00:41,000
一个变量

5123
02:00:41,000 --> 02:00:41,000
也好

5124
02:00:41,000 --> 02:00:43,000
两个不同的一个名字

5125
02:00:43,000 --> 02:00:43,000
对吧

5126
02:00:43,000 --> 02:00:45,000
但是在绝大多数的

5127
02:00:45,000 --> 02:00:46,000
这个 identify

5128
02:00:46,000 --> 02:00:47,000
作为

5129
02:00:47,000 --> 02:00:49,000
作为 ID 的时候

5130
02:00:49,000 --> 02:00:50,000
作为一个用户账户

5131
02:00:50,000 --> 02:00:51,000
用户名的时候

5132
02:00:51,000 --> 02:00:53,000
它通常是不敏感

5133
02:00:53,000 --> 02:00:53,000
比如说我们讲推特的

5134
02:00:53,000 --> 02:00:54,000
这个

5135
02:00:54,000 --> 02:00:56,000
推特就是这么一个典型的例子

5136
02:00:56,000 --> 02:00:57,000
推特它是就是说

5137
02:00:57,000 --> 02:00:58,000
是大小写保留

5138
02:00:58,000 --> 02:00:59,000
但是大小写不敏感

5139
02:00:59,000 --> 02:00:59,000
对吧

5140
02:00:59,000 --> 02:01:00,000
比如说我的

5141
02:01:00,000 --> 02:01:01,000
这个

5142
02:01:01,000 --> 02:01:01,000
这个

5143
02:01:01,000 --> 02:01:03,000
这个推特的 handle

5144
02:01:03,000 --> 02:01:03,000
叫做 real jot

5145
02:01:03,000 --> 02:01:04,000
对吧

5146
02:01:04,000 --> 02:01:05,000
就是我的 R 和 J 大写

5147
02:01:05,000 --> 02:01:06,000
这是两个词

5148
02:01:06,000 --> 02:01:07,000
但是

5149
02:01:07,000 --> 02:01:09,000
你在 URL 里面

5150
02:01:09,000 --> 02:01:10,000
你写这六个字母的

5151
02:01:10,000 --> 02:01:11,000
任意大小写组组组

5152
02:01:11,000 --> 02:01:11,000
它都是

5153
02:01:11,000 --> 02:01:12,000
带到我的

5154
02:01:12,000 --> 02:01:13,000
那个页面上面去的

5155
02:01:13,000 --> 02:01:15,000
所以它这个

5156
02:01:15,000 --> 02:01:15,000
这一点

5157
02:01:15,000 --> 02:01:16,000
它其实

5158
02:01:16,000 --> 02:01:17,000
推特的这个命名

5159
02:01:17,000 --> 02:01:17,000
这一点

5160
02:01:17,000 --> 02:01:18,000
它其实是跟这个

5161
02:01:18,000 --> 02:01:19,000
Mac 上默认的

5162
02:01:19,000 --> 02:01:21,000
文件名

5163
02:01:21,000 --> 02:01:21,000
命名的

5164
02:01:21,000 --> 02:01:22,000
那个大小写的

5165
02:01:22,000 --> 02:01:23,000
敏感方式是一样的

5166
02:01:23,000 --> 02:01:25,000
叫做 case insensitive

5167
02:01:25,000 --> 02:01:25,000
大家也不敏感

5168
02:01:25,000 --> 02:01:26,000
but

5169
02:01:26,000 --> 02:01:27,000
case preserving

5170
02:01:27,000 --> 02:01:28,000
对吧

5171
02:01:28,000 --> 02:01:29,000
保留大小写

5172
02:01:29,000 --> 02:01:31,000
现在的

5173
02:01:31,000 --> 02:01:33,000
你们有人写 Visual Basic 吗

5174
02:01:33,000 --> 02:01:34,000
Visual Basic

5175
02:01:34,000 --> 02:01:35,000
应该是

5176
02:01:35,000 --> 02:01:37,000
大小写不敏感的

5177
02:01:37,000 --> 02:01:38,000
但是 Visual Basic

5178
02:01:38,000 --> 02:01:39,000
是不是大小写保留的呢

5179
02:01:39,000 --> 02:01:41,000
我记得不太清楚

5180
02:01:41,000 --> 02:01:42,000
因为当时

5181
02:01:42,000 --> 02:01:44,000
VB

5182
02:01:44,000 --> 02:01:45,000
当时被

5183
02:01:45,000 --> 02:01:46,000
最被人吐槽了

5184
02:01:46,000 --> 02:01:46,000
会不会

5185
02:01:46,000 --> 02:01:48,000
最被职业成员

5186
02:01:48,000 --> 02:01:48,000
吐槽了一眼

5187
02:01:48,000 --> 02:01:49,000
就是它居然是一个

5188
02:01:49,000 --> 02:01:50,000
大小写不敏感的语言

5189
02:01:50,000 --> 02:01:52,000
你可以想象吗

5190
02:01:52,000 --> 02:01:54,000
等一下

5191
02:01:54,000 --> 02:01:55,000
Donet

5192
02:01:55,000 --> 02:01:56,000
它整个那个命名

5193
02:01:56,000 --> 02:01:57,000
规则是一样的吗

5194
02:01:57,000 --> 02:01:58,000
不一样

5195
02:01:58,000 --> 02:01:58,000
Donet

5196
02:01:58,000 --> 02:02:00,000
只是一个 run time

5197
02:02:00,000 --> 02:02:01,000
不一样

5198
02:02:01,000 --> 02:02:01,000
Donet

5199
02:02:01,000 --> 02:02:02,000
好多语言

5200
02:02:02,000 --> 02:02:03,000
Donet

5201
02:02:03,000 --> 02:02:04,000
底层肯定是

5202
02:02:04,000 --> 02:02:05,000
区分大小写

5203
02:02:05,000 --> 02:02:06,000
就是那套

5204
02:02:06,000 --> 02:02:06,000
i-i-o

5205
02:02:06,000 --> 02:02:07,000
Mac 上面

5206
02:02:07,000 --> 02:02:08,000
其实是可能

5207
02:02:08,000 --> 02:02:09,000
这个问题相对复杂的

5208
02:02:09,000 --> 02:02:10,000
因为 Mac 上

5209
02:02:10,000 --> 02:02:11,000
它存在一个

5210
02:02:11,000 --> 02:02:12,000
同一个文件系统

5211
02:02:12,000 --> 02:02:13,000
它另外有一种方式

5212
02:02:13,000 --> 02:02:15,000
是可以大小写敏感的

5213
02:02:15,000 --> 02:02:18,000
日志式区分大小写

5214
02:02:18,000 --> 02:02:18,000
我那个时候

5215
02:02:18,000 --> 02:02:19,000
就是傻不拉机的

5216
02:02:19,000 --> 02:02:22,000
把自己的分区

5217
02:02:22,000 --> 02:02:22,000
隔成了

5218
02:02:22,000 --> 02:02:25,000
严格区分大小写的文件系统

5219
02:02:25,000 --> 02:02:26,000
后来好多游戏装不了

5220
02:02:26,000 --> 02:02:27,000
装游戏的时候

5221
02:02:27,000 --> 02:02:28,000
他会说

5222
02:02:28,000 --> 02:02:30,000
你不能把这个程序

5223
02:02:30,000 --> 02:02:31,000
装在一个大小写敏感的

5224
02:02:31,000 --> 02:02:32,000
分区上面

5225
02:02:32,000 --> 02:02:34,000
很扯

5226
02:02:34,000 --> 02:02:35,000
因为它不一样

5227
02:02:35,000 --> 02:02:36,000
这是另外一个

5228
02:02:36,000 --> 02:02:37,000
比较可

5229
02:02:37,000 --> 02:02:37,000
对

5230
02:02:37,000 --> 02:02:39,000
因为比如说 Mac 上

5231
02:02:39,000 --> 02:02:40,000
我们现在用的主流的

5232
02:02:40,000 --> 02:02:41,000
就是这个叫做

5233
02:02:41,000 --> 02:02:43,000
固态存储

5234
02:02:43,000 --> 02:02:43,000
固态存储

5235
02:02:43,000 --> 02:02:44,000
它现在默认的

5236
02:02:44,000 --> 02:02:46,000
那个文件系统的格式是 APFS

5237
02:02:46,000 --> 02:02:48,000
但是在 Mac 上面

5238
02:02:48,000 --> 02:02:49,000
它是用的是 Mac 的

5239
02:02:49,000 --> 02:02:51,000
APFS 的大小写

5240
02:02:51,000 --> 02:02:52,000
不敏感的

5241
02:02:52,000 --> 02:02:54,000
那个默认值

5242
02:02:54,000 --> 02:02:55,000
但是在 iPhone 上面

5243
02:02:55,000 --> 02:02:56,000
虽然你看不见

5244
02:02:56,000 --> 02:02:57,000
但是在 iPhone 上面

5245
02:02:57,000 --> 02:02:59,000
它用的默认是 APFS

5246
02:02:59,000 --> 02:03:00,000
大小写敏感的那套

5247
02:03:00,000 --> 02:03:02,000
iPhone 是区分大小写的

5248
02:03:02,000 --> 02:03:06,000
就是 APFS 区分大小写的

5249
02:03:06,000 --> 02:03:07,000
APFS 是大小写敏感的

5250
02:03:07,000 --> 02:03:08,000
对

5251
02:03:08,000 --> 02:03:09,000
对

5252
02:03:09,000 --> 02:03:10,000
很奇怪

5253
02:03:10,000 --> 02:03:10,000
对吧

5254
02:03:10,000 --> 02:03:11,000
所以我觉得

5255
02:03:11,000 --> 02:03:13,000
其实这是一个问题

5256
02:03:13,000 --> 02:03:14,000
因为我是觉得

5257
02:03:14,000 --> 02:03:14,000
就是从

5258
02:03:14,000 --> 02:03:16,000
信息的这个角度来讲

5259
02:03:16,000 --> 02:03:18,000
肯定说是区分是更好的

5260
02:03:18,000 --> 02:03:19,000
只是说从

5261
02:03:19,000 --> 02:03:21,000
叫什么来的

5262
02:03:21,000 --> 02:03:22,000
idiot proof

5263
02:03:22,000 --> 02:03:22,000
这个角度来看

5264
02:03:22,000 --> 02:03:23,000
可能稍微差一些

5265
02:03:23,000 --> 02:03:25,000
但是在 iOS 上面去

5266
02:03:25,000 --> 02:03:26,000
用户是并不能直接

5267
02:03:26,000 --> 02:03:27,000
读写文件系统的

5268
02:03:27,000 --> 02:03:29,000
所以不存在这个问题

5269
02:03:29,000 --> 02:03:29,000
那既然

5270
02:03:29,000 --> 02:03:31,000
他们自己不是 idiot

5271
02:03:31,000 --> 02:03:32,000
那就没有这个问题了

5272
02:03:32,000 --> 02:03:35,000
好吧

5273
02:03:35,000 --> 02:03:36,000
等一下

5274
02:03:36,000 --> 02:03:37,000
Windows 现在什么状况

5275
02:03:37,000 --> 02:03:38,000
我有点忘了

5276
02:03:38,000 --> 02:03:39,000
Windows 是大小写敏感吗

5277
02:03:39,000 --> 02:03:39,000
不敏感

5278
02:03:39,000 --> 02:03:41,000
Windows 现在是大小写保留

5279
02:03:41,000 --> 02:03:43,000
那就跟 Mac 一样的

5280
02:03:43,000 --> 02:03:44,000
那就不敏感了

5281
02:03:44,000 --> 02:03:44,000
对

5282
02:03:44,000 --> 02:03:46,000
OK

5283
02:03:46,000 --> 02:03:48,000
然后那个 NTFS 是没有

5284
02:03:48,000 --> 02:03:49,000
这个大小写敏感的选项的

5285
02:03:49,000 --> 02:03:50,000
对吧

5286
02:03:50,000 --> 02:03:50,000
应该是没有的

5287
02:03:50,000 --> 02:03:53,000
就这个其实大小写

5288
02:03:53,000 --> 02:03:54,000
叫什么

5289
02:03:54,000 --> 02:03:55,000
大小写不敏感

5290
02:03:55,000 --> 02:03:56,000
但是大小写保留

5291
02:03:56,000 --> 02:03:58,000
其实在实现上

5292
02:03:58,000 --> 02:03:59,000
其实有会带来一个

5293
02:03:59,000 --> 02:04:00,000
更麻烦的事情

5294
02:04:00,000 --> 02:04:01,000
就是你要存

5295
02:04:01,000 --> 02:04:02,000
比如说

5296
02:04:02,000 --> 02:04:03,000
你想一下

5297
02:04:03,000 --> 02:04:05,000
你要去判断

5298
02:04:05,000 --> 02:04:06,000
这个文件

5299
02:04:06,000 --> 02:04:07,000
到底在这个目楼里面

5300
02:04:07,000 --> 02:04:07,000
存不存在的时候

5301
02:04:07,000 --> 02:04:08,000
你要做什么

5302
02:04:08,000 --> 02:04:10,000
你要先把这个文件名

5303
02:04:10,000 --> 02:04:11,000
找找到目标文件名

5304
02:04:11,000 --> 02:04:12,000
你要先把它统一

5305
02:04:12,000 --> 02:04:13,000
化成一个

5306
02:04:13,000 --> 02:04:14,000
比如说都小写

5307
02:04:14,000 --> 02:04:14,000
或者都大写

5308
02:04:14,000 --> 02:04:16,000
然后你还得把这个

5309
02:04:16,000 --> 02:04:17,000
这叫什么来的

5310
02:04:17,000 --> 02:04:18,000
就是这个目楼面

5311
02:04:18,000 --> 02:04:19,000
已经有的文件名

5312
02:04:19,000 --> 02:04:21,000
都得统一成

5313
02:04:21,000 --> 02:04:22,000
都想都想

5314
02:04:22,000 --> 02:04:23,000
以才能够逐个字符

5315
02:04:23,000 --> 02:04:24,000
逐个这个字符

5316
02:04:24,000 --> 02:04:25,000
比较

5317
02:04:25,000 --> 02:04:25,000
对不对

5318
02:04:25,000 --> 02:04:28,000
所以我觉得这个

5319
02:04:28,000 --> 02:04:30,000
其实就效率挺低的

5320
02:04:30,000 --> 02:04:30,000
对

5321
02:04:30,000 --> 02:04:32,000
所以我觉得大小写敏感

5322
02:04:32,000 --> 02:04:33,000
还是一个更好的

5323
02:04:33,000 --> 02:04:34,000
一个方案

5324
02:04:34,000 --> 02:04:38,000
然后就是另外一个

5325
02:04:38,000 --> 02:04:39,000
更加坑爹的问题了

5326
02:04:39,000 --> 02:04:41,000
就是那文件名

5327
02:04:41,000 --> 02:04:43,000
可不可以用 unicode 来写

5328
02:04:43,000 --> 02:04:45,000
用 emoji 来写是吧

5329
02:04:45,000 --> 02:04:47,000
现在是可以的

5330
02:04:47,000 --> 02:04:50,000
现在已经可以了

5331
02:04:50,000 --> 02:04:50,000
就好像

5332
02:04:50,000 --> 02:04:51,000
就好像那个

5333
02:04:51,000 --> 02:04:53,000
Swift 最开始

5334
02:04:53,000 --> 02:04:55,000
不就是好多例子

5335
02:04:55,000 --> 02:04:56,000
里面都出现了

5336
02:04:56,000 --> 02:04:58,000
用 unicode 做的 identify

5337
02:04:58,000 --> 02:05:00,000
就非常坑爹

5338
02:05:00,000 --> 02:05:01,000
对

5339
02:05:01,000 --> 02:05:02,000
你想要来一个

5340
02:05:02,000 --> 02:05:03,000
自动完成都做不到

5341
02:05:03,000 --> 02:05:05,000
一个现代的语言

5342
02:05:05,000 --> 02:05:06,000
它基本上都是

5343
02:05:06,000 --> 02:05:08,000
以这个 unicode 的友好

5344
02:05:08,000 --> 02:05:10,000
或者叫做 unicode 的兼容

5345
02:05:10,000 --> 02:05:11,000
为卖点

5346
02:05:11,000 --> 02:05:12,000
一个标准

5347
02:05:12,000 --> 02:05:13,000
对为卖点

5348
02:05:13,000 --> 02:05:13,000
你可以

5349
02:05:13,000 --> 02:05:14,000
他可能也是

5350
02:05:14,000 --> 02:05:15,000
就是刚才我们讨论的

5351
02:05:15,000 --> 02:05:16,000
另外那个问题了

5352
02:05:16,000 --> 02:05:18,000
既然你就说

5353
02:05:18,000 --> 02:05:20,000
不要以这个英语

5354
02:05:20,000 --> 02:05:22,000
为中心主义的话

5355
02:05:22,000 --> 02:05:23,000
那我的文件

5356
02:05:23,000 --> 02:05:24,000
我的这个变量命名

5357
02:05:24,000 --> 02:05:25,000
为什么不可以是中文字

5358
02:05:25,000 --> 02:05:27,000
嗯

5359
02:05:27,000 --> 02:05:29,000
既然都可以是中文呢

5360
02:05:29,000 --> 02:05:31,000
为什么不能是一个

5361
02:05:31,000 --> 02:05:33,000
的里面

5362
02:05:33,000 --> 02:05:35,000
所以他可以

5363
02:05:35,000 --> 02:05:37,000
你刚才发出了一个什么声音

5364
02:05:37,000 --> 02:05:38,000
就是

5365
02:05:38,000 --> 02:05:39,000
就是一个

5366
02:05:39,000 --> 02:05:41,000
某一种表情符号

5367
02:05:41,000 --> 02:05:43,000
那嘔吐的

5368
02:05:43,000 --> 02:05:45,000
你刚才

5369
02:05:45,000 --> 02:05:46,000
你刚才

5370
02:05:46,000 --> 02:05:48,000
同学们刚才 Rail 念出了

5371
02:05:48,000 --> 02:05:50,000
嘔吐这个表情符号

5372
02:05:50,000 --> 02:05:53,000
为他赋予了语音

5373
02:05:53,000 --> 02:05:55,000
这毕竟是一个纯听觉的节目

5374
02:05:55,000 --> 02:05:56,000
你要我怎么办

5375
02:05:56,000 --> 02:05:58,000
我只能采用通感的方式

5376
02:05:58,000 --> 02:05:58,000
给你们展现

5377
02:05:58,000 --> 02:06:00,000
我们感受到了

5378
02:06:00,000 --> 02:06:03,000
感受到了

5379
02:06:03,000 --> 02:06:03,000
是

5380
02:06:03,000 --> 02:06:04,000
以后

5381
02:06:04,000 --> 02:06:05,000
Rail 应该出一套

5382
02:06:05,000 --> 02:06:06,000
应该在节目里面

5383
02:06:06,000 --> 02:06:07,000
出一套这个

5384
02:06:07,000 --> 02:06:09,000
Emoji 的发音指南

5385
02:06:09,000 --> 02:06:10,000
不叫做

5386
02:06:10,000 --> 02:06:11,000
不叫做

5387
02:06:11,000 --> 02:06:14,000
Podcast Emoji User Guide

5388
02:06:14,000 --> 02:06:15,000
比如说

5389
02:06:15,000 --> 02:06:16,000
笑出猪叫声

5390
02:06:16,000 --> 02:06:17,000
这个 Emoji

5391
02:06:17,000 --> 02:06:23,000
有这个 Emoji

5392
02:06:23,000 --> 02:06:24,000
没有这个 Emoji

5393
02:06:24,000 --> 02:06:29,000
这个就不叫 Emoji 了

5394
02:06:29,000 --> 02:06:30,000
这个叫什么

5395
02:06:30,000 --> 02:06:31,000
就叫

5396
02:06:31,000 --> 02:06:32,000
Voice Moji

5397
02:06:32,000 --> 02:06:34,000
Audio Moji

5398
02:06:34,000 --> 02:06:36,000
这根本就不是 Moji

5399
02:06:36,000 --> 02:06:38,000
对

5400
02:06:38,000 --> 02:06:39,000
其实就是

5401
02:06:39,000 --> 02:06:40,000
就这里

5402
02:06:40,000 --> 02:06:42,000
就是 Unical 的作为

5403
02:06:42,000 --> 02:06:42,000
这个命名的方式

5404
02:06:42,000 --> 02:06:43,000
就是刚才会出现

5405
02:06:43,000 --> 02:06:44,000
类似于

5406
02:06:44,000 --> 02:06:45,000
最开始提到的

5407
02:06:45,000 --> 02:06:48,000
这个中文的括号

5408
02:06:48,000 --> 02:06:49,000
和英文的括号

5409
02:06:49,000 --> 02:06:50,000
怎么长到一样

5410
02:06:50,000 --> 02:06:50,000
但是为什么

5411
02:06:50,000 --> 02:06:51,000
我始终找不到

5412
02:06:51,000 --> 02:06:53,000
这个文件的问题

5413
02:06:53,000 --> 02:06:53,000
对不对

5414
02:06:53,000 --> 02:06:54,000
但 Unical 也提供了

5415
02:06:54,000 --> 02:06:56,000
我们之前也解释过

5416
02:06:56,000 --> 02:06:57,000
有那个叫什么

5417
02:06:57,000 --> 02:06:58,000
叫叫什么

5418
02:06:58,000 --> 02:06:59,000
Clyde 的方案

5419
02:06:59,000 --> 02:06:59,000
对不对

5420
02:06:59,000 --> 02:07:02,000
就是虽然这两个

5421
02:07:02,000 --> 02:07:03,000
它不是同一个码位

5422
02:07:03,000 --> 02:07:05,000
但是我们在搜索

5423
02:07:05,000 --> 02:07:06,000
或者是在处理的时候

5424
02:07:06,000 --> 02:07:07,000
认为他们在语意上

5425
02:07:07,000 --> 02:07:08,000
是等价的

5426
02:07:08,000 --> 02:07:09,000
所以理论上

5427
02:07:09,000 --> 02:07:10,000
你只要找到这个东西

5428
02:07:10,000 --> 02:07:12,000
也能找到另外一个

5429
02:07:12,000 --> 02:07:13,000
但这个就是程序

5430
02:07:13,000 --> 02:07:14,000
要做更加复杂的

5431
02:07:14,000 --> 02:07:16,000
这个特别的 handle

5432
02:07:16,000 --> 02:07:17,000
就不能只简单的

5433
02:07:17,000 --> 02:07:19,000
我只要比较这两个

5434
02:07:19,000 --> 02:07:20,000
这个支付串

5435
02:07:20,000 --> 02:07:21,000
它每一个字节

5436
02:07:21,000 --> 02:07:22,000
是不是一样就可以了

5437
02:07:22,000 --> 02:07:22,000
对吧

5438
02:07:22,000 --> 02:07:24,000
就会变得更加复杂

5439
02:07:24,000 --> 02:07:25,000
超复杂的

5440
02:07:25,000 --> 02:07:27,000
所以这个什么

5441
02:07:27,000 --> 02:07:28,000
为什么我们不能有一个

5442
02:07:28,000 --> 02:07:29,000
简单安全的

5443
02:07:29,000 --> 02:07:30,000
应用的系统

5444
02:07:30,000 --> 02:07:32,000
可能就是对吧

5445
02:07:32,000 --> 02:07:33,000
这帮人干的

5446
02:07:33,000 --> 02:07:37,000
你们记不记得当年

5447
02:07:37,000 --> 02:07:39,000
应该是有好几年前了

5448
02:07:39,000 --> 02:07:39,000
就是 iPhone 的

5449
02:07:39,000 --> 02:07:42,000
在某某最开始的几年的时候

5450
02:07:42,000 --> 02:07:43,000
经常会出现

5451
02:07:43,000 --> 02:07:45,000
因为你收到一条短信里面

5452
02:07:45,000 --> 02:07:46,000
包含了一个奇怪

5453
02:07:46,000 --> 02:07:47,000
unicode 的一个图核

5454
02:07:47,000 --> 02:07:49,000
然后你系统就崩溃了

5455
02:07:49,000 --> 02:07:49,000
对

5456
02:07:49,000 --> 02:07:51,000
系统就死机

5457
02:07:51,000 --> 02:07:52,000
或者崩溃了

5458
02:07:52,000 --> 02:07:52,000
这种情况

5459
02:07:52,000 --> 02:07:53,000
对吧

5460
02:07:53,000 --> 02:07:53,000
对

5461
02:07:53,000 --> 02:07:54,000
你可以说这个是这个叫什么

5462
02:07:54,000 --> 02:07:56,000
那个程序员写的这个

5463
02:07:56,000 --> 02:07:57,000
这个这个代码

5464
02:07:57,000 --> 02:07:59,000
这个软件质量不高

5465
02:07:59,000 --> 02:07:59,000
没错

5466
02:07:59,000 --> 02:08:00,000
事实上也是这样的

5467
02:08:00,000 --> 02:08:01,000
对吧

5468
02:08:01,000 --> 02:08:02,000
但是这个复杂度

5469
02:08:02,000 --> 02:08:03,000
是因为什么东西引起的

5470
02:08:03,000 --> 02:08:05,000
所以现在那个 unicode

5471
02:08:05,000 --> 02:08:07,000
他们在做很多事情的话

5472
02:08:07,000 --> 02:08:10,000
很首先就是在安全性上面

5473
02:08:10,000 --> 02:08:13,000
是他们那个很大的一个考虑因素

5474
02:08:13,000 --> 02:08:14,000
对

5475
02:08:14,000 --> 02:08:15,000
对

5476
02:08:15,000 --> 02:08:16,000
这个在各家实现的时候

5477
02:08:16,000 --> 02:08:16,000
要考虑

5478
02:08:16,000 --> 02:08:19,000
因为他们进行这个信息交换的时候

5479
02:08:19,000 --> 02:08:20,000
就就全部都传过去了

5480
02:08:20,000 --> 02:08:22,000
一传过去的话

5481
02:08:22,000 --> 02:08:23,000
对对对

5482
02:08:23,000 --> 02:08:25,000
就是本质上你从信息安全的角度来讲

5483
02:08:25,000 --> 02:08:26,000
这个是

5484
02:08:26,000 --> 02:08:27,000
就是说你只要从

5485
02:08:27,000 --> 02:08:30,000
从外部传过来的一段信息

5486
02:08:30,000 --> 02:08:32,000
你就认为默认他应该是不可信的

5487
02:08:32,000 --> 02:08:32,000
对吧

5488
02:08:32,000 --> 02:08:34,000
然后又又恰巧碰

5489
02:08:34,000 --> 02:08:35,000
碰上了这个 unicode

5490
02:08:35,000 --> 02:08:37,000
这么一套复杂的要死的系统之后

5491
02:08:37,000 --> 02:08:39,000
那就很容易出现问题

5492
02:08:39,000 --> 02:08:40,000
因为复杂度越高

5493
02:08:40,000 --> 02:08:41,000
bug 越多

5494
02:08:41,000 --> 02:08:42,000
对

5495
02:08:42,000 --> 02:08:44,000
所以一开始他们就有些朋友

5496
02:08:44,000 --> 02:08:46,000
可能就觉得很奇怪

5497
02:08:46,000 --> 02:08:48,000
unicode 不就是一个文字的编码吗

5498
02:08:48,000 --> 02:08:50,000
怎么还会跟这个信息安全

5499
02:08:50,000 --> 02:08:51,000
承受什么错

5500
02:08:51,000 --> 02:08:52,000
其实就是因为

5501
02:08:52,000 --> 02:08:54,000
它里面有很多复杂的

5502
02:08:54,000 --> 02:08:55,000
就各种文字都夹在里面

5503
02:08:55,000 --> 02:08:56,000
所以很容易

5504
02:08:56,000 --> 02:08:57,000
很容易做文章

5505
02:08:57,000 --> 02:09:00,000
逼得我们吴涛

5506
02:09:00,000 --> 02:09:02,000
都已经不再从事安全行业了

5507
02:09:02,000 --> 02:09:04,000
都是这个用户需求的坑

5508
02:09:04,000 --> 02:09:07,000
我觉得主要还是

5509
02:09:07,000 --> 02:09:08,000
怎么说呢

5510
02:09:08,000 --> 02:09:09,000
安全行业需要人们有意识

5511
02:09:09,000 --> 02:09:12,000
就是只有人们认为安全是重要的时候

5512
02:09:12,000 --> 02:09:14,000
安全行业才有前途

5513
02:09:14,000 --> 02:09:17,000
现在只能说大部分人都太没有

5514
02:09:17,000 --> 02:09:18,000
就太不在乎了

5515
02:09:18,000 --> 02:09:21,000
只有等到失窃的时候才会后悔

5516
02:09:21,000 --> 02:09:22,000
真的

5517
02:09:22,000 --> 02:09:24,000
是那肯定

5518
02:09:24,000 --> 02:09:24,000
对

5519
02:09:24,000 --> 02:09:27,000
但我就说你的解决方案什么

5520
02:09:27,000 --> 02:09:28,000
那就只能说就加大投入

5521
02:09:28,000 --> 02:09:32,000
但我的想法就是说能不能够可以不要加大成本

5522
02:09:32,000 --> 02:09:34,000
就是不要给我搞那么有点扣的麻烦事

5523
02:09:34,000 --> 02:09:34,000
好吧

5524
02:09:34,000 --> 02:09:35,000
为什么要组合

5525
02:09:35,000 --> 02:09:38,000
一个字

5526
02:09:38,000 --> 02:09:39,000
一个码位代表一个字不好吗

5527
02:09:39,000 --> 02:09:41,000
你又不缺那几个码位

5528
02:09:41,000 --> 02:09:41,000
对吧

5529
02:09:41,000 --> 02:09:42,000
组合个毛线

5530
02:09:42,000 --> 02:09:44,000
对你知道有一种

5531
02:09:44,000 --> 02:09:45,000
比如说路

5532
02:09:45,000 --> 02:09:49,000
路就是一个所谓 ASCII clean 的这么一个编程员

5533
02:09:49,000 --> 02:09:52,000
它的核心的整个 library

5534
02:09:52,000 --> 02:09:55,000
是不会触及到这个 ASCII 的第八位的

5535
02:09:55,000 --> 02:09:59,000
就全部都一把就是七位搞定

5536
02:09:59,000 --> 02:10:00,000
所有的东西都在

5537
02:10:00,000 --> 02:10:03,000
就是耳熟能详

5538
02:10:03,000 --> 02:10:04,000
所有计算机

5539
02:10:04,000 --> 02:10:06,000
所有的色语言系统都支持了这些码位里面

5540
02:10:06,000 --> 02:10:08,000
这也是一个思路吧

5541
02:10:08,000 --> 02:10:12,000
就是走这个绝对可行的最小的集合

5542
02:10:12,000 --> 02:10:13,000
但是不行啊

5543
02:10:13,000 --> 02:10:14,000
用户需求提出来

5544
02:10:14,000 --> 02:10:15,000
我就要看这个

5545
02:10:15,000 --> 02:10:16,000
真的

5546
02:10:16,000 --> 02:10:17,000
的 emoji 怎么办

5547
02:10:17,000 --> 02:10:23,000
Rail 是本日最佳生用

5548
02:10:23,000 --> 02:10:26,000
对吧

5549
02:10:26,000 --> 02:10:27,000
所以这个就是呢

5550
02:10:27,000 --> 02:10:29,000
最终还是像这个用户需求妥协了

5551
02:10:29,000 --> 02:10:29,000
对

5552
02:10:29,000 --> 02:10:31,000
还是必须得印着头皮上

5553
02:10:31,000 --> 02:10:34,000
就把这些 bug 都给修了

5554
02:10:34,000 --> 02:10:35,000
然后拿着那个超级厚

5555
02:10:35,000 --> 02:10:36,000
那个 unicode

5556
02:10:36,000 --> 02:10:38,000
现在那个应该是出到 11 了

5557
02:10:38,000 --> 02:10:38,000
对不对

5558
02:10:38,000 --> 02:10:39,000
对

5559
02:10:39,000 --> 02:10:40,000
13 了

5560
02:10:40,000 --> 02:10:41,000
13 了

5561
02:10:41,000 --> 02:10:41,000
我又 out 了

5562
02:10:41,000 --> 02:10:43,000
那个册子页

5563
02:10:43,000 --> 02:10:44,000
有多少页了

5564
02:10:44,000 --> 02:10:44,000
现在

5565
02:10:44,000 --> 02:10:45,000
它那个规范

5566
02:10:45,000 --> 02:10:47,000
你说

5567
02:10:47,000 --> 02:10:49,000
那个 PDF

5568
02:10:49,000 --> 02:10:50,000
这要问两海了

5569
02:10:50,000 --> 02:10:51,000
对啊

5570
02:10:51,000 --> 02:10:53,000
应该得上百兆了吧

5571
02:10:53,000 --> 02:10:53,000
我估计

5572
02:10:53,000 --> 02:10:58,000
unicode 的第 11 版的 core specification

5573
02:10:58,000 --> 02:11:02,000
的 PDF 版本是 976 页

5574
02:11:02,000 --> 02:11:07,000
那 13 肯定超过 1000 了

5575
02:11:07,000 --> 02:11:12,000
但是一个这个 PDF 一共才 14.2 M

5576
02:11:12,000 --> 02:11:14,000
还好

5577
02:11:14,000 --> 02:11:14,000
还好

5578
02:11:14,000 --> 02:11:15,000
这还只是 core

5579
02:11:15,000 --> 02:11:17,000
那还有周边的吧

5580
02:11:17,000 --> 02:11:19,000
这只是 core specification

5581
02:11:19,000 --> 02:11:20,000
就不带那个码表

5582
02:11:20,000 --> 02:11:21,000
对

5583
02:11:21,000 --> 02:11:21,000
的附录

5584
02:11:21,000 --> 02:11:22,000
还有那些数据表

5585
02:11:22,000 --> 02:11:23,000
非常多

5586
02:11:23,000 --> 02:11:24,000
对

5587
02:11:24,000 --> 02:11:25,000
这只是 core specification

5588
02:11:25,000 --> 02:11:28,000
一个超级无底的深坑

5589
02:11:28,000 --> 02:11:31,000
想想

5590
02:11:31,000 --> 02:11:32,000
就是累啊

5591
02:11:32,000 --> 02:11:33,000
对于我们这种

5592
02:11:33,000 --> 02:11:34,000
就是尽可能说

5593
02:11:34,000 --> 02:11:35,000
砍

5594
02:11:35,000 --> 02:11:36,000
砍用回血球

5595
02:11:36,000 --> 02:11:37,000
不要增加复杂度的

5596
02:11:37,000 --> 02:11:38,000
这种思维方式的

5597
02:11:38,000 --> 02:11:40,000
这个就是过于复杂

5598
02:11:40,000 --> 02:11:41,000
可以不做

5599
02:11:41,000 --> 02:11:42,000
对吧

5600
02:11:42,000 --> 02:11:45,000
好吧

5601
02:11:45,000 --> 02:11:46,000
今天我们

5602
02:11:46,000 --> 02:11:48,000
这个脑洞也比较多

5603
02:11:48,000 --> 02:11:51,000
然后这个聊了这个

5604
02:11:51,000 --> 02:11:52,000
哇

5605
02:11:52,000 --> 02:11:53,000
天呐

5606
02:11:53,000 --> 02:11:54,000
从哪里聊到哪里了

5607
02:11:54,000 --> 02:11:55,000
不过挺好的呀

5608
02:11:55,000 --> 02:11:56,000
就是

5609
02:11:56,000 --> 02:11:58,000
这整个命名规则嘛

5610
02:11:58,000 --> 02:11:59,000
对吧

5611
02:11:59,000 --> 02:11:59,000
就是文

5612
02:11:59,000 --> 02:12:01,000
像这个长度

5613
02:12:01,000 --> 02:12:02,000
自然的字符状长度

5614
02:12:02,000 --> 02:12:04,000
然后空格

5615
02:12:04,000 --> 02:12:05,000
呃

5616
02:12:05,000 --> 02:12:06,000
就

5617
02:12:06,000 --> 02:12:07,000
这个保留字

5618
02:12:07,000 --> 02:12:08,000
不允许的字符

5619
02:12:08,000 --> 02:12:10,000
不允许的这些文件名

5620
02:12:10,000 --> 02:12:12,000
是否区别大小写

5621
02:12:12,000 --> 02:12:13,000
这个就是命名的

5622
02:12:13,000 --> 02:12:14,000
该说的都说了嘛

5623
02:12:14,000 --> 02:12:16,000
也了了我一桩心愿

5624
02:12:16,000 --> 02:12:17,000
哈哈

5625
02:12:17,000 --> 02:12:19,000
一桩心愿

5626
02:12:19,000 --> 02:12:22,000
这个我憋了好久没说了

5627
02:12:22,000 --> 02:12:22,000
这个

5628
02:12:22,000 --> 02:12:24,000
可以瞑目了

5629
02:12:24,000 --> 02:12:26,000
并没有瞑目

5630
02:12:26,000 --> 02:12:27,000
我们还要把你抓来创台

5631
02:12:27,000 --> 02:12:28,000
哈哈

5632
02:12:28,000 --> 02:12:29,000
好的

5633
02:12:29,000 --> 02:12:30,000
好的

5634
02:12:30,000 --> 02:12:30,000
好了

5635
02:12:30,000 --> 02:12:32,000
你们可以收个尾

5636
02:12:32,000 --> 02:12:32,000
OK

5637
02:12:32,000 --> 02:12:33,000
呃

5638
02:12:33,000 --> 02:12:35,000
您刚才收听到的节目是

5639
02:12:35,000 --> 02:12:35,000
内核恐慌

5640
02:12:35,000 --> 02:12:36,000
一档贴

5641
02:12:36,000 --> 02:12:37,000
尽量贴近计算机

5642
02:12:37,000 --> 02:12:39,000
技术主题的

5643
02:12:39,000 --> 02:12:40,000
娱乐 podcast

5644
02:12:40,000 --> 02:12:41,000
我们号称硬核

5645
02:12:41,000 --> 02:12:42,000
但是也没有什么干货

5646
02:12:42,000 --> 02:12:43,000
想听人听

5647
02:12:43,000 --> 02:12:44,000
不想听人就别听

5648
02:12:44,000 --> 02:12:45,000
我们的网址是

5649
02:12:45,000 --> 02:12:46,000
pan.icu

5650
02:12:46,000 --> 02:12:47,000
您可以在网站上

5651
02:12:47,000 --> 02:12:49,000
找到订阅我们节目的方法

5652
02:12:49,000 --> 02:12:50,000
以及联络我们的方式

5653
02:12:50,000 --> 02:12:52,000
如果您期待我们

5654
02:12:52,000 --> 02:12:53,000
更频繁的更新节目

5655
02:12:53,000 --> 02:12:54,000
欢迎您到

5656
02:12:54,000 --> 02:12:55,000
爱发电为我们捐款

5657
02:12:55,000 --> 02:12:56,000
捐款地址是

5658
02:12:56,000 --> 02:12:58,000
爱发电.net

5659
02:12:58,000 --> 02:12:59,000
slash

5660
02:12:59,000 --> 02:13:00,000
atcronopanic

5661
02:13:00,000 --> 02:13:01,000
先发电

5662
02:13:01,000 --> 02:13:01,000
后催更

5663
02:13:01,000 --> 02:13:02,000
文明催更

5664
02:13:02,000 --> 02:13:03,000
从你做起

5665
02:13:03,000 --> 02:13:04,000
如果您觉得

5666
02:13:04,000 --> 02:13:05,000
意犹未尽

5667
02:13:05,000 --> 02:13:07,000
也欢迎您去收听

5668
02:13:07,000 --> 02:13:09,000
Rail 和黄海主播的

5669
02:13:09,000 --> 02:13:10,000
风头圈

5670
02:13:10,000 --> 02:13:12,000
Rail 和任宁主播的

5671
02:13:12,000 --> 02:13:13,000
提前怀旧

5672
02:13:13,000 --> 02:13:14,000
以及基本不由

5673
02:13:14,000 --> 02:13:15,000
吴涛主播的

5674
02:13:15,000 --> 02:13:16,000
自谈自唱

5675
02:13:16,000 --> 02:13:18,000
好了

5676
02:13:18,000 --> 02:13:22,000
我们的发电连接太长了

5677
02:13:22,000 --> 02:13:23,000
你要念它去我们官网

5678
02:13:23,000 --> 02:13:24,000
点连接

5679
02:13:24,000 --> 02:13:24,000
谁记得住

5680
02:13:24,000 --> 02:13:27,000
说的是

5681
02:13:27,000 --> 02:13:28,000
回合版日删

5682
02:13:28,000 --> 02:13:28,000
好吧

5683
02:13:28,000 --> 02:13:30,000
那再次感谢大家收听

5684
02:13:30,000 --> 02:13:32,000
本期的自谈自唱的

5685
02:13:32,000 --> 02:13:33,000
串来节目

5686
02:13:33,000 --> 02:13:34,000
自谈自串

5687
02:13:34,000 --> 02:13:36,000
如果大家对我们的节目

5688
02:13:36,000 --> 02:13:37,000
有什么意见或者反馈

5689
02:13:37,000 --> 02:13:38,000
都可以写邮件

5690
02:13:38,000 --> 02:13:40,000
给我们的邮箱地址

5691
02:13:40,000 --> 02:13:40,000
是 podcast

5692
02:13:40,000 --> 02:13:42,000
atthetype.com

5693
02:13:42,000 --> 02:13:43,000
podcast

5694
02:13:43,000 --> 02:13:46,000
atthetype.com

5695
02:13:46,000 --> 02:13:47,000
同时大家也可以在

5696
02:13:47,000 --> 02:13:49,000
推特在微信

5697
02:13:49,000 --> 02:13:51,000
以及在微博上面

5698
02:13:51,000 --> 02:13:52,000
搜索 thetype

5699
02:13:52,000 --> 02:13:52,000
找到我们

5700
02:13:52,000 --> 02:13:54,000
thetype

5701
02:13:54,000 --> 02:13:55,000
在 Facebook 上搜索

5702
02:13:55,000 --> 02:13:56,000
thetype

5703
02:13:56,000 --> 02:13:57,000
或者 typeisbeautiful

5704
02:13:57,000 --> 02:13:58,000
都可以找到我们

5705
02:13:58,000 --> 02:14:00,000
这比我们啰嗦多了

5706
02:14:00,000 --> 02:14:01,000
我觉得

5707
02:14:01,000 --> 02:14:02,000
没有对比

5708
02:14:02,000 --> 02:14:04,000
就没有伤害

5709
02:14:04,000 --> 02:14:05,000
自谈自唱

5710
02:14:05,000 --> 02:14:07,000
基本上是不需要催更的

5711
02:14:07,000 --> 02:14:09,000
我们是隔周二播出

5712
02:14:09,000 --> 02:14:11,000
从开播以来

5713
02:14:11,000 --> 02:14:12,000
就从来没有间断过

5714
02:14:12,000 --> 02:14:12,000
所以呢

5715
02:14:12,000 --> 02:14:14,000
大家可以顺便来

5716
02:14:14,000 --> 02:14:15,000
给我们催更的话

5717
02:14:15,000 --> 02:14:17,000
来加强我们的

5718
02:14:17,000 --> 02:14:18,000
自谈自串的

5719
02:14:18,000 --> 02:14:18,000
这样一个

5720
02:14:18,000 --> 02:14:19,000
串台节目的

5721
02:14:19,000 --> 02:14:20,000
催更工作

5722
02:14:20,000 --> 02:14:22,000
专门催自谈自串

5723
02:14:22,000 --> 02:14:24,000
希望我们下次的

5724
02:14:24,000 --> 02:14:24,000
这个串台

5725
02:14:24,000 --> 02:14:26,000
不会一年之后再见

5726
02:14:26,000 --> 02:14:28,000
OK

5727
02:14:28,000 --> 02:14:29,000
好

5728
02:14:29,000 --> 02:14:30,000
感谢大家的收听

5729
02:14:30,000 --> 02:14:32,000
本次节目是

5730
02:14:32,000 --> 02:14:32,000
Eric

5731
02:14:32,000 --> 02:14:34,000
在 MacOS 上剪辑

5732
02:14:34,000 --> 02:14:35,000
制作完成的

5733
02:14:35,000 --> 02:14:36,000
我们下次节目再见

5734
02:14:36,000 --> 02:14:36,000
拜拜

5735
02:14:36,000 --> 02:14:37,000
拜拜

5736
02:14:37,000 --> 02:14:38,000
拜拜

5737
02:14:38,000 --> 02:14:38,000
拜拜

5738
02:14:38,000 --> 02:14:39,000
拜拜

5739
02:14:39,000 --> 02:14:44,000
你

5740
02:14:44,000 --> 02:14:59,000
不

