1
00:00:00,000 --> 00:00:05,000
您正在收听的是 IPN Podcast 的网络旗下的 IT 技术主题节目《内核恐慌》

2
00:00:05,000 --> 00:00:07,000
我们号称 hardcore 但是也没有干货

3
00:00:07,000 --> 00:00:08,000
想听人听 不想听人就别听

4
00:00:08,000 --> 00:00:12,000
《内核恐慌》的网址是 ipn.li.com

5
00:00:12,000 --> 00:00:15,000
我们推荐大家使用 Podcast 客户端订阅我们的节目

6
00:00:15,000 --> 00:00:18,000
如果您不知道该用什么客户端

7
00:00:18,000 --> 00:00:19,000
欢迎访问 ipn.li.com

8
00:00:19,000 --> 00:00:22,000
欢迎你为我们的节目捐款

9
00:00:22,000 --> 00:00:24,000
捐款地址是 ipn.li.com

10
00:00:24,000 --> 00:00:28,000
捐款金额随意

11
00:00:28,000 --> 00:00:30,000
只要是能为 8 整除的正整数就可以

12
00:00:30,000 --> 00:00:32,000
捐款不会为你带来什么

13
00:00:32,000 --> 00:00:34,000
不捐也不会让你失去什么

14
00:00:34,000 --> 00:00:39,000
首先欢迎 Rail 回来

15
00:00:39,000 --> 00:00:43,000
之前病了缺席了一期

16
00:00:43,000 --> 00:00:44,000
积劳成疾嘛

17
00:00:44,000 --> 00:00:49,000
搬家嘛 就这样子

18
00:00:49,000 --> 00:00:50,000
嗯 是挺折腾

19
00:00:50,000 --> 00:00:51,000
搬家穷三年

20
00:00:51,000 --> 00:00:55,000
那个我们今天节目还是先念一下

21
00:00:55,000 --> 00:00:59,000
就之前我们做到的一些听众反馈的节选吧

22
00:00:59,000 --> 00:01:04,000
对 其实我们两期没做听众反馈了吧

23
00:01:04,000 --> 00:01:09,000
所以可能有一个月没有反省一下

24
00:01:09,000 --> 00:01:11,000
我们之前犯过什么错误

25
00:01:11,000 --> 00:01:16,000
但是最近没有听众指出我们读音的错误了

26
00:01:16,000 --> 00:01:18,000
我觉得这也是一件好事

27
00:01:18,000 --> 00:01:20,000
要么我们读音开始没有错误了

28
00:01:20,000 --> 00:01:22,000
我们就是听众们开始放弃了

29
00:01:22,000 --> 00:01:23,000
OK

30
00:01:23,000 --> 00:01:26,000
先开始读一篇听众反馈

31
00:01:26,000 --> 00:01:27,000
好

32
00:01:27,000 --> 00:01:29,000
就是有一个叫刘春的朋友

33
00:01:29,000 --> 00:01:30,000
我应该是叫刘春吧

34
00:01:30,000 --> 00:01:31,000
我觉得这么写的话

35
00:01:31,000 --> 00:01:33,000
他这么写的

36
00:01:33,000 --> 00:01:36,000
刚刚听了并发与异部这期

37
00:01:36,000 --> 00:01:38,000
比较赞同吴涛的点子

38
00:01:38,000 --> 00:01:41,000
就是提前公布你们希望讨论的主题

39
00:01:41,000 --> 00:01:42,000
让大家可以参与贡献 idea

40
00:01:42,000 --> 00:01:44,000
你觉得这个怎么样

41
00:01:44,000 --> 00:01:49,000
但是我那一期说了之后

42
00:01:49,000 --> 00:01:51,000
就发现好像提前公布

43
00:01:51,000 --> 00:01:54,000
我们希望讨论的主题怎么公布

44
00:01:54,000 --> 00:01:56,000
是我们这一期就要公布下一期的主题吗

45
00:01:56,000 --> 00:01:59,000
好像没有提前准备是吧

46
00:01:59,000 --> 00:02:01,000
事实上的状况就是

47
00:02:01,000 --> 00:02:04,000
我们这一期都不知道下一期要讲什么

48
00:02:04,000 --> 00:02:05,000
所以这件事情不现实

49
00:02:05,000 --> 00:02:06,000
这样不行啊

50
00:02:06,000 --> 00:02:06,000
说实话

51
00:02:06,000 --> 00:02:09,000
我们应该一下子就把后半年的主题

52
00:02:09,000 --> 00:02:09,000
全都介绍好

53
00:02:09,000 --> 00:02:11,000
弄一个列表

54
00:02:11,000 --> 00:02:13,000
然后大家去自己去下面填充好了

55
00:02:13,000 --> 00:02:15,000
对

56
00:02:15,000 --> 00:02:18,000
然后在 Curlum Panic 网站上面发出来

57
00:02:18,000 --> 00:02:23,000
就是哪一些话题可能可以讲

58
00:02:23,000 --> 00:02:24,000
然后如果讲的话

59
00:02:24,000 --> 00:02:28,000
可以讨论哪方面的问题

60
00:02:28,000 --> 00:02:31,000
但是请不要在下面写

61
00:02:31,000 --> 00:02:33,000
请谁谁当嘉宾

62
00:02:33,000 --> 00:02:34,000
就我们应该是请不到

63
00:02:34,000 --> 00:02:36,000
完全没有办法保证

64
00:02:36,000 --> 00:02:37,000
对

65
00:02:37,000 --> 00:02:39,000
继续

66
00:02:39,000 --> 00:02:40,000
好

67
00:02:40,000 --> 00:02:42,000
那我接着念这个刘春

68
00:02:42,000 --> 00:02:44,000
对朋友来的反馈

69
00:02:44,000 --> 00:02:47,000
说到数据统计和分析

70
00:02:47,000 --> 00:02:49,000
或者更宽泛的 Data Science

71
00:02:49,000 --> 00:02:51,000
其实学数学的人

72
00:02:51,000 --> 00:02:53,000
比纯粹的程序员有太大的优势了

73
00:02:53,000 --> 00:02:55,000
这一点我深有体会

74
00:02:55,000 --> 00:02:58,000
通常一个 Data Science 项目

75
00:02:58,000 --> 00:02:58,000
总是会包括

76
00:02:58,000 --> 00:03:01,000
总是会包括数据搜集

77
00:03:01,000 --> 00:03:03,000
进化转换处理

78
00:03:03,000 --> 00:03:04,000
分析建模

79
00:03:04,000 --> 00:03:05,000
对程序员来说

80
00:03:05,000 --> 00:03:07,000
对数据的操作基本不是事儿

81
00:03:07,000 --> 00:03:09,000
再加上像现在

82
00:03:09,000 --> 00:03:11,000
像 Azure Machine Learning Studio

83
00:03:11,000 --> 00:03:12,000
这样的工具

84
00:03:12,000 --> 00:03:15,000
基本连编程都不用就搞定了

85
00:03:15,000 --> 00:03:16,000
可是建模分析

86
00:03:16,000 --> 00:03:18,000
就是一个极大的挑战了

87
00:03:18,000 --> 00:03:20,000
选择什么样的算法是有效的

88
00:03:20,000 --> 00:03:22,000
什么算法是最优的

89
00:03:22,000 --> 00:03:23,000
针对特定的问题

90
00:03:23,000 --> 00:03:25,000
算法应该如何调整

91
00:03:25,000 --> 00:03:28,000
这些问题如果没有足够的数学基础

92
00:03:28,000 --> 00:03:29,000
无法回答

93
00:03:29,000 --> 00:03:30,000
而模型的好坏

94
00:03:30,000 --> 00:03:32,000
直接决定了你的分析是否有效

95
00:03:32,000 --> 00:03:36,000
可惜你们不打算讨论微软技术了

96
00:03:36,000 --> 00:03:38,000
否则尤其我们可以讨论一下

97
00:03:38,000 --> 00:03:40,000
Azure Machine Learning

98
00:03:40,000 --> 00:03:42,000
比较 R 和 Python

99
00:03:42,000 --> 00:03:44,000
在 Data Science 方面的长短

100
00:03:44,000 --> 00:03:47,000
对就是他的来信的全文

101
00:03:47,000 --> 00:03:48,000
对

102
00:03:48,000 --> 00:03:49,000
你怎么看

103
00:03:49,000 --> 00:03:53,000
其实我们是

104
00:03:53,000 --> 00:03:57,000
我们嘴上说不打算讨论微软技术

105
00:03:57,000 --> 00:04:00,000
但本期主要讨论微软技术

106
00:04:00,000 --> 00:04:03,000
嘴上说不要

107
00:04:03,000 --> 00:04:05,000
身体却很诚实是不是

108
00:04:05,000 --> 00:04:06,000
对

109
00:04:06,000 --> 00:04:09,000
我们不是不打算

110
00:04:09,000 --> 00:04:10,000
对我们是不打算

111
00:04:10,000 --> 00:04:12,000
讨论微软技术

112
00:04:12,000 --> 00:04:13,000
但是实际上微软技术

113
00:04:13,000 --> 00:04:14,000
是绕不开的

114
00:04:14,000 --> 00:04:14,000
在今天

115
00:04:14,000 --> 00:04:19,000
而且我不知道你有没有这种感觉

116
00:04:19,000 --> 00:04:21,000
就是挥别了巴尔默的

117
00:04:21,000 --> 00:04:22,000
这个中世纪的黑暗时代

118
00:04:22,000 --> 00:04:24,000
然后微软可能要开始

119
00:04:24,000 --> 00:04:25,000
唯一复兴了

120
00:04:25,000 --> 00:04:27,000
老树逢春

121
00:04:27,000 --> 00:04:28,000
对

122
00:04:28,000 --> 00:04:29,000
好吧

123
00:04:29,000 --> 00:04:33,000
就很可能微软又要开始大方一彩了

124
00:04:33,000 --> 00:04:36,000
但现在说这种话还没试过早

125
00:04:36,000 --> 00:04:37,000
不过有一件事情是肯定的

126
00:04:37,000 --> 00:04:38,000
就是想要绕开微软

127
00:04:38,000 --> 00:04:39,000
其实是很难的一件事情

128
00:04:39,000 --> 00:04:42,000
我觉得咱们俩的背景

129
00:04:42,000 --> 00:04:44,000
可能都是决定了

130
00:04:44,000 --> 00:04:45,000
就屁股决定脑袋

131
00:04:45,000 --> 00:04:48,000
就我们两个都是微软阵营之外的人

132
00:04:48,000 --> 00:04:50,000
所以有时候说起来微软问题

133
00:04:50,000 --> 00:04:52,000
总会有那种隔血散痒的感觉

134
00:04:52,000 --> 00:04:55,000
但是也没什么办法

135
00:04:55,000 --> 00:04:59,000
因为主持人就我俩了

136
00:04:59,000 --> 00:04:59,000
对吧

137
00:04:59,000 --> 00:05:03,000
你也不可能指望我们两个去搞微软的什么事情

138
00:05:03,000 --> 00:05:05,000
因为毕竟不是混这时候饭吃了

139
00:05:05,000 --> 00:05:06,000
何必呢

140
00:05:06,000 --> 00:05:09,000
所以当我们讨论微软问题的时候

141
00:05:09,000 --> 00:05:11,000
大家就当娱乐节目来听一话

142
00:05:11,000 --> 00:05:14,000
而且事实上我们这一期是要讨论微软技术

143
00:05:14,000 --> 00:05:18,000
然后 Data Science 这个主题

144
00:05:18,000 --> 00:05:20,000
我们其实计划很久了

145
00:05:20,000 --> 00:05:24,000
但是暂时还没有找到一个合适的嘉宾

146
00:05:24,000 --> 00:05:26,000
我们想把这期做好

147
00:05:26,000 --> 00:05:30,000
所以就反正要就多跳几期的票吧

148
00:05:30,000 --> 00:05:30,000
对

149
00:05:30,000 --> 00:05:32,000
您确定会讲

150
00:05:32,000 --> 00:05:33,000
对

151
00:05:33,000 --> 00:05:38,000
然后我再来念下一条反馈

152
00:05:38,000 --> 00:05:46,000
这是来自一位叫做 Virgil 明的同学

153
00:05:46,000 --> 00:05:47,000
Virgil

154
00:05:47,000 --> 00:05:48,000
Virgil

155
00:05:48,000 --> 00:05:51,000
就是那个诗人的名字

156
00:05:51,000 --> 00:05:54,000
这一期应该是

157
00:05:54,000 --> 00:05:58,000
这个反馈应该是针对我们提到 I Like Rebis 那一期

158
00:05:58,000 --> 00:05:59,000
两位主播

159
00:05:59,000 --> 00:06:03,000
虽然 I Like Rebis 听起来只是另外一个版本的 freelancer

160
00:06:03,000 --> 00:06:04,000
但是我注意到

161
00:06:04,000 --> 00:06:10,000
这个网站声称他们只解决 small well-defined programming task

162
00:06:10,000 --> 00:06:12,000
正如节目中提到的

163
00:06:12,000 --> 00:06:14,000
把需求明确到的这种程度

164
00:06:14,000 --> 00:06:17,000
其实已经完成了工作中的绝大估计

165
00:06:17,000 --> 00:06:18,000
最终只是需要找到胶水

166
00:06:18,000 --> 00:06:20,000
让需求的模块跑起来而已

167
00:06:20,000 --> 00:06:22,000
而程序员们并不缺胶水

168
00:06:22,000 --> 00:06:25,000
Well-defined 本身作为迁移的概念

169
00:06:25,000 --> 00:06:27,000
难以保留原有的严谨

170
00:06:27,000 --> 00:06:28,000
数学上

171
00:06:28,000 --> 00:06:30,000
对于运算符合函数

172
00:06:30,000 --> 00:06:34,000
对于是否 well-defined 都有形式上非常精确的判断

173
00:06:34,000 --> 00:06:36,000
而产品经理

174
00:06:36,000 --> 00:06:37,000
这个用法

175
00:06:37,000 --> 00:06:39,000
这个说法可能不是很精确

176
00:06:39,000 --> 00:06:41,000
可能客户只需要一个轮子

177
00:06:41,000 --> 00:06:42,000
缠不上产品

178
00:06:42,000 --> 00:06:47,000
所以产品经理这个措辞应该是要加引号了

179
00:06:47,000 --> 00:06:49,000
产品经理对于一个功能的定义

180
00:06:49,000 --> 00:06:51,000
很难做到形式上的精确

181
00:06:51,000 --> 00:06:54,000
如同算法课上我们碰到的代码那样

182
00:06:54,000 --> 00:06:56,000
可以用于证明各种的

183
00:06:56,000 --> 00:06:58,000
可以用于证明正确性

184
00:06:58,000 --> 00:07:02,000
我相信他们的客服要和客户来往好几次邮件

185
00:07:02,000 --> 00:07:04,000
才能明确具体要做什么

186
00:07:04,000 --> 00:07:06,000
但是当然这对客户也是好事

187
00:07:06,000 --> 00:07:09,000
而这让我想到了 Wallframe Alpha

188
00:07:09,000 --> 00:07:12,000
这个服务刚刚出现在媒体报道上的时候

189
00:07:12,000 --> 00:07:14,000
引起了不小的关注

190
00:07:14,000 --> 00:07:15,000
但是从 Google Trend

191
00:07:15,000 --> 00:07:22,000
我们可以看到他两个月之后的热度就下降到了顶点的 10%

192
00:07:22,000 --> 00:07:25,000
之后他的热度按年呈现周期变化

193
00:07:25,000 --> 00:07:28,000
在春季和秋季各达到一次高峰

194
00:07:28,000 --> 00:07:31,000
我的 Wallframe Alpha

195
00:07:31,000 --> 00:07:35,000
是大部分的热度来自于需要完成代数作业的学生

196
00:07:35,000 --> 00:07:40,000
他说在本校这个情况相当的普遍

197
00:07:40,000 --> 00:07:44,000
而 Wallframe Alpha 通过程序得到结果

198
00:07:44,000 --> 00:07:46,000
I like Rabbits

199
00:07:46,000 --> 00:07:47,000
这通过人工

200
00:07:47,000 --> 00:07:51,000
假定 Rabbits 的客户都提出 well defined 的需求

201
00:07:51,000 --> 00:07:52,000
不需要客户问

202
00:07:52,000 --> 00:07:54,000
您是不是要怎么怎么样

203
00:07:54,000 --> 00:07:58,000
那么为什么不能让程序代办 Rabbits 后面的工作呢

204
00:07:58,000 --> 00:08:01,000
尽管 NLP 是一个 National Language Processing

205
00:08:01,000 --> 00:08:03,000
是一个复杂到极点的工作

206
00:08:03,000 --> 00:08:05,000
但是应当可以假设

207
00:08:05,000 --> 00:08:07,000
比如描述一些问题的语言

208
00:08:07,000 --> 00:08:09,000
只是其中一个很小的字集

209
00:08:09,000 --> 00:08:12,000
它不需要或者只需要很少的清晰

210
00:08:12,000 --> 00:08:15,000
就能够方便的解析为语法术

211
00:08:15,000 --> 00:08:21,000
比如抓取我站点上所有每日 pageview 超过 100 的页面

212
00:08:21,000 --> 00:08:25,000
可以被解析为 fetchmysite.com

213
00:08:25,000 --> 00:08:31,000
Is page greater than pageview per day 100

214
00:08:31,000 --> 00:08:33,000
他是用 lisp 的语法写的

215
00:08:33,000 --> 00:08:34,000
反正他是写了一个语法术

216
00:08:34,000 --> 00:08:38,000
然后他说有很多条件

217
00:08:38,000 --> 00:08:40,000
比如说生成 Ruby 的目标类码

218
00:08:40,000 --> 00:08:43,000
可以从 Google Analytics 去提取 pageview

219
00:08:43,000 --> 00:08:46,000
静态页面统一使用 slash 结尾

220
00:08:46,000 --> 00:08:47,000
没有扩展名等等

221
00:08:47,000 --> 00:08:49,000
而这些作为语法术的可选部分

222
00:08:49,000 --> 00:08:51,000
肯定要留给默认识

223
00:08:51,000 --> 00:08:54,000
然后给这个语法术里面每一个元素写 Evil

224
00:08:54,000 --> 00:08:57,000
然后把它们拼接起来

225
00:08:57,000 --> 00:08:59,000
这一步才是最难的

226
00:08:59,000 --> 00:09:01,000
就大概就像那一期 XKCD

227
00:09:01,000 --> 00:09:03,000
我需要一个国家级的实验室

228
00:09:03,000 --> 00:09:04,000
数十个博士

229
00:09:04,000 --> 00:09:06,000
数年的时间

230
00:09:06,000 --> 00:09:08,000
数以百万计的美元

231
00:09:08,000 --> 00:09:10,000
忙忙多的边界约束

232
00:09:10,000 --> 00:09:11,000
函数逻辑

233
00:09:11,000 --> 00:09:12,000
参数类型

234
00:09:12,000 --> 00:09:15,000
但至少这是一个很少的

235
00:09:15,000 --> 00:09:16,000
但至少这是一个可以计算的问题

236
00:09:16,000 --> 00:09:19,000
而且很可能 AI 发展到这种程度的时候

237
00:09:19,000 --> 00:09:22,000
这一集的逻辑大部分也是由程序生成的

238
00:09:22,000 --> 00:09:23,000
可以自适应进化

239
00:09:23,000 --> 00:09:26,000
人工只是执行一定的 supervision

240
00:09:26,000 --> 00:09:28,000
supervision

241
00:09:28,000 --> 00:09:33,000
我一直是个人工智能领域的票友

242
00:09:33,000 --> 00:09:34,000
我喜欢这种畅想

243
00:09:34,000 --> 00:09:35,000
它让我感到放松

244
00:09:35,000 --> 00:09:37,000
谢谢两位带来的节目

245
00:09:37,000 --> 00:09:41,000
我刚才念的可能有点乱吧

246
00:09:41,000 --> 00:09:43,000
这位听众的主要意思就是

247
00:09:43,000 --> 00:09:44,000
他觉得 I like rabbits

248
00:09:44,000 --> 00:09:45,000
其实是可以一个

249
00:09:45,000 --> 00:09:50,000
其实是一个可以通过人工智能完成的网站

250
00:09:50,000 --> 00:09:51,000
对

251
00:09:51,000 --> 00:09:55,000
本质上我觉得他的说法固然没错

252
00:09:55,000 --> 00:09:58,000
但是在今天显示做不到的

253
00:09:58,000 --> 00:10:01,000
还是有点远

254
00:10:01,000 --> 00:10:02,000
但是我觉得

255
00:10:02,000 --> 00:10:05,000
但是起码觉得他至少就指出了上次

256
00:10:05,000 --> 00:10:06,000
我们聊的那个他的一个这个东西

257
00:10:06,000 --> 00:10:07,000
I like rabbits

258
00:10:07,000 --> 00:10:08,000
这个的一个短板

259
00:10:08,000 --> 00:10:11,000
就是你要让客户提出一个

260
00:10:11,000 --> 00:10:12,000
well defined 的 task

261
00:10:12,000 --> 00:10:14,000
其实是相当困难的

262
00:10:14,000 --> 00:10:16,000
所以他那个 well defined

263
00:10:16,000 --> 00:10:18,000
其实也是只是针对人而言

264
00:10:18,000 --> 00:10:21,000
他还没有说到一个机器

265
00:10:21,000 --> 00:10:22,000
能够认为它是一个 well defined

266
00:10:22,000 --> 00:10:25,000
他能够直接给出答案的这么一个方案

267
00:10:25,000 --> 00:10:28,000
所以这里面就在真正的人工智能实现之前

268
00:10:28,000 --> 00:10:29,000
我觉得这样的需求

269
00:10:29,000 --> 00:10:31,000
可能还是有的

270
00:10:31,000 --> 00:10:34,000
看可能是一个逐步缩小的过程

271
00:10:34,000 --> 00:10:36,000
对

272
00:10:36,000 --> 00:10:42,000
就好像我们觉得这个东西实现起来

273
00:10:42,000 --> 00:10:45,000
似乎没有什么太大的困难

274
00:10:45,000 --> 00:10:48,000
就至少在如果他实现好的话

275
00:10:48,000 --> 00:10:50,000
在他的交互界面上应该不会比

276
00:10:50,000 --> 00:10:53,000
Cortana 或者是

277
00:10:53,000 --> 00:10:57,000
那个复联里面的 Jarvis 更难

278
00:10:57,000 --> 00:11:00,000
至少在从操作者的角度来看

279
00:11:00,000 --> 00:11:01,000
应该不是这样

280
00:11:01,000 --> 00:11:02,000
但是实现起来

281
00:11:02,000 --> 00:11:05,000
我觉得目前的水准应该是做不到

282
00:11:05,000 --> 00:11:07,000
然后但我觉得这正是

283
00:11:07,000 --> 00:11:11,000
Alec Ravitz 的那个可取之处

284
00:11:11,000 --> 00:11:12,000
他就是他用一个

285
00:11:12,000 --> 00:11:15,000
就什么人力朋克的方式

286
00:11:15,000 --> 00:11:18,000
来帮你实现这种理论上

287
00:11:18,000 --> 00:11:21,000
应该由 AI 完成的工作

288
00:11:21,000 --> 00:11:21,000
对吧

289
00:11:21,000 --> 00:11:24,000
所以他不是 AI

290
00:11:24,000 --> 00:11:26,000
他是 TR

291
00:11:26,000 --> 00:11:26,000
True Intelligence

292
00:11:27,000 --> 00:11:28,000
对

293
00:11:28,000 --> 00:11:31,000
好吧

294
00:11:31,000 --> 00:11:34,000
那我来念今天最后一则听众反馈

295
00:11:34,000 --> 00:11:35,000
也不是最后一则

296
00:11:35,000 --> 00:11:36,000
就我们选出来的最后一则

297
00:11:36,000 --> 00:11:37,000
这是一位叫 Bill 的朋友

298
00:11:37,000 --> 00:11:40,000
他是给我们说 14 期的反馈

299
00:11:40,000 --> 00:11:44,000
第一次给内核恐慌写反馈

300
00:11:44,000 --> 00:11:46,000
一直挺喜欢你们的节目

301
00:11:46,000 --> 00:11:48,000
其实最初是从知乎上

302
00:11:48,000 --> 00:11:50,000
没名其妙的知道了这么一档节目

303
00:11:50,000 --> 00:11:52,000
也是从此才知道播客这个东西

304
00:11:52,000 --> 00:11:53,000
以及 IPN

305
00:11:53,000 --> 00:11:56,000
但听了几期之后觉得还挺有意思的

306
00:11:56,000 --> 00:11:57,000
抱着听失货的心态

307
00:11:57,000 --> 00:11:59,000
偶尔还能听到些干货

308
00:11:59,000 --> 00:12:01,000
其实很多货都听不懂

309
00:12:01,000 --> 00:12:03,000
这个还是蛮好笑的

310
00:12:03,000 --> 00:12:03,000
到底是

311
00:12:03,000 --> 00:12:06,000
我们节目到底是失货还是干货

312
00:12:06,000 --> 00:12:10,000
我觉得 podcast 不可能是干货

313
00:12:10,000 --> 00:12:13,000
这一棒子打死了所有 podcast

314
00:12:13,000 --> 00:12:14,000
但我觉得就是这样的

315
00:12:14,000 --> 00:12:15,000
反正我感觉吧

316
00:12:15,000 --> 00:12:17,000
我们节目讲干货的

317
00:12:17,000 --> 00:12:19,000
打引号干货的时候

318
00:12:19,000 --> 00:12:20,000
还是其实挺无聊的

319
00:12:20,000 --> 00:12:23,000
吹牛扯淡的时候

320
00:12:23,000 --> 00:12:24,000
还蛮有意思的

321
00:12:24,000 --> 00:12:26,000
所以我们还是吹牛扯淡

322
00:12:26,000 --> 00:12:28,000
如果从一个市场导向的

323
00:12:28,000 --> 00:12:31,000
市场导向的角度来看的话

324
00:12:31,000 --> 00:12:33,000
B 节目简直是

325
00:12:33,000 --> 00:12:37,000
吹水的那些期反馈都是最好的

326
00:12:37,000 --> 00:12:38,000
不是吗

327
00:12:38,000 --> 00:12:41,000
好

328
00:12:41,000 --> 00:12:42,000
我们明确的这个方向

329
00:12:42,000 --> 00:12:43,000
那我接着念

330
00:12:43,000 --> 00:12:46,000
十四期开头的时候

331
00:12:46,000 --> 00:12:47,000
吴涛说到

332
00:12:47,000 --> 00:12:50,000
摩托车不代表社会地位的时候

333
00:12:50,000 --> 00:12:50,000
如果说

334
00:12:50,000 --> 00:12:52,000
城乡结合部的青年晚上

335
00:12:52,000 --> 00:12:55,000
轰鸣摩托车的时候肯定不是这么想的

336
00:12:55,000 --> 00:12:57,000
我瞬间感觉被击中了

337
00:12:57,000 --> 00:12:58,000
因为我就在

338
00:12:58,000 --> 00:12:59,000
就是这个 Bill

339
00:12:59,000 --> 00:13:01,000
他说因为我就在这样一个地方

340
00:13:01,000 --> 00:13:02,000
听你们的播客

341
00:13:02,000 --> 00:13:05,000
每当有这样的七年呼吓而过的时候

342
00:13:05,000 --> 00:13:07,000
轰隆声压盖一切

343
00:13:07,000 --> 00:13:09,000
只能心里咒骂一声

344
00:13:09,000 --> 00:13:11,000
其实我现在不止城乡结合部是这样

345
00:13:11,000 --> 00:13:13,000
其实很多大城市

346
00:13:13,000 --> 00:13:16,000
你到了晚上交警下班的时候

347
00:13:16,000 --> 00:13:17,000
也有这种

348
00:13:17,000 --> 00:13:18,000
他不一定轰摩托车

349
00:13:18,000 --> 00:13:19,000
他可能轰的是

350
00:13:19,000 --> 00:13:20,000
可能几百万的跑车

351
00:13:20,000 --> 00:13:23,000
但是效果是一样的

352
00:13:23,000 --> 00:13:25,000
对

353
00:13:25,000 --> 00:13:27,000
轰拥门是一种很没品的表象

354
00:13:27,000 --> 00:13:29,000
轰拥门我没有意见

355
00:13:29,000 --> 00:13:30,000
我有意见的是

356
00:13:30,000 --> 00:13:32,000
他把那个销声器拆了在轰拥门

357
00:13:32,000 --> 00:13:33,000
OK

358
00:13:33,000 --> 00:13:35,000
这个是 02

359
00:13:35,000 --> 00:13:36,000
对

360
00:13:36,000 --> 00:13:38,000
那我接着念这个反馈

361
00:13:38,000 --> 00:13:41,000
一小时 09 分的时候

362
00:13:41,000 --> 00:13:42,000
吴涛谈到

363
00:13:42,000 --> 00:13:44,000
通过像 Arduino 这样的东西

364
00:13:44,000 --> 00:13:46,000
控制 LED 的

365
00:13:46,000 --> 00:13:47,000
是一个学习编程

366
00:13:47,000 --> 00:13:49,000
有成就感的方式

367
00:13:49,000 --> 00:13:50,000
其实如此

368
00:13:50,000 --> 00:13:53,000
作为一个电子类专业的学生

369
00:13:53,000 --> 00:13:55,000
我的 C 编程就是这样入门的

370
00:13:55,000 --> 00:13:56,000
恭喜

371
00:13:56,000 --> 00:13:59,000
关于操作系统存储自

372
00:13:59,000 --> 00:14:02,000
元年以来经历多少秒数这件事情

373
00:14:02,000 --> 00:14:03,000
我还是不太理解

374
00:14:03,000 --> 00:14:04,000
这是一个好的方式吗

375
00:14:04,000 --> 00:14:06,000
还是历史原因比较多

376
00:14:06,000 --> 00:14:08,000
节目中也提到了润秒的问题

377
00:14:08,000 --> 00:14:10,000
2015 年

378
00:14:10,000 --> 00:14:12,000
我们将迎来史上第 26 次润秒

379
00:14:12,000 --> 00:14:13,000
一些新闻也显示

380
00:14:13,000 --> 00:14:15,000
此前的润秒调整

381
00:14:15,000 --> 00:14:16,000
对软件造成了一定影响

382
00:14:16,000 --> 00:14:19,000
Linux 就是那个 Linux 的发明人

383
00:14:19,000 --> 00:14:21,000
好像也表示过这样的调整

384
00:14:21,000 --> 00:14:23,000
对操作系统而言比较麻烦

385
00:14:23,000 --> 00:14:24,000
不知道下次节目中

386
00:14:24,000 --> 00:14:26,000
有没有兴趣补充讨论一下

387
00:14:26,000 --> 00:14:28,000
那我们这里可以补一下

388
00:14:28,000 --> 00:14:30,000
就是为什么要采用这种所谓

389
00:14:30,000 --> 00:14:33,000
从某一个 epoque

390
00:14:33,000 --> 00:14:35,000
就是所谓某某元年开始

391
00:14:35,000 --> 00:14:38,000
经历多少秒数这种方式来表示时间

392
00:14:38,000 --> 00:14:42,000
这种我们一般叫做什么 Unix time

393
00:14:42,000 --> 00:14:44,000
就是 Unix 系统时间

394
00:14:44,000 --> 00:14:46,000
就是从那么 1970 年 1 月 1 日

395
00:14:46,000 --> 00:14:48,000
零时零分零秒开始

396
00:14:48,000 --> 00:14:49,000
然后数

397
00:14:49,000 --> 00:14:52,000
为什么要这种方式呢

398
00:14:52,000 --> 00:14:52,000
简单

399
00:14:52,000 --> 00:14:56,000
你只是需要你只需要记住一个

400
00:14:56,000 --> 00:15:00,000
就是外部定义的一个起点

401
00:15:00,000 --> 00:15:03,000
之后你是可以就就存数学一个非常简单的预算

402
00:15:03,000 --> 00:15:05,000
你不需要考虑任何

403
00:15:05,000 --> 00:15:09,000
就对于这个软件控制的这个计时来讲

404
00:15:09,000 --> 00:15:10,000
它是不需要考虑很多什么润秒

405
00:15:10,000 --> 00:15:11,000
时间轴

406
00:15:11,000 --> 00:15:14,000
那个就是日历上的那些时间的规范

407
00:15:14,000 --> 00:15:16,000
日历的不规则那些问题

408
00:15:16,000 --> 00:15:16,000
对吧

409
00:15:16,000 --> 00:15:18,000
所以都是很简单很规范的方式

410
00:15:18,000 --> 00:15:23,000
就是记录这个这个叫什么电子脉冲的这么一个次数而已

411
00:15:23,000 --> 00:15:24,000
对

412
00:15:24,000 --> 00:15:27,000
就如果你从这个角度来讲

413
00:15:27,000 --> 00:15:31,000
反而是人类计量时间的方式

414
00:15:31,000 --> 00:15:32,000
其实非常太蠢了

415
00:15:32,000 --> 00:15:33,000
简直

416
00:15:33,000 --> 00:15:35,000
和不可理喻的

417
00:15:35,000 --> 00:15:39,000
就是所有的周期都不能互相同步

418
00:15:39,000 --> 00:15:42,000
没有一个没有个叫什么

419
00:15:42,000 --> 00:15:44,000
最小公倍数

420
00:15:44,000 --> 00:15:48,000
还有最大公约数的这么一个概念策里面

421
00:15:48,000 --> 00:15:54,000
就是尤其是每次我看到这个周和月份

422
00:15:54,000 --> 00:15:56,000
不能 synchronize 的时候

423
00:15:56,000 --> 00:15:58,000
都会觉得实在是蠢头

424
00:15:58,000 --> 00:16:01,000
就因为本质上我们那种人类的

425
00:16:01,000 --> 00:16:02,000
就所谓的叫什么

426
00:16:02,000 --> 00:16:04,000
格力高理力

427
00:16:04,000 --> 00:16:05,000
还是什么力

428
00:16:05,000 --> 00:16:07,000
就我们现在用的那个功力

429
00:16:07,000 --> 00:16:08,000
如略力

430
00:16:08,000 --> 00:16:09,000
如略力

431
00:16:09,000 --> 00:16:12,000
好 如略力和格力高理力应该是同样一个东西

432
00:16:12,000 --> 00:16:16,000
对 一个是就是我就是这格力高理力

433
00:16:16,000 --> 00:16:19,000
格力高理力就是如略力

434
00:16:19,000 --> 00:16:21,000
对 就是只是翻译的写法不一样

435
00:16:21,000 --> 00:16:22,000
我觉得应该是这样子

436
00:16:22,000 --> 00:16:23,000
whatever 就是我们讲的功力

437
00:16:23,000 --> 00:16:25,000
我们现在常用的日历

438
00:16:25,000 --> 00:16:27,000
他本身上在做一些不可能完成的事情

439
00:16:27,000 --> 00:16:31,000
就是他要用他要同步太阳立法和

440
00:16:31,000 --> 00:16:34,000
就是太阳立法是这个是按这个每年

441
00:16:34,000 --> 00:16:37,000
然后他要同步这个月球的

442
00:16:37,000 --> 00:16:39,000
月球的这个这个这个转

443
00:16:39,000 --> 00:16:41,000
就是每个月的这个月像那些

444
00:16:41,000 --> 00:16:44,000
他还要再同每天这个地球的自转

445
00:16:44,000 --> 00:16:45,000
就是那个每天的这种一个情况

446
00:16:45,000 --> 00:16:47,000
然后这些都是互相有影响的

447
00:16:47,000 --> 00:16:50,000
不可能说是一个永恒不变完美的东西

448
00:16:50,000 --> 00:16:50,000
对吧

449
00:16:50,000 --> 00:16:52,000
等等

450
00:16:52,000 --> 00:16:55,000
功力是阴阳混合力吗

451
00:16:55,000 --> 00:16:56,000
不是吧

452
00:16:56,000 --> 00:16:56,000
不

453
00:16:56,000 --> 00:16:58,000
功力好像不会是考虑月像

454
00:16:58,000 --> 00:16:59,000
但是你们就

455
00:16:59,000 --> 00:17:01,000
怎么说

456
00:17:01,000 --> 00:17:02,000
他分那个 12 个月

457
00:17:02,000 --> 00:17:03,000
他最开始的初衷

458
00:17:03,000 --> 00:17:04,000
不就是为了做这件事情吗

459
00:17:04,000 --> 00:17:06,000
就每一个月每个月的概念

460
00:17:06,000 --> 00:17:07,000
不是这么来的吗

461
00:17:07,000 --> 00:17:13,000
但是他后来

462
00:17:13,000 --> 00:17:13,000
等等

463
00:17:13,000 --> 00:17:16,000
我这部分并不重要

464
00:17:16,000 --> 00:17:18,000
但是我的印象里面应该是

465
00:17:18,000 --> 00:17:20,000
巴比伦人开始

466
00:17:20,000 --> 00:17:23,000
阅历

467
00:17:23,000 --> 00:17:24,000
开始了

468
00:17:24,000 --> 00:17:26,000
就是现在用的功力的雏形

469
00:17:26,000 --> 00:17:27,000
但是他们后来

470
00:17:27,000 --> 00:17:30,000
他们一开始也是纯阴力

471
00:17:30,000 --> 00:17:30,000
就

472
00:17:30,000 --> 00:17:32,000
实际上大部分包括什么

473
00:17:32,000 --> 00:17:34,000
那个回教的立法

474
00:17:34,000 --> 00:17:35,000
也都是

475
00:17:35,000 --> 00:17:36,000
包括我们国家的立法

476
00:17:36,000 --> 00:17:38,000
其实大部分都是纯阴力

477
00:17:38,000 --> 00:17:39,000
但是

478
00:17:39,000 --> 00:17:41,000
中国人很聪明的

479
00:17:41,000 --> 00:17:42,000
就是加了节气这个东西

480
00:17:42,000 --> 00:17:45,000
然后用节气来规定农时

481
00:17:45,000 --> 00:17:47,000
然后日常作息跟着月亮走

482
00:17:47,000 --> 00:17:51,000
而不像功力这样比较愚蠢的

483
00:17:51,000 --> 00:17:54,000
功力实际上是试图用太阳力

484
00:17:54,000 --> 00:17:58,000
以为主

485
00:17:58,000 --> 00:18:03,000
然后月这个每个月的设置只是一种

486
00:18:03,000 --> 00:18:05,000
为了延期历史而已

487
00:18:05,000 --> 00:18:06,000
它跟人为的都行

488
00:18:06,000 --> 00:18:07,000
没有任何关系

489
00:18:07,000 --> 00:18:07,000
对

490
00:18:07,000 --> 00:18:08,000
OK

491
00:18:08,000 --> 00:18:09,000
没错

492
00:18:09,000 --> 00:18:11,000
OK

493
00:18:11,000 --> 00:18:14,000
但最主要的一个问题就是说

494
00:18:14,000 --> 00:18:15,000
这个地球自转

495
00:18:15,000 --> 00:18:17,000
它那个时间定义为一天

496
00:18:17,000 --> 00:18:19,000
转一圈转定义为一天

497
00:18:19,000 --> 00:18:21,000
它并不是一个稳定的

498
00:18:21,000 --> 00:18:23,000
这个是最要命的问题

499
00:18:23,000 --> 00:18:23,000
然后

500
00:18:23,000 --> 00:18:27,000
就是如果我们这样定一天

501
00:18:27,000 --> 00:18:28,000
是地球自转一周的话

502
00:18:28,000 --> 00:18:30,000
我们在都算出来是一年 365 天

503
00:18:30,000 --> 00:18:32,000
是肯定是不能严格满足的

504
00:18:32,000 --> 00:18:34,000
因为它总是会有点偏差

505
00:18:34,000 --> 00:18:37,000
然后就会造成之后的各种各样

506
00:18:37,000 --> 00:18:38,000
奇奇怪怪的什么

507
00:18:38,000 --> 00:18:41,000
润年润秒这样的奇奇怪怪的问题

508
00:18:41,000 --> 00:18:43,000
所以其实从这个角度来讲

509
00:18:43,000 --> 00:18:45,000
我们所企划机里面存储

510
00:18:45,000 --> 00:18:46,000
从某一个第三方

511
00:18:46,000 --> 00:18:49,000
外部定义的原点开始的

512
00:18:49,000 --> 00:18:51,000
然后经历一个纯数值的方法

513
00:18:51,000 --> 00:18:52,000
经历过到秒数的方法

514
00:18:52,000 --> 00:18:54,000
是相当简单的

515
00:18:54,000 --> 00:18:55,000
没错

516
00:18:55,000 --> 00:18:56,000
好

517
00:18:56,000 --> 00:18:57,000
这个就说多了

518
00:18:57,000 --> 00:18:59,000
接着那个反馈还有一段

519
00:18:59,000 --> 00:18:59,000
没有

520
00:18:59,000 --> 00:19:01,000
我们没念完

521
00:19:01,000 --> 00:19:04,000
单片机系统中

522
00:19:04,000 --> 00:19:04,000
记录时间

523
00:19:04,000 --> 00:19:05,000
一般会使用一个

524
00:19:05,000 --> 00:19:06,000
实时时钟

525
00:19:06,000 --> 00:19:08,000
就是 real time clock 的芯片

526
00:19:08,000 --> 00:19:13,000
使用 32,768 赫兹的

527
00:19:13,000 --> 00:19:14,000
金正座

528
00:19:14,000 --> 00:19:16,000
时钟源

529
00:19:16,000 --> 00:19:17,000
对

530
00:19:17,000 --> 00:19:20,000
很多单片机也集成这样的电路

531
00:19:20,000 --> 00:19:21,000
如果这样的

532
00:19:21,000 --> 00:19:23,000
就是实时时钟

533
00:19:23,000 --> 00:19:25,000
芯片配有试剂位的话

534
00:19:25,000 --> 00:19:27,000
溢出问题就不大

535
00:19:27,000 --> 00:19:29,000
也就是说有的 RTC

536
00:19:29,000 --> 00:19:31,000
这个芯片是没有的

537
00:19:31,000 --> 00:19:32,000
好像我印象中

538
00:19:32,000 --> 00:19:35,000
单片机的时钟是比较

539
00:19:35,000 --> 00:19:37,000
通常就 16 位好像

540
00:19:37,000 --> 00:19:41,000
3278 赫兹

541
00:19:41,000 --> 00:19:44,000
看起来就是 16 位的东西吗

542
00:19:44,000 --> 00:19:46,000
不就是它的记录的

543
00:19:46,000 --> 00:19:47,000
时长只有 16 位

544
00:19:47,000 --> 00:19:49,000
那么这必然就少不了的

545
00:19:49,000 --> 00:19:49,000
就是有个所谓的

546
00:19:49,000 --> 00:19:50,000
wrap around 的问题

547
00:19:50,000 --> 00:19:52,000
就是你 16 位很容易溢出

548
00:19:52,000 --> 00:19:53,000
你溢出的时候怎么办

549
00:19:53,000 --> 00:19:53,000
对

550
00:19:53,000 --> 00:19:55,000
就通常一般的做法就说

551
00:19:55,000 --> 00:19:56,000
反正溢出之后

552
00:19:56,000 --> 00:19:57,000
我就从头开始

553
00:19:57,000 --> 00:19:58,000
对我这个系统来讲

554
00:19:58,000 --> 00:20:00,000
如果我这个软件设计是

555
00:20:00,000 --> 00:20:03,000
就是鲁棒性够好的话

556
00:20:03,000 --> 00:20:05,000
你就实时时钟

557
00:20:05,000 --> 00:20:06,000
这个 wrap over

558
00:20:06,000 --> 00:20:07,000
就是溢出

559
00:20:07,000 --> 00:20:08,000
从重制归零

560
00:20:08,000 --> 00:20:09,000
重新开始记的时候

561
00:20:09,000 --> 00:20:11,000
对你系统来讲

562
00:20:11,000 --> 00:20:12,000
应该是不受影响的

563
00:20:12,000 --> 00:20:13,000
就是你总是说

564
00:20:13,000 --> 00:20:14,000
我经过这么一个固定秒

565
00:20:14,000 --> 00:20:15,000
是卡哒卡哒卡哒

566
00:20:15,000 --> 00:20:16,000
这样不断往前走

567
00:20:16,000 --> 00:20:17,000
当然了

568
00:20:17,000 --> 00:20:19,000
这都是美好的愿景

569
00:20:19,000 --> 00:20:20,000
实际情况永远

570
00:20:20,000 --> 00:20:21,000
通常不是这样的

571
00:20:21,000 --> 00:20:22,000
刚好最近是上周

572
00:20:22,000 --> 00:20:23,000
还是前周

573
00:20:23,000 --> 00:20:24,000
就发生了这么一个事

574
00:20:24,000 --> 00:20:25,000
是那个

575
00:20:25,000 --> 00:20:28,000
是美国的那个叫什么

576
00:20:28,000 --> 00:20:29,000
就是反正航空航

577
00:20:29,000 --> 00:20:30,000
就是那个民航的那种

578
00:20:30,000 --> 00:20:32,000
就检查到是波音 7

579
00:20:32,000 --> 00:20:33,000
87

580
00:20:33,000 --> 00:20:34,000
那个什么 Dreamliner

581
00:20:34,000 --> 00:20:36,000
它上面有个

582
00:20:36,000 --> 00:20:38,000
不是有那种

583
00:20:38,000 --> 00:20:39,000
飞机上有说航电系统

584
00:20:39,000 --> 00:20:40,000
几套是独立配置的

585
00:20:40,000 --> 00:20:41,000
但是他们发现

586
00:20:41,000 --> 00:20:43,000
有一个很窘的情况

587
00:20:43,000 --> 00:20:44,000
就是他们也会有

588
00:20:44,000 --> 00:20:45,000
那个 wrap over 的问题

589
00:20:45,000 --> 00:20:46,000
然后 wrap over 大概就说

590
00:20:46,000 --> 00:20:47,000
每这个飞机

591
00:20:47,000 --> 00:20:49,000
每连续服役

592
00:20:49,000 --> 00:20:49,000
就不关机

593
00:20:49,000 --> 00:20:51,000
连续服役超过多少

594
00:20:51,000 --> 00:20:52,000
100 多天

595
00:20:52,000 --> 00:20:53,000
还是几百天

596
00:20:53,000 --> 00:20:53,000
就不到一年

597
00:20:53,000 --> 00:20:54,000
反正

598
00:20:54,000 --> 00:20:55,000
这么一个时间内

599
00:20:55,000 --> 00:20:57,000
就会出现

600
00:20:57,000 --> 00:20:59,000
所有系统都挂掉

601
00:20:59,000 --> 00:20:59,000
就是因为这个

602
00:20:59,000 --> 00:21:01,000
时钟 wrap over 的

603
00:21:01,000 --> 00:21:01,000
那个问题

604
00:21:01,000 --> 00:21:02,000
没有处理好

605
00:21:02,000 --> 00:21:03,000
就是那个软件

606
00:21:03,000 --> 00:21:03,000
觉得

607
00:21:03,000 --> 00:21:04,000
所以就是要定时

608
00:21:04,000 --> 00:21:05,000
重启飞机

609
00:21:05,000 --> 00:21:05,000
是吧

610
00:21:05,000 --> 00:21:06,000
对

611
00:21:06,000 --> 00:21:06,000
没错

612
00:21:06,000 --> 00:21:07,000
所以他们飞机是

613
00:21:07,000 --> 00:21:09,000
不能连续开机

614
00:21:09,000 --> 00:21:10,000
就是不能连续

615
00:21:10,000 --> 00:21:11,000
也不是连续飞行

616
00:21:11,000 --> 00:21:11,000
就是不断电

617
00:21:11,000 --> 00:21:13,000
不能就是

618
00:21:13,000 --> 00:21:14,000
不间断运行

619
00:21:14,000 --> 00:21:15,000
不能超过

620
00:21:15,000 --> 00:21:15,000
好像 100 多天

621
00:21:15,000 --> 00:21:16,000
还是多少天

622
00:21:16,000 --> 00:21:17,000
反正是不到一年的时间

623
00:21:17,000 --> 00:21:18,000
但你像

624
00:21:18,000 --> 00:21:19,000
对于一些这种

625
00:21:19,000 --> 00:21:19,000
所谓现在这种

626
00:21:19,000 --> 00:21:21,000
那种大型的航空公司来说

627
00:21:21,000 --> 00:21:22,000
它是什么

628
00:21:22,000 --> 00:21:24,000
人停机不停

629
00:21:24,000 --> 00:21:26,000
就是几个航班

630
00:21:26,000 --> 00:21:26,000
几个机组

631
00:21:26,000 --> 00:21:27,000
轮流换

632
00:21:27,000 --> 00:21:29,000
但是飞机是一直在飞

633
00:21:29,000 --> 00:21:29,000
一直在运行的

634
00:21:29,000 --> 00:21:30,000
这样才

635
00:21:30,000 --> 00:21:31,000
因为飞机是一个

636
00:21:31,000 --> 00:21:32,000
什么资本性的支出

637
00:21:32,000 --> 00:21:34,000
就是能够尽量利用起来

638
00:21:34,000 --> 00:21:35,000
就尽量利用起来

639
00:21:35,000 --> 00:21:37,000
但是发现有这么一个

640
00:21:37,000 --> 00:21:37,000
很窘的问题

641
00:21:37,000 --> 00:21:38,000
结果就是

642
00:21:38,000 --> 00:21:40,000
什么被发现了

643
00:21:40,000 --> 00:21:40,000
这个漏洞

644
00:21:40,000 --> 00:21:41,000
也不叫漏洞

645
00:21:41,000 --> 00:21:41,000
就 bug

646
00:21:41,000 --> 00:21:43,000
然后则令回去修改了

647
00:21:43,000 --> 00:21:43,000
因为你想

648
00:21:43,000 --> 00:21:45,000
飞机飞到半空中

649
00:21:45,000 --> 00:21:47,000
然后突然所有航电系统

650
00:21:47,000 --> 00:21:48,000
都没有反应了

651
00:21:48,000 --> 00:21:49,000
你就没有办法

652
00:21:49,000 --> 00:21:50,000
因为现在这个飞机

653
00:21:50,000 --> 00:21:51,000
是什么

654
00:21:51,000 --> 00:21:52,000
Ctrl by wire

655
00:21:52,000 --> 00:21:53,000
线控

656
00:21:53,000 --> 00:21:54,000
对

657
00:21:54,000 --> 00:21:55,000
然后所有的

658
00:21:55,000 --> 00:21:56,000
那个线控没有

659
00:21:56,000 --> 00:21:57,000
这个电脑

660
00:21:57,000 --> 00:21:58,000
电脑不工作了

661
00:21:58,000 --> 00:21:59,000
那个没有什么

662
00:21:59,000 --> 00:22:00,000
控制

663
00:22:00,000 --> 00:22:02,000
这个机翼的转向

664
00:22:02,000 --> 00:22:03,000
完全都没有了

665
00:22:03,000 --> 00:22:03,000
你这个飞机

666
00:22:03,000 --> 00:22:05,000
就可以直接掉下去的

667
00:22:05,000 --> 00:22:05,000
很危险

668
00:22:05,000 --> 00:22:06,000
很危险

669
00:22:06,000 --> 00:22:07,000
所以怎么讲

670
00:22:07,000 --> 00:22:10,000
以前我们用 XP 的什么

671
00:22:10,000 --> 00:22:12,000
定时重启

672
00:22:12,000 --> 00:22:13,000
还是有一定的好处的

673
00:22:13,000 --> 00:22:17,000
让我想起来

674
00:22:17,000 --> 00:22:18,000
就是有一次我从

675
00:22:18,000 --> 00:22:20,000
我应该是要飞英国

676
00:22:20,000 --> 00:22:22,000
然后一开始从法兰克福

677
00:22:22,000 --> 00:22:23,000
飞阿尔斯特丹

678
00:22:23,000 --> 00:22:28,000
然后在法兰克福的飞机跑道上

679
00:22:28,000 --> 00:22:32,000
已经到那个跑道的起点了

680
00:22:32,000 --> 00:22:35,000
然后停了大概 30 分钟

681
00:22:35,000 --> 00:22:36,000
然后机长说

682
00:22:36,000 --> 00:22:39,000
我们的飞机上的电脑有点问题

683
00:22:39,000 --> 00:22:41,000
阿尔斯特丹是核航

684
00:22:41,000 --> 00:22:43,000
核航老是出这种腰额子

685
00:22:43,000 --> 00:22:44,000
然后核航的

686
00:22:44,000 --> 00:22:45,000
说核航

687
00:22:45,000 --> 00:22:48,000
我们在核航总部的系统工程师

688
00:22:48,000 --> 00:22:50,000
有一台一模一样的电脑

689
00:22:50,000 --> 00:22:51,000
但是他没有办法复原

690
00:22:51,000 --> 00:22:53,000
就是重现我们的这个 bug

691
00:22:53,000 --> 00:22:56,000
所以他建议我们重新启动一下飞机

692
00:22:56,000 --> 00:23:01,000
然后我们现在需要划回到那个 gate 那边

693
00:23:01,000 --> 00:23:02,000
然后重新启动

694
00:23:02,000 --> 00:23:05,000
然后就划回去重启

695
00:23:05,000 --> 00:23:07,000
然后你就坐在飞机上

696
00:23:07,000 --> 00:23:08,000
等着飞机重启

697
00:23:08,000 --> 00:23:10,000
那种感觉非常的 surreal

698
00:23:10,000 --> 00:23:11,000
重启的时候

699
00:23:11,000 --> 00:23:14,000
会听见一个

700
00:23:14,000 --> 00:23:17,000
当当当当当的声音

701
00:23:17,000 --> 00:23:19,000
然后系统

702
00:23:19,000 --> 00:23:21,000
这个时候就惊呆了

703
00:23:21,000 --> 00:23:21,000
是不是

704
00:23:21,000 --> 00:23:23,000
整个人都不好了

705
00:23:23,000 --> 00:23:25,000
没错

706
00:23:25,000 --> 00:23:26,000
对

707
00:23:26,000 --> 00:23:27,000
好吧

708
00:23:27,000 --> 00:23:30,000
今天的这个听众反馈就念到这里

709
00:23:30,000 --> 00:23:31,000
我们先

710
00:23:31,000 --> 00:23:33,000
刚才那个七八七的事情

711
00:23:33,000 --> 00:23:35,000
不是听众反馈的

712
00:23:35,000 --> 00:23:37,000
那个是我们自己讲的

713
00:23:37,000 --> 00:23:38,000
对

714
00:23:38,000 --> 00:23:40,000
对

715
00:23:40,000 --> 00:23:41,000
感谢各位听众反馈

716
00:23:41,000 --> 00:23:43,000
也欢迎你们写信给我们

717
00:23:43,000 --> 00:23:47,000
然后如果你写的足够长的话

718
00:23:47,000 --> 00:23:49,000
我们是非常愿意把它念出来

719
00:23:49,000 --> 00:23:53,000
这样可以填充节目时间吗

720
00:23:53,000 --> 00:23:56,000
哪怕是写信来骂我们

721
00:23:56,000 --> 00:23:57,000
或者批评我们

722
00:23:57,000 --> 00:23:59,000
我们也会非常乐意地念出来

723
00:23:59,000 --> 00:24:00,000
好吧

724
00:24:00,000 --> 00:24:01,000
狼子野心

725
00:24:01,000 --> 00:24:02,000
这个是

726
00:24:02,000 --> 00:24:05,000
好

727
00:24:05,000 --> 00:24:08,000
那我们先过多到这个新闻环节

728
00:24:08,000 --> 00:24:08,000
这个时候应该

729
00:24:08,000 --> 00:24:11,000
想起新闻联播的那个开场的声音

730
00:24:11,000 --> 00:24:15,000
Lawrence 可以插一个

731
00:24:15,000 --> 00:24:17,000
这周

732
00:24:17,000 --> 00:24:19,000
北京时间七点整

733
00:24:19,000 --> 00:24:21,000
也不叫这周

734
00:24:21,000 --> 00:24:22,000
就这段时间

735
00:24:22,000 --> 00:24:24,000
发生了一些

736
00:24:24,000 --> 00:24:26,000
不大不小的科技相关

737
00:24:26,000 --> 00:24:27,000
我们觉得还挺有意思的新闻

738
00:24:27,000 --> 00:24:30,000
我们跟大家聊一聊

739
00:24:30,000 --> 00:24:32,000
第一个是这个

740
00:24:32,000 --> 00:24:34,000
Ubuntu 那间公司叫什么

741
00:24:34,000 --> 00:24:35,000
Canonical 对吧

742
00:24:35,000 --> 00:24:36,000
对

743
00:24:36,000 --> 00:24:39,000
他们之前搞了一个叫做 Ubuntu Core

744
00:24:39,000 --> 00:24:40,000
这么一个精简的系统

745
00:24:40,000 --> 00:24:42,000
然后里面用了一个比较先进的

746
00:24:42,000 --> 00:24:42,000
不是比较先进

747
00:24:42,000 --> 00:24:44,000
比较现代的

748
00:24:44,000 --> 00:24:46,000
就包管理器叫做 Snappy

749
00:24:46,000 --> 00:24:47,000
然后简单来讲

750
00:24:47,000 --> 00:24:48,000
它就是一个把

751
00:24:48,000 --> 00:24:50,000
我们之前讲的那个 Docker

752
00:24:50,000 --> 00:24:51,000
这个种种 Container 的技术

753
00:24:51,000 --> 00:24:54,000
用到操作系统本身的

754
00:24:54,000 --> 00:24:55,000
这个升级和管理上

755
00:24:55,000 --> 00:24:58,000
而不是简单的用于这个操作系统上面的应用软件

756
00:24:58,000 --> 00:24:59,000
什么意思呢

757
00:24:59,000 --> 00:25:01,000
所以我们通常

758
00:25:01,000 --> 00:25:02,000
我们如果你就做

759
00:25:02,000 --> 00:25:05,000
用过任何一款的 Linux 的操作系统

760
00:25:05,000 --> 00:25:06,000
就你大概会知道

761
00:25:06,000 --> 00:25:07,000
它会定期的

762
00:25:07,000 --> 00:25:07,000
不能教你说

763
00:25:07,000 --> 00:25:09,000
我有多少个包要升级

764
00:25:09,000 --> 00:25:13,000
但是如果你运气足够不好

765
00:25:13,000 --> 00:25:15,000
就可能在升级过程中

766
00:25:15,000 --> 00:25:16,000
你电脑就重启死机或者断电了

767
00:25:16,000 --> 00:25:17,000
然后这个时候

768
00:25:17,000 --> 00:25:18,000
也会进到系统发现

769
00:25:18,000 --> 00:25:20,000
惨了

770
00:25:20,000 --> 00:25:21,000
系统已经叫做 Corrupt

771
00:25:21,000 --> 00:25:24,000
就是它在一个

772
00:25:24,000 --> 00:25:26,000
不是一个

773
00:25:26,000 --> 00:25:28,000
所谓的

774
00:25:28,000 --> 00:25:29,000
不是零也不是一的状态

775
00:25:29,000 --> 00:25:30,000
对

776
00:25:30,000 --> 00:25:31,000
就是电脑又啥

777
00:25:31,000 --> 00:25:31,000
薛林

778
00:25:31,000 --> 00:25:33,000
它是属于猫的状态

779
00:25:33,000 --> 00:25:35,000
你说不清楚

780
00:25:35,000 --> 00:25:36,000
它是一个什么

781
00:25:36,000 --> 00:25:37,000
除非你去看

782
00:25:37,000 --> 00:25:37,000
那你一看发现

783
00:25:37,000 --> 00:25:38,000
我靠

784
00:25:38,000 --> 00:25:40,000
各种文件缺一块

785
00:25:40,000 --> 00:25:41,000
那个包又没安装好

786
00:25:41,000 --> 00:25:42,000
然后就属于

787
00:25:42,000 --> 00:25:43,000
你本来的目标是说

788
00:25:43,000 --> 00:25:44,000
你从 A 状态

789
00:25:44,000 --> 00:25:46,000
就是可以工作的 A 状态

790
00:25:46,000 --> 00:25:47,000
切换到可以工作的 B 状态

791
00:25:47,000 --> 00:25:50,000
像你是卡在 A 和 B 之中间

792
00:25:50,000 --> 00:25:50,000
这么一个不干

793
00:25:50,000 --> 00:25:52,000
就很尴尬的一个境地

794
00:25:52,000 --> 00:25:53,000
怎么解决这个问题呢

795
00:25:53,000 --> 00:25:54,000
这个问题是对

796
00:25:54,000 --> 00:25:55,000
普通消费者来说

797
00:25:55,000 --> 00:25:56,000
可能还好

798
00:25:56,000 --> 00:25:57,000
就现在来说

799
00:25:57,000 --> 00:25:58,000
就总体而言

800
00:25:58,000 --> 00:26:00,000
还是比较少遇到系统崩溃

801
00:26:00,000 --> 00:26:01,000
就这系统在升级过程中

802
00:26:01,000 --> 00:26:02,000
崩溃的情况

803
00:26:02,000 --> 00:26:04,000
然后断电的话

804
00:26:04,000 --> 00:26:05,000
因为现在大部分都是笔记本

805
00:26:05,000 --> 00:26:06,000
就有自带电池

806
00:26:06,000 --> 00:26:08,000
也不太像过去的台湿机

807
00:26:08,000 --> 00:26:10,000
可能被你不小心碰到一个线

808
00:26:10,000 --> 00:26:11,000
或者就停电

809
00:26:11,000 --> 00:26:12,000
或者这种外部原因

810
00:26:12,000 --> 00:26:14,000
导致这个系统

811
00:26:14,000 --> 00:26:16,000
处于一个中间状态的情况

812
00:26:16,000 --> 00:26:18,000
但是还是会有的

813
00:26:18,000 --> 00:26:19,000
我们还是想讲

814
00:26:19,000 --> 00:26:21,000
降低这种样的风险要损失

815
00:26:21,000 --> 00:26:22,000
那么 Snappy

816
00:26:22,000 --> 00:26:24,000
它的这么一个核心理念

817
00:26:24,000 --> 00:26:24,000
就是说

818
00:26:24,000 --> 00:26:25,000
如果我们可以用

819
00:26:25,000 --> 00:26:27,000
之前我们讲过的这种 container

820
00:26:27,000 --> 00:26:28,000
集装箱化的技术

821
00:26:28,000 --> 00:26:29,000
就是我们是一个

822
00:26:29,000 --> 00:26:31,000
增量升级

823
00:26:31,000 --> 00:26:32,000
不叫增量升级

824
00:26:32,000 --> 00:26:34,000
就是一个升级好了

825
00:26:34,000 --> 00:26:36,000
才完全切换过来

826
00:26:36,000 --> 00:26:37,000
就在中间过程中

827
00:26:37,000 --> 00:26:37,000
出现任何问题

828
00:26:37,000 --> 00:26:38,000
我们都是可以回滚的

829
00:26:38,000 --> 00:26:40,000
那么这不就解决了

830
00:26:40,000 --> 00:26:41,000
这个问题了

831
00:26:41,000 --> 00:26:43,000
这个思想还是挺好的

832
00:26:43,000 --> 00:26:43,000
但它也不是

833
00:26:43,000 --> 00:26:45,000
Snappy

834
00:26:45,000 --> 00:26:46,000
也不是第一个

835
00:26:46,000 --> 00:26:46,000
做这种事情了

836
00:26:46,000 --> 00:26:47,000
之前有很多这种

837
00:26:47,000 --> 00:26:48,000
类似包管理的

838
00:26:48,000 --> 00:26:49,000
就不是从那种

839
00:26:49,000 --> 00:26:51,000
东西来做的尝试

840
00:26:51,000 --> 00:26:52,000
也有很多

841
00:26:52,000 --> 00:26:53,000
可能商用的话

842
00:26:53,000 --> 00:26:55,000
最大

843
00:26:55,000 --> 00:26:56,000
最普及的

844
00:26:56,000 --> 00:26:56,000
肯定还是

845
00:26:56,000 --> 00:26:59,000
Chromebook 用 Chrome OS

846
00:26:59,000 --> 00:27:01,000
Chrome OS

847
00:27:01,000 --> 00:27:03,000
它的升级过程中

848
00:27:03,000 --> 00:27:05,000
它系统是采用这么一种

849
00:27:05,000 --> 00:27:07,000
就是两个系统了

850
00:27:07,000 --> 00:27:08,000
就是升级

851
00:27:08,000 --> 00:27:09,000
升级 A 系统

852
00:27:09,000 --> 00:27:10,000
你是用 A 系统的时候

853
00:27:10,000 --> 00:27:11,000
它其实在升级 B 系统

854
00:27:11,000 --> 00:27:13,000
然后如果你在

855
00:27:13,000 --> 00:27:14,000
你切换到 B 系统

856
00:27:14,000 --> 00:27:15,000
发现有问题的话

857
00:27:15,000 --> 00:27:17,000
它还是可以切换回 A 系统的

858
00:27:17,000 --> 00:27:18,000
就是双系统

859
00:27:18,000 --> 00:27:19,000
两个分区

860
00:27:19,000 --> 00:27:19,000
这样子

861
00:27:19,000 --> 00:27:21,000
但是同样的系统

862
00:27:21,000 --> 00:27:22,000
它不同的版本这样

863
00:27:22,000 --> 00:27:23,000
然后

864
00:27:23,000 --> 00:27:24,000
对

865
00:27:24,000 --> 00:27:25,000
这个就比

866
00:27:25,000 --> 00:27:27,000
有一个 recovery mode

867
00:27:27,000 --> 00:27:29,000
要稍微先进一点

868
00:27:29,000 --> 00:27:29,000
没错

869
00:27:29,000 --> 00:27:31,000
两套系统都是可以用的

870
00:27:31,000 --> 00:27:31,000
对

871
00:27:31,000 --> 00:27:32,000
但是它这个力度

872
00:27:32,000 --> 00:27:33,000
还是比较粗

873
00:27:33,000 --> 00:27:34,000
就是说是一个

874
00:27:34,000 --> 00:27:36,000
因为只有两个 AB 轮化

875
00:27:36,000 --> 00:27:36,000
等于是

876
00:27:36,000 --> 00:27:37,000
对

877
00:27:37,000 --> 00:27:38,000
如果我们实际上

878
00:27:38,000 --> 00:27:39,000
做得好一点

879
00:27:39,000 --> 00:27:40,000
就是说尽量能够说

880
00:27:40,000 --> 00:27:42,000
连这个

881
00:27:42,000 --> 00:27:44,000
就是每一个系统的小的改动

882
00:27:44,000 --> 00:27:45,000
都可以通过这种

883
00:27:45,000 --> 00:27:47,000
像 container 的方式

884
00:27:47,000 --> 00:27:48,000
就不是 AB 轮化

885
00:27:48,000 --> 00:27:49,000
就是 ABCD

886
00:27:49,000 --> 00:27:49,000
可能这样

887
00:27:49,000 --> 00:27:50,000
你可以无限增多的

888
00:27:50,000 --> 00:27:51,000
那么方式轮化

889
00:27:51,000 --> 00:27:53,000
但我

890
00:27:53,000 --> 00:27:54,000
它那个是

891
00:27:54,000 --> 00:27:55,000
是年初的时候

892
00:27:55,000 --> 00:27:56,000
出了一个

893
00:27:56,000 --> 00:27:57,000
就可以大家用的

894
00:27:57,000 --> 00:27:58,000
试玩版

895
00:27:58,000 --> 00:27:59,000
我就用了一下

896
00:27:59,000 --> 00:27:59,000
就 Snappy

897
00:27:59,000 --> 00:28:01,000
我觉得还不错

898
00:28:01,000 --> 00:28:01,000
挺好的

899
00:28:01,000 --> 00:28:03,000
就感觉跟 Docker 挺像

900
00:28:03,000 --> 00:28:04,000
但是管理系统

901
00:28:04,000 --> 00:28:06,000
我觉得这个东西

902
00:28:06,000 --> 00:28:07,000
在服务器上的优势

903
00:28:07,000 --> 00:28:08,000
还是蛮大的

904
00:28:08,000 --> 00:28:09,000
就省心

905
00:28:09,000 --> 00:28:10,000
对

906
00:28:10,000 --> 00:28:11,000
我觉得这一次

907
00:28:11,000 --> 00:28:12,000
最重要的意义

908
00:28:12,000 --> 00:28:13,000
就是 Snappy

909
00:28:13,000 --> 00:28:14,000
终于要进入

910
00:28:14,000 --> 00:28:14,000
因为它之前

911
00:28:14,000 --> 00:28:15,000
只是在 Core 上用

912
00:28:15,000 --> 00:28:16,000
然后 Snappy

913
00:28:16,000 --> 00:28:18,000
现在要进入桌面板

914
00:28:18,000 --> 00:28:19,000
无关球桌面板

915
00:28:19,000 --> 00:28:21,000
是说是 15.04

916
00:28:21,000 --> 00:28:22,000
还是说哪一个

917
00:28:22,000 --> 00:28:22,000
就要做

918
00:28:22,000 --> 00:28:23,000
还是 15.10

919
00:28:23,000 --> 00:28:27,000
应该是 15.04

920
00:28:27,000 --> 00:28:29,000
就今年的

921
00:28:29,000 --> 00:28:29,000
就已经

922
00:28:29,000 --> 00:28:30,000
已经发了这个

923
00:28:30,000 --> 00:28:31,000
应该它是

924
00:28:31,000 --> 00:28:31,000
对

925
00:28:31,000 --> 00:28:33,000
它应该是要开始

926
00:28:33,000 --> 00:28:35,000
它这肯定是一个

927
00:28:35,000 --> 00:28:36,000
漫长的过程

928
00:28:36,000 --> 00:28:36,000
15.04

929
00:28:36,000 --> 00:28:37,000
我还没有装

930
00:28:37,000 --> 00:28:39,000
我觉得可能在 15.10

931
00:28:39,000 --> 00:28:39,000
里面会出现

932
00:28:39,000 --> 00:28:40,000
对

933
00:28:40,000 --> 00:28:41,000
因为它是 5 月 8 日

934
00:28:41,000 --> 00:28:41,000
announce 的

935
00:28:41,000 --> 00:28:42,000
所以它应该是

936
00:28:42,000 --> 00:28:43,000
15.10

937
00:28:43,000 --> 00:28:44,000
才会出现

938
00:28:44,000 --> 00:28:44,000
OK

939
00:28:44,000 --> 00:28:45,000
对

940
00:28:45,000 --> 00:28:45,000
因为这个

941
00:28:45,000 --> 00:28:46,000
Ubuntu

942
00:28:46,000 --> 00:28:47,000
它那个系统发行版本

943
00:28:47,000 --> 00:28:48,000
它就是说每隔

944
00:28:48,000 --> 00:28:49,000
好像是一年

945
00:28:49,000 --> 00:28:50,000
两年

946
00:28:50,000 --> 00:28:51,000
会发一个

947
00:28:51,000 --> 00:28:52,000
所谓长期维护版本

948
00:28:52,000 --> 00:28:53,000
Lunch Term Support

949
00:28:53,000 --> 00:28:54,000
对

950
00:28:54,000 --> 00:28:55,000
但是这之间

951
00:28:55,000 --> 00:28:55,000
我们现在

952
00:28:55,000 --> 00:28:56,000
就现在

953
00:28:56,000 --> 00:28:57,000
Snappy 进到

954
00:28:57,000 --> 00:28:58,000
Ubuntu

955
00:28:58,000 --> 00:28:59,000
这个正式版

956
00:28:59,000 --> 00:28:59,000
而不是之前

957
00:28:59,000 --> 00:29:00,000
那个级年版的 Core

958
00:29:00,000 --> 00:29:01,000
它其实是

959
00:29:01,000 --> 00:29:01,000
所谓的中间

960
00:29:01,000 --> 00:29:03,000
就是非

961
00:29:03,000 --> 00:29:05,000
长期维护版本的

962
00:29:05,000 --> 00:29:05,000
就是简单来说

963
00:29:05,000 --> 00:29:06,000
大家就做小白鼠

964
00:29:06,000 --> 00:29:09,000
就我还是挺鼓励大家

965
00:29:09,000 --> 00:29:10,000
去试试

966
00:29:10,000 --> 00:29:11,000
看看感觉怎么样

967
00:29:11,000 --> 00:29:11,000
然后

968
00:29:11,000 --> 00:29:13,000
因为这个毕竟是一个

969
00:29:13,000 --> 00:29:15,000
全新的管理系统

970
00:29:15,000 --> 00:29:15,000
我觉得

971
00:29:15,000 --> 00:29:17,000
必然是

972
00:29:17,000 --> 00:29:18,000
坑多路华

973
00:29:18,000 --> 00:29:21,000
要大家去多踩踩

974
00:29:21,000 --> 00:29:22,000
这样后人才用得爽

975
00:29:22,000 --> 00:29:23,000
就是鼓励大家

976
00:29:23,000 --> 00:29:24,000
去尝试一下

977
00:29:24,000 --> 00:29:26,000
然后我觉得

978
00:29:26,000 --> 00:29:27,000
它最大的

979
00:29:27,000 --> 00:29:29,000
一个特征

980
00:29:29,000 --> 00:29:30,000
或者一个特点

981
00:29:30,000 --> 00:29:31,000
就是它会

982
00:29:31,000 --> 00:29:33,000
它把所有的依赖

983
00:29:33,000 --> 00:29:35,000
全都打在一个包里面

984
00:29:35,000 --> 00:29:36,000
就是它每一个包都是原子的

985
00:29:36,000 --> 00:29:38,000
然后这个包一换上去

986
00:29:38,000 --> 00:29:38,000
所有依赖

987
00:29:38,000 --> 00:29:39,000
就跟这个包一起去了

988
00:29:39,000 --> 00:29:42,000
也算是它一个特点

989
00:29:42,000 --> 00:29:44,000
就它试图用

990
00:29:44,000 --> 00:29:46,000
就有点像 NPM 那样的方式来

991
00:29:46,000 --> 00:29:49,000
提供依赖管理

992
00:29:49,000 --> 00:29:50,000
就所谓依赖管理

993
00:29:50,000 --> 00:29:50,000
就是不管理

994
00:29:50,000 --> 00:29:51,000
就你需要什么

995
00:29:51,000 --> 00:29:52,000
都全都给你

996
00:29:52,000 --> 00:29:52,000
然后

997
00:29:52,000 --> 00:29:53,000
但是你也别

998
00:29:53,000 --> 00:29:55,000
你也别去操心这个东西

999
00:29:55,000 --> 00:29:56,000
别人用不用得上的问题

1000
00:29:56,000 --> 00:29:58,000
这点也是

1001
00:29:58,000 --> 00:30:01,000
就算是现代操作系统

1002
00:30:01,000 --> 00:30:05,000
发展的一个思潮

1003
00:30:05,000 --> 00:30:06,000
就好像

1004
00:30:06,000 --> 00:30:09,000
我觉得以前之所以会出现

1005
00:30:09,000 --> 00:30:09,000
DILHELL

1006
00:30:09,000 --> 00:30:11,000
或者是 Dependency HELL

1007
00:30:11,000 --> 00:30:13,000
这种窘境

1008
00:30:13,000 --> 00:30:14,000
原因之一

1009
00:30:14,000 --> 00:30:16,000
也就是以前的硬盘太贵了

1010
00:30:16,000 --> 00:30:17,000
然后现在

1011
00:30:17,000 --> 00:30:19,000
想节省空间

1012
00:30:19,000 --> 00:30:20,000
网速也快了

1013
00:30:20,000 --> 00:30:20,000
对

1014
00:30:20,000 --> 00:30:21,000
网速也快了

1015
00:30:21,000 --> 00:30:22,000
空间也多了

1016
00:30:22,000 --> 00:30:25,000
那这种依赖的问题

1017
00:30:25,000 --> 00:30:26,000
也许就可以成为这种

1018
00:30:26,000 --> 00:30:27,000
简单粗暴的

1019
00:30:27,000 --> 00:30:27,000
好

1020
00:30:27,000 --> 00:30:29,000
你要什么我就全都给你包起来

1021
00:30:29,000 --> 00:30:29,000
然后

1022
00:30:29,000 --> 00:30:31,000
一次性的

1023
00:30:31,000 --> 00:30:32,000
一股脑子给你抓上完事

1024
00:30:32,000 --> 00:30:33,000
这样的方式来解决

1025
00:30:33,000 --> 00:30:34,000
也挺好

1026
00:30:34,000 --> 00:30:35,000
这现在

1027
00:30:35,000 --> 00:30:36,000
有一个事情

1028
00:30:36,000 --> 00:30:37,000
我觉得不太清楚

1029
00:30:37,000 --> 00:30:38,000
但硬盘

1030
00:30:38,000 --> 00:30:38,000
我们现在说

1031
00:30:38,000 --> 00:30:40,000
存储空间不是一个问题

1032
00:30:40,000 --> 00:30:41,000
但是可能另外一个

1033
00:30:41,000 --> 00:30:42,000
就是说

1034
00:30:42,000 --> 00:30:43,000
这个共享的内存

1035
00:30:43,000 --> 00:30:44,000
可能还是一个问题

1036
00:30:44,000 --> 00:30:46,000
因为如果你是通过

1037
00:30:46,000 --> 00:30:47,000
就比如说你有两个应用

1038
00:30:47,000 --> 00:30:49,000
都连接到一个包的话

1039
00:30:49,000 --> 00:30:50,000
如果你两个应用

1040
00:30:50,000 --> 00:30:50,000
同时开

1041
00:30:50,000 --> 00:30:52,000
这个包本身是可以

1042
00:30:52,000 --> 00:30:53,000
就是他们共享的

1043
00:30:53,000 --> 00:30:55,000
那个外部连接的包

1044
00:30:55,000 --> 00:30:55,000
应该是可以

1045
00:30:55,000 --> 00:30:56,000
只用加载一份

1046
00:30:56,000 --> 00:30:57,000
到内存中的

1047
00:30:57,000 --> 00:30:58,000
然后当然两边是可以

1048
00:30:58,000 --> 00:31:00,000
共用的

1049
00:31:00,000 --> 00:31:02,000
如果在

1050
00:31:02,000 --> 00:31:06,000
加载本地的包之前

1051
00:31:06,000 --> 00:31:08,000
加载本地的依赖之前

1052
00:31:08,000 --> 00:31:09,000
先看一下内存里面

1053
00:31:09,000 --> 00:31:09,000
有没有

1054
00:31:09,000 --> 00:31:10,000
有的话就用了

1055
00:31:10,000 --> 00:31:11,000
但是这个版本

1056
00:31:11,000 --> 00:31:12,000
不就有问题吗

1057
00:31:12,000 --> 00:31:13,000
就可能两个是依赖

1058
00:31:13,000 --> 00:31:14,000
这个 slightly different

1059
00:31:14,000 --> 00:31:16,000
即便在 DIYLHELL 的时代

1060
00:31:16,000 --> 00:31:17,000
同样有这个问题

1061
00:31:17,000 --> 00:31:18,000
就是你可能需要

1062
00:31:18,000 --> 00:31:18,000
另外一个版本

1063
00:31:18,000 --> 00:31:19,000
那那个时候

1064
00:31:19,000 --> 00:31:20,000
你还是需要再

1065
00:31:20,000 --> 00:31:21,000
露了另外一份

1066
00:31:21,000 --> 00:31:22,000
嗯

1067
00:31:22,000 --> 00:31:24,000
没错

1068
00:31:24,000 --> 00:31:25,000
对

1069
00:31:25,000 --> 00:31:26,000
就总体来说

1070
00:31:26,000 --> 00:31:27,000
我觉得就是趋势

1071
00:31:27,000 --> 00:31:28,000
肯定还是说

1072
00:31:28,000 --> 00:31:30,000
不管以后操作系统也好

1073
00:31:30,000 --> 00:31:31,000
还是这个应用的

1074
00:31:31,000 --> 00:31:32,000
这个分发也好

1075
00:31:32,000 --> 00:31:33,000
可能这种

1076
00:31:33,000 --> 00:31:34,000
就是集装箱化

1077
00:31:34,000 --> 00:31:35,000
可能还是一个比较好的

1078
00:31:35,000 --> 00:31:35,000
其实就起码

1079
00:31:35,000 --> 00:31:37,000
它对管理哲学上

1080
00:31:37,000 --> 00:31:38,000
是一个相对

1081
00:31:38,000 --> 00:31:39,000
怎么讲

1082
00:31:39,000 --> 00:31:40,000
独立啊

1083
00:31:40,000 --> 00:31:42,000
好维护的一个东西

1084
00:31:42,000 --> 00:31:43,000
当然也有另外一种

1085
00:31:43,000 --> 00:31:45,000
就是是这种反对的声音

1086
00:31:45,000 --> 00:31:46,000
反对声音主要就是说

1087
00:31:46,000 --> 00:31:48,000
从这个软件的

1088
00:31:48,000 --> 00:31:49,000
这个维护和

1089
00:31:49,000 --> 00:31:50,000
这个开发的角度上

1090
00:31:50,000 --> 00:31:50,000
可以讲

1091
00:31:50,000 --> 00:31:51,000
比如说

1092
00:31:51,000 --> 00:31:52,000
之前我们不是出过

1093
00:31:52,000 --> 00:31:53,000
那个 SSL 的

1094
00:31:53,000 --> 00:31:53,000
那个 hard bleed 的

1095
00:31:53,000 --> 00:31:54,000
那个漏洞吗

1096
00:31:54,000 --> 00:31:55,000
那出了漏洞

1097
00:31:55,000 --> 00:31:56,000
肯定大家就要

1098
00:31:56,000 --> 00:31:56,000
求求求啊

1099
00:31:56,000 --> 00:31:57,000
因为很多人都用了

1100
00:31:57,000 --> 00:31:58,000
那个 openSSL

1101
00:31:58,000 --> 00:31:59,000
那个包嘛

1102
00:31:59,000 --> 00:32:00,000
那大家都要升级

1103
00:32:00,000 --> 00:32:01,000
到最新版本

1104
00:32:01,000 --> 00:32:03,000
才可以就避免

1105
00:32:03,000 --> 00:32:04,000
有那个 hard bleed 的

1106
00:32:04,000 --> 00:32:05,000
这种比较严重的

1107
00:32:05,000 --> 00:32:07,000
安全漏洞的存在

1108
00:32:07,000 --> 00:32:08,000
如果说

1109
00:32:08,000 --> 00:32:10,000
整个系统的这个 SSL

1110
00:32:10,000 --> 00:32:11,000
就用到

1111
00:32:11,000 --> 00:32:11,000
凡是用到

1112
00:32:11,000 --> 00:32:13,000
openSSL 的这个软件的包

1113
00:32:13,000 --> 00:32:14,000
都是外联到

1114
00:32:14,000 --> 00:32:15,000
同样一个

1115
00:32:15,000 --> 00:32:15,000
全都用自己的

1116
00:32:15,000 --> 00:32:17,000
对就只用升级一个

1117
00:32:17,000 --> 00:32:18,000
就只用一次升级

1118
00:32:18,000 --> 00:32:19,000
所有人都好了

1119
00:32:19,000 --> 00:32:19,000
对吧

1120
00:32:19,000 --> 00:32:20,000
就那个漏洞

1121
00:32:20,000 --> 00:32:21,000
就安全漏洞就解决了

1122
00:32:21,000 --> 00:32:23,000
但是如果采用像

1123
00:32:23,000 --> 00:32:25,000
集中箱化这种方式

1124
00:32:25,000 --> 00:32:26,000
就是各个 app

1125
00:32:26,000 --> 00:32:27,000
自己是一套

1126
00:32:27,000 --> 00:32:27,000
独立完整的

1127
00:32:27,000 --> 00:32:29,000
这么一套 stack 的话

1128
00:32:29,000 --> 00:32:31,000
那你要遇到这种

1129
00:32:31,000 --> 00:32:33,000
使用面积比较广的

1130
00:32:33,000 --> 00:32:35,000
然后又比较严重的 bug

1131
00:32:35,000 --> 00:32:37,000
这个软件 could bug 的时候

1132
00:32:37,000 --> 00:32:38,000
就比较痛苦了

1133
00:32:38,000 --> 00:32:39,000
你可能要挨个挨个 app

1134
00:32:39,000 --> 00:32:41,000
去升级去

1135
00:32:41,000 --> 00:32:42,000
然后才能保证

1136
00:32:42,000 --> 00:32:43,000
你整个系统中

1137
00:32:43,000 --> 00:32:44,000
没有任何部份

1138
00:32:44,000 --> 00:32:46,000
可以遭受到这种

1139
00:32:46,000 --> 00:32:46,000
hard bleed 的

1140
00:32:46,000 --> 00:32:47,000
类似的

1141
00:32:47,000 --> 00:32:49,000
这么一种漏洞的攻击

1142
00:32:49,000 --> 00:32:51,000
所以我不太清楚

1143
00:32:51,000 --> 00:32:51,000
这两面可能

1144
00:32:51,000 --> 00:32:52,000
还是有一点矛盾的

1145
00:32:52,000 --> 00:32:53,000
我觉得可能

1146
00:32:53,000 --> 00:32:54,000
从用户的层面来讲

1147
00:32:54,000 --> 00:32:55,000
他可能觉得像那种

1148
00:32:55,000 --> 00:32:57,000
现在说的 app

1149
00:32:57,000 --> 00:32:57,000
那种方式

1150
00:32:57,000 --> 00:32:58,000
就是装一个

1151
00:32:58,000 --> 00:32:59,000
然后直接删掉

1152
00:32:59,000 --> 00:32:59,000
也没什么问题

1153
00:32:59,000 --> 00:33:00,000
这种方式可能是更加

1154
00:33:00,000 --> 00:33:02,000
简单易懂和直观的

1155
00:33:02,000 --> 00:33:03,000
然后维护性更好

1156
00:33:03,000 --> 00:33:04,000
他不会有残留垃圾

1157
00:33:04,000 --> 00:33:05,000
什么的

1158
00:33:05,000 --> 00:33:06,000
但是我觉得像

1159
00:33:06,000 --> 00:33:07,000
从这个软件开发者的

1160
00:33:07,000 --> 00:33:08,000
这么一个角度来讲

1161
00:33:08,000 --> 00:33:09,000
可能还是会

1162
00:33:09,000 --> 00:33:10,000
对这个是有

1163
00:33:10,000 --> 00:33:12,000
比较大的意义的吧

1164
00:33:12,000 --> 00:33:13,000
没错

1165
00:33:13,000 --> 00:33:15,000
对

1166
00:33:15,000 --> 00:33:17,000
但我也不知道

1167
00:33:17,000 --> 00:33:18,000
他至少从

1168
00:33:18,000 --> 00:33:19,000
Ubuntu 的角度讲

1169
00:33:19,000 --> 00:33:20,000
他作为

1170
00:33:20,000 --> 00:33:21,000
全球第一的

1171
00:33:21,000 --> 00:33:23,000
Linux 发行

1172
00:33:23,000 --> 00:33:25,000
它已经全球第一了

1173
00:33:25,000 --> 00:33:26,000
是吗

1174
00:33:26,000 --> 00:33:27,000
应该是吧

1175
00:33:27,000 --> 00:33:28,000
我不太清楚

1176
00:33:28,000 --> 00:33:30,000
我前两天看了一份

1177
00:33:30,000 --> 00:33:31,000
服务器上的装机量

1178
00:33:31,000 --> 00:33:32,000
OK

1179
00:33:32,000 --> 00:33:33,000
现在应该是全球第一

1180
00:33:33,000 --> 00:33:34,000
OK

1181
00:33:34,000 --> 00:33:36,000
就我之前老是

1182
00:33:36,000 --> 00:33:37,000
看到有人说

1183
00:33:37,000 --> 00:33:38,000
我们这个 Fedora 多好

1184
00:33:38,000 --> 00:33:40,000
我们这个 CentOS 多好

1185
00:33:40,000 --> 00:33:40,000
多好

1186
00:33:40,000 --> 00:33:41,000
所以也很难讲

1187
00:33:41,000 --> 00:33:43,000
所以可能企业级

1188
00:33:43,000 --> 00:33:45,000
和这个全球

1189
00:33:45,000 --> 00:33:46,000
这个一个总体的水平

1190
00:33:46,000 --> 00:33:47,000
还是不太一样的

1191
00:33:47,000 --> 00:33:48,000
对

1192
00:33:48,000 --> 00:33:49,000
你要说付费的话

1193
00:33:49,000 --> 00:33:49,000
那现在 Red Hat

1194
00:33:49,000 --> 00:33:51,000
仍旧是第一的吧

1195
00:33:51,000 --> 00:33:51,000
应该是

1196
00:33:51,000 --> 00:33:53,000
但如果你考虑

1197
00:33:53,000 --> 00:33:55,000
所有的 Linux 发行版本

1198
00:33:55,000 --> 00:33:55,000
装机量的话

1199
00:33:55,000 --> 00:33:57,000
Ubuntu 现在应该

1200
00:33:57,000 --> 00:33:57,000
已经是

1201
00:33:57,000 --> 00:33:59,000
不是应该已经是

1202
00:33:59,000 --> 00:34:01,000
是我现在看了一份报道

1203
00:34:01,000 --> 00:34:01,000
是

1204
00:34:01,000 --> 00:34:03,000
小白用户太多

1205
00:34:03,000 --> 00:34:04,000
什么商业知识都不够用了

1206
00:34:04,000 --> 00:34:06,000
嗯

1207
00:34:06,000 --> 00:34:08,000
对

1208
00:34:08,000 --> 00:34:10,000
就好像现在 SystemD

1209
00:34:10,000 --> 00:34:12,000
也已经跟着 15.04

1210
00:34:12,000 --> 00:34:14,000
成为 Ubuntu 的

1211
00:34:14,000 --> 00:34:16,000
默认启动项目了

1212
00:34:16,000 --> 00:34:16,000
所以

1213
00:34:16,000 --> 00:34:17,000
启动光景器了

1214
00:34:17,000 --> 00:34:17,000
所以

1215
00:34:17,000 --> 00:34:19,000
OK

1216
00:34:19,000 --> 00:34:20,000
对

1217
00:34:20,000 --> 00:34:22,000
他们推动力量还是很大

1218
00:34:22,000 --> 00:34:25,000
没错

1219
00:34:25,000 --> 00:34:27,000
但也有很多人对这个

1220
00:34:27,000 --> 00:34:28,000
有什么不爽的声音

1221
00:34:28,000 --> 00:34:29,000
还是另外一回事

1222
00:34:29,000 --> 00:34:31,000
以后找机会再聊吧

1223
00:34:31,000 --> 00:34:31,000
对

1224
00:34:31,000 --> 00:34:34,000
他们就无情的被历史的轰流淹没了

1225
00:34:34,000 --> 00:34:38,000
OK

1226
00:34:38,000 --> 00:34:41,000
下一条新闻是一个

1227
00:34:41,000 --> 00:34:43,000
也不算多重要

1228
00:34:43,000 --> 00:34:44,000
就是有一个

1229
00:34:44,000 --> 00:34:46,000
有一个

1230
00:34:46,000 --> 00:34:47,000
manifesto

1231
00:34:47,000 --> 00:34:51,000
叫做 nottcp 活动

1232
00:34:51,000 --> 00:34:52,000
对

1233
00:34:52,000 --> 00:34:53,000
你这里肯定要解释一下

1234
00:34:53,000 --> 00:34:55,000
它的主要的诉求是什么

1235
00:34:55,000 --> 00:34:56,000
对

1236
00:34:56,000 --> 00:34:58,000
其实很简单

1237
00:34:58,000 --> 00:34:58,000
就是一个网站

1238
00:34:58,000 --> 00:35:00,000
一个叫 nottcp.io

1239
00:35:00,000 --> 00:35:01,000
然后上面有一个

1240
00:35:01,000 --> 00:35:02,000
大大的 TCP

1241
00:35:02,000 --> 00:35:03,000
然后画了那个

1242
00:35:03,000 --> 00:35:05,000
就是在上面画了

1243
00:35:05,000 --> 00:35:06,000
那个禁止的标志

1244
00:35:06,000 --> 00:35:07,000
然后

1245
00:35:07,000 --> 00:35:09,000
它开宗名义也说

1246
00:35:09,000 --> 00:35:10,000
就说好

1247
00:35:10,000 --> 00:35:11,000
我们也是一个

1248
00:35:11,000 --> 00:35:12,000
怎么说

1249
00:35:12,000 --> 00:35:14,000
hipster 的一个宣告

1250
00:35:14,000 --> 00:35:15,000
就是

1251
00:35:15,000 --> 00:35:16,000
顺应了

1252
00:35:16,000 --> 00:35:18,000
比如说 no.js

1253
00:35:18,000 --> 00:35:22,000
他这句话写的其实挺酸的

1254
00:35:22,000 --> 00:35:22,000
他说

1255
00:35:22,000 --> 00:35:25,000
Just as no.js and NIO

1256
00:35:25,000 --> 00:35:26,000
provided the word

1257
00:35:26,000 --> 00:35:29,000
that proved to the world

1258
00:35:29,000 --> 00:35:31,000
that bare metal performance

1259
00:35:31,000 --> 00:35:34,000
is always worth the consequent unreadable code

1260
00:35:34,000 --> 00:35:36,000
就说

1261
00:35:36,000 --> 00:35:38,000
no.js

1262
00:35:38,000 --> 00:35:38,000
就是 JSQ

1263
00:35:38,000 --> 00:35:39,000
这么丑的东西

1264
00:35:39,000 --> 00:35:41,000
但是为了 performance

1265
00:35:41,000 --> 00:35:45,000
也是可以被人接受的

1266
00:35:45,000 --> 00:35:46,000
或者是

1267
00:35:46,000 --> 00:35:47,000
那么多这种

1268
00:35:47,000 --> 00:35:48,000
莫名其妙

1269
00:35:48,000 --> 00:35:48,000
no.js

1270
00:35:48,000 --> 00:35:49,000
no.js

1271
00:35:49,000 --> 00:35:50,000
的 database

1272
00:35:50,000 --> 00:35:54,000
也是被证明

1273
00:35:54,000 --> 00:35:55,000
是非常有用的

1274
00:35:55,000 --> 00:35:57,000
我们现在也要开始

1275
00:35:57,000 --> 00:35:58,000
就是宣扬一下

1276
00:35:58,000 --> 00:35:58,000
这个 TCP

1277
00:35:58,000 --> 00:36:00,000
其实是非常传统

1278
00:36:00,000 --> 00:36:00,000
非常老掉牙

1279
00:36:00,000 --> 00:36:01,000
非常不那么

1280
00:36:01,000 --> 00:36:04,000
入实的东西

1281
00:36:04,000 --> 00:36:06,000
我们要宣扬大家来开始

1282
00:36:06,000 --> 00:36:08,000
摒弃 TCP

1283
00:36:08,000 --> 00:36:08,000
在

1284
00:36:08,000 --> 00:36:10,000
在该

1285
00:36:10,000 --> 00:36:12,000
在不该使用 TCP 的地方

1286
00:36:12,000 --> 00:36:13,000
就不要使用 TCP

1287
00:36:13,000 --> 00:36:14,000
然后

1288
00:36:14,000 --> 00:36:15,000
对

1289
00:36:15,000 --> 00:36:17,000
其实它的诉求

1290
00:36:17,000 --> 00:36:17,000
就是说

1291
00:36:17,000 --> 00:36:21,000
你要尽量去采用 UDP 协议

1292
00:36:21,000 --> 00:36:22,000
做一些

1293
00:36:22,000 --> 00:36:25,000
本来不该有 TCP 完成

1294
00:36:25,000 --> 00:36:27,000
或者是使用 TCP 协议

1295
00:36:27,000 --> 00:36:29,000
会太重的场合之下

1296
00:36:29,000 --> 00:36:30,000
主要有哪些呢

1297
00:36:30,000 --> 00:36:31,000
可以举几个例子吗

1298
00:36:31,000 --> 00:36:32,000
对

1299
00:36:32,000 --> 00:36:33,000
比如说它举的例子

1300
00:36:33,000 --> 00:36:34,000
像那个

1301
00:36:34,000 --> 00:36:36,000
Google 开发的

1302
00:36:36,000 --> 00:36:37,000
叫 Quick 吧

1303
00:36:37,000 --> 00:36:39,000
Quick 协议

1304
00:36:39,000 --> 00:36:40,000
其实就是一个

1305
00:36:40,000 --> 00:36:44,000
以基于 UDP 的传输协议

1306
00:36:44,000 --> 00:36:45,000
或者是

1307
00:36:45,000 --> 00:36:46,000
它写了一些

1308
00:36:46,000 --> 00:36:46,000
比如说

1309
00:36:46,000 --> 00:36:47,000
比如说

1310
00:36:47,000 --> 00:36:47,000
DNS

1311
00:36:47,000 --> 00:36:48,000
或者是 NTP

1312
00:36:48,000 --> 00:36:49,000
或者 RTP

1313
00:36:49,000 --> 00:36:52,000
其实全都是基于 UDP 的协议

1314
00:36:52,000 --> 00:36:53,000
然后

1315
00:36:53,000 --> 00:36:53,000
它的

1316
00:36:53,000 --> 00:36:54,000
这个

1317
00:36:54,000 --> 00:36:55,000
这个

1318
00:36:55,000 --> 00:36:55,000
这个

1319
00:36:55,000 --> 00:36:55,000
这个

1320
00:36:55,000 --> 00:36:55,000
这个

1321
00:36:55,000 --> 00:36:55,000
这个

1322
00:36:55,000 --> 00:36:56,000
这个

1323
00:36:56,000 --> 00:36:57,000
要点就是

1324
00:36:57,000 --> 00:36:57,000
如果你

1325
00:36:57,000 --> 00:36:59,000
开发一个

1326
00:36:59,000 --> 00:37:00,000
呃

1327
00:37:00,000 --> 00:37:01,000
比较依赖

1328
00:37:01,000 --> 00:37:02,000
实时性

1329
00:37:02,000 --> 00:37:03,000
呃

1330
00:37:03,000 --> 00:37:04,000
比较强调

1331
00:37:04,000 --> 00:37:05,000
不能有 Let's see

1332
00:37:05,000 --> 00:37:06,000
呃

1333
00:37:06,000 --> 00:37:06,000
但是

1334
00:37:06,000 --> 00:37:08,000
又能接受

1335
00:37:08,000 --> 00:37:08,000
丢一些包的

1336
00:37:08,000 --> 00:37:09,000
F 的话呢

1337
00:37:09,000 --> 00:37:10,000
其实用 TCP 是一个

1338
00:37:10,000 --> 00:37:11,000
很好的选择

1339
00:37:11,000 --> 00:37:12,000
呃

1340
00:37:12,000 --> 00:37:12,000
呃

1341
00:37:12,000 --> 00:37:13,000
他还举了那个

1342
00:37:13,000 --> 00:37:14,000
Torrent

1343
00:37:14,000 --> 00:37:15,000
就是 BT 下载的

1344
00:37:15,000 --> 00:37:16,000
那个公司

1345
00:37:16,000 --> 00:37:17,000
那个组织

1346
00:37:17,000 --> 00:37:18,000
所开发的

1347
00:37:18,000 --> 00:37:18,000
呃

1348
00:37:18,000 --> 00:37:18,000
所以

1349
00:37:18,000 --> 00:37:19,000
叫什么

1350
00:37:19,000 --> 00:37:21,000
呃

1351
00:37:21,000 --> 00:37:23,000
MuTP 吧

1352
00:37:23,000 --> 00:37:24,000
OK

1353
00:37:24,000 --> 00:37:25,000
Mu

1354
00:37:25,000 --> 00:37:26,000
就是一个那个

1355
00:37:26,000 --> 00:37:27,000
希腊字母的

1356
00:37:27,000 --> 00:37:27,000
Mu

1357
00:37:27,000 --> 00:37:28,000
MuTP

1358
00:37:28,000 --> 00:37:30,000
的 Transfer Protocol

1359
00:37:30,000 --> 00:37:32,000
也是基于 UDP 的

1360
00:37:32,000 --> 00:37:32,000
对

1361
00:37:32,000 --> 00:37:33,000
Mu

1362
00:37:33,000 --> 00:37:34,000
这个要解释一下

1363
00:37:34,000 --> 00:37:35,000
Mu 就是在

1364
00:37:35,000 --> 00:37:36,000
对应到英文

1365
00:37:36,000 --> 00:37:38,000
就是 micro 的意思嘛

1366
00:37:38,000 --> 00:37:39,000
就是微型

1367
00:37:39,000 --> 00:37:39,000
对很小

1368
00:37:39,000 --> 00:37:40,000
微型

1369
00:37:40,000 --> 00:37:41,000
Cp

1370
00:37:41,000 --> 00:37:41,000
微型

1371
00:37:41,000 --> 00:37:42,000
Control Protocol

1372
00:37:42,000 --> 00:37:43,000
这样的一个意思

1373
00:37:43,000 --> 00:37:45,000
他晚上有这么一段话

1374
00:37:45,000 --> 00:37:46,000
就说 TCP 的问题是什么

1375
00:37:46,000 --> 00:37:47,000
就说

1376
00:37:47,000 --> 00:37:49,000
The problem now is that

1377
00:37:49,000 --> 00:37:51,000
TCP gives us an ordering guarantee

1378
00:37:51,000 --> 00:37:53,000
that's much stronger

1379
00:37:53,000 --> 00:37:54,000
than we need

1380
00:37:54,000 --> 00:37:56,000
All packets are reassembled

1381
00:37:56,000 --> 00:37:58,000
in order as they are received

1382
00:37:58,000 --> 00:37:59,000
But we know that

1383
00:37:59,000 --> 00:38:00,000
the order in which

1384
00:38:00,000 --> 00:38:01,000
we interleave them

1385
00:38:01,000 --> 00:38:03,000
never matter to begin with

1386
00:38:03,000 --> 00:38:05,000
one delayed packet

1387
00:38:05,000 --> 00:38:07,000
can artificially

1388
00:38:07,000 --> 00:38:08,000
delay the availability

1389
00:38:08,000 --> 00:38:09,000
of the data

1390
00:38:09,000 --> 00:38:10,000
for all streams

1391
00:38:10,000 --> 00:38:12,000
multiplexed over that connection

1392
00:38:12,000 --> 00:38:14,000
This is one form

1393
00:38:14,000 --> 00:38:15,000
of head of line blocking

1394
00:38:15,000 --> 00:38:16,000
as before

1395
00:38:16,000 --> 00:38:18,000
the application knows

1396
00:38:18,000 --> 00:38:20,000
its specific needs

1397
00:38:20,000 --> 00:38:21,000
better than TCP

1398
00:38:21,000 --> 00:38:22,000
in this case

1399
00:38:22,000 --> 00:38:24,000
we've treated startup's latency

1400
00:38:24,000 --> 00:38:26,000
for significant steady state latency

1401
00:38:26,000 --> 00:38:28,000
when neither is necessary

1402
00:38:28,000 --> 00:38:30,000
这段话有点绕

1403
00:38:30,000 --> 00:38:31,000
然后有点长

1404
00:38:31,000 --> 00:38:33,000
然后里面有设计了很多概念

1405
00:38:33,000 --> 00:38:34,000
肯定要解释一下

1406
00:38:34,000 --> 00:38:35,000
才能够理解

1407
00:38:35,000 --> 00:38:37,000
就很多如果不是学

1408
00:38:37,000 --> 00:38:38,000
网络通信的

1409
00:38:38,000 --> 00:38:39,000
其实我们也不是学网络通信

1410
00:38:39,000 --> 00:38:40,000
没事

1411
00:38:40,000 --> 00:38:41,000
半掉止水

1412
00:38:41,000 --> 00:38:41,000
但是就尽量

1413
00:38:41,000 --> 00:38:43,000
尽量解释一下

1414
00:38:43,000 --> 00:38:43,000
什么意思

1415
00:38:43,000 --> 00:38:45,000
TCP 的主要问题

1416
00:38:45,000 --> 00:38:46,000
就是说它有一个

1417
00:38:46,000 --> 00:38:46,000
TCP 我们知道

1418
00:38:46,000 --> 00:38:48,000
它提供一个所谓的

1419
00:38:48,000 --> 00:38:49,000
排序的保证

1420
00:38:49,000 --> 00:38:50,000
就是说你先发的报

1421
00:38:50,000 --> 00:38:52,000
一定是先收到的

1422
00:38:52,000 --> 00:38:54,000
后发的报是后收到的

1423
00:38:54,000 --> 00:38:57,000
但这个是一个非常强的

1424
00:38:57,000 --> 00:38:58,000
这么一个

1425
00:38:58,000 --> 00:38:59,000
这个一个感染器

1426
00:38:59,000 --> 00:39:00,000
很强的一个保证

1427
00:39:00,000 --> 00:39:02,000
就是因为

1428
00:39:02,000 --> 00:39:02,000
但实际传送

1429
00:39:02,000 --> 00:39:03,000
我们的网络传送

1430
00:39:03,000 --> 00:39:04,000
并不是说严格

1431
00:39:04,000 --> 00:39:05,000
是先入先出

1432
00:39:05,000 --> 00:39:06,000
因为跟一直走的

1433
00:39:06,000 --> 00:39:07,000
那个路径不一样

1434
00:39:07,000 --> 00:39:09,000
和可能一些延迟

1435
00:39:09,000 --> 00:39:10,000
或丢包的情况不一样

1436
00:39:10,000 --> 00:39:11,000
它是要

1437
00:39:11,000 --> 00:39:13,000
就是你的超线程底层

1438
00:39:13,000 --> 00:39:15,000
就 TCP 这个鞋这一层

1439
00:39:15,000 --> 00:39:16,000
是要做一些额外的工作

1440
00:39:16,000 --> 00:39:17,000
去把那些

1441
00:39:17,000 --> 00:39:19,000
可能是乱序来的包

1442
00:39:19,000 --> 00:39:20,000
重新组合成有序的

1443
00:39:20,000 --> 00:39:21,000
这样的话

1444
00:39:21,000 --> 00:39:22,000
会有什么问题

1445
00:39:22,000 --> 00:39:23,000
就是说

1446
00:39:23,000 --> 00:39:25,000
一个

1447
00:39:25,000 --> 00:39:26,000
假设你发的报

1448
00:39:26,000 --> 00:39:27,000
顺序是 12345

1449
00:39:27,000 --> 00:39:28,000
这样顺序发

1450
00:39:28,000 --> 00:39:29,000
里面还有 TCP 的

1451
00:39:29,000 --> 00:39:30,000
排序保证

1452
00:39:30,000 --> 00:39:31,000
你收到的也是 12345

1453
00:39:31,000 --> 00:39:32,000
但是有可能

1454
00:39:32,000 --> 00:39:34,000
在传送过程中

1455
00:39:34,000 --> 00:39:35,000
2345 都正常过来了

1456
00:39:35,000 --> 00:39:37,000
但是一可能被 drop 掉

1457
00:39:37,000 --> 00:39:38,000
就是在传送过程中

1458
00:39:38,000 --> 00:39:40,000
被丢掉或者损坏了

1459
00:39:40,000 --> 00:39:40,000
这叫重发

1460
00:39:40,000 --> 00:39:41,000
重发的话

1461
00:39:41,000 --> 00:39:42,000
你得等

1462
00:39:42,000 --> 00:39:44,000
有这个 ACK

1463
00:39:44,000 --> 00:39:45,000
就是

1464
00:39:45,000 --> 00:39:46,000
这个叫什么

1465
00:39:46,000 --> 00:39:47,000
acknowledgement

1466
00:39:47,000 --> 00:39:49,000
这个中文叫什么

1467
00:39:49,000 --> 00:39:51,000
确认接受

1468
00:39:51,000 --> 00:39:51,000
对

1469
00:39:51,000 --> 00:39:52,000
确认接受这个机制

1470
00:39:52,000 --> 00:39:53,000
就会导致说

1471
00:39:53,000 --> 00:39:54,000
你得等

1472
00:39:54,000 --> 00:39:56,000
比较久的时间

1473
00:39:56,000 --> 00:39:56,000
才能够

1474
00:39:56,000 --> 00:39:58,000
发送方法

1475
00:39:58,000 --> 00:39:58,000
才知道

1476
00:39:58,000 --> 00:40:00,000
A 1 那个包

1477
00:40:00,000 --> 00:40:02,000
已经被 drop 掉了

1478
00:40:02,000 --> 00:40:03,000
对方没有收到

1479
00:40:03,000 --> 00:40:04,000
我还得再重发

1480
00:40:04,000 --> 00:40:06,000
但这个相对延迟的

1481
00:40:06,000 --> 00:40:07,000
在你带的过程中

1482
00:40:07,000 --> 00:40:09,000
对方那边

1483
00:40:09,000 --> 00:40:12,000
即便他的 TCP 协议内层

1484
00:40:12,000 --> 00:40:13,000
已经拿到了 2345

1485
00:40:13,000 --> 00:40:14,000
这么多个包

1486
00:40:14,000 --> 00:40:15,000
因为他没有 1

1487
00:40:15,000 --> 00:40:17,000
他没有办法向上层应用

1488
00:40:17,000 --> 00:40:18,000
提供说

1489
00:40:18,000 --> 00:40:21,000
这个数据其实 80%已经有了

1490
00:40:21,000 --> 00:40:24,000
但最开始的 20%是还没收到

1491
00:40:24,000 --> 00:40:25,000
你就等着

1492
00:40:25,000 --> 00:40:27,000
反正我现在什么也不给你

1493
00:40:27,000 --> 00:40:28,000
你就只能等着

1494
00:40:28,000 --> 00:40:29,000
你只能等着

1495
00:40:29,000 --> 00:40:29,000
这个就是说

1496
00:40:29,000 --> 00:40:30,000
这是一种所谓的

1497
00:40:30,000 --> 00:40:32,000
head of line blocking

1498
00:40:32,000 --> 00:40:33,000
就是说头部阻塞

1499
00:40:33,000 --> 00:40:35,000
不知道这种翻译合不合适

1500
00:40:35,000 --> 00:40:37,000
就是因为一个火车头的

1501
00:40:37,000 --> 00:40:38,000
前面那节

1502
00:40:38,000 --> 00:40:40,000
没有到

1503
00:40:40,000 --> 00:40:42,000
导致后面的虽然到了

1504
00:40:42,000 --> 00:40:43,000
但是也没法交货给你

1505
00:40:43,000 --> 00:40:44,000
但其实这个是很蠢的

1506
00:40:44,000 --> 00:40:45,000
我们知道

1507
00:40:45,000 --> 00:40:47,000
对于很多这种实际应用来讲

1508
00:40:47,000 --> 00:40:48,000
他并不是特别在意

1509
00:40:48,000 --> 00:40:51,000
说一定要按某一个既定的顺序

1510
00:40:51,000 --> 00:40:52,000
投递给你的信息

1511
00:40:52,000 --> 00:40:53,000
对吧

1512
00:40:53,000 --> 00:40:53,000
最简单一个

1513
00:40:53,000 --> 00:40:53,000
我们说

1514
00:40:53,000 --> 00:40:55,000
打开一个网页

1515
00:40:55,000 --> 00:40:56,000
对吧

1516
00:40:56,000 --> 00:40:56,000
传道来说

1517
00:40:56,000 --> 00:40:58,000
我们得等每一个

1518
00:40:58,000 --> 00:40:59,000
HTML 代码

1519
00:40:59,000 --> 00:41:01,000
一个字符的传过来

1520
00:41:01,000 --> 00:41:02,000
我们才可以组行显示

1521
00:41:02,000 --> 00:41:03,000
这其实并不是的

1522
00:41:03,000 --> 00:41:04,000
现在浏览器是很聪明的

1523
00:41:04,000 --> 00:41:05,000
它可以解析片段

1524
00:41:05,000 --> 00:41:06,000
对吧

1525
00:41:06,000 --> 00:41:07,000
可以说

1526
00:41:07,000 --> 00:41:09,000
我们先说到后面的

1527
00:41:09,000 --> 00:41:11,000
看看那里有一个 JS

1528
00:41:11,000 --> 00:41:12,000
前面那里有一个

1529
00:41:12,000 --> 00:41:14,000
其他什么东西

1530
00:41:14,000 --> 00:41:15,000
也是可以阻塞

1531
00:41:15,000 --> 00:41:16,000
可能这个例子还不是很好

1532
00:41:16,000 --> 00:41:17,000
可能浏览器解析

1533
00:41:17,000 --> 00:41:19,000
还是有一些顺序依赖的

1534
00:41:19,000 --> 00:41:20,000
我们再举一些相对来说

1535
00:41:20,000 --> 00:41:21,000
比较

1536
00:41:21,000 --> 00:41:24,000
更容易讲的业力的

1537
00:41:24,000 --> 00:41:25,000
就是可能图片

1538
00:41:25,000 --> 00:41:25,000
对吧

1539
00:41:25,000 --> 00:41:27,000
你知道像 JPG 这图片

1540
00:41:27,000 --> 00:41:29,000
我们其实可以分块加载的

1541
00:41:29,000 --> 00:41:30,000
就是假如说我们把这个

1542
00:41:30,000 --> 00:41:31,000
或者视频流

1543
00:41:31,000 --> 00:41:32,000
最简单的视频流

1544
00:41:32,000 --> 00:41:34,000
你真的看到并不重要

1545
00:41:34,000 --> 00:41:35,000
没错

1546
00:41:35,000 --> 00:41:37,000
你甚至可以说

1547
00:41:37,000 --> 00:41:39,000
我先搜到后面的在 buffer

1548
00:41:39,000 --> 00:41:40,000
所以先把

1549
00:41:40,000 --> 00:41:41,000
先搜到我就存起来

1550
00:41:41,000 --> 00:41:42,000
然后待会再放

1551
00:41:42,000 --> 00:41:43,000
对不对

1552
00:41:43,000 --> 00:41:45,000
其实会有这么一些问题的

1553
00:41:45,000 --> 00:41:45,000
但是因为

1554
00:41:45,000 --> 00:41:47,000
由于我们现在

1555
00:41:47,000 --> 00:41:48,000
整个网络技术设施

1556
00:41:48,000 --> 00:41:51,000
还是严重以 TCP 为主

1557
00:41:51,000 --> 00:41:52,000
就起码从应用层面的

1558
00:41:52,000 --> 00:41:53,000
角度来看

1559
00:41:53,000 --> 00:41:56,000
其实体验是并不好的

1560
00:41:56,000 --> 00:41:56,000
当然这也会是

1561
00:41:56,000 --> 00:41:58,000
刚才你提到像一些应用

1562
00:41:58,000 --> 00:42:00,000
就说像 Google 新出

1563
00:42:00,000 --> 00:42:01,000
Quick 这种协议

1564
00:42:01,000 --> 00:42:02,000
它就是为了解决这个问题

1565
00:42:02,000 --> 00:42:02,000
就是说

1566
00:42:02,000 --> 00:42:04,000
我们知道

1567
00:42:04,000 --> 00:42:06,000
在给定正应用情况下

1568
00:42:06,000 --> 00:42:08,000
我们如果不保证

1569
00:42:08,000 --> 00:42:08,000
严格保证

1570
00:42:08,000 --> 00:42:10,000
这个顺序投递

1571
00:42:10,000 --> 00:42:12,000
我们其实可以

1572
00:42:12,000 --> 00:42:13,000
获得更好的传输的

1573
00:42:13,000 --> 00:42:15,000
一个是传输带宽也好

1574
00:42:15,000 --> 00:42:16,000
因为它有 TCP

1575
00:42:16,000 --> 00:42:17,000
还有一些其他的

1576
00:42:17,000 --> 00:42:19,000
留空的方法去解决

1577
00:42:19,000 --> 00:42:20,000
如果遇到丢包

1578
00:42:20,000 --> 00:42:21,000
它会把传输带宽降低

1579
00:42:21,000 --> 00:42:22,000
对吧

1580
00:42:22,000 --> 00:42:22,000
然后在你开始

1581
00:42:22,000 --> 00:42:24,000
不恢复这样子一个过程

1582
00:42:24,000 --> 00:42:25,000
但是其实如果

1583
00:42:25,000 --> 00:42:27,000
我们现在面对

1584
00:42:27,000 --> 00:42:28,000
现在的一些网络状况

1585
00:42:28,000 --> 00:42:29,000
特别是像移动

1586
00:42:29,000 --> 00:42:30,000
手机网络

1587
00:42:30,000 --> 00:42:33,000
它是一个高度延迟不稳定的

1588
00:42:33,000 --> 00:42:34,000
这种情况

1589
00:42:34,000 --> 00:42:37,000
其实是对 TCP 这种协议来说

1590
00:42:37,000 --> 00:42:37,000
是不太适合

1591
00:42:37,000 --> 00:42:38,000
在这种网络情况下用

1592
00:42:38,000 --> 00:42:39,000
但是我们没有办法

1593
00:42:39,000 --> 00:42:40,000
就是说一个

1594
00:42:40,000 --> 00:42:41,000
有个历史依赖的

1595
00:42:41,000 --> 00:42:43,000
路径依赖的问题

1596
00:42:43,000 --> 00:42:44,000
现在已经有了

1597
00:42:44,000 --> 00:42:44,000
你没有办法接着用

1598
00:42:44,000 --> 00:42:45,000
但是我们就说

1599
00:42:45,000 --> 00:42:47,000
现在我们一直认识到

1600
00:42:47,000 --> 00:42:47,000
有这么一些问题

1601
00:42:47,000 --> 00:42:49,000
我们就说

1602
00:42:49,000 --> 00:42:51,000
从协议层来讲

1603
00:42:51,000 --> 00:42:53,000
我们以一个更加简单

1604
00:42:53,000 --> 00:42:54,000
没有那么多包袱

1605
00:42:54,000 --> 00:42:55,000
没有那么多保证的

1606
00:42:55,000 --> 00:42:57,000
UDP 协议的技术上

1607
00:42:57,000 --> 00:42:59,000
在构建出这么一个

1608
00:42:59,000 --> 00:43:01,000
就是应用成独立的协议

1609
00:43:01,000 --> 00:43:02,000
然后来满足

1610
00:43:02,000 --> 00:43:04,000
就提供更低的延迟

1611
00:43:04,000 --> 00:43:05,000
更好的带宽

1612
00:43:05,000 --> 00:43:05,000
这么一些

1613
00:43:05,000 --> 00:43:07,000
最终得到的用户是更好的体验

1614
00:43:07,000 --> 00:43:09,000
对

1615
00:43:09,000 --> 00:43:12,000
当然从 TCP 的角度来看

1616
00:43:12,000 --> 00:43:14,000
也不是没有过

1617
00:43:14,000 --> 00:43:16,000
就是试图改善 TCP 的

1618
00:43:16,000 --> 00:43:18,000
这种延迟的尝试

1619
00:43:18,000 --> 00:43:20,000
比如说曾经有过一个叫

1620
00:43:20,000 --> 00:43:23,000
TCP Vegas 的项目

1621
00:43:23,000 --> 00:43:25,000
我相信甚至至

1622
00:43:25,000 --> 00:43:28,000
这条 FreeBSD 的内核里面

1623
00:43:28,000 --> 00:43:31,000
也已经把它编译进去

1624
00:43:31,000 --> 00:43:33,000
就是现在 BSD 应该已经支持

1625
00:43:33,000 --> 00:43:35,000
所谓的 TCP Vegas

1626
00:43:35,000 --> 00:43:36,000
这样一种

1627
00:43:36,000 --> 00:43:40,000
叫做 Congestion Avoidance Algorithm

1628
00:43:40,000 --> 00:43:41,000
的改善版本

1629
00:43:41,000 --> 00:43:43,000
就是使用这种 TCP 的

1630
00:43:43,000 --> 00:43:44,000
怎么说方言

1631
00:43:44,000 --> 00:43:46,000
你可以获得更好的

1632
00:43:46,000 --> 00:43:48,000
更低的延迟

1633
00:43:48,000 --> 00:43:51,000
因为它试图从算法层面上

1634
00:43:51,000 --> 00:43:54,000
去减少 TCP 所可能产生的

1635
00:43:54,000 --> 00:43:54,000
网络阻塞

1636
00:43:54,000 --> 00:43:59,000
但是出于历史原因

1637
00:43:59,000 --> 00:44:00,000
就是 Worth is Better

1638
00:44:00,000 --> 00:44:02,000
普通 TCP 的大部分时候

1639
00:44:02,000 --> 00:44:04,000
是足够用的

1640
00:44:04,000 --> 00:44:07,000
所以 TCP Vegas 的项目

1641
00:44:07,000 --> 00:44:09,000
一直没有普及开来

1642
00:44:09,000 --> 00:44:09,000
至少我相信 Windows

1643
00:44:09,000 --> 00:44:10,000
应该是不支持的

1644
00:44:10,000 --> 00:44:11,000
所以

1645
00:44:11,000 --> 00:44:15,000
但 UDP 是到处都在

1646
00:44:15,000 --> 00:44:16,000
所以基于 UDP 来开发

1647
00:44:16,000 --> 00:44:18,000
这种所谓的 NoTCP 的

1648
00:44:18,000 --> 00:44:19,000
专门的传送协议

1649
00:44:19,000 --> 00:44:22,000
应该将来会

1650
00:44:22,000 --> 00:44:25,000
比较成为某种潮流趋势了

1651
00:44:25,000 --> 00:44:26,000
当然并不意味着

1652
00:44:26,000 --> 00:44:28,000
我们要抛弃 TCP

1653
00:44:28,000 --> 00:44:29,000
就好像 NoSQL 并不是

1654
00:44:29,000 --> 00:44:31,000
真的 NoSQL

1655
00:44:31,000 --> 00:44:34,000
NoTCP 也是 Not Only TCP

1656
00:44:34,000 --> 00:44:36,000
没错

1657
00:44:36,000 --> 00:44:38,000
但是这里面

1658
00:44:38,000 --> 00:44:39,000
其实我觉得问题

1659
00:44:39,000 --> 00:44:40,000
还是蛮多的

1660
00:44:40,000 --> 00:44:41,000
首先一个就是说

1661
00:44:41,000 --> 00:44:43,000
如果所有的应用层

1662
00:44:43,000 --> 00:44:44,000
都自己去基于 UDP 来

1663
00:44:44,000 --> 00:44:46,000
就因为 UDP 不保证这些东西

1664
00:44:46,000 --> 00:44:49,000
所以它的可能延迟和带宽

1665
00:44:49,000 --> 00:44:51,000
就会好一些

1666
00:44:51,000 --> 00:44:53,000
但其实还是有很多问题

1667
00:44:53,000 --> 00:44:54,000
因为网络并不

1668
00:44:54,000 --> 00:44:56,000
如我们想象的那么简单

1669
00:44:56,000 --> 00:44:57,000
可以随便提几个

1670
00:44:57,000 --> 00:44:58,000
比较常见的问题

1671
00:44:58,000 --> 00:45:00,000
第一个是说

1672
00:45:00,000 --> 00:45:01,000
从成本上来讲

1673
00:45:01,000 --> 00:45:03,000
所有的应用都要自己

1674
00:45:03,000 --> 00:45:04,000
重新发明一遍轮子

1675
00:45:04,000 --> 00:45:04,000
对吧

1676
00:45:04,000 --> 00:45:05,000
本来有说系统可以解决

1677
00:45:05,000 --> 00:45:08,000
TCP 提供顺序保证

1678
00:45:08,000 --> 00:45:09,000
那你写应用的时候

1679
00:45:09,000 --> 00:45:10,000
你就有一个假设可以做

1680
00:45:10,000 --> 00:45:11,000
其实可以解放很多事情

1681
00:45:11,000 --> 00:45:12,000
但现在就是说

1682
00:45:12,000 --> 00:45:14,000
你没有这一层

1683
00:45:14,000 --> 00:45:14,000
你要自己去

1684
00:45:14,000 --> 00:45:15,000
要么你自己去

1685
00:45:15,000 --> 00:45:17,000
所以自己发明轮子

1686
00:45:17,000 --> 00:45:18,000
自己再搞一遍

1687
00:45:18,000 --> 00:45:20,000
类似这种亏格的协议

1688
00:45:20,000 --> 00:45:21,000
或者你就直接用

1689
00:45:21,000 --> 00:45:22,000
现成的亏格协议

1690
00:45:22,000 --> 00:45:23,000
但是就即便是

1691
00:45:23,000 --> 00:45:24,000
你用现成的这种亏格协议

1692
00:45:24,000 --> 00:45:25,000
它还是有一个问题

1693
00:45:25,000 --> 00:45:27,000
就是它是一个应用层的东西

1694
00:45:27,000 --> 00:45:28,000
应用层的东西

1695
00:45:28,000 --> 00:45:29,000
有什么不好呢

1696
00:45:29,000 --> 00:45:30,000
就是应用层的东西

1697
00:45:30,000 --> 00:45:31,000
它互相

1698
00:45:31,000 --> 00:45:32,000
应用互相之间

1699
00:45:32,000 --> 00:45:34,000
是没有办法直接

1700
00:45:34,000 --> 00:45:34,000
沟通协调的

1701
00:45:34,000 --> 00:45:36,000
因为处于这个权限的问题

1702
00:45:36,000 --> 00:45:37,000
和这个安全的原因

1703
00:45:37,000 --> 00:45:37,000
对

1704
00:45:37,000 --> 00:45:39,000
所以就会造成说

1705
00:45:39,000 --> 00:45:41,000
同一个系统上面的

1706
00:45:41,000 --> 00:45:45,000
跑着多个基于 UDP 协议的

1707
00:45:45,000 --> 00:45:46,000
应用会互相打架

1708
00:45:46,000 --> 00:45:48,000
一个常见的例子就是说

1709
00:45:48,000 --> 00:45:49,000
可能单机上

1710
00:45:49,000 --> 00:45:50,000
还不是很明显

1711
00:45:50,000 --> 00:45:50,000
因为都毕竟是

1712
00:45:50,000 --> 00:45:52,000
你一个人用

1713
00:45:52,000 --> 00:45:54,000
但是你像如果你几个人

1714
00:45:54,000 --> 00:45:55,000
在共用一个路由器

1715
00:45:55,000 --> 00:45:57,000
比如说你在上网打游戏

1716
00:45:57,000 --> 00:45:59,000
那边你的室友在 BT

1717
00:45:59,000 --> 00:46:02,000
然后你就比较痛苦了

1718
00:46:02,000 --> 00:46:04,000
你没有办法

1719
00:46:04,000 --> 00:46:05,000
你没办法去控制

1720
00:46:05,000 --> 00:46:06,000
它的电脑

1721
00:46:06,000 --> 00:46:06,000
去做一些事情

1722
00:46:06,000 --> 00:46:07,000
你唯一能做到

1723
00:46:07,000 --> 00:46:08,000
就是在路由器上

1724
00:46:08,000 --> 00:46:10,000
去做一些流控

1725
00:46:10,000 --> 00:46:11,000
什么 quality of service

1726
00:46:11,000 --> 00:46:13,000
就是服务质量的一些控制

1727
00:46:13,000 --> 00:46:15,000
但是你是并没有直接

1728
00:46:15,000 --> 00:46:16,000
控制它的电脑的

1729
00:46:16,000 --> 00:46:18,000
这个情况就可以类比为

1730
00:46:18,000 --> 00:46:18,000
如果大家都

1731
00:46:18,000 --> 00:46:20,000
你在同一台机上的时候

1732
00:46:20,000 --> 00:46:21,000
就大部分应用

1733
00:46:21,000 --> 00:46:23,000
都自己搞这么一套 UDP 的话

1734
00:46:23,000 --> 00:46:25,000
就大家可

1735
00:46:25,000 --> 00:46:26,000
其实可能会互相抢占资源的

1736
00:46:26,000 --> 00:46:28,000
对

1737
00:46:28,000 --> 00:46:31,000
这好像你和你的邻居们

1738
00:46:31,000 --> 00:46:32,000
只有那么一个油桶

1739
00:46:32,000 --> 00:46:33,000
然后你每天要寄很多

1740
00:46:33,000 --> 00:46:34,000
很多信息

1741
00:46:34,000 --> 00:46:34,000
有很多塞马

1742
00:46:34,000 --> 00:46:37,000
你把信息塞不进去了

1743
00:46:37,000 --> 00:46:37,000
对

1744
00:46:37,000 --> 00:46:40,000
我之前想起知乎上

1745
00:46:40,000 --> 00:46:41,000
有一个人说

1746
00:46:41,000 --> 00:46:43,000
他嫌宿舍里面

1747
00:46:43,000 --> 00:46:45,000
其他人打游戏太吵

1748
00:46:45,000 --> 00:46:47,000
然后他把一个网线

1749
00:46:47,000 --> 00:46:50,000
插在墙上的网线接口

1750
00:46:50,000 --> 00:46:51,000
就是他自己的那个位置上

1751
00:46:51,000 --> 00:46:53,000
没有接电脑

1752
00:46:53,000 --> 00:46:54,000
没有接网线

1753
00:46:54,000 --> 00:46:57,000
然后他把网线连到床上

1754
00:46:57,000 --> 00:46:59,000
然后在床上

1755
00:46:59,000 --> 00:47:00,000
把网线的两端

1756
00:47:00,000 --> 00:47:03,000
绑在一起

1757
00:47:03,000 --> 00:47:06,000
这样他主要用大木脚趾

1758
00:47:06,000 --> 00:47:07,000
去踩一下

1759
00:47:07,000 --> 00:47:10,000
整个宿舍就断网了

1760
00:47:10,000 --> 00:47:11,000
Effectively

1761
00:47:11,000 --> 00:47:14,000
让所有人都玩不了网游

1762
00:47:14,000 --> 00:47:15,000
让他可以时常安心的睡觉

1763
00:47:15,000 --> 00:47:17,000
太机智了

1764
00:47:17,000 --> 00:47:17,000
这哥们

1765
00:47:17,000 --> 00:47:19,000
竟然还活下来

1766
00:47:19,000 --> 00:47:20,000
没有被室友砍死

1767
00:47:20,000 --> 00:47:21,000
也是不容易

1768
00:47:21,000 --> 00:47:22,000
没有被发现

1769
00:47:22,000 --> 00:47:25,000
室友太蠢

1770
00:47:25,000 --> 00:47:27,000
好吧

1771
00:47:27,000 --> 00:47:29,000
如果遇到像我这种

1772
00:47:29,000 --> 00:47:30,000
吹毛求疵

1773
00:47:30,000 --> 00:47:31,000
因为去追根到底

1774
00:47:31,000 --> 00:47:32,000
到底是哪个线

1775
00:47:32,000 --> 00:47:32,000
那里出了问题

1776
00:47:32,000 --> 00:47:34,000
就会发现是他干的

1777
00:47:34,000 --> 00:47:37,000
这是知识改变命运的

1778
00:47:37,000 --> 00:47:38,000
活生生的例子

1779
00:47:38,000 --> 00:47:39,000
只有你懂这些

1780
00:47:39,000 --> 00:47:41,000
你就可以去玩弄别人

1781
00:47:41,000 --> 00:47:41,000
所以什么

1782
00:47:41,000 --> 00:47:43,000
knowledge is power

1783
00:47:43,000 --> 00:47:44,000
知识就是权力

1784
00:47:44,000 --> 00:47:47,000
刚才这个核心

1785
00:47:47,000 --> 00:47:48,000
问题点就是说

1786
00:47:48,000 --> 00:47:51,000
CCP 并不是一个

1787
00:47:51,000 --> 00:47:52,000
完全不好的东西

1788
00:47:52,000 --> 00:47:53,000
它提供有一些

1789
00:47:53,000 --> 00:47:54,000
很基本的保证

1790
00:47:54,000 --> 00:47:55,000
就是说大家

1791
00:47:55,000 --> 00:47:56,000
资源分配

1792
00:47:56,000 --> 00:47:58,000
是由系统策集来说的

1793
00:47:58,000 --> 00:47:59,000
然后系统不会说

1794
00:47:59,000 --> 00:48:01,000
特别偏向某一些

1795
00:48:01,000 --> 00:48:03,000
软件而放弃

1796
00:48:03,000 --> 00:48:04,000
另外一些软件

1797
00:48:04,000 --> 00:48:05,000
这样就是会均衡一点

1798
00:48:05,000 --> 00:48:07,000
特别是在中国

1799
00:48:07,000 --> 00:48:08,000
这种大环境下

1800
00:48:08,000 --> 00:48:09,000
谁搞指不定

1801
00:48:09,000 --> 00:48:11,000
哪个流氓软件

1802
00:48:11,000 --> 00:48:11,000
都给你装上

1803
00:48:11,000 --> 00:48:12,000
这种东西之后

1804
00:48:12,000 --> 00:48:13,000
你就很哭哈哈了

1805
00:48:13,000 --> 00:48:15,000
但是

1806
00:48:15,000 --> 00:48:15,000
对

1807
00:48:15,000 --> 00:48:17,000
其实说白了

1808
00:48:17,000 --> 00:48:18,000
最终说到底

1809
00:48:18,000 --> 00:48:19,000
还是一个权力的

1810
00:48:19,000 --> 00:48:20,000
谁说了算的问题

1811
00:48:20,000 --> 00:48:22,000
就是你相信你的系统

1812
00:48:22,000 --> 00:48:24,000
是一个更加公平

1813
00:48:24,000 --> 00:48:25,000
公开

1814
00:48:25,000 --> 00:48:28,000
公正的一个参与者

1815
00:48:28,000 --> 00:48:29,000
还是说

1816
00:48:29,000 --> 00:48:29,000
你说我觉得

1817
00:48:29,000 --> 00:48:32,000
你为了追求某一个用户

1818
00:48:32,000 --> 00:48:33,000
某一个应用的体验

1819
00:48:33,000 --> 00:48:34,000
这个快

1820
00:48:34,000 --> 00:48:34,000
好

1821
00:48:34,000 --> 00:48:36,000
这个响应低

1822
00:48:36,000 --> 00:48:37,000
愿意放弃

1823
00:48:37,000 --> 00:48:38,000
其他一些

1824
00:48:38,000 --> 00:48:40,000
这个应用的

1825
00:48:40,000 --> 00:48:42,000
这个响应速度

1826
00:48:42,000 --> 00:48:42,000
还是怎么样

1827
00:48:42,000 --> 00:48:43,000
就这里面其实是

1828
00:48:43,000 --> 00:48:44,000
我觉得还有很多

1829
00:48:44,000 --> 00:48:45,000
是要权衡的

1830
00:48:45,000 --> 00:48:47,000
并不是一个看起来

1831
00:48:47,000 --> 00:48:48,000
那么简单的

1832
00:48:48,000 --> 00:48:50,000
纯技术的一个讨论

1833
00:48:50,000 --> 00:48:51,000
嗯

1834
00:48:51,000 --> 00:48:52,000
没错

1835
00:48:52,000 --> 00:48:54,000
OK

1836
00:48:54,000 --> 00:48:57,000
接下来一条新闻是

1837
00:48:57,000 --> 00:49:00,000
我非常喜欢乐权的

1838
00:49:00,000 --> 00:49:01,000
就是

1839
00:49:01,000 --> 00:49:02,000
Google

1840
00:49:02,000 --> 00:49:04,000
在研发

1841
00:49:04,000 --> 00:49:05,000
Dart Language

1842
00:49:05,000 --> 00:49:07,000
用于开发

1843
00:49:07,000 --> 00:49:08,000
Android App

1844
00:49:08,000 --> 00:49:09,000
耶

1845
00:49:09,000 --> 00:49:12,000
为什么不是 Go

1846
00:49:12,000 --> 00:49:13,000
为什么不是 Go

1847
00:49:13,000 --> 00:49:14,000
我抗议

1848
00:49:14,000 --> 00:49:18,000
应该还是权衡利弊的结果吧

1849
00:49:18,000 --> 00:49:18,000
我觉得 Go

1850
00:49:18,000 --> 00:49:20,000
可能目前看来

1851
00:49:20,000 --> 00:49:21,000
还是不太适合开发

1852
00:49:21,000 --> 00:49:24,000
需要写很多界面的东西

1853
00:49:24,000 --> 00:49:25,000
我也不知道

1854
00:49:25,000 --> 00:49:25,000
就

1855
00:49:25,000 --> 00:49:27,000
就还是语法

1856
00:49:27,000 --> 00:49:27,000
感觉还是非常

1857
00:49:27,000 --> 00:49:28,000
太弱小了

1858
00:49:28,000 --> 00:49:31,000
它不是弱小

1859
00:49:31,000 --> 00:49:32,000
就是 Go 太

1860
00:49:32,000 --> 00:49:34,000
太金刚钻了

1861
00:49:34,000 --> 00:49:34,000
它

1862
00:49:34,000 --> 00:49:36,000
它比较

1863
00:49:36,000 --> 00:49:37,000
金干

1864
00:49:37,000 --> 00:49:38,000
它

1865
00:49:38,000 --> 00:49:39,000
太小

1866
00:49:39,000 --> 00:49:39,000
嗯

1867
00:49:39,000 --> 00:49:41,000
不过这里可能要先解释一下

1868
00:49:41,000 --> 00:49:43,000
Dart 是一个什么

1869
00:49:43,000 --> 00:49:44,000
类型的样子的语言

1870
00:49:44,000 --> 00:49:47,000
需要解释吗

1871
00:49:47,000 --> 00:49:48,000
解释一下

1872
00:49:48,000 --> 00:49:50,000
我觉得并不是所有人都去关注这一块

1873
00:49:50,000 --> 00:49:52,000
不知道就

1874
00:49:52,000 --> 00:49:55,000
Anyway

1875
00:49:55,000 --> 00:49:55,000
好

1876
00:49:55,000 --> 00:49:57,000
Dart 其实是

1877
00:49:57,000 --> 00:49:58,000
就是 Chrome 的 V 8

1878
00:49:58,000 --> 00:49:59,000
Team

1879
00:49:59,000 --> 00:50:01,000
开发出来的一种语言

1880
00:50:01,000 --> 00:50:02,000
嗯

1881
00:50:02,000 --> 00:50:02,000
嗯

1882
00:50:02,000 --> 00:50:06,000
他们开发 Dart 的主要原因

1883
00:50:06,000 --> 00:50:08,000
也就是因为 JavaScript 和 Java 一样

1884
00:50:08,000 --> 00:50:09,000
就比较老

1885
00:50:09,000 --> 00:50:11,000
JavaScript 也是 95 年

1886
00:50:11,000 --> 00:50:13,000
二十年一晃二十年了

1887
00:50:13,000 --> 00:50:15,000
二十年这么老的一个 JavaScript 的语言

1888
00:50:15,000 --> 00:50:16,000
他们

1889
00:50:16,000 --> 00:50:18,000
也希望

1890
00:50:18,000 --> 00:50:21,000
就好像微软的像微软的那个 TypeScript 一样

1891
00:50:21,000 --> 00:50:23,000
也希望开发出一种东西来取它

1892
00:50:23,000 --> 00:50:24,000
取而代之

1893
00:50:24,000 --> 00:50:27,000
然后 Dart 就是这样一种

1894
00:50:27,000 --> 00:50:28,000
嗯

1895
00:50:28,000 --> 00:50:33,000
Google 希望它能够成为下一代浏览器语言的语言

1896
00:50:33,000 --> 00:50:35,000
然后 Dart 现在有两种执行方式

1897
00:50:35,000 --> 00:50:38,000
一种是直接编译成它自己的虚拟机的

1898
00:50:38,000 --> 00:50:39,000
嗯

1899
00:50:39,000 --> 00:50:40,000
IAL

1900
00:50:40,000 --> 00:50:41,000
嗯

1901
00:50:41,000 --> 00:50:43,000
另外一种方式是把 Dart

1902
00:50:43,000 --> 00:50:44,000
编译为 JavaScript

1903
00:50:44,000 --> 00:50:46,000
我记得当时是

1904
00:50:46,000 --> 00:50:48,000
当时有过一个 meme

1905
00:50:48,000 --> 00:50:48,000
就是

1906
00:50:48,000 --> 00:50:51,000
Dart 写了一行 Hello World

1907
00:50:51,000 --> 00:50:54,000
然后编译出来 JavaScript 好像有 8 K

1908
00:50:54,000 --> 00:50:56,000
对

1909
00:50:56,000 --> 00:50:57,000
有什么

1910
00:50:57,000 --> 00:50:58,000
有那个 overhead

1911
00:50:58,000 --> 00:50:59,000
对

1912
00:50:59,000 --> 00:51:01,000
有一个非常比较严重的 overhead

1913
00:51:01,000 --> 00:51:04,000
就是如果你把它编译成 JavaScript 的话

1914
00:51:04,000 --> 00:51:05,000
它会变得非常用重

1915
00:51:05,000 --> 00:51:08,000
但是相信目前状况已经有大

1916
00:51:08,000 --> 00:51:10,000
有比较大的改善了

1917
00:51:10,000 --> 00:51:10,000
嗯

1918
00:51:10,000 --> 00:51:12,000
然后 Dart 这种语言呢

1919
00:51:12,000 --> 00:51:13,000
嗯

1920
00:51:13,000 --> 00:51:18,000
接下来即将被推广到 Android 应用开发上面

1921
00:51:18,000 --> 00:51:19,000
也就是

1922
00:51:19,000 --> 00:51:20,000
嗯

1923
00:51:20,000 --> 00:51:22,000
之前我们不是提到过 Android 的 app 可以

1924
00:51:22,000 --> 00:51:26,000
直接用 C++来写那种比较

1925
00:51:26,000 --> 00:51:30,000
Performance Critical 的 app

1926
00:51:30,000 --> 00:51:31,000
比如说尤其是游戏

1927
00:51:31,000 --> 00:51:31,000
嗯

1928
00:51:31,000 --> 00:51:33,000
然后现在呢

1929
00:51:33,000 --> 00:51:34,000
Google 决定说

1930
00:51:34,000 --> 00:51:34,000
好

1931
00:51:34,000 --> 00:51:35,000
你不写游戏的话

1932
00:51:35,000 --> 00:51:37,000
也可以采用 Java 之外的语言

1933
00:51:37,000 --> 00:51:38,000
就是 Dart

1934
00:51:38,000 --> 00:51:40,000
而且这个 Dart 最大的

1935
00:51:40,000 --> 00:51:43,000
一个优势就是

1936
00:51:43,000 --> 00:51:45,000
或者他们的理念

1937
00:51:45,000 --> 00:51:46,000
他们的理想目标就是

1938
00:51:46,000 --> 00:51:48,000
希望能够用 Dart 写出来的 app

1939
00:51:48,000 --> 00:51:49,000
都跑得非常非常快

1940
00:51:49,000 --> 00:51:53,000
他们有个指标是 120 fps

1941
00:51:53,000 --> 00:51:56,000
就是你跑得非常普通的

1942
00:51:56,000 --> 00:51:57,000
60 fps 已经不足以满足了

1943
00:51:57,000 --> 00:51:58,000
是吧

1944
00:51:58,000 --> 00:51:59,000
没错

1945
00:51:59,000 --> 00:52:01,000
就我们之前提到那个

1946
00:52:01,000 --> 00:52:01,000
哎

1947
00:52:01,000 --> 00:52:02,000
不是我们之前

1948
00:52:02,000 --> 00:52:04,000
是你们之前提到的那个 flipboard

1949
00:52:04,000 --> 00:52:07,000
在 Covance 上实现的 app

1950
00:52:07,000 --> 00:52:08,000
好像也只有 60 fps

1951
00:52:08,000 --> 00:52:09,000
对对

1952
00:52:09,000 --> 00:52:11,000
因为你更快没有用

1953
00:52:11,000 --> 00:52:12,000
我们的显示器只有刷 60 次

1954
00:52:12,000 --> 00:52:14,000
明明

1955
00:52:14,000 --> 00:52:14,000
对

1956
00:52:14,000 --> 00:52:15,000
然后他们说

1957
00:52:15,000 --> 00:52:15,000
好

1958
00:52:15,000 --> 00:52:18,000
我们用 Dart 来写 120 fps 的 app

1959
00:52:18,000 --> 00:52:19,000
嗯

1960
00:52:19,000 --> 00:52:22,000
不过先浇个冷水啊

1961
00:52:22,000 --> 00:52:23,000
Dart 本来之前说是

1962
00:52:23,000 --> 00:52:24,000
刚才也讲了

1963
00:52:24,000 --> 00:52:24,000
是本来是说

1964
00:52:24,000 --> 00:52:26,000
做进这个 Chrome

1965
00:52:26,000 --> 00:52:26,000
就替代

1966
00:52:26,000 --> 00:52:26,000
对

1967
00:52:26,000 --> 00:52:27,000
也不叫替代

1968
00:52:27,000 --> 00:52:29,000
就是说和这个 JavaScript

1969
00:52:29,000 --> 00:52:30,000
所谓一个并

1970
00:52:30,000 --> 00:52:32,000
就是同时存在支持的

1971
00:52:32,000 --> 00:52:33,000
官方支持的语言

1972
00:52:33,000 --> 00:52:34,000
但后来好像这事儿

1973
00:52:34,000 --> 00:52:37,000
已经说不是了

1974
00:52:37,000 --> 00:52:38,000
就是说不进

1975
00:52:38,000 --> 00:52:38,000
那个 Dart 语言

1976
00:52:38,000 --> 00:52:40,000
不进这个浏览器了

1977
00:52:40,000 --> 00:52:42,000
不进 Chrome 至少

1978
00:52:42,000 --> 00:52:42,000
啊

1979
00:52:42,000 --> 00:52:44,000
这是什么时候去

1980
00:52:44,000 --> 00:52:45,000
就上个月吧

1981
00:52:45,000 --> 00:52:46,000
就最近

1982
00:52:46,000 --> 00:52:48,000
也不是就今年的

1983
00:52:48,000 --> 00:52:49,000
就最近一两个月

1984
00:52:49,000 --> 00:52:51,000
就确认说

1985
00:52:51,000 --> 00:52:52,000
呃

1986
00:52:52,000 --> 00:52:52,000
不会了

1987
00:52:52,000 --> 00:52:52,000
就是

1988
00:52:52,000 --> 00:52:54,000
就别想

1989
00:52:54,000 --> 00:52:55,000
你别想在浏览器里面

1990
00:52:55,000 --> 00:52:56,000
直接用 Dart

1991
00:52:56,000 --> 00:52:56,000
对

1992
00:52:56,000 --> 00:52:57,000
就这个意思

1993
00:52:57,000 --> 00:52:58,000
所以将来 JavaScript

1994
00:52:58,000 --> 00:53:01,000
还是会继续主宰浏览器吗

1995
00:53:01,000 --> 00:53:02,000
没错

1996
00:53:02,000 --> 00:53:04,000
但他们现在的方向

1997
00:53:04,000 --> 00:53:04,000
就有点

1998
00:53:04,000 --> 00:53:05,000
变了

1999
00:53:05,000 --> 00:53:06,000
就是说

2000
00:53:06,000 --> 00:53:07,000
其实想法

2001
00:53:07,000 --> 00:53:08,000
是这样子

2002
00:53:08,000 --> 00:53:08,000
就是说

2003
00:53:08,000 --> 00:53:11,000
我们不直接去取代

2004
00:53:11,000 --> 00:53:12,000
这个 JavaScript

2005
00:53:12,000 --> 00:53:13,000
但是呢

2006
00:53:13,000 --> 00:53:15,000
我们推出一个

2007
00:53:15,000 --> 00:53:16,000
就跟 Mozilla 的思路

2008
00:53:16,000 --> 00:53:17,000
有点像

2009
00:53:17,000 --> 00:53:18,000
就是他们推出一个

2010
00:53:18,000 --> 00:53:19,000
所谓精简版的

2011
00:53:19,000 --> 00:53:20,000
这个 JavaScript 的子机

2012
00:53:20,000 --> 00:53:22,000
然后呢

2013
00:53:22,000 --> 00:53:24,000
就其他的这个语言

2014
00:53:24,000 --> 00:53:24,000
你是可以就是

2015
00:53:24,000 --> 00:53:25,000
transpile

2016
00:53:25,000 --> 00:53:28,000
就是编译

2017
00:53:28,000 --> 00:53:29,000
翻译编译成

2018
00:53:29,000 --> 00:53:33,000
这个 JavaScript 的这个子机

2019
00:53:33,000 --> 00:53:34,000
然后你这个子机

2020
00:53:34,000 --> 00:53:36,000
是如何选定出来的

2021
00:53:36,000 --> 00:53:36,000
就这个子机能够

2022
00:53:36,000 --> 00:53:38,000
能够有足够的

2023
00:53:38,000 --> 00:53:40,000
这种一种 construct

2024
00:53:40,000 --> 00:53:41,000
可以构建

2025
00:53:41,000 --> 00:53:43,000
就可以支持你上面的语言的

2026
00:53:43,000 --> 00:53:44,000
那些基础的功能的

2027
00:53:44,000 --> 00:53:46,000
然后这个子机的 JavaScript

2028
00:53:46,000 --> 00:53:47,000
是可以很好的

2029
00:53:47,000 --> 00:53:49,000
被这个什么

2030
00:53:49,000 --> 00:53:49,000
just-in-time 的

2031
00:53:49,000 --> 00:53:50,000
编译器优化的

2032
00:53:50,000 --> 00:53:51,000
这么一个

2033
00:53:51,000 --> 00:53:52,000
一个字机

2034
00:53:52,000 --> 00:53:53,000
这样的话

2035
00:53:53,000 --> 00:53:53,000
等于是说

2036
00:53:53,000 --> 00:53:55,000
我们把这个 JavaScript

2037
00:53:55,000 --> 00:53:56,000
作为一个

2038
00:53:56,000 --> 00:53:57,000
怎么说呢

2039
00:53:57,000 --> 00:53:58,000
类似于 C

2040
00:53:58,000 --> 00:53:59,000
或者是类似于

2041
00:53:59,000 --> 00:54:00,000
汇编的这么一个角色

2042
00:54:00,000 --> 00:54:02,000
JavaScript is new assembly language

2043
00:54:02,000 --> 00:54:03,000
for the web

2044
00:54:03,000 --> 00:54:04,000
没错

2045
00:54:04,000 --> 00:54:05,000
对

2046
00:54:05,000 --> 00:54:06,000
前阵子的一个

2047
00:54:06,000 --> 00:54:07,000
hacker news 都要听

2048
00:54:07,000 --> 00:54:10,000
所以就其实这个

2049
00:54:10,000 --> 00:54:12,000
跟现在我们这个新闻里面

2050
00:54:12,000 --> 00:54:12,000
讲到说

2051
00:54:12,000 --> 00:54:14,000
Dart 直接用于

2052
00:54:14,000 --> 00:54:16,000
这个 Android 里面的

2053
00:54:16,000 --> 00:54:17,000
app 的编写

2054
00:54:17,000 --> 00:54:18,000
还是非常不一样

2055
00:54:18,000 --> 00:54:19,000
起码你说

2056
00:54:19,000 --> 00:54:21,000
用 Dart 的网页版件

2057
00:54:21,000 --> 00:54:22,000
能够比较畅快的方式

2058
00:54:22,000 --> 00:54:23,000
还是说

2059
00:54:23,000 --> 00:54:25,000
先转成这个 JS 再说

2060
00:54:25,000 --> 00:54:26,000
那现在这个

2061
00:54:26,000 --> 00:54:27,000
这个就万发

2062
00:54:27,000 --> 00:54:28,000
就是完全不一样的一个过程

2063
00:54:28,000 --> 00:54:29,000
OK

2064
00:54:29,000 --> 00:54:31,000
然后 Dart 和 Android

2065
00:54:31,000 --> 00:54:34,000
它的名字不是叫

2066
00:54:34,000 --> 00:54:35,000
Dart 和 Android

2067
00:54:35,000 --> 00:54:37,000
而是留意外

2068
00:54:37,000 --> 00:54:38,000
一个名字叫 Sky

2069
00:54:38,000 --> 00:54:42,000
就有点莫名其妙

2070
00:54:42,000 --> 00:54:43,000
为什么叫 Sky

2071
00:54:43,000 --> 00:54:44,000
这不光是莫名其妙

2072
00:54:44,000 --> 00:54:46,000
这个简直就是自讨苦吃

2073
00:54:46,000 --> 00:54:47,000
你知道最近

2074
00:54:47,000 --> 00:54:48,000
是前面上周吧

2075
00:54:48,000 --> 00:54:49,000
搜不到

2076
00:54:49,000 --> 00:54:49,000
对啊

2077
00:54:49,000 --> 00:54:50,000
最大的题目搜不到

2078
00:54:50,000 --> 00:54:52,000
搜不到就不说了

2079
00:54:52,000 --> 00:54:53,000
上周不是 Sky

2080
00:54:53,000 --> 00:54:54,000
被判

2081
00:54:54,000 --> 00:54:55,000
欧洲一个

2082
00:54:55,000 --> 00:54:56,000
哪个国家

2083
00:54:56,000 --> 00:54:57,000
我忘了

2084
00:54:57,000 --> 00:54:58,000
被欧洲一个法院说

2085
00:54:58,000 --> 00:54:59,000
判它商标侵权

2086
00:54:59,000 --> 00:55:01,000
Sky 电视网络

2087
00:55:01,000 --> 00:55:04,000
理由是因为

2088
00:55:04,000 --> 00:55:05,000
理由是前面

2089
00:55:05,000 --> 00:55:06,000
都有一个 Sky

2090
00:55:06,000 --> 00:55:06,000
然后大家

2091
00:55:06,000 --> 00:55:08,000
消费者可能会分不清楚

2092
00:55:08,000 --> 00:55:10,000
此 Sky 和 Sky

2093
00:55:10,000 --> 00:55:12,000
不是没有关系的

2094
00:55:12,000 --> 00:55:12,000
法国眼里

2095
00:55:12,000 --> 00:55:13,000
消费者都是傻逼

2096
00:55:13,000 --> 00:55:15,000
那是法国吗

2097
00:55:15,000 --> 00:55:16,000
Sorry

2098
00:55:16,000 --> 00:55:19,000
我不确定

2099
00:55:19,000 --> 00:55:19,000
是法国

2100
00:55:19,000 --> 00:55:20,000
但是

2101
00:55:20,000 --> 00:55:21,000
这是在你们

2102
00:55:21,000 --> 00:55:23,000
大欧洲的某一个

2103
00:55:23,000 --> 00:55:24,000
法院判决结果

2104
00:55:24,000 --> 00:55:25,000
当时大家都觉得

2105
00:55:25,000 --> 00:55:26,000
德国是老干这种事情

2106
00:55:26,000 --> 00:55:27,000
就是你知道

2107
00:55:27,000 --> 00:55:28,000
最开始 Google mail

2108
00:55:28,000 --> 00:55:29,000
Gmail 想要进德国的时候

2109
00:55:29,000 --> 00:55:30,000
德国已经有一个

2110
00:55:30,000 --> 00:55:32,000
叫什么 Gmail 之类的

2111
00:55:32,000 --> 00:55:34,000
那个我觉得可以理解

2112
00:55:34,000 --> 00:55:35,000
那个是可以注册商标的

2113
00:55:35,000 --> 00:55:37,000
你说这个 Sky 和 Sky

2114
00:55:37,000 --> 00:55:37,000
不是差的

2115
00:55:37,000 --> 00:55:39,000
这十万八千里

2116
00:55:39,000 --> 00:55:42,000
欧洲诡异多

2117
00:55:42,000 --> 00:55:42,000
这也是什么

2118
00:55:42,000 --> 00:55:43,000
见怪不怪了吧

2119
00:55:43,000 --> 00:55:43,000
我觉得

2120
00:55:43,000 --> 00:55:44,000
那个什么

2121
00:55:44,000 --> 00:55:45,000
稍后再

2122
00:55:45,000 --> 00:55:46,000
以后再吐槽

2123
00:55:46,000 --> 00:55:47,000
我们就先说回

2124
00:55:47,000 --> 00:55:48,000
这个

2125
00:55:48,000 --> 00:55:50,000
Dart 和 Android

2126
00:55:50,000 --> 00:55:51,000
Nickname Sky

2127
00:55:51,000 --> 00:55:54,000
这么一个东西

2128
00:55:54,000 --> 00:55:56,000
它其实是一个

2129
00:55:56,000 --> 00:55:58,000
它至于 Java

2130
00:55:58,000 --> 00:56:00,000
有什么特别的优势吗

2131
00:56:00,000 --> 00:56:01,000
就是用于写

2132
00:56:01,000 --> 00:56:02,000
这个 Android 应用

2133
00:56:02,000 --> 00:56:03,000
有什么特别的好处

2134
00:56:03,000 --> 00:56:04,000
难道不写 Java

2135
00:56:04,000 --> 00:56:06,000
不是最大的优势吗

2136
00:56:06,000 --> 00:56:08,000
黑得漂亮

2137
00:56:08,000 --> 00:56:10,000
但还是

2138
00:56:10,000 --> 00:56:11,000
我觉得

2139
00:56:11,000 --> 00:56:12,000
只要你不写 Java

2140
00:56:12,000 --> 00:56:13,000
基本上就可以做到

2141
00:56:13,000 --> 00:56:14,000
Write less

2142
00:56:14,000 --> 00:56:14,000
Do more

2143
00:56:14,000 --> 00:56:16,000
但是也可能会出现

2144
00:56:16,000 --> 00:56:17,000
一个比 Java 更烂的语言

2145
00:56:17,000 --> 00:56:19,000
当然概率比较小

2146
00:56:19,000 --> 00:56:20,000
但是显然不可能

2147
00:56:20,000 --> 00:56:20,000
比 Java 更烂

2148
00:56:20,000 --> 00:56:21,000
还有什么语言

2149
00:56:21,000 --> 00:56:22,000
能比 Java 更烂

2150
00:56:22,000 --> 00:56:24,000
说的也是

2151
00:56:24,000 --> 00:56:24,000
好吧

2152
00:56:24,000 --> 00:56:26,000
对

2153
00:56:26,000 --> 00:56:28,000
PHP 不扎二纲

2154
00:56:28,000 --> 00:56:29,000
这个我必须承认

2155
00:56:29,000 --> 00:56:31,000
它这个还是有一个

2156
00:56:31,000 --> 00:56:32,000
这个 adoption 的问题

2157
00:56:32,000 --> 00:56:33,000
它之前

2158
00:56:33,000 --> 00:56:35,000
就撤掉 Dart

2159
00:56:35,000 --> 00:56:36,000
原生在

2160
00:56:36,000 --> 00:56:37,000
Chrome 浏览器里面

2161
00:56:37,000 --> 00:56:38,000
支持的这么一个计划

2162
00:56:38,000 --> 00:56:39,000
我觉得可能

2163
00:56:39,000 --> 00:56:40,000
最大的一个考虑

2164
00:56:40,000 --> 00:56:40,000
还是说

2165
00:56:40,000 --> 00:56:41,000
可能会造成

2166
00:56:41,000 --> 00:56:43,000
用户群的割裂

2167
00:56:43,000 --> 00:56:44,000
你本来一个浏览器

2168
00:56:44,000 --> 00:56:45,000
开发小组

2169
00:56:45,000 --> 00:56:46,000
你就去考虑说

2170
00:56:46,000 --> 00:56:47,000
怎么去优化

2171
00:56:47,000 --> 00:56:48,000
JavaScript 就好了

2172
00:56:48,000 --> 00:56:50,000
多出了一个新语言

2173
00:56:50,000 --> 00:56:51,000
我还要再考虑

2174
00:56:51,000 --> 00:56:52,000
你这个新语言的模型

2175
00:56:52,000 --> 00:56:53,000
就并不经济

2176
00:56:53,000 --> 00:56:56,000
然后从用户的角度来讲

2177
00:56:56,000 --> 00:56:57,000
其实也是挺有问题的

2178
00:56:57,000 --> 00:56:58,000
我跟所有其他

2179
00:56:58,000 --> 00:56:59,000
浏览器开发

2180
00:56:59,000 --> 00:57:00,000
都得使用 JavaScript

2181
00:57:00,000 --> 00:57:02,000
唯独给你

2182
00:57:02,000 --> 00:57:02,000
Chrome 开发

2183
00:57:02,000 --> 00:57:03,000
我再想想

2184
00:57:03,000 --> 00:57:05,000
Dart 是不是更好

2185
00:57:05,000 --> 00:57:06,000
其实何必

2186
00:57:06,000 --> 00:57:07,000
这样会导致

2187
00:57:07,000 --> 00:57:10,000
保守型的用户

2188
00:57:10,000 --> 00:57:11,000
还是会倾向于选择

2189
00:57:11,000 --> 00:57:13,000
说一个成熟的

2190
00:57:13,000 --> 00:57:14,000
JavaScript 的这种语言

2191
00:57:14,000 --> 00:57:15,000
还有成熟的一些技术

2192
00:57:15,000 --> 00:57:16,000
来做开发

2193
00:57:16,000 --> 00:57:17,000
那就不会

2194
00:57:17,000 --> 00:57:19,000
那么倾向于说

2195
00:57:19,000 --> 00:57:19,000
用 Dart

2196
00:57:19,000 --> 00:57:20,000
没有经过所谓

2197
00:57:20,000 --> 00:57:23,000
时间考验的

2198
00:57:23,000 --> 00:57:24,000
新的语言

2199
00:57:24,000 --> 00:57:24,000
来基于做

2200
00:57:24,000 --> 00:57:25,000
这种商业开发

2201
00:57:25,000 --> 00:57:26,000
我觉得这个是不太靠谱的

2202
00:57:26,000 --> 00:57:28,000
除非有一天

2203
00:57:28,000 --> 00:57:29,000
Chrome 的市场率

2204
00:57:29,000 --> 00:57:31,000
可以达到 90%以上

2205
00:57:31,000 --> 00:57:34,000
否则基本上还是不要想

2206
00:57:34,000 --> 00:57:37,000
I don't think that day will ever come

2207
00:57:37,000 --> 00:57:38,000
but

2208
00:57:38,000 --> 00:57:38,000
对

2209
00:57:38,000 --> 00:57:39,000
我们会看

2210
00:57:39,000 --> 00:57:41,000
太现实

2211
00:57:41,000 --> 00:57:42,000
现在

2212
00:57:42,000 --> 00:57:44,000
现在那个

2213
00:57:44,000 --> 00:57:46,000
Chrome 也就

2214
00:57:46,000 --> 00:57:50,000
3%到 40%的市占率

2215
00:57:50,000 --> 00:57:52,000
中国现在就完全不行了

2216
00:57:52,000 --> 00:57:54,000
因为就是被封锁之后

2217
00:57:54,000 --> 00:57:55,000
没办法下载

2218
00:57:55,000 --> 00:57:55,000
没办法更新

2219
00:57:55,000 --> 00:57:56,000
其实用户

2220
00:57:56,000 --> 00:57:58,000
我觉得这个流程和发现

2221
00:57:58,000 --> 00:58:01,000
都是肯定是走下泡路的

2222
00:58:01,000 --> 00:58:04,000
国外可能还行吧

2223
00:58:04,000 --> 00:58:05,000
对

2224
00:58:05,000 --> 00:58:10,000
然后接下来

2225
00:58:10,000 --> 00:58:13,000
Windows 10 搭载的

2226
00:58:13,000 --> 00:58:15,000
或者说微软下载的论器

2227
00:58:15,000 --> 00:58:16,000
也很有可能会

2228
00:58:16,000 --> 00:58:17,000
替微软抢

2229
00:58:17,000 --> 00:58:18,000
或者也不能讲什么

2230
00:58:18,000 --> 00:58:21,000
这个其实今年

2231
00:58:21,000 --> 00:58:23,000
我们现在马上聊到的

2232
00:58:23,000 --> 00:58:23,000
这个主题

2233
00:58:23,000 --> 00:58:24,000
就是今天

2234
00:58:24,000 --> 00:58:26,000
已经过了一段时间了

2235
00:58:26,000 --> 00:58:27,000
我们现在聊得比较晚

2236
00:58:27,000 --> 00:58:28,000
就是这个微软的 Build

2237
00:58:28,000 --> 00:58:30,000
2015 这个大会

2238
00:58:30,000 --> 00:58:30,000
开发者大会

2239
00:58:30,000 --> 00:58:32,000
他们提到的一些东西

2240
00:58:32,000 --> 00:58:35,000
你先说

2241
00:58:35,000 --> 00:58:37,000
你觉得印象比较深刻的

2242
00:58:37,000 --> 00:58:37,000
那几个吧

2243
00:58:37,000 --> 00:58:38,000
你先看哪些

2244
00:58:38,000 --> 00:58:40,000
其实我唯一观众的

2245
00:58:40,000 --> 00:58:41,000
就是 Hololens

2246
00:58:41,000 --> 00:58:44,000
其他都没看

2247
00:58:44,000 --> 00:58:46,000
我不知道你就整个

2248
00:58:46,000 --> 00:58:46,000
那个 Keynote

2249
00:58:46,000 --> 00:58:48,000
我只看了 Holens

2250
00:58:48,000 --> 00:58:48,000
那一部分

2251
00:58:48,000 --> 00:58:50,000
然后就转头打游戏去

2252
00:58:50,000 --> 00:58:55,000
就是第一天的主题演讲

2253
00:58:55,000 --> 00:58:56,000
我还看了

2254
00:58:56,000 --> 00:59:00,000
除了讲 Azure 的中后半节之外

2255
00:59:00,000 --> 00:59:01,000
其他我都看了

2256
00:59:01,000 --> 00:59:02,000
他先说会

2257
00:59:02,000 --> 00:59:03,000
那个主题演讲

2258
00:59:03,000 --> 00:59:05,000
他前面花了相当长时间

2259
00:59:05,000 --> 00:59:06,000
讲 Azure

2260
00:59:06,000 --> 00:59:07,000
就是他们的云服务

2261
00:59:07,000 --> 00:59:09,000
我觉得其实挺无聊的

2262
00:59:09,000 --> 00:59:12,000
不是很多人都要做后台开发吗

2263
00:59:12,000 --> 00:59:13,000
你也讲那么多有什么用

2264
00:59:13,000 --> 00:59:15,000
我觉得 Azure 有点

2265
00:59:15,000 --> 00:59:18,000
就是 over 了

2266
00:59:18,000 --> 00:59:19,000
推的人太过头了

2267
00:59:19,000 --> 00:59:21,000
不但这个也能够理解

2268
00:59:21,000 --> 00:59:21,000
毕竟那个谁

2269
00:59:21,000 --> 00:59:23,000
Santaya Nadella

2270
00:59:23,000 --> 00:59:24,000
是 GIR 部门

2271
00:59:24,000 --> 00:59:25,000
偷偷这样过去了

2272
00:59:25,000 --> 00:59:26,000
他可能在

2273
00:59:26,000 --> 00:59:28,000
这个人员部署上

2274
00:59:28,000 --> 00:59:29,000
可能会有点偏向性

2275
00:59:29,000 --> 00:59:30,000
但我觉得那个安排

2276
00:59:30,000 --> 00:59:31,000
是不太好的

2277
00:59:31,000 --> 00:59:33,000
起码作为一个主题演讲

2278
00:59:33,000 --> 00:59:35,000
就是太繁琐

2279
00:59:35,000 --> 00:59:36,000
太多细节的东西

2280
00:59:36,000 --> 00:59:38,000
没有把消费者

2281
00:59:38,000 --> 00:59:40,000
能够感知的东西

2282
00:59:40,000 --> 00:59:41,000
通知也突出来了

2283
00:59:41,000 --> 00:59:42,000
当然你可以说

2284
00:59:42,000 --> 00:59:43,000
我们这个 Build 会

2285
00:59:43,000 --> 00:59:44,000
又不像 WDC

2286
00:59:44,000 --> 00:59:46,000
第一天主要是面向

2287
00:59:46,000 --> 00:59:47,000
外媒体和消费者

2288
00:59:47,000 --> 00:59:49,000
我们这个 Build

2289
00:59:49,000 --> 00:59:50,000
就完全是针对开发者

2290
00:59:50,000 --> 00:59:51,000
那也可以

2291
00:59:51,000 --> 00:59:52,000
但起码我说

2292
00:59:52,000 --> 00:59:55,000
从一个个人消费者来讲

2293
00:59:55,000 --> 00:59:56,000
还是从媒体上来讲

2294
00:59:56,000 --> 00:59:58,000
他现在这种方式

2295
00:59:58,000 --> 00:59:59,000
就这么匆匆发布出来

2296
00:59:59,000 --> 01:00:00,000
好像感觉

2297
01:00:00,000 --> 01:00:01,000
时尚时候有一点问题

2298
01:00:01,000 --> 01:00:05,000
我觉得 Build 不能

2299
01:00:05,000 --> 01:00:08,000
真正的消费者会有多少

2300
01:00:08,000 --> 01:00:09,000
真正的开发者

2301
01:00:09,000 --> 01:00:10,000
会有多少看 Build

2302
01:00:10,000 --> 01:00:10,000
且不说

2303
01:00:10,000 --> 01:00:11,000
真正的消费者

2304
01:00:11,000 --> 01:00:13,000
没有几个在看 Build

2305
01:00:13,000 --> 01:00:15,000
消费者我感觉

2306
01:00:15,000 --> 01:00:17,000
微软还是有不少

2307
01:00:17,000 --> 01:00:18,000
这个所谓铁杆粉丝的

2308
01:00:18,000 --> 01:00:20,000
就是说这个我不怀疑

2309
01:00:20,000 --> 01:00:21,000
就是说这个数量上怎么样

2310
01:00:21,000 --> 01:00:22,000
第二个说

2311
01:00:22,000 --> 01:00:23,000
他们这帮人

2312
01:00:23,000 --> 01:00:25,000
到底有多关心 Ary

2313
01:00:25,000 --> 01:00:26,000
值得讲两

2314
01:00:26,000 --> 01:00:27,000
讲半个小时

2315
01:00:27,000 --> 01:00:28,000
然后换三个人

2316
01:00:28,000 --> 01:00:29,000
这种方式

2317
01:00:29,000 --> 01:00:30,000
我觉得也不一定

2318
01:00:30,000 --> 01:00:30,000
对

2319
01:00:30,000 --> 01:00:32,000
我是可以理解

2320
01:00:32,000 --> 01:00:34,000
微软非常迫切地

2321
01:00:34,000 --> 01:00:36,000
想要抢回服务器端的

2322
01:00:36,000 --> 01:00:39,000
市场份额的决心

2323
01:00:39,000 --> 01:00:41,000
但是我觉得

2324
01:00:41,000 --> 01:00:43,000
这样一个开发者大会上

2325
01:00:43,000 --> 01:00:44,000
花这么长的篇幅

2326
01:00:44,000 --> 01:00:46,000
来介绍这样一个产品

2327
01:00:46,000 --> 01:00:47,000
有点点 over

2328
01:00:47,000 --> 01:00:54,000
但 anyway

2329
01:00:54,000 --> 01:00:57,000
虽然 B 公司

2330
01:00:57,000 --> 01:00:58,000
也正在试图

2331
01:00:58,000 --> 01:01:00,000
跟 Azor

2332
01:01:00,000 --> 01:01:02,000
之前反正开了

2333
01:01:02,000 --> 01:01:02,000
很多天的会

2334
01:01:02,000 --> 01:01:03,000
当然我们要参与

2335
01:01:03,000 --> 01:01:05,000
想要把公司的产品

2336
01:01:05,000 --> 01:01:07,000
做进 Azor 里面

2337
01:01:07,000 --> 01:01:08,000
成为它的一个服务

2338
01:01:08,000 --> 01:01:12,000
但我觉得还是离

2339
01:01:12,000 --> 01:01:13,000
觉得还是离我很远

2340
01:01:13,000 --> 01:01:17,000
就是 Build 的

2341
01:01:17,000 --> 01:01:18,000
这个 Keyno 上

2342
01:01:18,000 --> 01:01:19,000
还展示了一些其他东西

2343
01:01:19,000 --> 01:01:21,000
另外一个重头戏

2344
01:01:21,000 --> 01:01:22,000
就是这个 Windows 10

2345
01:01:22,000 --> 01:01:23,000
反正起码

2346
01:01:23,000 --> 01:01:24,000
从 Demo 角度来看

2347
01:01:24,000 --> 01:01:26,000
还是蛮激动人心的

2348
01:01:26,000 --> 01:01:28,000
然后上次我们请小姐姐来讲

2349
01:01:28,000 --> 01:01:29,000
他也说

2350
01:01:29,000 --> 01:01:32,000
就确实温时还是不错的

2351
01:01:32,000 --> 01:01:34,000
虽然现在开发测试版本

2352
01:01:34,000 --> 01:01:35,000
可能不是太稳定

2353
01:01:35,000 --> 01:01:38,000
但是起码从设计上来讲

2354
01:01:38,000 --> 01:01:38,000
观众来讲

2355
01:01:38,000 --> 01:01:39,000
我们看的还是挺好的

2356
01:01:39,000 --> 01:01:40,000
这么一个过程

2357
01:01:40,000 --> 01:01:42,000
但温时有一个特点

2358
01:01:42,000 --> 01:01:44,000
温时还是继续延续了

2359
01:01:44,000 --> 01:01:44,000
这个微软

2360
01:01:44,000 --> 01:01:47,000
有非常非常多的版本的特点

2361
01:01:47,000 --> 01:01:49,000
对

2362
01:01:49,000 --> 01:01:53,000
温时将在 190 个国家发售

2363
01:01:53,000 --> 01:01:55,000
然后有 111 种语

2364
01:01:55,000 --> 01:01:58,000
然后接下来

2365
01:01:58,000 --> 01:01:59,000
我可以大概说一下

2366
01:01:59,000 --> 01:02:00,000
Windows 10 的版本

2367
01:02:00,000 --> 01:02:02,000
首先 Windows 10 有 Home 版

2368
01:02:02,000 --> 01:02:05,000
就是最普通的

2369
01:02:05,000 --> 01:02:06,000
大家各自

2370
01:02:06,000 --> 01:02:08,000
最普通的消费者会买的版本

2371
01:02:08,000 --> 01:02:10,000
Windows 10 Mobile 版本

2372
01:02:10,000 --> 01:02:12,000
跑在 Mobile 的地方上

2373
01:02:12,000 --> 01:02:15,000
Windows 10 Pro 版本

2374
01:02:15,000 --> 01:02:19,000
是 Home 版本加上一些可能小的

2375
01:02:19,000 --> 01:02:21,000
小的 small business

2376
01:02:21,000 --> 01:02:23,000
或者是开发者会需要的一些特性

2377
01:02:23,000 --> 01:02:26,000
然后又有 Windows 10 Enterprise 版本

2378
01:02:26,000 --> 01:02:28,000
Windows 10 Education 版本

2379
01:02:28,000 --> 01:02:31,000
然后还有 Windows 10 Mobile Enterprise 版本

2380
01:02:31,000 --> 01:02:32,000
这是什么东西

2381
01:02:32,000 --> 01:02:36,000
就为什么会有一个

2382
01:02:36,000 --> 01:02:37,000
Mobile Enterprise 版本

2383
01:02:37,000 --> 01:02:38,000
这是

2384
01:02:38,000 --> 01:02:40,000
这是戏分之长

2385
01:02:40,000 --> 01:02:40,000
拿来干嘛的

2386
01:02:40,000 --> 01:02:42,000
戏分之长吧

2387
01:02:42,000 --> 01:02:43,000
其实挺鼓励的

2388
01:02:43,000 --> 01:02:45,000
对 然后最后还有一个 Windows 10

2389
01:02:45,000 --> 01:02:47,000
IoT Core 版本

2390
01:02:47,000 --> 01:02:49,000
就是 Internet of Things Core 版本

2391
01:02:49,000 --> 01:02:50,000
那个挺有意思的

2392
01:02:50,000 --> 01:02:52,000
那个其实可以简单说一下

2393
01:02:52,000 --> 01:02:54,000
就是说那个的主要

2394
01:02:54,000 --> 01:02:57,000
就是 IoT 是指 Internet of Things

2395
01:02:57,000 --> 01:02:58,000
就是物联网

2396
01:02:58,000 --> 01:03:00,000
它那个什么意思呢

2397
01:03:00,000 --> 01:03:01,000
其实是非常小的设备

2398
01:03:01,000 --> 01:03:03,000
因为物联网里面

2399
01:03:03,000 --> 01:03:05,000
最要紧的一个基础设施

2400
01:03:05,000 --> 01:03:06,000
就是各种各样的传感器

2401
01:03:06,000 --> 01:03:07,000
各种各样的小外设

2402
01:03:07,000 --> 01:03:09,000
最小外设通常的一个

2403
01:03:09,000 --> 01:03:11,000
就是他们的一个供应

2404
01:03:11,000 --> 01:03:13,000
就是说价格便宜成本低

2405
01:03:13,000 --> 01:03:15,000
但结果就是说

2406
01:03:15,000 --> 01:03:17,000
这个处理器很弱

2407
01:03:17,000 --> 01:03:18,000
然后可能他们还有耗电的

2408
01:03:18,000 --> 01:03:20,000
就是功耗有要求

2409
01:03:20,000 --> 01:03:21,000
不能超过多少

2410
01:03:21,000 --> 01:03:21,000
对

2411
01:03:21,000 --> 01:03:23,000
导致他们整个都是一个

2412
01:03:23,000 --> 01:03:25,000
比较弱小的一个机器

2413
01:03:25,000 --> 01:03:27,000
然后你要在那么弱小的

2414
01:03:27,000 --> 01:03:29,000
一个机器上运行一个 Windows 系统

2415
01:03:29,000 --> 01:03:31,000
这就没有精简过的 Windows 系统

2416
01:03:31,000 --> 01:03:32,000
这显然是

2417
01:03:32,000 --> 01:03:33,000
听起来非常疯狂

2418
01:03:33,000 --> 01:03:35,000
对 比较疯狂的一件事情

2419
01:03:35,000 --> 01:03:36,000
也不太合适

2420
01:03:36,000 --> 01:03:37,000
因为那些东西很多都没有屏幕

2421
01:03:37,000 --> 01:03:37,000
对吧

2422
01:03:37,000 --> 01:03:39,000
那么你这个系统加载一些什么显示

2423
01:03:39,000 --> 01:03:40,000
图标

2424
01:03:40,000 --> 01:03:41,000
就是故意

2425
01:03:41,000 --> 01:03:43,000
这它都是完全没有意义的

2426
01:03:43,000 --> 01:03:43,000
对

2427
01:03:43,000 --> 01:03:45,000
你连个蓝屏都看不到

2428
01:03:45,000 --> 01:03:45,000
何必

2429
01:03:45,000 --> 01:03:45,000
对

2430
01:03:45,000 --> 01:03:48,000
所以说为了把这个 Windows

2431
01:03:48,000 --> 01:03:49,000
能够塞进那么小的

2432
01:03:49,000 --> 01:03:51,000
那么性能插耳机器里面

2433
01:03:51,000 --> 01:03:52,000
当然同时也为了说

2434
01:03:52,000 --> 01:03:53,000
简化这个结构

2435
01:03:53,000 --> 01:03:54,000
他们就出了这么一个

2436
01:03:54,000 --> 01:03:55,000
Windows 式的

2437
01:03:55,000 --> 01:03:57,000
IoT 版本

2438
01:03:57,000 --> 01:03:57,000
就简单说

2439
01:03:57,000 --> 01:03:59,000
就是把这个 Windows 的内核拿出来

2440
01:03:59,000 --> 01:04:01,000
跟 Link 是一样了

2441
01:04:01,000 --> 01:04:02,000
然后再精简一下

2442
01:04:02,000 --> 01:04:03,000
把这个内核

2443
01:04:03,000 --> 01:04:05,000
加上一些比较简单的周边的工具

2444
01:04:05,000 --> 01:04:08,000
装到那些小小的 IoT 的这种

2445
01:04:08,000 --> 01:04:10,000
就是物联网的设备里面去

2446
01:04:10,000 --> 01:04:11,000
就可以实现说

2447
01:04:11,000 --> 01:04:12,000
哪怕我这个处理师弱小

2448
01:04:12,000 --> 01:04:14,000
我好歹也能跑一个 Windows

2449
01:04:14,000 --> 01:04:15,000
但虽然是今年吧

2450
01:04:15,000 --> 01:04:16,000
对

2451
01:04:16,000 --> 01:04:20,000
虽然这个念头在目前来看

2452
01:04:20,000 --> 01:04:22,000
是比较奇怪的

2453
01:04:22,000 --> 01:04:24,000
因为目前的 IoT 的这些

2454
01:04:24,000 --> 01:04:26,000
既有产品的开发者

2455
01:04:26,000 --> 01:04:27,000
基本上全都采用 Linux

2456
01:04:27,000 --> 01:04:29,000
各种形式的 Linux

2457
01:04:29,000 --> 01:04:31,000
被裁剪过的

2458
01:04:31,000 --> 01:04:33,000
甚至 FreeBSD 之类的东西

2459
01:04:33,000 --> 01:04:35,000
来做它的操作

2460
01:04:35,000 --> 01:04:38,000
但是这个 Windows 10

2461
01:04:38,000 --> 01:04:40,000
IoT Core 版本

2462
01:04:40,000 --> 01:04:42,000
应该就是为了要抢占这一部分市场

2463
01:04:42,000 --> 01:04:46,000
所以它有一个所谓的

2464
01:04:46,000 --> 01:04:47,000
是一个什么 Uphill Battle

2465
01:04:47,000 --> 01:04:49,000
就是上山打仗

2466
01:04:49,000 --> 01:04:50,000
就是很难了

2467
01:04:50,000 --> 01:04:53,000
因为你现在市场上有这么一个免费

2468
01:04:53,000 --> 01:04:55,000
而且可以更加容易定制化

2469
01:04:55,000 --> 01:04:57,000
然后市场规模又非常大的

2470
01:04:57,000 --> 01:05:00,000
这么一个开源的产品

2471
01:05:00,000 --> 01:05:01,000
那你肯定选一个

2472
01:05:01,000 --> 01:05:03,000
选一个必源自己搞的产品

2473
01:05:03,000 --> 01:05:06,000
市场开得起码快要好

2474
01:05:06,000 --> 01:05:07,000
也不一定

2475
01:05:07,000 --> 01:05:09,000
我觉得也许 Windows 10

2476
01:05:09,000 --> 01:05:10,000
它固然要打上山

2477
01:05:10,000 --> 01:05:12,000
它固然要打上山仗

2478
01:05:12,000 --> 01:05:14,000
但是你必须承认

2479
01:05:14,000 --> 01:05:16,000
它面对的敌人并没有团结起来

2480
01:05:16,000 --> 01:05:17,000
对付它

2481
01:05:17,000 --> 01:05:18,000
然后

2482
01:05:18,000 --> 01:05:21,000
而且它有一个优势

2483
01:05:21,000 --> 01:05:23,000
就是如果你所有的产品

2484
01:05:23,000 --> 01:05:24,000
都统一使用 Windows 10

2485
01:05:24,000 --> 01:05:28,000
IoT Core 这个版本的操线

2486
01:05:28,000 --> 01:05:30,000
那不管是管理

2487
01:05:30,000 --> 01:05:33,000
还是和其他的同样使用

2488
01:05:33,000 --> 01:05:35,000
同一平台的产品交流

2489
01:05:35,000 --> 01:05:37,000
可能会更方便一点

2490
01:05:37,000 --> 01:05:39,000
而且我觉得以微软的支持

2491
01:05:39,000 --> 01:05:41,000
微软的技术能力

2492
01:05:41,000 --> 01:05:42,000
做技术支持会比较好

2493
01:05:42,000 --> 01:05:46,000
而且同时可以养活一大批

2494
01:05:46,000 --> 01:05:47,000
顾客公司

2495
01:05:47,000 --> 01:05:51,000
Windows 10 之后

2496
01:05:51,000 --> 01:05:52,000
我们这个上面

2497
01:05:52,000 --> 01:05:54,000
就是目前能

2498
01:05:54,000 --> 01:05:55,000
马上能用的

2499
01:05:55,000 --> 01:05:56,000
还有一个挺好玩的东西

2500
01:05:56,000 --> 01:05:58,000
叫做 Visual Studio Code

2501
01:05:58,000 --> 01:05:58,000
对

2502
01:05:58,000 --> 01:05:59,000
所以之前我们在

2503
01:05:59,000 --> 01:06:01,000
我在 IT 公论和 Loin

2504
01:06:01,000 --> 01:06:03,000
大概就是提及了一下

2505
01:06:03,000 --> 01:06:04,000
但是并没有展开

2506
01:06:04,000 --> 01:06:05,000
因为觉得并不适合

2507
01:06:05,000 --> 01:06:06,000
在那个节目讲

2508
01:06:06,000 --> 01:06:08,000
这边就是我们这个

2509
01:06:08,000 --> 01:06:10,000
编辑器是我们关注

2510
01:06:10,000 --> 01:06:11,000
编辑器还有什么键盘

2511
01:06:11,000 --> 01:06:12,000
这些电脑外设

2512
01:06:12,000 --> 01:06:13,000
也是我们关注的重点

2513
01:06:13,000 --> 01:06:15,000
我不知道你又用

2514
01:06:15,000 --> 01:06:16,000
Visual Studio Code

2515
01:06:16,000 --> 01:06:18,000
这款编辑器没

2516
01:06:18,000 --> 01:06:19,000
有啊

2517
01:06:19,000 --> 01:06:22,000
就当时看到那个新闻

2518
01:06:22,000 --> 01:06:23,000
就立刻下载

2519
01:06:23,000 --> 01:06:24,000
适用了一下

2520
01:06:24,000 --> 01:06:29,000
就感觉还是挺蒙太奇的

2521
01:06:29,000 --> 01:06:32,000
就是你在 OS 10 上面下载

2522
01:06:32,000 --> 01:06:33,000
从微软的网站上

2523
01:06:33,000 --> 01:06:33,000
下载的一个东西

2524
01:06:33,000 --> 01:06:35,000
然后这个东西的结尾

2525
01:06:35,000 --> 01:06:38,000
居然不是 MSI 或者是 EXE

2526
01:06:38,000 --> 01:06:40,000
它是个

2527
01:06:40,000 --> 01:06:42,000
它应该是个

2528
01:06:42,000 --> 01:06:44,000
应该也是一个

2529
01:06:44,000 --> 01:06:47,000
这不重要的

2530
01:06:47,000 --> 01:06:48,000
就是反正我把那个

2531
01:06:48,000 --> 01:06:50,000
Visual Studio 图标

2532
01:06:50,000 --> 01:06:52,000
拖进 Application 文件夹的时候

2533
01:06:52,000 --> 01:06:54,000
感觉还是非常蒙太奇的

2534
01:06:54,000 --> 01:06:57,000
然后点了点还能跑

2535
01:06:57,000 --> 01:06:59,000
反正就是哪个世界

2536
01:06:59,000 --> 01:07:01,000
对点了点还能跑

2537
01:07:01,000 --> 01:07:01,000
非常 surreal

2538
01:07:01,000 --> 01:07:06,000
怎么说呢

2539
01:07:06,000 --> 01:07:07,000
就它还是一个

2540
01:07:07,000 --> 01:07:11,000
虽然它挂了 Visual Studio 的名字

2541
01:07:11,000 --> 01:07:13,000
但它本质上还只是一个编辑系而已

2542
01:07:13,000 --> 01:07:15,000
对

2543
01:07:15,000 --> 01:07:17,000
它是一个所谓的 Editor

2544
01:07:17,000 --> 01:07:17,000
对

2545
01:07:17,000 --> 01:07:18,000
它并不是一个

2546
01:07:18,000 --> 01:07:19,000
一个 IDE

2547
01:07:19,000 --> 01:07:21,000
它并不是一个

2548
01:07:21,000 --> 01:07:23,000
Editing Environment

2549
01:07:23,000 --> 01:07:24,000
Environment

2550
01:07:24,000 --> 01:07:24,000
对

2551
01:07:24,000 --> 01:07:26,000
就是这两个 E 是不一样的

2552
01:07:26,000 --> 01:07:27,000
一个是 Editor 的 E

2553
01:07:27,000 --> 01:07:28,000
那个是 IDE

2554
01:07:28,000 --> 01:07:30,000
那个 E 指的是 Environment

2555
01:07:30,000 --> 01:07:31,000
就是机身开发环境

2556
01:07:31,000 --> 01:07:34,000
所以就他们在定额上还是区别蛮大

2557
01:07:34,000 --> 01:07:35,000
就这个是一个简单的写代码

2558
01:07:35,000 --> 01:07:38,000
那个可能会加上什么开发

2559
01:07:38,000 --> 01:07:40,000
挑事项目管理

2560
01:07:40,000 --> 01:07:42,000
这些关系发达的功能在里面一起的

2561
01:07:42,000 --> 01:07:42,000
对吧

2562
01:07:42,000 --> 01:07:42,000
对

2563
01:07:42,000 --> 01:07:45,000
然后这个 code

2564
01:07:45,000 --> 01:07:46,000
就 Visual Studio Code 的这个变迹器

2565
01:07:46,000 --> 01:07:50,000
它是基于这个叫做 Electron 的项目做的

2566
01:07:50,000 --> 01:07:50,000
对

2567
01:07:50,000 --> 01:07:51,000
Electron 呢

2568
01:07:51,000 --> 01:07:53,000
简单来讲它是就是用那个 Node

2569
01:07:53,000 --> 01:07:55,000
或者说我们现在新版

2570
01:07:55,000 --> 01:07:58,000
它叫这个基于 IO.js 这么一个引擎

2571
01:07:58,000 --> 01:08:00,000
加上这个 WebKit

2572
01:08:00,000 --> 01:08:03,000
或者说 Chromium 这套网页展示的东西

2573
01:08:03,000 --> 01:08:06,000
然后整个呈现出来的跟你这个

2574
01:08:06,000 --> 01:08:08,000
看起来是一个原生应用

2575
01:08:08,000 --> 01:08:11,000
那其实那里面所有的技术都是来自于 Web 的

2576
01:08:11,000 --> 01:08:11,000
对

2577
01:08:11,000 --> 01:08:13,000
其实是个浏览器

2578
01:08:13,000 --> 01:08:14,000
这是很

2579
01:08:14,000 --> 01:08:16,000
就如果你没有用过的话

2580
01:08:16,000 --> 01:08:17,000
这可能是个比较神迹的一点

2581
01:08:17,000 --> 01:08:19,000
但其实这样的浏览

2582
01:08:19,000 --> 01:08:20,000
这样的编辑器

2583
01:08:20,000 --> 01:08:22,000
此前已经有过很多例子了

2584
01:08:22,000 --> 01:08:25,000
比如说 GitHub 的 Atom

2585
01:08:25,000 --> 01:08:26,000
GitHub 的 Atom 也是基于 Electron

2586
01:08:26,000 --> 01:08:27,000
甚至说

2587
01:08:27,000 --> 01:08:28,000
Wait a second

2588
01:08:28,000 --> 01:08:29,000
Electron 之前叫什么来着

2589
01:08:29,000 --> 01:08:33,000
其实想不起来了

2590
01:08:33,000 --> 01:08:35,000
但之前它叫的那个名字

2591
01:08:35,000 --> 01:08:36,000
跟 Atom 有点关系

2592
01:08:36,000 --> 01:08:37,000
Atom 是原子

2593
01:08:37,000 --> 01:08:38,000
所以它叫电子

2594
01:08:38,000 --> 01:08:39,000
就是它是组成

2595
01:08:39,000 --> 01:08:42,000
它一开始就是为了 Atom 而开发的

2596
01:08:42,000 --> 01:08:46,000
然后另外一个叫 Brackets 的编辑器

2597
01:08:46,000 --> 01:08:48,000
也是类似的

2598
01:08:48,000 --> 01:08:52,000
基于 Chrome 和 Brackets

2599
01:08:52,000 --> 01:08:55,000
应该是 NodeJS 做出来的一个编辑器

2600
01:08:55,000 --> 01:08:56,000
对

2601
01:08:56,000 --> 01:08:59,000
然后我觉得我使用 Viral Studio Code

2602
01:08:59,000 --> 01:09:02,000
最大的惊讶之处是

2603
01:09:02,000 --> 01:09:05,000
它并不仅仅是把 Electron 换了一个

2604
01:09:05,000 --> 01:09:07,000
就是加了一个皮肤

2605
01:09:07,000 --> 01:09:09,000
然后加了什么 Intelligence

2606
01:09:09,000 --> 01:09:10,000
对

2607
01:09:10,000 --> 01:09:12,000
它是有定制很多东西的

2608
01:09:12,000 --> 01:09:12,000
其实

2609
01:09:12,000 --> 01:09:13,000
的功能

2610
01:09:13,000 --> 01:09:14,000
它可以 Debug

2611
01:09:14,000 --> 01:09:17,000
我觉得这个是最让我 Impressive 的一件事情

2612
01:09:17,000 --> 01:09:19,000
就是你写了一个程序

2613
01:09:19,000 --> 01:09:23,000
你可以在 Viral Studio Code 里面调试

2614
01:09:23,000 --> 01:09:27,000
其实这就已经让它成了一个

2615
01:09:27,000 --> 01:09:30,000
达到一个叫什么编辑器以上

2616
01:09:30,000 --> 01:09:31,000
IDE 未满的这么一个状态

2617
01:09:31,000 --> 01:09:34,000
就大部分时候

2618
01:09:34,000 --> 01:09:38,000
其他的编辑器都不会提供

2619
01:09:38,000 --> 01:09:41,000
原的码级别的调试功能

2620
01:09:41,000 --> 01:09:42,000
你最多最多能做的

2621
01:09:42,000 --> 01:09:46,000
就是把那个 Console

2622
01:09:46,000 --> 01:09:47,000
的输入输出

2623
01:09:47,000 --> 01:09:50,000
集成到你这个编辑器的

2624
01:09:50,000 --> 01:09:52,000
一个子窗口里面

2625
01:09:52,000 --> 01:09:54,000
然后你在这个编辑器的子窗口里面

2626
01:09:54,000 --> 01:09:56,000
做比如说 GDB

2627
01:09:56,000 --> 01:09:59,000
或者是 PYDB 的这个 Debug 功能

2628
01:09:59,000 --> 01:10:02,000
但是 Viral Studio Code 就把

2629
01:10:02,000 --> 01:10:06,000
你我们最常用的那一批什么

2630
01:10:06,000 --> 01:10:08,000
单步执行啊

2631
01:10:08,000 --> 01:10:08,000
跳过啊

2632
01:10:08,000 --> 01:10:09,000
断点啊之类的

2633
01:10:09,000 --> 01:10:11,000
全都集成在了这个编辑器里面

2634
01:10:11,000 --> 01:10:12,000
然后你在跑的时候

2635
01:10:12,000 --> 01:10:13,000
可以用编辑器来 Debug

2636
01:10:13,000 --> 01:10:16,000
我觉得这个是比较了不起的一件事情

2637
01:10:16,000 --> 01:10:18,000
OK

2638
01:10:18,000 --> 01:10:18,000
对

2639
01:10:18,000 --> 01:10:21,000
其实我是要坦白一下

2640
01:10:21,000 --> 01:10:22,000
因为最近也比较忙

2641
01:10:22,000 --> 01:10:23,000
也没怎么用这个编辑器

2642
01:10:23,000 --> 01:10:26,000
所以没有太多的深刻的感受

2643
01:10:26,000 --> 01:10:27,000
反正就是当时看 D 演

2644
01:10:27,000 --> 01:10:28,000
就感觉演员还不错

2645
01:10:28,000 --> 01:10:30,000
不知道你有用他做一些

2646
01:10:30,000 --> 01:10:32,000
什么实际的事情吗

2647
01:10:32,000 --> 01:10:32,000
我最近我也挺忙

2648
01:10:32,000 --> 01:10:33,000
打开看看玩玩

2649
01:10:33,000 --> 01:10:35,000
但是我最近也忙

2650
01:10:35,000 --> 01:10:37,000
但是我在公司也装了

2651
01:10:37,000 --> 01:10:39,000
就是他在 Linux 上跑的

2652
01:10:39,000 --> 01:10:40,000
效果一定好

2653
01:10:40,000 --> 01:10:41,000
对他忘了说

2654
01:10:41,000 --> 01:10:42,000
他是一个跨平台的

2655
01:10:42,000 --> 01:10:44,000
对对对这是他最重要的一点

2656
01:10:44,000 --> 01:10:45,000
就是他试图用

2657
01:10:45,000 --> 01:10:48,000
这显示微软的狼子野心吧

2658
01:10:48,000 --> 01:10:50,000
就想要用这个东西来

2659
01:10:50,000 --> 01:10:53,000
让各个平台开发者都可以

2660
01:10:53,000 --> 01:10:56,000
你错

2661
01:10:56,000 --> 01:11:00,000
对首先是为微软开发东西

2662
01:11:00,000 --> 01:11:01,000
为你提供一个比较好的工具

2663
01:11:01,000 --> 01:11:03,000
你可以在

2664
01:11:03,000 --> 01:11:04,000
协下之余给微软开发点东西

2665
01:11:04,000 --> 01:11:06,000
这是他们的目的

2666
01:11:06,000 --> 01:11:07,000
然后对

2667
01:11:07,000 --> 01:11:11,000
然后从网上的反应来看

2668
01:11:11,000 --> 01:11:12,000
大家还是比较

2669
01:11:12,000 --> 01:11:15,000
总是说我觉得大部分人都是较好的吧

2670
01:11:15,000 --> 01:11:19,000
就他们官方在 5 月 13 日

2671
01:11:19,000 --> 01:11:21,000
就是录音的前一天

2672
01:11:21,000 --> 01:11:23,000
也贴了一个 blog

2673
01:11:23,000 --> 01:11:27,000
就说他们收到了反响的好评如潮

2674
01:11:27,000 --> 01:11:31,000
他们在推特上有一个 call 账号

2675
01:11:31,000 --> 01:11:32,000
然后这个账号在

2676
01:11:32,000 --> 01:11:35,000
现在已经有了 14.3 k 的 follower

2677
01:11:35,000 --> 01:11:38,000
然后很高了已经

2678
01:11:38,000 --> 01:11:40,000
对他们 mention 了 4.8 k 次

2679
01:11:40,000 --> 01:11:43,000
太恐怖了

2680
01:11:43,000 --> 01:11:44,000
对他们

2681
01:11:44,000 --> 01:11:47,000
在过了一周多一点吧

2682
01:11:47,000 --> 01:11:48,000
就已经

2683
01:11:48,000 --> 01:11:49,000
对

2684
01:11:49,000 --> 01:11:52,000
然后 Visual Studio Code 的右下角有一个小笑脸

2685
01:11:52,000 --> 01:11:53,000
如果你点一下的话

2686
01:11:53,000 --> 01:11:57,000
你可以跟他们回报一个 bug

2687
01:11:57,000 --> 01:11:59,000
或者是说你们做得好

2688
01:11:59,000 --> 01:12:00,000
就是有一个笑脸就哭脸

2689
01:12:00,000 --> 01:12:02,000
如果你点哭脸的话

2690
01:12:02,000 --> 01:12:04,000
就可以写一个 bug

2691
01:12:04,000 --> 01:12:05,000
如果你点笑脸的话

2692
01:12:05,000 --> 01:12:07,000
就是说有夸你们写得好

2693
01:12:07,000 --> 01:12:11,000
然后他们目前为止收到了 6000 个 Sinda Smile

2694
01:12:11,000 --> 01:12:16,000
就是至少 6000 个 smile

2695
01:12:16,000 --> 01:12:19,000
那个公众叫做 Sinda Smile

2696
01:12:19,000 --> 01:12:21,000
然后他们收到了 6000 个

2697
01:12:21,000 --> 01:12:27,000
但是他们没有透露说收到了多少个 Sinda Not Smiling

2698
01:12:27,000 --> 01:12:28,000
Sinda Crying

2699
01:12:28,000 --> 01:12:32,000
但 6000 个至少有 8000 个

2700
01:12:32,000 --> 01:12:33,000
对不止吧

2701
01:12:33,000 --> 01:12:34,000
6 万个

2702
01:12:34,000 --> 01:12:37,000
又黑人家

2703
01:12:37,000 --> 01:12:38,000
没有我没有黑

2704
01:12:38,000 --> 01:12:40,000
因为这个功能就是这个编辑器的功能

2705
01:12:40,000 --> 01:12:42,000
它版本号是 0.2 k 吧

2706
01:12:42,000 --> 01:12:42,000
没你记错的话

2707
01:12:42,000 --> 01:12:45,000
就编辑器的功能还是缺很多的

2708
01:12:45,000 --> 01:12:46,000
比如说

2709
01:12:46,000 --> 01:12:47,000
我记得

2710
01:12:47,000 --> 01:12:52,000
有人说在里面输入中文有问题

2711
01:12:52,000 --> 01:12:55,000
就中文输入法在扣子里面是不能工作的

2712
01:12:55,000 --> 01:12:57,000
但是我有点怀疑就是我有点

2713
01:12:57,000 --> 01:13:02,000
奇怪就是你在一个编辑代码编辑器里面输入中文干嘛

2714
01:13:02,000 --> 01:13:04,000
对提示

2715
01:13:04,000 --> 01:13:08,000
有些写那个注释会用中文写吗

2716
01:13:08,000 --> 01:13:10,000
注释用中文就挺二的

2717
01:13:10,000 --> 01:13:11,000
不过

2718
01:13:11,000 --> 01:13:15,000
但是国内很多的那个英文写不好

2719
01:13:15,000 --> 01:13:16,000
那就用中文写了

2720
01:13:16,000 --> 01:13:18,000
国内我觉得这个还是蛮常见的

2721
01:13:18,000 --> 01:13:19,000
就在外面就只能写拼音

2722
01:13:19,000 --> 01:13:20,000
看着更痛苦

2723
01:13:20,000 --> 01:13:23,000
这让我想起来之前说什么

2724
01:13:23,000 --> 01:13:25,000
KDE 有一次版本更新是

2725
01:13:25,000 --> 01:13:30,000
从现在开始代码裤里面终于没有德语了

2726
01:13:30,000 --> 01:13:32,000
有那种类似的

2727
01:13:32,000 --> 01:13:36,000
这个也是黑得漂亮

2728
01:13:36,000 --> 01:13:42,000
然后在 user voice 就是一个 feature request 的网站上面

2729
01:13:42,000 --> 01:13:46,000
他们已经收到了 660 个 feature request

2730
01:13:46,000 --> 01:13:52,000
然后有他们有一个所谓的 insiders program

2731
01:13:52,000 --> 01:13:56,000
就是让你可以更快的获得新的版本

2732
01:13:56,000 --> 01:14:01,000
或者是更快的得到新的新闻更新的这么一个 program

2733
01:14:01,000 --> 01:14:07,000
他们在短时间内已经收到 1300 个用户的注册

2734
01:14:07,000 --> 01:14:12,000
然后在 stack overflow 上也已经有了和 code 相关的 195 个问题

2735
01:14:12,000 --> 01:14:17,000
所有这些都是在仅仅一周多元的时间里面出现的

2736
01:14:17,000 --> 01:14:19,000
所以反响还是不错的

2737
01:14:19,000 --> 01:14:20,000
对

2738
01:14:20,000 --> 01:14:21,000
OK

2739
01:14:21,000 --> 01:14:23,000
好

2740
01:14:23,000 --> 01:14:25,000
那个关于那个 VTU Studio Code

2741
01:14:25,000 --> 01:14:27,000
我们就差不多聊到这

2742
01:14:27,000 --> 01:14:31,000
然后之后我们如果能够用它写什么东西的话

2743
01:14:31,000 --> 01:14:32,000
再来跟大家回报

2744
01:14:32,000 --> 01:14:33,000
对对

2745
01:14:33,000 --> 01:14:36,000
毕竟现在还是一个相对比较粗浅的认识

2746
01:14:36,000 --> 01:14:40,000
然后还是需要长期的使用才有结果

2747
01:14:40,000 --> 01:14:43,000
但是我觉得短期的应该不会发生这件事情

2748
01:14:43,000 --> 01:14:44,000
就不着急慢慢等

2749
01:14:44,000 --> 01:14:46,000
不管怎么说

2750
01:14:46,000 --> 01:14:49,000
就是这些厂商们能够开发跨平台的开发工具

2751
01:14:49,000 --> 01:14:52,000
对程序员来说其实是一个解放

2752
01:14:52,000 --> 01:14:55,000
就是你可以选择自己喜欢的开发平台

2753
01:14:55,000 --> 01:14:57,000
用自己喜欢的开发语言

2754
01:14:57,000 --> 01:14:59,000
开发自己喜欢的东西

2755
01:14:59,000 --> 01:15:04,000
就比如说之前我一直说 C Sharp 是我最喜欢的语言

2756
01:15:04,000 --> 01:15:08,000
但是在 Mac 上面就没有机缘去开发 C Sharp 的工具

2757
01:15:08,000 --> 01:15:10,000
开发 C Sharp 的程序

2758
01:15:10,000 --> 01:15:11,000
因为根本没有工具

2759
01:15:11,000 --> 01:15:13,000
而现在巴尔默的中世纪

2760
01:15:13,000 --> 01:15:15,000
黑暗的中世纪过了之后

2761
01:15:15,000 --> 01:15:18,000
这样的机会似乎开始出现在眼前了

2762
01:15:18,000 --> 01:15:19,000
我觉得这无论如何是一个好事

2763
01:15:19,000 --> 01:15:23,000
然后反过来其实也是一样的

2764
01:15:23,000 --> 01:15:28,000
就是这一次 Build 最受欢迎的 Session 之一

2765
01:15:28,000 --> 01:15:35,000
就是用 Visual Studio 2005 编译 Object C 程序

2766
01:15:35,000 --> 01:15:42,000
就是如果你是一个想要给 iPhone 开发程序的人

2767
01:15:42,000 --> 01:15:44,000
然后你只有 iPhone 和 Windows 电脑

2768
01:15:44,000 --> 01:15:49,000
那从 Visual Studio 2015 开始

2769
01:15:49,000 --> 01:15:52,000
你也可以用 Visual Studio 给 iPhone 开发程序了

2770
01:15:52,000 --> 01:15:53,000
这也是一件

2771
01:15:53,000 --> 01:15:57,000
就是反过来也是一件很好的事情

2772
01:15:57,000 --> 01:16:00,000
我还没用过那个东西

2773
01:16:00,000 --> 01:16:02,000
但我现在也不做移动开发不知道

2774
01:16:02,000 --> 01:16:04,000
但是如果说

2775
01:16:04,000 --> 01:16:07,000
因为大家对 Visual Studio 的评价是不错的

2776
01:16:07,000 --> 01:16:10,000
然后 Xcode 就是属于那个好看

2777
01:16:10,000 --> 01:16:12,000
但是可能不是那么好用的时候

2778
01:16:12,000 --> 01:16:16,000
到时候最 ironic 最讽刺的就是

2779
01:16:16,000 --> 01:16:20,000
你在为 iOS 开发最好的体验

2780
01:16:20,000 --> 01:16:21,000
是用 Visual Studio

2781
01:16:21,000 --> 01:16:22,000
这个就搞笑了

2782
01:16:22,000 --> 01:16:24,000
这很有可能是真的

2783
01:16:24,000 --> 01:16:29,000
就好像 Intelligate 的那个厂商 Jetbrains

2784
01:16:29,000 --> 01:16:32,000
出了一个 Object C 的编译器

2785
01:16:32,000 --> 01:16:35,000
ID 1 叫什么我已经忘了

2786
01:16:35,000 --> 01:16:39,000
但就是 Object Code 之类的

2787
01:16:39,000 --> 01:16:43,000
那个东西用起来就已经比 Xcode 要舒服很多

2788
01:16:43,000 --> 01:16:48,000
但是它一直没有推广起来

2789
01:16:48,000 --> 01:16:50,000
但很大一个原因是

2790
01:16:50,000 --> 01:16:53,000
它试图在 OS 10 上和 Xcode 争锋

2791
01:16:53,000 --> 01:16:55,000
这还是比较吃亏的

2792
01:16:55,000 --> 01:16:57,000
但是像 Visual Studio 2015

2793
01:16:57,000 --> 01:16:58,000
它目前还是只有 Windows 版本

2794
01:16:58,000 --> 01:17:01,000
基本上你在 Windows 上开发

2795
01:17:01,000 --> 01:17:03,000
Xcode 的程序

2796
01:17:03,000 --> 01:17:05,000
开发 Object C 的程序

2797
01:17:05,000 --> 01:17:06,000
迄今只有

2798
01:17:06,000 --> 01:17:07,000
之前就

2799
01:17:07,000 --> 01:17:09,000
那个工具叫什么

2800
01:17:09,000 --> 01:17:11,000
X 开头

2801
01:17:11,000 --> 01:17:15,000
应该是叫 Zamarin

2802
01:17:15,000 --> 01:17:17,000
没念错了

2803
01:17:17,000 --> 01:17:18,000
那样一个工具

2804
01:17:18,000 --> 01:17:20,000
然后像一下是你可以在

2805
01:17:20,000 --> 01:17:22,000
Visual Studio 2015 里面做这件事情

2806
01:17:22,000 --> 01:17:25,000
所以我觉得可能这样会无心中

2807
01:17:25,000 --> 01:17:28,000
给很多 iOS 开发者

2808
01:17:28,000 --> 01:17:32,000
wannabe 打开这扇大门

2809
01:17:32,000 --> 01:17:35,000
至少不用买 Mac 了对吧

2810
01:17:35,000 --> 01:17:36,000
对

2811
01:17:36,000 --> 01:17:38,000
而且至少不用忍受 Xcode

2812
01:17:38,000 --> 01:17:38,000
不是有句

2813
01:17:38,000 --> 01:17:39,000
等等

2814
01:17:39,000 --> 01:17:41,000
它那个只能编译

2815
01:17:41,000 --> 01:17:41,000
它能提交吗

2816
01:17:41,000 --> 01:17:42,000
不能提交吧

2817
01:17:42,000 --> 01:17:44,000
你提交到那个 App Store

2818
01:17:44,000 --> 01:17:45,000
还是得通过 Xcode 来做对吧

2819
01:17:45,000 --> 01:17:50,000
如果它能编译出一个 IPA 来就可以

2820
01:17:50,000 --> 01:17:53,000
因为提交 App 这件事情

2821
01:17:53,000 --> 01:17:55,000
不是可以在网页上做的

2822
01:17:55,000 --> 01:17:58,000
我记得是可以

2823
01:17:58,000 --> 01:18:01,000
就是并不一定要在 Xcode 里面验证

2824
01:18:01,000 --> 01:18:03,000
然后通过 Xcode 的那个

2825
01:18:03,000 --> 01:18:05,000
archive 管理器提交

2826
01:18:05,000 --> 01:18:07,000
好

2827
01:18:07,000 --> 01:18:09,000
如果再这样来

2828
01:18:09,000 --> 01:18:10,000
我觉得可能很可能

2829
01:18:10,000 --> 01:18:11,000
这个什么

2830
01:18:11,000 --> 01:18:12,000
苹果的律师就要给

2831
01:18:12,000 --> 01:18:15,000
Visual Studio 寄这个文件了

2832
01:18:15,000 --> 01:18:17,000
或者苹果会耍一些小手段

2833
01:18:17,000 --> 01:18:20,000
让用不了

2834
01:18:20,000 --> 01:18:22,000
让用户只能通过 Xcode 来提交成数

2835
01:18:22,000 --> 01:18:23,000
但总是这样太二了吧

2836
01:18:23,000 --> 01:18:24,000
何必呢

2837
01:18:24,000 --> 01:18:24,000
这不是

2838
01:18:24,000 --> 01:18:30,000
不 这个我觉得还是有一定的意义

2839
01:18:30,000 --> 01:18:30,000
因为这样

2840
01:18:30,000 --> 01:18:33,000
Mac 的销量就会受到很大影响

2841
01:18:33,000 --> 01:18:35,000
因为现在知道很多这种创业团队

2842
01:18:35,000 --> 01:18:38,000
他就纯粹是为了要开发

2843
01:18:38,000 --> 01:18:41,000
Mac 或者是 iPhone 的应用

2844
01:18:41,000 --> 01:18:43,000
他才给开发

2845
01:18:43,000 --> 01:18:45,000
就才招聘使用这个

2846
01:18:45,000 --> 01:18:47,000
对嘛

2847
01:18:47,000 --> 01:18:50,000
如果说这块都完全没必要

2848
01:18:50,000 --> 01:18:51,000
他们就完全可以用 Windows

2849
01:18:51,000 --> 01:18:52,000
就是 Visual Studio 就搞定了

2850
01:18:52,000 --> 01:18:55,000
那就甚至连 Mac 都不需要买了

2851
01:18:55,000 --> 01:18:56,000
你要按照乔布斯那个德行

2852
01:18:56,000 --> 01:18:57,000
肯定是不会东西

2853
01:18:57,000 --> 01:18:58,000
这种事情发生的

2854
01:18:58,000 --> 01:18:58,000
我觉得

2855
01:18:58,000 --> 01:19:00,000
说的也对

2856
01:19:00,000 --> 01:19:03,000
然后当然 Windows 用

2857
01:19:03,000 --> 01:19:04,000
Visual Studio 用后

2858
01:19:04,000 --> 01:19:04,000
还有另外一个选择

2859
01:19:04,000 --> 01:19:09,000
就是用 Cshop 开发跨平台的移动 APP

2860
01:19:09,000 --> 01:19:11,000
就是你用 Cshop 写一个移动 APP

2861
01:19:11,000 --> 01:19:15,000
它可以自动被编译成 iPhone

2862
01:19:15,000 --> 01:19:17,000
Android 和 Windows Phone 的程序

2863
01:19:17,000 --> 01:19:18,000
这个也是

2864
01:19:18,000 --> 01:19:20,000
就等于是你

2865
01:19:20,000 --> 01:19:22,000
如果你不是说

2866
01:19:22,000 --> 01:19:23,000
只希望在 Windows 上

2867
01:19:23,000 --> 01:19:25,000
为 iPhone 开发程序的话

2868
01:19:25,000 --> 01:19:25,000
你甚至可以

2869
01:19:25,000 --> 01:19:26,000
或者说

2870
01:19:26,000 --> 01:19:28,000
也许更多的人会选择

2871
01:19:28,000 --> 01:19:31,000
使用 Cshop 来开发跨平台的程序

2872
01:19:31,000 --> 01:19:33,000
然后让 Visual Studio 去操心

2873
01:19:33,000 --> 01:19:36,000
把 Cshop 转移成

2874
01:19:36,000 --> 01:19:38,000
平台对应的目标源

2875
01:19:38,000 --> 01:19:40,000
这件苦差事

2876
01:19:40,000 --> 01:19:42,000
对

2877
01:19:42,000 --> 01:19:43,000
有一个 session 就是这样的

2878
01:19:43,000 --> 01:19:44,000
当然我没看完

2879
01:19:44,000 --> 01:19:45,000
但是一开头

2880
01:19:45,000 --> 01:19:47,000
基本上演示研究

2881
01:19:47,000 --> 01:19:52,000
试图运行一个 demo

2882
01:19:52,000 --> 01:19:53,000
这个 demo 编译之后

2883
01:19:53,000 --> 01:19:54,000
可以同时跑在

2884
01:19:54,000 --> 01:19:55,000
Windows Phone

2885
01:19:55,000 --> 01:19:56,000
iPhone 和 Android 那

2886
01:19:56,000 --> 01:19:58,000
然后它是用 Cshop 写的

2887
01:19:58,000 --> 01:19:59,000
然后这一次

2888
01:19:59,000 --> 01:20:01,000
Microsoft Build 上面

2889
01:20:01,000 --> 01:20:06,000
还展示了新的 Directive X 12

2890
01:20:06,000 --> 01:20:08,000
这可能也是一个

2891
01:20:08,000 --> 01:20:09,000
比较重要的事情

2892
01:20:09,000 --> 01:20:11,000
就是因为至少

2893
01:20:11,000 --> 01:20:12,000
我不知道你

2894
01:20:12,000 --> 01:20:14,000
至少我一直心心念念

2895
01:20:14,000 --> 01:20:16,000
想要传一台 Windows 机器

2896
01:20:16,000 --> 01:20:17,000
就是因为好多游戏

2897
01:20:17,000 --> 01:20:19,000
是只能在 Windows 上跑的

2898
01:20:19,000 --> 01:20:21,000
然后微软也是

2899
01:20:21,000 --> 01:20:23,000
延续了这个优良传统

2900
01:20:23,000 --> 01:20:26,000
就是一定要向大家展示

2901
01:20:26,000 --> 01:20:27,000
Windows 是一个多么适合

2902
01:20:27,000 --> 01:20:28,000
做游戏的平台

2903
01:20:28,000 --> 01:20:30,000
尤其是 Windows 这一套

2904
01:20:30,000 --> 01:20:33,000
3 D 图形库

2905
01:20:33,000 --> 01:20:35,000
Directive X 12

2906
01:20:35,000 --> 01:20:37,000
然后他们是请到了

2907
01:20:37,000 --> 01:20:40,000
Square 埃尼克斯

2908
01:20:40,000 --> 01:20:43,000
展示了下一代游戏

2909
01:20:43,000 --> 01:20:44,000
那游戏叫什么

2910
01:20:44,000 --> 01:20:44,000
我忘了

2911
01:20:44,000 --> 01:20:46,000
Witch

2912
01:20:46,000 --> 01:20:47,000
应该叫 Witch

2913
01:20:47,000 --> 01:20:48,000
然后他展示了一个

2914
01:20:48,000 --> 01:20:50,000
一开始我以为是一段 CG

2915
01:20:50,000 --> 01:20:54,000
然后他把那个

2916
01:20:54,000 --> 01:20:55,000
反正场景就是一个女人

2917
01:20:55,000 --> 01:20:56,000
趴在地上在哭

2918
01:20:56,000 --> 01:20:59,000
然后我想这有什么看的

2919
01:20:59,000 --> 01:21:01,000
然后播完的时候他说

2920
01:21:01,000 --> 01:21:03,000
大家以为刚才是 CG 吗

2921
01:21:03,000 --> 01:21:04,000
其实刚才是游戏方面

2922
01:21:04,000 --> 01:21:05,000
然后我就惊呆了

2923
01:21:05,000 --> 01:21:06,000
因为那个

2924
01:21:06,000 --> 01:21:09,000
就是实景不是预先渲染好的录像

2925
01:21:09,000 --> 01:21:10,000
就是你看起来

2926
01:21:10,000 --> 01:21:12,000
那个东西跟 CG 一模一样

2927
01:21:12,000 --> 01:21:12,000
但是他

2928
01:21:12,000 --> 01:21:14,000
播到一半的时候

2929
01:21:14,000 --> 01:21:15,000
他说好

2930
01:21:15,000 --> 01:21:17,000
现在我要把它转成 manual 模式

2931
01:21:17,000 --> 01:21:20,000
然后整个场景就停下来了

2932
01:21:20,000 --> 01:21:22,000
然后他开始移动镜头

2933
01:21:22,000 --> 01:21:25,000
我觉得那一参真的是挺震撼的

2934
01:21:25,000 --> 01:21:28,000
就你眼前看到的一个像

2935
01:21:28,000 --> 01:21:29,000
有点像什么的

2936
01:21:29,000 --> 01:21:32,000
有点那个惊喜程度非常接近

2937
01:21:32,000 --> 01:21:36,000
之前的最终幻想的那个电影版

2938
01:21:36,000 --> 01:21:37,000
我不知道你看过没有

2939
01:21:37,000 --> 01:21:39,000
就是非常

2940
01:21:39,000 --> 01:21:39,000
不知道

2941
01:21:39,000 --> 01:21:41,000
因为他要渲染那个长头发

2942
01:21:41,000 --> 01:21:41,000
那个是很困难

2943
01:21:41,000 --> 01:21:42,000
对

2944
01:21:42,000 --> 01:21:45,000
然后他开始转镜头的时候

2945
01:21:45,000 --> 01:21:48,000
你会发现这个里面所有的场景

2946
01:21:48,000 --> 01:21:50,000
都可以实时渲染成

2947
01:21:50,000 --> 01:21:55,000
非常接近于现在的最顶级的 CG 的程度

2948
01:21:55,000 --> 01:21:55,000
然后

2949
01:21:55,000 --> 01:21:59,000
包括每根头发都是用多边形

2950
01:21:59,000 --> 01:22:00,000
每一根头发

2951
01:22:00,000 --> 01:22:03,000
就是这个人物头上可能有几千根头发

2952
01:22:03,000 --> 01:22:05,000
三千反档丝每一根头发

2953
01:22:05,000 --> 01:22:07,000
都是用那个多边形渲染而成

2954
01:22:07,000 --> 01:22:10,000
然后光的效果照在上面非常非常好

2955
01:22:10,000 --> 01:22:12,000
然后他宣称说

2956
01:22:12,000 --> 01:22:15,000
现在效

2957
01:22:15,000 --> 01:22:21,000
performance 应该是 DirectX 11 的 6 到 10 倍

2958
01:22:21,000 --> 01:22:24,000
所以还是相当可观的一个提升

2959
01:22:24,000 --> 01:22:27,000
就其实最主要的原因就是说

2960
01:22:27,000 --> 01:22:29,000
就这么理解

2961
01:22:29,000 --> 01:22:33,000
就是他的这个 overhead 少了

2962
01:22:33,000 --> 01:22:36,000
就更加接近于硬件本身能够提供的性能

2963
01:22:36,000 --> 01:22:36,000
对

2964
01:22:36,000 --> 01:22:39,000
这个其实一个挺重要的

2965
01:22:39,000 --> 01:22:41,000
就几个厂商都在做同样的事情

2966
01:22:41,000 --> 01:22:42,000
首先

2967
01:22:42,000 --> 01:22:43,000
比较早的是

2968
01:22:43,000 --> 01:22:46,000
起码概念上他先做这个

2969
01:22:46,000 --> 01:22:47,000
就是苹果那个叫什么

2970
01:22:47,000 --> 01:22:47,000
Metal

2971
01:22:47,000 --> 01:22:48,000
Metal

2972
01:22:48,000 --> 01:22:51,000
Metal 主要是贴近移动端的

2973
01:22:51,000 --> 01:22:52,000
对

2974
01:22:52,000 --> 01:22:53,000
但他这个只有 Metal

2975
01:22:53,000 --> 01:22:55,000
对 Metal 现在好像只有在 RF 上才有

2976
01:22:55,000 --> 01:22:56,000
然后

2977
01:22:56,000 --> 01:23:00,000
后来是那个 AMD 出了一个叫什么

2978
01:23:00,000 --> 01:23:02,000
叫

2979
01:23:02,000 --> 01:23:04,000
名字我一下想不起来了

2980
01:23:04,000 --> 01:23:06,000
因为但是他们也在做类似的事情

2981
01:23:06,000 --> 01:23:07,000
就是说

2982
01:23:07,000 --> 01:23:11,000
就怎么样能够更好的

2983
01:23:11,000 --> 01:23:12,000
暴露出这个

2984
01:23:12,000 --> 01:23:13,000
这个显卡

2985
01:23:13,000 --> 01:23:15,000
原生的这个硬件的性能

2986
01:23:15,000 --> 01:23:17,000
然后减少中间的这个

2987
01:23:17,000 --> 01:23:18,000
增加的额外的负担

2988
01:23:18,000 --> 01:23:19,000
是 Metal 吧

2989
01:23:19,000 --> 01:23:19,000
还是

2990
01:23:19,000 --> 01:23:21,000
你说

2991
01:23:21,000 --> 01:23:23,000
对那个 MD 那叫 Metal

2992
01:23:23,000 --> 01:23:23,000
对

2993
01:23:23,000 --> 01:23:23,000
对对

2994
01:23:23,000 --> 01:23:24,000
Metal

2995
01:23:24,000 --> 01:23:25,000
就挺像的

2996
01:23:25,000 --> 01:23:25,000
就一个 Metal

2997
01:23:25,000 --> 01:23:26,000
对

2998
01:23:26,000 --> 01:23:27,000
Bman 那种

2999
01:23:27,000 --> 01:23:27,000
对

3000
01:23:27,000 --> 01:23:29,000
对

3001
01:23:29,000 --> 01:23:29,000
没错

3002
01:23:29,000 --> 01:23:32,000
然后但毕竟就微软这个

3003
01:23:32,000 --> 01:23:34,000
他做这个还是有优势的

3004
01:23:34,000 --> 01:23:34,000
因为之前

3005
01:23:34,000 --> 01:23:38,000
有很多游戏上还是走这个什么 DirectX 这条线的

3006
01:23:38,000 --> 01:23:38,000
对

3007
01:23:38,000 --> 01:23:41,000
那么他自己做的瞬息版

3008
01:23:41,000 --> 01:23:42,000
可能还是有很多会常常

3009
01:23:42,000 --> 01:23:43,000
就跟进

3010
01:23:43,000 --> 01:23:44,000
然后这样在发行上会有好处

3011
01:23:44,000 --> 01:23:46,000
但是我不太清楚

3012
01:23:46,000 --> 01:23:50,000
现在这个 DirectX 和这个 OpenGL

3013
01:23:50,000 --> 01:23:52,000
他们之间的这个

3014
01:23:52,000 --> 01:23:55,000
这个有谁比谁领先很明显吗

3015
01:23:55,000 --> 01:23:56,000
有这种样的区别吗

3016
01:23:56,000 --> 01:24:00,000
我看到的说法是如果你不想让自己的脑袋爆掉的话

3017
01:24:00,000 --> 01:24:02,000
就选择 DirectX 比较好

3018
01:24:02,000 --> 01:24:05,000
就从一个开发者的角度来看

3019
01:24:05,000 --> 01:24:07,000
如果你不打算支持多平台

3020
01:24:07,000 --> 01:24:10,000
然后你又想要比较好的文档

3021
01:24:10,000 --> 01:24:12,000
那选择 DirectX 是比较好

3022
01:24:12,000 --> 01:24:16,000
就是开发体验上是 DirectX 这个系列更好

3023
01:24:16,000 --> 01:24:18,000
因为毕竟是单一这个

3024
01:24:18,000 --> 01:24:20,000
比较新嘛

3025
01:24:20,000 --> 01:24:22,000
而且是说历史发布相对较少

3026
01:24:22,000 --> 01:24:23,000
OpenGL 的

3027
01:24:23,000 --> 01:24:25,000
我看他们说的一个主要的问题就是讲

3028
01:24:25,000 --> 01:24:28,000
因为这个历史包袱比较沉重

3029
01:24:28,000 --> 01:24:29,000
各种那种各种那种

3030
01:24:29,000 --> 01:24:33,000
就是几套 API 都是在同一个版本里面存在

3031
01:24:33,000 --> 01:24:34,000
没有说 Deprecate 的这种情况

3032
01:24:34,000 --> 01:24:37,000
那导致就开发者看完就很辛苦啊

3033
01:24:37,000 --> 01:24:41,000
你说明明可以用一个更好的方式实现了

3034
01:24:41,000 --> 01:24:42,000
但是你可能就是没翻到那一页

3035
01:24:42,000 --> 01:24:43,000
因为实在是太长了

3036
01:24:43,000 --> 01:24:46,000
那你看了一个比较原始或者末后的方案来实现

3037
01:24:46,000 --> 01:24:48,000
那可能对性能也不好

3038
01:24:48,000 --> 01:24:51,000
这个你的开发难度也大了

3039
01:24:51,000 --> 01:24:55,000
当然这点好处就是说你可以在多个平台运行嘛

3040
01:24:55,000 --> 01:24:59,000
你希望可以比较就不需要怎么太改

3041
01:24:59,000 --> 01:25:03,000
就可以兼容多个这个这个这个叫什么

3042
01:25:03,000 --> 01:25:05,000
平台的类型也好

3043
01:25:05,000 --> 01:25:06,000
对吧

3044
01:25:06,000 --> 01:25:08,000
游戏就手机端那也是有 OpenGL

3045
01:25:08,000 --> 01:25:10,000
但是那个它是一个什么 ES 啊

3046
01:25:10,000 --> 01:25:14,000
然后这个桌面端也有各种的不同机型

3047
01:25:14,000 --> 01:25:18,000
好像那个什么就是 PS 4 和 Xbox

3048
01:25:18,000 --> 01:25:20,000
好像都是可以支持这种吧

3049
01:25:20,000 --> 01:25:22,000
你是 DXX

3050
01:25:22,000 --> 01:25:24,000
还是 OpenGL

3051
01:25:24,000 --> 01:25:26,000
对没错

3052
01:25:26,000 --> 01:25:29,000
对差不多是这个意思

3053
01:25:29,000 --> 01:25:32,000
对所以就是开发者还是要取舍一下的

3054
01:25:32,000 --> 01:25:35,000
你是要市场呢

3055
01:25:35,000 --> 01:25:36,000
要体验呢

3056
01:25:36,000 --> 01:25:37,000
还是怎么这么的

3057
01:25:37,000 --> 01:25:37,000
没错

3058
01:25:37,000 --> 01:25:41,000
然后当然我印象里面之前有过一个

3059
01:25:41,000 --> 01:25:48,000
就是应该是 N 厂的那个 NVIDIA 厂商的开发者

3060
01:25:48,000 --> 01:25:53,000
在一个论坛上面写了一篇非常长的倒苦水的贴子

3061
01:25:53,000 --> 01:25:58,000
就说那些用 DXX 的人全都不知道怎么样正确的使用 API

3062
01:25:58,000 --> 01:26:06,000
然后有些 blockbuster 级别的那个大作都非常非常的蠢

3063
01:26:06,000 --> 01:26:13,000
就是没有以合适的方式来使用 API 使得游戏的那个性能非常非常的弱

3064
01:26:13,000 --> 01:26:18,000
然后最后有玩家会怪到那个显卡头上说这个显卡的功能

3065
01:26:18,000 --> 01:26:21,000
那个不够强健什么的

3066
01:26:21,000 --> 01:26:22,000
然后他们

3067
01:26:22,000 --> 01:26:22,000
对对对

3068
01:26:22,000 --> 01:26:26,000
他们说他们 literally 每一代的那个 driver

3069
01:26:26,000 --> 01:26:31,000
你如果你好奇过呢

3070
01:26:31,000 --> 01:26:33,000
一个 driver 要下个三五百张

3071
01:26:33,000 --> 01:26:34,000
那是在下什么

3072
01:26:34,000 --> 01:26:36,000
其实里面都是给每个游戏的补丁

3073
01:26:36,000 --> 01:26:40,000
就是检测到说原来你是在运行这个游戏

3074
01:26:40,000 --> 01:26:42,000
好这个游戏里面有这个部分写的非常的蠢

3075
01:26:42,000 --> 01:26:44,000
那他每当运行到这部分的时候

3076
01:26:44,000 --> 01:26:48,000
我们就切换成我们所谓他提供的正确的比较好的

3077
01:26:48,000 --> 01:26:50,000
这个 API 调用了

3078
01:26:50,000 --> 01:26:53,000
然后整个游戏的 performance 立刻就上去了

3079
01:26:53,000 --> 01:26:58,000
这个显卡厂商也是不容易过的

3080
01:26:58,000 --> 01:27:03,000
这也是就说什么像苹果这种

3081
01:27:03,000 --> 01:27:07,000
软硬合一的厂商它就有好处

3082
01:27:07,000 --> 01:27:08,000
对

3083
01:27:08,000 --> 01:27:10,000
那我 Metal 我出了就出了

3084
01:27:10,000 --> 01:27:12,000
然后我开发者我一跟他们一讲

3085
01:27:12,000 --> 01:27:14,000
然后这个 API 很爽

3086
01:27:14,000 --> 01:27:16,000
硬件我都给你搞好

3087
01:27:16,000 --> 01:27:17,000
你再用这个体验就是不错的

3088
01:27:17,000 --> 01:27:19,000
当然可能 Windows 做不到

3089
01:27:19,000 --> 01:27:20,000
微软做不到那么好

3090
01:27:20,000 --> 01:27:21,000
但是在推而求其次

3091
01:27:21,000 --> 01:27:23,000
我起码 API 我可以同意

3092
01:27:23,000 --> 01:27:24,000
然后可以提供比较好的

3093
01:27:24,000 --> 01:27:28,000
至于后面跟硬件底层打交道怎么去折腾

3094
01:27:28,000 --> 01:27:30,000
反正我把这个脏活累活干了

3095
01:27:30,000 --> 01:27:31,000
你们上面爽就好了

3096
01:27:31,000 --> 01:27:36,000
但是前提就是你们得接着用我这个 proprietary 的系统

3097
01:27:36,000 --> 01:27:42,000
对所以如果是两个巨头能够取长补短就好

3098
01:27:42,000 --> 01:27:46,000
但是现实总是不那么美好的

3099
01:27:46,000 --> 01:27:48,000
对所以不指望

3100
01:27:48,000 --> 01:27:50,000
他们这次还发布了

3101
01:27:50,000 --> 01:27:53,000
也不叫发布就算是一个名字

3102
01:27:53,000 --> 01:27:57,000
就是传说中的取代 IE 的浏览器

3103
01:27:57,000 --> 01:27:57,000
这个 project

3104
01:27:57,000 --> 01:27:58,000
斯巴达

3105
01:27:58,000 --> 01:28:02,000
这个斯巴弹

3106
01:28:02,000 --> 01:28:03,000
斯巴达

3107
01:28:03,000 --> 01:28:06,000
斯巴弹就是古希腊的城邦

3108
01:28:06,000 --> 01:28:07,000
斯巴达人

3109
01:28:07,000 --> 01:28:07,000
对

3110
01:28:07,000 --> 01:28:10,000
这个你有看吗

3111
01:28:10,000 --> 01:28:13,000
之前我在艾提公的那边

3112
01:28:13,000 --> 01:28:14,000
大概聊了一下

3113
01:28:14,000 --> 01:28:16,000
但是也是因为没有用到

3114
01:28:16,000 --> 01:28:17,000
也不知道到底是个什么样的

3115
01:28:17,000 --> 01:28:18,000
你说看是什么意思

3116
01:28:18,000 --> 01:28:19,000
看这个

3117
01:28:19,000 --> 01:28:21,000
就是你有

3118
01:28:21,000 --> 01:28:22,000
他应该有那个

3119
01:28:22,000 --> 01:28:24,000
你有用他的 beta 版本吗

3120
01:28:24,000 --> 01:28:24,000
没有

3121
01:28:24,000 --> 01:28:26,000
我只看了一个他的展示 demo

3122
01:28:26,000 --> 01:28:27,000
OK

3123
01:28:27,000 --> 01:28:30,000
我觉得我印象最深的就是 Edge 做得非常漂亮

3124
01:28:30,000 --> 01:28:34,000
漂亮是指哪

3125
01:28:34,000 --> 01:28:35,000
具体指哪些方面

3126
01:28:35,000 --> 01:28:38,000
就是他把整个 UI 的

3127
01:28:38,000 --> 01:28:41,000
不仅仅是扁平化

3128
01:28:41,000 --> 01:28:42,000
而且他把 UI

3129
01:28:42,000 --> 01:28:45,000
去 UI 化

3130
01:28:45,000 --> 01:28:48,000
就是你看不到非常明显的

3131
01:28:48,000 --> 01:28:49,000
比如一个按钮

3132
01:28:49,000 --> 01:28:50,000
然后这个按钮

3133
01:28:50,000 --> 01:28:51,000
基本上就只有一个

3134
01:28:51,000 --> 01:28:54,000
一向速度宽的一个边缘

3135
01:28:54,000 --> 01:28:55,000
然后其他所有的东西都是

3136
01:28:55,000 --> 01:28:57,000
这个网页的预览图

3137
01:28:57,000 --> 01:28:58,000
或者比如说

3138
01:28:58,000 --> 01:28:59,000
你

3139
01:28:59,000 --> 01:29:01,000
他那个浏览器上面

3140
01:29:01,000 --> 01:29:02,000
有一排 tab

3141
01:29:02,000 --> 01:29:05,000
然后你把鼠标挪到每一个 tab 上面

3142
01:29:05,000 --> 01:29:06,000
就会立刻

3143
01:29:06,000 --> 01:29:08,000
下面出现一个 dropdown

3144
01:29:08,000 --> 01:29:10,000
然后这个 dropdown 里面

3145
01:29:10,000 --> 01:29:13,000
就是这个页面目前正在显示的东西的一个小预览图

3146
01:29:13,000 --> 01:29:16,000
或者

3147
01:29:16,000 --> 01:29:19,000
要按一个按钮的话

3148
01:29:19,000 --> 01:29:20,000
这个按钮基本上也是

3149
01:29:20,000 --> 01:29:23,000
大部分地方都是图片

3150
01:29:23,000 --> 01:29:24,000
或者是

3151
01:29:24,000 --> 01:29:25,000
你需要看的东西

3152
01:29:25,000 --> 01:29:27,000
而不是一个按钮本身

3153
01:29:27,000 --> 01:29:29,000
就 Edge to Edge

3154
01:29:29,000 --> 01:29:32,000
我觉得他可能也是跟这个名字这么来的

3155
01:29:32,000 --> 01:29:33,000
就所有的东西都是

3156
01:29:33,000 --> 01:29:37,000
所有东西都是内容

3157
01:29:37,000 --> 01:29:38,000
然后他是这个内容的 Edge

3158
01:29:38,000 --> 01:29:41,000
其实有点跟 Chrome 有点异曲同工之妙

3159
01:29:41,000 --> 01:29:43,000
但他叫的更直白一些

3160
01:29:43,000 --> 01:29:44,000
一个是框

3161
01:29:44,000 --> 01:29:45,000
一个是边

3162
01:29:45,000 --> 01:29:46,000
而且是边框

3163
01:29:46,000 --> 01:29:46,000
对

3164
01:29:46,000 --> 01:29:48,000
他的暗喻就是

3165
01:29:48,000 --> 01:29:50,000
你所要看到的一切内容

3166
01:29:50,000 --> 01:29:53,000
都让你看到

3167
01:29:53,000 --> 01:29:55,000
就是你尽可能多去看到内容

3168
01:29:55,000 --> 01:29:57,000
而我只是作为这个内容

3169
01:29:57,000 --> 01:29:59,000
外面的那一向速度白边而已

3170
01:29:59,000 --> 01:30:02,000
这个对我对他理解

3171
01:30:02,000 --> 01:30:03,000
明明的理解

3172
01:30:03,000 --> 01:30:05,000
可能还没想到这一层

3173
01:30:05,000 --> 01:30:07,000
你把他理解为 Blooding Edge

3174
01:30:07,000 --> 01:30:07,000
是吧

3175
01:30:07,000 --> 01:30:08,000
Blooding Edge

3176
01:30:08,000 --> 01:30:10,000
因为他有那个

3177
01:30:10,000 --> 01:30:12,000
IE 他不是有各种建议模式吗

3178
01:30:12,000 --> 01:30:15,000
然后他最新的模式

3179
01:30:15,000 --> 01:30:16,000
就是叫做 Edge Mode

3180
01:30:16,000 --> 01:30:16,000
OK

3181
01:30:16,000 --> 01:30:19,000
然后他不是承诺说

3182
01:30:19,000 --> 01:30:20,000
这个有染期要一直

3183
01:30:20,000 --> 01:30:21,000
就是

3184
01:30:21,000 --> 01:30:23,000
永远处在时代最前缘

3185
01:30:23,000 --> 01:30:24,000
所以就是 Edge

3186
01:30:24,000 --> 01:30:24,000
没错

3187
01:30:24,000 --> 01:30:25,000
对

3188
01:30:25,000 --> 01:30:26,000
Cutting Edge

3189
01:30:26,000 --> 01:30:26,000
对

3190
01:30:26,000 --> 01:30:28,000
然后我是这么理解

3191
01:30:28,000 --> 01:30:30,000
他这个命名的来历的

3192
01:30:30,000 --> 01:30:31,000
但你说到这么

3193
01:30:31,000 --> 01:30:33,000
确实也是一个挺有

3194
01:30:33,000 --> 01:30:34,000
挺有这个什么

3195
01:30:34,000 --> 01:30:36,000
说服力的一个讲法

3196
01:30:36,000 --> 01:30:40,000
但我觉得可能 Edge 最有

3197
01:30:40,000 --> 01:30:45,000
就对开发者最有意义的一点是

3198
01:30:45,000 --> 01:30:48,000
他不再支持那个 ActiveX 那个空间

3199
01:30:48,000 --> 01:30:52,000
他终于甩掉这个毒瘤吗

3200
01:30:52,000 --> 01:30:53,000
对

3201
01:30:53,000 --> 01:30:56,000
甩掉一个历史重大的包袱

3202
01:30:56,000 --> 01:30:56,000
然后

3203
01:30:56,000 --> 01:30:58,000
就是如果这个流行起来

3204
01:30:58,000 --> 01:30:59,000
我们就可以看到

3205
01:30:59,000 --> 01:31:00,000
国内那些愚蠢的

3206
01:31:00,000 --> 01:31:01,000
往银厂商也好

3207
01:31:01,000 --> 01:31:02,000
这个银行登录上

3208
01:31:02,000 --> 01:31:05,000
要再装一个什么狗屁的空间

3209
01:31:05,000 --> 01:31:05,000
这种事情

3210
01:31:05,000 --> 01:31:06,000
对

3211
01:31:06,000 --> 01:31:07,000
you never know

3212
01:31:07,000 --> 01:31:08,000
我觉得

3213
01:31:08,000 --> 01:31:12,000
政府什么事情都干得出来

3214
01:31:12,000 --> 01:31:13,000
很难说

3215
01:31:13,000 --> 01:31:15,000
也许政府会说

3216
01:31:15,000 --> 01:31:16,000
你不是吃 ActiveX

3217
01:31:16,000 --> 01:31:18,000
不要进中国市场

3218
01:31:18,000 --> 01:31:21,000
你能把它怎么递吗

3219
01:31:21,000 --> 01:31:24,000
搞得跟韩国一样

3220
01:31:24,000 --> 01:31:25,000
就我觉得

3221
01:31:25,000 --> 01:31:28,000
其实你说如果好

3222
01:31:28,000 --> 01:31:29,000
现在 Google 被办

3223
01:31:29,000 --> 01:31:30,000
然后

3224
01:31:30,000 --> 01:31:32,000
苹果是

3225
01:31:32,000 --> 01:31:34,000
反正苹果不在意

3226
01:31:34,000 --> 01:31:35,000
苹果是做硬件的

3227
01:31:35,000 --> 01:31:37,000
那如果 Microsoft 也被办了的话

3228
01:31:37,000 --> 01:31:39,000
中国人用什么

3229
01:31:39,000 --> 01:31:42,000
对

3230
01:31:42,000 --> 01:31:43,000
是一个

3231
01:31:43,000 --> 01:31:45,000
在大推 20 年

3232
01:31:45,000 --> 01:31:46,000
你当然可以说这种情况

3233
01:31:46,000 --> 01:31:48,000
出现了可能性

3234
01:31:48,000 --> 01:31:48,000
微乎其微

3235
01:31:48,000 --> 01:31:49,000
但是

3236
01:31:49,000 --> 01:31:53,000
参征就是在理论上有可能

3237
01:31:53,000 --> 01:31:55,000
说微软骨子这么软的一个公司

3238
01:31:55,000 --> 01:31:55,000
是吧

3239
01:31:55,000 --> 01:31:56,000
对

3240
01:31:56,000 --> 01:32:00,000
Edge 还有一个比较好玩的

3241
01:32:00,000 --> 01:32:00,000
他支持

3242
01:32:00,000 --> 01:32:02,000
Chrome 和 Farfox 那些扩展

3243
01:32:02,000 --> 01:32:04,000
对

3244
01:32:04,000 --> 01:32:04,000
这个也是比较

3245
01:32:04,000 --> 01:32:06,000
很毒的一个招数

3246
01:32:06,000 --> 01:32:06,000
我觉得

3247
01:32:06,000 --> 01:32:10,000
但是我觉得这个做起来不算太难

3248
01:32:10,000 --> 01:32:11,000
因为当然那些扩展也是

3249
01:32:11,000 --> 01:32:12,000
就是有 JavaScript

3250
01:32:12,000 --> 01:32:13,000
加 HML

3251
01:32:13,000 --> 01:32:14,000
HML 5 写的

3252
01:32:14,000 --> 01:32:15,000
一般是这样子

3253
01:32:15,000 --> 01:32:15,000
对

3254
01:32:15,000 --> 01:32:16,000
他这个人

3255
01:32:16,000 --> 01:32:18,000
我觉得可能知识上

3256
01:32:18,000 --> 01:32:19,000
也并不是特别复杂

3257
01:32:19,000 --> 01:32:20,000
但是意义还是蛮大的

3258
01:32:20,000 --> 01:32:21,000
就跟其实

3259
01:32:21,000 --> 01:32:22,000
他们 Build 的这次上面

3260
01:32:22,000 --> 01:32:24,000
我们可能这也不会单独讲

3261
01:32:24,000 --> 01:32:24,000
就是

3262
01:32:24,000 --> 01:32:28,000
他那个 Windows 10 上不是可以

3263
01:32:28,000 --> 01:32:29,000
不是 Windows 10

3264
01:32:29,000 --> 01:32:30,000
就 Windows 10 在

3265
01:32:30,000 --> 01:32:32,000
Windows Phone 上的版本

3266
01:32:32,000 --> 01:32:33,000
他不是可以

3267
01:32:33,000 --> 01:32:34,000
原本的原生

3268
01:32:34,000 --> 01:32:36,000
就是可以兼容运行 Android 应用

3269
01:32:36,000 --> 01:32:38,000
然后也可以兼容运行

3270
01:32:38,000 --> 01:32:39,000
这个 LS 应用

3271
01:32:39,000 --> 01:32:40,000
所以这个有点

3272
01:32:40,000 --> 01:32:42,000
这个异曲同工的意思

3273
01:32:42,000 --> 01:32:43,000
因为很多人

3274
01:32:43,000 --> 01:32:45,000
像说那种 Farfox 的重度用户

3275
01:32:45,000 --> 01:32:46,000
他为什么离不开

3276
01:32:46,000 --> 01:32:48,000
但除了一个精神理念上

3277
01:32:48,000 --> 01:32:49,000
他支持这种开源

3278
01:32:49,000 --> 01:32:51,000
免费的这种独立的流暖器之外

3279
01:32:51,000 --> 01:32:52,000
可能很多一个因素

3280
01:32:52,000 --> 01:32:53,000
就是有很多人装了

3281
01:32:53,000 --> 01:32:54,000
各种各样的小插件

3282
01:32:54,000 --> 01:32:56,000
然后对于他们来说

3283
01:32:56,000 --> 01:32:57,000
这些插件

3284
01:32:57,000 --> 01:32:58,000
不管是他们工作也好

3285
01:32:58,000 --> 01:32:58,000
生活也好

3286
01:32:58,000 --> 01:32:59,000
都是属于那种

3287
01:32:59,000 --> 01:33:00,000
必不可少的工具

3288
01:33:00,000 --> 01:33:03,000
然后你这个

3289
01:33:03,000 --> 01:33:05,000
因为 IE 是没什么插件的

3290
01:33:05,000 --> 01:33:07,000
IE 的插件都是什么

3291
01:33:07,000 --> 01:33:07,000
流氓厂商装的

3292
01:33:07,000 --> 01:33:09,000
流氓软件

3293
01:33:09,000 --> 01:33:11,000
用户自己装的插件

3294
01:33:11,000 --> 01:33:12,000
是相对比较少的

3295
01:33:12,000 --> 01:33:14,000
但是他说他能够

3296
01:33:14,000 --> 01:33:16,000
这次把这个东西集成进来

3297
01:33:16,000 --> 01:33:17,000
能够做一些

3298
01:33:17,000 --> 01:33:19,000
我觉得还是挺不错的

3299
01:33:19,000 --> 01:33:20,000
就是能够争取市场地位的

3300
01:33:20,000 --> 01:33:21,000
一个做法

3301
01:33:21,000 --> 01:33:21,000
对

3302
01:33:21,000 --> 01:33:24,000
当然具体能不能成功

3303
01:33:24,000 --> 01:33:25,000
还是要看细节了

3304
01:33:25,000 --> 01:33:26,000
就是他的这个策略

3305
01:33:26,000 --> 01:33:27,000
最大的问题就是

3306
01:33:27,000 --> 01:33:28,000
你必须把细节做好

3307
01:33:28,000 --> 01:33:29,000
如果你说

3308
01:33:29,000 --> 01:33:32,000
所有这些插件能跑是能跑

3309
01:33:32,000 --> 01:33:34,000
可是要么特别卡

3310
01:33:34,000 --> 01:33:35,000
要么有些功能用不了

3311
01:33:35,000 --> 01:33:37,000
那我觉得还是

3312
01:33:37,000 --> 01:33:41,000
还是会迫使很多人说

3313
01:33:41,000 --> 01:33:41,000
哎呦

3314
01:33:41,000 --> 01:33:44,000
我这个东西是 mission critical

3315
01:33:44,000 --> 01:33:46,000
你跑不好的话

3316
01:33:46,000 --> 01:33:46,000
那我宁可不用

3317
01:33:46,000 --> 01:33:47,000
我还是用回去

3318
01:33:47,000 --> 01:33:49,000
反正也不损失什么

3319
01:33:49,000 --> 01:33:49,000
不是

3320
01:33:49,000 --> 01:33:50,000
就

3321
01:33:50,000 --> 01:33:52,000
然后反过来

3322
01:33:52,000 --> 01:33:53,000
在 Windows 上面跑

3323
01:33:53,000 --> 01:33:55,000
那个 iPhone 和 Android 的应用

3324
01:33:55,000 --> 01:33:56,000
其实也是这样

3325
01:33:56,000 --> 01:33:57,000
如果说

3326
01:33:57,000 --> 01:33:59,000
你这个应用能在 Windows 上面跑

3327
01:33:59,000 --> 01:34:00,000
但是用起来

3328
01:34:00,000 --> 01:34:00,000
怎么用

3329
01:34:00,000 --> 01:34:01,000
怎么用

3330
01:34:01,000 --> 01:34:01,000
怎么用

3331
01:34:01,000 --> 01:34:02,000
怎么觉得别扭

3332
01:34:02,000 --> 01:34:05,000
我觉得这还是一个很大的问题

3333
01:34:05,000 --> 01:34:07,000
我觉得可能还是

3334
01:34:07,000 --> 01:34:09,000
我觉得这个问题

3335
01:34:09,000 --> 01:34:11,000
可能比在 Windows 的

3336
01:34:11,000 --> 01:34:11,000
而在 Windows 上面跑

3337
01:34:11,000 --> 01:34:13,000
Android 和 iPhone 用

3338
01:34:13,000 --> 01:34:14,000
就要简单得多

3339
01:34:14,000 --> 01:34:15,000
因为那个毕竟上

3340
01:34:15,000 --> 01:34:17,000
你是要做一些非常麻烦的事情

3341
01:34:17,000 --> 01:34:19,000
你要提供建议的 API

3342
01:34:19,000 --> 01:34:20,000
你要考虑说

3343
01:34:20,000 --> 01:34:21,000
万一他用了

3344
01:34:21,000 --> 01:34:23,000
什么平台私有的 API

3345
01:34:23,000 --> 01:34:24,000
或者独特的 API

3346
01:34:24,000 --> 01:34:25,000
你怎么去兼容

3347
01:34:25,000 --> 01:34:26,000
你要去折腾

3348
01:34:26,000 --> 01:34:27,000
还有稳定性

3349
01:34:27,000 --> 01:34:28,000
那些都是很难保证的

3350
01:34:28,000 --> 01:34:30,000
因为你没有这个

3351
01:34:30,000 --> 01:34:31,000
你没有这个

3352
01:34:31,000 --> 01:34:33,000
跑的应用的源代码

3353
01:34:33,000 --> 01:34:35,000
你只有一个二进制的字节码

3354
01:34:35,000 --> 01:34:35,000
或者是像 iOS

3355
01:34:35,000 --> 01:34:37,000
你甚至连那个字节码都没有

3356
01:34:37,000 --> 01:34:38,000
你得让它重新编译一个

3357
01:34:38,000 --> 01:34:40,000
但是像这个浏览器里面

3358
01:34:40,000 --> 01:34:42,000
大家都是解析这个 JavaScript

3359
01:34:42,000 --> 01:34:43,000
我觉得是一个

3360
01:34:43,000 --> 01:34:45,000
相对来说

3361
01:34:45,000 --> 01:34:46,000
比较好

3362
01:34:46,000 --> 01:34:49,000
做好的一个技术

3363
01:34:49,000 --> 01:34:50,000
就是说你看现在

3364
01:34:50,000 --> 01:34:52,000
那个 IE 11

3365
01:34:52,000 --> 01:34:54,000
它里面的那些

3366
01:34:54,000 --> 01:34:56,000
JavaScript 的解析的引擎

3367
01:34:56,000 --> 01:34:57,000
就性能也是不错的

3368
01:34:57,000 --> 01:34:59,000
所以现在微解就是做一些

3369
01:34:59,000 --> 01:35:00,000
兼容性的考量

3370
01:35:00,000 --> 01:35:00,000
对

3371
01:35:00,000 --> 01:35:04,000
然后我觉得以微软的这么庞大的团队

3372
01:35:04,000 --> 01:35:07,000
这么庞大的研发实力

3373
01:35:07,000 --> 01:35:09,000
然后只要给他们足够的决心

3374
01:35:09,000 --> 01:35:12,000
按消极节的话来说

3375
01:35:12,000 --> 01:35:14,000
只要 PM 的压力足够大

3376
01:35:14,000 --> 01:35:16,000
因为他们应该还是能够做得出来的

3377
01:35:16,000 --> 01:35:17,000
应该还是还可以

3378
01:35:17,000 --> 01:35:20,000
只要把不能剩的那一批 PM 开掉

3379
01:35:20,000 --> 01:35:20,000
就可以做好

3380
01:35:20,000 --> 01:35:22,000
没错

3381
01:35:22,000 --> 01:35:24,000
就这个我觉得

3382
01:35:24,000 --> 01:35:27,000
我觉得他们还是有一个比较乐观的态度

3383
01:35:27,000 --> 01:35:28,000
对

3384
01:35:28,000 --> 01:35:32,000
当然我能想到的一个问题就是

3385
01:35:32,000 --> 01:35:35,000
至少在

3386
01:35:35,000 --> 01:35:36,000
就某些插件

3387
01:35:36,000 --> 01:35:39,000
Chrome 和 Firefox 都有

3388
01:35:39,000 --> 01:35:41,000
但是有时候有些插件

3389
01:35:41,000 --> 01:35:43,000
在 Firefox 上能做到的事情

3390
01:35:43,000 --> 01:35:44,000
在 Chrome 上是做不到的

3391
01:35:44,000 --> 01:35:50,000
比如说有一个用 Veem 的 keyburning 来操作浏览器的插件

3392
01:35:50,000 --> 01:35:54,000
我记得他说他在 Firefox 上面能够做到一些事情

3393
01:35:54,000 --> 01:35:56,000
在 Chrome 上做不到的原因是

3394
01:35:56,000 --> 01:36:00,000
Chrome 的沙盒限制更强一点

3395
01:36:00,000 --> 01:36:01,000
严格

3396
01:36:01,000 --> 01:36:02,000
对

3397
01:36:02,000 --> 01:36:06,000
而且 Chrome 没有把浏览器本身的一些操作

3398
01:36:06,000 --> 01:36:08,000
暴露给 JavaScript API

3399
01:36:08,000 --> 01:36:10,000
就是你可以操作页面上的内容

3400
01:36:10,000 --> 01:36:12,000
你可以去访问页面上的内容

3401
01:36:12,000 --> 01:36:14,000
但是不能防御浏览器本身的一些功能

3402
01:36:14,000 --> 01:36:17,000
比如说关密或者是切换 type 之类的

3403
01:36:17,000 --> 01:36:18,000
对

3404
01:36:18,000 --> 01:36:20,000
但他那个也不行

3405
01:36:20,000 --> 01:36:22,000
因为他那个不是他那个是多进程模型

3406
01:36:22,000 --> 01:36:23,000
对

3407
01:36:23,000 --> 01:36:27,000
然后他那个浏览器的主控进程和页面的那个进程是

3408
01:36:27,000 --> 01:36:31,000
就是和那个包括连那个扩展的进程都是完全独立的

3409
01:36:31,000 --> 01:36:34,000
这样的话应该是没有权限解决这个问题

3410
01:36:34,000 --> 01:36:36,000
但可能想一想技术方法应该也有

3411
01:36:36,000 --> 01:36:38,000
但是不一定马上就能做出来

3412
01:36:38,000 --> 01:36:39,000
甚至都不在路线图上

3413
01:36:39,000 --> 01:36:40,000
对

3414
01:36:40,000 --> 01:36:40,000
这个就比较惨

3415
01:36:40,000 --> 01:36:40,000
对

3416
01:36:40,000 --> 01:36:43,000
所以不在

3417
01:36:43,000 --> 01:36:45,000
也发现现在那个东西也没正式发布

3418
01:36:45,000 --> 01:36:47,000
也不太清楚到底是一个什么样的状况

3419
01:36:47,000 --> 01:36:49,000
大家如果有兴趣可以去装个

3420
01:36:49,000 --> 01:36:51,000
他有一个所谓的什么 rings

3421
01:36:51,000 --> 01:36:52,000
各种各样的圈圈

3422
01:36:52,000 --> 01:36:54,000
就是什么

3423
01:36:54,000 --> 01:36:55,000
什么 early adopter ring

3424
01:36:55,000 --> 01:36:56,000
这种乱七八糟的

3425
01:36:56,000 --> 01:36:59,000
如果你有兴趣去申请教一些什么早期的那种

3426
01:36:59,000 --> 01:37:00,000
发布的环

3427
01:37:00,000 --> 01:37:01,000
发布的圈圈

3428
01:37:01,000 --> 01:37:05,000
你可以拿到他们最新的 build 出来的版本

3429
01:37:05,000 --> 01:37:06,000
然后可以装上去试一下

3430
01:37:06,000 --> 01:37:09,000
反正也是真当小白鼠

3431
01:37:09,000 --> 01:37:14,000
哎呀说的是这个传一台 Windows 机器这件事情应该提上日程

3432
01:37:14,000 --> 01:37:17,000
Hololens 反正

3433
01:37:17,000 --> 01:37:20,000
其实从概念和产品来讲

3434
01:37:20,000 --> 01:37:25,000
跟这次就 build 上面的演示和上一次差不太多

3435
01:37:25,000 --> 01:37:29,000
但这次我感觉完成度要高一些

3436
01:37:29,000 --> 01:37:31,000
就是这个 demo 的完成度要高

3437
01:37:31,000 --> 01:37:31,000
对

3438
01:37:31,000 --> 01:37:33,000
这个事情毕竟还是没有碰到产品

3439
01:37:33,000 --> 01:37:34,000
没错

3440
01:37:34,000 --> 01:37:35,000
所以还行

3441
01:37:35,000 --> 01:37:37,000
然后他们事后去又去试了一下

3442
01:37:37,000 --> 01:37:40,000
发现还是跟上一代上一次发布的时候

3443
01:37:40,000 --> 01:37:42,000
他们也是找了一对媒体的人去试

3444
01:37:42,000 --> 01:37:45,000
这次他们等于是让开发者去试了

3445
01:37:45,000 --> 01:37:49,000
感觉看了一圈评论下来的感觉就是说

3446
01:37:49,000 --> 01:37:52,000
还是有比较多问题的

3447
01:37:52,000 --> 01:37:53,000
但是还是有进步

3448
01:37:53,000 --> 01:37:55,000
起码什么微型化

3449
01:37:55,000 --> 01:37:56,000
这个但是做到了

3450
01:37:56,000 --> 01:37:57,000
他们现在是不需要插任何线

3451
01:37:57,000 --> 01:37:59,000
就头上 dynamic 一头东西就可以直接用了

3452
01:37:59,000 --> 01:38:01,000
这个还是不错的

3453
01:38:01,000 --> 01:38:02,000
这比那个什么 Oculus Rift

3454
01:38:02,000 --> 01:38:05,000
那些要接个什么线到台式机上还是要好很多的

3455
01:38:05,000 --> 01:38:09,000
但其他的还要有些也有恶化的情况

3456
01:38:09,000 --> 01:38:11,000
比如说说到那个可视角变窄了

3457
01:38:11,000 --> 01:38:16,000
也是根据要考虑什么计算能力和电力供应

3458
01:38:16,000 --> 01:38:22,000
这种限制的情况下做出的一个什么不得不选的一个 trade off

3459
01:38:22,000 --> 01:38:26,000
但是这东西怎么说

3460
01:38:26,000 --> 01:38:27,000
没有看到是很难去评价他的

3461
01:38:27,000 --> 01:38:30,000
而且我们现在外面看到的

3462
01:38:30,000 --> 01:38:34,000
他那个展示觉得挺惊艳的

3463
01:38:34,000 --> 01:38:35,000
但其实戴起来怎么样回事

3464
01:38:35,000 --> 01:38:37,000
还是得戴了才知道

3465
01:38:37,000 --> 01:38:41,000
可能我觉得并没有他展示的那么好

3466
01:38:41,000 --> 01:38:43,000
这是什么微软的一贯的毛病

3467
01:38:43,000 --> 01:38:47,000
就是饼化的看起来比吃起来好

3468
01:38:47,000 --> 01:38:49,000
这个就是一个挺大的问题

3469
01:38:49,000 --> 01:38:50,000
这怎么说呢

3470
01:38:50,000 --> 01:38:54,000
就会导致一个 over promise under deliver

3471
01:38:54,000 --> 01:38:56,000
就是承诺过多舌线太少

3472
01:38:56,000 --> 01:38:59,000
这个到时候会有落差

3473
01:38:59,000 --> 01:39:00,000
用头拿到的时候会有落差

3474
01:39:00,000 --> 01:39:03,000
所以我觉得很好的一个方式

3475
01:39:03,000 --> 01:39:06,000
还是说把这个 demo 的

3476
01:39:06,000 --> 01:39:12,000
你还不能够达到的那些东西

3477
01:39:12,000 --> 01:39:13,000
是要收敛一点

3478
01:39:13,000 --> 01:39:17,000
就是说不要把这个饼化得太美好

3479
01:39:17,000 --> 01:39:19,000
而实际上你可能做不出那么好吃的饼

3480
01:39:19,000 --> 01:39:20,000
这个就比较

3481
01:39:20,000 --> 01:39:21,000
这是一个比较考验

3482
01:39:21,000 --> 01:39:22,000
对

3483
01:39:22,000 --> 01:39:25,000
团队的就是什么

3484
01:39:25,000 --> 01:39:26,000
克制力的时候了

3485
01:39:26,000 --> 01:39:28,000
但是你知道了

3486
01:39:28,000 --> 01:39:30,000
微软从来不是一个有克制的公司

3487
01:39:30,000 --> 01:39:30,000
所以

3488
01:39:30,000 --> 01:39:32,000
他们需要引入一个新的 CEO

3489
01:39:32,000 --> 01:39:37,000
叫 chief user expectation officer

3490
01:39:37,000 --> 01:39:42,000
就是专门来 manage 这个 customer expectation

3491
01:39:42,000 --> 01:39:45,000
该保密的保密

3492
01:39:45,000 --> 01:39:47,000
该 hold 住的 hold 住

3493
01:39:47,000 --> 01:39:47,000
对

3494
01:39:47,000 --> 01:39:49,000
不过来看你怎么说

3495
01:39:49,000 --> 01:39:50,000
可能他们现在也是说

3496
01:39:50,000 --> 01:39:52,000
这个 expectation 已经

3497
01:39:52,000 --> 01:39:54,000
就可能对我们来说

3498
01:39:54,000 --> 01:39:56,000
很多人都已经不指望他什么了

3499
01:39:56,000 --> 01:39:57,000
对吧

3500
01:39:57,000 --> 01:39:59,000
所以也说不定

3501
01:39:59,000 --> 01:40:01,000
他说就是要达到这个效果

3502
01:40:01,000 --> 01:40:03,000
又是要让你对他多指望一点

3503
01:40:03,000 --> 01:40:03,000
对吧

3504
01:40:03,000 --> 01:40:06,000
这个也说不准他这么想

3505
01:40:06,000 --> 01:40:08,000
但是我目前为止还是

3506
01:40:08,000 --> 01:40:11,000
就之前在安定功能也讲过这个说法

3507
01:40:11,000 --> 01:40:12,000
就是说

3508
01:40:12,000 --> 01:40:15,000
不错的产品

3509
01:40:15,000 --> 01:40:18,000
不错的 idea

3510
01:40:18,000 --> 01:40:20,000
实现还是有点担忧的

3511
01:40:20,000 --> 01:40:22,000
问你个问题

3512
01:40:22,000 --> 01:40:25,000
如果 HoloLens 和 Oculus

3513
01:40:25,000 --> 01:40:30,000
Rift 摆在你面前你会选哪一个

3514
01:40:30,000 --> 01:40:31,000
只能选一个的话

3515
01:40:31,000 --> 01:40:34,000
只能选一个

3516
01:40:34,000 --> 01:40:34,000
哎呀

3517
01:40:34,000 --> 01:40:36,000
这个还蛮难的

3518
01:40:36,000 --> 01:40:37,000
很难吗

3519
01:40:37,000 --> 01:40:40,000
一个是虚拟现实

3520
01:40:40,000 --> 01:40:41,000
一个是增强现实

3521
01:40:41,000 --> 01:40:46,000
我觉得从这个酷和好玩

3522
01:40:46,000 --> 01:40:47,000
这个点出发的话

3523
01:40:47,000 --> 01:40:49,000
可能还是 HoloLens 会比较好

3524
01:40:49,000 --> 01:40:50,000
而且其实从

3525
01:40:50,000 --> 01:40:52,000
就现在从他们 HoloLens

3526
01:40:52,000 --> 01:40:55,000
这个二次发布的展示的效果

3527
01:40:55,000 --> 01:40:57,000
和这个机器的情况

3528
01:40:57,000 --> 01:40:59,000
相比于 Oculus Rift

3529
01:40:59,000 --> 01:41:02,000
在他展示的那个什么三代工程机

3530
01:41:02,000 --> 01:41:03,000
的情况来讲

3531
01:41:03,000 --> 01:41:05,000
我觉得吧

3532
01:41:05,000 --> 01:41:07,000
还是 HoloLens 的好一点

3533
01:41:07,000 --> 01:41:08,000
对

3534
01:41:08,000 --> 01:41:08,000
OK

3535
01:41:08,000 --> 01:41:10,000
有意思

3536
01:41:10,000 --> 01:41:11,000
你会怎么选

3537
01:41:11,000 --> 01:41:13,000
我应该会选 Oculus Rift

3538
01:41:13,000 --> 01:41:15,000
我觉得

3539
01:41:15,000 --> 01:41:15,000
为什么

3540
01:41:15,000 --> 01:41:17,000
因为可以打游戏

3541
01:41:17,000 --> 01:41:20,000
非常

3542
01:41:20,000 --> 01:41:21,000
这个 VR

3543
01:41:21,000 --> 01:41:21,000
那个什么

3544
01:41:21,000 --> 01:41:23,000
HoloLens 不也可以玩游戏吗

3545
01:41:23,000 --> 01:41:25,000
他不是展示的那个叫什么

3546
01:41:25,000 --> 01:41:25,000
Minecraft

3547
01:41:25,000 --> 01:41:26,000
对

3548
01:41:26,000 --> 01:41:29,000
问题在于 Minecraft 游戏的

3549
01:41:29,000 --> 01:41:32,000
它不是一个

3550
01:41:32,000 --> 01:41:34,000
或者说它故意把 Minecraft

3551
01:41:34,000 --> 01:41:37,000
改变成了一个

3552
01:41:37,000 --> 01:41:41,000
可以叠加在现实世界层面上的游戏

3553
01:41:41,000 --> 01:41:42,000
其实我就是

3554
01:41:42,000 --> 01:41:45,000
我仔细的想过这个问题

3555
01:41:45,000 --> 01:41:49,000
就是我在想说

3556
01:41:49,000 --> 01:41:54,000
两种技术分别适用于什么样的游戏场景

3557
01:41:54,000 --> 01:41:56,000
假如说你要打 Doom

3558
01:41:56,000 --> 01:41:59,000
或者 Quake 这样

3559
01:41:59,000 --> 01:42:02,000
一个完全需模拟出来

3560
01:42:02,000 --> 01:42:05,000
异界环境的游戏

3561
01:42:05,000 --> 01:42:07,000
那我毫无疑问是

3562
01:42:07,000 --> 01:42:10,000
Oculus Rift 会比较好

3563
01:42:10,000 --> 01:42:11,000
因为你可以

3564
01:42:11,000 --> 01:42:14,000
它会帮你把现实隔绝起来

3565
01:42:14,000 --> 01:42:14,000
对吧

3566
01:42:14,000 --> 01:42:16,000
你所要做到的就是

3567
01:42:16,000 --> 01:42:19,000
进入一个隔绝现实的环境里面

3568
01:42:19,000 --> 01:42:21,000
去杀一些根本不存在的怪物

3569
01:42:21,000 --> 01:42:23,000
或者是

3570
01:42:23,000 --> 01:42:26,000
比如说你要做一个打猎游戏

3571
01:42:26,000 --> 01:42:27,000
你显然会希望自己

3572
01:42:27,000 --> 01:42:30,000
能够认为自己身处在一个丛林里面

3573
01:42:30,000 --> 01:42:31,000
而不是你自己家里

3574
01:42:31,000 --> 01:42:32,000
对吧

3575
01:42:32,000 --> 01:42:33,000
但是

3576
01:42:33,000 --> 01:42:35,000
反过来

3577
01:42:35,000 --> 01:42:39,000
像 Holland 这样的 AR 技术

3578
01:42:39,000 --> 01:42:42,000
那就比较适合于做一些

3579
01:42:42,000 --> 01:42:44,000
比如桌游

3580
01:42:44,000 --> 01:42:46,000
我曾经试掌过

3581
01:42:46,000 --> 01:42:48,000
就比如说我和女朋友一人带一个

3582
01:42:48,000 --> 01:42:51,000
然后再盯着

3583
01:42:51,000 --> 01:42:52,000
就是如是传说

3584
01:42:52,000 --> 01:42:53,000
点点来说就不用

3585
01:42:53,000 --> 01:42:54,000
对

3586
01:42:54,000 --> 01:42:56,000
盯着面前的桌子就可以打大风了

3587
01:42:56,000 --> 01:42:56,000
对吧

3588
01:42:56,000 --> 01:42:59,000
就可以看到什么孙小美跑了跑去

3589
01:42:59,000 --> 01:43:01,000
然后但其实上桌子什么也没有

3590
01:43:01,000 --> 01:43:01,000
这不是很

3591
01:43:01,000 --> 01:43:02,000
这不是很

3592
01:43:02,000 --> 01:43:03,000
但是有点奇怪

3593
01:43:03,000 --> 01:43:04,000
但难道不是很好吗

3594
01:43:04,000 --> 01:43:06,000
是比较适合这样的东西

3595
01:43:06,000 --> 01:43:10,000
我就是想那个卢诗传说就可以直接把那个

3596
01:43:10,000 --> 01:43:11,000
对没错

3597
01:43:11,000 --> 01:43:14,000
卢诗传说就直接显示在你面前

3598
01:43:14,000 --> 01:43:19,000
或者最合适的其实是战船

3599
01:43:19,000 --> 01:43:21,000
就是 Waheman 这个系列

3600
01:43:21,000 --> 01:43:25,000
你不是可以给自己的模型

3601
01:43:25,000 --> 01:43:27,000
自己沾模型

3602
01:43:27,000 --> 01:43:28,000
然后给自己的模型涂色

3603
01:43:28,000 --> 01:43:31,000
然后用什么两角器

3604
01:43:31,000 --> 01:43:31,000
皮尺

3605
01:43:31,000 --> 01:43:37,000
来量那个两个模型之间的距离

3606
01:43:37,000 --> 01:43:38,000
然后制骰子

3607
01:43:38,000 --> 01:43:40,000
然后把你的战车推进

3608
01:43:40,000 --> 01:43:42,000
然后说我的战车把你的兽人轰掉了

3609
01:43:42,000 --> 01:43:44,000
然后把你的兽人车桌子拿出去

3610
01:43:44,000 --> 01:43:46,000
所有这些桌游

3611
01:43:46,000 --> 01:43:48,000
其实全都可以用 HoloLess 来实现

3612
01:43:48,000 --> 01:43:50,000
就效果应该会非常好玩

3613
01:43:50,000 --> 01:43:50,000
我觉得

3614
01:43:50,000 --> 01:43:52,000
但

3615
01:43:52,000 --> 01:43:55,000
但如果要我选的话

3616
01:43:55,000 --> 01:43:56,000
我觉得我还是会选

3617
01:43:56,000 --> 01:43:58,000
会希望玩那种

3618
01:43:58,000 --> 01:44:01,000
就是比较强调进入式体验的

3619
01:44:01,000 --> 01:44:01,000
对

3620
01:44:01,000 --> 01:44:08,000
就让你忘掉从那个真实世界的种种限制

3621
01:44:08,000 --> 01:44:09,000
直接进入这种虚拟世界的

3622
01:44:09,000 --> 01:44:12,000
完全不同的一个环境

3623
01:44:12,000 --> 01:44:13,000
就是去逃离

3624
01:44:13,000 --> 01:44:14,000
对

3625
01:44:14,000 --> 01:44:15,000
我觉得我可能还是会选

3626
01:44:15,000 --> 01:44:18,000
OK

3627
01:44:18,000 --> 01:44:19,000
这挺有意思

3628
01:44:19,000 --> 01:44:19,000
对

3629
01:44:19,000 --> 01:44:22,000
当然理想情况还是全主机制吧

3630
01:44:22,000 --> 01:44:27,000
反正我觉得 HoloLess 还是一个比较 promising

3631
01:44:27,000 --> 01:44:28,000
但是不像

3632
01:44:28,000 --> 01:44:30,000
对我来说

3633
01:44:30,000 --> 01:44:31,000
不像 Oculus Rift 那样

3634
01:44:31,000 --> 01:44:33,000
会想要在第一出的

3635
01:44:33,000 --> 01:44:35,000
上市的第一时间就去买的一个东西

3636
01:44:35,000 --> 01:44:38,000
Oculus Rift 应该是明年年初就要上市的

3637
01:44:38,000 --> 01:44:39,000
对

3638
01:44:39,000 --> 01:44:41,000
刚才你说这个是什么

3639
01:44:41,000 --> 01:44:41,000
好消息

3640
01:44:41,000 --> 01:44:42,000
好消息

3641
01:44:42,000 --> 01:44:45,000
你这个是有确定的时间购买的

3642
01:44:45,000 --> 01:44:45,000
对

3643
01:44:45,000 --> 01:44:46,000
那个什么

3644
01:44:46,000 --> 01:44:47,000
HoloLens 还不知道

3645
01:44:47,000 --> 01:44:49,000
猴年马月什么时候有能上

3646
01:44:49,000 --> 01:44:52,000
至少明年 Q 1 应该就可以带上

3647
01:44:52,000 --> 01:44:53,000
Oculus Rift

3648
01:44:53,000 --> 01:44:57,000
你遇着 3 月 31 号

3649
01:44:57,000 --> 01:44:59,000
至少有 Oculus Rift

3650
01:44:59,000 --> 01:45:01,000
可以买了至少

3651
01:45:01,000 --> 01:45:01,000
对

3652
01:45:01,000 --> 01:45:03,000
然后我觉得现在最大的一个问题

3653
01:45:03,000 --> 01:45:04,000
就是

3654
01:45:04,000 --> 01:45:09,000
PlayStation 或者 Xbox One 之类的东西

3655
01:45:09,000 --> 01:45:12,000
应该尽快提供 HoloLens 的支持

3656
01:45:12,000 --> 01:45:12,000
不

3657
01:45:12,000 --> 01:45:13,000
HoloLens

3658
01:45:13,000 --> 01:45:15,000
Oculus Rift 的支持

3659
01:45:15,000 --> 01:45:16,000
不然

3660
01:45:16,000 --> 01:45:21,000
我觉得太多游戏值得被移植到虚拟现实里面

3661
01:45:21,000 --> 01:45:24,000
这里就有问题

3662
01:45:24,000 --> 01:45:25,000
因为它

3663
01:45:25,000 --> 01:45:26,000
那个 HoloLens

3664
01:45:26,000 --> 01:45:28,000
它毕竟它只是一个做这个设备场

3665
01:45:28,000 --> 01:45:31,000
它并没有任何游戏的渠道也好

3666
01:45:31,000 --> 01:45:32,000
它只能去找别人合作

3667
01:45:32,000 --> 01:45:33,000
其实这点上

3668
01:45:33,000 --> 01:45:34,000
我觉得微软那个

3669
01:45:34,000 --> 01:45:36,000
你刚才说是 HoloLens 吗

3670
01:45:36,000 --> 01:45:37,000
Oculus Rift

3671
01:45:37,000 --> 01:45:39,000
OK

3672
01:45:39,000 --> 01:45:39,000
对

3673
01:45:39,000 --> 01:45:40,000
我觉得这点上

3674
01:45:40,000 --> 01:45:41,000
微软可能反而有优势

3675
01:45:41,000 --> 01:45:43,000
因为第一个

3676
01:45:43,000 --> 01:45:44,000
它等于是除了

3677
01:45:44,000 --> 01:45:45,000
甚至是

3678
01:45:45,000 --> 01:45:48,000
已经是全球最大的游戏的发现商

3679
01:45:48,000 --> 01:45:49,000
它应该比索尼大

3680
01:45:49,000 --> 01:45:50,000
因为有 Xbox 之后

3681
01:45:50,000 --> 01:45:53,000
微软的游戏比索尼大吗

3682
01:45:53,000 --> 01:45:56,000
我理解是这样子

3683
01:45:56,000 --> 01:45:56,000
不是吗

3684
01:45:56,000 --> 01:45:57,000
那不是吧

3685
01:45:57,000 --> 01:45:59,000
如果不是

3686
01:45:59,000 --> 01:46:00,000
它们也是属于

3687
01:46:00,000 --> 01:46:02,000
就是可能一二的这样的区别

3688
01:46:02,000 --> 01:46:02,000
对那肯定

3689
01:46:02,000 --> 01:46:04,000
就是我想插播一个小新闻

3690
01:46:04,000 --> 01:46:09,000
微软前一阵子推出了

3691
01:46:09,000 --> 01:46:11,000
帝国时代 2

3692
01:46:11,000 --> 01:46:12,000
你们有听错

3693
01:46:12,000 --> 01:46:14,000
帝国时代 2 的 HD 版本

3694
01:46:14,000 --> 01:46:18,000
2015 年推出了帝国时代 2 的 HD 版本

3695
01:46:18,000 --> 01:46:19,000
简直是良心企业

3696
01:46:19,000 --> 01:46:21,000
这玩意儿已经多少年了

3697
01:46:21,000 --> 01:46:22,000
这什么情况

3698
01:46:22,000 --> 01:46:22,000
为什么

3699
01:46:22,000 --> 01:46:26,000
就提供了一个可以支持高分辨率

3700
01:46:26,000 --> 01:46:28,000
支持多显示器

3701
01:46:28,000 --> 01:46:33,000
支持 Steam 平台联网内战的

3702
01:46:33,000 --> 01:46:34,000
OK

3703
01:46:34,000 --> 01:46:36,000
帝国时代 2

3704
01:46:36,000 --> 01:46:38,000
你要不要买一份咱俩对战

3705
01:46:38,000 --> 01:46:40,000
可以啊

3706
01:46:40,000 --> 01:46:41,000
可以啊

3707
01:46:41,000 --> 01:46:42,000
我回头去研究一下怎么一回事

3708
01:46:42,000 --> 01:46:43,000
对

3709
01:46:43,000 --> 01:46:44,000
因为帝国时代

3710
01:46:44,000 --> 01:46:44,000
应该是

3711
01:46:44,000 --> 01:46:45,000
帝国时代 2 就是我们当时

3712
01:46:45,000 --> 01:46:48,000
那个九几年玩的最火的那块

3713
01:46:48,000 --> 01:46:48,000
对啊

3714
01:46:48,000 --> 01:46:50,000
这个东西已经十几年了吧

3715
01:46:50,000 --> 01:46:53,000
就居然今年又出了一个新版本

3716
01:46:53,000 --> 01:46:55,000
我觉得 Microsoft 也算是良心期

3717
01:46:55,000 --> 01:46:55,000
质量

3718
01:46:55,000 --> 01:46:59,000
对必须是良心企业

3719
01:46:59,000 --> 01:47:00,000
刚才说到刚才那个

3720
01:47:00,000 --> 01:47:02,000
就是我感觉就是微软在这方面上

3721
01:47:02,000 --> 01:47:04,000
其实有优势的

3722
01:47:04,000 --> 01:47:05,000
它可以说

3723
01:47:05,000 --> 01:47:06,000
因为还有主机嘛

3724
01:47:06,000 --> 01:47:08,000
然后它也有这个相应的

3725
01:47:08,000 --> 01:47:09,000
这个发行渠道

3726
01:47:09,000 --> 01:47:10,000
然后它会有这个

3727
01:47:10,000 --> 01:47:12,000
这个就开发团队

3728
01:47:12,000 --> 01:47:13,000
开发这种

3729
01:47:13,000 --> 01:47:16,000
就是就做游戏的人的这种资源

3730
01:47:16,000 --> 01:47:17,000
它会去笼络嘛

3731
01:47:17,000 --> 01:47:18,000
它可以说

3732
01:47:18,000 --> 01:47:19,000
我们当时开发一款

3733
01:47:19,000 --> 01:47:22,000
给这个 HoloLens 玩的

3734
01:47:22,000 --> 01:47:25,000
然后是跑在这个 Xbox 上面的这种游戏

3735
01:47:25,000 --> 01:47:27,000
因为它其实就是要打通平台之后

3736
01:47:27,000 --> 01:47:28,000
它不是现在是讲

3737
01:47:28,000 --> 01:47:30,000
Windows 10 是一个什么 Universal App

3738
01:47:30,000 --> 01:47:32,000
Universal App 什么意思

3739
01:47:32,000 --> 01:47:32,000
就是可以

3740
01:47:32,000 --> 01:47:36,000
可以跨它能够覆盖到所有的平台

3741
01:47:36,000 --> 01:47:37,000
不是说它还要追求一个

3742
01:47:37,000 --> 01:47:38,000
就是说

3743
01:47:38,000 --> 01:47:41,000
简单说就可以互玩

3744
01:47:41,000 --> 01:47:44,000
我可以去用 HoloLens 去接到

3745
01:47:44,000 --> 01:47:47,000
什么可能跟 Xbox 配合

3746
01:47:47,000 --> 01:47:48,000
去玩这么一下游戏

3747
01:47:48,000 --> 01:47:49,000
我觉得这个的

3748
01:47:49,000 --> 01:47:50,000
如果它真的做成了

3749
01:47:50,000 --> 01:47:52,000
我觉得它潜力是要比

3750
01:47:52,000 --> 01:47:56,000
像 Octus Rift 这样去和其他厂商去谈

3751
01:47:56,000 --> 01:47:58,000
合作这种方式

3752
01:47:58,000 --> 01:47:59,000
我觉得是要好得多的

3753
01:47:59,000 --> 01:47:59,000
对

3754
01:47:59,000 --> 01:48:03,000
如果 HoloLens 可以和 Xbox 整合在一起的话

3755
01:48:03,000 --> 01:48:05,000
真的是前途无量的

3756
01:48:05,000 --> 01:48:07,000
其他基本上所有主机都可以去死

3757
01:48:07,000 --> 01:48:09,000
对啊

3758
01:48:09,000 --> 01:48:11,000
就可能会达到那么上次

3759
01:48:11,000 --> 01:48:12,000
当年那个什么

3760
01:48:12,000 --> 01:48:14,000
就一代的魏那种风靡的程度

3761
01:48:14,000 --> 01:48:14,000
对

3762
01:48:14,000 --> 01:48:17,000
甚至可能会超过

3763
01:48:17,000 --> 01:48:17,000
对

3764
01:48:17,000 --> 01:48:18,000
看看价格了

3765
01:48:18,000 --> 01:48:20,000
价格贵了可能也不太行

3766
01:48:20,000 --> 01:48:25,000
然后我们还要想要提及的一件趣事

3767
01:48:25,000 --> 01:48:27,000
就是在这次 Build 上面

3768
01:48:27,000 --> 01:48:29,000
微软员工穿了

3769
01:48:29,000 --> 01:48:32,000
那个一件蓝色的 T-shirt

3770
01:48:32,000 --> 01:48:34,000
然后蓝色 T-shirt 的胸前有

3771
01:48:34,000 --> 01:48:36,000
就是 Windows 图标

3772
01:48:36,000 --> 01:48:38,000
然后这个图标

3773
01:48:38,000 --> 01:48:39,000
你细看的话

3774
01:48:39,000 --> 01:48:42,000
它是由很多细小的零和一组成的

3775
01:48:42,000 --> 01:48:45,000
然后我不知道是谁找出来的

3776
01:48:45,000 --> 01:48:47,000
但是我们就目前理解为

3777
01:48:47,000 --> 01:48:51,000
有好试者试图把零和一

3778
01:48:51,000 --> 01:48:53,000
转换成 Eskima

3779
01:48:53,000 --> 01:48:55,000
然后看看这些是不是有意思

3780
01:48:55,000 --> 01:48:59,000
然后发现真的是有意思的

3781
01:48:59,000 --> 01:49:02,000
就是推特用户叫做 Kevin Goeth

3782
01:49:02,000 --> 01:49:06,000
他把这些零和一都翻译出来了

3783
01:49:06,000 --> 01:49:08,000
然后左上角那一块是

3784
01:49:08,000 --> 01:49:12,000
There are 10 types of people in the world

3785
01:49:12,000 --> 01:49:13,000
应该说

3786
01:49:13,000 --> 01:49:16,000
There are 1 0 types of people in the world

3787
01:49:16,000 --> 01:49:18,000
然后

3788
01:49:18,000 --> 01:49:21,000
右上角那一块是

3789
01:49:21,000 --> 01:49:23,000
Windows 10

3790
01:49:23,000 --> 01:49:26,000
Because 7 8 9

3791
01:49:26,000 --> 01:49:29,000
就是因为七把九吃了

3792
01:49:29,000 --> 01:49:31,000
然后这个 8 和 8 谐音

3793
01:49:31,000 --> 01:49:32,000
所以它写是

3794
01:49:32,000 --> 01:49:34,000
Because 7 8 9

3795
01:49:34,000 --> 01:49:39,000
然后左下角是

3796
01:49:39,000 --> 01:49:42,000
Congrats on being one of the first

3797
01:49:42,000 --> 01:49:44,000
就是欢迎你成为第一个

3798
01:49:44,000 --> 01:49:47,000
Whatever 做什么的人

3799
01:49:47,000 --> 01:49:48,000
解开这个谜的是不是

3800
01:49:48,000 --> 01:49:50,000
然后右下角是

3801
01:49:50,000 --> 01:49:54,000
Windows Insiders helped us develop the future

3802
01:49:54,000 --> 01:49:56,000
对

3803
01:49:56,000 --> 01:49:58,000
我觉得还挺有意思

3804
01:49:58,000 --> 01:49:59,000
有意思

3805
01:49:59,000 --> 01:50:02,000
小插曲

3806
01:50:02,000 --> 01:50:03,000
小趣闻

3807
01:50:03,000 --> 01:50:03,000
对

3808
01:50:03,000 --> 01:50:05,000
然后我觉得

3809
01:50:05,000 --> 01:50:06,000
怎么说呢

3810
01:50:06,000 --> 01:50:09,000
我以前是不看 Bill 的

3811
01:50:09,000 --> 01:50:10,000
你看吧

3812
01:50:10,000 --> 01:50:12,000
就我其实是今年第一次

3813
01:50:12,000 --> 01:50:13,000
我也是今年才看

3814
01:50:13,000 --> 01:50:13,000
Bill 的是一个

3815
01:50:13,000 --> 01:50:16,000
已经连续播了 5 年的这么一个

3816
01:50:16,000 --> 01:50:18,000
一个一个一个

3817
01:50:18,000 --> 01:50:18,000
对

3818
01:50:18,000 --> 01:50:19,000
我也是才意思

3819
01:50:19,000 --> 01:50:20,000
原来还有

3820
01:50:20,000 --> 01:50:21,000
这微软还搞一个

3821
01:50:21,000 --> 01:50:23,000
类似 WWDC 的东西

3822
01:50:23,000 --> 01:50:24,000
很新鲜

3823
01:50:24,000 --> 01:50:24,000
看一下

3824
01:50:24,000 --> 01:50:25,000
对

3825
01:50:25,000 --> 01:50:26,000
然后我去过

3826
01:50:26,000 --> 01:50:30,000
WWDC 是买不到票的

3827
01:50:30,000 --> 01:50:31,000
但是我去过的

3828
01:50:31,000 --> 01:50:32,000
Developer Conference

3829
01:50:32,000 --> 01:50:33,000
是 Google 的那个

3830
01:50:33,000 --> 01:50:35,000
Google Developer Day

3831
01:50:35,000 --> 01:50:36,000
Google I.O.吗

3832
01:50:36,000 --> 01:50:36,000
对

3833
01:50:36,000 --> 01:50:36,000
不是

3834
01:50:36,000 --> 01:50:37,000
Developer Day

3835
01:50:37,000 --> 01:50:37,000
Developer Day

3836
01:50:37,000 --> 01:50:38,000
现在也不办

3837
01:50:38,000 --> 01:50:38,000
OK

3838
01:50:38,000 --> 01:50:40,000
就之前在

3839
01:50:40,000 --> 01:50:41,000
之前 01 年

3840
01:50:41,000 --> 01:50:43,000
10 年

3841
01:50:43,000 --> 01:50:44,000
11 年和 12 年

3842
01:50:44,000 --> 01:50:45,000
我应该都去了

3843
01:50:45,000 --> 01:50:46,000
然后

3844
01:50:46,000 --> 01:50:48,000
我觉得

3845
01:50:48,000 --> 01:50:50,000
这种开发者社会

3846
01:50:50,000 --> 01:50:51,000
Thom How

3847
01:50:51,000 --> 01:50:52,000
已经成为了一种

3848
01:50:52,000 --> 01:50:54,000
Phenomenon

3849
01:50:54,000 --> 01:50:56,000
全球开发者

3850
01:50:56,000 --> 01:50:58,000
乃至于并非开发者的人

3851
01:50:58,000 --> 01:51:00,000
会去关注这样一种

3852
01:51:00,000 --> 01:51:02,000
本来是一群人

3853
01:51:02,000 --> 01:51:02,000
对

3854
01:51:02,000 --> 01:51:04,000
讨论工具的

3855
01:51:04,000 --> 01:51:05,000
这样一个

3856
01:51:05,000 --> 01:51:06,000
Event

3857
01:51:06,000 --> 01:51:07,000
还挺有意思的

3858
01:51:07,000 --> 01:51:08,000
特别是那个 Keynote

3859
01:51:08,000 --> 01:51:10,000
其实它很多时候就

3860
01:51:10,000 --> 01:51:11,000
并不

3861
01:51:11,000 --> 01:51:12,000
单单是面对

3862
01:51:12,000 --> 01:51:14,000
开发者

3863
01:51:14,000 --> 01:51:14,000
对

3864
01:51:14,000 --> 01:51:14,000
对

3865
01:51:14,000 --> 01:51:15,000
但可能更多的

3866
01:51:15,000 --> 01:51:16,000
那个受众

3867
01:51:16,000 --> 01:51:17,000
就 Keynote 的那个

3868
01:51:17,000 --> 01:51:18,000
就主题演讲的受众

3869
01:51:18,000 --> 01:51:19,000
可能是面向一个

3870
01:51:19,000 --> 01:51:20,000
所谓的普罗大众

3871
01:51:20,000 --> 01:51:21,000
就是 General Public

3872
01:51:21,000 --> 01:51:23,000
或者说对技术

3873
01:51:23,000 --> 01:51:24,000
比较关注的

3874
01:51:24,000 --> 01:51:26,000
这么一些人

3875
01:51:26,000 --> 01:51:27,000
并不是说这些人

3876
01:51:27,000 --> 01:51:28,000
一定要是开发者

3877
01:51:28,000 --> 01:51:29,000
没错

3878
01:51:29,000 --> 01:51:31,000
然后我觉得

3879
01:51:31,000 --> 01:51:32,000
Thom How

3880
01:51:32,000 --> 01:51:33,000
也是代表了

3881
01:51:33,000 --> 01:51:35,000
目前这样一个

3882
01:51:35,000 --> 01:51:37,000
工业时代

3883
01:51:37,000 --> 01:51:40,000
我就忘了是哪一个

3884
01:51:40,000 --> 01:51:41,000
社会学家

3885
01:51:41,000 --> 01:51:42,000
说过一段话

3886
01:51:42,000 --> 01:51:42,000
说

3887
01:51:42,000 --> 01:51:44,000
不行

3888
01:51:44,000 --> 01:51:45,000
我之后一定要查出来

3889
01:51:45,000 --> 01:51:46,000
到底谁说

3890
01:51:46,000 --> 01:51:47,000
可能不是社会学家

3891
01:51:47,000 --> 01:51:48,000
反正有人说过说

3892
01:51:48,000 --> 01:51:50,000
工业时代以来

3893
01:51:50,000 --> 01:51:54,000
整个工业对人们的影响

3894
01:51:54,000 --> 01:51:55,000
导致了人们

3895
01:51:55,000 --> 01:51:56,000
对于工业的崇拜

3896
01:51:56,000 --> 01:51:58,000
而这样一种崇拜

3897
01:51:58,000 --> 01:51:59,000
这样一种迷恋

3898
01:51:59,000 --> 01:52:00,000
这样一种

3899
01:52:00,000 --> 01:52:02,000
投身其中的热情

3900
01:52:02,000 --> 01:52:04,000
其实远远超越了

3901
01:52:04,000 --> 01:52:05,000
宗教

3902
01:52:05,000 --> 01:52:07,000
乃至于艺术文学

3903
01:52:07,000 --> 01:52:09,000
所给人们带来的影响

3904
01:52:09,000 --> 01:52:10,000
然后

3905
01:52:10,000 --> 01:52:11,000
就算什么

3906
01:52:11,000 --> 01:52:12,000
拜物教

3907
01:52:12,000 --> 01:52:14,000
它不是拜物教

3908
01:52:14,000 --> 01:52:15,000
就拜工业教

3909
01:52:15,000 --> 01:52:16,000
星辰大海

3910
01:52:16,000 --> 01:52:17,000
工业党

3911
01:52:17,000 --> 01:52:18,000
星辰大海

3912
01:52:18,000 --> 01:52:20,000
就你会觉得

3913
01:52:20,000 --> 01:52:23,000
我们现在处于一种

3914
01:52:23,000 --> 01:52:24,000
这样的

3915
01:52:24,000 --> 01:52:25,000
对于工具的热忱里面

3916
01:52:25,000 --> 01:52:27,000
我们会专门去

3917
01:52:27,000 --> 01:52:29,000
办这样的 podcast

3918
01:52:29,000 --> 01:52:30,000
来讨论工具

3919
01:52:30,000 --> 01:52:31,000
因为我觉得

3920
01:52:31,000 --> 01:52:31,000
那和恐慌

3921
01:52:31,000 --> 01:52:33,000
其实讨论的本身就是

3922
01:52:33,000 --> 01:52:35,000
就是工业产品的

3923
01:52:35,000 --> 01:52:37,000
一种特别形式

3924
01:52:37,000 --> 01:52:38,000
软件的

3925
01:52:38,000 --> 01:52:40,000
内部的一些形式

3926
01:52:40,000 --> 01:52:40,000
我觉得其实也是

3927
01:52:40,000 --> 01:52:41,000
这样一种

3928
01:52:41,000 --> 01:52:43,000
工业崇拜

3929
01:52:43,000 --> 01:52:43,000
工业崇拜

3930
01:52:43,000 --> 01:52:44,000
但至于工具崇拜

3931
01:52:44,000 --> 01:52:45,000
的那种体现

3932
01:52:45,000 --> 01:52:47,000
挺有意思

3933
01:52:47,000 --> 01:52:48,000
然后

3934
01:52:48,000 --> 01:52:51,000
我之前还觉得

3935
01:52:51,000 --> 01:52:52,000
很有意思的一些事情

3936
01:52:52,000 --> 01:52:53,000
就是

3937
01:52:53,000 --> 01:52:54,000
你有没有发现

3938
01:52:54,000 --> 01:52:54,000
我们很多

3939
01:52:54,000 --> 01:52:58,000
工具的图标

3940
01:52:58,000 --> 01:53:00,000
其实都是在试图

3941
01:53:00,000 --> 01:53:04,000
去模拟那些

3942
01:53:04,000 --> 01:53:06,000
现实生活中

3943
01:53:06,000 --> 01:53:07,000
非常古老的工具

3944
01:53:07,000 --> 01:53:08,000
比如说

3945
01:53:08,000 --> 01:53:09,000
应该是那个

3946
01:53:09,000 --> 01:53:11,000
xcode 的图标

3947
01:53:11,000 --> 01:53:14,000
是一个原规是吧

3948
01:53:14,000 --> 01:53:14,000
对

3949
01:53:14,000 --> 01:53:16,000
是一个原规

3950
01:53:16,000 --> 01:53:17,000
但这个原规是

3951
01:53:17,000 --> 01:53:20,000
由一把尺子

3952
01:53:20,000 --> 01:53:21,000
一支笔

3953
01:53:21,000 --> 01:53:22,000
和一个什么东西

3954
01:53:22,000 --> 01:53:23,000
组成的

3955
01:53:23,000 --> 01:53:24,000
但实际上

3956
01:53:24,000 --> 01:53:25,000
这些东西在开发

3957
01:53:25,000 --> 01:53:26,000
APP 的时候

3958
01:53:26,000 --> 01:53:27,000
是根本用不到的

3959
01:53:27,000 --> 01:53:27,000
对吧

3960
01:53:27,000 --> 01:53:28,000
然后

3961
01:53:28,000 --> 01:53:30,000
debug 的图标

3962
01:53:30,000 --> 01:53:31,000
是一个锤子

3963
01:53:31,000 --> 01:53:31,000
还是一个

3964
01:53:31,000 --> 01:53:33,000
班权之类的

3965
01:53:33,000 --> 01:53:33,000
这些东西

3966
01:53:33,000 --> 01:53:34,000
其实都是在暗示

3967
01:53:34,000 --> 01:53:35,000
说我这个是个工具

3968
01:53:35,000 --> 01:53:37,000
然后我这个工具

3969
01:53:37,000 --> 01:53:38,000
可以完成

3970
01:53:38,000 --> 01:53:40,000
那些实体世界里面

3971
01:53:40,000 --> 01:53:40,000
工具

3972
01:53:40,000 --> 01:53:41,000
所能完成的事情

3973
01:53:41,000 --> 01:53:42,000
但实际上

3974
01:53:42,000 --> 01:53:43,000
这些工具跟实体工具

3975
01:53:43,000 --> 01:53:45,000
是完全不搭嘎的

3976
01:53:45,000 --> 01:53:46,000
一个一批

3977
01:53:46,000 --> 01:53:47,000
一批存在

3978
01:53:47,000 --> 01:53:49,000
但是我们却不得不

3979
01:53:49,000 --> 01:53:49,000
借用这些

3980
01:53:49,000 --> 01:53:52,000
我们能够理解的暗语

3981
01:53:52,000 --> 01:53:55,000
来画这么一个图标

3982
01:53:55,000 --> 01:53:56,000
来表达出这样一个意思

3983
01:53:56,000 --> 01:54:00,000
就还挺有位子的

3984
01:54:00,000 --> 01:54:04,000
其实这是某一种形式的

3985
01:54:04,000 --> 01:54:05,000
隐喻嘛

3986
01:54:05,000 --> 01:54:05,000
等于是

3987
01:54:05,000 --> 01:54:05,000
对

3988
01:54:05,000 --> 01:54:07,000
我们在讨论

3989
01:54:07,000 --> 01:54:09,000
是要去拟物化的同时

3990
01:54:09,000 --> 01:54:11,000
却没有办法

3991
01:54:11,000 --> 01:54:13,000
不得不借助这些

3992
01:54:13,000 --> 01:54:14,000
非常拟物的东西

3993
01:54:14,000 --> 01:54:15,000
来表达我们的意思

3994
01:54:15,000 --> 01:54:19,000
然后我也不知道

3995
01:54:19,000 --> 01:54:21,000
也许将来虚拟的

3996
01:54:21,000 --> 01:54:22,000
我们习惯的虚拟现实之后

3997
01:54:22,000 --> 01:54:24,000
会非常好奇

3998
01:54:24,000 --> 01:54:25,000
说这个东西到底是什么

3999
01:54:25,000 --> 01:54:27,000
这样一个锤子

4000
01:54:27,000 --> 01:54:29,000
你有多久没有试过

4001
01:54:29,000 --> 01:54:30,000
锤子拿在手里

4002
01:54:30,000 --> 01:54:30,000
是什么感觉

4003
01:54:30,000 --> 01:54:32,000
就甚至很说

4004
01:54:32,000 --> 01:54:33,000
可能很多做这个

4005
01:54:33,000 --> 01:54:34,000
UI 设计人

4006
01:54:34,000 --> 01:54:35,000
根本就没有摸过

4007
01:54:35,000 --> 01:54:35,000
那些什么

4008
01:54:35,000 --> 01:54:37,000
什么齿规啊

4009
01:54:37,000 --> 01:54:38,000
那些什么理科生

4010
01:54:38,000 --> 01:54:39,000
干的事情

4011
01:54:39,000 --> 01:54:41,000
对或者保存图标

4012
01:54:41,000 --> 01:54:42,000
软盘

4013
01:54:42,000 --> 01:54:44,000
现在新生一代

4014
01:54:44,000 --> 01:54:47,000
就是完全没有东西了

4015
01:54:47,000 --> 01:54:49,000
说那个笑话怎么说来的

4016
01:54:49,000 --> 01:54:50,000
说是一个小朋友

4017
01:54:50,000 --> 01:54:51,000
看见爸爸拿的

4018
01:54:51,000 --> 01:54:53,000
古董软盘

4019
01:54:53,000 --> 01:54:55,000
说你竟然有一个

4020
01:54:55,000 --> 01:54:56,000
保存图标的物理版本

4021
01:54:56,000 --> 01:54:57,000
没错

4022
01:54:57,000 --> 01:54:57,000
好高级

4023
01:54:57,000 --> 01:54:58,000
非常神奇

4024
01:54:58,000 --> 01:55:01,000
对对

4025
01:55:01,000 --> 01:55:02,000
但我觉得这里

4026
01:55:02,000 --> 01:55:04,000
可能还是有一个点

4027
01:55:04,000 --> 01:55:06,000
但可能在过往很多

4028
01:55:06,000 --> 01:55:09,000
很多很久时间以前讨论过的

4029
01:55:09,000 --> 01:55:10,000
就是说这个所谓的

4030
01:55:10,000 --> 01:55:11,000
schemomorphism

4031
01:55:11,000 --> 01:55:13,000
就叫做拟物化的问题

4032
01:55:13,000 --> 01:55:15,000
我觉得就你越往后面走

4033
01:55:15,000 --> 01:55:17,000
这种抽象层级越高之后

4034
01:55:17,000 --> 01:55:20,000
可能很多人是比较难以

4035
01:55:20,000 --> 01:55:22,000
去获得那么所谓的一个 reference

4036
01:55:22,000 --> 01:55:24,000
就是你得有一个

4037
01:55:24,000 --> 01:55:25,000
什么参照物对吧

4038
01:55:25,000 --> 01:55:25,000
对

4039
01:55:25,000 --> 01:55:27,000
特别是你工具的

4040
01:55:27,000 --> 01:55:31,000
作用越不直接的情况下

4041
01:55:31,000 --> 01:55:33,000
你可能反而是越需要

4042
01:55:33,000 --> 01:55:33,000
这种有一些什么

4043
01:55:33,000 --> 01:55:34,000
你刚才讲的

4044
01:55:34,000 --> 01:55:37,000
隐喻的参考去指点你

4045
01:55:37,000 --> 01:55:38,000
它并不是说

4046
01:55:38,000 --> 01:55:39,000
一定说能够让你说

4047
01:55:39,000 --> 01:55:40,000
能够推测出

4048
01:55:40,000 --> 01:55:41,000
它是一个什么样的作用

4049
01:55:41,000 --> 01:55:42,000
比如说我很怀疑

4050
01:55:42,000 --> 01:55:43,000
说你如果你不知道

4051
01:55:43,000 --> 01:55:45,000
xcode 是干什么的

4052
01:55:45,000 --> 01:55:46,000
工具的一个人

4053
01:55:46,000 --> 01:55:48,000
你能看见它们的尺规

4054
01:55:48,000 --> 01:55:49,000
能想出来它是干嘛的

4055
01:55:49,000 --> 01:55:50,000
但是我觉得可能是说

4056
01:55:50,000 --> 01:55:52,000
你知道它是干嘛之后

4057
01:55:52,000 --> 01:55:54,000
你再联想到那么一个图标

4058
01:55:54,000 --> 01:55:56,000
或联想到这么一个隐喻

4059
01:55:56,000 --> 01:55:58,000
就如果用 schemeorphism 的方法

4060
01:55:58,000 --> 01:55:59,000
就是说联想到

4061
01:55:59,000 --> 01:56:01,000
它代表着一个物理实力

4062
01:56:01,000 --> 01:56:01,000
是什么东西

4063
01:56:01,000 --> 01:56:02,000
之后就想到

4064
01:56:02,000 --> 01:56:05,000
是你加深这么一个记忆

4065
01:56:05,000 --> 01:56:06,000
加深你们的理解的过程

4066
01:56:06,000 --> 01:56:07,000
而不是说真的是说

4067
01:56:07,000 --> 01:56:08,000
帮助你从一开始

4068
01:56:08,000 --> 01:56:10,000
从零到有

4069
01:56:10,000 --> 01:56:11,000
从那个什么

4070
01:56:11,000 --> 01:56:13,000
从一个零基础的这种东西

4071
01:56:13,000 --> 01:56:14,000
去推测出

4072
01:56:14,000 --> 01:56:15,000
它猜说它是干嘛

4073
01:56:15,000 --> 01:56:15,000
对

4074
01:56:15,000 --> 01:56:16,000
就好像

4075
01:56:16,000 --> 01:56:17,000
只是说是一个

4076
01:56:17,000 --> 01:56:18,000
是一个 hint

4077
01:56:18,000 --> 01:56:20,000
是一个帮助你记忆的东西

4078
01:56:20,000 --> 01:56:21,000
而不是帮助你理解的东西

4079
01:56:21,000 --> 01:56:23,000
就好像小时候

4080
01:56:23,000 --> 01:56:23,000
第一次看到

4081
01:56:23,000 --> 01:56:25,000
Windows 里面的

4082
01:56:25,000 --> 01:56:27,000
DIL 的图标

4083
01:56:27,000 --> 01:56:29,000
是一张纸

4084
01:56:29,000 --> 01:56:30,000
然后上面有个齿轮

4085
01:56:30,000 --> 01:56:33,000
我当时啄了半天

4086
01:56:33,000 --> 01:56:34,000
说这到底是什么东西的

4087
01:56:34,000 --> 01:56:35,000
能不能删呢

4088
01:56:35,000 --> 01:56:36,000
为什么所有文件

4089
01:56:36,000 --> 01:56:37,000
看起来都一样

4090
01:56:37,000 --> 01:56:38,000
因为那个时候

4091
01:56:38,000 --> 01:56:39,000
主要的兴趣是打游戏

4092
01:56:39,000 --> 01:56:41,000
每个游戏的图标都不一样

4093
01:56:41,000 --> 01:56:42,000
可是这些一模一样的图标

4094
01:56:42,000 --> 01:56:43,000
我是不是都应该

4095
01:56:43,000 --> 01:56:44,000
应该都没什么用

4096
01:56:44,000 --> 01:56:45,000
可以删掉

4097
01:56:45,000 --> 01:56:46,000
然后

4098
01:56:46,000 --> 01:56:47,000
帮助你是干嘛的呢

4099
01:56:47,000 --> 01:56:48,000
对

4100
01:56:48,000 --> 01:56:49,000
对

4101
01:56:49,000 --> 01:56:50,000
但是那个时候

4102
01:56:50,000 --> 01:56:52,000
其实反而你是理解了

4103
01:56:52,000 --> 01:56:53,000
这个 DIL 的这个功能

4104
01:56:53,000 --> 01:56:54,000
中心在想

4105
01:56:54,000 --> 01:56:55,000
就是组建嘛

4106
01:56:55,000 --> 01:56:56,000
齿轮嘛

4107
01:56:56,000 --> 01:56:56,000
是吧

4108
01:56:56,000 --> 01:56:57,000
这个意思

4109
01:56:57,000 --> 01:56:58,000
对

4110
01:56:58,000 --> 01:56:59,000
从这个角度去想

4111
01:56:59,000 --> 01:57:01,000
也不是说完全就

4112
01:57:01,000 --> 01:57:04,000
抨击牛话

4113
01:57:04,000 --> 01:57:05,000
就一无是处了

4114
01:57:05,000 --> 01:57:06,000
或者说完全说扁平话

4115
01:57:06,000 --> 01:57:07,000
就是一定是好的

4116
01:57:07,000 --> 01:57:09,000
牛话就是老土保守的

4117
01:57:09,000 --> 01:57:11,000
我觉得其实也不一定

4118
01:57:11,000 --> 01:57:11,000
没错

4119
01:57:11,000 --> 01:57:16,000
要比较扯淡的批话

4120
01:57:16,000 --> 01:57:17,000
就是比较辩证的

4121
01:57:17,000 --> 01:57:18,000
来看这个问题

4122
01:57:18,000 --> 01:57:21,000
辩证法是德国人发明的

4123
01:57:21,000 --> 01:57:25,000
谢谢

4124
01:57:25,000 --> 01:57:26,000
那个资本主义

4125
01:57:26,000 --> 01:57:27,000
也是德国人发明的

4126
01:57:27,000 --> 01:57:28,000
什么资本主义

4127
01:57:28,000 --> 01:57:29,000
社会主义

4128
01:57:29,000 --> 01:57:31,000
共产主义也是

4129
01:57:31,000 --> 01:57:33,000
你们德国人发明的

4130
01:57:33,000 --> 01:57:33,000
也不容易

4131
01:57:33,000 --> 01:57:35,000
不客气

4132
01:57:35,000 --> 01:57:37,000
这么说来

4133
01:57:37,000 --> 01:57:38,000
你们德国还出产过

4134
01:57:38,000 --> 01:57:40,000
很多祸害人类的东西

4135
01:57:40,000 --> 01:57:42,000
共产主义和纳粹

4136
01:57:42,000 --> 01:57:43,000
都来自德国

4137
01:57:43,000 --> 01:57:47,000
不过在某种程度上

4138
01:57:47,000 --> 01:57:48,000
他们还是蛮有共通点的

4139
01:57:48,000 --> 01:57:50,000
马路杀手汽车

4140
01:57:50,000 --> 01:57:51,000
也来自于德国

4141
01:57:51,000 --> 01:57:53,000
什么

4142
01:57:53,000 --> 01:57:55,000
马路杀手汽车

4143
01:57:55,000 --> 01:57:57,000
也来自于德国

4144
01:57:57,000 --> 01:57:59,000
好吧

4145
01:57:59,000 --> 01:57:59,000
OK

4146
01:57:59,000 --> 01:58:01,000
OK

4147
01:58:01,000 --> 01:58:03,000
您刚刚收听到的是

4148
01:58:03,000 --> 01:58:04,000
IPM Podcast

4149
01:58:04,000 --> 01:58:05,000
网络协下的

4150
01:58:05,000 --> 01:58:06,000
IT 技术主义节目

4151
01:58:06,000 --> 01:58:07,000
《内科恐慌》

4152
01:58:07,000 --> 01:58:08,000
也欢迎你收听

4153
01:58:08,000 --> 01:58:11,000
IPM 旗下的其他六档 Podcast

4154
01:58:11,000 --> 01:58:11,000
包括

4155
01:58:11,000 --> 01:58:13,000
Softcore

4156
01:58:13,000 --> 01:58:14,000
技术主题节目

4157
01:58:14,000 --> 01:58:14,000
IT 公问

4158
01:58:14,000 --> 01:58:16,000
医疗主题节目

4159
01:58:16,000 --> 01:58:16,000
太医来了

4160
01:58:16,000 --> 01:58:18,000
美食主题节目

4161
01:58:18,000 --> 01:58:18,000
《未知道》

4162
01:58:18,000 --> 01:58:19,000
艺术主题节目

4163
01:58:19,000 --> 01:58:20,000
《流行通信》

4164
01:58:20,000 --> 01:58:21,000
无主题节目

4165
01:58:21,000 --> 01:58:21,000
无次元

4166
01:58:21,000 --> 01:58:22,000
故事主题节目

4167
01:58:22,000 --> 01:58:23,000
Hi Story

4168
01:58:23,000 --> 01:58:25,000
以及最新加入

4169
01:58:25,000 --> 01:58:26,000
IPM 的老牌影像节目

4170
01:58:26,000 --> 01:58:27,000
应影像

4171
01:58:27,000 --> 01:58:28,000
欢迎

4172
01:58:28,000 --> 01:58:31,000
感谢大家收听这期节目

4173
01:58:31,000 --> 01:58:32,000
也欢迎大家为我们

4174
01:58:32,000 --> 01:58:32,000
这款

4175
01:58:32,000 --> 01:58:33,000
这款地址是

4176
01:58:33,000 --> 01:58:34,000
ipm.li

4177
01:58:34,000 --> 01:58:35,000
slash

4178
01:58:35,000 --> 01:58:35,000
chronopanic

4179
01:58:35,000 --> 01:58:36,000
slash

4180
01:58:36,000 --> 01:58:36,000
donate

4181
01:58:36,000 --> 01:58:37,000
这个

4182
01:58:41,000 --> 01:58:42,000
感谢大家

