1
00:00:00,000 --> 00:00:11,000
欢迎收听IPN Podcast 忘了旗下的ITG数主题娱乐节目内和恐慌我们号称HARCORE 但是也没有什么干活想听人听不想听人就别听

2
00:00:11,000 --> 00:00:20,000
本节目的网址是IPN.LI-CURNAL PANIC我们推荐大家使用 Podcast Code 端订阅节目

3
00:00:20,000 --> 00:00:35,000
想请请访问IPN.LI-FAQ 欢迎你为本节目捐款 捐款就是IPN.LI-CURNAL PANIC SLAX多NATE 捐款进入随意 只要是能被拔 整除的证证数就可以

4
00:00:35,000 --> 00:00:42,000
捐款不会给你带来什么 不捐也不会让你失去什么 我们的口号是 Hyper is Hyper also

5
00:00:42,000 --> 00:00:49,000
今天我们特别容信好听到一位嘉宾 三门 雪泪 雪泪给大家介绍一下自己吧

6
00:00:49,000 --> 00:01:01,000
大家好 我叫三门 我从事的一项基于容器的一个创业项目 目前是处于初创阶段

7
00:01:01,000 --> 00:01:12,000
之前我从事的主要是内和相关的工作 之前也非常热衷的关注于内和相关的创业的相关项目

8
00:01:12,000 --> 00:01:21,000
然后包括最近特别火的一个容器 所以也加入了这个容器或者说以 Hyper iso为主题的一个创业项

9
00:01:21,000 --> 00:01:28,000
非常容性能参加内和恐慌这个节目之前也很关注

10
00:01:28,000 --> 00:01:35,000
非常迁讯 内和相关的自我介绍很低调 其实三门之前是在这个桑

11
00:01:35,000 --> 00:01:40,000
那后来你加卖给Arco的公司 也就是加娃的单身地子吧

12
00:01:40,000 --> 00:01:48,000
对对对 其实说到 说到上其实有更多的人其实知道是加娃 但是除过加娃之外

13
00:01:48,000 --> 00:01:53,000
他有非常非常多的优秀的相 比如说Selos

14
00:01:53,000 --> 00:02:02,000
就是优尼克斯的一个变种 可能目前很多Ninios内和已经已经是分化版本上面的软件

15
00:02:02,000 --> 00:02:08,000
以及内和的某块都是孩子于宋二四 比如特别著名的ZFS

16
00:02:08,000 --> 00:02:14,000
当然可能做存主的人都知道ZFS他的一个特别强大的公众

17
00:02:14,000 --> 00:02:21,000
以及调试内和的时候所用到的一些工具 比如说MDB

18
00:02:21,000 --> 00:02:36,000
Ninios内和ZFS就是GDB 然后一种追踪内和的不极限于内和 除内和还有用程序都可以追踪DTress

19
00:02:36,000 --> 00:02:44,000
就像目前的CysterMpt 以及Ktip 以及内似这种Tress工具

20
00:02:44,000 --> 00:02:49,000
应该说大多数都孩子于DTress的设计给一念

21
00:02:49,000 --> 00:02:55,000
非常酷 酷 三马尼之前在上的话是具体是做哪一块工作呢

22
00:02:55,000 --> 00:03:04,000
我之前在上的时候是北京演发中心这边主要的一大块是大概一二十多人的一个团队

23
00:03:04,000 --> 00:03:10,000
主要是从事内和Selos的一个存主协议的一个演发

24
00:03:10,000 --> 00:03:13,000
主要集中在Skaz的协议 可能比较底层了

25
00:03:14,000 --> 00:03:17,000
可能不断内和的人不太清楚这一块东西

26
00:03:17,000 --> 00:03:23,000
这就是一个相当于一个标准的网窝存主协议

27
00:03:23,000 --> 00:03:26,000
比如就现在咱们说的硬盘就死杀的硬盘

28
00:03:26,000 --> 00:03:31,000
什么杀他硬盘 等等 都是走了死杀的协议

29
00:03:31,000 --> 00:03:36,000
所以我们其实在这一条线上去做开发

30
00:03:36,000 --> 00:03:41,000
可能也比较偏存主一点 也比较偏内和一点

31
00:03:41,000 --> 00:03:46,000
Skaz也当年还是跟那些S2ID一样

32
00:03:46,000 --> 00:03:52,000
对 现在后来是发展成Sata对SARS对吧

33
00:03:52,000 --> 00:03:54,000
对 两个协议

34
00:03:54,000 --> 00:03:57,000
Skaz是SARS前身 如果有理解没错的话

35
00:03:57,000 --> 00:03:58,000
对 是的

36
00:03:58,000 --> 00:04:02,000
所以你之前的主要工作是在做存主协议这一块

37
00:04:02,000 --> 00:04:03,000
对 是

38
00:04:03,000 --> 00:04:06,000
所以还是非常一个Hark call的人 特别适合我们节目的主题

39
00:04:07,000 --> 00:04:13,000
所以我自开始关注封康节目的时候

40
00:04:13,000 --> 00:04:16,000
就因为自己从事这个行业

41
00:04:16,000 --> 00:04:18,000
所以也关注了

42
00:04:18,000 --> 00:04:19,000
发现还是挺有意思的

43
00:04:20,000 --> 00:04:23,000
Skaz我们节目一直都好称自己非常水

44
00:04:23,000 --> 00:04:27,000
然后这一期中有一个购印的干败 蠻出大家的要求的

45
00:04:29,000 --> 00:04:33,000
那个三本刚才你提到你现在在做一个根据一个勇气相关塔

46
00:04:33,000 --> 00:04:39,000
当然 但我们节目在之前的某一期里面也提到过概念叫做Container

47
00:04:39,000 --> 00:04:40,000
对 对 对

48
00:04:40,000 --> 00:04:45,000
然后 但是当我们毕竟我跟无套两个人都属于这个东西的一个叫做

49
00:04:45,000 --> 00:04:47,000
用户或者是门外哈

50
00:04:47,000 --> 00:04:50,000
但是你其实在做这个相关的开发的

51
00:04:50,000 --> 00:04:54,000
所以本期我们可能会就这个问题进入一些更加深乐探讨

52
00:04:54,000 --> 00:04:54,000
OK

53
00:04:54,000 --> 00:04:58,000
Skaz你现在做这间公司这个项目叫什么

54
00:04:58,000 --> 00:05:00,000
其实这个项目就叫Hyper

55
00:05:00,000 --> 00:05:04,000
然后Hyper这个我们的公司就是Hyper Sq

56
00:05:04,000 --> 00:05:15,000
然后主要为为什么取这个名字其实也是想针对国外的用户或者一些企业或者帕子那种感来去做

57
00:05:15,000 --> 00:05:19,000
所以中文的名字不太好听

58
00:05:19,000 --> 00:05:23,000
所以大家也忽略网 大家更多关注可以关注我们的英文到网站

59
00:05:23,000 --> 00:05:30,000
然后可能我们的中文网站还在做也没有特别的一个进展

60
00:05:30,000 --> 00:05:32,000
但是所以就是我们的定位吧

61
00:05:32,000 --> 00:05:36,000
可能跟之前的国内的一个创意团队不太一样

62
00:05:36,000 --> 00:05:39,000
我们还是希望能够做的足够精致吧

63
00:05:39,000 --> 00:05:41,000
所以OK

64
00:05:41,000 --> 00:05:41,000
老丝

65
00:05:41,000 --> 00:05:44,000
对 这个事情说来就非常巧

66
00:05:44,000 --> 00:05:46,000
就是我跟Simon的认识还是一个机源巧合

67
00:05:46,000 --> 00:05:49,000
就有一天我收到了一封这个邮件

68
00:05:49,000 --> 00:05:54,000
然后发给我的地址是堆进到我的Github的帐号的邮箱的

69
00:05:54,000 --> 00:05:56,000
然后是Simon给我来的一封信

70
00:05:56,000 --> 00:05:58,000
他问我说能不能

71
00:05:58,000 --> 00:06:03,000
因为我当时在Github上面有一个项目是使用这个秘密航空置

72
00:06:03,000 --> 00:06:08,000
通过Vertral Box的秘密航工具去控制它起动讯击压创建讯击者

73
00:06:08,000 --> 00:06:12,000
因为基本上小工具是一个GoLand的一个库

74
00:06:12,000 --> 00:06:15,000
然后当时Simon给我来的一封邮件说能不能用这个

75
00:06:15,000 --> 00:06:20,000
因为当时我在Github上面那个Reposter里面没有写这个数权协议

76
00:06:20,000 --> 00:06:22,000
这点我还是当时我就非常感动

77
00:06:22,000 --> 00:06:26,000
因为你知道很多这个大家都是直接拿来主意吗

78
00:06:26,000 --> 00:06:28,000
对吧 也不会问这种事情的

79
00:06:28,000 --> 00:06:32,000
所以在这方面我觉得像Simon还有Hyper这个团队对这个版权意识

80
00:06:32,000 --> 00:06:35,000
还是非常非常看重的

81
00:06:35,000 --> 00:06:37,000
这点我觉得非常非常难得

82
00:06:37,000 --> 00:06:40,000
对对对 因为我们其实我们这个项目

83
00:06:40,000 --> 00:06:45,000
就我们所知因为国内很少有这种创意团队去做开源项目

84
00:06:45,000 --> 00:06:48,000
而我们这个Hyper其实是一个开源项目

85
00:06:48,000 --> 00:06:52,000
既然开源项目的话我们也是希望能够融入足够多的社区

86
00:06:52,000 --> 00:06:56,000
足够大的社区然后吸引更多的开发者

87
00:06:56,000 --> 00:07:01,000
所以在这方面其实也是进自己微博之类

88
00:07:01,000 --> 00:07:07,000
然后能尽量地改善一下国人在开发者

89
00:07:07,000 --> 00:07:10,000
在这种全球的开发者的印象吧

90
00:07:10,000 --> 00:07:15,000
因为可能更多的提到我可能国内的工程是可能

91
00:07:15,000 --> 00:07:17,000
当然只能是少少数吧

92
00:07:17,000 --> 00:07:22,000
它就拿来主意就直接毁化一个圈子的名声了

93
00:07:22,000 --> 00:07:24,000
对对对

94
00:07:24,000 --> 00:07:27,000
刚刚我们聊了一对周边的情况

95
00:07:27,000 --> 00:07:29,000
先回到这个Hyper这个本质上

96
00:07:29,000 --> 00:07:32,000
在说之前我们先把这个王子量出来

97
00:07:32,000 --> 00:07:36,000
把这个王子是非常酷的一个语名叫做hyper.sh

98
00:07:36,000 --> 00:07:41,000
对 当时你们怎么想的会去用这个这么一个语名

99
00:07:41,000 --> 00:07:50,000
因为毕竟其实我们的到的sa是还是偏技术或者偏还可以点

100
00:07:50,000 --> 00:07:57,000
因为sa你可以认为是拜师或者认为是其他的一些社区

101
00:07:57,000 --> 00:08:03,000
对对对对 所以我们当时也也是用过这种

102
00:08:03,000 --> 00:08:08,000
当然也是最终足够经浅短一点的一些

103
00:08:08,000 --> 00:08:11,000
就选用过这个语名 然后当时我们之前参加

104
00:08:11,000 --> 00:08:15,000
听我意思的一个一个一个一个事情就是我们之前参加一个云击算的大会

105
00:08:15,000 --> 00:08:20,000
然后很多人过来说你们这家公司成绩在上海是吗

106
00:08:20,000 --> 00:08:27,000
对但其实导ssh是哪个国家的国家地区越来越这

107
00:08:27,000 --> 00:08:29,000
这我还真真忘了

108
00:08:30,000 --> 00:08:32,000
我们回头插一下

109
00:08:32,000 --> 00:08:38,000
但是一般我们会把一些shout的工具会用到sh的定聚去做

110
00:08:38,000 --> 00:08:42,000
对 然后当时三个我来信的时候

111
00:08:42,000 --> 00:08:45,000
我就问到一个项目网站 我就看了一下

112
00:08:45,000 --> 00:08:47,000
就是你有非常惊艳

113
00:08:47,000 --> 00:08:50,000
因为这确实不像是一个国内的船队做出了那种风格

114
00:08:50,000 --> 00:08:58,000
因为整个很美国的那种很酷 很鸡蜜的船阳船队做出来的技术展示的演员

115
00:08:58,000 --> 00:09:00,000
非常精美 非常漂亮

116
00:09:00,000 --> 00:09:04,000
所以说了这么多 这个我们还没有介绍一个hyper到的是一个什么样的东西

117
00:09:04,000 --> 00:09:08,000
三个年能够用一句简单的话 介绍一下hyper是一个

118
00:09:08,000 --> 00:09:11,000
就给我们不太熟悉这个东西的轻重

119
00:09:11,000 --> 00:09:13,000
介绍一下hyper到的是一个什么样的工具吗

120
00:09:13,000 --> 00:09:19,000
其实我觉得如果先介绍hyper之前应该先再介绍hyper之前

121
00:09:19,000 --> 00:09:25,000
最好先介绍一下刀棚 因为可能很多人没有了解过这个给月

122
00:09:25,000 --> 00:09:33,000
如果大家知道刀棚的话 那么说hyper的话就很简单一句话就可以说说明白了

123
00:09:33,000 --> 00:09:37,000
所以咱们先说刀棚 慢慢来

124
00:09:37,000 --> 00:09:45,000
刀棚它其实属于一个新星项 大概也存在了两到三年发展速度相当相当精人

125
00:09:45,000 --> 00:09:51,000
大概现在刀棚的公司大概的估值十亿美金 十亿美金超过十亿美金了

126
00:09:51,000 --> 00:10:00,000
它其实本身是基于容器做的艺术 广给容局 我是这么一节

127
00:10:00,000 --> 00:10:07,000
它将一些竞象文件 比如汙汪土 各个种律征司法 版本都可以

128
00:10:07,000 --> 00:10:15,000
作为一个运行式环境 装到容器里面 去增加网过增加存储

129
00:10:15,000 --> 00:10:24,000
这些所有的组件 可能都很ponent 使之做一个轻量级的训练化工具来去运行

130
00:10:24,000 --> 00:10:31,000
然后这儿的话就相当于在同一台机器上 我可以虚拟出来多个单独的容器

131
00:10:31,000 --> 00:10:34,000
然后这儿去运行不同的APP

132
00:10:34,000 --> 00:10:42,000
当会是一个701个理念 或者说容器的一个理念 就是一个容器给面只运行一个APP

133
00:10:42,000 --> 00:10:50,000
就是现在运行一个他们看 或者说那个软件

134
00:10:50,000 --> 00:10:56,000
然后这儿的话能来做到使每个容器 经济然后更变于广义

135
00:10:56,000 --> 00:11:09,000
它其实是为了为这些运行 或者说为开发测试 进行一个比较一致的一个运行式环境

136
00:11:09,000 --> 00:11:22,000
这些问题就赢人之解 我直接下来一个进行 直接运行就可以跟这个问题

137
00:11:22,000 --> 00:11:32,000
就解决一些 像我们几年前开发软件就是加娃各种配置环境边量各种各种参数配置

138
00:11:32,000 --> 00:11:40,000
这些问题就赢人之解 我直接下来一个进行 直接运行就可以跟 比如我是一个合适人员

139
00:11:40,000 --> 00:11:46,000
就可以跟开发人员的运行式 开发环境保持一致

140
00:11:46,000 --> 00:11:49,000
就解决很多就环境相关的问题吧

141
00:11:49,000 --> 00:11:56,000
然后说到个容器 容器它是到块用用到容器所为运行式环境

142
00:11:56,000 --> 00:12:08,000
然后容器的这个概念 相当于将一个号色主机分成多个的容器来去运行APP

143
00:12:09,000 --> 00:12:15,000
它这属于轻量机 轻量机的另外一个好处 这是速度足够的快

144
00:12:15,000 --> 00:12:18,000
然后它一个壁端的 它因为它是晒而扣的

145
00:12:18,000 --> 00:12:25,000
它是在一个内合上面去运行 所以它也造成了一个安全性的叶换

146
00:12:25,000 --> 00:12:32,000
所以这就提到我们存在的意就是解决安全性的问题

147
00:12:33,000 --> 00:12:37,000
这个容器它是晒而扣的 OK 我们不用晒而扣的

148
00:12:37,000 --> 00:12:46,000
而是用Hyper-Earth 就是用VM来代替容器 排去运行到块的一枚纸

149
00:12:46,000 --> 00:12:51,000
然后这二话就是解决到到块的一个安全性问题

150
00:12:51,000 --> 00:12:55,000
但是因为 众客说大家用过WandWare 用了Waterbox

151
00:12:55,000 --> 00:12:59,000
都知道它的型速度可能会比较慢

152
00:12:59,000 --> 00:13:08,000
即使在你的非常好的高端的服务器上大概也要在一两分钟或者两分钟吧

153
00:13:08,000 --> 00:13:16,000
对 所以我们也是急制的优化让它的起动速度大概在好秒级别

154
00:13:16,000 --> 00:13:18,000
好秒级

155
00:13:18,000 --> 00:13:23,000
对对对 刚才是从一两分钟至少是100秒一级别

156
00:13:23,000 --> 00:13:24,000
我现在已经到好秒级别

157
00:13:24,000 --> 00:13:26,000
有四个数量级的提升

158
00:13:26,000 --> 00:13:32,000
对对对 所以大概我们的测试的比较好级上大概在300毫秒

159
00:13:32,000 --> 00:13:35,000
OK 有0.3秒左右

160
00:13:35,000 --> 00:13:43,000
对对对对 所以相对于容器的运行的起动速度来说已经算是差距不大

161
00:13:43,000 --> 00:13:47,000
所以而且它的安全性有很大的提升

162
00:13:47,000 --> 00:13:57,000
这二话以来就是成为我们一个核心的竞争力或者存在的基于目的来去做的这个东西

163
00:13:57,000 --> 00:14:05,000
所以就是说Hyper是一个可以快速起动的虚拟机可以这么理解吗

164
00:14:05,000 --> 00:14:13,000
对 然后它在虚拟机的技术上可以很快的将刀块的以卖者运行起来

165
00:14:13,000 --> 00:14:22,000
OK 对 然后Hyper起了虚拟机里面是只跑一个刀块的竞争还是说它里面可以跑多个刀块的竞争

166
00:14:22,000 --> 00:14:25,000
可以跑多个刀块的竞争

167
00:14:25,000 --> 00:14:30,000
而我们一个虚拟机相当于是一个工作单元

168
00:14:30,000 --> 00:14:37,000
这个工作单元其实这个ID而是S和Covernative里面的一个泡的的概念

169
00:14:37,000 --> 00:14:41,000
就是一组content的一个集合

170
00:14:41,000 --> 00:14:43,000
而这一组content是有关系的

171
00:14:43,000 --> 00:14:45,000
它是为一个运行一个

172
00:14:45,000 --> 00:14:51,000
比如我运行一个网站可能要一个Ni-Zeckel等等

173
00:14:51,000 --> 00:14:53,000
这内容是个东西

174
00:14:53,000 --> 00:14:56,000
所以我买Seckel一个content

175
00:14:56,000 --> 00:14:58,000
我Ni-Zeckel一个content

176
00:14:58,000 --> 00:15:03,000
然后这二话就组成一个泡的

177
00:15:03,000 --> 00:15:06,000
这个泡的概念就包含了两个content

178
00:15:07,000 --> 00:15:09,000
所以可以这么理解吗

179
00:15:09,000 --> 00:15:14,000
就是说一个Hyper的虚拟就是对应一个泡的核子

180
00:15:14,000 --> 00:15:20,000
然后这个泡的里面是包含了多个Docke的content

181
00:15:20,000 --> 00:15:23,000
然后每个content里面只运行单一的一个应用

182
00:15:23,000 --> 00:15:25,000
它可能是一个数据库像MySQL

183
00:15:25,000 --> 00:15:28,000
可能是一个WebFuC,像NgX

184
00:15:28,000 --> 00:15:31,000
后台有一个就是像一个应用幅器

185
00:15:31,000 --> 00:15:34,000
比如说一个TomCat或者其他一些什么像Python

186
00:15:34,000 --> 00:15:36,000
或者入笔写了一个应用进程

187
00:15:36,000 --> 00:15:37,000
对对对对对

188
00:15:37,000 --> 00:15:41,000
所以它用这种泡的概念来管理易祖Series

189
00:15:41,000 --> 00:15:44,000
所以这里听起来

190
00:15:44,000 --> 00:15:47,000
它就说做这件事情的时候

191
00:15:47,000 --> 00:15:49,000
Hyper相对一些遗优的工具

192
00:15:49,000 --> 00:15:52,000
他们的主要的区别在哪里

193
00:15:52,000 --> 00:15:55,000
比如说可能像过去也有像GVKVM

194
00:15:55,000 --> 00:15:57,000
NinuxMand的KVM

195
00:15:57,000 --> 00:16:00,000
也可以运行一些轻量级快速啟动的

196
00:16:00,000 --> 00:16:02,000
当然这个可能需要定制

197
00:16:02,000 --> 00:16:05,000
跑的就是Gas.OS

198
00:16:05,000 --> 00:16:06,000
对对对对对

199
00:16:06,000 --> 00:16:07,000
冰客系统

200
00:16:07,000 --> 00:16:10,000
还有一些像过去基于传统的

201
00:16:10,000 --> 00:16:12,000
HyperWazer的一些工具像Zen

202
00:16:12,000 --> 00:16:14,000
你也可以做一些事情

203
00:16:14,000 --> 00:16:15,000
那么从这个角度出发的话

204
00:16:15,000 --> 00:16:17,000
Hyper和他们的区别

205
00:16:17,000 --> 00:16:19,000
就刚刚提到这个KVM和Zen

206
00:16:19,000 --> 00:16:20,000
他们的区别主要在哪里

207
00:16:20,000 --> 00:16:23,000
其实我们底层也是用KVM

208
00:16:23,000 --> 00:16:24,000
Mozzen以及Wizbox

209
00:16:24,000 --> 00:16:26,000
这些HyperWazer

210
00:16:26,000 --> 00:16:29,000
但是我们跟他们的一个优势

211
00:16:29,000 --> 00:16:31,000
或者说我们做什么东西

212
00:16:31,000 --> 00:16:34,000
就是我们将Gas.OS

213
00:16:34,000 --> 00:16:38,000
我们实现一个最最简单的一个Gas.OS

214
00:16:38,000 --> 00:16:43,000
主要是用于跑刀块的里面置

215
00:16:43,000 --> 00:16:45,000
然后形成坑坑的这些工具

216
00:16:45,000 --> 00:16:49,000
另外我们外边停过一整套广丽工具

217
00:16:49,000 --> 00:16:52,000
然后可以广丽这些HyperWazer

218
00:16:52,000 --> 00:16:55,000
然后让他能够以泡的为单位去运行

219
00:16:55,000 --> 00:16:57,000
刀块的里面置

220
00:16:57,000 --> 00:17:00,000
然后并且停过很多监控的工具

221
00:17:00,000 --> 00:17:03,000
这样的话方便用户

222
00:17:03,000 --> 00:17:04,000
运行刀块里面置

223
00:17:04,000 --> 00:17:07,000
并且并且有更好的安全性

224
00:17:07,000 --> 00:17:08,000
OK

225
00:17:08,000 --> 00:17:10,000
所以这实际上

226
00:17:10,000 --> 00:17:12,000
Hyper是分两部分

227
00:17:12,000 --> 00:17:13,000
一个是管理像传统的

228
00:17:13,000 --> 00:17:14,000
像KVM和Zenyang

229
00:17:14,000 --> 00:17:16,000
这些是HyperWazer的工具

230
00:17:16,000 --> 00:17:18,000
然后另一方面它是说是包含

231
00:17:18,000 --> 00:17:21,000
你们订知过的极度金简的

232
00:17:21,000 --> 00:17:23,000
一个Gas.OS的内侯

233
00:17:23,000 --> 00:17:24,000
对

234
00:17:24,000 --> 00:17:25,000
可以这么理解

235
00:17:25,000 --> 00:17:26,000
OK

236
00:17:26,000 --> 00:17:28,000
那这里就牵涉到两方面的问题了

237
00:17:28,000 --> 00:17:31,000
就是说在这个管理工具这一块

238
00:17:31,000 --> 00:17:34,000
HyperWazer和刀块他们之间的

239
00:17:34,000 --> 00:17:36,000
这个界限是什么

240
00:17:37,000 --> 00:17:40,000
你一直那方面的界限

241
00:17:40,000 --> 00:17:42,000
就比如说你刚才提到这个Hyper

242
00:17:42,000 --> 00:17:45,000
你们它Gas.OS里面包含哪些的东西

243
00:17:45,000 --> 00:17:47,000
就只有一个基础的内侯吗

244
00:17:47,000 --> 00:17:48,000
对对对对对对

245
00:17:48,000 --> 00:17:50,000
Gas.OS里面除了这个内侯之外

246
00:17:50,000 --> 00:17:51,000
还有什么东西

247
00:17:51,000 --> 00:17:52,000
没有别的

248
00:17:52,000 --> 00:17:55,000
它只是跟外边的HyperDemon

249
00:17:55,000 --> 00:17:57,000
去一个交互的作用

250
00:17:57,000 --> 00:17:58,000
我们会把

251
00:17:58,000 --> 00:18:01,000
因为HyperDemon会把刀块的一枚是

252
00:18:01,000 --> 00:18:03,000
从刀块号把他们吓下来

253
00:18:03,000 --> 00:18:05,000
然后作为一个

254
00:18:05,000 --> 00:18:07,000
保耗DOS或者是一个

255
00:18:07,000 --> 00:18:09,000
我它有9P的一个

256
00:18:09,000 --> 00:18:11,000
一个文件

257
00:18:11,000 --> 00:18:12,000
文件

258
00:18:12,000 --> 00:18:14,000
而太是给HyperWazer

259
00:18:14,000 --> 00:18:15,000
然后

260
00:18:15,000 --> 00:18:18,000
Gas.OS拿到这些系绩之后

261
00:18:18,000 --> 00:18:19,000
就会做

262
00:18:19,000 --> 00:18:22,000
给用户生成一些运行式环境

263
00:18:22,000 --> 00:18:25,000
是整个一个这样的一个大概的一个似乎

264
00:18:25,000 --> 00:18:26,000
OK

265
00:18:26,000 --> 00:18:28,000
然后你刚才提到那个HyperHop

266
00:18:28,000 --> 00:18:30,000
一部分是管理像传统的

267
00:18:30,000 --> 00:18:32,000
像KVM 这种HyperWazer的工具

268
00:18:32,000 --> 00:18:33,000
这一部分的话

269
00:18:33,000 --> 00:18:35,000
它又主要包含哪些组件

270
00:18:35,000 --> 00:18:37,000
或者是一些工的模块

271
00:18:37,000 --> 00:18:39,000
它主要是

272
00:18:39,000 --> 00:18:42,000
我想用过刀块的人

273
00:18:42,000 --> 00:18:43,000
都会有一些印象

274
00:18:43,000 --> 00:18:46,000
比如它可以直接用刀块的刀块

275
00:18:46,000 --> 00:18:47,000
奥克斯

276
00:18:47,000 --> 00:18:50,000
或者说刀块的那个

277
00:18:50,000 --> 00:18:51,000
USAC或者是刀块

278
00:18:51,000 --> 00:18:54,000
USVTTY的这种环境

279
00:18:54,000 --> 00:18:56,000
其实我们也提过这种工具

280
00:18:56,000 --> 00:18:57,000
就是可以

281
00:18:57,000 --> 00:19:01,000
因为如果要用户要想看

282
00:19:01,000 --> 00:19:05,000
对HyperWazer里面的信息的话

283
00:19:05,000 --> 00:19:08,000
或者说它的奥克的话

284
00:19:08,000 --> 00:19:10,000
就必须要登顾的或者

285
00:19:10,000 --> 00:19:12,000
USAC是进去

286
00:19:12,000 --> 00:19:15,000
所以我们其实是将这些

287
00:19:15,000 --> 00:19:17,000
操作传统检化

288
00:19:17,000 --> 00:19:20,000
然后直接通过扣端

289
00:19:20,000 --> 00:19:21,000
或者说通过API

290
00:19:21,000 --> 00:19:24,000
就可以让用户能够

291
00:19:24,000 --> 00:19:26,000
简单的访问

292
00:19:26,000 --> 00:19:28,000
到底HyperWazer给人运行的

293
00:19:28,000 --> 00:19:30,000
肯定那儿到底

294
00:19:30,000 --> 00:19:31,000
运行的到底怎么样

295
00:19:31,000 --> 00:19:33,000
然后以及它的

296
00:19:33,000 --> 00:19:35,000
是我发生错误等等

297
00:19:35,000 --> 00:19:38,000
这些全部达到一个监控的效果

298
00:19:38,000 --> 00:19:40,000
当然你也可以

299
00:19:40,000 --> 00:19:42,000
完全当对肯定那儿

300
00:19:42,000 --> 00:19:43,000
一运行的时候

301
00:19:43,000 --> 00:19:45,000
你就可以监控这个

302
00:19:45,000 --> 00:19:46,000
肯定那儿所谓状态

303
00:19:46,000 --> 00:19:48,000
将告过全部收集起来

304
00:19:48,000 --> 00:19:49,000
然后再去分析

305
00:19:49,000 --> 00:19:51,000
其实一个很方便的

306
00:19:51,000 --> 00:19:53,000
有很方便的API方便

307
00:19:53,000 --> 00:19:55,000
用户再次开发

308
00:19:55,000 --> 00:19:56,000
OK

309
00:19:56,000 --> 00:19:58,000
所以如果我们画一个

310
00:19:58,000 --> 00:20:00,000
层次结构图的话

311
00:20:00,000 --> 00:20:01,000
最底层可能是

312
00:20:01,000 --> 00:20:03,000
后细统

313
00:20:03,000 --> 00:20:05,000
然后它上面会跑着

314
00:20:05,000 --> 00:20:07,000
像猪如KVM

315
00:20:07,000 --> 00:20:09,000
这样的一些HyperWazer工具

316
00:20:09,000 --> 00:20:10,000
然后在事上

317
00:20:10,000 --> 00:20:11,000
就是Hyper这一层

318
00:20:11,000 --> 00:20:14,000
去管理这个KVM和ZN这样一个工具

319
00:20:14,000 --> 00:20:16,000
然后在在Hyper管理的

320
00:20:16,000 --> 00:20:18,000
一些Guest VM裡面

321
00:20:18,000 --> 00:20:20,000
会跑一个Dalker的一个镜像

322
00:20:20,000 --> 00:20:22,000
然后在镜像里面去运行

323
00:20:22,000 --> 00:20:25,000
我们最终的应用程序

324
00:20:25,000 --> 00:20:26,000
没错来

325
00:20:26,000 --> 00:20:28,000
那个概念上有点不太一样

326
00:20:28,000 --> 00:20:30,000
因为刚才你说的

327
00:20:30,000 --> 00:20:31,000
可能就是

328
00:20:31,000 --> 00:20:34,000
更多的人去想到这种方式

329
00:20:34,000 --> 00:20:36,000
其实这种方式

330
00:20:36,000 --> 00:20:38,000
就是目前的布特图Dalker

331
00:20:38,000 --> 00:20:41,000
它就是将Dalker的

332
00:20:41,000 --> 00:20:43,000
低门放在一个VM里面去印象

333
00:20:43,000 --> 00:20:45,000
而我们其实是

334
00:20:45,000 --> 00:20:47,000
将Hyper的低门

335
00:20:47,000 --> 00:20:48,000
其实我们这里就没有

336
00:20:48,000 --> 00:20:49,000
Dalker的低门

337
00:20:49,000 --> 00:20:50,000
因为我最开始其实

338
00:20:50,000 --> 00:20:51,000
应按于Dalker低门

339
00:20:51,000 --> 00:20:52,000
现在没有

340
00:20:52,000 --> 00:20:53,000
就是对

341
00:20:53,000 --> 00:20:55,000
所以我们取消个Dalker的应按

342
00:20:55,000 --> 00:20:57,000
然后将HyperD们

343
00:20:57,000 --> 00:21:00,000
放在号搜OS里面去印象

344
00:21:00,000 --> 00:21:03,000
而Dalker的一枚是

345
00:21:03,000 --> 00:21:05,000
下载向来是直接

346
00:21:05,000 --> 00:21:07,000
把这些文件全部

347
00:21:07,000 --> 00:21:08,000
传进VM

348
00:21:08,000 --> 00:21:10,000
然后盖死OS再去

349
00:21:10,000 --> 00:21:13,000
用这些文件来去

350
00:21:13,000 --> 00:21:15,000
去肯特殊地去运行

351
00:21:15,000 --> 00:21:17,000
这些文件

352
00:21:17,000 --> 00:21:19,000
所以其实你们是

353
00:21:19,000 --> 00:21:20,000
这Hyper是完全

354
00:21:20,000 --> 00:21:22,000
替代掉了Dalker的管理的功能

355
00:21:22,000 --> 00:21:23,000
对

356
00:21:23,000 --> 00:21:25,000
你们只是复用了Dalker的

357
00:21:25,000 --> 00:21:27,000
已经制作好的

358
00:21:27,000 --> 00:21:28,000
它本来是为Dalker

359
00:21:28,000 --> 00:21:29,000
管理工具制作好的

360
00:21:29,000 --> 00:21:31,000
container image

361
00:21:31,000 --> 00:21:33,000
这个HyperD我之前

362
00:21:33,000 --> 00:21:35,000
记得有一点点出入了

363
00:21:35,000 --> 00:21:37,000
其实就还蛮酷的

364
00:21:37,000 --> 00:21:38,000
就是如果

365
00:21:38,000 --> 00:21:40,000
李乐上来讲

366
00:21:40,000 --> 00:21:41,000
因为

367
00:21:41,000 --> 00:21:43,000
这个HyperD管理的VM的

368
00:21:43,000 --> 00:21:44,000
训练机

369
00:21:44,000 --> 00:21:45,000
也非常轻量

370
00:21:45,000 --> 00:21:46,000
其实很快

371
00:21:46,000 --> 00:21:47,000
同时它又具备

372
00:21:47,000 --> 00:21:49,000
传统的像Dalker

373
00:21:49,000 --> 00:21:50,000
无法提供的

374
00:21:50,000 --> 00:21:51,000
内核级别的

375
00:21:51,000 --> 00:21:52,000
格力的安全性

376
00:21:52,000 --> 00:21:53,000
对

377
00:21:53,000 --> 00:21:55,000
所以其实是在安全性和性能上

378
00:21:55,000 --> 00:21:57,000
是往前可以

379
00:21:57,000 --> 00:21:59,000
替代甚至超越Dalker

380
00:21:59,000 --> 00:22:01,000
低门本身的

381
00:22:01,000 --> 00:22:03,000
ok明白

382
00:22:03,000 --> 00:22:04,000
非常好

383
00:22:04,000 --> 00:22:05,000
非常好的解释

384
00:22:05,000 --> 00:22:06,000
所以现在有一个

385
00:22:06,000 --> 00:22:08,000
刚才就提到一个最主要的核心要点

386
00:22:08,000 --> 00:22:09,000
就是说

387
00:22:09,000 --> 00:22:11,000
这个安全性这一块面

388
00:22:11,000 --> 00:22:12,000
可能这个很多

389
00:22:12,000 --> 00:22:15,000
这个不是做这个内核相关的朋友

390
00:22:15,000 --> 00:22:16,000
也就是也是

391
00:22:16,000 --> 00:22:17,000
现在很多使用Dalker

392
00:22:17,000 --> 00:22:18,000
container的一个新手

393
00:22:18,000 --> 00:22:19,000
可能一个困惑

394
00:22:19,000 --> 00:22:20,000
就是说

395
00:22:20,000 --> 00:22:21,000
因为确实

396
00:22:21,000 --> 00:22:22,000
你想一个Dalker的

397
00:22:22,000 --> 00:22:23,000
一面就

398
00:22:23,000 --> 00:22:24,000
给人感觉

399
00:22:24,000 --> 00:22:25,000
用起来很像一个虚拟机嘛

400
00:22:25,000 --> 00:22:27,000
但是它其实

401
00:22:27,000 --> 00:22:28,000
并不是一个虚拟机

402
00:22:28,000 --> 00:22:29,000
只是一个机装

403
00:22:29,000 --> 00:22:30,000
叫做我们叫的集装箱

404
00:22:30,000 --> 00:22:31,000
或者叫一个容器

405
00:22:31,000 --> 00:22:32,000
怎么一个概念

406
00:22:32,000 --> 00:22:33,000
所以三个

407
00:22:33,000 --> 00:22:34,000
肯定自己要给

408
00:22:34,000 --> 00:22:35,000
我们这些新手

409
00:22:35,000 --> 00:22:37,000
还要好些不太熟悉

410
00:22:37,000 --> 00:22:38,000
这个使用Dalker

411
00:22:38,000 --> 00:22:39,000
不极其下

412
00:22:39,000 --> 00:22:40,000
为什么说Dalker

413
00:22:40,000 --> 00:22:41,000
它不能提供

414
00:22:41,000 --> 00:22:43,000
像传统的这个虚拟机

415
00:22:43,000 --> 00:22:44,000
这样的安全性

416
00:22:44,000 --> 00:22:45,000
其实这个的话

417
00:22:45,000 --> 00:22:47,000
就是从Dalker

418
00:22:47,000 --> 00:22:48,000
本身用的技术

419
00:22:48,000 --> 00:22:49,000
上面叫来讨论

420
00:22:49,000 --> 00:22:50,000
因为Dalker

421
00:22:50,000 --> 00:22:52,000
其实它并没

422
00:22:52,000 --> 00:22:54,000
就说了

423
00:22:54,000 --> 00:22:55,000
有点

424
00:22:55,000 --> 00:22:56,000
太至晚了

425
00:22:56,000 --> 00:22:57,000
就是Dalker

426
00:22:57,000 --> 00:22:58,000
其实并没有

427
00:22:58,000 --> 00:23:00,000
发明任何新的技术

428
00:23:00,000 --> 00:23:03,000
这个其实很多人对

429
00:23:03,000 --> 00:23:04,000
Dalker的一个指责

430
00:23:04,000 --> 00:23:05,000
他就说

431
00:23:05,000 --> 00:23:06,000
因为这个所有的像

432
00:23:06,000 --> 00:23:07,000
container这些概念

433
00:23:07,000 --> 00:23:08,000
以前就已经有了

434
00:23:08,000 --> 00:23:09,000
对

435
00:23:09,000 --> 00:23:10,000
然后很多人都说

436
00:23:10,000 --> 00:23:11,000
这个Dalker

437
00:23:11,000 --> 00:23:12,000
其实只是把一些叫

438
00:23:12,000 --> 00:23:13,000
新品庄就酒

439
00:23:13,000 --> 00:23:14,000
对

440
00:23:14,000 --> 00:23:16,000
这个到底没什么

441
00:23:16,000 --> 00:23:17,000
从技术小段的

442
00:23:17,000 --> 00:23:18,000
这样子的

443
00:23:18,000 --> 00:23:19,000
就我的理解

444
00:23:19,000 --> 00:23:20,000
可能Dalker

445
00:23:20,000 --> 00:23:21,000
都主要的价值

446
00:23:21,000 --> 00:23:22,000
还是说它提出了这么一套

447
00:23:22,000 --> 00:23:23,000
理念

448
00:23:23,000 --> 00:23:24,000
让大家可以说

449
00:23:24,000 --> 00:23:25,000
就更好的去

450
00:23:25,000 --> 00:23:26,000
从开发

451
00:23:26,000 --> 00:23:27,000
测试

452
00:23:27,000 --> 00:23:28,000
到实际部署

453
00:23:28,000 --> 00:23:29,000
这么一套流程

454
00:23:29,000 --> 00:23:30,000
工具流程吧

455
00:23:30,000 --> 00:23:31,000
对

456
00:23:31,000 --> 00:23:33,000
那么刚才那个安全性的问题

457
00:23:33,000 --> 00:23:34,000
为什么说

458
00:23:34,000 --> 00:23:36,000
我们这些小白们

459
00:23:36,000 --> 00:23:37,000
会觉得这个container这间

460
00:23:37,000 --> 00:23:38,000
是有格力的

461
00:23:38,000 --> 00:23:40,000
但其实并没有想象的那么好

462
00:23:40,000 --> 00:23:41,000
对

463
00:23:41,000 --> 00:23:42,000
因为

464
00:23:42,000 --> 00:23:43,000
因为这些container之间的

465
00:23:43,000 --> 00:23:45,000
一个是从那时间方式

466
00:23:45,000 --> 00:23:46,000
它是基于NinuxWiz

467
00:23:46,000 --> 00:23:47,000
或者说

468
00:23:47,000 --> 00:23:48,000
更底层的一点

469
00:23:48,000 --> 00:23:50,000
它是从过Cigarette

470
00:23:50,000 --> 00:23:51,000
Cigarette

471
00:23:51,000 --> 00:23:52,000
就是一个内合的一个modio

472
00:23:52,000 --> 00:23:55,000
然后它做一个格里性

473
00:23:55,000 --> 00:23:58,000
就是像用户可以配置

474
00:23:58,000 --> 00:23:59,000
然后Cigarette

475
00:23:59,000 --> 00:24:01,000
在内合里面去限制

476
00:24:01,000 --> 00:24:03,000
某一个某一模块

477
00:24:03,000 --> 00:24:04,000
比如内存

478
00:24:04,000 --> 00:24:05,000
比如CPU

479
00:24:05,000 --> 00:24:08,000
每个线程可以用多少

480
00:24:08,000 --> 00:24:09,000
但是这儿的话

481
00:24:09,000 --> 00:24:12,000
它所有的全都是基于一个号搜

482
00:24:12,000 --> 00:24:14,000
OS的可能去去做

483
00:24:14,000 --> 00:24:16,000
然后如果

484
00:24:16,000 --> 00:24:18,000
一个container里面

485
00:24:18,000 --> 00:24:19,000
一个Process

486
00:24:19,000 --> 00:24:21,000
或者一些

487
00:24:21,000 --> 00:24:22,000
更高级的全线

488
00:24:22,000 --> 00:24:25,000
它就可以控制这个内合

489
00:24:25,000 --> 00:24:26,000
而可能这个就是特别

490
00:24:26,000 --> 00:24:27,000
特别细

491
00:24:27,000 --> 00:24:29,000
特别细怎么还可以去这个

492
00:24:29,000 --> 00:24:30,000
这个事情

493
00:24:30,000 --> 00:24:31,000
但是本身

494
00:24:31,000 --> 00:24:32,000
你

495
00:24:32,000 --> 00:24:33,000
晒着可能

496
00:24:33,000 --> 00:24:35,000
其实就是有这种问题了

497
00:24:35,000 --> 00:24:36,000
因为

498
00:24:36,000 --> 00:24:38,000
因为你如果一个container出个问题

499
00:24:38,000 --> 00:24:39,000
就是导致

500
00:24:39,000 --> 00:24:40,000
可能要拍你个的话

501
00:24:40,000 --> 00:24:43,000
就会导致整个

502
00:24:43,000 --> 00:24:44,000
所有的container不可用

503
00:24:44,000 --> 00:24:46,000
看来毕竭的名字

504
00:24:46,000 --> 00:24:47,000
还是很有示范意义的

505
00:24:47,000 --> 00:24:49,000
对对对对对

506
00:24:49,000 --> 00:24:51,000
所以刚才你提到一个很重要的概念

507
00:24:51,000 --> 00:24:53,000
就是如果在传统的一个

508
00:24:53,000 --> 00:24:54,000
Docer的部署里面

509
00:24:54,000 --> 00:24:55,000
如果你在

510
00:24:55,000 --> 00:24:56,000
一个训练机

511
00:24:56,000 --> 00:24:57,000
或者

512
00:24:57,000 --> 00:24:58,000
你同一个内合里面

513
00:24:58,000 --> 00:25:00,000
部署了多个来历不明

514
00:25:00,000 --> 00:25:02,000
这么一个

515
00:25:02,000 --> 00:25:04,000
这个音乐就在跑

516
00:25:04,000 --> 00:25:06,000
然后假设某一个

517
00:25:06,000 --> 00:25:07,000
因为这个内合

518
00:25:07,000 --> 00:25:09,000
它不可能是完美的一个对吧

519
00:25:09,000 --> 00:25:10,000
对对对吧

520
00:25:10,000 --> 00:25:11,000
所以假设一个内合的

521
00:25:11,000 --> 00:25:12,000
一个漏洞

522
00:25:12,000 --> 00:25:14,000
或者说你没有即使打上一些不定

523
00:25:14,000 --> 00:25:15,000
使得一个恶意的程序

524
00:25:15,000 --> 00:25:16,000
抓住这个漏洞

525
00:25:16,000 --> 00:25:18,000
它其实可以越全

526
00:25:18,000 --> 00:25:20,000
拿到这个最高级的全线

527
00:25:20,000 --> 00:25:21,000
从而影响

528
00:25:21,000 --> 00:25:23,000
或者控制其他

529
00:25:23,000 --> 00:25:25,000
在其他的container里面的东西

530
00:25:25,000 --> 00:25:26,000
对

531
00:25:26,000 --> 00:25:28,000
所以从这个方面来讲

532
00:25:28,000 --> 00:25:30,000
我们必须采用像传统的这个

533
00:25:30,000 --> 00:25:32,000
训练机就是独立

534
00:25:32,000 --> 00:25:34,000
Carnel的这个训练机的方式

535
00:25:34,000 --> 00:25:35,000
才能实现

536
00:25:35,000 --> 00:25:36,000
哪怕一个guest

537
00:25:36,000 --> 00:25:38,000
Carnel的被

538
00:25:38,000 --> 00:25:39,000
被攻陷之后

539
00:25:39,000 --> 00:25:41,000
我的host还是相诺来说安全的对吧

540
00:25:41,000 --> 00:25:42,000
对对

541
00:25:42,000 --> 00:25:43,000
OK

542
00:25:43,000 --> 00:25:44,000
那么这里就会有一个自然而然的问题了好

543
00:25:44,000 --> 00:25:45,000
就是这样的话

544
00:25:45,000 --> 00:25:47,000
毕竟还是多了一个训练机

545
00:25:47,000 --> 00:25:49,000
多了一个内合层面的在跑

546
00:25:49,000 --> 00:25:51,000
那么它的这个相对于

547
00:25:51,000 --> 00:25:52,000
这种Docer

548
00:25:52,000 --> 00:25:54,000
本身没有一个

549
00:25:54,000 --> 00:25:55,000
它是一个共享内合的情况

550
00:25:55,000 --> 00:25:57,000
它的这个额外的开销

551
00:25:57,000 --> 00:25:58,000
会是怎么样的一个情况

552
00:25:58,000 --> 00:26:00,000
对所以这个也就是我们

553
00:26:00,000 --> 00:26:02,000
之前一直在关注的一个点

554
00:26:02,000 --> 00:26:03,000
就是它的性能问题

555
00:26:03,000 --> 00:26:04,000
性能问题的话

556
00:26:04,000 --> 00:26:06,000
就是我们做了很多的测试

557
00:26:06,000 --> 00:26:10,000
其实我们并没有说

558
00:26:10,000 --> 00:26:13,000
更改或者说修改

559
00:26:13,000 --> 00:26:15,000
那个HyperRise的代码

560
00:26:15,000 --> 00:26:17,000
然后让它达到一个非常非常

561
00:26:17,000 --> 00:26:18,000
幼化的一个

562
00:26:18,000 --> 00:26:19,000
但我

563
00:26:19,000 --> 00:26:20,000
目前还是希望能够用

564
00:26:20,000 --> 00:26:22,000
更加通用的手段

565
00:26:22,000 --> 00:26:24,000
来解决用户的问题

566
00:26:24,000 --> 00:26:25,000
然后

567
00:26:25,000 --> 00:26:28,000
就刚才说的一个啟动一个

568
00:26:28,000 --> 00:26:31,000
container的所给的时间

569
00:26:31,000 --> 00:26:32,000
大概在300毫秒

570
00:26:32,000 --> 00:26:34,000
这个跟

571
00:26:34,000 --> 00:26:36,000
Docer相比基本上

572
00:26:36,000 --> 00:26:38,000
没差太多

573
00:26:38,000 --> 00:26:40,000
然后

574
00:26:40,000 --> 00:26:41,000
性能上面

575
00:26:41,000 --> 00:26:42,000
这是这点

576
00:26:42,000 --> 00:26:43,000
然后另外就是CPU

577
00:26:43,000 --> 00:26:44,000
给永远上面

578
00:26:44,000 --> 00:26:46,000
基本相似

579
00:26:46,000 --> 00:26:49,000
可能很大的一个问题

580
00:26:49,000 --> 00:26:50,000
就是在

581
00:26:50,000 --> 00:26:52,000
网外O以及

582
00:26:52,000 --> 00:26:53,000
Sourage的IO上面

583
00:26:53,000 --> 00:26:55,000
可能会有

584
00:26:55,000 --> 00:26:58,000
会受限于HyperRise的它的性能

585
00:26:58,000 --> 00:26:59,000
因为你像

586
00:26:59,000 --> 00:27:01,000
9P或者是像直接的

587
00:27:01,000 --> 00:27:02,000
报告DOS

588
00:27:02,000 --> 00:27:04,000
它都毕竟要经过

589
00:27:04,000 --> 00:27:06,000
多层的传递

590
00:27:06,000 --> 00:27:07,000
然后可能会

591
00:27:07,000 --> 00:27:08,000
达不到很好笑

592
00:27:08,000 --> 00:27:10,000
我当然我们其实也在

593
00:27:10,000 --> 00:27:12,000
目前也在解决这个问题

594
00:27:12,000 --> 00:27:14,000
就是用

595
00:27:14,000 --> 00:27:15,000
因为

596
00:27:15,000 --> 00:27:16,000
报告DOS它其实还是

597
00:27:16,000 --> 00:27:17,000
传的那个

598
00:27:17,000 --> 00:27:19,000
Sourage的协议

599
00:27:19,000 --> 00:27:20,000
比如Sugass的协议

600
00:27:20,000 --> 00:27:21,000
直接传的协议

601
00:27:21,000 --> 00:27:22,000
怎么能够

602
00:27:22,000 --> 00:27:23,000
传递

603
00:27:23,000 --> 00:27:24,000
或者怎么能够

604
00:27:24,000 --> 00:27:25,000
更减少它的

605
00:27:25,000 --> 00:27:26,000
宽业的层次

606
00:27:26,000 --> 00:27:27,000
就是一些

607
00:27:27,000 --> 00:27:28,000
可能百发斯的技术

608
00:27:28,000 --> 00:27:29,000
OK

609
00:27:29,000 --> 00:27:31,000
所以总结一下

610
00:27:31,000 --> 00:27:32,000
因为Hyper

611
00:27:32,000 --> 00:27:33,000
还是一个

612
00:27:33,000 --> 00:27:35,000
虚拟机在一个技术

613
00:27:35,000 --> 00:27:36,000
所以传动的

614
00:27:36,000 --> 00:27:37,000
虚拟机的一些缺陷

615
00:27:37,000 --> 00:27:38,000
那可能还是

616
00:27:38,000 --> 00:27:39,000
就是

617
00:27:39,000 --> 00:27:40,000
起码在限制段

618
00:27:40,000 --> 00:27:41,000
还是免不了的

619
00:27:41,000 --> 00:27:42,000
刚刚提到了几个问题

620
00:27:42,000 --> 00:27:43,000
就是说

621
00:27:43,000 --> 00:27:44,000
它可能

622
00:27:44,000 --> 00:27:45,000
我们现在

623
00:27:45,000 --> 00:27:46,000
现在

624
00:27:46,000 --> 00:27:47,000
现代CPU好

625
00:27:47,000 --> 00:27:48,000
是在说像inter的一些

626
00:27:48,000 --> 00:27:49,000
服务器的CPU

627
00:27:49,000 --> 00:27:50,000
它对这个

628
00:27:50,000 --> 00:27:51,000
硬件虚拟化的

629
00:27:51,000 --> 00:27:52,000
一些支持

630
00:27:52,000 --> 00:27:53,000
是非常好的

631
00:27:53,000 --> 00:27:54,000
所以在运算

632
00:27:54,000 --> 00:27:55,000
这一块的损号

633
00:27:55,000 --> 00:27:56,000
其实可以

634
00:27:56,000 --> 00:27:57,000
几乎可以忽略不击

635
00:27:57,000 --> 00:27:58,000
对对对对对

636
00:27:58,000 --> 00:28:00,000
然后但是像这个

637
00:28:00,000 --> 00:28:01,000
IOS面

638
00:28:01,000 --> 00:28:02,000
因为它还是

639
00:28:02,000 --> 00:28:03,000
就需要依赖于

640
00:28:03,000 --> 00:28:04,000
硬件的支持和软

641
00:28:04,000 --> 00:28:05,000
内合的支持

642
00:28:05,000 --> 00:28:06,000
还做不到

643
00:28:06,000 --> 00:28:08,000
说一个比较好的

644
00:28:08,000 --> 00:28:09,000
一个状态

645
00:28:09,000 --> 00:28:10,000
那么我可以

646
00:28:10,000 --> 00:28:11,000
大概问一下

647
00:28:11,000 --> 00:28:12,000
就直观来讲

648
00:28:12,000 --> 00:28:14,000
比如说我往喽

649
00:28:14,000 --> 00:28:16,000
我1GB的这个

650
00:28:16,000 --> 00:28:18,000
物理网卡的

651
00:28:18,000 --> 00:28:19,000
这么一个吞吐量

652
00:28:19,000 --> 00:28:20,000
传到Hyper

653
00:28:20,000 --> 00:28:21,000
经济里面之后

654
00:28:21,000 --> 00:28:23,000
大概会存好到多少

655
00:28:23,000 --> 00:28:25,000
这个

656
00:28:25,000 --> 00:28:26,000
我们之前

657
00:28:26,000 --> 00:28:27,000
确实是做过

658
00:28:27,000 --> 00:28:28,000
做过调查

659
00:28:28,000 --> 00:28:29,000
当然我现在没有

660
00:28:29,000 --> 00:28:30,000
手手的时候

661
00:28:30,000 --> 00:28:31,000
没有这种质量

662
00:28:31,000 --> 00:28:32,000
好

663
00:28:32,000 --> 00:28:33,000
这个就是

664
00:28:33,000 --> 00:28:34,000
你刚提到最主要的

665
00:28:34,000 --> 00:28:35,000
就是IOS人号

666
00:28:35,000 --> 00:28:36,000
就是最开玩笑的

667
00:28:36,000 --> 00:28:37,000
对对对对对

668
00:28:37,000 --> 00:28:38,000
但是如果有质量

669
00:28:38,000 --> 00:28:39,000
我们可以不到

670
00:28:39,000 --> 00:28:40,000
这个SHUNO词里面

671
00:28:40,000 --> 00:28:41,000
对

672
00:28:41,000 --> 00:28:42,000
然后就是

673
00:28:42,000 --> 00:28:43,000
在我们的官网上

674
00:28:43,000 --> 00:28:45,000
其实是有更详细的质量

675
00:28:45,000 --> 00:28:46,000
对

676
00:28:46,000 --> 00:28:47,000
因为这个这部分

677
00:28:47,000 --> 00:28:48,000
我没有参与测试

678
00:28:48,000 --> 00:28:49,000
所以

679
00:28:49,000 --> 00:28:51,000
去階階不是特别清楚

680
00:28:51,000 --> 00:28:53,000
OK 没问题

681
00:28:53,000 --> 00:28:55,000
所以这个也说到iO这一块

682
00:28:55,000 --> 00:28:56,000
所以我说面插了一块问

683
00:28:56,000 --> 00:29:00,000
你也提到一些叫能够绕过

684
00:29:00,000 --> 00:29:01,000
因为iO最麻烦的部分

685
00:29:01,000 --> 00:29:05,000
因为是虚拟GuestOS和HoseOS时间

686
00:29:05,000 --> 00:29:08,000
它是要互相复制数据的

687
00:29:08,000 --> 00:29:11,000
这个是导致性能选择最主要的原因

688
00:29:11,000 --> 00:29:14,000
那么你刚才提到一些白帕

689
00:29:14,000 --> 00:29:17,000
就是能够绕过复制的机制

690
00:29:17,000 --> 00:29:19,000
可以大概介绍一下你们目前在考虑的

691
00:29:19,000 --> 00:29:23,000
或者说以后可能会采用的一些方法是什么的

692
00:29:23,000 --> 00:29:26,000
其实我们目前已经采用了

693
00:29:26,000 --> 00:29:30,000
WATIO Knight的一个模块

694
00:29:30,000 --> 00:29:36,000
然后它其实就是将网过的iO白帕斯

695
00:29:36,000 --> 00:29:41,000
现在于跨过了hyperizer底层的一个数据传说

696
00:29:41,000 --> 00:29:45,000
但是HoseOS它的一个TZIB

697
00:29:45,000 --> 00:29:48,000
协调的技术应该是跨越了

698
00:29:48,000 --> 00:29:52,000
hyperizer的一个TZIB协调

699
00:29:52,000 --> 00:29:54,000
它就是减少它的层数

700
00:29:54,000 --> 00:30:00,000
然后另外其实我们也在基于BlogDevice去做一些操作

701
00:30:00,000 --> 00:30:03,000
因为BlogDevice的话它

702
00:30:03,000 --> 00:30:07,000
它毕竟还是跨设备的传说

703
00:30:07,000 --> 00:30:11,000
更偏向于它的iO协议本身

704
00:30:11,000 --> 00:30:15,000
所以这样的话能比网络层的优化

705
00:30:15,000 --> 00:30:19,000
能够比文件系统集的优化效果会更好

706
00:30:19,000 --> 00:30:22,000
我们也在关注这些点

707
00:30:22,000 --> 00:30:23,000
OK

708
00:30:23,000 --> 00:30:25,000
刚才你提到两个用力

709
00:30:25,000 --> 00:30:29,000
一个就是对于一个经典的网络层的传说的优化

710
00:30:29,000 --> 00:30:33,000
还有一个是对文件系统传说的这个纯粗层的优化

711
00:30:33,000 --> 00:30:38,000
我们提一个就是就在刚才那个网络层的情况来讲

712
00:30:38,000 --> 00:30:41,000
因为大家可能最常用的还是用来不属于一个GWeb的

713
00:30:41,000 --> 00:30:43,000
一个server或者福气这里的应用

714
00:30:43,000 --> 00:30:44,000
对对对

715
00:30:44,000 --> 00:30:48,000
所以举个例子就在一个经典的hyper的部署情况下

716
00:30:48,000 --> 00:30:53,000
就是说底下的这个hostOS上面跑一个假装KVM

717
00:30:53,000 --> 00:30:58,000
然后在hyper在管理一个VM里面再跑一个Doc Image觉得这么情况下

718
00:30:58,000 --> 00:31:05,000
一个数据包从这个对里面的假装是一个genx的

719
00:31:05,000 --> 00:31:06,000
福气里面传出来

720
00:31:06,000 --> 00:31:11,000
第一次传到hostOS硬件的网卡之间

721
00:31:11,000 --> 00:31:13,000
大家需要经过哪些部署可以给我描述一下

722
00:31:13,000 --> 00:31:17,000
目前的话咱们先说正常的话

723
00:31:17,000 --> 00:31:21,000
它肯定是经过hyperizer的T2IP协议站

724
00:31:21,000 --> 00:31:25,000
然后经过hyperizer它的一个

725
00:31:25,000 --> 00:31:28,000
但是这个就要分它是硬件模拟

726
00:31:28,000 --> 00:31:33,000
还是全讯的话还是半讯的话

727
00:31:33,000 --> 00:31:36,000
这个的话就是一道QM요的一些知识

728
00:31:36,000 --> 00:31:42,000
就是因为QM요全讯的话

729
00:31:42,000 --> 00:31:46,000
它就是像那一完全硬件讯的话

730
00:31:46,000 --> 00:31:48,000
它就是网卡都是讯出来的

731
00:31:48,000 --> 00:31:54,000
所以它走的路是跟hyperizer是跟hostOS完全一致了

732
00:31:54,000 --> 00:31:57,000
大家也可以查一下这些就可能走T2PIP协议站

733
00:31:57,000 --> 00:32:02,000
然后再走NICA的Doc

734
00:32:02,000 --> 00:32:06,000
再往下走FullMire这些东西

735
00:32:06,000 --> 00:32:09,000
然后如果要是半讯的话

736
00:32:09,000 --> 00:32:13,000
它就可以用WATI-O-NITE

737
00:32:13,000 --> 00:32:15,000
WATI-O-BAR反正就是

738
00:32:15,000 --> 00:32:17,000
现在U-NITE-O-BAR可能会有100PASS技术

739
00:32:17,000 --> 00:32:21,000
就是将hyperizer里面的网络包的数据

740
00:32:21,000 --> 00:32:23,000
直接给到NICA的Driver

741
00:32:23,000 --> 00:32:24,000
然后用NICA的刺客

742
00:32:24,000 --> 00:32:28,000
然后掉一些L2和命令直接

743
00:32:28,000 --> 00:32:31,000
让L2包直接发动出去

744
00:32:31,000 --> 00:32:33,000
然后交给HIS的OS

745
00:32:33,000 --> 00:32:36,000
然后它其实在这个过程中

746
00:32:36,000 --> 00:32:37,000
我如果没记错的话

747
00:32:37,000 --> 00:32:44,000
应该是hyperizer里面的NIC的讯几地址

748
00:32:44,000 --> 00:32:50,000
其实是和HISO-OS里面的网卡的地址

749
00:32:50,000 --> 00:32:52,000
其实用舌刀一起

750
00:32:52,000 --> 00:32:54,000
然后这样的话能够缩减很多层

751
00:32:54,000 --> 00:32:56,000
就不用负责那么多次了

752
00:32:56,000 --> 00:32:56,000
对

753
00:32:56,000 --> 00:32:59,000
其实在网国传输过程中

754
00:32:59,000 --> 00:33:03,000
用户态和内合态之间的网国包的负质过程

755
00:33:03,000 --> 00:33:05,000
还是比较耗识的

756
00:33:05,000 --> 00:33:06,000
对对对对

757
00:33:06,000 --> 00:33:08,000
然后另外一个就是它的

758
00:33:10,000 --> 00:33:12,000
相当于用户态和内合态一个切换过程

759
00:33:12,000 --> 00:33:15,000
但是这个的话其实没有特别好的办法

760
00:33:15,000 --> 00:33:17,000
因为你要保证实实性

761
00:33:17,000 --> 00:33:22,000
要保证能够它的能把这些包的权都传送出去

762
00:33:22,000 --> 00:33:25,000
所以必须用一些机制来触发

763
00:33:25,000 --> 00:33:27,000
所以可能玩的时候

764
00:33:27,000 --> 00:33:29,000
或者是用其他方式去触发

765
00:33:29,000 --> 00:33:30,000
但是这个东西

766
00:33:30,000 --> 00:33:33,000
我们目前也是用了现场的机制

767
00:33:33,000 --> 00:33:35,000
没有特别

768
00:33:35,000 --> 00:33:38,000
目前还没有设给这方面的去

769
00:33:38,000 --> 00:33:40,000
这方面的动作

770
00:33:40,000 --> 00:33:41,000
OK

771
00:33:41,000 --> 00:33:42,000
明白

772
00:33:42,000 --> 00:33:45,000
这种hyper那套工具讲

773
00:33:45,000 --> 00:33:46,000
你也提到了就是

774
00:33:46,000 --> 00:33:48,000
hyper它会提供一个非常轻量的

775
00:33:48,000 --> 00:33:53,000
GuestOS的VM在那里去运行里面的Docke Image

776
00:33:53,000 --> 00:33:55,000
这点就可能要跟现有的一些其他的

777
00:33:55,000 --> 00:33:58,000
想做同类事情的工具相比了

778
00:33:59,000 --> 00:34:00,000
比如说比较著名的现在

779
00:34:00,000 --> 00:34:03,000
比较活的像CoreOS

780
00:34:03,000 --> 00:34:05,000
还有像一个上次

781
00:34:05,000 --> 00:34:06,000
还有Intern也出了一个

782
00:34:06,000 --> 00:34:09,000
把这双版跑Docke Image的这么一个

783
00:34:09,000 --> 00:34:13,000
极度经浅的LinuxOS

784
00:34:13,000 --> 00:34:14,000
就是相比起来

785
00:34:14,000 --> 00:34:16,000
就是你们比他们的区别在那里

786
00:34:16,000 --> 00:34:18,000
经济了什么东西

787
00:34:18,000 --> 00:34:19,000
是这样

788
00:34:19,000 --> 00:34:22,000
就是Intern出的那个叫可GuestOS

789
00:34:22,000 --> 00:34:25,000
但是它的出现对我们还说还是

790
00:34:25,000 --> 00:34:27,000
作为很正经的

791
00:34:27,000 --> 00:34:29,000
但是其实也是验证

792
00:34:29,000 --> 00:34:31,000
我们的方向是正确的

793
00:34:31,000 --> 00:34:34,000
因为大厂都跟进这件事情

794
00:34:34,000 --> 00:34:35,000
对

795
00:34:35,000 --> 00:34:37,000
所以我们寄兴奋又担心

796
00:34:37,000 --> 00:34:39,000
还有点惊讶

797
00:34:39,000 --> 00:34:40,000
OK

798
00:34:40,000 --> 00:34:45,000
然后它和CoreOS其实应该是

799
00:34:45,000 --> 00:34:47,000
应该是属于类似的东西

800
00:34:47,000 --> 00:34:49,000
但是他们的目的可能不太研究

801
00:34:49,000 --> 00:34:51,000
我们自己的分析

802
00:34:51,000 --> 00:34:51,000
因为

803
00:34:51,000 --> 00:34:54,000
可GuestOS它的一个

804
00:34:55,000 --> 00:34:58,000
它其实是为了验证Intern的硬价

805
00:34:58,000 --> 00:35:00,000
因为Intern

806
00:35:00,000 --> 00:35:02,000
它的算是开源机有中心的作传

807
00:35:02,000 --> 00:35:05,000
但也不能说一帮人

808
00:35:05,000 --> 00:35:07,000
没什么意义去做这个东西

809
00:35:07,000 --> 00:35:10,000
我我们分析它应该是

810
00:35:10,000 --> 00:35:13,000
为了体现他们的硬价足够的款

811
00:35:13,000 --> 00:35:17,000
可以达到其中一个Intern的GuestOS

812
00:35:17,000 --> 00:35:19,000
能够非常非常快

813
00:35:19,000 --> 00:35:21,000
其实好妙及的

814
00:35:21,000 --> 00:35:23,000
然后

815
00:35:23,000 --> 00:35:25,000
当然也有很多人寄军这个东西

816
00:35:25,000 --> 00:35:27,000
去做很多的

817
00:35:27,000 --> 00:35:29,000
因为刀割目前的形式非常火

818
00:35:29,000 --> 00:35:31,000
所以很多人寄军

819
00:35:31,000 --> 00:35:35,000
可能给Intern的词去做一些贡献

820
00:35:35,000 --> 00:35:37,000
然后就是把它改造一下

821
00:35:37,000 --> 00:35:38,000
之前还有一个PR

822
00:35:38,000 --> 00:35:41,000
Drummer给刀割的

823
00:35:41,000 --> 00:35:44,000
相当于刀割的AppsRume

824
00:35:44,000 --> 00:35:45,000
然后去提了一个PR

825
00:35:45,000 --> 00:35:48,000
就是希望能够用这个可能

826
00:35:48,000 --> 00:35:53,000
可能给InternG就寻来运行刀割里面一只

827
00:35:53,000 --> 00:35:55,000
但是这个没有被接手

828
00:35:55,000 --> 00:35:57,000
因为可能觉得

829
00:35:57,000 --> 00:35:59,000
可能做得不太好

830
00:35:59,000 --> 00:36:04,000
或者说它的性能或者说整体的

831
00:36:04,000 --> 00:36:07,000
一个运动方式跟刀割不太一样

832
00:36:07,000 --> 00:36:08,000
对

833
00:36:08,000 --> 00:36:12,000
所以我们也关注它很长时间

834
00:36:12,000 --> 00:36:14,000
它目前也不断的维护

835
00:36:14,000 --> 00:36:18,000
然后它跟Kawas

836
00:36:18,000 --> 00:36:19,000
就是就提到Kawas

837
00:36:19,000 --> 00:36:21,000
Kawas其实它是在Kawas里面

838
00:36:21,000 --> 00:36:25,000
它给你做个足够多的配置

839
00:36:25,000 --> 00:36:28,000
然后让你直接去运行一个刀割的低门

840
00:36:28,000 --> 00:36:30,000
或者说刀割的肯定点

841
00:36:30,000 --> 00:36:31,000
然后你直接

842
00:36:32,000 --> 00:36:35,000
可个月人给Innuals是不可以装在一个

843
00:36:36,000 --> 00:36:38,000
Barmento的一个机器上面

844
00:36:38,000 --> 00:36:39,000
而Kawas是可以的

845
00:36:39,000 --> 00:36:42,000
它可以装的Barmento的机器

846
00:36:42,000 --> 00:36:44,000
然后这样的话配置到一个机房

847
00:36:44,000 --> 00:36:46,000
就可以运行

848
00:36:46,000 --> 00:36:47,000
就可以直接

849
00:36:47,000 --> 00:36:48,000
你装一OS

850
00:36:48,000 --> 00:36:50,000
你可以直接运行刀割的低门

851
00:36:50,000 --> 00:36:51,000
刀割的任何名字

852
00:36:51,000 --> 00:36:52,000
你都可以去直接运行

853
00:36:52,000 --> 00:36:54,000
而且它可以优化

854
00:36:54,000 --> 00:36:57,000
所以它可能的场景不太一样

855
00:36:57,000 --> 00:37:00,000
所以说我们的Hyper其实跟他们

856
00:37:00,000 --> 00:37:04,000
其实其实不是特别掩悠我们

857
00:37:04,000 --> 00:37:06,000
其实虽然说也提供一个Kawas

858
00:37:06,000 --> 00:37:08,000
但是我们这些Kawas

859
00:37:08,000 --> 00:37:10,000
它其实是为了

860
00:37:11,000 --> 00:37:15,000
在VM里面跟外边的HyperDemon去配合

861
00:37:15,000 --> 00:37:19,000
然后去运行刀割的一面一只

862
00:37:19,000 --> 00:37:21,000
其实我们是一个整套的一个环境

863
00:37:21,000 --> 00:37:22,000
其实就是

864
00:37:22,000 --> 00:37:27,000
就是跟刀割平行的一个另外一套的环境

865
00:37:28,000 --> 00:37:29,000
所以如果我这样理解

866
00:37:29,000 --> 00:37:30,000
没错的话

867
00:37:30,000 --> 00:37:33,000
就是Kawas和Intern出的Kawas Linux

868
00:37:33,000 --> 00:37:35,000
他们还是依赖于这个刀割的低门本身

869
00:37:35,000 --> 00:37:36,000
对

870
00:37:36,000 --> 00:37:36,000
是的

871
00:37:36,000 --> 00:37:39,000
而这个Hyper是可以完全替代它的

872
00:37:39,000 --> 00:37:39,000
对对对

873
00:37:39,000 --> 00:37:40,000
是

874
00:37:40,000 --> 00:37:42,000
所以其实从我个人讲的来讲

875
00:37:42,000 --> 00:37:45,000
肯定是少一层比多一层简单吗

876
00:37:45,000 --> 00:37:46,000
对对对

877
00:37:46,000 --> 00:37:48,000
这个也是看大家用场景吧

878
00:37:48,000 --> 00:37:50,000
可能我观众点不太一样

879
00:37:50,000 --> 00:37:52,000
那也不能

880
00:37:52,000 --> 00:37:55,000
也不能太太退消我的东西

881
00:37:55,000 --> 00:37:56,000
没错

882
00:37:56,000 --> 00:37:58,000
这里就提到应用场景

883
00:37:58,000 --> 00:37:58,000
对对对

884
00:37:58,000 --> 00:38:00,000
非常非常重要好

885
00:38:00,000 --> 00:38:02,000
所以在你们的定位里面

886
00:38:02,000 --> 00:38:03,000
是在什么场景下

887
00:38:03,000 --> 00:38:04,000
是用于

888
00:38:04,000 --> 00:38:05,000
比较

889
00:38:05,000 --> 00:38:07,000
就是用用Hyper会比较好

890
00:38:07,000 --> 00:38:09,000
其实我们是希望

891
00:38:09,000 --> 00:38:11,000
但是我们的一个

892
00:38:11,000 --> 00:38:14,000
做这个Hyper目的

893
00:38:14,000 --> 00:38:16,000
是希望有

894
00:38:17,000 --> 00:38:19,000
有想法用刀割

895
00:38:19,000 --> 00:38:20,000
不做

896
00:38:20,000 --> 00:38:22,000
构建一个

897
00:38:22,000 --> 00:38:24,000
共用云的一个场上

898
00:38:24,000 --> 00:38:25,000
就

899
00:38:25,000 --> 00:38:27,000
当然可能目前已经有了

900
00:38:27,000 --> 00:38:28,000
就比如到

901
00:38:28,000 --> 00:38:29,000
什么

902
00:38:29,000 --> 00:38:30,000
到可恶的

903
00:38:30,000 --> 00:38:30,000
对

904
00:38:30,000 --> 00:38:31,000
到到到

905
00:38:31,000 --> 00:38:34,000
他们其实就是

906
00:38:34,000 --> 00:38:37,000
声称是用刀割

907
00:38:37,000 --> 00:38:39,000
做一个

908
00:38:39,000 --> 00:38:40,000
去构建的一个共用员

909
00:38:40,000 --> 00:38:42,000
但是我不确定

910
00:38:42,000 --> 00:38:44,000
他们内部是怎么搭建的

911
00:38:44,000 --> 00:38:46,000
还保证用户的安全性

912
00:38:46,000 --> 00:38:46,000
OK

913
00:38:46,000 --> 00:38:49,000
这个就设计在刚才我们讲的那个问题了

914
00:38:49,000 --> 00:38:50,000
如果说

915
00:38:50,000 --> 00:38:51,000
因为你没有内合狗里的话

916
00:38:51,000 --> 00:38:53,000
其实是刀刊本身的那个

917
00:38:53,000 --> 00:38:56,000
container狗里是无法保证安全性的

918
00:38:56,000 --> 00:38:58,000
然后如果你跑的是一个共用员

919
00:38:58,000 --> 00:38:59,000
就所谓共用员

920
00:38:59,000 --> 00:39:02,000
就是说你的两个客户之间是

921
00:39:02,000 --> 00:39:03,000
可能不是一家

922
00:39:03,000 --> 00:39:05,000
一个人

923
00:39:05,000 --> 00:39:06,000
然后你也没法保证

924
00:39:06,000 --> 00:39:08,000
你运行的应用的

925
00:39:08,000 --> 00:39:09,000
这个

926
00:39:09,000 --> 00:39:10,000
就是这个

927
00:39:10,000 --> 00:39:11,000
性质或者是

928
00:39:11,000 --> 00:39:12,000
它是不是一个恶意程序

929
00:39:12,000 --> 00:39:13,000
你是无法保证的

930
00:39:13,000 --> 00:39:15,000
就是可能是共用员和私有用

931
00:39:15,000 --> 00:39:17,000
对大的区别了

932
00:39:17,000 --> 00:39:17,000
所以这种情况下

933
00:39:17,000 --> 00:39:19,000
是必须采用VM隔离

934
00:39:19,000 --> 00:39:21,000
才可以采取我们

935
00:39:21,000 --> 00:39:23,000
可以接受的安全性吗

936
00:39:23,000 --> 00:39:23,000
对

937
00:39:23,000 --> 00:39:24,000
因为目前

938
00:39:24,000 --> 00:39:26,000
就我们所知一般的共用员场上

939
00:39:26,000 --> 00:39:28,000
一般都是

940
00:39:28,000 --> 00:39:29,000
用这种方式

941
00:39:29,000 --> 00:39:30,000
就是第一层

942
00:39:30,000 --> 00:39:32,000
还是用hyperizer去

943
00:39:32,000 --> 00:39:34,000
或者如何为安摩去做隔离

944
00:39:34,000 --> 00:39:35,000
对

945
00:39:35,000 --> 00:39:36,000
然后

946
00:39:36,000 --> 00:39:36,000
可能没有

947
00:39:36,000 --> 00:39:40,000
用容器直接去做隔离

948
00:39:40,000 --> 00:39:41,000
不太靠谱吧

949
00:39:41,000 --> 00:39:43,000
对

950
00:39:43,000 --> 00:39:43,000
OK

951
00:39:43,000 --> 00:39:45,000
所以hyper的一个主要应用场景

952
00:39:45,000 --> 00:39:46,000
就是说给那些

953
00:39:46,000 --> 00:39:48,000
有质于提供这个

954
00:39:48,000 --> 00:39:49,000
共用员的场上

955
00:39:49,000 --> 00:39:51,000
这么一套基础的工具

956
00:39:51,000 --> 00:39:53,000
使得他们可以比较快速的

957
00:39:53,000 --> 00:39:53,000
这个啟动

958
00:39:53,000 --> 00:39:55,000
或者是关闭

959
00:39:55,000 --> 00:39:55,000
一个

960
00:39:55,000 --> 00:39:56,000
这个虚拟机

961
00:39:56,000 --> 00:39:58,000
然后这个虚拟机上是可以

962
00:39:58,000 --> 00:39:59,000
但是他面向

963
00:39:59,000 --> 00:40:01,000
这暴露给用户的

964
00:40:01,000 --> 00:40:02,000
他确实是一个

965
00:40:02,000 --> 00:40:03,000
叫什么来的

966
00:40:03,000 --> 00:40:04,000
是类似

967
00:40:04,000 --> 00:40:06,000
这个companner那种的 API 对吧

968
00:40:06,000 --> 00:40:07,000
对

969
00:40:07,000 --> 00:40:08,000
OK

970
00:40:08,000 --> 00:40:09,000
所以这个就是

971
00:40:09,000 --> 00:40:10,000
牵涉到另外一个问题了

972
00:40:10,000 --> 00:40:11,000
就是说

973
00:40:11,000 --> 00:40:12,000
因为我们现在大部分的

974
00:40:12,000 --> 00:40:14,000
这个像Linux的也好

975
00:40:14,000 --> 00:40:15,000
AWS的S也好

976
00:40:15,000 --> 00:40:16,000
还有现在比较火的

977
00:40:16,000 --> 00:40:18,000
那么Digital Cloud的也好

978
00:40:18,000 --> 00:40:19,000
他们都是采用这个

979
00:40:19,000 --> 00:40:20,000
传统的虚拟机

980
00:40:20,000 --> 00:40:20,000
这种方式

981
00:40:20,000 --> 00:40:21,000
这种暴露出传统

982
00:40:21,000 --> 00:40:23,000
虚拟机这么一个单元

983
00:40:23,000 --> 00:40:25,000
然后用揉用户

984
00:40:25,000 --> 00:40:27,000
再去管理其中的这个

985
00:40:27,000 --> 00:40:28,000
这个是否跑到卡

986
00:40:28,000 --> 00:40:30,000
是否跑什么

987
00:40:30,000 --> 00:40:32,000
跑什么GuestOS的事情

988
00:40:32,000 --> 00:40:33,000
那么刚才我们讲的

989
00:40:33,000 --> 00:40:34,000
你直接暴露给用户

990
00:40:34,000 --> 00:40:35,000
以它继续去

991
00:40:35,000 --> 00:40:36,000
container的 API 的好处

992
00:40:36,000 --> 00:40:38,000
像比于现在这个暴露

993
00:40:38,000 --> 00:40:38,000
给用户

994
00:40:38,000 --> 00:40:41,000
一个基于VM的 API 的好处是什么呢

995
00:40:41,000 --> 00:40:42,000
嗯

996
00:40:42,000 --> 00:40:43,000
暴露

997
00:40:43,000 --> 00:40:45,000
其实我觉得还

998
00:40:45,000 --> 00:40:46,000
还是没万一

999
00:40:46,000 --> 00:40:47,000
从一个用场景上面来

1000
00:40:47,000 --> 00:40:48,000
来来来来分析

1001
00:40:48,000 --> 00:40:49,000
就是

1002
00:40:49,000 --> 00:40:51,000
如果要是

1003
00:40:51,000 --> 00:40:53,000
就比如说

1004
00:40:53,000 --> 00:40:55,000
用户他想

1005
00:40:55,000 --> 00:40:56,000
他已经

1006
00:40:56,000 --> 00:40:57,000
已经在本地

1007
00:40:57,000 --> 00:40:59,000
他一个开发环境

1008
00:40:59,000 --> 00:41:00,000
他本地的话

1009
00:41:00,000 --> 00:41:00,000
他可以

1010
00:41:00,000 --> 00:41:01,000
不

1011
00:41:01,000 --> 00:41:02,000
他可以配置任何刀块了

1012
00:41:02,000 --> 00:41:03,000
一个E-Mage

1013
00:41:03,000 --> 00:41:05,000
然后去上传到自己的

1014
00:41:05,000 --> 00:41:07,000
跑而未的或者是帕布克的

1015
00:41:07,000 --> 00:41:08,000
个Hop 上面

1016
00:41:08,000 --> 00:41:09,000
然后

1017
00:41:10,000 --> 00:41:11,000
他再去运行

1018
00:41:11,000 --> 00:41:13,000
然后如果他要是像

1019
00:41:13,000 --> 00:41:16,000
直接拿到一个VM 一个环境的话

1020
00:41:16,000 --> 00:41:18,000
那完全他要在自己

1021
00:41:18,000 --> 00:41:18,000
搭刀块

1022
00:41:18,000 --> 00:41:20,000
然后再给你去

1023
00:41:20,000 --> 00:41:21,000
直接在不属下

1024
00:41:21,000 --> 00:41:21,000
他向

1025
00:41:21,000 --> 00:41:23,000
再再去运行

1026
00:41:23,000 --> 00:41:24,000
或者是不对

1027
00:41:24,000 --> 00:41:25,000
然后但是我们这种方式

1028
00:41:25,000 --> 00:41:27,000
你直接可以将你的

1029
00:41:27,000 --> 00:41:30,000
刀块的一枚是直接下来

1030
00:41:30,000 --> 00:41:30,000
想像是我们

1031
00:41:30,000 --> 00:41:32,000
你只要填一些

1032
00:41:32,000 --> 00:41:32,000
你所

1033
00:41:32,000 --> 00:41:34,000
想要想要的东西

1034
00:41:34,000 --> 00:41:35,000
直接传统给你

1035
00:41:35,000 --> 00:41:35,000
不属在后段

1036
00:41:35,000 --> 00:41:38,000
就是不需要你去做任何的配置

1037
00:41:38,000 --> 00:41:39,000
你只要填

1038
00:41:40,000 --> 00:41:41,000
我们这有一个叫

1039
00:41:41,000 --> 00:41:42,000
这次

1040
00:41:42,000 --> 00:41:43,000
就是输入文件

1041
00:41:43,000 --> 00:41:44,000
就是这次犯案

1042
00:41:44,000 --> 00:41:46,000
这次犯案里面可以定义

1043
00:41:46,000 --> 00:41:47,000
你的所有的

1044
00:41:47,000 --> 00:41:49,000
这个上面运行的东西

1045
00:41:49,000 --> 00:41:49,000
比如肯登的

1046
00:41:49,000 --> 00:41:51,000
运用那个肯登的

1047
00:41:51,000 --> 00:41:52,000
从哪运行

1048
00:41:52,000 --> 00:41:53,000
从头上下载

1049
00:41:53,000 --> 00:41:54,000
然后一接

1050
00:41:54,000 --> 00:41:55,000
那个

1051
00:41:55,000 --> 00:41:56,000
泡的

1052
00:41:56,000 --> 00:41:57,000
那段号赢设

1053
00:41:57,000 --> 00:41:58,000
然后一接

1054
00:41:58,000 --> 00:41:59,000
Sourage等等等等

1055
00:41:59,000 --> 00:42:00,000
你都可以去

1056
00:42:00,000 --> 00:42:01,000
自己去配置

1057
00:42:01,000 --> 00:42:02,000
然后

1058
00:42:02,000 --> 00:42:03,000
所以就是

1059
00:42:03,000 --> 00:42:05,000
不简化用户操作吧

1060
00:42:05,000 --> 00:42:06,000
我觉得

1061
00:42:06,000 --> 00:42:07,000
OK

1062
00:42:07,000 --> 00:42:07,000
所以这个其实

1063
00:42:07,000 --> 00:42:09,000
还是挺切重

1064
00:42:09,000 --> 00:42:11,000
我的个人的一个痛点

1065
00:42:11,000 --> 00:42:11,000
比如说

1066
00:42:11,000 --> 00:42:13,000
自己在运营这个IPN的

1067
00:42:13,000 --> 00:42:14,000
这个服务

1068
00:42:14,000 --> 00:42:14,000
好一些

1069
00:42:14,000 --> 00:42:15,000
帮朋友管的

1070
00:42:15,000 --> 00:42:16,000
一些其他的一些服务

1071
00:42:16,000 --> 00:42:17,000
然后他们

1072
00:42:17,000 --> 00:42:19,000
就是每次要新增一个服务

1073
00:42:19,000 --> 00:42:20,000
或者是管

1074
00:42:20,000 --> 00:42:20,000
对的

1075
00:42:20,000 --> 00:42:22,000
这不是新增的时候会有一个问题

1076
00:42:22,000 --> 00:42:22,000
就是说

1077
00:42:22,000 --> 00:42:24,000
给我的这个虚拟机

1078
00:42:24,000 --> 00:42:24,000
新开了一个

1079
00:42:24,000 --> 00:42:25,000
虚拟机是空白的

1080
00:42:25,000 --> 00:42:27,000
我还到了重新打一套

1081
00:42:27,000 --> 00:42:28,000
比如说要建管理

1082
00:42:28,000 --> 00:42:29,000
对应的这个

1083
00:42:29,000 --> 00:42:30,000
账号对吧

1084
00:42:30,000 --> 00:42:30,000
对

1085
00:42:30,000 --> 00:42:33,000
要安装对应的软件

1086
00:42:33,000 --> 00:42:34,000
但这个可能有一部分

1087
00:42:34,000 --> 00:42:35,000
是可以通过Docke

1088
00:42:35,000 --> 00:42:37,000
那个E-Mage本身打包来实现的

1089
00:42:37,000 --> 00:42:39,000
但是看你听到一个很重要的点

1090
00:42:39,000 --> 00:42:39,000
就是Docke

1091
00:42:39,000 --> 00:42:40,000
这个D-M

1092
00:42:40,000 --> 00:42:41,000
这个手无均层本身

1093
00:42:41,000 --> 00:42:43,000
还是需要配置和安装的

1094
00:42:43,000 --> 00:42:44,000
对对对

1095
00:42:44,000 --> 00:42:44,000
所以其实我觉得

1096
00:42:44,000 --> 00:42:45,000
还是一个

1097
00:42:45,000 --> 00:42:48,000
抽象层次的一个非约吧

1098
00:42:48,000 --> 00:42:50,000
你们其实是通过Hyper这套

1099
00:42:50,000 --> 00:42:52,000
基于Continue的IPI

1100
00:42:52,000 --> 00:42:54,000
同时在加上

1101
00:42:54,000 --> 00:42:57,000
这个VM的安全性

1102
00:42:57,000 --> 00:42:58,000
使得

1103
00:42:58,000 --> 00:42:59,000
我们不用再去操心

1104
00:42:59,000 --> 00:43:01,000
我大面这个Continue

1105
00:43:01,000 --> 00:43:03,000
其实我可以在逻辑上

1106
00:43:03,000 --> 00:43:05,000
按照Continue来做这个部署了

1107
00:43:05,000 --> 00:43:07,000
只是说不用再操心

1108
00:43:07,000 --> 00:43:08,000
想传统Docke

1109
00:43:08,000 --> 00:43:09,000
就肯定之间无法

1110
00:43:09,000 --> 00:43:11,000
内合机隔离的

1111
00:43:11,000 --> 00:43:12,000
不安全的影响

1112
00:43:12,000 --> 00:43:13,000
对

1113
00:43:13,000 --> 00:43:13,000
没走

1114
00:43:13,000 --> 00:43:14,000
对

1115
00:43:14,000 --> 00:43:15,000
对

1116
00:43:15,000 --> 00:43:16,000
对

1117
00:43:16,000 --> 00:43:17,000
然后我们现在进入到一个

1118
00:43:17,000 --> 00:43:19,000
很关键的一个问题的讨论

1119
00:43:19,000 --> 00:43:20,000
就是说因为

1120
00:43:20,000 --> 00:43:20,000
基于

1121
00:43:20,000 --> 00:43:21,000
因为Docke

1122
00:43:21,000 --> 00:43:22,000
其实本身到

1123
00:43:22,000 --> 00:43:23,000
我觉得到目前为止

1124
00:43:23,000 --> 00:43:23,000
也没有

1125
00:43:23,000 --> 00:43:25,000
并没有很好的解决这个问题

1126
00:43:25,000 --> 00:43:28,000
就是这个存储空间的问题

1127
00:43:28,000 --> 00:43:29,000
过去的话

1128
00:43:29,000 --> 00:43:30,000
就照我的理解

1129
00:43:30,000 --> 00:43:31,000
Docke

1130
00:43:31,000 --> 00:43:32,000
因为它是提倡的

1131
00:43:32,000 --> 00:43:34,000
叫做应用是

1132
00:43:34,000 --> 00:43:34,000
那个

1133
00:43:34,000 --> 00:43:36,000
EmitContinue是不可变的

1134
00:43:36,000 --> 00:43:38,000
就EmetopodeContinue

1135
00:43:38,000 --> 00:43:39,000
那么比如说你做一个

1136
00:43:39,000 --> 00:43:41,000
应用服务器本身

1137
00:43:41,000 --> 00:43:42,000
可能这个道言没什么

1138
00:43:42,000 --> 00:43:44,000
你多起这个应用

1139
00:43:44,000 --> 00:43:46,000
就可以提高你的这个病发数

1140
00:43:46,000 --> 00:43:48,000
那是当然是好的

1141
00:43:48,000 --> 00:43:50,000
但是我们做一大部分的

1142
00:43:50,000 --> 00:43:51,000
这个网站也好

1143
00:43:51,000 --> 00:43:52,000
还是什么服务也好

1144
00:43:52,000 --> 00:43:54,000
它还是必须要考虑这个数据

1145
00:43:54,000 --> 00:43:55,000
持久化的问题

1146
00:43:55,000 --> 00:43:57,000
就说你从这个坑路

1147
00:43:57,000 --> 00:43:58,000
那里拿到了这个数据

1148
00:43:58,000 --> 00:44:00,000
那里存到哪里

1149
00:44:00,000 --> 00:44:01,000
过去Docke的一个提倡的

1150
00:44:01,000 --> 00:44:03,000
一个概念就是说

1151
00:44:03,000 --> 00:44:04,000
那你再建一个

1152
00:44:04,000 --> 00:44:05,000
就单纯拿来做

1153
00:44:05,000 --> 00:44:08,000
这个存储的一个Emit

1154
00:44:08,000 --> 00:44:09,000
来做这件事情

1155
00:44:09,000 --> 00:44:10,000
所以我不知道这件事情

1156
00:44:10,000 --> 00:44:12,000
在Hyper里面是一个

1157
00:44:12,000 --> 00:44:13,000
什么样的一个值得股

1158
00:44:13,000 --> 00:44:15,000
就是什么样的做法是值得股力的

1159
00:44:15,000 --> 00:44:19,000
我们目前是有一个单独的

1160
00:44:19,000 --> 00:44:23,000
WOWGAMER的一个模块

1161
00:44:23,000 --> 00:44:24,000
然后它是

1162
00:44:24,000 --> 00:44:27,000
你可以在针对某个坑坑的

1163
00:44:27,000 --> 00:44:31,000
或者说针对几个坑坑的去配置

1164
00:44:31,000 --> 00:44:36,000
然后你可以自己添加

1165
00:44:36,000 --> 00:44:37,000
你想加入的WOWGAMER

1166
00:44:37,000 --> 00:44:40,000
这个WOWGAMER的既可以是文件

1167
00:44:40,000 --> 00:44:41,000
或者是MOWL

1168
00:44:41,000 --> 00:44:44,000
然后也可以是BOWL的DOS

1169
00:44:44,000 --> 00:44:47,000
BOWL的DOS就是支持非常多的形式

1170
00:44:47,000 --> 00:44:49,000
或者就是

1171
00:44:49,000 --> 00:44:51,000
然后用户可以自由配置

1172
00:44:51,000 --> 00:44:53,000
然后你可以把这个多大

1173
00:44:53,000 --> 00:44:54,000
多多少

1174
00:44:54,000 --> 00:44:55,000
都可以自己配置

1175
00:44:55,000 --> 00:44:56,000
然后指定给哪个

1176
00:44:56,000 --> 00:44:58,000
用户都可以自己配置

1177
00:44:58,000 --> 00:44:59,000
然后这样的话

1178
00:44:59,000 --> 00:45:01,000
你加到一个坑坑的里面

1179
00:45:01,000 --> 00:45:03,000
你可能运行的时候

1180
00:45:03,000 --> 00:45:05,000
你可以指定我将数据存到

1181
00:45:05,000 --> 00:45:09,000
这个BOWL的DOS

1182
00:45:09,000 --> 00:45:12,000
或者说是MOWL里面

1183
00:45:12,000 --> 00:45:14,000
这样的话

1184
00:45:14,000 --> 00:45:16,000
目前我们是支持本地的

1185
00:45:16,000 --> 00:45:19,000
以及加Safe

1186
00:45:19,000 --> 00:45:20,000
或者说或者说

1187
00:45:20,000 --> 00:45:22,000
你用S垃圾当然也可能也可能

1188
00:45:22,000 --> 00:45:24,000
配直接配Sourge

1189
00:45:24,000 --> 00:45:25,000
Sourge都可以

1190
00:45:25,000 --> 00:45:26,000
OK

1191
00:45:26,000 --> 00:45:28,000
所以我理解一下

1192
00:45:28,000 --> 00:45:30,000
这个大概的一个做法

1193
00:45:30,000 --> 00:45:32,000
就是说我把

1194
00:45:32,000 --> 00:45:35,000
这个Hyper它会允许我虚拟

1195
00:45:35,000 --> 00:45:37,000
出一块BlockDevice

1196
00:45:37,000 --> 00:45:39,000
就是一个快存主器

1197
00:45:39,000 --> 00:45:40,000
然后这个快存主器

1198
00:45:40,000 --> 00:45:41,000
我可以直接挂载进

1199
00:45:41,000 --> 00:45:44,000
我的某一个Hyper的虚拟机里面

1200
00:45:44,000 --> 00:45:46,000
成为一个文件系统也好

1201
00:45:46,000 --> 00:45:47,000
一个什么目楼也好

1202
00:45:47,000 --> 00:45:48,000
然后

1203
00:45:48,000 --> 00:45:50,000
使得这样的话

1204
00:45:50,000 --> 00:45:50,000
就是

1205
00:45:50,000 --> 00:45:52,000
Hyper训练本身跑的一样

1206
00:45:52,000 --> 00:45:54,000
它还是一个E-Mutable

1207
00:45:54,000 --> 00:45:55,000
就是不可变

1208
00:45:55,000 --> 00:45:56,000
它的写的数据

1209
00:45:56,000 --> 00:45:59,000
也是通过刚才挂载进去的BlockDevice

1210
00:45:59,000 --> 00:46:01,000
持久划到其他地方

1211
00:46:01,000 --> 00:46:01,000
对

1212
00:46:01,000 --> 00:46:03,000
然后持久划算

1213
00:46:03,000 --> 00:46:04,000
要么你可以在本机

1214
00:46:04,000 --> 00:46:06,000
同意台后室的机器上

1215
00:46:06,000 --> 00:46:09,000
执行或者是通过Sgas

1216
00:46:09,000 --> 00:46:12,000
这种网络的村株的协议

1217
00:46:12,000 --> 00:46:13,000
写到另外一台

1218
00:46:13,000 --> 00:46:14,000
一个文件

1219
00:46:14,000 --> 00:46:15,000
比如说一个文件服务器上

1220
00:46:15,000 --> 00:46:16,000
对

1221
00:46:16,000 --> 00:46:16,000
没错

1222
00:46:16,000 --> 00:46:17,000
是这样

1223
00:46:17,000 --> 00:46:18,000
OK

1224
00:46:18,000 --> 00:46:21,000
所以这里就牵涉到一个一个效率的问题了

1225
00:46:21,000 --> 00:46:23,000
刚才我们也在提前面提到

1226
00:46:23,000 --> 00:46:28,000
就是说通过这种方式挂载进去的DiskIO的效率

1227
00:46:28,000 --> 00:46:30,000
会有很大的损号吗

1228
00:46:30,000 --> 00:46:32,000
还是说是明星这样的情况

1229
00:46:32,000 --> 00:46:37,000
其实这个主要还是说HyperWise本身的

1230
00:46:37,000 --> 00:46:38,000
就是因为我们

1231
00:46:38,000 --> 00:46:42,000
如果你要是挂本机的BlockDevice的话

1232
00:46:42,000 --> 00:46:48,000
那么它其实还是涉及到一个IOM一个传递的一个转换

1233
00:46:48,000 --> 00:46:49,000
然后这个的话

1234
00:46:49,000 --> 00:46:51,000
消耗应该不大

1235
00:46:51,000 --> 00:46:53,000
但是如果你要是文件即便

1236
00:46:53,000 --> 00:46:54,000
就摸过了的话

1237
00:46:54,000 --> 00:46:54,000
摸过的话

1238
00:46:54,000 --> 00:46:57,000
它其实是走到

1239
00:46:57,000 --> 00:47:02,000
它是通过HyperWise的Sci-Fi

1240
00:47:02,000 --> 00:47:03,000
来

1241
00:47:03,000 --> 00:47:04,000
Sci-Fi或者Sci-Fi第二

1242
00:47:04,000 --> 00:47:05,000
Device是原来做的

1243
00:47:05,000 --> 00:47:06,000
所以

1244
00:47:06,000 --> 00:47:07,000
这个过程中

1245
00:47:07,000 --> 00:47:08,000
我们今天撤过

1246
00:47:08,000 --> 00:47:10,000
就是不管是Vandware

1247
00:47:10,000 --> 00:47:13,000
或者说Waterbox或者Q-Mail

1248
00:47:13,000 --> 00:47:16,000
它的Sci-Fi的摸过的性能

1249
00:47:16,000 --> 00:47:18,000
都不是特别好

1250
00:47:18,000 --> 00:47:22,000
所以我们特别建议用BlockDevice即便的去操作

1251
00:47:22,000 --> 00:47:23,000
另外就像刚才

1252
00:47:23,000 --> 00:47:25,000
另外一种方式

1253
00:47:25,000 --> 00:47:25,000
还有第三种方式

1254
00:47:25,000 --> 00:47:28,000
比如我要是远段的

1255
00:47:28,000 --> 00:47:30,000
或者说SourisSouris的话

1256
00:47:30,000 --> 00:47:31,000
这个的话

1257
00:47:31,000 --> 00:47:36,000
它因为可以是保湖给HyperWise的一个BlockDevice

1258
00:47:36,000 --> 00:47:39,000
所以它这个的性能可能是

1259
00:47:39,000 --> 00:47:41,000
除了意外于HyperWise的BlockDevice

1260
00:47:41,000 --> 00:47:42,000
支持还有的话

1261
00:47:42,000 --> 00:47:48,000
就是用的第三方工具的性能了

1262
00:47:48,000 --> 00:47:49,000
所以

1263
00:47:49,000 --> 00:47:51,000
SourisMogo的话

1264
00:47:51,000 --> 00:47:52,000
这个

1265
00:47:52,000 --> 00:47:54,000
这确是一个硬上

1266
00:47:54,000 --> 00:47:56,000
没有特别好的办法

1267
00:47:56,000 --> 00:47:58,000
因为HyperWise的本身

1268
00:47:58,000 --> 00:48:00,000
它他们做的也不是太好

1269
00:48:00,000 --> 00:48:04,000
因为它是想达到更加用户

1270
00:48:04,000 --> 00:48:07,000
就是说普通用户级别的使用

1271
00:48:07,000 --> 00:48:10,000
而不是说我用这个来做企业级

1272
00:48:10,000 --> 00:48:12,000
或者说做工业级

1273
00:48:12,000 --> 00:48:14,000
用户可能不太一样

1274
00:48:14,000 --> 00:48:15,000
OK

1275
00:48:15,000 --> 00:48:17,000
所以那么就牵扯到一个问题了

1276
00:48:17,000 --> 00:48:20,000
就是说在实际大规模部署的时候

1277
00:48:20,000 --> 00:48:23,000
这种比如说类似于Google或者是Amazon

1278
00:48:23,000 --> 00:48:25,000
这种级别的用户

1279
00:48:25,000 --> 00:48:26,000
他们会一般会采用什么样的方式

1280
00:48:26,000 --> 00:48:30,000
去部署这种纯厨的方案呢

1281
00:48:34,000 --> 00:48:35,000
我说纯厨的方案

1282
00:48:35,000 --> 00:48:39,000
这我还真不确定他们怎么部署的

1283
00:48:39,000 --> 00:48:40,000
OK

1284
00:48:40,000 --> 00:48:41,000
没关系

1285
00:48:41,000 --> 00:48:43,000
那我们进入下一个话题

1286
00:48:43,000 --> 00:48:45,000
就是说刚才也提到文件纯厨

1287
00:48:45,000 --> 00:48:47,000
可能是效率上是一个硬上

1288
00:48:47,000 --> 00:48:51,000
这个确实在目前的技术条件下

1289
00:48:51,000 --> 00:48:53,000
好像没有特别好的解决的方案

1290
00:48:53,000 --> 00:48:56,000
然后刚才之前我们也提到了网络

1291
00:48:56,000 --> 00:48:57,000
这一块因为也涉及到IO

1292
00:48:57,000 --> 00:49:00,000
也是一个比较尴尬的状态

1293
00:49:00,000 --> 00:49:02,000
这个其实这个都说的是在

1294
00:49:02,000 --> 00:49:04,000
刚才我们大家的假设的一个场景

1295
00:49:04,000 --> 00:49:08,000
都是说在一个Linux的hosts外实上跑

1296
00:49:08,000 --> 00:49:10,000
这个应用的场景

1297
00:49:10,000 --> 00:49:11,000
但是我现在就问一下

1298
00:49:11,000 --> 00:49:13,000
如果在开发者在就是想

1299
00:49:13,000 --> 00:49:14,000
展示听说朋友们对这个

1300
00:49:14,000 --> 00:49:15,000
害怕比较感兴趣

1301
00:49:15,000 --> 00:49:16,000
他想去试一下

1302
00:49:16,000 --> 00:49:20,000
他在哪些其他系统上可以去玩

1303
00:49:20,000 --> 00:49:21,000
这个Hyper呢

1304
00:49:21,000 --> 00:49:22,000
因为我们像那个Dalker

1305
00:49:22,000 --> 00:49:25,000
他可以通过一些讯计的方式

1306
00:49:25,000 --> 00:49:27,000
在像Western上也可以跑

1307
00:49:27,000 --> 00:49:28,000
Hyper呢

1308
00:49:28,000 --> 00:49:32,000
Hyper当然也支持麦克网思

1309
00:49:32,000 --> 00:49:33,000
然后

1310
00:49:33,000 --> 00:49:34,000
这个东西

1311
00:49:34,000 --> 00:49:38,000
这个Hyper对于麦克网思的支持

1312
00:49:38,000 --> 00:49:41,000
大概是在这个月

1313
00:49:41,000 --> 00:49:41,000
应该是

1314
00:49:41,000 --> 00:49:43,000
这个月出完成的

1315
00:49:43,000 --> 00:49:45,000
然后我们也在不断地去完善

1316
00:49:45,000 --> 00:49:48,000
然后目前呢

1317
00:49:48,000 --> 00:49:51,000
那个在Hyper在麦克网思上面

1318
00:49:51,000 --> 00:49:57,000
的的Hyper只能用Watchbox一种Hyperizer

1319
00:49:57,000 --> 00:50:00,000
然后如果你要是在

1320
00:50:00,000 --> 00:50:01,000
Ginux上面

1321
00:50:01,000 --> 00:50:04,000
但是你可以用Q-Mill KVM

1322
00:50:04,000 --> 00:50:07,000
正以及Watchbox都可以用

1323
00:50:07,000 --> 00:50:12,000
但是但是因为麦克网思上面

1324
00:50:12,000 --> 00:50:15,000
没有说Q-Mill KVM或者说

1325
00:50:15,000 --> 00:50:18,000
正的这些训练化工具

1326
00:50:18,000 --> 00:50:20,000
所以就没有特别好的办法

1327
00:50:20,000 --> 00:50:21,000
OK

1328
00:50:21,000 --> 00:50:23,000
因为Watchbox的

1329
00:50:23,000 --> 00:50:25,000
其实从这个他的稳定

1330
00:50:25,000 --> 00:50:27,000
可高兴还有他的这个

1331
00:50:27,000 --> 00:50:28,000
性来讲

1332
00:50:28,000 --> 00:50:30,000
就是不算特别好

1333
00:50:30,000 --> 00:50:33,000
特别是在这个

1334
00:50:33,000 --> 00:50:34,000
就是Western上面

1335
00:50:34,000 --> 00:50:36,000
然后今天会遇到

1336
00:50:36,000 --> 00:50:37,000
什么用开了他

1337
00:50:37,000 --> 00:50:38,000
然后就死击了一个情况

1338
00:50:38,000 --> 00:50:39,000
也是有发生

1339
00:50:39,000 --> 00:50:40,000
对对对

1340
00:50:40,000 --> 00:50:42,000
其实最近那个

1341
00:50:42,000 --> 00:50:44,000
我们知道好像是从

1342
00:50:44,000 --> 00:50:46,000
Western是10.29

1343
00:50:46,000 --> 00:50:48,000
还是10.10开始

1344
00:50:48,000 --> 00:50:49,000
他有一个

1345
00:50:49,000 --> 00:50:51,000
就苹果开发了一套

1346
00:50:51,000 --> 00:50:53,000
这个Firmark叫做

1347
00:50:53,000 --> 00:50:55,000
Hypervisor.Firmark

1348
00:50:55,000 --> 00:50:57,000
这套其实他可以在

1349
00:50:57,000 --> 00:51:01,000
Western上实现类似于KVM的功能

1350
00:51:01,000 --> 00:51:01,000
所以我不知道你们

1351
00:51:01,000 --> 00:51:04,000
后续有什么计划会用到他们

1352
00:51:04,000 --> 00:51:07,000
其实我们也得非常关注这个点

1353
00:51:07,000 --> 00:51:08,000
然后目前呢

1354
00:51:08,000 --> 00:51:09,000
有一个开源的工具

1355
00:51:09,000 --> 00:51:11,000
就是X

1356
00:51:11,000 --> 00:51:13,000
就是对对对

1357
00:51:13,000 --> 00:51:15,000
应该也关注过这个非常

1358
00:51:15,000 --> 00:51:17,000
就是之前在Hypervisor.Firmark发出来

1359
00:51:17,000 --> 00:51:18,000
我非常火

1360
00:51:18,000 --> 00:51:20,000
然后关注度也非常高

1361
00:51:22,000 --> 00:51:22,000
我

1362
00:51:22,000 --> 00:51:23,000
就他那个的历史

1363
00:51:23,000 --> 00:51:24,000
还是要追踪到

1364
00:51:24,000 --> 00:51:26,000
那个Soloist上面去对吧

1365
00:51:26,000 --> 00:51:27,000
因为他的前身是一个

1366
00:51:27,000 --> 00:51:29,000
他是一个B-Heavy的Port

1367
00:51:29,000 --> 00:51:30,000
对

1368
00:51:30,000 --> 00:51:30,000
然后

1369
00:51:30,000 --> 00:51:31,000
B-Heavy是在Soloist上

1370
00:51:31,000 --> 00:51:32,000
B-State

1371
00:51:32,000 --> 00:51:33,000
Firmark

1372
00:51:33,000 --> 00:51:34,000
Firmark

1373
00:51:34,000 --> 00:51:35,000
对对

1374
00:51:35,000 --> 00:51:37,000
所以Soloist上面应该是没有的

1375
00:51:37,000 --> 00:51:39,000
OK

1376
00:51:39,000 --> 00:51:41,000
所以这个目前来说

1377
00:51:41,000 --> 00:51:45,000
我们还是跟那个像Docke的发言一样

1378
00:51:45,000 --> 00:51:48,000
在Western上测试开发的时候

1379
00:51:48,000 --> 00:51:51,000
是通过VirtualBox这个训练机

1380
00:51:51,000 --> 00:51:53,000
那里面直接再跑一些

1381
00:51:53,000 --> 00:51:55,000
是跑的这个是Hyper的训练机了

1382
00:51:55,000 --> 00:51:55,000
对吧

1383
00:51:55,000 --> 00:51:58,000
这个就是我们的一个

1384
00:51:58,000 --> 00:51:58,000
废个好

1385
00:51:58,000 --> 00:52:00,000
都好多心思去做的这个东西

1386
00:52:00,000 --> 00:52:01,000
就是我们

1387
00:52:01,000 --> 00:52:04,000
这个Hyper在麦克上面的运行

1388
00:52:04,000 --> 00:52:08,000
和Boot2Docke的运行是不太一样的

1389
00:52:08,000 --> 00:52:09,000
Boot2Docke

1390
00:52:09,000 --> 00:52:12,000
它其实就是一个Docke的个案端

1391
00:52:12,000 --> 00:52:15,000
然后他把他的D-Mens

1392
00:52:15,000 --> 00:52:20,000
射成了VMWaterbox的地址

1393
00:52:20,000 --> 00:52:22,000
然后这个在Waterbox给免

1394
00:52:22,000 --> 00:52:24,000
去运行Docke的D-Mens

1395
00:52:24,000 --> 00:52:26,000
然后他其实相当于通过网络

1396
00:52:26,000 --> 00:52:30,000
然后将这个数据全部显示给Docke的

1397
00:52:30,000 --> 00:52:34,000
又会以为他这是本地运行的

1398
00:52:34,000 --> 00:52:35,000
其实是在Soloist

1399
00:52:35,000 --> 00:52:37,000
都是在NationalBox那个训练机里面的运行

1400
00:52:37,000 --> 00:52:38,000
对对对

1401
00:52:38,000 --> 00:52:39,000
是的

1402
00:52:39,000 --> 00:52:41,000
那你们的方案是怎么的

1403
00:52:41,000 --> 00:52:42,000
我们的方案

1404
00:52:42,000 --> 00:52:45,000
我们的方案其实是跟D-Mens

1405
00:52:45,000 --> 00:52:47,000
它的设计机制是完全一致的

1406
00:52:47,000 --> 00:52:49,000
就是现在我们的HyperD-Mens

1407
00:52:49,000 --> 00:52:51,000
是在麦克网上

1408
00:52:51,000 --> 00:52:53,000
然后我们的HyperCut

1409
00:52:53,000 --> 00:52:55,000
也在麦克网上

1410
00:52:55,000 --> 00:52:58,000
而运行的Docke的一枚质

1411
00:52:58,000 --> 00:53:02,000
是在Waterbox里里面去运行的

1412
00:53:02,000 --> 00:53:06,000
它整个的一个设计似乎是完全和

1413
00:53:06,000 --> 00:53:09,000
例影师上面的Hyper实际似乎是一致的

1414
00:53:10,000 --> 00:53:13,000
所以其实我理解他就说

1415
00:53:13,000 --> 00:53:14,000
在这种情况下

1416
00:53:14,000 --> 00:53:17,000
比如说我在OS10上跑一个

1417
00:53:17,000 --> 00:53:20,000
这个Hyper之后

1418
00:53:20,000 --> 00:53:21,000
他的管理层

1419
00:53:21,000 --> 00:53:22,000
管理层的秘令航空

1420
00:53:22,000 --> 00:53:24,000
都是在OS10的原生的东西

1421
00:53:24,000 --> 00:53:28,000
然后它是控制Waterbox的HyperVaser

1422
00:53:28,000 --> 00:53:30,000
去里面新建一个讯理机

1423
00:53:30,000 --> 00:53:32,000
然后讯理机内核跑的是你们

1424
00:53:32,000 --> 00:53:33,000
这个Hyper定制的

1425
00:53:33,000 --> 00:53:35,000
这个清亮机的GESTOS

1426
00:53:36,000 --> 00:53:37,000
然后里面再跑的一个

1427
00:53:37,000 --> 00:53:39,000
或者是多个Docke的E-Mage

1428
00:53:39,000 --> 00:53:40,000
是这样的

1429
00:53:40,000 --> 00:53:41,000
对

1430
00:53:41,000 --> 00:53:42,000
OK

1431
00:53:42,000 --> 00:53:43,000
现在还真的和那个

1432
00:53:43,000 --> 00:53:45,000
不准Docke的方式非常不一样

1433
00:53:45,000 --> 00:53:48,000
因为Docke你创建一个肯特殊

1434
00:53:48,000 --> 00:53:51,000
它是一个我是把我刺激一个VM

1435
00:53:51,000 --> 00:53:52,000
然后创建两个

1436
00:53:52,000 --> 00:53:54,000
它也是创建三个

1437
00:53:54,000 --> 00:53:55,000
它也是

1438
00:53:55,000 --> 00:53:57,000
它创建肯特殊都是在VM里面

1439
00:53:57,000 --> 00:53:59,000
而我们这种方式

1440
00:53:59,000 --> 00:54:00,000
你创建一个肯特殊

1441
00:54:00,000 --> 00:54:02,000
或者说就多一个VM

1442
00:54:02,000 --> 00:54:02,000
多一个VM

1443
00:54:02,000 --> 00:54:06,000
这个可能会受限于开发者的

1444
00:54:06,000 --> 00:54:07,000
一个机器的一个环境配置

1445
00:54:07,000 --> 00:54:08,000
因为你多个VM

1446
00:54:08,000 --> 00:54:10,000
它毕竟要站CPU

1447
00:54:10,000 --> 00:54:11,000
站Bamory

1448
00:54:11,000 --> 00:54:13,000
这个是一个

1449
00:54:13,000 --> 00:54:14,000
这个

1450
00:54:14,000 --> 00:54:16,000
但是它做很好的一个格计性

1451
00:54:16,000 --> 00:54:17,000
对吧

1452
00:54:17,000 --> 00:54:18,000
OK

1453
00:54:18,000 --> 00:54:22,000
所以这里我要问一个很好

1454
00:54:22,000 --> 00:54:22,000
好玩的问题啊

1455
00:54:22,000 --> 00:54:26,000
就是说那你们为了实现这个材料

1456
00:54:26,000 --> 00:54:27,000
多少VirtualBox

1457
00:54:28,000 --> 00:54:30,000
这个我想

1458
00:54:30,000 --> 00:54:33,000
你应该也会知道VirtualBox

1459
00:54:33,000 --> 00:54:34,000
抗治太多太多

1460
00:54:34,000 --> 00:54:36,000
这是就是

1461
00:54:37,000 --> 00:54:39,000
它的API很难在麦克上面

1462
00:54:39,000 --> 00:54:40,000
因为我们是用构开发的嘛

1463
00:54:40,000 --> 00:54:41,000
所以它的AV

1464
00:54:41,000 --> 00:54:42,000
VirtualBox的API

1465
00:54:42,000 --> 00:54:44,000
很难更够去结合到一起

1466
00:54:44,000 --> 00:54:46,000
所以没办法只能动命更好

1467
00:54:46,000 --> 00:54:47,000
动命好一个另外一个

1468
00:54:48,000 --> 00:54:49,000
问题就是没办法

1469
00:54:49,000 --> 00:54:51,000
监测它的一个数处的一个结果

1470
00:54:51,000 --> 00:54:55,000
所以就是用一些很

1471
00:54:55,000 --> 00:54:57,000
很无奈的办法去直接

1472
00:54:57,000 --> 00:54:59,000
接接它的数处

1473
00:54:59,000 --> 00:55:01,000
这些办法

1474
00:55:01,000 --> 00:55:02,000
另外就是

1475
00:55:03,000 --> 00:55:05,000
布局线于WaterWask的问题

1476
00:55:05,000 --> 00:55:06,000
还有就是

1477
00:55:07,000 --> 00:55:09,000
麦克网斯的问题

1478
00:55:09,000 --> 00:55:11,000
因为中投就是因为刀可

1479
00:55:11,000 --> 00:55:15,000
它的它用了AIR的Fs

1480
00:55:16,000 --> 00:55:16,000
对

1481
00:55:16,000 --> 00:55:19,000
然后它用这个来做AIR的E-Mage

1482
00:55:19,000 --> 00:55:20,000
然后

1483
00:55:21,000 --> 00:55:23,000
来保证足够的快

1484
00:55:23,000 --> 00:55:26,000
然后不至于说直接的烤盆

1485
00:55:26,000 --> 00:55:28,000
然后造成很大的是一个

1486
00:55:28,000 --> 00:55:29,000
时间

1487
00:55:29,000 --> 00:55:30,000
然后呢

1488
00:55:30,000 --> 00:55:32,000
我们在麦克网上面

1489
00:55:32,000 --> 00:55:34,000
其实也想了很多很多办法

1490
00:55:34,000 --> 00:55:36,000
就怎么能够达到

1491
00:55:38,000 --> 00:55:39,000
AIR的这种效果

1492
00:55:39,000 --> 00:55:41,000
所以居然让我们找到了

1493
00:55:41,000 --> 00:55:42,000
WaterWask

1494
00:55:42,000 --> 00:55:43,000
居然能有这种机制

1495
00:55:43,000 --> 00:55:46,000
就是WaterWask其实是

1496
00:55:46,000 --> 00:55:48,000
可以做AIR的Disk

1497
00:55:48,000 --> 00:55:49,000
就是

1498
00:55:49,000 --> 00:55:52,000
它是动过Snapshow的机制

1499
00:55:52,000 --> 00:55:53,000
其实它

1500
00:55:53,000 --> 00:55:54,000
不太一样

1501
00:55:54,000 --> 00:55:56,000
但是也差不多AIR的那次的实验机制

1502
00:55:57,000 --> 00:56:00,000
它是通过PyrantDisk

1503
00:56:00,000 --> 00:56:01,000
其实就是Snapshow

1504
00:56:01,000 --> 00:56:02,000
我觉得

1505
00:56:02,000 --> 00:56:03,000
对

1506
00:56:03,000 --> 00:56:05,000
然后通过这种方式就可以实现

1507
00:56:05,000 --> 00:56:07,000
用AIR的Disk

1508
00:56:09,000 --> 00:56:10,000
你们是这么做的

1509
00:56:10,000 --> 00:56:11,000
好机制啊

1510
00:56:11,000 --> 00:56:12,000
这个办法

1511
00:56:13,000 --> 00:56:15,000
那出来的这个实际的

1512
00:56:15,000 --> 00:56:16,000
就直行效率怎么样

1513
00:56:16,000 --> 00:56:17,000
因为这个可能

1514
00:56:17,000 --> 00:56:19,000
其实因为除非你部署

1515
00:56:19,000 --> 00:56:20,000
其实大部分开发者

1516
00:56:20,000 --> 00:56:21,000
可能还是在像

1517
00:56:21,000 --> 00:56:22,000
这个OSCNN

1518
00:56:22,000 --> 00:56:24,000
有WaterWask的方式来开发

1519
00:56:24,000 --> 00:56:24,000
对

1520
00:56:24,000 --> 00:56:26,000
然后我们目前这种方式的话

1521
00:56:26,000 --> 00:56:27,000
大概

1522
00:56:28,000 --> 00:56:31,000
在运行一个Want to的

1523
00:56:31,000 --> 00:56:32,000
到会以内置

1524
00:56:32,000 --> 00:56:34,000
就整个相来之后

1525
00:56:34,000 --> 00:56:35,000
你下来之后

1526
00:56:36,000 --> 00:56:39,000
运行大概在两分钟

1527
00:56:40,000 --> 00:56:41,000
就是

1528
00:56:41,000 --> 00:56:43,000
从WaterWask的训练创建

1529
00:56:43,000 --> 00:56:44,000
然后开始起来

1530
00:56:44,000 --> 00:56:45,000
对

1531
00:56:45,000 --> 00:56:47,000
你可以直接操作

1532
00:56:47,000 --> 00:56:48,000
两分钟不到两分钟

1533
00:56:48,000 --> 00:56:49,000
不到两分钟

1534
00:56:49,000 --> 00:56:50,000
对

1535
00:56:50,000 --> 00:56:52,000
1900多好秒吧

1536
00:56:52,000 --> 00:56:53,000
OK

1537
00:56:53,000 --> 00:56:54,000
那如这个多年

1538
00:56:54,000 --> 00:56:55,000
两分钟的主要是

1539
00:56:55,000 --> 00:56:56,000
主要是花在哪里

1540
00:56:56,000 --> 00:56:58,000
嗯主要花在了

1541
00:56:58,000 --> 00:56:59,000
其实一部分是

1542
00:57:00,000 --> 00:57:02,000
WaterWask本身的

1543
00:57:02,000 --> 00:57:04,000
设备的一个训练划

1544
00:57:04,000 --> 00:57:05,000
就是它的硬件的

1545
00:57:05,000 --> 00:57:07,000
DVS的一个训练划

1546
00:57:07,000 --> 00:57:08,000
因为它

1547
00:57:08,000 --> 00:57:09,000
就要配置一个

1548
00:57:09,000 --> 00:57:11,000
VSW的训练机出来

1549
00:57:11,000 --> 00:57:12,000
对它这是一部分

1550
00:57:12,000 --> 00:57:13,000
然后另外一部分

1551
00:57:13,000 --> 00:57:15,000
它就是一些硬件的训练划

1552
00:57:15,000 --> 00:57:16,000
就是比如

1553
00:57:16,000 --> 00:57:18,000
我要是创建SATA的盘

1554
00:57:18,000 --> 00:57:20,000
那我只能

1555
00:57:20,000 --> 00:57:22,000
创建SATA的DVS

1556
00:57:22,000 --> 00:57:23,000
而且

1557
00:57:23,000 --> 00:57:25,000
Boss只能是用SATA

1558
00:57:25,000 --> 00:57:27,000
作为Hotplug的DVS

1559
00:57:27,000 --> 00:57:29,000
而呢

1560
00:57:29,000 --> 00:57:32,000
用SATA作为Hotplug的DVS

1561
00:57:32,000 --> 00:57:33,000
的话

1562
00:57:33,000 --> 00:57:34,000
就创建

1563
00:57:34,000 --> 00:57:36,000
时间会会会比较半长

1564
00:57:36,000 --> 00:57:38,000
稍微比SATA的要

1565
00:57:38,000 --> 00:57:41,000
因为SATA它不支持Hotplug

1566
00:57:41,000 --> 00:57:44,000
所以它的机制可能会简单好多

1567
00:57:44,000 --> 00:57:45,000
对

1568
00:57:45,000 --> 00:57:46,000
所以

1569
00:57:46,000 --> 00:57:48,000
就使Hotplug在这些方面

1570
00:57:48,000 --> 00:57:49,000
就比较不耐

1571
00:57:49,000 --> 00:57:51,000
然后另外一个就是

1572
00:57:51,000 --> 00:57:53,000
当然也是有

1573
00:57:53,000 --> 00:57:55,000
GasOS去运行

1574
00:57:55,000 --> 00:57:57,000
当然这个时间没办法

1575
00:57:57,000 --> 00:57:59,000
我们已经极致了去优化

1576
00:57:59,000 --> 00:58:00,000
但是

1577
00:58:00,000 --> 00:58:01,000
但是相比这个

1578
00:58:01,000 --> 00:58:02,000
还是会短短一些

1579
00:58:02,000 --> 00:58:03,000
OK

1580
00:58:03,000 --> 00:58:05,000
所以其实

1581
00:58:05,000 --> 00:58:06,000
就是说如果是在

1582
00:58:06,000 --> 00:58:08,000
Western上开发的话

1583
00:58:08,000 --> 00:58:10,000
用Hotplug最主要的开销

1584
00:58:10,000 --> 00:58:11,000
就是在创建那一块

1585
00:58:11,000 --> 00:58:12,000
然后

1586
00:58:12,000 --> 00:58:14,000
就创建好了之后

1587
00:58:14,000 --> 00:58:17,000
的启动那个某一个Hotplug的训练机

1588
00:58:17,000 --> 00:58:18,000
还是要比

1589
00:58:18,000 --> 00:58:19,000
在就

1590
00:58:19,000 --> 00:58:20,000
在那个时尚原生

1591
00:58:20,000 --> 00:58:21,000
就布数的时候

1592
00:58:21,000 --> 00:58:22,000
那个效能

1593
00:58:22,000 --> 00:58:23,000
比如0.3秒

1594
00:58:23,000 --> 00:58:24,000
要卖一些

1595
00:58:24,000 --> 00:58:25,000
对对对

1596
00:58:25,000 --> 00:58:26,000
因为它本身的

1597
00:58:26,000 --> 00:58:28,000
Waterbox的

1598
00:58:28,000 --> 00:58:30,000
的机制没办法

1599
00:58:30,000 --> 00:58:31,000
OK

1600
00:58:31,000 --> 00:58:33,000
所以这个真的要可能

1601
00:58:33,000 --> 00:58:34,000
要逼得你们去研究

1602
00:58:34,000 --> 00:58:36,000
那个新的Hypervisor Framework

1603
00:58:36,000 --> 00:58:37,000
去解决这个问题

1604
00:58:37,000 --> 00:58:40,000
我们也在时刻关注这个东西

1605
00:58:40,000 --> 00:58:41,000
因为这个东西

1606
00:58:41,000 --> 00:58:44,000
最近的关场来看

1607
00:58:44,000 --> 00:58:46,000
就是原作者可能

1608
00:58:46,000 --> 00:58:47,000
在忙别的

1609
00:58:47,000 --> 00:58:48,000
然后不太开门

1610
00:58:48,000 --> 00:58:51,000
不太有点上心这件事情

1611
00:58:51,000 --> 00:58:53,000
然后我们也带去关注

1612
00:58:53,000 --> 00:58:58,000
希望能够去做一些贡献吧

1613
00:58:58,000 --> 00:58:58,000
但是

1614
00:58:58,000 --> 00:59:01,000
你是说X-Hive的原作者吗

1615
00:59:01,000 --> 00:59:03,000
所以现在我们大概去了解了

1616
00:59:03,000 --> 00:59:06,000
这个Hyper的一个整个它是什么

1617
00:59:06,000 --> 00:59:08,000
然后它相对于一些我们

1618
00:59:08,000 --> 00:59:11,000
已经熟知了一些工具的这么一个

1619
00:59:11,000 --> 00:59:15,000
技术对比它的优劣式在哪里了

1620
00:59:15,000 --> 00:59:17,000
就是说我们其实可能最后还在回到一个

1621
00:59:17,000 --> 00:59:19,000
最关键的问题

1622
00:59:19,000 --> 00:59:22,000
就是说为什么我做了一个网络管理员

1623
00:59:22,000 --> 00:59:24,000
或者这个几房的这个

1624
00:59:24,000 --> 00:59:25,000
这个一个公有云的愿意者

1625
00:59:25,000 --> 00:59:26,000
我要选择Hyper

1626
00:59:26,000 --> 00:59:26,000
对

1627
00:59:26,000 --> 00:59:27,000
所以

1628
00:59:27,000 --> 00:59:29,000
所以你刚才说的一点

1629
00:59:29,000 --> 00:59:30,000
非常非常关键的一点

1630
00:59:30,000 --> 00:59:32,000
就是作为公有云的管理者

1631
00:59:32,000 --> 00:59:35,000
但是作为一个相当于说

1632
00:59:35,000 --> 00:59:38,000
我就内部一个云营或者说测试环境

1633
00:59:38,000 --> 00:59:40,000
我用到一点问题没有

1634
00:59:40,000 --> 00:59:42,000
但是你要是用公有云的话

1635
00:59:42,000 --> 00:59:45,000
你必须要考慮它的安全性问题

1636
00:59:45,000 --> 00:59:46,000
然后

1637
00:59:46,000 --> 00:59:47,000
所以就是

1638
00:59:47,000 --> 00:59:49,000
因为考慮到安全性的问题

1639
00:59:49,000 --> 00:59:53,000
你就必须要考慮

1640
00:59:53,000 --> 00:59:55,000
刀棋它是否能

1641
00:59:55,000 --> 00:59:57,000
怎么能够跟VM去结合

1642
00:59:57,000 --> 01:00:01,000
能够最大效卫的去利用BerMontown的机制

1643
01:00:01,000 --> 01:00:04,000
所以为什么不去尝试Hyper呢

1644
01:00:04,000 --> 01:00:07,000
Hyper其实就是为你为个这种

1645
01:00:07,000 --> 01:00:09,000
公有云的云营商

1646
01:00:09,000 --> 01:00:11,000
天然去解决这个问题

1647
01:00:11,000 --> 01:00:13,000
你又想用刀棋

1648
01:00:13,000 --> 01:00:16,000
因为提供这种基于肯登的一个管理方式

1649
01:00:16,000 --> 01:00:18,000
内容做户的管理方式

1650
01:00:18,000 --> 01:00:20,000
然后就可以用刀棋以Mage

1651
01:00:20,000 --> 01:00:24,000
然后跟刀棋的使用完全没有意义

1652
01:00:24,000 --> 01:00:27,000
但是它的安全性会非常非常好

1653
01:00:27,000 --> 01:00:28,000
那么所以

1654
01:00:28,000 --> 01:00:31,000
这个就是一个很很好的一个机会

1655
01:00:31,000 --> 01:00:33,000
然后去尝试

1656
01:00:33,000 --> 01:00:35,000
所以有一个Hyper其实我们就可以

1657
01:00:35,000 --> 01:00:37,000
达到一个安全的共有的

1658
01:00:37,000 --> 01:00:39,000
其实一个Cus

1659
01:00:39,000 --> 01:00:42,000
Cus就是肯登的Service

1660
01:00:42,000 --> 01:00:45,000
所以我们目前也来提这个概念

1661
01:00:45,000 --> 01:00:46,000
OK

1662
01:00:46,000 --> 01:00:50,000
所以这里就很自然地够度到我们的下一个话题了

1663
01:00:50,000 --> 01:00:52,000
就是说你们的主要的客户

1664
01:00:52,000 --> 01:00:53,000
其实并不是说

1665
01:00:53,000 --> 01:00:56,000
当然你说这个要大家熟悉在它方式的API

1666
01:00:56,000 --> 01:00:57,000
肯定还是要教育用户的

1667
01:00:57,000 --> 01:00:59,000
但是说从你们Customer

1668
01:00:59,000 --> 01:01:00,000
就是谁为你们付钱

1669
01:01:00,000 --> 01:01:01,000
这件事情来讲

1670
01:01:01,000 --> 01:01:04,000
可能还是一些刚才讲的公有云的管理者

1671
01:01:04,000 --> 01:01:05,000
对

1672
01:01:05,000 --> 01:01:09,000
那这就牵试到一个所谓的商业模式的问题

1673
01:01:09,000 --> 01:01:11,000
就是你们这个Hyper这个项目

1674
01:01:11,000 --> 01:01:14,000
你们目前打算是这么去引力呢

1675
01:01:14,000 --> 01:01:17,000
我们目前其实Hyper这个项目主

1676
01:01:17,000 --> 01:01:20,000
还是作为看原项目为主

1677
01:01:20,000 --> 01:01:26,000
这样的话也是希望吸引能够吸引更多的Hike

1678
01:01:26,000 --> 01:01:29,000
或者说有一些Continue者来参与到我们这个项目

1679
01:01:29,000 --> 01:01:32,000
来共同打造一个基于肯登的

1680
01:01:32,000 --> 01:01:35,000
一个或者基于炮的一个社区

1681
01:01:35,000 --> 01:01:40,000
然后我们也是希望能够跟一些

1682
01:01:40,000 --> 01:01:46,000
一些机房或者说一些类似于这种的厂商去合作

1683
01:01:46,000 --> 01:01:49,000
希望能够帮他们去听更好的解放案

1684
01:01:49,000 --> 01:01:51,000
比如说目前我们

1685
01:01:51,000 --> 01:01:55,000
我们成立大概半年多的时间

1686
01:01:55,000 --> 01:01:59,000
其实像国外一个很比较著名的一个野儿创业公司

1687
01:01:59,000 --> 01:02:00,000
把他拍Kate

1688
01:02:00,000 --> 01:02:05,000
然后他其实就已经退出了基于Hyper的一个产品

1689
01:02:05,000 --> 01:02:07,000
对现在现在有出过

1690
01:02:07,000 --> 01:02:08,000
大家也可以去体验

1691
01:02:08,000 --> 01:02:10,000
当然可能要绑个性卡

1692
01:02:10,000 --> 01:02:12,000
就不要麻烦

1693
01:02:12,000 --> 01:02:13,000
对

1694
01:02:13,000 --> 01:02:18,000
他相信对于我们这个有足够长先精神的开发者来说

1695
01:02:18,000 --> 01:02:20,000
这不是一个特别大的难题

1696
01:02:20,000 --> 01:02:23,000
当然你可以自己在自己的

1697
01:02:23,000 --> 01:02:26,000
自己的平台上面去部署

1698
01:02:26,000 --> 01:02:27,000
或者是去体验

1699
01:02:27,000 --> 01:02:28,000
当然也可以

1700
01:02:28,000 --> 01:02:29,000
然后出此之外

1701
01:02:29,000 --> 01:02:33,000
就是跟这种厂商去合作之外

1702
01:02:33,000 --> 01:02:37,000
我们也在自己也在做基于容器的公优员

1703
01:02:37,000 --> 01:02:39,000
就刚才说的Cars

1704
01:02:39,000 --> 01:02:41,000
对你们自己要运一个公优员

1705
01:02:41,000 --> 01:02:42,000
对对对

1706
01:02:42,000 --> 01:02:46,000
其实我们这个目前提的一个方式就是Hyper Stack

1707
01:02:46,000 --> 01:02:48,000
对Hyper Stack

1708
01:02:48,000 --> 01:02:52,000
它其实是构建于Hyper的基础上

1709
01:02:52,000 --> 01:02:56,000
然后结合目前非常有型的Copennetes

1710
01:02:56,000 --> 01:02:59,000
然后OpenStyle以为的一些组件

1711
01:02:59,000 --> 01:03:01,000
比如像Sinder,Nu-Shrin以及Kiss-Dong

1712
01:03:01,000 --> 01:03:07,000
然后将这几个组件结合到一起

1713
01:03:07,000 --> 01:03:09,000
然后形成一个自己的Stack

1714
01:03:09,000 --> 01:03:14,000
也是希望能够打到整个的圣态一个演

1715
01:03:14,000 --> 01:03:17,000
然后我们已经提了这个破坡走

1716
01:03:17,000 --> 01:03:20,000
然后目前也带去组织人手去打造

1717
01:03:20,000 --> 01:03:22,000
OK

1718
01:03:22,000 --> 01:03:24,000
这里就设置到最开始的一个问题

1719
01:03:24,000 --> 01:03:28,000
就是说因为当时我看你们Hyper到Shr的网站上

1720
01:03:28,000 --> 01:03:31,000
也有因为只有一个英文的介绍

1721
01:03:31,000 --> 01:03:33,000
并没有几个中文的任何介绍

1722
01:03:33,000 --> 01:03:37,000
这个你们商业模型和剧客户选择有关系

1723
01:03:37,000 --> 01:03:46,000
对我们目前的一个打算就是希望能够吸引更多国外的场上

1724
01:03:46,000 --> 01:03:51,000
然后去跟他们去竞争或者说去合作

1725
01:03:51,000 --> 01:03:58,000
然后之前的一个考慮就是国内对于开源项目的支持

1726
01:03:58,000 --> 01:04:03,000
或者说合作不是特别大胆或者不是特别明显

1727
01:04:03,000 --> 01:04:07,000
所以也考一道这些问题吧

1728
01:04:07,000 --> 01:04:12,000
就是在前期做一个创业公司可能用一种最保险

1729
01:04:12,000 --> 01:04:16,000
或者说最妥占的办法吧

1730
01:04:16,000 --> 01:04:18,000
OK

1731
01:04:18,000 --> 01:04:20,000
所以其实就很面临

1732
01:04:20,000 --> 01:04:22,000
刚才我们那个一个很尴尬的情况

1733
01:04:22,000 --> 01:04:24,000
就是中国网络就是说

1734
01:04:24,000 --> 01:04:26,000
其实并不如美国好

1735
01:04:26,000 --> 01:04:29,000
就是从这个就是这个

1736
01:04:29,000 --> 01:04:32,000
就是积防啊 云的建设这个就是比较落后的

1737
01:04:33,000 --> 01:04:37,000
那同时在我们能够数得出来的好国内的一些共产允议者

1738
01:04:37,000 --> 01:04:38,000
也就是那么几家

1739
01:04:38,000 --> 01:04:38,000
对

1740
01:04:38,000 --> 01:04:41,000
把像什么阿里云 陈续云

1741
01:04:41,000 --> 01:04:41,000
还有什么

1742
01:04:41,000 --> 01:04:43,000
美团 青云

1743
01:04:43,000 --> 01:04:46,000
美团 青云以前还有那京东云好像也有

1744
01:04:46,000 --> 01:04:46,000
现在还在吗

1745
01:04:46,000 --> 01:04:48,000
现在现在好像关闭了

1746
01:04:48,000 --> 01:04:49,000
关掉了

1747
01:04:49,000 --> 01:04:56,000
然后他们其实并没有说到了那个足够大胆常试这种新技术的时候

1748
01:04:56,000 --> 01:04:57,000
对

1749
01:04:57,000 --> 01:05:00,000
所以你们选择先去开拓这个海外试试

1750
01:05:00,000 --> 01:05:05,000
然后等这个在这个业终好模式和这个技术程度之后

1751
01:05:05,000 --> 01:05:11,000
在想办法能够国内的这些云场商也能够或者说出一些新的这个小的云场商

1752
01:05:11,000 --> 01:05:13,000
也能够采用那个hyper的技术

1753
01:05:13,000 --> 01:05:14,000
对对对

1754
01:05:14,000 --> 01:05:15,000
哎 没错

1755
01:05:15,000 --> 01:05:18,000
所以你们在海外的目前的一些合作伙伴

1756
01:05:18,000 --> 01:05:20,000
就刚才你提到出了那个Packet

1757
01:05:20,000 --> 01:05:23,000
这个也是一个比较新和比较酷的

1758
01:05:23,000 --> 01:05:28,000
这个云共云的云上之外还要哪些是你们在目前是在有这个深度合作

1759
01:05:28,000 --> 01:05:30,000
我们现在比较合作的比较多的想振

1760
01:05:30,000 --> 01:05:31,000
振的

1761
01:05:31,000 --> 01:05:32,000
振的

1762
01:05:32,000 --> 01:05:36,000
门坤的和Devapar我们都有非常多的接触

1763
01:05:36,000 --> 01:05:40,000
然后之前参加了振的Devapar三密

1764
01:05:40,000 --> 01:05:42,000
然后去跟他们去交给我

1765
01:05:43,000 --> 01:05:44,000
他们也非常支持

1766
01:05:44,000 --> 01:05:47,000
hyper对振的一个支持

1767
01:05:48,000 --> 01:05:51,000
希望能够去共同看讨

1768
01:05:51,000 --> 01:05:54,000
能够把这个性能了或者说

1769
01:05:55,000 --> 01:05:56,000
体验多到足够的好

1770
01:05:56,000 --> 01:06:01,000
我也振还是说是是是我们一个非常非常重要的一个 partner

1771
01:06:01,000 --> 01:06:05,000
然后他们对我们在底层技术上面的一个

1772
01:06:05,000 --> 01:06:09,000
在或者说在hyper振上的支持还是挺多的

1773
01:06:09,000 --> 01:06:10,000
ok

1774
01:06:10,000 --> 01:06:10,000
对

1775
01:06:11,000 --> 01:06:11,000
明白

1776
01:06:12,000 --> 01:06:16,000
所以就是还是一个非常值得让人激动的一个合作

1777
01:06:16,000 --> 01:06:16,000
对

1778
01:06:16,000 --> 01:06:19,000
因为认识我们一个很非常传统的这个

1779
01:06:20,000 --> 01:06:22,000
虚拟期的这个hyper振

1780
01:06:22,000 --> 01:06:25,000
我记得好像AWS就是基于振做的

1781
01:06:25,000 --> 01:06:25,000
对

1782
01:06:26,000 --> 01:06:29,000
现在是一个你是非常对这件技术

1783
01:06:29,000 --> 01:06:30,000
ok

1784
01:06:30,000 --> 01:06:32,000
刚刚我们讲完了这个hyper这个产品

1785
01:06:32,000 --> 01:06:34,000
然后包括你们商量模式

1786
01:06:34,000 --> 01:06:35,000
其实现在我们聊到这

1787
01:06:35,000 --> 01:06:38,000
其实我觉得我个人来说最关心的方

1788
01:06:38,000 --> 01:06:40,000
这个领域就是这个团队

1789
01:06:40,000 --> 01:06:42,000
那个三个你可以大概介绍一下

1790
01:06:42,000 --> 01:06:43,000
你们现在做这个hyper这个 team

1791
01:06:43,000 --> 01:06:45,000
大概怎么样情况吗

1792
01:06:45,000 --> 01:06:47,000
我们现在的开发者是五个人

1793
01:06:47,000 --> 01:06:49,000
然后五个人

1794
01:06:49,000 --> 01:06:49,000
五个人

1795
01:06:49,000 --> 01:06:50,000
这么小

1796
01:06:51,000 --> 01:06:53,000
所以就是每天还是挺王务的

1797
01:06:54,000 --> 01:06:57,000
然后一个人做负责hypersize

1798
01:06:57,000 --> 01:06:58,000
一个相关的东西

1799
01:06:58,000 --> 01:07:01,000
然后另外就是主要集中在hyper的

1800
01:07:01,000 --> 01:07:02,000
这个核心产品

1801
01:07:02,000 --> 01:07:06,000
然后足够就是新的feature的开发

1802
01:07:06,000 --> 01:07:07,000
以及FIX一些Bug

1803
01:07:08,000 --> 01:07:10,000
然后因为毕竟开完代码

1804
01:07:10,000 --> 01:07:13,000
也是希望能够让代码质量足够的优质

1805
01:07:15,000 --> 01:07:15,000
对

1806
01:07:15,000 --> 01:07:18,000
然后给我们外有三个人做

1807
01:07:18,000 --> 01:07:20,000
是负责毕竟相关的东西

1808
01:07:20,000 --> 01:07:22,000
然后做一些

1809
01:07:22,000 --> 01:07:24,000
因为毕竟是海外市场

1810
01:07:24,000 --> 01:07:25,000
所以我们有一些

1811
01:07:26,000 --> 01:07:27,000
乖的朋友

1812
01:07:27,000 --> 01:07:28,000
然后去一句帮忙退

1813
01:07:28,000 --> 01:07:30,000
或者支持这些东西

1814
01:07:31,000 --> 01:07:32,000
所以整个团队

1815
01:07:32,000 --> 01:07:34,000
其实加起来也不超过10个人

1816
01:07:34,000 --> 01:07:35,000
对

1817
01:07:36,000 --> 01:07:37,000
非常非常小

1818
01:07:37,000 --> 01:07:38,000
然后经厅汉的一个团队

1819
01:07:38,000 --> 01:07:40,000
但是我们的团队

1820
01:07:40,000 --> 01:07:41,000
还是

1821
01:07:41,000 --> 01:07:43,000
战斗力还是挺强的

1822
01:07:44,000 --> 01:07:44,000
OK

1823
01:07:44,000 --> 01:07:47,000
所以当初你是怎么加入到这个团队

1824
01:07:47,000 --> 01:07:48,000
里面去的

1825
01:07:48,000 --> 01:07:52,000
因为当时其实还是刀块还是挺火的

1826
01:07:52,000 --> 01:07:53,000
我也对

1827
01:07:54,000 --> 01:07:55,000
讯议化

1828
01:07:55,000 --> 01:07:57,000
因为我毕竟之前是做存储的

1829
01:07:57,000 --> 01:07:59,000
但是我对讯议化的这一块

1830
01:07:59,000 --> 01:08:00,000
还是比较感兴趣

1831
01:08:00,000 --> 01:08:01,000
所以希望

1832
01:08:01,000 --> 01:08:02,000
能够

1833
01:08:03,000 --> 01:08:05,000
进入到这个给域吧

1834
01:08:05,000 --> 01:08:06,000
然后看到

1835
01:08:07,000 --> 01:08:09,000
网上有一个招骗吧

1836
01:08:09,000 --> 01:08:10,000
然后大概

1837
01:08:11,000 --> 01:08:14,000
可能一个想做一个基于讯议化

1838
01:08:14,000 --> 01:08:17,000
或者基于一个容器的一个OS

1839
01:08:17,000 --> 01:08:18,000
然后也

1840
01:08:18,000 --> 01:08:20,000
想深入了去表演

1841
01:08:20,000 --> 01:08:21,000
想大概就

1842
01:08:21,000 --> 01:08:22,000
话就认识

1843
01:08:22,000 --> 01:08:23,000
然后就就表表表表

1844
01:08:23,000 --> 01:08:24,000
后来

1845
01:08:24,000 --> 01:08:25,000
当然随着

1846
01:08:25,000 --> 01:08:26,000
随着随着

1847
01:08:26,000 --> 01:08:28,000
随着社区的变化

1848
01:08:28,000 --> 01:08:29,000
或者说

1849
01:08:29,000 --> 01:08:31,000
现在的变化可能当时的想法

1850
01:08:31,000 --> 01:08:32,000
慢慢在调整

1851
01:08:33,000 --> 01:08:33,000
那么一地

1852
01:08:34,000 --> 01:08:36,000
做出了现在的产品

1853
01:08:36,000 --> 01:08:36,000
对

1854
01:08:37,000 --> 01:08:38,000
所以你是在哪里看到

1855
01:08:38,000 --> 01:08:39,000
他们的照片广告

1856
01:08:40,000 --> 01:08:41,000
是在

1857
01:08:41,000 --> 01:08:42,000
WitWax

1858
01:08:42,000 --> 01:08:43,000
对

1859
01:08:43,000 --> 01:08:44,000
OK

1860
01:08:45,000 --> 01:08:46,000
WitWax跟我们节目的关系

1861
01:08:46,000 --> 01:08:48,000
还是挺密切的

1862
01:08:48,000 --> 01:08:50,000
因为每期节目都会上面发我们的这个节目

1863
01:08:50,000 --> 01:08:52,000
介绍了连接

1864
01:08:52,000 --> 01:08:54,000
然后这个WitWax的这个

1865
01:08:54,000 --> 01:08:55,000
Liver也非常

1866
01:08:55,000 --> 01:08:56,000
很Nice

1867
01:08:56,000 --> 01:08:57,000
给我免费在

1868
01:08:58,000 --> 01:09:00,000
那个Porkass那个分类里面

1869
01:09:00,000 --> 01:09:02,000
加了一个侧栏的广告

1870
01:09:02,000 --> 01:09:04,000
也非常感谢他们

1871
01:09:04,000 --> 01:09:05,000
对

1872
01:09:05,000 --> 01:09:06,000
不这个也是

1873
01:09:06,000 --> 01:09:08,000
就国内一个比较好的这个程序

1874
01:09:08,000 --> 01:09:09,000
对

1875
01:09:09,000 --> 01:09:09,000
对

1876
01:09:09,000 --> 01:09:10,000
开发的一个社区

1877
01:09:10,000 --> 01:09:10,000
对

1878
01:09:10,000 --> 01:09:12,000
所以其实你在上面

1879
01:09:12,000 --> 01:09:13,000
能找到他们也是其实

1880
01:09:13,000 --> 01:09:15,000
也是一料之内吧

1881
01:09:15,000 --> 01:09:17,000
然后其实

1882
01:09:17,000 --> 01:09:19,000
之前就一直在关注

1883
01:09:19,000 --> 01:09:20,000
我没想到没想到

1884
01:09:20,000 --> 01:09:22,000
就在那去结园了

1885
01:09:23,000 --> 01:09:25,000
这个还是挺几点巧合的事

1886
01:09:25,000 --> 01:09:26,000
对

1887
01:09:26,000 --> 01:09:26,000
对

1888
01:09:26,000 --> 01:09:28,000
大家是多混这个社区会比较好

1889
01:09:29,000 --> 01:09:29,000
对

1890
01:09:29,000 --> 01:09:30,000
其实这圈子还是挺小的

1891
01:09:30,000 --> 01:09:31,000
OK

1892
01:09:31,000 --> 01:09:33,000
所以你们现在这么一个小

1893
01:09:33,000 --> 01:09:34,000
五个人的开发团队

1894
01:09:34,000 --> 01:09:35,000
你们这个工作模式

1895
01:09:35,000 --> 01:09:37,000
大概怎么样子呢

1896
01:09:37,000 --> 01:09:41,000
我们现在的工作模式大概就是

1897
01:09:41,000 --> 01:09:43,000
现在于我们五个开发

1898
01:09:43,000 --> 01:09:45,000
我的DiPad然后分布在

1899
01:09:46,000 --> 01:09:47,000
南京

1900
01:09:47,000 --> 01:09:48,000
上海

1901
01:09:48,000 --> 01:09:48,000
北京

1902
01:09:48,000 --> 01:09:50,000
然后其实是一个相当于

1903
01:09:50,000 --> 01:09:52,000
沦沫特沃的一个工作方式

1904
01:09:52,000 --> 01:09:54,000
大家平常沟通就是

1905
01:09:55,000 --> 01:09:58,000
Tiger and 以及吹恶的一个

1906
01:09:58,000 --> 01:09:59,000
一种方式

1907
01:09:59,000 --> 01:10:00,000
所以其实你们五个人

1908
01:10:00,000 --> 01:10:02,000
并不是在一个地方的

1909
01:10:02,000 --> 01:10:03,000
对

1910
01:10:03,000 --> 01:10:03,000
不是在一个地方

1911
01:10:03,000 --> 01:10:04,000
然后你们都是在

1912
01:10:04,000 --> 01:10:06,000
那你们会在家里工作吗

1913
01:10:06,000 --> 01:10:07,000
还是去到哪里办公

1914
01:10:08,000 --> 01:10:09,000
主要还是在家里办公

1915
01:10:09,000 --> 01:10:10,000
然后这样的话

1916
01:10:10,000 --> 01:10:12,000
接省一些交通上的

1917
01:10:12,000 --> 01:10:14,000
时间的成本吧

1918
01:10:14,000 --> 01:10:15,000
对

1919
01:10:15,000 --> 01:10:16,000
这个好爽的

1920
01:10:16,000 --> 01:10:16,000
因为

1921
01:10:16,000 --> 01:10:17,000
其实我让每个人

1922
01:10:17,000 --> 01:10:19,000
可能最高效的时段

1923
01:10:19,000 --> 01:10:19,000
是不一样的

1924
01:10:19,000 --> 01:10:21,000
然后浪费的交通上

1925
01:10:21,000 --> 01:10:21,000
这个事情也非常大的

1926
01:10:21,000 --> 01:10:23,000
不爽的事情

1927
01:10:23,000 --> 01:10:23,000
对

1928
01:10:23,000 --> 01:10:23,000
对

1929
01:10:23,000 --> 01:10:24,000
有有性像

1930
01:10:24,000 --> 01:10:26,000
我在北京这种城市

1931
01:10:26,000 --> 01:10:27,000
这么大

1932
01:10:27,000 --> 01:10:28,000
然后

1933
01:10:28,000 --> 01:10:29,000
人籍人的这种

1934
01:10:30,000 --> 01:10:32,000
真是有点难受

1935
01:10:32,000 --> 01:10:33,000
所有的

1936
01:10:33,000 --> 01:10:34,000
这个鞋带码的

1937
01:10:34,000 --> 01:10:35,000
灵感和激情都

1938
01:10:35,000 --> 01:10:37,000
模明在老公交车上

1939
01:10:37,000 --> 01:10:38,000
对

1940
01:10:38,000 --> 01:10:38,000
所以

1941
01:10:39,000 --> 01:10:40,000
当然有

1942
01:10:40,000 --> 01:10:40,000
远程办公

1943
01:10:40,000 --> 01:10:41,000
其实

1944
01:10:41,000 --> 01:10:42,000
是

1945
01:10:42,000 --> 01:10:43,000
当然也是比较吸引我的

1946
01:10:43,000 --> 01:10:44,000
一种方式

1947
01:10:44,000 --> 01:10:45,000
大家希望

1948
01:10:45,000 --> 01:10:46,000
能够

1949
01:10:46,000 --> 01:10:47,000
更高效的

1950
01:10:47,000 --> 01:10:48,000
寻给你时间吧

1951
01:10:48,000 --> 01:10:49,000
好

1952
01:10:49,000 --> 01:10:49,000
ok

1953
01:10:49,000 --> 01:10:50,000
所以你们

1954
01:10:50,000 --> 01:10:52,000
五个人在这个远程工作中

1955
01:10:52,000 --> 01:10:53,000
你看看提到了有

1956
01:10:53,000 --> 01:10:54,000
这个tellagram

1957
01:10:54,000 --> 01:10:55,000
这个用来实施

1958
01:10:55,000 --> 01:10:56,000
这个是群组聊天对吧

1959
01:10:56,000 --> 01:10:57,000
对

1960
01:10:57,000 --> 01:10:58,000
然后还要像那个是

1961
01:10:58,000 --> 01:10:59,000
哎

1962
01:10:59,000 --> 01:11:00,000
是用那个什么工具来看

1963
01:11:00,000 --> 01:11:01,000
呃

1964
01:11:01,000 --> 01:11:02,000
吹

1965
01:11:02,000 --> 01:11:03,000
吹

1966
01:11:03,000 --> 01:11:03,000
吹嘍

1967
01:11:03,000 --> 01:11:03,000
吹嘍

1968
01:11:03,000 --> 01:11:05,000
吹嘍做那个鞋座

1969
01:11:05,000 --> 01:11:06,000
对 鞋座

1970
01:11:06,000 --> 01:11:06,000
对

1971
01:11:06,000 --> 01:11:06,000
所以

1972
01:11:06,000 --> 01:11:08,000
那你们像带码管理

1973
01:11:08,000 --> 01:11:09,000
还有其他那些工具

1974
01:11:09,000 --> 01:11:10,000
大概是会用到哪些呢

1975
01:11:11,000 --> 01:11:12,000
那么管理的话

1976
01:11:12,000 --> 01:11:13,000
就是github

1977
01:11:13,000 --> 01:11:14,000
ok

1978
01:11:14,000 --> 01:11:14,000
对

1979
01:11:14,000 --> 01:11:15,000
然后我们之前是

1980
01:11:16,000 --> 01:11:17,000
发布之前

1981
01:11:17,000 --> 01:11:18,000
是prolway的

1982
01:11:18,000 --> 01:11:18,000
锐炮

1983
01:11:18,000 --> 01:11:20,000
然后现在是公开

1984
01:11:20,000 --> 01:11:21,000
大家也可以去

1985
01:11:21,000 --> 01:11:23,000
我们的官网上

1986
01:11:23,000 --> 01:11:25,000
以及去github的网页上

1987
01:11:25,000 --> 01:11:26,000
去关注我们的项目

1988
01:11:26,000 --> 01:11:27,000
多多点赞

1989
01:11:27,000 --> 01:11:28,000
ok

1990
01:11:28,000 --> 01:11:29,000
那个

1991
01:11:29,000 --> 01:11:30,000
那个项目的地址

1992
01:11:30,000 --> 01:11:31,000
还要包括github的地址

1993
01:11:31,000 --> 01:11:32,000
我们会稍后会放到这个

1994
01:11:32,000 --> 01:11:33,000
sheno子

1995
01:11:33,000 --> 01:11:34,000
你们大家就可以看好

1996
01:11:34,000 --> 01:11:35,000
这里可以其实

1997
01:11:35,000 --> 01:11:36,000
可以接着聊一下

1998
01:11:36,000 --> 01:11:37,000
就是

1999
01:11:37,000 --> 01:11:38,000
你们这个

2000
01:11:38,000 --> 01:11:39,000
这个在github上面

2001
01:11:39,000 --> 01:11:40,000
鞋座的模式

2002
01:11:40,000 --> 01:11:42,000
你们是一个会是一个

2003
01:11:42,000 --> 01:11:43,000
大概是一种什么两个过程的

2004
01:11:43,000 --> 01:11:44,000
可以大概聊属一下吗

2005
01:11:46,000 --> 01:11:48,000
目前的过程就是

2006
01:11:48,000 --> 01:11:50,000
现在已经过完之前的

2007
01:11:50,000 --> 01:11:51,000
风秘开发的一个过程

2008
01:11:51,000 --> 01:11:52,000
所以现在的

2009
01:11:53,000 --> 01:11:55,000
进进派式的模式

2010
01:11:55,000 --> 01:11:56,000
还是跟

2011
01:11:57,000 --> 01:11:59,000
比较比较正规

2012
01:11:59,000 --> 01:12:00,000
然后

2013
01:12:00,000 --> 01:12:02,000
有派式的话是tpr

2014
01:12:02,000 --> 01:12:03,000
然后

2015
01:12:04,000 --> 01:12:04,000
2

2016
01:12:04,000 --> 01:12:06,000
1到2个人去

2017
01:12:06,000 --> 01:12:07,000
如果没问题的话

2018
01:12:07,000 --> 01:12:09,000
才可以摸着

2019
01:12:09,000 --> 01:12:11,000
这的话就保证了

2020
01:12:11,000 --> 01:12:12,000
质量以及

2021
01:12:13,000 --> 01:12:13,000
效率

2022
01:12:13,000 --> 01:12:15,000
然后会有一些

2023
01:12:15,000 --> 01:12:16,000
第三方的工具

2024
01:12:18,000 --> 01:12:19,000
就是就是我们会写了一些

2025
01:12:19,000 --> 01:12:21,000
脚本当然没有

2026
01:12:21,000 --> 01:12:23,000
也在不断的完善过程中

2027
01:12:23,000 --> 01:12:24,000
希望能够

2028
01:12:24,000 --> 01:12:25,000
在

2029
01:12:26,000 --> 01:12:27,000
有pr的时候

2030
01:12:27,000 --> 01:12:28,000
触发一些

2031
01:12:28,000 --> 01:12:29,000
这种化的检测

2032
01:12:29,000 --> 01:12:30,000
当成些工具

2033
01:12:30,000 --> 01:12:31,000
ok

2034
01:12:31,000 --> 01:12:32,000
所以就大家来说

2035
01:12:32,000 --> 01:12:34,000
就是还是一个标准的一个

2036
01:12:34,000 --> 01:12:35,000
github开连项目的流程

2037
01:12:35,000 --> 01:12:36,000
对对对

2038
01:12:36,000 --> 01:12:37,000
通过pr

2039
01:12:37,000 --> 01:12:38,000
驱动这个

2040
01:12:38,000 --> 01:12:39,000
这个feature还有box

2041
01:12:39,000 --> 01:12:40,000
dex

2042
01:12:40,000 --> 01:12:41,000
然后进行

2043
01:12:42,000 --> 01:12:43,000
就

2044
01:12:43,000 --> 01:12:45,000
比今天这个coded review

2045
01:12:45,000 --> 01:12:46,000
然后大家慢慢对接

2046
01:12:46,000 --> 01:12:48,000
coded看你说你们是还没有

2047
01:12:48,000 --> 01:12:50,000
做完全自动化的qa是吧

2048
01:12:50,000 --> 01:12:53,000
对还没有做完全自动化的qa

2049
01:12:53,000 --> 01:12:55,000
但是就是手动化的测试

2050
01:12:55,000 --> 01:12:57,000
都会做这是标配

2051
01:12:57,000 --> 01:12:58,000
然后

2052
01:12:58,000 --> 01:13:00,000
因为够本身做了一些

2053
01:13:00,000 --> 01:13:01,000
它有unitats

2054
01:13:01,000 --> 01:13:02,000
所以这个的话

2055
01:13:02,000 --> 01:13:04,000
因为当时开发时间标几

2056
01:13:04,000 --> 01:13:07,000
然后我们这个有的一些

2057
01:13:07,000 --> 01:13:09,000
coded可能没有

2058
01:13:09,000 --> 01:13:09,000
太完善

2059
01:13:09,000 --> 01:13:12,000
所以这里的不断完善

2060
01:13:12,000 --> 01:13:13,000
就这个可能需要

2061
01:13:13,000 --> 01:13:14,000
也就你们一个

2062
01:13:14,000 --> 01:13:15,000
一方面你们自己努力

2063
01:13:15,000 --> 01:13:16,000
另外一方面就是看

2064
01:13:16,000 --> 01:13:17,000
能不能开开社区

2065
01:13:17,000 --> 01:13:18,000
能贡献一些了

2066
01:13:18,000 --> 01:13:19,000
对对

2067
01:13:19,000 --> 01:13:21,000
因为我 我们的人手实在是太少

2068
01:13:23,000 --> 01:13:24,000
也有意思

2069
01:13:24,000 --> 01:13:25,000
这里刚才也提到了

2070
01:13:25,000 --> 01:13:27,000
这个hyper跟到可一样

2071
01:13:27,000 --> 01:13:29,000
都是基于用购云开发的

2072
01:13:30,000 --> 01:13:32,000
就是当初你们为什么选择用购云

2073
01:13:33,000 --> 01:13:34,000
我们之前选择购云

2074
01:13:34,000 --> 01:13:35,000
其实

2075
01:13:36,000 --> 01:13:39,000
也是也是靠回到了

2076
01:13:40,000 --> 01:13:41,000
跟到可的一个关系

2077
01:13:41,000 --> 01:13:42,000
因为

2078
01:13:43,000 --> 01:13:44,000
就泡泡泡开

2079
01:13:44,000 --> 01:13:45,000
够原本身的一些特性

2080
01:13:45,000 --> 01:13:46,000
比如病发

2081
01:13:46,000 --> 01:13:48,000
它的高效的开发

2082
01:13:48,000 --> 01:13:49,000
等等一些特性

2083
01:13:49,000 --> 01:13:51,000
另外一方面就是

2084
01:13:51,000 --> 01:13:53,000
我们其实最开始的版本

2085
01:13:53,000 --> 01:13:55,000
是基于到可低门来做

2086
01:13:55,000 --> 01:13:56,000
然后

2087
01:13:56,000 --> 01:13:59,000
因为到可低门会

2088
01:13:59,000 --> 01:14:02,000
我们用到到可低门去

2089
01:14:02,000 --> 01:14:04,000
铺它的

2090
01:14:04,000 --> 01:14:05,000
刀块的一枚纸

2091
01:14:05,000 --> 01:14:07,000
来 铺向来

2092
01:14:07,000 --> 01:14:08,000
然后去

2093
01:14:09,000 --> 01:14:12,000
把这个文件全部传给hyper类似

2094
01:14:12,000 --> 01:14:13,000
然后在过程中的可能

2095
01:14:13,000 --> 01:14:14,000
用购云

2096
01:14:14,000 --> 01:14:16,000
直接跟到处低门去交互

2097
01:14:16,000 --> 01:14:18,000
这样的话是更爽事

2098
01:14:18,000 --> 01:14:19,000
更简单

2099
01:14:19,000 --> 01:14:20,000
啊 简单

2100
01:14:20,000 --> 01:14:21,000
对

2101
01:14:21,000 --> 01:14:22,000
所以但是随着

2102
01:14:22,000 --> 01:14:26,000
后来我们移除了刀块的低门的一个阴暗

2103
01:14:26,000 --> 01:14:28,000
其实用其他云

2104
01:14:28,000 --> 01:14:29,000
当然也可以

2105
01:14:29,000 --> 01:14:31,000
就是可能也历史原因问题

2106
01:14:31,000 --> 01:14:33,000
就是我们继续演用这个

2107
01:14:34,000 --> 01:14:34,000
购云

2108
01:14:34,000 --> 01:14:35,000
ok

2109
01:14:35,000 --> 01:14:37,000
那所以其实你们在这个使用

2110
01:14:37,000 --> 01:14:40,000
够写这个hyper过程中

2111
01:14:40,000 --> 01:14:41,000
你们遇到了什么样的问题

2112
01:14:41,000 --> 01:14:43,000
或者什么心得可以分享吗

2113
01:14:44,000 --> 01:14:46,000
其实购云还是

2114
01:14:46,000 --> 01:14:48,000
从于法上还是有些坑的

2115
01:14:48,000 --> 01:14:50,000
比如说呢

2116
01:14:50,000 --> 01:14:51,000
比如说

2117
01:14:51,000 --> 01:14:53,000
写购写时间长

2118
01:14:53,000 --> 01:14:56,000
写C都不加分号了

2119
01:14:57,000 --> 01:14:58,000
这个是好事

2120
01:15:00,000 --> 01:15:01,000
好吧

2121
01:15:02,000 --> 01:15:04,000
然后另外一些可能就是

2122
01:15:04,000 --> 01:15:05,000
本身够远

2123
01:15:05,000 --> 01:15:09,000
因为他刚最近刚发布的是1.6

2124
01:15:09,000 --> 01:15:11,000
还是之前是1.5

2125
01:15:11,000 --> 01:15:12,000
对 1.5

2126
01:15:12,000 --> 01:15:13,000
然后1.5的一个版本

2127
01:15:13,000 --> 01:15:15,000
他其实有一些东西

2128
01:15:15,000 --> 01:15:17,000
还是做的不够晚上的

2129
01:15:17,000 --> 01:15:19,000
然后我们

2130
01:15:19,000 --> 01:15:21,000
这过程中也是彩虎不长康

2131
01:15:21,000 --> 01:15:23,000
然后用其他方式去转换

2132
01:15:23,000 --> 01:15:24,000
但是可能效果上面

2133
01:15:24,000 --> 01:15:26,000
不如那个有优势

2134
01:15:26,000 --> 01:15:27,000
但是这个可能就是

2135
01:15:27,000 --> 01:15:28,000
我玩相关的东西

2136
01:15:28,000 --> 01:15:30,000
比如在卖上面的

2137
01:15:30,000 --> 01:15:32,000
的一些特选他够远

2138
01:15:32,000 --> 01:15:34,000
是调用内合的一些东西还是吗

2139
01:15:35,000 --> 01:15:36,000
是C6靠的东西

2140
01:15:37,000 --> 01:15:39,000
支持了不够晚转

2141
01:15:39,000 --> 01:15:40,000
好 OK

2142
01:15:40,000 --> 01:15:42,000
然后所以就必须用其他一种

2143
01:15:42,000 --> 01:15:43,000
更加

2144
01:15:44,000 --> 01:15:45,000
创新的方式去做

2145
01:15:45,000 --> 01:15:47,000
明白明白

2146
01:15:47,000 --> 01:15:48,000
对对对

2147
01:15:48,000 --> 01:15:49,000
所以其实像

2148
01:15:49,000 --> 01:15:51,000
Hyper除了用够远写大部分之外

2149
01:15:51,000 --> 01:15:53,000
你还用到其他远去编写

2150
01:15:53,000 --> 01:15:55,000
其他一些小部分的过程

2151
01:15:55,000 --> 01:15:57,000
还是说这个纯够的一个项目

2152
01:15:57,000 --> 01:16:02,000
我们在盖搜瓦克里面是C的东西

2153
01:16:02,000 --> 01:16:06,000
内部是需要做的哪些工作是要用C的

2154
01:16:06,000 --> 01:16:07,000
必须用C的完成

2155
01:16:08,000 --> 01:16:09,000
其实也不是说

2156
01:16:09,000 --> 01:16:10,000
必须要用C的完成

2157
01:16:10,000 --> 01:16:13,000
只不过用C可能像会更快的盖搜瓦克里面

2158
01:16:13,000 --> 01:16:14,000
它其实就是一个

2159
01:16:16,000 --> 01:16:17,000
增就是

2160
01:16:18,000 --> 01:16:21,000
现在于修改过的一粒的长讯

2161
01:16:21,000 --> 01:16:24,000
然后它是可以解析这项格式

2162
01:16:24,000 --> 01:16:26,000
因为它这样的话是

2163
01:16:27,000 --> 01:16:30,000
通过这项的信消息

2164
01:16:30,000 --> 01:16:33,000
来跟HyperD们去交互

2165
01:16:33,000 --> 01:16:37,000
到了达到一个传输数据或者是通信的效果

2166
01:16:37,000 --> 01:16:38,000
这个有点意思

2167
01:16:38,000 --> 01:16:40,000
就是你们这个GuestOS

2168
01:16:40,000 --> 01:16:42,000
你们还有一个自己定义的一粒程序

2169
01:16:42,000 --> 01:16:45,000
这个好像现在好像比较常见的

2170
01:16:45,000 --> 01:16:47,000
就是什么System D的吧

2171
01:16:47,000 --> 01:16:48,000
所以比较重吗

2172
01:16:48,000 --> 01:16:49,000
是什么原因

2173
01:16:49,000 --> 01:16:50,000
对

2174
01:16:50,000 --> 01:16:52,000
可能速度比较快

2175
01:16:52,000 --> 01:16:52,000
对对对

2176
01:16:52,000 --> 01:16:55,000
这些速度比那个就比较重

2177
01:16:55,000 --> 01:16:56,000
然后我们这儿

2178
01:16:56,000 --> 01:16:58,000
用起动速度会很慢

2179
01:16:58,000 --> 01:16:59,000
然后

2180
01:17:00,000 --> 01:17:03,000
我们当时测的时候大概十几招或

2181
01:17:03,000 --> 01:17:04,000
二

2182
01:17:04,000 --> 01:17:07,000
应该是二十几招的那个空的

2183
01:17:07,000 --> 01:17:08,000
麦姆类就够

2184
01:17:08,000 --> 01:17:09,000
OK

2185
01:17:09,000 --> 01:17:09,000
对

2186
01:17:09,000 --> 01:17:11,000
所以就处够的经浅

2187
01:17:11,000 --> 01:17:12,000
处够的小

2188
01:17:12,000 --> 01:17:14,000
就是现在一个Hyper的GuestVM

2189
01:17:14,000 --> 01:17:15,000
用你们自定义这一套东西

2190
01:17:15,000 --> 01:17:17,000
就一二十招就可以起一个了

2191
01:17:17,000 --> 01:17:18,000
对吧

2192
01:17:18,000 --> 01:17:18,000
对

2193
01:17:18,000 --> 01:17:19,000
应该二多招

2194
01:17:19,000 --> 01:17:19,000
二多二

2195
01:17:19,000 --> 01:17:21,000
是一套是够的

2196
01:17:21,000 --> 01:17:22,000
相对于很多这个什么

2197
01:17:22,000 --> 01:17:23,000
特别是它跑

2198
01:17:23,000 --> 01:17:24,000
他们TOMCAT

2199
01:17:24,000 --> 01:17:25,000
这些家玩意有一上来都

2200
01:17:25,000 --> 01:17:27,000
一两个机能那层这样的

2201
01:17:27,000 --> 01:17:27,000
对

2202
01:17:27,000 --> 01:17:28,000
这个当然

2203
01:17:28,000 --> 01:17:30,000
我们说的是一个最最减模式

2204
01:17:30,000 --> 01:17:31,000
对

2205
01:17:31,000 --> 01:17:31,000
如果就是

2206
01:17:31,000 --> 01:17:32,000
这是一个

2207
01:17:32,000 --> 01:17:33,000
就说

2208
01:17:33,000 --> 01:17:33,000
我就说

2209
01:17:33,000 --> 01:17:34,000
这种一二十大的开销

2210
01:17:34,000 --> 01:17:36,000
基本上可以在现代机上

2211
01:17:36,000 --> 01:17:37,000
可以忽略了吧

2212
01:17:37,000 --> 01:17:38,000
对对

2213
01:17:38,000 --> 01:17:39,000
那还是挺好

2214
01:17:39,000 --> 01:17:39,000
挺好

2215
01:17:39,000 --> 01:17:41,000
最最后补充的就是希望

2216
01:17:41,000 --> 01:17:43,000
大家有质于加入我们

2217
01:17:43,000 --> 01:17:44,000
Hyper项目的

2218
01:17:44,000 --> 01:17:47,000
能够多多为我们提

2219
01:17:47,000 --> 01:17:48,000
PR

2220
01:17:48,000 --> 01:17:50,000
我们也会非常也会非常

2221
01:17:50,000 --> 01:17:50,000
积极的反馈

2222
01:17:50,000 --> 01:17:51,000
如果

2223
01:17:52,000 --> 01:17:53,000
有同学TPR

2224
01:17:53,000 --> 01:17:55,000
或者说被我们接受的话

2225
01:17:55,000 --> 01:17:56,000
我们

2226
01:17:56,000 --> 01:17:58,000
在初期前一百人

2227
01:17:58,000 --> 01:18:00,000
应该会提供TX

2228
01:18:00,000 --> 01:18:01,000
作为奖励

2229
01:18:01,000 --> 01:18:02,000
就是我

2230
01:18:02,000 --> 01:18:03,000
就是之前

2231
01:18:03,000 --> 01:18:04,000
若有之前在

2232
01:18:04,000 --> 01:18:06,000
推特上面穿的过的那个TX

2233
01:18:06,000 --> 01:18:07,000
哈哈哈

2234
01:18:08,000 --> 01:18:08,000
对

2235
01:18:08,000 --> 01:18:10,000
那个之前我在北京跟

2236
01:18:11,000 --> 01:18:12,000
跟三门

2237
01:18:12,000 --> 01:18:14,000
就见面面聊过好

2238
01:18:14,000 --> 01:18:15,000
然后非常后眼无耻的

2239
01:18:15,000 --> 01:18:16,000
要了一家

2240
01:18:16,000 --> 01:18:17,000
没有没有

2241
01:18:18,000 --> 01:18:19,000
这个也

2242
01:18:19,000 --> 01:18:20,000
感谢若有帮我们

2243
01:18:20,000 --> 01:18:22,000
去大给的宣传

2244
01:18:22,000 --> 01:18:22,000
然后也希望

2245
01:18:22,000 --> 01:18:24,000
能更多的开发者

2246
01:18:24,000 --> 01:18:25,000
去接触到开源社

2247
01:18:25,000 --> 01:18:27,000
去接触到开源项目

2248
01:18:27,000 --> 01:18:28,000
然后更多

2249
01:18:28,000 --> 01:18:29,000
更

2250
01:18:29,000 --> 01:18:30,000
更

2251
01:18:31,000 --> 01:18:31,000
就是怎么说呢

2252
01:18:31,000 --> 01:18:33,000
就是一个提升

2253
01:18:33,000 --> 01:18:35,000
一个自身素质加一个

2254
01:18:36,000 --> 01:18:37,000
鞋带码工业的一个水平

2255
01:18:37,000 --> 01:18:38,000
对

2256
01:18:38,000 --> 01:18:39,000
对

2257
01:18:39,000 --> 01:18:39,000
非常感谢

2258
01:18:39,000 --> 01:18:40,000
因为其实

2259
01:18:40,000 --> 01:18:42,000
因为这次我邀请三门

2260
01:18:42,000 --> 01:18:43,000
来做这节目就是因为

2261
01:18:43,000 --> 01:18:45,000
我觉得Hyper是我见过的

2262
01:18:45,000 --> 01:18:46,000
就是国人

2263
01:18:46,000 --> 01:18:48,000
做的这个开源项目

2264
01:18:48,000 --> 01:18:50,000
里面还比较让我经验的一个

2265
01:18:50,000 --> 01:18:51,000
所以我还希望

2266
01:18:51,000 --> 01:18:52,000
接这个机会

2267
01:18:52,000 --> 01:18:53,000
让要请到

2268
01:18:53,000 --> 01:18:54,000
就是让他

2269
01:18:54,000 --> 01:18:55,000
让更多人了解他

2270
01:18:55,000 --> 01:18:56,000
知道他

2271
01:18:56,000 --> 01:18:58,000
然后能够去参与到这个开发

2272
01:18:58,000 --> 01:18:59,000
让我们这个中国的开源项目

2273
01:18:59,000 --> 01:19:01,000
能够有一个

2274
01:19:01,000 --> 01:19:02,000
好的这个

2275
01:19:03,000 --> 01:19:04,000
这个

2276
01:19:04,000 --> 01:19:05,000
上涨的趋势吧

2277
01:19:05,000 --> 01:19:06,000
对

2278
01:19:06,000 --> 01:19:07,000
然后另外一点

2279
01:19:07,000 --> 01:19:09,000
如果大家不

2280
01:19:09,000 --> 01:19:11,000
不觉得TPR不爽的话

2281
01:19:11,000 --> 01:19:12,000
也是非常希望

2282
01:19:12,000 --> 01:19:14,000
大家能够加入到我们团队

2283
01:19:14,000 --> 01:19:16,000
我们团队也是拥有

2284
01:19:17,000 --> 01:19:18,000
非常多的牛人

2285
01:19:18,000 --> 01:19:20,000
然后多年的

2286
01:19:20,000 --> 01:19:21,000
可能我们的工程师

2287
01:19:21,000 --> 01:19:22,000
以及

2288
01:19:22,000 --> 01:19:24,000
特别自身的

2289
01:19:24,000 --> 01:19:27,000
肯骚针的都都都在我们团队

2290
01:19:27,000 --> 01:19:27,000
所以

2291
01:19:28,000 --> 01:19:30,000
如果大家有一级支长

2292
01:19:30,000 --> 01:19:31,000
或者说

2293
01:19:32,000 --> 01:19:34,000
有制于做Hyper之代

2294
01:19:34,000 --> 01:19:35,000
一个Hyper项目

2295
01:19:35,000 --> 01:19:36,000
希望大家能够

2296
01:19:36,000 --> 01:19:37,000
机机给我们

2297
01:19:37,000 --> 01:19:38,000
提

2298
01:19:39,000 --> 01:19:41,000
TPR或者是发展给

2299
01:19:41,000 --> 01:19:42,000
谢谢

2300
01:19:42,000 --> 01:19:43,000
想不到毕竭

2301
01:19:43,000 --> 01:19:44,000
我还做了一个列头的工作

2302
01:19:46,000 --> 01:19:48,000
非常好玩

2303
01:19:49,000 --> 01:19:51,000
ok今天的节目就先到这里

2304
01:19:51,000 --> 01:19:52,000
感谢收听

2305
01:19:52,000 --> 01:19:53,000
IPN Podcast

2306
01:19:53,000 --> 01:19:54,000
忘了旗下的IT技术

2307
01:19:54,000 --> 01:19:56,000
主题娱乐节目内和恐慌

2308
01:19:56,000 --> 01:19:57,000
我们号称

2309
01:19:57,000 --> 01:19:58,000
Hotcore

2310
01:19:58,000 --> 01:19:59,000
但也没有干货

2311
01:19:59,000 --> 01:20:01,000
但是这期干货还是满满的

2312
01:20:01,000 --> 01:20:02,000
想听人听

2313
01:20:02,000 --> 01:20:03,000
不想听的人就别听

2314
01:20:03,000 --> 01:20:05,000
你可以问本节目捐款

2315
01:20:05,000 --> 01:20:06,000
捐款即使

2316
01:20:06,000 --> 01:20:07,000
IPN.li

2317
01:20:07,000 --> 01:20:08,000
slash kernel panic

2318
01:20:08,000 --> 01:20:09,000
slash

2319
01:20:09,000 --> 01:20:09,000
多内

2320
01:20:09,000 --> 01:20:11,000
捐款进而随意

2321
01:20:11,000 --> 01:20:12,000
只要是能备8

2322
01:20:12,000 --> 01:20:12,000
整出的证证

2323
01:20:12,000 --> 01:20:13,000
说就可以

2324
01:20:13,000 --> 01:20:15,000
捐款不会给你带来什么

2325
01:20:15,000 --> 01:20:17,000
不捐也不会让你失去什么

2326
01:20:17,000 --> 01:20:18,000
我们的考试

2327
01:20:18,000 --> 01:20:19,000
Hyper is hyper awesome

2328
01:20:20,000 --> 01:20:21,000
如果你有任何反馈

2329
01:20:21,000 --> 01:20:22,000
可以发电子

2330
01:20:22,000 --> 01:20:22,000
有见到

2331
01:20:22,000 --> 01:20:25,000
kernel panic at ipn.li

2332
01:20:26,000 --> 01:20:27,000
同时也欢迎你收听

2333
01:20:27,000 --> 01:20:28,000
IPN其下

2334
01:20:28,000 --> 01:20:30,000
其他集团节目

2335
01:20:30,000 --> 01:20:30,000
IT功乐

2336
01:20:30,000 --> 01:20:31,000
未知道

2337
01:20:31,000 --> 01:20:32,000
太一来了

2338
01:20:32,000 --> 01:20:33,000
流行通信

2339
01:20:33,000 --> 01:20:35,000
Hotstory

2340
01:20:35,000 --> 01:20:36,000
博物质

2341
01:20:36,000 --> 01:20:36,000
选美

2342
01:20:36,000 --> 01:20:37,000
我们下期再会

