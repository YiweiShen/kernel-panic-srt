1
00:00:00,000 --> 00:00:05,000
您正在收听的是 IPN Podcast 的网络旗下的 IT 技术主题节目内核恐慌

2
00:00:05,000 --> 00:00:09,000
我们号称 Hardcore 但是也没有干货 想听的人听不想听就别听

3
00:00:09,000 --> 00:00:12,000
内核恐慌的网址是 ipn.li.clernopanic

4
00:00:12,000 --> 00:00:16,000
我们推荐大家使用 Podcast 客户端订阅我们的节目

5
00:00:16,000 --> 00:00:20,000
如果您不知道该用什么客户端 欢迎访问 ipn.li.fak

6
00:00:20,000 --> 00:00:22,000
欢迎你为我们的节目捐款

7
00:00:22,000 --> 00:00:27,000
捐款地址是 ipn.li.clernopanic.clash.donate

8
00:00:27,000 --> 00:00:31,000
捐款经过随意 只要是能为 8 整除的正整除就可以

9
00:00:31,000 --> 00:00:34,000
捐款不会为你带来什么 不觉得也不会让你失去什么

10
00:00:37,000 --> 00:00:39,000
首先欢迎 Rail 回来

11
00:00:39,000 --> 00:00:43,000
耶 之前病了 缺席了一期

12
00:00:43,000 --> 00:00:44,000
机劳成绩嘛

13
00:00:46,000 --> 00:00:48,000
搬家嘛 就这样子

14
00:00:49,000 --> 00:00:51,000
是挺折腾 搬家穷三年了

15
00:00:52,000 --> 00:00:55,000
我们今天节目还是先念一下

16
00:00:55,000 --> 00:00:59,000
就之前我们做到的一些听众反馈的节选吧

17
00:01:00,000 --> 00:01:04,000
对 其实我们几两期没做听众反馈的

18
00:01:04,000 --> 00:01:09,000
所以可能有一个月没有反省一下

19
00:01:09,000 --> 00:01:11,000
我们之前犯过什么错误

20
00:01:12,000 --> 00:01:16,000
但是最近没有听众指出我们读音的错误了

21
00:01:16,000 --> 00:01:18,000
我觉得这也是一件好事

22
00:01:18,000 --> 00:01:20,000
要么我们读音开始没有错误了

23
00:01:20,000 --> 00:01:23,000
然后我们就是听众开始放弃了

24
00:01:24,000 --> 00:01:27,000
先开始读一篇听众反馈

25
00:01:27,000 --> 00:01:29,000
好 有一个叫刘春的朋友

26
00:01:29,000 --> 00:01:32,000
我应该是叫刘春吗 我觉得这么写的话

27
00:01:33,000 --> 00:01:34,000
他这么写的

28
00:01:34,000 --> 00:01:38,000
刚刚听了并发与异部这期比较赞同无套的点子

29
00:01:38,000 --> 00:01:41,000
就是提前公布你们希望讨论的主题

30
00:01:41,000 --> 00:01:43,000
让大家可以参与共性 idea

31
00:01:43,000 --> 00:01:44,000
你觉得这个怎么样

32
00:01:45,000 --> 00:01:49,000
但是我那期说了之后

33
00:01:49,000 --> 00:01:54,000
就发现好像提前公布我们希望讨论的主题怎么公布

34
00:01:54,000 --> 00:01:56,000
是我们这一期就要公布下一期的主题吗

35
00:01:56,000 --> 00:01:59,000
好像没有提前准备是吧

36
00:01:59,000 --> 00:02:03,000
事实上的状况就是我们这一期都不知道下一期要讲什么

37
00:02:04,000 --> 00:02:05,000
所以这件事情不限时

38
00:02:05,000 --> 00:02:06,000
这不行说实话

39
00:02:06,000 --> 00:02:10,000
我们应该一下子就把后半年的主题全都介绍好

40
00:02:10,000 --> 00:02:11,000
弄一个列表

41
00:02:11,000 --> 00:02:13,000
然后大家去自己下面填冲好了

42
00:02:14,000 --> 00:02:15,000
对

43
00:02:15,000 --> 00:02:18,000
然后在客人拍的一个网站上面发出来

44
00:02:18,000 --> 00:02:23,000
就是哪一些话题可能可以讲

45
00:02:23,000 --> 00:02:28,000
然后如果讲的话可以讨论哪方面的问题

46
00:02:28,000 --> 00:02:33,000
但是请不要在下面写情谁谁当嘉宾

47
00:02:33,000 --> 00:02:35,000
就我们应该是请不到的

48
00:02:35,000 --> 00:02:36,000
完全没有办法保证

49
00:02:37,000 --> 00:02:37,000
对

50
00:02:39,000 --> 00:02:40,000
继续

51
00:02:40,000 --> 00:02:40,000
好

52
00:02:40,000 --> 00:02:44,000
那我接着念这个刘春对朋友来的这个反馈

53
00:02:45,000 --> 00:02:50,000
说到数据统计和分析或者更宽泛的 data science

54
00:02:50,000 --> 00:02:54,000
其实学数学的人比纯粹的程序员有太大的优势了

55
00:02:54,000 --> 00:02:55,000
这一点我深有体会

56
00:02:55,000 --> 00:02:59,000
通常一个 data science 项目总是会包括

57
00:02:59,000 --> 00:03:04,000
总是会包括数据搜集进化转换处理分析建模

58
00:03:04,000 --> 00:03:07,000
对程序员来说对数据的操作基本不是事

59
00:03:07,000 --> 00:03:13,000
再加上像现在像 IUER machine learning studio 这样的工具

60
00:03:13,000 --> 00:03:15,000
基本连编程都不用就搞定了

61
00:03:15,000 --> 00:03:18,000
可是建模分析就是一个极大的挑战了

62
00:03:18,000 --> 00:03:20,000
选择什么样的算法是有效的

63
00:03:20,000 --> 00:03:22,000
什么算法是最优的

64
00:03:22,000 --> 00:03:25,000
针对特定的问题算法应该如何调整

65
00:03:25,000 --> 00:03:29,000
这些问题如果没有足够的数学基础无法回答

66
00:03:29,000 --> 00:03:32,000
而模型的好坏直接决定了你的分析是否有效

67
00:03:33,000 --> 00:03:36,000
可惜你们不打算讨论温软技术了

68
00:03:36,000 --> 00:03:38,000
否则尤其我们可以讨论一下

69
00:03:38,000 --> 00:03:42,000
Azure machine learning 比较 R 和 piphone

70
00:03:42,000 --> 00:03:45,000
在 data science 方面的长短

71
00:03:45,000 --> 00:03:47,000
对就是他的来信的全文

72
00:03:49,000 --> 00:03:50,000
你怎么看

73
00:03:50,000 --> 00:03:54,000
其实我们是

74
00:03:54,000 --> 00:03:57,000
我们嘴上说不打算讨论温软技术的

75
00:03:58,000 --> 00:04:00,000
但本期主要讨论温软技术

76
00:04:03,000 --> 00:04:05,000
我们嘴上说不要身体却很诚实是不是

77
00:04:06,000 --> 00:04:09,000
对我们不是不打算

78
00:04:09,000 --> 00:04:12,000
我们是不打算讨论温软技术

79
00:04:12,000 --> 00:04:14,000
但是实际上温软技术是绕不开的

80
00:04:14,000 --> 00:04:15,000
在今天

81
00:04:15,000 --> 00:04:19,000
而且我不知道你有没有这种感觉

82
00:04:19,000 --> 00:04:22,000
就是挥别了巴尔摩的中世纪的黑暗时代

83
00:04:22,000 --> 00:04:25,000
然后温软可能要开始为异复兴了

84
00:04:25,000 --> 00:04:27,000
老树丰春

85
00:04:28,000 --> 00:04:29,000
对

86
00:04:29,000 --> 00:04:29,000
好吧

87
00:04:29,000 --> 00:04:33,000
就很可能温软又要开始大方异彩了

88
00:04:33,000 --> 00:04:36,000
但现在说这种话还没试过早

89
00:04:36,000 --> 00:04:37,000
不过有一件事情是肯定的

90
00:04:37,000 --> 00:04:40,000
就是想要绕开温软其实是很难的那件事情

91
00:04:41,000 --> 00:04:44,000
我觉得咱们两个背景可能都是决定了

92
00:04:44,000 --> 00:04:45,000
就屁股决定脑袋

93
00:04:45,000 --> 00:04:48,000
就我们两个都是温软阵营之外的人

94
00:04:48,000 --> 00:04:50,000
所以有时候说起来温软问题

95
00:04:50,000 --> 00:04:53,000
总会有那种隔绝扫援的感觉

96
00:04:53,000 --> 00:04:55,000
但是也没什么办法

97
00:04:55,000 --> 00:04:59,000
就也就因为主持人就我俩了

98
00:04:59,000 --> 00:04:59,000
对吧

99
00:04:59,000 --> 00:05:03,000
你也不可能你也不可能指望我们两个去搞温软的什么事情

100
00:05:03,000 --> 00:05:05,000
因为毕竟不是混质什么饭吃了

101
00:05:05,000 --> 00:05:06,000
何必呢

102
00:05:06,000 --> 00:05:09,000
所以当我们讨论温软问题的时候

103
00:05:09,000 --> 00:05:12,000
就大家就当娱乐节目来听话

104
00:05:12,000 --> 00:05:14,000
而且事实上我们这一期是要讨论温软技术

105
00:05:14,000 --> 00:05:15,000
ok

106
00:05:16,000 --> 00:05:18,000
然后 data science 这个主题

107
00:05:18,000 --> 00:05:20,000
我们其实计划很久了

108
00:05:20,000 --> 00:05:25,000
但是暂时还没有找到一个合适的嘉宾

109
00:05:25,000 --> 00:05:27,000
我们想把这期做好

110
00:05:27,000 --> 00:05:30,000
所以就反正要就多跳几期的票吧

111
00:05:30,000 --> 00:05:31,000
对

112
00:05:31,000 --> 00:05:33,000
您确定这样的可能会讲

113
00:05:33,000 --> 00:05:33,000
对

114
00:05:36,000 --> 00:05:38,000
然后我再来念下一条反馈

115
00:05:40,000 --> 00:05:47,000
这是来自一位叫做 virtual name 的同学

116
00:05:47,000 --> 00:05:51,000
virtual name 美吉尔就是那个诗人的名字

117
00:05:53,000 --> 00:05:56,000
这一期应该是这个反馈应该是针对

118
00:05:56,000 --> 00:05:58,000
我们提到 i like rabbits 那一期

119
00:05:58,000 --> 00:05:59,000
两位主播

120
00:05:59,000 --> 00:06:01,000
虽然 i like rabbits 听起来

121
00:06:01,000 --> 00:06:03,000
只是另一外一个版本的 free lancer

122
00:06:03,000 --> 00:06:05,000
但是我注意到

123
00:06:05,000 --> 00:06:06,000
这个网站声称

124
00:06:06,000 --> 00:06:08,000
他们只解决 small

125
00:06:08,000 --> 00:06:11,000
vildifying the programming task

126
00:06:11,000 --> 00:06:12,000
正如节目中提到的

127
00:06:12,000 --> 00:06:14,000
把需求明确到这种程度

128
00:06:14,000 --> 00:06:17,000
其实已经完成了工作中的绝大过程

129
00:06:17,000 --> 00:06:19,000
最终只是需要找到胶水

130
00:06:19,000 --> 00:06:21,000
让需求的模块跑起来而已

131
00:06:21,000 --> 00:06:23,000
而程序员们并不缺胶水

132
00:06:23,000 --> 00:06:26,000
vildifying 本身作为迁移的概念

133
00:06:26,000 --> 00:06:28,000
难以保留原有的严谨

134
00:06:28,000 --> 00:06:31,000
数学上对于运算符和函数

135
00:06:31,000 --> 00:06:35,000
对于是否 vildifying 的都有形式上非常精确的判断

136
00:06:35,000 --> 00:06:38,000
而产品经理这个用法

137
00:06:38,000 --> 00:06:39,000
这个说法可能不是很精确

138
00:06:39,000 --> 00:06:41,000
可能客户只需要一个轮子

139
00:06:41,000 --> 00:06:42,000
缠不上产品

140
00:06:42,000 --> 00:06:44,000
所以产品经理这个

141
00:06:46,000 --> 00:06:48,000
措辞应该是要加引号了

142
00:06:48,000 --> 00:06:49,000
产品经理对于一个功能的定义

143
00:06:49,000 --> 00:06:51,000
很难做到形式上的精确

144
00:06:51,000 --> 00:06:53,000
如同算法课上

145
00:06:53,000 --> 00:06:54,000
我们碰到了代码那样

146
00:06:54,000 --> 00:06:58,000
可以用于证明证决性

147
00:06:58,000 --> 00:07:00,000
我相信他们的客服

148
00:07:00,000 --> 00:07:02,000
要和客户来往好几次邮件

149
00:07:02,000 --> 00:07:05,000
才能明确具体要做什么

150
00:07:05,000 --> 00:07:07,000
但是当然这对客户也是好事

151
00:07:07,000 --> 00:07:10,000
而这让我想到了 Wolfram Alpha

152
00:07:10,000 --> 00:07:12,000
这个服务刚刚出现在媒体报道上的时候

153
00:07:12,000 --> 00:07:14,000
引起了不小的关注

154
00:07:14,000 --> 00:07:16,000
但是从 Google Trend

155
00:07:16,000 --> 00:07:18,000
我们可以看到他两个月之后的热度

156
00:07:18,000 --> 00:07:22,000
就下降到了顶点的 10%

157
00:07:22,000 --> 00:07:25,000
之后他的热度按年呈现周期变化

158
00:07:25,000 --> 00:07:28,000
在春季和秋季各达到一次高峰

159
00:07:30,000 --> 00:07:32,000
我的 Wild guess 是大部分的热度

160
00:07:32,000 --> 00:07:35,000
来自于需要完成代数作为的学生

161
00:07:37,000 --> 00:07:40,000
他说在本消这个情况相当的普遍

162
00:07:42,000 --> 00:07:45,000
而 Wolfram Alpha 通过程序得到结果

163
00:07:45,000 --> 00:07:47,000
I like rabbits 这通过人工

164
00:07:47,000 --> 00:07:49,000
假定 rebis 的客户都提出

165
00:07:49,000 --> 00:07:51,000
Wild define 的需求

166
00:07:51,000 --> 00:07:52,000
不需要客户问

167
00:07:52,000 --> 00:07:54,000
您是不是要怎么怎么样

168
00:07:54,000 --> 00:07:56,000
那么为什么不能让程序

169
00:07:56,000 --> 00:07:59,000
代办 Rabbit Home 的工作呢

170
00:07:59,000 --> 00:08:01,000
尽管 NLP 是一个 National Language Processing

171
00:08:01,000 --> 00:08:04,000
是一个复杂到极点的工作

172
00:08:04,000 --> 00:08:05,000
但是应当可以假设

173
00:08:05,000 --> 00:08:07,000
描述一些问题的语言

174
00:08:07,000 --> 00:08:09,000
只是其中一个很小的词集

175
00:08:09,000 --> 00:08:12,000
他不需要或者只需要很少的清洗

176
00:08:12,000 --> 00:08:14,000
就能够方便的解析为语法

177
00:08:14,000 --> 00:08:15,000
语法数

178
00:08:15,000 --> 00:08:18,000
比如抓取我站点上

179
00:08:18,000 --> 00:08:22,000
所有每日 pageview 超过 100 的页面

180
00:08:22,000 --> 00:08:23,000
可以被解析为

181
00:08:23,000 --> 00:08:25,000
fetch my site.com

182
00:08:26,000 --> 00:08:31,000
is page greater than pageview per day 100

183
00:08:31,000 --> 00:08:33,000
它是用 list 的语法写的

184
00:08:33,000 --> 00:08:35,000
反正它是写了一个语法数

185
00:08:35,000 --> 00:08:38,000
然后他说有很多条件

186
00:08:38,000 --> 00:08:40,000
比如说生成 Ruby 的目标来码

187
00:08:40,000 --> 00:08:44,000
可以从 Google Analytics 提取 pageview

188
00:08:44,000 --> 00:08:46,000
静谈页面同一使用 slash 结尾

189
00:08:46,000 --> 00:08:48,000
没有扩展名等等等等

190
00:08:48,000 --> 00:08:50,000
而这些作为语法数的可选部分

191
00:08:50,000 --> 00:08:51,000
肯定要留给默认识

192
00:08:51,000 --> 00:08:55,000
然后给语法数点每一个元素写 eval

193
00:08:55,000 --> 00:08:58,000
然后把它们拼接起来

194
00:08:58,000 --> 00:08:59,000
这一步才是最难的

195
00:08:59,000 --> 00:09:01,000
就该像大概就像那期 xkcd

196
00:09:01,000 --> 00:09:03,000
我希望有国家级的实验室

197
00:09:03,000 --> 00:09:05,000
数十个博士

198
00:09:05,000 --> 00:09:06,000
数年的时间

199
00:09:06,000 --> 00:09:08,000
数以百万计的美元

200
00:09:08,000 --> 00:09:10,000
忙忙多了边界约束

201
00:09:10,000 --> 00:09:13,000
函数 函数 逻辑 参数类型

202
00:09:13,000 --> 00:09:15,000
但至少这是一个很少的

203
00:09:15,000 --> 00:09:17,000
但至少是一个可以计算的问题

204
00:09:17,000 --> 00:09:19,000
而且很可能 AI 发展的这种程度的时候

205
00:09:19,000 --> 00:09:22,000
这一级的逻辑大部分也是由程序生成的

206
00:09:22,000 --> 00:09:24,000
可以自身进化

207
00:09:24,000 --> 00:09:27,000
人工只是进行一定的 supervision

208
00:09:27,000 --> 00:09:30,000
supervision 一样

209
00:09:30,000 --> 00:09:33,000
我一直是个人工智能领域的票有

210
00:09:33,000 --> 00:09:34,000
我喜欢这种畅象

211
00:09:34,000 --> 00:09:36,000
还让我感到放松

212
00:09:36,000 --> 00:09:37,000
谢谢两位带来的节目

213
00:09:37,000 --> 00:09:41,000
我刚才念的可能有点乱吧

214
00:09:41,000 --> 00:09:43,000
这位听众的主要意思就是

215
00:09:43,000 --> 00:09:44,000
他觉得 I like rabbits

216
00:09:44,000 --> 00:09:46,000
其实是可以一个

217
00:09:46,000 --> 00:09:51,000
其实是一个可以通过人工智能完成的网站

218
00:09:51,000 --> 00:09:53,000
对

219
00:09:53,000 --> 00:09:55,000
本质上我觉得他的说法固然没错

220
00:09:55,000 --> 00:09:59,000
但是在今天显示做不到了

221
00:09:59,000 --> 00:10:00,000
对不对

222
00:10:00,000 --> 00:10:01,000
还是有点远

223
00:10:01,000 --> 00:10:02,000
但是我觉得

224
00:10:02,000 --> 00:10:06,000
但是起码他至少就只说了上次我们聊的那个

225
00:10:06,000 --> 00:10:07,000
他的一个东西

226
00:10:07,000 --> 00:10:08,000
I like rabbit 这个短板

227
00:10:08,000 --> 00:10:12,000
就是你要让你客户提出一个 well defined 的 task

228
00:10:12,000 --> 00:10:15,000
其实是相当困难的

229
00:10:15,000 --> 00:10:16,000
所以其实他那个 well defined

230
00:10:16,000 --> 00:10:18,000
其实也是针对人而言

231
00:10:18,000 --> 00:10:22,000
他还没有说到一个机器能够认为

232
00:10:22,000 --> 00:10:23,000
他是一个 well defined

233
00:10:23,000 --> 00:10:25,000
他能够直接给出答案的这么一个方案

234
00:10:25,000 --> 00:10:28,000
所以这里面就在真正的人工智能实现之前

235
00:10:28,000 --> 00:10:31,000
我觉得这样的需求还是有的

236
00:10:31,000 --> 00:10:36,000
看可能是一个逐步缩小的过程

237
00:10:36,000 --> 00:10:37,000
对

238
00:10:37,000 --> 00:10:42,000
就好像我们觉得东西实现起来

239
00:10:42,000 --> 00:10:46,000
似乎没有什么太大的困难

240
00:10:46,000 --> 00:10:48,000
就至少在如果他实现好的话

241
00:10:48,000 --> 00:10:51,000
在他的交互界面上应该不会比

242
00:10:51,000 --> 00:10:57,000
Cortana 或者是那个互联里面的 Jarvis 更难

243
00:10:57,000 --> 00:11:01,000
至少在操纵者从操作者的角度来看

244
00:11:01,000 --> 00:11:02,000
应该不是这样

245
00:11:02,000 --> 00:11:03,000
但是实现起来

246
00:11:03,000 --> 00:11:05,000
我觉得目前的水準应该是做不到

247
00:11:05,000 --> 00:11:11,000
然后但我觉得这正是 Electravus 的那个可取之处

248
00:11:11,000 --> 00:11:15,000
他就是他用一个叫什么人力朋克的方式

249
00:11:15,000 --> 00:11:21,000
来帮你实现这种理论上应该有 AI 完成的工作

250
00:11:21,000 --> 00:11:22,000
对吗

251
00:11:22,000 --> 00:11:24,000
所以他不是 AI

252
00:11:24,000 --> 00:11:27,000
他是 Ti True Intelligence

253
00:11:30,000 --> 00:11:31,000
对

254
00:11:31,000 --> 00:11:31,000
好吧

255
00:11:31,000 --> 00:11:34,000
那我来念今天最后一则听众反馈

256
00:11:34,000 --> 00:11:35,000
也不是最后一则

257
00:11:35,000 --> 00:11:36,000
就我们选出来的最后一则

258
00:11:36,000 --> 00:11:37,000
所以是一位叫 Bear 的朋友

259
00:11:37,000 --> 00:11:40,000
他是给我们说 14 期的反馈

260
00:11:42,000 --> 00:11:44,000
第一次给内核恐慌写反馈

261
00:11:44,000 --> 00:11:46,000
你就挺喜欢你们的节目

262
00:11:46,000 --> 00:11:48,000
其实最初是从知乎上吗

263
00:11:48,000 --> 00:11:50,000
迷其妙的知道了这么一档节目

264
00:11:50,000 --> 00:11:53,000
也是从此才知道播客这个东西以及 IPM

265
00:11:53,000 --> 00:11:56,000
但听了几期之后觉得还挺有意思的

266
00:11:56,000 --> 00:11:57,000
抱着听失货的心态

267
00:11:57,000 --> 00:11:59,000
偶尔还能听到些干货

268
00:11:59,000 --> 00:12:02,000
其实很多货都听不懂

269
00:12:02,000 --> 00:12:03,000
这个还挺蛮好笑的

270
00:12:03,000 --> 00:12:06,000
到底是我们节目到底是失货还是干货

271
00:12:07,000 --> 00:12:10,000
我觉得 Podcast 的不可能是干货

272
00:12:10,000 --> 00:12:13,000
这一棒子打死了所有 Podcast 的

273
00:12:13,000 --> 00:12:14,000
但我觉得就是这样的

274
00:12:14,000 --> 00:12:17,000
反正我感觉我们节目讲干货的

275
00:12:17,000 --> 00:12:20,000
打引号干货的时候它其实挺无聊的

276
00:12:20,000 --> 00:12:24,000
吹牛扯淡的时候还蛮有意思的

277
00:12:24,000 --> 00:12:26,000
所以我们还是吹牛扯淡

278
00:12:26,000 --> 00:12:31,000
如果从一个市场导向的角度来看的话

279
00:12:31,000 --> 00:12:38,000
B 节目简直是吹水的那些期反馈都是最好的

280
00:12:38,000 --> 00:12:39,000
不是吗

281
00:12:41,000 --> 00:12:43,000
好 我们明确的方向

282
00:12:43,000 --> 00:12:44,000
那我接着念好

283
00:12:45,000 --> 00:12:46,000
14 期开头的时候

284
00:12:46,000 --> 00:12:50,000
吴涛说到摩托车不代表社会地位的时候

285
00:12:50,000 --> 00:12:52,000
如果说城乡结合部的

286
00:12:52,000 --> 00:12:54,000
7 年晚上轰迷摩托车的时候

287
00:12:54,000 --> 00:12:55,000
肯定不是这么想的

288
00:12:55,000 --> 00:12:57,000
我瞬间感觉被击中了

289
00:12:57,000 --> 00:12:59,000
因为我就在这个 bill

290
00:12:59,000 --> 00:13:01,000
他说因为我就在这样一个地方

291
00:13:01,000 --> 00:13:03,000
听你们的播客

292
00:13:03,000 --> 00:13:06,000
每当有这样的 7 年呼啸而过的时候

293
00:13:06,000 --> 00:13:07,000
轰轮声压盖一切

294
00:13:07,000 --> 00:13:10,000
只能心里咒骂一声

295
00:13:10,000 --> 00:13:12,000
其实我现在不只成乡结合部是这样

296
00:13:12,000 --> 00:13:16,000
其实很多大城市你到了晚上交警下班的时候

297
00:13:16,000 --> 00:13:17,000
也有这种

298
00:13:17,000 --> 00:13:18,000
他不一定轰摩了车

299
00:13:18,000 --> 00:13:20,000
可能轰的是什么几百万的跑车

300
00:13:20,000 --> 00:13:22,000
但是效果是一样的

301
00:13:25,000 --> 00:13:27,000
对 轰油门是一种很没品的表象

302
00:13:27,000 --> 00:13:29,000
轰油门我没有意见

303
00:13:29,000 --> 00:13:32,000
我有意见的是他把销售器拆了在轰油门

304
00:13:33,000 --> 00:13:34,000
OK

305
00:13:34,000 --> 00:13:35,000
这个是零二

306
00:13:36,000 --> 00:13:38,000
那我接着念这个反馈

307
00:13:39,000 --> 00:13:41,000
一小时零九分的时候

308
00:13:41,000 --> 00:13:45,000
我他谈到通过像 adunov 这样的东西

309
00:13:45,000 --> 00:13:46,000
控制 LED 的

310
00:13:46,000 --> 00:13:49,000
是一个学习编程有成就感的方式

311
00:13:49,000 --> 00:13:50,000
其实如此

312
00:13:50,000 --> 00:13:53,000
作为一个电子类专业的学生

313
00:13:53,000 --> 00:13:55,000
我的 c 编程就是这样入门的

314
00:13:55,000 --> 00:13:56,000
恭喜

315
00:13:57,000 --> 00:14:00,000
关于操作系统存储自元年以来

316
00:14:00,000 --> 00:14:01,000
经历多少秒

317
00:14:01,000 --> 00:14:03,000
说这件事情我还是不太理解

318
00:14:03,000 --> 00:14:05,000
就是一个好的方式吗

319
00:14:05,000 --> 00:14:07,000
还是历史原因比较多

320
00:14:07,000 --> 00:14:09,000
节目中也提到了润秒的问题

321
00:14:09,000 --> 00:14:12,000
2015 年我们将迎来时尚第 26 次润秒

322
00:14:12,000 --> 00:14:15,000
一些新闻也显示此前的润秒调整

323
00:14:15,000 --> 00:14:17,000
对软件造成了一定影响

324
00:14:17,000 --> 00:14:19,000
Linus 就是 Linux 的发明证

325
00:14:19,000 --> 00:14:21,000
好像也表示过这样的调整

326
00:14:21,000 --> 00:14:23,000
对操作系统而言比较麻烦

327
00:14:23,000 --> 00:14:27,000
不知道下次节目中有没有兴趣补充讨论一下

328
00:14:27,000 --> 00:14:29,000
那我们这可以补一下吧

329
00:14:29,000 --> 00:14:32,000
就是为什么要采用这种所谓

330
00:14:32,000 --> 00:14:33,000
从某一个 Apple

331
00:14:33,000 --> 00:14:35,000
就是所谓某某元年开始

332
00:14:35,000 --> 00:14:40,000
已经都要描述这种方式来表示时间

333
00:14:40,000 --> 00:14:43,000
这种我们一般叫做什么 Unix Time

334
00:14:43,000 --> 00:14:44,000
Unix 系统时间

335
00:14:44,000 --> 00:14:49,000
从那么 1970 年 1 月 1 日 0 时 0 分 0 秒开始

336
00:14:49,000 --> 00:14:50,000
然后数

337
00:14:50,000 --> 00:14:52,000
为什么要这种方式呢

338
00:14:52,000 --> 00:14:53,000
简单呀

339
00:14:53,000 --> 00:15:00,000
你只需要记住一个外部定义的一个起点

340
00:15:00,000 --> 00:15:03,000
之后也是可以就存数学一个非常简单的预算

341
00:15:03,000 --> 00:15:09,000
你不需要考虑任何对于软件控制的计时来讲

342
00:15:09,000 --> 00:15:10,000
它是不需要考虑很多什么论秒

343
00:15:10,000 --> 00:15:12,000
时间轴

344
00:15:13,000 --> 00:15:14,000
日历上的那些时间的规范

345
00:15:14,000 --> 00:15:16,000
日记的不规则那些问题

346
00:15:16,000 --> 00:15:16,000
对吧

347
00:15:16,000 --> 00:15:17,000
所以都是很简单

348
00:15:17,000 --> 00:15:18,000
很规范的一个方式

349
00:15:18,000 --> 00:15:21,000
就是记录这个叫什么

350
00:15:21,000 --> 00:15:24,000
电子卖充的这么一个次数而已

351
00:15:24,000 --> 00:15:25,000
对

352
00:15:25,000 --> 00:15:27,000
如果你从这个角度来讲

353
00:15:27,000 --> 00:15:31,000
反而是人类记忆量时间的方式

354
00:15:31,000 --> 00:15:33,000
其实非常复杂

355
00:15:34,000 --> 00:15:35,000
不可理喻的

356
00:15:35,000 --> 00:15:40,000
就是所有的周期都不能互相同步

357
00:15:40,000 --> 00:15:45,000
没有一个叫什么最小公位数

358
00:15:45,000 --> 00:15:48,000
还有最大公约数的这么一个概念在里面

359
00:15:48,000 --> 00:15:54,000
就是尤其是每次我看到这个周和月份

360
00:15:54,000 --> 00:15:59,000
不能 synchronize 的时候都会觉得实在是蠢头

361
00:15:59,000 --> 00:16:02,000
就因为本质上我们那种人类的就是所谓的叫什么

362
00:16:03,000 --> 00:16:06,000
隔离高里力还是什么的力

363
00:16:06,000 --> 00:16:07,000
就我们现在用的这个功力

364
00:16:08,000 --> 00:16:09,000
如略力

365
00:16:09,000 --> 00:16:09,000
如略力

366
00:16:09,000 --> 00:16:12,000
好如略力和隔离高里力应该是同样一个东西

367
00:16:12,000 --> 00:16:14,000
对一个是就是

368
00:16:14,000 --> 00:16:16,000
我就是 Grigory 吧

369
00:16:17,000 --> 00:16:19,000
Grigory 就是如略力

370
00:16:19,000 --> 00:16:21,000
对就是只是翻译的写法不一样

371
00:16:21,000 --> 00:16:22,000
我觉得应该是这样子

372
00:16:22,000 --> 00:16:24,000
Whatever 就是我们讲的功力

373
00:16:24,000 --> 00:16:25,000
我们现在常用的日历

374
00:16:25,000 --> 00:16:27,000
它本质上在做一件不可能完成的事情

375
00:16:27,000 --> 00:16:31,000
就是它要用它要同步太阳立法

376
00:16:32,000 --> 00:16:34,000
太阳立法是按这个每年

377
00:16:35,000 --> 00:16:39,000
然后它要同步月球的月球的转

378
00:16:39,000 --> 00:16:42,000
就是每个月的月向那些

379
00:16:42,000 --> 00:16:44,000
它还要在同每天地球的自转

380
00:16:44,000 --> 00:16:46,000
就是每天的这种一个情况

381
00:16:46,000 --> 00:16:47,000
然后这些都是互相有影响的

382
00:16:47,000 --> 00:16:50,000
不可能说是一个永恒不变完美的东西

383
00:16:50,000 --> 00:16:51,000
对吧

384
00:16:52,000 --> 00:16:52,000
等等

385
00:16:53,000 --> 00:16:55,000
功力是阴阳混合力吗

386
00:16:55,000 --> 00:16:56,000
不是吧

387
00:16:56,000 --> 00:16:56,000
不

388
00:16:56,000 --> 00:16:59,000
功力好像不会是考虑月向

389
00:16:59,000 --> 00:17:00,000
但是你们就

390
00:17:01,000 --> 00:17:01,000
怎么说

391
00:17:01,000 --> 00:17:02,000
它分那个 12 个月

392
00:17:02,000 --> 00:17:03,000
它最开始的初中步

393
00:17:03,000 --> 00:17:04,000
就是为了做这件事情

394
00:17:05,000 --> 00:17:07,000
就每一个月的概念不是这么来的吗

395
00:17:12,000 --> 00:17:13,000
但是它后来

396
00:17:13,000 --> 00:17:14,000
等等

397
00:17:14,000 --> 00:17:16,000
我这部分并不重要

398
00:17:16,000 --> 00:17:18,000
但是我的印象里面应该是

399
00:17:18,000 --> 00:17:23,000
巴比伦人开始了月力

400
00:17:23,000 --> 00:17:26,000
开始了就是现在用的功力的除行

401
00:17:26,000 --> 00:17:27,000
但是他们后来

402
00:17:28,000 --> 00:17:30,000
他们一开始也是纯因力

403
00:17:30,000 --> 00:17:32,000
就事实上大部分

404
00:17:32,000 --> 00:17:34,000
包括什么那个回教的立法

405
00:17:34,000 --> 00:17:37,000
也都是包括我们国家的立法

406
00:17:37,000 --> 00:17:38,000
其实大部分都是纯因力

407
00:17:38,000 --> 00:17:43,000
但是中国人很聪明的就是加了节气这个东西

408
00:17:43,000 --> 00:17:45,000
然后用节气来规定农石

409
00:17:45,000 --> 00:17:47,000
然后日常作息跟着月亮走

410
00:17:48,000 --> 00:17:51,000
而不像功力这样比较愚蠢的

411
00:17:52,000 --> 00:17:54,000
功力实际上是试图用太阳力

412
00:17:57,000 --> 00:17:58,000
以为主

413
00:17:58,000 --> 00:17:59,000
然后月

414
00:18:00,000 --> 00:18:03,000
每个月的设置只是一种

415
00:18:04,000 --> 00:18:05,000
为了延续历史而已

416
00:18:05,000 --> 00:18:06,000
它跟人为的东西

417
00:18:06,000 --> 00:18:07,000
没有任何关系

418
00:18:07,000 --> 00:18:07,000
对

419
00:18:07,000 --> 00:18:08,000
OK

420
00:18:08,000 --> 00:18:09,000
那没错

421
00:18:11,000 --> 00:18:11,000
OK

422
00:18:11,000 --> 00:18:11,000
中了

423
00:18:12,000 --> 00:18:14,000
但最主要的一个问题就是说

424
00:18:14,000 --> 00:18:15,000
这个地球自转

425
00:18:15,000 --> 00:18:17,000
它那个时间我们定义有一天

426
00:18:17,000 --> 00:18:19,000
转一圈转定有一天

427
00:18:19,000 --> 00:18:21,000
它并不是一个稳定的

428
00:18:22,000 --> 00:18:23,000
这个是最要命的问题

429
00:18:23,000 --> 00:18:24,000
然后

430
00:18:25,000 --> 00:18:27,000
如果我们这样定义一天

431
00:18:27,000 --> 00:18:28,000
是只有自转一周的话

432
00:18:28,000 --> 00:18:30,000
我们在中算出来是一年三百六十五天

433
00:18:30,000 --> 00:18:32,000
肯定是不能严格满足的

434
00:18:32,000 --> 00:18:34,000
因为它懂事会有点偏差

435
00:18:35,000 --> 00:18:37,000
然后就会造成之后的各种非常

436
00:18:37,000 --> 00:18:39,000
其实怪不得什么润年

437
00:18:39,000 --> 00:18:40,000
润秒这样的

438
00:18:40,000 --> 00:18:41,000
其实怪不得问题

439
00:18:41,000 --> 00:18:43,000
所以其实从这个角度来讲

440
00:18:43,000 --> 00:18:45,000
我们所相继里面存储

441
00:18:45,000 --> 00:18:48,000
从某一个第三方外部定义的原点

442
00:18:48,000 --> 00:18:49,000
开始的

443
00:18:49,000 --> 00:18:51,000
然后经历一个存数值的方法

444
00:18:51,000 --> 00:18:52,000
经历过多少秒数的方法

445
00:18:52,000 --> 00:18:54,000
是相当简单的

446
00:18:55,000 --> 00:18:55,000
没错

447
00:18:56,000 --> 00:18:56,000
好

448
00:18:56,000 --> 00:18:57,000
这个就说多了

449
00:18:58,000 --> 00:18:59,000
然后它接着反馈还有一段没

450
00:18:59,000 --> 00:19:01,000
我们没念完

451
00:19:02,000 --> 00:19:04,000
单片机系统中纪录时间

452
00:19:04,000 --> 00:19:06,000
一般会使用一个实时时钟

453
00:19:06,000 --> 00:19:08,000
就是 real time clock 的芯片

454
00:19:08,000 --> 00:19:15,000
使用三万两千七百六十八赫兹的金正作

455
00:19:15,000 --> 00:19:16,000
时钟源

456
00:19:17,000 --> 00:19:17,000
对

457
00:19:18,000 --> 00:19:20,000
很多单片机也集成这样的电路

458
00:19:20,000 --> 00:19:21,000
如果这样的

459
00:19:21,000 --> 00:19:26,000
就是实时时钟芯片配有试机位的话

460
00:19:26,000 --> 00:19:27,000
一出问题就不大

461
00:19:28,000 --> 00:19:30,000
也就是说有的 RTC 芯片是没有的

462
00:19:31,000 --> 00:19:36,000
反正我印象中单片机的时钟是比较

463
00:19:36,000 --> 00:19:37,000
通常是 16 位吧

464
00:19:40,000 --> 00:19:41,000
32,7,68,20

465
00:19:42,000 --> 00:19:44,000
看起来就是 16 位的东西吗

466
00:19:44,000 --> 00:19:46,000
不就是它的纪录的产量

467
00:19:46,000 --> 00:19:47,000
实际上只有 16 位

468
00:19:47,000 --> 00:19:49,000
那么这必然就少不了的

469
00:19:49,000 --> 00:19:51,000
就是有个所谓的 rap around 的问题

470
00:19:51,000 --> 00:19:52,000
就是你 16 位很容易一出

471
00:19:52,000 --> 00:19:53,000
你一出的时候怎么办呢

472
00:19:54,000 --> 00:19:55,000
就通常一般的做法就说

473
00:19:56,000 --> 00:19:57,000
反一出之后我就从头开始

474
00:19:57,000 --> 00:19:59,000
对我这个系统来讲

475
00:19:59,000 --> 00:20:00,000
如果我这个软件设计是

476
00:20:02,000 --> 00:20:04,000
鲁棒性够好的话

477
00:20:04,000 --> 00:20:07,000
你就是实时时钟 rap over

478
00:20:07,000 --> 00:20:08,000
就是一出从从至归零

479
00:20:08,000 --> 00:20:10,000
重新开始记的时候

480
00:20:10,000 --> 00:20:12,000
对你系统来讲应该是不受影响的

481
00:20:12,000 --> 00:20:14,000
就是你总是说我经过这么一个规定秒

482
00:20:14,000 --> 00:20:16,000
是咔咔咔咔咔咔咔这样不断往前走

483
00:20:17,000 --> 00:20:19,000
当然了这都是美好的愿景

484
00:20:19,000 --> 00:20:21,000
实际情况永远通常不是这样的

485
00:20:21,000 --> 00:20:22,000
刚好最近是上周吧

486
00:20:22,000 --> 00:20:24,000
还是前周就发生了这么一个事

487
00:20:25,000 --> 00:20:28,000
是美国的那个叫什么

488
00:20:28,000 --> 00:20:30,000
就是反正航空航就是民航的那种

489
00:20:30,000 --> 00:20:33,000
就检查到是波音 7 87

490
00:20:33,000 --> 00:20:35,000
什么 dreamliner 吗

491
00:20:35,000 --> 00:20:36,000
它上面有个

492
00:20:37,000 --> 00:20:39,000
不是有那种非常有时候航电系统

493
00:20:39,000 --> 00:20:40,000
机套是独立配置的

494
00:20:40,000 --> 00:20:43,000
但是他们发现有一个很久的情况

495
00:20:43,000 --> 00:20:45,000
就是他们也会有 rap over 的问题

496
00:20:45,000 --> 00:20:47,000
然后 vacoper 大概就是说

497
00:20:47,000 --> 00:20:50,000
每这个飞机每连续服役就不关机

498
00:20:50,000 --> 00:20:53,000
连续服役超过多少 100 多天还是几百天

499
00:20:53,000 --> 00:20:54,000
就不到一年反正

500
00:20:55,000 --> 00:20:56,000
这么一个时间内

501
00:20:56,000 --> 00:20:59,000
就会出现所有系统都挂掉

502
00:20:59,000 --> 00:21:01,000
就是因为这个时钟 rap over 的那个问题

503
00:21:01,000 --> 00:21:03,000
没有处理好就是那个软件觉得

504
00:21:03,000 --> 00:21:05,000
所以就是要定时重启飞机是吧

505
00:21:05,000 --> 00:21:06,000
对没错

506
00:21:06,000 --> 00:21:09,000
所以他们飞机是不能连续开机

507
00:21:09,000 --> 00:21:10,000
就不能连续

508
00:21:10,000 --> 00:21:11,000
也不是连续飞行就是不断电

509
00:21:12,000 --> 00:21:14,000
不能就是不见战运行

510
00:21:14,000 --> 00:21:16,000
不能超过 100 多天还是多少天

511
00:21:16,000 --> 00:21:17,000
反正是不到一年的时间

512
00:21:18,000 --> 00:21:22,000
但你现在追求一些所谓现在那种大型的航空公司来说

513
00:21:22,000 --> 00:21:24,000
它是什么人停机不停

514
00:21:24,000 --> 00:21:27,000
就是几个航班几个机组轮流化

515
00:21:27,000 --> 00:21:29,000
这个但是飞机是一直在飞一直在运行的

516
00:21:29,000 --> 00:21:32,000
这样才因为飞机是一个什么资本性的支出

517
00:21:32,000 --> 00:21:35,000
就是能够尽量利用起来就这样利用起来

518
00:21:36,000 --> 00:21:37,000
但是发现有这么一个很久的问题

519
00:21:38,000 --> 00:21:41,000
结果就是什么被发现了漏洞也不叫漏洞

520
00:21:41,000 --> 00:21:43,000
就 bug 然后则另回去修改

521
00:21:43,000 --> 00:21:45,000
因为你想飞机飞到半空中

522
00:21:45,000 --> 00:21:48,000
然后突然所有航电系统都没有反应了

523
00:21:48,000 --> 00:21:49,000
你就没有办法

524
00:21:49,000 --> 00:21:53,000
因为现在飞机是什么 control by wire 限控

525
00:21:54,000 --> 00:21:56,000
然后所有的限控没有

526
00:21:56,000 --> 00:21:58,000
这个新电脑不工作了

527
00:21:58,000 --> 00:22:02,000
没有什么控制机翼的转向

528
00:22:02,000 --> 00:22:03,000
他们往前都没有了

529
00:22:03,000 --> 00:22:05,000
你这个风机就飞机就可以直接掉下去的

530
00:22:05,000 --> 00:22:06,000
很危险很危险

531
00:22:07,000 --> 00:22:10,000
所以怎么讲以前我们用 XP 的什么

532
00:22:11,000 --> 00:22:13,000
定时重启还是有一定的好处的

533
00:22:16,000 --> 00:22:18,000
让我想起来就是有一次我从

534
00:22:19,000 --> 00:22:20,000
我应该是要飞英国

535
00:22:20,000 --> 00:22:23,000
然后一开始从法兰克福飞 24 的单

536
00:22:25,000 --> 00:22:28,000
然后在法兰克福的飞机跑道上

537
00:22:28,000 --> 00:22:32,000
已经到那个跑道的起点了

538
00:22:33,000 --> 00:22:35,000
然后停了大概 30 分钟

539
00:22:35,000 --> 00:22:39,000
然后机长说我们的飞机上的电脑有点问题

540
00:22:40,000 --> 00:22:42,000
阿姆斯是河航

541
00:22:42,000 --> 00:22:43,000
河航老是出这种腰额

542
00:22:43,000 --> 00:22:48,000
然后河航我们在河航总部的系统工程师

543
00:22:48,000 --> 00:22:50,000
有一台一模一样的电脑

544
00:22:50,000 --> 00:22:52,000
但是他没有办法复原

545
00:22:52,000 --> 00:22:54,000
就是重现我们的 Bug

546
00:22:54,000 --> 00:22:56,000
所以他建议我们重新启动一下飞机

547
00:22:56,000 --> 00:23:01,000
然后我们现在需要划回到 Gate 那边

548
00:23:01,000 --> 00:23:03,000
然后重新启动

549
00:23:03,000 --> 00:23:05,000
然后就划回去重启

550
00:23:05,000 --> 00:23:08,000
然后你就坐在飞机上等着飞机重启

551
00:23:08,000 --> 00:23:10,000
你能感觉非常紧张

552
00:23:10,000 --> 00:23:14,000
重启的时候会听见一个

553
00:23:19,000 --> 00:23:20,000
然后我心动完了

554
00:23:20,000 --> 00:23:21,000
这个时候就惊呆了

555
00:23:21,000 --> 00:23:23,000
是不是整个人都不好了

556
00:23:25,000 --> 00:23:25,000
没错

557
00:23:26,000 --> 00:23:26,000
对

558
00:23:27,000 --> 00:23:28,000
好吧

559
00:23:28,000 --> 00:23:30,000
今天的听众反馈就念到这里

560
00:23:30,000 --> 00:23:31,000
我们先

561
00:23:31,000 --> 00:23:35,000
刚才 787 的事情不是听众反馈的

562
00:23:35,000 --> 00:23:36,000
那个是我自己家

563
00:23:38,000 --> 00:23:38,000
对

564
00:23:40,000 --> 00:23:40,000
对

565
00:23:40,000 --> 00:23:41,000
感谢各位听众反馈

566
00:23:41,000 --> 00:23:43,000
欢迎你们写信给我们

567
00:23:45,000 --> 00:23:47,000
然后如果你写的足够长的话

568
00:23:47,000 --> 00:23:49,000
我们是非常愿意把它念出来

569
00:23:49,000 --> 00:23:53,000
这样可以填充节目时间吗

570
00:23:55,000 --> 00:23:56,000
达伴写信来骂我们

571
00:23:56,000 --> 00:23:57,000
或者是批评我们

572
00:23:57,000 --> 00:23:59,000
我们也会非常乐意的念出来

573
00:23:59,000 --> 00:24:00,000
好吧

574
00:24:00,000 --> 00:24:00,000
OK

575
00:24:00,000 --> 00:24:02,000
狼子野心啊

576
00:24:02,000 --> 00:24:03,000
这可是

577
00:24:05,000 --> 00:24:05,000
好

578
00:24:05,000 --> 00:24:08,000
那我们先过渡到这个新闻环节

579
00:24:08,000 --> 00:24:12,000
这个时候应该想起新闻联播的开场的声音

580
00:24:14,000 --> 00:24:16,000
Lorenz 可以插一个

581
00:24:17,000 --> 00:24:18,000
这周

582
00:24:18,000 --> 00:24:19,000
北京时间 7 年长

583
00:24:20,000 --> 00:24:21,000
也不叫这周

584
00:24:21,000 --> 00:24:26,000
就这段时间发生了一些不大不小的科技相关

585
00:24:26,000 --> 00:24:27,000
我们觉得还挺有意思的新闻

586
00:24:27,000 --> 00:24:30,000
我们给大家聊一聊

587
00:24:30,000 --> 00:24:32,000
第一个是这个

588
00:24:33,000 --> 00:24:35,000
Ubuntu 这间公司叫什么 Cannonical 对吧

589
00:24:36,000 --> 00:24:36,000
对

590
00:24:36,000 --> 00:24:40,000
他们最近搞了一个叫做 Ubuntu Core 这么一个经典的系统

591
00:24:40,000 --> 00:24:42,000
然后里面用了一个比较先进的

592
00:24:42,000 --> 00:24:43,000
不比较先进

593
00:24:43,000 --> 00:24:44,000
比较现代的

594
00:24:44,000 --> 00:24:46,000
就包管理器叫做 snapy

595
00:24:46,000 --> 00:24:47,000
然后简单来讲

596
00:24:47,000 --> 00:24:50,000
它就是一个把我们之前讲的那个 Docker 这个种

597
00:24:50,000 --> 00:24:55,000
就是 container 的技术用到操作系统本身的这个升级和管理上

598
00:24:55,000 --> 00:24:58,000
而不是简单的用用操作系统上面的应用软件

599
00:24:58,000 --> 00:24:59,000
什么意思呢

600
00:25:00,000 --> 00:25:05,000
主要我们通常我们如果你做用过任何一款 Linux 的操作系统

601
00:25:05,000 --> 00:25:08,000
就你待会知道它会定期的不能叫你说

602
00:25:08,000 --> 00:25:09,000
我有多少个包要升级

603
00:25:10,000 --> 00:25:13,000
但是如果你运气足够不好

604
00:25:14,000 --> 00:25:17,000
就可能在升级过程中你电脑又重启死机或者断电了

605
00:25:17,000 --> 00:25:18,000
然后这个时候也会进到系统发现

606
00:25:18,000 --> 00:25:19,000
哎

607
00:25:19,000 --> 00:25:21,000
惨了系统已经叫做 corrupt

608
00:25:22,000 --> 00:25:26,000
就是它在一个不是一个

609
00:25:27,000 --> 00:25:28,000
这位的问题

610
00:25:28,000 --> 00:25:29,000
不是零也不是一的状态

611
00:25:29,000 --> 00:25:32,000
对就是一个学林

612
00:25:32,000 --> 00:25:34,000
它属于那个猫的状态

613
00:25:35,000 --> 00:25:36,000
你说不清楚它是一个什么的

614
00:25:36,000 --> 00:25:37,000
除非你去看

615
00:25:37,000 --> 00:25:38,000
那你一看发现哎呀我靠

616
00:25:39,000 --> 00:25:41,000
各种这个文件缺块那个包又没安装好

617
00:25:41,000 --> 00:25:44,000
然后就属于你本来的目标是说你从 A 状态

618
00:25:44,000 --> 00:25:46,000
就是可以工作的 A 状态

619
00:25:46,000 --> 00:25:48,000
切换到可以工作的 B 状态

620
00:25:48,000 --> 00:25:50,000
像你是卡在 A 和 B 之中间这么一个不干

621
00:25:50,000 --> 00:25:52,000
很尴尬的一个境地

622
00:25:52,000 --> 00:25:53,000
怎么解决这个问题呢

623
00:25:53,000 --> 00:25:56,000
这个问题是对普通消费者来说可能还好

624
00:25:56,000 --> 00:25:59,000
就现在来说就总体来说还是比较少遇到

625
00:25:59,000 --> 00:26:00,000
这个系统崩溃

626
00:26:00,000 --> 00:26:02,000
就这系统在升级过程中崩溃的情况好

627
00:26:03,000 --> 00:26:04,000
然后断电的话

628
00:26:04,000 --> 00:26:05,000
因为现在大部分都是笔记本吧

629
00:26:05,000 --> 00:26:08,000
就有自带电池也不也不太像过去的台式机

630
00:26:08,000 --> 00:26:11,000
可能不小心碰到一个线或者就停电

631
00:26:11,000 --> 00:26:12,000
然后这种外部原因

632
00:26:13,000 --> 00:26:17,000
导致这个系统啊属于这个一个中间状态的情况

633
00:26:17,000 --> 00:26:18,000
但是还是会有的嘛

634
00:26:18,000 --> 00:26:21,000
我们还是想讲降低这种样的风险要损失

635
00:26:22,000 --> 00:26:24,000
那么 Snapy 他的这么一个可信理念

636
00:26:24,000 --> 00:26:27,000
就是说如果我们可以用之前我们讲过的这种 container

637
00:26:27,000 --> 00:26:28,000
集装相化的技术

638
00:26:28,000 --> 00:26:29,000
就是说我们是一个

639
00:26:30,000 --> 00:26:31,000
叫做真调升级

640
00:26:31,000 --> 00:26:32,000
不叫真调升级

641
00:26:32,000 --> 00:26:34,000
就是一个升级好了

642
00:26:34,000 --> 00:26:36,000
才完全切换过来

643
00:26:36,000 --> 00:26:37,000
就在中间过程中出现任何问题

644
00:26:37,000 --> 00:26:39,000
我们都是可以回滚的

645
00:26:40,000 --> 00:26:41,000
那么这不就解决了这个问题了吗

646
00:26:41,000 --> 00:26:43,000
这个思想还是挺好的

647
00:26:43,000 --> 00:26:46,000
但他也不是这个 Snapy 也不是第一个做这种事情了

648
00:26:46,000 --> 00:26:48,000
之前有很多那种类似于包管力的

649
00:26:48,000 --> 00:26:51,000
就不是从那种东西来做的尝试

650
00:26:51,000 --> 00:26:52,000
也有很多

651
00:26:52,000 --> 00:26:55,000
可能商用的话最最大

652
00:26:55,000 --> 00:26:57,000
最普及的肯定还是那个

653
00:26:57,000 --> 00:26:59,000
就是 crumb book 用的那个 crumbOS

654
00:27:01,000 --> 00:27:03,000
就 crumbOS 他的升级过程中

655
00:27:04,000 --> 00:27:06,000
它是系统是采用这么一种

656
00:27:06,000 --> 00:27:07,000
就是两个系统了

657
00:27:07,000 --> 00:27:09,000
就是升级升级 A

658
00:27:09,000 --> 00:27:10,000
你用 A 系统的时候

659
00:27:10,000 --> 00:27:12,000
它其实在升级 B 系统

660
00:27:12,000 --> 00:27:15,000
然后如果你在你切换到 B 系统发现有问题的话

661
00:27:15,000 --> 00:27:17,000
它 A 还是可以切换到 A 系统的

662
00:27:17,000 --> 00:27:19,000
就是双方两个分区

663
00:27:19,000 --> 00:27:22,000
但是同样的系统不同的版本这样

664
00:27:23,000 --> 00:27:27,000
然后这个就比那个有一个 recovery mode

665
00:27:27,000 --> 00:27:29,000
要稍微先进一点

666
00:27:29,000 --> 00:27:30,000
没错

667
00:27:30,000 --> 00:27:31,000
两个系统都是可以用的

668
00:27:31,000 --> 00:27:31,000
对

669
00:27:31,000 --> 00:27:33,000
但是他这个力度还是比较粗

670
00:27:33,000 --> 00:27:34,000
就说是一个

671
00:27:34,000 --> 00:27:37,000
因为只有两个 AB 轮化等于是

672
00:27:37,000 --> 00:27:37,000
对

673
00:27:37,000 --> 00:27:39,000
就如果我们其实想做的好一点

674
00:27:39,000 --> 00:27:41,000
就说尽量能够说

675
00:27:41,000 --> 00:27:44,000
连这个就是每一个系统的小的改动

676
00:27:44,000 --> 00:27:47,000
都可以通过这种像 container 的方式

677
00:27:47,000 --> 00:27:48,000
就不就不是 AB 轮化

678
00:27:48,000 --> 00:27:49,000
就是 ABCD 可能这样

679
00:27:49,000 --> 00:27:52,000
可以无限增多的那么方式轮化

680
00:27:52,000 --> 00:27:55,000
但我他那个是是年初的时候

681
00:27:55,000 --> 00:27:58,000
出了一个就可以大家用的这个试玩吧

682
00:27:58,000 --> 00:27:59,000
我就用了一下

683
00:27:59,000 --> 00:28:00,000
就 snapy

684
00:28:00,000 --> 00:28:01,000
我觉得还还不错

685
00:28:01,000 --> 00:28:01,000
挺好的

686
00:28:01,000 --> 00:28:03,000
就感觉跟那个 dorker 挺像

687
00:28:03,000 --> 00:28:05,000
但是管理系统

688
00:28:05,000 --> 00:28:08,000
我觉得这个东西在服务器上的优势还是蛮大的

689
00:28:08,000 --> 00:28:09,000
就是省心

690
00:28:09,000 --> 00:28:10,000
现在的

691
00:28:10,000 --> 00:28:10,000
对

692
00:28:10,000 --> 00:28:13,000
我觉得这一次最重要的意义就是 snapy

693
00:28:13,000 --> 00:28:14,000
终于要进入

694
00:28:14,000 --> 00:28:15,000
因为它之前只是在 call 上用

695
00:28:15,000 --> 00:28:18,000
然后 snapy 现在要进入桌面吧

696
00:28:18,000 --> 00:28:19,000
无论就是桌面吧

697
00:28:19,000 --> 00:28:22,000
是说是 15.04 还是说哪一个叫做

698
00:28:22,000 --> 00:28:23,000
还是 15.10

699
00:28:25,000 --> 00:28:28,000
应该是 15.04 吧

700
00:28:28,000 --> 00:28:30,000
是今年就已经已经发了这个办法

701
00:28:30,000 --> 00:28:31,000
应该是它是

702
00:28:31,000 --> 00:28:32,000
对

703
00:28:32,000 --> 00:28:33,000
它应该是要开始

704
00:28:33,000 --> 00:28:36,000
它这肯定是一个漫长的过程

705
00:28:36,000 --> 00:28:37,000
10.04 我还没有装

706
00:28:37,000 --> 00:28:39,000
我觉得可能在 15.10 里面会出现

707
00:28:39,000 --> 00:28:40,000
对

708
00:28:40,000 --> 00:28:41,000
因为它是 5 月 8 日 announced

709
00:28:41,000 --> 00:28:44,000
所以它应该是 15.10 才会出现

710
00:28:44,000 --> 00:28:44,000
OK

711
00:28:44,000 --> 00:28:45,000
对

712
00:28:45,000 --> 00:28:47,000
因为这个王图他那个系统发行版本

713
00:28:47,000 --> 00:28:48,000
他就是说每隔

714
00:28:48,000 --> 00:28:50,000
好像是一年两年

715
00:28:50,000 --> 00:28:52,000
会发一个所谓长期维护版本的

716
00:28:52,000 --> 00:28:53,000
Luncher

717
00:28:53,000 --> 00:28:53,000
对

718
00:28:53,000 --> 00:28:53,000
OK

719
00:28:53,000 --> 00:28:54,000
对

720
00:28:54,000 --> 00:28:56,000
但是这之间我们现在

721
00:28:56,000 --> 00:28:59,000
就现在那个 snapy 进到这个 Ubuntu 这个正式板

722
00:28:59,000 --> 00:29:00,000
而不是之前那个今年版的 call

723
00:29:00,000 --> 00:29:02,000
它其实是所谓的中间的一个就是

724
00:29:02,000 --> 00:29:05,000
非那个长期维护版本的

725
00:29:05,000 --> 00:29:06,000
就是简单说大家做小白鼠

726
00:29:07,000 --> 00:29:10,000
所以我还是挺鼓励大家去试试

727
00:29:10,000 --> 00:29:11,000
看一下感觉怎么样

728
00:29:11,000 --> 00:29:12,000
然后

729
00:29:12,000 --> 00:29:14,000
因为这个毕竟是一个新

730
00:29:14,000 --> 00:29:15,000
全新的管理系统

731
00:29:15,000 --> 00:29:17,000
我觉得必然是

732
00:29:17,000 --> 00:29:18,000
坑多路滑

733
00:29:18,000 --> 00:29:19,000
哈哈

734
00:29:19,000 --> 00:29:21,000
要要大家去多踩踩

735
00:29:21,000 --> 00:29:22,000
这样后人才用得爽嘛

736
00:29:22,000 --> 00:29:24,000
就是鼓励大家去尝试一下

737
00:29:25,000 --> 00:29:25,000
嗯

738
00:29:25,000 --> 00:29:29,000
然后我觉得他最大的一个特征

739
00:29:29,000 --> 00:29:32,000
或者一个特点就是他会

740
00:29:32,000 --> 00:29:35,000
他把所有的依赖全都打开打在一个包里面

741
00:29:35,000 --> 00:29:36,000
就是他每一个包都是原子的

742
00:29:36,000 --> 00:29:38,000
然后这个包一换上去

743
00:29:38,000 --> 00:29:39,000
所有依赖就跟这个包一起去了

744
00:29:39,000 --> 00:29:40,000
嗯哼

745
00:29:40,000 --> 00:29:42,000
呃也算是他的一个特点

746
00:29:42,000 --> 00:29:46,000
就他试图用就有点像 npm 那样的方式来

747
00:29:47,000 --> 00:29:49,000
提供依赖管理

748
00:29:49,000 --> 00:29:50,000
就所谓依赖管理就是不管你

749
00:29:50,000 --> 00:29:52,000
就你需要什么都全都给你

750
00:29:52,000 --> 00:29:54,000
然后但是你也别关

751
00:29:54,000 --> 00:29:55,000
你也你也别去操心这个东西

752
00:29:55,000 --> 00:29:56,000
别人用没有用上的问题

753
00:29:56,000 --> 00:29:57,000
嗯哼

754
00:29:57,000 --> 00:29:58,000
这点是

755
00:29:59,000 --> 00:30:02,000
就算是现代操作系统发展的一个

756
00:30:02,000 --> 00:30:04,000
一个一个

757
00:30:04,000 --> 00:30:05,000
一个思潮吧

758
00:30:05,000 --> 00:30:06,000
就好像

759
00:30:07,000 --> 00:30:09,000
以我觉得以前之所以会出现 DII Health

760
00:30:09,000 --> 00:30:11,000
或者是 Lipendence Health 这种

761
00:30:11,000 --> 00:30:12,000
嗯哼

762
00:30:12,000 --> 00:30:12,000
呃

763
00:30:12,000 --> 00:30:14,000
窘境原因之一

764
00:30:14,000 --> 00:30:16,000
也就是以前的硬盘太贵了

765
00:30:17,000 --> 00:30:19,000
然后现在想节省空间

766
00:30:19,000 --> 00:30:20,000
老数也快了

767
00:30:20,000 --> 00:30:21,000
对老数也快了

768
00:30:21,000 --> 00:30:22,000
空间也多了

769
00:30:22,000 --> 00:30:25,000
那这种依赖的问题

770
00:30:25,000 --> 00:30:27,000
也许就可以成为这种简单粗暴的好尿什么

771
00:30:27,000 --> 00:30:28,000
我就全都给你包起来

772
00:30:28,000 --> 00:30:29,000
嗯哼

773
00:30:29,000 --> 00:30:30,000
然后呃

774
00:30:30,000 --> 00:30:32,000
一次性的一个异固脑的给你抓上完事

775
00:30:32,000 --> 00:30:34,000
这样的方式来解决也挺好

776
00:30:35,000 --> 00:30:37,000
这现在我的有一个事情我觉得不太清楚

777
00:30:37,000 --> 00:30:40,000
但是硬盘我们现在说存存空间不是一个问题

778
00:30:40,000 --> 00:30:42,000
但是可能另外一个就是说

779
00:30:42,000 --> 00:30:45,000
这个共享的内存可能还是一个问题

780
00:30:45,000 --> 00:30:46,000
因为如果你是通过

781
00:30:46,000 --> 00:30:49,000
就比如说你有两个应用都连接到一个包的话

782
00:30:49,000 --> 00:30:52,000
如果你两个应用同时开这个包本身是可以

783
00:30:52,000 --> 00:30:55,000
就是那个他们共享的那个外部连接的包

784
00:30:55,000 --> 00:30:57,000
应该是可以只用家载一份到内存中的

785
00:30:57,000 --> 00:31:00,000
然后两边是可以呃共用的吧

786
00:31:01,000 --> 00:31:04,000
如果在嗯呃

787
00:31:04,000 --> 00:31:07,000
家载本地的包之前

788
00:31:07,000 --> 00:31:08,000
家载本地的依赖之前

789
00:31:08,000 --> 00:31:10,000
看一下内存里面有没有有的话就用了

790
00:31:10,000 --> 00:31:12,000
但是这个版本不就有问题吗

791
00:31:12,000 --> 00:31:13,000
就可能两个是依赖的

792
00:31:13,000 --> 00:31:14,000
可是是类类的

793
00:31:14,000 --> 00:31:17,000
即便在 dll 的时代同样有这个问题啊

794
00:31:17,000 --> 00:31:18,000
就是你可能需要另外一个版本

795
00:31:18,000 --> 00:31:21,000
那那个时候你还是需要再漏个另外一份呀

796
00:31:21,000 --> 00:31:22,000
嗯

797
00:31:23,000 --> 00:31:24,000
错

798
00:31:24,000 --> 00:31:25,000
嗯对

799
00:31:25,000 --> 00:31:28,000
就总总体来说我觉得就是趋势肯定还是说

800
00:31:29,000 --> 00:31:30,000
呃不管以后操作系统也好

801
00:31:30,000 --> 00:31:32,000
还是这个应用的这个分发药

802
00:31:32,000 --> 00:31:34,000
可能这种就是集装相化

803
00:31:34,000 --> 00:31:35,000
可能还是一个比较好的趋势

804
00:31:35,000 --> 00:31:38,000
就起码他对管理哲学上是一个相对

805
00:31:39,000 --> 00:31:42,000
呃怎么讲独立啊啊好维护的一个东西

806
00:31:42,000 --> 00:31:45,000
当然也有另外一种就是这种反对的声音

807
00:31:45,000 --> 00:31:47,000
反对声音主要就是说从这个

808
00:31:47,000 --> 00:31:50,000
呃软件的这个维护和这个开发的角度上可以讲

809
00:31:50,000 --> 00:31:53,000
比如说之前我们不是出过那个 ssl 的

810
00:31:53,000 --> 00:31:54,000
那个 heart bleed 的那个漏洞吗

811
00:31:55,000 --> 00:31:57,000
要出漏洞肯定大家要学学补补啊

812
00:31:57,000 --> 00:31:59,000
你们很多人都用了那个 open ssl 那个包吗

813
00:31:59,000 --> 00:32:01,000
那大家都要升级到最新版本

814
00:32:02,000 --> 00:32:04,000
呃才可以就避免有那个 heart bleed 这种

815
00:32:04,000 --> 00:32:07,000
比较严重的安全漏洞的存在吗

816
00:32:07,000 --> 00:32:10,000
如果说整个系统的这个 ssl

817
00:32:10,000 --> 00:32:13,000
就用到反正是用到 sl open ssl 这个软件的包

818
00:32:13,000 --> 00:32:15,000
都是外连到同样一个

819
00:32:15,000 --> 00:32:15,000
全都用成自己的

820
00:32:16,000 --> 00:32:17,000
对就只用升级一个嘛

821
00:32:17,000 --> 00:32:19,000
就只用一次升级所有人都好了对吧

822
00:32:19,000 --> 00:32:22,000
就就那个漏洞就安全漏洞就解决了

823
00:32:22,000 --> 00:32:23,000
但是如果采用像

824
00:32:23,000 --> 00:32:25,000
哎集装相化这种方式

825
00:32:25,000 --> 00:32:29,000
就是各个 app 自己是一个套独立完整的这么一套 stack 的话

826
00:32:29,000 --> 00:32:31,000
那你要遇到这种呃

827
00:32:32,000 --> 00:32:33,000
使用面积比较广的

828
00:32:33,000 --> 00:32:35,000
然后又比较严重的 bug

829
00:32:35,000 --> 00:32:38,000
这个这个的软件酷的 bug 的时候就就比较痛苦了

830
00:32:38,000 --> 00:32:40,000
你可能要挨个挨个 app 去升级

831
00:32:40,000 --> 00:32:43,000
去然后才能免才能保证你整个系统中没有

832
00:32:44,000 --> 00:32:47,000
任何部费可以遭受到这种 heart bleed 的类似的

833
00:32:47,000 --> 00:32:49,000
这么一种漏洞的攻击嘛

834
00:32:50,000 --> 00:32:53,000
所以我我不太清楚这两边可能还是有一点矛盾的

835
00:32:53,000 --> 00:32:54,000
我觉得可能从用户的层面来讲

836
00:32:54,000 --> 00:32:57,000
他可能觉得像那种现在时候的 app 那种方式

837
00:32:57,000 --> 00:32:59,000
就装一个然后直接删掉也没什么问题

838
00:32:59,000 --> 00:33:02,000
这种方式可能是更加简单一动和直观的

839
00:33:02,000 --> 00:33:03,000
然后维护性更好

840
00:33:03,000 --> 00:33:05,000
它不会有残留垃圾什么的

841
00:33:05,000 --> 00:33:08,000
但是我觉得像从这个软件开发者的这么一个角度来讲

842
00:33:09,000 --> 00:33:12,000
我们还是也会对这个是有比较大的意义的吧

843
00:33:13,000 --> 00:33:13,000
没错

844
00:33:15,000 --> 00:33:17,000
对 但我也不知道

845
00:33:17,000 --> 00:33:19,000
至少从 Ubuntu 的角度讲

846
00:33:19,000 --> 00:33:23,000
它作为全球第一的 Linux 发行

847
00:33:24,000 --> 00:33:25,000
它已经全球第一了

848
00:33:26,000 --> 00:33:26,000
是吗

849
00:33:27,000 --> 00:33:27,000
应该是吧

850
00:33:27,000 --> 00:33:28,000
我不太清楚

851
00:33:28,000 --> 00:33:31,000
因为我前两天看了一份服务器上的装机量

852
00:33:32,000 --> 00:33:33,000
应该现在应该是全球第一

853
00:33:34,000 --> 00:33:34,000
OK

854
00:33:35,000 --> 00:33:38,000
我之前老是看到有人说我们 Fedora 多好

855
00:33:38,000 --> 00:33:40,000
我们 CentOS 都好多好

856
00:33:40,000 --> 00:33:42,000
所以也很难讲

857
00:33:42,000 --> 00:33:47,000
可能企业级和全球一个总体的水平还是不太一样的

858
00:33:48,000 --> 00:33:49,000
对你要说付费的话

859
00:33:49,000 --> 00:33:51,000
现在 Red Hat 终究是第一了吧

860
00:33:51,000 --> 00:33:52,000
Red Hat 应该是应该的

861
00:33:52,000 --> 00:33:56,000
但是如果你考虑所有的 Linux 发行版本的装机量的话

862
00:33:56,000 --> 00:33:57,000
Ubuntu 现在应该已经是

863
00:33:58,000 --> 00:33:59,000
不是应该已经是

864
00:33:59,000 --> 00:34:01,000
可是我现在看了一份报道是

865
00:34:02,000 --> 00:34:03,000
小白用户太多

866
00:34:03,000 --> 00:34:04,000
什么伤眼支持都不够用了

867
00:34:08,000 --> 00:34:08,000
对

868
00:34:09,000 --> 00:34:14,000
就好像现在 SystemD 也已经跟着 15.04 成为 Ubuntu 的

869
00:34:15,000 --> 00:34:16,000
默认启动项目了

870
00:34:16,000 --> 00:34:17,000
所以启动保密器了

871
00:34:17,000 --> 00:34:18,000
所以

872
00:34:18,000 --> 00:34:19,000
OK

873
00:34:20,000 --> 00:34:22,000
对他们推动力量还是很大

874
00:34:24,000 --> 00:34:25,000
没错

875
00:34:26,000 --> 00:34:28,000
但也有很多人对这个有什么不爽的声音

876
00:34:28,000 --> 00:34:31,000
但是另外一回事以后找机会再聊吧

877
00:34:31,000 --> 00:34:34,000
对他们就无情的被历史的轰流淹没了

878
00:34:37,000 --> 00:34:41,000
OK 下一条新闻是一个

879
00:34:42,000 --> 00:34:43,000
也不算多重要

880
00:34:43,000 --> 00:34:45,000
就是有一个

881
00:34:45,000 --> 00:34:48,000
有一个 Manifesto

882
00:34:48,000 --> 00:34:51,000
叫做 No TCP 活动

883
00:34:52,000 --> 00:34:55,000
对你这里肯定要解释一下他的主要的诉求是什么

884
00:34:56,000 --> 00:34:56,000
对

885
00:34:57,000 --> 00:34:58,000
其实很简单

886
00:34:58,000 --> 00:34:58,000
就是一个网站

887
00:34:58,000 --> 00:35:00,000
一个叫 No TCP 到 LIO

888
00:35:00,000 --> 00:35:02,000
然后上面有一个大大的 TCP

889
00:35:02,000 --> 00:35:06,000
然后换了在上面换了进纸的标志

890
00:35:06,000 --> 00:35:09,000
然后他开宗明一也说了

891
00:35:09,000 --> 00:35:10,000
就说好

892
00:35:10,000 --> 00:35:12,000
我们也是一个怎么说

893
00:35:12,000 --> 00:35:14,000
Hipster 的一个宣告

894
00:35:14,000 --> 00:35:18,000
就是顺应了比如说 NoJS

895
00:35:20,000 --> 00:35:22,000
他这句话写的其实挺酸的

896
00:35:22,000 --> 00:35:29,000
他说 just as NoJS and NIO provided the world that proved to the world

897
00:35:29,000 --> 00:35:34,000
that bare metal performance is always worth the consequent unreadable code

898
00:35:35,000 --> 00:35:39,000
就说 NoJS or Jaskin 这么丑的东西

899
00:35:39,000 --> 00:35:41,000
但是为了 performance

900
00:35:43,000 --> 00:35:45,000
也是可以被人接受的

901
00:35:45,000 --> 00:35:50,000
或者是那么多这种莫名其妙 NoSQL 的 datavis

902
00:35:50,000 --> 00:35:55,000
也是被证明是非常有用的

903
00:35:56,000 --> 00:35:59,000
我们现在也要开始宣扬一下 TCP

904
00:35:59,000 --> 00:36:01,000
其实是非常传统非常老雕雅

905
00:36:01,000 --> 00:36:04,000
非常不那么入食的东西

906
00:36:04,000 --> 00:36:08,000
我们要宣扬大家来开始并系 TCP

907
00:36:08,000 --> 00:36:13,000
在不该使用 TCP 的地方就不要使用 TCP

908
00:36:14,000 --> 00:36:15,000
然后对

909
00:36:16,000 --> 00:36:18,000
其实它的诉求就是说

910
00:36:18,000 --> 00:36:22,000
你要尽量去采用 UDP 协议做一些

911
00:36:23,000 --> 00:36:25,000
本来不该有 TCP 完整

912
00:36:25,000 --> 00:36:29,000
或者是使用 TCP 协议会太重的成合之下

913
00:36:29,000 --> 00:36:31,000
主要有哪些可以举个例子吗

914
00:36:32,000 --> 00:36:39,000
比如说他举的例子像 Google 开发的叫 Quick 协议

915
00:36:39,000 --> 00:36:44,000
其实就是一个以基于 UDP 的传输协议

916
00:36:44,000 --> 00:36:48,000
或者是他写一些比如说 NDNS

917
00:36:48,000 --> 00:36:49,000
或者 NTP 或者 RTP

918
00:36:49,000 --> 00:36:52,000
其实全都是基于 UDP 的协议

919
00:36:52,000 --> 00:36:57,000
然后他的 Manifesto 的要点就是

920
00:36:57,000 --> 00:37:02,000
如果你开含一个比较依赖实实性

921
00:37:03,000 --> 00:37:05,000
比较强调不能有 Letsy

922
00:37:06,000 --> 00:37:09,000
但是又能接受丢一些包的 F 的话

923
00:37:09,000 --> 00:37:11,000
其实用 TCP 是一个很好的选择

924
00:37:12,000 --> 00:37:14,000
他还举了 Torrent

925
00:37:14,000 --> 00:37:18,000
就是 BT 下的那个公司组织所开发的

926
00:37:18,000 --> 00:37:19,000
所以叫什么

927
00:37:22,000 --> 00:37:23,000
MuTP

928
00:37:24,000 --> 00:37:28,000
Mu 就是一个那个希腊字母的 MuTP

929
00:37:28,000 --> 00:37:32,000
Transfer Protocol 也是基于 UDP 的

930
00:37:32,000 --> 00:37:32,000
对

931
00:37:33,000 --> 00:37:34,000
Mu 就是要解释一下

932
00:37:34,000 --> 00:37:38,000
Mu 就是在对应到英文就是 Micro 的意思

933
00:37:38,000 --> 00:37:39,000
就是微型

934
00:37:39,000 --> 00:37:39,000
对很小

935
00:37:39,000 --> 00:37:43,000
微型 Cp 微型 Control Protocol 对那一个意思

936
00:37:44,000 --> 00:37:45,000
就他晚上有这么一段话

937
00:37:45,000 --> 00:37:46,000
就说 TCP 的问题是什么

938
00:37:47,000 --> 00:37:47,000
就说

939
00:37:47,000 --> 00:37:49,000
The problem now is that

940
00:37:49,000 --> 00:37:52,000
TCP gives us an ordering guarantee

941
00:37:52,000 --> 00:37:54,000
That's much stronger than we need

942
00:37:54,000 --> 00:37:58,000
All packets are reassembled in order as they are received

943
00:37:58,000 --> 00:38:01,000
But we know that the order in which we interleave them

944
00:38:01,000 --> 00:38:04,000
Never matter to begin with

945
00:38:04,000 --> 00:38:06,000
One delayed packet

946
00:38:06,000 --> 00:38:08,000
Can artificially delay the availability

947
00:38:08,000 --> 00:38:12,000
Of the data for all streams multiplexed over that connection

948
00:38:13,000 --> 00:38:15,000
This is one form of head of line blocking

949
00:38:15,000 --> 00:38:18,000
As before the application knows

950
00:38:18,000 --> 00:38:21,000
It's specific needs better than TCP

951
00:38:21,000 --> 00:38:24,000
In this case we've treated startups latency

952
00:38:24,000 --> 00:38:27,000
For a significant steady state latency

953
00:38:27,000 --> 00:38:28,000
When neither is necessary

954
00:38:29,000 --> 00:38:30,000
这段话有点绕

955
00:38:30,000 --> 00:38:31,000
然后有点长

956
00:38:31,000 --> 00:38:33,000
然后里面有设计的很多概念

957
00:38:33,000 --> 00:38:36,000
可能要要解释一下才能够理解

958
00:38:36,000 --> 00:38:38,000
就很多如果不是学这个网络通信的

959
00:38:38,000 --> 00:38:39,000
其实我们也不是学网络通信

960
00:38:39,000 --> 00:38:41,000
我们是拌掉资水

961
00:38:41,000 --> 00:38:41,000
但是就尽量

962
00:38:41,000 --> 00:38:43,000
尽量解释一下什么意思

963
00:38:44,000 --> 00:38:45,000
TCP 的主要问题是说

964
00:38:45,000 --> 00:38:46,000
TCP 我们知道

965
00:38:46,000 --> 00:38:49,000
他提供一个所谓的排序的保证

966
00:38:49,000 --> 00:38:51,000
就说你先发的报一定是先收到的

967
00:38:53,000 --> 00:38:54,000
后发的报是后收到的

968
00:38:55,000 --> 00:38:59,000
这个是一个非常强的一个感情

969
00:38:59,000 --> 00:39:00,000
很强的一个保证

970
00:39:01,000 --> 00:39:03,000
但是实际传说我们的网络传说

971
00:39:03,000 --> 00:39:05,000
并不是说严格是先入先出

972
00:39:05,000 --> 00:39:07,000
因为各地跟一直走到路径不一样

973
00:39:08,000 --> 00:39:11,000
和可能一些严持或丢包的情况不一样

974
00:39:11,000 --> 00:39:13,000
它是要你的操绪层底层

975
00:39:13,000 --> 00:39:15,000
就 TCP 这个协议这一层

976
00:39:15,000 --> 00:39:17,000
是要做一些额外的工作

977
00:39:17,000 --> 00:39:19,000
去把那些可能是乱续来的报

978
00:39:19,000 --> 00:39:20,000
重新组合成有续的

979
00:39:20,000 --> 00:39:22,000
这样的话会有什么问题

980
00:39:22,000 --> 00:39:25,000
就是说一个

981
00:39:25,000 --> 00:39:26,000
假设你发的报

982
00:39:26,000 --> 00:39:28,000
说明是 12345 这样说明发

983
00:39:28,000 --> 00:39:30,000
里面还有 TCP 的排序保证

984
00:39:30,000 --> 00:39:32,000
你收到的也是 12345

985
00:39:32,000 --> 00:39:34,000
但是有可能在传说过程中

986
00:39:34,000 --> 00:39:35,000
2345 都正常过来了

987
00:39:35,000 --> 00:39:37,000
但是一可能被被 drop 掉

988
00:39:37,000 --> 00:39:39,000
就是在传说过程中被丢掉

989
00:39:39,000 --> 00:39:40,000
或者损坏了

990
00:39:40,000 --> 00:39:41,000
这叫重发

991
00:39:41,000 --> 00:39:42,000
重发的话

992
00:39:42,000 --> 00:39:43,000
你得等那个什么

993
00:39:43,000 --> 00:39:44,000
有这个这个 ACT

994
00:39:44,000 --> 00:39:46,000
就是这个

995
00:39:46,000 --> 00:39:47,000
Acnology

996
00:39:47,000 --> 00:39:48,000
这个中文叫什么

997
00:39:50,000 --> 00:39:51,000
确认接受

998
00:39:51,000 --> 00:39:53,000
对 确认接受这个机制

999
00:39:53,000 --> 00:39:54,000
就会导致说

1000
00:39:54,000 --> 00:39:56,000
你得等那个比较久的时间

1001
00:39:56,000 --> 00:39:58,000
才能够发送发

1002
00:39:58,000 --> 00:39:58,000
才知道

1003
00:39:58,000 --> 00:40:02,000
一那个包已经被 drop 掉了

1004
00:40:02,000 --> 00:40:03,000
对方没有收到

1005
00:40:03,000 --> 00:40:04,000
我还得再重发

1006
00:40:04,000 --> 00:40:06,000
但这个相对延迟的

1007
00:40:06,000 --> 00:40:08,000
你带的过程中

1008
00:40:08,000 --> 00:40:09,000
对方那边

1009
00:40:09,000 --> 00:40:12,000
即便他的那个 TCP 协议那层

1010
00:40:12,000 --> 00:40:15,000
已经拿到了 2345 这么多个包

1011
00:40:15,000 --> 00:40:16,000
因为他没有 1

1012
00:40:16,000 --> 00:40:18,000
他没有办法像上层应用说提供说

1013
00:40:18,000 --> 00:40:19,000
哎

1014
00:40:19,000 --> 00:40:21,000
这个数据其实 80%已经有了

1015
00:40:21,000 --> 00:40:24,000
但最开始的 20%是还没收到

1016
00:40:24,000 --> 00:40:26,000
你是就等着吧

1017
00:40:26,000 --> 00:40:27,000
反正我现在我什么也不给你

1018
00:40:27,000 --> 00:40:28,000
你总是要等

1019
00:40:28,000 --> 00:40:29,000
你这只能等着

1020
00:40:29,000 --> 00:40:30,000
这个就是说

1021
00:40:30,000 --> 00:40:31,000
这是一种像所谓的

1022
00:40:31,000 --> 00:40:32,000
Head of Line Blocking

1023
00:40:32,000 --> 00:40:34,000
就是叫头部组塞

1024
00:40:34,000 --> 00:40:35,000
不知道叫翻译合不合适

1025
00:40:35,000 --> 00:40:38,000
就是因为一个火车头的前面那些

1026
00:40:38,000 --> 00:40:40,000
那些没有没有没有到

1027
00:40:40,000 --> 00:40:42,000
导致后面的速量到了

1028
00:40:42,000 --> 00:40:43,000
但是也没法交货给你

1029
00:40:43,000 --> 00:40:44,000
但其实这个是很蠢的

1030
00:40:44,000 --> 00:40:47,000
我们知道对于很多这种实际应用来讲

1031
00:40:47,000 --> 00:40:48,000
他并不是特别在意

1032
00:40:48,000 --> 00:40:51,000
说这个一定要按某一个机枕的顺序

1033
00:40:51,000 --> 00:40:52,000
到头头递给你的信息

1034
00:40:52,000 --> 00:40:53,000
对吧

1035
00:40:53,000 --> 00:40:55,000
最简单一个我们说打开一个网页

1036
00:40:55,000 --> 00:40:55,000
对吧

1037
00:40:55,000 --> 00:40:58,000
传统来说我们我们得等那个

1038
00:40:58,000 --> 00:40:59,000
那个每一个 HTML 代码

1039
00:40:59,000 --> 00:41:01,000
一个一个字符的传过来

1040
00:41:01,000 --> 00:41:02,000
我们才可以组合显示

1041
00:41:02,000 --> 00:41:03,000
这其实并不是的

1042
00:41:03,000 --> 00:41:04,000
现在流量其实很聪明

1043
00:41:04,000 --> 00:41:05,000
大家可以解析片段

1044
00:41:06,000 --> 00:41:06,000
对吧

1045
00:41:07,000 --> 00:41:08,000
那可以说

1046
00:41:08,000 --> 00:41:11,000
我们先说到后面的看看那里有一个

1047
00:41:11,000 --> 00:41:14,000
js 前面那里有一个其他什么东西

1048
00:41:14,000 --> 00:41:15,000
它也是可以组设

1049
00:41:15,000 --> 00:41:16,000
可能这个例子还不是很好

1050
00:41:16,000 --> 00:41:17,000
可能流量去解析

1051
00:41:17,000 --> 00:41:19,000
还是有一些顺序依赖的

1052
00:41:19,000 --> 00:41:21,000
我们再举一些相对来说比较

1053
00:41:23,000 --> 00:41:25,000
更容易讲的业劣的图片

1054
00:41:25,000 --> 00:41:25,000
对吧

1055
00:41:25,000 --> 00:41:27,000
你知道像 JPEG 那些图片

1056
00:41:27,000 --> 00:41:28,000
它是我们是可以

1057
00:41:28,000 --> 00:41:29,000
其实可以分块夹仔的

1058
00:41:29,000 --> 00:41:31,000
就是假设我们把这个图片

1059
00:41:31,000 --> 00:41:31,000
或者视频聊

1060
00:41:31,000 --> 00:41:32,000
最简单的视频聊

1061
00:41:32,000 --> 00:41:34,000
你一真正看到并不重要

1062
00:41:34,000 --> 00:41:35,000
没错

1063
00:41:35,000 --> 00:41:37,000
你甚至可以说

1064
00:41:37,000 --> 00:41:39,000
我先收到后面的在 buffer

1065
00:41:39,000 --> 00:41:41,000
所以先收到我就存起来

1066
00:41:41,000 --> 00:41:42,000
然后当然再放对不对

1067
00:41:43,000 --> 00:41:45,000
其实会有这么一些问题的

1068
00:41:45,000 --> 00:41:48,000
但是因为由于我们现在整个网络

1069
00:41:48,000 --> 00:41:51,000
还是严重以 TCP 为主

1070
00:41:51,000 --> 00:41:53,000
就起码从应用层面的角度来看

1071
00:41:54,000 --> 00:41:56,000
其实体验是并不好的

1072
00:41:56,000 --> 00:41:57,000
当然这也会刚刚你提到

1073
00:41:57,000 --> 00:41:58,000
像一些应用

1074
00:41:58,000 --> 00:42:01,000
像 Google 新出 Quake 这种协议

1075
00:42:01,000 --> 00:42:02,000
它就是为了解决这个问题

1076
00:42:02,000 --> 00:42:06,000
就是说我们知道在给定正应用情况下

1077
00:42:06,000 --> 00:42:08,000
我们如果不保证

1078
00:42:08,000 --> 00:42:11,000
严格保证这个顺序投地

1079
00:42:11,000 --> 00:42:13,000
我们其实可以获得更好的传输的

1080
00:42:13,000 --> 00:42:15,000
一个是传输在框也好

1081
00:42:15,000 --> 00:42:16,000
因为它有 TCP

1082
00:42:16,000 --> 00:42:19,000
还有一些其他的流控的方法去解决

1083
00:42:19,000 --> 00:42:20,000
如果遇到丢包

1084
00:42:20,000 --> 00:42:21,000
它会把传输在框降低

1085
00:42:21,000 --> 00:42:22,000
对吧

1086
00:42:22,000 --> 00:42:24,000
然后再你看组织恢复这样的一个过程

1087
00:42:24,000 --> 00:42:27,000
但是其实如果我们面对

1088
00:42:27,000 --> 00:42:28,000
现在的一些网络状况

1089
00:42:28,000 --> 00:42:31,000
特别是像移动手机网络

1090
00:42:31,000 --> 00:42:34,000
它是一个高度延迟不稳定的

1091
00:42:34,000 --> 00:42:34,000
这种情况

1092
00:42:34,000 --> 00:42:37,000
其实是对 TCP 这种协议来说

1093
00:42:37,000 --> 00:42:39,000
是不太适合在这种网络情况下用

1094
00:42:39,000 --> 00:42:39,000
但是我们没有办法

1095
00:42:39,000 --> 00:42:43,000
就是说有一个历史依赖的路径依赖的问题

1096
00:42:43,000 --> 00:42:44,000
现在已经有了

1097
00:42:44,000 --> 00:42:45,000
你没有办法记得用

1098
00:42:45,000 --> 00:42:45,000
但是我们就说

1099
00:42:45,000 --> 00:42:47,000
现在我们一直认识到的

1100
00:42:47,000 --> 00:42:48,000
有这么一些问题

1101
00:42:48,000 --> 00:42:51,000
我们就说从协议层面来讲

1102
00:42:51,000 --> 00:42:53,000
我们一个更加简单

1103
00:42:53,000 --> 00:42:54,000
没有那么多包袱

1104
00:42:54,000 --> 00:42:56,000
没有那么多保证的 UDP 协议的

1105
00:42:56,000 --> 00:42:59,000
技术上在构建出这么一个

1106
00:42:59,000 --> 00:43:01,000
应用层独立的协议

1107
00:43:01,000 --> 00:43:02,000
然后来满足

1108
00:43:02,000 --> 00:43:04,000
就提供更低的延迟

1109
00:43:04,000 --> 00:43:05,000
更好的代宽

1110
00:43:05,000 --> 00:43:05,000
这么一些

1111
00:43:05,000 --> 00:43:07,000
最终得到的是用户是更好的体验

1112
00:43:09,000 --> 00:43:09,000
对

1113
00:43:09,000 --> 00:43:10,000
可以插回这个

1114
00:43:10,000 --> 00:43:12,000
当然从 TCP 的角度来看

1115
00:43:12,000 --> 00:43:14,000
也不是没有过

1116
00:43:14,000 --> 00:43:18,000
就是试图改善 TCP 的延迟的尝试

1117
00:43:18,000 --> 00:43:23,000
比如说曾经有过一个叫 TCP Vegas 的项目

1118
00:43:23,000 --> 00:43:28,000
我相信甚至至少 FreeBSD 的内核里面

1119
00:43:28,000 --> 00:43:31,000
也已经把它编译进去了

1120
00:43:31,000 --> 00:43:33,000
就是现在 BSD 应该已经支持

1121
00:43:33,000 --> 00:43:36,000
所谓的 TCP Vegas 这样一种

1122
00:43:36,000 --> 00:43:41,000
叫做 Congestion Avoidance Algorithm 的改善版本

1123
00:43:41,000 --> 00:43:43,000
就是使用这种 TCP 的

1124
00:43:43,000 --> 00:43:44,000
怎么说方言

1125
00:43:44,000 --> 00:43:47,000
你可以获得更好的

1126
00:43:47,000 --> 00:43:48,000
更低的延迟

1127
00:43:48,000 --> 00:43:52,000
因为它试图从算法层面上去

1128
00:43:52,000 --> 00:43:55,000
减少 TCP 所可能产生的网络组绅

1129
00:43:55,000 --> 00:43:59,000
但是出于历史原因

1130
00:43:59,000 --> 00:44:01,000
就是 Worthy's Better 的

1131
00:44:01,000 --> 00:44:05,000
普通 TCP 的大部分时候是足够用的

1132
00:44:05,000 --> 00:44:09,000
所以这个 TCP Vegas 的项目一直没有普及开来

1133
00:44:09,000 --> 00:44:11,000
至少我相信 Windows 应该是不值得

1134
00:44:11,000 --> 00:44:13,000
所以

1135
00:44:13,000 --> 00:44:15,000
但 UDP 是到处都在

1136
00:44:15,000 --> 00:44:16,000
所以基于 UDP 来开发这种

1137
00:44:16,000 --> 00:44:21,000
所谓的 No-TCP 的专门的传统协议

1138
00:44:21,000 --> 00:44:26,000
应该将来会比较成为某种潮流趋势

1139
00:44:26,000 --> 00:44:28,000
当然并不意味着我们要抛弃 TCP

1140
00:44:28,000 --> 00:44:32,000
就好像 No-TCP 并不是真的 No-TCP

1141
00:44:32,000 --> 00:44:35,000
No-TCP 也是 Not Only-TCP

1142
00:44:36,000 --> 00:44:37,000
没错

1143
00:44:37,000 --> 00:44:40,000
但是这里面其实我觉得问题还是蛮多的

1144
00:44:40,000 --> 00:44:41,000
首先一个

1145
00:44:41,000 --> 00:44:45,000
如果所有的应用程都自己去基于 UDP 来

1146
00:44:45,000 --> 00:44:47,000
就因为 UDP 不保证一些东西

1147
00:44:47,000 --> 00:44:51,000
所以它的延迟和带宽就会好一些

1148
00:44:51,000 --> 00:44:53,000
但是其实还是有很多很多问题

1149
00:44:53,000 --> 00:44:54,000
因为网络并不

1150
00:44:54,000 --> 00:44:56,000
如果我们想象那么简单

1151
00:44:56,000 --> 00:44:59,000
比如说可以随便提几个比较常见的问题

1152
00:44:59,000 --> 00:45:00,000
第一个是说

1153
00:45:00,000 --> 00:45:02,000
从这个成本上来讲

1154
00:45:02,000 --> 00:45:04,000
所有的应用都要自己重新发明一遍轮子

1155
00:45:04,000 --> 00:45:04,000
对吧

1156
00:45:04,000 --> 00:45:08,000
本来又说系统可以解决这个 TCP 提供这个顺序保证

1157
00:45:08,000 --> 00:45:09,000
让你协议的时候

1158
00:45:09,000 --> 00:45:10,000
你就有一个假设可以做

1159
00:45:10,000 --> 00:45:12,000
其实可以减化很多事情

1160
00:45:12,000 --> 00:45:14,000
那现在就说你没有这一层

1161
00:45:14,000 --> 00:45:14,000
你要自己去

1162
00:45:14,000 --> 00:45:15,000
要么你自己去

1163
00:45:15,000 --> 00:45:20,000
所以自己发明轮子自己在搞一遍类似这种亏核的协议

1164
00:45:20,000 --> 00:45:22,000
或者你直接用现成的亏核协议

1165
00:45:22,000 --> 00:45:24,000
但是就即便是你用现成的这种亏核协议

1166
00:45:24,000 --> 00:45:25,000
它还是有一个问题

1167
00:45:25,000 --> 00:45:27,000
就是它是一个应用层的东西

1168
00:45:27,000 --> 00:45:29,000
应用层的东西有什么不好的

1169
00:45:29,000 --> 00:45:30,000
就是应用层的东西

1170
00:45:30,000 --> 00:45:34,000
它应用互相之间是没有办法直接沟通协调动

1171
00:45:34,000 --> 00:45:37,000
因为出于权限的问题和安全的原因

1172
00:45:37,000 --> 00:45:38,000
对

1173
00:45:38,000 --> 00:45:38,000
对

1174
00:45:38,000 --> 00:45:40,000
所以这会造成说

1175
00:45:40,000 --> 00:45:47,000
同一个系统上面的跑着多个 GUDP 协议的应用会互相打架

1176
00:45:47,000 --> 00:45:48,000
一个常见的例子就是说

1177
00:45:48,000 --> 00:45:50,000
可能单机上还不是很明显

1178
00:45:50,000 --> 00:45:51,000
毕竟是你一个人用

1179
00:45:51,000 --> 00:45:55,000
但是像如果你几个人在共用一个路由器

1180
00:45:55,000 --> 00:45:58,000
比如说你在上网打游戏

1181
00:45:58,000 --> 00:46:00,000
那边你的室友在 BT

1182
00:46:00,000 --> 00:46:03,000
然后你就比较痛苦了

1183
00:46:03,000 --> 00:46:06,000
你没有办法控制它电脑去做一些事情

1184
00:46:06,000 --> 00:46:10,000
你唯一能做到就是在路由器上去做一些流控

1185
00:46:10,000 --> 00:46:11,000
给大家什么 Quality of Service

1186
00:46:11,000 --> 00:46:14,000
就是服务质量的一些控制

1187
00:46:14,000 --> 00:46:16,000
但是你是并没有直接控制它的电脑的

1188
00:46:16,000 --> 00:46:18,000
这个情况就可以类似

1189
00:46:18,000 --> 00:46:20,000
你以为如果大家都在同一台机上的说

1190
00:46:20,000 --> 00:46:24,000
就大部分的应用都自己搞这么一套 UDP 的话

1191
00:46:24,000 --> 00:46:26,000
就大家其实可能会互相抢占资源的

1192
00:46:26,000 --> 00:46:29,000
对

1193
00:46:29,000 --> 00:46:32,000
这好像你和你的邻居们只有那么一个游筒

1194
00:46:32,000 --> 00:46:34,000
然后你每天要自己很多个性能

1195
00:46:34,000 --> 00:46:35,000
有很三马的邻居

1196
00:46:35,000 --> 00:46:36,000
对

1197
00:46:36,000 --> 00:46:37,000
信塞不进去了

1198
00:46:37,000 --> 00:46:37,000
对

1199
00:46:37,000 --> 00:46:38,000
对

1200
00:46:39,000 --> 00:46:40,000
我之前想起之后

1201
00:46:40,000 --> 00:46:42,000
那有一个人说他们说什么

1202
00:46:42,000 --> 00:46:45,000
他嫌宿舍里面其他人打游戏太吵

1203
00:46:45,000 --> 00:46:50,000
然后他把一个网线插在墙上的网线接口

1204
00:46:50,000 --> 00:46:53,000
就是他自己的那个位置上没有接到

1205
00:46:53,000 --> 00:46:54,000
没有接到网线

1206
00:46:54,000 --> 00:46:57,000
然后他把网线连到床上

1207
00:46:57,000 --> 00:47:04,000
然后在床上把网线的两端绑在一起

1208
00:47:04,000 --> 00:47:08,000
这样他只要用大木脚纸去踩一下

1209
00:47:08,000 --> 00:47:09,000
整个宿舍就断网

1210
00:47:11,000 --> 00:47:14,000
Effectively 让所有人玩不了网游

1211
00:47:14,000 --> 00:47:16,000
然后可以实际安心的睡觉

1212
00:47:16,000 --> 00:47:17,000
太机智了

1213
00:47:17,000 --> 00:47:19,000
这一哥们竟然竟然还活下来

1214
00:47:19,000 --> 00:47:21,000
没有被四友砍死也是不容易

1215
00:47:21,000 --> 00:47:22,000
没有被发现

1216
00:47:24,000 --> 00:47:25,000
四友太丑了

1217
00:47:27,000 --> 00:47:27,000
好吧

1218
00:47:27,000 --> 00:47:30,000
如果遇到像我这种吹毛球刺的

1219
00:47:30,000 --> 00:47:32,000
因为去追根到底到底是哪个线

1220
00:47:32,000 --> 00:47:33,000
你出了问题

1221
00:47:33,000 --> 00:47:34,000
就会发现是他干的

1222
00:47:36,000 --> 00:47:38,000
这是知识改变命运的活生生的例子

1223
00:47:38,000 --> 00:47:39,000
只有你懂这些

1224
00:47:39,000 --> 00:47:41,000
你就可以去蛮动别人的

1225
00:47:41,000 --> 00:47:43,000
所以什么 knowledge is power

1226
00:47:43,000 --> 00:47:44,000
什么知识就是权利

1227
00:47:46,000 --> 00:47:48,000
刚才核心问题点就是说

1228
00:47:49,000 --> 00:47:52,000
CCP 并不是一个完全不好的东西

1229
00:47:52,000 --> 00:47:54,000
它提供有一些很基本的保证

1230
00:47:54,000 --> 00:47:58,000
就是说大家资源分配是由系统车机来说的

1231
00:47:58,000 --> 00:48:03,000
然后系统不会说特别偏向某一些软件而放弃

1232
00:48:03,000 --> 00:48:05,000
另外一些软件这样会均衡一点

1233
00:48:06,000 --> 00:48:08,000
特别是在中国这种大环境下是吧

1234
00:48:08,000 --> 00:48:11,000
是搞不指不定哪个流氓软件

1235
00:48:11,000 --> 00:48:12,000
你都给你抓上这种东西之后

1236
00:48:12,000 --> 00:48:13,000
你就很哭哈哈了

1237
00:48:14,000 --> 00:48:17,000
但是对是一个其实说白了

1238
00:48:17,000 --> 00:48:19,000
最终说到底还是一个权利的

1239
00:48:19,000 --> 00:48:21,000
谁说到算的问题

1240
00:48:21,000 --> 00:48:24,000
就是你相信你的系统是一个更加公平

1241
00:48:24,000 --> 00:48:28,000
公开公正的一个参与者

1242
00:48:28,000 --> 00:48:32,000
还是说你说觉得你为了追求某一个用户

1243
00:48:32,000 --> 00:48:35,000
某一个应用的体验的快好

1244
00:48:35,000 --> 00:48:36,000
响应低

1245
00:48:37,000 --> 00:48:39,000
愿意放弃其他有一些应用的

1246
00:48:40,000 --> 00:48:42,000
这个响应速度还是怎么样

1247
00:48:42,000 --> 00:48:45,000
这里面其实是我觉得还有很多是要全衡的

1248
00:48:46,000 --> 00:48:50,000
并不是一个看起来那么简单的纯技术的一个讨论

1249
00:48:51,000 --> 00:48:52,000
嗯没错

1250
00:48:54,000 --> 00:48:58,000
ok 嗯接下来一条新闻是

1251
00:48:59,000 --> 00:49:01,000
我非常喜欢乐见的就是

1252
00:49:02,000 --> 00:49:05,000
google 在研发 dart language

1253
00:49:06,000 --> 00:49:09,000
用于开发 android f

1254
00:49:09,000 --> 00:49:09,000
耶

1255
00:49:11,000 --> 00:49:12,000
为什么不是 go

1256
00:49:12,000 --> 00:49:14,000
为什么不是 go 我抗议

1257
00:49:16,000 --> 00:49:18,000
应该还是全红利币的结果吧

1258
00:49:18,000 --> 00:49:21,000
我觉得 go 可能目前看来还是不太适合开发

1259
00:49:23,000 --> 00:49:25,000
需要写很多界面的东西我也不知道

1260
00:49:25,000 --> 00:49:29,000
就还是语法还是非常太弱小了

1261
00:49:30,000 --> 00:49:32,000
他不是弱小就是 go 太

1262
00:49:33,000 --> 00:49:34,000
太金刚钻了

1263
00:49:34,000 --> 00:49:36,000
他他比较

1264
00:49:37,000 --> 00:49:39,000
精干他太小

1265
00:49:39,000 --> 00:49:40,000
要看

1266
00:49:40,000 --> 00:49:42,000
不过这里可能要先解释一下

1267
00:49:42,000 --> 00:49:45,000
dart 是个是一个什么类型的样子的语言

1268
00:49:46,000 --> 00:49:47,000
需要解释吗

1269
00:49:48,000 --> 00:49:48,000
解释一下

1270
00:49:48,000 --> 00:49:51,000
我觉得并不是所有人都去关注这一块的

1271
00:49:51,000 --> 00:49:52,000
不知道就

1272
00:49:55,000 --> 00:49:56,000
anyway 好

1273
00:49:56,000 --> 00:49:58,000
dart 其实是就是

1274
00:49:58,000 --> 00:50:02,000
chrome 的 v 8 team 开发出来的一种语言

1275
00:50:02,000 --> 00:50:02,000
嗯哼

1276
00:50:02,000 --> 00:50:03,000
呃

1277
00:50:04,000 --> 00:50:07,000
他们开发 dart 的主要原因也就是因为

1278
00:50:07,000 --> 00:50:10,000
javascript 和 java 一样就比较老了嘛

1279
00:50:10,000 --> 00:50:13,000
javascript 也是 95 年 20 一谎 20 年了

1280
00:50:13,000 --> 00:50:16,000
20 年这么老的一个 javascript 的语言

1281
00:50:16,000 --> 00:50:21,000
他们也希望就好像微软的像微软那个 type script 一样

1282
00:50:21,000 --> 00:50:24,000
也希望开发出一种东西来取它取而代之

1283
00:50:25,000 --> 00:50:27,000
然后 dart 就是这样一种

1284
00:50:28,000 --> 00:50:28,000
呃

1285
00:50:29,000 --> 00:50:33,000
google 希望它能够成为下一代流软器语言的语言

1286
00:50:33,000 --> 00:50:35,000
然后 dart 现在有两种执行方式

1287
00:50:35,000 --> 00:50:38,000
一种是直接编译成他自己的训练机的

1288
00:50:38,000 --> 00:50:39,000
呃

1289
00:50:40,000 --> 00:50:44,000
i al 呃另外一种方式是把 dart 编译为 javascript

1290
00:50:45,000 --> 00:50:46,000
我记得当时是

1291
00:50:47,000 --> 00:50:49,000
当时有过一个 me 就是

1292
00:50:49,000 --> 00:50:52,000
呃 dart 写了一行 Hello World

1293
00:50:52,000 --> 00:50:54,000
然后编译出来 javascript 的行有 8 k

1294
00:50:56,000 --> 00:50:58,000
对有什么有那个 overhead

1295
00:50:59,000 --> 00:51:01,000
对有一个非常比较严重的偶然

1296
00:51:01,000 --> 00:51:04,000
就是如果你把它编译成 javascript 的话

1297
00:51:04,000 --> 00:51:06,000
它会变得非常用种

1298
00:51:06,000 --> 00:51:10,000
但是相信目前状况已经有大有比较大的改善

1299
00:51:10,000 --> 00:51:12,000
嗯然后 dart 这种语言呢

1300
00:51:13,000 --> 00:51:13,000
呃

1301
00:51:14,000 --> 00:51:16,000
接下来即将被推广到

1302
00:51:17,000 --> 00:51:19,000
android 定用开发上面

1303
00:51:19,000 --> 00:51:20,000
就是呃

1304
00:51:20,000 --> 00:51:24,000
之前我们不是提到过 android app 可以呃

1305
00:51:24,000 --> 00:51:27,000
直接用 cjavascript 来写那种比较

1306
00:51:27,000 --> 00:51:29,000
performance critical 的

1307
00:51:29,000 --> 00:51:31,000
呃 app 比如说游戏游戏

1308
00:51:31,000 --> 00:51:33,000
然后现在呢

1309
00:51:33,000 --> 00:51:35,000
呃 google 决定说好你不写游戏的话

1310
00:51:35,000 --> 00:51:38,000
也可以采用 javascript 之外的语言就是 dart

1311
00:51:39,000 --> 00:51:41,000
呃而且这个 dart 最大的特意呃

1312
00:51:41,000 --> 00:51:45,000
一个一个一个优势就是或者他们的理念

1313
00:51:45,000 --> 00:51:48,000
他们的理想目标就是希望能够用 dart 写出来的 app

1314
00:51:48,000 --> 00:51:50,000
都跑得非常非常快

1315
00:51:50,000 --> 00:51:53,000
他们有个指标是 120 fps

1316
00:51:54,000 --> 00:51:57,000
哈哈就是一跑就非常普通的 60 fps 已经不足以满足了

1317
00:51:57,000 --> 00:51:59,000
对了没错

1318
00:51:59,000 --> 00:52:01,000
就我们之前提到那个

1319
00:52:01,000 --> 00:52:04,000
哎不是我们之前是你们之前提到的那个 flipboard

1320
00:52:05,000 --> 00:52:08,000
呃在开发上实现的 app 好像也只有 60 fps

1321
00:52:08,000 --> 00:52:13,000
对对因为你更快没有用没有显示器只有刷 60 次

1322
00:52:13,000 --> 00:52:13,000
没名啊

1323
00:52:14,000 --> 00:52:18,000
对然后他们说好我们用 dart 来写 120 fps app

1324
00:52:19,000 --> 00:52:22,000
呃不过先浇个冷水啊

1325
00:52:22,000 --> 00:52:24,000
dart 本来之前说是干一件讲啊

1326
00:52:24,000 --> 00:52:26,000
是本来是说在做进这个 crown 就 td

1327
00:52:26,000 --> 00:52:27,000
对你比较 td 就是说

1328
00:52:28,000 --> 00:52:31,000
和这个 java script 说一个并就是同时存在

1329
00:52:31,000 --> 00:52:33,000
支持的官方支持的语言啊

1330
00:52:33,000 --> 00:52:37,000
但后来好像这事已经说不是了

1331
00:52:37,000 --> 00:52:40,000
就说不进那个 dart 语言不进这个流量器了

1332
00:52:40,000 --> 00:52:42,000
都不进 crown 至少啊

1333
00:52:42,000 --> 00:52:46,000
这是什么时候是就就上个月吧

1334
00:52:46,000 --> 00:52:50,000
就最近也不是就今年的就最近你两个月有什么事情

1335
00:52:50,000 --> 00:52:52,000
就确认说呃不会了

1336
00:52:52,000 --> 00:52:56,000
就是就别想你别想在流量器里面直接用 dart

1337
00:52:56,000 --> 00:52:57,000
对就这个意思

1338
00:52:57,000 --> 00:53:01,000
所以将在 java script 还是会继续主载流量器吗

1339
00:53:02,000 --> 00:53:03,000
没错

1340
00:53:03,000 --> 00:53:05,000
但他们现在的方向就有点

1341
00:53:05,000 --> 00:53:07,000
变了就是说其实想法

1342
00:53:07,000 --> 00:53:12,000
是这样子就是说我们不直接去取代这个 java script

1343
00:53:13,000 --> 00:53:13,000
但是呢

1344
00:53:14,000 --> 00:53:17,000
我们推出一个就跟 muzela 的思路有点像

1345
00:53:17,000 --> 00:53:21,000
就是他们推出一个所谓精简版的这个 java script 的字机

1346
00:53:21,000 --> 00:53:25,000
然后呢就其他的这个语言你是可以就是 transpire

1347
00:53:25,000 --> 00:53:26,000
就是

1348
00:53:27,000 --> 00:53:30,000
编译不翻译编译成

1349
00:53:30,000 --> 00:53:33,000
这个 java script 这个字机

1350
00:53:33,000 --> 00:53:36,000
然后你这个字机是如何选定出来的

1351
00:53:36,000 --> 00:53:40,000
就这个字机能够能够有足够的这种一种 constrait

1352
00:53:40,000 --> 00:53:44,000
是可以构建就可以支持你上面的语言的那些基础的功能的

1353
00:53:44,000 --> 00:53:47,000
然后这个这个字机的 java script 是可以很好的

1354
00:53:47,000 --> 00:53:52,000
被这个什么 just in time 的编曲优化的这么一个字机

1355
00:53:52,000 --> 00:53:56,000
这样的话等于是说我们把这个 java script 作为一个

1356
00:53:56,000 --> 00:53:57,000
怎么说呢

1357
00:53:57,000 --> 00:54:00,000
类似于 C 或者是类似于绘编的这么一个角色

1358
00:54:00,000 --> 00:54:02,000
java script is new assembly language

1359
00:54:03,000 --> 00:54:04,000
for the web 没错

1360
00:54:04,000 --> 00:54:07,000
对前阵子的一个 hikernyos 的要体

1361
00:54:09,000 --> 00:54:12,000
所以所以就其实是这个跟现在我们这个新闻里面讲的说

1362
00:54:12,000 --> 00:54:18,000
dart 直接用于这个 android 里面的 app 的编写还是非常不一样

1363
00:54:18,000 --> 00:54:21,000
起码你说用 dart 的网页版件能够比较

1364
00:54:22,000 --> 00:54:25,000
唱快的方式还是说先转成这个 js 再说嘛

1365
00:54:25,000 --> 00:54:29,000
那现在这个这个就办法就是完全不一样的一个过程

1366
00:54:29,000 --> 00:54:30,000
ok

1367
00:54:30,000 --> 00:54:32,000
然后 dart android

1368
00:54:33,000 --> 00:54:36,000
它的名字不是叫 dart android

1369
00:54:36,000 --> 00:54:38,000
而是留一万名叫 sky

1370
00:54:39,000 --> 00:54:40,000
就有点

1371
00:54:41,000 --> 00:54:42,000
莫名其妙啊

1372
00:54:42,000 --> 00:54:43,000
他为什么叫他

1373
00:54:43,000 --> 00:54:44,000
这不过是莫名其妙啊

1374
00:54:44,000 --> 00:54:46,000
这个简直就是自讨苦吃啊

1375
00:54:46,000 --> 00:54:48,000
你知道最近是前阵子上周吧

1376
00:54:48,000 --> 00:54:49,000
那个搜不到啊

1377
00:54:49,000 --> 00:54:52,000
对啊最大的搜不到搜不到就不说了

1378
00:54:52,000 --> 00:54:55,000
上周不是那个 skype 被判

1379
00:54:55,000 --> 00:54:57,000
欧洲一个哪个哪个国家我忘了

1380
00:54:57,000 --> 00:54:59,000
被欧洲一个法院说判他那个商标侵权

1381
00:55:00,000 --> 00:55:02,000
那个 sky 电视网络嘛

1382
00:55:03,000 --> 00:55:06,000
理由是因为之前理由是前面都有一个 sky

1383
00:55:06,000 --> 00:55:08,000
然后大家消费者可能会分不清楚

1384
00:55:08,000 --> 00:55:11,000
此 sky 和那个 sky 不是没有关系的

1385
00:55:12,000 --> 00:55:14,000
是法官原理消费者都是傻逼呗

1386
00:55:14,000 --> 00:55:15,000
那是法国吗

1387
00:55:16,000 --> 00:55:17,000
哦 sorry

1388
00:55:17,000 --> 00:55:18,000
我不是法国

1389
00:55:18,000 --> 00:55:19,000
我不确定是法国

1390
00:55:19,000 --> 00:55:24,000
但是但是是在你们大欧洲的某一个法院判决结果

1391
00:55:24,000 --> 00:55:26,000
当时大家觉得德国是老干这种事情

1392
00:55:26,000 --> 00:55:28,000
就是你知道最开始 Google mail

1393
00:55:28,000 --> 00:55:29,000
gmail 我想要进德国的时候

1394
00:55:29,000 --> 00:55:32,000
德国已经有一个叫什么 gmail 之类的

1395
00:55:32,000 --> 00:55:34,000
那个我觉得可以理解啊

1396
00:55:34,000 --> 00:55:35,000
那个是可以注册上标的

1397
00:55:35,000 --> 00:55:37,000
你说这个 sky 和 sky 不就差的

1398
00:55:38,000 --> 00:55:39,000
这十万八千里呢

1399
00:55:40,000 --> 00:55:41,000
欧洲诡异多

1400
00:55:41,000 --> 00:55:42,000
欧洲诡异多

1401
00:55:42,000 --> 00:55:43,000
这也是什么见怪不怪了吧

1402
00:55:43,000 --> 00:55:46,000
我觉得那个什么在稍后再以后再吐槽

1403
00:55:46,000 --> 00:55:50,000
我们就先说回这个这个大尔汤 Android

1404
00:55:50,000 --> 00:55:52,000
啊 Niknamesky

1405
00:55:53,000 --> 00:55:54,000
这么一个东西

1406
00:55:54,000 --> 00:55:57,000
就是他其实是一个

1407
00:55:57,000 --> 00:56:00,000
就是他他至于 java 有什么特别的优势吗

1408
00:56:00,000 --> 00:56:03,000
就是用于写这个 android 英文有什么特别的好处

1409
00:56:03,000 --> 00:56:05,000
难道不写 java 不是最大的有势吗

1410
00:56:07,000 --> 00:56:08,000
黑的漂亮

1411
00:56:10,000 --> 00:56:13,000
但还是我觉得只要你不写 java 基本上就可以做到

1412
00:56:13,000 --> 00:56:15,000
right less do more

1413
00:56:15,000 --> 00:56:18,000
但是也可能会出现一个比 java 更烂的语言嘛

1414
00:56:18,000 --> 00:56:19,000
那但概率比较小

1415
00:56:19,000 --> 00:56:21,000
大尔汤显然不可能比 java 更烂吧

1416
00:56:21,000 --> 00:56:22,000
还有什么语言能比 java 更烂吗

1417
00:56:23,000 --> 00:56:25,000
说的也是好吧

1418
00:56:26,000 --> 00:56:29,000
对啊 psp 不扎光这个我必须承认

1419
00:56:30,000 --> 00:56:32,000
他这个还是有一个这个 adoption 的问题啊

1420
00:56:32,000 --> 00:56:38,000
他之前那个去就撤掉 dart 原生在 chrome 的乱七里面支持的这么一个计划

1421
00:56:38,000 --> 00:56:43,000
我就可能最大的一个考虑还是说这个可能会造成这个用户群的割裂吗

1422
00:56:43,000 --> 00:56:45,000
因为你本来一个乱七这个开发小组

1423
00:56:45,000 --> 00:56:48,000
你就去考虑说怎么去优化 java script 就好了

1424
00:56:48,000 --> 00:56:50,000
现在八多出了一个新语言

1425
00:56:50,000 --> 00:56:52,000
我还要再考虑你这个新语言的模型

1426
00:56:52,000 --> 00:56:53,000
就并不经纪嘛

1427
00:56:53,000 --> 00:56:56,000
然后这个从这个用户的角度来讲

1428
00:56:56,000 --> 00:56:57,000
其实也是挺有问题的

1429
00:56:57,000 --> 00:57:01,000
我跟所有其他流量型开发都得使用 java script

1430
00:57:01,000 --> 00:57:03,000
哎唯独别紧这个 chrome 开发

1431
00:57:03,000 --> 00:57:05,000
我再想想那 dart 是不是更好呢

1432
00:57:05,000 --> 00:57:06,000
就其实何必呢

1433
00:57:06,000 --> 00:57:07,000
就这样会导致就是说

1434
00:57:08,000 --> 00:57:12,000
呃保守型的这个用户还是会倾向于选择说一个成熟的

1435
00:57:13,000 --> 00:57:14,000
这个 java script 的这种语言

1436
00:57:14,000 --> 00:57:17,000
还有成熟的一些技术来做这个开发

1437
00:57:17,000 --> 00:57:21,000
那就不会那么倾向于说用 dart 这种没有经过设为

1438
00:57:21,000 --> 00:57:25,000
时间啊考验的新的语言来继续做这种三开发

1439
00:57:25,000 --> 00:57:26,000
我觉得这个是不太靠谱的

1440
00:57:27,000 --> 00:57:28,000
除非有一天

1441
00:57:28,000 --> 00:57:31,000
可我们的市场就可以达到 90%以上

1442
00:57:32,000 --> 00:57:34,000
啊否则基本上还是不要想

1443
00:57:35,000 --> 00:57:37,000
i don't think that they will ever come

1444
00:57:38,000 --> 00:57:39,000
but 对

1445
00:57:39,000 --> 00:57:41,000
我看太现实

1446
00:57:42,000 --> 00:57:45,000
现在现在那个啊

1447
00:57:46,000 --> 00:57:50,000
chrome 也就 3%到 40%的市占率嘛

1448
00:57:50,000 --> 00:57:52,000
那中国现在就完全不行啊

1449
00:57:52,000 --> 00:57:54,000
因为就是被封锁

1450
00:57:54,000 --> 00:57:55,000
所以没办法下载没办法更新嘛

1451
00:57:55,000 --> 00:57:58,000
就其实用户觉得这个流程和发现都是

1452
00:57:59,000 --> 00:58:00,000
是肯定是走下炮路的

1453
00:58:02,000 --> 00:58:04,000
那多外可能还行吧

1454
00:58:05,000 --> 00:58:05,000
对

1455
00:58:08,000 --> 00:58:09,000
嗯对

1456
00:58:09,000 --> 00:58:10,000
然后接下来嗯

1457
00:58:11,000 --> 00:58:13,000
温诺斯时搭载的

1458
00:58:13,000 --> 00:58:15,000
不或说微软赛的呢

1459
00:58:15,000 --> 00:58:17,000
其实也很有可能会替微软抢

1460
00:58:17,000 --> 00:58:18,000
我以为不是讲什么

1461
00:58:19,000 --> 00:58:19,000
嗯

1462
00:58:20,000 --> 00:58:22,000
这个其实今年

1463
00:58:22,000 --> 00:58:23,000
对我们现在马上摇摇的这个主点

1464
00:58:23,000 --> 00:58:24,000
就是今年这个

1465
00:58:24,000 --> 00:58:26,000
是已经过了一段时间了

1466
00:58:26,000 --> 00:58:27,000
我们现在聊的比较晚

1467
00:58:28,000 --> 00:58:30,000
就是这个微软的 build 2015 这个大会

1468
00:58:30,000 --> 00:58:30,000
开发者大会

1469
00:58:31,000 --> 00:58:33,000
他他们提到了一些东西

1470
00:58:33,000 --> 00:58:34,000
嗯

1471
00:58:35,000 --> 00:58:37,000
你你先说你觉得印象比较深刻的那几个吧

1472
00:58:37,000 --> 00:58:38,000
你先看哪些

1473
00:58:39,000 --> 00:58:41,000
其实我唯一关注的就是 holless

1474
00:58:44,000 --> 00:58:45,000
其他都没看

1475
00:58:45,000 --> 00:58:47,000
我不知道你就整个那个 keynote

1476
00:58:47,000 --> 00:58:48,000
我只看了 holless 那一部分

1477
00:58:48,000 --> 00:58:50,000
然后就转头打游戏去

1478
00:58:50,000 --> 00:58:51,000
嗯哼啊

1479
00:58:51,000 --> 00:58:52,000
啊

1480
00:58:53,000 --> 00:58:55,000
就是那个第一天的那个主题演讲

1481
00:58:55,000 --> 00:58:56,000
我还看了

1482
00:58:57,000 --> 00:59:00,000
除了这个讲 azure 的中后半节之外

1483
00:59:00,000 --> 00:59:01,000
其他我都看了

1484
00:59:01,000 --> 00:59:03,000
他先先说那个会吧

1485
00:59:03,000 --> 00:59:03,000
那个那个主题演讲

1486
00:59:03,000 --> 00:59:06,000
他前面花了相当长时间讲那个 azure

1487
00:59:06,000 --> 00:59:07,000
就是那个他们那个运幅

1488
00:59:08,000 --> 00:59:09,000
我觉得其实挺无聊的

1489
00:59:09,000 --> 00:59:12,000
就不是很多人都要做这个后台开发嘛

1490
00:59:12,000 --> 00:59:13,000
你也讲那么多有什么用

1491
00:59:13,000 --> 00:59:16,000
对我觉得 azure 有点就是

1492
00:59:17,000 --> 00:59:18,000
over

1493
00:59:18,000 --> 00:59:19,000
推的太过头了

1494
00:59:19,000 --> 00:59:21,000
不但这个也能够理解

1495
00:59:21,000 --> 00:59:22,000
毕竟那个谁

1496
00:59:22,000 --> 00:59:23,000
Santana Delas

1497
00:59:24,000 --> 00:59:25,000
之阿尔尔部门头头这样过去了嘛

1498
00:59:25,000 --> 00:59:28,000
他可能在这个人员部署上

1499
00:59:28,000 --> 00:59:29,000
可能会有点偏向性

1500
00:59:29,000 --> 00:59:31,000
但我觉得那个安排是不太好的

1501
00:59:31,000 --> 00:59:33,000
起码作为一个主题演讲

1502
00:59:33,000 --> 00:59:36,000
就是太反锁太多太多细节的东西

1503
00:59:36,000 --> 00:59:39,000
没有把消费者能够感知的东西

1504
00:59:40,000 --> 00:59:41,000
啊通知点突出出来

1505
00:59:41,000 --> 00:59:43,000
当然你可以说这个我们这个 build

1506
00:59:43,000 --> 00:59:45,000
和又不像那个 wdc

1507
00:59:45,000 --> 00:59:47,000
第一天主要是面向这个外媒体和消费者

1508
00:59:48,000 --> 00:59:49,000
对我们这个 build

1509
00:59:49,000 --> 00:59:50,000
就完全是针对开发者

1510
00:59:50,000 --> 00:59:51,000
那也可以

1511
00:59:51,000 --> 00:59:52,000
但起码说

1512
00:59:53,000 --> 00:59:54,000
从一个

1513
00:59:54,000 --> 00:59:55,000
呃个人消费者来讲

1514
00:59:55,000 --> 00:59:56,000
还是从媒体者来讲

1515
00:59:56,000 --> 00:59:59,000
他现在这种方式就这么匆匆发布出来

1516
01:00:00,000 --> 01:00:02,000
还有感觉是会有一点问题呢

1517
01:00:03,000 --> 01:00:05,000
我觉得 build 不能

1518
01:00:06,000 --> 01:00:08,000
真正的消费者会有多少

1519
01:00:08,000 --> 01:00:10,000
真正开发者会有多少看 build 了

1520
01:00:10,000 --> 01:00:10,000
且不说

1521
01:00:11,000 --> 01:00:13,000
真正的消费者没有几个在看 build 了

1522
01:00:14,000 --> 01:00:15,000
消费者我感觉就是微软

1523
01:00:15,000 --> 01:00:18,000
微软还是有不少这个所谓贴感粉丝的嘛

1524
01:00:18,000 --> 01:00:20,000
就是这个我不怀疑

1525
01:00:20,000 --> 01:00:21,000
就是说这个数量上怎么样

1526
01:00:21,000 --> 01:00:22,000
而第二个说

1527
01:00:23,000 --> 01:00:23,000
他们这么远

1528
01:00:23,000 --> 01:00:25,000
到底有多关心

1529
01:00:25,000 --> 01:00:27,000
哎呦值得讲两讲半个小时

1530
01:00:27,000 --> 01:00:29,000
然后换三个人这种方式

1531
01:00:29,000 --> 01:00:30,000
我觉得也不一定对

1532
01:00:31,000 --> 01:00:34,000
我是可以理解微软非常迫切的

1533
01:00:34,000 --> 01:00:36,000
想要抢回服务器端的

1534
01:00:37,000 --> 01:00:40,000
市场份额的决心但是

1535
01:00:41,000 --> 01:00:42,000
我觉得这样一个

1536
01:00:42,000 --> 01:00:44,000
开发者大会上花这么长的篇幅

1537
01:00:44,000 --> 01:00:46,000
来介绍这样一个产品

1538
01:00:46,000 --> 01:00:46,000
有点

1539
01:00:47,000 --> 01:00:48,000
有点偶尔

1540
01:00:50,000 --> 01:00:50,000
嗯

1541
01:00:53,000 --> 01:00:55,000
但阿里维这这

1542
01:00:55,000 --> 01:00:58,000
虽然 B 公司也正在试图

1543
01:00:59,000 --> 01:01:00,000
跟 Azure

1544
01:01:01,000 --> 01:01:03,000
之前反正开了很多天的会啊

1545
01:01:03,000 --> 01:01:04,000
当然我们要参与

1546
01:01:04,000 --> 01:01:07,000
想要把公司的产品做进 Azure 里面

1547
01:01:07,000 --> 01:01:08,000
成为它的一个服务

1548
01:01:09,000 --> 01:01:10,000
哈哈哈哈

1549
01:01:11,000 --> 01:01:12,000
但我觉得还是理

1550
01:01:12,000 --> 01:01:14,000
觉得还是理我和一个人

1551
01:01:14,000 --> 01:01:14,000
嗯

1552
01:01:15,000 --> 01:01:16,000
嗯

1553
01:01:16,000 --> 01:01:18,000
就是 Build 这个 Keynote 还展示的

1554
01:01:18,000 --> 01:01:19,000
一些其他的东西

1555
01:01:19,000 --> 01:01:22,000
因为另外一个重头戏就是这个 Windows 10 了

1556
01:01:22,000 --> 01:01:24,000
反正起码从 demo 的角度来看

1557
01:01:24,000 --> 01:01:26,000
还是蛮激动人心的

1558
01:01:26,000 --> 01:01:28,000
然后上次我们请小姐姐来讲

1559
01:01:28,000 --> 01:01:30,000
就她也说这个

1560
01:01:30,000 --> 01:01:32,000
就确实温石还是不错的

1561
01:01:32,000 --> 01:01:34,000
虽然现在开发测试板

1562
01:01:34,000 --> 01:01:35,000
可能不是太稳定

1563
01:01:35,000 --> 01:01:38,000
但是啊起码从设计上来讲

1564
01:01:38,000 --> 01:01:39,000
关上来讲我们看的还是挺好的

1565
01:01:39,000 --> 01:01:40,000
这么一个过程

1566
01:01:40,000 --> 01:01:43,000
但有温室有一个特别的温室

1567
01:01:43,000 --> 01:01:44,000
还是继续延续了这个温软

1568
01:01:44,000 --> 01:01:47,000
有非常非常多的版本的这个特点

1569
01:01:48,000 --> 01:01:49,000
对

1570
01:01:49,000 --> 01:01:49,000
嗯

1571
01:01:50,000 --> 01:01:53,000
温石将在 190 个国家发售

1572
01:01:53,000 --> 01:01:55,000
然后有 111 种语

1573
01:01:56,000 --> 01:01:57,000
嗯

1574
01:01:57,000 --> 01:01:59,000
然后接下来我可以大概

1575
01:01:59,000 --> 01:02:00,000
大概说一下温室的版本

1576
01:02:00,000 --> 01:02:03,000
首先温室是有 Home 版

1577
01:02:03,000 --> 01:02:03,000
就是

1578
01:02:04,000 --> 01:02:06,000
呃最普通的大家各

1579
01:02:06,000 --> 01:02:08,000
最普通的小米者会买的版本

1580
01:02:08,000 --> 01:02:10,000
没有温室是 Mobile 版本

1581
01:02:10,000 --> 01:02:10,000
嗯

1582
01:02:10,000 --> 01:02:12,000
跑在 Mobile 的地方上

1583
01:02:13,000 --> 01:02:15,000
温室是 Pro 版本

1584
01:02:15,000 --> 01:02:18,000
是 Home 版本加上一些可能

1585
01:02:18,000 --> 01:02:19,000
小的

1586
01:02:19,000 --> 01:02:20,000
开啊

1587
01:02:20,000 --> 01:02:23,000
小的 small business 或者是开发者会需要的

1588
01:02:23,000 --> 01:02:24,000
些特性

1589
01:02:24,000 --> 01:02:26,000
然后有温室是 Enterprise 版本

1590
01:02:26,000 --> 01:02:28,000
然后温室是 Education 版本

1591
01:02:28,000 --> 01:02:31,000
然后还有温室是 Mobile Enterprise 版本

1592
01:02:31,000 --> 01:02:32,000
这是什么东西

1593
01:02:34,000 --> 01:02:35,000
嗯嗯

1594
01:02:35,000 --> 01:02:37,000
就为什么会有一个 Mobile Enterprise 版本啊

1595
01:02:37,000 --> 01:02:38,000
这是

1596
01:02:39,000 --> 01:02:40,000
就是西方来干嘛的

1597
01:02:41,000 --> 01:02:42,000
西方市场吧

1598
01:02:42,000 --> 01:02:43,000
其实挺挺鼓励的

1599
01:02:43,000 --> 01:02:45,000
对然后最后还有一个问题是

1600
01:02:45,000 --> 01:02:47,000
IoT Core 版本

1601
01:02:47,000 --> 01:02:49,000
就是 Internet of Things Core 版本

1602
01:02:49,000 --> 01:02:50,000
啊那个挺有意思的

1603
01:02:50,000 --> 01:02:53,000
就是那个其实可以简单说一下

1604
01:02:53,000 --> 01:02:55,000
就是说那个的主要就是 IoT 是指

1605
01:02:55,000 --> 01:02:57,000
这个 Internet of Things

1606
01:02:57,000 --> 01:02:58,000
就是物联网

1607
01:02:59,000 --> 01:03:00,000
它那个什么意思呢

1608
01:03:00,000 --> 01:03:01,000
其实是非常小的设备

1609
01:03:02,000 --> 01:03:03,000
因为物联网里面最

1610
01:03:04,000 --> 01:03:05,000
最要紧的一个技术设施

1611
01:03:05,000 --> 01:03:06,000
就是各种各样的传感器

1612
01:03:06,000 --> 01:03:08,000
各种各样的那种小外设嘛

1613
01:03:08,000 --> 01:03:10,000
那这小外设通常的这个

1614
01:03:10,000 --> 01:03:11,000
就是他们的一个供应

1615
01:03:11,000 --> 01:03:14,000
就是说价格便宜成本低

1616
01:03:14,000 --> 01:03:16,000
但结果就是说这个

1617
01:03:16,000 --> 01:03:17,000
处理器很弱

1618
01:03:17,000 --> 01:03:19,000
然后可能还没还有这个耗电的这个

1619
01:03:19,000 --> 01:03:21,000
就是功耗有要求不能超过多少

1620
01:03:21,000 --> 01:03:24,000
所以导致他们那个整个就是一个比较弱小的

1621
01:03:24,000 --> 01:03:25,000
一个机器

1622
01:03:25,000 --> 01:03:27,000
然后你要在那么弱小的游戏上

1623
01:03:27,000 --> 01:03:28,000
运行一个 Windows 系统

1624
01:03:29,000 --> 01:03:31,000
这想就没有没有经验过的 Windows 系统

1625
01:03:31,000 --> 01:03:32,000
这显然是

1626
01:03:32,000 --> 01:03:33,000
听起来非常疯狂

1627
01:03:33,000 --> 01:03:35,000
对比较疯狂的一件事情

1628
01:03:35,000 --> 01:03:36,000
而且不太合适

1629
01:03:36,000 --> 01:03:37,000
因为那些东西很多都没有屏幕对吧

1630
01:03:38,000 --> 01:03:40,000
那么你这个系统加载那些什么显示啊

1631
01:03:40,000 --> 01:03:41,000
图标啊就是固意啊

1632
01:03:41,000 --> 01:03:43,000
对他都是完全没有意义的

1633
01:03:43,000 --> 01:03:43,000
对啊

1634
01:03:43,000 --> 01:03:45,000
你连个蓝屏都看不到

1635
01:03:45,000 --> 01:03:45,000
何必的

1636
01:03:45,000 --> 01:03:46,000
对对

1637
01:03:46,000 --> 01:03:49,000
所以说为了把这个 Windows 能够 C 进那么小的

1638
01:03:49,000 --> 01:03:51,000
那么性能差的机器里面

1639
01:03:51,000 --> 01:03:53,000
当然同时也为了说解化这个结构

1640
01:03:53,000 --> 01:03:55,000
他们就出了这么一个 Windows 10 的这方面

1641
01:03:55,000 --> 01:03:56,000
是 IoT 版本

1642
01:03:57,000 --> 01:03:59,000
就简单说就是把这个 Windows 的这个内核拿出来

1643
01:04:00,000 --> 01:04:01,000
跟 Linux 一样

1644
01:04:01,000 --> 01:04:02,000
然后再精洁一下

1645
01:04:02,000 --> 01:04:04,000
把这个内核加上一些比较

1646
01:04:04,000 --> 01:04:06,000
简单的周边的工具

1647
01:04:06,000 --> 01:04:08,000
装到那些小小的这个 IoT 的这种

1648
01:04:08,000 --> 01:04:10,000
就是物联网的设备里面去

1649
01:04:10,000 --> 01:04:11,000
就可以实现说

1650
01:04:11,000 --> 01:04:12,000
哪怕我这个处理是弱小

1651
01:04:12,000 --> 01:04:14,000
我好歹也能跑一个 Windows 啊

1652
01:04:14,000 --> 01:04:15,000
但虽然是今年版

1653
01:04:16,000 --> 01:04:22,000
对虽然这个念头在目前来看是比较奇怪的

1654
01:04:22,000 --> 01:04:26,000
因为目前的 IoT 的这些既有产品的卡

1655
01:04:26,000 --> 01:04:29,000
基本上全都采用 Linux 各种形式的 Linux

1656
01:04:29,000 --> 01:04:31,000
呃被裁减过的

1657
01:04:31,000 --> 01:04:35,000
甚至 FreeBSD 之类的东西来来来做他的操作

1658
01:04:35,000 --> 01:04:37,000
但是这个 Windows

1659
01:04:37,000 --> 01:04:40,000
呃 Windows 10 IoT Core 版本

1660
01:04:40,000 --> 01:04:42,000
应该就是为了要抢占这一部分市场

1661
01:04:44,000 --> 01:04:44,000
呃

1662
01:04:44,000 --> 01:04:46,000
所以他有一个所谓是什么

1663
01:04:46,000 --> 01:04:47,000
是一个什么 Apple Battle

1664
01:04:47,000 --> 01:04:49,000
就是上山打仗

1665
01:04:49,000 --> 01:04:50,000
就是很难了

1666
01:04:50,000 --> 01:04:53,000
因为你现在市场上有这么一个免费

1667
01:04:53,000 --> 01:04:55,000
而且可以更加容易定制化

1668
01:04:55,000 --> 01:04:57,000
然后市场规模就非常大的

1669
01:04:57,000 --> 01:05:00,000
这么一个开源的产品

1670
01:05:00,000 --> 01:05:01,000
那你肯定选那个

1671
01:05:02,000 --> 01:05:04,000
你选一个必原自己搞的产品是要开的

1672
01:05:04,000 --> 01:05:06,000
起码快也好

1673
01:05:06,000 --> 01:05:07,000
也不一定

1674
01:05:07,000 --> 01:05:09,000
我觉得也许 Windows 10

1675
01:05:09,000 --> 01:05:10,000
他固然要打上

1676
01:05:10,000 --> 01:05:12,000
他固然要打上山仗

1677
01:05:12,000 --> 01:05:14,000
但是你必须承认这一

1678
01:05:14,000 --> 01:05:16,000
他面对的敌人并没有团结起来

1679
01:05:16,000 --> 01:05:17,000
对付他

1680
01:05:18,000 --> 01:05:19,000
然后呃

1681
01:05:20,000 --> 01:05:21,000
而且他有一个优势

1682
01:05:21,000 --> 01:05:25,000
就是如果你所有的产品都统一使用 Windows 10 IoT

1683
01:05:26,000 --> 01:05:27,000
呃

1684
01:05:27,000 --> 01:05:28,000
Core 这个版本的操作的话

1685
01:05:28,000 --> 01:05:32,000
那不管是管理还是和其他的

1686
01:05:32,000 --> 01:05:37,000
同样使用同一平台的产品交流可能会更方便一点

1687
01:05:37,000 --> 01:05:40,000
而且我觉得以微软的支持

1688
01:05:40,000 --> 01:05:42,000
微软的技术能力做技术支持是会比较好

1689
01:05:44,000 --> 01:05:47,000
而且同时可以养活一大批顾问公司

1690
01:05:48,000 --> 01:05:48,000
呃

1691
01:05:50,000 --> 01:05:53,000
就 Windows 10 之后我们这个下面就是

1692
01:05:53,000 --> 01:05:54,000
目前能

1693
01:05:54,000 --> 01:05:58,000
马上能用的还挺好玩的东西叫做 Visual Studio Code

1694
01:05:58,000 --> 01:05:59,000
对

1695
01:05:59,000 --> 01:06:01,000
就之前我们在我在那个 IT 功能和 Lon

1696
01:06:01,000 --> 01:06:03,000
大概就是提及了一下

1697
01:06:03,000 --> 01:06:04,000
但是被没有展开

1698
01:06:04,000 --> 01:06:06,000
因为觉得那个并不适合在那个节目讲

1699
01:06:07,000 --> 01:06:09,000
那这边就是我们这个哈

1700
01:06:09,000 --> 01:06:11,000
编辑器是我们关注编辑器

1701
01:06:11,000 --> 01:06:12,000
还有什么键码啊

1702
01:06:12,000 --> 01:06:13,000
这些电脑外设也是我们关注的重点

1703
01:06:14,000 --> 01:06:18,000
那我不知道你又用那个这个 Visual Studio Code 的这款编辑器没

1704
01:06:18,000 --> 01:06:18,000
有啊

1705
01:06:18,000 --> 01:06:20,000
就当时看到那个

1706
01:06:22,000 --> 01:06:25,000
新闻就立刻下载试用了一下

1707
01:06:25,000 --> 01:06:27,000
就感觉还是挺

1708
01:06:28,000 --> 01:06:29,000
萌态奇的

1709
01:06:29,000 --> 01:06:30,000
就是你在

1710
01:06:30,000 --> 01:06:32,000
OS 探测上面下载

1711
01:06:32,000 --> 01:06:33,000
从微软的网站上下载了一个东西

1712
01:06:33,000 --> 01:06:36,000
然后这个东西的结尾居然不是

1713
01:06:37,000 --> 01:06:38,000
MSI 或者是 EXE

1714
01:06:39,000 --> 01:06:40,000
它是个

1715
01:06:41,000 --> 01:06:42,000
它应该是个那个

1716
01:06:43,000 --> 01:06:44,000
应该也是一个

1717
01:06:46,000 --> 01:06:47,000
按议委 这不重要的就是

1718
01:06:47,000 --> 01:06:49,000
反正我把那个 Visual Studio

1719
01:06:49,000 --> 01:06:52,000
图标拖进 Application 文件家的时候

1720
01:06:52,000 --> 01:06:53,000
感觉还是非常不太起的

1721
01:06:54,000 --> 01:06:55,000
然后

1722
01:06:56,000 --> 01:06:57,000
点了点还能跑

1723
01:06:57,000 --> 01:06:58,000
反正哎

1724
01:06:58,000 --> 01:06:59,000
这是哪个世界的

1725
01:06:59,000 --> 01:07:00,000
对

1726
01:07:00,000 --> 01:07:01,000
点了点还能跑

1727
01:07:01,000 --> 01:07:02,000
非常 so real

1728
01:07:03,000 --> 01:07:03,000
嗯

1729
01:07:05,000 --> 01:07:06,000
怎么说呢

1730
01:07:06,000 --> 01:07:07,000
就它还是一个

1731
01:07:08,000 --> 01:07:11,000
虽然它挂了 Visual Studio 的名字

1732
01:07:11,000 --> 01:07:13,000
但它本身上还只是一个编辑系而已

1733
01:07:14,000 --> 01:07:15,000
对

1734
01:07:15,000 --> 01:07:15,000
它是一个

1735
01:07:16,000 --> 01:07:17,000
所谓的 Editor

1736
01:07:17,000 --> 01:07:17,000
对

1737
01:07:17,000 --> 01:07:19,000
它并不是一个

1738
01:07:19,000 --> 01:07:20,000
IDE

1739
01:07:20,000 --> 01:07:21,000
它并不是一个

1740
01:07:21,000 --> 01:07:23,000
In-Editing Environment

1741
01:07:23,000 --> 01:07:24,000
Environment

1742
01:07:24,000 --> 01:07:25,000
对

1743
01:07:25,000 --> 01:07:26,000
就是这两个 E 是不一样的

1744
01:07:26,000 --> 01:07:27,000
一个是 Editor 的 E

1745
01:07:28,000 --> 01:07:28,000
然后那个是 IDE

1746
01:07:28,000 --> 01:07:30,000
那个 E 是指的是 Environment

1747
01:07:30,000 --> 01:07:31,000
就是机身开发环境嘛

1748
01:07:32,000 --> 01:07:34,000
所以就他们在定位上还是区别蛮大

1749
01:07:34,000 --> 01:07:36,000
就这个是一个简单的写在码

1750
01:07:36,000 --> 01:07:39,000
那个可能会加上什么开发调试

1751
01:07:39,000 --> 01:07:40,000
项目管理

1752
01:07:40,000 --> 01:07:40,000
对

1753
01:07:40,000 --> 01:07:42,000
关系发达的功能带里面一起的对吧

1754
01:07:42,000 --> 01:07:42,000
对

1755
01:07:43,000 --> 01:07:45,000
然后这个 code

1756
01:07:45,000 --> 01:07:46,000
就 Visual Studio Code 这个编辑系

1757
01:07:46,000 --> 01:07:47,000
它是基于这个

1758
01:07:47,000 --> 01:07:50,000
这个叫做 Electrum 的项目做的

1759
01:07:50,000 --> 01:07:50,000
对

1760
01:07:50,000 --> 01:07:51,000
Electrum 简单来讲

1761
01:07:51,000 --> 01:07:53,000
它就是用那个 Node

1762
01:07:53,000 --> 01:07:55,000
或者说我们现在新版本

1763
01:07:55,000 --> 01:07:58,000
它叫这个基于 iO.js 这么一个引擎

1764
01:07:58,000 --> 01:08:00,000
加上这个 Webkit

1765
01:08:00,000 --> 01:08:04,000
或者说 Chromium 这一套网页展示的东西

1766
01:08:04,000 --> 01:08:07,000
然后整个呈现出来的跟你这个

1767
01:08:07,000 --> 01:08:08,000
看起来是一个原因声音

1768
01:08:08,000 --> 01:08:11,000
那其实那边所有的技术都是来自于 Web 的

1769
01:08:11,000 --> 01:08:11,000
对

1770
01:08:11,000 --> 01:08:13,000
其实是个浏览器

1771
01:08:13,000 --> 01:08:13,000
这是

1772
01:08:14,000 --> 01:08:16,000
就如果没有用过的话

1773
01:08:16,000 --> 01:08:17,000
这可能是个比较神奇的一点

1774
01:08:17,000 --> 01:08:20,000
但其实这样的浏览器

1775
01:08:20,000 --> 01:08:22,000
这样的冰系此前已经有过很多例子

1776
01:08:22,000 --> 01:08:25,000
比如说 GitHub Atom

1777
01:08:25,000 --> 01:08:26,000
GitHub Atom 也是基于来说

1778
01:08:26,000 --> 01:08:27,000
甚至说

1779
01:08:28,000 --> 01:08:30,000
Webkit 在跟 Electrum 之前叫什么来着

1780
01:08:32,000 --> 01:08:33,000
其实想不起来了

1781
01:08:33,000 --> 01:08:36,000
但之前它叫的名字跟 Atom 有点关系

1782
01:08:36,000 --> 01:08:37,000
Atom 是原子

1783
01:08:37,000 --> 01:08:38,000
所以它叫电子

1784
01:08:38,000 --> 01:08:39,000
就是它是组成

1785
01:08:39,000 --> 01:08:42,000
它一开始就是为了 Atom 而开发的

1786
01:08:43,000 --> 01:08:47,000
然后另外一个叫 Brockets 的冰器也是类似的

1787
01:08:47,000 --> 01:08:55,000
基于 Chrom 和 Brockets 应该是 Node.js 做出来的一个冰器

1788
01:08:55,000 --> 01:08:56,000
对

1789
01:08:56,000 --> 01:09:00,000
然后我觉得我适用 Virus Studio Code 的最大的

1790
01:09:01,000 --> 01:09:02,000
惊讶之处是

1791
01:09:03,000 --> 01:09:05,000
它并不仅仅是把 Electrum 换了一个

1792
01:09:05,000 --> 01:09:07,000
就是加了一个皮肤

1793
01:09:07,000 --> 01:09:09,000
然后加了什么 Intelligence

1794
01:09:10,000 --> 01:09:10,000
对

1795
01:09:10,000 --> 01:09:12,000
它是有定制很多东西的

1796
01:09:12,000 --> 01:09:12,000
对

1797
01:09:12,000 --> 01:09:13,000
的功能

1798
01:09:13,000 --> 01:09:14,000
它可以 Dee 吧

1799
01:09:14,000 --> 01:09:17,000
我觉得这个是最让我 impressive 的一件事情

1800
01:09:17,000 --> 01:09:19,000
就是你写了一个程序

1801
01:09:19,000 --> 01:09:23,000
你可以在 Virus Studio Code 里面调试

1802
01:09:24,000 --> 01:09:27,000
其实这就已经让它成了一个

1803
01:09:27,000 --> 01:09:30,000
达到了一个叫什么编辑器以上

1804
01:09:30,000 --> 01:09:30,000
ID 一位

1805
01:09:30,000 --> 01:09:31,000
这么一个状态

1806
01:09:33,000 --> 01:09:37,000
大部分时候其他的编辑器都不会提供

1807
01:09:39,000 --> 01:09:39,000
原的吗

1808
01:09:39,000 --> 01:09:41,000
级别的调试过

1809
01:09:41,000 --> 01:09:47,000
你最多最多能做的就是把 Consol 的输出

1810
01:09:47,000 --> 01:09:52,000
集成到你编辑系的一个自创口里面

1811
01:09:52,000 --> 01:09:54,000
然后你在编辑器的自创口里面做

1812
01:09:54,000 --> 01:09:58,000
比如说 GDV 或者是 PYDB 的 Dee 吧

1813
01:09:58,000 --> 01:09:59,000
功能

1814
01:09:59,000 --> 01:10:05,000
但是 Virus Studio Code 就把你我们最常用的那一批

1815
01:10:05,000 --> 01:10:07,000
什么单步执行

1816
01:10:07,000 --> 01:10:09,000
跳过 断点之类的

1817
01:10:09,000 --> 01:10:11,000
全都集成在了编辑系里面

1818
01:10:11,000 --> 01:10:13,000
然后你在跑的时候可以用编辑器来 Dee 吧

1819
01:10:14,000 --> 01:10:16,000
我觉得这个是比较了不起的一件事情

1820
01:10:17,000 --> 01:10:18,000
OK

1821
01:10:19,000 --> 01:10:19,000
对

1822
01:10:19,000 --> 01:10:21,000
其实我是要坦白一下

1823
01:10:21,000 --> 01:10:23,000
因为最近也比较忙也没这么用编辑器

1824
01:10:23,000 --> 01:10:26,000
所以没有太多的深刻的感受

1825
01:10:26,000 --> 01:10:29,000
但是当时看 Dee 感觉演员还不错

1826
01:10:29,000 --> 01:10:32,000
不知道你又用他做一些什么实际的事情吗

1827
01:10:32,000 --> 01:10:33,000
我最近我也挺忙

1828
01:10:33,000 --> 01:10:35,000
但是我最近也挺忙的

1829
01:10:35,000 --> 01:10:37,000
但是我在公司也装了

1830
01:10:37,000 --> 01:10:40,000
就是他在 Linux 上跑的效果一定好

1831
01:10:40,000 --> 01:10:42,000
对 忘了说他是一个跨平台的

1832
01:10:42,000 --> 01:10:42,000
对

1833
01:10:42,000 --> 01:10:44,000
这是他最重要的一点

1834
01:10:44,000 --> 01:10:48,000
就是他是主动嫌是非软的狼子也行

1835
01:10:48,000 --> 01:10:53,000
就想要用这个东西来让各个平台的开发者都可以

1836
01:10:55,000 --> 01:10:56,000
你做

1837
01:10:56,000 --> 01:10:56,000
对

1838
01:10:56,000 --> 01:10:59,000
首先是为微软开发的

1839
01:11:00,000 --> 01:11:01,000
为你提问一个比较好的工具

1840
01:11:01,000 --> 01:11:04,000
你可以在咸下之余给微软开发点的东西

1841
01:11:04,000 --> 01:11:06,000
这是他们的目的

1842
01:11:06,000 --> 01:11:07,000
然后对

1843
01:11:07,000 --> 01:11:11,000
然后从网上的反应来看

1844
01:11:11,000 --> 01:11:12,000
大家还是比较

1845
01:11:13,000 --> 01:11:15,000
我觉得大部分人都是叫好了

1846
01:11:16,000 --> 01:11:19,000
他们官方在 5 月 13 日

1847
01:11:19,000 --> 01:11:23,000
就是录音的前一天也贴了一个 blog

1848
01:11:23,000 --> 01:11:27,000
就说他们收到了反响的好评如潮

1849
01:11:28,000 --> 01:11:31,000
他们在推特上有一个 code 账号

1850
01:11:31,000 --> 01:11:35,000
然后这个账号在现在已经有了 14.3 k 的 follower

1851
01:11:36,000 --> 01:11:38,000
然后很高了一队

1852
01:11:38,000 --> 01:11:40,000
他们闷上了 4.8 k 次

1853
01:11:42,000 --> 01:11:43,000
太空了

1854
01:11:43,000 --> 01:11:43,000
对

1855
01:11:43,000 --> 01:11:47,000
他们再过了一周多一点吧

1856
01:11:47,000 --> 01:11:48,000
就已经

1857
01:11:48,000 --> 01:11:49,000
对

1858
01:11:49,000 --> 01:11:52,000
然后 virtuals.code 的右下角有一个小笑点

1859
01:11:52,000 --> 01:11:53,000
如果你点一下的话

1860
01:11:53,000 --> 01:11:57,000
你可以跟他们回报一个 bug

1861
01:11:57,000 --> 01:11:59,000
或者是说你们做的好

1862
01:11:59,000 --> 01:12:01,000
就是有一个笑点又哭点

1863
01:12:01,000 --> 01:12:02,000
如果你点哭点的话

1864
01:12:02,000 --> 01:12:05,000
就可以写一个 bug

1865
01:12:05,000 --> 01:12:05,000
如果你点笑点的话

1866
01:12:05,000 --> 01:12:07,000
就说要夸你们写的好

1867
01:12:07,000 --> 01:12:11,000
然后他们目前为止收到了 6000 个 send a smile

1868
01:12:12,000 --> 01:12:16,000
就是有 6000 个 smile

1869
01:12:16,000 --> 01:12:19,000
那个功能叫 Send a smile

1870
01:12:19,000 --> 01:12:21,000
然后他们收到了 6000 个

1871
01:12:21,000 --> 01:12:23,000
但是他们又透露说

1872
01:12:23,000 --> 01:12:26,000
收到了多少个 send a not smile

1873
01:12:26,000 --> 01:12:28,000
send a crying

1874
01:12:28,000 --> 01:12:31,000
但 6000 个至少

1875
01:12:31,000 --> 01:12:32,000
8000 个

1876
01:12:32,000 --> 01:12:33,000
不止吧

1877
01:12:33,000 --> 01:12:34,000
6000 个

1878
01:12:36,000 --> 01:12:37,000
又黑人家

1879
01:12:37,000 --> 01:12:38,000
没有

1880
01:12:38,000 --> 01:12:40,000
因为这个编辑系的功能

1881
01:12:40,000 --> 01:12:41,000
他们好像零点儿几吧

1882
01:12:41,000 --> 01:12:42,000
没几错的话

1883
01:12:42,000 --> 01:12:45,000
就编辑系的功能还是缺很多的

1884
01:12:45,000 --> 01:12:46,000
比如说

1885
01:12:46,000 --> 01:12:48,000
我记得

1886
01:12:48,000 --> 01:12:51,000
有人说在里面输入中文有问题

1887
01:12:51,000 --> 01:12:54,000
就中文输入法在 code 里面是不能工作的

1888
01:12:54,000 --> 01:12:56,000
但是我有点怀疑就是

1889
01:12:56,000 --> 01:12:58,000
或有点奇怪

1890
01:12:58,000 --> 01:12:59,000
就是你在一个编辑

1891
01:12:59,000 --> 01:13:01,000
代码编辑系里面输入中文干嘛

1892
01:13:03,000 --> 01:13:04,000
对提示

1893
01:13:04,000 --> 01:13:08,000
有些写住室会用中文写

1894
01:13:08,000 --> 01:13:10,000
住室用中文就挺二的

1895
01:13:10,000 --> 01:13:11,000
不过

1896
01:13:11,000 --> 01:13:14,000
但是国内有很多的英文写不好

1897
01:13:14,000 --> 01:13:15,000
那就用中文写了

1898
01:13:15,000 --> 01:13:17,000
国内我觉得这个还是蛮常见的

1899
01:13:17,000 --> 01:13:19,000
就在外面就总有写拼命

1900
01:13:19,000 --> 01:13:20,000
看得更痛苦

1901
01:13:20,000 --> 01:13:21,000
这让我想起来

1902
01:13:21,000 --> 01:13:22,000
之前说什么

1903
01:13:22,000 --> 01:13:25,000
kde 有一次版本东西是

1904
01:13:27,000 --> 01:13:28,000
从现在开始代码库里面

1905
01:13:28,000 --> 01:13:30,000
终于没有得缘

1906
01:13:30,000 --> 01:13:32,000
有那种类似的

1907
01:13:33,000 --> 01:13:35,000
这个也是黑的漂亮

1908
01:13:36,000 --> 01:13:37,000
然后

1909
01:13:38,000 --> 01:13:41,000
在 user voice 就是一个 feature request

1910
01:13:41,000 --> 01:13:45,000
他们已经收到了 660 个 feature request

1911
01:13:47,000 --> 01:13:48,000
然后有

1912
01:13:49,000 --> 01:13:51,000
他们有一个所谓的 insiders program

1913
01:13:51,000 --> 01:13:55,000
就是让你可以更快的获得新的版本

1914
01:13:55,000 --> 01:13:59,000
或者是更快的得到新的新闻更新的

1915
01:13:59,000 --> 01:14:01,000
这么一个 program

1916
01:14:01,000 --> 01:14:07,000
他们在短时间内已经收到 1300 个用户的注册

1917
01:14:07,000 --> 01:14:10,000
然后在 stack off 楼上也已经有了

1918
01:14:10,000 --> 01:14:12,000
和 code 相关的 195 个问题

1919
01:14:12,000 --> 01:14:16,000
所有这些都是在仅仅一周多年的时间里面出现的

1920
01:14:16,000 --> 01:14:17,000
所以

1921
01:14:17,000 --> 01:14:19,000
反响还是不错的

1922
01:14:22,000 --> 01:14:23,000
好

1923
01:14:23,000 --> 01:14:25,000
关于 v�絡 studio code

1924
01:14:25,000 --> 01:14:27,000
我们就差不多聊到这

1925
01:14:27,000 --> 01:14:28,000
然后之后我们

1926
01:14:28,000 --> 01:14:30,000
如果能够用它写什么东西的话

1927
01:14:30,000 --> 01:14:32,000
再来跟大家回报

1928
01:14:32,000 --> 01:14:33,000
对

1929
01:14:33,000 --> 01:14:36,000
毕竟现在还是一个相对比较粗浅的认识

1930
01:14:36,000 --> 01:14:40,000
然后还是需要长期的使用才有结果

1931
01:14:40,000 --> 01:14:41,000
但是我觉得

1932
01:14:41,000 --> 01:14:43,000
短期的应该不会发生这件事情

1933
01:14:43,000 --> 01:14:45,000
就不着急 慢慢等吧

1934
01:14:45,000 --> 01:14:46,000
不管这么说

1935
01:14:46,000 --> 01:14:49,000
就是这些厂商们能够开发跨平台的开发工具

1936
01:14:49,000 --> 01:14:52,000
对于程序来说其实是一个解放

1937
01:14:52,000 --> 01:14:55,000
你可以选择自己喜欢的开发平台

1938
01:14:55,000 --> 01:14:57,000
用自己喜欢的开发源

1939
01:14:57,000 --> 01:14:59,000
开发自己喜欢的东西

1940
01:15:00,000 --> 01:15:02,000
之前我一直说

1941
01:15:02,000 --> 01:15:03,000
cshop 是我最喜欢的源

1942
01:15:03,000 --> 01:15:08,000
但是在 max 上面就没有机缘去开发 cshop 的工具

1943
01:15:08,000 --> 01:15:09,000
开发 cshop 的程序

1944
01:15:09,000 --> 01:15:10,000
因为根本没有工具

1945
01:15:10,000 --> 01:15:11,000
而现在

1946
01:15:11,000 --> 01:15:13,000
八人木的中世纪

1947
01:15:13,000 --> 01:15:14,000
黑暗的中世纪过了之后

1948
01:15:14,000 --> 01:15:17,000
这样的机会似乎开始出现了眼前

1949
01:15:17,000 --> 01:15:19,000
我觉得这无论如何是一件好事

1950
01:15:19,000 --> 01:15:22,000
然后反过来其实也是一样的

1951
01:15:22,000 --> 01:15:27,000
就是这一次 bill 的最受欢迎的 session 之一

1952
01:15:27,000 --> 01:15:31,000
就是用 virtual studio 2005

1953
01:15:31,000 --> 01:15:34,000
编译 object c 程序

1954
01:15:36,000 --> 01:15:41,000
就是如果你是一个想要给 iphone 开发程序的人

1955
01:15:41,000 --> 01:15:44,000
然后你只有 iphone 和 windows 电脑

1956
01:15:44,000 --> 01:15:48,000
那从 virtual studio 2015 开始

1957
01:15:48,000 --> 01:15:51,000
你也可以用 virtual studio 给 iphone 开发程序

1958
01:15:51,000 --> 01:15:56,000
这也是一件就是反过来也是一件很好

1959
01:15:56,000 --> 01:15:57,000
是吗

1960
01:15:57,000 --> 01:15:59,000
我还没用过那个东西

1961
01:15:59,000 --> 01:16:02,000
但我现在也不做一顿开发不知道

1962
01:16:02,000 --> 01:16:04,000
但是如果说

1963
01:16:04,000 --> 01:16:07,000
因为大家对 virtual studio 的评价是不错的

1964
01:16:07,000 --> 01:16:10,000
然后 xcode 就是属于那个好看

1965
01:16:10,000 --> 01:16:12,000
但是可能不是那么好用的时候

1966
01:16:12,000 --> 01:16:16,000
到时候最 ironic 最讽刺的就是

1967
01:16:16,000 --> 01:16:20,000
你在 virtual studio 开发最好体验是用 virtual studio

1968
01:16:20,000 --> 01:16:22,000
这个就搞笑了

1969
01:16:22,000 --> 01:16:23,000
这很有可能是真的

1970
01:16:23,000 --> 01:16:26,000
就好像

1971
01:16:26,000 --> 01:16:29,000
inteligate 那个厂商 jadbrans 出了一个

1972
01:16:29,000 --> 01:16:32,000
all drive c 的编译器

1973
01:16:32,000 --> 01:16:34,000
iE 叫什么我已经忘了

1974
01:16:34,000 --> 01:16:36,000
但

1975
01:16:37,000 --> 01:16:39,000
all drive code 之类的

1976
01:16:39,000 --> 01:16:42,000
那个东西用起来就已经比 xcode 要舒服很多了

1977
01:16:42,000 --> 01:16:44,000
但是

1978
01:16:44,000 --> 01:16:47,000
它一直没有推广起来

1979
01:16:47,000 --> 01:16:49,000
但很大原因是

1980
01:16:49,000 --> 01:16:53,000
它实图在 os 厂商和 xcode 争封

1981
01:16:53,000 --> 01:16:54,000
这还是比较吃亏的

1982
01:16:54,000 --> 01:16:56,000
但是像 virtual studio 2015

1983
01:16:56,000 --> 01:16:58,000
它目前还是只有 virtual studio 版本

1984
01:16:58,000 --> 01:17:01,000
基本上你在 virtual studio 上开发

1985
01:17:01,000 --> 01:17:02,000
xcode 的程序

1986
01:17:02,000 --> 01:17:04,000
开发 ovgc 的程序

1987
01:17:04,000 --> 01:17:09,000
之前只有那个工具叫什么

1988
01:17:09,000 --> 01:17:11,000
xcatl

1989
01:17:13,000 --> 01:17:16,000
应该是叫 zamerain 没念错了

1990
01:17:16,000 --> 01:17:18,000
那样一个工具

1991
01:17:18,000 --> 01:17:22,000
然后性能下身可以在 virtual studio 2015 里面做这件事情

1992
01:17:22,000 --> 01:17:25,000
所以我觉得可能这样会无形中

1993
01:17:25,000 --> 01:17:28,000
给很多 iOS 开发者

1994
01:17:28,000 --> 01:17:30,000
wanna be

1995
01:17:30,000 --> 01:17:32,000
打开这些纳门

1996
01:17:32,000 --> 01:17:35,000
至少不用买 Mac 了对吧

1997
01:17:35,000 --> 01:17:37,000
对 而且至少不用忍受 xcode

1998
01:17:37,000 --> 01:17:38,000
不是有句

1999
01:17:38,000 --> 01:17:39,000
等等

2000
01:17:39,000 --> 01:17:40,000
它那个只能编译

2001
01:17:40,000 --> 01:17:42,000
它能提交吗 不能提交吧

2002
01:17:42,000 --> 01:17:45,000
你提交到那个 app store 还是得通过 xcode 来做对吧

2003
01:17:46,000 --> 01:17:49,000
如果它能编译出一个 IPA 来就可以

2004
01:17:49,000 --> 01:17:52,000
提交 app 这件事情

2005
01:17:52,000 --> 01:17:54,000
不是可以在网页上做的

2006
01:17:56,000 --> 01:17:57,000
我记得是可以的

2007
01:17:57,000 --> 01:18:00,000
并不一定要在 xcode 里面验证

2008
01:18:00,000 --> 01:18:04,000
然后通过 xcode 的那个 archive 管理器提交

2009
01:18:06,000 --> 01:18:08,000
好 那如果再这样来

2010
01:18:08,000 --> 01:18:09,000
我觉得可能很可能

2011
01:18:09,000 --> 01:18:10,000
这个什么

2012
01:18:10,000 --> 01:18:13,000
苹果的律师就要给 Virtual 律师记这个文件了

2013
01:18:14,000 --> 01:18:17,000
或者苹果会耍一些小手段

2014
01:18:17,000 --> 01:18:21,000
让用户只能通过 xcode 来提交程序

2015
01:18:21,000 --> 01:18:23,000
但你这这样太二了吧

2016
01:18:23,000 --> 01:18:24,000
何必呢 这不是

2017
01:18:26,000 --> 01:18:29,000
不过这个我觉得还是有一定的意义

2018
01:18:29,000 --> 01:18:32,000
因为这样 Mac 的销量就会受到很大影响

2019
01:18:32,000 --> 01:18:34,000
因为现在知道很多这种创业团队

2020
01:18:34,000 --> 01:18:39,000
它就纯粹是为了要开发 Mac

2021
01:18:39,000 --> 01:18:41,000
或者是 iPhone 的音乐

2022
01:18:41,000 --> 01:18:44,000
才给开发 才招聘使用这个

2023
01:18:44,000 --> 01:18:49,000
然后如果说这块都完全没必要

2024
01:18:49,000 --> 01:18:50,000
他们就完全可以用 Windows

2025
01:18:50,000 --> 01:18:52,000
就是 Virtual Studio 去搞地板

2026
01:18:52,000 --> 01:18:54,000
甚至连 Mac 都不需要买了

2027
01:18:54,000 --> 01:18:55,000
你要按照喬布斯那个德行

2028
01:18:55,000 --> 01:18:57,000
肯定是不会懂一种事情发生的

2029
01:18:57,000 --> 01:18:59,000
我觉得说得也对

2030
01:18:59,000 --> 01:19:01,000
然后当然 Windows

2031
01:19:01,000 --> 01:19:02,000
Windows 用

2032
01:19:02,000 --> 01:19:03,000
不知道是哪个用后

2033
01:19:03,000 --> 01:19:04,000
还有另外一个选择的

2034
01:19:04,000 --> 01:19:08,000
就是用 C Shop 开发跨平台的 E-Dome App

2035
01:19:08,000 --> 01:19:10,000
就是你用 C Shop 写一个 E-Dome App

2036
01:19:10,000 --> 01:19:16,000
它可以自动被编译成 iPhone Android 和 Windows Phone 上去

2037
01:19:16,000 --> 01:19:18,000
这个也是

2038
01:19:18,000 --> 01:19:19,000
就等于是你

2039
01:19:19,000 --> 01:19:22,000
如果你不是说只希望在 Windows 上

2040
01:19:22,000 --> 01:19:24,000
为 iPhone 开发程序的话

2041
01:19:24,000 --> 01:19:25,000
你甚至可以

2042
01:19:25,000 --> 01:19:28,000
或者说也许更多的人会选择使用 C Shop

2043
01:19:28,000 --> 01:19:30,000
来开发跨平台的程序

2044
01:19:30,000 --> 01:19:33,000
然后让 Virtual Studio 去操心

2045
01:19:33,000 --> 01:19:37,000
把 C Shop 转移成平台对应的目标源

2046
01:19:37,000 --> 01:19:39,000
这件苦差事

2047
01:19:39,000 --> 01:19:42,000
对有一个资料就是这样的

2048
01:19:42,000 --> 01:19:43,000
当然我没看完

2049
01:19:43,000 --> 01:19:45,000
但是一开头基本上

2050
01:19:45,000 --> 01:19:47,000
那个演示研究

2051
01:19:47,000 --> 01:19:49,000
试图的

2052
01:19:49,000 --> 01:19:51,000
运行一个 demo

2053
01:19:51,000 --> 01:19:53,000
这个 demo 编译之后可以同时跑在

2054
01:19:53,000 --> 01:19:55,000
Windows Phone iPhone 和 Android

2055
01:19:55,000 --> 01:19:57,000
然后它是用 C Shop 写的

2056
01:19:57,000 --> 01:19:59,000
然后这次

2057
01:19:59,000 --> 01:20:05,000
Microsoft Build 上面还展示了新的 Directive X 12

2058
01:20:05,000 --> 01:20:08,000
这可能也是一个比较重要的事情

2059
01:20:08,000 --> 01:20:10,000
就是因为至少

2060
01:20:10,000 --> 01:20:11,000
我不知道你至少

2061
01:20:11,000 --> 01:20:15,000
我一直心心念念想要传一台 Windows 机器

2062
01:20:15,000 --> 01:20:18,000
就是因为好多游戏是只能在 Windows 上跑的

2063
01:20:18,000 --> 01:20:22,000
然后 Virtual 也是延续的这个优达传统

2064
01:20:22,000 --> 01:20:25,000
就是一定要向大家展示 Windows

2065
01:20:25,000 --> 01:20:27,000
是一个多么适合做游戏的平台

2066
01:20:27,000 --> 01:20:32,000
尤其是 Windows 这一套 3 D 图

2067
01:20:32,000 --> 01:20:34,000
3 D 图形图 Directive X 12

2068
01:20:34,000 --> 01:20:36,000
然后它不是请到了

2069
01:20:38,000 --> 01:20:42,000
Square iNX 展示了下一代游戏

2070
01:20:42,000 --> 01:20:44,000
那游戏叫什么我忘了

2071
01:20:44,000 --> 01:20:46,000
Witch

2072
01:20:46,000 --> 01:20:48,000
然后它展示了一个

2073
01:20:48,000 --> 01:20:50,000
一开始我以为是一段 CG

2074
01:20:50,000 --> 01:20:53,000
然后它把那个

2075
01:20:53,000 --> 01:20:56,000
反正场景就是一个女人趴在地上在哭

2076
01:20:56,000 --> 01:20:58,000
然后我想这什么看的

2077
01:20:58,000 --> 01:21:00,000
然后播完的时候他说

2078
01:21:00,000 --> 01:21:02,000
大家以为刚才是 CG 吗

2079
01:21:02,000 --> 01:21:03,000
其实刚才是游戏方面

2080
01:21:03,000 --> 01:21:05,000
然后我就惊呆了

2081
01:21:05,000 --> 01:21:06,000
因为那个

2082
01:21:06,000 --> 01:21:08,000
就是实景不是预先渲染好的录像

2083
01:21:08,000 --> 01:21:11,000
就是你看起来那个东西跟 CG 一模一样

2084
01:21:11,000 --> 01:21:13,000
但是它播到一半的时候

2085
01:21:13,000 --> 01:21:16,000
他说好现在我要把它转成 Manual 模式

2086
01:21:17,000 --> 01:21:20,000
然后整个场景就停下来了

2087
01:21:20,000 --> 01:21:21,000
然后它开始移动镜头

2088
01:21:21,000 --> 01:21:24,000
我觉得内插真的是挺震撼的

2089
01:21:24,000 --> 01:21:27,000
就你眼前看到了一个像

2090
01:21:28,000 --> 01:21:29,000
有点像什么的

2091
01:21:29,000 --> 01:21:32,000
那个惊喜程度非常接近

2092
01:21:32,000 --> 01:21:36,000
之前的最终幻想的那个电影版

2093
01:21:36,000 --> 01:21:37,000
我不知道你看过没有

2094
01:21:37,000 --> 01:21:38,000
就是非常

2095
01:21:38,000 --> 01:21:39,000
不知道

2096
01:21:39,000 --> 01:21:40,000
因为它叫渲染那个长头发

2097
01:21:40,000 --> 01:21:41,000
那个就很困难

2098
01:21:41,000 --> 01:21:42,000
对

2099
01:21:42,000 --> 01:21:45,000
然后它开始转镜头的时候

2100
01:21:45,000 --> 01:21:46,000
你会发现这个

2101
01:21:46,000 --> 01:21:50,000
里面所有的场景都可以实时渲染成

2102
01:21:50,000 --> 01:21:54,000
非常接近于现在的最顶级的 CG 的程度

2103
01:21:54,000 --> 01:21:55,000
然后

2104
01:21:56,000 --> 01:21:58,000
包括每根头发都是用多边形

2105
01:21:58,000 --> 01:22:00,000
每一根头发

2106
01:22:00,000 --> 01:22:02,000
就是这个人物头上可能有几千根头发

2107
01:22:02,000 --> 01:22:03,000
三千反档丝

2108
01:22:03,000 --> 01:22:06,000
每根头发都是用那个多边形渲染而成

2109
01:22:06,000 --> 01:22:09,000
然后光的效果照在上面非常非常好

2110
01:22:09,000 --> 01:22:11,000
然后它宣称说

2111
01:22:11,000 --> 01:22:12,000
现在的

2112
01:22:14,000 --> 01:22:17,000
效果应该是 DirectX

2113
01:22:17,000 --> 01:22:20,000
DirectX 11 的 6 到 10 倍

2114
01:22:20,000 --> 01:22:23,000
所以还是相当可观的一个提升

2115
01:22:24,000 --> 01:22:27,000
其实最主要的一个应用就是说

2116
01:22:27,000 --> 01:22:28,000
就这么理解

2117
01:22:28,000 --> 01:22:32,000
就是它的 overhead 少了

2118
01:22:32,000 --> 01:22:35,000
就更加接近于硬件本身能够提供的性能

2119
01:22:35,000 --> 01:22:36,000
对

2120
01:22:36,000 --> 01:22:38,000
这个其实是一个挺重要的

2121
01:22:38,000 --> 01:22:41,000
就几次个厂商都在做同样的事情

2122
01:22:41,000 --> 01:22:43,000
首先比较早的是

2123
01:22:43,000 --> 01:22:45,000
尤其是概念上它先做的

2124
01:22:45,000 --> 01:22:46,000
就是新过的叫什么

2125
01:22:46,000 --> 01:22:47,000
Metal

2126
01:22:47,000 --> 01:22:48,000
Metal 吧

2127
01:22:48,000 --> 01:22:50,000
Metal 主要是贴近移动的

2128
01:22:50,000 --> 01:22:51,000
对

2129
01:22:51,000 --> 01:22:53,000
但它这个只有 Metal

2130
01:22:53,000 --> 01:22:55,000
对 Metal 现在好像就在 Also 上才有

2131
01:22:55,000 --> 01:23:00,000
然后后来是 AMD 出了一个叫什么

2132
01:23:00,000 --> 01:23:02,000
叫

2133
01:23:02,000 --> 01:23:04,000
名字我一下想不起来了

2134
01:23:04,000 --> 01:23:06,000
但是他们也在做类似的事情

2135
01:23:06,000 --> 01:23:07,000
就说

2136
01:23:08,000 --> 01:23:11,000
怎么样能够更好的暴露出

2137
01:23:11,000 --> 01:23:14,000
显卡原生的硬件的性能

2138
01:23:14,000 --> 01:23:17,000
然后减少中间的增加额外的负担

2139
01:23:17,000 --> 01:23:18,000
是 Mantel 啊

2140
01:23:18,000 --> 01:23:19,000
还是

2141
01:23:20,000 --> 01:23:21,000
你说

2142
01:23:21,000 --> 01:23:22,000
MD 那叫 Mantel

2143
01:23:22,000 --> 01:23:23,000
对

2144
01:23:23,000 --> 01:23:24,000
Mantel 就挺像的

2145
01:23:24,000 --> 01:23:25,000
就一个 Metal

2146
01:23:25,000 --> 01:23:27,000
D-Mantel

2147
01:23:27,000 --> 01:23:29,000
对没错没错

2148
01:23:29,000 --> 01:23:31,000
然后但毕竟就微软

2149
01:23:31,000 --> 01:23:33,000
它做这个还是有优势的

2150
01:23:33,000 --> 01:23:35,000
因为之前有很多游戏上

2151
01:23:35,000 --> 01:23:38,000
还是走 DirectX 这条线了

2152
01:23:38,000 --> 01:23:40,000
那么它自己直接做个顺机板

2153
01:23:40,000 --> 01:23:41,000
可能还是有很多会常常

2154
01:23:41,000 --> 01:23:42,000
然后一组就跟进

2155
01:23:42,000 --> 01:23:44,000
然后这样在发行上会有好处吗

2156
01:23:44,000 --> 01:23:46,000
但是我不太清楚

2157
01:23:46,000 --> 01:23:50,000
在 DirectX 和 OpenGL

2158
01:23:50,000 --> 01:23:52,000
他们之间的

2159
01:23:52,000 --> 01:23:54,000
谁比谁领先很明显吗

2160
01:23:54,000 --> 01:23:56,000
有这种样的区别吗

2161
01:23:56,000 --> 01:23:57,000
我看到的说法是

2162
01:23:57,000 --> 01:23:59,000
如果你不想让自己的脑袋爆掉的话

2163
01:23:59,000 --> 01:24:00,000
就选择 DX

2164
01:24:00,000 --> 01:24:02,000
DirectX 比较好

2165
01:24:02,000 --> 01:24:04,000
就从一个开发者的角度来看

2166
01:24:04,000 --> 01:24:06,000
如果你不打算支持多平台

2167
01:24:06,000 --> 01:24:10,000
然后你又想要比较好的文档

2168
01:24:10,000 --> 01:24:12,000
选择 DX 是比较好

2169
01:24:13,000 --> 01:24:15,000
对说开发体验上是 DirectX

2170
01:24:15,000 --> 01:24:16,000
这个系列比较好

2171
01:24:16,000 --> 01:24:19,000
因为毕竟是单一比较新

2172
01:24:19,000 --> 01:24:22,000
而且是说历史包含相对较少

2173
01:24:22,000 --> 01:24:23,000
OpenGL 的

2174
01:24:23,000 --> 01:24:25,000
我看他们说这个主要的问题就是讲

2175
01:24:25,000 --> 01:24:27,000
因为历史包含比较沉重

2176
01:24:27,000 --> 01:24:28,000
各种那种

2177
01:24:28,000 --> 01:24:32,000
就是几套 API 都是在同一个版本里面存在

2178
01:24:32,000 --> 01:24:34,000
没有所谓 Defecate 的这种情况

2179
01:24:34,000 --> 01:24:37,000
那导致开发者看完之后就很辛苦

2180
01:24:37,000 --> 01:24:40,000
你说明明可以用一个更好的方式实现

2181
01:24:40,000 --> 01:24:41,000
但是你可能就是没发达那一页

2182
01:24:41,000 --> 01:24:42,000
因为实在太长了

2183
01:24:42,000 --> 01:24:45,000
看了一个比较原始或者幕后的方案来实现

2184
01:24:45,000 --> 01:24:47,000
可能对性能也不好

2185
01:24:48,000 --> 01:24:50,000
你的开发难度也大

2186
01:24:50,000 --> 01:24:51,000
当然了

2187
01:24:51,000 --> 01:24:52,000
最好说

2188
01:24:52,000 --> 01:24:54,000
你可以在多个平台运行

2189
01:24:54,000 --> 01:24:56,000
你现在可以比较

2190
01:24:56,000 --> 01:24:58,000
就不需要怎么太改

2191
01:24:58,000 --> 01:25:01,000
就可以兼容多个这个

2192
01:25:01,000 --> 01:25:02,000
这个叫什么

2193
01:25:02,000 --> 01:25:04,000
平台的类型也好

2194
01:25:04,000 --> 01:25:05,000
对吧

2195
01:25:05,000 --> 01:25:06,000
手机端那些时候

2196
01:25:06,000 --> 01:25:09,000
OpenGL 当然是一个什么 ES

2197
01:25:09,000 --> 01:25:13,000
然后桌面端也有各种不同机型

2198
01:25:13,000 --> 01:25:17,000
好像那个什么就是 PS 4 和 Xbox

2199
01:25:17,000 --> 01:25:19,000
好像都是可以支持这种吧

2200
01:25:20,000 --> 01:25:21,000
你是对对对对

2201
01:25:21,000 --> 01:25:23,000
PS 4 支持还是 OpenGL

2202
01:25:23,000 --> 01:25:24,000
OpenGL

2203
01:25:24,000 --> 01:25:25,000
对没错

2204
01:25:26,000 --> 01:25:28,000
对差不多这个意思

2205
01:25:28,000 --> 01:25:29,000
对所以就是

2206
01:25:30,000 --> 01:25:32,000
开发者还是要取舍一下的

2207
01:25:32,000 --> 01:25:34,000
你是要市场呢

2208
01:25:34,000 --> 01:25:36,000
要体验呢还是怎么这么低

2209
01:25:36,000 --> 01:25:37,000
没错

2210
01:25:37,000 --> 01:25:40,000
然后当然我印象里面之前有过一个

2211
01:25:42,000 --> 01:25:45,000
就是应该是 N 长的那个

2212
01:25:45,000 --> 01:25:48,000
NVIDIA 厂商的开发者

2213
01:25:48,000 --> 01:25:50,000
在一个论坛上面写了一篇

2214
01:25:50,000 --> 01:25:53,000
非常长的倒苦水的帖子

2215
01:25:53,000 --> 01:25:55,000
就说那些用 DirectX 的人

2216
01:25:55,000 --> 01:25:58,000
全都不知道怎么样正确的使用 API

2217
01:25:58,000 --> 01:26:02,000
然后有些 BlockBust 级别的那个

2218
01:26:03,000 --> 01:26:05,000
大作都非常非常的蠢

2219
01:26:06,000 --> 01:26:09,000
就是没有以合适的方式来使用 API

2220
01:26:09,000 --> 01:26:12,000
使得游戏的那个性能非常非常的弱

2221
01:26:12,000 --> 01:26:15,000
然后最后有玩家会怪到那个

2222
01:26:15,000 --> 01:26:18,000
显卡头上说这个显卡的功能

2223
01:26:18,000 --> 01:26:20,000
那个不够强介什么的

2224
01:26:20,000 --> 01:26:23,000
然后他们说他们 Literally

2225
01:26:23,000 --> 01:26:26,000
每一代的那个 Driver

2226
01:26:27,000 --> 01:26:30,000
你如果你好奇过

2227
01:26:30,000 --> 01:26:32,000
一个 Driver 要下个三五百张

2228
01:26:32,000 --> 01:26:33,000
那是在下什么

2229
01:26:33,000 --> 01:26:36,000
其实里面都是给每个游戏的补丁

2230
01:26:36,000 --> 01:26:37,000
就是检测到说

2231
01:26:37,000 --> 01:26:39,000
原来你是在运行这个游戏

2232
01:26:39,000 --> 01:26:40,000
好这个游戏里面有这个部分

2233
01:26:40,000 --> 01:26:41,000
写的非常的蠢

2234
01:26:41,000 --> 01:26:43,000
让它每当运行到这一部分的时候

2235
01:26:43,000 --> 01:26:45,000
我们就切换成

2236
01:26:45,000 --> 01:26:48,000
我们所谓它提供的正确的比较好的

2237
01:26:48,000 --> 01:26:49,000
这个 API 调用了

2238
01:26:49,000 --> 01:26:52,000
然后整个游戏的 performance 立刻就上去了

2239
01:26:54,000 --> 01:26:58,000
这个显卡厂商也是不容易说的

2240
01:26:58,000 --> 01:27:01,000
听说

2241
01:27:01,000 --> 01:27:04,000
这也是就说什么像苹果这种

2242
01:27:04,000 --> 01:27:07,000
软硬合一的厂商它就有好处

2243
01:27:07,000 --> 01:27:08,000
对

2244
01:27:08,000 --> 01:27:10,000
Metal 我出了就出了

2245
01:27:10,000 --> 01:27:12,000
我开发之后我一跟他们一讲

2246
01:27:12,000 --> 01:27:14,000
这个 API 很爽

2247
01:27:14,000 --> 01:27:15,000
硬件都给你搞好

2248
01:27:15,000 --> 01:27:17,000
你再用这个体验就是不错的

2249
01:27:17,000 --> 01:27:19,000
当然可能温哥做不到

2250
01:27:19,000 --> 01:27:20,000
微软做不到那么好的

2251
01:27:20,000 --> 01:27:21,000
但是在 Twitter 求其次

2252
01:27:21,000 --> 01:27:23,000
我起码 API 我可以同意

2253
01:27:23,000 --> 01:27:24,000
可以提供比较好的

2254
01:27:24,000 --> 01:27:27,000
至于后面这个跟硬件几成打交道

2255
01:27:27,000 --> 01:27:30,000
反正我把这个粘活内活干了

2256
01:27:30,000 --> 01:27:31,000
你们上面爽就好了

2257
01:27:31,000 --> 01:27:34,000
但是前天就是你们得接着用我这个

2258
01:27:34,000 --> 01:27:36,000
projectory 的系统

2259
01:27:36,000 --> 01:27:37,000
对

2260
01:27:37,000 --> 01:27:42,000
所以如果人两个巨头能够取成补短就好

2261
01:27:42,000 --> 01:27:46,000
但是现实总是不那么美好的

2262
01:27:46,000 --> 01:27:48,000
所以不指望

2263
01:27:48,000 --> 01:27:50,000
他们这次还发布了

2264
01:27:50,000 --> 01:27:53,000
也不叫发布就算是一个名字

2265
01:27:53,000 --> 01:27:56,000
就是传说中的取代 IE 的优点

2266
01:27:57,000 --> 01:27:59,000
PLVER 有优点

2267
01:27:59,000 --> 01:28:02,000
SSPA

2268
01:28:02,000 --> 01:28:03,000
S 打

2269
01:28:04,000 --> 01:28:05,000
S 打人

2270
01:28:08,000 --> 01:28:09,000
刚才我在 leben

2271
01:28:10,000 --> 01:28:12,000
april 公 societies

2272
01:28:12,000 --> 01:28:13,000
大概聊了带

2273
01:28:13,000 --> 01:28:16,000
但是也是因为没有用到

2274
01:28:16,000 --> 01:28:17,000
不知道到底是个什么用意

2275
01:28:17,000 --> 01:28:18,000
你看的是什么意思

2276
01:28:18,000 --> 01:28:20,000
就是

2277
01:28:22,000 --> 01:28:23,000
他应该有那个

2278
01:28:23,000 --> 01:28:25,000
用他的 beta

2279
01:28:25,000 --> 01:28:26,000
是 demo

2280
01:28:27,000 --> 01:28:27,000
OK

2281
01:28:27,000 --> 01:28:29,000
我觉得我印象最深刻就是

2282
01:28:29,000 --> 01:28:30,000
adj 做的非常漂亮

2283
01:28:33,000 --> 01:28:36,000
漂亮是指哪具体指哪些方面

2284
01:28:36,000 --> 01:28:38,000
就是他把整个 UI 的

2285
01:28:39,000 --> 01:28:41,000
不仅仅是扁平化

2286
01:28:41,000 --> 01:28:45,000
而且他把 UI 去 UI 化

2287
01:28:45,000 --> 01:28:48,000
就是你看不到非常明显的

2288
01:28:49,000 --> 01:28:49,000
比如说一个按钮

2289
01:28:49,000 --> 01:28:51,000
然后这个按钮基本上就只有一个

2290
01:28:52,000 --> 01:28:54,000
一向速度宽的一个边缘

2291
01:28:54,000 --> 01:28:57,000
然后其他所有的东西都是这个网易的预览图

2292
01:28:58,000 --> 01:29:02,000
或者比如说你摊那个浏览器上面有一排 tab

2293
01:29:03,000 --> 01:29:05,000
然后你把鼠标挪到每个 tab 上面

2294
01:29:05,000 --> 01:29:08,000
就会立刻下面出现一个 dropdown

2295
01:29:08,000 --> 01:29:11,000
然后这个 dropdown 里面就是这个页面

2296
01:29:11,000 --> 01:29:13,000
目前正在显示的东西的一个小预览图

2297
01:29:16,000 --> 01:29:19,000
或者要按一个按钮

2298
01:29:19,000 --> 01:29:21,000
然后按一个按钮基本上也是

2299
01:29:21,000 --> 01:29:23,000
大部分地方都是图片

2300
01:29:23,000 --> 01:29:25,000
或者是你需要看的东西

2301
01:29:25,000 --> 01:29:27,000
而不是按钮本身

2302
01:29:27,000 --> 01:29:29,000
就 H 2 H 吧

2303
01:29:29,000 --> 01:29:32,000
我觉得它可能也是跟这个名字来的

2304
01:29:32,000 --> 01:29:37,000
就所有的东西都是内容

2305
01:29:37,000 --> 01:29:38,000
然后它是内容的 Edge

2306
01:29:38,000 --> 01:29:41,000
其实有点跟 chrome 有点一去同工吃妙

2307
01:29:41,000 --> 01:29:43,000
但它叫得更直白一些

2308
01:29:43,000 --> 01:29:44,000
一个是框

2309
01:29:44,000 --> 01:29:45,000
一个是边

2310
01:29:45,000 --> 01:29:46,000
而且是边框

2311
01:29:46,000 --> 01:29:47,000
对

2312
01:29:47,000 --> 01:29:50,000
它的按钮就是你所要看到的一切内容

2313
01:29:52,000 --> 01:29:53,000
都让你看到

2314
01:29:53,000 --> 01:29:55,000
你尽可能多去看到内容

2315
01:29:55,000 --> 01:29:59,000
而我只是作为内容外面的一向速度白边而已

2316
01:30:01,000 --> 01:30:03,000
这个我对它明明的理解

2317
01:30:03,000 --> 01:30:05,000
还可能还没想到这一次没有

2318
01:30:05,000 --> 01:30:07,000
你把它理解为 blood edge 是吧

2319
01:30:07,000 --> 01:30:08,000
bleeding edge

2320
01:30:08,000 --> 01:30:12,000
因为它有 IEE 它不是有各种兼容模式吗

2321
01:30:12,000 --> 01:30:12,000
对

2322
01:30:14,000 --> 01:30:16,000
然后它最新的模式就是叫做 Edge mode

2323
01:30:16,000 --> 01:30:17,000
OK

2324
01:30:18,000 --> 01:30:20,000
然后它不是承诺说这个有点其他一支

2325
01:30:20,000 --> 01:30:23,000
就是永远处在时代最前缘

2326
01:30:23,000 --> 01:30:24,000
所以就是 Edge

2327
01:30:24,000 --> 01:30:25,000
没错

2328
01:30:25,000 --> 01:30:25,000
对

2329
01:30:25,000 --> 01:30:26,000
coding edge

2330
01:30:26,000 --> 01:30:30,000
然后我是这么理解它这个秘密的来历的

2331
01:30:30,000 --> 01:30:31,000
刚刚你说到这么

2332
01:30:31,000 --> 01:30:33,000
也确实也是一个挺有

2333
01:30:33,000 --> 01:30:37,000
是挺有这个说服力的一个一个一个讲法

2334
01:30:38,000 --> 01:30:40,000
但我觉得可能 Edge 最有

2335
01:30:40,000 --> 01:30:45,000
最对开发者最有意义的一点是

2336
01:30:45,000 --> 01:30:48,000
它不再支持那个 active edge 那个空间

2337
01:30:50,000 --> 01:30:52,000
它终于甩掉了这个毒瘤吗

2338
01:30:53,000 --> 01:30:54,000
对

2339
01:30:54,000 --> 01:30:56,000
甩掉一个历史重大的包袱

2340
01:30:56,000 --> 01:30:58,000
然后就如果这个流行起来

2341
01:30:58,000 --> 01:31:01,000
我们就可以看到国内那些愚蠢的往银厂上也好

2342
01:31:01,000 --> 01:31:03,000
银行登陆上也好

2343
01:31:03,000 --> 01:31:05,000
再装一个什么狗屁的空间这种事情

2344
01:31:05,000 --> 01:31:06,000
对

2345
01:31:06,000 --> 01:31:08,000
又 never know 啊

2346
01:31:08,000 --> 01:31:08,000
我觉得

2347
01:31:10,000 --> 01:31:12,000
政府什么事情都干得出来

2348
01:31:12,000 --> 01:31:13,000
很难说

2349
01:31:14,000 --> 01:31:16,000
政府会说你不是吃 xxx

2350
01:31:16,000 --> 01:31:17,000
不要进中国市场

2351
01:31:18,000 --> 01:31:20,000
你能你能把他怎么逼吗

2352
01:31:22,000 --> 01:31:23,000
搞得跟韩国一样

2353
01:31:24,000 --> 01:31:27,000
就我觉得其实你说如果

2354
01:31:27,000 --> 01:31:30,000
好现在 Google 为伴

2355
01:31:30,000 --> 01:31:30,000
然后

2356
01:31:32,000 --> 01:31:35,000
苹果是反正苹果苹果不在意苹果是做硬件的

2357
01:31:35,000 --> 01:31:38,000
那如果 microsoft 也为伴的话

2358
01:31:39,000 --> 01:31:39,000
中国人用什么

2359
01:31:42,000 --> 01:31:42,000
对

2360
01:31:42,000 --> 01:31:45,000
是一个在大托 20 年

2361
01:31:45,000 --> 01:31:48,000
你当然可以说这种情况出现的可能性微乎其微

2362
01:31:48,000 --> 01:31:49,000
但是

2363
01:31:51,000 --> 01:31:53,000
参争就是在理论上有可能

2364
01:31:53,000 --> 01:31:55,000
说微软骨子这么软的一个公司是吧

2365
01:31:55,000 --> 01:31:56,000
对

2366
01:31:57,000 --> 01:31:59,000
Age 还有一个比较好玩的

2367
01:31:59,000 --> 01:32:02,000
他支持 crown 和 farfox 那些扩展

2368
01:32:03,000 --> 01:32:04,000
对

2369
01:32:04,000 --> 01:32:06,000
这个也是比较狠毒的一个招数

2370
01:32:06,000 --> 01:32:06,000
我觉得

2371
01:32:08,000 --> 01:32:09,000
但是我觉得这个做起来不算太难

2372
01:32:09,000 --> 01:32:12,000
因为大家那个扩展也是就是有一个加发 script

2373
01:32:12,000 --> 01:32:13,000
加那个 html

2374
01:32:13,000 --> 01:32:14,000
html 我写的嘛

2375
01:32:14,000 --> 01:32:15,000
一般是这样的

2376
01:32:16,000 --> 01:32:17,000
他这个人

2377
01:32:17,000 --> 01:32:19,000
我可能知识上也并不是特别复杂

2378
01:32:19,000 --> 01:32:20,000
但是意义还是蛮大的

2379
01:32:20,000 --> 01:32:22,000
就跟其实他们 build 的这次上面

2380
01:32:22,000 --> 01:32:24,000
我们可能这不会单独讲

2381
01:32:24,000 --> 01:32:24,000
就是

2382
01:32:27,000 --> 01:32:28,000
他那个温德斯时尚不是可以

2383
01:32:28,000 --> 01:32:29,000
不是温德斯时尚

2384
01:32:29,000 --> 01:32:32,000
就温德斯时在温德斯缝上的版本

2385
01:32:32,000 --> 01:32:34,000
他不是可以原本的原型

2386
01:32:34,000 --> 01:32:36,000
就是可以兼容运行 Android 应用

2387
01:32:36,000 --> 01:32:39,000
然后可以也可以兼容运行这个 LS 应用

2388
01:32:39,000 --> 01:32:42,000
所以这个有点这个一取同工的意思

2389
01:32:42,000 --> 01:32:45,000
因为很多人像是发 fox 的重度拥有

2390
01:32:45,000 --> 01:32:47,000
他为什么离不开

2391
01:32:47,000 --> 01:32:48,000
但除了一个精神理念上

2392
01:32:48,000 --> 01:32:50,000
他支持的有开源免费的

2393
01:32:50,000 --> 01:32:51,000
这种独立的流量性之外

2394
01:32:51,000 --> 01:32:53,000
可是很多一个因素就是有很多人装了

2395
01:32:53,000 --> 01:32:54,000
这种各种各样的小插件

2396
01:32:54,000 --> 01:32:56,000
然后对于他们来说

2397
01:32:56,000 --> 01:32:58,000
这些插件不管是他们工作也好

2398
01:32:58,000 --> 01:32:58,000
生活也好

2399
01:32:58,000 --> 01:33:01,000
都是属于那种必不可少的工具

2400
01:33:01,000 --> 01:33:04,000
然后你这个

2401
01:33:04,000 --> 01:33:05,000
因为 IE 是没什么插件的

2402
01:33:05,000 --> 01:33:08,000
IE 的插件都是什么流氓厂商装的

2403
01:33:08,000 --> 01:33:12,000
流氓软件用户最重要的插件是相对比较少的

2404
01:33:12,000 --> 01:33:14,000
当然他说他能够

2405
01:33:14,000 --> 01:33:16,000
这次把这个东西集成进来

2406
01:33:16,000 --> 01:33:19,000
能够做一些我觉得还是挺不错的

2407
01:33:19,000 --> 01:33:21,000
就能够争取市场定位的一个做法

2408
01:33:21,000 --> 01:33:23,000
对当然具体能不能成功

2409
01:33:23,000 --> 01:33:25,000
还是要看细节了

2410
01:33:25,000 --> 01:33:27,000
就是他的这个策略最大的问题就是

2411
01:33:27,000 --> 01:33:28,000
你必须把细节做好

2412
01:33:28,000 --> 01:33:32,000
如果你说所有这些插件能跑是能跑

2413
01:33:32,000 --> 01:33:34,000
可是要么特别卡

2414
01:33:34,000 --> 01:33:36,000
要么有些功能用不了

2415
01:33:36,000 --> 01:33:41,000
那我觉得还是还是会迫使很多人说

2416
01:33:41,000 --> 01:33:45,000
哎呦我这个东西是 Mission Critical

2417
01:33:45,000 --> 01:33:46,000
你跑不好的话呢

2418
01:33:46,000 --> 01:33:46,000
我宁可不用

2419
01:33:46,000 --> 01:33:48,000
我还是用回去可能

2420
01:33:48,000 --> 01:33:50,000
反正不损失什么不是吧

2421
01:33:50,000 --> 01:33:54,000
就然后反过来在温度的上面跑那个 iphone

2422
01:33:54,000 --> 01:33:56,000
按照的应用其实也是这样

2423
01:33:56,000 --> 01:33:59,000
如果说你这应用能在温度上面跑

2424
01:33:59,000 --> 01:34:01,000
但是用起来怎么用怎么用

2425
01:34:01,000 --> 01:34:03,000
怎么用怎么觉得别扭

2426
01:34:03,000 --> 01:34:05,000
我觉得还是一个很大的问题

2427
01:34:06,000 --> 01:34:08,000
我觉得可能还是

2428
01:34:08,000 --> 01:34:11,000
我觉得这个问题可能比那个在温度时的

2429
01:34:11,000 --> 01:34:12,000
而且温度是风上跑安卓和 iOS

2430
01:34:12,000 --> 01:34:14,000
就要简单得多

2431
01:34:14,000 --> 01:34:18,000
因为那个毕竟上你是要做一些非常麻烦的事情

2432
01:34:18,000 --> 01:34:19,000
你要提供建筑的 API

2433
01:34:19,000 --> 01:34:22,000
你要考虑说那个万一他用了这个

2434
01:34:22,000 --> 01:34:23,000
什么那个平台独私有的 API

2435
01:34:23,000 --> 01:34:24,000
或者独特的 API

2436
01:34:24,000 --> 01:34:25,000
你怎么去兼容

2437
01:34:25,000 --> 01:34:26,000
你怎么去折腾

2438
01:34:26,000 --> 01:34:27,000
还有稳定性啊

2439
01:34:27,000 --> 01:34:29,000
你都是很难保证的

2440
01:34:29,000 --> 01:34:30,000
因为你没有这个

2441
01:34:30,000 --> 01:34:33,000
你没有这个跑的应用的元代码

2442
01:34:33,000 --> 01:34:35,000
你只有一个二进制的字节码

2443
01:34:35,000 --> 01:34:35,000
或者是像 iOS

2444
01:34:35,000 --> 01:34:37,000
你甚至连字节码都没有

2445
01:34:37,000 --> 01:34:39,000
你得让它重新编一个

2446
01:34:39,000 --> 01:34:40,000
但是像这个浏览器里面

2447
01:34:40,000 --> 01:34:42,000
大家都是解析这个 java script

2448
01:34:42,000 --> 01:34:46,000
我觉得是一个相对来说比较好

2449
01:34:48,000 --> 01:34:50,000
做好的一个技术

2450
01:34:50,000 --> 01:34:53,000
就说你看现在那个 i 11 吧

2451
01:34:53,000 --> 01:34:56,000
它里面的一些 java script 的解析的引擎

2452
01:34:56,000 --> 01:34:57,000
就性能也是不错的

2453
01:34:57,000 --> 01:35:00,000
所以现在为解就是做一些兼容性的考量

2454
01:35:00,000 --> 01:35:00,000
对

2455
01:35:00,000 --> 01:35:04,000
然后我觉得以微软的这么庞大的团队

2456
01:35:04,000 --> 01:35:07,000
这么庞大的研发实力

2457
01:35:07,000 --> 01:35:09,000
然后只要他给他们足够的决心

2458
01:35:09,000 --> 01:35:10,000
是吧

2459
01:35:10,000 --> 01:35:10,000
看吧

2460
01:35:10,000 --> 01:35:11,000
按消极节的话

2461
01:35:11,000 --> 01:35:14,000
说只要 pm 的压力足够大

2462
01:35:14,000 --> 01:35:16,000
而且他们应该还是能够做得出来的

2463
01:35:16,000 --> 01:35:18,000
应该还是还可以

2464
01:35:18,000 --> 01:35:20,000
只要把不能胜的那一批 pm 开掉就可以做

2465
01:35:21,000 --> 01:35:22,000
没错

2466
01:35:23,000 --> 01:35:24,000
就这个我觉得还是对

2467
01:35:24,000 --> 01:35:28,000
我觉得他们还是有比较乐观的态度

2468
01:35:28,000 --> 01:35:28,000
对

2469
01:35:29,000 --> 01:35:29,000
对

2470
01:35:29,000 --> 01:35:32,000
当然我能想到的问题就是

2471
01:35:33,000 --> 01:35:36,000
至少在就某些插件

2472
01:35:36,000 --> 01:35:39,000
chrome 和 firefox 都有

2473
01:35:39,000 --> 01:35:42,000
但是有时候有些插件在 firefox 上面

2474
01:35:42,000 --> 01:35:44,000
能做到的事情在 chrome 上面是做不到的

2475
01:35:44,000 --> 01:35:49,000
比如说有一个 view beam 的 key bar

2476
01:35:49,000 --> 01:35:50,000
那个来操作流氧器的插件

2477
01:35:50,000 --> 01:35:53,000
我记得他说他在 firefox 上面

2478
01:35:53,000 --> 01:35:54,000
能够做到一些事情

2479
01:35:54,000 --> 01:35:58,000
在 chrome 上做不到的原因是 chrome 的杀核限制

2480
01:35:58,000 --> 01:36:00,000
更强一点

2481
01:36:00,000 --> 01:36:01,000
严格

2482
01:36:01,000 --> 01:36:02,000
对

2483
01:36:02,000 --> 01:36:06,000
而且 chrome 没有把流氧器本身的一些操作

2484
01:36:06,000 --> 01:36:08,000
暴露给 jaskrpni

2485
01:36:08,000 --> 01:36:10,000
就是你可以操作页面上的内容

2486
01:36:10,000 --> 01:36:12,000
你可以去访问页面上的内容

2487
01:36:12,000 --> 01:36:14,000
但是不能访问流氧器本身的一些功能

2488
01:36:14,000 --> 01:36:17,000
比如说关密或者是切换 time 之类的

2489
01:36:17,000 --> 01:36:18,000
嗯哼

2490
01:36:19,000 --> 01:36:20,000
但他那个也不行

2491
01:36:20,000 --> 01:36:22,000
因为他那个不是他那个是多进程模型

2492
01:36:22,000 --> 01:36:23,000
对

2493
01:36:23,000 --> 01:36:26,000
然后他那个流氧器的主控进程和页面的

2494
01:36:26,000 --> 01:36:30,000
那个进程是就是和那个包括连那个扩展的进程

2495
01:36:30,000 --> 01:36:31,000
都是完全独立的

2496
01:36:31,000 --> 01:36:34,000
这样的话应该是没有全线解决这个问题

2497
01:36:34,000 --> 01:36:36,000
但可能想一想就是说应该也有

2498
01:36:36,000 --> 01:36:38,000
但是不一定马上就能做出来

2499
01:36:38,000 --> 01:36:40,000
甚至都不在路线图上

2500
01:36:40,000 --> 01:36:40,000
这个就比较惨

2501
01:36:40,000 --> 01:36:41,000
是很有可能

2502
01:36:41,000 --> 01:36:42,000
对

2503
01:36:42,000 --> 01:36:44,000
所以不大也发现了

2504
01:36:44,000 --> 01:36:45,000
也那个东西也没正式发布

2505
01:36:45,000 --> 01:36:48,000
也不太清楚到底是一个什么样的状况

2506
01:36:48,000 --> 01:36:50,000
大家如果有兴趣可以去装个

2507
01:36:50,000 --> 01:36:51,000
他有一个所有的这种 ring

2508
01:36:51,000 --> 01:36:53,000
各种各样的圈圈

2509
01:36:53,000 --> 01:36:54,000
就是就是什么

2510
01:36:54,000 --> 01:36:55,000
什么 early adapter ring

2511
01:36:55,000 --> 01:36:56,000
什么那些发布的

2512
01:36:56,000 --> 01:36:58,000
如果你有兴趣可以申请加到一些

2513
01:36:58,000 --> 01:37:00,000
什么早期的那种发布的环

2514
01:37:00,000 --> 01:37:01,000
发布的圈圈

2515
01:37:01,000 --> 01:37:05,000
那你可以早拿到他们最新的 build 出来的版本

2516
01:37:05,000 --> 01:37:06,000
然后可以装上去试一下

2517
01:37:06,000 --> 01:37:07,000
啊反正也是

2518
01:37:07,000 --> 01:37:09,000
什么真当小白鼠

2519
01:37:09,000 --> 01:37:14,000
哎呀说的是这个传言台的温度式机器这件事情应该提升日常

2520
01:37:15,000 --> 01:37:20,000
hollowline 反正其实从概念和产品来讲

2521
01:37:20,000 --> 01:37:24,000
跟这次就 build 上的演示和上一次

2522
01:37:24,000 --> 01:37:25,000
差不太多

2523
01:37:25,000 --> 01:37:26,000
但这次我感觉

2524
01:37:26,000 --> 01:37:29,000
呃这个完成度要高一些

2525
01:37:29,000 --> 01:37:31,000
就是这个这个 demo 的完成度要高

2526
01:37:31,000 --> 01:37:33,000
但是事情毕竟还是没有碰到产品嘛

2527
01:37:33,000 --> 01:37:34,000
没错

2528
01:37:34,000 --> 01:37:35,000
所以还行

2529
01:37:36,000 --> 01:37:37,000
然后他们事后去又去试了一下

2530
01:37:37,000 --> 01:37:40,000
发现还是跟上一代上一次发布的时候

2531
01:37:40,000 --> 01:37:42,000
也是他们也是找了一对媒体能去试嘛

2532
01:37:43,000 --> 01:37:44,000
这一次他们等于是让开发者去试了

2533
01:37:45,000 --> 01:37:49,000
啊感觉看了一圈评论下来的感觉就是说

2534
01:37:51,000 --> 01:37:52,000
还是有比较多问题的

2535
01:37:52,000 --> 01:37:55,000
但是还是有进步起码什么微型化

2536
01:37:55,000 --> 01:37:56,000
这件事做到了

2537
01:37:56,000 --> 01:37:59,000
他们现在是不需要插任何线就头上带那么多东西就可以直接用了

2538
01:37:59,000 --> 01:38:00,000
这个还是不错的

2539
01:38:01,000 --> 01:38:06,000
这比那个什么 oculus rift 那些要接个什么线到台式机站还是要好很多的

2540
01:38:06,000 --> 01:38:09,000
但其他的还是要就是也有恶化的情况

2541
01:38:09,000 --> 01:38:11,000
比如说说的那个可视角变窄了嘛

2542
01:38:11,000 --> 01:38:17,000
然后也是根据要考虑什么呃计算能力和电力供应这种的

2543
01:38:17,000 --> 01:38:22,000
这种限制的情况下做出的一个什么不得不选的一个一个 treatoff

2544
01:38:22,000 --> 01:38:23,000
但是

2545
01:38:25,000 --> 01:38:27,000
哎这东西怎么说没有看到是很难去评价他的

2546
01:38:27,000 --> 01:38:31,000
而且我们我们现在外面看到的那个什么呃

2547
01:38:31,000 --> 01:38:34,000
他那个展示觉得挺惊艳的

2548
01:38:34,000 --> 01:38:37,000
但其实带起来怎么样回事还是得带了才带了才知道

2549
01:38:38,000 --> 01:38:41,000
可能我觉得并没有他展示的那么好

2550
01:38:41,000 --> 01:38:43,000
这是什么微软的一贯的毛病吗

2551
01:38:43,000 --> 01:38:47,000
就是炳傲化的看起来比吃起来好

2552
01:38:47,000 --> 01:38:49,000
这个就是一个挺大的问题

2553
01:38:49,000 --> 01:38:51,000
怎么说呢就会导致一个

2554
01:38:51,000 --> 01:38:54,000
对吧 over promise under deliver

2555
01:38:54,000 --> 01:38:56,000
就是承诺过多实现太少

2556
01:38:56,000 --> 01:38:59,000
这个这个到时候会有落差吗

2557
01:38:59,000 --> 01:39:00,000
中普拿到的时候会落差

2558
01:39:00,000 --> 01:39:01,000
对

2559
01:39:01,000 --> 01:39:04,000
所以我觉得可能好的一个方式还说把这个

2560
01:39:04,000 --> 01:39:10,000
这个你这个 demo 的呃你你你还不能够达到的

2561
01:39:11,000 --> 01:39:14,000
这些东西是要要收敛一点

2562
01:39:14,000 --> 01:39:17,000
就是说不要把这个饼画得太美好

2563
01:39:17,000 --> 01:39:19,000
而实际上你可能做不出那么好吃的饼

2564
01:39:19,000 --> 01:39:22,000
这个就比较就是一个比较考验

2565
01:39:22,000 --> 01:39:22,000
对

2566
01:39:22,000 --> 01:39:23,000
呃

2567
01:39:23,000 --> 01:39:26,000
什么团队的就是什么客制力的时候了

2568
01:39:26,000 --> 01:39:27,000
但是你知道了

2569
01:39:27,000 --> 01:39:30,000
微软从来不是一个有客制的公司

2570
01:39:30,000 --> 01:39:32,000
所以他们需要引入一个新的

2571
01:39:32,000 --> 01:39:37,000
所以有呃 chief user expectation officer

2572
01:39:37,000 --> 01:39:43,000
就是专门来 manage customer expectation expectation

2573
01:39:44,000 --> 01:39:47,000
该保密的保密该抠入的抠入吗

2574
01:39:47,000 --> 01:39:47,000
对

2575
01:39:48,000 --> 01:39:49,000
不过来看怎么说

2576
01:39:49,000 --> 01:39:53,000
可能他们现在也是说这个 expectation 已经已经

2577
01:39:53,000 --> 01:39:56,000
就可能对我们来说很多人都已经不指望他什么了

2578
01:39:56,000 --> 01:39:57,000
对吧

2579
01:39:57,000 --> 01:40:01,000
所以也也说不定说就是要达到这个效果

2580
01:40:01,000 --> 01:40:03,000
又是要让你他对他多指望一点

2581
01:40:03,000 --> 01:40:03,000
对吧

2582
01:40:03,000 --> 01:40:06,000
这个也也说不准他这么想

2583
01:40:06,000 --> 01:40:10,000
但是我目前为止还是就那个那个那个

2584
01:40:10,000 --> 01:40:11,000
就之前在爱丽公众也讲过这个说法

2585
01:40:11,000 --> 01:40:12,000
就是说

2586
01:40:13,000 --> 01:40:14,000
呃

2587
01:40:14,000 --> 01:40:16,000
不错的产品不错的

2588
01:40:16,000 --> 01:40:20,000
这个 idea 呃实现还是有点担忧的

2589
01:40:20,000 --> 01:40:20,000
嗯

2590
01:40:21,000 --> 01:40:27,000
这问你问题如果 holiness 和 erclose lift 摆在你面前

2591
01:40:27,000 --> 01:40:29,000
你会选 arift 摆在你面前

2592
01:40:29,000 --> 01:40:31,000
你会选哪一个只能选一个的话

2593
01:40:32,000 --> 01:40:34,000
呃只能选一个啊

2594
01:40:34,000 --> 01:40:36,000
哎呦这个还蛮难的我

2595
01:40:36,000 --> 01:40:37,000
很难吗

2596
01:40:37,000 --> 01:40:37,000
你想想

2597
01:40:38,000 --> 01:40:40,000
一个是一个是虚拟现实

2598
01:40:40,000 --> 01:40:41,000
一个是增强一些是

2599
01:40:41,000 --> 01:40:44,000
我觉得从这个这个嗯

2600
01:40:44,000 --> 01:40:47,000
酷和好玩这个点出发的话

2601
01:40:47,000 --> 01:40:49,000
可能还是那个 holiness 会比较好

2602
01:40:49,000 --> 01:40:52,000
而且其实从就现在从他们那个 holiness

2603
01:40:52,000 --> 01:40:58,000
这个二次发布的展示的效果和那个机机器的情况

2604
01:40:58,000 --> 01:41:02,000
相比于那个 arclose lift 他展示的那个什么三代工程机

2605
01:41:02,000 --> 01:41:03,000
的情况来讲

2606
01:41:04,000 --> 01:41:07,000
我觉得吧还是 holiness 的好一点

2607
01:41:07,000 --> 01:41:08,000
对 OK

2608
01:41:09,000 --> 01:41:10,000
要意思

2609
01:41:10,000 --> 01:41:11,000
你你会怎么选

2610
01:41:11,000 --> 01:41:13,000
我应该会选 arclose lift

2611
01:41:15,000 --> 01:41:16,000
我觉得为什么

2612
01:41:16,000 --> 01:41:17,000
因为可以打游戏

2613
01:41:19,000 --> 01:41:22,000
非常这个 vr 那个什么

2614
01:41:22,000 --> 01:41:23,000
holiness 不也可以玩游戏

2615
01:41:23,000 --> 01:41:26,000
它不是展示的那个叫什么 minecraft 吗

2616
01:41:26,000 --> 01:41:31,000
对问题在于 minecraft 的游戏的呃

2617
01:41:31,000 --> 01:41:32,000
他他不是一个

2618
01:41:33,000 --> 01:41:37,000
或者说他故意把 minecraft 呃改变成了一个

2619
01:41:37,000 --> 01:41:41,000
可以叠加在现实世界层面上的游戏

2620
01:41:41,000 --> 01:41:43,000
其实我就是我

2621
01:41:44,000 --> 01:41:45,000
嗯呃仔细的想过这个问题

2622
01:41:46,000 --> 01:41:49,000
就是呃我在想说

2623
01:41:49,000 --> 01:41:54,000
呃两种技术分别适用于什么样的游戏场景

2624
01:41:54,000 --> 01:41:56,000
呃假如说你要打 dome

2625
01:41:57,000 --> 01:42:02,000
呃或者 quake 这样一个完全虚模拟出来

2626
01:42:03,000 --> 01:42:05,000
一届环境的游戏

2627
01:42:05,000 --> 01:42:10,000
那我毫无疑问是呃 arclose lift 会比较好

2628
01:42:10,000 --> 01:42:14,000
因为你可以他他会他会帮你把现实隔绝起来

2629
01:42:14,000 --> 01:42:17,000
对吧你你所要做到的就是进入一个隔绝

2630
01:42:18,000 --> 01:42:21,000
现实的环境里面去杀一些根本不存在的怪物

2631
01:42:22,000 --> 01:42:26,000
呃或者是比如说你你要做一个打猎游戏

2632
01:42:26,000 --> 01:42:30,000
你显然会希望自己能够认为自己身处在一个从零里面

2633
01:42:30,000 --> 01:42:32,000
就是你自己家人对吧

2634
01:42:33,000 --> 01:42:39,000
但是反过来呃像 holens 这样的呃 ar 技术

2635
01:42:39,000 --> 01:42:43,000
那就比较适合于呃做一些

2636
01:42:44,000 --> 01:42:49,000
比如桌有呃我曾经试想过就比如说我和女朋友一人带一个

2637
01:42:49,000 --> 01:42:53,000
然后在呃丁是丁是传说嘛点点来说就不用

2638
01:42:54,000 --> 01:42:56,000
对丁是面前的桌子就可以打大风了对吧

2639
01:42:56,000 --> 01:42:59,000
就可以看到什么孙小本跑的保去

2640
01:42:59,000 --> 01:43:04,000
但骑上桌子什么也没有这不是很这不是很在这有点奇怪的难道不是很好吗

2641
01:43:05,000 --> 01:43:06,000
是比较适合这样的我

2642
01:43:08,000 --> 01:43:11,000
我就是想那个卢世传说就可以直接把那个对没错

2643
01:43:11,000 --> 01:43:14,000
卢世传说就直接显示在你面前

2644
01:43:14,000 --> 01:43:19,000
或者或者最最呃最合适的其实是呃站唇

2645
01:43:20,000 --> 01:43:26,000
就是挖 hamma 这个系列你不是可以呃粘给自己的模型呃

2646
01:43:26,000 --> 01:43:28,000
呃给自己粘模型然后给自己的模型涂色

2647
01:43:29,000 --> 01:43:32,000
然后用什么两脚气呀皮齿呀呃

2648
01:43:33,000 --> 01:43:40,000
来粮那个两个模型之间距离然后制骑子然后把你的战车推进

2649
01:43:40,000 --> 01:43:42,000
然后说我战车把你的受人轰掉了

2650
01:43:42,000 --> 01:43:45,000
然后把你把你的受人轰到桌上拿下去

2651
01:43:45,000 --> 01:43:48,000
所有这些桌有其实全都可以用 hollows 来实现

2652
01:43:48,000 --> 01:43:51,000
就效果应该会非常好玩我觉得

2653
01:43:52,000 --> 01:43:55,000
但就但但如果要我选利益

2654
01:43:55,000 --> 01:43:58,000
我觉得我还是会选会希望玩那种就是比较

2655
01:43:59,000 --> 01:44:02,000
强调进入是体验的对对

2656
01:44:03,000 --> 01:44:08,000
就忘让你忘掉从那个真实世界的各种种限制吗

2657
01:44:08,000 --> 01:44:11,000
就接进入这种虚拟世界的完全不同的一个

2658
01:44:11,000 --> 01:44:13,000
一个环境就是去去去逃离吗

2659
01:44:13,000 --> 01:44:16,000
对我觉得我可能还是会选奥克老苏尔

2660
01:44:18,000 --> 01:44:19,000
ok 就挺有意思对

2661
01:44:19,000 --> 01:44:22,000
但是理想情况还是全主机制吧

2662
01:44:23,000 --> 01:44:26,000
反正我觉得 hollows 还是一个比较

2663
01:44:26,000 --> 01:44:29,000
promising 但是不像对我来说

2664
01:44:29,000 --> 01:44:31,000
不像奥克老苏尔的那样

2665
01:44:31,000 --> 01:44:35,000
会想要在第一出的上市的第一时间就去买的一个东西

2666
01:44:35,000 --> 01:44:37,000
奥克老苏尔应该是明年年初就要上市的

2667
01:44:38,000 --> 01:44:42,000
对刚才你说这个是什么好消息好消息

2668
01:44:42,000 --> 01:44:46,000
你这个是有确定的时间够买的对那个什么

2669
01:44:46,000 --> 01:44:49,000
hollows 还不知道红年马月什么时候有能能上

2670
01:44:49,000 --> 01:44:52,000
至少明年 QE 应该就可以带上

2671
01:44:52,000 --> 01:44:53,000
奥克老苏尔

2672
01:44:54,000 --> 01:44:58,000
你预着 3 月 31 号吧

2673
01:44:58,000 --> 01:44:58,000
你就至少有那个

2674
01:44:58,000 --> 01:45:01,000
ok cross rift 可以可以买了至少对

2675
01:45:01,000 --> 01:45:04,000
然后我觉得现在最大的一个问题就是

2676
01:45:06,000 --> 01:45:09,000
playstation 或 xbox one 之类的东西

2677
01:45:09,000 --> 01:45:12,000
应该尽快提供这个 hollows 的支持

2678
01:45:12,000 --> 01:45:14,000
hollows

2679
01:45:14,000 --> 01:45:19,000
ok cross rift 的支持不然我觉得太多游戏值得被

2680
01:45:20,000 --> 01:45:21,000
移植到虚拟线市里面

2681
01:45:23,000 --> 01:45:24,000
这里就有问题吧

2682
01:45:24,000 --> 01:45:28,000
因为他那个 hollows 他毕竟他只是一个做这个设备厂

2683
01:45:28,000 --> 01:45:31,000
并没有任何游戏的渠道也好

2684
01:45:31,000 --> 01:45:32,000
他只能去找别人合作

2685
01:45:32,000 --> 01:45:34,000
其实这点上我觉得微软那个

2686
01:45:35,000 --> 01:45:36,000
你刚才说是 hollows

2687
01:45:36,000 --> 01:45:38,000
还是 ok cross rift

2688
01:45:39,000 --> 01:45:41,000
ok 对我在这点上微软可能反而有游戏

2689
01:45:41,000 --> 01:45:42,000
因为第一个

2690
01:45:43,000 --> 01:45:48,000
他等于是除了甚至是已经是就全球最大的这个游戏的发现上

2691
01:45:48,000 --> 01:45:49,000
他应该比索尼大吧

2692
01:45:49,000 --> 01:45:50,000
因为有那个 xbox 之后

2693
01:45:50,000 --> 01:45:53,000
嗯微软的游戏比索尼大吗

2694
01:45:54,000 --> 01:45:56,000
我我理解是这样子

2695
01:45:56,000 --> 01:45:56,000
不是吗

2696
01:45:56,000 --> 01:45:57,000
应该不是吧

2697
01:45:59,000 --> 01:45:59,000
那就是如果不是他

2698
01:45:59,000 --> 01:46:02,000
他们也是属于就是可能一二的这样的区别

2699
01:46:02,000 --> 01:46:02,000
对那肯定

2700
01:46:02,000 --> 01:46:05,000
就是我想插播一个小新闻

2701
01:46:05,000 --> 01:46:08,000
微软前一阵子推出了

2702
01:46:10,000 --> 01:46:11,000
帝国时代二

2703
01:46:11,000 --> 01:46:12,000
你有没有听说

2704
01:46:12,000 --> 01:46:14,000
帝国时代二的 hd 版本

2705
01:46:14,000 --> 01:46:18,000
2015 年推出的帝国时代二的 hd 版本

2706
01:46:18,000 --> 01:46:19,000
简直是良心企业

2707
01:46:19,000 --> 01:46:21,000
这玩意已经多少年了

2708
01:46:21,000 --> 01:46:22,000
这这什么情况

2709
01:46:22,000 --> 01:46:22,000
为什么

2710
01:46:22,000 --> 01:46:27,000
就提供了一个可以支持高分辨率

2711
01:46:27,000 --> 01:46:28,000
支持多显示器

2712
01:46:29,000 --> 01:46:34,000
支持 steam 平台两组对战的

2713
01:46:34,000 --> 01:46:35,000
ok

2714
01:46:35,000 --> 01:46:36,000
帝国时代二

2715
01:46:37,000 --> 01:46:38,000
你要不要买一份咱俩对战

2716
01:46:40,000 --> 01:46:40,000
可以啊

2717
01:46:40,000 --> 01:46:41,000
可以啊

2718
01:46:41,000 --> 01:46:42,000
我回头去研究一下怎么一回事

2719
01:46:42,000 --> 01:46:43,000
对

2720
01:46:43,000 --> 01:46:44,000
因为帝国时代应该是

2721
01:46:44,000 --> 01:46:45,000
这块帝国时代二就是我们当时

2722
01:46:45,000 --> 01:46:48,000
那个九九几年玩的最火的那一块

2723
01:46:48,000 --> 01:46:48,000
对啊

2724
01:46:48,000 --> 01:46:50,000
这个东西已经十几年的吧

2725
01:46:50,000 --> 01:46:53,000
就居然今年又出了一个新版本

2726
01:46:53,000 --> 01:46:55,000
我觉得 Microsoft 也算是良心

2727
01:46:55,000 --> 01:46:56,000
几只量

2728
01:46:57,000 --> 01:46:57,000
对

2729
01:46:57,000 --> 01:46:58,000
必须是良心企业

2730
01:46:58,000 --> 01:47:00,000
刚刚说的刚才那样

2731
01:47:00,000 --> 01:47:02,000
就是我我我感觉就是微软在这方面算是

2732
01:47:02,000 --> 01:47:04,000
其实有优势的

2733
01:47:04,000 --> 01:47:05,000
他可以说

2734
01:47:05,000 --> 01:47:06,000
因为你还有主机

2735
01:47:06,000 --> 01:47:09,000
然后他有相应的发行渠道

2736
01:47:09,000 --> 01:47:11,000
然后他会有这个

2737
01:47:11,000 --> 01:47:13,000
这个就开发团队开发这种

2738
01:47:13,000 --> 01:47:16,000
就是就做游戏的人的这种资源

2739
01:47:16,000 --> 01:47:17,000
他会去笼络吗

2740
01:47:17,000 --> 01:47:18,000
他可以说

2741
01:47:18,000 --> 01:47:20,000
我们刚刚开发一款给这个

2742
01:47:20,000 --> 01:47:22,000
HoloLens 玩的

2743
01:47:22,000 --> 01:47:25,000
然后是跑在这个 Xbox 上面的这种游戏

2744
01:47:25,000 --> 01:47:27,000
因为他其实就是要打通这个平台之后

2745
01:47:27,000 --> 01:47:28,000
他不是现在是讲那个

2746
01:47:28,000 --> 01:47:29,000
Windows 的时事

2747
01:47:29,000 --> 01:47:31,000
一个什么 Universal App

2748
01:47:31,000 --> 01:47:32,000
Universal App 什么意思

2749
01:47:32,000 --> 01:47:33,000
就是可以

2750
01:47:33,000 --> 01:47:34,000
可以跨这个

2751
01:47:34,000 --> 01:47:36,000
他能够覆盖到所有的平台

2752
01:47:36,000 --> 01:47:36,000
不说

2753
01:47:36,000 --> 01:47:38,000
他还要追求一个就是说

2754
01:47:40,000 --> 01:47:41,000
简单说就可以互玩吗

2755
01:47:41,000 --> 01:47:43,000
就是我可以去用那个 HoloLens

2756
01:47:43,000 --> 01:47:45,000
去接到这个

2757
01:47:45,000 --> 01:47:47,000
什么可能跟那个 Xbox 配合

2758
01:47:47,000 --> 01:47:48,000
去玩这么一下游戏

2759
01:47:48,000 --> 01:47:49,000
我觉得这个的

2760
01:47:49,000 --> 01:47:50,000
就是如果他真的做成了

2761
01:47:50,000 --> 01:47:52,000
我觉得他这个潜力是要比

2762
01:47:52,000 --> 01:47:55,000
像 Oxcel's Rift 这样去和其他厂商

2763
01:47:55,000 --> 01:47:58,000
去谈合作这种方式

2764
01:47:58,000 --> 01:47:59,000
我觉得是要好多多的

2765
01:47:59,000 --> 01:48:03,000
对如果 HoloLens 可以和 Xbox 整合在一起的话

2766
01:48:03,000 --> 01:48:05,000
真的是前途无聊

2767
01:48:05,000 --> 01:48:07,000
其他基本上所有的主机都会去

2768
01:48:08,000 --> 01:48:09,000
对啊

2769
01:48:09,000 --> 01:48:11,000
就可能会达到那么上次

2770
01:48:11,000 --> 01:48:12,000
当年那个什么 Way

2771
01:48:12,000 --> 01:48:14,000
就一代的 Way 那种风靡的程度

2772
01:48:14,000 --> 01:48:15,000
对

2773
01:48:16,000 --> 01:48:17,000
甚至可能会超过

2774
01:48:17,000 --> 01:48:17,000
对

2775
01:48:17,000 --> 01:48:19,000
来看看价格了

2776
01:48:19,000 --> 01:48:20,000
价格贵了可能也不太行

2777
01:48:20,000 --> 01:48:21,000
但是

2778
01:48:22,000 --> 01:48:25,000
然后我们还要想提及的一件去世

2779
01:48:25,000 --> 01:48:27,000
就是在 J-Style Build 上面

2780
01:48:27,000 --> 01:48:32,000
微软员工穿了那个一件蓝色 T-shirt

2781
01:48:32,000 --> 01:48:35,000
然后蓝色 T-shirt 胸前有

2782
01:48:35,000 --> 01:48:36,000
就是 Windows 图标了

2783
01:48:36,000 --> 01:48:39,000
然后这个图标你细看的话

2784
01:48:39,000 --> 01:48:42,000
它是有很多细小的零和一组成的

2785
01:48:42,000 --> 01:48:45,000
然后我不知道是谁找出来了

2786
01:48:45,000 --> 01:48:50,000
但是我们就目前理解为有号试者

2787
01:48:50,000 --> 01:48:53,000
试图把这个零和一转完成

2788
01:48:53,000 --> 01:48:53,000
Azkima

2789
01:48:53,000 --> 01:48:56,000
然后看看这些是不是有意思

2790
01:48:56,000 --> 01:48:59,000
然后发现真的是有意思

2791
01:48:59,000 --> 01:49:03,000
就是推特用户叫做 KevinGhost

2792
01:49:03,000 --> 01:49:07,000
他把这些零和一都翻译出来了

2793
01:49:07,000 --> 01:49:09,000
然后左上角那一块是

2794
01:49:10,000 --> 01:49:13,000
There are ten types of people in the world

2795
01:49:13,000 --> 01:49:17,000
应该说 There are one zero types of people in the world

2796
01:49:17,000 --> 01:49:18,000
然后

2797
01:49:20,000 --> 01:49:23,000
右上角那一块是 Windows 10

2798
01:49:23,000 --> 01:49:26,000
Because seven eight nine

2799
01:49:26,000 --> 01:49:29,000
就是因为七八九吃了

2800
01:49:29,000 --> 01:49:31,000
然后这个 8 和 8 协音

2801
01:49:31,000 --> 01:49:34,000
所以它写着 Because seven eight nine

2802
01:49:38,000 --> 01:49:43,000
然后左下角是 Congrats on being one of the first

2803
01:49:43,000 --> 01:49:47,000
就是欢迎你成为第一个 Whatever 做什么的人

2804
01:49:47,000 --> 01:49:49,000
解开这个迷的是不是

2805
01:49:49,000 --> 01:49:55,000
然后右下角是 Windows Insiders help us develop the future

2806
01:49:55,000 --> 01:49:56,000
对

2807
01:49:57,000 --> 01:49:59,000
我觉得还挺有意思

2808
01:49:59,000 --> 01:50:00,000
有意思

2809
01:50:00,000 --> 01:50:03,000
有小插曲想去文

2810
01:50:03,000 --> 01:50:04,000
对

2811
01:50:04,000 --> 01:50:06,000
然后我觉得怎么说呢

2812
01:50:07,000 --> 01:50:09,000
我以前是不看 Build

2813
01:50:09,000 --> 01:50:10,000
你看

2814
01:50:10,000 --> 01:50:12,000
我其实是今年第一次

2815
01:50:12,000 --> 01:50:13,000
我也是今年才看

2816
01:50:13,000 --> 01:50:17,000
Bildo 是一个已经连续播了五年的这么一个

2817
01:50:18,000 --> 01:50:18,000
对

2818
01:50:18,000 --> 01:50:19,000
我也是才意思

2819
01:50:19,000 --> 01:50:23,000
原来还有这位人还搞一个类似 WDDC 的东西

2820
01:50:23,000 --> 01:50:24,000
谢谢

2821
01:50:24,000 --> 01:50:24,000
看一下

2822
01:50:24,000 --> 01:50:25,000
对

2823
01:50:25,000 --> 01:50:30,000
然后我去过 WDDC 是买不到票的

2824
01:50:30,000 --> 01:50:33,000
但是我去过的 developer conference 是 Google 的

2825
01:50:34,000 --> 01:50:35,000
Google developer day

2826
01:50:35,000 --> 01:50:36,000
Google I.O 吗

2827
01:50:36,000 --> 01:50:37,000
不是 dewilder day

2828
01:50:37,000 --> 01:50:37,000
不是

2829
01:50:37,000 --> 01:50:39,000
dewilder day 现在也不棒了

2830
01:50:39,000 --> 01:50:42,000
之前在之前零一年

2831
01:50:42,000 --> 01:50:45,000
一零年一年和一二年我应该都去了

2832
01:50:45,000 --> 01:50:52,000
然后我觉得这种开发者社会桑浩已经成为了一种

2833
01:50:53,000 --> 01:50:55,000
fynomenon

2834
01:50:55,000 --> 01:50:58,000
全球开发者乃至于并非开发者的人

2835
01:50:58,000 --> 01:51:03,000
会去关注这样一种本来是一群人

2836
01:51:03,000 --> 01:51:07,000
讨论工具的这样一个 event 还挺有意思的

2837
01:51:07,000 --> 01:51:08,000
特别是 Kino 的

2838
01:51:08,000 --> 01:51:14,000
其实他很多时候就并不单单是面对开发者

2839
01:51:14,000 --> 01:51:14,000
对

2840
01:51:14,000 --> 01:51:16,000
他可能更多的受众

2841
01:51:16,000 --> 01:51:18,000
Kino 的主题演讲的受众

2842
01:51:18,000 --> 01:51:21,000
可能是面向一个所谓的 prodacrp

2843
01:51:21,000 --> 01:51:21,000
general problem

2844
01:51:21,000 --> 01:51:26,000
或者说对技术比较关注的这么一些人

2845
01:51:26,000 --> 01:51:29,000
并不是说这些人一定要是开发者

2846
01:51:29,000 --> 01:51:30,000
没错

2847
01:51:30,000 --> 01:51:38,000
然后我觉得三号也是代表了目前这样一个工业时代

2848
01:51:38,000 --> 01:51:43,000
我忘了是哪一个社会学家说过一段话说

2849
01:51:44,000 --> 01:51:44,000
不行

2850
01:51:44,000 --> 01:51:46,000
我之后一定要查出来到底谁说

2851
01:51:46,000 --> 01:51:47,000
可能不是会学大

2852
01:51:47,000 --> 01:51:51,000
反正有人说过说工业时代以来

2853
01:51:51,000 --> 01:51:54,000
整个工业对人们的影响

2854
01:51:54,000 --> 01:51:57,000
导致了人们对于工业的崇拜

2855
01:51:57,000 --> 01:51:58,000
而这样一种崇拜

2856
01:51:58,000 --> 01:52:02,000
这样一种迷恋这样一种投身其中的热情

2857
01:52:02,000 --> 01:52:05,000
其实远远超越了宗教

2858
01:52:05,000 --> 01:52:10,000
那是与艺术文学所给人们带来影响

2859
01:52:10,000 --> 01:52:11,000
然后

2860
01:52:11,000 --> 01:52:11,000
这算什么

2861
01:52:11,000 --> 01:52:13,000
败物教吗

2862
01:52:13,000 --> 01:52:14,000
它不是败物教

2863
01:52:14,000 --> 01:52:15,000
就是败工业教

2864
01:52:15,000 --> 01:52:16,000
星辰大海

2865
01:52:16,000 --> 01:52:16,000
OK

2866
01:52:16,000 --> 01:52:18,000
工业党星辰大海

2867
01:52:18,000 --> 01:52:24,000
就你会觉得我们现在处于一种这样的

2868
01:52:24,000 --> 01:52:25,000
对于工具的热晨里面

2869
01:52:25,000 --> 01:52:30,000
我们会专门去办这样的 podcast 来讨论工具

2870
01:52:30,000 --> 01:52:33,000
因为我觉得那和国防其实讨论的本身就是

2871
01:52:34,000 --> 01:52:37,000
就是工业产品的一种特别形式

2872
01:52:37,000 --> 01:52:39,000
软件的内部的一些形式

2873
01:52:39,000 --> 01:52:43,000
我觉得其实也是这样一种工业崇拜

2874
01:52:43,000 --> 01:52:43,000
工业崇拜

2875
01:52:43,000 --> 01:52:45,000
但是于工具崇拜的样子

2876
01:52:45,000 --> 01:52:45,000
都提现

2877
01:52:45,000 --> 01:52:48,000
挺有意思

2878
01:52:48,000 --> 01:52:48,000
然后

2879
01:52:50,000 --> 01:52:53,000
我之前还觉得很有意思的一件事情就是

2880
01:52:53,000 --> 01:52:58,000
有没有发现我们很多工具的图标

2881
01:52:58,000 --> 01:53:06,000
其实都是在试图去模拟那些现实生活中

2882
01:53:06,000 --> 01:53:08,000
非常古老的工具

2883
01:53:08,000 --> 01:53:12,000
比如说应该是那个 s code 的图标

2884
01:53:12,000 --> 01:53:14,000
是一个原规是吧

2885
01:53:14,000 --> 01:53:14,000
对

2886
01:53:14,000 --> 01:53:16,000
是一个是一个原规

2887
01:53:16,000 --> 01:53:17,000
但这个原规是

2888
01:53:18,000 --> 01:53:23,000
由一把尺子一支笔和一个什么东西组成的

2889
01:53:23,000 --> 01:53:27,000
但实际上这些东西在开发 app 的时候是根本用不到了

2890
01:53:27,000 --> 01:53:28,000
对吧

2891
01:53:28,000 --> 01:53:31,000
然后那个 dbug 的图标是一个锤子

2892
01:53:31,000 --> 01:53:33,000
还是一个一个班上之类的

2893
01:53:33,000 --> 01:53:36,000
这些东西其实都是在暗示说我这个是个工具

2894
01:53:36,000 --> 01:53:40,000
然后我这个工具可以完成那些实体世界里面工具

2895
01:53:40,000 --> 01:53:42,000
所能完成的事情

2896
01:53:42,000 --> 01:53:45,000
但实际上这些工具跟实体工具是完全不搭搭的

2897
01:53:45,000 --> 01:53:48,000
一个一批存在

2898
01:53:48,000 --> 01:53:55,000
但是我们却不得不借用这些我们能够理解的按语来画这么一个图标

2899
01:53:55,000 --> 01:53:56,000
来表达出这样一个意思

2900
01:53:59,000 --> 01:54:01,000
就还挺有位子的

2901
01:54:01,000 --> 01:54:05,000
这其实这是某一种形式的隐喻吗等于是

2902
01:54:05,000 --> 01:54:06,000
对

2903
01:54:06,000 --> 01:54:12,000
我们在讨论是要去你误化了同时却没有办法

2904
01:54:12,000 --> 01:54:15,000
不得不借助这些非常你误的东西来表达我们的意思

2905
01:54:17,000 --> 01:54:19,000
然后我也不知道

2906
01:54:19,000 --> 01:54:24,000
就是将来虚拟的我们习惯的虚拟现实之后会会非常好奇

2907
01:54:24,000 --> 01:54:26,000
说这个东西到底是什么

2908
01:54:26,000 --> 01:54:27,000
这样一个这样一个锤子

2909
01:54:27,000 --> 01:54:31,000
你有多久没有试过锤子拿在手里是什么感觉

2910
01:54:31,000 --> 01:54:34,000
就甚至很多可能很多做这个 UI 设计的人

2911
01:54:34,000 --> 01:54:37,000
根本就没有摸过那些什么什么齿规啊

2912
01:54:37,000 --> 01:54:39,000
那些什么理科生干的事情

2913
01:54:39,000 --> 01:54:42,000
对或者那个保存图标那个软盘

2914
01:54:43,000 --> 01:54:47,000
现在对啊现在新生一代就是完全没有完全没有东西了

2915
01:54:47,000 --> 01:54:50,000
说说那个笑话怎么了说来说是一个小朋友

2916
01:54:50,000 --> 01:54:54,000
看见爸爸拿的几个什么古董软盘说

2917
01:54:54,000 --> 01:54:56,000
哎你既然有一个保存图标的物理版本

2918
01:54:56,000 --> 01:54:58,000
说好高级哎非常生气

2919
01:55:00,000 --> 01:55:01,000
对对

2920
01:55:01,000 --> 01:55:04,000
但是我觉得这里可能还是有一个点

2921
01:55:05,000 --> 01:55:09,000
在过往很多很多很久时间以前讨论过的

2922
01:55:09,000 --> 01:55:11,000
就是说这个所谓的 skimorphism

2923
01:55:11,000 --> 01:55:13,000
就是什么你无话的问题

2924
01:55:13,000 --> 01:55:15,000
我觉得就你越往后面走

2925
01:55:15,000 --> 01:55:17,000
这种抽象层级越高之后可能

2926
01:55:18,000 --> 01:55:23,000
很多人是比较难以去获得那么所谓的一个 reference

2927
01:55:23,000 --> 01:55:25,000
就是你得有一个怎么参照物对吧

2928
01:55:25,000 --> 01:55:26,000
对

2929
01:55:26,000 --> 01:55:31,000
特别是你那个工具的那个的月这个作用越不直接的情况下

2930
01:55:31,000 --> 01:55:33,000
你可能反而是越需要这种

2931
01:55:33,000 --> 01:55:34,000
有一些什么你真的刚才讲的

2932
01:55:34,000 --> 01:55:37,000
所以隐喻的参考去指点你

2933
01:55:37,000 --> 01:55:40,000
他并不是说一定说能够让你说能够推测出

2934
01:55:40,000 --> 01:55:41,000
他是一个什么样的作用

2935
01:55:41,000 --> 01:55:44,000
比如说我很怀疑说你如果你不知道

2936
01:55:44,000 --> 01:55:46,000
excode 是干什么的工具的一个人

2937
01:55:46,000 --> 01:55:49,000
你能看见他们的齿规能想出来他是干嘛的

2938
01:55:49,000 --> 01:55:51,000
但是我觉得可能是说

2939
01:55:51,000 --> 01:55:52,000
你知道他是干嘛之后

2940
01:55:52,000 --> 01:55:54,000
你再联想到那么一个图标

2941
01:55:54,000 --> 01:55:56,000
或者联想到这么一个隐喻

2942
01:55:56,000 --> 01:55:58,000
就不如用 skimorphism 的方法

2943
01:55:58,000 --> 01:56:01,000
比如说联想到他他代表的一个物理实力

2944
01:56:01,000 --> 01:56:02,000
有什么东西这问题想到

2945
01:56:02,000 --> 01:56:05,000
是你加深这么一个记忆

2946
01:56:05,000 --> 01:56:06,000
加深你们的理解的一个过程

2947
01:56:06,000 --> 01:56:08,000
而不是说真的是说帮助你从一开始

2948
01:56:08,000 --> 01:56:10,000
从 0 到有

2949
01:56:10,000 --> 01:56:12,000
从那个什么

2950
01:56:12,000 --> 01:56:14,000
从一个零基础这种东西去推测出

2951
01:56:14,000 --> 01:56:15,000
他是他猜出他是干嘛

2952
01:56:15,000 --> 01:56:15,000
对

2953
01:56:15,000 --> 01:56:16,000
正好像

2954
01:56:16,000 --> 01:56:18,000
只说是一个是一个 hint

2955
01:56:18,000 --> 01:56:20,000
是一个帮助你记忆的东西

2956
01:56:20,000 --> 01:56:21,000
而不是帮助你理解的东西

2957
01:56:21,000 --> 01:56:24,000
正好像小时候第一次看到那个

2958
01:56:24,000 --> 01:56:29,000
Windows 里面的 DiL 的图标是一张纸

2959
01:56:29,000 --> 01:56:30,000
然后上面有个齿轮

2960
01:56:31,000 --> 01:56:33,000
当时卓了半天说

2961
01:56:33,000 --> 01:56:34,000
这到底是什么东西

2962
01:56:34,000 --> 01:56:35,000
能不能删

2963
01:56:35,000 --> 01:56:37,000
为什么所有的文件看起来都一样

2964
01:56:37,000 --> 01:56:39,000
因为那个时候主要的兴趣是打游戏

2965
01:56:39,000 --> 01:56:41,000
每个游戏的图标都不一样

2966
01:56:41,000 --> 01:56:42,000
可是这些一模一样的图标

2967
01:56:42,000 --> 01:56:44,000
是不是应该都没什么用

2968
01:56:44,000 --> 01:56:45,000
可以删掉吗

2969
01:56:45,000 --> 01:56:48,000
然后到底是干嘛的呢

2970
01:56:48,000 --> 01:56:49,000
对

2971
01:56:49,000 --> 01:56:50,000
但是就是那个时候

2972
01:56:50,000 --> 01:56:53,000
其实反而你是理解了 DiL 的功能重力

2973
01:56:53,000 --> 01:56:55,000
才想就是组建嘛

2974
01:56:55,000 --> 01:56:56,000
吃轮嘛是吧

2975
01:56:56,000 --> 01:56:57,000
这个意思

2976
01:56:57,000 --> 01:56:59,000
我觉得可能是从这个角度去想

2977
01:56:59,000 --> 01:57:04,000
也不是说完全就抨击牛话

2978
01:57:04,000 --> 01:57:05,000
就一无是出了

2979
01:57:05,000 --> 01:57:07,000
或者说完全说扁平话就是一定是好的

2980
01:57:07,000 --> 01:57:09,000
牛话就是老土保守的

2981
01:57:09,000 --> 01:57:11,000
我觉得其实也不一定

2982
01:57:11,000 --> 01:57:11,000
没错

2983
01:57:11,000 --> 01:57:16,000
要比较扯淡的批划

2984
01:57:16,000 --> 01:57:18,000
就是比较辩证的来看这个问题

2985
01:57:20,000 --> 01:57:21,000
辩证法是德国人发明的

2986
01:57:24,000 --> 01:57:25,000
谢谢

2987
01:57:25,000 --> 01:57:27,000
那个资本主义也是德国人发明的

2988
01:57:27,000 --> 01:57:28,000
什么主义

2989
01:57:28,000 --> 01:57:29,000
共产主义

2990
01:57:29,000 --> 01:57:31,000
共产主义也是

2991
01:57:31,000 --> 01:57:33,000
你们德国人发明的

2992
01:57:33,000 --> 01:57:34,000
也不容易

2993
01:57:34,000 --> 01:57:35,000
不客气

2994
01:57:36,000 --> 01:57:37,000
这么说来

2995
01:57:37,000 --> 01:57:40,000
你们德国还出产过很多祸害人类的东西

2996
01:57:41,000 --> 01:57:43,000
共产主义的纳粹都来自德国

2997
01:57:45,000 --> 01:57:47,000
不过在某种程度上

2998
01:57:47,000 --> 01:57:49,000
他们还是蛮有共通点的

2999
01:57:49,000 --> 01:57:51,000
马路杀手汽车也来自于德国

3000
01:57:52,000 --> 01:57:53,000
什么

3001
01:57:53,000 --> 01:57:56,000
马路杀手汽车也来自于德国

3002
01:57:58,000 --> 01:57:59,000
好吧

3003
01:57:59,000 --> 01:58:00,000
OK

3004
01:58:00,000 --> 01:58:01,000
OK

3005
01:58:01,000 --> 01:58:05,000
您刚刚收听到的是 IPN podcast 网络旗下的

3006
01:58:05,000 --> 01:58:07,000
IT 技术主题节目那个共产

3007
01:58:07,000 --> 01:58:11,000
也欢迎你收听 IPN 旗下的其他六档 podcast

3008
01:58:11,000 --> 01:58:14,000
包括 softcore 技术的节目

3009
01:58:14,000 --> 01:58:16,000
IT 公文医疗主题节目

3010
01:58:16,000 --> 01:58:16,000
太一来了

3011
01:58:16,000 --> 01:58:18,000
美食主题节目未知道

3012
01:58:18,000 --> 01:58:20,000
艺术主题节目流行通信

3013
01:58:20,000 --> 01:58:21,000
无主题节目无赐源

3014
01:58:21,000 --> 01:58:23,000
固执主题节目 Hi story

3015
01:58:23,000 --> 01:58:27,000
以及最新加入 IPN 的老拍影像节目

3016
01:58:27,000 --> 01:58:28,000
欢迎

3017
01:58:28,000 --> 01:58:30,000
感谢大家收听这期节目

3018
01:58:30,000 --> 01:58:32,000
也欢迎大家为我们交款

3019
01:58:32,000 --> 01:58:36,000
这款地址是 IPN.ly-cernopanx-donate

3020
01:58:36,000 --> 01:58:37,000
OK

