1
00:00:00,000 --> 00:00:04,000
大家好 欢迎收听第八期的内核恐慌 我是 Ryo

2
00:00:04,000 --> 00:00:07,000
我是无头 新年快乐

3
00:00:07,000 --> 00:00:12,000
所以今天我们节目开始之前还是先做一个 follow-up 吧

4
00:00:12,000 --> 00:00:19,000
对 先是我自拨检查 我又念错了 应该是称募节省

5
00:00:19,000 --> 00:00:22,000
念了唐募节省 我听的时候就觉得好像不太对

6
00:00:22,000 --> 00:00:28,000
然后去查一下果然不是唐募节省 但 too late 就对

7
00:00:28,000 --> 00:00:33,000
然后我也念错了字 而且这个错我觉得有点

8
00:00:33,000 --> 00:00:36,000
不可原谅是吧

9
00:00:36,000 --> 00:00:42,000
也不 原谅总是可以原谅 我总是原谅自己

10
00:00:42,000 --> 00:00:45,000
就是这个粘贴我总是念成粘贴

11
00:00:45,000 --> 00:00:48,000
但我觉得首先粘这个字是个多音字

12
00:00:48,000 --> 00:00:53,000
然后我个人在听到粘贴的时候会觉得有点不舒服

13
00:00:53,000 --> 00:00:57,000
所以我可能在很小的时候就知道我读错了

14
00:00:57,000 --> 00:01:00,000
但是我一直都没有改过

15
00:01:00,000 --> 00:01:02,000
其实这个事情我也一直挺模糊的

16
00:01:02,000 --> 00:01:06,000
后来我还专门去查了一下 有听众指出这个错误之后

17
00:01:06,000 --> 00:01:09,000
我专门就查了一下词典 我说原来是这样的

18
00:01:09,000 --> 00:01:13,000
就是说做动词的时候一定是念粘贴的

19
00:01:13,000 --> 00:01:17,000
然后名词的话就是米字帕这个字

20
00:01:17,000 --> 00:01:21,000
米字帕这个字念粘的时候只是做一个人的信而已

21
00:01:21,000 --> 00:01:22,000
就信是

22
00:01:22,000 --> 00:01:25,000
然后粘性的粘是另外一个

23
00:01:25,000 --> 00:01:27,000
是这个叫鼠字旁 不是米字旁

24
00:01:27,000 --> 00:01:30,000
米字旁的粘在某些词典里面说

25
00:01:30,000 --> 00:01:32,000
它是鼠字旁的粘的一体字

26
00:01:32,000 --> 00:01:33,000
怎么这么乱

27
00:01:33,000 --> 00:01:35,000
我俩说

28
00:01:35,000 --> 00:01:36,000
对

29
00:01:36,000 --> 00:01:40,000
所以我做那颗恐慌以来最大的收获之一就是语文变得好一点

30
00:01:40,000 --> 00:01:45,000
什么话也讲得溜了 是吧

31
00:01:45,000 --> 00:01:50,000
对 这是一个诸位要的收获 加引号的收获

32
00:01:51,000 --> 00:01:53,000
这也是个进步 其实我也

33
00:01:55,000 --> 00:02:01,000
对 其实就我们两个在上一期录音的时候说

34
00:02:01,000 --> 00:02:05,000
如果我们下一期做 feedback 的话

35
00:02:05,000 --> 00:02:10,000
会把前两期的 feedback 综合在一起反馈给大家

36
00:02:10,000 --> 00:02:16,000
但是目前看来不知道是因为过节的缘故还是怎么样

37
00:02:16,000 --> 00:02:20,000
就过去两期好像没有什么反响

38
00:02:20,000 --> 00:02:22,000
不管是在社交网络上还是在邮件里面

39
00:02:22,000 --> 00:02:26,000
当然还是有一些反响

40
00:02:26,000 --> 00:02:27,000
但没有我们想象的那么多

41
00:02:27,000 --> 00:02:29,000
因为我开始预想的时候

42
00:02:29,000 --> 00:02:34,000
至少我们在做那个 Memory Management 那一期

43
00:02:34,000 --> 00:02:37,000
可能犯了很多很低级的错误

44
00:02:37,000 --> 00:02:39,000
但目前看来没有什么人指出

45
00:02:39,000 --> 00:02:41,000
反而是比如说粘贴建成粘贴

46
00:02:41,000 --> 00:02:43,000
粘贴建成粘贴这样低级的语文错误

47
00:02:43,000 --> 00:02:47,000
总是有听众指出

48
00:02:47,000 --> 00:02:50,000
不会可能也是因为播客没借的限制

49
00:02:50,000 --> 00:02:54,000
就是有时候你要挑错

50
00:02:54,000 --> 00:02:55,000
你总得知道你错在哪里

51
00:02:55,000 --> 00:02:58,000
但是有时候你听过之后不一定能记得下来

52
00:02:58,000 --> 00:03:00,000
或者说你当时想听到了

53
00:03:00,000 --> 00:03:03,000
但是可能一下没联系到之前他说了什么东西

54
00:03:03,000 --> 00:03:06,000
所以就好像我们在开车的时候

55
00:03:06,000 --> 00:03:12,000
一起听出战分配或者是流行东西的时候

56
00:03:12,000 --> 00:03:15,000
主 AZ 一方这地方说的好像不太对

57
00:03:15,000 --> 00:03:16,000
然后讨论一下

58
00:03:16,000 --> 00:03:21,000
但是也不会想起来要给主持人一些反馈上

59
00:03:21,000 --> 00:03:24,000
对所以这里就是有这个问题

60
00:03:24,000 --> 00:03:29,000
对大概咱们两个已经被很多人在驾驶舱里面骂了很多次了

61
00:03:29,000 --> 00:03:31,000
但这两个啥逼

62
00:03:31,000 --> 00:03:32,000
对又说错了

63
00:03:32,000 --> 00:03:33,000
这种不计错误都犯

64
00:03:33,000 --> 00:03:36,000
哈哈但咱们两个也都听不到

65
00:03:36,000 --> 00:03:36,000
所以

66
00:03:38,000 --> 00:03:39,000
所以还是应该求反馈

67
00:03:39,000 --> 00:03:43,000
就是不要在那家默默的骂完就爽了

68
00:03:44,000 --> 00:03:45,000
我们还是要多听一下

69
00:03:45,000 --> 00:03:47,000
然后对不仅要当时吗

70
00:03:47,000 --> 00:03:50,000
还要这个事后还得接着来信吗

71
00:03:50,000 --> 00:03:51,000
对

72
00:03:51,000 --> 00:03:55,000
Curse 记录下来发给我们

73
00:03:55,000 --> 00:03:56,000
但我们改不改是另一回事

74
00:03:56,000 --> 00:04:00,000
哈哈那起码有机会可以共同提高吗

75
00:04:00,000 --> 00:04:05,000
就是如果听众朋友也有犯我们类似错误的

76
00:04:05,000 --> 00:04:08,000
就起码我们在检讨自己错误的时候

77
00:04:08,000 --> 00:04:11,000
你们也能够知道自己过往的哪里错了

78
00:04:11,000 --> 00:04:12,000
对

79
00:04:12,000 --> 00:04:15,000
而且我觉得一个 podcast 可能最恐怖的事情

80
00:04:15,000 --> 00:04:17,000
不是被很多很多人骂

81
00:04:17,000 --> 00:04:19,000
而是根本没人去理睬

82
00:04:19,000 --> 00:04:23,000
所以如果一个 podcast 总是得不到回应的话

83
00:04:23,000 --> 00:04:27,000
也许就让制作人觉得做下去有什么意义呢

84
00:04:27,000 --> 00:04:28,000
但如果有很多人骂的话

85
00:04:28,000 --> 00:04:29,000
反而有可能我就说

86
00:04:29,000 --> 00:04:31,000
哎这个还是有才人听的

87
00:04:31,000 --> 00:04:32,000
那我就继续做

88
00:04:32,000 --> 00:04:34,000
哈哈你说是不是

89
00:04:34,000 --> 00:04:35,000
你就不是见吗

90
00:04:35,000 --> 00:04:37,000
嗯对

91
00:04:37,000 --> 00:04:38,000
轮穿不叫轮穿

92
00:04:38,000 --> 00:04:39,000
anyway

93
00:04:39,000 --> 00:04:41,000
嗯

94
00:04:41,000 --> 00:04:45,000
接下来的一条反馈是听众 log.e

95
00:04:45,000 --> 00:04:48,000
发给我的发给我们的邮箱里面的一条

96
00:04:48,000 --> 00:04:50,000
说他说

97
00:04:50,000 --> 00:04:52,000
swift 是没有 gabbage collection

98
00:04:52,000 --> 00:04:53,000
这个是正确的

99
00:04:53,000 --> 00:04:54,000
因为我又回去看一遍那个

100
00:04:54,000 --> 00:04:59,000
因为我之所以会有 swift 有 GC 的印象是

101
00:04:59,000 --> 00:05:01,000
在最开始的那个 swift 的

102
00:05:01,000 --> 00:05:05,000
announcement 的视频里面

103
00:05:05,000 --> 00:05:06,000
当时有一幅图嘛

104
00:05:06,000 --> 00:05:10,000
就写出那个 swift 的各项新特性

105
00:05:10,000 --> 00:05:12,000
然后我记得里面有 gabbage collection

106
00:05:12,000 --> 00:05:16,000
可是我回去翻里面发现其实是没有的

107
00:05:16,000 --> 00:05:18,000
对

108
00:05:18,000 --> 00:05:20,000
然后

109
00:05:20,000 --> 00:05:23,000
其实还是 reference counting 直播

110
00:05:23,000 --> 00:05:24,000
automated

111
00:05:24,000 --> 00:05:26,000
然后也一直没有注意这件事情

112
00:05:26,000 --> 00:05:28,000
对所以这件事情是我们错了

113
00:05:28,000 --> 00:05:32,000
然后这个我不知道为什么 log.e 这位听众用 qq 有相发给我们的

114
00:05:32,000 --> 00:05:35,000
但是我回复的时候说

115
00:05:35,000 --> 00:05:36,000
头地失败

116
00:05:36,000 --> 00:05:39,000
难道 qq 不能收 gmail

117
00:05:39,000 --> 00:05:43,000
你知道最近出了一点点问题吗

118
00:05:43,000 --> 00:05:44,000
听说

119
00:05:44,000 --> 00:05:49,000
但是印象中还是 qq 的 gmail 好像没有什么筹吧

120
00:05:49,000 --> 00:05:49,000
对

121
00:05:49,000 --> 00:05:52,000
因为不是那个 qq 他有相当在海外

122
00:05:52,000 --> 00:05:53,000
或者至少在香港

123
00:05:53,000 --> 00:05:55,000
应该是做过什么

124
00:05:55,000 --> 00:05:59,000
就是就墙外服务器的

125
00:05:59,000 --> 00:06:00,000
应该是没有问题的

126
00:06:00,000 --> 00:06:01,000
不知道你的情况怎么一回事

127
00:06:01,000 --> 00:06:02,000
我问你

128
00:06:02,000 --> 00:06:03,000
这这里反馈了

129
00:06:03,000 --> 00:06:04,000
这里讲了也可以了吗

130
00:06:04,000 --> 00:06:05,000
对

131
00:06:05,000 --> 00:06:09,000
然后有位听众来信说

132
00:06:09,000 --> 00:06:12,000
Ubuntu Mono 也是一个不错的变成字体

133
00:06:12,000 --> 00:06:13,000
而这一点

134
00:06:13,000 --> 00:06:15,000
我觉得我是不能接受的

135
00:06:15,000 --> 00:06:16,000
我也不能接受

136
00:06:16,000 --> 00:06:19,000
Ubuntu 那一套字体真是太丑了

137
00:06:19,000 --> 00:06:20,000
对

138
00:06:20,000 --> 00:06:21,000
不光是 Mono 那一个

139
00:06:21,000 --> 00:06:26,000
他还有一个界面的 UI 的字体叫什么来的

140
00:06:26,000 --> 00:06:28,000
就是 14.0 里面

141
00:06:28,000 --> 00:06:30,000
就是整个他的桌面环境里面

142
00:06:30,000 --> 00:06:34,000
他自己处理看这里

143
00:06:34,000 --> 00:06:37,000
就是那种感觉是所有的转角都是圆形的

144
00:06:37,000 --> 00:06:38,000
对

145
00:06:38,000 --> 00:06:40,000
他就是为了突出人文主义

146
00:06:40,000 --> 00:06:43,000
就是以人为本的哲学

147
00:06:43,000 --> 00:06:45,000
实在是太丑了

148
00:06:45,000 --> 00:06:47,000
白套科技字体

149
00:06:47,000 --> 00:06:48,000
也不是科技字体

150
00:06:48,000 --> 00:06:51,000
反正就是本身是在试图通过字体来反射出

151
00:06:51,000 --> 00:06:56,000
那种圆花的具有人情味的一套系统

152
00:06:56,000 --> 00:06:59,000
但我觉得是失败了

153
00:06:59,000 --> 00:07:01,000
但不是针对这个听众

154
00:07:01,000 --> 00:07:07,000
但我是觉得使用 BuntuMono

155
00:07:07,000 --> 00:07:08,000
并作为变成字体的人

156
00:07:08,000 --> 00:07:11,000
这是没有什么评论

157
00:07:11,000 --> 00:07:12,000
sorry

158
00:07:12,000 --> 00:07:13,000
非常对不起

159
00:07:13,000 --> 00:07:14,000
但比如说

160
00:07:14,000 --> 00:07:17,000
就是我专门又去看了一下

161
00:07:17,000 --> 00:07:23,000
这个字体甚至大写的 i 比小写的 l 要短一点

162
00:07:23,000 --> 00:07:25,000
然后你再

163
00:07:25,000 --> 00:07:28,000
就是他会让你的阅读

164
00:07:28,000 --> 00:07:30,000
让视线变得比较受到干扰

165
00:07:30,000 --> 00:07:31,000
就是

166
00:07:31,000 --> 00:07:32,000
不引起了吗

167
00:07:32,000 --> 00:07:36,000
你会情不自禁去注意到这一款字体的

168
00:07:36,000 --> 00:07:38,000
加括弧的设计上面

169
00:07:38,000 --> 00:07:39,000
对

170
00:07:39,000 --> 00:07:40,000
这个感觉

171
00:07:40,000 --> 00:07:42,000
就是每次感觉

172
00:07:42,000 --> 00:07:43,000
这好像有点太

173
00:07:43,000 --> 00:07:44,000
对

174
00:07:44,000 --> 00:07:46,000
他会非常跳脱出来

175
00:07:46,000 --> 00:07:49,000
会吶喊着让你注意到他的存在

176
00:07:49,000 --> 00:07:50,000
不够撒走的

177
00:07:50,000 --> 00:07:50,000
对

178
00:07:50,000 --> 00:07:56,000
这是非常影响自己质量的一个特性

179
00:07:56,000 --> 00:07:58,000
就其实还是因为丑

180
00:07:58,000 --> 00:07:59,000
而且丑的人那么

181
00:07:59,000 --> 00:08:01,000
那么喧嚣

182
00:08:02,000 --> 00:08:04,000
因为丑话说够了

183
00:08:04,000 --> 00:08:05,000
还好

184
00:08:05,000 --> 00:08:06,000
还好我们这个审美

185
00:08:06,000 --> 00:08:07,000
取向比较一致

186
00:08:07,000 --> 00:08:09,000
不然这里就打起来

187
00:08:09,000 --> 00:08:10,000
对

188
00:08:11,000 --> 00:08:14,000
我觉得可能是 it 我们比较具有可听性的一个特点

189
00:08:14,000 --> 00:08:15,000
就是

190
00:08:15,000 --> 00:08:18,000
你跟 Laurence 的

191
00:08:18,000 --> 00:08:20,000
的观点总是

192
00:08:20,000 --> 00:08:23,000
趋向于不同的

193
00:08:23,000 --> 00:08:25,000
而咱们这边总是说

194
00:08:25,000 --> 00:08:25,000
你说什么

195
00:08:25,000 --> 00:08:26,000
我说对对对

196
00:08:26,000 --> 00:08:27,000
然后我说什么

197
00:08:27,000 --> 00:08:28,000
对对对

198
00:08:28,000 --> 00:08:29,000
对

199
00:08:29,000 --> 00:08:32,000
实际上咱们都是同行

200
00:08:32,000 --> 00:08:33,000
对

201
00:08:33,000 --> 00:08:34,000
实际上咱俩是一个阵影

202
00:08:34,000 --> 00:08:36,000
夏天也请明了另一个阵影了

203
00:08:36,000 --> 00:08:38,000
但我也不知道

204
00:08:38,000 --> 00:08:38,000
但

205
00:08:38,000 --> 00:08:39,000
好吧

206
00:08:39,000 --> 00:08:40,000
对

207
00:08:42,000 --> 00:08:44,000
然后 IT 公众上一期

208
00:08:44,000 --> 00:08:45,000
对我们上一期录音的时候

209
00:08:45,000 --> 00:08:47,000
你告诉我说要听下一期 IT 公众

210
00:08:47,000 --> 00:08:49,000
关于苹果开发者的部分

211
00:08:49,000 --> 00:08:51,000
你们吐槽了苹果

212
00:08:51,000 --> 00:08:53,000
对于开发者是多么的不友好

213
00:08:53,000 --> 00:08:53,000
但

214
00:08:56,000 --> 00:08:57,000
怎么说呢

215
00:08:57,000 --> 00:08:58,000
我觉得

216
00:08:59,000 --> 00:09:00,000
这里没有一点

217
00:09:00,000 --> 00:09:01,000
就是

218
00:09:01,000 --> 00:09:04,000
我强调的是苹果对于开发者好的那部分

219
00:09:04,000 --> 00:09:06,000
是他们的

220
00:09:06,000 --> 00:09:09,000
工程师所呈现出来的对于

221
00:09:09,000 --> 00:09:10,000
开发者的内缅

222
00:09:10,000 --> 00:09:13,000
而你们所强调的则是其审核部门

223
00:09:13,000 --> 00:09:14,000
或者说

224
00:09:14,000 --> 00:09:15,000
他们

225
00:09:17,000 --> 00:09:18,000
管控的这一部分

226
00:09:18,000 --> 00:09:21,000
对于开发者不友好的部分

227
00:09:21,000 --> 00:09:23,000
我觉得两者其实是

228
00:09:23,000 --> 00:09:23,000
当时冲突的

229
00:09:23,000 --> 00:09:24,000
但是在我看来

230
00:09:24,000 --> 00:09:25,000
就是

231
00:09:25,000 --> 00:09:27,000
我比较看重的是工程师的那部分

232
00:09:27,000 --> 00:09:29,000
因为我自己

233
00:09:29,000 --> 00:09:31,000
反正不是一个要给

234
00:09:31,000 --> 00:09:32,000
什么第三方开发

235
00:09:32,000 --> 00:09:35,000
要给最终用户做 app 的人

236
00:09:35,000 --> 00:09:36,000
那我所关注的就是

237
00:09:36,000 --> 00:09:38,000
就只管写的爽啊

238
00:09:38,000 --> 00:09:38,000
对

239
00:09:38,000 --> 00:09:40,000
我所关注的只是他提供了什么样的工具

240
00:09:40,000 --> 00:09:43,000
以及他的生态系统看起来是怎么样的

241
00:09:43,000 --> 00:09:47,000
但至于这趟生态系统能不能被管理层

242
00:09:47,000 --> 00:09:49,000
以一种什么样的形式

243
00:09:49,000 --> 00:09:51,000
转化为

244
00:09:51,000 --> 00:09:53,000
对于最终用户友好的一部分

245
00:09:53,000 --> 00:09:55,000
我觉得这个对我们还说

246
00:09:55,000 --> 00:09:55,000
没有什么抗设

247
00:09:55,000 --> 00:09:56,000
就

248
00:09:57,000 --> 00:10:00,000
而且说实话

249
00:10:00,000 --> 00:10:04,000
当我第一次听说

250
00:10:04,000 --> 00:10:06,000
Pcock 要在那个

251
00:10:06,000 --> 00:10:09,000
today widget 里面做一个计算器的时候

252
00:10:09,000 --> 00:10:10,000
我的第一反应其实是

253
00:10:10,000 --> 00:10:12,000
为什么要做计算器呢

254
00:10:13,000 --> 00:10:15,000
我觉得这个东西不属于 today

255
00:10:15,000 --> 00:10:16,000
你没有我意思吗

256
00:10:16,000 --> 00:10:17,000
嗯哼

257
00:10:17,000 --> 00:10:18,000
就是 today

258
00:10:18,000 --> 00:10:18,000
today 这个

259
00:10:18,000 --> 00:10:20,000
你觉得他那个语境不对

260
00:10:20,000 --> 00:10:21,000
不符合那个东西

261
00:10:21,000 --> 00:10:23,000
这个东西不应该出现有哪

262
00:10:23,000 --> 00:10:27,000
我是三号支持审核者的决定的

263
00:10:27,000 --> 00:10:27,000
嗯哼

264
00:10:29,000 --> 00:10:30,000
嗯

265
00:10:30,000 --> 00:10:30,000
怎么说呢

266
00:10:30,000 --> 00:10:31,000
就是

267
00:10:32,000 --> 00:10:36,000
就是你是就是你是严格按照那个 today view 的那个名字

268
00:10:36,000 --> 00:10:37,000
或者是这个含义来确定

269
00:10:37,000 --> 00:10:40,000
他应该包含什么对东西不应该包含什么东西吗

270
00:10:40,000 --> 00:10:41,000
对

271
00:10:41,000 --> 00:10:43,000
当然你也可以说 today 里面出现了很多东西

272
00:10:43,000 --> 00:10:46,000
其实不一定跟 today 完全相关

273
00:10:46,000 --> 00:10:47,000
就是这条线是很难划定的

274
00:10:47,000 --> 00:10:48,000
这个我承认

275
00:10:48,000 --> 00:10:48,000
比如说

276
00:10:48,000 --> 00:10:52,000
Evernote 或者是或者是 insta paper

277
00:10:52,000 --> 00:10:53,000
在里面出现一个 visit

278
00:10:53,000 --> 00:10:56,000
显示你可以读的东西

279
00:10:56,000 --> 00:10:59,000
或者是你可以直接在 Evernote 里面做一些事情

280
00:10:59,000 --> 00:11:01,000
可能也跟 today 没有什么直接关系

281
00:11:01,000 --> 00:11:04,000
但是 peacock 这个东西在我看来

282
00:11:04,000 --> 00:11:12,000
你在一个本来是应该提供通知和总结的地方做一个计算器

283
00:11:12,000 --> 00:11:13,000
在我看来这是 mysils

284
00:11:14,000 --> 00:11:15,000
哼哼

285
00:11:16,000 --> 00:11:16,000
对

286
00:11:16,000 --> 00:11:18,000
这个这个怎么讲呢

287
00:11:18,000 --> 00:11:24,000
就是说肯定从不刚讲你是一个非常合理的一个说法

288
00:11:24,000 --> 00:11:26,000
就是说你这个不应该出现在那个地方是吧

289
00:11:26,000 --> 00:11:27,000
你就为什么要出现在那个地方

290
00:11:27,000 --> 00:11:30,000
但是我觉得这个选择的自由

291
00:11:30,000 --> 00:11:32,000
不是难道不是应该用户来决定的吗

292
00:11:33,000 --> 00:11:35,000
呃用户是不知道自己要什么

293
00:11:36,000 --> 00:11:37,000
那但问题就是说

294
00:11:37,000 --> 00:11:38,000
这么说

295
00:11:38,000 --> 00:11:39,000
就是好

296
00:11:39,000 --> 00:11:40,000
那我也是个用户

297
00:11:40,000 --> 00:11:43,000
那我觉得这个地方不应该出现 peacock

298
00:11:43,000 --> 00:11:44,000
你怎么说

299
00:11:44,000 --> 00:11:45,000
那你不要装美

300
00:11:45,000 --> 00:11:47,000
就是那个不是默认启动的吗

301
00:11:47,000 --> 00:11:50,000
你要提出天下道里面才可以

302
00:11:50,000 --> 00:11:53,000
在审核者那边不应该替用户做出决定

303
00:11:53,000 --> 00:11:54,000
这个东西不可以在哪出现

304
00:11:54,000 --> 00:11:55,000
对对

305
00:11:55,000 --> 00:11:59,000
就说除非他除非他违反了某一条这个

306
00:11:59,000 --> 00:12:01,000
就是说对你这个东西有明显的损害

307
00:12:01,000 --> 00:12:01,000
对吧

308
00:12:01,000 --> 00:12:04,000
像这种不痛不痒的事情

309
00:12:04,000 --> 00:12:09,000
那我的就是默认的一个选择就是不要限制选择的自由

310
00:12:10,000 --> 00:12:10,000
OK

311
00:12:10,000 --> 00:12:17,000
所以没有人阻止没有人阻止你去往这个 today 那个 view 里面加一个计算器

312
00:12:17,000 --> 00:12:19,000
但是也没有人抢破你往里面加对吧

313
00:12:19,000 --> 00:12:21,000
这完全是一个用户可以选择东西

314
00:12:21,000 --> 00:12:23,000
而且他默认是没有的

315
00:12:24,000 --> 00:12:25,000
OK

316
00:12:25,000 --> 00:12:27,000
所以实际上这些种管理哲学的分歧

317
00:12:27,000 --> 00:12:31,000
就是你觉得你不应该替用户做出太多的决定

318
00:12:31,000 --> 00:12:37,000
而我觉得你应该护照或者我应该替用户做出一些看起来

319
00:12:37,000 --> 00:12:39,000
让我觉得不爽的决定

320
00:12:39,000 --> 00:12:39,000
不

321
00:12:39,000 --> 00:12:41,000
我觉得你可以替用户做决定

322
00:12:41,000 --> 00:12:42,000
比如说你默认

323
00:12:42,000 --> 00:12:47,000
不是你给你给一个再比如说开发者责力里面说明说

324
00:12:47,000 --> 00:12:50,000
today view 应该是主要用来干什么的

325
00:12:50,000 --> 00:12:52,000
然后你不鼓励什么东西

326
00:12:52,000 --> 00:12:53,000
但是你不能说

327
00:12:53,000 --> 00:12:54,000
因为我不鼓励这个

328
00:12:54,000 --> 00:12:56,000
所以我完全禁止你做这个

329
00:12:56,000 --> 00:12:56,000
对吧

330
00:12:56,000 --> 00:12:59,000
因为这个并不是一个

331
00:12:59,000 --> 00:13:00,000
就是有些人就是愿意这样使用的

332
00:13:00,000 --> 00:13:03,000
因为那个方便拉下来之后

333
00:13:03,000 --> 00:13:07,000
他就他并不是把这个 today view 当成一个跟字面一样

334
00:13:07,000 --> 00:13:08,000
讲的是今日相关的事情

335
00:13:08,000 --> 00:13:12,000
而是说作为一个能够比较快捷的

336
00:13:12,000 --> 00:13:15,000
启动一个或者甚至不用启动程序的一个

337
00:13:15,000 --> 00:13:17,000
完成一个功能的方式

338
00:13:17,000 --> 00:13:17,000
对吧

339
00:13:17,000 --> 00:13:19,000
这个也很难很难说

340
00:13:20,000 --> 00:13:20,000
好吧

341
00:13:20,000 --> 00:13:28,000
但在我看来这就好像在 bookmark 上面用一个 javascript 的小程序来

342
00:13:28,000 --> 00:13:29,000
来完成一件事

343
00:13:29,000 --> 00:13:30,000
就叫做 bookmarklet 一样

344
00:13:30,000 --> 00:13:33,000
是一种是一种雾用

345
00:13:33,000 --> 00:13:37,000
但是你不可否

346
00:13:37,000 --> 00:13:38,000
就是说这种情况有些

347
00:13:38,000 --> 00:13:39,000
对

348
00:13:39,000 --> 00:13:39,000
它是方便

349
00:13:39,000 --> 00:13:40,000
但是它错了

350
00:13:40,000 --> 00:13:42,000
power user 他就是要这样用

351
00:13:42,000 --> 00:13:46,000
就是我不反对说你指出一种

352
00:13:46,000 --> 00:13:47,000
他应该做什么

353
00:13:47,000 --> 00:13:50,000
但是你不能说我完全禁止你做什么

354
00:13:50,000 --> 00:13:52,000
你是一个

355
00:13:52,000 --> 00:13:54,000
就你并不是用户自己

356
00:13:54,000 --> 00:13:56,000
用户他可能他就是需要这样需求

357
00:13:56,000 --> 00:13:56,000
对吧

358
00:13:56,000 --> 00:13:57,000
他发现可以这么用

359
00:13:57,000 --> 00:13:58,000
我觉得还挺方便

360
00:13:58,000 --> 00:14:01,000
你为什么要干涉用户的自由

361
00:14:01,000 --> 00:14:02,000
如果照这种逻辑发展下去

362
00:14:02,000 --> 00:14:04,000
那这个不就成了独裁专制吗

363
00:14:04,000 --> 00:14:07,000
那 OS 10 上面我们那些什么定制化的

364
00:14:07,000 --> 00:14:09,000
什么 pro user 的工具

365
00:14:09,000 --> 00:14:10,000
不要搞了

366
00:14:10,000 --> 00:14:11,000
不

367
00:14:11,000 --> 00:14:13,000
但我觉得这个不算都在尊知

368
00:14:13,000 --> 00:14:14,000
这个算

369
00:14:14,000 --> 00:14:18,000
比如说你这实际上是虽然

370
00:14:18,000 --> 00:14:21,000
但是用这个词造句

371
00:14:21,000 --> 00:14:25,000
你是愿意说虽然这样做是错的

372
00:14:25,000 --> 00:14:27,000
但是用户有这样的需求

373
00:14:27,000 --> 00:14:29,000
还是说虽然用户有这个需求

374
00:14:29,000 --> 00:14:30,000
但是这样做是错的

375
00:14:30,000 --> 00:14:31,000
那我可以说

376
00:14:32,000 --> 00:14:35,000
其实就好像怎么说花园里面的草坪

377
00:14:36,000 --> 00:14:41,000
你说虽然用户从 A 点走到 B 点

378
00:14:41,000 --> 00:14:43,000
直接穿过草坪是最方便的

379
00:14:43,000 --> 00:14:46,000
但是我就不要这样修路

380
00:14:46,000 --> 00:14:49,000
因为那样会破坏草坪的整个设计或是美观

381
00:14:49,000 --> 00:14:51,000
你也可以说虽然这样设计

382
00:14:51,000 --> 00:14:52,000
看起来是横平数值的

383
00:14:52,000 --> 00:14:56,000
但是会使得用户从 A 点到 B 点

384
00:14:56,000 --> 00:14:58,000
不得不绕一段弯路

385
00:14:58,000 --> 00:15:00,000
他有可能会去踩草坪

386
00:15:00,000 --> 00:15:01,000
这个跟专制没什么关系

387
00:15:01,000 --> 00:15:02,000
这只是一种

388
00:15:02,000 --> 00:15:08,000
我愿意把我的这套设计者学放在我的软件参酷里面

389
00:15:08,000 --> 00:15:12,000
或者说施加在我的软件参酷上面

390
00:15:12,000 --> 00:15:13,000
不然用不可以别用

391
00:15:13,000 --> 00:15:14,000
不想进入花园可以别进

392
00:15:14,000 --> 00:15:16,000
这个独裁没什么关系

393
00:15:16,000 --> 00:15:19,000
不但问题是说你这样限制了之后

394
00:15:19,000 --> 00:15:21,000
你得到了什么呢

395
00:15:21,000 --> 00:15:23,000
我得到了我的生活

396
00:15:23,000 --> 00:15:24,000
你认为的美观对吧

397
00:15:24,000 --> 00:15:25,000
对

398
00:15:25,000 --> 00:15:27,000
如果我是一个圆灵设计者的话

399
00:15:28,000 --> 00:15:31,000
我希望我的游客人来欣赏圆灵

400
00:15:31,000 --> 00:15:32,000
或者说使用我圆灵

401
00:15:32,000 --> 00:15:33,000
在我圆灵里面玩

402
00:15:33,000 --> 00:15:35,000
我不希望他们踩草坪

403
00:15:35,000 --> 00:15:37,000
这难道不是对的吗

404
00:15:37,000 --> 00:15:38,000
所以我觉得这里要讲

405
00:15:38,000 --> 00:15:41,000
我就是这个以前也有很多引用的故事

406
00:15:41,000 --> 00:15:44,000
说迪斯尼的公园里面怎么修草坪

407
00:15:44,000 --> 00:15:46,000
先把草坪铺上

408
00:15:46,000 --> 00:15:48,000
然后让游客随便进去踩

409
00:15:48,000 --> 00:15:49,000
然后踩过一段时间之后看

410
00:15:49,000 --> 00:15:51,000
哪个地方的脚印多

411
00:15:51,000 --> 00:15:52,000
就当那天挖一条路

412
00:15:52,000 --> 00:15:53,000
修一条路 对

413
00:15:53,000 --> 00:15:54,000
这个我也听过

414
00:15:54,000 --> 00:15:56,000
但这是一种

415
00:15:56,000 --> 00:15:57,000
这是一种

416
00:15:57,000 --> 00:15:57,000
怎么说呢

417
00:15:57,000 --> 00:15:59,000
这是一种没有设计的设计

418
00:15:59,000 --> 00:16:00,000
就是无为而至

419
00:16:00,000 --> 00:16:02,000
就随机应变设计

420
00:16:02,000 --> 00:16:04,000
但我就想要修一条

421
00:16:04,000 --> 00:16:06,000
像那个修一个像

422
00:16:06,000 --> 00:16:08,000
发射赛工一样的

423
00:16:08,000 --> 00:16:09,000
横平数值的草坪

424
00:16:09,000 --> 00:16:11,000
那这套方法就行不通了

425
00:16:11,000 --> 00:16:14,000
所以我说我就是要这么任性了

426
00:16:14,000 --> 00:16:14,000
对

427
00:16:14,000 --> 00:16:15,000
但我也不知道

428
00:16:15,000 --> 00:16:17,000
我觉得苹果是一个比较

429
00:16:17,000 --> 00:16:18,000
控制车的公司

430
00:16:18,000 --> 00:16:21,000
但是但是起码他现在背后

431
00:16:21,000 --> 00:16:23,000
就是他已经取消了两个决定

432
00:16:24,000 --> 00:16:27,000
因为其实你从取舍利益的角度来讲

433
00:16:27,000 --> 00:16:29,000
确实是真的很不值得

434
00:16:29,000 --> 00:16:30,000
因为首先

435
00:16:30,000 --> 00:16:31,000
todayview 这个东西

436
00:16:31,000 --> 00:16:32,000
本来就是一个

437
00:16:32,000 --> 00:16:33,000
生造出来的一个功能

438
00:16:33,000 --> 00:16:36,000
然后真正有没有多少用户需求

439
00:16:36,000 --> 00:16:36,000
我觉得很难讲

440
00:16:36,000 --> 00:16:39,000
而且其实按照我自己的观察来看

441
00:16:39,000 --> 00:16:42,000
我完全意义的按照你刚才讲的

442
00:16:42,000 --> 00:16:44,000
一种字面上的 todayview 的东西

443
00:16:44,000 --> 00:16:46,000
其实我是很少去用他的

444
00:16:46,000 --> 00:16:47,000
但是如果有一个什么小工具

445
00:16:47,000 --> 00:16:48,000
那里

446
00:16:48,000 --> 00:16:50,000
我现在有装一个小工具在里面

447
00:16:50,000 --> 00:16:51,000
但是我还有经常去看他

448
00:16:51,000 --> 00:16:53,000
所以这里面就是说

449
00:16:54,000 --> 00:16:56,000
你可以去生造出来一个东西

450
00:16:56,000 --> 00:16:58,000
但是他是不是真的符合用户的需求

451
00:16:58,000 --> 00:16:59,000
这个是很难说的

452
00:16:59,000 --> 00:17:01,000
所以我觉得面对这种情况的话

453
00:17:01,000 --> 00:17:05,000
还是给开发者和用户一个选择的自由

454
00:17:05,000 --> 00:17:07,000
我觉得这种方式是更好的

455
00:17:08,000 --> 00:17:08,000
对

456
00:17:08,000 --> 00:17:12,000
我觉得其实更加合理的一个选择

457
00:17:12,000 --> 00:17:17,000
是开放从下面往上拉的那一关

458
00:17:17,000 --> 00:17:21,000
叫什么 control sensor 的 Vigid 开发

459
00:17:21,000 --> 00:17:23,000
因为计算器

460
00:17:23,000 --> 00:17:25,000
如果你可以替换默认计算器的话

461
00:17:25,000 --> 00:17:27,000
那我觉得我没有任何话说了

462
00:17:27,000 --> 00:17:30,000
因为那个地方本来就是让你干那个事情用了

463
00:17:30,000 --> 00:17:30,000
对吧

464
00:17:30,000 --> 00:17:33,000
就是他那个其实他有点性质不一样

465
00:17:33,000 --> 00:17:35,000
就是 control sensor 里面对你拉下来

466
00:17:35,000 --> 00:17:37,000
他比如四个快捷启动

467
00:17:38,000 --> 00:17:41,000
他默认的是电头

468
00:17:41,000 --> 00:17:42,000
然后这个什么

469
00:17:42,000 --> 00:17:45,000
是这个闹钟

470
00:17:45,000 --> 00:17:46,000
手边没有 对

471
00:17:46,000 --> 00:17:47,000
秒表

472
00:17:47,000 --> 00:17:48,000
然后是计算器

473
00:17:48,000 --> 00:17:49,000
然后照相机

474
00:17:49,000 --> 00:17:50,000
对

475
00:17:50,000 --> 00:17:53,000
他其实这里就有些奇怪的

476
00:17:53,000 --> 00:17:56,000
就说为什么会把计算器放在那里

477
00:17:58,000 --> 00:18:01,000
因为计算的确是一个需要便捷使用的功能

478
00:18:01,000 --> 00:18:03,000
就美国人总是要算小费

479
00:18:03,000 --> 00:18:05,000
算帐单什么的

480
00:18:05,000 --> 00:18:06,000
那其实这里就出现了一个问题了

481
00:18:06,000 --> 00:18:08,000
这四个四个扭是说

482
00:18:08,000 --> 00:18:10,000
他按照某一个方式

483
00:18:10,000 --> 00:18:11,000
要么是许统计

484
00:18:11,000 --> 00:18:12,000
要么是叛逃带拍出来

485
00:18:12,000 --> 00:18:14,000
这个四个是应该会比较常用的功能

486
00:18:14,000 --> 00:18:15,000
对吧

487
00:18:15,000 --> 00:18:16,000
但是

488
00:18:16,000 --> 00:18:18,000
这真的这四个功能是所有人

489
00:18:18,000 --> 00:18:19,000
都最常用的四个功能吗

490
00:18:19,000 --> 00:18:20,000
这个也很难讲

491
00:18:20,000 --> 00:18:21,000
对不对

492
00:18:21,000 --> 00:18:21,000
对

493
00:18:21,000 --> 00:18:21,000
这就是我说

494
00:18:21,000 --> 00:18:24,000
为什么要应该开放这个东西的

495
00:18:24,000 --> 00:18:26,000
是开发 API

496
00:18:26,000 --> 00:18:29,000
如果我可以自由定义这四个方式的话

497
00:18:29,000 --> 00:18:34,000
TeddyView 不就可以去服务其本该服务的东西吗

498
00:18:34,000 --> 00:18:35,000
所以这里来讲

499
00:18:35,000 --> 00:18:36,000
就是他就有点不一样

500
00:18:36,000 --> 00:18:38,000
就是像 Pcock 那件事情里面

501
00:18:38,000 --> 00:18:43,000
他是等于是在 TeddyView 里面直接做了一个计算器

502
00:18:43,000 --> 00:18:44,000
你甚至都不需要单独启动他

503
00:18:44,000 --> 00:18:47,000
但是如果你用 Control Center 下面那四个扭

504
00:18:47,000 --> 00:18:49,000
你其实还是要启动那个程序

505
00:18:49,000 --> 00:18:50,000
还是来跳一下的吗

506
00:18:50,000 --> 00:18:52,000
就你用完就还得再跳回来

507
00:18:52,000 --> 00:18:53,000
对吧

508
00:18:53,000 --> 00:18:56,000
所以其实你说那下面 Control Center 那四个

509
00:18:56,000 --> 00:18:58,000
快捷方菜单对应的那个 APP

510
00:18:58,000 --> 00:18:59,000
其实应该是那个叫什么

511
00:18:59,000 --> 00:19:00,000
Launch Pro

512
00:19:00,000 --> 00:19:01,000
还是 Launch Center

513
00:19:01,000 --> 00:19:02,000
对

514
00:19:02,000 --> 00:19:06,000
然后他也在 TeddyView 里面做了这种快速启动的一个扭

515
00:19:06,000 --> 00:19:08,000
就是他在里面放了几个那种

516
00:19:08,000 --> 00:19:10,000
你自定义的这个 Icon

517
00:19:10,000 --> 00:19:13,000
然后你拉下来之后就把它几个点进去

518
00:19:14,000 --> 00:19:16,000
但是从这种角度来讲

519
00:19:16,000 --> 00:19:17,000
你说其实你

520
00:19:18,000 --> 00:19:19,000
他苹果应该开放那四个

521
00:19:19,000 --> 00:19:20,000
其实是满足

522
00:19:20,000 --> 00:19:21,000
刚才讲 Launch Pro

523
00:19:21,000 --> 00:19:23,000
还是 Launch Center 那个软件

524
00:19:23,000 --> 00:19:25,000
对 TeddyView 的滥用的问题吗

525
00:19:27,000 --> 00:19:29,000
但是你就是像 PiCoc 这种

526
00:19:29,000 --> 00:19:32,000
他甚至都不需要启动别的地方去

527
00:19:32,000 --> 00:19:33,000
其实还是很难讲的

528
00:19:33,000 --> 00:19:34,000
或者说

529
00:19:35,000 --> 00:19:36,000
就是人们就是需要

530
00:19:36,000 --> 00:19:40,000
因为这个 iOS 是一个单一 APP

531
00:19:40,000 --> 00:19:42,000
就是在 foreground 的这种情况的

532
00:19:42,000 --> 00:19:43,000
这种前提下

533
00:19:43,000 --> 00:19:47,000
你怎么去减少这个 APP 切换的成本

534
00:19:47,000 --> 00:19:49,000
就 TeddyView 可能给出了一个

535
00:19:49,000 --> 00:19:51,000
可以用的地方

536
00:19:51,000 --> 00:19:54,000
但是他对现在的限制还比较死

537
00:19:54,000 --> 00:19:55,000
那你不如再加一个什么

538
00:19:55,000 --> 00:19:56,000
像现在打开 TeddyView

539
00:19:56,000 --> 00:19:58,000
不是上面有三个 tab 吗

540
00:19:58,000 --> 00:19:59,000
TeddyView 和 Nodeification

541
00:19:59,000 --> 00:20:01,000
那你再加一旁边给一个什么

542
00:20:01,000 --> 00:20:02,000
什么 dashboard

543
00:20:02,000 --> 00:20:04,000
因为这个在我身上也有这个概念

544
00:20:05,000 --> 00:20:06,000
你在里面搞了的话

545
00:20:06,000 --> 00:20:08,000
那可以自己加一些随意

546
00:20:08,000 --> 00:20:10,000
就是要求没有那么限制

547
00:20:10,000 --> 00:20:11,000
严格的东西

548
00:20:11,000 --> 00:20:13,000
也其实也是一个不错的思路

549
00:20:13,000 --> 00:20:14,000
我觉得

550
00:20:15,000 --> 00:20:16,000
所以我觉得

551
00:20:16,000 --> 00:20:19,000
归源节底还是一个教主思造

552
00:20:19,000 --> 00:20:21,000
就是苹果这一套

553
00:20:21,000 --> 00:20:24,000
死板管制的哲学没有贯彻下来

554
00:20:24,000 --> 00:20:26,000
就是我觉得你是

555
00:20:26,000 --> 00:20:29,000
其实你是希望苹果变得更像安兆

556
00:20:29,000 --> 00:20:29,000
不是吗

557
00:20:29,000 --> 00:20:32,000
就是更松散一些潮

558
00:20:32,000 --> 00:20:35,000
就是按照让软件按照用户的需求

559
00:20:35,000 --> 00:20:36,000
去生长出来

560
00:20:36,000 --> 00:20:38,000
而不是一上来做一个 ground design

561
00:20:38,000 --> 00:20:39,000
然后

562
00:20:39,000 --> 00:20:42,000
但实际上 iOS 这么多年

563
00:20:42,000 --> 00:20:43,000
这么几年的演化

564
00:20:43,000 --> 00:20:46,000
确实是在这条路上走下去的

565
00:20:46,000 --> 00:20:48,000
很多东西它都不是说

566
00:20:48,000 --> 00:20:50,000
苹果自己拍脑袋想出来的一个方案

567
00:20:50,000 --> 00:20:53,000
而是说看到别的平台用户用得很好

568
00:20:53,000 --> 00:20:55,000
然后把这个东西借鉴过来

569
00:20:55,000 --> 00:20:55,000
我都不说

570
00:20:55,000 --> 00:20:57,000
甚至是什么官方压死同仁

571
00:20:57,000 --> 00:20:59,000
就有些第三方做出来

572
00:20:59,000 --> 00:21:01,000
然后它自己倒用

573
00:21:01,000 --> 00:21:05,000
我相信绝大多数软件都不是这么一个

574
00:21:05,000 --> 00:21:08,000
就是针对最终用户的这种软件

575
00:21:08,000 --> 00:21:10,000
它都不是一个最终设计出来一个东西

576
00:21:10,000 --> 00:21:13,000
而可能更真的是要用户体验出来的

577
00:21:13,000 --> 00:21:14,000
对 但这没有一个户的问题

578
00:21:14,000 --> 00:21:17,000
就是你在多大程度上让用户来使用导向

579
00:21:17,000 --> 00:21:20,000
你在多大程度上要让别人去采草品

580
00:21:20,000 --> 00:21:23,000
还是你完全不去预设

581
00:21:23,000 --> 00:21:25,000
就是你从完全不去预设用户

582
00:21:25,000 --> 00:21:26,000
怎么从一点走到毕点

583
00:21:26,000 --> 00:21:31,000
和精确的设计出从一点走到毕点的每一步

584
00:21:31,000 --> 00:21:34,000
是中间是有很大的回旋空间的

585
00:21:34,000 --> 00:21:35,000
就是一个灰色地带

586
00:21:35,000 --> 00:21:37,000
你对

587
00:21:37,000 --> 00:21:40,000
Anyway 这个问题太爱提供诺了

588
00:21:40,000 --> 00:21:40,000
太 soft call 了

589
00:21:40,000 --> 00:21:41,000
我们不要再讨论

590
00:21:41,000 --> 00:21:44,000
对 不过其实回到你刚才你讲的那一点

591
00:21:44,000 --> 00:21:45,000
就是你刚才也提到说

592
00:21:45,000 --> 00:21:48,000
你觉得最爽的就是苹果的工程团

593
00:21:48,000 --> 00:21:49,000
能带给你那些东西

594
00:21:49,000 --> 00:21:51,000
比如说在去年 WBDC 上

595
00:21:51,000 --> 00:21:53,000
它展示的那些 API 那些底层

596
00:21:53,000 --> 00:21:54,000
技术上你很兴奋 对吧

597
00:21:54,000 --> 00:21:56,000
但是你对这个审核这一块

598
00:21:56,000 --> 00:21:57,000
其实完全不感冒

599
00:21:57,000 --> 00:22:00,000
因为首先第一个你并不是一个

600
00:22:00,000 --> 00:22:01,000
我不是你开发者

601
00:22:01,000 --> 00:22:03,000
对 你不需要去面对这个的

602
00:22:03,000 --> 00:22:04,000
审核不过的后果

603
00:22:04,000 --> 00:22:05,000
但我就这里我觉得

604
00:22:05,000 --> 00:22:08,000
这正是刚才我们调到那堆事情

605
00:22:08,000 --> 00:22:09,000
反映出了一个结果

606
00:22:09,000 --> 00:22:12,000
就是说其实也大家都在

607
00:22:12,000 --> 00:22:14,000
持这么一个观点

608
00:22:14,000 --> 00:22:15,000
就很多人

609
00:22:15,000 --> 00:22:19,000
工程团给了开发者这么很爽的一个选择

610
00:22:19,000 --> 00:22:21,000
很爽的那么技术可以去玩

611
00:22:21,000 --> 00:22:23,000
或者说你选技

612
00:22:23,000 --> 00:22:26,000
但是开发者花时间做出来之后

613
00:22:26,000 --> 00:22:28,000
然后想想对啪给人家聚了

614
00:22:28,000 --> 00:22:30,000
这个就是一个很恶劣的结果

615
00:22:30,000 --> 00:22:33,000
就是怎么左手打右手

616
00:22:33,000 --> 00:22:35,000
对 而且会有寒沉效应

617
00:22:35,000 --> 00:22:36,000
对啊 就会有

618
00:22:36,000 --> 00:22:37,000
懒得做了

619
00:22:38,000 --> 00:22:42,000
这个是会有很负面的影响

620
00:22:42,000 --> 00:22:43,000
包括舆论上也好

621
00:22:43,000 --> 00:22:45,000
包括对开发者心态上的影响也好

622
00:22:45,000 --> 00:22:50,000
然后现在很多批评苹果审核

623
00:22:50,000 --> 00:22:52,000
这一套东西的人就这么

624
00:22:52,000 --> 00:22:54,000
就有这么一种观点

625
00:22:54,000 --> 00:22:56,000
就是在上一期我们代替观众也提到了

626
00:22:56,000 --> 00:22:59,000
就说安卓现在已经越来越好用了

627
00:22:59,000 --> 00:22:59,000
对吧

628
00:22:59,000 --> 00:23:01,000
特别是在 5.0 之后

629
00:23:01,000 --> 00:23:03,000
我看到身边

630
00:23:03,000 --> 00:23:06,000
哪怕是很多之前的 IOS 死忠的用户

631
00:23:06,000 --> 00:23:09,000
都觉得这个确实真的做得不错

632
00:23:09,000 --> 00:23:12,000
然后我们就众所周知的安卓

633
00:23:12,000 --> 00:23:14,000
是一个相对开发的系统

634
00:23:14,000 --> 00:23:17,000
就没有那么多调调光光的限制

635
00:23:17,000 --> 00:23:20,000
那这样的话苹果在这种情况下

636
00:23:20,000 --> 00:23:22,000
这样给自己打脸

637
00:23:22,000 --> 00:23:24,000
其实会造成

638
00:23:24,000 --> 00:23:27,000
这某种程度上是有一个

639
00:23:27,000 --> 00:23:28,000
对开发者的驱动力

640
00:23:28,000 --> 00:23:29,000
让他去说

641
00:23:29,000 --> 00:23:30,000
那我不要在苹果上面开发好了

642
00:23:30,000 --> 00:23:32,000
我去可以安卓开发

643
00:23:32,000 --> 00:23:34,000
不用收这么多气 对吧

644
00:23:34,000 --> 00:23:35,000
对

645
00:23:35,000 --> 00:23:37,000
所以其实对他的生态来讲

646
00:23:37,000 --> 00:23:38,000
其实叫什么

647
00:23:38,000 --> 00:23:40,000
自智悔

648
00:23:40,000 --> 00:23:41,000
基石自为

649
00:23:41,000 --> 00:23:42,000
有什么诚意来的

650
00:23:44,000 --> 00:23:44,000
anyway

651
00:23:44,000 --> 00:23:45,000
还是不要讲的

652
00:23:45,000 --> 00:23:46,000
免得又被挑错了

653
00:23:46,000 --> 00:23:47,000
对

654
00:23:48,000 --> 00:23:49,000
what

655
00:23:49,000 --> 00:23:49,000
好吧

656
00:23:49,000 --> 00:23:50,000
有这么一成语吗

657
00:23:50,000 --> 00:23:53,000
有一个什么

658
00:23:53,000 --> 00:23:54,000
自费无功

659
00:23:54,000 --> 00:23:55,000
我也不知道

660
00:23:55,000 --> 00:23:55,000
之类的

661
00:23:55,000 --> 00:23:56,000
肯定是有一个什么

662
00:23:56,000 --> 00:23:57,000
但我想想不下了

663
00:23:57,000 --> 00:23:58,000
anyway

664
00:23:58,000 --> 00:23:58,000
下一个

665
00:23:58,000 --> 00:23:58,000
不重要

666
00:23:58,000 --> 00:24:01,000
但我觉得至少从我的角度来讲

667
00:24:01,000 --> 00:24:01,000
就是

668
00:24:01,000 --> 00:24:05,000
如果我真的不要去做 IOS 的话

669
00:24:05,000 --> 00:24:07,000
我宁可试一试 Windows Phone

670
00:24:07,000 --> 00:24:07,000
因为

671
00:24:08,000 --> 00:24:09,000
为什么

672
00:24:09,000 --> 00:24:10,000
java 太可惜了

673
00:24:10,000 --> 00:24:14,000
在勾蓝可以完全写安卓之前

674
00:24:14,000 --> 00:24:17,000
我应该是绝对不会去碰安卓的

675
00:24:17,000 --> 00:24:18,000
你也可以试试用 scala 写安卓

676
00:24:20,000 --> 00:24:20,000
closer

677
00:24:20,000 --> 00:24:22,000
这个过程应该是蛮酸酸的

678
00:24:24,000 --> 00:24:24,000
算了吧

679
00:24:25,000 --> 00:24:25,000
好吧

680
00:24:25,000 --> 00:24:26,000
还是算了吧

681
00:24:28,000 --> 00:24:30,000
Windows Phone 你可以用 C Shop 写的

682
00:24:30,000 --> 00:24:30,000
对吧

683
00:24:30,000 --> 00:24:31,000
对 很爽

684
00:24:32,000 --> 00:24:33,000
对

685
00:24:33,000 --> 00:24:34,000
那如果这样的话

686
00:24:34,000 --> 00:24:35,000
其实还可以见你试试

687
00:24:35,000 --> 00:24:36,000
因为据说

688
00:24:37,000 --> 00:24:40,000
我微软也在推 Windows Phone 的应用

689
00:24:40,000 --> 00:24:41,000
他们最缺的就是应用

690
00:24:42,000 --> 00:24:44,000
然后说如果你应用做得好

691
00:24:44,000 --> 00:24:45,000
他还有钱奖励

692
00:24:46,000 --> 00:24:47,000
但 Again

693
00:24:47,000 --> 00:24:51,000
我还是不会去做一些最重要用的东西

694
00:24:51,000 --> 00:24:52,000
就基本上还是会

695
00:24:53,000 --> 00:24:54,000
我究竟做过什么

696
00:24:54,000 --> 00:24:55,000
其实也没有做过什么

697
00:24:55,000 --> 00:24:57,000
就是因为公司的原因

698
00:24:57,000 --> 00:24:58,000
而且我已经换了公司了

699
00:24:58,000 --> 00:25:01,000
可能也不需要再要汤这一汤会睡了

700
00:25:02,000 --> 00:25:05,000
所以你还是打算安安静静的

701
00:25:05,000 --> 00:25:07,000
做一个高轮的企业开发者

702
00:25:08,000 --> 00:25:09,000
很难说

703
00:25:09,000 --> 00:25:09,000
就

704
00:25:10,000 --> 00:25:13,000
反正我正式工作是

705
00:25:13,000 --> 00:25:15,000
应该在这一期播出的时候

706
00:25:15,000 --> 00:25:18,000
我已经上了三天班了

707
00:25:18,000 --> 00:25:18,000
所以

708
00:25:20,000 --> 00:25:21,000
在下一期节目的时候

709
00:25:21,000 --> 00:25:22,000
我们应该可以

710
00:25:23,000 --> 00:25:25,000
对无知的我会对自己

711
00:25:25,000 --> 00:25:26,000
会做什么有一个清晰的了解

712
00:25:26,000 --> 00:25:27,000
以及

713
00:25:28,000 --> 00:25:29,000
那个时候就可以知道自己

714
00:25:29,000 --> 00:25:33,000
是不是还继续要在一栋开发这一块

715
00:25:33,000 --> 00:25:36,000
有什么建设或者发展

716
00:25:36,000 --> 00:25:37,000
好吧

717
00:25:37,000 --> 00:25:38,000
下次再说

718
00:25:43,000 --> 00:25:45,000
然后还有一个听众提到

719
00:25:45,000 --> 00:25:48,000
我们作为两个 Pythonista

720
00:25:48,000 --> 00:25:49,000
等等

721
00:25:49,000 --> 00:25:51,000
Pythonista 的腐术应该是

722
00:25:52,000 --> 00:25:53,000
Pythonisti

723
00:25:55,000 --> 00:25:55,000
对

724
00:25:55,000 --> 00:25:57,000
因为我刚刚从意大利回来

725
00:25:57,000 --> 00:25:58,000
然后

726
00:26:00,000 --> 00:26:00,000
非常冷

727
00:26:00,000 --> 00:26:01,000
然后在

728
00:26:03,000 --> 00:26:06,000
在和朋友们聊天的时候说什么

729
00:26:07,000 --> 00:26:10,000
我们非常注重这个意大利

730
00:26:10,000 --> 00:26:12,000
就是德国人非常注重

731
00:26:12,000 --> 00:26:14,000
在说外来语的时候

732
00:26:14,000 --> 00:26:16,000
一定要按照外来语的正确的语法去

733
00:26:17,000 --> 00:26:18,000
去变革什么的

734
00:26:18,000 --> 00:26:18,000
比如说

735
00:26:18,000 --> 00:26:21,000
Espresso 的腐术不是 Espresso

736
00:26:21,000 --> 00:26:23,000
而是 Espresso

737
00:26:24,000 --> 00:26:26,000
所以你不能说我要两杯 Espresso

738
00:26:26,000 --> 00:26:28,000
而要说我要两杯 Espresso

739
00:26:29,000 --> 00:26:30,000
然后意大利人咬着头说

740
00:26:30,000 --> 00:26:31,000
No no no

741
00:26:31,000 --> 00:26:32,000
在意大利

742
00:26:32,000 --> 00:26:34,000
如果你在意大利之外的地方

743
00:26:34,000 --> 00:26:34,000
这么说

744
00:26:34,000 --> 00:26:37,000
可能是非常正确

745
00:26:37,000 --> 00:26:38,000
高比格的

746
00:26:38,000 --> 00:26:39,000
但在意大利

747
00:26:39,000 --> 00:26:41,000
你说两杯咖啡就行了

748
00:26:41,000 --> 00:26:43,000
因为意大利咖啡默认就是 Espresso

749
00:26:44,000 --> 00:26:44,000
对

750
00:26:44,000 --> 00:26:46,000
然后 Pythonista

751
00:26:46,000 --> 00:26:48,000
因为它是意大利

752
00:26:49,000 --> 00:26:51,000
所以它的腐术应该是 Pythonisti

753
00:26:52,000 --> 00:26:54,000
那我们又给科普了

754
00:26:54,000 --> 00:26:58,000
其实我在知故上经常有处过几次查

755
00:26:58,000 --> 00:26:58,000
的话

756
00:26:58,000 --> 00:26:59,000
就是经常

757
00:26:59,000 --> 00:27:00,000
会有

758
00:27:00,000 --> 00:27:03,000
应该是去年还是前年的时候

759
00:27:03,000 --> 00:27:05,000
有人在知故上去哪里

760
00:27:05,000 --> 00:27:07,000
去招 Python 程序选

761
00:27:07,000 --> 00:27:08,000
他说他自己是

762
00:27:08,000 --> 00:27:10,000
他们要招 Python

763
00:27:10,000 --> 00:27:10,000
Python

764
00:27:10,000 --> 00:27:12,000
我们之前吐槽过

765
00:27:12,000 --> 00:27:13,000
但这没办法

766
00:27:13,000 --> 00:27:14,000
中国的英语教育

767
00:27:14,000 --> 00:27:17,000
就可能跟中国的英语教育也扯遍不过

768
00:27:17,000 --> 00:27:19,000
也就是你没有在文化圈子里面

769
00:27:20,000 --> 00:27:20,000
不

770
00:27:20,000 --> 00:27:22,000
我觉得这个就是很奇怪的地方

771
00:27:22,000 --> 00:27:24,000
如果你真的是要招死

772
00:27:25,000 --> 00:27:26,000
所谓 hardcore

773
00:27:26,000 --> 00:27:27,000
Python 的

774
00:27:27,000 --> 00:27:27,000
对

775
00:27:27,000 --> 00:27:28,000
你至少要开一点文化

776
00:27:28,000 --> 00:27:29,000
是吧

777
00:27:29,000 --> 00:27:29,000
对

778
00:27:29,000 --> 00:27:31,000
你至少要知道这个 jargon 是什么

779
00:27:31,000 --> 00:27:32,000
对吧

780
00:27:32,000 --> 00:27:32,000
对

781
00:27:32,000 --> 00:27:34,000
然后如果你知道 Python 哪

782
00:27:34,000 --> 00:27:35,000
哈哈哈默认已经

783
00:27:35,000 --> 00:27:36,000
Fail

784
00:27:36,000 --> 00:27:37,000
对

785
00:27:37,000 --> 00:27:38,000
就好像 ruby

786
00:27:39,000 --> 00:27:40,000
也 fail

787
00:27:40,000 --> 00:27:41,000
ruby 什么

788
00:27:41,000 --> 00:27:42,000
rubist

789
00:27:42,000 --> 00:27:42,000
对

790
00:27:43,000 --> 00:27:44,000
那个比较好

791
00:27:44,000 --> 00:27:45,000
那个比较比较常见嘛

792
00:27:45,000 --> 00:27:47,000
因为 y 结尾的一般都会怎么变

793
00:27:47,000 --> 00:27:50,000
但是像 Python 这种情况很多人

794
00:27:50,000 --> 00:27:51,000
Python 也是 y 结尾

795
00:27:52,000 --> 00:27:52,000
Oh my god

796
00:27:52,000 --> 00:27:53,000
sorry

797
00:27:54,000 --> 00:27:55,000
我二了没什么

798
00:27:55,000 --> 00:27:57,000
我刚才想到别的地方去

799
00:27:57,000 --> 00:27:58,000
就很容易忘

800
00:27:58,000 --> 00:28:00,000
我们生意就跟我们看中文一样

801
00:28:00,000 --> 00:28:02,000
很能躺木结舌

802
00:28:02,000 --> 00:28:03,000
明明就是 n 结尾

803
00:28:03,000 --> 00:28:04,000
加 en

804
00:28:04,000 --> 00:28:04,000
多简单

805
00:28:06,000 --> 00:28:07,000
ok

806
00:28:07,000 --> 00:28:09,000
还是没文化关键是

807
00:28:09,000 --> 00:28:09,000
对

808
00:28:09,000 --> 00:28:11,000
然后刚才说什么来着

809
00:28:11,000 --> 00:28:11,000
Pythonista

810
00:28:11,000 --> 00:28:14,000
我们作为两个 Pythonisty 居然不知道

811
00:28:14,000 --> 00:28:16,000
居然没有提到 Python 的

812
00:28:16,000 --> 00:28:17,000
Packaging

813
00:28:17,000 --> 00:28:18,000
就是 conda 这一套东西

814
00:28:18,000 --> 00:28:19,000
嗯哼

815
00:28:19,000 --> 00:28:20,000
你有什么说的吗

816
00:28:20,000 --> 00:28:21,000
我是真的不知道

817
00:28:21,000 --> 00:28:22,000
What

818
00:28:22,000 --> 00:28:23,000
哈哈哈

819
00:28:23,000 --> 00:28:23,000
安 nico

820
00:28:23,000 --> 00:28:25,000
你不知道安 nico 的吗

821
00:28:25,000 --> 00:28:28,000
他之前很早就有的吗

822
00:28:28,000 --> 00:28:29,000
还是

823
00:28:29,000 --> 00:28:30,000
他有意证了

824
00:28:30,000 --> 00:28:31,000
就是

825
00:28:31,000 --> 00:28:32,000
就是我之前不是提起来

826
00:28:32,000 --> 00:28:34,000
我在折腾 pyqt 吗

827
00:28:34,000 --> 00:28:34,000
嗯哼

828
00:28:34,000 --> 00:28:35,000
呃

829
00:28:35,000 --> 00:28:36,000
什么 pr

830
00:28:36,000 --> 00:28:38,000
就是 i python qt console

831
00:28:38,000 --> 00:28:40,000
嗯哼

832
00:28:40,000 --> 00:28:41,000
其实部分原因就是因为

833
00:28:41,000 --> 00:28:43,000
我想要在电脑上

834
00:28:43,000 --> 00:28:44,000
不装安 nico

835
00:28:44,000 --> 00:28:47,000
搞出一个 i python 的 qt console

836
00:28:47,000 --> 00:28:48,000
呃

837
00:28:48,000 --> 00:28:49,000
因为安 nico

838
00:28:49,000 --> 00:28:51,000
安 nico 实际上是一个

839
00:28:51,000 --> 00:28:52,000
嗯

840
00:28:52,000 --> 00:28:52,000
怎么说呢

841
00:28:52,000 --> 00:28:54,000
小白

842
00:28:54,000 --> 00:28:56,000
给小白用户们使用的

843
00:28:56,000 --> 00:28:57,000
python distribution

844
00:28:57,000 --> 00:28:58,000
就是

845
00:28:58,000 --> 00:29:00,000
比如说数据分析师啊

846
00:29:00,000 --> 00:29:01,000
或者是

847
00:29:01,000 --> 00:29:02,000
尤其是在呃

848
00:29:02,000 --> 00:29:04,000
就是非非

849
00:29:04,000 --> 00:29:05,000
科学技术人士用

850
00:29:05,000 --> 00:29:06,000
python 的

851
00:29:06,000 --> 00:29:08,000
就是一些必不得不写程序

852
00:29:08,000 --> 00:29:10,000
但是没有系统的学过

853
00:29:10,000 --> 00:29:11,000
怎么写程序的人

854
00:29:11,000 --> 00:29:12,000
比如说什么

855
00:29:12,000 --> 00:29:13,000
呃搞生物的呀

856
00:29:13,000 --> 00:29:15,000
要处理那个细胞图像啊

857
00:29:15,000 --> 00:29:16,000
或者是

858
00:29:16,000 --> 00:29:17,000
呃搞

859
00:29:17,000 --> 00:29:17,000
化学的呀

860
00:29:17,000 --> 00:29:19,000
要做一些化学计算

861
00:29:19,000 --> 00:29:19,000
因为

862
00:29:19,000 --> 00:29:20,000
python 毕竟是一个在

863
00:29:20,000 --> 00:29:23,000
科学计算领域非常非常

864
00:29:23,000 --> 00:29:23,000
呃

865
00:29:23,000 --> 00:29:25,000
受欢迎的主流语言

866
00:29:25,000 --> 00:29:27,000
交水语言吗

867
00:29:27,000 --> 00:29:28,000
对不不只是教学

868
00:29:28,000 --> 00:29:29,000
就是在科研里

869
00:29:29,000 --> 00:29:30,000
交水

870
00:29:30,000 --> 00:29:32,000
glue

871
00:29:32,000 --> 00:29:33,000
这个也不能算交水语言

872
00:29:33,000 --> 00:29:34,000
就是它是

873
00:29:34,000 --> 00:29:35,000
它是这尔八经的

874
00:29:35,000 --> 00:29:36,000
很多科研人员的

875
00:29:36,000 --> 00:29:38,000
第一生产语言啊

876
00:29:38,000 --> 00:29:38,000
这个我知道

877
00:29:38,000 --> 00:29:40,000
就是像那个 numericpy

878
00:29:40,000 --> 00:29:41,000
它也是这种

879
00:29:41,000 --> 00:29:42,000
场景下应用的

880
00:29:42,000 --> 00:29:43,000
出来的结果吗

881
00:29:43,000 --> 00:29:44,000
就是

882
00:29:44,000 --> 00:29:44,000
啊

883
00:29:44,000 --> 00:29:44,000
你意思是

884
00:29:44,000 --> 00:29:46,000
它使用 python 作为

885
00:29:46,000 --> 00:29:47,000
呃

886
00:29:47,000 --> 00:29:48,000
操作界面

887
00:29:48,000 --> 00:29:49,000
而而使用

888
00:29:49,000 --> 00:29:51,000
而让这个开发者

889
00:29:51,000 --> 00:29:52,000
可以用用到数学库

890
00:29:52,000 --> 00:29:53,000
就是

891
00:29:53,000 --> 00:29:54,000
对啊对啊

892
00:29:54,000 --> 00:29:56,000
在这个意义上的交水是吧

893
00:29:56,000 --> 00:29:57,000
呃

894
00:29:57,000 --> 00:29:58,000
其实这么说也不对啊

895
00:29:58,000 --> 00:29:59,000
应该交水应该是年和

896
00:29:59,000 --> 00:30:00,000
各不同组建

897
00:30:00,000 --> 00:30:01,000
不 anyway

898
00:30:01,000 --> 00:30:02,000
就是说

899
00:30:02,000 --> 00:30:03,000
他们用它

900
00:30:03,000 --> 00:30:04,000
因为它这个比较简

901
00:30:04,000 --> 00:30:05,000
这个语法比较简单嘛

902
00:30:05,000 --> 00:30:07,000
然后相对直观一点

903
00:30:07,000 --> 00:30:08,000
然后去

904
00:30:08,000 --> 00:30:08,000
用它一些什么

905
00:30:08,000 --> 00:30:09,000
第三方的库

906
00:30:09,000 --> 00:30:10,000
去做一些科学计算

907
00:30:10,000 --> 00:30:11,000
这些我是有

908
00:30:11,000 --> 00:30:13,000
有所耳闻的

909
00:30:13,000 --> 00:30:13,000
不过我

910
00:30:13,000 --> 00:30:14,000
我这

911
00:30:14,000 --> 00:30:14,000
所以现在反应过来

912
00:30:14,000 --> 00:30:17,000
我怎么没有听说过这个东西了

913
00:30:17,000 --> 00:30:18,000
因为你不是搞这个

914
00:30:18,000 --> 00:30:19,000
不

915
00:30:19,000 --> 00:30:20,000
你看你不像小白用户吗

916
00:30:20,000 --> 00:30:21,000
哈哈哈哈

917
00:30:21,000 --> 00:30:23,000
你刚才说他小白用户用的

918
00:30:23,000 --> 00:30:24,000
那我不是

919
00:30:24,000 --> 00:30:25,000
对

920
00:30:25,000 --> 00:30:26,000
安安扣的

921
00:30:26,000 --> 00:30:28,000
对安安扣的就是大马

922
00:30:28,000 --> 00:30:30,000
或者说比较大的马蛇

923
00:30:30,000 --> 00:30:31,000
就安安扣的

924
00:30:31,000 --> 00:30:32,000
应该没错吧

925
00:30:32,000 --> 00:30:33,000
安安扣的这个应该是马蛇

926
00:30:33,000 --> 00:30:33,000
意思嘛

927
00:30:33,000 --> 00:30:35,000
别不要给人吐槽

928
00:30:35,000 --> 00:30:35,000
对

929
00:30:35,000 --> 00:30:36,000
我不知道啊

930
00:30:36,000 --> 00:30:37,000
但我觉得安安扣的应该

931
00:30:37,000 --> 00:30:38,000
应该没错

932
00:30:38,000 --> 00:30:39,000
可以插下

933
00:30:39,000 --> 00:30:39,000
然后对

934
00:30:39,000 --> 00:30:40,000
然后它就是一个

935
00:30:40,000 --> 00:30:42,000
pizen 的 discribution

936
00:30:42,000 --> 00:30:44,000
他他到底把 pizen

937
00:30:44,000 --> 00:30:46,000
包装在了一杆装包里面

938
00:30:46,000 --> 00:30:47,000
然后如果你是做

939
00:30:47,000 --> 00:30:49,000
你是要学

940
00:30:49,000 --> 00:30:50,000
比如说

941
00:30:50,000 --> 00:30:51,000
图像处理啊

942
00:30:51,000 --> 00:30:52,000
或者是

943
00:30:52,000 --> 00:30:53,000
你要搞什么

944
00:30:53,000 --> 00:30:55,000
化学生物学方面的计算啊

945
00:30:55,000 --> 00:30:56,000
甚至物理学有运用吧

946
00:30:56,000 --> 00:30:57,000
我不知道

947
00:30:57,000 --> 00:30:59,000
然后你可以安装安安扣打

948
00:30:59,000 --> 00:31:00,000
然后

949
00:31:00,000 --> 00:31:02,000
啪一下什么都有

950
00:31:02,000 --> 00:31:03,000
什么 qti

951
00:31:03,000 --> 00:31:04,000
iPizen 的笔记本

952
00:31:04,000 --> 00:31:05,000
啊

953
00:31:05,000 --> 00:31:06,000
console 啊

954
00:31:06,000 --> 00:31:07,000
numpi 啊

955
00:31:07,000 --> 00:31:08,000
全都有

956
00:31:08,000 --> 00:31:12,000
然后安装和

957
00:31:12,000 --> 00:31:15,000
删除这些 pizen 的包也通过

958
00:31:15,000 --> 00:31:17,000
也都是通过一个图形界面的

959
00:31:17,000 --> 00:31:19,000
就有点像 sigwin

960
00:31:19,000 --> 00:31:21,000
大概那种感觉吧

961
00:31:21,000 --> 00:31:21,000
然后

962
00:31:21,000 --> 00:31:24,000
然后所谓 con.就是一个

963
00:31:24,000 --> 00:31:28,000
就是你怎么把自己的 package

964
00:31:28,000 --> 00:31:30,000
打包给安装打用

965
00:31:30,000 --> 00:31:31,000
是这么一套东西

966
00:31:31,000 --> 00:31:32,000
ok

967
00:31:32,000 --> 00:31:32,000
对

968
00:31:32,000 --> 00:31:35,000
它几乎是一个 pizen 的平行宇宙吧

969
00:31:35,000 --> 00:31:37,000
那我们

970
00:31:37,000 --> 00:31:38,000
那所以其实就是说

971
00:31:38,000 --> 00:31:39,000
这种专业开发者

972
00:31:39,000 --> 00:31:42,000
肯定是不会接触到的了

973
00:31:42,000 --> 00:31:42,000
也不一定吧

974
00:31:42,000 --> 00:31:44,000
因为安装打里面的包

975
00:31:44,000 --> 00:31:46,000
其实也都是

976
00:31:46,000 --> 00:31:48,000
几乎所有的常见的 pizen 包

977
00:31:48,000 --> 00:31:49,000
安装 kona 里面都有

978
00:31:49,000 --> 00:31:50,000
我甚至怀疑安装 kona

979
00:31:50,000 --> 00:31:54,000
其实就是把定期会把

980
00:31:54,000 --> 00:31:54,000
抓一点

981
00:31:54,000 --> 00:31:56,000
pizen 上面的包全都包一遍

982
00:31:56,000 --> 00:31:58,000
然后装一个

983
00:31:58,000 --> 00:32:01,000
就是包装成 kona 的格式

984
00:32:01,000 --> 00:32:04,000
然后给科学计判领域的用户用

985
00:32:04,000 --> 00:32:06,000
因为他们根本不关心我们这些

986
00:32:06,000 --> 00:32:07,000
工程师在干嘛

987
00:32:07,000 --> 00:32:08,000
他只是关心

988
00:32:08,000 --> 00:32:11,000
造出来的东西他能用就行了

989
00:32:11,000 --> 00:32:12,000
然后你只要提供一个傻瓜

990
00:32:12,000 --> 00:32:15,000
化了安装界面就就蛮好的

991
00:32:15,000 --> 00:32:16,000
说话

992
00:32:16,000 --> 00:32:18,000
只有一个方法做东西

993
00:32:18,000 --> 00:32:19,000
对

994
00:32:19,000 --> 00:32:20,000
对

995
00:32:20,000 --> 00:32:21,000
那是那种

996
00:32:21,000 --> 00:32:22,000
来

997
00:32:22,000 --> 00:32:25,000
再接着有文化一点

998
00:32:25,000 --> 00:32:28,000
安装打这个中文叫做

999
00:32:28,000 --> 00:32:30,000
森林的森

1000
00:32:30,000 --> 00:32:30,000
然后这个字

1001
00:32:30,000 --> 00:32:31,000
森嘛

1002
00:32:31,000 --> 00:32:33,000
不森染

1003
00:32:33,000 --> 00:32:36,000
虫子旁一个再不要上面那一痕

1004
00:32:36,000 --> 00:32:37,000
就是再见的

1005
00:32:37,000 --> 00:32:39,000
再不要上面那一痕

1006
00:32:39,000 --> 00:32:41,000
然后这个叫做

1007
00:32:41,000 --> 00:32:45,000
产于热带南美洲的大猛蛇

1008
00:32:45,000 --> 00:32:47,000
可用身体脚死猎物

1009
00:32:47,000 --> 00:32:49,000
一称大水猛

1010
00:32:50,000 --> 00:32:51,000
ok

1011
00:32:51,000 --> 00:32:51,000
知道了

1012
00:32:51,000 --> 00:32:53,000
又学了一个词

1013
00:32:53,000 --> 00:32:55,000
我觉得好像之前

1014
00:32:55,000 --> 00:32:59,000
看过一部恐怖片

1015
00:32:59,000 --> 00:33:01,000
后来是不是恐怖片

1016
00:33:01,000 --> 00:33:01,000
金宋面

1017
00:33:01,000 --> 00:33:02,000
shrill

1018
00:33:02,000 --> 00:33:05,000
就是讲有一道非常非常大的猛蛇

1019
00:33:05,000 --> 00:33:07,000
然后怎么搞人的

1020
00:33:07,000 --> 00:33:11,000
是 90 年代的片子吧

1021
00:33:11,000 --> 00:33:14,000
就因为那个时候有什么那个

1022
00:33:14,000 --> 00:33:17,000
蒋月娜的恐怖片很卖作

1023
00:33:17,000 --> 00:33:20,000
然后他们就拍了一个什么

1024
00:33:20,000 --> 00:33:22,000
刚好叫什么狂罔之灾的这么优点

1025
00:33:22,000 --> 00:33:23,000
然后

1026
00:33:23,000 --> 00:33:24,000
我说亲名字

1027
00:33:24,000 --> 00:33:26,000
对

1028
00:33:26,000 --> 00:33:28,000
这一定是台湾或者香港人翻译的

1029
00:33:28,000 --> 00:33:28,000
对

1030
00:33:28,000 --> 00:33:30,000
然后片名应该就喜欢的

1031
00:33:30,000 --> 00:33:31,000
coded

1032
00:33:31,000 --> 00:33:31,000
但 OK

1033
00:33:31,000 --> 00:33:33,000
因为不重要

1034
00:33:33,000 --> 00:33:35,000
还有一个叫做

1035
00:33:35,000 --> 00:33:36,000
nix 的东西

1036
00:33:36,000 --> 00:33:38,000
其实我也没有用过

1037
00:33:38,000 --> 00:33:39,000
有没有提说过准确来说

1038
00:33:39,000 --> 00:33:41,000
nix 不就是 nixOS 的那个吗

1039
00:33:41,000 --> 00:33:42,000
不不

1040
00:33:42,000 --> 00:33:43,000
这个是 pysalonix

1041
00:33:43,000 --> 00:33:45,000
刚刚我们提到另外一个 nix

1042
00:33:45,000 --> 00:33:46,000
是另外一个东西

1043
00:33:46,000 --> 00:33:48,000
这个我也不知道

1044
00:33:48,000 --> 00:33:53,000
我一开始以为它就是 nixOS 的 nix

1045
00:33:53,000 --> 00:33:56,000
所以怎么说呢

1046
00:33:56,000 --> 00:33:57,000
猛人无知啊

1047
00:33:57,000 --> 00:33:58,000
我们

1048
00:33:58,000 --> 00:33:59,000
这不怪咱们吧

1049
00:33:59,000 --> 00:34:00,000
我觉得这个

1050
00:34:00,000 --> 00:34:03,000
它都已经什么四分五裂成这样了

1051
00:34:03,000 --> 00:34:06,000
我也没什么好说的了

1052
00:34:06,000 --> 00:34:07,000
来历史

1053
00:34:07,000 --> 00:34:10,000
对我们反正我是不怎么用了

1054
00:34:10,000 --> 00:34:12,000
随便

1055
00:34:12,000 --> 00:34:14,000
对安德克达我其实我装过一次

1056
00:34:14,000 --> 00:34:15,000
但我不记得为什么了

1057
00:34:15,000 --> 00:34:17,000
我用了大概两三天就把它删了

1058
00:34:17,000 --> 00:34:21,000
好像是有一个我不能理解

1059
00:34:21,000 --> 00:34:24,000
还是不能接受的

1060
00:34:24,000 --> 00:34:25,000
showstop

1061
00:34:25,000 --> 00:34:26,000
但我不确定了

1062
00:34:26,000 --> 00:34:28,000
是因为它装了之后

1063
00:34:28,000 --> 00:34:31,000
systempyson 就坏了

1064
00:34:31,000 --> 00:34:34,000
还是 somehow someway

1065
00:34:34,000 --> 00:34:35,000
有一个东西不能用

1066
00:34:35,000 --> 00:34:37,000
因为我大概三年前用我一次

1067
00:34:37,000 --> 00:34:38,000
它

1068
00:34:38,000 --> 00:34:38,000
对

1069
00:34:38,000 --> 00:34:41,000
具体也不记得了

1070
00:34:42,000 --> 00:34:43,000
可以了

1071
00:34:43,000 --> 00:34:44,000
过吧

1072
00:34:44,000 --> 00:34:45,000
过

1073
00:34:47,000 --> 00:34:47,000
还有什么

1074
00:34:47,000 --> 00:34:48,000
没有什么了

1075
00:34:48,000 --> 00:34:48,000
对

1076
00:34:48,000 --> 00:34:52,000
那另外一个 feedback 就是我给

1077
00:34:52,000 --> 00:34:54,000
vav 写了邮件说

1078
00:34:54,000 --> 00:34:55,000
我们能不能用 still love

1079
00:34:55,000 --> 00:34:56,000
作为我们的 simpsons 啊

1080
00:34:56,000 --> 00:34:57,000
然后

1081
00:34:57,000 --> 00:34:57,000
对

1082
00:34:57,000 --> 00:35:00,000
至少现在都没有人理我

1083
00:35:00,000 --> 00:35:01,000
没有 asdk

1084
00:35:01,000 --> 00:35:03,000
我们会不会有听众在 vav 工作呢

1085
00:35:03,000 --> 00:35:07,000
vav 应该有很多华人程序员呢

1086
00:35:07,000 --> 00:35:09,000
这个应该是他们的法务部门吧

1087
00:35:09,000 --> 00:35:10,000
我觉得

1088
00:35:10,000 --> 00:35:10,000
对

1089
00:35:10,000 --> 00:35:13,000
但如果你能够 somehow someway 接触到

1090
00:35:13,000 --> 00:35:15,000
有内部人最好

1091
00:35:15,000 --> 00:35:15,000
对吧

1092
00:35:15,000 --> 00:35:15,000
对

1093
00:35:15,000 --> 00:35:18,000
有知道我们这个问题

1094
00:35:18,000 --> 00:35:20,000
能够由谁来解决

1095
00:35:20,000 --> 00:35:22,000
能不能帮帮我们的忙

1096
00:35:22,000 --> 00:35:22,000
跪下了

1097
00:35:22,000 --> 00:35:23,000
跪下了

1098
00:35:23,000 --> 00:35:23,000
对

1099
00:35:23,000 --> 00:35:24,000
跪下了

1100
00:35:24,000 --> 00:35:25,000
跪下了

1101
00:35:25,000 --> 00:35:26,000
如果帮不了的话

1102
00:35:26,000 --> 00:35:27,000
I don't blame you

1103
00:35:29,000 --> 00:35:30,000
对

1104
00:35:31,000 --> 00:35:31,000
好吧

1105
00:35:31,000 --> 00:35:32,000
OK

1106
00:35:32,000 --> 00:35:33,000
feedback 结束了

1107
00:35:33,000 --> 00:35:37,000
接下来进入我们的新闻和解

1108
00:35:38,000 --> 00:35:39,000
来吧

1109
00:35:40,000 --> 00:35:40,000
对

1110
00:35:40,000 --> 00:35:41,000
其实上一期

1111
00:35:41,000 --> 00:35:42,000
IT 公众也提到了

1112
00:35:42,000 --> 00:35:45,000
就是 Dr.Dops

1113
00:35:45,000 --> 00:35:47,000
这个在线杂志停刊

1114
00:35:49,000 --> 00:35:50,000
当然他不是停刊

1115
00:35:50,000 --> 00:35:51,000
他只是把

1116
00:35:51,000 --> 00:35:52,000
他只是不再更新的

1117
00:35:52,000 --> 00:35:53,000
整个网站还是在哪

1118
00:35:54,000 --> 00:35:56,000
我当时停刊不就是这个意思吗

1119
00:35:57,000 --> 00:36:00,000
停刊也有可能是整个网站要撤下来

1120
00:36:00,000 --> 00:36:00,000
因为它后来

1121
00:36:00,000 --> 00:36:01,000
不

1122
00:36:01,000 --> 00:36:02,000
你说停刊这个字

1123
00:36:02,000 --> 00:36:04,000
可能是从传统杂志的

1124
00:36:04,000 --> 00:36:05,000
这个来的一个概念

1125
00:36:06,000 --> 00:36:07,000
就停止发行

1126
00:36:07,000 --> 00:36:07,000
对吧

1127
00:36:08,000 --> 00:36:10,000
但是你之前买过的舅导还在给家里

1128
00:36:10,000 --> 00:36:11,000
好吧

1129
00:36:11,000 --> 00:36:14,000
所以其实还是有点

1130
00:36:14,000 --> 00:36:15,000
这个

1131
00:36:15,000 --> 00:36:17,000
这个语音下面其实还蛮好的

1132
00:36:19,000 --> 00:36:19,000
对

1133
00:36:19,000 --> 00:36:22,000
所以如果他真的整个站挂掉了

1134
00:36:22,000 --> 00:36:24,000
或者是整个站停掉了

1135
00:36:24,000 --> 00:36:25,000
应该叫关站是吧

1136
00:36:25,000 --> 00:36:26,000
对

1137
00:36:26,000 --> 00:36:27,000
就停刊就是还蛮好的

1138
00:36:27,000 --> 00:36:28,000
就是 stop publishing

1139
00:36:28,000 --> 00:36:29,000
但是你还可以

1140
00:36:30,000 --> 00:36:32,000
看之前发表过的吗

1141
00:36:32,000 --> 00:36:33,000
嗯

1142
00:36:33,000 --> 00:36:34,000
对

1143
00:36:34,000 --> 00:36:37,000
这个我当时在推特上读到还是挺伤感的

1144
00:36:37,000 --> 00:36:38,000
因为我

1145
00:36:38,000 --> 00:36:41,000
显然不是读着 docdops 长大了

1146
00:36:41,000 --> 00:36:46,000
但至少 docdops 是一个我觉得非常靠谱的

1147
00:36:46,000 --> 00:36:47,000
而且

1148
00:36:47,000 --> 00:36:49,000
而且管是深度还是

1149
00:36:50,000 --> 00:36:54,000
及时度都当人相当满意的一个在线杂志

1150
00:36:54,000 --> 00:36:56,000
所以而且而且就是

1151
00:36:56,000 --> 00:36:57,000
我不知道你有没有印象

1152
00:36:57,000 --> 00:36:59,000
就是有一本书叫

1153
00:37:02,000 --> 00:37:04,000
graphic programming blackbook

1154
00:37:05,000 --> 00:37:06,000
没什么印象

1155
00:37:07,000 --> 00:37:11,000
就是讲图像处理的黑书

1156
00:37:13,000 --> 00:37:13,000
对

1157
00:37:13,000 --> 00:37:17,000
里面讲了非常多的图像处理相关的

1158
00:37:19,000 --> 00:37:19,000
的问题

1159
00:37:19,000 --> 00:37:22,000
或者说教你怎么去写图像处理方面的

1160
00:37:23,000 --> 00:37:24,000
也不是图像处理

1161
00:37:24,000 --> 00:37:26,000
就是就是 graphic programming

1162
00:37:28,000 --> 00:37:28,000
怎么说呢

1163
00:37:29,000 --> 00:37:29,000
对

1164
00:37:29,000 --> 00:37:32,000
就这一方面主题的一系列文章

1165
00:37:32,000 --> 00:37:35,000
它最开始其实就是在 docdops 上面的连载

1166
00:37:35,000 --> 00:37:39,000
然后整个连载最后集结成书放在网上

1167
00:37:39,000 --> 00:37:41,000
直到现在都是非常非常经典里面书

1168
00:37:42,000 --> 00:37:42,000
ok

1169
00:37:43,000 --> 00:37:43,000
对

1170
00:37:43,000 --> 00:37:46,000
所以你对这个还是很有寸有感情的

1171
00:37:46,000 --> 00:37:47,000
对

1172
00:37:47,000 --> 00:37:48,000
而且我也不知道

1173
00:37:48,000 --> 00:37:51,000
就 docdops 就有点像一个

1174
00:37:51,000 --> 00:37:54,000
每次上台网站你就看到那种

1175
00:37:54,000 --> 00:37:56,000
那种 90 年代的奇习铺面而来

1176
00:37:57,000 --> 00:37:59,000
就让人觉得这是我的青兽

1177
00:37:59,000 --> 00:38:00,000
这是我的童年

1178
00:38:00,000 --> 00:38:02,000
嗯

1179
00:38:02,000 --> 00:38:04,000
不过怎么说呢

1180
00:38:04,000 --> 00:38:06,000
就这一类的专业网站

1181
00:38:06,000 --> 00:38:10,000
其实在广告模式情况下还是挺难生存的

1182
00:38:10,000 --> 00:38:11,000
吧

1183
00:38:11,000 --> 00:38:12,000
特别现在就很多这种

1184
00:38:12,000 --> 00:38:14,000
所谓新媒体战

1185
00:38:14,000 --> 00:38:17,000
一直在抢眼球的情况下

1186
00:38:17,000 --> 00:38:17,000
对

1187
00:38:17,000 --> 00:38:18,000
就我虽然

1188
00:38:18,000 --> 00:38:20,000
这件事情虽然让我伤感

1189
00:38:20,000 --> 00:38:22,000
但我从来不觉得它是意外的事情

1190
00:38:22,000 --> 00:38:24,000
或者说它是不可理解的事情

1191
00:38:24,000 --> 00:38:27,000
因为我们每个人都知道这样的内

1192
00:38:27,000 --> 00:38:29,000
这样就是内容

1193
00:38:29,000 --> 00:38:30,000
Havoc 的网站

1194
00:38:31,000 --> 00:38:36,000
是很难在我们现在这样一种经济环境之下生存下去

1195
00:38:36,000 --> 00:38:38,000
因为没有人知道

1196
00:38:39,000 --> 00:38:41,000
怎样用好的内容赚钱

1197
00:38:41,000 --> 00:38:42,000
就没法量化吗

1198
00:38:42,000 --> 00:38:43,000
这个东西

1199
00:38:43,000 --> 00:38:43,000
对

1200
00:38:44,000 --> 00:38:45,000
而不像杂志

1201
00:38:45,000 --> 00:38:47,000
你可以说这本杂志就卖这么多

1202
00:38:47,000 --> 00:38:49,000
然后每一版广告都定价

1203
00:38:49,000 --> 00:38:52,000
这现在是一个非常混乱的时代

1204
00:38:52,000 --> 00:38:53,000
没有人知道应该怎么

1205
00:38:54,000 --> 00:38:55,000
怎么用好的内容

1206
00:38:55,000 --> 00:38:56,000
所以其实还是应该就说

1207
00:38:56,000 --> 00:38:58,000
比如说像那个 doctordops

1208
00:38:58,000 --> 00:39:00,000
可以说恢复我们会原汁

1209
00:39:00,000 --> 00:39:03,000
就说需要订阅才能看这类的

1210
00:39:04,000 --> 00:39:06,000
这样起码它的这个会稳定一点吗

1211
00:39:07,000 --> 00:39:09,000
也许吧

1212
00:39:09,000 --> 00:39:09,000
我也不知道

1213
00:39:09,000 --> 00:39:10,000
但

1214
00:39:11,000 --> 00:39:11,000
不过

1215
00:39:12,000 --> 00:39:13,000
完了就完了

1216
00:39:13,000 --> 00:39:15,000
还是还会有后继者

1217
00:39:17,000 --> 00:39:18,000
而且凭良性说话

1218
00:39:18,000 --> 00:39:22,000
就是我其实也不会去专门关注 doctordops

1219
00:39:22,000 --> 00:39:23,000
最近有什么更新

1220
00:39:23,000 --> 00:39:25,000
甚至我不知道你卖杂志吗

1221
00:39:25,000 --> 00:39:26,000
你卖杂志吗

1222
00:39:26,000 --> 00:39:29,000
传统意义上的电脑杂志你还买

1223
00:39:29,000 --> 00:39:30,000
我很久以前

1224
00:39:30,000 --> 00:39:32,000
还很久很久以前买

1225
00:39:32,000 --> 00:39:33,000
大家都是这样

1226
00:39:33,000 --> 00:39:33,000
对

1227
00:39:33,000 --> 00:39:34,000
自从有了互联网之后

1228
00:39:34,000 --> 00:39:36,000
就再不花钱买杂志了

1229
00:39:37,000 --> 00:39:37,000
对

1230
00:39:37,000 --> 00:39:38,000
我小时候还会觉得

1231
00:39:38,000 --> 00:39:39,000
我小时候有一个朋友

1232
00:39:39,000 --> 00:39:44,000
会把一整年的大软件排在书架里面

1233
00:39:44,000 --> 00:39:46,000
然后一整年的书籍

1234
00:39:46,000 --> 00:39:49,000
就书的那个侧面会连成一个图案

1235
00:39:49,000 --> 00:39:51,000
我当时觉得将来长大了

1236
00:39:51,000 --> 00:39:51,000
我也要干这个

1237
00:39:52,000 --> 00:39:54,000
说来上次我回家的时候

1238
00:39:54,000 --> 00:39:58,000
我亲里家里的我的自己的书架

1239
00:39:58,000 --> 00:40:00,000
把那些都当费纸卖掉了

1240
00:40:00,000 --> 00:40:01,000
真的

1241
00:40:02,000 --> 00:40:04,000
这件事情我应该还是不会干的

1242
00:40:04,000 --> 00:40:06,000
就我小时候存咱的那些杂志

1243
00:40:06,000 --> 00:40:08,000
我觉得还是就让它们压力了

1244
00:40:08,000 --> 00:40:09,000
好

1245
00:40:09,000 --> 00:40:10,000
没有什么用

1246
00:40:13,000 --> 00:40:14,000
为什么一定所有事情都要有用

1247
00:40:14,000 --> 00:40:17,000
我这要先解释一下这个情况

1248
00:40:17,000 --> 00:40:20,000
就是说另外要放其他东西

1249
00:40:20,000 --> 00:40:21,000
然后堆不下了

1250
00:40:21,000 --> 00:40:21,000
然后

1251
00:40:21,000 --> 00:40:22,000
OK

1252
00:40:22,000 --> 00:40:23,000
所以你是有空间需求

1253
00:40:24,000 --> 00:40:26,000
而且我有这个什么截屁

1254
00:40:26,000 --> 00:40:27,000
整理屁

1255
00:40:27,000 --> 00:40:28,000
你有整理屁

1256
00:40:28,000 --> 00:40:29,000
可以

1257
00:40:29,000 --> 00:40:30,000
就是反正你也没什么用

1258
00:40:30,000 --> 00:40:31,000
过期的信息

1259
00:40:31,000 --> 00:40:32,000
然后你也不知道

1260
00:40:32,000 --> 00:40:34,000
股儿商罪你们这种人

1261
00:40:34,000 --> 00:40:36,000
就是你们这种人存在

1262
00:40:36,000 --> 00:40:37,000
使得股儿

1263
00:40:37,000 --> 00:40:39,000
其实是一些文物可以在

1264
00:40:39,000 --> 00:40:42,000
可以不定时的重建天日

1265
00:40:42,000 --> 00:40:43,000
如果每个人都没有整理屁的话

1266
00:40:43,000 --> 00:40:45,000
每个人的隔楼里面都堆满了

1267
00:40:45,000 --> 00:40:46,000
各种各样的

1268
00:40:46,000 --> 00:40:47,000
各种各样的

1269
00:40:47,000 --> 00:40:49,000
在那个时代毫不稀奇

1270
00:40:49,000 --> 00:40:52,000
但是过上二三十年就非常非常

1271
00:40:52,000 --> 00:40:56,000
让人爱不释手的东西

1272
00:40:56,000 --> 00:40:58,000
如果没有整理屁的人

1273
00:40:58,000 --> 00:40:58,000
存存在的话

1274
00:40:58,000 --> 00:41:00,000
这些东西永远不会重建天日

1275
00:41:01,000 --> 00:41:03,000
不过我很难想像

1276
00:41:03,000 --> 00:41:07,000
什么过期杂志能成为什么一个玩物

1277
00:41:07,000 --> 00:41:09,000
过期杂志的确很难成为玩物

1278
00:41:09,000 --> 00:41:09,000
对

1279
00:41:09,000 --> 00:41:10,000
但

1280
00:41:10,000 --> 00:41:12,000
我

1281
00:41:12,000 --> 00:41:13,000
所以起码还是

1282
00:41:13,000 --> 00:41:15,000
就在可以预见的将来

1283
00:41:15,000 --> 00:41:17,000
这个东西都只会成为一个负担

1284
00:41:17,000 --> 00:41:19,000
而不会成为一个有价值的东西

1285
00:41:19,000 --> 00:41:21,000
就可能唯一的价值就是

1286
00:41:21,000 --> 00:41:22,000
缅怀一下什么

1287
00:41:22,000 --> 00:41:24,000
市区的青春

1288
00:41:24,000 --> 00:41:25,000
它有展示的价值

1289
00:41:25,000 --> 00:41:27,000
或者收藏的

1290
00:41:27,000 --> 00:41:27,000
我也不知道

1291
00:41:27,000 --> 00:41:29,000
它又不是四大民族

1292
00:41:29,000 --> 00:41:32,000
它往该展示给谁看

1293
00:41:32,000 --> 00:41:32,000
不

1294
00:41:32,000 --> 00:41:36,000
这就好像一台古旧的计算机一样

1295
00:41:36,000 --> 00:41:37,000
它没有什么使用价值的

1296
00:41:37,000 --> 00:41:38,000
可是它摆在那儿

1297
00:41:38,000 --> 00:41:39,000
就是可以让人觉得

1298
00:41:39,000 --> 00:41:40,000
你很有百分之话

1299
00:41:40,000 --> 00:41:41,000
不是

1300
00:41:43,000 --> 00:41:46,000
你真的觉得大中软件会让你显得

1301
00:41:46,000 --> 00:41:46,000
很有文化

1302
00:41:46,000 --> 00:41:47,000
我这个

1303
00:41:47,000 --> 00:41:47,000
我都在鬼扯了

1304
00:41:47,000 --> 00:41:48,000
我也不知道

1305
00:41:48,000 --> 00:41:49,000
I doubt it

1306
00:41:49,000 --> 00:41:49,000
不

1307
00:41:49,000 --> 00:41:50,000
你有一个什么 PTP 10

1308
00:41:50,000 --> 00:41:52,000
或者 11 你摆在家里可能还行

1309
00:41:52,000 --> 00:41:54,000
但是像这种东西

1310
00:41:54,000 --> 00:41:56,000
Imagine that

1311
00:41:56,000 --> 00:41:57,000
10 年之后你有了一个大宅子

1312
00:41:57,000 --> 00:41:59,000
然后大宅子里面有一个书房

1313
00:41:59,000 --> 00:42:02,000
书房里面摆了一大堆

1314
00:42:02,000 --> 00:42:05,000
过大中软件 90 年代的期刊

1315
00:42:05,000 --> 00:42:07,000
然后每一本都压了像钻石

1316
00:42:07,000 --> 00:42:10,000
压了像大理石样平

1317
00:42:10,000 --> 00:42:11,000
然后摆在书架上

1318
00:42:11,000 --> 00:42:12,000
然后这个时候

1319
00:42:12,000 --> 00:42:14,000
你的童年朋友们来玩的时候

1320
00:42:14,000 --> 00:42:17,000
就是你还收着 90 年的大中软件

1321
00:42:17,000 --> 00:42:18,000
这难道不是一个弹子吗

1322
00:42:18,000 --> 00:42:19,000
难道它不会

1323
00:42:19,000 --> 00:42:21,000
你怎么能说你是个 weirdo

1324
00:42:25,000 --> 00:42:25,000
对吧

1325
00:42:25,000 --> 00:42:26,000
next

1326
00:42:31,000 --> 00:42:32,000
对

1327
00:42:32,000 --> 00:42:33,000
所以我们两个其实还是有分歧的

1328
00:42:33,000 --> 00:42:36,000
我们两个在价值观上还是有分歧的

1329
00:42:36,000 --> 00:42:37,000
对

1330
00:42:37,000 --> 00:42:37,000
对

1331
00:42:37,000 --> 00:42:37,000
对

1332
00:42:37,000 --> 00:42:37,000
对

1333
00:42:38,000 --> 00:42:39,000
太好

1334
00:42:39,000 --> 00:42:40,000
你做了一句

1335
00:42:40,000 --> 00:42:41,000
有得量了

1336
00:42:44,000 --> 00:42:45,000
然后另外一个就是

1337
00:42:45,000 --> 00:42:47,000
我前两期也提到了一个 Anantak

1338
00:42:48,000 --> 00:42:50,000
也是

1339
00:42:50,000 --> 00:42:51,000
他没有停刊了

1340
00:42:51,000 --> 00:42:52,000
但是他被卖给了 Perch

1341
00:42:52,000 --> 00:42:53,000
这个你们也在

1342
00:42:53,000 --> 00:42:54,000
经过里面聊过

1343
00:42:54,000 --> 00:42:56,000
这个我们有什么太多可说的

1344
00:42:56,000 --> 00:42:56,000
他

1345
00:42:56,000 --> 00:42:57,000
我也觉得挺可惜的

1346
00:42:57,000 --> 00:42:58,000
其实事情

1347
00:42:58,000 --> 00:42:59,000
这个没什么

1348
00:42:59,000 --> 00:43:00,000
就这个还好

1349
00:43:00,000 --> 00:43:01,000
他卖给那个

1350
00:43:01,000 --> 00:43:02,000
就是换了东家而已

1351
00:43:02,000 --> 00:43:03,000
但是

1352
00:43:03,000 --> 00:43:05,000
编辑团队还是没编

1353
00:43:05,000 --> 00:43:06,000
然后他还是独立运作的

1354
00:43:06,000 --> 00:43:07,000
这个其实都没什么

1355
00:43:07,000 --> 00:43:09,000
但是其实也反映出一个现象

1356
00:43:09,000 --> 00:43:11,000
就是

1357
00:43:11,000 --> 00:43:12,000
但是他们说的理由之一

1358
00:43:12,000 --> 00:43:16,000
就是这样可以增强他们在广告

1359
00:43:16,000 --> 00:43:17,000
买主那里的一个什么

1360
00:43:17,000 --> 00:43:18,000
就竞争力

1361
00:43:18,000 --> 00:43:20,000
就是因为你大平台

1362
00:43:20,000 --> 00:43:21,000
这个买主更多

1363
00:43:21,000 --> 00:43:21,000
就是这个

1364
00:43:21,000 --> 00:43:23,000
就是潜台词

1365
00:43:23,000 --> 00:43:24,000
就是说

1366
00:43:24,000 --> 00:43:26,000
他作为一个独立的这么一个网站

1367
00:43:26,000 --> 00:43:28,000
剧营的广告收入

1368
00:43:28,000 --> 00:43:29,000
其实要么就是

1369
00:43:29,000 --> 00:43:29,000
要么没有一切

1370
00:43:29,000 --> 00:43:30,000
对

1371
00:43:30,000 --> 00:43:30,000
要么没有

1372
00:43:30,000 --> 00:43:31,000
中秋还是要去

1373
00:43:31,000 --> 00:43:33,000
中秋还是需要更多的钱

1374
00:43:33,000 --> 00:43:33,000
对

1375
00:43:33,000 --> 00:43:35,000
所以其实跟那个 Double Dirt 到面

1376
00:43:35,000 --> 00:43:36,000
是同样的问题

1377
00:43:36,000 --> 00:43:38,000
只是说他的程度没有那么严重

1378
00:43:38,000 --> 00:43:39,000
而且他现在是说

1379
00:43:39,000 --> 00:43:41,000
找到了一个还不错的买家

1380
00:43:41,000 --> 00:43:43,000
然后能够

1381
00:43:43,000 --> 00:43:45,000
就起码我们希望他能够解决问题

1382
00:43:45,000 --> 00:43:47,000
但是可能再过个两三年

1383
00:43:47,000 --> 00:43:49,000
发现卖过去还是不行

1384
00:43:49,000 --> 00:43:50,000
他再怎么样

1385
00:43:50,000 --> 00:43:51,000
我们也不知道

1386
00:43:51,000 --> 00:43:54,000
但是像这种所谓的这种 hardcore 媒体

1387
00:43:54,000 --> 00:43:55,000
包括 B 节目在内

1388
00:43:55,000 --> 00:43:57,000
都有这种用户群体

1389
00:43:57,000 --> 00:44:00,000
读者群体或听众群体比较小众

1390
00:44:00,000 --> 00:44:01,000
然后没有办法

1391
00:44:01,000 --> 00:44:04,000
可以持续盈利化做下去的情况

1392
00:44:04,000 --> 00:44:04,000
对吧

1393
00:44:04,000 --> 00:44:06,000
起码我们现在还是在免费做这件事情

1394
00:44:06,000 --> 00:44:06,000
对不对

1395
00:44:06,000 --> 00:44:08,000
就没有任何收费的

1396
00:44:08,000 --> 00:44:09,000
这个

1397
00:44:09,000 --> 00:44:11,000
尝试吗

1398
00:44:11,000 --> 00:44:12,000
目前还

1399
00:44:12,000 --> 00:44:12,000
征兆

1400
00:44:12,000 --> 00:44:13,000
而且我们收的话

1401
00:44:13,000 --> 00:44:15,000
大概也是就

1402
00:44:15,000 --> 00:44:15,000
都内此

1403
00:44:15,000 --> 00:44:17,000
就直捐捐赠而已

1404
00:44:17,000 --> 00:44:18,000
对

1405
00:44:18,000 --> 00:44:20,000
但是就像他并不可能

1406
00:44:20,000 --> 00:44:21,000
就我们不可能说

1407
00:44:21,000 --> 00:44:23,000
我们来全职做这个东西

1408
00:44:23,000 --> 00:44:23,000
对吧

1409
00:44:23,000 --> 00:44:25,000
可能养活不了我们两个人

1410
00:44:27,000 --> 00:44:27,000
好吧

1411
00:44:27,000 --> 00:44:28,000
OK

1412
00:44:28,000 --> 00:44:30,000
现在开始今天的正题

1413
00:44:31,000 --> 00:44:32,000
其实今天我们准备

1414
00:44:32,000 --> 00:44:35,000
刚才扯了差不多 45 分钟的毒子了

1415
00:44:35,000 --> 00:44:37,000
我们其实今天准备准备

1416
00:44:37,000 --> 00:44:40,000
延续着之前的那个话题

1417
00:44:40,000 --> 00:44:40,000
也不叫话题吧

1418
00:44:40,000 --> 00:44:42,000
那个方向走下去

1419
00:44:42,000 --> 00:44:45,000
今天我们讲一些运萎的一些东西

1420
00:44:45,000 --> 00:44:46,000
对

1421
00:44:46,000 --> 00:44:48,000
上一期我们说的东西

1422
00:44:48,000 --> 00:44:51,000
其实有一点像从

1423
00:44:52,000 --> 00:44:53,000
从小处

1424
00:44:53,000 --> 00:44:56,000
就是从非常小的一个单独的程序运行

1425
00:44:56,000 --> 00:44:58,000
或者说一群程序

1426
00:44:58,000 --> 00:45:01,000
在一个操作系统上运行的时候

1427
00:45:02,000 --> 00:45:04,000
他们的生存周期管理

1428
00:45:04,000 --> 00:45:06,000
然后我们上一期又提到了

1429
00:45:06,000 --> 00:45:06,000
这些东西

1430
00:45:06,000 --> 00:45:10,000
当你把它从你开发的台积资设计上拿出来

1431
00:45:10,000 --> 00:45:12,000
放到其他系统机或者反过来

1432
00:45:12,000 --> 00:45:14,000
你怎么把别人开发好的程序

1433
00:45:14,000 --> 00:45:16,000
放到你的系统上用的时候

1434
00:45:16,000 --> 00:45:19,000
去管理它的生存周期

1435
00:45:20,000 --> 00:45:23,000
而这一期我们想要说的其实就是

1436
00:45:23,000 --> 00:45:24,000
你怎么用它

1437
00:45:25,000 --> 00:45:27,000
你怎样才能在

1438
00:45:28,000 --> 00:45:29,000
就是整

1439
00:45:29,000 --> 00:45:31,000
你一个人作为一个开发者

1440
00:45:31,000 --> 00:45:32,000
管理一堆程序

1441
00:45:32,000 --> 00:45:34,000
和你一个公司

1442
00:45:34,000 --> 00:45:38,000
去管理一堆你开发出来的程序

1443
00:45:38,000 --> 00:45:40,000
跑在一堆服务器上

1444
00:45:40,000 --> 00:45:42,000
其实又是一个更大的层级

1445
00:45:42,000 --> 00:45:45,000
然后我们今天想讨论的其实是这件事

1446
00:45:46,000 --> 00:45:50,000
在之前可能先要引入一个概念

1447
00:45:50,000 --> 00:45:52,000
就是说本身有两个概念

1448
00:45:52,000 --> 00:45:53,000
就是一个叫 Dev

1449
00:45:53,000 --> 00:45:53,000
一个叫 op

1450
00:45:53,000 --> 00:45:56,000
就是开发者和运为者这两种身份

1451
00:45:56,000 --> 00:45:59,000
我们传统上应该是分离的

1452
00:45:59,000 --> 00:46:01,000
大部分的传统企业里面都是这样子

1453
00:46:01,000 --> 00:46:01,000
对

1454
00:46:01,000 --> 00:46:03,000
所谓 Dev 就是 developer

1455
00:46:03,000 --> 00:46:04,000
开发者

1456
00:46:04,000 --> 00:46:06,000
然后开发者的传统意义上的

1457
00:46:08,000 --> 00:46:09,000
应该包括哪些呢

1458
00:46:09,000 --> 00:46:11,000
我觉得可以包括比如说

1459
00:46:11,000 --> 00:46:11,000
programmers

1460
00:46:11,000 --> 00:46:12,000
肯定吧

1461
00:46:12,000 --> 00:46:13,000
他们是 developer

1462
00:46:13,000 --> 00:46:14,000
然后 testers

1463
00:46:15,000 --> 00:46:15,000
对

1464
00:46:15,000 --> 00:46:18,000
testers 应该其实也是开发团队的一部分

1465
00:46:18,000 --> 00:46:18,000
对

1466
00:46:18,000 --> 00:46:21,000
它是最保证这个产品指摊的最后一个环节

1467
00:46:21,000 --> 00:46:22,000
对

1468
00:46:22,000 --> 00:46:22,000
然后

1469
00:46:22,000 --> 00:46:23,000
然后

1470
00:46:23,000 --> 00:46:24,000
我也在看

1471
00:46:24,000 --> 00:46:25,000
QA 是最后一个环节

1472
00:46:25,000 --> 00:46:28,000
我还是 QA 和 testers 一般是混在一起的

1473
00:46:29,000 --> 00:46:32,000
就他开发者自己有一套标准化的测试

1474
00:46:32,000 --> 00:46:32,000
一般是

1475
00:46:32,000 --> 00:46:34,000
然后 QA 是在

1476
00:46:34,000 --> 00:46:36,000
就是这么白河和黑河

1477
00:46:36,000 --> 00:46:36,000
对吧

1478
00:46:36,000 --> 00:46:37,000
对

1479
00:46:37,000 --> 00:46:39,000
就是要一个黑河测试

1480
00:46:39,000 --> 00:46:43,000
就 QA 环节要保证最终的结果

1481
00:46:43,000 --> 00:46:45,000
然后就是产品出来

1482
00:46:45,000 --> 00:46:47,000
然后运为的人把它

1483
00:46:47,000 --> 00:46:48,000
负责

1484
00:46:48,000 --> 00:46:48,000
take over

1485
00:46:48,000 --> 00:46:49,000
operator

1486
00:46:49,000 --> 00:46:51,000
把它弄到机器上去跑

1487
00:46:51,000 --> 00:46:54,000
然后保证它能够连续稳定的工作下去

1488
00:46:54,000 --> 00:46:55,000
对

1489
00:46:55,000 --> 00:46:56,000
对

1490
00:46:56,000 --> 00:46:58,000
然后这一部分就是 operator

1491
00:46:58,000 --> 00:46:59,000
是 op

1492
00:46:59,000 --> 00:47:02,000
应该是 operations 还是 operators

1493
00:47:02,000 --> 00:47:03,000
如果 developer

1494
00:47:03,000 --> 00:47:04,000
然后 developer operator

1495
00:47:04,000 --> 00:47:05,000
OK

1496
00:47:05,000 --> 00:47:06,000
operator 包括哪些人

1497
00:47:06,000 --> 00:47:06,000
包括

1498
00:47:07,000 --> 00:47:10,000
首先那些管网络的肯定是 operator

1499
00:47:10,000 --> 00:47:11,000
网管

1500
00:47:11,000 --> 00:47:13,000
网络管理员有算是

1501
00:47:13,000 --> 00:47:19,000
system admin 其实是更 proper 的一个头衔

1502
00:47:19,000 --> 00:47:20,000
对

1503
00:47:20,000 --> 00:47:21,000
system administrator

1504
00:47:21,000 --> 00:47:21,000
系统管理

1505
00:47:21,000 --> 00:47:24,000
然后还有 databass administrator

1506
00:47:24,000 --> 00:47:26,000
应该也算是 ops 的一部分

1507
00:47:26,000 --> 00:47:28,000
DBA

1508
00:47:28,000 --> 00:47:29,000
DBA 其实借量的之间

1509
00:47:29,000 --> 00:47:33,000
就只要是在一个是在开发时的公众

1510
00:47:33,000 --> 00:47:34,000
一个是在运行时的公众

1511
00:47:35,000 --> 00:47:37,000
可以这么理解了

1512
00:47:37,000 --> 00:47:40,000
但至少在我接触的几个公司里面

1513
00:47:40,000 --> 00:47:43,000
DBA 其实多半还要参与到

1514
00:47:43,000 --> 00:47:45,000
architecture 的决策里面

1515
00:47:45,000 --> 00:47:47,000
就是开发之前的工作对吧

1516
00:47:47,000 --> 00:47:48,000
对

1517
00:47:48,000 --> 00:47:48,000
对

1518
00:47:48,000 --> 00:47:52,000
所以当然这两者之间的分页也不是非常明确

1519
00:47:52,000 --> 00:47:55,000
但我们在这里就把 DBA 画到 ops 里面

1520
00:47:55,000 --> 00:47:57,000
对

1521
00:47:57,000 --> 00:48:02,000
然后他们两者之间的兴趣其实有冲突的

1522
00:48:02,000 --> 00:48:03,000
对

1523
00:48:04,000 --> 00:48:06,000
像我们上次提到的那个知乎贴子里面说

1524
00:48:06,000 --> 00:48:07,000
这屁股决定脑袋

1525
00:48:07,000 --> 00:48:09,000
对

1526
00:48:09,000 --> 00:48:13,000
开发者的屁股做在他们要做新的东西

1527
00:48:13,000 --> 00:48:16,000
他们要改变世界这一部分

1528
00:48:16,000 --> 00:48:18,000
他们最新最好

1529
00:48:18,000 --> 00:48:19,000
最新的

1530
00:48:19,000 --> 00:48:21,000
然后最炫的技术

1531
00:48:21,000 --> 00:48:21,000
对

1532
00:48:21,000 --> 00:48:23,000
所以他们是奥巴马派的

1533
00:48:23,000 --> 00:48:25,000
We want change

1534
00:48:25,000 --> 00:48:28,000
但是 ops 这一派就比较保守

1535
00:48:28,000 --> 00:48:30,000
他们说我们要叫什么

1536
00:48:30,000 --> 00:48:32,000
stability 对

1537
00:48:32,000 --> 00:48:34,000
reliability

1538
00:48:34,000 --> 00:48:36,000
就是你跑什么东西千万不要坏

1539
00:48:36,000 --> 00:48:38,000
坏了我们就有了麻烦

1540
00:48:38,000 --> 00:48:39,000
麻烦

1541
00:48:39,000 --> 00:48:42,000
就要被什么半夜三点被一个扩起来

1542
00:48:42,000 --> 00:48:45,000
然后去看服务器当机了怎么办

1543
00:48:45,000 --> 00:48:45,000
对

1544
00:48:45,000 --> 00:48:46,000
没错

1545
00:48:46,000 --> 00:48:49,000
而 developer 担心的则是

1546
00:48:49,000 --> 00:48:51,000
哎呀不开发新的东西我就没饭吃了

1547
00:48:51,000 --> 00:48:54,000
哈哈哈

1548
00:48:54,000 --> 00:48:55,000
嗯

1549
00:48:55,000 --> 00:48:57,000
所以传统上在这些企业里面

1550
00:48:57,000 --> 00:48:58,000
现在这两个工作是

1551
00:48:58,000 --> 00:48:59,000
工作是完全分离的

1552
00:48:59,000 --> 00:49:02,000
他们有不同的职责

1553
00:49:02,000 --> 00:49:03,000
他们有不同的这个测重点

1554
00:49:03,000 --> 00:49:05,000
然后刚才讲也是因为屁股决定脑袋

1555
00:49:05,000 --> 00:49:08,000
所以他们对这个工具的选择也好

1556
00:49:08,000 --> 00:49:11,000
对这个这个这个包括操作性能的选择也好

1557
00:49:11,000 --> 00:49:13,000
他们都是有不同的取

1558
00:49:13,000 --> 00:49:14,000
这个取向的

1559
00:49:14,000 --> 00:49:15,000
哈对

1560
00:49:15,000 --> 00:49:17,000
而且他们会不停的互相 play

1561
00:49:17,000 --> 00:49:18,000
哈哈哈

1562
00:49:18,000 --> 00:49:19,000
出了问题

1563
00:49:19,000 --> 00:49:21,000
然后开发那傻逼写的什么破案呀

1564
00:49:21,000 --> 00:49:22,000
一开就死机

1565
00:49:22,000 --> 00:49:24,000
我说你那帮傻逼

1566
00:49:24,000 --> 00:49:26,000
我写的这东西好好的

1567
00:49:26,000 --> 00:49:27,000
就是跑不起来

1568
00:49:27,000 --> 00:49:28,000
纯不纯

1569
00:49:28,000 --> 00:49:29,000
就是

1570
00:49:29,000 --> 00:49:30,000
嗯

1571
00:49:30,000 --> 00:49:32,000
所以就其实这两个人

1572
00:49:32,000 --> 00:49:34,000
割裂还是有点问题的

1573
00:49:34,000 --> 00:49:36,000
大家也刚才也看到了

1574
00:49:36,000 --> 00:49:38,000
所以最最近的一个区

1575
00:49:38,000 --> 00:49:39,000
也比较最近

1576
00:49:39,000 --> 00:49:40,000
应该有好几年

1577
00:49:40,000 --> 00:49:41,000
这种流行的一个趋势

1578
00:49:41,000 --> 00:49:43,000
就是说

1579
00:49:43,000 --> 00:49:44,000
那我们不要分这么小

1580
00:49:44,000 --> 00:49:45,000
我们就是二合

1581
00:49:45,000 --> 00:49:47,000
就是我们合体吧

1582
00:49:47,000 --> 00:49:49,000
那么我们就叫做 double

1583
00:49:49,000 --> 00:49:50,000
就是他既是开发者

1584
00:49:50,000 --> 00:49:51,000
他又是运为的人员

1585
00:49:51,000 --> 00:49:52,000
就是说

1586
00:49:52,000 --> 00:49:53,000
就是简单来讲

1587
00:49:53,000 --> 00:49:55,000
就是开发者说

1588
00:49:55,000 --> 00:49:57,000
deploy your own shit

1589
00:49:58,000 --> 00:49:59,000
有你自己的狗屎

1590
00:49:59,000 --> 00:50:00,000
你自己去部署

1591
00:50:00,000 --> 00:50:01,000
然后你自己去运为

1592
00:50:01,000 --> 00:50:02,000
吃你自己的狗屎

1593
00:50:02,000 --> 00:50:04,000
吃然后部署你自己写出来的屎

1594
00:50:04,000 --> 00:50:05,000
对

1595
00:50:05,000 --> 00:50:09,000
然后其实从大的一个角度来讲

1596
00:50:09,000 --> 00:50:10,000
就是这个可能

1597
00:50:10,000 --> 00:50:12,000
就刚才我们讲的是一个比较

1598
00:50:12,000 --> 00:50:13,000
比较直白的描述

1599
00:50:13,000 --> 00:50:15,000
但是有一些比如说

1600
00:50:15,000 --> 00:50:17,000
很 Enterprising 的说法

1601
00:50:17,000 --> 00:50:20,000
就是什么什么 end to end ownership

1602
00:50:20,000 --> 00:50:21,000
就是说你这个

1603
00:50:21,000 --> 00:50:24,000
这个软件的工程的

1604
00:50:24,000 --> 00:50:25,000
这个 ownership

1605
00:50:25,000 --> 00:50:27,000
就是一个这个权责在哪里

1606
00:50:27,000 --> 00:50:28,000
你是从头到尾

1607
00:50:28,000 --> 00:50:30,000
从他的这个制作到他的这个

1608
00:50:30,000 --> 00:50:31,000
最终使用

1609
00:50:31,000 --> 00:50:33,000
你都是要付权责

1610
00:50:33,000 --> 00:50:33,000
对

1611
00:50:33,000 --> 00:50:35,000
从收集用户的需求开始

1612
00:50:35,000 --> 00:50:38,000
然后到把最终产品

1613
00:50:38,000 --> 00:50:40,000
呈现给用户使用为止

1614
00:50:40,000 --> 00:50:42,000
整个过程你都要

1615
00:50:42,000 --> 00:50:45,000
自己去去完成

1616
00:50:45,000 --> 00:50:45,000
对

1617
00:50:45,000 --> 00:50:46,000
就这样的话

1618
00:50:46,000 --> 00:50:50,000
就是理论上说是可以对这个

1619
00:50:50,000 --> 00:50:51,000
这个开发者也好

1620
00:50:51,000 --> 00:50:52,000
还是用为者也好

1621
00:50:52,000 --> 00:50:54,000
他有更大的一个激励机制

1622
00:50:54,000 --> 00:50:55,000
因为传统上

1623
00:50:55,000 --> 00:50:56,000
这个开发和运为分开的话

1624
00:50:56,000 --> 00:50:58,000
有一个这么一个不太好的地方

1625
00:50:58,000 --> 00:51:00,000
就是开发者开发完毕之后

1626
00:51:00,000 --> 00:51:02,000
觉得这个事情就跟我没关系了

1627
00:51:02,000 --> 00:51:04,000
然后这个这个东西到底跑起来怎么样

1628
00:51:04,000 --> 00:51:05,000
性能怎么样

1629
00:51:05,000 --> 00:51:10,000
就是他们就比较不太关心了吧

1630
00:51:10,000 --> 00:51:11,000
然后这样的话

1631
00:51:11,000 --> 00:51:12,000
从来得到成就感

1632
00:51:12,000 --> 00:51:13,000
可能那个东西

1633
00:51:13,000 --> 00:51:16,000
就是我从头到脚负责到底的

1634
00:51:16,000 --> 00:51:18,000
然后你就是说用说看牛逼吧

1635
00:51:18,000 --> 00:51:19,000
你就是说你这种成就感

1636
00:51:19,000 --> 00:51:21,000
可能就没有那么强烈了

1637
00:51:21,000 --> 00:51:22,000
所以从某种意义上来讲

1638
00:51:22,000 --> 00:51:23,000
这种所谓 Dev-Op

1639
00:51:23,000 --> 00:51:26,000
运动或者说这个 end to end ownership

1640
00:51:26,000 --> 00:51:28,000
它其实有一种也是激励

1641
00:51:28,000 --> 00:51:31,000
激励开发者有更多的动力

1642
00:51:31,000 --> 00:51:32,000
去做事的一个方法

1643
00:51:32,000 --> 00:51:33,000
我觉得

1644
00:51:33,000 --> 00:51:35,000
没错

1645
00:51:35,000 --> 00:51:37,000
当然同时它 Dev-Op 运动

1646
00:51:37,000 --> 00:51:41,000
就它对软件从业者的技能的要求

1647
00:51:41,000 --> 00:51:44,000
就有更进一步的要求了

1648
00:51:44,000 --> 00:51:46,000
或者说我们之前有一个另外一个概念

1649
00:51:46,000 --> 00:51:47,000
叫做 full stack developer

1650
00:51:47,000 --> 00:51:49,000
就是所谓全占工程师

1651
00:51:49,000 --> 00:51:52,000
就是你要从这个硬件底层

1652
00:51:52,000 --> 00:51:53,000
到最终用户界面

1653
00:51:53,000 --> 00:51:55,000
每一个步骤

1654
00:51:55,000 --> 00:51:56,000
你不说要精通

1655
00:51:56,000 --> 00:51:57,000
起码很有了解

1656
00:51:57,000 --> 00:51:59,000
你至少要知道出了问题

1657
00:51:59,000 --> 00:52:01,000
在哪一层去解决

1658
00:52:01,000 --> 00:52:02,000
那就是说这个是一个所谓的

1659
00:52:02,000 --> 00:52:04,000
如果把这个定为一个终极目标的话

1660
00:52:04,000 --> 00:52:06,000
Dev-Op 其实就是在往这个目标上

1661
00:52:06,000 --> 00:52:08,000
又更进了一步

1662
00:52:08,000 --> 00:52:08,000
对

1663
00:52:08,000 --> 00:52:11,000
而且其实我觉得 Dev-Op 有点

1664
00:52:11,000 --> 00:52:13,000
多少有点

1665
00:52:13,000 --> 00:52:15,000
back to the roots 的感觉

1666
00:52:15,000 --> 00:52:17,000
就是在很古早的时代

1667
00:52:17,000 --> 00:52:19,000
每一个成员都是 Dev-Op

1668
00:52:19,000 --> 00:52:20,000
对

1669
00:52:20,000 --> 00:52:24,000
没有还没有出现这个工作的分野

1670
00:52:24,000 --> 00:52:24,000
对吧

1671
00:52:25,000 --> 00:52:27,000
但是分工

1672
00:52:27,000 --> 00:52:30,000
就是软件工程变得越来越大的时候

1673
00:52:30,000 --> 00:52:33,000
一个人的 scope 可能没办法

1674
00:52:33,000 --> 00:52:35,000
cover 到那么大的范围

1675
00:52:35,000 --> 00:52:36,000
但是

1676
00:52:36,000 --> 00:52:39,000
那个时候的思潮就是要让

1677
00:52:39,000 --> 00:52:42,000
这一群 Dev 做 Dev 事情

1678
00:52:42,000 --> 00:52:44,000
然后一群 Op 做 Op 的事情

1679
00:52:44,000 --> 00:52:46,000
但是现在潮流又反过来了

1680
00:52:46,000 --> 00:52:50,000
就是要希望一个人能够完成所有的事情

1681
00:52:50,000 --> 00:52:51,000
因为这样才可以得到

1682
00:52:51,000 --> 00:52:52,000
怎么说呢

1683
00:52:52,000 --> 00:52:55,000
比较高质量的软件

1684
00:52:55,000 --> 00:53:00,000
并且也会让整个开发过程变得更加敏捷一点

1685
00:53:00,000 --> 00:53:00,000
嗯

1686
00:53:00,000 --> 00:53:02,000
就是刚才讲了那么多

1687
00:53:02,000 --> 00:53:05,000
我们还是要探究一下 Dev-Op 这个背景

1688
00:53:05,000 --> 00:53:08,000
刚才讲的一个激励因素是一个方面

1689
00:53:08,000 --> 00:53:11,000
其实我觉得可能从一个务实的角度来讲

1690
00:53:11,000 --> 00:53:13,000
就特别是现在我们不是流行创业小团队吗

1691
00:53:13,000 --> 00:53:14,000
小团队的话

1692
00:53:14,000 --> 00:53:19,000
那么就敏含的一个前提就是人上

1693
00:53:19,000 --> 00:53:20,000
每个人都要会什么

1694
00:53:20,000 --> 00:53:22,000
对 就是说我可能这个团队我就三个人

1695
00:53:22,000 --> 00:53:24,000
如果说你这个三个人

1696
00:53:24,000 --> 00:53:27,000
然后你说你其中一个人只写代吗

1697
00:53:27,000 --> 00:53:28,000
另外一个只认为

1698
00:53:28,000 --> 00:53:31,000
这显然可能平时那个写代吗的

1699
00:53:31,000 --> 00:53:32,000
人就一直在写代吗

1700
00:53:32,000 --> 00:53:33,000
然后英文的人部署完了

1701
00:53:33,000 --> 00:53:34,000
也没什么事干了

1702
00:53:34,000 --> 00:53:34,000
对吧

1703
00:53:34,000 --> 00:53:37,000
就其实对资源的利用也是不太合理的

1704
00:53:37,000 --> 00:53:39,000
然后另外一方面就是说

1705
00:53:39,000 --> 00:53:43,000
小公司可能也没有那么那么划分明确的东西

1706
00:53:43,000 --> 00:53:46,000
因为如果你一旦划分明确的话

1707
00:53:46,000 --> 00:53:49,000
你就要在不同的人员之间沟通

1708
00:53:49,000 --> 00:53:50,000
沟通的话

1709
00:53:50,000 --> 00:53:55,000
其实对这个效率是有很大的折损的

1710
00:53:55,000 --> 00:53:56,000
对

1711
00:53:56,000 --> 00:53:58,000
就是如果你说你是一个小团队的话

1712
00:53:58,000 --> 00:54:01,000
你肯定是要尽量的减少这种折损

1713
00:54:01,000 --> 00:54:03,000
因为你没有那么多人去

1714
00:54:03,000 --> 00:54:07,000
你没有那么多种的脑力去消耗

1715
00:54:07,000 --> 00:54:09,000
你要把这些东西全部用在世界价值上面去

1716
00:54:09,000 --> 00:54:14,000
你得让他们都把它在真正实在在做事

1717
00:54:14,000 --> 00:54:15,000
所以其实从这个点来讲

1718
00:54:15,000 --> 00:54:17,000
就是带帽比这个运动

1719
00:54:17,000 --> 00:54:19,000
还是从很多务实的考虑出来的结果

1720
00:54:19,000 --> 00:54:20,000
我觉得

1721
00:54:20,000 --> 00:54:21,000
没错

1722
00:54:21,000 --> 00:54:25,000
那要成为一个 DevOps

1723
00:54:25,000 --> 00:54:28,000
其实说难也不难

1724
00:54:28,000 --> 00:54:29,000
但是说简单也不是很简单

1725
00:54:29,000 --> 00:54:34,000
就如果你只是一个或说我是一个很普通的

1726
00:54:34,000 --> 00:54:36,000
学历点编程的人

1727
00:54:36,000 --> 00:54:40,000
我怎样才能知道自己要成为一个 DevOps

1728
00:54:40,000 --> 00:54:43,000
需要哪些额外的知识呢

1729
00:54:44,000 --> 00:54:47,000
其实这个问题让我想起

1730
00:54:47,000 --> 00:54:50,000
就是之前

1731
00:54:50,000 --> 00:54:51,000
不只是在知识户上

1732
00:54:51,000 --> 00:54:52,000
就是很多地方都会出现那个问题

1733
00:54:52,000 --> 00:54:55,000
就是我是学计算机的

1734
00:54:55,000 --> 00:54:56,000
但是

1735
00:54:56,000 --> 00:54:58,000
我的亲戚朋友让我修电脑

1736
00:54:58,000 --> 00:55:00,000
我不会修

1737
00:55:00,000 --> 00:55:02,000
我应该怎么让他们理解

1738
00:55:02,000 --> 00:55:03,000
我是学计算机的

1739
00:55:03,000 --> 00:55:06,000
但是我不应会修电脑呢

1740
00:55:06,000 --> 00:55:09,000
我觉得我对这个问题的回答就是

1741
00:55:09,000 --> 00:55:13,000
你一个学计算机的怎么可以不会修电脑

1742
00:55:14,000 --> 00:55:15,000
但是现在想想

1743
00:55:15,000 --> 00:55:18,000
这种反应可能是

1744
00:55:18,000 --> 00:55:19,000
错的

1745
00:55:19,000 --> 00:55:21,000
是不那么

1746
00:55:21,000 --> 00:55:22,000
至少是政治不正确的

1747
00:55:22,000 --> 00:55:24,000
就是你不能要求每个人

1748
00:55:24,000 --> 00:55:28,000
所选择的专业都是他真正

1749
00:55:28,000 --> 00:55:30,000
这么说好像太黑了

1750
00:55:30,000 --> 00:55:32,000
都是他真正所喜欢的

1751
00:55:32,000 --> 00:55:33,000
所以这么说吧

1752
00:55:33,000 --> 00:55:34,000
这个没什么好黑的

1753
00:55:34,000 --> 00:55:35,000
这个现实就是

1754
00:55:35,000 --> 00:55:36,000
我相信

1755
00:55:36,000 --> 00:55:40,000
很多人就学的那个专业都不是他自己所真正喜欢的东西

1756
00:55:40,000 --> 00:55:42,000
对在跑在报计算机

1757
00:55:42,000 --> 00:55:44,000
科学专业之前

1758
00:55:44,000 --> 00:55:45,000
可能完全不知道

1759
00:55:45,000 --> 00:55:46,000
其实你可不可以到底是干嘛

1760
00:55:46,000 --> 00:55:47,000
对啊

1761
00:55:47,000 --> 00:55:50,000
就看来这个这个这个是我没有经历过的一个一个

1762
00:55:50,000 --> 00:55:52,000
一个这时候不能理解那种现象

1763
00:55:52,000 --> 00:55:53,000
但

1764
00:55:53,000 --> 00:55:53,000
我也

1765
00:55:53,000 --> 00:55:55,000
我觉得可能

1766
00:55:55,000 --> 00:55:57,000
具体去想也没什么

1767
00:55:57,000 --> 00:55:58,000
可以后飞的

1768
00:55:58,000 --> 00:55:58,000
就

1769
00:55:58,000 --> 00:56:00,000
可能有些人就是这样的

1770
00:56:00,000 --> 00:56:00,000
但

1771
00:56:00,000 --> 00:56:02,000
在我看来

1772
00:56:02,000 --> 00:56:04,000
一个学计算机的不会修电脑是挺

1773
00:56:04,000 --> 00:56:05,000
让人费解的一件事情

1774
00:56:05,000 --> 00:56:06,000
甚至会

1775
00:56:06,000 --> 00:56:08,000
在主观上

1776
00:56:08,000 --> 00:56:12,000
去寻找一个怎么才能让别人明白

1777
00:56:12,000 --> 00:56:14,000
我学计算机的就不会修电脑

1778
00:56:14,000 --> 00:56:15,000
是一件正常的事情

1779
00:56:18,000 --> 00:56:19,000
但对

1780
00:56:19,000 --> 00:56:19,000
就

1781
00:56:19,000 --> 00:56:21,000
回到 DevOps 的话

1782
00:56:21,000 --> 00:56:22,000
也就是我觉得

1783
00:56:22,000 --> 00:56:24,000
这就有点像

1784
00:56:24,000 --> 00:56:25,000
你要成为一个 DevOps

1785
00:56:25,000 --> 00:56:26,000
但是你只会代词

1786
00:56:26,000 --> 00:56:28,000
可能就有点像你是一个学计算机的人

1787
00:56:28,000 --> 00:56:30,000
然后你要学会怎么修计算机一样

1788
00:56:30,000 --> 00:56:31,000
是一个从

1789
00:56:31,000 --> 00:56:33,000
从

1790
00:56:33,000 --> 00:56:35,000
偏向理论的部分

1791
00:56:35,000 --> 00:56:38,000
转向于理论和实践相结合的

1792
00:56:38,000 --> 00:56:39,000
一个状态的过程

1793
00:56:41,000 --> 00:56:42,000
然后

1794
00:56:42,000 --> 00:56:44,000
还有一部人是从

1795
00:56:44,000 --> 00:56:44,000
up

1796
00:56:44,000 --> 00:56:45,000
然后转向 DevOps

1797
00:56:45,000 --> 00:56:48,000
他们又需要学习什么东西

1798
00:56:48,000 --> 00:56:48,000
对

1799
00:56:48,000 --> 00:56:50,000
这个其实也挺有意思的

1800
00:56:50,000 --> 00:56:50,000
就是

1801
00:56:52,000 --> 00:56:54,000
想象你是一个

1802
00:56:54,000 --> 00:56:55,000
在中国村电脑城

1803
00:56:55,000 --> 00:56:57,000
传奇长大的

1804
00:56:57,000 --> 00:56:59,000
孩子

1805
00:56:59,000 --> 00:57:00,000
然后

1806
00:57:00,000 --> 00:57:02,000
在生命的某一时刻

1807
00:57:02,000 --> 00:57:03,000
你突然决定说

1808
00:57:03,000 --> 00:57:04,000
我

1809
00:57:04,000 --> 00:57:06,000
对硬件搞得这么熟

1810
00:57:06,000 --> 00:57:07,000
那我想要

1811
00:57:07,000 --> 00:57:09,000
研究一下软件怎么弄

1812
00:57:10,000 --> 00:57:12,000
这好像也

1813
00:57:12,000 --> 00:57:14,000
我觉得你这个夸子有点大

1814
00:57:14,000 --> 00:57:16,000
我们还是说回一个正常一点

1815
00:57:16,000 --> 00:57:16,000
就是说

1816
00:57:16,000 --> 00:57:17,000
你是一个系统管理员

1817
00:57:17,000 --> 00:57:19,000
或者你是个网络管理员

1818
00:57:19,000 --> 00:57:20,000
然后你怎么想

1819
00:57:20,000 --> 00:57:23,000
我也来写几个程序部署来玩玩

1820
00:57:23,000 --> 00:57:24,000
有这样的人存在吗

1821
00:57:24,000 --> 00:57:25,000
有

1822
00:57:25,000 --> 00:57:26,000
肯定是有的

1823
00:57:26,000 --> 00:57:29,000
可是为什么会有人先成为一个系统管理员

1824
00:57:29,000 --> 00:57:31,000
而不会变成

1825
00:57:31,000 --> 00:57:32,000
这个就是要讲的一件事情

1826
00:57:32,000 --> 00:57:34,000
就是

1827
00:57:34,000 --> 00:57:35,000
以前

1828
00:57:35,000 --> 00:57:36,000
什么四个中

1829
00:57:36,000 --> 00:57:38,000
还很牛逼的时候

1830
00:57:38,000 --> 00:57:39,000
不是有什么各种认证吗

1831
00:57:42,000 --> 00:57:42,000
就是什么

1832
00:57:42,000 --> 00:57:44,000
还有好几个

1833
00:57:44,000 --> 00:57:45,000
什么 CCEP 什么的

1834
00:57:45,000 --> 00:57:46,000
我想一下说起来

1835
00:57:46,000 --> 00:57:48,000
我也想不起来

1836
00:57:48,000 --> 00:57:50,000
就是专门教你怎么去管理一个

1837
00:57:50,000 --> 00:57:51,000
主建机转机网络

1838
00:57:51,000 --> 00:57:52,000
管理机转机网络

1839
00:57:52,000 --> 00:57:54,000
然后包括很多人

1840
00:57:54,000 --> 00:57:56,000
也就是从这个地方入手

1841
00:57:56,000 --> 00:57:58,000
然后开始去接触这个伺服器的

1842
00:57:58,000 --> 00:58:01,000
就起码就中国获莲王早期创演那帮人

1843
00:58:01,000 --> 00:58:03,000
很多人从这种渠道出来的

1844
00:58:04,000 --> 00:58:05,000
明白了

1845
00:58:05,000 --> 00:58:08,000
就是就等于把计算机网络管理

1846
00:58:08,000 --> 00:58:10,000
作为一种技能来交售

1847
00:58:10,000 --> 00:58:11,000
对

1848
00:58:11,000 --> 00:58:13,000
这就是一个还可以班证书的技能

1849
00:58:13,000 --> 00:58:15,000
当然是很多人有这种方式

1850
00:58:15,000 --> 00:58:17,000
我知道这个东西

1851
00:58:17,000 --> 00:58:17,000
在那个时候

1852
00:58:17,000 --> 00:58:18,000
虽然我还小

1853
00:58:18,000 --> 00:58:21,000
但我总觉得这些东西应该是至少是

1854
00:58:21,000 --> 00:58:24,000
就是你得先会写成去才会去考的一个东西

1855
00:58:24,000 --> 00:58:25,000
不需要

1856
00:58:25,000 --> 00:58:26,000
完全不需要

1857
00:58:27,000 --> 00:58:28,000
原来如此

1858
00:58:28,000 --> 00:58:29,000
我问一下他

1859
00:58:29,000 --> 00:58:30,000
有什么北大青鳥

1860
00:58:30,000 --> 00:58:31,000
你还有吗

1861
00:58:31,000 --> 00:58:32,000
这种各种培训班

1862
00:58:32,000 --> 00:58:33,000
也是在做这种事情

1863
00:58:33,000 --> 00:58:34,000
记得

1864
00:58:34,000 --> 00:58:36,000
现在蓝香计较估计的

1865
00:58:36,000 --> 00:58:36,000
各做一个事

1866
00:58:36,000 --> 00:58:38,000
OK

1867
00:58:38,000 --> 00:58:38,000
对

1868
00:58:38,000 --> 00:58:41,000
就是这方面是属于一个比较成熟的

1869
00:58:41,000 --> 00:58:41,000
因为

1870
00:58:41,000 --> 00:58:45,000
因为网络其实它是一个眼镜相对于

1871
00:58:45,000 --> 00:58:46,000
相对来说比较慢

1872
00:58:46,000 --> 00:58:48,000
就是它的这个技术是比较稳定的一个东西

1873
00:58:48,000 --> 00:58:51,000
然后就会有一些这种

1874
00:58:51,000 --> 00:58:54,000
成熟的培训体系来做

1875
00:58:54,000 --> 00:58:56,000
这个交代压怎么去使用组建网络

1876
00:58:56,000 --> 00:58:59,000
怎么去调试这类的东西

1877
00:58:59,000 --> 00:59:02,000
然后很多这个公司招人的时候

1878
00:59:02,000 --> 00:59:04,000
也会去选择

1879
00:59:04,000 --> 00:59:04,000
就说

1880
00:59:04,000 --> 00:59:05,000
那我来招一个网络管理员

1881
00:59:05,000 --> 00:59:07,000
把这个东西弄好就好了

1882
00:59:07,000 --> 00:59:08,000
好吧

1883
00:59:08,000 --> 00:59:09,000
现在我大概明白了

1884
00:59:09,000 --> 00:59:10,000
那

1885
00:59:10,000 --> 00:59:12,000
OK

1886
00:59:12,000 --> 00:59:12,000
对

1887
00:59:12,000 --> 00:59:14,000
那好吧

1888
00:59:14,000 --> 00:59:15,000
那我们来说说

1889
00:59:15,000 --> 00:59:17,000
做一个 dive-offs 到底需要哪些指示

1890
00:59:18,000 --> 00:59:21,000
首先你得知道染件工程对吧

1891
00:59:21,000 --> 00:59:22,000
对

1892
00:59:22,000 --> 00:59:24,000
以及包括染件工程的所有的

1893
00:59:24,000 --> 00:59:25,000
你懂得写什么

1894
00:59:25,000 --> 00:59:27,000
什么算法啊

1895
00:59:27,000 --> 00:59:28,000
什么东西的

1896
00:59:28,000 --> 00:59:28,000
之类的

1897
00:59:28,000 --> 00:59:30,000
你得全会

1898
00:59:30,000 --> 00:59:31,000
就你得先把东西做出来

1899
00:59:31,000 --> 00:59:31,000
对吧

1900
00:59:31,000 --> 00:59:33,000
你得是一个

1901
00:59:33,000 --> 00:59:34,000
是一个厨师

1902
00:59:34,000 --> 00:59:34,000
对

1903
00:59:34,000 --> 00:59:36,000
就是或者说我们前两期提计的这些内容

1904
00:59:36,000 --> 00:59:37,000
你得会

1905
00:59:37,000 --> 00:59:38,000
你得会

1906
00:59:38,000 --> 00:59:40,000
然后在那些基础上

1907
00:59:40,000 --> 00:59:41,000
你还得知道

1908
00:59:41,000 --> 00:59:44,000
就是现代的一个服务器

1909
00:59:44,000 --> 00:59:45,000
是怎么样子的

1910
00:59:45,000 --> 00:59:45,000
现在一个

1911
00:59:45,000 --> 00:59:47,000
它需要一个什么样操作系统啊

1912
00:59:47,000 --> 00:59:48,000
它就有什么工具

1913
00:59:48,000 --> 00:59:49,000
刚才我讲

1914
00:59:49,000 --> 00:59:52,000
我们待会会提到一些部署的一些工具

1915
00:59:52,000 --> 00:59:54,000
然后你还得知道网络的基础的一些东西

1916
00:59:54,000 --> 00:59:55,000
是怎么样子的

1917
00:59:55,000 --> 00:59:58,000
什么 Tcpip 几层几层

1918
00:59:58,000 --> 00:59:59,000
然后每个包干嘛的

1919
00:59:59,000 --> 01:00:01,000
然后每一层能做什么

1920
01:00:01,000 --> 01:00:02,000
因为这样的话

1921
01:00:02,000 --> 01:00:03,000
你出了问题

1922
01:00:03,000 --> 01:00:04,000
你才好找

1923
01:00:04,000 --> 01:00:06,000
才好调出错嘛

1924
01:00:06,000 --> 01:00:08,000
然后你还得会在说

1925
01:00:08,000 --> 01:00:10,000
Linux 的系统上面配置这些东西

1926
01:00:10,000 --> 01:00:13,000
使得它能达到你的一些效果

1927
01:00:13,000 --> 01:00:16,000
你还得知道操作系统的底层啊

1928
01:00:16,000 --> 01:00:18,000
什么那些调度怎么样子

1929
01:00:18,000 --> 01:00:21,000
然后如此种种吧

1930
01:00:21,000 --> 01:00:21,000
嗯对

1931
01:00:21,000 --> 01:00:22,000
所以总结出来

1932
01:00:22,000 --> 01:00:24,000
就是要有技能级网络方面的支持

1933
01:00:24,000 --> 01:00:27,000
要有计算机价格方面的支持

1934
01:00:27,000 --> 01:00:28,000
对

1935
01:00:28,000 --> 01:00:30,000
并且还要有实践技能

1936
01:00:30,000 --> 01:00:32,000
其实我觉得最重要的一点就是

1937
01:00:32,000 --> 01:00:39,000
你得明白怎么样才能隔着网络去操纵一台

1938
01:00:39,000 --> 01:00:40,000
远程的计算机

1939
01:00:40,000 --> 01:00:44,000
就是当你看不到那台计算机的时候

1940
01:00:44,000 --> 01:00:45,000
怎么才能操作它

1941
01:00:45,000 --> 01:00:49,000
去探测远程技能的状态啊

1942
01:00:49,000 --> 01:00:50,000
去配置远程技能的功能

1943
01:00:50,000 --> 01:00:53,000
然后把你的软件通过一个

1944
01:00:54,000 --> 01:00:56,000
非图计划的方式去部署的那台计算机上

1945
01:00:56,000 --> 01:01:03,000
然后才能去考虑怎么样把它运行起来之类的

1946
01:01:03,000 --> 01:01:06,000
而这些东西其实都是跟编程没有什么直接关系的

1947
01:01:08,000 --> 01:01:09,000
对可以这么说吧

1948
01:01:09,000 --> 01:01:10,000
对

1949
01:01:10,000 --> 01:01:14,000
就是如果你习惯了在一个 IDE 里面写出一个程序

1950
01:01:14,000 --> 01:01:17,000
然后点一下 IDE 的那个 play button

1951
01:01:17,000 --> 01:01:20,000
然后这个程序就跑起来的话

1952
01:01:20,000 --> 01:01:21,000
那么可能到这个点上

1953
01:01:21,000 --> 01:01:26,000
你对于怎样才能让这个程序在一个远程的计算机上跑起来

1954
01:01:27,000 --> 01:01:28,000
是猛然无知的

1955
01:01:28,000 --> 01:01:32,000
这一块就是非常需要 davops 掌握

1956
01:01:32,000 --> 01:01:33,000
对

1957
01:01:33,000 --> 01:01:38,000
换句话说就是 davops 其实是需要一个软件工程师

1958
01:01:38,000 --> 01:01:42,000
成为一个计算机行业的文艺复兴人

1959
01:01:42,000 --> 01:01:43,000
就它得什么都会

1960
01:01:43,000 --> 01:01:48,000
然后包括你得如果拿什么拿餐厅来做比较好了

1961
01:01:48,000 --> 01:01:50,000
你得是成为一个小餐馆的老板

1962
01:01:50,000 --> 01:01:53,000
你得从采购原材料开始到制作原材料

1963
01:01:53,000 --> 01:01:56,000
到上菜到包括回收盘子洗碗

1964
01:01:56,000 --> 01:01:58,000
一个是全套都得搞定

1965
01:01:58,000 --> 01:02:01,000
而不是说像一个五星级酒店大厨

1966
01:02:01,000 --> 01:02:03,000
你只用涨勺就可以了

1967
01:02:03,000 --> 01:02:04,000
对

1968
01:02:04,000 --> 01:02:04,000
对

1969
01:02:04,000 --> 01:02:07,000
所以这种要求还是蛮高的

1970
01:02:07,000 --> 01:02:09,000
可能说到这就有些人已经忘而却过了

1971
01:02:09,000 --> 01:02:10,000
就我不要当 davops

1972
01:02:10,000 --> 01:02:12,000
好好写我的程序

1973
01:02:12,000 --> 01:02:13,000
对

1974
01:02:13,000 --> 01:02:16,000
这好像好像好像有些后端程序员会说

1975
01:02:16,000 --> 01:02:18,000
前面那头不要搞

1976
01:02:18,000 --> 01:02:19,000
或者是

1977
01:02:21,000 --> 01:02:24,000
对回到 computer science 的专业生的比喻

1978
01:02:24,000 --> 01:02:26,000
就是我干嘛要学院的

1979
01:02:26,000 --> 01:02:29,000
其实可能有时候我也会有这样的想法

1980
01:02:29,000 --> 01:02:30,000
就是

1981
01:02:32,000 --> 01:02:34,000
这个东西坏了

1982
01:02:34,000 --> 01:02:34,000
你要我修

1983
01:02:34,000 --> 01:02:39,000
但其实我是没有那么多时间精力或者是 node

1984
01:02:39,000 --> 01:02:40,000
去搞定这件事情的

1985
01:02:41,000 --> 01:02:45,000
对

1986
01:02:45,000 --> 01:02:48,000
这可能对广度的需求会比较高

1987
01:02:48,000 --> 01:02:52,000
但对深度的需求其实也没有那么多

1988
01:02:52,000 --> 01:02:56,000
比如说你可能并不真正的需要完全理解

1989
01:02:56,000 --> 01:02:59,000
这个 Linux 的什么内核才能做 davops

1990
01:02:59,000 --> 01:02:59,000
对吧

1991
01:02:59,000 --> 01:03:01,000
其实也没有那个必要

1992
01:03:01,000 --> 01:03:03,000
就是说并不是说我们刚才提到的东西

1993
01:03:03,000 --> 01:03:06,000
你都要每个都要完全精通而已

1994
01:03:06,000 --> 01:03:09,000
你就有时候可能只是做一个工具的需求

1995
01:03:09,000 --> 01:03:11,000
你知道出了问题怎么去解决它

1996
01:03:11,000 --> 01:03:12,000
你并不

1997
01:03:12,000 --> 01:03:14,000
但如果你有兴趣或者有学有余力

1998
01:03:14,000 --> 01:03:17,000
你愿意去在专业某一个自己的短板

1999
01:03:17,000 --> 01:03:19,000
其实当然也是很好的

2000
01:03:19,000 --> 01:03:22,000
但是我觉得也不要想得那么太可怕

2001
01:03:22,000 --> 01:03:22,000
我觉得

2002
01:03:23,000 --> 01:03:24,000
而且还有很重要的一点

2003
01:03:24,000 --> 01:03:27,000
就是要掌握一门 script language

2004
01:03:27,000 --> 01:03:28,000
或者是

2005
01:03:29,000 --> 01:03:32,000
几门 script language 除了 shile script 之外

2006
01:03:32,000 --> 01:03:35,000
还有掌握什么 ruby of hygen 之类的

2007
01:03:35,000 --> 01:03:38,000
因为我们接下来要提到很多 opto

2008
01:03:38,000 --> 01:03:40,000
其实都是逃不了的

2009
01:03:40,000 --> 01:03:41,000
对逃不了的

2010
01:03:41,000 --> 01:03:42,000
好

2011
01:03:42,000 --> 01:03:47,000
那么开始介绍这些运为的一些常见的工具吧

2012
01:03:47,000 --> 01:03:47,000
好了

2013
01:03:47,000 --> 01:03:48,000
好呀

2014
01:03:48,000 --> 01:03:51,000
最简单的一个也是可能比较稍微古老

2015
01:03:51,000 --> 01:03:56,000
或者是没有那么吓人的一个工具叫做 fabric

2016
01:03:56,000 --> 01:03:57,000
嗯哼

2017
01:03:57,000 --> 01:03:59,000
这又是我们 pysynista 喜欢的东西

2018
01:04:00,000 --> 01:04:01,000
对

2019
01:04:01,000 --> 01:04:01,000
这是一个什么呢

2020
01:04:01,000 --> 01:04:04,000
这是一个可以用 pysyn

2021
01:04:05,000 --> 01:04:07,000
脚本语言来编程控制

2022
01:04:07,000 --> 01:04:09,000
或者说你就写几个太子脚本来

2023
01:04:09,000 --> 01:04:16,000
然后来控制这个远向某几台远程服务器发送指令的一个工具

2024
01:04:17,000 --> 01:04:18,000
可以怎么说呀

2025
01:04:18,000 --> 01:04:21,000
就是其实它是非常简单的一个

2026
01:04:21,000 --> 01:04:22,000
让你可以

2027
01:04:24,000 --> 01:04:28,000
几批量处理一堆远程计算机上

2028
01:04:28,000 --> 01:04:32,000
比如说在在一堆远程计算机上同时运行一个程序

2029
01:04:32,000 --> 01:04:35,000
然后看他们的看他们输出结果之类的

2030
01:04:35,000 --> 01:04:37,000
这样一个一个很简单的工具

2031
01:04:39,000 --> 01:04:40,000
就是简单

2032
01:04:40,000 --> 01:04:43,000
就是它可以让你通过 ssh 协议

2033
01:04:43,000 --> 01:04:45,000
就其实它就是一个可编程的 ssh

2034
01:04:45,000 --> 01:04:46,000
可不可以这么讲

2035
01:04:46,000 --> 01:04:50,000
然后 ruby 那边有一个叫做 capistrino

2036
01:04:50,000 --> 01:04:53,000
这可能这又是一个意大利词应该看起来像

2037
01:04:55,000 --> 01:04:57,000
的这么一个工具 capistrino

2038
01:04:57,000 --> 01:05:01,000
然后他也是利用了 ruby 的这张比较

2039
01:05:02,000 --> 01:05:05,000
强力的写 dsl 的功能

2040
01:05:07,000 --> 01:05:08,000
搞出这么一套东西

2041
01:05:08,000 --> 01:05:10,000
就是他也是一个 ruby gem

2042
01:05:11,000 --> 01:05:16,000
然后也是可以定义大堆在远程机型上跑起来的东西

2043
01:05:18,000 --> 01:05:18,000
诸如此类的

2044
01:05:18,000 --> 01:05:20,000
只不过是 ruby 这一边的

2045
01:05:20,000 --> 01:05:24,000
而且可能应该是要比 fabric 更强大一点

2046
01:05:24,000 --> 01:05:24,000
我觉得

2047
01:05:25,000 --> 01:05:30,000
但是不管是 capistrino 和 fabric 也好

2048
01:05:30,000 --> 01:05:31,000
它都有一个

2049
01:05:31,000 --> 01:05:34,000
它很简单的工具

2050
01:05:34,000 --> 01:05:36,000
就是你只要理解 ssh 怎么回事

2051
01:05:36,000 --> 01:05:37,000
就基本上能够写

2052
01:05:37,000 --> 01:05:39,000
能够用它来做一些自动化的工作

2053
01:05:39,000 --> 01:05:41,000
但是它的问题在哪里呢

2054
01:05:42,000 --> 01:05:45,000
就是如果它要批量处理多台机器的话

2055
01:05:45,000 --> 01:05:47,000
就同时处理多台机器的话

2056
01:05:47,000 --> 01:05:49,000
它要求那些机器的状态是

2057
01:05:50,000 --> 01:05:51,000
一致的

2058
01:05:51,000 --> 01:05:52,000
对

2059
01:05:52,000 --> 01:05:54,000
不然会出现什么问题

2060
01:05:55,000 --> 01:05:56,000
就是你写一个脚本

2061
01:05:56,000 --> 01:05:56,000
它可能

2062
01:05:58,000 --> 01:06:00,000
但你可以说是用义父语去判断

2063
01:06:00,000 --> 01:06:02,000
它当前的状态是怎么样子

2064
01:06:02,000 --> 01:06:03,000
但是总体来讲

2065
01:06:04,000 --> 01:06:05,000
如果你的这个

2066
01:06:05,000 --> 01:06:07,000
操作多台机器的状态物以致

2067
01:06:07,000 --> 01:06:09,000
那么你可能执行的每一条指令的

2068
01:06:09,000 --> 01:06:11,000
成功也失败就不确定

2069
01:06:11,000 --> 01:06:11,000
对吧

2070
01:06:11,000 --> 01:06:14,000
这样的话你对接下来的要做的操作

2071
01:06:14,000 --> 01:06:17,000
就会变得分支很多

2072
01:06:17,000 --> 01:06:19,000
就管理起来并不方便

2073
01:06:19,000 --> 01:06:19,000
对

2074
01:06:19,000 --> 01:06:21,000
就是这一批工具

2075
01:06:21,000 --> 01:06:22,000
这两个

2076
01:06:22,000 --> 01:06:23,000
就是你这两个工具的代表

2077
01:06:23,000 --> 01:06:27,000
这个抽象层级的工具

2078
01:06:27,000 --> 01:06:28,000
所能帮你做的事情

2079
01:06:28,000 --> 01:06:32,000
只是把你的一些

2080
01:06:33,000 --> 01:06:35,000
日常或是经常需要用到的命令

2081
01:06:35,000 --> 01:06:36,000
自动化而已

2082
01:06:36,000 --> 01:06:38,000
它并不能替你解决

2083
01:06:38,000 --> 01:06:41,000
如果远程机器

2084
01:06:41,000 --> 01:06:44,000
对于某一个指令的回想

2085
01:06:44,000 --> 01:06:45,000
和你期望的不一样

2086
01:06:45,000 --> 01:06:47,000
该怎么办这个问题

2087
01:06:48,000 --> 01:06:49,000
对吧

2088
01:06:49,000 --> 01:06:49,000
对

2089
01:06:49,000 --> 01:06:50,000
其实在说这个之前

2090
01:06:50,000 --> 01:06:50,000
我们应该先说

2091
01:06:50,000 --> 01:06:52,000
如果是手工做应该怎么样子

2092
01:06:52,000 --> 01:06:54,000
才有一个比较明显的对比

2093
01:06:54,000 --> 01:06:55,000
嗯

2094
01:06:55,000 --> 01:06:56,000
OK

2095
01:06:56,000 --> 01:06:57,000
对

2096
01:06:57,000 --> 01:06:58,000
手工管理一个服务器怎么样

2097
01:06:58,000 --> 01:07:01,000
一般就是说你通过什么 SSH 登录上去

2098
01:07:01,000 --> 01:07:02,000
然后运行一堆指令

2099
01:07:02,000 --> 01:07:04,000
把你的软件铺住上去跑起来

2100
01:07:04,000 --> 01:07:06,000
然后查看一下状态

2101
01:07:06,000 --> 01:07:07,000
看是否正常对吧

2102
01:07:07,000 --> 01:07:08,000
对

2103
01:07:08,000 --> 01:07:10,000
这其实牵扯了一个问题

2104
01:07:10,000 --> 01:07:12,000
就是你要想要成为 DevovS 的话

2105
01:07:12,000 --> 01:07:14,000
或者说你想要了解如何远程

2106
01:07:14,000 --> 01:07:16,000
操作一台机器机的话

2107
01:07:16,000 --> 01:07:17,000
最好的方法是什么

2108
01:07:17,000 --> 01:07:20,000
那是不是用有一台真正意义上远程机器机

2109
01:07:20,000 --> 01:07:23,000
就买一个 VPS

2110
01:07:23,000 --> 01:07:23,000
嗯

2111
01:07:23,000 --> 01:07:24,000
对啊

2112
01:07:24,000 --> 01:07:25,000
这个就能练手嘛

2113
01:07:25,000 --> 01:07:26,000
现在有很方便的这种

2114
01:07:26,000 --> 01:07:29,000
什么第三方的云的工具

2115
01:07:29,000 --> 01:07:29,000
国内有很多

2116
01:07:29,000 --> 01:07:32,000
国外也有什么最近比较火的

2117
01:07:32,000 --> 01:07:34,000
Digital Ocean

2118
01:07:34,000 --> 01:07:35,000
Digital Ocean 的

2119
01:07:35,000 --> 01:07:35,000
它也很便宜

2120
01:07:35,000 --> 01:07:36,000
一个月好看

2121
01:07:36,000 --> 01:07:37,000
你转了吗

2122
01:07:37,000 --> 01:07:37,000
5 块钱

2123
01:07:37,000 --> 01:07:38,000
我有它的号

2124
01:07:38,000 --> 01:07:40,000
但我还没我自己用

2125
01:07:40,000 --> 01:07:40,000
OK

2126
01:07:40,000 --> 01:07:44,000
我现在 Mantafox.com 的预名是在 Digital Ocean 上

2127
01:07:44,000 --> 01:07:47,000
你已经不会在 Linux 上面了

2128
01:07:47,000 --> 01:07:47,000
对

2129
01:07:47,000 --> 01:07:48,000
嗯

2130
01:07:48,000 --> 01:07:48,000
对

2131
01:07:48,000 --> 01:07:50,000
后来 Linode 也是升级了

2132
01:07:50,000 --> 01:07:52,000
你是在它升级之前转的

2133
01:07:52,000 --> 01:07:52,000
是吧

2134
01:07:52,000 --> 01:07:54,000
我是在它升级之前转

2135
01:07:54,000 --> 01:07:54,000
OK

2136
01:07:54,000 --> 01:07:55,000
就它升级之后

2137
01:07:55,000 --> 01:07:57,000
其实两家的那个竞争力是差不多的

2138
01:07:57,000 --> 01:08:00,000
所以我们我就没有切了

2139
01:08:00,000 --> 01:08:00,000
对

2140
01:08:00,000 --> 01:08:05,000
然后传统的有 Linode

2141
01:08:05,000 --> 01:08:06,000
Linode

2142
01:08:06,000 --> 01:08:07,000
对

2143
01:08:07,000 --> 01:08:08,000
啊

2144
01:08:08,000 --> 01:08:11,000
还有一些像国内的什么各种云啊

2145
01:08:11,000 --> 01:08:12,000
青云啊

2146
01:08:12,000 --> 01:08:14,000
什么还有什么阿里云啊

2147
01:08:14,000 --> 01:08:16,000
这里有一个问题

2148
01:08:17,000 --> 01:08:19,000
我们所在这里推荐的是

2149
01:08:19,000 --> 01:08:22,000
一个真正是一台真正意义上的计算机

2150
01:08:22,000 --> 01:08:25,000
而不是像 Google App Engine 或者是

2151
01:08:25,000 --> 01:08:26,000
我不知道阿里云是干嘛的

2152
01:08:26,000 --> 01:08:29,000
在阿里云跟 Yama 训练差不多

2153
01:08:29,000 --> 01:08:30,000
对

2154
01:08:30,000 --> 01:08:31,000
也不对吧

2155
01:08:31,000 --> 01:08:33,000
就是它有很庞大的产品的子类

2156
01:08:33,000 --> 01:08:34,000
但是它的虚拟性

2157
01:08:34,000 --> 01:08:36,000
1 C 2 还是 S 3

2158
01:08:36,000 --> 01:08:38,000
是跟 1 C 2 差不多

2159
01:08:38,000 --> 01:08:39,000
OK

2160
01:08:39,000 --> 01:08:40,000
OK

2161
01:08:40,000 --> 01:08:40,000
对

2162
01:08:40,000 --> 01:08:41,000
所以比较重要

2163
01:08:41,000 --> 01:08:42,000
我还带来玩一下

2164
01:08:42,000 --> 01:08:44,000
拥有一台真正意义上的

2165
01:08:44,000 --> 01:08:46,000
被虚拟出来的计算机

2166
01:08:46,000 --> 01:08:49,000
而不是仅仅是一个能够跑你的

2167
01:08:49,000 --> 01:08:50,000
程序的容器

2168
01:08:50,000 --> 01:08:53,000
两者还是有蛮大的区别的

2169
01:08:53,000 --> 01:08:55,000
后者对于 Devov's 功力的培养

2170
01:08:55,000 --> 01:08:57,000
可能没有什么注意吧

2171
01:08:57,000 --> 01:08:58,000
也是有的

2172
01:08:58,000 --> 01:08:59,000
但没有那么多

2173
01:08:59,000 --> 01:09:01,000
呵呵

2174
01:09:01,000 --> 01:09:03,000
所以最原始的方法

2175
01:09:03,000 --> 01:09:04,000
就是你直接登录到某一台

2176
01:09:04,000 --> 01:09:07,000
原成的计算机或者是 VPS 上面去

2177
01:09:07,000 --> 01:09:08,000
去做一些操作

2178
01:09:08,000 --> 01:09:10,000
然后查看预讯状态嘛

2179
01:09:10,000 --> 01:09:11,000
刚才就讲了

2180
01:09:11,000 --> 01:09:13,000
然后

2181
01:09:13,000 --> 01:09:15,000
但如果你有不只一台的话

2182
01:09:15,000 --> 01:09:16,000
你有四五台的时候

2183
01:09:16,000 --> 01:09:17,000
这个整个

2184
01:09:17,000 --> 01:09:18,000
你每一台都重复这个操作

2185
01:09:18,000 --> 01:09:19,000
就比较繁琐嘛

2186
01:09:19,000 --> 01:09:20,000
然后像 Fabric 这种工具

2187
01:09:20,000 --> 01:09:23,000
就是说能够当你去

2188
01:09:23,000 --> 01:09:25,000
自动化掉重复的那一部分

2189
01:09:25,000 --> 01:09:28,000
但是如果你的机器多了之后

2190
01:09:28,000 --> 01:09:29,000
这样就不可避免的

2191
01:09:29,000 --> 01:09:30,000
有些机器的状态

2192
01:09:30,000 --> 01:09:32,000
可能并不是非常一致

2193
01:09:32,000 --> 01:09:34,000
这个时候你就要预些更加高级的

2194
01:09:34,000 --> 01:09:37,000
或者说这个功能更强大

2195
01:09:37,000 --> 01:09:39,000
然后抽象成绩更高的一些工具

2196
01:09:39,000 --> 01:09:41,000
来帮助你解决

2197
01:09:41,000 --> 01:09:45,000
这个数量庞大的这个服务器的管理

2198
01:09:45,000 --> 01:09:46,000
一般怎么说

2199
01:09:46,000 --> 01:09:48,000
就是说如果假设你有超过

2200
01:09:48,000 --> 01:09:50,000
10 台

2201
01:09:50,000 --> 01:09:52,000
比如说这个数字幕之后

2202
01:09:52,000 --> 01:09:54,000
你再用像用 Fabric 这种工具来管理

2203
01:09:54,000 --> 01:09:57,000
就可能不是那么有效了

2204
01:09:57,000 --> 01:09:57,000
对

2205
01:09:57,000 --> 01:10:00,000
有一个数字是人类同一时间

2206
01:10:00,000 --> 01:10:02,000
可以关注到的

2207
01:10:02,000 --> 01:10:04,000
物体的最高数量是多少

2208
01:10:04,000 --> 01:10:06,000
7 5 到 7

2209
01:10:06,000 --> 01:10:06,000
对

2210
01:10:06,000 --> 01:10:08,000
我觉得其实超过五台

2211
01:10:08,000 --> 01:10:10,000
基本上就有点让人重心

2212
01:10:10,000 --> 01:10:12,000
对确实是这样

2213
01:10:12,000 --> 01:10:15,000
然后就会引入像这个叫

2214
01:10:15,000 --> 01:10:17,000
Puppet 和 Chef 这种叫做

2215
01:10:17,000 --> 01:10:19,000
Configuration Management Tool

2216
01:10:19,000 --> 01:10:21,000
就配置管理工具

2217
01:10:21,000 --> 01:10:22,000
对

2218
01:10:22,000 --> 01:10:26,000
Puppet 就是小木偶

2219
01:10:26,000 --> 01:10:27,000
对吧

2220
01:10:27,000 --> 01:10:29,000
然后 Chef 就是厨师

2221
01:10:29,000 --> 01:10:30,000
对

2222
01:10:30,000 --> 01:10:31,000
这其实也是两

2223
01:10:31,000 --> 01:10:35,000
Chef 这个 Metafor 可能还更

2224
01:10:35,000 --> 01:10:37,000
更圈一点

2225
01:10:37,000 --> 01:10:38,000
就是更绕人一点

2226
01:10:38,000 --> 01:10:40,000
就是 Chef 其实它的 Metafor

2227
01:10:40,000 --> 01:10:42,000
就是你给它准备了一个菜单

2228
01:10:42,000 --> 01:10:45,000
然后 Chef 可以按单做菜

2229
01:10:45,000 --> 01:10:47,000
Chef 这个工具可以给你按单做菜

2230
01:10:47,000 --> 01:10:50,000
而 Puppet 这个名字的 Metafor 则是

2231
01:10:50,000 --> 01:10:54,000
你管理那些计算机就好像去

2232
01:10:54,000 --> 01:10:56,000
去操纵一些木偶一样

2233
01:10:56,000 --> 01:10:57,000
提线木偶的

2234
01:10:57,000 --> 01:10:57,000
对

2235
01:10:57,000 --> 01:10:59,000
提线木偶

2236
01:10:59,000 --> 01:11:01,000
那么他们两个其实都是

2237
01:11:01,000 --> 01:11:03,000
目前是竞争关系吧应该说

2238
01:11:03,000 --> 01:11:05,000
一直都是吧

2239
01:11:05,000 --> 01:11:05,000
对

2240
01:11:05,000 --> 01:11:09,000
就是经常会有 Python 还是 Ruby

2241
01:11:09,000 --> 01:11:10,000
Puppet 还是 Chef

2242
01:11:10,000 --> 01:11:12,000
对这样也是一个 Flavor 的一个起点

2243
01:11:12,000 --> 01:11:13,000
又一个圣战

2244
01:11:13,000 --> 01:11:13,000
对

2245
01:11:13,000 --> 01:11:14,000
又一个圣战

2246
01:11:14,000 --> 01:11:18,000
但我觉得 Puppet 和 Chef 好像是没有那么

2247
01:11:19,000 --> 01:11:20,000
没有那么吵起来的

2248
01:11:20,000 --> 01:11:22,000
因为两者还是太相像了

2249
01:11:22,000 --> 01:11:25,000
他们是就是 Ruby 社区里面的东西

2250
01:11:25,000 --> 01:11:27,000
然后他们只是说在设计哲学上有所不同

2251
01:11:27,000 --> 01:11:32,000
但是因为我们反正是处于敌对阵营也不所谓

2252
01:11:32,000 --> 01:11:35,000
但是他们干什么的

2253
01:11:35,000 --> 01:11:37,000
我觉得这个是更加重要的一个问题

2254
01:11:37,000 --> 01:11:37,000
没错

2255
01:11:40,000 --> 01:11:41,000
你解释一下

2256
01:11:41,000 --> 01:11:42,000
还是你来吧

2257
01:11:43,000 --> 01:11:44,000
他们的

2258
01:11:47,000 --> 01:11:47,000
好吧

2259
01:11:47,000 --> 01:11:50,000
就是你有一个

2260
01:11:50,000 --> 01:11:55,000
我们可以把一台远程的计算机想象成一个原始材料

2261
01:11:55,000 --> 01:11:58,000
然后如果我们沿用 Chef 的

2262
01:11:59,000 --> 01:12:00,000
Metafor 的话

2263
01:12:00,000 --> 01:12:02,000
那么我要提供一个菜单

2264
01:12:03,000 --> 01:12:03,000
在这个菜单上面

2265
01:12:03,000 --> 01:12:05,000
我详细的

2266
01:12:05,000 --> 01:12:06,000
不是菜的

2267
01:12:06,000 --> 01:12:07,000
应该叫

2268
01:12:08,000 --> 01:12:11,000
做菜的那个东西叫什么

2269
01:12:12,000 --> 01:12:13,000
做菜的指令

2270
01:12:13,000 --> 01:12:14,000
菜谱

2271
01:12:14,000 --> 01:12:15,000
对菜谱

2272
01:12:15,000 --> 01:12:15,000
对

2273
01:12:15,000 --> 01:12:15,000
对

2274
01:12:15,000 --> 01:12:15,000
对

2275
01:12:15,000 --> 01:12:15,000
对

2276
01:12:15,000 --> 01:12:15,000
对

2277
01:12:15,000 --> 01:12:15,000
对

2278
01:12:15,000 --> 01:12:15,000
对

2279
01:12:15,000 --> 01:12:15,000
对

2280
01:12:15,000 --> 01:12:15,000
对

2281
01:12:15,000 --> 01:12:16,000
对

2282
01:12:16,000 --> 01:12:16,000
对

2283
01:12:16,000 --> 01:12:16,000
对

2284
01:12:16,000 --> 01:12:16,000
对

2285
01:12:16,000 --> 01:12:16,000
对

2286
01:12:16,000 --> 01:12:17,000
我要准备一个菜谱

2287
01:12:17,000 --> 01:12:17,000
对

2288
01:12:17,000 --> 01:12:18,000
对

2289
01:12:18,000 --> 01:12:19,000
告诉你在

2290
01:12:21,000 --> 01:12:25,000
为了要把这个原材料做成一个最终能用的菜

2291
01:12:25,000 --> 01:12:29,000
也就是一个最终能够跑应用程序的环境

2292
01:12:29,000 --> 01:12:32,000
我需要在整个故事中做什么

2293
01:12:32,000 --> 01:12:36,000
比如说我需要安装哪些必要的组件

2294
01:12:37,000 --> 01:12:42,000
需要这些组件的什么版本

2295
01:12:42,000 --> 01:12:46,000
然后每一个组件安装之后

2296
01:12:46,000 --> 01:12:48,000
需要做哪些配置

2297
01:12:48,000 --> 01:12:52,000
以及把所有的组件的配置做好了之后

2298
01:12:52,000 --> 01:12:55,000
怎样从什么地方把我的

2299
01:12:55,000 --> 01:12:57,000
写好的一个程序上传上去

2300
01:12:57,000 --> 01:13:00,000
然后把上传上去的程序

2301
01:13:00,000 --> 01:13:02,000
又要开启什么样服务做哪些配置

2302
01:13:02,000 --> 01:13:03,000
blah blah

2303
01:13:03,000 --> 01:13:05,000
所有这些都一步一步写下来

2304
01:13:05,000 --> 01:13:09,000
然后交给 chef 说 chef 这里是我的菜谱

2305
01:13:09,000 --> 01:13:10,000
你把我的服务器弄好

2306
01:13:10,000 --> 01:13:16,000
然后 chef 就会或者 pop it 就会替你完成这些事情

2307
01:13:16,000 --> 01:13:18,000
大概是这么一个意思

2308
01:13:18,000 --> 01:13:24,000
所以他们比之于像之前提到的 Fabric 的工具的进步之处在哪里

2309
01:13:24,000 --> 01:13:26,000
就是它提供了一种

2310
01:13:26,000 --> 01:13:30,000
比如说你用 fabric 就有点像

2311
01:13:30,000 --> 01:13:33,000
就有点像写一个程序

2312
01:13:33,000 --> 01:13:41,000
说我要在比如说你在 chef 里面反过来

2313
01:13:41,000 --> 01:13:43,000
比如说在 fabric 里面你要写说

2314
01:13:43,000 --> 01:13:49,000
首先用 ssh 远接到这一台计算机上

2315
01:13:49,000 --> 01:13:51,000
然后在那边执行一个指令

2316
01:13:51,000 --> 01:13:54,000
看看这个计算机的目前的内核版本是什么

2317
01:13:54,000 --> 01:13:58,000
然后比较内核版本和我期望的内核版本是不是一致

2318
01:13:58,000 --> 01:13:59,000
不一致的话

2319
01:13:59,000 --> 01:14:00,000
那我要执行另外一条指令

2320
01:14:00,000 --> 01:14:02,000
把内核版本升级到什么地方

2321
01:14:02,000 --> 01:14:07,000
然后再看看这台计算机上有哪些安装好的包

2322
01:14:07,000 --> 01:14:11,000
然后比较这些包和我期待的是否一致

2323
01:14:11,000 --> 01:14:13,000
如果不一致的话再执行另外一条指令

2324
01:14:13,000 --> 01:14:15,000
把这些包安装好

2325
01:14:15,000 --> 01:14:18,000
所有这些繁琐的操作其实都是为了完成一件事情

2326
01:14:18,000 --> 01:14:22,000
就是安装某一个特定版本的软件包

2327
01:14:22,000 --> 01:14:23,000
在某一个特定版本的内核上

2328
01:14:23,000 --> 01:14:24,000
对吧

2329
01:14:24,000 --> 01:14:28,000
那么在 chef 这边你所有这一切都简化完那一句

2330
01:14:28,000 --> 01:14:31,000
你告诉 chef 说这台计算机上应该有这个内核

2331
01:14:31,000 --> 01:14:32,000
然后应该有那个软件包

2332
01:14:32,000 --> 01:14:34,000
然后 chef 就会自动帮你完成这一切

2333
01:14:34,000 --> 01:14:40,000
所以它其实有一个从所谓 imparative 到 declaredtive 的

2334
01:14:40,000 --> 01:14:45,000
就是从命令式向 declaredtive 的中文是什么

2335
01:14:45,000 --> 01:14:46,000
说明式的

2336
01:14:46,000 --> 01:14:47,000
描述式

2337
01:14:47,000 --> 01:14:49,000
描述式的语言的这么一个进步

2338
01:14:49,000 --> 01:14:51,000
这么一个转向吧

2339
01:14:51,000 --> 01:14:54,000
我觉得这是最重要的进步

2340
01:14:54,000 --> 01:14:55,000
对

2341
01:14:57,000 --> 01:14:59,000
这里可能有一个小区别要说明一下

2342
01:14:59,000 --> 01:15:03,000
就是说像 fabric 这种的它的核心逻辑

2343
01:15:03,000 --> 01:15:05,000
还是在就是所谓的控制那台电脑

2344
01:15:05,000 --> 01:15:08,000
比如说你用你的笔记本上操作 fabric

2345
01:15:08,000 --> 01:15:11,000
然后去向那个原成这样你发送指令

2346
01:15:11,000 --> 01:15:12,000
然后再执行

2347
01:15:12,000 --> 01:15:15,000
就是你的控制逻辑还是在这个叫什么

2348
01:15:15,000 --> 01:15:17,000
你的控制在本机上面

2349
01:15:17,000 --> 01:15:18,000
对

2350
01:15:18,000 --> 01:15:19,000
不是在服务器上面的

2351
01:15:19,000 --> 01:15:21,000
然后像 pubb 和 chef 这两种

2352
01:15:21,000 --> 01:15:22,000
我觉得大部分情况下

2353
01:15:22,000 --> 01:15:27,000
它的控制逻辑其实已经移交到了服务器上就在运行

2354
01:15:27,000 --> 01:15:27,000
对吧

2355
01:15:27,000 --> 01:15:28,000
对

2356
01:15:28,000 --> 01:15:30,000
因为你在本机上你所做的只是下命令

2357
01:15:30,000 --> 01:15:31,000
而不是

2358
01:15:31,000 --> 01:15:32,000
对

2359
01:15:32,000 --> 01:15:34,000
或者说你做的只是描述

2360
01:15:34,000 --> 01:15:36,000
你要达到什么样的效果

2361
01:15:36,000 --> 01:15:37,000
对

2362
01:15:37,000 --> 01:15:41,000
而不是你怎么样完成我想要达到的效果

2363
01:15:41,000 --> 01:15:42,000
嗯哼

2364
01:15:42,000 --> 01:15:43,000
对

2365
01:15:44,000 --> 01:15:47,000
然后这两个工具都是 Ruby 写的

2366
01:15:47,000 --> 01:15:50,000
其实在相当长一段时间内

2367
01:15:50,000 --> 01:15:53,000
这两个也就是在在那个 devop 这个市场上

2368
01:15:53,000 --> 01:15:55,000
在主导地位的一工具

2369
01:15:55,000 --> 01:15:55,000
对

2370
01:15:55,000 --> 01:15:56,000
defectal standout

2371
01:15:56,000 --> 01:15:57,000
对

2372
01:15:57,000 --> 01:15:58,000
然后后来

2373
01:15:59,000 --> 01:16:00,000
嗯我们这个正应

2374
01:16:00,000 --> 01:16:01,000
哎不对

2375
01:16:01,000 --> 01:16:03,000
就 python 这个正应的

2376
01:16:04,000 --> 01:16:07,000
这这这些哥们们终于站不住

2377
01:16:07,000 --> 01:16:08,000
这什么

2378
01:16:08,000 --> 01:16:09,000
这忍不住了

2379
01:16:09,000 --> 01:16:10,000
因为

2380
01:16:10,000 --> 01:16:12,000
因为其实在这之前

2381
01:16:12,000 --> 01:16:15,000
Ruby 在这个服务局运为这一块

2382
01:16:15,000 --> 01:16:17,000
其实并没有多少人在用

2383
01:16:17,000 --> 01:16:18,000
照我的理解

2384
01:16:18,000 --> 01:16:18,000
就出在

2385
01:16:18,000 --> 01:16:21,000
Ruby 其实这个语言是非常有意思的一个

2386
01:16:21,000 --> 01:16:23,000
就是在 Ruby on rails 出现之前

2387
01:16:23,000 --> 01:16:25,000
Ruby 是一个没人理睬的语言

2388
01:16:25,000 --> 01:16:25,000
我觉得

2389
01:16:25,000 --> 01:16:26,000
对对对

2390
01:16:26,000 --> 01:16:28,000
就那个时候什么 zoop 呀

2391
01:16:28,000 --> 01:16:29,000
什么那个

2392
01:16:29,000 --> 01:16:31,000
就 pyson 是一个主导地位的

2393
01:16:31,000 --> 01:16:32,000
对呀

2394
01:16:32,000 --> 01:16:35,000
当前当年 zoop 可是跟什么 j 2 e

2395
01:16:35,000 --> 01:16:37,000
呃呃呃

2396
01:16:37,000 --> 01:16:40,000
jjava 一平分纠色的一个东西吧

2397
01:16:40,000 --> 01:16:40,000
对

2398
01:16:40,000 --> 01:16:44,000
就你要在服务器端完成一个大型的

2399
01:16:45,000 --> 01:16:46,000
呃应用软件

2400
01:16:46,000 --> 01:16:48,000
好像在 Ruby on rails 出现之前

2401
01:16:48,000 --> 01:16:50,000
要么 java 要么就

2402
01:16:50,000 --> 01:16:52,000
pyson 要么就就其他的什么

2403
01:16:52,000 --> 01:16:54,000
更更偏本的东西

2404
01:16:54,000 --> 01:16:56,000
但是 Ruby on rails 出现之后

2405
01:16:56,000 --> 01:16:59,000
就几乎一夜之间

2406
01:16:59,000 --> 01:17:02,000
颁导了整个开发社区的气氛

2407
01:17:02,000 --> 01:17:03,000
对

2408
01:17:03,000 --> 01:17:05,000
然后我们就看到很多这种呃

2409
01:17:05,000 --> 01:17:06,000
开发运为工具

2410
01:17:06,000 --> 01:17:07,000
都是基于 Ruby 来写的

2411
01:17:07,000 --> 01:17:10,000
而且就是那个在我还是

2412
01:17:10,000 --> 01:17:12,000
pyson 那个阵营呢

2413
01:17:12,000 --> 01:17:14,000
时候我曾经一度怀疑说

2414
01:17:14,000 --> 01:17:14,000
哎呀

2415
01:17:14,000 --> 01:17:16,000
是不是应该转向 Ruby 那个阵营呀

2416
01:17:16,000 --> 01:17:19,000
你们那么多新的有意思的工具

2417
01:17:19,000 --> 01:17:21,000
都是从那个 Ruby 阵营过来的

2418
01:17:21,000 --> 01:17:21,000
而且对

2419
01:17:21,000 --> 01:17:23,000
因为那个时候 Ruby 正在 hype 嘛

2420
01:17:23,000 --> 01:17:25,000
原来是 Ruby 一直都在 hype

2421
01:17:25,000 --> 01:17:26,000
对

2422
01:17:26,000 --> 01:17:26,000
对

2423
01:17:26,000 --> 01:17:27,000
呃

2424
01:17:27,000 --> 01:17:29,000
现在可能有要要弱一点

2425
01:17:29,000 --> 01:17:32,000
因为有像什么 note 这种工具又起来了

2426
01:17:32,000 --> 01:17:32,000
所以

2427
01:17:32,000 --> 01:17:33,000
对

2428
01:17:33,000 --> 01:17:34,000
还有 go 之类的

2429
01:17:34,000 --> 01:17:35,000
对对

2430
01:17:35,000 --> 01:17:36,000
不过

2431
01:17:36,000 --> 01:17:37,000
嗯

2432
01:17:39,000 --> 01:17:39,000
就

2433
01:17:39,000 --> 01:17:42,000
反正我这个我觉得这么说是很安全的

2434
01:17:42,000 --> 01:17:42,000
就是说

2435
01:17:42,000 --> 01:17:45,000
正是因为像 Ruby on rails 这种

2436
01:17:45,000 --> 01:17:47,000
这种框架的崛起使得

2437
01:17:47,000 --> 01:17:48,000
Ruby 在这个

2438
01:17:48,000 --> 01:17:49,000
伺服圈

2439
01:17:49,000 --> 01:17:51,000
这个 davab 这个圈子流行起来

2440
01:17:51,000 --> 01:17:54,000
然后才出现了像 puppet

2441
01:17:54,000 --> 01:17:57,000
chef 这种一系列的基于 Ruby 这个这个这个工具吧

2442
01:17:57,000 --> 01:17:58,000
如果没有这个东西

2443
01:17:58,000 --> 01:18:00,000
可能这一切都不会存在

2444
01:18:00,000 --> 01:18:00,000
没错

2445
01:18:00,000 --> 01:18:03,000
所以 Ruby on rails 其实是一个

2446
01:18:03,000 --> 01:18:04,000
公布可默的起点

2447
01:18:04,000 --> 01:18:05,000
key app

2448
01:18:05,000 --> 01:18:08,000
然后当然 Python 虽未没闲着啊

2449
01:18:08,000 --> 01:18:10,000
后来就出了两套

2450
01:18:10,000 --> 01:18:12,000
呃就那么新一代的这个

2451
01:18:12,000 --> 01:18:14,000
就是 configuration management tool 吧

2452
01:18:14,000 --> 01:18:15,000
对

2453
01:18:15,000 --> 01:18:16,000
其中一个叫做 sort

2454
01:18:16,000 --> 01:18:18,000
颜

2455
01:18:18,000 --> 01:18:20,000
然后另外叫做 ansible

2456
01:18:20,000 --> 01:18:21,000
ansible

2457
01:18:21,000 --> 01:18:22,000
ansible 是一个缩写吧

2458
01:18:22,000 --> 01:18:23,000
是

2459
01:18:24,000 --> 01:18:26,000
而且不是什么

2460
01:18:26,000 --> 01:18:27,000
你这么一问我还真不知道

2461
01:18:27,000 --> 01:18:28,000
可以查一下

2462
01:18:28,000 --> 01:18:29,000
ansible 什么意思

2463
01:18:29,000 --> 01:18:30,000
是

2464
01:18:32,000 --> 01:18:35,000
ansible is simple it automation

2465
01:18:36,000 --> 01:18:36,000
呃

2466
01:18:36,000 --> 01:18:37,000
wait a second

2467
01:18:37,000 --> 01:18:38,000
le 是哪来的

2468
01:18:43,000 --> 01:18:44,000
呃

2469
01:18:44,000 --> 01:18:47,000
对计算机借用两件最难的事情

2470
01:18:47,000 --> 01:18:49,000
一件是 kach validation

2471
01:18:49,000 --> 01:18:50,000
另一件就是 naming things

2472
01:18:51,000 --> 01:18:54,000
而比这一所有更难的一件事情

2473
01:18:54,000 --> 01:18:55,000
就是 figure out

2474
01:18:55,000 --> 01:18:58,000
这个东西是怎么被命名的

2475
01:19:00,000 --> 01:19:01,000
对

2476
01:19:01,000 --> 01:19:02,000
呃

2477
01:19:02,000 --> 01:19:04,000
这个就不去做就什么意思

2478
01:19:04,000 --> 01:19:06,000
我也没我也没没有查到

2479
01:19:06,000 --> 01:19:09,000
但是这两个都有一个共同点

2480
01:19:09,000 --> 01:19:10,000
就说呃

2481
01:19:10,000 --> 01:19:11,000
应该是说

2482
01:19:11,000 --> 01:19:13,000
不先说这个 puppet 和 chef

2483
01:19:13,000 --> 01:19:15,000
他们的这个这个编写

2484
01:19:15,000 --> 01:19:17,000
那个脚本的东西都是使用了

2485
01:19:17,000 --> 01:19:17,000
Ruby 的脚本

2486
01:19:17,000 --> 01:19:20,000
然后用那个 DSL 的方法来写

2487
01:19:20,000 --> 01:19:21,000
哇靠我查到了

2488
01:19:21,000 --> 01:19:22,000
嗯

2489
01:19:22,000 --> 01:19:23,000
是什么

2490
01:19:23,000 --> 01:19:26,000
他居然是安德游戏里面的 ansible

2491
01:19:26,000 --> 01:19:26,000
什么呀

2492
01:19:26,000 --> 01:19:27,000
就是呃

2493
01:19:27,000 --> 01:19:30,000
有有有有非常非常非常非常非常 awesome

2494
01:19:30,000 --> 01:19:31,000
史诗级别的科学小说

2495
01:19:31,000 --> 01:19:32,000
如果你没看过的话

2496
01:19:32,000 --> 01:19:34,000
一定要给我看

2497
01:19:34,000 --> 01:19:36,000
叫做安叫做安德的游戏

2498
01:19:36,000 --> 01:19:37,000
呃

2499
01:19:37,000 --> 01:19:38,000
前这次去年没拍

2500
01:19:38,000 --> 01:19:39,000
前年没

2501
01:19:39,000 --> 01:19:40,000
去年前年

2502
01:19:40,000 --> 01:19:41,000
被拍成了电影

2503
01:19:41,000 --> 01:19:42,000
谁写的

2504
01:19:42,000 --> 01:19:43,000
呃

2505
01:19:43,000 --> 01:19:45,000
scotcard

2506
01:19:45,000 --> 01:19:46,000
呃叫

2507
01:19:46,000 --> 01:19:47,000
嗯

2508
01:19:47,000 --> 01:19:48,000
卡德吧

2509
01:19:48,000 --> 01:19:50,000
我记得中文好像

2510
01:19:50,000 --> 01:19:51,000
我看端然安德的游戏

2511
01:19:51,000 --> 01:19:52,000
sorry

2512
01:19:52,000 --> 01:19:53,000
原谅我语无伦词

2513
01:19:53,000 --> 01:19:57,000
因为这部科幻小说实在是太实实级别了

2514
01:19:57,000 --> 01:19:58,000
就是

2515
01:19:58,000 --> 01:19:58,000
呃

2516
01:19:58,000 --> 01:20:00,000
作者应该叫 scotcard

2517
01:20:00,000 --> 01:20:01,000
斯科特卡德

2518
01:20:01,000 --> 01:20:03,000
然后他写了一系列

2519
01:20:03,000 --> 01:20:04,000
呃

2520
01:20:04,000 --> 01:20:06,000
有一个

2521
01:20:06,000 --> 01:20:07,000
呃

2522
01:20:07,000 --> 01:20:08,000
也不是小男孩

2523
01:20:08,000 --> 01:20:11,000
但是在安德的游戏这部书里面

2524
01:20:11,000 --> 01:20:12,000
他还是一个小男孩

2525
01:20:12,000 --> 01:20:13,000
嗯哼

2526
01:20:13,000 --> 01:20:14,000
的

2527
01:20:14,000 --> 01:20:14,000
呃

2528
01:20:14,000 --> 01:20:16,000
为主角的科幻小说

2529
01:20:16,000 --> 01:20:17,000
然后这部科幻小说

2530
01:20:17,000 --> 01:20:19,000
第一卷就叫做

2531
01:20:19,000 --> 01:20:19,000
呃

2532
01:20:19,000 --> 01:20:20,000
Enders Game

2533
01:20:20,000 --> 01:20:22,000
就是中节者的游戏

2534
01:20:22,000 --> 01:20:23,000
但是中文一般翻译成

2535
01:20:23,000 --> 01:20:24,000
安德的游戏

2536
01:20:24,000 --> 01:20:27,000
因为这个主角就叫 Ender

2537
01:20:27,000 --> 01:20:27,000
我们一起做的话

2538
01:20:27,000 --> 01:20:28,000
除了叫 Ender

2539
01:20:28,000 --> 01:20:32,000
然后他是非常非常好看的一部一部科幻片

2540
01:20:32,000 --> 01:20:33,000
呃科幻电影

2541
01:20:33,000 --> 01:20:33,000
呃

2542
01:20:33,000 --> 01:20:35,000
2003 年的时候这部电影

2543
01:20:35,000 --> 01:20:36,000
这部这个

2544
01:20:36,000 --> 01:20:36,000
这个

2545
01:20:36,000 --> 01:20:37,000
sorry

2546
01:20:37,000 --> 01:20:38,000
他是非常好看好

2547
01:20:38,000 --> 01:20:40,000
好看的

2548
01:20:40,000 --> 01:20:41,000
一部科幻小说

2549
01:20:41,000 --> 01:20:42,000
然后 203 年的时候

2550
01:20:42,000 --> 01:20:44,000
他被翻拍成了电影

2551
01:20:44,000 --> 01:20:46,000
但是电影没有援助的

2552
01:20:46,000 --> 01:20:47,000
十分之一吧

2553
01:20:47,000 --> 01:20:47,000
我觉得

2554
01:20:47,000 --> 01:20:49,000
是不是效果是很酸的

2555
01:20:49,000 --> 01:20:50,000
但是

2556
01:20:50,000 --> 01:20:52,000
援助里面的很多非常

2557
01:20:52,000 --> 01:20:54,000
让人激动或者

2558
01:20:54,000 --> 01:20:55,000
哪只难过的片段

2559
01:20:55,000 --> 01:20:58,000
其实都没有呈现的很好

2560
01:20:58,000 --> 01:20:59,000
然后这一部

2561
01:20:59,000 --> 01:21:01,000
这不是所有小说改变成电影的

2562
01:21:01,000 --> 01:21:01,000
然后小说

2563
01:21:01,000 --> 01:21:03,000
如果小说人都是这种感觉吗

2564
01:21:03,000 --> 01:21:04,000
也不记人吧

2565
01:21:04,000 --> 01:21:08,000
就是有些电影让我觉得比小说要好

2566
01:21:08,000 --> 01:21:08,000
ok

2567
01:21:08,000 --> 01:21:09,000
但

2568
01:21:09,000 --> 01:21:11,000
一时的想不出来

2569
01:21:11,000 --> 01:21:12,000
但

2570
01:21:12,000 --> 01:21:15,000
总之这部电影里面有就是讲述的是人类和

2571
01:21:15,000 --> 01:21:16,000
呃

2572
01:21:16,000 --> 01:21:18,000
一个虫族就是

2573
01:21:18,000 --> 01:21:19,000
这对

2574
01:21:19,000 --> 01:21:21,000
就有点像那个

2575
01:21:21,000 --> 01:21:21,000
是

2576
01:21:21,000 --> 01:21:23,000
新争坝里面的字的感觉

2577
01:21:23,000 --> 01:21:24,000
但是这部小说出来的时候

2578
01:21:24,000 --> 01:21:25,000
呃

2579
01:21:25,000 --> 01:21:27,000
1985 年的小说这是

2580
01:21:27,000 --> 01:21:28,000
那个时候还远远没有字

2581
01:21:28,000 --> 01:21:29,000
什么新建

2582
01:21:29,000 --> 01:21:31,000
star star trooper

2583
01:21:31,000 --> 01:21:31,000
呃

2584
01:21:31,000 --> 01:21:35,000
那个新建散兵的部科幻电影可能也可能都没有出来

2585
01:21:35,000 --> 01:21:36,000
然后

2586
01:21:36,000 --> 01:21:39,000
在里面他描写了一个人类和遥远的虫族之间的战争

2587
01:21:39,000 --> 01:21:40,000
然后

2588
01:21:40,000 --> 01:21:41,000
呃

2589
01:21:41,000 --> 01:21:44,000
其中里面有一种超光速通信工具

2590
01:21:44,000 --> 01:21:44,000
嗯

2591
01:21:44,000 --> 01:21:45,000
就叫做

2592
01:21:45,000 --> 01:21:45,000
安斯某

2593
01:21:46,000 --> 01:21:47,000
安塞波

2594
01:21:47,000 --> 01:21:48,000
所以这个名字是不来

2595
01:21:48,000 --> 01:21:49,000
ok

2596
01:21:49,000 --> 01:21:50,000
啊

2597
01:21:50,000 --> 01:21:50,000
我立刻

2598
01:21:50,000 --> 01:21:52,000
我立刻爱上了这个软件

2599
01:21:52,000 --> 01:21:54,000
哈哈哈哈

2600
01:21:54,000 --> 01:21:54,000
不不不

2601
01:21:54,000 --> 01:21:55,000
其实这里也说到一个问题啊

2602
01:21:55,000 --> 01:21:56,000
就是说

2603
01:21:56,000 --> 01:21:56,000
呃

2604
01:21:56,000 --> 01:21:57,000
为什么

2605
01:21:57,000 --> 01:21:58,000
呃

2606
01:21:58,000 --> 01:22:00,000
他们要做这个东西

2607
01:22:00,000 --> 01:22:00,000
其实

2608
01:22:00,000 --> 01:22:01,000
也是因为

2609
01:22:01,000 --> 01:22:03,000
就他们很多人抱怨这个 papir 和 chef

2610
01:22:03,000 --> 01:22:04,000
太慢了嘛

2611
01:22:04,000 --> 01:22:06,000
就是你如果你管理什么几百

2612
01:22:06,000 --> 01:22:08,000
几百什么上千台机器的时候

2613
01:22:08,000 --> 01:22:09,000
那个什么

2614
01:22:09,000 --> 01:22:10,000
归宿啊

2615
01:22:10,000 --> 01:22:12,000
就是你运行完一个脚本

2616
01:22:12,000 --> 01:22:14,000
肯定要半个小时这样

2617
01:22:14,000 --> 01:22:16,000
啊他说要从根本上解决这个问题

2618
01:22:16,000 --> 01:22:17,000
然后什么就不能

2619
01:22:17,000 --> 01:22:19,000
那些就是救不回来了

2620
01:22:19,000 --> 01:22:20,000
你要重新

2621
01:22:20,000 --> 01:22:21,000
要什么 start over

2622
01:22:21,000 --> 01:22:23,000
你才可以解决这个问题

2623
01:22:23,000 --> 01:22:25,000
然后就有这么两个

2624
01:22:25,000 --> 01:22:26,000
pipers 取来的工具啊

2625
01:22:26,000 --> 01:22:27,000
一个叫做 sort

2626
01:22:27,000 --> 01:22:27,000
一个叫安斯某

2627
01:22:27,000 --> 01:22:28,000
跟你也提了

2628
01:22:28,000 --> 01:22:30,000
然后他们的一个特点呢

2629
01:22:30,000 --> 01:22:33,000
就是用户看到的一个特点

2630
01:22:33,000 --> 01:22:35,000
就是他们的这个配置语言

2631
01:22:35,000 --> 01:22:36,000
是压毛

2632
01:22:36,000 --> 01:22:36,000
就是

2633
01:22:37,000 --> 01:22:38,000
哇

2634
01:22:38,000 --> 01:22:38,000
这要解释

2635
01:22:38,000 --> 01:22:39,000
yes another mockup

2636
01:22:39,000 --> 01:22:41,000
yes another mockup language

2637
01:22:41,000 --> 01:22:44,000
就是是一个比 xml 简单

2638
01:22:44,000 --> 01:22:45,000
然后比 jason 强大

2639
01:22:45,000 --> 01:22:46,000
然后跟 jason

2640
01:22:46,000 --> 01:22:49,000
是一个 jason 的超级的这么一个配置语言

2641
01:22:49,000 --> 01:22:49,000
嗯

2642
01:22:49,000 --> 01:22:51,000
而且他的最大用点是人类读的时候

2643
01:22:51,000 --> 01:22:53,000
也非常舒缠

2644
01:22:53,000 --> 01:22:54,000
就可以手写

2645
01:22:54,000 --> 01:22:55,000
然后可以可以

2646
01:22:55,000 --> 01:22:56,000
可以罗眼读

2647
01:22:56,000 --> 01:22:57,000
不需要接触这种工具

2648
01:22:57,000 --> 01:22:59,000
比较爽

2649
01:22:59,000 --> 01:23:00,000
读 xml 让人想死

2650
01:23:00,000 --> 01:23:00,000
对吧

2651
01:23:00,000 --> 01:23:02,000
读 vason 越好

2652
01:23:02,000 --> 01:23:06,000
但是读压毛就非常像读一个正常的人类文档

2653
01:23:06,000 --> 01:23:07,000
jason 读起来还行

2654
01:23:07,000 --> 01:23:08,000
就是写起来太费劲了

2655
01:23:08,000 --> 01:23:10,000
各种限制比较多

2656
01:23:10,000 --> 01:23:12,000
比如说不能加注释啊

2657
01:23:12,000 --> 01:23:13,000
然后 key 必须要扩起来啊

2658
01:23:13,000 --> 01:23:15,000
然后之类的

2659
01:23:15,000 --> 01:23:16,000
啊

2660
01:23:16,000 --> 01:23:18,000
这个跟 pubb 和 shap

2661
01:23:18,000 --> 01:23:19,000
他们在就起码在用的时候

2662
01:23:19,000 --> 01:23:21,000
你会很鲜面的对比

2663
01:23:21,000 --> 01:23:21,000
就是 pubb 和 shap

2664
01:23:21,000 --> 01:23:23,000
他们都是用那个 ruby 的

2665
01:23:23,000 --> 01:23:25,000
直接又是一个 class 文件嘛

2666
01:23:25,000 --> 01:23:26,000
对

2667
01:23:26,000 --> 01:23:26,000
啊

2668
01:23:26,000 --> 01:23:28,000
然后这里就有一个取舍的好

2669
01:23:28,000 --> 01:23:31,000
或者说你想为什么 pyson 是缺的人

2670
01:23:31,000 --> 01:23:32,000
不用 pyson 写呢

2671
01:23:32,000 --> 01:23:34,000
当然其中一个主要的原因是因为

2672
01:23:34,000 --> 01:23:36,000
pyson 写 ds 要并不方便

2673
01:23:36,000 --> 01:23:38,000
然后语法限制比较多

2674
01:23:38,000 --> 01:23:42,000
然后 pyson 其实本身就有点像 dsl

2675
01:23:42,000 --> 01:23:43,000
但

2676
01:23:44,000 --> 01:23:48,000
或者我觉得我知道这个描述可能非常怪异

2677
01:23:48,000 --> 01:23:51,000
但 pyson 给人的感觉就是

2678
01:23:51,000 --> 01:23:54,000
它明明是一种泛用的变成语言

2679
01:23:54,000 --> 01:23:55,000
但是你在写他的时候

2680
01:23:55,000 --> 01:23:57,000
就好像觉得自己在写某一种

2681
01:23:57,000 --> 01:23:58,000
英文

2682
01:23:58,000 --> 01:24:01,000
某一种对某一种不那么像

2683
01:24:01,000 --> 01:24:04,000
像写程序的程序

2684
01:24:04,000 --> 01:24:06,000
而 dsl 给人的感觉其实也是这样

2685
01:24:06,000 --> 01:24:07,000
嗯哼

2686
01:24:07,000 --> 01:24:11,000
但问题是说 pyson 的它的那个语法限制比较多嘛

2687
01:24:11,000 --> 01:24:12,000
比如说他对这个

2688
01:24:12,000 --> 01:24:13,000
对缩进有要求

2689
01:24:13,000 --> 01:24:16,000
然后对这个这个 block 也有要求

2690
01:24:16,000 --> 01:24:19,000
就不像 ruby 的语法那么灵活

2691
01:24:19,000 --> 01:24:19,000
这样的话

2692
01:24:19,000 --> 01:24:21,000
作为一个配置工具

2693
01:24:21,000 --> 01:24:24,000
你要求这个用户学的东西就比较多了

2694
01:24:24,000 --> 01:24:26,000
但是说我也一直没搞明白这个的

2695
01:24:26,000 --> 01:24:27,000
这个的点在哪里

2696
01:24:27,000 --> 01:24:31,000
因为你始终还是要学 pyson 这个语言才能用的嘛

2697
01:24:31,000 --> 01:24:32,000
嗯

2698
01:24:32,000 --> 01:24:33,000
不过呢

2699
01:24:33,000 --> 01:24:34,000
他用那个 yaml 这种

2700
01:24:34,000 --> 01:24:37,000
也就也是有一个比较明显的好处的

2701
01:24:37,000 --> 01:24:38,000
就是说他可以

2702
01:24:38,000 --> 01:24:39,000
啊

2703
01:24:39,000 --> 01:24:42,000
比较方便的用机器去读这些配置文件

2704
01:24:42,000 --> 01:24:44,000
然后去用机器去处理它

2705
01:24:44,000 --> 01:24:47,000
因为就和 ruby 的那种方式那种就不太一样

2706
01:24:47,000 --> 01:24:49,000
因为 ruby 那种的话

2707
01:24:49,000 --> 01:24:51,000
你必须解运行过才可以

2708
01:24:51,000 --> 01:24:51,000
对吧

2709
01:24:51,000 --> 01:24:53,000
但他并不是一个

2710
01:24:53,000 --> 01:24:54,000
就怎么讲了

2711
01:24:54,000 --> 01:24:56,000
他并不是一个就是 code is code

2712
01:24:56,000 --> 01:24:59,000
然后这个 data is data

2713
01:24:59,000 --> 01:24:59,000
对

2714
01:24:59,000 --> 01:25:01,000
他这两个是分离的

2715
01:25:01,000 --> 01:25:03,000
然后在 pyson 的这个这个 yaml 这种方式的话

2716
01:25:03,000 --> 01:25:04,000
就说 code is data

2717
01:25:04,000 --> 01:25:05,000
data is code

2718
01:25:05,000 --> 01:25:07,000
就有点这个意思在里面

2719
01:25:07,000 --> 01:25:08,000
没错

2720
01:25:08,000 --> 01:25:09,000
虽然 yaml

2721
01:25:09,000 --> 01:25:11,000
虽然 yaml 本身并不能直接执行

2722
01:25:11,000 --> 01:25:13,000
还是要依靠这个 pyson 去解析它

2723
01:25:13,000 --> 01:25:14,000
对

2724
01:25:14,000 --> 01:25:16,000
而且我觉得另外一个优点就是

2725
01:25:16,000 --> 01:25:17,000
呃在 puppet chef 里面

2726
01:25:17,000 --> 01:25:18,000
你可以

2727
01:25:18,000 --> 01:25:19,000
因为他是 dsl

2728
01:25:19,000 --> 01:25:20,000
他毕竟还是

2729
01:25:20,000 --> 01:25:21,000
他还是 ruby

2730
01:25:21,000 --> 01:25:22,000
你还是可以编程的

2731
01:25:22,000 --> 01:25:24,000
而写 yaml 的时候

2732
01:25:24,000 --> 01:25:25,000
他会强迫你

2733
01:25:25,000 --> 01:25:26,000
或者说他会提示你

2734
01:25:26,000 --> 01:25:27,000
你不能够编程

2735
01:25:27,000 --> 01:25:27,000
对

2736
01:25:27,000 --> 01:25:28,000
你不能再编程了

2737
01:25:28,000 --> 01:25:29,000
这个地方

2738
01:25:29,000 --> 01:25:30,000
你该 declarative

2739
01:25:30,000 --> 01:25:31,000
给我好好 declarative

2740
01:25:31,000 --> 01:25:34,000
你不要再那像写 chef

2741
01:25:34,000 --> 01:25:35,000
puppet

2742
01:25:35,000 --> 01:25:35,000
脚本的时候

2743
01:25:35,000 --> 01:25:37,000
你可以加入一些私货

2744
01:25:37,000 --> 01:25:37,000
你可以说

2745
01:25:37,000 --> 01:25:39,000
这个地方我要做一些东西

2746
01:25:39,000 --> 01:25:41,000
而因为我可以

2747
01:25:41,000 --> 01:25:42,000
所以我要做

2748
01:25:42,000 --> 01:25:43,000
对

2749
01:25:43,000 --> 01:25:45,000
但这个就是有时候是一个

2750
01:25:45,000 --> 01:25:46,000
怎么讲的

2751
01:25:46,000 --> 01:25:48,000
一个可维护性和异用性之间的

2752
01:25:48,000 --> 01:25:50,000
这个权衡

2753
01:25:50,000 --> 01:25:50,000
就是说

2754
01:25:50,000 --> 01:25:52,000
因为其实如果你真的去用

2755
01:25:52,000 --> 01:25:53,000
那个 ansible 这种一些

2756
01:25:53,000 --> 01:25:54,000
因为我用

2757
01:25:54,000 --> 01:25:55,000
sort 没有用过

2758
01:25:55,000 --> 01:25:56,000
就是会用过 ansible

2759
01:25:56,000 --> 01:25:58,000
就是去做一些部署

2760
01:25:58,000 --> 01:25:59,000
然后其实你真的用的

2761
01:25:59,000 --> 01:26:00,000
会发现

2762
01:26:00,000 --> 01:26:01,000
就是你有时候还是逃不掉

2763
01:26:01,000 --> 01:26:02,000
要做一些

2764
01:26:02,000 --> 01:26:03,000
比如说简单的

2765
01:26:03,000 --> 01:26:04,000
什么循环啊

2766
01:26:04,000 --> 01:26:04,000
那种

2767
01:26:04,000 --> 01:26:06,000
这种批量的操作的时候

2768
01:26:06,000 --> 01:26:07,000
你还是用很坑爹的

2769
01:26:07,000 --> 01:26:08,000
用那个 yamo 的语法

2770
01:26:08,000 --> 01:26:10,000
去写一些东西

2771
01:26:10,000 --> 01:26:11,000
但这好处就是说

2772
01:26:11,000 --> 01:26:13,000
你知道那里是在干嘛

2773
01:26:13,000 --> 01:26:15,000
然后你比较好的判断

2774
01:26:15,000 --> 01:26:18,000
用程序去判断他的那个状态

2775
01:26:18,000 --> 01:26:19,000
但是

2776
01:26:19,000 --> 01:26:20,000
但是写起来就比较

2777
01:26:20,000 --> 01:26:21,000
比较费劲

2778
01:26:21,000 --> 01:26:22,000
然后那个语法

2779
01:26:22,000 --> 01:26:24,000
因为它并不是一个完整的

2780
01:26:24,000 --> 01:26:25,000
变成语言嘛

2781
01:26:25,000 --> 01:26:27,000
就很怪异的一个状态

2782
01:26:27,000 --> 01:26:28,000
但是这个时候

2783
01:26:28,000 --> 01:26:28,000
你就用

2784
01:26:28,000 --> 01:26:30,000
如果用 ruby 这种方式去写的话

2785
01:26:30,000 --> 01:26:31,000
就会

2786
01:26:31,000 --> 01:26:32,000
就会爽很多

2787
01:26:32,000 --> 01:26:33,000
只要你这你只要你会 ruby

2788
01:26:33,000 --> 01:26:34,000
你写个循环多简单

2789
01:26:34,000 --> 01:26:34,000
对吧

2790
01:26:34,000 --> 01:26:36,000
那个所有的语法你都知道

2791
01:26:36,000 --> 01:26:37,000
然后你该操作怎么

2792
01:26:37,000 --> 01:26:39,000
就都很都很正常

2793
01:26:39,000 --> 01:26:41,000
所以这里也是一个不同的

2794
01:26:41,000 --> 01:26:41,000
这个什么

2795
01:26:41,000 --> 01:26:43,000
就是设计哲学的区别

2796
01:26:43,000 --> 01:26:44,000
我觉得

2797
01:26:44,000 --> 01:26:47,000
而且我觉得这个问题可能也不仅仅是

2798
01:26:47,000 --> 01:26:48,000
在 Encelad 这边

2799
01:26:48,000 --> 01:26:49,000
会有

2800
01:26:49,000 --> 01:26:52,000
那你刚才说的这情况让我想起了

2801
01:26:52,000 --> 01:26:53,000
就是 Angle of Jazz

2802
01:26:53,000 --> 01:26:54,000
嗯

2803
01:26:54,000 --> 01:26:58,000
Angle of Jazz 在很大一部分程度上是

2804
01:26:58,000 --> 01:27:01,000
试图去把 hmo 的语异扩展出来

2805
01:27:01,000 --> 01:27:03,000
就是 Angle of Jazz 可以自定应一个

2806
01:27:03,000 --> 01:27:04,000
channel tag

2807
01:27:04,000 --> 01:27:08,000
然后这个 channel tag 所呈现出来的东西

2808
01:27:08,000 --> 01:27:10,000
它的外观以及它的行为

2809
01:27:10,000 --> 01:27:15,000
可以通过 hmo 和 css 和 javascript 去定义

2810
01:27:15,000 --> 01:27:17,000
但是你在定义的过程中会发现

2811
01:27:17,000 --> 01:27:20,000
有时候你几乎是在用 hmo 来编程

2812
01:27:20,000 --> 01:27:25,000
就你会试图用 hmo 写一些和逻辑相关的东西

2813
01:27:25,000 --> 01:27:26,000
这个让我觉得挺不爽的

2814
01:27:26,000 --> 01:27:29,000
但很显然这也是

2815
01:27:29,000 --> 01:27:30,000
这也不是 hmo 的错

2816
01:27:30,000 --> 01:27:32,000
然后在 Encelad 这边这也不是 Yaml 的错

2817
01:27:32,000 --> 01:27:33,000
就是有时候

2818
01:27:34,000 --> 01:27:37,000
有些场景逼迫你不得不这样做

2819
01:27:37,000 --> 01:27:42,000
而工具的切分则是相对来说比较分明的

2820
01:27:42,000 --> 01:27:46,000
你不可能在这里面有那么多的灵活性

2821
01:27:46,000 --> 01:27:51,000
如果你要尊重工具之间的区别的话

2822
01:27:51,000 --> 01:27:51,000
对

2823
01:27:51,000 --> 01:27:53,000
这也是我比较担心的一个问题

2824
01:27:53,000 --> 01:27:56,000
就是特别是看到 Encelad 模板

2825
01:27:56,000 --> 01:27:58,000
就是 Yaml 以法之后的一个问题

2826
01:27:58,000 --> 01:27:59,000
就是说很有可能

2827
01:27:59,000 --> 01:28:02,000
你知道我们之前也吐槽过 java 程序源

2828
01:28:02,000 --> 01:28:05,000
因为 java 的灵活性太差

2829
01:28:05,000 --> 01:28:10,000
也本来被逼不得已使用什么 XM come 来编程了吗

2830
01:28:10,000 --> 01:28:11,000
对 没错

2831
01:28:11,000 --> 01:28:17,000
我觉得可能 Yaml 如果它之后搞不好会陷入同样的困境

2832
01:28:17,000 --> 01:28:19,000
就是被迫要用 Yaml 来编程

2833
01:28:20,000 --> 01:28:22,000
所以其实这里要吐槽一下

2834
01:28:22,000 --> 01:28:26,000
其实为什么没有用一 Lisp 写一个

2835
01:28:26,000 --> 01:28:30,000
这个配置工具就没有这个问题了

2836
01:28:30,000 --> 01:28:33,000
这个真的是 data is code is data

2837
01:28:33,000 --> 01:28:34,000
这个还真有

2838
01:28:34,000 --> 01:28:40,000
就是当然我不确定你这个是不是你真的要了

2839
01:28:40,000 --> 01:28:48,000
但是你知道基于 Lisp 的 java dialect 反而基于 JVM 的 Lisp dialect

2840
01:28:48,000 --> 01:28:49,000
closure

2841
01:28:49,000 --> 01:28:53,000
对 有一个运媒工具叫做

2842
01:28:53,000 --> 01:28:58,000
应该是叫做 Palette 就是用 closure 写的

2843
01:28:58,000 --> 01:29:02,000
然后它的配置文本其实就是它的运性脚本

2844
01:29:02,000 --> 01:29:05,000
脚本机配置去脚本

2845
01:29:05,000 --> 01:29:09,000
然后它的脚本也是可以当做 data 来处理的

2846
01:29:09,000 --> 01:29:11,000
所以没错存在这个问题了

2847
01:29:11,000 --> 01:29:13,000
对 这个东西叫 Palette

2848
01:29:13,000 --> 01:29:15,000
但是因为它需要 java dependent

2849
01:29:15,000 --> 01:29:18,000
就是你本来搞的东西可能已经非常优种了

2850
01:29:18,000 --> 01:29:20,000
然后还要加一个 java dependent

2851
01:29:20,000 --> 01:29:24,000
对 这个可能就是一个比较麻烦的问题

2852
01:29:24,000 --> 01:29:27,000
因为像如果你反而是一个东西是基于 JVM 的话

2853
01:29:27,000 --> 01:29:29,000
那你首先目标机续上

2854
01:29:29,000 --> 01:29:31,000
你至少要得有一个才可以运行的

2855
01:29:31,000 --> 01:29:31,000
对吧

2856
01:29:31,000 --> 01:29:36,000
然后 java 的启动也并不算的迅速

2857
01:29:36,000 --> 01:29:38,000
对一个那种

2858
01:29:38,000 --> 01:29:40,000
如果你是要轻量级的做一些配置

2859
01:29:40,000 --> 01:29:42,000
其实我觉得可能不是特别好的一个选择

2860
01:29:42,000 --> 01:29:49,000
对 所以 Palette 不是非常适合你一些比较中等量级的

2861
01:29:49,000 --> 01:29:53,000
尤其是如果你要部署的东西本身跟 java 没什么关系

2862
01:29:53,000 --> 01:29:57,000
图这么一个 java dependent 也简直是 pay nice

2863
01:29:57,000 --> 01:29:58,000
对 何必呢

2864
01:29:58,000 --> 01:29:58,000
真的

2865
01:30:00,000 --> 01:30:02,000
OK 那说回 Sort and Answer

2866
01:30:02,000 --> 01:30:03,000
我这两个东西

2867
01:30:03,000 --> 01:30:08,000
他们的还有在社区哲学上跟 Payping Chef 还有点不一样

2868
01:30:09,000 --> 01:30:09,000
没错

2869
01:30:10,000 --> 01:30:11,000
就你来说吧

2870
01:30:11,000 --> 01:30:14,000
至少 Sort 这个东西是比较

2871
01:30:15,000 --> 01:30:19,000
Sort 其实有点像 fabric 在某种程度上

2872
01:30:19,000 --> 01:30:21,000
只不过 Sort 会比较

2873
01:30:23,000 --> 01:30:23,000
怎么说呢

2874
01:30:23,000 --> 01:30:27,000
就更加是 fabric 的升级版本

2875
01:30:27,000 --> 01:30:30,000
就是昨天 Sort 是基于 zero mq 的

2876
01:30:30,000 --> 01:30:31,000
对

2877
01:30:31,000 --> 01:30:32,000
其他的 Payping Chef 也好

2878
01:30:32,000 --> 01:30:34,000
全都是 GUSSH

2879
01:30:34,000 --> 01:30:37,000
就是它的底层传输协议都是 Sort

2880
01:30:37,000 --> 01:30:39,000
而 Sort 则是基于 zero mq 的

2881
01:30:39,000 --> 01:30:40,000
就 mq zero mq

2882
01:30:40,000 --> 01:30:42,000
对 什么是 zero mq 你来解释一下

2883
01:30:42,000 --> 01:30:48,000
zero mq 你可以认为它是一个增强版的套节字 Socket

2884
01:30:49,000 --> 01:30:51,000
然后它可以让你做

2885
01:30:51,000 --> 01:30:53,000
因为你知道我们通常用的 TCP Sock

2886
01:30:53,000 --> 01:30:54,000
它是一个基于流的

2887
01:30:54,000 --> 01:30:55,000
基于 stream 的

2888
01:30:55,000 --> 01:30:58,000
你不知道这个流的开头结尾怎么样

2889
01:30:58,000 --> 01:30:59,000
你得去读那个内容

2890
01:30:59,000 --> 01:31:01,000
然后自己定义一些去判断

2891
01:31:01,000 --> 01:31:03,000
然后 zero mq 的话它是基于 message

2892
01:31:03,000 --> 01:31:04,000
就基于消息的

2893
01:31:04,000 --> 01:31:07,000
消息的话就是有一个固定的

2894
01:31:08,000 --> 01:31:09,000
也不叫固定常读

2895
01:31:09,000 --> 01:31:11,000
就是它是你可以每一个消息之间

2896
01:31:11,000 --> 01:31:13,000
它是有一个固定边界的

2897
01:31:13,000 --> 01:31:14,000
就是你知道消息之间消息怎么样

2898
01:31:14,000 --> 01:31:18,000
然后它可以让你做一些比较普通的

2899
01:31:18,000 --> 01:31:19,000
这种 socket 做不到的事情

2900
01:31:19,000 --> 01:31:22,000
比如说它可以让你做一个什么

2901
01:31:22,000 --> 01:31:24,000
pub sub 会做一个 q

2902
01:31:25,000 --> 01:31:28,000
这种更加丰富多样的一个拓铺结构

2903
01:31:28,000 --> 01:31:32,000
然后它的性能是非常不错的一个同性工具

2904
01:31:32,000 --> 01:31:34,000
对 broadcast actually

2905
01:31:34,000 --> 01:31:35,000
对

2906
01:31:35,000 --> 01:31:37,000
当然它最大的败笔可能是我自己的家写

2907
01:31:38,000 --> 01:31:42,000
对 它的安装和依赖会比较麻烦

2908
01:31:42,000 --> 01:31:45,000
我记得 zero mq 在什么地方读过 zero mq 的作者

2909
01:31:45,000 --> 01:31:47,000
说如果上天给他再来一次的机会

2910
01:31:47,000 --> 01:31:49,000
他会选择用 C 来重写 zero mq

2911
01:31:49,000 --> 01:31:52,000
zero mq 那个作员作者

2912
01:31:52,000 --> 01:31:56,000
就字句一把他已经就跟原来那个分裂了

2913
01:31:56,000 --> 01:31:57,000
他就自己真的用那个

2914
01:31:58,000 --> 01:31:59,000
那个 C 再写

2915
01:31:59,000 --> 01:31:59,000
C 是重写的吗

2916
01:31:59,000 --> 01:32:01,000
叫做 Nano message

2917
01:32:01,000 --> 01:32:03,000
Nano message

2918
01:32:03,000 --> 01:32:05,000
就也是那个人

2919
01:32:05,000 --> 01:32:06,000
就做的字句一把干的

2920
01:32:06,000 --> 01:32:09,000
然后 zero mq 他现在是一个

2921
01:32:09,000 --> 01:32:10,000
有一个公司来推动的事情

2922
01:32:10,000 --> 01:32:13,000
就那个作者之一他出去搞了这个东西

2923
01:32:13,000 --> 01:32:15,000
然后他就改用 C 写了

2924
01:32:15,000 --> 01:32:16,000
对

2925
01:32:16,000 --> 01:32:17,000
对

2926
01:32:18,000 --> 01:32:22,000
总之 Sart 就是一个基于 zero mq 的这样一个

2927
01:32:23,000 --> 01:32:24,000
message bus

2928
01:32:25,000 --> 01:32:27,000
来写的这么一套配置工具

2929
01:32:27,000 --> 01:32:30,000
然后它其实也是要有一台 master

2930
01:32:30,000 --> 01:32:33,000
然后 clients 在那边叫做 minions

2931
01:32:33,000 --> 01:32:38,000
就那个 dispersible meaning 里面的 minions

2932
01:32:38,000 --> 01:32:40,000
就是一群小黄人

2933
01:32:40,000 --> 01:32:41,000
对

2934
01:32:41,000 --> 01:32:41,000
香蕉人

2935
01:32:41,000 --> 01:32:42,000
对

2936
01:32:42,000 --> 01:32:42,000
然后它的

2937
01:32:42,000 --> 01:32:43,000
小冰的意思

2938
01:32:43,000 --> 01:32:44,000
对吧

2939
01:32:44,000 --> 01:32:45,000
minions

2940
01:32:45,000 --> 01:32:47,000
我怎么记得 minions 其实是普从

2941
01:32:47,000 --> 01:32:51,000
就是随着我的空我手下的小 lolo

2942
01:32:51,000 --> 01:32:53,000
被我控制的小 lolo 的这个

2943
01:32:53,000 --> 01:32:53,000
对

2944
01:32:53,000 --> 01:32:55,000
我记得这个词

2945
01:32:55,000 --> 01:32:59,000
我是从那个 dungeon keeper 里面学的

2946
01:33:00,000 --> 01:33:01,000
又暴露年龄了

2947
01:33:01,000 --> 01:33:01,000
对

2948
01:33:01,000 --> 01:33:03,000
对

2949
01:33:03,000 --> 01:33:05,000
然后 Sart 是一个相对来说

2950
01:33:05,000 --> 01:33:07,000
要比 public chef 简单多的工具

2951
01:33:07,000 --> 01:33:12,000
它整个安装过程就是在 master 上按一个宝

2952
01:33:12,000 --> 01:33:14,000
然后在 client 上按一个宝

2953
01:33:14,000 --> 01:33:14,000
然后就完了

2954
01:33:17,000 --> 01:33:21,000
而这一点可能跟 uncible 就还区别满大

2955
01:33:21,000 --> 01:33:23,000
就是 uncible 其实不需要在客户端上安装

2956
01:33:23,000 --> 01:33:24,000
任何东西的

2957
01:33:24,000 --> 01:33:28,000
但是 uncible 在服务端上安装的东西是

2958
01:33:28,000 --> 01:33:30,000
专门要写本书的

2959
01:33:30,000 --> 01:33:33,000
就也不是专门写本书

2960
01:33:33,000 --> 01:33:34,000
反正专门有一个教程来教你

2961
01:33:34,000 --> 01:33:38,000
怎么在服务端上安装一个 uncible

2962
01:33:38,000 --> 01:33:39,000
但是

2963
01:33:39,000 --> 01:33:40,000
你可以不用装

2964
01:33:40,000 --> 01:33:43,000
但是就是如果你数量不多的情况下

2965
01:33:43,000 --> 01:33:44,000
对

2966
01:33:44,000 --> 01:33:47,000
uncible 也是有企业级解决方式的

2967
01:33:47,000 --> 01:33:49,000
就是要装一个 console 什么的

2968
01:33:49,000 --> 01:33:50,000
其实这几个都是

2969
01:33:50,000 --> 01:33:51,000
就是像 public 也好

2970
01:33:51,000 --> 01:33:52,000
chef 也好

2971
01:33:52,000 --> 01:33:53,000
sort and so

2972
01:33:53,000 --> 01:33:54,000
他们都是一个共同的一个方式

2973
01:33:54,000 --> 01:33:57,000
就是说他们有一个商业公司

2974
01:33:57,000 --> 01:33:58,000
来提供这种商业级别的

2975
01:33:58,000 --> 01:34:00,000
就付费的商业支持

2976
01:34:00,000 --> 01:34:03,000
但同时就有一个开放的社区版本

2977
01:34:03,000 --> 01:34:06,000
就是所有的都是基于一个开源软件

2978
01:34:06,000 --> 01:34:08,000
然后开源社区的

2979
01:34:08,000 --> 01:34:10,000
然后做一些商业化的支持的

2980
01:34:10,000 --> 01:34:12,000
怎么用盈利模式

2981
01:34:12,000 --> 01:34:14,000
应该这么说是安全的

2982
01:34:14,000 --> 01:34:14,000
对

2983
01:34:14,000 --> 01:34:15,000
对

2984
01:34:15,000 --> 01:34:20,000
但是我记得 sort 其实也是有所谓

2985
01:34:20,000 --> 01:34:23,000
masterless meaning 的一个模式

2986
01:34:23,000 --> 01:34:26,000
我们这一期最大的问题就是

2987
01:34:26,000 --> 01:34:28,000
我们两个其实都没有什么实际的使用经验

2988
01:34:28,000 --> 01:34:30,000
而且我只用过 uncible

2989
01:34:30,000 --> 01:34:32,000
sort 其实我是没怎么用

2990
01:34:32,000 --> 01:34:35,000
应该是它比 uncible 后出现吗

2991
01:34:35,000 --> 01:34:35,000
应该是

2992
01:34:35,000 --> 01:34:36,000
对

2993
01:34:36,000 --> 01:34:36,000
对

2994
01:34:36,000 --> 01:34:37,000
其实 sort 最简单的用法

2995
01:34:37,000 --> 01:34:39,000
我不知道 uncible 能不能做这件事情

2996
01:34:39,000 --> 01:34:40,000
就是 sort 最简单的用法

2997
01:34:40,000 --> 01:34:41,000
就是比如说

2998
01:34:41,000 --> 01:34:42,000
sort 专门有一个命令

2999
01:34:42,000 --> 01:34:43,000
很容易就叫 sort

3000
01:34:43,000 --> 01:34:44,000
sort

3001
01:34:44,000 --> 01:34:47,000
然后那个

3002
01:34:47,000 --> 01:34:49,000
hostname

3003
01:34:49,000 --> 01:34:51,000
然后 hostname 可以用比如说

3004
01:34:51,000 --> 01:34:53,000
那个 asterisk

3005
01:34:53,000 --> 01:34:54,000
asterisk 就是

3006
01:34:54,000 --> 01:34:55,000
新号

3007
01:34:55,000 --> 01:35:00,000
新号来指代所有可以被

3008
01:35:00,000 --> 01:35:02,000
抵达的这个

3009
01:35:02,000 --> 01:35:03,000
minion

3010
01:35:03,000 --> 01:35:04,000
然后 sort

3011
01:35:04,000 --> 01:35:05,000
新号

3012
01:35:05,000 --> 01:35:06,000
然后 png

3013
01:35:06,000 --> 01:35:10,000
然后所有的那个

3014
01:35:10,000 --> 01:35:12,000
minion 可能都会执行 png

3015
01:35:12,000 --> 01:35:13,000
诸如此类的

3016
01:35:13,000 --> 01:35:15,000
就是它有最简单的一个用法

3017
01:35:15,000 --> 01:35:17,000
就是直接用命令行下面的 sort

3018
01:35:17,000 --> 01:35:20,000
然后你也可以在 master 上面说

3019
01:35:20,000 --> 01:35:23,000
所有的 minion

3020
01:35:23,000 --> 01:35:23,000
一起来

3021
01:35:23,000 --> 01:35:25,000
比如说 install package

3022
01:35:25,000 --> 01:35:27,000
vim

3023
01:35:27,000 --> 01:35:29,000
然后所有的 minion

3024
01:35:29,000 --> 01:35:32,000
也就会去安装 vim

3025
01:35:32,000 --> 01:35:33,000
然后接下来就是

3026
01:35:33,000 --> 01:35:35,000
你可以写一个脚本来

3027
01:35:35,000 --> 01:35:39,000
批量完成一些

3028
01:35:39,000 --> 01:35:41,000
叫做 formula

3029
01:35:41,000 --> 01:35:41,000
对

3030
01:35:41,000 --> 01:35:44,000
这个现在是不如一样叫做 formula

3031
01:35:44,000 --> 01:35:45,000
就是你可以执行一系列脚本

3032
01:35:45,000 --> 01:35:47,000
然后这些脚本叫做 formula

3033
01:35:47,000 --> 01:35:49,000
可以就有点像

3034
01:35:49,000 --> 01:35:51,000
puppet 或者是 shaft 那样

3035
01:35:51,000 --> 01:35:55,000
可以自动化完成一系列左右

3036
01:35:55,000 --> 01:35:58,000
一系列行动

3037
01:35:58,000 --> 01:35:59,000
所以为什么说

3038
01:35:59,000 --> 01:36:00,000
就是实际用的时候

3039
01:36:00,000 --> 01:36:01,000
为什么

3040
01:36:01,000 --> 01:36:03,000
这个 install 还好

3041
01:36:03,000 --> 01:36:04,000
还是这个 sort 也好

3042
01:36:04,000 --> 01:36:07,000
它会比 puppet 和 shaft 这种跑起来更快

3043
01:36:07,000 --> 01:36:10,000
这里可能要稍微解释一下

3044
01:36:10,000 --> 01:36:12,000
就说

3045
01:36:12,000 --> 01:36:14,000
因为也是刚才提到那个

3046
01:36:14,000 --> 01:36:16,000
配置语言的一个关系

3047
01:36:16,000 --> 01:36:19,000
就说 puppet 和 shaft

3048
01:36:19,000 --> 01:36:21,000
它每个机器上

3049
01:36:21,000 --> 01:36:23,000
它要跑一遍脚本

3050
01:36:23,000 --> 01:36:26,000
它跑完之后才能知道状态是否

3051
01:36:26,000 --> 01:36:27,000
达到你所要的需求

3052
01:36:27,000 --> 01:36:29,000
就每次不管做什么感动

3053
01:36:29,000 --> 01:36:31,000
它都要把脚本往外正的从头到尾跑一遍

3054
01:36:31,000 --> 01:36:33,000
但是像 sort 和 install 这两个东西

3055
01:36:33,000 --> 01:36:35,000
它是因为它的配置文件

3056
01:36:35,000 --> 01:36:36,000
是一个描述性的语言

3057
01:36:36,000 --> 01:36:38,000
不是语言

3058
01:36:38,000 --> 01:36:40,000
就是描述性的数据结构

3059
01:36:40,000 --> 01:36:42,000
这样的话它可以直接跳过中间

3060
01:36:42,000 --> 01:36:43,000
已经满足的那些东西

3061
01:36:43,000 --> 01:36:47,000
它不需要每次都执行完脚本

3062
01:36:47,000 --> 01:36:47,000
对

3063
01:36:47,000 --> 01:36:49,000
我觉得这么描述应该是正确的

3064
01:36:49,000 --> 01:36:51,000
应该是正确的

3065
01:36:51,000 --> 01:36:52,000
对

3066
01:36:52,000 --> 01:36:54,000
所以可以有很大程度上

3067
01:36:54,000 --> 01:36:59,000
可以减少每一台服务器上需要等待的时间

3068
01:36:59,000 --> 01:37:00,000
这样的话

3069
01:37:00,000 --> 01:37:01,000
可以大幅度提高部署的速度

3070
01:37:02,000 --> 01:37:03,000
没错

3071
01:37:06,000 --> 01:37:07,000
然后这几个常见 optor

3072
01:37:07,000 --> 01:37:09,000
我们就讲到这里

3073
01:37:09,000 --> 01:37:11,000
下面还有一些不常见的

3074
01:37:11,000 --> 01:37:12,000
就带过吧

3075
01:37:12,000 --> 01:37:13,000
有个什么 parl rex

3076
01:37:13,000 --> 01:37:15,000
你也写的有

3077
01:37:15,000 --> 01:37:15,000
对

3078
01:37:15,000 --> 01:37:17,000
rex 是一个

3079
01:37:18,000 --> 01:37:19,000
反正也是有集用的

3080
01:37:19,000 --> 01:37:21,000
parl 现在还有人在用吗

3081
01:37:21,000 --> 01:37:23,000
我现在就是

3082
01:37:23,000 --> 01:37:24,000
不要这样

3083
01:37:24,000 --> 01:37:25,000
这么说真的不太好

3084
01:37:25,000 --> 01:37:25,000
对

3085
01:37:25,000 --> 01:37:29,000
但是确实是不太流行的一个

3086
01:37:29,000 --> 01:37:33,000
我的前前公司安装的一套机房组件

3087
01:37:33,000 --> 01:37:34,000
我忘了是什么

3088
01:37:34,000 --> 01:37:37,000
好像是某一套电源管理系统

3089
01:37:37,000 --> 01:37:39,000
电源管理系统

3090
01:37:39,000 --> 01:37:41,000
对给了一批配置工具

3091
01:37:41,000 --> 01:37:42,000
然后就剩 parl

3092
01:37:42,000 --> 01:37:46,000
就感觉新的那些工具基本上都没有用 parl 写的了

3093
01:37:46,000 --> 01:37:47,000
对

3094
01:37:47,000 --> 01:37:51,000
parl 是一个 parl 就是 80 年的 80 年的 ruby

3095
01:37:51,000 --> 01:37:52,000
对

3096
01:37:52,000 --> 01:37:53,000
Hipedger

3097
01:37:53,000 --> 01:37:54,000
对

3098
01:37:54,000 --> 01:37:55,000
现在好像已经过期了

3099
01:37:56,000 --> 01:37:56,000
对

3100
01:37:56,000 --> 01:37:57,000
这么说应该是安全

3101
01:37:57,000 --> 01:37:58,000
不会被人喷吧

3102
01:37:58,000 --> 01:38:00,000
你再很难说

3103
01:38:00,000 --> 01:38:01,000
parl 也是有

3104
01:38:01,000 --> 01:38:04,000
我想最近我用的一个 parl 写的工具

3105
01:38:04,000 --> 01:38:05,000
还蛮意外的

3106
01:38:05,000 --> 01:38:09,000
Linode 它不是开发了一个秘密行的工具

3107
01:38:09,000 --> 01:38:11,000
让它可以不用登陆网页

3108
01:38:11,000 --> 01:38:13,000
可以直接操纵那个讯理机

3109
01:38:14,000 --> 01:38:15,000
那种就是 parl 写

3110
01:38:15,000 --> 01:38:16,000
安装过程

3111
01:38:16,000 --> 01:38:17,000
Fucking God

3112
01:38:17,000 --> 01:38:19,000
你试下在 brew 里面安装的话

3113
01:38:19,000 --> 01:38:20,000
你会发现安装过程

3114
01:38:20,000 --> 01:38:22,000
超级超级长

3115
01:38:22,000 --> 01:38:25,000
它下载可能好几百个 parl 的包

3116
01:38:25,000 --> 01:38:26,000
好开

3117
01:38:26,000 --> 01:38:27,000
天呐我就是

3118
01:38:28,000 --> 01:38:29,000
anyway

3119
01:38:30,000 --> 01:38:33,000
就是唯一一个现代一点的 parl 的用户

3120
01:38:33,000 --> 01:38:35,000
然后给我感觉是这么糟糕

3121
01:38:35,000 --> 01:38:38,000
所以你可以想而知这个后面是多么惨烈的一个状况

3122
01:38:39,000 --> 01:38:40,000
anyway

3123
01:38:40,000 --> 01:38:44,000
下面我们过度到今天最最核心的内容

3124
01:38:44,000 --> 01:38:47,000
就是 containerization

3125
01:38:47,000 --> 01:38:49,000
登登登登登登

3126
01:38:50,000 --> 01:38:50,000
这个箱解释一下

3127
01:38:50,000 --> 01:38:52,000
containerization 是什么玩意

3128
01:38:52,000 --> 01:38:53,000
就是简单叫做集装箱

3129
01:38:54,000 --> 01:38:56,000
对集装箱化

3130
01:38:56,000 --> 01:38:56,000
对集装箱化

3131
01:38:56,000 --> 01:38:57,000
对

3132
01:38:57,000 --> 01:38:59,000
但是要解释集装箱

3133
01:38:59,000 --> 01:39:00,000
可能要牵涉到

3134
01:39:00,000 --> 01:39:01,000
我们这里讲集装箱化

3135
01:39:01,000 --> 01:39:03,000
是在软件世界里面那样讲的

3136
01:39:03,000 --> 01:39:03,000
对

3137
01:39:03,000 --> 01:39:05,000
我们再讲一个 metaphor

3138
01:39:05,000 --> 01:39:07,000
但是其实在现实世界里面

3139
01:39:07,000 --> 01:39:09,000
这个 metaphor 也是同样

3140
01:39:09,000 --> 01:39:10,000
同等重要的

3141
01:39:10,000 --> 01:39:10,000
对

3142
01:39:10,000 --> 01:39:15,000
就 containerization 可能是人类最重要的发明之一

3143
01:39:15,000 --> 01:39:16,000
不可能没有之一

3144
01:39:16,000 --> 01:39:17,000
可能最重要的发明

3145
01:39:17,000 --> 01:39:18,000
不可能

3146
01:39:18,000 --> 01:39:19,000
人类最重要的发明是火

3147
01:39:19,000 --> 01:39:20,000
是好了

3148
01:39:20,000 --> 01:39:24,000
就是现代社会

3149
01:39:24,000 --> 01:39:25,000
集装箱是一个

3150
01:39:25,000 --> 01:39:27,000
如果有牌前 10 的话

3151
01:39:27,000 --> 01:39:29,000
它可能至少能列到前 5

3152
01:39:31,000 --> 01:39:31,000
好吧

3153
01:39:31,000 --> 01:39:32,000
我们来牌一牌

3154
01:39:32,000 --> 01:39:32,000
好

3155
01:39:34,000 --> 01:39:34,000
算了

3156
01:39:34,000 --> 01:39:35,000
还是不要

3157
01:39:35,000 --> 01:39:35,000
对

3158
01:39:35,000 --> 01:39:38,000
总之抽水马桶和集装箱

3159
01:39:38,000 --> 01:39:42,000
可能是彻底让我们变得文明起来的必要条件

3160
01:39:42,000 --> 01:39:43,000
两个必要条件

3161
01:39:44,000 --> 01:39:45,000
如果没有集装箱

3162
01:39:45,000 --> 01:39:47,000
就可能没有什么现代什么全球化

3163
01:39:47,000 --> 01:39:48,000
没有什么现代经济

3164
01:39:48,000 --> 01:39:51,000
我们也没有办法在这里扯什么毒子

3165
01:39:51,000 --> 01:39:52,000
没错

3166
01:39:52,000 --> 01:39:53,000
为什么呢

3167
01:39:53,000 --> 01:39:57,000
因为曾经有这么一个时代

3168
01:39:57,000 --> 01:39:59,000
甚至离我们不是特别遥远

3169
01:39:59,000 --> 01:40:01,000
就是在二战

3170
01:40:01,000 --> 01:40:02,000
应该是二战之前

3171
01:40:02,000 --> 01:40:03,000
就是大概六

3172
01:40:03,000 --> 01:40:05,000
这种话一分之两的话

3173
01:40:05,000 --> 01:40:07,000
就是 1960 年之前

3174
01:40:07,000 --> 01:40:13,000
整个世界的航运系统是

3175
01:40:13,000 --> 01:40:14,000
怎么说呢

3176
01:40:14,000 --> 01:40:15,000
分散的

3177
01:40:15,000 --> 01:40:17,000
是没有一个统一的

3178
01:40:17,000 --> 01:40:17,000
没有

3179
01:40:17,000 --> 01:40:18,000
就是这么说

3180
01:40:18,000 --> 01:40:20,000
六十年代之前

3181
01:40:20,000 --> 01:40:22,000
在集装箱发展出来之前

3182
01:40:22,000 --> 01:40:27,000
整个人类的物流系统是非常雍重和零散的

3183
01:40:27,000 --> 01:40:27,000
对

3184
01:40:27,000 --> 01:40:30,000
这里可能要一个比较形象的描述

3185
01:40:30,000 --> 01:40:33,000
就说假设我到底在德国

3186
01:40:33,000 --> 01:40:34,000
对吧

3187
01:40:34,000 --> 01:40:35,000
我在加拿大

3188
01:40:35,000 --> 01:40:38,000
然后你准备给我运 10 吨大米过来

3189
01:40:38,000 --> 01:40:39,000
举个例子

3190
01:40:39,000 --> 01:40:40,000
我们虽然不明白为什么这么干

3191
01:40:40,000 --> 01:40:42,000
但是可以讲一下这个过程

3192
01:40:42,000 --> 01:40:44,000
就是要会有多繁琐

3193
01:40:44,000 --> 01:40:47,000
因为你首先你是在一个内陆的城市

3194
01:40:47,000 --> 01:40:48,000
对吧

3195
01:40:48,000 --> 01:40:48,000
对

3196
01:40:48,000 --> 01:40:49,000
不是在海港

3197
01:40:49,000 --> 01:40:50,000
你得先把这 10 吨大米

3198
01:40:50,000 --> 01:40:51,000
想办法装到一个车上面

3199
01:40:51,000 --> 01:40:52,000
或者火车上面

3200
01:40:52,000 --> 01:40:54,000
然后火车或者是卡车

3201
01:40:54,000 --> 01:40:55,000
拖到一个都一个海港上

3202
01:40:55,000 --> 01:40:56,000
然后再装船

3203
01:40:56,000 --> 01:40:57,000
再运到我这里来

3204
01:40:57,000 --> 01:40:58,000
我这里边是

3205
01:40:58,000 --> 01:40:59,000
我这里是个港口

3206
01:40:59,000 --> 01:41:00,000
可能还好

3207
01:41:00,000 --> 01:41:01,000
但是就说你那段

3208
01:41:01,000 --> 01:41:03,000
应该主要的运输的难度

3209
01:41:03,000 --> 01:41:05,000
都已经能够覆盖得到了

3210
01:41:05,000 --> 01:41:07,000
因为米是一个小颗粒

3211
01:41:07,000 --> 01:41:08,000
散装的东西

3212
01:41:08,000 --> 01:41:09,000
这才是散的东西

3213
01:41:09,000 --> 01:41:11,000
首先第一步

3214
01:41:11,000 --> 01:41:12,000
就是你要解决一个容器的问题

3215
01:41:12,000 --> 01:41:13,000
你米是装的带子

3216
01:41:13,000 --> 01:41:14,000
还是装在桶里

3217
01:41:14,000 --> 01:41:16,000
带子和桶都有各有各的优点

3218
01:41:16,000 --> 01:41:18,000
比如说带子比较灵活

3219
01:41:18,000 --> 01:41:21,000
你可以把几袋米叠在一起

3220
01:41:21,000 --> 01:41:22,000
但是带子容易破

3221
01:41:22,000 --> 01:41:23,000
破破高市有这个问题

3222
01:41:23,000 --> 01:41:25,000
就说不是所有的地方

3223
01:41:25,000 --> 01:41:27,000
因为你装带的是要有成本的

3224
01:41:27,000 --> 01:41:28,000
带子首先本身是要成

3225
01:41:28,000 --> 01:41:29,000
10 吨大米你要装多大

3226
01:41:29,000 --> 01:41:31,000
你要装那种我们常见的

3227
01:41:31,000 --> 01:41:33,000
那种什么几十公斤的一个小带

3228
01:41:33,000 --> 01:41:35,000
你得装好几百包

3229
01:41:35,000 --> 01:41:37,000
几千包这样的

3230
01:41:37,000 --> 01:41:38,000
然后其实这个是一个

3231
01:41:38,000 --> 01:41:40,000
你装填的时候就是一个成本

3232
01:41:40,000 --> 01:41:43,000
然后如果像这种规模的运输的话

3233
01:41:43,000 --> 01:41:45,000
很多人他们都是所谓的用散货

3234
01:41:45,000 --> 01:41:48,000
就是你直接装到一个大的容器里面

3235
01:41:48,000 --> 01:41:50,000
然后就不用再分带小装的

3236
01:41:50,000 --> 01:41:52,000
然后再装过再运输这样

3237
01:41:52,000 --> 01:41:53,000
对

3238
01:41:53,000 --> 01:41:56,000
但是散货的盒子又有一个

3239
01:41:56,000 --> 01:41:57,000
又不能太大

3240
01:41:57,000 --> 01:41:58,000
又不能太小

3241
01:41:58,000 --> 01:41:59,000
散货的话

3242
01:41:59,000 --> 01:42:00,000
比如说你现在有个卡车

3243
01:42:00,000 --> 01:42:00,000
对吧

3244
01:42:00,000 --> 01:42:02,000
你先散货装那个卡车

3245
01:42:02,000 --> 01:42:04,000
上面你得想办法把那个东西

3246
01:42:04,000 --> 01:42:06,000
你给你装到那个卡车里面去

3247
01:42:06,000 --> 01:42:07,000
对吧

3248
01:42:07,000 --> 01:42:09,000
然后卡车有不同的尺寸

3249
01:42:09,000 --> 01:42:09,000
对吧

3250
01:42:09,000 --> 01:42:11,000
你可能一个车装不了

3251
01:42:11,000 --> 01:42:12,000
你还得搞几个车

3252
01:42:12,000 --> 01:42:15,000
然后 10 吨可能体现不出来

3253
01:42:15,000 --> 01:42:17,000
有些卡车 10 吨就能装上了

3254
01:42:17,000 --> 01:42:17,000
那 100 吨吧

3255
01:42:17,000 --> 01:42:19,000
我们可能要用好几卡车

3256
01:42:19,000 --> 01:42:21,000
可能卡车的形状还不一样

3257
01:42:21,000 --> 01:42:22,000
那你怎么办

3258
01:42:22,000 --> 01:42:23,000
然后你到了

3259
01:42:23,000 --> 01:42:25,000
卡车到了海岗边

3260
01:42:25,000 --> 01:42:26,000
如果你是散货的话

3261
01:42:26,000 --> 01:42:29,000
你得想办法怎么去装到一个船上

3262
01:42:29,000 --> 01:42:31,000
因为船不只装 100 吨或者 10 吨

3263
01:42:31,000 --> 01:42:33,000
你还想怎么去和其他的东西

3264
01:42:33,000 --> 01:42:35,000
共就是什么

3265
01:42:35,000 --> 01:42:36,000
就是怎么摆

3266
01:42:36,000 --> 01:42:38,000
和其他的船上其他物品

3267
01:42:38,000 --> 01:42:39,000
一些怎么摆

3268
01:42:39,000 --> 01:42:40,000
比如说你是散货的话

3269
01:42:40,000 --> 01:42:41,000
你还得考虑在海上的时候

3270
01:42:41,000 --> 01:42:43,000
下防潮怎么办

3271
01:42:43,000 --> 01:42:45,000
路上有下雨怎么办

3272
01:42:45,000 --> 01:42:45,000
对吧

3273
01:42:45,000 --> 01:42:45,000
对

3274
01:42:45,000 --> 01:42:46,000
各种各样的

3275
01:42:46,000 --> 01:42:47,000
驻虫怎么办

3276
01:42:47,000 --> 01:42:48,000
有人道歉怎么办

3277
01:42:48,000 --> 01:42:50,000
然后装货的时候还有一个很大的

3278
01:42:50,000 --> 01:42:51,000
你散货的话

3279
01:42:51,000 --> 01:42:51,000
你可能怎么装

3280
01:42:51,000 --> 01:42:54,000
你拿个最传统的时候是

3281
01:42:54,000 --> 01:42:56,000
一些人拿个什么铲子

3282
01:42:56,000 --> 01:42:57,000
一铲一铲的往上铲

3283
01:42:57,000 --> 01:42:58,000
对吧

3284
01:42:58,000 --> 01:42:58,000
对

3285
01:42:58,000 --> 01:42:59,000
你就这个

3286
01:42:59,000 --> 01:43:00,000
这不是没影吗

3287
01:43:00,000 --> 01:43:03,000
现在即便现在没船还是这样

3288
01:43:03,000 --> 01:43:05,000
没船还是这样的吗

3289
01:43:05,000 --> 01:43:05,000
对

3290
01:43:05,000 --> 01:43:07,000
航就是在蓝一河里面

3291
01:43:07,000 --> 01:43:10,000
经常还是看到一些运在铲的

3292
01:43:10,000 --> 01:43:10,000
对

3293
01:43:10,000 --> 01:43:11,000
他们不是海

3294
01:43:11,000 --> 01:43:12,000
还扔就不是有其他

3295
01:43:12,000 --> 01:43:14,000
因为扔就不是有其他

3296
01:43:14,000 --> 01:43:14,000
极光箱

3297
01:43:14,000 --> 01:43:15,000
但他们也不是用铲

3298
01:43:15,000 --> 01:43:17,000
他们是用什么卷扬机之类的

3299
01:43:17,000 --> 01:43:18,000
还是自动化了对吧

3300
01:43:18,000 --> 01:43:19,000
对

3301
01:43:19,000 --> 01:43:20,000
但是你需要有的这

3302
01:43:20,000 --> 01:43:21,000
你不可能说

3303
01:43:21,000 --> 01:43:25,000
你用运煤的东西再去运大米

3304
01:43:25,000 --> 01:43:27,000
就是你用你卷煤的东西

3305
01:43:27,000 --> 01:43:29,000
肯定不能用来卷大米

3306
01:43:29,000 --> 01:43:31,000
因为它互相污染对吧

3307
01:43:31,000 --> 01:43:31,000
对

3308
01:43:31,000 --> 01:43:32,000
所以看我们

3309
01:43:32,000 --> 01:43:34,000
就互相污染也是一个很重要的问题

3310
01:43:34,000 --> 01:43:35,000
没错

3311
01:43:35,000 --> 01:43:39,000
然后就是在每切换一次模式的

3312
01:43:39,000 --> 01:43:40,000
切换一次运输模式

3313
01:43:40,000 --> 01:43:42,000
比如说你从卡车转到船

3314
01:43:42,000 --> 01:43:44,000
或者是卡车转到火车这种模式的时候

3315
01:43:44,000 --> 01:43:45,000
你只要有一个转换的过程

3316
01:43:45,000 --> 01:43:47,000
这个就费时费力

3317
01:43:47,000 --> 01:43:49,000
而且会有损耗

3318
01:43:49,000 --> 01:43:49,000
会有损耗

3319
01:43:49,000 --> 01:43:50,000
对

3320
01:43:50,000 --> 01:43:53,000
你可能每次会铲掉一些到地上

3321
01:43:53,000 --> 01:43:55,000
或者说都铲坏了一些

3322
01:43:55,000 --> 01:43:56,000
就现在那种米是长条的

3323
01:43:57,000 --> 01:44:00,000
你铲下去可能就断成两节了

3324
01:44:00,000 --> 01:44:00,000
对吧

3325
01:44:00,000 --> 01:44:00,000
没错

3326
01:44:00,000 --> 01:44:03,000
就每一个环节都会出现这么一个问题

3327
01:44:03,000 --> 01:44:04,000
对

3328
01:44:04,000 --> 01:44:08,000
所以后来就有一个跨时代的发明

3329
01:44:08,000 --> 01:44:10,000
就集装箱就很不出事了

3330
01:44:10,000 --> 01:44:11,000
对

3331
01:44:11,000 --> 01:44:13,000
集装箱其实是我们现在司空见惯

3332
01:44:13,000 --> 01:44:16,000
但是细细想来

3333
01:44:16,000 --> 01:44:18,000
其实是一个挺瞄不起的东西

3334
01:44:18,000 --> 01:44:18,000
对

3335
01:44:18,000 --> 01:44:20,000
就它解决了刚才我们讲的一系列的问题

3336
01:44:21,000 --> 01:44:22,000
没错

3337
01:44:22,000 --> 01:44:24,000
就是你想象一个刚做的盒子

3338
01:44:24,000 --> 01:44:25,000
一个是刚做的

3339
01:44:25,000 --> 01:44:27,000
应该是刚做的盒子

3340
01:44:27,000 --> 01:44:28,000
刚做的盒子

3341
01:44:28,000 --> 01:44:29,000
你往里面放什么东西

3342
01:44:29,000 --> 01:44:31,000
然后整个盒子作为一个整体

3343
01:44:32,000 --> 01:44:34,000
可以被搬到船上

3344
01:44:34,000 --> 01:44:35,000
被放在火车上

3345
01:44:35,000 --> 01:44:36,000
被放在汽车上

3346
01:44:36,000 --> 01:44:39,000
然后甚至有

3347
01:44:39,000 --> 01:44:40,000
我记得我们家

3348
01:44:40,000 --> 01:44:41,000
因为我们家曾经从

3349
01:44:41,000 --> 01:44:43,000
蓝州搬到天津

3350
01:44:43,000 --> 01:44:46,000
那整个搬家的过程其实就是

3351
01:44:46,000 --> 01:44:47,000
买个集装箱呢

3352
01:44:47,000 --> 01:44:49,000
公司运来的一个集装箱

3353
01:44:49,000 --> 01:44:51,000
然后我们家占其中一半

3354
01:44:51,000 --> 01:44:54,000
然后另外一个邻居占其中另一半

3355
01:44:54,000 --> 01:44:55,000
然后整个集装箱被运到天津

3356
01:44:55,000 --> 01:44:58,000
然后我们再把集装箱从我们新加坡门口拆下来

3357
01:44:58,000 --> 01:44:59,000
对

3358
01:44:59,000 --> 01:45:00,000
把里面的家具一个搬出来

3359
01:45:01,000 --> 01:45:03,000
就是我们可以看到在用集装箱之后

3360
01:45:03,000 --> 01:45:06,000
首先解决了这个模式切换中间的

3361
01:45:06,000 --> 01:45:07,000
一个损耗的问题

3362
01:45:07,000 --> 01:45:07,000
就是说

3363
01:45:07,000 --> 01:45:09,000
因为集装箱你作为整体处理

3364
01:45:09,000 --> 01:45:11,000
你在从这个卡

3365
01:45:11,000 --> 01:45:13,000
你集装箱装到一个卡车上面去

3366
01:45:13,000 --> 01:45:15,000
然后再从卡车装到火车那边去

3367
01:45:15,000 --> 01:45:17,000
中间只需要一个吊一下

3368
01:45:17,000 --> 01:45:18,000
不需要再把里面东西每一个

3369
01:45:18,000 --> 01:45:20,000
一个就像你们搬家一样

3370
01:45:20,000 --> 01:45:23,000
不需要把里面每个家具架势再搬出来

3371
01:45:23,000 --> 01:45:25,000
然后再放到火车上再摆一遍

3372
01:45:25,000 --> 01:45:26,000
然后再从火车上挪下来

3373
01:45:26,000 --> 01:45:28,000
再放到船上再摆一遍

3374
01:45:28,000 --> 01:45:29,000
这样没错

3375
01:45:29,000 --> 01:45:30,000
每次切换的就是一个简单的

3376
01:45:30,000 --> 01:45:31,000
挪一下

3377
01:45:31,000 --> 01:45:32,000
吊车吊一下就好了

3378
01:45:32,000 --> 01:45:35,000
不需要也没有损耗

3379
01:45:35,000 --> 01:45:36,000
然后因为它是整个

3380
01:45:36,000 --> 01:45:37,000
它是封起来的

3381
01:45:37,000 --> 01:45:39,000
就说它可以做到什么

3382
01:45:39,000 --> 01:45:40,000
所谓的这个 weather proof

3383
01:45:40,000 --> 01:45:42,000
就是不怕

3384
01:45:42,000 --> 01:45:43,000
就是风雨无阻

3385
01:45:43,000 --> 01:45:44,000
对

3386
01:45:44,000 --> 01:45:45,000
就是因为你可以体核里面

3387
01:45:45,000 --> 01:45:47,000
你可以做一些包括家固

3388
01:45:47,000 --> 01:45:49,000
密封这些东西的

3389
01:45:49,000 --> 01:45:50,000
保温

3390
01:45:50,000 --> 01:45:50,000
对

3391
01:45:50,000 --> 01:45:51,000
而且更重要一点

3392
01:45:51,000 --> 01:45:55,000
就是你可以让收获人和送货人

3393
01:45:55,000 --> 01:45:57,000
都放心的一个一个

3394
01:45:57,000 --> 01:45:57,000
可以锁起来

3395
01:45:57,000 --> 01:45:58,000
就是它会

3396
01:45:59,000 --> 01:45:59,000
对

3397
01:45:59,000 --> 01:46:01,000
每机装箱在上船的时候会锁起来

3398
01:46:01,000 --> 01:46:02,000
然后下船的时候

3399
01:46:02,000 --> 01:46:04,000
收获人可以验证这个风雨

3400
01:46:04,000 --> 01:46:05,000
然后会拆过

3401
01:46:05,000 --> 01:46:05,000
对

3402
01:46:05,000 --> 01:46:06,000
如果被拆过了

3403
01:46:06,000 --> 01:46:07,000
可以举收

3404
01:46:07,000 --> 01:46:08,000
对

3405
01:46:08,000 --> 01:46:09,000
就跟快递

3406
01:46:09,000 --> 01:46:10,000
没错

3407
01:46:10,000 --> 01:46:12,000
而且它可以说

3408
01:46:12,000 --> 01:46:14,000
因为机装箱它是密封

3409
01:46:14,000 --> 01:46:15,000
就是每个东西可以密封起来

3410
01:46:15,000 --> 01:46:17,000
如果你对这个串味的要求更严重

3411
01:46:17,000 --> 01:46:18,000
你还可以再做一些

3412
01:46:18,000 --> 01:46:20,000
在机装箱内部再做一些特别的处理

3413
01:46:20,000 --> 01:46:21,000
对吧

3414
01:46:21,000 --> 01:46:21,000
没错

3415
01:46:21,000 --> 01:46:24,000
比如说你这可以保证让你说同一车

3416
01:46:24,000 --> 01:46:25,000
你可以一车运大米

3417
01:46:25,000 --> 01:46:26,000
一车运大份

3418
01:46:27,000 --> 01:46:29,000
就如果你真的愿意这么干

3419
01:46:29,000 --> 01:46:30,000
真的是可以这么做的

3420
01:46:30,000 --> 01:46:30,000
因为是

3421
01:46:30,000 --> 01:46:32,000
因为我们可以

3422
01:46:32,000 --> 01:46:32,000
对

3423
01:46:32,000 --> 01:46:34,000
就是完全不会互相影响

3424
01:46:34,000 --> 01:46:38,000
而且就你内部做到任何的防护处理也好

3425
01:46:38,000 --> 01:46:40,000
包括一个智冷的那些什么方法也好

3426
01:46:40,000 --> 01:46:43,000
对于运输这个船或者是卡车上

3427
01:46:43,000 --> 01:46:45,000
它都可以做到

3428
01:46:45,000 --> 01:46:47,000
它可以不用知道你内部做了什么处理

3429
01:46:47,000 --> 01:46:49,000
它不想知道这些细节

3430
01:46:49,000 --> 01:46:49,000
对

3431
01:46:49,000 --> 01:46:52,000
它有一个非常好的封装在那边

3432
01:46:52,000 --> 01:46:52,000
对

3433
01:46:52,000 --> 01:46:53,000
所以我们看看还有什么

3434
01:46:53,000 --> 01:46:54,000
就是一个

3435
01:46:54,000 --> 01:46:56,000
你的一大特性就是 isolation

3436
01:46:56,000 --> 01:46:57,000
对

3437
01:46:57,000 --> 01:46:58,000
就是隔离

3438
01:46:58,000 --> 01:46:59,000
这是很重要的一个东西

3439
01:46:59,000 --> 01:47:01,000
然后第二个就是标准化

3440
01:47:01,000 --> 01:47:01,000
就是 standard relation

3441
01:47:01,000 --> 01:47:03,000
因为所有的机装相当是

3442
01:47:03,000 --> 01:47:04,000
也不叫所有的机装

3443
01:47:04,000 --> 01:47:06,000
就它有规定的尺寸

3444
01:47:06,000 --> 01:47:08,000
就只有那么几种尺寸

3445
01:47:08,000 --> 01:47:08,000
对

3446
01:47:08,000 --> 01:47:09,000
应该我们计算的话

3447
01:47:09,000 --> 01:47:12,000
应该是短机装像 20 英寸

3448
01:47:12,000 --> 01:47:13,000
不

3449
01:47:13,000 --> 01:47:13,000
sorry

3450
01:47:13,000 --> 01:47:14,000
20 英尺

3451
01:47:14,000 --> 01:47:16,000
然后 20 英尺的柜子是短柜

3452
01:47:16,000 --> 01:47:18,000
然后 40 英尺的是长柜

3453
01:47:18,000 --> 01:47:20,000
它只有长短的区别

3454
01:47:20,000 --> 01:47:22,000
然后它的那个节面都是一样的

3455
01:47:22,000 --> 01:47:23,000
那我第二

3456
01:47:23,000 --> 01:47:25,000
我没记错的话是宽度

3457
01:47:25,000 --> 01:47:27,000
因为我要说到一本书

3458
01:47:27,000 --> 01:47:29,000
就是宽度是固定的

3459
01:47:29,000 --> 01:47:31,000
但是高度其实还是有几种标准的

3460
01:47:31,000 --> 01:47:34,000
但只不过目前所见的

3461
01:47:34,000 --> 01:47:37,000
最常见的一种就是长坤

3462
01:47:37,000 --> 01:47:40,000
应该是高度和宽度几乎一致的一个版本

3463
01:47:40,000 --> 01:47:42,000
其他的就比较小种

3464
01:47:42,000 --> 01:47:43,000
就方盒子吗

3465
01:47:43,000 --> 01:47:44,000
对

3466
01:47:44,000 --> 01:47:46,000
长条的方盒子

3467
01:47:46,000 --> 01:47:47,000
对长条的盒子

3468
01:47:47,000 --> 01:47:50,000
然后你在现在的码头和 60 英寸之前的码头

3469
01:47:51,000 --> 01:47:52,000
是完全不一样的

3470
01:47:52,000 --> 01:47:54,000
现在的码头区

3471
01:47:54,000 --> 01:47:56,000
码头区就是一大类型

3472
01:47:56,000 --> 01:47:59,000
但是 60 年代以前的码头

3473
01:47:59,000 --> 01:47:59,000
全是散货

3474
01:47:59,000 --> 01:48:00,000
对地上

3475
01:48:00,000 --> 01:48:06,000
全都是从轮船通向岸边的桥

3476
01:48:06,000 --> 01:48:07,000
然后有吊车

3477
01:48:07,000 --> 01:48:09,000
然后更重要的是

3478
01:48:09,000 --> 01:48:12,000
那个时候的码头上有非常多的码头工人

3479
01:48:12,000 --> 01:48:13,000
叫

3480
01:48:13,000 --> 01:48:16,000
他们就是码头工人叫 Docker

3481
01:48:16,000 --> 01:48:17,000
对 Docker

3482
01:48:17,000 --> 01:48:19,000
然后这些 Docker 他们的

3483
01:48:19,000 --> 01:48:25,000
最大的任务之一就是把散货从船上搬到岸上

3484
01:48:25,000 --> 01:48:27,000
或者从岸上搬到船上

3485
01:48:27,000 --> 01:48:29,000
然后这群码头工人是

3486
01:48:29,000 --> 01:48:31,000
因为他们是纯粹卖苦力的这么一群人

3487
01:48:31,000 --> 01:48:32,000
就薪水又低

3488
01:48:32,000 --> 01:48:35,000
然后为什么头的非常差

3489
01:48:35,000 --> 01:48:35,000
对

3490
01:48:35,000 --> 01:48:37,000
然后又没有什么教养

3491
01:48:37,000 --> 01:48:38,000
就成头货

3492
01:48:38,000 --> 01:48:40,000
然后更恐怖

3493
01:48:40,000 --> 01:48:40,000
对

3494
01:48:40,000 --> 01:48:42,000
他们还会结成帮派之类

3495
01:48:42,000 --> 01:48:45,000
因为天津以前就是一个码头

3496
01:48:45,000 --> 01:48:47,000
天津有一个群非常有名的

3497
01:48:47,000 --> 01:48:48,000
有一个

3498
01:48:48,000 --> 01:48:50,000
应该不是帮派

3499
01:48:50,000 --> 01:48:52,000
是一类人就叫混混

3500
01:48:52,000 --> 01:48:56,000
混混他们的发家地之一就是码头

3501
01:48:56,000 --> 01:48:56,000
码头工人

3502
01:48:56,000 --> 01:48:57,000
对

3503
01:48:58,000 --> 01:49:02,000
但是所谓在集装箱出现之后

3504
01:49:02,000 --> 01:49:05,000
这群码头工人就已经消失了

3505
01:49:05,000 --> 01:49:07,000
就他们不会需要

3506
01:49:07,000 --> 01:49:09,000
十几年的时间就完全淘汰了

3507
01:49:09,000 --> 01:49:10,000
改变一些

3508
01:49:10,000 --> 01:49:12,000
对 现在已经很难找到一个人说

3509
01:49:12,000 --> 01:49:13,000
我是在码头扛马包

3510
01:49:13,000 --> 01:49:15,000
这不可能

3511
01:49:15,000 --> 01:49:16,000
我已经就

3512
01:49:16,000 --> 01:49:18,000
可能只有在一些非常遥远的

3513
01:49:18,000 --> 01:49:19,000
小港口

3514
01:49:19,000 --> 01:49:19,000
小

3515
01:49:19,000 --> 01:49:20,000
非常小的

3516
01:49:20,000 --> 01:49:21,000
小国家或者是非常

3517
01:49:21,000 --> 01:49:24,000
甚至我们这种第三世界国家

3518
01:49:24,000 --> 01:49:25,000
中国这种第三世界国家

3519
01:49:25,000 --> 01:49:27,000
都已经可能不太存在了

3520
01:49:27,000 --> 01:49:29,000
对

3521
01:49:29,000 --> 01:49:30,000
而那个时候

3522
01:49:30,000 --> 01:49:34,000
商船水手们可以在港口上岸玩好几天

3523
01:49:34,000 --> 01:49:35,000
因为装货实在是太慢

3524
01:49:35,000 --> 01:49:36,000
对

3525
01:49:36,000 --> 01:49:39,000
现在基本上是你只能你到一个港口

3526
01:49:39,000 --> 01:49:40,000
抽两根烟

3527
01:49:40,000 --> 01:49:41,000
又得上船走

3528
01:49:41,000 --> 01:49:42,000
换个布紫就要走

3529
01:49:42,000 --> 01:49:42,000
卸完了

3530
01:49:42,000 --> 01:49:43,000
对

3531
01:49:43,000 --> 01:49:44,000
没错

3532
01:49:44,000 --> 01:49:46,000
来说回集装箱的东西本身

3533
01:49:46,000 --> 01:49:48,000
我们看在它的一些属性什么样子

3534
01:49:48,000 --> 01:49:48,000
是好的

3535
01:49:48,000 --> 01:49:50,000
刚才讲的一个就是隔离

3536
01:49:50,000 --> 01:49:51,000
assolation

3537
01:49:51,000 --> 01:49:52,000
标准化

3538
01:49:52,000 --> 01:49:53,000
刚才指存是标准化的

3539
01:49:53,000 --> 01:49:54,000
这样的话

3540
01:49:54,000 --> 01:49:55,000
标准化有什么好处

3541
01:49:55,000 --> 01:49:56,000
就是隔离的话

3542
01:49:56,000 --> 01:49:58,000
可以保证集装箱之间互不影响

3543
01:49:58,000 --> 01:50:00,000
这样我们可以把不同

3544
01:50:00,000 --> 01:50:01,000
不同

3545
01:50:01,000 --> 01:50:04,000
内含不同物品的集装箱混合摆放

3546
01:50:04,000 --> 01:50:07,000
不是之间不会影响

3547
01:50:07,000 --> 01:50:09,000
然后标准化有一个好处

3548
01:50:09,000 --> 01:50:10,000
就说除了我们

3549
01:50:10,000 --> 01:50:12,000
可以比较简单的摆转

3550
01:50:12,000 --> 01:50:13,000
因为大家指存都一样

3551
01:50:13,000 --> 01:50:14,000
就是直接是摆

3552
01:50:14,000 --> 01:50:16,000
可能摆多少摆多少摆

3553
01:50:16,000 --> 01:50:18,000
然后另外还可以共用这个

3554
01:50:18,000 --> 01:50:19,000
搬运的机械

3555
01:50:19,000 --> 01:50:20,000
比如刚才讲我们这样

3556
01:50:20,000 --> 01:50:21,000
所以装散货的话

3557
01:50:21,000 --> 01:50:22,000
你运煤的散货

3558
01:50:22,000 --> 01:50:24,000
你不能用来运大米吗

3559
01:50:24,000 --> 01:50:26,000
但是如果你用集装箱化的话

3560
01:50:26,000 --> 01:50:28,000
你运煤的机器也可以运来运大米

3561
01:50:28,000 --> 01:50:30,000
因为它都是处理集装箱而已

3562
01:50:30,000 --> 01:50:30,000
对吧

3563
01:50:30,000 --> 01:50:31,000
另外那个叫什么

3564
01:50:31,000 --> 01:50:32,000
和

3565
01:50:32,000 --> 01:50:32,000
叫什么

3566
01:50:32,000 --> 01:50:34,000
龙门吊对不对

3567
01:50:34,000 --> 01:50:34,000
叫龙门吊

3568
01:50:34,000 --> 01:50:35,000
叫 crane

3569
01:50:35,000 --> 01:50:36,000
crave

3570
01:50:36,000 --> 01:50:37,000
crave 是和

3571
01:50:37,000 --> 01:50:38,000
和

3572
01:50:38,000 --> 01:50:39,000
中文范图叫龙门吊

3573
01:50:39,000 --> 01:50:41,000
就那种码头

3574
01:50:41,000 --> 01:50:42,000
机械

3575
01:50:42,000 --> 01:50:44,000
crane 和龙门吊可能还不是完全一样

3576
01:50:44,000 --> 01:50:46,000
crane 还是要

3577
01:50:46,000 --> 01:50:47,000
crane 是一个范的东西

3578
01:50:47,000 --> 01:50:48,000
对吧

3579
01:50:48,000 --> 01:50:48,000
对

3580
01:50:48,000 --> 01:50:50,000
crane 还是包括那种

3581
01:50:50,000 --> 01:50:52,000
包括那种有一个摇臂出去的东西

3582
01:50:52,000 --> 01:50:54,000
但是龙门吊是专门指

3583
01:50:54,000 --> 01:50:56,000
那个像龙门一样的东西

3584
01:50:56,000 --> 01:50:57,000
嗯哼

3585
01:50:57,000 --> 01:50:57,000
anyway

3586
01:50:57,000 --> 01:51:00,000
所以这个就是

3587
01:51:00,000 --> 01:51:02,000
这就集装箱之后就改变了

3588
01:51:02,000 --> 01:51:03,000
这个人类的运输

3589
01:51:03,000 --> 01:51:05,000
然后才使得这个全

3590
01:51:05,000 --> 01:51:05,000
那个什么

3591
01:51:05,000 --> 01:51:08,000
中国的产品能够很快速的运到美国

3592
01:51:08,000 --> 01:51:09,000
去销售

3593
01:51:09,000 --> 01:51:11,000
这样才能在全球化

3594
01:51:11,000 --> 01:51:11,000
对

3595
01:51:11,000 --> 01:51:12,000
这就是为什么

3596
01:51:12,000 --> 01:51:13,000
我们说

3597
01:51:13,000 --> 01:51:16,000
集装箱是对中国非常重要的一个东西

3598
01:51:16,000 --> 01:51:17,000
因为如果没有集装箱的话

3599
01:51:17,000 --> 01:51:19,000
可能现在不可能有什么

3600
01:51:19,000 --> 01:51:21,000
我们还在北朝的时代

3601
01:51:21,000 --> 01:51:22,000
对

3602
01:51:22,000 --> 01:51:24,000
我们还不是什么中国世界工厂

3603
01:51:24,000 --> 01:51:25,000
这是根本不可能的

3604
01:51:25,000 --> 01:51:26,000
对

3605
01:51:26,000 --> 01:51:26,000
那个时候

3606
01:51:26,000 --> 01:51:28,000
如果没有集装箱的话

3607
01:51:28,000 --> 01:51:29,000
可能

3608
01:51:29,000 --> 01:51:30,000
别说从中国运到美国了

3609
01:51:30,000 --> 01:51:33,000
可能从江苏运到山东

3610
01:51:33,000 --> 01:51:36,000
都是非常非常不划算的一日

3611
01:51:36,000 --> 01:51:36,000
对

3612
01:51:37,000 --> 01:51:39,000
说了那么久集装箱了

3613
01:51:39,000 --> 01:51:41,000
那么其实我们还是要说一个

3614
01:51:41,000 --> 01:51:42,000
就是在软件世界里面

3615
01:51:42,000 --> 01:51:44,000
集装箱是一个什么样的概念

3616
01:51:44,000 --> 01:51:44,000
对

3617
01:51:44,000 --> 01:51:45,000
稍微等一下

3618
01:51:45,000 --> 01:51:47,000
我最后提一件事情

3619
01:51:47,000 --> 01:51:50,000
就是如果刚才我们说的这件话

3620
01:51:50,000 --> 01:51:52,000
对你没有产生太多的困扰

3621
01:51:52,000 --> 01:51:53,000
反正你觉得挺有意思的话

3622
01:51:53,000 --> 01:51:55,000
你可以去看本书叫做

3623
01:51:55,000 --> 01:51:56,000
集装箱改变事件

3624
01:51:57,000 --> 01:51:59,000
你听标题就这么

3625
01:51:59,000 --> 01:52:00,000
没错

3626
01:52:00,000 --> 01:52:02,000
它是应该也

3627
01:52:02,000 --> 01:52:03,000
是一筑

3628
01:52:03,000 --> 01:52:04,000
但是我多次中文版

3629
01:52:04,000 --> 01:52:05,000
我相信这本书还是能买得到

3630
01:52:05,000 --> 01:52:07,000
然后我回头会把这本书的

3631
01:52:08,000 --> 01:52:09,000
链接加到我们的双 notes 里面

3632
01:52:09,000 --> 01:52:10,000
OK

3633
01:52:10,000 --> 01:52:11,000
对

3634
01:52:11,000 --> 01:52:11,000
OK

3635
01:52:11,000 --> 01:52:14,000
我们现在来说软件世界里面集装箱

3636
01:52:15,000 --> 01:52:18,000
传统上我们部署的一个软件的时候

3637
01:52:18,000 --> 01:52:20,000
其实你那个服务器上面

3638
01:52:20,000 --> 01:52:21,000
是一个开放的东西

3639
01:52:21,000 --> 01:52:22,000
它是一个状态机

3640
01:52:23,000 --> 01:52:25,000
你把那个东西放进去

3641
01:52:25,000 --> 01:52:27,000
这个过程就有点像装散货

3642
01:52:27,000 --> 01:52:29,000
就是他们互相之间是有点影响的

3643
01:52:29,000 --> 01:52:31,000
而且他们怎么说呢

3644
01:52:31,000 --> 01:52:34,000
比如说你在服务器上要装一个数据库

3645
01:52:34,000 --> 01:52:36,000
然后再装一个什么你自己的软件

3646
01:52:36,000 --> 01:52:39,000
然后搞不好指不定数据库依赖的什么东西

3647
01:52:39,000 --> 01:52:41,000
和你的软件就冲突了

3648
01:52:41,000 --> 01:52:43,000
你还得想办法解决它对吧

3649
01:52:43,000 --> 01:52:45,000
它并不是一个完全隔离的一个东西

3650
01:52:45,000 --> 01:52:47,000
包括不同的应用之间

3651
01:52:47,000 --> 01:52:48,000
可能互相会对

3652
01:52:48,000 --> 01:52:50,000
可能会共享某一个文件

3653
01:52:50,000 --> 01:52:52,000
或者说数据库觉得

3654
01:52:52,000 --> 01:52:54,000
这个程序会觉得我要改那个文件

3655
01:52:54,000 --> 01:52:55,000
那个程序会觉得

3656
01:52:55,000 --> 01:52:57,000
你怎么改了我那个文件

3657
01:52:57,000 --> 01:52:57,000
对吧

3658
01:52:57,000 --> 01:52:59,000
这个东西是可能会出现的一个问题

3659
01:52:59,000 --> 01:53:02,000
然后他们对资源的

3660
01:53:03,000 --> 01:53:06,000
他们的安装方式也是一个

3661
01:53:06,000 --> 01:53:06,000
非标准化的

3662
01:53:06,000 --> 01:53:08,000
就是说你安装数据库的方法

3663
01:53:08,000 --> 01:53:10,000
和你安装一个什么

3664
01:53:10,000 --> 01:53:12,000
Tomcat 的方法可能并不一样

3665
01:53:12,000 --> 01:53:13,000
对

3666
01:53:13,000 --> 01:53:14,000
这回到我们上一期讲的内容

3667
01:53:14,000 --> 01:53:19,000
就是可能两个软件所需要的

3668
01:53:19,000 --> 01:53:20,000
包管理系统是完全不一样的

3669
01:53:20,000 --> 01:53:23,000
就会出现这种不一致的一个状况

3670
01:53:23,000 --> 01:53:25,000
所以如果我们能够把刚才讲的

3671
01:53:25,000 --> 01:53:27,000
集装相当几个概念拿起来

3672
01:53:27,000 --> 01:53:30,000
拿过来用到这个软件部署里面

3673
01:53:30,000 --> 01:53:32,000
是不是就会情况好好很多呢

3674
01:53:32,000 --> 01:53:35,000
我们能不能说装个软件就好像

3675
01:53:36,000 --> 01:53:36,000
怎么讲

3676
01:53:36,000 --> 01:53:40,000
你直接就把他那个文件传上去就好了

3677
01:53:40,000 --> 01:53:41,000
或者只是同一个命令就好

3678
01:53:41,000 --> 01:53:43,000
他互相之间绝对不会干扰

3679
01:53:43,000 --> 01:53:44,000
对

3680
01:53:44,000 --> 01:53:45,000
就之前的思考可能是说

3681
01:53:45,000 --> 01:53:47,000
这一传货

3682
01:53:47,000 --> 01:53:51,000
就是如果说一台计算机是一艘船的话

3683
01:53:51,000 --> 01:53:54,000
那么可能说这艘船上装了一群猪

3684
01:53:54,000 --> 01:53:56,000
然后又装了一坨米

3685
01:53:56,000 --> 01:53:59,000
然后之前的思考可能是把舱石里面的

3686
01:53:59,000 --> 01:54:00,000
这一块画给猪

3687
01:54:00,000 --> 01:54:01,000
然后另一部分画给米

3688
01:54:01,000 --> 01:54:01,000
对

3689
01:54:01,000 --> 01:54:03,000
但是此时就有一个问题

3690
01:54:03,000 --> 01:54:05,000
就是他们两个有可能是互相影响的

3691
01:54:05,000 --> 01:54:07,000
就万一猪全翻了

3692
01:54:07,000 --> 01:54:09,000
然后猪跑出来把米择了

3693
01:54:09,000 --> 01:54:13,000
那你说你是救猪还是救米

3694
01:54:13,000 --> 01:54:15,000
但是 contentization 就有点

3695
01:54:19,000 --> 01:54:21,000
其实这类比不是特别的合适

3696
01:54:21,000 --> 01:54:22,000
因为真正的 contentization

3697
01:54:22,000 --> 01:54:26,000
其实是把猪和米分别装了两条船

3698
01:54:26,000 --> 01:54:27,000
不错

3699
01:54:27,000 --> 01:54:30,000
是装到两个盒子里面

3700
01:54:30,000 --> 01:54:33,000
但这两个盒子在 contentization 的世界

3701
01:54:33,000 --> 01:54:36,000
就是如果是 proper 像 Docker 这样的 contentation

3702
01:54:36,000 --> 01:54:39,000
他们两个其实跑在两个不同的虚拟机上

3703
01:54:39,000 --> 01:54:41,000
他们实际上不存在

3704
01:54:41,000 --> 01:54:44,000
他们是在同一个虚拟机

3705
01:54:44,000 --> 01:54:45,000
同一个机器里面

3706
01:54:45,000 --> 01:54:47,000
但是只是在不同的子区域里面

3707
01:54:47,000 --> 01:54:48,000
啊

3708
01:54:48,000 --> 01:54:48,000
ok

3709
01:54:48,000 --> 01:54:49,000
对

3710
01:54:49,000 --> 01:54:50,000
好吧

3711
01:54:50,000 --> 01:54:52,000
anyway

3712
01:54:52,000 --> 01:54:53,000
就说

3713
01:54:53,000 --> 01:54:55,000
然后我们还想如果能够所有软件

3714
01:54:55,000 --> 01:54:56,000
都不要去说

3715
01:54:56,000 --> 01:54:59,000
我那个数据库要有什么 APT 来装

3716
01:54:59,000 --> 01:55:00,000
然后你这个应用程序

3717
01:55:00,000 --> 01:55:02,000
要用一个自己的方法来装

3718
01:55:02,000 --> 01:55:04,000
不要搞这些麻烦的方法

3719
01:55:04,000 --> 01:55:05,000
不要搞 32 种不同的安装方式

3720
01:55:05,000 --> 01:55:06,000
对吧

3721
01:55:06,000 --> 01:55:09,000
我们所有的方案都用同一种方式

3722
01:55:09,000 --> 01:55:10,000
安装过去

3723
01:55:10,000 --> 01:55:11,000
这样不就更好

3724
01:55:11,000 --> 01:55:12,000
对吧

3725
01:55:12,000 --> 01:55:12,000
对

3726
01:55:12,000 --> 01:55:15,000
所以最先实践这种想法的

3727
01:55:15,000 --> 01:55:17,000
其实也有叫做虚拟机这个概念

3728
01:55:17,000 --> 01:55:18,000
对吧

3729
01:55:18,000 --> 01:55:18,000
对

3730
01:55:18,000 --> 01:55:19,000
虚拟机能够

3731
01:55:19,000 --> 01:55:20,000
虚拟机里面

3732
01:55:20,000 --> 01:55:22,000
然后有一个叫做 Virtual Appliance

3733
01:55:22,000 --> 01:55:23,000
这么一个概念

3734
01:55:23,000 --> 01:55:24,000
我不知道

3735
01:55:24,000 --> 01:55:25,000
比如说大陆用 Virtual Box

3736
01:55:25,000 --> 01:55:26,000
应该可能看到有这么一个

3737
01:55:26,000 --> 01:55:29,000
ImportApplies 这么一个东西

3738
01:55:29,000 --> 01:55:29,000
什么意思呢

3739
01:55:29,000 --> 01:55:32,000
就是说我们部署软件的单位

3740
01:55:32,000 --> 01:55:34,000
不再是某一个软件

3741
01:55:34,000 --> 01:55:35,000
某一个应用

3742
01:55:35,000 --> 01:55:36,000
某一个应用为单位了

3743
01:55:36,000 --> 01:55:39,000
而是说我们整个把这个应用

3744
01:55:39,000 --> 01:55:40,000
所需要的所有环境

3745
01:55:40,000 --> 01:55:41,000
包括它的操作系统

3746
01:55:42,000 --> 01:55:43,000
包括它所谓依赖的文件

3747
01:55:43,000 --> 01:55:44,000
包括它的数据

3748
01:55:44,000 --> 01:55:46,000
还有它的什么

3749
01:55:48,000 --> 01:55:49,000
各种各样

3750
01:55:49,000 --> 01:55:50,000
它需要依赖的环境

3751
01:55:50,000 --> 01:55:52,000
打包成一个虚拟机

3752
01:55:52,000 --> 01:55:55,000
然后再部署到某一个实体的

3753
01:55:55,000 --> 01:55:56,000
物理的服务器

3754
01:55:56,000 --> 01:55:57,000
这样去运行

3755
01:55:57,000 --> 01:55:58,000
这个在很长的时间里面

3756
01:55:58,000 --> 01:56:00,000
大家都是这么

3757
01:56:00,000 --> 01:56:02,000
就像 YAMAX 的 EC 2

3758
01:56:03,000 --> 01:56:04,000
就这方式来做的

3759
01:56:04,000 --> 01:56:07,000
就说我把我的应用都打包成一个

3760
01:56:07,000 --> 01:56:08,000
完整的虚拟机

3761
01:56:08,000 --> 01:56:11,000
然后我需要用的时候

3762
01:56:11,000 --> 01:56:12,000
我就开一个虚拟机

3763
01:56:12,000 --> 01:56:13,000
让它跑起来就好了

3764
01:56:13,000 --> 01:56:14,000
然后我也不去改

3765
01:56:14,000 --> 01:56:15,000
虚拟机里面的内容

3766
01:56:15,000 --> 01:56:17,000
就是只要它运行就好了

3767
01:56:17,000 --> 01:56:18,000
然后如果不需要

3768
01:56:18,000 --> 01:56:19,000
我就把这个虚拟机关上

3769
01:56:20,000 --> 01:56:21,000
对吧

3770
01:56:21,000 --> 01:56:21,000
对

3771
01:56:21,000 --> 01:56:22,000
这个就实现了我们刚才讲的

3772
01:56:22,000 --> 01:56:23,000
什么标准化

3773
01:56:23,000 --> 01:56:24,000
因为所有的都是

3774
01:56:24,000 --> 01:56:25,000
不管里面装什么

3775
01:56:25,000 --> 01:56:25,000
对

3776
01:56:25,000 --> 01:56:26,000
就是你这开发者

3777
01:56:26,000 --> 01:56:28,000
只要负责建好这个虚拟机

3778
01:56:28,000 --> 01:56:29,000
我运行的时候

3779
01:56:29,000 --> 01:56:31,000
我只负责开关这个虚拟机就好了

3780
01:56:31,000 --> 01:56:32,000
然后如果某一个虚拟机坏了

3781
01:56:32,000 --> 01:56:34,000
我就把它关掉

3782
01:56:34,000 --> 01:56:35,000
然后再另外开个新的

3783
01:56:35,000 --> 01:56:38,000
就实现了标准化和隔离

3784
01:56:38,000 --> 01:56:39,000
这个确实是好的

3785
01:56:40,000 --> 01:56:42,000
也在相当长的时间内

3786
01:56:42,000 --> 01:56:44,000
我们都知道很多厂商都是

3787
01:56:44,000 --> 01:56:45,000
甚至到现在都是主流吧

3788
01:56:45,000 --> 01:56:46,000
可以说

3789
01:56:46,000 --> 01:56:47,000
对

3790
01:56:47,000 --> 01:56:47,000
就是到目前为止

3791
01:56:47,000 --> 01:56:48,000
它还是一个

3792
01:56:48,000 --> 01:56:50,000
基本上有半壁江山这么一个状态

3793
01:56:50,000 --> 01:56:51,000
对

3794
01:56:51,000 --> 01:56:52,000
但是虚拟机有一个什么问题

3795
01:56:52,000 --> 01:56:55,000
就是它的资源损耗是比较高的

3796
01:56:55,000 --> 01:56:57,000
因为你想象应该虚拟机的话

3797
01:56:57,000 --> 01:56:59,000
你其实要首先你要虚拟一个操作系统

3798
01:56:59,000 --> 01:56:59,000
对吧

3799
01:56:59,000 --> 01:57:00,000
对

3800
01:57:00,000 --> 01:57:01,000
我们看虚拟一个操作系统

3801
01:57:01,000 --> 01:57:02,000
你要至少

3802
01:57:02,000 --> 01:57:04,000
哪怕你最精简的一个 Linux

3803
01:57:04,000 --> 01:57:05,000
也比较最近简单

3804
01:57:05,000 --> 01:57:07,000
就是一个正常的一个 Linux 的发行版

3805
01:57:07,000 --> 01:57:08,000
你运行起来

3806
01:57:08,000 --> 01:57:13,000
可能都需要占掉个几百两三百兆的内存

3807
01:57:13,000 --> 01:57:15,000
就是内存的 overhead

3808
01:57:15,000 --> 01:57:16,000
可以再小一点

3809
01:57:16,000 --> 01:57:16,000
但对

3810
01:57:16,000 --> 01:57:18,000
就至少是在一两百

3811
01:57:18,000 --> 01:57:19,000
这个两三百这个范围内

3812
01:57:19,000 --> 01:57:21,000
然后一满磁盘空间

3813
01:57:21,000 --> 01:57:23,000
你可能每个虚拟机至少

3814
01:57:23,000 --> 01:57:25,000
装完系统都是至少是一两个 G 的

3815
01:57:25,000 --> 01:57:26,000
然后再装你的应用

3816
01:57:26,000 --> 01:57:27,000
又是一堆空间在哪里

3817
01:57:27,000 --> 01:57:28,000
对

3818
01:57:28,000 --> 01:57:30,000
然后这个虚拟机运行的时候

3819
01:57:30,000 --> 01:57:34,000
因为它是在之前没有这个硬件虚拟的

3820
01:57:34,000 --> 01:57:37,000
就是没有这个这个硬件支持的情况下

3821
01:57:37,000 --> 01:57:38,000
虚拟机的运行效率还会打折

3822
01:57:38,000 --> 01:57:39,000
对吧

3823
01:57:39,000 --> 01:57:41,000
因为你虚拟机要代码

3824
01:57:41,000 --> 01:57:43,000
是在一个虚拟的环境里面运行的

3825
01:57:43,000 --> 01:57:46,000
还要再转化成那个真实的

3826
01:57:46,000 --> 01:57:47,000
在硬件上运行的代码

3827
01:57:47,000 --> 01:57:49,000
还要是因为一层转化

3828
01:57:49,000 --> 01:57:50,000
但后来有这个芯片

3829
01:57:50,000 --> 01:57:52,000
这个 CPU 级别的虚拟的话

3830
01:57:52,000 --> 01:57:54,000
支持这个情况会好很多

3831
01:57:54,000 --> 01:57:56,000
但是并不是完全是一个无碍的

3832
01:57:56,000 --> 01:57:58,000
特别是在面对 IO

3833
01:57:58,000 --> 01:58:00,000
内存读写这一块的时候

3834
01:58:00,000 --> 01:58:02,000
还是有一个比较大的平静

3835
01:58:02,000 --> 01:58:02,000
对

3836
01:58:02,000 --> 01:58:05,000
它只是解决了计算能力的方面的问题

3837
01:58:05,000 --> 01:58:07,000
但没有解决 IO 方面的

3838
01:58:07,000 --> 01:58:07,000
对

3839
01:58:07,000 --> 01:58:08,000
损耗还是很大的

3840
01:58:08,000 --> 01:58:11,000
就是应该有一个比较

3841
01:58:11,000 --> 01:58:12,000
怎么说

3842
01:58:12,000 --> 01:58:13,000
一个默认的数字吧

3843
01:58:13,000 --> 01:58:16,000
就是可能是 1%到 20%这么一个损耗

3844
01:58:16,000 --> 01:58:18,000
就性能上的损耗

3845
01:58:18,000 --> 01:58:21,000
就然后这个虚拟机的在启动的时候

3846
01:58:21,000 --> 01:58:21,000
也比较慢

3847
01:58:21,000 --> 01:58:22,000
比如说你开一个虚拟机

3848
01:58:22,000 --> 01:58:24,000
你只要等它没超过一些种

3849
01:58:24,000 --> 01:58:25,000
完全不得一遍

3850
01:58:25,000 --> 01:58:28,000
至少你最快的一个 2 30 秒

3851
01:58:28,000 --> 01:58:31,000
我会我们看到一般的一个发行版

3852
01:58:31,000 --> 01:58:32,000
对

3853
01:58:32,000 --> 01:58:34,000
所以就有人在想说

3854
01:58:34,000 --> 01:58:36,000
我们能不能够在保留虚拟机

3855
01:58:36,000 --> 01:58:37,000
那些好处

3856
01:58:37,000 --> 01:58:38,000
比如说隔离

3857
01:58:38,000 --> 01:58:40,000
然后标准化这些好处

3858
01:58:40,000 --> 01:58:41,000
同时解决它的问题

3859
01:58:41,000 --> 01:58:44,000
就是说它的能够让它更加快速的启动

3860
01:58:44,000 --> 01:58:47,000
然后就不再说说几十秒

3861
01:58:47,000 --> 01:58:48,000
我们能不能做到几十毫秒

3862
01:58:48,000 --> 01:58:50,000
或者几百毫秒的级别的启动

3863
01:58:50,000 --> 01:58:51,000
或者是杀掉它

3864
01:58:51,000 --> 01:58:52,000
然后我们同时能够

3865
01:58:52,000 --> 01:58:56,000
不去浪费那么多的资源

3866
01:58:56,000 --> 01:58:57,000
在虚拟机本身上面

3867
01:58:57,000 --> 01:58:59,000
是把资源集中到应用上面去跑

3868
01:59:00,000 --> 01:59:03,000
于是就有 container 这个概念

3869
01:59:03,000 --> 01:59:04,000
就是就横空出事了

3870
01:59:05,000 --> 01:59:06,000
终于说了

3871
01:59:07,000 --> 01:59:08,000
终于说到 container

3872
01:59:08,000 --> 01:59:10,000
就是集装箱这个概念

3873
01:59:10,000 --> 01:59:11,000
对

3874
01:59:11,000 --> 01:59:16,000
然后这个趋势也被一些人称为所谓

3875
01:59:16,000 --> 01:59:18,000
Docapocalypse

3876
01:59:19,000 --> 01:59:19,000
就是

3877
01:59:21,000 --> 01:59:23,000
它是一种灾难性的

3878
01:59:23,000 --> 01:59:25,000
就是在某些传统主义者的人

3879
01:59:25,000 --> 01:59:28,000
看来这是某种灾难性的变革

3880
01:59:28,000 --> 01:59:33,000
就是程序和机和跑

3881
01:59:33,000 --> 01:59:36,000
它和它所运行的环境之间的隔离

3882
01:59:36,000 --> 01:59:38,000
变得越来越

3883
01:59:39,000 --> 01:59:39,000
越来越

3884
01:59:39,000 --> 01:59:42,000
就是有些人是不喜欢这样多出来的

3885
01:59:42,000 --> 01:59:44,000
这一层的隔离和抽象的

3886
01:59:45,000 --> 01:59:47,000
但是目前看来

3887
01:59:48,000 --> 01:59:49,000
这个趋势的确是

3888
01:59:51,000 --> 01:59:53,000
带来优势要远远大于

3889
01:59:53,000 --> 01:59:54,000
它所损失的一点

3890
01:59:54,000 --> 01:59:56,000
就是你们不能在和一个

3891
01:59:56,000 --> 02:00:00,000
比较 native 的环境所互通

3892
02:00:00,000 --> 02:00:01,000
而带来的便利的

3893
02:00:02,000 --> 02:00:02,000
对

3894
02:00:04,000 --> 02:00:05,000
那记得说这个 Docapocalypse

3895
02:00:05,000 --> 02:00:09,000
最开始的时候是 Linux 有一个内核的一些功能

3896
02:00:09,000 --> 02:00:11,000
叫做 sigroups

3897
02:00:11,000 --> 02:00:11,000
对

3898
02:00:11,000 --> 02:00:12,000
Control Groups

3899
02:00:12,000 --> 02:00:13,000
Ctrl Groups

3900
02:00:13,000 --> 02:00:13,000
没错

3901
02:00:13,000 --> 02:00:14,000
对

3902
02:00:14,000 --> 02:00:15,000
它能做些什么事呢

3903
02:00:15,000 --> 02:00:19,000
它可以让你在一个 Linux 的系统上面

3904
02:00:19,000 --> 02:00:23,000
去划分出一群进程

3905
02:00:23,000 --> 02:00:24,000
然后让它们

3906
02:00:24,000 --> 02:00:26,000
让它们

3907
02:00:26,000 --> 02:00:27,000
不叫划分出一群进程

3908
02:00:27,000 --> 02:00:30,000
应该是做一个容器

3909
02:00:30,000 --> 02:00:31,000
就刚才讲的 container

3910
02:00:31,000 --> 02:00:33,000
然后你可以显示这个容器

3911
02:00:33,000 --> 02:00:35,000
它能够使用的资源的比率

3912
02:00:36,000 --> 02:00:37,000
然后你可以现在

3913
02:00:37,000 --> 02:00:39,000
你可以让容器之间互相隔离

3914
02:00:39,000 --> 02:00:41,000
sigroups 好像一开始

3915
02:00:41,000 --> 02:00:43,000
就叫什么 process container 之类的一个名字

3916
02:00:43,000 --> 02:00:46,000
但后来才改成 Control Groups

3917
02:00:46,000 --> 02:00:46,000
对

3918
02:00:46,000 --> 02:00:49,000
因为有一个什么命名上的冲突

3919
02:00:49,000 --> 02:00:49,000
我后来忘了

3920
02:00:52,000 --> 02:00:52,000
OK

3921
02:00:52,000 --> 02:00:56,000
我觉得有可能是那个时候觉得 container 这个词指的

3922
02:00:56,000 --> 02:00:58,000
太指位太不明了

3923
02:00:59,000 --> 02:01:00,000
太不明确了

3924
02:01:00,000 --> 02:01:01,000
所以才改成 Control Groups

3925
02:01:01,000 --> 02:01:03,000
因为在 Linux 世界里面好像

3926
02:01:03,000 --> 02:01:06,000
GOOG 这个概念更容易理解一下

3927
02:01:09,000 --> 02:01:12,000
之前就说有这么一个内核的支持

3928
02:01:12,000 --> 02:01:16,000
你可以划分出资源的限制

3929
02:01:16,000 --> 02:01:17,000
互相之间他们是不可以

3930
02:01:17,000 --> 02:01:19,000
比如说不可以法问的

3931
02:01:19,000 --> 02:01:23,000
还可以限制它只能使用多少比例的 CPU

3932
02:01:23,000 --> 02:01:24,000
然后多少比例的内存这样

3933
02:01:25,000 --> 02:01:29,000
这样就可以在很大程度上实现说

3934
02:01:29,000 --> 02:01:31,000
我们运行的时候互相不干扰

3935
02:01:32,000 --> 02:01:32,000
对

3936
02:01:32,000 --> 02:01:34,000
甚至不都不知道别人的存在

3937
02:01:34,000 --> 02:01:34,000
对

3938
02:01:34,000 --> 02:01:35,000
甚至不知道对方的存在

3939
02:01:35,000 --> 02:01:36,000
就是对于我来说

3940
02:01:36,000 --> 02:01:39,000
我以为我这个程序

3941
02:01:39,000 --> 02:01:41,000
已经认为我是在这台机场

3942
02:01:41,000 --> 02:01:42,000
运行的唯一的程序

3943
02:01:42,000 --> 02:01:43,000
但其实不是

3944
02:01:43,000 --> 02:01:45,000
但也用的不是虚拟机的方法

3945
02:01:45,000 --> 02:01:47,000
这样的话就有一个好处

3946
02:01:47,000 --> 02:01:49,000
就说它没有虚拟机那些损耗

3947
02:01:49,000 --> 02:01:51,000
比如没有转化

3948
02:01:51,000 --> 02:01:52,000
也曾因为所有东西

3949
02:01:52,000 --> 02:01:54,000
都是还是直接在硬件上运行的

3950
02:01:54,000 --> 02:01:55,000
对

3951
02:01:55,000 --> 02:01:58,000
但是还有一个要解决的问题

3952
02:01:58,000 --> 02:01:59,000
就是说那磁盘怎么办

3953
02:01:59,000 --> 02:02:01,000
就是还有一个文件系统对吧

3954
02:02:01,000 --> 02:02:03,000
然后 CGROPE

3955
02:02:03,000 --> 02:02:04,000
Control Groups 它还有一个

3956
02:02:04,000 --> 02:02:06,000
就是还能够划分不同的文件

3957
02:02:06,000 --> 02:02:08,000
就是让不同的进程

3958
02:02:08,000 --> 02:02:11,000
看到的自己的文件的目录数

3959
02:02:11,000 --> 02:02:14,000
是唯一是独立的分格的

3960
02:02:14,000 --> 02:02:17,000
这样的话就可以让互相之间

3961
02:02:17,000 --> 02:02:19,000
比如我同样要读取什么

3962
02:02:19,000 --> 02:02:21,000
ETC 下面的一个配置文件的时候

3963
02:02:21,000 --> 02:02:23,000
大家可以读到不同的版本

3964
02:02:23,000 --> 02:02:26,000
或者修改的时候互相不重途

3965
02:02:26,000 --> 02:02:27,000
对

3966
02:02:27,000 --> 02:02:28,000
其实就是一个对

3967
02:02:28,000 --> 02:02:30,000
操作系统级别的虚拟机

3968
02:02:30,000 --> 02:02:32,000
但它又不是

3969
02:02:32,000 --> 02:02:33,000
它不是虚拟机

3970
02:02:33,000 --> 02:02:34,000
它不是重要级的虚拟机

3971
02:02:34,000 --> 02:02:34,000
对

3972
02:02:34,000 --> 02:02:35,000
对

3973
02:02:35,000 --> 02:02:37,000
它提供了虚拟机的功能

3974
02:02:37,000 --> 02:02:38,000
但是它并不是一个虚拟机

3975
02:02:38,000 --> 02:02:39,000
对

3976
02:02:39,000 --> 02:02:41,000
就是一个超轻量级的一个虚拟机

3977
02:02:41,000 --> 02:02:43,000
然后虚拟系数

3978
02:02:43,000 --> 02:02:43,000
可以控制

3979
02:02:43,000 --> 02:02:45,000
然后 CGROPE 它能够启动那些

3980
02:02:45,000 --> 02:02:48,000
启动这个隔离也非常快

3981
02:02:48,000 --> 02:02:48,000
它就是什么

3982
02:02:48,000 --> 02:02:49,000
都要几十毫秒级别

3983
02:02:49,000 --> 02:02:50,000
毫秒级别

3984
02:02:50,000 --> 02:02:51,000
就可以建立出

3985
02:02:51,000 --> 02:02:53,000
新建一个 CGROPE

3986
02:02:53,000 --> 02:02:55,000
可以在几十毫秒级别

3987
02:02:55,000 --> 02:02:56,000
毫秒这个量级上把它

3988
02:02:56,000 --> 02:02:57,000
把它杀掉

3989
02:02:57,000 --> 02:02:58,000
就基本上那么可以

3990
02:02:58,000 --> 02:03:00,000
它是一个就是基石的一个过程

3991
02:03:00,000 --> 02:03:02,000
而不是像虚拟机

3992
02:03:02,000 --> 02:03:04,000
你还要等它启动

3993
02:03:04,000 --> 02:03:05,000
然后等它退出

3994
02:03:05,000 --> 02:03:07,000
要等几十秒的

3995
02:03:07,000 --> 02:03:09,000
就是一个数量级的提升

3996
02:03:09,000 --> 02:03:10,000
两三个数量级的提升了

3997
02:03:11,000 --> 02:03:11,000
很错

3998
02:03:11,000 --> 02:03:12,000
嗯

3999
02:03:12,000 --> 02:03:15,000
然后有的这么一个基础

4000
02:03:15,000 --> 02:03:16,000
技术之后

4001
02:03:16,000 --> 02:03:19,000
就后来有一个公司叫做 Docker

4002
02:03:19,000 --> 02:03:20,000
出了一个

4003
02:03:20,000 --> 02:03:23,000
基于 CGROPE 的一个技术

4004
02:03:23,000 --> 02:03:24,000
就叫做

4005
02:03:24,000 --> 02:03:26,000
它就像 Docker

4006
02:03:26,000 --> 02:03:26,000
对

4007
02:03:26,000 --> 02:03:28,000
Docker 就是刚才我们讲的马头工人

4008
02:03:28,000 --> 02:03:29,000
就是负责

4009
02:03:29,000 --> 02:03:31,000
建这个

4010
02:03:31,000 --> 02:03:33,000
负责搬运

4011
02:03:33,000 --> 02:03:34,000
货物的一个东西

4012
02:03:34,000 --> 02:03:36,000
但是 Docker 已经决中了

4013
02:03:36,000 --> 02:03:37,000
现在就工作一决中了

4014
02:03:37,000 --> 02:03:39,000
但是他把名字借过来了

4015
02:03:39,000 --> 02:03:40,000
他说我们是要

4016
02:03:40,000 --> 02:03:41,000
当然他的 logo

4017
02:03:41,000 --> 02:03:43,000
不是一个正在扛马头的马头工人

4018
02:03:43,000 --> 02:03:46,000
而是一个运动机中向的金鱼

4019
02:03:46,000 --> 02:03:46,000
对

4020
02:03:46,000 --> 02:03:47,000
承载这一旋击

4021
02:03:47,000 --> 02:03:49,000
一堆集中箱的一个金鱼

4022
02:03:49,000 --> 02:03:50,000
这还蛮可爱的

4023
02:03:50,000 --> 02:03:51,000
对

4024
02:03:52,000 --> 02:03:53,000
就是它是把

4025
02:03:53,000 --> 02:03:56,000
因为 CGROPE 它是一个内核的

4026
02:03:56,000 --> 02:03:57,000
一个一些 API

4027
02:03:57,000 --> 02:03:59,000
所以它有一个什么叫什么

4028
02:03:59,000 --> 02:04:02,000
用户可以直接要操作它的一个界面

4029
02:04:02,000 --> 02:04:03,000
直感手的时候

4030
02:04:03,000 --> 02:04:05,000
Linux 支持一个 LXC 的一个东西

4031
02:04:05,000 --> 02:04:07,000
但是也不是非常友好

4032
02:04:07,000 --> 02:04:08,000
也不是非常好用

4033
02:04:08,000 --> 02:04:10,000
然后 Docker 就说

4034
02:04:10,000 --> 02:04:11,000
那我们提供一个

4035
02:04:11,000 --> 02:04:13,000
更加好用

4036
02:04:13,000 --> 02:04:14,000
完善的工具

4037
02:04:14,000 --> 02:04:15,000
Mini 行界面

4038
02:04:15,000 --> 02:04:16,000
就是 Docker 目前有

4039
02:04:16,000 --> 02:04:19,000
图形的应该也是用 Mini 行界面的

4040
02:04:19,000 --> 02:04:21,000
Mini 行界面的东西

4041
02:04:21,000 --> 02:04:21,000
对

4042
02:04:21,000 --> 02:04:23,000
它用起来有点像 Git

4043
02:04:24,000 --> 02:04:24,000
对

4044
02:04:24,000 --> 02:04:26,000
有点有点类似感觉

4045
02:04:26,000 --> 02:04:27,000
对

4046
02:04:29,000 --> 02:04:30,000
然后

4047
02:04:30,000 --> 02:04:31,000
它是一个什么东西

4048
02:04:31,000 --> 02:04:33,000
它就是利用 CGROPE

4049
02:04:33,000 --> 02:04:35,000
之前内核的一些特性

4050
02:04:35,000 --> 02:04:36,000
然后当你能够快速的

4051
02:04:36,000 --> 02:04:38,000
清建出一个一个的

4052
02:04:38,000 --> 02:04:38,000
所谓的 container

4053
02:04:38,000 --> 02:04:39,000
一个一个集装箱

4054
02:04:39,000 --> 02:04:40,000
然后每个集装箱

4055
02:04:40,000 --> 02:04:41,000
可以做些什么事

4056
02:04:41,000 --> 02:04:43,000
就是说你集装箱里面包含

4057
02:04:43,000 --> 02:04:44,000
他们推荐的方式

4058
02:04:44,000 --> 02:04:47,000
一个集装箱里面只包含一个

4059
02:04:47,000 --> 02:04:48,000
主要的软件

4060
02:04:48,000 --> 02:04:49,000
对

4061
02:04:49,000 --> 02:04:50,000
所以你就运行一个数据库

4062
02:04:50,000 --> 02:04:51,000
就运行一个数据库

4063
02:04:51,000 --> 02:04:53,000
不要搞一些别的东西

4064
02:04:53,000 --> 02:04:54,000
然后运行一个程序

4065
02:04:54,000 --> 02:04:54,000
一个应用

4066
02:04:54,000 --> 02:04:55,000
就是单独的一个应用

4067
02:04:55,000 --> 02:04:56,000
不要塞 5 个应用

4068
02:04:56,000 --> 02:04:57,000
在一个 container 里面

4069
02:04:57,000 --> 02:04:59,000
这样不方便管理

4070
02:04:59,000 --> 02:05:00,000
有了这些集装箱之后

4071
02:05:00,000 --> 02:05:03,000
它 Docker 提供了这么一套工具

4072
02:05:03,000 --> 02:05:05,000
能够标准化的去去安装它

4073
02:05:05,000 --> 02:05:07,000
然后可以标准化的去部署它

4074
02:05:07,000 --> 02:05:09,000
这样就可以实现 container

4075
02:05:09,000 --> 02:05:10,000
那些所有的好处

4076
02:05:10,000 --> 02:05:12,000
然后也可以避免

4077
02:05:12,000 --> 02:05:15,000
讯你记得那些资源损贺高的问题

4078
02:05:15,000 --> 02:05:16,000
没错

4079
02:05:16,000 --> 02:05:20,000
而且它还大幅度的简化了一个

4080
02:05:21,000 --> 02:05:22,000
软件部署者

4081
02:05:22,000 --> 02:05:24,000
也就是或者说我们刚才说的

4082
02:05:24,000 --> 02:05:26,000
这个 DevOps 的工作量

4083
02:05:26,000 --> 02:05:29,000
就是之前我们会觉得用 shif

4084
02:05:29,000 --> 02:05:33,000
好像已经相当减变了

4085
02:05:33,000 --> 02:05:36,000
用 shif 或者 puppet 来描述整个的部署过程

4086
02:05:36,000 --> 02:05:37,000
已经相当减变了

4087
02:05:37,000 --> 02:05:40,000
但是使用 Docker 的时候

4088
02:05:40,000 --> 02:05:42,000
你会觉得原来整个过程还可以更加抽象

4089
02:05:42,000 --> 02:05:43,000
更加减变一点

4090
02:05:43,000 --> 02:05:46,000
就是之前你还需要去操心

4091
02:05:46,000 --> 02:05:51,000
你从哪里获得一个操作系统

4092
02:05:51,000 --> 02:05:52,000
你还要去操心

4093
02:05:52,000 --> 02:05:55,000
因为 puppet 的毕竟还是要运行在一个

4094
02:05:55,000 --> 02:05:57,000
特定的操作系统之上的

4095
02:05:57,000 --> 02:05:58,000
对

4096
02:05:58,000 --> 02:05:59,000
当然 Docker 也是需要

4097
02:05:59,000 --> 02:06:06,000
但 puppet 所关心的抽象是在操作系统级别以下

4098
02:06:06,000 --> 02:06:07,000
可是从 Docker 开始

4099
02:06:07,000 --> 02:06:10,000
这个抽象就已经包含操作系统本身在内了

4100
02:06:10,000 --> 02:06:15,000
这是一个非常了不起的一个封装层级

4101
02:06:15,000 --> 02:06:16,000
对

4102
02:06:16,000 --> 02:06:16,000
而且就怎么说

4103
02:06:16,000 --> 02:06:19,000
就是说如果用 Docker 这种方式来部署的话

4104
02:06:19,000 --> 02:06:22,000
开发者和运运委者做的事情

4105
02:06:22,000 --> 02:06:25,000
其实是非常用的工具是类

4106
02:06:25,000 --> 02:06:26,000
是同样的工具了

4107
02:06:26,000 --> 02:06:27,000
因为在过去的话

4108
02:06:27,000 --> 02:06:29,000
开发者其实并不

4109
02:06:29,000 --> 02:06:32,000
你开发的过程中至少是并不需要用到 puppet

4110
02:06:32,000 --> 02:06:32,000
也好

4111
02:06:32,000 --> 02:06:34,000
还要刚才讲 chef 那一套那些东西

4112
02:06:34,000 --> 02:06:34,000
对嘛

4113
02:06:34,000 --> 02:06:36,000
因为那个只是部署说才用到的

4114
02:06:36,000 --> 02:06:39,000
但是如果你用 Docker 来做开发的话

4115
02:06:39,000 --> 02:06:40,000
其实你发现你在开发的时候

4116
02:06:40,000 --> 02:06:43,000
就已经是在 Docker 里面去做开发

4117
02:06:43,000 --> 02:06:46,000
一上来就说我要一个什么样的 Docker

4118
02:06:46,000 --> 02:06:46,000
然后

4119
02:06:46,000 --> 02:06:48,000
里面在配置 Docker

4120
02:06:48,000 --> 02:06:49,000
那个 container

4121
02:06:49,000 --> 02:06:49,000
一上来我就说

4122
02:06:49,000 --> 02:06:53,000
我就知道了这个东西最终会跑在一个什么样的环境里面

4123
02:06:53,000 --> 02:06:53,000
嗯哼

4124
02:06:54,000 --> 02:06:56,000
然后你怎么你在开发的时候

4125
02:06:56,000 --> 02:06:58,000
就怎么去构建那个 container 的环境

4126
02:06:58,000 --> 02:07:00,000
或者是你怎么去构建你的那个

4127
02:07:00,000 --> 02:07:02,000
呃软件最终运行的环境

4128
02:07:02,000 --> 02:07:05,000
也就正是你在最后部署的时候

4129
02:07:05,000 --> 02:07:06,000
运运委的时候要

4130
02:07:07,000 --> 02:07:08,000
用的同样的环境

4131
02:07:08,000 --> 02:07:09,000
就是你用的是同样一套工具

4132
02:07:09,000 --> 02:07:11,000
同样一套命令去执行这些工具

4133
02:07:11,000 --> 02:07:13,000
这样的话就有什么好处呢

4134
02:07:13,000 --> 02:07:14,000
运运运委的时候

4135
02:07:14,000 --> 02:07:18,000
你只需要拿到开发好的这个 Docker 的 container

4136
02:07:18,000 --> 02:07:21,000
然后直接把它部署到这个物理的机器上去就好了

4137
02:07:21,000 --> 02:07:24,000
并不需要做任何特别多的额外的操作

4138
02:07:24,000 --> 02:07:26,000
但额外的操作就可能在那个

4139
02:07:26,000 --> 02:07:28,000
那个目标的机器上装上这个 Docker 本身

4140
02:07:28,000 --> 02:07:29,000
哈

4141
02:07:29,000 --> 02:07:29,000
对

4142
02:07:29,000 --> 02:07:30,000
换言之

4143
02:07:30,000 --> 02:07:32,000
呃从

4144
02:07:32,000 --> 02:07:33,000
从 Docker 之后

4145
02:07:33,000 --> 02:07:37,000
整个软件的开发过程就变成了 Dev

4146
02:07:37,000 --> 02:07:39,000
在 container 里面开发一个东西

4147
02:07:39,000 --> 02:07:41,000
然后 OPS 接过 container

4148
02:07:41,000 --> 02:07:42,000
然后把它放在一个

4149
02:07:42,000 --> 02:07:45,000
呃真正运行环境上

4150
02:07:45,000 --> 02:07:48,000
然后整个过程中你会发现 DevOps 好像

4151
02:07:48,000 --> 02:07:51,000
因此而变得非常简单

4152
02:07:51,000 --> 02:07:52,000
对

4153
02:07:52,000 --> 02:07:54,000
呃 Docker 另外一个重要的贡献

4154
02:07:54,000 --> 02:07:58,000
就是说他把这个文件系统训练化做得比较好

4155
02:07:58,000 --> 02:07:59,000
就是说我们过去

4156
02:07:59,000 --> 02:08:01,000
比如说刚才讲那个训练机需要

4157
02:08:01,000 --> 02:08:02,000
如果你开五个训练机

4158
02:08:02,000 --> 02:08:03,000
那你还要建五个训练机的镜像

4159
02:08:03,000 --> 02:08:07,000
那么他们那个呃每个镜像都要占用那个系统

4160
02:08:07,000 --> 02:08:08,000
要占用一点的空间

4161
02:08:08,000 --> 02:08:10,000
然后应用它占用你的空间

4162
02:08:10,000 --> 02:08:10,000
对吧

4163
02:08:10,000 --> 02:08:10,000
对

4164
02:08:10,000 --> 02:08:13,000
Docker 说那首先我们不需要这个训练每一个操作系统

4165
02:08:13,000 --> 02:08:15,000
我们不需要我们这条就省掉了

4166
02:08:15,000 --> 02:08:18,000
然后这个就是我们那个文件系统是一个很叫什么

4167
02:08:18,000 --> 02:08:20,000
copy on right 的系统

4168
02:08:20,000 --> 02:08:21,000
嗯

4169
02:08:21,000 --> 02:08:24,000
就说我如果我在文件系统做一个改进的话

4170
02:08:24,000 --> 02:08:26,000
我只需要记录它修改内部分

4171
02:08:26,000 --> 02:08:28,000
然后如果其他的共享的部分就可以

4172
02:08:28,000 --> 02:08:30,000
可以共享到这个磁盘空间

4173
02:08:30,000 --> 02:08:31,000
嘛

4174
02:08:31,000 --> 02:08:32,000
这样的话

4175
02:08:32,000 --> 02:08:36,000
我哪怕我开是一十个一百个这个 Docker 的

4176
02:08:36,000 --> 02:08:37,000
container 的同时运行的时候

4177
02:08:37,000 --> 02:08:41,000
我并不需要真的浪费一百份的磁盘空间

4178
02:08:41,000 --> 02:08:41,000
对

4179
02:08:41,000 --> 02:08:42,000
嗯

4180
02:08:42,000 --> 02:08:44,000
这个是非常了不得的一个一个贡献吧

4181
02:08:44,000 --> 02:08:45,000
没错

4182
02:08:45,000 --> 02:08:46,000
嗯

4183
02:08:46,000 --> 02:08:49,000
可以看到 Docker 的工具是非常强大的一个东西

4184
02:08:49,000 --> 02:08:52,000
但是 Docker 本身还是要跑在一个系统上面的嘛

4185
02:08:52,000 --> 02:08:54,000
在无帮就这个 14 点 04 开始

4186
02:08:54,000 --> 02:08:56,000
它就官方已经有支持了

4187
02:08:56,000 --> 02:08:59,000
然后那个你只要在这个 APT 里面安装一下

4188
02:08:59,000 --> 02:09:02,000
那个无法的那个主机就可以变成一个 Docker 主机

4189
02:09:02,000 --> 02:09:06,000
然后你再可以在里面运行这些 Docker 的 container 就好了

4190
02:09:06,000 --> 02:09:06,000
对

4191
02:09:06,000 --> 02:09:09,000
或者说就你就可以在这台机器上将你自己的

4192
02:09:09,000 --> 02:09:11,000
PaycationDockerize

4193
02:09:11,000 --> 02:09:12,000
嗯哼

4194
02:09:12,000 --> 02:09:12,000
对

4195
02:09:12,000 --> 02:09:14,000
让它跑在一个容器里

4196
02:09:14,000 --> 02:09:16,000
这条界面还是挺容易用的

4197
02:09:16,000 --> 02:09:21,000
而且或者想起来有一个优点就是你可以保留一个

4198
02:09:21,000 --> 02:09:25,000
保留某一个开发版本的一个 image

4199
02:09:25,000 --> 02:09:25,000
嗯哼

4200
02:09:25,000 --> 02:09:28,000
就是对好像是这样的吧

4201
02:09:28,000 --> 02:09:28,000
对

4202
02:09:28,000 --> 02:09:30,000
就是你可以在里面运行一个程序

4203
02:09:30,000 --> 02:09:32,000
然后把它存成一个 image

4204
02:09:32,000 --> 02:09:34,000
然后你每次打开这个 image 的时候

4205
02:09:34,000 --> 02:09:37,000
你会得到这个程序在那个时候的运行时刻

4206
02:09:37,000 --> 02:09:38,000
嗯哼

4207
02:09:38,000 --> 02:09:39,000
在那个时候的部署

4208
02:09:39,000 --> 02:09:41,000
部署部署状态

4209
02:09:41,000 --> 02:09:41,000
对

4210
02:09:41,000 --> 02:09:46,000
它等于又成了某一种很特别的版本控制系统

4211
02:09:46,000 --> 02:09:49,000
但是我控制的是一个软件的运行状态的版本

4212
02:09:49,000 --> 02:09:54,000
或者说是把整个操作系统的状态进行了一个版本控制吧

4213
02:09:54,000 --> 02:09:55,000
对

4214
02:09:55,000 --> 02:10:00,000
有点像那个 VM-1 里面的 VirtualBox 里面的 snapshot

4215
02:10:00,000 --> 02:10:01,000
snapshot 对对

4216
02:10:01,000 --> 02:10:03,000
但是它比 snapshot 比较轻量之机

4217
02:10:03,000 --> 02:10:03,000
对

4218
02:10:03,000 --> 02:10:04,000
而且快嘛

4219
02:10:04,000 --> 02:10:05,000
没错

4220
02:10:05,000 --> 02:10:06,000
嗯

4221
02:10:06,000 --> 02:10:09,000
但是还有人觉得这样还是太麻烦了

4222
02:10:09,000 --> 02:10:10,000
那个就是所谓 Docker 的这个什么

4223
02:10:10,000 --> 02:10:12,000
速主机啊

4224
02:10:12,000 --> 02:10:13,000
就是太复杂了

4225
02:10:13,000 --> 02:10:14,000
对

4226
02:10:14,000 --> 02:10:16,000
有很多人在做一些新的尝试

4227
02:10:16,000 --> 02:10:21,000
比如说最可能大家听的比较多的是一个叫做 CoreOS 的这么一个尝试

4228
02:10:21,000 --> 02:10:25,000
就是它是一个经检版的 Linux 系统

4229
02:10:25,000 --> 02:10:26,000
然后它的

4230
02:10:26,000 --> 02:10:28,000
然后它也是基于 C Groups 的

4231
02:10:28,000 --> 02:10:29,000
嗯对

4232
02:10:29,000 --> 02:10:30,000
它最开始是

4233
02:10:30,000 --> 02:10:31,000
它现在还是就目前为止

4234
02:10:31,000 --> 02:10:33,000
它还是基于 Docker 的

4235
02:10:33,000 --> 02:10:36,000
就是说它就是给你提供一个经检版的 Docker 的运行环境

4236
02:10:36,000 --> 02:10:38,000
然后你直接在里面去

4237
02:10:38,000 --> 02:10:41,000
就是它的这个 CoreOS 本身是非常经检的东西

4238
02:10:41,000 --> 02:10:43,000
里面背面有很多东西

4239
02:10:43,000 --> 02:10:47,000
然后你所有的应用的部署都是在 CoreOS 里面跑一个 Docker

4240
02:10:47,000 --> 02:10:50,000
然后在 Docker 里面在建不同的这个虚拟机去跑

4241
02:10:50,000 --> 02:10:51,000
对

4242
02:10:51,000 --> 02:10:52,000
Cartender 去跑

4243
02:10:52,000 --> 02:10:54,000
当然他们最近也在搞一个

4244
02:10:54,000 --> 02:10:55,000
因为他们跟 Docker

4245
02:10:55,000 --> 02:10:58,000
因为 Docker 背后还有一个公司叫 Docker Incorporated 的嘛

4246
02:10:58,000 --> 02:11:00,000
然后他们之间有一些利益的冲突

4247
02:11:00,000 --> 02:11:00,000
然后他们

4248
02:11:00,000 --> 02:11:01,000
他们不是一家的

4249
02:11:01,000 --> 02:11:02,000
这是

4250
02:11:02,000 --> 02:11:02,000
对

4251
02:11:02,000 --> 02:11:04,000
或者说他们的设计哲学有点不一样

4252
02:11:04,000 --> 02:11:05,000
对

4253
02:11:05,000 --> 02:11:07,000
他们这个设计理念有点不一样

4254
02:11:07,000 --> 02:11:10,000
然后商业的这个利益有点冲突

4255
02:11:10,000 --> 02:11:14,000
所以他们又在最近在搞一个所谓的 Docker 的一个分支

4256
02:11:14,000 --> 02:11:15,000
一个 Fork

4257
02:11:15,000 --> 02:11:17,000
去把一些标准化的东西定下来

4258
02:11:17,000 --> 02:11:19,000
但是这个我们就不去纠结那些细节了

4259
02:11:19,000 --> 02:11:20,000
对

4260
02:11:20,000 --> 02:11:22,000
其实说穿的就是原教主主义和

4261
02:11:22,000 --> 02:11:26,000
和这个什么商业利益之间的冲突

4262
02:11:26,000 --> 02:11:26,000
对

4263
02:11:26,000 --> 02:11:27,000
对

4264
02:11:27,000 --> 02:11:27,000
对

4265
02:11:27,000 --> 02:11:30,000
然后 Ubuntu 他们也没有闲着

4266
02:11:30,000 --> 02:11:33,000
他们前一段时间也发布了一个叫做 Ubuntu Core

4267
02:11:33,000 --> 02:11:36,000
这么一个新的 Ubuntu 的发新版

4268
02:11:36,000 --> 02:11:38,000
这个也比较好玩的一点

4269
02:11:38,000 --> 02:11:45,000
就是说他连这个这个母系统本身都变成一个 Docker 的

4270
02:11:46,000 --> 02:11:47,000
Docker 化的一个东西了

4271
02:11:47,000 --> 02:11:48,000
你可以怎么讲

4272
02:11:48,000 --> 02:11:52,000
就是因为母系素组机的系统里面

4273
02:11:52,000 --> 02:11:53,000
它还是可以有一些状态要改的

4274
02:11:53,000 --> 02:11:54,000
然后它的升级

4275
02:11:54,000 --> 02:11:57,000
这些还是不是非常稳健的

4276
02:11:57,000 --> 02:12:01,000
但是刚才我们讲利用那种 Image 的这种版本控制的一种方式

4277
02:12:01,000 --> 02:12:05,000
它可以做到连这个素组机的升级和维护都变成一个

4278
02:12:05,000 --> 02:12:06,000
非常确定化的东西

4279
02:12:07,000 --> 02:12:07,000
就是如果总统失败

4280
02:12:07,000 --> 02:12:09,000
可以是可以回滚的

4281
02:12:09,000 --> 02:12:15,000
然后就变成这个就是用 Docker 来控制 Docker 是素组机了

4282
02:12:15,000 --> 02:12:17,000
你可以大概是这个意思

4283
02:12:17,000 --> 02:12:18,000
OK

4284
02:12:18,000 --> 02:12:19,000
有意思

4285
02:12:19,000 --> 02:12:19,000
对

4286
02:12:19,000 --> 02:12:20,000
就比较好

4287
02:12:20,000 --> 02:12:26,000
但是整个来说 Docker 现在还是比较一个新兴的技术

4288
02:12:26,000 --> 02:12:28,000
就是说你如果要用这生产中

4289
02:12:28,000 --> 02:12:30,000
可能还是要先实践一下

4290
02:12:30,000 --> 02:12:32,000
也有不少的坑

4291
02:12:32,000 --> 02:12:35,000
因为 Docker 本身是一个还在不断完成中的系统

4292
02:12:35,000 --> 02:12:35,000
对

4293
02:12:35,000 --> 02:12:40,000
可能就是因为这些刚才说到的这个所谓 Docker Apocalypse

4294
02:12:40,000 --> 02:12:42,000
所以也指的就是这些

4295
02:12:42,000 --> 02:12:45,000
就是有些人对于对此之怀疑态度的会觉得

4296
02:12:45,000 --> 02:12:47,000
因为这个东西还不成

4297
02:12:47,000 --> 02:12:51,000
就是哪怕我们两个我们两个觉得这是一个化时代的伟大发明

4298
02:12:51,000 --> 02:12:57,000
也不可能拍着胸部说这个东西肯定会在时间之后成为绝对的主要

4299
02:12:57,000 --> 02:12:57,000
对

4300
02:12:57,000 --> 02:13:00,000
但是我觉得趋势还是要再往那个方向走

4301
02:13:00,000 --> 02:13:00,000
对

4302
02:13:00,000 --> 02:13:02,000
因为就像集装箱一样

4303
02:13:02,000 --> 02:13:06,000
很难想象将来没有这种便利的话

4304
02:13:06,000 --> 02:13:10,000
还能有什么更好的方式来管理

4305
02:13:10,000 --> 02:13:16,000
来让每个人都可以更加低门坎的成为 DevOps

4306
02:13:16,000 --> 02:13:16,000
对

4307
02:13:16,000 --> 02:13:18,000
可能这是最好的一种方法

4308
02:13:18,000 --> 02:13:18,000
对

4309
02:13:18,000 --> 02:13:21,000
所以如果你作为一个开发者

4310
02:13:21,000 --> 02:13:23,000
然后你想成为这个 DevOps

4311
02:13:23,000 --> 02:13:25,000
你也想去接触一下 Docker 这些东西

4312
02:13:25,000 --> 02:13:26,000
就也有很多方法可以尝试

4313
02:13:26,000 --> 02:13:30,000
比如你自己在电脑上装一个免费的 Virtual Vox

4314
02:13:30,000 --> 02:13:33,000
然后你再装一个 Docker

4315
02:13:33,000 --> 02:13:34,000
或者装一个舞帮图也好

4316
02:13:34,000 --> 02:13:37,000
然后在这里面装 Docker 或者装个 Core S 也可以

4317
02:13:37,000 --> 02:13:40,000
当然也有个如果你是在 Mac 上面的话

4318
02:13:40,000 --> 02:13:42,000
我们有一个更简单的方式

4319
02:13:42,000 --> 02:13:46,000
就是 Docker 这个社区提供了一个叫做 Boot to Docker 的这么一个

4320
02:13:46,000 --> 02:13:49,000
极度精简版的系统

4321
02:13:49,000 --> 02:13:52,000
然后你可以里面它做的唯一件事情就是让你跑 Docker

4322
02:13:52,000 --> 02:13:54,000
然后我给这个系统

4323
02:13:54,000 --> 02:13:58,000
Boot to Docker 这个工具做了一个命令行的小工具

4324
02:13:58,000 --> 02:13:59,000
你可以在

4325
02:14:00,000 --> 02:14:05,000
各位现在正在听我们的 Rio 同学在 Brag

4326
02:14:05,000 --> 02:14:08,000
他写的一个自我推广

4327
02:14:08,000 --> 02:14:12,000
一个用 Docker 的小命令行工具叫做叫什么

4328
02:14:12,000 --> 02:14:14,000
Boot to Docker client

4329
02:14:14,000 --> 02:14:14,000
对

4330
02:14:14,000 --> 02:14:18,000
Boot 2 Docker-Cli

4331
02:14:18,000 --> 02:14:18,000
对

4332
02:14:18,000 --> 02:14:21,000
然后你可以在 HomeBrew 里面装 Mac 上面

4333
02:14:21,000 --> 02:14:23,000
因为这个主要是给 Mac 用户开发的

4334
02:14:23,000 --> 02:14:25,000
因为 Docker 不能原生运行

4335
02:14:25,000 --> 02:14:27,000
自能运行在另两个上面什么

4336
02:14:27,000 --> 02:14:28,000
对

4337
02:14:28,000 --> 02:14:31,000
所以你肯定是需要一个训练机的才能在 Mac 上面跑的

4338
02:14:31,000 --> 02:14:32,000
然后这个工具的可以干嘛

4339
02:14:32,000 --> 02:14:36,000
可以帮你一件事的去完成

4340
02:14:36,000 --> 02:14:38,000
只要你这样装上 Virtual Box 之后

4341
02:14:38,000 --> 02:14:41,000
它可以一件事的帮你装好 Boot to Docker 东西

4342
02:14:41,000 --> 02:14:46,000
然后可以让你很方便的去操纵训练机的一些概念

4343
02:14:46,000 --> 02:14:52,000
然后之后你就可以这用 Docker 去跟用 Boot to Docker 装好的

4344
02:14:52,000 --> 02:14:56,000
一个好知道用 Boot to Docker 装好的一个 Docker 速度机

4345
02:14:58,000 --> 02:15:00,000
的去可以去玩

4346
02:15:00,000 --> 02:15:03,000
就可以去学习里面的东西

4347
02:15:03,000 --> 02:15:04,000
好累

4348
02:15:04,000 --> 02:15:05,000
对

4349
02:15:05,000 --> 02:15:07,000
大概就这个意思

4350
02:15:08,000 --> 02:15:09,000
可以去学习

4351
02:15:09,000 --> 02:15:13,000
然后现在我们要在节目的最后要扯一点

4352
02:15:14,000 --> 02:15:15,000
玄学

4353
02:15:15,000 --> 02:15:16,000
对

4354
02:15:16,000 --> 02:15:17,000
就是扯一些有的没的

4355
02:15:17,000 --> 02:15:19,000
可能不干不湿

4356
02:15:19,000 --> 02:15:21,000
可能还是先湿的一些东西

4357
02:15:21,000 --> 02:15:22,000
对

4358
02:15:22,000 --> 02:15:24,000
就是其实我们刚才讲那么多东西

4359
02:15:24,000 --> 02:15:27,000
就是我们为什么要这么多工具去做这些东西

4360
02:15:27,000 --> 02:15:30,000
其实要解决什么问题

4361
02:15:30,000 --> 02:15:34,000
就是如果我们把那个一个立台服务器作为一个状态机的话

4362
02:15:34,000 --> 02:15:38,000
其实我们可以看到那些工具的一个一个发展方向

4363
02:15:38,000 --> 02:15:41,000
就是把这个状态机竟然变得无状态

4364
02:15:43,000 --> 02:15:44,000
状态机不可能无状态

4365
02:15:44,000 --> 02:15:45,000
而对

4366
02:15:45,000 --> 02:15:46,000
我觉得可能正确的时候

4367
02:15:46,000 --> 02:15:50,000
应该是让状态机的状态变化

4368
02:15:51,000 --> 02:15:52,000
是可预测的吗

4369
02:15:52,000 --> 02:15:53,000
是可预

4370
02:15:53,000 --> 02:15:55,000
这么说可能也不是特别的

4371
02:15:55,000 --> 02:15:57,000
净确

4372
02:15:57,000 --> 02:15:58,000
我们刚才想表达什么意思

4373
02:15:58,000 --> 02:16:01,000
就是服务器是一大堆状态机

4374
02:16:01,000 --> 02:16:03,000
就是状态机是一个

4375
02:16:03,000 --> 02:16:04,000
那我算了

4376
02:16:04,000 --> 02:16:05,000
我不解释什么状态机

4377
02:16:05,000 --> 02:16:08,000
就是如果把服务器视为状态机的话

4378
02:16:08,000 --> 02:16:10,000
那么我们的终极理想就是

4379
02:16:10,000 --> 02:16:13,000
我不用去操心状态机

4380
02:16:14,000 --> 02:16:18,000
从状态 A 变到状态 B 的过程

4381
02:16:18,000 --> 02:16:20,000
究竟需要做哪些事情

4382
02:16:21,000 --> 02:16:24,000
我只操心让它从状态 A 变到状态 B

4383
02:16:24,000 --> 02:16:25,000
可控

4384
02:16:26,000 --> 02:16:27,000
有反应

4385
02:16:27,000 --> 02:16:31,000
并且可以同时在很多机器上运行

4386
02:16:31,000 --> 02:16:31,000
对

4387
02:16:31,000 --> 02:16:35,000
就是说我们希望能够有成百上千的

4388
02:16:35,000 --> 02:16:39,000
我们不用一个通过很 impartive

4389
02:16:39,000 --> 02:16:40,000
很命运式的方式去指定

4390
02:16:40,000 --> 02:16:43,000
它怎么切换状态的状态机

4391
02:16:43,000 --> 02:16:44,000
我只用告诉它说

4392
02:16:44,000 --> 02:16:45,000
进入 A 状态

4393
02:16:45,000 --> 02:16:47,000
然后他们就全部进入了 A 状态了

4394
02:16:47,000 --> 02:16:48,000
对

4395
02:16:48,000 --> 02:16:52,000
这就有点像 SpaSport 命运里面的 Minnin 一样

4396
02:16:52,000 --> 02:16:55,000
我们理想状态是

4397
02:16:55,000 --> 02:16:57,000
不是告诉每一个单独的 Minnin Kevin

4398
02:16:57,000 --> 02:16:59,000
你去拿那个

4399
02:16:59,000 --> 02:17:01,000
然后 Mike 你去拿那个

4400
02:17:01,000 --> 02:17:03,000
然后把他拿两个不同的工具

4401
02:17:03,000 --> 02:17:06,000
把所有小摄像枪偷出来

4402
02:17:06,000 --> 02:17:07,000
我只需要下一个命令

4403
02:17:07,000 --> 02:17:09,000
你们去把所有摄像枪给我偷出来

4404
02:17:09,000 --> 02:17:11,000
至于怎么完成的我不管

4405
02:17:11,000 --> 02:17:11,000
对

4406
02:17:11,000 --> 02:17:14,000
这是我们想要达到的终极目标

4407
02:17:14,000 --> 02:17:16,000
说出来其实还是懒

4408
02:17:16,000 --> 02:17:21,000
我觉得我们这一期讲的 Docker

4409
02:17:21,000 --> 02:17:25,000
其实也是第三层的所谓的 Live Cycle Management

4410
02:17:25,000 --> 02:17:27,000
就是 Sever as a Statemachine

4411
02:17:27,000 --> 02:17:29,000
Sever as a Service

4412
02:17:29,000 --> 02:17:32,000
我们要管理他们的 Live Cycle

4413
02:17:32,000 --> 02:17:38,000
然后所有这一切都希望能够进可动的自动化

4414
02:17:38,000 --> 02:17:40,000
进可动的无痛的时间

4415
02:17:40,000 --> 02:17:43,000
所以最规定结底其实还是因为懒

4416
02:17:43,000 --> 02:17:47,000
或者说就是削减复杂度

4417
02:17:47,000 --> 02:17:49,000
就是说如果你要关注每一台机器

4418
02:17:49,000 --> 02:17:51,000
它具体的状态怎么样

4419
02:17:51,000 --> 02:17:52,000
然后每台机器状态还不一样

4420
02:17:52,000 --> 02:17:54,000
你再去手工一个一个解决的话

4421
02:17:54,000 --> 02:17:55,000
这个就太复杂了

4422
02:17:56,000 --> 02:17:58,000
我们想的方法就说能够通过这种

4423
02:17:58,000 --> 02:18:01,000
把它首先是一个

4424
02:18:01,000 --> 02:18:03,000
就是描述性的语言去指定它的状态

4425
02:18:03,000 --> 02:18:05,000
然后用工具去实现说

4426
02:18:05,000 --> 02:18:08,000
我不管你是什么状态

4427
02:18:08,000 --> 02:18:09,000
你就变成这样状态就好了

4428
02:18:10,000 --> 02:18:13,000
来做到把这个事情减少变得减化一点

4429
02:18:13,000 --> 02:18:16,000
然后就减化的目标是什么

4430
02:18:16,000 --> 02:18:18,000
就是说我们还是说能够希望很快速

4431
02:18:18,000 --> 02:18:22,000
方便的能够去伸缩我们的计算资源

4432
02:18:22,000 --> 02:18:26,000
然后去应对随时变化的工作负荷

4433
02:18:26,000 --> 02:18:28,000
没错

4434
02:18:28,000 --> 02:18:35,000
所以然后我们让状态机变得所谓不是 Stateless

4435
02:18:35,000 --> 02:18:38,000
但是是某种意义上的

4436
02:18:38,000 --> 02:18:42,000
在我们的最终用户的视角看来

4437
02:18:42,000 --> 02:18:44,000
是处于 Stateless 的状态的

4438
02:18:46,000 --> 02:18:51,000
这样一种思潮或者说这样一种哲学

4439
02:18:51,000 --> 02:18:55,000
其理念和 functional programming 其实是相通的

4440
02:18:55,000 --> 02:18:55,000
对

4441
02:18:55,000 --> 02:18:57,000
就说我们如果我们把每一个

4442
02:18:57,000 --> 02:19:00,000
因为我们为什么要弄那么多服务器

4443
02:19:00,000 --> 02:19:00,000
跑起来

4444
02:19:00,000 --> 02:19:02,000
就是因为它要完成一个功能

4445
02:19:02,000 --> 02:19:03,000
所以完成功能就是说

4446
02:19:03,000 --> 02:19:05,000
它服务器接受一个输入用户的请求

4447
02:19:05,000 --> 02:19:06,000
对吧

4448
02:19:06,000 --> 02:19:07,000
然后它完成一个输出

4449
02:19:07,000 --> 02:19:11,000
就是产生用户的反悔给用户的结果

4450
02:19:11,000 --> 02:19:14,000
就我们是希望每一个这个

4451
02:19:14,000 --> 02:19:15,000
这个我们叫做服务器也好

4452
02:19:15,000 --> 02:19:17,000
还是叫做 container 也好

4453
02:19:17,000 --> 02:19:20,000
我们希望它的输出是能够

4454
02:19:20,000 --> 02:19:22,000
就是无状态的

4455
02:19:22,000 --> 02:19:25,000
就说我们只要有同样的另外一个 container

4456
02:19:25,000 --> 02:19:26,000
或者同样的另外一个服务器

4457
02:19:26,000 --> 02:19:27,000
我给它同样的输出

4458
02:19:27,000 --> 02:19:29,000
它能够产生同样的输出

4459
02:19:29,000 --> 02:19:30,000
对没有副作用

4460
02:19:30,000 --> 02:19:31,000
对

4461
02:19:31,000 --> 02:19:32,000
然后这样没有副作用的话

4462
02:19:32,000 --> 02:19:34,000
就可以让我们很方便的去管理它们

4463
02:19:34,000 --> 02:19:36,000
也可以调配资源

4464
02:19:36,000 --> 02:19:37,000
调度资源

4465
02:19:37,000 --> 02:19:38,000
对

4466
02:19:38,000 --> 02:19:41,000
我们就可以像把整个服务器

4467
02:19:41,000 --> 02:19:44,000
像一个函数一样组建起来

4468
02:19:44,000 --> 02:19:46,000
然后每次扔进去

4469
02:19:46,000 --> 02:19:49,000
我们知道会得到什么样输出的输入

4470
02:19:49,000 --> 02:19:50,000
就可以了

4471
02:19:50,000 --> 02:19:53,000
而不是像在命令室变成那样

4472
02:19:53,000 --> 02:19:56,000
还要去操心此时的整个生育处有什么状态

4473
02:19:56,000 --> 02:19:57,000
对

4474
02:19:57,000 --> 02:19:57,000
对

4475
02:19:57,000 --> 02:20:00,000
这个我们是不是忘了提 NixOS

4476
02:20:00,000 --> 02:20:01,000
NixOS 不对

4477
02:20:01,000 --> 02:20:03,000
它的最终目标就是要达到这个效果

4478
02:20:03,000 --> 02:20:04,000
对

4479
02:20:04,000 --> 02:20:06,000
这个其实应该要讲的

4480
02:20:06,000 --> 02:20:08,000
不过因为我自己也没有用过

4481
02:20:08,000 --> 02:20:09,000
就是在关注这个东西

4482
02:20:09,000 --> 02:20:14,000
没有太多的实际的英文的场景

4483
02:20:14,000 --> 02:20:16,000
而且它本身也不太成熟

4484
02:20:16,000 --> 02:20:18,000
还是在一个开发

4485
02:20:18,000 --> 02:20:21,000
它还是一个比较先锋式的

4486
02:20:21,000 --> 02:20:25,000
比较更加纯粹的这么一个

4487
02:20:25,000 --> 02:20:30,000
朝着 stateless 的管理工具的

4488
02:20:30,000 --> 02:20:31,000
一个一个常识

4489
02:20:31,000 --> 02:20:32,000
对

4490
02:20:32,000 --> 02:20:32,000
对

4491
02:20:32,000 --> 02:20:34,000
就是 Docker 这种思路

4492
02:20:34,000 --> 02:20:36,000
就是说我们不改变目前的操作系统

4493
02:20:36,000 --> 02:20:38,000
就是你现在 Docker 里面发的东西还是一个

4494
02:20:38,000 --> 02:20:41,000
我们所谓的常规的一个操作系统

4495
02:20:41,000 --> 02:20:43,000
它里面还是有那些状态的

4496
02:20:43,000 --> 02:20:44,000
但就是说我们只是说

4497
02:20:44,000 --> 02:20:47,000
因为我们用一个规议化的方式去生成它

4498
02:20:47,000 --> 02:20:50,000
然后我们就是 hopefully

4499
02:20:50,000 --> 02:20:54,000
就是我们希望我们通过规议化的方式去生成它

4500
02:20:54,000 --> 02:20:57,000
得到的结果是一个大家都一样的结果

4501
02:20:57,000 --> 02:20:59,000
但是并不能保证它运行一段时间之后

4502
02:20:59,000 --> 02:21:02,000
它每个各样就同样方式生成的

4503
02:21:02,000 --> 02:21:05,000
这个 content 它不会出现所谓 diverge

4504
02:21:05,000 --> 02:21:07,000
就是所谓出现分野

4505
02:21:07,000 --> 02:21:09,000
就是说运行的一段时间变成这个状态

4506
02:21:09,000 --> 02:21:12,000
然后运行的时间变成另一个状态

4507
02:21:12,000 --> 02:21:12,000
没错

4508
02:21:12,000 --> 02:21:16,000
但是像那个 nex 这种东西的话

4509
02:21:16,000 --> 02:21:18,000
其实它又想做更进一步的

4510
02:21:18,000 --> 02:21:21,000
我们只要把这个操作系统变成本身

4511
02:21:21,000 --> 02:21:24,000
变成是一个 stateless 的东西

4512
02:21:24,000 --> 02:21:28,000
就是它的其实是更加一个更激进的一个方法

4513
02:21:28,000 --> 02:21:29,000
我觉得

4514
02:21:29,000 --> 02:21:29,000
对

4515
02:21:29,000 --> 02:21:32,000
但是通常来说这种更加激进的方法

4516
02:21:32,000 --> 02:21:35,000
一般都是不会成功的

4517
02:21:38,000 --> 02:21:39,000
就是对软件工程来讲

4518
02:21:39,000 --> 02:21:46,000
我觉得向后兼容还有所谓的规模优势还是有点用处

4519
02:21:46,000 --> 02:21:49,000
就是说 nex 它其实更加类似 Ubuntu Core 那种

4520
02:21:49,000 --> 02:21:54,000
比较极端的一种方式去改变我们的部署的环境

4521
02:21:55,000 --> 02:22:01,000
但我还是希望它能够做出的

4522
02:22:01,000 --> 02:22:04,000
我应该说但愿不是吧

4523
02:22:04,000 --> 02:22:11,000
我觉得在服务端其实人们接受变革的阻力

4524
02:22:11,000 --> 02:22:13,000
还是要比在其他领域少一些

4525
02:22:13,000 --> 02:22:19,000
因为在服务端其实首先人们对产品没有太多感情

4526
02:22:19,000 --> 02:22:20,000
不像

4527
02:22:20,000 --> 02:22:23,000
就没有用户习惯在你

4528
02:22:23,000 --> 02:22:26,000
我们不会说我是国粉或者说我有苹果的时候习惯

4529
02:22:26,000 --> 02:22:30,000
我们都是一堆建峰使多的人

4530
02:22:30,000 --> 02:22:33,000
对我们在看见摸着着了

4531
02:22:33,000 --> 02:22:38,000
这种消费点子上面领域会有这样的教派的存在

4532
02:22:38,000 --> 02:22:40,000
就是你我都是我不知道你是不是

4533
02:22:40,000 --> 02:22:43,000
但我是一个苹果教徒

4534
02:22:43,000 --> 02:22:46,000
但在服务端可能不会有这样的

4535
02:22:46,000 --> 02:22:47,000
会更加理性一些

4536
02:22:47,000 --> 02:22:51,000
对会更加利益趋势或者是 Lay Z driven 一点

4537
02:22:51,000 --> 02:22:52,000
什么好我用什么

4538
02:22:52,000 --> 02:22:54,000
我不会去

4539
02:22:54,000 --> 02:22:59,000
而且在服务端有好处就是好是有一个明确的标准

4540
02:22:59,000 --> 02:23:03,000
如果我用这个比你 1 快 2 简单那它就是好

4541
02:23:03,000 --> 02:23:03,000
对吧

4542
02:23:03,000 --> 02:23:08,000
但是在我们可能消费级别的就有一些看不着

4543
02:23:08,000 --> 02:23:11,000
中端电子用户会有一些非常难以理解的非理性的因素在里面

4544
02:23:11,000 --> 02:23:13,000
有感性的因素在里面

4545
02:23:13,000 --> 02:23:17,000
比如说我就是习惯关闭按钮在左上角

4546
02:23:17,000 --> 02:23:18,000
没有理由的

4547
02:23:18,000 --> 02:23:20,000
没有什么理由

4548
02:23:20,000 --> 02:23:23,000
你能告诉我说在右上角就是要别的阻挡上就好

4549
02:23:23,000 --> 02:23:25,000
我就说不好你咬我呀

4550
02:23:25,000 --> 02:23:28,000
我就觉得那个 OS 10 的自己渲染比 Windows 的好

4551
02:23:28,000 --> 02:23:29,000
你能把我砸定

4552
02:23:29,000 --> 02:23:30,000
你咬我呀

4553
02:23:30,000 --> 02:23:32,000
但是在服务端就不会有这种

4554
02:23:32,000 --> 02:23:33,000
不会有这样的问题

4555
02:23:33,000 --> 02:23:34,000
真的是针刀针枪

4556
02:23:36,000 --> 02:23:37,000
没有什么

4557
02:23:37,000 --> 02:23:38,000
就一切都是可以量化

4558
02:23:38,000 --> 02:23:40,000
这可能是你为什么喜欢后端的原因

4559
02:23:40,000 --> 02:23:41,000
对呀

4560
02:23:41,000 --> 02:23:42,000
一切都是可控的

4561
02:23:42,000 --> 02:23:45,000
你倾向于一切都是可控可以量化

4562
02:23:45,000 --> 02:23:46,000
可以抉择

4563
02:23:47,000 --> 02:23:48,000
所以

4564
02:23:48,000 --> 02:23:49,000
对

4565
02:23:49,000 --> 02:23:51,000
从这个角度讲

4566
02:23:51,000 --> 02:23:57,000
可能 NICS OS 还是会后来居上的

4567
02:23:57,000 --> 02:23:59,000
如果它真的有它宣传的怎么好

4568
02:23:59,000 --> 02:24:00,000
当然

4569
02:24:00,000 --> 02:24:01,000
其作者也说了

4570
02:24:01,000 --> 02:24:03,000
NICS OS 是不避免护理性的

4571
02:24:03,000 --> 02:24:04,000
所以

4572
02:24:04,000 --> 02:24:06,000
比如说小白勿进

4573
02:24:06,000 --> 02:24:07,000
对

4574
02:24:07,000 --> 02:24:10,000
如果你没有一些功力

4575
02:24:10,000 --> 02:24:12,000
没有想要折腾的心念的话

4576
02:24:12,000 --> 02:24:13,000
最后还是不要碰它

4577
02:24:14,000 --> 02:24:15,000
不过

4578
02:24:15,000 --> 02:24:17,000
Ubuntu Core 还比较用户友好

4579
02:24:17,000 --> 02:24:18,000
可以去玩一下

4580
02:24:18,000 --> 02:24:20,000
如果你觉得 NICS OS 太

4581
02:24:20,000 --> 02:24:22,000
太 Hardcore 的话

4582
02:24:22,000 --> 02:24:23,000
对

4583
02:24:23,000 --> 02:24:26,000
Ubuntu Core 还比较好玩

4584
02:24:26,000 --> 02:24:27,000
我自己试试

4585
02:24:27,000 --> 02:24:28,000
但还挺

4586
02:24:28,000 --> 02:24:29,000
我觉得还不错吧

4587
02:24:29,000 --> 02:24:31,000
就那个理念也挺简单的

4588
02:24:33,000 --> 02:24:34,000
好吧

4589
02:24:34,000 --> 02:24:40,000
我们大概聊完了最后一期的

4590
02:24:40,000 --> 02:24:40,000
sorry

4591
02:24:40,000 --> 02:24:43,000
2015 年第一期的

4592
02:24:43,000 --> 02:24:44,000
内核恐慌

4593
02:24:44,000 --> 02:24:46,000
我们今天的主题是

4594
02:24:46,000 --> 02:24:47,000
其实也是延伸了前两期的

4595
02:24:47,000 --> 02:24:49,000
life cycle management

4596
02:24:49,000 --> 02:24:51,000
我们今天讲的是 containerization

4597
02:24:52,000 --> 02:24:54,000
就是

4598
02:24:54,000 --> 02:24:55,000
containerization

4599
02:24:55,000 --> 02:24:55,000
集装相化

4600
02:24:55,000 --> 02:24:56,000
可以这么说吗

4601
02:24:56,000 --> 02:24:57,000
嗯对

4602
02:24:57,000 --> 02:24:58,000
软件部署的集装相化

4603
02:24:58,000 --> 02:24:59,000
以及 DevOps

4604
02:25:01,000 --> 02:25:02,000
我觉得我从今天开始

4605
02:25:02,000 --> 02:25:05,000
一定要每一期都说那个灌口

4606
02:25:05,000 --> 02:25:07,000
因为好像其他节目都说

4607
02:25:07,000 --> 02:25:08,000
我不说不太好

4608
02:25:08,000 --> 02:25:08,000
嗯

4609
02:25:10,000 --> 02:25:15,000
北美山地时间 2006 年 1 月 2 日下午 3 点 04 分 05 秒

4610
02:25:15,000 --> 02:25:16,000
您正在收听的

4611
02:25:16,000 --> 02:25:19,000
您正在收听的是 ipn podcast 的网络旗下的

4612
02:25:19,000 --> 02:25:23,000
IT 技术主题节目内核恐慌

4613
02:25:23,000 --> 02:25:24,000
我们号称 Hardcore

4614
02:25:24,000 --> 02:25:25,000
但是也没有干货

4615
02:25:25,000 --> 02:25:26,000
想听的人听

4616
02:25:26,000 --> 02:25:27,000
不想听的人就不要听

4617
02:25:27,000 --> 02:25:28,000
嗯

4618
02:25:28,000 --> 02:25:30,000
同时 ipn 旗下的其他无量 podcast

4619
02:25:30,000 --> 02:25:33,000
包括 softcore 技术主题节目

4620
02:25:33,000 --> 02:25:34,000
IT 公论

4621
02:25:34,000 --> 02:25:36,000
同样是 Rail 和

4622
02:25:37,000 --> 02:25:38,000
另外一位

4623
02:25:38,000 --> 02:25:39,000
我们的制作人 Laurence

4624
02:25:39,000 --> 02:25:40,000
技术师

4625
02:25:40,000 --> 02:25:41,000
还有医疗主题节目

4626
02:25:41,000 --> 02:25:42,000
他一来了

4627
02:25:43,000 --> 02:25:45,000
美食节目未知道

4628
02:25:45,000 --> 02:25:48,000
以及不只谈艺术的艺术类节目

4629
02:25:48,000 --> 02:25:49,000
流行通信

4630
02:25:49,000 --> 02:25:51,000
他的英文名字叫做 pop dispatch

4631
02:25:51,000 --> 02:25:53,000
千万不要计算成出债分派

4632
02:25:55,000 --> 02:25:56,000
所以我还有

4633
02:25:56,000 --> 02:25:57,000
其实我是非常推荐

4634
02:25:59,000 --> 02:26:00,000
流行通信这场节目的

4635
02:26:00,000 --> 02:26:02,000
就是我觉得尤其是死仇们

4636
02:26:02,000 --> 02:26:03,000
应该听一听

4637
02:26:03,000 --> 02:26:03,000
因为

4638
02:26:04,000 --> 02:26:05,000
我换习一下

4639
02:26:05,000 --> 02:26:07,000
脑中已经快要死去的艺术

4640
02:26:07,000 --> 02:26:08,000
感兴的一部分

4641
02:26:08,000 --> 02:26:09,000
对

4642
02:26:09,000 --> 02:26:11,000
我后女朋友在听这个节目的时候

4643
02:26:11,000 --> 02:26:12,000
就说

4644
02:26:12,000 --> 02:26:13,000
如果我们

4645
02:26:13,000 --> 02:26:14,000
内核恐慌有

4646
02:26:14,000 --> 02:26:17,000
我们自己的一个 pattern 的话

4647
02:26:17,000 --> 02:26:17,000
或者一个

4648
02:26:17,000 --> 02:26:18,000
比如说一个家会

4649
02:26:18,000 --> 02:26:20,000
一个族徽的话

4650
02:26:20,000 --> 02:26:21,000
那肯定到处都是直线

4651
02:26:23,000 --> 02:26:25,000
所有地方都是 90 度角

4652
02:26:25,000 --> 02:26:27,000
但是如果你在听出债分派

4653
02:26:28,000 --> 02:26:29,000
pop dispatch

4654
02:26:29,000 --> 02:26:30,000
流行通信的时候

4655
02:26:30,000 --> 02:26:30,000
你会觉得

4656
02:26:31,000 --> 02:26:32,000
就有时候你会觉得

4657
02:26:33,000 --> 02:26:34,000
从一个

4658
02:26:35,000 --> 02:26:37,000
死理型派的角度

4659
02:26:37,000 --> 02:26:38,000
会觉得主持人好像有点拖线

4660
02:26:38,000 --> 02:26:39,000
就是乱造他

4661
02:26:39,000 --> 02:26:41,000
不常在讲什么

4662
02:26:41,000 --> 02:26:41,000
但是

4663
02:26:42,000 --> 02:26:43,000
可能这才是

4664
02:26:43,000 --> 02:26:46,000
就是我们所缺失的那一部分

4665
02:26:46,000 --> 02:26:47,000
让我们成为

4666
02:26:47,000 --> 02:26:49,000
让我们去更具有人情味的一部分

4667
02:26:49,000 --> 02:26:49,000
就是

4668
02:26:49,000 --> 02:26:50,000
如果他们有他们的

4669
02:26:50,000 --> 02:26:51,000
主题图案的话

4670
02:26:52,000 --> 02:26:54,000
可能是都是非常柔美的曲前

4671
02:26:54,000 --> 02:26:55,000
像袁弦一样

4672
02:26:55,000 --> 02:26:56,000
对水云纹

4673
02:26:58,000 --> 02:26:58,000
对

4674
02:26:58,000 --> 02:27:00,000
所以我还是非常推荐各位

4675
02:27:01,000 --> 02:27:04,000
喜欢收听我们节目的听众的话

4676
02:27:04,000 --> 02:27:06,000
一定也要去听一下流行通信

4677
02:27:07,000 --> 02:27:09,000
但如果你不喜欢听我们节目的话

4678
02:27:09,000 --> 02:27:12,000
也非常欢迎您去听流行通信

4679
02:27:13,000 --> 02:27:13,000
对

4680
02:27:13,000 --> 02:27:16,000
然后 iPen 还有一款节目就是

4681
02:27:16,000 --> 02:27:17,000
我也不知道在播什么的

4682
02:27:17,000 --> 02:27:18,000
无主题节目

4683
02:27:18,000 --> 02:27:18,000
无次元

4684
02:27:19,000 --> 02:27:19,000
对

4685
02:27:19,000 --> 02:27:20,000
没有固定时长

4686
02:27:20,000 --> 02:27:21,000
没有竞技

4687
02:27:21,000 --> 02:27:22,000
没有主播

4688
02:27:23,000 --> 02:27:24,000
没有主题

4689
02:27:24,000 --> 02:27:25,000
无次元

4690
02:27:25,000 --> 02:27:26,000
好

4691
02:27:26,000 --> 02:27:28,000
欢迎收听本期内合播

4692
02:27:28,000 --> 02:27:29,000
对了

4693
02:27:29,000 --> 02:27:30,000
还有事情我们忘了说

4694
02:27:30,000 --> 02:27:31,000
嗯

4695
02:27:31,000 --> 02:27:32,000
嗯

4696
02:27:33,000 --> 02:27:35,000
非常高兴好这个 2014 年

4697
02:27:35,000 --> 02:27:36,000
就你们听到这期节目的时候

4698
02:27:36,000 --> 02:27:37,000
2014 年已经结束了

4699
02:27:37,000 --> 02:27:38,000
但是有一个

4700
02:27:38,000 --> 02:27:39,000
我们录这期节的时候

4701
02:27:39,000 --> 02:27:41,000
2014 年也结束了

4702
02:27:41,000 --> 02:27:41,000
是吗

4703
02:27:41,000 --> 02:27:42,000
对啊

4704
02:27:42,000 --> 02:27:43,000
2014 年已经结束了

4705
02:27:43,000 --> 02:27:43,000
OK

4706
02:27:43,000 --> 02:27:44,000
holy

4707
02:27:45,000 --> 02:27:47,000
不过我们在这个我们节目

4708
02:27:48,000 --> 02:27:49,000
第八期了

4709
02:27:49,000 --> 02:27:51,000
在 2014 年做了七期

4710
02:27:51,000 --> 02:27:53,000
然后非常高兴上

4711
02:27:53,000 --> 02:27:54,000
荣登

4712
02:27:54,000 --> 02:27:55,000
苹果的这个 our of code

4713
02:27:55,000 --> 02:27:57,000
2014 这个活动的

4714
02:27:57,000 --> 02:27:58,000
推荐榜里面

4715
02:27:58,000 --> 02:27:59,000
啊对

4716
02:27:59,000 --> 02:28:00,000
没错

4717
02:28:00,000 --> 02:28:02,000
其实 our of code 是干嘛的

4718
02:28:03,000 --> 02:28:04,000
就是他大概是一个

4719
02:28:04,000 --> 02:28:05,000
全球性的活动

4720
02:28:05,000 --> 02:28:07,000
就是大家来学编程

4721
02:28:07,000 --> 02:28:08,000
对对对

4722
02:28:08,000 --> 02:28:09,000
推进这个就是这个

4723
02:28:09,000 --> 02:28:13,000
就把编程作为通识教育的一部分

4724
02:28:13,000 --> 02:28:14,000
让更多人来能够接受他

4725
02:28:14,000 --> 02:28:15,000
而不是说

4726
02:28:15,000 --> 02:28:16,000
哎呀我是小白

4727
02:28:16,000 --> 02:28:16,000
我什么都不懂

4728
02:28:16,000 --> 02:28:18,000
不要告诉我那些什么东西

4729
02:28:18,000 --> 02:28:20,000
你们连奥巴马都就写加巴斯圭了

4730
02:28:20,000 --> 02:28:20,000
是吗

4731
02:28:21,000 --> 02:28:21,000
对

4732
02:28:22,000 --> 02:28:24,000
所以这个事情还是蛮值得高兴的

4733
02:28:24,000 --> 02:28:24,000
但是

4734
02:28:24,000 --> 02:28:25,000
对

4735
02:28:25,000 --> 02:28:25,000
那有人说

4736
02:28:25,000 --> 02:28:27,000
咱们两个可以互相互相

4737
02:28:27,000 --> 02:28:30,000
公为一番

4738
02:28:30,000 --> 02:28:31,000
unbelievable you

4739
02:28:31,000 --> 02:28:32,000
subject name here

4740
02:28:32,000 --> 02:28:36,000
must be the pride of subject hometown here

4741
02:28:36,000 --> 02:28:36,000
耶

4742
02:28:36,000 --> 02:28:37,000
耶

4743
02:28:37,000 --> 02:28:38,000
啊

4744
02:28:38,000 --> 02:28:40,000
不过也有人说哈这个

4745
02:28:40,000 --> 02:28:42,000
我们这个这么讲那么多

4746
02:28:42,000 --> 02:28:45,000
是不是对对初学变成者太难了

4747
02:28:45,000 --> 02:28:46,000
我是这么想的

4748
02:28:46,000 --> 02:28:48,000
其实我们讲的很多概念应该是

4749
02:28:48,000 --> 02:28:50,000
主要的目的还是唤起

4750
02:28:50,000 --> 02:28:52,000
大家对对这个的兴趣嘛哈

4751
02:28:54,000 --> 02:28:54,000
我们有吗

4752
02:28:54,000 --> 02:28:55,000
有这个

4753
02:28:55,000 --> 02:28:56,000
我不知道

4754
02:28:56,000 --> 02:28:57,000
我希望是这样子

4755
02:28:57,000 --> 02:28:59,000
我也不知道

4756
02:28:59,000 --> 02:29:01,000
我觉得还是那句话吧

4757
02:29:01,000 --> 02:29:03,000
就是这款节目我们想做就做

4758
02:29:03,000 --> 02:29:05,000
想听的人听不想听的人就不

4759
02:29:05,000 --> 02:29:05,000
对

4760
02:29:05,000 --> 02:29:06,000
对

4761
02:29:06,000 --> 02:29:07,000
然后

4762
02:29:07,000 --> 02:29:07,000
anyway

4763
02:29:07,000 --> 02:29:08,000
嗯

4764
02:29:08,000 --> 02:29:10,000
啊不过这个还是蛮可惜可恶的事情

4765
02:29:10,000 --> 02:29:13,000
在做了做了一些还是有

4766
02:29:13,000 --> 02:29:14,000
有有有什么

4767
02:29:14,000 --> 02:29:15,000
有所

4768
02:29:15,000 --> 02:29:16,000
呃

4769
02:29:16,000 --> 02:29:17,000
被人认识吧

4770
02:29:17,000 --> 02:29:18,000
然后能够对

4771
02:29:18,000 --> 02:29:19,000
被跟着都能知道

4772
02:29:19,000 --> 02:29:20,000
然后能拿到对

4773
02:29:20,000 --> 02:29:22,000
回想 2014 年觉得

4774
02:29:22,000 --> 02:29:24,000
这件事情还是挺值得教的

4775
02:29:24,000 --> 02:29:24,000
对

4776
02:29:24,000 --> 02:29:26,000
那又可以贴个张

4777
02:29:26,000 --> 02:29:26,000
hour of code

4778
02:29:26,000 --> 02:29:28,000
recommended

4779
02:29:28,000 --> 02:29:28,000
耶

4780
02:29:30,000 --> 02:29:30,000
好了

4781
02:29:30,000 --> 02:29:31,000
好了

4782
02:29:31,000 --> 02:29:32,000
今天就到此为止了

4783
02:29:32,000 --> 02:29:33,000
下期再见

4784
02:29:33,000 --> 02:29:34,000
拜拜

4785
02:29:34,000 --> 02:29:35,000
拜拜

