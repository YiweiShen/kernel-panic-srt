1
00:00:00,000 --> 00:00:05,000
大家好 欢迎收听第七期的内核恐慌 我是 Ryo

2
00:00:05,000 --> 00:00:09,000
我是乌涛 终于第七期了 其实我很喜欢数字

3
00:00:11,000 --> 00:00:17,000
其实今天这期节目的时间会比较奇怪 我们是提前了很久

4
00:00:17,000 --> 00:00:19,000
你们听到的时候应该是

5
00:00:19,000 --> 00:00:20,000
正能阶之后了

6
00:00:21,000 --> 00:00:24,000
你乌涛解释一下为什么这么干的

7
00:00:24,000 --> 00:00:31,000
因为在神秘的时间点 我们还没有办法得到足够的听众反馈

8
00:00:31,000 --> 00:00:38,000
我们相信我们在上一期里面遇到了犯了很多很低级的错误 有可能是非常常识性的错误

9
00:00:38,000 --> 00:00:44,000
但是在目前这个 time space 的 point 上面 我们还没有这些反馈信息

10
00:00:44,000 --> 00:00:48,000
所以我们这一期暂时先不做 fall up

11
00:00:48,000 --> 00:00:53,000
但是我保证下期大家会听到我们两个在这边

12
00:00:53,000 --> 00:00:55,000
怎么说 痛哭流泪

13
00:00:57,000 --> 00:01:03,000
垂凶顿足的道歉说我们犯了一些低级的错误 包括上一期这一期

14
00:01:07,000 --> 00:01:10,000
所以这一期我们的主题是什么

15
00:01:10,000 --> 00:01:12,000
package management

16
00:01:12,000 --> 00:01:19,000
其实有一点点像上一期的主题的自然延伸 就是上一期我们讨论了软件

17
00:01:19,000 --> 00:01:22,000
或者说程序生命周期的管理

18
00:01:23,000 --> 00:01:27,000
主要还是从比较小的一个主眼点入手

19
00:01:27,000 --> 00:01:32,000
主要是其实我一开始只是想谈内存管理 但是没有想到后面撤到这么多

20
00:01:32,000 --> 00:01:37,000
这一期的内容其实就是当你的软件写出来

21
00:01:37,000 --> 00:01:41,000
或者说你在写软件的时候 你会需要用到去去多多内部外部的工具

22
00:01:41,000 --> 00:01:46,000
并且你希望你的软件可以某种比较方便的方式被别人使用

23
00:01:46,000 --> 00:01:49,000
那你就需要把它包装起来

24
00:01:49,000 --> 00:01:52,000
我们这一期主要讨论就是一个问题

25
00:01:54,000 --> 00:02:00,000
所以在开始之前我们要先解释一下什么叫做这个概念是 package management

26
00:02:00,000 --> 00:02:05,000
对 package 实际上是一个非常泛泛的称呼

27
00:02:05,000 --> 00:02:11,000
它是一个指设非常不清楚的词 在很多不同语经之下会有很多不同意义

28
00:02:11,000 --> 00:02:17,000
比如说以 OS 10 来说 package 可以是指

29
00:02:17,000 --> 00:02:20,000
比如说一个 application bundle 可以是一个 package 对吧

30
00:02:20,000 --> 00:02:26,000
然后但是与此同时你又可以通过一种叫做

31
00:02:26,000 --> 00:02:29,000
到 PKG 的文件来安装一个程序

32
00:02:29,000 --> 00:02:32,000
然后那个到 PKG 文件也是一个 package

33
00:02:33,000 --> 00:02:40,000
对 有点在不同的语经下 package 的概念就是有点比较不清晰的

34
00:02:40,000 --> 00:02:45,000
对 然后加二成学可能会非常习惯于一个 package

35
00:02:45,000 --> 00:02:49,000
就是一个 shake jar file 或者是一个 war file

36
00:02:49,000 --> 00:02:55,000
然后它既可以指拿来用的第三方 cool

37
00:02:55,000 --> 00:03:01,000
也可以指自己写出来的什么东西在部署的时候所打捞成的一个文件

38
00:03:02,000 --> 00:03:06,000
对 就是在对开发的时候我们讲的 package 和部署的时候

39
00:03:06,000 --> 00:03:08,000
package 就其实又不是同一个

40
00:03:08,000 --> 00:03:11,000
相关的但并不完全一指

41
00:03:11,000 --> 00:03:14,000
对 那什么是开发时的 package

42
00:03:15,000 --> 00:03:17,000
对 这个要解释一下吧

43
00:03:17,000 --> 00:03:20,000
就是大概可以理解为你要写一个软件

44
00:03:20,000 --> 00:03:22,000
然后你需要依赖

45
00:03:22,000 --> 00:03:26,000
你不是从从头到尾都是用全部自己写

46
00:03:26,000 --> 00:03:29,000
你肯定要用到别人的一些什么第三方的代码

47
00:03:29,000 --> 00:03:33,000
或者是你语言的原生的标准库里面那些东西

48
00:03:33,000 --> 00:03:37,000
然后这些你要用的那些东西大概可以理解为一个 package

49
00:03:37,000 --> 00:03:39,000
这个时候你就要去调用那些 package

50
00:03:39,000 --> 00:03:41,000
才能完成你这个软件的功能吗

51
00:03:41,000 --> 00:03:44,000
对 我记得小时候写程序

52
00:03:44,000 --> 00:03:46,000
如果需要用到别人的第三方代码

53
00:03:46,000 --> 00:03:48,000
我就直接把它代码考备一遍

54
00:03:48,000 --> 00:03:50,000
连贴到我的文件里就可以了

55
00:03:50,000 --> 00:03:52,000
对的什么

56
00:03:52,000 --> 00:03:55,000
这是 package management done run

57
00:03:58,000 --> 00:04:00,000
不过其实在今天我们做的很多事情

58
00:04:00,000 --> 00:04:03,000
跟那个其实在本质上也是很类似的

59
00:04:03,000 --> 00:04:06,000
就把别人的代码挪到自己的代码库里面去

60
00:04:06,000 --> 00:04:10,000
这样可以保证以后你就不用再管别人

61
00:04:10,000 --> 00:04:13,000
他怎么改他你反正你有一份副本了

62
00:04:13,000 --> 00:04:16,000
在你的本地的目录里面去对吧

63
00:04:16,000 --> 00:04:18,000
对 现在的 package management

64
00:04:18,000 --> 00:04:20,000
或者说在开发时的 package management

65
00:04:20,000 --> 00:04:24,000
所决定的问题就是怎样让你不尽量

66
00:04:24,000 --> 00:04:28,000
怎样让你尽量不 dirty 的去考备别人的文件

67
00:04:28,000 --> 00:04:30,000
到你的工程里面去

68
00:04:30,000 --> 00:04:33,000
就如果你需要依赖别人的代码

69
00:04:33,000 --> 00:04:36,000
而通过简单的复制连贴

70
00:04:36,000 --> 00:04:38,000
像我们童年做的那样的话

71
00:04:38,000 --> 00:04:41,000
假如对方升级了一下他的一个功能

72
00:04:41,000 --> 00:04:42,000
你怎么用呢

73
00:04:42,000 --> 00:04:45,000
你还要再考备再连贴一遍

74
00:04:45,000 --> 00:04:47,000
这还不是最痛苦的部分

75
00:04:47,000 --> 00:04:49,000
最痛苦的部分是

76
00:04:49,000 --> 00:04:52,000
假如你想要把别人的库扔出去的时候

77
00:04:52,000 --> 00:04:54,000
有可能你会非常苦恼的发现

78
00:04:54,000 --> 00:04:59,000
已经不记得哪一部分是你考备复制连贴进来的

79
00:04:59,000 --> 00:05:01,000
而哪一部分是你自己写的了

80
00:05:02,000 --> 00:05:03,000
这个要什么

81
00:05:03,000 --> 00:05:05,000
要有这个版本管理才能发现

82
00:05:05,000 --> 00:05:07,000
要回去找那个 log

83
00:05:07,000 --> 00:05:09,000
对 而在你发明版本管理

84
00:05:09,000 --> 00:05:11,000
自己发明一个版本管理系统之前

85
00:05:11,000 --> 00:05:13,000
你可能已经会先发现

86
00:05:13,000 --> 00:05:17,000
原来世界上有 package management 这种东西

87
00:05:19,000 --> 00:05:21,000
然后另外一个我们常说的状态

88
00:05:21,000 --> 00:05:23,000
就是说在部署的时候

89
00:05:23,000 --> 00:05:25,000
所谓把软件分发给

90
00:05:25,000 --> 00:05:26,000
如果你是卖给消费者的话

91
00:05:26,000 --> 00:05:27,000
你是分发给别人

92
00:05:27,000 --> 00:05:30,000
或者是你是像我部署的服务器的软件的话

93
00:05:30,000 --> 00:05:32,000
你是要怎么把它弄

94
00:05:32,000 --> 00:05:34,000
导臀到这个服务器上去运行

95
00:05:34,000 --> 00:05:38,000
这个时候的要求又有点不一样

96
00:05:38,000 --> 00:05:39,000
这个时候我们要求

97
00:05:39,000 --> 00:05:41,000
这个 package 是尽可能的

98
00:05:41,000 --> 00:05:43,000
是什么 可重复的

99
00:05:43,000 --> 00:05:45,000
就是你整个 deploy 的过程

100
00:05:45,000 --> 00:05:47,000
应该是可以重复的

101
00:05:47,000 --> 00:05:49,000
对 那这么说

102
00:05:49,000 --> 00:05:50,000
可能稍微有点抽象

103
00:05:50,000 --> 00:05:52,000
但是如果你是一个 Windows 用户的话

104
00:05:52,000 --> 00:05:55,000
你可能会习惯于安装什么软件

105
00:05:55,000 --> 00:05:58,000
就是打开一个安装

106
00:05:58,000 --> 00:06:01,000
一个安装软件的 insulted EXE

107
00:06:01,000 --> 00:06:03,000
然后或者叫 setup.exe

108
00:06:03,000 --> 00:06:05,000
然后你一路回车

109
00:06:05,000 --> 00:06:07,000
执行一个叫做 setup visa 的东西

110
00:06:07,000 --> 00:06:10,000
然后指定一个安装的目标路

111
00:06:10,000 --> 00:06:11,000
进入路

112
00:06:11,000 --> 00:06:13,000
对 然后它会把所有东西

113
00:06:13,000 --> 00:06:15,000
给你塞到那个路下面之后

114
00:06:15,000 --> 00:06:16,000
然后你去那个路

115
00:06:16,000 --> 00:06:18,000
找就可以找到你要运行的程序

116
00:06:18,000 --> 00:06:20,000
所以在 Windows 的世界里面

117
00:06:20,000 --> 00:06:22,000
我们安装程序的过程是用一个程序

118
00:06:22,000 --> 00:06:23,000
去安装另一个程序

119
00:06:23,000 --> 00:06:24,000
或者说你为了安装你的程序

120
00:06:24,000 --> 00:06:27,000
你必须创建另外一个

121
00:06:27,000 --> 00:06:30,000
程序把你的程序打包在一个 package 里面

122
00:06:30,000 --> 00:06:32,000
然后交给别人

123
00:06:32,000 --> 00:06:35,000
别人在同样要利用另外一个程序

124
00:06:35,000 --> 00:06:37,000
来解压你的程序

125
00:06:37,000 --> 00:06:41,000
然后把它安装到对方的电脑下面

126
00:06:41,000 --> 00:06:42,000
对

127
00:06:42,000 --> 00:06:45,000
这个就跟在 OS 3 上面的常用的

128
00:06:45,000 --> 00:06:47,000
安装方式还不太一样

129
00:06:47,000 --> 00:06:48,000
刚才你也讲的

130
00:06:48,000 --> 00:06:49,000
就是我们通常到一种方式

131
00:06:49,000 --> 00:06:51,000
是通过一个 DMG 的进向

132
00:06:51,000 --> 00:06:54,000
或者是存在一个点 zip 的压缩包

133
00:06:54,000 --> 00:06:56,000
然后解压出了一个点 APP 的

134
00:06:56,000 --> 00:06:58,000
那么一个目录

135
00:06:58,000 --> 00:07:00,000
然后这个目录整个是一个完整的程序

136
00:07:00,000 --> 00:07:03,000
你直接把它拖到你的 Application 的 folder 里面

137
00:07:03,000 --> 00:07:05,000
这个事情就算完成了

138
00:07:05,000 --> 00:07:08,000
所以但是刚才你说那种 Windows 上面安装的方式

139
00:07:08,000 --> 00:07:10,000
在 OS 3 下的对比

140
00:07:10,000 --> 00:07:13,000
就是你之前也提到点 PKG 那种方式

141
00:07:13,000 --> 00:07:14,000
运行一个脚本

142
00:07:14,000 --> 00:07:17,000
然后把那些文件塞到你的系统的各个角落

143
00:07:17,000 --> 00:07:19,000
主要来说

144
00:07:19,000 --> 00:07:22,000
其实我们说 Max 下面

145
00:07:22,000 --> 00:07:26,000
一个 DotApp 的文件拖到你的 Application 下面

146
00:07:26,000 --> 00:07:27,000
就可以得到

147
00:07:27,000 --> 00:07:30,000
或者说以这种方式你就完成安装

148
00:07:30,000 --> 00:07:33,000
这种安装是一种仅仅是一次拷贝而已

149
00:07:33,000 --> 00:07:36,000
你安装一个程序的方法

150
00:07:36,000 --> 00:07:38,000
就是通过拷贝

151
00:07:38,000 --> 00:07:40,000
什么是点 App 呢

152
00:07:40,000 --> 00:07:41,000
可能

153
00:07:41,000 --> 00:07:43,000
我觉得这是一种

154
00:07:43,000 --> 00:07:46,000
不同的封装层级的思路的体现

155
00:07:46,000 --> 00:07:49,000
就是在 Max 下面的所谓 APP

156
00:07:49,000 --> 00:07:51,000
APP 文件实际上只是一个

157
00:07:51,000 --> 00:07:52,000
Folder 而已

158
00:07:52,000 --> 00:07:54,000
它只是一个文件夹而已

159
00:07:54,000 --> 00:07:56,000
但如果你把它改名成了点 APP

160
00:07:56,000 --> 00:08:00,000
并且在里面加上一个叫做 Info.plist 的文件

161
00:08:00,000 --> 00:08:04,000
Max 就会试图把它作为一个整体处理

162
00:08:04,000 --> 00:08:07,000
就是说你不能很方便的直接打开

163
00:08:07,000 --> 00:08:10,000
看到 APP 目录里面的内容

164
00:08:10,000 --> 00:08:12,000
但是你如果右键可以叫什么

165
00:08:12,000 --> 00:08:13,000
叫 ShowIn

166
00:08:13,000 --> 00:08:14,000
ShowContent

167
00:08:14,000 --> 00:08:16,000
ShowPackageContent

168
00:08:16,000 --> 00:08:19,000
对 这个呢就可以把它当成目录展开了

169
00:08:20,000 --> 00:08:24,000
这个是我们在分发给消费者的时候的一种

170
00:08:24,000 --> 00:08:26,000
分发时候的 package

171
00:08:26,000 --> 00:08:28,000
然后如果在服务端的话

172
00:08:28,000 --> 00:08:31,000
这种方式就非常非常多的

173
00:08:31,000 --> 00:08:34,000
不同的安装方式了

174
00:08:34,000 --> 00:08:35,000
待会我们待会讲到

175
00:08:35,000 --> 00:08:37,000
不同的发行版的时候一个一个说吧

176
00:08:37,000 --> 00:08:38,000
对

177
00:08:39,000 --> 00:08:41,000
所以其实你们看到

178
00:08:41,000 --> 00:08:42,000
我们在 Package Management 的

179
00:08:42,000 --> 00:08:44,000
两个不同的应用场合

180
00:08:44,000 --> 00:08:47,000
但其实他们还是有一定的贡信

181
00:08:47,000 --> 00:08:50,000
就比如说至少我们是我们要求说

182
00:08:50,000 --> 00:08:53,000
我们能够清楚的知道我们安装的是什么版本的

183
00:08:53,000 --> 00:08:55,000
一个 Package 对吧

184
00:08:55,000 --> 00:08:56,000
对

185
00:08:56,000 --> 00:08:58,000
我们知道有什么方法可以能够

186
00:08:58,000 --> 00:09:00,000
删掉它能够重复的安装

187
00:09:00,000 --> 00:09:01,000
对

188
00:09:01,000 --> 00:09:04,000
或者说比如说你把某一个文件修改

189
00:09:04,000 --> 00:09:05,000
意外修改了

190
00:09:05,000 --> 00:09:08,000
能够把那个东西再拿回来

191
00:09:08,000 --> 00:09:10,000
还有就是说

192
00:09:10,000 --> 00:09:15,000
你安装的多个 Package 之间最好不要互相有影响

193
00:09:15,000 --> 00:09:18,000
对吧比如说我安装了 A 这个包

194
00:09:18,000 --> 00:09:19,000
那我在安装 B 这个包

195
00:09:19,000 --> 00:09:20,000
他们会不会冲突啊

196
00:09:20,000 --> 00:09:22,000
我们最好能避免这种事情

197
00:09:22,000 --> 00:09:24,000
就是这些基本的需求吧

198
00:09:24,000 --> 00:09:25,000
对

199
00:09:25,000 --> 00:09:29,000
你在用 Windows 的时候有没有感觉到

200
00:09:29,000 --> 00:09:32,000
Windows 安装程序的过程是一个很神秘的过程

201
00:09:32,000 --> 00:09:35,000
或者是一个很复杂的过程

202
00:09:35,000 --> 00:09:38,000
其实我到今天为止也一直不是很清楚

203
00:09:38,000 --> 00:09:39,000
他们到底在做什么

204
00:09:39,000 --> 00:09:40,000
那我想想有

205
00:09:40,000 --> 00:09:42,000
有些什么事情我能想得起的

206
00:09:43,000 --> 00:09:45,000
主程序他们就作为一个

207
00:09:45,000 --> 00:09:48,000
就是常见的 Windows

208
00:09:48,000 --> 00:09:50,000
符合 Windows 规范的安装程序

209
00:09:50,000 --> 00:09:54,000
他是把自己塞到那个叫 C 下面的 Program Files

210
00:09:54,000 --> 00:09:57,000
然后建一个自己公司的名字的目录

211
00:09:57,000 --> 00:10:01,000
在下面建一个你这个程序的名字的目录

212
00:10:01,000 --> 00:10:03,000
然后再把东西放进去吧

213
00:10:03,000 --> 00:10:05,000
包括你的那些什么需要依赖的

214
00:10:05,000 --> 00:10:07,000
那么软件库啊

215
00:10:07,000 --> 00:10:09,000
还有什么静态文件对吧

216
00:10:09,000 --> 00:10:10,000
放在那里面去

217
00:10:10,000 --> 00:10:13,000
然后还要加什么就是用户配置写到什么

218
00:10:13,000 --> 00:10:15,000
注册表里面对不对

219
00:10:15,000 --> 00:10:17,000
现在 Windows 8 里面好像又有一些什么

220
00:10:17,000 --> 00:10:18,000
又有点什么不一样

221
00:10:18,000 --> 00:10:21,000
有个什么 Apps Data 这个目录了

222
00:10:21,000 --> 00:10:24,000
What 所以 Windows 8 要包含出主色表吗

223
00:10:24,000 --> 00:10:25,000
不可能吧

224
00:10:25,000 --> 00:10:28,000
主色表是 Windows 核心技术一部分的

225
00:10:28,000 --> 00:10:30,000
这个不太清楚具体怎么样子

226
00:10:30,000 --> 00:10:32,000
但是我上次在虚拟今年装的时候

227
00:10:32,000 --> 00:10:35,000
是发现有这么一些新的

228
00:10:35,000 --> 00:10:38,000
就是新是相对于之前 Windows XP

229
00:10:38,000 --> 00:10:39,000
或者是 Windows 7 的时代的东西

230
00:10:39,000 --> 00:10:41,000
但这个因为我们我不是这个

231
00:10:41,000 --> 00:10:42,000
我不是这个 Windows 中的用文

232
00:10:42,000 --> 00:10:43,000
也不太清楚它怎么也会是

233
00:10:43,000 --> 00:10:47,000
App Data 会不会是 App 在运行时产生的数据

234
00:10:47,000 --> 00:10:48,000
有可能

235
00:10:48,000 --> 00:10:49,000
那个是什么 data

236
00:10:49,000 --> 00:10:51,000
我觉得有个什么 data roaming fold

237
00:10:51,000 --> 00:10:53,000
是拿来做这些事情

238
00:10:53,000 --> 00:10:54,000
OK

239
00:10:54,000 --> 00:10:56,000
那因为我也不是很清楚

240
00:10:56,000 --> 00:10:59,000
但其实我觉得目前让我觉得

241
00:10:59,000 --> 00:11:01,000
回想起来很疑惑的一点就是

242
00:11:01,000 --> 00:11:04,000
Windows 在安装过程之中

243
00:11:04,000 --> 00:11:07,000
所产生的那些数据

244
00:11:07,000 --> 00:11:10,000
有时候在有些安装程序里面

245
00:11:10,000 --> 00:11:11,000
是可以看到的那样

246
00:11:11,000 --> 00:11:13,000
而另外一些安装程序里面是看不到的

247
00:11:13,000 --> 00:11:16,000
就比如说我记得 Windows 在安装的时候

248
00:11:16,000 --> 00:11:18,000
会跳出来一个列表

249
00:11:18,000 --> 00:11:19,000
然后不停地告诉你

250
00:11:19,000 --> 00:11:21,000
那个新的文件被考到哪个地方

251
00:11:21,000 --> 00:11:25,000
然后你最后可以重新的去审查一遍

252
00:11:25,000 --> 00:11:27,000
这个安装程序到底干了些什么

253
00:11:27,000 --> 00:11:29,000
当然我相信 99%的人不会这么做

254
00:11:29,000 --> 00:11:31,000
但是提供的这种可能性

255
00:11:31,000 --> 00:11:35,000
而另外一些安装程序好像从头到尾就

256
00:11:35,000 --> 00:11:36,000
就一直 next

257
00:11:36,000 --> 00:11:37,000
对

258
00:11:37,000 --> 00:11:39,000
而且对有一个很著名的现象就是

259
00:11:39,000 --> 00:11:43,000
进度条从 0 到 99 需要大概 1 秒钟

260
00:11:43,000 --> 00:11:46,000
然后从 99 到 100 需要 10 分钟

261
00:11:47,000 --> 00:11:48,000
没算

262
00:11:48,000 --> 00:11:49,000
对

263
00:11:49,000 --> 00:11:51,000
刚刚你讲那个 Windows 那种形式

264
00:11:51,000 --> 00:11:52,000
它是有一种

265
00:11:52,000 --> 00:11:54,000
我记得印象中是有一种

266
00:11:54,000 --> 00:11:58,000
专门的那种生成安装程序的程序

267
00:11:58,000 --> 00:11:59,000
对

268
00:11:59,000 --> 00:12:01,000
其实就是不同的安装程序的供应

269
00:12:01,000 --> 00:12:02,000
是相当不同而已

270
00:12:02,000 --> 00:12:05,000
然后有之前有这种很常用的那种

271
00:12:05,000 --> 00:12:08,000
installer 就是可以让你有一个列表

272
00:12:08,000 --> 00:12:10,000
框险是每一个步骤在干嘛

273
00:12:10,000 --> 00:12:14,000
但其实这个是非常用户不友好的一个东西

274
00:12:14,000 --> 00:12:16,000
作为一个普通用户

275
00:12:16,000 --> 00:12:17,000
你为什么要知道

276
00:12:17,000 --> 00:12:19,000
我们安装了多少个文件在哪个位置

277
00:12:19,000 --> 00:12:20,000
是吧

278
00:12:20,000 --> 00:12:21,000
这个是对你来说是没有

279
00:12:21,000 --> 00:12:23,000
什么实际价值的信息

280
00:12:24,000 --> 00:12:26,000
当然除非你有什么劫屁之外

281
00:12:26,000 --> 00:12:27,000
说你卸载的时候

282
00:12:27,000 --> 00:12:29,000
一定要逐个对照照那个列表

283
00:12:29,000 --> 00:12:31,000
把那个文件一个一个删掉

284
00:12:32,000 --> 00:12:34,000
这还是一个约定

285
00:12:34,000 --> 00:12:35,000
我也不知道

286
00:12:35,000 --> 00:12:38,000
就有时候文件上面提供的过渡信息在

287
00:12:38,000 --> 00:12:43,000
有些人看来是好是是一种是一种

288
00:12:43,000 --> 00:12:46,000
他时刻要看到电脑在做什么

289
00:12:46,000 --> 00:12:48,000
而反过来你给他一台

290
00:12:48,000 --> 00:12:50,000
叫不那么

291
00:12:52,000 --> 00:12:54,000
intrusive 的操作性的话

292
00:12:54,000 --> 00:12:57,000
他会觉得是操作程序怎么这么安静

293
00:12:57,000 --> 00:12:58,000
我

294
00:12:59,000 --> 00:13:01,000
我在用你你给我点回应好吗

295
00:13:01,000 --> 00:13:04,000
就比如说我记得刚刚学那个 linux 命令行的时候

296
00:13:06,000 --> 00:13:09,000
执行一个命令他什么都不告诉你

297
00:13:10,000 --> 00:13:11,000
他就不

298
00:13:11,000 --> 00:13:12,000
对默认是

299
00:13:12,000 --> 00:13:14,000
默认这种状态是没什么可做的

300
00:13:14,000 --> 00:13:16,000
所以他就什么也不说

301
00:13:16,000 --> 00:13:19,000
这样我觉得当时非常的难忍受

302
00:13:19,000 --> 00:13:20,000
因为在道子前面

303
00:13:20,000 --> 00:13:22,000
不管干嘛他都会告诉你我干了什么

304
00:13:23,000 --> 00:13:24,000
没什么可干的

305
00:13:24,000 --> 00:13:25,000
就算没什么可干的

306
00:13:25,000 --> 00:13:27,000
他也告诉你说没什么可干的

307
00:13:28,000 --> 00:13:31,000
但刚刚切换到 linux 就觉得我好酷

308
00:13:32,000 --> 00:13:37,000
我觉得这可能也是那个什么 unix 用户和

309
00:13:37,000 --> 00:13:40,000
或类 unix 用户和 windows

310
00:13:40,000 --> 00:13:43,000
或者道子用户的本质区别吧

311
00:13:43,000 --> 00:13:46,000
就是可能用类 unix 用户就觉得

312
00:13:46,000 --> 00:13:48,000
你们这个事情做了就好了

313
00:13:48,000 --> 00:13:49,000
只要没出什么问题

314
00:13:49,000 --> 00:13:50,000
就别来烦我

315
00:13:50,000 --> 00:13:53,000
但我还有别的烦心的事多就对吧

316
00:13:53,000 --> 00:13:55,000
然后因为他们很多都是

317
00:13:55,000 --> 00:13:57,000
所以早期都是什么专业用户

318
00:13:57,000 --> 00:13:58,000
或者这种程序员

319
00:13:58,000 --> 00:13:59,000
他知道在干嘛

320
00:13:59,000 --> 00:14:01,000
然后也知道结果是怎么样

321
00:14:01,000 --> 00:14:03,000
但是像 dose

322
00:14:03,000 --> 00:14:05,000
这种面向消费者的

323
00:14:05,000 --> 00:14:08,000
他可能需要一些什么存在感

324
00:14:08,000 --> 00:14:12,000
他需要知道我花 20 刀买了这个程序

325
00:14:12,000 --> 00:14:14,000
他干嘛了呢最后对吧

326
00:14:14,000 --> 00:14:17,000
对有回应是用户有好的一种表现

327
00:14:17,000 --> 00:14:20,000
但没有回应则是 progmatical 的一种表现

328
00:14:22,000 --> 00:14:23,000
可以这么说吗

329
00:14:23,000 --> 00:14:26,000
我不确定是不是一定用户有好

330
00:14:26,000 --> 00:14:29,000
可能说有些人不要来烦我

331
00:14:29,000 --> 00:14:30,000
就不干嘛

332
00:14:30,000 --> 00:14:32,000
不至少对于一个初学者来说

333
00:14:32,000 --> 00:14:35,000
没有回应其实是一个非常费劫的 behavior

334
00:14:35,000 --> 00:14:39,000
你要你必须要一上来就跟他说

335
00:14:39,000 --> 00:14:41,000
这个程序如果没有回应的话

336
00:14:41,000 --> 00:14:43,000
意味着他认为自己没有什么可做的

337
00:14:43,000 --> 00:14:45,000
或者是他完成了该做的事情

338
00:14:45,000 --> 00:14:46,000
他就没有什么回应

339
00:14:46,000 --> 00:14:49,000
他只有他唯一有回应的时候就是抱错

340
00:14:50,000 --> 00:14:54,000
对这是两种不同的思想

341
00:14:54,000 --> 00:14:57,000
就看场景或者看你的应用

342
00:14:57,000 --> 00:15:01,000
有时候我的感觉倾向于

343
00:15:01,000 --> 00:15:03,000
就是你用一个新的软子

344
00:15:03,000 --> 00:15:05,000
或者是新的产品的时候

345
00:15:05,000 --> 00:15:07,000
你可能需要了解一下一些具体的状况

346
00:15:07,000 --> 00:15:09,000
但是你也可以从另一个角度说

347
00:15:09,000 --> 00:15:10,000
这个是产品做得不好

348
00:15:10,000 --> 00:15:12,000
需要我了解这么多细节

349
00:15:12,000 --> 00:15:13,000
其实没必要嘛对吧

350
00:15:13,000 --> 00:15:17,000
但另外一种就说反正你这个工作就好了

351
00:15:17,000 --> 00:15:18,000
不要那么多废话

352
00:15:18,000 --> 00:15:19,000
对

353
00:15:21,000 --> 00:15:26,000
说回到我们的 Pikachu Management 的话题上来

354
00:15:26,000 --> 00:15:28,000
就是还有一个问题

355
00:15:28,000 --> 00:15:31,000
Windows 上面当时一直让我疑惑的是

356
00:15:31,000 --> 00:15:36,000
假如一个程序同时需要一个库的两版本

357
00:15:36,000 --> 00:15:38,000
Windows 到底是怎么解决的呢

358
00:15:39,000 --> 00:15:40,000
这不是没法解决吗

359
00:15:40,000 --> 00:15:43,000
他们后来才会出现那个叫做什么 DLLHEL

360
00:15:43,000 --> 00:15:46,000
对 DLLHEL 具体来说

361
00:15:46,000 --> 00:15:53,000
其实就是 A 软件需要某一个库的假版本

362
00:15:53,000 --> 00:15:55,000
B 软件需要这个库的一版本

363
00:15:55,000 --> 00:15:57,000
那 Windows 会同时保留

364
00:15:57,000 --> 00:15:59,000
加一两个版本对不对

365
00:15:59,000 --> 00:16:01,000
应该是这样的对

366
00:16:01,000 --> 00:16:03,000
那加一两版本的差别在哪

367
00:16:03,000 --> 00:16:05,000
是在用户名字

368
00:16:05,000 --> 00:16:07,000
文件名上有一个版本号的差别吗

369
00:16:08,000 --> 00:16:10,000
这个我不太清楚 Windows 怎么具体怎么做

370
00:16:10,000 --> 00:16:14,000
但是这个在不同的这种

371
00:16:14,000 --> 00:16:16,000
环境里面都是存在的

372
00:16:16,000 --> 00:16:18,000
就是这个最麻烦的问题是

373
00:16:18,000 --> 00:16:19,000
因为同一个软件不同版本

374
00:16:19,000 --> 00:16:21,000
它可能是互不兼容的嘛

375
00:16:21,000 --> 00:16:23,000
然后如果

376
00:16:23,000 --> 00:16:25,000
就是你刚才说的情况其实还好了

377
00:16:25,000 --> 00:16:26,000
就是它 A 程序的时候

378
00:16:26,000 --> 00:16:28,000
它掉 A 加版本好了

379
00:16:28,000 --> 00:16:30,000
B 程序掉一版本好像互相不冲突

380
00:16:30,000 --> 00:16:33,000
比较坑的是这种

381
00:16:33,000 --> 00:16:35,000
是说你自己要写一个 A 程序

382
00:16:35,000 --> 00:16:36,000
然后你可能需要这个

383
00:16:36,000 --> 00:16:39,000
某个库的 1.0 版本

384
00:16:39,000 --> 00:16:43,000
然后你同时还要使用另外一个库的

385
00:16:43,000 --> 00:16:45,000
另外一个库 B 吧

386
00:16:45,000 --> 00:16:47,000
然后 B 它可能需要

387
00:16:47,000 --> 00:16:50,000
同样你依赖的那个库的 1.2 版本

388
00:16:50,000 --> 00:16:52,000
这个时候你就很坑了

389
00:16:52,000 --> 00:16:54,000
你就是要同时支持不同的

390
00:16:55,000 --> 00:16:56,000
在同一个程序里面

391
00:16:56,000 --> 00:16:59,000
你要依赖同一个软件库的不同的版本

392
00:17:00,000 --> 00:17:02,000
就是会出现那种交叉

393
00:17:02,000 --> 00:17:04,000
这种这种

394
00:17:05,000 --> 00:17:07,000
怎么形容比较好

395
00:17:07,000 --> 00:17:09,000
循环依赖

396
00:17:09,000 --> 00:17:11,000
也不叫循环

397
00:17:11,000 --> 00:17:12,000
会想循环

398
00:17:12,000 --> 00:17:14,000
对有可能会想循环

399
00:17:14,000 --> 00:17:16,000
对反正就很糟糕

400
00:17:16,000 --> 00:17:19,000
对脑中立刻出现了一个

401
00:17:19,000 --> 00:17:21,000
一个错误复杂的竖状图

402
00:17:24,000 --> 00:17:26,000
如果这个竖还好

403
00:17:26,000 --> 00:17:27,000
对它有可能是

404
00:17:27,000 --> 00:17:28,000
有 Circular Reference

405
00:17:28,000 --> 00:17:30,000
对它可能是个有向图

406
00:17:31,000 --> 00:17:32,000
就很搞死你

407
00:17:32,000 --> 00:17:33,000
对

408
00:17:34,000 --> 00:17:36,000
那 Linux 上面就没有 Dependence Help

409
00:17:36,000 --> 00:17:38,000
就没有 DHL Help

410
00:17:38,000 --> 00:17:39,000
其实也有吧

411
00:17:39,000 --> 00:17:40,000
其实也是有的

412
00:17:40,000 --> 00:17:42,000
是现在我们大部分用的发行板

413
00:17:42,000 --> 00:17:44,000
它都是通过原生的

414
00:17:44,000 --> 00:17:46,000
它们一般每个发行板

415
00:17:46,000 --> 00:17:48,000
会自带一个包管的系统

416
00:17:48,000 --> 00:17:49,000
然后那个包管的系统

417
00:17:49,000 --> 00:17:51,000
会想办法去解决这些冲突

418
00:17:51,000 --> 00:17:53,000
这些之类的问题

419
00:17:53,000 --> 00:17:56,000
而且发行板的维护者

420
00:17:56,000 --> 00:17:58,000
他在打包的时候

421
00:17:58,000 --> 00:18:00,000
他也会考虑说这个问题

422
00:18:00,000 --> 00:18:01,000
比如说你

423
00:18:01,000 --> 00:18:03,000
他比如拿 Dependence 来举例子

424
00:18:03,000 --> 00:18:04,000
他可能

425
00:18:04,000 --> 00:18:06,000
我发行的这个版本里面

426
00:18:06,000 --> 00:18:07,000
我把所有的都测过

427
00:18:07,000 --> 00:18:08,000
他们互相安装

428
00:18:08,000 --> 00:18:10,000
应该是没有问题的

429
00:18:10,000 --> 00:18:12,000
当然你如果有那种

430
00:18:12,000 --> 00:18:14,000
不同版本的这种

431
00:18:14,000 --> 00:18:15,000
很酷的需求的话

432
00:18:15,000 --> 00:18:17,000
它会通过不同的文件名

433
00:18:17,000 --> 00:18:18,000
不同的路径来实现吗

434
00:18:18,000 --> 00:18:19,000
具体来说

435
00:18:19,000 --> 00:18:21,000
其实就是

436
00:18:21,000 --> 00:18:24,000
假如在 Linux 上面有一个

437
00:18:24,000 --> 00:18:28,000
就是和 Dependence 一模一样的困境的话

438
00:18:28,000 --> 00:18:30,000
Linux 会

439
00:18:31,000 --> 00:18:35,000
支持你链接到不同版本的酷上面

440
00:18:35,000 --> 00:18:37,000
而这些酷

441
00:18:37,000 --> 00:18:39,000
每一个酷会有一个默认的版本

442
00:18:39,000 --> 00:18:41,000
对

443
00:18:41,000 --> 00:18:43,000
是这个选择会用那个吧

444
00:18:43,000 --> 00:18:45,000
会用那个软连接来实现

445
00:18:45,000 --> 00:18:47,000
或者一个符号连接来实现

446
00:18:49,000 --> 00:18:52,000
有时候我在用代变的时候

447
00:18:52,000 --> 00:18:54,000
需要升级某一个

448
00:18:54,000 --> 00:18:56,000
我想要的工具

449
00:18:56,000 --> 00:18:57,000
到某一个程度的版本

450
00:18:57,000 --> 00:18:58,000
比如说 VIM 吧

451
00:18:58,000 --> 00:19:00,000
然后

452
00:19:00,000 --> 00:19:03,000
使用其内置的包裹力工具

453
00:19:03,000 --> 00:19:04,000
升级的时候

454
00:19:04,000 --> 00:19:05,000
包裹力工具说

455
00:19:05,000 --> 00:19:07,000
这个东西依赖于那个东西

456
00:19:07,000 --> 00:19:09,000
但是

457
00:19:09,000 --> 00:19:11,000
那个东西的版本已经过旧了

458
00:19:11,000 --> 00:19:13,000
所以你需要一起升级那个东西

459
00:19:13,000 --> 00:19:14,000
好玩的

460
00:19:14,000 --> 00:19:15,000
一起升级它好玩

461
00:19:15,000 --> 00:19:16,000
可是你升级的时候

462
00:19:16,000 --> 00:19:17,000
又会说

463
00:19:17,000 --> 00:19:18,000
这个东西会安装

464
00:19:18,000 --> 00:19:19,000
那个

465
00:19:19,000 --> 00:19:21,000
就是 B 会

466
00:19:21,000 --> 00:19:23,000
再安装 C 另外一个版本

467
00:19:23,000 --> 00:19:24,000
而 C 另外一个版本

468
00:19:24,000 --> 00:19:27,000
在你这边会跟 D 的什么东西冲突

469
00:19:27,000 --> 00:19:29,000
然后就说

470
00:19:29,000 --> 00:19:31,000
怎么也是有这样的问题

471
00:19:31,000 --> 00:19:33,000
所以这样的你其实在个个评测下

472
00:19:33,000 --> 00:19:35,000
还是很难避免的

473
00:19:35,000 --> 00:19:36,000
可以说

474
00:19:36,000 --> 00:19:39,000
对其实我一直有一点想不明白

475
00:19:39,000 --> 00:19:40,000
比如说

476
00:19:40,000 --> 00:19:42,000
为什么我们

477
00:19:42,000 --> 00:19:44,000
这点可能在 Linux 下面比较明显

478
00:19:44,000 --> 00:19:46,000
就是我们经常会

479
00:19:46,000 --> 00:19:47,000
你装一个软件

480
00:19:47,000 --> 00:19:48,000
你会发现

481
00:19:48,000 --> 00:19:50,000
它会依赖一堆其他乱七八糟的

482
00:19:50,000 --> 00:19:51,000
其他的软件

483
00:19:51,000 --> 00:19:52,000
或者是裤位

484
00:19:52,000 --> 00:19:53,000
然后

485
00:19:53,000 --> 00:19:56,000
Linux 的大部分的发行版的做法

486
00:19:56,000 --> 00:19:57,000
是说

487
00:19:57,000 --> 00:19:58,000
我们发行版做的时候

488
00:19:58,000 --> 00:19:59,000
就会把这些东西考虑好

489
00:19:59,000 --> 00:20:00,000
他们之间的依赖关系

490
00:20:00,000 --> 00:20:02,000
然后我们会告诉你怎么去

491
00:20:02,000 --> 00:20:04,000
会一套算法去解决这个依赖问题

492
00:20:04,000 --> 00:20:06,000
但其实你会发现

493
00:20:06,000 --> 00:20:08,000
这个时候你也会有那种情况

494
00:20:08,000 --> 00:20:10,000
就是如果你升级到某一个

495
00:20:10,000 --> 00:20:12,000
它没有被发行版在那个

496
00:20:12,000 --> 00:20:15,000
版本支持的时候

497
00:20:15,000 --> 00:20:16,000
你就没有办法升级

498
00:20:16,000 --> 00:20:18,000
你那毛很大的风险去打破

499
00:20:18,000 --> 00:20:20,000
或者用自己编译的包

500
00:20:20,000 --> 00:20:21,000
那我就不明白

501
00:20:21,000 --> 00:20:23,000
为什么在现在

502
00:20:23,000 --> 00:20:26,000
就你直接装一个软件

503
00:20:26,000 --> 00:20:27,000
你把所有的依赖都打包好

504
00:20:27,000 --> 00:20:29,000
不要去和别人共享

505
00:20:29,000 --> 00:20:30,000
不就好了吗

506
00:20:30,000 --> 00:20:33,000
这个我觉得还是出于一个

507
00:20:33,000 --> 00:20:36,000
节省空间的考虑吧

508
00:20:36,000 --> 00:20:39,000
就如果你打包进去

509
00:20:39,000 --> 00:20:41,000
你自己需要的那个裤

510
00:20:41,000 --> 00:20:43,000
而这个裤其实很多很多

511
00:20:43,000 --> 00:20:44,000
其他程序都需要

512
00:20:44,000 --> 00:20:45,000
你总要找出一个界限吧

513
00:20:45,000 --> 00:20:46,000
就是那

514
00:20:46,000 --> 00:20:48,000
到具体到什么裤上

515
00:20:48,000 --> 00:20:51,000
你是一定要自己打包进去的

516
00:20:51,000 --> 00:20:54,000
这个有这么一个问题

517
00:20:54,000 --> 00:20:56,000
如果这个的理由

518
00:20:56,000 --> 00:20:58,000
是因为为了节省空间的话

519
00:20:58,000 --> 00:21:00,000
在现代硬件条件下

520
00:21:00,000 --> 00:21:01,000
根本就已经不成立了

521
00:21:01,000 --> 00:21:03,000
你现在自排你动

522
00:21:03,000 --> 00:21:04,000
动辞和多少

523
00:21:04,000 --> 00:21:05,000
一两个 T 对吧

524
00:21:05,000 --> 00:21:07,000
就是那个程序多大点空间

525
00:21:07,000 --> 00:21:09,000
不但并不仅仅是存储空间

526
00:21:09,000 --> 00:21:10,000
还有存储空间

527
00:21:10,000 --> 00:21:11,000
你是要考的进去

528
00:21:11,000 --> 00:21:13,000
假如说我对呀

529
00:21:13,000 --> 00:21:15,000
我这个包从事无具细

530
00:21:15,000 --> 00:21:17,000
从 Lipsey 一致的

531
00:21:17,000 --> 00:21:19,000
所有我可能用到的包

532
00:21:19,000 --> 00:21:21,000
我全都打包在一起

533
00:21:21,000 --> 00:21:23,000
就给用户下载

534
00:21:23,000 --> 00:21:26,000
这个好像点有点二吧

535
00:21:27,000 --> 00:21:29,000
虽然是这么说

536
00:21:29,000 --> 00:21:31,000
但是其实你看在 OS 10 下面的

537
00:21:31,000 --> 00:21:33,000
大部分的点是这么干的呀

538
00:21:33,000 --> 00:21:35,000
对吧

539
00:21:35,000 --> 00:21:36,000
其实倒是他们

540
00:21:36,000 --> 00:21:37,000
我后来也知道

541
00:21:37,000 --> 00:21:38,000
他们去想过这个问题

542
00:21:38,000 --> 00:21:40,000
也看了一些别人的说法

543
00:21:40,000 --> 00:21:41,000
有一个事情倒是

544
00:21:41,000 --> 00:21:43,000
我觉得是可以理解的

545
00:21:43,000 --> 00:21:44,000
就是因为你知道 Linux

546
00:21:44,000 --> 00:21:46,000
是这种开放的系统吗

547
00:21:46,000 --> 00:21:48,000
他希望如果你在使用

548
00:21:48,000 --> 00:21:49,000
某个软件

549
00:21:49,000 --> 00:21:50,000
某个软件裤的时候

550
00:21:50,000 --> 00:21:51,000
发现有问题

551
00:21:51,000 --> 00:21:53,000
你可以去修正它

552
00:21:53,000 --> 00:21:54,000
那么他希望你把修正

553
00:21:54,000 --> 00:21:55,000
比如 Buckfix

554
00:21:55,000 --> 00:21:57,000
能够也

555
00:21:57,000 --> 00:21:58,000
因为你做 Buckfix

556
00:21:58,000 --> 00:22:01,000
其实在从某种意义上来说

557
00:22:01,000 --> 00:22:03,000
是在帮助别写这个软件

558
00:22:03,000 --> 00:22:04,000
对吧

559
00:22:04,000 --> 00:22:05,000
那么他希望把这种成果

560
00:22:05,000 --> 00:22:06,000
这种劳动的工作

561
00:22:06,000 --> 00:22:08,000
不要浪费掉

562
00:22:08,000 --> 00:22:10,000
你能够在你使用

563
00:22:10,000 --> 00:22:11,000
那个版本修正之后

564
00:22:11,000 --> 00:22:12,000
你也向它的一个上游

565
00:22:12,000 --> 00:22:14,000
就是这个很枯的元作者

566
00:22:14,000 --> 00:22:17,000
那里能够把这个整合进去

567
00:22:17,000 --> 00:22:18,000
这样的话

568
00:22:18,000 --> 00:22:19,000
大家都可以

569
00:22:19,000 --> 00:22:21,000
享受到你修改 Buckfix

570
00:22:21,000 --> 00:22:23,000
带来的好处

571
00:22:23,000 --> 00:22:26,000
但是我是觉得

572
00:22:26,000 --> 00:22:27,000
这是一种人人位

573
00:22:27,000 --> 00:22:29,000
我会人人的精神状态

574
00:22:29,000 --> 00:22:30,000
对

575
00:22:30,000 --> 00:22:31,000
我就说他们的

576
00:22:31,000 --> 00:22:32,000
就起原因

577
00:22:32,000 --> 00:22:33,000
他们的理念就是这样子

578
00:22:33,000 --> 00:22:34,000
那么同样的道理

579
00:22:34,000 --> 00:22:36,000
如果每个程序

580
00:22:36,000 --> 00:22:39,000
都是打包自己的依赖的那东西

581
00:22:39,000 --> 00:22:41,000
那么他肯定会出现

582
00:22:41,000 --> 00:22:42,000
比如说同样你的

583
00:22:42,000 --> 00:22:44,000
两个程序依赖

584
00:22:44,000 --> 00:22:46,000
比如说同一个 OpenSSL 的包

585
00:22:46,000 --> 00:22:47,000
对吧

586
00:22:47,000 --> 00:22:48,000
然后他可能是依赖了

587
00:22:48,000 --> 00:22:49,000
不同的版本

588
00:22:49,000 --> 00:22:50,000
但是可能

589
00:22:50,000 --> 00:22:51,000
比如说他 OpenSSL

590
00:22:51,000 --> 00:22:52,000
发现一个安全漏洞

591
00:22:52,000 --> 00:22:54,000
或者系统升级的时候

592
00:22:54,000 --> 00:22:55,000
就把它升了

593
00:22:55,000 --> 00:22:56,000
但是如果你用的是自己

594
00:22:56,000 --> 00:22:57,000
打包到包包的话

595
00:22:57,000 --> 00:22:58,000
那你可能

596
00:22:58,000 --> 00:22:59,000
你必须再重新发布一下

597
00:22:59,000 --> 00:23:00,000
你这个软件

598
00:23:00,000 --> 00:23:01,000
你这个

599
00:23:01,000 --> 00:23:03,000
才会有安全补丁打上去

600
00:23:03,000 --> 00:23:04,000
但是如果你把这个事情

601
00:23:04,000 --> 00:23:05,000
交给系统来做

602
00:23:05,000 --> 00:23:06,000
就是说记住系统说

603
00:23:06,000 --> 00:23:08,000
我把整个你们需要用的

604
00:23:08,000 --> 00:23:10,000
OpenSSL 这个包的补丁都打了

605
00:23:10,000 --> 00:23:11,000
你们只要重启一下

606
00:23:11,000 --> 00:23:14,000
就关掉重新启动一下

607
00:23:14,000 --> 00:23:15,000
就可以享受到

608
00:23:15,000 --> 00:23:17,000
带来的安全的好处

609
00:23:17,000 --> 00:23:18,000
而不是说要等

610
00:23:18,000 --> 00:23:19,000
每一个开发者重新去做一遍

611
00:23:19,000 --> 00:23:20,000
就这里

612
00:23:20,000 --> 00:23:21,000
其实也是有一定的

613
00:23:21,000 --> 00:23:23,000
劳动力上面的节省

614
00:23:23,000 --> 00:23:24,000
对 所以说

615
00:23:24,000 --> 00:23:25,000
其实这是一个取舍

616
00:23:25,000 --> 00:23:26,000
有一个取舍在里面

617
00:23:26,000 --> 00:23:28,000
一个键和 TreadOff

618
00:23:28,000 --> 00:23:31,000
就是你要么选择

619
00:23:31,000 --> 00:23:35,000
同时发布更多的依赖

620
00:23:35,000 --> 00:23:37,000
来避免用户

621
00:23:37,000 --> 00:23:38,000
可能产生的

622
00:23:38,000 --> 00:23:40,000
包冲突的问题

623
00:23:40,000 --> 00:23:41,000
而另一方面

624
00:23:41,000 --> 00:23:43,000
你也可以选择

625
00:23:43,000 --> 00:23:44,000
尽量减少自己

626
00:23:44,000 --> 00:23:46,000
所发布的软件

627
00:23:46,000 --> 00:23:48,000
其内置的内部

628
00:23:48,000 --> 00:23:49,000
包括的依赖

629
00:23:49,000 --> 00:23:51,000
连来享受这种

630
00:23:51,000 --> 00:23:54,000
有一个平台

631
00:23:54,000 --> 00:23:56,000
加固号加固号平台

632
00:23:56,000 --> 00:23:59,000
在那边的便捷和

633
00:23:59,000 --> 00:24:01,000
和稳定性或者说安全性

634
00:24:01,000 --> 00:24:03,000
对 这也可以看到

635
00:24:03,000 --> 00:24:05,000
这样讲这两种不同的

636
00:24:05,000 --> 00:24:07,000
思路和做法

637
00:24:07,000 --> 00:24:08,000
就一般像那种

638
00:24:08,000 --> 00:24:09,000
像什么商用的

639
00:24:09,000 --> 00:24:11,000
就是消费者级别用的

640
00:24:11,000 --> 00:24:13,000
然后是为了简单方便

641
00:24:13,000 --> 00:24:15,000
然后互相补冲突的话

642
00:24:15,000 --> 00:24:16,000
会采用像刚才讲的

643
00:24:16,000 --> 00:24:17,000
把所有的东西

644
00:24:17,000 --> 00:24:19,000
打包到自己里面去

645
00:24:19,000 --> 00:24:20,000
然后你就依赖

646
00:24:20,000 --> 00:24:22,000
于一个比较稳定的

647
00:24:22,000 --> 00:24:24,000
系统提供你的包

648
00:24:24,000 --> 00:24:25,000
像 Mac 上面就是这样子

649
00:24:25,000 --> 00:24:26,000
Windows 上面应该很多也是这样子的

650
00:24:26,000 --> 00:24:28,000
因为它要减少下载的体系

651
00:24:28,000 --> 00:24:30,000
刚才说这是一个原因之一

652
00:24:30,000 --> 00:24:31,000
但是像 Linux

653
00:24:31,000 --> 00:24:33,000
发新版它很多就是说

654
00:24:33,000 --> 00:24:35,000
我们整个系统都是开源的

655
00:24:35,000 --> 00:24:36,000
对吧

656
00:24:36,000 --> 00:24:38,000
我们肯定是希望能够把这种

657
00:24:38,000 --> 00:24:42,000
能够把各种合力都集中起来

658
00:24:42,000 --> 00:24:44,000
就不要大家都自己搞一份

659
00:24:44,000 --> 00:24:46,000
对 但实际上

660
00:24:46,000 --> 00:24:48,000
现在 Linux 社区面临的一个问题

661
00:24:48,000 --> 00:24:50,000
是 Linux 已经越来越

662
00:24:50,000 --> 00:24:52,000
不是一种

663
00:24:52,000 --> 00:24:55,000
人人为我问人的模型了

664
00:24:55,000 --> 00:24:57,000
就是有很多的企业级的

665
00:24:57,000 --> 00:24:59,000
用户在用 Linux

666
00:24:59,000 --> 00:25:01,000
而从来他们基本上是

667
00:25:01,000 --> 00:25:03,000
不过去考虑

668
00:25:03,000 --> 00:25:05,000
或者是有这个利益

669
00:25:05,000 --> 00:25:07,000
趋势让他们能够把自己的

670
00:25:07,000 --> 00:25:09,000
某些修正反馈给上游的

671
00:25:09,000 --> 00:25:12,000
对于他们来说 Linux 最重要的就是

672
00:25:12,000 --> 00:25:14,000
不要有冲突

673
00:25:14,000 --> 00:25:17,000
然后部署起来简单快捷好用

674
00:25:17,000 --> 00:25:20,000
就能够稳定可靠的运行就好了

675
00:25:20,000 --> 00:25:22,000
我才不会跟你扯联什么

676
00:25:22,000 --> 00:25:24,000
会不会会到上游去是不是

677
00:25:24,000 --> 00:25:25,000
对 没错

678
00:25:25,000 --> 00:25:29,000
其实这个行为是会被谴责的了

679
00:25:29,000 --> 00:25:30,000
也不是吧

680
00:25:30,000 --> 00:25:34,000
因为毕竟你看很多 Linux 发行商

681
00:25:34,000 --> 00:25:35,000
Red Hat 之流

682
00:25:35,000 --> 00:25:37,000
他们其实很大一部分工作

683
00:25:37,000 --> 00:25:39,000
或者很大一部分利润的来源

684
00:25:39,000 --> 00:25:41,000
就来自于对于企业据用户

685
00:25:41,000 --> 00:25:42,000
提供支持

686
00:25:42,000 --> 00:25:44,000
所以其实有人来付钱

687
00:25:44,000 --> 00:25:48,000
让他们来做事让用户满意的

688
00:25:48,000 --> 00:25:51,000
对 还是根据你需求来

689
00:25:51,000 --> 00:25:52,000
就是说

690
00:25:52,000 --> 00:25:54,000
如果你需求是稳定可靠的话

691
00:25:54,000 --> 00:25:55,000
你可能要考虑一下采取

692
00:25:55,000 --> 00:25:56,000
刚才那种方式

693
00:25:56,000 --> 00:25:59,000
你宁可放弃别人

694
00:25:59,000 --> 00:26:04,000
帮你修复了 Bug 带来个好处

695
00:26:04,000 --> 00:26:05,000
你也要说

696
00:26:05,000 --> 00:26:07,000
我不管那个风险太大了

697
00:26:07,000 --> 00:26:08,000
你改一改

698
00:26:08,000 --> 00:26:10,000
我说过这个应用就 crash 了

699
00:26:10,000 --> 00:26:11,000
对

700
00:26:11,000 --> 00:26:14,000
还是追求那个是第一目标

701
00:26:14,000 --> 00:26:15,000
不过这也说到 Linux

702
00:26:15,000 --> 00:26:19,000
我们可以这里就顺便提一下

703
00:26:19,000 --> 00:26:21,000
就是在大部分的这种

704
00:26:21,000 --> 00:26:23,000
比较大的 Linux 发行版

705
00:26:23,000 --> 00:26:25,000
它都有自己的一个一套系统

706
00:26:25,000 --> 00:26:28,000
一套包管理系统

707
00:26:28,000 --> 00:26:31,000
然后这里可能比较著名的两个

708
00:26:31,000 --> 00:26:34,000
一个是以 Debian 为首的

709
00:26:34,000 --> 00:26:36,000
DB 那个体系

710
00:26:36,000 --> 00:26:38,000
然后一个是 Red Hat 为首的

711
00:26:38,000 --> 00:26:39,000
叫什么 RPM

712
00:26:39,000 --> 00:26:43,000
对 RPM 最开始是 Red Hat Package Management

713
00:26:43,000 --> 00:26:44,000
缩写了

714
00:26:44,000 --> 00:26:46,000
但后来现在好像

715
00:26:46,000 --> 00:26:48,000
三号缩写变了

716
00:26:48,000 --> 00:26:52,000
变成就叫 RPM Package Management System

717
00:26:52,000 --> 00:26:55,000
就是它变成了一个像 GNU 那样的

718
00:26:55,000 --> 00:26:58,000
叫什么 Recursive Acronym

719
00:26:58,000 --> 00:27:00,000
对

720
00:27:00,000 --> 00:27:02,000
就不算久了

721
00:27:02,000 --> 00:27:05,000
那么其实有一个问题

722
00:27:05,000 --> 00:27:08,000
我其实是没有怎么接触过

723
00:27:08,000 --> 00:27:10,000
这个 RPM 这套体系的

724
00:27:10,000 --> 00:27:12,000
我因为大部分都是在 Debian

725
00:27:12,000 --> 00:27:14,000
或者是 Ubuntu 系统上面用

726
00:27:14,000 --> 00:27:16,000
所以我觉得用 Debian 还挺顺手的

727
00:27:16,000 --> 00:27:19,000
我不知道你有没有接触过 RPM 这个

728
00:27:19,000 --> 00:27:21,000
我在进入目前的公司之前

729
00:27:21,000 --> 00:27:23,000
也是从来没有接触过 RPM

730
00:27:23,000 --> 00:27:25,000
或者说接触过但非常有限

731
00:27:25,000 --> 00:27:29,000
但是我们公司目前在用 CentOS

732
00:27:29,000 --> 00:27:33,000
所以在服务器的环境上面

733
00:27:33,000 --> 00:27:35,000
的确是在跑 RPM

734
00:27:35,000 --> 00:27:38,000
但我的所有的私人的

735
00:27:38,000 --> 00:27:41,000
包括 VPS 或者是讯息全都是 Debian

736
00:27:41,000 --> 00:27:45,000
所以我也可以说算是一个

737
00:27:45,000 --> 00:27:48,000
Debian 的阵营的人吧

738
00:27:48,000 --> 00:27:50,000
其实挺可笑的

739
00:27:50,000 --> 00:27:53,000
就是 Debian 和 RPM 都可以用 FlameWare

740
00:27:53,000 --> 00:27:56,000
这个还是很大的一个坑

741
00:27:56,000 --> 00:27:57,000
对

742
00:27:57,000 --> 00:28:00,000
直播上对之前有一个

743
00:28:00,000 --> 00:28:02,000
也是就是这个坑吧

744
00:28:02,000 --> 00:28:04,000
有写的就是两边都有

745
00:28:04,000 --> 00:28:07,000
这个有支持 Debian 这一派的

746
00:28:07,000 --> 00:28:09,000
然后有这个支持 RPM 这一派的

747
00:28:09,000 --> 00:28:10,000
他们在那边吵

748
00:28:10,000 --> 00:28:12,000
但是这个这个吵

749
00:28:12,000 --> 00:28:14,000
就也不是中国的首次了

750
00:28:14,000 --> 00:28:17,000
也是什么很多国外地方就已经吵过

751
00:28:17,000 --> 00:28:20,000
然后中国的 Ninux 去早就吵过无数遍了

752
00:28:20,000 --> 00:28:22,000
不过最近就是前一阵子吧

753
00:28:22,000 --> 00:28:24,000
株上又在吵这个事

754
00:28:24,000 --> 00:28:26,000
但是因为我自己个人并没有什么

755
00:28:26,000 --> 00:28:27,000
太多的经验呢

756
00:28:27,000 --> 00:28:29,000
所以我觉得没什么特别感觉

757
00:28:29,000 --> 00:28:30,000
如果今天没有什么经验

758
00:28:30,000 --> 00:28:32,000
我们可以直接跳过这个话

759
00:28:32,000 --> 00:28:35,000
对总结来说就是我的印象

760
00:28:35,000 --> 00:28:38,000
好像是做运为的一方

761
00:28:38,000 --> 00:28:40,000
好像会比较偏向于 RPM

762
00:28:40,000 --> 00:28:41,000
对

763
00:28:41,000 --> 00:28:44,000
然后做开发这一方会觉得 Debian 比较好

764
00:28:44,000 --> 00:28:48,000
因为 RPM 比较强调于

765
00:28:48,000 --> 00:28:50,000
怎么说呢就是强调一个包

766
00:28:50,000 --> 00:28:53,000
一定要来自 upstream

767
00:28:53,000 --> 00:28:54,000
然后一定要正统

768
00:28:54,000 --> 00:28:57,000
然后一定不能是 patch 过的

769
00:28:58,000 --> 00:29:03,000
然后就是节级的部署用 RPM

770
00:29:03,000 --> 00:29:04,000
相对来说无痛一点

771
00:29:04,000 --> 00:29:07,000
而 Debian 包的优点则是

772
00:29:07,000 --> 00:29:09,000
它相对来说一般比较新

773
00:29:09,000 --> 00:29:13,000
然后它可以在包里面加上 patch

774
00:29:13,000 --> 00:29:15,000
然后就其实我作为一个用户

775
00:29:15,000 --> 00:29:18,000
我我看了这么久我的理解就是说

776
00:29:18,000 --> 00:29:20,000
因为作为开发者

777
00:29:20,000 --> 00:29:21,000
你可能会经常需要一些

778
00:29:21,000 --> 00:29:23,000
比较稍微新一点的工具对吧

779
00:29:23,000 --> 00:29:24,000
对

780
00:29:24,000 --> 00:29:25,000
或者你需要用的一些

781
00:29:25,000 --> 00:29:27,000
比较方便安装的东西

782
00:29:27,000 --> 00:29:30,000
但是就是 Debian 可以让你比较方便安装

783
00:29:30,000 --> 00:29:31,000
也不是最新吧

784
00:29:31,000 --> 00:29:33,000
或者是叫新的版本

785
00:29:33,000 --> 00:29:34,000
然后能够比较方便的

786
00:29:34,000 --> 00:29:35,000
就做一些修改

787
00:29:35,000 --> 00:29:36,000
然后再发布出去

788
00:29:36,000 --> 00:29:37,000
对

789
00:29:37,000 --> 00:29:38,000
RPM 你刚才讲就是

790
00:29:38,000 --> 00:29:40,000
首先它包的数量

791
00:29:40,000 --> 00:29:43,000
应该是比 Debian 的包要少的多

792
00:29:43,000 --> 00:29:44,000
小心说话

793
00:29:44,000 --> 00:29:45,000
说不定就好

794
00:29:45,000 --> 00:29:46,000
小心说话

795
00:29:46,000 --> 00:29:47,000
OK

796
00:29:47,000 --> 00:29:48,000
我应该

797
00:29:48,000 --> 00:29:49,000
但这点我是看到

798
00:29:49,000 --> 00:29:52,000
就在草的两边对这个事情都没有异议的

799
00:29:52,000 --> 00:29:54,000
这个应该还是比较安全的一个说法

800
00:29:54,000 --> 00:29:55,000
OK

801
00:29:55,000 --> 00:29:56,000
然后就说

802
00:29:56,000 --> 00:29:57,000
但是它每一个就是

803
00:29:57,000 --> 00:30:00,000
它有的包的那个就是

804
00:30:00,000 --> 00:30:02,000
如果它有的包是有的话

805
00:30:02,000 --> 00:30:03,000
它是做的不错

806
00:30:03,000 --> 00:30:04,000
就是稳定可靠

807
00:30:04,000 --> 00:30:05,000
对

808
00:30:05,000 --> 00:30:07,000
而且反复经过很多次测试

809
00:30:07,000 --> 00:30:08,000
就我听过一个版本

810
00:30:08,000 --> 00:30:11,000
就说所谓 Debian 的 Stable

811
00:30:11,000 --> 00:30:14,000
就是 Debian 的 Stable 版本

812
00:30:14,000 --> 00:30:15,000
其中的测试

813
00:30:15,000 --> 00:30:17,000
其实也不是很多

814
00:30:17,000 --> 00:30:19,000
就算不得真的是 Stable

815
00:30:19,000 --> 00:30:22,000
因为还是比较不稳定的

816
00:30:22,000 --> 00:30:23,000
不

817
00:30:23,000 --> 00:30:25,000
那个 Debian 的就是也很简单

818
00:30:25,000 --> 00:30:26,000
它也不叫什么测试

819
00:30:26,000 --> 00:30:28,000
就是它先测一测

820
00:30:28,000 --> 00:30:30,000
然后放到那个什么

821
00:30:30,000 --> 00:30:32,000
Unstable 吧还是在哪里

822
00:30:32,000 --> 00:30:33,000
然后再到 Testing 里面

823
00:30:33,000 --> 00:30:35,000
再看看有什么 Bug 没有

824
00:30:35,000 --> 00:30:36,000
稳定的话

825
00:30:36,000 --> 00:30:38,000
就再就挪到那个 Stable 里面去了

826
00:30:38,000 --> 00:30:39,000
应该是这么一个流程

827
00:30:39,000 --> 00:30:40,000
因为它本来就是一个

828
00:30:40,000 --> 00:30:43,000
并不是像 Red Hat 的那种

829
00:30:43,000 --> 00:30:46,000
有这种企业能够去专门去做这种事情

830
00:30:46,000 --> 00:30:47,000
还是靠这个

831
00:30:47,000 --> 00:30:48,000
大家这个维护者

832
00:30:48,000 --> 00:30:50,000
虽然有很多很多好

833
00:30:50,000 --> 00:30:51,000
去做这么一个作用

834
00:30:51,000 --> 00:30:54,000
还是一个比较相对松散

835
00:30:54,000 --> 00:30:55,000
我觉得

836
00:30:55,000 --> 00:30:56,000
对

837
00:30:56,000 --> 00:30:58,000
说到这个 Debian 的发行版

838
00:30:58,000 --> 00:31:00,000
后面好像的确没有一个

839
00:31:00,000 --> 00:31:03,000
怎么说财团在支持

840
00:31:03,000 --> 00:31:04,000
对

841
00:31:04,000 --> 00:31:06,000
Debian 是一个就靠社区

842
00:31:06,000 --> 00:31:08,000
就不像 Red Hat

843
00:31:08,000 --> 00:31:10,000
还有公司的商业支持

844
00:31:10,000 --> 00:31:12,000
但这就问题就是说

845
00:31:12,000 --> 00:31:15,000
到底商业支持能到什么程度

846
00:31:15,000 --> 00:31:17,000
或者是他支持的

847
00:31:17,000 --> 00:31:18,000
是不是刚好你需要的

848
00:31:18,000 --> 00:31:19,000
这就是另外一回事

849
00:31:19,000 --> 00:31:21,000
反正就是只要你肯花钱

850
00:31:21,000 --> 00:31:22,000
问题总是可以解决的

851
00:31:22,000 --> 00:31:23,000
现在问题就是说

852
00:31:23,000 --> 00:31:24,000
没钱的情况怎么办

853
00:31:24,000 --> 00:31:25,000
对

854
00:31:27,000 --> 00:31:30,000
那就有这么两个问题

855
00:31:30,000 --> 00:31:32,000
还有一个叫

856
00:31:32,000 --> 00:31:33,000
YAM 是哪里面的

857
00:31:33,000 --> 00:31:34,000
YAM 是

858
00:31:34,000 --> 00:31:36,000
就是这么说

859
00:31:36,000 --> 00:31:39,000
APT 是 Debian 的高层

860
00:31:39,000 --> 00:31:41,000
Debian 包系统

861
00:31:41,000 --> 00:31:44,000
最底层的工具是 D Package

862
00:31:44,000 --> 00:31:46,000
然后 RPM

863
00:31:46,000 --> 00:31:49,000
RPM 包的管理器就是 RPM

864
00:31:49,000 --> 00:31:52,000
但是 APT 是基于 D Package 的一个

865
00:31:52,000 --> 00:31:53,000
比较高层管理工具

866
00:31:53,000 --> 00:31:55,000
它会去帮你做什么

867
00:31:55,000 --> 00:31:57,000
Dependency Management 之类的

868
00:31:57,000 --> 00:32:00,000
而 YAM 和 Zipper 则是分别来自于

869
00:32:00,000 --> 00:32:04,000
Red Hat 和 Suza 的两个

870
00:32:04,000 --> 00:32:07,000
基于 RPM 管理工具的高层工具

871
00:32:07,000 --> 00:32:08,000
对

872
00:32:08,000 --> 00:32:09,000
对

873
00:32:09,000 --> 00:32:11,000
这也是一个挺有趣的一个事情

874
00:32:11,000 --> 00:32:13,000
就是我们会把这个

875
00:32:13,000 --> 00:32:15,000
包管里分的层级分得很细

876
00:32:15,000 --> 00:32:17,000
就像你说有些底层的工具

877
00:32:17,000 --> 00:32:19,000
去做一些最基础的事情

878
00:32:19,000 --> 00:32:21,000
然后下面高层工具去做一些

879
00:32:21,000 --> 00:32:24,000
把整个流程变得没有那么繁琐

880
00:32:24,000 --> 00:32:28,000
然后介面对用户友好那么一丁点的事情

881
00:32:28,000 --> 00:32:29,000
对

882
00:32:29,000 --> 00:32:31,000
我觉得这个友好的其实

883
00:32:31,000 --> 00:32:32,000
不是一丁点

884
00:32:32,000 --> 00:32:35,000
比如说 APT 这一套工具

885
00:32:35,000 --> 00:32:36,000
APT 这一套工具

886
00:32:36,000 --> 00:32:39,000
可以帮你自动去分析这个包

887
00:32:39,000 --> 00:32:40,000
需要依赖有哪些东西

888
00:32:40,000 --> 00:32:43,000
然后自动帮你给出一个

889
00:32:44,000 --> 00:32:46,000
就是解决依赖的方案

890
00:32:46,000 --> 00:32:47,000
方案

891
00:32:47,000 --> 00:32:50,000
如果你自己要一个一个用 D-Package 的

892
00:32:50,000 --> 00:32:52,000
工具去搞的话

893
00:32:52,000 --> 00:32:53,000
或者 RPM 自己去弄的话

894
00:32:53,000 --> 00:32:55,000
其实非常非常繁琐

895
00:32:55,000 --> 00:32:57,000
我记得我刚上大学的时候

896
00:32:57,000 --> 00:33:01,000
Bynone Linux 的当时的疑点之一就是

897
00:33:01,000 --> 00:33:03,000
安装程序真的一定要用 RPM

898
00:33:03,000 --> 00:33:07,000
然后为什么就不能有一个什么东西

899
00:33:07,000 --> 00:33:08,000
给我

900
00:33:08,000 --> 00:33:10,000
然后我双击一下就安好了

901
00:33:11,000 --> 00:33:13,000
到现在还是不能

902
00:33:13,000 --> 00:33:14,000
你还是得敲几个命令

903
00:33:14,000 --> 00:33:16,000
然后让它安装这个和那个

904
00:33:16,000 --> 00:33:18,000
你得知道那个命令是什么

905
00:33:18,000 --> 00:33:20,000
然后你得知道那个命令的参数怎么样

906
00:33:20,000 --> 00:33:21,000
然后

907
00:33:21,000 --> 00:33:23,000
就如果一切正常

908
00:33:23,000 --> 00:33:24,000
在大问题上应该是一切正常

909
00:33:24,000 --> 00:33:26,000
它能够顺利的给你安装完没问题

910
00:33:26,000 --> 00:33:28,000
但如果它抱错了

911
00:33:28,000 --> 00:33:29,000
然后你怎么办

912
00:33:29,000 --> 00:33:30,000
对

913
00:33:30,000 --> 00:33:32,000
但这个时候就经验就要 Kicking 了

914
00:33:32,000 --> 00:33:34,000
经验就要拍照

915
00:33:34,000 --> 00:33:35,000
对

916
00:33:35,000 --> 00:33:37,000
我有这样一个印象就是

917
00:33:37,000 --> 00:33:39,000
在早期 Windows

918
00:33:39,000 --> 00:33:40,000
在 Windows 上面安装程序

919
00:33:40,000 --> 00:33:42,000
或者说在 Mac 上安装程序

920
00:33:42,000 --> 00:33:45,000
要远远方便于在 Linux 上面

921
00:33:45,000 --> 00:33:48,000
但是从某一个时间点开始

922
00:33:48,000 --> 00:33:51,000
我 3 号得到的这种印象

923
00:33:51,000 --> 00:33:54,000
就是在 Linux 上面得到我想要的工具

924
00:33:54,000 --> 00:33:56,000
反而要比 Windows 上面简单了

925
00:33:56,000 --> 00:33:59,000
因为 Linux 比如说 Dabin 吧

926
00:33:59,000 --> 00:34:01,000
我想要用什么东西

927
00:34:01,000 --> 00:34:03,000
然后比如说我在网上看

928
00:34:03,000 --> 00:34:05,000
别人说啊这个工具很好用

929
00:34:05,000 --> 00:34:08,000
然后我就直接 applicate

930
00:34:08,000 --> 00:34:09,000
然后 search

931
00:34:09,000 --> 00:34:10,000
我要找的东西

932
00:34:10,000 --> 00:34:12,000
在那然后 applicate install

933
00:34:12,000 --> 00:34:13,000
我有了

934
00:34:13,000 --> 00:34:14,000
可是在 Windows 上

935
00:34:14,000 --> 00:34:16,000
我就要去先去一个网站下来一个东西

936
00:34:16,000 --> 00:34:17,000
然后双击那个文件

937
00:34:17,000 --> 00:34:18,000
然后一路 next

938
00:34:18,000 --> 00:34:21,000
然后最后才要去双击

939
00:34:21,000 --> 00:34:23,000
什么一个快捷方式之类的

940
00:34:23,000 --> 00:34:25,000
才可以运行我需要的东西

941
00:34:25,000 --> 00:34:27,000
就是在某一个时间点

942
00:34:27,000 --> 00:34:28,000
Linux 社区

943
00:34:28,000 --> 00:34:30,000
或者是这个组文化

944
00:34:30,000 --> 00:34:33,000
创造出了这么一种自动化安装

945
00:34:33,000 --> 00:34:35,000
某一个傻瓜

946
00:34:35,000 --> 00:34:38,000
傻瓜是一条龙安装软件的功能

947
00:34:38,000 --> 00:34:39,000
对

948
00:34:39,000 --> 00:34:42,000
或者你可以从某种角度这么讲

949
00:34:42,000 --> 00:34:43,000
我们现在包括

950
00:34:43,000 --> 00:34:44,000
iOS 上面的 App Store 也好

951
00:34:44,000 --> 00:34:46,000
还是在 Maximum App Store 也好

952
00:34:46,000 --> 00:34:47,000
还包括 Windows

953
00:34:47,000 --> 00:34:49,000
现在也在他们有一个 Windows App Store 那边

954
00:34:49,000 --> 00:34:51,000
其实他们做的事情

955
00:34:51,000 --> 00:34:54,000
就是把 Linux 这种包管理器

956
00:34:54,000 --> 00:34:57,000
各个发行板的包管理器的功能

957
00:34:57,000 --> 00:34:59,000
通过一种图形化的方式

958
00:34:59,000 --> 00:35:01,000
比较友好的呈现给普通消费者

959
00:35:01,000 --> 00:35:03,000
而不是说只是像我们这种

960
00:35:03,000 --> 00:35:05,000
微乎什么后端的

961
00:35:05,000 --> 00:35:08,000
或者用 Linux 的这种小众的 Gig 用户

962
00:35:08,000 --> 00:35:09,000
对 没错

963
00:35:09,000 --> 00:35:10,000
所以从这个意义上讲

964
00:35:10,000 --> 00:35:13,000
Linux 对于人类的最大贡献之一

965
00:35:13,000 --> 00:35:19,000
就是发明了 App Store 的某种 Gig 方式

966
00:35:19,000 --> 00:35:22,000
某种 Hackle 形式

967
00:35:22,000 --> 00:35:25,000
所以我们刚刚讲的

968
00:35:25,000 --> 00:35:26,000
现在在谈的这些

969
00:35:26,000 --> 00:35:29,000
各种发行板的包管理器的话

970
00:35:29,000 --> 00:35:31,000
其实我们就等同一支在讲

971
00:35:31,000 --> 00:35:33,000
某个发行板的 App Store 一样

972
00:35:33,000 --> 00:35:34,000
对 然后对

973
00:35:34,000 --> 00:35:35,000
我觉得你刚才说那点很好

974
00:35:35,000 --> 00:35:38,000
就是之前最开始我接触 Linux 的时候

975
00:35:38,000 --> 00:35:42,000
确实是非常对普通用户不友好

976
00:35:42,000 --> 00:35:44,000
因为那个时候也不是特别熟悉

977
00:35:44,000 --> 00:35:45,000
然后去慢慢去摸索

978
00:35:45,000 --> 00:35:47,000
有些东西完全不懂

979
00:35:47,000 --> 00:35:48,000
就是那种概念上都不一样

980
00:35:48,000 --> 00:35:52,000
跟 Windows 那种逻辑

981
00:35:52,000 --> 00:35:55,000
你对这个世界的认知都是不一样的

982
00:35:55,000 --> 00:35:56,000
后来它慢慢改

983
00:35:56,000 --> 00:35:58,000
我印象中大概是在

984
00:35:58,000 --> 00:36:00,000
我拿一个 Ubuntu 这个有可能

985
00:36:00,000 --> 00:36:02,000
因为它有那个年份的时间比较清楚

986
00:36:02,000 --> 00:36:05,000
我觉得大概是在 Ubuntu 9 和 10

987
00:36:05,000 --> 00:36:08,000
大概之后就是 10 年左右开始

988
00:36:08,000 --> 00:36:11,000
在起码跟我个人使用的经验来讲

989
00:36:11,000 --> 00:36:14,000
在 Ubuntu 这种就是 Debian 系统上安装程序

990
00:36:14,000 --> 00:36:17,000
是一个相当还蛮愉悦的体验

991
00:36:17,000 --> 00:36:20,000
就是越来越少遇到包管理器

992
00:36:20,000 --> 00:36:22,000
不能帮你解决的这种版本冲突的时候

993
00:36:22,000 --> 00:36:24,000
就现在基本上很少遇到

994
00:36:24,000 --> 00:36:27,000
对 其实可以感受到它的整个

995
00:36:27,000 --> 00:36:30,000
工具有一套慢慢磨合好了

996
00:36:30,000 --> 00:36:32,000
这两个过程在里面

997
00:36:32,000 --> 00:36:36,000
对 不过 但是这里还是有一个小小的代价

998
00:36:36,000 --> 00:36:37,000
就是刚才讲你说

999
00:36:37,000 --> 00:36:39,000
现在你什么去一个

1000
00:36:39,000 --> 00:36:41,000
在 APT 里面搜一下

1001
00:36:41,000 --> 00:36:43,000
然后找个软件很方便

1002
00:36:43,000 --> 00:36:45,000
但问题是说这个是有前提的

1003
00:36:45,000 --> 00:36:46,000
前提就是首先

1004
00:36:46,000 --> 00:36:50,000
这个软件得是在 APT 那个仓库里面能找到的

1005
00:36:50,000 --> 00:36:52,000
就是有人把它提交上去了

1006
00:36:52,000 --> 00:36:53,000
要么是软件的作者也好

1007
00:36:53,000 --> 00:36:55,000
要么是一个第三方的发行版的

1008
00:36:55,000 --> 00:36:57,000
维护的人员把它加进去了

1009
00:36:57,000 --> 00:36:58,000
但如果你要找一个

1010
00:36:58,000 --> 00:37:01,000
不是在那里面的程序的话

1011
00:37:01,000 --> 00:37:03,000
这个过程还是蛮辛苦的

1012
00:37:03,000 --> 00:37:07,000
对 这个就比较算有一个

1013
00:37:07,000 --> 00:37:09,000
叫什么激染动量的过程

1014
00:37:09,000 --> 00:37:11,000
就是当你这个软件

1015
00:37:11,000 --> 00:37:14,000
包管理系统大到一个一定程度

1016
00:37:14,000 --> 00:37:15,000
那么你可以理解为

1017
00:37:15,000 --> 00:37:18,000
任何一个不会在这个

1018
00:37:18,000 --> 00:37:20,000
APT source

1019
00:37:20,000 --> 00:37:23,000
APT 的原仓库之中出现的软件

1020
00:37:23,000 --> 00:37:25,000
都不是什么太大

1021
00:37:25,000 --> 00:37:27,000
或者是值得你去新来的软件

1022
00:37:27,000 --> 00:37:29,000
因为

1023
00:37:29,000 --> 00:37:30,000
你说这个要小心

1024
00:37:30,000 --> 00:37:32,000
因为有些很小就能软件

1025
00:37:32,000 --> 00:37:33,000
它可能只是因为

1026
00:37:33,000 --> 00:37:35,000
作者也没怎么去维护它

1027
00:37:35,000 --> 00:37:37,000
可能比较简单或者什么样也好

1028
00:37:37,000 --> 00:37:39,000
对 或者比较便宜

1029
00:37:39,000 --> 00:37:40,000
这就是一个问题

1030
00:37:40,000 --> 00:37:42,000
就是如果这个软件简单到

1031
00:37:42,000 --> 00:37:44,000
不需要 APT 来安装的话

1032
00:37:44,000 --> 00:37:46,000
那你很可能安装它的过程

1033
00:37:46,000 --> 00:37:48,000
也不会比使用 APT 安装

1034
00:37:48,000 --> 00:37:51,000
其他软件复杂多少

1035
00:37:52,000 --> 00:37:55,000
对 这个是一个不错的 argument

1036
00:37:55,000 --> 00:37:57,000
但是有些事也软件挺复杂

1037
00:37:57,000 --> 00:37:59,000
这个我印象还蛮深的

1038
00:37:59,000 --> 00:38:00,000
就是我不知道

1039
00:38:00,000 --> 00:38:02,000
有段时间我在经常

1040
00:38:02,000 --> 00:38:04,000
折腾一些视频的东西

1041
00:38:04,000 --> 00:38:06,000
然后你知道在 Linux 那边

1042
00:38:06,000 --> 00:38:08,000
处理视频到目前为止

1043
00:38:08,000 --> 00:38:10,000
还不是一个比较好的体验

1044
00:38:10,000 --> 00:38:12,000
所以它在这一块还是比较弱的

1045
00:38:12,000 --> 00:38:14,000
比如说最简单一个例子

1046
00:38:14,000 --> 00:38:16,000
你要重新封装像 MP 4

1047
00:38:16,000 --> 00:38:18,000
这些视频的一些格式

1048
00:38:18,000 --> 00:38:20,000
它会用到一些软件包

1049
00:38:20,000 --> 00:38:21,000
然后这些软件包

1050
00:38:21,000 --> 00:38:23,000
因为一个是因为版权的原因

1051
00:38:23,000 --> 00:38:25,000
它不能够直接提供这些

1052
00:38:25,000 --> 00:38:26,000
二进制的发行版

1053
00:38:26,000 --> 00:38:28,000
另外一个就是它的有些

1054
00:38:28,000 --> 00:38:30,000
可能用到的这种代码

1055
00:38:30,000 --> 00:38:33,000
它可能跟某一个 Linux 发行版的

1056
00:38:33,000 --> 00:38:35,000
授权协议有点不接荣

1057
00:38:35,000 --> 00:38:37,000
它处理这种比较尴尬的状态

1058
00:38:37,000 --> 00:38:39,000
就是爹娘都不爱

1059
00:38:39,000 --> 00:38:42,000
发行版的维护者没法把它装

1060
00:38:42,000 --> 00:38:43,000
没法把它加进去

1061
00:38:43,000 --> 00:38:45,000
因为有这个软件协议的问题

1062
00:38:45,000 --> 00:38:47,000
然后它自己就没有办法提供

1063
00:38:47,000 --> 00:38:48,000
二进制的版本

1064
00:38:48,000 --> 00:38:49,000
你得自己去下载圆满来包

1065
00:38:49,000 --> 00:38:51,000
因为有那个法律的问题

1066
00:38:51,000 --> 00:38:52,000
就遇到这种情况

1067
00:38:52,000 --> 00:38:53,000
你就很沮丧

1068
00:38:53,000 --> 00:38:54,000
你作为一个用户的话

1069
00:38:54,000 --> 00:38:55,000
你真想办法说

1070
00:38:55,000 --> 00:38:57,000
好吧 那我做梦想怎么去

1071
00:38:57,000 --> 00:38:59,000
把这个

1072
00:38:59,000 --> 00:39:01,000
它的 source 抓回来

1073
00:39:01,000 --> 00:39:02,000
然后根据它的手册

1074
00:39:02,000 --> 00:39:04,000
一个去安装

1075
00:39:04,000 --> 00:39:06,000
这里就提到这么一个概念

1076
00:39:06,000 --> 00:39:10,000
就是说从安装别人给你包好的软件包

1077
00:39:10,000 --> 00:39:14,000
和是从直接那个软件的原始出处

1078
00:39:14,000 --> 00:39:16,000
去下载它的原文件回来

1079
00:39:16,000 --> 00:39:18,000
从自己自行编译安装

1080
00:39:18,000 --> 00:39:20,000
这是两种比较大的区别吧

1081
00:39:20,000 --> 00:39:23,000
对 这可能也是当初从

1082
00:39:23,000 --> 00:39:27,000
Windows 切换到 Linux 上面的一个很大的迷思

1083
00:39:27,000 --> 00:39:29,000
就是当时我的理解是

1084
00:39:29,000 --> 00:39:31,000
在 Linux 上面

1085
00:39:31,000 --> 00:39:33,000
你要安装一个程序的唯一方法

1086
00:39:33,000 --> 00:39:36,000
就是先找到这个程序的原代码

1087
00:39:36,000 --> 00:39:38,000
然后自己在 Linux 上面编译它

1088
00:39:38,000 --> 00:39:40,000
但是我一方面觉得

1089
00:39:40,000 --> 00:39:42,000
这个方向法实在是太酷了

1090
00:39:42,000 --> 00:39:43,000
然后另一方面又觉得

1091
00:39:43,000 --> 00:39:45,000
这不是有一点

1092
00:39:45,000 --> 00:39:46,000
你不觉得太 PREZING

1093
00:39:46,000 --> 00:39:48,000
为什么你不能给我

1094
00:39:48,000 --> 00:39:50,000
已经编译好的二念之上

1095
00:39:50,000 --> 00:39:52,000
是让我来运行的

1096
00:39:52,000 --> 00:39:54,000
这里其实有设计到另外一个问题

1097
00:39:54,000 --> 00:39:57,000
就是有些人会觉得我要有原代码

1098
00:39:57,000 --> 00:39:59,000
因为你知道很多软件在编译的时候

1099
00:39:59,000 --> 00:40:01,000
就会有各种各样的选项

1100
00:40:01,000 --> 00:40:02,000
有人会觉得说

1101
00:40:02,000 --> 00:40:03,000
我装这个软件

1102
00:40:03,000 --> 00:40:06,000
我只需要编译我需要的那一部分功能

1103
00:40:06,000 --> 00:40:08,000
然后我不需要那部分功能

1104
00:40:08,000 --> 00:40:09,000
我就不便宜

1105
00:40:09,000 --> 00:40:11,000
这样我的代码会出来

1106
00:40:11,000 --> 00:40:12,000
结果会小

1107
00:40:12,000 --> 00:40:14,000
然后可能运行的会快一点

1108
00:40:14,000 --> 00:40:16,000
或者说更从一个务实的角度来说

1109
00:40:16,000 --> 00:40:17,000
如果我这个软件包里面

1110
00:40:17,000 --> 00:40:20,000
没有那些我不需要的拥鱼的代码

1111
00:40:20,000 --> 00:40:22,000
那么是不是我可以在某种程度上

1112
00:40:22,000 --> 00:40:23,000
减小我的安全的

1113
00:40:23,000 --> 00:40:25,000
这个叫做暴露的

1114
00:40:25,000 --> 00:40:27,000
被攻击的面对吧

1115
00:40:27,000 --> 00:40:28,000
对

1116
00:40:28,000 --> 00:40:29,000
这也是一种想法

1117
00:40:29,000 --> 00:40:30,000
然后另外一种想法就是说

1118
00:40:30,000 --> 00:40:32,000
如果每一个软件你都要

1119
00:40:32,000 --> 00:40:35,000
根据你自己的方法去定义一遍

1120
00:40:35,000 --> 00:40:36,000
这个安装的

1121
00:40:36,000 --> 00:40:37,000
就编译的选项

1122
00:40:37,000 --> 00:40:38,000
那么会导致

1123
00:40:38,000 --> 00:40:39,000
同一个软件

1124
00:40:39,000 --> 00:40:41,000
所有安装的选项

1125
00:40:41,000 --> 00:40:42,000
这安装的最终结果

1126
00:40:42,000 --> 00:40:44,000
都是有一点点不一样的

1127
00:40:44,000 --> 00:40:46,000
这种的话会导致支持起来

1128
00:40:46,000 --> 00:40:49,000
就是软件做得要提供一定的支持

1129
00:40:49,000 --> 00:40:51,000
或者是你要出错起来

1130
00:40:51,000 --> 00:40:52,000
就非常困难

1131
00:40:52,000 --> 00:40:54,000
因为别人很可能没办法在他那个

1132
00:40:54,000 --> 00:40:57,000
编译的结果上重现你的问题

1133
00:40:57,000 --> 00:40:58,000
对

1134
00:40:58,000 --> 00:40:59,000
cannot reproduce won't fix

1135
00:40:59,000 --> 00:41:01,000
这是所有的软件维护者

1136
00:41:01,000 --> 00:41:03,000
最喜欢选的一个选项

1137
00:41:03,000 --> 00:41:04,000
对

1138
00:41:04,000 --> 00:41:06,000
所以这里其实也看

1139
00:41:06,000 --> 00:41:08,000
就是在自由灵活和这个谱

1140
00:41:08,000 --> 00:41:09,000
就是你要什么

1141
00:41:09,000 --> 00:41:11,000
你要定制化

1142
00:41:11,000 --> 00:41:14,000
和你要用这种大众产品的之间

1143
00:41:14,000 --> 00:41:15,000
也是有一个取舍的

1144
00:41:15,000 --> 00:41:17,000
就是这个取舍就是说

1145
00:41:17,000 --> 00:41:18,000
定制化当然好

1146
00:41:18,000 --> 00:41:19,000
就刚才讲了

1147
00:41:19,000 --> 00:41:21,000
比如说有可能可能更安全

1148
00:41:21,000 --> 00:41:23,000
可能性能更好

1149
00:41:23,000 --> 00:41:25,000
可能更灵活对吧

1150
00:41:25,000 --> 00:41:27,000
但是你要牺牲的就是这个可为护性

1151
00:41:27,000 --> 00:41:28,000
另外一个讲道

1152
00:41:28,000 --> 00:41:29,000
就是说大众产品说

1153
00:41:29,000 --> 00:41:31,000
那我大大都一个版本有问题的话

1154
00:41:31,000 --> 00:41:33,000
我们都在这个一个版本里面修

1155
00:41:33,000 --> 00:41:35,000
就一个一个编译方式出来修修好

1156
00:41:35,000 --> 00:41:37,000
大家都能够受益对吧

1157
00:41:37,000 --> 00:41:39,000
所以这是一个也是两种不同的思路吧

1158
00:41:39,000 --> 00:41:40,000
对

1159
00:41:40,000 --> 00:41:45,000
但是其实并不是所有的包管理器都是

1160
00:41:45,000 --> 00:41:47,000
从这个二进制的

1161
00:41:47,000 --> 00:41:50,000
就其实大部分都不是二进制的方式吧

1162
00:41:50,000 --> 00:41:51,000
现在很难说了

1163
00:41:51,000 --> 00:41:52,000
一半一半

1164
00:41:52,000 --> 00:41:53,000
一半一半吧

1165
00:41:53,000 --> 00:41:55,000
但至少在 BSD 上面

1166
00:41:55,000 --> 00:41:58,000
BSD 的 Ports 基本上

1167
00:41:58,000 --> 00:42:01,000
全都是以获得原码的方式

1168
00:42:01,000 --> 00:42:05,000
线编译的方式来安装人件的

1169
00:42:06,000 --> 00:42:07,000
对 这些点我觉得

1170
00:42:07,000 --> 00:42:09,000
其实当时我接触的时候

1171
00:42:09,000 --> 00:42:10,000
我觉得还是蛮特别的

1172
00:42:10,000 --> 00:42:13,000
就是因为首先一个 BSD 的那个

1173
00:42:13,000 --> 00:42:16,000
就这里以 3 BSD 这个这个粒子来说

1174
00:42:16,000 --> 00:42:17,000
因为我以前用过

1175
00:42:17,000 --> 00:42:19,000
就是它那个叫做 Ports System

1176
00:42:19,000 --> 00:42:21,000
就比较它做的比较好

1177
00:42:21,000 --> 00:42:23,000
因为首先这个 3 BSD 这个系统

1178
00:42:23,000 --> 00:42:24,000
整个维护的比较好

1179
00:42:24,000 --> 00:42:25,000
因为它是一个

1180
00:42:25,000 --> 00:42:27,000
它不像 Linux 这种是一个

1181
00:42:27,000 --> 00:42:30,000
以内核和这个 User Space

1182
00:42:30,000 --> 00:42:33,000
User Length 是分开的

1183
00:42:33,000 --> 00:42:35,000
对 它是两波人码在维护

1184
00:42:35,000 --> 00:42:36,000
然后这个发行板

1185
00:42:36,000 --> 00:42:38,000
所以说要把这两个包在一起

1186
00:42:38,000 --> 00:42:40,000
然后给你一个定制的产品

1187
00:42:40,000 --> 00:42:41,000
但就会导致很多

1188
00:42:41,000 --> 00:42:43,000
各种各样极其奇怪怪的发行板

1189
00:42:43,000 --> 00:42:44,000
也会导致各种各样的

1190
00:42:44,000 --> 00:42:45,000
什么包括你的问题

1191
00:42:45,000 --> 00:42:47,000
但 3 BSD 这个起码

1192
00:42:47,000 --> 00:42:49,000
它是有一套人码在维护的

1193
00:42:49,000 --> 00:42:51,000
然后它可以确保说

1194
00:42:51,000 --> 00:42:53,000
它给你的这套 Port

1195
00:42:53,000 --> 00:42:54,000
这个 Port File

1196
00:42:54,000 --> 00:42:55,000
你是一定可以在

1197
00:42:55,000 --> 00:42:57,000
年代级续上编译成功

1198
00:42:57,000 --> 00:42:58,000
然后装上的

1199
00:42:58,000 --> 00:43:01,000
对 其实 Linux 的生态

1200
00:43:01,000 --> 00:43:04,000
有一点像有一个人

1201
00:43:04,000 --> 00:43:05,000
或者有个人码

1202
00:43:05,000 --> 00:43:06,000
做出了这么一个 Curna 来

1203
00:43:06,000 --> 00:43:08,000
然后围绕这个 Curna

1204
00:43:08,000 --> 00:43:09,000
有一群人在上面

1205
00:43:09,000 --> 00:43:11,000
插各种各样的插件

1206
00:43:11,000 --> 00:43:13,000
然后会造成

1207
00:43:13,000 --> 00:43:14,000
其实我倒觉得

1208
00:43:14,000 --> 00:43:17,000
Linux 在这方面

1209
00:43:17,000 --> 00:43:21,000
它的所谓 Curna Space 和 User Space 的分野

1210
00:43:21,000 --> 00:43:23,000
是比较模糊的

1211
00:43:23,000 --> 00:43:25,000
Linux 真正意义上的 Curna

1212
00:43:25,000 --> 00:43:27,000
其实只有那么一点点

1213
00:43:27,000 --> 00:43:28,000
而后面

1214
00:43:28,000 --> 00:43:29,000
外面很大一个外围

1215
00:43:29,000 --> 00:43:30,000
都是 User Length

1216
00:43:30,000 --> 00:43:31,000
可以这么理解

1217
00:43:31,000 --> 00:43:33,000
而在 BSD 这边

1218
00:43:33,000 --> 00:43:35,000
你可以说每一个 BSD 发行板

1219
00:43:35,000 --> 00:43:38,000
都有一个明确的 Curna Space

1220
00:43:38,000 --> 00:43:40,000
和一个明确的 User Length

1221
00:43:42,000 --> 00:43:43,000
而且他们都是同一帮人

1222
00:43:43,000 --> 00:43:44,000
对 而且是同一帮人

1223
00:43:44,000 --> 00:43:45,000
对 而且是同一帮人

1224
00:43:45,000 --> 00:43:49,000
而且版本号好像是比较一致的

1225
00:43:49,000 --> 00:43:51,000
不像你在 Linux 下面

1226
00:43:51,000 --> 00:43:53,000
可能有一个软件的版本

1227
00:43:53,000 --> 00:43:54,000
特别新

1228
00:43:54,000 --> 00:43:55,000
而另外其他部分

1229
00:43:55,000 --> 00:43:57,000
基本上是

1230
00:43:57,000 --> 00:43:59,000
可能要倒退那么两三年的水平

1231
00:43:59,000 --> 00:44:01,000
而在 BSD 上面

1232
00:44:01,000 --> 00:44:03,000
你会基本上

1233
00:44:03,000 --> 00:44:05,000
在每个发行板里面拿到

1234
00:44:05,000 --> 00:44:08,000
比较年份相近的一批工具

1235
00:44:08,000 --> 00:44:12,000
对 但是我也很久没有用 BSD 了

1236
00:44:12,000 --> 00:44:15,000
其实现在我们看从

1237
00:44:15,000 --> 00:44:17,000
实际使用的情况来看

1238
00:44:17,000 --> 00:44:19,000
也是 BSD 的市场分合

1239
00:44:19,000 --> 00:44:21,000
应该是比较小的一景

1240
00:44:21,000 --> 00:44:22,000
而且另外我有一个

1241
00:44:22,000 --> 00:44:23,000
比较明显的例子

1242
00:44:23,000 --> 00:44:25,000
上一节我们不是提到一个

1243
00:44:25,000 --> 00:44:28,000
叫做 Varnish 的反向带离缓存

1244
00:44:28,000 --> 00:44:29,000
软件了

1245
00:44:29,000 --> 00:44:31,000
它那个本来最开始的时候

1246
00:44:31,000 --> 00:44:32,000
是在 FreeBSD 上写的

1247
00:44:32,000 --> 00:44:34,000
那个开发者也是 FreeBSD 的

1248
00:44:34,000 --> 00:44:36,000
内核开发者之一

1249
00:44:36,000 --> 00:44:39,000
后来发现他们在做商业化的时候

1250
00:44:39,000 --> 00:44:41,000
其实大部分人都是在 Linux

1251
00:44:41,000 --> 00:44:42,000
Linux 上面跑他们的系统的

1252
00:44:42,000 --> 00:44:44,000
然后他们现在连做新的

1253
00:44:44,000 --> 00:44:46,000
那些扩展的功能都是先考虑

1254
00:44:46,000 --> 00:44:48,000
或者是只考虑 Linux 的版本

1255
00:44:48,000 --> 00:44:51,000
然后 FreeBSD 那边都已经不这么过了

1256
00:44:51,000 --> 00:44:52,000
对 这也是一个

1257
00:44:52,000 --> 00:44:55,000
多少有点可惜的现状

1258
00:44:55,000 --> 00:44:56,000
对

1259
00:44:56,000 --> 00:44:58,000
因为其实如果 FreeBSD 流行

1260
00:44:58,000 --> 00:45:00,000
像 Linux 上面流行的话

1261
00:45:00,000 --> 00:45:01,000
那我们如果这些 Mac

1262
00:45:01,000 --> 00:45:02,000
又会比较爽

1263
00:45:02,000 --> 00:45:04,000
这都是 BSD 内核

1264
00:45:04,000 --> 00:45:05,000
它切换起来

1265
00:45:05,000 --> 00:45:07,000
就是包括一些那种系统雕用

1266
00:45:07,000 --> 00:45:09,000
还有软件的包

1267
00:45:09,000 --> 00:45:10,000
还有这种

1268
00:45:10,000 --> 00:45:11,000
包括很多这种规范

1269
00:45:11,000 --> 00:45:13,000
行为方式都是比较接近的

1270
00:45:13,000 --> 00:45:14,000
就可以爽一点

1271
00:45:14,000 --> 00:45:17,000
但其实现在就比较糟糕了

1272
00:45:17,000 --> 00:45:18,000
比如说我们现在跑服器上面

1273
00:45:18,000 --> 00:45:19,000
大部分都是 Linux

1274
00:45:19,000 --> 00:45:22,000
但是 Mac 上面又是另外

1275
00:45:22,000 --> 00:45:24,000
就是 BSD 内核

1276
00:45:24,000 --> 00:45:27,000
这样的话就经常会不 match

1277
00:45:27,000 --> 00:45:30,000
你要搞一下还是挺折腾的

1278
00:45:30,000 --> 00:45:31,000
对

1279
00:45:31,000 --> 00:45:34,000
我觉得不管怎么说 Mac 作为一套

1280
00:45:34,000 --> 00:45:36,000
或者是 Darvin 这个东西

1281
00:45:36,000 --> 00:45:39,000
作为一套 BSD 系统

1282
00:45:39,000 --> 00:45:44,000
还是可以从开源界受益的

1283
00:45:44,000 --> 00:45:46,000
这点已经是很不错的

1284
00:45:46,000 --> 00:45:49,000
就无论至少我没有

1285
00:45:49,000 --> 00:45:50,000
至少我没有

1286
00:45:50,000 --> 00:45:52,000
第三方工具可以用

1287
00:45:52,000 --> 00:45:54,000
至少我没有 Linux 上面

1288
00:45:54,000 --> 00:45:55,000
很多很多工具可以通过

1289
00:45:55,000 --> 00:45:57,000
Homebrew 或者是 Mac ports

1290
00:45:57,000 --> 00:45:58,000
来直接拿来用

1291
00:45:58,000 --> 00:46:01,000
这已经是很好的一点

1292
00:46:01,000 --> 00:46:02,000
反观 Linux

1293
00:46:02,000 --> 00:46:05,000
反观 Windows 用户可能就没有那么幸运

1294
00:46:05,000 --> 00:46:06,000
这里就说到了

1295
00:46:06,000 --> 00:46:12,000
在 OS 10 上面除了官方苹果 App Store 之外

1296
00:46:12,000 --> 00:46:14,000
我们还有很古老的

1297
00:46:14,000 --> 00:46:16,000
最早的叫做 Finc

1298
00:46:16,000 --> 00:46:17,000
什么一个包管理器

1299
00:46:17,000 --> 00:46:18,000
F-I-N-K

1300
00:46:18,000 --> 00:46:19,000
Finc

1301
00:46:19,000 --> 00:46:21,000
这个其实我自己是没有用过

1302
00:46:21,000 --> 00:46:23,000
我只是听说过

1303
00:46:23,000 --> 00:46:25,000
咱们两个人在用 Mac ports 的时候

1304
00:46:25,000 --> 00:46:27,000
听说过说已经

1305
00:46:27,000 --> 00:46:28,000
Deprecated

1306
00:46:28,000 --> 00:46:30,000
对 是一个更好的想法

1307
00:46:30,000 --> 00:46:31,000
Forgot about the thing

1308
00:46:31,000 --> 00:46:32,000
用 Mac ports

1309
00:46:32,000 --> 00:46:35,000
所以我接触到在 Mac 上面

1310
00:46:35,000 --> 00:46:38,000
用的这种 Linux 包管理器

1311
00:46:38,000 --> 00:46:40,000
其实就是从 Mac ports 开始的

1312
00:46:40,000 --> 00:46:42,000
Mac ports 就是

1313
00:46:42,000 --> 00:46:44,000
因为你看明这个看得出来

1314
00:46:44,000 --> 00:46:45,000
它是那种 port 系统

1315
00:46:45,000 --> 00:46:48,000
就是跟 BSD 的 port 是有一点点相似之处的

1316
00:46:48,000 --> 00:46:49,000
我觉得

1317
00:46:49,000 --> 00:46:51,000
很大程度上是同一套系统

1318
00:46:51,000 --> 00:46:52,000
只不过 BSD port

1319
00:46:52,000 --> 00:46:53,000
如果我

1320
00:46:53,000 --> 00:46:54,000
当然我的 BSD

1321
00:46:54,000 --> 00:46:57,000
可能我已经有三五年没碰过 BSD

1322
00:46:57,000 --> 00:46:58,000
但我 BSD

1323
00:46:58,000 --> 00:47:00,000
知识没有欺骗我的话

1324
00:47:00,000 --> 00:47:02,000
BSD 上面的 port

1325
00:47:02,000 --> 00:47:03,000
其实就是一个 Mac file

1326
00:47:03,000 --> 00:47:07,000
就是你要进到那个 port 的

1327
00:47:07,000 --> 00:47:08,000
怎么录下面

1328
00:47:08,000 --> 00:47:10,000
然后手动运行 Mac

1329
00:47:10,000 --> 00:47:12,000
Mac install 之类的

1330
00:47:12,000 --> 00:47:14,000
然后 Mac ports

1331
00:47:14,000 --> 00:47:15,000
跟这套系统

1332
00:47:15,000 --> 00:47:16,000
唯一差别就是 Mac ports

1333
00:47:16,000 --> 00:47:18,000
会自动帮你运行 Mac

1334
00:47:18,000 --> 00:47:19,000
这个过程

1335
00:47:19,000 --> 00:47:20,000
仅此而已

1336
00:47:20,000 --> 00:47:21,000
对

1337
00:47:21,000 --> 00:47:22,000
你整个

1338
00:47:22,000 --> 00:47:25,000
你下过来的还是软件的原始代码

1339
00:47:25,000 --> 00:47:27,000
然后你要去通过手工编译

1340
00:47:27,000 --> 00:47:28,000
但这编译之前

1341
00:47:28,000 --> 00:47:29,000
你还要先装一些

1342
00:47:29,000 --> 00:47:30,000
什么编译器

1343
00:47:30,000 --> 00:47:32,000
那些是另外的技术需求

1344
00:47:32,000 --> 00:47:33,000
这些都是

1345
00:47:33,000 --> 00:47:37,000
然后 Mac ports 唯一的

1346
00:47:37,000 --> 00:47:38,000
特点就是

1347
00:47:38,000 --> 00:47:39,000
它是用 TCL

1348
00:47:39,000 --> 00:47:41,000
把整套编译和安装的过程

1349
00:47:41,000 --> 00:47:42,000
帮你自动画的

1350
00:47:42,000 --> 00:47:43,000
然后当时

1351
00:47:43,000 --> 00:47:44,000
还有一个优点

1352
00:47:44,000 --> 00:47:46,000
就是当时有一些

1353
00:47:46,000 --> 00:47:48,000
那个苹果的员工

1354
00:47:48,000 --> 00:47:51,000
在直接的贡献这个系统

1355
00:47:51,000 --> 00:47:52,000
所以他们有很大的优势

1356
00:47:52,000 --> 00:47:54,000
就他们知道自己干什么

1357
00:47:54,000 --> 00:47:56,000
而且他们可以做的比较

1358
00:47:56,000 --> 00:47:58,000
Apple-like

1359
00:47:58,000 --> 00:47:59,000
对

1360
00:47:59,000 --> 00:48:00,000
对

1361
00:48:00,000 --> 00:48:02,000
其实就在相当长远的时间里面

1362
00:48:02,000 --> 00:48:03,000
那个

1363
00:48:03,000 --> 00:48:04,000
OS 10 的用户

1364
00:48:04,000 --> 00:48:06,000
就是做软件开发者的话

1365
00:48:06,000 --> 00:48:07,000
后多后少的

1366
00:48:07,000 --> 00:48:08,000
也会接触到这个 Mac ports 这个系统

1367
00:48:08,000 --> 00:48:09,000
要么你自己写一点

1368
00:48:09,000 --> 00:48:10,000
要么就装别人的东西

1369
00:48:10,000 --> 00:48:13,000
不过在我有限的记忆里面

1370
00:48:13,000 --> 00:48:15,000
Mac ports 的使用体验

1371
00:48:15,000 --> 00:48:16,000
并不是特别好

1372
00:48:16,000 --> 00:48:19,000
因为经常会有这种各种各样的问题

1373
00:48:19,000 --> 00:48:20,000
导致安装不成功

1374
00:48:20,000 --> 00:48:21,000
边缺失败

1375
00:48:21,000 --> 00:48:22,000
然后这个时候

1376
00:48:22,000 --> 00:48:23,000
会就会进入一个

1377
00:48:23,000 --> 00:48:24,000
比较混乱的状态

1378
00:48:24,000 --> 00:48:25,000
你要去找那个

1379
00:48:25,000 --> 00:48:26,000
你要去看那个

1380
00:48:26,000 --> 00:48:27,000
它的那个 port file

1381
00:48:27,000 --> 00:48:28,000
然后去看

1382
00:48:28,000 --> 00:48:29,000
安装到哪一步了

1383
00:48:29,000 --> 00:48:30,000
哪一步失败了

1384
00:48:30,000 --> 00:48:32,000
要清理哪些垃圾文件怎么怎么递

1385
00:48:32,000 --> 00:48:33,000
对

1386
00:48:33,000 --> 00:48:34,000
看在用户界面

1387
00:48:34,000 --> 00:48:36,000
不是那么的友好

1388
00:48:36,000 --> 00:48:39,000
所以后来就有一个叫做

1389
00:48:39,000 --> 00:48:41,000
这个 Homebrew

1390
00:48:41,000 --> 00:48:42,000
通常简称它叫 Brew

1391
00:48:42,000 --> 00:48:44,000
横空出世

1392
00:48:44,000 --> 00:48:45,000
对

1393
00:48:45,000 --> 00:48:48,000
然后一刀解决了这个问题

1394
00:48:48,000 --> 00:48:49,000
然后现在基本上 Mac ports

1395
00:48:49,000 --> 00:48:51,000
也是被淘汰掉了

1396
00:48:51,000 --> 00:48:53,000
还是有一句

1397
00:48:53,000 --> 00:48:54,000
怎么说呢

1398
00:48:54,000 --> 00:48:55,000
Mac ports 还说

1399
00:48:55,000 --> 00:48:57,000
一批死忠的拥吞在那边用

1400
00:48:57,000 --> 00:48:59,000
然后他们会觉得

1401
00:48:59,000 --> 00:49:01,000
Homebrew 就有点像

1402
00:49:01,000 --> 00:49:02,000
就像所有沾染了

1403
00:49:02,000 --> 00:49:03,000
Ruby 的东西一样

1404
00:49:03,000 --> 00:49:06,000
都是一群喝了 Cookies

1405
00:49:06,000 --> 00:49:08,000
喝了 Cookies 的这个

1406
00:49:08,000 --> 00:49:10,000
这个小屁孩们在那边闹说

1407
00:49:10,000 --> 00:49:11,000
这个比较好

1408
00:49:12,000 --> 00:49:14,000
所以这里提到

1409
00:49:14,000 --> 00:49:16,000
就是刚刚讲 Mac ports 的

1410
00:49:16,000 --> 00:49:19,000
Portfile 是用 TCL 脚本来写的

1411
00:49:19,000 --> 00:49:21,000
然后 Homebrew

1412
00:49:21,000 --> 00:49:22,000
TCL 脚本

1413
00:49:22,000 --> 00:49:23,000
是吗

1414
00:49:23,000 --> 00:49:26,000
应该是没做的

1415
00:49:26,000 --> 00:49:28,000
Mac portfile 是 TCL 写的

1416
00:49:28,000 --> 00:49:32,000
然后 Homebrew 的这个安装的

1417
00:49:32,000 --> 00:49:34,000
他们叫一个 Formula 对吧

1418
00:49:34,000 --> 00:49:38,000
是一个 Ruby 的 class 文件其实是

1419
00:49:39,000 --> 00:49:41,000
因为其实我个人对 Ruby

1420
00:49:41,000 --> 00:49:42,000
没什么特别的感觉

1421
00:49:42,000 --> 00:49:44,000
我不知道你觉得怎么样

1422
00:49:44,000 --> 00:49:47,000
具体的 Homebrew 的 Formula 上面

1423
00:49:47,000 --> 00:49:48,000
它其实你可以把它理解

1424
00:49:48,000 --> 00:49:51,000
当成一门 DSL 来学习

1425
00:49:51,000 --> 00:49:53,000
所以你可以完全

1426
00:49:53,000 --> 00:49:56,000
你可以完全不懂 Ruby 里面

1427
00:49:56,000 --> 00:49:58,000
那个什么两个数线

1428
00:49:58,000 --> 00:50:00,000
中间加一个变量名

1429
00:50:00,000 --> 00:50:01,000
到底是什么意思

1430
00:50:01,000 --> 00:50:04,000
你也可以去操作 Homebrew 的 Formula

1431
00:50:04,000 --> 00:50:06,000
以及一壶的画票

1432
00:50:06,000 --> 00:50:08,000
所以它其实是把它做的

1433
00:50:08,000 --> 00:50:12,000
相当傻瓜化的这么一个 Formula

1434
00:50:12,000 --> 00:50:14,000
我刚刚写

1435
00:50:14,000 --> 00:50:16,000
我记得你还在推特上问过我说

1436
00:50:16,000 --> 00:50:19,000
你难道没有写过自己的 Formula 吗

1437
00:50:19,000 --> 00:50:21,000
我当时很老实

1438
00:50:21,000 --> 00:50:23,000
而且很骄傲的说没有

1439
00:50:25,000 --> 00:50:27,000
我都还写过一两

1440
00:50:27,000 --> 00:50:29,000
对 但后来我也写了

1441
00:50:29,000 --> 00:50:31,000
但我觉得即便像我这样

1442
00:50:31,000 --> 00:50:33,000
Ruby 其实没有什么太深了解的人

1443
00:50:33,000 --> 00:50:35,000
也是可以

1444
00:50:36,000 --> 00:50:40,000
价倾就熟的去操作一个 Formula 法

1445
00:50:40,000 --> 00:50:43,000
所以不是没有什么太大问题

1446
00:50:43,000 --> 00:50:46,000
对 不过说回来 Homebrew 本身

1447
00:50:46,000 --> 00:50:48,000
我觉得它

1448
00:50:48,000 --> 00:50:51,000
现在它 Homebrew 已经是 OS 上的

1449
00:50:51,000 --> 00:50:54,000
那么既成事实的

1450
00:50:54,000 --> 00:50:57,000
答应您号的官方

1451
00:50:57,000 --> 00:50:59,000
报告管理器了

1452
00:50:59,000 --> 00:51:02,000
因为你如果你现在去关注一下

1453
00:51:02,000 --> 00:51:04,000
Guitar 上面的那些各种软件

1454
00:51:04,000 --> 00:51:06,000
你会发现它只要涉及到

1455
00:51:06,000 --> 00:51:09,000
跟 OS 有关的大部分会学用 Homebrew 的方式

1456
00:51:09,000 --> 00:51:12,000
对 而且尤其是新工具会倾向

1457
00:51:12,000 --> 00:51:14,000
提供一个 Homebrew Formula

1458
00:51:14,000 --> 00:51:16,000
比如我们上次提到的 NailVib

1459
00:51:16,000 --> 00:51:20,000
就提供了一个 Homebrew 的 Tap

1460
00:51:20,000 --> 00:51:23,000
对 所以这里就有一个延伸的问题

1461
00:51:23,000 --> 00:51:25,000
就是你觉得为什么 Homebrew

1462
00:51:25,000 --> 00:51:27,000
会在如此短的时间内

1463
00:51:27,000 --> 00:51:30,000
完全就替代掉了 MacPorts

1464
00:51:30,000 --> 00:51:36,000
对 这个和当年 MacPorts 取代 Fink

1465
00:51:36,000 --> 00:51:37,000
还是就蛮大区别

1466
00:51:37,000 --> 00:51:39,000
当时我记得印象中

1467
00:51:39,000 --> 00:51:41,000
MacPorts 和 Fink 还是共存过

1468
00:51:41,000 --> 00:51:42,000
相当长一段时间的

1469
00:51:42,000 --> 00:51:43,000
我觉得第一是

1470
00:51:43,000 --> 00:51:49,000
它把提供一个新软件的门槛降低了

1471
00:51:49,000 --> 00:51:53,000
因为 Ruby 的强项就是写一个 DSL 码

1472
00:51:53,000 --> 00:51:54,000
然后他用这种 DSL 码

1473
00:51:54,000 --> 00:51:58,000
然后使得你发布一个新的软件

1474
00:51:58,000 --> 00:52:02,000
到 Homebrew Reposterate 的过程

1475
00:52:02,000 --> 00:52:04,000
变得荒唐的简单

1476
00:52:04,000 --> 00:52:08,000
而 MacPorts 他因为用 TCL

1477
00:52:08,000 --> 00:52:11,000
TCL 毕竟是一个从来没有大动过的

1478
00:52:11,000 --> 00:52:12,000
比较小种的码

1479
00:52:12,000 --> 00:52:15,000
然后你写它还是需要花一点脑筋

1480
00:52:15,000 --> 00:52:16,000
然后你去明白

1481
00:52:16,000 --> 00:52:18,000
它是一个什么样的运作原理

1482
00:52:18,000 --> 00:52:21,000
然后我觉得还有一个可能

1483
00:52:21,000 --> 00:52:24,000
会成为一个决定性因素的是

1484
00:52:24,000 --> 00:52:26,000
Homebrew 给你一种虚假的安全感

1485
00:52:26,000 --> 00:52:29,000
就是你每次不入安装什么东西

1486
00:52:29,000 --> 00:52:31,000
你不需要速度

1487
00:52:31,000 --> 00:52:35,000
前提是你安装的时候用的速度

1488
00:52:35,000 --> 00:52:36,000
对吧

1489
00:52:36,000 --> 00:52:40,000
你要把 User Local 设定为你自己账户可读写

1490
00:52:40,000 --> 00:52:41,000
对呀

1491
00:52:41,000 --> 00:52:42,000
但是一般来说

1492
00:52:42,000 --> 00:52:43,000
就还推荐的一种方式

1493
00:52:43,000 --> 00:52:44,000
对一般来说

1494
00:52:44,000 --> 00:52:46,000
每一个就是如果你默认装

1495
00:52:46,000 --> 00:52:47,000
一台新电脑默认

1496
00:52:47,000 --> 00:52:49,000
直接用它的安装脚本去安装

1497
00:52:49,000 --> 00:52:50,000
Homebrew 的话

1498
00:52:50,000 --> 00:52:51,000
它就自动会帮你这样做

1499
00:52:51,000 --> 00:52:52,000
现在已经是这样了吗

1500
00:52:52,000 --> 00:52:53,000
应该是这样的吧

1501
00:52:53,000 --> 00:52:59,000
我反正安装这台新的 MacBook 的时候

1502
00:52:59,000 --> 00:53:02,000
好像是完全没有自己去改

1503
00:53:02,000 --> 00:53:04,000
它会推荐你这么干

1504
00:53:04,000 --> 00:53:05,000
我记得确实是这样的

1505
00:53:05,000 --> 00:53:07,000
但我不太确定是不是它会默认

1506
00:53:07,000 --> 00:53:09,000
它可能会在安装过程之中

1507
00:53:09,000 --> 00:53:11,000
询问你要不要这样干

1508
00:53:11,000 --> 00:53:13,000
然后应该我也是就是

1509
00:53:13,000 --> 00:53:15,000
曹帅打了一个 Y

1510
00:53:15,000 --> 00:53:16,000
对

1511
00:53:16,000 --> 00:53:18,000
其实有一点我一直在想

1512
00:53:18,000 --> 00:53:21,000
GitHub 对 Homebrew 的帮助有多大

1513
00:53:21,000 --> 00:53:23,000
其实我觉得这个应该是挺关键的

1514
00:53:23,000 --> 00:53:25,000
应该说是相等的

1515
00:53:25,000 --> 00:53:26,000
因为

1516
00:53:26,000 --> 00:53:27,000
对

1517
00:53:27,000 --> 00:53:29,000
你刚才说它是一个

1518
00:53:29,000 --> 00:53:31,000
defecto 继承适持的

1519
00:53:31,000 --> 00:53:32,000
软件包含装工具

1520
00:53:32,000 --> 00:53:35,000
我就想说它其实仅仅是对程序

1521
00:53:35,000 --> 00:53:37,000
这样而已而已

1522
00:53:37,000 --> 00:53:40,000
但正是因为此

1523
00:53:40,000 --> 00:53:43,000
几乎每一个稍微有点自尊程序

1524
00:53:43,000 --> 00:53:44,000
肯定都会去搞搞 GitHub

1525
00:53:44,000 --> 00:53:47,000
然后 Homebrew 就在 GitHub

1526
00:53:48,000 --> 00:53:49,000
对

1527
00:53:49,000 --> 00:53:51,000
这点我觉得就是跟像 MacPost 很不一样

1528
00:53:51,000 --> 00:53:52,000
MacPost 那些

1529
00:53:52,000 --> 00:53:54,000
我都不知道那些 Portfile 文件从哪里来的

1530
00:53:54,000 --> 00:53:56,000
然后怎么去提交

1531
00:53:56,000 --> 00:53:57,000
然后整个看了一下

1532
00:53:57,000 --> 00:53:59,000
网站也做得很丑对吧

1533
00:53:59,000 --> 00:54:00,000
但是 Homebrew 不一样

1534
00:54:00,000 --> 00:54:02,000
它所有的所谓的

1535
00:54:02,000 --> 00:54:03,000
他们叫 Formula

1536
00:54:03,000 --> 00:54:05,000
就是我们类似于 MacFile

1537
00:54:05,000 --> 00:54:06,000
或者是 Portfile 的一个东西

1538
00:54:06,000 --> 00:54:08,000
它都是整个

1539
00:54:08,000 --> 00:54:10,000
包是放在 GitHub 上面的

1540
00:54:10,000 --> 00:54:13,000
然后 GitHub 是比较

1541
00:54:13,000 --> 00:54:14,000
友好的一个工具

1542
00:54:14,000 --> 00:54:16,000
对程序来说至少

1543
00:54:16,000 --> 00:54:18,000
然后都会大家觉得

1544
00:54:18,000 --> 00:54:19,000
那我给你添加

1545
00:54:19,000 --> 00:54:21,000
我们就 focus 一下你这个

1546
00:54:21,000 --> 00:54:22,000
然后把这个加进去

1547
00:54:22,000 --> 00:54:25,000
然后再给你发一个 Pull request

1548
00:54:25,000 --> 00:54:27,000
这个东西就算搞定了对吧

1549
00:54:27,000 --> 00:54:29,000
整个流程是非常方便的

1550
00:54:29,000 --> 00:54:30,000
所以这里其实

1551
00:54:30,000 --> 00:54:33,000
就说我们要说 UI 做得好

1552
00:54:33,000 --> 00:54:35,000
但一个 UI 是广一上的

1553
00:54:35,000 --> 00:54:36,000
不只是说用户最重要的消费者

1554
00:54:36,000 --> 00:54:37,000
我们看到一个按钮

1555
00:54:37,000 --> 00:54:39,000
这个就应该叫 UX

1556
00:54:39,000 --> 00:54:43,000
User 用户体验非常好

1557
00:54:43,000 --> 00:54:45,000
这个用户就是我们那种

1558
00:54:45,000 --> 00:54:47,000
Gig 杂春剧

1559
00:54:47,000 --> 00:54:49,000
对我们的友好的话

1560
00:54:49,000 --> 00:54:50,000
我们也更加乐意

1561
00:54:50,000 --> 00:54:52,000
去给它什么天专家瓦

1562
00:54:52,000 --> 00:54:53,000
你刚才说的这点很好

1563
00:54:53,000 --> 00:54:57,000
就是当你打开 Homebrew 的

1564
00:54:57,000 --> 00:54:59,000
页面的时候

1565
00:54:59,000 --> 00:55:00,000
它会用

1566
00:55:00,000 --> 00:55:01,000
一上来就告诉你

1567
00:55:01,000 --> 00:55:02,000
一上来给你讲一个

1568
00:55:02,000 --> 00:55:03,000
展示给你这个工具

1569
00:55:03,000 --> 00:55:04,000
能干嘛

1570
00:55:04,000 --> 00:55:06,000
给你讲一个故事

1571
00:55:06,000 --> 00:55:08,000
然后用大字

1572
00:55:08,000 --> 00:55:11,000
用一读的简单的文字

1573
00:55:11,000 --> 00:55:13,000
告诉你这个工具是干嘛

1574
00:55:13,000 --> 00:55:16,000
这工具怎样安装

1575
00:55:16,000 --> 00:55:17,000
怎样使用

1576
00:55:17,000 --> 00:55:19,000
感性的话去干这个

1577
00:55:19,000 --> 00:55:20,000
反观 MacPulse

1578
00:55:20,000 --> 00:55:21,000
你打开它网页

1579
00:55:21,000 --> 00:55:23,000
它网页是一个很典型的

1580
00:55:23,000 --> 00:55:26,000
这种门户网站的感觉

1581
00:55:26,000 --> 00:55:28,000
就是一上来命名帽帽

1582
00:55:28,000 --> 00:55:29,000
一大堆信息

1583
00:55:29,000 --> 00:55:30,000
什么

1584
00:55:30,000 --> 00:55:31,000
我刚才说什么

1585
00:55:31,000 --> 00:55:32,000
documentation

1586
00:55:32,000 --> 00:55:33,000
update

1587
00:55:33,000 --> 00:55:35,000
recent news

1588
00:55:35,000 --> 00:55:36,000
blah blah blah

1589
00:55:36,000 --> 00:55:37,000
你想要干嘛

1590
00:55:37,000 --> 00:55:39,000
你想知道这个工具倒是干嘛的

1591
00:55:39,000 --> 00:55:41,000
你不知道

1592
00:55:41,000 --> 00:55:42,000
对

1593
00:55:42,000 --> 00:55:43,000
所以其实

1594
00:55:43,000 --> 00:55:45,000
所以刚才你提到好

1595
00:55:45,000 --> 00:55:46,000
我们都讲

1596
00:55:46,000 --> 00:55:48,000
cool-aid drinking kit

1597
00:55:48,000 --> 00:55:51,000
其实我觉得是所有的

1598
00:55:51,000 --> 00:55:53,000
开发者包括产品经理

1599
00:55:53,000 --> 00:55:55,000
都要学习的一个东西

1600
00:55:55,000 --> 00:55:56,000
就怎么把这个叫做

1601
00:55:56,000 --> 00:55:57,000
我们

1602
00:55:57,000 --> 00:55:59,000
这个其实有一个专门叫做什么

1603
00:55:59,000 --> 00:56:00,000
user landing

1604
00:56:00,000 --> 00:56:02,000
还是叫什么

1605
00:56:02,000 --> 00:56:04,000
第一批用户

1606
00:56:04,000 --> 00:56:05,000
当用户第一眼

1607
00:56:05,000 --> 00:56:06,000
目睹你的产品的时候

1608
00:56:06,000 --> 00:56:08,000
你给它一个什么样的印象

1609
00:56:08,000 --> 00:56:09,000
在用户已经知道

1610
00:56:09,000 --> 00:56:10,000
有你这么一个东西

1611
00:56:10,000 --> 00:56:11,000
但是还不知道怎么用的时候

1612
00:56:11,000 --> 00:56:14,000
你怎么让它能够快速的去上手

1613
00:56:14,000 --> 00:56:16,000
那么过程变得比较爽

1614
00:56:16,000 --> 00:56:17,000
我觉得这个是

1615
00:56:17,000 --> 00:56:19,000
可能是 ruby 社区

1616
00:56:19,000 --> 00:56:21,000
ruby 或者 real 的这个社区

1617
00:56:21,000 --> 00:56:23,000
给整个其他人

1618
00:56:23,000 --> 00:56:26,000
练生这个社区的一个最大的

1619
00:56:26,000 --> 00:56:27,000
叫什么

1620
00:56:27,000 --> 00:56:28,000
财富

1621
00:56:28,000 --> 00:56:30,000
他们展示了这一点

1622
00:56:30,000 --> 00:56:31,000
就让一个

1623
00:56:31,000 --> 00:56:32,000
哪怕他只是对这个有兴趣

1624
00:56:32,000 --> 00:56:34,000
但是可能并不知道

1625
00:56:34,000 --> 00:56:35,000
一些具体的细节的人

1626
00:56:35,000 --> 00:56:37,000
也能够很快的上手

1627
00:56:37,000 --> 00:56:38,000
然后之后再去想办法

1628
00:56:38,000 --> 00:56:40,000
去摸清那些细节

1629
00:56:40,000 --> 00:56:43,000
我不是说你先上来甩给他一个

1630
00:56:43,000 --> 00:56:46,000
这个什么很高冷的形象

1631
00:56:46,000 --> 00:56:47,000
然后你看不懂

1632
00:56:47,000 --> 00:56:49,000
就自己去吃屎吧

1633
00:56:49,000 --> 00:56:51,000
这样就不太好

1634
00:56:51,000 --> 00:56:52,000
以这种姿态

1635
00:56:52,000 --> 00:56:54,000
能最终取得成功的人

1636
00:56:54,000 --> 00:56:56,000
在矿谷至今

1637
00:56:56,000 --> 00:56:59,000
只有 Linux 12 是一个人

1638
00:57:01,000 --> 00:57:02,000
所以是不是我们节目的姿态

1639
00:57:02,000 --> 00:57:03,000
要放低

1640
00:57:06,000 --> 00:57:07,000
好

1641
00:57:07,000 --> 00:57:09,000
下次放低点

1642
00:57:09,000 --> 00:57:12,000
接着说 Homebrew 这个事

1643
00:57:12,000 --> 00:57:13,000
所以就现在我们看到

1644
00:57:13,000 --> 00:57:15,000
基本上那些新的包

1645
00:57:15,000 --> 00:57:16,000
最新的版本

1646
00:57:16,000 --> 00:57:18,000
因为用户很多

1647
00:57:18,000 --> 00:57:20,000
然后大家都会为他去贡献

1648
00:57:20,000 --> 00:57:21,000
去出错

1649
00:57:21,000 --> 00:57:24,000
使得他变成一个很良性的一个循环

1650
00:57:24,000 --> 00:57:26,000
你作为一个新软件的作者

1651
00:57:26,000 --> 00:57:27,000
或者你要用的一个软件

1652
00:57:27,000 --> 00:57:28,000
里面没有

1653
00:57:28,000 --> 00:57:29,000
你会想想

1654
00:57:29,000 --> 00:57:30,000
我去 Homebrew 里面找一下

1655
00:57:30,000 --> 00:57:31,000
如果没有

1656
00:57:31,000 --> 00:57:33,000
我就去提交 formula

1657
00:57:33,000 --> 00:57:34,000
然后把提交的 formula

1658
00:57:34,000 --> 00:57:37,000
也加回到 upstream 上面去

1659
00:57:37,000 --> 00:57:39,000
这样别人可以因此而收益

1660
00:57:39,000 --> 00:57:40,000
所以其实到今天的话

1661
00:57:40,000 --> 00:57:42,000
现在 MacOS 3 上面

1662
00:57:42,000 --> 00:57:43,000
Homebrew 的包管的

1663
00:57:43,000 --> 00:57:45,000
基本上已经可以在某种程度上

1664
00:57:45,000 --> 00:57:47,000
达到了在 Linux 3

1665
00:57:47,000 --> 00:57:48,000
做的比较好的那些

1666
00:57:48,000 --> 00:57:49,000
包管的器的那种规模

1667
00:57:49,000 --> 00:57:50,000
或者是效果

1668
00:57:50,000 --> 00:57:51,000
对

1669
00:57:51,000 --> 00:57:53,000
而且 Homebrew 甚至还被 port 到 Linux 上面

1670
00:57:53,000 --> 00:57:54,000
我觉得当时就

1671
00:57:54,000 --> 00:57:56,000
听刚听到这个新闻的时候

1672
00:57:56,000 --> 00:57:57,000
我觉得还挺吃惊的

1673
00:57:57,000 --> 00:57:59,000
就是 Linux 3

1674
00:57:59,000 --> 00:58:01,000
我们在 Mac 上用 Homebrew

1675
00:58:01,000 --> 00:58:03,000
是因为 Mac 上没有 aptigate

1676
00:58:03,000 --> 00:58:06,000
或者是没有 yam

1677
00:58:06,000 --> 00:58:09,000
而为什么今天这个时代

1678
00:58:09,000 --> 00:58:11,000
还居然要把 Homebrew

1679
00:58:11,000 --> 00:58:12,000
因为没有

1680
00:58:12,000 --> 00:58:14,000
所以不得不造出来的工具

1681
00:58:14,000 --> 00:58:16,000
backport 到你们那边

1682
00:58:16,000 --> 00:58:18,000
已经比较成熟的

1683
00:58:18,000 --> 00:58:20,000
解决方案的地方

1684
00:58:20,000 --> 00:58:22,000
这也让我挺吃惊的

1685
00:58:22,000 --> 00:58:23,000
但仔细想想

1686
00:58:23,000 --> 00:58:25,000
就是 Homebrew 理念其实

1687
00:58:25,000 --> 00:58:26,000
是相当先进的

1688
00:58:26,000 --> 00:58:27,000
可以这么说

1689
00:58:27,000 --> 00:58:28,000
对

1690
00:58:28,000 --> 00:58:29,000
而且它的整个

1691
00:58:29,000 --> 00:58:30,000
就刚才就讲了

1692
00:58:30,000 --> 00:58:31,000
我们整个用户体验

1693
00:58:31,000 --> 00:58:32,000
是非常友好的

1694
00:58:32,000 --> 00:58:34,000
就是让大家能够很快上手

1695
00:58:34,000 --> 00:58:35,000
这其实我觉得也是

1696
00:58:35,000 --> 00:58:36,000
很好的类比

1697
00:58:36,000 --> 00:58:37,000
比如说 FORMOR

1698
00:58:37,000 --> 00:58:38,000
刚才讲的

1699
00:58:38,000 --> 00:58:39,000
有些 DSL 的一个 Ruby 的文件

1700
00:58:39,000 --> 00:58:40,000
对

1701
00:58:40,000 --> 00:58:41,000
你可以写起来

1702
00:58:41,000 --> 00:58:42,000
你看一下

1703
00:58:42,000 --> 00:58:43,000
就大概做它的干嘛

1704
00:58:43,000 --> 00:58:45,000
但我到现在为止也没搞懂

1705
00:58:45,000 --> 00:58:46,000
怎么去自己

1706
00:58:46,000 --> 00:58:49,000
搞一个什么 Dabend package

1707
00:58:49,000 --> 00:58:50,000
出来

1708
00:58:50,000 --> 00:58:51,000
能够很方便的发布出去

1709
00:58:51,000 --> 00:58:53,000
就是这个过程还是蛮繁琐的

1710
00:58:53,000 --> 00:58:54,000
对

1711
00:58:54,000 --> 00:58:57,000
而且 Homebrew 更优雅

1712
00:58:57,000 --> 00:58:58,000
加以好一点

1713
00:58:58,000 --> 00:59:03,000
就是它是跟 Git 结合得非常紧密

1714
00:59:03,000 --> 00:59:06,000
它本身 HOST 在 GitHub 上面

1715
00:59:06,000 --> 00:59:07,000
就不用说了

1716
00:59:07,000 --> 00:59:11,000
而这个 Homebrew 本身的升级

1717
00:59:11,000 --> 00:59:15,000
也只不过是一个 GitPool 的某种

1718
00:59:15,000 --> 00:59:17,000
被包装过的 GitPool 而已

1719
00:59:17,000 --> 00:59:19,000
就是它这个工具本身就是

1720
00:59:19,000 --> 00:59:23,000
以一套版本管理系统的方式

1721
00:59:23,000 --> 00:59:27,000
以一个经过版本管理的软件

1722
00:59:27,000 --> 00:59:31,000
Reposit 这形式出现在电脑上

1723
00:59:31,000 --> 00:59:32,000
它需要升级的时候

1724
00:59:32,000 --> 00:59:35,000
就只需要从它的 upstream 上

1725
00:59:35,000 --> 00:59:36,000
更新一下可以了

1726
00:59:36,000 --> 00:59:40,000
这也是挺优雅的一个部分

1727
00:59:40,000 --> 00:59:41,000
对

1728
00:59:43,000 --> 00:59:45,000
所以刚才讲的那么都是

1729
00:59:45,000 --> 00:59:47,000
根据某一个操作系统

1730
00:59:47,000 --> 00:59:49,000
上面而选择的不同的

1731
00:59:49,000 --> 00:59:50,000
这个包管理器

1732
00:59:50,000 --> 00:59:51,000
比如说刚才讲的

1733
00:59:51,000 --> 00:59:53,000
对面上面有没有一个 APT

1734
00:59:53,000 --> 00:59:55,000
然后 RPM 系统的话是 YAM

1735
00:59:55,000 --> 00:59:57,000
然后有 BSD 的 Ports

1736
00:59:57,000 --> 01:00:00,000
然后 Max 上面现在最新的是这个 Homebrew

1737
01:00:01,000 --> 01:00:03,000
下面我们接下来逃

1738
01:00:03,000 --> 01:00:05,000
你刻意跳过的 Windows

1739
01:00:06,000 --> 01:00:07,000
Windows 有吗

1740
01:00:07,000 --> 01:00:08,000
有

1741
01:00:08,000 --> 01:00:09,000
看来你是

1742
01:00:09,000 --> 01:00:10,000
有什么

1743
01:00:10,000 --> 01:00:11,000
看来你真是应验了

1744
01:00:11,000 --> 01:00:12,000
我们听众的一句话

1745
01:00:12,000 --> 01:00:13,000
就是对 Windows 了解

1746
01:00:13,000 --> 01:00:16,000
连大学毕业生都不如

1747
01:00:16,000 --> 01:00:19,000
那肯定已经彻底放弃好多年了

1748
01:00:19,000 --> 01:00:20,000
对

1749
01:00:20,000 --> 01:00:21,000
其实很残贵的

1750
01:00:21,000 --> 01:00:23,000
我也是现学现卖

1751
01:00:23,000 --> 01:00:25,000
也是因为前阵子去关注

1752
01:00:25,000 --> 01:00:29,000
Dotnet 的开源才注意到了

1753
01:00:29,000 --> 01:00:31,000
就是 Windows 下面有一条

1754
01:00:31,000 --> 01:00:33,000
不确定这应该怎么念

1755
01:00:33,000 --> 01:00:34,000
Nugget

1756
01:00:34,000 --> 01:00:35,000
Nugget

1757
01:00:35,000 --> 01:00:37,000
Nugget

1758
01:00:37,000 --> 01:00:38,000
Nugget

1759
01:00:38,000 --> 01:00:39,000
OK

1760
01:00:39,000 --> 01:00:40,000
G 块

1761
01:00:42,000 --> 01:00:43,000
和 G 块协议

1762
01:00:43,000 --> 01:00:45,000
总之它就是 Nugget

1763
01:00:45,000 --> 01:00:47,000
这就是一个

1764
01:00:48,000 --> 01:00:51,000
包括 Dotnet 平台在内的

1765
01:00:51,000 --> 01:00:54,000
专门为微软开发而研发了一套

1766
01:00:55,000 --> 01:00:56,000
Pagage Manager

1767
01:00:56,000 --> 01:00:57,000
等一下

1768
01:00:57,000 --> 01:00:58,000
等一下

1769
01:00:58,000 --> 01:00:59,000
它是跑在命令行下面的吗

1770
01:00:59,000 --> 01:01:00,000
它有一个命令行界面

1771
01:01:00,000 --> 01:01:02,000
然后也有一个图形界面

1772
01:01:02,000 --> 01:01:03,000
As always

1773
01:01:03,000 --> 01:01:05,000
Windows 程序怎么可能没有图形界面

1774
01:01:05,000 --> 01:01:07,000
你让 Windows 成员走

1775
01:01:07,000 --> 01:01:08,000
对 我就在想

1776
01:01:08,000 --> 01:01:10,000
怎么会有这种需求

1777
01:01:10,000 --> 01:01:12,000
他们不是都直接在那个什么

1778
01:01:12,000 --> 01:01:14,000
跑一个什么

1779
01:01:14,000 --> 01:01:15,000
gooey 的东西

1780
01:01:15,000 --> 01:01:17,000
然后做个很

1781
01:01:17,000 --> 01:01:19,000
500 个按钮的软件

1782
01:01:19,000 --> 01:01:20,000
好

1783
01:01:20,000 --> 01:01:21,000
此处省去

1784
01:01:21,000 --> 01:01:23,000
对 Windows 成员的什么炒热粉

1785
01:01:23,000 --> 01:01:24,000
5000 字

1786
01:01:25,000 --> 01:01:26,000
总之这个

1787
01:01:26,000 --> 01:01:27,000
谁在用呢

1788
01:01:27,000 --> 01:01:28,000
我从来

1789
01:01:28,000 --> 01:01:29,000
所有微软程序

1790
01:01:29,000 --> 01:01:31,000
所有现在 AutoDate 的微软程序

1791
01:01:31,000 --> 01:01:32,000
都在用

1792
01:01:32,000 --> 01:01:33,000
OK

1793
01:01:33,000 --> 01:01:35,000
所以他们是一个

1794
01:01:35,000 --> 01:01:36,000
parallel universe

1795
01:01:36,000 --> 01:01:37,000
我们不知道

1796
01:01:37,000 --> 01:01:38,000
对

1797
01:01:38,000 --> 01:01:39,000
在这个平行语证里面

1798
01:01:39,000 --> 01:01:41,000
比如说什么 JQuery

1799
01:01:41,000 --> 01:01:42,000
或者是

1800
01:01:42,000 --> 01:01:43,000
它真的可以

1801
01:01:43,000 --> 01:01:44,000
对

1802
01:01:44,000 --> 01:01:45,000
JQuery 之类的东西

1803
01:01:45,000 --> 01:01:46,000
都可以通过

1804
01:01:46,000 --> 01:01:49,000
在 Nugget 的图形界面之下

1805
01:01:49,000 --> 01:01:50,000
搜 JQuery

1806
01:01:50,000 --> 01:01:51,000
然后点下去 install

1807
01:01:51,000 --> 01:01:52,000
它就帮你装好了

1808
01:01:52,000 --> 01:01:53,000
虽然

1809
01:01:53,000 --> 01:01:54,000
天哪

1810
01:01:54,000 --> 01:01:55,000
对

1811
01:01:55,000 --> 01:01:56,000
它可能有

1812
01:01:56,000 --> 01:01:59,000
两三万个 package 了已经

1813
01:01:59,000 --> 01:02:01,000
还不挺大规模的

1814
01:02:01,000 --> 01:02:02,000
这个是有什么

1815
01:02:02,000 --> 01:02:03,000
微软官方的

1816
01:02:03,000 --> 01:02:04,000
微户的

1817
01:02:04,000 --> 01:02:05,000
对 这是微软官方做的吗

1818
01:02:05,000 --> 01:02:06,000
官方加持

1819
01:02:06,000 --> 01:02:07,000
Honority

1820
01:02:07,000 --> 01:02:08,000
Yes

1821
01:02:08,000 --> 01:02:10,000
而且在

1822
01:02:10,000 --> 01:02:13,000
你安装了

1823
01:02:13,000 --> 01:02:14,000
Dotnet

1824
01:02:14,000 --> 01:02:15,000
在

1825
01:02:15,000 --> 01:02:16,000
MacOS 上的

1826
01:02:16,000 --> 01:02:18,000
Honority 工具之后

1827
01:02:18,000 --> 01:02:20,000
你就有了 Nugget

1828
01:02:20,000 --> 01:02:21,000
好

1829
01:02:23,000 --> 01:02:24,000
等一下

1830
01:02:24,000 --> 01:02:25,000
Nugget

1831
01:02:25,000 --> 01:02:26,000
这个是不是一个脏话

1832
01:02:26,000 --> 01:02:28,000
不是吧

1833
01:02:28,000 --> 01:02:29,000
Nigger 是脏话

1834
01:02:29,000 --> 01:02:32,000
Nugget 不是吧

1835
01:02:32,000 --> 01:02:33,000
微软不会蠢到

1836
01:02:33,000 --> 01:02:35,000
这么政治不正确的

1837
01:02:35,000 --> 01:02:37,000
这个时候叫寄出 Erbendict

1838
01:02:37,000 --> 01:02:39,000
Nugget

1839
01:02:39,000 --> 01:02:43,000
A person with no arms or legs

1840
01:02:43,000 --> 01:02:44,000
寄块

1841
01:02:44,000 --> 01:02:45,000
一个人

1842
01:02:45,000 --> 01:02:46,000
摆一个人

1843
01:02:46,000 --> 01:02:47,000
人棍吗

1844
01:02:47,000 --> 01:02:48,000
人质

1845
01:02:48,000 --> 01:02:49,000
人棍

1846
01:02:49,000 --> 01:02:50,000
我忘记了

1847
01:02:50,000 --> 01:02:52,000
就是旅后做的那件事

1848
01:02:52,000 --> 01:02:53,000
是吗

1849
01:02:53,000 --> 01:02:54,000
不是

1850
01:02:54,000 --> 01:02:55,000
那叫人质

1851
01:02:55,000 --> 01:02:56,000
人质

1852
01:02:56,000 --> 01:02:58,000
好吧

1853
01:02:58,000 --> 01:02:59,000
Anyway

1854
01:02:59,000 --> 01:03:00,000
对

1855
01:03:00,000 --> 01:03:01,000
Anyway

1856
01:03:01,000 --> 01:03:02,000
反正从大概的上面

1857
01:03:02,000 --> 01:03:04,000
你可以下载

1858
01:03:04,000 --> 01:03:07,000
比如什么 Jquery

1859
01:03:07,000 --> 01:03:11,000
包括 SPnet 的 MVC 库

1860
01:03:11,000 --> 01:03:14,000
甚至还有很多什么

1861
01:03:14,000 --> 01:03:15,000
Boots drive

1862
01:03:15,000 --> 01:03:16,000
好像也可以从上面下下来

1863
01:03:16,000 --> 01:03:17,000
我记得

1864
01:03:17,000 --> 01:03:19,000
对是面对前端的吗

1865
01:03:19,000 --> 01:03:21,000
对一切开发者

1866
01:03:21,000 --> 01:03:22,000
OK

1867
01:03:22,000 --> 01:03:25,000
我记得几个例子就是跟前端开发有关系

1868
01:03:25,000 --> 01:03:27,000
还是说你暴露了

1869
01:03:27,000 --> 01:03:30,000
你是在上面做前端开发这件事

1870
01:03:30,000 --> 01:03:35,000
我在上面做了很简单的 Windows 用户

1871
01:03:35,000 --> 01:03:37,000
Windows 编程

1872
01:03:37,000 --> 01:03:38,000
摸底而已

1873
01:03:38,000 --> 01:03:40,000
没有在上面做过任何开发

1874
01:03:40,000 --> 01:03:42,000
OK

1875
01:03:42,000 --> 01:03:44,000
好吧

1876
01:03:44,000 --> 01:03:46,000
这个反正我也没问过

1877
01:03:46,000 --> 01:03:47,000
没法

1878
01:03:47,000 --> 01:03:49,000
接着讨论下去他到底怎么样

1879
01:03:49,000 --> 01:03:51,000
总之有这么一个东西存在

1880
01:03:51,000 --> 01:03:52,000
对

1881
01:03:52,000 --> 01:03:55,000
刚刚我们讲的就是基于每一个各个操作系统

1882
01:03:55,000 --> 01:03:57,000
或者是 Linux 发行版本的

1883
01:03:57,000 --> 01:04:00,000
这个包管理工具的一些相关的情况

1884
01:04:00,000 --> 01:04:03,000
现在我们要切换到另外一个比较重要

1885
01:04:03,000 --> 01:04:06,000
也是我们吐槽比较多的

1886
01:04:06,000 --> 01:04:09,000
就是基于各个语言的这个

1887
01:04:09,000 --> 01:04:11,000
这包管理的东西了

1888
01:04:11,000 --> 01:04:13,000
这里有一个比较显著的区别

1889
01:04:13,000 --> 01:04:16,000
就是刚才讲的那些像 Homebrew 也好

1890
01:04:16,000 --> 01:04:17,000
还是 Debian 也好

1891
01:04:17,000 --> 01:04:19,000
就他很大成功上是

1892
01:04:19,000 --> 01:04:22,000
为了我们讲部署的时候用的

1893
01:04:22,000 --> 01:04:24,000
部署就是可能最终用户自己安装

1894
01:04:24,000 --> 01:04:26,000
或者是我们把它弄到服务机上运行的时候

1895
01:04:26,000 --> 01:04:28,000
这样去的一个用法

1896
01:04:28,000 --> 01:04:31,000
然后包括你用 Homebrew 安装的很多

1897
01:04:31,000 --> 01:04:33,000
这种所谓的命令和软件

1898
01:04:33,000 --> 01:04:34,000
你是做他的一个用户

1899
01:04:34,000 --> 01:04:36,000
你不是做他的开发者去安装的

1900
01:04:36,000 --> 01:04:37,000
当然也有例外

1901
01:04:37,000 --> 01:04:40,000
其实这是一个比较大的

1902
01:04:40,000 --> 01:04:41,000
比较明显

1903
01:04:41,000 --> 01:04:45,000
但是目前还没有人做出来的区别

1904
01:04:45,000 --> 01:04:48,000
就是你通过一个包管理工具

1905
01:04:48,000 --> 01:04:49,000
安装的一个东西

1906
01:04:49,000 --> 01:04:53,000
有可能是有一个直接可执行文件的

1907
01:04:53,000 --> 01:04:54,000
这么一套东西

1908
01:04:54,000 --> 01:04:57,000
也有可能它仅仅是一个 Lib

1909
01:04:57,000 --> 01:04:58,000
对吧

1910
01:04:58,000 --> 01:04:59,000
仅仅是一个 Libre 而已

1911
01:04:59,000 --> 01:05:01,000
对有很多这种情况

1912
01:05:01,000 --> 01:05:02,000
对啊

1913
01:05:02,000 --> 01:05:04,000
在我的有限任之里面

1914
01:05:04,000 --> 01:05:07,000
好像 Homebrew 其实是对此有一个

1915
01:05:07,000 --> 01:05:08,000
比较模糊的

1916
01:05:08,000 --> 01:05:11,000
而且是一个很稍微有点绕人的概念

1917
01:05:11,000 --> 01:05:12,000
就是有些东西

1918
01:05:12,000 --> 01:05:14,000
所谓 Cast Gonglei

1919
01:05:14,000 --> 01:05:17,000
就 Homebrew 有自己一套 Dragon

1920
01:05:17,000 --> 01:05:18,000
对 它有一套

1921
01:05:18,000 --> 01:05:19,000
比如说

1922
01:05:19,000 --> 01:05:24,000
因为它整个借用了釀丝酒的这么一套

1923
01:05:24,000 --> 01:05:25,000
树雨

1924
01:05:25,000 --> 01:05:26,000
雨汇的

1925
01:05:26,000 --> 01:05:28,000
比如说 Cast 就是一个酒桶

1926
01:05:28,000 --> 01:05:31,000
然后你从 Cast 里面 pour 出来什么东西

1927
01:05:31,000 --> 01:05:34,000
然后在自己 brew 这个套

1928
01:05:34,000 --> 01:05:36,000
其实就是 Labie

1929
01:05:36,000 --> 01:05:38,000
或者说它把整个编译的过程

1930
01:05:38,000 --> 01:05:40,000
Labie 为发酵的过程

1931
01:05:40,000 --> 01:05:42,000
而 Cast Gonglei 的意思就是

1932
01:05:42,000 --> 01:05:43,000
这套东西是不发酵的

1933
01:05:43,000 --> 01:05:46,000
这套东西只是存在酒桶里面

1934
01:05:46,000 --> 01:05:48,000
发酵

1935
01:05:48,000 --> 01:05:49,000
OK 我有点错词

1936
01:05:49,000 --> 01:05:50,000
Sorry

1937
01:05:50,000 --> 01:05:51,000
我先纠正了

1938
01:05:51,000 --> 01:05:52,000
免得你又被

1939
01:05:55,000 --> 01:05:56,000
对 它有那个

1940
01:05:56,000 --> 01:05:58,000
当然有个事情刚刚没有解释

1941
01:05:58,000 --> 01:05:59,000
它有这个

1942
01:05:59,000 --> 01:06:01,000
就像我们讲的 Deben 的包

1943
01:06:01,000 --> 01:06:03,000
一般是发行的二进制版本

1944
01:06:03,000 --> 01:06:05,000
然后 Port 一般是发行原码

1945
01:06:05,000 --> 01:06:08,000
Homebrew 的话其实是比较诡异的

1946
01:06:08,000 --> 01:06:09,000
就是它

1947
01:06:09,000 --> 01:06:10,000
两种都有

1948
01:06:10,000 --> 01:06:12,000
它有种植物应该说

1949
01:06:12,000 --> 01:06:13,000
对

1950
01:06:13,000 --> 01:06:14,000
然后它会有

1951
01:06:14,000 --> 01:06:16,000
三个样也不同的

1952
01:06:16,000 --> 01:06:17,000
词去描述

1953
01:06:17,000 --> 01:06:18,000
我记得它的

1954
01:06:18,000 --> 01:06:21,000
二进制版本是叫做 Bottle

1955
01:06:21,000 --> 01:06:22,000
就是瓶子

1956
01:06:22,000 --> 01:06:23,000
对

1957
01:06:23,000 --> 01:06:25,000
这个逻辑你一想很简单

1958
01:06:25,000 --> 01:06:27,000
就是你编译的过程是在 brew 发酵

1959
01:06:27,000 --> 01:06:28,000
然后发酵完了

1960
01:06:28,000 --> 01:06:30,000
就说这个成品的就别吧

1961
01:06:30,000 --> 01:06:31,000
就叫装瓶

1962
01:06:31,000 --> 01:06:32,000
然后就直接可以给别人用了

1963
01:06:32,000 --> 01:06:33,000
它是有这么一个概念

1964
01:06:33,000 --> 01:06:36,000
然后但是它对于很多那种

1965
01:06:36,000 --> 01:06:39,000
软件就不方便装瓶的

1966
01:06:39,000 --> 01:06:40,000
一个是可能因为法律的问题

1967
01:06:40,000 --> 01:06:41,000
或者是因为版权的问题

1968
01:06:41,000 --> 01:06:43,000
它没办法装瓶的

1969
01:06:43,000 --> 01:06:44,000
没办法装瓶的

1970
01:06:44,000 --> 01:06:45,000
或者甚至最简单的情况就是

1971
01:06:45,000 --> 01:06:47,000
这个东西它根本就不是拿来用的

1972
01:06:47,000 --> 01:06:51,000
它只是拿来作为一种一个建筑材料的而已

1973
01:06:51,000 --> 01:06:52,000
对

1974
01:06:52,000 --> 01:06:54,000
它就会直接发布这个 sourced

1975
01:06:54,000 --> 01:06:55,000
对

1976
01:06:55,000 --> 01:06:57,000
我想想能比较明显

1977
01:06:57,000 --> 01:07:01,000
FMPag FMPG 这些工具

1978
01:07:01,000 --> 01:07:03,000
它就是发布的原码

1979
01:07:03,000 --> 01:07:04,000
然后你要自己编译的

1980
01:07:04,000 --> 01:07:06,000
但是像 Vim

1981
01:07:06,000 --> 01:07:07,000
MacVim 好像是

1982
01:07:07,000 --> 01:07:08,000
它就弄成一个 Bottle

1983
01:07:08,000 --> 01:07:09,000
我记得

1984
01:07:09,000 --> 01:07:11,000
MacVim 不是 Bottle 吗

1985
01:07:11,000 --> 01:07:12,000
如果我没记错的话

1986
01:07:12,000 --> 01:07:13,000
应该是这样子

1987
01:07:13,000 --> 01:07:15,000
我记得 MacVim 也是要编译的

1988
01:07:15,000 --> 01:07:16,000
是吗

1989
01:07:16,000 --> 01:07:17,000
那可能我记错

1990
01:07:17,000 --> 01:07:18,000
它有很多这种是 Bottle 过的

1991
01:07:18,000 --> 01:07:20,000
就是你可以发现安装很快

1992
01:07:20,000 --> 01:07:23,000
也不需要没有编译的过程

1993
01:07:23,000 --> 01:07:25,000
那 anyway

1994
01:07:25,000 --> 01:07:28,000
继续说我们和编乘员相关的

1995
01:07:28,000 --> 01:07:30,000
包管理系统

1996
01:07:30,000 --> 01:07:31,000
对

1997
01:07:31,000 --> 01:07:33,000
这里就可能比较奇特的一个事情

1998
01:07:33,000 --> 01:07:36,000
就是在某具体当某个语言来讲

1999
01:07:36,000 --> 01:07:38,000
它还有通常是一个

2000
01:07:38,000 --> 01:07:40,000
有自己的一套包管理器的

2001
01:07:40,000 --> 01:07:42,000
这个包管理器要解决的

2002
01:07:42,000 --> 01:07:44,000
绝大部分场合是

2003
01:07:44,000 --> 01:07:46,000
作为

2004
01:07:46,000 --> 01:07:48,000
为了帮助开发者写程序的时候用的

2005
01:07:48,000 --> 01:07:49,000
对

2006
01:07:49,000 --> 01:07:51,000
对 这么说完全吧

2007
01:07:51,000 --> 01:07:52,000
我先说安全的吧

2008
01:07:52,000 --> 01:07:54,000
但就是其实

2009
01:07:54,000 --> 01:07:57,000
这里也有一个很有趣的事实

2010
01:07:57,000 --> 01:07:59,000
就是不管是 Python 也好

2011
01:07:59,000 --> 01:08:00,000
还是 Ruby 也好

2012
01:08:00,000 --> 01:08:02,000
有很多包

2013
01:08:02,000 --> 01:08:05,000
其实它不是拿来

2014
01:08:05,000 --> 01:08:07,000
不是帮你提供一个开发工具的

2015
01:08:07,000 --> 01:08:08,000
它是拿来

2016
01:08:08,000 --> 01:08:09,000
提供一个迷你行的东西

2017
01:08:09,000 --> 01:08:11,000
它是给你提供一个迷你行工具的

2018
01:08:11,000 --> 01:08:13,000
比如说我很喜欢的一个叫做

2019
01:08:13,000 --> 01:08:15,000
Lolcat

2020
01:08:15,000 --> 01:08:16,000
Lolcat

2021
01:08:16,000 --> 01:08:18,000
它的效果是

2022
01:08:18,000 --> 01:08:22,000
你可以把任何自付串 Python 给它

2023
01:08:22,000 --> 01:08:25,000
然后它把你 Python 进去的那个自付串

2024
01:08:25,000 --> 01:08:27,000
七彩的形式

2025
01:08:27,000 --> 01:08:29,000
显示在屏幕上

2026
01:08:29,000 --> 01:08:30,000
所以你可以用

2027
01:08:30,000 --> 01:08:32,000
比如说你可以 call say

2028
01:08:32,000 --> 01:08:34,000
就是另一种有趣的小工具

2029
01:08:34,000 --> 01:08:35,000
就是

2030
01:08:35,000 --> 01:08:36,000
牛说

2031
01:08:36,000 --> 01:08:37,000
牛说工具

2032
01:08:37,000 --> 01:08:38,000
它在屏幕上显示一头牛

2033
01:08:38,000 --> 01:08:39,000
然后牛

2034
01:08:39,000 --> 01:08:42,000
头上会冒出一个气泡框

2035
01:08:42,000 --> 01:08:44,000
然后里面写着你要想说的话

2036
01:08:44,000 --> 01:08:46,000
然后你先把你要说的话

2037
01:08:46,000 --> 01:08:47,000
Cat in call say

2038
01:08:47,000 --> 01:08:49,000
然后再 Cat in lolcat

2039
01:08:49,000 --> 01:08:51,000
最终结果就是一个

2040
01:08:51,000 --> 01:08:53,000
七彩的牛

2041
01:08:53,000 --> 01:08:55,000
说了一句七彩的话

2042
01:08:55,000 --> 01:08:57,000
这个东西就是用 NPR

2043
01:08:57,000 --> 01:08:58,000
就是用

2044
01:08:58,000 --> 01:08:59,000
好 fancy

2045
01:08:59,000 --> 01:09:01,000
对 就是用 jam 来发布的

2046
01:09:01,000 --> 01:09:03,000
它本质就只是给你提供一个

2047
01:09:03,000 --> 01:09:04,000
额外的工具而已

2048
01:09:04,000 --> 01:09:05,000
对对

2049
01:09:05,000 --> 01:09:07,000
所以就是刚才我说

2050
01:09:07,000 --> 01:09:08,000
特别限定一下

2051
01:09:08,000 --> 01:09:10,000
就说只能说是大部分场合

2052
01:09:10,000 --> 01:09:12,000
包管的其实是为了做

2053
01:09:12,000 --> 01:09:14,000
这个开发用的工具

2054
01:09:14,000 --> 01:09:15,000
但是其实你看

2055
01:09:15,000 --> 01:09:16,000
也听到有这种场合是

2056
01:09:16,000 --> 01:09:19,000
它那个本来就是拿来发布成一个可知

2057
01:09:19,000 --> 01:09:21,000
最面向最终用户使用的一个工具

2058
01:09:21,000 --> 01:09:23,000
所以这里面这界线

2059
01:09:23,000 --> 01:09:24,000
不是那么清晰一下

2060
01:09:24,000 --> 01:09:26,000
只能说是一个大概的这么一个

2061
01:09:26,000 --> 01:09:27,000
一个分类

2062
01:09:27,000 --> 01:09:28,000
而且比较难的

2063
01:09:28,000 --> 01:09:30,000
很难去一刀切说

2064
01:09:30,000 --> 01:09:32,000
我就要印行在我的

2065
01:09:32,000 --> 01:09:33,000
包管里

2066
01:09:33,000 --> 01:09:35,000
包管里系统里面提供

2067
01:09:36,000 --> 01:09:38,000
比如说 jam s 2

2068
01:09:38,000 --> 01:09:40,000
和 jam slibrary 的区别

2069
01:09:40,000 --> 01:09:42,000
因为有些是两者都提供

2070
01:09:42,000 --> 01:09:44,000
对对对

2071
01:09:44,000 --> 01:09:46,000
它提供了一个让你调试的工具

2072
01:09:46,000 --> 01:09:47,000
比如说对吧

2073
01:09:47,000 --> 01:09:48,000
对

2074
01:09:48,000 --> 01:09:49,000
你可以很方便的启动它

2075
01:09:49,000 --> 01:09:51,000
但是它主要做的还是提供一个 cool

2076
01:09:51,000 --> 01:09:54,000
比如 pray

2077
01:09:54,000 --> 01:09:56,000
或者是或者是 iPython 这种

2078
01:09:56,000 --> 01:09:57,000
它既是一个工具

2079
01:09:57,000 --> 01:09:59,000
它又是一套 cool

2080
01:09:59,000 --> 01:10:00,000
对还是

2081
01:10:00,000 --> 01:10:01,000
对

2082
01:10:02,000 --> 01:10:03,000
software is hard

2083
01:10:03,000 --> 01:10:05,000
so confusing

2084
01:10:07,000 --> 01:10:09,000
好那现在我们就来

2085
01:10:09,000 --> 01:10:10,000
我们先着眼来讲

2086
01:10:10,000 --> 01:10:12,000
我们先不讲

2087
01:10:13,000 --> 01:10:14,000
用这种

2088
01:10:15,000 --> 01:10:16,000
某一个语言独特的

2089
01:10:16,000 --> 01:10:17,000
包管里起来发布

2090
01:10:17,000 --> 01:10:19,000
命理行工具这么一个情况

2091
01:10:19,000 --> 01:10:21,000
我们就先只看

2092
01:10:21,000 --> 01:10:24,000
用它来做开发者的事情的时候

2093
01:10:24,000 --> 01:10:26,000
会有一些什么样的东西

2094
01:10:26,000 --> 01:10:27,000
我们还是按语言来分吧

2095
01:10:27,000 --> 01:10:28,000
对吧

2096
01:10:29,000 --> 01:10:31,000
jama 程式语言无他同学

2097
01:10:31,000 --> 01:10:32,000
请你开始吐槽

2098
01:10:32,000 --> 01:10:34,000
开启你的吐槽模式

2099
01:10:35,000 --> 01:10:36,000
没文的

2100
01:10:38,000 --> 01:10:41,000
所以没文为什么会带着这么惨痛的

2101
01:10:41,000 --> 01:10:42,000
这个感觉

2102
01:10:42,000 --> 01:10:45,000
其实我没文没有真正的伤害过我

2103
01:10:46,000 --> 01:10:47,000
但是

2104
01:10:47,000 --> 01:10:49,000
那你为什么这么仇视它

2105
01:10:49,000 --> 01:10:51,000
公司里面

2106
01:10:51,000 --> 01:10:55,000
公司至少因为没文的一些

2107
01:10:56,000 --> 01:10:58,000
淋漓种种的事情

2108
01:10:58,000 --> 01:11:00,000
在我印象里面

2109
01:11:00,000 --> 01:11:02,000
可能有两次推迟过

2110
01:11:02,000 --> 01:11:03,000
release

2111
01:11:03,000 --> 01:11:05,000
就 release 推迟一天

2112
01:11:05,000 --> 01:11:06,000
其实是非常

2113
01:11:07,000 --> 01:11:10,000
并不是什么天塌下来的

2114
01:11:10,000 --> 01:11:11,000
灾难性时间

2115
01:11:11,000 --> 01:11:13,000
但至少也是让所有人不说

2116
01:11:13,000 --> 01:11:14,000
因为你不是做游戏的对吧

2117
01:11:14,000 --> 01:11:15,000
我们不是做游戏的

2118
01:11:15,000 --> 01:11:17,000
我们是做比游戏更

2119
01:11:18,000 --> 01:11:19,000
海螺音的东西

2120
01:11:19,000 --> 01:11:20,000
但对

2121
01:11:20,000 --> 01:11:21,000
anyway 不重要

2122
01:11:21,000 --> 01:11:22,000
但

2123
01:11:23,000 --> 01:11:25,000
就是推迟一天的话

2124
01:11:25,000 --> 01:11:27,000
有意味着首先运为人员要

2125
01:11:27,000 --> 01:11:28,000
从鸡飞狗跳

2126
01:11:28,000 --> 01:11:30,000
24 小时变成鸡飞狗跳

2127
01:11:30,000 --> 01:11:31,000
48 小时

2128
01:11:32,000 --> 01:11:33,000
然后

2129
01:11:33,000 --> 01:11:35,000
开发人员也会因为

2130
01:11:37,000 --> 01:11:38,000
发布的被推迟

2131
01:11:38,000 --> 01:11:39,000
而不得不

2132
01:11:39,000 --> 01:11:41,000
要么临时被抓撞钉去解决

2133
01:11:42,000 --> 01:11:44,000
导致推迟的问题

2134
01:11:45,000 --> 01:11:47,000
要么就因为

2135
01:11:47,000 --> 01:11:49,000
这一次发布不能及时运行

2136
01:11:49,000 --> 01:11:51,000
而不及时进行

2137
01:11:51,000 --> 01:11:54,000
而得不到一些比较宝贵的资源

2138
01:11:54,000 --> 01:11:55,000
比如说 QA

2139
01:11:55,000 --> 01:11:57,000
比如说 Staging Server 之类的

2140
01:11:58,000 --> 01:12:01,000
因为所有这些 Sever 都还在备战状态

2141
01:12:01,000 --> 01:12:02,000
就是要

2142
01:12:03,000 --> 01:12:06,000
去迎合发布的 Deadline

2143
01:12:06,000 --> 01:12:07,000
而

2144
01:12:08,000 --> 01:12:10,000
Mayhem 至少已经导致过两次这样的

2145
01:12:11,000 --> 01:12:12,000
在我看来已经是

2146
01:12:12,000 --> 01:12:14,000
事故的事故级别的问题

2147
01:12:15,000 --> 01:12:16,000
对

2148
01:12:16,000 --> 01:12:18,000
而另外一方面 Mayhem 在

2149
01:12:18,000 --> 01:12:19,000
使用的时候

2150
01:12:19,000 --> 01:12:21,000
本身你也会觉得

2151
01:12:22,000 --> 01:12:23,000
一阵阵的淡腾

2152
01:12:23,000 --> 01:12:24,000
真是

2153
01:12:24,000 --> 01:12:26,000
对 我又问一个问题

2154
01:12:26,000 --> 01:12:28,000
是不是还需要手工写 XML

2155
01:12:28,000 --> 01:12:29,000
是的

2156
01:12:30,000 --> 01:12:32,000
欢迎来到 1995 年

2157
01:12:34,000 --> 01:12:36,000
我能理解你的头发

2158
01:12:36,000 --> 01:12:37,000
而且

2159
01:12:38,000 --> 01:12:39,000
但是你可以说

2160
01:12:39,000 --> 01:12:40,000
你可以站出来说

2161
01:12:40,000 --> 01:12:42,000
你可以用各种各样的图形界面

2162
01:12:42,000 --> 01:12:43,000
去管理 XML

2163
01:12:43,000 --> 01:12:44,000
生存大的

2164
01:12:44,000 --> 01:12:45,000
对

2165
01:12:45,000 --> 01:12:46,000
对

2166
01:12:46,000 --> 01:12:48,000
有一句名言是 XML 就像 violence

2167
01:12:48,000 --> 01:12:50,000
XML 就像暴力

2168
01:12:50,000 --> 01:12:51,000
如果它不能解决

2169
01:12:51,000 --> 01:12:53,000
如果它不能解决你的问题

2170
01:12:53,000 --> 01:12:55,000
那一定是你用的还不够多

2171
01:12:56,000 --> 01:12:57,000
哈哈哈

2172
01:13:00,000 --> 01:13:01,000
好吧

2173
01:13:01,000 --> 01:13:02,000
对

2174
01:13:02,000 --> 01:13:04,000
所以但是 Mayhem 其实是

2175
01:13:04,000 --> 01:13:05,000
一个比较

2176
01:13:05,000 --> 01:13:07,000
就是在 java 这个开发圈里面

2177
01:13:07,000 --> 01:13:08,000
是一个什么通用

2178
01:13:08,000 --> 01:13:10,000
常见的一个方案了吗

2179
01:13:10,000 --> 01:13:12,000
可能我一半成学员会

2180
01:13:12,000 --> 01:13:13,000
反驳你的看法

2181
01:13:13,000 --> 01:13:14,000
但

2182
01:13:15,000 --> 01:13:17,000
要我说 Mayhem 其实是一种

2183
01:13:19,000 --> 01:13:21,000
一个过度

2184
01:13:21,000 --> 01:13:23,000
过早优化的典型

2185
01:13:23,000 --> 01:13:24,000
可以这么说吗

2186
01:13:25,000 --> 01:13:26,000
为什么这么说呢

2187
01:13:26,000 --> 01:13:28,000
因为比如说 Mayhem

2188
01:13:28,000 --> 01:13:30,000
一个 Mayhem Project 一上来就

2189
01:13:31,000 --> 01:13:33,000
强制你使用一种特定的

2190
01:13:33,000 --> 01:13:35,000
项目的格式

2191
01:13:35,000 --> 01:13:37,000
就是你所有的

2192
01:13:37,000 --> 01:13:39,000
包文件的格式

2193
01:13:39,000 --> 01:13:41,000
就是你组织原来码的格式

2194
01:13:41,000 --> 01:13:43,000
在所有 Mayhem Project 里面是一文一样的

2195
01:13:43,000 --> 01:13:45,000
就 Directory Layout

2196
01:13:45,000 --> 01:13:46,000
对

2197
01:13:46,000 --> 01:13:47,000
Directory Layout 就是

2198
01:13:47,000 --> 01:13:48,000
一上来有一个 source

2199
01:13:48,000 --> 01:13:49,000
source 里面有 main

2200
01:13:49,000 --> 01:13:50,000
main 里面有

2201
01:13:50,000 --> 01:13:51,000
sorry main

2202
01:13:51,000 --> 01:13:52,000
对

2203
01:13:52,000 --> 01:13:53,000
main 里面有

2204
01:13:53,000 --> 01:13:54,000
main

2205
01:13:54,000 --> 01:13:55,000
然后有一个 test

2206
01:13:55,000 --> 01:13:56,000
然后 main 和 test

2207
01:13:56,000 --> 01:13:57,000
下面的所有的文件结构

2208
01:13:57,000 --> 01:13:58,000
要一模一样

2209
01:14:00,000 --> 01:14:01,000
对 总之是

2210
01:14:01,000 --> 01:14:02,000
其实这个没什么

2211
01:14:02,000 --> 01:14:04,000
这个有这个规范是好

2212
01:14:04,000 --> 01:14:05,000
是吗

2213
01:14:05,000 --> 01:14:06,000
我不觉得这个是一个

2214
01:14:06,000 --> 01:14:07,000
特别不好的一个事情

2215
01:14:07,000 --> 01:14:10,000
但是在你仅仅想要

2216
01:14:10,000 --> 01:14:12,000
写一些比较小的东西的时候

2217
01:14:12,000 --> 01:14:13,000
你就会觉得这种

2218
01:14:13,000 --> 01:14:15,000
强加于你的结构

2219
01:14:15,000 --> 01:14:17,000
是非常让人不爽的

2220
01:14:17,000 --> 01:14:19,000
对 我觉得这就是问题所在的

2221
01:14:19,000 --> 01:14:22,000
你为什么要用 java 写一个很小的东西呢

2222
01:14:22,000 --> 01:14:24,000
你为什么为了一个 java 文语人去写

2223
01:14:24,000 --> 01:14:25,000
好吧

2224
01:14:25,000 --> 01:14:27,000
这里有个审美关键的

2225
01:14:27,000 --> 01:14:29,000
对的问题在里面

2226
01:14:29,000 --> 01:14:30,000
就是

2227
01:14:30,000 --> 01:14:32,000
你可以说 Mayhem 是一种

2228
01:14:32,000 --> 01:14:36,000
专门为了企业及应用而推出的

2229
01:14:36,000 --> 01:14:38,000
一种硬性的解决方案

2230
01:14:38,000 --> 01:14:41,000
就是它通过

2231
01:14:41,000 --> 01:14:47,000
永长繁琐的配置和强制

2232
01:14:47,000 --> 01:14:49,000
加在你身上的工序

2233
01:14:49,000 --> 01:14:50,000
保证了你是一个

2234
01:14:50,000 --> 01:14:52,000
可以被替换的东西

2235
01:14:52,000 --> 01:14:53,000
因为不管你是谁

2236
01:14:53,000 --> 01:14:54,000
你只要用 Mayhem

2237
01:14:54,000 --> 01:14:56,000
那么你能做的东西

2238
01:14:56,000 --> 01:14:57,000
都是可以预定的

2239
01:14:57,000 --> 01:14:58,000
都是可以预见的

2240
01:14:58,000 --> 01:14:59,000
对

2241
01:14:59,000 --> 01:15:00,000
而不像你说

2242
01:15:00,000 --> 01:15:01,000
比如说早期的

2243
01:15:01,000 --> 01:15:02,000
红黄时代在 New Ant 的时候

2244
01:15:02,000 --> 01:15:03,000
你的 ant file

2245
01:15:03,000 --> 01:15:05,000
可能是一个天数样的东西

2246
01:15:05,000 --> 01:15:06,000
你的接手者是没有办法

2247
01:15:06,000 --> 01:15:08,000
去理解你

2248
01:15:08,000 --> 01:15:10,000
去替代你

2249
01:15:10,000 --> 01:15:11,000
但是反过来

2250
01:15:11,000 --> 01:15:13,000
我会觉得

2251
01:15:13,000 --> 01:15:15,000
就像我对所有的代表

2252
01:15:15,000 --> 01:15:17,000
interprise 的字样的东西

2253
01:15:17,000 --> 01:15:19,000
天生的反感一样

2254
01:15:19,000 --> 01:15:21,000
是一种

2255
01:15:21,000 --> 01:15:22,000
我很难说

2256
01:15:22,000 --> 01:15:24,000
它到底错在哪

2257
01:15:24,000 --> 01:15:25,000
但我就觉得

2258
01:15:25,000 --> 01:15:28,000
它不是我希望的那样

2259
01:15:28,000 --> 01:15:29,000
但是如果你是

2260
01:15:29,000 --> 01:15:30,000
包的这种心态的话

2261
01:15:30,000 --> 01:15:31,000
你是不是不应该写

2262
01:15:31,000 --> 01:15:32,000
java 程序呢

2263
01:15:32,000 --> 01:15:33,000
at all

2264
01:15:35,000 --> 01:15:36,000
New Java

2265
01:15:36,000 --> 01:15:37,000
就是为 underprise

2266
01:15:37,000 --> 01:15:38,000
对

2267
01:15:38,000 --> 01:15:39,000
我只能说

2268
01:15:39,000 --> 01:15:41,000
我是为了谋生

2269
01:15:41,000 --> 01:15:43,000
不得不做这件事情

2270
01:15:43,000 --> 01:15:44,000
但就像所有的

2271
01:15:44,000 --> 01:15:47,000
就像 Paul Graham 说过的那句话

2272
01:15:47,000 --> 01:15:50,000
在他知道的所有程序里面

2273
01:15:50,000 --> 01:15:52,000
在他认识的 10 个

2274
01:15:52,000 --> 01:15:53,000
在他能想出的

2275
01:15:53,000 --> 01:15:54,000
原号不太记得的

2276
01:15:54,000 --> 01:15:55,000
反正大意就是说

2277
01:15:55,000 --> 01:15:57,000
在他能想到的 10 个 java 程序里面

2278
01:15:57,000 --> 01:15:59,000
有 9 个

2279
01:15:59,000 --> 01:16:01,000
不是出于资源的目的

2280
01:16:01,000 --> 01:16:03,000
而去写 java

2281
01:16:03,000 --> 01:16:04,000
对

2282
01:16:04,000 --> 01:16:06,000
我可能也是

2283
01:16:08,000 --> 01:16:09,000
当然我

2284
01:16:09,000 --> 01:16:11,000
生活所迫吗

2285
01:16:11,000 --> 01:16:12,000
对

2286
01:16:12,000 --> 01:16:13,000
而且这也

2287
01:16:13,000 --> 01:16:14,000
我觉得这可能

2288
01:16:14,000 --> 01:16:16,000
也是我辞职的原因之一

2289
01:16:16,000 --> 01:16:18,000
去寻找更绿的

2290
01:16:18,000 --> 01:16:19,000
歌不干了

2291
01:16:19,000 --> 01:16:20,000
对

2292
01:16:20,000 --> 01:16:22,000
去寻找更绿的草评的动机之一

2293
01:16:22,000 --> 01:16:23,000
也就是我终于受够了

2294
01:16:23,000 --> 01:16:24,000
java 这一套

2295
01:16:26,000 --> 01:16:27,000
对

2296
01:16:27,000 --> 01:16:28,000
而且

2297
01:16:28,000 --> 01:16:29,000
所以这里要

2298
01:16:29,000 --> 01:16:31,000
要查问一句

2299
01:16:31,000 --> 01:16:33,000
你下一份工作是准备写什么

2300
01:16:33,000 --> 01:16:34,000
可能是 pizen

2301
01:16:34,000 --> 01:16:35,000
应该是 pizen

2302
01:16:35,000 --> 01:16:36,000
pizen cjava

2303
01:16:36,000 --> 01:16:40,000
然后 java 可能会成为一个选项

2304
01:16:40,000 --> 01:16:42,000
但应该不是必须

2305
01:16:42,000 --> 01:16:43,000
至少目前我找个

2306
01:16:43,000 --> 01:16:45,000
资料是这样的

2307
01:16:45,000 --> 01:16:46,000
ok

2308
01:16:46,000 --> 01:16:47,000
对

2309
01:16:47,000 --> 01:16:48,000
好

2310
01:16:48,000 --> 01:16:49,000
java 那边除了 maven

2311
01:16:49,000 --> 01:16:51,000
这一个比较你比较沮丧的

2312
01:16:51,000 --> 01:16:53,000
这个包管理器之外

2313
01:16:53,000 --> 01:16:54,000
还有什么其他选项

2314
01:16:54,000 --> 01:16:56,000
这还有其他别的选项吗

2315
01:16:56,000 --> 01:16:57,000
没有吗

2316
01:16:58,000 --> 01:16:59,000
应该是有的

2317
01:16:59,000 --> 01:17:01,000
但 maven 基本上可以视为

2318
01:17:01,000 --> 01:17:05,000
任何一个比较上了规模的

2319
01:17:08,000 --> 01:17:11,000
企业机应用的开发企业

2320
01:17:11,000 --> 01:17:12,000
都不得不

2321
01:17:12,000 --> 01:17:15,000
或者说都会选择的一个解决方案

2322
01:17:15,000 --> 01:17:16,000
因为

2323
01:17:16,000 --> 01:17:18,000
v 2 maven 产生出了一套

2324
01:17:18,000 --> 01:17:22,000
还是相对来说比较成熟的生态系统

2325
01:17:22,000 --> 01:17:23,000
就每一个都很繁琐

2326
01:17:23,000 --> 01:17:24,000
每一个都很丑陋

2327
01:17:24,000 --> 01:17:26,000
但是搭载在一起的时候

2328
01:17:26,000 --> 01:17:29,000
他在 50%的时间里面

2329
01:17:29,000 --> 01:17:31,000
还是可以做事的

2330
01:17:34,000 --> 01:17:35,000
好吧

2331
01:17:35,000 --> 01:17:36,000
所以这是一个

2332
01:17:36,000 --> 01:17:38,000
大家都知道很不爽

2333
01:17:38,000 --> 01:17:39,000
但是他就知道起码

2334
01:17:39,000 --> 01:17:41,000
这个不爽是可以预期的

2335
01:17:41,000 --> 01:17:42,000
对吧

2336
01:17:42,000 --> 01:17:43,000
有多不爽

2337
01:17:43,000 --> 01:17:44,000
网上有一幅漫画

2338
01:17:44,000 --> 01:17:46,000
我觉得一定要放在我们的

2339
01:17:46,000 --> 01:17:47,000
shownotes 里面

2340
01:17:47,000 --> 01:17:49,000
以想读者

2341
01:17:49,000 --> 01:17:50,000
对

2342
01:17:50,000 --> 01:17:52,000
大意就是你

2343
01:17:52,000 --> 01:17:55,000
大意是一个你采用

2344
01:17:55,000 --> 01:17:58,000
maven 之后的生产率曲线

2345
01:17:58,000 --> 01:17:59,000
刚刚开始

2346
01:17:59,000 --> 01:18:02,000
这个曲线是有一点点向上

2347
01:18:02,000 --> 01:18:03,000
就是刚刚采用 maven 之后

2348
01:18:03,000 --> 01:18:04,000
你会觉得

2349
01:18:04,000 --> 01:18:07,000
一切包都精英有条

2350
01:18:07,000 --> 01:18:09,000
然后一切

2351
01:18:09,000 --> 01:18:10,000
maven 还有一个特点

2352
01:18:10,000 --> 01:18:14,000
就是它给你预先定义了

2353
01:18:14,000 --> 01:18:16,000
一套非常永长繁琐

2354
01:18:16,000 --> 01:18:19,000
啰嗦的编译步骤

2355
01:18:19,000 --> 01:18:22,000
比如说你可以运行 maven clean

2356
01:18:22,000 --> 01:18:24,000
就是把你设置成东西

2357
01:18:24,000 --> 01:18:25,000
然后 maven test

2358
01:18:25,000 --> 01:18:28,000
就是帮你从 pre-compile

2359
01:18:28,000 --> 01:18:29,000
compile

2360
01:18:29,000 --> 01:18:31,000
然后 assembly

2361
01:18:31,000 --> 01:18:33,000
然后 distribute

2362
01:18:33,000 --> 01:18:35,000
诸如此类整整一套

2363
01:18:35,000 --> 01:18:36,000
全部跑下来

2364
01:18:36,000 --> 01:18:37,000
然后自动帮你运行测试

2365
01:18:37,000 --> 01:18:39,000
你会觉得自己的生产率

2366
01:18:39,000 --> 01:18:40,000
好像提高了

2367
01:18:40,000 --> 01:18:42,000
因为一切都尽可能自动化了

2368
01:18:42,000 --> 01:18:45,000
但是好景不长

2369
01:18:45,000 --> 01:18:46,000
当某一个时间你遭遇到

2370
01:18:46,000 --> 01:18:49,000
某一个安装包的依赖

2371
01:18:49,000 --> 01:18:51,000
冲突问题的时候

2372
01:18:51,000 --> 01:18:52,000
你会发现

2373
01:18:52,000 --> 01:18:53,000
你已经失去了

2374
01:18:53,000 --> 01:18:55,000
对整个项目的控制

2375
01:18:55,000 --> 01:18:57,000
然后整个情况直转之下

2376
01:18:57,000 --> 01:18:59,000
然后生产率曲线

2377
01:18:59,000 --> 01:19:01,000
就跌落了一个万届不复的深渊

2378
01:19:01,000 --> 01:19:02,000
你会发现

2379
01:19:02,000 --> 01:19:04,000
哇我把整个 project

2380
01:19:04,000 --> 01:19:06,000
project 已经怎么说

2381
01:19:06,000 --> 01:19:07,000
Mavenized

2382
01:19:07,000 --> 01:19:10,000
然后在这对

2383
01:19:10,000 --> 01:19:11,000
感觉这个时候

2384
01:19:11,000 --> 01:19:13,000
就像癌症感染一样

2385
01:19:13,000 --> 01:19:15,000
对我已经起虎能下

2386
01:19:15,000 --> 01:19:16,000
再也回不去了

2387
01:19:18,000 --> 01:19:19,000
所以还有一个什么

2388
01:19:19,000 --> 01:19:21,000
还能够恢复的阶段吗

2389
01:19:21,000 --> 01:19:23,000
好像那封漫画里面

2390
01:19:23,000 --> 01:19:25,000
是没有恢复的阶段

2391
01:19:25,000 --> 01:19:27,000
直接死了

2392
01:19:27,000 --> 01:19:28,000
而且在有一个

2393
01:19:28,000 --> 01:19:30,000
就像我上次提到过

2394
01:19:30,000 --> 01:19:32,000
一个 tumbler 的一个

2395
01:19:32,000 --> 01:19:36,000
以 gif 动画为主的 tumbler

2396
01:19:36,000 --> 01:19:39,000
叫做 Devops Reactions

2397
01:19:39,000 --> 01:19:42,000
里面就有一个

2398
01:19:42,000 --> 01:19:47,000
有一期就是讲 Maven 的

2399
01:19:47,000 --> 01:19:49,000
人力如何令人痛苦的

2400
01:19:49,000 --> 01:19:50,000
很简单

2401
01:19:50,000 --> 01:19:54,000
就是一个人在雨中流泪

2402
01:19:54,000 --> 01:19:55,000
然后另外一个人

2403
01:19:55,000 --> 01:19:57,000
从后面贴进他的耳朵说

2404
01:19:59,000 --> 01:20:01,000
好像是

2405
01:20:03,000 --> 01:20:06,000
it's gonna be painful

2406
01:20:06,000 --> 01:20:08,000
大概说了这么一句话

2407
01:20:08,000 --> 01:20:11,000
然后 gif 的标题就是

2408
01:20:11,000 --> 01:20:14,000
得知项目里面需要用到 Maven

2409
01:20:18,000 --> 01:20:19,000
好吧

2410
01:20:19,000 --> 01:20:21,000
我们知道你的痛苦了

2411
01:20:21,000 --> 01:20:22,000
不过我马上就要解脱了

2412
01:20:22,000 --> 01:20:23,000
还有一个礼拜

2413
01:20:23,000 --> 01:20:27,000
而且各位听到这些节目的时候

2414
01:20:27,000 --> 01:20:28,000
我已经解脱了

2415
01:20:28,000 --> 01:20:30,000
我已经开开心心的

2416
01:20:30,000 --> 01:20:32,000
在意大利游玩

2417
01:20:36,000 --> 01:20:39,000
就说到 java 要说一个相关的语言

2418
01:20:39,000 --> 01:20:42,000
就是这个人叫做 Skala 的语言

2419
01:20:42,000 --> 01:20:44,000
或者说 next generation Java

2420
01:20:47,000 --> 01:20:48,000
我觉得不能这么说

2421
01:20:48,000 --> 01:20:50,000
因为他并不是他的一个超级

2422
01:20:50,000 --> 01:20:51,000
首先

2423
01:20:51,000 --> 01:20:52,000
他是怎么说的

2424
01:20:52,000 --> 01:20:54,000
Skala 的目的就是取代

2425
01:20:54,000 --> 01:20:56,000
现有的 java 成为下一代的

2426
01:20:56,000 --> 01:20:58,000
企业及应用的标准语言

2427
01:20:58,000 --> 01:21:00,000
我觉得这件事情是不会发生的

2428
01:21:00,000 --> 01:21:01,000
对

2429
01:21:01,000 --> 01:21:02,000
你绝对不会发生

2430
01:21:02,000 --> 01:21:04,000
但至少我在我这边

2431
01:21:04,000 --> 01:21:06,000
在我看到的新闻里面

2432
01:21:06,000 --> 01:21:08,000
Skala 就是 Skala 的目标

2433
01:21:08,000 --> 01:21:10,000
而且欧盟也的确

2434
01:21:10,000 --> 01:21:12,000
欧盟给 Skala 扔了很多很多钱

2435
01:21:12,000 --> 01:21:15,000
因为 Skala 是某种意义上是一个欧洲语言

2436
01:21:15,000 --> 01:21:18,000
就是德国人开发瑞士人制造

2437
01:21:18,000 --> 01:21:20,000
德国人开发瑞士人制造

2438
01:21:20,000 --> 01:21:23,000
基本上是你所能得到的变成语言里面

2439
01:21:23,000 --> 01:21:25,000
最复杂的一种可能性

2440
01:21:26,000 --> 01:21:27,000
对

2441
01:21:27,000 --> 01:21:29,000
为什么我说讲 Skala 不可能

2442
01:21:29,000 --> 01:21:31,000
替代 java 成为主流

2443
01:21:31,000 --> 01:21:33,000
我觉得在工业定性上

2444
01:21:33,000 --> 01:21:34,000
就已经有这一点

2445
01:21:34,000 --> 01:21:35,000
光说一点

2446
01:21:35,000 --> 01:21:37,000
他 Skala 的语言规范

2447
01:21:37,000 --> 01:21:39,000
叫一个大部头的书

2448
01:21:39,000 --> 01:21:41,000
才能讲得清楚

2449
01:21:41,000 --> 01:21:42,000
才能讲到完

2450
01:21:42,000 --> 01:21:43,000
然后我觉得这个世界上

2451
01:21:43,000 --> 01:21:44,000
能够跟他比的估计

2452
01:21:44,000 --> 01:21:45,000
只有 C++了吧

2453
01:21:45,000 --> 01:21:46,000
对

2454
01:21:46,000 --> 01:21:48,000
Skala 的现状就是没有任何一个

2455
01:21:48,000 --> 01:21:50,000
就认我如果说错的话

2456
01:21:50,000 --> 01:21:53,000
事实上没有任何一个 CniBn

2457
01:21:53,000 --> 01:21:55,000
CniBn 的编译器是完全

2458
01:21:57,000 --> 01:21:59,000
可以符合 CniBn

2459
01:21:59,000 --> 01:22:01,000
是不是这样

2460
01:22:01,000 --> 01:22:03,000
我觉得应该是吧

2461
01:22:03,000 --> 01:22:04,000
OK

2462
01:22:04,000 --> 01:22:05,000
对

2463
01:22:05,000 --> 01:22:06,000
然后 Skala 也是一个

2464
01:22:06,000 --> 01:22:07,000
就是属于一个

2465
01:22:07,000 --> 01:22:09,000
我在我的心目中归类

2466
01:22:09,000 --> 01:22:10,000
是把它歌于 CniBn

2467
01:22:10,000 --> 01:22:13,000
同类复杂度的语言

2468
01:22:13,000 --> 01:22:14,000
但是它确实有很多

2469
01:22:14,000 --> 01:22:16,000
这种很爽的语言特性

2470
01:22:16,000 --> 01:22:18,000
但这不是这次讨论的重点

2471
01:22:19,000 --> 01:22:20,000
这次要提到

2472
01:22:20,000 --> 01:22:21,000
它是因为要说它的一个

2473
01:22:21,000 --> 01:22:23,000
包管理器叫做 SBT

2474
01:22:23,000 --> 01:22:24,000
傻变态

2475
01:22:26,000 --> 01:22:28,000
还好你没有选择另外一种更

2476
01:22:30,000 --> 01:22:32,000
那么它特别在哪呢

2477
01:22:32,000 --> 01:22:33,000
它的特别在于它的

2478
01:22:33,000 --> 01:22:34,000
你知道你写的没问题

2479
01:22:34,000 --> 01:22:36,000
你是要写 xml 吗

2480
01:22:36,000 --> 01:22:37,000
对

2481
01:22:37,000 --> 01:22:38,000
那你叫 xml 本来就不是

2482
01:22:38,000 --> 01:22:39,000
拿给人写的吗

2483
01:22:39,000 --> 01:22:40,000
对吧

2484
01:22:41,000 --> 01:22:42,000
它本来是要给

2485
01:22:42,000 --> 01:22:44,000
机器生成细读去的

2486
01:22:44,000 --> 01:22:47,000
SBT 的文件是一个

2487
01:22:47,000 --> 01:22:49,000
Skala 的 DSL

2488
01:22:49,000 --> 01:22:50,000
你可以这么想

2489
01:22:51,000 --> 01:22:53,000
对它是相比 xml

2490
01:22:53,000 --> 01:22:55,000
是绝对要简洁很多的

2491
01:22:55,000 --> 01:22:58,000
不过它作为一个 DSL

2492
01:22:58,000 --> 01:23:00,000
它也有它自己的问题

2493
01:23:00,000 --> 01:23:01,000
你首先得知道

2494
01:23:01,000 --> 01:23:03,000
你能够在这里面写什么

2495
01:23:03,000 --> 01:23:04,000
不能在里面写什么

2496
01:23:04,000 --> 01:23:06,000
就是你要用 SBT 这个包管理器

2497
01:23:06,000 --> 01:23:09,000
首先你得比较熟悉的理解

2498
01:23:09,000 --> 01:23:10,000
Skala 那一套复杂

2499
01:23:10,000 --> 01:23:12,000
回色的语言规范怎么一回事

2500
01:23:13,000 --> 01:23:15,000
我看 Skala 复杂里面

2501
01:23:15,000 --> 01:23:17,000
反正有很多很难

2502
01:23:17,000 --> 01:23:18,000
忘门生意的东西

2503
01:23:18,000 --> 01:23:19,000
这个我是知道的

2504
01:23:19,000 --> 01:23:20,000
对 因为它是一个

2505
01:23:20,000 --> 01:23:23,000
它是一个来自学术圈的语言

2506
01:23:23,000 --> 01:23:25,000
你可以这么想吧

2507
01:23:26,000 --> 01:23:27,000
难说吧

2508
01:23:27,000 --> 01:23:30,000
作者毕竟也是 Skala 的

2509
01:23:31,000 --> 01:23:32,000
杜伟

2510
01:23:32,000 --> 01:23:34,000
你可以理解它是一个

2511
01:23:34,000 --> 01:23:36,000
工业界和学术界都双修的大牛

2512
01:23:36,000 --> 01:23:37,000
对 因为这个人

2513
01:23:37,000 --> 01:23:38,000
起码到现在为止

2514
01:23:38,000 --> 01:23:41,000
它还是待在大学里面教书

2515
01:23:41,000 --> 01:23:44,000
对 待在它美丽的瑞士小城洛桑

2516
01:23:44,000 --> 01:23:46,000
每天看着日内瓦湖

2517
01:23:46,000 --> 01:23:48,000
然后写写编译器

2518
01:23:48,000 --> 01:23:49,000
好优险的生活

2519
01:23:49,000 --> 01:23:50,000
交交课

2520
01:23:50,000 --> 01:23:51,000
对 它在那个

2521
01:23:51,000 --> 01:23:53,000
洛桑里工

2522
01:23:53,000 --> 01:23:56,000
对 它在联盟里工的洛桑分院

2523
01:23:56,000 --> 01:23:58,000
对 然后它应该是在

2524
01:23:58,000 --> 01:24:02,000
Kausser 上面教一门公开课

2525
01:24:02,000 --> 01:24:03,000
对

2526
01:24:03,000 --> 01:24:04,000
functional programming

2527
01:24:04,000 --> 01:24:07,000
functional programming principles in Skala

2528
01:24:07,000 --> 01:24:08,000
OK

2529
01:24:08,000 --> 01:24:09,000
multinodecky

2530
01:24:09,000 --> 01:24:11,000
对 这个大牛

2531
01:24:11,000 --> 01:24:13,000
得于口音 长得一口得月

2532
01:24:13,000 --> 01:24:14,000
口音很重的

2533
01:24:14,000 --> 01:24:16,000
长了一张德国人的脸

2534
01:24:16,000 --> 01:24:20,000
在瑞士的法语系教书

2535
01:24:20,000 --> 01:24:22,000
对 很奇怪的事

2536
01:24:22,000 --> 01:24:24,000
SBT 的

2537
01:24:24,000 --> 01:24:26,000
当时学 SKAL 的时候

2538
01:24:26,000 --> 01:24:28,000
就是用它来编译东西

2539
01:24:28,000 --> 01:24:29,000
它可以也支持

2540
01:24:29,000 --> 01:24:30,000
纯加文的项目也可以

2541
01:24:30,000 --> 01:24:33,000
然后 SKAL 加文混合项目的也可以

2542
01:24:33,000 --> 01:24:35,000
就给我感觉它那套

2543
01:24:35,000 --> 01:24:37,000
就是那个配置文件

2544
01:24:37,000 --> 01:24:39,000
还是比较好写的

2545
01:24:39,000 --> 01:24:41,000
就起码比没文好多了

2546
01:24:41,000 --> 01:24:42,000
我觉得

2547
01:24:42,000 --> 01:24:44,000
但吐槽子的杆也吐了

2548
01:24:44,000 --> 01:24:46,000
就是我对这个东西的理解

2549
01:24:46,000 --> 01:24:48,000
因为我没有认识它用过来

2550
01:24:48,000 --> 01:24:49,000
只是它在学习

2551
01:24:49,000 --> 01:24:51,000
没有用过什么作为大规模的应用

2552
01:24:51,000 --> 01:24:52,000
所以不太清楚

2553
01:24:52,000 --> 01:24:54,000
具体使用的时候会怎么样

2554
01:24:54,000 --> 01:24:55,000
但是

2555
01:24:55,000 --> 01:24:58,000
据 SBT 的用户的描述来讲

2556
01:24:58,000 --> 01:25:02,000
应该是比没文之流要好很多的

2557
01:25:02,000 --> 01:25:03,000
OK

2558
01:25:03,000 --> 01:25:07,000
你确定你说的 DSL 好写是真的吗

2559
01:25:07,000 --> 01:25:08,000
因为我目前在看

2560
01:25:08,000 --> 01:25:10,000
这个 SBT 教程上面的一段

2561
01:25:10,000 --> 01:25:11,000
就是

2562
01:25:11,000 --> 01:25:12,000
这是什么

2563
01:25:12,000 --> 01:25:14,000
为什么一个 Build

2564
01:25:14,000 --> 01:25:15,000
有一个 Object

2565
01:25:15,000 --> 01:25:16,000
HelloBuild

2566
01:25:16,000 --> 01:25:17,000
ExtenseBuild

2567
01:25:17,000 --> 01:25:18,000
就在 Build 的文件里面

2568
01:25:18,000 --> 01:25:20,000
居然要用到继承

2569
01:25:20,000 --> 01:25:23,000
或者说非常显示的

2570
01:25:23,000 --> 01:25:25,000
写出继承关系来

2571
01:25:25,000 --> 01:25:26,000
这个原理也很简单

2572
01:25:26,000 --> 01:25:27,000
就像在加文里面

2573
01:25:27,000 --> 01:25:28,000
你没有办法不写一个

2574
01:25:28,000 --> 01:25:31,000
Class 军形一个程序一样

2575
01:25:31,000 --> 01:25:32,000
你在 SKAL 里面

2576
01:25:32,000 --> 01:25:33,000
对你在 SKAL 里面

2577
01:25:33,000 --> 01:25:35,000
你至少有一个 Object

2578
01:25:35,000 --> 01:25:36,000
就是 InSKAL

2579
01:25:36,000 --> 01:25:37,000
Everything is an object

2580
01:25:37,000 --> 01:25:39,000
Object 在 SKAL 里面

2581
01:25:39,000 --> 01:25:40,000
相当于

2582
01:25:40,000 --> 01:25:41,000
如果没记错

2583
01:25:41,000 --> 01:25:42,000
就是 Singleton 吧

2584
01:25:42,000 --> 01:25:43,000
对

2585
01:25:43,000 --> 01:25:45,000
对差不多这个概念

2586
01:25:45,000 --> 01:25:47,000
然后为什么

2587
01:25:47,000 --> 01:25:49,000
Settings 这个东西

2588
01:25:49,000 --> 01:25:52,000
前面要有 Override Lazy Vowels

2589
01:25:52,000 --> 01:25:55,000
这个时候你就要去研究 SKAL

2590
01:25:55,000 --> 01:25:57,000
这个语言到底本身怎么一回事

2591
01:25:57,000 --> 01:25:59,000
你还得理解它这个文

2592
01:25:59,000 --> 01:26:01,000
就是说它的门槛是蛮高的

2593
01:26:01,000 --> 01:26:04,000
然后一旦你入了门之后

2594
01:26:04,000 --> 01:26:07,000
which is a long long time

2595
01:26:07,000 --> 01:26:09,000
一旦你入了门之后

2596
01:26:09,000 --> 01:26:11,000
还是写起来还行

2597
01:26:11,000 --> 01:26:13,000
反正就那套 DS 上

2598
01:26:13,000 --> 01:26:14,000
一旦学会之后

2599
01:26:14,000 --> 01:26:16,000
你能够以一个非常简炼的方式

2600
01:26:16,000 --> 01:26:17,000
把它写出来

2601
01:26:17,000 --> 01:26:18,000
但难度在于

2602
01:26:18,000 --> 01:26:19,000
你要达到那个简单方式

2603
01:26:19,000 --> 01:26:21,000
你得先读它 Colibur

2604
01:26:21,000 --> 01:26:23,000
SKALA 的那本书

2605
01:26:23,000 --> 01:26:25,000
你只要啃上什么小半年了

2606
01:26:25,000 --> 01:26:28,000
对

2607
01:26:28,000 --> 01:26:30,000
对那用那个来管理

2608
01:26:30,000 --> 01:26:32,000
SKALA 的这个

2609
01:26:32,000 --> 01:26:35,000
这个 project 也是可以的

2610
01:26:35,000 --> 01:26:36,000
但是我很怀疑

2611
01:26:36,000 --> 01:26:38,000
这件事情的可行之处

2612
01:26:38,000 --> 01:26:40,000
是在探南学的

2613
01:26:40,000 --> 01:26:42,000
我是觉得

2614
01:26:42,000 --> 01:26:45,000
它应该像很多很多欧盟

2615
01:26:45,000 --> 01:26:48,000
看好的所有其他项目一样

2616
01:26:48,000 --> 01:26:50,000
因为过度的繁琐

2617
01:26:50,000 --> 01:26:52,000
而最后被抛弃的历史的策论

2618
01:26:52,000 --> 01:26:54,000
下面

2619
01:26:54,000 --> 01:26:56,000
很有可能

2620
01:26:56,000 --> 01:26:57,000
对

2621
01:26:57,000 --> 01:26:58,000
所以我们

2622
01:26:58,000 --> 01:27:00,000
或者从另外一个角度理解

2623
01:27:00,000 --> 01:27:02,000
也是我们这些选择了

2624
01:27:02,000 --> 01:27:04,000
够或者是选择了更多

2625
01:27:04,000 --> 01:27:07,000
更简单的

2626
01:27:07,000 --> 01:27:09,000
菜鸟们的一种

2627
01:27:09,000 --> 01:27:11,000
无望的袭击

2628
01:27:11,000 --> 01:27:13,000
也许它最后还是会像

2629
01:27:13,000 --> 01:27:15,000
粘外一样 Take Over the World

2630
01:27:15,000 --> 01:27:17,000
像世界家一样

2631
01:27:17,000 --> 01:27:20,000
盘聚在 TiOBE 的

2632
01:27:20,000 --> 01:27:22,000
那个排行榜上

2633
01:27:22,000 --> 01:27:24,000
中年晕魂不散

2634
01:27:24,000 --> 01:27:25,000
也不是没有可能

2635
01:27:25,000 --> 01:27:27,000
现在比如说你像推特

2636
01:27:27,000 --> 01:27:28,000
还有一些什么中度用户

2637
01:27:28,000 --> 01:27:29,000
都在用这个写

2638
01:27:29,000 --> 01:27:30,000
它的后台

2639
01:27:30,000 --> 01:27:32,000
那这种也是可以

2640
01:27:32,000 --> 01:27:33,000
就是如果它出现了

2641
01:27:33,000 --> 01:27:34,000
我觉得也

2642
01:27:34,000 --> 01:27:36,000
你也不难理解

2643
01:27:37,000 --> 01:27:38,000
好 下面要进入一个

2644
01:27:38,000 --> 01:27:39,000
终于我们两个

2645
01:27:39,000 --> 01:27:41,000
都可以共同吐槽的一个

2646
01:27:43,000 --> 01:27:44,000
Python

2647
01:27:44,000 --> 01:27:45,000
也就是你的下一篇

2648
01:27:45,000 --> 01:27:46,000
关照要做的事情

2649
01:27:46,000 --> 01:27:47,000
不要以为你从

2650
01:27:47,000 --> 01:27:49,000
加把里面那个什么

2651
01:27:49,000 --> 01:27:51,000
你走里面

2652
01:27:51,000 --> 01:27:52,000
真拖出来你就爽了

2653
01:27:52,000 --> 01:27:53,000
Python 里面

2654
01:27:53,000 --> 01:27:54,000
坑也不少

2655
01:27:54,000 --> 01:27:55,000
我跟你讲

2656
01:27:55,000 --> 01:27:57,000
刚出龙潭又入虎穴

2657
01:27:58,000 --> 01:27:59,000
Python 这个问题

2658
01:27:59,000 --> 01:28:00,000
其实也是怎么讲

2659
01:28:00,000 --> 01:28:02,000
历史遗留问题比较多

2660
01:28:03,000 --> 01:28:04,000
首先

2661
01:28:04,000 --> 01:28:05,000
这个事情是满缝

2662
01:28:05,000 --> 01:28:06,000
是的

2663
01:28:06,000 --> 01:28:07,000
就是 Python

2664
01:28:07,000 --> 01:28:08,000
我们都知道

2665
01:28:08,000 --> 01:28:09,000
它有一个哲学

2666
01:28:09,000 --> 01:28:10,000
就是

2667
01:28:10,000 --> 01:28:11,000
There is one

2668
01:28:11,000 --> 01:28:12,000
I am hopeful

2669
01:28:12,000 --> 01:28:13,000
You only have one

2670
01:28:13,000 --> 01:28:14,000
Avvious way to do things

2671
01:28:14,000 --> 01:28:15,000
对

2672
01:28:15,000 --> 01:28:17,000
然后一边高唱这个句头号

2673
01:28:17,000 --> 01:28:19,000
一边出了 Python

2674
01:28:19,000 --> 01:28:20,000
然后 Python 3

2675
01:28:20,000 --> 01:28:22,000
然后又有了

2676
01:28:22,000 --> 01:28:25,000
Set up tools 和 Pip

2677
01:28:25,000 --> 01:28:26,000
不止

2678
01:28:26,000 --> 01:28:27,000
还有多着呢

2679
01:28:27,000 --> 01:28:29,000
最开始有 set up tools

2680
01:28:29,000 --> 01:28:31,000
You distill your tails

2681
01:28:31,000 --> 01:28:33,000
You pip

2682
01:28:33,000 --> 01:28:34,000
You build out

2683
01:28:34,000 --> 01:28:35,000
这些是比较老的

2684
01:28:35,000 --> 01:28:36,000
丢到的是啥

2685
01:28:36,000 --> 01:28:37,000
我会给你解释

2686
01:28:37,000 --> 01:28:39,000
这是一个很神奇的存在

2687
01:28:39,000 --> 01:28:40,000
OK

2688
01:28:40,000 --> 01:28:41,000
然后后来有

2689
01:28:41,000 --> 01:28:43,000
后来觉得这个事情玩不下去了

2690
01:28:43,000 --> 01:28:45,000
后来出现那个叫什么

2691
01:28:45,000 --> 01:28:48,000
Distutile R

2692
01:28:48,000 --> 01:28:49,000
OK

2693
01:28:49,000 --> 01:28:50,000
所以你看

2694
01:28:50,000 --> 01:28:51,000
这一个标榜

2695
01:28:51,000 --> 01:28:52,000
这里

2696
01:28:52,000 --> 01:28:53,000
这一个标榜

2697
01:28:53,000 --> 01:28:55,000
只有通常一个正确的方式

2698
01:28:55,000 --> 01:28:57,000
做事的语言

2699
01:28:57,000 --> 01:28:59,000
有着 5,6,7,8 种

2700
01:29:00,000 --> 01:29:01,000
包管理工具

2701
01:29:01,000 --> 01:29:02,000
对

2702
01:29:02,000 --> 01:29:03,000
有着 5,6,7,8

2703
01:29:03,000 --> 01:29:04,000
不同的做事的方式

2704
01:29:04,000 --> 01:29:07,000
而且他们互相之间是不太兼容

2705
01:29:07,000 --> 01:29:08,000
不兼容

2706
01:29:08,000 --> 01:29:11,000
但我觉得这也可能也不能完全怪 Python

2707
01:29:11,000 --> 01:29:13,000
它的设计理念

2708
01:29:13,000 --> 01:29:17,000
并不能保证它所确认的那种方式

2709
01:29:17,000 --> 01:29:19,000
就是大家最喜欢的或者是

2710
01:29:19,000 --> 01:29:22,000
大家最觉得

2711
01:29:22,000 --> 01:29:23,000
与时俱进的方式

2712
01:29:23,000 --> 01:29:24,000
对

2713
01:29:24,000 --> 01:29:25,000
所以其实这就是一个

2714
01:29:25,000 --> 01:29:26,000
跟你讲

2715
01:29:26,000 --> 01:29:27,000
是一个历史遗留的问题

2716
01:29:27,000 --> 01:29:28,000
因为他

2717
01:29:28,000 --> 01:29:29,000
刚才提到那些工具

2718
01:29:29,000 --> 01:29:30,000
他出现的是

2719
01:29:30,000 --> 01:29:31,000
就是他的最开始的版本

2720
01:29:31,000 --> 01:29:33,000
出现都比较早

2721
01:29:33,000 --> 01:29:35,000
其实在过去这么十几年中

2722
01:29:35,000 --> 01:29:36,000
我们对这个

2723
01:29:36,000 --> 01:29:37,000
包管理的很多认识

2724
01:29:37,000 --> 01:29:39,000
包括这个网络技术设施

2725
01:29:39,000 --> 01:29:42,000
其实发生过很大的变化

2726
01:29:42,000 --> 01:29:43,000
但是他那些工具

2727
01:29:43,000 --> 01:29:46,000
就没有太跟得上时代

2728
01:29:46,000 --> 01:29:47,000
你可以这么想

2729
01:29:47,000 --> 01:29:49,000
而且另外一个比较显著的问题

2730
01:29:49,000 --> 01:29:50,000
是说

2731
01:29:50,000 --> 01:29:51,000
因为 Python

2732
01:29:51,000 --> 01:29:53,000
它通常是在 Windex 发行版里面

2733
01:29:53,000 --> 01:29:55,000
作为系统组建之一发行的

2734
01:29:55,000 --> 01:29:58,000
那么对导致一个很严重的问题

2735
01:29:58,000 --> 01:30:00,000
就是如果那个系统发行版

2736
01:30:00,000 --> 01:30:01,000
不升级的话

2737
01:30:01,000 --> 01:30:03,000
那个绑定的 Python 的版本

2738
01:30:03,000 --> 01:30:04,000
也是不升级的

2739
01:30:04,000 --> 01:30:06,000
这样在实际使用的时候

2740
01:30:06,000 --> 01:30:10,000
就会出现一个非常多的

2741
01:30:10,000 --> 01:30:12,000
不同的版本要支持

2742
01:30:12,000 --> 01:30:13,000
互相之间

2743
01:30:13,000 --> 01:30:14,000
不同版本他们之间的建议性

2744
01:30:14,000 --> 01:30:16,000
又是有问题的

2745
01:30:16,000 --> 01:30:18,000
所以在这么一个

2746
01:30:18,000 --> 01:30:20,000
在慢慢强调的历史上和中

2747
01:30:20,000 --> 01:30:21,000
散落下这么多版本

2748
01:30:21,000 --> 01:30:22,000
然后你作为一个

2749
01:30:22,000 --> 01:30:23,000
包管理期的编写者

2750
01:30:23,000 --> 01:30:25,000
你也去很难说

2751
01:30:25,000 --> 01:30:26,000
能够什么

2752
01:30:26,000 --> 01:30:28,000
One thing to fix them all 对吧

2753
01:30:28,000 --> 01:30:29,000
对

2754
01:30:29,000 --> 01:30:31,000
但是这并不能改变

2755
01:30:31,000 --> 01:30:32,000
我们要吐槽它这件事实

2756
01:30:32,000 --> 01:30:34,000
因为它确实就是很糟糕

2757
01:30:34,000 --> 01:30:35,000
对

2758
01:30:35,000 --> 01:30:37,000
它 Python 的这个

2759
01:30:37,000 --> 01:30:38,000
每个 Python

2760
01:30:38,000 --> 01:30:40,000
它自己有一个发行的

2761
01:30:40,000 --> 01:30:42,000
一个渠道

2762
01:30:42,000 --> 01:30:44,000
就是它自己可以官方下载

2763
01:30:44,000 --> 01:30:45,000
但是更多的时候

2764
01:30:45,000 --> 01:30:46,000
我们用的是从系统里面自带的

2765
01:30:46,000 --> 01:30:48,000
它每个系统里面自带的

2766
01:30:48,000 --> 01:30:49,000
就是某一个版本

2767
01:30:49,000 --> 01:30:50,000
它会

2768
01:30:50,000 --> 01:30:51,000
标准库里面

2769
01:30:51,000 --> 01:30:52,000
会有这么一个叫做 setup tools

2770
01:30:52,000 --> 01:30:53,000
对

2771
01:30:53,000 --> 01:30:56,000
然后这个东西的命令行的体现

2772
01:30:56,000 --> 01:30:58,000
应该是叫什么 EZ install 的

2773
01:30:58,000 --> 01:30:59,000
EZ install

2774
01:30:59,000 --> 01:31:01,000
EZ underlying install

2775
01:31:01,000 --> 01:31:02,000
对

2776
01:31:02,000 --> 01:31:04,000
它的问题是

2777
01:31:04,000 --> 01:31:06,000
它只能 install

2778
01:31:06,000 --> 01:31:08,000
不能 uninstall

2779
01:31:10,000 --> 01:31:12,000
你会发现 EZ install

2780
01:31:12,000 --> 01:31:14,000
好简单好方便

2781
01:31:14,000 --> 01:31:15,000
那怎么 EZ uninstall

2782
01:31:15,000 --> 01:31:17,000
好像没有这个命令

2783
01:31:17,000 --> 01:31:19,000
EZ install

2784
01:31:19,000 --> 01:31:21,000
Hot manually uninstall

2785
01:31:21,000 --> 01:31:22,000
对

2786
01:31:22,000 --> 01:31:23,000
对

2787
01:31:23,000 --> 01:31:25,000
你会觉得这个就很奇怪

2788
01:31:25,000 --> 01:31:27,000
你怎么能只进不出呢

2789
01:31:27,000 --> 01:31:29,000
这会导致什么样的透过

2790
01:31:29,000 --> 01:31:31,000
你装完之后没法重来

2791
01:31:31,000 --> 01:31:32,000
没法说装错了

2792
01:31:32,000 --> 01:31:33,000
删掉

2793
01:31:33,000 --> 01:31:34,000
因为它一旦装了之后

2794
01:31:34,000 --> 01:31:35,000
大概整个东西就

2795
01:31:35,000 --> 01:31:37,000
就耐死在你的系统的面目了

2796
01:31:37,000 --> 01:31:38,000
除非你自己挨个

2797
01:31:38,000 --> 01:31:41,000
分析他们安装的脚本的语句

2798
01:31:41,000 --> 01:31:42,000
看原码

2799
01:31:42,000 --> 01:31:43,000
看他到底装到哪里去了

2800
01:31:43,000 --> 01:31:45,000
然后一个一个去手中搞

2801
01:31:45,000 --> 01:31:47,000
就觉得这么变态

2802
01:31:47,000 --> 01:31:48,000
对吧

2803
01:31:48,000 --> 01:31:49,000
对

2804
01:31:49,000 --> 01:31:50,000
它很无辜的告诉你说

2805
01:31:50,000 --> 01:31:51,000
我跟你说了

2806
01:31:51,000 --> 01:31:53,000
我只是负责 EZ install 而已

2807
01:31:53,000 --> 01:31:55,000
只有 EZ install 而已

2808
01:31:55,000 --> 01:31:56,000
对

2809
01:31:56,000 --> 01:31:58,000
感觉就很像中国的很多

2810
01:31:58,000 --> 01:31:59,000
流氓软件

2811
01:31:59,000 --> 01:32:01,000
很方便的装上去

2812
01:32:01,000 --> 01:32:02,000
管杀不管埋

2813
01:32:02,000 --> 01:32:04,000
就什么不叫一件是安装

2814
01:32:04,000 --> 01:32:05,000
你就无件是安装

2815
01:32:05,000 --> 01:32:07,000
你不装他都给你装了

2816
01:32:07,000 --> 01:32:10,000
但是发生装了之后就没法回头了

2817
01:32:12,000 --> 01:32:13,000
对有这么一个问题

2818
01:32:13,000 --> 01:32:14,000
而且它

2819
01:32:14,000 --> 01:32:15,000
而且 EZ install

2820
01:32:15,000 --> 01:32:17,000
它并不支持

2821
01:32:17,000 --> 01:32:19,000
全部的安装

2822
01:32:19,000 --> 01:32:20,000
安装的这个

2823
01:32:20,000 --> 01:32:22,000
你发现装扮机抱错

2824
01:32:22,000 --> 01:32:23,000
装不了

2825
01:32:23,000 --> 01:32:24,000
不支持这个格式

2826
01:32:24,000 --> 01:32:25,000
因为它也是对

2827
01:32:25,000 --> 01:32:27,000
软件包的所有的 layout

2828
01:32:27,000 --> 01:32:28,000
或者这种封装方式

2829
01:32:28,000 --> 01:32:30,000
包括那些文件里面

2830
01:32:30,000 --> 01:32:32,000
要填什么 meta 的信息

2831
01:32:32,000 --> 01:32:33,000
它都是有一些要求的

2832
01:32:33,000 --> 01:32:34,000
但是并不是所有

2833
01:32:34,000 --> 01:32:36,000
因为 4 分 5 列了

2834
01:32:36,000 --> 01:32:38,000
这么一个生态圈的状况

2835
01:32:38,000 --> 01:32:40,000
并不是所有的软件包

2836
01:32:40,000 --> 01:32:42,000
都是觉得要用这个方式来写的

2837
01:32:42,000 --> 01:32:43,000
而且

2838
01:32:43,000 --> 01:32:44,000
据我所知

2839
01:32:44,000 --> 01:32:45,000
应该大部分人都

2840
01:32:45,000 --> 01:32:47,000
不用那个方式来写的

2841
01:32:47,000 --> 01:32:48,000
对

2842
01:32:48,000 --> 01:32:50,000
我记得当年听说

2843
01:32:50,000 --> 01:32:53,000
估计的是什么 Dictator 的时候

2844
01:32:53,000 --> 01:32:54,000
我心里还觉得

2845
01:32:54,000 --> 01:32:55,000
我考一个 Dictator

2846
01:32:55,000 --> 01:32:57,000
难道不会站出来管一管

2847
01:32:57,000 --> 01:32:58,000
这件事情吗

2848
01:32:58,000 --> 01:32:59,000
但

2849
01:32:59,000 --> 01:33:00,000
实际上

2850
01:33:00,000 --> 01:33:01,000
就有一些一个不管事了

2851
01:33:01,000 --> 01:33:02,000
对

2852
01:33:02,000 --> 01:33:03,000
在我们对

2853
01:33:03,000 --> 01:33:04,000
如果对比一下 Python 社区

2854
01:33:04,000 --> 01:33:05,000
和 Ruby 社区的时候

2855
01:33:05,000 --> 01:33:07,000
就会发现 Ruby 的

2856
01:33:07,000 --> 01:33:09,000
虽然我们默默

2857
01:33:09,000 --> 01:33:10,000
鄙视着 Ruby 社区的人

2858
01:33:10,000 --> 01:33:11,000
但是 Ruby 社区

2859
01:33:11,000 --> 01:33:12,000
有一点好

2860
01:33:12,000 --> 01:33:13,000
就是

2861
01:33:13,000 --> 01:33:16,000
当 Mats 说一句

2862
01:33:16,000 --> 01:33:17,000
大家升级到 2.0 吧

2863
01:33:17,000 --> 01:33:19,000
所有人都瞬间 2.0

2864
01:33:19,000 --> 01:33:20,000
而我们现在

2865
01:33:20,000 --> 01:33:21,000
我记得刚刚前几天

2866
01:33:21,000 --> 01:33:22,000
还收到一封邮件

2867
01:33:22,000 --> 01:33:24,000
让我们在投票说

2868
01:33:24,000 --> 01:33:25,000
你就能

2869
01:33:25,000 --> 01:33:27,000
你觉得 Python 3 是一个错误吗

2870
01:33:27,000 --> 01:33:29,000
必然是

2871
01:33:29,000 --> 01:33:31,000
现在的状况来看

2872
01:33:31,000 --> 01:33:32,000
对

2873
01:33:32,000 --> 01:33:33,000
Anyway

2874
01:33:33,000 --> 01:33:34,000
Python 3 本意是好的

2875
01:33:34,000 --> 01:33:35,000
但目前的现状

2876
01:33:35,000 --> 01:33:36,000
毫无疑问是个错误

2877
01:33:36,000 --> 01:33:37,000
是错的

2878
01:33:37,000 --> 01:33:39,000
Python 语言吐槽的地方

2879
01:33:39,000 --> 01:33:40,000
也可以单独在吐槽

2880
01:33:40,000 --> 01:33:41,000
这里是直吐槽

2881
01:33:41,000 --> 01:33:42,000
它的发布工具

2882
01:33:42,000 --> 01:33:43,000
所以这里

2883
01:33:43,000 --> 01:33:44,000
其实也是体现了

2884
01:33:44,000 --> 01:33:45,000
这一个问题

2885
01:33:45,000 --> 01:33:46,000
就是 Python 还有一句口号

2886
01:33:46,000 --> 01:33:48,000
叫做 Batteries Included

2887
01:33:48,000 --> 01:33:49,000
叫什么

2888
01:33:49,000 --> 01:33:50,000
自带电池

2889
01:33:50,000 --> 01:33:51,000
自带电池

2890
01:33:51,000 --> 01:33:53,000
就是它这个标准库里面

2891
01:33:53,000 --> 01:33:54,000
自带了这个 Setup 2

2892
01:33:54,000 --> 01:33:56,000
这么一个标准的安装包

2893
01:33:56,000 --> 01:33:58,000
但是就它的标准库里面

2894
01:33:58,000 --> 01:34:00,000
其他很多 Batteries 一样

2895
01:34:00,000 --> 01:34:01,000
他们都是

2896
01:34:01,000 --> 01:34:02,000
Dead on Arrival

2897
01:34:02,000 --> 01:34:03,000
已经至少是

2898
01:34:03,000 --> 01:34:04,000
五年旧的电池了

2899
01:34:04,000 --> 01:34:05,000
而且装进去的时候

2900
01:34:05,000 --> 01:34:06,000
根本没有装进去

2901
01:34:06,000 --> 01:34:07,000
直接没电

2902
01:34:07,000 --> 01:34:08,000
装进去的时候

2903
01:34:08,000 --> 01:34:09,000
根本没有做

2904
01:34:09,000 --> 01:34:11,000
做这个绝缘

2905
01:34:11,000 --> 01:34:12,000
导致你

2906
01:34:12,000 --> 01:34:13,000
拿到机器拆开之后

2907
01:34:13,000 --> 01:34:15,000
发现电池已经

2908
01:34:15,000 --> 01:34:16,000
烂在里面了

2909
01:34:16,000 --> 01:34:17,000
那个电池

2910
01:34:17,000 --> 01:34:19,000
电降机跑出来的感觉

2911
01:34:20,000 --> 01:34:21,000
对 就是他们

2912
01:34:21,000 --> 01:34:22,000
带了一个很烂的工具

2913
01:34:22,000 --> 01:34:23,000
然后没法用

2914
01:34:23,000 --> 01:34:24,000
然后来有人想办法

2915
01:34:24,000 --> 01:34:26,000
那我们再解决吧

2916
01:34:26,000 --> 01:34:28,000
后来就出了这个什么

2917
01:34:28,000 --> 01:34:29,000
我们这么说

2918
01:34:29,000 --> 01:34:30,000
我这么说其实不对

2919
01:34:30,000 --> 01:34:31,000
但是为了把这个故事

2920
01:34:31,000 --> 01:34:32,000
讲下去就这么说吧

2921
01:34:32,000 --> 01:34:33,000
后来就出了

2922
01:34:33,000 --> 01:34:35,000
我们 Disk 2 Till 这么一个工具

2923
01:34:35,000 --> 01:34:37,000
说是图解决 Setup 2 s 的

2924
01:34:37,000 --> 01:34:39,000
各种问题

2925
01:34:39,000 --> 01:34:41,000
但其实后来也发现

2926
01:34:41,000 --> 01:34:42,000
也没解决掉

2927
01:34:42,000 --> 01:34:44,000
然后又多了这么一个

2928
01:34:44,000 --> 01:34:45,000
就是碎片

2929
01:34:45,000 --> 01:34:46,000
又把多了一个工具

2930
01:34:46,000 --> 01:34:47,000
要支持

2931
01:34:47,000 --> 01:34:48,000
然后也

2932
01:34:48,000 --> 01:34:49,000
然后 Disk 2 Till

2933
01:34:49,000 --> 01:34:50,000
也不是特别友好

2934
01:34:50,000 --> 01:34:51,000
我觉得

2935
01:34:51,000 --> 01:34:52,000
我印象

2936
01:34:52,000 --> 01:34:53,000
我几乎从来没有

2937
01:34:53,000 --> 01:34:55,000
怎么用过 Disk 2 Till

2938
01:34:55,000 --> 01:34:56,000
Trust me

2939
01:34:56,000 --> 01:34:57,000
你肯定用过

2940
01:34:57,000 --> 01:34:58,000
只是你不知道而已

2941
01:34:58,000 --> 01:34:59,000
他 3 号

2942
01:34:59,000 --> 01:35:00,000
应该和 Setup 2

2943
01:35:00,000 --> 01:35:01,000
有点这种

2944
01:35:01,000 --> 01:35:02,000
扯无清到文明的关系

2945
01:35:02,000 --> 01:35:03,000
最新的说法是

2946
01:35:03,000 --> 01:35:05,000
这两个东西要融合了

2947
01:35:05,000 --> 01:35:07,000
就在

2948
01:35:07,000 --> 01:35:08,000
就在催生出

2949
01:35:08,000 --> 01:35:10,000
第三个怪胎来是吗

2950
01:35:10,000 --> 01:35:11,000
对 就是因为他们

2951
01:35:11,000 --> 01:35:12,000
就是 Setup 2 s 那帮人

2952
01:35:12,000 --> 01:35:13,000
和 Disk 2 Till 这帮人

2953
01:35:13,000 --> 01:35:14,000
开发的

2954
01:35:14,000 --> 01:35:15,000
后来发现

2955
01:35:15,000 --> 01:35:16,000
不行

2956
01:35:16,000 --> 01:35:17,000
我们各自为准

2957
01:35:17,000 --> 01:35:19,000
搞一套新版本

2958
01:35:19,000 --> 01:35:20,000
首先和自己过去不见容

2959
01:35:20,000 --> 01:35:21,000
然后和对方不见容

2960
01:35:21,000 --> 01:35:22,000
本本就 2 变 4 了

2961
01:35:22,000 --> 01:35:23,000
对吧

2962
01:35:23,000 --> 01:35:24,000
这就很沮丧

2963
01:35:24,000 --> 01:35:25,000
所以后来他们说

2964
01:35:25,000 --> 01:35:26,000
算了

2965
01:35:26,000 --> 01:35:28,000
我们还是合作一把

2966
01:35:28,000 --> 01:35:29,000
所以以后的

2967
01:35:29,000 --> 01:35:30,000
什么 Disk 2 Till 2

2968
01:35:30,000 --> 01:35:32,000
和 Setup 2 s 的下一个版本

2969
01:35:32,000 --> 01:35:34,000
应该是融合在一起的

2970
01:35:34,000 --> 01:35:35,000
然后具体叫什么

2971
01:35:35,000 --> 01:35:36,000
我现在已经不知道了

2972
01:35:36,000 --> 01:35:37,000
已经

2973
01:35:37,000 --> 01:35:38,000
我已经放弃理解他们的行为了

2974
01:35:38,000 --> 01:35:39,000
我已经

2975
01:35:39,000 --> 01:35:41,000
Beyond my comprehension

2976
01:35:41,000 --> 01:35:42,000
OK

2977
01:35:42,000 --> 01:35:44,000
但是那个美好的局面

2978
01:35:44,000 --> 01:35:45,000
还没有出现

2979
01:35:45,000 --> 01:35:46,000
就是

2980
01:35:46,000 --> 01:35:47,000
我现在还是

2981
01:35:47,000 --> 01:35:48,000
一个挺厉害的局面

2982
01:35:48,000 --> 01:35:50,000
然后后来也有人受不了了

2983
01:35:50,000 --> 01:35:52,000
就是出现了一个大牛

2984
01:35:52,000 --> 01:35:53,000
名字忘了

2985
01:35:53,000 --> 01:35:55,000
当然写了这个叫 PEEP 的

2986
01:35:55,000 --> 01:35:56,000
这个工具 PIP

2987
01:35:57,000 --> 01:35:59,000
对 其实你刚才说

2988
01:35:59,000 --> 01:36:01,000
我们要一起吐槽 Python

2989
01:36:01,000 --> 01:36:02,000
我心里默默的低过一句

2990
01:36:02,000 --> 01:36:04,000
我现在其实不需要怎么吐槽 Python

2991
01:36:04,000 --> 01:36:05,000
我已经放弃了

2992
01:36:05,000 --> 01:36:06,000
PayFOR 的部分

2993
01:36:06,000 --> 01:36:08,000
PayFOR 的部分就默默绕过了

2994
01:36:08,000 --> 01:36:11,000
比如说我会用 Python

2995
01:36:11,000 --> 01:36:14,000
PythonZ 装好几个版本的 Python

2996
01:36:14,000 --> 01:36:18,000
然后每次跑什么东西的时候

2997
01:36:18,000 --> 01:36:20,000
就选择一个 Python

2998
01:36:20,000 --> 01:36:22,000
然后再如果需要什么 Python

2999
01:36:22,000 --> 01:36:24,000
PythonPython 在那个

3000
01:36:24,000 --> 01:36:27,000
在该版本的 Python 之下

3001
01:36:27,000 --> 01:36:30,000
只供该版本的 Python 使用的 Python

3002
01:36:30,000 --> 01:36:31,000
你是重要吧

3003
01:36:31,000 --> 01:36:33,000
好像也没有什么太痛苦的部分

3004
01:36:33,000 --> 01:36:35,000
那你肯定是装的还不够多

3005
01:36:35,000 --> 01:36:36,000
总会装多了

3006
01:36:36,000 --> 01:36:37,000
总会遇到坑的

3007
01:36:37,000 --> 01:36:38,000
这个是一定的

3008
01:36:38,000 --> 01:36:40,000
因为这个当年

3009
01:36:40,000 --> 01:36:42,000
之前我前几年在直播

3010
01:36:42,000 --> 01:36:43,000
还工作的时候

3011
01:36:43,000 --> 01:36:45,000
就有遇到这个比较令人沮丧的状况

3012
01:36:45,000 --> 01:36:48,000
因为我们用了 Python 的包比较多

3013
01:36:48,000 --> 01:36:49,000
比较杂

3014
01:36:49,000 --> 01:36:51,000
然后确实挺痛苦的

3015
01:36:51,000 --> 01:36:53,000
一定是我还没有遇到企业级

3016
01:36:53,000 --> 01:36:57,000
我还没有进入到企业级 Python 的世界

3017
01:36:57,000 --> 01:36:58,000
对

3018
01:36:58,000 --> 01:37:00,000
不过我的解决方案比你更加绝绝

3019
01:37:00,000 --> 01:37:02,000
首先我现在已经不在直播了

3020
01:37:02,000 --> 01:37:04,000
已经立志好久了

3021
01:37:04,000 --> 01:37:08,000
然后另外我也不再写 Python 相关的东西了

3022
01:37:08,000 --> 01:37:11,000
就全面转向 Go 和 Note 的

3023
01:37:11,000 --> 01:37:12,000
OK

3024
01:37:12,000 --> 01:37:13,000
就直接避免了这些问题

3025
01:37:13,000 --> 01:37:17,000
你现在在搞学术的时候用的是什么工具

3026
01:37:17,000 --> 01:37:22,000
我的 Note 你敢信吗

3027
01:37:22,000 --> 01:37:23,000
Note

3028
01:37:23,000 --> 01:37:24,000
Demo 的

3029
01:37:24,000 --> 01:37:25,000
Seriously

3030
01:37:25,000 --> 01:37:26,000
因为要做一个 demo

3031
01:37:26,000 --> 01:37:27,000
然后这个东西

3032
01:37:27,000 --> 01:37:30,000
这个场景比较适合在浏览器里面搞

3033
01:37:30,000 --> 01:37:31,000
OK

3034
01:37:31,000 --> 01:37:32,000
所以就 JavaScript

3035
01:37:32,000 --> 01:37:35,000
然后必然就跟 Note 的车不叫关系了

3036
01:37:35,000 --> 01:37:37,000
这个就最后再说

3037
01:37:37,000 --> 01:37:39,000
现在接着说回 Python 这个东西

3038
01:37:39,000 --> 01:37:41,000
就有人也受不了那种各种四分五裂局面

3039
01:37:41,000 --> 01:37:42,000
他又搞出一个

3040
01:37:42,000 --> 01:37:44,000
又不叫

3041
01:37:44,000 --> 01:37:46,000
大部分情况下兼容

3042
01:37:46,000 --> 01:37:50,000
只有小问什么不兼容的工具叫 PIP

3043
01:37:50,000 --> 01:37:52,000
叫 Python PIP

3044
01:37:52,000 --> 01:37:53,000
PIP 吧

3045
01:37:53,000 --> 01:37:54,000
我一般念 PIP

3046
01:37:54,000 --> 01:37:58,000
他的好处就是他支持 Uninstall

3047
01:37:58,000 --> 01:37:59,000
Yay

3048
01:37:59,000 --> 01:38:01,000
这是非常

3049
01:38:01,000 --> 01:38:05,000
一个包括那期终于加入的一个 Uninstall 的功能也好

3050
01:38:05,000 --> 01:38:09,000
这听起来有点奇怪

3051
01:38:09,000 --> 01:38:11,000
对 为什么好像有点

3052
01:38:11,000 --> 01:38:12,000
难道不是

3053
01:38:12,000 --> 01:38:13,000
很潮热

3054
01:38:13,000 --> 01:38:17,000
对 普通用户用用了十几年的功能

3055
01:38:17,000 --> 01:38:18,000
PIP 有什么好呢

3056
01:38:18,000 --> 01:38:22,000
他首先支持这个卸载

3057
01:38:22,000 --> 01:38:24,000
这个是很大的一个进步

3058
01:38:24,000 --> 01:38:25,000
然后第二个我觉得比较重要的

3059
01:38:25,000 --> 01:38:29,000
他支持一个所谓的版本冻结

3060
01:38:29,000 --> 01:38:31,000
对 就是 PIP phrase

3061
01:38:31,000 --> 01:38:33,000
对 你可以装好一堆包之后

3062
01:38:33,000 --> 01:38:34,000
你可以说好

3063
01:38:34,000 --> 01:38:36,000
我这个什么

3064
01:38:36,000 --> 01:38:38,000
我这个什么开发环境

3065
01:38:38,000 --> 01:38:39,000
好了

3066
01:38:39,000 --> 01:38:41,000
看一下有什么版本的包我实际上

3067
01:38:41,000 --> 01:38:42,000
PIP phrase 一下

3068
01:38:42,000 --> 01:38:44,000
然后反回一个列表

3069
01:38:44,000 --> 01:38:47,000
说你当前装了哪些 Python 的包

3070
01:38:47,000 --> 01:38:51,000
然后那个包是哪些版本对吧

3071
01:38:51,000 --> 01:38:52,000
你申请一个列表

3072
01:38:52,000 --> 01:38:54,000
下次你再用那个列表

3073
01:38:54,000 --> 01:38:55,000
然后再装一遍

3074
01:38:55,000 --> 01:38:56,000
他就会按照那个列表

3075
01:38:56,000 --> 01:38:59,000
一行一行的去给你装对应的版本就好了

3076
01:38:59,000 --> 01:39:01,000
就 hopefully it works

3077
01:39:01,000 --> 01:39:04,000
对 而且我有限的 Hobby

3078
01:39:04,000 --> 01:39:07,000
经验来看基本上 99%的时间

3079
01:39:07,000 --> 01:39:08,000
他是 works

3080
01:39:08,000 --> 01:39:10,000
对 但是这也是因为你在国外

3081
01:39:10,000 --> 01:39:12,000
你不知道中国人民的痛苦

3082
01:39:14,000 --> 01:39:16,000
可是我听说贵网站

3083
01:39:16,000 --> 01:39:21,000
现在是机密那种听众情物互相泄露

3084
01:39:21,000 --> 01:39:26,000
贵站难道不是内部直接 VPN 翻墙了吗

3085
01:39:26,000 --> 01:39:27,000
但是你知道

3086
01:39:27,000 --> 01:39:28,000
即便是这样翻墙

3087
01:39:28,000 --> 01:39:30,000
网络也是不稳定的

3088
01:39:30,000 --> 01:39:34,000
就是你如果用到东西说网络的话

3089
01:39:34,000 --> 01:39:35,000
你首先要假释一点

3090
01:39:35,000 --> 01:39:37,000
网络是可以随时断掉的

3091
01:39:37,000 --> 01:39:40,000
他肯定会在你最不希望他断掉的时间断掉

3092
01:39:40,000 --> 01:39:41,000
OK 莫非定律

3093
01:39:41,000 --> 01:39:43,000
对 基本上是这样

3094
01:39:43,000 --> 01:39:45,000
如果你一旦做了什么企业的运为

3095
01:39:45,000 --> 01:39:48,000
之后你发现这个事情是一定成立的

3096
01:39:48,000 --> 01:39:53,000
对 其实这就是有一次 Maven 导致我们

3097
01:39:53,000 --> 01:39:55,000
发布推迟的原因之一

3098
01:39:55,000 --> 01:39:57,000
就是我们 Nexus 挂掉了

3099
01:39:57,000 --> 01:40:00,000
不是联不上网络而是 Nexus 挂掉了

3100
01:40:00,000 --> 01:40:04,000
Nexus 是 Maven 这一套系统里面的一个

3101
01:40:04,000 --> 01:40:07,000
或者说支持 Maven 系统很重要的一个特征

3102
01:40:07,000 --> 01:40:12,000
就是你可以自定义一个包管理服务器

3103
01:40:12,000 --> 01:40:17,000
然后把你写好的软件作为一个

3104
01:40:17,000 --> 01:40:22,000
圆挂在包管理服务器上

3105
01:40:22,000 --> 01:40:25,000
然后当你在发布新的软件的时候

3106
01:40:25,000 --> 01:40:27,000
你已经做好那些组件可以

3107
01:40:27,000 --> 01:40:30,000
就像从其他任何圆一样

3108
01:40:30,000 --> 01:40:33,000
从你自己的服务器上面下载下来

3109
01:40:33,000 --> 01:40:36,000
然后成为发布好的系统人员的一部分

3110
01:40:36,000 --> 01:40:38,000
但是如果这个服务器挂掉了

3111
01:40:38,000 --> 01:40:41,000
那也就意味着整个发布过程将无法进行

3112
01:40:41,000 --> 01:40:44,000
然后有一次我们的 Nexus 服务器就挂掉了

3113
01:40:44,000 --> 01:40:46,000
所以你们这些是有什么 Single Point Failure

3114
01:40:46,000 --> 01:40:47,000
单点失败了

3115
01:40:47,000 --> 01:40:51,000
对 把所有的基站放在一个篮子里是

3116
01:40:51,000 --> 01:40:53,000
非常愚蠢的一件事

3117
01:40:53,000 --> 01:40:56,000
但对 当然

3118
01:40:56,000 --> 01:40:59,000
对 但其实刚才讲的

3119
01:40:59,000 --> 01:41:02,000
I don't blame me

3120
01:41:02,000 --> 01:41:05,000
刚才讲的那些就是拍照那三个

3121
01:41:05,000 --> 01:41:07,000
三大工具吧都是

3122
01:41:07,000 --> 01:41:11,000
他们都一来一同样一个东西叫做 PYPI

3123
01:41:11,000 --> 01:41:13,000
叫 PyPI

3124
01:41:13,000 --> 01:41:15,000
PyPI index

3125
01:41:15,000 --> 01:41:17,000
对 PyPI index

3126
01:41:17,000 --> 01:41:19,000
我不知道到 PyPI 叫 PyPI

3127
01:41:19,000 --> 01:41:20,000
我就叫 PyPI 吧

3128
01:41:20,000 --> 01:41:21,000
PyPI 吧

3129
01:41:21,000 --> 01:41:23,000
因为 PyPI 是另外一个东西

3130
01:41:23,000 --> 01:41:24,000
对

3131
01:41:24,000 --> 01:41:26,000
好 这里就不说

3132
01:41:26,000 --> 01:41:28,000
先讲的一个 PyPI 吧

3133
01:41:28,000 --> 01:41:30,000
PyPI 是一个什么

3134
01:41:30,000 --> 01:41:32,000
就是它是一个 Python

3135
01:41:32,000 --> 01:41:34,000
这个 Foundation

3136
01:41:34,000 --> 01:41:36,000
Python Software Foundation

3137
01:41:36,000 --> 01:41:38,000
维护的一个重要服务器

3138
01:41:38,000 --> 01:41:39,000
就是你们 Nexus 差不多

3139
01:41:39,000 --> 01:41:41,000
但是它是通过网络访问的

3140
01:41:41,000 --> 01:41:43,000
然后你每次 PyPI install

3141
01:41:43,000 --> 01:41:45,000
或者是什么 Easy install 的时候

3142
01:41:45,000 --> 01:41:48,000
它都要去那里去下载

3143
01:41:48,000 --> 01:41:50,000
搜一遍你那个要多长的名字

3144
01:41:50,000 --> 01:41:52,000
然后在哪里找到那个位置去下载回来

3145
01:41:52,000 --> 01:41:53,000
不知道

3146
01:41:53,000 --> 01:41:55,000
它应该是传到哪里服务器上

3147
01:41:55,000 --> 01:41:56,000
就下载回来

3148
01:41:56,000 --> 01:41:58,000
它有一个 FTP 服务器 你可以这么想

3149
01:41:59,000 --> 01:42:01,000
然后它经常挂掉

3150
01:42:02,000 --> 01:42:03,000
ok

3151
01:42:03,000 --> 01:42:07,000
它挂掉的概率之频繁

3152
01:42:07,000 --> 01:42:09,000
令我唐慕结实

3153
01:42:09,000 --> 01:42:12,000
是在你们公司挂掉

3154
01:42:12,000 --> 01:42:14,000
在你从你们公司访问的时候挂掉

3155
01:42:14,000 --> 01:42:16,000
不不不 它自己就挂掉了

3156
01:42:16,000 --> 01:42:17,000
所有人都不能访问

3157
01:42:17,000 --> 01:42:18,000
what

3158
01:42:18,000 --> 01:42:19,000
等等

3159
01:42:19,000 --> 01:42:21,000
前几年的时候这个事情超级严重

3160
01:42:21,000 --> 01:42:22,000
ok

3161
01:42:22,000 --> 01:42:24,000
也是因为就两个原因

3162
01:42:24,000 --> 01:42:25,000
它自己印象挂掉

3163
01:42:25,000 --> 01:42:27,000
一个是我们访问它的网络的情况

3164
01:42:27,000 --> 01:42:28,000
它经常挂掉

3165
01:42:28,000 --> 01:42:30,000
你知道有段时间 Python 到 org

3166
01:42:30,000 --> 01:42:31,000
到 con

3167
01:42:31,000 --> 01:42:32,000
到 org

3168
01:42:32,000 --> 01:42:34,000
这个网站是被封掉了吗

3169
01:42:34,000 --> 01:42:35,000
对

3170
01:42:35,000 --> 01:42:36,000
现在也是被封掉

3171
01:42:36,000 --> 01:42:37,000
不然它为什么要再

3172
01:42:37,000 --> 01:42:38,000
加个中文

3173
01:42:38,000 --> 01:42:41,000
首页上出现中文的下载

3174
01:42:41,000 --> 01:42:43,000
这就不是你们觉得很奇怪吗

3175
01:42:43,000 --> 01:42:44,000
你都被封掉了

3176
01:42:44,000 --> 01:42:46,000
你出现中文也有什么用

3177
01:42:46,000 --> 01:42:48,000
这是 PyroD

3178
01:42:48,000 --> 01:42:49,000
它故意

3179
01:42:49,000 --> 01:42:52,000
我觉得这就是它一个技术

3180
01:42:52,000 --> 01:42:54,000
从一个技术社区来表达

3181
01:42:54,000 --> 01:42:57,000
对于某些政府行为的微弱的反抗

3182
01:42:57,000 --> 01:42:58,000
whatever

3183
01:42:58,000 --> 01:42:59,000
对

3184
01:42:59,000 --> 01:43:00,000
这个就不做到

3185
01:43:00,000 --> 01:43:01,000
秀不姿态吗

3186
01:43:01,000 --> 01:43:03,000
反正就是双重原因

3187
01:43:03,000 --> 01:43:05,000
它自己本身也不是很稳定

3188
01:43:05,000 --> 01:43:07,000
它自己的 availability 也不是很高

3189
01:43:07,000 --> 01:43:08,000
加上网络的原因

3190
01:43:08,000 --> 01:43:10,000
导致我们经常仿佬不了它

3191
01:43:10,000 --> 01:43:15,000
所以大部分用 Python 做生产的公司

3192
01:43:15,000 --> 01:43:16,000
也好团队

3193
01:43:16,000 --> 01:43:18,000
基本上都自己在本内部局网

3194
01:43:18,000 --> 01:43:20,000
维护了一个拍拍的镜像

3195
01:43:20,000 --> 01:43:21,000
ok

3196
01:43:21,000 --> 01:43:22,000
简单的就是把拍拍

3197
01:43:22,000 --> 01:43:23,000
太大吗

3198
01:43:23,000 --> 01:43:25,000
你不一定需要全部的

3199
01:43:25,000 --> 01:43:27,000
你只需要常用的那些

3200
01:43:27,000 --> 01:43:28,000
ok

3201
01:43:28,000 --> 01:43:29,000
可是你怎么知道那些常用

3202
01:43:29,000 --> 01:43:30,000
它是这种

3203
01:43:30,000 --> 01:43:31,000
它有一种

3204
01:43:31,000 --> 01:43:32,000
这个做得还比较不错

3205
01:43:32,000 --> 01:43:33,000
就是有这个

3206
01:43:33,000 --> 01:43:34,000
就因为拍拍拍

3207
01:43:34,000 --> 01:43:35,000
拍屁经常挂掉

3208
01:43:35,000 --> 01:43:37,000
所以有人写出这种工具

3209
01:43:37,000 --> 01:43:38,000
可以很方便的

3210
01:43:38,000 --> 01:43:41,000
让你在自己的服务器上架设一个镜像

3211
01:43:41,000 --> 01:43:43,000
然后这个镜像可以说

3212
01:43:43,000 --> 01:43:44,000
就代理

3213
01:43:44,000 --> 01:43:45,000
就是你设置一下

3214
01:43:45,000 --> 01:43:46,000
你装的时候

3215
01:43:46,000 --> 01:43:49,000
它会先去这个镜像服务器上找

3216
01:43:49,000 --> 01:43:50,000
如果它找不到

3217
01:43:50,000 --> 01:43:51,000
它这个镜像

3218
01:43:51,000 --> 01:43:53,000
服务器去拍屁的官方

3219
01:43:53,000 --> 01:43:54,000
去把那个抓的回镜像服务器

3220
01:43:54,000 --> 01:43:55,000
这样下次的话

3221
01:43:55,000 --> 01:43:57,000
你就在那个镜像服务器上有了

3222
01:43:57,000 --> 01:43:58,000
嘛

3223
01:43:58,000 --> 01:44:00,000
就是人也是一个缓存代理的意思

3224
01:44:00,000 --> 01:44:01,000
对

3225
01:44:01,000 --> 01:44:02,000
对

3226
01:44:02,000 --> 01:44:04,000
就是就到了这种纯度了

3227
01:44:04,000 --> 01:44:05,000
但是不不过

3228
01:44:05,000 --> 01:44:06,000
从这个可用下角来讲

3229
01:44:06,000 --> 01:44:08,000
你有一个本地的这个

3230
01:44:08,000 --> 01:44:10,000
经向也是好的

3231
01:44:10,000 --> 01:44:11,000
就可以避免网络

3232
01:44:11,000 --> 01:44:13,000
和你们遇到的那种情况

3233
01:44:13,000 --> 01:44:14,000
单点失败嘛

3234
01:44:14,000 --> 01:44:15,000
嗯哼

3235
01:44:15,000 --> 01:44:16,000
ok

3236
01:44:16,000 --> 01:44:17,000
但是

3237
01:44:17,000 --> 01:44:19,000
事情还是没有结束

3238
01:44:19,000 --> 01:44:20,000
为什么呢

3239
01:44:20,000 --> 01:44:22,000
因为不管是

3240
01:44:22,000 --> 01:44:23,000
easy install 也好

3241
01:44:23,000 --> 01:44:24,000
disk

3242
01:44:24,000 --> 01:44:25,000
utl 也好

3243
01:44:25,000 --> 01:44:26,000
peep

3244
01:44:26,000 --> 01:44:27,000
peep 也好

3245
01:44:27,000 --> 01:44:30,000
他们基本上不能安装

3246
01:44:30,000 --> 01:44:33,000
非纯 Python 的包

3247
01:44:34,000 --> 01:44:35,000
Python 做的

3248
01:44:35,000 --> 01:44:36,000
Python 做的一个

3249
01:44:36,000 --> 01:44:38,000
这个多少有点强人

3250
01:44:38,000 --> 01:44:39,000
说难了说实话呢

3251
01:44:39,000 --> 01:44:40,000
拜拜

3252
01:44:40,000 --> 01:44:41,000
这个就要解释为什么

3253
01:44:41,000 --> 01:44:42,000
要为什么要发出

3254
01:44:42,000 --> 01:44:43,000
出现这种一个应用场景

3255
01:44:43,000 --> 01:44:44,000
还要说

3256
01:44:44,000 --> 01:44:46,000
首先是因为 Python 语言本身

3257
01:44:46,000 --> 01:44:48,000
是一个比较归宿的语言

3258
01:44:48,000 --> 01:44:50,000
它是一个解释型

3259
01:44:50,000 --> 01:44:52,000
不带 GIT 的

3260
01:44:52,000 --> 01:44:53,000
语言

3261
01:44:53,000 --> 01:44:54,000
大部分是这样的

3262
01:44:54,000 --> 01:44:55,000
或者说它是

3263
01:44:55,000 --> 01:44:57,000
它 GIT 支持的

3264
01:44:57,000 --> 01:44:58,000
特征还不够全面

3265
01:44:58,000 --> 01:44:59,000
对 简单来说就是慢

3266
01:44:59,000 --> 01:45:02,000
那么导致它做很多事情的时候

3267
01:45:02,000 --> 01:45:03,000
就不能

3268
01:45:03,000 --> 01:45:04,000
都需要 native planning

3269
01:45:04,000 --> 01:45:06,000
对 不能用原生的 Python 的

3270
01:45:06,000 --> 01:45:07,000
这个代码来实现

3271
01:45:07,000 --> 01:45:08,000
要用这个

3272
01:45:08,000 --> 01:45:10,000
用 C 或者 C 架来实现

3273
01:45:10,000 --> 01:45:12,000
然后通过一个

3274
01:45:12,000 --> 01:45:13,000
这种什么

3275
01:45:13,000 --> 01:45:14,000
bridge 的方式

3276
01:45:14,000 --> 01:45:16,000
再通过 Python 去调用它

3277
01:45:16,000 --> 01:45:18,000
比如说最常见的两个

3278
01:45:18,000 --> 01:45:20,000
这种例子是一个叫做

3279
01:45:20,000 --> 01:45:22,000
Numerical Pi

3280
01:45:22,000 --> 01:45:23,000
Numerical Pi

3281
01:45:23,000 --> 01:45:25,000
是做数值计算的

3282
01:45:25,000 --> 01:45:26,000
比如说什么

3283
01:45:26,000 --> 01:45:27,000
举证运算

3284
01:45:27,000 --> 01:45:31,000
另外一个叫做 Python Image Library

3285
01:45:31,000 --> 01:45:32,000
然后这个是干嘛

3286
01:45:32,000 --> 01:45:34,000
就处理图像的

3287
01:45:34,000 --> 01:45:35,000
就处理图像

3288
01:45:35,000 --> 01:45:37,000
其实用图还蛮多的

3289
01:45:37,000 --> 01:45:38,000
比如说你做一个

3290
01:45:38,000 --> 01:45:39,000
塑膠网站

3291
01:45:39,000 --> 01:45:41,000
你要用传个头像上来的时候

3292
01:45:41,000 --> 01:45:42,000
你得想办法检查一下

3293
01:45:42,000 --> 01:45:44,000
压缩一下 对吧

3294
01:45:44,000 --> 01:45:47,000
你要用 Python Image Library

3295
01:45:47,000 --> 01:45:48,000
Python 说实话

3296
01:45:48,000 --> 01:45:49,000
已经好像

3297
01:45:49,000 --> 01:45:51,000
曾经非常喜欢它

3298
01:45:51,000 --> 01:45:53,000
但是现在好像已经有一阵子

3299
01:45:53,000 --> 01:45:54,000
从来没有用过的

3300
01:45:54,000 --> 01:45:55,000
爱不起来了是吧

3301
01:45:55,000 --> 01:45:57,000
对 我理解你

3302
01:45:57,000 --> 01:45:58,000
那么 Python 也是

3303
01:45:58,000 --> 01:45:59,000
其实有一阵子

3304
01:45:59,000 --> 01:46:02,000
我非常痴迷于在 Mac 上面

3305
01:46:02,000 --> 01:46:05,000
时刻保持一个 iPython

3306
01:46:05,000 --> 01:46:08,000
iPython 的 QT 版本的 console 在跑

3307
01:46:08,000 --> 01:46:11,000
因为 QT 你会以

3308
01:46:11,000 --> 01:46:13,000
内联显示很多很酷

3309
01:46:13,000 --> 01:46:15,000
有点像 Mathematica

3310
01:46:15,000 --> 01:46:18,000
或者是 Maple 的那种感觉

3311
01:46:18,000 --> 01:46:21,000
就是你潇洒的写下几行代码

3312
01:46:21,000 --> 01:46:23,000
真正的科学计算环境

3313
01:46:23,000 --> 01:46:25,000
对 冒出一个图表来

3314
01:46:25,000 --> 01:46:27,000
我当时有这个非常痴迷

3315
01:46:27,000 --> 01:46:29,000
一定要保持我 Mac 上面跑

3316
01:46:29,000 --> 01:46:30,000
这这么一个东西

3317
01:46:30,000 --> 01:46:31,000
其实现在也很多人这么用

3318
01:46:31,000 --> 01:46:32,000
它现在 iPython

3319
01:46:32,000 --> 01:46:34,000
出了一个叫做 Nobok

3320
01:46:34,000 --> 01:46:37,000
对 其实 Python Notepo

3321
01:46:37,000 --> 01:46:38,000
是网页版的

3322
01:46:38,000 --> 01:46:39,000
但我就痴迷于

3323
01:46:39,000 --> 01:46:40,000
一定要有一个

3324
01:46:40,000 --> 01:46:42,000
原生的图形界面的这么一个东西

3325
01:46:42,000 --> 01:46:43,000
它不就是为了解决

3326
01:46:43,000 --> 01:46:44,000
这个跨平台的问题吗

3327
01:46:44,000 --> 01:46:47,000
看起来非常高大上的主要是

3328
01:46:47,000 --> 01:46:48,000
简单一点

3329
01:46:48,000 --> 01:46:49,000
但是后来对

3330
01:46:49,000 --> 01:46:50,000
但是后来我

3331
01:46:50,000 --> 01:46:53,000
因为我在 GitHub 上面

3332
01:46:53,000 --> 01:46:56,000
维护了一个小 note

3333
01:46:56,000 --> 01:46:59,000
就是怎样解决一些安装

3334
01:46:59,000 --> 01:47:01,000
一台新 Mac 的时候

3335
01:47:01,000 --> 01:47:03,000
需要面对的小问题

3336
01:47:03,000 --> 01:47:05,000
然后我写在这个

3337
01:47:05,000 --> 01:47:11,000
我在 iPythonQT 版本的

3338
01:47:11,000 --> 01:47:12,000
这一段 note 里面

3339
01:47:12,000 --> 01:47:14,000
轻重地答应了新写

3340
01:47:14,000 --> 01:47:15,000
然后最后

3341
01:47:15,000 --> 01:47:16,000
最后最后的时候

3342
01:47:16,000 --> 01:47:18,000
我绝望在里面写说

3343
01:47:18,000 --> 01:47:21,000
这一切都需要太多努力了

3344
01:47:21,000 --> 01:47:23,000
还是直接

3345
01:47:23,000 --> 01:47:24,000
给它

3346
01:47:24,000 --> 01:47:27,000
用 iPython Notepo

3347
01:47:27,000 --> 01:47:28,000
是这样

3348
01:47:29,000 --> 01:47:31,000
好吧 明白了

3349
01:47:31,000 --> 01:47:33,000
就说回来这个好东西

3350
01:47:33,000 --> 01:47:34,000
就是说前面的几个工具

3351
01:47:34,000 --> 01:47:35,000
Setup Tool

3352
01:47:35,000 --> 01:47:36,000
Discount Tool

3353
01:47:36,000 --> 01:47:37,000
还有 Pipto

3354
01:47:37,000 --> 01:47:38,000
都不能解决

3355
01:47:38,000 --> 01:47:39,000
不能很好的解决

3356
01:47:39,000 --> 01:47:40,000
带有这种 C Binding

3357
01:47:40,000 --> 01:47:42,000
或者其他语言

3358
01:47:42,000 --> 01:47:44,000
Python 的包的安装

3359
01:47:44,000 --> 01:47:47,000
这个时候你有两种方案

3360
01:47:47,000 --> 01:47:48,000
就是像 Python Image Library

3361
01:47:48,000 --> 01:47:50,000
这种巨无霸的

3362
01:47:50,000 --> 01:47:51,000
因为它很大

3363
01:47:51,000 --> 01:47:52,000
这种巨无霸的

3364
01:47:52,000 --> 01:47:53,000
它通常给你

3365
01:47:53,000 --> 01:47:55,000
提供一个官方的安装包

3366
01:47:55,000 --> 01:47:56,000
当然你就装上

3367
01:47:56,000 --> 01:47:57,000
你就用官方安装包

3368
01:47:57,000 --> 01:47:58,000
通常是一个比较

3369
01:47:58,000 --> 01:47:59,000
靠谱的办法

3370
01:47:59,000 --> 01:48:00,000
但是如果你又想

3371
01:48:00,000 --> 01:48:01,000
从某种方式去

3372
01:48:01,000 --> 01:48:02,000
把这个东西管理起来

3373
01:48:02,000 --> 01:48:03,000
或者是能够

3374
01:48:03,000 --> 01:48:04,000
自动化起来

3375
01:48:04,000 --> 01:48:06,000
就没有办法能够帮到你了

3376
01:48:06,000 --> 01:48:08,000
所以后来就有

3377
01:48:08,000 --> 01:48:09,000
另外一个工具

3378
01:48:09,000 --> 01:48:10,000
叫做 Build Out

3379
01:48:10,000 --> 01:48:12,000
你估计没有用过

3380
01:48:12,000 --> 01:48:13,000
其实我之前也没有听说过

3381
01:48:13,000 --> 01:48:15,000
我也是去了知乎之后

3382
01:48:15,000 --> 01:48:17,000
发现还有这么一个东西

3383
01:48:17,000 --> 01:48:19,000
这个东西来源

3384
01:48:19,000 --> 01:48:20,000
其实还挺古老的

3385
01:48:20,000 --> 01:48:22,000
你知道 Python 在很

3386
01:48:22,000 --> 01:48:26,000
Web 1.0 的时代

3387
01:48:26,000 --> 01:48:28,000
出现过一个叫做 Zope 的

3388
01:48:28,000 --> 01:48:29,000
这么一个机构

3389
01:48:29,000 --> 01:48:31,000
你不然你有印象没

3390
01:48:31,000 --> 01:48:32,000
ZOP

3391
01:48:32,000 --> 01:48:33,000
我知道

3392
01:48:33,000 --> 01:48:34,000
对我知道

3393
01:48:34,000 --> 01:48:37,000
而且号称 Zope 是当时

3394
01:48:38,000 --> 01:48:39,000
如日中天的

3395
01:48:39,000 --> 01:48:44,000
这么一个史诗级伟大的库

3396
01:48:44,000 --> 01:48:45,000
是这样吗

3397
01:48:45,000 --> 01:48:47,000
对 它是一个

3398
01:48:48,000 --> 01:48:50,000
说它是 CMS 好像不太严谨

3399
01:48:51,000 --> 01:48:53,000
它其实算一个

3400
01:48:53,000 --> 01:48:55,000
就算一个 Framed Work 吧

3401
01:48:55,000 --> 01:48:57,000
Toolkit 它自称一个 Toolkit

3402
01:48:57,000 --> 01:48:58,000
对 它是一个

3403
01:48:58,000 --> 01:48:59,000
本来是用来建一个

3404
01:48:59,000 --> 01:49:01,000
CMS 的一个 Framed Work

3405
01:49:01,000 --> 01:49:02,000
确实是可以做到理解

3406
01:49:02,000 --> 01:49:03,000
但是后来它就

3407
01:49:03,000 --> 01:49:04,000
越来越庸总

3408
01:49:04,000 --> 01:49:06,000
已经可以做很多事情了

3409
01:49:06,000 --> 01:49:08,000
然后 Build Out 的这个工具

3410
01:49:08,000 --> 01:49:09,000
其实就是最开始

3411
01:49:09,000 --> 01:49:11,000
如果我没记错的话

3412
01:49:11,000 --> 01:49:12,000
就是 Zope 那帮人

3413
01:49:12,000 --> 01:49:13,000
为了解决他们那个

3414
01:49:13,000 --> 01:49:15,000
G 5 B 的 Framed Work 的安装和

3415
01:49:15,000 --> 01:49:17,000
开发的问题

3416
01:49:17,000 --> 01:49:19,000
就写出来的这么一个工具

3417
01:49:20,000 --> 01:49:22,000
然后这个工具的特色是什么呢

3418
01:49:22,000 --> 01:49:24,000
它能支持这种

3419
01:49:24,000 --> 01:49:26,000
带

3420
01:49:26,000 --> 01:49:29,000
Native Binding 的 Python 的包的安装

3421
01:49:29,000 --> 01:49:30,000
因为这里说起来

3422
01:49:30,000 --> 01:49:31,000
就要提另外一件事情

3423
01:49:31,000 --> 01:49:33,000
就是比如说 Python Image Library

3424
01:49:33,000 --> 01:49:34,000
它虽然说是一个

3425
01:49:34,000 --> 01:49:35,000
非存

3426
01:49:35,000 --> 01:49:37,000
它虽然说需要有 Native Binding 它

3427
01:49:37,000 --> 01:49:38,000
但你安装的时候

3428
01:49:38,000 --> 01:49:40,000
并不是安装它自己

3429
01:49:40,000 --> 01:49:41,000
本身这么简单

3430
01:49:41,000 --> 01:49:42,000
你还得再装一些

3431
01:49:42,000 --> 01:49:44,000
其他的什么 C 的一些

3432
01:49:44,000 --> 01:49:45,000
COOP 什么 PNG

3433
01:49:45,000 --> 01:49:47,000
什么乱七八糟的

3434
01:49:47,000 --> 01:49:49,000
然后在 Linux 上面的话

3435
01:49:49,000 --> 01:49:50,000
你就要通过

3436
01:49:50,000 --> 01:49:52,000
就在你装 PIL 之前

3437
01:49:52,000 --> 01:49:53,000
你还得用什么 APT

3438
01:49:53,000 --> 01:49:55,000
或者是 YAM 的方式

3439
01:49:55,000 --> 01:49:57,000
把那些的 E-Lite

3440
01:49:57,000 --> 01:49:58,000
先给装上去

3441
01:49:58,000 --> 01:50:01,000
然后你再可以再装 Python Image Library

3442
01:50:01,000 --> 01:50:02,000
才可以成功

3443
01:50:02,000 --> 01:50:03,000
对

3444
01:50:03,000 --> 01:50:04,000
然后这样的话

3445
01:50:04,000 --> 01:50:07,000
手工操作是非常繁琐

3446
01:50:07,000 --> 01:50:09,000
和容易出错的一个过程

3447
01:50:09,000 --> 01:50:10,000
如果你不信

3448
01:50:10,000 --> 01:50:11,000
你可以去试一下

3449
01:50:11,000 --> 01:50:14,000
我对此还是有个错误的

3450
01:50:14,000 --> 01:50:15,000
因为装

3451
01:50:15,000 --> 01:50:17,000
就像我说的 IPython 的 QT Console

3452
01:50:17,000 --> 01:50:19,000
其实也是这么一个过程

3453
01:50:19,000 --> 01:50:24,000
首先要用包管理工具去安装一些 Library

3454
01:50:24,000 --> 01:50:27,000
然后再安装 QT 之类的

3455
01:50:27,000 --> 01:50:29,000
然后再去再用 Python

3456
01:50:29,000 --> 01:50:31,000
去安装对应的组件

3457
01:50:31,000 --> 01:50:33,000
ZeroMQ 之类的东西

3458
01:50:33,000 --> 01:50:34,000
一个一个都装上

3459
01:50:34,000 --> 01:50:35,000
对

3460
01:50:35,000 --> 01:50:37,000
其实我当时在组织互用的是

3461
01:50:37,000 --> 01:50:39,000
因为最主要原因就是

3462
01:50:39,000 --> 01:50:41,000
尝试用 ZeroMQ

3463
01:50:41,000 --> 01:50:43,000
要装一些 C 的东西

3464
01:50:43,000 --> 01:50:44,000
对

3465
01:50:44,000 --> 01:50:46,000
然后标到就可以用一个

3466
01:50:46,000 --> 01:50:47,000
它可以解决

3467
01:50:47,000 --> 01:50:49,000
它可以指定一些脚本

3468
01:50:49,000 --> 01:50:51,000
在你安装某个包之前

3469
01:50:51,000 --> 01:50:53,000
你可以先声明它依赖哪些

3470
01:50:53,000 --> 01:50:55,000
非 Python 的东西

3471
01:50:55,000 --> 01:50:56,000
然后系统先帮你安装好

3472
01:50:56,000 --> 01:50:58,000
比如这是一个 APT 什么的

3473
01:50:58,000 --> 01:50:59,000
帮你装好

3474
01:50:59,000 --> 01:51:00,000
然后你再装

3475
01:51:00,000 --> 01:51:03,000
但是 Python 是一个神一样的存在

3476
01:51:03,000 --> 01:51:04,000
你知道吗

3477
01:51:04,000 --> 01:51:06,000
现在我不知道情况会不会好转一些

3478
01:51:06,000 --> 01:51:08,000
当时我用的时候我想去学它

3479
01:51:08,000 --> 01:51:09,000
就是一个三无产品

3480
01:51:09,000 --> 01:51:10,000
你刷它往上之后

3481
01:51:10,000 --> 01:51:12,000
你看不出这个

3482
01:51:12,000 --> 01:51:14,000
没有官方文档

3483
01:51:14,000 --> 01:51:16,000
所有人找到的都是只有往上

3484
01:51:16,000 --> 01:51:18,000
细细拉了一些教程

3485
01:51:18,000 --> 01:51:20,000
然后你不知道这个东西最开始

3486
01:51:20,000 --> 01:51:22,000
不知道是谁在维护的

3487
01:51:22,000 --> 01:51:24,000
因为它现在没有说这个东西是找

3488
01:51:24,000 --> 01:51:26,000
你都不知道去找谁

3489
01:51:26,000 --> 01:51:27,000
它有一个 Mail List

3490
01:51:27,000 --> 01:51:30,000
那是你没有办法再去

3491
01:51:30,000 --> 01:51:31,000
三无产品

3492
01:51:31,000 --> 01:51:32,000
我们可以定义一下

3493
01:51:32,000 --> 01:51:33,000
三无产品到底是哪三无

3494
01:51:33,000 --> 01:51:35,000
没有文档是肯定的

3495
01:51:35,000 --> 01:51:36,000
没有文档

3496
01:51:36,000 --> 01:51:37,000
没有是 Poster

3497
01:51:37,000 --> 01:51:38,000
稳定的开发者

3498
01:51:38,000 --> 01:51:41,000
然后你出了问题不知道去哪里问

3499
01:51:43,000 --> 01:51:44,000
无文档

3500
01:51:44,000 --> 01:51:46,000
无稳定维护者

3501
01:51:46,000 --> 01:51:47,000
还有一个无

3502
01:51:47,000 --> 01:51:48,000
不知道去哪里问问题

3503
01:51:48,000 --> 01:51:50,000
就是出了问题找谁

3504
01:51:50,000 --> 01:51:51,000
不知道

3505
01:51:51,000 --> 01:51:52,000
无社区

3506
01:51:52,000 --> 01:51:54,000
然后就发现

3507
01:51:54,000 --> 01:51:55,000
这也可以

3508
01:51:55,000 --> 01:51:58,000
而且这既然是我所知道的

3509
01:51:58,000 --> 01:52:00,000
能够解决这个 Python

3510
01:52:00,000 --> 01:52:03,000
这种就安装非纯 Python 包的

3511
01:52:03,000 --> 01:52:05,000
唯一的一个比较好的

3512
01:52:05,000 --> 01:52:07,000
能用的工具都不能说它好了

3513
01:52:07,000 --> 01:52:08,000
能用的自动工具

3514
01:52:08,000 --> 01:52:09,000
对

3515
01:52:09,000 --> 01:52:10,000
然后它的体验是相当

3516
01:52:10,000 --> 01:52:12,000
使用体验身上都糟糕的

3517
01:52:12,000 --> 01:52:15,000
它的配置文件是一个点 INI 的文件

3518
01:52:15,000 --> 01:52:16,000
What

3519
01:52:16,000 --> 01:52:17,000
然后你需要在

3520
01:52:17,000 --> 01:52:18,000
发者是什么背景

3521
01:52:18,000 --> 01:52:19,000
你做 op 吗

3522
01:52:19,000 --> 01:52:21,000
你自己想想这么古老的

3523
01:52:21,000 --> 01:52:22,000
Ancient 的东西

3524
01:52:22,000 --> 01:52:24,000
有出现这种情况也不奇怪

3525
01:52:24,000 --> 01:52:25,000
还好

3526
01:52:25,000 --> 01:52:26,000
不是太糟糕

3527
01:52:26,000 --> 01:52:27,000
但糟糕的是

3528
01:52:27,000 --> 01:52:29,000
你需要在 INI 文件里面

3529
01:52:29,000 --> 01:52:30,000
INI 文件的格式

3530
01:52:30,000 --> 01:52:32,000
你应该也很明白

3531
01:52:32,000 --> 01:52:33,000
就是有它分几个

3532
01:52:33,000 --> 01:52:34,000
一小节

3533
01:52:34,000 --> 01:52:35,000
一个 section

3534
01:52:35,000 --> 01:52:36,000
每个 section 是一个

3535
01:52:36,000 --> 01:52:37,000
方库号

3536
01:52:37,000 --> 01:52:38,000
不要分开

3537
01:52:38,000 --> 01:52:39,000
一个 section 的名字

3538
01:52:39,000 --> 01:52:40,000
INI 不管怎么说

3539
01:52:40,000 --> 01:52:41,000
还是要比 XML 好

3540
01:52:41,000 --> 01:52:42,000
对

3541
01:52:42,000 --> 01:52:43,000
还是比 XML 要好一点

3542
01:52:43,000 --> 01:52:44,000
但是

3543
01:52:44,000 --> 01:52:46,000
它们把这个已经中到了极致了

3544
01:52:46,000 --> 01:52:48,000
然后每个 section 里面

3545
01:52:48,000 --> 01:52:50,000
它是一个 key value 的

3546
01:52:50,000 --> 01:52:51,000
一个 par

3547
01:52:51,000 --> 01:52:52,000
一个对

3548
01:52:52,000 --> 01:52:53,000
就是一个

3549
01:52:53,000 --> 01:52:54,000
一个主键

3550
01:52:54,000 --> 01:52:55,000
然后那一个数值

3551
01:52:55,000 --> 01:52:57,000
为了解决

3552
01:52:57,000 --> 01:52:58,000
标道的中间的各种问题

3553
01:52:58,000 --> 01:53:00,000
你需要在里面插入

3554
01:53:00,000 --> 01:53:02,000
用一些很诡异的方法

3555
01:53:02,000 --> 01:53:04,000
去写版本自符创

3556
01:53:04,000 --> 01:53:06,000
你需要在里面

3557
01:53:06,000 --> 01:53:08,000
插入 share 脚本

3558
01:53:08,000 --> 01:53:10,000
在 INI 里面

3559
01:53:10,000 --> 01:53:11,000
插入 share 脚本

3560
01:53:11,000 --> 01:53:13,000
这是什么黑魔法

3561
01:53:13,000 --> 01:53:14,000
所以你知道标道是

3562
01:53:14,000 --> 01:53:16,000
这么一个惨痛的存在了

3563
01:53:16,000 --> 01:53:17,000
对

3564
01:53:17,000 --> 01:53:18,000
Holy

3565
01:53:18,000 --> 01:53:20,000
就是我一直对它

3566
01:53:20,000 --> 01:53:21,000
兔槽不能

3567
01:53:21,000 --> 01:53:22,000
但是就不得不用的

3568
01:53:22,000 --> 01:53:25,000
一个可能令人沮丧的攻击

3569
01:53:25,000 --> 01:53:28,000
可是我刚刚在 github 上

3570
01:53:28,000 --> 01:53:30,000
我发现了 billout

3571
01:53:30,000 --> 01:53:32,000
slashbillout 这个 repository

3572
01:53:33,000 --> 01:53:34,000
什么话

3573
01:53:34,000 --> 01:53:35,000
对

3574
01:53:35,000 --> 01:53:37,000
难道是它们官方的酷吗

3575
01:53:37,000 --> 01:53:39,000
所以它已经去了 github 了

3576
01:53:39,000 --> 01:53:41,000
所以可能事情有所好抓

3577
01:53:42,000 --> 01:53:43,000
有可能

3578
01:53:43,000 --> 01:53:44,000
好吧

3579
01:53:44,000 --> 01:53:48,000
起码你可以去它的 billout.org

3580
01:53:48,000 --> 01:53:49,000
这个网站

3581
01:53:49,000 --> 01:53:50,000
你可以发现

3582
01:53:50,000 --> 01:53:52,000
这个 learn 这个选项

3583
01:53:52,000 --> 01:53:54,000
那个就是一堆 tutorial

3584
01:53:54,000 --> 01:53:55,000
然后完了

3585
01:53:57,000 --> 01:53:58,000
然后它教你

3586
01:53:58,000 --> 01:53:59,000
用它的唯一的方式

3587
01:53:59,000 --> 01:54:01,000
就是给你一堆例子

3588
01:54:03,000 --> 01:54:06,000
而且在 github repository 里面的

3589
01:54:06,000 --> 01:54:08,000
贡献最多的这个人

3590
01:54:08,000 --> 01:54:10,000
叫做 Jim Fulton

3591
01:54:10,000 --> 01:54:13,000
他显示的工作

3592
01:54:13,000 --> 01:54:16,000
地点是 zoop corporation

3593
01:54:16,000 --> 01:54:18,000
所以有可能他就是

3594
01:54:18,000 --> 01:54:20,000
你一直苦苦在寻找的

3595
01:54:20,000 --> 01:54:21,000
主要维护者

3596
01:54:21,000 --> 01:54:22,000
对

3597
01:54:22,000 --> 01:54:23,000
因为这个 billout.org 是他写的

3598
01:54:23,000 --> 01:54:24,000
最开始是他写的

3599
01:54:24,000 --> 01:54:26,000
但是我相当确定

3600
01:54:26,000 --> 01:54:28,000
应该没有他没有再更新这个东西了

3601
01:54:29,000 --> 01:54:32,000
所以就是一个半死不活的项目

3602
01:54:32,000 --> 01:54:33,000
靠着社区

3603
01:54:33,000 --> 01:54:34,000
也不知道谁在维护

3604
01:54:34,000 --> 01:54:35,000
anyway

3605
01:54:36,000 --> 01:54:38,000
就像油浑一样的人

3606
01:54:38,000 --> 01:54:39,000
对

3607
01:54:39,000 --> 01:54:40,000
但是你又不得不用它

3608
01:54:40,000 --> 01:54:41,000
而且你发现

3609
01:54:41,000 --> 01:54:44,000
三号你竟然能够用它

3610
01:54:44,000 --> 01:54:45,000
还能用

3611
01:54:46,000 --> 01:54:49,000
所以软件不在心能用就行吗

3612
01:54:51,000 --> 01:54:52,000
但是其实很多可能

3613
01:54:52,000 --> 01:54:53,000
竟然会出问题

3614
01:54:53,000 --> 01:54:55,000
不过他还有一些比较令人

3615
01:54:55,000 --> 01:54:57,000
对于一个这么古老的软件

3616
01:54:57,000 --> 01:55:00,000
他有些令人蛮惊艳的特性的

3617
01:55:00,000 --> 01:55:01,000
比如说刚才讲的

3618
01:55:01,000 --> 01:55:03,000
那些什么屁股那些工具

3619
01:55:03,000 --> 01:55:05,000
就是经常拍屁

3620
01:55:05,000 --> 01:55:06,000
主战挂了

3621
01:55:06,000 --> 01:55:07,000
就下不了了

3622
01:55:07,000 --> 01:55:09,000
比如到他竟然有自带的

3623
01:55:09,000 --> 01:55:11,000
这种本地缓存机制

3624
01:55:11,000 --> 01:55:12,000
你知道吗

3625
01:55:12,000 --> 01:55:14,000
就是你一旦下载过

3626
01:55:14,000 --> 01:55:15,000
某一个安装

3627
01:55:15,000 --> 01:55:17,000
用过 refer 过某个版本

3628
01:55:17,000 --> 01:55:19,000
他会把那个版本的这个圆码

3629
01:55:19,000 --> 01:55:20,000
就从拍屁

3630
01:55:20,000 --> 01:55:22,000
或者是哪个地方抓回来的

3631
01:55:22,000 --> 01:55:23,000
在你本地的

3632
01:55:23,000 --> 01:55:25,000
他管理的一个隐藏的目录下面

3633
01:55:25,000 --> 01:55:26,000
去存起来

3634
01:55:26,000 --> 01:55:28,000
只要你下次装它的

3635
01:55:28,000 --> 01:55:29,000
再运行标料的时候

3636
01:55:29,000 --> 01:55:31,000
它就不用再去网上抓

3637
01:55:31,000 --> 01:55:32,000
而且直接本地从那边

3638
01:55:32,000 --> 01:55:33,000
复制一份过来就好了

3639
01:55:33,000 --> 01:55:34,000
ok

3640
01:55:34,000 --> 01:55:35,000
有什么毫不惊艳的

3641
01:55:35,000 --> 01:55:36,000
因为妹妹也有这个功能

3642
01:55:36,000 --> 01:55:37,000
对

3643
01:55:37,000 --> 01:55:38,000
但是你想

3644
01:55:38,000 --> 01:55:39,000
它是一个多古老的软件

3645
01:55:39,000 --> 01:55:40,000
就是有这种功能

3646
01:55:40,000 --> 01:55:41,000
还是相当不错的

3647
01:55:41,000 --> 01:55:43,000
挺好的一个事情

3648
01:55:43,000 --> 01:55:44,000
但是它的使用 TX

3649
01:55:44,000 --> 01:55:46,000
实在是太糟糕了

3650
01:55:47,000 --> 01:55:48,000
好

3651
01:55:48,000 --> 01:55:50,000
我对拍层的吐槽

3652
01:55:50,000 --> 01:55:52,000
就为了不要拉太多仇恨

3653
01:55:52,000 --> 01:55:54,000
吐槽到此为止

3654
01:55:54,000 --> 01:55:55,000
还好吧

3655
01:55:55,000 --> 01:55:57,000
只要我们是保持自黑的姿态

3656
01:55:57,000 --> 01:55:59,000
应该就不会招来太多人

3657
01:55:59,000 --> 01:56:00,000
不要黑别人

3658
01:56:00,000 --> 01:56:01,000
黑自己就行了

3659
01:56:01,000 --> 01:56:02,000
对

3660
01:56:02,000 --> 01:56:05,000
而我们来看一看敌对阵营

3661
01:56:05,000 --> 01:56:06,000
对阵营

3662
01:56:06,000 --> 01:56:08,000
现在我已经叛逃了

3663
01:56:08,000 --> 01:56:10,000
我已经加入了这个阵营

3664
01:56:10,000 --> 01:56:11,000
Node

3665
01:56:11,000 --> 01:56:13,000
JavaScript

3666
01:56:13,000 --> 01:56:15,000
你觉得 Node 是敌对阵营吗

3667
01:56:15,000 --> 01:56:16,000
我不觉得

3668
01:56:16,000 --> 01:56:17,000
我觉得 Node 是兄弟阵营

3669
01:56:17,000 --> 01:56:18,000
不是吗

3670
01:56:18,000 --> 01:56:19,000
敌对阵营是哪里

3671
01:56:19,000 --> 01:56:20,000
Ruby

3672
01:56:20,000 --> 01:56:21,000
敌对阵营那是 Ruby 了

3673
01:56:21,000 --> 01:56:22,000
其实 Ruby 我不是很熟

3674
01:56:22,000 --> 01:56:23,000
我也不熟

3675
01:56:23,000 --> 01:56:25,000
但至少 GEM

3676
01:56:25,000 --> 01:56:26,000
这个

3677
01:56:26,000 --> 01:56:29,000
就包括你系统在我有限的使用经验里面

3678
01:56:29,000 --> 01:56:32,000
要比 Python 的体验好很多

3679
01:56:32,000 --> 01:56:34,000
首先那只有一套对吧

3680
01:56:36,000 --> 01:56:37,000
不像 Python 那种 4 分 5

3681
01:56:37,000 --> 01:56:39,000
连来搞 5 套出来

3682
01:56:39,000 --> 01:56:40,000
对

3683
01:56:40,000 --> 01:56:41,000
Ruby 社区不管怎么说

3684
01:56:41,000 --> 01:56:43,000
最好的一年就是团结

3685
01:56:43,000 --> 01:56:45,000
我们 Python 社区做不到

3686
01:56:45,000 --> 01:56:46,000
对

3687
01:56:46,000 --> 01:56:49,000
我觉得他们更加乐于去

3688
01:56:49,000 --> 01:56:51,000
误会了达成一个共识

3689
01:56:51,000 --> 01:56:53,000
去改变自己

3690
01:56:53,000 --> 01:56:54,000
对

3691
01:56:54,000 --> 01:56:55,000
这点是挺好的

3692
01:56:55,000 --> 01:56:57,000
所以 GEM 的体验

3693
01:56:57,000 --> 01:56:58,000
我其实体验不多了

3694
01:56:58,000 --> 01:57:00,000
你有什么体验吗

3695
01:57:00,000 --> 01:57:03,000
我老实说我也不是特别

3696
01:57:03,000 --> 01:57:05,000
只不过

3697
01:57:05,000 --> 01:57:08,000
Ruby 简直是

3698
01:57:08,000 --> 01:57:10,000
接触一点稍微新一点的东西

3699
01:57:10,000 --> 01:57:12,000
绕不开工具

3700
01:57:12,000 --> 01:57:13,000
最简单的

3701
01:57:13,000 --> 01:57:16,000
像上面提到 HomeBrew 是 Ruby 的

3702
01:57:16,000 --> 01:57:17,000
对 HomeBrew 是 Ruby 的

3703
01:57:17,000 --> 01:57:18,000
然后

3704
01:57:19,000 --> 01:57:21,000
比如说写 IOS 的

3705
01:57:21,000 --> 01:57:23,000
IOS 下面的包管工具

3706
01:57:23,000 --> 01:57:25,000
或者 Object-C 的包管工具

3707
01:57:25,000 --> 01:57:27,000
Cocopods

3708
01:57:27,000 --> 01:57:29,000
也是 Ruby 写的

3709
01:57:29,000 --> 01:57:30,000
Yes

3710
01:57:30,000 --> 01:57:31,000
我没有说错

3711
01:57:31,000 --> 01:57:34,000
Cocopods 本身是一个 RubyGEM

3712
01:57:34,000 --> 01:57:35,000
很神奇吧

3713
01:57:35,000 --> 01:57:36,000
对

3714
01:57:36,000 --> 01:57:38,000
它其实跟 HomeBrew 的形式比较类似了

3715
01:57:38,000 --> 01:57:40,000
还是就是它的 Cocopods

3716
01:57:40,000 --> 01:57:43,000
一个 pod 文件也是一个 Ruby 的文件吗

3717
01:57:44,000 --> 01:57:46,000
应该是这样的吧

3718
01:57:46,000 --> 01:57:48,000
我忘了 pod

3719
01:57:48,000 --> 01:57:51,000
你证明说我还真 pod file 的语法

3720
01:57:51,000 --> 01:57:52,000
是 Ruby 的语法吗

3721
01:57:52,000 --> 01:57:53,000
还是一个 json

3722
01:57:53,000 --> 01:57:55,000
还是一个什么东西

3723
01:57:55,000 --> 01:57:57,000
它也是用 Ruby 写的

3724
01:57:57,000 --> 01:57:59,000
DSL

3725
01:57:59,000 --> 01:58:00,000
对

3726
01:58:00,000 --> 01:58:03,000
Ruby 開发者最喜欢做的事情就是写 DSL

3727
01:58:03,000 --> 01:58:06,000
对 Ruby 毕竟是一个非常适合于写 DSL 的语言

3728
01:58:06,000 --> 01:58:07,000
这也不能管

3729
01:58:07,000 --> 01:58:09,000
你知道这句话我听的最主要地方是在哪里吗

3730
01:58:09,000 --> 01:58:10,000
哪儿

3731
01:58:10,000 --> 01:58:11,000
Skala

3732
01:58:11,000 --> 01:58:13,000
Skala 写 DSL

3733
01:58:13,000 --> 01:58:14,000
对 Ruby 写 DSL

3734
01:58:14,000 --> 01:58:16,000
你还觉得从人看出来的一眼

3735
01:58:16,000 --> 01:58:17,000
就是看它是一个 Ruby 的文件

3736
01:58:17,000 --> 01:58:18,000
Skala 写 DSL

3737
01:58:18,000 --> 01:58:19,000
My ass

3738
01:58:19,000 --> 01:58:20,000
你听我解释

3739
01:58:20,000 --> 01:58:21,000
你说 Ruby 写 DSL

3740
01:58:21,000 --> 01:58:23,000
它还有一些东西是个很明显的

3741
01:58:23,000 --> 01:58:25,000
Ruby 的语法痕迹在里面

3742
01:58:25,000 --> 01:58:26,000
你看着它是一个 class

3743
01:58:26,000 --> 01:58:28,000
然后它的那个什么 Block 的语法

3744
01:58:28,000 --> 01:58:30,000
就是很鲜明的特点

3745
01:58:30,000 --> 01:58:31,000
对吧

3746
01:58:31,000 --> 01:58:32,000
Skala 写出来 DSL

3747
01:58:32,000 --> 01:58:33,000
你甚至看不出它

3748
01:58:33,000 --> 01:58:34,000
有时候你不仔细看

3749
01:58:34,000 --> 01:58:36,000
你还看不出它是 Skala

3750
01:58:36,000 --> 01:58:38,000
这是它的优点还是缺点

3751
01:58:38,000 --> 01:58:40,000
我总觉得越听越像缺点

3752
01:58:40,000 --> 01:58:41,000
这都是

3753
01:58:41,000 --> 01:58:42,000
就是有点就是说

3754
01:58:42,000 --> 01:58:44,000
它能够可以让你定义一些很诡异的语法

3755
01:58:44,000 --> 01:58:46,000
它的原编程能力非常强大

3756
01:58:46,000 --> 01:58:47,000
对非常强大

3757
01:58:47,000 --> 01:58:48,000
它可以编的连

3758
01:58:48,000 --> 01:58:50,000
编的连亲爹都不认识

3759
01:58:50,000 --> 01:58:51,000
对

3760
01:58:51,000 --> 01:58:53,000
就是 Skala 那种写的 DSL

3761
01:58:53,000 --> 01:58:56,000
如果你不知道 DSL 的实现方式

3762
01:58:56,000 --> 01:58:58,000
或者母版是怎么样的

3763
01:58:58,000 --> 01:58:59,000
你根本别想

3764
01:58:59,000 --> 01:59:00,000
你别想往下写下去

3765
01:59:00,000 --> 01:59:02,000
你根本不想

3766
01:59:02,000 --> 01:59:05,000
对有这种情况发生

3767
01:59:05,000 --> 01:59:06,000
还有什么呢

3768
01:59:06,000 --> 01:59:09,000
我前两天还用了一个什么东西

3769
01:59:09,000 --> 01:59:10,000
对对对

3770
01:59:10,000 --> 01:59:11,000
Rigfile

3771
01:59:11,000 --> 01:59:13,000
Rigfile 这种

3772
01:59:13,000 --> 01:59:14,000
这种

3773
01:59:14,000 --> 01:59:16,000
这也可以理解为 DSL

3774
01:59:16,000 --> 01:59:18,000
它本身也是一个 DSL

3775
01:59:18,000 --> 01:59:19,000
说实话

3776
01:59:19,000 --> 01:59:20,000
Rigfile 这种

3777
01:59:20,000 --> 01:59:22,000
或者 Rig 这个工具

3778
01:59:22,000 --> 01:59:24,000
在很多开源工具里面

3779
01:59:24,000 --> 01:59:26,000
已经取代了 MAKE

3780
01:59:26,000 --> 01:59:28,000
或者是

3781
01:59:28,000 --> 01:59:32,000
其他一些更加冷屁的工具

3782
01:59:32,000 --> 01:59:33,000
对

3783
01:59:33,000 --> 01:59:36,000
成为了一种默认的安装工具

3784
01:59:36,000 --> 01:59:38,000
或者是默认的执行工具

3785
01:59:38,000 --> 01:59:39,000
这个也挺有意思的

3786
01:59:39,000 --> 01:59:41,000
就比如说前两天我在

3787
01:59:41,000 --> 01:59:43,000
SekOrflow 上

3788
01:59:43,000 --> 01:59:45,000
获得了风滚草驯照

3789
01:59:45,000 --> 01:59:47,000
就是

3790
01:59:47,000 --> 01:59:49,000
提问了一个问题

3791
01:59:49,000 --> 01:59:51,000
没有人关注

3792
01:59:51,000 --> 01:59:52,000
没有人 upload

3793
01:59:52,000 --> 01:59:54,000
没有人回答

3794
01:59:54,000 --> 01:59:55,000
这叫风滚草吗

3795
01:59:55,000 --> 01:59:57,000
持续过了一个星期

3796
01:59:57,000 --> 01:59:58,000
对

3797
01:59:58,000 --> 02:00:00,000
然后你就会获得风滚草驯照

3798
02:00:00,000 --> 02:00:01,000
因为你提这个问题

3799
02:00:01,000 --> 02:00:02,000
实在是太小众了

3800
02:00:02,000 --> 02:00:03,000
没有人去管

3801
02:00:03,000 --> 02:00:04,000
35

3802
02:00:04,000 --> 02:00:06,000
35 问题是吧

3803
02:00:06,000 --> 02:00:07,000
对

3804
02:00:07,000 --> 02:00:08,000
然后一个兄弟

3805
02:00:08,000 --> 02:00:10,000
非常热心的来帮我

3806
02:00:10,000 --> 02:00:11,000
然后

3807
02:00:13,000 --> 02:00:15,000
折腾出了一个 Git repository

3808
02:00:15,000 --> 02:00:16,000
说

3809
02:00:16,000 --> 02:00:17,000
按看我做了一个活生生的例子

3810
02:00:17,000 --> 02:00:18,000
你去试试吧

3811
02:00:18,000 --> 02:00:20,000
然后我信高采的 APD

3812
02:00:20,000 --> 02:00:21,000
跑过去看

3813
02:00:22,000 --> 02:00:24,000
里面是个 Rigfile

3814
02:00:24,000 --> 02:00:26,000
相关问题是一个 Swift 的问题

3815
02:00:27,000 --> 02:00:28,000
但最后他

3816
02:00:28,000 --> 02:00:30,000
SumHow 给了我一个 Rigfile 的解决方案

3817
02:00:30,000 --> 02:00:31,000
而且

3818
02:00:32,000 --> 02:00:34,000
对他默认我是能理解这个东西

3819
02:00:35,000 --> 02:00:37,000
然后我

3820
02:00:38,000 --> 02:00:40,000
愚蠢莽撞了 Rig 一下

3821
02:00:40,000 --> 02:00:41,000
然后出错了

3822
02:00:43,000 --> 02:00:45,000
理解你的痛苦了

3823
02:00:45,000 --> 02:00:48,000
就不懂 Ruby

3824
02:00:48,000 --> 02:00:50,000
几十天就是到处被人欺负的感觉

3825
02:00:51,000 --> 02:00:52,000
好吧

3826
02:00:52,000 --> 02:00:53,000
那什么

3827
02:00:53,000 --> 02:00:54,000
Ruby 的土槽

3828
02:00:54,000 --> 02:00:55,000
我没法土

3829
02:00:55,000 --> 02:00:56,000
因为我不用

3830
02:00:56,000 --> 02:00:57,000
然后也不是很熟

3831
02:00:57,000 --> 02:00:59,000
Ruby 没有什么可土槽的说实话

3832
02:01:00,000 --> 02:01:01,000
现在我们来说

3833
02:01:01,000 --> 02:01:03,000
另外一个地对症

3834
02:01:05,000 --> 02:01:06,000
Node 有一个很不错

3835
02:01:06,000 --> 02:01:07,000
在我看来

3836
02:01:07,000 --> 02:01:11,000
在这些主流的动态语言里面

3837
02:01:12,000 --> 02:01:14,000
比较好的实现的一个

3838
02:01:14,000 --> 02:01:15,000
包管理器

3839
02:01:15,000 --> 02:01:16,000
这个叫 NPM

3840
02:01:17,000 --> 02:01:18,000
其实他都

3841
02:01:18,000 --> 02:01:19,000
甚至都不完全是一个

3842
02:01:19,000 --> 02:01:21,000
包管理器他能做一些别的事

3843
02:01:21,000 --> 02:01:24,000
什么运行态的东西

3844
02:01:24,000 --> 02:01:25,000
还不属他也能做

3845
02:01:25,000 --> 02:01:26,000
其实还挺好的

3846
02:01:27,000 --> 02:01:28,000
他有点像一个

3847
02:01:28,000 --> 02:01:30,000
configuration pool

3848
02:01:30,000 --> 02:01:31,000
对

3849
02:01:31,000 --> 02:01:33,000
他有的范畴有点还不太一样

3850
02:01:33,000 --> 02:01:35,000
但是这个先不去纠结这些细节

3851
02:01:35,000 --> 02:01:36,000
但是就说他作为

3852
02:01:36,000 --> 02:01:38,000
包管理器的优点

3853
02:01:38,000 --> 02:01:39,000
我觉得还是比较明显的

3854
02:01:39,000 --> 02:01:41,000
就是他干净

3855
02:01:41,000 --> 02:01:43,000
干净什么意思呢

3856
02:01:43,000 --> 02:01:45,000
我们用 PIP 安装也好

3857
02:01:45,000 --> 02:01:47,000
还是 Ruby Jam 安装也好

3858
02:01:47,000 --> 02:01:49,000
默认实安装进系统目录的

3859
02:01:49,000 --> 02:01:51,000
换句话说

3860
02:01:51,000 --> 02:01:53,000
你只要没什么事

3861
02:01:53,000 --> 02:01:55,000
你就要在这里装一个了

3862
02:01:55,000 --> 02:01:57,000
你的系统的拍摄

3863
02:01:57,000 --> 02:01:59,000
包的目录就已经被

3864
02:01:59,000 --> 02:02:01,000
打引号的污染了

3865
02:02:01,000 --> 02:02:03,000
没法在回到之前的状态了

3866
02:02:03,000 --> 02:02:05,000
特别是你用了 PIP 的那种

3867
02:02:05,000 --> 02:02:06,000
直可因素

3868
02:02:06,000 --> 02:02:07,000
不可因素的状态的

3869
02:02:07,000 --> 02:02:09,000
这种工具的情况下

3870
02:02:10,000 --> 02:02:11,000
GAM 可以安装吗

3871
02:02:11,000 --> 02:02:12,000
可以

3872
02:02:12,000 --> 02:02:13,000
GAM 等等

3873
02:02:13,000 --> 02:02:14,000
GAM 当然可以安装

3874
02:02:14,000 --> 02:02:16,000
而且 GAM 是可以装在

3875
02:02:16,000 --> 02:02:18,000
本身的那个

3876
02:02:18,000 --> 02:02:19,000
local programe

3877
02:02:19,000 --> 02:02:21,000
加木炉或者是本地木炉

3878
02:02:21,000 --> 02:02:23,000
直接装在

3879
02:02:23,000 --> 02:02:24,000
winders 下面的

3880
02:02:24,000 --> 02:02:25,000
但是它的木炉

3881
02:02:25,000 --> 02:02:27,000
也是装到那个系统吧

3882
02:02:27,000 --> 02:02:28,000
是吗

3883
02:02:28,000 --> 02:02:29,000
木炉呢

3884
02:02:29,000 --> 02:02:30,000
我这个是这样子

3885
02:02:30,000 --> 02:02:31,000
就系统可能是说

3886
02:02:31,000 --> 02:02:32,000
一个用户

3887
02:02:32,000 --> 02:02:34,000
或者说你搜狗的话

3888
02:02:34,000 --> 02:02:36,000
就系统的根里面那些什么

3889
02:02:36,000 --> 02:02:37,000
有点 local

3890
02:02:37,000 --> 02:02:39,000
这不是一个非常

3891
02:02:39,000 --> 02:02:40,000
就是

3892
02:02:40,000 --> 02:02:42,000
如果你用 bandler 的话

3893
02:02:42,000 --> 02:02:44,000
bandler 本身是个 GAM

3894
02:02:44,000 --> 02:02:47,000
然后你用 bandler 来管理你的 GAM

3895
02:02:47,000 --> 02:02:48,000
以来的话 bandler

3896
02:02:48,000 --> 02:02:50,000
是认识一安装在当前面的

3897
02:02:50,000 --> 02:02:51,000
哦

3898
02:02:51,000 --> 02:02:52,000
OK

3899
02:02:52,000 --> 02:02:54,000
如果你只要用一个

3900
02:02:54,000 --> 02:02:56,000
它给的那个

3901
02:02:56,000 --> 02:02:58,000
不是它给的

3902
02:02:58,000 --> 02:03:00,000
如果你用 bandler 这个 GAM

3903
02:03:00,000 --> 02:03:02,000
来管理你的项目的

3904
02:03:02,000 --> 02:03:04,000
依赖的 GAM 的话

3905
02:03:04,000 --> 02:03:07,000
which is an industry standard

3906
02:03:07,000 --> 02:03:10,000
就是几乎每一个好一点的

3907
02:03:10,000 --> 02:03:12,000
ruby 项目几乎都是用 bandler 的

3908
02:03:12,000 --> 02:03:14,000
然后你就不会去污染你的

3909
02:03:14,000 --> 02:03:15,000
全局 GAM

3910
02:03:15,000 --> 02:03:17,000
所以还是有一个 best practice

3911
02:03:17,000 --> 02:03:18,000
对有一个 best practice

3912
02:03:18,000 --> 02:03:19,000
不像我

3913
02:03:19,000 --> 02:03:21,000
不像比正赢

3914
02:03:21,000 --> 02:03:22,000
我已经不是了

3915
02:03:22,000 --> 02:03:24,000
我已经宣布脱离了

3916
02:03:24,000 --> 02:03:25,000
好吧

3917
02:03:25,000 --> 02:03:26,000
OK

3918
02:03:26,000 --> 02:03:27,000
讲回 node 这个东西

3919
02:03:27,000 --> 02:03:28,000
NPM

3920
02:03:28,000 --> 02:03:30,000
它是默认是装在

3921
02:03:30,000 --> 02:03:31,000
当前目的上面的

3922
02:03:31,000 --> 02:03:32,000
就是你可能每个工程

3923
02:03:32,000 --> 02:03:34,000
每个项目是一个有一个自己的

3924
02:03:34,000 --> 02:03:36,000
node module 这么一个目录

3925
02:03:36,000 --> 02:03:37,000
然后你在那里面

3926
02:03:37,000 --> 02:03:39,000
直接 NPM install 的之后

3927
02:03:39,000 --> 02:03:40,000
装的所有东西都会在

3928
02:03:40,000 --> 02:03:41,000
默认在那里面

3929
02:03:41,000 --> 02:03:43,000
然后如果你是要装在

3930
02:03:43,000 --> 02:03:44,000
系统级别的话

3931
02:03:44,000 --> 02:03:46,000
你正要加一个 GAMG

3932
02:03:46,000 --> 02:03:47,000
说不过这个选项

3933
02:03:47,000 --> 02:03:49,000
它才会装到你的 GAMG

3934
02:03:49,000 --> 02:03:50,000
或者是你速度的情况下

3935
02:03:50,000 --> 02:03:51,000
装到你的系统级别的

3936
02:03:51,000 --> 02:03:52,000
node 面去

3937
02:03:52,000 --> 02:03:55,000
说它在一开始就鼓励一种

3938
02:03:55,000 --> 02:03:58,000
所谓完全分离

3939
02:03:58,000 --> 02:04:00,000
我觉得他们觉得

3940
02:04:00,000 --> 02:04:02,000
磁盘空间的损失算不得什么

3941
02:04:02,000 --> 02:04:04,000
重点是不要互相干扰

3942
02:04:04,000 --> 02:04:06,000
所以这个就

3943
02:04:06,000 --> 02:04:07,000
其实这种签问这么方式

3944
02:04:07,000 --> 02:04:08,000
当然它有

3945
02:04:08,000 --> 02:04:09,000
它自己的原因

3946
02:04:09,000 --> 02:04:11,000
就是因为在所有的

3947
02:04:11,000 --> 02:04:12,000
软件包里面

3948
02:04:12,000 --> 02:04:13,000
可能 node 的

3949
02:04:13,000 --> 02:04:15,000
软件包的版本

3950
02:04:15,000 --> 02:04:16,000
跳躍是最快的

3951
02:04:16,000 --> 02:04:18,000
我上个月装的

3952
02:04:18,000 --> 02:04:19,000
一个什么开发

3953
02:04:19,000 --> 02:04:21,000
一个软件的版本

3954
02:04:21,000 --> 02:04:23,000
用的一个酷可能是 0.2 点几

3955
02:04:23,000 --> 02:04:24,000
有这个升级看

3956
02:04:24,000 --> 02:04:26,000
就已经 1.2 点几

3957
02:04:26,000 --> 02:04:28,000
对 如果你想最快

3958
02:04:28,000 --> 02:04:29,000
最短

3959
02:04:29,000 --> 02:04:30,000
在最短时间之内

3960
02:04:30,000 --> 02:04:34,000
在屏幕上获得最多的数据流

3961
02:04:34,000 --> 02:04:35,000
并且多多少少

3962
02:04:35,000 --> 02:04:36,000
能让人看得懂的话

3963
02:04:36,000 --> 02:04:38,000
那请你执行 NPMupdate

3964
02:04:38,000 --> 02:04:40,000
对

3965
02:04:40,000 --> 02:04:42,000
所以也是因为这个

3966
02:04:42,000 --> 02:04:44,000
残酷的现实使得

3967
02:04:44,000 --> 02:04:46,000
可能我这么猜的

3968
02:04:46,000 --> 02:04:47,000
就是这个 node 社区

3969
02:04:47,000 --> 02:04:50,000
必须要把这种版本依赖

3970
02:04:50,000 --> 02:04:51,000
就是要

3971
02:04:51,000 --> 02:04:53,000
就是叫什么 contained

3972
02:04:53,000 --> 02:04:55,000
就是要局部化

3973
02:04:55,000 --> 02:04:57,000
因为一旦安装拳击

3974
02:04:57,000 --> 02:04:58,000
这个事没法玩了

3975
02:04:58,000 --> 02:04:59,000
对

3976
02:04:59,000 --> 02:05:00,000
这就是他们拥抱

3977
02:05:00,000 --> 02:05:01,000
改变的那种方式

3978
02:05:01,000 --> 02:05:02,000
对 然后他们

3979
02:05:02,000 --> 02:05:04,000
而且他们对这个版本的

3980
02:05:04,000 --> 02:05:05,000
刚才我们讲的交叉依赖

3981
02:05:05,000 --> 02:05:06,000
解决的也很好

3982
02:05:06,000 --> 02:05:07,000
就是它是

3983
02:05:07,000 --> 02:05:09,000
用我说的那种方式

3984
02:05:09,000 --> 02:05:11,000
就是各个包去

3985
02:05:11,000 --> 02:05:12,000
用装自己的依赖

3986
02:05:12,000 --> 02:05:13,000
互相不要干扰

3987
02:05:13,000 --> 02:05:14,000
就是

3988
02:05:14,000 --> 02:05:15,000
同样他们就

3989
02:05:15,000 --> 02:05:16,000
一个最简单的例子

3990
02:05:16,000 --> 02:05:18,000
就是我写这个程序

3991
02:05:18,000 --> 02:05:19,000
叫 A

3992
02:05:19,000 --> 02:05:20,000
然后它依赖 B

3993
02:05:20,000 --> 02:05:21,000
然后也依赖 C

3994
02:05:21,000 --> 02:05:23,000
然后我的程序

3995
02:05:23,000 --> 02:05:25,000
A 依赖 B 和 C 这两个包

3996
02:05:25,000 --> 02:05:26,000
然后 C 这个包

3997
02:05:26,000 --> 02:05:27,000
它又依赖于 B

3998
02:05:27,000 --> 02:05:29,000
但是可能它是依赖于 B 的

3999
02:05:29,000 --> 02:05:30,000
另外一个叫早

4000
02:05:30,000 --> 02:05:31,000
或者叫新的版本

4001
02:05:31,000 --> 02:05:33,000
NPM 的解决方案就是说

4002
02:05:33,000 --> 02:05:35,000
那我这个程序装的时候

4003
02:05:35,000 --> 02:05:36,000
我写写

4004
02:05:36,000 --> 02:05:38,000
我要 B 的包到这个版本

4005
02:05:38,000 --> 02:05:39,000
我要 C 的包到那个版本

4006
02:05:39,000 --> 02:05:41,000
然后它就会去装 B

4007
02:05:41,000 --> 02:05:43,000
然后就会把这个在

4008
02:05:43,000 --> 02:05:44,000
我当前目录的 Node Module 里面

4009
02:05:44,000 --> 02:05:46,000
这个有一个目录的名字

4010
02:05:46,000 --> 02:05:47,000
是 B 这个包的名字

4011
02:05:47,000 --> 02:05:49,000
还有一个名字是 C 的包的名字

4012
02:05:49,000 --> 02:05:51,000
然后你进到 Node Module

4013
02:05:51,000 --> 02:05:53,000
然后 B 那个包的名字的目录里面

4014
02:05:53,000 --> 02:05:54,000
去去发现它又是一个

4015
02:05:54,000 --> 02:05:56,000
带有 Node Module 的一个包

4016
02:05:56,000 --> 02:05:57,000
所以它就是

4017
02:05:57,000 --> 02:05:58,000
在每一个包里面

4018
02:05:58,000 --> 02:06:00,000
它都是独立的一个

4019
02:06:00,000 --> 02:06:03,000
一个 Node Package 的层级

4020
02:06:03,000 --> 02:06:04,000
关系在里面

4021
02:06:04,000 --> 02:06:06,000
就不会出现说

4022
02:06:06,000 --> 02:06:07,000
我依赖 A

4023
02:06:07,000 --> 02:06:08,000
我依赖 B

4024
02:06:08,000 --> 02:06:09,000
然后我也依赖 C

4025
02:06:09,000 --> 02:06:10,000
C 有依赖 B 的另外一个版本

4026
02:06:10,000 --> 02:06:11,000
这种交叉依赖

4027
02:06:11,000 --> 02:06:12,000
都会对我到这的影响

4028
02:06:12,000 --> 02:06:13,000
对我来说

4029
02:06:13,000 --> 02:06:15,000
我是看不见 C 依赖了什么东西的

4030
02:06:17,000 --> 02:06:18,000
对 就这点是

4031
02:06:18,000 --> 02:06:19,000
我觉得它做的比较好

4032
02:06:19,000 --> 02:06:21,000
这地方就是整个是很干净

4033
02:06:21,000 --> 02:06:23,000
很明确 很干净

4034
02:06:23,000 --> 02:06:26,000
而且是就是局域化的

4035
02:06:28,000 --> 02:06:30,000
而且它的这个山厨也很简单

4036
02:06:30,000 --> 02:06:31,000
你不想用了

4037
02:06:31,000 --> 02:06:33,000
你直接把 Node Module 里面的那些东西

4038
02:06:33,000 --> 02:06:34,000
清掉就好了

4039
02:06:34,000 --> 02:06:35,000
就往中路山就好了

4040
02:06:35,000 --> 02:06:37,000
不会在你操作系统的

4041
02:06:37,000 --> 02:06:39,000
其他任何地方留下垃圾

4042
02:06:39,000 --> 02:06:40,000
如果你有解僻的话

4043
02:06:40,000 --> 02:06:43,000
这个也是相当令人解放的一件事情

4044
02:06:43,000 --> 02:06:46,000
对 这也跟 JavaScript 的特性有关

4045
02:06:46,000 --> 02:06:49,000
JavaScript 它不是一种

4046
02:06:49,000 --> 02:06:53,000
严格意义上的为

4047
02:06:53,000 --> 02:06:56,000
联合不同系统

4048
02:06:56,000 --> 02:06:59,000
组建的 Glue Language 而出现的

4049
02:06:59,000 --> 02:07:00,000
对

4050
02:07:00,000 --> 02:07:01,000
对

4051
02:07:01,000 --> 02:07:02,000
然后它的

4052
02:07:02,000 --> 02:07:04,000
其实这也出了一个问题

4053
02:07:04,000 --> 02:07:07,000
JavaScript 有 Native Keepbinding

4054
02:07:07,000 --> 02:07:09,000
Native Keepbinding 需要 Compile 的情况出现吗

4055
02:07:09,000 --> 02:07:10,000
应该是有的

4056
02:07:10,000 --> 02:07:12,000
比如我经常安装的时候

4057
02:07:12,000 --> 02:07:15,000
它会去运行一下 C 个什么 Compile

4058
02:07:15,000 --> 02:07:16,000
装什么东西

4059
02:07:16,000 --> 02:07:17,000
但是具体它在做什么

4060
02:07:17,000 --> 02:07:18,000
我也不是太清楚

4061
02:07:19,000 --> 02:07:21,000
OK 因为我印象里面 JavaScript

4062
02:07:21,000 --> 02:07:24,000
NPM 社区极端到连什么 Myscquale 的

4063
02:07:24,000 --> 02:07:25,000
二进制代码都要

4064
02:07:25,000 --> 02:07:28,000
二进制的协议都要写一个 JavaScript 的

4065
02:07:28,000 --> 02:07:30,000
的版本

4066
02:07:30,000 --> 02:07:32,000
就不要去调用 C 库

4067
02:07:32,000 --> 02:07:33,000
这是为什么呢

4068
02:07:33,000 --> 02:07:35,000
不能调用 C 库吗

4069
02:07:35,000 --> 02:07:36,000
我不太确定

4070
02:07:37,000 --> 02:07:39,000
你诈问我 JavaScript 怎么调用 C 库

4071
02:07:39,000 --> 02:07:41,000
但是对 确实有一点

4072
02:07:41,000 --> 02:07:43,000
他们是很愿意把所有东西都用 JavaScript

4073
02:07:43,000 --> 02:07:44,000
重新写一遍

4074
02:07:44,000 --> 02:07:45,000
这里面其实是有好处的

4075
02:07:45,000 --> 02:07:46,000
比如说

4076
02:07:46,000 --> 02:07:48,000
你可以只用的 VBAR 的

4077
02:07:48,000 --> 02:07:49,000
如果你能弄的那边

4078
02:07:49,000 --> 02:07:50,000
跑一个 VBAR 的 JT 的特性

4079
02:07:50,000 --> 02:07:51,000
对吧

4080
02:07:51,000 --> 02:07:52,000
然后你可以调试

4081
02:07:52,000 --> 02:07:54,000
那些触碩都很方便

4082
02:07:54,000 --> 02:07:56,000
然后你包括

4083
02:07:56,000 --> 02:07:58,000
当然管理起来也会很方便

4084
02:07:59,000 --> 02:08:01,000
你寻急当主意一招

4085
02:08:01,000 --> 02:08:02,000
对

4086
02:08:02,000 --> 02:08:04,000
然后 NPM 它在每一个包的里面

4087
02:08:04,000 --> 02:08:06,000
它的 Package.json

4088
02:08:06,000 --> 02:08:07,000
这个文件也很简单

4089
02:08:07,000 --> 02:08:09,000
就是你把那些常见东西写进来

4090
02:08:09,000 --> 02:08:10,000
让依赖关系写进来

4091
02:08:10,000 --> 02:08:12,000
然后 NPM 这个迷你行的工具

4092
02:08:12,000 --> 02:08:14,000
也是比较强大的

4093
02:08:14,000 --> 02:08:15,000
它甚至连那种

4094
02:08:15,000 --> 02:08:17,000
连你的版本号的写法

4095
02:08:17,000 --> 02:08:19,000
都有快捷迷你行帮你去搞定

4096
02:08:19,000 --> 02:08:22,000
他们是遵从 Smartic Version

4097
02:08:22,000 --> 02:08:23,000
这个做法

4098
02:08:23,000 --> 02:08:25,000
就是你把它 A 点 B 点 C

4099
02:08:25,000 --> 02:08:26,000
然后 H 大版本号

4100
02:08:26,000 --> 02:08:28,000
说变成 API 肯定变了

4101
02:08:28,000 --> 02:08:29,000
然后 B 是小版本号

4102
02:08:29,000 --> 02:08:30,000
是一个变的话

4103
02:08:30,000 --> 02:08:33,000
肯定是有很多各种新增内容

4104
02:08:33,000 --> 02:08:35,000
但是应该是下下接容的

4105
02:08:35,000 --> 02:08:38,000
然后 C 是小升级

4106
02:08:38,000 --> 02:08:39,000
什么 bugfix 之类

4107
02:08:39,000 --> 02:08:41,000
不影响接口的这种情况

4108
02:08:41,000 --> 02:08:42,000
对

4109
02:08:42,000 --> 02:08:44,000
它连这个都已经忘你考虑好了

4110
02:08:44,000 --> 02:08:46,000
而且如果你 NPM 的包

4111
02:08:46,000 --> 02:08:49,000
是在一个 Git 里面的

4112
02:08:49,000 --> 02:08:50,000
Raposter 里面的话

4113
02:08:50,000 --> 02:08:52,000
它甚至你做完 NPM Version

4114
02:08:52,000 --> 02:08:55,000
然后 Patch 或者是 minor 这种命令之后

4115
02:08:55,000 --> 02:08:58,000
就是把那个命令版本号升级一位

4116
02:08:58,000 --> 02:09:02,000
它连 Git Tag 的这些事情都帮你做好了

4117
02:09:02,000 --> 02:09:04,000
这是贴心

4118
02:09:04,000 --> 02:09:05,000
对

4119
02:09:05,000 --> 02:09:06,000
就是简直就是贴心小棉

4120
02:09:06,000 --> 02:09:08,000
非常方便

4121
02:09:08,000 --> 02:09:09,000
非常方便

4122
02:09:09,000 --> 02:09:10,000
用起来很爽

4123
02:09:10,000 --> 02:09:11,000
对

4124
02:09:11,000 --> 02:09:12,000
也从一个侧面反映了

4125
02:09:12,000 --> 02:09:13,000
NPM 的社区

4126
02:09:13,000 --> 02:09:15,000
其实是一个非常有活力的社区

4127
02:09:15,000 --> 02:09:16,000
不管多少人怎么样

4128
02:09:16,000 --> 02:09:18,000
整个世界上嘲笑他们

4129
02:09:18,000 --> 02:09:19,000
对

4130
02:09:19,000 --> 02:09:20,000
但可能就是因为这种

4131
02:09:20,000 --> 02:09:21,000
受嫩者的姿态

4132
02:09:21,000 --> 02:09:23,000
迫使他们仅仅团结他们的一期

4133
02:09:23,000 --> 02:09:24,000
对

4134
02:09:24,000 --> 02:09:25,000
NPM 社区就是

4135
02:09:25,000 --> 02:09:27,000
软件开发界的犹太人

4136
02:09:27,000 --> 02:09:28,000
对

4137
02:09:28,000 --> 02:09:31,000
反正整个来说

4138
02:09:31,000 --> 02:09:32,000
NPM 的体验

4139
02:09:32,000 --> 02:09:35,000
是我目前用过所有的这种

4140
02:09:35,000 --> 02:09:38,000
语言原声的保管理器里面

4141
02:09:38,000 --> 02:09:39,000
体验最好的一个

4142
02:09:39,000 --> 02:09:41,000
那你可能是我咕噜管

4143
02:09:41,000 --> 02:09:42,000
没见过更好的

4144
02:09:42,000 --> 02:09:45,000
我也真的没有见过更好的说法

4145
02:09:45,000 --> 02:09:47,000
更好的可能就是

4146
02:09:47,000 --> 02:09:49,000
是什么图形化的

4147
02:09:49,000 --> 02:09:51,000
然后给最终用胡用的

4148
02:09:51,000 --> 02:09:53,000
所以对

4149
02:09:53,000 --> 02:09:56,000
所以这个是 NPM 的一个挺好的地方

4150
02:09:56,000 --> 02:09:58,000
现在再说一个

4151
02:09:58,000 --> 02:09:59,000
现在本人的大爱

4152
02:09:59,000 --> 02:10:01,000
Go 里面是怎么做的这件事

4153
02:10:01,000 --> 02:10:03,000
Go 传教室没有同学又来

4154
02:10:03,000 --> 02:10:06,000
其实你知道 Go 里面怎么做这件事情吗

4155
02:10:06,000 --> 02:10:07,000
Go get me

4156
02:10:07,000 --> 02:10:08,000
不是吗

4157
02:10:08,000 --> 02:10:09,000
对

4158
02:10:09,000 --> 02:10:10,000
但是它的哲学就是蛮奇怪的

4159
02:10:10,000 --> 02:10:12,000
就通常你讲前面我们提到的

4160
02:10:12,000 --> 02:10:13,000
几个像比如说

4161
02:10:14,000 --> 02:10:15,000
Java 也好

4162
02:10:15,000 --> 02:10:16,000
Python 也好

4163
02:10:16,000 --> 02:10:17,000
No 的也好

4164
02:10:17,000 --> 02:10:18,000
还有 Ruby Jam 也好

4165
02:10:18,000 --> 02:10:20,000
他们都有一个

4166
02:10:20,000 --> 02:10:21,000
所谓的

4167
02:10:21,000 --> 02:10:24,000
这个所谓官方正式认可的这么一个集中

4168
02:10:24,000 --> 02:10:27,000
发布软件包的渠道对吧

4169
02:10:27,000 --> 02:10:28,000
对

4170
02:10:28,000 --> 02:10:30,000
然后 request 的

4171
02:10:30,000 --> 02:10:31,000
Go 是没有的

4172
02:10:31,000 --> 02:10:34,000
Go 是完全是一个去中生化的

4173
02:10:34,000 --> 02:10:37,000
一个发布方式

4174
02:10:37,000 --> 02:10:40,000
然后这会导致一些很奇怪的一些状况

4175
02:10:40,000 --> 02:10:41,000
比如说

4176
02:10:41,000 --> 02:10:43,000
我们通常一个包的名字

4177
02:10:43,000 --> 02:10:44,000
你要引用它的时候

4178
02:10:44,000 --> 02:10:46,000
比如说在 Python 里面

4179
02:10:46,000 --> 02:10:47,000
比如说 import

4180
02:10:48,000 --> 02:10:49,000
Json 就好了

4181
02:10:49,000 --> 02:10:50,000
对吧

4182
02:10:50,000 --> 02:10:51,000
可能用官方标准的

4183
02:10:51,000 --> 02:10:52,000
你可以用 import 的一个

4184
02:10:52,000 --> 02:10:53,000
Json 的例子

4185
02:10:53,000 --> 02:10:55,000
另外一个什么例子

4186
02:10:55,000 --> 02:10:56,000
request

4187
02:10:56,000 --> 02:10:59,000
一个 import request

4188
02:10:59,000 --> 02:11:00,000
你都准备好了

4189
02:11:00,000 --> 02:11:02,000
你在用的时候和它的

4190
02:11:02,000 --> 02:11:05,000
你怎么拿到它是一个完全分离的过程对吧

4191
02:11:05,000 --> 02:11:07,000
你是在 People install request

4192
02:11:07,000 --> 02:11:10,000
它去 Python 上面下载回来

4193
02:11:10,000 --> 02:11:12,000
但你并不知道它到底是在哪

4194
02:11:12,000 --> 02:11:13,000
然后你就用的时候

4195
02:11:13,000 --> 02:11:15,000
你也不需要关心这个东西

4196
02:11:15,000 --> 02:11:16,000
本来是 host 在哪里的

4197
02:11:16,000 --> 02:11:18,000
但 Go 里面不一样

4198
02:11:18,000 --> 02:11:21,000
Go 里面的 import 路径

4199
02:11:22,000 --> 02:11:24,000
就是官方认可的方式

4200
02:11:24,000 --> 02:11:26,000
就是你的那个

4201
02:11:26,000 --> 02:11:28,000
元代马库的路径

4202
02:11:28,000 --> 02:11:30,000
比如说它和 request 的相关的

4203
02:11:30,000 --> 02:11:31,000
它不能做到

4204
02:11:31,000 --> 02:11:33,000
比如说我自己有一个 github 的目录

4205
02:11:33,000 --> 02:11:34,000
我说

4206
02:11:34,000 --> 02:11:35,000
github.com

4207
02:11:35,000 --> 02:11:38,000
写下 request 下面一个什么软件

4208
02:11:38,000 --> 02:11:40,000
就是我的一个 Go 的软件

4209
02:11:40,000 --> 02:11:42,000
我就直接要把那一段写到

4210
02:11:42,000 --> 02:11:45,000
Go 的原程序里面去

4211
02:11:45,000 --> 02:11:47,000
这样我就可以

4212
02:11:47,000 --> 02:11:49,000
就如果我要引用某一个其他软件

4213
02:11:49,000 --> 02:11:52,000
我也得把它的 request 的地址

4214
02:11:52,000 --> 02:11:53,000
放到那个路径里面去

4215
02:11:53,000 --> 02:11:55,000
然后 go get

4216
02:11:55,000 --> 02:11:56,000
这个东西有个黑魔法

4217
02:11:56,000 --> 02:11:59,000
就是它能够自动识别常见的

4218
02:11:59,000 --> 02:12:01,000
包管理的地址

4219
02:12:01,000 --> 02:12:03,000
比如它知道 github 怎么去取

4220
02:12:03,000 --> 02:12:04,000
它知道那个 bbucket 怎么去取

4221
02:12:04,000 --> 02:12:07,000
它知道那个什么 mercury 那些东西怎么去取

4222
02:12:07,000 --> 02:12:09,000
然后它会自动的

4223
02:12:09,000 --> 02:12:12,000
给通过这个路径去找到 request

4224
02:12:12,000 --> 02:12:14,000
下载回来放到你本地的一个

4225
02:12:14,000 --> 02:12:16,000
约定好的路径里面去

4226
02:12:16,000 --> 02:12:18,000
然后这样就把这个事情完成了

4227
02:12:18,000 --> 02:12:20,000
而且它是一个 recursive 的过程

4228
02:12:20,000 --> 02:12:23,000
比如说我要去 go get 一个包

4229
02:12:23,000 --> 02:12:26,000
不要大家在 github 下面

4230
02:12:26,000 --> 02:12:28,000
某一个付鞋杠 bug 这个包

4231
02:12:28,000 --> 02:12:29,000
然后这个付鞋杠 bug 这个包

4232
02:12:29,000 --> 02:12:32,000
它有引用的付鞋杠 spam 这个包

4233
02:12:32,000 --> 02:12:35,000
它会连带的把那些东西也拿回来

4234
02:12:35,000 --> 02:12:37,000
因为它能够分析到里面的 import pass

4235
02:12:37,000 --> 02:12:39,000
它能够知道缺什么

4236
02:12:39,000 --> 02:12:40,000
然后它也知道因为那个 import pass

4237
02:12:40,000 --> 02:12:42,000
就是你的 githem 的地址

4238
02:12:42,000 --> 02:12:44,000
或者是 hgem 的地址

4239
02:12:44,000 --> 02:12:46,000
它能够去到那里

4240
02:12:46,000 --> 02:12:48,000
就把所有东西抓回来

4241
02:12:49,000 --> 02:12:52,000
所以它通过一种非常复杂的方式

4242
02:12:52,000 --> 02:12:56,000
使得一个包的 pository

4243
02:12:56,000 --> 02:12:58,000
somehow 成为了它的命名空间的一部分

4244
02:12:58,000 --> 02:13:00,000
对 没错 就这样的

4245
02:13:00,000 --> 02:13:01,000
有意思

4246
02:13:01,000 --> 02:13:04,000
那你觉得这种做法是

4247
02:13:04,000 --> 02:13:05,000
是鲜的蛋疼呢

4248
02:13:05,000 --> 02:13:07,000
还是自由其道的所在

4249
02:13:07,000 --> 02:13:08,000
这个怎么说呢

4250
02:13:08,000 --> 02:13:09,000
就是有好

4251
02:13:09,000 --> 02:13:10,000
这肯定是有好

4252
02:13:10,000 --> 02:13:11,000
是不是有坏

4253
02:13:11,000 --> 02:13:12,000
好 就是简单嘛

4254
02:13:12,000 --> 02:13:14,000
首先它明明我们讲的

4255
02:13:14,000 --> 02:13:17,000
它不是一个集中化的东西

4256
02:13:17,000 --> 02:13:18,000
它可是一个分布式的东西

4257
02:13:18,000 --> 02:13:19,000
它没有一个

4258
02:13:19,000 --> 02:13:21,000
所以它不能说你给它一个包的名字

4259
02:13:21,000 --> 02:13:23,000
它默认去哪个地方去找

4260
02:13:23,000 --> 02:13:24,000
然后把你下载回来

4261
02:13:24,000 --> 02:13:27,000
对吧 因为它没有这么一个中央存储的地方

4262
02:13:27,000 --> 02:13:29,000
所以它只能把这个方式

4263
02:13:29,000 --> 02:13:31,000
把这个地址的信息隐藏

4264
02:13:31,000 --> 02:13:34,000
就这个签入到这个包的

4265
02:13:34,000 --> 02:13:36,000
这个元代码里面去

4266
02:13:36,000 --> 02:13:38,000
然后从这种 go-get 的工具去

4267
02:13:38,000 --> 02:13:40,000
把这个事情帮你解决了

4268
02:13:40,000 --> 02:13:41,000
但是它不好的地方

4269
02:13:41,000 --> 02:13:42,000
其实也很明显了

4270
02:13:42,000 --> 02:13:44,000
比如说最简单一个例子

4271
02:13:44,000 --> 02:13:46,000
我用了一个包

4272
02:13:47,000 --> 02:13:48,000
然后我 fork 了它

4273
02:13:48,000 --> 02:13:50,000
它官方功能不太好

4274
02:13:50,000 --> 02:13:51,000
我 fork 它

4275
02:13:51,000 --> 02:13:52,000
然后我要改的时候

4276
02:13:52,000 --> 02:13:53,000
你就会发现很痛苦

4277
02:13:53,000 --> 02:13:55,000
因为你改的时候就会必然

4278
02:13:55,000 --> 02:13:56,000
你 fork 的就是会必然改变

4279
02:13:56,000 --> 02:13:58,000
它的那个 import 路径嘛

4280
02:13:58,000 --> 02:13:59,000
对

4281
02:13:59,000 --> 02:14:02,000
但是如果里面又有 import 自己的

4282
02:14:02,000 --> 02:14:04,000
或者别人有 import 你的时候

4283
02:14:04,000 --> 02:14:06,000
你也去改相关

4284
02:14:06,000 --> 02:14:08,000
import 到你的那个包的

4285
02:14:08,000 --> 02:14:10,000
软件才能够使得你的修改

4286
02:14:10,000 --> 02:14:12,000
能够被别人看见

4287
02:14:13,000 --> 02:14:17,000
所以它 somehow 增加了

4288
02:14:17,000 --> 02:14:20,000
软件包维护的难度

4289
02:14:20,000 --> 02:14:21,000
对就有点

4290
02:14:21,000 --> 02:14:22,000
这里有点小不爽嘛

4291
02:14:22,000 --> 02:14:24,000
就是你得去手工改一下

4292
02:14:24,000 --> 02:14:25,000
那个 import 路径

4293
02:14:25,000 --> 02:14:26,000
如果你 fork 的时候

4294
02:14:26,000 --> 02:14:28,000
如果你 fork 没有被这个

4295
02:14:28,000 --> 02:14:29,000
merge 回去的话

4296
02:14:29,000 --> 02:14:31,000
就说你做了一个本地的

4297
02:14:31,000 --> 02:14:33,000
不兼容的 fork

4298
02:14:33,000 --> 02:14:35,000
然后另外一个问题就是说

4299
02:14:35,000 --> 02:14:36,000
你会发现

4300
02:14:36,000 --> 02:14:39,000
整个过程都没有出现版本这个概念

4301
02:14:39,000 --> 02:14:41,000
比如说你可以在拍摄也好

4302
02:14:41,000 --> 02:14:43,000
还是那个 npm 也好

4303
02:14:43,000 --> 02:14:44,000
你去安装一个包的时候

4304
02:14:44,000 --> 02:14:46,000
它会告诉你安装了什么版本

4305
02:14:46,000 --> 02:14:47,000
对吧

4306
02:14:47,000 --> 02:14:49,000
它甚至可以告诉你说

4307
02:14:49,000 --> 02:14:50,000
请尽量安装

4308
02:14:50,000 --> 02:14:52,000
接近于那个版本的版本

4309
02:14:52,000 --> 02:14:53,000
对

4310
02:14:53,000 --> 02:14:54,000
这个还挺

4311
02:14:54,000 --> 02:14:55,000
就是它有一个中央存证

4312
02:14:55,000 --> 02:14:56,000
它会有这个

4313
02:14:56,000 --> 02:14:57,000
就是包的名字

4314
02:14:57,000 --> 02:14:58,000
然后有这个版本号

4315
02:14:58,000 --> 02:14:59,000
然后包括版本历史的版本号

4316
02:14:59,000 --> 02:15:00,000
它会记录下来

4317
02:15:00,000 --> 02:15:01,000
然后它你可以说

4318
02:15:01,000 --> 02:15:03,000
我可以指定说 2.0

4319
02:15:03,000 --> 02:15:04,000
2.差

4320
02:15:04,000 --> 02:15:05,000
咱们都可以

4321
02:15:05,000 --> 02:15:06,000
或者说我 1.2.1

4322
02:15:06,000 --> 02:15:07,000
或者 1.2.5

4323
02:15:07,000 --> 02:15:08,000
或者 1.2.5.5

4324
02:15:08,000 --> 02:15:09,000
对吧

4325
02:15:09,000 --> 02:15:10,000
或者说不高于某个版本

4326
02:15:10,000 --> 02:15:11,000
对

4327
02:15:11,000 --> 02:15:12,000
这也是采用这个

4328
02:15:12,000 --> 02:15:14,000
所谓 Semitic version 里的一个优点

4329
02:15:14,000 --> 02:15:15,000
对

4330
02:15:15,000 --> 02:15:16,000
对 没错

4331
02:15:16,000 --> 02:15:17,000
你可以做主 slead

4332
02:15:17,000 --> 02:15:18,000
扛文省 继续扛文省的事情

4333
02:15:18,000 --> 02:15:19,000
对

4334
02:15:19,000 --> 02:15:21,000
购里面完全没有版本的概念

4335
02:15:21,000 --> 02:15:23,000
购里面所有东西都是一个

4336
02:15:23,000 --> 02:15:24,000
就是一个 git

4337
02:15:24,000 --> 02:15:26,000
就是一个 repositor 地址

4338
02:15:26,000 --> 02:15:27,000
完了

4339
02:15:27,000 --> 02:15:29,000
然后他们的说法是说

4340
02:15:29,000 --> 02:15:31,000
如果你发布了一个包

4341
02:15:31,000 --> 02:15:33,000
你就不要改它的接口

4342
02:15:33,000 --> 02:15:34,000
forever

4343
02:15:36,000 --> 02:15:37,000
这个有点太

4344
02:15:37,000 --> 02:15:38,000
太过了 对不对

4345
02:15:38,000 --> 02:15:39,000
太任性了吧

4346
02:15:39,000 --> 02:15:40,000
这简直就是

4347
02:15:40,000 --> 02:15:41,000
Google 就是这么任性

4348
02:15:41,000 --> 02:15:43,000
对 简直就是任性

4349
02:15:43,000 --> 02:15:44,000
这哪里是任性

4350
02:15:44,000 --> 02:15:45,000
简直就是强硬 好不好

4351
02:15:47,000 --> 02:15:49,000
然后他们的说法也很简单

4352
02:15:49,000 --> 02:15:51,000
就是说如果你做了一个

4353
02:15:52,000 --> 02:15:54,000
接口不兼容的改进

4354
02:15:54,000 --> 02:15:56,000
那么请用一个新的

4355
02:15:56,000 --> 02:15:57,000
import 的地址

4356
02:15:57,000 --> 02:15:59,000
这个我觉得有点

4357
02:15:59,000 --> 02:16:01,000
那为什么不能再

4358
02:16:01,000 --> 02:16:02,000
让它更进一步

4359
02:16:02,000 --> 02:16:05,000
直接指定 pository brand

4360
02:16:05,000 --> 02:16:07,000
对 这就是很多人要吐槽的地方

4361
02:16:07,000 --> 02:16:09,000
就是说那为什么不支持

4362
02:16:09,000 --> 02:16:10,000
你让我直接说

4363
02:16:10,000 --> 02:16:11,000
我可以 tag 吗 对吧

4364
02:16:11,000 --> 02:16:12,000
我可以 tag 某一个

4365
02:16:12,000 --> 02:16:13,000
这样也可以

4366
02:16:13,000 --> 02:16:14,000
大家已经想象

4367
02:16:14,000 --> 02:16:16,000
按理说还蛮合理的 对吧

4368
02:16:16,000 --> 02:16:18,000
但问题出在哪呢

4369
02:16:18,000 --> 02:16:19,000
问题出在

4370
02:16:19,000 --> 02:16:21,000
Go 也没有指定一个

4371
02:16:21,000 --> 02:16:24,000
默认的软件控制的

4372
02:16:24,000 --> 02:16:26,000
软件 veraging control 的东西

4373
02:16:26,000 --> 02:16:28,000
比如说 git 里面有 branch 的概念

4374
02:16:28,000 --> 02:16:31,000
然后 marker 里面有这个 branch 的概念

4375
02:16:31,000 --> 02:16:32,000
scv 有吗

4376
02:16:34,000 --> 02:16:35,000
也有 好像有创造的

4377
02:16:35,000 --> 02:16:36,000
scv

4378
02:16:36,000 --> 02:16:38,000
scv

4379
02:16:38,000 --> 02:16:44,000
scv 是 comma separated

4380
02:16:44,000 --> 02:16:47,000
对 挖矿机

4381
02:16:47,000 --> 02:16:49,000
scv 不支持对吧

4382
02:16:49,000 --> 02:16:50,000
还有 savversion

4383
02:16:50,000 --> 02:16:52,000
它里面也有 tag 的概念

4384
02:16:52,000 --> 02:16:57,000
savversion is a very important branch

4385
02:16:57,000 --> 02:16:59,000
对 就是说其实

4386
02:16:59,000 --> 02:17:01,000
你要去兼容没有这些东西

4387
02:17:01,000 --> 02:17:03,000
就是最基础的

4388
02:17:03,000 --> 02:17:05,000
你只有一个 url 而已

4389
02:17:05,000 --> 02:17:07,000
就你不能去指定其他的东西

4390
02:17:07,000 --> 02:17:10,000
而且因为 gogit 也是封装了

4391
02:17:10,000 --> 02:17:12,000
那些命令行工具而已

4392
02:17:12,000 --> 02:17:15,000
包括 git 封装 HG

4393
02:17:15,000 --> 02:17:19,000
封装了 savversion 是什么命令

4394
02:17:19,000 --> 02:17:21,000
sv 对

4395
02:17:21,000 --> 02:17:24,000
它封装那些命令的调用

4396
02:17:24,000 --> 02:17:27,000
它也没有办法去强制说

4397
02:17:27,000 --> 02:17:30,000
你能用一个什么样的方法

4398
02:17:30,000 --> 02:17:32,000
去大家在不同的版本库之间

4399
02:17:32,000 --> 02:17:35,000
用不同的方法管理软件版本

4400
02:17:35,000 --> 02:17:37,000
也能够指定同一个版本出来

4401
02:17:37,000 --> 02:17:38,000
对吧

4402
02:17:38,000 --> 02:17:40,000
所以其实就变得很难

4403
02:17:40,000 --> 02:17:41,000
你知道

4404
02:17:41,000 --> 02:17:43,000
凡是一旦变成分布式

4405
02:17:43,000 --> 02:17:45,000
没有一个中央集权的东西

4406
02:17:45,000 --> 02:17:48,000
就变得很难解决

4407
02:17:48,000 --> 02:17:50,000
对 这也是其中之一

4408
02:17:50,000 --> 02:17:51,000
所以现在有一些

4409
02:17:51,000 --> 02:17:53,000
就是社区来的一些方法

4410
02:17:53,000 --> 02:17:54,000
就是说

4411
02:17:54,000 --> 02:17:57,000
我们不要

4412
02:17:57,000 --> 02:18:00,000
为了解决刚才说的版本管理的问题

4413
02:18:00,000 --> 02:18:01,000
我们要指定某个版本

4414
02:18:01,000 --> 02:18:05,000
我们不简单的直接用 go get

4415
02:18:05,000 --> 02:18:07,000
我们是说写一个文件

4416
02:18:07,000 --> 02:18:11,000
声明我需要哪一个软件的哪一个版本

4417
02:18:11,000 --> 02:18:12,000
通过一个 branch 也好

4418
02:18:12,000 --> 02:18:14,000
还是通过 g tag

4419
02:18:14,000 --> 02:18:15,000
或者什么方式也好

4420
02:18:15,000 --> 02:18:16,000
把它写在一起

4421
02:18:16,000 --> 02:18:17,000
然后我再通过

4422
02:18:17,000 --> 02:18:19,000
第三方的社区维护的工具

4423
02:18:19,000 --> 02:18:21,000
去安装成软件版本

4424
02:18:21,000 --> 02:18:24,000
而不是用官方的 go get 的这种形式

4425
02:18:26,000 --> 02:18:27,000
OK

4426
02:18:27,000 --> 02:18:30,000
具体来说有什么样的工具

4427
02:18:30,000 --> 02:18:33,000
有一个比较常见的一个叫 go depth

4428
02:18:33,000 --> 02:18:34,000
go depth

4429
02:18:34,000 --> 02:18:36,000
就是 go dependency 的一个

4430
02:18:36,000 --> 02:18:37,000
go dependency

4431
02:18:37,000 --> 02:18:38,000
对 没有一个工具

4432
02:18:38,000 --> 02:18:39,000
还有一些其他

4433
02:18:39,000 --> 02:18:41,000
就在这一块 go 里面

4434
02:18:41,000 --> 02:18:43,000
就社区里面还是有三四个选项

4435
02:18:43,000 --> 02:18:44,000
就是看

4436
02:18:44,000 --> 02:18:45,000
我不知道之后会怎么样

4437
02:18:45,000 --> 02:18:46,000
但现在 go depth

4438
02:18:46,000 --> 02:18:48,000
这个是一个比较用的比较多的

4439
02:18:48,000 --> 02:18:50,000
一个工具

4440
02:18:50,000 --> 02:18:52,000
然后另外一个要解决的问题

4441
02:18:52,000 --> 02:18:53,000
就是说如果你分布式

4442
02:18:53,000 --> 02:18:56,000
你也没有一个集中存储代码的地方

4443
02:18:56,000 --> 02:18:59,000
那同样的你也不能保证那个代码

4444
02:18:59,000 --> 02:19:01,000
你今天在那明天还在那对吧

4445
02:19:01,000 --> 02:19:02,000
那个人可能就直接

4446
02:19:02,000 --> 02:19:04,000
把他的 get 项目删除了对吧

4447
02:19:04,000 --> 02:19:06,000
之前也有遇到过什么

4448
02:19:06,000 --> 02:19:07,000
什么 wire

4449
02:19:07,000 --> 02:19:09,000
还有那几个人他从网上消失的时候

4450
02:19:09,000 --> 02:19:10,000
连带的

4451
02:19:10,000 --> 02:19:13,000
把他的 getup 账号也给清掉了

4452
02:19:13,000 --> 02:19:15,000
这样如果你一拉他代码

4453
02:19:15,000 --> 02:19:17,000
你发现 哇 没了怎么办

4454
02:19:17,000 --> 02:19:18,000
没错

4455
02:19:18,000 --> 02:19:20,000
对 所以就是其实是一个比较

4456
02:19:20,000 --> 02:19:22,000
在这种分布设厂下

4457
02:19:22,000 --> 02:19:23,000
一个比较推荐的方式就是说

4458
02:19:23,000 --> 02:19:25,000
你需要一来代码

4459
02:19:25,000 --> 02:19:28,000
也加入你的本地的版本控制里面去

4460
02:19:28,000 --> 02:19:30,000
对 然后这样的话有一些什么难度呢

4461
02:19:30,000 --> 02:19:31,000
就是

4462
02:19:31,000 --> 02:19:34,000
那你要想办法你怎么去分离你自己写代码

4463
02:19:34,000 --> 02:19:37,000
和你依赖的代码的历史的版本的管理

4464
02:19:37,000 --> 02:19:39,000
最好能够具别开来对吧

4465
02:19:39,000 --> 02:19:40,000
这样可以分别升级嘛

4466
02:19:40,000 --> 02:19:43,000
对 这也就无形中增加了你对

4467
02:19:43,000 --> 02:19:48,000
要求你对版本管理系统又要有足够多的知识

4468
02:19:48,000 --> 02:19:49,000
而相比之下

4469
02:19:49,000 --> 02:19:51,000
其他的语言就比可以比较

4470
02:19:51,000 --> 02:19:54,000
专心的放在开发上面

4471
02:19:54,000 --> 02:19:55,000
对 对 对

4472
02:19:55,000 --> 02:19:57,000
但其实这个怎么来说

4473
02:19:57,000 --> 02:19:58,000
从总体来可用性的角度来讲

4474
02:19:58,000 --> 02:19:59,000
反而是好的

4475
02:19:59,000 --> 02:20:01,000
因为这样的话你就可以确保

4476
02:20:01,000 --> 02:20:03,000
你只要拿到这个软件包

4477
02:20:03,000 --> 02:20:04,000
然后这个软件包里面的

4478
02:20:04,000 --> 02:20:06,000
所谓依赖是通过这种方式来管理的

4479
02:20:06,000 --> 02:20:09,000
就是你把它 check 进你的本地的代码库里面

4480
02:20:09,000 --> 02:20:11,000
那么你拿到这个代码库里面

4481
02:20:11,000 --> 02:20:12,000
你知道它是一个完整的

4482
02:20:12,000 --> 02:20:15,000
就是你可以用代码库编写出来一个最终的结果

4483
02:20:15,000 --> 02:20:18,000
不需要去再经过一个网络的下载的过程

4484
02:20:18,000 --> 02:20:19,000
OK

4485
02:20:19,000 --> 02:20:23,000
所以如果你要为世界的终结做准备的话

4486
02:20:23,000 --> 02:20:25,000
那其实不够了 还变成

4487
02:20:25,000 --> 02:20:27,000
对 所以它是一个

4488
02:20:27,000 --> 02:20:28,000
你可以看到

4489
02:20:28,000 --> 02:20:30,000
刚才我们这一系列的主题都是一个

4490
02:20:30,000 --> 02:20:33,000
无中心的一个诉求

4491
02:20:33,000 --> 02:20:35,000
所以从这一点来讲

4492
02:20:35,000 --> 02:20:39,000
它跟 Git 的想法其实还是蛮不谋而合的

4493
02:20:39,000 --> 02:20:41,000
Git 说我不要什么

4494
02:20:41,000 --> 02:20:44,000
SVN 和 SESV 都是需要有个中央服务器

4495
02:20:44,000 --> 02:20:46,000
你才可以 check in

4496
02:20:46,000 --> 02:20:48,000
再可以同步软件的代码

4497
02:20:48,000 --> 02:20:49,000
但是 Git 不需要

4498
02:20:49,000 --> 02:20:50,000
你可以本地修改

4499
02:20:50,000 --> 02:20:52,000
本地 commit 对吧

4500
02:20:53,000 --> 02:20:54,000
Git 的话也是这样

4501
02:20:54,000 --> 02:20:56,000
本地编译 本地出结果

4502
02:20:56,000 --> 02:20:58,000
这样就比较好一点

4503
02:20:59,000 --> 02:21:02,000
当然代码也就是用起来会比较繁琐

4504
02:21:02,000 --> 02:21:03,000
而且在

4505
02:21:03,000 --> 02:21:06,000
就是 Git 官方是对这个事情是没有说法的

4506
02:21:06,000 --> 02:21:07,000
就说你们自己想办法解决

4507
02:21:07,000 --> 02:21:08,000
我们不管

4508
02:21:08,000 --> 02:21:11,000
因为这里面有一个很务实的情况

4509
02:21:11,000 --> 02:21:13,000
就是因为 Git 的大部分开发者还是 Google

4510
02:21:13,000 --> 02:21:15,000
Google 的一些购乘师

4511
02:21:15,000 --> 02:21:20,000
然后他们 Google 内部是用一个非常复杂先进的

4512
02:21:20,000 --> 02:21:21,000
Bu 的系统在写程序

4513
02:21:21,000 --> 02:21:22,000
哪怕是

4514
02:21:22,000 --> 02:21:24,000
而且他们是跨语言的

4515
02:21:24,000 --> 02:21:27,000
所以他们也不用 GoGit 来装程序

4516
02:21:27,000 --> 02:21:31,000
所以 GoGit 到底是做给谁用的

4517
02:21:31,000 --> 02:21:32,000
如果不吃自己的狗食的话

4518
02:21:32,000 --> 02:21:34,000
那么他们是开发条适用

4519
02:21:34,000 --> 02:21:35,000
就是你可以

4520
02:21:35,000 --> 02:21:37,000
因为它大部分时候还是可以用的

4521
02:21:37,000 --> 02:21:39,000
你不是说你每天要 GoGit 的一遍

4522
02:21:39,000 --> 02:21:40,000
你 GoGit 回来一个版本

4523
02:21:40,000 --> 02:21:42,000
它大部分时候还是稳定可靠的

4524
02:21:42,000 --> 02:21:44,000
因为它还是鼓励说

4525
02:21:44,000 --> 02:21:46,000
这个 API 要尽量稳定可靠

4526
02:21:46,000 --> 02:21:49,000
所以你拿回来大部分时候还是可用的

4527
02:21:49,000 --> 02:21:51,000
只是说当你要正式发布的时候

4528
02:21:51,000 --> 02:21:53,000
你最好把你的依赖那些

4529
02:21:53,000 --> 02:21:54,000
通过刚才我讲的那些方法

4530
02:21:54,000 --> 02:21:56,000
check 到你本地的一个目录里面去

4531
02:21:56,000 --> 02:21:58,000
这样的话会

4532
02:21:58,000 --> 02:22:00,000
可靠性会好一些

4533
02:22:00,000 --> 02:22:02,000
OK

4534
02:22:02,000 --> 02:22:04,000
所以结束就是因为 Go

4535
02:22:04,000 --> 02:22:07,000
它官方没有一个说法

4536
02:22:07,000 --> 02:22:10,000
也没有一个他们自己内部也用的东西

4537
02:22:10,000 --> 02:22:12,000
他们内部用的也不是开源的

4538
02:22:12,000 --> 02:22:14,000
也不是一个商业系统

4539
02:22:14,000 --> 02:22:17,000
所以就没有办法把它给我们共享

4540
02:22:17,000 --> 02:22:20,000
给我们也用不了 太复杂了

4541
02:22:20,000 --> 02:22:25,000
对 其实 3 号跟苹果这边的阵营差不多

4542
02:22:25,000 --> 02:22:28,000
苹果也是不管 Object C 还是 Swift

4543
02:22:28,000 --> 02:22:31,000
其实都没有一个官方的版本

4544
02:22:31,000 --> 02:22:33,000
包管的系统

4545
02:22:33,000 --> 02:22:37,000
Cocopods 虽然是

4546
02:22:37,000 --> 02:22:40,000
目前的继承事实的包管系统

4547
02:22:40,000 --> 02:22:45,000
但好像官方也没有表现出任何态度

4548
02:22:45,000 --> 02:22:48,000
是支持它还是觉得可能要拿出

4549
02:22:48,000 --> 02:22:50,000
要自己另做一套的

4550
02:22:50,000 --> 02:22:52,000
苹果应该不会管这种事情吧

4551
02:22:52,000 --> 02:22:54,000
我觉得

4552
02:22:54,000 --> 02:22:56,000
我觉得对于 Kalash 来说

4553
02:22:56,000 --> 02:22:58,000
这个东西其实还是蛮重要的

4554
02:22:58,000 --> 02:23:00,000
这肯定毫不怀疑

4555
02:23:00,000 --> 02:23:03,000
但问题是说苹果会觉得这个事情很重要

4556
02:23:03,000 --> 02:23:05,000
我很怀疑

4557
02:23:05,000 --> 02:23:08,000
我是觉得上次 WLDC 之后

4558
02:23:08,000 --> 02:23:12,000
苹果既然对 Kalash 有了这么难得一次的微笑

4559
02:23:12,000 --> 02:23:15,000
也许接下来有些事情也是可以梦想的

4560
02:23:15,000 --> 02:23:18,000
是吗?我强烈建议你听一下

4561
02:23:18,000 --> 02:23:21,000
还没明天发布的 IT 公伦第 131 期

4562
02:23:21,000 --> 02:23:25,000
看一下苹果对 Kalash 的真实态度是什么

4563
02:23:25,000 --> 02:23:27,000
好吧

4564
02:23:27,000 --> 02:23:29,000
感觉又要被泼冷水了

4565
02:23:29,000 --> 02:23:33,000
今年的 YouTubeRevind 3 号泼冷水泼了很久

4566
02:23:33,000 --> 02:23:35,000
为什么

4567
02:23:35,000 --> 02:23:38,000
YouTube 年末的时候会有 Revind 的视频

4568
02:23:38,000 --> 02:23:41,000
例如今年知名

4569
02:23:41,000 --> 02:23:44,000
对

4570
02:23:44,000 --> 02:23:46,000
Revind

4571
02:23:46,000 --> 02:23:48,000
我觉得应该是念 Revind

4572
02:23:48,000 --> 02:23:50,000
Revind

4573
02:23:50,000 --> 02:23:52,000
对

4574
02:23:52,000 --> 02:23:57,000
然后它里面会立暑今年的比较知名的视频

4575
02:23:57,000 --> 02:24:00,000
然后把它们以某种方式重新拍一遍

4576
02:24:00,000 --> 02:24:03,000
然后在里面因为今年冰桶挑战很出名

4577
02:24:03,000 --> 02:24:07,000
然后在里面有大量知名人士互相泼冷水

4578
02:24:07,000 --> 02:24:09,000
泼冰水的情节

4579
02:24:09,000 --> 02:24:12,000
然后难道明天我要被泼冰水了

4580
02:24:12,000 --> 02:24:16,000
不过刚刚前面讲了这么多

4581
02:24:16,000 --> 02:24:19,000
就是各个语言自己本身的一些

4582
02:24:19,000 --> 02:24:21,000
包管理的机制也好

4583
02:24:21,000 --> 02:24:22,000
以软件也好

4584
02:24:22,000 --> 02:24:23,000
其实我一直有一个问题

4585
02:24:23,000 --> 02:24:28,000
为什么没有一个能够跨语言解决这个问题的工具呢

4586
02:24:28,000 --> 02:24:31,000
就是我们为什么每个语言出来

4587
02:24:31,000 --> 02:24:35,000
都要自己再重复这么一套很麻烦啰嗦的事情

4588
02:24:35,000 --> 02:24:40,000
然后要把这个已经解决的问题再解决一遍

4589
02:24:44,000 --> 02:24:46,000
如果你要说这个的话

4590
02:24:46,000 --> 02:24:49,000
那我觉得 Nagat 可能是一个这样的工具吧

4591
02:24:49,000 --> 02:24:51,000
为什么

4592
02:24:51,000 --> 02:24:54,000
因为你觉得 Nagat 并不限定于是

4593
02:24:54,000 --> 02:24:57,000
专门为 C-Shop 或者是专门为 Dotnet 平台

4594
02:24:57,000 --> 02:24:59,000
所做的一个包管理工具

4595
02:24:59,000 --> 02:25:01,000
它你像我刚才说的

4596
02:25:01,000 --> 02:25:04,000
它可以拿到这块这种东西

4597
02:25:04,000 --> 02:25:05,000
这个我没有意义

4598
02:25:05,000 --> 02:25:07,000
我是说比如说像

4599
02:25:09,000 --> 02:25:12,000
Node 那些 NPM 它只能装 Javascript 的包

4600
02:25:12,000 --> 02:25:15,000
然后 Ruby,JAM 也只能装 Ruby 的包

4601
02:25:15,000 --> 02:25:19,000
就是说在现在流行的东西都是根据各个语言

4602
02:25:19,000 --> 02:25:22,000
独特的一些系统并不能有一个

4603
02:25:22,000 --> 02:25:24,000
通用的系统解决他们之间的问题

4604
02:25:24,000 --> 02:25:27,000
你是说如果 Nagat 这种方式流行起来

4605
02:25:27,000 --> 02:25:30,000
我们也可以用 Nagat 装 Javascript 的包

4606
02:25:30,000 --> 02:25:32,000
然后用 Nagat 装 Go 的包吗

4607
02:25:32,000 --> 02:25:33,000
还是怎么样

4608
02:25:34,000 --> 02:25:35,000
可是反过来

4609
02:25:35,000 --> 02:25:42,000
我的理解是有些语言的部分包

4610
02:25:42,000 --> 02:25:45,000
也是可以通过比如说 Apps 之类的东西来安装的

4611
02:25:45,000 --> 02:25:46,000
对

4612
02:25:46,000 --> 02:25:48,000
但是如果朝着一个方式发展的话

4613
02:25:48,000 --> 02:25:49,000
你是不是就可以说

4614
02:25:49,000 --> 02:25:53,000
整个系统平台上干脆只有一个包管系统

4615
02:25:53,000 --> 02:25:55,000
它既负责软件安装

4616
02:25:55,000 --> 02:26:00,000
又负责所有语言的相关包栏装

4617
02:26:00,000 --> 02:26:01,000
就可以了

4618
02:26:01,000 --> 02:26:03,000
我觉得其实对于 C-Uan 来说

4619
02:26:03,000 --> 02:26:06,000
C-Uan 没有一个实时的安装包

4620
02:26:06,000 --> 02:26:08,000
对安装包管系统对吧

4621
02:26:08,000 --> 02:26:09,000
可是反过来说

4622
02:26:09,000 --> 02:26:12,000
你可以说 N 任何一个 App 也好

4623
02:26:12,000 --> 02:26:13,000
RnM 也好

4624
02:26:13,000 --> 02:26:20,000
你在安装 Develop 的 Dev 或者是 Develop 包的时候

4625
02:26:20,000 --> 02:26:26,000
你不就已经安装了 C-Uan 所需要的投稳件吗

4626
02:26:26,000 --> 02:26:27,000
对

4627
02:26:27,000 --> 02:26:29,000
也许一个语言发展到足够壮大的时候

4628
02:26:29,000 --> 02:26:37,000
也许就可以通过一个泛用的 package manager 来解决这个问题了

4629
02:26:37,000 --> 02:26:42,000
其实还是一个不够成熟的表现

4630
02:26:42,000 --> 02:26:43,000
对

4631
02:26:43,000 --> 02:26:44,000
应该是这样的

4632
02:26:44,000 --> 02:26:49,000
但曾思不齐乃是生活之美的来源

4633
02:26:49,000 --> 02:26:50,000
是这么说吗

4634
02:26:50,000 --> 02:26:51,000
确实

4635
02:26:51,000 --> 02:26:56,000
但我不确定这在程序语言这一套

4636
02:26:56,000 --> 02:26:59,000
在包管理器这样是不是已经是好的

4637
02:26:59,000 --> 02:27:03,000
但是每次跨一个语言都要重新学习一遍

4638
02:27:03,000 --> 02:27:05,000
还是蛮高层本的一件事情

4639
02:27:05,000 --> 02:27:06,000
我觉得

4640
02:27:06,000 --> 02:27:09,000
这就是 polyglot 的宿命

4641
02:27:09,000 --> 02:27:11,000
好悲伤

4642
02:27:11,000 --> 02:27:12,000
如果你只会渣满的话

4643
02:27:12,000 --> 02:27:15,000
也许就没有所有这些痛苦

4644
02:27:15,000 --> 02:27:18,000
你会生活在一种无知的幸福里面

4645
02:27:18,000 --> 02:27:20,000
这是一个悲伤的故事

4646
02:27:22,000 --> 02:27:23,000
好吧

4647
02:27:23,000 --> 02:27:25,000
已经两个半小时了

4648
02:27:25,000 --> 02:27:26,000
好

4649
02:27:26,000 --> 02:27:30,000
今天我们的吐槽就到这里为止吧

4650
02:27:30,000 --> 02:27:31,000
对

4651
02:27:31,000 --> 02:27:35,000
我们今天的主题是 package management

4652
02:27:35,000 --> 02:27:39,000
其实我们本来还想就这个话题延伸到比如说

4653
02:27:39,000 --> 02:27:43,000
一个做好的包怎样部署到服务器上

4654
02:27:43,000 --> 02:27:46,000
一直以为要是部署所产生的一系列问题

4655
02:27:46,000 --> 02:27:50,000
比如说部署并不简简简简单单的事

4656
02:27:50,000 --> 02:27:53,000
把一个 binary 扔到服务器上去运行这么简单

4657
02:27:53,000 --> 02:27:56,000
当然对于某些构成学来说这是可能的

4658
02:27:56,000 --> 02:27:59,000
但对于我们其他的属命来说

4659
02:27:59,000 --> 02:28:02,000
这里面还是有很多学问所在

4660
02:28:02,000 --> 02:28:06,000
但是今天我们也没有时间展开了

4661
02:28:06,000 --> 02:28:08,000
所以还是下一次找机会吧

4662
02:28:08,000 --> 02:28:10,000
就明年再说了

4663
02:28:10,000 --> 02:28:13,000
我会看到你在 2015 年

4664
02:28:13,000 --> 02:28:14,000
是的

4665
02:28:14,000 --> 02:28:17,000
就是各位听到我们这一期节目的时候

4666
02:28:17,000 --> 02:28:19,000
应该还有两三天就要新年了

4667
02:28:19,000 --> 02:28:22,000
那也在这里祝大家新年快乐

4668
02:28:23,000 --> 02:28:24,000
怎么样

4669
02:28:24,000 --> 02:28:25,000
好

4670
02:28:25,000 --> 02:28:27,000
我们下期再见

4671
02:28:27,000 --> 02:28:31,000
联同着前两期的所有的 feedback

4672
02:28:31,000 --> 02:28:32,000
明年再见

4673
02:28:32,000 --> 02:28:34,000
我写着新年的新气象对

4674
02:28:34,000 --> 02:28:39,000
重新来做一期新的内核服务

4675
02:28:40,000 --> 02:28:41,000
OK

4676
02:28:41,000 --> 02:28:42,000
我们今天做了七期吗

4677
02:28:42,000 --> 02:28:43,000
不错

4678
02:28:44,000 --> 02:28:45,000
好吧

