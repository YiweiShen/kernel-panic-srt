1
00:00:00,000 --> 00:00:03,000
321 开始

2
00:00:22,000 --> 00:00:23,000
大家好

3
00:00:23,000 --> 00:00:26,000
今天是 2020 年的 5 月 26 号

4
00:00:26,000 --> 00:00:29,000
也是自弹自唱的第 126 期

5
00:00:29,000 --> 00:00:32,000
您正在说明内合恐慌一党大志一算

6
00:00:32,000 --> 00:00:34,000
一颗戏为主题的娱乐 Podcast

7
00:00:34,000 --> 00:00:35,000
我们号称硬核

8
00:00:35,000 --> 00:00:36,000
但是没有什么干货

9
00:00:36,000 --> 00:00:37,000
想听不想听也别听

10
00:00:39,000 --> 00:00:41,000
这是我们的第 58 期

11
00:00:41,000 --> 00:00:42,000
来那边

12
00:00:42,000 --> 00:00:42,000
是啊

13
00:00:42,000 --> 00:00:46,000
这同时也是我们自弹自唱和内合恐慌串台的

14
00:00:46,000 --> 00:00:48,000
自弹自串的第 97

15
00:00:48,000 --> 00:00:49,000
嗯

16
00:00:49,000 --> 00:00:52,000
自弹自唱是全球首家用华与制作的

17
00:00:52,000 --> 00:00:53,000
自体排音主题播客节目

18
00:00:53,000 --> 00:00:56,000
我是主播文传西班东英剧 Eric

19
00:00:57,000 --> 00:00:58,000
我是主播黄普江面清真宇

20
00:00:58,000 --> 00:00:59,000
前真宇

21
00:01:00,000 --> 00:01:01,000
我是乌涛

22
00:01:01,000 --> 00:01:03,000
我是 Rail

23
00:01:03,000 --> 00:01:04,000
我们都串了 97 了

24
00:01:05,000 --> 00:01:06,000
对呀

25
00:01:06,000 --> 00:01:08,000
然后我们上一期是

26
00:01:08,000 --> 00:01:09,000
嗯

27
00:01:09,000 --> 00:01:10,000
一年之前录的

28
00:01:10,000 --> 00:01:12,000
我们串了 97 了

29
00:01:12,000 --> 00:01:14,000
我们都还没有那个 title

30
00:01:14,000 --> 00:01:17,000
就是你们前面很酷炫的那个 title

31
00:01:17,000 --> 00:01:18,000
我们曾经有过

32
00:01:18,000 --> 00:01:20,000
但是我们觉得太 awkward

33
00:01:20,000 --> 00:01:20,000
所以我们放弃了

34
00:01:22,000 --> 00:01:24,000
距离上次自弹自串第 8 期

35
00:01:24,000 --> 00:01:26,000
那期是叫什么

36
00:01:26,000 --> 00:01:29,000
人造千年虫瓦那些是令和元年

37
00:01:29,000 --> 00:01:30,000
对吧

38
00:01:30,000 --> 00:01:31,000
2019 年的 5 月 14 号

39
00:01:31,000 --> 00:01:33,000
刚好是整整一年

40
00:01:33,000 --> 00:01:35,000
在这一年里面

41
00:01:35,000 --> 00:01:38,000
我们的自弹自唱从第 99 期

42
00:01:38,000 --> 00:01:40,000
更新到到 126 期

43
00:01:40,000 --> 00:01:42,000
内合恐慌从第 55 期

44
00:01:42,000 --> 00:01:43,000
更新到了第 58 期

45
00:01:43,000 --> 00:01:44,000
是吧

46
00:01:47,000 --> 00:01:48,000
串海双天

47
00:01:48,000 --> 00:01:50,000
是中间经历多少巨变

48
00:01:50,000 --> 00:01:51,000
人家都两位数变三位数了

49
00:01:51,000 --> 00:01:53,000
我们还缓慢的爬行

50
00:01:53,000 --> 00:01:55,000
我们终共更新了三期

51
00:01:57,000 --> 00:01:58,000
但是你们很厉害

52
00:01:58,000 --> 00:02:00,000
你们图标也变了

53
00:02:00,000 --> 00:02:02,000
那个域名也变了

54
00:02:02,000 --> 00:02:03,000
然后连官网的字体都换掉了

55
00:02:03,000 --> 00:02:04,000
对

56
00:02:04,000 --> 00:02:06,000
我们这个是应该是 2020 年

57
00:02:06,000 --> 00:02:08,000
有什么改头画面了

58
00:02:08,000 --> 00:02:10,000
之前我们功夫都用在节目之外了

59
00:02:10,000 --> 00:02:11,000
应该说

60
00:02:11,000 --> 00:02:12,000
这叫看得见的地方

61
00:02:12,000 --> 00:02:13,000
听不见的地方

62
00:02:15,000 --> 00:02:16,000
谢谢说实话

63
00:02:16,000 --> 00:02:18,000
我现在打那个怕你哭

64
00:02:18,000 --> 00:02:20,000
还是感觉很有为何感

65
00:02:20,000 --> 00:02:20,000
你知道吗

66
00:02:20,000 --> 00:02:21,000
为什么

67
00:02:21,000 --> 00:02:22,000
不听好的吗

68
00:02:22,000 --> 00:02:24,000
怕你哭多好呀

69
00:02:24,000 --> 00:02:25,000
好怪

70
00:02:26,000 --> 00:02:27,000
听起来很日本

71
00:02:27,000 --> 00:02:30,000
然后点针字看起来

72
00:02:30,000 --> 00:02:31,000
还感觉挺好的

73
00:02:31,000 --> 00:02:32,000
不过

74
00:02:32,000 --> 00:02:32,000
对

75
00:02:32,000 --> 00:02:33,000
点针字

76
00:02:33,000 --> 00:02:35,000
就是因为上次听的你们

77
00:02:35,000 --> 00:02:36,000
应该是最新一期节目

78
00:02:36,000 --> 00:02:38,000
就是 D-Multi 还是前一期

79
00:02:38,000 --> 00:02:40,000
因为我们是前一期了

80
00:02:40,000 --> 00:02:40,000
已经是

81
00:02:40,000 --> 00:02:40,000
对

82
00:02:40,000 --> 00:02:41,000
前一期了

83
00:02:41,000 --> 00:02:43,000
你们速度比较快

84
00:02:43,000 --> 00:02:44,000
然后我就说

85
00:02:44,000 --> 00:02:46,000
我之前本来一直想换的

86
00:02:46,000 --> 00:02:48,000
然后就是因为之前

87
00:02:48,000 --> 00:02:51,000
我们是先换的 logo

88
00:02:51,000 --> 00:02:52,000
先换的相处点

89
00:02:52,000 --> 00:02:53,000
也不叫相处点

90
00:02:53,000 --> 00:02:54,000
那个叫什么

91
00:02:54,000 --> 00:02:57,000
我就要 LED 灯的风格的 logo

92
00:02:57,000 --> 00:02:58,000
应该是软的

93
00:02:58,000 --> 00:02:58,000
对

94
00:02:58,000 --> 00:03:00,000
当时我就想说

95
00:03:00,000 --> 00:03:04,000
那干脆拿风格把正文字也换了

96
00:03:04,000 --> 00:03:05,000
不是有 webfond 吗

97
00:03:05,000 --> 00:03:06,000
但是后来转念一下

98
00:03:06,000 --> 00:03:08,000
中文字体的 webfond

99
00:03:08,000 --> 00:03:09,000
马上就劝退了

100
00:03:09,000 --> 00:03:12,000
因为都知道体积会比较精人

101
00:03:12,000 --> 00:03:12,000
对吧

102
00:03:12,000 --> 00:03:15,000
然后来听你们前一期节目

103
00:03:15,000 --> 00:03:16,000
找微里来聊的时候

104
00:03:16,000 --> 00:03:17,000
我在想

105
00:03:17,000 --> 00:03:18,000
哎

106
00:03:18,000 --> 00:03:20,000
如果是纯点症的

107
00:03:20,000 --> 00:03:22,000
那不就没有体积问题了吗

108
00:03:22,000 --> 00:03:23,000
因为我简单算了一下数

109
00:03:23,000 --> 00:03:23,000
对吧

110
00:03:23,000 --> 00:03:26,000
假设我是一个实相数

111
00:03:26,000 --> 00:03:28,000
乘以实相数的汉字

112
00:03:28,000 --> 00:03:30,000
那么一个像就算我不压缩的情况下

113
00:03:30,000 --> 00:03:34,000
我一个方块就是 100 个 bit

114
00:03:34,000 --> 00:03:35,000
100 个 bit 出 18 才多少

115
00:03:35,000 --> 00:03:39,000
不到 20 个 biten 对吧

116
00:03:39,000 --> 00:03:40,000
算下来

117
00:03:40,000 --> 00:03:42,000
还再稍微压缩一下

118
00:03:42,000 --> 00:03:43,000
应该是可以结束的吗

119
00:03:43,000 --> 00:03:46,000
但是问题丁某他不是真正的点针

120
00:03:46,000 --> 00:03:47,000
他其实还是什么样子问题

121
00:03:47,000 --> 00:03:49,000
这就是我用到的第一个问题

122
00:03:49,000 --> 00:03:50,000
就是后来没解释

123
00:03:50,000 --> 00:03:53,000
没有办法是真的使用在 webfond

124
00:03:53,000 --> 00:03:55,000
是没有办法使用点针字体的

125
00:03:55,000 --> 00:03:57,000
就好像跟微里那期你们也聊了

126
00:03:57,000 --> 00:04:01,000
就是 windows 的自带的系统字体

127
00:04:01,000 --> 00:04:03,000
还有好几个都是有内签点针的

128
00:04:03,000 --> 00:04:04,000
对

129
00:04:04,000 --> 00:04:05,000
所谓的中易送体

130
00:04:05,000 --> 00:04:06,000
对

131
00:04:06,000 --> 00:04:08,000
还不过之前在古早时期的

132
00:04:08,000 --> 00:04:10,000
Linux 系统里面

133
00:04:10,000 --> 00:04:12,000
有那个叫文权艺

134
00:04:12,000 --> 00:04:13,000
那个那套有东西

135
00:04:13,000 --> 00:04:15,000
你应该是 pcfond

136
00:04:15,000 --> 00:04:16,000
这个格式我不知道

137
00:04:16,000 --> 00:04:17,000
我就说文权艺

138
00:04:17,000 --> 00:04:18,000
他们当时也做过

139
00:04:18,000 --> 00:04:18,000
就是那种他做过

140
00:04:18,000 --> 00:04:21,000
就是他叫他在这开源

141
00:04:22,000 --> 00:04:24,000
我不知道就是免费的这种

142
00:04:24,000 --> 00:04:26,000
自由的这种中文点针字

143
00:04:26,000 --> 00:04:27,000
他做的一个高质量的

144
00:04:27,000 --> 00:04:29,000
当然是应该是

145
00:04:29,000 --> 00:04:31,000
中文或者往上比较早的

146
00:04:31,000 --> 00:04:32,000
那种就是 crout sourcing 的项目

147
00:04:34,000 --> 00:04:37,000
他当时我记得是做了一个网页

148
00:04:37,000 --> 00:04:38,000
那个时候还挺不容易的

149
00:04:38,000 --> 00:04:39,000
那个时候网页技术都比较落后

150
00:04:39,000 --> 00:04:42,000
他们用通过网页的方式

151
00:04:42,000 --> 00:04:43,000
让大家去拆字

152
00:04:43,000 --> 00:04:44,000
然后点像素点

153
00:04:45,000 --> 00:04:48,000
然后他们那边也有一套点针字

154
00:04:48,000 --> 00:04:51,000
但是这些都是没有办法用到

155
00:04:51,000 --> 00:04:52,000
那个 wavfond 里面的

156
00:04:52,000 --> 00:04:55,000
因为 wavfond 目前主流的几个格式

157
00:04:55,000 --> 00:04:56,000
就最开始的

158
00:04:56,000 --> 00:04:58,000
那个 eot 叫做 embedded open type

159
00:04:58,000 --> 00:04:58,000
对吧

160
00:04:58,000 --> 00:05:00,000
后来的 svg

161
00:05:00,000 --> 00:05:01,000
包括在目前最新的

162
00:05:01,000 --> 00:05:03,000
那个 wav 和 wav 2 对吧

163
00:05:03,000 --> 00:05:05,000
他们在生存的时候

164
00:05:05,000 --> 00:05:07,000
就直接是不支持内签点针的

165
00:05:07,000 --> 00:05:09,000
所以这条路就是断掉的

166
00:05:09,000 --> 00:05:11,000
所以你上期

167
00:05:11,000 --> 00:05:14,000
Villie 他做也是一个

168
00:05:14,000 --> 00:05:15,000
就是折中的方案

169
00:05:15,000 --> 00:05:19,000
就是用实量来模拟点针的那种风格

170
00:05:19,000 --> 00:05:20,000
对吧

171
00:05:20,000 --> 00:05:21,000
但是你看

172
00:05:21,000 --> 00:05:22,000
比如说这种其实还是有用的

173
00:05:22,000 --> 00:05:24,000
就是虽然说

174
00:05:24,000 --> 00:05:25,000
不是一个真正的点针

175
00:05:25,000 --> 00:05:27,000
就是我要表达一个

176
00:05:27,000 --> 00:05:29,000
10 个像素成语

177
00:05:29,000 --> 00:05:29,000
10 个像素的字乎

178
00:05:29,000 --> 00:05:32,000
并不能真的只用 100 个 bit

179
00:05:32,000 --> 00:05:33,000
就可以实现

180
00:05:33,000 --> 00:05:36,000
但是因为极度减化过的

181
00:05:36,000 --> 00:05:39,000
那个微点针

182
00:05:39,000 --> 00:05:41,000
就是实量点针

183
00:05:41,000 --> 00:05:43,000
它其实是一个各种各样的小方块

184
00:05:43,000 --> 00:05:44,000
对吧

185
00:05:44,000 --> 00:05:45,000
小方块的就有个好处

186
00:05:45,000 --> 00:05:47,000
它就什么没有什么

187
00:05:47,000 --> 00:05:48,000
取背塞而曲线

188
00:05:48,000 --> 00:05:49,000
那些转角什么的

189
00:05:49,000 --> 00:05:51,000
它的点就比较少

190
00:05:52,000 --> 00:05:52,000
没错

191
00:05:52,000 --> 00:05:54,000
你想要这个道理

192
00:05:54,000 --> 00:05:54,000
OK

193
00:05:54,000 --> 00:05:56,000
就是确实就拿 Villie

194
00:05:56,000 --> 00:05:57,000
他拿这个

195
00:05:57,000 --> 00:05:59,000
他给了我一个 D-MOD 的 DTF

196
00:05:59,000 --> 00:06:02,000
然后我把它转成 Wolf 2

197
00:06:02,000 --> 00:06:04,000
Wolf 2 是 Wolf 的升级版

198
00:06:04,000 --> 00:06:07,000
它的压缩比的 Ut 高了 20%左右

199
00:06:07,000 --> 00:06:08,000
应该是

200
00:06:08,000 --> 00:06:09,000
其实我压完之后

201
00:06:09,000 --> 00:06:11,000
他当时给的是一套

202
00:06:11,000 --> 00:06:14,000
还是在 Beta 中的 D-MOD 的文件给我

203
00:06:14,000 --> 00:06:15,000
我压完之后

204
00:06:15,000 --> 00:06:20,000
其实也就才不到 500 KB 的大小

205
00:06:20,000 --> 00:06:20,000
挺好的

206
00:06:20,000 --> 00:06:21,000
对

207
00:06:21,000 --> 00:06:24,000
500 KB 可能在 5 年前

208
00:06:24,000 --> 00:06:27,000
可能还是有一点纠结的尺寸

209
00:06:27,000 --> 00:06:28,000
因为毕竟还是网络要下载

210
00:06:28,000 --> 00:06:29,000
然后带款不高的情况下

211
00:06:29,000 --> 00:06:31,000
它现在在 500 KB

212
00:06:31,000 --> 00:06:32,000
我们有 4 G 网络

213
00:06:32,000 --> 00:06:33,000
马上 5 G 网络

214
00:06:33,000 --> 00:06:33,000
对吧

215
00:06:33,000 --> 00:06:36,000
又是光线入户都还挺多的

216
00:06:36,000 --> 00:06:36,000
500 KB 的话

217
00:06:36,000 --> 00:06:40,000
你其实你在 Instagram 上刷一张图

218
00:06:40,000 --> 00:06:42,000
估计都不止 500 KB 了

219
00:06:42,000 --> 00:06:42,000
对吧

220
00:06:42,000 --> 00:06:43,000
很多网页

221
00:06:43,000 --> 00:06:47,000
你加载一个什么 JavaScript 的 cool

222
00:06:47,000 --> 00:06:49,000
那可能都是差不多水平

223
00:06:49,000 --> 00:06:50,000
所以完全可以接受

224
00:06:50,000 --> 00:06:51,000
所以我就说

225
00:06:51,000 --> 00:06:52,000
那其实是可以的

226
00:06:52,000 --> 00:06:58,000
我就换上把我们的官网的 webfront

227
00:06:58,000 --> 00:06:59,000
换上了 D-MOD 作为主

228
00:06:59,000 --> 00:07:02,000
然后再设了一些系统自带的 backup

229
00:07:02,000 --> 00:07:04,000
就是如果因为某种原因

230
00:07:04,000 --> 00:07:05,000
你的系统

231
00:07:05,000 --> 00:07:08,000
你的议论期不过现代

232
00:07:08,000 --> 00:07:10,000
或者是你用了什么插件

233
00:07:10,000 --> 00:07:12,000
禁用 webfront 的话

234
00:07:12,000 --> 00:07:13,000
那你还是会推到你系统

235
00:07:13,000 --> 00:07:14,000
贸易的那些字体

236
00:07:14,000 --> 00:07:16,000
所以就整个起来

237
00:07:16,000 --> 00:07:17,000
就风格就还不错

238
00:07:19,000 --> 00:07:22,000
用这种假的点证的话

239
00:07:22,000 --> 00:07:24,000
其实是实量

240
00:07:25,000 --> 00:07:27,000
但是你这样容易用

241
00:07:27,000 --> 00:07:28,000
要不然的话

242
00:07:28,000 --> 00:07:30,000
你点证真点证的话

243
00:07:30,000 --> 00:07:32,000
你那个字号不好弄吗

244
00:07:32,000 --> 00:07:32,000
对

245
00:07:32,000 --> 00:07:33,000
就是有这个问题

246
00:07:33,000 --> 00:07:36,000
你一个字号要一套点证

247
00:07:36,000 --> 00:07:38,000
反而这种假点证的话

248
00:07:38,000 --> 00:07:40,000
你可以随意缩放

249
00:07:40,000 --> 00:07:42,000
对反而更好

250
00:07:42,000 --> 00:07:42,000
是

251
00:07:42,000 --> 00:07:44,000
因为如果用真点证的话

252
00:07:44,000 --> 00:07:44,000
缩放的话

253
00:07:44,000 --> 00:07:46,000
因为其实现在我想想

254
00:07:46,000 --> 00:07:49,000
我们至少在 intel 出

255
00:07:49,000 --> 00:07:50,000
还有 AMD

256
00:07:50,000 --> 00:07:53,000
出下一代的显卡之前

257
00:07:53,000 --> 00:07:56,000
我们目前所用的显卡

258
00:07:56,000 --> 00:07:57,000
包括类签的

259
00:07:57,000 --> 00:07:58,000
还是独立的

260
00:07:58,000 --> 00:07:59,000
包括手机上的也好

261
00:07:59,000 --> 00:08:03,000
它都不能做我们叫做整数倍缩放

262
00:08:03,000 --> 00:08:04,000
什么意思

263
00:08:04,000 --> 00:08:06,000
就是比如说我用的

264
00:08:06,000 --> 00:08:08,000
什么所谓高分高清平

265
00:08:08,000 --> 00:08:10,000
有什么二插三插的

266
00:08:10,000 --> 00:08:10,000
什么意思

267
00:08:10,000 --> 00:08:11,000
就是相对于

268
00:08:11,000 --> 00:08:12,000
相对于一个像素点

269
00:08:12,000 --> 00:08:13,000
它我们之前讨论过

270
00:08:13,000 --> 00:08:14,000
是用

271
00:08:14,000 --> 00:08:16,000
可能是用四个物理点

272
00:08:16,000 --> 00:08:17,000
或者是九个物理点

273
00:08:17,000 --> 00:08:17,000
就是二乘一二

274
00:08:17,000 --> 00:08:20,000
或者三乘一三的格子来做

275
00:08:21,000 --> 00:08:22,000
所谓的整数倍缩放

276
00:08:22,000 --> 00:08:23,000
什么意思

277
00:08:23,000 --> 00:08:23,000
就是说假设

278
00:08:23,000 --> 00:08:25,000
我是一个 4 k 的屏幕

279
00:08:25,000 --> 00:08:26,000
对不对

280
00:08:26,000 --> 00:08:27,000
然后

281
00:08:27,000 --> 00:08:28,000
但是你想 4 k 游戏

282
00:08:28,000 --> 00:08:29,000
它有很多特效

283
00:08:29,000 --> 00:08:30,000
不是显卡的

284
00:08:30,000 --> 00:08:30,000
数点

285
00:08:30,000 --> 00:08:31,000
跟不上

286
00:08:31,000 --> 00:08:32,000
所以很多时候

287
00:08:32,000 --> 00:08:33,000
它只能用

288
00:08:34,000 --> 00:08:35,000
放要力 80

289
00:08:35,000 --> 00:08:36,000
来分辨

290
00:08:36,000 --> 00:08:39,000
来显示游戏

291
00:08:39,000 --> 00:08:39,000
对吧

292
00:08:39,000 --> 00:08:41,000
但是 1080 分辨率

293
00:08:41,000 --> 00:08:42,000
但是你又是 4 k

294
00:08:42,000 --> 00:08:44,000
4 k 就好像是 4 个 1080 的屏幕的

295
00:08:45,000 --> 00:08:46,000
填字格拼起来

296
00:08:46,000 --> 00:08:47,000
对吧

297
00:08:47,000 --> 00:08:48,000
这就有个问题了

298
00:08:48,000 --> 00:08:50,000
一个 1080 的销售点

299
00:08:50,000 --> 00:08:52,000
是对应 4 个 4 k 的像素点

300
00:08:52,000 --> 00:08:53,000
我们通常想

301
00:08:53,000 --> 00:08:55,000
那肯定就是说把那 4 个物理

302
00:08:55,000 --> 00:08:56,000
像素点都渲染成

303
00:08:56,000 --> 00:08:59,000
一个逻辑像素点的颜色

304
00:08:59,000 --> 00:09:00,000
这样不就看起来

305
00:09:00,000 --> 00:09:02,000
虽然说是 4 k 的屏幕

306
00:09:02,000 --> 00:09:05,000
但看起来还是 1080 的清晰

307
00:09:05,000 --> 00:09:05,000
那么锐利

308
00:09:05,000 --> 00:09:06,000
对不对

309
00:09:07,000 --> 00:09:08,000
但其实并不是这样子

310
00:09:08,000 --> 00:09:10,000
因为现在主的显卡

311
00:09:10,000 --> 00:09:10,000
都是叫做他叫做

312
00:09:10,000 --> 00:09:11,000
Linear 的这种

313
00:09:11,000 --> 00:09:13,000
词叫什么

314
00:09:13,000 --> 00:09:13,000
来的

315
00:09:13,000 --> 00:09:14,000
Interpolate

316
00:09:14,000 --> 00:09:15,000
对

317
00:09:15,000 --> 00:09:15,000
Interpolate

318
00:09:15,000 --> 00:09:18,000
就是它就会去插指

319
00:09:18,000 --> 00:09:18,000
插指去算

320
00:09:18,000 --> 00:09:19,000
比如说我要

321
00:09:19,000 --> 00:09:20,000
如果你想象一下这么一个场景

322
00:09:20,000 --> 00:09:22,000
你说 1080 的屏幕上

323
00:09:22,000 --> 00:09:23,000
从左到右是一个

324
00:09:23,000 --> 00:09:26,000
从白到黑的一个

325
00:09:26,000 --> 00:09:28,000
渐进的一个过渡对吧

326
00:09:28,000 --> 00:09:29,000
正常的话

327
00:09:29,000 --> 00:09:31,000
如果说你是在 4 k 屏幕上显示

328
00:09:31,000 --> 00:09:32,000
那你说你每一个线条

329
00:09:32,000 --> 00:09:33,000
绘制两遍

330
00:09:33,000 --> 00:09:34,000
没数

331
00:09:34,000 --> 00:09:34,000
没数

332
00:09:34,000 --> 00:09:35,000
好像你就绘制两遍

333
00:09:35,000 --> 00:09:36,000
对不对

334
00:09:36,000 --> 00:09:37,000
但其实并不是这样

335
00:09:37,000 --> 00:09:38,000
它还是要在 4 k 上

336
00:09:38,000 --> 00:09:40,000
它是要算出的两条

337
00:09:40,000 --> 00:09:42,000
要你把你的中间值是怎么样子

338
00:09:42,000 --> 00:09:43,000
然后再把中间值

339
00:09:43,000 --> 00:09:45,000
绘制在 4 k 的多出来的

340
00:09:45,000 --> 00:09:46,000
那个像素

341
00:09:46,000 --> 00:09:48,000
内数的像素上面的去

342
00:09:49,000 --> 00:09:51,000
在网页的上面

343
00:09:51,000 --> 00:09:52,000
其实有类似的问题

344
00:09:52,000 --> 00:09:53,000
就是我本来说

345
00:09:53,000 --> 00:09:53,000
我有一个

346
00:09:54,000 --> 00:09:57,000
比如说是 10×10 像素的点准字

347
00:09:57,000 --> 00:10:00,000
但我能不能渲染到 20×20 的分辨率上去

348
00:10:00,000 --> 00:10:01,000
其实做不到的

349
00:10:01,000 --> 00:10:02,000
对不对

350
00:10:03,000 --> 00:10:03,000
OK

351
00:10:03,000 --> 00:10:04,000
在这个情况下

352
00:10:04,000 --> 00:10:06,000
就刚才 Eric 说的问题

353
00:10:06,000 --> 00:10:08,000
就是你反而用这种微点证

354
00:10:09,000 --> 00:10:11,000
就是用史量来模拟的反而更好

355
00:10:11,000 --> 00:10:12,000
它可以缩放一点

356
00:10:12,000 --> 00:10:13,000
但是我遇到一个问题

357
00:10:13,000 --> 00:10:15,000
就是现在网页的 CSS 里面

358
00:10:16,000 --> 00:10:16,000
宽度

359
00:10:17,000 --> 00:10:20,000
它有可能我不是按整数像素来定的宽度

360
00:10:20,000 --> 00:10:22,000
但可能比如说是一个百分比

361
00:10:22,000 --> 00:10:23,000
对吧

362
00:10:23,000 --> 00:10:24,000
百分比之后它算出来

363
00:10:24,000 --> 00:10:27,000
它最后还是要落实到它的叫什么

364
00:10:27,000 --> 00:10:28,000
Rusterize 的时候

365
00:10:29,000 --> 00:10:30,000
三个画的时候

366
00:10:30,000 --> 00:10:34,000
的时候它还是会要变成一个具体的

367
00:10:34,000 --> 00:10:36,000
到哪一个像素点的坐标上去

368
00:10:36,000 --> 00:10:38,000
也就是有时候如果你上按百分比的话

369
00:10:38,000 --> 00:10:39,000
它不就出不进

370
00:10:40,000 --> 00:10:41,000
它就有这个小数

371
00:10:41,000 --> 00:10:42,000
那么就变成了

372
00:10:42,000 --> 00:10:44,000
就说就结合到我们之前

373
00:10:44,000 --> 00:10:46,000
几期谈过的次像素平滑的问题

374
00:10:46,000 --> 00:10:46,000
对吧

375
00:10:46,000 --> 00:10:48,000
以前是就是回渡平滑

376
00:10:48,000 --> 00:10:50,000
就是说我先还是一个像素

377
00:10:50,000 --> 00:10:52,000
我不考虑 LCD 屏幕

378
00:10:54,000 --> 00:10:54,000
紫像素的结构

379
00:10:54,000 --> 00:10:55,000
我直接按回渡平滑

380
00:10:55,000 --> 00:10:58,000
比如说我们现在在 IOS 设备上面

381
00:10:58,000 --> 00:10:59,000
都是这样子的

382
00:10:59,000 --> 00:10:59,000
对吧

383
00:10:59,000 --> 00:11:00,000
它是没有次像素平滑

384
00:11:00,000 --> 00:11:01,000
都是回渡平滑的话

385
00:11:01,000 --> 00:11:03,000
这样的话就相当来说还好一点

386
00:11:03,000 --> 00:11:05,000
它最多是在左边一个像素

387
00:11:05,000 --> 00:11:05,000
或右边一个像素

388
00:11:05,000 --> 00:11:06,000
或者他如果他觉得

389
00:11:06,000 --> 00:11:08,000
应该是两个像素之间

390
00:11:08,000 --> 00:11:09,000
那他可能在灰度上面

391
00:11:09,000 --> 00:11:11,000
做一些平均对不对

392
00:11:11,000 --> 00:11:14,000
但是就会导致我丁毛点针体

393
00:11:15,000 --> 00:11:18,000
本来我想的效果是应该是非常边缘锐利

394
00:11:18,000 --> 00:11:21,000
我把它叫做像素的字体的尺寸调好的话

395
00:11:21,000 --> 00:11:22,000
它边缘应该是非常锐利的

396
00:11:23,000 --> 00:11:27,000
但是因为由于非整数的宽度的问题

397
00:11:27,000 --> 00:11:29,000
它可能字的那一数

398
00:11:29,000 --> 00:11:31,000
比如说它旗帜的位置

399
00:11:31,000 --> 00:11:32,000
它在排挤引擎

400
00:11:32,000 --> 00:11:34,000
加上三个话之后算成

401
00:11:34,000 --> 00:11:36,000
它是在从左到右

402
00:11:36,000 --> 00:11:38,000
第 32.57 个像素点

403
00:11:38,000 --> 00:11:41,000
那个时候再开始汇制

404
00:11:41,000 --> 00:11:42,000
这个时候怎么办

405
00:11:43,000 --> 00:11:44,000
你还是会看到

406
00:11:44,000 --> 00:11:44,000
在有些地方

407
00:11:44,000 --> 00:11:47,000
它的字的边缘是有一层

408
00:11:49,000 --> 00:11:51,000
灰灰的那种感觉的

409
00:11:51,000 --> 00:11:53,000
如果说你是有次像素平滑

410
00:11:53,000 --> 00:11:55,000
然后你眼睛又比较敏感

411
00:11:55,000 --> 00:11:58,000
或者是你的屏幕素质是有一点问题的话

412
00:11:58,000 --> 00:11:59,000
你看它可能边上有一点

413
00:11:59,000 --> 00:12:02,000
那种就是叫采边

414
00:12:02,000 --> 00:12:02,000
对 采边

415
00:12:03,000 --> 00:12:05,000
可能也太不常见的问题

416
00:12:05,000 --> 00:12:07,000
所以还是挺头疼的事情

417
00:12:09,000 --> 00:12:10,000
毕竟你是假点证

418
00:12:10,000 --> 00:12:11,000
对

419
00:12:11,000 --> 00:12:12,000
就假点证的问题

420
00:12:12,000 --> 00:12:14,000
但是就是说刚才你说的缩放的问题

421
00:12:14,000 --> 00:12:16,000
其实这里还是有一点蹊跷的

422
00:12:16,000 --> 00:12:19,000
就并不是说我因为是真实量

423
00:12:19,000 --> 00:12:21,000
微点证就可以自由缩放了

424
00:12:21,000 --> 00:12:23,000
其实我要达到刚才那种

425
00:12:24,000 --> 00:12:25,000
pixel to pixel

426
00:12:25,000 --> 00:12:28,000
像素点对像素点的那种清晰和锐利的话

427
00:12:28,000 --> 00:12:29,000
其实还是有讲究的

428
00:12:29,000 --> 00:12:32,000
比如说我用的那个证问题是钉帽的

429
00:12:32,000 --> 00:12:33,000
钉帽其实只有两个尺寸

430
00:12:33,000 --> 00:12:35,000
就是 7 像素和 9 像素

431
00:12:35,000 --> 00:12:35,000
对吧

432
00:12:35,000 --> 00:12:36,000
7 像素假设

433
00:12:36,000 --> 00:12:38,000
它其实是因为有一个像素的留白的话

434
00:12:38,000 --> 00:12:42,000
它其实是 8 像素宽和 10 像素宽的这么一个字体

435
00:12:42,000 --> 00:12:43,000
对吧

436
00:12:43,000 --> 00:12:45,000
这样你在 CSS 里面设置的时候

437
00:12:45,000 --> 00:12:47,000
你就要设置成

438
00:12:47,000 --> 00:12:49,000
正常你应该设置成 10 个像素对不对

439
00:12:49,000 --> 00:12:52,000
但是因为 10 个像素实在是太小了

440
00:12:53,000 --> 00:12:56,000
因为现在很多屏幕的 Feminity 挺高的

441
00:12:56,000 --> 00:12:58,000
而且手机上你想设置 10 个像素

442
00:12:58,000 --> 00:12:59,000
它也自己也比较小

443
00:12:59,000 --> 00:13:01,000
所以我就设置成了 15

444
00:13:01,000 --> 00:13:04,000
15 你想不就出不经了对不对

445
00:13:04,000 --> 00:13:05,000
你必须把它量子化

446
00:13:05,000 --> 00:13:06,000
它其实是可以的

447
00:13:06,000 --> 00:13:08,000
因为我看目前我们大部分人用的

448
00:13:08,000 --> 00:13:09,000
不管是笔记本也好

449
00:13:09,000 --> 00:13:11,000
还是至少 Mac

450
00:13:11,000 --> 00:13:12,000
Mac 现在应该已经没有

451
00:13:13,000 --> 00:13:16,000
非 Rating 的屏幕的 Mac 在销售了对吧

452
00:13:16,000 --> 00:13:17,000
销售肯定没有了

453
00:13:17,000 --> 00:13:19,000
但使用肯定还是有的

454
00:13:19,000 --> 00:13:21,000
而且你要考虑到外接显示器的问题

455
00:13:21,000 --> 00:13:23,000
就是至少是所有的 Mac

456
00:13:23,000 --> 00:13:24,000
就是新机和所有的

457
00:13:25,000 --> 00:13:27,000
目前应该再试的

458
00:13:27,000 --> 00:13:29,000
iOS 设备应该都是所谓的高分屏

459
00:13:30,000 --> 00:13:31,000
Rating 的屏幕对不对

460
00:13:31,000 --> 00:13:33,000
那么就有两种了

461
00:13:33,000 --> 00:13:36,000
我们一种是常见的 Mac 都是二 X 的

462
00:13:36,000 --> 00:13:36,000
对吧

463
00:13:36,000 --> 00:13:40,000
然后还有 iPhone 11 Pro

464
00:13:40,000 --> 00:13:42,000
它是三倍的

465
00:13:42,000 --> 00:13:43,000
三倍的

466
00:13:43,000 --> 00:13:43,000
对

467
00:13:43,000 --> 00:13:45,000
但三 X 的话就相当来说

468
00:13:45,000 --> 00:13:47,000
相当来说我也没有设备

469
00:13:47,000 --> 00:13:49,000
所以我都是两 X 的设备

470
00:13:49,000 --> 00:13:50,000
我就是整个 15 个像素

471
00:13:50,000 --> 00:13:53,000
15 个像素的逻辑

472
00:13:53,000 --> 00:13:55,000
其实对应 30 个像素的物理对不对

473
00:13:55,000 --> 00:13:56,000
OK 30 个像素的物理

474
00:13:56,000 --> 00:13:59,000
除以 10 个像素的低毛的点证

475
00:13:59,000 --> 00:14:00,000
也不是刚刚也能是三倍

476
00:14:02,000 --> 00:14:03,000
所以它是最小的

477
00:14:03,000 --> 00:14:04,000
最小功倍数

478
00:14:04,000 --> 00:14:04,000
对

479
00:14:04,000 --> 00:14:08,000
早搞个它能够整除的地方就还挺好的

480
00:14:08,000 --> 00:14:09,000
但是问题就来了

481
00:14:09,000 --> 00:14:10,000
我后来我想起来了

482
00:14:11,000 --> 00:14:16,000
你记不记得你们有买最新的 MacBook Pro 的笔本

483
00:14:16,000 --> 00:14:17,000
就最近两三年的

484
00:14:19,000 --> 00:14:21,000
特别是 13 寸的那个机器

485
00:14:21,000 --> 00:14:21,000
没有

486
00:14:22,000 --> 00:14:24,000
想买没有人给我们捐款

487
00:14:25,000 --> 00:14:26,000
就是那个

488
00:14:27,000 --> 00:14:27,000
对

489
00:14:27,000 --> 00:14:29,000
我们忘了在节目里面说

490
00:14:29,000 --> 00:14:30,000
请大家给我们捐款

491
00:14:31,000 --> 00:14:32,000
想请请

492
00:14:32,000 --> 00:14:32,000
见我们

493
00:14:32,000 --> 00:14:34,000
没有人用爱给我们发电的

494
00:14:34,000 --> 00:14:35,000
对

495
00:14:37,000 --> 00:14:37,000
说回来

496
00:14:37,000 --> 00:14:43,000
就是 13 寸机型的屏幕的面板的分别率

497
00:14:43,000 --> 00:14:43,000
是

498
00:14:43,000 --> 00:14:46,000
我记得是 2560×1600

499
00:14:46,000 --> 00:14:47,000
应该是这样

500
00:14:47,000 --> 00:14:50,000
就是它的逻辑是 1280×1800

501
00:14:50,000 --> 00:14:52,000
1280×1800 在当下

502
00:14:52,000 --> 00:14:55,000
其实是一个非常窄的一个显示的面积

503
00:14:55,000 --> 00:14:56,000
对不对

504
00:14:57,000 --> 00:14:59,000
所以苹果后来

505
00:14:59,000 --> 00:15:01,000
应该我记得应该是在前几年开始

506
00:15:01,000 --> 00:15:03,000
就应该就是最近这一代

507
00:15:04,000 --> 00:15:06,000
蝴蝶键盘那一代开始

508
00:15:06,000 --> 00:15:10,000
它的出厂默认设至 13 寸的 MacBook 的

509
00:15:12,000 --> 00:15:13,000
默认的分辨率

510
00:15:13,000 --> 00:15:17,000
它并不是点对点的机器的

511
00:15:17,000 --> 00:15:18,000
它用了一个

512
00:15:18,000 --> 00:15:20,000
它的默认值是一个缩放的

513
00:15:20,000 --> 00:15:24,000
它缩放成应该是 1440×900 的

514
00:15:24,000 --> 00:15:27,000
这么一个逻辑的分辨率

515
00:15:27,000 --> 00:15:29,000
但其实它的物理上

516
00:15:29,000 --> 00:15:30,000
它除不禁

517
00:15:30,000 --> 00:15:32,000
就是 2660 除以 1440 是除不禁的

518
00:15:32,000 --> 00:15:34,000
1260×1800 的两倍

519
00:15:35,000 --> 00:15:37,000
所以它虽然说是逻辑上的二差

520
00:15:37,000 --> 00:15:40,000
但它物理上并不是

521
00:15:40,000 --> 00:15:41,000
它只是没有点到点

522
00:15:41,000 --> 00:15:43,000
就是它推进的设置

523
00:15:43,000 --> 00:15:44,000
没有点到点

524
00:15:44,000 --> 00:15:45,000
对

525
00:15:45,000 --> 00:15:47,000
它现在我已经完全不点对点了

526
00:15:48,000 --> 00:15:48,000
所有的

527
00:15:48,000 --> 00:15:50,000
但我都是挑到点到点的

528
00:15:50,000 --> 00:15:52,000
比如我现在这台 15 寸的

529
00:15:52,000 --> 00:15:54,000
我不用它默认的缩放

530
00:15:54,000 --> 00:15:57,000
我就会改成正好是两倍的分辨率

531
00:15:57,000 --> 00:15:58,000
对

532
00:15:58,000 --> 00:16:00,000
因为 15 寸它原生的点的点分辨率

533
00:16:00,000 --> 00:16:01,000
应该是 1440 的

534
00:16:01,000 --> 00:16:01,000
能宽的

535
00:16:01,000 --> 00:16:02,000
对吧

536
00:16:02,000 --> 00:16:02,000
它其实是调整的

537
00:16:02,000 --> 00:16:05,000
但它推荐你设的是 1680×1050

538
00:16:05,000 --> 00:16:06,000
对

539
00:16:06,000 --> 00:16:08,000
它都是变成我们叫做 Scaled Mode

540
00:16:08,000 --> 00:16:09,000
缩放模式

541
00:16:09,000 --> 00:16:09,000
对不对

542
00:16:09,000 --> 00:16:10,000
对

543
00:16:10,000 --> 00:16:12,000
它可以让你的屏幕看起来容量更大一点

544
00:16:12,000 --> 00:16:13,000
对

545
00:16:13,000 --> 00:16:15,000
因为它就是要展示更多的内容

546
00:16:15,000 --> 00:16:16,000
但是其实这样是会影响

547
00:16:16,000 --> 00:16:17,000
它可以让你的视力

548
00:16:18,000 --> 00:16:19,000
下降用快一点

549
00:16:19,000 --> 00:16:20,000
其实你

550
00:16:20,000 --> 00:16:21,000
绝大部分是看不出来的

551
00:16:21,000 --> 00:16:23,000
但是如果说你对点对点的时候

552
00:16:23,000 --> 00:16:24,000
有劫屁的话

553
00:16:24,000 --> 00:16:26,000
比如我们如果要强行

554
00:16:26,000 --> 00:16:27,000
用低毛点正

555
00:16:27,000 --> 00:16:29,000
要点对点的话

556
00:16:29,000 --> 00:16:30,000
你在这两个

557
00:16:30,000 --> 00:16:32,000
就是你在最新的 MacBook 笔记本上

558
00:16:32,000 --> 00:16:33,000
是实现不了的

559
00:16:33,000 --> 00:16:34,000
对吧

560
00:16:34,000 --> 00:16:35,000
因为它默认值不是那样子的

561
00:16:35,000 --> 00:16:37,000
所以我都是把默认值调整

562
00:16:37,000 --> 00:16:38,000
我都是手动

563
00:16:39,000 --> 00:16:42,000
把它改成二差的点对点的模式

564
00:16:42,000 --> 00:16:44,000
这样我看起来那些才正常

565
00:16:44,000 --> 00:16:46,000
但这样的后果就是说

566
00:16:46,000 --> 00:16:49,000
你的可显示的实际面积感觉又变小了

567
00:16:50,000 --> 00:16:51,000
就字更大

568
00:16:51,000 --> 00:16:52,000
对

569
00:16:52,000 --> 00:16:54,000
它的设置不是选

570
00:16:54,000 --> 00:16:56,000
你要么选较大文字

571
00:16:56,000 --> 00:16:58,000
要么选更多空间

572
00:16:58,000 --> 00:17:00,000
字很少的空间更大

573
00:17:00,000 --> 00:17:01,000
是

574
00:17:01,000 --> 00:17:04,000
它系统设置原来就只能这样选

575
00:17:04,000 --> 00:17:05,000
对

576
00:17:05,000 --> 00:17:07,000
这样就会很影响

577
00:17:07,000 --> 00:17:08,000
就本来之前

578
00:17:08,000 --> 00:17:10,000
你说只是你做设计的人

579
00:17:10,000 --> 00:17:10,000
有这个问题

580
00:17:10,000 --> 00:17:12,000
你把调一下

581
00:17:12,000 --> 00:17:14,000
你这样看出交付的作品

582
00:17:14,000 --> 00:17:15,000
还是点对点清晰的

583
00:17:15,000 --> 00:17:16,000
对不对

584
00:17:16,000 --> 00:17:18,000
但现在默认值变成 Scale Mode

585
00:17:18,000 --> 00:17:19,000
就是说哪怕你交付的作品

586
00:17:19,000 --> 00:17:20,000
是点对点清晰的

587
00:17:20,000 --> 00:17:23,000
最后你用户炫看到的时候

588
00:17:23,000 --> 00:17:25,000
它其实也是被 Scale 掉了

589
00:17:25,000 --> 00:17:27,000
所以这个事情我觉得挺扯的

590
00:17:27,000 --> 00:17:30,000
所以它的意思就是你别纠结这个事情

591
00:17:30,000 --> 00:17:31,000
已经出破了视觉极限了

592
00:17:31,000 --> 00:17:32,000
是吧

593
00:17:32,000 --> 00:17:33,000
iOS 设备的话没有办法了

594
00:17:33,000 --> 00:17:35,000
iOS 至少目前还是清晰的

595
00:17:35,000 --> 00:17:36,000
我觉得它的意思

596
00:17:36,000 --> 00:17:39,000
其实是普通用户根本不应该操心这些事情

597
00:17:39,000 --> 00:17:40,000
对

598
00:17:40,000 --> 00:17:42,000
但是就还是一个 compromise

599
00:17:42,000 --> 00:17:46,000
就是说在显卡的处理能力

600
00:17:46,000 --> 00:17:48,000
面板的叫什么

601
00:17:48,000 --> 00:17:52,000
就是显卡到面板的连接待宽

602
00:17:52,000 --> 00:17:56,000
以及面板的实际的工艺的限制的情况下

603
00:17:56,000 --> 00:17:58,000
做出了这么一个 compromise

604
00:17:58,000 --> 00:18:00,000
但我觉得这毕竟不是长连之计

605
00:18:02,000 --> 00:18:03,000
我又想起来

606
00:18:03,000 --> 00:18:07,000
因为我实际主力计是 27 寸的 iMac

607
00:18:08,000 --> 00:18:09,000
是 5 K 的屏

608
00:18:09,000 --> 00:18:11,000
那个显卡是想

609
00:18:11,000 --> 00:18:13,000
可以看得出来它很吃力

610
00:18:13,000 --> 00:18:14,000
知道吗

611
00:18:14,000 --> 00:18:17,000
可以感觉到显卡很吃力

612
00:18:17,000 --> 00:18:18,000
这个购信能力

613
00:18:18,000 --> 00:18:19,000
5 K 的屏

614
00:18:19,000 --> 00:18:21,000
然后你选人的时候得多大

615
00:18:21,000 --> 00:18:23,000
你想想 5 K 的屏

616
00:18:23,000 --> 00:18:24,000
你抓个屏

617
00:18:25,000 --> 00:18:25,000
对

618
00:18:25,000 --> 00:18:28,000
抓个屏出来一个 PNG 稳定的话

619
00:18:28,000 --> 00:18:29,000
这个也是超大的

620
00:18:29,000 --> 00:18:30,000
对

621
00:18:30,000 --> 00:18:32,000
还是就是无所压缩的

622
00:18:32,000 --> 00:18:33,000
都可以有好几兆了

623
00:18:33,000 --> 00:18:34,000
对

624
00:18:35,000 --> 00:18:37,000
anyway 就说回 Dima 点证

625
00:18:38,000 --> 00:18:40,000
所以当时我就试了一下

626
00:18:40,000 --> 00:18:42,000
我就感觉效果还行

627
00:18:42,000 --> 00:18:44,000
然后我就跟 Willy 说这个事

628
00:18:44,000 --> 00:18:46,000
然后他还帮我们做了很多其他的事情

629
00:18:46,000 --> 00:18:48,000
因为 Dima 应该是

630
00:18:48,000 --> 00:18:50,000
如果我们记住

631
00:18:50,000 --> 00:18:51,000
应该是我们网站

632
00:18:51,000 --> 00:18:54,000
应该是第一个正式商用的

633
00:18:54,000 --> 00:18:57,000
贵网站是第一个正式商用的

634
00:18:57,000 --> 00:18:58,000
对

635
00:18:58,000 --> 00:19:00,000
然后他就其实遇到了很多问题

636
00:19:00,000 --> 00:19:00,000
比如说

637
00:19:00,000 --> 00:19:02,000
你想我们上一次节目的时候

638
00:19:02,000 --> 00:19:06,000
不是有讨论另合这个盒子吗

639
00:19:06,000 --> 00:19:07,000
对不对

640
00:19:08,000 --> 00:19:09,000
他真的把握记得

641
00:19:09,000 --> 00:19:09,000
对

642
00:19:09,000 --> 00:19:11,000
那个另合是 Dima 里面

643
00:19:11,000 --> 00:19:13,000
他唯一做了两个另合

644
00:19:13,000 --> 00:19:15,000
就是合在一起的

645
00:19:15,000 --> 00:19:16,000
但这个时候其实已经很为难了

646
00:19:16,000 --> 00:19:17,000
对不对

647
00:19:17,000 --> 00:19:18,000
一个实相速成

648
00:19:18,000 --> 00:19:19,000
实相速点

649
00:19:19,000 --> 00:19:21,000
你要加起两个盒子

650
00:19:21,000 --> 00:19:23,000
我看了一下

651
00:19:23,000 --> 00:19:24,000
反正也是比较勉强

652
00:19:24,000 --> 00:19:26,000
但是我还鼓动这个 Willy 说

653
00:19:26,000 --> 00:19:28,000
那你要不要去把这个挑战一下

654
00:19:28,000 --> 00:19:28,000
机械

655
00:19:28,000 --> 00:19:30,000
把前面那几个都做完

656
00:19:30,000 --> 00:19:31,000
那个叫什么招合

657
00:19:31,000 --> 00:19:31,000
对吧

658
00:19:31,000 --> 00:19:32,000
从照开始

659
00:19:32,000 --> 00:19:34,000
他就不做了

660
00:19:34,000 --> 00:19:35,000
不做了

661
00:19:35,000 --> 00:19:37,000
我说就像还有那样做招合

662
00:19:37,000 --> 00:19:38,000
我天呐

663
00:19:38,000 --> 00:19:39,000
这还不正常的

664
00:19:39,000 --> 00:19:40,000
还有那个

665
00:19:40,000 --> 00:19:42,000
就是日文那个诸式绘色

666
00:19:42,000 --> 00:19:46,000
我觉得做大正可能还可以想象

667
00:19:46,000 --> 00:19:46,000
做其他的

668
00:19:46,000 --> 00:19:47,000
我的天

669
00:19:47,000 --> 00:19:49,000
诸式绘色怎么办

670
00:19:49,000 --> 00:19:51,000
不要说这些了

671
00:19:51,000 --> 00:19:53,000
但是不要说盒子

672
00:19:53,000 --> 00:19:56,000
就是一个和什么雷霆万军

673
00:19:56,000 --> 00:19:59,000
那个都已经写的一坨一坨的

674
00:19:59,000 --> 00:19:59,000
对

675
00:19:59,000 --> 00:20:02,000
我就担心怕不易赌

676
00:20:02,000 --> 00:20:04,000
然后我就套上之后

677
00:20:04,000 --> 00:20:06,000
我就做了一个

678
00:20:06,000 --> 00:20:07,000
usability test

679
00:20:07,000 --> 00:20:08,000
就是找

680
00:20:08,000 --> 00:20:09,000
主要是找我太太

681
00:20:09,000 --> 00:20:10,000
她来试了一下

682
00:20:10,000 --> 00:20:12,000
我就把我们有一期节目的

683
00:20:12,000 --> 00:20:13,000
那个就 summary

684
00:20:13,000 --> 00:20:14,000
就是那个叫什么

685
00:20:14,000 --> 00:20:15,000
节目简介

686
00:20:15,000 --> 00:20:16,000
他有一段话

687
00:20:16,000 --> 00:20:16,000
写了一段话

688
00:20:16,000 --> 00:20:18,000
就是 57 期节目有一段话

689
00:20:18,000 --> 00:20:19,000
我先把那个点

690
00:20:19,000 --> 00:20:20,000
换上他那些

691
00:20:20,000 --> 00:20:21,000
就是点点点都调好

692
00:20:21,000 --> 00:20:22,000
然后我让他读那段话

693
00:20:22,000 --> 00:20:25,000
基本上还挺超过我意外的

694
00:20:25,000 --> 00:20:25,000
就是还

695
00:20:25,000 --> 00:20:27,000
基本上没出什么差错

696
00:20:27,000 --> 00:20:29,000
就是一人性还是很好的

697
00:20:29,000 --> 00:20:29,000
对

698
00:20:29,000 --> 00:20:31,000
而且主要是你放在

699
00:20:31,000 --> 00:20:33,000
这个有上下文之内的话

700
00:20:33,000 --> 00:20:33,000
没错

701
00:20:33,000 --> 00:20:34,000
可以猜

702
00:20:34,000 --> 00:20:35,000
对吧

703
00:20:35,000 --> 00:20:36,000
有语境的话就可以猜

704
00:20:36,000 --> 00:20:37,000
而且我用的是那个 9

705
00:20:37,000 --> 00:20:38,000
9 相思那款

706
00:20:38,000 --> 00:20:39,000
9 相思那个相对来说

707
00:20:39,000 --> 00:20:41,000
还是看得清楚一些的

708
00:20:41,000 --> 00:20:41,000
其下说那款

709
00:20:41,000 --> 00:20:42,000
如果没有上下文

710
00:20:42,000 --> 00:20:44,000
确实有点难度了

711
00:20:44,000 --> 00:20:46,000
就关键是有语境的话就好

712
00:20:46,000 --> 00:20:47,000
是的

713
00:20:47,000 --> 00:20:47,000
所以我就想

714
00:20:47,000 --> 00:20:50,000
反正我们这个网站看的也不多

715
00:20:50,000 --> 00:20:50,000
对吧

716
00:20:50,000 --> 00:20:51,000
因为大部分都是在

717
00:20:51,000 --> 00:20:54,000
就是订阅在这个

718
00:20:54,000 --> 00:20:58,000
这个播客客户端里面去去去看的

719
00:20:58,000 --> 00:21:00,000
也不会说经常去我们网页

720
00:21:00,000 --> 00:21:01,000
翻来翻去对吧

721
00:21:01,000 --> 00:21:02,000
所以我想那不刚好

722
00:21:02,000 --> 00:21:04,000
我们这个网页还可以做到这个风格

723
00:21:04,000 --> 00:21:05,000
这个别致一点

724
00:21:05,000 --> 00:21:07,000
反正也不怎么常读它嘛

725
00:21:07,000 --> 00:21:07,000
对吧

726
00:21:07,000 --> 00:21:08,000
也没几个字

727
00:21:08,000 --> 00:21:09,000
其实对

728
00:21:09,000 --> 00:21:10,000
不像你们还要发这个

729
00:21:10,000 --> 00:21:11,000
你们官网这个

730
00:21:11,000 --> 00:21:13,000
这个 type 官网还要发很多这个博文什么的

731
00:21:13,000 --> 00:21:15,000
我们一般就一起节目

732
00:21:15,000 --> 00:21:17,000
可能不到 100 个字的这个汉字

733
00:21:17,000 --> 00:21:17,000
对吧

734
00:21:17,000 --> 00:21:18,000
完全没有问题

735
00:21:18,000 --> 00:21:21,000
所以每期节目来来看的人也就 100 个了

736
00:21:21,000 --> 00:21:23,000
我很怀疑

737
00:21:23,000 --> 00:21:23,000
哈哈哈

738
00:21:23,000 --> 00:21:25,000
我很怀疑

739
00:21:25,000 --> 00:21:25,000
对

740
00:21:25,000 --> 00:21:26,000
anyway

741
00:21:26,000 --> 00:21:27,000
就是就这样的话

742
00:21:27,000 --> 00:21:28,000
我就把那个丁毛用起来

743
00:21:28,000 --> 00:21:29,000
然后但是其实我们还遇到的

744
00:21:29,000 --> 00:21:31,000
其他很大其他很多问题

745
00:21:31,000 --> 00:21:32,000
比如说

746
00:21:33,000 --> 00:21:35,000
我们上次不是也是讨论这个

747
00:21:35,000 --> 00:21:35,000
那期节目

748
00:21:35,000 --> 00:21:36,000
除了讨论有有

749
00:21:36,000 --> 00:21:37,000
讨论日本的地方

750
00:21:37,000 --> 00:21:39,000
就很多那个叫 show notes

751
00:21:39,000 --> 00:21:42,000
里面有很多这个日文的这个符号

752
00:21:42,000 --> 00:21:46,000
然后刚好这个丁毛里面

753
00:21:46,000 --> 00:21:48,000
villie 他也做了那个日文的那些什么

754
00:21:48,000 --> 00:21:49,000
就是假他有做的

755
00:21:49,000 --> 00:21:50,000
对对对

756
00:21:50,000 --> 00:21:51,000
就看我效果还挺好的

757
00:21:51,000 --> 00:21:52,000
超乎我的意料

758
00:21:52,000 --> 00:21:53,000
后来他他交付给我的

759
00:21:53,000 --> 00:21:55,000
就是为了还是为了这个提及的原因

760
00:21:55,000 --> 00:21:58,000
我就说我们大概应该不会讲

761
00:21:58,000 --> 00:21:59,000
不会也不会打

762
00:21:59,000 --> 00:21:59,000
主要是好

763
00:21:59,000 --> 00:22:02,000
也不会用这个什么阿拉伯文和西伯来文

764
00:22:02,000 --> 00:22:03,000
就把那几个符号给去掉了

765
00:22:04,000 --> 00:22:06,000
然后我问 villie 说

766
00:22:06,000 --> 00:22:07,000
他应该是没有韩文的部分的

767
00:22:07,000 --> 00:22:10,000
因为韩文好像挺可能就是比较难做

768
00:22:10,000 --> 00:22:12,000
那我们想一下

769
00:22:12,000 --> 00:22:13,000
好像我们官员没有韩文

770
00:22:13,000 --> 00:22:15,000
这个也还也就过去了

771
00:22:15,000 --> 00:22:16,000
但是遇到另外一个问题

772
00:22:16,000 --> 00:22:18,000
就是我们毕竟是一个对吧

773
00:22:18,000 --> 00:22:20,000
面向这个中老年程序员的一个节目

774
00:22:20,000 --> 00:22:26,000
所以有一有一有一有两期节目是有贴代码的

775
00:22:26,000 --> 00:22:28,000
有一有一小段代码

776
00:22:28,000 --> 00:22:31,000
那么我就需要一个等宽的这个拉丁字字符

777
00:22:32,000 --> 00:22:34,000
然后 villie 就帮我们调了一个

778
00:22:35,000 --> 00:22:37,000
最开始是用了一个就七项素

779
00:22:38,000 --> 00:22:40,000
但就是有些还是有些问题

780
00:22:40,000 --> 00:22:43,000
然后后来他又专门帮我们定制了一个

781
00:22:44,000 --> 00:22:45,000
等宽的点针字

782
00:22:45,000 --> 00:22:50,000
但是就不是严格跟中文有等比的关系了

783
00:22:50,000 --> 00:22:51,000
但其实还好

784
00:22:51,000 --> 00:22:53,000
因为我不需要跟中文配对用

785
00:22:54,000 --> 00:22:57,000
然后另外一个场景就是我们不是之前

786
00:22:58,000 --> 00:23:00,000
每期节目舞蹈都会有一个 Slogan

787
00:23:01,000 --> 00:23:03,000
那就 Slogan 在我们本期的口号是对对对

788
00:23:03,000 --> 00:23:06,000
我们 Slogan 在排版上在网页上排版

789
00:23:06,000 --> 00:23:08,000
那句 Slogan 是协体排的

790
00:23:10,000 --> 00:23:14,000
所以为了要给我们定制了一套协体字的丁毛点针的

791
00:23:14,000 --> 00:23:16,000
就是英文字符

792
00:23:17,000 --> 00:23:18,000
当时因为有一个事情过于疯狂

793
00:23:18,000 --> 00:23:21,000
我们只是在微信上简单聊了一下

794
00:23:21,000 --> 00:23:23,000
这个事情并没有真的发生

795
00:23:23,000 --> 00:23:25,000
villie 说他其实中文也有协体的

796
00:23:29,000 --> 00:23:32,000
所以这个协体是 villie 做的是吧

797
00:23:32,000 --> 00:23:33,000
是 villie 做的

798
00:23:33,000 --> 00:23:33,000
其实还可以

799
00:23:34,000 --> 00:23:36,000
这点就是调了几次的

800
00:23:36,000 --> 00:23:38,000
就是拉丁字幕的协体

801
00:23:38,000 --> 00:23:40,000
我想知道它是自动生成的

802
00:23:40,000 --> 00:23:41,000
这是一个程序生成的

803
00:23:41,000 --> 00:23:43,000
还是一个一个自己去排的

804
00:23:43,000 --> 00:23:44,000
一个点点

805
00:23:44,000 --> 00:23:45,000
那肯定是自己做的

806
00:23:45,000 --> 00:23:47,000
最开始是程序生成

807
00:23:47,000 --> 00:23:51,000
其实就不是协体是那个叫做 oblique 是不是

808
00:23:51,000 --> 00:23:52,000
italic

809
00:23:52,000 --> 00:23:54,000
不是 italic 是真协体

810
00:23:54,000 --> 00:23:54,000
我有个伪协体

811
00:23:54,000 --> 00:23:57,000
就直接把点字拉斜了

812
00:23:57,000 --> 00:23:58,000
最开始是那个

813
00:23:58,000 --> 00:24:00,000
当时我都没有留意到这个问题

814
00:24:00,000 --> 00:24:03,000
因为我都忘了我们有用协体的地方了

815
00:24:03,000 --> 00:24:05,000
因为最近已经没有用了

816
00:24:06,000 --> 00:24:07,000
得归无讨

817
00:24:07,000 --> 00:24:09,000
所有那么多口号都被你忘了

818
00:24:10,000 --> 00:24:11,000
中文用协体是异端

819
00:24:11,000 --> 00:24:13,000
中文用协体的地方应该用海体吗

820
00:24:13,000 --> 00:24:13,000
不是

821
00:24:14,000 --> 00:24:15,000
文幕口都是英文的

822
00:24:15,000 --> 00:24:15,000
对

823
00:24:16,000 --> 00:24:17,000
所以只是英文的部分

824
00:24:17,000 --> 00:24:19,000
但是我开始没有意识到

825
00:24:19,000 --> 00:24:22,000
后来是我把 Dimao

826
00:24:22,000 --> 00:24:24,000
外部部署成文放到网上去

827
00:24:24,000 --> 00:24:26,000
然后让 villie 来看

828
00:24:26,000 --> 00:24:27,000
效果的时候他发现了

829
00:24:27,000 --> 00:24:29,000
然后他说这个协体好像是有点问题

830
00:24:29,000 --> 00:24:30,000
他又修了一下

831
00:24:30,000 --> 00:24:32,000
然后给了我单独的一个

832
00:24:32,000 --> 00:24:34,000
就之前给了我单独一个叫做

833
00:24:34,000 --> 00:24:35,000
叫做 Dinky

834
00:24:35,000 --> 00:24:36,000
Dinky Code

835
00:24:37,000 --> 00:24:38,000
刚才是那个等宽的

836
00:24:38,000 --> 00:24:41,000
后来又做了 Dinky Italics

837
00:24:41,000 --> 00:24:47,000
但这两个都是只包含拉丁和常用符号那部分了

838
00:24:47,000 --> 00:24:49,000
其他中文肯定没有办法做协体

839
00:24:49,000 --> 00:24:51,000
这么小的情况下

840
00:24:51,000 --> 00:24:53,000
但其实你看协体的话

841
00:24:53,000 --> 00:24:57,000
它的一读性就要比普通的正常版本

842
00:24:57,000 --> 00:24:58,000
就差好多了

843
00:24:58,000 --> 00:24:59,000
那肯定

844
00:24:59,000 --> 00:25:00,000
就斗了

845
00:25:00,000 --> 00:25:02,000
就真协体的可读性是要差的

846
00:25:02,000 --> 00:25:06,000
但是伪协体之前的一读性还是挺不错的

847
00:25:07,000 --> 00:25:08,000
很奇怪

848
00:25:08,000 --> 00:25:08,000
对不起

849
00:25:10,000 --> 00:25:13,000
网页看习惯了以后

850
00:25:13,000 --> 00:25:15,000
反而就已经习惯了点证

851
00:25:15,000 --> 00:25:17,000
看习惯要反而就看

852
00:25:17,000 --> 00:25:21,000
比如说咱们字弹字串的第三期表情符号

853
00:25:21,000 --> 00:25:23,000
超轻丝异的

854
00:25:23,000 --> 00:25:24,000
A 模式

855
00:25:25,000 --> 00:25:26,000
反差感特别强烈

856
00:25:26,000 --> 00:25:27,000
是不是

857
00:25:27,000 --> 00:25:28,000
对

858
00:25:31,000 --> 00:25:32,000
太魔化了

859
00:25:32,000 --> 00:25:35,000
反正我目前还挺满意显示效果的

860
00:25:35,000 --> 00:25:36,000
虽然说刚才有说

861
00:25:36,000 --> 00:25:37,000
如果你仔细看的话

862
00:25:37,000 --> 00:25:37,000
有一些

863
00:25:39,000 --> 00:25:40,000
但根据你流量去宽度

864
00:25:40,000 --> 00:25:42,000
因为它分拦是自适应的

865
00:25:42,000 --> 00:25:43,000
在某些宽度下面

866
00:25:43,000 --> 00:25:46,000
它就会出现灰标的问题

867
00:25:46,000 --> 00:25:47,000
但是有些情况下

868
00:25:47,000 --> 00:25:49,000
如果你刚好叉好的分拦出来

869
00:25:49,000 --> 00:25:51,000
都是整数倍的向速

870
00:25:51,000 --> 00:25:55,000
不出现定位半个向速的

871
00:25:55,000 --> 00:25:57,000
或者是小于一个向速的情况下

872
00:25:57,000 --> 00:26:00,000
它的每个边缘都是非常 really 清晰的

873
00:26:00,000 --> 00:26:02,000
但还要加新号

874
00:26:02,000 --> 00:26:05,000
就是你前提是你在一个真的

875
00:26:05,000 --> 00:26:07,000
可以点对点显示的二查

876
00:26:07,000 --> 00:26:08,000
或者三查屏幕上才可以

877
00:26:08,000 --> 00:26:08,000
对吧

878
00:26:08,000 --> 00:26:09,000
因为刚才讲了

879
00:26:10,000 --> 00:26:12,000
其实你特别在意

880
00:26:12,000 --> 00:26:16,000
如果你特别在意显示器

881
00:26:16,000 --> 00:26:20,000
或者说是应该是浏览器带来的

882
00:26:20,000 --> 00:26:21,000
这个次向数渲染

883
00:26:21,000 --> 00:26:24,000
或者是其他的一些抗拒持渲染效果

884
00:26:24,000 --> 00:26:26,000
你可以在 CSS 里把它关掉

885
00:26:26,000 --> 00:26:26,000
关掉

886
00:26:26,000 --> 00:26:27,000
没有用

887
00:26:27,000 --> 00:26:29,000
关掉不解决刚才那个问题

888
00:26:29,000 --> 00:26:31,000
可以一定程度上缓解

889
00:26:31,000 --> 00:26:33,000
因为 CSS 里面

890
00:26:33,000 --> 00:26:34,000
至少很多浏览器都支持

891
00:26:34,000 --> 00:26:36,000
就是这个

892
00:26:36,000 --> 00:26:37,000
antialis 的设置

893
00:26:37,000 --> 00:26:38,000
我知道

894
00:26:38,000 --> 00:26:38,000
我试过

895
00:26:38,000 --> 00:26:40,000
那个效果比较糟糕

896
00:26:40,000 --> 00:26:42,000
这个还是跟底层操作有什么关系

897
00:26:42,000 --> 00:26:44,000
就是你在麦克恩温度上

898
00:26:44,000 --> 00:26:46,000
不能使用同样的 CSS 规则

899
00:26:46,000 --> 00:26:47,000
来达到同样的效果

900
00:26:47,000 --> 00:26:48,000
这是对大家的问题

901
00:26:48,000 --> 00:26:50,000
可以把那个几个浏览器兼容的

902
00:26:50,000 --> 00:26:51,000
CSS 圈写上

903
00:26:51,000 --> 00:26:52,000
它只要不冲突的话

904
00:26:52,000 --> 00:26:53,000
都可以写上

905
00:26:53,000 --> 00:26:54,000
就啰嗦我一点

906
00:26:54,000 --> 00:26:55,000
不是

907
00:26:55,000 --> 00:26:57,000
就是你用同样的规则

908
00:26:57,000 --> 00:26:59,000
在麦克恩温度上得到的效果是不一样的

909
00:26:59,000 --> 00:27:00,000
这是最大的

910
00:27:00,000 --> 00:27:00,000
对

911
00:27:00,000 --> 00:27:02,000
就是关掉次向数平滑

912
00:27:02,000 --> 00:27:03,000
这个事情

913
00:27:03,000 --> 00:27:06,000
各家的实现上都是问题比较多的

914
00:27:06,000 --> 00:27:06,000
对

915
00:27:06,000 --> 00:27:08,000
所以因为这个事情也不是一个

916
00:27:08,000 --> 00:27:08,000
就是产界的

917
00:27:08,000 --> 00:27:10,000
CSS 规则里面有一条

918
00:27:10,000 --> 00:27:12,000
就是好像叫 tex rendering

919
00:27:12,000 --> 00:27:13,000
还是叫 fault rendering

920
00:27:13,000 --> 00:27:13,000
它有

921
00:27:13,000 --> 00:27:15,000
然后它现在有两个

922
00:27:15,000 --> 00:27:18,000
应该是 Mozilla 和 WiPkit 各有一个实现

923
00:27:18,000 --> 00:27:20,000
但这两个实现最后得到的效果都是

924
00:27:20,000 --> 00:27:22,000
在麦上好很多

925
00:27:22,000 --> 00:27:23,000
但是在温度上

926
00:27:23,000 --> 00:27:25,000
就还是十一坨

927
00:27:25,000 --> 00:27:25,000
对

928
00:27:25,000 --> 00:27:28,000
反正这个问题是比较多的

929
00:27:28,000 --> 00:27:28,000
所以说

930
00:27:28,000 --> 00:27:30,000
刚才真语说这条

931
00:27:30,000 --> 00:27:31,000
我其实我在开发的时候

932
00:27:31,000 --> 00:27:32,000
我就试过了

933
00:27:32,000 --> 00:27:34,000
效果是比反正一个是不一致

934
00:27:34,000 --> 00:27:36,000
一个就是说其实挺糟糕的

935
00:27:36,000 --> 00:27:36,000
而且也不能解决

936
00:27:36,000 --> 00:27:37,000
刚才说的

937
00:27:37,000 --> 00:27:38,000
比如说你的屏幕

938
00:27:38,000 --> 00:27:40,000
不是点对点

939
00:27:40,000 --> 00:27:40,000
导致的这个问题

940
00:27:40,000 --> 00:27:42,000
这个是你不断软件

941
00:27:42,000 --> 00:27:42,000
怎么调出调不了的

942
00:27:42,000 --> 00:27:44,000
因为你一个是你在操作系统

943
00:27:44,000 --> 00:27:45,000
本身的设置的问题

944
00:27:45,000 --> 00:27:46,000
你这个你是改不了

945
00:27:46,000 --> 00:27:46,000
用胡设置的

946
00:27:46,000 --> 00:27:47,000
对吧

947
00:27:47,000 --> 00:27:49,000
所以我不能检测到说

948
00:27:49,000 --> 00:27:50,000
这个用户说是这个

949
00:27:50,000 --> 00:27:51,000
不是点的点

950
00:27:51,000 --> 00:27:52,000
我谈到谈创说

951
00:27:52,000 --> 00:27:53,000
你这个不是点的点

952
00:27:53,000 --> 00:27:54,000
你赶紧把那个点给弄回来

953
00:27:54,000 --> 00:27:54,000
对吧

954
00:27:54,000 --> 00:27:55,000
这也不现实

955
00:27:58,000 --> 00:28:00,000
然后就是在做完这一套之后

956
00:28:00,000 --> 00:28:01,000
我就在这

957
00:28:01,000 --> 00:28:03,000
这应该是前两周吧

958
00:28:03,000 --> 00:28:05,000
就在刷那个 hacker news

959
00:28:05,000 --> 00:28:06,000
这个发言上面

960
00:28:07,000 --> 00:28:10,000
竟然有人在搞这个 xp.css

961
00:28:10,000 --> 00:28:12,000
什么意思

962
00:28:12,000 --> 00:28:16,000
他要用 css 来复原当初的这个

963
00:28:16,000 --> 00:28:17,000
windows xp 时代

964
00:28:17,000 --> 00:28:18,000
就是那个什么

965
00:28:18,000 --> 00:28:20,000
640 x 480 像素的

966
00:28:20,000 --> 00:28:21,000
那个显示屏

967
00:28:21,000 --> 00:28:23,000
那种那种那种

968
00:28:23,000 --> 00:28:24,000
那种那种那种像素感

969
00:28:24,000 --> 00:28:26,000
不是我们现在追求的那种

970
00:28:26,000 --> 00:28:27,000
其实也算是了

971
00:28:27,000 --> 00:28:29,000
只是说可能不是特别

972
00:28:29,000 --> 00:28:31,000
他是从英文那个事件来做的

973
00:28:31,000 --> 00:28:32,000
他也提到了说

974
00:28:32,000 --> 00:28:34,000
怎么用这个 wavfont 来

975
00:28:34,000 --> 00:28:35,000
来实现这种像素的感

976
00:28:35,000 --> 00:28:36,000
对吧

977
00:28:36,000 --> 00:28:39,000
包括是就是你真怀疑

978
00:28:39,000 --> 00:28:40,000
当年的那个 windows

979
00:28:40,000 --> 00:28:42,000
这个这个常用的那几个字

980
00:28:42,000 --> 00:28:43,000
比如说像 verdana

981
00:28:43,000 --> 00:28:44,000
像 verdana

982
00:28:45,000 --> 00:28:46,000
Georgia

983
00:28:46,000 --> 00:28:48,000
还像那个 times new roman 这些

984
00:28:48,000 --> 00:28:51,000
在关掉这个次像素平滑的

985
00:28:51,000 --> 00:28:53,000
那个情况下

986
00:28:53,000 --> 00:28:54,000
实现出点的点

987
00:28:54,000 --> 00:28:55,000
炫耀的感觉

988
00:28:55,000 --> 00:28:55,000
对吧

989
00:28:55,000 --> 00:28:56,000
但是他其实没有

990
00:28:56,000 --> 00:28:57,000
他也是用

991
00:28:57,000 --> 00:28:57,000
因为刚才讲的

992
00:28:57,000 --> 00:28:58,000
那个 wavfont

993
00:28:58,000 --> 00:29:01,000
他其实不支持这个真像素字体

994
00:29:01,000 --> 00:29:02,000
他说都是也是微像素

995
00:29:02,000 --> 00:29:05,000
也是用那个钉铆的类似的手法

996
00:29:05,000 --> 00:29:07,000
就是把它做成史量字

997
00:29:07,000 --> 00:29:09,000
但是是那 trace 出来的点

998
00:29:09,000 --> 00:29:10,000
就是比较整数的

999
00:29:10,000 --> 00:29:12,000
那这样的他在 rendering

1000
00:29:12,000 --> 00:29:13,000
在 masterize 过后

1001
00:29:13,000 --> 00:29:15,000
都得到的还是一个像素化的感觉的

1002
00:29:16,000 --> 00:29:18,000
对我看到有两个暗粒在做这件事情

1003
00:29:18,000 --> 00:29:20,000
回头我们可以把这两个暗粒放到

1004
00:29:21,000 --> 00:29:21,000
short notes 里面

1005
00:29:21,000 --> 00:29:22,000
大家有兴趣的话

1006
00:29:22,000 --> 00:29:23,000
可以点来看一下

1007
00:29:23,000 --> 00:29:24,000
但是我就觉得

1008
00:29:24,000 --> 00:29:26,000
因为他当然一个是因为拉定字符的

1009
00:29:27,000 --> 00:29:27,000
数量比较少

1010
00:29:27,000 --> 00:29:29,000
而且他点也比较好弄

1011
00:29:30,000 --> 00:29:32,000
他的还原是效果还是比较高的

1012
00:29:32,000 --> 00:29:33,000
后来我想了一下说

1013
00:29:33,000 --> 00:29:34,000
我能不能还原出

1014
00:29:34,000 --> 00:29:37,000
比如说我不还原 windows xp 那种

1015
00:29:37,000 --> 00:29:38,000
比较难的情况下

1016
00:29:38,000 --> 00:29:39,000
我就还原一个

1017
00:29:40,000 --> 00:29:42,000
以前叫什么 doss 下面的那种

1018
00:29:42,000 --> 00:29:43,000
什么 ucdoss

1019
00:29:43,000 --> 00:29:45,000
中文 doss 环境那种感觉行不行

1020
00:29:45,000 --> 00:29:46,000
对吧

1021
00:29:46,000 --> 00:29:48,000
但是就是因为刚才

1022
00:29:49,000 --> 00:29:50,000
不能严格点着点的问题

1023
00:29:50,000 --> 00:29:51,000
可能还不太好实现

1024
00:29:51,000 --> 00:29:52,000
我们现在反正还在研究

1025
00:29:53,000 --> 00:29:56,000
无讨也最近也在做类似风格的事情

1026
00:29:56,000 --> 00:29:59,000
所以我们都刚好凑到一块

1027
00:30:00,000 --> 00:30:02,000
对现在其实网上有好多那种

1028
00:30:02,000 --> 00:30:03,000
在网页里面跑一个操作系统

1029
00:30:03,000 --> 00:30:04,000
就是跑一个古老的

1030
00:30:04,000 --> 00:30:06,000
你真操作系统的效果

1031
00:30:06,000 --> 00:30:08,000
他们用的字体也差不多

1032
00:30:08,000 --> 00:30:09,000
虽然不是完全一致

1033
00:30:09,000 --> 00:30:11,000
但也是那种就是古早的

1034
00:30:12,000 --> 00:30:16,000
iVMPC 机里面内嵌的那种 room 的字体

1035
00:30:17,000 --> 00:30:18,000
那个还是比较好的

1036
00:30:19,000 --> 00:30:22,000
你刚才用 canvas 直接把字体的渲染结果换了出

1037
00:30:22,000 --> 00:30:24,000
你说思路倒是可以

1038
00:30:24,000 --> 00:30:28,000
就是用 HTML 5 canvas 那套 API

1039
00:30:28,000 --> 00:30:30,000
然后直接在里面跑

1040
00:30:30,000 --> 00:30:31,000
直接往上画

1041
00:30:31,000 --> 00:30:32,000
但这样就有个问题

1042
00:30:32,000 --> 00:30:33,000
你那个文字就不可选了

1043
00:30:33,000 --> 00:30:35,000
至少我们现在做的这种伪向速感

1044
00:30:35,000 --> 00:30:37,000
它其实每个字都是可以

1045
00:30:37,000 --> 00:30:39,000
都是非常 accessible 的

1046
00:30:39,000 --> 00:30:42,000
对 他们做你真操作系统

1047
00:30:42,000 --> 00:30:45,000
这也算这帮人是无所谓这件事的

1048
00:30:45,000 --> 00:30:46,000
但是如果你想要说

1049
00:30:46,000 --> 00:30:48,000
我要做一个伪操作系统的风格

1050
00:30:48,000 --> 00:30:51,000
同时又实际上是一个 accessible website

1051
00:30:51,000 --> 00:30:52,000
那的确是非常难的

1052
00:30:52,000 --> 00:30:54,000
至少你不能保证跨平台

1053
00:30:55,000 --> 00:30:55,000
对

1054
00:30:55,000 --> 00:30:56,000
就这个就比较坑一点

1055
00:30:56,000 --> 00:30:58,000
所以我当然我想一下

1056
00:30:58,000 --> 00:31:00,000
如果我的要求不是那么高

1057
00:31:00,000 --> 00:31:03,000
我只是要求尽可能的向速的对齐

1058
00:31:03,000 --> 00:31:03,000
就包括解决

1059
00:31:04,000 --> 00:31:06,000
比如说现在我们的首页

1060
00:31:06,000 --> 00:31:09,000
它是一个用最新的 css 3 的 grid

1061
00:31:09,000 --> 00:31:12,000
就是 grid 网格拍布

1062
00:31:12,000 --> 00:31:13,000
反过来不叫做

1063
00:31:13,000 --> 00:31:13,000
它比如说比如说

1064
00:31:13,000 --> 00:31:16,000
我默认打开是一个三列

1065
00:31:16,000 --> 00:31:17,000
三蓝

1066
00:31:18,000 --> 00:31:19,000
三蓝 对

1067
00:31:19,000 --> 00:31:20,000
三蓝就比较难处

1068
00:31:20,000 --> 00:31:22,000
这就可能导致刚刚我说的

1069
00:31:22,000 --> 00:31:23,000
边缘有灰度

1070
00:31:23,000 --> 00:31:25,000
因为半个向速的问题

1071
00:31:25,000 --> 00:31:25,000
对不对

1072
00:31:25,000 --> 00:31:27,000
但如果说有一个什么

1073
00:31:27,000 --> 00:31:28,000
我不用三蓝

1074
00:31:28,000 --> 00:31:30,000
我就用一蓝或者两蓝

1075
00:31:30,000 --> 00:31:31,000
或者是四蓝

1076
00:31:31,000 --> 00:31:33,000
一定通过这个就是

1077
00:31:33,000 --> 00:31:34,000
Gelasker 来实现的话

1078
00:31:35,000 --> 00:31:36,000
也可能实现说

1079
00:31:36,000 --> 00:31:38,000
我能够指定到向速级别的宽度

1080
00:31:38,000 --> 00:31:41,000
至少你说在不同系统上

1081
00:31:41,000 --> 00:31:41,000
它有一定的出

1082
00:31:41,000 --> 00:31:43,000
它至少它多一个向速

1083
00:31:43,000 --> 00:31:43,000
少个向速

1084
00:31:43,000 --> 00:31:45,000
它至少还是个准数倍

1085
00:31:45,000 --> 00:31:45,000
应该还是可以做的

1086
00:31:45,000 --> 00:31:47,000
我觉得有一些机会

1087
00:31:50,000 --> 00:31:51,000
所以就这个是我们

1088
00:31:52,000 --> 00:31:54,000
官网改头画面

1089
00:31:54,000 --> 00:31:57,000
其实都是在听了你们前一期节目的

1090
00:31:57,000 --> 00:31:58,000
古造下面实现的

1091
00:31:58,000 --> 00:31:59,000
当然这里也非常感谢

1092
00:31:59,000 --> 00:32:02,000
威力帮这个过程中

1093
00:32:02,000 --> 00:32:04,000
非常尽心尽力

1094
00:32:04,000 --> 00:32:06,000
帮我们做了那么多的定制化

1095
00:32:07,000 --> 00:32:09,000
然后我们也是第一个吃了螃蟹的

1096
00:32:09,000 --> 00:32:12,000
现在好像把网站做成 Rachel 风格

1097
00:32:12,000 --> 00:32:12,000
是一个

1098
00:32:12,000 --> 00:32:14,000
三号是个潮流

1099
00:32:14,000 --> 00:32:17,000
就是包括在文艺界也是有

1100
00:32:17,000 --> 00:32:18,000
怎么叫文艺界

1101
00:32:18,000 --> 00:32:21,000
我想说在设计界也是

1102
00:32:21,000 --> 00:32:23,000
现在好像新起了 RachelWave 这样

1103
00:32:23,000 --> 00:32:24,000
一个风潮

1104
00:32:24,000 --> 00:32:26,000
有经典一直都流行 Rachel

1105
00:32:26,000 --> 00:32:27,000
对

1106
00:32:27,000 --> 00:32:28,000
复古风

1107
00:32:28,000 --> 00:32:30,000
不但最近比如说蒸汽波

1108
00:32:30,000 --> 00:32:32,000
Wipe or Why 好像是这个名字

1109
00:32:32,000 --> 00:32:34,000
就是特别流行

1110
00:32:34,000 --> 00:32:36,000
就是时间代的日本流行音乐

1111
00:32:36,000 --> 00:32:39,000
配上那种什么美少女战士

1112
00:32:39,000 --> 00:32:42,000
或者是超出目要赛的动画片

1113
00:32:42,000 --> 00:32:44,000
然后现在各种各样的音乐

1114
00:32:44,000 --> 00:32:46,000
全都被整成那个风格

1115
00:32:46,000 --> 00:32:47,000
就

1116
00:32:47,000 --> 00:32:48,000
之前

1117
00:32:48,000 --> 00:32:50,000
我说明题里有打个岔的事

1118
00:32:50,000 --> 00:32:53,000
就是叫做斑带

1119
00:32:53,000 --> 00:32:54,000
作文叫什么

1120
00:32:54,000 --> 00:32:56,000
百代

1121
00:32:56,000 --> 00:32:56,000
是吧

1122
00:32:56,000 --> 00:33:00,000
百代在应该是去年年末的时候

1123
00:33:00,000 --> 00:33:02,000
把他之前的一些老的

1124
00:33:02,000 --> 00:33:04,000
就小时候我们看了个动画片

1125
00:33:04,000 --> 00:33:05,000
全部给放 YouTube 上面去了

1126
00:33:05,000 --> 00:33:07,000
然后我就去追了一遍

1127
00:33:07,000 --> 00:33:08,000
那个叫什么来的

1128
00:33:08,000 --> 00:33:11,000
摩神英雄转

1129
00:33:11,000 --> 00:33:12,000
应该是那个字念转

1130
00:33:12,000 --> 00:33:13,000
是那个

1131
00:33:13,000 --> 00:33:14,000
你记不记不记不

1132
00:33:14,000 --> 00:33:15,000
有个山

1133
00:33:15,000 --> 00:33:17,000
山有一圈彩虹

1134
00:33:17,000 --> 00:33:18,000
那气死了什么

1135
00:33:18,000 --> 00:33:18,000
创建山

1136
00:33:18,000 --> 00:33:19,000
对吧

1137
00:33:19,000 --> 00:33:20,000
然后有好的彩虹

1138
00:33:20,000 --> 00:33:21,000
我把那个又看了一遍

1139
00:33:21,000 --> 00:33:21,000
不是

1140
00:33:21,000 --> 00:33:22,000
应该是一个

1141
00:33:22,000 --> 00:33:23,000
他驾驶一个

1142
00:33:23,000 --> 00:33:24,000
类似像高达

1143
00:33:24,000 --> 00:33:24,000
养了几下

1144
00:33:24,000 --> 00:33:25,000
对

1145
00:33:25,000 --> 00:33:26,000
类高达

1146
00:33:26,000 --> 00:33:27,000
还有一个龙

1147
00:33:27,000 --> 00:33:27,000
骑着龙

1148
00:33:27,000 --> 00:33:30,000
我觉得他好像有个女主的名字

1149
00:33:30,000 --> 00:33:31,000
叫 Himiko

1150
00:33:31,000 --> 00:33:34,000
是日本女巫的名字

1151
00:33:34,000 --> 00:33:35,000
对

1152
00:33:35,000 --> 00:33:35,000
那个时候

1153
00:33:35,000 --> 00:33:37,000
这个动画片小时候好火了

1154
00:33:37,000 --> 00:33:38,000
就我们关有一个女生

1155
00:33:38,000 --> 00:33:39,000
就叫 Himiko

1156
00:33:39,000 --> 00:33:39,000
我们也骑着

1157
00:33:39,000 --> 00:33:40,000
对

1158
00:33:40,000 --> 00:33:40,000
你承认

1159
00:33:40,000 --> 00:33:43,000
我当时应该是上小学

1160
00:33:43,000 --> 00:33:44,000
对吧

1161
00:33:44,000 --> 00:33:45,000
小学几年节播

1162
00:33:45,000 --> 00:33:46,000
反正就是那个时候特别火

1163
00:33:46,000 --> 00:33:48,000
一到播出的时候

1164
00:33:48,000 --> 00:33:49,000
这些手机电视机里面看

1165
00:33:49,000 --> 00:33:50,000
万年空降

1166
00:33:50,000 --> 00:33:52,000
而且你放到现在看

1167
00:33:52,000 --> 00:33:53,000
他是做了高薪穷制

1168
00:33:53,000 --> 00:33:53,000
不知道怎么

1169
00:33:53,000 --> 00:33:54,000
反正看起来

1170
00:33:54,000 --> 00:33:57,000
那个 YouTube 上面的效果还挺清楚的

1171
00:33:57,000 --> 00:33:57,000
那我就追了一遍

1172
00:33:57,000 --> 00:33:59,000
而且这个片特别坑

1173
00:33:59,000 --> 00:34:01,000
他好像有三部

1174
00:34:01,000 --> 00:34:02,000
然后都烂尾了

1175
00:34:02,000 --> 00:34:03,000
就没有播完

1176
00:34:03,000 --> 00:34:04,000
不知道为什么

1177
00:34:04,000 --> 00:34:05,000
是在中国没有播完

1178
00:34:05,000 --> 00:34:06,000
还是没有画完

1179
00:34:06,000 --> 00:34:08,000
就 YouTube 上也没有

1180
00:34:08,000 --> 00:34:09,000
就我不知道怎么一回事

1181
00:34:09,000 --> 00:34:10,000
有可能是没有没有画

1182
00:34:10,000 --> 00:34:11,000
我可能是没有画完

1183
00:34:11,000 --> 00:34:11,000
这就很坑

1184
00:34:11,000 --> 00:34:12,000
然后这故事到时候

1185
00:34:12,000 --> 00:34:13,000
就我那天是

1186
00:34:13,000 --> 00:34:14,000
他是先放的第一部

1187
00:34:14,000 --> 00:34:16,000
他是一周跟一集

1188
00:34:16,000 --> 00:34:17,000
一集也就十了

1189
00:34:17,000 --> 00:34:18,000
十分钟的样子

1190
00:34:18,000 --> 00:34:20,000
然后我第一季

1191
00:34:20,000 --> 00:34:21,000
还差两三集

1192
00:34:21,000 --> 00:34:23,000
可能就追完了

1193
00:34:23,000 --> 00:34:24,000
他就放第二部了

1194
00:34:24,000 --> 00:34:26,000
然后呢

1195
00:34:26,000 --> 00:34:28,000
然后呢

1196
00:34:28,000 --> 00:34:31,000
这次需要付费解锁

1197
00:34:31,000 --> 00:34:31,000
没有

1198
00:34:31,000 --> 00:34:32,000
他也没有这个选项

1199
00:34:32,000 --> 00:34:35,000
他是为了卖手办

1200
00:34:35,000 --> 00:34:38,000
他下面又在出那个机甲的手办

1201
00:34:38,000 --> 00:34:40,000
OK 我想起来了

1202
00:34:40,000 --> 00:34:42,000
他们的机甲非常 Q 版是吧

1203
00:34:42,000 --> 00:34:42,000
对

1204
00:34:42,000 --> 00:34:45,000
他们整个动画片都是那种萌细的

1205
00:34:45,000 --> 00:34:46,000
也不要

1206
00:34:46,000 --> 00:34:48,000
Q 系就特别搞笑的那种

1207
00:34:48,000 --> 00:34:48,000
对

1208
00:34:48,000 --> 00:34:50,000
二手是 Q 版高达一样

1209
00:34:50,000 --> 00:34:51,000
对

1210
00:34:51,000 --> 00:34:54,000
我当时但是我应该是小时候最喜欢的动画片

1211
00:34:54,000 --> 00:34:55,000
应该能拍到前三吧

1212
00:34:55,000 --> 00:34:56,000
天呐

1213
00:34:56,000 --> 00:34:59,000
所以就在那里敷了骨一下

1214
00:34:59,000 --> 00:35:01,000
而他的音乐我觉得他还挺好听的

1215
00:35:01,000 --> 00:35:03,000
就是一直现在都还记得

1216
00:35:03,000 --> 00:35:05,000
感觉这期节目播出之后

1217
00:35:05,000 --> 00:35:08,000
视频的点击量会大增

1218
00:35:08,000 --> 00:35:12,000
对一看都是我们 IP 联络过去的

1219
00:35:12,000 --> 00:35:12,000
对不对

1220
00:35:12,000 --> 00:35:14,000
MachineAU.Wataru

1221
00:35:14,000 --> 00:35:14,000
对吧

1222
00:35:14,000 --> 00:35:16,000
他们叫 Wataru

1223
00:35:16,000 --> 00:35:17,000
Wataru 字是什么意思

1224
00:35:17,000 --> 00:35:18,000
男主的名字

1225
00:35:18,000 --> 00:35:19,000
Wataru 是男主的名字

1226
00:35:19,000 --> 00:35:22,000
就是一般写成汉字的杜

1227
00:35:22,000 --> 00:35:23,000
杜江的杜

1228
00:35:23,000 --> 00:35:25,000
杜边杜的杜对吧

1229
00:35:25,000 --> 00:35:26,000
对

1230
00:35:26,000 --> 00:35:27,000
就是他的名字

1231
00:35:27,000 --> 00:35:27,000
对

1232
00:35:27,000 --> 00:35:31,000
反正最近不是在怀疑就考古吗

1233
00:35:31,000 --> 00:35:32,000
特别多这种情况

1234
00:35:32,000 --> 00:35:32,000
对不对

1235
00:35:32,000 --> 00:35:32,000
对

1236
00:35:32,000 --> 00:35:33,000
对

1237
00:35:33,000 --> 00:35:33,000
对

1238
00:35:33,000 --> 00:35:35,000
然后最近也是在商场里面

1239
00:35:35,000 --> 00:35:36,000
应该是疫情之前

1240
00:35:36,000 --> 00:35:39,000
商场也看到很多那种国产复古的

1241
00:35:39,000 --> 00:35:39,000
你知道吧

1242
00:35:39,000 --> 00:35:42,000
你们这边上海有大白兔奶汤

1243
00:35:42,000 --> 00:35:44,000
嗯

1244
00:35:44,000 --> 00:35:45,000
这已经很久了吧

1245
00:35:45,000 --> 00:35:47,000
这个 10 年前就出现了

1246
00:35:47,000 --> 00:35:48,000
没有

1247
00:35:48,000 --> 00:35:50,000
他最近我可能在其他地方咬

1248
00:35:50,000 --> 00:35:52,000
但是我是应该是去年

1249
00:35:52,000 --> 00:35:53,000
就是 19 年

1250
00:35:53,000 --> 00:35:55,000
下半年在深圳才看到

1251
00:35:55,000 --> 00:35:57,000
他搞了一整个展厅的那种复古的

1252
00:35:57,000 --> 00:35:59,000
而且其实你仔细发那个时候的排版

1253
00:35:59,000 --> 00:36:00,000
和设计

1254
00:36:00,000 --> 00:36:01,000
我觉得做的还蛮好的

1255
00:36:01,000 --> 00:36:02,000
是啊

1256
00:36:02,000 --> 00:36:03,000
就是大白兔奶汤那套的设计

1257
00:36:03,000 --> 00:36:04,000
但不知道是谁做的

1258
00:36:04,000 --> 00:36:07,000
可以去找一期节目

1259
00:36:07,000 --> 00:36:08,000
你们可以去考下古

1260
00:36:08,000 --> 00:36:09,000
这个当时是谁做的

1261
00:36:09,000 --> 00:36:11,000
那个字体的设计

1262
00:36:11,000 --> 00:36:12,000
他那个全部都定制的

1263
00:36:12,000 --> 00:36:13,000
因为那个时候还没有

1264
00:36:13,000 --> 00:36:15,000
没有什么数字画设计的

1265
00:36:15,000 --> 00:36:16,000
说公化的

1266
00:36:16,000 --> 00:36:20,000
那个时候美书字和平面设计的工底

1267
00:36:20,000 --> 00:36:22,000
虽然条件非常简陋

1268
00:36:22,000 --> 00:36:25,000
但是最终水准是非常高的

1269
00:36:25,000 --> 00:36:26,000
在 90 年代电脑普及之后

1270
00:36:26,000 --> 00:36:28,000
就是个人桌面出版

1271
00:36:28,000 --> 00:36:30,000
毁了平面设计可以说

1272
00:36:30,000 --> 00:36:33,000
出字烂造的

1273
00:36:33,000 --> 00:36:34,000
就像乱乱的

1274
00:36:34,000 --> 00:36:36,000
低端的这种

1275
00:36:36,000 --> 00:36:36,000
哎呀

1276
00:36:36,000 --> 00:36:39,000
当年就是所有的师傅都有手上功夫的

1277
00:36:39,000 --> 00:36:42,000
就是后来就都都用定了

1278
00:36:42,000 --> 00:36:43,000
大家就没有手上功夫了

1279
00:36:43,000 --> 00:36:44,000
对

1280
00:36:44,000 --> 00:36:44,000
那个时候我去

1281
00:36:44,000 --> 00:36:46,000
我跟老师去做校刊

1282
00:36:46,000 --> 00:36:49,000
做初中还是高中校刊

1283
00:36:49,000 --> 00:36:50,000
去一个印刷厂

1284
00:36:50,000 --> 00:36:51,000
那个师傅的手艺

1285
00:36:51,000 --> 00:36:53,000
真的让人探为观者

1286
00:36:53,000 --> 00:36:55,000
就是从一个简贴画那种

1287
00:36:55,000 --> 00:36:57,000
就是他实际上是一张

1288
00:36:57,000 --> 00:36:58,000
一本很厚的书

1289
00:36:58,000 --> 00:36:59,000
然后里面每一页都是那种

1290
00:36:59,000 --> 00:37:01,000
半透明的简贴画

1291
00:37:01,000 --> 00:37:03,000
然后他从上面裁一下

1292
00:37:03,000 --> 00:37:04,000
然后贴在一个板上

1293
00:37:04,000 --> 00:37:05,000
然后问你这样行不行

1294
00:37:05,000 --> 00:37:06,000
然后再去排版

1295
00:37:06,000 --> 00:37:08,000
然后最后把它印出来

1296
00:37:08,000 --> 00:37:10,000
那个手艺真的让人非常贪腐了

1297
00:37:10,000 --> 00:37:11,000
那绝对是

1298
00:37:11,000 --> 00:37:12,000
就是你看现在一个人

1299
00:37:13,000 --> 00:37:14,000
锹键盘晃鼠标

1300
00:37:14,000 --> 00:37:15,000
做出来排版

1301
00:37:15,000 --> 00:37:17,000
感受是完全不一样

1302
00:37:17,000 --> 00:37:19,000
是一种有那种降义的冲击在里面

1303
00:37:19,000 --> 00:37:22,000
就好像你看一个什么

1304
00:37:22,000 --> 00:37:26,000
Later Price 的那种印刷机一样

1305
00:37:26,000 --> 00:37:28,000
就是赏清月末

1306
00:37:28,000 --> 00:37:29,000
不像现在

1307
00:37:29,000 --> 00:37:31,000
那时候都是剪刀功夫

1308
00:37:31,000 --> 00:37:33,000
剪紧贴贴都是

1309
00:37:35,000 --> 00:37:35,000
对

1310
00:37:35,000 --> 00:37:37,000
就是那天我就是在光上场的时候

1311
00:37:37,000 --> 00:37:38,000
看到大白兔

1312
00:37:38,000 --> 00:37:39,000
他搞的那套东西

1313
00:37:39,000 --> 00:37:40,000
然后我就仔细进行

1314
00:37:40,000 --> 00:37:42,000
其实小时候就是光吃那个糖

1315
00:37:42,000 --> 00:37:44,000
也没在意包装纸

1316
00:37:44,000 --> 00:37:45,000
然后他那个时候

1317
00:37:45,000 --> 00:37:47,000
就是他卖到那个糖里面的包装纸

1318
00:37:47,000 --> 00:37:50,000
因为我估计应该是成本和工艺的考虑

1319
00:37:50,000 --> 00:37:53,000
他其实不是特别的清晰

1320
00:37:53,000 --> 00:37:56,000
他现在他都是全部用最新的工艺做出

1321
00:37:56,000 --> 00:37:58,000
原来的图样

1322
00:37:58,000 --> 00:37:59,000
所以你仔细看

1323
00:37:59,000 --> 00:38:00,000
他非常在现代工艺下面

1324
00:38:00,000 --> 00:38:02,000
他非常清楚

1325
00:38:02,000 --> 00:38:04,000
然后边缘就做得非常好

1326
00:38:04,000 --> 00:38:06,000
我觉得仔细看配色

1327
00:38:06,000 --> 00:38:07,000
就搭得挺棒的

1328
00:38:07,000 --> 00:38:09,000
大白兔的兔毛看了

1329
00:38:09,000 --> 00:38:12,000
有毛吗

1330
00:38:12,000 --> 00:38:13,000
他那个没有毛

1331
00:38:13,000 --> 00:38:15,000
高清版大白兔

1332
00:38:15,000 --> 00:38:17,000
有一个版本是有毛的

1333
00:38:17,000 --> 00:38:17,000
对

1334
00:38:17,000 --> 00:38:19,000
特别搞笑

1335
00:38:21,000 --> 00:38:21,000
等等

1336
00:38:21,000 --> 00:38:23,000
我们这期节目聊啥

1337
00:38:23,000 --> 00:38:26,000
都被你折到哪去了

1338
00:38:26,000 --> 00:38:28,000
不过我们内核拱荒

1339
00:38:28,000 --> 00:38:31,000
这次作为丁毛典政体的案例

1340
00:38:31,000 --> 00:38:35,000
我其实已经在我们的 Type 会员的

1341
00:38:35,000 --> 00:38:37,000
5 月份这一期里面介绍了

1342
00:38:37,000 --> 00:38:40,000
所以大家如果在会刊里面

1343
00:38:40,000 --> 00:38:41,000
也可以看到

1344
00:38:41,000 --> 00:38:43,000
我们改版后的内核

1345
00:38:43,000 --> 00:38:46,000
恐慌的妄议的效果

1346
00:38:46,000 --> 00:38:47,000
感谢

1347
00:38:47,000 --> 00:38:48,000
推荐我们回去看一下

1348
00:38:48,000 --> 00:38:50,000
能有多少个点击过来

1349
00:38:55,000 --> 00:38:58,000
所以刚才讲了那么多与主题

1350
00:38:58,000 --> 00:38:59,000
无关的事情

1351
00:38:59,000 --> 00:39:01,000
我们这期节目的聊什么

1352
00:39:01,000 --> 00:39:01,000
还算是有关

1353
00:39:01,000 --> 00:39:03,000
勉强跟千尺上

1354
00:39:03,000 --> 00:39:05,000
OK 好的

1355
00:39:05,000 --> 00:39:06,000
不是今天的主题

1356
00:39:06,000 --> 00:39:08,000
我们今天主题讲什么

1357
00:39:08,000 --> 00:39:10,000
我想想这个怎么描述

1358
00:39:10,000 --> 00:39:12,000
其实今天主题跟我们之前创台的

1359
00:39:12,000 --> 00:39:15,000
好几次节目都是有或多少的关联

1360
00:39:15,000 --> 00:39:16,000
千四万就是关联

1361
00:39:16,000 --> 00:39:17,000
当然了

1362
00:39:17,000 --> 00:39:19,000
我这个都是想好的

1363
00:39:19,000 --> 00:39:21,000
很长时间运量的

1364
00:39:21,000 --> 00:39:23,000
都是有计划的对不对

1365
00:39:23,000 --> 00:39:25,000
明明之中早已进去

1366
00:39:26,000 --> 00:39:28,000
Eric 居然是非常用心的

1367
00:39:28,000 --> 00:39:31,000
如像我们两个每次来都是像打酱油一样

1368
00:39:31,000 --> 00:39:33,000
我们都是很欢乐的打酱油

1369
00:39:33,000 --> 00:39:34,000
对

1370
00:39:34,000 --> 00:39:36,000
我们是双重捧根

1371
00:39:36,000 --> 00:39:38,000
但是你们能不能说

1372
00:39:39,000 --> 00:39:39,000
对

1373
00:39:39,000 --> 00:39:41,000
我们是之前创台说

1374
00:39:41,000 --> 00:39:43,000
讲过 unicode 的各种问题

1375
00:39:43,000 --> 00:39:45,000
然后包括应该有最开始的一期

1376
00:39:45,000 --> 00:39:46,000
也讲过什么

1377
00:39:46,000 --> 00:39:49,000
你在键盘上按下一个按键字

1378
00:39:49,000 --> 00:39:50,000
怎么出现的

1379
00:39:50,000 --> 00:39:51,000
评论上的整个过程的

1380
00:39:51,000 --> 00:39:51,000
对吧

1381
00:39:51,000 --> 00:39:55,000
但其实今天讲的话题跟这两件事情

1382
00:39:55,000 --> 00:39:57,000
或多或少是有一定关系的

1383
00:39:57,000 --> 00:39:57,000
对吧

1384
00:39:57,000 --> 00:39:59,000
就是说文件系统

1385
00:39:59,000 --> 00:40:02,000
大家如果还知道什么叫文件系统的话

1386
00:40:02,000 --> 00:40:06,000
现在应该很多 00 后没有用 BC 或者是 BIKE 的话

1387
00:40:06,000 --> 00:40:06,000
它可能不

1388
00:40:06,000 --> 00:40:08,000
Mobile first generation

1389
00:40:08,000 --> 00:40:08,000
对

1390
00:40:08,000 --> 00:40:11,000
就是 Mobile first generation

1391
00:40:11,000 --> 00:40:12,000
这一代应该已经不知道什么是文件系统

1392
00:40:12,000 --> 00:40:13,000
文件系统

1393
00:40:14,000 --> 00:40:16,000
你打开所谓的资源管理器

1394
00:40:16,000 --> 00:40:16,000
对吧

1395
00:40:16,000 --> 00:40:17,000
能看到那个东西

1396
00:40:17,000 --> 00:40:19,000
反正你在像我跟吴涛

1397
00:40:21,000 --> 00:40:23,000
装团的人就还知道

1398
00:40:23,000 --> 00:40:24,000
还可以有一个命令行

1399
00:40:24,000 --> 00:40:24,000
对吧

1400
00:40:24,000 --> 00:40:27,000
能看到路径什么的

1401
00:40:27,000 --> 00:40:27,000
对

1402
00:40:27,000 --> 00:40:28,000
但文件系统

1403
00:40:28,000 --> 00:40:29,000
我们不是聊他本来

1404
00:40:29,000 --> 00:40:31,000
那些其他各种各样的怎么用

1405
00:40:31,000 --> 00:40:32,000
这么一些关键

1406
00:40:32,000 --> 00:40:32,000
我们只聊一个事情

1407
00:40:32,000 --> 00:40:35,000
就是文件系统怎么命名的问题

1408
00:40:35,000 --> 00:40:36,000
就是一个文件

1409
00:40:36,000 --> 00:40:37,000
到底它可以叫什么

1410
00:40:39,000 --> 00:40:42,000
然后其实我们也可以扩展到

1411
00:40:42,000 --> 00:40:43,000
其他的

1412
00:40:43,000 --> 00:40:44,000
就是关于各种元代码

1413
00:40:44,000 --> 00:40:46,000
还有一些语言

1414
00:40:47,000 --> 00:40:49,000
就是我们会涉及到命名的事情

1415
00:40:49,000 --> 00:40:51,000
英文它叫什么

1416
00:40:51,000 --> 00:40:53,000
Naming convention 是吧

1417
00:40:53,000 --> 00:40:54,000
它叫命名规则

1418
00:40:55,000 --> 00:40:57,000
其实会有各种各样的命名规则

1419
00:40:57,000 --> 00:40:58,000
对

1420
00:40:59,000 --> 00:41:02,000
但是像因为我们大家都是 Mac 用户

1421
00:41:02,000 --> 00:41:04,000
Mac 几乎都没有规定

1422
00:41:04,000 --> 00:41:06,000
就不会存在这个事情

1423
00:41:06,000 --> 00:41:08,000
但是以前在很早很早以前

1424
00:41:08,000 --> 00:41:09,000
我们在学命令行

1425
00:41:09,000 --> 00:41:10,000
还在学到死的时候

1426
00:41:10,000 --> 00:41:12,000
一个个样的制度要遵守

1427
00:41:12,000 --> 00:41:13,000
对吧

1428
00:41:13,000 --> 00:41:14,000
对

1429
00:41:14,000 --> 00:41:16,000
那时候你们还记得

1430
00:41:16,000 --> 00:41:17,000
比如说 8.3 规则吗

1431
00:41:17,000 --> 00:41:18,000
对

1432
00:41:18,000 --> 00:41:19,000
这个是

1433
00:41:19,000 --> 00:41:21,000
我想想一下

1434
00:41:21,000 --> 00:41:22,000
这个得要在

1435
00:41:22,000 --> 00:41:25,000
Windows 95 之前的时代的

1436
00:41:25,000 --> 00:41:27,000
应该是 Windows 32 时代的时候

1437
00:41:27,000 --> 00:41:28,000
大家要遵守的一个事情

1438
00:41:28,000 --> 00:41:29,000
对不对

1439
00:41:29,000 --> 00:41:31,000
从 Windows 3.1 开始支持的

1440
00:41:31,000 --> 00:41:32,000
长文件名

1441
00:41:32,000 --> 00:41:32,000
应该是

1442
00:41:32,000 --> 00:41:34,000
但是为了向下兼容

1443
00:41:34,000 --> 00:41:35,000
或者说

1444
00:41:35,000 --> 00:41:36,000
或者对

1445
00:41:36,000 --> 00:41:38,000
它做了一套向下兼容的方案

1446
00:41:38,000 --> 00:41:40,000
就是它这个文件名在 DOS 下面显示的时候

1447
00:41:40,000 --> 00:41:42,000
还是会显示成 8.3

1448
00:41:42,000 --> 00:41:45,000
还是用一个波浪号来显示

1449
00:41:45,000 --> 00:41:46,000
一个波浪号加一个数字

1450
00:41:46,000 --> 00:41:47,000
你们要跟大家解释

1451
00:41:47,000 --> 00:41:48,000
要什么叫 8.3 好吧

1452
00:41:48,000 --> 00:41:49,000
Anyone

1453
00:41:49,000 --> 00:41:51,000
其实我觉得要解释 8.3

1454
00:41:51,000 --> 00:41:52,000
先要解释什么是扩展名

1455
00:41:52,000 --> 00:41:53,000
因为其实 Mac 上

1456
00:41:53,000 --> 00:41:54,000
比如说怎么现在 Mac 上

1457
00:41:54,000 --> 00:41:55,000
摸着的情况下

1458
00:41:55,000 --> 00:41:56,000
还是不显示扩展名的

1459
00:41:56,000 --> 00:41:57,000
对不对

1460
00:41:57,000 --> 00:41:59,000
因为 Mac 其实

1461
00:41:59,000 --> 00:42:00,000
即使没有扩展名也可以

1462
00:42:00,000 --> 00:42:02,000
也成立在 Mac 上面

1463
00:42:02,000 --> 00:42:03,000
那是 Windows 不信

1464
00:42:04,000 --> 00:42:04,000
是这样的

1465
00:42:04,000 --> 00:42:05,000
也是这么来的

1466
00:42:05,000 --> 00:42:07,000
扩展名这个东西最早

1467
00:42:07,000 --> 00:42:09,000
实际上是七神代的一个发明

1468
00:42:09,000 --> 00:42:12,000
当时操逞到 CPM 应该叫

1469
00:42:12,000 --> 00:42:14,000
Ctrl 什么

1470
00:42:14,000 --> 00:42:15,000
DC 是 Ctrl

1471
00:42:15,000 --> 00:42:16,000
我只记得 C 是 Ctrl

1472
00:42:16,000 --> 00:42:17,000
CPM

1473
00:42:17,000 --> 00:42:19,000
就是 DOS

1474
00:42:19,000 --> 00:42:21,000
DOS 是从 CPM 超过来了相当于

1475
00:42:21,000 --> 00:42:23,000
然后 CPM 有扩展名这一项

1476
00:42:23,000 --> 00:42:26,000
因为 CPM 创始人认为

1477
00:42:26,000 --> 00:42:29,000
在和文件相关的所有的原数据里面

1478
00:42:29,000 --> 00:42:31,000
类型数据是最重要的

1479
00:42:31,000 --> 00:42:33,000
所以类型数据应该是文件名利部分

1480
00:42:33,000 --> 00:42:35,000
其实这里是个哲学问题

1481
00:42:35,000 --> 00:42:36,000
就是说一个文件的扩展名

1482
00:42:36,000 --> 00:42:37,000
它其实是定义

1483
00:42:37,000 --> 00:42:39,000
这个文件是一个什么样的种类

1484
00:42:39,000 --> 00:42:40,000
对不对

1485
00:42:40,000 --> 00:42:42,000
然后种类的信息是否是应该

1486
00:42:42,000 --> 00:42:44,000
体现在这个名字里面

1487
00:42:44,000 --> 00:42:45,000
还是说体现在一个什么

1488
00:42:45,000 --> 00:42:46,000
别的地方

1489
00:42:46,000 --> 00:42:48,000
比如说刚才 Eric 提到

1490
00:42:48,000 --> 00:42:49,000
其实 Mac 里面

1491
00:42:49,000 --> 00:42:50,000
你不用扩展名也还可以

1492
00:42:50,000 --> 00:42:50,000
对吧

1493
00:42:50,000 --> 00:42:52,000
它因为它有一些别的方法

1494
00:42:52,000 --> 00:42:53,000
可以判断这个文件

1495
00:42:53,000 --> 00:42:55,000
是一个什么样类型的文件

1496
00:42:55,000 --> 00:42:57,000
比如说我们厂界方式

1497
00:42:57,000 --> 00:42:58,000
有一个什么

1498
00:42:58,000 --> 00:42:59,000
Magic Number

1499
00:42:59,000 --> 00:42:59,000
对吧

1500
00:42:59,000 --> 00:43:00,000
就是在文件开头

1501
00:43:00,000 --> 00:43:01,000
可能有几个字

1502
00:43:02,000 --> 00:43:02,000
Mac

1503
00:43:02,000 --> 00:43:04,000
我想说 Mac 是怎么实现的

1504
00:43:04,000 --> 00:43:06,000
Mac 在资源

1505
00:43:06,000 --> 00:43:07,000
它一个叫

1506
00:43:07,000 --> 00:43:09,000
中文叫什么资源差

1507
00:43:09,000 --> 00:43:10,000
这个 focum

1508
00:43:10,000 --> 00:43:13,000
在很早以前就更复杂

1509
00:43:13,000 --> 00:43:15,000
Focum 好像是经典

1510
00:43:16,000 --> 00:43:17,000
就是 Mac Classic 里面的一个概念

1511
00:43:17,000 --> 00:43:18,000
对

1512
00:43:18,000 --> 00:43:18,000
就 Classical

1513
00:43:19,000 --> 00:43:21,000
因为你 OS 10 后面又不一又不一样了

1514
00:43:21,000 --> 00:43:23,000
因为 OS 10 本身上是个 Unix

1515
00:43:23,000 --> 00:43:25,000
Unix 的哲学就是

1516
00:43:25,000 --> 00:43:26,000
这个文件是不是可执行文件

1517
00:43:26,000 --> 00:43:28,000
那我让它给它可执行的权限

1518
00:43:28,000 --> 00:43:30,000
它就是可执行文件楼

1519
00:43:30,000 --> 00:43:30,000
That's it

1520
00:43:31,000 --> 00:43:34,000
然后 Unix 实际上是不把元数

1521
00:43:34,000 --> 00:43:35,000
不把文件类型是什么

1522
00:43:35,000 --> 00:43:37,000
这个元数具存在任何地方的

1523
00:43:37,000 --> 00:43:40,000
就 Unix 里面上面专门有一个命令的 File

1524
00:43:40,000 --> 00:43:41,000
你用 File

1525
00:43:41,000 --> 00:43:43,000
它是一个启发式的探针

1526
00:43:43,000 --> 00:43:44,000
它就会去看这个文件

1527
00:43:44,000 --> 00:43:44,000
看起来像什么

1528
00:43:44,000 --> 00:43:45,000
就猜吗

1529
00:43:45,000 --> 00:43:45,000
That's it

1530
00:43:46,000 --> 00:43:46,000
对

1531
00:43:46,000 --> 00:43:48,000
就是怎么判断一个文件

1532
00:43:48,000 --> 00:43:48,000
像什么

1533
00:43:48,000 --> 00:43:49,000
就是它有很多方法

1534
00:43:49,000 --> 00:43:50,000
就是如果不看文件

1535
00:43:50,000 --> 00:43:51,000
明天请看下

1536
00:43:51,000 --> 00:43:53,000
就是说你看可以看文件头部

1537
00:43:53,000 --> 00:43:55,000
比如它通常一些这种文件格式

1538
00:43:55,000 --> 00:43:57,000
它在头部都会有些特殊

1539
00:43:57,000 --> 00:43:57,000
对有一个标记

1540
00:43:57,000 --> 00:43:58,000
或者一个什么结构

1541
00:43:58,000 --> 00:43:58,000
对吧

1542
00:43:58,000 --> 00:44:00,000
它会说这是一个图片

1543
00:44:00,000 --> 00:44:02,000
就是一个什么 Word 文档

1544
00:44:02,000 --> 00:44:05,000
就是一个什么 NP 3 的一个音频

1545
00:44:05,000 --> 00:44:05,000
举个例子

1546
00:44:05,000 --> 00:44:06,000
是这样

1547
00:44:06,000 --> 00:44:08,000
这叫后来还衍生

1548
00:44:08,000 --> 00:44:10,000
就因此而衍生出了一些

1549
00:44:10,000 --> 00:44:11,000
所谓 polyglot 文件

1550
00:44:11,000 --> 00:44:14,000
就是这个文件同时是很多种东西

1551
00:44:14,000 --> 00:44:15,000
比如说它同时一张照片

1552
00:44:15,000 --> 00:44:16,000
然后同时

1553
00:44:16,000 --> 00:44:18,000
然后又是一个 RLR 压缩文档

1554
00:44:19,000 --> 00:44:20,000
对

1555
00:44:20,000 --> 00:44:22,000
这种就是属于专门

1556
00:44:22,000 --> 00:44:24,000
制作出来的这种 hack

1557
00:44:26,000 --> 00:44:27,000
但其实说回来

1558
00:44:27,000 --> 00:44:30,000
就是说 Wendels 里面采取的方法

1559
00:44:30,000 --> 00:44:31,000
就是说我

1560
00:44:31,000 --> 00:44:32,000
他 Wendels 没有没有像类似

1561
00:44:32,000 --> 00:44:33,000
刚才你说的那个 file

1562
00:44:33,000 --> 00:44:33,000
这个名字

1563
00:44:33,000 --> 00:44:34,000
它其实没有对应的东西

1564
00:44:34,000 --> 00:44:35,000
对吧

1565
00:44:35,000 --> 00:44:36,000
他就说我怎么知道

1566
00:44:36,000 --> 00:44:36,000
这个文件是个什么

1567
00:44:36,000 --> 00:44:37,000
那是个什么

1568
00:44:38,000 --> 00:44:38,000
东西

1569
00:44:38,000 --> 00:44:39,000
是个什么种类

1570
00:44:39,000 --> 00:44:40,000
你告诉我了

1571
00:44:41,000 --> 00:44:42,000
有用户告诉他

1572
00:44:42,000 --> 00:44:43,000
对

1573
00:44:43,000 --> 00:44:43,000
你告诉我了

1574
00:44:43,000 --> 00:44:45,000
你在这个名字最后下个

1575
00:44:45,000 --> 00:44:46,000
你说点 JPG

1576
00:44:46,000 --> 00:44:47,000
那可能就是一个压缩的图片

1577
00:44:47,000 --> 00:44:48,000
对吧

1578
00:44:48,000 --> 00:44:49,000
要是个点 NP 3

1579
00:44:49,000 --> 00:44:51,000
那可能就是一个音频文件

1580
00:44:51,000 --> 00:44:51,000
对吧

1581
00:44:51,000 --> 00:44:52,000
你要是点个 MP 4

1582
00:44:52,000 --> 00:44:53,000
那就是个视频

1583
00:44:53,000 --> 00:44:54,000
对不对

1584
00:44:54,000 --> 00:44:55,000
然后就注如此的

1585
00:44:55,000 --> 00:44:57,000
就是所以搞了这么一套

1586
00:44:57,000 --> 00:44:58,000
这个扩展名这么一个概念

1587
00:44:58,000 --> 00:44:59,000
来描述这件事情

1588
00:44:59,000 --> 00:45:00,000
然后

1589
00:45:00,000 --> 00:45:00,000
嗯

1590
00:45:01,000 --> 00:45:01,000
到死

1591
00:45:01,000 --> 00:45:02,000
我就当时 8 点 30

1592
00:45:02,000 --> 00:45:05,000
因为他只能存 11 个字幅宽

1593
00:45:05,000 --> 00:45:05,000
对吧

1594
00:45:05,000 --> 00:45:08,000
8 个名字加一个点

1595
00:45:08,000 --> 00:45:10,000
再加 3 个字母的这个扩展名

1596
00:45:10,000 --> 00:45:12,000
就就齐活了

1597
00:45:12,000 --> 00:45:12,000
最多就这样

1598
00:45:14,000 --> 00:45:15,000
所以当时的文件名

1599
00:45:15,000 --> 00:45:17,000
最多只能是 8 个字幅

1600
00:45:17,000 --> 00:45:18,000
然后扩展名

1601
00:45:18,000 --> 00:45:20,000
最多也就只有 3 个字幅

1602
00:45:20,000 --> 00:45:21,000
就到死里面

1603
00:45:21,000 --> 00:45:22,000
他的这个

1604
00:45:22,000 --> 00:45:24,000
这个限制非常严格

1605
00:45:24,000 --> 00:45:25,000
所以就简称 8 点 3

1606
00:45:26,000 --> 00:45:28,000
其实我当时一直

1607
00:45:28,000 --> 00:45:29,000
我一直在想不起来的

1608
00:45:29,000 --> 00:45:30,000
就是说最多 3 个

1609
00:45:30,000 --> 00:45:32,000
那其实当时一个或者两个用得多吗

1610
00:45:32,000 --> 00:45:33,000
点 C

1611
00:45:34,000 --> 00:45:35,000
对

1612
00:45:35,000 --> 00:45:36,000
点 H

1613
00:45:39,000 --> 00:45:40,000
OK

1614
00:45:40,000 --> 00:45:41,000
你都不用投啊

1615
00:45:42,000 --> 00:45:43,000
明白

1616
00:45:43,000 --> 00:45:44,000
明白

1617
00:45:44,000 --> 00:45:44,000
嗯

1618
00:45:45,000 --> 00:45:46,000
那所以现在就是讲说

1619
00:45:46,000 --> 00:45:47,000
我们今天讲这个命名

1620
00:45:48,000 --> 00:45:49,000
那命名的话

1621
00:45:49,000 --> 00:45:51,000
首先是一个文件名的程度问题

1622
00:45:51,000 --> 00:45:52,000
对吧

1623
00:45:52,000 --> 00:45:54,000
所以现在刚才说的

1624
00:45:54,000 --> 00:45:54,000
像 DOS

1625
00:45:54,000 --> 00:45:57,000
他的限制的是

1626
00:45:57,000 --> 00:45:58,000
只能有 8 个字幅

1627
00:45:58,000 --> 00:45:59,000
然后后面呢

1628
00:45:59,000 --> 00:46:00,000
到 Windows 后面

1629
00:46:00,000 --> 00:46:03,000
就最多是就可以有 255 个字幅

1630
00:46:03,000 --> 00:46:05,000
那个多长也可以

1631
00:46:05,000 --> 00:46:07,000
然后扩展名的话

1632
00:46:07,000 --> 00:46:08,000
嗯

1633
00:46:08,000 --> 00:46:10,000
好像现在后面 4 个字母也可以了

1634
00:46:10,000 --> 00:46:10,000
对吧

1635
00:46:10,000 --> 00:46:12,000
反正 unix 的话是随便的

1636
00:46:12,000 --> 00:46:12,000
都无所谓的

1637
00:46:12,000 --> 00:46:15,000
那个有几个字母都无所谓

1638
00:46:15,000 --> 00:46:15,000
对吧

1639
00:46:16,000 --> 00:46:19,000
unix 实际上也没有扩展名这个概念

1640
00:46:19,000 --> 00:46:22,000
只不过后来扩展名这个

1641
00:46:23,000 --> 00:46:25,000
扩展名这一套东西

1642
00:46:25,000 --> 00:46:27,000
规格解体还是有它意的

1643
00:46:27,000 --> 00:46:27,000
还是有意义的

1644
00:46:27,000 --> 00:46:32,000
因为你人不可能去查看文件的额外的 metadata

1645
00:46:32,000 --> 00:46:36,000
人只能能能能看到的基本上就是一个文件名

1646
00:46:36,000 --> 00:46:37,000
所以文件名作为

1647
00:46:37,000 --> 00:46:39,000
扩展名作为它一套还是有还是有意义的

1648
00:46:39,000 --> 00:46:40,000
所以在后面

1649
00:46:40,000 --> 00:46:42,000
unix 和 mic 之类

1650
00:46:42,000 --> 00:46:44,000
其实也都

1651
00:46:44,000 --> 00:46:45,000
怎么说

1652
00:46:45,000 --> 00:46:47,000
从善如流随大流把

1653
00:46:47,000 --> 00:46:48,000
呃

1654
00:46:48,000 --> 00:46:50,000
扩展名当成了文件的

1655
00:46:50,000 --> 00:46:52,000
类型判断机制理部分

1656
00:46:52,000 --> 00:46:54,000
但是规格解体

1657
00:46:54,000 --> 00:46:57,000
unix 上面实际上是没有扩展名的概念的

1658
00:46:57,000 --> 00:46:58,000
就跟 mic 一样了

1659
00:46:58,000 --> 00:46:59,000
其实你们想不想

1660
00:46:59,000 --> 00:47:01,000
这可能是这个叫什么来的

1661
00:47:01,000 --> 00:47:04,000
就是图形界面的一个问题

1662
00:47:04,000 --> 00:47:05,000
还是怎么着

1663
00:47:05,000 --> 00:47:08,000
就是你在一个纯命令行的界面下面

1664
00:47:08,000 --> 00:47:09,000
cli 嘛

1665
00:47:09,000 --> 00:47:10,000
我们叫 command line interface

1666
00:47:10,000 --> 00:47:13,000
交互的方式是一定是一个

1667
00:47:13,000 --> 00:47:14,000
叫什么叫动兵结构

1668
00:47:14,000 --> 00:47:15,000
对吧

1669
00:47:15,000 --> 00:47:16,000
我就说一千条一个命令

1670
00:47:16,000 --> 00:47:17,000
然后执行什么样的一个参数

1671
00:47:17,000 --> 00:47:19,000
就是那个参数就是那个文件名嘛

1672
00:47:19,000 --> 00:47:21,000
就是这个时候你已经知道了

1673
00:47:21,000 --> 00:47:23,000
你要用什么东西去处理

1674
00:47:23,000 --> 00:47:24,000
这个后面那个那个冰语

1675
00:47:24,000 --> 00:47:25,000
对吧

1676
00:47:25,000 --> 00:47:26,000
那个那个文件

1677
00:47:26,000 --> 00:47:28,000
但其实你在这个

1678
00:47:28,000 --> 00:47:28,000
比如说 Windows 里面

1679
00:47:28,000 --> 00:47:30,000
你是要有一个这么一个感觉

1680
00:47:30,000 --> 00:47:32,000
就是比如你在那个资源管理器里面

1681
00:47:32,000 --> 00:47:34,000
你双击一个图片

1682
00:47:34,000 --> 00:47:35,000
你的想法是把它打开

1683
00:47:35,000 --> 00:47:36,000
对吧

1684
00:47:36,000 --> 00:47:37,000
这个时候你有个暗喊了

1685
00:47:37,000 --> 00:47:38,000
假设是说

1686
00:47:38,000 --> 00:47:39,000
你用什么把它打开

1687
00:47:39,000 --> 00:47:42,000
这里存在一个就是绑定的一个关系

1688
00:47:42,000 --> 00:47:42,000
对不对

1689
00:47:42,000 --> 00:47:44,000
它不是一个动兵

1690
00:47:44,000 --> 00:47:44,000
对

1691
00:47:44,000 --> 00:47:46,000
Windows 打开文件的机制

1692
00:47:46,000 --> 00:47:48,000
也是跟那个扩展名相关了嘛

1693
00:47:48,000 --> 00:47:50,000
它在注册表里面

1694
00:47:50,000 --> 00:47:53,000
把所有的快点名对应了一个打开工具

1695
00:47:53,000 --> 00:47:54,000
所以就很蠢啊

1696
00:47:54,000 --> 00:47:56,000
很死板的

1697
00:47:56,000 --> 00:47:57,000
就这里面就是一个择修问题

1698
00:47:57,000 --> 00:47:59,000
是你先想到了用什么工具

1699
00:47:59,000 --> 00:48:01,000
你先想到用什么东西打开

1700
00:48:01,000 --> 00:48:03,000
然后你再去找那个文件

1701
00:48:03,000 --> 00:48:04,000
还是说你先找到那个文件

1702
00:48:04,000 --> 00:48:05,000
然后你要

1703
00:48:05,000 --> 00:48:06,000
你要用这个

1704
00:48:06,000 --> 00:48:08,000
你要打开这个文件

1705
00:48:08,000 --> 00:48:10,000
然后再想这个这个文件是对应的是

1706
00:48:10,000 --> 00:48:11,000
一个什么工具来打开

1707
00:48:11,000 --> 00:48:15,000
就这里面我觉得有一个这个逻辑的前后的一个关系

1708
00:48:15,000 --> 00:48:15,000
对吧

1709
00:48:17,000 --> 00:48:18,000
而且像 Mac 的话

1710
00:48:18,000 --> 00:48:20,000
它没有这个扩展名是因为它其实是

1711
00:48:20,000 --> 00:48:23,000
它是那个 GUI 的图形设定

1712
00:48:23,000 --> 00:48:23,000
然后呢

1713
00:48:23,000 --> 00:48:25,000
它把这些东西啊

1714
00:48:25,000 --> 00:48:26,000
它不用写在

1715
00:48:26,000 --> 00:48:30,000
就是不用当成扩展名写在文件名里面

1716
00:48:30,000 --> 00:48:31,000
我就说就老的那个 Mac

1717
00:48:31,000 --> 00:48:32,000
他们是

1718
00:48:32,000 --> 00:48:33,000
它用那个 Folk 嘛

1719
00:48:33,000 --> 00:48:35,000
就是那个 ResourceFolk

1720
00:48:35,000 --> 00:48:36,000
资源差嘛

1721
00:48:36,000 --> 00:48:38,000
它其实是写在文件里头的

1722
00:48:38,000 --> 00:48:41,000
这个概念可能要要给大家解释一下

1723
00:48:41,000 --> 00:48:42,000
这个东西其实很

1724
00:48:42,000 --> 00:48:44,000
除非你对这个底层非常了解啊

1725
00:48:44,000 --> 00:48:47,000
你不然其实你根本不会想到这么一个结构

1726
00:48:47,000 --> 00:48:49,000
就是这个 ResourceFolk 到底是个啥

1727
00:48:49,000 --> 00:48:51,000
其实你这么想

1728
00:48:51,000 --> 00:48:54,000
你创建了一个空白的一个文本文件对吧

1729
00:48:54,000 --> 00:48:56,000
然后这个文本文件

1730
00:48:56,000 --> 00:48:58,000
在一个最普通的那个文件系统里面

1731
00:48:58,000 --> 00:48:58,000
它能记录啥

1732
00:48:58,000 --> 00:48:59,000
这个文件叫什么名字

1733
00:48:59,000 --> 00:49:00,000
对吧

1734
00:49:00,000 --> 00:49:02,000
有些远数据什么是什么时候创建的

1735
00:49:02,000 --> 00:49:03,000
有多有多大尺寸

1736
00:49:03,000 --> 00:49:05,000
然后就是文件的这个所谓的内容了嘛

1737
00:49:05,000 --> 00:49:07,000
就是假设空的话叫做一个林字节的

1738
00:49:07,000 --> 00:49:09,000
就是林长的一个内容

1739
00:49:09,000 --> 00:49:11,000
那这个时候你会有想说

1740
00:49:11,000 --> 00:49:12,000
那这个文件是什么类型

1741
00:49:12,000 --> 00:49:14,000
这个信息到底存在哪里的问题

1742
00:49:14,000 --> 00:49:14,000
对吧

1743
00:49:14,000 --> 00:49:16,000
刚才我们开始讲了

1744
00:49:16,000 --> 00:49:18,000
这个 dOS 和这个 Windows 的方案

1745
00:49:18,000 --> 00:49:20,000
是说存在这个文件的扩展名里面

1746
00:49:20,000 --> 00:49:20,000
对吧

1747
00:49:20,000 --> 00:49:21,000
就是最后那个点的

1748
00:49:21,000 --> 00:49:23,000
后面那个就是文件的扩展名

1749
00:49:23,000 --> 00:49:25,000
那这个信息就已经包含了

1750
00:49:25,000 --> 00:49:26,000
然后这个 MacOS 就是

1751
00:49:26,000 --> 00:49:29,000
不是我们现在就叫做 MacOS 10 的这么一个版本

1752
00:49:29,000 --> 00:49:32,000
而是说比如说是 MacOS 789

1753
00:49:32,000 --> 00:49:34,000
这个时候它其实在文件系统里面

1754
00:49:34,000 --> 00:49:38,000
有一个专门存储这种原信息的

1755
00:49:38,000 --> 00:49:40,000
原数据的地方

1756
00:49:40,000 --> 00:49:42,000
这个地方叫做叫做资源差 ResourceFolk

1757
00:49:42,000 --> 00:49:44,000
这个实现系列比较默计

1758
00:49:44,000 --> 00:49:46,000
就是它是在独立于这个文件本身

1759
00:49:46,000 --> 00:49:48,000
之外的一个地方去存出这个信息的

1760
00:49:48,000 --> 00:49:49,000
有了这个东西之后

1761
00:49:49,000 --> 00:49:50,000
那你能有没有这个扩展名

1762
00:49:50,000 --> 00:49:51,000
其实已经不重要了

1763
00:49:51,000 --> 00:49:51,000
对不对

1764
00:49:51,000 --> 00:49:54,000
因为这个文件类型是存在那个原数据

1765
00:49:54,000 --> 00:49:56,000
那个资源差里面的

1766
00:49:56,000 --> 00:49:57,000
它这样的对应就比较灵活

1767
00:49:57,000 --> 00:49:58,000
对

1768
00:49:58,000 --> 00:49:59,000
但这样有一个代价

1769
00:49:59,000 --> 00:50:02,000
就是它其实首先它跟别的系统的兼容性就比较差

1770
00:50:02,000 --> 00:50:04,000
比如你把一个文件从

1771
00:50:04,000 --> 00:50:05,000
但那个时候没有什么网络

1772
00:50:05,000 --> 00:50:07,000
可能这种情况倒不是特别常出现

1773
00:50:07,000 --> 00:50:09,000
但你知道现在有说你要把这个文件

1774
00:50:09,000 --> 00:50:12,000
比如说从经典版的 MacOS

1775
00:50:12,000 --> 00:50:14,000
发到一个 Windows XB 上面

1776
00:50:14,000 --> 00:50:15,000
或者 Windows 9 上面去

1777
00:50:15,000 --> 00:50:18,000
这个时候资源差是一个 MacOS 的实现细节

1778
00:50:18,000 --> 00:50:20,000
它在 Windows 上面是没有的

1779
00:50:20,000 --> 00:50:21,000
这个时候你怎么办

1780
00:50:21,000 --> 00:50:24,000
所以经常会把 Mac 的文件

1781
00:50:24,000 --> 00:50:24,000
考到 Windows

1782
00:50:24,000 --> 00:50:27,000
然后就会多出来一套东西

1783
00:50:27,000 --> 00:50:27,000
对吧

1784
00:50:27,000 --> 00:50:27,000
对吧

1785
00:50:27,000 --> 00:50:29,000
包括你现在用

1786
00:50:29,000 --> 00:50:32,000
我们可能下期节目讲 NAS 的时候

1787
00:50:32,000 --> 00:50:34,000
就是我们之前不是有去讲过 NAS 吗

1788
00:50:34,000 --> 00:50:35,000
但其实没有提到这个问题

1789
00:50:35,000 --> 00:50:37,000
比如说因为现在基本上所有 NAS 系统

1790
00:50:37,000 --> 00:50:41,000
都是以 Linux 系统或者是 Windows 系统为主的

1791
00:50:41,000 --> 00:50:46,000
你一个 Mac 的客户端去访问 NAS 的时候

1792
00:50:46,000 --> 00:50:48,000
它的资源差又变成什么了

1793
00:50:48,000 --> 00:50:48,000
对吧

1794
00:50:48,000 --> 00:50:50,000
就是变成两个文件

1795
00:50:50,000 --> 00:50:51,000
一个文件

1796
00:50:51,000 --> 00:50:52,000
不只过两个文件

1797
00:50:52,000 --> 00:50:54,000
有一个文件是描述到原数据信息的

1798
00:50:54,000 --> 00:50:56,000
然后文件在其他系统上是没有用的

1799
00:50:56,000 --> 00:50:58,000
就跟 Laz 一样的

1800
00:50:58,000 --> 00:50:59,000
只有 Mac 能用

1801
00:50:59,000 --> 00:51:03,000
所以从别的超耗系统角度来看

1802
00:51:03,000 --> 00:51:05,000
Mac 的用户

1803
00:51:05,000 --> 00:51:06,000
就是一个到处乱现 Laz 的这么一个人

1804
00:51:06,000 --> 00:51:07,000
对吧

1805
00:51:07,000 --> 00:51:09,000
所以我觉得两方互相都看对方

1806
00:51:09,000 --> 00:51:10,000
不是也吧

1807
00:51:10,000 --> 00:51:12,000
Windows 不是会留下那个什么 Sumnile

1808
00:51:12,000 --> 00:51:13,000
Mac 也会

1809
00:51:13,000 --> 00:51:15,000
有那个 DS 叫什么 DS Store

1810
00:51:15,000 --> 00:51:16,000
对

1811
00:51:16,000 --> 00:51:18,000
那个也是一个点 DS Store 开始

1812
00:51:18,000 --> 00:51:20,000
一个文件家会对我多一个出来

1813
00:51:20,000 --> 00:51:22,000
一个文件家都会有一个非常烦人的

1814
00:51:22,000 --> 00:51:24,000
像 SN 一样的很烦人

1815
00:51:24,000 --> 00:51:25,000
嗯

1816
00:51:25,000 --> 00:51:26,000
对

1817
00:51:26,000 --> 00:51:27,000
车远了

1818
00:51:27,000 --> 00:51:29,000
就是这些都是考古了

1819
00:51:29,000 --> 00:51:30,000
对吧

1820
00:51:30,000 --> 00:51:31,000
其实包括这个今年的 Mac OS

1821
00:51:31,000 --> 00:51:33,000
我相信应该我们

1822
00:51:33,000 --> 00:51:35,000
你们有谁用过今天把 Mac OS 吗

1823
00:51:35,000 --> 00:51:36,000
我是没用过

1824
00:51:36,000 --> 00:51:38,000
我只在训练器里跑过

1825
00:51:39,000 --> 00:51:40,000
OK

1826
00:51:40,000 --> 00:51:45,000
然后 Windows 95 之前的版本

1827
00:51:45,000 --> 00:51:46,000
这个我们应该都用过吧

1828
00:51:46,000 --> 00:51:47,000
我们四年都用过

1829
00:51:47,000 --> 00:51:48,000
对

1830
00:51:48,000 --> 00:51:50,000
我当年还用 WPS 排版的

1831
00:51:50,000 --> 00:51:50,000
哎呦

1832
00:51:50,000 --> 00:51:54,000
WPS 是图形版还是这个 DoS 版

1833
00:51:54,000 --> 00:51:54,000
DoS 版的

1834
00:51:54,000 --> 00:51:56,000
UcDoS 进去的

1835
00:51:56,000 --> 00:51:58,000
用智能 ABC WPS

1836
00:51:58,000 --> 00:51:59,000
然后暴露了年龄

1837
00:51:59,000 --> 00:52:01,000
我们都是用过那个时代软件的

1838
00:52:01,000 --> 00:52:04,000
而且还不是 Wizig 的

1839
00:52:04,000 --> 00:52:06,000
这是要预览预览在预览

1840
00:52:06,000 --> 00:52:07,000
等等啊

1841
00:52:07,000 --> 00:52:08,000
那个时代除了 WPS

1842
00:52:08,000 --> 00:52:12,000
还有一个 Cli 界面下的排版工具

1843
00:52:12,000 --> 00:52:14,000
CCD 1 还是叫什么

1844
00:52:14,000 --> 00:52:15,000
对

1845
00:52:15,000 --> 00:52:15,000
对

1846
00:52:15,000 --> 00:52:16,000
CCD 1

1847
00:52:16,000 --> 00:52:17,000
这个版权叫什么

1848
00:52:17,000 --> 00:52:17,000
四个字母

1849
00:52:17,000 --> 00:52:18,000
对

1850
00:52:18,000 --> 00:52:18,000
没错

1851
00:52:18,000 --> 00:52:18,000
是的

1852
00:52:18,000 --> 00:52:19,000
有的

1853
00:52:19,000 --> 00:52:19,000
对

1854
00:52:19,000 --> 00:52:21,000
但是我们有主要

1855
00:52:21,000 --> 00:52:22,000
我们用过那个

1856
00:52:22,000 --> 00:52:22,000
对

1857
00:52:22,000 --> 00:52:23,000
我知道了

1858
00:52:23,000 --> 00:52:23,000
但是没用的

1859
00:52:23,000 --> 00:52:25,000
其实你那个下来

1860
00:52:25,000 --> 00:52:26,000
那个时候还是蛮高级的

1861
00:52:26,000 --> 00:52:26,000
那个时候

1862
00:52:26,000 --> 00:52:28,000
因为不能所见几种的

1863
00:52:28,000 --> 00:52:30,000
就是纯自服界面的情况下

1864
00:52:30,000 --> 00:52:32,000
你其实是在写 MacDON 差不多这种感觉

1865
00:52:32,000 --> 00:52:32,000
对不对

1866
00:52:32,000 --> 00:52:33,000
是的

1867
00:52:33,000 --> 00:52:36,000
然后我们做个花边的脑补的

1868
00:52:36,000 --> 00:52:37,000
对

1869
00:52:37,000 --> 00:52:37,000
我查到了

1870
00:52:37,000 --> 00:52:39,000
CCD 是一款中文字表处理软件

1871
00:52:39,000 --> 00:52:41,000
问是 1988 年

1872
00:52:41,000 --> 00:52:45,000
由原北京前为天电子技术研究所开发

1873
00:52:45,000 --> 00:52:47,000
主要开发者是朱重军

1874
00:52:47,000 --> 00:52:49,000
软件在 DOS 时代曾经是中国最流行的文字处理

1875
00:52:49,000 --> 00:52:51,000
与电子表格软件之一

1876
00:52:51,000 --> 00:52:52,000
1998 年之后出现了

1877
00:52:52,000 --> 00:52:54,000
甚至出现了 GW-Winux 的版本

1878
00:52:54,000 --> 00:52:55,000
哈哈哈

1879
00:52:55,000 --> 00:52:57,000
连续多年是中国最畅销的软件之一

1880
00:52:57,000 --> 00:53:00,000
是全国计算机等级考试

1881
00:53:00,000 --> 00:53:02,000
以及国内不少计算机教育培训的指定内容

1882
00:53:02,000 --> 00:53:03,000
我就天哪

1883
00:53:03,000 --> 00:53:04,000
你们想一想

1884
00:53:04,000 --> 00:53:06,000
我用那个打印过

1885
00:53:06,000 --> 00:53:09,000
连连那个真实打印机打过东西

1886
00:53:09,000 --> 00:53:10,000
就打过文档

1887
00:53:10,000 --> 00:53:12,000
确实还用过这个东西

1888
00:53:12,000 --> 00:53:13,000
非常上股的感觉

1889
00:53:14,000 --> 00:53:15,000
后来 WPS 撇了

1890
00:53:15,000 --> 00:53:15,000
对

1891
00:53:15,000 --> 00:53:19,000
是这里面写的老对手 WPS 借助中国政府采购计划

1892
00:53:19,000 --> 00:53:20,000
恢复了生机

1893
00:53:20,000 --> 00:53:22,000
但 CCD 市场就萎缩了

1894
00:53:22,000 --> 00:53:23,000
等等

1895
00:53:23,000 --> 00:53:26,000
2010 年 2 月份 CCD 2000 版发行

1896
00:53:26,000 --> 00:53:27,000
哈哈哈

1897
00:53:27,000 --> 00:53:28,000
哦天呐

1898
00:53:28,000 --> 00:53:28,000
哦

1899
00:53:28,000 --> 00:53:29,000
我的天啊

1900
00:53:29,000 --> 00:53:30,000
我要去我要去收一套

1901
00:53:30,000 --> 00:53:31,000
简直

1902
00:53:32,000 --> 00:53:33,000
啊

1903
00:53:33,000 --> 00:53:35,000
要要要看那个还一下旧的

1904
00:53:35,000 --> 00:53:36,000
还这什么

1905
00:53:36,000 --> 00:53:36,000
哎

1906
00:53:36,000 --> 00:53:36,000
等一下

1907
00:53:36,000 --> 00:53:37,000
怎么扯到那里去了

1908
00:53:37,000 --> 00:53:39,000
说说回来说回

1909
00:53:39,000 --> 00:53:40,000
呃

1910
00:53:40,000 --> 00:53:41,000
就其实这几个

1911
00:53:41,000 --> 00:53:44,000
我们刚才提了那几个古早的超市这种线

1912
00:53:44,000 --> 00:53:46,000
其实基本上都没有了

1913
00:53:46,000 --> 00:53:48,000
我们现在目前主流用的还是这个

1914
00:53:48,000 --> 00:53:49,000
温度

1915
00:53:49,000 --> 00:53:51,000
呃的应该是温度是 10 对吧

1916
00:53:51,000 --> 00:53:54,000
或者是至少是 8 以后的吧

1917
00:53:54,000 --> 00:53:55,000
8 和 10 这种

1918
00:53:55,000 --> 00:53:57,000
和这个

1919
00:53:57,000 --> 00:53:58,000
那个是桌面现场还有人用吗

1920
00:53:58,000 --> 00:54:00,000
其实还比较少啊

1921
00:54:00,000 --> 00:54:01,000
所以这个先不算

1922
00:54:01,000 --> 00:54:03,000
然后就是这个麦克拉

1923
00:54:03,000 --> 00:54:05,000
麦克欧斯 10 应该说是准确的说是

1924
00:54:05,000 --> 00:54:05,000
嗯

1925
00:54:05,000 --> 00:54:07,000
现在叫麦克欧斯的

1926
00:54:07,000 --> 00:54:07,000
嗯

1927
00:54:07,000 --> 00:54:08,000
所以这两个系统

1928
00:54:08,000 --> 00:54:09,000
我们其实

1929
00:54:09,000 --> 00:54:10,000
他给到我们限制

1930
00:54:10,000 --> 00:54:11,000
其实就没有那么多了

1931
00:54:11,000 --> 00:54:12,000
其实你可以是

1932
00:54:12,000 --> 00:54:12,000
文

1933
00:54:12,000 --> 00:54:15,000
我记得文件名可以起到多少来的

1934
00:54:15,000 --> 00:54:16,000
长东啊

1935
00:54:16,000 --> 00:54:17,000
你说

1936
00:54:17,000 --> 00:54:17,000
对

1937
00:54:17,000 --> 00:54:18,000
长东是可以很长的了一几

1938
00:54:18,000 --> 00:54:18,000
对

1939
00:54:18,000 --> 00:54:20,000
但扩展名这个事情在各个系统上吧

1940
00:54:20,000 --> 00:54:21,000
我现在都基本上都保留下了

1941
00:54:21,000 --> 00:54:23,000
不管是在啊

1942
00:54:23,000 --> 00:54:25,000
Linux 上面还是在麦克欧斯面

1943
00:54:25,000 --> 00:54:26,000
还是在这个现场温度上面

1944
00:54:26,000 --> 00:54:30,000
就基本上扩展名这个事情都已经成为一个约定俗成的东西了

1945
00:54:30,000 --> 00:54:31,000
他只是说

1946
00:54:31,000 --> 00:54:32,000
就刚才说那个区域嘛

1947
00:54:32,000 --> 00:54:35,000
就是他默认是在图习界面下

1948
00:54:35,000 --> 00:54:37,000
他是展示还是不展示扩展名的问题

1949
00:54:37,000 --> 00:54:39,000
应该我记得温度是目前默认

1950
00:54:39,000 --> 00:54:40,000
应该是不展示的

1951
00:54:40,000 --> 00:54:43,000
麦克也是默认不展示的

1952
00:54:43,000 --> 00:54:45,000
然后 Linux 的桌面我就不知道了

1953
00:54:45,000 --> 00:54:46,000
因为太多了

1954
00:54:46,000 --> 00:54:48,000
然后也也没不常用

1955
00:54:48,000 --> 00:54:50,000
因为就这两个都是默认不展示

1956
00:54:50,000 --> 00:54:50,000
就变得很尴尬

1957
00:54:50,000 --> 00:54:51,000
对不对

1958
00:54:51,000 --> 00:54:53,000
本来这个东西是是为了说

1959
00:54:53,000 --> 00:54:54,000
刚才武汤也讲了嘛

1960
00:54:54,000 --> 00:54:57,000
说是为了让用户一眼能看出这个文件

1961
00:54:57,000 --> 00:54:58,000
是个什么类型的东西

1962
00:54:58,000 --> 00:54:59,000
对吧

1963
00:54:59,000 --> 00:55:02,000
但其实因为有了这个就是图标

1964
00:55:02,000 --> 00:55:03,000
就是那个 File Icon

1965
00:55:03,000 --> 00:55:05,000
就是文件类型的图标和

1966
00:55:05,000 --> 00:55:07,000
他因为如果你按那个叫什么

1967
00:55:07,000 --> 00:55:08,000
多列排布的

1968
00:55:08,000 --> 00:55:10,000
不叫多列就是按列排布

1969
00:55:10,000 --> 00:55:10,000
按列

1970
00:55:10,000 --> 00:55:11,000
不叫按列排布

1971
00:55:11,000 --> 00:55:12,000
他有可能多个

1972
00:55:12,000 --> 00:55:14,000
他是应该是表格式的

1973
00:55:14,000 --> 00:55:15,000
他有一栏

1974
00:55:15,000 --> 00:55:16,000
他本来就会显示文件是什么类型

1975
00:55:17,000 --> 00:55:20,000
所以就有了这两个

1976
00:55:20,000 --> 00:55:21,000
大概一个是文件图标

1977
00:55:21,000 --> 00:55:22,000
一个是文件类型

1978
00:55:22,000 --> 00:55:24,000
单独有一列显示的情况下

1979
00:55:24,000 --> 00:55:26,000
文件名的扩展名

1980
00:55:26,000 --> 00:55:27,000
其实又变得不重要了

1981
00:55:27,000 --> 00:55:27,000
对不对

1982
00:55:27,000 --> 00:55:29,000
那其实当初就不要搞扩展名

1983
00:55:29,000 --> 00:55:30,000
对

1984
00:55:30,000 --> 00:55:33,000
就好像 Windows 后来就默认隐藏扩展名

1985
00:55:33,000 --> 00:55:34,000
对吧

1986
00:55:34,000 --> 00:55:34,000
刚装好

1987
00:55:34,000 --> 00:55:35,000
对

1988
00:55:35,000 --> 00:55:36,000
默认是会隐藏扩展名

1989
00:55:36,000 --> 00:55:38,000
Xp 开始就以默认隐藏了吧

1990
00:55:38,000 --> 00:55:38,000
应该是

1991
00:55:38,000 --> 00:55:39,000
还是

1992
00:55:39,000 --> 00:55:39,000
之后还是 Windows

1993
00:55:39,000 --> 00:55:40,000
98 还是吧

1994
00:55:40,000 --> 00:55:43,000
我就觉得扩展名是一个很蠢的一个办法

1995
00:55:43,000 --> 00:55:45,000
而且他特别死板吧

1996
00:55:45,000 --> 00:55:45,000
就刚才说

1997
00:55:45,000 --> 00:55:48,000
他和应用程序只能一度一

1998
00:55:48,000 --> 00:55:52,000
像 Mac 系统他是不用这个的

1999
00:55:52,000 --> 00:55:54,000
他甚至因为他通过图标来体现

2000
00:55:54,000 --> 00:55:56,000
甚至他那个图标

2001
00:55:56,000 --> 00:55:57,000
他那个资源 Folk 的话

2002
00:55:57,000 --> 00:56:00,000
他因为有更详细的定义

2003
00:56:00,000 --> 00:56:00,000
他还可以

2004
00:56:00,000 --> 00:56:02,000
同样比如说是

2005
00:56:02,000 --> 00:56:04,000
elastrator 的 AI 的文件

2006
00:56:04,000 --> 00:56:08,000
他那个图标可以体现出 AI 的版本的不同

2007
00:56:08,000 --> 00:56:11,000
就是他可以体现在图标上面

2008
00:56:11,000 --> 00:56:12,000
就同样都是点 AI

2009
00:56:12,000 --> 00:56:14,000
但是有的是显示的 AI

2010
00:56:14,000 --> 00:56:16,000
比如说 151 个显示 AI 8 这种

2011
00:56:16,000 --> 00:56:17,000
对 没错

2012
00:56:17,000 --> 00:56:19,000
因为他 Folk 可以

2013
00:56:19,000 --> 00:56:19,000
他可以分岔

2014
00:56:19,000 --> 00:56:22,000
可以加好多内容进去的

2015
00:56:22,000 --> 00:56:23,000
然后这个东西

2016
00:56:23,000 --> 00:56:25,000
只要体现在图标上就是一样

2017
00:56:25,000 --> 00:56:27,000
然后最后给用户的信息是一样的

2018
00:56:27,000 --> 00:56:28,000
对于用户来讲

2019
00:56:28,000 --> 00:56:32,000
这的确就是一个 AI 的版本的一个文件

2020
00:56:32,000 --> 00:56:33,000
他达到这个效果

2021
00:56:33,000 --> 00:56:34,000
并不一定要用

2022
00:56:34,000 --> 00:56:35,000
比如说三个字母

2023
00:56:35,000 --> 00:56:38,000
还得让用户去得记三个字母

2024
00:56:38,000 --> 00:56:39,000
是还对应什么东西

2025
00:56:39,000 --> 00:56:41,000
所以他其实如果这么来看

2026
00:56:41,000 --> 00:56:44,000
他文件扩展名这个事情

2027
00:56:44,000 --> 00:56:45,000
他其实是自服界面

2028
00:56:45,000 --> 00:56:47,000
向图标界面过渡

2029
00:56:47,000 --> 00:56:48,000
这个时期的一个互产物

2030
00:56:48,000 --> 00:56:49,000
对吧

2031
00:56:49,000 --> 00:56:51,000
因为在自服界面下面

2032
00:56:51,000 --> 00:56:53,000
你是没有图标来告诉你

2033
00:56:53,000 --> 00:56:55,000
和文件是什么类型

2034
00:56:55,000 --> 00:56:58,000
也没有多列的这种复数信息

2035
00:56:58,000 --> 00:57:00,000
它展示因为自服界面一般的比较窄

2036
00:57:00,000 --> 00:57:02,000
就蓝比较窄

2037
00:57:02,000 --> 00:57:04,000
所以这种情况下

2038
00:57:04,000 --> 00:57:05,000
在过渡时期

2039
00:57:05,000 --> 00:57:08,000
把文件扩展名这个概念给保留下来

2040
00:57:08,000 --> 00:57:09,000
但其实到现在发现

2041
00:57:09,000 --> 00:57:11,000
其实已经完全没有作用了

2042
00:57:11,000 --> 00:57:11,000
对不对

2043
00:57:11,000 --> 00:57:12,000
就感觉是反效果

2044
00:57:12,000 --> 00:57:14,000
Mac 他之所以要用扩展名

2045
00:57:14,000 --> 00:57:17,000
就是完全屈服于网络时代信息

2046
00:57:17,000 --> 00:57:19,000
文件交换的时候

2047
00:57:19,000 --> 00:57:23,000
必须要屈服于 Windows 这个蠢的

2048
00:57:23,000 --> 00:57:25,000
比更强势一些

2049
00:57:25,000 --> 00:57:26,000
有的人更多

2050
00:57:26,000 --> 00:57:27,000
对

2051
00:57:27,000 --> 00:57:29,000
所以就是一个典型的

2052
00:57:29,000 --> 00:57:31,000
就是像低看似的一个典型的案例

2053
00:57:31,000 --> 00:57:33,000
我们很多东西

2054
00:57:33,000 --> 00:57:35,000
就是好的技术并没有得到发现

2055
00:57:35,000 --> 00:57:37,000
大家都是用一个很蠢的技术

2056
00:57:37,000 --> 00:57:38,000
然后再流行起来的

2057
00:57:38,000 --> 00:57:38,000
对

2058
00:57:38,000 --> 00:57:40,000
刚才还说到就是说

2059
00:57:40,000 --> 00:57:42,000
因为现在图型界面都是默认隐藏

2060
00:57:42,000 --> 00:57:43,000
隐藏文件扩展名的

2061
00:57:43,000 --> 00:57:46,000
它其实有一个比较重要的点

2062
00:57:46,000 --> 00:57:47,000
就是说

2063
00:57:47,000 --> 00:57:50,000
比如你在 Windows 里面好

2064
00:57:50,000 --> 00:57:51,000
还是 Mac 里面好

2065
00:57:51,000 --> 00:57:51,000
默认情况下

2066
00:57:51,000 --> 00:57:53,000
你要改一个文件的名字

2067
00:57:53,000 --> 00:57:53,000
你怎么改

2068
00:57:53,000 --> 00:57:55,000
你选择那个文件

2069
00:57:55,000 --> 00:57:56,000
要不你右键点击改名

2070
00:57:56,000 --> 00:57:58,000
或者是你就像我们这种键盘比较

2071
00:57:58,000 --> 00:57:59,000
数 6 的人

2072
00:57:59,000 --> 00:58:01,000
你就直接按回车

2073
00:58:01,000 --> 00:58:02,000
它就改名了

2074
00:58:02,000 --> 00:58:02,000
对不对

2075
00:58:02,000 --> 00:58:04,000
然后这个时候

2076
00:58:04,000 --> 00:58:07,000
因为它不显示文件的扩展名

2077
00:58:07,000 --> 00:58:09,000
你们默认改所谓的文件名

2078
00:58:09,000 --> 00:58:11,000
就是下意的文件名

2079
00:58:11,000 --> 00:58:13,000
就是不含扩展那部分的前綴那部分

2080
00:58:13,000 --> 00:58:14,000
但其实如果说

2081
00:58:14,000 --> 00:58:16,000
你像我们都喜欢

2082
00:58:16,000 --> 00:58:17,000
我至少是这样的

2083
00:58:17,000 --> 00:58:18,000
我不知道你们的默认说是怎么

2084
00:58:18,000 --> 00:58:21,000
我一定会把文件扩展名展示出来

2085
00:58:21,000 --> 00:58:22,000
不知道为什么保留习惯

2086
00:58:22,000 --> 00:58:23,000
但是就是看起来

2087
00:58:23,000 --> 00:58:26,000
因为我可能有可能是因为我要

2088
00:58:26,000 --> 00:58:31,000
经常在自负界面和图形界面切换

2089
00:58:31,000 --> 00:58:35,000
所以还是有需求看到文件扩展名是什么的

2090
00:58:35,000 --> 00:58:36,000
这种情况下

2091
00:58:36,000 --> 00:58:38,000
你如果要改名

2092
00:58:38,000 --> 00:58:40,000
它其实也有很多小技巧的

2093
00:58:40,000 --> 00:58:41,000
比如说我现在试一下

2094
00:58:41,000 --> 00:58:41,000
给你们看

2095
00:58:42,000 --> 00:58:43,000
我记得应该是这样子

2096
00:58:43,000 --> 00:58:44,000
比如说我现在在我打开一个 Mac

2097
00:58:44,000 --> 00:58:46,000
我要改一个文件名

2098
00:58:46,000 --> 00:58:46,000
然后这个时候

2099
00:58:46,000 --> 00:58:48,000
我是显示的一个

2100
00:58:48,000 --> 00:58:50,000
是显示代扩展名的文件名

2101
00:58:50,000 --> 00:58:52,000
我要点按回车

2102
00:58:52,000 --> 00:58:56,000
它默认会把文件名的部分给我选中

2103
00:58:56,000 --> 00:58:58,000
但是扩展名是保的是点

2104
00:58:58,000 --> 00:59:01,000
扩展名和点的部分是不动的

2105
00:59:01,000 --> 00:59:01,000
什么意思

2106
00:59:01,000 --> 00:59:05,000
就是说它不想让用户错误的

2107
00:59:05,000 --> 00:59:06,000
更改掉这些扩展名

2108
00:59:06,000 --> 00:59:07,000
把文件类型修改

2109
00:59:07,000 --> 00:59:08,000
对

2110
00:59:08,000 --> 00:59:09,000
对

2111
00:59:09,000 --> 00:59:09,000
因为其实虽然说

2112
00:59:09,000 --> 00:59:10,000
我们刚才讲

2113
00:59:10,000 --> 00:59:12,000
虽然说文件类型不重要

2114
00:59:12,000 --> 00:59:15,000
但是如果说你用户明确的说

2115
00:59:15,000 --> 00:59:17,000
我要把文件改成类型

2116
00:59:17,000 --> 00:59:18,000
比如说很简单一个道理

2117
00:59:18,000 --> 00:59:19,000
你现在去网站上

2118
00:59:19,000 --> 00:59:20,000
下载一张图片回来

2119
00:59:20,000 --> 00:59:21,000
还有可能下载

2120
00:59:21,000 --> 00:59:24,000
因为现在很多网站的图片

2121
00:59:24,000 --> 00:59:25,000
它本来就没有想给你下载

2122
00:59:25,000 --> 00:59:25,000
对吧

2123
00:59:25,000 --> 00:59:27,000
它的文件秘密也不是按照

2124
00:59:28,000 --> 00:59:29,000
有扩展名的方式来弄

2125
00:59:29,000 --> 00:59:31,000
你就下载一个普通空白的文件

2126
00:59:31,000 --> 00:59:32,000
对吧

2127
00:59:32,000 --> 00:59:32,000
但这个时候

2128
00:59:32,000 --> 00:59:34,000
因为那个是一个外部系统

2129
00:59:34,000 --> 00:59:35,000
来的一个文件

2130
00:59:36,000 --> 00:59:37,000
我的母系统

2131
00:59:37,000 --> 00:59:38,000
又不知道这个文件是什么东西

2132
00:59:38,000 --> 00:59:40,000
它就会显示一个叫做什么

2133
00:59:40,000 --> 00:59:42,000
一个 generic file

2134
00:59:42,000 --> 00:59:44,000
一个通用的文件放在那里

2135
00:59:44,000 --> 00:59:45,000
不知道它是个啥

2136
00:59:45,000 --> 00:59:46,000
不知道这个图片

2137
00:59:46,000 --> 00:59:47,000
也不知道这个视频

2138
00:59:47,000 --> 00:59:48,000
也不知道是个音乐

2139
00:59:48,000 --> 00:59:48,000
是什么东西

2140
00:59:48,000 --> 00:59:49,000
对不对

2141
00:59:49,000 --> 00:59:51,000
这个时候我就说我要强行给它

2142
00:59:51,000 --> 00:59:52,000
加一个扩展名

2143
00:59:52,000 --> 00:59:53,000
告诉我这个系统说

2144
00:59:53,000 --> 00:59:55,000
你把它当做一个图片

2145
00:59:55,000 --> 00:59:58,000
或者你把它当做一个音频

2146
00:59:58,000 --> 00:59:59,000
对吧

2147
00:59:59,000 --> 01:00:00,000
然后你在做对应的事情

2148
01:00:00,000 --> 01:00:01,000
这个时候我就不知道

2149
01:00:01,000 --> 01:00:04,000
这个什么时候能启动类似于

2150
01:00:04,000 --> 01:00:06,000
这个 file 机制去探测文件

2151
01:00:06,000 --> 01:00:07,000
是个什么样的类型

2152
01:00:07,000 --> 01:00:08,000
对吧

2153
01:00:08,000 --> 01:00:09,000
这里面其实还是有很多讲究的

2154
01:00:09,000 --> 01:00:13,000
所以从 dose windows 转过去

2155
01:00:13,000 --> 01:00:13,000
在用 mac 的时候

2156
01:00:13,000 --> 01:00:14,000
在 mac 当年

2157
01:00:14,000 --> 01:00:16,000
就因为它无所谓扩展名

2158
01:00:16,000 --> 01:00:17,000
扩展名可以随便改

2159
01:00:18,000 --> 01:00:20,000
然后这个对于我们

2160
01:00:20,000 --> 01:00:21,000
从 dose 转过去

2161
01:00:21,000 --> 01:00:22,000
就觉得这个都能改

2162
01:00:22,000 --> 01:00:23,000
太可怕了

2163
01:00:23,000 --> 01:00:24,000
你说这个我想到一个问题

2164
01:00:24,000 --> 01:00:27,000
就是 mac 上面有时候会出现

2165
01:00:27,000 --> 01:00:30,000
比如说一个文件

2166
01:00:30,000 --> 01:00:30,000
它没有扩展名

2167
01:00:30,000 --> 01:00:33,000
然后 mac 会自动去试图

2168
01:00:33,000 --> 01:00:34,000
去猜这个文件是什么

2169
01:00:34,000 --> 01:00:36,000
尤其是在你按下动革的时候

2170
01:00:36,000 --> 01:00:39,000
然后这就导致了很多人在

2171
01:00:40,000 --> 01:00:43,000
尤其是对电脑手动不是那么在行的人

2172
01:00:43,000 --> 01:00:45,000
会经常

2173
01:00:46,000 --> 01:00:47,000
我觉得我遇到这个问题

2174
01:00:47,000 --> 01:00:48,000
就是会有人给你很多

2175
01:00:48,000 --> 01:00:49,000
没有扩展名的文件

2176
01:00:50,000 --> 01:00:52,000
在它的电脑上显示一切正常

2177
01:00:52,000 --> 01:00:53,000
但到你这就不行

2178
01:00:53,000 --> 01:00:53,000
因为没有扩展名

2179
01:00:53,000 --> 01:00:54,000
对

2180
01:00:54,000 --> 01:00:55,000
这个时候其实发现

2181
01:00:55,000 --> 01:00:58,000
如果一旦涉及到文件的交换

2182
01:00:59,000 --> 01:01:00,000
有个扩展名

2183
01:01:00,000 --> 01:01:04,000
明确的规定文件是什么样的类型

2184
01:01:04,000 --> 01:01:05,000
然后至少缩小一个范围

2185
01:01:05,000 --> 01:01:07,000
然后我们再去处理

2186
01:01:07,000 --> 01:01:08,000
还是会容易很多的

2187
01:01:08,000 --> 01:01:09,000
对

2188
01:01:09,000 --> 01:01:10,000
有很多事情你会觉得说

2189
01:01:10,000 --> 01:01:11,000
这样是方便用户

2190
01:01:11,000 --> 01:01:14,000
但是实际上会苦的开发者

2191
01:01:16,000 --> 01:01:17,000
这是一个两面的

2192
01:01:17,000 --> 01:01:18,000
所有的转接设计

2193
01:01:18,000 --> 01:01:19,000
不是这么干的吗

2194
01:01:19,000 --> 01:01:20,000
都是这样的方便用户

2195
01:01:22,000 --> 01:01:23,000
要关着用户的

2196
01:01:24,000 --> 01:01:25,000
是这样

2197
01:01:27,000 --> 01:01:27,000
好吧

2198
01:01:27,000 --> 01:01:29,000
我们文件名的长度差不多这样

2199
01:01:29,000 --> 01:01:31,000
我觉得扩展名的坑太深了

2200
01:01:31,000 --> 01:01:33,000
这个就没一次讲过

2201
01:01:33,000 --> 01:01:34,000
我们本来今天重点不是讲这个的

2202
01:01:36,000 --> 01:01:37,000
这不长了这么久这个坑

2203
01:01:38,000 --> 01:01:38,000
对

2204
01:01:39,000 --> 01:01:41,000
下面我们来谈更大一个坑

2205
01:01:41,000 --> 01:01:46,000
就是文件名命名是否允许包含空格的问题

2206
01:01:46,000 --> 01:01:48,000
这个事情就特别扯了

2207
01:01:48,000 --> 01:01:50,000
因为大家也知道我们所有的这些系统的话

2208
01:01:50,000 --> 01:01:53,000
都是从西方语言过来的

2209
01:01:54,000 --> 01:01:55,000
像西文的话

2210
01:01:55,000 --> 01:01:56,000
他们都是按词分写的

2211
01:01:56,000 --> 01:01:58,000
词和词之中都是有空格的

2212
01:02:00,000 --> 01:02:03,000
我记得 DOS 的文件名是不允许有空格的

2213
01:02:04,000 --> 01:02:05,000
应该是不允许

2214
01:02:07,000 --> 01:02:08,000
我一点不太记不清楚

2215
01:02:08,000 --> 01:02:09,000
有可能是不选择

2216
01:02:09,000 --> 01:02:12,000
我学电脑开始就是从 DOS 进来的

2217
01:02:12,000 --> 01:02:14,000
所以哪怕直到现在

2218
01:02:14,000 --> 01:02:15,000
我自己起文件名

2219
01:02:15,000 --> 01:02:18,000
还是不习惯选用空格

2220
01:02:18,000 --> 01:02:20,000
我会用什么

2221
01:02:21,000 --> 01:02:22,000
用 HIFEN 用联资符

2222
01:02:22,000 --> 01:02:24,000
或者下画线来写

2223
01:02:24,000 --> 01:02:25,000
OK

2224
01:02:25,000 --> 01:02:26,000
我上次看一个视频

2225
01:02:26,000 --> 01:02:27,000
就是一个

2226
01:02:28,000 --> 01:02:28,000
他叫什么

2227
01:02:28,000 --> 01:02:29,000
他叫 Bobby

2228
01:02:29,000 --> 01:02:30,000
EatBitGuy

2229
01:02:30,000 --> 01:02:34,000
就是他在视频里面教你装一个

2230
01:02:35,000 --> 01:02:37,000
MacOS Classic 的操作系统

2231
01:02:38,000 --> 01:02:42,000
然后他很自然而然的把主硬盘命名为了

2232
01:02:42,000 --> 01:02:43,000
命名为

2233
01:02:44,000 --> 01:02:46,000
iMac 空格 HD

2234
01:02:46,000 --> 01:02:48,000
然后我就感叹说

2235
01:02:48,000 --> 01:02:50,000
果然是祖传 Mac 用户

2236
01:02:50,000 --> 01:02:52,000
从来不会在意文件名里面

2237
01:02:52,000 --> 01:02:54,000
能不能有空格这种问题

2238
01:02:56,000 --> 01:02:58,000
你要是这种古早的 Windows 用户

2239
01:02:58,000 --> 01:02:59,000
你绝对不可能做出这种事的

2240
01:02:59,000 --> 01:03:03,000
就是把一个文件命名为一个带空格的名字

2241
01:03:04,000 --> 01:03:06,000
因为有空格会有什么问题

2242
01:03:06,000 --> 01:03:09,000
就是在早年的命名行

2243
01:03:09,000 --> 01:03:11,000
就是自福界面的时候

2244
01:03:12,000 --> 01:03:13,000
比如说我要处理

2245
01:03:13,000 --> 01:03:15,000
比如说我们想象一个从场景

2246
01:03:15,000 --> 01:03:16,000
就是复制

2247
01:03:16,000 --> 01:03:19,000
我要把假设我有一个文件叫做 A.txt

2248
01:03:19,000 --> 01:03:21,000
我要把它复制为 B.txt

2249
01:03:21,000 --> 01:03:22,000
我直接就叫什么

2250
01:03:22,000 --> 01:03:23,000
就是 Cp 就 copy

2251
01:03:23,000 --> 01:03:25,000
然后 A.txt

2252
01:03:25,000 --> 01:03:27,000
然后到目标是 B.txt

2253
01:03:27,000 --> 01:03:28,000
就是完成了

2254
01:03:28,000 --> 01:03:28,000
对不对

2255
01:03:28,000 --> 01:03:30,000
但你发现这三个部分

2256
01:03:30,000 --> 01:03:31,000
一个主语

2257
01:03:31,000 --> 01:03:31,000
两个并语

2258
01:03:31,000 --> 01:03:32,000
对吧

2259
01:03:32,000 --> 01:03:34,000
这个动词

2260
01:03:34,000 --> 01:03:35,000
一个动词

2261
01:03:35,000 --> 01:03:35,000
对

2262
01:03:35,000 --> 01:03:36,000
然后两个 object

2263
01:03:36,000 --> 01:03:37,000
两个目标的时候

2264
01:03:37,000 --> 01:03:39,000
你发现他用什么分隔

2265
01:03:39,000 --> 01:03:39,000
用空格分隔

2266
01:03:39,000 --> 01:03:40,000
对不对

2267
01:03:40,000 --> 01:03:41,000
这个时候你说 A

2268
01:03:41,000 --> 01:03:42,000
那我的文件是刚好是 A

2269
01:03:42,000 --> 01:03:43,000
空格 B

2270
01:03:43,000 --> 01:03:44,000
这个时候怎么办

2271
01:03:44,000 --> 01:03:46,000
这个很尴尬对不对

2272
01:03:46,000 --> 01:03:48,000
但其实也是有解决方案的

2273
01:03:48,000 --> 01:03:52,000
就是说你把带空格的文件名

2274
01:03:52,000 --> 01:03:54,000
用引号引起来不就好了吗

2275
01:03:54,000 --> 01:03:54,000
对吧

2276
01:03:54,000 --> 01:03:56,000
那其实你可以就是 copy 空格

2277
01:03:56,000 --> 01:03:57,000
然后引号开

2278
01:03:57,000 --> 01:03:58,000
引号

2279
01:03:58,000 --> 01:04:00,000
然后 A 空格 B.txt

2280
01:04:00,000 --> 01:04:01,000
然后引号

2281
01:04:01,000 --> 01:04:02,000
然后就下一个目标

2282
01:04:02,000 --> 01:04:03,000
比如是 C.txt

2283
01:04:03,000 --> 01:04:04,000
其实也是可以的

2284
01:04:04,000 --> 01:04:05,000
对不对

2285
01:04:05,000 --> 01:04:08,000
但只是说就增加了一个麻烦

2286
01:04:08,000 --> 01:04:10,000
但其实我觉得这个还不是最坑爹的

2287
01:04:10,000 --> 01:04:11,000
所以我个人觉得

2288
01:04:11,000 --> 01:04:13,000
就是说你可以允许空格

2289
01:04:13,000 --> 01:04:16,000
但是最好是不鼓励使用空格

2290
01:04:16,000 --> 01:04:18,000
虽然说像 Mac 的目前的 Mac

2291
01:04:18,000 --> 01:04:19,000
效率怎么样

2292
01:04:19,000 --> 01:04:21,000
大量的使用了空格的

2293
01:04:21,000 --> 01:04:22,000
这么一个声音

2294
01:04:22,000 --> 01:04:24,000
因为一旦涉及到空格

2295
01:04:24,000 --> 01:04:26,000
你那个文件名就必须要用引号

2296
01:04:26,000 --> 01:04:27,000
引号的话就有时候会导致

2297
01:04:27,000 --> 01:04:29,000
比如说自动不起的一些问题

2298
01:04:29,000 --> 01:04:30,000
还有包括有一些这种

2299
01:04:30,000 --> 01:04:32,000
有些这个捐用性的问题

2300
01:04:32,000 --> 01:04:34,000
比如说我们正常用 XARX

2301
01:04:34,000 --> 01:04:35,000
就是有一个命令

2302
01:04:35,000 --> 01:04:36,000
它可以说

2303
01:04:36,000 --> 01:04:39,000
你把前面的成绩的输入

2304
01:04:39,000 --> 01:04:41,000
全部作为命令的参数来执行

2305
01:04:41,000 --> 01:04:43,000
这么一个辅助的命令

2306
01:04:43,000 --> 01:04:44,000
它是怎么判断前面

2307
01:04:44,000 --> 01:04:45,000
你输入了哪些参数给它

2308
01:04:45,000 --> 01:04:47,000
它就说有个空格分隔

2309
01:04:47,000 --> 01:04:48,000
它那些都是各种各样的参数

2310
01:04:48,000 --> 01:04:48,000
对吧

2311
01:04:48,000 --> 01:04:50,000
说你的文件名号又是个空格

2312
01:04:50,000 --> 01:04:51,000
你怎么办呢

2313
01:04:51,000 --> 01:04:54,000
就你说那我就改一个来分隔

2314
01:04:54,000 --> 01:04:55,000
符来分隔参数

2315
01:04:55,000 --> 01:04:56,000
就不要用空格分隔参数了

2316
01:04:56,000 --> 01:04:59,000
那有一个是比如说是 0

2317
01:04:59,000 --> 01:05:01,000
就 Ascii 马适 0 的那个字符

2318
01:05:01,000 --> 01:05:04,000
那个 No 那个字符来分隔前面的参数

2319
01:05:04,000 --> 01:05:06,000
也可以对不对

2320
01:05:06,000 --> 01:05:08,000
但是就是这个东西就很就很不自然了

2321
01:05:08,000 --> 01:05:12,000
但我觉得就是就用空格的最麻烦的问题

2322
01:05:12,000 --> 01:05:14,000
到前面那个都是说只是麻烦

2323
01:05:14,000 --> 01:05:18,000
还不是说不至于说完全不能用

2324
01:05:18,000 --> 01:05:20,000
用空格作为在文件名里面

2325
01:05:20,000 --> 01:05:24,000
最坑爹的事情是你到底连续用了几个空格

2326
01:05:24,000 --> 01:05:26,000
好

2327
01:05:26,000 --> 01:05:29,000
就是 A 空格 B.txt

2328
01:05:29,000 --> 01:05:29,000
所以这是一个文件

2329
01:05:29,000 --> 01:05:32,000
A 空格空格 B.txt

2330
01:05:32,000 --> 01:05:33,000
这是另外一个文件

2331
01:05:33,000 --> 01:05:33,000
对不对

2332
01:05:33,000 --> 01:05:36,000
这是在一个非等宽的字体的显示

2333
01:05:36,000 --> 01:05:38,000
环境日差非常严重的问题

2334
01:05:38,000 --> 01:05:39,000
对啊

2335
01:05:39,000 --> 01:05:39,000
就你我不知道

2336
01:05:39,000 --> 01:05:41,000
就是说在分等宽的情况下

2337
01:05:41,000 --> 01:05:43,000
那个 A 和 B 它可能不是一个宽度

2338
01:05:43,000 --> 01:05:44,000
A 和 B 可能还看不出来

2339
01:05:44,000 --> 01:05:45,000
比如说 A 和小写字母的

2340
01:05:45,000 --> 01:05:46,000
这个 A

2341
01:05:46,000 --> 01:05:47,000
就是在分等宽的情况

2342
01:05:47,000 --> 01:05:48,000
它肯定是不一样宽的

2343
01:05:48,000 --> 01:05:49,000
这个时候

2344
01:05:49,000 --> 01:05:52,000
你说现在中间到底间隔了几个几个空格

2345
01:05:52,000 --> 01:05:53,000
你去数吗难道

2346
01:05:53,000 --> 01:05:54,000
或者说如果说

2347
01:05:54,000 --> 01:05:56,000
你说一两个的区别可能还比较明显

2348
01:05:56,000 --> 01:05:57,000
对吧

2349
01:05:57,000 --> 01:05:58,000
五个和六个的区别

2350
01:05:58,000 --> 01:05:59,000
你能看得出来

2351
01:05:59,000 --> 01:06:02,000
但这个其实你用下滑线或者用 hyphen

2352
01:06:02,000 --> 01:06:04,000
其实面临的问题是一样的

2353
01:06:04,000 --> 01:06:06,000
我觉得关键的问题还是在于

2354
01:06:06,000 --> 01:06:09,000
空格它作为一个特殊的字符

2355
01:06:09,000 --> 01:06:11,000
它其实是有别的作用

2356
01:06:11,000 --> 01:06:12,000
喊意的

2357
01:06:12,000 --> 01:06:13,000
它作为分隔符用的

2358
01:06:13,000 --> 01:06:13,000
对

2359
01:06:13,000 --> 01:06:15,000
一旦你要把它容纳到文件名里

2360
01:06:15,000 --> 01:06:18,000
你可能要引入别的机制来保护它

2361
01:06:18,000 --> 01:06:19,000
比如你要加引号

2362
01:06:19,000 --> 01:06:20,000
就 Escape 嘛

2363
01:06:20,000 --> 01:06:21,000
转移嘛

2364
01:06:21,000 --> 01:06:22,000
那这样子的话

2365
01:06:22,000 --> 01:06:25,000
就是文件名还能不能用引号呢

2366
01:06:25,000 --> 01:06:26,000
对

2367
01:06:26,000 --> 01:06:28,000
所以就是你必须要引入别的机制

2368
01:06:28,000 --> 01:06:28,000
对

2369
01:06:28,000 --> 01:06:31,000
Escape 机制在文字上面是非常非常淡腾的

2370
01:06:31,000 --> 01:06:35,000
就是 Winux 自从支持文件名没有空格之后

2371
01:06:35,000 --> 01:06:38,000
Winux 最知名的一个带空格的文件名

2372
01:06:38,000 --> 01:06:39,000
大家想想是什么

2373
01:06:39,000 --> 01:06:41,000
Program 空格 Files

2374
01:06:41,000 --> 01:06:41,000
真的

2375
01:06:41,000 --> 01:06:42,000
FarmMe

2376
01:06:42,000 --> 01:06:43,000
真的

2377
01:06:43,000 --> 01:06:44,000
每次要进入路径

2378
01:06:44,000 --> 01:06:46,000
真的是

2379
01:06:46,000 --> 01:06:47,000
它这么说吧

2380
01:06:47,000 --> 01:06:49,000
Unix 能有空格

2381
01:06:49,000 --> 01:06:51,000
但是 Unix 支持用 Backslash 作 Escape

2382
01:06:51,000 --> 01:06:52,000
对吧

2383
01:06:52,000 --> 01:06:53,000
你打文件

2384
01:06:53,000 --> 01:06:54,000
打文件名打了一半

2385
01:06:54,000 --> 01:06:55,000
你发现有个空格

2386
01:06:55,000 --> 01:06:57,000
那你 Backslash 空格就好了

2387
01:06:57,000 --> 01:06:58,000
Winux 呢

2388
01:06:58,000 --> 01:07:01,000
你要回到一开始的参数的

2389
01:07:01,000 --> 01:07:02,000
最开始

2390
01:07:02,000 --> 01:07:03,000
最前面

2391
01:07:03,000 --> 01:07:05,000
加一个双引号

2392
01:07:05,000 --> 01:07:08,000
而 Winux 的这个 Tab AutoCompletion

2393
01:07:08,000 --> 01:07:11,000
它虽然会帮你加上双引号

2394
01:07:11,000 --> 01:07:12,000
但是它非常的蠢

2395
01:07:12,000 --> 01:07:13,000
就是你在用的时候

2396
01:07:13,000 --> 01:07:14,000
你会觉得

2397
01:07:14,000 --> 01:07:15,000
啊

2398
01:07:15,000 --> 01:07:16,000
蠢死了

2399
01:07:16,000 --> 01:07:18,000
而且 Winux 它也没有像

2400
01:07:18,000 --> 01:07:21,000
就是 Line Editor

2401
01:07:21,000 --> 01:07:22,000
就是那个迷你行

2402
01:07:22,000 --> 01:07:23,000
内行的编辑器的时候

2403
01:07:23,000 --> 01:07:24,000
它是

2404
01:07:24,000 --> 01:07:25,000
我记得我

2405
01:07:25,000 --> 01:07:26,000
它有那功能吗

2406
01:07:26,000 --> 01:07:28,000
就是跳一个 Word

2407
01:07:28,000 --> 01:07:29,000
一个 Word 跳

2408
01:07:29,000 --> 01:07:29,000
奥特加 F 是吧

2409
01:07:29,000 --> 01:07:30,000
没有

2410
01:07:30,000 --> 01:07:31,000
奥特加 F

2411
01:07:31,000 --> 01:07:32,000
没有

2412
01:07:32,000 --> 01:07:33,000
W 全都没有

2413
01:07:33,000 --> 01:07:34,000
就比如说你想写了个剧场的

2414
01:07:34,000 --> 01:07:36,000
什么 CMAR 号

2415
01:07:36,000 --> 01:07:37,000
协杠协杠

2416
01:07:37,000 --> 01:07:38,000
Program

2417
01:07:38,000 --> 01:07:39,000
这个

2418
01:07:39,000 --> 01:07:39,000
这时候你放

2419
01:07:39,000 --> 01:07:41,000
你要回

2420
01:07:41,000 --> 01:07:42,000
你想回到航手

2421
01:07:42,000 --> 01:07:43,000
只能按 Home

2422
01:07:43,000 --> 01:07:44,000
你不能按 Ctrl 加 A

2423
01:07:44,000 --> 01:07:45,000
只来的

2424
01:07:45,000 --> 01:07:45,000
那一直回来

2425
01:07:45,000 --> 01:07:46,000
从第一个

2426
01:07:46,000 --> 01:07:47,000
慢慢用箭头

2427
01:07:47,000 --> 01:07:49,000
再挪到对应的那个位置

2428
01:07:49,000 --> 01:07:50,000
加引号

2429
01:07:50,000 --> 01:07:50,000
C 前面

2430
01:07:50,000 --> 01:07:51,000
对

2431
01:07:51,000 --> 01:07:52,000
你看那些一直上

2432
01:07:52,000 --> 01:07:53,000
就都会有些很老的程序

2433
01:07:53,000 --> 01:07:54,000
一直产

2434
01:07:54,000 --> 01:07:56,000
然后修改文件名的时候

2435
01:07:56,000 --> 01:07:58,000
要按后推键

2436
01:07:58,000 --> 01:08:00,000
按上那么二三十次

2437
01:08:00,000 --> 01:08:01,000
你看到的时候

2438
01:08:01,000 --> 01:08:02,000
你就真的会抵他着急

2439
01:08:02,000 --> 01:08:03,000
Oh my god

2440
01:08:03,000 --> 01:08:05,000
所以给人一种德国人

2441
01:08:05,000 --> 01:08:07,000
做事严谨的感觉

2442
01:08:07,000 --> 01:08:07,000
就在逗

2443
01:08:07,000 --> 01:08:09,000
模样过

2444
01:08:09,000 --> 01:08:10,000
我给你们听一下

2445
01:08:10,000 --> 01:08:10,000
逗

2446
01:08:14,000 --> 01:08:15,000
是不这种感觉

2447
01:08:16,000 --> 01:08:17,000
请问键盘什么牌

2448
01:08:17,000 --> 01:08:18,000
对

2449
01:08:18,000 --> 01:08:18,000
对

2450
01:08:18,000 --> 01:08:19,000
所以就刚才那个 Backslash

2451
01:08:19,000 --> 01:08:21,000
其实有就是那个叫做

2452
01:08:21,000 --> 01:08:22,000
Backslash 叫什么

2453
01:08:22,000 --> 01:08:23,000
我一直搞不清楚

2454
01:08:23,000 --> 01:08:24,000
哪个是斜杠

2455
01:08:24,000 --> 01:08:26,000
哪个是反斜杠

2456
01:08:26,000 --> 01:08:28,000
Backslash 是反斜杠

2457
01:08:28,000 --> 01:08:28,000
等一下

2458
01:08:28,000 --> 01:08:30,000
斜杠是从哪

2459
01:08:30,000 --> 01:08:32,000
从右上到左下

2460
01:08:32,000 --> 01:08:33,000
OK

2461
01:08:33,000 --> 01:08:34,000
右上到左下

2462
01:08:34,000 --> 01:08:35,000
这个是斜杠对吧

2463
01:08:35,000 --> 01:08:35,000
对

2464
01:08:35,000 --> 01:08:36,000
就是刚反年

2465
01:08:36,000 --> 01:08:37,000
是斜杠青年

2466
01:08:37,000 --> 01:08:39,000
反斜杠青年

2467
01:08:39,000 --> 01:08:40,000
反斜杠青年

2468
01:08:40,000 --> 01:08:42,000
是用 Backslash 做斜杠青年的

2469
01:08:42,000 --> 01:08:43,000
斜杠青年

2470
01:08:46,000 --> 01:08:47,000
斜杠这个

2471
01:08:47,000 --> 01:08:49,000
右上到左下的是正斜杠

2472
01:08:49,000 --> 01:08:52,000
左上到右下的是反斜杠

2473
01:08:52,000 --> 01:08:52,000
我怎么说的

2474
01:08:52,000 --> 01:08:53,000
我不能这个问题

2475
01:08:53,000 --> 01:08:54,000
有点抬杠

2476
01:08:54,000 --> 01:08:55,000
这实际上是一个

2477
01:08:55,000 --> 01:08:56,000
怎么说

2478
01:08:56,000 --> 01:08:58,000
右撇子的世界的偏见

2479
01:08:58,000 --> 01:09:01,000
右撇子在砍人的时候会

2480
01:09:01,000 --> 01:09:02,000
自然从右上举起来

2481
01:09:02,000 --> 01:09:04,000
然后朝左下消下去

2482
01:09:04,000 --> 01:09:05,000
为什么一定要砍人

2483
01:09:06,000 --> 01:09:07,000
这是 Slash

2484
01:09:07,000 --> 01:09:10,000
Slash 这个动作不是 P 砍的意思吗

2485
01:09:10,000 --> 01:09:11,000
Slash 是

2486
01:09:11,000 --> 01:09:13,000
就是你把你的手举起来

2487
01:09:13,000 --> 01:09:14,000
你的惯用手举起来

2488
01:09:14,000 --> 01:09:16,000
肯定是朝右上举的

2489
01:09:16,000 --> 01:09:16,000
对

2490
01:09:16,000 --> 01:09:17,000
然后

2491
01:09:17,000 --> 01:09:17,000
P

2492
01:09:17,000 --> 01:09:19,000
P 下来是朝左下 P 的

2493
01:09:21,000 --> 01:09:22,000
我这么说

2494
01:09:22,000 --> 01:09:23,000
就是在网址里面

2495
01:09:23,000 --> 01:09:24,000
那个斜杠是正斜杠

2496
01:09:24,000 --> 01:09:25,000
对吧

2497
01:09:25,000 --> 01:09:25,000
正斜杠

2498
01:09:25,000 --> 01:09:26,000
对

2499
01:09:26,000 --> 01:09:28,000
然后 Windows 的路径

2500
01:09:28,000 --> 01:09:28,000
这是反斜杠

2501
01:09:29,000 --> 01:09:29,000
对

2502
01:09:29,000 --> 01:09:31,000
Windows 路径是反斜杠

2503
01:09:31,000 --> 01:09:33,000
这是实际上也是很有意思的

2504
01:09:33,000 --> 01:09:34,000
叫什么

2505
01:09:34,000 --> 01:09:35,000
路径依赖问题

2506
01:09:35,000 --> 01:09:38,000
因为 Unix 最开始是用斜杠

2507
01:09:38,000 --> 01:09:40,000
作为路径分割服务的

2508
01:09:40,000 --> 01:09:42,000
而 DOS 一开始

2509
01:09:42,000 --> 01:09:44,000
DOS 意料人是没有路径的概念的

2510
01:09:44,000 --> 01:09:45,000
所以

2511
01:09:45,000 --> 01:09:46,000
也是后来加的

2512
01:09:46,000 --> 01:09:47,000
对

2513
01:09:47,000 --> 01:09:52,000
他们继承了当时 CPM 的斜杠

2514
01:09:52,000 --> 01:09:54,000
作为 flag 的这个用法

2515
01:09:54,000 --> 01:09:55,000
命令参数

2516
01:09:55,000 --> 01:09:56,000
作为参数的用法

2517
01:09:56,000 --> 01:09:59,000
然后等到他们需要加入路径的时候

2518
01:09:59,000 --> 01:10:01,000
那就用了反斜杠

2519
01:10:02,000 --> 01:10:03,000
因为斜杠已经被用掉了

2520
01:10:03,000 --> 01:10:04,000
对吧

2521
01:10:04,000 --> 01:10:04,000
对

2522
01:10:04,000 --> 01:10:05,000
这就造成了另外一个问题

2523
01:10:05,000 --> 01:10:07,000
就是用我们讲用 Backstarch

2524
01:10:07,000 --> 01:10:08,000
这个叫 Coding

2525
01:10:08,000 --> 01:10:10,000
就是保护那个

2526
01:10:10,000 --> 01:10:11,000
空格的时候

2527
01:10:11,000 --> 01:10:13,000
你会发现好像没法保护

2528
01:10:13,000 --> 01:10:13,000
对吧

2529
01:10:13,000 --> 01:10:16,000
因为我在斜杠有别的用途

2530
01:10:16,000 --> 01:10:16,000
对

2531
01:10:16,000 --> 01:10:17,000
太坑爹了

2532
01:10:17,000 --> 01:10:18,000
但现在的主流的操作系统

2533
01:10:20,000 --> 01:10:21,000
还是最新的比方

2534
01:10:21,000 --> 01:10:22,000
Windows 10 和 MacOS

2535
01:10:22,000 --> 01:10:24,000
都是允许使用空格

2536
01:10:24,000 --> 01:10:25,000
而且是允许使用任意多个空格

2537
01:10:25,000 --> 01:10:26,000
就是连续也可以

2538
01:10:26,000 --> 01:10:26,000
对

2539
01:10:26,000 --> 01:10:27,000
对吧

2540
01:10:27,000 --> 01:10:29,000
所以就会出现我刚才说的那个问题

2541
01:10:29,000 --> 01:10:31,000
就是你非要搞事的话

2542
01:10:31,000 --> 01:10:33,000
你让 7 个文件名

2543
01:10:33,000 --> 01:10:33,000
对吧

2544
01:10:33,000 --> 01:10:35,000
A 隐藏后罪

2545
01:10:35,000 --> 01:10:35,000
对吧

2546
01:10:35,000 --> 01:10:37,000
然后又 7 个文件名

2547
01:10:37,000 --> 01:10:38,000
A 空格

2548
01:10:38,000 --> 01:10:38,000
又隐藏后罪

2549
01:10:38,000 --> 01:10:39,000
对吧

2550
01:10:39,000 --> 01:10:41,000
那你又 7 个文件名 A 空格

2551
01:10:41,000 --> 01:10:42,000
空格又隐藏后罪

2552
01:10:42,000 --> 01:10:43,000
你发现这个文件家怎么全都是文件

2553
01:10:43,000 --> 01:10:44,000
就都叫 A

2554
01:10:44,000 --> 01:10:45,000
对不对

2555
01:10:45,000 --> 01:10:47,000
全是空格文件

2556
01:10:48,000 --> 01:10:49,000
还有个空白的文件

2557
01:10:49,000 --> 01:10:49,000
更猛的

2558
01:10:49,000 --> 01:10:50,000
这个也是很有意思

2559
01:10:50,000 --> 01:10:53,000
所以我觉得就是允许空格是可以打

2560
01:10:53,000 --> 01:10:54,000
但是我觉得

2561
01:10:55,000 --> 01:10:56,000
就是能不写空格的啥

2562
01:10:56,000 --> 01:10:56,000
尽量不写空格

2563
01:10:56,000 --> 01:10:58,000
避免太多那种坑

2564
01:11:01,000 --> 01:11:04,000
所以文件名允许空格还好

2565
01:11:04,000 --> 01:11:05,000
但是你在编程的时候

2566
01:11:05,000 --> 01:11:07,000
那些标志符

2567
01:11:07,000 --> 01:11:08,000
标志符

2568
01:11:08,000 --> 01:11:09,000
标志符

2569
01:11:10,000 --> 01:11:11,000
identify

2570
01:11:11,000 --> 01:11:12,000
标志符

2571
01:11:12,000 --> 01:11:14,000
标志符的话就肯定不能有空格

2572
01:11:15,000 --> 01:11:15,000
对吧

2573
01:11:15,000 --> 01:11:19,000
那就要变成两个符号了

2574
01:11:19,000 --> 01:11:20,000
Identifier

2575
01:11:20,000 --> 01:11:21,000
对

2576
01:11:21,000 --> 01:11:22,000
那里可相对好好理解

2577
01:11:22,000 --> 01:11:24,000
就是说那里至少有个明确的

2578
01:11:24,000 --> 01:11:25,000
一根写字是一样的

2579
01:11:25,000 --> 01:11:27,000
你知道你写的是两个 word

2580
01:11:27,000 --> 01:11:28,000
它不是一个 word

2581
01:11:28,000 --> 01:11:29,000
那肯定要用一个东西来分割

2582
01:11:29,000 --> 01:11:30,000
空格分割

2583
01:11:30,000 --> 01:11:31,000
天经地义

2584
01:11:31,000 --> 01:11:33,000
在西文里面是这样子

2585
01:11:34,000 --> 01:11:39,000
所以在编程的时候就开始各种类

2586
01:11:39,000 --> 01:11:41,000
各种函数就开始大家要连起来

2587
01:11:42,000 --> 01:11:46,000
就于是就有各种各样的写法了

2588
01:11:47,000 --> 01:11:49,000
现在最流行的应该就是那种 camel case

2589
01:11:49,000 --> 01:11:50,000
对吧

2590
01:11:52,000 --> 01:11:53,000
camel case 和下画线

2591
01:11:53,000 --> 01:11:55,000
取决于你干嘛

2592
01:11:55,000 --> 01:11:56,000
现在什么 kbop case

2593
01:11:56,000 --> 01:12:00,000
camel case 和 snake case 各有用处了

2594
01:12:01,000 --> 01:12:01,000
来

2595
01:12:01,000 --> 01:12:03,000
跟大家解释一下这就是什么意思

2596
01:12:03,000 --> 01:12:04,000
对吧

2597
01:12:04,000 --> 01:12:05,000
现在讲这个场景是什么

2598
01:12:05,000 --> 01:12:06,000
对不对

2599
01:12:06,000 --> 01:12:07,000
就是说为什么有这个需求

2600
01:12:07,000 --> 01:12:10,000
就是说你因为不能用空格去分割

2601
01:12:11,000 --> 01:12:14,000
编程里面的一个词

2602
01:12:14,000 --> 01:12:14,000
标志符

2603
01:12:14,000 --> 01:12:15,000
一个标志符

2604
01:12:15,000 --> 01:12:15,000
对吧

2605
01:12:15,000 --> 01:12:16,000
你不能用空格分割

2606
01:12:17,000 --> 01:12:19,000
至少应该我觉得目前主流的编程语言

2607
01:12:19,000 --> 01:12:20,000
都是不支持这个点的

2608
01:12:20,000 --> 01:12:22,000
你甚至你也不能用引号

2609
01:12:22,000 --> 01:12:22,000
对吧

2610
01:12:22,000 --> 01:12:23,000
不能加引号

2611
01:12:23,000 --> 01:12:24,000
引号是一个特殊符号

2612
01:12:24,000 --> 01:12:25,000
你也不能用

2613
01:12:25,000 --> 01:12:25,000
对吧

2614
01:12:25,000 --> 01:12:26,000
所以你要去说

2615
01:12:26,000 --> 01:12:27,000
我要分割

2616
01:12:27,000 --> 01:12:28,000
比如说 Hello world

2617
01:12:28,000 --> 01:12:30,000
这两个写在一起的时候怎么办

2618
01:12:30,000 --> 01:12:32,000
通常的一种做法就是说

2619
01:12:32,000 --> 01:12:34,000
这两个字就是连起来一起写

2620
01:12:34,000 --> 01:12:35,000
但是 Hello

2621
01:12:35,000 --> 01:12:36,000
H 是大写

2622
01:12:36,000 --> 01:12:38,000
然后这个 world 的 w 大写

2623
01:12:38,000 --> 01:12:39,000
对吧

2624
01:12:39,000 --> 01:12:41,000
这个叫做什么来的

2625
01:12:41,000 --> 01:12:42,000
camel case

2626
01:12:42,000 --> 01:12:43,000
陀峰式

2627
01:12:43,000 --> 01:12:44,000
等等

2628
01:12:44,000 --> 01:12:47,000
camel case 和 passcode

2629
01:12:47,000 --> 01:12:47,000
对

2630
01:12:47,000 --> 01:12:49,000
第一个一定要挑写才叫 camel case

2631
01:12:49,000 --> 01:12:51,000
第一个大写的话就 passcode case

2632
01:12:52,000 --> 01:12:54,000
但这个区别其实好像加拿讲的那么多

2633
01:12:54,000 --> 01:12:55,000
对大家一般还是讲

2634
01:12:55,000 --> 01:12:57,000
就是说是手字母大写

2635
01:12:57,000 --> 01:12:58,000
我们就是这样

2636
01:12:58,000 --> 01:12:58,000
对

2637
01:12:58,000 --> 01:12:59,000
比如说构园里面

2638
01:13:00,000 --> 01:13:01,000
小写是有语音的区别

2639
01:13:01,000 --> 01:13:04,000
number function 实际上是 passcode case

2640
01:13:04,000 --> 01:13:07,000
但是很多人会说那是 camel case

2641
01:13:07,000 --> 01:13:08,000
camel case 就是说你看怎么去理解

2642
01:13:08,000 --> 01:13:10,000
它的定义是啥

2643
01:13:10,000 --> 01:13:11,000
就是说你只是说

2644
01:13:11,000 --> 01:13:16,000
就是有这个词的手字母大写这种

2645
01:13:16,000 --> 01:13:17,000
这一类你都叫 camel case

2646
01:13:17,000 --> 01:13:18,000
他也说得过去

2647
01:13:18,000 --> 01:13:20,000
那只是说因为在构里面

2648
01:13:20,000 --> 01:13:22,000
它的第一个字母是大写和小写

2649
01:13:22,000 --> 01:13:25,000
会影响到它这个标识服的

2650
01:13:25,000 --> 01:13:27,000
visibility 的可见性

2651
01:13:27,000 --> 01:13:28,000
所以这里面他就说

2652
01:13:28,000 --> 01:13:29,000
作用语

2653
01:13:29,000 --> 01:13:31,000
我就不好去单独给他起一个名字

2654
01:13:31,000 --> 01:13:34,000
所以就只能就说这一类都叫 camel case

2655
01:13:35,000 --> 01:13:35,000
好吧

2656
01:13:35,000 --> 01:13:36,000
那你可以说 passcode case

2657
01:13:36,000 --> 01:13:39,000
实际上是 camel case 的一个特例

2658
01:13:39,000 --> 01:13:41,000
就小陀峰和大陀峰

2659
01:13:41,000 --> 01:13:42,000
所谓的小陀峰

2660
01:13:44,000 --> 01:13:45,000
手字母是小写

2661
01:13:45,000 --> 01:13:47,000
但是后面的那个词

2662
01:13:47,000 --> 01:13:50,000
第二个单词的字母是大写

2663
01:13:50,000 --> 01:13:50,000
就小陀峰

2664
01:13:50,000 --> 01:13:51,000
对

2665
01:13:51,000 --> 01:13:52,000
然后大陀峰的话

2666
01:13:52,000 --> 01:13:54,000
就是联手字母也大写

2667
01:13:54,000 --> 01:13:57,000
那这样的话也可以叫做 pascam

2668
01:13:57,000 --> 01:13:59,000
就 pascam

2669
01:13:59,000 --> 01:13:59,000
对

2670
01:13:59,000 --> 01:14:01,000
它是从 pascam 原来的

2671
01:14:02,000 --> 01:14:02,000
对

2672
01:14:02,000 --> 01:14:04,000
但这里就有一个更坑爹的事情了

2673
01:14:04,000 --> 01:14:05,000
就是说我考你们一个

2674
01:14:05,000 --> 01:14:07,000
其实有很多人有分歧的

2675
01:14:08,000 --> 01:14:09,000
缩略词

2676
01:14:09,000 --> 01:14:11,000
全大写的时候应该怎么办

2677
01:14:11,000 --> 01:14:11,000
是吧

2678
01:14:11,000 --> 01:14:11,000
对

2679
01:14:11,000 --> 01:14:12,000
怎么办

2680
01:14:12,000 --> 01:14:13,000
比如说有个人说

2681
01:14:14,000 --> 01:14:15,000
一般要学的基本上

2682
01:14:15,000 --> 01:14:16,000
那个都大家都基本上都是

2683
01:14:16,000 --> 01:14:17,000
如果是在词所

2684
01:14:17,000 --> 01:14:18,000
很多就是小写

2685
01:14:18,000 --> 01:14:19,000
或者是这个

2686
01:14:19,000 --> 01:14:21,000
那也是要值得讨论的问题

2687
01:14:21,000 --> 01:14:23,000
这个还不是最坑的

2688
01:14:23,000 --> 01:14:24,000
最坑是这种

2689
01:14:24,000 --> 01:14:26,000
比如说是 ipdipadress

2690
01:14:26,000 --> 01:14:28,000
我小成一个字的时候怎么这么大小写

2691
01:14:28,000 --> 01:14:29,000
ip 两个字

2692
01:14:29,000 --> 01:14:31,000
必须两个字母必须大写

2693
01:14:31,000 --> 01:14:33,000
通常来讲的话

2694
01:14:33,000 --> 01:14:34,000
那不就变成 passcode case 吗

2695
01:14:37,000 --> 01:14:37,000
不是

2696
01:14:37,000 --> 01:14:38,000
这里就很坑的

2697
01:14:38,000 --> 01:14:39,000
在这个问题在这里

2698
01:14:39,000 --> 01:14:40,000
就说

2699
01:14:40,000 --> 01:14:41,000
我们现在不考虑

2700
01:14:41,000 --> 01:14:42,000
购物语言这种比较特殊

2701
01:14:42,000 --> 01:14:44,000
它对手字母大小写

2702
01:14:44,000 --> 01:14:45,000
有语义的区别之外

2703
01:14:45,000 --> 01:14:46,000
就说假设是

2704
01:14:46,000 --> 01:14:47,000
完全没有语义区别

2705
01:14:47,000 --> 01:14:48,000
情况下

2706
01:14:48,000 --> 01:14:49,000
它其实也有讲究的

2707
01:14:49,000 --> 01:14:50,000
就是说

2708
01:14:50,000 --> 01:14:54,000
比如说是 i 大写 p 小写

2709
01:14:54,000 --> 01:14:56,000
a 大写的 ip address

2710
01:14:56,000 --> 01:14:58,000
还是说 ipa 都大写

2711
01:14:58,000 --> 01:14:59,000
然后 address 的后面

2712
01:14:59,000 --> 01:15:00,000
出手这么多小写

2713
01:15:00,000 --> 01:15:01,000
这是一种写法

2714
01:15:01,000 --> 01:15:01,000
对吧

2715
01:15:01,000 --> 01:15:03,000
还有就是 ip 多小写

2716
01:15:03,000 --> 01:15:04,000
然后 a 大写

2717
01:15:04,000 --> 01:15:05,000
然后 address 这小写

2718
01:15:05,000 --> 01:15:06,000
这种情况下

2719
01:15:06,000 --> 01:15:07,000
对吧

2720
01:15:07,000 --> 01:15:08,000
就是你发现没

2721
01:15:08,000 --> 01:15:09,000
它有很多这种

2722
01:15:09,000 --> 01:15:11,000
不太明确的地方

2723
01:15:11,000 --> 01:15:13,000
然后这种

2724
01:15:13,000 --> 01:15:15,000
你说 ip address 还比较简单

2725
01:15:15,000 --> 01:15:15,000
对吧

2726
01:15:15,000 --> 01:15:16,000
但如果是刚好是

2727
01:15:16,000 --> 01:15:17,000
这种算说粗列词

2728
01:15:17,000 --> 01:15:18,000
ip 是个粗列词

2729
01:15:18,000 --> 01:15:20,000
还是 internet protocol 的

2730
01:15:20,000 --> 01:15:21,000
这个粗列

2731
01:15:21,000 --> 01:15:26,000
如果说我要写 ipurl address

2732
01:15:26,000 --> 01:15:26,000
怎么办

2733
01:15:26,000 --> 01:15:28,000
没有

2734
01:15:28,000 --> 01:15:31,000
这好像跟你的环境

2735
01:15:31,000 --> 01:15:32,000
跟语言有关系

2736
01:15:32,000 --> 01:15:34,000
然后有些它还是有习惯的

2737
01:15:34,000 --> 01:15:35,000
比如说

2738
01:15:35,000 --> 01:15:37,000
这个叫手字母缩写

2739
01:15:37,000 --> 01:15:40,000
如果超过是三个

2740
01:15:40,000 --> 01:15:42,000
或三个以上的话

2741
01:15:42,000 --> 01:15:45,000
那么把后面几个字母消息

2742
01:15:45,000 --> 01:15:47,000
就有那样的语言

2743
01:15:47,000 --> 01:15:48,000
是啊

2744
01:15:48,000 --> 01:15:49,000
所以我就说这个事情

2745
01:15:49,000 --> 01:15:52,000
就是其实是一个相对来说

2746
01:15:52,000 --> 01:15:52,000
首先中文里面

2747
01:15:52,000 --> 01:15:53,000
不存在这个问题

2748
01:15:53,000 --> 01:15:53,000
对吧

2749
01:15:53,000 --> 01:15:55,000
因为只有西文有大小写的概念

2750
01:15:55,000 --> 01:15:56,000
对

2751
01:15:56,000 --> 01:15:58,000
然后在西文大大学里面

2752
01:15:58,000 --> 01:16:00,000
这种就会经常导致各种

2753
01:16:00,000 --> 01:16:02,000
这种所谓的叫做圣战

2754
01:16:02,000 --> 01:16:03,000
对吧

2755
01:16:03,000 --> 01:16:04,000
各种坚持

2756
01:16:04,000 --> 01:16:06,000
一定要某一种写法才对

2757
01:16:06,000 --> 01:16:07,000
好像另外一种某种写法

2758
01:16:07,000 --> 01:16:10,000
才更合理的这种争论

2759
01:16:10,000 --> 01:16:12,000
是一直都存在

2760
01:16:12,000 --> 01:16:14,000
而且我估计在我们死后

2761
01:16:14,000 --> 01:16:15,000
它应该还是会继续存在的

2762
01:16:16,000 --> 01:16:18,000
其实它怎么大小写

2763
01:16:18,000 --> 01:16:21,000
还是由 API 的设计者

2764
01:16:21,000 --> 01:16:23,000
他当时拍脑袋想的吧

2765
01:16:23,000 --> 01:16:25,000
因为我们这边有 Web 开发者

2766
01:16:25,000 --> 01:16:29,000
xmlhttprequest 里面就是 xml 全大写

2767
01:16:29,000 --> 01:16:31,000
但 http 又不是全大写

2768
01:16:31,000 --> 01:16:32,000
是吧

2769
01:16:32,000 --> 01:16:33,000
很奇怪对不对

2770
01:16:33,000 --> 01:16:34,000
对

2771
01:16:34,000 --> 01:16:35,000
对

2772
01:16:35,000 --> 01:16:38,000
所以这个完全是看开发者当时他拍脑袋

2773
01:16:38,000 --> 01:16:40,000
他觉得这样写比较优雅

2774
01:16:40,000 --> 01:16:41,000
他就这么写

2775
01:16:41,000 --> 01:16:42,000
看心情

2776
01:16:43,000 --> 01:16:43,000
没有

2777
01:16:43,000 --> 01:16:45,000
今天我们讲的是命名规则

2778
01:16:45,000 --> 01:16:46,000
像这种东西

2779
01:16:46,000 --> 01:16:48,000
很多时候有规则

2780
01:16:48,000 --> 01:16:50,000
有的地方是没规则

2781
01:16:50,000 --> 01:16:51,000
然后一个语言里面

2782
01:16:51,000 --> 01:16:52,000
他有时候定了一个规则

2783
01:16:52,000 --> 01:16:53,000
他自己都不同意

2784
01:16:53,000 --> 01:16:55,000
经常会有这种事情

2785
01:16:55,000 --> 01:16:55,000
对

2786
01:16:55,000 --> 01:16:58,000
每个公司他有自己的 convention

2787
01:16:58,000 --> 01:17:00,000
毕竟他是一个 convention

2788
01:17:00,000 --> 01:17:01,000
他还是一种约定

2789
01:17:01,000 --> 01:17:05,000
他没有一种很强制的机制去约束

2790
01:17:05,000 --> 01:17:07,000
比如说如果有一个什么机器检测的机制

2791
01:17:07,000 --> 01:17:09,000
禁止他做某件事情

2792
01:17:09,000 --> 01:17:12,000
那他可能规则才会非常的强力

2793
01:17:12,000 --> 01:17:13,000
对

2794
01:17:13,000 --> 01:17:14,000
然后 comply 不过是吧

2795
01:17:17,000 --> 01:17:19,000
但从实用主义角度来讲

2796
01:17:19,000 --> 01:17:23,000
你因为你用 camel case 要解决什么问题

2797
01:17:23,000 --> 01:17:25,000
是解决不能用空格分词

2798
01:17:25,000 --> 01:17:26,000
也没有

2799
01:17:26,000 --> 01:17:29,000
就说我们后面会用下发线也是一个办法

2800
01:17:29,000 --> 01:17:30,000
就如果在不能用空格

2801
01:17:30,000 --> 01:17:31,000
也不用下发线的

2802
01:17:31,000 --> 01:17:32,000
因为我认为下发线是一个空格的变种

2803
01:17:32,000 --> 01:17:33,000
对吧

2804
01:17:33,000 --> 01:17:34,000
OK

2805
01:17:34,000 --> 01:17:34,000
那不能用空格

2806
01:17:34,000 --> 01:17:36,000
也不能用下发线的情况下

2807
01:17:36,000 --> 01:17:38,000
你要用大小写来展示

2808
01:17:38,000 --> 01:17:39,000
词语直接的区别

2809
01:17:39,000 --> 01:17:40,000
那很显然

2810
01:17:40,000 --> 01:17:41,000
这种情况下

2811
01:17:41,000 --> 01:17:44,000
你就不应该把那种全大写的词

2812
01:17:44,000 --> 01:17:46,000
都真的全大写

2813
01:17:46,000 --> 01:17:47,000
这样的话你看不清楚

2814
01:17:47,000 --> 01:17:48,000
它的那个边界在哪里

2815
01:17:48,000 --> 01:17:50,000
就好像你说 xml

2816
01:17:50,000 --> 01:17:51,000
HGTBrequest 的情况下

2817
01:17:51,000 --> 01:17:51,000
对吧

2818
01:17:51,000 --> 01:17:52,000
xml

2819
01:17:52,000 --> 01:17:54,000
HGTB 这是一个东西还是两个东西

2820
01:17:54,000 --> 01:17:55,000
对吧

2821
01:17:55,000 --> 01:17:57,000
原教义的那种

2822
01:17:57,000 --> 01:17:59,000
那种 camel case 还是比较适合

2823
01:17:59,000 --> 01:18:00,000
阅读的

2824
01:18:00,000 --> 01:18:01,000
虽然说看起来看起来比较丑

2825
01:18:01,000 --> 01:18:02,000
对吧

2826
01:18:02,000 --> 01:18:04,000
为什么 xml 是这么一种写法

2827
01:18:04,000 --> 01:18:04,000
就好奇怪

2828
01:18:04,000 --> 01:18:05,000
感觉怪怪的

2829
01:18:05,000 --> 01:18:07,000
但从读的角度来讲

2830
01:18:07,000 --> 01:18:09,000
或者从分词的这个角度来看

2831
01:18:09,000 --> 01:18:10,000
对吧

2832
01:18:10,000 --> 01:18:12,000
你还是要去找到它那个东西的本质

2833
01:18:12,000 --> 01:18:12,000
是什么

2834
01:18:12,000 --> 01:18:13,000
它本质不是为了好看

2835
01:18:13,000 --> 01:18:15,000
它本质是为了 clarity

2836
01:18:15,000 --> 01:18:16,000
为了清晰

2837
01:18:16,000 --> 01:18:16,000
对吧

2838
01:18:16,000 --> 01:18:17,000
对

2839
01:18:17,000 --> 01:18:17,000
OK

2840
01:18:17,000 --> 01:18:19,000
那就是一种秘密方式

2841
01:18:19,000 --> 01:18:20,000
第二种秘密方式应该讲

2842
01:18:20,000 --> 01:18:21,000
空格是肯定不行的

2843
01:18:21,000 --> 01:18:24,000
为什么我说下发线是空格的变仇的

2844
01:18:24,000 --> 01:18:26,000
因为下发线它其实就是

2845
01:18:26,000 --> 01:18:30,000
空格那里位置变成了一条线

2846
01:18:30,000 --> 01:18:31,000
然后下发线其实

2847
01:18:31,000 --> 01:18:34,000
有一个区别是比较要紧的

2848
01:18:34,000 --> 01:18:38,000
就是在用鼠标双击选词的时候

2849
01:18:38,000 --> 01:18:41,000
下发线它不会把那个词断开

2850
01:18:41,000 --> 01:18:41,000
对

2851
01:18:41,000 --> 01:18:42,000
这个其实挺蛮有用的

2852
01:18:42,000 --> 01:18:43,000
比如说什么意思

2853
01:18:43,000 --> 01:18:45,000
就是说你想象一下

2854
01:18:45,000 --> 01:18:46,000
Hello world

2855
01:18:46,000 --> 01:18:47,000
如果你是空格断开

2856
01:18:47,000 --> 01:18:49,000
它肯定你点击

2857
01:18:49,000 --> 01:18:50,000
我们摸的是双击

2858
01:18:50,000 --> 01:18:50,000
是选一个词

2859
01:18:50,000 --> 01:18:51,000
对吧

2860
01:18:51,000 --> 01:18:51,000
一个 world

2861
01:18:51,000 --> 01:18:53,000
那应该只会选到 Hello

2862
01:18:53,000 --> 01:18:55,000
然后它选不到后面的 world

2863
01:18:55,000 --> 01:18:56,000
它如果说你用下发线

2864
01:18:56,000 --> 01:18:57,000
把 Hello world 连起来之后

2865
01:18:57,000 --> 01:19:00,000
你用你在大多数的图形界面

2866
01:19:00,000 --> 01:19:01,000
你用双击的方式去选那个词

2867
01:19:01,000 --> 01:19:02,000
它会把整个 Hello 下发线

2868
01:19:02,000 --> 01:19:03,000
或者都都都圈起来

2869
01:19:03,000 --> 01:19:05,000
都都高量选选择起来

2870
01:19:05,000 --> 01:19:06,000
对不对

2871
01:19:06,000 --> 01:19:08,000
就这个其实还是蛮有用的

2872
01:19:08,000 --> 01:19:10,000
这交互设计为了优化

2873
01:19:10,000 --> 01:19:12,000
这种这种字不穿

2874
01:19:12,000 --> 01:19:13,000
对这么做的

2875
01:19:13,000 --> 01:19:14,000
对

2876
01:19:14,000 --> 01:19:16,000
就它避免了大小写的真端

2877
01:19:16,000 --> 01:19:16,000
对吧

2878
01:19:16,000 --> 01:19:17,000
这个时候你怎么就大小写

2879
01:19:17,000 --> 01:19:19,000
就全看你的心情了

2880
01:19:19,000 --> 01:19:23,000
因为它跟语异和分词都不影响了

2881
01:19:23,000 --> 01:19:23,000
对吧

2882
01:19:23,000 --> 01:19:23,000
你都可以

2883
01:19:23,000 --> 01:19:26,000
比如说刚刚那个是 HTXML

2884
01:19:26,000 --> 01:19:27,000
下发线 HTTP

2885
01:19:27,000 --> 01:19:28,000
下发线 Request

2886
01:19:28,000 --> 01:19:29,000
你都可以这么写对不对

2887
01:19:29,000 --> 01:19:31,000
其实不影响这个了

2888
01:19:31,000 --> 01:19:32,000
那这些就是好看的问题了

2889
01:19:32,000 --> 01:19:34,000
不过理论上讲

2890
01:19:34,000 --> 01:19:36,000
就是用下发线的话

2891
01:19:36,000 --> 01:19:37,000
就没那么爱也说实话

2892
01:19:37,000 --> 01:19:41,000
就既有这个空格的这个空间感

2893
01:19:41,000 --> 01:19:43,000
然后也没那么爱也

2894
01:19:43,000 --> 01:19:44,000
然后因为它是在下发线

2895
01:19:44,000 --> 01:19:46,000
所以它这个名字叫 Snake Case

2896
01:19:46,000 --> 01:19:48,000
就像是蛇

2897
01:19:48,000 --> 01:19:51,000
在地上爬蛇

2898
01:19:51,000 --> 01:19:52,000
超形象的

2899
01:19:52,000 --> 01:19:55,000
我觉得这几个名字都超形象的

2900
01:19:55,000 --> 01:19:56,000
像下发就叫 Snake

2901
01:19:57,000 --> 01:19:59,000
名字符叫 K-Bub 对吧

2902
01:19:59,000 --> 01:20:00,000
Cauture

2903
01:20:00,000 --> 01:20:02,000
Cauture Case

2904
01:20:02,000 --> 01:20:02,000
什么意思

2905
01:20:02,000 --> 01:20:02,000
对吧

2906
01:20:02,000 --> 01:20:04,000
就像一个刹

2907
01:20:04,000 --> 01:20:06,000
刹在上面好多什么肉

2908
01:20:06,000 --> 01:20:08,000
叉烧一样的感觉

2909
01:20:08,000 --> 01:20:10,000
这一看就是吃货区的

2910
01:20:10,000 --> 01:20:12,000
这个东西有中文翻译吗

2911
01:20:12,000 --> 01:20:13,000
就肉加膜对不对

2912
01:20:13,000 --> 01:20:16,000
就就是肉加膜

2913
01:20:16,000 --> 01:20:19,000
字面意义上 Kibbum 是旋转烧烤的意思

2914
01:20:19,000 --> 01:20:22,000
对那是旋转

2915
01:20:22,000 --> 01:20:23,000
Kibbum 是烧烤

2916
01:20:23,000 --> 01:20:26,000
然后连的起焦

2917
01:20:27,000 --> 01:20:31,000
连的 Kibbum 实际上是对那 Kibbum 的简称

2918
01:20:31,000 --> 01:20:33,000
就是托尔西烤肉的简称

2919
01:20:33,000 --> 01:20:36,000
但是就是在 Kibbum 这个词

2920
01:20:36,000 --> 01:20:37,000
在进入英语语系里面

2921
01:20:37,000 --> 01:20:39,000
它其实就是我们理解的 trunk

2922
01:20:39,000 --> 01:20:42,000
对烤吧

2923
01:20:42,000 --> 01:20:42,000
不是 trunk

2924
01:20:42,000 --> 01:20:44,000
对那是旋转

2925
01:20:44,000 --> 01:20:45,000
Kibbum 是烤

2926
01:20:45,000 --> 01:20:47,000
Kibbum 是烤的意思

2927
01:20:47,000 --> 01:20:47,000
对

2928
01:20:47,000 --> 01:20:48,000
对

2929
01:20:48,000 --> 01:20:51,000
但是我就说你在英语里面

2930
01:20:51,000 --> 01:20:52,000
Ryough 的语意是说对

2931
01:20:52,000 --> 01:20:55,000
它这个东西语意变成 Sushleek

2932
01:20:55,000 --> 01:20:56,000
对

2933
01:20:56,000 --> 01:20:58,000
就是一个串着一起的东西

2934
01:20:58,000 --> 01:20:58,000
串对

2935
01:20:58,000 --> 01:21:01,000
像像竹桥串起来这样一种

2936
01:21:01,000 --> 01:21:02,000
对

2937
01:21:02,000 --> 01:21:03,000
就是有一个挂在中间很细

2938
01:21:03,000 --> 01:21:05,000
然后上面有一堆更宽的一个物角

2939
01:21:05,000 --> 01:21:07,000
这个就是英文里面的 Kibbum

2940
01:21:07,000 --> 01:21:11,000
目前它展示的这个也是 Kibbum Case 的意思

2941
01:21:11,000 --> 01:21:12,000
对

2942
01:21:13,000 --> 01:21:15,000
就这样烤 trunk

2943
01:21:15,000 --> 01:21:16,000
烤 trunk Case

2944
01:21:16,000 --> 01:21:18,000
Trunk 这个字其实还是蛮形象

2945
01:21:18,000 --> 01:21:20,000
这要是日本人来起的话

2946
01:21:20,000 --> 01:21:22,000
就会变成鸟串烧

2947
01:21:22,000 --> 01:21:23,000
串鸟烧

2948
01:21:23,000 --> 01:21:24,000
鸟串烧

2949
01:21:24,000 --> 01:21:24,000
对

2950
01:21:24,000 --> 01:21:26,000
但 Kibbum Case 有个问题

2951
01:21:26,000 --> 01:21:29,000
就是它并不是所有的语言都支持

2952
01:21:29,000 --> 01:21:32,000
因为横线就是不是用

2953
01:21:32,000 --> 01:21:34,000
像好像是用联资符或者叫简号

2954
01:21:34,000 --> 01:21:34,000
对吧

2955
01:21:34,000 --> 01:21:36,000
它其实有别的含义

2956
01:21:36,000 --> 01:21:37,000
那可能是 A 简 B 的

2957
01:21:37,000 --> 01:21:39,000
也不是 Kibbum 然后 Gun 这个 case

2958
01:21:39,000 --> 01:21:40,000
它可能是一个

2959
01:21:40,000 --> 01:21:44,000
他认为你叫支持一个数学的简的一个操作

2960
01:21:44,000 --> 01:21:45,000
所以其实在很多语言里面

2961
01:21:45,000 --> 01:21:47,000
其实是不支持这种方式的

2962
01:21:47,000 --> 01:21:50,000
Kibbum Case 最常见的就是在 CSS 里面吗

2963
01:21:50,000 --> 01:21:50,000
很啰嗦

2964
01:21:50,000 --> 01:21:51,000
对

2965
01:21:51,000 --> 01:21:53,000
这也是因为 CSS 其实不进行计算的

2966
01:21:53,000 --> 01:21:54,000
一个原因导致的

2967
01:21:54,000 --> 01:21:54,000
对不对

2968
01:21:54,000 --> 01:21:55,000
它没有在 comput

2969
01:21:55,000 --> 01:21:56,000
除非用 Cock

2970
01:21:56,000 --> 01:21:58,000
它需要空格

2971
01:21:58,000 --> 01:21:59,000
CSS 现在不是支持 Cock 吗

2972
01:21:59,000 --> 01:22:01,000
所以你在 Cock 里面

2973
01:22:01,000 --> 01:22:02,000
你要想想写简号的话

2974
01:22:02,000 --> 01:22:04,000
简号前后一定要有空格

2975
01:22:04,000 --> 01:22:07,000
而且这空格不能被压缩掉

2976
01:22:07,000 --> 01:22:08,000
对

2977
01:22:08,000 --> 01:22:09,000
不像有些空格可以压缩

2978
01:22:09,000 --> 01:22:13,000
就是什么叫做语异敏感的空格

2979
01:22:13,000 --> 01:22:13,000
对

2980
01:22:13,000 --> 01:22:16,000
这个其实也挺不和谐

2981
01:22:16,000 --> 01:22:18,000
哈哈

2982
01:22:18,000 --> 01:22:21,000
但是你看它其实这种历史背景的原因

2983
01:22:21,000 --> 01:22:22,000
在过去没有运算

2984
01:22:22,000 --> 01:22:25,000
所以我用这个下下线用这个

2985
01:22:25,000 --> 01:22:26,000
叫做不叫简号

2986
01:22:26,000 --> 01:22:27,000
叫做这个横线

2987
01:22:27,000 --> 01:22:29,000
其实没有什么区别

2988
01:22:29,000 --> 01:22:29,000
对不对

2989
01:22:29,000 --> 01:22:30,000
但是后来发现

2990
01:22:30,000 --> 01:22:30,000
哎

2991
01:22:30,000 --> 01:22:31,000
我现在要运算了

2992
01:22:31,000 --> 01:22:32,000
怎么办

2993
01:22:32,000 --> 01:22:33,000
对

2994
01:22:33,000 --> 01:22:36,000
这其实一切都是都是一个路径依赖的功能

2995
01:22:36,000 --> 01:22:38,000
假如当初键盘设计的时候

2996
01:22:38,000 --> 01:22:40,000
能明确区分连字符和简号

2997
01:22:40,000 --> 01:22:42,000
现在可能也就没有这个问题了

2998
01:22:42,000 --> 01:22:44,000
所以我觉得也区分不了

2999
01:22:44,000 --> 01:22:44,000
这个很难

3000
01:22:44,000 --> 01:22:46,000
对于人来说

3001
01:22:46,000 --> 01:22:49,000
在我们人类在非常自然的情况下

3002
01:22:49,000 --> 01:22:51,000
是不会去考虑一个符号的语异

3003
01:22:51,000 --> 01:22:53,000
你跟这个符号表现是可以分开的

3004
01:22:53,000 --> 01:22:54,000
这个问题

3005
01:22:54,000 --> 01:22:55,000
就我们看了不精确的物种

3006
01:22:55,000 --> 01:22:56,000
对

3007
01:22:56,000 --> 01:22:57,000
我们看到一个短横

3008
01:22:57,000 --> 01:22:58,000
一定会根据上下文来判断

3009
01:22:58,000 --> 01:22:59,000
它到底是个简号

3010
01:22:59,000 --> 01:23:00,000
还是一个 hyphen 的

3011
01:23:00,000 --> 01:23:01,000
对吧

3012
01:23:01,000 --> 01:23:03,000
但是计算机没有这个功能

3013
01:23:03,000 --> 01:23:04,000
那其实这个是阿拉伯人的问题

3014
01:23:04,000 --> 01:23:04,000
对不对

3015
01:23:04,000 --> 01:23:07,000
为什么用短横来表示简

3016
01:23:07,000 --> 01:23:08,000
哈哈

3017
01:23:08,000 --> 01:23:10,000
你用一个更加特殊的符号来表示简

3018
01:23:10,000 --> 01:23:11,000
不就更好吧

3019
01:23:11,000 --> 01:23:13,000
这是阿拉伯人发明的吗

3020
01:23:13,000 --> 01:23:14,000
是吧

3021
01:23:14,000 --> 01:23:14,000
喂

3022
01:23:14,000 --> 01:23:16,000
那我们现在加点成出这个四个符号

3023
01:23:16,000 --> 01:23:18,000
什么是开始确定这个标志

3024
01:23:18,000 --> 01:23:20,000
就乘号至少是非常不同意的

3025
01:23:20,000 --> 01:23:23,000
历史上成号有很多种表示方法

3026
01:23:23,000 --> 01:23:26,000
成号我们只会在那个地方

3027
01:23:26,000 --> 01:23:27,000
就只会在成法里面

3028
01:23:27,000 --> 01:23:28,000
日常的这个

3029
01:23:28,000 --> 01:23:29,000
这个叫什么

3030
01:23:29,000 --> 01:23:30,000
日常排版里面并不会用上

3031
01:23:30,000 --> 01:23:31,000
我只是抛出一个想法

3032
01:23:31,000 --> 01:23:33,000
因为中国古代也不是用简号的

3033
01:23:33,000 --> 01:23:34,000
对吧

3034
01:23:34,000 --> 01:23:35,000
中国国家简号是啥

3035
01:23:38,000 --> 01:23:39,000
所有人都卡了

3036
01:23:39,000 --> 01:23:41,000
对自己国家有的话这么不了解

3037
01:23:41,000 --> 01:23:42,000
你看看你们

3038
01:23:42,000 --> 01:23:43,000
九章算数

3039
01:23:43,000 --> 01:23:44,000
对不对

3040
01:23:44,000 --> 01:23:46,000
哈哈

3041
01:23:46,000 --> 01:23:48,000
现在阿拉伯人其实不用阿拉伯数字

3042
01:23:48,000 --> 01:23:48,000
阿拉伯数字

3043
01:23:48,000 --> 01:23:51,000
实际上是西方对印度数字一套

3044
01:23:51,000 --> 01:23:51,000
一套

3045
01:23:51,000 --> 01:23:52,000
对啊

3046
01:23:52,000 --> 01:23:53,000
称呼

3047
01:23:53,000 --> 01:23:55,000
所以我怀疑阿拉伯人其实也不是用简号

3048
01:23:55,000 --> 01:23:57,000
所以你不能把锅栽到阿拉伯人头上

3049
01:23:57,000 --> 01:23:59,000
阿拉伯兄弟们已经背了太多锅了

3050
01:23:59,000 --> 01:23:59,000
好的

3051
01:23:59,000 --> 01:24:02,000
那就是 whoever 发明这套多了的时候

3052
01:24:02,000 --> 01:24:03,000
他就没想过

3053
01:24:03,000 --> 01:24:03,000
这个

3054
01:24:03,000 --> 01:24:04,000
不

3055
01:24:04,000 --> 01:24:05,000
你也请你这么想

3056
01:24:05,000 --> 01:24:07,000
加点成除那四个符号里面

3057
01:24:07,000 --> 01:24:08,000
除了加和成

3058
01:24:08,000 --> 01:24:09,000
像两个都是有奇异的问题的

3059
01:24:09,000 --> 01:24:10,000
除

3060
01:24:10,000 --> 01:24:11,000
除如果你是用那个除的还好

3061
01:24:11,000 --> 01:24:13,000
就是说这鞋杠除也是有这个问题的

3062
01:24:13,000 --> 01:24:15,000
那就是还是简号的问题比较多

3063
01:24:15,000 --> 01:24:16,000
对吧

3064
01:24:16,000 --> 01:24:17,000
反过来说

3065
01:24:17,000 --> 01:24:18,000
现在英语键盘上

3066
01:24:18,000 --> 01:24:19,000
就是

3067
01:24:19,000 --> 01:24:19,000
我

3068
01:24:19,000 --> 01:24:20,000
有时候觉得挺不可思议的

3069
01:24:20,000 --> 01:24:23,000
打字机键盘上居然没有成号这个符号

3070
01:24:23,000 --> 01:24:25,000
就当初发明打字机的人

3071
01:24:25,000 --> 01:24:29,000
会认为 x 和牛 x 来替代成号就好了

3072
01:24:29,000 --> 01:24:30,000
就是真的路径依赖

3073
01:24:30,000 --> 01:24:31,000
导致了很多东西

3074
01:24:31,000 --> 01:24:33,000
那你要说一个键盘的话

3075
01:24:33,000 --> 01:24:36,000
当年的键盘连那个小写字母 O 和数字 0

3076
01:24:36,000 --> 01:24:38,000
都可以会用一个键位

3077
01:24:38,000 --> 01:24:38,000
对

3078
01:24:38,000 --> 01:24:39,000
那个可以理解吗

3079
01:24:39,000 --> 01:24:41,000
因为造个打字机

3080
01:24:41,000 --> 01:24:42,000
那个机械这个那么复杂

3081
01:24:42,000 --> 01:24:43,000
能少一个还是能省

3082
01:24:43,000 --> 01:24:44,000
能少一个是咋现在

3083
01:24:44,000 --> 01:24:46,000
在机械打字机的时候还可以

3084
01:24:46,000 --> 01:24:47,000
符号跟 x 的话那不一样

3085
01:24:47,000 --> 01:24:50,000
赋予这个字符以一个固定的语异

3086
01:24:50,000 --> 01:24:54,000
其实我觉得是很计算机时代的一个事情

3087
01:24:54,000 --> 01:24:54,000
因为

3088
01:24:54,000 --> 01:24:54,000
这是晚禁

3089
01:24:54,000 --> 01:24:57,000
有机器才需要实业这些事情

3090
01:24:57,000 --> 01:25:03,000
人是一个通过语境和上下文来判断符号意义的动物

3091
01:25:03,000 --> 01:25:05,000
它不是要背下来这个符号

3092
01:25:05,000 --> 01:25:06,000
或者说

3093
01:25:06,000 --> 01:25:11,000
它根本就不可能知道一个符号在抽象的一种数据结构里面是一个什么东西

3094
01:25:11,000 --> 01:25:12,000
它只是看到它

3095
01:25:12,000 --> 01:25:13,000
它才知道

3096
01:25:13,000 --> 01:25:14,000
这该死的神经网络对吧

3097
01:25:15,000 --> 01:25:16,000
好了我们不讲这个东西了

3098
01:25:16,000 --> 01:25:18,000
我们以后接着回来讲我们空格的识词

3099
01:25:18,000 --> 01:25:19,000
另外常见的一个命名

3100
01:25:19,000 --> 01:25:25,000
就是我们各种网站的 UL 的 UL 是明天是不能有空格的

3101
01:25:25,000 --> 01:25:26,000
我想讲

3102
01:25:26,000 --> 01:25:26,000
对

3103
01:25:26,000 --> 01:25:30,000
UL 的 UL 命名空格会被编码掉

3104
01:25:30,000 --> 01:25:31,000
被转移掉

3105
01:25:31,000 --> 01:25:31,000
对

3106
01:25:31,000 --> 01:25:32,000
变成是多少

3107
01:25:32,000 --> 01:25:32,000
20%

3108
01:25:32,000 --> 01:25:34,000
20%

3109
01:25:34,000 --> 01:25:34,000
对

3110
01:25:34,000 --> 01:25:38,000
然后就是我们常见的所谓用户名

3111
01:25:38,000 --> 01:25:38,000
对吧

3112
01:25:38,000 --> 01:25:41,000
这个其实我们或者比如你推特的我们叫 Handle 对吧

3113
01:25:42,000 --> 01:25:43,000
邮件的邮箱的

3114
01:25:43,000 --> 01:25:44,000
这个就是

3115
01:25:44,000 --> 01:25:47,000
FOR 前面那部分也是不能有空格的

3116
01:25:47,000 --> 01:25:48,000
通常是这样子

3117
01:25:48,000 --> 01:25:49,000
为什么

3118
01:25:49,000 --> 01:25:50,000
因为你看他说那个问题

3119
01:25:50,000 --> 01:25:55,000
你什么时候才能确定它是不是一个完整的词

3120
01:25:55,000 --> 01:25:56,000
对吧

3121
01:25:56,000 --> 01:25:57,000
跟刚才的 identifier 其实是一样的

3122
01:25:57,000 --> 01:25:59,000
这两个其实它本质上都是一个 identifier

3123
01:25:59,000 --> 01:26:00,000
对不对

3124
01:26:00,000 --> 01:26:00,000
标识符

3125
01:26:01,000 --> 01:26:04,000
那么可能显然也是不能有空格的

3126
01:26:04,000 --> 01:26:05,000
那就是你得想说

3127
01:26:05,000 --> 01:26:07,000
那就可以用下号线

3128
01:26:07,000 --> 01:26:09,000
基本上下号线都是可以用的

3129
01:26:09,000 --> 01:26:09,000
对吧

3130
01:26:09,000 --> 01:26:11,000
但就是说那个就是横线或者是减号

3131
01:26:11,000 --> 01:26:13,000
或者你叫联资服务也好

3132
01:26:13,000 --> 01:26:14,000
这个能不能用

3133
01:26:14,000 --> 01:26:15,000
其实就取决于各个系统了

3134
01:26:18,000 --> 01:26:21,000
这个段词总是一个很纠结的事情

3135
01:26:21,000 --> 01:26:24,000
因为西方他们必须要用个空格段词

3136
01:26:24,000 --> 01:26:26,000
然后遇到不能用空格的时候

3137
01:26:26,000 --> 01:26:27,000
他们就老纠结了

3138
01:26:27,000 --> 01:26:29,000
可以想办法可能解决方案吗

3139
01:26:30,000 --> 01:26:34,000
因为现在那个推特的那个用那个 hashtag 嘛

3140
01:26:34,000 --> 01:26:35,000
那个标签

3141
01:26:35,000 --> 01:26:37,000
那个也是好烦的

3142
01:26:37,000 --> 01:26:41,000
现在他们那个 API 有时候认那个标签的话

3143
01:26:41,000 --> 01:26:49,000
也是得手工加空格才会认单这一个标签

3144
01:26:49,000 --> 01:26:52,000
因为他不然你不知道你你端到哪个地方

3145
01:26:52,000 --> 01:26:53,000
他不知道呀

3146
01:26:53,000 --> 01:26:54,000
对呀

3147
01:26:54,000 --> 01:26:56,000
他现在有一些优化吧

3148
01:26:56,000 --> 01:27:00,000
就如果你输入一些很明显是标点符号的

3149
01:27:00,000 --> 01:27:01,000
或者是特殊符号的字符

3150
01:27:01,000 --> 01:27:02,000
他会给你断开

3151
01:27:02,000 --> 01:27:04,000
至少我知道汉语的那些标点

3152
01:27:04,000 --> 01:27:05,000
他都会给你断开

3153
01:27:06,000 --> 01:27:07,000
你说到这个

3154
01:27:07,000 --> 01:27:10,000
我想起来推特的那个 hashtag 好像不支持 high 分

3155
01:27:10,000 --> 01:27:12,000
就是你的 tag 里面不能有 high 分

3156
01:27:12,000 --> 01:27:13,000
没有

3157
01:27:13,000 --> 01:27:14,000
他跟那个呀

3158
01:27:14,000 --> 01:27:15,000
他跟用户名是一样的

3159
01:27:15,000 --> 01:27:17,000
所以推特用户名也不能有 high 分

3160
01:27:17,000 --> 01:27:18,000
你只能用下滑线

3161
01:27:20,000 --> 01:27:23,000
所以他本质上你说你回到刚才那个问题

3162
01:27:23,000 --> 01:27:27,000
就是说这个 hashtag 这个 tag 本身是个什么东西

3163
01:27:27,000 --> 01:27:28,000
他就是 gettenify

3164
01:27:28,000 --> 01:27:29,000
如果说他是 gettenify

3165
01:27:29,000 --> 01:27:30,000
你想到在编程里面

3166
01:27:30,000 --> 01:27:31,000
你什么时候

3167
01:27:31,000 --> 01:27:34,000
你是不是觉得那地方都不能用这个简号

3168
01:27:34,000 --> 01:27:34,000
对不对

3169
01:27:34,000 --> 01:27:35,000
那其实也是一个道理

3170
01:27:38,000 --> 01:27:40,000
到时候中文预计下面

3171
01:27:40,000 --> 01:27:42,000
这不是问题就比较奇怪了

3172
01:27:42,000 --> 01:27:43,000
你说微博他是用两个

3173
01:27:43,000 --> 01:27:45,000
他其实把那个

3174
01:27:45,000 --> 01:27:47,000
那个这个这个警号件当成引号来用

3175
01:27:47,000 --> 01:27:47,000
对不对

3176
01:27:47,000 --> 01:27:49,000
就是两个圈起来的才是

3177
01:27:49,000 --> 01:27:51,000
因为中文不分词嘛

3178
01:27:51,000 --> 01:27:52,000
你不加一个后面

3179
01:27:52,000 --> 01:27:55,000
不知道这个刹到什么地方结束

3180
01:27:55,000 --> 01:27:56,000
对问题就来了

3181
01:27:56,000 --> 01:27:59,000
就是那我是警号

3182
01:27:59,000 --> 01:27:59,000
标签

3183
01:27:59,000 --> 01:28:00,000
警号标签

3184
01:28:00,000 --> 01:28:01,000
警号

3185
01:28:01,000 --> 01:28:02,000
这个时候算啥

3186
01:28:02,000 --> 01:28:04,000
你说配对问题是吗

3187
01:28:04,000 --> 01:28:06,000
对 配对问题就是有这个问题了

3188
01:28:06,000 --> 01:28:07,000
就是另外一个

3189
01:28:07,000 --> 01:28:08,000
还有欠套问题是吗

3190
01:28:08,000 --> 01:28:10,000
对

3191
01:28:10,000 --> 01:28:12,000
因为引号其实也是一个非常肯定的事情

3192
01:28:12,000 --> 01:28:15,000
正常说我们引号是有开引号

3193
01:28:15,000 --> 01:28:16,000
关引号的区别的

3194
01:28:16,000 --> 01:28:17,000
对

3195
01:28:17,000 --> 01:28:17,000
对了

3196
01:28:17,000 --> 01:28:19,000
为了打字机

3197
01:28:19,000 --> 01:28:21,000
我们为了审那个见谓

3198
01:28:21,000 --> 01:28:23,000
我又和爱我一直搞一个了

3199
01:28:23,000 --> 01:28:24,000
对不对

3200
01:28:24,000 --> 01:28:25,000
对啊

3201
01:28:25,000 --> 01:28:26,000
所以我们做字体排印的

3202
01:28:26,000 --> 01:28:27,000
就生物痛绝的

3203
01:28:27,000 --> 01:28:29,000
千万不要用啥关引号

3204
01:28:29,000 --> 01:28:31,000
结果都是打字机惹的祸

3205
01:28:31,000 --> 01:28:32,000
对呀

3206
01:28:32,000 --> 01:28:34,000
就是为了也不叫他打字机惹的祸

3207
01:28:34,000 --> 01:28:36,000
叫做为了省钱

3208
01:28:36,000 --> 01:28:36,000
导致

3209
01:28:36,000 --> 01:28:38,000
都是没钱

3210
01:28:39,000 --> 01:28:40,000
所以微博

3211
01:28:40,000 --> 01:28:41,000
那个双警号

3212
01:28:41,000 --> 01:28:43,000
他就是你把它想成

3213
01:28:43,000 --> 01:28:44,000
引号的用法来用就行了

3214
01:28:44,000 --> 01:28:45,000
或者想想成是

3215
01:28:45,000 --> 01:28:46,000
数名号都不算

3216
01:28:46,000 --> 01:28:47,000
数名号是两个是不一样的

3217
01:28:47,000 --> 01:28:50,000
就引号的这种方式来用就可以了

3218
01:28:50,000 --> 01:28:51,000
所以其实我觉得

3219
01:28:51,000 --> 01:28:53,000
以后要发明什么新的方式的

3220
01:28:53,000 --> 01:28:55,000
这种 quoting 的方式的时候

3221
01:28:55,000 --> 01:28:55,000
一定要配对

3222
01:28:56,000 --> 01:28:58,000
不要用引号来引

3223
01:28:58,000 --> 01:29:00,000
你就用数名号好了

3224
01:29:00,000 --> 01:29:00,000
对吧

3225
01:29:00,000 --> 01:29:03,000
或者用方块号来引号

3226
01:29:03,000 --> 01:29:04,000
对吧

3227
01:29:04,000 --> 01:29:04,000
各种括弧

3228
01:29:04,000 --> 01:29:05,000
基本上括弧

3229
01:29:05,000 --> 01:29:08,000
都是肯定是有开关两个的

3230
01:29:10,000 --> 01:29:12,000
然后还得让他自动配对

3231
01:29:12,000 --> 01:29:14,000
然后还允许签套是吧

3232
01:29:15,000 --> 01:29:16,000
大括弧小括弧中括弧

3233
01:29:16,000 --> 01:29:17,000
对

3234
01:29:17,000 --> 01:29:19,000
这样发现你在写 Lisp

3235
01:29:19,000 --> 01:29:22,000
所以就不用去数

3236
01:29:22,000 --> 01:29:24,000
缩字引括的怎么样是吧

3237
01:29:24,000 --> 01:29:24,000
对

3238
01:29:24,000 --> 01:29:26,000
完全秒是缩进

3239
01:29:26,000 --> 01:29:27,000
缩进本来就很反人了

3240
01:29:28,000 --> 01:29:30,000
就是说你凭什么

3241
01:29:30,000 --> 01:29:32,000
你凭什么判断这一行前面有 10 个空格

3242
01:29:32,000 --> 01:29:32,000
对

3243
01:29:32,000 --> 01:29:34,000
你凭什么要求我写程序

3244
01:29:34,000 --> 01:29:36,000
还要带着一把 U 11 卡吃

3245
01:29:40,000 --> 01:29:41,000
就是一张拍粉梗

3246
01:29:42,000 --> 01:29:45,000
我们把这个连接放在选择刺里面

3247
01:29:47,000 --> 01:29:48,000
吓死我了

3248
01:29:48,000 --> 01:29:52,000
不过现在 Camel Case 就把这个词越练越长

3249
01:29:52,000 --> 01:29:55,000
现在特别是什么 Object C

3250
01:29:55,000 --> 01:29:57,000
他们有的啰啰嗦嗦的语言

3251
01:29:57,000 --> 01:30:00,000
哇 名字超长的 API 的名字

3252
01:30:00,000 --> 01:30:01,000
那简直了

3253
01:30:01,000 --> 01:30:02,000
我之前是不知道

3254
01:30:02,000 --> 01:30:03,000
比如说我们现在很多

3255
01:30:03,000 --> 01:30:05,000
你用的 iOS 的手机

3256
01:30:05,000 --> 01:30:07,000
现在可能开始变少

3257
01:30:07,000 --> 01:30:11,000
就以前都是这个时候的 Object C 语言写的

3258
01:30:11,000 --> 01:30:13,000
然后那现在有 Swip 语言写

3259
01:30:13,000 --> 01:30:14,000
可能会好一些

3260
01:30:14,000 --> 01:30:17,000
Object C 的语言的命名规则真是太奇怪了

3261
01:30:17,000 --> 01:30:18,000
它就要把一个 API 的

3262
01:30:18,000 --> 01:30:20,000
那个全部写全

3263
01:30:20,000 --> 01:30:23,000
一个 API 的一个称数

3264
01:30:23,000 --> 01:30:26,000
就是五个单词写全

3265
01:30:26,000 --> 01:30:27,000
对 它的 Message signature

3266
01:30:27,000 --> 01:30:28,000
就是叫什么

3267
01:30:28,000 --> 01:30:31,000
方法签名是非常长的

3268
01:30:31,000 --> 01:30:32,000
您认为它就是一个函数名

3269
01:30:32,000 --> 01:30:33,000
你可以这么理解

3270
01:30:33,000 --> 01:30:33,000
对吧

3271
01:30:33,000 --> 01:30:34,000
对

3272
01:30:34,000 --> 01:30:35,000
函数名都是要写全

3273
01:30:35,000 --> 01:30:37,000
我们通常都是按我们过去 C 的

3274
01:30:37,000 --> 01:30:39,000
都是都写的非常简短的

3275
01:30:39,000 --> 01:30:42,000
C 它是可以把单词缩写

3276
01:30:42,000 --> 01:30:44,000
这一切都要归功于 small talk

3277
01:30:44,000 --> 01:30:46,000
small talk 就有这个套

3278
01:30:46,000 --> 01:30:48,000
就是一个参数有两个名字

3279
01:30:48,000 --> 01:30:50,000
一个是外调用者看到的名字

3280
01:30:50,000 --> 01:30:52,000
另外一个是参数内部看到的名字

3281
01:30:52,000 --> 01:30:54,000
这个其实我觉得非常合理的

3282
01:30:54,000 --> 01:30:56,000
就哪怕现在 swift

3283
01:30:56,000 --> 01:30:57,000
你看它还是继承了这一套

3284
01:30:57,000 --> 01:30:59,000
这东西还是蛮有用的

3285
01:30:59,000 --> 01:31:01,000
而且怎么说呢

3286
01:31:01,000 --> 01:31:03,000
我觉得 Mac

3287
01:31:03,000 --> 01:31:06,000
就是 Object C 和 Jar 一样

3288
01:31:06,000 --> 01:31:08,000
是一个重度依赖于 Idle E 的语言

3289
01:31:08,000 --> 01:31:10,000
你没有自动普拳的话

3290
01:31:10,000 --> 01:31:11,000
你哪来写这个

3291
01:31:11,000 --> 01:31:13,000
真的是非常自招苦试的一件事

3292
01:31:13,000 --> 01:31:14,000
但是如果你有自招

3293
01:31:14,000 --> 01:31:15,000
自动普拳的话

3294
01:31:15,000 --> 01:31:16,000
那文件名多长

3295
01:31:16,000 --> 01:31:16,000
就无所谓了

3296
01:31:16,000 --> 01:31:17,000
它想的是说

3297
01:31:17,000 --> 01:31:20,000
你可以直接读到这个参数

3298
01:31:20,000 --> 01:31:21,000
或者函数名的时候

3299
01:31:21,000 --> 01:31:23,000
你就从它名字就能一点看出来

3300
01:31:23,000 --> 01:31:24,000
函数是干啥

3301
01:31:24,000 --> 01:31:28,000
它会把这个东西的功能定义得非常清晰

3302
01:31:28,000 --> 01:31:28,000
对吧

3303
01:31:28,000 --> 01:31:31,000
但不像我们之前在上古时代

3304
01:31:31,000 --> 01:31:32,000
有那个时候写的

3305
01:31:32,000 --> 01:31:34,000
C 都写了非常短的文件名

3306
01:31:34,000 --> 01:31:35,000
函数名

3307
01:31:35,000 --> 01:31:36,000
比如说什么

3308
01:31:36,000 --> 01:31:37,000
从 terminal 取个字母

3309
01:31:37,000 --> 01:31:39,000
它是给人们 getCH 的

3310
01:31:39,000 --> 01:31:40,000
它连 character

3311
01:31:40,000 --> 01:31:42,000
你说我们这张写的 character

3312
01:31:42,000 --> 01:31:43,000
你说 character

3313
01:31:43,000 --> 01:31:45,000
这个是几个单字母的

3314
01:31:45,000 --> 01:31:46,000
比较长

3315
01:31:46,000 --> 01:31:47,000
你知道写个 car

3316
01:31:47,000 --> 01:31:48,000
就 CHAR 对吧

3317
01:31:48,000 --> 01:31:49,000
它连黑牙都不要

3318
01:31:49,000 --> 01:31:50,000
它直接 getCH

3319
01:31:50,000 --> 01:31:51,000
对吧

3320
01:31:51,000 --> 01:31:52,000
你自己猜 CH

3321
01:31:52,000 --> 01:31:53,000
后面是个啥 对吧

3322
01:31:53,000 --> 01:31:54,000
对 这实际上也是一个

3323
01:31:54,000 --> 01:31:56,000
这实际上还是一个路径依赖的问题

3324
01:31:56,000 --> 01:31:59,000
就是你想大型机在六十年代那个时代

3325
01:31:59,000 --> 01:32:05,000
你每次连上主机去写程序的时候

3326
01:32:05,000 --> 01:32:07,000
你会希望自己的按的键

3327
01:32:07,000 --> 01:32:08,000
需要按的键越少越好

3328
01:32:08,000 --> 01:32:11,000
因为就像现在我有时候

3329
01:32:11,000 --> 01:32:12,000
所有人都 work from home

3330
01:32:12,000 --> 01:32:12,000
对吧

3331
01:32:12,000 --> 01:32:14,000
你有时候连公司的训讯机

3332
01:32:14,000 --> 01:32:15,000
还是会觉得

3333
01:32:15,000 --> 01:32:16,000
你打一个键

3334
01:32:16,000 --> 01:32:18,000
我们好像有记节目聊的问题

3335
01:32:18,000 --> 01:32:20,000
就是你按一个键之后多久之内

3336
01:32:20,000 --> 01:32:22,000
得不到延迟

3337
01:32:22,000 --> 01:32:23,000
你个人就会非常焦躁

3338
01:32:23,000 --> 01:32:26,000
你会觉得整个思路被打断了

3339
01:32:26,000 --> 01:32:27,000
我现在就经常会会遇到这么种情况

3340
01:32:27,000 --> 01:32:29,000
我现在就希望说我靠这

3341
01:32:29,000 --> 01:32:30,000
打给你使用 MOSI

3342
01:32:30,000 --> 01:32:31,000
MOSI

3343
01:32:31,000 --> 01:32:32,000
对啊 有道理

3344
01:32:32,000 --> 01:32:35,000
但是我要连公司的训讯机

3345
01:32:35,000 --> 01:32:37,000
这个过程是没有办法用 MOS 来实现的

3346
01:32:37,000 --> 01:32:37,000
对

3347
01:32:37,000 --> 01:32:40,000
我要先连到公司的 Virtual Manageation

3348
01:32:40,000 --> 01:32:40,000
然后再从 Virtual Manageation

3349
01:32:40,000 --> 01:32:43,000
上 MOS 到公司内部的远程界面

3350
01:32:43,000 --> 01:32:45,000
那这个过程就没有什么延迟了

3351
01:32:45,000 --> 01:32:46,000
对吧

3352
01:32:46,000 --> 01:32:47,000
所以就是六十年代的时候

3353
01:32:47,000 --> 01:32:48,000
人们写程序

3354
01:32:48,000 --> 01:32:51,000
当然会希望说需要输入字母越少越好

3355
01:32:51,000 --> 01:32:53,000
而且是那些很常用的底层的功能

3356
01:32:53,000 --> 01:32:55,000
它可能会被反复调用

3357
01:32:55,000 --> 01:32:56,000
然后它刚才你说

3358
01:32:56,000 --> 01:32:56,000
那个 Stop Small Talk

3359
01:32:56,000 --> 01:32:59,000
它有内外区别力的机制

3360
01:32:59,000 --> 01:33:00,000
但其实在 C 里面

3361
01:33:00,000 --> 01:33:01,000
应该是之前是没有的

3362
01:33:01,000 --> 01:33:02,000
对吧

3363
01:33:02,000 --> 01:33:02,000
对

3364
01:33:02,000 --> 01:33:04,000
它就是你要会反复调用

3365
01:33:04,000 --> 01:33:05,000
如果你的文件

3366
01:33:05,000 --> 01:33:06,000
那个韩束铭太长的话

3367
01:33:06,000 --> 01:33:10,000
其实会反复浪费掉很多字节去存储

3368
01:33:10,000 --> 01:33:11,000
这个调用到 NTRIPO

3369
01:33:11,000 --> 01:33:12,000
应该在哪里

3370
01:33:12,000 --> 01:33:13,000
对

3371
01:33:13,000 --> 01:33:16,000
而到了 OBJF-C 或者是 Java 的时代

3372
01:33:16,000 --> 01:33:18,000
那基本上所有的人都在本地口户里

3373
01:33:18,000 --> 01:33:19,000
都是

3374
01:33:19,000 --> 01:33:20,000
不会省到一个字节

3375
01:33:20,000 --> 01:33:21,000
后科无端

3376
01:33:21,000 --> 01:33:23,000
因为响应都是在本地的

3377
01:33:23,000 --> 01:33:25,000
所以你就不会说

3378
01:33:25,000 --> 01:33:27,000
需要把名字弄短需求

3379
01:33:27,000 --> 01:33:28,000
对吧

3380
01:33:28,000 --> 01:33:31,000
只有奇葩的 PHP 是

3381
01:33:31,000 --> 01:33:33,000
是个

3382
01:33:33,000 --> 01:33:34,000
实际上最好都语言

3383
01:33:34,000 --> 01:33:35,000
你说什么

3384
01:33:35,000 --> 01:33:40,000
只有奇葩的 PHP 是用这个韩束铭的长度作为一个 Hash

3385
01:33:42,000 --> 01:33:43,000
你能想象吗

3386
01:33:43,000 --> 01:33:45,000
这是一个让人匪夷所思的决定

3387
01:33:45,000 --> 01:33:47,000
所以 PHP 的韩束铭有长有短

3388
01:33:48,000 --> 01:33:50,000
是故意有长有短的

3389
01:33:52,000 --> 01:33:53,000
但是说回来

3390
01:33:53,000 --> 01:33:57,000
但是 OBJF-C 的韩束铭

3391
01:33:57,000 --> 01:33:59,000
真的是过于长了

3392
01:33:59,000 --> 01:34:02,000
即便是在现在的目光的观点来看

3393
01:34:02,000 --> 01:34:02,000
还是过于长

3394
01:34:02,000 --> 01:34:04,000
我觉得对于写 Java 的人来说

3395
01:34:04,000 --> 01:34:05,000
真的不算什么

3396
01:34:06,000 --> 01:34:06,000
很啰嗦

3397
01:34:07,000 --> 01:34:09,000
Java 里面也有很啰嗦的长数名

3398
01:34:09,000 --> 01:34:10,000
不要太多

3399
01:34:10,000 --> 01:34:12,000
至少 Java 的那些有些参数

3400
01:34:12,000 --> 01:34:14,000
你每个参数都要写参数名

3401
01:34:14,000 --> 01:34:15,000
不用吧

3402
01:34:16,000 --> 01:34:16,000
不用

3403
01:34:16,000 --> 01:34:16,000
那倒不用

3404
01:34:17,000 --> 01:34:17,000
那 OBJF-C 要写的

3405
01:34:18,000 --> 01:34:19,000
对吧

3406
01:34:19,000 --> 01:34:19,000
OBJF-C

3407
01:34:19,000 --> 01:34:21,000
它每个 method

3408
01:34:21,000 --> 01:34:23,000
它还会把用那个帽号连起来

3409
01:34:24,000 --> 01:34:25,000
它后面带了一个参数

3410
01:34:26,000 --> 01:34:28,000
然后创的超长

3411
01:34:28,000 --> 01:34:30,000
那个是韩束签名的一部分

3412
01:34:30,000 --> 01:34:31,000
这个是可以理解的

3413
01:34:31,000 --> 01:34:33,000
就好像 C 语言的韩束签名

3414
01:34:33,000 --> 01:34:36,000
其实也要把韩束的类型带上

3415
01:34:36,000 --> 01:34:39,000
只不过不像 OBJF-C 写得非常显示

3416
01:34:39,000 --> 01:34:41,000
就是你必须显示的告诉对方

3417
01:34:41,000 --> 01:34:43,000
我要调用的方法里面

3418
01:34:43,000 --> 01:34:44,000
参数叫这个名字

3419
01:34:44,000 --> 01:34:46,000
但是在有些韩束里面

3420
01:34:46,000 --> 01:34:48,000
比如 Java 的韩束签名

3421
01:34:48,000 --> 01:34:49,000
实际上也是包含类型的

3422
01:34:49,000 --> 01:34:52,000
你必须写出类型来

3423
01:34:52,000 --> 01:34:54,000
而 OBJF-C 是不用写出类型来的

3424
01:34:54,000 --> 01:34:55,000
但是它要写出别名来

3425
01:34:56,000 --> 01:34:57,000
OK

3426
01:34:57,000 --> 01:34:59,000
那至少我们可以讨论另外一件事情

3427
01:34:59,000 --> 01:35:00,000
假设你还是我们说

3428
01:35:00,000 --> 01:35:03,000
认可还是要把写的进行可能清晰

3429
01:35:03,000 --> 01:35:03,000
为准

3430
01:35:03,000 --> 01:35:04,000
但有个限度

3431
01:35:04,000 --> 01:35:05,000
这个限度在哪里的问题

3432
01:35:05,000 --> 01:35:08,000
比如说我们修诺自己先给的例子

3433
01:35:08,000 --> 01:35:10,000
这个是一个苹果的一个 API

3434
01:35:10,000 --> 01:35:12,000
是 AppKit 的什么

3435
01:35:12,000 --> 01:35:14,000
NSATSTypeCenter

3436
01:35:14,000 --> 01:35:15,000
里面有一个

3437
01:35:17,000 --> 01:35:19,000
我要念一下这个韩束的

3438
01:35:19,000 --> 01:35:20,000
先升系一口气

3439
01:35:20,000 --> 01:35:22,000
请升系一口气

3440
01:35:22,000 --> 01:35:24,000
你们请听好了

3441
01:35:24,000 --> 01:35:30,000
should break line by hyphenate before character index

3442
01:35:30,000 --> 01:35:32,000
hyphenating

3443
01:35:32,000 --> 01:35:33,000
你要加 img

3444
01:35:33,000 --> 01:35:34,000
对 hyphenating

3445
01:35:34,000 --> 01:35:35,000
对

3446
01:35:35,000 --> 01:35:35,000
对

3447
01:35:35,000 --> 01:35:36,000
我先测量一下

3448
01:35:36,000 --> 01:35:38,000
这个一共有

3449
01:35:38,000 --> 01:35:39,000
套出你的

3450
01:35:39,000 --> 01:35:40,000
作为一个拍摄程序员

3451
01:35:40,000 --> 01:35:42,000
套出你的油标卡尺来

3452
01:35:42,000 --> 01:35:43,000
50 个字

3453
01:35:43,000 --> 01:35:44,000
OK

3454
01:35:44,000 --> 01:35:44,000
假设

3455
01:35:44,000 --> 01:35:45,000
当然肯定

3456
01:35:45,000 --> 01:35:46,000
当然无套也说了

3457
01:35:46,000 --> 01:35:47,000
因为都是图形界面

3458
01:35:47,000 --> 01:35:47,000
不存在这个问题

3459
01:35:47,000 --> 01:35:50,000
假设你在存字符界面

3460
01:35:50,000 --> 01:35:52,000
你是一个 80 x 25 行宽的

3461
01:35:52,000 --> 01:35:56,000
这么一个编辑器的窗口里面

3462
01:35:56,000 --> 01:35:58,000
这 50 个字就已经干掉一整行了

3463
01:35:58,000 --> 01:35:58,000
对吧

3464
01:35:58,000 --> 01:35:59,000
你还不用干别的

3465
01:35:59,000 --> 01:36:00,000
对

3466
01:36:00,000 --> 01:36:02,000
这还不是口口最长的 API

3467
01:36:02,000 --> 01:36:04,000
should note 里面带来看 API 名

3468
01:36:04,000 --> 01:36:05,000
最长选手权的吗

3469
01:36:05,000 --> 01:36:06,000
你们打开那一页看看

3470
01:36:06,000 --> 01:36:07,000
对

3471
01:36:07,000 --> 01:36:09,000
你打开那个看到我

3472
01:36:09,000 --> 01:36:11,000
你会发现最长是 javawindows.net

3473
01:36:11,000 --> 01:36:12,000
对

3474
01:36:12,000 --> 01:36:14,000
还是 downnet 比较

3475
01:36:14,000 --> 01:36:14,000
没有

3476
01:36:14,000 --> 01:36:15,000
最关键是什么呢

3477
01:36:15,000 --> 01:36:17,000
像 coco

3478
01:36:17,000 --> 01:36:18,000
像 objects

3479
01:36:18,000 --> 01:36:19,000
它 loser

3480
01:36:19,000 --> 01:36:19,000
就 loser

3481
01:36:19,000 --> 01:36:20,000
也就算了

3482
01:36:20,000 --> 01:36:21,000
但是因为它 loser

3483
01:36:21,000 --> 01:36:23,000
它是因为它不缩写词

3484
01:36:23,000 --> 01:36:25,000
然后它很有语意

3485
01:36:25,000 --> 01:36:27,000
所以读起来还算是 OK 的

3486
01:36:27,000 --> 01:36:28,000
你不像 downnet

3487
01:36:28,000 --> 01:36:31,000
它即使写那么长了

3488
01:36:31,000 --> 01:36:33,000
它看不懂它什么意思

3489
01:36:33,000 --> 01:36:33,000
还带缩写

3490
01:36:33,000 --> 01:36:34,000
它带了缩写

3491
01:36:34,000 --> 01:36:35,000
还看不懂什么

3492
01:36:35,000 --> 01:36:36,000
而且还很 loser

3493
01:36:36,000 --> 01:36:37,000
你看那个

3494
01:36:37,000 --> 01:36:38,000
就比如说这个例子

3495
01:36:38,000 --> 01:36:40,000
那个 103 个字母

3496
01:36:40,000 --> 01:36:41,000
那个什么鬼

3497
01:36:41,000 --> 01:36:42,000
那个

3498
01:36:42,000 --> 01:36:44,000
我觉得 coco 的 API

3499
01:36:44,000 --> 01:36:45,000
还有一点很有意思

3500
01:36:45,000 --> 01:36:46,000
就是

3501
01:36:46,000 --> 01:36:47,000
或者说导致了

3502
01:36:47,000 --> 01:36:48,000
间接导致了

3503
01:36:48,000 --> 01:36:50,000
它名字比较长的一点

3504
01:36:50,000 --> 01:36:54,000
就是它会用什么 shoot.did

3505
01:36:54,000 --> 01:36:56,000
来表示 before and after

3506
01:36:56,000 --> 01:36:57,000
就在别的 API 里面

3507
01:36:57,000 --> 01:36:59,000
比如说什么

3508
01:36:59,000 --> 01:37:02,000
窗口 load 的这一点是

3509
01:37:02,000 --> 01:37:04,000
别的 API 会叫做 before windows load

3510
01:37:04,000 --> 01:37:07,000
或者是 after windows load

3511
01:37:07,000 --> 01:37:08,000
然后在 coco 这里

3512
01:37:08,000 --> 01:37:11,000
叫做 windows should be loaded

3513
01:37:11,000 --> 01:37:13,000
或者是 windows did load

3514
01:37:13,000 --> 01:37:15,000
这个还蛮有意思的

3515
01:37:15,000 --> 01:37:17,000
算是 coco 还一套

3516
01:37:17,000 --> 01:37:19,000
就哪怕现在 swift 也是这样的

3517
01:37:19,000 --> 01:37:20,000
但我我有时候在想

3518
01:37:20,000 --> 01:37:22,000
这个是不是跟另外当时

3519
01:37:22,000 --> 01:37:25,000
他们诞生那个背景有一个思潮有关系

3520
01:37:25,000 --> 01:37:26,000
就是你们还记得那个叫

3521
01:37:26,000 --> 01:37:29,000
Applescript 那个语言

3522
01:37:29,000 --> 01:37:31,000
就是它的那个语言

3523
01:37:31,000 --> 01:37:34,000
就是像自然语言

3524
01:37:34,000 --> 01:37:35,000
对

3525
01:37:35,000 --> 01:37:37,000
所谓自然语言描述这个东西

3526
01:37:37,000 --> 01:37:38,000
那么它就会什么描述呢

3527
01:37:38,000 --> 01:37:40,000
就说就全部都是用这个

3528
01:37:40,000 --> 01:37:42,000
我们现在都是用什么符号来表达

3529
01:37:42,000 --> 01:37:43,000
一些特殊的语义的地方

3530
01:37:43,000 --> 01:37:46,000
它都尽可能用英文来表述

3531
01:37:46,000 --> 01:37:47,000
趁是年

3532
01:37:47,000 --> 01:37:48,000
比如说第一参数

3533
01:37:48,000 --> 01:37:49,000
第一函数

3534
01:37:49,000 --> 01:37:50,000
这些都是用这么方式来做

3535
01:37:50,000 --> 01:37:52,000
它其实可能跟那个时候的那种思潮

3536
01:37:52,000 --> 01:37:53,000
有一定的关系

3537
01:37:53,000 --> 01:37:55,000
但是你说 shoot 和 did

3538
01:37:55,000 --> 01:37:58,000
会比 before and after 更贴近人的时候

3539
01:37:58,000 --> 01:37:58,000
习惯吗

3540
01:37:58,000 --> 01:37:59,000
我觉得不见得了

3541
01:37:59,000 --> 01:38:00,000
不

3542
01:38:00,000 --> 01:38:02,000
before after 跟 should

3543
01:38:02,000 --> 01:38:03,000
这个肯定是语义上是不一样的

3544
01:38:03,000 --> 01:38:04,000
这个是个判断

3545
01:38:04,000 --> 01:38:04,000
对不对

3546
01:38:04,000 --> 01:38:05,000
他说 should 就是说

3547
01:38:05,000 --> 01:38:07,000
你会得到一个是还是不是

3548
01:38:07,000 --> 01:38:08,000
但你 before or after

3549
01:38:08,000 --> 01:38:11,000
他得到的一个结果不是一个不理吗

3550
01:38:11,000 --> 01:38:13,000
就是要得出一个不耳直的

3551
01:38:13,000 --> 01:38:14,000
对吧

3552
01:38:14,000 --> 01:38:14,000
对

3553
01:38:14,000 --> 01:38:16,000
他其实是做一个逻辑判断

3554
01:38:16,000 --> 01:38:18,000
就是说你这个时候是得到的一个是是还是否

3555
01:38:18,000 --> 01:38:18,000
对吧

3556
01:38:18,000 --> 01:38:19,000
但是如果你是 before break

3557
01:38:19,000 --> 01:38:21,000
那你得到这个什么东西

3558
01:38:21,000 --> 01:38:21,000
你是看不出来的

3559
01:38:21,000 --> 01:38:22,000
问题是

3560
01:38:22,000 --> 01:38:24,000
我说的这个 API 是一个

3561
01:38:24,000 --> 01:38:26,000
比如说它是在写

3562
01:38:26,000 --> 01:38:27,000
你在写 GUI 的时候

3563
01:38:27,000 --> 01:38:28,000
你要写一个函数

3564
01:38:28,000 --> 01:38:31,000
这个函数应该在窗口被汇制之前调用

3565
01:38:32,000 --> 01:38:37,000
这个函数名在 OS 10 里面叫做 shoot present

3566
01:38:37,000 --> 01:38:37,000
比如说

3567
01:38:39,000 --> 01:38:41,000
但是在别的变数源

3568
01:38:41,000 --> 01:38:43,000
可能就叫 before drawing 之类的

3569
01:38:43,000 --> 01:38:45,000
可能就是语义的问题了

3570
01:38:45,000 --> 01:38:46,000
就是你怎么去定义这个东西

3571
01:38:46,000 --> 01:38:48,000
就是总体来讲

3572
01:38:48,000 --> 01:38:49,000
它还是想维持一个就是所有的

3573
01:38:49,000 --> 01:38:52,000
真正意义上的可读性

3574
01:38:52,000 --> 01:38:52,000
可读什么意思

3575
01:38:52,000 --> 01:38:54,000
就是你用嘴去念

3576
01:38:54,000 --> 01:38:54,000
那个东西

3577
01:38:54,000 --> 01:38:57,000
它还是得到的一些概念的

3578
01:38:57,000 --> 01:38:58,000
对

3579
01:38:59,000 --> 01:39:02,000
这个东西就是说不一定是适合

3580
01:39:02,000 --> 01:39:04,000
比如说假设你是一个非英语母语的人

3581
01:39:04,000 --> 01:39:06,000
比如说中国很多程序员就这样

3582
01:39:06,000 --> 01:39:07,000
为什么老说中国程序员做的

3583
01:39:08,000 --> 01:39:10,000
这个 API 比较奇怪

3584
01:39:10,000 --> 01:39:10,000
对吧

3585
01:39:10,000 --> 01:39:12,000
因为它鬼色难懂

3586
01:39:12,000 --> 01:39:12,000
对

3587
01:39:12,000 --> 01:39:12,000
它是难懂

3588
01:39:12,000 --> 01:39:13,000
它根本

3589
01:39:13,000 --> 01:39:14,000
它脑子里面

3590
01:39:14,000 --> 01:39:16,000
不是用那套英文逻辑来思考的

3591
01:39:16,000 --> 01:39:18,000
所以它你怎么可能要求它

3592
01:39:18,000 --> 01:39:22,000
得出一套 shoot the brick line by haphorinating before character

3593
01:39:22,000 --> 01:39:23,000
index 的这种语句的数量

3594
01:39:23,000 --> 01:39:24,000
它肯定不会这么做

3595
01:39:24,000 --> 01:39:25,000
对不对

3596
01:39:25,000 --> 01:39:27,000
所以我们只好写文言文了

3597
01:39:27,000 --> 01:39:28,000
不

3598
01:39:28,000 --> 01:39:30,000
中国程序员最大的特点不是用拼音缩写吗

3599
01:39:32,000 --> 01:39:34,000
包括很多政府网站都是

3600
01:39:34,000 --> 01:39:35,000
政府网站缩写为

3601
01:39:35,000 --> 01:39:37,000
jfwz

3602
01:39:37,000 --> 01:39:38,000
我搞

3603
01:39:38,000 --> 01:39:39,000
oh my god

3604
01:39:39,000 --> 01:39:40,000
那这也是对

3605
01:39:40,000 --> 01:39:43,000
这也是一个很有意思的一个事情

3606
01:39:43,000 --> 01:39:44,000
就是说如果它不用拼音缩写

3607
01:39:44,000 --> 01:39:45,000
它还能用啥

3608
01:39:46,000 --> 01:39:49,000
你说我先把那个发音译成英文

3609
01:39:49,000 --> 01:39:50,000
对

3610
01:39:50,000 --> 01:39:51,000
这好吧

3611
01:39:51,000 --> 01:39:54,000
我承认刚才我有点英语本位主义了

3612
01:39:54,000 --> 01:39:55,000
不就是

3613
01:39:55,000 --> 01:39:56,000
也不是说英语本位主义

3614
01:39:56,000 --> 01:40:00,000
其实我觉得在那个就是纯这个技术范围从里面去

3615
01:40:00,000 --> 01:40:01,000
其实是应该英语本位主义的

3616
01:40:01,000 --> 01:40:03,000
因为你的那个所有的那个

3617
01:40:03,000 --> 01:40:06,000
底层的那些逻辑都是英文的方式

3618
01:40:06,000 --> 01:40:06,000
蓝秘密的

3619
01:40:06,000 --> 01:40:07,000
对不对

3620
01:40:07,000 --> 01:40:08,000
这个毫无疑义

3621
01:40:08,000 --> 01:40:08,000
没有问题

3622
01:40:08,000 --> 01:40:08,000
不

3623
01:40:08,000 --> 01:40:10,000
你要真真到底层的话是二进之

3624
01:40:10,000 --> 01:40:12,000
我觉得

3625
01:40:12,000 --> 01:40:13,000
不是

3626
01:40:13,000 --> 01:40:13,000
我就说在

3627
01:40:13,000 --> 01:40:14,000
在

3628
01:40:14,000 --> 01:40:16,000
你还比如说你还是会讲

3629
01:40:16,000 --> 01:40:17,000
这个 console

3630
01:40:17,000 --> 01:40:18,000
你会讲 device

3631
01:40:18,000 --> 01:40:19,000
你会讲这个什么

3632
01:40:19,000 --> 01:40:19,000
socket

3633
01:40:19,000 --> 01:40:20,000
这些感觉

3634
01:40:20,000 --> 01:40:21,000
这些还是逃不掉的

3635
01:40:21,000 --> 01:40:24,000
就是现在的那些超系统软件

3636
01:40:24,000 --> 01:40:26,000
系统的那些构建单元

3637
01:40:26,000 --> 01:40:28,000
它还是以这个英文蓝秘密为主的

3638
01:40:28,000 --> 01:40:29,000
你看我说那个东西

3639
01:40:29,000 --> 01:40:30,000
虽然说确实有事

3640
01:40:30,000 --> 01:40:32,000
你是有这个巨饼

3641
01:40:32,000 --> 01:40:32,000
对吧

3642
01:40:32,000 --> 01:40:33,000
你有套接字

3643
01:40:33,000 --> 01:40:33,000
对吧

3644
01:40:33,000 --> 01:40:35,000
但是你不会真的去写这几个字

3645
01:40:35,000 --> 01:40:37,000
你还是写的是 handle

3646
01:40:37,000 --> 01:40:38,000
HDL

3647
01:40:38,000 --> 01:40:40,000
或者是 socket 的

3648
01:40:40,000 --> 01:40:41,000
就比 window handle

3649
01:40:41,000 --> 01:40:42,000
这是一个 windows

3650
01:40:42,000 --> 01:40:43,000
windows 编程

3651
01:40:43,000 --> 01:40:43,000
对不对

3652
01:40:43,000 --> 01:40:45,000
我就说这种底层的概念是英文的

3653
01:40:45,000 --> 01:40:47,000
那么你欺负它构建的东西

3654
01:40:47,000 --> 01:40:49,000
你就肯定还是以英文来描述它

3655
01:40:49,000 --> 01:40:50,000
你才

3656
01:40:50,000 --> 01:40:52,000
这条路才自洽

3657
01:40:52,000 --> 01:40:52,000
才通顺

3658
01:40:53,000 --> 01:40:53,000
对了

3659
01:40:53,000 --> 01:40:54,000
这个是没有

3660
01:40:54,000 --> 01:40:55,000
这个我觉得是毫无疑问的

3661
01:40:55,000 --> 01:40:56,000
问题是

3662
01:40:56,000 --> 01:40:56,000
除了刚才你说

3663
01:40:56,000 --> 01:40:58,000
就不能放话

3664
01:40:58,000 --> 01:40:58,000
比如说

3665
01:40:58,000 --> 01:40:59,000
你说 12 里面

3666
01:40:59,000 --> 01:41:00,000
它是说

3667
01:41:01,000 --> 01:41:03,000
我们随便想一个政府网站

3668
01:41:03,000 --> 01:41:04,000
叫今日公告

3669
01:41:04,000 --> 01:41:05,000
对吧

3670
01:41:05,000 --> 01:41:09,000
它是 gg

3671
01:41:09,000 --> 01:41:10,000
对吧

3672
01:41:10,000 --> 01:41:11,000
你说那肯定是这么写的

3673
01:41:11,000 --> 01:41:13,000
那他说 today's news

3674
01:41:13,000 --> 01:41:13,000
它不会

3675
01:41:13,000 --> 01:41:14,000
对吧

3676
01:41:14,000 --> 01:41:15,000
它没有一个底层

3677
01:41:15,000 --> 01:41:16,000
没有一个 foundation

3678
01:41:16,000 --> 01:41:17,000
是给你构建这个东西

3679
01:41:17,000 --> 01:41:19,000
所以就那个不成立

3680
01:41:19,000 --> 01:41:21,000
所以这两个情况

3681
01:41:21,000 --> 01:41:22,000
我觉得还是不一样

3682
01:41:22,000 --> 01:41:22,000
就是说

3683
01:41:22,000 --> 01:41:24,000
如果你能够讨论的

3684
01:41:24,000 --> 01:41:25,000
最小的单位

3685
01:41:25,000 --> 01:41:27,000
或者说常用的单位

3686
01:41:27,000 --> 01:41:29,000
它是一个什么样的语言描述的

3687
01:41:29,000 --> 01:41:31,000
你可能起算构建的东西

3688
01:41:31,000 --> 01:41:32,000
还是要以这个为主

3689
01:41:32,000 --> 01:41:35,000
就好像哪怕你用文言编程的时候

3690
01:41:35,000 --> 01:41:37,000
那除非你把底层的什么

3691
01:41:37,000 --> 01:41:38,000
就是句笔和套节字

3692
01:41:38,000 --> 01:41:40,000
都用文言来描述

3693
01:41:40,000 --> 01:41:41,000
不然你就很尴尬

3694
01:41:42,000 --> 01:41:44,000
知乎上不是有一个答案

3695
01:41:44,000 --> 01:41:46,000
是说如果就是问题是什么

3696
01:41:46,000 --> 01:41:49,000
如果计算机是中国人发明了

3697
01:41:49,000 --> 01:41:50,000
那么底层会什么样的

3698
01:41:50,000 --> 01:41:54,000
其实他就把周易的那一套话数套进去了

3699
01:41:54,000 --> 01:41:55,000
阴阳这样

3700
01:41:56,000 --> 01:41:57,000
对

3701
01:41:57,000 --> 01:41:58,000
所以我觉得

3702
01:41:58,000 --> 01:41:59,000
就是说你要去评价这个做法

3703
01:41:59,000 --> 01:42:00,000
合不合理的时候

3704
01:42:00,000 --> 01:42:02,000
你都是不能单点来看

3705
01:42:02,000 --> 01:42:03,000
你肯定是要成体系的来看

3706
01:42:03,000 --> 01:42:05,000
那现在的情况就是说

3707
01:42:05,000 --> 01:42:08,000
计算机的所有的底层的这个体系

3708
01:42:08,000 --> 01:42:12,000
都是英语为主体来构建的

3709
01:42:12,000 --> 01:42:13,000
那你没有办法了

3710
01:42:13,000 --> 01:42:16,000
你就只能跟着这样写了

3711
01:42:18,000 --> 01:42:19,000
不知道有没有什么大神

3712
01:42:19,000 --> 01:42:21,000
可以做一个兼容 Unex 的

3713
01:42:21,000 --> 01:42:24,000
完全自从最底层开始

3714
01:42:24,000 --> 01:42:26,000
就由中文构建的操作

3715
01:42:26,000 --> 01:42:27,000
Chinix

3716
01:42:28,000 --> 01:42:29,000
Chinix

3717
01:42:30,000 --> 01:42:30,000
不行

3718
01:42:30,000 --> 01:42:32,000
我说说这个的时候已经输了

3719
01:42:32,000 --> 01:42:32,000
对不对

3720
01:42:32,000 --> 01:42:33,000
为什么会这么写

3721
01:42:33,000 --> 01:42:36,000
一定要用中文来描述这个东西

3722
01:42:39,000 --> 01:42:40,000
没有必要

3723
01:42:40,000 --> 01:42:42,000
我觉得区市是融合

3724
01:42:42,000 --> 01:42:45,000
就是融合出一种杂柔的

3725
01:42:45,000 --> 01:42:46,000
对

3726
01:42:46,000 --> 01:42:48,000
你看什么

3727
01:42:48,000 --> 01:42:50,000
比较好的科幻片里面

3728
01:42:50,000 --> 01:42:52,000
未来都是中西文夹合

3729
01:42:52,000 --> 01:42:53,000
科理奥利语

3730
01:42:53,000 --> 01:42:55,000
就往上线所谓的

3731
01:42:55,000 --> 01:42:58,000
这种什么 00 后用的那种网络缩写语

3732
01:42:58,000 --> 01:43:01,000
它不就是用那种英语的单词

3733
01:43:01,000 --> 01:43:03,000
和汉语拼音的缩写

3734
01:43:03,000 --> 01:43:03,000
给它混在一起

3735
01:43:03,000 --> 01:43:05,000
然后再用一个手机字母缩写

3736
01:43:05,000 --> 01:43:07,000
就这种例子非常的多

3737
01:43:07,000 --> 01:43:09,000
什么 NMSL 这种的

3738
01:43:11,000 --> 01:43:14,000
这种当然是完全的汉语拼音的手机字母

3739
01:43:14,000 --> 01:43:16,000
还有一些就是寄用了英语的

3740
01:43:16,000 --> 01:43:18,000
因为现在有些英语单词

3741
01:43:18,000 --> 01:43:19,000
就像泰国网友

3742
01:43:19,000 --> 01:43:24,000
泰国网友反击的时候说 NMSL needs

3743
01:43:24,000 --> 01:43:25,000
你妈死了

3744
01:43:25,000 --> 01:43:25,000
NeeZ

3745
01:43:25,000 --> 01:43:30,000
这就是一个很简直的科理奥利语的例子

3746
01:43:36,000 --> 01:43:38,000
我们来聊特殊制服

3747
01:43:38,000 --> 01:43:39,000
刚才讲了一个空格特殊制服

3748
01:43:39,000 --> 01:43:41,000
其实可能是比较常见

3749
01:43:41,000 --> 01:43:43,000
其实还有很多其他的特殊制服

3750
01:43:43,000 --> 01:43:46,000
不能在很多地方使用的

3751
01:43:46,000 --> 01:43:46,000
对吧

3752
01:43:46,000 --> 01:43:49,000
主要是 Windows 的线制很多

3753
01:43:49,000 --> 01:43:50,000
像 Mac 都没有

3754
01:43:50,000 --> 01:43:54,000
你在 Windows 里面命名一个非法的文件

3755
01:43:54,000 --> 01:43:56,000
的时候他会跳出来一个对话框里面

3756
01:43:56,000 --> 01:43:57,000
苦口婆心的告诉你

3757
01:43:57,000 --> 01:43:59,000
哪些文件是哪些副号是不能用的

3758
01:44:00,000 --> 01:44:01,000
一大堆

3759
01:44:01,000 --> 01:44:02,000
这个还蛮贴心的

3760
01:44:02,000 --> 01:44:04,000
我觉得这个我觉得很好

3761
01:44:04,000 --> 01:44:05,000
像 Mac 那种过于自由

3762
01:44:05,000 --> 01:44:06,000
我觉得是有问题的

3763
01:44:06,000 --> 01:44:08,000
最好建议你不要这样干的

3764
01:44:08,000 --> 01:44:10,000
那就说你直接禁止你这么干

3765
01:44:10,000 --> 01:44:11,000
不更好

3766
01:44:11,000 --> 01:44:13,000
但是 Mac 现在也会跳出一个对话框

3767
01:44:13,000 --> 01:44:16,000
其实 Mac 也是有禁止制服的

3768
01:44:16,000 --> 01:44:19,000
Mac 其实是不能用那个帽号

3769
01:44:20,000 --> 01:44:21,000
唯一一个不能用的

3770
01:44:21,000 --> 01:44:24,000
就是在文件名里面是不让用帽号的

3771
01:44:24,000 --> 01:44:26,000
如果你要改帽号的时候

3772
01:44:26,000 --> 01:44:27,000
他会跳出一个对话框

3773
01:44:27,000 --> 01:44:28,000
然后提醒你

3774
01:44:28,000 --> 01:44:29,000
但是他说那句话

3775
01:44:29,000 --> 01:44:32,000
就是比 Winows 说的就很温柔

3776
01:44:32,000 --> 01:44:36,000
他说请尝试使用自服叫少

3777
01:44:36,000 --> 01:44:38,000
或不含标顶符号的名称

3778
01:44:38,000 --> 01:44:39,000
远点算不算标顶符号

3779
01:44:39,000 --> 01:44:40,000
对吧

3780
01:44:40,000 --> 01:44:40,000
这就很奇怪了

3781
01:44:40,000 --> 01:44:41,000
对不对

3782
01:44:41,000 --> 01:44:42,000
因为其实是可以用的

3783
01:44:42,000 --> 01:44:43,000
对

3784
01:44:43,000 --> 01:44:44,000
你在 Mac 上都可以用

3785
01:44:44,000 --> 01:44:44,000
对

3786
01:44:44,000 --> 01:44:46,000
但是就是其实要想一下

3787
01:44:46,000 --> 01:44:48,000
就是为什么就即便可以用

3788
01:44:48,000 --> 01:44:50,000
我觉得还是不建议使用这些特殊制服

3789
01:44:50,000 --> 01:44:51,000
作为文件名

3790
01:44:51,000 --> 01:44:53,000
其实有很多比较实际的问题

3791
01:44:53,000 --> 01:44:54,000
比如说这里我们

3792
01:44:54,000 --> 01:44:55,000
Show notes 能练了几个

3793
01:44:55,000 --> 01:44:56,000
就是大余号

3794
01:44:56,000 --> 01:44:57,000
小余号对吧

3795
01:44:57,000 --> 01:45:01,000
因为这个在就是类 Unix 的系统下面

3796
01:45:01,000 --> 01:45:03,000
它只有管道重新向的

3797
01:45:03,000 --> 01:45:04,000
它都有其他的特殊意义

3798
01:45:04,000 --> 01:45:06,000
你这样用了之后

3799
01:45:06,000 --> 01:45:09,000
别人要调用或者是要指向你文件的时候

3800
01:45:09,000 --> 01:45:10,000
就必须用 coding

3801
01:45:10,000 --> 01:45:11,000
或打引号的方法

3802
01:45:11,000 --> 01:45:15,000
就其实会增加比较多的麻烦

3803
01:45:15,000 --> 01:45:15,000
对吧

3804
01:45:15,000 --> 01:45:16,000
包括 BAR

3805
01:45:16,000 --> 01:45:18,000
Pipe 制服其实也是用

3806
01:45:18,000 --> 01:45:18,000
可以用监控号

3807
01:45:18,000 --> 01:45:21,000
Unix 里面可以用接控号做文件名吗

3808
01:45:22,000 --> 01:45:23,000
可以

3809
01:45:23,000 --> 01:45:24,000
你就引起来

3810
01:45:24,000 --> 01:45:26,000
OK

3811
01:45:26,000 --> 01:45:27,000
现在就是这样子

3812
01:45:27,000 --> 01:45:28,000
就是你要往一边写

3813
01:45:28,000 --> 01:45:30,000
理论下都是可行的

3814
01:45:30,000 --> 01:45:31,000
它唯独当你的地方

3815
01:45:31,000 --> 01:45:34,000
无非就是在资源管理器的时候弄一个

3816
01:45:34,000 --> 01:45:36,000
但是你自己非要写一个程序

3817
01:45:36,000 --> 01:45:37,000
去生成这么一个文件名

3818
01:45:37,000 --> 01:45:39,000
然后再把它放到磁盘上面去

3819
01:45:39,000 --> 01:45:41,000
这个都是可行的

3820
01:45:41,000 --> 01:45:42,000
因为文件系统本身

3821
01:45:42,000 --> 01:45:43,000
它没有限制

3822
01:45:43,000 --> 01:45:45,000
不让你存这个东西

3823
01:45:45,000 --> 01:45:47,000
就它说还要就是一个数字

3824
01:45:47,000 --> 01:45:49,000
但是我就说从

3825
01:45:49,000 --> 01:45:49,000
对

3826
01:45:49,000 --> 01:45:51,000
从实用主义的观点来讲

3827
01:45:51,000 --> 01:45:52,000
就是尽量去避免这些

3828
01:45:52,000 --> 01:45:54,000
种一出问题的自负会比较好

3829
01:45:54,000 --> 01:45:56,000
所以其实就回到了最开始的

3830
01:45:56,000 --> 01:45:57,000
命名规则了

3831
01:45:57,000 --> 01:46:00,000
就是说如何命名你的文件

3832
01:46:00,000 --> 01:46:02,000
会导致减少问题

3833
01:46:02,000 --> 01:46:03,000
就是不要用标点符号

3834
01:46:03,000 --> 01:46:04,000
其实是最好的

3835
01:46:04,000 --> 01:46:05,000
任何标点符号

3836
01:46:05,000 --> 01:46:08,000
包括空格是最好的

3837
01:46:08,000 --> 01:46:10,000
下画线不算

3838
01:46:10,000 --> 01:46:11,000
又要抬杠了

3839
01:46:11,000 --> 01:46:12,000
空格是标点符号吗

3840
01:46:12,000 --> 01:46:12,000
对

3841
01:46:12,000 --> 01:46:14,000
这个标点其实是指的是

3842
01:46:14,000 --> 01:46:17,000
英语世界里的标点

3843
01:46:17,000 --> 01:46:18,000
对

3844
01:46:18,000 --> 01:46:19,000
中文的话对往前不存在的问题

3845
01:46:19,000 --> 01:46:20,000
比如说什么

3846
01:46:20,000 --> 01:46:21,000
你要用中文的书名号

3847
01:46:21,000 --> 01:46:25,000
根本就就不认为它是个特殊符号

3848
01:46:25,000 --> 01:46:25,000
对吧

3849
01:46:25,000 --> 01:46:26,000
这没什么区别

3850
01:46:26,000 --> 01:46:29,000
主要还是因为英语的标点符号

3851
01:46:29,000 --> 01:46:30,000
就日常书写中的标点符号

3852
01:46:30,000 --> 01:46:33,000
也被这个程序代码借用来

3853
01:46:33,000 --> 01:46:35,000
表达了很多特殊的意义

3854
01:46:35,000 --> 01:46:36,000
对

3855
01:46:36,000 --> 01:46:37,000
是的

3856
01:46:37,000 --> 01:46:40,000
我觉得当初刚学编程的时候

3857
01:46:40,000 --> 01:46:43,000
有些有些同学会很疑惑

3858
01:46:43,000 --> 01:46:44,000
为什么英文的

3859
01:46:44,000 --> 01:46:46,000
就是它输入法只装的中文输入

3860
01:46:46,000 --> 01:46:48,000
然后再用中文

3861
01:46:48,000 --> 01:46:49,000
为什么用中文的标点符号

3862
01:46:49,000 --> 01:46:50,000
就看起来跟英文的一模一样

3863
01:46:50,000 --> 01:46:52,000
但是在程序就跑不起来

3864
01:46:52,000 --> 01:46:53,000
这是一个非常

3865
01:46:53,000 --> 01:46:54,000
一货的问题

3866
01:46:54,000 --> 01:46:56,000
会困扰出修者的问题

3867
01:46:56,000 --> 01:46:58,000
特别是在只有 10 个像素

3868
01:46:58,000 --> 01:46:59,000
所以 10 个像素宽的时候

3869
01:46:59,000 --> 01:47:00,000
到底中文引号

3870
01:47:00,000 --> 01:47:03,000
把中文扩号和英文控制有啥区别

3871
01:47:03,000 --> 01:47:05,000
看不太出来

3872
01:47:05,000 --> 01:47:05,000
就很坑

3873
01:47:05,000 --> 01:47:07,000
所以就是又变成之前

3874
01:47:07,000 --> 01:47:09,000
Udicode 的那个悬学的问题

3875
01:47:09,000 --> 01:47:11,000
两个看起来一样的符号

3876
01:47:11,000 --> 01:47:13,000
它应该是一个码

3877
01:47:13,000 --> 01:47:16,000
是不是一个深坑

3878
01:47:16,000 --> 01:47:16,000
是

3879
01:47:16,000 --> 01:47:19,000
不过我每次看到反协干

3880
01:47:19,000 --> 01:47:22,000
就想到日文 Windows 的日文符号

3881
01:47:22,000 --> 01:47:23,000
那个是为什么

3882
01:47:23,000 --> 01:47:26,000
因为它刚好是把面给占了

3883
01:47:26,000 --> 01:47:27,000
所以

3884
01:47:27,000 --> 01:47:29,000
就阿斯基里面借用了一下

3885
01:47:29,000 --> 01:47:31,000
为什么会借用到这个

3886
01:47:31,000 --> 01:47:34,000
他们那时候一拍脑袋

3887
01:47:34,000 --> 01:47:36,000
就觉得好像说反协干不用

3888
01:47:36,000 --> 01:47:40,000
然后日本人要用日文符号

3889
01:47:40,000 --> 01:47:45,000
所以就在马位上面放上了日文符号

3890
01:47:45,000 --> 01:47:46,000
这个日文符号是在

3891
01:47:46,000 --> 01:47:49,000
阿斯基的头 128 个里面的

3892
01:47:49,000 --> 01:47:50,000
对

3893
01:47:50,000 --> 01:47:51,000
我知道了

3894
01:47:51,000 --> 01:47:52,000
就是占了反协干的位置

3895
01:47:52,000 --> 01:47:54,000
所以当年的话

3896
01:47:54,000 --> 01:47:55,000
就是日本的系统

3897
01:47:55,000 --> 01:47:57,000
它一说打不出反协干的

3898
01:47:57,000 --> 01:47:59,000
就只能打日文符号

3899
01:47:59,000 --> 01:48:00,000
这叫什么来的

3900
01:48:00,000 --> 01:48:02,000
以日本为代表的东亚文化

3901
01:48:02,000 --> 01:48:05,000
试图对欧美主导的什么的

3902
01:48:05,000 --> 01:48:06,000
一个突破

3903
01:48:06,000 --> 01:48:07,000
对吧

3904
01:48:07,000 --> 01:48:09,000
逆袭

3905
01:48:09,000 --> 01:48:11,000
唯一成功的一次

3906
01:48:11,000 --> 01:48:13,000
因为其实你看在

3907
01:48:13,000 --> 01:48:15,000
这边所有的编码里面

3908
01:48:15,000 --> 01:48:16,000
那个阿斯基都是作为一个神圣

3909
01:48:16,000 --> 01:48:18,000
不可动摇的一个基础

3910
01:48:18,000 --> 01:48:19,000
对了

3911
01:48:19,000 --> 01:48:20,000
而且我觉得他们脑子很奇怪

3912
01:48:20,000 --> 01:48:21,000
如果要换的话

3913
01:48:21,000 --> 01:48:24,000
也应该把美元符号换成日文符号

3914
01:48:24,000 --> 01:48:25,000
对吧

3915
01:48:25,000 --> 01:48:26,000
那么为什么要

3916
01:48:26,000 --> 01:48:27,000
就他不行

3917
01:48:27,000 --> 01:48:29,000
那时候美国爸爸就不开吓

3918
01:48:29,000 --> 01:48:31,000
这还是不可能的

3919
01:48:31,000 --> 01:48:32,000
我觉得把日文符号换成美文符号

3920
01:48:32,000 --> 01:48:34,000
比换掉

3921
01:48:34,000 --> 01:48:36,000
后背是更不可取

3922
01:48:36,000 --> 01:48:38,000
那个时候美元是多重要的一个东西

3923
01:48:38,000 --> 01:48:40,000
现在很重要吧

3924
01:48:40,000 --> 01:48:42,000
所以他们当时肯定是觉得说

3925
01:48:42,000 --> 01:48:44,000
这个反斜杆很不重要

3926
01:48:44,000 --> 01:48:46,000
所以就把这个挪掉了

3927
01:48:46,000 --> 01:48:47,000
结果谁知道呢

3928
01:48:47,000 --> 01:48:49,000
Windows 把这个反斜杆来做录进了

3929
01:48:49,000 --> 01:48:52,000
结果日本的 Windows 的

3930
01:48:52,000 --> 01:48:54,000
满眼都是日文符号

3931
01:48:54,000 --> 01:48:55,000
都是钱

3932
01:48:55,000 --> 01:48:56,000
对

3933
01:48:56,000 --> 01:48:56,000
对

3934
01:48:56,000 --> 01:48:57,000
等一下

3935
01:48:57,000 --> 01:49:00,000
刚才王杰说了一个就是

3936
01:49:00,000 --> 01:49:00,000
在 Mac 里面

3937
01:49:00,000 --> 01:49:02,000
唯一一个不让用的是帽号

3938
01:49:02,000 --> 01:49:03,000
对吧

3939
01:49:03,000 --> 01:49:06,000
其实这个帽号

3940
01:49:06,000 --> 01:49:08,000
是我们这平时用的在 GUI

3941
01:49:08,000 --> 01:49:11,000
就是在图形界面上不让用帽号的

3942
01:49:11,000 --> 01:49:13,000
因为是他们的路径

3943
01:49:13,000 --> 01:49:15,000
其实用的是帽号对吧

3944
01:49:15,000 --> 01:49:17,000
所以是他路径的保留字

3945
01:49:17,000 --> 01:49:19,000
其实就是老翻译的里面

3946
01:49:19,000 --> 01:49:19,000
等一下

3947
01:49:19,000 --> 01:49:20,000
我试一下

3948
01:49:20,000 --> 01:49:22,000
命令函是可以用帽号的

3949
01:49:22,000 --> 01:49:24,000
在命令函是可以用帽号的对吧

3950
01:49:24,000 --> 01:49:28,000
然后在图形界面是可以用鞋杆的

3951
01:49:28,000 --> 01:49:30,000
但是同样一个文件名

3952
01:49:30,000 --> 01:49:32,000
在命令行里面

3953
01:49:32,000 --> 01:49:34,000
这个鞋杆会变成帽号

3954
01:49:35,000 --> 01:49:36,000
等一下

3955
01:49:36,000 --> 01:49:37,000
我刚才在命令函里面

3956
01:49:37,000 --> 01:49:39,000
建了一个带帽号的文件

3957
01:49:39,000 --> 01:49:40,000
然后在图形界面看

3958
01:49:40,000 --> 01:49:43,000
它变成了一个鞋杆

3959
01:49:43,000 --> 01:49:43,000
对

3960
01:49:44,000 --> 01:49:45,000
就交气了

3961
01:49:45,000 --> 01:49:47,000
对

3962
01:49:47,000 --> 01:49:48,000
是反着的

3963
01:49:48,000 --> 01:49:50,000
为什么会这样

3964
01:49:50,000 --> 01:49:53,000
因为帽号在 GUI 里面有别的作用

3965
01:49:53,000 --> 01:49:55,000
我好太神奇了

3966
01:49:55,000 --> 01:49:57,000
帽号在图形界面有什么用

3967
01:49:57,000 --> 01:50:00,000
在图形界面里面是不让用帽号的文件名

3968
01:50:00,000 --> 01:50:03,000
那他为什么要写成鞋杆

3969
01:50:03,000 --> 01:50:05,000
这个很难理解

3970
01:50:05,000 --> 01:50:07,000
反正现在 Mac 的处理方式

3971
01:50:07,000 --> 01:50:11,000
就是图形界面和命令行里面

3972
01:50:11,000 --> 01:50:12,000
帽号和鞋杆是反着的

3973
01:50:13,000 --> 01:50:15,000
互相替代

3974
01:50:15,000 --> 01:50:17,000
因为在早期的 Finder 里面

3975
01:50:17,000 --> 01:50:23,000
早期的 Finder 里面的路径是用帽号隔开的

3976
01:50:23,000 --> 01:50:23,000
真的

3977
01:50:23,000 --> 01:50:26,000
我真的会反过来

3978
01:50:26,000 --> 01:50:27,000
我第一次知道有这个事情

3979
01:50:27,000 --> 01:50:30,000
或者是我在 Finder 里面建一个 Four

3980
01:50:30,000 --> 01:50:35,000
鞋杆 Bar 在 terminal 里面显示为 Fu 帽号

3981
01:50:35,000 --> 01:50:37,000
我不跟你说了

3982
01:50:37,000 --> 01:50:38,000
再说一遍

3983
01:50:38,000 --> 01:50:41,000
在 Finder 就是老的系统里面

3984
01:50:41,000 --> 01:50:45,000
就是 classical 的 Mac 里面

3985
01:50:45,000 --> 01:50:48,000
Finder 的路径的分割服

3986
01:50:48,000 --> 01:50:49,000
是用帽号

3987
01:50:49,000 --> 01:50:50,000
路径分割 Windows 是反鞋杆

3988
01:50:50,000 --> 01:50:52,000
在 Finder 里面是帽号

3989
01:50:52,000 --> 01:50:55,000
果然是一个用过 classical Mac 的人

3990
01:50:56,000 --> 01:50:57,000
我怪不得

3991
01:50:58,000 --> 01:51:01,000
所以这是老 Mac 系统里面

3992
01:51:01,000 --> 01:51:03,000
唯一一个的预留字

3993
01:51:03,000 --> 01:51:06,000
明白

3994
01:51:06,000 --> 01:51:08,000
所以直到现在为止

3995
01:51:08,000 --> 01:51:10,000
Mac 也是只不让用

3996
01:51:10,000 --> 01:51:13,000
然后它会跟鞋杆转移

3997
01:51:13,000 --> 01:51:16,000
但现在其实已经没有

3998
01:51:16,000 --> 01:51:18,000
再有 classical Mac 了

3999
01:51:18,000 --> 01:51:19,000
对吧

4000
01:51:19,000 --> 01:51:21,000
所以这个转移其实完全没有

4001
01:51:21,000 --> 01:51:22,000
什么现实意义了

4002
01:51:22,000 --> 01:51:25,000
它就变成图形界面 Finder 的

4003
01:51:25,000 --> 01:51:26,000
一个 spec 掉了

4004
01:51:26,000 --> 01:51:27,000
OK

4005
01:51:28,000 --> 01:51:29,000
这个很有意思

4006
01:51:29,000 --> 01:51:30,000
这样我想起来

4007
01:51:30,000 --> 01:51:32,000
Windows 其实除了文件名

4008
01:51:32,000 --> 01:51:34,000
不能用特殊字符之外

4009
01:51:34,000 --> 01:51:36,000
还不能用一些特殊保留字

4010
01:51:36,000 --> 01:51:39,000
比如说你不能把一个文件名叫做 Comp

4011
01:51:39,000 --> 01:51:40,000
Comp 是因为什么

4012
01:51:40,000 --> 01:51:42,000
是因为串口的

4013
01:51:42,000 --> 01:51:44,000
Comp 是 Consul

4014
01:51:44,000 --> 01:51:46,000
然后还有什么 prn

4015
01:51:46,000 --> 01:51:47,000
还是 pnt

4016
01:51:47,000 --> 01:51:48,000
还有 Ox

4017
01:51:48,000 --> 01:51:50,000
Oxcelerate 也不行

4018
01:51:50,000 --> 01:51:51,000
对

4019
01:51:51,000 --> 01:51:52,000
这个当时是为什么

4020
01:51:52,000 --> 01:51:53,000
我记得有这个事

4021
01:51:53,000 --> 01:51:55,000
但我忘了原因是什么了

4022
01:51:55,000 --> 01:51:56,000
Comp 是 Consul

4023
01:51:56,000 --> 01:51:58,000
就是你要是打 copyComp

4024
01:51:58,000 --> 01:52:00,000
然后空格 target.txt

4025
01:52:00,000 --> 01:52:01,000
你就可以输入

4026
01:52:01,000 --> 01:52:04,000
从 Consul 上输入字符

4027
01:52:04,000 --> 01:52:08,000
然后把它存成 target.txt

4028
01:52:08,000 --> 01:52:11,000
就是 Comp 实际上是 Consul 的一个

4029
01:52:11,000 --> 01:52:13,000
有特殊意义的名字

4030
01:52:13,000 --> 01:52:14,000
对吧

4031
01:52:14,000 --> 01:52:16,000
它不是不能存在文件名字

4032
01:52:16,000 --> 01:52:16,000
对

4033
01:52:16,000 --> 01:52:19,000
相当于 terminal 里面的保留字了

4034
01:52:22,000 --> 01:52:22,000
对

4035
01:52:22,000 --> 01:52:25,000
但这个还蛮不合理的

4036
01:52:25,000 --> 01:52:27,000
这个其实很常用

4037
01:52:28,000 --> 01:52:30,000
就它要为了解决这个问题

4038
01:52:30,000 --> 01:52:31,000
直接进掉了好几个

4039
01:52:31,000 --> 01:52:33,000
比较简短的名字

4040
01:52:33,000 --> 01:52:35,000
那你如果这样

4041
01:52:35,000 --> 01:52:37,000
你还不如直接用一个什么特殊符号

4042
01:52:37,000 --> 01:52:38,000
引起来

4043
01:52:38,000 --> 01:52:40,000
或者是你这前面加一个

4044
01:52:40,000 --> 01:52:41,000
你在前面加一个 escape 也可以

4045
01:52:41,000 --> 01:52:43,000
然后就是下发线 Ox

4046
01:52:43,000 --> 01:52:45,000
都有比 Ox 好吧

4047
01:52:45,000 --> 01:52:47,000
或者是你用

4048
01:52:47,000 --> 01:52:49,000
你反正已经有那么多特殊字符

4049
01:52:49,000 --> 01:52:49,000
不能用了

4050
01:52:49,000 --> 01:52:49,000
对吧

4051
01:52:49,000 --> 01:52:52,000
你就把用一个特殊字符来作为一个前綴了

4052
01:52:53,000 --> 01:52:56,000
或者用美元符号这种情况

4053
01:52:56,000 --> 01:52:56,000
对吧

4054
01:52:56,000 --> 01:52:59,000
因为基本上不会有人把文件名名为

4055
01:52:59,000 --> 01:53:02,000
美元符号开头的文件名吧

4056
01:53:02,000 --> 01:53:02,000
用 NR 呢

4057
01:53:02,000 --> 01:53:03,000
也能说

4058
01:53:03,000 --> 01:53:04,000
哎呀

4059
01:53:04,000 --> 01:53:09,000
所以那个时候假如我们来做系统的话

4060
01:53:09,000 --> 01:53:11,000
就是当时这种选择肯定有它不合理的

4061
01:53:11,000 --> 01:53:12,000
那个傻逼的地方

4062
01:53:12,000 --> 01:53:13,000
对吧

4063
01:53:13,000 --> 01:53:16,000
但是肯定有很多情况也是有不得已而为之的办法

4064
01:53:18,000 --> 01:53:19,000
就是 legacy

4065
01:53:19,000 --> 01:53:21,000
路径依赖真的可以解决很多

4066
01:53:21,000 --> 01:53:22,000
解释很多问题

4067
01:53:22,000 --> 01:53:23,000
对啊

4068
01:53:23,000 --> 01:53:24,000
因为刚才你说这个

4069
01:53:24,000 --> 01:53:25,000
刚才讲为什么麦克 S 现在里面

4070
01:53:25,000 --> 01:53:29,000
你用一个反鞋杆会变成在图形界面

4071
01:53:29,000 --> 01:53:31,000
字符界面会变成帽号对吧

4072
01:53:31,000 --> 01:53:34,000
然后这个帽号这边会这边又反过来

4073
01:53:34,000 --> 01:53:37,000
不就是因为和 classic 麦克要兼容吗

4074
01:53:39,000 --> 01:53:40,000
这个也是非常可爱的

4075
01:53:40,000 --> 01:53:41,000
而且因为我们原来

4076
01:53:41,000 --> 01:53:43,000
我自己原来是最早学到此的

4077
01:53:43,000 --> 01:53:47,000
我是打死我也不会赶在一个文件名名用鞋杆的

4078
01:53:47,000 --> 01:53:48,000
说实话

4079
01:53:50,000 --> 01:53:51,000
会出问题

4080
01:53:51,000 --> 01:53:52,000
多恐怖的一件事情

4081
01:53:52,000 --> 01:53:52,000
然后

4082
01:53:53,000 --> 01:53:55,000
然后现在在麦克居然可以用鞋杆

4083
01:53:55,000 --> 01:53:57,000
首先就是第一个意外

4084
01:53:57,000 --> 01:54:00,000
然后我再用这个命令行再去看着

4085
01:54:00,000 --> 01:54:02,000
发现变的帽号就变成第二个意外

4086
01:54:02,000 --> 01:54:03,000
就疯掉了

4087
01:54:03,000 --> 01:54:04,000
所以他到底那个情况

4088
01:54:04,000 --> 01:54:07,000
那大陆他存的是帽号还是鞋杆

4089
01:54:07,000 --> 01:54:10,000
就是在这么描述的事情

4090
01:54:10,000 --> 01:54:12,000
应该也还是以字符界面的为准吧

4091
01:54:13,000 --> 01:54:15,000
就只是说发现它是个显示的问题

4092
01:54:15,000 --> 01:54:16,000
等等

4093
01:54:16,000 --> 01:54:19,000
unix 上面的文件名是存在哪的

4094
01:54:19,000 --> 01:54:21,000
是存在 I know 的上字吧

4095
01:54:22,000 --> 01:54:24,000
应该是吧

4096
01:54:24,000 --> 01:54:25,000
看那个文件系统

4097
01:54:25,000 --> 01:54:27,000
所以你要用一个

4098
01:54:27,000 --> 01:54:29,000
所以你要去文件系统里面看这个东西

4099
01:54:29,000 --> 01:54:32,000
到底是底层是被存成的哪一个字符是吧

4100
01:54:32,000 --> 01:54:33,000
对

4101
01:54:33,000 --> 01:54:34,000
我很好奇这件事情

4102
01:54:34,000 --> 01:54:35,000
他到底存在那里存的是啥

4103
01:54:35,000 --> 01:54:37,000
我压帽号

4104
01:54:38,000 --> 01:54:40,000
我也赌应该是帽号

4105
01:54:41,000 --> 01:54:43,000
我也觉得应该是帽号

4106
01:54:43,000 --> 01:54:44,000
对

4107
01:54:44,000 --> 01:54:47,000
鞋杆只是给你们这些愚蠢的人类看一看而已

4108
01:54:47,000 --> 01:54:49,000
鞋杆也是一种想象的

4109
01:54:50,000 --> 01:54:51,000
追寻他底层到底是什么字符

4110
01:54:51,000 --> 01:54:55,000
这个问题就留给 Rail 当做他的客户作业了

4111
01:55:00,000 --> 01:55:00,000
好的

4112
01:55:02,000 --> 01:55:04,000
所以你看如果这种情况发生

4113
01:55:04,000 --> 01:55:05,000
你们想怎么办

4114
01:55:05,000 --> 01:55:06,000
会发生什么事情

4115
01:55:06,000 --> 01:55:08,000
这个也是一个小作业

4116
01:55:10,000 --> 01:55:12,000
Mac 上可以的文件名

4117
01:55:12,000 --> 01:55:13,000
往 Windows 上

4118
01:55:13,000 --> 01:55:15,000
比如说哪个 U 盘复制过去的

4119
01:55:15,000 --> 01:55:16,000
或者是反过来

4120
01:55:16,000 --> 01:55:18,000
Windows 上可以的文件名

4121
01:55:18,000 --> 01:55:20,000
往 Mac 上复制会发生什么

4122
01:55:20,000 --> 01:55:21,000
他会把你改掉

4123
01:55:21,000 --> 01:55:22,000
还是会爆错

4124
01:55:24,000 --> 01:55:25,000
他不会爆错

4125
01:55:25,000 --> 01:55:26,000
他会自动把你改掉

4126
01:55:26,000 --> 01:55:28,000
就是直接月图带跑了

4127
01:55:28,000 --> 01:55:29,000
说你只能这么干

4128
01:55:29,000 --> 01:55:29,000
对吧

4129
01:55:29,000 --> 01:55:30,000
改掉是什么意思

4130
01:55:30,000 --> 01:55:32,000
他会替换掉

4131
01:55:32,000 --> 01:55:33,000
嗯

4132
01:55:33,000 --> 01:55:34,000
我有个问题

4133
01:55:34,000 --> 01:55:36,000
就比如说我现在有一个 U 盘

4134
01:55:36,000 --> 01:55:40,000
然后我把 Mac 上一个包含了 Windows 非法制服的文件

4135
01:55:40,000 --> 01:55:41,000
考过去了

4136
01:55:41,000 --> 01:55:43,000
然后我这 U 盘插到 Windows 上

4137
01:55:43,000 --> 01:55:45,000
他在资源管理室看起来是什么样的

4138
01:55:45,000 --> 01:55:47,000
在非法的别人试探

4139
01:55:48,000 --> 01:55:49,000
直接炸了

4140
01:55:50,000 --> 01:55:51,000
你自己试一次

4141
01:55:54,000 --> 01:55:57,000
比如说我要整一个 U 盘的

4142
01:55:57,000 --> 01:55:58,000
这个 OX

4143
01:55:58,000 --> 01:55:59,000
COME 1

4144
01:55:59,000 --> 01:55:59,000
COME 2

4145
01:55:59,000 --> 01:56:00,000
COME 3

4146
01:56:00,000 --> 01:56:02,000
COME 的 LPTE 都放进去

4147
01:56:02,000 --> 01:56:02,000
然后你怎么办

4148
01:56:03,000 --> 01:56:04,000
然后插到 Windows 上

4149
01:56:04,000 --> 01:56:06,000
他不法打开

4150
01:56:06,000 --> 01:56:07,000
不可以打开这个文件

4151
01:56:07,000 --> 01:56:08,000
不可以打开是后来的

4152
01:56:08,000 --> 01:56:11,000
我首先我还能不能看到这文件

4153
01:56:11,000 --> 01:56:13,000
这文件是在直接在我的 U 盘上

4154
01:56:13,000 --> 01:56:14,000
就是看不到了

4155
01:56:14,000 --> 01:56:15,000
是怎么样的

4156
01:56:16,000 --> 01:56:17,000
不知道

4157
01:56:17,000 --> 01:56:19,000
我们可以做个实验试一下

4158
01:56:19,000 --> 01:56:20,000
还是会被转移掉

4159
01:56:20,000 --> 01:56:21,000
还是

4160
01:56:21,000 --> 01:56:23,000
那个符号可以转移

4161
01:56:23,000 --> 01:56:26,000
但是像 Windows 的那几个不能

4162
01:56:26,000 --> 01:56:28,000
就不可能存在的文件名

4163
01:56:28,000 --> 01:56:30,000
你肯定就比较尴尬了

4164
01:56:30,000 --> 01:56:33,000
就让我想起了 VMRC

4165
01:56:33,000 --> 01:56:36,000
如果你手工创建一个以点开头的文件的话

4166
01:56:36,000 --> 01:56:37,000
是做不到的

4167
01:56:37,000 --> 01:56:39,000
但是你可以通过一边接器

4168
01:56:39,000 --> 01:56:41,000
把它另存为这样一个文件

4169
01:56:41,000 --> 01:56:42,000
在 Windows 能源是可以的

4170
01:56:43,000 --> 01:56:45,000
点开头的文件在 Unex 下面

4171
01:56:45,000 --> 01:56:47,000
它是叫做隐藏文件的意思

4172
01:56:47,000 --> 01:56:49,000
就是隐藏那么 Listing 是看不见

4173
01:56:49,000 --> 01:56:50,000
Mark 也是吗

4174
01:56:50,000 --> 01:56:50,000
对

4175
01:56:50,000 --> 01:56:52,000
Mark 是 Mark

4176
01:56:52,000 --> 01:56:54,000
它继承了 Unex 那套逻辑

4177
01:56:54,000 --> 01:56:55,000
它也是用了这个东西的

4178
01:56:55,000 --> 01:56:57,000
Unex 在早期的时候

4179
01:56:57,000 --> 01:56:58,000
没有隐藏文件的概念

4180
01:56:58,000 --> 01:56:59,000
它只不过在

4181
01:56:59,000 --> 01:57:01,000
比如说你在 LS 或者是在什么的时候

4182
01:57:01,000 --> 01:57:04,000
它默认会跳过那些点和点点

4183
01:57:04,000 --> 01:57:07,000
因为代表本级目录和上级目录

4184
01:57:07,000 --> 01:57:08,000
所以有些人就发现

4185
01:57:08,000 --> 01:57:11,000
那我直接把文件一点点开头

4186
01:57:11,000 --> 01:57:11,000
对

4187
01:57:11,000 --> 01:57:13,000
它就不会列出来了

4188
01:57:14,000 --> 01:57:16,000
所以就是为了不写代码

4189
01:57:16,000 --> 01:57:17,000
为了损事

4190
01:57:17,000 --> 01:57:18,000
为了损事

4191
01:57:18,000 --> 01:57:18,000
出来的一个 Hack

4192
01:57:18,000 --> 01:57:19,000
对

4193
01:57:20,000 --> 01:57:21,000
其实也好了

4194
01:57:21,000 --> 01:57:21,000
这种为了损事

4195
01:57:21,000 --> 01:57:24,000
至少我觉得还有个什么客观的理由

4196
01:57:24,000 --> 01:57:24,000
对吧

4197
01:57:24,000 --> 01:57:26,000
com 一怎么一回事

4198
01:57:26,000 --> 01:57:27,000
就是这个

4199
01:57:29,000 --> 01:57:29,000
这很过分

4200
01:57:29,000 --> 01:57:30,000
你知道吗

4201
01:57:30,000 --> 01:57:30,000
始终不能忘了

4202
01:57:30,000 --> 01:57:32,000
因为有更好的选择

4203
01:57:32,000 --> 01:57:32,000
对

4204
01:57:32,000 --> 01:57:33,000
还要这样

4205
01:57:33,000 --> 01:57:37,000
com 从 123456789

4206
01:57:37,000 --> 01:57:42,000
然后还有 Lpt 的 123456789

4207
01:57:42,000 --> 01:57:43,000
都是不能打的

4208
01:57:43,000 --> 01:57:43,000
Lpt 是什么

4209
01:57:43,000 --> 01:57:45,000
是打印机接口吗

4210
01:57:45,000 --> 01:57:46,000
还是什么样

4211
01:57:46,000 --> 01:57:47,000
Lpt 好像是打印机

4212
01:57:48,000 --> 01:57:49,000
但反正我记得

4213
01:57:49,000 --> 01:57:52,000
当年真是打印机有接口是这样子的

4214
01:57:53,000 --> 01:57:53,000
对

4215
01:57:55,000 --> 01:57:56,000
OK

4216
01:57:56,000 --> 01:57:57,000
终于可以聊大小学的问题了

4217
01:57:58,000 --> 01:58:00,000
又是一个顺顺的坑

4218
01:58:02,000 --> 01:58:04,000
我先理下现在什么一刻情况

4219
01:58:04,000 --> 01:58:07,000
就是说我们都不考古了

4220
01:58:07,000 --> 01:58:09,000
就只聊现在这个文件系统

4221
01:58:09,000 --> 01:58:10,000
现在这个超级系统

4222
01:58:11,000 --> 01:58:14,000
在 Mac 上面默认情况下是可以

4223
01:58:14,000 --> 01:58:15,000
叫什么来的

4224
01:58:15,000 --> 01:58:16,000
区分

4225
01:58:16,000 --> 01:58:17,000
这里要先讲两个概念

4226
01:58:17,000 --> 01:58:20,000
什么叫大小写敏感和大小写保留

4227
01:58:20,000 --> 01:58:21,000
对吧

4228
01:58:21,000 --> 01:58:22,000
这两个概念是什么意思

4229
01:58:22,000 --> 01:58:26,000
就是说假设我写 AB

4230
01:58:26,000 --> 01:58:28,000
然后 A 大写 B 小写

4231
01:58:28,000 --> 01:58:30,000
和写 AB 都小写的情况下

4232
01:58:30,000 --> 01:58:32,000
它应该是一个文件

4233
01:58:32,000 --> 01:58:33,000
还是两个文件的问题

4234
01:58:33,000 --> 01:58:34,000
如果说他两个

4235
01:58:34,000 --> 01:58:36,000
你认为他是两个是一个文件

4236
01:58:36,000 --> 01:58:38,000
他说明这个系统是大小写不敏感

4237
01:58:38,000 --> 01:58:39,000
对吧

4238
01:58:39,000 --> 01:58:41,000
因为他认为他是同等的一个东西

4239
01:58:41,000 --> 01:58:44,000
这个时候比如说我们从实现的逻辑

4240
01:58:44,000 --> 01:58:44,000
来讲

4241
01:58:44,000 --> 01:58:45,000
你可以认为说

4242
01:58:45,000 --> 01:58:49,000
存的时候都是把这个东西转移成小写

4243
01:58:49,000 --> 01:58:50,000
存在文件系统里面去

4244
01:58:50,000 --> 01:58:53,000
或者是都是做成大写存在文件系统里面去

4245
01:58:53,000 --> 01:58:54,000
这个不重要

4246
01:58:54,000 --> 01:58:54,000
但是

4247
01:58:54,000 --> 01:58:55,000
比如 DOS

4248
01:58:55,000 --> 01:58:58,000
DOS 的标准操作好像全都是大写

4249
01:58:58,000 --> 01:58:59,000
大写对

4250
01:58:59,000 --> 01:59:01,000
就是明目敏感的问题

4251
01:59:02,000 --> 01:59:03,000
保保留或者是叫 Di

4252
01:59:03,000 --> 01:59:04,000
因为你们叫做 preserving

4253
01:59:04,000 --> 01:59:06,000
就是 case preserving 的问题

4254
01:59:06,000 --> 01:59:07,000
就是说

4255
01:59:07,000 --> 01:59:08,000
虽然你可以不敏感

4256
01:59:08,000 --> 01:59:10,000
但是你可以保留区别

4257
01:59:10,000 --> 01:59:11,000
就是什么意思

4258
01:59:11,000 --> 01:59:13,000
你还是知道说

4259
01:59:14,000 --> 01:59:15,000
虽然说 A

4260
01:59:15,000 --> 01:59:17,000
大 A 小 B 和小 A 小 B 都是

4261
01:59:17,000 --> 01:59:19,000
你认为是等价的

4262
01:59:19,000 --> 01:59:22,000
但是你还是把大 A 小 B 给存下来了

4263
01:59:22,000 --> 01:59:22,000
对吧

4264
01:59:22,000 --> 01:59:24,000
超只是照超而已

4265
01:59:24,000 --> 01:59:26,000
但是还是把它当的一样的

4266
01:59:26,000 --> 01:59:27,000
对

4267
01:59:27,000 --> 01:59:29,000
所以这里面我就一直没想明白这个事情

4268
01:59:29,000 --> 01:59:30,000
就是说

4269
01:59:30,000 --> 01:59:33,000
既然大小写都不这个小什么的

4270
01:59:33,000 --> 01:59:35,000
都不敏感了

4271
01:59:35,000 --> 01:59:35,000
对了

4272
01:59:35,000 --> 01:59:37,000
你为什么还要保留呢

4273
01:59:37,000 --> 01:59:37,000
就其实没什么用

4274
01:59:38,000 --> 01:59:39,000
我觉得是为了客户

4275
01:59:39,000 --> 01:59:40,000
用户方面

4276
01:59:40,000 --> 01:59:42,000
因为用户有时候就看起来

4277
01:59:42,000 --> 01:59:43,000
对

4278
01:59:43,000 --> 01:59:45,000
这就是拉丁字母本位的表现

4279
01:59:45,000 --> 01:59:47,000
因为使用拉丁字母的人

4280
01:59:47,000 --> 01:59:49,000
他们有大写和小写

4281
01:59:49,000 --> 01:59:52,000
但是他们在他们脑海中

4282
01:59:52,000 --> 01:59:53,000
对大写和小写的

4283
01:59:53,000 --> 01:59:55,000
区分的语义的识别能力

4284
01:59:55,000 --> 01:59:56,000
会相对弱一点

4285
01:59:56,000 --> 01:59:58,000
他们会认为他们是一样的

4286
01:59:58,000 --> 02:00:00,000
意思上是一样的

4287
02:00:00,000 --> 02:00:00,000
对

4288
02:00:00,000 --> 02:00:02,000
形式上写的不一样

4289
02:00:02,000 --> 02:00:02,000
对

4290
02:00:02,000 --> 02:00:04,000
就是其实跟 unicode 的问题

4291
02:00:04,000 --> 02:00:05,000
是有点类似的

4292
02:00:05,000 --> 02:00:05,000
对吧

4293
02:00:06,000 --> 02:00:07,000
而且刚才也不说各种

4294
02:00:07,000 --> 02:00:09,000
各种什么 camel case 这种东西

4295
02:00:09,000 --> 02:00:10,000
其实他大小写

4296
02:00:10,000 --> 02:00:13,000
只是为了容易读

4297
02:00:13,000 --> 02:00:14,000
对吧

4298
02:00:14,000 --> 02:00:15,000
意思其实是一样的

4299
02:00:15,000 --> 02:00:18,000
所以就是看起来好看而已

4300
02:00:18,000 --> 02:00:21,000
然后还是单做一个东西

4301
02:00:21,000 --> 02:00:23,000
但这些这里其实在不同语音下面

4302
02:00:23,000 --> 02:00:25,000
这个东西是有非常大的区别的

4303
02:00:25,000 --> 02:00:26,000
虽然说我们就回到刚才

4304
02:00:26,000 --> 02:00:27,000
camel case 那个地方

4305
02:00:27,000 --> 02:00:28,000
那讲的是什么

4306
02:00:28,000 --> 02:00:29,000
那讲的是 identifier

4307
02:00:29,000 --> 02:00:30,000
就是识别符

4308
02:00:30,000 --> 02:00:31,000
对吧

4309
02:00:31,000 --> 02:00:33,000
在绝大多数语言里面

4310
02:00:33,000 --> 02:00:34,000
识别符都是大小写敏感的

4311
02:00:35,000 --> 02:00:37,000
就是刚才说大 a 小 b 和小 a 小 b

4312
02:00:37,000 --> 02:00:38,000
它明显是

4313
02:00:38,000 --> 02:00:40,000
它可以是两个

4314
02:00:40,000 --> 02:00:41,000
不同的一个辩量

4315
02:00:41,000 --> 02:00:43,000
也好像两个不同的一个名字

4316
02:00:43,000 --> 02:00:43,000
对吧

4317
02:00:43,000 --> 02:00:45,000
但是在绝大多数的

4318
02:00:46,000 --> 02:00:49,000
identifier 作为 id 的时候

4319
02:00:49,000 --> 02:00:50,000
作为一个比如用户招户

4320
02:00:50,000 --> 02:00:52,000
用户名的时候

4321
02:00:52,000 --> 02:00:53,000
它通常是不敏感

4322
02:00:53,000 --> 02:00:53,000
比如说我们讲推特的

4323
02:00:54,000 --> 02:00:56,000
推特就是这么一个典型的例子

4324
02:00:56,000 --> 02:00:58,000
推特它是大小写保留

4325
02:00:58,000 --> 02:00:59,000
但是大小写不敏感

4326
02:00:59,000 --> 02:00:59,000
对吧

4327
02:00:59,000 --> 02:01:03,000
比如说我的推特点删的

4328
02:01:03,000 --> 02:01:03,000
叫做 realjot

4329
02:01:03,000 --> 02:01:04,000
对吧

4330
02:01:04,000 --> 02:01:05,000
就是我的 r 和 j 大写

4331
02:01:05,000 --> 02:01:06,000
这是两个词

4332
02:01:06,000 --> 02:01:09,000
但是你在 URIO 里面

4333
02:01:09,000 --> 02:01:11,000
你写这六个字母的任意大小写主

4334
02:01:11,000 --> 02:01:14,000
它都是带到我的页面上面去了

4335
02:01:14,000 --> 02:01:17,000
所以推特的命名这一点

4336
02:01:17,000 --> 02:01:21,000
它其实是跟 MAC 上默认的文件名

4337
02:01:21,000 --> 02:01:23,000
命名的大小写的敏感方式是一样的

4338
02:01:23,000 --> 02:01:25,000
叫做 case insensitive

4339
02:01:25,000 --> 02:01:26,000
大家也不敏感

4340
02:01:26,000 --> 02:01:28,000
but case preserving

4341
02:01:28,000 --> 02:01:28,000
对吧

4342
02:01:28,000 --> 02:01:29,000
但是保留大小写

4343
02:01:30,000 --> 02:01:31,000
现在的

4344
02:01:31,000 --> 02:01:33,000
你们有人写没说 basic 吗

4345
02:01:33,000 --> 02:01:37,000
vital basic 应该是大小写不敏感的

4346
02:01:37,000 --> 02:01:39,000
但是 vital basic 是不是大小写保留的呢

4347
02:01:40,000 --> 02:01:41,000
我记得不太清楚

4348
02:01:41,000 --> 02:01:46,000
因为当时 vv 当时最被人吐槽的

4349
02:01:46,000 --> 02:01:48,000
会不会最被职业成全吐槽的眼就是

4350
02:01:48,000 --> 02:01:50,000
它居然是一个大小写不敏感的语言

4351
02:01:50,000 --> 02:01:52,000
你可以想象吗

4352
02:01:54,000 --> 02:01:54,000
等一下

4353
02:01:54,000 --> 02:01:58,000
downate 它整个的个命名规则是一样的吗

4354
02:01:58,000 --> 02:01:58,000
不一样

4355
02:01:58,000 --> 02:02:00,000
downate 只是一个 run time

4356
02:02:00,000 --> 02:02:01,000
不一样

4357
02:02:01,000 --> 02:02:02,000
当然好多语言

4358
02:02:02,000 --> 02:02:05,000
当然是底层肯定是区分大小写

4359
02:02:05,000 --> 02:02:06,000
就是那套 IL

4360
02:02:06,000 --> 02:02:08,000
MAC 上面其实是可能

4361
02:02:08,000 --> 02:02:09,000
这个问题相对复杂的

4362
02:02:09,000 --> 02:02:12,000
因为 MAC 上它存在一个同一个文件系统

4363
02:02:12,000 --> 02:02:14,000
它有另外一种方式是可以大小写的

4364
02:02:15,000 --> 02:02:18,000
日治式区分大小写

4365
02:02:18,000 --> 02:02:18,000
对吧

4366
02:02:18,000 --> 02:02:22,000
我那个时候就是傻不拉机的把自己的分区隔成了

4367
02:02:22,000 --> 02:02:25,000
就是严格区分大小写的文件系统

4368
02:02:25,000 --> 02:02:26,000
后来好多游戏装不了

4369
02:02:26,000 --> 02:02:27,000
就是装游戏的时候

4370
02:02:28,000 --> 02:02:30,000
他会说你不能把这个程序

4371
02:02:30,000 --> 02:02:32,000
装在一个大小写敏感的分区上面

4372
02:02:34,000 --> 02:02:34,000
很扯

4373
02:02:34,000 --> 02:02:35,000
因为它不一样

4374
02:02:35,000 --> 02:02:36,000
对

4375
02:02:36,000 --> 02:02:37,000
这是另外一个

4376
02:02:37,000 --> 02:02:38,000
对

4377
02:02:38,000 --> 02:02:40,000
因为比如说 MAC 上我们现在用的主流的

4378
02:02:40,000 --> 02:02:43,000
就是固态存储

4379
02:02:43,000 --> 02:02:46,000
固态存储它现在默认的文件系统的格式是 APFS

4380
02:02:47,000 --> 02:02:48,000
但是在 MAC 上面

4381
02:02:48,000 --> 02:02:49,000
它是用的 MAC 的

4382
02:02:49,000 --> 02:02:54,000
APFS 的大小写不敏感的默认值

4383
02:02:54,000 --> 02:02:55,000
但是在 iPhone 上面

4384
02:02:55,000 --> 02:02:56,000
虽然你看不见

4385
02:02:56,000 --> 02:02:57,000
但是在 iPhone 上面

4386
02:02:57,000 --> 02:03:00,000
它用的默认是 APFS 大小写敏感的那一套

4387
02:03:00,000 --> 02:03:03,000
iPhone 是区分大小写的

4388
02:03:03,000 --> 02:03:06,000
就是 APFS 区分大小写的

4389
02:03:06,000 --> 02:03:07,000
APFS 是大小写敏感的

4390
02:03:07,000 --> 02:03:08,000
对

4391
02:03:09,000 --> 02:03:10,000
对

4392
02:03:10,000 --> 02:03:11,000
很奇怪 对吧

4393
02:03:11,000 --> 02:03:13,000
所以我觉得其实这是一个问题

4394
02:03:13,000 --> 02:03:16,000
因为我是觉得从信息的角度来讲

4395
02:03:16,000 --> 02:03:18,000
肯定说区分是更好的

4396
02:03:18,000 --> 02:03:20,000
只是说从

4397
02:03:20,000 --> 02:03:21,000
叫什么来的

4398
02:03:21,000 --> 02:03:22,000
idea proof 这个角度来看

4399
02:03:22,000 --> 02:03:23,000
可能稍微差一些

4400
02:03:23,000 --> 02:03:27,000
但是在 iOS 上面去用户是并不能直接读写

4401
02:03:27,000 --> 02:03:27,000
文件系统的

4402
02:03:27,000 --> 02:03:29,000
所以不存在这个问题

4403
02:03:29,000 --> 02:03:31,000
既然他们自己不是 idiot

4404
02:03:31,000 --> 02:03:32,000
那就没有这个问题了

4405
02:03:35,000 --> 02:03:35,000
好吧

4406
02:03:36,000 --> 02:03:36,000
等一下

4407
02:03:36,000 --> 02:03:37,000
Windows 现在什么状况

4408
02:03:37,000 --> 02:03:38,000
我有点忘了

4409
02:03:38,000 --> 02:03:39,000
Windows 是大小写敏感吗

4410
02:03:39,000 --> 02:03:40,000
不敏感

4411
02:03:40,000 --> 02:03:41,000
Windows 现在是大小写保留

4412
02:03:42,000 --> 02:03:43,000
那就跟 MAC 一样了

4413
02:03:43,000 --> 02:03:44,000
那就不敏感了

4414
02:03:44,000 --> 02:03:45,000
对

4415
02:03:46,000 --> 02:03:46,000
OK

4416
02:03:46,000 --> 02:03:49,000
然后 NTFS 是没有大小写敏感的选项的

4417
02:03:49,000 --> 02:03:50,000
对吧

4418
02:03:50,000 --> 02:03:50,000
应该是没有的

4419
02:03:52,000 --> 02:03:54,000
就这个其实大小写叫什么

4420
02:03:54,000 --> 02:03:55,000
大小写不敏感

4421
02:03:55,000 --> 02:03:56,000
当然是大小写保留

4422
02:03:56,000 --> 02:03:58,000
其实在实现上

4423
02:03:58,000 --> 02:04:00,000
其实有会导带来一个更麻烦的事情

4424
02:04:00,000 --> 02:04:02,000
就是你要存

4425
02:04:02,000 --> 02:04:03,000
比如说你想一下

4426
02:04:04,000 --> 02:04:05,000
你要去判断

4427
02:04:05,000 --> 02:04:07,000
这个文件到底在这个目标里面

4428
02:04:07,000 --> 02:04:07,000
存不存在的时候

4429
02:04:07,000 --> 02:04:08,000
你要做什么

4430
02:04:08,000 --> 02:04:10,000
你要先把这个文件名

4431
02:04:10,000 --> 02:04:11,000
找找找的目标文件名

4432
02:04:11,000 --> 02:04:13,000
你要先把它统一化成一个

4433
02:04:13,000 --> 02:04:14,000
比如说都是小写

4434
02:04:14,000 --> 02:04:15,000
或者都是大写

4435
02:04:15,000 --> 02:04:17,000
然后你还得把这个就叫什么来的

4436
02:04:17,000 --> 02:04:18,000
就是这有目标面

4437
02:04:18,000 --> 02:04:19,000
已经有的文件名

4438
02:04:19,000 --> 02:04:21,000
都得统一成

4439
02:04:21,000 --> 02:04:22,000
都想都想

4440
02:04:22,000 --> 02:04:25,000
你才能够足够自符比较

4441
02:04:25,000 --> 02:04:26,000
对不对

4442
02:04:27,000 --> 02:04:30,000
所以我觉得这个其实效率挺低的

4443
02:04:30,000 --> 02:04:31,000
对

4444
02:04:31,000 --> 02:04:33,000
所以我觉得大小写敏感还是一个更好的

4445
02:04:33,000 --> 02:04:34,000
一个方案

4446
02:04:37,000 --> 02:04:39,000
然后就是另外一个更加堪谍的问题了

4447
02:04:39,000 --> 02:04:43,000
就是文件名可不可以用 unicode 来写

4448
02:04:44,000 --> 02:04:46,000
用 emotional 来写是吧

4449
02:04:46,000 --> 02:04:47,000
现在是可以的

4450
02:04:47,000 --> 02:04:47,000
是

4451
02:04:48,000 --> 02:04:50,000
现在已经可以了

4452
02:04:50,000 --> 02:04:53,000
就好像 swift 最开始

4453
02:04:53,000 --> 02:04:56,000
不就是好多例子里面

4454
02:04:56,000 --> 02:04:58,000
都出现了用 unicode 做来的地方

4455
02:04:58,000 --> 02:05:00,000
就非常坑爹

4456
02:05:00,000 --> 02:05:01,000
对

4457
02:05:01,000 --> 02:05:03,000
你想要来一个自动完成的走道

4458
02:05:04,000 --> 02:05:05,000
一个现代的语言

4459
02:05:05,000 --> 02:05:08,000
它基本上都是以 unicode 的友好

4460
02:05:08,000 --> 02:05:11,000
或者叫做 unicode 的建议为

4461
02:05:11,000 --> 02:05:11,000
卖点

4462
02:05:11,000 --> 02:05:12,000
一个标准

4463
02:05:12,000 --> 02:05:12,000
对

4464
02:05:12,000 --> 02:05:13,000
卖点

4465
02:05:13,000 --> 02:05:13,000
你可以

4466
02:05:13,000 --> 02:05:17,000
可能也是刚才我们讨论的另外一个问题了

4467
02:05:17,000 --> 02:05:22,000
既然你就说不要以英语为中心主义的话

4468
02:05:22,000 --> 02:05:23,000
那我的文件

4469
02:05:23,000 --> 02:05:26,000
本国的辩量命名为什么不可以是中国呢

4470
02:05:28,000 --> 02:05:29,000
既然都可以是中国呢

4471
02:05:29,000 --> 02:05:31,000
为什么不能是一个

4472
02:05:32,000 --> 02:05:33,000
的礼膜几难

4473
02:05:33,000 --> 02:05:35,000
所以它可以吗

4474
02:05:35,000 --> 02:05:37,000
你刚才发出了一个什么声音

4475
02:05:38,000 --> 02:05:41,000
就是一个某一种表情符号

4476
02:05:42,000 --> 02:05:43,000
那嘔吐的那种

4477
02:05:44,000 --> 02:05:47,000
你刚才同学们

4478
02:05:47,000 --> 02:05:50,000
刚才 Ryo 念出了嘔吐这个表情符号

4479
02:05:51,000 --> 02:05:53,000
为他赋予了语言

4480
02:05:53,000 --> 02:05:55,000
这毕竟是一个成听觉的节目

4481
02:05:55,000 --> 02:05:56,000
你要我怎么办

4482
02:05:56,000 --> 02:05:58,000
我只能采用同感的方式给你们展现

4483
02:05:58,000 --> 02:06:00,000
我们感受到了

4484
02:06:02,000 --> 02:06:03,000
感受到了什么

4485
02:06:03,000 --> 02:06:04,000
是

4486
02:06:04,000 --> 02:06:05,000
以后 Ryo 应该出一套

4487
02:06:05,000 --> 02:06:07,000
应该在节目里面出一套

4488
02:06:07,000 --> 02:06:09,000
这个 emojie 的发音指南

4489
02:06:09,000 --> 02:06:10,000
不叫做

4490
02:06:10,000 --> 02:06:11,000
不叫做

4491
02:06:11,000 --> 02:06:14,000
podcast emoji user guide

4492
02:06:14,000 --> 02:06:14,000
对

4493
02:06:15,000 --> 02:06:17,000
比如说笑出诸教生这个 emojie

4494
02:06:22,000 --> 02:06:23,000
有这个 emojie 吗

4495
02:06:23,000 --> 02:06:24,000
没有这个 emojie

4496
02:06:27,000 --> 02:06:29,000
就是我这个就不叫 emojie 了

4497
02:06:29,000 --> 02:06:30,000
这个叫什么

4498
02:06:30,000 --> 02:06:32,000
这叫 voice emoji

4499
02:06:32,000 --> 02:06:33,000
对吧

4500
02:06:34,000 --> 02:06:35,000
audio emoji

4501
02:06:35,000 --> 02:06:36,000
这根本就不是 mode

4502
02:06:38,000 --> 02:06:38,000
对

4503
02:06:38,000 --> 02:06:39,000
其实就是

4504
02:06:40,000 --> 02:06:40,000
这里

4505
02:06:40,000 --> 02:06:42,000
就是 unicode 作为命名的方式

4506
02:06:42,000 --> 02:06:43,000
就是刚才我会出现

4507
02:06:43,000 --> 02:06:44,000
类似于

4508
02:06:44,000 --> 02:06:45,000
就开始提到的

4509
02:06:47,000 --> 02:06:49,000
中文的扩号和英文的扩号

4510
02:06:49,000 --> 02:06:50,000
怎么长到都一样

4511
02:06:50,000 --> 02:06:53,000
但是为什么我始终找不到文件的问题

4512
02:06:53,000 --> 02:06:53,000
对不对

4513
02:06:53,000 --> 02:06:54,000
但 unicode 也提供了

4514
02:06:55,000 --> 02:06:56,000
我们之前也解释过

4515
02:06:56,000 --> 02:06:57,000
有那个叫什么

4516
02:06:57,000 --> 02:06:59,000
叫什么 cli 的方案

4517
02:06:59,000 --> 02:06:59,000
对不对

4518
02:07:01,000 --> 02:07:03,000
就是虽然这两个它不是同一个马卫

4519
02:07:03,000 --> 02:07:06,000
但是我们在搜索或者是在处的时候

4520
02:07:06,000 --> 02:07:08,000
认为他们在语意上是等价的

4521
02:07:08,000 --> 02:07:10,000
所以理论上你只要找到这个东西

4522
02:07:10,000 --> 02:07:12,000
也能找到另外一个

4523
02:07:12,000 --> 02:07:14,000
但这个就是程序要做更加复杂的

4524
02:07:15,000 --> 02:07:16,000
特别的 handle

4525
02:07:16,000 --> 02:07:17,000
就不能只简单的

4526
02:07:18,000 --> 02:07:19,000
我只要比较这两个

4527
02:07:19,000 --> 02:07:20,000
这个致富创意的

4528
02:07:20,000 --> 02:07:22,000
他们一个字节是不是一样就可以了

4529
02:07:22,000 --> 02:07:22,000
对吧

4530
02:07:22,000 --> 02:07:24,000
就是会变得更加复杂

4531
02:07:24,000 --> 02:07:25,000
那个超复杂的

4532
02:07:26,000 --> 02:07:27,000
所以这个什么

4533
02:07:27,000 --> 02:07:29,000
为什么我们不能有一个简单安全的

4534
02:07:29,000 --> 02:07:31,000
应用的系统

4535
02:07:31,000 --> 02:07:32,000
可能就是对吧

4536
02:07:32,000 --> 02:07:33,000
这帮人干的

4537
02:07:36,000 --> 02:07:37,000
你们记不记得当年

4538
02:07:37,000 --> 02:07:37,000
应该是

4539
02:07:37,000 --> 02:07:39,000
好几年前的

4540
02:07:39,000 --> 02:07:40,000
就是 iPhone 的

4541
02:07:40,000 --> 02:07:42,000
在某最开始的几年的时候

4542
02:07:42,000 --> 02:07:43,000
经常会出现

4543
02:07:43,000 --> 02:07:45,000
因为你收到一条短信铃链

4544
02:07:45,000 --> 02:07:47,000
包含了一个奇怪 UniCode 的组合

4545
02:07:47,000 --> 02:07:48,000
然后你系统

4546
02:07:48,000 --> 02:07:49,000
就崩溃了

4547
02:07:49,000 --> 02:07:49,000
对

4548
02:07:49,000 --> 02:07:52,000
系统就司机或者崩溃了

4549
02:07:52,000 --> 02:07:52,000
这种情况

4550
02:07:52,000 --> 02:07:53,000
对吧

4551
02:07:53,000 --> 02:07:53,000
对

4552
02:07:53,000 --> 02:07:55,000
你可以说这个叫什么

4553
02:07:55,000 --> 02:07:59,000
程序原写的代码软件子杖不够高

4554
02:07:59,000 --> 02:07:59,000
没错

4555
02:07:59,000 --> 02:08:00,000
事实上也是这样的

4556
02:08:00,000 --> 02:08:01,000
对吧

4557
02:08:01,000 --> 02:08:03,000
但是这个复杂度是因为什么东西引起的

4558
02:08:04,000 --> 02:08:06,000
所以现在 UniCode

4559
02:08:06,000 --> 02:08:07,000
他们在做很多事情的话

4560
02:08:07,000 --> 02:08:10,000
首先在安全性上面

4561
02:08:10,000 --> 02:08:13,000
是他们很大的一个考虑因素

4562
02:08:13,000 --> 02:08:14,000
对

4563
02:08:14,000 --> 02:08:15,000
对

4564
02:08:15,000 --> 02:08:16,000
在各家实现的时候要考虑

4565
02:08:16,000 --> 02:08:19,000
因为他们进行信息交换的时候

4566
02:08:19,000 --> 02:08:20,000
就全部都传过去了

4567
02:08:20,000 --> 02:08:22,000
一传过去的话

4568
02:08:22,000 --> 02:08:23,000
对

4569
02:08:23,000 --> 02:08:24,000
就是本质上

4570
02:08:24,000 --> 02:08:25,000
你从信息安全的角度来讲

4571
02:08:25,000 --> 02:08:26,000
这个是

4572
02:08:26,000 --> 02:08:30,000
就是说你只要从外部传过来的一段信息

4573
02:08:30,000 --> 02:08:30,000
你就认为

4574
02:08:30,000 --> 02:08:32,000
摸人他应该是不可信的

4575
02:08:32,000 --> 02:08:32,000
对吧

4576
02:08:32,000 --> 02:08:34,000
然后又恰巧碰

4577
02:08:34,000 --> 02:08:37,000
碰下了 UniCode 这么一套复杂的要死的系统之后

4578
02:08:37,000 --> 02:08:39,000
那就很容易出现问题

4579
02:08:39,000 --> 02:08:40,000
因为复杂度越高

4580
02:08:40,000 --> 02:08:41,000
Bug 越多

4581
02:08:41,000 --> 02:08:42,000
对

4582
02:08:42,000 --> 02:08:45,000
所以一开始他们就有些朋友就

4583
02:08:45,000 --> 02:08:46,000
可能就觉得很奇怪

4584
02:08:46,000 --> 02:08:48,000
UniCode 不就是一个文字的编码吗

4585
02:08:48,000 --> 02:08:51,000
怎么还会跟信息安全的程序说错了

4586
02:08:51,000 --> 02:08:55,000
其实就是因为它里面有很多复杂的各种文字都加在里面

4587
02:08:55,000 --> 02:08:57,000
所以很容易做文章

4588
02:08:59,000 --> 02:09:02,000
B 的吴陶都已经不再从事安全行业了

4589
02:09:02,000 --> 02:09:04,000
都是用户需求的坑

4590
02:09:05,000 --> 02:09:08,000
我觉得主要还是怎么说

4591
02:09:08,000 --> 02:09:09,000
安全行业需要人们有意识

4592
02:09:09,000 --> 02:09:12,000
就是只有人们认为安全是重要的时候

4593
02:09:12,000 --> 02:09:14,000
安全层安全权行业才有前途

4594
02:09:14,000 --> 02:09:17,000
现在只能说大部分人都太没有

4595
02:09:17,000 --> 02:09:19,000
就太不在乎了

4596
02:09:19,000 --> 02:09:21,000
只有等到失窃的时候才会后悔

4597
02:09:21,000 --> 02:09:22,000
真的

4598
02:09:22,000 --> 02:09:24,000
那肯定

4599
02:09:24,000 --> 02:09:25,000
对

4600
02:09:25,000 --> 02:09:27,000
但我就说你的解决方案什么

4601
02:09:27,000 --> 02:09:28,000
那就只能说就扎大投入

4602
02:09:28,000 --> 02:09:30,000
但我的想法就是说

4603
02:09:30,000 --> 02:09:32,000
能不能能不能够可以不要加大成本

4604
02:09:32,000 --> 02:09:33,000
就是不要给我搞那么多

4605
02:09:33,000 --> 02:09:34,000
有点客套麻烦事好

4606
02:09:34,000 --> 02:09:36,000
为什么要组合

4607
02:09:37,000 --> 02:09:40,000
一个字一个马位代表一个字不好吗

4608
02:09:40,000 --> 02:09:41,000
你不缺那几个马位

4609
02:09:41,000 --> 02:09:41,000
对吧

4610
02:09:41,000 --> 02:09:43,000
组合个毛线

4611
02:09:43,000 --> 02:09:43,000
对

4612
02:09:43,000 --> 02:09:44,000
你知道有一种

4613
02:09:44,000 --> 02:09:50,000
比如说路啊路就是一个所谓 Askie Clean 的这么一个编程院

4614
02:09:50,000 --> 02:09:56,000
它的核心的整个 Library 是不会触及到 Askie 的第八位的

4615
02:09:56,000 --> 02:09:58,000
就全部都 100

4616
02:09:58,000 --> 02:09:59,000
就是七位搞定

4617
02:09:59,000 --> 02:10:00,000
所有的东西都在

4618
02:10:01,000 --> 02:10:03,000
就是耳熟能详

4619
02:10:03,000 --> 02:10:04,000
所有计算机

4620
02:10:04,000 --> 02:10:06,000
所有的设计员系统都支持的这些马位里面

4621
02:10:07,000 --> 02:10:08,000
这也是一个思路

4622
02:10:08,000 --> 02:10:12,000
就是走绝对可行的最小的集合

4623
02:10:12,000 --> 02:10:13,000
但是不行

4624
02:10:13,000 --> 02:10:14,000
用户需求提出来

4625
02:10:14,000 --> 02:10:15,000
我就要看这个

4626
02:10:16,000 --> 02:10:16,000
对

4627
02:10:16,000 --> 02:10:17,000
以某几种方案

4628
02:10:21,000 --> 02:10:24,000
Rail 是本日最佳声音

4629
02:10:25,000 --> 02:10:26,000
对吧

4630
02:10:26,000 --> 02:10:27,000
所以这个就是了

4631
02:10:27,000 --> 02:10:29,000
最终还是像用户需求妥协了

4632
02:10:29,000 --> 02:10:32,000
还是必须得硬着头皮上

4633
02:10:32,000 --> 02:10:34,000
就把这些 bug 都给修了

4634
02:10:34,000 --> 02:10:35,000
然后拿着超级后

4635
02:10:35,000 --> 02:10:38,000
那个 Unicode 现在应该是出到 11 了

4636
02:10:38,000 --> 02:10:39,000
对不对

4637
02:10:39,000 --> 02:10:39,000
对

4638
02:10:39,000 --> 02:10:40,000
13 了

4639
02:10:40,000 --> 02:10:41,000
13 了

4640
02:10:41,000 --> 02:10:41,000
我又 out 了

4641
02:10:41,000 --> 02:10:44,000
就是那个册子也有多少页了

4642
02:10:44,000 --> 02:10:45,000
现在

4643
02:10:45,000 --> 02:10:46,000
它那个规范

4644
02:10:46,000 --> 02:10:46,000
哦

4645
02:10:46,000 --> 02:10:48,000
你说对不对

4646
02:10:48,000 --> 02:10:49,000
那个 PD 也付

4647
02:10:49,000 --> 02:10:50,000
给我们两海了

4648
02:10:51,000 --> 02:10:52,000
对啊

4649
02:10:52,000 --> 02:10:53,000
应该得上百照了吧

4650
02:10:53,000 --> 02:10:53,000
我估计

4651
02:10:54,000 --> 02:10:59,000
Unicode 的第 11 版的 core specification

4652
02:10:59,000 --> 02:11:02,000
的 PDF 版本是 976 页

4653
02:11:05,000 --> 02:11:06,000
那 13 肯定超过 1000 了

4654
02:11:09,000 --> 02:11:12,000
但是这个 PDF 一共才 14.2 M

4655
02:11:13,000 --> 02:11:14,000
还好

4656
02:11:14,000 --> 02:11:16,000
这还只是 core

4657
02:11:16,000 --> 02:11:16,000
那还有周边的

4658
02:11:17,000 --> 02:11:19,000
这只是 core specific

4659
02:11:19,000 --> 02:11:20,000
这就不带那个码表

4660
02:11:20,000 --> 02:11:21,000
对的

4661
02:11:21,000 --> 02:11:23,000
复路还有那些数据表非常多

4662
02:11:23,000 --> 02:11:24,000
对

4663
02:11:24,000 --> 02:11:25,000
这只是 core specification

4664
02:11:25,000 --> 02:11:28,000
一个超级无底的深坑

4665
02:11:30,000 --> 02:11:31,000
想一想

4666
02:11:31,000 --> 02:11:32,000
就是累啊

4667
02:11:32,000 --> 02:11:34,000
对于我们这种就是尽可能说

4668
02:11:34,000 --> 02:11:38,000
砍用灰球不要增加复杂度的这种思维方式的

4669
02:11:38,000 --> 02:11:41,000
这个有什么过于复杂可以不做

4670
02:11:41,000 --> 02:11:41,000
对吧

4671
02:11:45,000 --> 02:11:45,000
好吧

4672
02:11:45,000 --> 02:11:48,000
今天我们脑洞也比较多

4673
02:11:48,000 --> 02:11:51,000
然后这个聊了

4674
02:11:51,000 --> 02:11:52,000
哇

4675
02:11:52,000 --> 02:11:53,000
天哪

4676
02:11:53,000 --> 02:11:54,000
从哪里掉到大壁了

4677
02:11:55,000 --> 02:11:55,000
不过挺好的

4678
02:11:55,000 --> 02:11:58,000
就是整个命名规则

4679
02:11:58,000 --> 02:11:59,000
对吧

4680
02:11:59,000 --> 02:12:01,000
就是文向徛徒

4681
02:12:01,000 --> 02:12:02,000
字书上的长度

4682
02:12:02,000 --> 02:12:04,000
然后空格

4683
02:12:06,000 --> 02:12:08,000
保留字不允许的字符

4684
02:12:08,000 --> 02:12:11,000
不允许的这些文件名是否区别

4685
02:12:11,000 --> 02:12:12,000
大小写

4686
02:12:12,000 --> 02:12:14,000
这个就是命名的该说的都说了

4687
02:12:15,000 --> 02:12:17,000
也聊了我一桩心愿

4688
02:12:17,000 --> 02:12:19,000
跳了一串青岩

4689
02:12:20,000 --> 02:12:22,000
这我逼了好久没说了

4690
02:12:23,000 --> 02:12:24,000
可以明目了

4691
02:12:25,000 --> 02:12:28,000
并没有明目我们还要把你抓来串台

4692
02:12:29,000 --> 02:12:30,000
好的

4693
02:12:30,000 --> 02:12:32,000
好了你们可以收个伪

4694
02:12:32,000 --> 02:12:38,000
OK 您刚才收到的节目是内核空虹一堂贴近两贴近计算机

4695
02:12:38,000 --> 02:12:40,000
技术主题的娱乐 podcast

4696
02:12:40,000 --> 02:12:44,000
我们号称硬核但是也没有什么干货想听听不想听听就别听

4697
02:12:44,000 --> 02:12:50,000
我们的网址是 pn.iceu 您可以在网站上找到订阅我们节目的方法以及联络我们的方式

4698
02:12:50,000 --> 02:12:55,000
如果您期待我们更频繁的更新节目欢迎您到爱发店为我们捐款

4699
02:12:55,000 --> 02:12:56,000
捐款地址是

4700
02:12:57,000 --> 02:13:00,000
爱发店.net slash at kernel panic

4701
02:13:00,000 --> 02:13:03,000
先发店后催更文明催更从你做起

4702
02:13:03,000 --> 02:13:09,000
如果您觉得意犹未尽也欢迎您去收听 Rio 和黄海主播的

4703
02:13:09,000 --> 02:13:10,000
风头宣

4704
02:13:10,000 --> 02:13:13,000
Rio 和人家主播的提前怀旧以及

4705
02:13:14,000 --> 02:13:16,000
基本不由无套主播的自弹自唱

4706
02:13:18,000 --> 02:13:19,000
好

4707
02:13:20,000 --> 02:13:25,000
我们的发电源机太长了你要念它去我们官网点点接谁记得住

4708
02:13:26,000 --> 02:13:28,000
说的是回忆我把这个删了

4709
02:13:28,000 --> 02:13:34,000
好吧那再次感谢大家收听本期的自弹自唱的删来节目自弹自串

4710
02:13:35,000 --> 02:13:42,000
如果大家对我们的节目有什么意见或者反馈都可以写邮件给我们的邮箱地址是 podcastatoype.com

4711
02:13:42,000 --> 02:13:46,000
podcastatoype.com

4712
02:13:46,000 --> 02:13:51,000
同时呢大家也可以在推特在微信以及在微博上面搜索

4713
02:13:52,000 --> 02:13:54,000
找到我们的 thtype

4714
02:13:54,000 --> 02:13:55,000
在 facebook 上搜索

4715
02:13:55,000 --> 02:13:58,000
或者 type is beautiful 都可以找到我们

4716
02:13:59,000 --> 02:14:01,000
这比我们掳手多了我觉得

4717
02:14:02,000 --> 02:14:04,000
没有对比就没有伤害

4718
02:14:04,000 --> 02:14:10,000
自弹自唱基本上是不需要催更的我们是隔周二播出从

4719
02:14:10,000 --> 02:14:18,000
开播以来就从来没有经断过所以呢大家可以顺便来给我们催更的话来加强我们的自弹自串的这样一个

4720
02:14:19,000 --> 02:14:22,000
串台节目的催更工作专门催自弹自串

4721
02:14:22,000 --> 02:14:26,000
希望我们下次的这个串台不会一年之后再见

4722
02:14:27,000 --> 02:14:28,000
OK

4723
02:14:28,000 --> 02:14:30,000
好感谢大家的收听

4724
02:14:30,000 --> 02:14:36,000
本次节目是 Eric 在 macOS 上剪辑制作完成的我们下次节目再见拜拜

4725
02:14:37,000 --> 02:14:37,000
拜拜

