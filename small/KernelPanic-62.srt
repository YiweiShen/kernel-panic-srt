1
00:00:00,000 --> 00:00:06,000
您正在收听内核恐慌一党大致以计算机科技为主题的娱乐 podcast

2
00:00:06,000 --> 00:00:10,000
我们号称硬核 但是也没有什么干货 想听人听不想听人就别听

3
00:00:10,000 --> 00:00:12,000
我们的网址是 pan.icu

4
00:00:12,000 --> 00:00:17,000
您可以在网站上找到订阅我们节目的方法以及联络我们的方式

5
00:00:17,000 --> 00:00:18,000
我是舞涛

6
00:00:18,000 --> 00:00:19,000
我是 Rail

7
00:00:19,000 --> 00:00:23,000
今天节目开始前我们做一个简单的 follow up

8
00:00:23,000 --> 00:00:24,000
好久没有做 follow up 了

9
00:00:25,000 --> 00:00:31,000
是针对上一期叫银丝的光猫提到的几个问题

10
00:00:31,000 --> 00:00:33,000
我随便说一下后续吧

11
00:00:33,000 --> 00:00:38,000
第一就是说银丝光猫案算是告破一半

12
00:00:38,000 --> 00:00:39,000
怎么个一半的方法

13
00:00:39,000 --> 00:00:47,000
就是我发出去之后有我的光猫的生产厂家的朋友找过来跟我确认过

14
00:00:47,000 --> 00:00:52,000
那个手势确实是他们光猫里面的设备发出来的

15
00:00:52,000 --> 00:00:55,000
不是外面的设备也不是我的网站里面其他设备发出来

16
00:00:55,000 --> 00:00:59,000
他们在他们的测试环境里面也浮现了这个东西

17
00:00:59,000 --> 00:01:04,000
然后产生诗的选项也找到了就是环路检测

18
00:01:04,000 --> 00:01:05,000
所以我猜对了

19
00:01:05,000 --> 00:01:06,000
对你猜对了

20
00:01:06,000 --> 00:01:08,000
他不是每 10 秒发一个包吗

21
00:01:08,000 --> 00:01:10,000
那就用于环路检测

22
00:01:10,000 --> 00:01:14,000
但是没有找到这个东西是谁写的

23
00:01:14,000 --> 00:01:17,000
也不知道为什么是这个诗

24
00:01:17,000 --> 00:01:21,000
我说过的光猫型号是上海 Bare R-Cart 生产制造的

25
00:01:21,000 --> 00:01:24,000
所以目前也不知道是 Bare 的功能是干的

26
00:01:24,000 --> 00:01:25,000
还是 R-Cart 的功能是干的

27
00:01:25,000 --> 00:01:28,000
还是说上海 Bare R-Cart 后来的功能是干的

28
00:01:28,000 --> 00:01:29,000
目前找不到人

29
00:01:29,000 --> 00:01:31,000
因为也不知道这个 Firmware 大概谁写的

30
00:01:31,000 --> 00:01:32,000
就可能也比较久远

31
00:01:32,000 --> 00:01:34,000
暴露了他们没有 Version Control 是吧

32
00:01:34,000 --> 00:01:39,000
或者说找我朋友他不是做那块开发的

33
00:01:39,000 --> 00:01:40,000
所以他也不清楚

34
00:01:40,000 --> 00:01:43,000
但没有这个权力去查看到底这个是谁扛避的进去了

35
00:01:43,000 --> 00:01:44,000
我也不知道他们有没有

36
00:01:44,000 --> 00:01:45,000
有可能是没有的

37
00:01:45,000 --> 00:01:46,000
对这个就不清楚了

38
00:01:46,000 --> 00:01:48,000
他们内部的问题

39
00:01:48,000 --> 00:01:50,000
但就说至少我说这个算是告破了一半

40
00:01:50,000 --> 00:01:52,000
就是说找到了源头

41
00:01:52,000 --> 00:01:54,000
找到了他这个是干嘛用的

42
00:01:54,000 --> 00:01:55,000
但是不知道是谁写进去的

43
00:01:55,000 --> 00:01:57,000
以及为什么是这首诗对吧

44
00:01:57,000 --> 00:01:58,000
OK

45
00:01:58,000 --> 00:01:59,000
这是第一个 Fuller

46
00:01:59,000 --> 00:02:02,000
这个 Fuller 不算是我们不是花了很长时间在讨论

47
00:02:02,000 --> 00:02:05,000
到底能不能够用已有房子里面

48
00:02:05,000 --> 00:02:11,000
用于接电视的同桌电来延伸 WiFi 的信号的距离

49
00:02:11,000 --> 00:02:12,000
对吧

50
00:02:12,000 --> 00:02:15,000
目前来看有两种观点

51
00:02:15,000 --> 00:02:17,000
我们到时候也把这两个连接

52
00:02:17,000 --> 00:02:20,000
是一个 SuperUter 上面的回答放进去

53
00:02:20,000 --> 00:02:22,000
就是说正常你直接接

54
00:02:22,000 --> 00:02:23,000
就是我上次我说那个方法

55
00:02:23,000 --> 00:02:25,000
你直接把那根同桌电缆

56
00:02:25,000 --> 00:02:28,000
就墙里面的一个同桌电缆给电视用的

57
00:02:28,000 --> 00:02:31,000
当成 WiFi 天线来延长是不行的

58
00:02:31,000 --> 00:02:32,000
因为它的电阻不对

59
00:02:32,000 --> 00:02:36,000
那个同桌电缆的电阻好像说是一点我确认一下

60
00:02:36,000 --> 00:02:41,000
好像是 75 欧的电阻

61
00:02:41,000 --> 00:02:45,000
但是 WiFi 天线的那个就是那个叫

62
00:02:45,000 --> 00:02:48,000
这个专业名字我找到了叫做亏线

63
00:02:48,000 --> 00:02:52,000
就是延长 WiFi 的天线

64
00:02:52,000 --> 00:02:57,000
那个那个那个导线的电阻是 50 欧

65
00:02:57,000 --> 00:02:59,000
所以正常你直接接上去肯定是不行的

66
00:02:59,000 --> 00:03:00,000
因为信号很快就衰减了

67
00:03:00,000 --> 00:03:05,000
但是有一种设备是可以转换一下

68
00:03:05,000 --> 00:03:07,000
就是它在那个同桌电缆两端

69
00:03:07,000 --> 00:03:09,000
都接上一个类似于转机器样的东西

70
00:03:09,000 --> 00:03:14,000
可以把一个 WiFi 的信号转成那个同桌电缆

71
00:03:14,000 --> 00:03:17,000
是和类似于一想像它是一个放大或者怎么样

72
00:03:17,000 --> 00:03:19,000
然后把它传达到另外一端

73
00:03:19,000 --> 00:03:20,000
最后再解码出来

74
00:03:20,000 --> 00:03:22,000
然后再重新转被 WiFi 能用的

75
00:03:22,000 --> 00:03:23,000
就这种东西是有的

76
00:03:23,000 --> 00:03:24,000
但这个设备有点贵

77
00:03:24,000 --> 00:03:26,000
而且国内我在淘宝

78
00:03:26,000 --> 00:03:28,000
在天猫在金融上都没有找到

79
00:03:28,000 --> 00:03:30,000
但是在亚马逊上好像是有的

80
00:03:30,000 --> 00:03:33,000
那个东西叫做 Mocha MOCA

81
00:03:33,000 --> 00:03:36,000
我不知道这个这个是什么这个缩写

82
00:03:36,000 --> 00:03:41,000
然后我还发现一个特别好玩的东西叫做 WiFi Over Coax

83
00:03:41,000 --> 00:03:44,000
就是专门干这件事情的

84
00:03:44,000 --> 00:03:47,000
就是专门在用那个同桌电缆

85
00:03:47,000 --> 00:03:49,000
延长 WiFi 信号的一个解决方案

86
00:03:49,000 --> 00:03:52,000
对 这样就要用的刚才那些东西

87
00:03:52,000 --> 00:03:55,000
所以就解决这个电阻不匹配的问题

88
00:03:55,000 --> 00:03:57,000
大家如果生活在国外

89
00:03:57,000 --> 00:04:00,000
然后你这个房子里面没有走往

90
00:04:00,000 --> 00:04:01,000
现在只有这个同桌电缆

91
00:04:01,000 --> 00:04:03,000
你去想解决这个信号的问题的话

92
00:04:03,000 --> 00:04:04,000
你可以去亚马逊上搜一下

93
00:04:04,000 --> 00:04:06,000
就是 Mocha MOCA

94
00:04:06,000 --> 00:04:10,000
那个 MCA 都是大写 O 4 小写这么一个设备

95
00:04:10,000 --> 00:04:12,000
它可以完成这个特写

96
00:04:12,000 --> 00:04:15,000
然后我们也在我们的听众群里面

97
00:04:15,000 --> 00:04:17,000
就是 Telegram 的听众群里面

98
00:04:17,000 --> 00:04:18,000
有在海外的听众朋友

99
00:04:18,000 --> 00:04:19,000
他确实也买了用过这个东西

100
00:04:19,000 --> 00:04:20,000
好像效果还不错

101
00:04:20,000 --> 00:04:21,000
能够达到牵照吧

102
00:04:21,000 --> 00:04:23,000
他应该说是

103
00:04:23,000 --> 00:04:26,000
如果你不是一定要延长这个 WiFi 信号的话

104
00:04:26,000 --> 00:04:29,000
可以直接把网线转到同桌电缆上

105
00:04:29,000 --> 00:04:30,000
就那个转接头非常简陋

106
00:04:30,000 --> 00:04:33,000
但是这就是也可以的

107
00:04:33,000 --> 00:04:34,000
对 就这种方案也是可行的

108
00:04:34,000 --> 00:04:35,000
但就具体怎么操作

109
00:04:35,000 --> 00:04:37,000
大家可能要去自信研究一下

110
00:04:37,000 --> 00:04:39,000
因为我房子里面有同桌电缆

111
00:04:39,000 --> 00:04:41,000
但我实在是不想搞它

112
00:04:42,000 --> 00:04:43,000
OK

113
00:04:43,000 --> 00:04:44,000
好 OK

114
00:04:44,000 --> 00:04:45,000
就是 Folava

115
00:04:45,000 --> 00:04:47,000
今天我们开始今天的正题

116
00:04:47,000 --> 00:04:48,000
今天有点特别

117
00:04:48,000 --> 00:04:51,000
我们好久好久没有邀请过嘉宾

118
00:04:51,000 --> 00:04:54,000
今天我们邀请到一位重磅嘉宾

119
00:04:54,000 --> 00:04:56,000
就是我们的老朋友

120
00:04:56,000 --> 00:04:58,000
这期我们又是跪着路了

121
00:04:58,000 --> 00:04:58,000
可以说

122
00:05:00,000 --> 00:05:01,000
这期我们邀请到我的一个好朋友

123
00:05:01,000 --> 00:05:04,000
是大家很多人都用过

124
00:05:04,000 --> 00:05:09,000
网络开发调试工具 Search 的作者

125
00:05:09,000 --> 00:05:09,000
刘亚诚

126
00:05:09,000 --> 00:05:10,000
亚诚你好

127
00:05:11,000 --> 00:05:12,000
两位老师好

128
00:05:12,000 --> 00:05:16,000
要不亚诚你稍微简单介绍一下自己

129
00:05:16,000 --> 00:05:21,000
我觉得可能我自己的软件的收容和你们的听众

130
00:05:21,000 --> 00:05:22,000
其实应该出改变挺大的

131
00:05:23,000 --> 00:05:25,000
所以还需要再介绍一下

132
00:05:25,000 --> 00:05:27,000
我也不知道该怎么样去介绍

133
00:05:27,000 --> 00:05:29,000
东西应该是不用介绍的

134
00:05:29,000 --> 00:05:31,000
但是大家应该对你这个人还是不太熟悉

135
00:05:31,000 --> 00:05:33,000
我觉得你有什么可以给听众朋友们分享

136
00:05:33,000 --> 00:05:35,000
就是介绍一下自己的

137
00:05:35,000 --> 00:05:36,000
对

138
00:05:36,000 --> 00:05:38,000
然后有什么我们想知道

139
00:05:38,000 --> 00:05:42,000
怎么会接着在代替听众来提问的

140
00:05:42,000 --> 00:05:44,000
希望我就简单的说一下

141
00:05:44,000 --> 00:05:45,000
剩下的靠你们提问

142
00:05:46,000 --> 00:05:47,000
我现在的身份的话

143
00:05:47,000 --> 00:05:50,000
就是专职的 IS 的独立开发者

144
00:05:50,000 --> 00:05:52,000
然后之前的话

145
00:05:53,000 --> 00:05:55,000
主要是创业者的一个身份

146
00:05:55,000 --> 00:05:59,000
干过很多标准的一些创业的事情

147
00:05:59,000 --> 00:06:01,000
甚至还做过一些像技术列头

148
00:06:01,000 --> 00:06:05,000
这样的一些和技术都已经快越来越没相关的一些事情

149
00:06:05,000 --> 00:06:07,000
然后反正从 2015 年开始

150
00:06:07,000 --> 00:06:10,000
然后变成了一个专职的独立开发者

151
00:06:10,000 --> 00:06:12,000
现在的话主要的产品是

152
00:06:12,000 --> 00:06:15,000
SURGE 和 ALPASS 两块

153
00:06:15,000 --> 00:06:15,000
然后同时的话

154
00:06:15,000 --> 00:06:17,000
还有一些客户的项目

155
00:06:17,000 --> 00:06:18,000
作为技术过问去参与

156
00:06:18,000 --> 00:06:20,000
大概就这些

157
00:06:20,000 --> 00:06:22,000
ALPASS 可能很多人不知道

158
00:06:22,000 --> 00:06:23,000
是一个密码管理器

159
00:06:23,000 --> 00:06:27,000
是应该是比 OnePassword 要好用的

160
00:06:27,000 --> 00:06:27,000
好

161
00:06:27,000 --> 00:06:28,000
谢谢

162
00:06:28,000 --> 00:06:29,000
但这个相对来说比较小重

163
00:06:29,000 --> 00:06:30,000
但密码管理器

164
00:06:30,000 --> 00:06:32,000
我自己在我们之前节目里面

165
00:06:32,000 --> 00:06:33,000
还有单独讲过一起

166
00:06:33,000 --> 00:06:34,000
不过那个时候你还没有写

167
00:06:34,000 --> 00:06:37,000
所以我们如果下次再聊的时候

168
00:06:37,000 --> 00:06:39,000
可以到时候再专门介绍一下

169
00:06:39,000 --> 00:06:41,000
但虽然今天我们邀请了雅陈

170
00:06:41,000 --> 00:06:43,000
但是我们今天不聊 SURGE

171
00:06:43,000 --> 00:06:44,000
也不聊 ALPASS

172
00:06:44,000 --> 00:06:45,000
甚至也不聊

173
00:06:46,000 --> 00:06:48,000
可以最后有一点相关

174
00:06:48,000 --> 00:06:50,000
但是甚至也不主要聊独立开发

175
00:06:50,000 --> 00:06:52,000
今天我们其实是要聊苹果

176
00:06:52,000 --> 00:06:52,000
对不对

177
00:06:52,000 --> 00:06:54,000
这个事也比较简单

178
00:06:54,000 --> 00:06:56,000
是因为目前我们三个里面

179
00:06:56,000 --> 00:06:57,000
只有雅陈

180
00:06:57,000 --> 00:07:00,000
现在你是买了 M 1 芯片的 MAPL PRO 对吧

181
00:07:00,000 --> 00:07:00,000
对

182
00:07:00,000 --> 00:07:01,000
是的

183
00:07:01,000 --> 00:07:03,000
好像是我就比较急

184
00:07:03,000 --> 00:07:05,000
所以你是在发布的那一天

185
00:07:05,000 --> 00:07:07,000
可以订的时候第一时间订的

186
00:07:07,000 --> 00:07:07,000
对

187
00:07:07,000 --> 00:07:09,000
而且我当时第一时间订了之后

188
00:07:09,000 --> 00:07:12,000
由于它标准配置是 8 G 内存

189
00:07:12,000 --> 00:07:14,000
要定制版才能是 16 G 内存

190
00:07:14,000 --> 00:07:17,000
定制了之后会使得发货周期延迟到

191
00:07:17,000 --> 00:07:19,000
我印象中正常发货时间

192
00:07:19,000 --> 00:07:21,000
应该是 20 号还是 19 号左右

193
00:07:21,000 --> 00:07:23,000
我特别急的又等不了

194
00:07:23,000 --> 00:07:25,000
然后拖了一个 APPLE 的朋友

195
00:07:25,000 --> 00:07:26,000
让他帮我查了一下

196
00:07:26,000 --> 00:07:28,000
现在 10 G 点的苦存

197
00:07:28,000 --> 00:07:29,000
发现李伟加比较近的一家店

198
00:07:29,000 --> 00:07:31,000
还有 16 G 的一个高配版

199
00:07:31,000 --> 00:07:33,000
我就立刻跑到店里去

200
00:07:33,000 --> 00:07:34,000
现场拿了他回来

201
00:07:34,000 --> 00:07:36,000
然后原来的定难给取消了

202
00:07:36,000 --> 00:07:37,000
这里有个小知识

203
00:07:37,000 --> 00:07:39,000
就是说我们通常认为

204
00:07:39,000 --> 00:07:42,000
苹果店里面只有那种所谓的标配版

205
00:07:42,000 --> 00:07:42,000
对吧

206
00:07:42,000 --> 00:07:44,000
它比如说通常它苹果

207
00:07:44,000 --> 00:07:44,000
它在网站上

208
00:07:44,000 --> 00:07:45,000
它给一个 MAC 的配置

209
00:07:45,000 --> 00:07:47,000
它会给一个低配和一个高配

210
00:07:47,000 --> 00:07:48,000
这两个都是标准配置

211
00:07:48,000 --> 00:07:50,000
你不用去定制

212
00:07:50,000 --> 00:07:52,000
就可以直接在店里买到的

213
00:07:52,000 --> 00:07:52,000
对吧

214
00:07:52,000 --> 00:07:53,000
但是这次好像有点不一样

215
00:07:53,000 --> 00:07:53,000
对不对

216
00:07:53,000 --> 00:07:55,000
就是因为它的两个标准配置

217
00:07:55,000 --> 00:07:56,000
都只有 8 G 内存

218
00:07:56,000 --> 00:07:59,000
然后 16 G 理论上按照官网的逻辑

219
00:07:59,000 --> 00:08:01,000
你是需要定制才可以选的

220
00:08:01,000 --> 00:08:01,000
对

221
00:08:01,000 --> 00:08:02,000
是的

222
00:08:02,000 --> 00:08:03,000
但是其实我和朋友聊了一下

223
00:08:03,000 --> 00:08:05,000
他说一般的话

224
00:08:05,000 --> 00:08:08,000
店里面会被大概 5 台左右的顶配机器

225
00:08:08,000 --> 00:08:11,000
就是每家店都会有这么一个储备

226
00:08:11,000 --> 00:08:11,000
所以说的话

227
00:08:11,000 --> 00:08:13,000
如果就是不确定的话

228
00:08:13,000 --> 00:08:14,000
可以提前去他们官网上

229
00:08:14,000 --> 00:08:16,000
找到一个店的一个店的直接

230
00:08:16,000 --> 00:08:17,000
都不打他们的电话

231
00:08:17,000 --> 00:08:18,000
然后打电话去问一下

232
00:08:18,000 --> 00:08:20,000
他们现在有没有高配这个库存

233
00:08:20,000 --> 00:08:22,000
然后再过去直接就可以购买

234
00:08:22,000 --> 00:08:24,000
所以他们应对的场景

235
00:08:24,000 --> 00:08:25,000
就是一个土豪走进苹果店说

236
00:08:25,000 --> 00:08:27,000
我要你们店里最好的电脑

237
00:08:27,000 --> 00:08:28,000
你给我拿一台出来

238
00:08:28,000 --> 00:08:28,000
对

239
00:08:28,000 --> 00:08:31,000
我感觉应该是这个意思吧

240
00:08:31,000 --> 00:08:32,000
他比如说你去买顶配

241
00:08:32,000 --> 00:08:35,000
他我记得就是这一次的 M 1 的

242
00:08:35,000 --> 00:08:37,000
MacBook 他能选的

243
00:08:37,000 --> 00:08:39,000
只有是内存是可以变质

244
00:08:39,000 --> 00:08:41,000
就是高配的 8 G 和高配的 16 G

245
00:08:41,000 --> 00:08:43,000
然后唯一能选的就是 SSD 的配置了

246
00:08:43,000 --> 00:08:44,000
对吧

247
00:08:44,000 --> 00:08:46,000
那这个 SSD 他的高配的能队斗

248
00:08:46,000 --> 00:08:47,000
是配到哪里

249
00:08:47,000 --> 00:08:48,000
他店里面那台

250
00:08:48,000 --> 00:08:51,000
店里的机器我记得都是 ETB 的

251
00:08:51,000 --> 00:08:53,000
就是现在这次三个选项

252
00:08:53,000 --> 00:08:54,000
512 1 T 和 2 T

253
00:08:54,000 --> 00:08:56,000
我印象中全是 ET

254
00:08:56,000 --> 00:08:58,000
没有 2 T 的机器

255
00:08:58,000 --> 00:08:59,000
所以其实也没有真的到最顶

256
00:08:59,000 --> 00:09:03,000
就是所有的加到最大

257
00:09:03,000 --> 00:09:05,000
最贵的那款他还是没有的

258
00:09:05,000 --> 00:09:05,000
对

259
00:09:05,000 --> 00:09:06,000
而且颜色也只有升空灰

260
00:09:06,000 --> 00:09:09,000
就升空灰了 16 G 的 ETB 机器

261
00:09:09,000 --> 00:09:12,000
这个机器好像是有个 30 台左右

262
00:09:12,000 --> 00:09:13,000
你颜色也没得选

263
00:09:13,000 --> 00:09:15,000
如果你拿这台 16 G 的配置的话

264
00:09:15,000 --> 00:09:16,000
对

265
00:09:16,000 --> 00:09:16,000
是的

266
00:09:16,000 --> 00:09:16,000
没错

267
00:09:16,000 --> 00:09:18,000
所以但是本来我就是要选的话

268
00:09:18,000 --> 00:09:19,000
就选升空灰

269
00:09:19,000 --> 00:09:20,000
所以说这个倒是无错

270
00:09:20,000 --> 00:09:20,000
就刚好是吧

271
00:09:20,000 --> 00:09:23,000
他们其实还是有一些大数据支撑

272
00:09:23,000 --> 00:09:25,000
这个决策说一般买这种配置的人

273
00:09:25,000 --> 00:09:28,000
他不会选那种比较烧气的颜色

274
00:09:28,000 --> 00:09:29,000
而且这次其实颜色

275
00:09:29,000 --> 00:09:31,000
只有升空灰和颜色

276
00:09:31,000 --> 00:09:33,000
都是两个比较保守和传统的颜色

277
00:09:33,000 --> 00:09:34,000
也没过太大的区别

278
00:09:34,000 --> 00:09:37,000
SQ 数量是要比较简单的

279
00:09:37,000 --> 00:09:37,000
是吧

280
00:09:38,000 --> 00:09:38,000
对

281
00:09:38,000 --> 00:09:39,000
是的

282
00:09:39,000 --> 00:09:43,000
所以其实对土豪还是没有那么的友好

283
00:09:43,000 --> 00:09:43,000
对吧

284
00:09:43,000 --> 00:09:44,000
不能说我想买啥

285
00:09:44,000 --> 00:09:47,000
你给我最顶的不在目前

286
00:09:47,000 --> 00:09:49,000
Money is not a issue 的时候

287
00:09:49,000 --> 00:09:50,000
也没有买

288
00:09:50,000 --> 00:09:52,000
你还是得去网上定制

289
00:09:52,000 --> 00:09:53,000
我觉得要是真土豪的话

290
00:09:53,000 --> 00:09:56,000
可能不会在意是 M 1 还是什么

291
00:09:56,000 --> 00:09:57,000
直接来一个

292
00:09:57,000 --> 00:09:59,000
Mac Pro 就直接带走了是吧

293
00:09:59,000 --> 00:10:01,000
这好像是个物件

294
00:10:02,000 --> 00:10:04,000
土豪 stereotype

295
00:10:05,000 --> 00:10:06,000
所以目前你看

296
00:10:06,000 --> 00:10:11,000
就是我们网上看了一些各种媒体网站的测评

297
00:10:11,000 --> 00:10:12,000
但是我们聊一聊

298
00:10:12,000 --> 00:10:14,000
你实际使用下来的感受

299
00:10:14,000 --> 00:10:15,000
就是跟他们测评的

300
00:10:15,000 --> 00:10:17,000
你觉得有多大差异吗

301
00:10:17,000 --> 00:10:20,000
这个其实我作为最早就参与到

302
00:10:21,000 --> 00:10:24,000
ARM 芯片版本的 Apple 的开发的开发者来说

303
00:10:24,000 --> 00:10:25,000
因为 DTK 我早拿到了

304
00:10:26,000 --> 00:10:26,000
对

305
00:10:26,000 --> 00:10:27,000
你是有 DTK 的

306
00:10:27,000 --> 00:10:28,000
对

307
00:10:28,000 --> 00:10:28,000
是的

308
00:10:28,000 --> 00:10:29,000
但是 DTP 的话

309
00:10:29,000 --> 00:10:31,000
由于受协议限制

310
00:10:31,000 --> 00:10:32,000
我也没有还没有仔细去看

311
00:10:32,000 --> 00:10:33,000
在现在这个状态下

312
00:10:33,000 --> 00:10:37,000
我还能不能给他公开的发表一些 review

313
00:10:37,000 --> 00:10:38,000
一些意见

314
00:10:39,000 --> 00:10:40,000
我想想

315
00:10:40,000 --> 00:10:42,000
我觉得应该没什么太大的问题

316
00:10:43,000 --> 00:10:45,000
所以这个是有 NDA 的是吧

317
00:10:45,000 --> 00:10:46,000
DTK 是有 NDA 的

318
00:10:46,000 --> 00:10:46,000
对

319
00:10:46,000 --> 00:10:47,000
这是有 NDA 的

320
00:10:47,000 --> 00:10:48,000
它官方提的是

321
00:10:48,000 --> 00:10:51,000
我不可以在 Public 的场所去进退

322
00:10:51,000 --> 00:10:52,000
进行 review

323
00:10:53,000 --> 00:10:54,000
但是好像我没有仔细看

324
00:10:54,000 --> 00:10:55,000
它有没有一个期限

325
00:10:55,000 --> 00:10:57,000
到什么时间进

326
00:10:57,000 --> 00:10:58,000
好像是没有的

327
00:10:58,000 --> 00:11:01,000
那我为了避免踩到这坑里

328
00:11:01,000 --> 00:11:02,000
我还是尽量就不提它吧

329
00:11:02,000 --> 00:11:02,000
OK

330
00:11:02,000 --> 00:11:04,000
我们就假装它存在

331
00:11:04,000 --> 00:11:04,000
对

332
00:11:04,000 --> 00:11:05,000
我们谈论它

333
00:11:05,000 --> 00:11:07,000
但这并不是一个 review

334
00:11:07,000 --> 00:11:07,000
明白

335
00:11:07,000 --> 00:11:10,000
我就是在想打这个差遍球

336
00:11:10,000 --> 00:11:12,000
就是之前通过用 DTK 的时候

337
00:11:12,000 --> 00:11:13,000
我就能感受到

338
00:11:13,000 --> 00:11:16,000
这个苹果的 ARM 芯片

339
00:11:16,000 --> 00:11:17,000
这个 A 系列芯片的话

340
00:11:17,000 --> 00:11:21,000
很有可能它之后出来的正式产品会更牛逼

341
00:11:21,000 --> 00:11:24,000
就是原来已经其实很牛逼了

342
00:11:24,000 --> 00:11:26,000
但是等到一个

343
00:11:26,000 --> 00:11:27,000
毕竟那是那块芯片的话

344
00:11:27,000 --> 00:11:30,000
是 ARZ 是那个 iPad 之前用的芯片

345
00:11:30,000 --> 00:11:31,000
所以的话

346
00:11:31,000 --> 00:11:33,000
那么如果它本身就是为移动设备

347
00:11:33,000 --> 00:11:35,000
为低功耗设备设计的

348
00:11:35,000 --> 00:11:37,000
那如果是在这种基础上

349
00:11:37,000 --> 00:11:38,000
在为 MacBook

350
00:11:38,000 --> 00:11:40,000
或者 MacBook Pro 的话

351
00:11:40,000 --> 00:11:42,000
然后确实是更优化的

352
00:11:42,000 --> 00:11:43,000
就是一块芯片

353
00:11:43,000 --> 00:11:45,000
拿出来的效果应该是非常尽薄的

354
00:11:45,000 --> 00:11:47,000
然后确实的话

355
00:11:47,000 --> 00:11:49,000
从这几天的一个不管是测试

356
00:11:49,000 --> 00:11:50,000
还是使用来说

357
00:11:50,000 --> 00:11:53,000
都非常的让我感觉很兴奋

358
00:11:53,000 --> 00:11:54,000
这确实是一个

359
00:11:54,000 --> 00:11:57,000
可能有化时代意义的产品的这么一个进步

360
00:11:57,000 --> 00:11:59,000
就按我们行业里面的话说

361
00:11:59,000 --> 00:12:00,000
就是一屁股击

362
00:12:00,000 --> 00:12:02,000
爆了 intel 的牙膏

363
00:12:02,000 --> 00:12:02,000
对吧

364
00:12:02,000 --> 00:12:02,000
对

365
00:12:02,000 --> 00:12:04,000
我自己的话说是

366
00:12:04,000 --> 00:12:05,000
不是把 intel 按在地板上

367
00:12:05,000 --> 00:12:08,000
我查这地板已经快按穿了

368
00:12:08,000 --> 00:12:09,000
已经按出了一个关才来了

369
00:12:09,000 --> 00:12:11,000
可以把 intel 的概观定论了

370
00:12:11,000 --> 00:12:14,000
我们看到网上的测评

371
00:12:14,000 --> 00:12:15,000
看性能基本上都是这种

372
00:12:15,000 --> 00:12:18,000
我们能看墙上的定语

373
00:12:18,000 --> 00:12:20,000
都是什么 Massive Improvement

374
00:12:20,000 --> 00:12:22,000
就非常通常是吊打的

375
00:12:22,000 --> 00:12:24,000
至少我们看到数字跑分的

376
00:12:24,000 --> 00:12:25,000
跑分有很多指标

377
00:12:25,000 --> 00:12:27,000
我们看最常见的几个什么

378
00:12:27,000 --> 00:12:28,000
Geekbench 什么

379
00:12:28,000 --> 00:12:30,000
什么 Spec 那些

380
00:12:30,000 --> 00:12:33,000
都是可能提高了 70%

381
00:12:33,000 --> 00:12:35,000
这种级别的性能的提升

382
00:12:35,000 --> 00:12:38,000
而且很多网站的论述就是

383
00:12:38,000 --> 00:12:39,000
一开始我们是怀疑的

384
00:12:39,000 --> 00:12:42,000
一开始我们是非常抵触的

385
00:12:42,000 --> 00:12:43,000
不愿意相信这个结果的

386
00:12:43,000 --> 00:12:45,000
但是实际上手之后

387
00:12:45,000 --> 00:12:45,000
哇靠

388
00:12:45,000 --> 00:12:46,000
原来真的这么香

389
00:12:46,000 --> 00:12:49,000
对关键是就是说他在这种

390
00:12:49,000 --> 00:12:50,000
提供这种性能

391
00:12:50,000 --> 00:12:53,000
这么大幅度性能提升的情况下

392
00:12:53,000 --> 00:12:53,000
是基于什么

393
00:12:54,000 --> 00:12:55,000
是不发烫对吧

394
00:12:55,000 --> 00:12:57,000
按我看他们测评的方法

395
00:12:57,000 --> 00:12:59,000
评论的源于说是

396
00:12:59,000 --> 00:13:01,000
风扇基本不怎么转

397
00:13:01,000 --> 00:13:02,000
或者听不到

398
00:13:02,000 --> 00:13:04,000
然后特别是像 MacBook Air 这一款

399
00:13:04,000 --> 00:13:05,000
它根本就没有风扇

400
00:13:05,000 --> 00:13:08,000
而且续航能力还非常的恐怖

401
00:13:08,000 --> 00:13:08,000
就相关的

402
00:13:08,000 --> 00:13:11,000
如果说你在风扇又不转

403
00:13:11,000 --> 00:13:12,000
又不怎么发药的情况下

404
00:13:12,000 --> 00:13:14,000
你透明的能耗是低的

405
00:13:14,000 --> 00:13:15,000
电池不变的情况

406
00:13:15,000 --> 00:13:15,000
能耗变低

407
00:13:15,000 --> 00:13:17,000
你续航就起来变长了

408
00:13:17,000 --> 00:13:18,000
但是我们又想到会有那么长

409
00:13:18,000 --> 00:13:18,000
对吧

410
00:13:18,000 --> 00:13:20,000
对我其实都还有一个疑问

411
00:13:20,000 --> 00:13:23,000
Mac Pro 多的风扇拿来干吗的

412
00:13:23,000 --> 00:13:25,000
我现在就没有能让它转起来过

413
00:13:26,000 --> 00:13:27,000
但它在转吗

414
00:13:27,000 --> 00:13:29,000
就是你确定它是一直在转

415
00:13:29,000 --> 00:13:32,000
还是说需要才转

416
00:13:32,000 --> 00:13:34,000
我贴上去感受的时候

417
00:13:34,000 --> 00:13:36,000
应该是与非常低的频率在转的

418
00:13:36,000 --> 00:13:39,000
就是你基本上是完全感受不到它

419
00:13:39,000 --> 00:13:40,000
到它在转

420
00:13:40,000 --> 00:13:41,000
那实际上它确实在转

421
00:13:41,000 --> 00:13:42,000
它转的意义

422
00:13:42,000 --> 00:13:44,000
可能就是为了提供一个压力

423
00:13:44,000 --> 00:13:46,000
让灰尘不要进去

424
00:13:46,000 --> 00:13:48,000
不是为了散热

425
00:13:48,000 --> 00:13:49,000
可能真的是

426
00:13:49,000 --> 00:13:51,000
或者叫它围络一个

427
00:13:51,000 --> 00:13:53,000
因为这样它就叫什么来的

428
00:13:53,000 --> 00:13:55,000
就是热工程是吧

429
00:13:55,000 --> 00:13:56,000
是热力学什么

430
00:13:56,000 --> 00:13:58,000
它就是它得维持一个平衡

431
00:13:58,000 --> 00:14:00,000
就是热动力学你想说

432
00:14:00,000 --> 00:14:01,000
Cermode Dynamics

433
00:14:01,000 --> 00:14:07,000
我只知道以前笑那些去清华读热工程的

434
00:14:07,000 --> 00:14:09,000
热动力有什么热能学的

435
00:14:09,000 --> 00:14:10,000
这些好像说他们都是烧锅炉

436
00:14:10,000 --> 00:14:11,000
对吧

437
00:14:11,000 --> 00:14:14,000
其实但其实这个东西是可以用到很多场景的

438
00:14:14,000 --> 00:14:17,000
烧锅炉只是一个比较大型的使用场景

439
00:14:17,000 --> 00:14:17,000
对吧

440
00:14:17,000 --> 00:14:19,000
包括你现在做芯片也好

441
00:14:19,000 --> 00:14:20,000
烧锅炉很难

442
00:14:20,000 --> 00:14:21,000
那可不

443
00:14:22,000 --> 00:14:24,000
它可能是以这么低的一个转数的话

444
00:14:24,000 --> 00:14:26,000
就已经能够把它维持得很好了

445
00:14:26,000 --> 00:14:27,000
平衡了

446
00:14:27,000 --> 00:14:27,000
对

447
00:14:27,000 --> 00:14:28,000
是的

448
00:14:28,000 --> 00:14:32,000
因为同样是 M 1 芯片的 MacBook Air

449
00:14:32,000 --> 00:14:33,000
它是完全被动

450
00:14:33,000 --> 00:14:34,000
然后我们看到

451
00:14:34,000 --> 00:14:37,000
因为昨天 iFixit 出拆解图了

452
00:14:37,000 --> 00:14:38,000
就它把打开看了一下

453
00:14:38,000 --> 00:14:41,000
MacBook Air 里面它其实就是

454
00:14:41,000 --> 00:14:43,000
有块比较大的散热片

455
00:14:43,000 --> 00:14:44,000
对吧

456
00:14:44,000 --> 00:14:46,000
但是完全没有那个风向

457
00:14:46,000 --> 00:14:48,000
它也可以完成这么一个

458
00:14:49,000 --> 00:14:51,000
不是那种高负载

459
00:14:51,000 --> 00:14:53,000
不是那种持续高负载状况下的散热

460
00:14:53,000 --> 00:14:54,000
照理说

461
00:14:55,000 --> 00:14:56,000
那个 Pro Pro 有一个小风扇

462
00:14:56,000 --> 00:14:58,000
它能够低速的运转

463
00:14:58,000 --> 00:15:01,000
能够也能够很快的实现热的平衡

464
00:15:01,000 --> 00:15:02,000
对

465
00:15:02,000 --> 00:15:05,000
而且这个和 InterG 7 比起来真的是天壤之别

466
00:15:05,000 --> 00:15:07,000
我第二轮测试的时候

467
00:15:07,000 --> 00:15:08,000
是测试去编一代码

468
00:15:08,000 --> 00:15:10,000
然后看他们的性能怎么样

469
00:15:10,000 --> 00:15:12,000
我两台 InterG 7

470
00:15:12,000 --> 00:15:13,000
一台是 iMac Pro

471
00:15:13,000 --> 00:15:15,000
一台是 MacBook Air

472
00:15:15,000 --> 00:15:17,000
都是才开始编一第一轮到一半的时候

473
00:15:17,000 --> 00:15:19,000
风扇就已经基本上到满转了

474
00:15:19,000 --> 00:15:21,000
就已经进入很吵的状态了

475
00:15:21,000 --> 00:15:23,000
就是战斗机来袭的感觉

476
00:15:23,000 --> 00:15:23,000
对

477
00:15:23,000 --> 00:15:24,000
是的

478
00:15:24,000 --> 00:15:27,000
然后 M 1 的那台 MacBook Pro 的话

479
00:15:27,000 --> 00:15:28,000
三次测完之后

480
00:15:28,000 --> 00:15:31,000
我摸它就感觉温度几乎没有提升

481
00:15:31,000 --> 00:15:34,000
就还是那种室温的状态了

482
00:15:34,000 --> 00:15:35,000
对

483
00:15:35,000 --> 00:15:35,000
是的

484
00:15:35,000 --> 00:15:39,000
就让人感觉这已经是黑科技一样的一个存在了

485
00:15:39,000 --> 00:15:42,000
因为我们知道 MacBook 是前几代的时候

486
00:15:42,000 --> 00:15:43,000
换过一个更薄的外壳

487
00:15:43,000 --> 00:15:45,000
以前不是 Type-C 接口对吧

488
00:15:46,000 --> 00:15:48,000
以前是在拆备接口的时候

489
00:15:48,000 --> 00:15:51,000
他那个时候大家都会抱怨说

490
00:15:51,000 --> 00:15:52,000
有时候如果用的太猛

491
00:15:52,000 --> 00:15:54,000
他底部会比较烫

492
00:15:54,000 --> 00:15:56,000
Type-C Macbook Pro 有独立显卡

493
00:15:56,000 --> 00:15:58,000
和 CPU 的两个热源

494
00:15:59,000 --> 00:16:02,000
后来他换到了现在外型的

495
00:16:02,000 --> 00:16:03,000
就是薄薄的

496
00:16:03,000 --> 00:16:05,000
然后面上是 Type-C 接口的时候

497
00:16:05,000 --> 00:16:06,000
就更烫了

498
00:16:06,000 --> 00:16:07,000
就是 Inter 的时候对吧

499
00:16:07,000 --> 00:16:09,000
我们到如果你放在膝盖上的话

500
00:16:09,000 --> 00:16:10,000
它是有这个

501
00:16:10,000 --> 00:16:11,000
他们那个时候叫什么来的

502
00:16:11,000 --> 00:16:12,000
火腿长剑弹对不对

503
00:16:16,000 --> 00:16:17,000
而且我还听过一个说法

504
00:16:17,000 --> 00:16:21,000
就是对于那个现在的四口的 MacBook Pro

505
00:16:21,000 --> 00:16:22,000
你要给它充电的话

506
00:16:22,000 --> 00:16:24,000
是应该要插固定插右边

507
00:16:24,000 --> 00:16:25,000
还是固定插左边

508
00:16:25,000 --> 00:16:28,000
这样去减少它那一侧的发热才能平衡

509
00:16:28,000 --> 00:16:28,000
对

510
00:16:28,000 --> 00:16:31,000
我们上一期好像结尾的时候谈到这个

511
00:16:31,000 --> 00:16:33,000
就是你要是从一边插的话

512
00:16:33,000 --> 00:16:34,000
它会特别烫

513
00:16:34,000 --> 00:16:35,000
应该它有一个叫什么

514
00:16:35,000 --> 00:16:38,000
电压管理模块是在某一边

515
00:16:38,000 --> 00:16:39,000
然后会导致升温

516
00:16:39,000 --> 00:16:40,000
然后升温就会降频

517
00:16:40,000 --> 00:16:41,000
然后性能也会受影响

518
00:16:41,000 --> 00:16:44,000
现在 Apple 把这个锅就完全的丢给了 Inter

519
00:16:44,000 --> 00:16:45,000
告诉大家

520
00:16:45,000 --> 00:16:46,000
好 不是我们做的

521
00:16:47,000 --> 00:16:47,000
对

522
00:16:47,000 --> 00:16:49,000
所以就这件事情证明了之前

523
00:16:50,000 --> 00:16:51,000
有几个问题

524
00:16:51,000 --> 00:16:52,000
就是苹果我们不是老实说

525
00:16:52,000 --> 00:16:55,000
它最近 Mac 这几代就迭代都非常的慢

526
00:16:55,000 --> 00:16:56,000
然后非常的

527
00:16:56,000 --> 00:16:57,000
就不让人满意

528
00:16:57,000 --> 00:17:00,000
但最后我们的锅现在可以明确的说是

529
00:17:00,000 --> 00:17:01,000
Inter 的锅对不对

530
00:17:01,000 --> 00:17:02,000
真相大白

531
00:17:02,000 --> 00:17:05,000
亚成我记得你也有买那个垃圾桶的 Mac Pro

532
00:17:05,000 --> 00:17:06,000
是不是

533
00:17:06,000 --> 00:17:08,000
就是第一代的 Mac Pro Pro

534
00:17:08,000 --> 00:17:09,000
对

535
00:17:09,000 --> 00:17:11,000
那是 13 年的型号了

536
00:17:11,000 --> 00:17:12,000
垃圾桶的话

537
00:17:12,000 --> 00:17:12,000
对

538
00:17:12,000 --> 00:17:14,000
垃圾桶总共就一代

539
00:17:14,000 --> 00:17:15,000
没有

540
00:17:15,000 --> 00:17:17,000
之后也没有前五古人后来着

541
00:17:17,000 --> 00:17:18,000
他更新过一次 CPU 好像

542
00:17:18,000 --> 00:17:21,000
我记得好像只是小型号的

543
00:17:21,000 --> 00:17:22,000
就是可能是加了几个选项

544
00:17:22,000 --> 00:17:24,000
反正都是 13 年的那一款

545
00:17:24,000 --> 00:17:25,000
对

546
00:17:25,000 --> 00:17:26,000
没有大改过

547
00:17:26,000 --> 00:17:26,000
对

548
00:17:26,000 --> 00:17:28,000
在汽车的树椅里面叫 Face Lift

549
00:17:28,000 --> 00:17:29,000
小改款

550
00:17:29,000 --> 00:17:30,000
小改的

551
00:17:30,000 --> 00:17:31,000
不是大改

552
00:17:31,000 --> 00:17:32,000
然后就是当时

553
00:17:32,000 --> 00:17:36,000
不是垃圾桶它出来的时候说是

554
00:17:36,000 --> 00:17:38,000
最后他们不是要做了一个

555
00:17:38,000 --> 00:17:42,000
邀请那些 Mac 的那种专业媒体去开了一个小会

556
00:17:42,000 --> 00:17:45,000
说他们之前那个设计是

557
00:17:45,000 --> 00:17:45,000
教授们来的

558
00:17:45,000 --> 00:17:47,000
遇到了这个 thermal constraint

559
00:17:47,000 --> 00:17:48,000
就是遇到了热能的限制

560
00:17:48,000 --> 00:17:50,000
其实这个锅也是 intel 的

561
00:17:50,000 --> 00:17:50,000
对吧

562
00:17:50,000 --> 00:17:53,000
因为或者说是加上 AMD 的

563
00:17:53,000 --> 00:17:54,000
因为那个显卡也是个散热大户

564
00:17:54,000 --> 00:17:55,000
就是他们又想到

565
00:17:55,000 --> 00:17:59,000
就说你们竟然不能够按照我们预期的

566
00:17:59,000 --> 00:18:02,000
提升功耗

567
00:18:02,000 --> 00:18:05,000
就是美单位功耗的性能

568
00:18:05,000 --> 00:18:08,000
导致我们不能在这么小的空间里面

569
00:18:08,000 --> 00:18:09,000
用一个单一的风扇

570
00:18:09,000 --> 00:18:12,000
完成整个设备的散热

571
00:18:12,000 --> 00:18:14,000
所以导致我们产品的风 factor

572
00:18:14,000 --> 00:18:17,000
外观外形和整体的形态

573
00:18:17,000 --> 00:18:20,000
没有办法支撑你不断的后续的迭代

574
00:18:20,000 --> 00:18:22,000
这口锅已经毫无疑问的

575
00:18:22,000 --> 00:18:24,000
做实的落到了 intel 和 AMD 的头上

576
00:18:24,000 --> 00:18:26,000
intel 是显卡

577
00:18:26,000 --> 00:18:28,000
SAPO

578
00:18:28,000 --> 00:18:29,000
然后 AMD 是因为显卡

579
00:18:29,000 --> 00:18:30,000
对吧

580
00:18:30,000 --> 00:18:31,000
反正都是你们

581
00:18:31,000 --> 00:18:32,000
对

582
00:18:32,000 --> 00:18:33,000
因为我们现在看到确实也是

583
00:18:33,000 --> 00:18:33,000
现在你说

584
00:18:33,000 --> 00:18:35,000
因为我两层你也好像

585
00:18:35,000 --> 00:18:37,000
我看到你买了最近什么新出的铁带显卡

586
00:18:38,000 --> 00:18:39,000
你看那些显卡都是一颗大卡

587
00:18:39,000 --> 00:18:40,000
然后上面三个风扇

588
00:18:40,000 --> 00:18:41,000
对吧

589
00:18:41,000 --> 00:18:43,000
然后一转起来也是非常想的

590
00:18:43,000 --> 00:18:43,000
对

591
00:18:43,000 --> 00:18:44,000
电磁路上

592
00:18:46,000 --> 00:18:48,000
然后我们看到这次 M 1 芯片

593
00:18:48,000 --> 00:18:51,000
不光是 CPU 的性能爆表

594
00:18:51,000 --> 00:18:52,000
GPU 的性能也是把

595
00:18:52,000 --> 00:18:54,000
它是集成显卡

596
00:18:54,000 --> 00:18:56,000
它的集成显卡的性能

597
00:18:56,000 --> 00:19:00,000
也是把 intel 的 10 代的 iRis

598
00:19:00,000 --> 00:19:01,000
也是按在地板上磨穿

599
00:19:01,000 --> 00:19:02,000
对吧

600
00:19:02,000 --> 00:19:04,000
它提升了好像还不止

601
00:19:04,000 --> 00:19:06,000
不是说百分之几十这种情况

602
00:19:06,000 --> 00:19:09,000
它是提高了两三倍

603
00:19:09,000 --> 00:19:10,000
我记得大概数字是

604
00:19:10,000 --> 00:19:11,000
对

605
00:19:11,000 --> 00:19:13,000
图形性能我倒是没有仔细测试了

606
00:19:13,000 --> 00:19:16,000
因为其实不是我了解的东西

607
00:19:16,000 --> 00:19:17,000
然后我看了的话

608
00:19:17,000 --> 00:19:18,000
别人的评测的话

609
00:19:18,000 --> 00:19:20,000
很多是视频博主的评测

610
00:19:20,000 --> 00:19:23,000
它去进行视频编辑的时候的一个性能

611
00:19:23,000 --> 00:19:27,000
只不过由于 M 1 它自己有 H 265 的硬解码

612
00:19:27,000 --> 00:19:30,000
所以说这个好像评测一点不太公平

613
00:19:30,000 --> 00:19:31,000
这个事情要吐槽一下

614
00:19:31,000 --> 00:19:35,000
包括我记得最开始爆出这件事情

615
00:19:35,000 --> 00:19:36,000
做了一个显设的对比

616
00:19:36,000 --> 00:19:39,000
是叫做 Jonathan Morris

617
00:19:39,000 --> 00:19:40,000
他在 YouTube 上做了一个

618
00:19:40,000 --> 00:19:42,000
好像是两三分钟的短屏

619
00:19:42,000 --> 00:19:48,000
他的屏是输出一段 H 265 的视频

620
00:19:48,000 --> 00:19:51,000
就是他是做视频博主

621
00:19:51,000 --> 00:19:51,000
对吧

622
00:19:51,000 --> 00:19:53,000
他说我有一个原始视频

623
00:19:53,000 --> 00:19:53,000
我编辑好了

624
00:19:53,000 --> 00:19:55,000
我要输出成这个叫成片

625
00:19:55,000 --> 00:19:57,000
要流出来成一个 H 265 这种

626
00:19:57,000 --> 00:19:59,000
可以给大家播放的一个文件

627
00:19:59,000 --> 00:20:02,000
他现在好像是他的 iMac Pro

628
00:20:02,000 --> 00:20:03,000
上面开始点

629
00:20:03,000 --> 00:20:06,000
然后那边就已经开始在转码输出了

630
00:20:06,000 --> 00:20:06,000
对吧

631
00:20:06,000 --> 00:20:08,000
然后他说

632
00:20:08,000 --> 00:20:11,000
这个时候他拿出他刚买的 iPhone 12 的 Mini

633
00:20:11,000 --> 00:20:12,000
然后说怎么

634
00:20:12,000 --> 00:20:13,000
他跟你默计半天说

635
00:20:13,000 --> 00:20:16,000
现在我们开始在 iPhone mini 上面

636
00:20:16,000 --> 00:20:18,000
去做同样的事情

637
00:20:18,000 --> 00:20:20,000
结果那个时候已经 iMac

638
00:20:20,000 --> 00:20:21,000
他们已经跑了可能一两分钟了

639
00:20:21,000 --> 00:20:22,000
对吧

640
00:20:22,000 --> 00:20:23,000
然后他在开后面点

641
00:20:23,000 --> 00:20:27,000
然后这个时候 iPhone mini 还是比他 iMac

642
00:20:27,000 --> 00:20:28,000
先完成转码工作

643
00:20:28,000 --> 00:20:31,000
看起来是很 impressive 对不对

644
00:20:31,000 --> 00:20:32,000
但是这个事情刚才就说亚成讲

645
00:20:32,000 --> 00:20:33,000
他不是太公平

646
00:20:33,000 --> 00:20:35,000
原因是在于说

647
00:20:35,000 --> 00:20:38,000
你一个是用专用硬件去做输出

648
00:20:38,000 --> 00:20:39,000
另外一个是用 CPU 去压

649
00:20:39,000 --> 00:20:40,000
那肯定是不能比的

650
00:20:40,000 --> 00:20:41,000
对

651
00:20:41,000 --> 00:20:43,000
只不过说到不公平

652
00:20:43,000 --> 00:20:44,000
这是的话

653
00:20:44,000 --> 00:20:47,000
我们之前大家就比 CPU 性能的时候

654
00:20:47,000 --> 00:20:49,000
其实现在拿来和 M 1 比的东西

655
00:20:49,000 --> 00:20:51,000
都是拿 iMac Pro

656
00:20:51,000 --> 00:20:54,000
Mac Pro 从顶级的桌面端的 CPU 去比了

657
00:20:54,000 --> 00:20:57,000
一通端的根本就早就已经不到耍到哪里去了

658
00:20:57,000 --> 00:21:00,000
就是如果有功耗限制的肯定都是比不过的

659
00:21:00,000 --> 00:21:00,000
对

660
00:21:00,000 --> 00:21:03,000
反正只有找那种不太受功耗限制的

661
00:21:03,000 --> 00:21:06,000
因为像 iMac Pro 就桌面几 CPU

662
00:21:06,000 --> 00:21:08,000
功耗都是可能几十上百瓦的这种

663
00:21:08,000 --> 00:21:09,000
对

664
00:21:09,000 --> 00:21:10,000
因为我自己对比的时候

665
00:21:10,000 --> 00:21:12,000
我是测的是我的 iMac Pro 和我的之前的

666
00:21:12,000 --> 00:21:15,000
19 款的 iMacBook Air

667
00:21:15,000 --> 00:21:17,000
iMacBook Air 的话

668
00:21:17,000 --> 00:21:18,000
他那个 CPU 是比较弱了

669
00:21:18,000 --> 00:21:19,000
是两盒的

670
00:21:19,000 --> 00:21:22,000
但是相比现在的 MacBook Air 的话

671
00:21:22,000 --> 00:21:25,000
301 这是一个一年前的完全同价格的一个产品

672
00:21:25,000 --> 00:21:26,000
拿来比较

673
00:21:26,000 --> 00:21:28,000
然后记得测试结果的话

674
00:21:28,000 --> 00:21:30,000
在 M 1 上面的编译时间

675
00:21:30,000 --> 00:21:31,000
大概是 40 秒

676
00:21:31,000 --> 00:21:33,000
到了 MacBook Air 上面的话

677
00:21:33,000 --> 00:21:35,000
是大概接近 260 秒

678
00:21:35,000 --> 00:21:38,000
是这么一个翻这么多倍的差距

679
00:21:38,000 --> 00:21:40,000
就是 6 倍对吧

680
00:21:40,000 --> 00:21:41,000
对没错

681
00:21:41,000 --> 00:21:44,000
就是我在做这个测试的时候

682
00:21:44,000 --> 00:21:47,000
到后面我真的都不想等 MacBook Air 测三次的结果了

683
00:21:47,000 --> 00:21:48,000
太漫长了

684
00:21:48,000 --> 00:21:50,000
这个 Air 还是有风扇的对吧

685
00:21:50,000 --> 00:21:51,000
我见到了一个小风扇

686
00:21:51,000 --> 00:21:52,000
对

687
00:21:52,000 --> 00:21:52,000
是的

688
00:21:52,000 --> 00:21:55,000
而且风扇已经转到最小了

689
00:21:55,000 --> 00:21:56,000
但你这个也是有风扇

690
00:21:56,000 --> 00:21:59,000
但是如果说你是拿 M 1 的 AirB

691
00:21:59,000 --> 00:22:01,000
我相信这个结果也不会差得太远

692
00:22:01,000 --> 00:22:03,000
因为我们看它的那个测评结果

693
00:22:03,000 --> 00:22:08,000
一般好像说是 8 分钟以上才会 sortle 降频限速

694
00:22:08,000 --> 00:22:09,000
没错

695
00:22:09,000 --> 00:22:10,000
所以来这次的话

696
00:22:10,000 --> 00:22:12,000
这次 Air 和 Pro 的其实是一个定位

697
00:22:12,000 --> 00:22:14,000
还挺奇怪的两个产品

698
00:22:14,000 --> 00:22:17,000
就是感觉好像到底该买 Pro 还是买 Air 的话很难选

699
00:22:17,000 --> 00:22:19,000
你可以解释一下

700
00:22:19,000 --> 00:22:21,000
你为什么选择买 Pro 不买 Air

701
00:22:21,000 --> 00:22:24,000
因为从拆数上来说好像差的并不多

702
00:22:24,000 --> 00:22:27,000
它的屏幕首先是差不多的是吧

703
00:22:27,000 --> 00:22:28,000
我印象中好像没有区别

704
00:22:28,000 --> 00:22:30,000
所有的技术都是一样的

705
00:22:30,000 --> 00:22:31,000
对

706
00:22:31,000 --> 00:22:32,000
而且这次不一样

707
00:22:32,000 --> 00:22:34,000
以前他们上一代

708
00:22:34,000 --> 00:22:35,000
就是 Intel 芯片的 Air

709
00:22:35,000 --> 00:22:39,000
它屏幕不是所谓的 P 3 广色域的屏幕

710
00:22:39,000 --> 00:22:41,000
但这次它连这个也升上来了

711
00:22:41,000 --> 00:22:41,000
对

712
00:22:41,000 --> 00:22:45,000
我记得我购买之前看过今天学习功课的时候

713
00:22:45,000 --> 00:22:50,000
发现好像没有什么屏幕上有人提到过会有区别

714
00:22:50,000 --> 00:22:54,000
我自己买 Pro 的话是想再给它去办一个机会

715
00:22:54,000 --> 00:22:58,000
因为我在这台 Air 之前的那台的话

716
00:22:58,000 --> 00:22:59,000
也是一台 Mac Pro

717
00:22:59,000 --> 00:23:01,000
但 Touch Bar 用得我非常着行

718
00:23:01,000 --> 00:23:04,000
就是经常都会想要一个功能键的时候

719
00:23:04,000 --> 00:23:05,000
要么摸不到它在哪里

720
00:23:05,000 --> 00:23:09,000
特别是 Escape 键或者是它直接死机掉

721
00:23:09,000 --> 00:23:10,000
所以说就非常的难受

722
00:23:10,000 --> 00:23:13,000
所以这次想着既然要换的话

723
00:23:13,000 --> 00:23:16,000
我就再给你顺便给 Pro 一个机会

724
00:23:16,000 --> 00:23:21,000
你的上一代 Pro 的是没有独立的物理的 Escape 键的那款对吧

725
00:23:21,000 --> 00:23:21,000
对

726
00:23:21,000 --> 00:23:21,000
是的

727
00:23:21,000 --> 00:23:24,000
那是最早发布的那一款的 Touch Bar

728
00:23:24,000 --> 00:23:27,000
它后来是出过一款有单独的

729
00:23:27,000 --> 00:23:30,000
Escape 键同时有 Touch Bar 的 Mac Pro Pro

730
00:23:30,000 --> 00:23:30,000
我记得对不对

731
00:23:30,000 --> 00:23:31,000
对

732
00:23:31,000 --> 00:23:31,000
就是上一款

733
00:23:31,000 --> 00:23:33,000
就是 19 年更新那一代

734
00:23:33,000 --> 00:23:34,000
19 还是哪一年不记得的

735
00:23:34,000 --> 00:23:37,000
反正这一代和上一代在这个方面是一模一样

736
00:23:37,000 --> 00:23:39,000
就是今年年初那一代吧

737
00:23:39,000 --> 00:23:40,000
应该是

738
00:23:40,000 --> 00:23:42,000
就今年的

739
00:23:42,000 --> 00:23:44,000
就是只要如果你现在去苹果店买

740
00:23:44,000 --> 00:23:47,000
然后你说你要 intel 芯片的 Mac Pro Pro

741
00:23:47,000 --> 00:23:51,000
它都是同时有物理的 Escape 键和 Touch Bar

742
00:23:51,000 --> 00:23:55,000
所以你是我 vlog 的第一个

743
00:23:55,000 --> 00:23:57,000
好像还不太反感 Touch Bar 的人

744
00:23:57,000 --> 00:23:59,000
但是你刚才说其实体验也不是很好

745
00:23:59,000 --> 00:24:01,000
我其实是很反感的

746
00:24:01,000 --> 00:24:01,000
对

747
00:24:01,000 --> 00:24:04,000
我刚才想说你用第一代 Touch Bar

748
00:24:04,000 --> 00:24:05,000
你觉得很不爽

749
00:24:05,000 --> 00:24:09,000
然后你说想要再给第二代 Touch Bar 一个机会

750
00:24:09,000 --> 00:24:10,000
对

751
00:24:10,000 --> 00:24:11,000
这个思路就比较

752
00:24:11,000 --> 00:24:13,000
那就比较奇怪了

753
00:24:13,000 --> 00:24:14,000
Pro 的

754
00:24:14,000 --> 00:24:14,000
对

755
00:24:14,000 --> 00:24:16,000
这就是真的自身果粉吧

756
00:24:16,000 --> 00:24:18,000
而且可能可以算

757
00:24:18,000 --> 00:24:20,000
就是因为既然要换电脑了

758
00:24:20,000 --> 00:24:21,000
那就多带了一点变化

759
00:24:21,000 --> 00:24:23,000
多带了一点必要的去体验

760
00:24:23,000 --> 00:24:24,000
是吧

761
00:24:24,000 --> 00:24:25,000
这个我觉得也可以理解

762
00:24:25,000 --> 00:24:27,000
因为有一个很显著的区别

763
00:24:27,000 --> 00:24:33,000
就是说 intel 芯片的 Mac Pro Pro 的 Touch Bar

764
00:24:33,000 --> 00:24:35,000
是用 T 2 芯片来驱动的

765
00:24:35,000 --> 00:24:38,000
它有一个单独的 Bridge OS 来驱动它

766
00:24:38,000 --> 00:24:38,000
对吧

767
00:24:38,000 --> 00:24:41,000
就导致各种各样的通讯的问题

768
00:24:41,000 --> 00:24:42,000
我们都看到

769
00:24:42,000 --> 00:24:43,000
都已经看到各种什么死机

770
00:24:43,000 --> 00:24:47,000
什么没反应都已经很多吐槽了

771
00:24:47,000 --> 00:24:51,000
但这次 M 1 的 Touch Bar 照我的理解

772
00:24:51,000 --> 00:24:55,000
首先 M 1 已经把 T 2 的所有功能正好在 M 1 里面

773
00:24:55,000 --> 00:24:56,000
没有单独的一个 T 2 芯片了

774
00:24:56,000 --> 00:24:58,000
那我的理解应该也不存在

775
00:24:58,000 --> 00:25:00,000
所谓的 Bridge OS 了

776
00:25:00,000 --> 00:25:00,000
对吧

777
00:25:00,000 --> 00:25:02,000
它应该就是在 M 芯片里面单独

778
00:25:02,000 --> 00:25:03,000
自己在内核里面跑的

779
00:25:03,000 --> 00:25:06,000
那所以有可能说

780
00:25:06,000 --> 00:25:09,000
这样就可以解决它其他这件各种

781
00:25:09,000 --> 00:25:11,000
的想因失灵什么死机的问题

782
00:25:11,000 --> 00:25:11,000
对不对

783
00:25:11,000 --> 00:25:12,000
对

784
00:25:12,000 --> 00:25:14,000
因为这事情之前和对我们自己

785
00:25:14,000 --> 00:25:15,000
私下聊过

786
00:25:15,000 --> 00:25:17,000
就是从我自己观察的话

787
00:25:17,000 --> 00:25:18,000
就在旧版的设备上

788
00:25:18,000 --> 00:25:20,000
T 2 的芯片用的是 USB 一种线

789
00:25:20,000 --> 00:25:23,000
和整个 CPU 进行通信

790
00:25:23,000 --> 00:25:26,000
按照我们自己之前的经验来说的话

791
00:25:26,000 --> 00:25:28,000
USB 的总线的可靠线

792
00:25:28,000 --> 00:25:30,000
一般来说可能是没那么高的

793
00:25:30,000 --> 00:25:32,000
就是它还是会在魔弄情况下

794
00:25:32,000 --> 00:25:33,000
就闪断了

795
00:25:33,000 --> 00:25:35,000
然后说会不会是因为这样的一个原因

796
00:25:35,000 --> 00:25:37,000
导致 Touch Bar 有的时候就突然就死机

797
00:25:37,000 --> 00:25:39,000
或者是它就怎么就不灵乱

798
00:25:39,000 --> 00:25:41,000
所以说我也是在想试一下

799
00:25:41,000 --> 00:25:43,000
所以你想再给它一个机会看一下

800
00:25:43,000 --> 00:25:43,000
对

801
00:25:43,000 --> 00:25:44,000
是的

802
00:25:44,000 --> 00:25:44,000
对

803
00:25:44,000 --> 00:25:47,000
看到这是不是也是英德尔的过程

804
00:25:47,000 --> 00:25:51,000
那如果说我们跑开不稳定性和死机

805
00:25:51,000 --> 00:25:52,000
这种因素来看

806
00:25:52,000 --> 00:25:56,000
Touch Bar 本身你觉得它的使用性还是可以的

807
00:25:56,000 --> 00:25:58,000
我觉得也不太好说

808
00:25:58,000 --> 00:26:01,000
就是它算说看上去直观上来说

809
00:26:01,000 --> 00:26:03,000
它把很多操作放在键盘上

810
00:26:03,000 --> 00:26:06,000
这样我能够直接站在操作的话是一个提升

811
00:26:06,000 --> 00:26:08,000
但它有一个扣分项就是

812
00:26:08,000 --> 00:26:11,000
假如说我本身我自己会定了很多 FN 的功能

813
00:26:11,000 --> 00:26:12,000
就有特定的作用

814
00:26:12,000 --> 00:26:13,000
我如果是键盘的话

815
00:26:13,000 --> 00:26:14,000
我能摸到那个键盘那里

816
00:26:14,000 --> 00:26:15,000
我好

817
00:26:15,000 --> 00:26:16,000
我很多时候可以忙到操作

818
00:26:16,000 --> 00:26:17,000
就直接按下去了

819
00:26:17,000 --> 00:26:19,000
但是如果 Touch Bar 我完全按不到

820
00:26:19,000 --> 00:26:20,000
我必须的低头去看

821
00:26:20,000 --> 00:26:21,000
倒计产道按下去

822
00:26:21,000 --> 00:26:22,000
对这个问题

823
00:26:22,000 --> 00:26:24,000
我觉得是没有办法通过任何软件

824
00:26:24,000 --> 00:26:26,000
和优化来实现

825
00:26:26,000 --> 00:26:27,000
因为它就是一个很物理的东西

826
00:26:27,000 --> 00:26:28,000
对吧

827
00:26:28,000 --> 00:26:29,000
你能不能通过触感

828
00:26:29,000 --> 00:26:30,000
对

829
00:26:30,000 --> 00:26:31,000
来摸到那个东西

830
00:26:31,000 --> 00:26:32,000
因为 Touch Bar 最核心的

831
00:26:32,000 --> 00:26:35,000
就是说它把 FN 那排键的功能

832
00:26:35,000 --> 00:26:37,000
变成了一个随时可以定义

833
00:26:37,000 --> 00:26:39,000
它叫 Context Aware

834
00:26:39,000 --> 00:26:41,000
就是说根据使用环境

835
00:26:41,000 --> 00:26:44,000
比如你切了一个某一个 APP 的前台

836
00:26:44,000 --> 00:26:46,000
它 Touch Bar 的功能就不一样

837
00:26:46,000 --> 00:26:46,000
对不对

838
00:26:46,000 --> 00:26:47,000
但这个就导致

839
00:26:47,000 --> 00:26:49,000
你没办法说此时

840
00:26:49,000 --> 00:26:51,000
你不看 Touch Bar 的时候

841
00:26:51,000 --> 00:26:51,000
它会怎么样

842
00:26:51,000 --> 00:26:52,000
你是不知道的

843
00:26:52,000 --> 00:26:53,000
对

844
00:26:53,000 --> 00:26:54,000
而且还带来的另外一个问题

845
00:26:54,000 --> 00:26:55,000
就是误触

846
00:26:55,000 --> 00:26:56,000
就是我可能会不注意

847
00:26:56,000 --> 00:26:59,000
就碰到它那把什么词形就挑不对了

848
00:26:59,000 --> 00:27:01,000
我记得 Touch Bar 刚出来的时候

849
00:27:01,000 --> 00:27:02,000
我发过一条推

850
00:27:02,000 --> 00:27:05,000
就说我花 20 年的时间学习

851
00:27:05,000 --> 00:27:08,000
怎样不看键盘来打字

852
00:27:08,000 --> 00:27:09,000
Touch Bar 出来之后

853
00:27:09,000 --> 00:27:11,000
我反过来需要看键盘

854
00:27:11,000 --> 00:27:13,000
这个就让人感觉很厉害

855
00:27:13,000 --> 00:27:14,000
历史潮流人的

856
00:27:14,000 --> 00:27:16,000
所以我觉得 Touch Bar 这个东西

857
00:27:16,000 --> 00:27:17,000
真的是有点像苹果

858
00:27:17,000 --> 00:27:19,000
就是为了做的不一样

859
00:27:19,000 --> 00:27:21,000
长形做出来一个不一样的东西

860
00:27:21,000 --> 00:27:23,000
然后感觉说不定

861
00:27:23,000 --> 00:27:25,000
之后希望它能改写规则

862
00:27:25,000 --> 00:27:28,000
但是你还是用金钱支持了它

863
00:27:28,000 --> 00:27:29,000
你用脚投票说

864
00:27:29,000 --> 00:27:30,000
你们还记得我在这条邪路上

865
00:27:30,000 --> 00:27:32,000
越走越远吧

866
00:27:32,000 --> 00:27:32,000
对

867
00:27:32,000 --> 00:27:34,000
好像是你这样说的话

868
00:27:34,000 --> 00:27:37,000
我还是怀着一个比较

869
00:27:37,000 --> 00:27:38,000
裹粉的心态

870
00:27:38,000 --> 00:27:39,000
希望再给它一次机会

871
00:27:39,000 --> 00:27:40,000
是我自己的问题

872
00:27:40,000 --> 00:27:41,000
不是他的问题

873
00:27:41,000 --> 00:27:43,000
但现在这两天用下来

874
00:27:43,000 --> 00:27:44,000
感觉好像不是我的问题

875
00:27:44,000 --> 00:27:46,000
OK

876
00:27:46,000 --> 00:27:47,000
好

877
00:27:47,000 --> 00:27:48,000
我们到时候在观传上

878
00:27:48,000 --> 00:27:52,000
就是这次 M 1 的 Mapper Pro 普及开后

879
00:27:52,000 --> 00:27:54,000
首先我们看确实是不是说

880
00:27:54,000 --> 00:27:56,000
Touch Bar 的各种不稳定问题

881
00:27:56,000 --> 00:28:01,000
可以丢过于 BridgeUS 和 USB 的不稳定性

882
00:28:01,000 --> 00:28:02,000
如果这个问题解决之后

883
00:28:02,000 --> 00:28:03,000
我们再来看

884
00:28:03,000 --> 00:28:06,000
刨除到这种导致

885
00:28:06,000 --> 00:28:08,000
极大扣分的负面因素之后

886
00:28:08,000 --> 00:28:10,000
Touch Bar 本身它能不能够打动消费者

887
00:28:10,000 --> 00:28:12,000
除了 Touch Bar 之外

888
00:28:12,000 --> 00:28:16,000
这回的 M 1 芯片的 Mapper Pro 和 Mapper Air

889
00:28:16,000 --> 00:28:19,000
它唯一的区别就只有在外形和重量上

890
00:28:19,000 --> 00:28:19,000
好像是

891
00:28:19,000 --> 00:28:22,000
因为不管是接口也是一样的

892
00:28:22,000 --> 00:28:23,000
屏幕是一样的

893
00:28:23,000 --> 00:28:25,000
甚至连 WiFi 天线的数量都是两根

894
00:28:25,000 --> 00:28:26,000
都是一样的

895
00:28:26,000 --> 00:28:28,000
SSD 也是一样的

896
00:28:28,000 --> 00:28:30,000
触摸板都是一样的

897
00:28:30,000 --> 00:28:30,000
对

898
00:28:30,000 --> 00:28:32,000
这件事情给人感觉

899
00:28:32,000 --> 00:28:35,000
Apple 应该是把直接原来的英特尔的版本

900
00:28:35,000 --> 00:28:36,000
就拿过来换了个新

901
00:28:36,000 --> 00:28:37,000
换了个主板

902
00:28:37,000 --> 00:28:39,000
大概其他的没有什么大大改进

903
00:28:39,000 --> 00:28:40,000
就直接拿出来组织了

904
00:28:40,000 --> 00:28:44,000
好像在 mini 上这件事情会更显著一些

905
00:28:44,000 --> 00:28:46,000
就至少我们看 iMac FX

906
00:28:46,000 --> 00:28:47,000
昨天的拆解图

907
00:28:47,000 --> 00:28:49,000
它打开来看我们来对比

908
00:28:49,000 --> 00:28:52,000
跟上一代英特尔的芯片的 Mapper Pro

909
00:28:52,000 --> 00:28:53,000
它确实是一模一样的

910
00:28:53,000 --> 00:28:58,000
它们说连 CPU 风扇的型号都是一模一样的

911
00:28:58,000 --> 00:28:59,000
没错

912
00:28:59,000 --> 00:29:01,000
而且 mini 的话好像去说

913
00:29:01,000 --> 00:29:03,000
会额外空拆很多空间

914
00:29:03,000 --> 00:29:05,000
就是明明可以做得更小的

915
00:29:05,000 --> 00:29:07,000
更精简的一个设备

916
00:29:07,000 --> 00:29:07,000
对

917
00:29:07,000 --> 00:29:09,000
它其实里面就是半空了

918
00:29:09,000 --> 00:29:10,000
对

919
00:29:10,000 --> 00:29:12,000
当时 Rail 问我要不要买 mini

920
00:29:12,000 --> 00:29:14,000
我觉得这肯定不能玩

921
00:29:14,000 --> 00:29:16,000
这明明可以做的更小

922
00:29:16,000 --> 00:29:18,000
然后一定要塞在既有的壳子里面

923
00:29:19,000 --> 00:29:22,000
那我宁可等更小的下一代好了

924
00:29:22,000 --> 00:29:23,000
下一代也不一定变得更小

925
00:29:23,000 --> 00:29:24,000
可能变得更 powerful

926
00:29:24,000 --> 00:29:26,000
就是下次给你一个 mini

927
00:29:26,000 --> 00:29:27,000
mini pro 之类的这种

928
00:29:27,000 --> 00:29:28,000
对

929
00:29:28,000 --> 00:29:29,000
不管怎么说

930
00:29:29,000 --> 00:29:30,000
这一代显然没有下载好吗

931
00:29:30,000 --> 00:29:31,000
对

932
00:29:31,000 --> 00:29:32,000
这句话永远是对的

933
00:29:32,000 --> 00:29:34,000
但是早买早享受

934
00:29:34,000 --> 00:29:36,000
这也是有道理

935
00:29:36,000 --> 00:29:37,000
我一切特别深刻

936
00:29:37,000 --> 00:29:38,000
因为我当时是买的

937
00:29:38,000 --> 00:29:40,000
你们记不记得苹果

938
00:29:40,000 --> 00:29:42,000
是在 12 年发布的第一款

939
00:29:42,000 --> 00:29:43,000
Retina 的 Mapper Pro

940
00:29:43,000 --> 00:29:44,000
15 寸的那一款

941
00:29:44,000 --> 00:29:47,000
它当时还是搭载的独立显卡

942
00:29:47,000 --> 00:29:48,000
还是 NVIDIA 的

943
00:29:48,000 --> 00:29:49,000
应该是多少来的

944
00:29:49,000 --> 00:29:50,000
什么 GG 00 M

945
00:29:50,000 --> 00:29:51,000
好像是

946
00:29:51,000 --> 00:29:52,000
对

947
00:29:52,000 --> 00:29:54,000
那一代我应该也是买了的

948
00:29:54,000 --> 00:29:57,000
我都是第一个去吃第一代螃蟹的

949
00:29:57,000 --> 00:29:58,000
对

950
00:29:58,000 --> 00:30:00,000
那你遇到质量问题了吗

951
00:30:00,000 --> 00:30:02,000
我好像不记得有遇到

952
00:30:02,000 --> 00:30:02,000
觉得有什么问题

953
00:30:02,000 --> 00:30:04,000
我记得我对它那台 Mapper Pro

954
00:30:04,000 --> 00:30:05,000
当时还各方面挺满意的

955
00:30:05,000 --> 00:30:07,000
说回来 M 1

956
00:30:07,000 --> 00:30:09,000
因为你没有买 mini

957
00:30:09,000 --> 00:30:11,000
然后因为你有 DTK

958
00:30:11,000 --> 00:30:12,000
所以我们目前

959
00:30:12,000 --> 00:30:15,000
但凭我目前还没有公布到底说

960
00:30:15,000 --> 00:30:16,000
DTK 它是租给你们用

961
00:30:16,000 --> 00:30:16,000
对吧

962
00:30:16,000 --> 00:30:17,000
当时也说得很明确

963
00:30:17,000 --> 00:30:19,000
这个东西产品不是属于你的

964
00:30:19,000 --> 00:30:20,000
到时候你还得退回去

965
00:30:20,000 --> 00:30:21,000
对

966
00:30:21,000 --> 00:30:22,000
但是不知道退回去之后

967
00:30:22,000 --> 00:30:22,000
然后

968
00:30:22,000 --> 00:30:24,000
因为你是为付了钱的

969
00:30:24,000 --> 00:30:25,000
对吧

970
00:30:25,000 --> 00:30:25,000
对

971
00:30:25,000 --> 00:30:26,000
当然

972
00:30:26,000 --> 00:30:26,000
钱的话

973
00:30:26,000 --> 00:30:28,000
它说的是一个 Program Feast

974
00:30:28,000 --> 00:30:30,000
是加入这个计划的钱

975
00:30:30,000 --> 00:30:32,000
它和买这个设备根本就没有任何的关系

976
00:30:32,000 --> 00:30:33,000
所以说

977
00:30:33,000 --> 00:30:35,000
它即使要求你收回去

978
00:30:35,000 --> 00:30:36,000
然后什么也不说

979
00:30:36,000 --> 00:30:40,000
你也是没有办法说去抱怨这件事情

980
00:30:40,000 --> 00:30:41,000
但是好像据说

981
00:30:41,000 --> 00:30:43,000
按照当年 PowerPC

982
00:30:43,000 --> 00:30:46,000
这个迁移的那个时候的事情的话

983
00:30:46,000 --> 00:30:46,000
苹果之后

984
00:30:46,000 --> 00:30:47,000
你还回去之后

985
00:30:47,000 --> 00:30:48,000
是会还给

986
00:30:48,000 --> 00:30:50,000
是会再换给你一个

987
00:30:50,000 --> 00:30:52,000
市售的一个正式版的一个产品的

988
00:30:52,000 --> 00:30:53,000
现在开发者

989
00:30:53,000 --> 00:30:55,000
大家都还挺期待这件事情

990
00:30:55,000 --> 00:30:57,000
当时它是给了一个

991
00:30:57,000 --> 00:31:00,000
行星 10 版本的 iMac 给你给那些

992
00:31:00,000 --> 00:31:01,000
就是常识的开发者

993
00:31:01,000 --> 00:31:03,000
但是可能这些事情不太好比

994
00:31:03,000 --> 00:31:04,000
因为当时那个苹果开发者的数量

995
00:31:04,000 --> 00:31:05,000
还是非常少的

996
00:31:05,000 --> 00:31:05,000
对吧

997
00:31:05,000 --> 00:31:07,000
至少跟现在不是一个数量解

998
00:31:07,000 --> 00:31:09,000
可能差两个数量解要估计

999
00:31:09,000 --> 00:31:12,000
那现在就是说有这么多人的情况下

1000
00:31:12,000 --> 00:31:14,000
估计不能送 iMac 了

1001
00:31:14,000 --> 00:31:15,000
的话有点贵

1002
00:31:15,000 --> 00:31:17,000
能送一个 Mac mini 回来就已经不错了

1003
00:31:17,000 --> 00:31:18,000
对

1004
00:31:18,000 --> 00:31:20,000
我觉得可能送一个 M 1 的 mini 应该算一下

1005
00:31:20,000 --> 00:31:22,000
价值上应该是差不多的

1006
00:31:22,000 --> 00:31:24,000
因为现在他 M 1 的那个 Mac mini

1007
00:31:24,000 --> 00:31:25,000
他标配是多少钱

1008
00:31:25,000 --> 00:31:27,000
好像就是 600 刀差不多是吧

1009
00:31:27,000 --> 00:31:29,000
599 还是 699 来的

1010
00:31:29,000 --> 00:31:30,000
好像差不多

1011
00:31:30,000 --> 00:31:32,000
反正是这个价位上

1012
00:31:32,000 --> 00:31:34,000
但要是这样比的话

1013
00:31:34,000 --> 00:31:36,000
现在开发者虽然说可能比原来多了很多

1014
00:31:36,000 --> 00:31:37,000
比如说多 10 倍

1015
00:31:37,000 --> 00:31:39,000
但他凭我的市值月份 10 倍了

1016
00:31:39,000 --> 00:31:39,000
是吧

1017
00:31:39,000 --> 00:31:40,000
那也可以

1018
00:31:42,000 --> 00:31:44,000
刚才不能赔钱给你

1019
00:31:44,000 --> 00:31:44,000
我的意思就是

1020
00:31:44,000 --> 00:31:46,000
他可能就是让点利

1021
00:31:46,000 --> 00:31:47,000
比如说我这个不怎么赚钱

1022
00:31:47,000 --> 00:31:48,000
你再给你算吧

1023
00:31:48,000 --> 00:31:50,000
这个说我们查一下

1024
00:31:50,000 --> 00:31:53,000
现在那个 Mac mini 官方售价是多少钱

1025
00:31:53,000 --> 00:31:53,000
对吧

1026
00:31:53,000 --> 00:31:54,000
M 1 的刚好 699

1027
00:31:54,000 --> 00:31:58,000
你交的开发者费用差不多是 500 刀

1028
00:31:58,000 --> 00:31:58,000
对吧

1029
00:31:58,000 --> 00:32:01,000
我们知道苹果大概是通常来说是 30%的

1030
00:32:01,000 --> 00:32:04,000
利润率

1031
00:32:05,000 --> 00:32:08,000
差不多这个 mini 可能成本也就是 3400 刀的样子

1032
00:32:08,000 --> 00:32:10,000
那减掉 560 成本

1033
00:32:10,000 --> 00:32:11,000
估计能打得住我估计

1034
00:32:11,000 --> 00:32:12,000
实在不行的

1035
00:32:12,000 --> 00:32:15,000
我觉得给开发者一个折扣券什么的

1036
00:32:15,000 --> 00:32:18,000
能够抵消一下你自己去买的时候的宅口

1037
00:32:18,000 --> 00:32:20,000
我觉得其实也已经很不错了

1038
00:32:20,000 --> 00:32:23,000
第 5 年 Apple Developer 年费

1039
00:32:23,000 --> 00:32:24,000
也可以

1040
00:32:24,000 --> 00:32:26,000
对也可以也是个方案

1041
00:32:28,000 --> 00:32:31,000
或者给 App Store 的 gift car

1042
00:32:31,000 --> 00:32:33,000
你可以去店里买东西也行

1043
00:32:33,000 --> 00:32:34,000
对

1044
00:32:34,000 --> 00:32:36,000
那就和其实就和抵钱差不多一个意思

1045
00:32:36,000 --> 00:32:36,000
对

1046
00:32:36,000 --> 00:32:37,000
但你自由一点

1047
00:32:37,000 --> 00:32:38,000
你不一定说一定

1048
00:32:38,000 --> 00:32:39,000
假设你不想要 mini

1049
00:32:39,000 --> 00:32:40,000
你需要一个 air

1050
00:32:40,000 --> 00:32:41,000
对吧

1051
00:32:41,000 --> 00:32:43,000
他给你选择权多一些

1052
00:32:43,000 --> 00:32:43,000
对

1053
00:32:43,000 --> 00:32:43,000
是的

1054
00:32:43,000 --> 00:32:46,000
这个还挺期待到时候会怎么样

1055
00:32:46,000 --> 00:32:48,000
那如果说到时候真的换回来一个 mini

1056
00:32:48,000 --> 00:32:51,000
你可以拿它来做编译主机用

1057
00:32:51,000 --> 00:32:52,000
对吧

1058
00:32:52,000 --> 00:32:53,000
对可以

1059
00:32:53,000 --> 00:32:54,000
到时是没问题的

1060
00:32:54,000 --> 00:32:57,000
因为毕竟比你 iMac Pro 的编译性能要好

1061
00:32:58,000 --> 00:32:59,000
对我现在都在犹豫

1062
00:32:59,000 --> 00:33:01,000
我要不要干脆拿个 mini

1063
00:33:01,000 --> 00:33:03,000
还把我在 iMac Pro 给替代说完

1064
00:33:03,000 --> 00:33:05,000
就把 iMac Pro 给出了

1065
00:33:05,000 --> 00:33:08,000
然后换一个什么 ProXDR

1066
00:33:08,000 --> 00:33:11,000
然后 discord 回来接上那个 Mac mini

1067
00:33:11,000 --> 00:33:12,000
对

1068
00:33:12,000 --> 00:33:14,000
但是那个显示器的价格又变成了一个阻碍

1069
00:33:15,000 --> 00:33:16,000
等一下他们说是怎么来的

1070
00:33:16,000 --> 00:33:21,000
就是那个显示器的支架的价钱是要比 mini 贵的

1071
00:33:22,000 --> 00:33:22,000
对

1072
00:33:22,000 --> 00:33:22,000
是的

1073
00:33:22,000 --> 00:33:24,000
那个支架的比 mini 还贵

1074
00:33:25,000 --> 00:33:25,000
对

1075
00:33:25,000 --> 00:33:27,000
所以我去店里买的时候

1076
00:33:27,000 --> 00:33:30,000
我又仔细的端想了一下那个支架

1077
00:33:30,000 --> 00:33:32,000
它做的确实是很优雅的

1078
00:33:32,000 --> 00:33:34,000
很烦死

1079
00:33:34,000 --> 00:33:34,000
对吧

1080
00:33:34,000 --> 00:33:36,000
有一种很贵

1081
00:33:36,000 --> 00:33:37,000
跑车的感觉是不是

1082
00:33:38,000 --> 00:33:39,000
对

1083
00:33:39,000 --> 00:33:40,000
是的

1084
00:33:40,000 --> 00:33:41,000
那你要买吗

1085
00:33:41,000 --> 00:33:42,000
我觉得还是值那个钱

1086
00:33:43,000 --> 00:33:45,000
我觉得想来想去冷静一下

1087
00:33:45,000 --> 00:33:49,000
还是等着它二代出现 M 2 这样的芯片的时候再迁移

1088
00:33:49,000 --> 00:33:54,000
确实现在在 M 1 上要完全拿来作为一个工作开发环境的话

1089
00:33:54,000 --> 00:33:56,000
可能还会稍微有一点障碍

1090
00:33:56,000 --> 00:33:57,000
这种情况下的话

1091
00:33:57,000 --> 00:34:00,000
就没有必要这样非常强行换过去了

1092
00:34:00,000 --> 00:34:02,000
刚好我们就刚才聊完他硬件好了

1093
00:34:02,000 --> 00:34:04,000
我们就过度到说软件的问题

1094
00:34:04,000 --> 00:34:07,000
就是目前你用下来在日常生活中

1095
00:34:07,000 --> 00:34:08,000
我们分两类

1096
00:34:08,000 --> 00:34:12,000
首先说你的工作上如果用它会遇到什么样的障碍

1097
00:34:12,000 --> 00:34:13,000
然后说是如果你日常

1098
00:34:14,000 --> 00:34:15,000
就是日常消遣

1099
00:34:15,000 --> 00:34:16,000
也用它会遇到什么样的问题

1100
00:34:16,000 --> 00:34:17,000
我们先做工作这一块

1101
00:34:17,000 --> 00:34:21,000
你说还是有一些工具店不够那么完善的

1102
00:34:21,000 --> 00:34:21,000
对吧

1103
00:34:21,000 --> 00:34:22,000
就主要是哪些

1104
00:34:23,000 --> 00:34:23,000
是的

1105
00:34:23,000 --> 00:34:27,000
如果是苹果自己相关的 Xcode 相关的这些东西的话

1106
00:34:27,000 --> 00:34:28,000
几乎都毫无问题

1107
00:34:28,000 --> 00:34:30,000
所有东西都他都把你已经想好了

1108
00:34:30,000 --> 00:34:32,000
你就顶多是调一点参数

1109
00:34:32,000 --> 00:34:33,000
改些参数就行了

1110
00:34:34,000 --> 00:34:36,000
然后最多的话就是 Brow

1111
00:34:36,000 --> 00:34:38,000
就是那些命令行下面的话

1112
00:34:38,000 --> 00:34:39,000
一些工具

1113
00:34:39,000 --> 00:34:42,000
本身的话这次做的这个接中程是非常完美的

1114
00:34:42,000 --> 00:34:45,000
就是英特尔的阿金志在机器上执行

1115
00:34:45,000 --> 00:34:46,000
不会有任何的问题

1116
00:34:46,000 --> 00:34:50,000
但是一旦遇到像 BatchScript 这样的脚本的时候

1117
00:34:50,000 --> 00:34:51,000
就可能会出问题了

1118
00:34:51,000 --> 00:34:53,000
然后特别是当他需要去编译

1119
00:34:53,000 --> 00:34:56,000
本地编译一些代码出来

1120
00:34:56,000 --> 00:34:58,000
然后去运行的时候就会出问题

1121
00:34:58,000 --> 00:35:01,000
但其实这个事情有一个很简单的解决方法

1122
00:35:01,000 --> 00:35:02,000
你把你整个 terminal

1123
00:35:02,000 --> 00:35:04,000
就是 iterm 或者是官方的 terminal

1124
00:35:05,000 --> 00:35:08,000
用特定的一个指令去执行了之后

1125
00:35:08,000 --> 00:35:12,000
让他直接让整个 terminal 运行 intel 的框架之下

1126
00:35:12,000 --> 00:35:15,000
这样的话他去执行的下面的子竞层 Batch

1127
00:35:15,000 --> 00:35:16,000
然后和 script 的话

1128
00:35:16,000 --> 00:35:19,000
都会延续着他的母竞层的

1129
00:35:19,000 --> 00:35:21,000
父竞层的这么一个设置

1130
00:35:21,000 --> 00:35:24,000
所以说就是以虚你的方式去运行

1131
00:35:24,000 --> 00:35:26,000
所以说可以消灭掉很多的问题

1132
00:35:26,000 --> 00:35:27,000
这里可能要解释一下

1133
00:35:27,000 --> 00:35:29,000
就是说首先默认情况下

1134
00:35:29,000 --> 00:35:34,000
在 M 1 的 Mac 上面你开的任何程序

1135
00:35:34,000 --> 00:35:35,000
它有两种程序

1136
00:35:35,000 --> 00:35:40,000
一种是原生的 arm 指令级的程序

1137
00:35:40,000 --> 00:35:41,000
然后就是我们叫 Native

1138
00:35:41,000 --> 00:35:42,000
我们叫原生对吧

1139
00:35:42,000 --> 00:35:45,000
还有一种就是用 intel 的指令

1140
00:35:45,000 --> 00:35:49,000
但是是通过 Rosetta II 的模拟层来实现的

1141
00:35:49,000 --> 00:35:49,000
对吧

1142
00:35:49,000 --> 00:35:53,000
它 emulation 就是用在一个 arm 的芯片上

1143
00:35:53,000 --> 00:35:54,000
模拟运行 X 86 的指令

1144
00:35:54,000 --> 00:35:57,000
然后来跑原来那些旧的 intel 的

1145
00:35:57,000 --> 00:35:59,000
那些指令级的程序

1146
00:35:59,000 --> 00:36:00,000
不做任何修改

1147
00:36:00,000 --> 00:36:01,000
对 是的

1148
00:36:01,000 --> 00:36:03,000
然后你的目前的状况是说

1149
00:36:03,000 --> 00:36:06,000
如果你用那些原生的

1150
00:36:06,000 --> 00:36:08,000
有的话是没有任何问题的

1151
00:36:08,000 --> 00:36:09,000
但是如果说原生

1152
00:36:09,000 --> 00:36:12,000
它原来是 intel 的指令级的程序

1153
00:36:12,000 --> 00:36:14,000
你最好还是用 Rosetta II 的方式

1154
00:36:14,000 --> 00:36:17,000
来驱动它会比较好一些

1155
00:36:17,000 --> 00:36:20,000
就是它如果本身是二经质的分发

1156
00:36:20,000 --> 00:36:21,000
然后是 intel 的代码

1157
00:36:21,000 --> 00:36:24,000
你就直接当它就是一个原生程序

1158
00:36:24,000 --> 00:36:25,000
用起来没有任何的问题

1159
00:36:25,000 --> 00:36:27,000
这个接用程序做得非常好

1160
00:36:27,000 --> 00:36:29,000
但这个时候它还是通过这个模拟的方式

1161
00:36:29,000 --> 00:36:30,000
来执行了对吧

1162
00:36:30,000 --> 00:36:32,000
因为它不是原生的一个 arm 程序

1163
00:36:32,000 --> 00:36:35,000
对 它只是依此 CPU 性能上会有损耗

1164
00:36:35,000 --> 00:36:36,000
另外我观察的话

1165
00:36:36,000 --> 00:36:37,000
它的内存占用上

1166
00:36:37,000 --> 00:36:40,000
几乎是它在 intel 设备上的两倍

1167
00:36:40,000 --> 00:36:42,000
可能是要涉及到虚拟的一个方式的话

1168
00:36:42,000 --> 00:36:44,000
它有一些特定的一些损耗

1169
00:36:44,000 --> 00:36:46,000
可能要翻译一些指令

1170
00:36:46,000 --> 00:36:47,000
要换成起来可能

1171
00:36:47,000 --> 00:36:47,000
对 是的

1172
00:36:47,000 --> 00:36:48,000
所以的话

1173
00:36:48,000 --> 00:36:51,000
就是一个内存和 CPU 的一个问题

1174
00:36:51,000 --> 00:36:52,000
但是不会影响你工作

1175
00:36:52,000 --> 00:36:53,000
所以但是的话

1176
00:36:53,000 --> 00:36:55,000
就是会直接跑不起来的程序的话

1177
00:36:55,000 --> 00:36:57,000
主要都是一些特别复杂的

1178
00:36:57,000 --> 00:36:59,000
然后脚本类型的

1179
00:36:59,000 --> 00:37:00,000
因为脚本类型的话

1180
00:37:00,000 --> 00:37:02,000
它会导致你翻译的机制

1181
00:37:02,000 --> 00:37:04,000
你不知道你现在该去工作

1182
00:37:04,000 --> 00:37:06,000
你该对脚本进行一些特定的一些

1183
00:37:06,000 --> 00:37:08,000
建容性的一些事情

1184
00:37:08,000 --> 00:37:10,000
所以它整个就 break 掉了

1185
00:37:10,000 --> 00:37:12,000
你的意思就是说脚本

1186
00:37:12,000 --> 00:37:13,000
就是它是以 arm 的方式来运行的

1187
00:37:13,000 --> 00:37:16,000
但是开发者是在 X 86 的整理器上实现

1188
00:37:16,000 --> 00:37:19,000
所以导致这里面有点冲突的地方

1189
00:37:19,000 --> 00:37:20,000
对 是的 没错

1190
00:37:20,000 --> 00:37:21,000
就比如说你是

1191
00:37:21,000 --> 00:37:24,000
它直接靠一个脚本去编译出一段代

1192
00:37:24,000 --> 00:37:26,000
编译的那些各种参数和命令的话

1193
00:37:26,000 --> 00:37:28,000
都是为 X 86 环境设计的

1194
00:37:28,000 --> 00:37:30,000
然后这个时候你去执行的话

1195
00:37:30,000 --> 00:37:32,000
整个 batch 整个 terminal 环境

1196
00:37:32,000 --> 00:37:33,000
全都是在 arm 状态下

1197
00:37:33,000 --> 00:37:35,000
它运到脚本里面

1198
00:37:35,000 --> 00:37:37,000
自然的各种命令就和它出问题了

1199
00:37:37,000 --> 00:37:38,000
它就没把这些进行下去了

1200
00:37:38,000 --> 00:37:41,000
就可能连参数都不支持了

1201
00:37:41,000 --> 00:37:42,000
比方说也是 X 86 特有的参数

1202
00:37:42,000 --> 00:37:43,000
对 是的

1203
00:37:43,000 --> 00:37:46,000
但是如果你把整个 terminal 都是使用

1204
00:37:46,000 --> 00:37:50,000
atch 指令上它以据你环境的话

1205
00:37:50,000 --> 00:37:50,000
去执行的话

1206
00:37:50,000 --> 00:37:52,000
后面的整个动机套

1207
00:37:52,000 --> 00:37:53,000
它就全部都对上了

1208
00:37:53,000 --> 00:37:54,000
所以说它又能用起来了

1209
00:37:54,000 --> 00:37:56,000
就是连整个 terminal 都运行在

1210
00:37:56,000 --> 00:37:58,000
如 setter 2 的 X 86 的环境里面

1211
00:37:58,000 --> 00:38:01,000
所以它下面启动了所有的脚本

1212
00:38:01,000 --> 00:38:04,000
它也认为它还是在 X 86 的芯片上运行

1213
00:38:04,000 --> 00:38:05,000
所以就不会出任何问题

1214
00:38:05,000 --> 00:38:08,000
然后因为这个如 setter 2 的模拟程序

1215
00:38:08,000 --> 00:38:09,000
做得特别好

1216
00:38:09,000 --> 00:38:09,000
所以目前来看

1217
00:38:09,000 --> 00:38:11,000
建议性上是可以得到保证的

1218
00:38:11,000 --> 00:38:12,000
对 是的

1219
00:38:12,000 --> 00:38:12,000
OK

1220
00:38:12,000 --> 00:38:15,000
那你没有留意到它用 Rosetter 2 来模拟

1221
00:38:15,000 --> 00:38:17,000
运行 X 86 的这些

1222
00:38:17,000 --> 00:38:18,000
不管是脚本也好

1223
00:38:18,000 --> 00:38:19,000
还是一些比如说像 Dropbox

1224
00:38:19,000 --> 00:38:20,000
它没有改

1225
00:38:20,000 --> 00:38:20,000
对吧

1226
00:38:20,000 --> 00:38:21,000
这种原认程序

1227
00:38:21,000 --> 00:38:25,000
除了刚才你知道内存仗用比较大的问题之外

1228
00:38:25,000 --> 00:38:26,000
性能损伤大概有多少

1229
00:38:26,000 --> 00:38:27,000
你能感受得到吗

1230
00:38:28,000 --> 00:38:30,000
UI 程序的话几乎感受不到

1231
00:38:30,000 --> 00:38:32,000
就是你可能感觉点开的时候

1232
00:38:32,000 --> 00:38:33,000
稍微它慢了一点

1233
00:38:33,000 --> 00:38:36,000
就是可能慢了那么一秒不到的一个时间

1234
00:38:36,000 --> 00:38:37,000
但是我不确定这是心理作用

1235
00:38:37,000 --> 00:38:41,000
还是它真的是慢的一个作用

1236
00:38:41,000 --> 00:38:42,000
你有可能今天我们要收到的

1237
00:38:42,000 --> 00:38:43,000
后面那个问题导致的

1238
00:38:44,000 --> 00:38:45,000
是的

1239
00:38:45,000 --> 00:38:49,000
然后根据别人的评测结果来看的话

1240
00:38:49,000 --> 00:38:51,000
即使是在虚拟程序上运行的速度的话

1241
00:38:51,000 --> 00:38:54,000
都比在原来的 intel 的机器上原生运行还快

1242
00:38:54,000 --> 00:38:57,000
这个时代是太可怕了

1243
00:38:57,000 --> 00:39:00,000
对这个是我觉得最让我们吃惊的一个地方

1244
00:39:00,000 --> 00:39:05,000
它在一个 M 1 芯片上模拟运行 X 86 的指令

1245
00:39:05,000 --> 00:39:10,000
还比在 X 86 的原生的机器上去运行

1246
00:39:10,000 --> 00:39:10,000
还要快

1247
00:39:10,000 --> 00:39:13,000
因为 MPC 的性能提升足够大

1248
00:39:13,000 --> 00:39:13,000
对吧

1249
00:39:13,000 --> 00:39:14,000
然后它模拟损耗

1250
00:39:14,000 --> 00:39:18,000
比如说它 M 1 比上一代 X 86 的性能提高了 70%

1251
00:39:18,000 --> 00:39:20,000
然后模拟损耗可能只有 20%或者是 30%

1252
00:39:20,000 --> 00:39:21,000
那三上算起来

1253
00:39:21,000 --> 00:39:23,000
我还是有 40%的提高

1254
00:39:23,000 --> 00:39:24,000
对不对

1255
00:39:24,000 --> 00:39:29,000
这个真的是把 intel 模拔 T 版模拔了

1256
00:39:29,000 --> 00:39:30,000
是的

1257
00:39:30,000 --> 00:39:31,000
这个就让人感觉

1258
00:39:31,000 --> 00:39:32,000
就都怀疑人生了

1259
00:39:32,000 --> 00:39:33,000
intel 到底这么多年

1260
00:39:33,000 --> 00:39:35,000
最近在干什么

1261
00:39:35,000 --> 00:39:36,000
真的是没有对比都没有伤害

1262
00:39:36,000 --> 00:39:40,000
就你在 Apple 搞出一个东西之前

1263
00:39:40,000 --> 00:39:44,000
你是不知道 intel 是老一经老太龙中到了一个什么地步

1264
00:39:44,000 --> 00:39:45,000
是的

1265
00:39:45,000 --> 00:39:47,000
虽然我们经常会调侃压高场

1266
00:39:47,000 --> 00:39:50,000
但是我们可能心里面总会有一个想法说

1267
00:39:50,000 --> 00:39:53,000
可能现在芯片发展的确是到了

1268
00:39:53,000 --> 00:39:54,000
就是到了这个瓶颈

1269
00:39:54,000 --> 00:39:56,000
老实说模耳定力到头了

1270
00:39:56,000 --> 00:39:56,000
对不对

1271
00:39:56,000 --> 00:40:00,000
然后新国说来看我调达你一下

1272
00:40:00,000 --> 00:40:01,000
对

1273
00:40:01,000 --> 00:40:03,000
只不过在新的 M 1 上面的话

1274
00:40:03,000 --> 00:40:05,000
还是能发现一些不一样的东西

1275
00:40:05,000 --> 00:40:07,000
有一些可能是在本来在 X 86 结构上

1276
00:40:07,000 --> 00:40:10,000
我们已经熟悉了十几年

1277
00:40:10,000 --> 00:40:11,000
几十年的一些东西

1278
00:40:11,000 --> 00:40:14,000
它现在在苹果之后被颠覆了

1279
00:40:14,000 --> 00:40:15,000
比如说我发现的话

1280
00:40:15,000 --> 00:40:16,000
可能有这几个

1281
00:40:16,000 --> 00:40:20,000
一个是根据最新的拆解结果看的话

1282
00:40:20,000 --> 00:40:23,000
新的 WiFi 和蓝牙芯片已经不再是一个

1283
00:40:23,000 --> 00:40:25,000
高通的一个独立的一个设备了

1284
00:40:25,000 --> 00:40:26,000
在原来的 MX 的话

1285
00:40:26,000 --> 00:40:27,000
我理解的话

1286
00:40:27,000 --> 00:40:29,000
它应该还是在 PCIE 总线上的一个设备

1287
00:40:30,000 --> 00:40:33,000
它老的苹果的 Mac 方案的 WiFi 方案

1288
00:40:33,000 --> 00:40:35,000
一般都是接那个博通的方案

1289
00:40:35,000 --> 00:40:36,000
博通的单都给它做一块卡

1290
00:40:36,000 --> 00:40:36,000
对

1291
00:40:36,000 --> 00:40:39,000
但是这个事情好像也不是苹果先发明的

1292
00:40:39,000 --> 00:40:41,000
应该我记得如果没记错的话

1293
00:40:41,000 --> 00:40:44,000
英特尔是最近两年做了一个技术

1294
00:40:44,000 --> 00:40:47,000
它把 WiFi 的主要也是

1295
00:40:48,000 --> 00:40:48,000
UiFi 它分两个

1296
00:40:48,000 --> 00:40:51,000
一个是叫做 Physical Layer

1297
00:40:51,000 --> 00:40:52,000
物理层就包括什么

1298
00:40:52,000 --> 00:40:55,000
无线信号的调制解调那一套东西

1299
00:40:55,000 --> 00:40:56,000
它单独还有一个东西

1300
00:40:56,000 --> 00:40:58,000
但是它的逻辑就是什么协议

1301
00:40:59,000 --> 00:41:00,000
控制那层

1302
00:41:00,000 --> 00:41:02,000
它就已经做到了英特尔的芯片里面去

1303
00:41:02,000 --> 00:41:04,000
所以你现在去买一些比较最新的

1304
00:41:04,000 --> 00:41:06,000
英特尔的一种笔记文

1305
00:41:06,000 --> 00:41:09,000
你会发现它也是在芯片主里面

1306
00:41:09,000 --> 00:41:11,000
就是在英特尔的芯片里面完成的

1307
00:41:11,000 --> 00:41:12,000
就这个事情也是一样的

1308
00:41:12,000 --> 00:41:14,000
明白

1309
00:41:14,000 --> 00:41:17,000
以后都是变成那种独立的

1310
00:41:18,000 --> 00:41:20,000
如果我们以前还搞拆卡

1311
00:41:20,000 --> 00:41:22,000
比如说我们给一个老的 Mac 换上

1312
00:41:22,000 --> 00:41:25,000
比如说 WiFi 6 的 WiFi 卡

1313
00:41:25,000 --> 00:41:25,000
也是可行的

1314
00:41:25,000 --> 00:41:27,000
但以后就越来越不可行

1315
00:41:27,000 --> 00:41:29,000
就是因为它是集成在 CPU 里面的了

1316
00:41:29,000 --> 00:41:30,000
对

1317
00:41:30,000 --> 00:41:34,000
有一个更直观的就是 FaceTime 的摄像头

1318
00:41:34,000 --> 00:41:34,000
原来的话

1319
00:41:34,000 --> 00:41:37,000
FaceTime 摄像头也是靠 USB 总线

1320
00:41:37,000 --> 00:41:37,000
介入了

1321
00:41:37,000 --> 00:41:39,000
现在在新的 M 1 设备上

1322
00:41:39,000 --> 00:41:41,000
我在系统信息里面看

1323
00:41:41,000 --> 00:41:42,000
USB 总线上摸在手上

1324
00:41:42,000 --> 00:41:43,000
是干干净净的

1325
00:41:43,000 --> 00:41:44,000
什么设备都没有

1326
00:41:44,000 --> 00:41:46,000
属于这些内置的这些设备的话

1327
00:41:46,000 --> 00:41:47,000
很有可能现在都是

1328
00:41:47,000 --> 00:41:50,000
苹果自己的一些特殊的一些实现

1329
00:41:50,000 --> 00:41:52,000
去直接就和足行编剧同学

1330
00:41:52,000 --> 00:41:54,000
而不再是一些标准的

1331
00:41:54,000 --> 00:41:56,000
像我们是熟悉的这些方式

1332
00:41:56,000 --> 00:41:57,000
它叫做 SLC

1333
00:41:57,000 --> 00:41:58,000
System Check

1334
00:41:58,000 --> 00:41:59,000
这个整合度是非常厉害的

1335
00:41:59,000 --> 00:42:00,000
吃筋的

1336
00:42:01,000 --> 00:42:03,000
另外还有一个比较有趣的事情

1337
00:42:03,000 --> 00:42:05,000
就是当你的 M 1 设备

1338
00:42:05,000 --> 00:42:07,000
如果它真的整个系统坏了之后

1339
00:42:07,000 --> 00:42:09,000
你怎么样去让它恢复这个事情

1340
00:42:09,000 --> 00:42:12,000
变得也稍微有点奇怪

1341
00:42:12,000 --> 00:42:13,000
就原来的话

1342
00:42:13,000 --> 00:42:15,000
我们的电脑不管是台式界

1343
00:42:15,000 --> 00:42:17,000
然后比这个也好坏了的话

1344
00:42:17,000 --> 00:42:20,000
像 Mark 的话是进入恢复模式

1345
00:42:20,000 --> 00:42:20,000
从网上通音下

1346
00:42:21,000 --> 00:42:24,000
然后像是或者的话更传统的方式

1347
00:42:24,000 --> 00:42:26,000
就是拿 U 盘或者是光去光盘

1348
00:42:26,000 --> 00:42:28,000
重新去装整个操作系统

1349
00:42:28,000 --> 00:42:30,000
现在在新的 M 1 设备上

1350
00:42:30,000 --> 00:42:31,000
当如果你出现了

1351
00:42:31,000 --> 00:42:33,000
真正彻底死撂的设备

1352
00:42:33,000 --> 00:42:34,000
彻底死撂开不开的时候

1353
00:42:34,000 --> 00:42:37,000
你要做的事情是再找一台 Mac

1354
00:42:37,000 --> 00:42:38,000
把它两个连起来

1355
00:42:38,000 --> 00:42:41,000
然后把那台 Mac 按照特定的开机方式

1356
00:42:41,000 --> 00:42:42,000
让它进 DFU 模式

1357
00:42:42,000 --> 00:42:44,000
然后在这边的 Mac 上去刷它

1358
00:42:44,000 --> 00:42:46,000
就像刷一个 iPhone 一样

1359
00:42:46,000 --> 00:42:48,000
它不能自举了

1360
00:42:48,000 --> 00:42:49,000
对 我还没有试过

1361
00:42:49,000 --> 00:42:51,000
但是不知道是否拿一个

1362
00:42:51,000 --> 00:42:52,000
可启动的 U 盘上去之后

1363
00:42:52,000 --> 00:42:55,000
能够通音过 U 盘去启动

1364
00:42:55,000 --> 00:42:57,000
根据之前 DTP 的一些经验的话

1365
00:42:57,000 --> 00:42:59,000
就是那个时候是不行的

1366
00:42:59,000 --> 00:43:01,000
唯一的恢复方法

1367
00:43:01,000 --> 00:43:02,000
就是我再拿一台 Mac

1368
00:43:02,000 --> 00:43:03,000
然后把它接上来

1369
00:43:03,000 --> 00:43:05,000
当成一个设备

1370
00:43:05,000 --> 00:43:06,000
然后把它刷一遍系统

1371
00:43:06,000 --> 00:43:07,000
所以听到这里

1372
00:43:07,000 --> 00:43:09,000
其实我们已经猜出了 DTP

1373
00:43:09,000 --> 00:43:10,000
你是遇到的什么问题

1374
00:43:10,000 --> 00:43:11,000
还需要做这套事

1375
00:43:11,000 --> 00:43:13,000
虽然我们能识论它

1376
00:43:13,000 --> 00:43:15,000
但是我们推测出来

1377
00:43:15,000 --> 00:43:16,000
应该是这么一个结果

1378
00:43:16,000 --> 00:43:18,000
对 我没有对它进行评论

1379
00:43:22,000 --> 00:43:23,000
刚才说到了软件

1380
00:43:23,000 --> 00:43:26,000
你的工艺剧软件没什么遇到问题

1381
00:43:26,000 --> 00:43:28,000
你日常需要用的一些软件

1382
00:43:28,000 --> 00:43:29,000
上面有遇到什么问题

1383
00:43:29,000 --> 00:43:30,000
不管是原生运行的

1384
00:43:30,000 --> 00:43:32,000
还是需要模拟运行的

1385
00:43:32,000 --> 00:43:33,000
应该是完全没遇到

1386
00:43:33,000 --> 00:43:35,000
首先是因为我用的软件的话

1387
00:43:35,000 --> 00:43:37,000
大家直接开发者的话

1388
00:43:37,000 --> 00:43:38,000
都更新速度非常快

1389
00:43:38,000 --> 00:43:40,000
基本上日常用到像

1390
00:43:40,000 --> 00:43:42,000
Bare Cinc 这些的话

1391
00:43:42,000 --> 00:43:43,000
都已经专门适配

1392
00:43:43,000 --> 00:43:44,000
已经是原生代码的

1393
00:43:44,000 --> 00:43:46,000
那个版本都已经出来了

1394
00:43:46,000 --> 00:43:47,000
所以说没有任何问题

1395
00:43:47,000 --> 00:43:49,000
然后有一些稍微的

1396
00:43:49,000 --> 00:43:50,000
就一点的程序

1397
00:43:50,000 --> 00:43:52,000
像 Jobbox

1398
00:43:52,000 --> 00:43:53,000
Sportify 这些的话

1399
00:43:53,000 --> 00:43:54,000
就靠金融成

1400
00:43:54,000 --> 00:43:56,000
那讯你划的运行也没有任何问题

1401
00:43:56,000 --> 00:43:57,000
而且我相信这些

1402
00:43:57,000 --> 00:43:59,000
他们也会比较快的

1403
00:43:59,000 --> 00:44:01,000
把 M 1 版本的就是做出来

1404
00:44:01,000 --> 00:44:04,000
因为他们还是要做原生的

1405
00:44:04,000 --> 00:44:05,000
比较在乎用户体验的这些公司

1406
00:44:05,000 --> 00:44:06,000
是的

1407
00:44:06,000 --> 00:44:09,000
而且其实整个迁进过程的话

1408
00:44:09,000 --> 00:44:10,000
其实工作量并不大

1409
00:44:10,000 --> 00:44:11,000
都是比较烦

1410
00:44:11,000 --> 00:44:12,000
主要是更参数的一些

1411
00:44:12,000 --> 00:44:14,000
金融性的一些小修小调的一些问题

1412
00:44:14,000 --> 00:44:17,000
没有什么需要你彻底去颠覆原来

1413
00:44:17,000 --> 00:44:19,000
架构从构这样的一些事情

1414
00:44:19,000 --> 00:44:21,000
因为你自己也有几个程序

1415
00:44:21,000 --> 00:44:24,000
是很快就 port 到了 M 1 上面去

1416
00:44:24,000 --> 00:44:24,000
好像这过程中

1417
00:44:24,000 --> 00:44:27,000
我理解应该也是比较平滑的

1418
00:44:27,000 --> 00:44:28,000
没有用到什么太大的问题

1419
00:44:28,000 --> 00:44:29,000
是的

1420
00:44:29,000 --> 00:44:31,000
就基本上就是几个依赖库

1421
00:44:31,000 --> 00:44:32,000
然后把它拿来之后

1422
00:44:32,000 --> 00:44:34,000
调整一下它的一些便宜参数

1423
00:44:34,000 --> 00:44:35,000
在 AMO 上能便宜出来

1424
00:44:35,000 --> 00:44:37,000
然后至于我自己的代码的话

1425
00:44:37,000 --> 00:44:39,000
主要是依赖 Xcode 的这些的话

1426
00:44:39,000 --> 00:44:42,000
就基本上是点两下搞定

1427
00:44:42,000 --> 00:44:46,000
这就一直在这个苹果生态体系里面

1428
00:44:46,000 --> 00:44:47,000
对还是比较舒服的

1429
00:44:47,000 --> 00:44:47,000
对吧

1430
00:44:47,000 --> 00:44:49,000
它已经帮你把所有的问题都解决了

1431
00:44:49,000 --> 00:44:52,000
然后你只用点点就好了

1432
00:44:52,000 --> 00:44:54,000
对一方面是它帮解决了

1433
00:44:54,000 --> 00:44:56,000
但另外一方面就是本身的话

1434
00:44:56,000 --> 00:44:58,000
这个 Mac 和 iOS 的开发者生态

1435
00:44:58,000 --> 00:44:59,000
是打通的

1436
00:44:59,000 --> 00:45:01,000
大家基本上写的代码的话

1437
00:45:01,000 --> 00:45:03,000
除了一些因为用的一些专用户不一样

1438
00:45:03,000 --> 00:45:03,000
它不兼容

1439
00:45:03,000 --> 00:45:06,000
但实际上本身大部分你在 Mac 上的代码

1440
00:45:06,000 --> 00:45:08,000
在 iOS 上也是能用的

1441
00:45:08,000 --> 00:45:11,000
所以说它就自己本身就不存在

1442
00:45:11,000 --> 00:45:12,000
这个迁移的这么一个障碍

1443
00:45:12,000 --> 00:45:14,000
所以你在实际的

1444
00:45:14,000 --> 00:45:17,000
就是我们现在你做了两款 Surge 的

1445
00:45:17,000 --> 00:45:20,000
iOS 版和 Lpass 的 iOS 版

1446
00:45:20,000 --> 00:45:21,000
现在都可以

1447
00:45:21,000 --> 00:45:25,000
理论上就可以在 Mac 上去下这个 iOS 版来用

1448
00:45:25,000 --> 00:45:26,000
只是说它在界面

1449
00:45:26,000 --> 00:45:28,000
可能没有为 Mac 单独优化

1450
00:45:28,000 --> 00:45:28,000
对

1451
00:45:28,000 --> 00:45:31,000
然后碰巧刚好这两个软件都是有单独的

1452
00:45:31,000 --> 00:45:32,000
为 Mac 优化

1453
00:45:32,000 --> 00:45:33,000
甚至功能上也有比较

1454
00:45:33,000 --> 00:45:36,000
比较大的不一样的 Mac 版本

1455
00:45:36,000 --> 00:45:38,000
所以好像也没有什么必要

1456
00:45:38,000 --> 00:45:39,000
是的

1457
00:45:39,000 --> 00:45:42,000
而且让人感觉 Apple 这件事情做得还挺细心的

1458
00:45:42,000 --> 00:45:45,000
就是本来以为它大概是做了这么一样

1459
00:45:45,000 --> 00:45:45,000
以之后

1460
00:45:45,000 --> 00:45:48,000
你起起来就像原来我们的虚拟机一样

1461
00:45:48,000 --> 00:45:49,000
然后你可以在里面用

1462
00:45:49,000 --> 00:45:51,000
上面 Drop 分的 UI 功能

1463
00:45:51,000 --> 00:45:53,000
就已经还是一个不错的一个情况了

1464
00:45:53,000 --> 00:45:55,000
比如说我现在我自己开发 Surge 的时候

1465
00:45:55,000 --> 00:45:58,000
虚拟机里面的 Surge 是肯定没有办法启动

1466
00:45:58,000 --> 00:45:59,000
network extension

1467
00:45:59,000 --> 00:46:03,000
这个网络扩展去接管我 Mac 的网络的

1468
00:46:03,000 --> 00:46:05,000
但是现在我发现神奇的是

1469
00:46:05,000 --> 00:46:07,000
就是在 App Store 上面你下了 Surge 之后

1470
00:46:07,000 --> 00:46:08,000
你用 Surge 的 iOS 版

1471
00:46:08,000 --> 00:46:12,000
它在 iOS 的这么一个模拟器的虚拟环境下

1472
00:46:12,000 --> 00:46:13,000
你启动了之后

1473
00:46:13,000 --> 00:46:16,000
它能够对接上 Mac 系统上的 N 1

1474
00:46:16,000 --> 00:46:18,000
扩展这一套的所有的逻辑

1475
00:46:18,000 --> 00:46:21,000
然后把整个系统的微 pn 给接管

1476
00:46:21,000 --> 00:46:24,000
这个是让我很惊艳的一件事情

1477
00:46:25,000 --> 00:46:28,000
也就是说不用怎么改 iOS 的这个版本

1478
00:46:28,000 --> 00:46:32,000
也可以去操作 Mac 一些底层的一些系统扩展

1479
00:46:32,000 --> 00:46:33,000
没错

1480
00:46:33,000 --> 00:46:35,000
因为它这些扩展的话

1481
00:46:35,000 --> 00:46:36,000
它的 extension 的话

1482
00:46:36,000 --> 00:46:37,000
它在 Mac 上和 iOS 上

1483
00:46:37,000 --> 00:46:39,000
它的接口是完全一样的

1484
00:46:39,000 --> 00:46:41,000
有很多扩展的接口都是完全一样的

1485
00:46:41,000 --> 00:46:45,000
像之前我看 net extension filter data provider

1486
00:46:45,000 --> 00:46:48,000
就是当时跟我们接下来聊的话题

1487
00:46:48,000 --> 00:46:50,000
比较相关的新闻里面的时候

1488
00:46:50,000 --> 00:46:53,000
我注意到它的 availability 是

1489
00:46:53,000 --> 00:46:58,000
比如说它会写上 iOS 9.0 MacOS 10.15

1490
00:46:58,000 --> 00:47:01,000
然后加上 Mac Catalyst 13 以上

1491
00:47:01,000 --> 00:47:06,000
它会说 class 的或者这个 API 的整个接口

1492
00:47:06,000 --> 00:47:08,000
在这三个版本里面是完全一样的

1493
00:47:08,000 --> 00:47:11,000
所以它签议成本应该是蛮小

1494
00:47:11,000 --> 00:47:12,000
没错

1495
00:47:12,000 --> 00:47:13,000
但是就是让人感觉

1496
00:47:13,000 --> 00:47:16,000
它既然去花了这个新曲

1497
00:47:16,000 --> 00:47:18,000
还是要花这个新曲做的有事情

1498
00:47:18,000 --> 00:47:19,000
也是挺不容易的

1499
00:47:19,000 --> 00:47:20,000
它可以不接

1500
00:47:20,000 --> 00:47:23,000
然后就导致这种用不了

1501
00:47:23,000 --> 00:47:23,000
对

1502
00:47:23,000 --> 00:47:24,000
它也可以完全不接

1503
00:47:24,000 --> 00:47:27,000
其实一般来说用户不会太在意这件事情

1504
00:47:27,000 --> 00:47:29,000
它一个要求你改写

1505
00:47:29,000 --> 00:47:32,000
像 Macrosoft 就直接会

1506
00:47:32,000 --> 00:47:33,000
Windows 就会要求你

1507
00:47:33,000 --> 00:47:35,000
就你再写一遍了

1508
00:47:35,000 --> 00:47:36,000
对

1509
00:47:36,000 --> 00:47:36,000
从上面来看

1510
00:47:38,000 --> 00:47:39,000
这个时候反倒是说

1511
00:47:39,000 --> 00:47:42,000
苹果对跨平台建议性做的还蛮好的

1512
00:47:42,000 --> 00:47:42,000
是吧

1513
00:47:42,000 --> 00:47:45,000
但它都是自己的控制的底层系统

1514
00:47:45,000 --> 00:47:46,000
没错

1515
00:47:46,000 --> 00:47:49,000
就是我看起来它还挺用力的会去推荐事情的

1516
00:47:49,000 --> 00:47:50,000
因为我一开始以为的话

1517
00:47:50,000 --> 00:47:52,000
可能我在 iOS 的 App 里面

1518
00:47:52,000 --> 00:47:54,000
它如果在 Mac 虚拟环境下

1519
00:47:54,000 --> 00:47:56,000
我一些获取系统配置

1520
00:47:56,000 --> 00:47:58,000
系统参数的一些函数

1521
00:47:58,000 --> 00:48:00,000
应该是能拿到的是 Mac 的一些参数

1522
00:48:00,000 --> 00:48:01,000
这才是比较合理的

1523
00:48:01,000 --> 00:48:03,000
结果我发现其实 App

1524
00:48:03,000 --> 00:48:04,000
对这个进行了一个造假

1525
00:48:04,000 --> 00:48:08,000
我在一个 Mac 设备上面

1526
00:48:08,000 --> 00:48:10,000
如果是 iOS 这么运行的方式的话

1527
00:48:10,000 --> 00:48:14,000
我拿到的设备信息是 iPad 14

1528
00:48:14,000 --> 00:48:14,000
对

1529
00:48:14,000 --> 00:48:15,000
14 都好

1530
00:48:15,000 --> 00:48:15,000
1

1531
00:48:15,000 --> 00:48:17,000
它会欺骗你

1532
00:48:17,000 --> 00:48:17,000
是吧

1533
00:48:17,000 --> 00:48:17,000
对

1534
00:48:17,000 --> 00:48:20,000
就像你以为它是在一个 iPad 上运行的

1535
00:48:21,000 --> 00:48:21,000
对

1536
00:48:21,000 --> 00:48:22,000
没错

1537
00:48:22,000 --> 00:48:25,000
超多系统版本是 14.1 还是 14.0

1538
00:48:25,000 --> 00:48:28,000
就是它完全的虚拟化造假出了一套 iOS 环境

1539
00:48:28,000 --> 00:48:32,000
让你整个英雄相信你真的是在一个 iOS 上面去运行

1540
00:48:32,000 --> 00:48:32,000
对

1541
00:48:32,000 --> 00:48:35,000
这里其实我们就很赞的说到这件事情

1542
00:48:35,000 --> 00:48:38,000
就是说当时大家在担心

1543
00:48:38,000 --> 00:48:43,000
换成 ARM 指令机后的 M 1

1544
00:48:43,000 --> 00:48:46,000
上面很多原生的 X 86 的软件

1545
00:48:46,000 --> 00:48:47,000
不就运行不了了吗

1546
00:48:47,000 --> 00:48:48,000
那怎么办

1547
00:48:48,000 --> 00:48:49,000
不会面临软件荒

1548
00:48:49,000 --> 00:48:52,000
其实我们看不见它的 TU 的两个解决方案

1549
00:48:52,000 --> 00:48:55,000
应该就是说通过 NASROSETA 2 来模拟运行 X 86

1550
00:48:55,000 --> 00:48:57,000
目前来看质量还是非常好的

1551
00:48:57,000 --> 00:49:00,000
基本上没有什么大的问题

1552
00:49:00,000 --> 00:49:04,000
然后就是说你还可以拿 iOS 上面的软件库

1553
00:49:04,000 --> 00:49:06,000
直接在 Mac 上不做

1554
00:49:06,000 --> 00:49:07,000
基本上不做什么修改

1555
00:49:07,000 --> 00:49:09,000
就在 Mac 上面运行

1556
00:49:09,000 --> 00:49:11,000
这个就是说又提供了一个

1557
00:49:11,000 --> 00:49:14,000
就是说它是提供了一个单纯功能性来讲

1558
00:49:14,000 --> 00:49:15,000
它其实是提供了一个超级的

1559
00:49:15,000 --> 00:49:19,000
它除了能运行 Mac 本身的那些历史的软件

1560
00:49:19,000 --> 00:49:22,000
能运行专门为 M 1 芯片优化过的

1561
00:49:22,000 --> 00:49:25,000
Native 的 Mac 的软件

1562
00:49:25,000 --> 00:49:26,000
还可以运行

1563
00:49:26,000 --> 00:49:28,000
本来在 iOS 上面运行

1564
00:49:28,000 --> 00:49:31,000
没有想到过会在 Mac 上跑的这种软件

1565
00:49:31,000 --> 00:49:31,000
对吧

1566
00:49:31,000 --> 00:49:33,000
它其实是集了三个平台的好处

1567
00:49:33,000 --> 00:49:34,000
对

1568
00:49:34,000 --> 00:49:34,000
是的

1569
00:49:34,000 --> 00:49:36,000
Treaty 380

1570
00:49:36,000 --> 00:49:38,000
这个回答

1571
00:49:40,000 --> 00:49:40,000
有一个问题

1572
00:49:40,000 --> 00:49:42,000
可能打岔问一下

1573
00:49:42,000 --> 00:49:46,000
就是说因为你自己也是 iOS 程序的开发者

1574
00:49:46,000 --> 00:49:50,000
它这样的话会不会导致你的产品的布局

1575
00:49:50,000 --> 00:49:53,000
包括定价策略会有一些影响

1576
00:49:53,000 --> 00:49:54,000
对

1577
00:49:54,000 --> 00:49:54,000
是的

1578
00:49:54,000 --> 00:49:56,000
我也在思考这个问题

1579
00:49:56,000 --> 00:50:01,000
然后现在暂时还没有一个就是一个比较明确的一个结论

1580
00:50:01,000 --> 00:50:04,000
但是确实是未来会需要更多去考虑的一个事情

1581
00:50:04,000 --> 00:50:06,000
Surg 这种比较特殊

1582
00:50:06,000 --> 00:50:08,000
就可能还相当于是比较清晰点

1583
00:50:08,000 --> 00:50:12,000
因为至少我们看到 Surg 的 iOS 版和 Surg 的 Mac 版

1584
00:50:12,000 --> 00:50:14,000
它的功能上有比较显著的区别

1585
00:50:14,000 --> 00:50:16,000
比如说路由模式

1586
00:50:16,000 --> 00:50:18,000
这个是只有 Mac 版才有的

1587
00:50:18,000 --> 00:50:21,000
Surg 目前是基于为平台限制是没法提供的

1588
00:50:21,000 --> 00:50:21,000
是的

1589
00:50:21,000 --> 00:50:25,000
但是如果你是直接把 Surg 版在 Mac 上运行

1590
00:50:25,000 --> 00:50:26,000
因为你根本就没有代码

1591
00:50:26,000 --> 00:50:30,000
所以它也是没有路由模式增强性的功能的

1592
00:50:30,000 --> 00:50:30,000
对不对

1593
00:50:30,000 --> 00:50:32,000
所以相当于说有这种拆性的地方

1594
00:50:32,000 --> 00:50:35,000
但是对于 Lpass 来说就比较尴尬

1595
00:50:35,000 --> 00:50:36,000
因为它的功能其实是差不多的

1596
00:50:36,000 --> 00:50:39,000
也没有说有平台排他性

1597
00:50:39,000 --> 00:50:41,000
但 Lpass 可能不太合适来比

1598
00:50:41,000 --> 00:50:47,000
因为 Lpass 本来他不是靠卖本身的授权来引力的

1599
00:50:47,000 --> 00:50:47,000
对不对

1600
00:50:47,000 --> 00:50:48,000
他是靠订阅

1601
00:50:48,000 --> 00:50:49,000
对是的

1602
00:50:49,000 --> 00:50:52,000
对于现在主流是订阅制的话

1603
00:50:52,000 --> 00:50:53,000
其实就不存在的问题

1604
00:50:53,000 --> 00:50:55,000
本来用户就是买一个订订约

1605
00:50:55,000 --> 00:50:56,000
然后在所有平台上就可以用

1606
00:50:56,000 --> 00:50:59,000
所以说你非要拿 IS 版本在 Mac 上用的话

1607
00:50:59,000 --> 00:51:00,000
那作者其实

1608
00:51:00,000 --> 00:51:01,000
他也不拦你对吧

1609
00:51:01,000 --> 00:51:02,000
你还怎么用

1610
00:51:02,000 --> 00:51:03,000
不会拦你还怎么样子

1611
00:51:03,000 --> 00:51:04,000
这样吧

1612
00:51:04,000 --> 00:51:05,000
但是你比如说像 Sins 这样的话

1613
00:51:05,000 --> 00:51:08,000
实际上单品太独立去购买的话

1614
00:51:08,000 --> 00:51:10,000
就会有点尴尬这个事情

1615
00:51:10,000 --> 00:51:13,000
Mac 版的原生应用的用户体验

1616
00:51:13,000 --> 00:51:16,000
比起 IS 版来说还是挺差距非常大的

1617
00:51:16,000 --> 00:51:19,000
就毕竟是个模拟器是吗

1618
00:51:19,000 --> 00:51:21,000
你永远你所有的操作都是在那么一个虚拟化的

1619
00:51:21,000 --> 00:51:23,000
那么一个小窗口里面干的

1620
00:51:23,000 --> 00:51:24,000
和你在 Mac 上面的话

1621
00:51:24,000 --> 00:51:25,000
各种丰富的

1622
00:51:25,000 --> 00:51:27,000
就交货还是差别很大

1623
00:51:27,000 --> 00:51:28,000
对差别还是很大的

1624
00:51:28,000 --> 00:51:30,000
所以说我觉得对开发者来说

1625
00:51:30,000 --> 00:51:33,000
应该是不会太在意的一件事情

1626
00:51:33,000 --> 00:51:35,000
就不会说因为你能在我上面用了之后

1627
00:51:35,000 --> 00:51:38,000
我就就收入减少了

1628
00:51:38,000 --> 00:51:39,000
或者是我就很担心怎么样

1629
00:51:39,000 --> 00:51:41,000
我觉得到时候你不会猜成问题

1630
00:51:42,000 --> 00:51:44,000
对 我觉得可能主要还是像避免

1631
00:51:44,000 --> 00:51:46,000
或者说如何苹果如何才能避免

1632
00:51:46,000 --> 00:51:49,000
就是 iPad 这种比较尴尬的一个状态

1633
00:51:49,000 --> 00:51:50,000
比如说我们现在看到

1634
00:51:50,000 --> 00:51:53,000
就是说很多国内的软件也好

1635
00:51:53,000 --> 00:51:55,000
甚至国外的软件其实也相对好一点

1636
00:51:55,000 --> 00:51:56,000
但是其实也有这个问题

1637
00:51:56,000 --> 00:51:59,000
就是说他要么就是没有 iPad 版

1638
00:51:59,000 --> 00:52:01,000
因为我记得好像是 Instagram

1639
00:52:01,000 --> 00:52:03,000
到现在还是没有 iPad 版对吧

1640
00:52:04,000 --> 00:52:05,000
没有 肯定没有

1641
00:52:05,000 --> 00:52:08,000
对 你要强行在 iPad 上运行

1642
00:52:08,000 --> 00:52:09,000
iPhone 版也行

1643
00:52:09,000 --> 00:52:10,000
就是变成一个很小的窗口

1644
00:52:10,000 --> 00:52:13,000
或者有两倍的方式把它扩大

1645
00:52:13,000 --> 00:52:15,000
然后像国内的有些软件的

1646
00:52:15,000 --> 00:52:17,000
就是说它有 iPad 版

1647
00:52:17,000 --> 00:52:18,000
但 iPad 版明显你看

1648
00:52:18,000 --> 00:52:20,000
基本上没有怎么用心去做

1649
00:52:20,000 --> 00:52:22,000
就随便重新

1650
00:52:22,000 --> 00:52:22,000
就放大了一下

1651
00:52:22,000 --> 00:52:23,000
放大了一下

1652
00:52:23,000 --> 00:52:25,000
就是很粗暴

1653
00:52:25,000 --> 00:52:27,000
比如说我记得最印象最深刻的

1654
00:52:27,000 --> 00:52:28,000
像京东对吧

1655
00:52:28,000 --> 00:52:30,000
京东这个 APP 我已经用的比较多

1656
00:52:30,000 --> 00:52:31,000
有时候买东西看什么

1657
00:52:31,000 --> 00:52:32,000
有时候 iPad 上在手边

1658
00:52:32,000 --> 00:52:33,000
我就直接在 iPad 上用

1659
00:52:33,000 --> 00:52:36,000
它连横平转过来都不支持

1660
00:52:36,000 --> 00:52:38,000
就只能在 iPad 上输屏

1661
00:52:38,000 --> 00:52:40,000
但我刚好就是有外界键盘

1662
00:52:40,000 --> 00:52:42,000
我的 iPad 大部分都是横平的状态

1663
00:52:42,000 --> 00:52:42,000
就很尴尬

1664
00:52:42,000 --> 00:52:44,000
每次用的时候还得把脑袋写过

1665
00:52:44,000 --> 00:52:46,000
写个 90 多去看它

1666
00:52:46,000 --> 00:52:48,000
我已经放弃了

1667
00:52:48,000 --> 00:52:50,000
我直接就用它 suffer 在溜下期没有

1668
00:52:51,000 --> 00:52:52,000
对

1669
00:52:52,000 --> 00:52:53,000
然后我就在想

1670
00:52:53,000 --> 00:52:56,000
就说这种 iOS APP

1671
00:52:56,000 --> 00:52:57,000
可以在 iMac 上运行

1672
00:52:57,000 --> 00:52:58,000
是可以的

1673
00:52:58,000 --> 00:53:01,000
但会不会有开发者单独为这件事情去优化

1674
00:53:01,000 --> 00:53:04,000
我觉得还是一个非常存疑的事情

1675
00:53:04,000 --> 00:53:07,000
就是如果不解决付费的

1676
00:53:07,000 --> 00:53:08,000
或者用户数量的问题

1677
00:53:08,000 --> 00:53:09,000
可能还是比较干

1678
00:53:09,000 --> 00:53:10,000
还是比较难

1679
00:53:10,000 --> 00:53:12,000
你说 iPad 绝对用户数

1680
00:53:12,000 --> 00:53:14,000
肯定还是比 Mac 绝对用户数要多一些的

1681
00:53:14,000 --> 00:53:17,000
但即便如此厂商还是觉得 iPad 厂商

1682
00:53:17,000 --> 00:53:17,000
没有那么重要

1683
00:53:18,000 --> 00:53:18,000
就不管

1684
00:53:18,000 --> 00:53:20,000
那 Mac 上面就更不用想了

1685
00:53:20,000 --> 00:53:20,000
对

1686
00:53:20,000 --> 00:53:22,000
它其实得从另外一个角度

1687
00:53:22,000 --> 00:53:23,000
可以从另外一个角度来看见

1688
00:53:23,000 --> 00:53:24,000
事情的话

1689
00:53:24,000 --> 00:53:25,000
就是对于我们这种开发者

1690
00:53:25,000 --> 00:53:28,000
是本身就有多平台的软件存在的

1691
00:53:28,000 --> 00:53:30,000
所以说会出现互相平台之间

1692
00:53:30,000 --> 00:53:32,000
抢占那么的一个问题

1693
00:53:32,000 --> 00:53:34,000
但是对于更多的可能开发者来说

1694
00:53:34,000 --> 00:53:36,000
它根本就没有 Mac 版本

1695
00:53:36,000 --> 00:53:38,000
所以说它是平空的话

1696
00:53:38,000 --> 00:53:40,000
多了一部分市场和用户

1697
00:53:40,000 --> 00:53:40,000
对于它来说

1698
00:53:40,000 --> 00:53:42,000
这绝对是一个好消息

1699
00:53:42,000 --> 00:53:45,000
或者说它在做一点点简单的适配调整

1700
00:53:45,000 --> 00:53:49,000
能够比较低成本的去支持 Mac

1701
00:53:49,000 --> 00:53:50,000
它其实也还可以的

1702
00:53:50,000 --> 00:53:54,000
只要不让它完全在为 Mac 单独定制一套

1703
00:53:54,000 --> 00:53:55,000
那就很麻烦了

1704
00:53:56,000 --> 00:53:56,000
对

1705
00:53:56,000 --> 00:53:56,000
是的

1706
00:53:56,000 --> 00:53:57,000
没错

1707
00:53:57,000 --> 00:53:58,000
对

1708
00:53:58,000 --> 00:53:59,000
因为这里就不得不吐槽一下

1709
00:53:59,000 --> 00:54:03,000
我们日常用的推特的官方客户端在 Mac 上面

1710
00:54:03,000 --> 00:54:04,000
它本质也是一个 iOS 版

1711
00:54:04,000 --> 00:54:08,000
它通过 Catalist 的方式来运行

1712
00:54:08,000 --> 00:54:10,000
我觉得 Catalist

1713
00:54:10,000 --> 00:54:10,000
对

1714
00:54:10,000 --> 00:54:13,000
所以说可能 Catalist 稍微简单解释一下

1715
00:54:13,000 --> 00:54:14,000
就有朋友不太熟悉

1716
00:54:15,000 --> 00:54:22,000
Catalist 是一套在 X 86 的芯片上的 Mac 上面

1717
00:54:22,000 --> 00:54:25,000
需要开发者做一些处理

1718
00:54:25,000 --> 00:54:30,000
才能够把一个 iOS 软件变成 Mac 上可以运行的这么一套方案

1719
00:54:30,000 --> 00:54:30,000
对了

1720
00:54:30,000 --> 00:54:30,000
对

1721
00:54:30,000 --> 00:54:30,000
是的

1722
00:54:30,000 --> 00:54:32,000
和这个对比起来

1723
00:54:32,000 --> 00:54:35,000
那显然是在 M 1 芯片的

1724
00:54:35,000 --> 00:54:36,000
Rosetta 2 的差别

1725
00:54:36,000 --> 00:54:37,000
没有

1726
00:54:37,000 --> 00:54:42,000
Rosetta 它是在 M 1 上运行 X 86 的 Mac 程序

1727
00:54:42,000 --> 00:54:43,000
对吧

1728
00:54:43,000 --> 00:54:47,000
这个是 Catalist 是在 X 86 的 Mac 上运行 iOS 的程序

1729
00:54:47,000 --> 00:54:48,000
对吧

1730
00:54:48,000 --> 00:54:49,000
然后现在就说你可以

1731
00:54:49,000 --> 00:54:52,000
那个时候还是要这两个事情都是要

1732
00:54:52,000 --> 00:54:54,000
Rosetta 是不需要开发者介入的

1733
00:54:54,000 --> 00:54:56,000
然后 Catalist 是需要开发者做一些操作的

1734
00:54:56,000 --> 00:55:00,000
然后还有一个不需要开发者做一个默认操作的

1735
00:55:00,000 --> 00:55:05,000
就是说直接在 M 1 芯片的 Mac 上面去运行 iOS 的程序

1736
00:55:05,000 --> 00:55:09,000
我觉得像比如说像推特这种客户端这种做的这种调戏

1737
00:55:09,000 --> 00:55:13,000
那你还不如不要那个 Catalist 你直接在 M 1 上去运行

1738
00:55:13,000 --> 00:55:15,000
一个 iOS 版本推特可能效果还好一点

1739
00:55:15,000 --> 00:55:16,000
Wait a second

1740
00:55:16,000 --> 00:55:18,000
推特的客户端你在用吗

1741
00:55:18,000 --> 00:55:19,000
我有在用啊

1742
00:55:19,000 --> 00:55:21,000
非常难用啊

1743
00:55:21,000 --> 00:55:23,000
我都已经完全忘记这件事情了

1744
00:55:23,000 --> 00:55:23,000
对

1745
00:55:23,000 --> 00:55:24,000
我就往用网页吧

1746
00:55:24,000 --> 00:55:28,000
因为在 Mac 上面刷推的时间可能也没有那么多吧

1747
00:55:28,000 --> 00:55:30,000
就可能发推的时间要比刷推的时间多

1748
00:55:30,000 --> 00:55:31,000
对

1749
00:55:31,000 --> 00:55:32,000
发推会比较多一些

1750
00:55:32,000 --> 00:55:34,000
它毕竟还是有那个系统级别的整合

1751
00:55:34,000 --> 00:55:36,000
比如说你在一个网页上

1752
00:55:36,000 --> 00:55:37,000
你要 share 到推特的话

1753
00:55:37,000 --> 00:55:38,000
你有两个方案

1754
00:55:38,000 --> 00:55:40,000
因为就是说你手工编辑复制

1755
00:55:40,000 --> 00:55:44,000
那个叫什么 UIL 到推特里面去发也可以

1756
00:55:44,000 --> 00:55:47,000
但是如果它有那个

1757
00:55:47,000 --> 00:55:49,000
虽然说是一个 Catalist 改的一个 APP

1758
00:55:49,000 --> 00:55:53,000
但好歹它会提供在 share 系统里面分享那个菜单里面

1759
00:55:53,000 --> 00:55:54,000
提供说分享的推特

1760
00:55:54,000 --> 00:55:56,000
你也可以做一些相对的操作

1761
00:55:56,000 --> 00:55:59,000
我还是比较把印这一套便利性的

1762
00:55:59,000 --> 00:56:01,000
我从来没有用过这个功能

1763
00:56:01,000 --> 00:56:03,000
就 share 出推特人

1764
00:56:04,000 --> 00:56:06,000
我还是在继续用推特 Boot

1765
00:56:06,000 --> 00:56:09,000
但推特 Boot 的话现在受 API 影响比较大了

1766
00:56:09,000 --> 00:56:12,000
就是它那边推特没有给很多数据回来

1767
00:56:12,000 --> 00:56:14,000
很多的那些别人的回复什么的环阵

1768
00:56:14,000 --> 00:56:17,000
你拿推特 Boot 中第三方客户端根本看不见

1769
00:56:17,000 --> 00:56:19,000
所以说推特 Boot 也就刷刷 Time Line

1770
00:56:19,000 --> 00:56:25,000
就因为这最近那两年推特的产品本身的改动还是比较大的

1771
00:56:25,000 --> 00:56:28,000
你看它最近就出了一个新的叫 Fleets 什么功能

1772
00:56:28,000 --> 00:56:29,000
越发操弹了

1773
00:56:29,000 --> 00:56:33,000
说白一点就是越发操弹了

1774
00:56:34,000 --> 00:56:37,000
就是它这些新功能都还没有在 API 的层面上

1775
00:56:37,000 --> 00:56:40,000
体现给第三方开发者接入

1776
00:56:40,000 --> 00:56:44,000
所以你要去跟原生客户端进行 Fleets

1777
00:56:44,000 --> 00:56:45,000
Fleets 那肯定是比不上的

1778
00:56:45,000 --> 00:56:47,000
就是这里你做用户

1779
00:56:47,000 --> 00:56:49,000
你就必须得想说你怎么办的

1780
00:56:49,000 --> 00:56:52,000
我就属于那尽量用原生还是原生

1781
00:56:52,000 --> 00:56:53,000
反正捏着鼻子用

1782
00:56:54,000 --> 00:56:55,000
对

1783
00:56:56,000 --> 00:57:00,000
现在差不多 M 1 的 Mac 的问题就聊到这里

1784
00:57:00,000 --> 00:57:02,000
因为你是刚拿到差不多

1785
00:57:02,000 --> 00:57:03,000
还有没有一个星期

1786
00:57:03,000 --> 00:57:04,000
有一个星期了吗

1787
00:57:04,000 --> 00:57:05,000
没有一个星期

1788
00:57:05,000 --> 00:57:07,000
应该就三天四天都是左右的

1789
00:57:07,000 --> 00:57:08,000
对

1790
00:57:08,000 --> 00:57:08,000
对

1791
00:57:08,000 --> 00:57:09,000
可能接下来

1792
00:57:09,000 --> 00:57:12,000
刚才看我们目前看性能是没有问题的

1793
00:57:12,000 --> 00:57:14,000
然后不管是原生性的报表

1794
00:57:14,000 --> 00:57:16,000
然后模拟性的还是超越原来

1795
00:57:16,000 --> 00:57:18,000
这种性目前来看都还好

1796
00:57:18,000 --> 00:57:21,000
但是可能还是有些小小的这种不精神的地方

1797
00:57:21,000 --> 00:57:23,000
但是我相信过个半年一年

1798
00:57:23,000 --> 00:57:28,000
等到它明年出第二代的 Mac 的处理

1799
00:57:28,000 --> 00:57:31,000
就是可能 M 2 比较绝利大

1800
00:57:31,000 --> 00:57:32,000
的时候大家再去买

1801
00:57:32,000 --> 00:57:36,000
可能到时候一个是有新的这种外型的机器了

1802
00:57:36,000 --> 00:57:37,000
另外就是说直接接用性的问题

1803
00:57:37,000 --> 00:57:39,000
基本上也都解决了

1804
00:57:39,000 --> 00:57:41,000
不要该转原生的都转原生的

1805
00:57:41,000 --> 00:57:43,000
然后该模拟的如果还有问题的

1806
00:57:43,000 --> 00:57:44,000
可能也都修掉了

1807
00:57:44,000 --> 00:57:44,000
对吧

1808
00:57:44,000 --> 00:57:47,000
然后那个时候大家再去换一个问题

1809
00:57:47,000 --> 00:57:48,000
就不是很大了

1810
00:57:48,000 --> 00:57:49,000
我这里还想问一下两位

1811
00:57:49,000 --> 00:57:52,000
你们用你们现在的英特尔的 MacBook

1812
00:57:52,000 --> 00:57:56,000
有觉得在电池状态下开盖之后

1813
00:57:56,000 --> 00:57:58,000
到解锁这个过程非常的痛苦吗

1814
00:57:59,000 --> 00:58:01,000
首先我现在没有用 Mac

1815
00:58:01,000 --> 00:58:03,000
我现在说明年是 X 86

1816
00:58:03,000 --> 00:58:05,000
所以我只能告诉你说

1817
00:58:05,000 --> 00:58:07,000
换型那个过程肯定不是非常的快

1818
00:58:07,000 --> 00:58:08,000
还是要等一下下

1819
00:58:09,000 --> 00:58:12,000
我好像基本上不怎么关盖

1820
00:58:12,000 --> 00:58:14,000
好的

1821
00:58:14,000 --> 00:58:17,000
我换型的过程就是随便按一下键盘

1822
00:58:17,000 --> 00:58:19,000
什么键或者敲一下数标证

1823
00:58:19,000 --> 00:58:20,000
好了明白了

1824
00:58:20,000 --> 00:58:23,000
就是我最近几年的感受上来说

1825
00:58:23,000 --> 00:58:26,000
的话我的话 MacBook 可能每次

1826
00:58:26,000 --> 00:58:28,000
每次打开它的盖子的时候

1827
00:58:28,000 --> 00:58:29,000
都感觉非常的痛苦

1828
00:58:29,000 --> 00:58:33,000
黑屏可能就会黑个 1 到 2 秒

1829
00:58:33,000 --> 00:58:34,000
甚至有的时候不知道为什么卡个 5 6 秒

1830
00:58:34,000 --> 00:58:36,000
也是经常常见的事情

1831
00:58:36,000 --> 00:58:38,000
然后亮了之后整个 UI 也是卡住的

1832
00:58:38,000 --> 00:58:40,000
然后数密码也是没有反应

1833
00:58:40,000 --> 00:58:41,000
然后进了桌面之后

1834
00:58:41,000 --> 00:58:44,000
可能也还得再卡一段时间才能恢复正常

1835
00:58:44,000 --> 00:58:47,000
我在后面我在推特上也大概问了一下

1836
00:58:47,000 --> 00:58:50,000
好像有很大部分用户也是有同样的问题

1837
00:58:50,000 --> 00:58:52,000
但是好像有另外一部分用户

1838
00:58:52,000 --> 00:58:53,000
好像又没有遇到这样的问题

1839
00:58:53,000 --> 00:58:57,000
我还挺奇怪这个问题到底是怎么造成的

1840
00:58:57,000 --> 00:58:58,000
我好像没有遇到

1841
00:58:58,000 --> 00:59:00,000
就是在我绝无经有的几次

1842
00:59:00,000 --> 00:59:02,000
把他带着到处走的过程中

1843
00:59:02,000 --> 00:59:04,000
就是可能一天比如说要开个会

1844
00:59:04,000 --> 00:59:07,000
然后频繁关和十来次

1845
00:59:07,000 --> 00:59:10,000
好像没有发生过这样的事情

1846
00:59:10,000 --> 00:59:12,000
但是你刚才说你要数密码

1847
00:59:12,000 --> 00:59:15,000
就是我知道是有些人用手表解锁的话

1848
00:59:15,000 --> 00:59:17,000
就是他那个勉弭码解锁的时候

1849
00:59:17,000 --> 00:59:18,000
会遇到这样的情况

1850
00:59:18,000 --> 00:59:21,000
但是我好像没有遇到过

1851
00:59:21,000 --> 00:59:24,000
因为这里面有一个机制的问题是这样

1852
00:59:24,000 --> 00:59:29,000
首先你取决于它是我们讲系统修棉和系统睡眠

1853
00:59:29,000 --> 00:59:30,000
它不是一个概念

1854
00:59:30,000 --> 00:59:32,000
我们好像之前某些节目里面提到过

1855
00:59:32,000 --> 00:59:37,000
所谓 Sleep 就是说它的内存是不断垫的

1856
00:59:37,000 --> 00:59:42,000
就是整个系统的经向还是在内存里面

1857
00:59:42,000 --> 00:59:45,000
你只要打开它和比较快的去跟着上

1858
00:59:45,000 --> 00:59:46,000
但如果你是修棉

1859
00:59:46,000 --> 00:59:51,000
它就存在这边有一个所谓的深度修棉和潜度修棉问题

1860
00:59:51,000 --> 00:59:53,000
就是你真的这个 hyper 修棉的时候

1861
00:59:53,000 --> 00:59:57,000
它的内存的经向是写到磁盘的

1862
00:59:57,000 --> 01:00:01,000
这个时候就是说哪怕你整个系统没电

1863
01:00:01,000 --> 01:00:03,000
或者是你电池没有用光了

1864
01:00:03,000 --> 01:00:07,000
它在唤醒的时候还是能够把之前的状态给唤醒回来

1865
01:00:07,000 --> 01:00:10,000
但是取决于你电脑有没有插电

1866
01:00:10,000 --> 01:00:12,000
以及你电池的剩余状态

1867
01:00:12,000 --> 01:00:15,000
它内存是有可能会掉电的

1868
01:00:15,000 --> 01:00:18,000
这个时候如果你在打开唤醒的话

1869
01:00:18,000 --> 01:00:25,000
它等于要先从 SSD 上把内存里面的原来的经向读回来

1870
01:00:25,000 --> 01:00:27,000
你看我现在内存都是 16 个 G

1871
01:00:27,000 --> 01:00:27,000
对吧

1872
01:00:27,000 --> 01:00:29,000
至少 8 个 G 以上

1873
01:00:29,000 --> 01:00:31,000
看到 16 个 G 可能是标配

1874
01:00:31,000 --> 01:00:34,000
如果你是叫什么来的台式机

1875
01:00:34,000 --> 01:00:36,000
可能是但台式机不会拔电

1876
01:00:36,000 --> 01:00:38,000
应该问题没有不存在这个问题

1877
01:00:38,000 --> 01:00:39,000
如果是笔记本的话

1878
01:00:39,000 --> 01:00:44,000
假设我们就以 16 个 G 的内存经向都读回来的话

1879
01:00:44,000 --> 01:00:48,000
其实你算一下它的存储到内存带款

1880
01:00:48,000 --> 01:00:50,000
本来就要读 16 个 G 就要那么长时间

1881
01:00:50,000 --> 01:00:55,000
然后再上电再自减再引导起来系统

1882
01:00:55,000 --> 01:00:57,000
就不是说从新开始布达

1883
01:00:57,000 --> 01:00:58,000
就是说恢复之前的状态

1884
01:00:58,000 --> 01:00:59,000
它肯定是需要一个时间的

1885
01:00:59,000 --> 01:01:02,000
但是其实我们讨论的这个好好做

1886
01:01:02,000 --> 01:01:04,000
之前起来的篇文章和解释

1887
01:01:04,000 --> 01:01:05,000
就是和这个其实真的没有关系

1888
01:01:05,000 --> 01:01:06,000
OK

1889
01:01:06,000 --> 01:01:08,000
因为的话现在在最新的 MacBook 里面

1890
01:01:08,000 --> 01:01:11,000
它的机制是一旦核盖修明了之后

1891
01:01:11,000 --> 01:01:12,000
它就动静

1892
01:01:12,000 --> 01:01:17,000
它就先把内存 Dump 一份到固态存储上

1893
01:01:17,000 --> 01:01:19,000
保证那个断电之后的问题

1894
01:01:19,000 --> 01:01:22,000
然后除非电池彻底耗尽一点电都没有了

1895
01:01:22,000 --> 01:01:24,000
你都是从标准的

1896
01:01:24,000 --> 01:01:26,000
从 RAM 上直接唤醒的这种模式

1897
01:01:26,000 --> 01:01:27,000
而不会去走休眠的那种模式

1898
01:01:27,000 --> 01:01:28,000
就只要是电池有电

1899
01:01:28,000 --> 01:01:30,000
它的内存是不会掉电的

1900
01:01:30,000 --> 01:01:31,000
对 是的

1901
01:01:31,000 --> 01:01:32,000
要不说话

1902
01:01:32,000 --> 01:01:34,000
因为现在 16 G 那么大读回来

1903
01:01:34,000 --> 01:01:35,000
你很明显

1904
01:01:35,000 --> 01:01:37,000
你能看到一个进度条在那走进度条子

1905
01:01:37,000 --> 01:01:39,000
那个读那个速度是太慢了

1906
01:01:39,000 --> 01:01:40,000
对

1907
01:01:40,000 --> 01:01:43,000
你说只是说哪怕是内存没有掉电情况下

1908
01:01:43,000 --> 01:01:45,000
它的唤醒也是非常慢的 对吧

1909
01:01:45,000 --> 01:01:46,000
对 是的

1910
01:01:46,000 --> 01:01:48,000
我自己做了一个猜想

1911
01:01:48,000 --> 01:01:50,000
就是不确定这个猜想是对的

1912
01:01:50,000 --> 01:01:51,000
就是在如果

1913
01:01:51,000 --> 01:01:53,000
我就有一个习惯

1914
01:01:53,000 --> 01:01:54,000
就是因为我的 MacBook

1915
01:01:54,000 --> 01:01:55,000
不是主力的工作机

1916
01:01:55,000 --> 01:01:57,000
所以说我可能把它放在那盖个一两天

1917
01:01:57,000 --> 01:01:58,000
我都可能不会用一次

1918
01:01:58,000 --> 01:02:00,000
然后这时候才打开

1919
01:02:00,000 --> 01:02:02,000
然后如果是在 Intel 的设备上的话

1920
01:02:02,000 --> 01:02:04,000
你在休眠的一个状态下的话

1921
01:02:04,000 --> 01:02:06,000
整个 CPU 是彻底不活跃的

1922
01:02:06,000 --> 01:02:08,000
所以说你在打开那一瞬间

1923
01:02:08,000 --> 01:02:09,000
有很多的 App

1924
01:02:09,000 --> 01:02:10,000
它的代码的话

1925
01:02:10,000 --> 01:02:11,000
它有很多的 Timer

1926
01:02:11,000 --> 01:02:11,000
GT-7

1927
01:02:11,000 --> 01:02:13,000
要触发一些各种各样的事情

1928
01:02:14,000 --> 01:02:15,000
这个时候你

1929
01:02:15,000 --> 01:02:16,000
这盖盖盒的越久

1930
01:02:16,000 --> 01:02:18,000
不用了时间越长

1931
01:02:18,000 --> 01:02:19,000
各种的 Timer 就堆得越多

1932
01:02:19,000 --> 01:02:20,000
所以说这一瞬间

1933
01:02:20,000 --> 01:02:22,000
堆积的任务在处理 对吧

1934
01:02:22,000 --> 01:02:23,000
对

1935
01:02:23,000 --> 01:02:23,000
全部都出来了

1936
01:02:23,000 --> 01:02:24,000
然后就要去处理

1937
01:02:24,000 --> 01:02:27,000
然后就会导致这一个时间是非常卡的

1938
01:02:27,000 --> 01:02:29,000
然后现在我测试了一下

1939
01:02:29,000 --> 01:02:30,000
新的 M 1 的 MacBook 的话

1940
01:02:30,000 --> 01:02:34,000
它整个 CPU 的盒在后台是一直会

1941
01:02:34,000 --> 01:02:37,000
又不间断的去唤醒整个系统

1942
01:02:37,000 --> 01:02:37,000
然后去工作的

1943
01:02:37,000 --> 01:02:39,000
就很逮捧一样

1944
01:02:39,000 --> 01:02:42,000
就是它不是完全的一个彻底休眠的状态

1945
01:02:42,000 --> 01:02:43,000
就是它所有的后台任务

1946
01:02:43,000 --> 01:02:45,000
都是在一直运行的

1947
01:02:45,000 --> 01:02:45,000
对

1948
01:02:45,000 --> 01:02:47,000
所以你就不会在那个任意时刻

1949
01:02:47,000 --> 01:02:49,000
会有这么大量的一个任务量堆过来

1950
01:02:49,000 --> 01:02:51,000
然后非要在你一刻全部解决掉

1951
01:02:51,000 --> 01:02:53,000
你说这个我想起一个事

1952
01:02:53,000 --> 01:02:57,000
就是你在 M 1 的 MacBook Pro 上面

1953
01:02:57,000 --> 01:03:00,000
你去它的叫 System Preferences

1954
01:03:00,000 --> 01:03:03,000
就是系统设置里面找到能源

1955
01:03:03,000 --> 01:03:04,000
就是 Energy Saver

1956
01:03:04,000 --> 01:03:05,000
就是节能选项之后

1957
01:03:05,000 --> 01:03:07,000
它还会有选项

1958
01:03:07,000 --> 01:03:08,000
叫做 PowerNAP 选项给你吗

1959
01:03:08,000 --> 01:03:09,000
没有了

1960
01:03:09,000 --> 01:03:10,000
我看过

1961
01:03:10,000 --> 01:03:11,000
它选项已经取消了

1962
01:03:11,000 --> 01:03:12,000
可能就这个问题倒值得

1963
01:03:12,000 --> 01:03:15,000
PowerNAP 是我现在是 10 点几

1964
01:03:15,000 --> 01:03:16,000
引进的一个新特性

1965
01:03:16,000 --> 01:03:20,000
就是说它可以让你 Mac 在待机

1966
01:03:20,000 --> 01:03:21,000
或者休眠状态下

1967
01:03:21,000 --> 01:03:23,000
它还是隔三差五的

1968
01:03:23,000 --> 01:03:24,000
唤醒一下

1969
01:03:24,000 --> 01:03:25,000
然后来处理一下

1970
01:03:25,000 --> 01:03:26,000
比如说是做这个 Timer

1971
01:03:26,000 --> 01:03:27,000
新的备份

1972
01:03:28,000 --> 01:03:29,000
它说是检查邮件

1973
01:03:29,000 --> 01:03:31,000
或者是 iCloud 推送处理

1974
01:03:31,000 --> 01:03:31,000
对吧

1975
01:03:31,000 --> 01:03:32,000
但是这个是仅限

1976
01:03:32,000 --> 01:03:33,000
我的理解好

1977
01:03:33,000 --> 01:03:35,000
仅限于苹果的第一方的这些应用

1978
01:03:35,000 --> 01:03:36,000
它当时要求一个东西

1979
01:03:36,000 --> 01:03:38,000
就是那些应用必须得支持

1980
01:03:38,000 --> 01:03:41,000
叫做 Timer 合并

1981
01:03:41,000 --> 01:03:44,000
因为我们知道它那些 Timer 是

1982
01:03:44,000 --> 01:03:45,000
各自 App

1983
01:03:45,000 --> 01:03:47,000
各自的 Timer 的节奏

1984
01:03:47,000 --> 01:03:48,000
它可能不一定在一起

1985
01:03:48,000 --> 01:03:50,000
它当时为了支持 PowerNAP

1986
01:03:50,000 --> 01:03:51,000
那些应用

1987
01:03:51,000 --> 01:03:54,000
如果你想要在 PowerNAP 期间

1988
01:03:54,000 --> 01:03:55,000
就是在预护合改期间

1989
01:03:55,000 --> 01:03:57,000
还能做一些后台更新的话

1990
01:03:57,000 --> 01:03:58,000
你必须满足一些前提条件

1991
01:03:58,000 --> 01:03:59,000
其中还有一个

1992
01:03:59,000 --> 01:04:01,000
就是说你必须能够支持

1993
01:04:01,000 --> 01:04:02,000
把你的 Timer 能够合并

1994
01:04:02,000 --> 01:04:03,000
比如说你本来是定时

1995
01:04:03,000 --> 01:04:05,000
定的是比如说三分五十秒后

1996
01:04:05,000 --> 01:04:07,000
唤醒一个事件

1997
01:04:07,000 --> 01:04:08,000
你要去运行

1998
01:04:08,000 --> 01:04:11,000
但是因为如果你要在 PARNAP

1999
01:04:11,000 --> 01:04:14,000
就是说你必须牺牲掉准确性

2000
01:04:14,000 --> 01:04:15,000
它系统有可能说

2001
01:04:15,000 --> 01:04:17,000
我在三分二二十秒的时候

2002
01:04:17,000 --> 01:04:17,000
就把你唤醒

2003
01:04:17,000 --> 01:04:20,000
或者是在四分十秒的时候

2004
01:04:20,000 --> 01:04:20,000
才把你唤醒

2005
01:04:20,000 --> 01:04:23,000
因为我要考虑把尽可能多的

2006
01:04:23,000 --> 01:04:26,000
Timer 时间合并到一个 NAP 的周期

2007
01:04:26,000 --> 01:04:27,000
我就只用唤醒一次

2008
01:04:27,000 --> 01:04:28,000
因为每次唤醒

2009
01:04:28,000 --> 01:04:29,000
你都要比较大的能耗

2010
01:04:31,000 --> 01:04:35,000
所以在 M 1 的系列上不存在这个问题

2011
01:04:35,000 --> 01:04:37,000
因为它没有 PowerNAP 的功能

2012
01:04:37,000 --> 01:04:38,000
因为它的后台

2013
01:04:38,000 --> 01:04:39,000
它不是有什么四个小的

2014
01:04:41,000 --> 01:04:42,000
小核心

2015
01:04:42,000 --> 01:04:43,000
Efficiency Core

2016
01:04:43,000 --> 01:04:43,000
对

2017
01:04:43,000 --> 01:04:44,000
高效率的核对吧

2018
01:04:44,000 --> 01:04:46,000
所以它会一直在透台运行

2019
01:04:46,000 --> 01:04:48,000
所以不需要 NAP

2020
01:04:48,000 --> 01:04:49,000
就跟你的手机

2021
01:04:49,000 --> 01:04:51,000
跟你的 iPhone 给你 iPad 一样

2022
01:04:51,000 --> 01:04:52,000
它其实是一直在后面

2023
01:04:52,000 --> 01:04:53,000
有待机状态在运行的

2024
01:04:53,000 --> 01:04:55,000
那就不存在说

2025
01:04:55,000 --> 01:04:56,000
我需要合并 Timer 这个问题

2026
01:04:56,000 --> 01:04:59,000
你只要你不过分的去使用

2027
01:04:59,000 --> 01:05:02,000
它还是会让你去完成

2028
01:05:02,000 --> 01:05:03,000
这些 Timer 的功能的

2029
01:05:03,000 --> 01:05:04,000
已经不会导致你说

2030
01:05:04,000 --> 01:05:05,000
开盖以后导致

2031
01:05:05,000 --> 01:05:07,000
可能上一个 NAP 周期

2032
01:05:07,000 --> 01:05:09,000
累积的那些 Timer 事件一下都冒出来

2033
01:05:09,000 --> 01:05:10,000
我又马上要处理了

2034
01:05:10,000 --> 01:05:11,000
对吧

2035
01:05:11,000 --> 01:05:12,000
对

2036
01:05:12,000 --> 01:05:13,000
而且 PirateNAP 选项的话

2037
01:05:13,000 --> 01:05:15,000
我记得默认设置情况下

2038
01:05:15,000 --> 01:05:18,000
在电池的情况下是关掉的

2039
01:05:18,000 --> 01:05:20,000
就是你得自己去电源设置里面

2040
01:05:20,000 --> 01:05:23,000
去允许它在电池的情况下执行 PirateNAP

2041
01:05:23,000 --> 01:05:23,000
对

2042
01:05:23,000 --> 01:05:25,000
就是如果你是一个电池

2043
01:05:25,000 --> 01:05:26,000
比如说你是一个笔记本

2044
01:05:26,000 --> 01:05:27,000
你是带电池的

2045
01:05:27,000 --> 01:05:30,000
它在那个简单选项下面会有两个 Type

2046
01:05:30,000 --> 01:05:31,000
一个是电池模式

2047
01:05:31,000 --> 01:05:34,000
一个是插电源线的模式

2048
01:05:34,000 --> 01:05:36,000
插电线的模式里面 PirateNAP

2049
01:05:36,000 --> 01:05:37,000
默认是开的

2050
01:05:37,000 --> 01:05:38,000
然后插电池模式

2051
01:05:38,000 --> 01:05:39,000
它默认是关的

2052
01:05:39,000 --> 01:05:40,000
你得说你说的哪开才能完成

2053
01:05:40,000 --> 01:05:41,000
因为它还是要费电

2054
01:05:41,000 --> 01:05:42,000
对吧

2055
01:05:42,000 --> 01:05:44,000
但是它现在如果是 M 1 的话

2056
01:05:44,000 --> 01:05:45,000
就完全不给这个选项了

2057
01:05:45,000 --> 01:05:47,000
我就有那么自信

2058
01:05:47,000 --> 01:05:48,000
即便是这样

2059
01:05:48,000 --> 01:05:49,000
还是不会费电

2060
01:05:49,000 --> 01:05:49,000
对不对

2061
01:05:49,000 --> 01:05:50,000
没错

2062
01:05:50,000 --> 01:05:51,000
对

2063
01:05:51,000 --> 01:05:53,000
所以现在如果有 intel 的 MacBook 的用户

2064
01:05:53,000 --> 01:05:54,000
可以尝试一下

2065
01:05:54,000 --> 01:05:55,000
把那个选项勾上之后

2066
01:05:55,000 --> 01:05:56,000
能不能缓解

2067
01:05:56,000 --> 01:05:59,000
就是缓醒了之后会卡顿的问题

2068
01:05:59,000 --> 01:06:02,000
就至少它通过牺牲一些电量的方式

2069
01:06:02,000 --> 01:06:04,000
来减缓

2070
01:06:04,000 --> 01:06:07,000
最后同意打开换型

2071
01:06:07,000 --> 01:06:09,000
然后全部 Timer 事件都跑出来

2072
01:06:09,000 --> 01:06:10,000
要爱歌处理的问题

2073
01:06:10,000 --> 01:06:11,000
对吧

2074
01:06:11,000 --> 01:06:12,000
对

2075
01:06:12,000 --> 01:06:13,000
但有另外一个问题

2076
01:06:13,000 --> 01:06:14,000
就是我曾经遇到过

2077
01:06:14,000 --> 01:06:17,000
原来的 MacBook 就是我明明是休眠

2078
01:06:17,000 --> 01:06:18,000
就盖上盖

2079
01:06:18,000 --> 01:06:20,000
然后就带着出去旅行或者怎么样了

2080
01:06:20,000 --> 01:06:21,000
然后当模式第一打开

2081
01:06:21,000 --> 01:06:23,000
整个电池就 0%

2082
01:06:23,000 --> 01:06:24,000
完全耗尽的这种情况的

2083
01:06:24,000 --> 01:06:25,000
对

2084
01:06:25,000 --> 01:06:25,000
没电了

2085
01:06:25,000 --> 01:06:27,000
我有遇到过这种情况的

2086
01:06:27,000 --> 01:06:30,000
这个好像他们说过一个原因

2087
01:06:30,000 --> 01:06:31,000
就是我不知道是不是这个情况

2088
01:06:31,000 --> 01:06:33,000
就是因为你在背包里面的

2089
01:06:35,000 --> 01:06:36,000
核盖的话

2090
01:06:36,000 --> 01:06:37,000
它是数值的

2091
01:06:37,000 --> 01:06:39,000
如果说你没有夹紧的话

2092
01:06:39,000 --> 01:06:41,000
比如说你树把比较空

2093
01:06:41,000 --> 01:06:42,000
然后你抖一抖

2094
01:06:42,000 --> 01:06:44,000
它是有可能在那个过程就把盖打开了

2095
01:06:44,000 --> 01:06:45,000
就不断打开

2096
01:06:45,000 --> 01:06:47,000
不断关上盖子变成打开的状态

2097
01:06:47,000 --> 01:06:48,000
对

2098
01:06:48,000 --> 01:06:49,000
就它就变成又在运行

2099
01:06:49,000 --> 01:06:50,000
我这里不太可能

2100
01:06:50,000 --> 01:06:51,000
因为我背的是一个

2101
01:06:51,000 --> 01:06:54,000
就是那种带专门夹层的包

2102
01:06:54,000 --> 01:06:56,000
它会把整个 MacBook

2103
01:06:56,000 --> 01:06:58,000
就整非常紧的包裹起来

2104
01:06:58,000 --> 01:06:59,000
但我还是遇到这种问题

2105
01:06:59,000 --> 01:07:03,000
就是下班的时候把电脑放进去

2106
01:07:03,000 --> 01:07:03,000
然后去健身

2107
01:07:03,000 --> 01:07:06,000
然后回到家里面再打开

2108
01:07:06,000 --> 01:07:07,000
电脑已经没电了

2109
01:07:07,000 --> 01:07:07,000
对

2110
01:07:07,000 --> 01:07:09,000
可能是后台有什么程序

2111
01:07:09,000 --> 01:07:09,000
阻止了

2112
01:07:09,000 --> 01:07:12,000
强行阻止了胸囊这样的一个事情

2113
01:07:12,000 --> 01:07:13,000
然后它实际是运行的

2114
01:07:13,000 --> 01:07:14,000
有可能

2115
01:07:14,000 --> 01:07:14,000
对

2116
01:07:14,000 --> 01:07:15,000
或者是出现了一个 bug

2117
01:07:15,000 --> 01:07:17,000
根本就没有进到胸面状态

2118
01:07:17,000 --> 01:07:19,000
然后一直都是在尝试进入胸垫

2119
01:07:19,000 --> 01:07:22,000
然后不断的去耗能的一个状态

2120
01:07:22,000 --> 01:07:23,000
也有可能

2121
01:07:23,000 --> 01:07:23,000
对吧

2122
01:07:23,000 --> 01:07:26,000
但是我们目前都知道

2123
01:07:26,000 --> 01:07:28,000
这个锅可以甩给 inter 了

2124
01:07:28,000 --> 01:07:29,000
是的

2125
01:07:29,000 --> 01:07:30,000
这个也一时说了

2126
01:07:30,000 --> 01:07:31,000
因为 me 没有这个问题

2127
01:07:31,000 --> 01:07:32,000
对

2128
01:07:32,000 --> 01:07:33,000
没这个问题了

2129
01:07:33,000 --> 01:07:34,000
我什么时候都来跑

2130
01:07:34,000 --> 01:07:36,000
我只是变得跑得慢了一点而已

2131
01:07:37,000 --> 01:07:37,000
对

2132
01:07:37,000 --> 01:07:39,000
但你刚刚说到 r Tunmer 的问题

2133
01:07:39,000 --> 01:07:41,000
如果我在想假设苹果

2134
01:07:41,000 --> 01:07:43,000
假设如果确实问题是如你所说

2135
01:07:43,000 --> 01:07:46,000
那么导致来开机的时候

2136
01:07:46,000 --> 01:07:47,000
会比较

2137
01:07:47,000 --> 01:07:48,000
intel 的 Map distr 알�

2138
01:07:48,000 --> 01:07:49,000
会开机会比较

2139
01:07:49,000 --> 01:07:51,000
揭开盖会比较慢的话

2140
01:07:51,000 --> 01:07:53,000
它其实可以等一下

2141
01:07:53,000 --> 01:07:55,000
在启动三分

2142
01:07:56,000 --> 01:07:58,000
버玩

2143
01:07:58,000 --> 01:07:59,000
来说会比较难

2144
01:07:59,000 --> 01:08:00,000
因为那已经是

2145
01:08:01,000 --> 01:08:03,000
自己的带马的一部分的逻辑了

2146
01:08:03,000 --> 01:08:04,000
你这个时候

2147
01:08:04,000 --> 01:08:08,000
你要是強行的把那部分程序全部給 Sleep 做

2148
01:08:08,000 --> 01:08:10,000
然後就只把 Colonel 換型

2149
01:08:10,000 --> 01:08:13,000
只把 UI 的進程課這種事情換型的話

2150
01:08:13,000 --> 01:08:16,000
好像想起來想想還是一個很複雜的事情

2151
01:08:16,000 --> 01:08:18,000
就會導致比如說你打開之後

2152
01:08:18,000 --> 01:08:19,000
那個程序沒有響應的

2153
01:08:19,000 --> 01:08:22,000
雖然說它不影響你其他系統的性能

2154
01:08:22,000 --> 01:08:24,000
但是那個程序本身沒響應

2155
01:08:24,000 --> 01:08:26,000
會導致你說你這個東西是不是掛掉了

2156
01:08:26,000 --> 01:08:26,000
對

2157
01:08:26,000 --> 01:08:28,000
而且系統很有可能

2158
01:08:28,000 --> 01:08:30,000
系統的某些東西要非得依靠某個程序的

2159
01:08:30,000 --> 01:08:31,000
某個結果怎麼樣的東西

2160
01:08:31,000 --> 01:08:32,000
你把它 Sleep 做完

2161
01:08:32,000 --> 01:08:33,000
系統也卡住了

2162
01:08:33,000 --> 01:08:35,000
然後打一個互相鎖死

2163
01:08:35,000 --> 01:08:36,000
對

2164
01:08:36,000 --> 01:08:39,000
我們把這個 Sorge 給 Sleep 住

2165
01:08:39,000 --> 01:08:40,000
然後打開

2166
01:08:40,000 --> 01:08:40,000
沒網了

2167
01:08:42,000 --> 01:08:43,000
就完蛋了

2168
01:08:44,000 --> 01:08:45,000
對

2169
01:08:45,000 --> 01:08:47,000
然後那邊要檢查 OSP 的信息

2170
01:08:47,000 --> 01:08:49,000
然後就互相就死云完了

2171
01:08:49,000 --> 01:08:50,000
卡住了

2172
01:08:50,000 --> 01:08:51,000
所以看起來也不太可行

2173
01:08:51,000 --> 01:08:54,000
就是這個機核大的問題很難解決

2174
01:08:54,000 --> 01:08:54,000
對

2175
01:08:54,000 --> 01:08:55,000
說到這個開機

2176
01:08:55,000 --> 01:09:00,000
你用那個手錶解鎖了 M 1 的 MacBook Pro 嗎

2177
01:09:00,000 --> 01:09:00,000
我沒有

2178
01:09:00,000 --> 01:09:02,000
因為我的手錶的話

2179
01:09:02,000 --> 01:09:03,000
只是健身的手袋

2180
01:09:03,000 --> 01:09:04,000
所以一日常的話

2181
01:09:04,000 --> 01:09:05,000
我都沒有帶手錶

2182
01:09:05,000 --> 01:09:06,000
平時你不帶著

2183
01:09:06,000 --> 01:09:06,000
對

2184
01:09:06,000 --> 01:09:08,000
SM 1 的話有指紋

2185
01:09:08,000 --> 01:09:09,000
所以說我也不

2186
01:09:09,000 --> 01:09:10,000
看亞城和我一樣

2187
01:09:10,000 --> 01:09:12,000
我基本上很少帶 Apple

2188
01:09:12,000 --> 01:09:13,000
現在不去健身了

2189
01:09:13,000 --> 01:09:15,000
連這個機殼都沒有了

2190
01:09:15,000 --> 01:09:16,000
就放在吃灰

2191
01:09:16,000 --> 01:09:16,000
OK

2192
01:09:16,000 --> 01:09:18,000
因為我平時還是帶的

2193
01:09:18,000 --> 01:09:19,000
但是因為帶一段時間就會

2194
01:09:19,000 --> 01:09:21,000
它背後那個圈會壓在手上

2195
01:09:21,000 --> 01:09:22,000
壓上一個印子

2196
01:09:22,000 --> 01:09:24,000
那個那部分皮膚會非常的

2197
01:09:24,000 --> 01:09:26,000
這個就是難受

2198
01:09:26,000 --> 01:09:26,000
就是癢

2199
01:09:26,000 --> 01:09:28,000
然後我就又摘掉了

2200
01:09:28,000 --> 01:09:29,000
就是也是出門

2201
01:09:29,000 --> 01:09:31,000
就是我需要走步的時候

2202
01:09:31,000 --> 01:09:32,000
才戴上它

2203
01:09:32,000 --> 01:09:34,000
就這個問題還是比較難解釋

2204
01:09:34,000 --> 01:09:36,000
那其實也是去健身房

2205
01:09:36,000 --> 01:09:37,000
對

2206
01:09:37,000 --> 01:09:38,000
之前又有問題就是說

2207
01:09:38,000 --> 01:09:39,000
我老是經常

2208
01:09:39,000 --> 01:09:41,000
經常性的解鎖不了 Apple Watch

2209
01:09:41,000 --> 01:09:43,000
就是你看到它在嘗試解鎖

2210
01:09:43,000 --> 01:09:44,000
對吧

2211
01:09:44,000 --> 01:09:45,000
那我說 Mac mini

2212
01:09:45,000 --> 01:09:47,000
然後它過了幾秒

2213
01:09:47,000 --> 01:09:49,000
我說這幾秒時間

2214
01:09:49,000 --> 01:09:51,000
我已經足夠我輸入密碼

2215
01:09:51,000 --> 01:09:52,000
完成登錄的過程了

2216
01:09:52,000 --> 01:09:52,000
對吧

2217
01:09:52,000 --> 01:09:53,000
但是它還沒有解鎖

2218
01:09:53,000 --> 01:09:54,000
對

2219
01:09:54,000 --> 01:09:55,000
它告訴我失敗了

2220
01:09:55,000 --> 01:09:56,000
我還是得輸入便密碼

2221
01:09:56,000 --> 01:09:58,000
就這個可高興非常低

2222
01:09:58,000 --> 01:09:59,000
對

2223
01:09:59,000 --> 01:10:00,000
這個對於蘋果來說

2224
01:10:00,000 --> 01:10:01,000
簡直太常見的一件事情了

2225
01:10:01,000 --> 01:10:01,000
是吧

2226
01:10:01,000 --> 01:10:04,000
各自的這種只要涉及到兩個設備

2227
01:10:04,000 --> 01:10:05,000
不在一個一起的這種

2228
01:10:05,000 --> 01:10:09,000
感覺這個 bug 的發生率有 50%的那麼高

2229
01:10:09,000 --> 01:10:11,000
我是 10 次有 7 次可能都解不開

2230
01:10:11,000 --> 01:10:13,000
碰運氣能解鎖開

2231
01:10:13,000 --> 01:10:15,000
可能兩三次這種

2232
01:10:15,000 --> 01:10:17,000
你那是第幾代的那個 Watch

2233
01:10:17,000 --> 01:10:18,000
就是五代

2234
01:10:18,000 --> 01:10:19,000
不是最新這個

2235
01:10:19,000 --> 01:10:21,000
但是也是比較新的嘛

2236
01:10:21,000 --> 01:10:21,000
對

2237
01:10:21,000 --> 01:10:23,000
那應該是沒問題的

2238
01:10:23,000 --> 01:10:25,000
因為原來一二代的時候

2239
01:10:25,000 --> 01:10:26,000
確實是好像實驗方式

2240
01:10:26,000 --> 01:10:27,000
整個都是不一樣的

2241
01:10:27,000 --> 01:10:29,000
那個成功力就是非常低的

2242
01:10:29,000 --> 01:10:30,000
蘋果就是一代的

2243
01:10:30,000 --> 01:10:32,000
可能就是太老了

2244
01:10:32,000 --> 01:10:33,000
無它就是太老了

2245
01:10:33,000 --> 01:10:33,000
對

2246
01:10:33,000 --> 01:10:35,000
我當時是開發 iopass 的時候

2247
01:10:35,000 --> 01:10:37,000
我就專門試配了 Watch

2248
01:10:37,000 --> 01:10:38,000
然後讓了 Watch 可以解鎖

2249
01:10:38,000 --> 01:10:41,000
然後就發現我原來的最早的那一代

2250
01:10:41,000 --> 01:10:42,000
應該是零代了 s 0

2251
01:10:42,000 --> 01:10:43,000
就不行了

2252
01:10:43,000 --> 01:10:44,000
對那個真的不行

2253
01:10:44,000 --> 01:10:48,000
那個成功率就低到可能 5%不到的那麼一個

2254
01:10:48,000 --> 01:10:49,000
這麼低的一個成功率

2255
01:10:49,000 --> 01:10:50,000
直接放棄了

2256
01:10:50,000 --> 01:10:52,000
那代機器真的非常非常慢

2257
01:10:52,000 --> 01:10:54,000
就是那個低頻是很好機嘛

2258
01:10:54,000 --> 01:10:57,000
然後那個處理器也不行

2259
01:10:57,000 --> 01:10:57,000
續航也不行

2260
01:10:58,000 --> 01:11:00,000
然後挺坑的

2261
01:11:00,000 --> 01:11:00,000
是的

2262
01:11:00,000 --> 01:11:01,000
然後換到五代了之後

2263
01:11:01,000 --> 01:11:04,000
就發現成功率在測試的時候

2264
01:11:04,000 --> 01:11:06,000
是達到了 99%左右

2265
01:11:06,000 --> 01:11:07,000
但是在日常的使用中

2266
01:11:07,000 --> 01:11:09,000
確實很多時候也會出現

2267
01:11:09,000 --> 01:11:11,000
就不知道怎麼它就不工作了

2268
01:11:11,000 --> 01:11:15,000
可能依賴於藍牙的那個 2.4 G 環境

2269
01:11:15,000 --> 01:11:16,000
可能還是有些長久

2270
01:11:16,000 --> 01:11:17,000
因為現在 2.4 G 環境

2271
01:11:17,000 --> 01:11:19,000
確實這特別是在城市裡面

2272
01:11:19,000 --> 01:11:20,000
是比較糟糕的

2273
01:11:20,000 --> 01:11:20,000
嗯

2274
01:11:20,000 --> 01:11:22,000
然後說不管你再怎麼努力

2275
01:11:22,000 --> 01:11:23,000
你解決不了這個

2276
01:11:23,000 --> 01:11:25,000
無線這個攝頻的問題的話

2277
01:11:25,000 --> 01:11:27,000
它可能還是沒有辦法實現

2278
01:11:27,000 --> 01:11:29,000
是穩定可靠的解鎖

2279
01:11:29,000 --> 01:11:29,000
對

2280
01:11:29,000 --> 01:11:31,000
但這個鍋好像也有一個

2281
01:11:31,000 --> 01:11:33,000
可以甩個 inter 的可能

2282
01:11:33,000 --> 01:11:35,000
就是我之前做過一些

2283
01:11:35,000 --> 01:11:37,000
藍牙的一些開發

2284
01:11:37,000 --> 01:11:38,000
然後你會發現

2285
01:11:38,000 --> 01:11:39,000
就是其實整個 Buckle OS

2286
01:11:39,000 --> 01:11:42,000
和 LS 的那個藍牙協議站

2287
01:11:42,000 --> 01:11:43,000
還是經常會出現問題

2288
01:11:43,000 --> 01:11:45,000
整個協議站崩掉的

2289
01:11:45,000 --> 01:11:47,000
所以是不是也是 MAC 上面的

2290
01:11:47,000 --> 01:11:49,000
和原來在老家購上面

2291
01:11:49,000 --> 01:11:50,000
和藍牙的通訊

2292
01:11:50,000 --> 01:11:51,000
不成那麼順暢

2293
01:11:51,000 --> 01:11:53,000
然後它出問題了

2294
01:11:53,000 --> 01:11:55,000
然後在 M 1 的芯片上面

2295
01:11:55,000 --> 01:11:56,000
也把這個問題修好了

2296
01:11:56,000 --> 01:11:58,000
也是有可能的一種理論

2297
01:11:58,000 --> 01:11:59,000
也有可能

2298
01:11:59,000 --> 01:12:00,000
就是之前它是用

2299
01:12:00,000 --> 01:12:02,000
它的之前藍牙和 Wi-Fi

2300
01:12:02,000 --> 01:12:03,000
應該都是普通的方案

2301
01:12:03,000 --> 01:12:04,000
就是在 MAC 上面

2302
01:12:04,000 --> 01:12:04,000
對 是的

2303
01:12:04,000 --> 01:12:06,000
那這次它改用自己的方案

2304
01:12:06,000 --> 01:12:08,000
說不定也有可能

2305
01:12:08,000 --> 01:12:10,000
你可以關注一下

2306
01:12:10,000 --> 01:12:11,000
就是你之後試著接

2307
01:12:11,000 --> 01:12:12,000
做幾次看一下

2308
01:12:12,000 --> 01:12:13,000
是

2309
01:12:13,000 --> 01:12:14,000
好 沒問題

2310
01:12:14,000 --> 01:12:16,000
但我覺得最重要的這個問題

2311
01:12:16,000 --> 01:12:17,000
可能還是得靠

2312
01:12:17,000 --> 01:12:17,000
不管是從安全性

2313
01:12:17,000 --> 01:12:19,000
還是可靠性上

2314
01:12:19,000 --> 01:12:20,000
還是得看

2315
01:12:20,000 --> 01:12:23,000
就是是從 iPhone 11

2316
01:12:23,000 --> 01:12:24,000
一把開始搭載了

2317
01:12:24,000 --> 01:12:28,000
U 1 的 Ultra Wideband 的東西

2318
01:12:28,000 --> 01:12:29,000
看能不能解決

2319
01:12:29,000 --> 01:12:30,000
因為一個是可以解決

2320
01:12:30,000 --> 01:12:32,000
這個通訊可靠性

2321
01:12:32,000 --> 01:12:32,000
因為它是超寬態

2322
01:12:32,000 --> 01:12:33,000
它是可以同時

2323
01:12:33,000 --> 01:12:35,000
在多個頻段上發幾個消息

2324
01:12:35,000 --> 01:12:38,000
就不用在等藍牙的一個跳頻

2325
01:12:38,000 --> 01:12:39,000
2.4 G 那種

2326
01:12:39,000 --> 01:12:41,000
而且它有那個距離

2327
01:12:41,000 --> 01:12:42,000
就是說它可以更加安全

2328
01:12:42,000 --> 01:12:43,000
可靠的判斷

2329
01:12:43,000 --> 01:12:44,000
是不是你這個表

2330
01:12:44,000 --> 01:12:46,000
剛好在 MAC 旁邊

2331
01:12:46,000 --> 01:12:47,000
然後我就可以有更大的

2332
01:12:47,000 --> 01:12:50,000
這個信任空間說

2333
01:12:50,000 --> 01:12:53,000
那肯定是你本人在解鎖這個東西

2334
01:12:53,000 --> 01:12:54,000
而不是說通過這種

2335
01:12:54,000 --> 01:12:54,000
叫做什麼

2336
01:12:54,000 --> 01:12:57,000
Rail-Ai 攻擊的方式來做的嗎

2337
01:12:57,000 --> 01:12:58,000
對 沒錯

2338
01:12:58,000 --> 01:13:00,000
但是這個好像還是一個遙遠的現實

2339
01:13:00,000 --> 01:13:03,000
這個只在 iPhone 上目前裝載了

2340
01:13:03,000 --> 01:13:05,000
我去和 MAC 上都還沒有

2341
01:13:05,000 --> 01:13:06,000
我去上面看

2342
01:13:06,000 --> 01:13:07,000
主要是空間的限制

2343
01:13:07,000 --> 01:13:09,000
怎麼能夠實現說

2344
01:13:09,000 --> 01:13:10,000
把那個再威縮一下

2345
01:13:10,000 --> 01:13:11,000
或者直接整

2346
01:13:11,000 --> 01:13:13,000
表上它還不是 soc

2347
01:13:13,000 --> 01:13:16,000
它是叫做 SOP System Unpackaged

2348
01:13:16,000 --> 01:13:21,000
就是它整個系統都封裝在一個 package 那邊去了

2349
01:13:21,000 --> 01:13:24,000
然後它整合度是比 M 1 還要高的

2350
01:13:24,000 --> 01:13:25,000
所以說到時候

2351
01:13:25,000 --> 01:13:26,000
如果它把 U 1 整合進去

2352
01:13:26,000 --> 01:13:28,000
我覺得應該也是有可能性的

2353
01:13:28,000 --> 01:13:31,000
但只是說功耗這些天線怎麼弄

2354
01:13:31,000 --> 01:13:31,000
我不太清楚

2355
01:13:31,000 --> 01:13:34,000
但是我希望是能夠實現的

2356
01:13:34,000 --> 01:13:36,000
然後 U 1 應該上 MAC 上

2357
01:13:36,000 --> 01:13:37,000
好像都還沒有

2358
01:13:37,000 --> 01:13:37,000
對吧

2359
01:13:37,000 --> 01:13:39,000
哪怕是 M 1 的 MAC 上面是沒有的

2360
01:13:39,000 --> 01:13:40,000
對 都沒有

2361
01:13:40,000 --> 01:13:42,000
說不定 M 2 可能就有了

2362
01:13:42,000 --> 01:13:43,000
應該是

2363
01:13:43,000 --> 01:13:45,000
按時間的話應該是到了一個 M 開玩笑

2364
01:13:45,000 --> 01:13:47,000
我居該進行大升級的這麼一個實驗

2365
01:13:47,000 --> 01:13:48,000
對

2366
01:13:48,000 --> 01:13:50,000
而且它要整合在芯片裡面

2367
01:13:50,000 --> 01:13:51,000
它也比較好做

2368
01:13:51,000 --> 01:13:52,000
都是在自己的

2369
01:13:52,000 --> 01:13:54,000
就不光是安全性上

2370
01:13:54,000 --> 01:13:56,000
還是做空間上面

2371
01:13:56,000 --> 01:13:57,000
都比較好弄

2372
01:13:57,000 --> 01:13:58,000
對吧

2373
01:13:58,000 --> 01:13:58,000
我覺得

2374
01:13:58,000 --> 01:13:59,000
而且這個場景很合適

2375
01:13:59,000 --> 01:14:00,000
對吧

2376
01:14:00,000 --> 01:14:04,000
用表或者手機靠近一個 MAC 就解鎖了

2377
01:14:04,000 --> 01:14:05,000
那其實還是很方便的

2378
01:14:05,000 --> 01:14:07,000
不用做什麼操作

2379
01:14:07,000 --> 01:14:07,000
對

2380
01:14:07,000 --> 01:14:08,000
我今天採訪你學習了

2381
01:14:08,000 --> 01:14:11,000
原來 U 1 是可以拿傳輸數據的

2382
01:14:11,000 --> 01:14:12,000
我原來的理解的話

2383
01:14:12,000 --> 01:14:14,000
以為它只能去標定一個方向

2384
01:14:14,000 --> 01:14:16,000
另外它的物理特性導致的

2385
01:14:16,000 --> 01:14:17,000
傳輸數據它只要能夠傳輸信號

2386
01:14:17,000 --> 01:14:18,000
都是可以傳輸數據的

2387
01:14:18,000 --> 01:14:20,000
而且我理解它那個帶款還比較高

2388
01:14:20,000 --> 01:14:22,000
因為它可用的那個

2389
01:14:22,000 --> 01:14:23,000
就那個無線的頻段會比較寬

2390
01:14:23,000 --> 01:14:24,000
所以我覺得

2391
01:14:24,000 --> 01:14:27,000
U 1 如果內置到 Apple 是 iPad

2392
01:14:27,000 --> 01:14:30,000
甚至是這個 MAC 裡面

2393
01:14:30,000 --> 01:14:32,000
它甚至你知道我現在用那個叫什麼

2394
01:14:32,000 --> 01:14:33,000
Sidecar 對吧

2395
01:14:33,000 --> 01:14:34,000
就是從過

2396
01:14:34,000 --> 01:14:35,000
是從 WiFi 來實現的嗎

2397
01:14:35,000 --> 01:14:37,000
它是通過 5 G 的一個 WiFi 來實現的

2398
01:14:37,000 --> 01:14:37,000
對

2399
01:14:37,000 --> 01:14:39,000
應該是 WiFi

2400
01:14:39,000 --> 01:14:39,000
對

2401
01:14:39,000 --> 01:14:40,000
如果它用 U 1 的話

2402
01:14:40,000 --> 01:14:42,000
還可以把那個 WiFi 的帶款解放出來

2403
01:14:42,000 --> 01:14:44,000
其實還是更好那個方案的

2404
01:14:44,000 --> 01:14:44,000
對

2405
01:14:44,000 --> 01:14:44,000
是的

2406
01:14:44,000 --> 01:14:46,000
是一個我們希望的未來

2407
01:14:47,000 --> 01:14:48,000
對

2408
01:14:48,000 --> 01:14:49,000
Anyway 這個就是

2409
01:14:49,000 --> 01:14:51,000
就是未來的這個蘋果的

2410
01:14:51,000 --> 01:14:52,000
這個 MAC 幾代設的

2411
01:14:52,000 --> 01:14:53,000
還是非常值得期待的

2412
01:14:53,000 --> 01:14:55,000
那大家可以去買一點這個蘋果目標

2413
01:14:55,000 --> 01:14:57,000
反正我是買了

2414
01:14:57,000 --> 01:14:59,000
你也買了好像

2415
01:14:59,000 --> 01:15:00,000
我先賣微信

2416
01:15:00,000 --> 01:15:01,000
先賣微信

2417
01:15:02,000 --> 01:15:03,000
對

2418
01:15:03,000 --> 01:15:03,000
OK

2419
01:15:03,000 --> 01:15:04,000
今天我們前半部分

2420
01:15:04,000 --> 01:15:05,000
叫我們叫什麼

2421
01:15:05,000 --> 01:15:06,000
御義先揚

2422
01:15:06,000 --> 01:15:06,000
對吧

2423
01:15:06,000 --> 01:15:09,000
先表揚了一頓這個蘋果的這個

2424
01:15:10,000 --> 01:15:11,000
這個意見

2425
01:15:11,000 --> 01:15:12,000
現在我們開始吐槽模式

2426
01:15:12,000 --> 01:15:13,000
很高的後面

2427
01:15:13,000 --> 01:15:15,000
就是在聊的第二個話題

2428
01:15:15,000 --> 01:15:16,000
其實是跟

2429
01:15:16,000 --> 01:15:17,000
其實是相當來說

2430
01:15:17,000 --> 01:15:18,000
一個比較糟糕的一個

2431
01:15:18,000 --> 01:15:20,000
或者是比更加難解決的一個事情

2432
01:15:22,000 --> 01:15:23,000
這對叫什麼

2433
01:15:23,000 --> 01:15:24,000
我不知道這個中文名叫什麼

2434
01:15:24,000 --> 01:15:25,000
我就是這個

2435
01:15:26,000 --> 01:15:28,000
這個縮寫叫做 OCSP

2436
01:15:28,000 --> 01:15:29,000
它的全名叫做

2437
01:15:30,000 --> 01:15:32,000
Online Certificate Status Protocol

2438
01:15:32,000 --> 01:15:33,000
叫什麼

2439
01:15:33,000 --> 01:15:35,000
在線證書狀態協議

2440
01:15:35,000 --> 01:15:36,000
很大概這麼翻譯一下吧

2441
01:15:37,000 --> 01:15:39,000
要不要請你給我們先解釋一下

2442
01:15:39,000 --> 01:15:40,000
因為這個是一個開發者

2443
01:15:40,000 --> 01:15:41,000
專門用的東西

2444
01:15:41,000 --> 01:15:43,000
你給我解釋這個東西是幹嘛用的

2445
01:15:43,000 --> 01:15:44,000
為什麼它會

2446
01:15:44,000 --> 01:15:46,000
這次變成一個很大的問題

2447
01:15:46,000 --> 01:15:46,000
行

2448
01:15:46,000 --> 01:15:49,000
然後其實 OCSP 這個東西的話

2449
01:15:49,000 --> 01:15:51,000
本身的話和應用的話

2450
01:15:51,000 --> 01:15:53,000
它只是正好被套用在這了

2451
01:15:53,000 --> 01:15:54,000
它本身不是為了

2452
01:15:54,000 --> 01:15:56,000
解決應用安全性的一個問題

2453
01:15:56,000 --> 01:15:58,000
它是解決問題是什麼呢

2454
01:15:58,000 --> 01:16:01,000
是在原來的傳統的證書體系下

2455
01:16:01,000 --> 01:16:02,000
證書可能更常見的場景

2456
01:16:02,000 --> 01:16:04,000
是 htps 網站

2457
01:16:04,000 --> 01:16:05,000
我們大門訪戰一個網站的時候

2458
01:16:05,000 --> 01:16:07,000
網站要通過各種的紮密手段

2459
01:16:07,000 --> 01:16:09,000
給我們出示一個合理

2460
01:16:09,000 --> 01:16:10,000
有效的證書

2461
01:16:10,000 --> 01:16:11,000
我們聊完期才知道

2462
01:16:11,000 --> 01:16:12,000
我們連接到了一個

2463
01:16:12,000 --> 01:16:13,000
這個網站是真實的

2464
01:16:13,000 --> 01:16:15,000
不是別人造假的

2465
01:16:15,000 --> 01:16:16,000
然後這麼一個情況

2466
01:16:16,000 --> 01:16:17,000
但是這個情況就會出現

2467
01:16:17,000 --> 01:16:19,000
我的運營商也好

2468
01:16:19,000 --> 01:16:20,000
或者其他 whatever

2469
01:16:20,000 --> 01:16:22,000
什麼樣的情況都行

2470
01:16:22,000 --> 01:16:24,000
導致我把證書票已經洩露出去了

2471
01:16:24,000 --> 01:16:26,000
我需要有一個措施能夠補救

2472
01:16:26,000 --> 01:16:28,000
然後能夠把我洩露出去

2473
01:16:28,000 --> 01:16:30,000
這個證書給它註銷掉

2474
01:16:30,000 --> 01:16:33,000
所以說就有各種各樣的方式

2475
01:16:33,000 --> 01:16:35,000
去進行叫做證書吊銷

2476
01:16:35,000 --> 01:16:37,000
就這個 OCSP 就是用來吊銷證書用的

2477
01:16:37,000 --> 01:16:38,000
對吧

2478
01:16:38,000 --> 01:16:38,000
對 是的

2479
01:16:38,000 --> 01:16:40,000
OCSP 就是來吊銷證書的一種方式

2480
01:16:40,000 --> 01:16:42,000
最早的時候應該是用來

2481
01:16:42,000 --> 01:16:44,000
叫 CRL 的一種方式去吊銷

2482
01:16:44,000 --> 01:16:46,000
CRL 就是定期的系統去

2483
01:16:46,000 --> 01:16:48,000
或者是聊完期去查一個地方

2484
01:16:48,000 --> 01:16:50,000
然後給你返回一個大個列表

2485
01:16:50,000 --> 01:16:52,000
哪個證書是被吊銷的

2486
01:16:52,000 --> 01:16:54,000
你記得不要再相信它了

2487
01:16:54,000 --> 01:16:57,000
但這個東西就是越堆越大

2488
01:16:57,000 --> 01:16:59,000
現在的大家這麼多網站那麼多東西

2489
01:16:59,000 --> 01:17:00,000
它只扔不撿嗎

2490
01:17:00,000 --> 01:17:01,000
因為

2491
01:17:01,000 --> 01:17:01,000
對 是的

2492
01:17:01,000 --> 01:17:03,000
然後就搞的這個事情就會

2493
01:17:03,000 --> 01:17:04,000
感覺看起來很不優雅

2494
01:17:04,000 --> 01:17:06,000
然後 OCSP 的話

2495
01:17:06,000 --> 01:17:07,000
其實也挺簡單的

2496
01:17:07,000 --> 01:17:08,000
就是每次訪問的時候

2497
01:17:08,000 --> 01:17:10,000
我再去找一個側丁的

2498
01:17:10,000 --> 01:17:12,000
我相信的服務去問一下

2499
01:17:12,000 --> 01:17:13,000
然後說

2500
01:17:13,000 --> 01:17:14,000
這個證書

2501
01:17:14,000 --> 01:17:15,000
還有沒有被吊銷掉

2502
01:17:15,000 --> 01:17:16,000
對 它也沒被吊銷掉

2503
01:17:16,000 --> 01:17:18,000
然後服務器就說 OK 沒問題

2504
01:17:18,000 --> 01:17:18,000
然後我就

2505
01:17:18,000 --> 01:17:20,000
我本地就放心就可以了

2506
01:17:20,000 --> 01:17:22,000
然後可能會再加上一些緩存機制

2507
01:17:22,000 --> 01:17:26,000
就是比如說只有幾天才會放完一些

2508
01:17:26,000 --> 01:17:27,000
這個可能有點

2509
01:17:27,000 --> 01:17:27,000
我們做個

2510
01:17:27,000 --> 01:17:29,000
這個剛剛那個很技術的一個描述

2511
01:17:29,000 --> 01:17:31,000
但我們做一個比較形象的一個比喻

2512
01:17:31,000 --> 01:17:32,000
就好像我們現在說

2513
01:17:32,000 --> 01:17:34,000
就是你去拿一個美國簽證

2514
01:17:34,000 --> 01:17:36,000
它雖然發給你的一個簽證

2515
01:17:36,000 --> 01:17:38,000
你拿到的那個所謂的 Visa 那張紙

2516
01:17:38,000 --> 01:17:39,000
貼在你的步道上了對吧

2517
01:17:40,000 --> 01:17:42,000
但是你實際上要去美國之前

2518
01:17:42,000 --> 01:17:46,000
還是得在一個美國官方指定的一個網站上去註冊一下

2519
01:17:46,000 --> 01:17:48,000
說我要來美國了

2520
01:17:48,000 --> 01:17:49,000
雖然你之前給我發過這個簽證

2521
01:17:49,000 --> 01:17:51,000
但是你現在我再確認一下

2522
01:17:51,000 --> 01:17:52,000
我能不能來這次對吧

2523
01:17:52,000 --> 01:17:55,000
差不多 OCSP 就是說確認這個過程

2524
01:17:55,000 --> 01:17:56,000
可以這樣解釋

2525
01:17:56,000 --> 01:17:58,000
我覺得 OCSP 更像那種

2526
01:17:58,000 --> 01:18:00,000
比如說你買了一瓶酒

2527
01:18:00,000 --> 01:18:02,000
然後酒上有一個什麼防尾標籤

2528
01:18:02,000 --> 01:18:04,000
然後說你打電話到某個地方

2529
01:18:04,000 --> 01:18:06,000
查這個標籤是不是真的

2530
01:18:06,000 --> 01:18:07,000
隨著這樣一個東西

2531
01:18:07,000 --> 01:18:09,000
對這個解釋好像非常的合適

2532
01:18:09,000 --> 01:18:11,000
幾乎是一模一樣的一個機制

2533
01:18:11,000 --> 01:18:14,000
因為就是 OCSP 它驗證的網址

2534
01:18:14,000 --> 01:18:15,000
實際上是在證書內部

2535
01:18:15,000 --> 01:18:16,000
就是它翻譯證書的時候

2536
01:18:16,000 --> 01:18:17,000
就告訴你

2537
01:18:17,000 --> 01:18:18,000
你要是想查證書的真偽

2538
01:18:18,000 --> 01:18:20,000
你要去哪那那查

2539
01:18:20,000 --> 01:18:21,000
對

2540
01:18:21,000 --> 01:18:26,000
所以它這次我們蘋果這次遇到的一個問題是說

2541
01:18:26,000 --> 01:18:32,000
因為新發的 Mac OS Big Sur 11 版本 11 的新系統

2542
01:18:32,000 --> 01:18:38,000
大規模的人去通過 OCSP 的方式去查應用證書

2543
01:18:38,000 --> 01:18:40,000
因為你從你換了新系統

2544
01:18:40,000 --> 01:18:41,000
然後你都要去

2545
01:18:41,000 --> 01:18:42,000
你開每一個程序的時候

2546
01:18:42,000 --> 01:18:44,000
都要先檢查一遍這個東西

2547
01:18:44,000 --> 01:18:47,000
導致蘋果的這個 OCSP 服務器

2548
01:18:47,000 --> 01:18:49,000
等於是它自己被自己逼到死了

2549
01:18:49,000 --> 01:18:50,000
拒絕服務攻擊了

2550
01:18:50,000 --> 01:18:52,000
導致它緩慢

2551
01:18:52,000 --> 01:18:55,000
然後導致所有的這個 Mac 程序都啟動不了

2552
01:18:55,000 --> 01:18:57,000
就因為都在等這個查詢的結果

2553
01:18:57,000 --> 01:19:00,000
就這裡面可能有個挑釁的地方就在於

2554
01:19:00,000 --> 01:19:02,000
為什麼每次啟動 Mac 程序之前

2555
01:19:02,000 --> 01:19:03,000
需要去檢查一下這個證書

2556
01:19:03,000 --> 01:19:06,000
就蘋果做這個東西的目的是什麼

2557
01:19:06,000 --> 01:19:08,000
這個的話最早的時候

2558
01:19:08,000 --> 01:19:10,000
其實就是從安全的機制

2559
01:19:10,000 --> 01:19:12,000
就是這個類似的機制的話

2560
01:19:12,000 --> 01:19:15,000
就是在可能公眾一般理解起來

2561
01:19:15,000 --> 01:19:17,000
更簡單的一個說法叫數字簽名

2562
01:19:17,000 --> 01:19:18,000
在 Windows 上也有

2563
01:19:18,000 --> 01:19:20,000
可能背後邏輯是這樣

2564
01:19:20,000 --> 01:19:22,000
就是因為有惡意軟件嘛

2565
01:19:22,000 --> 01:19:25,000
那麼我就要求你們每個人分發軟件的時候

2566
01:19:25,000 --> 01:19:27,000
必須都給這個軟件加上一個簽名

2567
01:19:27,000 --> 01:19:29,000
就是這個所謂的證書對吧

2568
01:19:29,000 --> 01:19:31,000
就你千萬名得到一個證書

2569
01:19:31,000 --> 01:19:33,000
對我才能認為這個軟件是一個

2570
01:19:33,000 --> 01:19:34,000
相對安全的軟件

2571
01:19:34,000 --> 01:19:36,000
我才能允許你打開

2572
01:19:36,000 --> 01:19:38,000
然後背後對心的邏輯就是

2573
01:19:38,000 --> 01:19:41,000
這個證書的獲取是有一定的門檻和難度的

2574
01:19:41,000 --> 01:19:42,000
對於 Mac 來說的話

2575
01:19:42,000 --> 01:19:44,000
就是你的證書是

2576
01:19:44,000 --> 01:19:46,000
就是你的蘋果開發者證號證書

2577
01:19:46,000 --> 01:19:47,000
首先你要付錢才能買到

2578
01:19:47,000 --> 01:19:48,000
要 99 刀

2579
01:19:48,000 --> 01:19:51,000
你對於 99 刀這麼一個成本上來說的話

2580
01:19:51,000 --> 01:19:53,000
假如說你要非常大的廣泛的去撒網

2581
01:19:53,000 --> 01:19:56,000
然後你想每一個分發都用不同的證書

2582
01:19:56,000 --> 01:19:58,000
幾乎是不可能接受的一個成本

2583
01:19:58,000 --> 01:20:01,000
另外就是你在注射證號的時候

2584
01:20:01,000 --> 01:20:02,000
是需要提供信息的

2585
01:20:02,000 --> 01:20:04,000
支付的時候也是需要

2586
01:20:04,000 --> 01:20:05,000
包錄你的支付的信息的

2587
01:20:05,000 --> 01:20:08,000
假如說真的是之後需要給你秋後算賬

2588
01:20:08,000 --> 01:20:09,000
你是個惡意軟件

2589
01:20:09,000 --> 01:20:11,000
那麼是有證據可以去追尋的

2590
01:20:11,000 --> 01:20:13,000
就抓到你本人對吧

2591
01:20:13,000 --> 01:20:14,000
對是說

2592
01:20:14,000 --> 01:20:15,000
SIRG 我們是可以找得到

2593
01:20:15,000 --> 01:20:16,000
蘋果是找到你在哪的

2594
01:20:16,000 --> 01:20:17,000
對吧

2595
01:20:17,000 --> 01:20:18,000
對是你在哪裡註冊

2596
01:20:18,000 --> 01:20:21,000
你的法律主題是什麼都能找得到

2597
01:20:21,000 --> 01:20:23,000
就這個證書也是包含了這些信息

2598
01:20:23,000 --> 01:20:23,000
對是的

2599
01:20:23,000 --> 01:20:26,000
除非從蘋果給你認證過

2600
01:20:26,000 --> 01:20:28,000
你是不可能自己偽造一個

2601
01:20:28,000 --> 01:20:31,000
默認情況下被蘋果設備信任的證書的

2602
01:20:31,000 --> 01:20:33,000
對這個是算法層面決定的

2603
01:20:33,000 --> 01:20:35,000
當這個你應該比我懂得多

2604
01:20:35,000 --> 01:20:36,000
你可以直接給大家克服

2605
01:20:36,000 --> 01:20:39,000
這個我們下次再解釋

2606
01:20:39,000 --> 01:20:41,000
但是我們從實用性的解釋的時候

2607
01:20:41,000 --> 01:20:43,000
就是說你是不可能偽造一個

2608
01:20:43,000 --> 01:20:46,000
蘋果簽發給你的證書的

2609
01:20:46,000 --> 01:20:47,000
這個是這兩項證書是可以保證的

2610
01:20:47,000 --> 01:20:50,000
那麼在這個證書技術上

2611
01:20:50,000 --> 01:20:53,000
再做 OSSP 的原因是

2612
01:20:53,000 --> 01:20:55,000
我猜想是不是說

2613
01:20:55,000 --> 01:20:59,000
蘋果認為我即使發給你一個可信的證書

2614
01:20:59,000 --> 01:21:00,000
但是你作為一個開發者

2615
01:21:00,000 --> 01:21:03,000
也有可能拿這個證書來分發惡意軟件

2616
01:21:03,000 --> 01:21:03,000
對不對

2617
01:21:03,000 --> 01:21:04,000
對是的

2618
01:21:04,000 --> 01:21:06,000
或者說你先翻發了一個正常軟件

2619
01:21:06,000 --> 01:21:08,000
但是你可能潛伏一段時間

2620
01:21:08,000 --> 01:21:11,000
才使用你軟件裡面的惡意的功能

2621
01:21:11,000 --> 01:21:14,000
這個時候蘋果需要一個手段說

2622
01:21:14,000 --> 01:21:19,000
即便我簽發了一個可信的證書給這個軟件的開發者

2623
01:21:19,000 --> 01:21:21,000
他用這個時候給他的程序簽了名

2624
01:21:21,000 --> 01:21:23,000
我也要有一個所謂的叫 Kill Switch

2625
01:21:23,000 --> 01:21:24,000
對吧

2626
01:21:24,000 --> 01:21:24,000
就是 Cook 他

2627
01:21:24,000 --> 01:21:26,000
Tim Cook 可以按個鍵

2628
01:21:26,000 --> 01:21:27,000
老板鍵

2629
01:21:27,000 --> 01:21:29,000
老板鍵說禁止這個軟件

2630
01:21:29,000 --> 01:21:31,000
在蘋果設備上運行

2631
01:21:31,000 --> 01:21:33,000
因為它現在是一個惡意軟件

2632
01:21:33,000 --> 01:21:34,000
還有一些隱藏的功能

2633
01:21:34,000 --> 01:21:35,000
我們當時是不知道的

2634
01:21:35,000 --> 01:21:36,000
沒錯

2635
01:21:36,000 --> 01:21:36,000
是的

2636
01:21:36,000 --> 01:21:37,000
這是一種可能

2637
01:21:37,000 --> 01:21:38,000
還有另外一種可能是

2638
01:21:38,000 --> 01:21:39,000
比如說開發者

2639
01:21:39,000 --> 01:21:40,000
他不小心把他整齣洩漏了

2640
01:21:40,000 --> 01:21:42,000
然後被公眾所知道

2641
01:21:42,000 --> 01:21:43,000
這個時候

2642
01:21:43,000 --> 01:21:43,000
大家都是可以用的

2643
01:21:43,000 --> 01:21:45,000
那這也是需要把它縮小掉

2644
01:21:45,000 --> 01:21:46,000
把鑰匙丟了

2645
01:21:46,000 --> 01:21:48,000
需要導致整個樓的換鎖

2646
01:21:49,000 --> 01:21:50,000
是的

2647
01:21:50,000 --> 01:21:52,000
這個 OCSP 其實是為了

2648
01:21:52,000 --> 01:21:53,000
從本質來講

2649
01:21:53,000 --> 01:21:56,000
它還是為了保障用戶的安全性考慮

2650
01:21:56,000 --> 01:21:59,000
所以說在每次一個應用程序啟動之前

2651
01:21:59,000 --> 01:22:01,000
都去檢查一下

2652
01:22:01,000 --> 01:22:05,000
這個應用程序簽名的證書是否被吊銷過了

2653
01:22:05,000 --> 01:22:05,000
如果它被吊銷過的話

2654
01:22:05,000 --> 01:22:07,000
這個程序就不能啟動對吧

2655
01:22:07,000 --> 01:22:09,000
其實還有一點偏差

2656
01:22:09,000 --> 01:22:11,000
就是它也不是每次系統都會檢查

2657
01:22:11,000 --> 01:22:13,000
一般它還是有一個時間的換存

2658
01:22:13,000 --> 01:22:15,000
各一段時間可能一兩天

2659
01:22:15,000 --> 01:22:16,000
我到時候沒有具體測了

2660
01:22:16,000 --> 01:22:17,000
可能是幾天

2661
01:22:17,000 --> 01:22:19,000
可能是幾個小時這麼一個時間吧

2662
01:22:19,000 --> 01:22:22,000
然後它就會需要重新去檢查一下

2663
01:22:22,000 --> 01:22:24,000
而且甚至有可能

2664
01:22:24,000 --> 01:22:26,000
當然這個也是推測不能確定

2665
01:22:26,000 --> 01:22:27,000
蘋果亞根沒有考慮

2666
01:22:27,000 --> 01:22:31,000
UOCSP 在 APP 包的驗證上這件事情

2667
01:22:31,000 --> 01:22:35,000
因為整個系統關於證書數字簽名的驗證的東西

2668
01:22:35,000 --> 01:22:37,000
都是用的是一同一套供應用體系

2669
01:22:37,000 --> 01:22:42,000
然後在開發者上面的話應該是 Security Framework

2670
01:22:42,000 --> 01:22:43,000
然後這套體系的話

2671
01:22:43,000 --> 01:22:45,000
既會拿來驗證 HTPS

2672
01:22:45,000 --> 01:22:47,000
尋尋防的網站是否合理法的

2673
01:22:47,000 --> 01:22:52,000
也會來驗證開發者簽名的硬包是否合法

2674
01:22:52,000 --> 01:22:54,000
所以說它可能也根本沒有想那麼多細節

2675
01:22:54,000 --> 01:22:56,000
就直接把那個東西搬過來再用了

2676
01:22:56,000 --> 01:22:57,000
OK

2677
01:22:57,000 --> 01:23:00,000
如果你電腦是在沒聯網的狀況下

2678
01:23:00,000 --> 01:23:03,000
這個 UOCSP 它是可以直接失敗

2679
01:23:03,000 --> 01:23:05,000
其實是不影響你啟動的對不對

2680
01:23:05,000 --> 01:23:08,000
對這其實是 UOCSP 協議本身設計的時候

2681
01:23:08,000 --> 01:23:08,000
我們就有問題

2682
01:23:08,000 --> 01:23:10,000
但這個問題好像從理論上

2683
01:23:10,000 --> 01:23:12,000
我印象中時間討論是不可能解決的

2684
01:23:12,000 --> 01:23:14,000
假如說黑客惡意的

2685
01:23:14,000 --> 01:23:16,000
它能夠控制你的煉路

2686
01:23:16,000 --> 01:23:17,000
它能阻止你的這個查詢

2687
01:23:17,000 --> 01:23:18,000
那怎麼辦

2688
01:23:18,000 --> 01:23:20,000
就不准你去檢查 UOCSP 對吧

2689
01:23:20,000 --> 01:23:24,000
對你不可能因為不太能夠說

2690
01:23:24,000 --> 01:23:27,000
你這個 UOCSP 訪問失敗我就不允許繼續

2691
01:23:27,000 --> 01:23:28,000
因為訪問失敗這件事情

2692
01:23:28,000 --> 01:23:29,000
太多因素了

2693
01:23:29,000 --> 01:23:33,000
對太多因素在網路上各種方面還是都還是可能的

2694
01:23:33,000 --> 01:23:36,000
我自己觀察的話是系統會重視五次

2695
01:23:36,000 --> 01:23:38,000
你如果這個連接失敗的話

2696
01:23:38,000 --> 01:23:39,000
它會在後台自動重視五次

2697
01:23:39,000 --> 01:23:42,000
如果五次之後都還是無法訪問的話

2698
01:23:42,000 --> 01:23:43,000
它就不管了

2699
01:23:43,000 --> 01:23:44,000
它就繼續運行

2700
01:23:44,000 --> 01:23:46,000
所以這裡面有個非常簡單直敗的問題了

2701
01:23:46,000 --> 01:23:48,000
就是說如果它 UOCSP 檢查

2702
01:23:48,000 --> 01:23:50,000
默認就是說如果網絡不同的情況

2703
01:23:50,000 --> 01:23:53,000
它也能夠就放過不檢查

2704
01:23:53,000 --> 01:23:54,000
然後就讓這次先啟動

2705
01:23:54,000 --> 01:23:56,000
以後再說它是不會影響 UOCSP 使用的

2706
01:23:56,000 --> 01:23:59,000
那為什麼這次會導致這麼大規模的

2707
01:23:59,000 --> 01:24:00,000
又不能啟動呢

2708
01:24:00,000 --> 01:24:03,000
它的問題在於它沒有服務器直接說

2709
01:24:03,000 --> 01:24:06,000
我不醒來是服務器被 DDoS 沒有響應

2710
01:24:06,000 --> 01:24:08,000
所以說在等著它服務器說話

2711
01:24:08,000 --> 01:24:10,000
OK 這個單秒就非常傻

2712
01:24:10,000 --> 01:24:12,000
如果說你正常加個什麼加個 TIMOR

2713
01:24:12,000 --> 01:24:15,000
有一個 TIMOR 比如說五秒之後還沒有成功

2714
01:24:15,000 --> 01:24:16,000
你就直接放棄了

2715
01:24:16,000 --> 01:24:18,000
就是也不會導致這麼多的問題對吧

2716
01:24:18,000 --> 01:24:21,000
但實際上等待五秒也是相當長的一件事

2717
01:24:21,000 --> 01:24:22,000
TIMOR 應該是有的

2718
01:24:22,000 --> 01:24:25,000
我覺得應該不止五秒可能 TIMOR

2719
01:24:25,000 --> 01:24:28,000
我沒有實際遇到它真正當機的時間事情了

2720
01:24:28,000 --> 01:24:30,000
就是我沒有觀測到它的到幾十度的秒

2721
01:24:30,000 --> 01:24:32,000
但是應該不止五秒

2722
01:24:32,000 --> 01:24:35,000
而且我覺得這可能真的是一個第一世界

2723
01:24:35,000 --> 01:24:36,000
沒有考慮到的問題吧

2724
01:24:36,000 --> 01:24:39,000
對於蘋果的工程師坐在蘋果的網絡裡面

2725
01:24:39,000 --> 01:24:41,000
從來都不會覺得執行一個網絡請求

2726
01:24:41,000 --> 01:24:44,000
那個賭色的執行一個網絡請求會

2727
01:24:44,000 --> 01:24:45,000
還能失敗

2728
01:24:45,000 --> 01:24:46,000
對還能失敗還能卡住

2729
01:24:46,000 --> 01:24:48,000
這不就幾好秒的事情吧

2730
01:24:48,000 --> 01:24:49,000
有什麼關係呢

2731
01:24:49,000 --> 01:24:51,000
對 關係就是說如果它是直接失敗

2732
01:24:51,000 --> 01:24:52,000
反而對了

2733
01:24:52,000 --> 01:24:54,000
如果是直接失敗網絡不通的情況下

2734
01:24:54,000 --> 01:24:56,000
它反而也不會出什麼帶來問題

2735
01:24:56,000 --> 01:24:57,000
它屬於這種

2736
01:24:57,000 --> 01:24:59,000
對 直接 502 之類的就可以了

2737
01:24:59,000 --> 01:25:01,000
對 但這次屬於那種

2738
01:25:01,000 --> 01:25:04,000
就是它那邊服務器響應非常非常慢

2739
01:25:04,000 --> 01:25:06,000
大家說我還真正在努力中對吧

2740
01:25:06,000 --> 01:25:08,000
你不要放棄這種感覺

2741
01:25:08,000 --> 01:25:10,000
就很 但即便是這樣

2742
01:25:10,000 --> 01:25:12,000
即便是這種失敗場景

2743
01:25:12,000 --> 01:25:14,000
它如果說它是就是這個 OCSP

2744
01:25:14,000 --> 01:25:15,000
它是一個我們說什麼的

2745
01:25:15,000 --> 01:25:16,000
叫做一步的

2746
01:25:16,000 --> 01:25:21,000
就是它檢查 OCSP 和讓你啟動 APP

2747
01:25:21,000 --> 01:25:24,000
是兩個不需要以前會有依賴關係的

2748
01:25:24,000 --> 01:25:26,000
這個邏輯步驟

2749
01:25:26,000 --> 01:25:27,000
它其實也不會導致這個問題對吧

2750
01:25:27,000 --> 01:25:29,000
就是說你啟動的是啟動的

2751
01:25:29,000 --> 01:25:29,000
能檢查檢查

2752
01:25:29,000 --> 01:25:32,000
你可以下次再告訴我這個結果

2753
01:25:32,000 --> 01:25:33,000
或者說你檢查好了之後

2754
01:25:33,000 --> 01:25:35,000
你談個小窗出來說

2755
01:25:35,000 --> 01:25:36,000
這個程序剛才我檢查失敗了

2756
01:25:36,000 --> 01:25:37,000
但是你已經把它打開了

2757
01:25:37,000 --> 01:25:38,000
我現在警告你說

2758
01:25:38,000 --> 01:25:39,000
這個已經被調校了

2759
01:25:39,000 --> 01:25:40,000
可能有問題你趕緊退出來對吧

2760
01:25:40,000 --> 01:25:41,000
也是可以的嘛

2761
01:25:41,000 --> 01:25:42,000
對

2762
01:25:42,000 --> 01:25:43,000
但是它連這個也沒有做

2763
01:25:45,000 --> 01:25:46,000
對 而且這個問題的話

2764
01:25:46,000 --> 01:25:49,000
可能導致了在國內絕大部分用戶

2765
01:25:49,000 --> 01:25:51,000
它絕大麥克反辦的一個很大的問題

2766
01:25:51,000 --> 01:25:53,000
有的時候我們會打開我們的麥克

2767
01:25:53,000 --> 01:25:54,000
然後檢開一個 APP

2768
01:25:54,000 --> 01:25:56,000
就看著圖標在那談談談談談

2769
01:25:56,000 --> 01:25:58,000
談個 10 秒其實一直在跳 對吧

2770
01:25:58,000 --> 01:26:00,000
對 不是一個很吵

2771
01:26:00,000 --> 01:26:01,000
很含含的事情

2772
01:26:01,000 --> 01:26:03,000
就是在檢查這個程序

2773
01:26:03,000 --> 01:26:05,000
它反彎不長不是網絡不長

2774
01:26:05,000 --> 01:26:06,000
對 所以就是說這本質上是一個

2775
01:26:06,000 --> 01:26:08,000
軟件架構設計的失誤

2776
01:26:08,000 --> 01:26:11,000
再加上網絡這個技術設施

2777
01:26:11,000 --> 01:26:13,000
因為一些外部或者是不可預測的因素

2778
01:26:13,000 --> 01:26:15,000
導致變得緩慢

2779
01:26:15,000 --> 01:26:16,000
而不是完全不可用的情況下

2780
01:26:17,000 --> 01:26:19,000
當從壓力導致的一個用戶

2781
01:26:19,000 --> 01:26:21,000
實用體驗的重大的問題

2782
01:26:21,000 --> 01:26:22,000
對 是的

2783
01:26:22,000 --> 01:26:24,000
所以還是要把蘋果的架構

2784
01:26:24,000 --> 01:26:25,000
就是負責這塊架構的人

2785
01:26:25,000 --> 01:26:27,000
拖出來打板子才行

2786
01:26:27,000 --> 01:26:29,000
對 我覺得很可能就是

2787
01:26:29,000 --> 01:26:30,000
之前沒有想過這件事情

2788
01:26:30,000 --> 01:26:32,000
在他們那從來沒有遇到過這件事情

2789
01:26:32,000 --> 01:26:34,000
這個坑埋在那就一直沒有人管

2790
01:26:34,000 --> 01:26:37,000
其實這個坑應該擺了相當長的時間了

2791
01:26:37,000 --> 01:26:39,000
很大很多年以前

2792
01:26:39,000 --> 01:26:41,000
就已經是這麼一個工作方式

2793
01:26:41,000 --> 01:26:42,000
這引入 SSP

2794
01:26:42,000 --> 01:26:43,000
我記得應該是至少

2795
01:26:43,000 --> 01:26:45,000
可能是 3 到 5 個百萬以前了吧

2796
01:26:45,000 --> 01:26:46,000
大百萬以前了

2797
01:26:46,000 --> 01:26:47,000
對 我作為開發者

2798
01:26:47,000 --> 01:26:49,000
我自己觀察後台請求

2799
01:26:49,000 --> 01:26:51,000
我早就是看到後台不斷的

2800
01:26:51,000 --> 01:26:53,000
就是 SSP 的請求會有在

2801
01:26:53,000 --> 01:26:54,000
一直在進行的

2802
01:26:54,000 --> 01:26:57,000
OCSP 是會直接發達開發者那裡去的嗎

2803
01:26:57,000 --> 01:26:58,000
不是會發達開發者

2804
01:26:58,000 --> 01:27:01,000
它發的應該是證書的

2805
01:27:01,000 --> 01:27:02,000
那個頒發者那裡去查

2806
01:27:02,000 --> 01:27:02,000
應該是

2807
01:27:02,000 --> 01:27:04,000
我從設置上面看網路流量

2808
01:27:04,000 --> 01:27:05,000
我是能看到它的評詞的

2809
01:27:05,000 --> 01:27:07,000
你是從中間演的角度去看它

2810
01:27:07,000 --> 01:27:07,000
對 是的

2811
01:27:07,000 --> 01:27:08,000
我能看到它的請求

2812
01:27:08,000 --> 01:27:10,000
然後因為它那個請求本身是 HTP

2813
01:27:10,000 --> 01:27:11,000
是名聞的

2814
01:27:11,000 --> 01:27:12,000
所以說你能看到它們的信息

2815
01:27:12,000 --> 01:27:14,000
所以這也是導致這一次

2816
01:27:14,000 --> 01:27:16,000
大家對它在隱私方面的一個

2817
01:27:16,000 --> 01:27:17,000
洩漏上的一個批評的一個原因

2818
01:27:17,000 --> 01:27:18,000
對 剛才我們說的

2819
01:27:18,000 --> 01:27:20,000
就是說它是導致不可用

2820
01:27:20,000 --> 01:27:21,000
這個還是說是一個

2821
01:27:21,000 --> 01:27:22,000
用戶體驗的問題

2822
01:27:22,000 --> 01:27:23,000
可能相對來說

2823
01:27:23,000 --> 01:27:26,000
如果它把架構改一下

2824
01:27:26,000 --> 01:27:27,000
比如說它做成一部的

2825
01:27:27,000 --> 01:27:27,000
對吧

2826
01:27:27,000 --> 01:27:29,000
不需要跟那個啟動

2827
01:27:29,000 --> 01:27:31,000
這個行動用程序之間

2828
01:27:31,000 --> 01:27:33,000
產生一個綁定關係

2829
01:27:33,000 --> 01:27:34,000
那可能也還好

2830
01:27:34,000 --> 01:27:36,000
但可能這更要緊的是

2831
01:27:36,000 --> 01:27:39,000
就是說它在 OCSP 檢查過程中

2832
01:27:39,000 --> 01:27:42,000
暴露出來的一些更侵犯隱私的事情

2833
01:27:42,000 --> 01:27:43,000
比如說它說我們

2834
01:27:43,000 --> 01:27:45,000
我們我現在不太清楚

2835
01:27:45,000 --> 01:27:45,000
是不是這麼一回事

2836
01:27:45,000 --> 01:27:47,000
我看到的這個說法是說

2837
01:27:47,000 --> 01:27:51,000
它在 OCSP 請求是通過 HTP 名文發送的

2838
01:27:51,000 --> 01:27:52,000
沒有走 HTPS

2839
01:27:52,000 --> 01:27:54,000
這個跟我們目前主流的

2840
01:27:54,000 --> 01:27:57,000
只要是通過互聯網傳說的信息

2841
01:27:57,000 --> 01:27:59,000
都盡可能加密的方式來做

2842
01:27:59,000 --> 01:28:01,000
這種做法是違背的

2843
01:28:01,000 --> 01:28:02,000
就是其一

2844
01:28:02,000 --> 01:28:02,000
對

2845
01:28:02,000 --> 01:28:05,000
第二就是說它在這個名文的

2846
01:28:05,000 --> 01:28:08,000
這個 OCSP 的請求裡面還附帶了

2847
01:28:08,000 --> 01:28:11,000
你就是它要檢查那個 APP 的一個 HASHI

2848
01:28:11,000 --> 01:28:13,000
這個所謂的 HASHI 就是說

2849
01:28:13,000 --> 01:28:16,000
可以唯一判定說你是否在

2850
01:28:16,000 --> 01:28:18,000
不是 HASHI 是 SN 是那個證書的 SN

2851
01:28:18,000 --> 01:28:20,000
證書的 SN 是證書的序列號對吧

2852
01:28:20,000 --> 01:28:21,000
對是的

2853
01:28:21,000 --> 01:28:23,000
但是這個序列號是證書唯一的

2854
01:28:23,000 --> 01:28:24,000
對

2855
01:28:24,000 --> 01:28:27,000
假設我有一個證書和 APP 之間的彩虹表的話

2856
01:28:27,000 --> 01:28:29,000
我是可以反查出來這是哪個 APP 的

2857
01:28:29,000 --> 01:28:30,000
都是公開信息對吧

2858
01:28:30,000 --> 01:28:31,000
比如說 Serge

2859
01:28:31,000 --> 01:28:31,000
對

2860
01:28:31,000 --> 01:28:32,000
它會有一個 SN

2861
01:28:32,000 --> 01:28:32,000
對吧

2862
01:28:32,000 --> 01:28:33,000
它發了這個 SN 過去

2863
01:28:33,000 --> 01:28:36,000
但如果我只要假設我是這個 SE

2864
01:28:36,000 --> 01:28:37,000
或者任何一個中間人

2865
01:28:37,000 --> 01:28:38,000
忘了中間人

2866
01:28:38,000 --> 01:28:41,000
我觀察到了這個名文的 HTPS 的流量

2867
01:28:41,000 --> 01:28:44,000
然後我看到的是一個 IP 地址

2868
01:28:44,000 --> 01:28:45,000
就是這個原來 IP 地址

2869
01:28:45,000 --> 01:28:47,000
它發向了蘋果的 OCSP 服務器

2870
01:28:47,000 --> 01:28:51,000
有一個名文的包裡面含有這個 SN

2871
01:28:51,000 --> 01:28:53,000
我可以 100%精確的都是結論說

2872
01:28:53,000 --> 01:28:56,000
這個 IP 的人在用 Serge 開發者證書

2873
01:28:56,000 --> 01:28:57,000
簽發的東西

2874
01:28:57,000 --> 01:28:57,000
對

2875
01:28:57,000 --> 01:28:59,000
但是 Serge 開發者因為他只簽發了兩個東西

2876
01:28:59,000 --> 01:29:02,000
就是 Serge 和 Lpass 這兩個 APP

2877
01:29:02,000 --> 01:29:04,000
那它肯定是在用其中這兩個之一對吧

2878
01:29:04,000 --> 01:29:05,000
對沒錯

2879
01:29:05,000 --> 01:29:09,000
然後由於絕大部分的我們不拋開

2880
01:29:09,000 --> 01:29:11,000
什麼微軟那些什麼大公司

2881
01:29:11,000 --> 01:29:13,000
正常一些中小開發者

2882
01:29:13,000 --> 01:29:15,000
但可能一個證書就只開發一個 APP

2883
01:29:15,000 --> 01:29:17,000
其實我們可以基本上可以精確的定位到

2884
01:29:17,000 --> 01:29:18,000
這個人是不是在用 Serge

2885
01:29:18,000 --> 01:29:19,000
或者這個人是不是在用

2886
01:29:19,000 --> 01:29:20,000
什麼什麼軟件

2887
01:29:20,000 --> 01:29:21,000
對吧

2888
01:29:21,000 --> 01:29:23,000
有些比較稍微敏感一點軟件

2889
01:29:23,000 --> 01:29:25,000
就是我們是可以明確的知道這件事情的

2890
01:29:25,000 --> 01:29:26,000
對

2891
01:29:26,000 --> 01:29:26,000
是的

2892
01:29:26,000 --> 01:29:28,000
所以從這個角度來講

2893
01:29:28,000 --> 01:29:30,000
這個名文的 OCSP 的請求

2894
01:29:30,000 --> 01:29:32,000
它的確是洩露了用戶的隱私

2895
01:29:32,000 --> 01:29:33,000
這個說法是沒錯的對吧

2896
01:29:33,000 --> 01:29:34,000
對

2897
01:29:34,000 --> 01:29:35,000
這個說法是沒錯的

2898
01:29:35,000 --> 01:29:37,000
我們也看到就是這個

2899
01:29:37,000 --> 01:29:38,000
但這是一篇

2900
01:29:39,000 --> 01:29:41,000
這個是一篇博客裡面

2901
01:29:41,000 --> 01:29:44,000
它有專門去解釋整個這個

2902
01:29:44,000 --> 01:29:45,000
底層原理怎麼回事

2903
01:29:45,000 --> 01:29:47,000
我們會把這個最新的修讀詞裡面

2904
01:29:47,000 --> 01:29:50,000
會貼出這篇文章的連結大家可以去

2905
01:29:50,000 --> 01:29:51,000
如果感興趣這個技術界

2906
01:29:51,000 --> 01:29:52,000
可以去點去來看

2907
01:29:52,000 --> 01:29:54,000
但我們也看到就是隔了

2908
01:29:54,000 --> 01:29:56,000
可能幾天之後蘋果出了一個官方的

2909
01:29:56,000 --> 01:29:57,000
算是一個回應吧

2910
01:29:57,000 --> 01:29:58,000
它在它的這個

2911
01:29:58,000 --> 01:30:00,000
它的這個 support 配件裡面

2912
01:30:00,000 --> 01:30:02,000
叫做 safely open apps on your Mac

2913
01:30:02,000 --> 01:30:03,000
就是說在你的

2914
01:30:03,000 --> 01:30:06,000
Mac 上安全的打開啟應用程序裡面

2915
01:30:06,000 --> 01:30:09,000
所以下面加了一個 section 叫做

2916
01:30:09,000 --> 01:30:10,000
叫做這個

2917
01:30:11,000 --> 01:30:12,000
Piracy protection 隱私保護

2918
01:30:12,000 --> 01:30:13,000
它說

2919
01:30:13,000 --> 01:30:14,000
它做了加了一段話

2920
01:30:14,000 --> 01:30:15,000
它給了三個方法

2921
01:30:15,000 --> 01:30:19,000
它說在明年我們會增加幾個變化

2922
01:30:19,000 --> 01:30:20,000
一個是說

2923
01:30:20,000 --> 01:30:23,000
通過加密的協議去傳輸這個

2924
01:30:23,000 --> 01:30:25,000
這個 OSSP 的請求對吧

2925
01:30:25,000 --> 01:30:25,000
就是其一

2926
01:30:25,000 --> 01:30:28,000
第二個就是說它有更強的保護措施

2927
01:30:28,000 --> 01:30:29,000
去解決剛才我們講的

2928
01:30:29,000 --> 01:30:31,000
就是說如果服務端不可用

2929
01:30:31,000 --> 01:30:33,000
就是各種失敗的原因

2930
01:30:33,000 --> 01:30:36,000
出現就盡量避免

2931
01:30:36,000 --> 01:30:39,000
由於服務器或者網絡不可用

2932
01:30:39,000 --> 01:30:41,000
而導致不法啟動這個應用的情況

2933
01:30:41,000 --> 01:30:42,000
對吧

2934
01:30:42,000 --> 01:30:44,000
然後就是說還給用戶一個選項

2935
01:30:44,000 --> 01:30:45,000
說說用戶可以

2936
01:30:45,000 --> 01:30:46,000
opt out

2937
01:30:46,000 --> 01:30:48,000
就是可以不要這些安全保護措施

2938
01:30:48,000 --> 01:30:49,000
就徹底的保護這個隱私

2939
01:30:49,000 --> 01:30:50,000
對吧

2940
01:30:50,000 --> 01:30:51,000
我就是要裸奔

2941
01:30:51,000 --> 01:30:53,000
我就想要像 Windows 一樣

2942
01:30:53,000 --> 01:30:55,000
對我就不想檢查的

2943
01:30:55,000 --> 01:30:57,000
我就不想給你蘋果知道

2944
01:30:57,000 --> 01:30:58,000
我在運行什麼樣程序上

2945
01:30:58,000 --> 01:30:59,000
說這個說法

2946
01:30:59,000 --> 01:31:01,000
我覺得有點奇怪

2947
01:31:01,000 --> 01:31:02,000
就是說你

2948
01:31:02,000 --> 01:31:04,000
你都在用蘋果的軟件硬件系統了

2949
01:31:04,000 --> 01:31:05,000
你不想讓蘋果知道

2950
01:31:05,000 --> 01:31:07,000
這個是不可能的對吧

2951
01:31:07,000 --> 01:31:08,000
蘋果如果要想知道

2952
01:31:08,000 --> 01:31:10,000
它總有各種方法知道

2953
01:31:10,000 --> 01:31:12,000
你在這裡做文章是沒有用的

2954
01:31:12,000 --> 01:31:13,000
但是我們來看

2955
01:31:13,000 --> 01:31:16,000
就是雖然蘋果還沒有公布

2956
01:31:16,000 --> 01:31:17,000
他說它具體的解決方案是什麼

2957
01:31:17,000 --> 01:31:20,000
那我們這是畢竟是個技術節目

2958
01:31:20,000 --> 01:31:21,000
我們來想想

2959
01:31:21,000 --> 01:31:23,000
有哪些方法可以避免這個問題

2960
01:31:23,000 --> 01:31:24,000
首先來看

2961
01:31:24,000 --> 01:31:25,000
我們先說剛才也提到了

2962
01:31:25,000 --> 01:31:29,000
就是說把這個 OSSP 檢查和 APP 啟動的

2963
01:31:29,000 --> 01:31:30,000
這個兩個過程獨立開來

2964
01:31:30,000 --> 01:31:31,000
要做成是

2965
01:31:31,000 --> 01:31:34,000
如果因為 OSSP 檢查失敗

2966
01:31:34,000 --> 01:31:36,000
就沒有結果

2967
01:31:36,000 --> 01:31:37,000
或者還是進行中

2968
01:31:37,000 --> 01:31:38,000
就要等它結果才能成功

2969
01:31:38,000 --> 01:31:40,000
這個明顯是不合理的對吧

2970
01:31:40,000 --> 01:31:40,000
對

2971
01:31:40,000 --> 01:31:41,000
所以就是要

2972
01:31:41,000 --> 01:31:43,000
OSSP 它是一個

2973
01:31:43,000 --> 01:31:45,000
應該是一個義務

2974
01:31:45,000 --> 01:31:47,000
在背景後台去運行的一個東西

2975
01:31:47,000 --> 01:31:49,000
然後前台應用在

2976
01:31:49,000 --> 01:31:50,000
還是正常執行

2977
01:31:50,000 --> 01:31:52,000
不用等待任何網絡請求

2978
01:31:52,000 --> 01:31:54,000
然後後來如果你 OSSP 檢查結果

2979
01:31:54,000 --> 01:31:55,000
你告訴我說

2980
01:31:55,000 --> 01:31:56,000
要不就下次不能用

2981
01:31:56,000 --> 01:31:57,000
或者是你這次不能用

2982
01:31:57,000 --> 01:31:58,000
你直接談個川

2983
01:31:58,000 --> 01:31:59,000
或者是給個什麼提示

2984
01:31:59,000 --> 01:32:02,000
然後把 APPFrizz 做也可以

2985
01:32:02,000 --> 01:32:02,000
對吧

2986
01:32:02,000 --> 01:32:04,000
或者是強行殺掉它

2987
01:32:04,000 --> 01:32:05,000
退出給個提示也行

2988
01:32:05,000 --> 01:32:07,000
這種方法就比較簡單

2989
01:32:07,000 --> 01:32:09,000
其實我更關心的就是說

2990
01:32:09,000 --> 01:32:10,000
那是否或者說

2991
01:32:10,000 --> 01:32:13,000
如何通過一個加密的協議

2992
01:32:13,000 --> 01:32:15,000
來傳輸這個 OSSP 的檢查

2993
01:32:15,000 --> 01:32:17,000
或者說從技術上有沒有可能

2994
01:32:17,000 --> 01:32:17,000
就是說

2995
01:32:17,000 --> 01:32:19,000
哪怕是我用名文傳輸

2996
01:32:19,000 --> 01:32:22,000
但是不會洩露用戶的

2997
01:32:22,000 --> 01:32:24,000
再用哪個證書的

2998
01:32:24,000 --> 01:32:25,000
或者是再用哪個 APP 的

2999
01:32:25,000 --> 01:32:26,000
這麼一個信息

3000
01:32:26,000 --> 01:32:28,000
其實這個問題

3001
01:32:28,000 --> 01:32:31,000
它之所以就是 OSSP 有這個問題

3002
01:32:31,000 --> 01:32:32,000
就是因為 OSSP 本事

3003
01:32:32,000 --> 01:32:36,000
最早就是為 HTPS 這個請求來設計的

3004
01:32:36,000 --> 01:32:39,000
因為我當我去訪問 HTPS 的時候

3005
01:32:39,000 --> 01:32:40,000
這是一個加密連結

3006
01:32:40,000 --> 01:32:42,000
我要去驗證這個證書是否有效

3007
01:32:42,000 --> 01:32:45,000
然後我要去執行 OSSP 請求

3008
01:32:45,000 --> 01:32:48,000
如果這個 OSSP 請求也是 HTPS 的話

3009
01:32:48,000 --> 01:32:50,000
那它這個請求又該誰來檢查呢

3010
01:32:50,000 --> 01:32:51,000
即可當的問題

3011
01:32:51,000 --> 01:32:52,000
這個說法當然我覺得

3012
01:32:52,000 --> 01:32:53,000
邏輯上是可以理解

3013
01:32:53,000 --> 01:32:55,000
但我覺得如果我不去追求

3014
01:32:55,000 --> 01:32:57,000
那麼的百分之百完美的話

3015
01:32:57,000 --> 01:32:59,000
這個我覺得也不是不可以接受

3016
01:32:59,000 --> 01:33:01,000
就是說如果說 OSSP 的請求

3017
01:33:01,000 --> 01:33:03,000
它不是每次都要檢查的話

3018
01:33:03,000 --> 01:33:06,000
就是如果它可以像網頁的 HTPS 的檢查

3019
01:33:06,000 --> 01:33:07,000
也可以一步的話

3020
01:33:07,000 --> 01:33:08,000
它完全可以就是說

3021
01:33:08,000 --> 01:33:12,000
我檢查 OSSP 的那個 HTPS 請求的 OSSP

3022
01:33:12,000 --> 01:33:13,000
我可以不做嗎

3023
01:33:13,000 --> 01:33:14,000
或者說是我等下次

3024
01:33:14,000 --> 01:33:15,000
沒錯

3025
01:33:15,000 --> 01:33:18,000
或者說等這個或者一步來做也可以

3026
01:33:18,000 --> 01:33:19,000
至少讓我保證

3027
01:33:19,000 --> 01:33:21,000
這一次的 OSSP 請求是可以完成的

3028
01:33:21,000 --> 01:33:22,000
然後我們再來看你

3029
01:33:22,000 --> 01:33:24,000
那個 OSSP 請求就是

3030
01:33:24,000 --> 01:33:26,000
就是它是兩個英國的 OSSP 請求

3031
01:33:26,000 --> 01:33:29,000
它不需要一定是同時完成

3032
01:33:29,000 --> 01:33:29,000
對

3033
01:33:29,000 --> 01:33:31,000
這個從我的理解上來說的話

3034
01:33:31,000 --> 01:33:33,000
是當時是在 1999 年

3035
01:33:33,000 --> 01:33:35,000
那個時候對隱私的保護的重要性

3036
01:33:35,000 --> 01:33:37,000
沒有現在這麼強

3037
01:33:37,000 --> 01:33:38,000
然後本身的話

3038
01:33:38,000 --> 01:33:40,000
你通過訪問 HTPS 的話

3039
01:33:40,000 --> 01:33:41,000
你通過在列入上

3040
01:33:41,000 --> 01:33:43,000
已經 SNI 已經洩露出

3041
01:33:43,000 --> 01:33:44,000
你的訪問的譽明了

3042
01:33:44,000 --> 01:33:45,000
所以說這個事情

3043
01:33:45,000 --> 01:33:46,000
你訪問哪個網站

3044
01:33:46,000 --> 01:33:47,000
這些已經暴露了

3045
01:33:47,000 --> 01:33:48,000
就加不加密

3046
01:33:48,000 --> 01:33:50,000
或者走不走 HTPS 的

3047
01:33:50,000 --> 01:33:52,000
關於在 OSSP 請求上的話

3048
01:33:52,000 --> 01:33:53,000
只涉及安全性的問題

3049
01:33:53,000 --> 01:33:55,000
不涉及隱私性的問題

3050
01:33:55,000 --> 01:33:56,000
安全性的問題的話

3051
01:33:56,000 --> 01:33:57,000
在響應結果上

3052
01:33:57,000 --> 01:33:58,000
本身就已經被證書的

3053
01:33:58,000 --> 01:34:00,000
數字簽名給解決了

3054
01:34:00,000 --> 01:34:02,000
所以說你加 HTPS 是解決隱私問題

3055
01:34:02,000 --> 01:34:04,000
在 1999 年那個時候

3056
01:34:04,000 --> 01:34:04,000
估計大家

3057
01:34:04,000 --> 01:34:07,000
一是它本身在 TLS 的 SNI 上

3058
01:34:07,000 --> 01:34:08,000
就隱私了過一次了

3059
01:34:08,000 --> 01:34:10,000
然後二是也沒有這麼特別的

3060
01:34:10,000 --> 01:34:12,000
去關注隱私上

3061
01:34:12,000 --> 01:34:13,000
要這麼保護的事情

3062
01:34:13,000 --> 01:34:14,000
所以說就沒有考慮這件事

3063
01:34:14,000 --> 01:34:15,000
這是我的理解

3064
01:34:15,000 --> 01:34:17,000
因為它畢竟它是一個 online 的事情

3065
01:34:17,000 --> 01:34:19,000
就是說你一定要聯網

3066
01:34:19,000 --> 01:34:21,000
然後你本來要發的東西

3067
01:34:21,000 --> 01:34:23,000
哪怕我不通過 OSSP 來看

3068
01:34:23,000 --> 01:34:24,000
我直接看你連去了

3069
01:34:24,000 --> 01:34:25,000
假設我是個中間人

3070
01:34:25,000 --> 01:34:27,000
我直接看你連去了哪個目標代替

3071
01:34:27,000 --> 01:34:28,000
我也知道你去訪問了什麼網站

3072
01:34:28,000 --> 01:34:29,000
對吧

3073
01:34:29,000 --> 01:34:31,000
這個場景跟這個 app 上面始終

3074
01:34:31,000 --> 01:34:32,000
因為你有些 app

3075
01:34:32,000 --> 01:34:33,000
你可以是不用聯網的

3076
01:34:33,000 --> 01:34:34,000
你就是本地啟動一個

3077
01:34:34,000 --> 01:34:36,000
比如說我前面一個隨便

3078
01:34:36,000 --> 01:34:37,000
某某某 APP

3079
01:34:37,000 --> 01:34:38,000
它本來也不需要聯網

3080
01:34:38,000 --> 01:34:38,000
對吧

3081
01:34:38,000 --> 01:34:40,000
它就在本地啟動

3082
01:34:40,000 --> 01:34:42,000
但是卻通過 OSSP 這個東西

3083
01:34:42,000 --> 01:34:44,000
洩露出我在開始程序

3084
01:34:44,000 --> 01:34:45,000
這就很奇怪了對不對

3085
01:34:45,000 --> 01:34:45,000
對

3086
01:34:45,000 --> 01:34:47,000
所以就是我的關於核心觀點

3087
01:34:47,000 --> 01:34:48,000
就是是蘋果偷懶了

3088
01:34:48,000 --> 01:34:49,000
它沒想那麼多

3089
01:34:49,000 --> 01:34:51,000
就把那邊現成的一個東西

3090
01:34:51,000 --> 01:34:52,000
就拿過來就用了

3091
01:34:52,000 --> 01:34:55,000
根本沒有考慮過這些事情

3092
01:34:55,000 --> 01:34:57,000
你完全可以把整個 OSSP 驗證這一套

3093
01:34:57,000 --> 01:34:58,000
搞到本地之下

3094
01:34:58,000 --> 01:35:01,000
定期在 MACOS 裡面

3095
01:35:01,000 --> 01:35:02,000
更新一套蘋果

3096
01:35:02,000 --> 01:35:06,000
從入此 CityPocket 到具體上

3097
01:35:06,000 --> 01:35:09,000
每一個 app 的證書的這麼一套驗證鏈

3098
01:35:09,000 --> 01:35:11,000
然後你把整個驗證過程

3099
01:35:11,000 --> 01:35:12,000
放在本地完成就可以

3100
01:35:12,000 --> 01:35:15,000
這其實就是原來傳統的 CRL

3101
01:35:15,000 --> 01:35:17,000
就是提前我把那些被調銷的東西

3102
01:35:17,000 --> 01:35:18,000
先全部下回來等著

3103
01:35:18,000 --> 01:35:20,000
然後我只用更新這個就行了

3104
01:35:20,000 --> 01:35:23,000
這個面臨的最主要的一個限制

3105
01:35:23,000 --> 01:35:24,000
就是說這個列表到柳柔大

3106
01:35:24,000 --> 01:35:25,000
我是不知道的

3107
01:35:25,000 --> 01:35:29,000
但我想來這種在 app 上面被調銷證書的情況

3108
01:35:29,000 --> 01:35:30,000
因為還是比較少的

3109
01:35:30,000 --> 01:35:33,000
一不像 web 它是一個完全開放的狀態

3110
01:35:33,000 --> 01:35:35,000
在 MAC 上幾乎沒有聽說過

3111
01:35:35,000 --> 01:35:37,000
有哪個知名的軟件

3112
01:35:37,000 --> 01:35:38,000
或都沒有見過哪個軟件

3113
01:35:38,000 --> 01:35:40,000
就是或者是安全的什麼東西

3114
01:35:40,000 --> 01:35:42,000
被出現過調銷證書的情況

3115
01:35:42,000 --> 01:35:43,000
其實在 iOS 上會很常見

3116
01:35:43,000 --> 01:35:47,000
就是 iOS 的話有很多一些黑色產業

3117
01:35:47,000 --> 01:35:48,000
什麼的濫用企業分發

3118
01:35:48,000 --> 01:35:50,000
然後去分發了很多的應用

3119
01:35:50,000 --> 01:35:52,000
然後他們一旦蘋果

3120
01:35:52,000 --> 01:35:54,000
把他們的企業證書調銷了之後

3121
01:35:54,000 --> 01:35:56,000
就會靠 OSP 把證書給註銷了

3122
01:35:56,000 --> 01:35:57,000
這樣的話用戶的設備上

3123
01:35:57,000 --> 01:35:58,000
那個應用就直接打開了

3124
01:35:58,000 --> 01:36:02,000
核心就是蘋果之前沒有仔細想過這件事

3125
01:36:02,000 --> 01:36:05,000
沒有去仔細考慮把證書體系

3126
01:36:05,000 --> 01:36:06,000
用在英文包檢查上面

3127
01:36:06,000 --> 01:36:07,000
這些細節上會不會導致問題

3128
01:36:07,000 --> 01:36:10,000
但是如果就是它好好的想了

3129
01:36:10,000 --> 01:36:12,000
我該怎麼樣去做這套邏輯

3130
01:36:12,000 --> 01:36:12,000
做這個流程的話

3131
01:36:12,000 --> 01:36:14,000
應該是有非常多的方案

3132
01:36:14,000 --> 01:36:16,000
能夠做出一套既保證隱私

3133
01:36:16,000 --> 01:36:18,000
又安全又穩定的一個結果的

3134
01:36:18,000 --> 01:36:21,000
在目前它不用它做任何額外的工作

3135
01:36:22,000 --> 01:36:28,000
就是簡單的把 OSSP.Apple.com 這個網站

3136
01:36:28,000 --> 01:36:30,000
強制通過 HTPS 去訪問

3137
01:36:30,000 --> 01:36:33,000
也可以解決隱私保護和不泄漏的問題

3138
01:36:33,000 --> 01:36:34,000
你只有蘋果知道嗎

3139
01:36:34,000 --> 01:36:35,000
中間人是不知道的

3140
01:36:35,000 --> 01:36:37,000
對理論上應該沒問題

3141
01:36:37,000 --> 01:36:39,000
但是從開發者的角度的話

3142
01:36:39,000 --> 01:36:42,000
系統架構上我覺得可能會有問題

3143
01:36:42,000 --> 01:36:44,000
因為它本身就把這些東西的

3144
01:36:44,000 --> 01:36:45,000
功能性已經化分成塊了

3145
01:36:45,000 --> 01:36:49,000
那麼那個進程可能本身就沒辦法去再執行

3146
01:36:49,000 --> 01:36:52,000
HTPS 了不然它就會產生一個循環

3147
01:36:52,000 --> 01:36:54,000
所以我覺得最後結果肯定就是它整個機制

3148
01:36:54,000 --> 01:36:56,000
可能都完全給顛覆掉

3149
01:36:56,000 --> 01:36:59,000
然後重新重新一套專門位檢測 Apple 證書的那一套體系

3150
01:36:59,000 --> 01:37:03,000
就是既不依賴現有的 HTPS 的證書體系

3151
01:37:03,000 --> 01:37:05,000
但又可以同時保證安全

3152
01:37:05,000 --> 01:37:07,000
對應該是我覺得就是

3153
01:37:07,000 --> 01:37:09,000
這次可以值得專門化經理

3154
01:37:09,000 --> 01:37:11,000
就好好的重新做一套

3155
01:37:11,000 --> 01:37:12,000
而不是就是透過籃

3156
01:37:12,000 --> 01:37:15,000
然後把 HTPS 那邊的東西拿過來就解用

3157
01:37:15,000 --> 01:37:16,000
那它其實如果

3158
01:37:16,000 --> 01:37:18,000
因為我們知道它蘋果那個

3159
01:37:18,000 --> 01:37:19,000
都是有自帶證書

3160
01:37:19,000 --> 01:37:22,000
它即使用 Root 證書給所有的設備

3161
01:37:22,000 --> 01:37:24,000
簽發一個蘋果專用的證書

3162
01:37:24,000 --> 01:37:26,000
然後用這個證書去簽名

3163
01:37:26,000 --> 01:37:29,000
HTPS 那個 OCSP 的請求

3164
01:37:29,000 --> 01:37:31,000
然後再發給 JAMI 的時候再發給蘋果

3165
01:37:31,000 --> 01:37:31,000
也是可以的嘛

3166
01:37:31,000 --> 01:37:33,000
就這個還是比較簡單的

3167
01:37:33,000 --> 01:37:34,000
對是的

3168
01:37:34,000 --> 01:37:36,000
就是這樣這種改動其實很簡單

3169
01:37:36,000 --> 01:37:37,000
就是改兩下就是改好了

3170
01:37:37,000 --> 01:37:38,000
但是如果要改的話

3171
01:37:38,000 --> 01:37:40,000
那乾脆從頭再來是不是

3172
01:37:40,000 --> 01:37:43,000
就把所有這些事情都考慮清楚嘛

3173
01:37:43,000 --> 01:37:44,000
因為現在的話

3174
01:37:44,000 --> 01:37:45,000
我們可能有隱私問題

3175
01:37:45,000 --> 01:37:47,000
還有就是賭色問題

3176
01:37:47,000 --> 01:37:48,000
那個隱私問題

3177
01:37:48,000 --> 01:37:49,000
倒是其實確實混淆一下

3178
01:37:49,000 --> 01:37:51,000
怎麼樣一下的話就能夠解決了

3179
01:37:51,000 --> 01:37:53,000
那賭色問題要解決的話

3180
01:37:53,000 --> 01:37:54,000
就逸步嘛

3181
01:37:54,000 --> 01:37:54,000
對逸步

3182
01:37:54,000 --> 01:37:56,000
我在考慮逸步的話

3183
01:37:56,000 --> 01:37:57,000
可能沒那麼簡單

3184
01:37:57,000 --> 01:37:59,000
那逸步第一次啟動的話

3185
01:37:59,000 --> 01:38:00,000
必須得是同步的

3186
01:38:00,000 --> 01:38:00,000
要不然的話

3187
01:38:00,000 --> 01:38:02,000
一個惡意軟件它已經起來了

3188
01:38:02,000 --> 01:38:03,000
它該幹的壞事都幹完了

3189
01:38:03,000 --> 01:38:05,000
你現在逸步結果來了

3190
01:38:05,000 --> 01:38:06,000
再把它吊銷

3191
01:38:06,000 --> 01:38:08,000
你這個已經趕不上這個時間了

3192
01:38:08,000 --> 01:38:09,000
這個是一個問題

3193
01:38:09,000 --> 01:38:10,000
就是你要不要阻止

3194
01:38:10,000 --> 01:38:12,000
或者說你要多大程度上去阻止

3195
01:38:12,000 --> 01:38:14,000
第一個那個程序

3196
01:38:14,000 --> 01:38:15,000
或者說

3197
01:38:15,000 --> 01:38:16,000
其實你想本來這個 OCSP

3198
01:38:16,000 --> 01:38:18,000
就是一個智候的解決方案

3199
01:38:18,000 --> 01:38:19,000
不管是你說你

3200
01:38:19,000 --> 01:38:20,000
你及時去查詢

3201
01:38:20,000 --> 01:38:21,000
它也是一個智候的方案

3202
01:38:21,000 --> 01:38:22,000
因為你始終是要等到

3203
01:38:22,000 --> 01:38:24,000
你發現這個程序

3204
01:38:24,000 --> 01:38:25,000
它是惡意軟件之後

3205
01:38:25,000 --> 01:38:28,000
你再才能夠去吊銷這個它的證書

3206
01:38:28,000 --> 01:38:29,000
然後再通過 OCSP

3207
01:38:29,000 --> 01:38:30,000
發佈出去這個東西嘛

3208
01:38:30,000 --> 01:38:31,000
所以我覺得你去

3209
01:38:31,000 --> 01:38:32,000
這個時候你就追求所謂的

3210
01:38:32,000 --> 01:38:33,000
這個即時性

3211
01:38:33,000 --> 01:38:34,000
其實好像意義不是特別大

3212
01:38:34,000 --> 01:38:35,000
對沒錯

3213
01:38:35,000 --> 01:38:36,000
是的

3214
01:38:36,000 --> 01:38:38,000
而且現在其實在 10.15

3215
01:38:38,000 --> 01:38:39,000
還是 14.14 開始

3216
01:38:39,000 --> 01:38:41,000
已經又扎了新的一層

3217
01:38:41,000 --> 01:38:42,000
那個 Northern Nation

3218
01:38:42,000 --> 01:38:43,000
那個公正的一個機制

3219
01:38:43,000 --> 01:38:46,000
那個和這個證書又是獨立的

3220
01:38:46,000 --> 01:38:48,000
這個機制跟 OCSP 還不一樣嗎

3221
01:38:48,000 --> 01:38:49,000
你這個我一直沒有搞明白

3222
01:38:49,000 --> 01:38:51,000
這順便可以解釋一下

3223
01:38:51,000 --> 01:38:52,000
這個證書的這個機制的話

3224
01:38:52,000 --> 01:38:54,000
是持續存在的

3225
01:38:54,000 --> 01:38:55,000
就是這個每次

3226
01:38:55,000 --> 01:38:57,000
用那個超雄啟動那個程序的話

3227
01:38:57,000 --> 01:38:59,000
就很像或者是隔一段時間

3228
01:38:59,000 --> 01:39:00,000
都會要去檢查

3229
01:39:00,000 --> 01:39:01,000
這個證書是不是有效

3230
01:39:01,000 --> 01:39:01,000
然後從事出發

3231
01:39:01,000 --> 01:39:03,000
OCSP 可以動態率掉下

3232
01:39:03,000 --> 01:39:05,000
那個的話只在入口檢查

3233
01:39:05,000 --> 01:39:08,000
而且那個是針對每一個應用包

3234
01:39:08,000 --> 01:39:09,000
就是我每一次開發者

3235
01:39:09,000 --> 01:39:10,000
發佈一個包

3236
01:39:10,000 --> 01:39:12,000
都需要把那個包丟到

3237
01:39:12,000 --> 01:39:13,000
蘋果的服務區上去

3238
01:39:13,000 --> 01:39:14,000
先做一次

3239
01:39:14,000 --> 01:39:16,000
還有使用和各種安全性的檢查

3240
01:39:16,000 --> 01:39:18,000
然後它生成一個有效的一個簽名

3241
01:39:18,000 --> 01:39:19,000
可以叫做 TKT

3242
01:39:19,000 --> 01:39:22,000
然後拿給我附在應用包裡面

3243
01:39:22,000 --> 01:39:23,000
然後下發給用戶

3244
01:39:23,000 --> 01:39:25,000
然後用戶打開這個應用包的時候

3245
01:39:25,000 --> 01:39:27,000
會檢查這個 TKT 是否是有效的

3246
01:39:27,000 --> 01:39:30,000
一種是本地的靜態檢查

3247
01:39:30,000 --> 01:39:31,000
同時也向服務器會檢查

3248
01:39:31,000 --> 01:39:33,000
這個 TKT 是否是有效的

3249
01:39:33,000 --> 01:39:34,000
然後如果是有效的話

3250
01:39:34,000 --> 01:39:35,000
才允許運行

3251
01:39:35,000 --> 01:39:36,000
對你說的那個就是

3252
01:39:36,000 --> 01:39:38,000
這個 Notarization 那個服務

3253
01:39:38,000 --> 01:39:38,000
對吧

3254
01:39:38,000 --> 01:39:39,000
就它這個過程是做這件事情

3255
01:39:39,000 --> 01:39:40,000
對

3256
01:39:40,000 --> 01:39:41,000
就它其實兩個層面的東西

3257
01:39:41,000 --> 01:39:43,000
譬如說 OCSP 檢查的是證書

3258
01:39:43,000 --> 01:39:45,000
但是這個證書是簽發給

3259
01:39:45,000 --> 01:39:46,000
某一個開發者帳號的

3260
01:39:46,000 --> 01:39:47,000
然後這個開發者帳號

3261
01:39:47,000 --> 01:39:48,000
可以開發很多個 APP 出來

3262
01:39:48,000 --> 01:39:50,000
然後它所有的檢查都是檢查

3263
01:39:50,000 --> 01:39:52,000
這個證書會怎麼樣

3264
01:39:52,000 --> 01:39:55,000
但是 Notarization 是針對於

3265
01:39:55,000 --> 01:39:58,000
這個開發者開發的單個應用程序而言的

3266
01:39:58,000 --> 01:39:59,000
單個二定制

3267
01:39:59,000 --> 01:40:02,000
每個二定制都需要單獨的取存引證

3268
01:40:02,000 --> 01:40:03,000
我也在思考這兩種方式

3269
01:40:03,000 --> 01:40:05,000
它到底是為什麼要搞這麼一種

3270
01:40:05,000 --> 01:40:07,000
搞這麼一場

3271
01:40:07,000 --> 01:40:10,000
它設計這兩個機制的用意

3272
01:40:10,000 --> 01:40:12,000
或者 Notarization 主要解決什麼樣的問題

3273
01:40:12,000 --> 01:40:14,000
譬如說是檢查這個惡意軟件

3274
01:40:14,000 --> 01:40:16,000
我想的話可能有這麼幾個優勢吧

3275
01:40:16,000 --> 01:40:17,000
一是這樣的話

3276
01:40:17,000 --> 01:40:18,000
你每次提交的時候

3277
01:40:18,000 --> 01:40:20,000
它其實現在是有個要求的

3278
01:40:20,000 --> 01:40:22,000
就是你要滿足以下的一些

3279
01:40:22,000 --> 01:40:24,000
新的一些系統的安全特性

3280
01:40:24,000 --> 01:40:26,000
這個安全特性的話

3281
01:40:26,000 --> 01:40:27,000
隨著時間的推進

3282
01:40:27,000 --> 01:40:28,000
它的要求會變得越來越嚴格

3283
01:40:28,000 --> 01:40:30,000
然後比如說像現在的一些

3284
01:40:30,000 --> 01:40:33,000
哈頓的一些 Round Time 的一些各種限制

3285
01:40:33,000 --> 01:40:36,000
你必須得啟動了這些安全保護之後

3286
01:40:36,000 --> 01:40:37,000
你才給你發這個

3287
01:40:37,000 --> 01:40:39,000
才給你通過這麼一個公認

3288
01:40:39,000 --> 01:40:43,000
然後所以說它會能夠主動的去控制

3289
01:40:43,000 --> 01:40:44,000
去編測開發者

3290
01:40:44,000 --> 01:40:46,000
你趕快把這些新的安全特性都給我做啥

3291
01:40:46,000 --> 01:40:47,000
要不然的話

3292
01:40:47,000 --> 01:40:50,000
你就別大家就用起來會很麻煩

3293
01:40:50,000 --> 01:40:51,000
然後另外一方面的話

3294
01:40:51,000 --> 01:40:53,000
就是可能會考慮到

3295
01:40:53,000 --> 01:40:55,000
有些開發者他偶然發了一個版本

3296
01:40:55,000 --> 01:40:57,000
那個版本是帶有惡意軟件的

3297
01:40:57,000 --> 01:41:00,000
或者是他有什麼樣嚴重漏洞的

3298
01:41:00,000 --> 01:41:01,000
不用把證書的殺掉

3299
01:41:01,000 --> 01:41:03,000
只用乾掉那個版本就可以了

3300
01:41:03,000 --> 01:41:04,000
你把證書一殺掉

3301
01:41:04,000 --> 01:41:06,000
這個可能影響的效果

3302
01:41:06,000 --> 01:41:07,000
那個可能威力太大了

3303
01:41:07,000 --> 01:41:08,000
比如說 Google

3304
01:41:08,000 --> 01:41:09,000
假如說 Kurum 的某個版本

3305
01:41:09,000 --> 01:41:11,000
帶來不想原帶來個惡意包

3306
01:41:11,000 --> 01:41:12,000
你這把 Google 的證書一殺

3307
01:41:12,000 --> 01:41:13,000
這個感覺

3308
01:41:13,000 --> 01:41:14,000
這個互聯網可能都會殺了

3309
01:41:14,000 --> 01:41:17,000
公證是解決就是說是那種

3310
01:41:17,000 --> 01:41:19,000
不是開發者主觀故意

3311
01:41:19,000 --> 01:41:20,000
而是因為疏忽

3312
01:41:20,000 --> 01:41:22,000
或者是因為一些什麼原因

3313
01:41:22,000 --> 01:41:23,000
別的原因導致說

3314
01:41:23,000 --> 01:41:25,000
它某一個版本的 APP 有問題

3315
01:41:25,000 --> 01:41:28,000
但是整個開發者證書還是安全的

3316
01:41:28,000 --> 01:41:29,000
對

3317
01:41:29,000 --> 01:41:31,000
我覺得應該是這樣

3318
01:41:31,000 --> 01:41:33,000
我理解就是 Notiristic

3319
01:41:33,000 --> 01:41:34,000
它還有一個作用就是說

3320
01:41:34,000 --> 01:41:35,000
因為我們知道

3321
01:41:35,000 --> 01:41:37,000
並不是所有的

3322
01:41:37,000 --> 01:41:38,000
Mac 上面的用程序

3323
01:41:38,000 --> 01:41:40,000
都是通過 Mac App Store 發發

3324
01:41:40,000 --> 01:41:41,000
其實我們用的大部分

3325
01:41:41,000 --> 01:41:42,000
就是第三方的軟件

3326
01:41:42,000 --> 01:41:46,000
都不是通過 Mac App Store 發布的

3327
01:41:46,000 --> 01:41:50,000
所以蘋果是不知道你的 APP 到底有

3328
01:41:50,000 --> 01:41:51,000
它沒有機會知道

3329
01:41:51,000 --> 01:41:53,000
你下載的這個第三方 APP

3330
01:41:53,000 --> 01:41:54,000
到底有沒有包含惡意程序

3331
01:41:54,000 --> 01:41:55,000
就是說哪怕它知道

3332
01:41:55,000 --> 01:41:56,000
它也沒法去對比

3333
01:41:56,000 --> 01:41:57,000
因為它不知道你電腦裝了什麼東西

3334
01:41:58,000 --> 01:42:01,000
那麼通過 Notirization 這個公證的機制

3335
01:42:01,000 --> 01:42:03,000
它其實是強迫開發者

3336
01:42:03,000 --> 01:42:05,000
必須上傳一份到它那裡去流打

3337
01:42:06,000 --> 01:42:08,000
然後它發現惡意版本之後

3338
01:42:08,000 --> 01:42:11,000
它可以直接從它的庫裡面去比對說

3339
01:42:11,000 --> 01:42:13,000
這個版本是否在我這裡公證過

3340
01:42:13,000 --> 01:42:14,000
如果被公證過

3341
01:42:14,000 --> 01:42:16,000
它就有可能被分發到其他地方去

3342
01:42:16,000 --> 01:42:19,000
我可以通過這個公證書後的那個時候

3343
01:42:19,000 --> 01:42:21,000
Ticket 來查到說

3344
01:42:21,000 --> 01:42:22,000
它在哪些 Mac 上用過

3345
01:42:22,000 --> 01:42:26,000
我可以去估算安全問題的影響範圍嗎

3346
01:42:26,000 --> 01:42:27,000
沒錯

3347
01:42:27,000 --> 01:42:29,000
甚至我也可以直接去拿到這一份之後

3348
01:42:29,000 --> 01:42:31,000
我好去分析它的代碼

3349
01:42:31,000 --> 01:42:34,000
它到底是干了什麼樣的一些壞事

3350
01:42:34,000 --> 01:42:37,000
所以是通過這個機制解決了 Mac App Store

3351
01:42:37,000 --> 01:42:39,000
就是應用商店提供的一種安全特性

3352
01:42:39,000 --> 01:42:41,000
但是又不需要強制

3353
01:42:41,000 --> 01:42:43,000
大家都必須通過這個應用商店

3354
01:42:43,000 --> 01:42:44,000
去發發程序

3355
01:42:44,000 --> 01:42:45,000
對 沒錯

3356
01:42:45,000 --> 01:42:47,000
目前這兩重機制上

3357
01:42:47,000 --> 01:42:49,000
一個是在用戶開發者帳號層面

3358
01:42:49,000 --> 01:42:51,000
一個是在每個單元的層面

3359
01:42:51,000 --> 01:42:52,000
雙重保護機制

3360
01:42:52,000 --> 01:42:53,000
這個都是屬於這個叫什麼

3361
01:42:53,000 --> 01:42:55,000
Gatekeeper 那個要管的事情

3362
01:42:55,000 --> 01:42:56,000
就這個來看

3363
01:42:56,000 --> 01:42:59,000
目前 Mac 上面的整個安全性

3364
01:42:59,000 --> 01:43:01,000
還是比較有保障的

3365
01:43:01,000 --> 01:43:03,000
因為這個事情我印象特別深刻

3366
01:43:03,000 --> 01:43:07,000
你知道在中國你要用網銀

3367
01:43:07,000 --> 01:43:09,000
現在就說消費手段基本上都是用手機銀行

3368
01:43:09,000 --> 01:43:10,000
沒有太大的問題

3369
01:43:10,000 --> 01:43:12,000
都會通過 App Store

3370
01:43:12,000 --> 01:43:13,000
你只要不做業喻

3371
01:43:13,000 --> 01:43:15,000
不做什麼事情

3372
01:43:15,000 --> 01:43:17,000
都還是能夠保證你的安全的

3373
01:43:17,000 --> 01:43:19,000
但是在企業銀行

3374
01:43:19,000 --> 01:43:22,000
你還是要用 Windows 的程序

3375
01:43:22,000 --> 01:43:25,000
然後去下銀行的客戶端

3376
01:43:26,000 --> 01:43:27,000
然後非常搞笑的就是

3377
01:43:27,000 --> 01:43:29,000
那些客戶端的安裝程序

3378
01:43:29,000 --> 01:43:29,000
我看了一下

3379
01:43:29,000 --> 01:43:33,000
1689 是通過 HGP 新聞文去傳輸的

3380
01:43:33,000 --> 01:43:34,000
而且他下回來的那個東西

3381
01:43:34,000 --> 01:43:37,000
他 Windows 上也是有簽名的機制的

3382
01:43:37,000 --> 01:43:37,000
對吧

3383
01:43:37,000 --> 01:43:39,000
但是你看他都是未知開發者

3384
01:43:39,000 --> 01:43:42,000
就感覺這些安全素養

3385
01:43:42,000 --> 01:43:45,000
還是有一個需要極大的提高的各個方面

3386
01:43:45,000 --> 01:43:48,000
安全素養實際上是需要廠商來倒逼的

3387
01:43:48,000 --> 01:43:52,000
我覺得在倒逼開發者做到比較安全的點上

3388
01:43:52,000 --> 01:43:55,000
蘋果實際上是業界先鋒

3389
01:43:55,000 --> 01:43:55,000
沒錯

3390
01:43:55,000 --> 01:43:57,000
蘋果特別能低開發者

3391
01:43:57,000 --> 01:43:58,000
無論你不可能說

3392
01:43:58,000 --> 01:44:01,000
我們下一個 Windows 10 的什麼模型版本更新

3393
01:44:01,000 --> 01:44:03,000
然後強勢加一個安全學項

3394
01:44:03,000 --> 01:44:06,000
默認你如果是未知開發者

3395
01:44:06,000 --> 01:44:07,000
就沒有通過簽名的

3396
01:44:07,000 --> 01:44:08,000
我根本就不給你運行

3397
01:44:08,000 --> 01:44:10,000
他根本就不敢加這種選項對不對

3398
01:44:10,000 --> 01:44:11,000
地球就炸了

3399
01:44:11,000 --> 01:44:14,000
這種事業只有蘋果現在能夠推得動

3400
01:44:14,000 --> 01:44:16,000
其他人好像不敢

3401
01:44:16,000 --> 01:44:17,000
對

3402
01:44:17,000 --> 01:44:17,000
就是說這個安全性上

3403
01:44:17,000 --> 01:44:20,000
我覺得還是有比較好的保障的

3404
01:44:20,000 --> 01:44:21,000
只是說在實現世界上

3405
01:44:21,000 --> 01:44:23,000
我覺得確實還有很多

3406
01:44:23,000 --> 01:44:24,000
剛剛我們討論的

3407
01:44:24,000 --> 01:44:27,000
很多比較簡單的就可以改進的空間

3408
01:44:27,000 --> 01:44:29,000
其實還是可以更好的

3409
01:44:29,000 --> 01:44:32,000
避免出現我們今天討論的各種問題

3410
01:44:32,000 --> 01:44:33,000
對

3411
01:44:33,000 --> 01:44:34,000
但其實這個討論的話

3412
01:44:34,000 --> 01:44:35,000
我會回到兩個方面

3413
01:44:35,000 --> 01:44:36,000
一個方面的話

3414
01:44:36,000 --> 01:44:38,000
就是剛剛我們說的隱私問題

3415
01:44:38,000 --> 01:44:39,000
另外一個方面

3416
01:44:39,000 --> 01:44:40,000
他們大家會有一種感覺

3417
01:44:40,000 --> 01:44:43,000
就是山裡最早一篇文章的標題

3418
01:44:43,000 --> 01:44:45,000
Your computer isn't yours

3419
01:44:45,000 --> 01:44:47,000
你的電腦不是你的

3420
01:44:47,000 --> 01:44:47,000
那我就是

3421
01:44:47,000 --> 01:44:50,000
我是否是我這個用戶上市了

3422
01:44:50,000 --> 01:44:51,000
我對我的設備完全的控制權

3423
01:44:51,000 --> 01:44:52,000
這麼一件事情

3424
01:44:52,000 --> 01:44:53,000
技術經營這個圈子那邊

3425
01:44:53,000 --> 01:44:55,000
我說你或者說我們就是說

3426
01:44:55,000 --> 01:44:56,000
你懂安全這個東西

3427
01:44:56,000 --> 01:44:57,000
你知道怎麼回事

3428
01:44:57,000 --> 01:45:00,000
你會覺得我不應該把這些信息

3429
01:45:00,000 --> 01:45:01,000
都洩露給蘋果

3430
01:45:01,000 --> 01:45:02,000
但是其實從我覺得

3431
01:45:02,000 --> 01:45:04,000
其實從普通人的角度來講

3432
01:45:04,000 --> 01:45:05,000
普通人是沒有能力

3433
01:45:05,000 --> 01:45:06,000
去分辨這些細節的

3434
01:45:06,000 --> 01:45:09,000
必須要有一個了解這個事情的廠商

3435
01:45:09,000 --> 01:45:11,000
他信得過的廠商去完成這個事情

3436
01:45:11,000 --> 01:45:12,000
這個如果這個世界上

3437
01:45:12,000 --> 01:45:15,000
還有什麼大企業可以讓你相信的話

3438
01:45:15,000 --> 01:45:16,000
可能蘋果上面屬於

3439
01:45:16,000 --> 01:45:19,000
那個屈指可數的幾個之一吧

3440
01:45:19,000 --> 01:45:20,000
應該是

3441
01:45:20,000 --> 01:45:22,000
這有話是非常深刻的一個國粉

3442
01:45:22,000 --> 01:45:26,000
只有最骨子裡的國粉才會說

3443
01:45:27,000 --> 01:45:29,000
其實就是從普通人心裡

3444
01:45:29,000 --> 01:45:31,000
也可能還是能理解的

3445
01:45:31,000 --> 01:45:32,000
就是我買了一台電腦

3446
01:45:32,000 --> 01:45:32,000
這是我的電腦

3447
01:45:32,000 --> 01:45:33,000
我想運行什麼程序

3448
01:45:33,000 --> 01:45:35,000
你蘋果憑什麼有權限插手

3449
01:45:35,000 --> 01:45:36,000
說你不讓我運行它

3450
01:45:36,000 --> 01:45:38,000
可以理解這種心理

3451
01:45:38,000 --> 01:45:40,000
當然我不認同這樣的說法

3452
01:45:40,000 --> 01:45:43,000
但是我從一個魔鬼代言人的角度來說

3453
01:45:43,000 --> 01:45:43,000
我要反駁的話

3454
01:45:43,000 --> 01:45:45,000
我說那你實際上

3455
01:45:45,000 --> 01:45:46,000
你開的車也是一樣的

3456
01:45:46,000 --> 01:45:49,000
雖然你的車不能左右你

3457
01:45:49,000 --> 01:45:50,000
能去哪

3458
01:45:50,000 --> 01:45:51,000
不能去哪

3459
01:45:51,000 --> 01:45:53,000
但是像你的車買回來的時候

3460
01:45:53,000 --> 01:45:54,000
你自己也是修不了的

3461
01:45:55,000 --> 01:45:58,000
比如說你可能能換一些內飾

3462
01:45:58,000 --> 01:45:59,000
但 That's it

3463
01:46:01,000 --> 01:46:02,000
現在包括很多 4 S 電腦

3464
01:46:02,000 --> 01:46:04,000
都是修不了你的車的

3465
01:46:04,000 --> 01:46:05,000
改車是違法的

3466
01:46:05,000 --> 01:46:06,000
這時候我是不能上路的

3467
01:46:07,000 --> 01:46:08,000
對是的

3468
01:46:09,000 --> 01:46:10,000
這個法規的倒在其次

3469
01:46:10,000 --> 01:46:11,000
這很多 4 S 電腦

3470
01:46:11,000 --> 01:46:13,000
實際上也是修不了你的車的

3471
01:46:13,000 --> 01:46:14,000
比如說現在奧迪

3472
01:46:14,000 --> 01:46:16,000
或者是寶馬車來的車

3473
01:46:16,000 --> 01:46:17,000
你到 4 S 電腦

3474
01:46:17,000 --> 01:46:18,000
你說我的車有什麼問題

3475
01:46:18,000 --> 01:46:19,000
它往你側下

3476
01:46:19,000 --> 01:46:21,000
它能做的就是把你換那個零件

3477
01:46:21,000 --> 01:46:22,000
寄回去

3478
01:46:22,000 --> 01:46:23,000
然後換一個新的過來

3479
01:46:24,000 --> 01:46:27,000
它已經失去了能夠幫你維修車輛的

3480
01:46:27,000 --> 01:46:28,000
這樣一個作用了

3481
01:46:28,000 --> 01:46:33,000
我覺得這本質上是一個權利和責任的

3482
01:46:33,000 --> 01:46:34,000
一個分攤的問題

3483
01:46:34,000 --> 01:46:35,000
就是說沒錯

3484
01:46:35,000 --> 01:46:36,000
如果從絕對的說

3485
01:46:36,000 --> 01:46:37,000
我要有自主權的情況下

3486
01:46:37,000 --> 01:46:38,000
美國不知也得講什麼

3487
01:46:38,000 --> 01:46:41,000
叫做 Right to Repair

3488
01:46:41,000 --> 01:46:43,000
好像是那些美國農民都不要強勢

3489
01:46:43,000 --> 01:46:45,000
他要買什麼高級的拖拉機

3490
01:46:45,000 --> 01:46:45,000
他換了

3491
01:46:45,000 --> 01:46:46,000
他要修對吧

3492
01:46:46,000 --> 01:46:49,000
他說拖拉機要送去 John Deere

3493
01:46:49,000 --> 01:46:50,000
原廠再修再給他發回來

3494
01:46:51,000 --> 01:46:52,000
這個作物就爛在地裡了

3495
01:46:52,000 --> 01:46:54,000
這個明顯是不可以接受的嘛

3496
01:46:54,000 --> 01:46:54,000
對吧

3497
01:46:54,000 --> 01:46:56,000
這個我覺得完全是可以理解的

3498
01:46:56,000 --> 01:46:58,000
但是其實像你說像那種

3499
01:46:58,000 --> 01:46:58,000
對普通來說

3500
01:46:58,000 --> 01:46:59,000
你說一個電腦

3501
01:46:59,000 --> 01:47:02,000
或者說一個手機對吧

3502
01:47:02,000 --> 01:47:03,000
你就如果突然不能用的話

3503
01:47:03,000 --> 01:47:07,000
你對你來說好像也沒有那麼大的一個損失

3504
01:47:07,000 --> 01:47:08,000
但是更主要的就是說

3505
01:47:08,000 --> 01:47:11,000
如果廠商說允許開放很多接口

3506
01:47:11,000 --> 01:47:12,000
讓你去做一些底層的修改

3507
01:47:12,000 --> 01:47:13,000
或者馬八香蘋果這次

3508
01:47:13,000 --> 01:47:15,000
他說給到一個選項

3509
01:47:15,000 --> 01:47:16,000
可以讓你 opetal

3510
01:47:16,000 --> 01:47:18,000
可以放棄這些安全保護

3511
01:47:18,000 --> 01:47:19,000
但最終你被黑了

3512
01:47:19,000 --> 01:47:21,000
你的資產被到了

3513
01:47:21,000 --> 01:47:22,000
或者說假設你錢裡面

3514
01:47:22,000 --> 01:47:23,000
有一千個比特幣假

3515
01:47:23,000 --> 01:47:25,000
隨便確立到

3516
01:47:25,000 --> 01:47:26,000
然後你就把安全牆關掉

3517
01:47:26,000 --> 01:47:28,000
然後你說你比特幣偷偷你怪誰呢

3518
01:47:28,000 --> 01:47:29,000
你還是會去蓋蘋果對不對

3519
01:47:29,000 --> 01:47:32,000
你說你這個安全做的怎麼這麼早

3520
01:47:32,000 --> 01:47:33,000
那這個時候就明顯就是說

3521
01:47:33,000 --> 01:47:35,000
你的權利和責任是沒有對等的嘛

3522
01:47:35,000 --> 01:47:37,000
對於絕大多數這種

3523
01:47:37,000 --> 01:47:38,000
不是那麼懂技術的

3524
01:47:38,000 --> 01:47:40,000
也不知道那些安全措施

3525
01:47:40,000 --> 01:47:42,000
應該如何去日常見行的

3526
01:47:42,000 --> 01:47:44,000
哪怕是說對於我們這種懂行的人

3527
01:47:44,000 --> 01:47:46,000
你每天要去想各種各樣的安全措施

3528
01:47:46,000 --> 01:47:47,000
各種各樣的犧牲

3529
01:47:47,000 --> 01:47:48,000
各種各樣的便利性

3530
01:47:48,000 --> 01:47:49,000
你也很心累嘛

3531
01:47:49,000 --> 01:47:51,000
就是我覺得從日常水來講

3532
01:47:51,000 --> 01:47:53,000
你還是我願意放棄一些

3533
01:47:53,000 --> 01:47:55,000
所謂的我自己的一些權利

3534
01:47:55,000 --> 01:47:58,000
去換取說有人去幫我 take care

3535
01:47:58,000 --> 01:47:59,000
有人把這個事情給我搞定

3536
01:47:59,000 --> 01:48:03,000
我甚至願意為此付出更高的價格

3537
01:48:03,000 --> 01:48:03,000
對嗎

3538
01:48:03,000 --> 01:48:05,000
這個就是意價的地方在這裡

3539
01:48:05,000 --> 01:48:06,000
那為什麼我現在不想去用安卓

3540
01:48:06,000 --> 01:48:07,000
不想用 Windows

3541
01:48:07,000 --> 01:48:09,000
你說安卓不好用嗎

3542
01:48:09,000 --> 01:48:09,000
其實也不是

3543
01:48:09,000 --> 01:48:11,000
安卓做得挺好的對不對

3544
01:48:11,000 --> 01:48:13,000
Windows 也跑得很流暢

3545
01:48:13,000 --> 01:48:13,000
都沒有問題

3546
01:48:13,000 --> 01:48:15,000
但我還是不想用

3547
01:48:15,000 --> 01:48:15,000
就是因為我覺得

3548
01:48:15,000 --> 01:48:18,000
沒有人去幫我盯著這一塊嘛

3549
01:48:18,000 --> 01:48:18,000
對

3550
01:48:18,000 --> 01:48:20,000
所以我覺得還是要一些成年人的想法

3551
01:48:21,000 --> 01:48:22,000
就是你的權利和責任

3552
01:48:22,000 --> 01:48:23,000
實際上是對等的

3553
01:48:23,000 --> 01:48:23,000
對

3554
01:48:23,000 --> 01:48:24,000
是的

3555
01:48:24,000 --> 01:48:25,000
而且我覺得還有個底線

3556
01:48:25,000 --> 01:48:27,000
就是如果你真的覺得

3557
01:48:27,000 --> 01:48:28,000
你要是你的

3558
01:48:28,000 --> 01:48:30,000
其實你現在也是有辦法的

3559
01:48:30,000 --> 01:48:31,000
雖然麻煩一點

3560
01:48:31,000 --> 01:48:32,000
進恢復模式把 SIP 關了

3561
01:48:32,000 --> 01:48:33,000
把各種東西改了

3562
01:48:33,000 --> 01:48:35,000
也能夠繞過這個限制

3563
01:48:35,000 --> 01:48:36,000
裸奔去的

3564
01:48:36,000 --> 01:48:38,000
對你也是能夠

3565
01:48:38,000 --> 01:48:38,000
甚至不行

3566
01:48:38,000 --> 01:48:39,000
你把 Mac OS 3 了是吧

3567
01:48:39,000 --> 01:48:40,000
你裝個 Windows

3568
01:48:40,000 --> 01:48:41,000
那也是你的 MacBook

3569
01:48:41,000 --> 01:48:42,000
也能用

3570
01:48:42,000 --> 01:48:43,000
就不要買 Mac

3571
01:48:43,000 --> 01:48:45,000
跑到裝個零的

3572
01:48:45,000 --> 01:48:46,000
就是買個 PC 多好

3573
01:48:46,000 --> 01:48:47,000
又便宜又好用

3574
01:48:47,000 --> 01:48:48,000
對

3575
01:48:48,000 --> 01:48:49,000
對那篇文章的一個論點

3576
01:48:49,000 --> 01:48:51,000
就是你在 M 1

3577
01:48:51,000 --> 01:48:52,000
Mac 出來之前

3578
01:48:52,000 --> 01:48:53,000
你是可以選擇

3579
01:48:53,000 --> 01:48:54,000
比如說我裝個 Linux

3580
01:48:54,000 --> 01:48:55,000
我裝 Wubuntu

3581
01:48:55,000 --> 01:48:55,000
都是可以的對吧

3582
01:48:55,000 --> 01:48:56,000
這個硬件上面

3583
01:48:56,000 --> 01:48:57,000
我裝什麼操作器

3584
01:48:57,000 --> 01:48:58,000
我是完全 OK 的

3585
01:48:58,000 --> 01:48:59,000
但是從 M 1 Mac 之後

3586
01:48:59,000 --> 01:49:01,000
你除了裝 Mac OS 之外

3587
01:49:01,000 --> 01:49:02,000
沒有辦法裝名了

3588
01:49:02,000 --> 01:49:03,000
但你可以不用買 Mac

3589
01:49:03,000 --> 01:49:05,000
沒有人逼著你買 Mac 嘛

3590
01:49:05,000 --> 01:49:05,000
對不對

3591
01:49:05,000 --> 01:49:06,000
所以這個也很扯

3592
01:49:06,000 --> 01:49:07,000
對

3593
01:49:07,000 --> 01:49:07,000
是

3594
01:49:07,000 --> 01:49:09,000
而且現在好像據說

3595
01:49:09,000 --> 01:49:10,000
蘋果也在考慮

3596
01:49:10,000 --> 01:49:13,000
正在和開放出來 M 1 的設備

3597
01:49:13,000 --> 01:49:14,000
也能裝起來操作系統

3598
01:49:14,000 --> 01:49:15,000
但是這可能就是一個

3599
01:49:15,000 --> 01:49:16,000
比較大的工程

3600
01:49:16,000 --> 01:49:17,000
不問題是誰

3601
01:49:17,000 --> 01:49:17,000
誰會去試配呢

3602
01:49:17,000 --> 01:49:18,000
會不會軟嗎

3603
01:49:18,000 --> 01:49:21,000
不然把 Windows ARM 移植過來

3604
01:49:21,000 --> 01:49:24,000
我覺得 Linux 一定會出一個

3605
01:49:24,000 --> 01:49:26,000
I mean 或者說 Apple Silicon 的版本

3606
01:49:26,000 --> 01:49:28,000
我覺得烏冉也不是沒有可能

3607
01:49:28,000 --> 01:49:29,000
現在烏冉不是蘋果的

3608
01:49:29,000 --> 01:49:31,000
最佳合作夥伴開發者了

3609
01:49:31,000 --> 01:49:34,000
如果它現在是它的 Arm

3610
01:49:34,000 --> 01:49:36,000
一生態是依賴高通

3611
01:49:36,000 --> 01:49:37,000
高通不是出了

3612
01:49:37,000 --> 01:49:38,000
它最近是發了一個什麼來的

3613
01:49:38,000 --> 01:49:40,000
X 吧還是 ProX

3614
01:49:40,000 --> 01:49:42,000
就是 ServiceBook 還是 Service

3615
01:49:42,000 --> 01:49:43,000
JustService

3616
01:49:43,000 --> 01:49:44,000
就是也是一個

3617
01:49:44,000 --> 01:49:46,000
它對烏冉自己那套

3618
01:49:47,000 --> 01:49:49,000
兩用的變遷電腦

3619
01:49:49,000 --> 01:49:52,000
它就好像用的是高通的處理器

3620
01:49:52,000 --> 01:49:53,000
但是你看現在蘋果

3621
01:49:53,000 --> 01:49:56,000
如果能夠把其他廠商打成這樣的話

3622
01:49:56,000 --> 01:49:58,000
那未然之後會不會也覺得

3623
01:49:58,000 --> 01:49:59,000
乾脆硬件上我就硬了

3624
01:49:59,000 --> 01:50:03,000
也包括我也來加組蘋果的 Arm 生態

3625
01:50:03,000 --> 01:50:05,000
對反正我又不靠賣硬件賺錢

3626
01:50:05,000 --> 01:50:06,000
對吧我就賣廟軟件

3627
01:50:06,000 --> 01:50:09,000
然後如果我能夠在 M 1 的

3628
01:50:09,000 --> 01:50:11,000
Macsman 跑那何樂而不為呢

3629
01:50:11,000 --> 01:50:12,000
對啊是啊也是有可能的

3630
01:50:13,000 --> 01:50:15,000
這個世界是太 crazy 了

3631
01:50:15,000 --> 01:50:17,000
你十年前你都不敢想像說

3632
01:50:17,000 --> 01:50:20,000
啊這個未然還要去給蘋果

3633
01:50:20,000 --> 01:50:22,000
試配一下系統

3634
01:50:22,000 --> 01:50:23,000
這什麼情況呢

3635
01:50:23,000 --> 01:50:24,000
說到十年前

3636
01:50:24,000 --> 01:50:26,000
這個十年前 Windows guy

3637
01:50:26,000 --> 01:50:27,000
這次又出來了

3638
01:50:27,000 --> 01:50:29,000
在蘋果發布會上

3639
01:50:29,000 --> 01:50:30,000
啊對對

3640
01:50:30,000 --> 01:50:32,000
是那個 PC vs Mac

3641
01:50:32,000 --> 01:50:33,000
那個廣告裡面那個 PC 嗎

3642
01:50:33,000 --> 01:50:36,000
對稍微有點發胖

3643
01:50:36,000 --> 01:50:38,000
但是還是風才不僅當年

3644
01:50:38,000 --> 01:50:39,000
我有讀過一個報導

3645
01:50:39,000 --> 01:50:41,000
就說這個廣告裡面兩個人

3646
01:50:41,000 --> 01:50:43,000
就是這個 Windows guy

3647
01:50:43,000 --> 01:50:47,000
實際上是一個 Mac 的鐵粉

3648
01:50:47,000 --> 01:50:51,000
而 Mac guy 實際上對電腦一竅不通

3649
01:50:51,000 --> 01:50:52,000
可能是個 Windows 用戶對不對

3650
01:50:52,000 --> 01:50:54,000
哈哈哈哈

3651
01:50:54,000 --> 01:50:54,000
對

3652
01:50:54,000 --> 01:50:56,000
這個才是真的國粉啊

3653
01:50:56,000 --> 01:50:59,000
為了願意支持這個

3654
01:50:59,000 --> 01:51:02,000
然後犧牲自己來出演這個壞人

3655
01:51:02,000 --> 01:51:03,000
犧牲自己的形象

3656
01:51:03,000 --> 01:51:05,000
然後換取蘋果的高達

3657
01:51:05,000 --> 01:51:07,000
那也換取了一些美元

3658
01:51:07,000 --> 01:51:09,000
我覺得主要是美元比較像

3659
01:51:09,000 --> 01:51:10,000
那是可能的

3660
01:51:11,000 --> 01:51:13,000
OK

3661
01:51:13,000 --> 01:51:14,000
那好啊

3662
01:51:14,000 --> 01:51:17,000
那今天我們就這個蘋果的 M 1 芯片

3663
01:51:17,000 --> 01:51:19,000
和這個 OSSP 的問題

3664
01:51:19,000 --> 01:51:21,000
展開了這個深入而愉好的討論

3665
01:51:21,000 --> 01:51:22,000
哈哈

3666
01:51:22,000 --> 01:51:26,000
那也非常感謝雅程來我們這個節目做客

3667
01:51:26,000 --> 01:51:27,000
感謝兩位的邀請

3668
01:51:27,000 --> 01:51:28,000
我們這還有機會的話

3669
01:51:28,000 --> 01:51:30,000
雅程也可以傳來我們節目

3670
01:51:30,000 --> 01:51:31,000
再聊聊其他的一些事情

3671
01:51:31,000 --> 01:51:33,000
我們可以比如說聊聊準備開發表

3672
01:51:33,000 --> 01:51:36,000
啊來聊 SRG 啊之類的事情

3673
01:51:36,000 --> 01:51:37,000
行好的

3674
01:51:37,000 --> 01:51:38,000
還是感覺有很多單可以扯的

3675
01:51:38,000 --> 01:51:40,000
對對對

3676
01:51:41,000 --> 01:51:43,000
那好我們今天的節目就先到這裡了

3677
01:51:43,000 --> 01:51:46,000
您剛剛收聽到的節目是內核恐慌

3678
01:51:46,000 --> 01:51:49,000
一檔盡量貼近計算機科技主題的娛樂 Podcast

3679
01:51:49,000 --> 01:51:51,000
我們號稱硬核

3680
01:51:51,000 --> 01:51:52,000
但是也沒有什麼乾貨

3681
01:51:52,000 --> 01:51:54,000
想聽聽不想聽聽別聽

3682
01:51:54,000 --> 01:51:56,000
我們的網址是 PAN.ICU

3683
01:51:56,000 --> 01:51:58,000
您可以在網站上找到

3684
01:51:58,000 --> 01:51:59,000
訂閱我們的節目的方法

3685
01:51:59,000 --> 01:52:01,000
以及聯絡我們節目的方式

3686
01:52:01,000 --> 01:52:03,000
如果您期待我們更頻繁的更新

3687
01:52:03,000 --> 01:52:05,000
歡迎您到愛發店我們捐款

3688
01:52:05,000 --> 01:52:07,000
這款地址可以在愛發

3689
01:52:07,000 --> 01:52:09,000
可以在我們的網站上找到

3690
01:52:09,000 --> 01:52:12,000
閒發店後吹耕文明吹耕從你做起

3691
01:52:12,000 --> 01:52:13,000
如果您覺得意味盡

3692
01:52:13,000 --> 01:52:17,000
也歡迎您收聽 Rail 和黃海姐主持節目風頭圈

3693
01:52:17,000 --> 01:52:20,000
Rail 和人民主持節目提前懷舊

3694
01:52:20,000 --> 01:52:22,000
以及基本部有無討如是自殘自創

3695
01:52:22,000 --> 01:52:23,000
拜拜

3696
01:52:23,000 --> 01:52:24,000
拜拜

3697
01:52:24,000 --> 01:52:24,000
拜拜

