1
00:00:00,000 --> 00:00:04,000
欢迎收听 ipm podcast 网组写下的 IT 技术主题娱乐节目内核恐慌

2
00:00:04,000 --> 00:00:06,000
我们号称 Hardcore 但是也没有干货

3
00:00:06,000 --> 00:00:08,000
想听的人听不想听的人就别听

4
00:00:08,000 --> 00:00:11,000
本节目的网址是 chernopanic.fm

5
00:00:11,000 --> 00:00:13,000
我们推荐大家使用 podcast 客户端订阅我们的节目

6
00:00:13,000 --> 00:00:17,000
详情请访问 ipm.li.flq

7
00:00:17,000 --> 00:00:18,000
欢迎你为本节目捐款

8
00:00:18,000 --> 00:00:22,000
捐款的地址是 chernopanic.fm.donate

9
00:00:22,000 --> 00:00:25,000
捐款经过随意只要是 8 的正常数倍就可以

10
00:00:25,000 --> 00:00:27,000
捐款不会为你带来什么

11
00:00:27,000 --> 00:00:28,000
不捐也不会帮你失去什么

12
00:00:29,000 --> 00:00:31,000
这句话怎么好像成了一个秘密

13
00:00:31,000 --> 00:00:34,000
你们上期 IT 公司有没有为什么要插绿的话

14
00:00:34,000 --> 00:00:35,000
非常突兀我觉得

15
00:00:37,000 --> 00:00:42,000
anyway 我们的口号是 it's easier to port a shell

16
00:00:42,000 --> 00:00:45,000
than a shell script from Lerival

17
00:00:47,000 --> 00:00:51,000
对所以我们这一期又有主题了

18
00:00:51,000 --> 00:00:56,000
不过在进入主题之前我们先来做一下上一期的听众反馈

19
00:00:56,000 --> 00:00:58,000
首先是我们的热心听众

20
00:00:58,000 --> 00:01:06,000
Chapelot 先生远在澳大利亚为我们写来的听众反馈说

21
00:01:06,000 --> 00:01:09,000
二位前辈好第二期期提到的用 qq 发来码的问题

22
00:01:10,000 --> 00:01:12,000
二位似乎在疑惑什么场景需要这么做

23
00:01:12,000 --> 00:01:15,000
一个典型的例子就是 group assignment

24
00:01:15,000 --> 00:01:18,000
虽然我本科不在国内不了解国内院校的细节

25
00:01:18,000 --> 00:01:23,000
不过如果不用 git 而且没有退而求其次使用丢丢盒等同步盘的话

26
00:01:24,000 --> 00:01:26,000
组员共享

27
00:01:28,000 --> 00:01:32,000
这是万银交汇我使用的 jobbox 的霓裳

28
00:01:36,000 --> 00:01:40,000
组员共享代码就只有使用 qq 这种门槛交离的方式

29
00:01:40,000 --> 00:01:44,000
然而即使在国外效果情况也不能说理想

30
00:01:44,000 --> 00:01:52,000
我校虽然有顶级大牛本科 B 社就是给 ghc 的天家 LMVM 后端

31
00:01:52,000 --> 00:01:56,000
也还是有人不会用 git 做 group assignment 的时候

32
00:01:56,000 --> 00:02:01,000
把代码从自己的 eclipse 拷贝到 bit bucket 的网页编辑器

33
00:02:01,000 --> 00:02:05,000
不经意间就三分五次覆盖掉别人的成果

34
00:02:05,000 --> 00:02:08,000
以我一届本科生的潜见这大概与计算机课程覆盖面太广

35
00:02:08,000 --> 00:02:10,000
与其他学科相比

36
00:02:10,000 --> 00:02:13,000
签烧线系统性也有关系

37
00:02:13,000 --> 00:02:17,000
如果以理工划分计算机是既有理又有工

38
00:02:17,000 --> 00:02:23,000
除了计算理论 PLT 非常形式化理论化的东西

39
00:02:23,000 --> 00:02:25,000
也有例如 git 这样乍一看非常的脏

40
00:02:25,000 --> 00:02:30,000
但是考虑了很多因素的 best practice

41
00:02:30,000 --> 00:02:32,000
当然指望学校覆盖这么多内容也不现实

42
00:02:32,000 --> 00:02:35,000
毕竟这是一个非常依赖个人修行的行业

43
00:02:35,000 --> 00:02:37,000
诸个本节没有

44
00:02:37,000 --> 00:02:41,000
所以其实让我想起今天我们后面要提到一个小插曲

45
00:02:41,000 --> 00:02:45,000
就是为什么说就是这个马农

46
00:02:45,000 --> 00:02:49,000
我觉得不能把马农称为软件过程式的一个原因

47
00:02:49,000 --> 00:02:53,000
宣传宣传宣传宣传宣传宣传宣传宣传宣

48
00:02:53,000 --> 00:02:57,000
如果说你对这些工具流程都没有一个很

49
00:02:57,000 --> 00:02:59,000
或者说其实这怎么说

50
00:02:59,000 --> 00:03:00,000
可能要反过来讲

51
00:03:00,000 --> 00:03:04,000
就是像那种理教计学校

52
00:03:04,000 --> 00:03:06,000
他可能很多人会觉得这种工具层面的东西

53
00:03:06,000 --> 00:03:09,000
跟计算机其实并没有什么太多的关系

54
00:03:09,000 --> 00:03:10,000
对吧

55
00:03:10,000 --> 00:03:14,000
然后他会觉得或多或少的会在这个层面上侵蚀这个东西

56
00:03:14,000 --> 00:03:17,000
因为觉得都是张国

57
00:03:17,000 --> 00:03:20,000
他不是就是非核心的东西

58
00:03:20,000 --> 00:03:24,000
而且就是属于技校教的东西

59
00:03:24,000 --> 00:03:26,000
不应该是大学教的东西

60
00:03:26,000 --> 00:03:29,000
但是我觉得这个就不太对

61
00:03:29,000 --> 00:03:31,000
因为如果说你真的是想做工程的话

62
00:03:31,000 --> 00:03:34,000
你真的要做 software engineer 的话

63
00:03:34,000 --> 00:03:38,000
你很难想象一个什么传统建筑行业的人

64
00:03:38,000 --> 00:03:39,000
或者建筑工程师

65
00:03:39,000 --> 00:03:43,000
你会说他不会用那些什么工具

66
00:03:43,000 --> 00:03:44,000
比如什么仪器

67
00:03:44,000 --> 00:03:45,000
还有那种架子

68
00:03:45,000 --> 00:03:47,000
什么侧挥用的那些东西

69
00:03:47,000 --> 00:03:47,000
对吧

70
00:03:47,000 --> 00:03:49,000
你肯定是要学这些基本的操作的

71
00:03:49,000 --> 00:03:52,000
就是我还记得像哪怕是学物理的话

72
00:03:52,000 --> 00:03:55,000
你才学会用各种各样的这个叫什么来的

73
00:03:56,000 --> 00:03:59,000
Ubacarch 或者是一些跟高级的一些工具

74
00:03:59,000 --> 00:03:59,000
对吧

75
00:03:59,000 --> 00:04:01,000
那是高中物理

76
00:04:01,000 --> 00:04:04,000
我觉得其实物理学的分野已经很明显了

77
00:04:04,000 --> 00:04:06,000
有些理论物理学真的是完全不做实验的

78
00:04:06,000 --> 00:04:08,000
你看那个 tvbt 里面

79
00:04:08,000 --> 00:04:09,000
Shalon 不是也一直在嘲笑

80
00:04:09,000 --> 00:04:12,000
动手做实验

81
00:04:12,000 --> 00:04:12,000
对啊

82
00:04:12,000 --> 00:04:19,000
我觉得其实就是有这个理论和实验的分野的学科

83
00:04:19,000 --> 00:04:21,000
可能都会有这种

84
00:04:21,000 --> 00:04:22,000
多多少少就是做纯理论的人

85
00:04:22,000 --> 00:04:25,000
会轻视需要动手做实验的人

86
00:04:25,000 --> 00:04:27,000
因为有理论就够了

87
00:04:27,000 --> 00:04:34,000
但你刚才说的那个建筑又是完全一个比较不一样的东西

88
00:04:34,000 --> 00:04:37,000
因为建筑本身就是从实验上来的

89
00:04:37,000 --> 00:04:39,000
建筑没有什么纯理论的东西

90
00:04:39,000 --> 00:04:42,000
或者说有但没有那么脱离现实的纯理论

91
00:04:42,000 --> 00:04:43,000
它不会研究

92
00:04:43,000 --> 00:04:46,000
它不会研究真空中的纯球型建筑

93
00:04:46,000 --> 00:04:46,000
对吧

94
00:04:49,000 --> 00:04:52,000
以后我们造那个 space ship 的时候就需要考虑这个问题

95
00:04:52,000 --> 00:04:54,000
真空中的球型建筑

96
00:04:54,000 --> 00:04:54,000
不就是水滴吗

97
00:04:54,000 --> 00:04:56,000
不不是水滴是

98
00:04:56,000 --> 00:04:58,000
Negas Dance Star

99
00:04:58,000 --> 00:05:01,000
死星和那个一切人要赛

100
00:05:03,000 --> 00:05:04,000
对

101
00:05:04,000 --> 00:05:06,000
所以我的观点其实很简单

102
00:05:06,000 --> 00:05:08,000
就是很多现在也很多学校也在分这个东西

103
00:05:08,000 --> 00:05:10,000
它分这个计算机科学系

104
00:05:10,000 --> 00:05:13,000
计算机工程系或者说这是软件工程系

105
00:05:13,000 --> 00:05:17,000
所以如果你们这个里面带有工程这个

106
00:05:17,000 --> 00:05:22,000
但是又不去对这个学生进行系统化的这种像

107
00:05:22,000 --> 00:05:23,000
这种代码管理工具的培训

108
00:05:23,000 --> 00:05:24,000
编辑器的培训

109
00:05:24,000 --> 00:05:26,000
ID 的使用培训

110
00:05:26,000 --> 00:05:28,000
你不去教这些 Best Practices

111
00:05:28,000 --> 00:05:31,000
我觉得你是不配去教自己是一个工程系的

112
00:05:31,000 --> 00:05:31,000
对

113
00:05:31,000 --> 00:05:33,000
这是肯定的

114
00:05:33,000 --> 00:05:34,000
但是如果你做纯理论的话

115
00:05:34,000 --> 00:05:40,000
又会觉得说学那些系统而为的工具的时间

116
00:05:40,000 --> 00:05:43,000
还是挺好像有点浪费

117
00:05:43,000 --> 00:05:45,000
我觉得我三号有这种印象

118
00:05:45,000 --> 00:05:47,000
就是有些学计算机的人

119
00:05:47,000 --> 00:05:49,000
他之后也不懂那些具体的工具

120
00:05:49,000 --> 00:05:51,000
难知学计算机科学的人不会修计算机

121
00:05:51,000 --> 00:05:55,000
也是因为就是它是工具

122
00:05:55,000 --> 00:05:57,000
太耗时间了

123
00:05:57,000 --> 00:05:59,000
对

124
00:05:59,000 --> 00:06:02,000
所以我觉得就是纯理论的

125
00:06:02,000 --> 00:06:04,000
也许是研究也好

126
00:06:04,000 --> 00:06:04,000
培训

127
00:06:04,000 --> 00:06:05,000
要研究

128
00:06:05,000 --> 00:06:06,000
这点完全没有问题

129
00:06:06,000 --> 00:06:09,000
但是如果说你还是指望你的毕业生

130
00:06:09,000 --> 00:06:10,000
有能够在就业市场上

131
00:06:10,000 --> 00:06:11,000
起码本科

132
00:06:11,000 --> 00:06:12,000
你说博士研究生

133
00:06:12,000 --> 00:06:13,000
你说你不指望他

134
00:06:13,000 --> 00:06:17,000
你不去管他们的就业在职场

135
00:06:17,000 --> 00:06:19,000
就是做马龙这个方向的

136
00:06:19,000 --> 00:06:21,000
其实我觉得挺可怨

137
00:06:21,000 --> 00:06:26,000
但是如果说你是一个本科的一个教学目标

138
00:06:26,000 --> 00:06:28,000
然后你说把这些完全就踢掉

139
00:06:28,000 --> 00:06:29,000
不看

140
00:06:29,000 --> 00:06:30,000
我觉得是其实是有问题的

141
00:06:30,000 --> 00:06:33,000
就是从务实的角度来讲

142
00:06:33,000 --> 00:06:37,000
还是从对这些人的未来的就业的情况来讲

143
00:06:37,000 --> 00:06:39,000
我觉得这个是有签考虑的

144
00:06:39,000 --> 00:06:39,000
没错

145
00:06:39,000 --> 00:06:42,000
然后如果你真的这么干了

146
00:06:42,000 --> 00:06:46,000
就不要叫自己的毕业生是 soft to engineer

147
00:06:46,000 --> 00:06:47,000
这种态度好

148
00:06:47,000 --> 00:06:47,000
对

149
00:06:47,000 --> 00:06:52,000
下一则听这种反馈

150
00:06:52,000 --> 00:06:52,000
这个

151
00:06:52,000 --> 00:06:55,000
这些他先揪了我们一个错

152
00:06:55,000 --> 00:06:59,000
上期我们提到那个叫做 let's encrypt

153
00:06:59,000 --> 00:07:03,000
那个一个叫 SSL 的什么一个服务

154
00:07:03,000 --> 00:07:05,000
他的 FounderG 的 University of Michigan

155
00:07:05,000 --> 00:07:06,000
是密歇根大学

156
00:07:06,000 --> 00:07:08,000
不是密歇根周利大学

157
00:07:08,000 --> 00:07:10,000
应该是我说错了

158
00:07:10,000 --> 00:07:11,000
一说最快

159
00:07:11,000 --> 00:07:14,000
所以就美国这个学校也挺有意思的

160
00:07:14,000 --> 00:07:15,000
他会有这个 Michigan State

161
00:07:15,000 --> 00:07:18,000
或者 University of Michigan 这样

162
00:07:18,000 --> 00:07:20,000
两种比较坑的

163
00:07:20,000 --> 00:07:20,000
对

164
00:07:20,000 --> 00:07:23,000
你看武汉大学和湖北大学

165
00:07:23,000 --> 00:07:25,000
就是两所大学对吧

166
00:07:25,000 --> 00:07:25,000
没有人搞混

167
00:07:25,000 --> 00:07:26,000
但是

168
00:07:26,000 --> 00:07:29,000
为什么密歇根

169
00:07:29,000 --> 00:07:30,000
这个是

170
00:07:30,000 --> 00:07:30,000
不

171
00:07:30,000 --> 00:07:31,000
这个是

172
00:07:31,000 --> 00:07:32,000
如果可以比的

173
00:07:32,000 --> 00:07:36,000
应该是湖北大学和湖北省立大学的区别

174
00:07:36,000 --> 00:07:39,000
OK

175
00:07:39,000 --> 00:07:40,000
对

176
00:07:40,000 --> 00:07:42,000
因为没有一个城市叫做 Michigan

177
00:07:42,000 --> 00:07:42,000
对

178
00:07:42,000 --> 00:07:43,000
这是

179
00:07:43,000 --> 00:07:46,000
接着念这则听中反馈

180
00:07:46,000 --> 00:07:50,000
本来只想随手回复一下小小的口误

181
00:07:50,000 --> 00:07:53,000
反正也要发一件不多说几句感想

182
00:07:53,000 --> 00:07:54,000
够好废话

183
00:07:54,000 --> 00:07:55,000
内吼恐慌

184
00:07:55,000 --> 00:07:58,000
我是从第一期开始听的

185
00:07:58,000 --> 00:08:01,000
追的热情不亚于追番和美剧

186
00:08:01,000 --> 00:08:01,000
哇

187
00:08:01,000 --> 00:08:02,000
这么高的评价

188
00:08:02,000 --> 00:08:05,000
就是不胜黄恐慌

189
00:08:05,000 --> 00:08:08,000
早晨上班单位和工业之间

190
00:08:08,000 --> 00:08:09,000
commute 很久

191
00:08:09,000 --> 00:08:12,000
经常在路上笑话各种 podcast 节目

192
00:08:12,000 --> 00:08:13,000
阿迪公论和内吼恐慌

193
00:08:13,000 --> 00:08:15,000
真是一级不辣

194
00:08:15,000 --> 00:08:15,000
哎

195
00:08:15,000 --> 00:08:18,000
面对了

196
00:08:18,000 --> 00:08:19,000
有时候听到有意思的片段

197
00:08:19,000 --> 00:08:20,000
都是一个人戴着

198
00:08:20,000 --> 00:08:22,000
寄作在车上傻笑

199
00:08:22,000 --> 00:08:23,000
哎呀

200
00:08:23,000 --> 00:08:24,000
这种随身遍邪

201
00:08:24,000 --> 00:08:26,000
还只能独享的愉悦

202
00:08:26,000 --> 00:08:28,000
真是弥样自豪

203
00:08:28,000 --> 00:08:29,000
这位同学

204
00:08:29,000 --> 00:08:32,000
你这个中毒蛮深的

205
00:08:32,000 --> 00:08:33,000
真的不用怀疑

206
00:08:33,000 --> 00:08:35,000
不用考虑一下林作的感受吗

207
00:08:35,000 --> 00:08:37,000
哈哈哈

208
00:08:37,000 --> 00:08:37,000
OK

209
00:08:37,000 --> 00:08:38,000
这段天好

210
00:08:38,000 --> 00:08:40,000
我是从事交互行

211
00:08:40,000 --> 00:08:41,000
交互设计行业的

212
00:08:41,000 --> 00:08:43,000
所以对设计啦

213
00:08:43,000 --> 00:08:43,000
产品啦

214
00:08:43,000 --> 00:08:44,000
MVP 啦

215
00:08:44,000 --> 00:08:45,000
相关的话题

216
00:08:45,000 --> 00:08:46,000
更感兴趣

217
00:08:46,000 --> 00:08:48,000
其他片开发的内容也能接受

218
00:08:48,000 --> 00:08:51,000
之前是从 CS 转行过来的

219
00:08:51,000 --> 00:08:55,000
心里多少有点没能继续坚持走马的

220
00:08:55,000 --> 00:08:58,000
阳光大到不动摇的遗憾

221
00:08:58,000 --> 00:08:59,000
不对啊

222
00:08:59,000 --> 00:09:00,000
你这选对方向了

223
00:09:00,000 --> 00:09:00,000
我觉得

224
00:09:00,000 --> 00:09:02,000
哈哈哈

225
00:09:02,000 --> 00:09:03,000
嗯

226
00:09:03,000 --> 00:09:04,000
于是靠听播客了解

227
00:09:04,000 --> 00:09:05,000
大家都在干嘛

228
00:09:05,000 --> 00:09:07,000
讨论什么

229
00:09:07,000 --> 00:09:07,000
呃

230
00:09:07,000 --> 00:09:08,000
维系

231
00:09:08,000 --> 00:09:09,000
你看我还是很积极关注

232
00:09:09,000 --> 00:09:11,000
技术的安全感

233
00:09:11,000 --> 00:09:13,000
特别喜欢邀请了嘉宾的几期

234
00:09:13,000 --> 00:09:14,000
消极一节

235
00:09:14,000 --> 00:09:14,000
沐遥老师

236
00:09:14,000 --> 00:09:15,000
薇娜

237
00:09:15,000 --> 00:09:17,000
还有最近的 L 打

238
00:09:17,000 --> 00:09:18,000
呃

239
00:09:18,000 --> 00:09:18,000
感

240
00:09:18,000 --> 00:09:19,000
联系各位

241
00:09:19,000 --> 00:09:19,000
点

242
00:09:19,000 --> 00:09:22,000
然后提供向门学人科

243
00:09:22,000 --> 00:09:24,000
不能大断笑识

244
00:09:24,000 --> 00:09:24,000
呃

245
00:09:24,000 --> 00:09:25,000
虽是不一样的领域

246
00:09:25,000 --> 00:09:27,000
但都会对自己思考问题解决

247
00:09:27,000 --> 00:09:29,000
问题的方式有启发

248
00:09:29,000 --> 00:09:31,000
对我来说已经很可贵了

249
00:09:31,000 --> 00:09:34,000
这个我还是蛮蛮蛮欣慰的

250
00:09:34,000 --> 00:09:35,000
嗯

251
00:09:35,000 --> 00:09:36,000
这点你

252
00:09:36,000 --> 00:09:36,000
呃

253
00:09:36,000 --> 00:09:37,000
比如意这个文件

254
00:09:37,000 --> 00:09:41,000
有时候会把爱奇公论的气氛弄成变轮会

255
00:09:41,000 --> 00:09:44,000
我隔着 WiFi 都觉得这是要剑把弩张的

256
00:09:44,000 --> 00:09:46,000
可能是我多虑了呢

257
00:09:46,000 --> 00:09:47,000
呃

258
00:09:47,000 --> 00:09:48,000
这个要插画

259
00:09:48,000 --> 00:09:48,000
确实是多虑了

260
00:09:48,000 --> 00:09:50,000
哈哈哈

261
00:09:50,000 --> 00:09:51,000
相较而言

262
00:09:51,000 --> 00:09:53,000
那颗恐慌就和谐得多

263
00:09:53,000 --> 00:09:54,000
果然程序原是天底下

264
00:09:54,000 --> 00:09:57,000
最可爱无害的神班存在

265
00:09:57,000 --> 00:10:00,000
有劲有退有分寸还特自然

266
00:10:00,000 --> 00:10:01,000
不管怎样

267
00:10:01,000 --> 00:10:02,000
我还是爱你们所有人

268
00:10:02,000 --> 00:10:04,000
包括很有逼格

269
00:10:04,000 --> 00:10:06,000
括号就是包裔的

270
00:10:06,000 --> 00:10:07,000
李维

271
00:10:07,000 --> 00:10:10,000
最后我其实我本来想说要是有

272
00:10:10,000 --> 00:10:12,000
靠谱湾区南马龙

273
00:10:12,000 --> 00:10:15,000
愿意每周末出来泡个

274
00:10:15,000 --> 00:10:17,000
咖啡店图书馆

275
00:10:17,000 --> 00:10:19,000
做做自己想做的赛 project

276
00:10:19,000 --> 00:10:22,000
觉得有个设计师一起也不赖

277
00:10:22,000 --> 00:10:23,000
请联系我

278
00:10:23,000 --> 00:10:25,000
不过我觉得这样被误解成

279
00:10:25,000 --> 00:10:27,000
HR 的概率太大

280
00:10:27,000 --> 00:10:29,000
而且停上去总有

281
00:10:29,000 --> 00:10:32,000
总是不像好人有种无耻的围锁感

282
00:10:32,000 --> 00:10:33,000
你说算了吧

283
00:10:33,000 --> 00:10:34,000
就是挺好的

284
00:10:34,000 --> 00:10:34,000
我觉得挺好的

285
00:10:34,000 --> 00:10:36,000
你们这个自己组组合吧

286
00:10:36,000 --> 00:10:36,000
对

287
00:10:36,000 --> 00:10:38,000
他强调这个湾区南马龙

288
00:10:38,000 --> 00:10:40,000
所以这应该是个美容

289
00:10:40,000 --> 00:10:40,000
对

290
00:10:40,000 --> 00:10:41,000
为什么要一定是南马龙

291
00:10:41,000 --> 00:10:42,000
是个女生嘛

292
00:10:42,000 --> 00:10:42,000
可能

293
00:10:46,000 --> 00:10:46,000
好吧

294
00:10:46,000 --> 00:10:47,000
对

295
00:10:47,000 --> 00:10:47,000
呃

296
00:10:47,000 --> 00:10:48,000
还是说

297
00:10:48,000 --> 00:10:50,000
铸内和恐慌

298
00:10:50,000 --> 00:10:51,000
越做越棒

299
00:10:51,000 --> 00:10:53,000
达到新闻联播的境界

300
00:10:54,000 --> 00:10:55,000
是指风雨

301
00:10:56,000 --> 00:10:58,000
当然是指风雨无阻的任性

302
00:10:58,000 --> 00:10:59,000
和权威性

303
00:10:59,000 --> 00:11:00,000
喽

304
00:11:00,000 --> 00:11:02,000
又没鼓励你们写固定排笔剧

305
00:11:02,000 --> 00:11:03,000
某晚报喜不报忧

306
00:11:05,000 --> 00:11:06,000
呃

307
00:11:06,000 --> 00:11:07,000
我这样还蛮开心的

308
00:11:07,000 --> 00:11:11,000
就其实这个节目能够给大家带来

309
00:11:11,000 --> 00:11:13,000
一点点这个快乐的时光

310
00:11:13,000 --> 00:11:14,000
好

311
00:11:14,000 --> 00:11:15,000
然后觉得还有所启发

312
00:11:15,000 --> 00:11:16,000
这个就是对我

313
00:11:16,000 --> 00:11:17,000
我个人这个是个挺高的评价

314
00:11:17,000 --> 00:11:18,000
哈哈哈

315
00:11:18,000 --> 00:11:19,000
挺起来好计判

316
00:11:19,000 --> 00:11:21,000
然后对

317
00:11:21,000 --> 00:11:23,000
然后我还是

318
00:11:23,000 --> 00:11:24,000
这个叫什么

319
00:11:24,000 --> 00:11:25,000
很纠结

320
00:11:25,000 --> 00:11:27,000
这个为什么只现南马龙呢

321
00:11:27,000 --> 00:11:28,000
就没有女马龙吗

322
00:11:28,000 --> 00:11:29,000
你们这是要要

323
00:11:29,000 --> 00:11:30,000
前两天我

324
00:11:30,000 --> 00:11:30,000
好

325
00:11:30,000 --> 00:11:32,000
昨天我女朋友说

326
00:11:32,000 --> 00:11:34,000
那个维密里有一模特

327
00:11:34,000 --> 00:11:36,000
升了纽约大学

328
00:11:36,000 --> 00:11:38,000
去学编程了

329
00:11:38,000 --> 00:11:39,000
然后他还成为基建会

330
00:11:39,000 --> 00:11:40,000
就是那个

331
00:11:40,000 --> 00:11:41,000
是那个

332
00:11:41,000 --> 00:11:42,000
那个

333
00:11:42,000 --> 00:11:44,000
就是黑黑黑人女孩子

334
00:11:44,000 --> 00:11:45,000
我我没有看

335
00:11:45,000 --> 00:11:46,000
说什么长超正

336
00:11:46,000 --> 00:11:47,000
然后

337
00:11:47,000 --> 00:11:49,000
那个一然解约去学编程

338
00:11:49,000 --> 00:11:51,000
还有每年支持

339
00:11:51,000 --> 00:11:53,000
N 个女生去学编程之类的一个

340
00:11:53,000 --> 00:11:53,000
啊

341
00:11:53,000 --> 00:11:54,000
我知道

342
00:11:54,000 --> 00:11:55,000
就是那个就是那个

343
00:11:55,000 --> 00:11:56,000
他他是他是哪个学校

344
00:11:56,000 --> 00:11:57,000
他是做那个

345
00:11:57,000 --> 00:11:58,000
lx 开发的嘛

346
00:11:58,000 --> 00:11:59,000
然后就是

347
00:11:59,000 --> 00:12:01,000
业余做一下这个

348
00:12:01,000 --> 00:12:03,000
维多米亚的这个

349
00:12:03,000 --> 00:12:06,000
秘密的模特身材超超赞

350
00:12:06,000 --> 00:12:08,000
然后就是哇

351
00:12:08,000 --> 00:12:09,000
今天就主观节目去看一下

352
00:12:09,000 --> 00:12:11,000
马马龙女神好不好

353
00:12:11,000 --> 00:12:12,000
这个是

354
00:12:12,000 --> 00:12:13,000
哈哈哈

355
00:12:13,000 --> 00:12:14,000
哎之前那个什么

356
00:12:14,000 --> 00:12:15,000
知乎上也有一个

357
00:12:15,000 --> 00:12:17,000
来也有个模特女孩子

358
00:12:17,000 --> 00:12:18,000
后来就学牌坊了

359
00:12:18,000 --> 00:12:18,000
吧

360
00:12:18,000 --> 00:12:19,000
我记得

361
00:12:19,000 --> 00:12:19,000
然后呢

362
00:12:19,000 --> 00:12:23,000
还搞了一个创业项目是做

363
00:12:23,000 --> 00:12:24,000
是做一个什么

364
00:12:24,000 --> 00:12:25,000
订阅器来的

365
00:12:25,000 --> 00:12:26,000
我忘了

366
00:12:26,000 --> 00:12:27,000
ok

367
00:12:27,000 --> 00:12:31,000
跟找找那个链接加到手脑子了

368
00:12:31,000 --> 00:12:32,000
那

369
00:12:32,000 --> 00:12:35,000
就我们只有这两期

370
00:12:35,000 --> 00:12:36,000
只有这两封反馈吧

371
00:12:36,000 --> 00:12:37,000
应该是

372
00:12:39,000 --> 00:12:39,000
对啊

373
00:12:39,000 --> 00:12:41,000
其实还有一个比较简短的

374
00:12:41,000 --> 00:12:43,000
就是有位听众给我们写信来说

375
00:12:43,000 --> 00:12:45,000
推荐一篇文章叫做 programmer

376
00:12:45,000 --> 00:12:48,000
是 stop called themselves engineers

377
00:12:48,000 --> 00:12:51,000
是来自于那个 telegram

378
00:12:51,000 --> 00:12:53,000
but the Atlantic

379
00:12:53,000 --> 00:12:53,000
sorry

380
00:12:54,000 --> 00:12:56,000
报纸网站上的一篇文章

381
00:12:56,000 --> 00:12:59,000
这篇文章其实我前两周也看过了

382
00:12:59,000 --> 00:13:00,000
就是他

383
00:13:00,000 --> 00:13:03,000
因为他曾经在 hacker news 上出现

384
00:13:03,000 --> 00:13:05,000
然后其大意就是说

385
00:13:05,000 --> 00:13:11,000
这个工程师是一个非常高大上的 title

386
00:13:11,000 --> 00:13:15,000
其实他就按照这篇文章的这个调子来说

387
00:13:15,000 --> 00:13:17,000
工程师是一个非常庄严

388
00:13:19,000 --> 00:13:22,000
一个一个一个让人可以信来

389
00:13:22,000 --> 00:13:24,000
然后门槛非常高的这么一个 title

390
00:13:24,000 --> 00:13:28,000
而这些 tech industry

391
00:13:28,000 --> 00:13:31,000
就是我们这些搞电脑这帮人总是会

392
00:13:31,000 --> 00:13:37,000
总是希望把自己总是会使用什么 software engineer 这种 title

393
00:13:37,000 --> 00:13:39,000
然后这样的 title 实际上是在给 engineer 抹黑

394
00:13:39,000 --> 00:13:42,000
因为很多 software 是非常不可靠的

395
00:13:42,000 --> 00:13:44,000
就他原句中有句话

396
00:13:44,000 --> 00:13:46,000
我记得就是

397
00:13:46,000 --> 00:13:50,000
许多软件服务在今天其实已经成了 infrastructure

398
00:13:50,000 --> 00:13:53,000
但是他们却远远不如传统的 infrastructure 可靠

399
00:13:53,000 --> 00:13:54,000
比如说

400
00:13:55,000 --> 00:13:56,000
对呀

401
00:13:56,000 --> 00:13:58,000
我其实我可以理解这种说法

402
00:13:58,000 --> 00:13:59,000
比如说 facebook

403
00:13:59,000 --> 00:14:01,000
对于很多人来说 facebook

404
00:14:01,000 --> 00:14:05,000
或者 imessage 已经全都是非常每天 leave 开的东西

405
00:14:05,000 --> 00:14:07,000
但是就今天

406
00:14:07,000 --> 00:14:09,000
明天什么时候莫名其妙

407
00:14:09,000 --> 00:14:10,000
facebook 就要 outrage 一下

408
00:14:12,000 --> 00:14:13,000
什么 outrage

409
00:14:13,000 --> 00:14:14,000
outage 一下

410
00:14:14,000 --> 00:14:16,000
推特也是对吧

411
00:14:16,000 --> 00:14:19,000
你可能想象在一个

412
00:14:19,000 --> 00:14:21,000
在一个发达国家会一天到晚停电

413
00:14:21,000 --> 00:14:25,000
但至少推特也有一阶段就是这样

414
00:14:25,000 --> 00:14:27,000
那现在的像 facebook

415
00:14:27,000 --> 00:14:30,000
google 的一些 outage 基本上很少

416
00:14:30,000 --> 00:14:30,000
对

417
00:14:30,000 --> 00:14:32,000
是相对来说是比较少

418
00:14:32,000 --> 00:14:33,000
它也不是大面积的

419
00:14:34,000 --> 00:14:34,000
对

420
00:14:34,000 --> 00:14:36,000
但我的意思就是

421
00:14:36,000 --> 00:14:38,000
从统计者的角度来看

422
00:14:38,000 --> 00:14:42,000
他们还是要比传统 infrastructure 要

423
00:14:43,000 --> 00:14:44,000
要来的那么频繁一点

424
00:14:46,000 --> 00:14:46,000
那都不一定吧

425
00:14:46,000 --> 00:14:47,000
我觉得

426
00:14:47,000 --> 00:14:48,000
这个看你怎么去

427
00:14:48,000 --> 00:14:50,000
你要考虑一个叫什么

428
00:14:50,000 --> 00:14:51,000
量级的问题

429
00:14:51,000 --> 00:14:54,000
比如说你见过哪一栋楼

430
00:14:55,000 --> 00:14:57,000
每天有 11 人在同时使用它

431
00:14:58,000 --> 00:14:59,000
没有吧

432
00:14:59,000 --> 00:14:59,000
好吧

433
00:15:01,000 --> 00:15:01,000
对

434
00:15:01,000 --> 00:15:03,000
所以这个我觉得

435
00:15:03,000 --> 00:15:05,000
你如果要考虑可靠性的话

436
00:15:05,000 --> 00:15:07,000
得考虑它的使用品次

437
00:15:07,000 --> 00:15:08,000
还有那些问题

438
00:15:09,000 --> 00:15:10,000
还有像那些

439
00:15:10,000 --> 00:15:12,000
就建筑的豆腐

440
00:15:12,000 --> 00:15:14,000
豆腐渣工程也不好

441
00:15:14,000 --> 00:15:16,000
那些也不是工程师干出来的嘛

442
00:15:16,000 --> 00:15:16,000
对吧

443
00:15:16,000 --> 00:15:17,000
说的

444
00:15:17,000 --> 00:15:19,000
所以也不尽然

445
00:15:19,000 --> 00:15:19,000
好吧

446
00:15:19,000 --> 00:15:20,000
反正是一个论调

447
00:15:20,000 --> 00:15:22,000
然后大家可以去看一看这篇文章

448
00:15:22,000 --> 00:15:23,000
我觉得还行

449
00:15:23,000 --> 00:15:23,000
挺有意思

450
00:15:23,000 --> 00:15:24,000
对

451
00:15:25,000 --> 00:15:25,000
OK

452
00:15:25,000 --> 00:15:28,000
现在进入我们这个新闻环节

453
00:15:28,000 --> 00:15:29,000
对

454
00:15:29,000 --> 00:15:30,000
其实就两条新闻

455
00:15:31,000 --> 00:15:31,000
对

456
00:15:31,000 --> 00:15:34,000
因为我们两个最近都没有怎么看新闻

457
00:15:34,000 --> 00:15:35,000
你忙什么

458
00:15:35,000 --> 00:15:37,000
我反正是在忙着打 fault

459
00:15:38,000 --> 00:15:39,000
你打什么

460
00:15:40,000 --> 00:15:42,000
在辅社 4 刚出来了

461
00:15:42,000 --> 00:15:43,000
好吧

462
00:15:43,000 --> 00:15:44,000
那个是一个什么

463
00:15:44,000 --> 00:15:45,000
设计游戏吗

464
00:15:47,000 --> 00:15:48,000
设计游戏

465
00:15:48,000 --> 00:15:56,000
是个反乌托邦的大灾难之后的 RPG

466
00:15:56,000 --> 00:15:57,000
RPG

467
00:15:57,000 --> 00:15:58,000
是个史诗般的

468
00:15:58,000 --> 00:15:59,000
史诗般的游戏

469
00:15:59,000 --> 00:15:59,000
对

470
00:15:59,000 --> 00:16:00,000
就出到 4 了

471
00:16:00,000 --> 00:16:02,000
应该差不多是这样

472
00:16:02,000 --> 00:16:03,000
不是史诗

473
00:16:03,000 --> 00:16:04,000
应该不会出到 4

474
00:16:05,000 --> 00:16:05,000
对

475
00:16:07,000 --> 00:16:07,000
对

476
00:16:07,000 --> 00:16:09,000
所以我就是只看两个新闻

477
00:16:09,000 --> 00:16:09,000
等一下

478
00:16:09,000 --> 00:16:11,000
你只打 fault

479
00:16:11,000 --> 00:16:14,000
没有打 legislavvoid

480
00:16:17,000 --> 00:16:18,000
他们是从头前出来的

481
00:16:18,000 --> 00:16:19,000
但是气息为止

482
00:16:19,000 --> 00:16:21,000
我刚刚只是把 legislavvoid

483
00:16:22,000 --> 00:16:24,000
第一关玩了大概两分钟

484
00:16:24,000 --> 00:16:25,000
然后就

485
00:16:26,000 --> 00:16:27,000
然后就一直在打 fault

486
00:16:27,000 --> 00:16:28,000
好吧

487
00:16:28,000 --> 00:16:29,000
你这个叛徒

488
00:16:30,000 --> 00:16:31,000
sorry

489
00:16:31,000 --> 00:16:32,000
好吧

490
00:16:32,000 --> 00:16:32,000
你有玩吗

491
00:16:32,000 --> 00:16:33,000
我还没买

492
00:16:34,000 --> 00:16:34,000
OK

493
00:16:34,000 --> 00:16:35,000
因为最近比较忙嘛

494
00:16:35,000 --> 00:16:37,000
然后也没空去玩游戏

495
00:16:38,000 --> 00:16:38,000
OK

496
00:16:38,000 --> 00:16:39,000
讲新闻吧

497
00:16:39,000 --> 00:16:40,000
第一则是什么

498
00:16:40,000 --> 00:16:41,000
就是这个时候就闻了

499
00:16:42,000 --> 00:16:43,000
这个应该是

500
00:16:43,000 --> 00:16:45,000
这是两周之前的事情吧

501
00:16:45,000 --> 00:16:46,000
这个一周多之前的事情

502
00:16:46,000 --> 00:16:47,000
不止我

503
00:16:47,000 --> 00:16:48,000
我觉得这个东西

504
00:16:48,000 --> 00:16:50,000
我好像好几个月前就已经看到过了

505
00:16:51,000 --> 00:16:52,000
what

506
00:16:53,000 --> 00:16:54,000
I think

507
00:16:54,000 --> 00:16:54,000
难道

508
00:16:54,000 --> 00:16:55,000
那

509
00:16:55,000 --> 00:16:56,000
anyway

510
00:16:56,000 --> 00:16:58,000
反正这个东西也许是两个一周之前

511
00:16:58,000 --> 00:16:59,000
才正式有了自己的网站

512
00:16:59,000 --> 00:17:00,000
然后有了 fack

513
00:17:00,000 --> 00:17:01,000
fq 什么的

514
00:17:01,000 --> 00:17:02,000
OK

515
00:17:02,000 --> 00:17:03,000
对

516
00:17:03,000 --> 00:17:07,000
就是总之它是一个来自于 GOOL 的移动

517
00:17:07,000 --> 00:17:08,000
编程框架

518
00:17:10,000 --> 00:17:11,000
名字叫做 flutter

519
00:17:11,000 --> 00:17:13,000
fluttr

520
00:17:13,000 --> 00:17:13,000
嗯

521
00:17:15,000 --> 00:17:17,000
最大的特点

522
00:17:17,000 --> 00:17:19,000
大概就是使用 dark language 来写

523
00:17:19,000 --> 00:17:22,000
可以支持你能用 dark language 来写

524
00:17:22,000 --> 00:17:22,000
这个

525
00:17:23,000 --> 00:17:24,000
移动端定

526
00:17:24,000 --> 00:17:25,000
所以这样做有什么好处呢

527
00:17:29,000 --> 00:17:31,000
如果你开发安兆尔的话

528
00:17:31,000 --> 00:17:32,000
以后也许不用写称了

529
00:17:32,000 --> 00:17:34,000
但是 dark 是比加瓦好吗

530
00:17:36,000 --> 00:17:37,000
我觉得它是好一些的吧

531
00:17:37,000 --> 00:17:39,000
因为

532
00:17:40,000 --> 00:17:42,000
有什么语言能比 java 还差

533
00:17:42,000 --> 00:17:44,000
c++

534
00:17:44,000 --> 00:17:45,000
php

535
00:17:45,000 --> 00:17:46,000
php

536
00:17:46,000 --> 00:17:47,000
javascript

537
00:17:49,000 --> 00:17:49,000
对

538
00:17:49,000 --> 00:17:53,000
但 dark 跟 javascript 可能

539
00:17:53,000 --> 00:17:55,000
dark 可以 compile into javascript

540
00:17:55,000 --> 00:17:55,000
但

541
00:17:55,000 --> 00:17:56,000
anyway

542
00:17:56,000 --> 00:17:57,000
语言不是我们的重点

543
00:17:57,000 --> 00:17:59,000
但我的意思是

544
00:18:00,000 --> 00:18:01,000
它最大的卖点就是

545
00:18:01,000 --> 00:18:04,000
可以使用 java 之外的语言来写 android

546
00:18:04,000 --> 00:18:06,000
而且它

547
00:18:06,000 --> 00:18:07,000
它

548
00:18:07,000 --> 00:18:09,000
其实本身是一个跨平台的

549
00:18:09,000 --> 00:18:10,000
矿架

550
00:18:10,000 --> 00:18:11,000
它可以把

551
00:18:11,000 --> 00:18:17,000
写出来的程序编译成 iOS 的程序

552
00:18:17,000 --> 00:18:20,000
然后也可以在安兆尔上跑

553
00:18:20,000 --> 00:18:22,000
那 windows phone 我目前还没有印象的

554
00:18:22,000 --> 00:18:24,000
应该将来可能也会支持

555
00:18:25,000 --> 00:18:27,000
其实说到安兆尔

556
00:18:27,000 --> 00:18:29,000
其实用 scala 也可以写

557
00:18:29,000 --> 00:18:30,000
开发这个安兆尔应用吧

558
00:18:32,000 --> 00:18:34,000
理论上是可以的

559
00:18:34,000 --> 00:18:36,000
而且好像是有矿架的吧

560
00:18:36,000 --> 00:18:36,000
对

561
00:18:36,000 --> 00:18:38,000
反正你不管诸回

562
00:18:38,000 --> 00:18:39,000
更不管诸回

563
00:18:39,000 --> 00:18:40,000
都是太流行好像

564
00:18:41,000 --> 00:18:42,000
对

565
00:18:42,000 --> 00:18:44,000
然后 flutter 也采用了一些

566
00:18:44,000 --> 00:18:47,000
类似于 Facebook 的

567
00:18:49,000 --> 00:18:49,000
叫什么来着

568
00:18:49,000 --> 00:18:54,000
reactive 的相似的设计模式

569
00:18:54,000 --> 00:18:56,000
然后可以支持你比较

570
00:18:56,000 --> 00:18:58,000
使用这种类似

571
00:18:58,000 --> 00:19:00,000
functional reactive 的方式来写

572
00:19:00,000 --> 00:19:01,000
它的界面

573
00:19:02,000 --> 00:19:04,000
所以这个 flutter 算什么

574
00:19:04,000 --> 00:19:06,000
算是 Google 的亲儿子了

575
00:19:08,000 --> 00:19:08,000
应该是吧

576
00:19:08,000 --> 00:19:09,000
看这个意思

577
00:19:09,000 --> 00:19:11,000
但是 dart 其实一直搞不懂

578
00:19:11,000 --> 00:19:14,000
他们是到底要主推这个还怎么样

579
00:19:14,000 --> 00:19:17,000
因为之前说是要把 dart

580
00:19:17,000 --> 00:19:18,000
做进 chrome 里面

581
00:19:18,000 --> 00:19:20,000
就直接支持这个语言了

582
00:19:20,000 --> 00:19:22,000
但后来好像这个计划又取消了

583
00:19:22,000 --> 00:19:25,000
所以给人给外界的信心

584
00:19:25,000 --> 00:19:26,000
好像不是很足的样子

585
00:19:27,000 --> 00:19:27,000
对

586
00:19:27,000 --> 00:19:32,000
我觉得 Google 可能如果 go language 是

587
00:19:32,000 --> 00:19:35,000
亲定的后端源的话

588
00:19:35,000 --> 00:19:36,000
前端

589
00:19:37,000 --> 00:19:40,000
或者是更比较没那么工业级别的

590
00:19:40,000 --> 00:19:43,000
使用的这种类似于脚本的

591
00:19:43,000 --> 00:19:43,000
更快乐

592
00:19:43,000 --> 00:19:45,000
更依于执行的语言

593
00:19:45,000 --> 00:19:46,000
应该是 dart 吧

594
00:19:46,000 --> 00:19:49,000
但总觉得背后的推力不够

595
00:19:49,000 --> 00:19:53,000
它没有在努力的去 pr 这件事情

596
00:19:53,000 --> 00:19:53,000
对

597
00:19:53,000 --> 00:19:54,000
所以我觉得很可能

598
00:19:54,000 --> 00:19:56,000
因为 Google 经常出这种

599
00:19:56,000 --> 00:19:57,000
觉得听起来还不错

600
00:19:57,000 --> 00:19:59,000
挺酷的一个项目

601
00:19:59,000 --> 00:20:01,000
然后它过一段时间就不推

602
00:20:01,000 --> 00:20:03,000
然后这个项目就又死翘翘了

603
00:20:03,000 --> 00:20:05,000
这也不是第一次

604
00:20:05,000 --> 00:20:07,000
我觉得在 Google 这边有一个魔咒

605
00:20:07,000 --> 00:20:09,000
就是他们努力推的东西一般都不会成功

606
00:20:09,000 --> 00:20:11,000
比如说 Google Ops Plus

607
00:20:12,000 --> 00:20:14,000
或者是对

608
00:20:14,000 --> 00:20:15,000
或者是什么

609
00:20:15,000 --> 00:20:18,000
对那个都之前太死负中的那个一出来

610
00:20:18,000 --> 00:20:18,000
哇

611
00:20:18,000 --> 00:20:19,000
所有人都惊呆了

612
00:20:19,000 --> 00:20:20,000
然后最后死掉了

613
00:20:20,000 --> 00:20:21,000
你能不能叫什么

614
00:20:21,000 --> 00:20:22,000
干嘛用的

615
00:20:22,000 --> 00:20:26,000
号称要代替电子邮件的那个东西

616
00:20:26,000 --> 00:20:26,000
Google Wave

617
00:20:26,000 --> 00:20:28,000
OK

618
00:20:28,000 --> 00:20:29,000
对 Google Wave

619
00:20:29,000 --> 00:20:30,000
也是一顿狂推

620
00:20:30,000 --> 00:20:31,000
然后就完蛋了

621
00:20:31,000 --> 00:20:33,000
所以他们可能也学会了

622
00:20:33,000 --> 00:20:34,000
闷声发大财的这个

623
00:20:34,000 --> 00:20:34,000
不行

624
00:20:34,000 --> 00:20:37,000
我觉得这个节目里面那个哈耿太多了

625
00:20:37,000 --> 00:20:39,000
应该应该借一下

626
00:20:39,000 --> 00:20:44,000
然后然后不推的东西反而会慢慢活起来

627
00:20:44,000 --> 00:20:45,000
所以你看好这个吗

628
00:20:45,000 --> 00:20:46,000
这个 flutter

629
00:20:49,000 --> 00:20:50,000
我也不知道

630
00:20:50,000 --> 00:20:53,000
我现在已经没有再写过一栋断的东西了

631
00:20:53,000 --> 00:20:56,000
所以你已经放弃作为一栋开发者了吧

632
00:20:57,000 --> 00:20:58,000
没有

633
00:20:58,000 --> 00:21:00,000
我还是在看 swift 相关的东西

634
00:21:00,000 --> 00:21:02,000
你放弃 Android 开发者了

635
00:21:03,000 --> 00:21:03,000
对

636
00:21:03,000 --> 00:21:04,000
好吧

637
00:21:04,000 --> 00:21:05,000
阵营不同嘛

638
00:21:05,000 --> 00:21:06,000
屁股决定了

639
00:21:06,000 --> 00:21:08,000
所以我对他没有没有意见

640
00:21:08,000 --> 00:21:10,000
只是让大家知道一下

641
00:21:10,000 --> 00:21:11,000
有这么一个东西是吧

642
00:21:11,000 --> 00:21:14,000
然后是不是坑明年再说

643
00:21:14,000 --> 00:21:15,000
你们可以先跳进去

644
00:21:15,000 --> 00:21:16,000
是不是坑你跳了

645
00:21:16,000 --> 00:21:17,000
告诉我

646
00:21:19,000 --> 00:21:20,000
OK

647
00:21:20,000 --> 00:21:21,000
这个不错

648
00:21:21,000 --> 00:21:22,000
对

649
00:21:22,000 --> 00:21:24,000
然后这条新闻就是

650
00:21:25,000 --> 00:21:26,000
比较有意思的

651
00:21:26,000 --> 00:21:27,000
一个网站

652
00:21:28,000 --> 00:21:32,000
数字 0.3

653
00:21:32,000 --> 00:21:34,000
然后 15 个数字 0

654
00:21:34,000 --> 00:21:35,000
4

655
00:21:35,000 --> 00:21:35,000
4

656
00:21:35,000 --> 00:21:37,000
对

657
00:21:37,000 --> 00:21:38,000
这个理论上

658
00:21:40,000 --> 00:21:41,000
就是你看名字

659
00:21:41,000 --> 00:21:42,000
其实也大概猜到了吧

660
00:21:42,000 --> 00:21:43,000
这个是讲 Floating Point

661
00:21:43,000 --> 00:21:45,000
辅典数的一个网站

662
00:21:45,000 --> 00:21:45,000
对

663
00:21:45,000 --> 00:21:47,000
如果你遇到这个问题的话

664
00:21:47,000 --> 00:21:48,000
你一定会立刻明白

665
00:21:48,000 --> 00:21:49,000
这到底是一个什么梗

666
00:21:49,000 --> 00:21:50,000
但如果不知道的话

667
00:21:50,000 --> 00:21:51,000
欢迎你

668
00:21:53,000 --> 00:21:54,000
如果你朋友对手边有电脑的话

669
00:21:54,000 --> 00:21:56,000
不妨去看一看

670
00:21:56,000 --> 00:21:59,000
它是一个讲解辅典运算的网站

671
00:21:59,000 --> 00:22:02,000
就是在有些语言里面

672
00:22:02,000 --> 00:22:05,000
有些非常坑爹的语言里面

673
00:22:05,000 --> 00:22:09,000
如果你去计算 0.1 加 0.2 的话

674
00:22:09,000 --> 00:22:11,000
结果将会是 0.3

675
00:22:11,000 --> 00:22:12,000
跟着 15 个 0

676
00:22:12,000 --> 00:22:13,000
然后 4

677
00:22:13,000 --> 00:22:14,000
对

678
00:22:14,000 --> 00:22:18,000
就是它不是一个理想中的

679
00:22:18,000 --> 00:22:19,000
然后究其原因是为什么

680
00:22:19,000 --> 00:22:22,000
就是这篇这个网站想要告诉你

681
00:22:22,000 --> 00:22:23,000
它来自于一个

682
00:22:26,000 --> 00:22:26,000
对

683
00:22:26,000 --> 00:22:28,000
这是他们工程界的错误

684
00:22:28,000 --> 00:22:31,000
他们工程界定了这么一个

685
00:22:31,000 --> 00:22:32,000
Ie 754 标准

686
00:22:32,000 --> 00:22:33,000
然后这个标准里面

687
00:22:33,000 --> 00:22:35,000
规定了计算机应该怎样

688
00:22:35,000 --> 00:22:37,000
二进制来表达辅典数

689
00:22:37,000 --> 00:22:40,000
就是表达带小数点数的非准数

690
00:22:40,000 --> 00:22:42,000
然后这个标准

691
00:22:42,000 --> 00:22:44,000
如果你严格去按照它实施的话

692
00:22:44,000 --> 00:22:46,000
你最终就会得出 0.3

693
00:22:46,000 --> 00:22:47,000
15 个 0

694
00:22:47,000 --> 00:22:48,000
然后一个 4

695
00:22:48,000 --> 00:22:48,000
这种

696
00:22:48,000 --> 00:22:50,000
诡异的 0.1 加 0.2 的大

697
00:22:50,000 --> 00:22:55,000
就是一个 0.3 的近 4 值而非确切值

698
00:22:55,000 --> 00:22:59,000
因为你们没有办法在二进制里面表示

699
00:22:59,000 --> 00:23:00,000
就没办法在二进制里面

700
00:23:00,000 --> 00:23:02,000
精确表示 0.3

701
00:23:03,000 --> 00:23:03,000
对

702
00:23:03,000 --> 00:23:04,000
在二进制里面

703
00:23:04,000 --> 00:23:06,000
其实这是一个真正的问题

704
00:23:06,000 --> 00:23:08,000
就是在你采用什么样的数字

705
00:23:08,000 --> 00:23:10,000
就会产生什么样的问题

706
00:23:10,000 --> 00:23:12,000
比如说如果我们采用 11 进制的话

707
00:23:12,000 --> 00:23:16,000
那 11 分之 1 就是一个可以被表达出来的

708
00:23:16,000 --> 00:23:16,000
等一下

709
00:23:16,000 --> 00:23:18,000
如果你采用 11 进制

710
00:23:18,000 --> 00:23:20,000
只能表达 11 分之 1

711
00:23:20,000 --> 00:23:21,000
精确的吧

712
00:23:22,000 --> 00:23:22,000
对

713
00:23:22,000 --> 00:23:24,000
如果你用 11 进制的话

714
00:23:24,000 --> 00:23:25,000
你就可以表达 11 分之 1

715
00:23:25,000 --> 00:23:26,000
11 分之 2 之类的这种数字

716
00:23:26,000 --> 00:23:27,000
非常精确的

717
00:23:27,000 --> 00:23:29,000
0.102

718
00:23:29,000 --> 00:23:30,000
但如果你用 10 进制的话

719
00:23:30,000 --> 00:23:31,000
11 分之 1 和 11 分之 2

720
00:23:31,000 --> 00:23:33,000
就是一个无限循环小数

721
00:23:33,000 --> 00:23:33,000
对吧

722
00:23:33,000 --> 00:23:34,000
对

723
00:23:34,000 --> 00:23:35,000
你连 11 分之 2

724
00:23:35,000 --> 00:23:36,000
你都没法表达

725
00:23:37,000 --> 00:23:39,000
为什么不能 0.2 不就是 11 分之 2 吗

726
00:23:40,000 --> 00:23:42,000
0.1 是 10 进制的

727
00:23:42,000 --> 00:23:44,000
10 进制的 0.1 是 10 分之 1

728
00:23:46,000 --> 00:23:48,000
我明白你 O 里曼也意思

729
00:23:48,000 --> 00:23:50,000
11 进制下的 0.1

730
00:23:50,000 --> 00:23:53,000
不就是 10 进制下面的 11 分之 1 吗

731
00:23:55,000 --> 00:23:55,000
对

732
00:23:55,000 --> 00:23:55,000
没错

733
00:23:55,000 --> 00:23:56,000
不对

734
00:23:56,000 --> 00:23:56,000
对

735
00:23:56,000 --> 00:23:57,000
理解

736
00:23:57,000 --> 00:23:58,000
你说是这个意思

737
00:23:58,000 --> 00:23:58,000
OK

738
00:23:59,000 --> 00:24:00,000
没错

739
00:24:00,000 --> 00:24:01,000
对

740
00:24:01,000 --> 00:24:02,000
所以在 2 进制下面

741
00:24:02,000 --> 00:24:03,000
就有很多 10 进制的数字

742
00:24:03,000 --> 00:24:07,000
是没办法表达为一个 2 进制下面的整数的

743
00:24:09,000 --> 00:24:11,000
就整的分数

744
00:24:12,000 --> 00:24:13,000
听得有点绕的

745
00:24:13,000 --> 00:24:14,000
你会有点点

746
00:24:14,000 --> 00:24:16,000
0.1 可以表达 0.5

747
00:24:16,000 --> 00:24:18,000
但是 0.6 就没办法

748
00:24:18,000 --> 00:24:18,000
表达了

749
00:24:18,000 --> 00:24:19,000
就大概这个意思

750
00:24:22,000 --> 00:24:22,000
对

751
00:24:22,000 --> 00:24:25,000
所以在实际的一些编程语言里面怎么处理

752
00:24:25,000 --> 00:24:28,000
然后网页上就给了一个相对来说

753
00:24:28,000 --> 00:24:29,000
比较详细的例表

754
00:24:29,000 --> 00:24:31,000
会出现什么样的状况

755
00:24:32,000 --> 00:24:33,000
对

756
00:24:33,000 --> 00:24:33,000
然后

757
00:24:33,000 --> 00:24:35,000
叫你可以使用什么样的

758
00:24:35,000 --> 00:24:38,000
你在遇到什么样的语言的时候

759
00:24:38,000 --> 00:24:39,000
可能会得到什么样的结果

760
00:24:39,000 --> 00:24:41,000
以及你怎样解决这些问题

761
00:24:41,000 --> 00:24:43,000
比如说有些语言里面

762
00:24:43,000 --> 00:24:44,000
像 syshops

763
00:24:44,000 --> 00:24:45,000
类的都有什么 desimple

764
00:24:45,000 --> 00:24:47,000
就是专门用来解决这个

765
00:24:48,000 --> 00:24:50,000
任意精度的实境制数的问题

766
00:24:50,000 --> 00:24:53,000
你可能会问为什么不把这个

767
00:24:53,000 --> 00:24:56,000
任意实境制精度的数字

768
00:24:56,000 --> 00:24:59,000
做成一个默认的数字的实现

769
00:24:59,000 --> 00:25:00,000
有些语言是这样的

770
00:25:00,000 --> 00:25:01,000
但另外一些语言不是这样的

771
00:25:01,000 --> 00:25:03,000
因为根据使用场景

772
00:25:03,000 --> 00:25:05,000
这个库可能会非常的慢

773
00:25:05,000 --> 00:25:07,000
而且有时候你是不需要这个功能

774
00:25:07,000 --> 00:25:10,000
对一般是这样金融的系统里面

775
00:25:10,000 --> 00:25:12,000
要算设计在前的

776
00:25:12,000 --> 00:25:15,000
都会有那种任意精度的实境制的

777
00:25:16,000 --> 00:25:18,000
任意精度的实境制的一个包

778
00:25:18,000 --> 00:25:20,000
去处理这些前的数目

779
00:25:20,000 --> 00:25:21,000
对吧

780
00:25:21,000 --> 00:25:22,000
没错

781
00:25:22,000 --> 00:25:24,000
但然后其他的一些就为了追求效率

782
00:25:24,000 --> 00:25:26,000
就是用这个

783
00:25:26,000 --> 00:25:28,000
伏电型来表示

784
00:25:28,000 --> 00:25:29,000
然后伏电型

785
00:25:29,000 --> 00:25:31,000
在现在的机场机场一般有两种长度

786
00:25:31,000 --> 00:25:33,000
一种是叫做 float

787
00:25:33,000 --> 00:25:34,000
是 32 位长的

788
00:25:34,000 --> 00:25:36,000
然后另外一种是叫做 double

789
00:25:36,000 --> 00:25:37,000
是 64 位长的

790
00:25:37,000 --> 00:25:39,000
精度的话

791
00:25:39,000 --> 00:25:41,000
double 应该有 53 位的精度

792
00:25:41,000 --> 00:25:43,000
53 个 bit 的精度吧

793
00:25:44,000 --> 00:25:44,000
对

794
00:25:44,000 --> 00:25:50,000
53 个 bit 的精度应该是

795
00:25:52,000 --> 00:25:53,000
你是说小数点是后面的

796
00:25:53,000 --> 00:25:54,000
不管是小数点

797
00:25:54,000 --> 00:25:55,000
因为那个伏点数

798
00:25:55,000 --> 00:25:57,000
那个小数点是可以浮动的

799
00:25:57,000 --> 00:25:59,000
它精度只是单单它有效数字那一部分

800
00:25:59,000 --> 00:26:00,000
对

801
00:26:00,000 --> 00:26:00,000
对

802
00:26:00,000 --> 00:26:01,000
没错

803
00:26:01,000 --> 00:26:01,000
是这样

804
00:26:01,000 --> 00:26:03,000
然后 float 的话

805
00:26:03,000 --> 00:26:04,000
应该只有

806
00:26:04,000 --> 00:26:05,000
好像只有多少

807
00:26:05,000 --> 00:26:06,000
28

808
00:26:06,000 --> 00:26:08,000
728 位

809
00:26:08,000 --> 00:26:09,000
2700

810
00:26:09,000 --> 00:26:11,000
我相信一位的

811
00:26:12,000 --> 00:26:12,000
符号

812
00:26:12,000 --> 00:26:14,000
它有 27 个 bit

813
00:26:14,000 --> 00:26:15,000
但是它的实际的表示成

814
00:26:17,000 --> 00:26:17,000
对

815
00:26:17,000 --> 00:26:18,000
你说说 range

816
00:26:18,000 --> 00:26:18,000
对

817
00:26:18,000 --> 00:26:22,000
它的表达出的有效的数字

818
00:26:22,000 --> 00:26:24,000
好像只有 8 位还是 9 位

819
00:26:24,000 --> 00:26:25,000
就是 8 个有效数字

820
00:26:25,000 --> 00:26:25,000
9 个有效数字

821
00:26:25,000 --> 00:26:26,000
很小的一个数字

822
00:26:26,000 --> 00:26:27,000
反正对

823
00:26:28,000 --> 00:26:30,000
然后在实际约

824
00:26:30,000 --> 00:26:30,000
反正就会

825
00:26:30,000 --> 00:26:32,000
就跟编程其实会有点关系

826
00:26:32,000 --> 00:26:34,000
就是说如果你要做一个

827
00:26:34,000 --> 00:26:37,000
伏点数的加渐成熟的话

828
00:26:37,000 --> 00:26:38,000
你要特别小心这一点

829
00:26:38,000 --> 00:26:41,000
特别是你用 float 这种 32 位的

830
00:26:41,000 --> 00:26:43,000
精度的 32 位这种窄的

831
00:26:43,000 --> 00:26:44,000
伏点数的时候

832
00:26:44,000 --> 00:26:45,000
很容易用的

833
00:26:45,000 --> 00:26:46,000
用的就是发现

834
00:26:46,000 --> 00:26:47,000
比如说你做一个磊夹

835
00:26:47,000 --> 00:26:48,000
对吧

836
00:26:48,000 --> 00:26:49,000
你加完之后发现

837
00:26:49,000 --> 00:26:51,000
这个跟女想的出入怎么那么大

838
00:26:51,000 --> 00:26:52,000
就是因为伏点数

839
00:26:52,000 --> 00:26:54,000
这个精度在做怪

840
00:26:54,000 --> 00:26:55,000
就是你设想一下

841
00:26:55,000 --> 00:26:57,000
你加一个特别大的一个数字

842
00:26:57,000 --> 00:26:59,000
加上一个特别小的一个数字

843
00:26:59,000 --> 00:26:59,000
两家起来

844
00:26:59,000 --> 00:27:00,000
因为精度的问题

845
00:27:00,000 --> 00:27:02,000
可能直接就无效了

846
00:27:02,000 --> 00:27:03,000
但是如果说

847
00:27:03,000 --> 00:27:05,000
你很多特别小的数字

848
00:27:05,000 --> 00:27:06,000
磊夹起来

849
00:27:06,000 --> 00:27:07,000
你再加的一个特别大的数字

850
00:27:08,000 --> 00:27:11,000
你这个精度的牺牲

851
00:27:11,000 --> 00:27:12,000
导致的误差

852
00:27:12,000 --> 00:27:14,000
会出现累积的吗

853
00:27:15,000 --> 00:27:15,000
对

854
00:27:15,000 --> 00:27:18,000
所以这个面试有很多坑爹的事情

855
00:27:18,000 --> 00:27:19,000
对

856
00:27:19,000 --> 00:27:20,000
所以有一个 ruf 算

857
00:27:20,000 --> 00:27:21,000
就是如果能够

858
00:27:21,000 --> 00:27:23,000
不设施伏点数的话

859
00:27:23,000 --> 00:27:24,000
尽量不要适合伏点数

860
00:27:25,000 --> 00:27:27,000
在早期 10 分成的时候

861
00:27:27,000 --> 00:27:28,000
应该学到了一点

862
00:27:28,000 --> 00:27:30,000
刚才说除了解决方案

863
00:27:30,000 --> 00:27:32,000
除了用一个叫做 disable

864
00:27:32,000 --> 00:27:35,000
就是实际制的无线精度的

865
00:27:35,000 --> 00:27:38,000
一个酷去表达

866
00:27:38,000 --> 00:27:40,000
一个任意精度的数字

867
00:27:40,000 --> 00:27:40,000
还有一个方法

868
00:27:40,000 --> 00:27:42,000
就是用一个叫做 rational

869
00:27:42,000 --> 00:27:43,000
就是分数的形式

870
00:27:43,000 --> 00:27:44,000
或者 fraction

871
00:27:44,000 --> 00:27:46,000
它这个原理就比较简单了

872
00:27:46,000 --> 00:27:47,000
它说我们没有办法

873
00:27:48,000 --> 00:27:50,000
通过这个

874
00:27:50,000 --> 00:27:51,000
我们怕除进

875
00:27:51,000 --> 00:27:52,000
那我干脆不除

876
00:27:52,000 --> 00:27:52,000
对

877
00:27:52,000 --> 00:27:53,000
直接就按分子

878
00:27:53,000 --> 00:27:53,000
分母

879
00:27:53,000 --> 00:27:55,000
大家还记得小学学那个吗

880
00:27:55,000 --> 00:27:57,000
怎么去两个分数相乘的时候

881
00:27:57,000 --> 00:27:58,000
那个方法

882
00:27:58,000 --> 00:28:00,000
就是在程序上实现同样的原理

883
00:28:00,000 --> 00:28:01,000
最终得出来的结果

884
00:28:01,000 --> 00:28:02,000
还是一个分数

885
00:28:02,000 --> 00:28:04,000
就是几分之多少分之多少

886
00:28:04,000 --> 00:28:07,000
当然多少分子和分母都可能会比较大

887
00:28:07,000 --> 00:28:08,000
当然你可以通过

888
00:28:08,000 --> 00:28:09,000
消减什么

889
00:28:09,000 --> 00:28:11,000
公应数

890
00:28:11,000 --> 00:28:12,000
公约数的方法去

891
00:28:12,000 --> 00:28:14,000
把它尽量做成一个最大公约数

892
00:28:14,000 --> 00:28:16,000
我已经至少两次

893
00:28:16,000 --> 00:28:18,000
一听到你在 IT 工里面

894
00:28:18,000 --> 00:28:19,000
是说什么最大公约数

895
00:28:19,000 --> 00:28:20,000
对

896
00:28:20,000 --> 00:28:21,000
我每次都记不住

897
00:28:21,000 --> 00:28:22,000
到底是哪个是哪个

898
00:28:24,000 --> 00:28:24,000
对

899
00:28:24,000 --> 00:28:28,000
应该是最大公约数和最小公倍数

900
00:28:28,000 --> 00:28:29,000
最小公倍数

901
00:28:29,000 --> 00:28:29,000
对

902
00:28:29,000 --> 00:28:30,000
差不多

903
00:28:30,000 --> 00:28:31,000
然后具体是哪个

904
00:28:31,000 --> 00:28:32,000
我也忘了

905
00:28:32,000 --> 00:28:33,000
这些想法

906
00:28:34,000 --> 00:28:35,000
比较有意思的是

907
00:28:35,000 --> 00:28:37,000
在有些我们常见的语言里面

908
00:28:37,000 --> 00:28:39,000
它实现还有点奇怪

909
00:28:39,000 --> 00:28:39,000
比如说

910
00:28:42,000 --> 00:28:44,000
这个 C 可能还比较简单

911
00:28:44,000 --> 00:28:46,000
为什么 PHP 里面

912
00:28:46,000 --> 00:28:49,000
0.1 加 0.2 是出来是 0.3 呢

913
00:28:49,000 --> 00:28:50,000
然后发现 PHP

914
00:28:50,000 --> 00:28:52,000
这么世界上最强大的语言

915
00:28:52,000 --> 00:28:53,000
它偷偷的把这个

916
00:28:53,000 --> 00:28:55,000
0.3

917
00:28:55,000 --> 00:28:56,000
15 个 04

918
00:28:56,000 --> 00:28:59,000
这么一个

919
00:28:59,000 --> 00:29:01,000
辅典数转化成了一个字符券

920
00:29:01,000 --> 00:29:03,000
然后把它变为 0.3

921
00:29:05,000 --> 00:29:06,000
太强大了

922
00:29:06,000 --> 00:29:07,000
然后

923
00:29:07,000 --> 00:29:08,000
我不知道这个 MySQL 里面

924
00:29:08,000 --> 00:29:09,000
这个是怎么做的

925
00:29:09,000 --> 00:29:10,000
它这个原理是什么

926
00:29:10,000 --> 00:29:11,000
应该还是用的这种

927
00:29:11,000 --> 00:29:13,000
就是折中的办法

928
00:29:13,000 --> 00:29:15,000
就是四手五入的方法

929
00:29:16,000 --> 00:29:18,000
要看 SQL 是怎么实现的

930
00:29:18,000 --> 00:29:19,000
因为 SQL

931
00:29:20,000 --> 00:29:21,000
不是

932
00:29:21,000 --> 00:29:23,000
SQL 规范肯定是没有定义的

933
00:29:23,000 --> 00:29:24,000
没有说

934
00:29:24,000 --> 00:29:26,000
但是 MySQL 实现了 0.3

935
00:29:27,000 --> 00:29:28,000
对

936
00:29:28,000 --> 00:29:29,000
是个好问题

937
00:29:29,000 --> 00:29:30,000
然后在

938
00:29:31,000 --> 00:29:33,000
Python 里面有点意思

939
00:29:33,000 --> 00:29:34,000
Python 里面是

940
00:29:34,000 --> 00:29:35,000
如果你把它打印出来

941
00:29:35,000 --> 00:29:37,000
它是一个 0.3

942
00:29:37,000 --> 00:29:38,000
对吧

943
00:29:38,000 --> 00:29:38,000
对

944
00:29:38,000 --> 00:29:39,000
但是实际上

945
00:29:39,000 --> 00:29:41,000
数值应该还是 0.3

946
00:29:42,000 --> 00:29:44,000
所以会有一个算法

947
00:29:44,000 --> 00:29:45,000
去告诉说

948
00:29:45,000 --> 00:29:46,000
你要打印的这个值

949
00:29:46,000 --> 00:29:48,000
它是一个某一个

950
00:29:48,000 --> 00:29:50,000
更短的

951
00:29:50,000 --> 00:29:53,000
小数的定式值

952
00:29:53,000 --> 00:29:55,000
然后它会默认去把它定式

953
00:29:55,000 --> 00:29:56,000
这个 Python 的方法

954
00:29:56,000 --> 00:29:58,000
也是用跟 PHP 一样的

955
00:29:58,000 --> 00:29:59,000
就是通过转化成

956
00:29:59,000 --> 00:30:01,000
字符券的形式去做这个事

957
00:30:02,000 --> 00:30:02,000
对

958
00:30:02,000 --> 00:30:03,000
然后在 Python 3 里面

959
00:30:03,000 --> 00:30:06,000
这一点被纠正

960
00:30:06,000 --> 00:30:09,000
就是不要做这些莫名其妙的优化

961
00:30:09,000 --> 00:30:11,000
因为其实如果一个用户看到了

962
00:30:11,000 --> 00:30:13,000
值和它的实际的值不一样的话

963
00:30:13,000 --> 00:30:14,000
是又可能出麻烦

964
00:30:14,000 --> 00:30:14,000
对

965
00:30:14,000 --> 00:30:16,000
所以在实际使用中

966
00:30:16,000 --> 00:30:17,000
比如说你们做一些什么

967
00:30:19,000 --> 00:30:19,000
一个简单理论

968
00:30:19,000 --> 00:30:21,000
叫做一个工业的一个什么测量

969
00:30:21,000 --> 00:30:23,000
它读出来的这个数值

970
00:30:23,000 --> 00:30:25,000
它可能是一个

971
00:30:26,000 --> 00:30:27,000
辅典数的时候

972
00:30:27,000 --> 00:30:29,000
它就是怎么去判断

973
00:30:29,000 --> 00:30:30,000
就是比如说你要判断这个值

974
00:30:30,000 --> 00:30:34,000
是否是大于或者小一模合值的时候

975
00:30:34,000 --> 00:30:36,000
是要算上一个在合适的

976
00:30:36,000 --> 00:30:37,000
进度范围内吗

977
00:30:37,000 --> 00:30:37,000
还是怎么样

978
00:30:38,000 --> 00:30:41,000
工业上面一般会有一个指令的

979
00:30:42,000 --> 00:30:43,000
精确范围

980
00:30:43,000 --> 00:30:45,000
但不同工业不一样

981
00:30:45,000 --> 00:30:48,000
但不过大部分都是小数点之后

982
00:30:48,000 --> 00:30:48,000
三位

983
00:30:50,000 --> 00:30:51,000
就是说你在编程的时候

984
00:30:51,000 --> 00:30:54,000
你要判断两个辅典数的大小的时候

985
00:30:54,000 --> 00:30:55,000
你怎么办

986
00:30:55,000 --> 00:31:00,000
是你说要判断两个辅典数的相等于否

987
00:31:00,000 --> 00:31:02,000
还是大小不是比方

988
00:31:02,000 --> 00:31:02,000
对

989
00:31:03,000 --> 00:31:06,000
其实我觉得用判断两个辅典数

990
00:31:06,000 --> 00:31:07,000
是否相等这件事情

991
00:31:07,000 --> 00:31:09,000
本身就是跟你的初中师有

992
00:31:09,000 --> 00:31:11,000
这个常识是有相背的

993
00:31:11,000 --> 00:31:13,000
除非你特别理解这个 IEE 754

994
00:31:13,000 --> 00:31:14,000
到底怎么一回事

995
00:31:14,000 --> 00:31:14,000
对

996
00:31:16,000 --> 00:31:17,000
所以基本上

997
00:31:17,000 --> 00:31:17,000
这个世界里面

998
00:31:17,000 --> 00:31:19,000
辅典数是非常棘手的一个东西

999
00:31:19,000 --> 00:31:20,000
对

1000
00:31:20,000 --> 00:31:22,000
所以一般的话应该是两个数

1001
00:31:22,000 --> 00:31:22,000
A

1002
00:31:22,000 --> 00:31:23,000
要判断两个数

1003
00:31:23,000 --> 00:31:26,000
是否相近应该是用 A-B

1004
00:31:26,000 --> 00:31:27,000
然后算它的差值

1005
00:31:27,000 --> 00:31:28,000
是否在某一个预讯

1006
00:31:28,000 --> 00:31:30,000
然后看其实差值是不是在一个

1007
00:31:30,000 --> 00:31:31,000
对

1008
00:31:31,000 --> 00:31:34,000
这有点像工业里面造两零件

1009
00:31:34,000 --> 00:31:35,000
然后看两零件

1010
00:31:35,000 --> 00:31:36,000
是不是合乎要求

1011
00:31:36,000 --> 00:31:37,000
就要看它的偏差

1012
00:31:37,000 --> 00:31:41,000
是不是在一个可接受的范围之内

1013
00:31:41,000 --> 00:31:41,000
范围内的

1014
00:31:41,000 --> 00:31:42,000
对

1015
00:31:42,000 --> 00:31:43,000
对

1016
00:31:43,000 --> 00:31:44,000
这个还是蛯的反正

1017
00:31:44,000 --> 00:31:45,000
没错

1018
00:31:45,000 --> 00:31:46,000
万万的辅典数

1019
00:31:46,000 --> 00:31:47,000
你看这就是基层的科学

1020
00:31:47,000 --> 00:31:49,000
基层的工程全都差了

1021
00:31:49,000 --> 00:31:50,000
工程的区

1022
00:31:52,000 --> 00:31:53,000
OK

1023
00:31:53,000 --> 00:31:55,000
In theory there is no difference

1024
00:31:55,000 --> 00:31:56,000
impractical

1025
00:31:56,000 --> 00:31:58,000
我想那句话怎么说

1026
00:31:58,000 --> 00:31:59,000
In theory there is no difference

1027
00:31:59,000 --> 00:32:01,000
between theory and practical

1028
00:32:01,000 --> 00:32:03,000
impractical there is

1029
00:32:04,000 --> 00:32:04,000
不是

1030
00:32:04,000 --> 00:32:06,000
就叫做 In theory there is no difference

1031
00:32:06,000 --> 00:32:08,000
between theory and practice

1032
00:32:08,000 --> 00:32:09,000
practice

1033
00:32:09,000 --> 00:32:09,000
OK

1034
00:32:09,000 --> 00:32:10,000
impractice there is

1035
00:32:10,000 --> 00:32:11,000
对

1036
00:32:12,000 --> 00:32:16,000
那今天的主题就是比较

1037
00:32:16,000 --> 00:32:17,000
impractice 的一个东西

1038
00:32:20,000 --> 00:32:21,000
主题是命令行

1039
00:32:23,000 --> 00:32:24,000
对

1040
00:32:24,000 --> 00:32:24,000
这也是

1041
00:32:24,000 --> 00:32:25,000
这是我们上期提到吗

1042
00:32:25,000 --> 00:32:27,000
还是上上期提到的一个主题

1043
00:32:27,000 --> 00:32:29,000
反正某一期你承诺过

1044
00:32:29,000 --> 00:32:29,000
对

1045
00:32:29,000 --> 00:32:30,000
你就要讲

1046
00:32:31,000 --> 00:32:31,000
对

1047
00:32:31,000 --> 00:32:33,000
然后其实这个主题也的确是

1048
00:32:33,000 --> 00:32:35,000
挺挺值得说的

1049
00:32:35,000 --> 00:32:38,000
因为尤其是对于初学者来说

1050
00:32:38,000 --> 00:32:39,000
或者是对于

1051
00:32:40,000 --> 00:32:43,000
正在朝这条路上

1052
00:32:43,000 --> 00:32:45,000
越走越远的人来说

1053
00:32:45,000 --> 00:32:46,000
命令行是一个

1054
00:32:48,000 --> 00:32:49,000
是一个绕不开的话题

1055
00:32:49,000 --> 00:32:51,000
就就基本上

1056
00:32:51,000 --> 00:32:52,000
其实我觉得这个

1057
00:32:52,000 --> 00:32:54,000
这个我要先问一个问题

1058
00:32:54,000 --> 00:32:58,000
现在很多这种新就是新人们

1059
00:32:58,000 --> 00:33:00,000
好像他们学电脑都不用

1060
00:33:00,000 --> 00:33:01,000
都直接开完命令行了

1061
00:33:01,000 --> 00:33:03,000
后来很多用 Windows 的人

1062
00:33:03,000 --> 00:33:04,000
都基本不用命令行

1063
00:33:04,000 --> 00:33:06,000
但我觉得将来还是会

1064
00:33:06,000 --> 00:33:07,000
早晚有一天你会撞上

1065
00:33:08,000 --> 00:33:09,000
所以你觉得他们还是会

1066
00:33:09,000 --> 00:33:11,000
把这课给补上是吧

1067
00:33:11,000 --> 00:33:12,000
对

1068
00:33:12,000 --> 00:33:13,000
其实这也是一个

1069
00:33:13,000 --> 00:33:15,000
这是一个值得讨论的话题

1070
00:33:15,000 --> 00:33:18,000
就是在我们小时候

1071
00:33:18,000 --> 00:33:19,000
在

1072
00:33:20,000 --> 00:33:22,000
大家就至少在 Windows

1073
00:33:22,000 --> 00:33:24,000
或者是 DOS 微软的

1074
00:33:24,000 --> 00:33:26,000
操作系统用户的

1075
00:33:26,000 --> 00:33:28,000
早期的同年记忆里面

1076
00:33:28,000 --> 00:33:30,000
计算机开机是不会自动记住

1077
00:33:30,000 --> 00:33:32,000
图形界面的同学们

1078
00:33:32,000 --> 00:33:33,000
像你们这些

1079
00:33:34,000 --> 00:33:36,000
保守恋爱的

1080
00:33:36,000 --> 00:33:37,000
麦克用户一开机

1081
00:33:37,000 --> 00:33:40,000
就可以看到一个闪闪发光的大苹果

1082
00:33:40,000 --> 00:33:41,000
然后一进去就有鼠标用

1083
00:33:41,000 --> 00:33:43,000
这种事情在

1084
00:33:43,000 --> 00:33:45,000
至少 90 年的中国是不可想象的

1085
00:33:47,000 --> 00:33:48,000
对吧

1086
00:33:48,000 --> 00:33:48,000
在 Windows

1087
00:33:48,000 --> 00:33:50,000
开机先写一个 BioSpring

1088
00:33:50,000 --> 00:33:51,000
对吧

1089
00:33:51,000 --> 00:33:51,000
对

1090
00:33:51,000 --> 00:33:53,000
然后进到 CDOS 里面

1091
00:33:53,000 --> 00:33:54,000
你可以听到我们熟悉的

1092
00:33:54,000 --> 00:33:55,000
磁盘自解的声音

1093
00:33:55,000 --> 00:33:56,000
对

1094
00:33:56,000 --> 00:33:57,000
我们应该把磁盘自解的声音

1095
00:33:57,000 --> 00:33:58,000
拿来当我们的开头曲

1096
00:33:58,000 --> 00:34:00,000
用的我就像

1097
00:34:00,000 --> 00:34:03,000
本那个怎么形成一个开头曲

1098
00:34:03,000 --> 00:34:07,000
就像 ATP 一样

1099
00:34:07,000 --> 00:34:09,000
他们用调水桃器的声音

1100
00:34:09,000 --> 00:34:13,000
我们可以用磁盘自解的声音

1101
00:34:13,000 --> 00:34:14,000
来当开头曲

1102
00:34:15,000 --> 00:34:17,000
终于找到一个符合本节目

1103
00:34:17,000 --> 00:34:22,000
主旨的这么一个声音的特制了

1104
00:34:22,000 --> 00:34:23,000
我是在辅社 4 里面

1105
00:34:23,000 --> 00:34:24,000
因为辅社 4 里面

1106
00:34:24,000 --> 00:34:26,000
经常需要去黑衣街 terminal

1107
00:34:26,000 --> 00:34:28,000
然后 terminal 有个特别的声音

1108
00:34:28,000 --> 00:34:29,000
我是听那个声音的时候想到

1109
00:34:31,000 --> 00:34:31,000
ok

1110
00:34:31,000 --> 00:34:32,000
yeah

1111
00:34:32,000 --> 00:34:33,000
treats

1112
00:34:33,000 --> 00:34:34,000
然后对

1113
00:34:34,000 --> 00:34:35,000
然后我们在 90 代的时候

1114
00:34:35,000 --> 00:34:39,000
需要开机看到一个 BioS 自解

1115
00:34:39,000 --> 00:34:41,000
然后屏幕清明

1116
00:34:41,000 --> 00:34:44,000
左上角出现一个闪烁的 C 帽号

1117
00:34:44,000 --> 00:34:46,000
反斜杠大雨号

1118
00:34:46,000 --> 00:34:47,000
然后一个闪烁

1119
00:34:47,000 --> 00:34:49,000
等一下 90 年代你去看他 C 了吗

1120
00:34:49,000 --> 00:34:50,000
应该是 A 或是 B 吧

1121
00:34:52,000 --> 00:34:55,000
对 A 帽号反斜杠大雨号

1122
00:34:56,000 --> 00:34:56,000
没错

1123
00:34:58,000 --> 00:34:59,000
C 啊

1124
00:34:59,000 --> 00:35:01,000
我没有那么 Hardcore 了

1125
00:35:01,000 --> 00:35:04,000
我觉得我小时候就在我的那个

1126
00:35:04,000 --> 00:35:06,000
你一来就有磁盘

1127
00:35:06,000 --> 00:35:06,000
就一忙

1128
00:35:06,000 --> 00:35:09,000
中央学习机之后的电脑

1129
00:35:09,000 --> 00:35:09,000
其实我遇到了

1130
00:35:09,000 --> 00:35:11,000
已经大部分都是带磁盘的

1131
00:35:12,000 --> 00:35:13,000
想想

1132
00:35:14,000 --> 00:35:14,000
对

1133
00:35:14,000 --> 00:35:17,000
你没用过那种叫做无盘工作站吗

1134
00:35:19,000 --> 00:35:21,000
无盘工作站是

1135
00:35:21,000 --> 00:35:23,000
就那个时候磁盘会吗

1136
00:35:23,000 --> 00:35:25,000
联网了之后才有的

1137
00:35:26,000 --> 00:35:26,000
我知道

1138
00:35:26,000 --> 00:35:29,000
就是有些那种以前那种叫做什么

1139
00:35:29,000 --> 00:35:29,000
来的

1140
00:35:30,000 --> 00:35:31,000
叫机房

1141
00:35:31,000 --> 00:35:32,000
对

1142
00:35:32,000 --> 00:35:34,000
它不是每台电脑都有磁盘的

1143
00:35:34,000 --> 00:35:35,000
我知道

1144
00:35:35,000 --> 00:35:36,000
但我的意思是

1145
00:35:36,000 --> 00:35:37,000
我第一次接触计算机

1146
00:35:37,000 --> 00:35:40,000
就接触 IBM PC 兼容机

1147
00:35:40,000 --> 00:35:42,000
应该是在我爸单位的

1148
00:35:42,000 --> 00:35:45,000
一个秘书室

1149
00:35:45,000 --> 00:35:46,000
类似的这么一个地方

1150
00:35:46,000 --> 00:35:49,000
然后那个电脑不仅有磁盘

1151
00:35:49,000 --> 00:35:50,000
还有有游戏在上面

1152
00:35:50,000 --> 00:35:52,000
所以我第一次接触到 C 帽号

1153
00:35:52,000 --> 00:35:53,000
反斜杠大雨号

1154
00:35:53,000 --> 00:35:54,000
应该是

1155
00:35:55,000 --> 00:35:57,000
那你运气还是蛮好的

1156
00:35:57,000 --> 00:35:57,000
对

1157
00:35:57,000 --> 00:35:58,000
在此之前

1158
00:35:58,000 --> 00:36:00,000
我只能在那个中华学期上

1159
00:36:00,000 --> 00:36:03,000
用一个录音带的那个读曲的东西

1160
00:36:03,000 --> 00:36:04,000
但是中华学期反正没有那个

1161
00:36:04,000 --> 00:36:06,000
那就是 Apple II

1162
00:36:06,000 --> 00:36:07,000
反正没有磁盘的感觉

1163
00:36:07,000 --> 00:36:09,000
就没有那个盘幅的感觉

1164
00:36:10,000 --> 00:36:10,000
OK

1165
00:36:10,000 --> 00:36:11,000
对

1166
00:36:11,000 --> 00:36:13,000
所以进到 C 之后

1167
00:36:13,000 --> 00:36:14,000
要怎么进图形前面

1168
00:36:14,000 --> 00:36:15,000
还要插个 WIN 吧

1169
00:36:15,000 --> 00:36:15,000
是不是

1170
00:36:15,000 --> 00:36:16,000
对

1171
00:36:16,000 --> 00:36:17,000
然后打 WIN 回车

1172
00:36:17,000 --> 00:36:18,000
然后才可以进 WINOS

1173
00:36:19,000 --> 00:36:22,000
我 WINOS 312

1174
00:36:23,000 --> 00:36:24,000
WINOS 312

1175
00:36:24,000 --> 00:36:25,000
WINOS 312 是简体周围版

1176
00:36:25,000 --> 00:36:27,000
WINOS 311 只有

1177
00:36:27,000 --> 00:36:27,000
像

1178
00:36:27,000 --> 00:36:27,000
对

1179
00:36:27,000 --> 00:36:29,000
世界其他一版本特别转密

1180
00:36:29,000 --> 00:36:30,000
对

1181
00:36:31,000 --> 00:36:34,000
WINOS 311 或者 WINOS 312 是那个 WINOS 95

1182
00:36:34,000 --> 00:36:36,000
之前世界上最流行的 WINOS 版

1183
00:36:39,000 --> 00:36:41,000
《十万星》和演过一部电影叫什么

1184
00:36:41,000 --> 00:36:42,000
叫什么

1185
00:36:42,000 --> 00:36:44,000
谎言语

1186
00:36:44,000 --> 00:36:45,000
真实谎言

1187
00:36:45,000 --> 00:36:46,000
真实的谎言里面

1188
00:36:48,000 --> 00:36:49,000
它潜入一个

1189
00:36:49,000 --> 00:36:52,000
反正是阿拉伯语的这么一个机构里面

1190
00:36:52,000 --> 00:36:55,000
然后 WINOS 的 312 上面

1191
00:36:55,000 --> 00:36:57,000
显示的是阿拉伯语的 WINOS

1192
00:36:57,000 --> 00:37:00,000
我挺惊讶的印象很深刻

1193
00:37:00,000 --> 00:37:02,000
所以在那个时代是开机

1194
00:37:02,000 --> 00:37:04,000
不默认进图形界面的

1195
00:37:04,000 --> 00:37:06,000
所以那是一个非常

1196
00:37:07,000 --> 00:37:08,000
那个觉得我还记得有一个

1197
00:37:08,000 --> 00:37:11,000
就是当时就是图形界面

1198
00:37:11,000 --> 00:37:13,000
还没有完全普及

1199
00:37:13,000 --> 00:37:14,000
或者说有些机器太古老

1200
00:37:14,000 --> 00:37:16,000
它跑那个图形界面会比较慢

1201
00:37:16,000 --> 00:37:20,000
但是还用那个叫做命令行的文件管理软件

1202
00:37:20,000 --> 00:37:22,000
叫什么来的

1203
00:37:22,000 --> 00:37:23,000
什么 commander

1204
00:37:23,000 --> 00:37:24,000
total commander

1205
00:37:24,000 --> 00:37:25,000
total commander

1206
00:37:25,000 --> 00:37:25,000
对

1207
00:37:25,000 --> 00:37:26,000
PC tools

1208
00:37:26,000 --> 00:37:27,000
total commander

1209
00:37:27,000 --> 00:37:30,000
还有好多东西都是命令行下面的一个

1210
00:37:30,000 --> 00:37:31,000
命令行界面

1211
00:37:31,000 --> 00:37:32,000
就是命令叫什么

1212
00:37:32,000 --> 00:37:35,000
有一个专门名字来形容这种东西

1213
00:37:35,000 --> 00:37:36,000
CUI

1214
00:37:36,000 --> 00:37:37,000
就是 command line user interface

1215
00:37:37,000 --> 00:37:39,000
就是它虽然不是图形界面的

1216
00:37:39,000 --> 00:37:41,000
但是它是用各种各样的符号

1217
00:37:41,000 --> 00:37:43,000
来组成一个可以点的窗口

1218
00:37:44,000 --> 00:37:45,000
可以相当的

1219
00:37:45,000 --> 00:37:46,000
有鼠标可以用

1220
00:37:46,000 --> 00:37:47,000
对

1221
00:37:47,000 --> 00:37:50,000
然后鼠标就是一个你一大块字符

1222
00:37:50,000 --> 00:37:51,000
一个字符

1223
00:37:51,000 --> 00:37:52,000
就是那个

1224
00:37:53,000 --> 00:37:56,000
它应该是个 80×24 个字符的窗口

1225
00:37:56,000 --> 00:37:57,000
对

1226
00:37:57,000 --> 00:37:59,000
然后鼠标就跟上占一格

1227
00:37:59,000 --> 00:38:00,000
一个字符的位置

1228
00:38:00,000 --> 00:38:01,000
对

1229
00:38:01,000 --> 00:38:02,000
然后挪动鼠标的时候

1230
00:38:02,000 --> 00:38:03,000
屏幕上就有一个大黑块来的

1231
00:38:05,000 --> 00:38:08,000
其实在好多 Linux 安装界面里面

1232
00:38:08,000 --> 00:38:10,000
还是可以看到这个东西

1233
00:38:10,000 --> 00:38:11,000
apetitius

1234
00:38:13,000 --> 00:38:14,000
然后

1235
00:38:14,000 --> 00:38:17,000
其实 Linux 下面的这种工具

1236
00:38:17,000 --> 00:38:20,000
一般是很多的机会叫 N-cur

1237
00:38:20,000 --> 00:38:21,000
N-curse

1238
00:38:21,000 --> 00:38:22,000
对

1239
00:38:22,000 --> 00:38:23,000
N-curse 这个包来写的

1240
00:38:23,000 --> 00:38:24,000
然后还挺长

1241
00:38:24,000 --> 00:38:26,000
就还算长用吧

1242
00:38:26,000 --> 00:38:27,000
至少

1243
00:38:27,000 --> 00:38:28,000
其实在我们在节目

1244
00:38:28,000 --> 00:38:31,000
最后会介绍一些类似这种工具

1245
00:38:31,000 --> 00:38:33,000
那这里就先放一放

1246
00:38:33,000 --> 00:38:33,000
对

1247
00:38:33,000 --> 00:38:33,000
扯软了

1248
00:38:33,000 --> 00:38:35,000
反正在那个时候

1249
00:38:35,000 --> 00:38:38,000
你可能你打开电脑会

1250
00:38:38,000 --> 00:38:39,000
你有一个明确的想法

1251
00:38:39,000 --> 00:38:40,000
说今天我要干什么

1252
00:38:40,000 --> 00:38:41,000
然后跟着你要干什么

1253
00:38:41,000 --> 00:38:43,000
你要决定说

1254
00:38:43,000 --> 00:38:47,000
是在 DOS 的命令提示服

1255
00:38:47,000 --> 00:38:49,000
下面打比如说

1256
00:38:49,000 --> 00:38:51,000
PL

1257
00:38:51,000 --> 00:38:54,000
或者是 CNC

1258
00:38:54,000 --> 00:38:56,000
还是 DiWin

1259
00:38:56,000 --> 00:38:57,000
因为如果你要玩游戏的话

1260
00:38:57,000 --> 00:38:59,000
你可能不需要那个图形界面的操作

1261
00:38:59,000 --> 00:39:02,000
你只需要打入那个游戏的名字

1262
00:39:02,000 --> 00:39:03,000
然后游戏就会独占整台机场机

1263
00:39:03,000 --> 00:39:05,000
然后把所有

1264
00:39:05,000 --> 00:39:07,000
大富翁的那个启动名字

1265
00:39:07,000 --> 00:39:08,000
不是 rich

1266
00:39:08,000 --> 00:39:08,000
我记得

1267
00:39:08,000 --> 00:39:08,000
对

1268
00:39:08,000 --> 00:39:09,000
没错

1269
00:39:09,000 --> 00:39:11,000
还有三国

1270
00:39:11,000 --> 00:39:14,000
什么战国群传之类的

1271
00:39:14,000 --> 00:39:17,000
你就都需要在那个盘幅下

1272
00:39:17,000 --> 00:39:18,000
还有输入这个

1273
00:39:18,000 --> 00:39:21,000
金庸群侠传也是这样吧

1274
00:39:21,000 --> 00:39:21,000
对

1275
00:39:21,000 --> 00:39:23,000
金庸群侠传也是

1276
00:39:23,000 --> 00:39:25,000
就在那个时候很多人都记

1277
00:39:25,000 --> 00:39:25,000
先见

1278
00:39:25,000 --> 00:39:26,000
先见

1279
00:39:26,000 --> 00:39:27,000
不要忘了这个刚刚说

1280
00:39:27,000 --> 00:39:29,000
对

1281
00:39:29,000 --> 00:39:30,000
然后那个

1282
00:39:30,000 --> 00:39:31,000
拍片是什么

1283
00:39:31,000 --> 00:39:34,000
就是那个

1284
00:39:34,000 --> 00:39:37,000
这个游戏的英文名很奇怪的

1285
00:39:37,000 --> 00:39:38,000
叫做 PALA 0 之类的

1286
00:39:38,000 --> 00:39:40,000
就是十字军的那个词

1287
00:39:40,000 --> 00:39:41,000
还是我记错了

1288
00:39:41,000 --> 00:39:42,000
为什么会这样

1289
00:39:42,000 --> 00:39:43,000
对我也不知道

1290
00:39:43,000 --> 00:39:44,000
我觉得很奇怪

1291
00:39:45,000 --> 00:39:46,000
反正在那个时候

1292
00:39:46,000 --> 00:39:47,000
很多人不学电脑

1293
00:39:47,000 --> 00:39:49,000
或者说没有那么

1294
00:39:49,000 --> 00:39:49,000
tack savvy

1295
00:39:49,000 --> 00:39:50,000
来自于很多小孩子

1296
00:39:50,000 --> 00:39:52,000
可能打开电脑

1297
00:39:52,000 --> 00:39:53,000
唯一会做的一件事情

1298
00:39:53,000 --> 00:39:54,000
就是在那个名项

1299
00:39:54,000 --> 00:39:55,000
后面输入这个

1300
00:39:55,000 --> 00:39:56,000
游戏的名字

1301
00:39:56,000 --> 00:39:57,000
然后按回车

1302
00:39:57,000 --> 00:39:59,000
这就已经算是

1303
00:39:59,000 --> 00:40:00,000
懂得表象

1304
00:40:00,000 --> 00:40:00,000
对

1305
00:40:00,000 --> 00:40:03,000
这大概就是相当于在 Windows 下面

1306
00:40:03,000 --> 00:40:04,000
你会按开始菜单

1307
00:40:04,000 --> 00:40:05,000
就是这种感觉

1308
00:40:07,000 --> 00:40:08,000
对

1309
00:40:08,000 --> 00:40:09,000
后来 1995 年

1310
00:40:09,000 --> 00:40:10,000
有了 Windows 9

1311
00:40:10,000 --> 00:40:12,000
整个世界才

1312
00:40:12,000 --> 00:40:14,000
进入一个就是开机

1313
00:40:14,000 --> 00:40:14,000
默认

1314
00:40:14,000 --> 00:40:16,000
进图形界面的时代

1315
00:40:16,000 --> 00:40:17,000
当然苹果用户

1316
00:40:17,000 --> 00:40:17,000
意外

1317
00:40:17,000 --> 00:40:19,000
但我们至少我们

1318
00:40:19,000 --> 00:40:21,000
我们小时候都不是苹果

1319
00:40:22,000 --> 00:40:23,000
有了

1320
00:40:23,000 --> 00:40:24,000
你是吧

1321
00:40:24,000 --> 00:40:26,000
你不是从苹果机开始起家

1322
00:40:26,000 --> 00:40:27,000
但是

1323
00:40:27,000 --> 00:40:27,000
Apple 2

1324
00:40:27,000 --> 00:40:28,000
但是 Apple 2

1325
00:40:28,000 --> 00:40:31,000
开机也不是进图形界面的

1326
00:40:31,000 --> 00:40:32,000
对 Apple 2 还是

1327
00:40:32,000 --> 00:40:33,000
我的意思是

1328
00:40:33,000 --> 00:40:34,000
除非你是 Micintosh

1329
00:40:34,000 --> 00:40:36,000
或者你是 Apple Lisa 的用户

1330
00:40:36,000 --> 00:40:38,000
你小时候是 Apple Lisa 的用户

1331
00:40:38,000 --> 00:40:39,000
那你

1332
00:40:39,000 --> 00:40:40,000
那你肯定不会跟我们是

1333
00:40:40,000 --> 00:40:41,000
同一个阶级的人

1334
00:40:41,000 --> 00:40:42,000
所以

1335
00:40:42,000 --> 00:40:44,000
我的意思是

1336
00:40:44,000 --> 00:40:45,000
对

1337
00:40:45,000 --> 00:40:47,000
在普通人的童年里面

1338
00:40:47,000 --> 00:40:48,000
在中国普通人的童年里面

1339
00:40:48,000 --> 00:40:50,000
很少有人会接触到

1340
00:40:50,000 --> 00:40:52,000
以及开机进入图形界面的电脑

1341
00:40:53,000 --> 00:40:55,000
当然这是我们那个时代

1342
00:40:55,000 --> 00:40:57,000
现在很多人可能你

1343
00:40:57,000 --> 00:40:58,000
我相信我们的听众里面

1344
00:40:58,000 --> 00:41:01,000
很多人已经在 Windows 9.5 发布会之后出生了

1345
00:41:01,000 --> 00:41:02,000
所以

1346
00:41:06,000 --> 00:41:06,000
OK

1347
00:41:06,000 --> 00:41:07,000
对

1348
00:41:07,000 --> 00:41:07,000
come on

1349
00:41:07,000 --> 00:41:08,000
go on

1350
00:41:08,000 --> 00:41:10,000
the hard code truth

1351
00:41:12,000 --> 00:41:12,000
对了

1352
00:41:12,000 --> 00:41:14,000
那接着讲历史吧

1353
00:41:14,000 --> 00:41:15,000
这个命令行的历史

1354
00:41:15,000 --> 00:41:16,000
要追根溯源

1355
00:41:16,000 --> 00:41:18,000
其实还蛮久远的

1356
00:41:18,000 --> 00:41:19,000
对

1357
00:41:19,000 --> 00:41:21,000
其实这是一个非常自然的事情

1358
00:41:21,000 --> 00:41:23,000
就是在早期

1359
00:41:23,000 --> 00:41:24,000
呃

1360
00:41:24,000 --> 00:41:24,000
早到什么时候

1361
00:41:24,000 --> 00:41:26,000
就是在 50 年来

1362
00:41:26,000 --> 00:41:26,000
60 年来

1363
00:41:26,000 --> 00:41:26,000
根本

1364
00:41:26,000 --> 00:41:29,000
世界上根本没有人想过要在

1365
00:41:29,000 --> 00:41:33,000
要要能够实实的在屏幕上画出一个图形

1366
00:41:33,000 --> 00:41:35,000
然后你去操作它这种事情

1367
00:41:35,000 --> 00:41:37,000
虽然那个时候电视已经问世了

1368
00:41:37,000 --> 00:41:38,000
嗯哼

1369
00:41:38,000 --> 00:41:38,000
嗯

1370
00:41:39,000 --> 00:41:41,000
等等电视什么时候问世

1371
00:41:41,000 --> 00:41:43,000
1955 几年

1372
00:41:43,000 --> 00:41:44,000
问世

1373
00:41:44,000 --> 00:41:45,000
对

1374
00:41:45,000 --> 00:41:46,000
然后

1375
00:41:46,000 --> 00:41:48,000
后世 1955 年开始普及了

1376
00:41:48,000 --> 00:41:50,000
但是 1955 几年的计算机

1377
00:41:50,000 --> 00:41:54,000
却没有采用电视来做来做他们的显示中端

1378
00:41:54,000 --> 00:41:56,000
而是采用一种叫做 Teletub 的东西

1379
00:41:56,000 --> 00:41:59,000
我们现在一般翻译成电传打字机

1380
00:42:02,000 --> 00:42:03,000
它

1381
00:42:03,000 --> 00:42:04,000
顾名思义嘛

1382
00:42:04,000 --> 00:42:06,000
就是可以用电

1383
00:42:06,000 --> 00:42:10,000
可以用可以远程传输数据的打字机

1384
00:42:10,000 --> 00:42:12,000
打字机的意思就是你按一个键

1385
00:42:12,000 --> 00:42:14,000
然后你前面有一个纸

1386
00:42:14,000 --> 00:42:14,000
纸骨

1387
00:42:14,000 --> 00:42:15,000
然后这个纸骨

1388
00:42:15,000 --> 00:42:17,000
这个滚动了纸卷

1389
00:42:17,000 --> 00:42:19,000
上面会显示说你打字符

1390
00:42:19,000 --> 00:42:22,000
然后这个电传打字机是 Teletub

1391
00:42:22,000 --> 00:42:25,000
就是由 Teletub 公司所制造的

1392
00:42:25,000 --> 00:42:27,000
然后 Teletub 公司所制造的这些机器在

1393
00:42:27,000 --> 00:42:29,000
现在末 60 年代初的时候

1394
00:42:29,000 --> 00:42:32,000
是基本上是遍布整个

1395
00:42:32,000 --> 00:42:32,000
啊

1396
00:42:32,000 --> 00:42:34,000
西方世界就是

1397
00:42:34,000 --> 00:42:35,000
这尤其是美国

1398
00:42:35,000 --> 00:42:36,000
基本上每一个

1399
00:42:36,000 --> 00:42:38,000
每个大学

1400
00:42:38,000 --> 00:42:41,000
每一个机构都会有

1401
00:42:41,000 --> 00:42:42,000
因为这个东西真的是非常的

1402
00:42:42,000 --> 00:42:44,000
非常的

1403
00:42:44,000 --> 00:42:46,000
在那个时候就像一个

1404
00:42:46,000 --> 00:42:47,000
像什么

1405
00:42:47,000 --> 00:42:48,000
像有点可以的类比

1406
00:42:48,000 --> 00:42:50,000
为今天的什么东西呢

1407
00:42:50,000 --> 00:42:52,000
就点击个键

1408
00:42:52,000 --> 00:42:56,000
其实就是有点像今天的笔记本电脑

1409
00:42:56,000 --> 00:42:58,000
就是基本上

1410
00:42:58,000 --> 00:42:59,000
可以用到非常多

1411
00:42:59,000 --> 00:43:05,000
然后有点稍微有点尊严的地方都会弄

1412
00:43:05,000 --> 00:43:09,000
其实你有用过这个电传打字机这种实体吗

1413
00:43:09,000 --> 00:43:10,000
我还没有老要这个地步

1414
00:43:10,000 --> 00:43:12,000
我只在德意志博物馆里面见过

1415
00:43:12,000 --> 00:43:14,000
你用过

1416
00:43:14,000 --> 00:43:16,000
我也只是在电影或者是博物馆里面见过

1417
00:43:16,000 --> 00:43:19,000
其实并没有用过这个东西

1418
00:43:19,000 --> 00:43:21,000
然后我印象最深刻的应该是用这个

1419
00:43:21,000 --> 00:43:24,000
就是那个船叫做 Stop Tick

1420
00:43:24,000 --> 00:43:25,000
就是股票的

1421
00:43:25,000 --> 00:43:28,000
因为这以前的那种股票交易所

1422
00:43:28,000 --> 00:43:30,000
他可能是用电传打字机

1423
00:43:30,000 --> 00:43:32,000
像一个很长的指代打出来

1424
00:43:32,000 --> 00:43:34,000
股票的价钱

1425
00:43:34,000 --> 00:43:34,000
实时报价

1426
00:43:36,000 --> 00:43:37,000
只见过这种用力

1427
00:43:37,000 --> 00:43:40,000
其他的用力还真的蛮少见

1428
00:43:40,000 --> 00:43:41,000
然后在

1429
00:43:41,000 --> 00:43:45,000
我记得我是在以前读一篇就是讲操作的

1430
00:43:46,000 --> 00:43:49,000
历史文章里面说那个作者

1431
00:43:49,000 --> 00:43:50,000
当时他还是一个中学生

1432
00:43:50,000 --> 00:43:53,000
然后他们学编程方法是

1433
00:43:53,000 --> 00:43:55,000
现在一张纸上

1434
00:43:55,000 --> 00:43:57,000
仔细写下自己想要写的程序

1435
00:43:57,000 --> 00:43:59,000
好像是 Fortran 还是 Tasco 的程序

1436
00:44:00,000 --> 00:44:02,000
然后第二天拿这张纸去

1437
00:44:02,000 --> 00:44:06,000
学校的图书馆的一间房子里面

1438
00:44:06,000 --> 00:44:11,000
然后把自己的程序输入到一个打孔机上

1439
00:44:11,000 --> 00:44:14,000
打孔机会根据你按下的键

1440
00:44:14,000 --> 00:44:18,000
来把一个打孔纸带

1441
00:44:18,000 --> 00:44:18,000
打上口

1442
00:44:18,000 --> 00:44:22,000
然后把这些打好孔的卡片放到一个

1443
00:44:22,000 --> 00:44:25,000
电传打字机的输入槽里面

1444
00:44:25,000 --> 00:44:27,000
然后这电传打字机可以把

1445
00:44:27,000 --> 00:44:31,000
这些打孔的卡

1446
00:44:31,000 --> 00:44:33,000
这些打了孔的卡片

1447
00:44:33,000 --> 00:44:37,000
利用电传打字机的调制几条器

1448
00:44:37,000 --> 00:44:38,000
连上电话

1449
00:44:38,000 --> 00:44:40,000
然后输入到远端的一台计算机上

1450
00:44:40,000 --> 00:44:43,000
然后帮你执行你的程序

1451
00:44:43,000 --> 00:44:44,000
然后再把这个结果传回来

1452
00:44:46,000 --> 00:44:50,000
对整个过程我还是觉得读的就是觉得非常的惊悚

1453
00:44:50,000 --> 00:44:51,000
因为你会很难想象说

1454
00:44:51,000 --> 00:44:53,000
我考写这么一个程序

1455
00:44:53,000 --> 00:44:55,000
比如 Print Hallower 在那个时候

1456
00:44:55,000 --> 00:44:57,000
可能需要两天的这件事

1457
00:44:58,000 --> 00:44:59,000
对

1458
00:44:59,000 --> 00:45:01,000
而且刚才提到的一个细节

1459
00:45:01,000 --> 00:45:05,000
就是它一个电传打字机会需要跟远端的一台电脑联络

1460
00:45:05,000 --> 00:45:07,000
对吧

1461
00:45:07,000 --> 00:45:08,000
但是就有一个问题

1462
00:45:08,000 --> 00:45:13,000
就是在贝尔实验室

1463
00:45:13,000 --> 00:45:15,000
不是贝尔实验室

1464
00:45:15,000 --> 00:45:18,000
就电话是由贝尔公司发明的

1465
00:45:18,000 --> 00:45:19,000
对吧

1466
00:45:19,000 --> 00:45:21,000
但是有些人会说他是爱奇生发明的

1467
00:45:21,000 --> 00:45:25,000
但是就是如果你没有被中学课文骗过

1468
00:45:25,000 --> 00:45:26,000
骗到了电脑

1469
00:45:26,000 --> 00:45:28,000
其实是贝尔发明的

1470
00:45:28,000 --> 00:45:31,000
然后成立了贝尔公司

1471
00:45:31,000 --> 00:45:35,000
贝尔公司到 1981 年还是哪一年为止

1472
00:45:35,000 --> 00:45:39,000
一直都是美国一个占垄断的电话公司

1473
00:45:39,000 --> 00:45:41,000
就是如果你在美国使用电话的话

1474
00:45:41,000 --> 00:45:43,000
那你使用一定是贝尔公司服务

1475
00:45:43,000 --> 00:45:45,000
就是 90 年代的中国电信

1476
00:45:45,000 --> 00:45:46,000
没错

1477
00:45:46,000 --> 00:45:46,000
就是这种感觉

1478
00:45:46,000 --> 00:45:49,000
所以我们通过读历史就知道

1479
00:45:49,000 --> 00:45:52,000
这个电信公司永远是邪恶的

1480
00:45:52,000 --> 00:45:53,000
在 60 年代的时候

1481
00:45:53,000 --> 00:45:56,000
贝尔公司有这么一条规定

1482
00:45:56,000 --> 00:45:59,000
就是我的电话线路只能用来打电话

1483
00:45:59,000 --> 00:46:02,000
你不能在上面传出其他电信号

1484
00:46:02,000 --> 00:46:04,000
这就意味着你不能说我把电话拆了

1485
00:46:04,000 --> 00:46:06,000
然后把它连到电池打字机上

1486
00:46:06,000 --> 00:46:10,000
然后这台电池打字机和另外一台电池打字机联络

1487
00:46:10,000 --> 00:46:11,000
那怎么办呢

1488
00:46:11,000 --> 00:46:13,000
人们有这么一个方法

1489
00:46:13,000 --> 00:46:16,000
就是用一个小盒子

1490
00:46:16,000 --> 00:46:20,000
然后这小盒子上面有两个圆形的

1491
00:46:20,000 --> 00:46:22,000
用这个皮

1492
00:46:22,000 --> 00:46:25,000
人道革包起来的这么一个两个机座

1493
00:46:25,000 --> 00:46:27,000
然后你把电话拿起来

1494
00:46:27,000 --> 00:46:28,000
拨一个号

1495
00:46:28,000 --> 00:46:30,000
然后把这个电话放在这个机座上

1496
00:46:30,000 --> 00:46:33,000
这样电话的两个听筒

1497
00:46:33,000 --> 00:46:34,000
一边对着一个麦克风

1498
00:46:34,000 --> 00:46:37,000
就是听筒对着麦克风

1499
00:46:37,000 --> 00:46:39,000
然后电话的听筒

1500
00:46:39,000 --> 00:46:41,000
则对着那个小盒子上面的扬声器

1501
00:46:41,000 --> 00:46:46,000
这样小盒子可以把电传打字机的电信号转化

1502
00:46:46,000 --> 00:46:47,000
为声音信号

1503
00:46:47,000 --> 00:46:48,000
如果你用过波号上

1504
00:46:48,000 --> 00:46:50,000
它就是那种低低低

1505
00:46:50,000 --> 00:46:52,000
那种声音

1506
00:46:52,000 --> 00:46:56,000
然后这个信号被电话用声音信号

1507
00:46:56,000 --> 00:46:57,000
用模拟的声音信号传到远端

1508
00:46:57,000 --> 00:47:01,000
然后远端再把它转化为二几只信号

1509
00:47:01,000 --> 00:47:02,000
是这么一个过程

1510
00:47:02,000 --> 00:47:05,000
这也是一个非常有意思的东西

1511
00:47:05,000 --> 00:47:08,000
然后这个东西一直使用到

1512
00:47:08,000 --> 00:47:11,000
其实呢初吧

1513
00:47:11,000 --> 00:47:15,000
这个贝尔公司剪就是去除了这个限制

1514
00:47:15,000 --> 00:47:19,000
人们才渐渐的可以就不再用这种非常原始古老的

1515
00:47:19,000 --> 00:47:23,000
用声音来传递二几只发二几只信息的

1516
00:47:23,000 --> 00:47:26,000
这个叫什么

1517
00:47:27,000 --> 00:47:28,000
acoustic coupler

1518
00:47:28,000 --> 00:47:29,000
对

1519
00:47:29,000 --> 00:47:30,000
acoustic coupler

1520
00:47:30,000 --> 00:47:32,000
声音 acoustic

1521
00:47:32,000 --> 00:47:33,000
acoustic coupler

1522
00:47:33,000 --> 00:47:34,000
叫什么呢

1523
00:47:37,000 --> 00:47:38,000
声音连接器

1524
00:47:38,000 --> 00:47:39,000
对

1525
00:47:39,000 --> 00:47:40,000
声音连接器

1526
00:47:40,000 --> 00:47:41,000
对

1527
00:47:41,000 --> 00:47:44,000
其实这个这个其实现在讲的还是蛮酷的

1528
00:47:44,000 --> 00:47:48,000
我就感觉刚好今天我看到一则新闻

1529
00:47:48,000 --> 00:47:50,000
就是说现在有些这个

1530
00:47:50,000 --> 00:47:52,000
一个广告做那个追踪

1531
00:47:52,000 --> 00:47:52,000
买 attracking

1532
00:47:52,000 --> 00:47:56,000
他就说现在有一种很很暗黑的科技

1533
00:47:56,000 --> 00:47:57,000
就是电视的广告里面

1534
00:47:57,000 --> 00:47:59,000
它会指出一种高频的声波

1535
00:47:59,000 --> 00:48:01,000
就是这个人偶然是听不见的

1536
00:48:01,000 --> 00:48:03,000
然后这个这个这个高频的声波

1537
00:48:03,000 --> 00:48:06,000
是可以被手机的麦克风捕捉到

1538
00:48:06,000 --> 00:48:07,000
然后他上面手机上会跑一个应用

1539
00:48:07,000 --> 00:48:08,000
去监听麦克风

1540
00:48:08,000 --> 00:48:09,000
听到这个声音

1541
00:48:09,000 --> 00:48:13,000
他从而知道你是否在看哪个电视节目

1542
00:48:13,000 --> 00:48:14,000
天呐

1543
00:48:14,000 --> 00:48:16,000
简直是有巴斯

1544
00:48:17,000 --> 00:48:19,000
但是你想这个这个原理

1545
00:48:19,000 --> 00:48:22,000
其实就跟刚才讲的一个 acoustic coupler

1546
00:48:22,000 --> 00:48:23,000
其实是差不多的

1547
00:48:23,000 --> 00:48:24,000
就是叫声学连接

1548
00:48:24,000 --> 00:48:27,000
就是我们现在有 wifi 通过无线电的信号

1549
00:48:27,000 --> 00:48:28,000
去传传输这个信息的

1550
00:48:28,000 --> 00:48:31,000
他这个玩意儿是用一个声波的信号

1551
00:48:31,000 --> 00:48:32,000
去传输这个信息的

1552
00:48:32,000 --> 00:48:36,000
然后只是说因为为了这个传输的效果好

1553
00:48:36,000 --> 00:48:39,000
他把这个扬声就是收发就是收发端

1554
00:48:39,000 --> 00:48:40,000
简单来讲

1555
00:48:40,000 --> 00:48:41,000
就麦克风是一个收端

1556
00:48:41,000 --> 00:48:44,000
然后这个扬声器是一个发送端

1557
00:48:44,000 --> 00:48:46,000
然后他是他是因为

1558
00:48:46,000 --> 00:48:47,000
你这个电话机是有麦克风扬声器

1559
00:48:47,000 --> 00:48:49,000
他可以发可以收

1560
00:48:49,000 --> 00:48:51,000
你那个 acoustic coupler

1561
00:48:51,000 --> 00:48:53,000
也是有这个扬声器和麦克风

1562
00:48:53,000 --> 00:48:54,000
你是收和发吗

1563
00:48:54,000 --> 00:48:55,000
两个反转对接

1564
00:48:55,000 --> 00:48:57,000
不就刚好成成了一个连通的回录了吗

1565
00:48:57,000 --> 00:48:59,000
没错

1566
00:48:59,000 --> 00:49:00,000
就听起来是蛮帅的

1567
00:49:00,000 --> 00:49:01,000
没错太帅了

1568
00:49:04,000 --> 00:49:06,000
然后后来就说那可以直接接电了

1569
00:49:06,000 --> 00:49:07,000
就意思就是说

1570
00:49:07,000 --> 00:49:09,000
从从无线电有线了

1571
00:49:09,000 --> 00:49:12,000
对直接插管子的插线

1572
00:49:12,000 --> 00:49:14,000
对后来的这个调整的东西

1573
00:49:14,000 --> 00:49:16,000
就可以自己去进行波号

1574
00:49:16,000 --> 00:49:18,000
然后直接把音频信号转号

1575
00:49:18,000 --> 00:49:21,000
直接把电信号转号

1576
00:49:21,000 --> 00:49:22,000
音频信号

1577
00:49:22,000 --> 00:49:22,000
然后再

1578
00:49:22,000 --> 00:49:24,000
所以其实这个 acoustic coupler

1579
00:49:24,000 --> 00:49:26,000
和这个我们理解的 model

1580
00:49:26,000 --> 00:49:28,000
其实本质上是一

1581
00:49:28,000 --> 00:49:29,000
就同样的事情的对吧

1582
00:49:29,000 --> 00:49:31,000
只是说他们接入方式不一样

1583
00:49:31,000 --> 00:49:33,000
coupler 应该是 mallum 的一个部件

1584
00:49:33,000 --> 00:49:37,000
就是对就是代替导线的部件了

1585
00:49:37,000 --> 00:49:37,000
对

1586
00:49:37,000 --> 00:49:39,000
就是后来的 model

1587
00:49:39,000 --> 00:49:41,000
可以直接通过一个分线头插在电话线上

1588
00:49:41,000 --> 00:49:42,000
就是 model

1589
00:49:42,000 --> 00:49:44,000
其实本身就是电话的线路的一个部分

1590
00:49:44,000 --> 00:49:46,000
RJ 32 这个标准

1591
00:49:46,000 --> 00:49:48,000
RJ 45 是网线的

1592
00:49:48,000 --> 00:49:50,000
对 RJ 45 是网线

1593
00:49:50,000 --> 00:49:52,000
RJ 32 是应该是 32

1594
00:49:52,000 --> 00:49:53,000
是电话线

1595
00:49:53,000 --> 00:49:54,000
小的那个电话接头

1596
00:49:54,000 --> 00:49:55,000
这叫什么呢

1597
00:49:55,000 --> 00:49:56,000
柴

1598
00:49:56,000 --> 00:49:57,000
你插吧

1599
00:49:57,000 --> 00:49:59,000
Heliport Live

1600
00:49:59,000 --> 00:50:00,000
水晶头

1601
00:50:04,000 --> 00:50:07,000
RJ 是叫做 register jack

1602
00:50:08,000 --> 00:50:10,000
然后 RJ 10

1603
00:50:11,000 --> 00:50:12,000
RJ 11

1604
00:50:12,000 --> 00:50:13,000
对

1605
00:50:13,000 --> 00:50:14,000
RJ 11

1606
00:50:14,000 --> 00:50:14,000
OK

1607
00:50:14,000 --> 00:50:15,000
对

1608
00:50:15,000 --> 00:50:16,000
这个是我们就

1609
00:50:16,000 --> 00:50:18,000
RJ 32 有这个东西吗

1610
00:50:18,000 --> 00:50:19,000
可能没有

1611
00:50:19,000 --> 00:50:20,000
记错了

1612
00:50:20,000 --> 00:50:22,000
有 RJ 11

1613
00:50:22,000 --> 00:50:23,000
RJ 14

1614
00:50:23,000 --> 00:50:25,000
RJ 25

1615
00:50:25,000 --> 00:50:26,000
然后对

1616
00:50:26,000 --> 00:50:27,000
就是这么一些

1617
00:50:27,000 --> 00:50:29,000
然后 RJ 45 就是我们常说的

1618
00:50:29,000 --> 00:50:30,000
这个双角线

1619
00:50:30,000 --> 00:50:32,000
就是网线的标准头了

1620
00:50:32,000 --> 00:50:32,000
对

1621
00:50:32,000 --> 00:50:33,000
它会宽一些

1622
00:50:33,000 --> 00:50:35,000
应该是有多少针来的那边

1623
00:50:35,000 --> 00:50:36,000
四个

1624
00:50:36,000 --> 00:50:37,000
四个点

1625
00:50:37,000 --> 00:50:38,000
网线是八个针

1626
00:50:38,000 --> 00:50:38,000
对

1627
00:50:38,000 --> 00:50:39,000
网线四对

1628
00:50:39,000 --> 00:50:39,000
对

1629
00:50:39,000 --> 00:50:40,000
对

1630
00:50:40,000 --> 00:50:42,000
然后这个应该是四个针

1631
00:50:42,000 --> 00:50:43,000
RJ 11

1632
00:50:43,000 --> 00:50:45,000
具体也不太懂

1633
00:50:45,000 --> 00:50:47,000
其实现在我看也有很多

1634
00:50:47,000 --> 00:50:48,000
这个

1635
00:50:48,000 --> 00:50:49,000
就是那个 RJ 45

1636
00:50:49,000 --> 00:50:50,000
因为它那个线头多

1637
00:50:50,000 --> 00:50:52,000
它就是可以当电话线用的

1638
00:50:52,000 --> 00:50:55,000
然后还可以留几个来做一个

1639
00:50:55,000 --> 00:50:55,000
摆照的头

1640
00:50:55,000 --> 00:50:57,000
所以很多这种写字楼

1641
00:50:57,000 --> 00:50:59,000
或者是家里装修的时候

1642
00:50:59,000 --> 00:51:00,000
它就说为了方便

1643
00:51:00,000 --> 00:51:02,000
就不单独布这个电话线的槽

1644
00:51:02,000 --> 00:51:04,000
而且就直接走一个网线就好了

1645
00:51:04,000 --> 00:51:04,000
对

1646
00:51:04,000 --> 00:51:06,000
但是如果你现在要装修房子

1647
00:51:06,000 --> 00:51:08,000
我强烈不建议这么干

1648
00:51:08,000 --> 00:51:08,000
首先第一个

1649
00:51:08,000 --> 00:51:10,000
你不需要真的需要电话机了

1650
00:51:10,000 --> 00:51:10,000
对吧

1651
00:51:10,000 --> 00:51:12,000
现在都是用手机

1652
00:51:12,000 --> 00:51:13,000
第二个就是如果你那么干了之后

1653
00:51:13,000 --> 00:51:14,000
你那个网线

1654
00:51:14,000 --> 00:51:16,000
哪怕是你说什么超无脸的线

1655
00:51:16,000 --> 00:51:20,000
最终也只能跑摆照的这个速度了

1656
00:51:20,000 --> 00:51:21,000
因为我现在做的房子就是

1657
00:51:21,000 --> 00:51:24,000
我现在和你朋友做的房子就是有那个

1658
00:51:24,000 --> 00:51:29,000
每一间房子里面都有两个网线的借口

1659
00:51:29,000 --> 00:51:30,000
好积累

1660
00:51:30,000 --> 00:51:31,000
就一个是电话

1661
00:51:31,000 --> 00:51:32,000
一个是走网

1662
00:51:32,000 --> 00:51:32,000
没有

1663
00:51:32,000 --> 00:51:34,000
两个都是蓝

1664
00:51:34,000 --> 00:51:36,000
就有一个在储藏室里面

1665
00:51:36,000 --> 00:51:38,000
有一个装电话线的槽

1666
00:51:38,000 --> 00:51:40,000
然后那个槽上面有一个

1667
00:51:40,000 --> 00:51:43,000
总有房间有自己的一个号

1668
00:51:43,000 --> 00:51:46,000
然后分了 8 根线

1669
00:51:46,000 --> 00:51:49,000
到每个屋子每个两根

1670
00:51:49,000 --> 00:51:50,000
所以其实并没有什么用

1671
00:51:50,000 --> 00:51:51,000
就是说你还是用了 WiFi 是吧

1672
00:51:51,000 --> 00:51:52,000
对

1673
00:51:52,000 --> 00:51:54,000
没错

1674
00:51:54,000 --> 00:51:55,000
太掉技术

1675
00:51:55,000 --> 00:51:56,000
其实现在我们现在在

1676
00:51:56,000 --> 00:51:58,000
我在那个装修办公室

1677
00:51:58,000 --> 00:52:01,000
然后一个新的办公室

1678
00:52:01,000 --> 00:52:03,000
就是说也是要不限那些

1679
00:52:03,000 --> 00:52:06,000
其实都准备完全不走网线

1680
00:52:06,000 --> 00:52:07,000
都是走路线

1681
00:52:07,000 --> 00:52:07,000
对

1682
00:52:07,000 --> 00:52:08,000
纯 WiFi 网路

1683
00:52:08,000 --> 00:52:10,000
车远了

1684
00:52:10,000 --> 00:52:11,000
对

1685
00:52:11,000 --> 00:52:11,000
接着说

1686
00:52:11,000 --> 00:52:12,000
回到电传脑子机

1687
00:52:12,000 --> 00:52:15,000
我们一下子越过了 50 年的历史

1688
00:52:15,000 --> 00:52:17,000
好跳啊

1689
00:52:17,000 --> 00:52:17,000
对

1690
00:52:17,000 --> 00:52:20,000
总之这个电传脑子机的模样

1691
00:52:20,000 --> 00:52:21,000
非常 50 年代

1692
00:52:21,000 --> 00:52:24,000
就是欢迎各位听众去点开

1693
00:52:24,000 --> 00:52:26,000
这个收音网词里面的链接

1694
00:52:26,000 --> 00:52:28,000
看一看电传脑子机到底是一个什么样的

1695
00:52:28,000 --> 00:52:30,000
一个什么样子

1696
00:52:30,000 --> 00:52:33,000
但是最大我们这跟这一期节目有关的重点

1697
00:52:33,000 --> 00:52:34,000
就是这个电传脑子机

1698
00:52:34,000 --> 00:52:37,000
通常只会在易航上面工作

1699
00:52:37,000 --> 00:52:39,000
就是不管你输入还是输出

1700
00:52:39,000 --> 00:52:41,000
你得到的结果一般都只有易航

1701
00:52:41,000 --> 00:52:42,000
但是输出有可能有很多航

1702
00:52:42,000 --> 00:52:44,000
那输入基本上就是易航

1703
00:52:44,000 --> 00:52:46,000
易航是什么意思

1704
00:52:46,000 --> 00:52:47,000
就是这个

1705
00:52:47,000 --> 00:52:49,000
这个电传脑子机上面

1706
00:52:49,000 --> 00:52:52,000
你最长只能输入

1707
00:52:52,000 --> 00:52:54,000
固定自粗一般是 80 个

1708
00:52:54,000 --> 00:52:57,000
然后如果你输到这还没完的话

1709
00:52:57,000 --> 00:53:00,000
你要么要告诉电传脑子机

1710
00:53:00,000 --> 00:53:02,000
我还要再输入易航

1711
00:53:02,000 --> 00:53:04,000
然后你要输入一个特别的符号

1712
00:53:04,000 --> 00:53:07,000
这个时候你要按一个什么

1713
00:53:07,000 --> 00:53:10,000
按一个相当于 Backslash 的键

1714
00:53:10,000 --> 00:53:12,000
反正是上面的一个实体键

1715
00:53:12,000 --> 00:53:13,000
OK

1716
00:53:13,000 --> 00:53:14,000
要不然你就得按回车

1717
00:53:14,000 --> 00:53:18,000
就是把这一航当前航的东西输出出去

1718
00:53:18,000 --> 00:53:21,000
但这个时候你是告诉的是电传脑子机

1719
00:53:21,000 --> 00:53:23,000
是我要输入多余易航的

1720
00:53:23,000 --> 00:53:25,000
还是说告诉那个远端

1721
00:53:25,000 --> 00:53:26,000
你要输入多余易航

1722
00:53:26,000 --> 00:53:28,000
是告诉电传脑子机

1723
00:53:28,000 --> 00:53:30,000
就是电传脑子机会把你当前

1724
00:53:30,000 --> 00:53:32,000
整个航就是它有一个 buffer

1725
00:53:32,000 --> 00:53:33,000
你可以理解

1726
00:53:33,000 --> 00:53:36,000
它把当前航 buffer 里面的东西

1727
00:53:36,000 --> 00:53:38,000
传输出去

1728
00:53:38,000 --> 00:53:39,000
但是 buffer 有多长

1729
00:53:39,000 --> 00:53:42,000
是 buffer 应该是要比易航的长度长的

1730
00:53:42,000 --> 00:53:43,000
但是不管怎么说

1731
00:53:43,000 --> 00:53:47,000
它具体表现通常大分解关系

1732
00:53:47,000 --> 00:53:49,000
只会输入易航

1733
00:53:49,000 --> 00:53:51,000
你想想那个场景还是蛮搞笑的

1734
00:53:51,000 --> 00:53:53,000
现在打一个 mini 超越好了

1735
00:53:53,000 --> 00:53:55,000
你还是说 Jodomade

1736
00:53:55,000 --> 00:53:56,000
那我再打一下

1737
00:53:56,000 --> 00:53:58,000
Jodomade

1738
00:53:58,000 --> 00:53:58,000
没错

1739
00:53:58,000 --> 00:53:59,000
就是这个感觉

1740
00:54:01,000 --> 00:54:01,000
然后

1741
00:54:02,000 --> 00:54:05,000
这个特征

1742
00:54:05,000 --> 00:54:08,000
也就造就了我们接下来

1743
00:54:08,000 --> 00:54:11,000
60 年的计算机历史里面

1744
00:54:11,000 --> 00:54:13,000
几乎所有人

1745
00:54:13,000 --> 00:54:16,000
至少所有需要学写程序的人

1746
00:54:16,000 --> 00:54:17,000
都会面临的一个问题

1747
00:54:17,000 --> 00:54:20,000
就是什么是命令航

1748
00:54:20,000 --> 00:54:21,000
就是 common line

1749
00:54:21,000 --> 00:54:23,000
line 这个东西就来自于此

1750
00:54:23,000 --> 00:54:25,000
就是因为早四一点钟打的机场

1751
00:54:25,000 --> 00:54:28,000
只允许你针对当前航来操作

1752
00:54:28,000 --> 00:54:31,000
所以不是命令航是命令易航

1753
00:54:31,000 --> 00:54:31,000
对

1754
00:54:31,000 --> 00:54:33,000
就是一个命令航

1755
00:54:33,000 --> 00:54:34,000
有时候你会好奇说

1756
00:54:34,000 --> 00:54:40,000
为什么写程序不能是从屏幕上的任何地方开始

1757
00:54:40,000 --> 00:54:41,000
为什么一定要是在左上角

1758
00:54:41,000 --> 00:54:42,000
或者是左下角

1759
00:54:42,000 --> 00:54:44,000
或者是输入易航命令

1760
00:54:44,000 --> 00:54:45,000
然后按回车

1761
00:54:46,000 --> 00:54:48,000
来自于回车舰到底是怎么来的

1762
00:54:48,000 --> 00:54:49,000
为什么会回车舰

1763
00:54:49,000 --> 00:54:52,000
而不是一个这种东西

1764
00:54:52,000 --> 00:54:53,000
而不是一个什么

1765
00:54:53,000 --> 00:54:54,000
比如说开始输入

1766
00:54:54,000 --> 00:54:56,000
或者开始执行这样的

1767
00:54:56,000 --> 00:54:58,000
其实也是从这儿来的

1768
00:55:00,000 --> 00:55:00,000
对

1769
00:55:02,000 --> 00:55:04,000
然后 tally type 这个词

1770
00:55:04,000 --> 00:55:06,000
对于我们一直延续到今天的影响

1771
00:55:06,000 --> 00:55:08,000
还有一个就是 tty

1772
00:55:08,000 --> 00:55:09,000
就是我不知道你

1773
00:55:09,000 --> 00:55:12,000
但是我在开始接触 Linux 的时候

1774
00:55:12,000 --> 00:55:15,000
经常会好奇说 tty 到底是一个什么东西的缩解

1775
00:55:15,000 --> 00:55:16,000
很难猜出来

1776
00:55:16,000 --> 00:55:17,000
对吧

1777
00:55:17,000 --> 00:55:19,000
它其实 tally type 的缩解

1778
00:55:19,000 --> 00:55:20,000
一只延续到今天

1779
00:55:20,000 --> 00:55:22,000
包括你面对的这台

1780
00:55:23,000 --> 00:55:24,000
Mac 电脑

1781
00:55:24,000 --> 00:55:26,000
或者是你手上的 Android

1782
00:55:26,000 --> 00:55:28,000
或者是你的 iPhone

1783
00:55:28,000 --> 00:55:29,000
其实都有 tty 这个东西

1784
00:55:29,000 --> 00:55:29,000
对吧

1785
00:55:29,000 --> 00:55:33,000
就是在 dvice slash tty

1786
00:55:33,000 --> 00:55:36,000
哪怕你打开你的 item

1787
00:55:36,000 --> 00:55:37,000
上面就会显示说

1788
00:55:37,000 --> 00:55:40,000
last login 是月 11 号

1789
00:55:40,000 --> 00:55:41,000
18.46 分

1790
00:55:41,000 --> 00:55:43,000
然后 tty s 00

1791
00:55:44,000 --> 00:55:46,000
所以其实你要解释一下

1792
00:55:46,000 --> 00:55:48,000
这个我们现在操作室里面

1793
00:55:48,000 --> 00:55:51,000
这个 dvice tty 到底是它的一个作用是什么

1794
00:55:52,000 --> 00:55:56,000
slash tty 其实是一个

1795
00:55:57,000 --> 00:56:00,000
用软件模拟出来的一个电传打字机的中段

1796
00:56:00,000 --> 00:56:01,000
就是你可以

1797
00:56:01,000 --> 00:56:03,000
它就应该叫 ptty 的吧

1798
00:56:03,000 --> 00:56:06,000
sudo tty

1799
00:56:06,000 --> 00:56:07,000
就是一个伪中段

1800
00:56:07,000 --> 00:56:10,000
就是它不是一个真正的电传打字机的实体

1801
00:56:10,000 --> 00:56:14,000
而是你的计算机想象出来的

1802
00:56:14,000 --> 00:56:19,000
它可以支配的诸多电传打字机之一

1803
00:56:20,000 --> 00:56:22,000
但它的实际作用是什么

1804
00:56:22,000 --> 00:56:24,000
它的作用就是输入和输出

1805
00:56:27,000 --> 00:56:31,000
就是说你打的键盘是通过 tty 这个设备

1806
00:56:31,000 --> 00:56:32,000
进入到 cernal 的

1807
00:56:32,000 --> 00:56:34,000
然后 cernal 的原理 print 回来的东西

1808
00:56:34,000 --> 00:56:36,000
也是通过 tty 设备传回来的

1809
00:56:36,000 --> 00:56:36,000
是

1810
00:56:36,000 --> 00:56:37,000
就是你可以这么理解

1811
00:56:37,000 --> 00:56:39,000
比如说我是一台 mainframe

1812
00:56:39,000 --> 00:56:42,000
然后我有输入 standout or standout arrow

1813
00:56:42,000 --> 00:56:44,000
或 standout input

1814
00:56:44,000 --> 00:56:45,000
然后同时

1815
00:56:45,000 --> 00:56:47,000
与此同时我有很多个 tty

1816
00:56:47,000 --> 00:56:51,000
我连接了很多个实体的机械的电传打字机

1817
00:56:51,000 --> 00:56:52,000
然后我现在说好

1818
00:56:52,000 --> 00:56:57,000
我要把我的 standout input 连接到 ttye 上

1819
00:56:57,000 --> 00:57:00,000
那么此时 ttye 上输入什么

1820
00:57:00,000 --> 00:57:03,000
我就会把它接到我的 standout input 上

1821
00:57:03,000 --> 00:57:08,000
然后我说我的 standout output 需要输入到 tty 4 上面

1822
00:57:08,000 --> 00:57:11,000
那我比如说 ttye

1823
00:57:11,000 --> 00:57:12,000
刚才说的几

1824
00:57:12,000 --> 00:57:15,000
tty 1 告诉我说 print halloween

1825
00:57:15,000 --> 00:57:17,000
然后我说 standout output 在 tty 4 上

1826
00:57:17,000 --> 00:57:21,000
那么 tty 4 这些电传打字机上就会输出 Hello world

1827
00:57:23,000 --> 00:57:23,000
对

1828
00:57:23,000 --> 00:57:24,000
它就相当于

1829
00:57:24,000 --> 00:57:24,000
对

1830
00:57:24,000 --> 00:57:25,000
对

1831
00:57:25,000 --> 00:57:28,000
就相当于一个标准的输入输出设备

1832
00:57:28,000 --> 00:57:30,000
然后只不过是用软件来模拟

1833
00:57:31,000 --> 00:57:35,000
然后键盘的世界被操作系统的一个驱动步骤

1834
00:57:35,000 --> 00:57:38,000
到也是转化到 ttye 的一个输入上面去

1835
00:57:38,000 --> 00:57:39,000
再传给内核

1836
00:57:39,000 --> 00:57:40,000
对

1837
00:57:40,000 --> 00:57:46,000
如果你要使用 terminal emulator

1838
00:57:46,000 --> 00:57:49,000
就是如果你使用这个中段模拟器的话

1839
00:57:49,000 --> 00:57:50,000
就是这样

1840
00:57:50,000 --> 00:57:52,000
但是其他的一些东西本不是这样

1841
00:57:52,000 --> 00:57:53,000
比如说游戏肯定不是这样

1842
00:57:53,000 --> 00:57:59,000
游戏就是直接扫摇那个键盘产生的中段

1843
00:57:59,000 --> 00:58:01,000
或者是 or whatever

1844
00:58:01,000 --> 00:58:02,000
但是跟 ttye 没有关系

1845
00:58:03,000 --> 00:58:04,000
OK

1846
00:58:04,000 --> 00:58:04,000
对

1847
00:58:05,000 --> 00:58:09,000
然后到 1980 年的时候

1848
00:58:09,000 --> 00:58:12,000
DC 是 DC 的全名叫做 mizer

1849
00:58:12,000 --> 00:58:15,000
digital equipment cooperation

1850
00:58:15,000 --> 00:58:16,000
对

1851
00:58:16,000 --> 00:58:17,000
数字设备公司

1852
00:58:19,000 --> 00:58:25,000
研发出的这种就是用二级的用音级设线显示馆

1853
00:58:25,000 --> 00:58:31,000
做成了这个所谓的单色显示器的 terminal

1854
00:58:31,000 --> 00:58:32,000
我们才渐渐淘汰了

1855
00:58:33,000 --> 00:58:36,000
人类才渐渐淘汰了 ttye 这种东西

1856
00:58:36,000 --> 00:58:40,000
但是就是砸到纸带上的那种 ttye

1857
00:58:40,000 --> 00:58:45,000
终于你有了一个相当于玻璃做的这么一个电传打字机

1858
00:58:45,000 --> 00:58:46,000
然后

1859
00:58:46,000 --> 00:58:48,000
所以其实他们之前那个还是挺废纸的

1860
00:58:48,000 --> 00:58:49,000
是吧

1861
00:58:49,000 --> 00:58:49,000
对

1862
00:58:49,000 --> 00:58:50,000
相当废纸

1863
00:58:52,000 --> 00:58:53,000
宅男废纸

1864
00:58:53,000 --> 00:58:55,000
你废纸我也想到了这个

1865
00:58:55,000 --> 00:58:58,000
我刚才也想说宅男废纸

1866
00:58:58,000 --> 00:58:59,000
我那个时代已经过去了

1867
00:58:59,000 --> 00:59:00,000
对

1868
00:59:01,000 --> 00:59:02,000
对

1869
00:59:02,000 --> 00:59:03,000
然后这个

1870
00:59:03,000 --> 00:59:08,000
这个玻璃的 ttye 其实就简单来说

1871
00:59:08,000 --> 00:59:09,000
替代了一个打印机的作用

1872
00:59:09,000 --> 00:59:09,000
对吧

1873
00:59:09,000 --> 00:59:10,000
对

1874
00:59:10,000 --> 00:59:13,000
替代了打印机

1875
00:59:13,000 --> 00:59:14,000
再输出

1876
00:59:14,000 --> 00:59:16,000
然后输入的话

1877
00:59:16,000 --> 00:59:19,000
最大的优点就是你终于可以改自己的输入

1878
00:59:19,000 --> 00:59:21,000
就早期的电传打字机

1879
00:59:21,000 --> 00:59:22,000
你要打错了一个字符

1880
00:59:22,000 --> 00:59:24,000
你是改不了的

1881
00:59:24,000 --> 00:59:25,000
输错了怎么办

1882
00:59:25,000 --> 00:59:25,000
对

1883
00:59:25,000 --> 00:59:26,000
这也是一个我的问题

1884
00:59:26,000 --> 00:59:29,000
我也不知道那个时候输错了到底是怎么办

1885
00:59:29,000 --> 00:59:30,000
也许有一个建训

1886
00:59:30,000 --> 00:59:32,000
你说这些这行废了

1887
00:59:32,000 --> 00:59:33,000
你回退到某一个地方

1888
00:59:33,000 --> 00:59:35,000
然后你再重新打

1889
00:59:35,000 --> 00:59:36,000
就是那 control k

1890
00:59:38,000 --> 00:59:38,000
对

1891
00:59:38,000 --> 00:59:39,000
就是

1892
00:59:41,000 --> 00:59:44,000
我相信电传打字机上应该还是有 backspace

1893
00:59:44,000 --> 00:59:45,000
对

1894
00:59:45,000 --> 00:59:47,000
backspace 按下去的话到底会具体做什么

1895
00:59:47,000 --> 00:59:50,000
它不可能磨掉一个已经打好的字符

1896
00:59:50,000 --> 00:59:50,000
对吧

1897
00:59:50,000 --> 00:59:52,000
那我觉得应该是把内行

1898
00:59:53,000 --> 00:59:54,000
kill 掉

1899
00:59:54,000 --> 00:59:56,000
然后再起行新的重新来过

1900
00:59:57,000 --> 00:59:58,000
嗯

1901
00:59:58,000 --> 01:00:01,000
那是像最为一合理的方式

1902
01:00:01,000 --> 01:00:01,000
对

1903
01:00:01,000 --> 01:00:03,000
这也不是重点

1904
01:00:03,000 --> 01:00:10,000
但最大的一个要点就是这个玻璃的 terminal

1905
01:00:10,000 --> 01:00:13,000
虽然表面上看它是可以改的

1906
01:00:13,000 --> 01:00:15,000
然后可以多行显示的

1907
01:00:15,000 --> 01:00:18,000
但它本质上在最底端

1908
01:00:18,000 --> 01:00:24,000
它还是在模拟电传打字机和主机交互信息的方式

1909
01:00:24,000 --> 01:00:27,000
也就是说电传打字机连接到的主机

1910
01:00:27,000 --> 01:00:30,000
并不知道它自己连接到了是一个屏幕

1911
01:00:30,000 --> 01:00:31,000
还是一个电视台

1912
01:00:32,000 --> 01:00:33,000
对

1913
01:00:33,000 --> 01:00:39,000
然后最广为流行的电传打字机的型号就是 TeddyTypeModel 33

1914
01:00:39,000 --> 01:00:42,000
TeddyTypeModel 33 AS 2

1915
01:00:42,000 --> 01:00:47,000
然后我们熟知并且爱戴尔的杖达尔大门先生

1916
01:00:48,000 --> 01:00:55,000
就是在这台电脑上开始了它的第一次编程之旅

1917
01:00:55,000 --> 01:00:57,000
对

1918
01:00:57,000 --> 01:01:03,000
然后第一台电传打字机的所使用的

1919
01:01:03,000 --> 01:01:09,000
我们刚才提到这个 All-Constict Coppler 的速率是 300 bits per second

1920
01:01:09,000 --> 01:01:12,000
这个可以想象一下这个速度

1921
01:01:12,000 --> 01:01:14,000
300 bits 除以 8

1922
01:01:14,000 --> 01:01:15,000
我相信

1923
01:01:15,000 --> 01:01:16,000
等一下

1924
01:01:16,000 --> 01:01:19,000
bits 除以 8 得到 byte

1925
01:01:19,000 --> 01:01:25,000
有两三八二百四三

1926
01:01:25,000 --> 01:01:26,000
算一下

1927
01:01:26,000 --> 01:01:30,000
300 除以 8 需要 37.5 byte per second

1928
01:01:30,000 --> 01:01:33,000
30 秒就可以打

1929
01:01:33,000 --> 01:01:37,000
它差不多 38 字幅的速率

1930
01:01:37,000 --> 01:01:40,000
就是我们今天的 solo

1931
01:01:40,000 --> 01:01:46,000
如果用 300 bps 的 model 来传输的话

1932
01:01:46,000 --> 01:01:48,000
大概一两小时了

1933
01:01:48,000 --> 01:01:49,000
没错

1934
01:01:49,000 --> 01:01:50,000
这是太不可思议了

1935
01:01:52,000 --> 01:01:56,000
这种感觉就像在那个辐射里面看那个 terminal 上一行一行

1936
01:01:56,000 --> 01:01:58,000
我还蹦字的感觉

1937
01:01:58,000 --> 01:01:59,000
对

1938
01:01:59,000 --> 01:02:04,000
这个也是一个就是科幻片常用的一个梗

1939
01:02:04,000 --> 01:02:05,000
就是那个字是一行一行

1940
01:02:05,000 --> 01:02:07,000
就是一个一个字出现的

1941
01:02:08,000 --> 01:02:11,000
这个一定是从当年他们那个电传打字机里后的灵感

1942
01:02:11,000 --> 01:02:13,000
看着那个字一个一个模样去冒出来

1943
01:02:13,000 --> 01:02:15,000
觉得有一种科技感是吧

1944
01:02:15,000 --> 01:02:17,000
其实根本就是技术现实

1945
01:02:17,000 --> 01:02:18,000
雷腾

1946
01:02:20,000 --> 01:02:23,000
就下次球这种什么

1947
01:02:23,000 --> 01:02:25,000
这个科幻片再也不要用这种特效了

1948
01:02:25,000 --> 01:02:26,000
这实际上是太 low 了

1949
01:02:26,000 --> 01:02:31,000
就我的第一台猫是 28.8 k 的

1950
01:02:32,000 --> 01:02:34,000
是 28.8 k

1951
01:02:34,000 --> 01:02:35,000
k

1952
01:02:35,000 --> 01:02:35,000
k

1953
01:02:35,000 --> 01:02:39,000
然后这个就三台猫是 0.3 k

1954
01:02:41,000 --> 01:02:41,000
0.4 k

1955
01:02:41,000 --> 01:02:42,000
就是这样

1956
01:02:47,000 --> 01:02:49,000
上 bbs 都先看

1957
01:02:49,000 --> 01:02:49,000
没有

1958
01:02:49,000 --> 01:02:50,000
上 bbs

1959
01:02:50,000 --> 01:02:53,000
那个时候真的是 bbs 没有什么

1960
01:02:54,000 --> 01:02:56,000
我相信那个时候的 bbs 根本不存在

1961
01:02:56,000 --> 01:02:57,000
没有网络吗

1962
01:02:58,000 --> 01:02:59,000
还没有网络

1963
01:02:59,000 --> 01:03:01,000
早期的 bbs 根本就是转性战

1964
01:03:02,000 --> 01:03:05,000
就是你在离线的状态下写好信读好信

1965
01:03:05,000 --> 01:03:09,000
然后连线把所有需要收和发的信

1966
01:03:09,000 --> 01:03:10,000
一次性收和发

1967
01:03:10,000 --> 01:03:13,000
然后再离线再读你刚才收到了什么

1968
01:03:13,000 --> 01:03:15,000
然后写你要写的

1969
01:03:15,000 --> 01:03:17,000
其实是离散那种状态

1970
01:03:17,000 --> 01:03:19,000
相信的这种

1971
01:03:19,000 --> 01:03:21,000
instant messenger 真是不可想象的

1972
01:03:24,000 --> 01:03:25,000
另外

1973
01:03:25,000 --> 01:03:27,000
然后时光光阴人染

1974
01:03:27,000 --> 01:03:30,000
我们来到了 unix 时代

1975
01:03:30,000 --> 01:03:36,000
在 barr 实验室和 mit 和通用电器里面的

1976
01:03:36,000 --> 01:03:38,000
通用电器实验室里面出现了一种操作系统

1977
01:03:38,000 --> 01:03:40,000
叫做 multix

1978
01:03:42,000 --> 01:03:44,000
multiple time

1979
01:03:44,000 --> 01:03:46,000
就是什么多用户分时系统

1980
01:03:46,000 --> 01:03:48,000
这名东西

1981
01:03:48,000 --> 01:03:49,000
然后它的后

1982
01:03:49,000 --> 01:03:49,000
对

1983
01:03:49,000 --> 01:03:52,000
在那个时代还是使用电电脑子机的

1984
01:03:52,000 --> 01:03:54,000
但是到了 unix 的时代

1985
01:03:54,000 --> 01:03:55,000
基本上已经全都切换到了

1986
01:03:55,000 --> 01:03:59,000
这个就是带显示器的 terminal

1987
01:04:00,000 --> 01:04:02,000
然后在 terminal 时代

1988
01:04:03,000 --> 01:04:05,000
terminal 出现时代

1989
01:04:05,000 --> 01:04:08,000
人们延续了 multix 里面的一个概念

1990
01:04:08,000 --> 01:04:10,000
就是 shale 的概念

1991
01:04:10,000 --> 01:04:11,000
然后

1992
01:04:13,000 --> 01:04:14,000
要不你来解释一下

1993
01:04:14,000 --> 01:04:16,000
什么是 shale 跟 carnal 的关系

1994
01:04:16,000 --> 01:04:18,000
我们节目叫做 carnal panic

1995
01:04:18,000 --> 01:04:20,000
但是我们今天这一期在讲 shale

1996
01:04:20,000 --> 01:04:22,000
然后了解关系的时候

1997
01:04:22,000 --> 01:04:23,000
对

1998
01:04:23,000 --> 01:04:24,000
因为现在有内核

1999
01:04:24,000 --> 01:04:26,000
有核的话就会有一个核

2000
01:04:26,000 --> 01:04:30,000
核是执行那些实际的程序的

2001
01:04:30,000 --> 01:04:31,000
可以这么说了

2002
01:04:31,000 --> 01:04:33,000
然后 shale 其实就是给用户

2003
01:04:33,000 --> 01:04:38,000
用于用户和内核交互的一个工具

2004
01:04:38,000 --> 01:04:38,000
对吧

2005
01:04:38,000 --> 01:04:39,000
对

2006
01:04:39,000 --> 01:04:39,000
这有点

2007
01:04:39,000 --> 01:04:41,000
然后 shale 的

2008
01:04:41,000 --> 01:04:42,000
你说

2009
01:04:43,000 --> 01:04:45,000
然后 shale 的主要的功能就是什么

2010
01:04:45,000 --> 01:04:47,000
就是让用户输入命令

2011
01:04:47,000 --> 01:04:50,000
然后传给 carnal 去执行

2012
01:04:50,000 --> 01:04:53,000
然后再把执行的结果

2013
01:04:53,000 --> 01:04:55,000
再展示给用户

2014
01:04:55,000 --> 01:04:56,000
就通过这个 tty

2015
01:04:56,000 --> 01:04:58,000
这个电穿塔自己接口

2016
01:04:58,000 --> 01:04:59,000
对

2017
01:05:01,000 --> 01:05:03,000
我觉得 shale 这个名字

2018
01:05:03,000 --> 01:05:04,000
其实最开始的时候

2019
01:05:04,000 --> 01:05:06,000
我接触会觉得他有点迷惑性

2020
01:05:06,000 --> 01:05:11,000
因为 shale 在他的所指上面

2021
01:05:11,000 --> 01:05:13,000
其实是专门指这个

2022
01:05:13,000 --> 01:05:15,000
跟用户输入输出

2023
01:05:15,000 --> 01:05:18,000
这是执行脚本的这么一个小工具

2024
01:05:18,000 --> 01:05:19,000
然后这个工具

2025
01:05:19,000 --> 01:05:20,000
它跑起来的时候

2026
01:05:20,000 --> 01:05:24,000
会让你可以通过命令行来跟内核打交道

2027
01:05:24,000 --> 01:05:25,000
但实际上

2028
01:05:27,000 --> 01:05:30,000
就是如果你去专门追究他这个名字的话

2029
01:05:30,000 --> 01:05:33,000
那 carnal 跑在核心层

2030
01:05:33,000 --> 01:05:36,000
但并不是所有跑在外层的都是 shale

2031
01:05:36,000 --> 01:05:36,000
对吧

2032
01:05:37,000 --> 01:05:39,000
因为还有 user space

2033
01:05:39,000 --> 01:05:40,000
还有其他一些程序

2034
01:05:40,000 --> 01:05:42,000
这些程序可能不会直接跟你打交道

2035
01:05:42,000 --> 01:05:44,000
也可能会跟你打交道

2036
01:05:44,000 --> 01:05:45,000
但是他们在跟你打交道的时候

2037
01:05:45,000 --> 01:05:49,000
并不会被称为 shale

2038
01:05:49,000 --> 01:05:52,000
如果早期比较迷惑的一件事情

2039
01:05:52,000 --> 01:05:53,000
但是

2040
01:05:53,000 --> 01:05:55,000
所以 shale 类比于图形层头的话

2041
01:05:55,000 --> 01:05:56,000
应该是属于哪一层

2042
01:05:56,000 --> 01:05:58,000
应该是属于这个

2043
01:05:58,000 --> 01:06:00,000
故意的那些

2044
01:06:00,000 --> 01:06:01,000
那些

2045
01:06:01,000 --> 01:06:03,000
这些组件那一层应该是

2046
01:06:03,000 --> 01:06:04,000
嗯

2047
01:06:04,000 --> 01:06:04,000
对

2048
01:06:04,000 --> 01:06:05,000
应该可以

2049
01:06:05,000 --> 01:06:07,000
大致可以这么对应起来

2050
01:06:07,000 --> 01:06:08,000
但是当然

2051
01:06:08,000 --> 01:06:09,000
这个故意的

2052
01:06:09,000 --> 01:06:10,000
故意的层

2053
01:06:10,000 --> 01:06:12,000
层级乃至于抽象的复杂程度

2054
01:06:12,000 --> 01:06:15,000
都要比 shale 要高的多的多

2055
01:06:16,000 --> 01:06:17,000
对

2056
01:06:17,000 --> 01:06:20,000
然后这个早期的 shale 也是面向行的

2057
01:06:20,000 --> 01:06:22,000
因为 shale 的一个

2058
01:06:22,000 --> 01:06:24,000
一个功用就是让你在 terminal 上

2059
01:06:24,000 --> 01:06:26,000
可以跟远程机交互

2060
01:06:26,000 --> 01:06:28,000
而所有的交互都

2061
01:06:28,000 --> 01:06:30,000
因为早期电程脑的影响

2062
01:06:30,000 --> 01:06:32,000
被限制为一行一行

2063
01:06:32,000 --> 01:06:33,000
所以在早期的 shale 里面

2064
01:06:33,000 --> 01:06:34,000
你也是大部分时候

2065
01:06:34,000 --> 01:06:37,000
你从一行来输入命令

2066
01:06:37,000 --> 01:06:38,000
unix 的早期作者之一

2067
01:06:38,000 --> 01:06:40,000
就是我们上一期提到的

2068
01:06:40,000 --> 01:06:43,000
大名鼎鼎的 Kentomerson

2069
01:06:43,000 --> 01:06:45,000
他在写 unix 的时候

2070
01:06:45,000 --> 01:06:48,000
也沿用了 shale 的称谷

2071
01:06:48,000 --> 01:06:50,000
但是 Kentomerson 所写的 shale

2072
01:06:52,000 --> 01:06:54,000
要比 multipleshale 多的很多特征

2073
01:06:54,000 --> 01:06:55,000
比如说一个最早期的

2074
01:06:55,000 --> 01:06:57,000
最重要的特征之一

2075
01:06:57,000 --> 01:07:02,000
就是所谓的输入输出重病相

2076
01:07:02,000 --> 01:07:05,000
我们不管是到私用户

2077
01:07:05,000 --> 01:07:07,000
还是连私用户都很熟悉

2078
01:07:07,000 --> 01:07:09,000
就如果你用命令行的话

2079
01:07:09,000 --> 01:07:10,000
你一定会知道

2080
01:07:10,000 --> 01:07:12,000
你可以把一个文件的内容

2081
01:07:12,000 --> 01:07:14,000
当做某一个命令的输入

2082
01:07:14,000 --> 01:07:15,000
传给这个命令

2083
01:07:15,000 --> 01:07:17,000
或者把这个命令的输出

2084
01:07:17,000 --> 01:07:18,000
转化为一个文件

2085
01:07:18,000 --> 01:07:19,000
对吧

2086
01:07:19,000 --> 01:07:20,000
然后这个特征是通过大约号

2087
01:07:20,000 --> 01:07:21,000
小约号的实现

2088
01:07:21,000 --> 01:07:23,000
然后这个功能

2089
01:07:23,000 --> 01:07:24,000
在最开始的时候

2090
01:07:24,000 --> 01:07:25,000
就是 Kentomerson 所写的

2091
01:07:25,000 --> 01:07:28,000
第一代的 unixshale 的一个功能

2092
01:07:28,000 --> 01:07:30,000
这是 1971 年的实现功能

2093
01:07:30,000 --> 01:07:33,000
所以你每次在做输入输出重病相的时候

2094
01:07:33,000 --> 01:07:34,000
你就在使用一个

2095
01:07:34,000 --> 01:07:37,000
1971 年就有了一个功能

2096
01:07:37,000 --> 01:07:39,000
想象还是挺特别的

2097
01:07:42,000 --> 01:07:45,000
然后后期 Kentomerson 的 shale 也多了

2098
01:07:45,000 --> 01:07:47,000
就是 pipe 这支功能

2099
01:07:47,000 --> 01:07:49,000
就是我们今天会

2100
01:07:49,000 --> 01:07:49,000
管到

2101
01:07:50,000 --> 01:07:50,000
对

2102
01:07:50,000 --> 01:07:53,000
会经常说命令行最强大的功能之一

2103
01:07:53,000 --> 01:07:54,000
就是管到输

2104
01:07:54,000 --> 01:07:54,000
对吧

2105
01:07:54,000 --> 01:07:55,000
你可以把一个功能

2106
01:07:55,000 --> 01:07:58,000
你可以把一个命令的输出重病

2107
01:07:58,000 --> 01:08:00,000
也是重病相对

2108
01:08:00,000 --> 01:08:02,000
通过管到输

2109
01:08:02,000 --> 01:08:05,000
重病相到另外一个程序的输入

2110
01:08:05,000 --> 01:08:09,000
然后这个特征也是在 Kentomerson 所写的 shale 里面

2111
01:08:09,000 --> 01:08:10,000
就已经出现了

2112
01:08:11,000 --> 01:08:13,000
然后 1979 年的时候

2113
01:08:13,000 --> 01:08:16,000
unix 的 Version 7

2114
01:08:16,000 --> 01:08:18,000
简称 V 7 发布了

2115
01:08:18,000 --> 01:08:24,000
然后在随着 V 7 从搭载的 shale 叫做 Borne shell

2116
01:08:25,000 --> 01:08:29,000
应该是 Algo 原的作者之一

2117
01:08:29,000 --> 01:08:31,000
叫做 Steven Borne

2118
01:08:32,000 --> 01:08:35,000
为什么这个 shale 没有被叫做 B shell 呢

2119
01:08:35,000 --> 01:08:36,000
就是

2120
01:08:37,000 --> 01:08:41,000
他直接就延续了 Kentomerson 所写的 shale 名字

2121
01:08:41,000 --> 01:08:42,000
叫做 SH

2122
01:08:43,000 --> 01:08:44,000
然后

2123
01:08:44,000 --> 01:08:46,000
因为它是向后兼容的吧

2124
01:08:47,000 --> 01:08:49,000
Bash 也向后兼容的

2125
01:08:49,000 --> 01:08:50,000
但可能在这个时候

2126
01:08:50,000 --> 01:08:53,000
这个给 shale 重名的风气还没有流进去

2127
01:08:53,000 --> 01:08:53,000
我觉得

2128
01:08:55,000 --> 01:08:57,000
所以直到今天

2129
01:08:57,000 --> 01:09:03,000
Borne shell 一直也是世界上最为广泛使用的 shale 之一

2130
01:09:03,000 --> 01:09:06,000
因为 System V 7 是一个非常成功的 unix 版本

2131
01:09:06,000 --> 01:09:11,000
很多后视的 unix 变种也都是以 System V 7 为远蓝本

2132
01:09:11,000 --> 01:09:14,000
直到今天包括你的

2133
01:09:14,000 --> 01:09:16,000
包括你的手上的 match

2134
01:09:17,000 --> 01:09:18,000
你面前的 match

2135
01:09:18,000 --> 01:09:20,000
你手上的 iPhone

2136
01:09:20,000 --> 01:09:22,000
还有你的 Android

2137
01:09:22,000 --> 01:09:25,000
全都 slashbin slashsh 这个东西

2138
01:09:25,000 --> 01:09:29,000
是从 1979 年开始就已经存在于很多组织计算机系统里面

2139
01:09:31,000 --> 01:09:32,000
对

2140
01:09:32,000 --> 01:09:33,000
然后

2141
01:09:35,000 --> 01:09:38,000
从 System V 7 开始

2142
01:09:38,000 --> 01:09:41,000
我们有了 Posix 标准

2143
01:09:41,000 --> 01:09:45,000
然后 Posix 标准也定义说 shale 必须存在于

2144
01:09:45,000 --> 01:09:48,000
slashbin slashsh 下面

2145
01:09:48,000 --> 01:09:52,000
然后所谓符合这个标准的 shale 也会被叫做 sh

2146
01:09:52,000 --> 01:09:53,000
所以也就是说

2147
01:09:53,000 --> 01:09:56,000
当某人说这个 shale 是 sh-compatible 的时候

2148
01:09:56,000 --> 01:09:59,000
他所指的意思实际上就是指

2149
01:09:59,000 --> 01:10:03,000
跟我们刚才提到的 Sendrel shell 是互相接种

2150
01:10:03,000 --> 01:10:10,000
但如果你一定要非常精确的说一个 shale 是符合 Posix 的所有标准的话

2151
01:10:10,000 --> 01:10:13,000
你应该说它是 Posix shell

2152
01:10:15,000 --> 01:10:21,000
然后在 1978 年的时候又开始另外一个 shale 的研发工作

2153
01:10:22,000 --> 01:10:26,000
这个作者是另外一位

2154
01:10:26,000 --> 01:10:28,000
我们之前也提到过 Billy Joy

2155
01:10:28,000 --> 01:10:30,000
然后他 Billy Joy 写过什么呢

2156
01:10:30,000 --> 01:10:31,000
快速问答

2157
01:10:31,000 --> 01:10:32,000
Billy Joy 写过什么

2158
01:10:34,000 --> 01:10:35,000
就是 Vi

2159
01:10:35,000 --> 01:10:36,000
对

2160
01:10:36,000 --> 01:10:37,000
不是 Vi

2161
01:10:37,000 --> 01:10:38,000
是 Vi

2162
01:10:38,000 --> 01:10:40,000
就是最早期的 V

2163
01:10:43,000 --> 01:10:44,000
编辑器

2164
01:10:44,000 --> 01:10:47,000
它还写了一个 shale 叫 Cshale

2165
01:10:47,000 --> 01:10:51,000
然后 Cshale 的一个卖点就是 shale 这个东西

2166
01:10:51,000 --> 01:10:55,000
就是我们如果你不用 Cshale 的话

2167
01:10:55,000 --> 01:10:59,000
你会感觉到 shale 的这个语法跟 C 离得很远

2168
01:10:59,000 --> 01:11:01,000
但是在 Cshale 诞生那个年代

2169
01:11:01,000 --> 01:11:04,000
Unix 基本上全都是用 C 来写的

2170
01:11:04,000 --> 01:11:08,000
Unix 不管是用户程序还是 Unix 本身都是用 C 来写的

2171
01:11:08,000 --> 01:11:14,000
所以 Cshale 的一个设计理念就是希望能够让 shale

2172
01:11:14,000 --> 01:11:17,000
对语法尽量接近于 C 的语法

2173
01:11:17,000 --> 01:11:22,000
当然我们在今天来看可能 Cshale 的语法并不能接近 C

2174
01:11:22,000 --> 01:11:28,000
但是在 80 年代你会觉得我靠这个东西真的是跟写字语言太接近

2175
01:11:28,000 --> 01:11:29,000
但是我

2176
01:11:29,000 --> 01:11:32,000
which is a good thing

2177
01:11:32,000 --> 01:11:35,000
但是今天我会觉得说我靠为什么一个语言一个 shale

2178
01:11:35,000 --> 01:11:38,000
是要写的跟 C 一样

2179
01:11:38,000 --> 01:11:39,000
这不是自寻烦恼

2180
01:11:39,000 --> 01:11:42,000
但是在那个时代如果你得电脑上只有 C

2181
01:11:42,000 --> 01:11:44,000
你也只学过 C 的话

2182
01:11:44,000 --> 01:11:48,000
你会觉得可以用像写 C 原来一样来写 shale script

2183
01:11:48,000 --> 01:11:50,000
这是很爽的事情

2184
01:11:50,000 --> 01:11:53,000
然后 Cshale 的有很多非常多的创新

2185
01:11:53,000 --> 01:11:56,000
比如说 history

2186
01:11:56,000 --> 01:11:59,000
就是你现在在命令行下面打 history

2187
01:11:59,000 --> 01:12:02,000
你会看到自己输入过的所有的命令

2188
01:12:02,000 --> 01:12:05,000
以及你比如说你打到了

2189
01:12:05,000 --> 01:12:10,000
感叹号

2190
01:12:10,000 --> 01:12:12,000
你会重复前一条命

2191
01:12:12,000 --> 01:12:13,000
来至于你打

2192
01:12:13,000 --> 01:12:18,000
就是门刀的下滑线会把刚才上条命令的那个

2193
01:12:18,000 --> 01:12:21,000
最后一个 argument

2194
01:12:21,000 --> 01:12:22,000
重新用完

2195
01:12:22,000 --> 01:12:25,000
这一切都是源自于 Cshale

2196
01:12:25,000 --> 01:12:28,000
Cshale 创造 history 这个东西

2197
01:12:28,000 --> 01:12:31,000
然后也是从 Cshale 开始人们有 job control

2198
01:12:31,000 --> 01:12:36,000
就是你在 douse 下面可能没有遇到过什么东西

2199
01:12:36,000 --> 01:12:39,000
就是 douse 早期不是多任务的

2200
01:12:39,000 --> 01:12:41,000
你不可能在 douse 下面

2201
01:12:41,000 --> 01:12:44,000
不是整个那个可以把它 suspend

2202
01:12:44,000 --> 01:12:46,000
但是在 unit 下面

2203
01:12:46,000 --> 01:12:48,000
你从很早很早的时候就可以开始

2204
01:12:48,000 --> 01:12:49,000
比如说你正在

2205
01:12:49,000 --> 01:12:51,000
解压所有的什么东西

2206
01:12:51,000 --> 01:12:53,000
然后他需要一段时间

2207
01:12:53,000 --> 01:12:55,000
你可以肯抽假自己让他进入后台

2208
01:12:55,000 --> 01:12:57,000
然后用 bg 让他在后台继续执行

2209
01:12:57,000 --> 01:13:00,000
然后你再前台做一些别的什么东西

2210
01:13:00,000 --> 01:13:02,000
然后你同时进行很多这样的工作

2211
01:13:02,000 --> 01:13:06,000
比如说我现在不用 vim 那个习惯就是写到一半

2212
01:13:06,000 --> 01:13:07,000
然后肯抽假自己

2213
01:13:07,000 --> 01:13:08,000
然后去干点别的

2214
01:13:08,000 --> 01:13:11,000
然后在 fg 把 vim 弄回来

2215
01:13:11,000 --> 01:13:18,000
然后这个功能也是在 Cshale 里面被 village 综合实现的

2216
01:13:18,000 --> 01:13:19,000
我一直有点好奇

2217
01:13:19,000 --> 01:13:20,000
刚才那个场景

2218
01:13:20,000 --> 01:13:24,000
我一般是说再开一个这个 trunk 口

2219
01:13:24,000 --> 01:13:26,000
或者 tab 在实现的

2220
01:13:26,000 --> 01:13:29,000
就是用这个就放入后台这个的话

2221
01:13:29,000 --> 01:13:30,000
真的挺少用

2222
01:13:30,000 --> 01:13:30,000
ok

2223
01:13:30,000 --> 01:13:31,000
我还蛮常用的

2224
01:13:31,000 --> 01:13:35,000
但是如果说你的以及这个系统是一个单

2225
01:13:35,000 --> 01:13:36,000
如果你是一个远程系统的话

2226
01:13:36,000 --> 01:13:38,000
比如说然后你只能

2227
01:13:38,000 --> 01:13:40,000
就你再开一个 trunk 口也可以

2228
01:13:40,000 --> 01:13:42,000
但你再开个 ssh 连接

2229
01:13:42,000 --> 01:13:43,000
可能会要等一下

2230
01:13:43,000 --> 01:13:43,000
对

2231
01:13:43,000 --> 01:13:45,000
这个问题和解法其实就是三种

2232
01:13:45,000 --> 01:13:47,000
一多任务二 tmax

2233
01:13:47,000 --> 01:13:51,000
就是所谓的 terminal multiplexing 就是

2234
01:13:51,000 --> 01:13:52,000
中端奉用

2235
01:13:52,000 --> 01:13:55,000
可以在一个中端里面开很多小中端的窗口

2236
01:13:55,000 --> 01:13:58,000
这是一个比较重要的奇迹引脚

2237
01:13:58,000 --> 01:13:58,000
一定要学起来

2238
01:13:58,000 --> 01:14:00,000
然后在第三个方式就是

2239
01:14:00,000 --> 01:14:03,000
你再建立一个连接好

2240
01:14:03,000 --> 01:14:05,000
然后个人是比较清晨

2241
01:14:05,000 --> 01:14:06,000
这个第一种

2242
01:14:06,000 --> 01:14:08,000
因为一个时间只做一件事情嘛

2243
01:14:09,000 --> 01:14:10,000
会比较好一些

2244
01:14:11,000 --> 01:14:12,000
ok

2245
01:14:12,000 --> 01:14:13,000
这个看我也养成这个习惯

2246
01:14:13,000 --> 01:14:15,000
会比较比较顺畅一些

2247
01:14:15,000 --> 01:14:18,000
而且其实就是早期有很多

2248
01:14:18,000 --> 01:14:21,000
我也曾经试读把 vm 配置成一个 ie

2249
01:14:21,000 --> 01:14:24,000
因为在 vm 里面就直接执行程序啊

2250
01:14:24,000 --> 01:14:25,000
或者是什么

2251
01:14:25,000 --> 01:14:26,000
其实都是图楼的

2252
01:14:26,000 --> 01:14:30,000
对你为什么不直接干脆把 vm 挂起来

2253
01:14:30,000 --> 01:14:32,000
然后在命令行下面做你该做的事情

2254
01:14:32,000 --> 01:14:33,000
然后该回去的时候回去了

2255
01:14:33,000 --> 01:14:33,000
对吧

2256
01:14:36,000 --> 01:14:37,000
遮阳又遮阳

2257
01:14:37,000 --> 01:14:38,000
然后回到我们的历史课

2258
01:14:38,000 --> 01:14:40,000
这一次的历史真的要讲好久

2259
01:14:42,000 --> 01:14:43,000
刚才说 C-shell

2260
01:14:43,000 --> 01:14:46,000
C-shell 还有一些别的一些新的创新

2261
01:14:46,000 --> 01:14:48,000
比如说 to notation

2262
01:14:48,000 --> 01:14:52,000
就是你在你的 home

2263
01:14:52,000 --> 01:14:53,000
定有加模式

2264
01:14:53,000 --> 01:14:55,000
你的比如说你的 home

2265
01:14:55,000 --> 01:14:57,000
你的模式 slash home slash

2266
01:14:57,000 --> 01:14:58,000
taw

2267
01:14:58,000 --> 01:15:01,000
然后我可以用一个布料号来代替这个模式

2268
01:15:01,000 --> 01:15:03,000
诸如此类的

2269
01:15:03,000 --> 01:15:04,000
还有什么 jolting

2270
01:15:04,000 --> 01:15:08,000
就是比如说你要在同一行上面运行两个程序

2271
01:15:08,000 --> 01:15:10,000
你可以用一个分号把他们分开

2272
01:15:10,000 --> 01:15:12,000
说运行第一个再运行第二个

2273
01:15:12,000 --> 01:15:14,000
或者你可以用两个 ampercent

2274
01:15:14,000 --> 01:15:15,000
他们连起来

2275
01:15:15,000 --> 01:15:18,000
就是说如果第一个成功了才运行第二个

2276
01:15:18,000 --> 01:15:20,000
或者你可以用两个

2277
01:15:20,000 --> 01:15:22,000
用一个 pipe

2278
01:15:22,000 --> 01:15:25,000
比如说就第一个失败了才会运行第二个之类的

2279
01:15:25,000 --> 01:15:27,000
这些代表

2280
01:15:27,000 --> 01:15:27,000
对

2281
01:15:27,000 --> 01:15:31,000
这些都是在 C-shell 里面发明

2282
01:15:31,000 --> 01:15:33,000
这个跟 C 很像

2283
01:15:33,000 --> 01:15:33,000
对吧

2284
01:15:33,000 --> 01:15:34,000
ampercent

2285
01:15:34,000 --> 01:15:36,000
ampercent 和 pipe pipe 都是 C 的

2286
01:15:38,000 --> 01:15:39,000
然后到了 1980 年的时候

2287
01:15:39,000 --> 01:15:41,000
我们有的 K-shell

2288
01:15:41,000 --> 01:15:42,000
Corn shell

2289
01:15:42,000 --> 01:15:46,000
是在这个时候

2290
01:15:46,000 --> 01:15:46,000
应该是

2291
01:15:46,000 --> 01:15:49,000
Bear 实验室在专门 V-unix 发现

2292
01:15:49,000 --> 01:15:53,000
然后这个时候恰逢

2293
01:15:53,000 --> 01:15:55,000
所谓的 unix great war

2294
01:15:55,000 --> 01:15:57,000
是在 unix 的史上

2295
01:15:57,000 --> 01:15:58,000
历史上曾出现过一系列的

2296
01:15:58,000 --> 01:16:08,000
因为版权法和商业化的引发了一系列诉讼和口水账

2297
01:16:08,000 --> 01:16:10,000
因此也是因此

2298
01:16:10,000 --> 01:16:13,000
这个一片形式片大好的 unix 分裂了

2299
01:16:13,000 --> 01:16:17,000
给了这些什么微软这种公司的可振之机

2300
01:16:19,000 --> 01:16:21,000
在这个时代出现了 K-shell

2301
01:16:22,000 --> 01:16:23,000
就是 Corn shell

2302
01:16:23,000 --> 01:16:26,000
它的作者叫什么 Corn

2303
01:16:26,000 --> 01:16:26,000
对

2304
01:16:26,000 --> 01:16:26,000
对

2305
01:16:26,000 --> 01:16:27,000
对

2306
01:16:27,000 --> 01:16:29,000
DiliCorn

2307
01:16:29,000 --> 01:16:31,000
Corn 来命名

2308
01:16:31,000 --> 01:16:33,000
然后 Corn 也有一些新的

2309
01:16:33,000 --> 01:16:35,000
也有一些创新

2310
01:16:35,000 --> 01:16:36,000
但是没有 C 上那么多

2311
01:16:39,000 --> 01:16:41,000
而且 K-shell 从来没有流行起来

2312
01:16:41,000 --> 01:16:45,000
只有这个 unix 的一些官方版本还在用

2313
01:16:45,000 --> 01:16:48,000
就是那个时候 BSD 就专门避免使用它

2314
01:16:48,000 --> 01:16:52,000
因为这个 K-shell 的原码当时是没有自然发放的

2315
01:16:53,000 --> 01:16:54,000
然后当 Linux 星期的时候

2316
01:16:54,000 --> 01:16:56,000
K-shell 更是没有人理

2317
01:16:56,000 --> 01:16:59,000
他们直接就用了这个 gnw-bash

2318
01:17:01,000 --> 01:17:01,000
对

2319
01:17:01,000 --> 01:17:03,000
然后当 Linux 星期的时候

2320
01:17:03,000 --> 01:17:08,000
自由人的基金会也专门把 sh 重新开发了一遍

2321
01:17:08,000 --> 01:17:09,000
可以理解

2322
01:17:09,000 --> 01:17:12,000
然后把它命名为 BornAgain shell

2323
01:17:12,000 --> 01:17:14,000
就专门的 cow-bash 这个词

2324
01:17:15,000 --> 01:17:17,000
bash 在英语里面是

2325
01:17:18,000 --> 01:17:18,000
嗯

2326
01:17:19,000 --> 01:17:22,000
sda 还是之类的一个词

2327
01:17:22,000 --> 01:17:27,000
我是也是在接受 bash 很久之后才意识到

2328
01:17:27,000 --> 01:17:28,000
它居然是一个英语名词

2329
01:17:28,000 --> 01:17:32,000
而不是一个就是一个一个一个命令之类的

2330
01:17:33,000 --> 01:17:36,000
来我们来看一下它的这个官方试试是什么

2331
01:17:37,000 --> 01:17:38,000
bash

2332
01:17:38,000 --> 01:17:41,000
strike hard and violently

2333
01:17:41,000 --> 01:17:42,000
凶狠的 sda

2334
01:17:43,000 --> 01:17:44,000
凶狠的技能

2335
01:17:44,000 --> 01:17:46,000
就是叫有两个字叫暴走

2336
01:17:46,000 --> 01:17:47,000
暴走

2337
01:17:47,000 --> 01:17:48,000
OK

2338
01:17:49,000 --> 01:17:49,000
各位使用这个

2339
01:17:49,000 --> 01:17:50,000
翻译的呢

2340
01:17:50,000 --> 01:17:51,000
暴走

2341
01:17:53,000 --> 01:17:54,000
暴走

2342
01:17:54,000 --> 01:17:55,000
暴走

2343
01:17:55,000 --> 01:17:55,000
暴走外壳

2344
01:17:55,000 --> 01:17:56,000
暴走外壳

2345
01:17:57,000 --> 01:18:02,000
暴走外壳是我们目前计算机世界里面最常见的一个外壳

2346
01:18:02,000 --> 01:18:06,000
就是如果你是用 OS 10 的话

2347
01:18:06,000 --> 01:18:07,000
或者是你使用一个 Linux 的话

2348
01:18:07,000 --> 01:18:09,000
那很有可能是你是在用 bash

2349
01:18:09,000 --> 01:18:10,000
当然不一定啊

2350
01:18:10,000 --> 01:18:11,000
对

2351
01:18:11,000 --> 01:18:12,000
因为 Wubuntu 在前一阵子

2352
01:18:12,000 --> 01:18:17,000
把它的默认 shell 改成了 dash

2353
01:18:17,000 --> 01:18:17,000
哎

2354
01:18:17,000 --> 01:18:18,000
Wait a second

2355
01:18:18,000 --> 01:18:19,000
你又改回来了

2356
01:18:19,000 --> 01:18:19,000
没有

2357
01:18:19,000 --> 01:18:20,000
是这样的

2358
01:18:20,000 --> 01:18:20,000
不是

2359
01:18:20,000 --> 01:18:21,000
我帮你代表

2360
01:18:21,000 --> 01:18:21,000
对

2361
01:18:21,000 --> 01:18:26,000
代表把这个脚本执行的 shell 转化成了 dash

2362
01:18:26,000 --> 01:18:30,000
但是用户所提供的

2363
01:18:30,000 --> 01:18:31,000
然后对

2364
01:18:31,000 --> 01:18:34,000
但是用户所使用的这个 login shell 还是 bash

2365
01:18:34,000 --> 01:18:35,000
应该是这样

2366
01:18:35,000 --> 01:18:36,000
对

2367
01:18:37,000 --> 01:18:40,000
bash 所 bash 集中了这个

2368
01:18:41,000 --> 01:18:43,000
原有的 b shell

2369
01:18:43,000 --> 01:18:45,000
然后 c shell 和 k shell 的优点

2370
01:18:45,000 --> 01:18:47,000
这就是为什么我们刚才提到的

2371
01:18:47,000 --> 01:18:48,000
想提个家之所差

2372
01:18:48,000 --> 01:18:48,000
对

2373
01:18:48,000 --> 01:18:50,000
这就是为什么我们刚才提到的大部分功能

2374
01:18:50,000 --> 01:18:51,000
你会说

2375
01:18:51,000 --> 01:18:51,000
哎

2376
01:18:51,000 --> 01:18:52,000
我的 shel 里面也有啊

2377
01:18:52,000 --> 01:18:55,000
就是你不需要使用 c shell 才有 drop control

2378
01:18:55,000 --> 01:18:55,000
为什么

2379
01:18:55,000 --> 01:18:57,000
就是因为 bash 把 drop control 也

2380
01:18:57,000 --> 01:19:00,000
也移植过了

2381
01:19:00,000 --> 01:19:00,000
对吧

2382
01:19:01,000 --> 01:19:02,000
OK

2383
01:19:02,000 --> 01:19:05,000
但是大部分这些 shel 在如果一个脚本

2384
01:19:05,000 --> 01:19:07,000
你写一个 shel 脚本

2385
01:19:07,000 --> 01:19:09,000
然后在之前的写说的

2386
01:19:10,000 --> 01:19:11,000
hashbound

2387
01:19:11,000 --> 01:19:12,000
然后 slash bin

2388
01:19:12,000 --> 01:19:14,000
slash asn 之的话

2389
01:19:14,000 --> 01:19:17,000
他们还是会默认去伪装

2390
01:19:17,000 --> 01:19:19,000
把自己伪装成一个 shel

2391
01:19:19,000 --> 01:19:20,000
然后只提供 shel 能够提供的

2392
01:19:20,000 --> 01:19:23,000
就基本功能

2393
01:19:23,000 --> 01:19:24,000
就不提供一些

2394
01:19:24,000 --> 01:19:26,000
比如说 bash 的一些特定的语法这样

2395
01:19:26,000 --> 01:19:27,000
对

2396
01:19:27,000 --> 01:19:32,000
然后在这个 system file release 4

2397
01:19:32,000 --> 01:19:34,000
也是就是 unix 的历史上

2398
01:19:34,000 --> 01:19:37,000
一个非常重要的版本里面

2399
01:19:37,000 --> 01:19:38,000
有出现了一个角度

2400
01:19:38,000 --> 01:19:40,000
oncrst shell

2401
01:19:40,000 --> 01:19:42,000
然后它的缩写就是 ash

2402
01:19:42,000 --> 01:19:44,000
然后它的设计里面是说

2403
01:19:44,000 --> 01:19:46,000
要把这个 shel 做得尽量精巧

2404
01:19:46,000 --> 01:19:48,000
简单

2405
01:19:48,000 --> 01:19:57,000
后来这个 oncrst shell 也被进一步改进

2406
01:19:57,000 --> 01:19:59,000
就形成了 dash

2407
01:19:59,000 --> 01:20:00,000
我们刚才提到 dash 这个东西

2408
01:20:00,000 --> 01:20:02,000
就是它是一个比较精进版的 shel

2409
01:20:02,000 --> 01:20:06,000
专门拿来运行脚本程序吧

2410
01:20:06,000 --> 01:20:07,000
可以这么一句

2411
01:20:07,000 --> 01:20:10,000
那个 dash 那个 d 是 debian 吗

2412
01:20:10,000 --> 01:20:11,000
debian ash 应该是这么来的

2413
01:20:11,000 --> 01:20:13,000
对

2414
01:20:13,000 --> 01:20:14,000
对 我记得应该是这样的

2415
01:20:14,000 --> 01:20:16,000
就是前面有了那个 ash 嘛

2416
01:20:16,000 --> 01:20:17,000
对

2417
01:20:17,000 --> 01:20:18,000
dash

2418
01:20:18,000 --> 01:20:19,000
然后是 dash

2419
01:20:19,000 --> 01:20:20,000
叫 debian

2420
01:20:20,000 --> 01:20:21,000
debian 的体验呢

2421
01:20:21,000 --> 01:20:23,000
oncrst shell

2422
01:20:23,000 --> 01:20:25,000
它也是为了 chall this

2423
01:20:25,000 --> 01:20:27,000
也是为了 chall dash 这个

2424
01:20:27,000 --> 01:20:29,000
dash 是一个就像

2425
01:20:29,000 --> 01:20:32,000
充快速前充小跑

2426
01:20:32,000 --> 01:20:33,000
对

2427
01:20:33,000 --> 01:20:34,000
小跑外壳

2428
01:20:34,000 --> 01:20:35,000
刚才我们介绍了猛击外壳

2429
01:20:35,000 --> 01:20:37,000
然后有小跑外壳

2430
01:20:37,000 --> 01:20:38,000
抱作外壳

2431
01:20:38,000 --> 01:20:39,000
对

2432
01:20:39,000 --> 01:20:40,000
抱作外壳

2433
01:20:40,000 --> 01:20:42,000
小跑外壳

2434
01:20:42,000 --> 01:20:44,000
小跑外壳

2435
01:20:44,000 --> 01:20:46,000
OK

2436
01:20:46,000 --> 01:20:48,000
就还有其实还有一些比较不常见

2437
01:20:48,000 --> 01:20:49,000
比较诡异的 shel

2438
01:20:49,000 --> 01:20:51,000
然后提一下可能

2439
01:20:51,000 --> 01:20:53,000
比如说 pshpro shell

2440
01:20:53,000 --> 01:20:57,000
就是你可以在 shel 里面使用 pro 这种

2441
01:20:57,000 --> 01:20:59,000
奇怪的语言

2442
01:20:59,000 --> 01:21:02,000
来完成一些普通 sh 做不到的事

2443
01:21:02,000 --> 01:21:04,000
或者是

2444
01:21:04,000 --> 01:21:05,000
yash

2445
01:21:05,000 --> 01:21:07,000
跟 yaml 用

2446
01:21:07,000 --> 01:21:09,000
yetal other shell

2447
01:21:09,000 --> 01:21:12,000
it's a positive compilant command line shell

2448
01:21:12,000 --> 01:21:15,000
written by vatana be yuki

2449
01:21:15,000 --> 01:21:16,000
日本人

2450
01:21:16,000 --> 01:21:19,000
然后它的实现的初衷是

2451
01:21:19,000 --> 01:21:21,000
教大家用 C 语言来写一个 shel

2452
01:21:21,000 --> 01:21:23,000
本来是一个教学项目

2453
01:21:23,000 --> 01:21:24,000
后来又被

2454
01:21:24,000 --> 01:21:27,000
后来又重新改写了

2455
01:21:27,000 --> 01:21:30,000
梦里是要成为最 positive 兼容的 shel

2456
01:21:31,000 --> 01:21:34,000
世界上最 positive compilant shell

2457
01:21:34,000 --> 01:21:36,000
in the world

2458
01:21:36,000 --> 01:21:38,000
都不知道这到底是好事还是坏事

2459
01:21:38,000 --> 01:21:39,000
what's the point

2460
01:21:39,000 --> 01:21:43,000
所以这就是为什么没有人用 yash 的原因

2461
01:21:43,000 --> 01:21:49,000
刚才提到一个重要概念就是 sh compatible

2462
01:21:49,000 --> 01:21:51,000
就是你会说

2463
01:21:51,000 --> 01:21:52,000
兼容 shel

2464
01:21:52,000 --> 01:21:53,000
你会说

2465
01:21:53,000 --> 01:21:55,000
就是这个 shel 是特指不是不是不是一贩子的

2466
01:21:55,000 --> 01:21:58,000
一个 shel 是特指最开始那个

2467
01:21:58,000 --> 01:21:59,000
那个最早版本的那个 shel

2468
01:21:59,000 --> 01:22:00,000
没错

2469
01:22:00,000 --> 01:22:02,000
就兼容那个是什么意思

2470
01:22:02,000 --> 01:22:04,000
这也是我们推荐

2471
01:22:04,000 --> 01:22:07,000
在这里我们要推荐 stack exchange

2472
01:22:07,000 --> 01:22:11,000
unix 的版块上的一个答案写得非常好

2473
01:22:11,000 --> 01:22:13,000
然后这个答案里面还顺带的介绍了

2474
01:22:13,000 --> 01:22:14,000
在不同系统里面

2475
01:22:14,000 --> 01:22:17,000
这个 bin sh 所指向的东西是什么

2476
01:22:17,000 --> 01:22:20,000
比如他说在 solveris 的实里面

2477
01:22:20,000 --> 01:22:26,000
可能这个 bin sh 就是默认的 orangeable born shell

2478
01:22:26,000 --> 01:22:31,000
然后你可能在这个 linux 里面

2479
01:22:31,000 --> 01:22:34,000
可能会是 gno bash

2480
01:22:34,000 --> 01:22:36,000
然后你在 openbs 里面可能会

2481
01:22:36,000 --> 01:22:39,000
所使用是一个 ksh 93

2482
01:22:39,000 --> 01:22:42,000
with passing extensions

2483
01:22:42,000 --> 01:22:44,000
whatever it means

2484
01:22:44,000 --> 01:22:46,000
这答案是推荐大家读一读

2485
01:22:49,000 --> 01:22:50,000
好了

2486
01:22:50,000 --> 01:22:51,000
大概历史就讲到这

2487
01:22:51,000 --> 01:22:53,000
然后

2488
01:22:53,000 --> 01:22:55,000
我们讲现状了吗

2489
01:22:55,000 --> 01:23:00,000
时光期且快进到 2010 年

2490
01:23:00,000 --> 01:23:04,000
或者说 21 世纪的第一个实验已经过去了

2491
01:23:04,000 --> 01:23:06,000
我们还是在使用 shel

2492
01:23:06,000 --> 01:23:07,000
只不过今天

2493
01:23:07,000 --> 01:23:11,000
我不知道 real 你

2494
01:23:11,000 --> 01:23:14,000
但是我所使用 shel 是一个叫做 zshel 的东西

2495
01:23:14,000 --> 01:23:16,000
我也是

2496
01:23:16,000 --> 01:23:18,000
我这里可能要说一下

2497
01:23:18,000 --> 01:23:22,000
刚才提了各种各样的乱七八糟的 shel 也好几种

2498
01:23:22,000 --> 01:23:24,000
但其实经过这么多年

2499
01:23:24,000 --> 01:23:26,000
这个系统的变成

2500
01:23:26,000 --> 01:23:29,000
现在剩下的也就那么几个了

2501
01:23:29,000 --> 01:23:33,000
一个是绝大多数的 linux 发新版

2502
01:23:33,000 --> 01:23:37,000
和 wester 也是默认识的 bash

2503
01:23:37,000 --> 01:23:41,000
然后有一小撮 shel 死争粉

2504
01:23:41,000 --> 01:23:44,000
在坚持用的一个 zshel

2505
01:23:44,000 --> 01:23:46,000
这怎么念 zsh

2506
01:23:46,000 --> 01:23:50,000
还有就是在一些精减系统上

2507
01:23:50,000 --> 01:23:51,000
或者是签入实习系统上

2508
01:23:51,000 --> 01:23:56,000
像一个 busybox 里面自带的

2509
01:23:56,000 --> 01:23:57,000
应该是 sh

2510
01:23:57,000 --> 01:23:58,000
对

2511
01:23:58,000 --> 01:24:01,000
在比较简简普通的

2512
01:24:01,000 --> 01:24:02,000
或者功能比较低下的

2513
01:24:02,000 --> 01:24:05,000
不需要经常交互的操作程序里面

2514
01:24:05,000 --> 01:24:07,000
基本上就提供一个 sh 就够了

2515
01:24:07,000 --> 01:24:07,000
对

2516
01:24:07,000 --> 01:24:09,000
就是复杂度比较

2517
01:24:09,000 --> 01:24:10,000
那个的复杂度也比较低

2518
01:24:10,000 --> 01:24:12,000
适合在那种资源比较有限的系统上

2519
01:24:12,000 --> 01:24:13,000
是

2520
01:24:13,000 --> 01:24:14,000
对

2521
01:24:14,000 --> 01:24:16,000
先说 wester

2522
01:24:16,000 --> 01:24:18,000
因为我们常用的主机都是这个

2523
01:24:18,000 --> 01:24:20,000
wester 现在的版本里面

2524
01:24:20,000 --> 01:24:22,000
起码是自带两个 shel 的

2525
01:24:22,000 --> 01:24:23,000
一个是 bash

2526
01:24:23,000 --> 01:24:25,000
一个是 zsh

2527
01:24:25,000 --> 01:24:26,000
对

2528
01:24:26,000 --> 01:24:27,000
有一个什么问题

2529
01:24:27,000 --> 01:24:30,000
因为 bash 从 4.0 开始

2530
01:24:30,000 --> 01:24:31,000
对

2531
01:24:31,000 --> 01:24:34,000
wester 自带的 bash 的版本特别老

2532
01:24:34,000 --> 01:24:36,000
原因是因为 bash 4.0 开始

2533
01:24:36,000 --> 01:24:42,000
他们切换到 GPLV 3 应该是的授权协议

2534
01:24:42,000 --> 01:24:46,000
然后跟 wester 商业不开源产品是有冲突的

2535
01:24:46,000 --> 01:24:48,000
所以他们指的

2536
01:24:48,000 --> 01:24:50,000
就是 wester 打载的这个 bash

2537
01:24:50,000 --> 01:24:52,000
可能永远只能停留在 3.0

2538
01:24:52,000 --> 01:24:55,000
就是大半版号是 3 个这个版本

2539
01:24:55,000 --> 01:24:59,000
现在没有办法再进步到这个 4 了

2540
01:24:59,000 --> 01:25:03,000
但是 wester 还自带了一个 zsh

2541
01:25:03,000 --> 01:25:05,000
zsh 是用的应该是 bsd 协议吧

2542
01:25:05,000 --> 01:25:07,000
zsh 是 bsd 协议

2543
01:25:07,000 --> 01:25:08,000
确认一下

2544
01:25:08,000 --> 01:25:10,000
确认一下

2545
01:25:10,000 --> 01:25:12,000
我记得是 bsd 协议

2546
01:25:14,000 --> 01:25:15,000
对

2547
01:25:15,000 --> 01:25:18,000
zsh 是 mit 协议的

2548
01:25:18,000 --> 01:25:20,000
而且内 mit 协议的

2549
01:25:20,000 --> 01:25:22,000
所以它更灵活一些

2550
01:25:22,000 --> 01:25:27,000
所以 wester 还是可以就是继续搭载他

2551
01:25:27,000 --> 01:25:28,000
最新版本

2552
01:25:28,000 --> 01:25:30,000
基本上 wester 搭载的最新版本都

2553
01:25:30,000 --> 01:25:33,000
比搭载的版本比最新版本

2554
01:25:33,000 --> 01:25:36,000
基本就只差一两个小版本好

2555
01:25:36,000 --> 01:25:36,000
挺好的

2556
01:25:36,000 --> 01:25:39,000
而且 zsh 也更新不是那么轻

2557
01:25:39,000 --> 01:25:41,000
所以还好

2558
01:25:41,000 --> 01:25:43,000
对最新版的最新版的最新版是 5.1

2559
01:25:43,000 --> 01:25:45,000
2015 年 8 月 30

2560
01:25:46,000 --> 01:25:46,000
两个月前

2561
01:25:46,000 --> 01:25:48,000
所以就还好

2562
01:25:48,000 --> 01:25:50,000
如果你还是坚持要用 bash 的话

2563
01:25:50,000 --> 01:25:53,000
基本上非常推荐你的一点是

2564
01:25:53,000 --> 01:25:54,000
可以 homebrew 再装

2565
01:25:54,000 --> 01:25:57,000
赶紧用 homebrew 装一个新版的 bash

2566
01:25:57,000 --> 01:25:58,000
如果你是一个初学者的话

2567
01:25:58,000 --> 01:26:01,000
然后你可能暂时说我要保守一点

2568
01:26:01,000 --> 01:26:05,000
先从一个原刘比较古早的东西

2569
01:26:05,000 --> 01:26:06,000
开入手的话

2570
01:26:06,000 --> 01:26:09,000
因为我相信 dafn 的 liliths 的这个教程

2571
01:26:09,000 --> 01:26:13,000
基本上也会用 bash 作为主要的教学工具

2572
01:26:13,000 --> 01:26:14,000
你可以

2573
01:26:14,000 --> 01:26:15,000
对

2574
01:26:15,000 --> 01:26:16,000
因为默认是那个

2575
01:26:16,000 --> 01:26:18,000
所以最好是先升级

2576
01:26:18,000 --> 01:26:20,000
Zsh 的 liliths 怎么样

2577
01:26:20,000 --> 01:26:23,000
Zsh 是 1990 年

2578
01:26:23,000 --> 01:26:25,000
1990 年的时候的一个叫做

2579
01:26:25,000 --> 01:26:28,000
POW FASTAR

2580
01:26:28,000 --> 01:26:32,000
FASTAR 是那个

2581
01:26:32,000 --> 01:26:34,000
你为什么要说

2582
01:26:34,000 --> 01:26:37,000
Hero of the Storm 里面一个那个骑士旧的哥们

2583
01:26:37,000 --> 01:26:41,000
他在魔术线里面应该是在

2584
01:26:41,000 --> 01:26:42,000
Hintland

2585
01:26:42,000 --> 01:26:44,000
新特兰的那个

2586
01:26:44,000 --> 01:26:47,000
师旧城堡里面的主管

2587
01:26:47,000 --> 01:26:48,000
FASTAR

2588
01:26:48,000 --> 01:26:51,000
POW FASTAR 是写的

2589
01:26:51,000 --> 01:26:54,000
脑中浮现出了一个矮人骑在师旧上

2590
01:26:54,000 --> 01:26:57,000
打点脑的场景

2591
01:26:57,000 --> 01:27:00,000
然后他在 1990 年时候读普林斯顿

2592
01:27:00,000 --> 01:27:01,000
他是一个学生

2593
01:27:01,000 --> 01:27:02,000
他是一个学生

2594
01:27:02,000 --> 01:27:06,000
然后他的导师叫做邵忠

2595
01:27:06,000 --> 01:27:07,000
一个华人

2596
01:27:07,000 --> 01:27:08,000
是个好

2597
01:27:08,000 --> 01:27:09,000
是个华人

2598
01:27:09,000 --> 01:27:12,000
然后邵忠的登陆名

2599
01:27:12,000 --> 01:27:14,000
叫做 Zsh

2600
01:27:14,000 --> 01:27:15,000
是中邵

2601
01:27:15,000 --> 01:27:16,000
对吧

2602
01:27:16,000 --> 01:27:18,000
就是先名后姓

2603
01:27:18,000 --> 01:27:20,000
然后他觉得这个名字很屌

2604
01:27:20,000 --> 01:27:24,000
就用 Zsh 来当作自己写的这个

2605
01:27:24,000 --> 01:27:27,000
Zsh 来当作写的这个

2606
01:27:27,000 --> 01:27:27,000
Zsh 来当作写的这个

2607
01:27:27,000 --> 01:27:30,000
然后但是 Zsh 和 Csh 也是压运的

2608
01:27:30,000 --> 01:27:32,000
对吧

2609
01:27:32,000 --> 01:27:34,000
对

2610
01:27:34,000 --> 01:27:34,000
是这么来的

2611
01:27:34,000 --> 01:27:37,000
然后他出于某种原因

2612
01:27:37,000 --> 01:27:39,000
把他做得非常的复杂

2613
01:27:39,000 --> 01:27:40,000
要强大

2614
01:27:40,000 --> 01:27:41,000
我觉得肯定是

2615
01:27:41,000 --> 01:27:43,000
就觉得已经到了 90 年代了

2616
01:27:43,000 --> 01:27:43,000
对吧

2617
01:27:43,000 --> 01:27:45,000
我们应该给这个古老了

2618
01:27:45,000 --> 01:27:46,000
与时俱进

2619
01:27:46,000 --> 01:27:47,000
时俱进

2620
01:27:47,000 --> 01:27:49,000
所以做了非常多的优化

2621
01:27:49,000 --> 01:27:53,000
比如说他提供了

2622
01:27:53,000 --> 01:27:56,000
extensive 的

2623
01:27:56,000 --> 01:27:58,000
输入提示

2624
01:27:58,000 --> 01:28:00,000
就是你在输入名页的话

2625
01:28:00,000 --> 01:28:02,000
你在 bass 什么按 tab

2626
01:28:02,000 --> 01:28:06,000
你可能只会得到 tab

2627
01:28:06,000 --> 01:28:07,000
对吧

2628
01:28:07,000 --> 01:28:08,000
OK

2629
01:28:08,000 --> 01:28:11,000
在 bass 下面输入一个名页的一半按 tab

2630
01:28:11,000 --> 01:28:14,000
他会补权到什么地方位置

2631
01:28:14,000 --> 01:28:17,000
补权到他能够

2632
01:28:17,000 --> 01:28:18,000
第一个字符吧

2633
01:28:18,000 --> 01:28:20,000
就是有奇异的第一个字符

2634
01:28:20,000 --> 01:28:21,000
对

2635
01:28:21,000 --> 01:28:22,000
会补权到第一个奇异位置

2636
01:28:22,000 --> 01:28:26,000
然后 Zsh 要则会列出所有可能名领

2637
01:28:26,000 --> 01:28:28,000
在你那个当前行下面

2638
01:28:28,000 --> 01:28:30,000
列出所有可能名

2639
01:28:30,000 --> 01:28:34,000
然后 Zsh 还会就像那个 Google

2640
01:28:34,000 --> 01:28:36,000
会问你说

2641
01:28:36,000 --> 01:28:37,000
如果你输出了一个名领的话

2642
01:28:37,000 --> 01:28:37,000
他会问你说

2643
01:28:37,000 --> 01:28:39,000
你是不是想要执行另外一个名领

2644
01:28:39,000 --> 01:28:41,000
有时候这个挺讨厌的

2645
01:28:41,000 --> 01:28:44,000
但是就还带这个 auto correction

2646
01:28:44,000 --> 01:28:45,000
准备 correction

2647
01:28:45,000 --> 01:28:48,000
当然我们现在都用 fuck

2648
01:28:48,000 --> 01:28:50,000
如果你我们待会提到 fuck 这种

2649
01:28:50,000 --> 01:28:54,000
然后他还可以做一些比较神的事情

2650
01:28:54,000 --> 01:28:59,000
比如说你要 sap 到一个远端的服务器上

2651
01:28:59,000 --> 01:29:01,000
在 bash 里面

2652
01:29:01,000 --> 01:29:05,000
你必须记住远端的服务器的那个路径是什么

2653
01:29:05,000 --> 01:29:05,000
路径

2654
01:29:05,000 --> 01:29:06,000
但是在 Zsh 要里面

2655
01:29:06,000 --> 01:29:07,000
你只要不停的按 tab

2656
01:29:07,000 --> 01:29:11,000
他会帮你补权远程服务器上的路径

2657
01:29:11,000 --> 01:29:12,000
这也是很吊

2658
01:29:12,000 --> 01:29:13,000
实用很吊

2659
01:29:13,000 --> 01:29:15,000
非常的可以麻烦

2660
01:29:15,000 --> 01:29:18,000
另外就是我个人最喜欢的一点

2661
01:29:18,000 --> 01:29:23,000
就是他可以在屏幕的右侧显示一个 promote

2662
01:29:23,000 --> 01:29:24,000
在右侧有一个提示符

2663
01:29:24,000 --> 01:29:26,000
这个还

2664
01:29:26,000 --> 01:29:27,000
对标准当下

2665
01:29:27,000 --> 01:29:28,000
一般都只有在左侧提示

2666
01:29:28,000 --> 01:29:32,000
因为那个自服 twar 的这个

2667
01:29:32,000 --> 01:29:34,000
就补齐的方式是这样子

2668
01:29:34,000 --> 01:29:35,000
然后如果你在右侧

2669
01:29:35,000 --> 01:29:37,000
你要做一些额外的事情

2670
01:29:37,000 --> 01:29:38,000
要 retraw 对吧

2671
01:29:38,000 --> 01:29:39,000
对

2672
01:29:39,000 --> 01:29:40,000
这个还有

2673
01:29:40,000 --> 01:29:43,000
就有时候那么有那些不那么重要的信息

2674
01:29:43,000 --> 01:29:45,000
你放在右边还是比较有比较好

2675
01:29:45,000 --> 01:29:46,000
比如说我现在在右边放

2676
01:29:46,000 --> 01:29:48,000
当前的时间

2677
01:29:48,000 --> 01:29:49,000
用户名主机

2678
01:29:49,000 --> 01:29:55,000
然后是 Python Vertical Environment 的名称

2679
01:29:55,000 --> 01:29:55,000
对

2680
01:29:55,000 --> 01:30:00,000
然后左边就只放目录和大约号提示符

2681
01:30:00,000 --> 01:30:03,000
我觉得还蛮方便

2682
01:30:04,000 --> 01:30:05,000
所以这里其实要说一点

2683
01:30:05,000 --> 01:30:08,000
就是说刚才讲的 Zshell 的大部分这种高级特性

2684
01:30:08,000 --> 01:30:13,000
其实在后来的新版本的 bash 里面

2685
01:30:13,000 --> 01:30:15,000
也通过各种各种各种各样的方式

2686
01:30:15,000 --> 01:30:16,000
能够逐渐实现

2687
01:30:16,000 --> 01:30:16,000
对

2688
01:30:16,000 --> 01:30:19,000
所以在 feature come

2689
01:30:19,000 --> 01:30:20,000
就是什么呢

2690
01:30:20,000 --> 01:30:22,000
就是在特性的完成度上

2691
01:30:22,000 --> 01:30:24,000
现代版本的 Zshell 和现代版本的 bash

2692
01:30:24,000 --> 01:30:25,000
就是相差不大

2693
01:30:25,000 --> 01:30:26,000
对

2694
01:30:26,000 --> 01:30:30,000
但是在 90 年代 Zshell 的很多特性是

2695
01:30:30,000 --> 01:30:31,000
现在的

2696
01:30:31,000 --> 01:30:32,000
是那个时候的 bash 用户

2697
01:30:32,000 --> 01:30:33,000
不能不可想象

2698
01:30:37,000 --> 01:30:39,000
这就是为什么从 90 年代开始

2699
01:30:39,000 --> 01:30:41,000
有了一大堆 Zshell 拥顿

2700
01:30:41,000 --> 01:30:42,000
然后一直到今天

2701
01:30:42,000 --> 01:30:47,000
在大概在 2010 年前后出现了一个做

2702
01:30:47,000 --> 01:30:49,000
Omed Zshell 的项目

2703
01:30:50,000 --> 01:30:54,000
这是一个由社区维护的 Zshell 的配置

2704
01:30:54,000 --> 01:30:56,000
和插件的一个集合

2705
01:30:56,000 --> 01:30:56,000
对

2706
01:30:56,000 --> 01:30:59,000
就是如果你去装一个 Omed Zshell 的话

2707
01:30:59,000 --> 01:31:00,000
你可以很多很多东西

2708
01:31:00,000 --> 01:31:02,000
就只需要改一个小小的配置文件

2709
01:31:02,000 --> 01:31:04,000
里面的一行就能用到

2710
01:31:05,000 --> 01:31:07,000
就可以有个很帅很酷的

2711
01:31:07,000 --> 01:31:10,000
那么一个就是密尼昂的提示

2712
01:31:10,000 --> 01:31:10,000
对

2713
01:31:10,000 --> 01:31:14,000
比如说它里面提供了几百种那个主题

2714
01:31:14,000 --> 01:31:15,000
随便改一改

2715
01:31:15,000 --> 01:31:15,000
你会觉得

2716
01:31:15,000 --> 01:31:18,000
你会让不明就理人看到我

2717
01:31:18,000 --> 01:31:19,000
可能在搞什么

2718
01:31:19,000 --> 01:31:20,000
这是什么东西

2719
01:31:20,000 --> 01:31:22,000
看起来好多

2720
01:31:22,000 --> 01:31:24,000
当然

2721
01:31:24,000 --> 01:31:25,000
所以我有一个问题问你

2722
01:31:25,000 --> 01:31:28,000
就是为什么你要从 Bash 切换到 Zshell

2723
01:31:28,000 --> 01:31:30,000
其实我

2724
01:31:30,000 --> 01:31:31,000
其实我犹豫过很久

2725
01:31:31,000 --> 01:31:33,000
就是我这个

2726
01:31:35,000 --> 01:31:37,000
在两者之间反复跳跃了很多次

2727
01:31:38,000 --> 01:31:39,000
OK

2728
01:31:39,000 --> 01:31:43,000
但是你最终要去做这个选择的原因是什么

2729
01:31:45,000 --> 01:31:46,000
最终选择的原因

2730
01:31:46,000 --> 01:31:48,000
还是因为他的心动性太多了

2731
01:31:48,000 --> 01:31:49,000
或者说对于我来说

2732
01:31:49,000 --> 01:31:53,000
他的 Killer Feature 就是右边的这个 Promote

2733
01:31:55,000 --> 01:31:55,000
对

2734
01:31:55,000 --> 01:31:56,000
这个好像在 Bash 里面

2735
01:31:56,000 --> 01:31:58,000
现在我觉得还比较难实现

2736
01:31:58,000 --> 01:31:58,000
在 Bash 里面

2737
01:31:58,000 --> 01:31:59,000
也不可能做人家

2738
01:32:03,000 --> 01:32:04,000
其他的其实也没什么

2739
01:32:04,000 --> 01:32:06,000
因为我现在的状况

2740
01:32:06,000 --> 01:32:09,000
其实是我在办公室会用 Bash

2741
01:32:09,000 --> 01:32:10,000
在公司会用 Bash

2742
01:32:10,000 --> 01:32:12,000
然后回来家用 Zshell

2743
01:32:14,000 --> 01:32:16,000
其实这两个的语法

2744
01:32:16,000 --> 01:32:17,000
在大部分情况下是兼容的

2745
01:32:17,000 --> 01:32:18,000
在 99%情况下

2746
01:32:18,000 --> 01:32:20,000
你是感觉不到差别的

2747
01:32:20,000 --> 01:32:21,000
只是有时候你在 Zshell 下面

2748
01:32:21,000 --> 01:32:22,000
会觉得非常方便

2749
01:32:22,000 --> 01:32:24,000
比如说刚才提到这个命令的问题

2750
01:32:24,000 --> 01:32:25,000
你在 Bash 下面

2751
01:32:25,000 --> 01:32:26,000
你可能要 Type 很多次

2752
01:32:26,000 --> 01:32:28,000
然后才能找到自己

2753
01:32:28,000 --> 01:32:29,000
需要找到那个

2754
01:32:29,000 --> 01:32:30,000
但是在 Zshell 下面

2755
01:32:30,000 --> 01:32:31,000
你可能就 Type 一次

2756
01:32:31,000 --> 01:32:32,000
然后看一看

2757
01:32:32,000 --> 01:32:33,000
你就知道你要要谁

2758
01:32:34,000 --> 01:32:36,000
但是除此之外

2759
01:32:36,000 --> 01:32:40,000
其实 Zshell 的代表的改进并没有太多

2760
01:32:40,000 --> 01:32:41,000
你能整个说在公司里面

2761
01:32:41,000 --> 01:32:43,000
我基本不会觉得

2762
01:32:43,000 --> 01:32:47,000
这里如果我是在用 Zshell 就好了

2763
01:32:47,000 --> 01:32:48,000
这就是为什么后来

2764
01:32:48,000 --> 01:32:51,000
我曾经很多次切换回 Bash

2765
01:32:51,000 --> 01:32:53,000
在自己的电脑上面

2766
01:32:53,000 --> 01:32:55,000
因为总觉得 Zshell 是一个

2767
01:32:56,000 --> 01:32:58,000
No Standard 的东西

2768
01:32:58,000 --> 01:33:00,000
就要加引的好了

2769
01:33:00,000 --> 01:33:02,000
当然也非常常见

2770
01:33:02,000 --> 01:33:05,000
但是没有像 Bash 那样

2771
01:33:05,000 --> 01:33:07,000
就是到处都有

2772
01:33:07,000 --> 01:33:07,000
对吧

2773
01:33:07,000 --> 01:33:10,000
那我为什么要依赖于这种

2774
01:33:11,000 --> 01:33:13,000
其实没有那么多变利的东西呢

2775
01:33:13,000 --> 01:33:14,000
但后来还是觉得

2776
01:33:14,000 --> 01:33:16,000
能方便一点就方便一点

2777
01:33:16,000 --> 01:33:16,000
何必呢

2778
01:33:17,000 --> 01:33:21,000
我从 Bash 切换到 Zshell 的原因

2779
01:33:21,000 --> 01:33:22,000
比较简单

2780
01:33:22,000 --> 01:33:24,000
就是我当时做了一个 Bash 的

2781
01:33:24,000 --> 01:33:25,000
一个 Promote

2782
01:33:25,000 --> 01:33:28,000
一个小脚本

2783
01:33:28,000 --> 01:33:32,000
就是制定意自己定制化

2784
01:33:32,000 --> 01:33:33,000
这个 Bash 的提示服

2785
01:33:33,000 --> 01:33:34,000
你用实证什么

2786
01:33:34,000 --> 01:33:35,000
我发现这个 Bash 的

2787
01:33:36,000 --> 01:33:38,000
就是那个 Bash Powered Live

2788
01:33:38,000 --> 01:33:39,000
我在 GitHub 上

2789
01:33:39,000 --> 01:33:40,000
应该是最被心标的

2790
01:33:40,000 --> 01:33:42,000
最多的一个 Repository

2791
01:33:43,000 --> 01:33:44,000
就可以实现比如说

2792
01:33:45,000 --> 01:33:48,000
以一种看起来还挺帅的方式

2793
01:33:48,000 --> 01:33:49,000
显示

2794
01:33:49,000 --> 01:33:51,000
比如说你如果你这个目录是有 Git 的话

2795
01:33:51,000 --> 01:33:54,000
它会显示 Git 的这个 Branch 的名字

2796
01:33:54,000 --> 01:33:57,000
它会显示说你有多少个 Commit

2797
01:33:57,000 --> 01:33:58,000
你有多少个 Commit

2798
01:33:58,000 --> 01:34:01,000
就是 Ahead 或者是 Behind

2799
01:34:01,000 --> 01:34:02,000
远端

2800
01:34:02,000 --> 01:34:03,000
然后它可以显示

2801
01:34:03,000 --> 01:34:05,000
根据你上一条命令的

2802
01:34:05,000 --> 01:34:07,000
执行的结果是正常还是异常

2803
01:34:07,000 --> 01:34:09,000
它会显示是绿色或者是红色

2804
01:34:09,000 --> 01:34:10,000
这样一些

2805
01:34:10,000 --> 01:34:13,000
比较花巧的功能般

2806
01:34:14,000 --> 01:34:16,000
然后在做的功能中

2807
01:34:16,000 --> 01:34:18,000
就发现其实 Bash 的那些语法

2808
01:34:18,000 --> 01:34:18,000
是比较坑爹的

2809
01:34:18,000 --> 01:34:20,000
就是很

2810
01:34:20,000 --> 01:34:21,000
就比较

2811
01:34:21,000 --> 01:34:22,000
首先不是太一致

2812
01:34:22,000 --> 01:34:23,000
然后也不太好记

2813
01:34:23,000 --> 01:34:25,000
每次都要去追求它半天

2814
01:34:25,000 --> 01:34:26,000
到底怎么去写

2815
01:34:26,000 --> 01:34:27,000
去查半天到底怎么去写

2816
01:34:27,000 --> 01:34:29,000
就是它语法比较

2817
01:34:29,000 --> 01:34:30,000
inconsistent

2818
01:34:30,000 --> 01:34:30,000
对

2819
01:34:30,000 --> 01:34:32,000
然后 Zesh 的

2820
01:34:32,000 --> 01:34:33,000
那个就会好很多

2821
01:34:33,000 --> 01:34:36,000
所以我最后就签了 Zesh 上面

2822
01:34:36,000 --> 01:34:38,000
当然还有一个很重要的原因就是

2823
01:34:38,000 --> 01:34:40,000
刚才讲的那个 Western 自带的 Zesh

2824
01:34:40,000 --> 01:34:40,000
版本比较新

2825
01:34:40,000 --> 01:34:41,000
对

2826
01:34:41,000 --> 01:34:42,000
然后我又是

2827
01:34:42,000 --> 01:34:44,000
我现在遵循那个哲学就是

2828
01:34:44,000 --> 01:34:45,000
能不折腾

2829
01:34:45,000 --> 01:34:46,000
就折腾

2830
01:34:46,000 --> 01:34:49,000
我不想在 Homebook 再装一遍 Bash

2831
01:34:49,000 --> 01:34:50,000
然后再踢掉这样

2832
01:34:50,000 --> 01:34:50,000
对

2833
01:34:50,000 --> 01:34:51,000
没错

2834
01:34:51,000 --> 01:34:51,000
对

2835
01:34:51,000 --> 01:34:52,000
其实我刚才想说的也是

2836
01:34:52,000 --> 01:34:54,000
就是 ZeshL 有很多

2837
01:34:54,000 --> 01:34:59,000
它设立出想要达成的目的之一

2838
01:34:59,000 --> 01:35:04,000
就是用 ZeshL 写的 SaleScript

2839
01:35:05,000 --> 01:35:08,000
或者说用使用了 ZeshL 的扩展

2840
01:35:09,000 --> 01:35:12,000
而不是纯粹的 Sale

2841
01:35:12,000 --> 01:35:15,000
sh compatible 的 SaleScript

2842
01:35:15,000 --> 01:35:17,000
应该为 Bash 写的更

2843
01:35:18,000 --> 01:35:20,000
易读更易写

2844
01:35:20,000 --> 01:35:23,000
而且更优雅一点

2845
01:35:23,000 --> 01:35:23,000
应该可以

2846
01:35:23,000 --> 01:35:25,000
应该应该什么优雅

2847
01:35:25,000 --> 01:35:26,000
这个词在这

2848
01:35:26,000 --> 01:35:27,000
但是很遗憾这一点

2849
01:35:27,000 --> 01:35:28,000
并没有扑开来

2850
01:35:28,000 --> 01:35:30,000
就是这世界上大部分的 SaleScript

2851
01:35:30,000 --> 01:35:32,000
还是要么是 Sale

2852
01:35:32,000 --> 01:35:34,000
要么是 Bash

2853
01:35:34,000 --> 01:35:38,000
还是很少有人在用写 ZeshL 的 SaleScript

2854
01:35:39,000 --> 01:35:40,000
可能要比 Zesh

2855
01:35:40,000 --> 01:35:42,000
其实如果写 SaleScript 的话

2856
01:35:42,000 --> 01:35:46,000
其实还是用最精简的 Sale 的语法

2857
01:35:46,000 --> 01:35:48,000
通用性会强一点

2858
01:35:48,000 --> 01:35:48,000
对

2859
01:35:48,000 --> 01:35:50,000
但是很多人会觉得说

2860
01:35:50,000 --> 01:35:52,000
比如说 Bash 的一些扩展

2861
01:35:52,000 --> 01:35:57,000
就是双方括号

2862
01:35:57,000 --> 01:35:57,000
方括号

2863
01:35:57,000 --> 01:36:01,000
比单括号要能够表达语意

2864
01:36:01,000 --> 01:36:02,000
实际上能够多一些

2865
01:36:02,000 --> 01:36:02,000
对吧

2866
01:36:02,000 --> 01:36:04,000
所以很多人会选择用 Sale

2867
01:36:04,000 --> 01:36:06,000
用 Bash 来写 SaleScript

2868
01:36:06,000 --> 01:36:10,000
但是这个数目还是要远远远远多于

2869
01:36:11,000 --> 01:36:13,000
用 ZeshL 来写

2870
01:36:13,000 --> 01:36:14,000
这一点还是挺遗憾的

2871
01:36:15,000 --> 01:36:16,000
那倒是

2872
01:36:18,000 --> 01:36:20,000
其实除了这些比较正统的

2873
01:36:20,000 --> 01:36:21,000
这个销转

2874
01:36:21,000 --> 01:36:23,000
也有一些比较新的尝试

2875
01:36:23,000 --> 01:36:24,000
最近几年出现的

2876
01:36:24,000 --> 01:36:25,000
就是说

2877
01:36:25,000 --> 01:36:27,000
为什么有那么多的历史包袱

2878
01:36:27,000 --> 01:36:28,000
假设我们不考虑下号建议人心

2879
01:36:28,000 --> 01:36:29,000
对

2880
01:36:29,000 --> 01:36:32,000
如果抛开 PosageSH Compatibility 这个历史包袱的话

2881
01:36:32,000 --> 01:36:35,000
现在今天的事要真正可以各种各样

2882
01:36:37,000 --> 01:36:37,000
对

2883
01:36:37,000 --> 01:36:39,000
其实其中比较著名的就是这叫做 Fish 的

2884
01:36:39,000 --> 01:36:39,000
对

2885
01:36:39,000 --> 01:36:41,000
这个鱼

2886
01:36:41,000 --> 01:36:41,000
鱼壳

2887
01:36:41,000 --> 01:36:42,000
算是用了最多一个

2888
01:36:44,000 --> 01:36:45,000
最著名的

2889
01:36:45,000 --> 01:36:46,000
Sale 不见了

2890
01:36:46,000 --> 01:36:47,000
SH 不见了我们

2891
01:36:47,000 --> 01:36:48,000
Sale

2892
01:36:48,000 --> 01:36:49,000
对

2893
01:36:49,000 --> 01:36:49,000
对

2894
01:36:50,000 --> 01:36:52,000
所以你有日常在用吗

2895
01:36:53,000 --> 01:36:55,000
我有一段时间

2896
01:36:55,000 --> 01:36:57,000
他把它用当做主力 Sale 来用

2897
01:36:57,000 --> 01:36:58,000
它确实挺方便的

2898
01:36:58,000 --> 01:36:59,000
它很多

2899
01:36:59,000 --> 01:37:00,000
很多

2900
01:37:00,000 --> 01:37:01,000
Modern Feature

2901
01:37:01,000 --> 01:37:03,000
很多现代的特性

2902
01:37:03,000 --> 01:37:03,000
比如说

2903
01:37:03,000 --> 01:37:06,000
就是有这个愚法高量的命令

2904
01:37:06,000 --> 01:37:06,000
对

2905
01:37:06,000 --> 01:37:07,000
你会去输

2906
01:37:07,000 --> 01:37:09,000
有时候你会产生一种我在用一个 ID

2907
01:37:09,000 --> 01:37:10,000
一万的这样做

2908
01:37:10,000 --> 01:37:12,000
就是比如说你打一个

2909
01:37:12,000 --> 01:37:14,000
打个 SLS

2910
01:37:14,000 --> 01:37:17,000
然后它会把 LS 所能显示的所有参数

2911
01:37:17,000 --> 01:37:19,000
所能使用所有的参数显示在你当前行动下来

2912
01:37:21,000 --> 01:37:21,000
对

2913
01:37:22,000 --> 01:37:25,000
然后它就是还有一些像自动补齐的下拉列表

2914
01:37:26,000 --> 01:37:28,000
还有各种各样的这种一些很好的特性

2915
01:37:28,000 --> 01:37:29,000
甚至还有一个

2916
01:37:30,000 --> 01:37:32,000
它好像就是一个网页版本的什么东西来的

2917
01:37:32,000 --> 01:37:35,000
它的主题是可以通过 CSS

2918
01:37:35,000 --> 01:37:37,000
还是什么的音乐东西来

2919
01:37:38,000 --> 01:37:39,000
来配置

2920
01:37:39,000 --> 01:37:41,000
它的配色也是很方便

2921
01:37:41,000 --> 01:37:44,000
要说到配色要讲 2564 那些

2922
01:37:44,000 --> 01:37:47,000
其实在需要里面打出有颜色的字这件事来说

2923
01:37:47,000 --> 01:37:49,000
还是挺麻烦的

2924
01:37:49,000 --> 01:37:49,000
对

2925
01:37:49,000 --> 01:37:52,000
有时候你可能会觉得说我可现在已经 60 年过去了

2926
01:37:52,000 --> 01:37:56,000
我居然还是不能在中端之下

2927
01:37:57,000 --> 01:37:59,000
方便的搞出颜色

2928
01:37:59,000 --> 01:38:01,000
让用户看到我希望能看到颜色

2929
01:38:01,000 --> 01:38:02,000
就这么难

2930
01:38:03,000 --> 01:38:03,000
就是

2931
01:38:03,000 --> 01:38:04,000
对

2932
01:38:05,000 --> 01:38:06,000
就像也要吐槽的一件事

2933
01:38:06,000 --> 01:38:07,000
对

2934
01:38:07,000 --> 01:38:08,000
就如果你使用 item

2935
01:38:08,000 --> 01:38:11,000
然后你要把想让 item 看起来漂亮一点的话

2936
01:38:11,000 --> 01:38:11,000
你一定会折腾

2937
01:38:11,000 --> 01:38:14,000
你一定折腾过配色方案这个东西

2938
01:38:14,000 --> 01:38:15,000
但是如果你折腾的话

2939
01:38:15,000 --> 01:38:16,000
你会觉得我靠

2940
01:38:16,000 --> 01:38:17,000
这是一个巨大的坑

2941
01:38:17,000 --> 01:38:18,000
就是

2942
01:38:20,000 --> 01:38:21,000
Umix 的

2943
01:38:21,000 --> 01:38:23,000
这个话题我们估计这里不能展开

2944
01:38:23,000 --> 01:38:24,000
没法展开

2945
01:38:24,000 --> 01:38:28,000
我觉得我靠为什么历史的枷锁一直到

2946
01:38:28,000 --> 01:38:30,000
60 年代好像还套在我的头上

2947
01:38:30,000 --> 01:38:34,000
为什么要去去去去在意什么 16 色

2948
01:38:34,000 --> 01:38:36,000
256 色之类的东西

2949
01:38:36,000 --> 01:38:37,000
那

2950
01:38:37,000 --> 01:38:37,000
没错

2951
01:38:37,000 --> 01:38:40,000
在废时这边就没有这个问题

2952
01:38:40,000 --> 01:38:41,000
你想用什么颜色

2953
01:38:41,000 --> 01:38:41,000
用什么颜色

2954
01:38:41,000 --> 01:38:43,000
因为它不需要去做兼重型

2955
01:38:43,000 --> 01:38:43,000
对

2956
01:38:45,000 --> 01:38:45,000
对

2957
01:38:46,000 --> 01:38:46,000
当然了

2958
01:38:46,000 --> 01:38:48,000
除开我们刚刚就刚才讲的

2959
01:38:48,000 --> 01:38:51,000
以上以上所有 shel 都是一个叫做

2960
01:38:51,000 --> 01:38:53,000
Late Unix 系统的上面使用的 shel 嘛

2961
01:38:54,000 --> 01:38:55,000
但其实还有一些

2962
01:38:55,000 --> 01:38:57,000
大家比较常见的 shel

2963
01:38:57,000 --> 01:38:58,000
但更没有提

2964
01:38:59,000 --> 01:39:00,000
DOS Promote

2965
01:39:00,000 --> 01:39:01,000
其实我们刚才说过

2966
01:39:01,000 --> 01:39:03,000
但是这个东西

2967
01:39:03,000 --> 01:39:06,000
首先 DOS Promote 从来不会把自己叫做一个

2968
01:39:06,000 --> 01:39:08,000
把自己成为一个 shel

2969
01:39:08,000 --> 01:39:09,000
叫做 shel

2970
01:39:09,000 --> 01:39:10,000
它叫 Promotion

2971
01:39:10,000 --> 01:39:10,000
然后

2972
01:39:10,000 --> 01:39:12,000
然后这个东西怎么进

2973
01:39:12,000 --> 01:39:13,000
在现在的 Windows 里面

2974
01:39:13,000 --> 01:39:16,000
你打开这个 Cast 菜单搜索 CMD

2975
01:39:16,000 --> 01:39:19,000
它又会出来了一个命名行

2976
01:39:19,000 --> 01:39:20,000
它中文叫什么来着

2977
01:39:20,000 --> 01:39:22,000
这是 DOS 命名行

2978
01:39:22,000 --> 01:39:22,000
就叫命名行

2979
01:39:22,000 --> 01:39:23,000
窗口

2980
01:39:23,000 --> 01:39:24,000
就中文版的

2981
01:39:24,000 --> 01:39:25,000
它没有一个 T 字

2982
01:39:25,000 --> 01:39:25,000
应该叫

2983
01:39:26,000 --> 01:39:27,000
是吗

2984
01:39:27,000 --> 01:39:27,000
OK

2985
01:39:28,000 --> 01:39:29,000
然后你打开就会出现一个

2986
01:39:29,000 --> 01:39:30,000
黑不拉机的窗口

2987
01:39:30,000 --> 01:39:32,000
然后今天可能里面

2988
01:39:32,000 --> 01:39:33,000
最多人跑的两条命令

2989
01:39:33,000 --> 01:39:36,000
一个是叫做 IP Config

2990
01:39:37,000 --> 01:39:39,000
看自己的 IP 地址

2991
01:39:39,000 --> 01:39:41,000
然后第二就是 Ping

2992
01:39:41,000 --> 01:39:43,000
然后第三可能还是就是那个了

2993
01:39:43,000 --> 01:39:44,000
就是 Slookup

2994
01:39:44,000 --> 01:39:44,000
对

2995
01:39:44,000 --> 01:39:45,000
查 DNSU

2996
01:39:46,000 --> 01:39:47,000
这些比较常见

2997
01:39:47,000 --> 01:39:48,000
DIR

2998
01:39:48,000 --> 01:39:49,000
然后列表的一些作用

2999
01:39:51,000 --> 01:39:54,000
这个可能现在用越来越少

3000
01:39:54,000 --> 01:39:55,000
想象下还挺讽刺的

3001
01:39:55,000 --> 01:39:58,000
你在这样一个时代检测自己

3002
01:39:58,000 --> 01:40:01,000
能不能连接到另外一台

3003
01:40:01,000 --> 01:40:03,000
计算机的最常见的方法

3004
01:40:03,000 --> 01:40:04,000
居然还是

3005
01:40:05,000 --> 01:40:09,000
用一个原子于电穿档子机时代的

3006
01:40:10,000 --> 01:40:11,000
一个特征

3007
01:40:11,000 --> 01:40:14,000
一个命令行窗口来输入一台

3008
01:40:14,000 --> 01:40:18,000
输入一个 70 年代的工具的名字

3009
01:40:19,000 --> 01:40:21,000
历史的包袱还是很传统的

3010
01:40:21,000 --> 01:40:23,000
就是在过去的四五十年里面

3011
01:40:23,000 --> 01:40:24,000
居然没有一个方法

3012
01:40:24,000 --> 01:40:25,000
能够替代它

3013
01:40:27,000 --> 01:40:27,000
对

3014
01:40:28,000 --> 01:40:31,000
但也有一些像 Windows 上也有一些比较

3015
01:40:31,000 --> 01:40:33,000
晚静的新线东西了

3016
01:40:33,000 --> 01:40:34,000
这个叫做 PowerShell

3017
01:40:34,000 --> 01:40:38,000
PowerShell 应该是在 Windows 7

3018
01:40:38,000 --> 01:40:39,000
还是 WizTi 的时候才能够接

3019
01:40:39,000 --> 01:40:41,000
你觉得 NT 时代就已经开始压发了

3020
01:40:41,000 --> 01:40:42,000
但 I don't know

3021
01:40:43,000 --> 01:40:44,000
我没有用 WinT

3022
01:40:44,000 --> 01:40:47,000
我印象中只有在 WizTi 或者 Windows 7 里面见过它

3023
01:40:47,000 --> 01:40:49,000
然后 PowerShell 是一个什么东西呢

3024
01:40:49,000 --> 01:40:50,000
就是一个

3025
01:40:51,000 --> 01:40:53,000
Windows 在早期会觉得说

3026
01:40:53,000 --> 01:40:57,000
我靠这个故意难道不是一统天下的东西吗

3027
01:40:57,000 --> 01:40:58,000
我为什么要去搞命令行这一套

3028
01:40:59,000 --> 01:41:02,000
但是后来他们意识到命令行其实生命

3029
01:41:02,000 --> 01:41:03,000
命令行像野草一样

3030
01:41:03,000 --> 01:41:04,000
或者就像

3031
01:41:05,000 --> 01:41:06,000
像底层的

3032
01:41:06,000 --> 01:41:08,000
命令行还是非常有用的

3033
01:41:08,000 --> 01:41:10,000
像西军一样会永远活着

3034
01:41:10,000 --> 01:41:10,000
对吧

3035
01:41:10,000 --> 01:41:12,000
他们发现没办法

3036
01:41:12,000 --> 01:41:14,000
我们也得搞一个成学能用的

3037
01:41:14,000 --> 01:41:14,000
好

3038
01:41:15,000 --> 01:41:15,000
但是他们最好

3039
01:41:15,000 --> 01:41:16,000
对我想起来

3040
01:41:16,000 --> 01:41:19,000
这个是 WindowsNT 的服务器的延伸过来

3041
01:41:19,000 --> 01:41:21,000
因为当时好像他们提了一个口号是说

3042
01:41:21,000 --> 01:41:23,000
所有能够在

3043
01:41:23,000 --> 01:41:25,000
就所有通过图形界面能做的

3044
01:41:26,000 --> 01:41:28,000
对于 WindowsNT 的操作

3045
01:41:28,000 --> 01:41:30,000
都可以通过命令行的方式来执行

3046
01:41:30,000 --> 01:41:31,000
然后这个命令行就是 PowerShell

3047
01:41:33,000 --> 01:41:34,000
然后他们就搞出 PowerShell

3048
01:41:34,000 --> 01:41:37,000
这个东西当然跟 SH 是不见容的

3049
01:41:37,000 --> 01:41:38,000
这是个

3050
01:41:38,000 --> 01:41:39,000
好

3051
01:41:39,000 --> 01:41:39,000
好

3052
01:41:39,000 --> 01:41:40,000
无论了吗

3053
01:41:40,000 --> 01:41:40,000
怎么可能

3054
01:41:41,000 --> 01:41:43,000
但是这个东西的语法是非常

3055
01:41:45,000 --> 01:41:46,000
就学习

3056
01:41:46,000 --> 01:41:46,000
奇怪

3057
01:41:46,000 --> 01:41:48,000
学习曲线是比较陡峭

3058
01:41:48,000 --> 01:41:48,000
他

3059
01:41:49,000 --> 01:41:50,000
首先他区分大小姐

3060
01:41:51,000 --> 01:41:53,000
就你把它做成 VisualBasic 多好

3061
01:41:53,000 --> 01:41:55,000
就不区分大小姐

3062
01:41:55,000 --> 01:41:56,000
首先区分大小姐

3063
01:41:56,000 --> 01:41:59,000
其次他的很多参数和

3064
01:41:59,000 --> 01:42:04,000
做许多事情的方法都非常的啰嗦

3065
01:42:04,000 --> 01:42:04,000
他可能

3066
01:42:05,000 --> 01:42:08,000
他希望把很多事情做得很正头

3067
01:42:08,000 --> 01:42:10,000
或者说很有条理

3068
01:42:10,000 --> 01:42:12,000
但结果就是

3069
01:42:12,000 --> 01:42:13,000
如果你有

3070
01:42:15,000 --> 01:42:18,000
这个 UniXShell 的背景

3071
01:42:18,000 --> 01:42:19,000
你会觉得我说

3072
01:42:19,000 --> 01:42:21,000
这套东西是罗宋套一个境界

3073
01:42:21,000 --> 01:42:24,000
但是我不知道纯粹的为人中

3074
01:42:24,000 --> 01:42:24,000
学习会怎么想

3075
01:42:24,000 --> 01:42:26,000
可能会感觉会不一样

3076
01:42:27,000 --> 01:42:28,000
不过他这有一个好处

3077
01:42:28,000 --> 01:42:29,000
就刚刚说了

3078
01:42:29,000 --> 01:42:31,000
因为他的设计原则是说

3079
01:42:31,000 --> 01:42:33,000
所有图形界面能做

3080
01:42:33,000 --> 01:42:33,000
所以他都能做

3081
01:42:33,000 --> 01:42:35,000
所以它的就是

3082
01:42:35,000 --> 01:42:37,000
就是 feature completeness

3083
01:42:37,000 --> 01:42:39,000
就是这个功能的完整性

3084
01:42:39,000 --> 01:42:42,000
是所有目前所有设计员里面最强大的

3085
01:42:42,000 --> 01:42:42,000
就是

3086
01:42:43,000 --> 01:42:45,000
就是你可以完全拋棄图形界面

3087
01:42:45,000 --> 01:42:46,000
然后通过这个

3088
01:42:46,000 --> 01:42:49,000
这个 Shell 的方式去改变

3089
01:42:49,000 --> 01:42:51,000
一个 Windows NT 的服务器的

3090
01:42:51,000 --> 01:42:52,000
任何一个部分

3091
01:42:52,000 --> 01:42:53,000
对

3092
01:42:53,000 --> 01:42:53,000
对吧

3093
01:42:53,000 --> 01:42:54,000
因为在 UniX 里面

3094
01:42:54,000 --> 01:42:56,000
他进行一个哲学就是纯文本

3095
01:42:57,000 --> 01:42:58,000
纯文本至上

3096
01:42:58,000 --> 01:42:59,000
在 UniX 里面

3097
01:43:00,000 --> 01:43:03,000
在不同命令之间流淌的纯文本

3098
01:43:03,000 --> 01:43:03,000
流

3099
01:43:03,000 --> 01:43:05,000
可能是你唯一能够依赖的东西

3100
01:43:05,000 --> 01:43:07,000
但是在 Windows 的 PowerShell 里面

3101
01:43:08,000 --> 01:43:10,000
很多东西他已经不再是纯文本的东西了

3102
01:43:10,000 --> 01:43:11,000
就是它是

3103
01:43:11,000 --> 01:43:12,000
就基于对象的

3104
01:43:12,000 --> 01:43:13,000
它是一个 structured

3105
01:43:13,000 --> 01:43:15,000
你可以在两个 object

3106
01:43:15,000 --> 01:43:17,000
你可以在两个命令之间传递一个 object

3107
01:43:17,000 --> 01:43:18,000
就是在

3108
01:43:18,000 --> 01:43:20,000
这在 UniX 里面是不可想象的

3109
01:43:21,000 --> 01:43:21,000
也因

3110
01:43:21,000 --> 01:43:22,000
就结构

3111
01:43:22,000 --> 01:43:24,000
结构化的数据传输

3112
01:43:24,000 --> 01:43:27,000
而不是我基于文本的数据传输

3113
01:43:27,000 --> 01:43:28,000
对

3114
01:43:28,000 --> 01:43:30,000
这在 UniX 里面

3115
01:43:30,000 --> 01:43:31,000
你即便能做到

3116
01:43:31,000 --> 01:43:33,000
也是要通过一大堆什么 TR

3117
01:43:33,000 --> 01:43:34,000
什么

3118
01:43:34,000 --> 01:43:37,000
什么 Och 之类的来实现

3119
01:43:37,000 --> 01:43:38,000
就口号性很差

3120
01:43:38,000 --> 01:43:39,000
前面来讲

3121
01:43:39,000 --> 01:43:40,000
就灵活性很强

3122
01:43:40,000 --> 01:43:41,000
但口号性很差

3123
01:43:41,000 --> 01:43:44,000
判断各种 Edge case 的要麻烦

3124
01:43:44,000 --> 01:43:46,000
PowerShell 就完全没有这个问题

3125
01:43:46,000 --> 01:43:49,000
因为它可以传输一个结构化的对象

3126
01:43:49,000 --> 01:43:51,000
保证不需要经过这个序列化

3127
01:43:51,000 --> 01:43:53,000
反序列化造成的种种问题

3128
01:43:53,000 --> 01:43:56,000
可以直接去 access

3129
01:43:56,000 --> 01:43:58,000
里面的一个 property

3130
01:43:58,000 --> 01:43:59,000
而且它的因为

3131
01:43:59,000 --> 01:44:03,000
它是被自上而下设计出来的这么一个 shell

3132
01:44:03,000 --> 01:44:05,000
它的语法虽然说你可能觉得啰嗦

3133
01:44:05,000 --> 01:44:06,000
但这还有一点好说

3134
01:44:06,000 --> 01:44:07,000
就是比较规整

3135
01:44:07,000 --> 01:44:08,000
就是 regal

3136
01:44:08,000 --> 01:44:09,000
可以举一反三

3137
01:44:09,000 --> 01:44:09,000
不像

3138
01:44:09,000 --> 01:44:11,000
不像 Linus

3139
01:44:11,000 --> 01:44:12,000
像德语一样

3140
01:44:12,000 --> 01:44:12,000
好吧

3141
01:44:12,000 --> 01:44:13,000
不像英语

3142
01:44:14,000 --> 01:44:16,000
不停的去 RTFM

3143
01:44:16,000 --> 01:44:17,000
你不至于不停的去看营标

3144
01:44:17,000 --> 01:44:18,000
对吧

3145
01:44:18,000 --> 01:44:18,000
对

3146
01:44:18,000 --> 01:44:19,000
对

3147
01:44:19,000 --> 01:44:21,000
你去给它个基础各种特例

3148
01:44:21,000 --> 01:44:22,000
大概怎么一回事

3149
01:44:22,000 --> 01:44:24,000
会比较痛苦一些

3150
01:44:25,000 --> 01:44:26,000
对

3151
01:44:26,000 --> 01:44:28,000
刚才讲了那么多 shell 的

3152
01:44:28,000 --> 01:44:30,000
来龙去脉的种种好吃

3153
01:44:30,000 --> 01:44:32,000
其实我们有一个核心的要探讨的问题

3154
01:44:32,000 --> 01:44:33,000
就是为什么要用 shell

3155
01:44:33,000 --> 01:44:34,000
为什么要用命令函

3156
01:44:34,000 --> 01:44:36,000
其实这才是本期的重点

3157
01:44:36,000 --> 01:44:37,000
不过你说

3158
01:44:37,000 --> 01:44:39,000
shell 的重点估计只有 5 分钟

3159
01:44:39,000 --> 01:44:40,000
对

3160
01:44:40,000 --> 01:44:42,000
来龙去脉如果你已经了如指掌

3161
01:44:42,000 --> 01:44:44,000
方的前面的部分真的是

3162
01:44:44,000 --> 01:44:45,000
可以自己去看书

3163
01:44:45,000 --> 01:44:46,000
可能会比较快一点

3164
01:44:46,000 --> 01:44:50,000
但是我们做了这么多历史的铺垫

3165
01:44:50,000 --> 01:44:51,000
介绍了这么多

3166
01:44:51,000 --> 01:44:52,000
杂志杂达的东西之后

3167
01:44:52,000 --> 01:44:55,000
想要强调说命令行的生命力

3168
01:44:55,000 --> 01:44:57,000
在今天还是非常旺盛

3169
01:44:57,000 --> 01:45:01,000
所以为什么要用命令行

3170
01:45:02,000 --> 01:45:03,000
因为它在哪

3171
01:45:05,000 --> 01:45:05,000
不

3172
01:45:05,000 --> 01:45:07,000
它在哪背景你要用

3173
01:45:07,000 --> 01:45:08,000
它的魅力在哪里

3174
01:45:08,000 --> 01:45:09,000
为什么

3175
01:45:09,000 --> 01:45:11,000
首先我觉得命令行是非常

3176
01:45:12,000 --> 01:45:14,000
简单的一件事情

3177
01:45:14,000 --> 01:45:15,000
就是你在

3178
01:45:16,000 --> 01:45:17,000
define 简单

3179
01:45:17,000 --> 01:45:18,000
你在

3180
01:45:19,000 --> 01:45:21,000
你在使用一个

3181
01:45:21,000 --> 01:45:21,000
60 年代开始

3182
01:45:21,000 --> 01:45:23,000
就已经在使用的技术

3183
01:45:23,000 --> 01:45:24,000
但是非常的

3184
01:45:24,000 --> 01:45:26,000
一于理解的

3185
01:45:26,000 --> 01:45:28,000
它简单的一个特征

3186
01:45:28,000 --> 01:45:29,000
比如说你

3187
01:45:30,000 --> 01:45:31,000
在单一时间

3188
01:45:31,000 --> 01:45:33,000
只能在屏幕的单一地方

3189
01:45:33,000 --> 01:45:34,000
输入一个字符

3190
01:45:34,000 --> 01:45:35,000
对吧

3191
01:45:36,000 --> 01:45:36,000
不像

3192
01:45:36,000 --> 01:45:38,000
天生单人无系统

3193
01:45:38,000 --> 01:45:39,000
对

3194
01:45:39,000 --> 01:45:41,000
不像你在使用一个

3195
01:45:41,000 --> 01:45:42,000
图形界面的时候

3196
01:45:42,000 --> 01:45:43,000
你有鼠标

3197
01:45:43,000 --> 01:45:45,000
你会想要说

3198
01:45:45,000 --> 01:45:47,000
你要找一个按钮

3199
01:45:47,000 --> 01:45:48,000
但是你在目光

3200
01:45:48,000 --> 01:45:49,000
你在搜索这个按钮的时候

3201
01:45:49,000 --> 01:45:51,000
你会看到很多其他的东西

3202
01:45:51,000 --> 01:45:52,000
命令行不是

3203
01:45:52,000 --> 01:45:53,000
命令行就是空干了

3204
01:45:53,000 --> 01:45:54,000
那个东西在那摆着

3205
01:45:54,000 --> 01:45:55,000
然后你要是想不起来的话

3206
01:45:55,000 --> 01:45:56,000
你就想不起来

3207
01:45:56,000 --> 01:45:57,000
然后你要去找的话

3208
01:45:57,000 --> 01:45:58,000
你很有可能

3209
01:45:58,000 --> 01:45:59,000
你要么找

3210
01:45:59,000 --> 01:46:00,000
你可以直接找

3211
01:46:00,000 --> 01:46:01,000
你要找的东西

3212
01:46:01,000 --> 01:46:03,000
要么你就完全找不到

3213
01:46:03,000 --> 01:46:04,000
对吧

3214
01:46:05,000 --> 01:46:06,000
所以这个是缺点

3215
01:46:06,000 --> 01:46:08,000
就是它的可发性比较差

3216
01:46:08,000 --> 01:46:12,000
任何事情都是双眼见毛

3217
01:46:12,000 --> 01:46:15,000
使用图形界面的时候

3218
01:46:15,000 --> 01:46:16,000
我经常会觉得

3219
01:46:16,000 --> 01:46:18,000
Distracted

3220
01:46:18,000 --> 01:46:19,000
就是

3221
01:46:20,000 --> 01:46:22,000
因为屏幕上太多

3222
01:46:22,000 --> 01:46:23,000
那种不上 Bling 的小广告

3223
01:46:23,000 --> 01:46:25,000
屏幕上会显示着很多

3224
01:46:25,000 --> 01:46:26,000
你此时用不到

3225
01:46:26,000 --> 01:46:28,000
但是你很有可能

3226
01:46:28,000 --> 01:46:29,000
在下秒就要用了

3227
01:46:31,000 --> 01:46:32,000
但你又不可能

3228
01:46:32,000 --> 01:46:34,000
或者说目前还没有一个软件

3229
01:46:34,000 --> 01:46:39,000
你会把所有的菜单和工具条

3230
01:46:39,000 --> 01:46:42,000
全都做成隐藏式的

3231
01:46:42,000 --> 01:46:43,000
或者浮动式

3232
01:46:43,000 --> 01:46:45,000
因为如果那样的话

3233
01:46:45,000 --> 01:46:47,000
你又需要去动向鼠标

3234
01:46:47,000 --> 01:46:49,000
才他们才会弹出来

3235
01:46:49,000 --> 01:46:51,000
或者是需要去按一个什么东西

3236
01:46:51,000 --> 01:46:52,000
反正总所有这些

3237
01:46:52,000 --> 01:46:53,000
你都会让你觉得

3238
01:46:53,000 --> 01:46:55,000
命令行就是这个

3239
01:46:55,000 --> 01:46:57,000
图形界面固然方便

3240
01:46:57,000 --> 01:47:00,000
但是有时候也特别的啰嗦

3241
01:47:00,000 --> 01:47:01,000
命令行就不一样

3242
01:47:01,000 --> 01:47:02,000
你可能

3243
01:47:02,000 --> 01:47:03,000
你所要做的两件事情

3244
01:47:03,000 --> 01:47:05,000
就是敲评领导按回车

3245
01:47:07,000 --> 01:47:08,000
或者说你所要做的两件事

3246
01:47:08,000 --> 01:47:09,000
就是输入

3247
01:47:09,000 --> 01:47:09,000
输出

3248
01:47:09,000 --> 01:47:11,000
然后所有这些东西

3249
01:47:11,000 --> 01:47:13,000
都是在一个特定的地方完成的

3250
01:47:13,000 --> 01:47:15,000
然后你需要关注的点

3251
01:47:15,000 --> 01:47:17,000
也就只问你一点而已

3252
01:47:19,000 --> 01:47:20,000
再有就是我觉得

3253
01:47:20,000 --> 01:47:24,000
其实命令行下面的工具要更切中要害

3254
01:47:24,000 --> 01:47:27,000
比如说 Gate

3255
01:47:27,000 --> 01:47:29,000
因为要看 Gate 的 reversion history

3256
01:47:29,000 --> 01:47:31,000
我基本上只会有 tick

3257
01:47:31,000 --> 01:47:32,000
就我不是没有用过其他的

3258
01:47:32,000 --> 01:47:34,000
什么 sauce tray 或者是

3259
01:47:36,000 --> 01:47:37,000
Atlaskan 出了那个

3260
01:47:37,000 --> 01:47:39,000
网页版的工具叫什么

3261
01:47:39,000 --> 01:47:40,000
我说不记得

3262
01:47:40,000 --> 01:47:43,000
但是所有这些看 Gatereversion 的工具

3263
01:47:43,000 --> 01:47:45,000
感觉都没有 tick 方便

3264
01:47:46,000 --> 01:47:51,000
而打开 tick 的步骤

3265
01:47:51,000 --> 01:47:52,000
也就是输出 tick 按回车而已

3266
01:47:52,000 --> 01:47:54,000
没有什么

3267
01:47:54,000 --> 01:47:55,000
就一步只要

3268
01:47:55,000 --> 01:47:57,000
然后你离开也只有一步只要

3269
01:47:57,000 --> 01:47:58,000
你不需要去点一个工具

3270
01:47:58,000 --> 01:47:59,000
点一个图标

3271
01:47:59,000 --> 01:48:00,000
然后看它运行

3272
01:48:00,000 --> 01:48:04,000
然后选择 repository 之类的

3273
01:48:04,000 --> 01:48:04,000
对吧

3274
01:48:04,000 --> 01:48:08,000
就我觉得命令行下面很多工具都

3275
01:48:08,000 --> 01:48:08,000
比较短暂

3276
01:48:08,000 --> 01:48:09,000
然后切中要害

3277
01:48:09,000 --> 01:48:10,000
真是

3278
01:48:10,000 --> 01:48:13,000
所以其实这句话

3279
01:48:13,000 --> 01:48:14,000
你跟他讲中文

3280
01:48:14,000 --> 01:48:15,000
翻译成英文

3281
01:48:15,000 --> 01:48:18,000
其实在 unix 的 reunix 大部分是一个命令行

3282
01:48:18,000 --> 01:48:20,000
驱动的工具

3283
01:48:20,000 --> 01:48:21,000
就是那系统的对吧

3284
01:48:21,000 --> 01:48:23,000
他们追求的这么一个

3285
01:48:23,000 --> 01:48:26,000
这设计者叫做 do one thing and do it well

3286
01:48:26,000 --> 01:48:26,000
对啊

3287
01:48:26,000 --> 01:48:27,000
就是这样

3288
01:48:27,000 --> 01:48:30,000
有一个工具只做一件事

3289
01:48:30,000 --> 01:48:32,000
并且把这件事做到极致

3290
01:48:32,000 --> 01:48:34,000
然后比如说刚才讲的

3291
01:48:34,000 --> 01:48:34,000
这个 tick

3292
01:48:34,000 --> 01:48:36,000
它可以去浏览

3293
01:48:36,000 --> 01:48:39,000
这个 git 的 repository 的情况

3294
01:48:39,000 --> 01:48:42,000
还有其他各种各样的小工具

3295
01:48:42,000 --> 01:48:43,000
它可以去

3296
01:48:43,000 --> 01:48:46,000
比如说可以去列表一个目录的内容

3297
01:48:46,000 --> 01:48:48,000
或者是插在一个文件里面插着的东西

3298
01:48:48,000 --> 01:48:51,000
它都是很小的一个步骤

3299
01:48:51,000 --> 01:48:55,000
然后因为由于命令行的这个管道的功能

3300
01:48:55,000 --> 01:48:59,000
它可以使得两个程序之间配合

3301
01:48:59,000 --> 01:49:02,000
比如说上一个程序的输出

3302
01:49:02,000 --> 01:49:03,000
变成下一个程序的输入

3303
01:49:03,000 --> 01:49:07,000
然后这个链条是可以扩的无线场的

3304
01:49:07,000 --> 01:49:09,000
它们之间存在一个叫做可组合性

3305
01:49:09,000 --> 01:49:10,000
就是说

3306
01:49:10,000 --> 01:49:12,000
如果你是一个工具箱里面

3307
01:49:12,000 --> 01:49:13,000
有锤子

3308
01:49:13,000 --> 01:49:14,000
有钉子

3309
01:49:14,000 --> 01:49:15,000
还有锤子

3310
01:49:15,000 --> 01:49:17,000
有扳手这些东西之外

3311
01:49:17,000 --> 01:49:21,000
它还能组合成一些一套完整的工具列

3312
01:49:21,000 --> 01:49:24,000
使得你可以完成各种各样比较复杂

3313
01:49:24,000 --> 01:49:26,000
或者更加灵活的依据

3314
01:49:26,000 --> 01:49:27,000
对于工作场景

3315
01:49:27,000 --> 01:49:30,000
所以就是工具的完善性

3316
01:49:30,000 --> 01:49:33,000
每一个工具的小巧可靠

3317
01:49:33,000 --> 01:49:34,000
以及它们之间的相互组合性

3318
01:49:34,000 --> 01:49:39,000
我觉得这个是命令行生态最大的魅力所在

3319
01:49:39,000 --> 01:49:40,000
没错

3320
01:49:40,000 --> 01:49:43,000
而反过来在图形界面之下

3321
01:49:43,000 --> 01:49:45,000
你就没有这样的概念存在

3322
01:49:45,000 --> 01:49:47,000
就是你

3323
01:49:47,000 --> 01:49:50,000
你怎么刚才能把一个图形界面的工具的输出

3324
01:49:50,000 --> 01:49:52,000
转入到听了一个图形界面的工具的输入里面

3325
01:49:52,000 --> 01:49:53,000
你看

3326
01:49:53,000 --> 01:49:54,000
你 copy and paste 它吗

3327
01:49:54,000 --> 01:49:55,000
也有

3328
01:49:55,000 --> 01:49:57,000
对 copy and paste 或者叫做 Dragon Drop

3329
01:49:57,000 --> 01:49:59,000
或者是拖拉

3330
01:49:59,000 --> 01:49:59,000
对

3331
01:49:59,000 --> 01:50:01,000
但这些是自动化的

3332
01:50:01,000 --> 01:50:03,000
没有办法同时说

3333
01:50:03,000 --> 01:50:06,000
我永远要把自动化这些道不是一个问题

3334
01:50:06,000 --> 01:50:07,000
我觉得最主要的问题就是说

3335
01:50:07,000 --> 01:50:13,000
他们因为图形化的内容的传递之间

3336
01:50:13,000 --> 01:50:16,000
不存在一个叫做 Universal Interface

3337
01:50:16,000 --> 01:50:17,000
Universal Interface

3338
01:50:17,000 --> 01:50:19,000
就同一的接口就是这个文本 text

3339
01:50:19,000 --> 01:50:21,000
它就图形化的界面

3340
01:50:21,000 --> 01:50:25,000
它不存在这么一个通用的一个接口

3341
01:50:25,000 --> 01:50:28,000
史德并不是任意两个程序之间的输出

3342
01:50:28,000 --> 01:50:32,000
都是可以直接 Dragon Drop 来组合的

3343
01:50:32,000 --> 01:50:33,000
所以必须说

3344
01:50:34,000 --> 01:50:34,000
你开发了

3345
01:50:34,000 --> 01:50:35,000
假设好

3346
01:50:35,000 --> 01:50:37,000
你在 Photoshop 里面编辑了一个图片

3347
01:50:37,000 --> 01:50:39,000
然后你要导入到另外一个工具里面

3348
01:50:39,000 --> 01:50:41,000
去做一个进一步的处理

3349
01:50:41,000 --> 01:50:44,000
你得把它变成一个文件

3350
01:50:44,000 --> 01:50:49,000
然后再 hopefully 你的下一个环节的工具

3351
01:50:49,000 --> 01:50:51,000
能够打开上一个环节

3352
01:50:51,000 --> 01:50:52,000
这个工具生成的图片

3353
01:50:52,000 --> 01:50:54,000
然后导入到自己的里面

3354
01:50:54,000 --> 01:50:55,000
然后再做进一步的操作

3355
01:50:55,000 --> 01:50:56,000
对吧

3356
01:50:56,000 --> 01:50:56,000
对

3357
01:50:56,000 --> 01:51:01,000
所以这里就有一个

3358
01:51:02,000 --> 01:51:03,000
composability

3359
01:51:03,000 --> 01:51:06,000
合成性的问题会稍微差一些

3360
01:51:06,000 --> 01:51:08,000
但这只是一个我们理解通常状况

3361
01:51:08,000 --> 01:51:11,000
但也有很好的合成性

3362
01:51:11,000 --> 01:51:13,000
相对还不错的这么一个环境

3363
01:51:13,000 --> 01:51:15,000
比如说在现在的 iOS 上面

3364
01:51:15,000 --> 01:51:18,000
就因为它没有文件系统暴露出来

3365
01:51:18,000 --> 01:51:20,000
也没有密林行暴露出来给你用

3366
01:51:20,000 --> 01:51:23,000
所以上下游的配合

3367
01:51:23,000 --> 01:51:25,000
是你必须要考

3368
01:51:25,000 --> 01:51:26,000
作为这个系统的设计者

3369
01:51:26,000 --> 01:51:28,000
你必须要考虑的一个问题

3370
01:51:28,000 --> 01:51:30,000
那现在就说你可以分享到

3371
01:51:30,000 --> 01:51:31,000
某一个应用里面去

3372
01:51:31,000 --> 01:51:31,000
对吧

3373
01:51:31,000 --> 01:51:32,000
对吧

3374
01:51:32,000 --> 01:51:34,000
你如果那个应用它大高

3375
01:51:34,000 --> 01:51:36,000
能够接受这么一个图片格式

3376
01:51:36,000 --> 01:51:36,000
或者文件格式

3377
01:51:36,000 --> 01:51:37,000
也好

3378
01:51:37,000 --> 01:51:39,000
它是其实能够把这个那条传下去的

3379
01:51:39,000 --> 01:51:43,000
只是说由于还是那个问题

3380
01:51:43,000 --> 01:51:44,000
就不存在这个 text

3381
01:51:44,000 --> 01:51:45,000
of the universal interface

3382
01:51:45,000 --> 01:51:48,000
同时也不存在一个强有的机构

3383
01:51:48,000 --> 01:51:50,000
来要求所有的程序都必须实现

3384
01:51:51,000 --> 01:51:52,000
对

3385
01:51:52,000 --> 01:51:54,000
跟其他程序交互的接口

3386
01:51:54,000 --> 01:51:55,000
所以对

3387
01:51:55,000 --> 01:51:57,000
所以整个还是业向的来说

3388
01:51:57,000 --> 01:51:58,000
比较难一点

3389
01:51:58,000 --> 01:52:01,000
然后我觉得可能密林行对我来说

3390
01:52:01,000 --> 01:52:02,000
另外一个好

3391
01:52:02,000 --> 01:52:05,000
就是它可以表述一些比较复杂的

3392
01:52:05,000 --> 01:52:06,000
一个概念

3393
01:52:06,000 --> 01:52:06,000
比如说因为有这个

3394
01:52:06,000 --> 01:52:07,000
sales

3395
01:52:07,000 --> 01:52:10,000
对有这个效语法的存在

3396
01:52:10,000 --> 01:52:12,000
它其实是一个

3397
01:52:12,000 --> 01:52:14,000
它是一个叫做 tour in complete language

3398
01:52:14,000 --> 01:52:15,000
它是一个完整的编程语言

3399
01:52:15,000 --> 01:52:16,000
对吧

3400
01:52:16,000 --> 01:52:18,000
所以其实里面可以做一些相对来说

3401
01:52:18,000 --> 01:52:19,000
很复杂的

3402
01:52:19,000 --> 01:52:21,000
或者更加抽象的一些操作

3403
01:52:21,000 --> 01:52:22,000
而这些操作

3404
01:52:22,000 --> 01:52:23,000
通过点点鼠标的这种

3405
01:52:23,000 --> 01:52:25,000
图形化的方式是比较难办到的

3406
01:52:25,000 --> 01:52:27,000
比如说

3407
01:52:27,000 --> 01:52:29,000
很多人都遇到过这个难题

3408
01:52:29,000 --> 01:52:30,000
你一个目录里面

3409
01:52:30,000 --> 01:52:32,000
就假设考虑文件的情况下

3410
01:52:32,000 --> 01:52:35,000
你要批量改一堆文件的文件名

3411
01:52:35,000 --> 01:52:36,000
比如说前面加一个前坠

3412
01:52:36,000 --> 01:52:38,000
或者去掉一个后坠这种事情

3413
01:52:38,000 --> 01:52:40,000
你不借助一些特殊的工具

3414
01:52:40,000 --> 01:52:43,000
在这个图形界面里面

3415
01:52:43,000 --> 01:52:44,000
是很难实现这一点的

3416
01:52:44,000 --> 01:52:45,000
不可能一个一个点鼠标去改

3417
01:52:45,000 --> 01:52:46,000
对吧

3418
01:52:46,000 --> 01:52:47,000
但是在密林行下面

3419
01:52:47,000 --> 01:52:49,000
你其实因为有这个语法的

3420
01:52:49,000 --> 01:52:51,000
一个编程语言的存在

3421
01:52:51,000 --> 01:52:54,000
你其实可以对这些文本

3422
01:52:54,000 --> 01:52:56,000
做一些很高级的操作

3423
01:52:56,000 --> 01:52:58,000
然后把这些操作变成一个

3424
01:52:58,000 --> 01:52:59,000
实际可以执行的代码

3425
01:52:59,000 --> 01:53:01,000
然后这些代码可能就调有一个

3426
01:53:01,000 --> 01:53:02,000
比如说 move

3427
01:53:02,000 --> 01:53:04,000
修改文件名的这么一个命令

3428
01:53:04,000 --> 01:53:05,000
去执行它

3429
01:53:05,000 --> 01:53:08,000
所以这里面也是一个很重要的问题

3430
01:53:08,000 --> 01:53:10,000
但可能现在图形界面里面

3431
01:53:10,000 --> 01:53:11,000
最接近这个的

3432
01:53:11,000 --> 01:53:13,000
应该是就是像 OS 10 自带的一个

3433
01:53:13,000 --> 01:53:14,000
automatter

3434
01:53:14,000 --> 01:53:17,000
自动化到一个工具

3435
01:53:17,000 --> 01:53:19,000
那个图标是一个机器人

3436
01:53:19,000 --> 01:53:20,000
白色的机器人拿着一个

3437
01:53:20,000 --> 01:53:21,000
黑色的枪

3438
01:53:21,000 --> 01:53:21,000
还是什么的

3439
01:53:21,000 --> 01:53:22,000
你发现了

3440
01:53:22,000 --> 01:53:23,000
这个管子吧

3441
01:53:23,000 --> 01:53:24,000
那不是枪

3442
01:53:24,000 --> 01:53:25,000
管子

3443
01:53:25,000 --> 01:53:25,000
对

3444
01:53:25,000 --> 01:53:26,000
黑色的管子

3445
01:53:26,000 --> 01:53:26,000
对

3446
01:53:26,000 --> 01:53:27,000
Pipe

3447
01:53:27,000 --> 01:53:28,000
那它做

3448
01:53:28,000 --> 01:53:29,000
你可以做一些组合

3449
01:53:29,000 --> 01:53:30,000
但是

3450
01:53:30,000 --> 01:53:31,000
一万多人卖人

3451
01:53:31,000 --> 01:53:32,000
就没有一个人的会用

3452
01:53:32,000 --> 01:53:33,000
这个就行

3453
01:53:33,000 --> 01:53:34,000
就算高

3454
01:53:34,000 --> 01:53:36,000
高阶 OS 10 的用法

3455
01:53:36,000 --> 01:53:38,000
这用户才会去理解

3456
01:53:38,000 --> 01:53:40,000
或者使用到的这么一个场景

3457
01:53:40,000 --> 01:53:41,000
我我也会用到

3458
01:53:41,000 --> 01:53:42,000
然后它们也做了一些功能

3459
01:53:42,000 --> 01:53:43,000
其实也蛮强大的

3460
01:53:43,000 --> 01:53:44,000
比如说它可以

3461
01:53:44,000 --> 01:53:45,000
批量的从一个

3462
01:53:45,000 --> 01:53:47,000
假设

3463
01:53:47,000 --> 01:53:50,000
一个 pdf 文件里面抽取出多少页

3464
01:53:50,000 --> 01:53:51,000
然后再把这些页

3465
01:53:51,000 --> 01:53:53,000
批量的转化成一个图片文件

3466
01:53:53,000 --> 01:53:55,000
然后再单独出现在某个地方

3467
01:53:55,000 --> 01:53:56,000
对吧

3468
01:53:56,000 --> 01:53:57,000
或者是批量的

3469
01:53:57,000 --> 01:53:59,000
去修改一些文件

3470
01:53:59,000 --> 01:54:00,000
图片文件

3471
01:54:00,000 --> 01:54:01,000
比如说转换格式

3472
01:54:01,000 --> 01:54:03,000
改变文件大小

3473
01:54:03,000 --> 01:54:03,000
再压缩这种

3474
01:54:03,000 --> 01:54:05,000
它也可以有

3475
01:54:05,000 --> 01:54:08,000
但是它学习曲线还是比较陡峭的

3476
01:54:08,000 --> 01:54:09,000
没错

3477
01:54:10,000 --> 01:54:12,000
当然命令行也有它自己的缺点

3478
01:54:12,000 --> 01:54:12,000
比如刚才讲的

3479
01:54:12,000 --> 01:54:14,000
这个

3480
01:54:14,000 --> 01:54:15,000
就发现性比较差

3481
01:54:15,000 --> 01:54:17,000
就是如果你不知道

3482
01:54:17,000 --> 01:54:17,000
有一个功能

3483
01:54:17,000 --> 01:54:18,000
可以用什么方式来实现

3484
01:54:18,000 --> 01:54:19,000
你就是不知道

3485
01:54:19,000 --> 01:54:20,000
没有人会告诉你

3486
01:54:20,000 --> 01:54:21,000
不像在图形里面

3487
01:54:21,000 --> 01:54:22,000
你必须去点

3488
01:54:22,000 --> 01:54:23,000
到时候点到分式

3489
01:54:23,000 --> 01:54:24,000
对吧

3490
01:54:24,000 --> 01:54:25,000
对

3491
01:54:25,000 --> 01:54:27,000
你可以大概找得到它在哪里

3492
01:54:27,000 --> 01:54:28,000
如果命令行里面

3493
01:54:28,000 --> 01:54:28,000
你找

3494
01:54:28,000 --> 01:54:29,000
你不知道它在哪

3495
01:54:29,000 --> 01:54:30,000
你去真的是

3496
01:54:30,000 --> 01:54:31,000
你不知道它是什么

3497
01:54:31,000 --> 01:54:32,000
你真的就不知道去哪里找

3498
01:54:32,000 --> 01:54:33,000
当然

3499
01:54:33,000 --> 01:54:33,000
一个笨办法

3500
01:54:33,000 --> 01:54:35,000
就是一个一个去读这个

3501
01:54:35,000 --> 01:54:35,000
年纪

3502
01:54:35,000 --> 01:54:37,000
读手册嘛

3503
01:54:37,000 --> 01:54:38,000
但是有些看事啊

3504
01:54:38,000 --> 01:54:41,000
是有些有些点子

3505
01:54:41,000 --> 01:54:43,000
但是如果你没有人告诉你

3506
01:54:43,000 --> 01:54:43,000
的话

3507
01:54:43,000 --> 01:54:44,000
你就是不知道了

3508
01:54:44,000 --> 01:54:44,000
对吧

3509
01:54:44,000 --> 01:54:45,000
比如说

3510
01:54:45,000 --> 01:54:46,000
需要时间

3511
01:54:46,000 --> 01:54:47,000
需要去累积嘛

3512
01:54:47,000 --> 01:54:48,000
对

3513
01:54:48,000 --> 01:54:49,000
就你会需要

3514
01:54:49,000 --> 01:54:50,000
真的有一个传承

3515
01:54:50,000 --> 01:54:51,000
有一个师傅去告诉你

3516
01:54:51,000 --> 01:54:52,000
这个东西就是这样

3517
01:54:52,000 --> 01:54:53,000
你得这么用

3518
01:54:53,000 --> 01:54:54,000
不然就是不行

3519
01:54:54,000 --> 01:54:55,000
比如说

3520
01:54:55,000 --> 01:55:01,000
从到命令行到 Linux 转换的过程中

3521
01:55:01,000 --> 01:55:02,000
你可能会遇到一个问题

3522
01:55:02,000 --> 01:55:04,000
就是怎么样改名一个文件

3523
01:55:04,000 --> 01:55:05,000
对吧

3524
01:55:05,000 --> 01:55:07,000
你会发现 Linux 没有 rename 这个用的

3525
01:55:07,000 --> 01:55:07,000
你就会说

3526
01:55:07,000 --> 01:55:10,000
我说我靠怎么会改文件这种东西

3527
01:55:10,000 --> 01:55:11,000
做不到的

3528
01:55:11,000 --> 01:55:12,000
这不可能吧

3529
01:55:12,000 --> 01:55:13,000
但是直到有人告诉你说

3530
01:55:13,000 --> 01:55:15,000
你要 mov

3531
01:55:15,000 --> 01:55:16,000
就是

3532
01:55:16,000 --> 01:55:17,000
你要移动一个文件

3533
01:55:17,000 --> 01:55:22,000
把一个东西从 A 移动到 B 的工具

3534
01:55:22,000 --> 01:55:23,000
也可以完成

3535
01:55:23,000 --> 01:55:25,000
把一个东西从 A 命名为 B

3536
01:55:25,000 --> 01:55:28,000
这是需要有人告诉你这件事情

3537
01:55:28,000 --> 01:55:30,000
对吧

3538
01:55:30,000 --> 01:55:31,000
类似的例子还有什么

3539
01:55:31,000 --> 01:55:33,000
比如说你在 Dota 7

3540
01:55:33,000 --> 01:55:34,000
你我觉得什么

3541
01:55:34,000 --> 01:55:35,000
copy

3542
01:55:35,000 --> 01:55:36,000
sing 点

3543
01:55:36,000 --> 01:55:38,000
copy

3544
01:55:38,000 --> 01:55:39,000
sing 点

3545
01:55:39,000 --> 01:55:40,000
txt

3546
01:55:40,000 --> 01:55:41,000
空格

3547
01:55:41,000 --> 01:55:41,000
sing 点

3548
01:55:41,000 --> 01:55:42,000
exe

3549
01:55:42,000 --> 01:55:48,000
你可以批量的把所有的纯文本文件转换为 exe

3550
01:55:48,000 --> 01:55:49,000
但在 Linux 下面这是做不到的

3551
01:55:49,000 --> 01:55:51,000
你会说我靠为什么

3552
01:55:51,000 --> 01:56:00,000
就得有人肯解释 Linux 下面的所谓 shelx tension

3553
01:56:00,000 --> 01:56:03,000
这个是叫什么来着

3554
01:56:03,000 --> 01:56:03,000
interpolation

3555
01:56:03,000 --> 01:56:04,000
扩展

3556
01:56:04,000 --> 01:56:04,000
对

3557
01:56:04,000 --> 01:56:07,000
命令行扩展跟 Dota 7 的机制是不一样的

3558
01:56:07,000 --> 01:56:08,000
对吧

3559
01:56:08,000 --> 01:56:10,000
这很多东西都要自己弄明白

3560
01:56:13,000 --> 01:56:16,000
所以现在其实有网络也好

3561
01:56:16,000 --> 01:56:20,000
因为如果之前我们当时用命令行的时候

3562
01:56:20,000 --> 01:56:22,000
只能看杂志上面一个小 tips 的区域

3563
01:56:22,000 --> 01:56:23,000
对吧

3564
01:56:23,000 --> 01:56:24,000
就非常有限的

3565
01:56:24,000 --> 01:56:25,000
也明白吧

3566
01:56:25,000 --> 01:56:25,000
搜索的

3567
01:56:25,000 --> 01:56:26,000
对

3568
01:56:26,000 --> 01:56:27,000
现在就是有很多这种网站

3569
01:56:27,000 --> 01:56:32,000
它会有那种叫做小摘药的形式去告诉你

3570
01:56:32,000 --> 01:56:33,000
说有这么一个功能

3571
01:56:33,000 --> 01:56:36,000
你可以用哪几个命令组合可以实现这么一个功能

3572
01:56:36,000 --> 01:56:37,000
比如说像什么

3573
01:56:37,000 --> 01:56:40,000
这种叫 com on life 的这么一个网站

3574
01:56:40,000 --> 01:56:41,000
可以做类似的事

3575
01:56:41,000 --> 01:56:42,000
我觉得那个时候学 Linux

3576
01:56:42,000 --> 01:56:44,000
真的是用生命在学

3577
01:56:44,000 --> 01:56:44,000
好

3578
01:56:44,000 --> 01:56:44,000
可怕

3579
01:56:44,000 --> 01:56:50,000
你要把自己的心爱的游戏分区搞丢的危险

3580
01:56:50,000 --> 01:56:51,000
装一个 Linux

3581
01:56:51,000 --> 01:56:53,000
然后要买

3582
01:56:53,000 --> 01:56:57,000
要从书店里面买 Linux 的教程

3583
01:56:57,000 --> 01:56:59,000
然后要看着杂志上面的文章

3584
01:56:59,000 --> 01:57:00,000
一眼一眼学

3585
01:57:00,000 --> 01:57:02,000
不像现在我说开个虚拟机

3586
01:57:02,000 --> 01:57:03,000
然后另外开个浏览器

3587
01:57:03,000 --> 01:57:06,000
简直是非一样的一日前里

3588
01:57:06,000 --> 01:57:09,000
可以学会我们那个时候需要一个月才能学会的东西

3589
01:57:11,000 --> 01:57:11,000
对

3590
01:57:14,000 --> 01:57:16,000
这个节目的最后我们介绍一些

3591
01:57:16,000 --> 01:57:19,000
我们觉得还挺有用的这种明天要小工具吧

3592
01:57:19,000 --> 01:57:22,000
就可能很多人有些可能知道

3593
01:57:22,000 --> 01:57:24,000
但不一定每个你都知道

3594
01:57:24,000 --> 01:57:24,000
对吧

3595
01:57:24,000 --> 01:57:26,000
所以讲一下大概有什么好玩的

3596
01:57:26,000 --> 01:57:27,000
行

3597
01:57:27,000 --> 01:57:28,000
先说

3598
01:57:28,000 --> 01:57:30,000
就是我们之前提到过

3599
01:57:30,000 --> 01:57:32,000
在讲包管理系的时候

3600
01:57:32,000 --> 01:57:34,000
提到过在 OS 3 上有一个的 Homebook 的东西

3601
01:57:34,000 --> 01:57:36,000
可以帮你解决这个

3602
01:57:36,000 --> 01:57:39,000
怎么去新增这种迷你航工具的一个困惑

3603
01:57:39,000 --> 01:57:40,000
这个是要闭装的

3604
01:57:40,000 --> 01:57:41,000
Meta Common Line Tool

3605
01:57:41,000 --> 01:57:43,000
对

3606
01:57:43,000 --> 01:57:44,000
但这个不属于迷你航工具本身

3607
01:57:44,000 --> 01:57:46,000
我们就先略过

3608
01:57:46,000 --> 01:57:47,000
下面开始

3609
01:57:47,000 --> 01:57:48,000
我们一个人介绍一个

3610
01:57:48,000 --> 01:57:48,000
好

3611
01:57:48,000 --> 01:57:49,000
我先来一个

3612
01:57:50,000 --> 01:57:51,000
LLcat

3613
01:57:52,000 --> 01:57:53,000
就是干嘛的

3614
01:57:53,000 --> 01:57:55,000
UniX 下面有 cat

3615
01:57:55,000 --> 01:57:56,000
对吧

3616
01:57:56,000 --> 01:57:57,000
就是没有 dog

3617
01:57:57,000 --> 01:57:58,000
但是 cat

3618
01:57:58,000 --> 01:58:00,000
cat 是

3619
01:58:00,000 --> 01:58:00,000
猫是干嘛用的

3620
01:58:00,000 --> 01:58:02,000
猫是输出用的

3621
01:58:02,000 --> 01:58:05,000
其实挺猫的作用是说

3622
01:58:05,000 --> 01:58:08,000
它从它的

3623
01:58:08,000 --> 01:58:10,000
把它的输入打到输出里

3624
01:58:10,000 --> 01:58:14,000
你可以把一个文件的内容输出到 standard out

3625
01:58:14,000 --> 01:58:15,000
上面

3626
01:58:15,000 --> 01:58:17,000
然后那么 LLcat 是什么的

3627
01:58:17,000 --> 01:58:21,000
是一个可以把你的输出

3628
01:58:21,000 --> 01:58:26,000
用彩虹的颜色输出到

3629
01:58:26,000 --> 01:58:28,000
把你的输入用彩虹的颜色

3630
01:58:28,000 --> 01:58:30,000
输出到 standard out 上

3631
01:58:30,000 --> 01:58:32,000
就是在一个支持多彩的

3632
01:58:32,000 --> 01:58:33,000
这个 shile

3633
01:58:33,000 --> 01:58:35,000
shile

3634
01:58:35,000 --> 01:58:36,000
email 类册里面

3635
01:58:36,000 --> 01:58:41,000
它可以把自服按照固定的色谱

3636
01:58:41,000 --> 01:58:44,000
用这个红尘黄域青年纸

3637
01:58:44,000 --> 01:58:46,000
这所有颜色输出出来

3638
01:58:46,000 --> 01:58:49,000
也就是说你可能不用

3639
01:58:49,000 --> 01:58:50,000
你用普通的 cat 的话

3640
01:58:50,000 --> 01:58:52,000
你只会输一个单色的东西

3641
01:58:52,000 --> 01:58:54,000
但用 LLcat 的话

3642
01:58:54,000 --> 01:58:58,000
你的整个输出都会显得多彩

3643
01:58:59,000 --> 01:59:02,000
所以这是一个有趣而无用的

3644
01:59:02,000 --> 01:59:03,000
迷你行工具

3645
01:59:03,000 --> 01:59:03,000
对吧

3646
01:59:03,000 --> 01:59:04,000
类似我还有很多

3647
01:59:04,000 --> 01:59:07,000
比如说 sl

3648
01:59:07,000 --> 01:59:10,000
如果你把 ls 打成 sl 的话

3649
01:59:10,000 --> 01:59:12,000
它会出点火车

3650
01:59:12,000 --> 01:59:13,000
还是什么东西

3651
01:59:13,000 --> 01:59:14,000
就是说你有打错了

3652
01:59:14,000 --> 01:59:16,000
这种感觉

3653
01:59:16,000 --> 01:59:18,000
对

3654
01:59:18,000 --> 01:59:21,000
刚才也提到个叫做 tik 的工具

3655
01:59:21,000 --> 01:59:22,000
git 大家都知道

3656
01:59:22,000 --> 01:59:24,000
是一个终于做原代码管理的

3657
01:59:24,000 --> 01:59:24,000
一个迷你行工具

3658
01:59:24,000 --> 01:59:27,000
然后 tik 就是把 git 反过来写

3659
01:59:27,000 --> 01:59:31,000
的话它是一个 gincurse 的

3660
01:59:31,000 --> 01:59:35,000
显示 revision history 的图形界面

3661
01:59:35,000 --> 01:59:35,000
对

3662
01:59:35,000 --> 01:59:35,000
非常有用

3663
01:59:35,000 --> 01:59:36,000
就不止 revision history

3664
01:59:36,000 --> 01:59:38,000
它可以显示很多东西

3665
01:59:38,000 --> 01:59:41,000
其实在里面还可以做一些比较常用的操作

3666
01:59:41,000 --> 01:59:43,000
比如说 git 的大部分功能

3667
01:59:43,000 --> 01:59:45,000
都可以在 tik 里面实现

3668
01:59:45,000 --> 01:59:46,000
对

3669
01:59:46,000 --> 01:59:46,000
对

3670
01:59:46,000 --> 01:59:48,000
所以这是一个挺好用的工具

3671
01:59:48,000 --> 01:59:49,000
因为很多人说

3672
01:59:49,000 --> 01:59:52,000
可能从 svn 签过来

3673
01:59:52,000 --> 01:59:53,000
特别是 windows 7 程序

3674
01:59:53,000 --> 01:59:56,000
他可能觉得 git 的没有很好的

3675
01:59:56,000 --> 01:59:58,000
这个图形化工具

3676
01:59:58,000 --> 01:59:58,000
对

3677
01:59:58,000 --> 01:59:58,000
怎么办

3678
01:59:58,000 --> 01:59:59,000
其实是有的

3679
01:59:59,000 --> 02:00:01,000
像那么 sos track 刚才提到过了

3680
02:00:01,000 --> 02:00:03,000
但是像我们这种死忠的粉

3681
02:00:03,000 --> 02:00:05,000
还是习惯于说用这种基于

3682
02:00:05,000 --> 02:00:06,000
迷你行的一个

3683
02:00:06,000 --> 02:00:08,000
基于这个文本窗口的那种工具

3684
02:00:08,000 --> 02:00:10,000
然后 tik 是个很好的选择

3685
02:00:10,000 --> 02:00:11,000
我觉得 git 也是一个奇葩

3686
02:00:11,000 --> 02:00:13,000
到没有办法做出一个好用的

3687
02:00:13,000 --> 02:00:15,000
迷你行图形前面的工具

3688
02:00:17,000 --> 02:00:19,000
很多人还是用的挺好的

3689
02:00:19,000 --> 02:00:21,000
只是说很多高级功能

3690
02:00:21,000 --> 02:00:22,000
就好像说

3691
02:00:22,000 --> 02:00:24,000
我刚刚就好像我说的一样

3692
02:00:24,000 --> 02:00:25,000
刚才那个为什么选择

3693
02:00:25,000 --> 02:00:27,000
迷你行的原因是一样的

3694
02:00:27,000 --> 02:00:28,000
记得就很多高级功能

3695
02:00:28,000 --> 02:00:30,000
只可能在通过文本

3696
02:00:30,000 --> 02:00:32,000
就是迷你行的方式表述出来

3697
02:00:32,000 --> 02:00:33,000
因为用图形方式表述

3698
02:00:33,000 --> 02:00:34,000
实在是太负极了

3699
02:00:34,000 --> 02:00:34,000
对

3700
02:00:34,000 --> 02:00:36,000
我觉得用图形界面表示出来

3701
02:00:36,000 --> 02:00:38,000
就是操作 git 数的话

3702
02:00:38,000 --> 02:00:41,000
我其实能够想到最符合直觉的一种方法

3703
02:00:41,000 --> 02:00:43,000
就是你可以直接去拖拽

3704
02:00:43,000 --> 02:00:46,000
那个 branch 里面的节点

3705
02:00:46,000 --> 02:00:49,000
然后让它在你想要去的那个地方

3706
02:00:49,000 --> 02:00:50,000
停留下来

3707
02:00:50,000 --> 02:00:50,000
然后松手

3708
02:00:50,000 --> 02:00:52,000
然后这个图形界面的工具

3709
02:00:52,000 --> 02:00:55,000
就自动帮你完成对应的 git 操作

3710
02:00:55,000 --> 02:00:58,000
这个才是最符合直觉化的一个实现

3711
02:00:58,000 --> 02:01:00,000
现有的只不过

3712
02:01:00,000 --> 02:01:01,000
现有的大部分的图形工具

3713
02:01:01,000 --> 02:01:02,000
只不过是把那些

3714
02:01:02,000 --> 02:01:03,000
迷你行的命令

3715
02:01:03,000 --> 02:01:05,000
封装成一个圆按钮而已

3716
02:01:05,000 --> 02:01:06,000
你还是没有办法直接

3717
02:01:06,000 --> 02:01:09,000
看到执行这些命令之后

3718
02:01:09,000 --> 02:01:10,000
那个 sauce 退后变成什么样子

3719
02:01:10,000 --> 02:01:12,000
对吧

3720
02:01:12,000 --> 02:01:14,000
还有就是那个就是可组合性

3721
02:01:14,000 --> 02:01:17,000
和表达到这个抽象层级的问题

3722
02:01:17,000 --> 02:01:17,000
对

3723
02:01:17,000 --> 02:01:20,000
始终那种可实化的抽象层级

3724
02:01:20,000 --> 02:01:22,000
是要相比语言描述的

3725
02:01:22,000 --> 02:01:25,000
还是要低很多的

3726
02:01:25,000 --> 02:01:27,000
所以第一吗

3727
02:01:27,000 --> 02:01:28,000
第一个 order

3728
02:01:28,000 --> 02:01:30,000
好

3729
02:01:30,000 --> 02:01:33,000
下一个你有什么介绍的

3730
02:01:33,000 --> 02:01:36,000
我可以介绍 call say

3731
02:01:36,000 --> 02:01:38,000
又是一个有权

3732
02:01:38,000 --> 02:01:39,000
要什么又

3733
02:01:39,000 --> 02:01:43,000
这 call say 有个有一个变种叫 call think

3734
02:01:43,000 --> 02:01:46,000
你 brew install call say 之后

3735
02:01:46,000 --> 02:01:47,000
你会得到两个命令

3736
02:01:47,000 --> 02:01:48,000
一个叫 call say

3737
02:01:48,000 --> 02:01:49,000
一个叫 call think

3738
02:01:49,000 --> 02:01:50,000
然后结果就是

3739
02:01:50,000 --> 02:01:52,000
它会把你的输出

3740
02:01:52,000 --> 02:01:54,000
包裹到一个漫画的那种

3741
02:01:54,000 --> 02:01:56,000
想或者是说的那种

3742
02:01:56,000 --> 02:01:57,000
气泡坊里面

3743
02:01:57,000 --> 02:01:57,000
对

3744
02:01:57,000 --> 02:01:59,000
然后旁边下面画一头牛

3745
02:01:59,000 --> 02:02:01,000
这就是用途

3746
02:02:01,000 --> 02:02:02,000
就是牛说

3747
02:02:02,000 --> 02:02:03,000
对

3748
02:02:03,000 --> 02:02:05,000
然后另外有一个工具叫做 fortune

3749
02:02:05,000 --> 02:02:07,000
就是跟你说一句

3750
02:02:07,000 --> 02:02:11,000
其实就有那种中餐馆里面的那个小 cookie 里面

3751
02:02:11,000 --> 02:02:11,000
fortune cookie

3752
02:02:11,000 --> 02:02:13,000
一个消尺条大概是那个意思

3753
02:02:13,000 --> 02:02:16,000
然后它会跟你说很多名人名言

3754
02:02:16,000 --> 02:02:19,000
然后你把 fortune 重定向到 call say

3755
02:02:19,000 --> 02:02:21,000
它就会把你说出口

3756
02:02:21,000 --> 02:02:23,000
fortune 重定向到 call say

3757
02:02:23,000 --> 02:02:27,000
它就会把名人名言包裹到一个包包里面

3758
02:02:27,000 --> 02:02:28,000
然后让你说出

3759
02:02:29,000 --> 02:02:32,000
就是那个中餐馆的小 cookie 这个事情

3760
02:02:32,000 --> 02:02:34,000
应该是只有在国外的人才会知道这个

3761
02:02:34,000 --> 02:02:34,000
对

3762
02:02:34,000 --> 02:02:34,000
对

3763
02:02:34,000 --> 02:02:36,000
就是在国外的中餐馆

3764
02:02:36,000 --> 02:02:37,000
sumhouse only

3765
02:02:37,000 --> 02:02:41,000
会提供一种非常特别的

3766
02:02:41,000 --> 02:02:42,000
在你结账的时候

3767
02:02:42,000 --> 02:02:43,000
会给你一个小 cookie

3768
02:02:43,000 --> 02:02:46,000
然后这个 cookie 其实是非常难吃的一种饼干

3769
02:02:46,000 --> 02:02:47,000
只不过这个 cookie

3770
02:02:47,000 --> 02:02:48,000
我觉得还挺好吃的

3771
02:02:48,000 --> 02:02:49,000
what

3772
02:02:49,000 --> 02:02:52,000
我头一次遇到喜欢吃 fortune cookie 的人

3773
02:02:52,000 --> 02:02:55,000
最脆的挺好吃的

3774
02:02:55,000 --> 02:02:56,000
然后这个 fortune cookie

3775
02:02:56,000 --> 02:02:57,000
它是空心的

3776
02:02:57,000 --> 02:02:58,000
对吧

3777
02:02:58,000 --> 02:02:58,000
空心

3778
02:02:58,000 --> 02:03:01,000
然后你把它打开里面有一个消尺条

3779
02:03:01,000 --> 02:03:02,000
小指条里面会

3780
02:03:02,000 --> 02:03:03,000
对

3781
02:03:03,000 --> 02:03:05,000
有时候是中英文的

3782
02:03:05,000 --> 02:03:06,000
这质的德国

3783
02:03:06,000 --> 02:03:07,000
绝大部分都是中英文的

3784
02:03:07,000 --> 02:03:08,000
英德文的

3785
02:03:08,000 --> 02:03:09,000
一边是英文

3786
02:03:09,000 --> 02:03:10,000
一边是德文

3787
02:03:10,000 --> 02:03:11,000
对

3788
02:03:11,000 --> 02:03:12,000
在北美就是中英文的

3789
02:03:12,000 --> 02:03:13,000
对

3790
02:03:13,000 --> 02:03:15,000
会给你一句小格言

3791
02:03:15,000 --> 02:03:17,000
比如什么举例子

3792
02:03:17,000 --> 02:03:19,000
一时想不起来什么

3793
02:03:19,000 --> 02:03:21,000
我一时想不起来

3794
02:03:21,000 --> 02:03:26,000
反正就是有一种真言

3795
02:03:26,000 --> 02:03:28,000
不是名言是真言吗

3796
02:03:28,000 --> 02:03:29,000
那个叫什么

3797
02:03:29,000 --> 02:03:31,000
就是它会讲一个看似很有道理的一句话

3798
02:03:31,000 --> 02:03:33,000
但是真是没有什么反应

3799
02:03:33,000 --> 02:03:35,000
会讲于有趣而无用的话

3800
02:03:35,000 --> 02:03:35,000
对

3801
02:03:35,000 --> 02:03:37,000
差不多这个意思

3802
02:03:37,000 --> 02:03:38,000
对

3803
02:03:38,000 --> 02:03:41,000
fortune 这个软件差不多就干类似的事情

3804
02:03:41,000 --> 02:03:42,000
没什么

3805
02:03:42,000 --> 02:03:47,000
下面一个挺有用的一个秘密行工具

3806
02:03:47,000 --> 02:03:48,000
叫 MTR

3807
02:03:48,000 --> 02:03:50,000
这个是干嘛

3808
02:03:50,000 --> 02:03:51,000
这可能做网络

3809
02:03:51,000 --> 02:03:54,000
或者是你对网络状况比

3810
02:03:54,000 --> 02:03:56,000
要有研究

3811
02:03:56,000 --> 02:03:58,000
就是后来要进行网络

3812
02:03:58,000 --> 02:03:59,000
有研究的人和经济用脑

3813
02:03:59,000 --> 02:04:00,000
有两个工具

3814
02:04:00,000 --> 02:04:01,000
一个叫 tristroot

3815
02:04:01,000 --> 02:04:03,000
一个叫 pin

3816
02:04:03,000 --> 02:04:04,000
pin 是测延迟

3817
02:04:04,000 --> 02:04:07,000
然后 tristroot 是测你跳转的

3818
02:04:07,000 --> 02:04:10,000
你从你的电脑到另外一个服务器之间

3819
02:04:10,000 --> 02:04:13,000
要经过哪些这种中间的路由

3820
02:04:13,000 --> 02:04:15,000
或者是网关

3821
02:04:15,000 --> 02:04:16,000
对吧

3822
02:04:16,000 --> 02:04:16,000
对

3823
02:04:16,000 --> 02:04:20,000
然后 MTR 是把这两个工具的功能合而为一

3824
02:04:20,000 --> 02:04:23,000
并且一种更加友善和有用的方式

3825
02:04:23,000 --> 02:04:29,000
汇报出来的一个这种网络整段工具集合

3826
02:04:29,000 --> 02:04:29,000
对

3827
02:04:29,000 --> 02:04:29,000
好

3828
02:04:29,000 --> 02:04:32,000
那么你叫 matstristroot

3829
02:04:32,000 --> 02:04:33,000
对

3830
02:04:33,000 --> 02:04:34,000
matstristroot

3831
02:04:34,000 --> 02:04:35,000
对

3832
02:04:35,000 --> 02:04:36,000
那个软 mats 作者

3833
02:04:36,000 --> 02:04:37,000
对

3834
02:04:37,000 --> 02:04:40,000
那你接下一个叫做 pray

3835
02:04:40,000 --> 02:04:41,000
你介绍一下是什么

3836
02:04:43,000 --> 02:04:45,000
pray 和 ipyzen 我想放在一起介绍

3837
02:04:46,000 --> 02:04:47,000
ok

3838
02:04:47,000 --> 02:04:49,000
pizen 用户一定要使用 ipyzen 这种

3839
02:04:49,000 --> 02:04:54,000
而不是使用 pizen 默认给你装的那个老干牙的 idol

3840
02:04:54,000 --> 02:04:56,000
ipyzen 是一个

3841
02:04:56,000 --> 02:04:59,000
既可以在面临行下面跑

3842
02:04:59,000 --> 02:05:02,000
也可以有一个专属的网页版本

3843
02:05:02,000 --> 02:05:03,000
或者乃至于一个

3844
02:05:03,000 --> 02:05:08,000
基于 qt 的图形界面的一个全功能 pizen 的笔记本

3845
02:05:08,000 --> 02:05:12,000
你可以在里面运行 pizen 的程序

3846
02:05:12,000 --> 02:05:14,000
你可以在里面尝试 pizen 这种新功能

3847
02:05:15,000 --> 02:05:17,000
而且你的每一次输入或每一次输出

3848
02:05:17,000 --> 02:05:20,000
都会被记在 in 和 out 两个 air 里面

3849
02:05:20,000 --> 02:05:22,000
你可以随时去查询

3850
02:05:22,000 --> 02:05:24,000
然后它还内置了很多其他的功能

3851
02:05:24,000 --> 02:05:26,000
比如什么语法高量

3852
02:05:28,000 --> 02:05:30,000
那个 tristroot

3853
02:05:30,000 --> 02:05:31,000
costec

3854
02:05:32,000 --> 02:05:35,000
the backtrack backtrack backtrist

3855
02:05:35,000 --> 02:05:36,000
backtrist

3856
02:05:36,000 --> 02:05:41,000
然后 pray 就是 rubyipyzen

3857
02:05:42,000 --> 02:05:43,000
OK

3858
02:05:43,000 --> 02:05:44,000
非常有用

3859
02:05:44,000 --> 02:05:46,000
刚才讲到 ipyzen

3860
02:05:46,000 --> 02:05:47,000
我还推荐一个叫做 bpyzen

3861
02:05:47,000 --> 02:05:49,000
就是 ab 的 b

3862
02:05:49,000 --> 02:05:49,000
bpyzen

3863
02:05:49,000 --> 02:05:50,000
ok

3864
02:05:50,000 --> 02:05:52,000
ipyzen 它也是一个

3865
02:05:52,000 --> 02:05:54,000
就是 pizen 的一个叫做 replom

3866
02:05:54,000 --> 02:05:57,000
read evaluate print loop

3867
02:05:57,000 --> 02:05:58,000
这么一个工具

3868
02:05:58,000 --> 02:06:00,000
bpyzen 是一个替代的 replom

3869
02:06:00,000 --> 02:06:02,000
然后它的好处是什么呢

3870
02:06:02,000 --> 02:06:04,000
它首先它有语法高量

3871
02:06:04,000 --> 02:06:05,000
就对 pizen 语法

3872
02:06:05,000 --> 02:06:08,000
它是你敲的这个每一行它是语法高量的

3873
02:06:08,000 --> 02:06:10,000
它的多行模式也比较支持

3874
02:06:10,000 --> 02:06:11,000
比 ipyzen 要好

3875
02:06:11,000 --> 02:06:12,000
然后它觉得最有用的功能

3876
02:06:12,000 --> 02:06:15,000
它会对你打的这个标准库里面的函数

3877
02:06:15,000 --> 02:06:17,000
它是有这个

3878
02:06:17,000 --> 02:06:19,000
就是那个叫什么类似于一个 id

3879
02:06:19,000 --> 02:06:21,000
它是有提示那个函数的一个签名

3880
02:06:21,000 --> 02:06:23,000
以及每个参数是干什么用的

3881
02:06:23,000 --> 02:06:24,000
ok

3882
02:06:24,000 --> 02:06:25,000
就非常非常好用

3883
02:06:25,000 --> 02:06:28,000
而且它的那个没有 ipyzen 那么功能丰富

3884
02:06:28,000 --> 02:06:32,000
但是一个更加轻量级的这么一个 replom

3885
02:06:32,000 --> 02:06:33,000
对

3886
02:06:33,000 --> 02:06:34,000
ipyzen 我相信

3887
02:06:34,000 --> 02:06:36,000
如果你又是要做一些什么科学计算

3888
02:06:36,000 --> 02:06:40,000
或者是生物信息学之类的

3889
02:06:40,000 --> 02:06:41,000
做科研

3890
02:06:41,000 --> 02:06:44,000
基本上是对人手必装

3891
02:06:44,000 --> 02:06:44,000
应该

3892
02:06:44,000 --> 02:06:45,000
对

3893
02:06:45,000 --> 02:06:49,000
我在介绍一个叫做 iperf 3

3894
02:06:49,000 --> 02:06:52,000
这也是一个做网络性能的测试的工具

3895
02:06:52,000 --> 02:06:54,000
就是说假设你想测

3896
02:06:54,000 --> 02:06:55,000
比如我们家刚装修房子

3897
02:06:55,000 --> 02:06:58,000
你想测这个装修师父可以装到网线

3898
02:06:58,000 --> 02:07:02,000
师父达到牵照的一个一个一个速度

3899
02:07:02,000 --> 02:07:03,000
对吧

3900
02:07:03,000 --> 02:07:03,000
你怎么办

3901
02:07:03,000 --> 02:07:05,000
你找两台电脑都插上网线

3902
02:07:05,000 --> 02:07:06,000
对吧

3903
02:07:06,000 --> 02:07:07,000
然后再一头运行

3904
02:07:07,000 --> 02:07:09,000
一个 ipyzen 3 的一个 server

3905
02:07:09,000 --> 02:07:10,000
然后再另外一头运行

3906
02:07:10,000 --> 02:07:12,000
ipyzen 3 的一个客户端

3907
02:07:12,000 --> 02:07:13,000
一个 client

3908
02:07:13,000 --> 02:07:15,000
然后把这 client 指向那个 server

3909
02:07:15,000 --> 02:07:19,000
它就会在这两端发起一个连接

3910
02:07:19,000 --> 02:07:22,000
然后测试这个连接能最能最大

3911
02:07:22,000 --> 02:07:24,000
以多快的速度传输

3912
02:07:24,000 --> 02:07:25,000
对吧

3913
02:07:25,000 --> 02:07:25,000
ok

3914
02:07:25,000 --> 02:07:26,000
就是它是一个测试

3915
02:07:26,000 --> 02:07:29,000
这个网络连通速度的这么一个小工具

3916
02:07:29,000 --> 02:07:30,000
这三是一个最新的版本

3917
02:07:30,000 --> 02:07:32,000
它有一个 ipyperf

3918
02:07:32,000 --> 02:07:33,000
没有数字

3919
02:07:33,000 --> 02:07:34,000
就是默认是二这个版本

3920
02:07:34,000 --> 02:07:35,000
相对老一点

3921
02:07:35,000 --> 02:07:37,000
就看你的发行版的区别

3922
02:07:38,000 --> 02:07:38,000
ok

3923
02:07:38,000 --> 02:07:39,000
那接下来

3924
02:07:39,000 --> 02:07:41,000
我在介绍一个 teamux

3925
02:07:41,000 --> 02:07:42,000
就是刚才已经提到了

3926
02:07:42,000 --> 02:07:44,000
是一个中端复用器

3927
02:07:44,000 --> 02:07:46,000
就是你可能连接到有远程的计算机上

3928
02:07:46,000 --> 02:07:47,000
或者说你在本地

3929
02:07:47,000 --> 02:07:50,000
然后你开了一个 terminal 窗口

3930
02:07:50,000 --> 02:07:51,000
你会觉得说不过靠

3931
02:07:51,000 --> 02:07:52,000
我还想做另外一件事情

3932
02:07:52,000 --> 02:07:53,000
怎么办

3933
02:07:53,000 --> 02:07:55,000
一个选择是再开一窗口

3934
02:07:55,000 --> 02:07:56,000
或者再建立一个连接

3935
02:07:56,000 --> 02:07:59,000
而比较好的一个方法

3936
02:07:59,000 --> 02:08:03,000
就是复用你当前已经建立的连接

3937
02:08:03,000 --> 02:08:05,000
可以装 teamux 这个东西

3938
02:08:05,000 --> 02:08:08,000
它可以从我一些组合件

3939
02:08:08,000 --> 02:08:11,000
让你在一个 terminal 的窗口里面

3940
02:08:11,000 --> 02:08:14,000
开很多个其他 terminal 的窗口

3941
02:08:14,000 --> 02:08:15,000
可能描述比较抽象

3942
02:08:15,000 --> 02:08:18,000
但如果你去 teamux 网站上看一下

3943
02:08:18,000 --> 02:08:19,000
你会很快明白

3944
02:08:19,000 --> 02:08:20,000
这什么意思

3945
02:08:20,000 --> 02:08:21,000
其实这个有个最大的好处

3946
02:08:21,000 --> 02:08:22,000
你知道是什么吗

3947
02:08:22,000 --> 02:08:26,000
就是它可以保持你的一个登录状态

3948
02:08:26,000 --> 02:08:28,000
不就是你保持程序的一种状态

3949
02:08:28,000 --> 02:08:28,000
对

3950
02:08:28,000 --> 02:08:30,000
你可以在异彩机器上用 teamux 来

3951
02:08:30,000 --> 02:08:31,000
执行一个命令

3952
02:08:31,000 --> 02:08:34,000
然后 detach from theteamux

3953
02:08:34,000 --> 02:08:38,000
然后直接关掉那个和那个机器的连接

3954
02:08:38,000 --> 02:08:38,000
对

3955
02:08:38,000 --> 02:08:42,000
然后但是这个时候在你刚刚起到那个进程

3956
02:08:42,000 --> 02:08:43,000
它是不会

3957
02:08:43,000 --> 02:08:44,000
不会退出的

3958
02:08:44,000 --> 02:08:45,000
因为正常情况下

3959
02:08:45,000 --> 02:08:46,000
你断掉一个连接之后

3960
02:08:46,000 --> 02:08:47,000
那个进程就退出了

3961
02:08:47,000 --> 02:08:49,000
但除非你之前

3962
02:08:49,000 --> 02:08:51,000
因为一个很复杂的操作

3963
02:08:51,000 --> 02:08:52,000
decel

3964
02:08:52,000 --> 02:08:53,000
现在 background

3965
02:08:53,000 --> 02:08:55,000
然后 decel

3966
02:08:55,000 --> 02:08:57,000
然后你才不会

3967
02:08:57,000 --> 02:08:59,000
在你退出的时候终于成绪

3968
02:08:59,000 --> 02:09:01,000
但一般人不会那么干吗

3969
02:09:01,000 --> 02:09:01,000
对

3970
02:09:01,000 --> 02:09:04,000
除非你事后想到

3971
02:09:04,000 --> 02:09:04,000
对

3972
02:09:05,000 --> 02:09:06,000
所以你用 teamux 的话

3973
02:09:06,000 --> 02:09:07,000
它是你退出的时候

3974
02:09:07,000 --> 02:09:09,000
它是直接断掉和 teamux

3975
02:09:09,000 --> 02:09:12,000
这个 master 进程的连接

3976
02:09:12,000 --> 02:09:13,000
然后它还会继续接管

3977
02:09:13,000 --> 02:09:16,000
你在里面 launch 的那些紫进程

3978
02:09:16,000 --> 02:09:17,000
然后等你回家

3979
02:09:17,000 --> 02:09:18,000
在连上这个时候

3980
02:09:18,000 --> 02:09:20,000
你可以用 teamux congera

3981
02:09:20,000 --> 02:09:22,000
就 attach 这个参数

3982
02:09:22,000 --> 02:09:26,000
重新连回之前的 teamux 的 master 进程

3983
02:09:26,000 --> 02:09:27,000
然后这个时候你会看到

3984
02:09:27,000 --> 02:09:29,000
和你断开之前一模一样的

3985
02:09:29,000 --> 02:09:31,000
这么远端登录的建议

3986
02:09:31,000 --> 02:09:33,000
而你之前在执行的

3987
02:09:34,000 --> 02:09:36,000
可能承运时间比较长的话

3988
02:09:36,000 --> 02:09:38,000
它是不会受任何影响的

3989
02:09:38,000 --> 02:09:39,000
对

3990
02:09:39,000 --> 02:09:40,000
然后另外一个用力

3991
02:09:40,000 --> 02:09:43,000
就是比如说你是一个实验室的学生

3992
02:09:43,000 --> 02:09:44,000
然后你实验室里面有点电脑

3993
02:09:44,000 --> 02:09:45,000
然后你的工作

3994
02:09:45,000 --> 02:09:46,000
办公室里面有点电脑

3995
02:09:46,000 --> 02:09:48,000
你需要在实验室里面

3996
02:09:48,000 --> 02:09:49,000
观测一些数据

3997
02:09:49,000 --> 02:09:50,000
然后输入到电脑上

3998
02:09:50,000 --> 02:09:52,000
然后你要不要用远程中间

3999
02:09:52,000 --> 02:09:53,000
对吧

4000
02:09:53,000 --> 02:09:54,000
要么就是用 teamux

4001
02:09:54,000 --> 02:09:57,000
然后在实验室的电脑上

4002
02:09:57,000 --> 02:09:59,000
看到的东西会实时显示在

4003
02:09:59,000 --> 02:10:00,000
你办公室的电脑上

4004
02:10:00,000 --> 02:10:02,000
也挺合适

4005
02:10:02,000 --> 02:10:03,000
对

4006
02:10:03,000 --> 02:10:06,000
当然 teamux 还有一个兄弟

4007
02:10:06,000 --> 02:10:07,000
叫做 screen

4008
02:10:07,000 --> 02:10:08,000
就是屏幕那个词的

4009
02:10:08,000 --> 02:10:12,000
早期的一个中端服用

4010
02:10:12,000 --> 02:10:12,000
对

4011
02:10:12,000 --> 02:10:14,000
那 screen 的特性没有 teamux 的

4012
02:10:14,000 --> 02:10:15,000
那么强大好用

4013
02:10:15,000 --> 02:10:18,000
现在就基本上都推荐大家用 teamux

4014
02:10:18,000 --> 02:10:19,000
会好一些了

4015
02:10:19,000 --> 02:10:20,000
screen 它古老了

4016
02:10:20,000 --> 02:10:20,000
主要是

4017
02:10:20,000 --> 02:10:22,000
而且 screen 好像不能分

4018
02:10:22,000 --> 02:10:24,000
就是分 tab

4019
02:10:24,000 --> 02:10:26,000
可以分 tab

4020
02:10:26,000 --> 02:10:30,000
它最早的版本是不能分左右分屏

4021
02:10:30,000 --> 02:10:30,000
对

4022
02:10:30,000 --> 02:10:32,000
所以我就是不能 split view

4023
02:10:32,000 --> 02:10:35,000
但现在新版本是可以的了

4024
02:10:35,000 --> 02:10:35,000
OK

4025
02:10:35,000 --> 02:10:37,000
但就是因为搭载 screen

4026
02:10:37,000 --> 02:10:38,000
一般都是比较老旧的版本

4027
02:10:38,000 --> 02:10:39,000
所以这个就很难保证

4028
02:10:39,000 --> 02:10:41,000
就 teamux 的特性

4029
02:10:41,000 --> 02:10:42,000
大概会好一些

4030
02:10:42,000 --> 02:10:43,000
没错

4031
02:10:43,000 --> 02:10:47,000
我对 teamux 还有个很高级的功能

4032
02:10:47,000 --> 02:10:48,000
就一直没有说

4033
02:10:48,000 --> 02:10:48,000
还有 screen 也有这个功能

4034
02:10:48,000 --> 02:10:50,000
就是可以做那个

4035
02:10:51,000 --> 02:10:52,000
pair programming

4036
02:10:53,000 --> 02:10:53,000
对

4037
02:10:53,000 --> 02:10:54,000
没错

4038
02:10:54,000 --> 02:10:55,000
就是可以两个人连到同位

4039
02:10:55,000 --> 02:10:56,000
他跟人在输入

4040
02:10:56,000 --> 02:10:57,000
对

4041
02:10:57,000 --> 02:10:57,000
对

4042
02:10:57,000 --> 02:10:59,000
你可以两个人分别

4043
02:10:59,000 --> 02:11:01,000
从自己的机器名连到同一台服务器

4044
02:11:01,000 --> 02:11:04,000
然后调用一个 teamux 的一个中端

4045
02:11:04,000 --> 02:11:05,000
就大互相可以看一下

4046
02:11:05,000 --> 02:11:07,000
对方在那个里面打什么

4047
02:11:07,000 --> 02:11:09,000
也可以就是进行一对一的

4048
02:11:09,000 --> 02:11:12,000
这么一种辅导式教学

4049
02:11:12,000 --> 02:11:13,000
只不过容易打架

4050
02:11:13,000 --> 02:11:13,000
就学好

4051
02:11:13,000 --> 02:11:15,000
这个就是你要自己约定好

4052
02:11:15,000 --> 02:11:16,000
到底是谁教谁学

4053
02:11:16,000 --> 02:11:17,000
对吧

4054
02:11:17,000 --> 02:11:17,000
对

4055
02:11:17,000 --> 02:11:19,000
最好能鞋头一下

4056
02:11:19,000 --> 02:11:19,000
对

4057
02:11:19,000 --> 02:11:21,000
就是两个做成 pair programming

4058
02:11:21,000 --> 02:11:22,000
解对编程对吧

4059
02:11:22,000 --> 02:11:23,000
pair programming 的时候

4060
02:11:23,000 --> 02:11:25,000
比较有用的一个工具

4061
02:11:25,000 --> 02:11:26,000
没错

4062
02:11:26,000 --> 02:11:28,000
我再介绍一个叫做 tree

4063
02:11:28,000 --> 02:11:30,000
就是数那个工具

4064
02:11:30,000 --> 02:11:31,000
这个是干嘛用的

4065
02:11:31,000 --> 02:11:32,000
就是说

4066
02:11:32,000 --> 02:11:34,000
你在命令行里面

4067
02:11:34,000 --> 02:11:35,000
你要去

4068
02:11:35,000 --> 02:11:36,000
你要去就是

4069
02:11:36,000 --> 02:11:38,000
navigate file system

4070
02:11:38,000 --> 02:11:40,000
就是你要在文件系统里面去看来看东西

4071
02:11:40,000 --> 02:11:41,000
到底哪个文件在哪

4072
02:11:41,000 --> 02:11:43,000
你在哪个结构里面对吧

4073
02:11:43,000 --> 02:11:45,000
经常常用的是 list

4074
02:11:45,000 --> 02:11:48,000
就是或者就是 list

4075
02:11:48,000 --> 02:11:50,000
就是列表一个目录里面的文件

4076
02:11:50,000 --> 02:11:53,000
但是 list 一般只能列一层嘛

4077
02:11:53,000 --> 02:11:54,000
就是你只能看当前

4078
02:11:54,000 --> 02:11:56,000
或者某个指定目录下面的文件类稿

4079
02:11:56,000 --> 02:11:58,000
但是你是看不到这个整个

4080
02:11:58,000 --> 02:11:59,000
文件因为文件系统是一个

4081
02:11:59,000 --> 02:12:00,000
整个是一个数状结构

4082
02:12:00,000 --> 02:12:03,000
你是不能用 list 看到整一个数状结构

4083
02:12:03,000 --> 02:12:04,000
怎么样子的

4084
02:12:04,000 --> 02:12:08,000
然后 tree 这个小工具就可以做这个事

4085
02:12:08,000 --> 02:12:12,000
它会把文件系统从你指定的层开始

4086
02:12:12,000 --> 02:12:14,000
以一个数的形式把它打印到

4087
02:12:14,000 --> 02:12:17,000
这个中端窗口上面去

4088
02:12:17,000 --> 02:12:19,000
让你可以比较直观的看到

4089
02:12:19,000 --> 02:12:24,000
你在整个代码的工程目录里面的文件结构

4090
02:12:24,000 --> 02:12:25,000
是怎么样子的

4091
02:12:25,000 --> 02:12:26,000
就还比较有用

4092
02:12:27,000 --> 02:12:29,000
那我也来顺便推荐一个

4093
02:12:29,000 --> 02:12:31,000
midnight commander

4094
02:12:31,000 --> 02:12:31,000
就是

4095
02:12:31,000 --> 02:12:32,000
OK

4096
02:12:33,000 --> 02:12:35,000
因为这也是从 tree 想到了

4097
02:12:35,000 --> 02:12:38,000
就是 total commander 是 dust 时代

4098
02:12:38,000 --> 02:12:41,000
乃至 windows 时代非常受欢迎的一个文件关系工具

4099
02:12:41,000 --> 02:12:45,000
然后后来有有号试者把它移植成了一个

4100
02:12:45,000 --> 02:12:48,000
common line interface 的这么一个东西

4101
02:12:48,000 --> 02:12:50,000
就是你输入 MC

4102
02:12:50,000 --> 02:12:54,000
就会出现一个类似于 total commander 的一个

4103
02:12:54,000 --> 02:12:56,000
一个全屏的工具

4104
02:12:56,000 --> 02:12:57,000
有生 ncurse

4105
02:12:57,000 --> 02:12:58,000
然后里面也有什么

4106
02:12:58,000 --> 02:13:01,000
比如说列出当前命令数

4107
02:13:01,000 --> 02:13:03,000
批量拷贝

4108
02:13:03,000 --> 02:13:05,000
这个批量重新名案之类的功能

4109
02:13:05,000 --> 02:13:09,000
然后如果你是一个熟练的 total commander 用户的话

4110
02:13:09,000 --> 02:13:12,000
你会发现里面很多很多的操作是一模一样

4111
02:13:14,000 --> 02:13:16,000
而且这个东西最大的一个特征

4112
02:13:16,000 --> 02:13:17,000
它是跨连打开的

4113
02:13:17,000 --> 02:13:22,000
就是它在 links 和 douse 上面都有

4114
02:13:22,000 --> 02:13:22,000
OK

4115
02:13:22,000 --> 02:13:23,000
还蛮特别的

4116
02:13:23,000 --> 02:13:25,000
挺帅

4117
02:13:25,000 --> 02:13:28,000
那我推荐另外一个系统管理用的工具

4118
02:13:28,000 --> 02:13:29,000
叫做 htop

4119
02:13:29,000 --> 02:13:34,000
就很多这个 unix 里面都有一个内建的 mini 叫 top

4120
02:13:34,000 --> 02:13:37,000
然后它会以一个 ncurse 的方式列出

4121
02:13:37,000 --> 02:13:41,000
当前系统里面正在活跃的进程

4122
02:13:41,000 --> 02:13:42,000
以及一些系统的状态

4123
02:13:42,000 --> 02:13:44,000
比如说 CPU 的占用

4124
02:13:44,000 --> 02:13:47,000
这个就是各个用户态

4125
02:13:47,000 --> 02:13:49,000
内核态各占用的比例

4126
02:13:49,000 --> 02:13:50,000
内存的使用状况

4127
02:13:50,000 --> 02:13:53,000
活跃的一些进程的使用资源的情况

4128
02:13:54,000 --> 02:13:55,000
但是 top 的一个主要问题

4129
02:13:55,000 --> 02:13:57,000
就是它展示的是一个单色

4130
02:13:57,000 --> 02:14:00,000
而且就操作不方便的一个建议

4131
02:14:00,000 --> 02:14:01,000
能够好好看

4132
02:14:01,000 --> 02:14:02,000
不好看也不好用

4133
02:14:02,000 --> 02:14:03,000
对

4134
02:14:03,000 --> 02:14:07,000
htop 就是一个 top 的改良版

4135
02:14:07,000 --> 02:14:09,000
它可以以一种更加直观的方式

4136
02:14:09,000 --> 02:14:12,000
展现出 top 展现的所有内容

4137
02:14:12,000 --> 02:14:14,000
并且它比如说它会展示在

4138
02:14:14,000 --> 02:14:15,000
jrmware 情况下

4139
02:14:15,000 --> 02:14:16,000
它会展示这个 CPU

4140
02:14:16,000 --> 02:14:19,000
它会用一种进度调的方式

4141
02:14:19,000 --> 02:14:22,000
去表示 CPU 的实际占用比例

4142
02:14:22,000 --> 02:14:25,000
以及内存的占用情况

4143
02:14:25,000 --> 02:14:28,000
而且在下面的进程列表

4144
02:14:28,000 --> 02:14:30,000
它会也有各种各样的高级功能

4145
02:14:30,000 --> 02:14:32,000
比如说它可以一个竖状的结构

4146
02:14:32,000 --> 02:14:33,000
展示进程列表

4147
02:14:33,000 --> 02:14:35,000
而不是一个单纯的

4148
02:14:35,000 --> 02:14:36,000
对

4149
02:14:36,000 --> 02:14:37,000
就是非常介意

4150
02:14:37,000 --> 02:14:38,000
大家都

4151
02:14:38,000 --> 02:14:40,000
这是我每次装新系统的时候

4152
02:14:40,000 --> 02:14:42,000
都必装的一个软件

4153
02:14:42,000 --> 02:14:43,000
大致的作用

4154
02:14:43,000 --> 02:14:44,000
跟大家看到

4155
02:14:44,000 --> 02:14:46,000
那个叫 Activity Monitor

4156
02:14:46,000 --> 02:14:47,000
在 Western 这个功能是差不多的

4157
02:14:48,000 --> 02:14:50,000
只不过是在命令好像下面

4158
02:14:50,000 --> 02:14:51,000
每次

4159
02:14:52,000 --> 02:14:55,000
然后很多人做他们的

4160
02:14:55,000 --> 02:14:56,000
当前命令行的截图

4161
02:14:56,000 --> 02:14:59,000
都会专门找一个窗口开这个

4162
02:15:01,000 --> 02:15:03,000
算是一个现象局的软件

4163
02:15:03,000 --> 02:15:04,000
对

4164
02:15:08,000 --> 02:15:10,000
那我来推荐一个

4165
02:15:11,000 --> 02:15:12,000
来推荐一个命令

4166
02:15:12,000 --> 02:15:13,000
叫做 Open

4167
02:15:13,000 --> 02:15:14,000
或者是

4168
02:15:15,000 --> 02:15:17,000
或者说我来推荐一组

4169
02:15:17,000 --> 02:15:20,000
这个在 All Assistant 上面

4170
02:15:21,000 --> 02:15:24,000
在命令行下面工作的时候

4171
02:15:24,000 --> 02:15:26,000
你可能会出现一些

4172
02:15:26,000 --> 02:15:27,000
比如说你要把命令

4173
02:15:27,000 --> 02:15:28,000
某一个文件的内容

4174
02:15:28,000 --> 02:15:29,000
或者是某些输出

4175
02:15:31,000 --> 02:15:34,000
弄到系统简帖板上的场景

4176
02:15:34,000 --> 02:15:36,000
或者你需要把系统简帖板的内容

4177
02:15:36,000 --> 02:15:40,000
输入到某一个命令的输入里面

4178
02:15:41,000 --> 02:15:44,000
或者你需要利用系统级的一个工具

4179
02:15:44,000 --> 02:15:45,000
比如说你要打开一个 PDF

4180
02:15:47,000 --> 02:15:48,000
怎么办呢

4181
02:15:48,000 --> 02:15:48,000
你可以用

4182
02:15:49,000 --> 02:15:50,000
首先

4183
02:15:51,000 --> 02:15:52,000
简帖板的话

4184
02:15:52,000 --> 02:15:55,000
你可以用 PB copy 和 PB paste 两个功能

4185
02:15:55,000 --> 02:15:56,000
两个命令

4186
02:15:56,000 --> 02:16:00,000
分别可以把简帖板里面的东西

4187
02:16:00,000 --> 02:16:02,000
拷贝或者是粘贴出来

4188
02:16:02,000 --> 02:16:04,000
而如果你想打开某一个文件的话

4189
02:16:04,000 --> 02:16:05,000
你可以用 Open 这个命令

4190
02:16:05,000 --> 02:16:06,000
比如说

4191
02:16:07,000 --> 02:16:11,000
你想要在 Finder 里面观察当前的目标

4192
02:16:11,000 --> 02:16:12,000
你可以 Open 空格点

4193
02:16:12,000 --> 02:16:13,000
就可以打开

4194
02:16:13,000 --> 02:16:16,000
就可以在 Finder 里面打开当前目标

4195
02:16:16,000 --> 02:16:18,000
如果你想要打开当前目标下面

4196
02:16:18,000 --> 02:16:20,000
所有的 PDF 文件

4197
02:16:20,000 --> 02:16:22,000
可以打 Open 新点 PDF

4198
02:16:24,000 --> 02:16:25,000
系统会自动调用 Private

4199
02:16:25,000 --> 02:16:27,000
或者是 Alobby

4200
02:16:27,000 --> 02:16:30,000
Railer 拒绝于你选择的目的程序是什么

4201
02:16:30,000 --> 02:16:32,000
来打开所有的 PDF 文件

4202
02:16:33,000 --> 02:16:34,000
算是一个小 Tune

4203
02:16:36,000 --> 02:16:39,000
那个 PB copy 和 PB paste 用法

4204
02:16:39,000 --> 02:16:40,000
可能还要再解释一下

4205
02:16:43,000 --> 02:16:47,000
就是 PB copy 这个命令的输入

4206
02:16:47,000 --> 02:16:52,000
你需要把你的程序的输出重定项给 PB copy

4207
02:16:52,000 --> 02:16:53,000
对

4208
02:16:53,000 --> 02:16:57,000
它是指从它的输入

4209
02:16:57,000 --> 02:16:59,000
把它的输入复制到系统解定板里面

4210
02:16:59,000 --> 02:17:01,000
然后 PB paste 就刚好反过来

4211
02:17:01,000 --> 02:17:05,000
它是把它的系统解定板那种导到它的输出里面去

4212
02:17:05,000 --> 02:17:09,000
所以用法肯定就是说是从 PB 导入

4213
02:17:09,000 --> 02:17:10,000
就是内容导到 PB copy 里面去

4214
02:17:10,000 --> 02:17:13,000
然后从 PB paste 里面导出这么一个管道的用法

4215
02:17:13,000 --> 02:17:16,000
比如说你在网页上选中的一段话

4216
02:17:16,000 --> 02:17:18,000
然后你要把这段话排序

4217
02:17:18,000 --> 02:17:21,000
可以在你可以先选中这个话

4218
02:17:21,000 --> 02:17:22,000
按 Cmd C

4219
02:17:22,000 --> 02:17:26,000
然后到命令行下面打 PB paste

4220
02:17:26,000 --> 02:17:27,000
Pype sort

4221
02:17:27,000 --> 02:17:28,000
Pype Pb copy

4222
02:17:29,000 --> 02:17:32,000
然后你就把简天把你的内容排序

4223
02:17:33,000 --> 02:17:33,000
对

4224
02:17:33,000 --> 02:17:34,000
大概是这么一项

4225
02:17:34,000 --> 02:17:34,000
对

4226
02:17:35,000 --> 02:17:35,000
行

4227
02:17:35,000 --> 02:17:37,000
那这个命令就介绍到这里

4228
02:17:37,000 --> 02:17:40,000
因为以上介绍的所有命令都

4229
02:17:40,000 --> 02:17:43,000
除了刚才讲的那个就是 Western 原生的

4230
02:17:43,000 --> 02:17:45,000
Pb copy Pb paste Open 之外

4231
02:17:45,000 --> 02:17:45,000
都

4232
02:17:45,000 --> 02:17:47,000
都需要你额外装

4233
02:17:47,000 --> 02:17:48,000
都是不是系统自带的

4234
02:17:48,000 --> 02:17:50,000
你就需要通过这个比如

4235
02:17:50,000 --> 02:17:52,000
HomeBrew 的方式去自己装

4236
02:17:52,000 --> 02:17:54,000
如果你是其他内容系统的话

4237
02:17:54,000 --> 02:17:57,000
你可以用你自己的包管理器去装工具

4238
02:17:57,000 --> 02:17:59,000
对

4239
02:17:59,000 --> 02:18:02,000
那我们今天的节目就到此为止了

4240
02:18:03,000 --> 02:18:03,000
好

4241
02:18:03,000 --> 02:18:04,000
真的说了好多

4242
02:18:04,000 --> 02:18:08,000
因为这真是可以拆成两期的节目

4243
02:18:10,000 --> 02:18:10,000
好吧

4244
02:18:10,000 --> 02:18:15,000
反正关于命令行的所谓 common line-full

4245
02:18:15,000 --> 02:18:17,000
common line-full 的一个东西

4246
02:18:17,000 --> 02:18:19,000
这是说之不见

4247
02:18:19,000 --> 02:18:24,000
不妨推荐大家去 commonline-full.com

4248
02:18:24,000 --> 02:18:25,000
这个名字怎么来的

4249
02:18:25,000 --> 02:18:28,000
就是因为外国人不明白

4250
02:18:28,000 --> 02:18:29,000
空-full 这个词是什么意思

4251
02:18:29,000 --> 02:18:32,000
他们会把某些东西的技巧叫做什么什么

4252
02:18:32,000 --> 02:18:32,000
复乎

4253
02:18:32,000 --> 02:18:35,000
比如说搜搜 Google 的技巧叫做 Google-full

4254
02:18:35,000 --> 02:18:38,000
然后 commonline 的技巧叫做 commonline-full

4255
02:18:38,000 --> 02:18:41,000
然后 commonline-f-u.com

4256
02:18:41,000 --> 02:18:43,000
然后可以在这里面找到很多很多

4257
02:18:43,000 --> 02:18:46,000
有使用的命令行的 tips

4258
02:18:46,000 --> 02:18:47,000
好吧

4259
02:18:47,000 --> 02:18:49,000
感谢收听 ipinpodcast

4260
02:18:49,000 --> 02:18:51,000
网络旗下 IT 基础主题娱乐节目

4261
02:18:51,000 --> 02:18:52,000
我们号称

4262
02:18:52,000 --> 02:18:54,000
我们叫内核货货

4263
02:18:54,000 --> 02:18:55,000
我们号称 HOTCALL

4264
02:18:55,000 --> 02:18:56,000
但是也没有干货

4265
02:18:56,000 --> 02:18:59,000
想听人听不想听人别听

4266
02:18:59,000 --> 02:19:00,000
你可以为本节目捐款

4267
02:19:00,000 --> 02:19:03,000
捐款地址是 kernalpanic.fm-download

4268
02:19:03,000 --> 02:19:04,000
捐款间隔随意

4269
02:19:04,000 --> 02:19:06,000
这小时八个正如背的可以

4270
02:19:06,000 --> 02:19:07,000
捐款不会你带来什么

4271
02:19:07,000 --> 02:19:08,000
不捐也不会让你失去什么

4272
02:19:08,000 --> 02:19:11,000
我们的口号是 no hot feelings

4273
02:19:11,000 --> 02:19:12,000
如果你有任何反馈

4274
02:19:12,000 --> 02:19:16,000
欢迎发邀见到 kernalpanic.lpi

4275
02:19:16,000 --> 02:19:19,000
同时也欢迎收听 ipin 旗下集团节目

4276
02:19:19,000 --> 02:19:21,000
IT 公论为之道

4277
02:19:21,000 --> 02:19:21,000
太一来了

4278
02:19:21,000 --> 02:19:22,000
流行通讯

4279
02:19:22,000 --> 02:19:23,000
HOTSORI

4280
02:19:23,000 --> 02:19:24,000
印影下无资源

4281
02:19:24,000 --> 02:19:26,000
博物质选美

4282
02:19:26,000 --> 02:19:28,000
下期节目再会

