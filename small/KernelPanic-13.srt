1
00:00:00,000 --> 00:00:04,000
白美山的时间 2006 年 1 月 20 日下午 3 点 04 分 05 秒

2
00:00:04,000 --> 00:00:09,000
您正在收听 IPN podcast 网络旗下的 IT 技术主义节目内核恐慌

3
00:00:09,000 --> 00:00:11,000
我们号称 Hackle 但也没有干货

4
00:00:11,000 --> 00:00:13,000
想听的人听不想听的人就别听

5
00:00:13,000 --> 00:00:18,000
内核恐慌的网址是 ipn.li slash kernel panic

6
00:00:18,000 --> 00:00:21,000
我们推荐大家使用 podcast 客户端订阅我们的节目

7
00:00:21,000 --> 00:00:23,000
如果您不知道该用什么客户端

8
00:00:23,000 --> 00:00:26,000
请访问 ipn.li slash faq

9
00:00:26,000 --> 00:00:27,000
在录音过程中

10
00:00:27,000 --> 00:00:30,000
您可以播通热心电话参与我的节目

11
00:00:30,000 --> 00:00:30,000
电话号码是

12
00:00:34,000 --> 00:00:36,000
电话号码是

13
00:00:37,000 --> 00:00:37,000
算了吧

14
00:00:37,000 --> 00:00:41,000
06189998819911197253

15
00:00:41,000 --> 00:00:45,000
我觉得 Lost

16
00:00:45,000 --> 00:00:50,000
其实是把那个节目里面就是 IT crowd 里面唱的音在这边唱起

17
00:00:50,000 --> 00:00:51,000
好吧

18
00:00:51,000 --> 00:00:53,000
anyway

19
00:00:53,000 --> 00:00:55,000
如果你非常喜欢我们的节目

20
00:00:55,000 --> 00:00:58,000
或者说不管你是否喜欢我们的节目

21
00:00:58,000 --> 00:00:59,000
你都可以为我们捐款

22
00:00:59,000 --> 00:01:04,000
捐款地址是 ipn.li slash kernel panic slash donate

23
00:01:04,000 --> 00:01:06,000
donat

24
00:01:06,000 --> 00:01:07,000
捐款经过随意

25
00:01:07,000 --> 00:01:11,000
但是必须是可以被扒整出的正整数

26
00:01:11,000 --> 00:01:12,000
OK

27
00:01:12,000 --> 00:01:13,000
等一下

28
00:01:13,000 --> 00:01:14,000
那个地址你用的是 ipn 那个吗

29
00:01:14,000 --> 00:01:17,000
你又可以用 kernel panic 那个.fm 那个地址

30
00:01:17,000 --> 00:01:17,000
OK

31
00:01:17,000 --> 00:01:21,000
我们有了新的域名是 kernel panic.fm

32
00:01:21,000 --> 00:01:23,000
所以捐款地址是

33
00:01:23,000 --> 00:01:24,000
对

34
00:01:24,000 --> 00:01:26,000
这么便宜啊

35
00:01:26,000 --> 00:01:27,000
不贵的这个域名

36
00:01:27,000 --> 00:01:28,000
对

37
00:01:28,000 --> 00:01:29,000
因此我们更需要大家捐款

38
00:01:29,000 --> 00:01:30,000
有没有

39
00:01:30,000 --> 00:01:32,000
贵求大家捐款

40
00:01:32,000 --> 00:01:34,000
最低八块上不封顶

41
00:01:34,000 --> 00:01:35,000
对

42
00:01:35,000 --> 00:01:37,000
捐款地址是 ipn.lg

43
00:01:37,000 --> 00:01:41,000
sorry kernel panic.fm slash donate donate

44
00:01:44,000 --> 00:01:44,000
对

45
00:01:44,000 --> 00:01:46,000
今天我们说我们的地址多少斤

46
00:01:46,000 --> 00:01:47,000
13

47
00:01:47,000 --> 00:01:48,000
13

48
00:01:48,000 --> 00:01:49,000
13

49
00:01:49,000 --> 00:01:50,000
零 x 零 c

50
00:01:51,000 --> 00:01:52,000
嗯哼

51
00:01:52,000 --> 00:01:53,000
为 2

52
00:01:53,000 --> 00:01:54,000
零 x 零 d

53
00:01:56,000 --> 00:01:58,000
是对对吧

54
00:01:58,000 --> 00:01:59,000
11 是 b

55
00:01:59,000 --> 00:02:00,000
是

56
00:02:00,000 --> 00:02:01,000
对

57
00:02:01,000 --> 00:02:02,000
所以是零 x 零 d

58
00:02:02,000 --> 00:02:05,000
13 那个数字不是非常的

59
00:02:06,000 --> 00:02:07,000
极利吗

60
00:02:07,000 --> 00:02:08,000
那好像也

61
00:02:08,000 --> 00:02:11,000
我也不知道在欧洲某些国家 13

62
00:02:11,000 --> 00:02:12,000
好像是个蛮极利的数字

63
00:02:12,000 --> 00:02:14,000
那我

64
00:02:14,000 --> 00:02:16,000
因为我们这边没有 13 层那么高的楼

65
00:02:16,000 --> 00:02:18,000
所以我不知道没有没有办法验证

66
00:02:19,000 --> 00:02:20,000
哈哈哈

67
00:02:20,000 --> 00:02:22,000
大农村

68
00:02:22,000 --> 00:02:23,000
大农村

69
00:02:23,000 --> 00:02:24,000
没错

70
00:02:24,000 --> 00:02:26,000
哎你知道加拿大的意思吗

71
00:02:26,000 --> 00:02:26,000
Kanada

72
00:02:26,000 --> 00:02:31,000
Kanada 是是当地人的语言吗

73
00:02:31,000 --> 00:02:32,000
就是就是什么艾四

74
00:02:32,000 --> 00:02:33,000
不是就是在那边

75
00:02:33,000 --> 00:02:36,000
就是英有特人还是什么人的语言里面

76
00:02:36,000 --> 00:02:37,000
就是 big village

77
00:02:37,000 --> 00:02:39,000
大农村的意思

78
00:02:39,000 --> 00:02:40,000
OK

79
00:02:40,000 --> 00:02:40,000
啊

80
00:02:40,000 --> 00:02:41,000
倒也贴切了

81
00:02:41,000 --> 00:02:42,000
嗯

82
00:02:42,000 --> 00:02:45,000
哈哈哈

83
00:02:45,000 --> 00:02:46,000
嘿的好

84
00:02:47,000 --> 00:02:48,000
嗯对

85
00:02:48,000 --> 00:02:50,000
我们上一期请到的幕僚里面

86
00:02:50,000 --> 00:02:53,000
就是我们上一期请到幕僚那期节目里面

87
00:02:53,000 --> 00:02:54,000
我们反复提到了

88
00:02:54,000 --> 00:02:55,000
我反复提到了

89
00:02:55,000 --> 00:02:56,000
How I met mod

90
00:02:56,000 --> 00:02:56,000
里面

91
00:02:56,000 --> 00:02:57,000
然后里面另外一个

92
00:02:57,000 --> 00:03:00,000
除了纽哥西他们也许很喜欢黑的

93
00:03:00,000 --> 00:03:01,000
另一个地方就是加拿大

94
00:03:03,000 --> 00:03:05,000
不是还有那个地方吧

95
00:03:05,000 --> 00:03:06,000
那个叫

96
00:03:06,000 --> 00:03:06,000
那 panning

97
00:03:06,000 --> 00:03:07,000
那里面叫什么

98
00:03:08,000 --> 00:03:10,000
panning

99
00:03:10,000 --> 00:03:11,000
那个 big bouncer

100
00:03:11,000 --> 00:03:12,000
里面 panning

101
00:03:12,000 --> 00:03:13,000
老家的那个地方来的

102
00:03:13,000 --> 00:03:15,000
啊我不知道

103
00:03:15,000 --> 00:03:16,000
那个周教

104
00:03:17,000 --> 00:03:18,000
查一下

105
00:03:19,000 --> 00:03:20,000
panning from

106
00:03:25,000 --> 00:03:25,000
对

107
00:03:25,000 --> 00:03:27,000
所以应该有人 serie 对不对

108
00:03:38,000 --> 00:03:40,000
Nabrasca

109
00:03:40,000 --> 00:03:40,000
啊那

110
00:03:40,000 --> 00:03:41,000
OK

111
00:03:41,000 --> 00:03:42,000
now i'm from Omaha

112
00:03:43,000 --> 00:03:44,000
那个

113
00:03:44,000 --> 00:03:45,000
the walking dead 里面就是

114
00:03:45,000 --> 00:03:46,000
行尸走肉

115
00:03:46,000 --> 00:03:48,000
每句行尸走肉里面有一集也叫

116
00:03:48,000 --> 00:03:49,000
Nabrasca

117
00:03:49,000 --> 00:03:50,000
就是讲他们想要去 Nabrasca

118
00:03:50,000 --> 00:03:52,000
然后说那边人少

119
00:03:52,000 --> 00:03:54,000
然后很多枪

120
00:03:54,000 --> 00:03:55,000
然后

121
00:03:55,000 --> 00:03:56,000
就是 fly over state

122
00:03:56,000 --> 00:03:57,000
所以僵尸不会太多

123
00:03:57,000 --> 00:03:59,000
连在这种末日片里面都要被黑

124
00:04:02,000 --> 00:04:03,000
太惨了

125
00:04:03,000 --> 00:04:04,000
嗯

126
00:04:04,000 --> 00:04:07,000
上期我们请到了幕僚大神

127
00:04:07,000 --> 00:04:08,000
给我们

128
00:04:08,000 --> 00:04:13,000
然后我们瞬间多了很多粉丝和

129
00:04:13,000 --> 00:04:13,000
没错

130
00:04:13,000 --> 00:04:15,000
你这可能是

131
00:04:15,000 --> 00:04:17,000
对我们我们之前觉得可能键盘骨皇的

132
00:04:17,000 --> 00:04:19,000
一期是比较

133
00:04:19,000 --> 00:04:20,000
比较受欢迎的一期

134
00:04:20,000 --> 00:04:22,000
但是现在看来好像

135
00:04:22,000 --> 00:04:24,000
就这已经是一个

136
00:04:24,000 --> 00:04:25,000
后无来者的

137
00:04:25,000 --> 00:04:26,000
最受欢迎的一期

138
00:04:26,000 --> 00:04:28,000
后无来者的高度了对吧

139
00:04:28,000 --> 00:04:28,000
对

140
00:04:28,000 --> 00:04:29,000
末遥这一期真的是

141
00:04:29,000 --> 00:04:31,000
我靠现在

142
00:04:31,000 --> 00:04:32,000
现在看来

143
00:04:32,000 --> 00:04:35,000
真是不管是在微博上还是在

144
00:04:35,000 --> 00:04:36,000
嗯

145
00:04:36,000 --> 00:04:39,000
推特上还是在还是由个热情听众

146
00:04:39,000 --> 00:04:41,000
车型听众们写的来信里面

147
00:04:41,000 --> 00:04:43,000
这一期都是非常受欢迎

148
00:04:43,000 --> 00:04:45,000
而且引起热议的一期

149
00:04:45,000 --> 00:04:46,000
嗯

150
00:04:46,000 --> 00:04:48,000
而且你发现没这一期出现之后

151
00:04:48,000 --> 00:04:51,000
我们多了很多女粉丝

152
00:04:51,000 --> 00:04:51,000
对

153
00:04:51,000 --> 00:04:52,000
就

154
00:04:52,000 --> 00:04:55,000
然后我我我我挨个点进他们微博去看

155
00:04:55,000 --> 00:04:57,000
都是美女竟然

156
00:04:57,000 --> 00:05:00,000
你居然会挨个点进去看人家的微博

157
00:05:00,000 --> 00:05:01,000
你这样对吗

158
00:05:01,000 --> 00:05:04,000
我这个也是要关关关注粉丝的反馈吗

159
00:05:04,000 --> 00:05:05,000
对不对

160
00:05:05,000 --> 00:05:08,000
但我一般看见头像是美女才点进去看一下

161
00:05:08,000 --> 00:05:10,000
这可可都拍这个这么高冷的节目

162
00:05:10,000 --> 00:05:12,000
要看脸这样退吗

163
00:05:12,000 --> 00:05:13,000
啊

164
00:05:13,000 --> 00:05:14,000
我们都不露脸没有关系

165
00:05:14,000 --> 00:05:16,000
没有关系

166
00:05:16,000 --> 00:05:16,000
好吧

167
00:05:16,000 --> 00:05:21,000
所以所以所以看见还是什么男神的魅力很大

168
00:05:21,000 --> 00:05:21,000
对

169
00:05:21,000 --> 00:05:24,000
而且而且有一个有一个有一个推

170
00:05:24,000 --> 00:05:27,000
有一个有一个微博说这一期毕竟都是男神

171
00:05:27,000 --> 00:05:28,000
得点闷

172
00:05:28,000 --> 00:05:33,000
然后咱俩就可怜的区区来区区在那个闷里面了

173
00:05:33,000 --> 00:05:34,000
哈哈哈

174
00:05:34,000 --> 00:05:35,000
哎呀

175
00:05:35,000 --> 00:05:37,000
人家还是为了照顾一下我们的情绪而已

176
00:05:37,000 --> 00:05:38,000
不要太当真

177
00:05:38,000 --> 00:05:39,000
不要太当真

178
00:05:39,000 --> 00:05:40,000
好了

179
00:05:40,000 --> 00:05:40,000
对

180
00:05:40,000 --> 00:05:44,000
我们其实我们也在酝酿或者说在

181
00:05:46,000 --> 00:05:47,000
歪歪

182
00:05:47,000 --> 00:05:51,000
下将来还会有一期请到重新请到幕僚

183
00:05:51,000 --> 00:05:52,000
不过

184
00:05:52,000 --> 00:05:57,000
目前没有一个太确切的时间表

185
00:05:57,000 --> 00:05:59,000
但我们会努力

186
00:05:59,000 --> 00:06:00,000
对

187
00:06:00,000 --> 00:06:07,000
然后下一期可能会想要谈了一些和数据相关的和统计学相关的主题吧

188
00:06:07,000 --> 00:06:12,000
其实我们这边也可以请听众们自靠费用

189
00:06:12,000 --> 00:06:18,000
如果你觉得你对数据这个话题或说对统计学这个话题比较有比较感兴趣

190
00:06:18,000 --> 00:06:22,000
并且可以从和程序相关的角度谈一下你的看法

191
00:06:22,000 --> 00:06:25,000
那我们也可以非常欢迎你啊

192
00:06:25,000 --> 00:06:27,000
或者是报名参加我们的节目

193
00:06:27,000 --> 00:06:32,000
或者是为这一个将可能出现的主题写一些你的看法

194
00:06:32,000 --> 00:06:33,000
因为我们现在

195
00:06:33,000 --> 00:06:35,000
嗯

196
00:06:35,000 --> 00:06:37,000
主要是会收到一些呃

197
00:06:37,000 --> 00:06:40,000
feedback 就是就是主要是在节目播出之后

198
00:06:40,000 --> 00:06:42,000
比如说我们今天是今天吗

199
00:06:42,000 --> 00:06:45,000
收到一封两千两百多字的读者来信

200
00:06:45,000 --> 00:06:49,000
是是一位微软员工

201
00:06:49,000 --> 00:06:52,000
然后专门呃

202
00:06:52,000 --> 00:06:55,000
提供了上幕僚这一期的很多反馈

203
00:06:55,000 --> 00:06:59,000
但是这些反馈里面有很多我们都觉得其实相当有意义

204
00:06:59,000 --> 00:07:01,000
但是呃

205
00:07:01,000 --> 00:07:03,000
全文念出来实在是

206
00:07:03,000 --> 00:07:05,000
会占用比较长的时间

207
00:07:05,000 --> 00:07:06,000
所以也许比较好的一点

208
00:07:06,000 --> 00:07:09,000
比较好的一种呃

209
00:07:09,000 --> 00:07:12,000
模式是我们告诉听众朋友们下一期

210
00:07:12,000 --> 00:07:14,000
或者说将来会出现的某一些的话题是什么

211
00:07:14,000 --> 00:07:18,000
然后各位听众可以就此写一些感想

212
00:07:18,000 --> 00:07:22,000
然后我们可以在呃节目里面

213
00:07:22,000 --> 00:07:23,000
或者是念出来

214
00:07:23,000 --> 00:07:24,000
或者是就其观点

215
00:07:24,000 --> 00:07:26,000
做出讨论我觉得挺好的

216
00:07:26,000 --> 00:07:26,000
嗯哼

217
00:07:26,000 --> 00:07:28,000
不错

218
00:07:28,000 --> 00:07:29,000
然后真的很感动啊

219
00:07:29,000 --> 00:07:32,000
就是本本节目开播以来

220
00:07:33,000 --> 00:07:34,000
这不算有史以来最长

221
00:07:34,000 --> 00:07:38,000
但是觉得也是较长的那一些少数了

222
00:07:38,000 --> 00:07:39,000
对是

223
00:07:39,000 --> 00:07:41,000
关键是

224
00:07:41,000 --> 00:07:43,000
关键是他说

225
00:07:43,000 --> 00:07:44,000
他说他是微软的员工

226
00:07:44,000 --> 00:07:47,000
然后我们还这么黑他们

227
00:07:47,000 --> 00:07:48,000
对

228
00:07:48,000 --> 00:07:49,000
以后黑人还坚持

229
00:07:49,000 --> 00:07:51,000
听真的是真爱

230
00:07:51,000 --> 00:07:52,000
我们以后下车轻一点

231
00:07:52,000 --> 00:07:54,000
特别照顾

232
00:07:54,000 --> 00:07:56,000
特别照顾女粉丝的心

233
00:07:56,000 --> 00:07:57,000
那个心情

234
00:07:57,000 --> 00:07:58,000
对不对

235
00:07:58,000 --> 00:07:59,000
男粉丝就是

236
00:07:59,000 --> 00:08:01,000
微软只有女粉丝这个真的不太正常

237
00:08:01,000 --> 00:08:03,000
不过想想小姐姐

238
00:08:03,000 --> 00:08:03,000
等等

239
00:08:03,000 --> 00:08:05,000
消息也是微软粉丝吗

240
00:08:05,000 --> 00:08:05,000
虽然他微软工

241
00:08:05,000 --> 00:08:07,000
但是消息也是微软粉丝吗

242
00:08:07,000 --> 00:08:08,000
嗯

243
00:08:08,000 --> 00:08:11,000
我们可以下期找小爸爸请到他来

244
00:08:11,000 --> 00:08:13,000
你可以当面问的

245
00:08:13,000 --> 00:08:13,000
好好好

246
00:08:13,000 --> 00:08:15,000
你将来一定要有一期请消息节

247
00:08:15,000 --> 00:08:17,000
嗯哼

248
00:08:17,000 --> 00:08:18,000
嗯对

249
00:08:18,000 --> 00:08:19,000
总之我觉得上期

250
00:08:19,000 --> 00:08:20,000
呃

251
00:08:20,000 --> 00:08:21,000
慕容这些

252
00:08:21,000 --> 00:08:22,000
到现在还是觉得怎么说

253
00:08:22,000 --> 00:08:24,000
好像纯齿流行

254
00:08:24,000 --> 00:08:25,000
然后膝盖孙人

255
00:08:25,000 --> 00:08:28,000
哈哈哈

256
00:08:28,000 --> 00:08:29,000
哈哈

257
00:08:29,000 --> 00:08:30,000
那对了

258
00:08:30,000 --> 00:08:32,000
其实回应一下

259
00:08:32,000 --> 00:08:34,000
上一期的一些

260
00:08:34,000 --> 00:08:36,000
一些没有彻底展开的观点吧

261
00:08:36,000 --> 00:08:38,000
就是其实我后来想想

262
00:08:38,000 --> 00:08:40,000
上一期提到一些事情

263
00:08:40,000 --> 00:08:41,000
比如说我觉得

264
00:08:41,000 --> 00:08:42,000
呃

265
00:08:42,000 --> 00:08:44,000
比如说工具不好用这件事情

266
00:08:44,000 --> 00:08:45,000
呃

267
00:08:45,000 --> 00:08:46,000
我不知道你怎么觉得

268
00:08:46,000 --> 00:08:48,000
但我觉得现在的变成工具

269
00:08:48,000 --> 00:08:51,000
要比 10 年前好用太多了

270
00:08:51,000 --> 00:08:53,000
你不觉得吗

271
00:08:53,000 --> 00:08:54,000
我想想时间见我的干嘛

272
00:08:54,000 --> 00:08:55,000
哈哈哈

273
00:08:55,000 --> 00:08:56,000
别这样好吗

274
00:08:56,000 --> 00:08:58,000
别这样

275
00:08:58,000 --> 00:08:59,000
时间起码刚上大学

276
00:08:59,000 --> 00:09:01,000
嗯还不怎么

277
00:09:01,000 --> 00:09:02,000
啊

278
00:09:02,000 --> 00:09:03,000
然后学的是商科

279
00:09:03,000 --> 00:09:05,000
也不怎么写别也不怎么写程序

280
00:09:05,000 --> 00:09:06,000
没感觉

281
00:09:06,000 --> 00:09:08,000
哈哈哈

282
00:09:08,000 --> 00:09:09,000
好吧

283
00:09:09,000 --> 00:09:11,000
但我是觉得现在的变成工具

284
00:09:11,000 --> 00:09:14,000
要比 10 年前就是 205 年左右

285
00:09:14,000 --> 00:09:15,000
真的好用很多啊

286
00:09:15,000 --> 00:09:18,000
205 年的时候

287
00:09:18,000 --> 00:09:19,000
嗯

288
00:09:19,000 --> 00:09:20,000
不说别的吧

289
00:09:20,000 --> 00:09:22,000
你写一个最简单的最最基础的东西

290
00:09:22,000 --> 00:09:23,000
你你写个网页出来

291
00:09:23,000 --> 00:09:25,000
那个时候哪有什么

292
00:09:25,000 --> 00:09:27,000
webkit console 这种东西

293
00:09:27,000 --> 00:09:29,000
就那个时候

294
00:09:29,000 --> 00:09:31,000
就用那个就是什么

295
00:09:31,000 --> 00:09:32,000
呃编辑一下

296
00:09:32,000 --> 00:09:34,000
然后刷新页面查看

297
00:09:34,000 --> 00:09:34,000
对啊

298
00:09:34,000 --> 00:09:36,000
而且那个时候用的是 initnx 4

299
00:09:36,000 --> 00:09:36,000
好吗

300
00:09:36,000 --> 00:09:39,000
initnx 4 那个时候还没有没有 type 的

301
00:09:39,000 --> 00:09:40,000
就是你

302
00:09:40,000 --> 00:09:42,000
你用的

303
00:09:42,000 --> 00:09:43,000
那个时候我是用 notepad plus plus

304
00:09:43,000 --> 00:09:45,000
写一个

305
00:09:45,000 --> 00:09:46,000
写写一个 markup

306
00:09:46,000 --> 00:09:50,000
然后在微软在 IE 里面刷新

307
00:09:50,000 --> 00:09:51,000
现在呢

308
00:09:51,000 --> 00:09:52,000
然后去然后去猜吧

309
00:09:52,000 --> 00:09:56,000
然后自己头脑中模拟那个什么 dome 解析器的一步一步猜

310
00:09:56,000 --> 00:09:58,000
它为什么会这样对不对

311
00:09:58,000 --> 00:09:59,000
对

312
00:09:59,000 --> 00:10:02,000
而现在 webconsole 是多么好用的一个东西

313
00:10:02,000 --> 00:10:07,000
你可以随时去改任何一个页面上的大部分元素

314
00:10:07,000 --> 00:10:09,000
但是除非你再用一些比较二的东西

315
00:10:09,000 --> 00:10:12,000
比如说 GWT 这种东西的

316
00:10:12,000 --> 00:10:16,000
那搞出来的东西是真的没办法在 webkit console 里面 db

317
00:10:16,000 --> 00:10:19,000
但是如果你图手写的话

318
00:10:19,000 --> 00:10:22,000
那这些工具真的要比 10 年前好太多

319
00:10:22,000 --> 00:10:23,000
对啊

320
00:10:24,000 --> 00:10:26,000
而且很多语言都

321
00:10:26,000 --> 00:10:27,000
现在很多动态语言

322
00:10:27,000 --> 00:10:31,000
或者说尤其是动态语言都提供了自己的所谓 repl

323
00:10:32,000 --> 00:10:33,000
repl

324
00:10:33,000 --> 00:10:34,000
对

325
00:10:34,000 --> 00:10:36,000
repl 叫什么所谓来着

326
00:10:36,000 --> 00:10:40,000
write read evaluate print loop

327
00:10:40,000 --> 00:10:41,000
读入

328
00:10:41,000 --> 00:10:44,000
然后叫什么 evaluate 中文叫求值

329
00:10:44,000 --> 00:10:47,000
求值打印循环

330
00:10:47,000 --> 00:10:48,000
对

331
00:10:48,000 --> 00:10:53,000
当然 repl 其实并不是一个非常新的东西

332
00:10:53,000 --> 00:10:55,000
比如说

333
00:10:55,000 --> 00:10:57,000
比如说他就有了

334
00:10:57,000 --> 00:10:58,000
对

335
00:10:58,000 --> 00:11:03,000
而且就哪怕是命运是原在 basic 上面

336
00:11:03,000 --> 00:11:05,000
其实也是一个 repl

337
00:11:05,000 --> 00:11:10,000
就在在 apple 二上面的 basic 也是一个

338
00:11:10,000 --> 00:11:12,000
就是一行一行解析之心

339
00:11:12,000 --> 00:11:12,000
对

340
00:11:12,000 --> 00:11:13,000
除非你打行号

341
00:11:13,000 --> 00:11:16,000
然后再再打 run

342
00:11:16,000 --> 00:11:20,000
否则他就是一个默认就是一个 repl

343
00:11:20,000 --> 00:11:24,000
但是现在的 repl 要比又要比那时候 repl 要好太多了

344
00:11:24,000 --> 00:11:32,000
就不管是比如说我们有现在像 iPyzen 这样的非常实用的日常笔记本工具

345
00:11:32,000 --> 00:11:36,000
Rubio Pre

346
00:11:36,000 --> 00:11:38,000
识念 pre

347
00:11:38,000 --> 00:11:40,000
pry

348
00:11:40,000 --> 00:11:41,000
就是翘棍的那个词

349
00:11:41,000 --> 00:11:43,000
识念 prize

350
00:11:43,000 --> 00:11:44,000
怎么用

351
00:11:44,000 --> 00:11:45,000
prize 没怎么用

352
00:11:45,000 --> 00:11:46,000
对

353
00:11:46,000 --> 00:11:49,000
这些就是这些东西都是支持

354
00:11:49,000 --> 00:11:51,000
比如说你在输的时候就可以与法高压了

355
00:11:51,000 --> 00:11:57,000
然后是你可以把它当成一个包

356
00:11:57,000 --> 00:11:59,000
欠到你的

357
00:11:59,000 --> 00:12:01,000
欠到你要想要 debug 的程序里面

358
00:12:01,000 --> 00:12:04,000
然后你在那个地方设置一个以前是要设置一个断点

359
00:12:04,000 --> 00:12:06,000
用什么 pydb 之类的

360
00:12:06,000 --> 00:12:09,000
而现在你可以直接把 iPyzen 断在那个地方

361
00:12:09,000 --> 00:12:12,000
然后执行到那时候跳台一个 iPyzen 执行环境

362
00:12:12,000 --> 00:12:14,000
你可以随便想干什么

363
00:12:14,000 --> 00:12:15,000
对

364
00:12:16,000 --> 00:12:23,000
然后有比如说我们之前在苹果的发布会上看到的 swift 的那个 playground

365
00:12:23,000 --> 00:12:27,000
它其实也是一个更为先进的 repro

366
00:12:27,000 --> 00:12:31,000
就是它有所谓 live programming 的能力

367
00:12:31,000 --> 00:12:35,000
你可以更加直观的看到你写出来的东西是什么

368
00:12:35,000 --> 00:12:37,000
或者说它跑起来

369
00:12:37,000 --> 00:12:40,000
它在局部跑起来是一个什么样的过程

370
00:12:40,000 --> 00:12:42,000
其实都是非常方便的一些特性

371
00:12:42,000 --> 00:12:43,000
嗯哼

372
00:12:43,000 --> 00:12:45,000
就是说

373
00:12:45,000 --> 00:12:47,000
对我们这么过去时间间

374
00:12:47,000 --> 00:12:49,000
就在普及用的工具还是在进步

375
00:12:49,000 --> 00:12:53,000
不过我觉得可能离真正像普通人

376
00:12:53,000 --> 00:12:56,000
或者说像慕容老师这种不喜欢用工

377
00:12:56,000 --> 00:12:59,000
就不太喜欢花时间去学这种工具的人

378
00:12:59,000 --> 00:13:01,000
他可能还是有点困难

379
00:13:01,000 --> 00:13:03,000
比如说至少我们在日常用的时候

380
00:13:03,000 --> 00:13:05,000
很多那种 repro

381
00:13:05,000 --> 00:13:07,000
它还是有很多限制的

382
00:13:07,000 --> 00:13:08,000
比如你不能做很多事情

383
00:13:08,000 --> 00:13:12,000
而且对环境的 inspection

384
00:13:12,000 --> 00:13:16,000
就是检查的能力是有一定的限制的

385
00:13:16,000 --> 00:13:18,000
你不想说再早一点

386
00:13:18,000 --> 00:13:20,000
什么像 small talk 那种训计金

387
00:13:20,000 --> 00:13:22,000
那叫什么 scroll 对不对

388
00:13:22,000 --> 00:13:25,000
对 这自带一个合纸

389
00:13:25,000 --> 00:13:26,000
就是怎么说呢

390
00:13:26,000 --> 00:13:27,000
有点像 idee

391
00:13:27,000 --> 00:13:28,000
但又不是 idee 的

392
00:13:28,000 --> 00:13:33,000
对 但它的好就是说整个环境

393
00:13:33,000 --> 00:13:36,000
操作这种世界都是可以被 inspection

394
00:13:36,000 --> 00:13:38,000
而且是可以很方便的与法

395
00:13:38,000 --> 00:13:41,000
很统一的规则去做它

396
00:13:41,000 --> 00:13:44,000
所以历史上是确实曾经出现过那种

397
00:13:44,000 --> 00:13:47,000
所谓就哪怕是按现在的观点来看

398
00:13:47,000 --> 00:13:51,000
就是所谓惊为天人的这种工具的设计

399
00:13:51,000 --> 00:13:54,000
但是只是因为一些商业的

400
00:13:54,000 --> 00:13:56,000
或者是其他的原因没有流行起来

401
00:13:56,000 --> 00:14:01,000
所以现在我们还是在不断的去朝那个方向眼镜

402
00:14:01,000 --> 00:14:03,000
虽然还没有达到那个高度而已

403
00:14:04,000 --> 00:14:05,000
其实这也是一个很有意思的问题

404
00:14:05,000 --> 00:14:13,000
就是有时候我们很难说一个成功的事物

405
00:14:13,000 --> 00:14:15,000
就是因为它的技术比较优越

406
00:14:15,000 --> 00:14:17,000
而经常都不是这样子的

407
00:14:17,000 --> 00:14:18,000
特别是在技术界面

408
00:14:18,000 --> 00:14:19,000
因为我们不是一个说法

409
00:14:19,000 --> 00:14:21,000
叫做 worst is better

410
00:14:21,000 --> 00:14:22,000
就好像经常很多人吐槽说

411
00:14:22,000 --> 00:14:24,000
你的 GalinaX 这么流行

412
00:14:24,000 --> 00:14:26,000
但是你看一下你的 design 的设计

413
00:14:26,000 --> 00:14:28,000
很多地方是很不优雅的

414
00:14:28,000 --> 00:14:30,000
很不 unixy 的 对吧

415
00:14:30,000 --> 00:14:31,000
很恶心的

416
00:14:31,000 --> 00:14:33,000
但是反过来你说那些优雅的

417
00:14:33,000 --> 00:14:35,000
比较高干的东西却又往往流行不起来

418
00:14:35,000 --> 00:14:36,000
比如说 Planet

419
00:14:40,000 --> 00:14:42,000
甚至不说 Planet 这么比较冷门的东西

420
00:14:42,000 --> 00:14:45,000
在编程语言里面也是

421
00:14:45,000 --> 00:14:46,000
基本上是比较流行的语言

422
00:14:46,000 --> 00:14:48,000
往往是比较糟糕的语言

423
00:14:51,000 --> 00:14:52,000
讲话 听一下可以

424
00:14:53,000 --> 00:14:55,000
算了 我们就不举具体的势力

425
00:14:59,000 --> 00:14:59,000
对

426
00:14:59,000 --> 00:15:00,000
然后

427
00:15:00,000 --> 00:15:02,000
但是我也承认

428
00:15:02,000 --> 00:15:04,000
就是现在的编程工具

429
00:15:04,000 --> 00:15:06,000
虽然要比 10 年前好很多

430
00:15:06,000 --> 00:15:09,000
但它们仍旧没有能够好到一个

431
00:15:09,000 --> 00:15:10,000
就是怎么说的

432
00:15:10,000 --> 00:15:15,000
就是造成一个所谓范氏转化的地固

433
00:15:15,000 --> 00:15:17,000
就是没有说一个工具是如此的好用

434
00:15:17,000 --> 00:15:20,000
以至于整个编程界的

435
00:15:21,000 --> 00:15:23,000
整个编程的方法论都被颠覆了

436
00:15:24,000 --> 00:15:27,000
对了 还没有出现过这种东西

437
00:15:28,000 --> 00:15:29,000
就出现 曾经出现过

438
00:15:29,000 --> 00:15:33,000
但是没有被保留下来可以怎么讲

439
00:15:33,000 --> 00:15:33,000
对

440
00:15:33,000 --> 00:15:36,000
就好像有一个电影

441
00:15:36,000 --> 00:15:37,000
有个电影叫什么鉴语行动

442
00:15:37,000 --> 00:15:42,000
里面主角在编程的时候

443
00:15:42,000 --> 00:15:45,000
他编程的方法就是把一大堆方块拖来拖去

444
00:15:46,000 --> 00:15:48,000
然后而且是非常

445
00:15:49,000 --> 00:15:51,000
看起来同样很复杂

446
00:15:51,000 --> 00:15:52,000
但是你会觉得

447
00:15:52,000 --> 00:15:53,000
你会

448
00:15:53,000 --> 00:15:55,000
就是至少观众们会认为这是在编程

449
00:15:55,000 --> 00:15:58,000
但在程序上看来这是在解决方块

450
00:15:58,000 --> 00:15:59,000
还是怎样

451
00:16:00,000 --> 00:16:02,000
如果真的有那样的工具出现的话

452
00:16:02,000 --> 00:16:07,000
也许是一个非常颠覆性的创新之曲

453
00:16:08,000 --> 00:16:09,000
到那个时候也许

454
00:16:10,000 --> 00:16:14,000
沐阳大神们就可以比较无障碍的

455
00:16:15,000 --> 00:16:19,000
利用编程工具解决更

456
00:16:19,000 --> 00:16:21,000
怎么说的抽象的层次更高的问题

457
00:16:21,000 --> 00:16:25,000
而不是去操心这些细致默契

458
00:16:25,000 --> 00:16:28,000
比如说分号或者是缩进这些事情

459
00:16:29,000 --> 00:16:30,000
没错

460
00:16:30,000 --> 00:16:32,000
我觉得有时候我一直在想

461
00:16:32,000 --> 00:16:37,000
其实可能现在造成现在这种工具比较乱

462
00:16:37,000 --> 00:16:39,000
然后设计也不够优雅的局面

463
00:16:39,000 --> 00:16:41,000
是不是我有时候在想

464
00:16:41,000 --> 00:16:43,000
是不是应该等我们这批人死掉之后

465
00:16:43,000 --> 00:16:45,000
要从另外一批人重新来设计

466
00:16:45,000 --> 00:16:47,000
那么一些理念可能会好一点

467
00:16:47,000 --> 00:16:49,000
从娃娃抓起

468
00:16:49,000 --> 00:16:50,000
重新想一下

469
00:16:50,000 --> 00:16:53,000
怎么去教小朋友一个比较直观的

470
00:16:54,000 --> 00:16:57,000
或者说更加合理的抽象层级

471
00:16:58,000 --> 00:17:00,000
然后这样去去不去学会这种新的方式

472
00:17:00,000 --> 00:17:02,000
可能会有意思很多

473
00:17:02,000 --> 00:17:03,000
对

474
00:17:03,000 --> 00:17:04,000
有时候对

475
00:17:04,000 --> 00:17:06,000
有时候我其实刚刚也在想这个问题

476
00:17:06,000 --> 00:17:07,000
就是我想到

477
00:17:08,000 --> 00:17:11,000
虽然 60 年代的那一批计算机先驱门已经流门去了

478
00:17:11,000 --> 00:17:15,000
但是我们现在活着的计算机先驱门

479
00:17:15,000 --> 00:17:17,000
比如说 ROPEC

480
00:17:17,000 --> 00:17:22,000
还是在 Google 做一线的这种原开发动作

481
00:17:22,000 --> 00:17:26,000
但是我在想说我们能够和这些人

482
00:17:26,000 --> 00:17:28,000
仍旧在同一个时代是一种幸福

483
00:17:28,000 --> 00:17:30,000
但是如果再远一点

484
00:17:30,000 --> 00:17:31,000
比如说过个二三十年

485
00:17:31,000 --> 00:17:32,000
等这批人去了之后

486
00:17:33,000 --> 00:17:36,000
那个时候的编程的地平线

487
00:17:36,000 --> 00:17:37,000
会是什么样的

488
00:17:37,000 --> 00:17:38,000
什么样的风景

489
00:17:38,000 --> 00:17:39,000
可能会跟现在完全不一样

490
00:17:40,000 --> 00:17:43,000
就好像那天我做的内燃机的比喻

491
00:17:43,000 --> 00:17:44,000
也许我们现在用的就是内燃机

492
00:17:44,000 --> 00:17:49,000
也许过了二十年电动机出现的时候

493
00:17:49,000 --> 00:17:54,000
编程真的和现在我们所熟悉的这些工具

494
00:17:55,000 --> 00:17:56,000
就完全不一样

495
00:17:57,000 --> 00:18:00,000
而且这是一种很难想象的状态

496
00:18:00,000 --> 00:18:02,000
也许那时候我也不知道

497
00:18:02,000 --> 00:18:03,000
三进这些算机

498
00:18:03,000 --> 00:18:05,000
平衡三进这些计算机

499
00:18:05,000 --> 00:18:07,000
起码的人

500
00:18:07,000 --> 00:18:09,000
永远不会想到会飞的人是怎么样的

501
00:18:09,000 --> 00:18:11,000
一种心态对不对

502
00:18:11,000 --> 00:18:11,000
对

503
00:18:11,000 --> 00:18:16,000
就好像那些 19 世纪初期的科幻画

504
00:18:16,000 --> 00:18:18,000
想了幻想二世纪是什么样子

505
00:18:18,000 --> 00:18:20,000
那个时候想到二世纪说

506
00:18:20,000 --> 00:18:21,000
每个人都在天上飞

507
00:18:21,000 --> 00:18:27,000
然后天上飞的人会受到天上飞的交警的指挥

508
00:18:27,000 --> 00:18:28,000
可是他画出来

509
00:18:28,000 --> 00:18:30,000
那个会在天上飞的交警

510
00:18:30,000 --> 00:18:33,000
身上是一双翅膀

511
00:18:33,000 --> 00:18:35,000
而且还是在那边吹哨子

512
00:18:37,000 --> 00:18:41,000
如果现在有什么空中单人的交通工具的话

513
00:18:41,000 --> 00:18:45,000
那我相信去控制这种交通工具的规则

514
00:18:45,000 --> 00:18:46,000
肯定不会吹哨子吧

515
00:18:48,000 --> 00:18:50,000
因素已经太慢了

516
00:18:50,000 --> 00:18:50,000
对

517
00:18:50,000 --> 00:18:52,000
所以我们现在所做出的任何想象

518
00:18:52,000 --> 00:18:54,000
可能在那个时候看来都是非常幼稚

519
00:18:54,000 --> 00:18:55,000
可笑的

520
00:18:57,000 --> 00:18:59,000
但这争就拦不住我们去想

521
00:19:01,000 --> 00:19:01,000
好吧

522
00:19:01,000 --> 00:19:03,000
那个什么上期的 follow up

523
00:19:03,000 --> 00:19:04,000
就做到这里

524
00:19:04,000 --> 00:19:05,000
我们

525
00:19:05,000 --> 00:19:07,000
其实还有一个就是

526
00:19:08,000 --> 00:19:10,000
上期

527
00:19:10,000 --> 00:19:11,000
莫瑶说到

528
00:19:11,000 --> 00:19:14,000
比如说那个有些语言非常要求你

529
00:19:14,000 --> 00:19:15,000
什么

530
00:19:15,000 --> 00:19:16,000
注意

531
00:19:16,000 --> 00:19:17,000
分号

532
00:19:17,000 --> 00:19:17,000
缩进

533
00:19:17,000 --> 00:19:18,000
大小写之类的

534
00:19:18,000 --> 00:19:19,000
他有没有说大小写

535
00:19:19,000 --> 00:19:20,000
我不记得

536
00:19:20,000 --> 00:19:22,000
但是我前两天看了看那个 nim 语言

537
00:19:22,000 --> 00:19:24,000
就是新出的那个

538
00:19:24,000 --> 00:19:25,000
之前叫 Nimro 的

539
00:19:25,000 --> 00:19:27,000
然后现在的 nim 的语言

540
00:19:27,000 --> 00:19:29,000
这个语言有一很有趣的一点

541
00:19:29,000 --> 00:19:31,000
就是他

542
00:19:31,000 --> 00:19:33,000
区分一个标识服务的时候

543
00:19:33,000 --> 00:19:36,000
只区分第一个字母是不是大小写

544
00:19:36,000 --> 00:19:38,000
后面是无关的

545
00:19:38,000 --> 00:19:40,000
而且戴下华线也是无关的

546
00:19:42,000 --> 00:19:43,000
这有什么好处呢

547
00:19:43,000 --> 00:19:46,000
就是他列决的好处是

548
00:19:46,000 --> 00:19:51,000
比如说你的你写一个

549
00:19:51,000 --> 00:19:53,000
写一个程序要用到别人的库

550
00:19:53,000 --> 00:19:55,000
别人的库有一个他自己的辩量

551
00:19:55,000 --> 00:19:56,000
康文审

552
00:19:56,000 --> 00:19:59,000
然后或者说韩束康文审

553
00:19:59,000 --> 00:20:01,000
当你要调用那些韩束的时候

554
00:20:01,000 --> 00:20:04,000
你可以利用自己的康文审

555
00:20:04,000 --> 00:20:08,000
因为也是他用下华线做分合分隔服的

556
00:20:08,000 --> 00:20:09,000
而你喜欢 camel case

557
00:20:09,000 --> 00:20:12,000
那你可以在你的程序里面写 camel case

558
00:20:12,000 --> 00:20:14,000
成为那个编译器

559
00:20:14,000 --> 00:20:17,000
或自己去猜真正的标识服务是什么

560
00:20:18,000 --> 00:20:21,000
我觉得这是一个很有意思的 feature

561
00:20:21,000 --> 00:20:23,000
这是个区位

562
00:20:23,000 --> 00:20:23,000
对

563
00:20:23,000 --> 00:20:26,000
但可能从另外一个角度讲

564
00:20:26,000 --> 00:20:28,000
他也是在试图解决这样一种

565
00:20:28,000 --> 00:20:32,000
就是你可以再去忽略另外一个细节

566
00:20:32,000 --> 00:20:35,000
就是你不用去永远去刻意的注意

567
00:20:35,000 --> 00:20:36,000
大家解释

568
00:20:36,000 --> 00:20:39,000
然后你可以建议 feature 来保证自己的

569
00:20:39,000 --> 00:20:40,000
变成风格

570
00:20:40,000 --> 00:20:41,000
在内不是一致

571
00:20:44,000 --> 00:20:46,000
说一下最周发生的一些小新闻

572
00:20:46,000 --> 00:20:49,000
然后你也看到那个苹果发布会了

573
00:20:49,000 --> 00:20:50,000
好

574
00:20:50,000 --> 00:20:52,000
我们之前专门讨论过

575
00:20:52,000 --> 00:20:54,000
那个遥传中的新的 MacBook

576
00:20:54,000 --> 00:20:56,000
它其实不是 air

577
00:20:56,000 --> 00:20:57,000
就是 MacBook

578
00:20:57,000 --> 00:21:01,000
然后你对其实是很有确定的

579
00:21:01,000 --> 00:21:02,000
为什么 MacBook Air 还叫 MacBook Air

580
00:21:02,000 --> 00:21:05,000
然后新的更薄更 air 的

581
00:21:05,000 --> 00:21:07,000
反而叫 MacBook

582
00:21:07,000 --> 00:21:09,000
因为我后来是这么理解的

583
00:21:09,000 --> 00:21:13,000
就是因为现在 MacBook Pro

584
00:21:13,000 --> 00:21:14,000
它也变得很薄了

585
00:21:14,000 --> 00:21:17,000
所以以后就不分 air 就该讲

586
00:21:17,000 --> 00:21:20,000
薄是一个必然的属性

587
00:21:20,000 --> 00:21:22,000
然后只区分是否专业

588
00:21:22,000 --> 00:21:24,000
所以 MacBook Air 产品线可能过几年

589
00:21:24,000 --> 00:21:26,000
过两三年就直接就消失了

590
00:21:26,000 --> 00:21:27,000
OK

591
00:21:27,000 --> 00:21:27,000
对

592
00:21:27,000 --> 00:21:30,000
就只有 MacBook 和 MacBook Pro 这样的两个分页

593
00:21:30,000 --> 00:21:33,000
我就这样就是更清晰的一个结构

594
00:21:33,000 --> 00:21:35,000
然后如果你要比 MacBook 更薄的东西

595
00:21:35,000 --> 00:21:37,000
就只能去买 iPad 了

596
00:21:37,000 --> 00:21:38,000
对

597
00:21:38,000 --> 00:21:39,000
没错

598
00:21:39,000 --> 00:21:40,000
OK

599
00:21:40,000 --> 00:21:43,000
可以最重要的一件事情是

600
00:21:43,000 --> 00:21:46,000
Escape 键没有动

601
00:21:46,000 --> 00:21:47,000
对

602
00:21:47,000 --> 00:21:49,000
我觉得他们也应该是内部顶住了

603
00:21:49,000 --> 00:21:50,000
巨大压力

604
00:21:50,000 --> 00:21:53,000
我们现在不确定之前那个图上面

605
00:21:53,000 --> 00:21:56,000
Escape 键就是真的有原型机长那样

606
00:21:56,000 --> 00:21:59,000
就是挺值得怀疑的

607
00:21:59,000 --> 00:21:59,000
好吧

608
00:21:59,000 --> 00:22:00,000
说得也是

609
00:22:00,000 --> 00:22:02,000
也有可能内部从来没有出现过一个 Escape

610
00:22:02,000 --> 00:22:06,000
在这么让人天动人员的地方

611
00:22:06,000 --> 00:22:06,000
对

612
00:22:06,000 --> 00:22:08,000
就可能那个谁画图的时候

613
00:22:08,000 --> 00:22:09,000
不小心就画成那样了

614
00:22:09,000 --> 00:22:11,000
真的而已

615
00:22:11,000 --> 00:22:14,000
不过不管如何 Escape 键的位置没变

616
00:22:14,000 --> 00:22:15,000
而且还变大了

617
00:22:15,000 --> 00:22:17,000
这个是挺好的一件事

618
00:22:17,000 --> 00:22:19,000
因为你用过那个 11 寸的 MacBook Air 吗

619
00:22:19,000 --> 00:22:21,000
用我一次

620
00:22:21,000 --> 00:22:25,000
就是我有次借前公司的老板的办公练脑

621
00:22:25,000 --> 00:22:26,000
出过一次差

622
00:22:26,000 --> 00:22:29,000
但你们公司已经这么惨

623
00:22:29,000 --> 00:22:30,000
还有借老板的练脑出差

624
00:22:30,000 --> 00:22:32,000
因为我自己的电脑太大了

625
00:22:32,000 --> 00:22:33,000
太重了

626
00:22:33,000 --> 00:22:34,000
可以

627
00:22:34,000 --> 00:22:37,000
我觉得我不是很喜欢 MacBook Air

628
00:22:37,000 --> 00:22:40,000
就当然可能主要也是因为就是屏幕

629
00:22:40,000 --> 00:22:41,000
是他说他还小了

630
00:22:41,000 --> 00:22:42,000
11 寸的确实是很小

631
00:22:42,000 --> 00:22:44,000
13 寸的还是很小

632
00:22:44,000 --> 00:22:47,000
我觉得他边框也比较大了

633
00:22:47,000 --> 00:22:47,000
对

634
00:22:47,000 --> 00:22:49,000
所以你会觉得挺糟糕的

635
00:22:49,000 --> 00:22:53,000
特别是 11 寸 Escape 键特别小

636
00:22:53,000 --> 00:22:54,000
因为它那个半高

637
00:22:54,000 --> 00:22:57,000
不三分之一高的那个键吧

638
00:22:57,000 --> 00:22:59,000
然后而且还那么小一坨

639
00:22:59,000 --> 00:23:02,000
现在 MacBook Air 的 Escape 键变得很长

640
00:23:02,000 --> 00:23:05,000
然后我们作为一个 Wimd

641
00:23:05,000 --> 00:23:06,000
这件事是什么

642
00:23:06,000 --> 00:23:07,000
福音

643
00:23:07,000 --> 00:23:09,000
对

644
00:23:09,000 --> 00:23:11,000
所以你是要买一台

645
00:23:11,000 --> 00:23:14,000
如果我听上 3 ID 公论的

646
00:23:14,000 --> 00:23:15,000
印象没错

647
00:23:15,000 --> 00:23:16,000
OK

648
00:23:16,000 --> 00:23:18,000
因为我老婆那台想太好换

649
00:23:18,000 --> 00:23:19,000
她给他买一台顺便我玩一下

650
00:23:19,000 --> 00:23:22,000
到时候假设我要出门做些什么事情

651
00:23:22,000 --> 00:23:24,000
我就拿她那台去好了

652
00:23:24,000 --> 00:23:25,000
OK

653
00:23:25,000 --> 00:23:26,000
所以

654
00:23:26,000 --> 00:23:27,000
这就是顺便玩想的意思

655
00:23:27,000 --> 00:23:30,000
就是 80%的时间是你在用

656
00:23:30,000 --> 00:23:31,000
没有

657
00:23:31,000 --> 00:23:32,000
那个性能不太够

658
00:23:32,000 --> 00:23:33,000
它那个最高

659
00:23:33,000 --> 00:23:35,000
就内存是固定的 8 G

660
00:23:35,000 --> 00:23:36,000
不能再扩张了

661
00:23:36,000 --> 00:23:37,000
这就是比较一个淡藤一点

662
00:23:37,000 --> 00:23:40,000
8 G 真的不是很够

663
00:23:40,000 --> 00:23:43,000
因为这件事情其实还是挺麻烦的

664
00:23:43,000 --> 00:23:44,000
现在你看一下

665
00:23:44,000 --> 00:23:46,000
我们跑了很多软件的

666
00:23:46,000 --> 00:23:47,000
特别是 64 位之后

667
00:23:47,000 --> 00:23:51,000
那些很多软件的体积是就越来越大了

668
00:23:51,000 --> 00:23:52,000
而且现在开个网页

669
00:23:52,000 --> 00:23:53,000
动不动就击败

670
00:23:53,000 --> 00:23:56,000
一个 type 就击败照相一个 G 的

671
00:23:56,000 --> 00:23:58,000
所以还是 8 G

672
00:23:58,000 --> 00:23:59,000
你要再开虚拟机的话

673
00:23:59,000 --> 00:24:00,000
就肯定是不太

674
00:24:00,000 --> 00:24:01,000
有点捉金见肘吧

675
00:24:01,000 --> 00:24:02,000
至少

676
00:24:02,000 --> 00:24:03,000
对

677
00:24:04,000 --> 00:24:06,000
你那台是 106 的吗

678
00:24:06,000 --> 00:24:08,000
我现在这台是 16

679
00:24:08,000 --> 00:24:08,000
OK

680
00:24:08,000 --> 00:24:09,000
我也是 16 的

681
00:24:09,000 --> 00:24:11,000
所以现在就作为一个开发者的话

682
00:24:11,000 --> 00:24:14,000
可能还是要 16 才至少一够

683
00:24:14,000 --> 00:24:16,000
当然现在可能主要的平顶

684
00:24:16,000 --> 00:24:18,000
不是在内存上面

685
00:24:18,000 --> 00:24:20,000
就有时候跑一些比较大的游戏

686
00:24:20,000 --> 00:24:22,000
会风扇狂转

687
00:24:22,000 --> 00:24:24,000
它那个没有风扇了

688
00:24:24,000 --> 00:24:25,000
不是内存的问题

689
00:24:25,000 --> 00:24:26,000
对 我是说我现在这台

690
00:24:26,000 --> 00:24:28,000
OK

691
00:24:28,000 --> 00:24:29,000
如果买新的 MacBook

692
00:24:29,000 --> 00:24:31,000
应该就很多游戏又不懂玩了

693
00:24:32,000 --> 00:24:32,000
不知道

694
00:24:32,000 --> 00:24:34,000
它那款性能现在还没出来

695
00:24:34,000 --> 00:24:35,000
昨天我看了一下

696
00:24:35,000 --> 00:24:37,000
那个有网上有测评

697
00:24:37,000 --> 00:24:39,000
联想出了一款

698
00:24:39,000 --> 00:24:41,000
就出了一款那个什么

699
00:24:41,000 --> 00:24:43,000
联想不是有个本

700
00:24:43,000 --> 00:24:45,000
它可以变成平板用的那种 Bitzy 本吗

701
00:24:45,000 --> 00:24:47,000
就是本来的 convert

702
00:24:48,000 --> 00:24:49,000
差不多之类的

703
00:24:49,000 --> 00:24:50,000
它用的处理器

704
00:24:50,000 --> 00:24:52,000
我看了一下性能和参数

705
00:24:52,000 --> 00:24:53,000
应该是和

706
00:24:54,000 --> 00:24:57,000
新款的 MacBook 里面那款是差不多的

707
00:24:57,000 --> 00:24:58,000
我看了一下

708
00:24:58,000 --> 00:24:59,000
它在测评的性能

709
00:24:59,000 --> 00:25:03,000
其实跟 14 款的 MacBook Air 是差不多的

710
00:25:03,000 --> 00:25:04,000
我觉得还凑合了

711
00:25:04,000 --> 00:25:06,000
其实很多时候已经够用了

712
00:25:07,000 --> 00:25:09,000
只要你不是经常要编译

713
00:25:09,000 --> 00:25:12,000
什么编译 swift 的代码的话

714
00:25:12,000 --> 00:25:13,000
你只是做一些

715
00:25:13,000 --> 00:25:14,000
比如说像我用 Go 的话

716
00:25:14,000 --> 00:25:15,000
就编译很快

717
00:25:15,000 --> 00:25:16,000
就无所谓

718
00:25:16,000 --> 00:25:17,000
然后你说做 web 开发

719
00:25:17,000 --> 00:25:18,000
都是动态语言

720
00:25:18,000 --> 00:25:19,000
没有这个编译过程

721
00:25:19,000 --> 00:25:20,000
那也无所谓

722
00:25:20,000 --> 00:25:21,000
所以

723
00:25:21,000 --> 00:25:23,000
我觉得性能可能对大多数情况下

724
00:25:23,000 --> 00:25:25,000
也是错和够了

725
00:25:26,000 --> 00:25:27,000
好吧

726
00:25:27,000 --> 00:25:31,000
我觉得可能做 iOS 开发还是有点够强

727
00:25:31,000 --> 00:25:32,000
屏幕太小了吗

728
00:25:33,000 --> 00:25:37,000
我觉得 iOS 开发跑那个模拟器的时候

729
00:25:37,000 --> 00:25:38,000
其实还是挺

730
00:25:38,000 --> 00:25:39,000
挺质的

731
00:25:39,000 --> 00:25:40,000
对

732
00:25:40,000 --> 00:25:41,000
没错

733
00:25:41,000 --> 00:25:42,000
而且他们现在不是说这个事吗

734
00:25:42,000 --> 00:25:43,000
就是

735
00:25:44,000 --> 00:25:46,000
因为现在不是所有的 iOS 被都是所谓的

736
00:25:46,000 --> 00:25:47,000
Retina 分辨率

737
00:25:47,000 --> 00:25:48,000
就是两倍的

738
00:25:48,000 --> 00:25:49,000
那么你要在屏幕上

739
00:25:49,000 --> 00:25:51,000
真实还原一笔记的话

740
00:25:51,000 --> 00:25:52,000
你的屏幕要比大

741
00:25:52,000 --> 00:25:53,000
对

742
00:25:53,000 --> 00:25:54,000
现在如果你屏幕那么小的话

743
00:25:54,000 --> 00:25:56,000
就没有办法很好的还原

744
00:25:56,000 --> 00:25:58,000
它就模拟器装不下

745
00:25:58,000 --> 00:25:59,000
只能缩放

746
00:25:59,000 --> 00:26:00,000
就不是太好

747
00:26:00,000 --> 00:26:00,000
对

748
00:26:00,000 --> 00:26:02,000
但是我相信现在也有很多开发者

749
00:26:02,000 --> 00:26:03,000
就是他

750
00:26:03,000 --> 00:26:04,000
如果他真掉跑的话

751
00:26:04,000 --> 00:26:06,000
他就不在模拟器上跑

752
00:26:06,000 --> 00:26:06,000
直接接受

753
00:26:06,000 --> 00:26:07,000
就像真机吗

754
00:26:07,000 --> 00:26:08,000
对

755
00:26:08,000 --> 00:26:08,000
也是

756
00:26:08,000 --> 00:26:11,000
那个传输好像还是比较

757
00:26:11,000 --> 00:26:13,000
就是那个 cycle 还是比较长

758
00:26:13,000 --> 00:26:16,000
你要传到 iOS 上去

759
00:26:16,000 --> 00:26:17,000
然后你要马上看结果

760
00:26:17,000 --> 00:26:18,000
终于还是要等那么多

761
00:26:18,000 --> 00:26:19,000
可能一两分钟吧

762
00:26:19,000 --> 00:26:20,000
估计

763
00:26:22,000 --> 00:26:24,000
我的经历还好吧

764
00:26:24,000 --> 00:26:24,000
我觉得

765
00:26:24,000 --> 00:26:27,000
就可能要比在训练机里面

766
00:26:27,000 --> 00:26:30,000
慢那么

767
00:26:30,000 --> 00:26:31,000
最多 20 秒

768
00:26:31,000 --> 00:26:33,000
我觉得还是可以忍受的

769
00:26:33,000 --> 00:26:34,000
那也是很大的

770
00:26:34,000 --> 00:26:35,000
这个思考了

771
00:26:35,000 --> 00:26:36,000
不

772
00:26:36,000 --> 00:26:39,000
但到你到后期的时候

773
00:26:39,000 --> 00:26:42,000
我觉得大部分人可能会

774
00:26:43,000 --> 00:26:44,000
就怎么说的

775
00:26:44,000 --> 00:26:46,000
就回到那个回到我们之前讨论的

776
00:26:46,000 --> 00:26:47,000
repl

777
00:26:47,000 --> 00:26:48,000
在没有 repl 时代

778
00:26:48,000 --> 00:26:49,000
你可能要用头脑去模拟

779
00:26:50,000 --> 00:26:52,000
机器跑出来什么样子

780
00:26:52,000 --> 00:26:53,000
里面想是不是

781
00:26:53,000 --> 00:26:54,000
对

782
00:26:54,000 --> 00:26:55,000
我觉得到后期 iOS 开发

783
00:26:55,000 --> 00:27:01,000
其实很多人都是会花相对长的时间

784
00:27:01,000 --> 00:27:02,000
在细节

785
00:27:02,000 --> 00:27:05,000
然后真正看效果的时间

786
00:27:05,000 --> 00:27:08,000
可能只有开发时间的 10%不到

787
00:27:08,000 --> 00:27:10,000
但除非你在 dbg 的话

788
00:27:10,000 --> 00:27:13,000
那就是那样另说

789
00:27:13,000 --> 00:27:14,000
对

790
00:27:14,000 --> 00:27:15,000
没错

791
00:27:15,000 --> 00:27:16,000
对

792
00:27:16,000 --> 00:27:20,000
这个新版本还要一个挺大的事

793
00:27:20,000 --> 00:27:23,000
是他那个键盘的轴不一样了

794
00:27:23,000 --> 00:27:23,000
对

795
00:27:23,000 --> 00:27:24,000
蝴蝶轴什么概念

796
00:27:24,000 --> 00:27:26,000
你有概念吗

797
00:27:26,000 --> 00:27:29,000
我其实也没有很看懂

798
00:27:29,000 --> 00:27:32,000
这个蝴蝶轴它是这次才新发明

799
00:27:32,000 --> 00:27:33,000
之前是没有这种机制的

800
00:27:33,000 --> 00:27:34,000
是吧

801
00:27:34,000 --> 00:27:34,000
就没有

802
00:27:34,000 --> 00:27:35,000
之前是只有剪刀剿的

803
00:27:35,000 --> 00:27:36,000
对吧

804
00:27:36,000 --> 00:27:37,000
我说

805
00:27:37,000 --> 00:27:39,000
英国上就在其他人有用过这种说蝴蝶轴

806
00:27:39,000 --> 00:27:40,000
从来没有

807
00:27:40,000 --> 00:27:41,000
从来没有见过

808
00:27:41,000 --> 00:27:44,000
因为我看他说的应该是他们自己新发明的一种

809
00:27:44,000 --> 00:27:47,000
一种那个键盘轴的机制

810
00:27:47,000 --> 00:27:48,000
对

811
00:27:48,000 --> 00:27:49,000
然后他说这个有个好处

812
00:27:49,000 --> 00:27:50,000
就是说剪刀脚有个问题

813
00:27:50,000 --> 00:27:52,000
就是说如果你它会不平稳

814
00:27:52,000 --> 00:27:55,000
就是你说你按一个键的一个角落

815
00:27:55,000 --> 00:27:57,000
它会斜着下去

816
00:27:57,000 --> 00:27:58,000
有时候会触发不到

817
00:27:58,000 --> 00:27:59,000
对

818
00:27:59,000 --> 00:28:01,000
虽然我自己从来没有意识到这种情况

819
00:28:01,000 --> 00:28:03,000
但是我不知道这个是很常见的现象

820
00:28:03,000 --> 00:28:04,000
还是怎样

821
00:28:04,000 --> 00:28:08,000
就是你按你在按苹果的键盘上

822
00:28:08,000 --> 00:28:08,000
一个键的时候

823
00:28:08,000 --> 00:28:10,000
你会明显感觉到你按的时候

824
00:28:10,000 --> 00:28:12,000
键是随着你按的那一脚

825
00:28:12,000 --> 00:28:13,000
先开始下键

826
00:28:13,000 --> 00:28:16,000
然后其他部分一起才跟着现象

827
00:28:16,000 --> 00:28:18,000
但是不应该按那个键的中心位置

828
00:28:18,000 --> 00:28:20,000
你为什么会按那个边角的

829
00:28:22,000 --> 00:28:25,000
我倒是觉得在大部分时候

830
00:28:25,000 --> 00:28:26,000
你是不可能玩

831
00:28:26,000 --> 00:28:29,000
就是这样发现按到它的中心位置

832
00:28:29,000 --> 00:28:30,000
OK

833
00:28:30,000 --> 00:28:32,000
对我因为我自己从来没有留意到

834
00:28:32,000 --> 00:28:34,000
我有发出现过这种

835
00:28:34,000 --> 00:28:38,000
因为按到剪刀脚的某一个边

836
00:28:38,000 --> 00:28:40,000
而不是中心位置出发不了的情况

837
00:28:40,000 --> 00:28:41,000
所以我还挺好奇

838
00:28:41,000 --> 00:28:42,000
他在发布会说

839
00:28:42,000 --> 00:28:44,000
出发不了是肯定不会的

840
00:28:44,000 --> 00:28:48,000
但是剪刀脚所造成的问题就是

841
00:28:48,000 --> 00:28:50,000
你按那个键的时候

842
00:28:50,000 --> 00:28:51,000
你会觉得键

843
00:28:51,000 --> 00:28:52,000
怎么说呢

844
00:28:52,000 --> 00:28:54,000
我觉得这个区别是只有你在按上去的时候

845
00:28:54,000 --> 00:28:56,000
才会感觉到的

846
00:28:56,000 --> 00:28:58,000
就是你按一个

847
00:28:58,000 --> 00:29:03,000
比如说我在按 HHKB 的时候

848
00:29:03,000 --> 00:29:03,000
按一个键

849
00:29:03,000 --> 00:29:06,000
这个键本身是不会晃动的

850
00:29:06,000 --> 00:29:07,000
对吧

851
00:29:07,000 --> 00:29:10,000
就是我按键的最左上角

852
00:29:10,000 --> 00:29:12,000
整个键会随着我的手指一起下线

853
00:29:12,000 --> 00:29:15,000
但是你砸了一个剪刀脚的时候

854
00:29:15,000 --> 00:29:17,000
那个键的左上角会先下线

855
00:29:17,000 --> 00:29:19,000
然后其他部分才跟着下线

856
00:29:19,000 --> 00:29:20,000
没错

857
00:29:20,000 --> 00:29:21,000
是这样的

858
00:29:21,000 --> 00:29:23,000
就这个键上会有一定的所谓

859
00:29:23,000 --> 00:29:25,000
摇晃对吧

860
00:29:25,000 --> 00:29:25,000
对

861
00:29:25,000 --> 00:29:26,000
vobling space

862
00:29:26,000 --> 00:29:29,000
就是它会有一种不稳的感觉

863
00:29:29,000 --> 00:29:30,000
但是我相信

864
00:29:30,000 --> 00:29:32,000
它胡的脚所调解决的问题

865
00:29:32,000 --> 00:29:34,000
就是你不会再有这种感觉

866
00:29:34,000 --> 00:29:35,000
这个键就是实的

867
00:29:35,000 --> 00:29:36,000
然后你按下去一点

868
00:29:36,000 --> 00:29:38,000
整个键会跟着一起下线

869
00:29:39,000 --> 00:29:41,000
他们现场去测

870
00:29:41,000 --> 00:29:44,000
就是试用过那款新的 MacBook 的键盘

871
00:29:44,000 --> 00:29:46,000
那时候都说那个键程非常短

872
00:29:46,000 --> 00:29:48,000
因为它整个厚度降低了

873
00:29:48,000 --> 00:29:50,000
而且它胡蝶轴的

874
00:29:50,000 --> 00:29:52,000
本来的一个设计出动

875
00:29:52,000 --> 00:29:54,000
就是为了减低厚度

876
00:29:54,000 --> 00:29:54,000
对吧

877
00:29:54,000 --> 00:29:55,000
高度

878
00:29:55,000 --> 00:29:58,000
那我不太清楚这种键程极短的情况下

879
00:29:58,000 --> 00:30:01,000
对编程的时候的打字的手感

880
00:30:01,000 --> 00:30:03,000
会有什么变化

881
00:30:03,000 --> 00:30:07,000
你喜欢长键程还是短键程的按键键盘

882
00:30:09,000 --> 00:30:11,000
其实我不怎么调

883
00:30:11,000 --> 00:30:12,000
但我觉得

884
00:30:12,000 --> 00:30:13,000
对

885
00:30:13,000 --> 00:30:16,000
但我觉得就是在用触摩板的时候

886
00:30:16,000 --> 00:30:19,000
你可以理解为这个键程是零

887
00:30:19,000 --> 00:30:20,000
对吧

888
00:30:20,000 --> 00:30:22,000
那我不知道

889
00:30:22,000 --> 00:30:27,000
就是也许在配了触摩板的笔记本电脑上

890
00:30:27,000 --> 00:30:30,000
按一个键程比较短的键

891
00:30:30,000 --> 00:30:34,000
其感觉是不是至少被 iPad 好了

892
00:30:34,000 --> 00:30:37,000
就是你至少是有一点点键程的

893
00:30:37,000 --> 00:30:38,000
你在 iPad 上

894
00:30:38,000 --> 00:30:41,000
按讯息键盘的时候手感是非常差的

895
00:30:41,000 --> 00:30:42,000
对吧

896
00:30:42,000 --> 00:30:44,000
讯息键盘手感差有几个原因

897
00:30:44,000 --> 00:30:46,000
不光是它没有键程

898
00:30:46,000 --> 00:30:48,000
因为主要是一个是没有触觉的分隔

899
00:30:48,000 --> 00:30:50,000
你不知道你按的键了

900
00:30:50,000 --> 00:30:51,000
你不看的话

901
00:30:51,000 --> 00:30:51,000
对

902
00:30:51,000 --> 00:30:53,000
就是因为零键程所以才没有分隔

903
00:30:53,000 --> 00:30:54,000
不是吧

904
00:30:54,000 --> 00:30:57,000
就是我的意思是这两个其实是一回事

905
00:30:57,000 --> 00:30:59,000
你说这没有突出

906
00:30:59,000 --> 00:31:01,000
然后你没有下线

907
00:31:01,000 --> 00:31:01,000
对

908
00:31:01,000 --> 00:31:01,000
不

909
00:31:01,000 --> 00:31:03,000
就算是零键程的话

910
00:31:03,000 --> 00:31:04,000
它也是可以有分隔的

911
00:31:04,000 --> 00:31:07,000
就是我不知道你有没有用过

912
00:31:08,000 --> 00:31:09,000
微软 Surface

913
00:31:09,000 --> 00:31:11,000
它不是有两款键盘吗

914
00:31:11,000 --> 00:31:12,000
一款是所谓的

915
00:31:13,000 --> 00:31:14,000
叫什么

916
00:31:14,000 --> 00:31:15,000
Touch Cover

917
00:31:15,000 --> 00:31:15,000
对

918
00:31:15,000 --> 00:31:17,000
就是那个 Touch Cover 键盘吗

919
00:31:17,000 --> 00:31:18,000
它不是一个

920
00:31:18,000 --> 00:31:21,000
它是有分隔

921
00:31:21,000 --> 00:31:22,000
但是无键程的一个键盘

922
00:31:22,000 --> 00:31:23,000
你其实按的是一个

923
00:31:23,000 --> 00:31:25,000
对是一个平板

924
00:31:25,000 --> 00:31:27,000
然后它有一款叫做 Type Cover

925
00:31:27,000 --> 00:31:28,000
我记得

926
00:31:28,000 --> 00:31:30,000
然后我是用过那个键程也蛮短的

927
00:31:30,000 --> 00:31:32,000
然后我两款都试了一下

928
00:31:32,000 --> 00:31:34,000
都感觉不是很好

929
00:31:34,000 --> 00:31:35,000
就键程短

930
00:31:35,000 --> 00:31:37,000
这件事情本身是不是太好的

931
00:31:37,000 --> 00:31:39,000
就一切情况相同的情况下

932
00:31:39,000 --> 00:31:40,000
OK

933
00:31:40,000 --> 00:31:42,000
因为你就没有办法

934
00:31:42,000 --> 00:31:45,000
有时候你可能会觉得不确定

935
00:31:45,000 --> 00:31:46,000
按下去没有

936
00:31:46,000 --> 00:31:47,000
我觉得可能会这样

937
00:31:47,000 --> 00:31:48,000
会是这个原因

938
00:31:48,000 --> 00:31:49,000
但是他们说

939
00:31:49,000 --> 00:31:52,000
这个蝴蝶肘的有些其他的好处

940
00:31:52,000 --> 00:31:54,000
比如说它不会左右乱晃

941
00:31:54,000 --> 00:31:56,000
然后它打字也很

942
00:31:58,000 --> 00:32:01,000
他们说那个手感挺特别的

943
00:32:01,000 --> 00:32:02,000
我现在也没有打过

944
00:32:02,000 --> 00:32:03,000
我不知道到底是个什么手感

945
00:32:03,000 --> 00:32:05,000
我想很想去试一下

946
00:32:05,000 --> 00:32:06,000
但我又在想

947
00:32:06,000 --> 00:32:07,000
其实键程短

948
00:32:07,000 --> 00:32:10,000
反而不是应该能帮助你

949
00:32:10,000 --> 00:32:11,000
长时间打字

950
00:32:11,000 --> 00:32:13,000
这样用力会比较小

951
00:32:13,000 --> 00:32:13,000
是不是

952
00:32:15,000 --> 00:32:16,000
这个我觉得

953
00:32:16,000 --> 00:32:21,000
可能最终省下的力也只有一点点

954
00:32:21,000 --> 00:32:22,000
一牛

955
00:32:22,000 --> 00:32:22,000
打了一支天

956
00:32:22,000 --> 00:32:24,000
省了一牛的力

957
00:32:27,000 --> 00:32:28,000
对 我觉得这个键程

958
00:32:28,000 --> 00:32:29,000
可能更多带来了

959
00:32:29,000 --> 00:32:31,000
还是触觉触感上

960
00:32:31,000 --> 00:32:34,000
而真正的省力什么的

961
00:32:34,000 --> 00:32:37,000
都是非常服务的东西

962
00:32:37,000 --> 00:32:39,000
反过来说

963
00:32:39,000 --> 00:32:41,000
你可能你会觉得

964
00:32:41,000 --> 00:32:43,000
也许喜欢长剑城的人

965
00:32:43,000 --> 00:32:44,000
可以去用一个

966
00:32:44,000 --> 00:32:48,000
就前两天在推特人看到的 USB Typewriter

967
00:32:48,000 --> 00:32:51,000
打字转 USB 接口

968
00:32:51,000 --> 00:32:52,000
然后接电脑上打

969
00:32:52,000 --> 00:32:52,000
对

970
00:32:52,000 --> 00:32:54,000
我觉得这个时间是太怀旧了

971
00:32:54,000 --> 00:32:56,000
就是你可以去

972
00:32:56,000 --> 00:32:57,000
你给选择直接从这网站上

973
00:32:57,000 --> 00:33:00,000
买一台已经转化好的 Typewriter

974
00:33:00,000 --> 00:33:03,000
它是获振驾驶的打字机

975
00:33:03,000 --> 00:33:05,000
然后你可以把这个机械接到

976
00:33:05,000 --> 00:33:09,000
对 机械的打字机接到你的 USB 口上

977
00:33:09,000 --> 00:33:11,000
然后把打字机当做键盘的用法

978
00:33:11,000 --> 00:33:12,000
它原理是什么

979
00:33:12,000 --> 00:33:15,000
它是探测机械键的位移

980
00:33:15,000 --> 00:33:17,000
然后转成 USB 电信号吗

981
00:33:17,000 --> 00:33:21,000
对 其实就是如果你去看它的

982
00:33:21,000 --> 00:33:22,000
Convator Kits 的话

983
00:33:22,000 --> 00:33:25,000
就是如果你直接从这网站上买的

984
00:33:25,000 --> 00:33:26,000
比较贵

985
00:33:26,000 --> 00:33:28,000
可能 599 还是 699 美元一台

986
00:33:28,000 --> 00:33:30,000
但你可以买另外一个 Kits

987
00:33:30,000 --> 00:33:31,000
Kits 就是 99 美元

988
00:33:31,000 --> 00:33:33,000
然后里面有一大堆触板

989
00:33:33,000 --> 00:33:34,000
就是一个比较长条

990
00:33:34,000 --> 00:33:36,000
像梳子一样的东西

991
00:33:36,000 --> 00:33:38,000
和一个很小的

992
00:33:38,000 --> 00:33:39,000
应该不是阿卢 Eno

993
00:33:39,000 --> 00:33:41,000
是一个他们自己做了一个 IC 版

994
00:33:41,000 --> 00:33:49,000
你把那个长条的梳子一样的背板贴到机械打字机的后面

995
00:33:49,000 --> 00:33:54,000
然后再把那个 IC 电路塞在打字机的内部

996
00:33:54,000 --> 00:33:59,000
然后你就可以把它转化成一个 USB 打字机了

997
00:33:59,000 --> 00:34:00,000
其实它就是去探测

998
00:34:00,000 --> 00:34:03,000
因为你在按下一个打字机上面键的时候

999
00:34:03,000 --> 00:34:05,000
它后面会有一个东西抬起来

1000
00:34:05,000 --> 00:34:09,000
然后它就去感应哪个键抬起来了

1001
00:34:09,000 --> 00:34:12,000
然后把它转化为键盘

1002
00:34:12,000 --> 00:34:14,000
对 键按键

1003
00:34:14,000 --> 00:34:15,000
这也是听的

1004
00:34:15,000 --> 00:34:17,000
但其实那个很累的

1005
00:34:17,000 --> 00:34:21,000
打机械打字机的那个按键是很费力的

1006
00:34:21,000 --> 00:34:24,000
对 我小时候用打字机打印于作业的时候

1007
00:34:24,000 --> 00:34:27,000
就每天晚上打完了手指会疼的

1008
00:34:28,000 --> 00:34:29,000
你小时候手也小

1009
00:34:29,000 --> 00:34:32,000
而且那时候指法也不好

1010
00:34:32,000 --> 00:34:35,000
对只能用十指和中指再按

1011
00:34:35,000 --> 00:34:36,000
然后有些字母

1012
00:34:36,000 --> 00:34:40,000
如果你让我那时候我去用小指去按的话

1013
00:34:40,000 --> 00:34:40,000
永远是虚的

1014
00:34:40,000 --> 00:34:41,000
比如说 P 这类的

1015
00:34:41,000 --> 00:34:43,000
PQ 永远是虚的

1016
00:34:46,000 --> 00:34:47,000
这也是一种恶趣

1017
00:34:47,000 --> 00:34:50,000
对 就知道什么蒸汽朋克

1018
00:34:50,000 --> 00:34:53,000
机械朋克

1019
00:34:53,000 --> 00:34:55,000
打字机械朋克键盘

1020
00:34:56,000 --> 00:34:59,000
说到这个成续原用的笔记本

1021
00:34:59,000 --> 00:35:00,000
前两天 Google

1022
00:35:00,000 --> 00:35:01,000
应该不是前两天

1023
00:35:01,000 --> 00:35:04,000
就是苹果发布那个新款 MacBook 之后

1024
00:35:04,000 --> 00:35:07,000
第二天 Google 也发布了这个新款的

1025
00:35:07,000 --> 00:35:08,000
Chromebook Pixel

1026
00:35:08,000 --> 00:35:09,000
就是它那款

1027
00:35:09,000 --> 00:35:15,000
虽然官方配置只能用上网的一个笔记本

1028
00:35:15,000 --> 00:35:17,000
但是它的整个配置还是不错的

1029
00:35:17,000 --> 00:35:18,000
有一个高分频

1030
00:35:18,000 --> 00:35:20,000
然后也是 13 寸一个方头方脑的一个设计

1031
00:35:21,000 --> 00:35:24,000
然后我知道很多人

1032
00:35:24,000 --> 00:35:26,000
Linux 用户他选这个

1033
00:35:26,000 --> 00:35:28,000
然后他装那个

1034
00:35:28,000 --> 00:35:30,000
什么一种软件叫做 Chrometon

1035
00:35:30,000 --> 00:35:32,000
要是就可以在上面

1036
00:35:32,000 --> 00:35:36,000
在一个类似于这个 container 的环境里面跑

1037
00:35:36,000 --> 00:35:38,000
一个其他内核的

1038
00:35:38,000 --> 00:35:38,000
不叫其他内核

1039
00:35:38,000 --> 00:35:41,000
就其他的 Linux 的发新版

1040
00:35:41,000 --> 00:35:42,000
比如 Chrome 2 之类的

1041
00:35:42,000 --> 00:35:44,000
然后这样的话就有很多好处

1042
00:35:44,000 --> 00:35:47,000
因为 Chromebook 它本身是一个类似于 iOS 的设计

1043
00:35:47,000 --> 00:35:49,000
就整个它是杀核机制的

1044
00:35:49,000 --> 00:35:51,000
然后你没有办法去更改系统的东西

1045
00:35:51,000 --> 00:35:54,000
就安全性是有保障的

1046
00:35:54,000 --> 00:35:57,000
然后你在 container 里面再跑一个 Linux 发新版

1047
00:35:57,000 --> 00:35:58,000
你就弄坏了

1048
00:35:58,000 --> 00:36:00,000
再删掉重新来一个就好了

1049
00:36:00,000 --> 00:36:03,000
就很多人会选择这种方式来做

1050
00:36:03,000 --> 00:36:04,000
是

1051
00:36:04,000 --> 00:36:07,000
它那个版的唯一的问题就是

1052
00:36:07,000 --> 00:36:08,000
存储空间太小了

1053
00:36:08,000 --> 00:36:11,000
它最大只有 64 G 的 SSD

1054
00:36:11,000 --> 00:36:13,000
对 我觉得我也不知道

1055
00:36:13,000 --> 00:36:16,000
你见过身边的人在用 Chromebook 吗

1056
00:36:16,000 --> 00:36:18,000
我为什么我总有一种感觉

1057
00:36:18,000 --> 00:36:22,000
就是它是一个怎么三号叫好不叫错的生命

1058
00:36:22,000 --> 00:36:24,000
我没有见过有人自己花钱买它

1059
00:36:24,000 --> 00:36:26,000
然后但不过我有个朋友

1060
00:36:26,000 --> 00:36:28,000
他是前年去年

1061
00:36:28,000 --> 00:36:30,000
前年去那个 Google IOS 的时候

1062
00:36:30,000 --> 00:36:33,000
那年不是 Google 给去餐

1063
00:36:33,000 --> 00:36:34,000
或者是每个人送了一台吗

1064
00:36:34,000 --> 00:36:36,000
就是第一代的 Chromebook Pixel

1065
00:36:36,000 --> 00:36:37,000
然后他就拿了一台回来

1066
00:36:37,000 --> 00:36:38,000
我玩了一下

1067
00:36:38,000 --> 00:36:41,000
就整个做工和工艺还是无错的

1068
00:36:41,000 --> 00:36:41,000
我觉得

1069
00:36:41,000 --> 00:36:44,000
但是就是能做的事情感觉挺有限的

1070
00:36:44,000 --> 00:36:46,000
OK

1071
00:36:46,000 --> 00:36:48,000
因为它那个空间确实比较小

1072
00:36:48,000 --> 00:36:51,000
它那个是带 LTE 还是 4 G 网络的

1073
00:36:51,000 --> 00:36:51,000
对

1074
00:36:51,000 --> 00:36:53,000
它可以插那个信卡

1075
00:36:53,000 --> 00:36:55,000
这点比较有意思

1076
00:36:55,000 --> 00:36:56,000
对

1077
00:36:56,000 --> 00:36:59,000
其实我之前在想说

1078
00:36:59,000 --> 00:37:05,000
新的 Macbook 为什么不能直接内置 LTE Modem

1079
00:37:05,000 --> 00:37:09,000
因为它轻薄的程度

1080
00:37:09,000 --> 00:37:11,000
其实已经非常适合

1081
00:37:11,000 --> 00:37:12,000
就是带着到数跑

1082
00:37:12,000 --> 00:37:13,000
但是带着到数跑

1083
00:37:13,000 --> 00:37:14,000
有问题就是在没有网络的地方

1084
00:37:14,000 --> 00:37:15,000
比如说

1085
00:37:15,000 --> 00:37:16,000
它那个宣传广告里面

1086
00:37:16,000 --> 00:37:23,000
有一个女孩拿着她盘腿坐在一个公园旁边的长椅上

1087
00:37:23,000 --> 00:37:24,000
然后我就想说

1088
00:37:24,000 --> 00:37:25,000
她在网络哪里

1089
00:37:25,000 --> 00:37:28,000
那个苹果的解决方案是说

1090
00:37:28,000 --> 00:37:29,000
你只要有手机在旁边

1091
00:37:29,000 --> 00:37:32,000
可以通过无线的连接一个

1092
00:37:32,000 --> 00:37:33,000
TeeZerry

1093
00:37:33,000 --> 00:37:33,000
对

1094
00:37:33,000 --> 00:37:35,000
它可以做一个这个

1095
00:37:35,000 --> 00:37:36,000
好吧

1096
00:37:36,000 --> 00:37:36,000
我觉得还可以

1097
00:37:36,000 --> 00:37:40,000
因为其实你如果每一个设备都做一个信卡的话

1098
00:37:40,000 --> 00:37:43,000
你每个月的交给运营商的月费还是蛮多的

1099
00:37:43,000 --> 00:37:46,000
如果是偶尔的这种常常在使用的话

1100
00:37:46,000 --> 00:37:48,000
这样也没什么不好

1101
00:37:48,000 --> 00:37:52,000
之前用 TeeZerry 还比较麻烦

1102
00:37:52,000 --> 00:37:54,000
你要先配在手机上打开

1103
00:37:54,000 --> 00:37:55,000
然后你在电脑上连接一下

1104
00:37:55,000 --> 00:37:58,000
现在自从有 17 里面不是你可以直接

1105
00:37:58,000 --> 00:37:59,000
就只要你手机在旁边

1106
00:37:59,000 --> 00:38:00,000
你点那个 WiFi 的 logo 里面

1107
00:38:00,000 --> 00:38:02,000
就可以很方便的有一个选项

1108
00:38:02,000 --> 00:38:05,000
可以直接通过你的手机 iPhoneTeeZerry

1109
00:38:05,000 --> 00:38:07,000
所以就还好吧

1110
00:38:07,000 --> 00:38:10,000
而且所以现在就出门

1111
00:38:10,000 --> 00:38:12,000
你要真的经常来办公

1112
00:38:12,000 --> 00:38:14,000
除非你是去什么公园里面再说

1113
00:38:14,000 --> 00:38:15,000
就是说你是什么咖啡馆

1114
00:38:15,000 --> 00:38:17,000
就以 WiFi 地方还是太多了吧

1115
00:38:19,000 --> 00:38:19,000
说了也是

1116
00:38:19,000 --> 00:38:21,000
我感觉是这样子起码

1117
00:38:22,000 --> 00:38:25,000
你有 EVER 带着一个笔记本

1118
00:38:25,000 --> 00:38:27,000
出去办公这种事情吗

1119
00:38:27,000 --> 00:38:29,000
就是你觉得家里太憋

1120
00:38:29,000 --> 00:38:30,000
或者是外面阳光真好

1121
00:38:30,000 --> 00:38:31,000
想要一边写程序

1122
00:38:31,000 --> 00:38:33,000
一边享受阳光之类的

1123
00:38:33,000 --> 00:38:34,000
你做这种事情吗

1124
00:38:34,000 --> 00:38:37,000
夏天的时候我经常带出去在海边

1125
00:38:37,000 --> 00:38:37,000
因为我们在我们

1126
00:38:37,000 --> 00:38:39,000
我这个地方就是在靠海

1127
00:38:39,000 --> 00:38:42,000
我家离大西洋的直线距离

1128
00:38:42,000 --> 00:38:44,000
可能只有两三公里的样子

1129
00:38:45,000 --> 00:38:46,000
然后我就开车开到海边

1130
00:38:46,000 --> 00:38:48,000
找个这种稍微

1131
00:38:49,000 --> 00:38:51,000
就是视线比较好的地方

1132
00:38:51,000 --> 00:38:54,000
我就坐在那个附加的位置上

1133
00:38:54,000 --> 00:38:57,000
把那个椅子往后折

1134
00:38:57,000 --> 00:38:58,000
然后在那里办公

1135
00:38:58,000 --> 00:38:59,000
就是听着听

1136
00:38:59,000 --> 00:39:00,000
听着拍按的怒涛

1137
00:39:00,000 --> 00:39:02,000
然后我们这里面怒涛

1138
00:39:02,000 --> 00:39:04,000
只有小浪好吧

1139
00:39:04,000 --> 00:39:06,000
看着大西洋的浑浊海浪

1140
00:39:07,000 --> 00:39:08,000
大西洋是很难的

1141
00:39:08,000 --> 00:39:09,000
谢谢

1142
00:39:09,000 --> 00:39:10,000
不像太平洋

1143
00:39:10,000 --> 00:39:12,000
太平洋就很浑浪

1144
00:39:12,000 --> 00:39:13,000
太平洋更懒吧

1145
00:39:13,000 --> 00:39:13,000
应该

1146
00:39:13,000 --> 00:39:14,000
我不知道

1147
00:39:14,000 --> 00:39:16,000
我之前在

1148
00:39:16,000 --> 00:39:19,000
就起码在东国的海岸线上看的

1149
00:39:19,000 --> 00:39:21,000
的太平洋都是挺黄昏着的

1150
00:39:21,000 --> 00:39:23,000
那是因为中国的

1151
00:39:23,000 --> 00:39:25,000
就是河流

1152
00:39:25,000 --> 00:39:27,000
不对那边还比较显像

1153
00:39:27,000 --> 00:39:27,000
渤海

1154
00:39:27,000 --> 00:39:30,000
我们家南口渤海有时候会动上

1155
00:39:30,000 --> 00:39:32,000
就潜到这个礼部

1156
00:39:32,000 --> 00:39:33,000
OK

1157
00:39:33,000 --> 00:39:36,000
蓝海其实就是足够深的地方都是蓝色

1158
00:39:36,000 --> 00:39:36,000
这个没什么

1159
00:39:36,000 --> 00:39:37,000
那我们这边可能就是很深的

1160
00:39:37,000 --> 00:39:40,000
我去看都是一帮无击那种

1161
00:39:40,000 --> 00:39:42,000
就之前是照片上看到的蓝

1162
00:39:42,000 --> 00:39:44,000
现在就是我们家旁边的这种蓝

1163
00:39:44,000 --> 00:39:45,000
OK

1164
00:39:45,000 --> 00:39:46,000
好吧

1165
00:39:46,000 --> 00:39:48,000
我好像我很少干这种事情

1166
00:39:48,000 --> 00:39:51,000
就是带着一个笔本出去办公

1167
00:39:51,000 --> 00:39:52,000
我觉得

1168
00:39:52,000 --> 00:39:54,000
之前我不是看到一个德国人

1169
00:39:54,000 --> 00:39:56,000
他说他都不要

1170
00:39:56,000 --> 00:39:59,000
他是做好像开发那种

1171
00:39:59,000 --> 00:40:02,000
他是在那种主机上

1172
00:40:02,000 --> 00:40:05,000
不是主机就是服务器上开发那种

1173
00:40:05,000 --> 00:40:06,000
科学计算能应用的人

1174
00:40:06,000 --> 00:40:08,000
他都直接不要笔记本了

1175
00:40:08,000 --> 00:40:10,000
他就带个 iPad 上带个蓝牙键盘出门

1176
00:40:10,000 --> 00:40:13,000
然后 iPad 有那个什么有司机

1177
00:40:13,000 --> 00:40:15,000
他就在那个什么公园里面找个

1178
00:40:15,000 --> 00:40:17,000
找个凳子坐上

1179
00:40:17,000 --> 00:40:20,000
然后就是工业部长椅那种木顿

1180
00:40:20,000 --> 00:40:21,000
然后他就把那个拿出来

1181
00:40:21,000 --> 00:40:22,000
然后通过要提上

1182
00:40:22,000 --> 00:40:24,000
他反正只需要那个 ssh 就过去

1183
00:40:24,000 --> 00:40:26,000
所有软件都可以在那个服务器上有

1184
00:40:29,000 --> 00:40:32,000
他如果只是纯 console 下面变成的话

1185
00:40:32,000 --> 00:40:34,000
这样的确是可取的

1186
00:40:34,000 --> 00:40:36,000
但你只要稍微接触掉

1187
00:40:36,000 --> 00:40:38,000
接触到任何非 console 的东西

1188
00:40:38,000 --> 00:40:39,000
那 iPad 直接就废了

1189
00:40:39,000 --> 00:40:40,000
我觉得

1190
00:40:40,000 --> 00:40:42,000
但你要在本地做事情

1191
00:40:42,000 --> 00:40:43,000
那肯定是不可取的

1192
00:40:43,000 --> 00:40:45,000
除非你要除非你

1193
00:40:45,000 --> 00:40:47,000
现在 iPad 上面有 xwindow 的

1194
00:40:47,000 --> 00:40:50,000
xwindow 的科物端吗

1195
00:40:50,000 --> 00:40:50,000
没有吧

1196
00:40:50,000 --> 00:40:52,000
我不太清楚

1197
00:40:52,000 --> 00:40:54,000
不过有那个有那个叫什么

1198
00:40:54,000 --> 00:40:55,000
remote vnc

1199
00:40:55,000 --> 00:40:57,000
对 vnc 的这种东西

1200
00:40:57,000 --> 00:40:58,000
然后鼠标怎么

1201
00:40:58,000 --> 00:41:02,000
就是你用点屏幕了

1202
00:41:03,000 --> 00:41:07,000
你要用鼠标肯定就熟了

1203
00:41:07,000 --> 00:41:09,000
听起来有点淡的

1204
00:41:09,000 --> 00:41:14,000
或者用纯键盘的窗口玩理器应该也可以

1205
00:41:14,000 --> 00:41:16,000
对你不是反正 vm 大部分的时候

1206
00:41:16,000 --> 00:41:19,000
都像 vm 的 kband 应该也差不多合适了

1207
00:41:19,000 --> 00:41:20,000
我觉得

1208
00:41:21,000 --> 00:41:21,000
好吧

1209
00:41:21,000 --> 00:41:23,000
下次可以试试看

1210
00:41:23,000 --> 00:41:24,000
你不信手机是什么

1211
00:41:24,000 --> 00:41:25,000
你没有吧

1212
00:41:25,000 --> 00:41:25,000
对

1213
00:41:25,000 --> 00:41:26,000
我是一个

1214
00:41:26,000 --> 00:41:27,000
我觉得如果出门的话

1215
00:41:27,000 --> 00:41:28,000
就不要办公

1216
00:41:28,000 --> 00:41:30,000
如果办公的话就不要出门

1217
00:41:30,000 --> 00:41:31,000
那你想换个环境

1218
00:41:31,000 --> 00:41:33,000
散散心怎么办

1219
00:41:33,000 --> 00:41:34,000
那就不办公

1220
00:41:34,000 --> 00:41:36,000
想散心的时候散心

1221
00:41:36,000 --> 00:41:40,000
那什么叫什么李大超的那篇文章

1222
00:41:40,000 --> 00:41:42,000
玩就玩个痛快

1223
00:41:42,000 --> 00:41:43,000
学就学个舒服

1224
00:41:43,000 --> 00:41:46,000
不是学就学个舒服

1225
00:41:46,000 --> 00:41:47,000
学就学个什么太着

1226
00:41:47,000 --> 00:41:50,000
然后玩就玩个痛快

1227
00:41:50,000 --> 00:41:51,000
该干嘛

1228
00:41:51,000 --> 00:41:53,000
玩 playing

1229
00:41:53,000 --> 00:41:54,000
对

1230
00:41:54,000 --> 00:41:56,000
就不要又想轻松

1231
00:41:56,000 --> 00:41:59,000
又想要办公就站着

1232
00:41:59,000 --> 00:42:02,000
然后敲一台机械砖

1233
00:42:02,000 --> 00:42:05,000
用一个用一台 power mac

1234
00:42:05,000 --> 00:42:06,000
然后要出去就什么

1235
00:42:06,000 --> 00:42:08,000
又不有什么都不要带

1236
00:42:08,000 --> 00:42:09,000
那如果你是这种人的话

1237
00:42:09,000 --> 00:42:11,000
你为什么买个笔记本呢

1238
00:42:11,000 --> 00:42:13,000
因为我并不具备

1239
00:42:13,000 --> 00:42:19,000
上不具备一个可以装 power mac 的办公室

1240
00:42:19,000 --> 00:42:20,000
我觉得

1241
00:42:21,000 --> 00:42:21,000
不不

1242
00:42:21,000 --> 00:42:23,000
你可以用那个什么 iMac 之类的呀

1243
00:42:24,000 --> 00:42:29,000
我之前的确是在 iMac 和 power

1244
00:42:29,000 --> 00:42:32,000
和 mvp 之间

1245
00:42:32,000 --> 00:42:35,000
有预理站

1246
00:42:35,000 --> 00:42:37,000
因为那个时候我正要从一个城市

1247
00:42:37,000 --> 00:42:38,000
搬到另外一城市

1248
00:42:38,000 --> 00:42:40,000
就是考虑到自己可能进行办公室

1249
00:42:40,000 --> 00:42:41,000
对

1250
00:42:41,000 --> 00:42:41,000
对

1251
00:42:41,000 --> 00:42:42,000
然后现在对

1252
00:42:42,000 --> 00:42:43,000
对

1253
00:42:43,000 --> 00:42:45,000
然后那个时候正考虑说

1254
00:42:45,000 --> 00:42:46,000
如果搬到女朋友那边去住

1255
00:42:46,000 --> 00:42:48,000
然后可能暂时不会有一个办公室

1256
00:42:48,000 --> 00:42:50,000
事实上我现在的确没有一个办公室

1257
00:42:50,000 --> 00:42:51,000
所以可能

1258
00:42:51,000 --> 00:42:52,000
还是

1259
00:42:53,000 --> 00:42:55,000
有的带笔记本比较方便

1260
00:42:55,000 --> 00:42:56,000
就起码

1261
00:42:56,000 --> 00:42:59,000
它在整个体积上还是可以小一些

1262
00:42:59,000 --> 00:43:02,000
然后拿走的话也方便一点

1263
00:43:02,000 --> 00:43:03,000
其实我也是这样

1264
00:43:03,000 --> 00:43:05,000
我的笔记本大部分都是放在桌上

1265
00:43:05,000 --> 00:43:07,000
然后接显示器

1266
00:43:07,000 --> 00:43:08,000
然后查各种线

1267
00:43:08,000 --> 00:43:10,000
就当桌面机

1268
00:43:10,000 --> 00:43:12,000
就什么 desktop replacement

1269
00:43:12,000 --> 00:43:13,000
对

1270
00:43:13,000 --> 00:43:15,000
因为就我觉得 Mac Pro

1271
00:43:15,000 --> 00:43:16,000
其实有点就是

1272
00:43:16,000 --> 00:43:18,000
如果你出去旅游的时候

1273
00:43:18,000 --> 00:43:19,000
要带它还是不带它的

1274
00:43:19,000 --> 00:43:22,000
就不带它写呀

1275
00:43:22,000 --> 00:43:22,000
对呀

1276
00:43:22,000 --> 00:43:26,000
但如果我有一台 iMac 和一台新的那个

1277
00:43:26,000 --> 00:43:26,000
MacBook 的话

1278
00:43:26,000 --> 00:43:29,000
那我可能会毫无有一种带上

1279
00:43:29,000 --> 00:43:29,000
对

1280
00:43:29,000 --> 00:43:30,000
因为小嘛

1281
00:43:30,000 --> 00:43:31,000
对

1282
00:43:32,000 --> 00:43:36,000
所以还是可能我们这种情况比较特殊的话

1283
00:43:36,000 --> 00:43:38,000
有很多这种所谓的这种白领

1284
00:43:38,000 --> 00:43:40,000
他可能经常需要去开会

1285
00:43:40,000 --> 00:43:42,000
办公之类的想法

1286
00:43:42,000 --> 00:43:45,000
他就需要拿一台电脑

1287
00:43:45,000 --> 00:43:46,000
然后 iPad 又不行

1288
00:43:46,000 --> 00:43:50,000
这时候那种轻薄的笔记本就有的

1289
00:43:50,000 --> 00:43:51,000
就是一个必须的选项

1290
00:43:51,000 --> 00:43:52,000
没错

1291
00:43:52,000 --> 00:43:55,000
今天主题是什么

1292
00:43:55,000 --> 00:43:59,000
今天的主题是并发和异步

1293
00:43:59,000 --> 00:44:01,000
听起来是不是就

1294
00:44:01,000 --> 00:44:01,000
等一下

1295
00:44:01,000 --> 00:44:02,000
这时候是不是又太干了

1296
00:44:02,000 --> 00:44:05,000
并发和异步

1297
00:44:05,000 --> 00:44:07,000
其实我们可以讲的比较

1298
00:44:07,000 --> 00:44:08,000
泛一点的

1299
00:44:08,000 --> 00:44:11,000
比较浅入浅出一点

1300
00:44:11,000 --> 00:44:13,000
就是货金

1301
00:44:13,000 --> 00:44:16,000
货金不是在时间间设计里面说

1302
00:44:16,000 --> 00:44:18,000
你在书面加一个公式

1303
00:44:18,000 --> 00:44:20,000
你的读者就会少一半

1304
00:44:20,000 --> 00:44:22,000
每多加一个公式

1305
00:44:22,000 --> 00:44:24,000
你的读者就会少一半

1306
00:44:24,000 --> 00:44:26,000
所以我们想可能是

1307
00:44:26,000 --> 00:44:27,000
我们每次

1308
00:44:27,000 --> 00:44:30,000
我们每增加一个数语

1309
00:44:30,000 --> 00:44:31,000
可能听中就会少一半

1310
00:44:31,000 --> 00:44:34,000
比如说上一期编程与数学

1311
00:44:34,000 --> 00:44:38,000
可能已经限定了很多

1312
00:44:38,000 --> 00:44:41,000
听很多对数学和编程不感性的听中是不会听

1313
00:44:41,000 --> 00:44:44,000
当然对数学和编程不感性的听中

1314
00:44:44,000 --> 00:44:44,000
为什么要听呢

1315
00:44:44,000 --> 00:44:46,000
没错

1316
00:44:46,000 --> 00:44:50,000
他们还可以听慕扬老师的声音吗

1317
00:44:50,000 --> 00:44:51,000
说点事

1318
00:44:53,000 --> 00:44:56,000
我们应该把慕扬专门挖了

1319
00:44:56,000 --> 00:44:58,000
挖到 ipen 来单独做一档节目

1320
00:44:58,000 --> 00:45:00,000
各位听说怎么样

1321
00:45:00,000 --> 00:45:02,000
然后粉丝全过去了

1322
00:45:02,000 --> 00:45:03,000
我们就没剩几个一段

1323
00:45:03,000 --> 00:45:06,000
对 此处应该插入幼儿园的

1324
00:45:06,000 --> 00:45:07,000
所有小朋友的 mv 说

1325
00:45:07,000 --> 00:45:08,000
好

1326
00:45:11,000 --> 00:45:12,000
对

1327
00:45:12,000 --> 00:45:13,000
好

1328
00:45:13,000 --> 00:45:14,000
好

1329
00:45:15,000 --> 00:45:16,000
也

1330
00:45:16,000 --> 00:45:16,000
对

1331
00:45:16,000 --> 00:45:17,000
好吧

1332
00:45:17,000 --> 00:45:19,000
所以并发和异形

1333
00:45:19,000 --> 00:45:20,000
其实是两个概念

1334
00:45:20,000 --> 00:45:21,000
不

1335
00:45:21,000 --> 00:45:23,000
并发和异步

1336
00:45:23,000 --> 00:45:24,000
对吧

1337
00:45:24,000 --> 00:45:27,000
concurrent 和 palvel

1338
00:45:27,000 --> 00:45:29,000
OK 先讲并发这一块

1339
00:45:29,000 --> 00:45:29,000
对

1340
00:45:29,000 --> 00:45:32,000
并发和并形

1341
00:45:32,000 --> 00:45:34,000
这个数语其实有点很纠结的

1342
00:45:34,000 --> 00:45:36,000
我觉得没有一个很清晰的

1343
00:45:36,000 --> 00:45:39,000
就起码中文没有一个很清晰的概念

1344
00:45:39,000 --> 00:45:40,000
就是 concurrent

1345
00:45:40,000 --> 00:45:43,000
那你以为两个是两个完全不一样的词吗

1346
00:45:43,000 --> 00:45:44,000
对吧

1347
00:45:44,000 --> 00:45:45,000
但是在中文里面

1348
00:45:45,000 --> 00:45:47,000
比如说并发和并形有什么太大区别

1349
00:45:47,000 --> 00:45:48,000
好像也没有

1350
00:45:48,000 --> 00:45:49,000
但我觉得

1351
00:45:49,000 --> 00:45:50,000
就是怎么说

1352
00:45:50,000 --> 00:45:52,000
有人软件共生没有很多词汇

1353
00:45:52,000 --> 00:45:53,000
都是这样

1354
00:45:53,000 --> 00:45:53,000
而且

1355
00:45:53,000 --> 00:45:55,000
你说 concurrent 和 palvel

1356
00:45:55,000 --> 00:45:59,000
在英文里面的区别是每一个成学员都了解的吗

1357
00:45:59,000 --> 00:46:00,000
肯定也不是

1358
00:46:00,000 --> 00:46:04,000
甚至连词典的定义都是非常接近

1359
00:46:04,000 --> 00:46:06,000
你说都没有一个很严格的区分

1360
00:46:06,000 --> 00:46:07,000
到底哪个是哪个

1361
00:46:07,000 --> 00:46:08,000
对

1362
00:46:08,000 --> 00:46:12,000
但是我觉得可能在软件间有很多这样的问题

1363
00:46:12,000 --> 00:46:16,000
比如说 argument 和 parameter 的差别

1364
00:46:16,000 --> 00:46:18,000
可能有很多时候也会回忆

1365
00:46:18,000 --> 00:46:20,000
就看于近

1366
00:46:20,000 --> 00:46:22,000
就是大部分时候是不分的

1367
00:46:22,000 --> 00:46:23,000
我觉得

1368
00:46:23,000 --> 00:46:24,000
对

1369
00:46:24,000 --> 00:46:25,000
但

1370
00:46:25,000 --> 00:46:28,000
具体到这一期的话题上来说

1371
00:46:28,000 --> 00:46:33,000
我觉得可能正确的区分 concurrents 和 parameter 也是

1372
00:46:33,000 --> 00:46:35,000
就接下来的讨论比较重要的事情

1373
00:46:35,000 --> 00:46:36,000
甚至可以说

1374
00:46:36,000 --> 00:46:38,000
如果我们这期节目可以让

1375
00:46:38,000 --> 00:46:41,000
可以帮助听过的人

1376
00:46:41,000 --> 00:46:45,000
确切的了解了 concurrents 和 parameter 之间的差别

1377
00:46:45,000 --> 00:46:49,000
那可能已经是很有好处

1378
00:46:49,000 --> 00:46:51,000
很有成功的一件事

1379
00:46:51,000 --> 00:46:54,000
所以我们现在把范围说得很窄

1380
00:46:54,000 --> 00:46:56,000
就是我们在这里讲的并发和并行

1381
00:46:56,000 --> 00:46:57,000
但对应的两个词

1382
00:46:57,000 --> 00:47:01,000
就是 concurrent 和 parameter 这两个词的时候是讲在

1383
00:47:01,000 --> 00:47:03,000
叫什么

1384
00:47:03,000 --> 00:47:05,000
多现成

1385
00:47:05,000 --> 00:47:10,000
或者说在程序语言的构建的时候的一个场景

1386
00:47:10,000 --> 00:47:12,000
至于说场景以外

1387
00:47:12,000 --> 00:47:13,000
你要怎么去用这两个词

1388
00:47:13,000 --> 00:47:15,000
那就随你便吧

1389
00:47:15,000 --> 00:47:17,000
对

1390
00:47:17,000 --> 00:47:19,000
所以什么是 concurrents

1391
00:47:19,000 --> 00:47:22,000
什么是并发

1392
00:47:22,000 --> 00:47:24,000
concurrents 我是这么理解的

1393
00:47:24,000 --> 00:47:27,000
就是说它是一种思维方式

1394
00:47:27,000 --> 00:47:31,000
就是说它你是怎么去在逻辑上去构建一个东西

1395
00:47:31,000 --> 00:47:37,000
是它两个之间是可以没有一个先后顺序的依赖关系的

1396
00:47:37,000 --> 00:47:39,000
我怎么解释可不是合理

1397
00:47:39,000 --> 00:47:40,000
或者是清晰

1398
00:47:40,000 --> 00:47:41,000
但我是这么理解的

1399
00:47:41,000 --> 00:47:42,000
OK

1400
00:47:42,000 --> 00:47:44,000
那什么是 parallel

1401
00:47:44,000 --> 00:47:45,000
什么是并行

1402
00:47:45,000 --> 00:47:46,000
并行的话

1403
00:47:46,000 --> 00:47:50,000
就是说这个是我相对于刚才那一讲

1404
00:47:50,000 --> 00:47:51,000
是在逻辑层面的话

1405
00:47:51,000 --> 00:47:53,000
concurrents 在逻辑层面的一个概念的话

1406
00:47:53,000 --> 00:47:56,000
并行可能就是在一个物理层面的一个概念

1407
00:47:56,000 --> 00:48:00,000
就是说在逻辑上并发的东西

1408
00:48:00,000 --> 00:48:02,000
在物理上它并不一定是在并行

1409
00:48:02,000 --> 00:48:04,000
只行它也可以是先做一个后做一个

1410
00:48:04,000 --> 00:48:07,000
只是说它这个先后是没有太大关系的

1411
00:48:07,000 --> 00:48:08,000
就谁先谁后都一样

1412
00:48:08,000 --> 00:48:12,000
但是并就是在实现层面的并行的话

1413
00:48:12,000 --> 00:48:16,000
就是说它两个是在物理事件中同时发生的

1414
00:48:16,000 --> 00:48:17,000
OK

1415
00:48:17,000 --> 00:48:18,000
这样解释可以吗

1416
00:48:18,000 --> 00:48:21,000
我觉得应该是可以的

1417
00:48:21,000 --> 00:48:22,000
就是怎么说的

1418
00:48:22,000 --> 00:48:28,000
就是有一句就是 ROPEC 曾经做过一个对 go long 的

1419
00:48:28,000 --> 00:48:33,000
go routine 的 power plan 上叫什么

1420
00:48:33,000 --> 00:48:35,000
换能片对

1421
00:48:35,000 --> 00:48:38,000
对换能片在网上可以得到

1422
00:48:38,000 --> 00:48:42,000
然后它对于并发和并行的定义是

1423
00:48:42,000 --> 00:48:46,000
并发是同一时间应对多件事情的能力

1424
00:48:46,000 --> 00:48:50,000
就 dealing with a lot of things

1425
00:48:50,000 --> 00:48:52,000
而并行的就是 power line

1426
00:48:52,000 --> 00:48:56,000
则是同一时间动手去做很多件事情的能力

1427
00:48:56,000 --> 00:48:58,000
但是这里你只要解释什么是

1428
00:48:58,000 --> 00:49:02,000
什么是应对和什么是做对吧

1429
00:49:02,000 --> 00:49:08,000
我觉得可以理解为就是这两个概念的抽象层级是不一样的

1430
00:49:08,000 --> 00:49:13,000
并发或说他们描述的问题的领域是不一样

1431
00:49:13,000 --> 00:49:18,000
所谓并发 concurrency 指的是一个比较

1432
00:49:20,000 --> 00:49:24,000
在问题领域的概念

1433
00:49:24,000 --> 00:49:25,000
就是你有很多问题

1434
00:49:25,000 --> 00:49:27,000
你需要去解决这些问题

1435
00:49:27,000 --> 00:49:30,000
而这些问题的发生是同时发生的

1436
00:49:30,000 --> 00:49:33,000
你就可以说我要

1437
00:49:33,000 --> 00:49:37,000
我所面对的问题有 concurrency 的特征

1438
00:49:37,000 --> 00:49:41,000
而 power line 则是在你实际去做一件事情的时候

1439
00:49:41,000 --> 00:49:46,000
比如说你要去解决一个并发的问题

1440
00:49:46,000 --> 00:49:48,000
你怎么去解决它

1441
00:49:48,000 --> 00:49:48,000
好

1442
00:49:48,000 --> 00:49:51,000
你可以使用并情的手段去解决它

1443
00:49:54,000 --> 00:49:55,000
我大概理解你意思

1444
00:49:55,000 --> 00:49:58,000
但是我觉得听墙有点是好

1445
00:49:58,000 --> 00:49:58,000
对吧

1446
00:49:58,000 --> 00:49:59,000
比如说

1447
00:49:59,000 --> 00:50:03,000
或者说我们还是举例子来解释好了

1448
00:50:03,000 --> 00:50:04,000
比如说

1449
00:50:06,000 --> 00:50:10,000
我在做一些事情的时候需要去做另外一事情

1450
00:50:10,000 --> 00:50:11,000
比如说我要做饭

1451
00:50:11,000 --> 00:50:11,000
好

1452
00:50:11,000 --> 00:50:14,000
但是我的碗还没洗

1453
00:50:14,000 --> 00:50:14,000
锅也没刷

1454
00:50:14,000 --> 00:50:16,000
那我要先刷锅

1455
00:50:16,000 --> 00:50:17,000
再洗碗

1456
00:50:17,000 --> 00:50:18,000
然后再切菜

1457
00:50:18,000 --> 00:50:20,000
然后再把油倒进锅里

1458
00:50:20,000 --> 00:50:21,000
然后开始炒菜

1459
00:50:21,000 --> 00:50:22,000
然后再装盘

1460
00:50:23,000 --> 00:50:24,000
所有这些事情可以理解为

1461
00:50:24,000 --> 00:50:27,000
我是有些事情是可以同时做的

1462
00:50:27,000 --> 00:50:27,000
对吧

1463
00:50:27,000 --> 00:50:31,000
比如说我可以先洗一部分碗

1464
00:50:31,000 --> 00:50:32,000
然后先把锅洗了

1465
00:50:32,000 --> 00:50:34,000
然后用锅来炒菜

1466
00:50:34,000 --> 00:50:36,000
然后在菜被煮的过程中

1467
00:50:36,000 --> 00:50:37,000
假设我是做一个炖菜

1468
00:50:37,000 --> 00:50:40,000
不需要长时间的去翻它的炖菜

1469
00:50:40,000 --> 00:50:44,000
然后我可以在炖菜的时候去洗碗

1470
00:50:44,000 --> 00:50:45,000
对吧

1471
00:50:46,000 --> 00:50:51,000
此时我可以说做饭这件事情是一个并发的事情

1472
00:50:51,000 --> 00:50:55,000
因为有很多头绪需要我们去做

1473
00:50:55,000 --> 00:50:57,000
甚至我可以买菜加进去

1474
00:50:57,000 --> 00:50:59,000
比如说我可以去买菜

1475
00:50:59,000 --> 00:51:00,000
我需要先去买菜

1476
00:51:00,000 --> 00:51:02,000
然后再去刷过新碗

1477
00:51:02,000 --> 00:51:03,000
然后再开始炖菜

1478
00:51:03,000 --> 00:51:03,000
然后再开始装菜

1479
00:51:03,000 --> 00:51:05,000
然后才开始摆桌子之类的

1480
00:51:06,000 --> 00:51:08,000
但是因为我只有一个人

1481
00:51:08,000 --> 00:51:11,000
所以我可能没有办法用并形的手段去做它

1482
00:51:11,000 --> 00:51:11,000
对吧

1483
00:51:11,000 --> 00:51:12,000
对

1484
00:51:12,000 --> 00:51:12,000
没错

1485
00:51:12,000 --> 00:51:14,000
但如果我可以

1486
00:51:14,000 --> 00:51:15,000
你有女朋友

1487
00:51:15,000 --> 00:51:16,000
拉着我女朋友

1488
00:51:16,000 --> 00:51:16,000
对

1489
00:51:16,000 --> 00:51:18,000
首先我得有一个女朋友

1490
00:51:18,000 --> 00:51:20,000
首先你得有性好

1491
00:51:20,000 --> 00:51:21,000
性好

1492
00:51:21,000 --> 00:51:22,000
我已经有了一个女朋友

1493
00:51:22,000 --> 00:51:23,000
我可以拉着她说

1494
00:51:23,000 --> 00:51:23,000
好

1495
00:51:23,000 --> 00:51:24,000
我去买菜

1496
00:51:24,000 --> 00:51:25,000
你把锅油洗了

1497
00:51:26,000 --> 00:51:26,000
对吧

1498
00:51:26,000 --> 00:51:29,000
此时我就可以说我在做并形

1499
00:51:29,000 --> 00:51:32,000
因为我在同一时间

1500
00:51:32,000 --> 00:51:34,000
同时做很多事情

1501
00:51:34,000 --> 00:51:36,000
此时就是 Pirates

1502
00:51:37,000 --> 00:51:38,000
我不知道这样是什么

1503
00:51:39,000 --> 00:51:41,000
所以从一个开闊的说法来讲

1504
00:51:41,000 --> 00:51:43,000
就是说并发 concurrency

1505
00:51:43,000 --> 00:51:46,000
是一个组织事务的概念

1506
00:51:46,000 --> 00:51:48,000
就是说你可以把事务独立出来

1507
00:51:48,000 --> 00:51:51,000
它互相之间是没有因果关系

1508
00:51:51,000 --> 00:51:52,000
或者是依赖关系的

1509
00:51:52,000 --> 00:51:54,000
它可以被并发执行

1510
00:51:54,000 --> 00:51:56,000
但你实际做的时候

1511
00:51:56,000 --> 00:51:59,000
你是不是真的同时在做几件

1512
00:51:59,000 --> 00:52:00,000
互相可以并发的事情

1513
00:52:00,000 --> 00:52:01,000
则不一定

1514
00:52:01,000 --> 00:52:03,000
就像赶紧做这个做饭的例子

1515
00:52:03,000 --> 00:52:05,000
你有很多并发的任务

1516
00:52:05,000 --> 00:52:07,000
比如说洗碗是一个

1517
00:52:07,000 --> 00:52:08,000
切菜可能是一个

1518
00:52:09,000 --> 00:52:11,000
然后洗锅可能又是一个

1519
00:52:11,000 --> 00:52:13,000
但是因为你就一个人

1520
00:52:13,000 --> 00:52:15,000
你还没有并没有把这些并发的任务

1521
00:52:15,000 --> 00:52:16,000
并行执行吗

1522
00:52:16,000 --> 00:52:17,000
也就是说你在面对一个

1523
00:52:17,000 --> 00:52:19,000
concurrency 的问题的时候

1524
00:52:19,000 --> 00:52:23,000
你可能没有办法用 Pirates 的方式去解决它

1525
00:52:24,000 --> 00:52:27,000
而你用 Pirates 的方式去解决问题

1526
00:52:27,000 --> 00:52:30,000
也有可能根本不是 concurrency 的问题

1527
00:52:30,000 --> 00:52:32,000
但是当时后者这样的例子

1528
00:52:32,000 --> 00:52:34,000
可能比较难以解出来

1529
00:52:34,000 --> 00:52:35,000
对

1530
00:52:35,000 --> 00:52:36,000
我刚才就想说

1531
00:52:36,000 --> 00:52:38,000
我刚才讲了说

1532
00:52:39,000 --> 00:52:41,000
是不是说并行

1533
00:52:41,000 --> 00:52:44,000
就是 power 的前提是并发吗

1534
00:52:44,000 --> 00:52:44,000
你说不是

1535
00:52:44,000 --> 00:52:46,000
那有什么反例吗

1536
00:52:50,000 --> 00:52:51,000
比如说

1537
00:52:52,000 --> 00:52:54,000
我要在五个抽屉里面

1538
00:52:54,000 --> 00:52:56,000
我有五个抽屉五个抽屉里面

1539
00:52:56,000 --> 00:52:57,000
装满的围棋子

1540
00:52:57,000 --> 00:53:00,000
其中五个抽屉里面有一万个围棋子

1541
00:53:00,000 --> 00:53:01,000
只有一个是黑的

1542
00:53:01,000 --> 00:53:02,000
其他都是白的

1543
00:53:02,000 --> 00:53:05,000
我要把黑的围棋子找出来

1544
00:53:07,000 --> 00:53:08,000
你说这是 concurrency 的问题吗

1545
00:53:08,000 --> 00:53:09,000
其实不是

1546
00:53:12,000 --> 00:53:14,000
这件事情本身没有任何 concurrency 在里面

1547
00:53:14,000 --> 00:53:15,000
不是吧

1548
00:53:15,000 --> 00:53:17,000
我只需要找到黑围棋子

1549
00:53:17,000 --> 00:53:19,000
是我唯一的目的

1550
00:53:21,000 --> 00:53:24,000
我觉得可能有看你的什么

1551
00:53:24,000 --> 00:53:25,000
定叫什么

1552
00:53:25,000 --> 00:53:27,000
你的 task 的画定是怎么样子的

1553
00:53:27,000 --> 00:53:29,000
如果你画定 task 是

1554
00:53:29,000 --> 00:53:30,000
我有五个 task

1555
00:53:30,000 --> 00:53:32,000
就分别在每一个抽屉里面找

1556
00:53:32,000 --> 00:53:34,000
一个黑色围棋子

1557
00:53:34,000 --> 00:53:34,000
对吧

1558
00:53:35,000 --> 00:53:37,000
这个时候它又是一个并发的概念

1559
00:53:37,000 --> 00:53:38,000
所以我觉得

1560
00:53:39,000 --> 00:53:41,000
可能大致上可以这么认为

1561
00:53:41,000 --> 00:53:42,000
就是说

1562
00:53:42,000 --> 00:53:45,000
并发是并行的先决条件

1563
00:53:45,000 --> 00:53:48,000
但并行并不是并发的必然结果

1564
00:53:49,000 --> 00:53:50,000
可以这么说

1565
00:53:50,000 --> 00:53:50,000
好吧

1566
00:53:50,000 --> 00:53:51,000
就或者说

1567
00:53:51,000 --> 00:53:53,000
如果你可以把问题转化为一个

1568
00:53:53,000 --> 00:53:55,000
能够并发的问题

1569
00:53:55,000 --> 00:53:58,000
那你基本上就可以用并行的方式去解决

1570
00:54:00,000 --> 00:54:03,000
如果这个多的 resource

1571
00:54:03,000 --> 00:54:04,000
资源

1572
00:54:04,000 --> 00:54:05,000
就凭并发去做

1573
00:54:06,000 --> 00:54:08,000
刚才在你做发的例子里面

1574
00:54:08,000 --> 00:54:09,000
资源就是说

1575
00:54:09,000 --> 00:54:10,000
你得有两个人

1576
00:54:10,000 --> 00:54:11,000
或者是三个人

1577
00:54:11,000 --> 00:54:12,000
或者四个人

1578
00:54:12,000 --> 00:54:14,000
但在电脑的处理器

1579
00:54:14,000 --> 00:54:15,000
你得有多个处理器

1580
00:54:15,000 --> 00:54:18,000
就多核或者是多个 CPU 的

1581
00:54:18,000 --> 00:54:20,000
或者说更车上点

1582
00:54:20,000 --> 00:54:21,000
就是多个逻辑单元

1583
00:54:21,000 --> 00:54:22,000
你可能

1584
00:54:22,000 --> 00:54:22,000
对

1585
00:54:23,000 --> 00:54:24,000
可以去

1586
00:54:24,000 --> 00:54:24,000
对

1587
00:54:26,000 --> 00:54:26,000
比如说对

1588
00:54:26,000 --> 00:54:28,000
早期的计算机

1589
00:54:28,000 --> 00:54:30,000
可能的确是不具备并发

1590
00:54:30,000 --> 00:54:32,000
就是单核处理器吗

1591
00:54:32,000 --> 00:54:32,000
对

1592
00:54:32,000 --> 00:54:34,000
甚至不说

1593
00:54:34,000 --> 00:54:36,000
单核处理器这件事情

1594
00:54:36,000 --> 00:54:38,000
就是你在单核处理器上

1595
00:54:38,000 --> 00:54:39,000
可以在

1596
00:54:41,000 --> 00:54:43,000
操作这种层面去模拟

1597
00:54:43,000 --> 00:54:44,000
parallel

1598
00:54:44,000 --> 00:54:44,000
就是

1599
00:54:44,000 --> 00:54:47,000
但是在真正的早期的计算机里面

1600
00:54:47,000 --> 00:54:49,000
就连

1601
00:54:49,000 --> 00:54:52,000
连这种操作系统层面的并行

1602
00:54:52,000 --> 00:54:54,000
都是不存在的

1603
00:54:54,000 --> 00:54:54,000
就是

1604
00:54:54,000 --> 00:54:55,000
并发

1605
00:54:55,000 --> 00:54:56,000
并发

1606
00:54:56,000 --> 00:54:59,000
操作系统层面的并行

1607
00:54:59,000 --> 00:54:59,000
是不存在

1608
00:54:59,000 --> 00:55:00,000
我觉得

1609
00:55:00,000 --> 00:55:01,000
我想说的就是

1610
00:55:01,000 --> 00:55:02,000
比如说那个时候

1611
00:55:02,000 --> 00:55:06,000
并发肯定是存在的

1612
00:55:06,000 --> 00:55:08,000
比如说你一方面要独软盘

1613
00:55:08,000 --> 00:55:10,000
另一方面要刷新屏幕上的字符

1614
00:55:10,000 --> 00:55:12,000
这个时候你已经有那个了吗

1615
00:55:12,000 --> 00:55:14,000
有那个叫什么

1616
00:55:14,000 --> 00:55:15,000
有多任务了吗

1617
00:55:15,000 --> 00:55:16,000
没有多任务

1618
00:55:16,000 --> 00:55:18,000
我的意思就是在很早很早的时代

1619
00:55:18,000 --> 00:55:20,000
没有多任务的时代

1620
00:55:20,000 --> 00:55:21,000
当你在独软盘的时候

1621
00:55:21,000 --> 00:55:23,000
你的屏幕就是卡死的

1622
00:55:24,000 --> 00:55:25,000
就那个时候

1623
00:55:25,000 --> 00:55:28,000
计算机是没有办法用任何

1624
00:55:28,000 --> 00:55:30,000
用任何不管是真实的

1625
00:55:30,000 --> 00:55:32,000
还是虚假的并行手段

1626
00:55:32,000 --> 00:55:33,000
去解决这些并发的问题

1627
00:55:33,000 --> 00:55:35,000
对

1628
00:55:35,000 --> 00:55:37,000
然后后来我们就有了这种

1629
00:55:37,000 --> 00:55:40,000
所谓的多任务机制

1630
00:55:40,000 --> 00:55:40,000
就是在

1631
00:55:40,000 --> 00:55:42,000
哪怕是在单一执行

1632
00:55:42,000 --> 00:55:44,000
单一逻辑合的处理这个计算机上

1633
00:55:44,000 --> 00:55:45,000
我们也可以

1634
00:55:45,000 --> 00:55:48,000
就假装我们是在同时执行很多事情

1635
00:55:48,000 --> 00:55:49,000
比如说

1636
00:55:49,000 --> 00:55:51,000
最早实现那个什么

1637
00:55:51,000 --> 00:55:52,000
就民用的话

1638
00:55:52,000 --> 00:55:54,000
应该是温度 3 还是 95

1639
00:55:54,000 --> 00:55:56,000
3 2 吧

1640
00:55:56,000 --> 00:55:57,000
你要是说最早的话

1641
00:55:57,000 --> 00:55:59,000
就在 unix 下

1642
00:55:59,000 --> 00:56:02,000
就是大规模使用的情况下

1643
00:56:02,000 --> 00:56:03,000
就是不可能用的

1644
00:56:03,000 --> 00:56:04,000
应该是 95 吧

1645
00:56:04,000 --> 00:56:04,000
我觉得

1646
00:56:07,000 --> 00:56:08,000
953

1647
00:56:08,000 --> 00:56:10,000
95 不是强量是多任务

1648
00:56:10,000 --> 00:56:11,000
所以 3 2

1649
00:56:11,000 --> 00:56:12,000
3 2 已经有多任务了

1650
00:56:12,000 --> 00:56:13,000
3 2 已经有多任务了

1651
00:56:13,000 --> 00:56:14,000
你就是那个时候就已经有多任务

1652
00:56:14,000 --> 00:56:20,000
就是可以在实现你在放一首歌的时候

1653
00:56:20,000 --> 00:56:21,000
同时打开一个图片

1654
00:56:21,000 --> 00:56:23,000
比如说可以做这么一件事情

1655
00:56:23,000 --> 00:56:26,000
你 dose 4 当然是不能这样的吗

1656
00:56:26,000 --> 00:56:26,000
对

1657
00:56:26,000 --> 00:56:28,000
但是等等

1658
00:56:28,000 --> 00:56:29,000
windows 3 20

1659
00:56:29,000 --> 00:56:31,000
可能这个数语需要解释一下

1660
00:56:31,000 --> 00:56:34,000
就是我们说 3 2 其实只 windows 3.0

1661
00:56:34,000 --> 00:56:38,000
因为 windows 3.2 其实是只有中国地区才有

1662
00:56:38,000 --> 00:56:40,000
windows 3.2

1663
00:56:40,000 --> 00:56:40,000
不对

1664
00:56:40,000 --> 00:56:43,000
windows 3.2 其实就是一个 windows 3.1 的简体中文版

1665
00:56:44,000 --> 00:56:44,000
这样

1666
00:56:44,000 --> 00:56:45,000
不知道

1667
00:56:45,000 --> 00:56:45,000
对

1668
00:56:45,000 --> 00:56:47,000
所以我们经常说 windows 3.2

1669
00:56:47,000 --> 00:56:52,000
但其实这个概念仅限于中文圈里面

1670
00:56:52,000 --> 00:56:52,000
windows 3 吧

1671
00:56:52,000 --> 00:56:54,000
我们都有多称

1672
00:56:54,000 --> 00:56:54,000
对

1673
00:56:54,000 --> 00:56:58,000
windows 3 是一个比较好的数语

1674
00:56:58,000 --> 00:56:58,000
对

1675
00:56:58,000 --> 00:56:59,000
对

1676
00:56:59,000 --> 00:57:00,000
然后后来就有了这个多人用

1677
00:57:00,000 --> 00:57:01,000
就可以实现刚才那个功能

1678
00:57:01,000 --> 00:57:04,000
但是那个处理器还是一次只做一件事

1679
00:57:04,000 --> 00:57:06,000
就是它放一会这个歌

1680
00:57:06,000 --> 00:57:09,000
还有把那个处理器的核心切到去画一会图

1681
00:57:09,000 --> 00:57:11,000
然后再切回来放一会歌

1682
00:57:11,000 --> 00:57:13,000
然后再切回来画一会图

1683
00:57:13,000 --> 00:57:14,000
它只要切得够快

1684
00:57:14,000 --> 00:57:18,000
给人的错觉是说它同时在做两件事

1685
00:57:18,000 --> 00:57:22,000
就是它在并行的执行两件并发的任务

1686
00:57:22,000 --> 00:57:24,000
但其实它只是一个单

1687
00:57:24,000 --> 00:57:25,000
它并不是并行的

1688
00:57:25,000 --> 00:57:26,000
它只是一个不带不带

1689
00:57:26,000 --> 00:57:28,000
它就像沈电侠

1690
00:57:28,000 --> 00:57:30,000
可以自己跟自己打并棒球

1691
00:57:30,000 --> 00:57:33,000
它就是切换的非常好

1692
00:57:33,000 --> 00:57:33,000
对

1693
00:57:33,000 --> 00:57:35,000
这个是很好的比

1694
00:57:35,000 --> 00:57:37,000
然后真正到了要有 pull

1695
00:57:37,000 --> 00:57:39,000
就是有并发的感觉还是有这个

1696
00:57:39,000 --> 00:57:42,000
就当时有单号处理就有多线程的时候

1697
00:57:42,000 --> 00:57:43,000
就是 hyperthreating 的时候

1698
00:57:43,000 --> 00:57:44,000
就是一个处理器核心

1699
00:57:44,000 --> 00:57:47,000
它模拟成两个逻辑核在用

1700
00:57:47,000 --> 00:57:51,000
包括到我们现在的真正的多个物理核的情况下

1701
00:57:51,000 --> 00:57:55,000
甚至在一些工作站或者是服务器上所谓的那种多 CPU

1702
00:57:55,000 --> 00:57:58,000
就是不只有一个 CPU 的芯片

1703
00:57:58,000 --> 00:58:00,000
还有可能两个或者四个这样

1704
00:58:00,000 --> 00:58:01,000
对

1705
00:58:01,000 --> 00:58:04,000
这样只有到这时候我们才说真正的

1706
00:58:04,000 --> 00:58:05,000
Pulling 两个

1707
00:58:05,000 --> 00:58:06,000
并行

1708
00:58:06,000 --> 00:58:07,000
对

1709
00:58:07,000 --> 00:58:08,000
一进去一下

1710
00:58:08,000 --> 00:58:09,000
对

1711
00:58:09,000 --> 00:58:11,000
不过其实并行在

1712
00:58:11,000 --> 00:58:14,000
在我们讲 CPU 的时候

1713
00:58:14,000 --> 00:58:15,000
是可能比较晚

1714
00:58:15,000 --> 00:58:16,000
进才出现

1715
00:58:16,000 --> 00:58:19,000
但是它在讲那个 GPU

1716
00:58:19,000 --> 00:58:20,000
就图形中的记者说

1717
00:58:20,000 --> 00:58:21,000
它确实一直存在了

1718
00:58:21,000 --> 00:58:22,000
因为我们知道

1719
00:58:22,000 --> 00:58:24,000
这个 GPU 的

1720
00:58:24,000 --> 00:58:27,000
它是一个大规模并行化的这种一种结构

1721
00:58:27,000 --> 00:58:29,000
就是因为图像处理这件事情

1722
00:58:29,000 --> 00:58:33,000
它与生俱来就存在着这么一个

1723
00:58:33,000 --> 00:58:37,000
可以被并行执行的问题

1724
00:58:37,000 --> 00:58:40,000
就是你需要大规模的改变

1725
00:58:40,000 --> 00:58:42,000
一张图上的每一个点

1726
00:58:42,000 --> 00:58:46,000
那这就有点像你需要

1727
00:58:46,000 --> 00:58:47,000
同时给

1728
00:58:47,000 --> 00:58:49,000
两万个抽屉

1729
00:58:49,000 --> 00:58:52,000
在两万抽屉里面找有没有黑白黑紫这样

1730
00:58:52,000 --> 00:58:55,000
所以这件事情是可以天生的被

1731
00:58:55,000 --> 00:58:57,000
批量的

1732
00:58:57,000 --> 00:58:59,000
以流水线的方式并行处理的

1733
00:58:59,000 --> 00:59:01,000
所以也就是因为这个

1734
00:59:01,000 --> 00:59:03,000
这种问题的特别性

1735
00:59:03,000 --> 00:59:06,000
所以才会有 GPU 这种东西出现

1736
00:59:06,000 --> 00:59:08,000
而且 GPU 如果

1737
00:59:08,000 --> 00:59:10,000
你的问题可以被简化为

1738
00:59:10,000 --> 00:59:13,000
或者不叫复杂化为

1739
00:59:13,000 --> 00:59:15,000
GPU 的那种适合模型的话

1740
00:59:15,000 --> 00:59:16,000
你能获得的这个所谓的

1741
00:59:16,000 --> 00:59:17,000
Tunnel 能力就是

1742
00:59:17,000 --> 00:59:20,000
Thruput 是非常惊人的

1743
00:59:20,000 --> 00:59:21,000
没错

1744
00:59:21,000 --> 00:59:22,000
而反过来讲

1745
00:59:22,000 --> 00:59:24,000
这也就是为什么很多跟 GPU

1746
00:59:24,000 --> 00:59:26,000
跟图像处理

1747
00:59:26,000 --> 00:59:27,000
其实没有任何联系的事情

1748
00:59:27,000 --> 00:59:28,000
可以交由 GPU 来做

1749
00:59:28,000 --> 00:59:32,000
比如说 Bitcoin mining

1750
00:59:32,000 --> 00:59:33,000
有 GPU

1751
00:59:33,000 --> 00:59:36,000
就是因为它其实也是一个可以

1752
00:59:36,000 --> 00:59:38,000
天生的被

1753
00:59:38,000 --> 00:59:41,000
很好的病情处理的任务

1754
00:59:41,000 --> 00:59:42,000
对这一类问题

1755
00:59:42,000 --> 00:59:45,000
我们一般有一个所谓的一个名称

1756
00:59:45,000 --> 00:59:46,000
专有名称说的

1757
00:59:46,000 --> 00:59:47,000
人家叫做

1758
00:59:47,000 --> 00:59:51,000
embarrassingly paralyzable task

1759
00:59:51,000 --> 00:59:52,000
就非常尴尬的

1760
00:59:52,000 --> 00:59:55,000
可以被病情化执行的问题

1761
00:59:55,000 --> 00:59:55,000
没错

1762
00:59:55,000 --> 00:59:58,000
这就好像

1763
00:59:58,000 --> 00:59:59,000
罚你

1764
00:59:59,000 --> 01:00:02,000
小学的时候罚你把某一句话

1765
01:00:02,000 --> 01:00:03,000
超级百天

1766
01:00:04,000 --> 01:00:06,000
大家会用五支笔

1767
01:00:06,000 --> 01:00:08,000
五支笔可能非常惊人的

1768
01:00:08,000 --> 01:00:10,000
非常了不起的小伙伴

1769
01:00:10,000 --> 01:00:11,000
固定在一起

1770
01:00:11,000 --> 01:00:13,000
一般人用三支笔同时超课

1771
01:00:13,000 --> 01:00:15,000
而是可以做到

1772
01:00:15,000 --> 01:00:16,000
把一个字写两千遍

1773
01:00:16,000 --> 01:00:20,000
这就是一个非常 embarrassingly

1774
01:00:20,000 --> 01:00:23,000
truple paralyzable task

1775
01:00:23,000 --> 01:00:24,000
没错

1776
01:00:24,000 --> 01:00:25,000
其实这是一个很好的意思

1777
01:00:25,000 --> 01:00:28,000
就是把某一字超几千遍

1778
01:00:28,000 --> 01:00:32,000
其实就是一个

1779
01:00:32,000 --> 01:00:33,000
并不是非常 concurrency

1780
01:00:33,000 --> 01:00:36,000
但是可以被 parallel 执行的任务

1781
01:00:36,000 --> 01:00:39,000
所以有一件事情是可以确认的

1782
01:00:39,000 --> 01:00:42,000
就是现代的编程世界是离开了

1783
01:00:42,000 --> 01:00:44,000
病发模型基本上是

1784
01:00:44,000 --> 01:00:46,000
或说病情处理能力是

1785
01:00:46,000 --> 01:00:48,000
是没有办法

1786
01:00:48,000 --> 01:00:49,000
没有办法继续下去的

1787
01:00:49,000 --> 01:00:50,000
可以这么说

1788
01:00:50,000 --> 01:00:51,000
就是比较传统的

1789
01:00:51,000 --> 01:00:54,000
所谓 secretion programming model 是

1790
01:00:54,000 --> 01:00:58,000
在现代的编程领域所要处理的问题面前

1791
01:00:58,000 --> 01:01:00,000
是毫无环境指令的

1792
01:01:00,000 --> 01:01:03,000
所以我们无论如何是需要 parallel

1793
01:01:03,000 --> 01:01:06,000
那问题就来了

1794
01:01:06,000 --> 01:01:10,000
就是 parallel 其实是一个

1795
01:01:10,000 --> 01:01:10,000
怎么说的

1796
01:01:10,000 --> 01:01:12,000
描述起来比较简单的概念

1797
01:01:12,000 --> 01:01:14,000
或者当你一件事很复杂

1798
01:01:14,000 --> 01:01:15,000
但做起来

1799
01:01:15,000 --> 01:01:18,000
人们不同的人有不同的意见的

1800
01:01:18,000 --> 01:01:20,000
这么一件事情

1801
01:01:20,000 --> 01:01:22,000
就最最简单的

1802
01:01:22,000 --> 01:01:25,000
一种病发模型

1803
01:01:25,000 --> 01:01:27,000
或者说病情模型

1804
01:01:27,000 --> 01:01:28,000
我觉得接下来的节目

1805
01:01:28,000 --> 01:01:30,000
还是混用病发和病情这个词

1806
01:01:30,000 --> 01:01:31,000
不然实在是太累了

1807
01:01:33,000 --> 01:01:33,000
你说呢

1808
01:01:33,000 --> 01:01:35,000
在不区分

1809
01:01:35,000 --> 01:01:37,000
不严格区分病发

1810
01:01:37,000 --> 01:01:39,000
病情的场合的情况下

1811
01:01:39,000 --> 01:01:42,000
这两者有时候又是在混用的

1812
01:01:42,000 --> 01:01:43,000
对 没错

1813
01:01:43,000 --> 01:01:44,000
对

1814
01:01:44,000 --> 01:01:45,000
所以接下来

1815
01:01:45,000 --> 01:01:48,000
当我说到病发模型的时候

1816
01:01:48,000 --> 01:01:51,000
其实我的意思有可能是病情模型

1817
01:01:51,000 --> 01:01:54,000
但我说病情模型的时候

1818
01:01:54,000 --> 01:01:56,000
一般肯定是在讲病情模型

1819
01:01:56,000 --> 01:01:57,000
对

1820
01:01:57,000 --> 01:02:02,000
所以最基本的一种病情模型是什么呢

1821
01:02:02,000 --> 01:02:04,000
我觉得是 thread

1822
01:02:04,000 --> 01:02:05,000
就是线证

1823
01:02:05,000 --> 01:02:06,000
或者说

1824
01:02:06,000 --> 01:02:10,000
应该说最基本的一种病形模型

1825
01:02:10,000 --> 01:02:12,000
应该是多进程

1826
01:02:12,000 --> 01:02:14,000
multiprocess

1827
01:02:14,000 --> 01:02:17,000
如果真的要追根溯源的话

1828
01:02:17,000 --> 01:02:20,000
那应该可能还是多进程

1829
01:02:20,000 --> 01:02:22,000
限于多线程出现

1830
01:02:22,000 --> 01:02:22,000
对吧

1831
01:02:22,000 --> 01:02:23,000
没错

1832
01:02:23,000 --> 01:02:25,000
因为起码在

1833
01:02:25,000 --> 01:02:26,000
我记得 Linux 的那种是

1834
01:02:26,000 --> 01:02:29,000
非常晚进才出现多线程

1835
01:02:29,000 --> 01:02:31,000
最开始都一直是多进程的模型

1836
01:02:31,000 --> 01:02:31,000
对

1837
01:02:31,000 --> 01:02:35,000
因为在 Linux 上面开一个进程的方法

1838
01:02:35,000 --> 01:02:38,000
要开一个进程要比开一个线程简单很多

1839
01:02:38,000 --> 01:02:38,000
对

1840
01:02:38,000 --> 01:02:40,000
而且开销也不是特别大

1841
01:02:40,000 --> 01:02:42,000
就是它的多一个进程的开销

1842
01:02:42,000 --> 01:02:44,000
是相对小的

1843
01:02:44,000 --> 01:02:44,000
对

1844
01:02:44,000 --> 01:02:46,000
具体技术系列我们就不解释了

1845
01:02:46,000 --> 01:02:47,000
但是

1846
01:02:47,000 --> 01:02:53,000
其最根本的想法就是在一个编程语言里面

1847
01:02:53,000 --> 01:02:55,000
如果我们要利用多进程

1848
01:02:55,000 --> 01:02:56,000
或者是多线程的话

1849
01:02:56,000 --> 01:02:56,000
好

1850
01:02:56,000 --> 01:02:59,000
我就显示的写出来

1851
01:02:59,000 --> 01:03:00,000
这里请开一个新的进程

1852
01:03:00,000 --> 01:03:01,000
或者 Linux fork

1853
01:03:01,000 --> 01:03:02,000
或者怎么样

1854
01:03:02,000 --> 01:03:06,000
然后或者说在这里请开一个新的线程

1855
01:03:06,000 --> 01:03:08,000
用 thread

1856
01:03:11,000 --> 01:03:16,000
然后这就是非常简单直接

1857
01:03:16,000 --> 01:03:17,000
至少对硬件来说

1858
01:03:17,000 --> 01:03:21,000
非常简单直接的一种病形开发的模型

1859
01:03:22,000 --> 01:03:25,000
但是这种病形开发的模型有一个问题

1860
01:03:25,000 --> 01:03:27,000
就是对于程选来说

1861
01:03:27,000 --> 01:03:28,000
比较挑战

1862
01:03:28,000 --> 01:03:32,000
因为受限于我们只有一个大脑的限制

1863
01:03:32,000 --> 01:03:35,000
或者说我们的思维天生就是一个

1864
01:03:35,000 --> 01:03:36,000
现象的思维

1865
01:03:36,000 --> 01:03:38,000
一个单线程的

1866
01:03:38,000 --> 01:03:39,000
一个单进程的思维

1867
01:03:39,000 --> 01:03:44,000
所以在理解多进程的时候

1868
01:03:44,000 --> 01:03:47,000
会有一个会有一个会有个卡

1869
01:03:47,000 --> 01:03:48,000
我不知道你怎么样

1870
01:03:48,000 --> 01:03:52,000
但是当我写出人生第一个多进程的程序的时候

1871
01:03:52,000 --> 01:03:53,000
我是

1872
01:03:54,000 --> 01:03:55,000
我是愣了很久了

1873
01:03:55,000 --> 01:03:57,000
就是我需要

1874
01:03:57,000 --> 01:04:00,000
我需要去拥有那种精神分裂的东西

1875
01:04:00,000 --> 01:04:01,000
就是在这个地方

1876
01:04:01,000 --> 01:04:02,000
我需要判断说

1877
01:04:02,000 --> 01:04:03,000
我的 pid 是 0

1878
01:04:03,000 --> 01:04:06,000
那我是一个新的进程

1879
01:04:09,000 --> 01:04:11,000
那接下来我所要做这件事情

1880
01:04:11,000 --> 01:04:14,000
然后另外一些事情则要在我的附近程里面进行

1881
01:04:14,000 --> 01:04:15,000
然后这个时候我就会有一种

1882
01:04:15,000 --> 01:04:17,000
会有一种

1883
01:04:17,000 --> 01:04:18,000
会有一种

1884
01:04:19,000 --> 01:04:20,000
进风的感觉

1885
01:04:20,000 --> 01:04:20,000
对

1886
01:04:20,000 --> 01:04:21,000
会有一种非常进风的感觉

1887
01:04:21,000 --> 01:04:23,000
就会觉得说

1888
01:04:23,000 --> 01:04:23,000
好吧

1889
01:04:23,000 --> 01:04:24,000
那

1890
01:04:25,000 --> 01:04:27,000
计算机

1891
01:04:27,000 --> 01:04:28,000
解释这一切的时候

1892
01:04:28,000 --> 01:04:30,000
可能会比较方便

1893
01:04:30,000 --> 01:04:32,000
但是我就会不停地去想说

1894
01:04:32,000 --> 01:04:34,000
那我现在是在附近程里

1895
01:04:34,000 --> 01:04:35,000
还是在子进程里呢

1896
01:04:35,000 --> 01:04:37,000
那我做完这件事情

1897
01:04:37,000 --> 01:04:38,000
我要回到附近程里面

1898
01:04:38,000 --> 01:04:40,000
那附近程里面要做收尾工作

1899
01:04:40,000 --> 01:04:42,000
可是万一子进程没有

1900
01:04:42,000 --> 01:04:44,000
及时的完成这些事情

1901
01:04:44,000 --> 01:04:45,000
附近程里要等他吗

1902
01:04:45,000 --> 01:04:46,000
就是

1903
01:04:47,000 --> 01:04:48,000
在

1904
01:04:48,000 --> 01:04:50,000
我记得在

1905
01:04:51,000 --> 01:04:52,000
学操心还是什么的时候

1906
01:04:52,000 --> 01:04:55,000
我有很大一个篇幅都是在讲

1907
01:04:55,000 --> 01:04:56,000
多进程

1908
01:04:56,000 --> 01:04:58,000
或者多现成的实现原理的

1909
01:04:58,000 --> 01:05:00,000
就比如说什么

1910
01:05:00,000 --> 01:05:03,000
很多很经典的数学问题

1911
01:05:03,000 --> 01:05:05,000
数学模型也是在这个领域被提出来

1912
01:05:05,000 --> 01:05:06,000
比如说什么

1913
01:05:06,000 --> 01:05:06,000
我忘了

1914
01:05:06,000 --> 01:05:07,000
哲学家吃饭问题

1915
01:05:07,000 --> 01:05:08,000
就是什么

1916
01:05:08,000 --> 01:05:09,000
一个哲学家

1917
01:05:09,000 --> 01:05:10,000
左边是刀

1918
01:05:10,000 --> 01:05:11,000
右边是叉

1919
01:05:11,000 --> 01:05:12,000
对

1920
01:05:12,000 --> 01:05:13,000
bite philosophers

1921
01:05:13,000 --> 01:05:14,000
没错

1922
01:05:14,000 --> 01:05:15,000
嗯

1923
01:05:16,000 --> 01:05:16,000
等等

1924
01:05:16,000 --> 01:05:18,000
而且我觉得我印象里面没记错的话

1925
01:05:18,000 --> 01:05:21,000
这本书的英文版里面

1926
01:05:21,000 --> 01:05:24,000
哲学家是左手刀右手叉

1927
01:05:24,000 --> 01:05:26,000
然后在中文本里面变成了

1928
01:05:26,000 --> 01:05:28,000
哲学家左右各有一只筷子

1929
01:05:28,000 --> 01:05:28,000
你只有

1930
01:05:30,000 --> 01:05:31,000
就连这个地方有本地话一下

1931
01:05:31,000 --> 01:05:34,000
你必须拿到两只筷子才可以进餐

1932
01:05:34,000 --> 01:05:36,000
对

1933
01:05:36,000 --> 01:05:37,000
我觉得那个时候特别可笑

1934
01:05:37,000 --> 01:05:40,000
当时客厂上有个同学讲了一个笑话

1935
01:05:40,000 --> 01:05:41,000
就说

1936
01:05:41,000 --> 01:05:43,000
他们为什么不都换成长勺子

1937
01:05:43,000 --> 01:05:45,000
然后互相喂饭吃的

1938
01:05:45,000 --> 01:05:46,000
这就跟

1939
01:05:46,000 --> 01:05:48,000
这就跟另外一个

1940
01:05:48,000 --> 01:05:52,000
也是哲学上一个笑话联系来的

1941
01:05:52,000 --> 01:05:53,000
就是说哲学上说

1942
01:05:53,000 --> 01:05:55,000
有一个

1943
01:05:55,000 --> 01:05:58,000
一堆人围坐在一口锅前面

1944
01:05:58,000 --> 01:05:58,000
要吃饭

1945
01:05:58,000 --> 01:06:00,000
但是每个人的勺子都特别长

1946
01:06:00,000 --> 01:06:03,000
没有办法把它转过来喂自己

1947
01:06:03,000 --> 01:06:04,000
吃饭

1948
01:06:04,000 --> 01:06:06,000
所以每个人必须去

1949
01:06:06,000 --> 01:06:08,000
喂对方吃饭

1950
01:06:08,000 --> 01:06:09,000
所有人才不会饿死

1951
01:06:09,000 --> 01:06:12,000
然后这个故事被他在这边

1952
01:06:12,000 --> 01:06:15,000
转移到这个哲学家饿死的里面

1953
01:06:15,000 --> 01:06:16,000
我觉得特别有喜感

1954
01:06:20,000 --> 01:06:20,000
意思

1955
01:06:20,000 --> 01:06:25,000
刚才讲你说病情变成 parallel programming

1956
01:06:25,000 --> 01:06:27,000
的一个核心的问题

1957
01:06:27,000 --> 01:06:30,000
就是可能对城市园的要求就

1958
01:06:30,000 --> 01:06:33,000
就有数量级的提高

1959
01:06:33,000 --> 01:06:35,000
因为确实如你所说

1960
01:06:35,000 --> 01:06:36,000
这个人的思维很多人

1961
01:06:36,000 --> 01:06:37,000
他是一个单线的一个过程

1962
01:06:37,000 --> 01:06:39,000
他没办法去同时考虑

1963
01:06:40,000 --> 01:06:42,000
你大脑不是一个多合的东西吗

1964
01:06:42,000 --> 01:06:43,000
没错

1965
01:06:43,000 --> 01:06:44,000
那么

1966
01:06:44,000 --> 01:06:46,000
就其实就可能在传统的

1967
01:06:46,000 --> 01:06:47,000
这个线性变成的情况下

1968
01:06:47,000 --> 01:06:50,000
你你的思维逻辑

1969
01:06:50,000 --> 01:06:52,000
跟着这个成续代码走一遍

1970
01:06:52,000 --> 01:06:53,000
你也知道计算机也是这么执行的

1971
01:06:53,000 --> 01:06:56,000
并且不会有任何人干扰你中间

1972
01:06:56,000 --> 01:06:57,000
这个执行的步骤

1973
01:06:57,000 --> 01:06:59,000
当然可能中断那些什么除外

1974
01:06:59,000 --> 01:07:00,000
没错

1975
01:07:00,000 --> 01:07:03,000
但是在一个病情的条件下

1976
01:07:03,000 --> 01:07:05,000
这个事情就变得非常诡异了

1977
01:07:05,000 --> 01:07:08,000
就是如果你不考虑什么锁的那些机制

1978
01:07:08,000 --> 01:07:09,000
什么同步机制的话

1979
01:07:09,000 --> 01:07:11,000
它是有无限多种可能

1980
01:07:11,000 --> 01:07:15,000
有两个或者多个这种线程也好

1981
01:07:15,000 --> 01:07:15,000
进程也好

1982
01:07:15,000 --> 01:07:17,000
它可以我们叫做 interleaving

1983
01:07:17,000 --> 01:07:19,000
就是互相交織

1984
01:07:19,000 --> 01:07:20,000
互相交織

1985
01:07:20,000 --> 01:07:20,000
对

1986
01:07:20,000 --> 01:07:21,000
对

1987
01:07:21,000 --> 01:07:23,000
这个时候你就很难去看明白说

1988
01:07:23,000 --> 01:07:27,000
或者说你的脑袋中要装的

1989
01:07:27,000 --> 01:07:29,000
那个 state space

1990
01:07:29,000 --> 01:07:30,000
就是你到这一步的时候

1991
01:07:30,000 --> 01:07:32,000
其他人可能会怎么样

1992
01:07:32,000 --> 01:07:34,000
这种东西它就是一个指数增长的东西

1993
01:07:34,000 --> 01:07:36,000
所以这个时候对人的思维挑战

1994
01:07:36,000 --> 01:07:38,000
确实是一个极其困难的一件过程

1995
01:07:38,000 --> 01:07:39,000
一个过程

1996
01:07:39,000 --> 01:07:41,000
而且为了解决这个问题

1997
01:07:41,000 --> 01:07:43,000
就是你们也有很多这种方案

1998
01:07:43,000 --> 01:07:46,000
比如说可能我们听的最多的一条

1999
01:07:46,000 --> 01:07:49,000
就说 share the mutable state is bad

2000
01:07:49,000 --> 01:07:50,000
is evil

2001
01:07:50,000 --> 01:07:50,000
对吧

2002
01:07:50,000 --> 01:07:54,000
就是如果你是病形变成的东西

2003
01:07:54,000 --> 01:07:56,000
然后你还要多个线程也好

2004
01:07:56,000 --> 01:07:57,000
进程也好

2005
01:07:57,000 --> 01:08:00,000
去同时访问一个可以被改写的一个

2006
01:08:00,000 --> 01:08:03,000
一个内存区域或者变量

2007
01:08:03,000 --> 01:08:04,000
或者文件也好

2008
01:08:04,000 --> 01:08:05,000
这个时候你就非常困难了

2009
01:08:05,000 --> 01:08:10,000
因为你没有办法从那个被改写的

2010
01:08:10,000 --> 01:08:11,000
那个区域的角度来看

2011
01:08:11,000 --> 01:08:14,000
会你能预测到会产生什么样的组合

2012
01:08:14,000 --> 01:08:16,000
因为这个组合是不确定性的

2013
01:08:16,000 --> 01:08:17,000
是一个叫做

2014
01:08:17,000 --> 01:08:18,000
indeterministic

2015
01:08:18,000 --> 01:08:22,000
就是不确定性的一个过程

2016
01:08:22,000 --> 01:08:23,000
没错

2017
01:08:23,000 --> 01:08:25,000
所以很多时候我们的一个解放

2018
01:08:25,000 --> 01:08:27,000
就是说那么最好就是叫做 share the nothing

2019
01:08:27,000 --> 01:08:30,000
就是一切都不要共享的结构

2020
01:08:30,000 --> 01:08:31,000
这样的话有什么好处呢

2021
01:08:31,000 --> 01:08:34,000
这样你就可以在病形的环境下

2022
01:08:34,000 --> 01:08:37,000
对于某一个线程或者是进程也好

2023
01:08:37,000 --> 01:08:40,000
你不用考虑他和别的进程和现成的交互怎么样

2024
01:08:40,000 --> 01:08:42,000
你只要考虑他自己本身是一个线性的

2025
01:08:42,000 --> 01:08:45,000
线性的程序走下去就好了

2026
01:08:45,000 --> 01:08:48,000
这个时候就等于说是把一个病形的问题

2027
01:08:48,000 --> 01:08:52,000
变成了一个线性的串形的问题来解决了

2028
01:08:52,000 --> 01:08:57,000
但实际上这种情况是不太可行的

2029
01:08:57,000 --> 01:08:59,000
就可能有一些比较极端的例子

2030
01:08:59,000 --> 01:09:01,000
是属于这种 share the nothing 结构的东西

2031
01:09:01,000 --> 01:09:03,000
比如说我们很多的网页服务器

2032
01:09:03,000 --> 01:09:06,000
他可能就是比如说 apache 就是一个很典型的例子

2033
01:09:06,000 --> 01:09:10,000
他每一个请求来他可能都是开一个新的进程

2034
01:09:10,000 --> 01:09:13,000
或者开一个新的线程来响应这个请求

2035
01:09:13,000 --> 01:09:14,000
然后响应完毕这个进程或者现成

2036
01:09:14,000 --> 01:09:15,000
也就被杀掉了

2037
01:09:15,000 --> 01:09:17,000
但这个传统的模型

2038
01:09:17,000 --> 01:09:20,000
然后在响应这个请求的线程

2039
01:09:20,000 --> 01:09:22,000
或者是进程执行的过程中

2040
01:09:22,000 --> 01:09:24,000
你不用考虑别的线程或进程怎么样

2041
01:09:24,000 --> 01:09:26,000
因为你没有共享任何东西

2042
01:09:26,000 --> 01:09:28,000
但是在实际应用中

2043
01:09:28,000 --> 01:09:30,000
很多时候你确实是要共享东西的

2044
01:09:30,000 --> 01:09:32,000
比如说我们现在很多做的什么 web app

2045
01:09:32,000 --> 01:09:33,000
对吧

2046
01:09:33,000 --> 01:09:35,000
你是要访问一个共享的数据库的

2047
01:09:35,000 --> 01:09:37,000
那你肯定要访问一个

2048
01:09:38,000 --> 01:09:40,000
同一个同一个共享的数据库

2049
01:09:40,000 --> 01:09:41,000
然后肯定要改写东西

2050
01:09:41,000 --> 01:09:43,000
这个时候你又变成本来是一个 share nothing

2051
01:09:43,000 --> 01:09:46,000
又变成有一个 shared mutable state

2052
01:09:46,000 --> 01:09:49,000
这样的话整个模型就又变得很复杂

2053
01:09:49,000 --> 01:09:51,000
而且拿一侧试起来了

2054
01:09:51,000 --> 01:09:57,000
线程加上锁这种结构就好像一个到处漏水的桶

2055
01:09:57,000 --> 01:09:59,000
你总会觉得我堵住这个孔就没问题了

2056
01:09:59,000 --> 01:10:01,000
但是因为你堵住了这个孔

2057
01:10:01,000 --> 01:10:02,000
所以水压变高了

2058
01:10:02,000 --> 01:10:04,000
它会从另外一个地方漏出来

2059
01:10:04,000 --> 01:10:07,000
所以有时候用线程所编程的时候

2060
01:10:07,000 --> 01:10:14,000
你会觉得自己不仅思考的层级非常低

2061
01:10:14,000 --> 01:10:20,000
就是你会被迫强迫自己像一个线程过程器这样去思考

2062
01:10:20,000 --> 01:10:21,000
而且于此同时

2063
01:10:21,000 --> 01:10:24,000
你会发现解决了一个问题

2064
01:10:24,000 --> 01:10:25,000
另外一个问题又冒出来了

2065
01:10:25,000 --> 01:10:27,000
对

2066
01:10:27,000 --> 01:10:29,000
固此识比吗

2067
01:10:29,000 --> 01:10:29,000
没错

2068
01:10:30,000 --> 01:10:31,000
这个是为什么

2069
01:10:31,000 --> 01:10:35,000
虽然线程或是多线程或是多线程加上锁这种机制

2070
01:10:35,000 --> 01:10:41,000
在几乎所有像样的程序里面都有支持

2071
01:10:41,000 --> 01:10:45,000
但是用好他们却是非常难

2072
01:10:45,000 --> 01:10:49,000
而且我觉得这种难是没有必要的一种难的事情

2073
01:10:50,000 --> 01:10:53,000
就是这也是一个可能不是一个太好的抽象

2074
01:10:53,000 --> 01:10:54,000
就得出了这么一个

2075
01:10:54,000 --> 01:10:55,000
对

2076
01:10:55,000 --> 01:10:57,000
它的抽象层级可能实在是太低了

2077
01:10:57,000 --> 01:11:00,000
或者说它抽象的角度是错的

2078
01:11:00,000 --> 01:11:07,000
或者说它抽象的角度没有错不错之分

2079
01:11:07,000 --> 01:11:09,000
因为在超市这种层面上

2080
01:11:09,000 --> 01:11:12,000
病情就是这么被实现的

2081
01:11:12,000 --> 01:11:16,000
它与其说它的抽象角度是错的

2082
01:11:16,000 --> 01:11:19,000
不如说它所抽象的东西它是太少了

2083
01:11:19,000 --> 01:11:23,000
基本上你要从非常底层的程序上

2084
01:11:23,000 --> 01:11:24,000
不够有用的抽象

2085
01:11:24,000 --> 01:11:24,000
对不对

2086
01:11:24,000 --> 01:11:25,000
没错

2087
01:11:26,000 --> 01:11:29,000
这就是为什么接下来我们会提到

2088
01:11:29,000 --> 01:11:33,000
其种其他的病情模型

2089
01:11:33,000 --> 01:11:38,000
就是他们试图从不同的角度去解决这个问题

2090
01:11:38,000 --> 01:11:40,000
但是如果没说错的话

2091
01:11:40,000 --> 01:11:46,000
很多病情模型的基本实现的原理

2092
01:11:46,000 --> 01:11:48,000
还是通过线程的锁

2093
01:11:49,000 --> 01:11:51,000
就底层它是这么实现的

2094
01:11:51,000 --> 01:11:54,000
但是就是它暴露给开发者或者程序员的

2095
01:11:54,000 --> 01:11:57,000
这么一个接口或者是一个表象

2096
01:11:57,000 --> 01:11:59,000
你看不到那些东西了

2097
01:11:59,000 --> 01:12:00,000
对

2098
01:12:00,000 --> 01:12:04,000
这其实是回到我们前很多

2099
01:12:04,000 --> 01:12:11,000
至少很长时间以前讲的封装的那么一个问题领域

2100
01:12:11,000 --> 01:12:15,000
就是我们接下来要介绍的几种病发模型

2101
01:12:15,000 --> 01:12:19,000
其实是对于多线程加锁的这样一种封装

2102
01:12:20,000 --> 01:12:22,000
但是这种封装

2103
01:12:22,000 --> 01:12:23,000
当你熟悉了它之后

2104
01:12:23,000 --> 01:12:31,000
你会发现它在很大程度上增加了你思考的方便程度

2105
01:12:31,000 --> 01:12:33,000
或者让你变得更像一个人了

2106
01:12:33,000 --> 01:12:33,000
而不像一个机器

2107
01:12:35,000 --> 01:12:37,000
不用在在头脑中模拟费劲的

2108
01:12:37,000 --> 01:12:42,000
用一个单核处理器的大脑去模拟一个多核处理器的 CPU

2109
01:12:43,000 --> 01:12:43,000
对

2110
01:12:43,000 --> 01:12:43,000
没错

2111
01:12:44,000 --> 01:12:52,000
那你觉得除了多线程的模型之外

2112
01:12:52,000 --> 01:12:57,000
哪一种病发模型是最简单或说最直接

2113
01:12:57,000 --> 01:12:59,000
能够让人比较方便接受

2114
01:13:03,000 --> 01:13:05,000
那最好就是不要让我去想

2115
01:13:05,000 --> 01:13:08,000
去让我思考有这些底层

2116
01:13:08,000 --> 01:13:12,000
这些就是最理想的模型是不要让我思考有这么一些东西存在的东西

2117
01:13:12,000 --> 01:13:16,000
那可能用从语言层面上来解决这个问题的话

2118
01:13:16,000 --> 01:13:19,000
如果你能实现我们传统意义上的什么

2119
01:13:19,000 --> 01:13:22,000
FP 就是函数式变成的话

2120
01:13:22,000 --> 01:13:24,000
这可能就根本不用考虑这个问题了

2121
01:13:24,000 --> 01:13:27,000
因为函数式变成每一个函数

2122
01:13:27,000 --> 01:13:29,000
这就是在纯粹的一个函数式变成里面

2123
01:13:29,000 --> 01:13:31,000
所谓的函数都是所谓的确定性结果的

2124
01:13:33,000 --> 01:13:33,000
这样的话

2125
01:13:33,000 --> 01:13:34,000
对

2126
01:13:34,000 --> 01:13:35,000
不管你怎么去执行它

2127
01:13:35,000 --> 01:13:36,000
你总是得到一个确定性的解的

2128
01:13:36,000 --> 01:13:38,000
那我不管你是顺序之行

2129
01:13:38,000 --> 01:13:39,000
病发之行

2130
01:13:39,000 --> 01:13:40,000
还是怎么样

2131
01:13:40,000 --> 01:13:41,000
你一个什么一阵一组合

2132
01:13:41,000 --> 01:13:42,000
我都不用管

2133
01:13:42,000 --> 01:13:44,000
我只能考虑这个函数是这么写的

2134
01:13:44,000 --> 01:13:47,000
我输这个数得到这个结果

2135
01:13:47,000 --> 01:13:47,000
那就完了

2136
01:13:47,000 --> 01:13:51,000
就根本不存在病发病行的这些概念在里面

2137
01:13:51,000 --> 01:13:51,000
没错

2138
01:13:51,000 --> 01:13:58,000
我觉得可能 functional programming 所给我们最大的意出

2139
01:13:58,000 --> 01:14:04,000
就在于之前我们讨论的现成家所

2140
01:14:04,000 --> 01:14:05,000
所谓解决的最基本问题

2141
01:14:05,000 --> 01:14:12,000
就是有一个 changeable state 被 functional programming 彻底抹去了

2142
01:14:12,000 --> 01:14:15,000
就是如果一切问题的输入

2143
01:14:15,000 --> 01:14:19,000
乃至其中间状态全都是确定的话

2144
01:14:19,000 --> 01:14:23,000
那别人根本不可能改它

2145
01:14:23,000 --> 01:14:25,000
在我看来我也就不需要锁了

2146
01:14:25,000 --> 01:14:26,000
不是吗

2147
01:14:26,000 --> 01:14:27,000
对

2148
01:14:27,000 --> 01:14:31,000
所以这就是为什么 functional programming 给我们提供了

2149
01:14:31,000 --> 01:14:34,000
提供的这样一种从完全都不能角度去实现病

2150
01:14:34,000 --> 01:14:37,000
去实现病型的机制

2151
01:14:37,000 --> 01:14:40,000
会让我们思考下来更方便的原因

2152
01:14:40,000 --> 01:14:42,000
对

2153
01:14:42,000 --> 01:14:46,000
如果从先不考虑实现的经济性来讲

2154
01:14:46,000 --> 01:14:48,000
就起码从逻辑上来讲

2155
01:14:48,000 --> 01:14:51,000
如果你整个语言是一个纯粹的 functional 的一个

2156
01:14:51,000 --> 01:14:54,000
就是纯粹是一个含书式的过程的话

2157
01:14:54,000 --> 01:14:57,000
每一步执行都是可以被病发执行的

2158
01:14:57,000 --> 01:15:01,000
就理论上说你每一步都可以分辨到任一多个处理上去同时执行

2159
01:15:01,000 --> 01:15:02,000
然后得到一个解

2160
01:15:02,000 --> 01:15:05,000
然后再进行下一步的这个叫做 reduction

2161
01:15:05,000 --> 01:15:07,000
然后得到一个最终的解出来吗

2162
01:15:07,000 --> 01:15:08,000
对

2163
01:15:09,000 --> 01:15:09,000
对

2164
01:15:09,000 --> 01:15:11,000
然后这样的模型

2165
01:15:11,000 --> 01:15:15,000
它所带来的便利是非常显著的

2166
01:15:15,000 --> 01:15:17,000
但是从另一个角度讲

2167
01:15:17,000 --> 01:15:20,000
functional programming

2168
01:15:20,000 --> 01:15:23,000
写起来也是比较具有挑战性的

2169
01:15:23,000 --> 01:15:26,000
因为你只是

2170
01:15:26,000 --> 01:15:27,000
你不只是

2171
01:15:27,000 --> 01:15:32,000
但是当你没有 global changeable state 的时候

2172
01:15:32,000 --> 01:15:35,000
你就会需要用另外的方法去解决它

2173
01:15:35,000 --> 01:15:43,000
而 functional programming 可能会要求你比较痛苦的去转化

2174
01:15:43,000 --> 01:15:45,000
临思维模型

2175
01:15:45,000 --> 01:15:47,000
那有没有一个比较好的例子

2176
01:15:47,000 --> 01:15:56,000
可以说明为什么 functional programming 可以比较有效的实现病发落行吗

2177
01:15:58,000 --> 01:16:01,000
我觉得可能最简单就是一个计算器的例子

2178
01:16:01,000 --> 01:16:03,000
就能够可能比较容易懂

2179
01:16:04,000 --> 01:16:07,000
就是我们计算一个常用的四则运算的时候

2180
01:16:07,000 --> 01:16:09,000
我们比如说

2181
01:16:09,000 --> 01:16:10,000
我举个最简单的例子

2182
01:16:10,000 --> 01:16:13,000
三乘一四加五乘一六

2183
01:16:13,000 --> 01:16:15,000
这个公式

2184
01:16:15,000 --> 01:16:16,000
我们如果是人做会怎么样

2185
01:16:16,000 --> 01:16:20,000
那我们先算三乘一四十二

2186
01:16:20,000 --> 01:16:21,000
所以写在一边

2187
01:16:21,000 --> 01:16:23,000
然后再算五乘一六等于到了三十

2188
01:16:23,000 --> 01:16:24,000
写在一边

2189
01:16:24,000 --> 01:16:26,000
然后再两个球合加起来三十二对吧

2190
01:16:26,000 --> 01:16:27,000
不是

2191
01:16:27,000 --> 01:16:30,000
但是如果是给机器来做的话

2192
01:16:30,000 --> 01:16:34,000
因为你这次你整个四则运算中间的每一步都是确定性结果

2193
01:16:34,000 --> 01:16:36,000
因为确定性输入的确定性结果

2194
01:16:36,000 --> 01:16:37,000
这样的话

2195
01:16:37,000 --> 01:16:39,000
它可以同时计算三乘一四和五乘一六

2196
01:16:39,000 --> 01:16:43,000
或者说它是甚至先计算五乘一六再计算三乘一四

2197
01:16:43,000 --> 01:16:45,000
然后再把再去之合

2198
01:16:45,000 --> 01:16:47,000
就是在这个观察中你可以看到

2199
01:16:47,000 --> 01:16:50,000
不管你的计算结果

2200
01:16:50,000 --> 01:16:54,000
并不会因为你计算的顺序有任何改变

2201
01:16:54,000 --> 01:16:57,000
而导致你的结果有任何变化

2202
01:16:57,000 --> 01:16:58,000
这个时候的话

2203
01:16:58,000 --> 01:17:01,000
那机器就可以做很多这样的优化

2204
01:17:01,000 --> 01:17:04,000
就可以把那些能够同时运行

2205
01:17:04,000 --> 01:17:06,000
直线东西都运行起来

2206
01:17:06,000 --> 01:17:07,000
对

2207
01:17:07,000 --> 01:17:12,000
假设你的这个算式没有像三乘四加五乘六这么吹

2208
01:17:12,000 --> 01:17:16,000
而是一个比如说两百位的数字

2209
01:17:16,000 --> 01:17:17,000
成立两百位数字

2210
01:17:17,000 --> 01:17:19,000
然后这样

2211
01:17:19,000 --> 01:17:25,000
然后要给比如说五六百个这样的结果球合

2212
01:17:25,000 --> 01:17:27,000
那这样的多任务

2213
01:17:27,000 --> 01:17:30,000
这样并发的模型就可以很好用

2214
01:17:30,000 --> 01:17:33,000
很好的用方式的 problem 的并行模型来解决

2215
01:17:33,000 --> 01:17:38,000
甚至我觉得其实也是一个很好的 mapproduce 的

2216
01:17:38,000 --> 01:17:39,000
没错

2217
01:17:39,000 --> 01:17:43,000
解决的怎么说一个例子

2218
01:17:43,000 --> 01:17:45,000
如果你要像一个门外人

2219
01:17:45,000 --> 01:17:47,000
门外和解释什么叫 mapproduce

2220
01:17:47,000 --> 01:17:50,000
当然门外和门外都对 mapproduce 成了兴趣之间

2221
01:17:50,000 --> 01:17:51,000
另外一个问题

2222
01:17:51,000 --> 01:17:54,000
但如果你要像一个人解释什么是 mapproduce

2223
01:17:54,000 --> 01:17:56,000
你就可以说让你算

2224
01:17:56,000 --> 01:17:59,000
让计算机算三乘四加五乘六

2225
01:17:59,000 --> 01:18:01,000
mapp 這一步就是给一颗

2226
01:18:01,000 --> 01:18:04,000
让一个计算机算三乘四

2227
01:18:04,000 --> 01:18:05,000
然后让另外一个算五乘六

2228
01:18:05,000 --> 01:18:09,000
而六四则是把三乘四的结果和五乘六的结果加在一起

2229
01:18:09,000 --> 01:18:10,000
没错

2230
01:18:10,000 --> 01:18:12,000
没错

2231
01:18:12,000 --> 01:18:15,000
但是这个就是还是这边程

2232
01:18:15,000 --> 01:18:17,000
我什么说有这么好的这么特性

2233
01:18:17,000 --> 01:18:19,000
但是它问题是在什么地方呢

2234
01:18:19,000 --> 01:18:23,000
问题在于现实世界的很多问题并不能

2235
01:18:24,000 --> 01:18:25,000
简单或者很方便的

2236
01:18:25,000 --> 01:18:27,000
规戒于一个寒朔室

2237
01:18:27,000 --> 01:18:31,000
一个就是非可变状态的一种场景来去解

2238
01:18:31,000 --> 01:18:35,000
比如说最简单的一个输出的时候

2239
01:18:35,000 --> 01:18:37,000
你就会牵上到跟外部世界的状态的沟通了

2240
01:18:37,000 --> 01:18:42,000
这个时候根据你的输入和的直部一样

2241
01:18:42,000 --> 01:18:44,000
你能可能某一些计算结果

2242
01:18:44,000 --> 01:18:46,000
如果还是医疗一脉

2243
01:18:46,000 --> 01:18:47,000
外部输入的话

2244
01:18:47,000 --> 01:18:48,000
它就并不是一个

2245
01:18:48,000 --> 01:18:50,000
你可以在单看程序本身

2246
01:18:50,000 --> 01:18:53,000
可以预见的一个结了吗

2247
01:18:53,000 --> 01:18:54,000
对

2248
01:18:54,000 --> 01:18:57,000
比如说我们最长练习的一种

2249
01:18:59,000 --> 01:19:04,000
编程题目就是问操作者的名字

2250
01:19:04,000 --> 01:19:06,000
然后打出 Hello 操作者的名字

2251
01:19:06,000 --> 01:19:09,000
这个就是没有办法用方式的 programming 写出来

2252
01:19:09,000 --> 01:19:12,000
就纯粹的方式的 programming 是没有办法处理这种问题的

2253
01:19:12,000 --> 01:19:16,000
因为你总有一步要问操作者的名字到底是什么

2254
01:19:16,000 --> 01:19:20,000
如果他的名字

2255
01:19:20,000 --> 01:19:22,000
或者说在你获得他的名字之前

2256
01:19:22,000 --> 01:19:25,000
你是没有办法把输出他的名字这一步

2257
01:19:25,000 --> 01:19:27,000
和问他的名字这一步

2258
01:19:27,000 --> 01:19:28,000
病情之下

2259
01:19:28,000 --> 01:19:29,000
对

2260
01:19:29,000 --> 01:19:34,000
还有一个 functional program 就不能很方便的

2261
01:19:34,000 --> 01:19:37,000
就不能规决于程序的 functional program

2262
01:19:37,000 --> 01:19:38,000
一概念就是随机数

2263
01:19:38,000 --> 01:19:39,000
对吧

2264
01:19:39,000 --> 01:19:42,000
就是你要有一个函数的结果是

2265
01:19:42,000 --> 01:19:44,000
你每次执行他的时候得到都是不确定的结果

2266
01:19:44,000 --> 01:19:46,000
这个时候他就并不是一个

2267
01:19:46,000 --> 01:19:47,000
他甚至不是一个函数

2268
01:19:47,000 --> 01:19:48,000
因为我们讲函数

2269
01:19:48,000 --> 01:19:51,000
他应该是一个确定的结果

2270
01:19:51,000 --> 01:19:51,000
对

2271
01:19:51,000 --> 01:19:52,000
给定输入的时候

2272
01:19:52,000 --> 01:19:54,000
你应该有确定的结果

2273
01:19:54,000 --> 01:19:56,000
但是如果你的结果是摇骰子

2274
01:19:56,000 --> 01:19:58,000
那他本来就不是一个函数

2275
01:19:58,000 --> 01:19:59,000
甚至严格意义下

2276
01:19:59,000 --> 01:20:00,000
他并不是一个函数了

2277
01:20:00,000 --> 01:20:02,000
数学的感觉的函数

2278
01:20:02,000 --> 01:20:02,000
没错

2279
01:20:02,000 --> 01:20:08,000
其实这也就是数学世界和统计学世界的一个根本分野

2280
01:20:08,000 --> 01:20:12,000
统计学世界所研究的世界是包含随机数发生源的

2281
01:20:12,000 --> 01:20:16,000
而数学世界所处理的问题是没有这种东西

2282
01:20:17,000 --> 01:20:18,000
OK

2283
01:20:18,000 --> 01:20:20,000
对

2284
01:20:20,000 --> 01:20:21,000
那说完了

2285
01:20:21,000 --> 01:20:25,000
functional programming 解决并发模型的

2286
01:20:25,000 --> 01:20:28,000
或者 functional programming 作为并发模型之后

2287
01:20:28,000 --> 01:20:35,000
我们可以说说其他的比较不那么 radical 的

2288
01:20:35,000 --> 01:20:36,000
不那么

2289
01:20:36,000 --> 01:20:37,000
疯狂的

2290
01:20:37,000 --> 01:20:38,000
对吧

2291
01:20:38,000 --> 01:20:39,000
对

2292
01:20:39,000 --> 01:20:44,000
不那么彻底革新人们的世界观的并发模型

2293
01:20:44,000 --> 01:20:45,000
OK

2294
01:20:45,000 --> 01:20:46,000
那对

2295
01:20:46,000 --> 01:20:48,000
所以我们刚才提到

2296
01:20:48,000 --> 01:20:52,000
rollpark 的那一篇那个展示

2297
01:20:52,000 --> 01:20:53,000
就是他向人们介绍

2298
01:20:53,000 --> 01:20:54,000
go-routine 的那个展示

2299
01:20:54,000 --> 01:20:58,000
所以作为一个 go-long 的传辅英者

2300
01:20:58,000 --> 01:20:58,000
Rail

2301
01:20:58,000 --> 01:21:02,000
你对 go-long 的并发模型是怎么理解的

2302
01:21:02,000 --> 01:21:04,000
或者你可以简单的介绍一下

2303
01:21:04,000 --> 01:21:07,000
go-long 里面是怎么解决并发问题的

2304
01:21:07,000 --> 01:21:07,000
OK

2305
01:21:07,000 --> 01:21:10,000
就 go 里面他采用的并发模型其实是一个非常古老

2306
01:21:10,000 --> 01:21:14,000
而且被学习的研究的很透彻的一种模型

2307
01:21:15,000 --> 01:21:16,000
简单的说就是叫做

2308
01:21:16,000 --> 01:21:17,000
CASP

2309
01:21:17,000 --> 01:21:19,000
就是 Communicating Sequential Processes

2310
01:21:19,000 --> 01:21:20,000
什么意思

2311
01:21:20,000 --> 01:21:22,000
就是说每一个

2312
01:21:22,000 --> 01:21:23,000
他们叫 process

2313
01:21:23,000 --> 01:21:24,000
这个进程

2314
01:21:24,000 --> 01:21:27,000
当然可能包括物理上是一个超级的进程也好

2315
01:21:27,000 --> 01:21:28,000
还是这个

2316
01:21:28,000 --> 01:21:29,000
现成的

2317
01:21:29,000 --> 01:21:30,000
现成

2318
01:21:30,000 --> 01:21:31,000
他就这个没有关系

2319
01:21:31,000 --> 01:21:33,000
这种 process 是一个逻辑的概念

2320
01:21:33,000 --> 01:21:35,000
就是他是一个线性执行的一个单元

2321
01:21:35,000 --> 01:21:37,000
然后他说什么意思

2322
01:21:37,000 --> 01:21:38,000
就是说每一个

2323
01:21:38,000 --> 01:21:39,000
就刚刚讲的

2324
01:21:39,000 --> 01:21:44,000
每一个进程都是单独自己管自己的执行

2325
01:21:44,000 --> 01:21:47,000
他只是在需要跟其他进程交互的时候

2326
01:21:47,000 --> 01:21:52,000
才通过消息传递的方式来做这么一件事

2327
01:21:52,000 --> 01:21:53,000
就等别人发消息给他

2328
01:21:53,000 --> 01:21:55,000
或者发消息给别人

2329
01:21:55,000 --> 01:21:57,000
然后就就有一个叫做 Synchronization Point

2330
01:21:57,000 --> 01:21:58,000
在那个点之后

2331
01:21:58,000 --> 01:22:00,000
然后他完成了这一步之后

2332
01:22:00,000 --> 01:22:07,000
他又再回到自己的一个一个比较线性的执行方式去做下去

2333
01:22:07,000 --> 01:22:09,000
这个是一个比较可能简单的解释

2334
01:22:10,000 --> 01:22:13,000
所以 Synchronize Point 跟锁的差别是什么

2335
01:22:15,000 --> 01:22:17,000
他本质上就是一个锁

2336
01:22:17,000 --> 01:22:19,000
只是说在逻辑的这个

2337
01:22:19,000 --> 01:22:20,000
就在抽象的方式

2338
01:22:20,000 --> 01:22:21,000
或者抽象的角度上

2339
01:22:21,000 --> 01:22:22,000
他是有点不太一样

2340
01:22:22,000 --> 01:22:23,000
他并不是说

2341
01:22:23,000 --> 01:22:27,000
我们两个进程要共享一个

2342
01:22:27,000 --> 01:22:29,000
资源

2343
01:22:29,000 --> 01:22:30,000
共享一个 State 了

2344
01:22:30,000 --> 01:22:32,000
所以我们先把它锁住

2345
01:22:32,000 --> 01:22:33,000
然后我们想

2346
01:22:33,000 --> 01:22:35,000
谁先到达锁点的时候

2347
01:22:35,000 --> 01:22:36,000
先等一下

2348
01:22:36,000 --> 01:22:38,000
等另外一个人到达锁点

2349
01:22:38,000 --> 01:22:39,000
然后再把锁解开

2350
01:22:39,000 --> 01:22:41,000
然后再把资源改变

2351
01:22:41,000 --> 01:22:43,000
然后再把锁解开

2352
01:22:43,000 --> 01:22:46,000
然后被锁住的人才可以进行下去

2353
01:22:46,000 --> 01:22:47,000
他这样的话

2354
01:22:47,000 --> 01:22:49,000
就你要去想

2355
01:22:49,000 --> 01:22:51,000
什么哪个字件是需要被锁定的

2356
01:22:51,000 --> 01:22:52,000
这就挺麻烦

2357
01:22:52,000 --> 01:22:54,000
然后他 CSP 的话

2358
01:22:54,000 --> 01:22:55,000
他就说

2359
01:22:55,000 --> 01:22:57,000
那我们不要去考虑锁的问题了

2360
01:22:57,000 --> 01:22:58,000
我们默认

2361
01:22:58,000 --> 01:23:00,000
我们要互相通讯的时候

2362
01:23:00,000 --> 01:23:03,000
就是有一个隐含的锁的内容

2363
01:23:03,000 --> 01:23:05,000
就是我要传递的消息

2364
01:23:05,000 --> 01:23:06,000
对不对

2365
01:23:06,000 --> 01:23:09,000
然后对方取得了这个消息之后

2366
01:23:09,000 --> 01:23:10,000
那我们锁就解开了

2367
01:23:10,000 --> 01:23:11,000
那我可以继续往下走下去

2368
01:23:11,000 --> 01:23:14,000
所以他本质上是一个锁了

2369
01:23:14,000 --> 01:23:17,000
但是就是说他的抽象的层级是不一样的

2370
01:23:17,000 --> 01:23:19,000
或者说抽象的出发点是不一样的

2371
01:23:19,000 --> 01:23:19,000
这样的话

2372
01:23:19,000 --> 01:23:21,000
对人们或者这个程序原来

2373
01:23:21,000 --> 01:23:22,000
理解起来

2374
01:23:22,000 --> 01:23:24,000
他来说是更加现实一点的

2375
01:23:24,000 --> 01:23:26,000
更加现实的一个抽象

2376
01:23:26,000 --> 01:23:27,000
没错

2377
01:23:27,000 --> 01:23:30,000
其实我听过一个比喻

2378
01:23:30,000 --> 01:23:34,000
就是传统的现成与锁有点像储物香

2379
01:23:34,000 --> 01:23:37,000
你要去买东西

2380
01:23:37,000 --> 01:23:39,000
然后你要先把自己的

2381
01:23:39,000 --> 01:23:40,000
你在进商场之前

2382
01:23:40,000 --> 01:23:42,000
需要把自己的东西锁在一个储物柜里

2383
01:23:42,000 --> 01:23:45,000
显示的锁其实就是正是八点的锁

2384
01:23:45,000 --> 01:23:47,000
当你把一个储物香锁起来的时候

2385
01:23:47,000 --> 01:23:48,000
别人就不能再用了

2386
01:23:48,000 --> 01:23:56,000
而这样一种 CSP 的模型则是有一个专门的储物管理员

2387
01:23:56,000 --> 01:23:58,000
你只需要把你的东西给他说

2388
01:23:58,000 --> 01:23:59,000
我要把这东西存起来

2389
01:23:59,000 --> 01:24:00,000
然后我去别的地方

2390
01:24:00,000 --> 01:24:04,000
他也许在背后有另外一个储物香

2391
01:24:04,000 --> 01:24:08,000
但是你不会关心这个细节

2392
01:24:08,000 --> 01:24:08,000
没错

2393
01:24:08,000 --> 01:24:12,000
你不用去直接关心你的东西到底锁在那个箱子里

2394
01:24:12,000 --> 01:24:16,000
以及你是不是和别人共享的同样一个储物香这样的问题

2395
01:24:16,000 --> 01:24:18,000
你只需要告诉他说我要存东西

2396
01:24:18,000 --> 01:24:18,000
然后我走了

2397
01:24:18,000 --> 01:24:20,000
然后回来的时候我要拿东西

2398
01:24:20,000 --> 01:24:21,000
就是这么简单

2399
01:24:21,000 --> 01:24:23,000
这个比喻很好

2400
01:24:23,000 --> 01:24:24,000
你回来拿的时候

2401
01:24:24,000 --> 01:24:25,000
你就说我要拿我之前

2402
01:24:25,000 --> 01:24:28,000
或者说你甚至不一定是你本人去拿

2403
01:24:28,000 --> 01:24:31,000
比如说你的老婆帮你去拿你的包

2404
01:24:31,000 --> 01:24:32,000
但是他有什么盘嘛

2405
01:24:32,000 --> 01:24:33,000
对吧

2406
01:24:33,000 --> 01:24:36,000
他就说我要拿几号的那个包

2407
01:24:36,000 --> 01:24:38,000
然后那个柜台的那个小姐就去帮你拿出来

2408
01:24:38,000 --> 01:24:41,000
然后你就你中间并不需要去关心

2409
01:24:41,000 --> 01:24:42,000
他后面有多少个锁格

2410
01:24:42,000 --> 01:24:43,000
对吧

2411
01:24:43,000 --> 01:24:47,000
他后面的锁是一个拉锁还是一个防刀保险柜

2412
01:24:47,000 --> 01:24:48,000
还是一个什么样的东西实现

2413
01:24:48,000 --> 01:24:49,000
对

2414
01:24:50,000 --> 01:24:56,000
所以这样一种编程模型也是目前比较流行的一种模型

2415
01:24:56,000 --> 01:24:59,000
我觉得就是在很多人我们都支持他

2416
01:24:59,000 --> 01:25:01,000
就是购有购

2417
01:25:01,000 --> 01:25:03,000
而且是在语言层面上直接支持他的

2418
01:25:03,000 --> 01:25:05,000
而其他很多语言也都是通过

2419
01:25:05,000 --> 01:25:08,000
一个 Library 或者是其他什么机制

2420
01:25:08,000 --> 01:25:10,000
一个主要是通过 Library

2421
01:25:10,000 --> 01:25:11,000
好像只有两种可能

2422
01:25:11,000 --> 01:25:13,000
你要么再直接

2423
01:25:13,000 --> 01:25:14,000
直接执行的

2424
01:25:14,000 --> 01:25:15,000
对

2425
01:25:15,000 --> 01:25:16,000
要么通过一个

2426
01:25:16,000 --> 01:25:18,000
这里要可能介绍一下

2427
01:25:18,000 --> 01:25:21,000
除了刚才讲的那个 CSP 模型之外

2428
01:25:21,000 --> 01:25:25,000
有一个与他形成叫做对有关系的一个模型

2429
01:25:25,000 --> 01:25:27,000
叫做 Actor Model

2430
01:25:27,000 --> 01:25:29,000
这个 Apple 我不知道这个中文怎么翻译好

2431
01:25:29,000 --> 01:25:33,000
叫做演员模型也不对吧

2432
01:25:33,000 --> 01:25:35,000
Actor 这里不是演员模型

2433
01:25:36,000 --> 01:25:37,000
就是简单的讲

2434
01:25:37,000 --> 01:25:39,000
就是说你在 CSP 的时候有一种

2435
01:25:39,000 --> 01:25:41,000
经典的方式是说

2436
01:25:41,000 --> 01:25:45,000
我们两个之间实现一个所谓的这个 Channel

2437
01:25:45,000 --> 01:25:46,000
一个渠道

2438
01:25:46,000 --> 01:25:48,000
我们通过这个渠道来发送这个消息

2439
01:25:48,000 --> 01:25:49,000
对吧

2440
01:25:50,000 --> 01:25:50,000
就是说这个渠道

2441
01:25:50,000 --> 01:25:51,000
就是我要发消息的时候

2442
01:25:51,000 --> 01:25:56,000
我要我先把这个消息通过这个渠道传送给你

2443
01:25:56,000 --> 01:25:57,000
如果你那边没有

2444
01:25:57,000 --> 01:26:00,000
还没有来接收这个渠道

2445
01:26:00,000 --> 01:26:03,000
我发消息这个人还在那边等着你接收之后

2446
01:26:03,000 --> 01:26:04,000
才可以了

2447
01:26:04,000 --> 01:26:05,000
才可以走

2448
01:26:06,000 --> 01:26:07,000
大概没毛泳这个意思吗

2449
01:26:07,000 --> 01:26:08,000
是

2450
01:26:10,000 --> 01:26:12,000
所以 Actor

2451
01:26:12,000 --> 01:26:14,000
比如说支持 Actor 的语言

2452
01:26:14,000 --> 01:26:16,000
像 Alon 或者是

2453
01:26:16,000 --> 01:26:17,000
Skala 也是一个

2454
01:26:17,000 --> 01:26:19,000
Skala 支持那个叫做不够

2455
01:26:19,000 --> 01:26:21,000
Skala 是通过 Aka 支持的

2456
01:26:21,000 --> 01:26:23,000
Skala 没有原声的 Actor

2457
01:26:23,000 --> 01:26:23,000
他有

2458
01:26:23,000 --> 01:26:25,000
他原声是 Actor

2459
01:26:25,000 --> 01:26:30,000
他也可以通过 JVM 走 Aka 那个 Library 来实现 ActorModel

2460
01:26:30,000 --> 01:26:31,000
OK

2461
01:26:31,000 --> 01:26:33,000
然后刚才讲的是

2462
01:26:33,000 --> 01:26:34,000
CSV 是通过 Channel 来实现的

2463
01:26:34,000 --> 01:26:38,000
就是说两个人要同时到达 Channel 那个点

2464
01:26:38,000 --> 01:26:40,000
然后才能够传递消息

2465
01:26:40,000 --> 01:26:42,000
然后这是一种方式

2466
01:26:42,000 --> 01:26:42,000
对

2467
01:26:42,000 --> 01:26:44,000
而 Actor 更像一个

2468
01:26:44,000 --> 01:26:45,000
怎么说更像一个代理

2469
01:26:45,000 --> 01:26:49,000
Actor 是一个叫做游箱的模型

2470
01:26:49,000 --> 01:26:50,000
就是说每个人

2471
01:26:50,000 --> 01:26:53,000
就每个进程都是一个所谓的一个 Actor

2472
01:26:53,000 --> 01:26:56,000
然后他每 Actor 就只做自己的事情

2473
01:26:56,000 --> 01:26:57,000
然后但是每个 Actor

2474
01:26:57,000 --> 01:26:58,000
他有附

2475
01:26:58,000 --> 01:27:02,000
他有一个给他唯一配备的一个游箱

2476
01:27:02,000 --> 01:27:03,000
然后别人的消息来的时候

2477
01:27:03,000 --> 01:27:07,000
并不直接被 Actor 达去

2478
01:27:07,000 --> 01:27:09,000
而是说先 C 进这个游箱里面

2479
01:27:09,000 --> 01:27:10,000
然后等这个 Actor 处理

2480
01:27:10,000 --> 01:27:13,000
他执行到一个条件

2481
01:27:13,000 --> 01:27:13,000
叫他说

2482
01:27:13,000 --> 01:27:15,000
我需要收一个邮件

2483
01:27:15,000 --> 01:27:16,000
然后他再去看自己的游箱

2484
01:27:16,000 --> 01:27:17,000
说

2485
01:27:17,000 --> 01:27:19,000
有没有别人给我发过来的消息

2486
01:27:19,000 --> 01:27:20,000
我看一下处理一遍

2487
01:27:20,000 --> 01:27:20,000
如果没有的话

2488
01:27:20,000 --> 01:27:22,000
我再接着做自己的事情

2489
01:27:23,000 --> 01:27:26,000
所以 CSP 和 ActorModel 是一个两个

2490
01:27:27,000 --> 01:27:29,000
本质上做的同样的事情

2491
01:27:29,000 --> 01:27:31,000
只是说他们在实现方式上

2492
01:27:31,000 --> 01:27:33,000
是有一点所谓的对我关系的在里面

2493
01:27:34,000 --> 01:27:35,000
OK

2494
01:27:36,000 --> 01:27:38,000
在现实中

2495
01:27:38,000 --> 01:27:39,000
其实够的话

2496
01:27:39,000 --> 01:27:40,000
比较

2497
01:27:40,000 --> 01:27:42,000
他并不是一个纯粹的 CSP 的模型

2498
01:27:42,000 --> 01:27:44,000
因为他的那个 Channel

2499
01:27:44,000 --> 01:27:44,000
刚刚讲的

2500
01:27:44,000 --> 01:27:47,000
他并不是一个完全是主塞的 Channel

2501
01:27:47,000 --> 01:27:49,000
因为他的 Channel 是可以被 buffered 的

2502
01:27:49,000 --> 01:27:49,000
对

2503
01:27:49,000 --> 01:27:51,000
其实我就刚才想说

2504
01:27:51,000 --> 01:27:53,000
Go 的 Channel 难道不也是一个游箱吗

2505
01:27:53,000 --> 01:27:55,000
就他也是一个 Q

2506
01:27:55,000 --> 01:27:56,000
对

2507
01:27:56,000 --> 01:27:57,000
所以这个就是有一个

2508
01:27:57,000 --> 01:28:00,000
他不是一个纯粹的 CSP 的这一点

2509
01:28:00,000 --> 01:28:01,000
就是因为说

2510
01:28:01,000 --> 01:28:02,000
他的 Channel

2511
01:28:02,000 --> 01:28:05,000
他鼓励你使用一个叫做 BlockingChannel

2512
01:28:05,000 --> 01:28:06,000
就一次只能发一条消息

2513
01:28:06,000 --> 01:28:07,000
然后你必须要等

2514
01:28:07,000 --> 01:28:09,000
对方取出这个消息之后

2515
01:28:09,000 --> 01:28:11,000
你这些发送方才能接着执行下一个

2516
01:28:11,000 --> 01:28:11,000
对

2517
01:28:11,000 --> 01:28:14,000
这就是一种比较纯粹的 CSP 的状态

2518
01:28:14,000 --> 01:28:17,000
但是如果你不用组塞式的 Channel 的话

2519
01:28:17,000 --> 01:28:20,000
其实 Go 3 号也是用到了 Act

2520
01:28:20,000 --> 01:28:21,000
没错

2521
01:28:21,000 --> 01:28:22,000
就是他 Go 的话

2522
01:28:22,000 --> 01:28:23,000
其实也是有一个

2523
01:28:23,000 --> 01:28:26,000
因为他的 Channel 有一个扩展

2524
01:28:26,000 --> 01:28:28,000
就是说他那个 Channel 是可以有一个 buffered 的

2525
01:28:28,000 --> 01:28:29,000
就是一个缓冲区域的

2526
01:28:29,000 --> 01:28:30,000
比如说我可以声明

2527
01:28:30,000 --> 01:28:33,000
这个 Channel 有一个 100 个位置的缓冲区域

2528
01:28:33,000 --> 01:28:34,000
什么意思呢

2529
01:28:34,000 --> 01:28:37,000
我可以往这个 Channel 里面塞

2530
01:28:37,000 --> 01:28:40,000
99 条消息都不足塞

2531
01:28:40,000 --> 01:28:42,000
直到我塞第 100 条消息的时候

2532
01:28:42,000 --> 01:28:43,000
不

2533
01:28:43,000 --> 01:28:45,000
我可以往那个我那边塞 100 条消息都不足塞

2534
01:28:45,000 --> 01:28:47,000
但我往里面塞第 100

2535
01:28:47,000 --> 01:28:47,000
另一条消息的时候

2536
01:28:47,000 --> 01:28:50,000
我得等那头那个人

2537
01:28:50,000 --> 01:28:51,000
就是接收方

2538
01:28:51,000 --> 01:28:52,000
挪出一条消息之后

2539
01:28:52,000 --> 01:28:54,000
我才能够再往里面塞进去

2540
01:28:54,000 --> 01:28:56,000
就是说他是有一个这么一个 buffered

2541
01:28:56,000 --> 01:28:57,000
这么一个概念

2542
01:28:57,000 --> 01:28:58,000
这个时候的话

2543
01:28:58,000 --> 01:28:59,000
这种 Channel 就比较类似于 Act

2544
01:28:59,000 --> 01:29:02,000
Model 里面的这个叫什么

2545
01:29:03,000 --> 01:29:04,000
Mailbox 信箱的概念

2546
01:29:04,000 --> 01:29:09,000
但是他没有那么灵活度和自由程度

2547
01:29:09,000 --> 01:29:09,000
还是不一样的

2548
01:29:09,000 --> 01:29:12,000
比如说 Act Model 里面

2549
01:29:12,000 --> 01:29:13,000
如果你有信箱的概念的话

2550
01:29:13,000 --> 01:29:15,000
你必然的推了每一个 Act

2551
01:29:15,000 --> 01:29:17,000
他是有一个唯一的确定的

2552
01:29:17,000 --> 01:29:19,000
那个识别符的一个 ID

2553
01:29:19,000 --> 01:29:19,000
对吧

2554
01:29:19,000 --> 01:29:21,000
你才知道你这个消息是要

2555
01:29:21,000 --> 01:29:23,000
从哪里来发给谁

2556
01:29:23,000 --> 01:29:23,000
对吧

2557
01:29:23,000 --> 01:29:25,000
你得有这么一个过程

2558
01:29:25,000 --> 01:29:26,000
但是在购里面的话

2559
01:29:26,000 --> 01:29:29,000
因为你可以每一个进程

2560
01:29:29,000 --> 01:29:31,000
是可以建立多个 Channel 的话

2561
01:29:31,000 --> 01:29:34,000
所以他的对应关系是不太一样的

2562
01:29:34,000 --> 01:29:37,000
但本质上他们是其实同一件事情

2563
01:29:37,000 --> 01:29:39,000
所以我们可以说 Act Model 型

2564
01:29:39,000 --> 01:29:44,000
天生就比较适合分布式计算的

2565
01:29:44,000 --> 01:29:45,000
领域

2566
01:29:45,000 --> 01:29:48,000
因为当你把你的计算模型

2567
01:29:48,000 --> 01:29:50,000
采用分布式的方式来实现的时候

2568
01:29:50,000 --> 01:29:55,000
那每一个分布式的单元都会天生的

2569
01:29:55,000 --> 01:29:58,000
带有一个标识服

2570
01:29:58,000 --> 01:29:59,000
然后在这种状况下

2571
01:29:59,000 --> 01:30:00,000
你用 Act Model 型的时候

2572
01:30:00,000 --> 01:30:04,000
就非常容易的把你的冲向层级连在一起了

2573
01:30:06,000 --> 01:30:08,000
但是如果用 GoRoutine 的 Channel 的话

2574
01:30:08,000 --> 01:30:12,000
那可能应用在分布计算的时候

2575
01:30:12,000 --> 01:30:13,000
没有那么自然

2576
01:30:15,000 --> 01:30:16,000
其实没有关系

2577
01:30:16,000 --> 01:30:17,000
这两个是可以完全互相

2578
01:30:17,000 --> 01:30:23,000
就是可以不损失任何抽象层级的互相转化的

2579
01:30:23,000 --> 01:30:24,000
比如说最简单一个转化的道理

2580
01:30:24,000 --> 01:30:30,000
就是说我怎么在用 Channel 实现 Act Model

2581
01:30:30,000 --> 01:30:32,000
一个很简单的道理

2582
01:30:32,000 --> 01:30:34,000
就是我每一个 Process 我自建

2583
01:30:34,000 --> 01:30:36,000
我在建那个 Process 的时候

2584
01:30:36,000 --> 01:30:38,000
我给它一个参数就是一个 Channel

2585
01:30:38,000 --> 01:30:41,000
这个 Channel 我就是把它命名为一个叫做命名为邮箱

2586
01:30:41,000 --> 01:30:43,000
然后因为 Channel 是有 ID 的

2587
01:30:43,000 --> 01:30:44,000
这样的话

2588
01:30:44,000 --> 01:30:50,000
我就可以认为具备 Channel 读写的功能的进程

2589
01:30:50,000 --> 01:30:52,000
就是这个 Act 本身

2590
01:30:52,000 --> 01:30:53,000
对

2591
01:30:53,000 --> 01:30:56,000
我意思就是你在这样一种解决方案的

2592
01:30:56,000 --> 01:30:58,000
你在实时这样解决方案的时候

2593
01:30:58,000 --> 01:31:00,000
你实际上是采用 Act Model 型

2594
01:31:00,000 --> 01:31:04,000
你只不过是在用 Channel 的方式去模拟它而已

2595
01:31:04,000 --> 01:31:12,000
而我们就不要去考虑使用一种语言的机制去模拟 Act Model 型

2596
01:31:12,000 --> 01:31:14,000
和真正的使用 Act Model 型之间的差别在哪

2597
01:31:14,000 --> 01:31:18,000
我意思是当你使用另外一种语言

2598
01:31:18,000 --> 01:31:21,000
当你使用 GoLang 的 feature 去模拟 Act Model 型的时候

2599
01:31:21,000 --> 01:31:28,000
其实也就意味着 Act Model 型是比较适合在这样一种问题领域里面

2600
01:31:28,000 --> 01:31:30,000
实施并发的模型

2601
01:31:30,000 --> 01:31:30,000
不是吗

2602
01:31:31,000 --> 01:31:35,000
我不太清楚

2603
01:31:37,000 --> 01:31:38,000
我觉得不一定

2604
01:31:38,000 --> 01:31:41,000
就是有些时候是用 Channel 模型是更合适的

2605
01:31:41,000 --> 01:31:44,000
有些时候是用 Act Model 型是更合适的

2606
01:31:44,000 --> 01:31:46,000
所以你怎么去选择它

2607
01:31:46,000 --> 01:31:47,000
我觉得还是要看你问题的

2608
01:31:47,000 --> 01:31:51,000
你手上具体的问题的本身的属性来决定的

2609
01:31:52,000 --> 01:32:00,000
并不是说 Act Model 型就一定天然比 Channel 这种 CSP 的模型要来得更直观

2610
01:32:00,000 --> 01:32:02,000
或者是更易懂这样

2611
01:32:02,000 --> 01:32:03,000
好吧

2612
01:32:03,000 --> 01:32:06,000
那大概

2613
01:32:08,000 --> 01:32:12,000
我想想我们介绍了传统的现成回锁

2614
01:32:12,000 --> 01:32:13,000
介绍了 FP

2615
01:32:13,000 --> 01:32:17,000
介绍了 CSP 和 Acter

2616
01:32:17,000 --> 01:32:24,000
那基本上我们可以说已经涵盖了比较主流的这种并发模型

2617
01:32:24,000 --> 01:32:25,000
对

2618
01:32:25,000 --> 01:32:28,000
当然还有一些其他的并发模型

2619
01:32:28,000 --> 01:32:36,000
比如说有本书叫 7 parallelism in 7 weeks

2620
01:32:36,000 --> 01:32:39,000
7 种并发模型

2621
01:32:39,000 --> 01:32:42,000
就他那本说明已经介绍了 7 种

2622
01:32:42,000 --> 01:32:44,000
但是我们今天只说了 4 种

2623
01:32:44,000 --> 01:32:46,000
但是如果我们印象没错的话

2624
01:32:46,000 --> 01:32:50,000
他提到的其他 3 种其实都是怎么说

2625
01:32:50,000 --> 01:32:56,000
要么是我们提到的这 4 种比较基本的并发模型的混合

2626
01:32:57,000 --> 01:33:00,000
或者就是在更大规模上的抽象

2627
01:33:00,000 --> 01:33:02,000
但是我印象不是很深了

2628
01:33:02,000 --> 01:33:06,000
但是我推荐如果对这个问题比较感兴趣的听众们

2629
01:33:06,000 --> 01:33:07,000
可以去看看这本书

2630
01:33:07,000 --> 01:33:13,000
就是它是另外一本叫做 7 language in 7 weeks 的姐妹书

2631
01:33:13,000 --> 01:33:15,000
另外一本书也很好

2632
01:33:15,000 --> 01:33:16,000
OK

2633
01:33:16,000 --> 01:33:21,000
然后我们要就要过度到下一个相关

2634
01:33:21,000 --> 01:33:24,000
但并不等同的话题了

2635
01:33:24,000 --> 01:33:25,000
就是所谓

2636
01:33:25,000 --> 01:33:28,000
应该说是在抽象层级上并不等同

2637
01:33:28,000 --> 01:33:29,000
对

2638
01:33:29,000 --> 01:33:31,000
但是它有点相关

2639
01:33:31,000 --> 01:33:31,000
没错

2640
01:33:31,000 --> 01:33:36,000
就是所谓的异部和非主筛式的一个程序设计

2641
01:33:36,000 --> 01:33:38,000
程序计员的设计

2642
01:33:38,000 --> 01:33:38,000
没错

2643
01:33:38,000 --> 01:33:42,000
就刚刚刚刚刚才我们提到的在 Functional Programming

2644
01:33:42,000 --> 01:33:43,000
非常难解决的一个问题

2645
01:33:43,000 --> 01:33:45,000
就是当你要处理 IO 的时候

2646
01:33:45,000 --> 01:33:47,000
你怎么办

2647
01:33:47,000 --> 01:33:52,000
就当你需要问那个使用者的姓名的时候

2648
01:33:52,000 --> 01:33:55,000
你使用多个

2649
01:33:55,000 --> 01:33:58,000
当你有一种病情机制

2650
01:33:58,000 --> 01:34:00,000
并且你需要解决

2651
01:34:00,000 --> 01:34:03,000
询问使用者姓名这个问题的时候

2652
01:34:03,000 --> 01:34:04,000
你到底应该怎么办

2653
01:34:04,000 --> 01:34:07,000
这就是我们接下来需要讨论的问题

2654
01:34:07,000 --> 01:34:10,000
就是异部 IO 最恰当的抽象到底是什么

2655
01:34:12,000 --> 01:34:14,000
我们传统上

2656
01:34:14,000 --> 01:34:14,000
不叫传统上吧

2657
01:34:14,000 --> 01:34:15,000
可能目前用的

2658
01:34:15,000 --> 01:34:18,000
可能大家听得最熟悉的就是一个

2659
01:34:18,000 --> 01:34:22,000
synchronous 就是异部 IO 这么一个做法

2660
01:34:22,000 --> 01:34:25,000
这个主要存在于像什么 node

2661
01:34:25,000 --> 01:34:27,000
这种一些

2662
01:34:27,000 --> 01:34:28,000
就加反正是

2663
01:34:28,000 --> 01:34:30,000
你叫反射设计 javascript 的话

2664
01:34:30,000 --> 01:34:33,000
基本上都是走这种 syncIO 的方式

2665
01:34:33,000 --> 01:34:36,000
然后 pysong 的话有这个像 tornado

2666
01:34:36,000 --> 01:34:38,000
还有之前那个叫什么 twisted

2667
01:34:38,000 --> 01:34:39,000
对都是这种方式

2668
01:34:39,000 --> 01:34:41,000
然后 ruby 里面是有什么

2669
01:34:42,000 --> 01:34:45,000
ruby 我还真的不知道

2670
01:34:45,000 --> 01:34:46,000
就 node 它

2671
01:34:46,000 --> 01:34:47,000
比如说它底层也是用了像

2672
01:34:48,000 --> 01:34:51,000
c 的那个叫 libuvi 来实现它的异部 IO 的

2673
01:34:51,000 --> 01:34:51,000
对

2674
01:34:51,000 --> 01:34:56,000
我记得 nilvm 它非常重要的

2675
01:34:56,000 --> 01:35:02,000
那个 todo 之一就是要把所有的 vi 的

2676
01:35:02,000 --> 01:35:04,000
编辑器名的 event 都转到

2677
01:35:04,000 --> 01:35:07,000
vm 的编辑器名的 event 都转到 libuvi 上实现

2678
01:35:07,000 --> 01:35:08,000
对

2679
01:35:08,000 --> 01:35:12,000
很多人现在有很多这种采用异部 IO 的

2680
01:35:12,000 --> 01:35:15,000
这种大型程序都在改到用这部包来实现了

2681
01:35:16,000 --> 01:35:17,000
因为它确实写得很好

2682
01:35:17,000 --> 01:35:18,000
什么

2683
01:35:18,000 --> 01:35:20,000
跨平台年都做得挺不错的

2684
01:35:20,000 --> 01:35:24,000
然后 java 的话有那个叫做 nil

2685
01:35:24,000 --> 01:35:26,000
就是新 IO 的那么一个库

2686
01:35:26,000 --> 01:35:29,000
也可以做这种异部 IO 的机制了

2687
01:35:29,000 --> 01:35:30,000
现在还有什么其他的主流语言

2688
01:35:30,000 --> 01:35:32,000
好像也差不多了

2689
01:35:33,000 --> 01:35:34,000
对

2690
01:35:34,000 --> 01:35:34,000
OK

2691
01:35:35,000 --> 01:35:38,000
然后就是异部 IO 到底是做了一件什么样的事情

2692
01:35:38,000 --> 01:35:41,000
就是他们都是在一个很

2693
01:35:41,000 --> 01:35:44,000
就是他们都是在一个单净程的情况下

2694
01:35:44,000 --> 01:35:45,000
去模拟

2695
01:35:45,000 --> 01:35:46,000
或者说这么说

2696
01:35:46,000 --> 01:35:49,000
他们都是在一个单净程的情况下

2697
01:35:49,000 --> 01:35:51,000
去做一些并发的事情

2698
01:35:52,000 --> 01:35:52,000
对

2699
01:35:52,000 --> 01:35:58,000
他们试图用其实就是一个非常简单的例子

2700
01:35:58,000 --> 01:36:02,000
就是我先做一件事情

2701
01:36:02,000 --> 01:36:04,000
然后在这件事情跑了

2702
01:36:04,000 --> 01:36:06,000
渐续之中去做另外一件事情

2703
01:36:06,000 --> 01:36:09,000
比如说回到我们刚才做饭的例子

2704
01:36:09,000 --> 01:36:11,000
我先把锅坐在火上

2705
01:36:11,000 --> 01:36:12,000
然后开始烧水

2706
01:36:12,000 --> 01:36:15,000
然后在烧水的渐细里面我开始切菜

2707
01:36:15,000 --> 01:36:17,000
然后等到水烧开了

2708
01:36:17,000 --> 01:36:17,000
我看到水在滚

2709
01:36:17,000 --> 01:36:19,000
然后我再去滚烧水的事情

2710
01:36:19,000 --> 01:36:22,000
其实就是一个非常异部 IO

2711
01:36:22,000 --> 01:36:24,000
其实就是这样一个非常简单的问题

2712
01:36:24,000 --> 01:36:26,000
只不过它具体实现起来

2713
01:36:26,000 --> 01:36:32,000
会比做菜这么简单的一个任务要复杂很多

2714
01:36:32,000 --> 01:36:33,000
对

2715
01:36:33,000 --> 01:36:34,000
就为什么说

2716
01:36:34,000 --> 01:36:35,000
还有一个问题就是说

2717
01:36:35,000 --> 01:36:38,000
为什么每次提到异部的时候都一定是只 Io

2718
01:36:38,000 --> 01:36:40,000
因为这个是牵涉到计算机

2719
01:36:40,000 --> 01:36:42,000
之前我们某一期讲过

2720
01:36:42,000 --> 01:36:43,000
计算机体系结构的一个问题

2721
01:36:43,000 --> 01:36:48,000
就是说在所有的计算机应用里面

2722
01:36:48,000 --> 01:36:50,000
你只要涉及到 Io 的时候

2723
01:36:50,000 --> 01:36:53,000
CPU 都是远远高于

2724
01:36:53,000 --> 01:36:54,000
就是它的处理速度是远远高于你

2725
01:36:54,000 --> 01:36:57,000
就是输出的速度的

2726
01:36:57,000 --> 01:36:58,000
这样的话一个必然的结果

2727
01:36:58,000 --> 01:37:01,000
就是说如果你只要一旦涉及 Io 的操作

2728
01:37:01,000 --> 01:37:03,000
你的 CPU 就要显示起来等

2729
01:37:03,000 --> 01:37:05,000
那么异部 IO 的他们一个切入点

2730
01:37:05,000 --> 01:37:09,000
就是说我们就不要等 Io 的响应结果

2731
01:37:09,000 --> 01:37:12,000
回来一直等他啥等

2732
01:37:12,000 --> 01:37:13,000
反正也没这事做

2733
01:37:13,000 --> 01:37:16,000
我们在他结果返回来之前

2734
01:37:16,000 --> 01:37:17,000
我们先做点别的事

2735
01:37:17,000 --> 01:37:19,000
然后等那边结果返回来之后

2736
01:37:19,000 --> 01:37:20,000
你再通知我

2737
01:37:20,000 --> 01:37:23,000
我再回来把这件事情接着再捡起来

2738
01:37:23,000 --> 01:37:24,000
接着做下去

2739
01:37:24,000 --> 01:37:25,000
没错

2740
01:37:26,000 --> 01:37:29,000
但是异部 IO 有一个问题

2741
01:37:29,000 --> 01:37:31,000
就是很有可能你协调不好

2742
01:37:32,000 --> 01:37:34,000
对

2743
01:37:34,000 --> 01:37:36,000
就还是用做饭的例子来说

2744
01:37:36,000 --> 01:37:38,000
就是可能你想起来

2745
01:37:38,000 --> 01:37:41,000
你想当人会觉得烧水的时候我切菜

2746
01:37:41,000 --> 01:37:43,000
但是你没有保证在水烧开之前

2747
01:37:43,000 --> 01:37:45,000
你一定能把菜去好

2748
01:37:45,000 --> 01:37:47,000
就是我相信每一个喜欢做饭的人

2749
01:37:47,000 --> 01:37:48,000
都会有这样的窘境

2750
01:37:48,000 --> 01:37:50,000
或者说从一种窘境

2751
01:37:50,000 --> 01:37:53,000
就是同时有很多事情要你去处理

2752
01:37:53,000 --> 01:37:56,000
甚至我记得新干净英语里面

2753
01:37:56,000 --> 01:37:58,000
好像有一期课文就是这个

2754
01:37:58,000 --> 01:38:00,000
就是说一个主妇在和面

2755
01:38:00,000 --> 01:38:02,000
然后电话响了

2756
01:38:02,000 --> 01:38:05,000
同时又有人在敲门

2757
01:38:06,000 --> 01:38:09,000
与此同时再加上如果锅开了

2758
01:38:09,000 --> 01:38:10,000
那在这种情况下你该怎么办

2759
01:38:10,000 --> 01:38:13,000
其实异部的 IO

2760
01:38:13,000 --> 01:38:16,000
基于或者说基于回掉的异部 IO

2761
01:38:16,000 --> 01:38:19,000
就是这样一个与生俱来的问题

2762
01:38:19,000 --> 01:38:22,000
你很难去理解

2763
01:38:22,000 --> 01:38:24,000
或者说很难事先判定

2764
01:38:24,000 --> 01:38:27,000
所有事情的发生的先锋顺序

2765
01:38:27,000 --> 01:38:28,000
然后

2766
01:38:28,000 --> 01:38:31,000
因为你作为一个程序员

2767
01:38:31,000 --> 01:38:34,000
你只能用现行的方式去写来码

2768
01:38:34,000 --> 01:38:37,000
所以你现行的代码是很难处理这样

2769
01:38:37,000 --> 01:38:41,000
一个不知道先后英国顺序的问题

2770
01:38:41,000 --> 01:38:42,000
对

2771
01:38:42,000 --> 01:38:45,000
这里面有一个通常有个词会来描述

2772
01:38:45,000 --> 01:38:48,000
采用异部 IO 的程序结构

2773
01:38:48,000 --> 01:38:49,000
叫做控制流导致

2774
01:38:49,000 --> 01:38:51,000
Inverse Control Flow

2775
01:38:51,000 --> 01:38:55,000
我们通常写代码的时候

2776
01:38:55,000 --> 01:38:57,000
我们就说先怎么样 后怎么样

2777
01:38:57,000 --> 01:38:58,000
它是一个现行的

2778
01:38:58,000 --> 01:38:59,000
前因后果的关系走下来的

2779
01:38:59,000 --> 01:39:00,000
对吧

2780
01:39:00,000 --> 01:39:03,000
但是如果你采用异部 IO 回掉

2781
01:39:03,000 --> 01:39:04,000
方式来做的话

2782
01:39:04,000 --> 01:39:06,000
就会发现

2783
01:39:06,000 --> 01:39:08,000
我消息过来了

2784
01:39:08,000 --> 01:39:09,000
我这个时候该干嘛呢

2785
01:39:09,000 --> 01:39:11,000
你得去找半天

2786
01:39:11,000 --> 01:39:12,000
说我现在应该到这一步了

2787
01:39:12,000 --> 01:39:14,000
我应该恢复到之前那个状态

2788
01:39:14,000 --> 01:39:15,000
然后怎么接着做下去

2789
01:39:15,000 --> 01:39:17,000
其实是一个

2790
01:39:17,000 --> 01:39:20,000
如果人脑就想是一个废事 废脑的事情

2791
01:39:20,000 --> 01:39:21,000
但如果你写代码来做的话

2792
01:39:21,000 --> 01:39:24,000
就是要考虑很多可能

2793
01:39:24,000 --> 01:39:27,000
你预想不到的组合的这种情况出现

2794
01:39:27,000 --> 01:39:29,000
对 错

2795
01:39:29,000 --> 01:39:31,000
但是异部 IO

2796
01:39:31,000 --> 01:39:34,000
基于回到异部 IO 有一个什么样的好处

2797
01:39:34,000 --> 01:39:36,000
就是它可以保证整个

2798
01:39:36,000 --> 01:39:39,000
因为它是一个单进程的这么一个

2799
01:39:39,000 --> 01:39:41,000
单进程或者单线程的这么一个结构

2800
01:39:41,000 --> 01:39:42,000
它有一个好处

2801
01:39:42,000 --> 01:39:44,000
可以完全不用考虑锁的问题

2802
01:39:45,000 --> 01:39:45,000
对

2803
01:39:45,000 --> 01:39:51,000
因为你在任意时刻都只有一个控制流在执行

2804
01:39:51,000 --> 01:39:53,000
这样就一个工作单元在跑

2805
01:39:53,000 --> 01:39:54,000
对 没错

2806
01:39:54,000 --> 01:39:56,000
你就不用去考虑说

2807
01:39:56,000 --> 01:39:59,000
我在我的进程或者是线程

2808
01:39:59,000 --> 01:40:01,000
就是这个的 Memory Space

2809
01:40:01,000 --> 01:40:03,000
就是内存空间以内

2810
01:40:03,000 --> 01:40:04,000
我要去修改任何状态

2811
01:40:04,000 --> 01:40:09,000
我改的时候肯定是不会有任何人跟我抢的

2812
01:40:09,000 --> 01:40:09,000
没错

2813
01:40:09,000 --> 01:40:11,000
这也可能也是有

2814
01:40:11,000 --> 01:40:14,000
我先讲到 JavaScript 的引擎也好

2815
01:40:14,000 --> 01:40:17,000
它很在意的一点

2816
01:40:17,000 --> 01:40:19,000
因为你一旦可以避免锁

2817
01:40:19,000 --> 01:40:23,000
或者就是同步叫什么

2818
01:40:23,000 --> 01:40:24,000
SharedMittableState

2819
01:40:24,000 --> 01:40:26,000
就是共享的可变状态的话

2820
01:40:26,000 --> 01:40:29,000
但可以避免你的整个编程

2821
01:40:31,000 --> 01:40:31,000
怎么说

2822
01:40:32,000 --> 01:40:36,000
难度就会降低很大的一个什么数量级的降低

2823
01:40:36,000 --> 01:40:39,000
但如果你不能保证这一点的话

2824
01:40:39,000 --> 01:40:41,000
你就会牵手到刚才我们讲的

2825
01:40:41,000 --> 01:40:44,000
病型计算的最核心的矛盾

2826
01:40:44,000 --> 01:40:46,000
就是人没有办法去思考

2827
01:40:46,000 --> 01:40:47,000
像机器那样病型的去思考

2828
01:40:48,000 --> 01:40:49,000
对

2829
01:40:49,000 --> 01:40:50,000
对

2830
01:40:50,000 --> 01:40:54,000
但是机翼回掉的 EBO 就是有一个很大的缺陷

2831
01:40:54,000 --> 01:40:57,000
就是他要把我们这个程序整个逻辑流

2832
01:40:57,000 --> 01:40:59,000
分得非常碎

2833
01:40:59,000 --> 01:41:00,000
通过回掉的方式

2834
01:41:00,000 --> 01:41:04,000
你要把它整个逻辑流做到切成很多小片段

2835
01:41:04,000 --> 01:41:06,000
然后每个片段的它之间的关系

2836
01:41:06,000 --> 01:41:08,000
又不是非常的那种很线性很明朗

2837
01:41:08,000 --> 01:41:09,000
这样的话

2838
01:41:09,000 --> 01:41:12,000
对于你理解整个程序的结构

2839
01:41:12,000 --> 01:41:14,000
其实是非常不利的

2840
01:41:14,000 --> 01:41:15,000
对

2841
01:41:15,000 --> 01:41:18,000
在 JavaScript 程序里面经常会有这样的效果

2842
01:41:18,000 --> 01:41:21,000
就是一个回掉

2843
01:41:21,000 --> 01:41:22,000
欠着另外一个回掉

2844
01:41:22,000 --> 01:41:23,000
然后再欠着另外一个回掉

2845
01:41:23,000 --> 01:41:28,000
然后整个最后你写代码的结尾就是扩号分号

2846
01:41:28,000 --> 01:41:29,000
花扩号

2847
01:41:30,000 --> 01:41:30,000
扩号分号

2848
01:41:30,000 --> 01:41:31,000
花扩号

2849
01:41:31,000 --> 01:41:32,000
扩号分号

2850
01:41:32,000 --> 01:41:32,000
对

2851
01:41:32,000 --> 01:41:34,000
这样一层一层牵套进去

2852
01:41:34,000 --> 01:41:34,000
对

2853
01:41:34,000 --> 01:41:35,000
没错

2854
01:41:35,000 --> 01:41:36,000
然后这个有一个专门的

2855
01:41:36,000 --> 01:41:39,000
我们给它一个称呼叫做回掉

2856
01:41:39,000 --> 01:41:40,000
回掉地狱

2857
01:41:40,000 --> 01:41:41,000
callback hell

2858
01:41:41,000 --> 01:41:42,000
callback hell

2859
01:41:42,000 --> 01:41:43,000
对

2860
01:41:43,000 --> 01:41:45,000
然后就说

2861
01:41:45,000 --> 01:41:48,000
我们有没有办法说能够寄保留

2862
01:41:48,000 --> 01:41:49,000
这个单

2863
01:41:49,000 --> 01:41:51,000
就是 EBO 这种单线程

2864
01:41:51,000 --> 01:41:54,000
不需要考虑锁的机制的好处

2865
01:41:54,000 --> 01:41:58,000
同时又可以保留我们程序逻辑是线性

2866
01:41:58,000 --> 01:41:59,000
不用分的

2867
01:41:59,000 --> 01:42:01,000
不用切成小片

2868
01:42:01,000 --> 01:42:01,000
但切得很散

2869
01:42:01,000 --> 01:42:02,000
就是这种状况

2870
01:42:03,000 --> 01:42:06,000
就也有一些很好的尝试

2871
01:42:06,000 --> 01:42:09,000
就是说基于协成这么一个概念

2872
01:42:09,000 --> 01:42:11,000
协成是什么意思

2873
01:42:11,000 --> 01:42:13,000
刚才讲到有进程

2874
01:42:13,000 --> 01:42:13,000
有现成

2875
01:42:13,000 --> 01:42:14,000
有协成

2876
01:42:14,000 --> 01:42:19,000
协成其实是在程序里面自己管理的一个逻辑的

2877
01:42:20,000 --> 01:42:22,000
又要用一个广义的进程了

2878
01:42:22,000 --> 01:42:24,000
对

2879
01:42:24,000 --> 01:42:27,000
我觉得协成其实比较容易理解的

2880
01:42:27,000 --> 01:42:31,000
比较容易理解的点

2881
01:42:31,000 --> 01:42:32,000
就是说

2882
01:42:32,000 --> 01:42:36,000
协成其实是非常贴近现实生活的一个东西

2883
01:42:36,000 --> 01:42:40,000
比如说我在沾模型

2884
01:42:40,000 --> 01:42:42,000
然后这个时候女朋友喊我说

2885
01:42:42,000 --> 01:42:44,000
水开了

2886
01:42:44,000 --> 01:42:45,000
你去把她

2887
01:42:45,000 --> 01:42:47,000
你去泡个茶

2888
01:42:47,000 --> 01:42:49,000
然后我可以很方便的

2889
01:42:49,000 --> 01:42:51,000
放下我手中的工具转身去泡茶

2890
01:42:51,000 --> 01:42:58,000
回来的时候接着我刚才沾到一半的 progress

2891
01:42:58,000 --> 01:43:00,000
progress

2892
01:43:00,000 --> 01:43:01,000
中国是什么

2893
01:43:01,000 --> 01:43:03,000
进度对

2894
01:43:03,000 --> 01:43:06,000
然后继续沾我的模型

2895
01:43:06,000 --> 01:43:10,000
就是说其实现实生活中很多很多事情都是

2896
01:43:10,000 --> 01:43:12,000
可以对应到计算的协成

2897
01:43:12,000 --> 01:43:16,000
但是在传统的没有协成的编程模型里

2898
01:43:16,000 --> 01:43:17,000
编程世界里面

2899
01:43:17,000 --> 01:43:21,000
计算机是不知道怎么保存现场的

2900
01:43:21,000 --> 01:43:23,000
所以说协成其实就是富裕的计算机

2901
01:43:23,000 --> 01:43:27,000
一种保存一个执行到一半的寒暑的现场的能力

2902
01:43:27,000 --> 01:43:30,000
然后告诉你说你做到这儿给了你个断点

2903
01:43:30,000 --> 01:43:31,000
你可以跳出去做别的事情

2904
01:43:31,000 --> 01:43:34,000
回来的时候刚才执行到哪儿

2905
01:43:34,000 --> 01:43:35,000
还可以继续接着执行

2906
01:43:35,000 --> 01:43:36,000
这就是现场

2907
01:43:36,000 --> 01:43:38,000
所有的你的所谓的 context

2908
01:43:38,000 --> 01:43:41,000
你的上下文都还保留在那个原样

2909
01:43:41,000 --> 01:43:44,000
你可以接着假装没有中断的这件事情发生

2910
01:43:44,000 --> 01:43:46,000
一样你接着往前走下去了

2911
01:43:46,000 --> 01:43:48,000
所以其实从这个意义上来讲

2912
01:43:48,000 --> 01:43:49,000
现成也好

2913
01:43:49,000 --> 01:43:50,000
进程也好

2914
01:43:50,000 --> 01:43:50,000
协成也好

2915
01:43:50,000 --> 01:43:51,000
他们都是做到同样一件事情

2916
01:43:51,000 --> 01:43:56,000
就是说是一段可以被随时重

2917
01:43:56,000 --> 01:43:57,000
叫做 resume

2918
01:43:57,000 --> 01:43:58,000
不叫重起叫什么

2919
01:43:59,000 --> 01:44:00,000
恢复

2920
01:44:00,000 --> 01:44:01,000
随时可以减起来

2921
01:44:01,000 --> 01:44:04,000
接着再做下去的这么一个逻辑

2922
01:44:04,000 --> 01:44:04,000
对

2923
01:44:04,000 --> 01:44:06,000
但就是一的缺就是什么呢

2924
01:44:06,000 --> 01:44:07,000
对 resume

2925
01:44:07,000 --> 01:44:08,000
对 没错

2926
01:44:08,000 --> 01:44:09,000
就是说

2927
01:44:09,000 --> 01:44:10,000
但他们的之间的区别在哪里呢

2928
01:44:10,000 --> 01:44:16,000
就是说可能在实现的资源的 overhead 上面是不一样的

2929
01:44:16,000 --> 01:44:18,000
可能最重的可能是进程

2930
01:44:18,000 --> 01:44:21,000
因为超市总要做很多什么 cpu 计存器的切换

2931
01:44:21,000 --> 01:44:22,000
有那些发烧的事情

2932
01:44:22,000 --> 01:44:26,000
还要保留一些什么样的系统的一些不 keeping 的工作

2933
01:44:26,000 --> 01:44:26,000
对

2934
01:44:26,000 --> 01:44:27,000
然后说

2935
01:44:27,000 --> 01:44:29,000
而且主要是在需要的时候

2936
01:44:29,000 --> 01:44:30,000
需要完内存里面的很多数据

2937
01:44:30,000 --> 01:44:31,000
考备一份

2938
01:44:31,000 --> 01:44:32,000
这是非常大

2939
01:44:32,000 --> 01:44:33,000
对

2940
01:44:33,000 --> 01:44:33,000
对

2941
01:44:33,000 --> 01:44:34,000
对

2942
01:44:34,000 --> 01:44:37,000
然后进进程的开箱就相对要少一点

2943
01:44:37,000 --> 01:44:40,000
但是还是比较显著的

2944
01:44:40,000 --> 01:44:40,000
那么协成的

2945
01:44:40,000 --> 01:44:43,000
就是说他直接就绕过超市总内部

2946
01:44:43,000 --> 01:44:48,000
我直接在程序内部通过一种自制的调度器的方式来管理

2947
01:44:48,000 --> 01:44:52,000
我自己的那些 task 那些职业任务

2948
01:44:52,000 --> 01:44:56,000
然后使得有一个非常轻量的资源的开销

2949
01:44:56,000 --> 01:45:01,000
同时又能给我带来像类似于进程或者是现成那样的一个

2950
01:45:01,000 --> 01:45:03,000
线性的逻辑留的好处

2951
01:45:03,000 --> 01:45:04,000
对

2952
01:45:04,000 --> 01:45:09,000
这样前面所提到的一种 inverse control flow 的问题就不会再发生

2953
01:45:09,000 --> 01:45:10,000
没错

2954
01:45:10,000 --> 01:45:10,000
对

2955
01:45:10,000 --> 01:45:13,000
现实中使用协成的例子也是蛮多的

2956
01:45:13,000 --> 01:45:16,000
其实总体来讲

2957
01:45:16,000 --> 01:45:18,000
像勾赖的勾入 team

2958
01:45:18,000 --> 01:45:20,000
它就是一种协成的一种

2959
01:45:20,000 --> 01:45:21,000
一种变种

2960
01:45:21,000 --> 01:45:23,000
然后像 pysong 的话

2961
01:45:23,000 --> 01:45:24,000
它有一个叫做 generator

2962
01:45:24,000 --> 01:45:25,000
生成器的概念

2963
01:45:25,000 --> 01:45:31,000
就是它含述里面是有一个特殊的关键词叫做 yield

2964
01:45:31,000 --> 01:45:33,000
可以暂时的让出

2965
01:45:33,000 --> 01:45:35,000
yield 就是让出的意思

2966
01:45:35,000 --> 01:45:37,000
让出程序的控制流

2967
01:45:37,000 --> 01:45:40,000
然后等那边条件合设的时候

2968
01:45:40,000 --> 01:45:42,000
你再把它回到这个位置

2969
01:45:42,000 --> 01:45:44,000
然后接着从这个点往下直

2970
01:45:44,000 --> 01:45:46,000
然后我知道是 javascript

2971
01:45:46,000 --> 01:45:50,000
从下一个版本还是 7 的时候

2972
01:45:50,000 --> 01:45:50,000
它也在加

2973
01:45:50,000 --> 01:45:51,000
不

2974
01:45:51,000 --> 01:45:51,000
就下一个版本

2975
01:45:51,000 --> 01:45:55,000
就 emax script 6

2976
01:45:55,000 --> 01:45:56,000
这个版本里面

2977
01:45:56,000 --> 01:46:01,000
就已经有类似的 generator 这么一个概念在里面了

2978
01:46:01,000 --> 01:46:03,000
然后 ruby 的话

2979
01:46:03,000 --> 01:46:06,000
它有一个特性叫做 fiber

2980
01:46:06,000 --> 01:46:08,000
也是一个协成的例子

2981
01:46:08,000 --> 01:46:10,000
对 fiber 一般翻译成叫什么千成

2982
01:46:10,000 --> 01:46:14,000
就是比现成更要细的千威千成

2983
01:46:14,000 --> 01:46:16,000
但是让千成就是协成

2984
01:46:16,000 --> 01:46:18,000
因为它是对于 thread 来的

2985
01:46:18,000 --> 01:46:21,000
thread 在支部的语境

2986
01:46:21,000 --> 01:46:23,000
就是仿之间的语境里面是叫什么

2987
01:46:23,000 --> 01:46:24,000
线头对不对

2988
01:46:24,000 --> 01:46:24,000
对

2989
01:46:24,000 --> 01:46:25,000
一个是线

2990
01:46:25,000 --> 01:46:27,000
而 fiber 则是组成千的一根千威

2991
01:46:27,000 --> 01:46:28,000
对

2992
01:46:28,000 --> 01:46:29,000
一根纱

2993
01:46:29,000 --> 01:46:29,000
对

2994
01:46:29,000 --> 01:46:30,000
没错

2995
01:46:30,000 --> 01:46:31,000
这个意思

2996
01:46:31,000 --> 01:46:33,000
然后 pysong 的话

2997
01:46:33,000 --> 01:46:35,000
还有一个

2998
01:46:35,000 --> 01:46:36,000
一个 fork

2999
01:46:36,000 --> 01:46:39,000
算是叫做 g event

3000
01:46:39,000 --> 01:46:43,000
它是可以甚至通过那种方式来做全局的

3001
01:46:43,000 --> 01:46:44,000
这个协成

3002
01:46:44,000 --> 01:46:47,000
而不是说级现于 generator

3003
01:46:47,000 --> 01:46:50,000
这种比较受限的协成

3004
01:46:50,000 --> 01:46:51,000
OK

3005
01:46:51,000 --> 01:46:53,000
所以但问题在于

3006
01:46:53,000 --> 01:46:56,000
不管是毁掉还是协成

3007
01:46:56,000 --> 01:46:57,000
都没有办法

3008
01:46:57,000 --> 01:46:59,000
非常有效的利用多核处理器

3009
01:46:59,000 --> 01:46:59,000
不是

3010
01:46:59,000 --> 01:47:00,000
因为你

3011
01:47:00,000 --> 01:47:03,000
所以你无论如何都只有一个单

3012
01:47:03,000 --> 01:47:05,000
只有一个单个的进程

3013
01:47:05,000 --> 01:47:08,000
没错

3014
01:47:08,000 --> 01:47:09,000
一般是这样子的

3015
01:47:09,000 --> 01:47:10,000
比如刚刚我们看的那几个例子

3016
01:47:10,000 --> 01:47:12,000
它都是因为有这样那样的限制

3017
01:47:12,000 --> 01:47:13,000
导致它不能使用多线证

3018
01:47:13,000 --> 01:47:16,000
但是也并不完全是这样

3019
01:47:16,000 --> 01:47:17,000
比如说 gold 的那个 gold routine

3020
01:47:17,000 --> 01:47:21,000
它其实是可以利用多个处理器核心的

3021
01:47:21,000 --> 01:47:24,000
就是看你这个系统的调度的时候

3022
01:47:24,000 --> 01:47:26,000
你是怎么去调度它而已

3023
01:47:26,000 --> 01:47:27,000
OK

3024
01:47:27,000 --> 01:47:29,000
然后还有像

3025
01:47:29,000 --> 01:47:31,000
erland 这种比较诡异的例子

3026
01:47:31,000 --> 01:47:33,000
但它非常独特的一种机制

3027
01:47:33,000 --> 01:47:36,000
它里面的现成

3028
01:47:36,000 --> 01:47:37,000
不是系统的现成

3029
01:47:37,000 --> 01:47:39,000
它是自己内置的现成

3030
01:47:39,000 --> 01:47:41,000
它也并不是一个协成

3031
01:47:41,000 --> 01:47:42,000
它每个现成都是完全独立

3032
01:47:42,000 --> 01:47:46,000
就是没有任何和其他共享资源的地方

3033
01:47:46,000 --> 01:47:49,000
就是说它的调度其实可以很方便的

3034
01:47:49,000 --> 01:47:53,000
去管理它那些执行的步骤

3035
01:47:53,000 --> 01:47:54,000
他们叫做 aduction

3036
01:47:54,000 --> 01:47:56,000
这么一个步骤的

3037
01:47:56,000 --> 01:47:56,000
对

3038
01:47:56,000 --> 01:47:58,000
erland 我虽然不是很了解

3039
01:47:58,000 --> 01:48:02,000
但我觉得它的思路基本上就是把 sread 当作一种

3040
01:48:02,000 --> 01:48:03,000
语言内在的机制

3041
01:48:03,000 --> 01:48:08,000
而不是对操作系统提供的机制的一种抽象

3042
01:48:08,000 --> 01:48:08,000
没错

3043
01:48:08,000 --> 01:48:12,000
因为它使用的 actrum model

3044
01:48:12,000 --> 01:48:15,000
actrum 模型对这种事情是有天然的需求的

3045
01:48:15,000 --> 01:48:18,000
而且它整个调度器也好

3046
01:48:18,000 --> 01:48:19,000
解析器也好

3047
01:48:19,000 --> 01:48:21,000
就是为这种方式去优化的

3048
01:48:21,000 --> 01:48:23,000
虽然说它的可能

3049
01:48:23,000 --> 01:48:29,000
整体某一个这种所谓的 CPU heavy 的性能不怎么样

3050
01:48:29,000 --> 01:48:34,000
但是它对这种可以并行计算的任务的处理是非常优秀的

3051
01:48:34,000 --> 01:48:35,000
没错

3052
01:48:37,000 --> 01:48:37,000
对

3053
01:48:37,000 --> 01:48:40,000
其实我现在学 Hasco 终于开始

3054
01:48:40,000 --> 01:48:41,000
或者说中意又开始

3055
01:48:41,000 --> 01:48:44,000
为什么突然有这个器机去学它

3056
01:48:44,000 --> 01:48:45,000
我也不知道

3057
01:48:45,000 --> 01:48:52,000
可能主要的器机还是因为之前看的 object-c 的 blog

3058
01:48:53,000 --> 01:48:55,000
他们受其鼓掌

3059
01:48:55,000 --> 01:48:56,000
对不对

3060
01:48:56,000 --> 01:48:56,000
对

3061
01:48:56,000 --> 01:49:00,000
他们提供了大量的奇迹营巧

3062
01:49:00,000 --> 01:49:02,000
就是为了让你写 swift 的时候

3063
01:49:02,000 --> 01:49:03,000
看起来更像 Hasco

3064
01:49:03,000 --> 01:49:05,000
我觉得何必能让我干脆去学一下

3065
01:49:05,000 --> 01:49:06,000
Hasco 好

3066
01:49:06,000 --> 01:49:11,000
但这样的尝试已经有过很多次

3067
01:49:11,000 --> 01:49:12,000
但每次都没有坚持下来

3068
01:49:12,000 --> 01:49:15,000
我觉得这一次应该坚持坚持

3069
01:49:15,000 --> 01:49:17,000
然后在那之后也许可以试试 Long

3070
01:49:18,000 --> 01:49:22,000
因为有的在我北边有一个城市叫做 Longin

3071
01:49:23,000 --> 01:49:25,000
我以前写过一个

3072
01:49:25,000 --> 01:49:26,000
写过一条推

3073
01:49:26,000 --> 01:49:33,000
就是说 Longin 这个地方就是由二战时即被纳粹集中在一起的 Longin 城市

3074
01:49:33,000 --> 01:49:34,000
去建立的

3075
01:49:34,000 --> 01:49:38,000
所以它叫 Longin 在德语里面就是使用 Longin 编程的意思

3076
01:49:40,000 --> 01:49:40,000
对

3077
01:49:40,000 --> 01:49:42,000
Longin 在德语里面什么意思

3078
01:49:42,000 --> 01:49:43,000
没有意义吗

3079
01:49:43,000 --> 01:49:44,000
还是只是个名字而已

3080
01:49:46,000 --> 01:49:47,000
没有什么意义吧

3081
01:49:47,000 --> 01:49:51,000
就至少我找不出什么特别

3082
01:49:51,000 --> 01:49:53,000
至少我想不到什么特别明显的

3083
01:49:53,000 --> 01:49:54,000
我回头回去查一下

3084
01:49:54,000 --> 01:49:54,000
Timbal 的语

3085
01:49:54,000 --> 01:49:58,000
但我基本上可以确定 Longin 跟 Longin 没有任何关系

3086
01:49:58,000 --> 01:50:00,000
因为因为 Rlan 里面

3087
01:50:00,000 --> 01:50:03,000
那个也和人家讲到他是爱丽信的实验室

3088
01:50:03,000 --> 01:50:04,000
做的语言

3089
01:50:04,000 --> 01:50:05,000
叫做 Arxon Language

3090
01:50:05,000 --> 01:50:06,000
所以是 Rlan

3091
01:50:07,000 --> 01:50:08,000
原来是这么来的

3092
01:50:08,000 --> 01:50:10,000
你不知道

3093
01:50:10,000 --> 01:50:10,000
不知道

3094
01:50:10,000 --> 01:50:14,000
我原来了解非常有限

3095
01:50:14,000 --> 01:50:14,000
对

3096
01:50:14,000 --> 01:50:15,000
它就是这么

3097
01:50:15,000 --> 01:50:18,000
而且它有一个可能之后有一期专门讲 Rlan 的时候再说

3098
01:50:19,000 --> 01:50:20,000
还有一个很有意思的

3099
01:50:21,000 --> 01:50:24,000
看起来甚至有点 weird 的一个短视频

3100
01:50:24,000 --> 01:50:26,000
非常有意思

3101
01:50:27,000 --> 01:50:30,000
他们因为 Rlan 最开始的用途是用于做

3102
01:50:31,000 --> 01:50:31,000
叫做什么

3103
01:50:31,000 --> 01:50:33,000
电话交换机的控制的

3104
01:50:33,000 --> 01:50:34,000
控制播号

3105
01:50:34,000 --> 01:50:35,000
然后怎么样

3106
01:50:35,000 --> 01:50:40,000
它的视频整个过程都在描述这么一个过程中

3107
01:50:40,000 --> 01:50:42,000
Rlan 是怎么样起作用的

3108
01:50:42,000 --> 01:50:43,000
非常好笑的一个视频

3109
01:50:43,000 --> 01:50:44,000
一定要看一下

3110
01:50:45,000 --> 01:50:47,000
有一种 multiplyton 的计视感

3111
01:50:49,000 --> 01:50:50,000
有意思

3112
01:50:50,000 --> 01:50:51,000
所以处理电话不好

3113
01:50:51,000 --> 01:50:56,000
其实是听起来也是一个天生就带有并发性质的问题

3114
01:50:56,000 --> 01:50:59,000
没错

3115
01:50:59,000 --> 01:50:59,000
对

3116
01:50:59,000 --> 01:51:02,000
所以在从这样一种领域里面

3117
01:51:02,000 --> 01:51:04,000
为了解决这样一个领域的问题

3118
01:51:04,000 --> 01:51:06,000
而诞生的变畅语言

3119
01:51:06,000 --> 01:51:11,000
也就天生的非常强调解决这种问题的方便程度

3120
01:51:13,000 --> 01:51:16,000
而且我觉得它 Rlan 这种方式

3121
01:51:16,000 --> 01:51:19,000
而且才有那种像 Ackermodel 也好

3122
01:51:19,000 --> 01:51:21,000
它自己的调度器也好

3123
01:51:21,000 --> 01:51:25,000
它有一个很成熟的叫做监控的系统

3124
01:51:25,000 --> 01:51:27,000
Supervision System

3125
01:51:27,000 --> 01:51:28,000
叫做 OTP

3126
01:51:28,000 --> 01:51:30,000
就是 Open Telecom Platform

3127
01:51:30,000 --> 01:51:32,000
开放电信平台

3128
01:51:32,000 --> 01:51:33,000
听起来很怪

3129
01:51:33,000 --> 01:51:34,000
为什么会是电信

3130
01:51:34,000 --> 01:51:35,000
听起来非常电信

3131
01:51:35,000 --> 01:51:36,000
对

3132
01:51:36,000 --> 01:51:37,000
听起来非常爱理性

3133
01:51:37,000 --> 01:51:42,000
但是它确实是解决了很多这种大型软件工程的一些问题

3134
01:51:42,000 --> 01:51:46,000
比如说它里面的所有的那些线程

3135
01:51:46,000 --> 01:51:47,000
我们叫做 Ackerm 也好

3136
01:51:47,000 --> 01:51:48,000
它是随时可以

3137
01:51:48,000 --> 01:51:50,000
可以让它的错误处理

3138
01:51:50,000 --> 01:51:51,000
即使是不处理

3139
01:51:51,000 --> 01:51:53,000
让它 crash 掉

3140
01:51:53,000 --> 01:51:56,000
然后 crash 掉之后怎么办呢

3141
01:51:56,000 --> 01:51:57,000
它每一个 Ackerm

3142
01:51:57,000 --> 01:52:00,000
它会为它分配一个叫做 Supervisor

3143
01:52:00,000 --> 01:52:03,000
Supervisor 就是监管管理者

3144
01:52:03,000 --> 01:52:04,000
然后这个管理者

3145
01:52:04,000 --> 01:52:05,000
不叫每一个

3146
01:52:05,000 --> 01:52:05,000
不是

3147
01:52:05,000 --> 01:52:08,000
就是说这里说错了

3148
01:52:08,000 --> 01:52:09,000
应该重新讲一下

3149
01:52:09,000 --> 01:52:11,000
应该说它里面每一个 Ackerm

3150
01:52:11,000 --> 01:52:14,000
都是被一个 Supervisor 管理的

3151
01:52:14,000 --> 01:52:16,000
如果这个 Supervisor 探测到 Ackerm 挂掉了

3152
01:52:16,000 --> 01:52:17,000
它就会或者死掉了

3153
01:52:17,000 --> 01:52:20,000
它就会重新再起一个一模一样的

3154
01:52:21,000 --> 01:52:23,000
然后它里面整个这种

3155
01:52:23,000 --> 01:52:27,000
这一套思维者学是非常很不一样

3156
01:52:27,000 --> 01:52:29,000
而且你到目前为止

3157
01:52:29,000 --> 01:52:30,000
我们做的那种

3158
01:52:30,000 --> 01:52:32,000
很多这种像做的那种大规模的

3159
01:52:32,000 --> 01:52:33,000
分布式一种的维护的

3160
01:52:33,000 --> 01:52:34,000
所以会发现

3161
01:52:34,000 --> 01:52:36,000
你做的这种越大

3162
01:52:36,000 --> 01:52:38,000
你越会你的什么

3163
01:52:38,000 --> 01:52:40,000
整个架构会越靠近

3164
01:52:40,000 --> 01:52:42,000
像 Orlan 的这种这套模型来讲

3165
01:52:42,000 --> 01:52:45,000
比如说很简单的一个 Google 的例子

3166
01:52:45,000 --> 01:52:46,000
Google 说

3167
01:52:46,000 --> 01:52:49,000
它传统上我们做的这种服务器软件

3168
01:52:49,000 --> 01:52:49,000
我们都要考虑说

3169
01:52:49,000 --> 01:52:52,000
我们服务器不要挂掉

3170
01:52:52,000 --> 01:52:54,000
我们要它稳定可靠

3171
01:52:54,000 --> 01:52:54,000
对吧

3172
01:52:54,000 --> 01:52:56,000
就像我们说服务器的可靠性

3173
01:52:56,000 --> 01:52:57,000
要高于工作站

3174
01:52:57,000 --> 01:53:00,000
然后工作站的可靠性要高于这种个人 PC 的

3175
01:53:00,000 --> 01:53:02,000
但是你为了换取更高可靠性

3176
01:53:02,000 --> 01:53:03,000
你要付出更高的成本

3177
01:53:03,000 --> 01:53:04,000
就是单位硬件

3178
01:53:04,000 --> 01:53:05,000
或单位机场能的成本

3179
01:53:05,000 --> 01:53:06,000
你是要上去了吗

3180
01:53:06,000 --> 01:53:08,000
然后 Google 当年的做法就是说

3181
01:53:08,000 --> 01:53:12,000
我们做大规模的这种服务端

3182
01:53:12,000 --> 01:53:14,000
我们不需要用这种服务

3183
01:53:14,000 --> 01:53:16,000
就是 server grade hardware

3184
01:53:16,000 --> 01:53:17,000
就是服务器级别的硬件

3185
01:53:17,000 --> 01:53:19,000
什么高档处理器

3186
01:53:19,000 --> 01:53:21,000
或者是高档机房这种东西

3187
01:53:21,000 --> 01:53:23,000
我们就用普通的所谓的 commodity hardware

3188
01:53:23,000 --> 01:53:25,000
就是说

3189
01:53:25,000 --> 01:53:26,000
虽然说可见的

3190
01:53:26,000 --> 01:53:28,000
拓手可得的普通的机器

3191
01:53:28,000 --> 01:53:30,000
就普通的机器就可以随意提防的机器

3192
01:53:30,000 --> 01:53:32,000
然后它虽然说它的故障率

3193
01:53:32,000 --> 01:53:35,000
要比这种所谓的服务器级别硬件要高

3194
01:53:35,000 --> 01:53:38,000
但是我们只要把软件的容错写好

3195
01:53:38,000 --> 01:53:40,000
我们它随时挂掉

3196
01:53:40,000 --> 01:53:43,000
任何几个机器都是没有不影响我们系统

3197
01:53:43,000 --> 01:53:44,000
整个系统运作的

3198
01:53:44,000 --> 01:53:46,000
然后你要实现这一点

3199
01:53:46,000 --> 01:53:49,000
你就会发现你会越来越的类似

3200
01:53:49,000 --> 01:53:51,000
用到类似于 Orland 的那种机制

3201
01:53:51,000 --> 01:53:52,000
要去监控

3202
01:53:52,000 --> 01:53:56,000
然后要去假设错误是不可恢复的

3203
01:53:56,000 --> 01:53:57,000
然后如果遇到错误

3204
01:53:57,000 --> 01:53:59,000
你就要重新起一个新的节点

3205
01:53:59,000 --> 01:54:02,000
来接替之前挂掉的那些节点的工作

3206
01:54:02,000 --> 01:54:03,000
那诸如此类的事情

3207
01:54:03,000 --> 01:54:05,000
对

3208
01:54:05,000 --> 01:54:07,000
这我脑中浮现出了

3209
01:54:07,000 --> 01:54:11,000
早期电话系统那种一排接线机器

3210
01:54:11,000 --> 01:54:15,000
前面做了很多接线员的成绩

3211
01:54:15,000 --> 01:54:18,000
然后一个 super s 在那边看说

3212
01:54:18,000 --> 01:54:21,000
这个接线员累倒在了工作转位上

3213
01:54:21,000 --> 01:54:22,000
立刻把它撤走

3214
01:54:22,000 --> 01:54:25,000
换另外一个来插线图

3215
01:54:25,000 --> 01:54:27,000
感觉是血汗攻略

3216
01:54:27,000 --> 01:54:28,000
没错

3217
01:54:28,000 --> 01:54:32,000
其实说到这个也就想到上一期

3218
01:54:32,000 --> 01:54:33,000
我们跟莫瑶聊的说

3219
01:54:33,000 --> 01:54:37,000
他们你们学 Hasco 的动机是什么

3220
01:54:37,000 --> 01:54:39,000
那或者说

3221
01:54:39,000 --> 01:54:42,000
那我觉得可以把这个问题放化为

3222
01:54:42,000 --> 01:54:44,000
学 Aland 或者是 Hasco 这种比较

3223
01:54:44,000 --> 01:54:48,000
加以号小众的变成语言

3224
01:54:48,000 --> 01:54:52,000
它的比较比较功利的一个效果

3225
01:54:52,000 --> 01:54:54,000
就是你可能会发现

3226
01:54:54,000 --> 01:54:57,000
当你需要解决一个特定领域的问题的时候

3227
01:54:57,000 --> 01:55:00,000
你会发现在这种比较小众语言里面

3228
01:55:00,000 --> 01:55:01,000
已经有了相当好的解决方式

3229
01:55:01,000 --> 01:55:08,000
已经有先人对此深思熟虑过

3230
01:55:08,000 --> 01:55:11,000
并且设计出一个非常好的模型

3231
01:55:11,000 --> 01:55:13,000
那么当你在

3232
01:55:13,000 --> 01:55:16,000
当你在用你的所谓原生语言去解决

3233
01:55:16,000 --> 01:55:18,000
它的时候就会方便

3234
01:55:18,000 --> 01:55:19,000
对

3235
01:55:19,000 --> 01:55:22,000
就算是说你不一定真的用到语言的

3236
01:55:22,000 --> 01:55:23,000
具体的实现

3237
01:55:23,000 --> 01:55:27,000
甚至你都不会用语言去写新的代码

3238
01:55:27,000 --> 01:55:29,000
但是你从这里面学到的这种思想

3239
01:55:29,000 --> 01:55:32,000
可能会有助于你在现语的工作中

3240
01:55:32,000 --> 01:55:35,000
去提升你的架构的能力也好

3241
01:55:35,000 --> 01:55:36,000
或者说是你去抽象事物的能力

3242
01:55:36,000 --> 01:55:37,000
你会发现

3243
01:55:37,000 --> 01:55:37,000
诶

3244
01:55:37,000 --> 01:55:39,000
原来还可以从这个角度去思考问题

3245
01:55:39,000 --> 01:55:40,000
对吧

3246
01:55:40,000 --> 01:55:41,000
对

3247
01:55:41,000 --> 01:55:45,000
这是为什么人要去努力做一个 poligot

3248
01:55:45,000 --> 01:55:46,000
这就好像你多学一个

3249
01:55:46,000 --> 01:55:48,000
捷克为言语

3250
01:55:48,000 --> 01:55:50,000
就是你会几种语言

3251
01:55:50,000 --> 01:55:51,000
你就有几种人生

3252
01:55:51,000 --> 01:55:55,000
所以变成语言其实也是这样的

3253
01:55:55,000 --> 01:55:56,000
你会几种语言

3254
01:55:56,000 --> 01:55:57,000
你就可以

3255
01:55:57,000 --> 01:55:58,000
你就多几种语言

3256
01:55:58,000 --> 01:56:01,000
我们就可以多理解几种变成模型

3257
01:56:01,000 --> 01:56:01,000
要怎么

3258
01:56:01,000 --> 01:56:03,000
称赐多泰才素美

3259
01:56:03,000 --> 01:56:04,000
这里又体现出来了

3260
01:56:04,000 --> 01:56:05,000
没错

3261
01:56:08,000 --> 01:56:09,000
差不多了

3262
01:56:09,000 --> 01:56:09,000
好吧

3263
01:56:09,000 --> 01:56:10,000
今天

3264
01:56:10,000 --> 01:56:11,000
你也结尾一下吧

3265
01:56:13,000 --> 01:56:14,000
对

3266
01:56:14,000 --> 01:56:17,000
所以今天我们大概就讲述了

3267
01:56:17,000 --> 01:56:19,000
当然可能不是非常的满意

3268
01:56:19,000 --> 01:56:20,000
因为做了很多

3269
01:56:22,000 --> 01:56:26,000
解释一些比较复杂的问题的尝试

3270
01:56:26,000 --> 01:56:28,000
但是都没有能力

3271
01:56:28,000 --> 01:56:29,000
失败了

3272
01:56:29,000 --> 01:56:30,000
对

3273
01:56:30,000 --> 01:56:31,000
都没有能力做得很好

3274
01:56:31,000 --> 01:56:33,000
这可能也从另外一个侧面反映出了

3275
01:56:35,000 --> 01:56:36,000
并发和异步

3276
01:56:36,000 --> 01:56:41,000
其实的确是在变成语比较难的一些问题

3277
01:56:42,000 --> 01:56:45,000
当然也有可能说我们两个太水

3278
01:56:45,000 --> 01:56:46,000
这是肯定的

3279
01:56:46,000 --> 01:56:48,000
我从来不怀疑

3280
01:56:48,000 --> 01:56:49,000
那句话怎么说来着

3281
01:56:49,000 --> 01:56:50,000
就是说

3282
01:56:50,000 --> 01:56:53,000
如果你能够用几句话的东西

3283
01:56:53,000 --> 01:56:57,000
或者说你能够很清晰明白的给人家解释一个东西

3284
01:56:57,000 --> 01:56:59,000
那么你对这个事情的理解

3285
01:56:59,000 --> 01:57:00,000
就肯定是比较透彻

3286
01:57:00,000 --> 01:57:01,000
但是如果你解释不了

3287
01:57:01,000 --> 01:57:04,000
很有可能是你自己理解的还不够深刻

3288
01:57:04,000 --> 01:57:04,000
对

3289
01:57:04,000 --> 01:57:07,000
就是有很多东西都会有这样一个阶段

3290
01:57:07,000 --> 01:57:08,000
就是你以为自己懂了

3291
01:57:08,000 --> 01:57:11,000
但是当你要像别人解释的时候

3292
01:57:11,000 --> 01:57:13,000
会发现自己其实并不是真的理解

3293
01:57:15,000 --> 01:57:15,000
对

3294
01:57:15,000 --> 01:57:17,000
从这个侧面来说

3295
01:57:17,000 --> 01:57:20,000
我觉得可能做 podcast 对不知道你

3296
01:57:20,000 --> 01:57:22,000
但对我来说也是一个非常大的帮助

3297
01:57:22,000 --> 01:57:27,000
就是就像之前我在智慧答案里面说过的

3298
01:57:27,000 --> 01:57:32,000
就是非常帮助我去把自己之前

3299
01:57:32,000 --> 01:57:36,000
可能一致半解的部分弄得比较二致异解

3300
01:57:36,000 --> 01:57:40,000
就是把它为了做好一些节目

3301
01:57:40,000 --> 01:57:42,000
可能我会去看一些相关的书

3302
01:57:42,000 --> 01:57:46,000
这些对我来说也是非常大的帮助

3303
01:57:46,000 --> 01:57:46,000
不光是这个

3304
01:57:46,000 --> 01:57:50,000
就是不管你是在说口述也好

3305
01:57:50,000 --> 01:57:52,000
还是说笔头写下来也好

3306
01:57:52,000 --> 01:57:54,000
就是你整个在输出的过程

3307
01:57:54,000 --> 01:57:59,000
其实就是在考验你内部的什么知识的组织也好

3308
01:57:59,000 --> 01:58:00,000
还是你的理解也好

3309
01:58:00,000 --> 01:58:00,000
对吧

3310
01:58:00,000 --> 01:58:04,000
都是它对于是一个使用的过程

3311
01:58:04,000 --> 01:58:05,000
这个时候你会发现

3312
01:58:05,000 --> 01:58:08,000
如果你的对某一点理解不够透彻的话

3313
01:58:08,000 --> 01:58:10,000
你就是没有办法解释清楚的

3314
01:58:10,000 --> 01:58:11,000
对

3315
01:58:11,000 --> 01:58:15,000
所以也希望这期节目能够起到

3316
01:58:15,000 --> 01:58:16,000
刨正也能作用

3317
01:58:16,000 --> 01:58:23,000
如果那位听众对于异部和病发有比较深刻的理解

3318
01:58:23,000 --> 01:58:26,000
然后觉得一些我们没有讲清楚

3319
01:58:26,000 --> 01:58:29,000
但是讲错了概念可以值得纠正的话

3320
01:58:29,000 --> 01:58:31,000
那也欢迎你写信给我们

3321
01:58:31,000 --> 01:58:35,000
我们的电子邮件地址是

3322
01:58:35,000 --> 01:58:38,000
carnalpanicatipn.li

3323
01:58:38,000 --> 01:58:40,000
然后也欢迎你播放我们的热情电话

3324
01:58:40,000 --> 01:58:45,000
011899988199991197253

3325
01:58:47,000 --> 01:58:48,000
好

3326
01:58:48,000 --> 01:58:49,000
如果你非常喜欢我们的节目

3327
01:58:49,000 --> 01:58:52,000
或者说不管你是不是喜欢我们的节目

3328
01:58:52,000 --> 01:58:53,000
都欢迎你为我们捐款

3329
01:58:53,000 --> 01:58:55,000
捐款的地址是

3330
01:58:55,000 --> 01:59:00,000
carnalpanic.fm.donate.do.nate

3331
01:59:00,000 --> 01:59:01,000
进隔随意

3332
01:59:01,000 --> 01:59:05,000
但必须是可以被拔整除的正整数

3333
01:59:05,000 --> 01:59:10,000
然后为了向现代机构基础组成

3334
01:59:10,000 --> 01:59:11,000
bite 致敬

3335
01:59:11,000 --> 01:59:15,000
我们把它设定为至少要被拔整除

3336
01:59:17,000 --> 01:59:17,000
好吧

3337
01:59:17,000 --> 01:59:19,000
那今天就到这了

3338
01:59:19,000 --> 01:59:19,000
OK

3339
01:59:20,000 --> 01:59:21,000
对

3340
01:59:21,000 --> 01:59:21,000
感谢

3341
01:59:21,000 --> 01:59:22,000
下次再见

3342
01:59:22,000 --> 01:59:22,000
下期再见

3343
01:59:22,000 --> 01:59:23,000
拜拜

